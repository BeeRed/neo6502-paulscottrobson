;
;	This file is automatically generated.
;
StandardTokens:
	.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
	.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
	.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
	.byte	$04,$57,$45,$4e,$44                     	; $83 wend
	.byte	$02,$49,$46                             	; $84 if
	.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
	.byte	$02,$44,$4f                             	; $86 do
	.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
	.byte	$04,$50,$52,$4f,$43                     	; $88 proc
	.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
	.byte	$03,$46,$4f,$52                         	; $8a for
	.byte	$04,$4e,$45,$58,$54                     	; $8b next
	.byte	$00                                     	; $8c [[end]]
	.byte	$00                                     	; $8d [[shift]]
	.byte	$04,$45,$4c,$53,$45                     	; $8e else
	.byte	$04,$54,$48,$45,$4e                     	; $8f then
	.byte	$02,$54,$4f                             	; $90 to
	.byte	$04,$53,$54,$45,$50                     	; $91 step
	.byte	$03,$4c,$45,$54                         	; $92 let
	.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
	.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
	.byte	$04,$43,$41,$4c,$4c                     	; $95 call
	.byte	$03,$53,$59,$53                         	; $96 sys
	.byte	$03,$52,$45,$4d                         	; $97 rem
	.byte	$04,$45,$58,$49,$54                     	; $98 exit
	.byte	$01,$2c                                 	; $99 ,
	.byte	$01,$3b                                 	; $9a ;
	.byte	$01,$3a                                 	; $9b :
	.byte	$01,$27                                 	; $9c '
	.byte	$01,$29                                 	; $9d )
	.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
	.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
	.byte	$04,$52,$45,$41,$44                     	; $a0 read
	.byte	$04,$44,$41,$54,$41                     	; $a1 data
	.byte	$01,$5b                                 	; $a2 [
	.byte	$01,$5d                                 	; $a3 ]
	.byte	0											; $a4
	.byte	0											; $a5
	.byte	0											; $a6
	.byte	0											; $a7
	.byte	0											; $a8
	.byte	0											; $a9
	.byte	0											; $aa
	.byte	0											; $ab
	.byte	0											; $ac
	.byte	0											; $ad
	.byte	0											; $ae
	.byte	0											; $af
	.byte	0											; $b0
	.byte	0											; $b1
	.byte	0											; $b2
	.byte	0											; $b3
	.byte	0											; $b4
	.byte	0											; $b5
	.byte	0											; $b6
	.byte	0											; $b7
	.byte	0											; $b8
	.byte	0											; $b9
	.byte	0											; $ba
	.byte	0											; $bb
	.byte	0											; $bc
	.byte	0											; $bd
	.byte	0											; $be
	.byte	0											; $bf
	.byte	0											; $c0
	.byte	0											; $c1
	.byte	0											; $c2
	.byte	0											; $c3
	.byte	0											; $c4
	.byte	0											; $c5
	.byte	0											; $c6
	.byte	0											; $c7
	.byte	0											; $c8
	.byte	0											; $c9
	.byte	0											; $ca
	.byte	0											; $cb
	.byte	0											; $cc
	.byte	0											; $cd
	.byte	0											; $ce
	.byte	0											; $cf
	.byte	0											; $d0
	.byte	0											; $d1
	.byte	0											; $d2
	.byte	0											; $d3
	.byte	0											; $d4
	.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
	.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
	.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
	.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
	.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
	.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
	.byte	$04,$56,$41,$4c,$28                     	; $db val(
	.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
	.byte	$04,$41,$42,$53,$28                     	; $dd abs(
	.byte	$04,$4c,$45,$4e,$28                     	; $de len(
	.byte	$04,$53,$51,$52,$28                     	; $df sqr(
	.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
	.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
	.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
	.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
	.byte	$04,$54,$49,$4d,$45                     	; $e4 time
	.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
	.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
	.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
	.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
	.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
	.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
	.byte	$01,$28                                 	; $eb (
	.byte	$01,$24                                 	; $ec $
	.byte	$00                                     	; $ed [[decimal]]
	.byte	$00                                     	; $ee [[string]]
	.byte	$01,$3d                                 	; $ef =
	.byte	$02,$3c,$3e                             	; $f0 <>
	.byte	$02,$3c,$3d                             	; $f1 <=
	.byte	$01,$3c                                 	; $f2 <
	.byte	$02,$3e,$3d                             	; $f3 >=
	.byte	$01,$3e                                 	; $f4 >
	.byte	$03,$58,$4f,$52                         	; $f5 xor
	.byte	$02,$4f,$52                             	; $f6 or
	.byte	$03,$41,$4e,$44                         	; $f7 and
	.byte	$03,$44,$49,$56                         	; $f8 div
	.byte	$03,$4d,$4f,$44                         	; $f9 mod
	.byte	$02,$3c,$3c                             	; $fa <<
	.byte	$02,$3e,$3e                             	; $fb >>
	.byte	$01,$2f                                 	; $fc /
	.byte	$01,$2a                                 	; $fd *
	.byte	$01,$2d                                 	; $fe -
	.byte	$01,$2b                                 	; $ff +
	.byte	$FF
AlternateTokens:
	.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
	.byte	$03,$4e,$45,$57                         	; $8d81 new
	.byte	$03,$52,$55,$4e                         	; $8d82 run
	.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
	.byte	$03,$45,$4e,$44                         	; $8d84 end
	.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
	.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
	.byte	$04,$53,$41,$56,$45                     	; $8d87 save
	.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
	.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
	.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
	.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
	.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
	.byte	$03,$44,$49,$4d                         	; $8d8d dim
	.byte	$FF
