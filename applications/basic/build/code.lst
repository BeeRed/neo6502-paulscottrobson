
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Fri Jun  9 20:54:27 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 00 1f	jsr $1f00			jsr 	PGMSetBaseAddress
.1007	20 3f 2a	jsr $2a3f			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c 8d 14	jmp $148d			jmp 	Command_RUN
.1012	4c dd 13	jmp $13dd			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$aa					PR_READ = $aa
=$ab					PR_DATA = $ab
=$ac					PR_RESTORE = $ac
=$ac					PR_STANDARD_LAST = $ac
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber
.1018	a2 08		ldx #$08			ldx 	#IFR0
.101a	20 4d 30	jsr $304d			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c 65 25	jmp $2565		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1025	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1027	f0 14		beq $103d			beq 	_CLNoParam
.1029	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.102b	f0 10		beq $103d			beq 	_CLNoParam
.102d	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16 			; address for CLEAR
.1030	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1032	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1034	b0 0b		bcs $1041			bcs 	_CLMemory
.1036	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1038	90 07		bcc $1041			bcc 	_CLMemory
.103a	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory.
.103d					_CLNoParam:
.103d	20 44 10	jsr $1044			jsr 	ClearCode
.1040	60		rts				rts
.1041					_CLMemory:
.1041	4c ff 25	jmp $25ff		jmp	ErrorV_memory
.1044					ClearCode:
.1044	20 13 1f	jsr $1f13			jsr 	PGMEndProgram 				; end program => zTemp0
.1047	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1049	a5 23		lda $23				lda 	zTemp0+1
.104b	1a		inc a				inc 	a
.104c	85 29		sta $29				sta 	freeMemory+1
.104e	20 de 29	jsr $29de			jsr 	VARClearHashTables
.1051	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.1054	20 1b 27	jsr $271b			jsr 	StackReset
.1057	20 7a 27	jsr $277a			jsr 	StringSystemInitialise
.105a	20 7a 24	jsr $247a			jsr 	ScanProcedures
.105d	20 5f 14	jsr $145f			jsr 	Command_RESTORE
.1060	60		rts				rts
.1061					AllocateMemory:
.1061	5a		phy				phy 								; save Y
.1062	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low
.1064	5a		phy				phy
.1065	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.1067	5a		phy				phy
.1068	a8		tay				tay 								; count is now in XY
.1069					_AllocateLoop:
.1069	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.106b	d0 04		bne $1071			bne 	_AllocateOne
.106d	c0 00		cpy #$00			cpy 	#0
.106f	f0 15		beq $1086			beq 	_AllocateExit
.1071					_AllocateOne:
.1071	a9 00		lda #$00			lda 	#0 							; zero byte
.1073	92 28		sta ($28)			sta 	(freeMemory)
.1075	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.1077	d0 05		bne $107e			bne 	_AllocateSkipCarry
.1079	e6 29		inc $29				inc 	freeMemory+1
.107b	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.107e					_AllocateSkipCarry:
.107e	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1080	d0 01		bne $1083			bne 	_AllocateSkipBorrow
.1082	ca		dex				dex
.1083					_AllocateSkipBorrow:
.1083	88		dey				dey
.1084	80 e3		bra $1069			bra 	_AllocateLoop
.1086					_AllocateExit:
.1086	fa		plx				plx 								; restore address
.1087	68		pla				pla
.1088	7a		ply				ply 								; restore Y
.1089	60		rts				rts
.108a					ClearCheckMemory:
.108a	a5 29		lda $29				lda 	freeMemory+1
.108c	1a		inc a				inc 	a
.108d	1a		inc a				inc 	a
.108e	cd 23 06	cmp $0623			cmp 	stringMemory+1
.1091	b0 01		bcs $1094			bcs  	_CCMError
.1093	60		rts				rts
.1094					_CCMError:
.1094	4c ff 25	jmp $25ff		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1097					CommandDIM:
.1097	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1099	29 c0		and #$c0			and 	#$C0
.109b	c9 40		cmp #$40			cmp 	#$40
.109d	d0 39		bne $10d8			bne 	_CDSyntax
.109f	20 95 29	jsr $2995			jsr 	VARGetInfo 					; get information
.10a2	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.10a5	29 02		and #$02			and 	#2
.10a7	f0 2f		beq $10d8			beq 	_CDSyntax
.10a9	20 47 29	jsr $2947			jsr 	VARFind 					; does it already exist
.10ac	b0 2d		bcs $10db			bcs 	_CDExists
.10ae	20 f3 28	jsr $28f3			jsr 	VARCreate 					; create it - returns data ptr in XA
.10b1	da		phx				phx 								; save target address
.10b2	48		pha				pha
.10b3	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10b6	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b8	20 de 10	jsr $10de			jsr 	CreateArray 				; create array to XA
.10bb	84 24		sty $24				sty 	zTemp1 						; save Y
.10bd	7a		ply				ply 								; restore target to zTemp0
.10be	84 22		sty $22				sty 	zTemp0
.10c0	7a		ply				ply
.10c1	84 23		sty $23				sty 	zTemp0+1
.10c3	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10c5	a0 01		ldy #$01			ldy 	#1
.10c7	8a		txa				txa
.10c8	91 22		sta ($22),y			sta 	(zTemp0),y
.10ca	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10cc	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 				; check )
.10cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10d1	c8		iny				iny
.10d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10d4	f0 c1		beq $1097			beq 	CommandDIM
.10d6	88		dey				dey
.10d7	60		rts				rts
.10d8					_CDSyntax:
.10d8	4c 0f 25	jmp $250f		jmp	ErrorV_syntax
.10db					_CDExists:
.10db	4c d7 25	jmp $25d7		jmp	ErrorV_redefine
.10de					CreateArray:
.10de	8d 03 05	sta $0503			sta 	CAType						; save type
.10e1	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10e4	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e8	f0 04		beq $10ee			beq 	_CATwoDimensions
.10ea	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ed	60		rts				rts
.10ee					_CATwoDimensions:
.10ee	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10f0	8d 05 05	sta $0505			sta 	CADim1+1
.10f3	a5 08		lda $08				lda 	IFR0+IM0
.10f5	8d 04 05	sta $0504			sta 	CADim1+0
.10f8	20 b4 26	jsr $26b4			jsr 	ERRCheckComma 				; check comma
.10fb	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10fe	5a		phy				phy 								; save Y position
.10ff	18		clc				clc 								; allocate the outer array of pointers.
.1100	ae 05 05	ldx $0505			ldx 	CADim1+1
.1103	ad 04 05	lda $0504			lda 	CADim1
.1106	20 79 11	jsr $1179			jsr 	CSAAllocate 				; allocate the outer array
.1109	da		phx				phx									; save this address on the stack
.110a	48		pha				pha
.110b	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.110d	85 26		sta $26				sta 	zTemp2
.110f					_CACreateSubLoop:
.110f	38		sec				sec
.1110	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create data array of required size.
.1113	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1115	91 26		sta ($26),y			sta 	(zTemp2),y
.1117	8a		txa				txa
.1118	c8		iny				iny
.1119	91 26		sta ($26),y			sta 	(zTemp2),y
.111b	18		clc				clc  								; next slot.
.111c	a5 26		lda $26				lda 	zTemp2
.111e	69 02		adc #$02			adc 	#2
.1120	85 26		sta $26				sta 	zTemp2
.1122	90 02		bcc $1126			bcc 	_CACNoCarry
.1124	e6 27		inc $27				inc 	zTemp2+1
.1126					_CACNoCarry:
.1126	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1129	d0 03		bne $112e			bne 	_CACNoBorrow
.112b	ce 05 05	dec $0505			dec 	CADim1+1
.112e					_CACNoBorrow:
.112e	ce 04 05	dec $0504			dec 	CADim1
.1131	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1134	10 d9		bpl $110f			bpl 	_CACreateSubLoop
.1136	68		pla				pla
.1137	fa		plx				plx
.1138	7a		ply				ply
.1139	60		rts				rts
.113a					CreateSingleArray:
.113a	5a		phy				phy
.113b	38		sec				sec 								; allocate memory block all zeros.
.113c	a5 08		lda $08				lda 	IFR0+IM0
.113e	a6 09		ldx $09				ldx 	IFR0+IM1
.1140	20 79 11	jsr $1179			jsr 	CSAAllocate
.1143	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1146	f0 2f		beq $1177			beq 	_CSANoInit
.1148	da		phx				phx 								; save address of new array
.1149	48		pha				pha
.114a	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.114c	86 23		stx $23				stx 	zTemp0+1
.114e	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1150	b1 22		lda ($22),y			lda 	(zTemp0),y
.1152	a8		tay				tay
.1153	b2 22		lda ($22)			lda 	(zTemp0)
.1155	aa		tax				tax
.1156					_CSAEraseString:
.1156	5a		phy				phy
.1157	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1159	a9 80		lda #$80			lda 	#$80
.115b	91 22		sta ($22),y			sta 	(zTemp0),y
.115d	7a		ply				ply
.115e	18		clc				clc 								; add 4 to next slot.
.115f	a5 22		lda $22				lda 	zTemp0
.1161	69 04		adc #$04			adc 	#4
.1163	85 22		sta $22				sta 	zTemp0
.1165	90 02		bcc $1169			bcc 	_CSAENoCarry
.1167	e6 23		inc $23				inc 	zTemp0+1
.1169					_CSAENoCarry:
.1169	e0 00		cpx #$00			cpx 	#0
.116b	d0 01		bne $116e			bne 	_CSANoBorrow
.116d	88		dey				dey
.116e					_CSANoBorrow:
.116e	ca		dex				dex
.116f	d0 e5		bne $1156			bne 	_CSAEraseString
.1171	c0 00		cpy #$00			cpy 	#0
.1173	d0 e1		bne $1156			bne 	_CSAEraseString
.1175	68		pla				pla
.1176	fa		plx				plx
.1177					_CSANoInit:
.1177	7a		ply				ply
.1178	60		rts				rts
.1179					CSAAllocate:
.1179	08		php				php 								; save type flag.
.117a	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.117b	d0 01		bne $117e			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.117d	e8		inx				inx
.117e					_CSAANoCarry:
.117e	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1180	b0 2e		bcs $11b0			bcs 	_CSARange
.1182	28		plp				plp 								; restore type flag
.1183	08		php				php 								; save it back again.
.1184	da		phx				phx 								; save size.
.1185	48		pha				pha
.1186	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1188	90 03		bcc $118d			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.118a	0a		asl a				asl 	a
.118b	26 23		rol $23				rol 	zTemp0+1
.118d					_CSAATimes2:
.118d	0a		asl a				asl 	a
.118e	26 23		rol $23				rol 	zTemp0+1
.1190	18		clc				clc
.1191	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1193	90 02		bcc $1197			bcc 	_CSAANoCarry2
.1195	e6 23		inc $23				inc 	zTemp0+1
.1197					_CSAANoCarry2:
.1197	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1199	20 61 10	jsr $1061			jsr 	AllocateMemory 				; allocate memory to XA
.119c	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.119e	85 22		sta $22				sta 	zTemp0
.11a0	68		pla				pla  								; write element count to first 2 bytes
.11a1	92 22		sta ($22)			sta 	(zTemp0)
.11a3	68		pla				pla 								; msb of element count
.11a4	28		plp				plp 								; CC if pointer array
.11a5	b0 02		bcs $11a9			bcs 	_CSAAIsData
.11a7	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a9					_CSAAIsData:
.11a9	a0 01		ldy #$01			ldy 	#1
.11ab	91 22		sta ($22),y			sta 	(zTemp0),y
.11ad	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11af	60		rts				rts
.11b0					_CSARange:
.11b0	4c 20 25	jmp $2520		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11b3					Command_Doke:
.11b3	38		sec				sec
.11b4	80 01		bra $11b7			bra 	DPCommon
.11b6					Command_Poke:
.11b6	18		clc				clc
.11b7					DPCommon:
.11b7	08		php				php 								; CS if DOKE
.11b8	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16 			; address
.11bb	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11bd	48		pha				pha
.11be	a5 09		lda $09				lda 	IFR0+IM1
.11c0	48		pha				pha
.11c1	20 b4 26	jsr $26b4			jsr 	ERRCheckComma 				; [dp]oke address,data
.11c4	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16
.11c7	68		pla				pla 								; get address back
.11c8	85 23		sta $23				sta 	zTemp0+1
.11ca	68		pla				pla
.11cb	85 22		sta $22				sta 	zTemp0
.11cd	a5 08		lda $08				lda 	IFR0+IM0
.11cf	92 22		sta ($22)			sta 	(zTemp0)
.11d1	28		plp				plp
.11d2	90 08		bcc $11dc			bcc 	_DPExit
.11d4	5a		phy				phy
.11d5	a5 09		lda $09				lda 	IFR0+IM1
.11d7	a0 01		ldy #$01			ldy 	#1
.11d9	91 22		sta ($22),y			sta 	(zTemp0),y
.11db	7a		ply				ply
.11dc					_DPExit:
.11dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11dd					Command_Input:
.11dd	a9 ff		lda #$ff			lda 	#$FF
.11df	8d 06 05	sta $0506			sta 	InputFlag
.11e2	80 03		bra $11e7			bra 	Command_IP_Main
.11e4					Command_Print:
.11e4	9c 06 05	stz $0506			stz 	InputFlag
.11e7					Command_IP_Main:
.11e7	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11e8					_CPLoop:
.11e8	08		php				php 								; save last action flag
.11e9	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.11eb	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11ed	f0 4e		beq $123d			beq 	_CPExit 					; without consuming
.11ef	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11f1	f0 4a		beq $123d			beq 	_CPExit
.11f3	68		pla				pla 								; throw last action flag
.11f4	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.11f6	c8		iny				iny
.11f7	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11f9	f0 3f		beq $123a			beq 	_CPContinueWithSameLine
.11fb	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11fd	f0 36		beq $1235			beq 	_CPTab
.11ff	88		dey				dey 								; undo the get.
.1200	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.1203	10 0b		bpl $1210			bpl	 	_CPNotInput
.1205	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1207	c9 40		cmp #$40			cmp 	#$40
.1209	d0 05		bne $1210			bne 	_CPNotInput
.120b	20 46 12	jsr $1246			jsr 	_CPInputCode 				; input code
.120e	80 d7		bra $11e7			bra 	Command_IP_Main 			; and go round again.
.1210					_CPNotInput:
.1210	20 93 16	jsr $1693			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1213	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1215	10 14		bpl $122b			bpl 	_CPNumber
.1217	5a		phy				phy
.1218	18		clc				clc 								; string address to YX
.1219	a5 08		lda $08				lda 	IFR0+IM0
.121b	aa		tax				tax
.121c	a5 09		lda $09				lda 	IFR0+IM1
.121e	a8		tay				tay
.121f	e8		inx				inx 								; point to 1st character
.1220	d0 01		bne $1223			bne 	_CPNoCarry
.1222	c8		iny				iny
.1223					_CPNoCarry:
.1223	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.1225	20 7a 12	jsr $127a			jsr 	CPPrintAYX 					; print AYX
.1228	7a		ply				ply
.1229	80 bc		bra $11e7			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.122b					_CPNumber:
.122b	5a		phy				phy
.122c	20 51 2e	jsr $2e51			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.122f	20 7a 12	jsr $127a			jsr 	CPPrintAYX 					; print AYX
.1232	7a		ply				ply
.1233	80 b2		bra $11e7			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1235					_CPTab:
.1235	a9 09		lda #$09			lda 	#9 							; print TAB
.1237	20 90 12	jsr $1290			jsr 	CPPrintA
.123a					_CPContinueWithSameLine:
.123a	38		sec				sec 								; loop round with carry set, which
.123b	80 ab		bra $11e8			bra 	_CPLoop 					; will inhibit final CR
.123d					_CPExit:
.123d	28		plp				plp 								; get last action flag
.123e	b0 05		bcs $1245			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1240	a9 0d		lda #$0d			lda 	#13 						; print new line
.1242	20 90 12	jsr $1290			jsr 	CPPrintA
.1245					_CPExit2:
.1245	60		rts				rts
.1246					_CPInputCode:
.1246	20 5b 17	jsr $175b			jsr 	EXPTermR0 					; get the term.
.1249	5a		phy				phy 								; save position
.124a	20 8d 12	jsr $128d			jsr 	CPInputA					; input a line to YX
.124d	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.124f	30 18		bmi $1269			bmi 	_CPInputString
.1251	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1253	48		pha				pha
.1254	a5 09		lda $09				lda 	IFR0+IM1
.1256	48		pha				pha
.1257	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1259	84 23		sty $23				sty 	zTemp0+1
.125b	20 3d 1a	jsr $1a3d			jsr 	VALConversionZTemp0
.125e	68		pla				pla 								; do the assign.
.125f	85 23		sta $23				sta 	zTemp0+1
.1261	68		pla				pla
.1262	85 22		sta $22				sta 	zTemp0
.1264	20 b8 12	jsr $12b8			jsr 	AssignNumber
.1267	7a		ply				ply
.1268	60		rts				rts
.1269					_CPInputString:
.1269	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.126b	85 22		sta $22				sta 	zTemp0
.126d	a5 09		lda $09				lda 	IFR0+IM1
.126f	85 23		sta $23				sta 	zTemp0+1
.1271	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1273	84 09		sty $09				sty 	IFR0+IM1
.1275	20 cf 12	jsr $12cf			jsr 	AssignString 				; assign the string
.1278	7a		ply				ply 								; exit
.1279	60		rts				rts
.127a					CPPrintAYX:
.127a	86 22		stx $22				stx 	zTemp0
.127c	84 23		sty $23				sty 	zTemp0+1
.127e	aa		tax				tax
.127f	f0 0b		beq $128c			beq 	_CPPrintExit
.1281	a0 00		ldy #$00			ldy 	#0
.1283					_CPPrintAYXLoop:
.1283	b1 22		lda ($22),y			lda 	(zTemp0),y
.1285	20 90 12	jsr $1290			jsr 	CPPrintA
.1288	c8		iny				iny
.1289	ca		dex				dex
.128a	d0 f7		bne $1283			bne 	_CPPrintAYXLoop
.128c					_CPPrintExit:
.128c	60		rts				rts
.128d					CPInputA:
.128d	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.1290					CPPrintA:
.1290	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1293					CommandLET:
.1293	20 5b 17	jsr $175b			jsr 	EXPTermR0 					; get term
.1296	90 6f		bcc $1307			bcc 	CLError 					; must be a reference term.
.1298	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.129a	48		pha				pha
.129b	a5 09		lda $09				lda 	IFR0+IM1
.129d	48		pha				pha
.129e	a5 0b		lda $0b				lda 	IFR0+IExp
.12a0	48		pha				pha
.12a1	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12a3	20 bc 26	jsr $26bc			jsr 	ERRCheckA
.12a6	20 93 16	jsr $1693			jsr 	EXPEvaluateExpression 		; right hand side.
.12a9	68		pla				pla 								; type of l-expr
.12aa	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12ac	30 5c		bmi $130a			bmi 	CLType
.12ae	fa		plx				plx 	 							; pop target address to zTemp0
.12af	86 23		stx $23				stx 	zTemp0+1
.12b1	fa		plx				plx
.12b2	86 22		stx $22				stx 	zTemp0
.12b4					AssignData:
.12b4	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12b6	30 17		bmi $12cf			bmi 	AssignString
.12b8					AssignNumber:
.12b8	5a		phy				phy
.12b9	a0 03		ldy #$03			ldy 	#3
.12bb	a5 0b		lda $0b				lda 	IFR0+IExp
.12bd	91 22		sta ($22),y			sta 	(zTemp0),y
.12bf	88		dey				dey
.12c0	a5 0a		lda $0a				lda 	IFR0+IM2
.12c2	91 22		sta ($22),y			sta 	(zTemp0),y
.12c4	88		dey				dey
.12c5	a5 09		lda $09				lda 	IFR0+IM1
.12c7	91 22		sta ($22),y			sta 	(zTemp0),y
.12c9	a5 08		lda $08				lda 	IFR0+IM0
.12cb	92 22		sta ($22)			sta 	(zTemp0)
.12cd	7a		ply				ply
.12ce	60		rts				rts
.12cf					AssignString:
.12cf	5a		phy				phy
.12d0	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12d2	b1 22		lda ($22),y			lda 	(zTemp0),y
.12d4	12 22		ora ($22)			ora 	(zTemp0)
.12d6	f0 23		beq $12fb			beq 	_CLConcreteString
.12d8	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12da	85 24		sta $24				sta 	zTemp1
.12dc	b1 22		lda ($22),y			lda 	(zTemp0),y
.12de	85 25		sta $25				sta 	zTemp1+1
.12e0	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.12e2	38		sec				sec 								; we want 3 for slot size, status, string size.
.12e3	e9 03		sbc #$03			sbc 	#3
.12e5	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.12e7	90 12		bcc $12fb			bcc 	_CLConcreteString 			; if so, concrete the string again.
.12e9	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.12eb	1a		inc a				inc 	a
.12ec	aa		tax				tax
.12ed	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.12ef					_CLReplaceString:
.12ef	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.12f1	c8		iny				iny
.12f2	c8		iny				iny
.12f3	91 24		sta ($24),y			sta 	(zTemp1),y
.12f5	88		dey				dey
.12f6	ca		dex				dex
.12f7	d0 f6		bne $12ef			bne 	_CLReplaceString
.12f9	80 0a		bra $1305			bra 	_CLExit
.12fb					_CLConcreteString:
.12fb	20 2f 27	jsr $272f			jsr 	StringConcrete  			; concreted string in XA.
.12fe	a0 01		ldy #$01			ldy 	#1 							; store the address
.1300	92 22		sta ($22)			sta 	(zTemp0)
.1302	8a		txa				txa
.1303	91 22		sta ($22),y			sta 	(zTemp0),y
.1305					_CLExit:
.1305	7a		ply				ply
.1306	60		rts				rts
.1307					CLError:
.1307	4c 42 26	jmp $2642		jmp	ErrorV_variable
.130a					CLType:
.130a	4c 3f 25	jmp $253f		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.130d					Command_LIST:
.130d	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1310	9c 08 05	stz $0508			stz 	CLFrom+1
.1313	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1315	c9 99		cmp #$99			cmp 	#PR_COMMA
.1317	f0 1d		beq $1336			beq 	_CLToLine
.1319	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.131b	f0 37		beq $1354			beq 	_CLDefaultTo
.131d	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1320	a5 08		lda $08				lda 	IFR0+IM0
.1322	8d 07 05	sta $0507			sta 	CLFrom
.1325	8d 09 05	sta $0509			sta 	CLTo
.1328	a5 09		lda $09				lda 	IFR0+IM1
.132a	8d 08 05	sta $0508			sta 	CLFrom+1
.132d	8d 0a 05	sta $050a			sta 	CLTo+1
.1330	b1 18		lda ($18),y			lda 	(codePtr),y
.1332	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1334	f0 26		beq $135c			beq 	_CLList
.1336					_CLToLine:
.1336	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1338	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.133a	f0 18		beq $1354			beq 	_CLDefaultTo
.133c	20 b4 26	jsr $26b4			jsr 	ERRCheckComma 				; sep comma
.133f	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1341	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1343	f0 0f		beq $1354			beq 	_CLDefaultTo
.1345	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16 			; there's a To value.
.1348	a5 08		lda $08				lda 	IFR0+IM0
.134a	8d 09 05	sta $0509			sta 	CLTo
.134d	a5 09		lda $09				lda 	IFR0+IM1
.134f	8d 0a 05	sta $050a			sta 	CLTo+1
.1352	80 08		bra $135c			bra 	_CLList
.1354					_CLDefaultTo:
.1354	a9 ff		lda #$ff			lda 	#$FF
.1356	8d 09 05	sta $0509			sta 	CLTo
.1359	8d 0a 05	sta $050a			sta 	CLTo+1
.135c					_CLList:
.135c	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.135f	85 19		sta $19				sta 	codePtr+1
.1361	64 18		stz $18				stz 	codePtr
.1363	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1365	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1367	20 62 1d	jsr $1d62			jsr 	TOKSetDetokeniseOutput
.136a					_CLLoop:
.136a	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.136c	f0 4a		beq $13b8			beq 	_CLExit
.136e	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1371	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1374	d0 45		bne $13bb			bne 	_CLBreak
.1376	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1378	20 be 13	jsr $13be			jsr 	_CLCompareLine
.137b	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.137d	f0 2c		beq $13ab			beq 	_CLNext
.137f	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1381	20 be 13	jsr $13be			jsr 	_CLCompareLine
.1384	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.1386	f0 23		beq $13ab			beq 	_CLNext
.1388	a0 02		ldy #$02			ldy 	#2 							; print line #
.138a	b1 18		lda ($18),y			lda 	(codePtr),y
.138c	aa		tax				tax
.138d	88		dey				dey
.138e	b1 18		lda ($18),y			lda 	(codePtr),y
.1390	20 0d 28	jsr $280d			jsr 	WriteIntXA
.1393	a9 20		lda #$20			lda 	#32
.1395	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1398	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.139a	a5 18		lda $18				lda 	codePtr
.139c	18		clc				clc
.139d	69 03		adc #$03			adc 	#3
.139f	aa		tax				tax
.13a0	90 01		bcc $13a3			bcc 	_CLNoCarry2
.13a2	c8		iny				iny
.13a3					_CLNoCarry2:
.13a3	20 1d 1d	jsr $1d1d			jsr 	TOKDetokenise
.13a6	a9 0d		lda #$0d			lda 	#13	 						; next line
.13a8	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13ab					_CLNext:
.13ab	18		clc				clc 								; advance to next line.
.13ac	b2 18		lda ($18)			lda 	(codePtr)
.13ae	65 18		adc $18				adc 	codePtr
.13b0	85 18		sta $18				sta 	codePtr
.13b2	90 02		bcc $13b6			bcc 	_CLNoCarry
.13b4	e6 19		inc $19				inc 	codePtr+1
.13b6					_CLNoCarry:
.13b6	80 b2		bra $136a			bra 	_CLLoop
.13b8					_CLExit:
.13b8	4c 2c 28	jmp $282c			jmp 	WarmStart
.13bb					_CLBreak:
.13bb	4c 9a 26	jmp $269a		jmp	ErrorV_break
.13be					_CLCompareLine:
.13be	a0 01		ldy #$01			ldy 	#1
.13c0	38		sec				sec
.13c1	b1 18		lda ($18),y			lda 	(codePtr),y
.13c3	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13c6	85 22		sta $22				sta 	zTemp0
.13c8	c8		iny				iny
.13c9	b1 18		lda ($18),y			lda 	(codePtr),y
.13cb	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13ce	90 0a		bcc $13da			bcc 	_CLIsNegative
.13d0	d0 05		bne $13d7			bne 	_CLIsPositive
.13d2	a5 22		lda $22				lda 	zTemp0
.13d4	d0 01		bne $13d7			bne 	_CLIsPositive
.13d6	60		rts				rts
.13d7					_CLIsPositive:
.13d7	a9 01		lda #$01			lda 	#1
.13d9	60		rts				rts
.13da					_CLIsNegative:
.13da	a9 ff		lda #$ff			lda 	#255
.13dc	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.13dd					Command_NEW:
.13dd	20 07 1f	jsr $1f07			jsr 	PGMNewProgram
.13e0	20 44 10	jsr $1044			jsr 	ClearCode
.13e3	4c f8 14	jmp $14f8			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.13e6					Command_READ:
.13e6	20 5b 17	jsr $175b			jsr 	EXPTermR0 					; get term to R0
.13e9	90 32		bcc $141d			bcc 	_CRSyntax 					; fail if not a reference.
.13eb	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.13ed	48		pha				pha
.13ee	a5 09		lda $09				lda 	IFR0+IM1
.13f0	48		pha				pha
.13f1	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.13f3	20 71 14	jsr $1471			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.13f6	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.13f9	d0 25		bne $1420			bne 	_CRHaveData  				; forward for the next one.
.13fb					_CRNextLine:
.13fb	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.13fd	f0 18		beq $1417			beq 	_CRNoData
.13ff					_CRKeepSearching:
.13ff	a9 ab		lda #$ab			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1401	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1403	20 1f 24	jsr $241f			jsr 	ScanForward
.1406	c9 ab		cmp #$ab			cmp 	#PR_DATA 					; found data ?
.1408	f0 16		beq $1420			beq 	_CRHaveData 				; found it
.140a	18		clc				clc 								; try the next line, keep going.
.140b	b2 18		lda ($18)			lda 	(codePtr)
.140d	65 18		adc $18				adc 	codePtr
.140f	85 18		sta $18				sta 	codePtr
.1411	90 e8		bcc $13fb			bcc 	_CRNextLine
.1413	e6 19		inc $19				inc 	codePtr+1
.1415	80 e4		bra $13fb			bra 	_CRNextLine
.1417					_CRNoData:
.1417	4c c7 25	jmp $25c7		jmp	ErrorV_data
.141a					_CLType:
.141a	4c 3f 25	jmp $253f		jmp	ErrorV_type
.141d					_CRSyntax:
.141d	4c 0f 25	jmp $250f		jmp	ErrorV_syntax
.1420					_CRHaveData:
.1420	20 93 16	jsr $1693			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1423	68		pla				pla 								; type of l-expr
.1424	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1426	30 f2		bmi $141a			bmi 	_CLType
.1428	68		pla				pla 								; restore address
.1429	85 23		sta $23				sta 	zTemp0+1
.142b	68		pla				pla
.142c	85 22		sta $22				sta 	zTemp0
.142e	20 b4 12	jsr $12b4			jsr 	AssignData 					; write R0 there.
.1431	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1434	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1436	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1438	d0 04		bne $143e			bne 	_CRSwapBack
.143a	c8		iny				iny 								; consume comma
.143b	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.143e					_CRSwapBack:
.143e	20 71 14	jsr $1471			jsr 	SwapCodeDataPointers		; swap them back.
.1441	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1443	c8		iny				iny
.1444	c9 99		cmp #$99			cmp 	#PR_COMMA
.1446	f0 9e		beq $13e6			beq 	Command_READ 				; if so go round again.
.1448	88		dey				dey 								; unpick get.
.1449	60		rts				rts
.144a					Command_DATA:
.144a	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.144c	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.144e	20 1f 24	jsr $241f			jsr 	ScanForward
.1451	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1452					Command_REM:
.1452					Command_REM2:
.1452	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1454	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1456	d0 06		bne $145e			bne 	_CRExit
.1458	c8		iny				iny 								; skip over it, it's a comment.
.1459	98		tya				tya
.145a	38		sec				sec
.145b	71 18		adc ($18),y			adc 	(codePtr),y
.145d	a8		tay				tay
.145e					_CRExit:
.145e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.145f					S
.145f					Command_RESTORE:
.145f	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1462	8d 0c 05	sta $050c			sta 	dataPtr+1
.1465	9c 0b 05	stz $050b			stz 	dataPtr
.1468	a9 03		lda #$03			lda 	#3 							; position start of line
.146a	8d 0d 05	sta $050d			sta 	dataPos
.146d	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.1470	60		rts				rts
.1471					SwapCodeDataPointers:
.1471	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.1474	a6 18		ldx $18				ldx 	codePtr
.1476	85 18		sta $18				sta 	codePtr
.1478	8e 0b 05	stx $050b			stx 	dataPtr
.147b	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.147e	a6 19		ldx $19				ldx 	codePtr+1
.1480	85 19		sta $19				sta 	codePtr+1
.1482	8e 0c 05	stx $050c			stx 	dataPtr+1
.1485	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.1488	8c 0d 05	sty $050d			sty 	dataPos
.148b	a8		tay				tay
.148c	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.148d					Command_RUN:
.148d	20 44 10	jsr $1044			jsr 	ClearCode					; clear everything out.
.1490	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1493	85 19		sta $19				sta 	codePtr+1
.1495	64 18		stz $18				stz 	codePtr
.1497	80 0b		bra $14a4			bra 	RUNNewLine
.1499					RUNEndOfLine:
.1499	18		clc				clc 								; advance to next line.
.149a	b2 18		lda ($18)			lda 	(codePtr)
.149c	65 18		adc $18				adc 	codePtr
.149e	85 18		sta $18				sta 	codePtr
.14a0	90 02		bcc $14a4			bcc 	_RELNoCarry
.14a2	e6 19		inc $19				inc 	codePtr+1
.14a4					_RELNoCarry:
.14a4					RUNNewLine:
.14a4	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14a6	9a		txs				txs
.14a7	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14a9	f0 4d		beq $14f8			beq 	Command_END
.14ab	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14ad	b1 18		lda ($18),y			lda 	(codePtr),y
.14af	8d 26 06	sta $0626			sta 	ERRLine
.14b2	c8		iny				iny
.14b3	b1 18		lda ($18),y			lda 	(codePtr),y
.14b5	8d 27 06	sta $0627			sta 	ERRLine+1
.14b8	c8		iny				iny 								; offset into codePtr for start of line.
.14b9					RUNNewCommand:
.14b9	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14bc	ce 10 05	dec $0510			dec 	checkCounter
.14bf	d0 0a		bne $14cb			bne 	_RNCNoCheck
.14c1	5a		phy				phy 								; keyboard check.
.14c2	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.14c5	7a		ply				ply
.14c6	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.14c9	d0 1e		bne $14e9			bne 	_RUNBreak
.14cb					_RNCNoCheck:
.14cb	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.14cd	10 1d		bpl $14ec			bpl		_RUNNotToken 				; probably an identifier
.14cf	c8		iny				iny 								; consume token
.14d0	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.14d2	f0 e5		beq $14b9			beq 	RUNNewCommand
.14d4	c9 ad		cmp #$ad			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.14d6	b0 0e		bcs $14e6			bcs 	_RUNSyntax
.14d8	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.14da	90 0a		bcc $14e6			bcc 	_RUNSyntax
.14dc	0a		asl a				asl 	a 							; double into X.
.14dd	aa		tax				tax
.14de	20 e3 14	jsr $14e3			jsr 	_RUNDispatchMain			; call the main dispatcher
.14e1	80 d6		bra $14b9			bra 	RUNNewCommand
.14e3					_RUNDispatchMain:
.14e3	7c 1d 1c	jmp ($1c1d,x)			jmp 	(VectorTable,x)
.14e6					_RUNSyntax:
.14e6	4c 0f 25	jmp $250f		jmp	ErrorV_syntax
.14e9					_RUNBreak:
.14e9	4c 9a 26	jmp $269a		jmp	ErrorV_break
.14ec					_RUNNotToken:
.14ec	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.14ee	90 f6		bcc $14e6			bcc 	_RUNSyntax
.14f0	20 93 12	jsr $1293			jsr 	CommandLET 					; assignment
.14f3	80 c4		bra $14b9			bra 	RUNNewCommand 				; loop round.
.14f5					Command_Shift_Handler:
.14f5	4c 51 25	jmp $2551		jmp	ErrorV_unimplemented
.14f8					Command_END:
.14f8	4c 2c 28	jmp $282c			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.14fb					Command_STOP:
.14fb	4c b3 25	jmp $25b3		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.14fe					Command_Sys:
.14fe	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16 			; execution address
.1501	5a		phy				phy
.1502	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1505	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1508	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.150b	20 10 15	jsr $1510			jsr 	_CSCallIFR0 				; call the code
.150e	7a		ply				ply
.150f	60		rts				rts
.1510					_CSCallIFR0:
.1510	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1513					NoExec01:
.1513					NoExec02:
.1513					NoExec03:
.1513					NoExec04:
.1513					NoExec05:
.1513					NoExec06:
.1513					NoExec07:
.1513					NoExec08:
.1513	4c 0f 25	jmp $250f		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1516					EXPBinAdd:
.1516	24 0b		bit $0b				bit 	IFR0+IExp
.1518	30 6f		bmi $1589			bmi 	EXPConcatenate
.151a	a2 0c		ldx #$0c			ldx 	#IFR1
.151c	4c 4a 2a	jmp $2a4a			jmp 	IFloatAdd
.151f					EXPBinSub:
.151f	24 0b		bit $0b				bit 	IFR0+IExp
.1521	30 3f		bmi $1562			bmi 	EXPTypeError
.1523	a2 0c		ldx #$0c			ldx 	#IFR1
.1525	4c 43 2a	jmp $2a43			jmp 	IFloatSubtract
.1528					EXPBinMul:
.1528	24 0b		bit $0b				bit 	IFR0+IExp
.152a	30 36		bmi $1562			bmi 	EXPTypeError
.152c	a2 0c		ldx #$0c			ldx 	#IFR1
.152e	4c f4 2a	jmp $2af4			jmp 	IFloatMultiply
.1531					EXPBinFDiv:
.1531	24 0b		bit $0b				bit 	IFR0+IExp
.1533	30 2d		bmi $1562			bmi 	EXPTypeError
.1535	a2 0c		ldx #$0c			ldx 	#IFR1
.1537	20 77 2d	jsr $2d77			jsr 	IFloatDivideFloat
.153a	b0 0f		bcs $154b			bcs 	EXPDZero
.153c	60		rts				rts
.153d					EXPBinIDiv:
.153d	24 0b		bit $0b				bit 	IFR0+IExp
.153f	30 21		bmi $1562			bmi 	EXPTypeError
.1541	a2 0c		ldx #$0c			ldx 	#IFR1
.1543	20 77 2d	jsr $2d77			jsr 	IFloatDivideFloat
.1546	b0 03		bcs $154b			bcs 	EXPDZero
.1548	4c 54 2d	jmp $2d54			jmp 	IFloatIntegerR0
.154b					EXPDZero:
.154b	4c 88 25	jmp $2588		jmp	ErrorV_divzero
.154e					EXPBinIMod:
.154e	24 0b		bit $0b				bit 	IFR0+IExp
.1550	30 10		bmi $1562			bmi 	EXPTypeError
.1552	a2 0c		ldx #$0c			ldx 	#IFR1
.1554	5a		phy				phy
.1555	20 8c 2c	jsr $2c8c			jsr 	IFPreProcessBitwise 		; set up everything.
.1558	d0 05		bne $155f			bne 	EXPDRange
.155a	20 c5 2b	jsr $2bc5			jsr 	IFloatModulusInteger
.155d	7a		ply				ply
.155e	60		rts				rts
.155f					EXPDRange:
.155f	4c 20 25	jmp $2520		jmp	ErrorV_range
.1562					EXPTypeError:
.1562	4c 3f 25	jmp $253f		jmp	ErrorV_type
.1565					EXPBinAnd:
.1565	24 0b		bit $0b				bit 	IFR0+IExp
.1567	30 f9		bmi $1562			bmi 	EXPTypeError
.1569	a2 0c		ldx #$0c			ldx 	#IFR1
.156b	20 47 2c	jsr $2c47			jsr 	IFloatBitwiseAnd
.156e	b0 ef		bcs $155f			bcs 	EXPDRange
.1570	60		rts				rts
.1571					EXPBinOr:
.1571	24 0b		bit $0b				bit 	IFR0+IExp
.1573	30 ed		bmi $1562			bmi 	EXPTypeError
.1575	a2 0c		ldx #$0c			ldx 	#IFR1
.1577	20 5e 2c	jsr $2c5e			jsr 	IFloatBitwiseOr
.157a	b0 e3		bcs $155f			bcs 	EXPDRange
.157c	60		rts				rts
.157d					EXPBinXor:
.157d	24 0b		bit $0b				bit 	IFR0+IExp
.157f	30 e1		bmi $1562			bmi 	EXPTypeError
.1581	a2 0c		ldx #$0c			ldx 	#IFR1
.1583	20 75 2c	jsr $2c75			jsr 	IFloatBitwiseXor
.1586	b0 d7		bcs $155f			bcs 	EXPDRange
.1588	60		rts				rts
.1589					EXPConcatenate:
.1589	18		clc				clc
.158a	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.158c	72 0c		adc ($0c)			adc 	(IFR1)
.158e	b0 2d		bcs $15bd			bcs 	_EXPCError
.1590	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.1592	da		phx				phx
.1593	a6 09		ldx $09				ldx 	IFR0+1
.1595	da		phx				phx
.1596	20 a2 27	jsr $27a2			jsr 	StringTempAllocate 			; allocate string, set up return
.1599	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.159b	a5 0c		lda $0c				lda 	IFR1
.159d	20 a6 15	jsr $15a6			jsr 	_EXPCCopyXA
.15a0	fa		plx				plx 								; copy second string
.15a1	68		pla				pla
.15a2	20 a6 15	jsr $15a6			jsr 	_EXPCCopyXA
.15a5	60		rts				rts
.15a6					_EXPCCopyXA:
.15a6	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15a8	85 22		sta $22				sta 	zTemp0
.15aa	b2 22		lda ($22)			lda 	(zTemp0)					; length
.15ac	f0 0e		beq $15bc			beq 	_EXPCCExit 					; nothing.
.15ae	aa		tax				tax 								; count
.15af	5a		phy				phy 								; start positioin
.15b0	a0 01		ldy #$01			ldy 	#1
.15b2					_EXPCCLoop:
.15b2	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15b4	20 d7 27	jsr $27d7			jsr 	StringTempWrite
.15b7	c8		iny				iny
.15b8	ca		dex				dex
.15b9	d0 f7		bne $15b2			bne 	_EXPCCLoop
.15bb	7a		ply				ply
.15bc					_EXPCCExit:
.15bc	60		rts				rts
.15bd					_EXPCError:
.15bd	4c 2c 26	jmp $262c		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15c0					EXPReturnTrue:
.15c0	a2 08		ldx #$08			ldx 	#IFR0
.15c2	a9 01		lda #$01			lda 	#1
.15c4	20 56 30	jsr $3056			jsr 	IFloatSetByte
.15c7	20 5f 30	jsr $305f			jsr 	IFloatNegate
.15ca	60		rts				rts
.15cb					EXPReturnFalse:
.15cb	a2 08		ldx #$08			ldx 	#IFR0
.15cd	4c 54 30	jmp $3054			jmp 	IFloatSetZero
.15d0					EXPCompareEqual:
.15d0	20 06 16	jsr $1606			jsr 	EXPCompareBaseCode
.15d3	c9 00		cmp #$00			cmp 	#0
.15d5	f0 e9		beq $15c0			beq 	EXPReturnTrue
.15d7	80 f2		bra $15cb			bra 	EXPReturnFalse
.15d9					EXPCompareLess:
.15d9	20 06 16	jsr $1606			jsr 	EXPCompareBaseCode
.15dc	c9 ff		cmp #$ff			cmp 	#$FF
.15de	f0 e0		beq $15c0			beq 	EXPReturnTrue
.15e0	80 e9		bra $15cb			bra 	EXPReturnFalse
.15e2					EXPCompareGreater:
.15e2	20 06 16	jsr $1606			jsr 	EXPCompareBaseCode
.15e5	c9 01		cmp #$01			cmp 	#1
.15e7	f0 d7		beq $15c0			beq 	EXPReturnTrue
.15e9	80 e0		bra $15cb			bra 	EXPReturnFalse
.15eb					EXPCompareNotEqual:
.15eb	20 06 16	jsr $1606			jsr 	EXPCompareBaseCode
.15ee	c9 00		cmp #$00			cmp 	#0
.15f0	d0 ce		bne $15c0			bne 	EXPReturnTrue
.15f2	80 d7		bra $15cb			bra 	EXPReturnFalse
.15f4					EXPCompareLessEqual:
.15f4	20 06 16	jsr $1606			jsr 	EXPCompareBaseCode
.15f7	c9 01		cmp #$01			cmp 	#1
.15f9	d0 c5		bne $15c0			bne 	EXPReturnTrue
.15fb	80 ce		bra $15cb			bra 	EXPReturnFalse
.15fd					EXPCompareGreaterEqual:
.15fd	20 06 16	jsr $1606			jsr 	EXPCompareBaseCode
.1600	c9 ff		cmp #$ff			cmp 	#$FF
.1602	d0 bc		bne $15c0			bne 	EXPReturnTrue
.1604	80 c5		bra $15cb			bra 	EXPReturnFalse
.1606					EXPCompareBaseCode:
.1606	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1608	30 10		bmi $161a			bmi 	_EXCBCString
.160a	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.160c	20 22 2d	jsr $2d22			jsr 	IFloatCompare
.160f	a5 08		lda $08				lda 	IFR0+IM0
.1611	f0 06		beq $1619			beq 	_EXCBCExit 					; return 0 if zero
.1613	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1615	50 02		bvc $1619			bvc 	_EXCBCExit
.1617	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1619					_EXCBCExit:
.1619	60		rts				rts
.161a					_EXCBCString:
.161a	5a		phy				phy
.161b	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.161d	d2 0c		cmp ($0c)			cmp 	(IFR1)
.161f	90 02		bcc $1623			bcc 	_EXCBCSmaller
.1621	b2 0c		lda ($0c)			lda 	(IFR1)
.1623					_EXCBCSmaller:
.1623	aa		tax				tax
.1624	f0 0d		beq $1633			beq 	_EXCBCMatches 				; if zero common length matches
.1626	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1628					_EXCBCCheckSmallerMatches:
.1628	c8		iny				iny 								; compare directly as far as common length
.1629	38		sec				sec
.162a	b1 0c		lda ($0c),y			lda 	(IFR1),y
.162c	f1 08		sbc ($08),y			sbc 	(IFR0),y
.162e	d0 08		bne $1638			bne 	_EXCBCExit2
.1630	ca		dex				dex
.1631	d0 f5		bne $1628			bne 	_EXCBCCheckSmallerMatches
.1633					_EXCBCMatches:
.1633	38		sec				sec
.1634	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1636	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1638					_EXCBCExit2:
.1638	7a		ply				ply
.1639	c9 00		cmp #$00			cmp 	#0
.163b	f0 04		beq $1641			beq 	_EXCBCReturn
.163d	30 03		bmi $1642			bmi 	_EXCBCFF
.163f	a9 01		lda #$01			lda 	#1
.1641					_EXCBCReturn:
.1641	60		rts				rts
.1642					_EXCBCFF:
.1642	a9 ff		lda #$ff			lda 	#$FF
.1644	60		rts				rts
.1645					_EXCBCRange:
.1645	4c 20 25	jmp $2520		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1648					EXPBinLeft:
.1648	a9 ff		lda #$ff			lda 	#$FF
.164a	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.164d	4c 53 16	jmp $1653			jmp 	EXPShiftCommon
.1650					EXPBinRight:
.1650	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.1653					EXPShiftCommon:
.1653	a5 0b		lda $0b				lda 	IFR0+IExp 					; both integers
.1655	05 0f		ora $0f				ora 	IFR1+IExp
.1657	29 7f		and #$7f			and 	#$7F
.1659	d0 35		bne $1690			bne 	_EXPSRange
.165b	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.165d	29 e0		and #$e0			and 	#$E0
.165f	05 09		ora $09				ora 	IFR0+IM1
.1661	05 0a		ora $0a				ora 	IFR0+IM2
.1663	d0 25		bne $168a			bne 	_EXPSShiftZero 				; if so return zero
.1665	5a		phy				phy
.1666	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.1668	29 1f		and #$1f			and 	#$1F
.166a	f0 17		beq $1683			beq 	_EXPSExit 					; exit if zero
.166c	a8		tay				tay
.166d					_EXPSLoop:
.166d	a2 0c		ldx #$0c			ldx 	#IFR1
.166f	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.1672	30 05		bmi $1679			bmi 	_EXPSShiftLeft
.1674	20 83 30	jsr $3083			jsr 	IFloatShiftRight
.1677	80 07		bra $1680			bra 	_EXPSContinue
.1679					_EXPSShiftLeft:
.1679	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.167c	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts
.167e	30 10		bmi $1690			bmi 	_EXPSRange
.1680					_EXPSContinue:
.1680	88		dey				dey
.1681	d0 ea		bne $166d			bne 	_EXPSLoop
.1683					_EXPSExit:
.1683	a2 0c		ldx #$0c			ldx 	#IFR1
.1685	20 e5 2f	jsr $2fe5			jsr 	IFloatCopyFromRegister
.1688	7a		ply				ply
.1689	60		rts				rts
.168a					_EXPSShiftZero:
.168a	a2 08		ldx #$08			ldx 	#IFR0
.168c	20 54 30	jsr $3054			jsr 	IFloatSetZero
.168f	60		rts				rts
.1690					_EXPSRange:
.1690	4c 20 25	jmp $2520		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1693					EXPEvaluateExpression:
.1693	a9 00		lda #$00			lda 	#0 							; current precedence
.1695					EXPEvaluateExpressionPrecedenceA:
.1695	48		pha				pha
.1696	20 10 17	jsr $1710			jsr 	EXPTermValueR0				; do first term.
.1699					_EELoop:
.1699	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.169b	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.169d	90 31		bcc $16d0			bcc 	_EEExit
.169f	aa		tax				tax 								; access the precedence of the operator.
.16a0	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16a1	dd 66 19	cmp $1966,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16a4	b0 2b		bcs $16d1			bcs 	_EEExit2
.16a6	48		pha				pha 								; save current precedence.
.16a7	da		phx				phx 								; save operator
.16a8	c8		iny				iny 								; consume operator
.16a9	da		phx				phx
.16aa	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16ac	20 a3 2f	jsr $2fa3			jsr 	IFloatPushRx
.16af	fa		plx				plx
.16b0	bd 66 19	lda $1966,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16b3	20 95 16	jsr $1695			jsr 	EXPEvaluateExpressionPrecedenceA
.16b6	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16b8	20 c4 2f	jsr $2fc4			jsr 	IFloatPullRx
.16bb	fa		plx				plx 								; operator
.16bc	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16be	45 0f		eor $0f				eor 	IFR1+IExp
.16c0	30 08		bmi $16ca			bmi 	_EEType
.16c2					_EETypeOkay:
.16c2	8a		txa				txa
.16c3	0a		asl a				asl 	a 							; double -> X
.16c4	aa		tax				tax
.16c5	20 cd 16	jsr $16cd			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.16c8	80 cf		bra $1699			bra 	_EELoop
.16ca					_EEType:
.16ca	4c 3f 25	jmp $253f		jmp	ErrorV_type
.16cd					_EECallBinary:
.16cd	7c 1d 1c	jmp ($1c1d,x)			jmp 	(VectorTable,x)
.16d0					_EEExit:
.16d0	68		pla				pla 								; throw precedence
.16d1					_EEExit2:
.16d1	18		clc				clc
.16d2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.16d3					EXPEvalNumber:
.16d3	20 93 16	jsr $1693			jsr 	EXPEvaluateExpression
.16d6	24 0b		bit $0b				bit 	IFR0+IExp
.16d8	30 01		bmi $16db			bmi 	EVUType
.16da	60		rts				rts
.16db					EVUType:
.16db	4c 3f 25	jmp $253f		jmp	ErrorV_type
.16de					EXPEvalInteger:
.16de	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.16e1	20 54 2d	jsr $2d54			jsr 	IFloatIntegerR0
.16e4	60		rts				rts
.16e5					EXPEvalInteger16:
.16e5	20 de 16	jsr $16de			jsr 	EXPEvalInteger
.16e8	a5 0a		lda $0a				lda 	IFR0+IM2
.16ea	d0 21		bne $170d			bne 	EVURange
.16ec	a6 09		ldx $09				ldx 	IFR0+IM1
.16ee	a5 08		lda $08				lda 	IFR0+IM0
.16f0	60		rts				rts
.16f1					EXPEvalInteger8:
.16f1	20 de 16	jsr $16de			jsr 	EXPEvalInteger
.16f4	a5 0a		lda $0a				lda 	IFR0+IM2
.16f6	05 09		ora $09				ora 	IFR0+IM1
.16f8	d0 13		bne $170d			bne 	EVURange
.16fa	a5 08		lda $08				lda 	IFR0+IM0
.16fc	60		rts				rts
.16fd					EXPEvalString:
.16fd	20 93 16	jsr $1693			jsr 	EXPEvaluateExpression
.1700	24 0b		bit $0b				bit 	IFR0+IExp
.1702	10 d7		bpl $16db			bpl 	EVUType
.1704	a6 09		ldx $09				ldx 	IFR0+IM1
.1706	86 23		stx $23				stx 	zTemp0+1
.1708	a5 08		lda $08				lda 	IFR0+IM0
.170a	85 22		sta $22				sta 	zTemp0
.170c	60		rts				rts
.170d					EVURange:
.170d	4c 20 25	jmp $2520		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1710					EXPTermValueR0:
.1710	20 5b 17	jsr $175b			jsr 	EXPTermR0 					; get term
.1713	90 45		bcc $175a			bcc 	_ETVNotReference 			; exit if value.
.1715	5a		phy				phy
.1716	a0 03		ldy #$03			ldy 	#3 							; get type
.1718	b1 08		lda ($08),y			lda 	(IFR0),y
.171a	30 14		bmi $1730			bmi 	_ETVDereferenceString
.171c	85 0b		sta $0b				sta 	IFR0+IExp 					; dereference to R0
.171e	88		dey				dey
.171f	b1 08		lda ($08),y			lda 	(IFR0),y
.1721	85 0a		sta $0a				sta 	IFR0+IM2
.1723	88		dey				dey
.1724	b1 08		lda ($08),y			lda 	(IFR0),y
.1726	aa		tax				tax
.1727	b2 08		lda ($08)			lda 	(IFR0)
.1729	86 09		stx $09				stx 	IFR0+IM1
.172b	85 08		sta $08				sta 	IFR0+IM0
.172d	7a		ply				ply
.172e	18		clc				clc
.172f	60		rts				rts
.1730					_ETVDereferenceString:
.1730	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1732	b1 08		lda ($08),y			lda 	(IFR0),y
.1734	12 08		ora ($08)			ora 	(IFR0)
.1736	f0 11		beq $1749			beq 	_ETVNull
.1738	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.173a	aa		tax				tax
.173b	b2 08		lda ($08)			lda 	(IFR0)
.173d	18		clc				clc 								; add two so points to actual string.
.173e	69 02		adc #$02			adc 	#2
.1740	90 01		bcc $1743			bcc 	_EVDSNoCarry
.1742	e8		inx				inx
.1743					_EVDSNoCarry:
.1743	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1745	85 08		sta $08				sta 	IFR0
.1747	80 08		bra $1751			bra 	_ETVFillExit 				; tidy up and exit.
.1749					_ETVNull:
.1749	a9 59		lda #$59			lda 	#_EVTNString & $FF
.174b	85 08		sta $08				sta 	IFR0+IM0
.174d	a9 17		lda #$17			lda 	#_EVTNString >> 8
.174f	85 09		sta $09				sta 	IFR0+IM1
.1751					_ETVFillExit:
.1751	64 0a		stz $0a				stz 	IFR0+IM2
.1753	a9 80		lda #$80			lda 	#$80
.1755	85 0b		sta $0b				sta 	IFR0+IExp
.1757	7a		ply				ply
.1758	60		rts				rts
.1759					_EVTNString:
>1759	00						.byte 	0
.175a					_ETVNotReference:
.175a	60		rts				rts
.175b					EXPTermR0:
.175b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.175d	30 10		bmi $176f			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.175f	c8		iny				iny 								; consume element
.1760	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1762	b0 08		bcs $176c			bcs 	_ETMIdentifier
.1764	20 93 17	jsr $1793			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1767	20 c6 17	jsr $17c6			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.176a	18		clc				clc 								; return value
.176b	60		rts				rts
.176c					_ETMIdentifier:
.176c	4c eb 29	jmp $29eb			jmp 	VARCheckSimple 				; check simple variables A-Z
.176f					_ETMIsUnaryOrMinus:
.176f	c8		iny				iny 								; consume element
.1770	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1772	d0 0a		bne $177e			bne 	_ETMCheckUnary
.1774	20 10 17	jsr $1710			jsr 	EXPTermValueR0 				; get a term to negate
.1777	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.1779	20 5f 30	jsr $305f			jsr 	IFloatNegate
.177c	18		clc				clc
.177d	60		rts				rts
.177e					_ETMCheckUnary:
.177e	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1780	90 0e		bcc $1790			bcc 	_ETMUnarySyntax
.1782	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1784	b0 0a		bcs $1790			bcs 	_ETMUnarySyntax
.1786	0a		asl a				asl 	a
.1787	aa		tax				tax
.1788	20 8d 17	jsr $178d			jsr 	_ETMCallUnaryFunction
.178b	18		clc				clc
.178c	60		rts				rts
.178d					_ETMCallUnaryFunction:
.178d	7c 1d 1c	jmp ($1c1d,x)			jmp 	(VectorTable,x)
.1790					_ETMUnarySyntax:
.1790	4c 0f 25	jmp $250f		jmp	ErrorV_syntax
.1793					EXPExtractTokenisedInteger:
.1793	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.1795	64 0b		stz $0b				stz 	IFR0+IExp
.1797	64 09		stz $09				stz 	IFR0+IM1
.1799	64 0a		stz $0a				stz 	IFR0+IM2
.179b					_ETMConstant:
.179b	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.179d	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.179f	b0 24		bcs $17c5			bcs 	_ETMCExit 					; no.
.17a1	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17a3	a5 09		lda $09				lda 	IFR0+IM1
.17a5	85 0a		sta $0a				sta 	IFR0+IM2
.17a7	a5 08		lda $08				lda 	IFR0+IM0
.17a9	85 09		sta $09				sta 	IFR0+IM1
.17ab	64 08		stz $08				stz 	IFR0+IM0
.17ad	8a		txa				txa
.17ae	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17af	66 0a		ror $0a				ror 	IFR0+IM2
.17b1	66 09		ror $09				ror 	IFR0+IM1
.17b3	66 08		ror $08				ror 	IFR0+IM0
.17b5	4a		lsr a				lsr 	a
.17b6	66 0a		ror $0a				ror 	IFR0+IM2
.17b8	66 09		ror $09				ror 	IFR0+IM1
.17ba	66 08		ror $08				ror 	IFR0+IM0
.17bc	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17be	11 18		ora ($18),y			ora 	(codePtr),y
.17c0	85 08		sta $08				sta 	IFR0+IM0
.17c2	c8		iny				iny 								; consume, loop back
.17c3	80 d6		bra $179b			bra 	_ETMConstant
.17c5					_ETMCExit:
.17c5	60		rts				rts
.17c6					EXPCheckDecimalFollows:
.17c6	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.17c8	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.17ca	d0 19		bne $17e5			bne 	_ETMCDExit
.17cc	c8		iny				iny 								; consume token.
.17cd	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.17cf	5a		phy				phy									; save current position
.17d0	48		pha				pha 								; save count of chars.
.17d1	38		sec				sec 								; address into YX : y + codePtr+1
.17d2	98		tya				tya
.17d3	65 18		adc $18				adc 	codePtr
.17d5	aa		tax				tax
.17d6	a5 19		lda $19				lda 	codePtr+1
.17d8	69 00		adc #$00			adc 	#0
.17da	a8		tay				tay
.17db	68		pla				pla 								; get count.
.17dc	20 f8 2e	jsr $2ef8			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.17df	7a		ply				ply 								; go to next token.
.17e0	98		tya				tya
.17e1	38		sec				sec
.17e2	71 18		adc ($18),y			adc 	(codePtr),y
.17e4	a8		tay				tay
.17e5					_ETMCDExit:
.17e5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.17e6					EXPUnaryAbs:
.17e6	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 					; number to R0
.17e9	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.17ec	20 98 2c	jsr $2c98			jsr 	IFloatAbsoluteR0
.17ef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.17f0					EXPUnaryAsc:
.17f0	20 fd 16	jsr $16fd			jsr 	EXPEvalString 					; string to R0, zTemp0
.17f3	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.17f6	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.17f8	f0 06		beq $1800			beq 	_EXAZero 						; if so return 0
.17fa	5a		phy				phy 									; otherwise get first character
.17fb	a0 01		ldy #$01			ldy 	#1
.17fd	b1 22		lda ($22),y			lda 	(zTemp0),y
.17ff	7a		ply				ply
.1800					_EXAZero:
.1800	a2 08		ldx #$08			ldx 	#IFR0
.1802	20 56 30	jsr $3056			jsr 	IFloatSetByte
.1805	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1806					EXPUnaryChr:
.1806	20 f1 16	jsr $16f1			jsr 	EXPEvalInteger8 				; expr
.1809	48		pha				pha 									; push on stack
.180a	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.180d	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.180f	20 a2 27	jsr $27a2			jsr 	StringTempAllocate
.1812	68		pla				pla
.1813	20 d7 27	jsr $27d7			jsr 	StringTempWrite
.1816	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1817					EXPUnaryDec:
.1817	20 fd 16	jsr $16fd			jsr 	EXPEvalString 					; string to R0, zTemp0
.181a	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.181d	5a		phy				phy
.181e	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1820	20 54 30	jsr $3054			jsr 	IFloatSetZero
.1823	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1825	f0 3b		beq $1862			beq 	_EUDError 						; empty string
.1827	aa		tax				tax
.1828	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.182a					_EUDLoop:
.182a	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next
.182c	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.182e	90 02		bcc $1832			bcc 	_EUDNoCase
.1830	e9 20		sbc #$20			sbc 	#$20
.1832					_EUDNoCase:
.1832	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1834	90 2c		bcc $1862			bcc 	_EUDError
.1836	c9 3a		cmp #$3a			cmp 	#'9'+1
.1838	90 0a		bcc $1844			bcc 	_EUDOkay
.183a	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.183c	90 24		bcc $1862			bcc 	_EUDError
.183e	c9 47		cmp #$47			cmp 	#'F'+1
.1840	b0 20		bcs $1862			bcs 	_EUDError
.1842	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1844					_EUDOkay:
.1844	29 0f		and #$0f			and 	#15 							; make constant
.1846	da		phx				phx
.1847	48		pha				pha
.1848	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.184a	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.184d	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.1850	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.1853	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.1856	68		pla				pla 									; pop constant and OR in
.1857	fa		plx				plx
.1858	05 08		ora $08				ora 	IFR0+IM0
.185a	85 08		sta $08				sta 	IFR0+IM0
.185c	c8		iny				iny 									; next
.185d	ca		dex				dex
.185e	d0 ca		bne $182a			bne 	_EUDLoop
.1860	7a		ply				ply
.1861	60		rts				rts
.1862					_EUDError:
.1862	4c 31 25	jmp $2531		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1865					EXPUnaryInlineDec:
.1865	4c 0f 25	jmp $250f		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1868					EXPUnaryPeek:
.1868	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16 				; number to R0
.186b	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.186e	b2 08		lda ($08)			lda 	(IFR0)
.1870	a2 08		ldx #$08			ldx 	#IFR0
.1872	20 56 30	jsr $3056			jsr 	IFloatSetByte
.1875	60		rts				rts
.1876					EXPUnaryDeek:
.1876	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16 				; number to R0
.1879	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.187c	5a		phy				phy
.187d	a0 01		ldy #$01			ldy 	#1
.187f	b1 08		lda ($08),y			lda 	(IFR0),y
.1881	7a		ply				ply
.1882	48		pha				pha
.1883	b2 08		lda ($08)			lda 	(IFR0)
.1885	a2 08		ldx #$08			ldx 	#IFR0
.1887	20 56 30	jsr $3056			jsr 	IFloatSetByte
.188a	68		pla				pla
.188b	85 09		sta $09				sta 	IFR0+IM1
.188d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.188e					EXPUnaryNull:
.188e	20 10 17	jsr $1710			jsr 	EXPTermValueR0
.1891	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1892					EXPUnaryFrac:
.1892	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 					; number to R0
.1895	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.1898	20 fe 2c	jsr $2cfe			jsr 	IFloatFractionalR0
.189b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.189c					EXPUnaryInkey:
.189c	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.189f	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18a1	20 a2 27	jsr $27a2			jsr 	StringTempAllocate
.18a4	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.18a7	b0 06		bcs $18af			bcs 	_EUIExit
.18a9	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18ac	20 d7 27	jsr $27d7			jsr 	StringTempWrite
.18af					_EUIExit:
.18af	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18b0					EXPUnaryInt:
.18b0	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 					; number to R0
.18b3	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.18b6	20 54 2d	jsr $2d54			jsr 	IFloatIntegerR0
.18b9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18ba					EXPUnaryLen:
.18ba	20 fd 16	jsr $16fd			jsr 	EXPEvalString 					; string to R0, zTemp0
.18bd	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.18c0	b2 22		lda ($22)			lda 	(zTemp0)
.18c2	a2 08		ldx #$08			ldx 	#IFR0
.18c4	20 56 30	jsr $3056			jsr 	IFloatSetByte
.18c7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.18c8					EXPUnaryParenthesis:
.18c8	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 					; number to R0
.18cb	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.18ce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.18cf					EXPUnaryRnd:
.18cf	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 				; number to R0
.18d2	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 				; )
.18d5	a2 08		ldx #$08			ldx 	#IFR0
.18d7	20 ee 18	jsr $18ee			jsr 	EXPLoadInRandom
.18da	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.18dc	85 0b		sta $0b				sta 	IFR0+IExp
.18de	60		rts				rts
.18df					ExpUnaryRand:
.18df	20 de 16	jsr $16de			jsr 	EXPEvalInteger 				; integer to R0
.18e2	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 				; )
.18e5	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.18e7	20 ee 18	jsr $18ee			jsr 	EXPLoadInRandom
.18ea	20 c5 2b	jsr $2bc5			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.18ed	60		rts				rts
.18ee					EXPLoadInRandom:
.18ee	20 54 30	jsr $3054			jsr 	IFloatSetZero
.18f1	20 03 19	jsr $1903			jsr 	EXPRandom32
.18f4	95 00		sta $00,x			sta 	IM0,x
.18f6	20 03 19	jsr $1903			jsr 	EXPRandom32
.18f9	95 01		sta $01,x			sta 	IM1,x
.18fb	20 03 19	jsr $1903			jsr 	EXPRandom32
.18fe	29 7f		and #$7f			and 	#$7F
.1900	95 02		sta $02,x			sta 	IM2,x
.1902	60		rts				rts
.1903					EXPRandom32:
.1903	5a		phy				phy
.1904	a0 08		ldy #$08			ldy 	#8
.1906	ad 12 05	lda $0512			lda 	EXPSeed+0
.1909	0d 13 05	ora $0513			ora 	EXPSeed+1
.190c	0d 14 05	ora $0514			ora 	EXPSeed+2
.190f	0d 15 05	ora $0515			ora 	EXPSeed+3
.1912	d0 08		bne $191c			bne 	_EXPRNoReset
.1914	ee 12 05	inc $0512			inc 	EXPSeed+0
.1917	a0 10		ldy #$10			ldy 	#16
.1919	8c 15 05	sty $0515			sty 	EXPSeed+3
.191c					_EXPRNoReset:
.191c	ad 12 05	lda $0512			lda 	EXPSeed+0
.191f					_EXPRLoop:
.191f	0a		asl a				asl		a
.1920	2e 13 05	rol $0513			rol 	EXPSeed+1
.1923	2e 14 05	rol $0514			rol 	EXPSeed+2
.1926	2e 15 05	rol $0515			rol 	EXPSeed+3
.1929	90 02		bcc $192d			bcc 	_EXPRNoEOR
.192b	49 c5		eor #$c5			eor 	#$C5
.192d					_EXPRNoEOR:
.192d	88		dey				dey
.192e	d0 ef		bne $191f			bne 	_EXPRLoop
.1930	8d 12 05	sta $0512			sta 	EXPSeed+0
.1933	7a		ply				ply
.1934	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1935					EXPUnarySgn:
.1935	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 					; number to R0
.1938	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.193b	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.193d	20 f6 2f	jsr $2ff6			jsr 	IFloatCopyToRegister
.1940	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1942	20 54 30	jsr $3054			jsr 	IFloatSetZero
.1945	a2 0c		ldx #$0c			ldx 	#IFR1
.1947	20 22 2d	jsr $2d22			jsr 	IFloatCompare 					; compare R1 vs 0.
.194a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.194b					EXPUnarySqr:
.194b	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 					; number to R0
.194e	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.1951	20 a0 2c	jsr $2ca0			jsr 	IFloatSquareRootR0 				; square root.
.1954	b0 01		bcs $1957			bcs 	_EUSValue
.1956	60		rts				rts
.1957					_EUSValue:
.1957	4c 20 25	jmp $2520		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.195a					EXPUnaryHex:
.195a	20 de 16	jsr $16de			jsr 	EXPEvalInteger 					; expr
.195d	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.1960	5a		phy				phy
.1961	a9 10		lda #$10			lda 	#16
.1963	20 f5 2d	jsr $2df5			jsr 	IFloatIntegerToStringR0
.1966	80 0a		bra $1972			bra 	EUSMain
.1968					EXPUnaryStr:
.1968	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 					; expr
.196b	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.196e	5a		phy				phy
.196f	20 51 2e	jsr $2e51			jsr 	IFloatFloatToStringR0 			; convert to string
.1972					EUSMain:
.1972	b0 18		bcs $198c			bcs 	_EUSError
.1974	86 22		stx $22				stx 	zTemp0 							; save string address
.1976	84 23		sty $23				sty 	zTemp0+1
.1978	48		pha				pha 									; save count
.1979	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.197b	20 a2 27	jsr $27a2			jsr 	StringTempAllocate
.197e	fa		plx				plx 									; count in X
.197f	a0 00		ldy #$00			ldy 	#0
.1981					_EUSCopy:
.1981	b1 22		lda ($22),y			lda 	(zTemp0),y
.1983	c8		iny				iny
.1984	20 d7 27	jsr $27d7			jsr 	StringTempWrite
.1987	ca		dex				dex
.1988	d0 f7		bne $1981			bne	 	_EUSCopy
.198a	7a		ply				ply
.198b	60		rts				rts
.198c					_EUSError:
.198c	4c 20 25	jmp $2520		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.198f					EXPUnaryInlineString:
.198f	18		clc				clc 								; physical address -> IM0,1
.1990	98		tya				tya
.1991	65 18		adc $18				adc 	codePtr
.1993	85 08		sta $08				sta 	IFR0+IM0
.1995	a5 19		lda $19				lda 	codePtr+1
.1997	69 00		adc #$00			adc 	#0
.1999	85 09		sta $09				sta 	IFR0+IM1
.199b	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in rest
.199d	a9 80		lda #$80			lda 	#$80
.199f	85 0b		sta $0b				sta 	IFR0+IExp
.19a1	98		tya				tya	 								; skip over it.
.19a2	38		sec				sec
.19a3	71 18		adc ($18),y			adc 	(codePtr),y
.19a5	a8		tay				tay
.19a6	60		rts				rts
.19a7					_EXPUISRange:
.19a7	4c 20 25	jmp $2520		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19aa					EXPUnaryLeft:
.19aa	20 f0 19	jsr $19f0			jsr 	EXPCommonStart 					; <string>,
.19ad	48		pha				pha 									; save string address on stack
.19ae	da		phx				phx
.19af	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19b1	48		pha				pha
.19b2	20 f1 16	jsr $16f1			jsr 	EXPEvalInteger8 				; characters to do
.19b5	80 44		bra $19fb			bra 	EXPSubstringCommon
.19b7					EXPUnaryRight:
.19b7	20 f0 19	jsr $19f0			jsr 	EXPCommonStart 					; <string>,
.19ba	48		pha				pha 									; save string address on stack
.19bb	da		phx				phx
.19bc	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19be	48		pha				pha
.19bf	20 f1 16	jsr $16f1			jsr 	EXPEvalInteger8 				; characters to do
.19c2	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.19c4	68		pla				pla
.19c5	38		sec				sec
.19c6	e5 22		sbc $22				sbc 	zTemp0
.19c8	b0 02		bcs $19cc			bcs 	_EUROffLeft
.19ca	a9 00		lda #$00			lda 	#0
.19cc					_EUROffLeft:
.19cc	48		pha				pha 									; start pos
.19cd	a9 ff		lda #$ff			lda 	#255
.19cf	80 2a		bra $19fb			bra 	EXPSubstringCommon
.19d1					EXPUnaryMid:
.19d1	20 f0 19	jsr $19f0			jsr 	EXPCommonStart 					; <string>,
.19d4	48		pha				pha 									; save string address on stack
.19d5	da		phx				phx
.19d6	20 f1 16	jsr $16f1			jsr 	EXPEvalInteger8 				; characters start
.19d9	f0 12		beq $19ed			beq 	_EUSError 						; 1 is left
.19db	3a		dec a				dec 	a 								; zero based.
.19dc	48		pha				pha
.19dd	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.19df	c9 99		cmp #$99			cmp 	#PR_COMMA
.19e1	f0 04		beq $19e7			beq 	_EUMLength 						; if so m is provided
.19e3	a9 ff		lda #$ff			lda 	#255 							; default m
.19e5	80 14		bra $19fb			bra 	EXPSubstringCommon
.19e7					_EUMLength:
.19e7	c8		iny				iny 									; consume comma
.19e8	20 f1 16	jsr $16f1			jsr 	EXPEvalInteger8 				; characters to do
.19eb	80 0e		bra $19fb			bra 	EXPSubstringCommon
.19ed					_EUSError:
.19ed	4c 31 25	jmp $2531		jmp	ErrorV_value
.19f0					EXPCommonStart:
.19f0	20 fd 16	jsr $16fd			jsr 	EXPEvalString
.19f3	20 b4 26	jsr $26b4			jsr 	ERRCheckComma
.19f6	a5 08		lda $08				lda 	IFR0+IM0
.19f8	a6 09		ldx $09				ldx 	IFR0+IM1
.19fa	60		rts				rts
.19fb					EXPSubstringCommon:
.19fb	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.19fd	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; check right bracket.
.1a00	68		pla				pla 									; start position
.1a01	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a03	fa		plx				plx 									; get string address to zTemp2.
.1a04	86 27		stx $27				stx 	zTemp2+1
.1a06	68		pla				pla
.1a07	85 26		sta $26				sta 	zTemp2
.1a09	38		sec				sec 									; length - start is the max count of chars
.1a0a	b2 26		lda ($26)			lda 	(zTemp2)
.1a0c	e5 25		sbc $25				sbc 	zTemp1+1
.1a0e	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a10	b0 02		bcs $1a14			bcs 	_EXPSSNoTrim
.1a12	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a14					_EXPSSNoTrim:
.1a14	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a16	20 a2 27	jsr $27a2			jsr 	StringTempAllocate 				; allocate memory for it.
.1a19	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a1b	f0 15		beq $1a32			beq 	_EXPSSExit
.1a1d	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a1f	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a21	b0 0f		bcs $1a32			bcs 	_EXPSSExit
.1a23	5a		phy				phy
.1a24	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a26	c8		iny				iny 									; +1 for the length byte
.1a27					_EXPSSCopy:
.1a27	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a29	20 d7 27	jsr $27d7			jsr 	StringTempWrite
.1a2c	c8		iny				iny
.1a2d	c6 24		dec $24				dec 	zTemp1
.1a2f	d0 f6		bne $1a27			bne 	_EXPSSCopy
.1a31	7a		ply				ply
.1a32					_EXPSSExit:
.1a32	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a33					EXPUnaryVal:
.1a33	20 fd 16	jsr $16fd			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a36	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 					; )
.1a39	20 3d 1a	jsr $1a3d			jsr 	VALConversionZTemp0
.1a3c	60		rts				rts
.1a3d					VALConversionZTemp0:
.1a3d	5a		phy				phy
.1a3e	18		clc				clc
.1a3f	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a41	69 01		adc #$01			adc 	#1
.1a43	aa		tax				tax
.1a44	a5 23		lda $23				lda 	zTemp0+1
.1a46	69 00		adc #$00			adc 	#0
.1a48	a8		tay				tay
.1a49	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a4b	20 b8 2e	jsr $2eb8			jsr 	IFloatStringToFloatR0 			; do conversion
.1a4e	b0 02		bcs $1a52			bcs 	_EUVError
.1a50	7a		ply				ply
.1a51	60		rts				rts
.1a52					_EUVError:
.1a52	4c 31 25	jmp $2531		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a55					BinaryPrecedence:
>1a55	02					.byte	 2	; $ef =
>1a56	02					.byte	 2	; $f0 <>
>1a57	02					.byte	 2	; $f1 <=
>1a58	02					.byte	 2	; $f2 <
>1a59	02					.byte	 2	; $f3 >=
>1a5a	02					.byte	 2	; $f4 >
>1a5b	01					.byte	 1	; $f5 XOR
>1a5c	01					.byte	 1	; $f6 OR
>1a5d	01					.byte	 1	; $f7 AND
>1a5e	04					.byte	 4	; $f8 DIV
>1a5f	04					.byte	 4	; $f9 MOD
>1a60	04					.byte	 4	; $fa <<
>1a61	04					.byte	 4	; $fb >>
>1a62	04					.byte	 4	; $fc /
>1a63	04					.byte	 4	; $fd *
>1a64	03					.byte	 3	; $fe -
>1a65	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1a66					StructureOffsets:
>1a66	01					.byte	1  	; $80 REPEAT
>1a67	ff					.byte	255	; $81 UNTIL
>1a68	01					.byte	1  	; $82 WHILE
>1a69	ff					.byte	255	; $83 WEND
>1a6a	01					.byte	1  	; $84 IF
>1a6b	ff					.byte	255	; $85 ENDIF
>1a6c	01					.byte	1  	; $86 DO
>1a6d	ff					.byte	255	; $87 LOOP
>1a6e	01					.byte	1  	; $88 PROC
>1a6f	ff					.byte	255	; $89 ENDPROC
>1a70	01					.byte	1  	; $8a FOR
>1a71	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1a72					StandardTokens:
>1a72	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1a79	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1a7f	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1a85	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1a8a	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1a8d	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1a93	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1a96	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1a9b	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1aa0	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1aa8	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1aac	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1ab1	00					.byte	$00                                     	; $8c [[end]]
>1ab2	00					.byte	$00                                     	; $8d [[shift]]
>1ab3	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1ab8	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1abd	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1ac0	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1ac5	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1ac9	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1acf	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1ad5	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1ada	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1ade	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1ae2	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1ae7	01 2c					.byte	$01,$2c                                 	; $99 ,
>1ae9	01 3b					.byte	$01,$3b                                 	; $9a ;
>1aeb	01 3a					.byte	$01,$3a                                 	; $9b :
>1aed	01 27					.byte	$01,$27                                 	; $9c '
>1aef	01 29					.byte	$01,$29                                 	; $9d )
>1af1	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1af5	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1afb	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1aff	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1b03	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1b08	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1b0c	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1b13	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1b18	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1b1d	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1b22	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1b27	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1b2c	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $aa read
>1b31	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $ab data
>1b36	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $ac restore
>1b3e	00					.byte	0											; $ad
>1b3f	00					.byte	0											; $ae
>1b40	00					.byte	0											; $af
>1b41	00					.byte	0											; $b0
>1b42	00					.byte	0											; $b1
>1b43	00					.byte	0											; $b2
>1b44	00					.byte	0											; $b3
>1b45	00					.byte	0											; $b4
>1b46	00					.byte	0											; $b5
>1b47	00					.byte	0											; $b6
>1b48	00					.byte	0											; $b7
>1b49	00					.byte	0											; $b8
>1b4a	00					.byte	0											; $b9
>1b4b	00					.byte	0											; $ba
>1b4c	00					.byte	0											; $bb
>1b4d	00					.byte	0											; $bc
>1b4e	00					.byte	0											; $bd
>1b4f	00					.byte	0											; $be
>1b50	00					.byte	0											; $bf
>1b51	00					.byte	0											; $c0
>1b52	00					.byte	0											; $c1
>1b53	00					.byte	0											; $c2
>1b54	00					.byte	0											; $c3
>1b55	00					.byte	0											; $c4
>1b56	00					.byte	0											; $c5
>1b57	00					.byte	0											; $c6
>1b58	00					.byte	0											; $c7
>1b59	00					.byte	0											; $c8
>1b5a	00					.byte	0											; $c9
>1b5b	00					.byte	0											; $ca
>1b5c	00					.byte	0											; $cb
>1b5d	00					.byte	0											; $cc
>1b5e	00					.byte	0											; $cd
>1b5f	00					.byte	0											; $ce
>1b60	00					.byte	0											; $cf
>1b61	00					.byte	0											; $d0
>1b62	00					.byte	0											; $d1
>1b63	00					.byte	0											; $d2
>1b64	00					.byte	0											; $d3
>1b65	00					.byte	0											; $d4
>1b66	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1b6c	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1b72	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1b7a	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1b81	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1b87	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1b8d	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1b92	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1b97	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1b9c	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1ba1	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1ba6	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1bac	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bb1	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1bb9	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1bc0	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1bc5	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1bca	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1bd0	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1bd5	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1bdb	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1be0	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1be6	01 28					.byte	$01,$28                                 	; $eb (
>1be8	01 24					.byte	$01,$24                                 	; $ec $
>1bea	00					.byte	$00                                     	; $ed [[decimal]]
>1beb	00					.byte	$00                                     	; $ee [[string]]
>1bec	01 3d					.byte	$01,$3d                                 	; $ef =
>1bee	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1bf1	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1bf4	01 3c					.byte	$01,$3c                                 	; $f2 <
>1bf6	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1bf9	01 3e					.byte	$01,$3e                                 	; $f4 >
>1bfb	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1bff	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c02	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c06	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c0a	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c0e	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c11	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c14	01 2f					.byte	$01,$2f                                 	; $fc /
>1c16	01 2a					.byte	$01,$2a                                 	; $fd *
>1c18	01 2d					.byte	$01,$2d                                 	; $fe -
>1c1a	01 2b					.byte	$01,$2b                                 	; $ff +
>1c1c	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c1d					VectorTable:
>1c1d	ff 23					.word	Command_REPEAT           ; $80 REPEAT
>1c1f	08 24					.word	Command_UNTIL            ; $81 UNTIL
>1c21	e2 24					.word	Command_WHILE            ; $82 WHILE
>1c23	03 25					.word	Command_WEND             ; $83 WEND
>1c25	d5 23					.word	IfCommand                ; $84 IF
>1c27	fe 23					.word	EndIf                    ; $85 ENDIF
>1c29	72 22					.word	Command_DO               ; $86 DO
>1c2b	8a 22					.word	Command_LOOP             ; $87 LOOP
>1c2d	13 15					.word	NoExec08                 ; $88 PROC
>1c2f	66 22					.word	Command_ENDPROC          ; $89 ENDPROC
>1c31	93 22					.word	Command_FOR              ; $8a FOR
>1c33	20 23					.word	Command_NEXT             ; $8b NEXT
>1c35	99 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c37	f5 14					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c39	f7 23					.word	ElseCode                 ; $8e ELSE
>1c3b	13 15					.word	NoExec01                 ; $8f THEN
>1c3d	13 15					.word	NoExec02                 ; $90 TO
>1c3f	13 15					.word	NoExec03                 ; $91 STEP
>1c41	93 12					.word	CommandLET               ; $92 LET
>1c43	e4 11					.word	Command_Print            ; $93 PRINT
>1c45	dd 11					.word	Command_Input            ; $94 INPUT
>1c47	2a 22					.word	Command_CALL             ; $95 CALL
>1c49	fe 14					.word	Command_Sys              ; $96 SYS
>1c4b	52 14					.word	Command_REM              ; $97 REM
>1c4d	7b 22					.word	Command_EXIT             ; $98 EXIT
>1c4f	13 15					.word	NoExec04                 ; $99 ,
>1c51	13 15					.word	NoExec05                 ; $9a ;
>1c53	13 15					.word	NoExec06                 ; $9b :
>1c55	52 14					.word	Command_REM2             ; $9c '
>1c57	13 15					.word	NoExec07                 ; $9d )
>1c59	97 10					.word	CommandDIM               ; $9e DIM
>1c5b	23 10					.word	Command_CLEAR            ; $9f CLEAR
>1c5d	dd 13					.word	Command_NEW              ; $a0 NEW
>1c5f	8d 14					.word	Command_RUN              ; $a1 RUN
>1c61	fb 14					.word	Command_STOP             ; $a2 STOP
>1c63	f8 14					.word	Command_END              ; $a3 END
>1c65	15 10					.word	Command_ASSERT           ; $a4 ASSERT
>1c67	0d 13					.word	Command_LIST             ; $a5 LIST
>1c69	29 28					.word	NotImplemented           ; $a6 SAVE
>1c6b	29 28					.word	NotImplemented           ; $a7 LOAD
>1c6d	b6 11					.word	Command_Poke             ; $a8 POKE
>1c6f	b3 11					.word	Command_Doke             ; $a9 DOKE
>1c71	e6 13					.word	Command_READ             ; $aa READ
>1c73	4a 14					.word	Command_DATA             ; $ab DATA
>1c75	5f 14					.word	Command_RESTORE          ; $ac RESTORE
>1c77	29 28					.word	NotImplemented           ; $ad
>1c79	29 28					.word	NotImplemented           ; $ae
>1c7b	29 28					.word	NotImplemented           ; $af
>1c7d	29 28					.word	NotImplemented           ; $b0
>1c7f	29 28					.word	NotImplemented           ; $b1
>1c81	29 28					.word	NotImplemented           ; $b2
>1c83	29 28					.word	NotImplemented           ; $b3
>1c85	29 28					.word	NotImplemented           ; $b4
>1c87	29 28					.word	NotImplemented           ; $b5
>1c89	29 28					.word	NotImplemented           ; $b6
>1c8b	29 28					.word	NotImplemented           ; $b7
>1c8d	29 28					.word	NotImplemented           ; $b8
>1c8f	29 28					.word	NotImplemented           ; $b9
>1c91	29 28					.word	NotImplemented           ; $ba
>1c93	29 28					.word	NotImplemented           ; $bb
>1c95	29 28					.word	NotImplemented           ; $bc
>1c97	29 28					.word	NotImplemented           ; $bd
>1c99	29 28					.word	NotImplemented           ; $be
>1c9b	29 28					.word	NotImplemented           ; $bf
>1c9d	29 28					.word	NotImplemented           ; $c0
>1c9f	29 28					.word	NotImplemented           ; $c1
>1ca1	29 28					.word	NotImplemented           ; $c2
>1ca3	29 28					.word	NotImplemented           ; $c3
>1ca5	29 28					.word	NotImplemented           ; $c4
>1ca7	29 28					.word	NotImplemented           ; $c5
>1ca9	29 28					.word	NotImplemented           ; $c6
>1cab	29 28					.word	NotImplemented           ; $c7
>1cad	29 28					.word	NotImplemented           ; $c8
>1caf	29 28					.word	NotImplemented           ; $c9
>1cb1	29 28					.word	NotImplemented           ; $ca
>1cb3	29 28					.word	NotImplemented           ; $cb
>1cb5	29 28					.word	NotImplemented           ; $cc
>1cb7	29 28					.word	NotImplemented           ; $cd
>1cb9	29 28					.word	NotImplemented           ; $ce
>1cbb	29 28					.word	NotImplemented           ; $cf
>1cbd	29 28					.word	NotImplemented           ; $d0
>1cbf	29 28					.word	NotImplemented           ; $d1
>1cc1	29 28					.word	NotImplemented           ; $d2
>1cc3	29 28					.word	NotImplemented           ; $d3
>1cc5	29 28					.word	NotImplemented           ; $d4
>1cc7	76 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1cc9	68 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1ccb	b7 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1ccd	aa 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1ccf	d1 19					.word	EXPUnaryMid              ; $d9 MID$(
>1cd1	68 19					.word	EXPUnaryStr              ; $da STR$(
>1cd3	33 1a					.word	EXPUnaryVal              ; $db VAL(
>1cd5	35 19					.word	EXPUnarySgn              ; $dc SGN(
>1cd7	e6 17					.word	EXPUnaryAbs              ; $dd ABS(
>1cd9	ba 18					.word	EXPUnaryLen              ; $de LEN(
>1cdb	4b 19					.word	EXPUnarySqr              ; $df SQR(
>1cdd	06 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1cdf	f0 17					.word	EXPUnaryAsc              ; $e1 ASC(
>1ce1	9c 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1ce3	29 28					.word	NotImplemented           ; $e3 EVENT(
>1ce5	29 28					.word	NotImplemented           ; $e4 TIME
>1ce7	b0 18					.word	EXPUnaryInt              ; $e5 INT(
>1ce9	92 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1ceb	17 18					.word	EXPUnaryDec              ; $e7 DEC(
>1ced	5a 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1cef	cf 18					.word	EXPUnaryRnd              ; $e9 RND(
>1cf1	df 18					.word	ExpUnaryRand             ; $ea RAND(
>1cf3	c8 18					.word	EXPUnaryParenthesis      ; $eb (
>1cf5	8e 18					.word	EXPUnaryNull             ; $ec $
>1cf7	65 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1cf9	8f 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1cfb	d0 15					.word	EXPCompareEqual          ; $ef =
>1cfd	eb 15					.word	EXPCompareNotEqual       ; $f0 <>
>1cff	f4 15					.word	EXPCompareLessEqual      ; $f1 <=
>1d01	d9 15					.word	EXPCompareLess           ; $f2 <
>1d03	fd 15					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d05	e2 15					.word	EXPCompareGreater        ; $f4 >
>1d07	7d 15					.word	EXPBinXor                ; $f5 XOR
>1d09	71 15					.word	EXPBinOr                 ; $f6 OR
>1d0b	65 15					.word	EXPBinAnd                ; $f7 AND
>1d0d	3d 15					.word	EXPBinIDiv               ; $f8 DIV
>1d0f	4e 15					.word	EXPBinIMod               ; $f9 MOD
>1d11	48 16					.word	EXPBinLeft               ; $fa <<
>1d13	50 16					.word	EXPBinRight              ; $fb >>
>1d15	31 15					.word	EXPBinFDiv               ; $fc /
>1d17	28 15					.word	EXPBinMul                ; $fd *
>1d19	1f 15					.word	EXPBinSub                ; $fe -
>1d1b	16 15					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d1d					TOKDetokenise:
.1d1d	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d1f	84 27		sty $27				sty 	zTemp2+1
.1d21	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1d24					_TOKDLoop:
.1d24	20 53 1d	jsr $1d53			jsr 	TOKDGet 					; get next
.1d27	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1d29	f0 26		beq $1d51			beq 	_TOKDExit
.1d2b	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1d2d	f0 1d		beq $1d4c			beq 	_TOKDDataItem
.1d2f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1d31	f0 19		beq $1d4c			beq 	_TOKDDataItem
.1d33	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1d35	10 05		bpl $1d3c			bpl 	_TOKDNotToken
.1d37	20 1b 1e	jsr $1e1b			jsr 	TOKDToken 					; token to text.
.1d3a	80 e8		bra $1d24			bra 	_TOKDLoop
.1d3c					_TOKDNotToken:
.1d3c	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1d3e	90 05		bcc $1d45			bcc 	_TOKDNotIdentifier
.1d40	20 8e 1d	jsr $1d8e			jsr 	TOKDIdentifier
.1d43	80 df		bra $1d24			bra 	_TOKDLoop
.1d45					_TOKDNotIdentifier:
.1d45	a0 0a		ldy #$0a			ldy 	#10
.1d47	20 d7 1d	jsr $1dd7			jsr 	TOKDInteger
.1d4a	80 d8		bra $1d24			bra 	_TOKDLoop
.1d4c					_TOKDDataItem:
.1d4c	20 69 1d	jsr $1d69			jsr 	TOKDDataItem
.1d4f	80 d3		bra $1d24			bra 	_TOKDLoop
.1d51					_TOKDExit:
.1d51	18		clc				clc
.1d52	60		rts				rts
.1d53	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1d55	e6 26		inc $26				inc 	zTemp2
.1d57	d0 02		bne $1d5b			bne 	_TKDGExit
.1d59	e6 27		inc $27				inc 	zTemp2+1
.1d5b					_TKDGExit:
.1d5b	60		rts				rts
.1d5c					TOKDOutput:
.1d5c	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1d5f	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1d62					TOKSetDetokeniseOutput:
.1d62	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1d65	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1d68	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1d69					TOKDDataItem:
.1d69	a8		tay				tay 								; type in Y
.1d6a	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1d6c	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1d6e	f0 02		beq $1d72			beq 	_TOKDDIsString
.1d70	a9 2e		lda #$2e			lda 	#'.'
.1d72					_TOKDDIsString:
.1d72	20 5c 1d	jsr $1d5c			jsr 	TOKDOutput 					; dump it
.1d75	20 53 1d	jsr $1d53			jsr 	TOKDGet 					; get length into X
.1d78	aa		tax				tax
.1d79					_TOKDDOutput:
.1d79	ca		dex				dex 								; are we complete
.1d7a	30 08		bmi $1d84			bmi 	_TOKDDEnd
.1d7c	20 53 1d	jsr $1d53			jsr 	TOKDGet 					; get character and output it
.1d7f	20 5c 1d	jsr $1d5c			jsr 	TOKDOutput
.1d82	80 f5		bra $1d79			bra 	_TOKDDOutput
.1d84					_TOKDDEnd:
.1d84	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1d86	d0 05		bne $1d8d			bne 	_TOKDDNotString
.1d88	a9 22		lda #$22			lda 	#'"'
.1d8a	20 5c 1d	jsr $1d5c			jsr 	TOKDOutput
.1d8d					_TOKDDNotString:
.1d8d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1d8e					TOKDIdentifier:
.1d8e	a0 ff		ldy #$ff			ldy 	#$FF
.1d90	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1d93					_TOKDLoop:
.1d93	a8		tay				tay 								; token in Y
.1d94	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1d96	c0 64		cpy #$64			cpy 	#$64
.1d98	f0 11		beq $1dab			beq 	_TOKDIOutput
.1d9a	a9 5f		lda #$5f			lda 	#'_'
.1d9c	c0 65		cpy #$65			cpy 	#$65
.1d9e	f0 0b		beq $1dab			beq 	_TOKDIOutput
.1da0	98		tya				tya 								; handle a-z
.1da1	18		clc				clc
.1da2	69 21		adc #$21			adc	 	#$21
.1da4	c0 5a		cpy #$5a			cpy 	#$5A
.1da6	90 03		bcc $1dab			bcc 	_TOKDIOutput
.1da8	38		sec				sec 								; handle 0-9
.1da9	e9 4b		sbc #$4b			sbc 	#$4B
.1dab					_TOKDIOutput:
.1dab	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1dae	10 08		bpl $1db8			bpl 	_TOKDINoSpacing
.1db0	48		pha				pha
.1db1	20 4d 1e	jsr $1e4d			jsr 	TOKDSpacing
.1db4	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1db7	68		pla				pla
.1db8					_TOKDINoSpacing:
.1db8	20 5c 1d	jsr $1d5c			jsr 	TOKDOutput
.1dbb	20 53 1d	jsr $1d53			jsr 	TOKDGet 					; get next token
.1dbe	c9 7c		cmp #$7c			cmp 	#$7C
.1dc0	90 d1		bcc $1d93			bcc 	_TOKDLoop
.1dc2	f0 12		beq $1dd6			beq 	_TOKDIExit 					; it's a number, no tail.
.1dc4	4a		lsr a				lsr 	a 							; string ?
.1dc5	90 07		bcc $1dce			bcc 	_TOKDICheckArray
.1dc7	48		pha				pha
.1dc8	a9 24		lda #$24			lda 	#"$"
.1dca	20 5c 1d	jsr $1d5c			jsr 	TOKDOutput
.1dcd	68		pla				pla
.1dce					_TOKDICheckArray:
.1dce	4a		lsr a				lsr 	a 							; array ?
.1dcf	90 05		bcc $1dd6			bcc 	_TOKDIExit
.1dd1	a9 28		lda #$28			lda 	#"("
.1dd3	20 5c 1d	jsr $1d5c			jsr 	TOKDOutput
.1dd6					_TOKDIExit:
.1dd6	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1dd7					TOKDInteger:
.1dd7	5a		phy				phy 								; save base
.1dd8	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1dda	20 56 30	jsr $3056			jsr 	IFloatSetByte
.1ddd					_TOKDILoop:
.1ddd	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1ddf	c9 40		cmp #$40			cmp 	#$40
.1de1	b0 1d		bcs $1e00			bcs 	_TOKDIHaveInteger
.1de3	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1de5	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.1de8	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.1deb	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.1dee	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.1df1	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.1df4	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.1df7	20 53 1d	jsr $1d53			jsr 	TOKDGet 					; OR byte in.
.1dfa	05 08		ora $08				ora 	IFR0+IM0
.1dfc	85 08		sta $08				sta 	IFR0+IM0
.1dfe	80 dd		bra $1ddd			bra 	_TOKDILoop
.1e00					_TOKDIHaveInteger:
.1e00	7a		ply				ply 								; restore base
.1e01	98		tya				tya 								; base in A
.1e02	20 f5 2d	jsr $2df5			jsr 	IFloatIntegerToStringR0
.1e05	86 22		stx $22				stx 	zTemp0
.1e07	84 23		sty $23				sty 	zTemp0+1
.1e09	b2 22		lda ($22)			lda 	(zTemp0)
.1e0b	20 4d 1e	jsr $1e4d			jsr 	TOKDSpacing 				; check spacing okay.
.1e0e	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1e10					_TOKDOutput:
.1e10	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e12	20 5c 1d	jsr $1d5c			jsr 	TOKDOutput
.1e15	c8		iny				iny
.1e16	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e18	d0 f6		bne $1e10			bne 	_TOKDOutput
.1e1a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e1b					TOKDToken:
.1e1b	a2 72		ldx #$72			ldx 	#StandardTokens & $FF
.1e1d	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e1f					_TOKDSearch:
.1e1f	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1e21	84 23		sty $23				sty 	zTemp0+1
.1e23	aa		tax				tax 								; token ID in X.
.1e24					_TOKDFind:
.1e24	ca		dex				dex 								; reached the start
.1e25	10 0d		bpl $1e34			bpl 	_TOKDFound
.1e27	38		sec				sec 								; go to next entry
.1e28	b2 22		lda ($22)			lda 	(zTemp0)
.1e2a	65 22		adc $22				adc 	zTemp0
.1e2c	85 22		sta $22				sta 	zTemp0
.1e2e	90 f4		bcc $1e24			bcc 	_TOKDFind
.1e30	e6 23		inc $23				inc 	zTemp0+1
.1e32	80 f0		bra $1e24			bra 	_TOKDFind
.1e34					_TOKDFound:
.1e34	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1e36	f0 14		beq $1e4c			beq 	_TOKDExit
.1e38	aa		tax				tax
.1e39	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1e3b	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1e3d	20 4d 1e	jsr $1e4d			jsr 	TOKDSpacing
.1e40					_TOKDOutput:
.1e40	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e42	20 e5 21	jsr $21e5			jsr 	TOKToLower
.1e45	20 5c 1d	jsr $1d5c			jsr 	TOKDOutput
.1e48	c8		iny				iny
.1e49	ca		dex				dex
.1e4a	d0 f4		bne $1e40			bne 	_TOKDOutput
.1e4c					_TOKDExit:
.1e4c	60		rts				rts
.1e4d					TOKDSpacing:
.1e4d	20 fc 21	jsr $21fc			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1e50	90 0d		bcc $1e5f			bcc 	_TOKDSExit
.1e52	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1e55	20 fc 21	jsr $21fc			jsr 	TOKIsIdentifierElement
.1e58	90 05		bcc $1e5f			bcc 	_TOKDSExit
.1e5a	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1e5c	20 5c 1d	jsr $1d5c			jsr 	TOKDOutput
.1e5f					_TOKDSExit:
.1e5f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1e60					PGMDeleteLine:
.1e60	20 13 1f	jsr $1f13			jsr 	PGMEndProgram 				; end of program into zTemp0
.1e63	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1e65	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1e68	85 25		sta $25				sta 	zTemp1+1
.1e6a					_PGMDLoop:
.1e6a	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1e6c	38		sec				sec
.1e6d	f0 3a		beq $1ea9			beq 	_PGMDExit
.1e6f	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1e71	b1 24		lda ($24),y			lda 	(zTemp1),y
.1e73	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1e76	d0 08		bne $1e80			bne 	_PGMDNext
.1e78	c8		iny				iny
.1e79	b1 24		lda ($24),y			lda 	(zTemp1),y
.1e7b	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1e7e	f0 0d		beq $1e8d			beq 	_PGMDDelete
.1e80					_PGMDNext:
.1e80	18		clc				clc
.1e81	b2 24		lda ($24)			lda 	(zTemp1)
.1e83	65 24		adc $24				adc 	zTemp1
.1e85	85 24		sta $24				sta 	zTemp1
.1e87	90 e1		bcc $1e6a			bcc 	_PGMDLoop
.1e89	e6 25		inc $25				inc 	zTemp1+1
.1e8b	80 dd		bra $1e6a			bra 	_PGMDLoop
.1e8d					_PGMDDelete:
.1e8d	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1e8f	a8		tay				tay
.1e90					_PGMDCopy:
.1e90	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1e92	92 24		sta ($24)			sta 	(zTemp1)
.1e94	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1e96	c5 22		cmp $22				cmp 	zTemp0
.1e98	d0 07		bne $1ea1			bne 	_PGMDNext2
.1e9a	a5 25		lda $25				lda 	zTemp1+1
.1e9c	c5 23		cmp $23				cmp 	zTemp0+1
.1e9e	18		clc				clc
.1e9f	f0 08		beq $1ea9			beq 	_PGMDExit
.1ea1					_PGMDNext2:
.1ea1	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1ea3	d0 eb		bne $1e90			bne 	_PGMDCopy
.1ea5	e6 25		inc $25				inc 	zTemp1+1
.1ea7	80 e7		bra $1e90			bra 	_PGMDCopy
.1ea9					_PGMDExit:
.1ea9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1eaa					PGMInsertLine:
.1eaa	20 13 1f	jsr $1f13			jsr 	PGMEndProgram 				; end of program into zTemp0
.1ead	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1eaf	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1eb2	85 25		sta $25				sta 	zTemp1+1
.1eb4					_PGMILoop:
.1eb4	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1eb6	f0 1c		beq $1ed4			beq 	_PGMIInsert
.1eb8	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1eba	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ebc	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1ebf	c8		iny				iny
.1ec0	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ec2	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1ec5	b0 0d		bcs $1ed4			bcs 	_PGMIInsert 				; insert here.
.1ec7	18		clc				clc
.1ec8	b2 24		lda ($24)			lda 	(zTemp1)
.1eca	65 24		adc $24				adc 	zTemp1
.1ecc	85 24		sta $24				sta 	zTemp1
.1ece	90 e4		bcc $1eb4			bcc 	_PGMILoop
.1ed0	e6 25		inc $25				inc 	zTemp1+1
.1ed2	80 e0		bra $1eb4			bra 	_PGMILoop
.1ed4					_PGMIInsert:
.1ed4	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1ed7					_PGMIInsertLoop:
.1ed7	b2 22		lda ($22)			lda 	(zTemp0)
.1ed9	91 22		sta ($22),y			sta 	(zTemp0),y
.1edb	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1edd	c5 22		cmp $22				cmp 	zTemp0
.1edf	d0 06		bne $1ee7			bne 	_PGMINext
.1ee1	a5 25		lda $25				lda 	zTemp1+1
.1ee3	c5 23		cmp $23				cmp 	zTemp0+1
.1ee5	f0 0a		beq $1ef1			beq 	_PGMIInserted
.1ee7					_PGMINext:
.1ee7	a5 22		lda $22				lda 	zTemp0
.1ee9	d0 02		bne $1eed			bne 	_PGMINoBorrow
.1eeb	c6 23		dec $23				dec 	zTemp0+1
.1eed					_PGMINoBorrow:
.1eed	c6 22		dec $22				dec 	zTemp0
.1eef	80 e6		bra $1ed7			bra 	_PGMIInsertLoop
.1ef1					_PGMIInserted:
.1ef1	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1ef3					_PGMICopyLoop:
.1ef3	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1ef6	91 24		sta ($24),y			sta 	(zTemp1),y
.1ef8	c8		iny				iny
.1ef9	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1efc	d0 f5		bne $1ef3			bne 	_PGMICopyLoop
.1efe	18		clc				clc
.1eff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f00					PGMSetBaseAddress:
.1f00	8e 1a 05	stx $051a			stx 	PGMBaseHigh
.1f03	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh
.1f06	60		rts				rts
.1f07					PGMNewProgram:
.1f07	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f09	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f0c	85 23		sta $23				sta 	zTemp0+1
.1f0e	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1f10	92 22		sta ($22)			sta 	(zTemp0)
.1f12	60		rts				rts
.1f13					PGMEndProgram:
.1f13	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f15	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f18	85 23		sta $23				sta 	zTemp0+1
.1f1a					_PGMEPLoop:
.1f1a	b2 22		lda ($22)			lda 	(zTemp0)
.1f1c	f0 0b		beq $1f29			beq 	_PGMEPExit
.1f1e	18		clc				clc
.1f1f	65 22		adc $22				adc 	zTemp0
.1f21	85 22		sta $22				sta 	zTemp0
.1f23	90 f5		bcc $1f1a			bcc 	_PGMEPLoop
.1f25	e6 23		inc $23				inc 	zTemp0+1
.1f27	80 f1		bra $1f1a			bra 	_PGMEPLoop
.1f29					_PGMEPExit:
.1f29	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1f2a					TOKResetElement:
.1f2a	9c 1c 05	stz $051c			stz 	TOKElement
.1f2d	60		rts				rts
.1f2e					TOKWriteElement:
.1f2e	da		phx				phx
.1f2f	ae 1c 05	ldx $051c			ldx 	TOKElement
.1f32	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1f35	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1f38	fa		plx				plx
.1f39	ee 1c 05	inc $051c			inc 	TOKElement
.1f3c	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1f3d					TOKTokeniseConstant:
.1f3d	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1f3f	48		pha				pha 								; save on stack
.1f40	29 c0		and #$c0			and 	#$C0
.1f42	05 09		ora $09				ora 	IFR0+IM1
.1f44	05 0a		ora $0a				ora 	IFR0+IM2
.1f46	f0 10		beq $1f58			beq 	_TTCLess
.1f48	da		phx				phx
.1f49	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1f4b					_TTCShiftRight:
.1f4b	46 0a		lsr $0a				lsr 	IFR0+IM2
.1f4d	66 09		ror $09				ror 	IFR0+IM1
.1f4f	66 08		ror $08				ror 	IFR0+IM0
.1f51	ca		dex				dex
.1f52	d0 f7		bne $1f4b			bne 	_TTCShiftRight
.1f54	fa		plx				plx
.1f55	20 3d 1f	jsr $1f3d			jsr 	TOKTokeniseConstant
.1f58					_TTCLess:
.1f58	68		pla				pla
.1f59	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1f5b	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.1f5e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1f5f					TOKTokeniseDecimals:
.1f5f	20 0a 20	jsr $200a			jsr 	TOKGetNext 					; consume the .
.1f62	20 72 21	jsr $2172			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1f65	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1f67	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.1f6a	20 6f 1f	jsr $1f6f			jsr 	TOKOutputElementBuffer 		; then the buffer
.1f6d	18		clc				clc
.1f6e	60		rts				rts
.1f6f					TOKOutputElementBuffer:
.1f6f	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1f72	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.1f75	a8		tay				tay 								; put in Y
.1f76	f0 0c		beq $1f84			beq 	_TOEExit 					; exit if empty which is okay.
.1f78	a2 01		ldx #$01			ldx 	#1
.1f7a					_TOELoop:
.1f7a	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.1f7d	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.1f80	e8		inx				inx
.1f81	88		dey				dey
.1f82	d0 f6		bne $1f7a			bne 	_TOELoop
.1f84					_TOEExit:
.1f84	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1f85					TOKTokenise:
.1f85	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.1f88	8e 1c 06	stx $061c			stx 	TOKDataSource
.1f8b	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1f8d	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.1f90	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1f92	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1f95	9c 01 04	stz $0401			stz 	TOKLineNumber
.1f98	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1f9b					_TOKMainLoop:
.1f9b	20 06 20	jsr $2006			jsr 	TOKGet 						; what follows.
.1f9e	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1fa0	f0 4f		beq $1ff1			beq 	_TOKExit
.1fa2	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1fa4	d0 05		bne $1fab			bne 	_TOKElement
.1fa6	20 0a 20	jsr $200a			jsr 	TOKGetNext
.1fa9	80 f0		bra $1f9b			bra 	_TOKMainLoop
.1fab					_TOKElement:
.1fab	20 f0 21	jsr $21f0			jsr 	TOKIsDigit 					; is it 0..9
.1fae	90 0a		bcc $1fba			bcc 	_TOKNotDigit
.1fb0	20 49 21	jsr $2149			jsr 	TOKTokeniseInteger 			; get integer
.1fb3	b0 43		bcs $1ff8			bcs 	_TOKFail 					; did it fail ?
.1fb5	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.1fb8	80 e1		bra $1f9b			bra 	_TOKMainLoop
.1fba					_TOKNotDigit:
.1fba	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.1fbd	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1fbf	d0 07		bne $1fc8			bne 	_TOKNotHex
.1fc1	20 53 20	jsr $2053			jsr 	TOKTokeniseHexadecimal
.1fc4	b0 32		bcs $1ff8			bcs 	_TOKFail
.1fc6	80 d3		bra $1f9b			bra 	_TOKMainLoop
.1fc8					_TOKNotHex:
.1fc8	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1fca	d0 07		bne $1fd3			bne 	_TOKNotDecimal
.1fcc	20 5f 1f	jsr $1f5f			jsr 	TOKTokeniseDecimals
.1fcf	b0 27		bcs $1ff8			bcs 	_TOKFail
.1fd1	80 c8		bra $1f9b			bra 	_TOKMainLoop
.1fd3					_TOKNotDecimal:
.1fd3	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1fd5	d0 07		bne $1fde			bne 	_TOKNotString
.1fd7	20 b7 21	jsr $21b7			jsr 	TOKTokeniseString
.1fda	b0 1c		bcs $1ff8			bcs 	_TOKFail
.1fdc	80 bd		bra $1f9b			bra 	_TOKMainLoop
.1fde					_TOKNotString:
.1fde	20 0d 22	jsr $220d			jsr 	TOKIsAlpha 					; identifier ?
.1fe1	b0 07		bcs $1fea			bcs 	_TOKIdentifier
.1fe3	20 86 21	jsr $2186			jsr 	TOKTokenisePunctuation 		; punctuation
.1fe6	b0 10		bcs $1ff8			bcs 	_TOKFail
.1fe8	80 b1		bra $1f9b			bra 	_TOKMainLoop
.1fea					_TOKIdentifier:
.1fea	20 8d 20	jsr $208d			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1fed	b0 09		bcs $1ff8			bcs 	_TOKFail
.1fef	80 aa		bra $1f9b			bra 	_TOKMainLoop
.1ff1					_TOKExit:
.1ff1	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1ff3	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.1ff6	18		clc				clc									; return with carry set.
.1ff7	60		rts				rts
.1ff8					_TOKFail:
.1ff8	38		sec				sec
.1ff9	60		rts				rts
.1ffa					TOKWriteA:
.1ffa	da		phx				phx
.1ffb	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1ffe	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2001	fa		plx				plx
.2002	ee 00 04	inc $0400			inc 	TOKLineSize
.2005	60		rts				rts
.2006					TOKGet:
.2006	18		clc				clc
.2007	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.200a					TOKGetNext:
.200a	38		sec				sec
.200b	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.200e					TOKFindToken:
.200e	a2 72		ldx #$72			ldx 	#StandardTokens & $FF 		; do this table
.2010	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.2012	20 1d 20	jsr $201d			jsr 	TOKFindTokenXY 				; find it, or not
.2015	90 04		bcc $201b			bcc 	_TOKFTFail
.2017	a2 00		ldx #$00			ldx 	#0
.2019	38		sec				sec
.201a	60		rts				rts
.201b					_TOKFTFail
.201b	18		clc				clc
.201c	60		rts				rts
.201d					TOKFindTokenXY:
.201d	86 22		stx $22				stx 	zTemp0 						; save token table address
.201f	84 23		sty $23				sty 	zTemp0+1
.2021	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.2023	8d 1f 06	sta $061f			sta 	TOKCurrent
.2026					_TOKFindLoop:
.2026	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.2028	18		clc				clc 		 						; clear carry in case of fail
.2029	30 17		bmi $2042			bmi 	_TOKExit 					; end of table, fail, so return CC.
.202b	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.202e	d0 13		bne $2043			bne 	_TOKNext 					; different, try next.
.2030	aa		tax				tax 								; number of chars to compare.
.2031	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.2033					_TOKCompare:
.2033	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.2035	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.2038	d0 09		bne $2043			bne 	_TOKNext 					; different ? try next
.203a	c8		iny				iny 								; compare next two
.203b	ca		dex				dex
.203c	d0 f5		bne $2033			bne 	_TOKCompare 				; until done X characters.
.203e	38		sec				sec
.203f	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.2042					_TOKExit:
.2042	60		rts				rts
.2043					_TOKNext:
.2043	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.2046	38		sec				sec 								; add length+1 to ptr
.2047	b2 22		lda ($22)			lda 	(zTemp0)
.2049	65 22		adc $22				adc 	zTemp0
.204b	85 22		sta $22				sta 	zTemp0
.204d	90 d7		bcc $2026			bcc 	_TOKFindLoop
.204f	e6 23		inc $23				inc 	zTemp0+1
.2051	80 d3		bra $2026			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.2053					TOKTokeniseHexadecimal:
.2053	20 0a 20	jsr $200a			jsr 	TOKGetNext 					; consume the $
.2056	a2 08		ldx #$08			ldx 	#IFR0
.2058	20 54 30	jsr $3054			jsr 	IFloatSetZero 				; set R0 = 0
.205b					_TTHLoop:
.205b	20 06 20	jsr $2006			jsr 	TOKGet 						; keep getting and copying while numeric.
.205e	20 1a 22	jsr $221a			jsr 	TOKIsHexadecimal
.2061	90 20		bcc $2083			bcc 	_TTHDone
.2063	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.2065	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.2068	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.206b	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.206e	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.2071	20 0a 20	jsr $200a			jsr 	TOKGetNext
.2074	38		sec				sec 								; convert to decimal.
.2075	e9 30		sbc #$30			sbc 	#48
.2077	c9 0a		cmp #$0a			cmp 	#10
.2079	90 02		bcc $207d			bcc 	_TTHNotAlpha
.207b	e9 07		sbc #$07			sbc 	#7
.207d					_TTHNotAlpha:
.207d	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.207f	85 08		sta $08				sta 	IFR0+IM0
.2081	80 d8		bra $205b			bra 	_TTHLoop
.2083					_TTHDone:
.2083	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.2085	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.2088	20 3d 1f	jsr $1f3d			jsr 	TOKTokeniseConstant 		; write integer out.
.208b	18		clc				clc
.208c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.208d					TOKTokeniseIdentifier:
.208d	20 2a 1f	jsr $1f2a			jsr 	TOKResetElement 			; extract an identifier
.2090					_TOKGetIdentifier:
.2090	20 06 20	jsr $2006			jsr 	TOKGet
.2093	20 da 21	jsr $21da			jsr 	TOKToUpper
.2096	20 fc 21	jsr $21fc			jsr 	TOKIsIdentifierElement
.2099	90 08		bcc $20a3			bcc 	_TOKEndIdent
.209b	20 2e 1f	jsr $1f2e			jsr		TOKWriteElement
.209e	20 0a 20	jsr $200a			jsr 	TOKGetNext
.20a1	80 ed		bra $2090			bra 	_TOKGetIdentifier
.20a3					_TOKEndIdent:
.20a3	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.20a5	d0 06		bne $20ad			bne 	_TOKNotString
.20a7	20 2e 1f	jsr $1f2e			jsr 	TOKWriteElement 			; add it
.20aa	20 0a 20	jsr $200a			jsr 	TOKGetNext 					; consume it
.20ad					_TOKNotString:
.20ad	20 06 20	jsr $2006			jsr 	TOKGet 						; finally check for (
.20b0	c9 28		cmp #$28			cmp 	#"("
.20b2	d0 06		bne $20ba			bne 	_TOKNoArray
.20b4	20 2e 1f	jsr $1f2e			jsr 	TOKWriteElement 			; add it
.20b7	20 0a 20	jsr $200a			jsr 	TOKGetNext 					; consume it
.20ba					_TOKNoArray:
.20ba	20 0e 20	jsr $200e			jsr 	TOKFindToken 				; find it
.20bd	90 0e		bcc $20cd			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.20bf	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.20c1	f0 05		beq $20c8			beq 	_TOKComment 				; yes, do comment code.
.20c3	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.20c6	18		clc				clc
.20c7	60		rts				rts
.20c8					_TOKComment:
.20c8	20 14 21	jsr $2114			jsr 	TOKDoComment
.20cb	18		clc				clc
.20cc	60		rts				rts
.20cd					_TOKIsVariable:
.20cd	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.20cf					_TOKOutputBuffer:
.20cf	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.20d2	20 fb 20	jsr $20fb			jsr 	TOKTranslateIdentifier
.20d5	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.20d8	e8		inx				inx
.20d9	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.20dc	20 fc 21	jsr $21fc			jsr 	TOKIsIdentifierElement
.20df	b0 ee		bcs $20cf			bcs 	_TOKOutputBuffer
.20e1	a8		tay				tay 								; last char in Y
.20e2	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.20e4	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.20e6	f0 0e		beq $20f6			beq 	_TOKIVExit
.20e8	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.20ea	d0 04		bne $20f0			bne 	_TOKIVCheckArray 			; no, check for (
.20ec	1a		inc a				inc 	a 							; token is $7D
.20ed	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.20f0					_TOKIVCheckArray:
.20f0	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.20f2	d0 02		bne $20f6			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.20f4	1a		inc a				inc 	a
.20f5	1a		inc a				inc 	a
.20f6					_TOKIVExit:
.20f6	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA 					; ending token
.20f9	18		clc				clc
.20fa	60		rts				rts
.20fb					TOKTranslateIdentifier:
.20fb	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.20fd	f0 0f		beq $210e			beq 	_TTI64
.20ff	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.2101	f0 0e		beq $2111			beq 	_TTI65
.2103	38		sec				sec
.2104	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2106	10 03		bpl $210b			bpl 	_TTIExit
.2108	18		clc				clc 								; map 09 onto 26-35
.2109	69 2b		adc #$2b			adc 	#"A"-"0"+26
.210b					_TTIExit:
.210b	09 40		ora #$40			ora 	#$40 						; correct range.
.210d	60		rts				rts
.210e	a9 64		lda #$64	_TTI64:	lda 	#$64
.2110	60		rts				rts
.2111	a9 65		lda #$65	_TTI65:	lda 	#$65
.2113	60		rts				rts
.2114					TOKDoComment:
.2114	20 06 20	jsr $2006			jsr 	TOKGet 						; skip over spaces
.2117	c9 20		cmp #$20			cmp 	#' '
.2119	d0 05		bne $2120			bne 	_TOKEndSpaces
.211b	20 0a 20	jsr $200a			jsr 	TOKGetNext
.211e	80 f4		bra $2114			bra 	TOKDoComment
.2120					_TOKEndSpaces:
.2120	48		pha				pha 								; save it
.2121	a9 97		lda #$97			lda 	#PR_REM 					; output the comment token.
.2123	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.2126	68		pla				pla
.2127	f0 04		beq $212d			beq 	_TOKDCExit 					; end of line.
.2129	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.212b	d0 01		bne $212e			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.212d					_TOKDCExit:
.212d	60		rts				rts
.212e					_TOKDCDoLine:
.212e	20 2a 1f	jsr $1f2a			jsr 	TOKResetElement 			; start getting the string
.2131					_TOKDCLoop:
.2131	20 06 20	jsr $2006			jsr 	TOKGet 						; check EOL
.2134	c9 00		cmp #$00			cmp 	#0
.2136	f0 08		beq $2140			beq 	_TOKDCEndComment
.2138	20 0a 20	jsr $200a			jsr 	TOKGetNext 					; get and consume
.213b	20 2e 1f	jsr $1f2e			jsr 	TOKWriteElement
.213e	80 f1		bra $2131			bra 	_TOKDCLoop
.2140					_TOKDCEndComment:
.2140	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2142	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.2145	20 6f 1f	jsr $1f6f			jsr 	TOKOutputElementBuffer
.2148	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2149					TOKTokeniseInteger:
.2149	20 72 21	jsr $2172			jsr 	TOKExtractInteger 			; pull an integer out as text.
.214c	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.214e	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2150	ad 1c 05	lda $051c			lda		TOKElement
.2153	20 b8 2e	jsr $2eb8			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2156	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.2159	f0 12		beq $216d			beq 	_TOKNotLineNumber
.215b	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.215d	d0 0c		bne $216b			bne 	_TOKBadLineNumeber
.215f	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2161	8d 01 04	sta $0401			sta 	TOKLineNumber
.2164	a5 09		lda $09				lda 	IFR0+IM1
.2166	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2169	18		clc				clc
.216a	60		rts				rts
.216b					_TOKBadLineNumeber:
.216b	38		sec				sec
.216c	60		rts				rts
.216d					_TOKNotLineNumber:
.216d	20 3d 1f	jsr $1f3d			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2170	18		clc				clc
.2171	60		rts				rts
.2172					TOKExtractInteger:
.2172	20 2a 1f	jsr $1f2a			jsr 	TOKResetElement 			; restart
.2175					_TTILoop:
.2175	20 06 20	jsr $2006			jsr 	TOKGet 						; keep getting and copying while numeric.
.2178	20 f0 21	jsr $21f0			jsr 	TOKIsDigit
.217b	90 08		bcc $2185			bcc 	_TOKEIExit
.217d	20 2e 1f	jsr $1f2e			jsr 	TOKWriteElement
.2180	20 0a 20	jsr $200a			jsr 	TOKGetNext
.2183	80 f0		bra $2175			bra 	_TTILoop
.2185					_TOKEIExit:
.2185	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2186					TOKTokenisePunctuation:
.2186	20 2a 1f	jsr $1f2a			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2189	20 0a 20	jsr $200a			jsr 	TOKGetNext
.218c	20 2e 1f	jsr $1f2e			jsr 	TOKWriteElement
.218f	20 06 20	jsr $2006			jsr 	TOKGet 						; what follows ?
.2192	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2194	f0 10		beq $21a6			beq 	_TTPOne
.2196	20 04 22	jsr $2204			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2199	b0 0b		bcs $21a6			bcs 	_TTPOne 					; these speed things up a bit.
.219b	20 2e 1f	jsr $1f2e			jsr 	TOKWriteElement 			; this is what we will search for.
.219e	20 0e 20	jsr $200e			jsr 	TOKFindToken
.21a1	b0 0a		bcs $21ad			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.21a3	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.21a6					_TTPOne:
.21a6	20 0e 20	jsr $200e			jsr 	TOKFindToken 				; look for one character punctuation
.21a9	b0 07		bcs $21b2			bcs 	_TTPOutputExit 				; we found it
.21ab	38		sec				sec 								; not recognised.
.21ac	60		rts				rts
.21ad					_TTPConsumeExit:
.21ad	48		pha				pha
.21ae	20 0a 20	jsr $200a			jsr 	TOKGetNext 					; get the 2nd char out.
.21b1	68		pla				pla
.21b2					_TTPOutputExit:
.21b2	20 fa 1f	jsr $1ffa			jsr  	TOKWriteA 					; write token out
.21b5	18		clc				clc
.21b6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.21b7					TOKTokeniseString:
.21b7	20 0a 20	jsr $200a			jsr 	TOKGetNext 					; consume the "
.21ba	20 2a 1f	jsr $1f2a			jsr 	TOKResetElement 			; start getting the string
.21bd					_TOKTSLoop:
.21bd	20 06 20	jsr $2006			jsr 	TOKGet 						; check EOL
.21c0	c9 00		cmp #$00			cmp 	#0
.21c2	f0 0c		beq $21d0			beq 	_TOKTSExit
.21c4	20 0a 20	jsr $200a			jsr 	TOKGetNext 					; get and consume
.21c7	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.21c9	f0 05		beq $21d0			beq 	_TOKTSExit
.21cb	20 2e 1f	jsr $1f2e			jsr 	TOKWriteElement
.21ce	80 ed		bra $21bd			bra 	_TOKTSLoop
.21d0					_TOKTSExit:
.21d0	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.21d2	20 fa 1f	jsr $1ffa			jsr 	TOKWriteA
.21d5	20 6f 1f	jsr $1f6f			jsr 	TOKOutputElementBuffer
.21d8	18		clc				clc
.21d9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.21da					TOKToUpper:
.21da	c9 61		cmp #$61			cmp 	#"a"
.21dc	90 06		bcc $21e4			bcc 	_TTUNotLower
.21de	c9 7b		cmp #$7b			cmp 	#"z"+1
.21e0	b0 02		bcs $21e4			bcs 	_TTUNotLower
.21e2	49 20		eor #$20			eor 	#$20
.21e4					_TTUNotLower:
.21e4	60		rts				rts
.21e5					TOKToLower:
.21e5	c9 41		cmp #$41			cmp 	#"A"
.21e7	90 06		bcc $21ef			bcc 	_TTUNotUpper
.21e9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.21eb	b0 02		bcs $21ef			bcs 	_TTUNotUpper
.21ed	49 20		eor #$20			eor 	#$20
.21ef					_TTUNotUpper:
.21ef	60		rts				rts
.21f0					TOKIsDigit:
.21f0	c9 30		cmp #$30			cmp 	#"0"
.21f2	90 06		bcc $21fa			bcc 	TOKFail
.21f4	c9 3a		cmp #$3a			cmp 	#"9"+1
.21f6	b0 02		bcs $21fa			bcs 	TOKFail
.21f8					TOKSucceed:
.21f8	38		sec				sec
.21f9	60		rts				rts
.21fa					TOKFail:
.21fa	18		clc				clc
.21fb	60		rts				rts
.21fc					TOKIsIdentifierElement:
.21fc	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.21fe	f0 f8		beq $21f8			beq 	TOKSucceed
.2200	c9 5f		cmp #$5f			cmp 	#"_"
.2202	f0 f4		beq $21f8			beq 	TOKSucceed 					; else fall through to alphanumeric
.2204					TOKIsAlphaNumeric:
.2204	20 0d 22	jsr $220d			jsr 	TOKIsAlpha
.2207	b0 ef		bcs $21f8			bcs 	TOKSucceed
.2209	20 f0 21	jsr $21f0			jsr 	TOKIsDigit
.220c	60		rts				rts
.220d					TOKIsAlpha:
.220d	20 da 21	jsr $21da			jsr 	TOKToUpper
.2210	c9 41		cmp #$41			cmp 	#"A"
.2212	90 e6		bcc $21fa			bcc 	TOKFail
.2214	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2216	b0 e2		bcs $21fa			bcs 	TOKFail
.2218	80 de		bra $21f8			bra 	TOKSucceed
.221a					TOKIsHexadecimal:
.221a	20 f0 21	jsr $21f0			jsr		TOKIsDigit
.221d	b0 d9		bcs $21f8			bcs 	TOKSucceed
.221f	20 0d 22	jsr $220d			jsr 	TOKIsAlpha
.2222	90 d6		bcc $21fa			bcc 	TOKFail
.2224	c9 47		cmp #$47			cmp 	#"F"+1
.2226	b0 d2		bcs $21fa			bcs 	TOKFail
.2228	80 ce		bra $21f8			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.222a					Command_CALL:
.222a	a9 42		lda #$42			lda 	#STK_CALL
.222c	20 c5 26	jsr $26c5			jsr 	StackOpen
.222f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.2231	29 c0		and #$c0			and 	#$C0
.2233	c9 40		cmp #$40			cmp 	#$40
.2235	d0 29		bne $2260			bne 	_CCSyntax
.2237	20 95 29	jsr $2995			jsr 	VARGetInfo 					; get the information
.223a	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 				; check right bracket follows.
.223d	20 47 29	jsr $2947			jsr 	VARFind 					; exists ?
.2240	90 21		bcc $2263			bcc 	_CCUnknown
.2242	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.2244	85 22		sta $22				sta 	zTemp0
.2246	20 f9 26	jsr $26f9			jsr 	STKSaveCodePosition 		; save return address on stack.
.2249	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.224b	b1 22		lda ($22),y			lda 	(zTemp0),y
.224d	c9 ff		cmp #$ff			cmp 	#$FF
.224f	d0 12		bne $2263			bne 	_CCUnknown
.2251	88		dey				dey 								; get Y offset to stack
.2252	b1 22		lda ($22),y			lda 	(zTemp0),y
.2254	48		pha				pha
.2255	88		dey				dey 								; get address
.2256	b1 22		lda ($22),y			lda 	(zTemp0),y
.2258	85 19		sta $19				sta 	codePtr+1
.225a	b2 22		lda ($22)			lda 	(zTemp0)
.225c	85 18		sta $18				sta 	codePtr
.225e	7a		ply				ply 								; restore Y
.225f	60		rts				rts
.2260					_CCSyntax:
.2260	4c 0f 25	jmp $250f		jmp	ErrorV_syntax
.2263					_CCUnknown:
.2263	4c 84 26	jmp $2684		jmp	ErrorV_unknown
.2266					Command_ENDPROC:
.2266	a9 42		lda #$42			lda 	#STK_CALL
.2268	20 f1 26	jsr $26f1			jsr 	StackCheckFrame
.226b	20 0b 27	jsr $270b			jsr 	STKLoadCodePosition 		; return
.226e	20 e3 26	jsr $26e3			jsr 	StackClose
.2271	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2272					Command_DO:
.2272	a9 22		lda #$22			lda 	#STK_DO
.2274	20 c5 26	jsr $26c5			jsr 	StackOpen
.2277	20 f9 26	jsr $26f9			jsr 	STKSaveCodePosition 		; save loop position
.227a	60		rts				rts
.227b					Command_EXIT:
.227b	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.227d	20 f1 26	jsr $26f1			jsr 	StackCheckFrame
.2280	20 e3 26	jsr $26e3			jsr 	StackClose 					; close it
.2283	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2285	aa		tax				tax
.2286	20 1f 24	jsr $241f			jsr 	ScanForward
.2289	60		rts				rts
.228a					Command_LOOP:
.228a	a9 22		lda #$22			lda 	#STK_DO
.228c	20 f1 26	jsr $26f1			jsr 	StackCheckFrame
.228f	20 0b 27	jsr $270b			jsr 	STKLoadCodePosition 		; loop back
.2292	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2293					Command_FOR:
.2293	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2295	20 c5 26	jsr $26c5			jsr 	StackOpen
.2298	20 93 12	jsr $1293			jsr 	CommandLET 					; do "I = 1" bit
.229b	5a		phy				phy 								; save variable address to +4,+5
.229c	a0 04		ldy #$04			ldy 	#4
.229e	a5 22		lda $22				lda 	zTemp0
.22a0	91 2a		sta ($2a),y			sta 	(basicStack),y
.22a2	c8		iny				iny
.22a3	a5 23		lda $23				lda 	zTemp0+1
.22a5	91 2a		sta ($2a),y			sta 	(basicStack),y
.22a7	7a		ply				ply
.22a8	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.22aa	20 bc 26	jsr $26bc			jsr 	ERRCheckA
.22ad	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.22b0	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.22b2	a2 08		ldx #$08			ldx 	#IFR0
.22b4	20 09 23	jsr $2309			jsr 	CFSaveR0X
.22b7	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.22b9	c9 91		cmp #$91			cmp 	#PR_STEP
.22bb	d0 06		bne $22c3			bne 	_CFStep1
.22bd	c8		iny				iny 								; consume step
.22be	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 				; evaluate STEP
.22c1	80 24		bra $22e7			bra 	_CFWriteStep
.22c3					_CFStep1:
.22c3	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.22c5	a9 01		lda #$01			lda 	#1
.22c7	20 56 30	jsr $3056			jsr 	IFloatSetByte
.22ca	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.22cb	a0 04		ldy #$04			ldy 	#4 							; get variable address
.22cd	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22cf	85 22		sta $22				sta 	zTemp0
.22d1	c8		iny				iny
.22d2	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22d4	85 23		sta $23				sta 	zTemp0+1
.22d6	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.22d8	b1 22		lda ($22),y			lda 	(zTemp0),y
.22da	d0 0a		bne $22e6			bne 	_CFNotOptimised
.22dc	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.22de	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22e0	d0 04		bne $22e6			bne 	_CFNotOptimised
.22e2	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.22e4	85 0b		sta $0b				sta 	IFR0+IExp
.22e6					_CFNotOptimised:
.22e6	7a		ply				ply
.22e7					_CFWriteStep:
.22e7	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.22e9	a9 06		lda #$06			lda 	#6
.22eb	20 09 23	jsr $2309			jsr 	CFSaveR0X
.22ee	20 f9 26	jsr $26f9			jsr 	STKSaveCodePosition 		; save loop position
.22f1	60		rts				rts
.22f2					CFLoadR0X:
.22f2	5a		phy				phy
.22f3	a8		tay				tay
.22f4	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22f6	95 00		sta $00,x			sta 	IM0,x
.22f8	c8		iny				iny
.22f9	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22fb	95 01		sta $01,x			sta 	IM1,x
.22fd	c8		iny				iny
.22fe	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2300	95 02		sta $02,x			sta 	IM2,x
.2302	c8		iny				iny
.2303	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2305	95 03		sta $03,x			sta 	IExp,x
.2307	7a		ply				ply
.2308	60		rts				rts
.2309					CFSaveR0X:
.2309	5a		phy				phy
.230a	a8		tay				tay
.230b	b5 00		lda $00,x			lda 	IM0,x
.230d	91 2a		sta ($2a),y			sta 	(basicStack),y
.230f	c8		iny				iny
.2310	b5 01		lda $01,x			lda 	IM1,x
.2312	91 2a		sta ($2a),y			sta 	(basicStack),y
.2314	c8		iny				iny
.2315	b5 02		lda $02,x			lda 	IM2,x
.2317	91 2a		sta ($2a),y			sta 	(basicStack),y
.2319	c8		iny				iny
.231a	b5 03		lda $03,x			lda 	IExp,x
.231c	91 2a		sta ($2a),y			sta 	(basicStack),y
.231e	7a		ply				ply
.231f	60		rts				rts
.2320					Command_NEXT:
.2320	a9 37		lda #$37			lda 	#STK_FOR
.2322	20 f1 26	jsr $26f1			jsr 	StackCheckFrame
.2325	5a		phy				phy 								; check optimised loop
.2326	a0 09		ldy #$09			ldy 	#9
.2328	b1 2a		lda ($2a),y			lda 	(basicStack),y
.232a	7a		ply				ply
.232b	0a		asl a				asl 	a
.232c	b0 35		bcs $2363			bcs 	_CNOptimised
.232e	20 9a 23	jsr $239a			jsr 	_CNLoadValue 				; load index value to R0.
.2331	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2333	a9 06		lda #$06			lda 	#6
.2335	20 f2 22	jsr $22f2			jsr 	CFLoadR0X
.2338	20 4a 2a	jsr $2a4a			jsr 	IFloatAdd 					; add them together and write back.
.233b	20 bd 23	jsr $23bd			jsr 	_CNSaveValue
.233e	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2340	a2 0c		ldx #$0c			ldx 	#IFR1
.2342	20 f2 22	jsr $22f2			jsr 	CFLoadR0X
.2345	20 22 2d	jsr $2d22			jsr 	IFloatCompare 				; compare terminal vs current
.2348	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.234a	20 4d 30	jsr $304d			jsr 	IFloatCheckZero
.234d	f0 10		beq $235f			beq 	_CNLoopBack
.234f	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2351	5a		phy				phy
.2352	a0 09		ldy #$09			ldy 	#6+IExp
.2354	51 2a		eor ($2a),y			eor 	(basicStack),y
.2356	7a		ply				ply
.2357	29 40		and #$40			and 	#IFSign
.2359	f0 04		beq $235f			beq 	_CNLoopBack
.235b					_CNExitLoop:
.235b	20 e3 26	jsr $26e3			jsr 	StackClose		 			; return
.235e	60		rts				rts
.235f					_CNLoopBack:
.235f	20 0b 27	jsr $270b			jsr 	STKLoadCodePosition 		; loop back
.2362	60		rts				rts
.2363					_CNOptimised:
.2363	5a		phy				phy
.2364	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2366	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2368	85 26		sta $26				sta 	zTemp2
.236a	c8		iny				iny
.236b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.236d	85 27		sta $27				sta 	zTemp2+1
.236f	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2371					_CNIncrement:
.2371	c8		iny				iny
.2372	b1 26		lda ($26),y			lda 	(zTemp2),y
.2374	1a		inc a				inc 	a
.2375	91 26		sta ($26),y			sta 	(zTemp2),y
.2377	f0 f8		beq $2371			beq 	_CNIncrement
.2379	18		clc				clc 								; point zTemp0 to terminal value
.237a	a5 2a		lda $2a				lda 	basicStack
.237c	69 0a		adc #$0a			adc 	#10
.237e	85 22		sta $22				sta 	zTemp0
.2380	a5 2b		lda $2b				lda 	basicStack+1
.2382	69 00		adc #$00			adc 	#0
.2384	85 23		sta $23				sta 	zTemp0+1
.2386	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2388	b2 26		lda ($26)			lda 	(zTemp2)
.238a	d2 22		cmp ($22)			cmp 	(zTemp0)
.238c	b1 26		lda ($26),y			lda 	(zTemp2),y
.238e	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2390	c8		iny				iny
.2391	b1 26		lda ($26),y			lda 	(zTemp2),y
.2393	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2395	7a		ply				ply
.2396	b0 c3		bcs $235b			bcs 	_CNExitLoop
.2398	80 c5		bra $235f			bra 	_CNLoopBack
.239a					_CNLoadValue:
.239a	5a		phy				phy
.239b	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.239d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.239f	85 26		sta $26				sta 	zTemp2
.23a1	c8		iny				iny
.23a2	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a4	85 27		sta $27				sta 	zTemp2+1
.23a6	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.23a8	b1 26		lda ($26),y			lda 	(zTemp2),y
.23aa	85 08		sta $08				sta 	IFR0+IM0
.23ac	c8		iny				iny
.23ad	b1 26		lda ($26),y			lda 	(zTemp2),y
.23af	85 09		sta $09				sta 	IFR0+IM1
.23b1	c8		iny				iny
.23b2	b1 26		lda ($26),y			lda 	(zTemp2),y
.23b4	85 0a		sta $0a				sta 	IFR0+IM2
.23b6	c8		iny				iny
.23b7	b1 26		lda ($26),y			lda 	(zTemp2),y
.23b9	85 0b		sta $0b				sta 	IFR0+IExp
.23bb	7a		ply				ply
.23bc	60		rts				rts
.23bd					_CNSaveValue:
.23bd	5a		phy				phy
.23be	a0 00		ldy #$00			ldy 	#0
.23c0	a5 08		lda $08				lda 	IFR0+IM0
.23c2	91 26		sta ($26),y			sta 	(zTemp2),y
.23c4	c8		iny				iny
.23c5	a5 09		lda $09				lda 	IFR0+IM1
.23c7	91 26		sta ($26),y			sta 	(zTemp2),y
.23c9	c8		iny				iny
.23ca	a5 0a		lda $0a				lda 	IFR0+IM2
.23cc	91 26		sta ($26),y			sta 	(zTemp2),y
.23ce	c8		iny				iny
.23cf	a5 0b		lda $0b				lda 	IFR0+IExp
.23d1	91 26		sta ($26),y			sta 	(zTemp2),y
.23d3	7a		ply				ply
.23d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.23d5					IfCommand:
.23d5	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 				; Get the if test.
.23d8	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.23da	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.23dc	d0 0c		bne $23ea			bne 	_IfStructured 				; we still support it.
.23de	c8		iny				iny 								; consume THEN
.23df	a2 08		ldx #$08			ldx 	#IFR0
.23e1	20 4d 30	jsr $304d			jsr 	IFloatCheckZero 			; is it zero
.23e4	f0 01		beq $23e7			beq 	_IfFail 					; if fail, go to next line
.23e6	60		rts				rts 								; if THEN just continue
.23e7					_IfFail:
.23e7	4c 99 14	jmp $1499			jmp 	RUNEndOfLine
.23ea					_IfStructured:
.23ea	20 4d 30	jsr $304d			jsr 	IFloatCheckZero 			; is it zero
.23ed	d0 07		bne $23f6			bne 	_IfExit 					; if not, then continue normally.
.23ef	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.23f1	a2 85		ldx #$85			ldx 	#PR_ENDIF
.23f3	20 1f 24	jsr $241f			jsr 	ScanForward 				; and run from there
.23f6					_IfExit:
.23f6	60		rts				rts
.23f7					ElseCode:
.23f7	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.23f9	aa		tax				tax 								; so just go to the structure exit
.23fa	20 1f 24	jsr $241f			jsr 	ScanForward
.23fd	60		rts				rts
.23fe					EndIf:
.23fe	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.23ff					Command_REPEAT:
.23ff	a9 02		lda #$02			lda 	#STK_REPEAT
.2401	20 c5 26	jsr $26c5			jsr 	StackOpen
.2404	20 f9 26	jsr $26f9			jsr 	STKSaveCodePosition 		; save loop position
.2407	60		rts				rts
.2408					Command_UNTIL:
.2408	a9 02		lda #$02			lda 	#STK_REPEAT
.240a	20 f1 26	jsr $26f1			jsr 	StackCheckFrame
.240d	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 				; work out the test
.2410	a2 08		ldx #$08			ldx 	#IFR0
.2412	20 4d 30	jsr $304d			jsr 	IFloatCheckZero 			; check if zero
.2415	f0 04		beq $241b			beq 	_CULoopBack 				; if so keep looping
.2417	20 e3 26	jsr $26e3			jsr 	StackClose		 			; return
.241a	60		rts				rts
.241b					_CULoopBack:
.241b	20 0b 27	jsr $270b			jsr 	STKLoadCodePosition 		; loop back
.241e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.241f					ScanForward:
.241f	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.2421	86 23		stx $23				stx 	zTemp0+1
.2423	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.2425					_ScanForwardLoop:
.2425	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2427	d0 0a		bne $2433			bne 	_ScanNoCheck
.2429	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.242b	c5 22		cmp $22				cmp 	zTemp0
.242d	f0 49		beq $2478			beq 	_ScanExit
.242f	c5 23		cmp $23				cmp 	zTemp0+1
.2431	f0 45		beq $2478			beq 	_ScanExit
.2433					_ScanNoCheck:
.2433	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2435	c8		iny				iny
.2436	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2438	f0 37		beq $2471			beq		_ScanDataItem
.243a	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.243c	f0 33		beq $2471			beq 	_ScanDataItem
.243e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2440	f0 1b		beq $245d			beq 	_ScanNextLine
.2442	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2444	d0 01		bne $2447			bne 	_ScanNoShift
.2446	c8		iny				iny
.2447					_ScanNoShift:
.2447	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2449	b0 da		bcs $2425			bcs 	_ScanForwardLoop
.244b	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.244d	90 d6		bcc $2425			bcc 	_ScanForwardLoop
.244f	aa		tax				tax 								; access the table to get the adjustment.
.2450	18		clc				clc
.2451	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.2453	7d e6 19	adc $19e6,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2456	85 24		sta $24				sta 	zTemp1
.2458	10 cb		bpl $2425			bpl		_ScanForwardLoop 			; error if -ve ?
.245a	4c 9b 25	jmp $259b		jmp	ErrorV_structure
.245d					_ScanNextLine:
.245d	18		clc				clc	 								; forward to next line.
.245e	b2 18		lda ($18)			lda 	(codePtr)
.2460	65 18		adc $18				adc 	codePtr
.2462	85 18		sta $18				sta 	codePtr
.2464	90 02		bcc $2468			bcc 	_ScanNoCarry
.2466	e6 19		inc $19				inc 	codePtr+1
.2468					_ScanNoCarry:
.2468	a0 03		ldy #$03			ldy 	#3
.246a	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.246c	d0 b7		bne $2425			bne 	_ScanForwardLoop
.246e	4c 9b 25	jmp $259b		jmp	ErrorV_structure
.2471					_ScanDataItem:
.2471	98		tya				tya
.2472	38		sec				sec
.2473	71 18		adc ($18),y			adc 	(codePtr),y
.2475	a8		tay				tay
.2476	80 ad		bra $2425			bra 	_ScanForwardLoop
.2478					_ScanExit:
.2478	c8		iny				iny 								; consume final token.
.2479	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.247a					ScanProcedures:
.247a	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.247c	48		pha				pha
.247d	a5 19		lda $19				lda 	codePtr+1
.247f	48		pha				pha
.2480	5a		phy				phy
.2481	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.2484	85 19		sta $19				sta 	codePtr+1
.2486	64 18		stz $18				stz 	codePtr
.2488					_SPLoop:
.2488	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.248a	f0 18		beq $24a4			beq 	_SPExit
.248c	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.248e	b1 18		lda ($18),y			lda 	(codePtr),y
.2490	c9 88		cmp #$88			cmp 	#PR_PROC
.2492	d0 03		bne $2497			bne 	_SPNext
.2494	20 ac 24	jsr $24ac			jsr 	_SPSetupRecord
.2497					_SPNext:
.2497	18		clc				clc 								; forward to next
.2498	b2 18		lda ($18)			lda 	(codePtr)
.249a	65 18		adc $18				adc 	codePtr
.249c	85 18		sta $18				sta 	codePtr
.249e	90 e8		bcc $2488			bcc 	_SPLoop
.24a0	e6 19		inc $19				inc 	codePtr+1
.24a2	80 e4		bra $2488			bra 	_SPLoop
.24a4					_SPExit:
.24a4	7a		ply				ply
.24a5	68		pla				pla
.24a6	85 19		sta $19				sta 	codePtr+1
.24a8	68		pla				pla
.24a9	85 18		sta $18				sta 	codePtr
.24ab	60		rts				rts
.24ac					_SPSetupRecord:
.24ac	c8		iny				iny 								; check identifier follows
.24ad	b1 18		lda ($18),y			lda 	(codePtr),y
.24af	29 c0		and #$c0			and 	#$C0
.24b1	c9 40		cmp #$40			cmp 	#$40
.24b3	d0 27		bne $24dc			bne 	_SPSyntax
.24b5	20 95 29	jsr $2995			jsr 	VARGetInfo 					; get the information
.24b8	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen 				; check right bracket follows.
.24bb	20 47 29	jsr $2947			jsr 	VARFind 					; already exists ?
.24be	b0 1f		bcs $24df			bcs 	_SPUsed 					; error !
.24c0	20 f3 28	jsr $28f3			jsr 	VARCreate 					; create, XA points to the data.
.24c3	85 22		sta $22				sta 	zTemp0
.24c5	86 23		stx $23				stx 	zTemp0+1
.24c7	5a		phy				phy 								; save Y pos on stack
.24c8	a0 01		ldy #$01			ldy 	#1
.24ca	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.24cc	92 22		sta ($22)			sta 	(zTemp0)
.24ce	a5 19		lda $19				lda 	codePtr+1
.24d0	91 22		sta ($22),y			sta 	(zTemp0),y
.24d2	c8		iny				iny
.24d3	68		pla				pla
.24d4	91 22		sta ($22),y			sta 	(zTemp0),y
.24d6	c8		iny				iny
.24d7	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.24d9	91 22		sta ($22),y			sta 	(zTemp0),y
.24db	60		rts				rts
.24dc					_SPSyntax:
.24dc	4c 0f 25	jmp $250f		jmp	ErrorV_syntax
.24df					_SPUsed:
.24df	4c 66 26	jmp $2666		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.24e2					Command_WHILE:
.24e2	5a		phy				phy 								; save position of the test
.24e3	20 d3 16	jsr $16d3			jsr 	EXPEvalNumber 				; work out the while test.
.24e6	a2 08		ldx #$08			ldx 	#IFR0
.24e8	20 4d 30	jsr $304d			jsr 	IFloatCheckZero 			; check if zero
.24eb	f0 0e		beq $24fb			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.24ed	98		tya				tya 								; position *after* test.
.24ee	7a		ply				ply 								; restore position before test, at WHILE
.24ef	88		dey				dey 								; so we execute the WHILE command again.
.24f0	48		pha				pha 								; push after test on the stack
.24f1	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.24f3	20 c5 26	jsr $26c5			jsr 	StackOpen
.24f6	20 f9 26	jsr $26f9			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.24f9	7a		ply				ply 								; restore the position *after* the test
.24fa	60		rts				rts
.24fb					_WHExitLoop:
.24fb	68		pla				pla 								; throw post loop position
.24fc	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.24fe	aa		tax				tax
.24ff	20 1f 24	jsr $241f			jsr 	ScanForward
.2502	60		rts				rts
.2503					Command_WEND:
.2503	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2505	20 f1 26	jsr $26f1			jsr 	StackCheckFrame
.2508	20 0b 27	jsr $270b			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.250b	20 e3 26	jsr $26e3			jsr 	StackClose		 			; erase the frame
.250e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.250f					ErrorV_syntax:
.250f	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2512	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>251a	45 72 72 6f 72 00
.2520					ErrorV_range:
.2520	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2523	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>252b	52 61 6e 67 65 00
.2531					ErrorV_value:
.2531	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2534	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>253c	75 65 00
.253f					ErrorV_type:
.253f	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2542	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>254a	73 6d 61 74 63 68 00
.2551					ErrorV_unimplemented:
.2551	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2554	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>255c	6c 65 6d 65 6e 74 65 64 00
.2565					ErrorV_assert:
.2565	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2568	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2570	46 61 69 6c 00
.2575					ErrorV_internal:
.2575	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2578	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2580	6c 20 45 72 72 6f 72 00
.2588					ErrorV_divzero:
.2588	20 e4 27	jsr $27e4		jsr	ErrorHandler
>258b	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2593	42 79 20 5a 65 72 6f 00
.259b					ErrorV_structure:
.259b	20 e4 27	jsr $27e4		jsr	ErrorHandler
>259e	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>25a6	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.25b3					ErrorV_stop:
.25b3	20 e4 27	jsr $27e4		jsr	ErrorHandler
>25b6	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>25be	20 53 74 6f 70 70 65 64 00
.25c7					ErrorV_data:
.25c7	20 e4 27	jsr $27e4		jsr	ErrorHandler
>25ca	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>25d2	44 61 74 61 00
.25d7					ErrorV_redefine:
.25d7	20 e4 27	jsr $27e4		jsr	ErrorHandler
>25da	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>25e2	65 64 65 66 69 6e 65 64 00
.25eb					ErrorV_index:
.25eb	20 e4 27	jsr $27e4		jsr	ErrorHandler
>25ee	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>25f6	61 79 20 49 6e 64 65 78 00
.25ff					ErrorV_memory:
.25ff	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2602	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>260a	4d 65 6d 6f 72 79 00
.2611					ErrorV_uninitialised:
.2611	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2614	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>261c	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.262c					ErrorV_string:
.262c	20 e4 27	jsr $27e4		jsr	ErrorHandler
>262f	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2637	69 6e 67 20 4c 65 6e 67 74 68 00
.2642					ErrorV_variable:
.2642	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2645	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>264d	65 20 4d 69 73 73 69 6e 67 00
.2657					ErrorV_stack:
.2657	20 e4 27	jsr $27e4		jsr	ErrorHandler
>265a	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2662	75 6c 6c 00
.2666					ErrorV_dupproc:
.2666	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2669	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2671	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2681	65 64 00
.2684					ErrorV_unknown:
.2684	20 e4 27	jsr $27e4		jsr	ErrorHandler
>2687	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>268f	20 50 72 6f 63 65 64 75 72 65 00
.269a					ErrorV_break:
.269a	20 e4 27	jsr $27e4		jsr	ErrorHandler
>269d	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.26a4					ERRCheckLParen:
.26a4	b1 18		lda ($18),y			lda 	(codePtr),y
.26a6	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.26a8	d0 18		bne $26c2			bne 	ERRSyntaxError
.26aa	c8		iny				iny
.26ab	60		rts				rts
.26ac					ERRCheckRParen:
.26ac	b1 18		lda ($18),y			lda 	(codePtr),y
.26ae	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.26b0	d0 10		bne $26c2			bne 	ERRSyntaxError
.26b2	c8		iny				iny
.26b3	60		rts				rts
.26b4					ERRCheckComma:
.26b4	b1 18		lda ($18),y			lda 	(codePtr),y
.26b6	c9 99		cmp #$99			cmp 	#PR_COMMA
.26b8	d0 08		bne $26c2			bne 	ERRSyntaxError
.26ba	c8		iny				iny
.26bb	60		rts				rts
.26bc					ERRCheckA:
.26bc	d1 18		cmp ($18),y			cmp 	(codePtr),y
.26be	d0 02		bne $26c2			bne 	ERRSyntaxError
.26c0	c8		iny				iny
.26c1	60		rts				rts
.26c2					ERRSyntaxError:
.26c2	4c 0f 25	jmp $250f		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.26c5					StackOpen:
.26c5	48		pha				pha 								; save frame byte
.26c6	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.26c8	0a		asl a				asl 	a 							; claim twice this for storage
.26c9	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.26cb	38		sec				sec 								; so basically subtracting from
.26cc	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.26ce	85 2a		sta $2a				sta 	basicStack
.26d0	b0 0a		bcs $26dc			bcs 	_SONoBorrow
>26d2	db						.byte 	$DB
.26d3	c6 2b		dec $2b				dec 	basicStack+1
.26d5	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.26d7	cd 20 06	cmp $0620			cmp 	basicStackEnd
.26da	f0 04		beq $26e0			beq 	_SOMemory
.26dc					_SONoBorrow:
.26dc	68		pla				pla 								; get marker back and write at TOS
.26dd	92 2a		sta ($2a)			sta 	(basicStack)
.26df	60		rts				rts
.26e0					_SOMemory:
.26e0	4c 57 26	jmp $2657		jmp	ErrorV_stack
.26e3					StackClose:
.26e3	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.26e5	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.26e7	0a		asl a				asl 	a 							; claim twice this.
.26e8	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.26ea	85 2a		sta $2a				sta 	basicStack
.26ec	90 02		bcc $26f0			bcc 	_SCExit
.26ee	e6 2b		inc $2b				inc 	basicStack+1
.26f0					_SCExit:
.26f0	60		rts				rts
.26f1					StackCheckFrame:
.26f1	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.26f3	d0 01		bne $26f6			bne 	_SCFError 					; different, we have structures mixed up
.26f5	60		rts				rts
.26f6					_SCFError:
.26f6	4c 9b 25	jmp $259b		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.26f9					STKSaveCodePosition:
.26f9	5a		phy				phy
.26fa	98		tya				tya 								; save Y at offset 1.
.26fb	a0 01		ldy #$01			ldy 	#1
.26fd	91 2a		sta ($2a),y			sta 	(basicStack),y
.26ff	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2701	c8		iny				iny
.2702	91 2a		sta ($2a),y			sta 	(basicStack),y
.2704	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2706	c8		iny				iny
.2707	91 2a		sta ($2a),y			sta 	(basicStack),y
.2709	7a		ply				ply
.270a	60		rts				rts
.270b					STKLoadCodePosition:
.270b	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.270d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.270f	85 19		sta $19				sta 	codePtr+1
.2711	88		dey				dey
.2712	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2714	85 18		sta $18				sta 	codePtr
.2716	88		dey				dey
.2717	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.2719	a8		tay				tay
.271a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.271b					StackReset:
.271b	48		pha				pha 								; save top of memory
.271c	3a		dec a				dec 	a  							; end of stack = previous byte
.271d	85 2b		sta $2b				sta 	basicStack+1
.271f	a9 ff		lda #$ff			lda 	#$FF
.2721	85 2a		sta $2a				sta 	basicStack
.2723	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2725	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2727	68		pla				pla 								; allocate pages for stack.
.2728	38		sec				sec
.2729	e9 02		sbc #$02			sbc 	#STACKPAGES
.272b	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.272e	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.272f					StringConcrete:
.272f	5a		phy				phy 								; save position on stack
.2730	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2732	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2734	b0 41		bcs $2777			bcs 	_SALengthError
.2736	18		clc				clc 								; length of the new string
.2737	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2739	90 02		bcc $273d			bcc 	_SAHaveLength
.273b	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.273d					_SAHaveLength:
.273d	48		pha				pha 								; save length to be allocated for concreting.
.273e	38		sec				sec
.273f	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2741	6d 22 06	adc $0622			adc 	stringMemory
.2744	8d 22 06	sta $0622			sta 	stringMemory
.2747	85 26		sta $26				sta 	zTemp2 						; update storage address
.2749	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.274b	6d 23 06	adc $0623			adc 	stringMemory+1
.274e	8d 23 06	sta $0623			sta 	stringMemory+1
.2751	85 27		sta $27				sta 	zTemp2+1
.2753	68		pla				pla 								; save length allocated in +0
.2754	92 26		sta ($26)			sta 	(zTemp2)
.2756	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2758	a0 01		ldy #$01			ldy 	#1
.275a	91 26		sta ($26),y			sta 	(zTemp2),y
.275c					_SACopyNewString:
.275c	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.275e	a0 02		ldy #$02			ldy 	#2
.2760	91 26		sta ($26),y			sta 	(zTemp2),y
.2762	aa		tax				tax 								; bytes to copy
.2763	f0 0c		beq $2771			beq 	_SACopyExit
.2765	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2767					_SACopyNSLoop:
.2767	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2769	c8		iny				iny 								; write two on in string storage
.276a	c8		iny				iny
.276b	91 26		sta ($26),y			sta 	(zTemp2),y
.276d	88		dey				dey
.276e	ca		dex				dex									; until copied all the string lengths.
.276f	d0 f6		bne $2767			bne 	_SACopyNSLoop
.2771					_SACopyExit:
.2771	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.2773	a5 26		lda $26				lda 	zTemp2
.2775	7a		ply				ply
.2776	60		rts				rts
.2777					_SALengthError:
.2777	4c 2c 26	jmp $262c		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.277a					StringSystemInitialise:
.277a	3a		dec a				dec 	a 							; make last byte of previous page.
.277b	8d 23 06	sta $0623			sta 	stringMemory+1
.277e	85 23		sta $23				sta 	zTemp0+1
.2780	a9 ff		lda #$ff			lda 	#$FF
.2782	8d 22 06	sta $0622			sta 	stringMemory
.2785	85 22		sta $22				sta 	zTemp0
.2787	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2789	92 22		sta ($22)			sta 	(zTemp0)
.278b	60		rts				rts
.278c					StringSpaceInitialise:
.278c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.278e	8d 21 06	sta $0621			sta 	stringInitialised
.2791	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2794	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2797	ad 23 06	lda $0623			lda 	stringMemory+1
.279a	3a		dec a				dec 	a
.279b	8d 25 06	sta $0625			sta 	stringTempPointer+1
.279e	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.27a1	60		rts				rts
.27a2					StringTempAllocate:
.27a2	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.27a4	b0 2e		bcs $27d4			bcs 	_STALength
.27a6	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.27a9	30 05		bmi $27b0			bmi 	_STAAllocate
.27ab	48		pha				pha 								; save value to subtract.
.27ac	20 8c 27	jsr $278c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.27af	68		pla				pla 								; restore it
.27b0					_STAAllocate:
.27b0	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.27b2	18		clc				clc  								; deliberate allows one more
.27b3	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.27b6	8d 24 06	sta $0624			sta 	stringTempPointer
.27b9	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.27bb	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.27bd	ad 25 06	lda $0625			lda 	stringTempPointer+1
.27c0	69 ff		adc #$ff			adc 	#$FF
.27c2	8d 25 06	sta $0625			sta 	stringTempPointer+1
.27c5	85 2d		sta $2d				sta 	zsTemp+1
.27c7	85 09		sta $09				sta 	IFR0+IM1
.27c9	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.27cb	a9 80		lda #$80			lda 	#$80
.27cd	85 0b		sta $0b				sta 	IFR0+IExp
.27cf	a9 00		lda #$00			lda 	#0 							; clear the target string
.27d1	92 2c		sta ($2c)			sta 	(zsTemp)
.27d3	60		rts				rts
.27d4					_STALength:
.27d4	4c 2c 26	jmp $262c		jmp	ErrorV_string
.27d7					StringTempWrite:
.27d7	5a		phy				phy
.27d8	48		pha				pha
.27d9	b2 2c		lda ($2c)			lda 	(zsTemp)
.27db	1a		inc a				inc 	a
.27dc	92 2c		sta ($2c)			sta 	(zsTemp)
.27de	a8		tay				tay
.27df	68		pla				pla
.27e0	91 2c		sta ($2c),y			sta 	(zsTemp),y
.27e2	7a		ply				ply
.27e3	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.27e4					ErrorHandler:
.27e4	fa		plx				plx 								; get address of msg
.27e5	7a		ply				ply
.27e6	e8		inx				inx 								; bump past RTS
.27e7	d0 01		bne $27ea			bne 	_EHNoInc
.27e9	c8		iny				iny
.27ea					_EHNoInc:
.27ea	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.27ed	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.27f0	0d 27 06	ora $0627			ora 	ERRLine+1
.27f3	f0 10		beq $2805			beq 	_EHNoNumber
.27f5	a2 08		ldx #$08			ldx 	#_EHAtMsg & $FF
.27f7	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.27f9	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.27fc	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.27ff	ae 27 06	ldx $0627			ldx 	ERRLine+1
.2802	20 0d 28	jsr $280d			jsr 	WriteIntXA
.2805					_EHNoNumber:
.2805	4c 36 28	jmp $2836			jmp 	WarmStartNewLine
.2808					_EHAtMsg:
>2808	20 61 74 20 00					.text 	" at ",0
.280d					WriteIntXA:
.280d	da		phx				phx
.280e	48		pha				pha
.280f	a2 08		ldx #$08			ldx 	#IFR0
.2811	20 a3 2f	jsr $2fa3			jsr 	IFloatPushRx
.2814	68		pla				pla
.2815	20 56 30	jsr $3056			jsr 	IFloatSetByte
.2818	68		pla				pla
.2819	85 09		sta $09				sta 	IFR0+IM1
.281b	a9 0a		lda #$0a			lda 	#10 						; decimal
.281d	20 f5 2d	jsr $2df5			jsr 	IFloatIntegerToStringR0	 	; convert
.2820	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.2823	a2 08		ldx #$08			ldx 	#IFR0
.2825	20 c4 2f	jsr $2fc4			jsr 	IFloatPullRx
.2828	60		rts				rts
.2829					NotImplemented:
.2829	4c 51 25	jmp $2551		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.282c					WarmStart:
.282c	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.282e	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2831	a9 6b		lda #$6b			lda 	#"k"
.2833	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2836					WarmStartNewLine:
.2836	a9 0d		lda #$0d			lda 	#13
.2838	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.283b					WarmStartNoPrompt:
.283b	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.283d	9a		txs				txs
.283e	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.2841	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.2843	f0 f1		beq $2836			beq 	WarmStartNewLine
.2845	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.2847	d0 f2		bne $283b			bne 	WarmStartNoPrompt
.2849	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.284c	e8		inx				inx 								; skip length byte to make it ASCIIZ
.284d	d0 01		bne $2850			bne 	_WSSkip
.284f	c8		iny				iny
.2850					_WSSkip:
.2850	86 26		stx $26				stx 	zTemp2 						; save address
.2852	84 27		sty $27				sty 	zTemp2+1
.2854	a2 7e		ldx #$7e			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2856	a0 28		ldy #$28			ldy 	#TOKGetCharacter >> 8
.2858	38		sec				sec
.2859	20 85 1f	jsr $1f85			jsr 	TOKTokenise
.285c	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.285f	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2862	d0 0b		bne $286f			bne 	_WSLineEdit
.2864	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2866	85 18		sta $18				sta 	codePtr
.2868	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.286a	85 19		sta $19				sta 	codePtr+1
.286c	4c a4 14	jmp $14a4			jmp 	RUNNewLine
.286f					_WSLineEdit:
.286f	20 60 1e	jsr $1e60			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2872	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2875	c9 04		cmp #$04			cmp 	#4
.2877	f0 03		beq $287c			beq 	_WSNoInsert
.2879	20 aa 1e	jsr $1eaa			jsr 	PGMInsertLine				; if not, maybe insert
.287c					_WSNoInsert:
.287c	80 bd		bra $283b			bra 	WarmStartNoPrompt
.287e					TOKGetCharacter:
.287e	b2 26		lda ($26)			lda 	(zTemp2)
.2880	90 06		bcc $2888			bcc 	_GSNoIncrement
.2882	e6 26		inc $26				inc 	zTemp2
.2884	d0 02		bne $2888			bne 	_GSNoIncrement
.2886	e6 27		inc $27				inc 	zTemp2+1
.2888					_GSNoIncrement:
.2888	c9 00		cmp #$00			cmp 	#0
.288a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.288b					VARArrayLookup:
.288b	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.288d	86 23		stx $23				stx 	zTemp0+1
.288f	b2 22		lda ($22)			lda 	(zTemp0)
.2891	48		pha				pha
.2892	5a		phy				phy
.2893	a0 01		ldy #$01			ldy 	#1
.2895	b1 22		lda ($22),y			lda 	(zTemp0),y
.2897	7a		ply				ply
.2898	48		pha				pha
.2899	20 e5 16	jsr $16e5			jsr 	EXPEvalInteger16 			; R0 now contains the index
.289c	68		pla				pla 								; array address to zTemp0
.289d	85 23		sta $23				sta 	zTemp0+1
.289f	68		pla				pla
.28a0	85 22		sta $22				sta 	zTemp0
.28a2	5a		phy				phy 								; save codePtr position.
.28a3	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.28a5	b1 22		lda ($22),y			lda 	(zTemp0),y
.28a7	48		pha				pha 								; save bit 15 on stack.
.28a8	29 7f		and #$7f			and 	#$7F
.28aa	85 24		sta $24				sta 	zTemp1
.28ac	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.28ae	d2 22		cmp ($22)			cmp 	(zTemp0)
.28b0	a5 09		lda $09				lda 	IFR0+IM1
.28b2	e5 24		sbc $24				sbc 	zTemp1
.28b4	b0 3a		bcs $28f0			bcs 	_VALIndex
.28b6	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.28b8	c9 40		cmp #$40			cmp 	#$40
.28ba	b0 34		bcs $28f0			bcs 	_VALIndex
.28bc	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.28be	26 09		rol $09				rol 	IFR0+IM1
.28c0	fa		plx				plx 								; get msb of size -> X
.28c1	30 04		bmi $28c7			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.28c3	06 08		asl $08				asl 	IFR0+IM0
.28c5	26 09		rol $09				rol 	IFR0+IM1
.28c7					_VARNotX4:
.28c7	18		clc				clc 								; add the two for the size bytes
.28c8	a5 08		lda $08				lda 	IFR0+IM0
.28ca	69 02		adc #$02			adc 	#2
.28cc	85 08		sta $08				sta 	IFR0+IM0
.28ce	90 02		bcc $28d2			bcc 	_VARNoCarry1
.28d0	e6 09		inc $09				inc 	IFR0+IM1
.28d2					_VARNoCarry1:
.28d2	18		clc				clc 								; calculate the element address and push to stack.
.28d3	a5 08		lda $08				lda 	IFR0+IM0
.28d5	65 22		adc $22				adc 	zTemp0
.28d7	48		pha				pha
.28d8	a5 09		lda $09				lda 	IFR0+IM1
.28da	65 23		adc $23				adc 	zTemp0+1
.28dc	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.28de	30 04		bmi $28e4			bmi 	_VARHasSubLevel
.28e0	aa		tax				tax 								; address in XA
.28e1	68		pla				pla
.28e2	7a		ply				ply 								; restore Y and exit
.28e3	60		rts				rts
.28e4					_VARHasSubLevel:
.28e4	aa		tax				tax 								; get link address in XA
.28e5	68		pla				pla
.28e6	7a		ply				ply 								; restore code position.
.28e7	48		pha				pha
.28e8	20 b4 26	jsr $26b4			jsr 	ERRCheckComma 				; comma required.
.28eb	68		pla				pla
.28ec	20 8b 28	jsr $288b			jsr 	VARArrayLookup 				; call it recursively
.28ef	60		rts				rts
.28f0					_VALIndex:
.28f0	4c eb 25	jmp $25eb		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.28f3					VARCreate:
.28f3	5a		phy				phy
.28f4	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.28f6	a2 00		ldx #$00			ldx 	#0
.28f8	20 61 10	jsr $1061			jsr 	AllocateMemory
.28fb	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.28fd	86 25		stx $25				stx 	zTemp1+1
.28ff	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2901	ad 2a 06	lda $062a			lda 	VARHash
.2904	91 24		sta ($24),y			sta 	(zTemp1),y
.2906	c8		iny				iny 								; put address of name into +3,+4
.2907	ad 28 06	lda $0628			lda 	VARNameAddress
.290a	91 24		sta ($24),y			sta 	(zTemp1),y
.290c	c8		iny				iny
.290d	ad 29 06	lda $0629			lda 	VARNameAddress+1
.2910	91 24		sta ($24),y			sta 	(zTemp1),y
.2912	ad 2b 06	lda $062b			lda 	VARType
.2915	29 01		and #$01			and 	#1
.2917	f0 06		beq $291f			beq 	_CVNotString
.2919	a0 08		ldy #$08			ldy 	#5+3
.291b	a9 80		lda #$80			lda 	#$80
.291d	91 24		sta ($24),y			sta 	(zTemp1),y
.291f					_CVNotString:
.291f	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2922	85 22		sta $22				sta 	zTemp0
.2924	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.2927	85 23		sta $23				sta 	zTemp0+1
.2929	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.292b	b2 22		lda ($22)			lda 	(zTemp0)
.292d	92 24		sta ($24)			sta 	(zTemp1)
.292f	b1 22		lda ($22),y			lda 	(zTemp0),y
.2931	91 24		sta ($24),y			sta 	(zTemp1),y
.2933	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2935	92 22		sta ($22)			sta 	(zTemp0)
.2937	a5 25		lda $25				lda 	zTemp1+1
.2939	91 22		sta ($22),y			sta 	(zTemp0),y
.293b	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.293d	a6 25		ldx $25				ldx 	zTemp1+1
.293f	18		clc				clc 								; add 5 to point to the data.
.2940	69 05		adc #$05			adc 	#5
.2942	90 01		bcc $2945			bcc 	_VCNoCarry
.2944	e8		inx				inx
.2945					_VCNoCarry:
.2945	7a		ply				ply
.2946	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2947					VARFind:
.2947	5a		phy				phy
.2948	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.294a	b1 22		lda ($22),y			lda 	(zTemp0),y
.294c	85 25		sta $25				sta 	zTemp1+1
.294e	f0 1c		beq $296c			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2950	b2 22		lda ($22)			lda 	(zTemp0)
.2952	85 24		sta $24				sta 	zTemp1
.2954					_VFLoop:
.2954	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2956	b1 24		lda ($24),y			lda 	(zTemp1),y
.2958	cd 2a 06	cmp $062a			cmp 	VARHash
.295b	f0 12		beq $296f			beq 	_VFHashesMatch 				; if so, check the name.
.295d					_VFNext:
.295d	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.295f	aa		tax				tax
.2960	a0 01		ldy #$01			ldy 	#1
.2962	b1 24		lda ($24),y			lda 	(zTemp1),y
.2964	85 25		sta $25				sta 	zTemp1+1
.2966	86 24		stx $24				stx 	zTemp1
.2968	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.296a	d0 e8		bne $2954			bne 	_VFLoop
.296c					_VFExitFail:
.296c	7a		ply				ply
.296d	18		clc				clc
.296e	60		rts				rts
.296f					_VFHashesMatch:
.296f	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2971	b1 24		lda ($24),y			lda 	(zTemp1),y
.2973	85 26		sta $26				sta 	zTemp2
.2975	c8		iny				iny
.2976	b1 24		lda ($24),y			lda 	(zTemp1),y
.2978	85 27		sta $27				sta 	zTemp2+1
.297a	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.297c					_VFNameCompLoop:
.297c	c8		iny				iny 								; char at a time
.297d	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2980	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2982	d0 d9		bne $295d			bne 	_VFNext						; next entry if different.
.2984	c9 7c		cmp #$7c			cmp 	#$7C
.2986	90 f4		bcc $297c			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2988	18		clc				clc
.2989	a5 24		lda $24				lda 	zTemp1
.298b	a6 25		ldx $25				ldx 	zTemp1+1
.298d	69 05		adc #$05			adc 	#5
.298f	90 01		bcc $2992			bcc 	_VFNNoCarry
.2991	e8		inx				inx
.2992					_VFNNoCarry:
.2992	7a		ply				ply
.2993	38		sec				sec
.2994	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2995					VARGetInfo:
.2995	98		tya				tya 								; calculate the address of the identifier start.
.2996	18		clc				clc
.2997	65 18		adc $18				adc 	codePtr
.2999	8d 28 06	sta $0628			sta 	VARNameAddress
.299c	a5 19		lda $19				lda 	codePtr+1
.299e	69 00		adc #$00			adc 	#0
.29a0	8d 29 06	sta $0629			sta 	VARNameAddress+1
.29a3	9c 2a 06	stz $062a			stz 	VARHash
.29a6	a2 00		ldx #$00			ldx 	#0
.29a8					_VARCopyName:
.29a8	18		clc				clc 								; update the sum hash.
.29a9	ad 2a 06	lda $062a			lda 	VARHash
.29ac	71 18		adc ($18),y			adc 	(codePtr),y
.29ae	8d 2a 06	sta $062a			sta 	VARHash
.29b1	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.29b3	c8		iny				iny
.29b4	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.29b7	e8		inx				inx
.29b8	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.29ba	90 ec		bcc $29a8			bcc 	_VARCopyName
.29bc	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.29bf	29 03		and #$03			and 	#3 							; type is 0-3
.29c1	0a		asl a				asl 	a
.29c2	0a		asl a				asl 	a
.29c3	85 22		sta $22				sta 	zTemp0
.29c5	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.29c8	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.29ca	65 22		adc $22				adc 	zTemp0 						; index of hash table
.29cc	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.29cd	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.29cf	85 22		sta $22				sta 	zTemp0
.29d1	8d 4c 06	sta $064c			sta 	VARHashEntry
.29d4	a9 06		lda #$06			lda 	#VARHashTables >> 8
.29d6	69 00		adc #$00			adc 	#0
.29d8	85 23		sta $23				sta 	zTemp0+1
.29da	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.29dd	60		rts				rts
.29de					VARClearHashTables:
.29de	a2 00		ldx #$00			ldx 	#0
.29e0					_VCHRLoop:
.29e0	a9 00		lda #$00			lda 	#0
.29e2	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.29e5	e8		inx				inx
.29e6	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.29e8	d0 f6		bne $29e0			bne 	_VCHRLoop
.29ea	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.29eb					VARCheckSimple:
.29eb	aa		tax				tax 								; save in X
.29ec	b1 18		lda ($18),y			lda 	(codePtr),y
.29ee	c9 7c		cmp #$7c			cmp 	#$7C
.29f0	d0 15		bne $2a07			bne 	_VCSComplex
.29f2	c8		iny				iny 								; consume the second byte, the type.
.29f3	8a		txa				txa  								; character (40-7F) x 4
.29f4	0a		asl a				asl 	a
.29f5	0a		asl a				asl  	a
.29f6	18		clc				clc
.29f7	69 6e		adc #$6e			adc 	#FastVariables & $FF
.29f9	85 08		sta $08				sta 	IFR0+IM0
.29fb	a9 06		lda #$06			lda 	#FastVariables >> 8
.29fd	69 00		adc #$00			adc 	#0
.29ff	85 09		sta $09				sta 	IFR0+IM1
.2a01	64 0a		stz $0a				stz 	IFR0+IM2
.2a03	64 0b		stz $0b				stz 	IFR0+IExp
.2a05	38		sec				sec 								; it's a reference
.2a06	60		rts				rts
.2a07					_VCSComplex:
.2a07	88		dey				dey	 								; extract information.
.2a08	20 95 29	jsr $2995			jsr 	VARGetInfo
.2a0b	20 47 29	jsr $2947			jsr 	VARFind 					; search for variable
.2a0e	b0 0a		bcs $2a1a			bcs 	_VCSHaveVariable
.2a10	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2a13	29 02		and #$02			and 	#2
.2a15	d0 25		bne $2a3c			bne 	_VCNoCreate
.2a17	20 f3 28	jsr $28f3			jsr 	VARCreate 					; create variable
.2a1a					_VCSHaveVariable:
.2a1a	48		pha				pha 								; save LSB on the stack
.2a1b	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2a1e	6a		ror a				ror 	a
.2a1f	6a		ror a				ror 	a
.2a20	68		pla				pla 								; restore LSB
.2a21	90 08		bcc $2a2b			bcc 	_VCSNotArray 				; skip if not an array
.2a23	20 8b 28	jsr $288b			jsr 	VARArrayLookup 				; look for subscripts.
.2a26	48		pha				pha 								; check )
.2a27	20 ac 26	jsr $26ac			jsr 	ERRCheckRParen
.2a2a	68		pla				pla
.2a2b					_VCSNotArray:
.2a2b	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2a2d	85 08		sta $08				sta 	IFR0+IM0
.2a2f	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2a31	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2a34	6a		ror a				ror 	a
.2a35	a9 00		lda #$00			lda 	#0
.2a37	6a		ror a				ror 	a 							; now $00 or $80
.2a38	85 0b		sta $0b				sta 	IFR0+IExp
.2a3a	38		sec				sec 								; it's a reference
.2a3b	60		rts				rts
.2a3c					_VCNoCreate:
.2a3c	4c 11 26	jmp $2611		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.2a3f					IFInitialise:
.2a3f	9c de 06	stz $06de			stz 	IFStackIndex
.2a42	60		rts				rts
.2a43					IFloatSubtract:
.2a43	da		phx				phx
.2a44	a2 08		ldx #$08			ldx 	#IFR0
.2a46	20 5f 30	jsr $305f			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2a49	fa		plx				plx
.2a4a					IFloatAdd:
.2a4a	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2a4c	05 0b		ora $0b				ora 	IFR0+IExp
.2a4e	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2a50	d0 4e		bne $2aa0			bne 	_IFloatAddDecimals 			; decimal version.
.2a52					_IFAddSubMantissa:
.2a52	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2a54	45 0b		eor $0b				eor 	IFR0+IExp
.2a56	29 40		and #$40			and 	#IFSign
.2a58	d0 21		bne $2a7b			bne 	_IFloatSubMantissa
.2a5a	18		clc				clc 								; do the actual addition
.2a5b	a5 08		lda $08			lda 	IFR0+IM0
.2a5d	75 00		adc $00,x		adc 		IM0,x
.2a5f	85 08		sta $08			sta 	IFR0+IM0
.2a61	a5 09		lda $09			lda 	IFR0+IM1
.2a63	75 01		adc $01,x		adc 		IM1,x
.2a65	85 09		sta $09			sta 	IFR0+IM1
.2a67	a5 0a		lda $0a			lda 	IFR0+IM2
.2a69	75 02		adc $02,x		adc 		IM2,x
.2a6b	85 0a		sta $0a			sta 	IFR0+IM2
.2a6d	10 29		bpl $2a98			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2a6f	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2a71	20 83 30	jsr $3083			jsr 	IFloatShiftRight
.2a74	20 ad 30	jsr $30ad			jsr 	IFloatIncExponent
.2a77	d0 1f		bne $2a98			bne 	_IFloatAddExit
.2a79	38		sec				sec 								; overflowed numerically.
.2a7a	60		rts				rts
.2a7b					_IFloatSubMantissa:
.2a7b	38		sec				sec 								; do the subtraction R0-Rx
.2a7c	a5 08		lda $08			lda 	IFR0+IM0
.2a7e	f5 00		sbc $00,x		sbc 		IM0,x
.2a80	85 08		sta $08			sta 	IFR0+IM0
.2a82	a5 09		lda $09			lda 	IFR0+IM1
.2a84	f5 01		sbc $01,x		sbc 		IM1,x
.2a86	85 09		sta $09			sta 	IFR0+IM1
.2a88	a5 0a		lda $0a			lda 	IFR0+IM2
.2a8a	f5 02		sbc $02,x		sbc 		IM2,x
.2a8c	85 0a		sta $0a			sta 	IFR0+IM2
.2a8e	b0 08		bcs $2a98			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2a90	a2 08		ldx #$08			ldx 	#IFR0
.2a92	20 67 30	jsr $3067			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2a95	20 5f 30	jsr $305f			jsr 	IFloatNegate 				; negate
.2a98					_IFloatAddExit:
.2a98	18		clc				clc
.2a99	60		rts				rts
.2a9a					_IFloatZeroAdd:
.2a9a	fa		plx				plx 								; return this value in R0
.2a9b	20 e5 2f	jsr $2fe5			jsr 	IFloatCopyFromRegister
.2a9e	18		clc				clc
.2a9f	60		rts				rts
.2aa0					_IFloatAddDecimals:
.2aa0	20 4d 30	jsr $304d			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2aa3	f0 f3		beq $2a98			beq 	_IFloatAddExit
.2aa5	20 8b 30	jsr $308b			jsr 	IFloatNormalise 			; normalise RX
.2aa8	da		phx				phx 								; normalise R0
.2aa9	a2 08		ldx #$08			ldx 	#IFR0
.2aab	20 4d 30	jsr $304d			jsr 	IFloatCheckZero
.2aae	f0 ea		beq $2a9a			beq 	_IFloatZeroAdd
.2ab0	20 8b 30	jsr $308b			jsr 	IFloatNormalise
.2ab3	fa		plx				plx
.2ab4	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2ab6	29 3f		and #$3f			and 	#IFXMask
.2ab8	38		sec				sec
.2ab9	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2abb	85 20		sta $20				sta 	iTemp0
.2abd	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2abf	29 3f		and #$3f			and 	#IFXMask
.2ac1	38		sec				sec
.2ac2	e9 20		sbc #$20			sbc 	#$20
.2ac4	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2ac6	b0 02		bcs $2aca			bcs 	_IFloatHaveLarger
.2ac8	a5 20		lda $20				lda 	iTemp0
.2aca					_IFloatHaveLarger:
.2aca	18		clc				clc 								; get the actual one back.
.2acb	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2acd	20 da 2a	jsr $2ada			jsr 	_IFShiftXToA
.2ad0	da		phx				phx
.2ad1	a2 08		ldx #$08			ldx 	#IFR0
.2ad3	20 da 2a	jsr $2ada			jsr 	_IFShiftXToA
.2ad6	fa		plx				plx
.2ad7	4c 52 2a	jmp $2a52			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2ada					_IFShiftXToA:
.2ada	8d d6 06	sta $06d6			sta 	IFTarget
.2add	20 4d 30	jsr $304d			jsr 	IFloatCheckZero 			; check adding zero ?
.2ae0	f0 11		beq $2af3			beq 	_IFSXExit
.2ae2					_IFSXLoop:
.2ae2	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2ae4	29 3f		and #$3f			and 	#IFXMask
.2ae6	cd d6 06	cmp $06d6			cmp 	IFTarget
.2ae9	f0 08		beq $2af3			beq 	_IFSXExit
.2aeb	20 83 30	jsr $3083			jsr 	IFloatShiftRight
.2aee	20 ad 30	jsr $30ad			jsr 	IFloatIncExponent
.2af1	80 ef		bra $2ae2			bra 	_IFSXLoop
.2af3					_IFSXExit:
.2af3	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2af4					IFloatMultiply:
.2af4	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2af7	20 af 2b	jsr $2baf			jsr 	IFCalculateNewSign
.2afa	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2afc	05 0b		ora $0b				ora 	IFR0+IExp
.2afe	29 3f		and #$3f			and 	#IFXMask
.2b00	15 01		ora $01,x			ora 	IM1,x
.2b02	05 09		ora $09				ora 	IFR0+IM1
.2b04	15 02		ora $02,x			ora 	IM2,x
.2b06	05 0a		ora $0a				ora 	IFR0+IM2
.2b08	d0 0a		bne $2b14			bne 	_IFMStandard
.2b0a	20 30 30	jsr $3030			jsr 	IFloatMultiply8BitRx
.2b0d	ad d8 06	lda $06d8			lda 	IFNewSign
.2b10	85 0b		sta $0b				sta 	IFR0+IExp
.2b12	18		clc				clc
.2b13	60		rts				rts
.2b14					_IFMStandard:
.2b14	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2b16	20 a6 2b	jsr $2ba6			jsr 	IFMSignExtend
.2b19	8d d7 06	sta $06d7			sta 	IFNewExponent
.2b1c	a5 0b		lda $0b				lda 	IFR0+IExp
.2b1e	20 a6 2b	jsr $2ba6			jsr 	IFMSignExtend
.2b21	18		clc				clc
.2b22	6d d7 06	adc $06d7			adc 	IFNewExponent
.2b25	8d d7 06	sta $06d7			sta 	IFNewExponent
.2b28	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2b2a	20 f6 2f	jsr $2ff6			jsr 	IFloatCopyToRegister
.2b2d	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2b2f	20 54 30	jsr $3054			jsr 	IFloatSetZero
.2b32					_IFMLoop:
.2b32	a2 14		ldx #$14			ldx 	#IFRTemp
.2b34	20 4d 30	jsr $304d			jsr 	IFloatCheckZero
.2b37	f0 3a		beq $2b73			beq 	_IFMExit
.2b39	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2b3c	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2b3e	10 03		bpl $2b43			bpl	 	_IFMTargetOkay
.2b40	20 97 2b	jsr $2b97			jsr 	_IFMShiftAll
.2b43					_IFMTargetOkay:
.2b43	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2b45	29 01		and #$01			and 	#1
.2b47	f0 16		beq $2b5f			beq 	_IFMNoAdd
.2b49	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2b4c	18		clc				clc
.2b4d	a5 08		lda $08			lda 	IFR0+IM0
.2b4f	75 00		adc $00,x		adc 		IM0,x
.2b51	85 08		sta $08			sta 	IFR0+IM0
.2b53	a5 09		lda $09			lda 	IFR0+IM1
.2b55	75 01		adc $01,x		adc 		IM1,x
.2b57	85 09		sta $09			sta 	IFR0+IM1
.2b59	a5 0a		lda $0a			lda 	IFR0+IM2
.2b5b	75 02		adc $02,x		adc 		IM2,x
.2b5d	85 0a		sta $0a			sta 	IFR0+IM2
.2b5f					_IFMNoAdd:
.2b5f	a5 0a		lda $0a				lda 	IFR0+IM2
.2b61	10 03		bpl $2b66			bpl 	_IFMResultOkay
.2b63	20 97 2b	jsr $2b97			jsr 	_IFMShiftAll
.2b66					_IFMResultOkay:
.2b66	a2 14		ldx #$14			ldx 	#IFRTemp
.2b68	20 83 30	jsr $3083			jsr 	IFloatShiftRight
.2b6b	ae d6 06	ldx $06d6			ldx 	IFTarget
.2b6e	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.2b71	80 bf		bra $2b32			bra 	_IFMLoop
.2b73					_IFMExit:
.2b73	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2b76	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2b78	90 0f		bcc $2b89			bcc 	_IFMOkay
.2b7a	c9 e0		cmp #$e0			cmp 	#$E0
.2b7c	b0 0b		bcs $2b89			bcs 	_IFMOkay
.2b7e	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2b80	f0 13		beq $2b95			beq 	_IFMError
.2b82	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2b84	20 54 30	jsr $3054			jsr 	IFloatSetZero
.2b87	18		clc				clc
.2b88	60		rts				rts
.2b89					_IFMOkay:
.2b89	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2b8b	0d d8 06	ora $06d8			ora 	IFNewSign
.2b8e	85 0b		sta $0b				sta 	IFR0+IExp
.2b90	18		clc				clc
.2b91	60		rts				rts
.2b92	4c ff ff	jmp $ffff			jmp 	$FFFF
.2b95					_IFMError:
.2b95	38		sec				sec
.2b96	60		rts				rts
.2b97					_IFMShiftAll:
.2b97	a2 08		ldx #$08			ldx 	#IFR0
.2b99	20 83 30	jsr $3083			jsr 	IFloatShiftRight
.2b9c	ae d6 06	ldx $06d6			ldx 	IFTarget
.2b9f	20 83 30	jsr $3083			jsr 	IFloatShiftRight
.2ba2	ee d7 06	inc $06d7			inc 	IFNewExponent
.2ba5	60		rts				rts
.2ba6					IFMSignExtend:
.2ba6	29 3f		and #$3f			and 	#IFXMask
.2ba8	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2baa	90 02		bcc $2bae			bcc 	_IFMNoSXX
.2bac	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2bae					_IFMNoSXX:
.2bae	60		rts				rts
.2baf					IFCalculateNewSign:
.2baf	b5 03		lda $03,x			lda 	IExp,x
.2bb1	45 0b		eor $0b				eor 	IFR0+IExp
.2bb3	29 40		and #$40			and 	#IFSign
.2bb5	8d d8 06	sta $06d8			sta 	IFNewSign
.2bb8	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2bb9					IFloatDivideInteger:
.2bb9	20 d2 2b	jsr $2bd2			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2bbc	b0 06		bcs $2bc4			bcs 	_IFDIExit
.2bbe	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2bc0	20 e5 2f	jsr $2fe5			jsr 	IFloatCopyFromRegister
.2bc3	18		clc				clc
.2bc4					_IFDIExit:
.2bc4	60		rts				rts
.2bc5					IFloatModulusInteger:
.2bc5	20 d2 2b	jsr $2bd2			jsr 	IFloatDivideIntegerCommon
.2bc8	b0 07		bcs $2bd1			bcs 	_IFMIExit
.2bca	ae d6 06	ldx $06d6			ldx 	IFTarget
.2bcd	20 e5 2f	jsr $2fe5			jsr 	IFloatCopyFromRegister
.2bd0	18		clc				clc
.2bd1					_IFMIExit:
.2bd1	60		rts				rts
.2bd2					IFloatDivideIntegerCommon:
.2bd2	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2bd5	20 af 2b	jsr $2baf			jsr 	IFCalculateNewSign 			; calculate sign of result
.2bd8	20 00 2c	jsr $2c00			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2bdb	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2bdd	20 4d 30	jsr $304d			jsr 	IFloatCheckZero
.2be0	f0 1c		beq $2bfe			beq 	_IFDIDivZero
.2be2	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2be5	20 54 30	jsr $3054			jsr 	IFloatSetZero
.2be8	5a		phy				phy
.2be9	a0 18		ldy #$18			ldy 	#24
.2beb					_IFDILoop:
.2beb	20 11 2c	jsr $2c11			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2bee	20 1d 2c	jsr $2c1d			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2bf1	88		dey				dey
.2bf2	d0 f7		bne $2beb			bne 	_IFDILoop 					; do it 24 times
.2bf4	7a		ply				ply
.2bf5	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2bf8	29 40		and #$40			and 	#IFSign
.2bfa	85 17		sta $17				sta 	IFRTemp+IExp
.2bfc	18		clc				clc 								; is okay.
.2bfd	60		rts				rts
.2bfe					_IFDIDivZero:
.2bfe	38		sec				sec
.2bff	60		rts				rts
.2c00					IFDCopyRXToRTemp:
.2c00	b5 00		lda $00,x			lda 	IM0,x
.2c02	85 14		sta $14				sta 	IFRTemp+IM0
.2c04	b5 01		lda $01,x			lda 	IM1,x
.2c06	85 15		sta $15				sta 	IFRTemp+IM1
.2c08	b5 02		lda $02,x			lda 	IM2,x
.2c0a	85 16		sta $16				sta 	IFRTemp+IM2
.2c0c	b5 03		lda $03,x			lda 	IExp,x
.2c0e	85 17		sta $17				sta 	IFRTemp+IExp
.2c10	60		rts				rts
.2c11					IFDShiftSTempS1Left:
.2c11	a2 14		ldx #$14			ldx 	#IFRTemp
.2c13	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft
.2c16	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c19	20 7c 30	jsr $307c			jsr 	IFloatRotateLeft
.2c1c	60		rts				rts
.2c1d					IFDTrySubtract:
.2c1d	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2c20	38		sec				sec 								; subtract, saving the results on the stack.
.2c21	b5 00		lda $00,x			lda 	IM0,x
.2c23	e5 08		sbc $08				sbc 	IFR0+IM0
.2c25	48		pha				pha
.2c26	b5 01		lda $01,x			lda 	IM1,x
.2c28	e5 09		sbc $09				sbc 	IFR0+IM1
.2c2a	48		pha				pha
.2c2b	b5 02		lda $02,x			lda 	IM2,x
.2c2d	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2c2f	b0 03		bcs $2c34			bcs 	_IFDCanSubtract
.2c31	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2c32	68		pla				pla
.2c33	60		rts				rts
.2c34					_IFDCanSubtract:
.2c34	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2c36	68		pla				pla
.2c37	95 01		sta $01,x			sta 	IM1,x
.2c39	68		pla				pla
.2c3a	95 00		sta $00,x			sta 	IM0,x
.2c3c	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2c3e	d0 06		bne $2c46			bne 	_IFDCSExit
.2c40	e6 15		inc $15				inc 	IFRTemp+IM1
.2c42	d0 02		bne $2c46			bne 	_IFDCSExit
.2c44	e6 16		inc $16				inc 	IFRTemp+IM2
.2c46					_IFDCSExit:
.2c46	60		rts				rts
.2c47					IFloatBitwiseAnd:
.2c47	5a		phy				phy
.2c48	20 8c 2c	jsr $2c8c			jsr 	IFPreProcessBitwise 		; set up everything.
.2c4b	d0 0f		bne $2c5c			bne 	_IFBAExit
.2c4d					_IFBALoop:
.2c4d	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2c50	35 00		and $00,x			and 	IM0,x
.2c52	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2c55	e8		inx				inx
.2c56	c8		iny				iny
.2c57	c0 03		cpy #$03			cpy 	#3
.2c59	d0 f2		bne $2c4d			bne 	_IFBALoop
.2c5b	18		clc				clc
.2c5c					_IFBAExit:
.2c5c	7a		ply				ply
.2c5d	60		rts				rts
.2c5e					IFloatBitwiseOr:
.2c5e	5a		phy				phy
.2c5f	20 8c 2c	jsr $2c8c			jsr 	IFPreProcessBitwise 		; set up everything.
.2c62	d0 0f		bne $2c73			bne 	_IFBAExit
.2c64					_IFBALoop:
.2c64	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2c67	15 00		ora $00,x			ora 	IM0,x
.2c69	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2c6c	e8		inx				inx
.2c6d	c8		iny				iny
.2c6e	c0 03		cpy #$03			cpy 	#3
.2c70	d0 f2		bne $2c64			bne 	_IFBALoop
.2c72	18		clc				clc
.2c73					_IFBAExit:
.2c73	7a		ply				ply
.2c74	60		rts				rts
.2c75					IFloatBitwiseXor:
.2c75	5a		phy				phy
.2c76	20 8c 2c	jsr $2c8c			jsr 	IFPreProcessBitwise 		; set up everything.
.2c79	d0 0f		bne $2c8a			bne 	_IFBAExit
.2c7b					_IFBALoop:
.2c7b	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2c7e	55 00		eor $00,x			eor 	IM0,x
.2c80	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2c83	e8		inx				inx
.2c84	c8		iny				iny
.2c85	c0 03		cpy #$03			cpy 	#3
.2c87	d0 f2		bne $2c7b			bne 	_IFBALoop
.2c89	18		clc				clc
.2c8a					_IFBAExit:
.2c8a	7a		ply				ply
.2c8b	60		rts				rts
.2c8c					IFPreProcessBitwise:
.2c8c	a0 00		ldy #$00			ldy 	#0 							; set index.
.2c8e	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2c90	15 03		ora $03,x			ora 	IExp,x
.2c92	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2c94	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2c96	38		sec				sec 								; carry set just in cases.
.2c97	60		rts				rts
.2c98					IFloatAbsoluteR0:
.2c98	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2c9a	29 bf		and #$bf			and 	#IFSign ^ 255
.2c9c	85 0b		sta $0b				sta 	IFR0+IExp
.2c9e	18		clc				clc
.2c9f	60		rts				rts
.2ca0					IFloatSquareRootR0:
.2ca0	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2ca2	20 4d 30	jsr $304d			jsr 	IFloatCheckZero
.2ca5	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2ca7	29 40		and #$40			and 	#IFSign
.2ca9	d0 2f		bne $2cda			bne 	_IFSRFail
.2cab	20 8b 30	jsr $308b			jsr 	IFloatNormalise 			; it will work better !
.2cae	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2cb0	20 f6 2f	jsr $2ff6			jsr 	IFloatCopyToRegister
.2cb3	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2cb5	20 a6 2b	jsr $2ba6			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2cb8	18		clc				clc
.2cb9	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2cbb	85 0b		sta $0b				sta 	IFR0+IExp
.2cbd	4a		lsr a				lsr 	a 							; which we can halve.
.2cbe	38		sec				sec 								; convert back
.2cbf	e9 17		sbc #$17			sbc 	#23
.2cc1	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2cc3	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2cc5	20 dc 2c	jsr $2cdc			jsr 	_IFSRNewton
.2cc8	20 dc 2c	jsr $2cdc			jsr 	_IFSRNewton
.2ccb	20 dc 2c	jsr $2cdc			jsr 	_IFSRNewton
.2cce	20 dc 2c	jsr $2cdc			jsr 	_IFSRNewton
.2cd1	18		clc				clc
.2cd2	60		rts				rts
.2cd3					_IFSRZero:
.2cd3	a2 08		ldx #$08			ldx 	#IFR0
.2cd5	20 54 30	jsr $3054			jsr 	IFloatSetZero
.2cd8	18		clc				clc
.2cd9	60		rts				rts
.2cda					_IFSRFail:
.2cda	38		sec				sec
.2cdb	60		rts				rts
.2cdc					_IFSRNewton:
.2cdc	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2cde	20 a3 2f	jsr $2fa3			jsr 	IFloatPushRx
.2ce1	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2ce3	20 a3 2f	jsr $2fa3			jsr 	IFloatPushRx
.2ce6	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2ce8	20 77 2d	jsr $2d77			jsr 	IFloatDivideFloat
.2ceb	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2ced	20 c4 2f	jsr $2fc4			jsr 	IFloatPullRx
.2cf0	20 4a 2a	jsr $2a4a			jsr 	IFloatAdd 					; now guess + original/guess
.2cf3	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2cf5	20 83 30	jsr $3083			jsr 	IFloatShiftRight
.2cf8	a2 0c		ldx #$0c			ldx 	#IFR1
.2cfa	20 c4 2f	jsr $2fc4			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2cfd	60		rts				rts
.2cfe					IFloatFractionalR0:
.2cfe	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2d00	29 3f		and #$3f			and 	#IFXMask
.2d02	f0 17		beq $2d1b			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2d04	20 98 2c	jsr $2c98			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2d07	a2 08		ldx #$08			ldx 	#IFR0
.2d09	20 8b 30	jsr $308b			jsr 	IFloatNormalise 			; normalise R0
.2d0c	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2d0e	20 f6 2f	jsr $2ff6			jsr 	IFloatCopyToRegister
.2d11	20 54 2d	jsr $2d54			jsr 	IFloatIntegerR0 			; take integer part of R0
.2d14	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2d16	20 43 2a	jsr $2a43			jsr 	IFloatSubtract
.2d19	80 05		bra $2d20			bra 	_FIPExit
.2d1b					_FIPZero:
.2d1b	a2 08		ldx #$08			ldx 	#IFR0
.2d1d	20 54 30	jsr $3054			jsr 	IFloatSetZero
.2d20					_FIPExit:
.2d20	18		clc				clc
.2d21	60		rts				rts
.2d22					IFloatCompare:
.2d22	20 43 2a	jsr $2a43			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2d25	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2d27	05 0b		ora $0b				ora 	IFR0+IExp
.2d29	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2d2b	29 3f		and #$3f			and 	#IFXMask
.2d2d	d0 19		bne $2d48			bne 	_IFCNonInteger
.2d2f	20 4d 30	jsr $304d			jsr 	IFloatCheckZero 			; check if zero
.2d32	f0 0f		beq $2d43			beq 	_IFCZero
.2d34					_IFCReturnSign:
.2d34	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2d36	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2d38	48		pha				pha
.2d39	a9 01		lda #$01			lda 	#1
.2d3b	20 56 30	jsr $3056			jsr 	IFloatSetByte 				; return to +1
.2d3e	68		pla				pla 								; sign bit back
.2d3f	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2d41	18		clc				clc
.2d42	60		rts				rts
.2d43					_IFCZero:
.2d43	20 54 30	jsr $3054			jsr 	IFloatSetZero
.2d46	18		clc				clc
.2d47	60		rts				rts
.2d48					_IFCNonInteger:
.2d48	a5 08		lda $08				lda 	IFR0+IM0
.2d4a	29 00		and #$00			and		#$00
.2d4c	05 09		ora $09				ora 	IFR0+IM1
.2d4e	05 0a		ora $0a				ora 	IFR0+IM2
.2d50	f0 f1		beq $2d43			beq 	_IFCZero 					; near enough !
.2d52	80 e0		bra $2d34			bra 	_IFCReturnSign 				; return the sign of the difference.
.2d54					IFloatIntegerR0:
.2d54	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2d56	29 3f		and #$3f			and 	#IFXMask
.2d58	f0 1b		beq $2d75			beq 	_FIPExit 					; if so do nothing
.2d5a	a2 08		ldx #$08			ldx 	#IFR0
.2d5c	20 8b 30	jsr $308b			jsr 	IFloatNormalise 			; normalise
.2d5f	20 4d 30	jsr $304d			jsr 	IFloatCheckZero 			; is it zero ?
.2d62	f0 0e		beq $2d72			beq 	_FIPZero 					; if so return zero.
.2d64					_FIPShift:
.2d64	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2d66	29 20		and #$20			and 	#$20 						; still -ve
.2d68	f0 0b		beq $2d75			beq 	_FIPExit
.2d6a	20 83 30	jsr $3083			jsr 	IFloatShiftRight 			; shift mantissa right
.2d6d	20 ad 30	jsr $30ad			jsr 	IFloatIncExponent 			; bump exponent
.2d70	80 f2		bra $2d64			bra 	_FIPShift
.2d72					_FIPZero:
.2d72	20 54 30	jsr $3054			jsr 	IFloatSetZero
.2d75					_FIPExit:
.2d75	18		clc				clc
.2d76	60		rts				rts
.2d77					IFloatDivideFloat:
.2d77	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2d7a	20 af 2b	jsr $2baf			jsr 	IFCalculateNewSign 			; calculate sign of result
.2d7d	20 8b 30	jsr $308b			jsr 	IFloatNormalise 			; normalise RX
.2d80	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2d82	20 8b 30	jsr $308b			jsr 	IFloatNormalise
.2d85	20 4d 30	jsr $304d			jsr 	IFloatCheckZero
.2d88	f0 56		beq $2de0			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2d8a	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2d8c	20 a6 2b	jsr $2ba6			jsr 	IFMSignExtend
.2d8f	8d d7 06	sta $06d7			sta 	IFNewExponent
.2d92	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2d95	b5 03		lda $03,x			lda 	IExp,x
.2d97	20 a6 2b	jsr $2ba6			jsr 	IFMSignExtend
.2d9a	38		sec				sec
.2d9b	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2d9e	38		sec				sec
.2d9f	e9 17		sbc #$17			sbc 	#23
.2da1	8d d7 06	sta $06d7			sta 	IFNewExponent
.2da4	20 e2 2d	jsr $2de2			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2da7	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2da9	10 08		bpl $2db3			bpl 	_IFDFNoShiftResult
.2dab	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2dad	20 83 30	jsr $3083			jsr 	IFloatShiftRight
.2db0	ee d7 06	inc $06d7			inc 	IFNewExponent
.2db3					_IFDFNoShiftResult:
.2db3	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2db6	30 06		bmi $2dbe			bmi 	_IFDFCheckUnderflow
.2db8	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2dba	b0 24		bcs $2de0			bcs 	_IFDFDivZero
.2dbc	80 11		bra $2dcf			bra		_IFDFExit
.2dbe					_IFDFCheckUnderflow:
.2dbe	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2dc1	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2dc3	b0 0a		bcs $2dcf			bcs 	_IFDFExit
.2dc5	ee d7 06	inc $06d7			inc 	IFNewExponent
.2dc8	a2 14		ldx #$14			ldx 	#IFRTemp
.2dca	20 83 30	jsr $3083			jsr 	IFloatShiftRight
.2dcd	80 ef		bra $2dbe			bra 	_IFDFCheckUnderflow
.2dcf					_IFDFExit:
.2dcf	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2dd2	29 3f		and #$3f			and 	#IFXMask
.2dd4	0d d8 06	ora $06d8			ora 	IFNewSign
.2dd7	85 17		sta $17				sta 	IFRTemp+IExp
.2dd9	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2ddb	20 e5 2f	jsr $2fe5			jsr 	IFloatCopyFromRegister
.2dde	18		clc				clc
.2ddf	60		rts				rts
.2de0					_IFDFDivZero:
.2de0	38		sec				sec
.2de1	60		rts				rts
.2de2					IFloatDivideSupport:
.2de2	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2de4	20 54 30	jsr $3054			jsr 	IFloatSetZero
.2de7	5a		phy				phy 								; main division loop x 23
.2de8	a0 17		ldy #$17			ldy 	#23
.2dea					_IFDSLoop:
.2dea	20 1d 2c	jsr $2c1d			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2ded	20 11 2c	jsr $2c11			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2df0	88		dey				dey
.2df1	d0 f7		bne $2dea			bne 	_IFDSLoop 					; do it 24 times
.2df3	7a		ply				ply
.2df4	60		rts				rts
.2df5					IFloatIntegerToStringR0:
.2df5	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2df8	20 d5 30	jsr $30d5			jsr 	IFloatBufferReset			; empty buffer
.2dfb	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer
.2dfd	29 3f		and #$3f			and 	#IFXMask
.2dff	d0 1e		bne $2e1f			bne 	_IFIFail
.2e01	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2e03	20 4d 30	jsr $304d			jsr 	IFloatCheckZero
.2e06	f0 0e		beq $2e16			beq 	_IFINotNegative
.2e08	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2e0a	29 40		and #$40			and 	#IFSign
.2e0c	f0 08		beq $2e16			beq 	_IFINotNegative
.2e0e	a9 2d		lda #$2d			lda 	#"-"						; output -
.2e10	20 e4 30	jsr $30e4			jsr 	IFloatBufferWrite
.2e13	20 5f 30	jsr $305f			jsr 	IFloatNegate 				; tidy up !
.2e16					_IFINotNegative:
.2e16	20 21 2e	jsr $2e21			jsr 	_IFIRecursiveConvert 		; start converting
.2e19	20 dc 30	jsr $30dc			jsr 	IFloatGetBufferAddress
.2e1c	18		clc				clc
.2e1d	80 01		bra $2e20			bra 	_IFIExit
.2e1f					_IFIFail:
.2e1f	38		sec				sec
.2e20					_IFIExit:
.2e20	60		rts				rts
.2e21					_IFIRecursiveConvert:
.2e21	a2 0c		ldx #$0c			ldx 	#IFR1
.2e23	20 f6 2f	jsr $2ff6			jsr 	IFloatCopyToRegister 		; R0->R1
.2e26	a2 08		ldx #$08			ldx 	#IFR0
.2e28	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2e2b	20 56 30	jsr $3056			jsr 	IFloatSetByte
.2e2e	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2e30	20 b9 2b	jsr $2bb9			jsr 	IFloatDivideInteger
.2e33	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2e35	20 4d 30	jsr $304d			jsr 	IFloatCheckZero
.2e38	f0 09		beq $2e43			beq 	_IFIOutDigit
.2e3a	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder
.2e3c	48		pha				pha
.2e3d	20 21 2e	jsr $2e21			jsr 	_IFIRecursiveConvert 		; convert the divider
.2e40	68		pla				pla
.2e41	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2e43					_IFIOutDigit:
.2e43	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2e45	c9 0a		cmp #$0a			cmp	 	#10
.2e47	90 02		bcc $2e4b			bcc 	_IFINotHex
.2e49	69 06		adc #$06			adc 	#6
.2e4b					_IFINotHex:
.2e4b	69 30		adc #$30			adc 	#48
.2e4d	20 e4 30	jsr $30e4			jsr 	IFloatBufferWrite
.2e50	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2e51					IFloatFloatToStringR0:
.2e51	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2e53	20 a3 2f	jsr $2fa3			jsr 	IFloatPushRx
.2e56	20 f6 2f	jsr $2ff6			jsr 	IFloatCopyToRegister
.2e59	20 54 2d	jsr $2d54			jsr 	IFloatIntegerR0				; make R0 integer
.2e5c	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2e5e	20 f5 2d	jsr $2df5			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2e61	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2e64	a5 13		lda $13				lda 	IFR2+IExp 					; is integer.
.2e66	29 3f		and #$3f			and 	#IFXMask
.2e68	f0 44		beq $2eae			beq 	_IFFSExit
.2e6a					_IFloatFracLoop:
.2e6a	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2e6c	20 e5 2f	jsr $2fe5			jsr 	IFloatCopyFromRegister
.2e6f	20 fe 2c	jsr $2cfe			jsr 	IFloatFractionalR0
.2e72	20 8b 30	jsr $308b			jsr 	IFloatNormalise
.2e75	a2 10		ldx #$10			ldx 	#IFR2
.2e77	20 f6 2f	jsr $2ff6			jsr 	IFloatCopyToRegister 		; copy to R2
.2e7a	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2e7c	a9 0a		lda #$0a			lda 	#10
.2e7e	20 56 30	jsr $3056			jsr 	IFloatSetByte
.2e81	a2 10		ldx #$10			ldx 	#IFR2						; R0,R2 = R2 * 10
.2e83	20 f4 2a	jsr $2af4			jsr 	IFloatMultiply
.2e86	a2 10		ldx #$10			ldx 	#IFR2
.2e88	20 f6 2f	jsr $2ff6			jsr 	IFloatCopyToRegister
.2e8b	20 54 2d	jsr $2d54			jsr 	IFloatIntegerR0 			; get integer part of R0
.2e8e	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2e91	c9 03		cmp #$03			cmp 	#3
.2e93	f0 16		beq $2eab			beq 	_IFFSExitStripZero
.2e95	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet ?
.2e98	d0 05		bne $2e9f			bne 	_IFloatNotFirst
.2e9a	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2e9c	20 e4 30	jsr $30e4			jsr 	IFloatBufferWrite
.2e9f					_IFloatNotFirst:
.2e9f	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2ea2	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2ea4	09 30		ora #$30			ora 	#"0"						; ASCII
.2ea6	20 e4 30	jsr $30e4			jsr 	IFloatBufferWrite 			; write to the buffer.
.2ea9	80 bf		bra $2e6a			bra 	_IFloatFracLoop
.2eab					_IFFSExitStripZero:
.2eab	20 f3 30	jsr $30f3			jsr 	IFloatStripTrailingZeros
.2eae					_IFFSExit:
.2eae	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2eb0	20 c4 2f	jsr $2fc4			jsr 	IFloatPullRx
.2eb3	20 dc 30	jsr $30dc			jsr 	IFloatGetBufferAddress
.2eb6	18		clc				clc
.2eb7	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2eb8					IFloatStringToFloatR0:
.2eb8	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2ebb	86 20		stx $20				stx 	iTemp0
.2ebd	84 21		sty $21				sty 	iTemp0+1
.2ebf	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2ec1	20 54 30	jsr $3054			jsr 	IFloatSetZero
.2ec4	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2ec7	20 54 2f	jsr $2f54			jsr 	IFSTFGetNext 				; get first
.2eca	f0 1b		beq $2ee7			beq 	_IFSTFFail 					; no character
.2ecc	90 10		bcc $2ede			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2ece	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2ed0	d0 15		bne $2ee7			bne 	_IFSTFFail
.2ed2	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2ed4	8d dc 06	sta $06dc			sta 	IFSignFlag
.2ed7					_IFSTFLoop:
.2ed7	20 54 2f	jsr $2f54			jsr 	IFSTFGetNext 				; get next
.2eda	b0 0b		bcs $2ee7			bcs 	_IFSTFFail 					; bad character.
.2edc	f0 11		beq $2eef			beq 	_IFSTFExit 					; end of data
.2ede					_IFSTFHaveChar:
.2ede	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2ee0	f0 08		beq $2eea			beq 	_IFSTFDecimal
.2ee2	20 78 2f	jsr $2f78			jsr 	IFSTFAddR0 					; add number in
.2ee5	80 f0		bra $2ed7			bra 	_IFSTFLoop 					; keep going until . or end.
.2ee7					_IFSTFFail:
.2ee7	38		sec				sec
.2ee8	80 0d		bra $2ef7			bra 	_IFSTFReturn
.2eea					_IFSTFDecimal:
.2eea	20 ff 2e	jsr $2eff			jsr 	IFSTFDecimal 				; call the decimal places code.
.2eed	b0 08		bcs $2ef7			bcs 	_IFSTFReturn 				; error
.2eef					_IFSTFExit:
.2eef	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2ef1	0d dc 06	ora $06dc			ora 	IFSignFlag
.2ef4	85 0b		sta $0b				sta 	IFR0+IExp
.2ef6	18		clc				clc
.2ef7					_IFSTFReturn:
.2ef7	60		rts				rts
.2ef8					IFloatAddDecimalToR0:
.2ef8	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2efb	86 20		stx $20				stx 	iTemp0
.2efd	84 21		sty $21				sty 	iTemp0+1
.2eff					IFSTFDecimal:
.2eff	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2f01	20 a3 2f	jsr $2fa3			jsr 	IFloatPushRx
.2f04	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2f06	20 54 30	jsr $3054			jsr 	IFloatSetZero
.2f09	9c dd 06	stz $06dd			stz 	IFDecimalPlaces
.2f0c					_IFSTDLoop:
.2f0c	20 54 2f	jsr $2f54			jsr 	IFSTFGetNext 				; get next
.2f0f	b0 41		bcs $2f52			bcs 	_IFSTFFail2 				; bad character.
.2f11	f0 11		beq $2f24			beq 	_IFSTFComplete 				; end of data, work out the result.
.2f13	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2f15	f0 39		beq $2f50			beq 	_IFSTFExit2
.2f17	20 78 2f	jsr $2f78			jsr 	IFSTFAddR0 					; add number in
.2f1a	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2f1d	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2f20	c9 03		cmp #$03			cmp 	#3
.2f22	90 e8		bcc $2f0c			bcc 	_IFSTDLoop
.2f24					_IFSTFComplete:
.2f24	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2f27	f0 27		beq $2f50			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2f29	3a		dec a				dec 	a 							; table indexed from 1.
.2f2a	0a		asl a				asl 	a
.2f2b	0a		asl a				asl 	a
.2f2c	aa		tax				tax
.2f2d	bd 8f 2f	lda $2f8f,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2f30	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2f32	bd 90 2f	lda $2f90,x			lda 	TableTen+1,x
.2f35	85 0d		sta $0d				sta  	IFR1+IM1
.2f37	bd 91 2f	lda $2f91,x			lda 	TableTen+2,x
.2f3a	85 0e		sta $0e				sta  	IFR1+IM2
.2f3c	bd 92 2f	lda $2f92,x			lda 	TableTen+3,x
.2f3f	85 0f		sta $0f				sta  	IFR1+IExp
.2f41	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2f43	20 f4 2a	jsr $2af4			jsr 	IFloatMultiply
.2f46	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop and add the decimal.
.2f48	20 c4 2f	jsr $2fc4			jsr 	IFloatPullRx
.2f4b	a2 0c		ldx #$0c			ldx 	#IFR1
.2f4d	20 4a 2a	jsr $2a4a			jsr 	IFloatAdd
.2f50					_IFSTFExit2:
.2f50	18		clc				clc
.2f51	60		rts				rts
.2f52					_IFSTFFail2:
.2f52	38		sec				sec
.2f53	60		rts				rts
.2f54					IFSTFGetNext:
.2f54	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.2f57	f0 19		beq $2f72			beq 	_IFSTFReturnOk
.2f59	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.2f5b	e6 20		inc $20				inc 	iTemp0 						; point at next.
.2f5d	d0 02		bne $2f61			bne 	_IFSTFGNNoCarry
.2f5f	e6 21		inc $21				inc 	iTemp0+1
.2f61					_IFSTFGNNoCarry:
.2f61	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.2f64	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2f66	f0 08		beq $2f70			beq 	_IFSTFGOkay
.2f68	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2f6a	90 08		bcc $2f74			bcc 	_IFSTFGFail
.2f6c	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2f6e	b0 04		bcs $2f74			bcs 	_IFSTFGFail
.2f70					_IFSTFGOkay:
.2f70	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2f72					_IFSTFReturnOk:
.2f72	18		clc				clc
.2f73	60		rts				rts
.2f74					_IFSTFGFail:
.2f74	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2f76	38		sec				sec
.2f77	60		rts				rts
.2f78					IFSTFAddR0:
.2f78	29 0f		and #$0f			and 	#15 						; to int value
.2f7a	48		pha				pha 								; save it.
.2f7b	a9 0a		lda #$0a			lda 	#10
.2f7d	a2 0c		ldx #$0c			ldx 	#IFR1
.2f7f	20 56 30	jsr $3056			jsr 	IFloatSetByte
.2f82	20 f4 2a	jsr $2af4			jsr 	IFloatMultiply
.2f85	68		pla				pla
.2f86	a2 0c		ldx #$0c			ldx 	#IFR1
.2f88	20 56 30	jsr $3056			jsr 	IFloatSetByte
.2f8b	20 4a 2a	jsr $2a4a			jsr 	IFloatAdd
.2f8e	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.2f8f					TableTen:
>2f8f	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2f93	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2f97	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2f9b	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2f9f	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2fa3					IFloatPushRx:
.2fa3	5a		phy				phy
.2fa4	ac de 06	ldy $06de			ldy 	IFStackIndex
.2fa7	b5 00		lda $00,x			lda 	IM0,x
.2fa9	99 df 06	sta $06df,y			sta 	IFStack,y
.2fac	b5 01		lda $01,x			lda 	IM1,x
.2fae	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.2fb1	b5 02		lda $02,x			lda 	IM2,x
.2fb3	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.2fb6	b5 03		lda $03,x			lda 	IExp,x
.2fb8	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.2fbb	c8		iny				iny
.2fbc	c8		iny				iny
.2fbd	c8		iny				iny
.2fbe	c8		iny				iny
.2fbf	8c de 06	sty $06de			sty 	IFStackIndex
.2fc2	7a		ply				ply
.2fc3	60		rts				rts
.2fc4					IFloatPullRx:
.2fc4	5a		phy				phy
.2fc5	ac de 06	ldy $06de			ldy 	IFStackIndex
.2fc8	88		dey				dey
.2fc9	88		dey				dey
.2fca	88		dey				dey
.2fcb	88		dey				dey
.2fcc	b9 df 06	lda $06df,y			lda 	IFStack,y
.2fcf	95 00		sta $00,x			sta 	IM0,x
.2fd1	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.2fd4	95 01		sta $01,x			sta 	IM1,x
.2fd6	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.2fd9	95 02		sta $02,x			sta 	IM2,x
.2fdb	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.2fde	95 03		sta $03,x			sta 	IExp,x
.2fe0	8c de 06	sty $06de			sty 	IFStackIndex
.2fe3	7a		ply				ply
.2fe4	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.2fe5					IFloatCopyFromRegister:
.2fe5	b5 00		lda $00,x			lda 	0,x
.2fe7	85 08		sta $08				sta 	IFR0
.2fe9	b5 01		lda $01,x			lda 	1,x
.2feb	85 09		sta $09				sta 	IFR0+1
.2fed	b5 02		lda $02,x			lda 	2,x
.2fef	85 0a		sta $0a				sta 	IFR0+2
.2ff1	b5 03		lda $03,x			lda 	3,x
.2ff3	85 0b		sta $0b				sta 	IFR0+3
.2ff5	60		rts				rts
.2ff6					IFloatCopyToRegister:
.2ff6	a5 08		lda $08				lda 	IFR0
.2ff8	95 00		sta $00,x			sta 	0,x
.2ffa	a5 09		lda $09				lda 	IFR0+1
.2ffc	95 01		sta $01,x			sta 	1,x
.2ffe	a5 0a		lda $0a				lda 	IFR0+2
.3000	95 02		sta $02,x			sta 	2,x
.3002	a5 0b		lda $0b				lda 	IFR0+3
.3004	95 03		sta $03,x			sta 	3,x
.3006	60		rts				rts
.3007					IFloatLoadInline:
.3007	68		pla				pla 								; pop address off to iTemp0
.3008	85 20		sta $20				sta 	iTemp0
.300a	68		pla				pla
.300b	85 21		sta $21				sta 	iTemp0+1
.300d	a0 01		ldy #$01			ldy 	#1
.300f	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.3011	95 00		sta $00,x			sta 	0,x
.3013	c8		iny				iny
.3014	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.3016	95 01		sta $01,x			sta 	1,x
.3018	c8		iny				iny
.3019	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.301b	95 02		sta $02,x			sta 	2,x
.301d	c8		iny				iny
.301e	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.3020	95 03		sta $03,x			sta 	3,x
.3022	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.3023	a5 20		lda $20				lda 	iTemp0
.3025	69 05		adc #$05			adc 	#5
.3027	85 20		sta $20				sta 	iTemp0
.3029	90 02		bcc $302d			bcc 	_IFLINoCarry
.302b	e6 21		inc $21				inc 	iTemp0+1
.302d					_IFLINoCarry:
.302d	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3030					IFloatMultiply8BitRx:
.3030	5a		phy		        phy
.3031	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3033	a4 08		ldy $08		        ldy     IFR0+IM0
.3035	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.3036	85 08		sta $08		        sta     IFR0+IM0
.3038	84 09		sty $09		        sty     IFR0+IM1
.303a	a9 00		lda #$00	        lda     #0
.303c	a0 08		ldy #$08	        ldy     #8
.303e					_IFMLoop:
.303e	90 03		bcc $3043	        bcc     _IFMNoAdd
.3040	18		clc		        clc
.3041	65 09		adc $09		        adc     IFR0+IM1
.3043					_IFMNoAdd:
.3043	6a		ror a		        ror     a
.3044	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.3046	88		dey		        dey
.3047	d0 f5		bne $303e	        bne     _IFMLoop
.3049	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.304b	7a		ply		        ply
.304c	60		rts		        rts
.304d					IFloatCheckZero:
.304d	b5 00		lda $00,x			lda 	IM0,x
.304f	15 01		ora $01,x			ora 	IM1,x
.3051	15 02		ora $02,x			ora 	IM2,x
.3053	60		rts				rts
.3054					IFloatSetZero:
.3054	a9 00		lda #$00			lda 	#0
.3056					IFloatSetByte:
.3056	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.3058	74 01		stz $01,x			stz 	IM1,x
.305a	74 02		stz $02,x			stz 	IM2,x
.305c	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.305e	60		rts				rts
.305f					IFloatNegate:
.305f	b5 03		lda $03,x			lda 	IExp,x
.3061	49 40		eor #$40			eor 	#IFSign
.3063	95 03		sta $03,x			sta 	IExp,x
.3065	18		clc				clc
.3066	60		rts				rts
.3067					IFloatMantissaNegate:
.3067	38		sec				sec
.3068	a9 00		lda #$00			lda 	#0
.306a	f5 00		sbc $00,x			sbc 	IM0,x
.306c	95 00		sta $00,x			sta 	IM0,x
.306e	a9 00		lda #$00			lda 	#0
.3070	f5 01		sbc $01,x			sbc 	IM1,x
.3072	95 01		sta $01,x			sta 	IM1,x
.3074	a9 00		lda #$00			lda 	#0
.3076	f5 02		sbc $02,x			sbc 	IM2,x
.3078	95 02		sta $02,x			sta 	IM2,x
.307a	60		rts				rts
.307b					IFloatShiftLeft:
.307b	18		clc				clc
.307c					IFloatRotateLeft:
.307c	36 00		rol $00,x			rol 	IM0,x
.307e	36 01		rol $01,x			rol 	IM1,x
.3080	36 02		rol $02,x			rol 	IM2,x
.3082	60		rts				rts
.3083					IFloatShiftRight:
.3083	18		clc				clc
.3084					IFloatRotateRight:
.3084	76 02		ror $02,x			ror 	IM2,x
.3086	76 01		ror $01,x			ror 	IM1,x
.3088	76 00		ror $00,x			ror 	IM0,x
.308a	60		rts				rts
.308b					IFloatNormalise:
.308b	20 4d 30	jsr $304d			jsr 	IFloatCheckZero 			; is it zero
.308e	f0 18		beq $30a8			beq 	_IFNExitZero 				; if so exit
.3090					_IFNLoop:
.3090	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3092	29 c0		and #$c0			and 	#$C0
.3094	c9 40		cmp #$40			cmp 	#$40
.3096	f0 13		beq $30ab			beq 	_IFNExitOkay 				; if so , then we are done.
.3098	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.309a	29 3f		and #$3f			and 	#$3F
.309c	c9 20		cmp #$20			cmp 	#$20
.309e	f0 0b		beq $30ab			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.30a0	20 c1 30	jsr $30c1			jsr 	IFloatDecExponent
.30a3	20 7b 30	jsr $307b			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.30a6	80 e8		bra $3090			bra 	_IFNLoop
.30a8					_IFNExitZero:
.30a8	20 54 30	jsr $3054			jsr 	IFloatSetZero 				; set the result to zero
.30ab					_IFNExitOkay:
.30ab	18		clc				clc  								; return with CC.
.30ac	60		rts				rts
.30ad					IFloatIncExponent:
.30ad	b5 03		lda $03,x			lda 	IExp,x
.30af	48		pha				pha
.30b0	29 c0		and #$c0			and 	#$C0
.30b2	8d 1f 07	sta $071f			sta 	IFXTemp
.30b5	68		pla				pla
.30b6	1a		inc a				inc 	a
.30b7	29 3f		and #$3f			and 	#$3F
.30b9	48		pha				pha
.30ba	0d 1f 07	ora $071f			ora 	IFXTemp
.30bd	95 03		sta $03,x			sta 	IExp,x
.30bf	68		pla				pla
.30c0	60		rts				rts
.30c1					IFloatDecExponent:
.30c1	b5 03		lda $03,x			lda 	IExp,x
.30c3	48		pha				pha
.30c4	29 c0		and #$c0			and 	#$C0
.30c6	8d 1f 07	sta $071f			sta 	IFXTemp
.30c9	68		pla				pla
.30ca	3a		dec a				dec 	a
.30cb	29 3f		and #$3f			and 	#$3F
.30cd	48		pha				pha
.30ce	0d 1f 07	ora $071f			ora 	IFXTemp
.30d1	95 03		sta $03,x			sta 	IExp,x
.30d3	68		pla				pla
.30d4	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.30d5					IFloatBufferReset:
.30d5	9c 20 07	stz $0720			stz 	IFBufferCount
.30d8	9c 21 07	stz $0721			stz 	IFBuffer
.30db	60		rts				rts
.30dc					IFloatGetBufferAddress:
.30dc	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.30de	a2 21		ldx #$21			ldx 	#(IFBuffer & $FF)
.30e0	ad 20 07	lda $0720			lda 	IFBufferCount
.30e3	60		rts				rts
.30e4					IFloatBufferWrite:
.30e4	da		phx				phx
.30e5	ae 20 07	ldx $0720			ldx 	IFBufferCount
.30e8	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.30eb	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.30ee	ee 20 07	inc $0720			inc 	IFBufferCount
.30f1	fa		plx				plx
.30f2	60		rts				rts
.30f3					IFloatStripTrailingZeros:
.30f3	ae 20 07	ldx $0720			ldx 	IFBufferCount
.30f6	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.30f9	c9 30		cmp #$30			cmp		#"0"
.30fb	d0 0f		bne $310c			bne 	_IFSTExit
.30fd	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.3100	c9 2e		cmp #$2e			cmp 	#"."
.3102	f0 08		beq $310c			beq 	_IFSTExit
.3104	ce 20 07	dec $0720			dec 	IFBufferCount
.3107	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.310a	80 e7		bra $30f3			bra 	IFloatStripTrailingZeros
.310c					_IFSTExit:
.310c	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.310d					IFloatCheck:
.310d	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative
.310f	09 40		ora #$40			ora 	#IFSign
.3111	85 0b		sta $0b				sta 	IFR0+IExp
.3113	20 4a 2a	jsr $2a4a			jsr 	IFloatAdd 					; add allowed to error.
.3116	a2 08		ldx #$08			ldx 	#IFR0
.3118	20 4d 30	jsr $304d			jsr 	IFloatCheckZero 			; error if < 0
.311b	f0 06		beq $3123			beq 	_IFAOkay
.311d	a5 0b		lda $0b				lda 	IFR0+IExp
.311f	29 40		and #$40			and 	#IFSign
.3121	d0 01		bne $3124			bne 	_IFAFail
.3123					_IFAOkay:
.3123	60		rts				rts
.3124					_IFAFail:
.3124	38		sec				sec
.3125	68		pla				pla 								; get address - 2
.3126	e9 02		sbc #$02			sbc 	#2
.3128	aa		tax				tax
.3129	68		pla				pla
.312a	e9 00		sbc #$00			sbc 	#0
.312c	a8		tay				tay
.312d	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.312f					_IFAStop:
>312f	db						.byte 	$DB 						; display an error AA ADR ADR
.3130	80 fd		bra $312f			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
