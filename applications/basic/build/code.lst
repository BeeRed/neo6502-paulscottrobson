
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Tue May 30 18:17:17 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 64 1c	jsr $1c64			jsr 	PGMSetBaseAddress
.1007	20 33 21	jsr $2133			jsr 	IFInitialise
.100a	4c 28 11	jmp $1128			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 90 14	jsr $1490			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 41 27	jsr $2741			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c cc 11	jmp $11cc		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 77 1c	jsr $1c77			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 ed 20	jsr $20ed			jsr 	VARClearHashTables
.1028	20 98 1f	jsr $1f98			jsr 	StringSystemInitialise
.102b	60		rts				rts
.102c					AllocateMemory:
.102c	5a		phy				phy 								; save Y
.102d	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.102f	5a		phy				phy
.1030	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1032	5a		phy				phy
.1033	a8		tay				tay 								; count is now in XY
.1034					_AllocateLoop:
.1034	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1036	d0 04		bne $103c			bne 	_AllocateOne
.1038	c0 00		cpy #$00			cpy 	#0
.103a	f0 12		beq $104e			beq 	_AllocateExit
.103c					_AllocateOne:
.103c	a9 00		lda #$00			lda 	#0 							; zero byte
.103e	92 24		sta ($24)			sta 	(freeMemory)
.1040	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1042	d0 02		bne $1046			bne 	_AllocateSkipCarry
.1044	e6 25		inc $25				inc 	freeMemory+1
.1046					_AllocateSkipCarry:
.1046	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1048	d0 01		bne $104b			bne 	_AllocateSkipBorrow
.104a	ca		dex				dex
.104b					_AllocateSkipBorrow:
.104b	88		dey				dey
.104c	80 e6		bra $1034			bra 	_AllocateLoop
.104e					_AllocateExit:
.104e	fa		plx				plx 								; restore address
.104f	68		pla				pla
.1050	7a		ply				ply 								; restore Y
.1051	60		rts				rts
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.1052					NoExec01:
.1052					NoExec02:
.1052					NoExec03:
.1052					NoExec04:
.1052					NoExec05:
.1052					NoExec06:
.1052					NoExec07:
.1052	4c 7b 11	jmp $117b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1055					Command_Print:
.1055					Command_IP_Main:
.1055	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1056					_CPLoop:
.1056	08		php				php 								; save last action flag
.1057	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1059	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.105b	f0 3e		beq $109b			beq 	_CPExit 					; without consuming
.105d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.105f	f0 3a		beq $109b			beq 	_CPExit
.1061	68		pla				pla 								; throw last action flag
.1062	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1064	c8		iny				iny
.1065	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1067	f0 2f		beq $1098			beq 	_CPContinueWithSameLine
.1069	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.106b	f0 26		beq $1093			beq 	_CPTab
.106d	88		dey				dey 								; undo the get.
.106e	20 50 14	jsr $1450			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1071	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1073	10 14		bpl $1089			bpl 	_CPNumber
.1075	5a		phy				phy
.1076	18		clc				clc 								; string address to YX
.1077	a5 0c		lda $0c				lda 	IFR0+IM0
.1079	aa		tax				tax
.107a	a5 0d		lda $0d				lda 	IFR0+IM1
.107c	a8		tay				tay
.107d	e8		inx				inx 								; point to 1st character
.107e	d0 01		bne $1081			bne 	_CPNoCarry
.1080	c8		iny				iny
.1081					_CPNoCarry:
.1081	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1083	20 a4 10	jsr $10a4			jsr 	CPPrintAYX 					; print AYX
.1086	7a		ply				ply
.1087	80 cc		bra $1055			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1089					_CPNumber:
.1089	5a		phy				phy
.108a	20 45 25	jsr $2545			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.108d	20 a4 10	jsr $10a4			jsr 	CPPrintAYX 					; print AYX
.1090	7a		ply				ply
.1091	80 c2		bra $1055			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1093					_CPTab:
.1093	a9 09		lda #$09			lda 	#9 							; print TAB
.1095	20 b7 10	jsr $10b7			jsr 	CPPrintA
.1098					_CPContinueWithSameLine:
.1098	38		sec				sec 								; loop round with carry set, which
.1099	80 bb		bra $1056			bra 	_CPLoop 					; will inhibit final CR
.109b					_CPExit:
.109b	28		plp				plp 								; get last action flag
.109c	b0 05		bcs $10a3			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.109e	a9 0d		lda #$0d			lda 	#13 						; print new line
.10a0	20 b7 10	jsr $10b7			jsr 	CPPrintA
.10a3					_CPExit2:
.10a3	60		rts				rts
.10a4					CPPrintAYX:
.10a4	86 1e		stx $1e				stx 	zTemp0
.10a6	84 1f		sty $1f				sty 	zTemp0+1
.10a8	aa		tax				tax
.10a9	f0 0b		beq $10b6			beq 	_CPPrintExit
.10ab	a0 00		ldy #$00			ldy 	#0
.10ad					_CPPrintAYXLoop:
.10ad	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.10af	20 b7 10	jsr $10b7			jsr 	CPPrintA
.10b2	c8		iny				iny
.10b3	ca		dex				dex
.10b4	d0 f7		bne $10ad			bne 	_CPPrintAYXLoop
.10b6					_CPPrintExit:
.10b6	60		rts				rts
.10b7					CPPrintA:
.10b7	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.10ba					CommandLET:
.10ba	20 18 15	jsr $1518			jsr 	EXPTermR0 					; get term
.10bd	90 4d		bcc $110c			bcc 	_CLError 					; must be a reference term.
.10bf	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.10c1	48		pha				pha
.10c2	a5 0d		lda $0d				lda 	IFR0+IM1
.10c4	48		pha				pha
.10c5	a5 0f		lda $0f				lda 	IFR0+IExp
.10c7	48		pha				pha
.10c8	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.10ca	20 ca 12	jsr $12ca			jsr 	ERRCheckA
.10cd	20 50 14	jsr $1450			jsr 	EXPEvaluateExpression 		; right hand side.
.10d0	68		pla				pla 								; type of l-expr
.10d1	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.10d3	30 3a		bmi $110f			bmi 	_CLType
.10d5	fa		plx				plx 	 							; pop target address to zTemp0
.10d6	86 1f		stx $1f				stx 	zTemp0+1
.10d8	fa		plx				plx
.10d9	86 1e		stx $1e				stx 	zTemp0
.10db	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.10dd	30 15		bmi $10f4			bmi 	_CLStringAssign
.10df	5a		phy				phy
.10e0	a0 03		ldy #$03			ldy 	#3
.10e2	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10e4	88		dey				dey
.10e5	a5 0e		lda $0e				lda 	IFR0+IM2
.10e7	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10e9	88		dey				dey
.10ea	a5 0d		lda $0d				lda 	IFR0+IM1
.10ec	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10ee	a5 0c		lda $0c				lda 	IFR0+IM0
.10f0	92 1e		sta ($1e)			sta 	(zTemp0)
.10f2	7a		ply				ply
.10f3	60		rts				rts
.10f4					_CLStringAssign:
.10f4	5a		phy				phy
.10f5	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.10f7	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.10f9	12 1e		ora ($1e)			ora 	(zTemp0)
.10fb	f0 03		beq $1100			beq 	_CLConcreteString
.10fd	4c b9 11	jmp $11b9		jmp	ErrorV_unimplemented
.1100					_CLConcreteString:
.1100	20 4d 1f	jsr $1f4d			jsr 	StringConcrete  			; concreted string in XA.
.1103	a0 01		ldy #$01			ldy 	#1 							; store the address
.1105	92 1e		sta ($1e)			sta 	(zTemp0)
.1107	8a		txa				txa
.1108	91 1e		sta ($1e),y			sta 	(zTemp0),y
.110a					_CLExit:
.110a	7a		ply				ply
.110b	60		rts				rts
.110c					_CLError:
.110c	4c 9e 12	jmp $129e		jmp	ErrorV_variable
.110f					_CLType:
.110f	4c a8 11	jmp $11a8		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1112					Command_NEW:
.1112	20 6b 1c	jsr $1c6b			jsr 	PGMNewProgram
.1115	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1118	4c 75 11	jmp $1175			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.111b					Command_REM:
.111b					Command_REM2:
.111b	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.111d	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.111f	d0 06		bne $1127			bne 	_CRExit
.1121	c8		iny				iny 								; skip over it, it's a comment.
.1122	98		tya				tya
.1123	38		sec				sec
.1124	71 1c		adc ($1c),y			adc 	(codePtr),y
.1126	a8		tay				tay
.1127					_CRExit:
.1127	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1128					Command_RUN:
.1128	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.112b	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.112e	85 1d		sta $1d				sta 	codePtr+1
.1130	64 1c		stz $1c				stz 	codePtr
.1132	80 0b		bra $113f			bra 	RUNNewLine
.1134					RUNEndOfLine:
.1134	18		clc				clc 								; advance to next line.
.1135	b2 1c		lda ($1c)			lda 	(codePtr)
.1137	65 1c		adc $1c				adc 	codePtr
.1139	85 1c		sta $1c				sta 	codePtr
.113b	90 02		bcc $113f			bcc 	_RELNoCarry
.113d	e6 1d		inc $1d				inc 	codePtr+1
.113f					_RELNoCarry:
.113f					RUNNewLine:
.113f	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1141	9a		txs				txs
.1142	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.1144	f0 2f		beq $1175			beq 	Command_END
.1146	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.1148					RUNNewCommand:
.1148	9c 49 04	stz $0449			stz 	stringInitialised 			; reset string system.
.114b	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.114d	10 1a		bpl $1169			bpl		_RUNNotToken 				; probably an identifier
.114f	c8		iny				iny 								; consume token
.1150	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1152	f0 f4		beq $1148			beq 	RUNNewCommand
.1154	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1156	b0 0e		bcs $1166			bcs 	_RUNSyntax
.1158	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.115a	90 0a		bcc $1166			bcc 	_RUNSyntax
.115c	0a		asl a				asl 	a 							; double into X.
.115d	aa		tax				tax
.115e	20 63 11	jsr $1163			jsr 	_RUNDispatchMain			; call the main dispatcher
.1161	80 e5		bra $1148			bra 	RUNNewCommand
.1163					_RUNDispatchMain:
.1163	7c 81 19	jmp ($1981,x)			jmp 	(VectorTable,x)
.1166					_RUNSyntax:
.1166	4c 7b 11	jmp $117b		jmp	ErrorV_syntax
.1169					_RUNNotToken:
.1169	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.116b	90 f9		bcc $1166			bcc 	_RUNSyntax
.116d	20 ba 10	jsr $10ba			jsr 	CommandLET 					; assignment
.1170	80 d6		bra $1148			bra 	RUNNewCommand 				; loop round.
.1172					Command_Shift_Handler:
.1172	4c b9 11	jmp $11b9		jmp	ErrorV_unimplemented
.1175					Command_END:
.1175	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1178					Command_STOP:
.1178	4c 16 12	jmp $1216		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.117b					ErrorV_syntax:
.117b	20 2a 28	jsr $282a		jsr	ErrorHandler
>117e	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>1186	72 72 6f 72 00
.118b					ErrorV_range:
.118b	20 2a 28	jsr $282a		jsr	ErrorHandler
>118e	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>1196	61 6e 67 65 00
.119b					ErrorV_value:
.119b	20 2a 28	jsr $282a		jsr	ErrorHandler
>119e	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>11a6	65 00
.11a8					ErrorV_type:
.11a8	20 2a 28	jsr $282a		jsr	ErrorHandler
>11ab	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>11b3	6d 61 74 63 68 00
.11b9					ErrorV_unimplemented:
.11b9	20 2a 28	jsr $282a		jsr	ErrorHandler
>11bc	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>11c4	65 6d 65 6e 74 65 64 00
.11cc					ErrorV_assert:
.11cc	20 2a 28	jsr $282a		jsr	ErrorHandler
>11cf	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>11d7	61 69 6c 00
.11db					ErrorV_internal:
.11db	20 2a 28	jsr $282a		jsr	ErrorHandler
>11de	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>11e6	20 45 72 72 6f 72 00
.11ed					ErrorV_divzero:
.11ed	20 2a 28	jsr $282a		jsr	ErrorHandler
>11f0	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>11f8	79 20 5a 65 72 6f 00
.11ff					ErrorV_structure:
.11ff	20 2a 28	jsr $282a		jsr	ErrorHandler
>1202	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>120a	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1216					ErrorV_stop:
.1216	20 2a 28	jsr $282a		jsr	ErrorHandler
>1219	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>1221	53 74 6f 70 70 65 64 00
.1229					ErrorV_data:
.1229	20 2a 28	jsr $282a		jsr	ErrorHandler
>122c	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>1234	61 74 61 00
.1238					ErrorV_redefine:
.1238	20 2a 28	jsr $282a		jsr	ErrorHandler
>123b	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>1243	64 65 66 69 6e 65 64 00
.124b					ErrorV_index:
.124b	20 2a 28	jsr $282a		jsr	ErrorHandler
>124e	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>1256	79 20 49 6e 64 65 78 00
.125e					ErrorV_memory:
.125e	20 2a 28	jsr $282a		jsr	ErrorHandler
>1261	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>1269	65 6d 6f 72 79 00
.126f					ErrorV_uninitialised:
.126f	20 2a 28	jsr $282a		jsr	ErrorHandler
>1272	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>127a	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.1289					ErrorV_string:
.1289	20 2a 28	jsr $282a		jsr	ErrorHandler
>128c	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>1294	6e 67 20 4c 65 6e 67 74 68 00
.129e					ErrorV_variable:
.129e	20 2a 28	jsr $282a		jsr	ErrorHandler
>12a1	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>12a9	20 4d 69 73 73 69 6e 67 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.12b2					ERRCheckLParen:
.12b2	b1 1c		lda ($1c),y			lda 	(codePtr),y
.12b4	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.12b6	d0 18		bne $12d0			bne 	ERRSyntaxError
.12b8	c8		iny				iny
.12b9	60		rts				rts
.12ba					ERRCheckRParen:
.12ba	b1 1c		lda ($1c),y			lda 	(codePtr),y
.12bc	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.12be	d0 10		bne $12d0			bne 	ERRSyntaxError
.12c0	c8		iny				iny
.12c1	60		rts				rts
.12c2					ERRCheckComma:
.12c2	b1 1c		lda ($1c),y			lda 	(codePtr),y
.12c4	c9 99		cmp #$99			cmp 	#PR_COMMA
.12c6	d0 08		bne $12d0			bne 	ERRSyntaxError
.12c8	c8		iny				iny
.12c9	60		rts				rts
.12ca					ERRCheckA:
.12ca	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.12cc	d0 02		bne $12d0			bne 	ERRSyntaxError
.12ce	c8		iny				iny
.12cf	60		rts				rts
.12d0					ERRSyntaxError:
.12d0	4c 7b 11	jmp $117b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.12d3					EXPBinAdd:
.12d3	24 0f		bit $0f				bit 	IFR0+IExp
.12d5	30 6f		bmi $1346			bmi 	EXPConcatenate
.12d7	a2 10		ldx #$10			ldx 	#IFR1
.12d9	4c 3e 21	jmp $213e			jmp 	IFloatAdd
.12dc					EXPBinSub:
.12dc	24 0f		bit $0f				bit 	IFR0+IExp
.12de	30 3f		bmi $131f			bmi 	EXPTypeError
.12e0	a2 10		ldx #$10			ldx 	#IFR1
.12e2	4c 37 21	jmp $2137			jmp 	IFloatSubtract
.12e5					EXPBinMul:
.12e5	24 0f		bit $0f				bit 	IFR0+IExp
.12e7	30 36		bmi $131f			bmi 	EXPTypeError
.12e9	a2 10		ldx #$10			ldx 	#IFR1
.12eb	4c e8 21	jmp $21e8			jmp 	IFloatMultiply
.12ee					EXPBinFDiv:
.12ee	24 0f		bit $0f				bit 	IFR0+IExp
.12f0	30 2d		bmi $131f			bmi 	EXPTypeError
.12f2	a2 10		ldx #$10			ldx 	#IFR1
.12f4	20 6b 24	jsr $246b			jsr 	IFloatDivideFloat
.12f7	b0 0f		bcs $1308			bcs 	EXPDZero
.12f9	60		rts				rts
.12fa					EXPBinIDiv:
.12fa	24 0f		bit $0f				bit 	IFR0+IExp
.12fc	30 21		bmi $131f			bmi 	EXPTypeError
.12fe	a2 10		ldx #$10			ldx 	#IFR1
.1300	20 6b 24	jsr $246b			jsr 	IFloatDivideFloat
.1303	b0 03		bcs $1308			bcs 	EXPDZero
.1305	4c 48 24	jmp $2448			jmp 	IFloatIntegerR0
.1308					EXPDZero:
.1308	4c ed 11	jmp $11ed		jmp	ErrorV_divzero
.130b					EXPBinIMod:
.130b	24 0f		bit $0f				bit 	IFR0+IExp
.130d	30 10		bmi $131f			bmi 	EXPTypeError
.130f	a2 10		ldx #$10			ldx 	#IFR1
.1311	5a		phy				phy
.1312	20 80 23	jsr $2380			jsr 	IFPreProcessBitwise 		; set up everything.
.1315	d0 05		bne $131c			bne 	EXPDRange
.1317	20 b9 22	jsr $22b9			jsr 	IFloatModulusInteger
.131a	7a		ply				ply
.131b	60		rts				rts
.131c					EXPDRange:
.131c	4c 8b 11	jmp $118b		jmp	ErrorV_range
.131f					EXPTypeError:
.131f	4c a8 11	jmp $11a8		jmp	ErrorV_type
.1322					EXPBinAnd:
.1322	24 0f		bit $0f				bit 	IFR0+IExp
.1324	30 f9		bmi $131f			bmi 	EXPTypeError
.1326	a2 10		ldx #$10			ldx 	#IFR1
.1328	20 3b 23	jsr $233b			jsr 	IFloatBitwiseAnd
.132b	b0 ef		bcs $131c			bcs 	EXPDRange
.132d	60		rts				rts
.132e					EXPBinOr:
.132e	24 0f		bit $0f				bit 	IFR0+IExp
.1330	30 ed		bmi $131f			bmi 	EXPTypeError
.1332	a2 10		ldx #$10			ldx 	#IFR1
.1334	20 52 23	jsr $2352			jsr 	IFloatBitwiseOr
.1337	b0 e3		bcs $131c			bcs 	EXPDRange
.1339	60		rts				rts
.133a					EXPBinXor:
.133a	24 0f		bit $0f				bit 	IFR0+IExp
.133c	30 e1		bmi $131f			bmi 	EXPTypeError
.133e	a2 10		ldx #$10			ldx 	#IFR1
.1340	20 69 23	jsr $2369			jsr 	IFloatBitwiseXor
.1343	b0 d7		bcs $131c			bcs 	EXPDRange
.1345	60		rts				rts
.1346					EXPConcatenate:
.1346	18		clc				clc
.1347	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1349	72 10		adc ($10)			adc 	(IFR1)
.134b	b0 2d		bcs $137a			bcs 	_EXPCError
.134d	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.134f	da		phx				phx
.1350	a6 0d		ldx $0d				ldx 	IFR0+1
.1352	da		phx				phx
.1353	20 c0 1f	jsr $1fc0			jsr 	StringTempAllocate 			; allocate string, set up return
.1356	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1358	a5 10		lda $10				lda 	IFR1
.135a	20 63 13	jsr $1363			jsr 	_EXPCCopyXA
.135d	fa		plx				plx 								; copy second string
.135e	68		pla				pla
.135f	20 63 13	jsr $1363			jsr 	_EXPCCopyXA
.1362	60		rts				rts
.1363					_EXPCCopyXA:
.1363	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.1365	85 1e		sta $1e				sta 	zTemp0
.1367	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.1369	f0 0e		beq $1379			beq 	_EXPCCExit 					; nothing.
.136b	aa		tax				tax 								; count
.136c	5a		phy				phy 								; start positioin
.136d	a0 01		ldy #$01			ldy 	#1
.136f					_EXPCCLoop:
.136f	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.1371	20 f5 1f	jsr $1ff5			jsr 	StringTempWrite
.1374	c8		iny				iny
.1375	ca		dex				dex
.1376	d0 f7		bne $136f			bne 	_EXPCCLoop
.1378	7a		ply				ply
.1379					_EXPCCExit:
.1379	60		rts				rts
.137a					_EXPCError:
.137a	4c 89 12	jmp $1289		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.137d					EXPReturnTrue:
.137d	a2 0c		ldx #$0c			ldx 	#IFR0
.137f	a9 01		lda #$01			lda 	#1
.1381	20 4a 27	jsr $274a			jsr 	IFloatSetByte
.1384	20 53 27	jsr $2753			jsr 	IFloatNegate
.1387	60		rts				rts
.1388					EXPReturnFalse:
.1388	a2 0c		ldx #$0c			ldx 	#IFR0
.138a	4c 48 27	jmp $2748			jmp 	IFloatSetZero
.138d					EXPCompareEqual:
.138d	20 c3 13	jsr $13c3			jsr 	EXPCompareBaseCode
.1390	c9 00		cmp #$00			cmp 	#0
.1392	f0 e9		beq $137d			beq 	EXPReturnTrue
.1394	80 f2		bra $1388			bra 	EXPReturnFalse
.1396					EXPCompareLess:
.1396	20 c3 13	jsr $13c3			jsr 	EXPCompareBaseCode
.1399	c9 ff		cmp #$ff			cmp 	#$FF
.139b	f0 e0		beq $137d			beq 	EXPReturnTrue
.139d	80 e9		bra $1388			bra 	EXPReturnFalse
.139f					EXPCompareGreater:
.139f	20 c3 13	jsr $13c3			jsr 	EXPCompareBaseCode
.13a2	c9 01		cmp #$01			cmp 	#1
.13a4	f0 d7		beq $137d			beq 	EXPReturnTrue
.13a6	80 e0		bra $1388			bra 	EXPReturnFalse
.13a8					EXPCompareNotEqual:
.13a8	20 c3 13	jsr $13c3			jsr 	EXPCompareBaseCode
.13ab	c9 00		cmp #$00			cmp 	#0
.13ad	d0 ce		bne $137d			bne 	EXPReturnTrue
.13af	80 d7		bra $1388			bra 	EXPReturnFalse
.13b1					EXPCompareLessEqual:
.13b1	20 c3 13	jsr $13c3			jsr 	EXPCompareBaseCode
.13b4	c9 01		cmp #$01			cmp 	#1
.13b6	d0 c5		bne $137d			bne 	EXPReturnTrue
.13b8	80 ce		bra $1388			bra 	EXPReturnFalse
.13ba					EXPCompareGreaterEqual:
.13ba	20 c3 13	jsr $13c3			jsr 	EXPCompareBaseCode
.13bd	c9 ff		cmp #$ff			cmp 	#$FF
.13bf	d0 bc		bne $137d			bne 	EXPReturnTrue
.13c1	80 c5		bra $1388			bra 	EXPReturnFalse
.13c3					EXPCompareBaseCode:
.13c3	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.13c5	30 10		bmi $13d7			bmi 	_EXCBCString
.13c7	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.13c9	20 16 24	jsr $2416			jsr 	IFloatCompare
.13cc	a5 0c		lda $0c				lda 	IFR0+IM0
.13ce	f0 06		beq $13d6			beq 	_EXCBCExit 					; return 0 if zero
.13d0	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.13d2	50 02		bvc $13d6			bvc 	_EXCBCExit
.13d4	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.13d6					_EXCBCExit:
.13d6	60		rts				rts
.13d7					_EXCBCString:
.13d7	5a		phy				phy
.13d8	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.13da	d2 10		cmp ($10)			cmp 	(IFR1)
.13dc	90 02		bcc $13e0			bcc 	_EXCBCSmaller
.13de	b2 10		lda ($10)			lda 	(IFR1)
.13e0					_EXCBCSmaller:
.13e0	aa		tax				tax
.13e1	f0 0d		beq $13f0			beq 	_EXCBCMatches 				; if zero common length matches
.13e3	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.13e5					_EXCBCCheckSmallerMatches:
.13e5	c8		iny				iny 								; compare directly as far as common length
.13e6	38		sec				sec
.13e7	b1 10		lda ($10),y			lda 	(IFR1),y
.13e9	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.13eb	d0 08		bne $13f5			bne 	_EXCBCExit2
.13ed	ca		dex				dex
.13ee	d0 f5		bne $13e5			bne 	_EXCBCCheckSmallerMatches
.13f0					_EXCBCMatches:
.13f0	38		sec				sec
.13f1	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.13f3	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.13f5					_EXCBCExit2:
.13f5	7a		ply				ply
.13f6	c9 00		cmp #$00			cmp 	#0
.13f8	f0 04		beq $13fe			beq 	_EXCBCReturn
.13fa	30 03		bmi $13ff			bmi 	_EXCBCFF
.13fc	a9 01		lda #$01			lda 	#1
.13fe					_EXCBCReturn:
.13fe	60		rts				rts
.13ff					_EXCBCFF:
.13ff	a9 ff		lda #$ff			lda 	#$FF
.1401	60		rts				rts
.1402					_EXCBCRange:
.1402	4c 8b 11	jmp $118b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1405					EXPBinLeft:
.1405	a9 ff		lda #$ff			lda 	#$FF
.1407	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.140a	4c 10 14	jmp $1410			jmp 	EXPShiftCommon
.140d					EXPBinRight:
.140d	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.1410					EXPShiftCommon:
.1410	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.1412	05 13		ora $13				ora 	IFR1+IExp
.1414	29 7f		and #$7f			and 	#$7F
.1416	d0 35		bne $144d			bne 	_EXPSRange
.1418	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.141a	29 e0		and #$e0			and 	#$E0
.141c	05 0d		ora $0d				ora 	IFR0+IM1
.141e	05 0e		ora $0e				ora 	IFR0+IM2
.1420	d0 25		bne $1447			bne 	_EXPSShiftZero 				; if so return zero
.1422	5a		phy				phy
.1423	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1425	29 1f		and #$1f			and 	#$1F
.1427	f0 17		beq $1440			beq 	_EXPSExit 					; exit if zero
.1429	a8		tay				tay
.142a					_EXPSLoop:
.142a	a2 10		ldx #$10			ldx 	#IFR1
.142c	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.142f	30 05		bmi $1436			bmi 	_EXPSShiftLeft
.1431	20 77 27	jsr $2777			jsr 	IFloatShiftRight
.1434	80 07		bra $143d			bra 	_EXPSContinue
.1436					_EXPSShiftLeft:
.1436	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1439	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.143b	30 10		bmi $144d			bmi 	_EXPSRange
.143d					_EXPSContinue:
.143d	88		dey				dey
.143e	d0 ea		bne $142a			bne 	_EXPSLoop
.1440					_EXPSExit:
.1440	a2 10		ldx #$10			ldx 	#IFR1
.1442	20 d9 26	jsr $26d9			jsr 	IFloatCopyFromRegister
.1445	7a		ply				ply
.1446	60		rts				rts
.1447					_EXPSShiftZero:
.1447	a2 0c		ldx #$0c			ldx 	#IFR0
.1449	20 48 27	jsr $2748			jsr 	IFloatSetZero
.144c	60		rts				rts
.144d					_EXPSRange:
.144d	4c 8b 11	jmp $118b		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1450					EXPEvaluateExpression:
.1450	a9 00		lda #$00			lda 	#0 							; current precedence
.1452					EXPEvaluateExpressionPrecedenceA:
.1452	48		pha				pha
.1453	20 cd 14	jsr $14cd			jsr 	EXPTermValueR0				; do first term.
.1456					_EELoop:
.1456	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1458	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.145a	90 31		bcc $148d			bcc 	_EEExit
.145c	aa		tax				tax 								; access the precedence of the operator.
.145d	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.145e	dd e5 16	cmp $16e5,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1461	b0 2b		bcs $148e			bcs 	_EEExit2
.1463	48		pha				pha 								; save current precedence.
.1464	da		phx				phx 								; save operator
.1465	c8		iny				iny 								; consume operator
.1466	da		phx				phx
.1467	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.1469	20 97 26	jsr $2697			jsr 	IFloatPushRx
.146c	fa		plx				plx
.146d	bd e5 16	lda $16e5,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1470	20 52 14	jsr $1452			jsr 	EXPEvaluateExpressionPrecedenceA
.1473	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.1475	20 b8 26	jsr $26b8			jsr 	IFloatPullRx
.1478	fa		plx				plx 								; operator
.1479	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.147b	45 13		eor $13				eor 	IFR1+IExp
.147d	30 08		bmi $1487			bmi 	_EEType
.147f					_EETypeOkay:
.147f	8a		txa				txa
.1480	0a		asl a				asl 	a 							; double -> X
.1481	aa		tax				tax
.1482	20 8a 14	jsr $148a			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1485	80 cf		bra $1456			bra 	_EELoop
.1487					_EEType:
.1487	4c a8 11	jmp $11a8		jmp	ErrorV_type
.148a					_EECallBinary:
.148a	7c 81 19	jmp ($1981,x)			jmp 	(VectorTable,x)
.148d					_EEExit:
.148d	68		pla				pla 								; throw precedence
.148e					_EEExit2:
.148e	18		clc				clc
.148f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1490					EXPEvalNumber:
.1490	20 50 14	jsr $1450			jsr 	EXPEvaluateExpression
.1493	24 0f		bit $0f				bit 	IFR0+IExp
.1495	30 01		bmi $1498			bmi 	EVUType
.1497	60		rts				rts
.1498					EVUType:
.1498	4c a8 11	jmp $11a8		jmp	ErrorV_type
.149b					EXPEvalInteger:
.149b	20 90 14	jsr $1490			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.149e	20 48 24	jsr $2448			jsr 	IFloatIntegerR0
.14a1	60		rts				rts
.14a2					EXPEvalInteger16:
.14a2	20 9b 14	jsr $149b			jsr 	EXPEvalInteger
.14a5	a5 0e		lda $0e				lda 	IFR0+IM2
.14a7	d0 21		bne $14ca			bne 	EVURange
.14a9	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14ab	a5 0c		lda $0c				lda 	IFR0+IM0
.14ad	60		rts				rts
.14ae					EXPEvalInteger8:
.14ae	20 9b 14	jsr $149b			jsr 	EXPEvalInteger
.14b1	a5 0e		lda $0e				lda 	IFR0+IM2
.14b3	05 0d		ora $0d				ora 	IFR0+IM1
.14b5	d0 13		bne $14ca			bne 	EVURange
.14b7	a5 0c		lda $0c				lda 	IFR0+IM0
.14b9	60		rts				rts
.14ba					EXPEvalString:
.14ba	20 50 14	jsr $1450			jsr 	EXPEvaluateExpression
.14bd	24 0f		bit $0f				bit 	IFR0+IExp
.14bf	10 d7		bpl $1498			bpl 	EVUType
.14c1	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14c3	86 1f		stx $1f				stx 	zTemp0+1
.14c5	a5 0c		lda $0c				lda 	IFR0+IM0
.14c7	85 1e		sta $1e				sta 	zTemp0
.14c9	60		rts				rts
.14ca					EVURange:
.14ca	4c 8b 11	jmp $118b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.14cd					EXPTermValueR0:
.14cd	20 18 15	jsr $1518			jsr 	EXPTermR0 					; get term
.14d0	90 45		bcc $1517			bcc 	_ETVNotReference 			; exit if value.
.14d2	5a		phy				phy
.14d3	a0 03		ldy #$03			ldy 	#3 							; get type
.14d5	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14d7	30 14		bmi $14ed			bmi 	_ETVDereferenceString
.14d9	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.14db	88		dey				dey
.14dc	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14de	85 0e		sta $0e				sta 	IFR0+IM2
.14e0	88		dey				dey
.14e1	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14e3	aa		tax				tax
.14e4	b2 0c		lda ($0c)			lda 	(IFR0)
.14e6	86 0d		stx $0d				stx 	IFR0+IM1
.14e8	85 0c		sta $0c				sta 	IFR0+IM0
.14ea	7a		ply				ply
.14eb	18		clc				clc
.14ec	60		rts				rts
.14ed					_ETVDereferenceString:
.14ed	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.14ef	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14f1	12 0c		ora ($0c)			ora 	(IFR0)
.14f3	f0 11		beq $1506			beq 	_ETVNull
.14f5	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.14f7	aa		tax				tax
.14f8	b2 0c		lda ($0c)			lda 	(IFR0)
.14fa	18		clc				clc 								; add two so points to actual string.
.14fb	69 02		adc #$02			adc 	#2
.14fd	90 01		bcc $1500			bcc 	_EVDSNoCarry
.14ff	e8		inx				inx
.1500					_EVDSNoCarry:
.1500	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.1502	85 0c		sta $0c				sta 	IFR0
.1504	80 08		bra $150e			bra 	_ETVFillExit 				; tidy up and exit.
.1506					_ETVNull:
.1506	a9 16		lda #$16			lda 	#_EVTNString & $FF
.1508	85 0c		sta $0c				sta 	IFR0+IM0
.150a	a9 15		lda #$15			lda 	#_EVTNString >> 8
.150c	85 0d		sta $0d				sta 	IFR0+IM1
.150e					_ETVFillExit:
.150e	64 0e		stz $0e				stz 	IFR0+IM2
.1510	a9 80		lda #$80			lda 	#$80
.1512	85 0f		sta $0f				sta 	IFR0+IExp
.1514	7a		ply				ply
.1515	60		rts				rts
.1516					_EVTNString:
>1516	00						.byte 	0
.1517					_ETVNotReference:
.1517	60		rts				rts
.1518					EXPTermR0:
.1518	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.151a	30 10		bmi $152c			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.151c	c8		iny				iny 								; consume element
.151d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.151f	b0 08		bcs $1529			bcs 	_ETMIdentifier
.1521	20 50 15	jsr $1550			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1524	20 83 15	jsr $1583			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1527	18		clc				clc 								; return value
.1528	60		rts				rts
.1529					_ETMIdentifier:
.1529	4c fa 20	jmp $20fa			jmp 	VARCheckSimple 				; check simple variables A-Z
.152c					_ETMIsUnaryOrMinus:
.152c	c8		iny				iny 								; consume element
.152d	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.152f	d0 0a		bne $153b			bne 	_ETMCheckUnary
.1531	20 cd 14	jsr $14cd			jsr 	EXPTermValueR0 				; get a term to negate
.1534	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1536	20 53 27	jsr $2753			jsr 	IFloatNegate
.1539	18		clc				clc
.153a	60		rts				rts
.153b					_ETMCheckUnary:
.153b	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.153d	90 0e		bcc $154d			bcc 	_ETMUnarySyntax
.153f	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1541	b0 0a		bcs $154d			bcs 	_ETMUnarySyntax
.1543	0a		asl a				asl 	a
.1544	aa		tax				tax
.1545	20 4a 15	jsr $154a			jsr 	_ETMCallUnaryFunction
.1548	18		clc				clc
.1549	60		rts				rts
.154a					_ETMCallUnaryFunction:
.154a	7c 81 19	jmp ($1981,x)			jmp 	(VectorTable,x)
.154d					_ETMUnarySyntax:
.154d	4c 7b 11	jmp $117b		jmp	ErrorV_syntax
.1550					EXPExtractTokenisedInteger:
.1550	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.1552	64 0f		stz $0f				stz 	IFR0+IExp
.1554	64 0d		stz $0d				stz 	IFR0+IM1
.1556	64 0e		stz $0e				stz 	IFR0+IM2
.1558					_ETMConstant:
.1558	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.155a	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.155c	b0 24		bcs $1582			bcs 	_ETMCExit 					; no.
.155e	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1560	a5 0d		lda $0d				lda 	IFR0+IM1
.1562	85 0e		sta $0e				sta 	IFR0+IM2
.1564	a5 0c		lda $0c				lda 	IFR0+IM0
.1566	85 0d		sta $0d				sta 	IFR0+IM1
.1568	64 0c		stz $0c				stz 	IFR0+IM0
.156a	8a		txa				txa
.156b	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.156c	66 0e		ror $0e				ror 	IFR0+IM2
.156e	66 0d		ror $0d				ror 	IFR0+IM1
.1570	66 0c		ror $0c				ror 	IFR0+IM0
.1572	4a		lsr a				lsr 	a
.1573	66 0e		ror $0e				ror 	IFR0+IM2
.1575	66 0d		ror $0d				ror 	IFR0+IM1
.1577	66 0c		ror $0c				ror 	IFR0+IM0
.1579	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.157b	11 1c		ora ($1c),y			ora 	(codePtr),y
.157d	85 0c		sta $0c				sta 	IFR0+IM0
.157f	c8		iny				iny 								; consume, loop back
.1580	80 d6		bra $1558			bra 	_ETMConstant
.1582					_ETMCExit:
.1582	60		rts				rts
.1583					EXPCheckDecimalFollows:
.1583	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.1585	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1587	d0 19		bne $15a2			bne 	_ETMCDExit
.1589	c8		iny				iny 								; consume token.
.158a	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.158c	5a		phy				phy									; save current position
.158d	48		pha				pha 								; save count of chars.
.158e	38		sec				sec 								; address into YX : y + codePtr+1
.158f	98		tya				tya
.1590	65 1c		adc $1c				adc 	codePtr
.1592	aa		tax				tax
.1593	a5 1d		lda $1d				lda 	codePtr+1
.1595	69 00		adc #$00			adc 	#0
.1597	a8		tay				tay
.1598	68		pla				pla 								; get count.
.1599	20 ec 25	jsr $25ec			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.159c	7a		ply				ply 								; go to next token.
.159d	98		tya				tya
.159e	38		sec				sec
.159f	71 1c		adc ($1c),y			adc 	(codePtr),y
.15a1	a8		tay				tay
.15a2					_ETMCDExit:
.15a2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.15a3					EXPUnaryAbs:
.15a3	20 90 14	jsr $1490			jsr 	EXPEvalNumber 					; number to R0
.15a6	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.15a9	20 8c 23	jsr $238c			jsr 	IFloatAbsoluteR0
.15ac	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.15ad					EXPUnaryAsc:
.15ad	20 ba 14	jsr $14ba			jsr 	EXPEvalString 					; string to R0, zTemp0
.15b0	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.15b3	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.15b5	f0 06		beq $15bd			beq 	_EXAZero 						; if so return 0
.15b7	5a		phy				phy 									; otherwise get first character
.15b8	a0 01		ldy #$01			ldy 	#1
.15ba	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15bc	7a		ply				ply
.15bd					_EXAZero:
.15bd	a2 0c		ldx #$0c			ldx 	#IFR0
.15bf	20 4a 27	jsr $274a			jsr 	IFloatSetByte
.15c2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.15c3					EXPUnaryChr:
.15c3	20 ae 14	jsr $14ae			jsr 	EXPEvalInteger8 				; expr
.15c6	48		pha				pha 									; push on stack
.15c7	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.15ca	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.15cc	20 c0 1f	jsr $1fc0			jsr 	StringTempAllocate
.15cf	68		pla				pla
.15d0	20 f5 1f	jsr $1ff5			jsr 	StringTempWrite
.15d3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.15d4					EXPUnaryDec:
.15d4	20 ba 14	jsr $14ba			jsr 	EXPEvalString 					; string to R0, zTemp0
.15d7	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.15da	5a		phy				phy
.15db	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.15dd	20 48 27	jsr $2748			jsr 	IFloatSetZero
.15e0	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.15e2	f0 3b		beq $161f			beq 	_EUDError 						; empty string
.15e4	aa		tax				tax
.15e5	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.15e7					_EUDLoop:
.15e7	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.15e9	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.15eb	90 02		bcc $15ef			bcc 	_EUDNoCase
.15ed	e9 20		sbc #$20			sbc 	#$20
.15ef					_EUDNoCase:
.15ef	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.15f1	90 2c		bcc $161f			bcc 	_EUDError
.15f3	c9 3a		cmp #$3a			cmp 	#'9'+1
.15f5	90 0a		bcc $1601			bcc 	_EUDOkay
.15f7	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.15f9	90 24		bcc $161f			bcc 	_EUDError
.15fb	c9 47		cmp #$47			cmp 	#'F'+1
.15fd	b0 20		bcs $161f			bcs 	_EUDError
.15ff	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1601					_EUDOkay:
.1601	29 0f		and #$0f			and 	#15 							; make constant
.1603	da		phx				phx
.1604	48		pha				pha
.1605	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1607	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.160a	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.160d	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1610	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1613	68		pla				pla 									; pop constant and OR in
.1614	fa		plx				plx
.1615	05 0c		ora $0c				ora 	IFR0+IM0
.1617	85 0c		sta $0c				sta 	IFR0+IM0
.1619	c8		iny				iny 									; next
.161a	ca		dex				dex
.161b	d0 ca		bne $15e7			bne 	_EUDLoop
.161d	7a		ply				ply
.161e	60		rts				rts
.161f					_EUDError:
.161f	4c 9b 11	jmp $119b		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1622					EXPUnaryInlineDec:
.1622	4c 7b 11	jmp $117b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1625					EXPUnaryNull:
.1625	20 cd 14	jsr $14cd			jsr 	EXPTermValueR0
.1628	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1629					EXPUnaryFrac:
.1629	20 90 14	jsr $1490			jsr 	EXPEvalNumber 					; number to R0
.162c	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.162f	20 f2 23	jsr $23f2			jsr 	IFloatFractionalR0
.1632	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1633					EXPUnaryInt:
.1633	20 90 14	jsr $1490			jsr 	EXPEvalNumber 					; number to R0
.1636	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.1639	20 48 24	jsr $2448			jsr 	IFloatIntegerR0
.163c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.163d					EXPUnaryLen:
.163d	20 ba 14	jsr $14ba			jsr 	EXPEvalString 					; string to R0, zTemp0
.1640	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.1643	b2 1e		lda ($1e)			lda 	(zTemp0)
.1645	a2 0c		ldx #$0c			ldx 	#IFR0
.1647	20 4a 27	jsr $274a			jsr 	IFloatSetByte
.164a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.164b					EXPUnaryParenthesis:
.164b	20 90 14	jsr $1490			jsr 	EXPEvalNumber 					; number to R0
.164e	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.1651	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1652					EXPUnaryRnd:
.1652	20 90 14	jsr $1490			jsr 	EXPEvalNumber 				; number to R0
.1655	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 				; )
.1658	a2 0c		ldx #$0c			ldx 	#IFR0
.165a	20 71 16	jsr $1671			jsr 	EXPLoadInRandom
.165d	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.165f	85 0f		sta $0f				sta 	IFR0+IExp
.1661	60		rts				rts
.1662					ExpUnaryRand:
.1662	20 9b 14	jsr $149b			jsr 	EXPEvalInteger 				; integer to R0
.1665	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 				; )
.1668	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.166a	20 71 16	jsr $1671			jsr 	EXPLoadInRandom
.166d	20 b9 22	jsr $22b9			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1670	60		rts				rts
.1671					EXPLoadInRandom:
.1671	20 48 27	jsr $2748			jsr 	IFloatSetZero
.1674	20 86 16	jsr $1686			jsr 	EXPRandom32
.1677	95 00		sta $00,x			sta 	IM0,x
.1679	20 86 16	jsr $1686			jsr 	EXPRandom32
.167c	95 01		sta $01,x			sta 	IM1,x
.167e	20 86 16	jsr $1686			jsr 	EXPRandom32
.1681	29 7f		and #$7f			and 	#$7F
.1683	95 02		sta $02,x			sta 	IM2,x
.1685	60		rts				rts
.1686					EXPRandom32:
.1686	5a		phy				phy
.1687	a0 08		ldy #$08			ldy 	#8
.1689	ad 3c 03	lda $033c			lda 	EXPSeed+0
.168c	0d 3d 03	ora $033d			ora 	EXPSeed+1
.168f	0d 3e 03	ora $033e			ora 	EXPSeed+2
.1692	0d 3f 03	ora $033f			ora 	EXPSeed+3
.1695	d0 08		bne $169f			bne 	_EXPRNoReset
.1697	ee 3c 03	inc $033c			inc 	EXPSeed+0
.169a	a0 10		ldy #$10			ldy 	#16
.169c	8c 3f 03	sty $033f			sty 	EXPSeed+3
.169f					_EXPRNoReset:
.169f	ad 3c 03	lda $033c			lda 	EXPSeed+0
.16a2					_EXPRLoop:
.16a2	0a		asl a				asl		a
.16a3	2e 3d 03	rol $033d			rol 	EXPSeed+1
.16a6	2e 3e 03	rol $033e			rol 	EXPSeed+2
.16a9	2e 3f 03	rol $033f			rol 	EXPSeed+3
.16ac	90 02		bcc $16b0			bcc 	_EXPRNoEOR
.16ae	49 c5		eor #$c5			eor 	#$C5
.16b0					_EXPRNoEOR:
.16b0	88		dey				dey
.16b1	d0 ef		bne $16a2			bne 	_EXPRLoop
.16b3	8d 3c 03	sta $033c			sta 	EXPSeed+0
.16b6	7a		ply				ply
.16b7	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.16b8					EXPUnarySgn:
.16b8	20 90 14	jsr $1490			jsr 	EXPEvalNumber 					; number to R0
.16bb	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.16be	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.16c0	20 ea 26	jsr $26ea			jsr 	IFloatCopyToRegister
.16c3	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.16c5	20 48 27	jsr $2748			jsr 	IFloatSetZero
.16c8	a2 10		ldx #$10			ldx 	#IFR1
.16ca	20 16 24	jsr $2416			jsr 	IFloatCompare 					; compare R1 vs 0.
.16cd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.16ce					EXPUnarySqr:
.16ce	20 90 14	jsr $1490			jsr 	EXPEvalNumber 					; number to R0
.16d1	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.16d4	20 94 23	jsr $2394			jsr 	IFloatSquareRootR0 				; square root.
.16d7	b0 01		bcs $16da			bcs 	_EUSValue
.16d9	60		rts				rts
.16da					_EUSValue:
.16da	4c 8b 11	jmp $118b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.16dd					EXPUnaryHex:
.16dd	20 9b 14	jsr $149b			jsr 	EXPEvalInteger 					; expr
.16e0	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.16e3	5a		phy				phy
.16e4	a9 10		lda #$10			lda 	#16
.16e6	20 e9 24	jsr $24e9			jsr 	IFloatIntegerToStringR0
.16e9	80 0a		bra $16f5			bra 	EUSMain
.16eb					EXPUnaryStr:
.16eb	20 90 14	jsr $1490			jsr 	EXPEvalNumber 					; expr
.16ee	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.16f1	5a		phy				phy
.16f2	20 45 25	jsr $2545			jsr 	IFloatFloatToStringR0 			; convert to string
.16f5					EUSMain:
.16f5	b0 18		bcs $170f			bcs 	_EUSError
.16f7	86 1e		stx $1e				stx 	zTemp0 							; save string address
.16f9	84 1f		sty $1f				sty 	zTemp0+1
.16fb	48		pha				pha 									; save count
.16fc	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.16fe	20 c0 1f	jsr $1fc0			jsr 	StringTempAllocate
.1701	fa		plx				plx 									; count in X
.1702	a0 00		ldy #$00			ldy 	#0
.1704					_EUSCopy:
.1704	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1706	c8		iny				iny
.1707	20 f5 1f	jsr $1ff5			jsr 	StringTempWrite
.170a	ca		dex				dex
.170b	d0 f7		bne $1704			bne	 	_EUSCopy
.170d	7a		ply				ply
.170e	60		rts				rts
.170f					_EUSError:
.170f	4c 8b 11	jmp $118b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1712					EXPUnaryInlineString:
.1712	18		clc				clc 								; physical address -> IM0,1
.1713	98		tya				tya
.1714	65 1c		adc $1c				adc 	codePtr
.1716	85 0c		sta $0c				sta 	IFR0+IM0
.1718	a5 1d		lda $1d				lda 	codePtr+1
.171a	69 00		adc #$00			adc 	#0
.171c	85 0d		sta $0d				sta 	IFR0+IM1
.171e	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.1720	a9 80		lda #$80			lda 	#$80
.1722	85 0f		sta $0f				sta 	IFR0+IExp
.1724	98		tya				tya	 								; skip over it.
.1725	38		sec				sec
.1726	71 1c		adc ($1c),y			adc 	(codePtr),y
.1728	a8		tay				tay
.1729	60		rts				rts
.172a					_EXPUISRange:
.172a	4c 8b 11	jmp $118b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.172d					EXPUnaryLeft:
.172d	20 73 17	jsr $1773			jsr 	EXPCommonStart 					; <string>,
.1730	48		pha				pha 									; save string address on stack
.1731	da		phx				phx
.1732	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1734	48		pha				pha
.1735	20 ae 14	jsr $14ae			jsr 	EXPEvalInteger8 				; characters to do
.1738	80 44		bra $177e			bra 	EXPSubstringCommon
.173a					EXPUnaryRight:
.173a	20 73 17	jsr $1773			jsr 	EXPCommonStart 					; <string>,
.173d	48		pha				pha 									; save string address on stack
.173e	da		phx				phx
.173f	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.1741	48		pha				pha
.1742	20 ae 14	jsr $14ae			jsr 	EXPEvalInteger8 				; characters to do
.1745	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.1747	68		pla				pla
.1748	38		sec				sec
.1749	e5 1e		sbc $1e				sbc 	zTemp0
.174b	b0 02		bcs $174f			bcs 	_EUROffLeft
.174d	a9 00		lda #$00			lda 	#0
.174f					_EUROffLeft:
.174f	48		pha				pha 									; start pos
.1750	a9 ff		lda #$ff			lda 	#255
.1752	80 2a		bra $177e			bra 	EXPSubstringCommon
.1754					EXPUnaryMid:
.1754	20 73 17	jsr $1773			jsr 	EXPCommonStart 					; <string>,
.1757	48		pha				pha 									; save string address on stack
.1758	da		phx				phx
.1759	20 ae 14	jsr $14ae			jsr 	EXPEvalInteger8 				; characters start
.175c	f0 12		beq $1770			beq 	_EUSError 						; 1 is left
.175e	3a		dec a				dec 	a 								; zero based.
.175f	48		pha				pha
.1760	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.1762	c9 99		cmp #$99			cmp 	#PR_COMMA
.1764	f0 04		beq $176a			beq 	_EUMLength 						; if so m is provided
.1766	a9 ff		lda #$ff			lda 	#255 							; default m
.1768	80 14		bra $177e			bra 	EXPSubstringCommon
.176a					_EUMLength:
.176a	c8		iny				iny 									; consume comma
.176b	20 ae 14	jsr $14ae			jsr 	EXPEvalInteger8 				; characters to do
.176e	80 0e		bra $177e			bra 	EXPSubstringCommon
.1770					_EUSError:
.1770	4c 9b 11	jmp $119b		jmp	ErrorV_value
.1773					EXPCommonStart:
.1773	20 ba 14	jsr $14ba			jsr 	EXPEvalString
.1776	20 c2 12	jsr $12c2			jsr 	ERRCheckComma
.1779	a5 0c		lda $0c				lda 	IFR0+IM0
.177b	a6 0d		ldx $0d				ldx 	IFR0+IM1
.177d	60		rts				rts
.177e					EXPSubstringCommon:
.177e	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.1780	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; check right bracket.
.1783	68		pla				pla 									; start position
.1784	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.1786	fa		plx				plx 									; get string address to zTemp2.
.1787	86 23		stx $23				stx 	zTemp2+1
.1789	68		pla				pla
.178a	85 22		sta $22				sta 	zTemp2
.178c	38		sec				sec 									; length - start is the max count of chars
.178d	b2 22		lda ($22)			lda 	(zTemp2)
.178f	e5 21		sbc $21				sbc 	zTemp1+1
.1791	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.1793	b0 02		bcs $1797			bcs 	_EXPSSNoTrim
.1795	85 20		sta $20				sta 	zTemp1 							; update count with available
.1797					_EXPSSNoTrim:
.1797	a5 20		lda $20				lda 	zTemp1 							; chars required.
.1799	20 c0 1f	jsr $1fc0			jsr 	StringTempAllocate 				; allocate memory for it.
.179c	a5 20		lda $20				lda 	zTemp1 							; zero length string
.179e	f0 15		beq $17b5			beq 	_EXPSSExit
.17a0	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.17a2	d2 22		cmp ($22)			cmp 	(zTemp2)
.17a4	b0 0f		bcs $17b5			bcs 	_EXPSSExit
.17a6	5a		phy				phy
.17a7	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.17a9	c8		iny				iny 									; +1 for the length byte
.17aa					_EXPSSCopy:
.17aa	b1 22		lda ($22),y			lda 	(zTemp2),y
.17ac	20 f5 1f	jsr $1ff5			jsr 	StringTempWrite
.17af	c8		iny				iny
.17b0	c6 20		dec $20				dec 	zTemp1
.17b2	d0 f6		bne $17aa			bne 	_EXPSSCopy
.17b4	7a		ply				ply
.17b5					_EXPSSExit:
.17b5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.17b6					EXPUnaryVal:
.17b6	20 ba 14	jsr $14ba			jsr 	EXPEvalString 					; string to R0, zTemp0
.17b9	20 ba 12	jsr $12ba			jsr 	ERRCheckRParen 					; )
.17bc	5a		phy				phy
.17bd	18		clc				clc
.17be	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.17c0	69 01		adc #$01			adc 	#1
.17c2	aa		tax				tax
.17c3	a5 1f		lda $1f				lda 	zTemp0+1
.17c5	69 00		adc #$00			adc 	#0
.17c7	a8		tay				tay
.17c8	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.17ca	20 ac 25	jsr $25ac			jsr 	IFloatStringToFloatR0 			; do conversion
.17cd	b0 02		bcs $17d1			bcs 	_EUVError
.17cf	7a		ply				ply
.17d0	60		rts				rts
.17d1					_EUVError:
.17d1	4c 9b 11	jmp $119b		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.17d4					BinaryPrecedence:
>17d4	02					.byte	 2	; $ef =
>17d5	02					.byte	 2	; $f0 <>
>17d6	02					.byte	 2	; $f1 <=
>17d7	02					.byte	 2	; $f2 <
>17d8	02					.byte	 2	; $f3 >=
>17d9	02					.byte	 2	; $f4 >
>17da	01					.byte	 1	; $f5 XOR
>17db	01					.byte	 1	; $f6 OR
>17dc	01					.byte	 1	; $f7 AND
>17dd	04					.byte	 4	; $f8 DIV
>17de	04					.byte	 4	; $f9 MOD
>17df	04					.byte	 4	; $fa <<
>17e0	04					.byte	 4	; $fb >>
>17e1	04					.byte	 4	; $fc /
>17e2	04					.byte	 4	; $fd *
>17e3	03					.byte	 3	; $fe -
>17e4	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.17e5					StandardTokens:
>17e5	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>17ec	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>17f2	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>17f8	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>17fd	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1800	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1806	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1809	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>180e	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1813	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>181b	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>181f	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1824	00					.byte	$00                                     	; $8c [[end]]
>1825	00					.byte	$00                                     	; $8d [[shift]]
>1826	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>182b	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1830	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1833	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1838	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>183c	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1842	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1848	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>184d	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1851	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1855	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>185a	01 2c					.byte	$01,$2c                                 	; $99 ,
>185c	01 3b					.byte	$01,$3b                                 	; $9a ;
>185e	01 3a					.byte	$01,$3a                                 	; $9b :
>1860	01 27					.byte	$01,$27                                 	; $9c '
>1862	01 29					.byte	$01,$29                                 	; $9d )
>1864	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1868	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>186e	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1872	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1876	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>187b	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>187f	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1886	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>188b	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1890	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1895	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>189a	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>189f	00					.byte	0											; $aa
>18a0	00					.byte	0											; $ab
>18a1	00					.byte	0											; $ac
>18a2	00					.byte	0											; $ad
>18a3	00					.byte	0											; $ae
>18a4	00					.byte	0											; $af
>18a5	00					.byte	0											; $b0
>18a6	00					.byte	0											; $b1
>18a7	00					.byte	0											; $b2
>18a8	00					.byte	0											; $b3
>18a9	00					.byte	0											; $b4
>18aa	00					.byte	0											; $b5
>18ab	00					.byte	0											; $b6
>18ac	00					.byte	0											; $b7
>18ad	00					.byte	0											; $b8
>18ae	00					.byte	0											; $b9
>18af	00					.byte	0											; $ba
>18b0	00					.byte	0											; $bb
>18b1	00					.byte	0											; $bc
>18b2	00					.byte	0											; $bd
>18b3	00					.byte	0											; $be
>18b4	00					.byte	0											; $bf
>18b5	00					.byte	0											; $c0
>18b6	00					.byte	0											; $c1
>18b7	00					.byte	0											; $c2
>18b8	00					.byte	0											; $c3
>18b9	00					.byte	0											; $c4
>18ba	00					.byte	0											; $c5
>18bb	00					.byte	0											; $c6
>18bc	00					.byte	0											; $c7
>18bd	00					.byte	0											; $c8
>18be	00					.byte	0											; $c9
>18bf	00					.byte	0											; $ca
>18c0	00					.byte	0											; $cb
>18c1	00					.byte	0											; $cc
>18c2	00					.byte	0											; $cd
>18c3	00					.byte	0											; $ce
>18c4	00					.byte	0											; $cf
>18c5	00					.byte	0											; $d0
>18c6	00					.byte	0											; $d1
>18c7	00					.byte	0											; $d2
>18c8	00					.byte	0											; $d3
>18c9	00					.byte	0											; $d4
>18ca	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>18d0	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>18d6	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>18de	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>18e5	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>18eb	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>18f1	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>18f6	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>18fb	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1900	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1905	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>190a	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1910	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1915	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>191d	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1924	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1929	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>192e	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1934	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1939	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>193f	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1944	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>194a	01 28					.byte	$01,$28                                 	; $eb (
>194c	01 24					.byte	$01,$24                                 	; $ec $
>194e	00					.byte	$00                                     	; $ed [[decimal]]
>194f	00					.byte	$00                                     	; $ee [[string]]
>1950	01 3d					.byte	$01,$3d                                 	; $ef =
>1952	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1955	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1958	01 3c					.byte	$01,$3c                                 	; $f2 <
>195a	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>195d	01 3e					.byte	$01,$3e                                 	; $f4 >
>195f	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1963	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1966	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>196a	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>196e	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1972	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1975	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1978	01 2f					.byte	$01,$2f                                 	; $fc /
>197a	01 2a					.byte	$01,$2a                                 	; $fd *
>197c	01 2d					.byte	$01,$2d                                 	; $fe -
>197e	01 2b					.byte	$01,$2b                                 	; $ff +
>1980	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1981					VectorTable:
>1981	26 28					.word	NotImplemented           ; $80 REPEAT
>1983	26 28					.word	NotImplemented           ; $81 UNTIL
>1985	26 28					.word	NotImplemented           ; $82 WHILE
>1987	26 28					.word	NotImplemented           ; $83 WEND
>1989	26 28					.word	NotImplemented           ; $84 IF
>198b	26 28					.word	NotImplemented           ; $85 ENDIF
>198d	26 28					.word	NotImplemented           ; $86 DO
>198f	26 28					.word	NotImplemented           ; $87 LOOP
>1991	26 28					.word	NotImplemented           ; $88 PROC
>1993	26 28					.word	NotImplemented           ; $89 ENDPROC
>1995	26 28					.word	NotImplemented           ; $8a FOR
>1997	26 28					.word	NotImplemented           ; $8b NEXT
>1999	34 11					.word	RUNEndOfLine             ; $8c [[END]]
>199b	72 11					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>199d	26 28					.word	NotImplemented           ; $8e ELSE
>199f	52 10					.word	NoExec01                 ; $8f THEN
>19a1	52 10					.word	NoExec02                 ; $90 TO
>19a3	52 10					.word	NoExec03                 ; $91 STEP
>19a5	ba 10					.word	CommandLET               ; $92 LET
>19a7	55 10					.word	Command_Print            ; $93 PRINT
>19a9	26 28					.word	NotImplemented           ; $94 INPUT
>19ab	26 28					.word	NotImplemented           ; $95 CALL
>19ad	26 28					.word	NotImplemented           ; $96 SYS
>19af	1b 11					.word	Command_REM              ; $97 REM
>19b1	26 28					.word	NotImplemented           ; $98 EXIT
>19b3	52 10					.word	NoExec04                 ; $99 ,
>19b5	52 10					.word	NoExec05                 ; $9a ;
>19b7	52 10					.word	NoExec06                 ; $9b :
>19b9	1b 11					.word	Command_REM2             ; $9c '
>19bb	52 10					.word	NoExec07                 ; $9d )
>19bd	26 28					.word	NotImplemented           ; $9e DIM
>19bf	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>19c1	12 11					.word	Command_NEW              ; $a0 NEW
>19c3	28 11					.word	Command_RUN              ; $a1 RUN
>19c5	78 11					.word	Command_STOP             ; $a2 STOP
>19c7	75 11					.word	Command_END              ; $a3 END
>19c9	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>19cb	26 28					.word	NotImplemented           ; $a5 LIST
>19cd	26 28					.word	NotImplemented           ; $a6 SAVE
>19cf	26 28					.word	NotImplemented           ; $a7 LOAD
>19d1	26 28					.word	NotImplemented           ; $a8 POKE
>19d3	26 28					.word	NotImplemented           ; $a9 DOKE
>19d5	26 28					.word	NotImplemented           ; $aa
>19d7	26 28					.word	NotImplemented           ; $ab
>19d9	26 28					.word	NotImplemented           ; $ac
>19db	26 28					.word	NotImplemented           ; $ad
>19dd	26 28					.word	NotImplemented           ; $ae
>19df	26 28					.word	NotImplemented           ; $af
>19e1	26 28					.word	NotImplemented           ; $b0
>19e3	26 28					.word	NotImplemented           ; $b1
>19e5	26 28					.word	NotImplemented           ; $b2
>19e7	26 28					.word	NotImplemented           ; $b3
>19e9	26 28					.word	NotImplemented           ; $b4
>19eb	26 28					.word	NotImplemented           ; $b5
>19ed	26 28					.word	NotImplemented           ; $b6
>19ef	26 28					.word	NotImplemented           ; $b7
>19f1	26 28					.word	NotImplemented           ; $b8
>19f3	26 28					.word	NotImplemented           ; $b9
>19f5	26 28					.word	NotImplemented           ; $ba
>19f7	26 28					.word	NotImplemented           ; $bb
>19f9	26 28					.word	NotImplemented           ; $bc
>19fb	26 28					.word	NotImplemented           ; $bd
>19fd	26 28					.word	NotImplemented           ; $be
>19ff	26 28					.word	NotImplemented           ; $bf
>1a01	26 28					.word	NotImplemented           ; $c0
>1a03	26 28					.word	NotImplemented           ; $c1
>1a05	26 28					.word	NotImplemented           ; $c2
>1a07	26 28					.word	NotImplemented           ; $c3
>1a09	26 28					.word	NotImplemented           ; $c4
>1a0b	26 28					.word	NotImplemented           ; $c5
>1a0d	26 28					.word	NotImplemented           ; $c6
>1a0f	26 28					.word	NotImplemented           ; $c7
>1a11	26 28					.word	NotImplemented           ; $c8
>1a13	26 28					.word	NotImplemented           ; $c9
>1a15	26 28					.word	NotImplemented           ; $ca
>1a17	26 28					.word	NotImplemented           ; $cb
>1a19	26 28					.word	NotImplemented           ; $cc
>1a1b	26 28					.word	NotImplemented           ; $cd
>1a1d	26 28					.word	NotImplemented           ; $ce
>1a1f	26 28					.word	NotImplemented           ; $cf
>1a21	26 28					.word	NotImplemented           ; $d0
>1a23	26 28					.word	NotImplemented           ; $d1
>1a25	26 28					.word	NotImplemented           ; $d2
>1a27	26 28					.word	NotImplemented           ; $d3
>1a29	26 28					.word	NotImplemented           ; $d4
>1a2b	26 28					.word	NotImplemented           ; $d5 DEEK(
>1a2d	26 28					.word	NotImplemented           ; $d6 PEEK(
>1a2f	3a 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1a31	2d 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1a33	54 17					.word	EXPUnaryMid              ; $d9 MID$(
>1a35	eb 16					.word	EXPUnaryStr              ; $da STR$(
>1a37	b6 17					.word	EXPUnaryVal              ; $db VAL(
>1a39	b8 16					.word	EXPUnarySgn              ; $dc SGN(
>1a3b	a3 15					.word	EXPUnaryAbs              ; $dd ABS(
>1a3d	3d 16					.word	EXPUnaryLen              ; $de LEN(
>1a3f	ce 16					.word	EXPUnarySqr              ; $df SQR(
>1a41	c3 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1a43	ad 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1a45	26 28					.word	NotImplemented           ; $e2 INKEY$(
>1a47	26 28					.word	NotImplemented           ; $e3 EVENT(
>1a49	26 28					.word	NotImplemented           ; $e4 TIME
>1a4b	33 16					.word	EXPUnaryInt              ; $e5 INT(
>1a4d	29 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1a4f	d4 15					.word	EXPUnaryDec              ; $e7 DEC(
>1a51	dd 16					.word	EXPUnaryHex              ; $e8 HEX$(
>1a53	52 16					.word	EXPUnaryRnd              ; $e9 RND(
>1a55	62 16					.word	ExpUnaryRand             ; $ea RAND(
>1a57	4b 16					.word	EXPUnaryParenthesis      ; $eb (
>1a59	25 16					.word	EXPUnaryNull             ; $ec $
>1a5b	22 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1a5d	12 17					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1a5f	8d 13					.word	EXPCompareEqual          ; $ef =
>1a61	a8 13					.word	EXPCompareNotEqual       ; $f0 <>
>1a63	b1 13					.word	EXPCompareLessEqual      ; $f1 <=
>1a65	96 13					.word	EXPCompareLess           ; $f2 <
>1a67	ba 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1a69	9f 13					.word	EXPCompareGreater        ; $f4 >
>1a6b	3a 13					.word	EXPBinXor                ; $f5 XOR
>1a6d	2e 13					.word	EXPBinOr                 ; $f6 OR
>1a6f	22 13					.word	EXPBinAnd                ; $f7 AND
>1a71	fa 12					.word	EXPBinIDiv               ; $f8 DIV
>1a73	0b 13					.word	EXPBinIMod               ; $f9 MOD
>1a75	05 14					.word	EXPBinLeft               ; $fa <<
>1a77	0d 14					.word	EXPBinRight              ; $fb >>
>1a79	ee 12					.word	EXPBinFDiv               ; $fc /
>1a7b	e5 12					.word	EXPBinMul                ; $fd *
>1a7d	dc 12					.word	EXPBinSub                ; $fe -
>1a7f	d3 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1a81					TOKDetokenise:
.1a81	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1a83	84 23		sty $23				sty 	zTemp2+1
.1a85	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.1a88					_TOKDLoop:
.1a88	20 b7 1a	jsr $1ab7			jsr 	TOKDGet 					; get next
.1a8b	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1a8d	f0 26		beq $1ab5			beq 	_TOKDExit
.1a8f	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1a91	f0 1d		beq $1ab0			beq 	_TOKDDataItem
.1a93	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1a95	f0 19		beq $1ab0			beq 	_TOKDDataItem
.1a97	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1a99	10 05		bpl $1aa0			bpl 	_TOKDNotToken
.1a9b	20 7f 1b	jsr $1b7f			jsr 	TOKDToken 					; token to text.
.1a9e	80 e8		bra $1a88			bra 	_TOKDLoop
.1aa0					_TOKDNotToken:
.1aa0	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1aa2	90 05		bcc $1aa9			bcc 	_TOKDNotIdentifier
.1aa4	20 f2 1a	jsr $1af2			jsr 	TOKDIdentifier
.1aa7	80 df		bra $1a88			bra 	_TOKDLoop
.1aa9					_TOKDNotIdentifier:
.1aa9	a0 0a		ldy #$0a			ldy 	#10
.1aab	20 3b 1b	jsr $1b3b			jsr 	TOKDInteger
.1aae	80 d8		bra $1a88			bra 	_TOKDLoop
.1ab0					_TOKDDataItem:
.1ab0	20 cd 1a	jsr $1acd			jsr 	TOKDDataItem
.1ab3	80 d3		bra $1a88			bra 	_TOKDLoop
.1ab5					_TOKDExit:
.1ab5	18		clc				clc
.1ab6	60		rts				rts
.1ab7	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1ab9	e6 22		inc $22				inc 	zTemp2
.1abb	d0 02		bne $1abf			bne 	_TKDGExit
.1abd	e6 23		inc $23				inc 	zTemp2+1
.1abf					_TKDGExit:
.1abf	60		rts				rts
.1ac0					TOKDOutput:
.1ac0	8d 42 03	sta $0342			sta 	TOKLastCharacter
.1ac3	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.1ac6					TOKSetDetokeniseOutput:
.1ac6	8e 40 03	stx $0340			stx 	TOKOutputMethod
.1ac9	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.1acc	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1acd					TOKDDataItem:
.1acd	a8		tay				tay 								; type in Y
.1ace	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1ad0	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1ad2	f0 02		beq $1ad6			beq 	_TOKDDIsString
.1ad4	a9 2e		lda #$2e			lda 	#'.'
.1ad6					_TOKDDIsString:
.1ad6	20 c0 1a	jsr $1ac0			jsr 	TOKDOutput 					; dump it
.1ad9	20 b7 1a	jsr $1ab7			jsr 	TOKDGet 					; get length into X
.1adc	aa		tax				tax
.1add					_TOKDDOutput:
.1add	ca		dex				dex 								; are we complete
.1ade	30 08		bmi $1ae8			bmi 	_TOKDDEnd
.1ae0	20 b7 1a	jsr $1ab7			jsr 	TOKDGet 					; get character and output it
.1ae3	20 c0 1a	jsr $1ac0			jsr 	TOKDOutput
.1ae6	80 f5		bra $1add			bra 	_TOKDDOutput
.1ae8					_TOKDDEnd:
.1ae8	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1aea	d0 05		bne $1af1			bne 	_TOKDDNotString
.1aec	a9 22		lda #$22			lda 	#'"'
.1aee	20 c0 1a	jsr $1ac0			jsr 	TOKDOutput
.1af1					_TOKDDNotString:
.1af1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1af2					TOKDIdentifier:
.1af2	a0 ff		ldy #$ff			ldy 	#$FF
.1af4	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.1af7					_TOKDLoop:
.1af7	a8		tay				tay 								; token in Y
.1af8	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1afa	c0 64		cpy #$64			cpy 	#$64
.1afc	f0 11		beq $1b0f			beq 	_TOKDIOutput
.1afe	a9 5f		lda #$5f			lda 	#'_'
.1b00	c0 65		cpy #$65			cpy 	#$65
.1b02	f0 0b		beq $1b0f			beq 	_TOKDIOutput
.1b04	98		tya				tya 								; handle a-z
.1b05	18		clc				clc
.1b06	69 21		adc #$21			adc	 	#$21
.1b08	c0 5a		cpy #$5a			cpy 	#$5A
.1b0a	90 03		bcc $1b0f			bcc 	_TOKDIOutput
.1b0c	38		sec				sec 								; handle 0-9
.1b0d	e9 4b		sbc #$4b			sbc 	#$4B
.1b0f					_TOKDIOutput:
.1b0f	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.1b12	10 08		bpl $1b1c			bpl 	_TOKDINoSpacing
.1b14	48		pha				pha
.1b15	20 b1 1b	jsr $1bb1			jsr 	TOKDSpacing
.1b18	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.1b1b	68		pla				pla
.1b1c					_TOKDINoSpacing:
.1b1c	20 c0 1a	jsr $1ac0			jsr 	TOKDOutput
.1b1f	20 b7 1a	jsr $1ab7			jsr 	TOKDGet 					; get next token
.1b22	c9 7c		cmp #$7c			cmp 	#$7C
.1b24	90 d1		bcc $1af7			bcc 	_TOKDLoop
.1b26	f0 12		beq $1b3a			beq 	_TOKDIExit 					; it's a number, no tail.
.1b28	4a		lsr a				lsr 	a 							; string ?
.1b29	90 07		bcc $1b32			bcc 	_TOKDICheckArray
.1b2b	48		pha				pha
.1b2c	a9 24		lda #$24			lda 	#"$"
.1b2e	20 c0 1a	jsr $1ac0			jsr 	TOKDOutput
.1b31	68		pla				pla
.1b32					_TOKDICheckArray:
.1b32	4a		lsr a				lsr 	a 							; array ?
.1b33	90 05		bcc $1b3a			bcc 	_TOKDIExit
.1b35	a9 28		lda #$28			lda 	#"("
.1b37	20 c0 1a	jsr $1ac0			jsr 	TOKDOutput
.1b3a					_TOKDIExit:
.1b3a	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1b3b					TOKDInteger:
.1b3b	5a		phy				phy 								; save base
.1b3c	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1b3e	20 4a 27	jsr $274a			jsr 	IFloatSetByte
.1b41					_TOKDILoop:
.1b41	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1b43	c9 40		cmp #$40			cmp 	#$40
.1b45	b0 1d		bcs $1b64			bcs 	_TOKDIHaveInteger
.1b47	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1b49	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1b4c	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1b4f	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1b52	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1b55	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1b58	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1b5b	20 b7 1a	jsr $1ab7			jsr 	TOKDGet 					; OR byte in.
.1b5e	05 0c		ora $0c				ora 	IFR0+IM0
.1b60	85 0c		sta $0c				sta 	IFR0+IM0
.1b62	80 dd		bra $1b41			bra 	_TOKDILoop
.1b64					_TOKDIHaveInteger:
.1b64	7a		ply				ply 								; restore base
.1b65	98		tya				tya 								; base in A
.1b66	20 e9 24	jsr $24e9			jsr 	IFloatIntegerToStringR0
.1b69	86 1e		stx $1e				stx 	zTemp0
.1b6b	84 1f		sty $1f				sty 	zTemp0+1
.1b6d	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b6f	20 b1 1b	jsr $1bb1			jsr 	TOKDSpacing 				; check spacing okay.
.1b72	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1b74					_TOKDOutput:
.1b74	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b76	20 c0 1a	jsr $1ac0			jsr 	TOKDOutput
.1b79	c8		iny				iny
.1b7a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b7c	d0 f6		bne $1b74			bne 	_TOKDOutput
.1b7e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1b7f					TOKDToken:
.1b7f	a2 e5		ldx #$e5			ldx 	#StandardTokens & $FF
.1b81	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1b83					_TOKDSearch:
.1b83	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1b85	84 1f		sty $1f				sty 	zTemp0+1
.1b87	aa		tax				tax 								; token ID in X.
.1b88					_TOKDFind:
.1b88	ca		dex				dex 								; reached the start
.1b89	10 0d		bpl $1b98			bpl 	_TOKDFound
.1b8b	38		sec				sec 								; go to next entry
.1b8c	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b8e	65 1e		adc $1e				adc 	zTemp0
.1b90	85 1e		sta $1e				sta 	zTemp0
.1b92	90 f4		bcc $1b88			bcc 	_TOKDFind
.1b94	e6 1f		inc $1f				inc 	zTemp0+1
.1b96	80 f0		bra $1b88			bra 	_TOKDFind
.1b98					_TOKDFound:
.1b98	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1b9a	f0 14		beq $1bb0			beq 	_TOKDExit
.1b9c	aa		tax				tax
.1b9d	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1b9f	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1ba1	20 b1 1b	jsr $1bb1			jsr 	TOKDSpacing
.1ba4					_TOKDOutput:
.1ba4	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1ba6	20 08 1f	jsr $1f08			jsr 	TOKToLower
.1ba9	20 c0 1a	jsr $1ac0			jsr 	TOKDOutput
.1bac	c8		iny				iny
.1bad	ca		dex				dex
.1bae	d0 f4		bne $1ba4			bne 	_TOKDOutput
.1bb0					_TOKDExit:
.1bb0	60		rts				rts
.1bb1					TOKDSpacing:
.1bb1	20 1f 1f	jsr $1f1f			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1bb4	90 0d		bcc $1bc3			bcc 	_TOKDSExit
.1bb6	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1bb9	20 1f 1f	jsr $1f1f			jsr 	TOKIsIdentifierElement
.1bbc	90 05		bcc $1bc3			bcc 	_TOKDSExit
.1bbe	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1bc0	20 c0 1a	jsr $1ac0			jsr 	TOKDOutput
.1bc3					_TOKDSExit:
.1bc3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1bc4					PGMDeleteLine:
.1bc4	20 77 1c	jsr $1c77			jsr 	PGMEndProgram 				; end of program into zTemp0
.1bc7	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1bc9	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1bcc	85 21		sta $21				sta 	zTemp1+1
.1bce					_PGMDLoop:
.1bce	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1bd0	38		sec				sec
.1bd1	f0 3a		beq $1c0d			beq 	_PGMDExit
.1bd3	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1bd5	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bd7	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1bda	d0 08		bne $1be4			bne 	_PGMDNext
.1bdc	c8		iny				iny
.1bdd	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bdf	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1be2	f0 0d		beq $1bf1			beq 	_PGMDDelete
.1be4					_PGMDNext:
.1be4	18		clc				clc
.1be5	b2 20		lda ($20)			lda 	(zTemp1)
.1be7	65 20		adc $20				adc 	zTemp1
.1be9	85 20		sta $20				sta 	zTemp1
.1beb	90 e1		bcc $1bce			bcc 	_PGMDLoop
.1bed	e6 21		inc $21				inc 	zTemp1+1
.1bef	80 dd		bra $1bce			bra 	_PGMDLoop
.1bf1					_PGMDDelete:
.1bf1	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1bf3	a8		tay				tay
.1bf4					_PGMDCopy:
.1bf4	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1bf6	92 20		sta ($20)			sta 	(zTemp1)
.1bf8	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1bfa	c5 1e		cmp $1e				cmp 	zTemp0
.1bfc	d0 07		bne $1c05			bne 	_PGMDNext2
.1bfe	a5 21		lda $21				lda 	zTemp1+1
.1c00	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c02	18		clc				clc
.1c03	f0 08		beq $1c0d			beq 	_PGMDExit
.1c05					_PGMDNext2:
.1c05	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1c07	d0 eb		bne $1bf4			bne 	_PGMDCopy
.1c09	e6 21		inc $21				inc 	zTemp1+1
.1c0b	80 e7		bra $1bf4			bra 	_PGMDCopy
.1c0d					_PGMDExit:
.1c0d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1c0e					PGMInsertLine:
.1c0e	20 77 1c	jsr $1c77			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c11	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c13	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c16	85 21		sta $21				sta 	zTemp1+1
.1c18					_PGMILoop:
.1c18	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c1a	f0 1c		beq $1c38			beq 	_PGMIInsert
.1c1c	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c1e	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c20	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c23	c8		iny				iny
.1c24	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c26	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1c29	b0 0d		bcs $1c38			bcs 	_PGMIInsert 				; insert here.
.1c2b	18		clc				clc
.1c2c	b2 20		lda ($20)			lda 	(zTemp1)
.1c2e	65 20		adc $20				adc 	zTemp1
.1c30	85 20		sta $20				sta 	zTemp1
.1c32	90 e4		bcc $1c18			bcc 	_PGMILoop
.1c34	e6 21		inc $21				inc 	zTemp1+1
.1c36	80 e0		bra $1c18			bra 	_PGMILoop
.1c38					_PGMIInsert:
.1c38	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1c3b					_PGMIInsertLoop:
.1c3b	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c3d	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1c3f	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1c41	c5 1e		cmp $1e				cmp 	zTemp0
.1c43	d0 06		bne $1c4b			bne 	_PGMINext
.1c45	a5 21		lda $21				lda 	zTemp1+1
.1c47	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c49	f0 0a		beq $1c55			beq 	_PGMIInserted
.1c4b					_PGMINext:
.1c4b	a5 1e		lda $1e				lda 	zTemp0
.1c4d	d0 02		bne $1c51			bne 	_PGMINoBorrow
.1c4f	c6 1f		dec $1f				dec 	zTemp0+1
.1c51					_PGMINoBorrow:
.1c51	c6 1e		dec $1e				dec 	zTemp0
.1c53	80 e6		bra $1c3b			bra 	_PGMIInsertLoop
.1c55					_PGMIInserted:
.1c55	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1c57					_PGMICopyLoop:
.1c57	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1c5a	91 20		sta ($20),y			sta 	(zTemp1),y
.1c5c	c8		iny				iny
.1c5d	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1c60	d0 f5		bne $1c57			bne 	_PGMICopyLoop
.1c62	18		clc				clc
.1c63	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1c64					PGMSetBaseAddress:
.1c64	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1c67	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1c6a	60		rts				rts
.1c6b					PGMNewProgram:
.1c6b	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1c6d	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c70	85 1f		sta $1f				sta 	zTemp0+1
.1c72	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1c74	92 1e		sta ($1e)			sta 	(zTemp0)
.1c76	60		rts				rts
.1c77					PGMEndProgram:
.1c77	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1c79	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c7c	85 1f		sta $1f				sta 	zTemp0+1
.1c7e					_PGMEPLoop:
.1c7e	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c80	f0 0b		beq $1c8d			beq 	_PGMEPExit
.1c82	18		clc				clc
.1c83	65 1e		adc $1e				adc 	zTemp0
.1c85	85 1e		sta $1e				sta 	zTemp0
.1c87	90 f5		bcc $1c7e			bcc 	_PGMEPLoop
.1c89	e6 1f		inc $1f				inc 	zTemp0+1
.1c8b	80 f1		bra $1c7e			bra 	_PGMEPLoop
.1c8d					_PGMEPExit:
.1c8d	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1c8e					TOKResetElement:
.1c8e	9c 46 03	stz $0346			stz 	TOKElement
.1c91	60		rts				rts
.1c92					TOKWriteElement:
.1c92	da		phx				phx
.1c93	ae 46 03	ldx $0346			ldx 	TOKElement
.1c96	9d 47 03	sta $0347,x			sta 	TOKElementText,x
.1c99	9e 48 03	stz $0348,x			stz 	TOKElementText+1,x
.1c9c	fa		plx				plx
.1c9d	ee 46 03	inc $0346			inc 	TOKElement
.1ca0	60		rts				rts
.0346					TOKElement:
>0346							.fill 	1
.0347					TOKElementText:
>0347							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1ca1					TOKTokeniseConstant:
.1ca1	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1ca3	48		pha				pha 								; save on stack
.1ca4	29 c0		and #$c0			and 	#$C0
.1ca6	05 0d		ora $0d				ora 	IFR0+IM1
.1ca8	05 0e		ora $0e				ora 	IFR0+IM2
.1caa	f0 10		beq $1cbc			beq 	_TTCLess
.1cac	da		phx				phx
.1cad	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1caf					_TTCShiftRight:
.1caf	46 0e		lsr $0e				lsr 	IFR0+IM2
.1cb1	66 0d		ror $0d				ror 	IFR0+IM1
.1cb3	66 0c		ror $0c				ror 	IFR0+IM0
.1cb5	ca		dex				dex
.1cb6	d0 f7		bne $1caf			bne 	_TTCShiftRight
.1cb8	fa		plx				plx
.1cb9	20 a1 1c	jsr $1ca1			jsr 	TOKTokeniseConstant
.1cbc					_TTCLess:
.1cbc	68		pla				pla
.1cbd	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1cbf	20 5b 1d	jsr $1d5b			jsr 	TOKWriteA
.1cc2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1cc3					TOKTokeniseDecimals:
.1cc3	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext 					; consume the .
.1cc6	20 95 1e	jsr $1e95			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1cc9	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1ccb	20 5b 1d	jsr $1d5b			jsr 	TOKWriteA
.1cce	20 d3 1c	jsr $1cd3			jsr 	TOKOutputElementBuffer 		; then the buffer
.1cd1	18		clc				clc
.1cd2	60		rts				rts
.1cd3					TOKOutputElementBuffer:
.1cd3	ad 46 03	lda $0346			lda 	TOKElement 					; get count and write that
.1cd6	20 5b 1d	jsr $1d5b			jsr 	TOKWriteA
.1cd9	a8		tay				tay 								; put in Y
.1cda	f0 0c		beq $1ce8			beq 	_TOEExit 					; exit if empty which is okay.
.1cdc	a2 01		ldx #$01			ldx 	#1
.1cde					_TOELoop:
.1cde	bd 46 03	lda $0346,x			lda 	TOKElement,x
.1ce1	20 5b 1d	jsr $1d5b			jsr 	TOKWriteA
.1ce4	e8		inx				inx
.1ce5	88		dey				dey
.1ce6	d0 f6		bne $1cde			bne 	_TOELoop
.1ce8					_TOEExit:
.1ce8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1ce9					TOKTokenise:
.1ce9	8c 47 04	sty $0447			sty 	TOKDataSource+1 			; save source routine pointer
.1cec	8e 46 04	stx $0446			stx 	TOKDataSource
.1cef	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1cf1	2a		rol a				rol  	a
.1cf2	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1cf5	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1cf7	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1cfa					_TOKMainLoop:
.1cfa	20 67 1d	jsr $1d67			jsr 	TOKGet 						; what follows.
.1cfd	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1cff	f0 51		beq $1d52			beq 	_TOKExit
.1d01	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1d03	d0 05		bne $1d0a			bne 	_TOKElement
.1d05	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext
.1d08	80 f0		bra $1cfa			bra 	_TOKMainLoop
.1d0a					_TOKElement:
.1d0a	20 13 1f	jsr $1f13			jsr 	TOKIsDigit 					; is it 0..9
.1d0d	90 0a		bcc $1d19			bcc 	_TOKNotDigit
.1d0f	20 6c 1e	jsr $1e6c			jsr 	TOKTokeniseInteger 			; get integer
.1d12	b0 45		bcs $1d59			bcs 	_TOKFail 					; did it fail ?
.1d14	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1d17	80 e1		bra $1cfa			bra 	_TOKMainLoop
.1d19					_TOKNotDigit:
.1d19	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1d1c	d0 3b		bne $1d59			bne 	_TOKFail 					; if so, we've a problem.
.1d1e	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d20	d0 07		bne $1d29			bne 	_TOKNotHex
.1d22	20 b4 1d	jsr $1db4			jsr 	TOKTokeniseHexadecimal
.1d25	b0 32		bcs $1d59			bcs 	_TOKFail
.1d27	80 d1		bra $1cfa			bra 	_TOKMainLoop
.1d29					_TOKNotHex:
.1d29	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1d2b	d0 07		bne $1d34			bne 	_TOKNotDecimal
.1d2d	20 c3 1c	jsr $1cc3			jsr 	TOKTokeniseDecimals
.1d30	b0 27		bcs $1d59			bcs 	_TOKFail
.1d32	80 c6		bra $1cfa			bra 	_TOKMainLoop
.1d34					_TOKNotDecimal:
.1d34	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1d36	d0 07		bne $1d3f			bne 	_TOKNotString
.1d38	20 da 1e	jsr $1eda			jsr 	TOKTokeniseString
.1d3b	b0 1c		bcs $1d59			bcs 	_TOKFail
.1d3d	80 bb		bra $1cfa			bra 	_TOKMainLoop
.1d3f					_TOKNotString:
.1d3f	20 30 1f	jsr $1f30			jsr 	TOKIsAlpha 					; identifier ?
.1d42	b0 07		bcs $1d4b			bcs 	_TOKIdentifier
.1d44	20 a9 1e	jsr $1ea9			jsr 	TOKTokenisePunctuation 		; punctuation
.1d47	b0 10		bcs $1d59			bcs 	_TOKFail
.1d49	80 af		bra $1cfa			bra 	_TOKMainLoop
.1d4b					_TOKIdentifier:
.1d4b	20 ee 1d	jsr $1dee			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1d4e	b0 09		bcs $1d59			bcs 	_TOKFail
.1d50	80 a8		bra $1cfa			bra 	_TOKMainLoop
.1d52					_TOKExit:
.1d52	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1d54	20 5b 1d	jsr $1d5b			jsr 	TOKWriteA
.1d57	18		clc				clc									; return with carry set.
.1d58	60		rts				rts
.1d59					_TOKFail:
.1d59	38		sec				sec
.1d5a	60		rts				rts
.1d5b					TOKWriteA:
.1d5b	da		phx				phx
.1d5c	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1d5f	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1d62	fa		plx				plx
.1d63	ee 37 02	inc $0237			inc 	TOKLineSize
.1d66	60		rts				rts
.1d67					TOKGet:
.1d67	18		clc				clc
.1d68	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1d6b					TOKGetNext:
.1d6b	38		sec				sec
.1d6c	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.0446					TOKDataSource:
>0446							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1d6f					TOKFindToken:
.1d6f	a2 e5		ldx #$e5			ldx 	#StandardTokens & $FF 		; do this table
.1d71	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1d73	20 7e 1d	jsr $1d7e			jsr 	TOKFindTokenXY 				; find it, or not
.1d76	90 04		bcc $1d7c			bcc 	_TOKFTFail
.1d78	a2 00		ldx #$00			ldx 	#0
.1d7a	38		sec				sec
.1d7b	60		rts				rts
.1d7c					_TOKFTFail
.1d7c	18		clc				clc
.1d7d	60		rts				rts
.1d7e					TOKFindTokenXY:
.1d7e	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1d80	84 1f		sty $1f				sty 	zTemp0+1
.1d82	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1d84	8d 48 04	sta $0448			sta 	TOKCurrent
.1d87					_TOKFindLoop:
.1d87	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1d89	18		clc				clc 		 						; clear carry in case of fail
.1d8a	30 17		bmi $1da3			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1d8c	cd 46 03	cmp $0346			cmp 	TOKElement 					; compare against the element length
.1d8f	d0 13		bne $1da4			bne 	_TOKNext 					; different, try next.
.1d91	aa		tax				tax 								; number of chars to compare.
.1d92	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1d94					_TOKCompare:
.1d94	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1d96	d9 46 03	cmp $0346,y			cmp 	TOKElementText-1,y
.1d99	d0 09		bne $1da4			bne 	_TOKNext 					; different ? try next
.1d9b	c8		iny				iny 								; compare next two
.1d9c	ca		dex				dex
.1d9d	d0 f5		bne $1d94			bne 	_TOKCompare 				; until done X characters.
.1d9f	38		sec				sec
.1da0	ad 48 04	lda $0448			lda 	TOKCurrent 					; return current ID.
.1da3					_TOKExit:
.1da3	60		rts				rts
.1da4					_TOKNext:
.1da4	ee 48 04	inc $0448			inc 	TOKCurrent 					; increment token #
.1da7	38		sec				sec 								; add length+1 to ptr
.1da8	b2 1e		lda ($1e)			lda 	(zTemp0)
.1daa	65 1e		adc $1e				adc 	zTemp0
.1dac	85 1e		sta $1e				sta 	zTemp0
.1dae	90 d7		bcc $1d87			bcc 	_TOKFindLoop
.1db0	e6 1f		inc $1f				inc 	zTemp0+1
.1db2	80 d3		bra $1d87			bra 	_TOKFindLoop
.0448					TOKCurrent:
>0448							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1db4					TOKTokeniseHexadecimal:
.1db4	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext 					; consume the $
.1db7	a2 0c		ldx #$0c			ldx 	#IFR0
.1db9	20 48 27	jsr $2748			jsr 	IFloatSetZero 				; set R0 = 0
.1dbc					_TTHLoop:
.1dbc	20 67 1d	jsr $1d67			jsr 	TOKGet 						; keep getting and copying while numeric.
.1dbf	20 3d 1f	jsr $1f3d			jsr 	TOKIsHexadecimal
.1dc2	90 20		bcc $1de4			bcc 	_TTHDone
.1dc4	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1dc6	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1dc9	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1dcc	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1dcf	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.1dd2	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext
.1dd5	38		sec				sec 								; convert to decimal.
.1dd6	e9 30		sbc #$30			sbc 	#48
.1dd8	c9 0a		cmp #$0a			cmp 	#10
.1dda	90 02		bcc $1dde			bcc 	_TTHNotAlpha
.1ddc	e9 07		sbc #$07			sbc 	#7
.1dde					_TTHNotAlpha:
.1dde	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1de0	85 0c		sta $0c				sta 	IFR0+IM0
.1de2	80 d8		bra $1dbc			bra 	_TTHLoop
.1de4					_TTHDone:
.1de4	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1de6	20 5b 1d	jsr $1d5b			jsr 	TOKWriteA
.1de9	20 a1 1c	jsr $1ca1			jsr 	TOKTokeniseConstant 		; write integer out.
.1dec	18		clc				clc
.1ded	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1dee					TOKTokeniseIdentifier:
.1dee	20 8e 1c	jsr $1c8e			jsr 	TOKResetElement 			; extract an identifier
.1df1					_TOKGetIdentifier:
.1df1	20 67 1d	jsr $1d67			jsr 	TOKGet
.1df4	20 fd 1e	jsr $1efd			jsr 	TOKToUpper
.1df7	20 1f 1f	jsr $1f1f			jsr 	TOKIsIdentifierElement
.1dfa	90 08		bcc $1e04			bcc 	_TOKEndIdent
.1dfc	20 92 1c	jsr $1c92			jsr		TOKWriteElement
.1dff	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext
.1e02	80 ed		bra $1df1			bra 	_TOKGetIdentifier
.1e04					_TOKEndIdent:
.1e04	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1e06	d0 06		bne $1e0e			bne 	_TOKNotString
.1e08	20 92 1c	jsr $1c92			jsr 	TOKWriteElement 			; add it
.1e0b	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext 					; consume it
.1e0e					_TOKNotString:
.1e0e	20 67 1d	jsr $1d67			jsr 	TOKGet 						; finally check for (
.1e11	c9 28		cmp #$28			cmp 	#"("
.1e13	d0 06		bne $1e1b			bne 	_TOKNoArray
.1e15	20 92 1c	jsr $1c92			jsr 	TOKWriteElement 			; add it
.1e18	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext 					; consume it
.1e1b					_TOKNoArray:
.1e1b	20 6f 1d	jsr $1d6f			jsr 	TOKFindToken 				; find it
.1e1e	90 05		bcc $1e25			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e20	20 5b 1d	jsr $1d5b			jsr 	TOKWriteA
.1e23	18		clc				clc
.1e24	60		rts				rts
.1e25					_TOKIsVariable:
.1e25	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1e27					_TOKOutputBuffer:
.1e27	bd 47 03	lda $0347,x			lda 	TOKElementText,x 			; output it translated.
.1e2a	20 53 1e	jsr $1e53			jsr 	TOKTranslateIdentifier
.1e2d	20 5b 1d	jsr $1d5b			jsr 	TOKWriteA
.1e30	e8		inx				inx
.1e31	bd 47 03	lda $0347,x			lda 	TOKElementText,x
.1e34	20 1f 1f	jsr $1f1f			jsr 	TOKIsIdentifierElement
.1e37	b0 ee		bcs $1e27			bcs 	_TOKOutputBuffer
.1e39	a8		tay				tay 								; last char in Y
.1e3a	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1e3c	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1e3e	f0 0e		beq $1e4e			beq 	_TOKIVExit
.1e40	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1e42	d0 04		bne $1e48			bne 	_TOKIVCheckArray 			; no, check for (
.1e44	1a		inc a				inc 	a 							; token is $7D
.1e45	bc 48 03	ldy $0348,x			ldy 	TOKElementText+1,x 			; get next one.
.1e48					_TOKIVCheckArray:
.1e48	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1e4a	d0 02		bne $1e4e			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1e4c	1a		inc a				inc 	a
.1e4d	1a		inc a				inc 	a
.1e4e					_TOKIVExit:
.1e4e	20 5b 1d	jsr $1d5b			jsr 	TOKWriteA 					; ending token
.1e51	18		clc				clc
.1e52	60		rts				rts
.1e53					TOKTranslateIdentifier:
.1e53	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1e55	f0 0f		beq $1e66			beq 	_TTI64
.1e57	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1e59	f0 0e		beq $1e69			beq 	_TTI65
.1e5b	38		sec				sec
.1e5c	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1e5e	10 03		bpl $1e63			bpl 	_TTIExit
.1e60	18		clc				clc 								; map 09 onto 26-35
.1e61	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1e63					_TTIExit:
.1e63	09 40		ora #$40			ora 	#$40 						; correct range.
.1e65	60		rts				rts
.1e66	a9 64		lda #$64	_TTI64:	lda 	#$64
.1e68	60		rts				rts
.1e69	a9 65		lda #$65	_TTI65:	lda 	#$65
.1e6b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1e6c					TOKTokeniseInteger:
.1e6c	20 95 1e	jsr $1e95			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e6f	a2 47		ldx #$47			ldx 	#TOKElementText & $FF
.1e71	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1e73	ad 46 03	lda $0346			lda		TOKElement
.1e76	20 ac 25	jsr $25ac			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1e79	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1e7c	f0 12		beq $1e90			beq 	_TOKNotLineNumber
.1e7e	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1e80	d0 0c		bne $1e8e			bne 	_TOKBadLineNumeber
.1e82	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1e84	8d 38 02	sta $0238			sta 	TOKLineNumber
.1e87	a5 0d		lda $0d				lda 	IFR0+IM1
.1e89	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1e8c	18		clc				clc
.1e8d	60		rts				rts
.1e8e					_TOKBadLineNumeber:
.1e8e	38		sec				sec
.1e8f	60		rts				rts
.1e90					_TOKNotLineNumber:
.1e90	20 a1 1c	jsr $1ca1			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1e93	18		clc				clc
.1e94	60		rts				rts
.1e95					TOKExtractInteger:
.1e95	20 8e 1c	jsr $1c8e			jsr 	TOKResetElement 			; restart
.1e98					_TTILoop:
.1e98	20 67 1d	jsr $1d67			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e9b	20 13 1f	jsr $1f13			jsr 	TOKIsDigit
.1e9e	90 08		bcc $1ea8			bcc 	_TOKEIExit
.1ea0	20 92 1c	jsr $1c92			jsr 	TOKWriteElement
.1ea3	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext
.1ea6	80 f0		bra $1e98			bra 	_TTILoop
.1ea8					_TOKEIExit:
.1ea8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1ea9					TOKTokenisePunctuation:
.1ea9	20 8e 1c	jsr $1c8e			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1eac	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext
.1eaf	20 92 1c	jsr $1c92			jsr 	TOKWriteElement
.1eb2	20 67 1d	jsr $1d67			jsr 	TOKGet 						; what follows ?
.1eb5	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1eb7	f0 10		beq $1ec9			beq 	_TTPOne
.1eb9	20 27 1f	jsr $1f27			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1ebc	b0 0b		bcs $1ec9			bcs 	_TTPOne 					; these speed things up a bit.
.1ebe	20 92 1c	jsr $1c92			jsr 	TOKWriteElement 			; this is what we will search for.
.1ec1	20 6f 1d	jsr $1d6f			jsr 	TOKFindToken
.1ec4	b0 0a		bcs $1ed0			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1ec6	ce 46 03	dec $0346			dec 	TOKElement 					; make it a single character
.1ec9					_TTPOne:
.1ec9	20 6f 1d	jsr $1d6f			jsr 	TOKFindToken 				; look for one character punctuation
.1ecc	b0 07		bcs $1ed5			bcs 	_TTPOutputExit 				; we found it
.1ece	38		sec				sec 								; not recognised.
.1ecf	60		rts				rts
.1ed0					_TTPConsumeExit:
.1ed0	48		pha				pha
.1ed1	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext 					; get the 2nd char out.
.1ed4	68		pla				pla
.1ed5					_TTPOutputExit:
.1ed5	20 5b 1d	jsr $1d5b			jsr  	TOKWriteA 					; write token out
.1ed8	18		clc				clc
.1ed9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1eda					TOKTokeniseString:
.1eda	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext 					; consume the "
.1edd	20 8e 1c	jsr $1c8e			jsr 	TOKResetElement 			; start getting the string
.1ee0					_TOKTSLoop:
.1ee0	20 67 1d	jsr $1d67			jsr 	TOKGet 						; check EOL
.1ee3	c9 00		cmp #$00			cmp 	#0
.1ee5	f0 0c		beq $1ef3			beq 	_TOKTSExit
.1ee7	20 6b 1d	jsr $1d6b			jsr 	TOKGetNext 					; get and consume
.1eea	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1eec	f0 05		beq $1ef3			beq 	_TOKTSExit
.1eee	20 92 1c	jsr $1c92			jsr 	TOKWriteElement
.1ef1	80 ed		bra $1ee0			bra 	_TOKTSLoop
.1ef3					_TOKTSExit:
.1ef3	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1ef5	20 5b 1d	jsr $1d5b			jsr 	TOKWriteA
.1ef8	20 d3 1c	jsr $1cd3			jsr 	TOKOutputElementBuffer
.1efb	18		clc				clc
.1efc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1efd					TOKToUpper:
.1efd	c9 61		cmp #$61			cmp 	#"a"
.1eff	90 06		bcc $1f07			bcc 	_TTUNotLower
.1f01	c9 7b		cmp #$7b			cmp 	#"z"+1
.1f03	b0 02		bcs $1f07			bcs 	_TTUNotLower
.1f05	49 20		eor #$20			eor 	#$20
.1f07					_TTUNotLower:
.1f07	60		rts				rts
.1f08					TOKToLower:
.1f08	c9 41		cmp #$41			cmp 	#"A"
.1f0a	90 06		bcc $1f12			bcc 	_TTUNotUpper
.1f0c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f0e	b0 02		bcs $1f12			bcs 	_TTUNotUpper
.1f10	49 20		eor #$20			eor 	#$20
.1f12					_TTUNotUpper:
.1f12	60		rts				rts
.1f13					TOKIsDigit:
.1f13	c9 30		cmp #$30			cmp 	#"0"
.1f15	90 06		bcc $1f1d			bcc 	TOKFail
.1f17	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f19	b0 02		bcs $1f1d			bcs 	TOKFail
.1f1b					TOKSucceed:
.1f1b	38		sec				sec
.1f1c	60		rts				rts
.1f1d					TOKFail:
.1f1d	18		clc				clc
.1f1e	60		rts				rts
.1f1f					TOKIsIdentifierElement:
.1f1f	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f21	f0 f8		beq $1f1b			beq 	TOKSucceed
.1f23	c9 5f		cmp #$5f			cmp 	#"_"
.1f25	f0 f4		beq $1f1b			beq 	TOKSucceed 					; else fall through to alphanumeric
.1f27					TOKIsAlphaNumeric:
.1f27	20 30 1f	jsr $1f30			jsr 	TOKIsAlpha
.1f2a	b0 ef		bcs $1f1b			bcs 	TOKSucceed
.1f2c	20 13 1f	jsr $1f13			jsr 	TOKIsDigit
.1f2f	60		rts				rts
.1f30					TOKIsAlpha:
.1f30	20 fd 1e	jsr $1efd			jsr 	TOKToUpper
.1f33	c9 41		cmp #$41			cmp 	#"A"
.1f35	90 e6		bcc $1f1d			bcc 	TOKFail
.1f37	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f39	b0 e2		bcs $1f1d			bcs 	TOKFail
.1f3b	80 de		bra $1f1b			bra 	TOKSucceed
.1f3d					TOKIsHexadecimal:
.1f3d	20 13 1f	jsr $1f13			jsr		TOKIsDigit
.1f40	b0 d9		bcs $1f1b			bcs 	TOKSucceed
.1f42	20 30 1f	jsr $1f30			jsr 	TOKIsAlpha
.1f45	90 d6		bcc $1f1d			bcc 	TOKFail
.1f47	c9 47		cmp #$47			cmp 	#"F"+1
.1f49	b0 d2		bcs $1f1d			bcs 	TOKFail
.1f4b	80 ce		bra $1f1b			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.1f4d					StringConcrete:
.1f4d	5a		phy				phy 								; save position on stack
.1f4e	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.1f50	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.1f52	b0 41		bcs $1f95			bcs 	_SALengthError
.1f54	18		clc				clc 								; length of the new string
.1f55	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.1f57	90 02		bcc $1f5b			bcc 	_SAHaveLength
.1f59	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.1f5b					_SAHaveLength:
.1f5b	48		pha				pha 								; save length to be allocated for concreting.
.1f5c	38		sec				sec
.1f5d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.1f5f	6d 4a 04	adc $044a			adc 	stringMemory
.1f62	8d 4a 04	sta $044a			sta 	stringMemory
.1f65	85 22		sta $22				sta 	zTemp2 						; update storage address
.1f67	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.1f69	6d 4b 04	adc $044b			adc 	stringMemory+1
.1f6c	8d 4b 04	sta $044b			sta 	stringMemory+1
.1f6f	85 23		sta $23				sta 	zTemp2+1
.1f71	68		pla				pla 								; save length allocated in +0
.1f72	92 22		sta ($22)			sta 	(zTemp2)
.1f74	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.1f76	a0 01		ldy #$01			ldy 	#1
.1f78	91 22		sta ($22),y			sta 	(zTemp2),y
.1f7a					_SACopyNewString:
.1f7a	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.1f7c	a0 02		ldy #$02			ldy 	#2
.1f7e	91 22		sta ($22),y			sta 	(zTemp2),y
.1f80	aa		tax				tax 								; bytes to copy
.1f81	f0 0c		beq $1f8f			beq 	_SACopyExit
.1f83	a0 01		ldy #$01			ldy 	#1 							; first character from here
.1f85					_SACopyNSLoop:
.1f85	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.1f87	c8		iny				iny 								; write two on in string storage
.1f88	c8		iny				iny
.1f89	91 22		sta ($22),y			sta 	(zTemp2),y
.1f8b	88		dey				dey
.1f8c	ca		dex				dex									; until copied all the string lengths.
.1f8d	d0 f6		bne $1f85			bne 	_SACopyNSLoop
.1f8f					_SACopyExit:
.1f8f	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.1f91	a5 22		lda $22				lda 	zTemp2
.1f93	7a		ply				ply
.1f94	60		rts				rts
.1f95					_SALengthError:
.1f95	4c 89 12	jmp $1289		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.1f98					StringSystemInitialise:
.1f98	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh 			; last byte of memory
.1f9b	3a		dec a				dec 	a
.1f9c	8d 4b 04	sta $044b			sta 	stringMemory+1
.1f9f	85 1f		sta $1f				sta 	zTemp0+1
.1fa1	a9 ff		lda #$ff			lda 	#$FF
.1fa3	8d 4a 04	sta $044a			sta 	stringMemory
.1fa6	85 1e		sta $1e				sta 	zTemp0
.1fa8	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.1faa	92 1e		sta ($1e)			sta 	(zTemp0)
.1fac	60		rts				rts
.1fad					StringSpaceInitialise:
.1fad	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.1faf	8d 49 04	sta $0449			sta 	stringInitialised
.1fb2	ad 4a 04	lda $044a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.1fb5	8d 4c 04	sta $044c			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.1fb8	ad 4b 04	lda $044b			lda 	stringMemory+1
.1fbb	3a		dec a				dec 	a
.1fbc	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1fbf	60		rts				rts
.1fc0					StringTempAllocate:
.1fc0	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.1fc2	b0 2e		bcs $1ff2			bcs 	_STALength
.1fc4	2c 49 04	bit $0449			bit 	stringInitialised 			; already initialised
.1fc7	30 05		bmi $1fce			bmi 	_STAAllocate
.1fc9	48		pha				pha 								; save value to subtract.
.1fca	20 ad 1f	jsr $1fad			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.1fcd	68		pla				pla 								; restore it
.1fce					_STAAllocate:
.1fce	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.1fd0	18		clc				clc  								; deliberate allows one more
.1fd1	6d 4c 04	adc $044c			adc 	stringTempPointer 			; subtract from temp pointer
.1fd4	8d 4c 04	sta $044c			sta 	stringTempPointer
.1fd7	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.1fd9	85 26		sta $26				sta 	zsTemp 						; and zsTemp
.1fdb	ad 4d 04	lda $044d			lda 	stringTempPointer+1
.1fde	69 ff		adc #$ff			adc 	#$FF
.1fe0	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1fe3	85 27		sta $27				sta 	zsTemp+1
.1fe5	85 0d		sta $0d				sta 	IFR0+IM1
.1fe7	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.1fe9	a9 80		lda #$80			lda 	#$80
.1feb	85 0f		sta $0f				sta 	IFR0+IExp
.1fed	a9 00		lda #$00			lda 	#0 							; clear the target string
.1fef	92 26		sta ($26)			sta 	(zsTemp)
.1ff1	60		rts				rts
.1ff2					_STALength:
.1ff2	4c 89 12	jmp $1289		jmp	ErrorV_string
.1ff5					StringTempWrite:
.1ff5	5a		phy				phy
.1ff6	48		pha				pha
.1ff7	b2 26		lda ($26)			lda 	(zsTemp)
.1ff9	1a		inc a				inc 	a
.1ffa	92 26		sta ($26)			sta 	(zsTemp)
.1ffc	a8		tay				tay
.1ffd	68		pla				pla
.1ffe	91 26		sta ($26),y			sta 	(zsTemp),y
.2000	7a		ply				ply
.2001	60		rts				rts
.0026					zsTemp:
>0026							.fill 	2
.0449					stringInitialised:
>0449							.fill 	1
.044a					stringMemory:
>044a							.fill 	2
.044c					stringTempPointer:
>044c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2002					VARCreate:
.2002	5a		phy				phy
.2003	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2005	a2 00		ldx #$00			ldx 	#0
.2007	20 2c 10	jsr $102c			jsr 	AllocateMemory
.200a	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.200c	86 21		stx $21				stx 	zTemp1+1
.200e	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2010	ad 50 04	lda $0450			lda 	VARHash
.2013	91 20		sta ($20),y			sta 	(zTemp1),y
.2015	c8		iny				iny 								; put address of name into +3,+4
.2016	ad 4e 04	lda $044e			lda 	VARNameAddress
.2019	91 20		sta ($20),y			sta 	(zTemp1),y
.201b	c8		iny				iny
.201c	ad 4f 04	lda $044f			lda 	VARNameAddress+1
.201f	91 20		sta ($20),y			sta 	(zTemp1),y
.2021	ad 51 04	lda $0451			lda 	VARType
.2024	29 01		and #$01			and 	#1
.2026	f0 06		beq $202e			beq 	_CVNotString
.2028	a0 08		ldy #$08			ldy 	#5+3
.202a	a9 80		lda #$80			lda 	#$80
.202c	91 20		sta ($20),y			sta 	(zTemp1),y
.202e					_CVNotString:
.202e	ad 72 04	lda $0472			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2031	85 1e		sta $1e				sta 	zTemp0
.2033	ad 73 04	lda $0473			lda 	VARHashEntry+1
.2036	85 1f		sta $1f				sta 	zTemp0+1
.2038	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.203a	b2 1e		lda ($1e)			lda 	(zTemp0)
.203c	92 20		sta ($20)			sta 	(zTemp1)
.203e	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2040	91 20		sta ($20),y			sta 	(zTemp1),y
.2042	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.2044	92 1e		sta ($1e)			sta 	(zTemp0)
.2046	a5 21		lda $21				lda 	zTemp1+1
.2048	91 1e		sta ($1e),y			sta 	(zTemp0),y
.204a	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.204c	a6 21		ldx $21				ldx 	zTemp1+1
.204e	18		clc				clc 								; add 5 to point to the data.
.204f	69 05		adc #$05			adc 	#5
.2051	90 01		bcc $2054			bcc 	_VCNoCarry
.2053	e8		inx				inx
.2054					_VCNoCarry:
.2054	7a		ply				ply
.2055	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2056					VARFind:
.2056	5a		phy				phy
.2057	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2059	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.205b	85 21		sta $21				sta 	zTemp1+1
.205d	f0 1c		beq $207b			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.205f	b2 1e		lda ($1e)			lda 	(zTemp0)
.2061	85 20		sta $20				sta 	zTemp1
.2063					_VFLoop:
.2063	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2065	b1 20		lda ($20),y			lda 	(zTemp1),y
.2067	cd 50 04	cmp $0450			cmp 	VARHash
.206a	f0 12		beq $207e			beq 	_VFHashesMatch 				; if so, check the name.
.206c					_VFNext:
.206c	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.206e	aa		tax				tax
.206f	a0 01		ldy #$01			ldy 	#1
.2071	b1 20		lda ($20),y			lda 	(zTemp1),y
.2073	85 21		sta $21				sta 	zTemp1+1
.2075	86 20		stx $20				stx 	zTemp1
.2077	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2079	d0 e8		bne $2063			bne 	_VFLoop
.207b					_VFExitFail:
.207b	7a		ply				ply
.207c	18		clc				clc
.207d	60		rts				rts
.207e					_VFHashesMatch:
.207e	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2080	b1 20		lda ($20),y			lda 	(zTemp1),y
.2082	85 22		sta $22				sta 	zTemp2
.2084	c8		iny				iny
.2085	b1 20		lda ($20),y			lda 	(zTemp1),y
.2087	85 23		sta $23				sta 	zTemp2+1
.2089	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.208b					_VFNameCompLoop:
.208b	c8		iny				iny 								; char at a time
.208c	b9 52 04	lda $0452,y			lda 	VARBuffer,y
.208f	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.2091	d0 d9		bne $206c			bne 	_VFNext						; next entry if different.
.2093	c9 7c		cmp #$7c			cmp 	#$7C
.2095	90 f4		bcc $208b			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2097	18		clc				clc
.2098	a5 20		lda $20				lda 	zTemp1
.209a	a6 21		ldx $21				ldx 	zTemp1+1
.209c	69 05		adc #$05			adc 	#5
.209e	90 01		bcc $20a1			bcc 	_VFNNoCarry
.20a0	e8		inx				inx
.20a1					_VFNNoCarry:
.20a1	7a		ply				ply
.20a2	38		sec				sec
.20a3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.20a4					VARGetInfo:
.20a4	98		tya				tya 								; calculate the address of the identifier start.
.20a5	18		clc				clc
.20a6	65 1c		adc $1c				adc 	codePtr
.20a8	8d 4e 04	sta $044e			sta 	VARNameAddress
.20ab	a5 1d		lda $1d				lda 	codePtr+1
.20ad	69 00		adc #$00			adc 	#0
.20af	8d 4f 04	sta $044f			sta 	VARNameAddress+1
.20b2	9c 50 04	stz $0450			stz 	VARHash
.20b5	a2 00		ldx #$00			ldx 	#0
.20b7					_VARCopyName:
.20b7	18		clc				clc 								; update the sum hash.
.20b8	ad 50 04	lda $0450			lda 	VARHash
.20bb	71 1c		adc ($1c),y			adc 	(codePtr),y
.20bd	8d 50 04	sta $0450			sta 	VARHash
.20c0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.20c2	c8		iny				iny
.20c3	9d 52 04	sta $0452,x			sta 	VARBuffer,x
.20c6	e8		inx				inx
.20c7	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.20c9	90 ec		bcc $20b7			bcc 	_VARCopyName
.20cb	8d 51 04	sta $0451			sta 	VARType 					; save type byte
.20ce	29 03		and #$03			and 	#3 							; type is 0-3
.20d0	0a		asl a				asl 	a
.20d1	0a		asl a				asl 	a
.20d2	85 1e		sta $1e				sta 	zTemp0
.20d4	ad 50 04	lda $0450			lda 	VARHash 					; force into range of hash entries per type.
.20d7	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.20d9	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.20db	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.20dc	69 74		adc #$74			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.20de	85 1e		sta $1e				sta 	zTemp0
.20e0	8d 72 04	sta $0472			sta 	VARHashEntry
.20e3	a9 04		lda #$04			lda 	#VARHashTables >> 8
.20e5	69 00		adc #$00			adc 	#0
.20e7	85 1f		sta $1f				sta 	zTemp0+1
.20e9	8d 73 04	sta $0473			sta 	VARHashEntry+1
.20ec	60		rts				rts
.20ed					VARClearHashTables:
.20ed	a2 00		ldx #$00			ldx 	#0
.20ef					_VCHRLoop:
.20ef	a9 00		lda #$00			lda 	#0
.20f1	9d 74 04	sta $0474,x			sta 	VARHashTables,x
.20f4	e8		inx				inx
.20f5	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.20f7	d0 f6		bne $20ef			bne 	_VCHRLoop
.20f9	60		rts				rts
.044e					VARNameAddress:
>044e							.fill 	2
.0450					VARHash:
>0450							.fill 	1
.0451					VARType:
>0451							.fill 	1
.0452					VARBuffer:
>0452							.fill 	32
.0472					VARHashEntry:
>0472							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0474					VARHashTables:
>0474							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.20fa					VARCheckSimple:
.20fa	aa		tax				tax 								; save in X
.20fb	b1 1c		lda ($1c),y			lda 	(codePtr),y
.20fd	c9 7c		cmp #$7c			cmp 	#$7C
.20ff	d0 15		bne $2116			bne 	_VCSComplex
.2101	c8		iny				iny 								; consume the second byte, the type.
.2102	8a		txa				txa  								; character (40-7F) x 4
.2103	0a		asl a				asl 	a
.2104	0a		asl a				asl  	a
.2105	18		clc				clc
.2106	69 94		adc #$94			adc 	#FastVariables & $FF
.2108	85 0c		sta $0c				sta 	IFR0+IM0
.210a	a9 04		lda #$04			lda 	#FastVariables >> 8
.210c	69 00		adc #$00			adc 	#0
.210e	85 0d		sta $0d				sta 	IFR0+IM1
.2110	64 0e		stz $0e				stz 	IFR0+IM2
.2112	64 0f		stz $0f				stz 	IFR0+IExp
.2114	38		sec				sec 								; it's a reference
.2115	60		rts				rts
.2116					_VCSComplex:
.2116	88		dey				dey	 								; extract information.
.2117	20 a4 20	jsr $20a4			jsr 	VARGetInfo
.211a	20 56 20	jsr $2056			jsr 	VARFind 					; search for variable
.211d	b0 03		bcs $2122			bcs 	_VCSHaveVariable
.211f	20 02 20	jsr $2002			jsr 	VARCreate 					; create variable
.2122					_VCSHaveVariable:
.2122	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.2124	85 0c		sta $0c				sta 	IFR0+IM0
.2126	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.2128	ad 51 04	lda $0451			lda 	VARType 					; number/string bit into carry
.212b	6a		ror a				ror 	a
.212c	a9 00		lda #$00			lda 	#0
.212e	6a		ror a				ror 	a 							; now $00 or $80
.212f	85 0f		sta $0f				sta 	IFR0+IExp
.2131	38		sec				sec 								; it's a reference
.2132	60		rts				rts
.0494					FastVariables:
>0494							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.2133					IFInitialise:
.2133	9c 04 05	stz $0504			stz 	IFStackIndex
.2136	60		rts				rts
.2137					IFloatSubtract:
.2137	da		phx				phx
.2138	a2 0c		ldx #$0c			ldx 	#IFR0
.213a	20 53 27	jsr $2753			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.213d	fa		plx				plx
.213e					IFloatAdd:
.213e	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2140	05 0f		ora $0f				ora 	IFR0+IExp
.2142	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2144	d0 4e		bne $2194			bne 	_IFloatAddDecimals 			; decimal version.
.2146					_IFAddSubMantissa:
.2146	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2148	45 0f		eor $0f				eor 	IFR0+IExp
.214a	29 40		and #$40			and 	#IFSign
.214c	d0 21		bne $216f			bne 	_IFloatSubMantissa
.214e	18		clc				clc 								; do the actual addition
.214f	a5 0c		lda $0c			lda 	IFR0+IM0
.2151	75 00		adc $00,x		adc 		IM0,x
.2153	85 0c		sta $0c			sta 	IFR0+IM0
.2155	a5 0d		lda $0d			lda 	IFR0+IM1
.2157	75 01		adc $01,x		adc 		IM1,x
.2159	85 0d		sta $0d			sta 	IFR0+IM1
.215b	a5 0e		lda $0e			lda 	IFR0+IM2
.215d	75 02		adc $02,x		adc 		IM2,x
.215f	85 0e		sta $0e			sta 	IFR0+IM2
.2161	10 29		bpl $218c			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2163	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.2165	20 77 27	jsr $2777			jsr 	IFloatShiftRight
.2168	20 a1 27	jsr $27a1			jsr 	IFloatIncExponent
.216b	d0 1f		bne $218c			bne 	_IFloatAddExit
.216d	38		sec				sec 								; overflowed numerically.
.216e	60		rts				rts
.216f					_IFloatSubMantissa:
.216f	38		sec				sec 								; do the subtraction R0-Rx
.2170	a5 0c		lda $0c			lda 	IFR0+IM0
.2172	f5 00		sbc $00,x		sbc 		IM0,x
.2174	85 0c		sta $0c			sta 	IFR0+IM0
.2176	a5 0d		lda $0d			lda 	IFR0+IM1
.2178	f5 01		sbc $01,x		sbc 		IM1,x
.217a	85 0d		sta $0d			sta 	IFR0+IM1
.217c	a5 0e		lda $0e			lda 	IFR0+IM2
.217e	f5 02		sbc $02,x		sbc 		IM2,x
.2180	85 0e		sta $0e			sta 	IFR0+IM2
.2182	b0 08		bcs $218c			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2184	a2 0c		ldx #$0c			ldx 	#IFR0
.2186	20 5b 27	jsr $275b			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2189	20 53 27	jsr $2753			jsr 	IFloatNegate 				; negate
.218c					_IFloatAddExit:
.218c	18		clc				clc
.218d	60		rts				rts
.218e					_IFloatZeroAdd:
.218e	fa		plx				plx 								; return this value in R0
.218f	20 d9 26	jsr $26d9			jsr 	IFloatCopyFromRegister
.2192	18		clc				clc
.2193	60		rts				rts
.2194					_IFloatAddDecimals:
.2194	20 41 27	jsr $2741			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2197	f0 f3		beq $218c			beq 	_IFloatAddExit
.2199	20 7f 27	jsr $277f			jsr 	IFloatNormalise 			; normalise RX
.219c	da		phx				phx 								; normalise R0
.219d	a2 0c		ldx #$0c			ldx 	#IFR0
.219f	20 41 27	jsr $2741			jsr 	IFloatCheckZero
.21a2	f0 ea		beq $218e			beq 	_IFloatZeroAdd
.21a4	20 7f 27	jsr $277f			jsr 	IFloatNormalise
.21a7	fa		plx				plx
.21a8	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.21aa	29 3f		and #$3f			and 	#IFXMask
.21ac	38		sec				sec
.21ad	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.21af	85 0a		sta $0a				sta 	iTemp0
.21b1	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.21b3	29 3f		and #$3f			and 	#IFXMask
.21b5	38		sec				sec
.21b6	e9 20		sbc #$20			sbc 	#$20
.21b8	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.21ba	b0 02		bcs $21be			bcs 	_IFloatHaveLarger
.21bc	a5 0a		lda $0a				lda 	iTemp0
.21be					_IFloatHaveLarger:
.21be	18		clc				clc 								; get the actual one back.
.21bf	69 20		adc #$20			adc 	#$20 						; shift both to that.
.21c1	20 ce 21	jsr $21ce			jsr 	_IFShiftXToA
.21c4	da		phx				phx
.21c5	a2 0c		ldx #$0c			ldx 	#IFR0
.21c7	20 ce 21	jsr $21ce			jsr 	_IFShiftXToA
.21ca	fa		plx				plx
.21cb	4c 46 21	jmp $2146			jmp 	_IFAddSubMantissa 			; do the adding bit.
.21ce					_IFShiftXToA:
.21ce	8d fc 04	sta $04fc			sta 	IFTarget
.21d1	20 41 27	jsr $2741			jsr 	IFloatCheckZero 			; check adding zero ?
.21d4	f0 11		beq $21e7			beq 	_IFSXExit
.21d6					_IFSXLoop:
.21d6	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.21d8	29 3f		and #$3f			and 	#IFXMask
.21da	cd fc 04	cmp $04fc			cmp 	IFTarget
.21dd	f0 08		beq $21e7			beq 	_IFSXExit
.21df	20 77 27	jsr $2777			jsr 	IFloatShiftRight
.21e2	20 a1 27	jsr $27a1			jsr 	IFloatIncExponent
.21e5	80 ef		bra $21d6			bra 	_IFSXLoop
.21e7					_IFSXExit:
.21e7	60		rts				rts
.04fc					IFTarget:
>04fc							.fill 	1
.21e8					IFloatMultiply:
.21e8	8e fc 04	stx $04fc			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.21eb	20 a3 22	jsr $22a3			jsr 	IFCalculateNewSign
.21ee	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.21f0	05 0f		ora $0f				ora 	IFR0+IExp
.21f2	29 3f		and #$3f			and 	#IFXMask
.21f4	15 01		ora $01,x			ora 	IM1,x
.21f6	05 0d		ora $0d				ora 	IFR0+IM1
.21f8	15 02		ora $02,x			ora 	IM2,x
.21fa	05 0e		ora $0e				ora 	IFR0+IM2
.21fc	d0 0a		bne $2208			bne 	_IFMStandard
.21fe	20 24 27	jsr $2724			jsr 	IFloatMultiply8BitRx
.2201	ad fe 04	lda $04fe			lda 	IFNewSign
.2204	85 0f		sta $0f				sta 	IFR0+IExp
.2206	18		clc				clc
.2207	60		rts				rts
.2208					_IFMStandard:
.2208	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.220a	20 9a 22	jsr $229a			jsr 	IFMSignExtend
.220d	8d fd 04	sta $04fd			sta 	IFNewExponent
.2210	a5 0f		lda $0f				lda 	IFR0+IExp
.2212	20 9a 22	jsr $229a			jsr 	IFMSignExtend
.2215	18		clc				clc
.2216	6d fd 04	adc $04fd			adc 	IFNewExponent
.2219	8d fd 04	sta $04fd			sta 	IFNewExponent
.221c	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.221e	20 ea 26	jsr $26ea			jsr 	IFloatCopyToRegister
.2221	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.2223	20 48 27	jsr $2748			jsr 	IFloatSetZero
.2226					_IFMLoop:
.2226	a2 18		ldx #$18			ldx 	#IFRTemp
.2228	20 41 27	jsr $2741			jsr 	IFloatCheckZero
.222b	f0 3a		beq $2267			beq 	_IFMExit
.222d	ae fc 04	ldx $04fc			ldx 	IFTarget 					; look at adder MSB
.2230	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2232	10 03		bpl $2237			bpl	 	_IFMTargetOkay
.2234	20 8b 22	jsr $228b			jsr 	_IFMShiftAll
.2237					_IFMTargetOkay:
.2237	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2239	29 01		and #$01			and 	#1
.223b	f0 16		beq $2253			beq 	_IFMNoAdd
.223d	ae fc 04	ldx $04fc			ldx 	IFTarget 					; add adder
.2240	18		clc				clc
.2241	a5 0c		lda $0c			lda 	IFR0+IM0
.2243	75 00		adc $00,x		adc 		IM0,x
.2245	85 0c		sta $0c			sta 	IFR0+IM0
.2247	a5 0d		lda $0d			lda 	IFR0+IM1
.2249	75 01		adc $01,x		adc 		IM1,x
.224b	85 0d		sta $0d			sta 	IFR0+IM1
.224d	a5 0e		lda $0e			lda 	IFR0+IM2
.224f	75 02		adc $02,x		adc 		IM2,x
.2251	85 0e		sta $0e			sta 	IFR0+IM2
.2253					_IFMNoAdd:
.2253	a5 0e		lda $0e				lda 	IFR0+IM2
.2255	10 03		bpl $225a			bpl 	_IFMResultOkay
.2257	20 8b 22	jsr $228b			jsr 	_IFMShiftAll
.225a					_IFMResultOkay:
.225a	a2 18		ldx #$18			ldx 	#IFRTemp
.225c	20 77 27	jsr $2777			jsr 	IFloatShiftRight
.225f	ae fc 04	ldx $04fc			ldx 	IFTarget
.2262	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.2265	80 bf		bra $2226			bra 	_IFMLoop
.2267					_IFMExit:
.2267	ad fd 04	lda $04fd			lda 	IFNewExponent 				; validate new exponent.
.226a	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.226c	90 0f		bcc $227d			bcc 	_IFMOkay
.226e	c9 e0		cmp #$e0			cmp 	#$E0
.2270	b0 0b		bcs $227d			bcs 	_IFMOkay
.2272	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2274	f0 13		beq $2289			beq 	_IFMError
.2276	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.2278	20 48 27	jsr $2748			jsr 	IFloatSetZero
.227b	18		clc				clc
.227c	60		rts				rts
.227d					_IFMOkay:
.227d	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.227f	0d fe 04	ora $04fe			ora 	IFNewSign
.2282	85 0f		sta $0f				sta 	IFR0+IExp
.2284	18		clc				clc
.2285	60		rts				rts
.2286	4c ff ff	jmp $ffff			jmp 	$FFFF
.2289					_IFMError:
.2289	38		sec				sec
.228a	60		rts				rts
.228b					_IFMShiftAll:
.228b	a2 0c		ldx #$0c			ldx 	#IFR0
.228d	20 77 27	jsr $2777			jsr 	IFloatShiftRight
.2290	ae fc 04	ldx $04fc			ldx 	IFTarget
.2293	20 77 27	jsr $2777			jsr 	IFloatShiftRight
.2296	ee fd 04	inc $04fd			inc 	IFNewExponent
.2299	60		rts				rts
.229a					IFMSignExtend:
.229a	29 3f		and #$3f			and 	#IFXMask
.229c	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.229e	90 02		bcc $22a2			bcc 	_IFMNoSXX
.22a0	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.22a2					_IFMNoSXX:
.22a2	60		rts				rts
.22a3					IFCalculateNewSign:
.22a3	b5 03		lda $03,x			lda 	IExp,x
.22a5	45 0f		eor $0f				eor 	IFR0+IExp
.22a7	29 40		and #$40			and 	#IFSign
.22a9	8d fe 04	sta $04fe			sta 	IFNewSign
.22ac	60		rts				rts
.04fd					IFNewExponent:
>04fd							.fill 	1
.04fe					IFNewSign:
>04fe							.fill 	1
.22ad					IFloatDivideInteger:
.22ad	20 c6 22	jsr $22c6			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.22b0	b0 06		bcs $22b8			bcs 	_IFDIExit
.22b2	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.22b4	20 d9 26	jsr $26d9			jsr 	IFloatCopyFromRegister
.22b7	18		clc				clc
.22b8					_IFDIExit:
.22b8	60		rts				rts
.22b9					IFloatModulusInteger:
.22b9	20 c6 22	jsr $22c6			jsr 	IFloatDivideIntegerCommon
.22bc	b0 07		bcs $22c5			bcs 	_IFMIExit
.22be	ae fc 04	ldx $04fc			ldx 	IFTarget
.22c1	20 d9 26	jsr $26d9			jsr 	IFloatCopyFromRegister
.22c4	18		clc				clc
.22c5					_IFMIExit:
.22c5	60		rts				rts
.22c6					IFloatDivideIntegerCommon:
.22c6	8e fc 04	stx $04fc			stx 	IFTarget  					; this is s1, s0 = R0
.22c9	20 a3 22	jsr $22a3			jsr 	IFCalculateNewSign 			; calculate sign of result
.22cc	20 f4 22	jsr $22f4			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.22cf	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.22d1	20 41 27	jsr $2741			jsr 	IFloatCheckZero
.22d4	f0 1c		beq $22f2			beq 	_IFDIDivZero
.22d6	ae fc 04	ldx $04fc			ldx 	IFTarget 					; zero Rx (S1)
.22d9	20 48 27	jsr $2748			jsr 	IFloatSetZero
.22dc	5a		phy				phy
.22dd	a0 18		ldy #$18			ldy 	#24
.22df					_IFDILoop:
.22df	20 05 23	jsr $2305			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.22e2	20 11 23	jsr $2311			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.22e5	88		dey				dey
.22e6	d0 f7		bne $22df			bne 	_IFDILoop 					; do it 24 times
.22e8	7a		ply				ply
.22e9	ad fe 04	lda $04fe			lda 	IFNewSign 					; set sign of result.
.22ec	29 40		and #$40			and 	#IFSign
.22ee	85 1b		sta $1b				sta 	IFRTemp+IExp
.22f0	18		clc				clc 								; is okay.
.22f1	60		rts				rts
.22f2					_IFDIDivZero:
.22f2	38		sec				sec
.22f3	60		rts				rts
.22f4					IFDCopyRXToRTemp:
.22f4	b5 00		lda $00,x			lda 	IM0,x
.22f6	85 18		sta $18				sta 	IFRTemp+IM0
.22f8	b5 01		lda $01,x			lda 	IM1,x
.22fa	85 19		sta $19				sta 	IFRTemp+IM1
.22fc	b5 02		lda $02,x			lda 	IM2,x
.22fe	85 1a		sta $1a				sta 	IFRTemp+IM2
.2300	b5 03		lda $03,x			lda 	IExp,x
.2302	85 1b		sta $1b				sta 	IFRTemp+IExp
.2304	60		rts				rts
.2305					IFDShiftSTempS1Left:
.2305	a2 18		ldx #$18			ldx 	#IFRTemp
.2307	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft
.230a	ae fc 04	ldx $04fc			ldx 	IFTarget
.230d	20 70 27	jsr $2770			jsr 	IFloatRotateLeft
.2310	60		rts				rts
.2311					IFDTrySubtract:
.2311	ae fc 04	ldx $04fc			ldx 	IFTarget 					; s1 = Rx
.2314	38		sec				sec 								; subtract, saving the results on the stack.
.2315	b5 00		lda $00,x			lda 	IM0,x
.2317	e5 0c		sbc $0c				sbc 	IFR0+IM0
.2319	48		pha				pha
.231a	b5 01		lda $01,x			lda 	IM1,x
.231c	e5 0d		sbc $0d				sbc 	IFR0+IM1
.231e	48		pha				pha
.231f	b5 02		lda $02,x			lda 	IM2,x
.2321	e5 0e		sbc $0e				sbc 	IFR0+IM2
.2323	b0 03		bcs $2328			bcs 	_IFDCanSubtract
.2325	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2326	68		pla				pla
.2327	60		rts				rts
.2328					_IFDCanSubtract:
.2328	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.232a	68		pla				pla
.232b	95 01		sta $01,x			sta 	IM1,x
.232d	68		pla				pla
.232e	95 00		sta $00,x			sta 	IM0,x
.2330	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.2332	d0 06		bne $233a			bne 	_IFDCSExit
.2334	e6 19		inc $19				inc 	IFRTemp+IM1
.2336	d0 02		bne $233a			bne 	_IFDCSExit
.2338	e6 1a		inc $1a				inc 	IFRTemp+IM2
.233a					_IFDCSExit:
.233a	60		rts				rts
.233b					IFloatBitwiseAnd:
.233b	5a		phy				phy
.233c	20 80 23	jsr $2380			jsr 	IFPreProcessBitwise 		; set up everything.
.233f	d0 0f		bne $2350			bne 	_IFBAExit
.2341					_IFBALoop:
.2341	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2344	35 00		and $00,x			and 	IM0,x
.2346	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2349	e8		inx				inx
.234a	c8		iny				iny
.234b	c0 03		cpy #$03			cpy 	#3
.234d	d0 f2		bne $2341			bne 	_IFBALoop
.234f	18		clc				clc
.2350					_IFBAExit:
.2350	7a		ply				ply
.2351	60		rts				rts
.2352					IFloatBitwiseOr:
.2352	5a		phy				phy
.2353	20 80 23	jsr $2380			jsr 	IFPreProcessBitwise 		; set up everything.
.2356	d0 0f		bne $2367			bne 	_IFBAExit
.2358					_IFBALoop:
.2358	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.235b	15 00		ora $00,x			ora 	IM0,x
.235d	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2360	e8		inx				inx
.2361	c8		iny				iny
.2362	c0 03		cpy #$03			cpy 	#3
.2364	d0 f2		bne $2358			bne 	_IFBALoop
.2366	18		clc				clc
.2367					_IFBAExit:
.2367	7a		ply				ply
.2368	60		rts				rts
.2369					IFloatBitwiseXor:
.2369	5a		phy				phy
.236a	20 80 23	jsr $2380			jsr 	IFPreProcessBitwise 		; set up everything.
.236d	d0 0f		bne $237e			bne 	_IFBAExit
.236f					_IFBALoop:
.236f	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2372	55 00		eor $00,x			eor 	IM0,x
.2374	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2377	e8		inx				inx
.2378	c8		iny				iny
.2379	c0 03		cpy #$03			cpy 	#3
.237b	d0 f2		bne $236f			bne 	_IFBALoop
.237d	18		clc				clc
.237e					_IFBAExit:
.237e	7a		ply				ply
.237f	60		rts				rts
.2380					IFPreProcessBitwise:
.2380	a0 00		ldy #$00			ldy 	#0 							; set index.
.2382	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.2384	15 03		ora $03,x			ora 	IExp,x
.2386	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2388	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.238a	38		sec				sec 								; carry set just in cases.
.238b	60		rts				rts
.238c					IFloatAbsoluteR0:
.238c	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.238e	29 bf		and #$bf			and 	#IFSign ^ 255
.2390	85 0f		sta $0f				sta 	IFR0+IExp
.2392	18		clc				clc
.2393	60		rts				rts
.2394					IFloatSquareRootR0:
.2394	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.2396	20 41 27	jsr $2741			jsr 	IFloatCheckZero
.2399	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.239b	29 40		and #$40			and 	#IFSign
.239d	d0 2f		bne $23ce			bne 	_IFSRFail
.239f	20 7f 27	jsr $277f			jsr 	IFloatNormalise 			; it will work better !
.23a2	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.23a4	20 ea 26	jsr $26ea			jsr 	IFloatCopyToRegister
.23a7	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.23a9	20 9a 22	jsr $229a			jsr 	IFMSignExtend 				; sign extended version of the exponent
.23ac	18		clc				clc
.23ad	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.23af	85 0f		sta $0f				sta 	IFR0+IExp
.23b1	4a		lsr a				lsr 	a 							; which we can halve.
.23b2	38		sec				sec 								; convert back
.23b3	e9 17		sbc #$17			sbc 	#23
.23b5	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.23b7	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.23b9	20 d0 23	jsr $23d0			jsr 	_IFSRNewton
.23bc	20 d0 23	jsr $23d0			jsr 	_IFSRNewton
.23bf	20 d0 23	jsr $23d0			jsr 	_IFSRNewton
.23c2	20 d0 23	jsr $23d0			jsr 	_IFSRNewton
.23c5	18		clc				clc
.23c6	60		rts				rts
.23c7					_IFSRZero:
.23c7	a2 0c		ldx #$0c			ldx 	#IFR0
.23c9	20 48 27	jsr $2748			jsr 	IFloatSetZero
.23cc	18		clc				clc
.23cd	60		rts				rts
.23ce					_IFSRFail:
.23ce	38		sec				sec
.23cf	60		rts				rts
.23d0					_IFSRNewton:
.23d0	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.23d2	20 97 26	jsr $2697			jsr 	IFloatPushRx
.23d5	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.23d7	20 97 26	jsr $2697			jsr 	IFloatPushRx
.23da	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.23dc	20 6b 24	jsr $246b			jsr 	IFloatDivideFloat
.23df	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.23e1	20 b8 26	jsr $26b8			jsr 	IFloatPullRx
.23e4	20 3e 21	jsr $213e			jsr 	IFloatAdd 					; now guess + original/guess
.23e7	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.23e9	20 77 27	jsr $2777			jsr 	IFloatShiftRight
.23ec	a2 10		ldx #$10			ldx 	#IFR1
.23ee	20 b8 26	jsr $26b8			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.23f1	60		rts				rts
.23f2					IFloatFractionalR0:
.23f2	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.23f4	29 3f		and #$3f			and 	#IFXMask
.23f6	f0 17		beq $240f			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.23f8	20 8c 23	jsr $238c			jsr 	IFloatAbsoluteR0 			; absolute value R9
.23fb	a2 0c		ldx #$0c			ldx 	#IFR0
.23fd	20 7f 27	jsr $277f			jsr 	IFloatNormalise 			; normalise R0
.2400	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.2402	20 ea 26	jsr $26ea			jsr 	IFloatCopyToRegister
.2405	20 48 24	jsr $2448			jsr 	IFloatIntegerR0 			; take integer part of R0
.2408	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.240a	20 37 21	jsr $2137			jsr 	IFloatSubtract
.240d	80 05		bra $2414			bra 	_FIPExit
.240f					_FIPZero:
.240f	a2 0c		ldx #$0c			ldx 	#IFR0
.2411	20 48 27	jsr $2748			jsr 	IFloatSetZero
.2414					_FIPExit:
.2414	18		clc				clc
.2415	60		rts				rts
.2416					IFloatCompare:
.2416	20 37 21	jsr $2137			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2419	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.241b	05 0f		ora $0f				ora 	IFR0+IExp
.241d	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.241f	29 3f		and #$3f			and 	#IFXMask
.2421	d0 19		bne $243c			bne 	_IFCNonInteger
.2423	20 41 27	jsr $2741			jsr 	IFloatCheckZero 			; check if zero
.2426	f0 0f		beq $2437			beq 	_IFCZero
.2428					_IFCReturnSign:
.2428	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.242a	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.242c	48		pha				pha
.242d	a9 01		lda #$01			lda 	#1
.242f	20 4a 27	jsr $274a			jsr 	IFloatSetByte 				; return to +1
.2432	68		pla				pla 								; sign bit back
.2433	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.2435	18		clc				clc
.2436	60		rts				rts
.2437					_IFCZero:
.2437	20 48 27	jsr $2748			jsr 	IFloatSetZero
.243a	18		clc				clc
.243b	60		rts				rts
.243c					_IFCNonInteger:
.243c	a5 0c		lda $0c				lda 	IFR0+IM0
.243e	29 00		and #$00			and		#$00
.2440	05 0d		ora $0d				ora 	IFR0+IM1
.2442	05 0e		ora $0e				ora 	IFR0+IM2
.2444	f0 f1		beq $2437			beq 	_IFCZero 					; near enough !
.2446	80 e0		bra $2428			bra 	_IFCReturnSign 				; return the sign of the difference.
.2448					IFloatIntegerR0:
.2448	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.244a	29 3f		and #$3f			and 	#IFXMask
.244c	f0 1b		beq $2469			beq 	_FIPExit 					; if so do nothing
.244e	a2 0c		ldx #$0c			ldx 	#IFR0
.2450	20 7f 27	jsr $277f			jsr 	IFloatNormalise 			; normalise
.2453	20 41 27	jsr $2741			jsr 	IFloatCheckZero 			; is it zero ?
.2456	f0 0e		beq $2466			beq 	_FIPZero 					; if so return zero.
.2458					_FIPShift:
.2458	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.245a	29 20		and #$20			and 	#$20 						; still -ve
.245c	f0 0b		beq $2469			beq 	_FIPExit
.245e	20 77 27	jsr $2777			jsr 	IFloatShiftRight 			; shift mantissa right
.2461	20 a1 27	jsr $27a1			jsr 	IFloatIncExponent 			; bump exponent
.2464	80 f2		bra $2458			bra 	_FIPShift
.2466					_FIPZero:
.2466	20 48 27	jsr $2748			jsr 	IFloatSetZero
.2469					_FIPExit:
.2469	18		clc				clc
.246a	60		rts				rts
.246b					IFloatDivideFloat:
.246b	8e fc 04	stx $04fc			stx 	IFTarget  					; this is s1, s0 = R0
.246e	20 a3 22	jsr $22a3			jsr 	IFCalculateNewSign 			; calculate sign of result
.2471	20 7f 27	jsr $277f			jsr 	IFloatNormalise 			; normalise RX
.2474	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.2476	20 7f 27	jsr $277f			jsr 	IFloatNormalise
.2479	20 41 27	jsr $2741			jsr 	IFloatCheckZero
.247c	f0 56		beq $24d4			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.247e	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.2480	20 9a 22	jsr $229a			jsr 	IFMSignExtend
.2483	8d fd 04	sta $04fd			sta 	IFNewExponent
.2486	ae fc 04	ldx $04fc			ldx 	IFTarget 					; calculate s1.exponent
.2489	b5 03		lda $03,x			lda 	IExp,x
.248b	20 9a 22	jsr $229a			jsr 	IFMSignExtend
.248e	38		sec				sec
.248f	ed fd 04	sbc $04fd			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2492	38		sec				sec
.2493	e9 17		sbc #$17			sbc 	#23
.2495	8d fd 04	sta $04fd			sta 	IFNewExponent
.2498	20 d6 24	jsr $24d6			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.249b	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.249d	10 08		bpl $24a7			bpl 	_IFDFNoShiftResult
.249f	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.24a1	20 77 27	jsr $2777			jsr 	IFloatShiftRight
.24a4	ee fd 04	inc $04fd			inc 	IFNewExponent
.24a7					_IFDFNoShiftResult:
.24a7	ad fd 04	lda $04fd			lda 	IFNewExponent 				; underflow/overflow check.
.24aa	30 06		bmi $24b2			bmi 	_IFDFCheckUnderflow
.24ac	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.24ae	b0 24		bcs $24d4			bcs 	_IFDFDivZero
.24b0	80 11		bra $24c3			bra		_IFDFExit
.24b2					_IFDFCheckUnderflow:
.24b2	ad fd 04	lda $04fd			lda 	IFNewExponent 				; shift into a legal exponent.
.24b5	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.24b7	b0 0a		bcs $24c3			bcs 	_IFDFExit
.24b9	ee fd 04	inc $04fd			inc 	IFNewExponent
.24bc	a2 18		ldx #$18			ldx 	#IFRTemp
.24be	20 77 27	jsr $2777			jsr 	IFloatShiftRight
.24c1	80 ef		bra $24b2			bra 	_IFDFCheckUnderflow
.24c3					_IFDFExit:
.24c3	ad fd 04	lda $04fd			lda 	IFNewExponent 				; combine exponent and sign.
.24c6	29 3f		and #$3f			and 	#IFXMask
.24c8	0d fe 04	ora $04fe			ora 	IFNewSign
.24cb	85 1b		sta $1b				sta 	IFRTemp+IExp
.24cd	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.24cf	20 d9 26	jsr $26d9			jsr 	IFloatCopyFromRegister
.24d2	18		clc				clc
.24d3	60		rts				rts
.24d4					_IFDFDivZero:
.24d4	38		sec				sec
.24d5	60		rts				rts
.24d6					IFloatDivideSupport:
.24d6	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.24d8	20 48 27	jsr $2748			jsr 	IFloatSetZero
.24db	5a		phy				phy 								; main division loop x 23
.24dc	a0 17		ldy #$17			ldy 	#23
.24de					_IFDSLoop:
.24de	20 11 23	jsr $2311			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.24e1	20 05 23	jsr $2305			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.24e4	88		dey				dey
.24e5	d0 f7		bne $24de			bne 	_IFDSLoop 					; do it 24 times
.24e7	7a		ply				ply
.24e8	60		rts				rts
.24e9					IFloatIntegerToStringR0:
.24e9	8d ff 04	sta $04ff			sta 	IFBase 						; save base to use.
.24ec	20 c9 27	jsr $27c9			jsr 	IFloatBufferReset			; empty buffer
.24ef	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.24f1	29 3f		and #$3f			and 	#IFXMask
.24f3	d0 1e		bne $2513			bne 	_IFIFail
.24f5	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.24f7	20 41 27	jsr $2741			jsr 	IFloatCheckZero
.24fa	f0 0e		beq $250a			beq 	_IFINotNegative
.24fc	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.24fe	29 40		and #$40			and 	#IFSign
.2500	f0 08		beq $250a			beq 	_IFINotNegative
.2502	a9 2d		lda #$2d			lda 	#"-"						; output -
.2504	20 d8 27	jsr $27d8			jsr 	IFloatBufferWrite
.2507	20 53 27	jsr $2753			jsr 	IFloatNegate 				; tidy up !
.250a					_IFINotNegative:
.250a	20 15 25	jsr $2515			jsr 	_IFIRecursiveConvert 		; start converting
.250d	20 d0 27	jsr $27d0			jsr 	IFloatGetBufferAddress
.2510	18		clc				clc
.2511	80 01		bra $2514			bra 	_IFIExit
.2513					_IFIFail:
.2513	38		sec				sec
.2514					_IFIExit:
.2514	60		rts				rts
.2515					_IFIRecursiveConvert:
.2515	a2 10		ldx #$10			ldx 	#IFR1
.2517	20 ea 26	jsr $26ea			jsr 	IFloatCopyToRegister 		; R0->R1
.251a	a2 0c		ldx #$0c			ldx 	#IFR0
.251c	ad ff 04	lda $04ff			lda 	IFBase 						; Base -> R0
.251f	20 4a 27	jsr $274a			jsr 	IFloatSetByte
.2522	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.2524	20 ad 22	jsr $22ad			jsr 	IFloatDivideInteger
.2527	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.2529	20 41 27	jsr $2741			jsr 	IFloatCheckZero
.252c	f0 09		beq $2537			beq 	_IFIOutDigit
.252e	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.2530	48		pha				pha
.2531	20 15 25	jsr $2515			jsr 	_IFIRecursiveConvert 		; convert the divider
.2534	68		pla				pla
.2535	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.2537					_IFIOutDigit:
.2537	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.2539	c9 0a		cmp #$0a			cmp	 	#10
.253b	90 02		bcc $253f			bcc 	_IFINotHex
.253d	69 06		adc #$06			adc 	#6
.253f					_IFINotHex:
.253f	69 30		adc #$30			adc 	#48
.2541	20 d8 27	jsr $27d8			jsr 	IFloatBufferWrite
.2544	60		rts				rts
.04ff					IFBase:
>04ff							.fill 	1
.2545					IFloatFloatToStringR0:
.2545	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2547	20 97 26	jsr $2697			jsr 	IFloatPushRx
.254a	20 ea 26	jsr $26ea			jsr 	IFloatCopyToRegister
.254d	20 48 24	jsr $2448			jsr 	IFloatIntegerR0				; make R0 integer
.2550	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2552	20 e9 24	jsr $24e9			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2555	9c 00 05	stz $0500			stz 	IFloatDecimalCount 			; zero the decimal count.
.2558	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.255a	29 3f		and #$3f			and 	#IFXMask
.255c	f0 44		beq $25a2			beq 	_IFFSExit
.255e					_IFloatFracLoop:
.255e	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.2560	20 d9 26	jsr $26d9			jsr 	IFloatCopyFromRegister
.2563	20 f2 23	jsr $23f2			jsr 	IFloatFractionalR0
.2566	20 7f 27	jsr $277f			jsr 	IFloatNormalise
.2569	a2 14		ldx #$14			ldx 	#IFR2
.256b	20 ea 26	jsr $26ea			jsr 	IFloatCopyToRegister 		; copy to R2
.256e	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.2570	a9 0a		lda #$0a			lda 	#10
.2572	20 4a 27	jsr $274a			jsr 	IFloatSetByte
.2575	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.2577	20 e8 21	jsr $21e8			jsr 	IFloatMultiply
.257a	a2 14		ldx #$14			ldx 	#IFR2
.257c	20 ea 26	jsr $26ea			jsr 	IFloatCopyToRegister
.257f	20 48 24	jsr $2448			jsr 	IFloatIntegerR0 			; get integer part of R0
.2582	ad 00 05	lda $0500			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2585	c9 03		cmp #$03			cmp 	#3
.2587	f0 16		beq $259f			beq 	_IFFSExitStripZero
.2589	ad 00 05	lda $0500			lda 	IFloatDecimalCount 			; written the DP yet ?
.258c	d0 05		bne $2593			bne 	_IFloatNotFirst
.258e	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2590	20 d8 27	jsr $27d8			jsr 	IFloatBufferWrite
.2593					_IFloatNotFirst:
.2593	ee 00 05	inc $0500			inc 	IFloatDecimalCount
.2596	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.2598	09 30		ora #$30			ora 	#"0"						; ASCII
.259a	20 d8 27	jsr $27d8			jsr 	IFloatBufferWrite 			; write to the buffer.
.259d	80 bf		bra $255e			bra 	_IFloatFracLoop
.259f					_IFFSExitStripZero:
.259f	20 e7 27	jsr $27e7			jsr 	IFloatStripTrailingZeros
.25a2					_IFFSExit:
.25a2	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.25a4	20 b8 26	jsr $26b8			jsr 	IFloatPullRx
.25a7	20 d0 27	jsr $27d0			jsr 	IFloatGetBufferAddress
.25aa	18		clc				clc
.25ab	60		rts				rts
.0500					IFloatDecimalCount:
>0500							.fill 	1
.25ac					IFloatStringToFloatR0:
.25ac	8d 01 05	sta $0501			sta 	IFCount 					; save it out.
.25af	86 0a		stx $0a				stx 	iTemp0
.25b1	84 0b		sty $0b				sty 	iTemp0+1
.25b3	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.25b5	20 48 27	jsr $2748			jsr 	IFloatSetZero
.25b8	9c 02 05	stz $0502			stz 	IFSignFlag 					; clear the sign flag
.25bb	20 48 26	jsr $2648			jsr 	IFSTFGetNext 				; get first
.25be	f0 1b		beq $25db			beq 	_IFSTFFail 					; no character
.25c0	90 10		bcc $25d2			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.25c2	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.25c4	d0 15		bne $25db			bne 	_IFSTFFail
.25c6	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.25c8	8d 02 05	sta $0502			sta 	IFSignFlag
.25cb					_IFSTFLoop:
.25cb	20 48 26	jsr $2648			jsr 	IFSTFGetNext 				; get next
.25ce	b0 0b		bcs $25db			bcs 	_IFSTFFail 					; bad character.
.25d0	f0 11		beq $25e3			beq 	_IFSTFExit 					; end of data
.25d2					_IFSTFHaveChar:
.25d2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.25d4	f0 08		beq $25de			beq 	_IFSTFDecimal
.25d6	20 6c 26	jsr $266c			jsr 	IFSTFAddR0 					; add number in
.25d9	80 f0		bra $25cb			bra 	_IFSTFLoop 					; keep going until . or end.
.25db					_IFSTFFail:
.25db	38		sec				sec
.25dc	80 0d		bra $25eb			bra 	_IFSTFReturn
.25de					_IFSTFDecimal:
.25de	20 f3 25	jsr $25f3			jsr 	IFSTFDecimal 				; call the decimal places code.
.25e1	b0 08		bcs $25eb			bcs 	_IFSTFReturn 				; error
.25e3					_IFSTFExit:
.25e3	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.25e5	0d 02 05	ora $0502			ora 	IFSignFlag
.25e8	85 0f		sta $0f				sta 	IFR0+IExp
.25ea	18		clc				clc
.25eb					_IFSTFReturn:
.25eb	60		rts				rts
.25ec					IFloatAddDecimalToR0:
.25ec	8d 01 05	sta $0501			sta 	IFCount 					; save it out.
.25ef	86 0a		stx $0a				stx 	iTemp0
.25f1	84 0b		sty $0b				sty 	iTemp0+1
.25f3					IFSTFDecimal:
.25f3	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.25f5	20 97 26	jsr $2697			jsr 	IFloatPushRx
.25f8	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.25fa	20 48 27	jsr $2748			jsr 	IFloatSetZero
.25fd	9c 03 05	stz $0503			stz 	IFDecimalPlaces
.2600					_IFSTDLoop:
.2600	20 48 26	jsr $2648			jsr 	IFSTFGetNext 				; get next
.2603	b0 41		bcs $2646			bcs 	_IFSTFFail2 				; bad character.
.2605	f0 11		beq $2618			beq 	_IFSTFComplete 				; end of data, work out the result.
.2607	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2609	f0 39		beq $2644			beq 	_IFSTFExit2
.260b	20 6c 26	jsr $266c			jsr 	IFSTFAddR0 					; add number in
.260e	ee 03 05	inc $0503			inc 	IFDecimalPlaces 			; count decimals
.2611	ad 03 05	lda $0503			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2614	c9 03		cmp #$03			cmp 	#3
.2616	90 e8		bcc $2600			bcc 	_IFSTDLoop
.2618					_IFSTFComplete:
.2618	ad 03 05	lda $0503			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.261b	f0 27		beq $2644			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.261d	3a		dec a				dec 	a 							; table indexed from 1.
.261e	0a		asl a				asl 	a
.261f	0a		asl a				asl 	a
.2620	aa		tax				tax
.2621	bd 83 26	lda $2683,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2624	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2626	bd 84 26	lda $2684,x			lda 	TableTen+1,x
.2629	85 11		sta $11				sta  	IFR1+IM1
.262b	bd 85 26	lda $2685,x			lda 	TableTen+2,x
.262e	85 12		sta $12				sta  	IFR1+IM2
.2630	bd 86 26	lda $2686,x			lda 	TableTen+3,x
.2633	85 13		sta $13				sta  	IFR1+IExp
.2635	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2637	20 e8 21	jsr $21e8			jsr 	IFloatMultiply
.263a	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.263c	20 b8 26	jsr $26b8			jsr 	IFloatPullRx
.263f	a2 10		ldx #$10			ldx 	#IFR1
.2641	20 3e 21	jsr $213e			jsr 	IFloatAdd
.2644					_IFSTFExit2:
.2644	18		clc				clc
.2645	60		rts				rts
.2646					_IFSTFFail2:
.2646	38		sec				sec
.2647	60		rts				rts
.2648					IFSTFGetNext:
.2648	ad 01 05	lda $0501			lda 	IFCount  					; if count is zero, return with Z set.
.264b	f0 19		beq $2666			beq 	_IFSTFReturnOk
.264d	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.264f	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2651	d0 02		bne $2655			bne 	_IFSTFGNNoCarry
.2653	e6 0b		inc $0b				inc 	iTemp0+1
.2655					_IFSTFGNNoCarry:
.2655	ce 01 05	dec $0501			dec 	IFCount 					; dec count.
.2658	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.265a	f0 08		beq $2664			beq 	_IFSTFGOkay
.265c	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.265e	90 08		bcc $2668			bcc 	_IFSTFGFail
.2660	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2662	b0 04		bcs $2668			bcs 	_IFSTFGFail
.2664					_IFSTFGOkay:
.2664	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2666					_IFSTFReturnOk:
.2666	18		clc				clc
.2667	60		rts				rts
.2668					_IFSTFGFail:
.2668	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.266a	38		sec				sec
.266b	60		rts				rts
.266c					IFSTFAddR0:
.266c	29 0f		and #$0f			and 	#15 						; to int value
.266e	48		pha				pha 								; save it.
.266f	a9 0a		lda #$0a			lda 	#10
.2671	a2 10		ldx #$10			ldx 	#IFR1
.2673	20 4a 27	jsr $274a			jsr 	IFloatSetByte
.2676	20 e8 21	jsr $21e8			jsr 	IFloatMultiply
.2679	68		pla				pla
.267a	a2 10		ldx #$10			ldx 	#IFR1
.267c	20 4a 27	jsr $274a			jsr 	IFloatSetByte
.267f	20 3e 21	jsr $213e			jsr 	IFloatAdd
.2682	60		rts				rts
.0501					IFCount:
>0501							.fill 	1
.0502					IFSignFlag:
>0502							.fill 	1
.0503					IFDecimalPlaces:
>0503							.fill 	1
.2683					TableTen:
>2683	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2687	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>268b	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>268f	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2693	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2697					IFloatPushRx:
.2697	5a		phy				phy
.2698	ac 04 05	ldy $0504			ldy 	IFStackIndex
.269b	b5 00		lda $00,x			lda 	IM0,x
.269d	99 05 05	sta $0505,y			sta 	IFStack,y
.26a0	b5 01		lda $01,x			lda 	IM1,x
.26a2	99 06 05	sta $0506,y			sta 	IFStack+1,y
.26a5	b5 02		lda $02,x			lda 	IM2,x
.26a7	99 07 05	sta $0507,y			sta 	IFStack+2,y
.26aa	b5 03		lda $03,x			lda 	IExp,x
.26ac	99 08 05	sta $0508,y			sta 	IFStack+3,y
.26af	c8		iny				iny
.26b0	c8		iny				iny
.26b1	c8		iny				iny
.26b2	c8		iny				iny
.26b3	8c 04 05	sty $0504			sty 	IFStackIndex
.26b6	7a		ply				ply
.26b7	60		rts				rts
.26b8					IFloatPullRx:
.26b8	5a		phy				phy
.26b9	ac 04 05	ldy $0504			ldy 	IFStackIndex
.26bc	88		dey				dey
.26bd	88		dey				dey
.26be	88		dey				dey
.26bf	88		dey				dey
.26c0	b9 05 05	lda $0505,y			lda 	IFStack,y
.26c3	95 00		sta $00,x			sta 	IM0,x
.26c5	b9 06 05	lda $0506,y			lda 	IFStack+1,y
.26c8	95 01		sta $01,x			sta 	IM1,x
.26ca	b9 07 05	lda $0507,y			lda 	IFStack+2,y
.26cd	95 02		sta $02,x			sta 	IM2,x
.26cf	b9 08 05	lda $0508,y			lda 	IFStack+3,y
.26d2	95 03		sta $03,x			sta 	IExp,x
.26d4	8c 04 05	sty $0504			sty 	IFStackIndex
.26d7	7a		ply				ply
.26d8	60		rts				rts
.0504					IFStackIndex:
>0504							.fill 	1
.0505					IFStack:
>0505							.fill 	16*4
.26d9					IFloatCopyFromRegister:
.26d9	b5 00		lda $00,x			lda 	0,x
.26db	85 0c		sta $0c				sta 	IFR0
.26dd	b5 01		lda $01,x			lda 	1,x
.26df	85 0d		sta $0d				sta 	IFR0+1
.26e1	b5 02		lda $02,x			lda 	2,x
.26e3	85 0e		sta $0e				sta 	IFR0+2
.26e5	b5 03		lda $03,x			lda 	3,x
.26e7	85 0f		sta $0f				sta 	IFR0+3
.26e9	60		rts				rts
.26ea					IFloatCopyToRegister:
.26ea	a5 0c		lda $0c				lda 	IFR0
.26ec	95 00		sta $00,x			sta 	0,x
.26ee	a5 0d		lda $0d				lda 	IFR0+1
.26f0	95 01		sta $01,x			sta 	1,x
.26f2	a5 0e		lda $0e				lda 	IFR0+2
.26f4	95 02		sta $02,x			sta 	2,x
.26f6	a5 0f		lda $0f				lda 	IFR0+3
.26f8	95 03		sta $03,x			sta 	3,x
.26fa	60		rts				rts
.26fb					IFloatLoadInline:
.26fb	68		pla				pla 								; pop address off to iTemp0
.26fc	85 0a		sta $0a				sta 	iTemp0
.26fe	68		pla				pla
.26ff	85 0b		sta $0b				sta 	iTemp0+1
.2701	a0 01		ldy #$01			ldy 	#1
.2703	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2705	95 00		sta $00,x			sta 	0,x
.2707	c8		iny				iny
.2708	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.270a	95 01		sta $01,x			sta 	1,x
.270c	c8		iny				iny
.270d	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.270f	95 02		sta $02,x			sta 	2,x
.2711	c8		iny				iny
.2712	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2714	95 03		sta $03,x			sta 	3,x
.2716	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2717	a5 0a		lda $0a				lda 	iTemp0
.2719	69 05		adc #$05			adc 	#5
.271b	85 0a		sta $0a				sta 	iTemp0
.271d	90 02		bcc $2721			bcc 	_IFLINoCarry
.271f	e6 0b		inc $0b				inc 	iTemp0+1
.2721					_IFLINoCarry:
.2721	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2724					IFloatMultiply8BitRx:
.2724	5a		phy		        phy
.2725	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2727	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2729	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.272a	85 0c		sta $0c		        sta     IFR0+IM0
.272c	84 0d		sty $0d		        sty     IFR0+IM1
.272e	a9 00		lda #$00	        lda     #0
.2730	a0 08		ldy #$08	        ldy     #8
.2732					_IFMLoop:
.2732	90 03		bcc $2737	        bcc     _IFMNoAdd
.2734	18		clc		        clc
.2735	65 0d		adc $0d		        adc     IFR0+IM1
.2737					_IFMNoAdd:
.2737	6a		ror a		        ror     a
.2738	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.273a	88		dey		        dey
.273b	d0 f5		bne $2732	        bne     _IFMLoop
.273d	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.273f	7a		ply		        ply
.2740	60		rts		        rts
.2741					IFloatCheckZero:
.2741	b5 00		lda $00,x			lda 	IM0,x
.2743	15 01		ora $01,x			ora 	IM1,x
.2745	15 02		ora $02,x			ora 	IM2,x
.2747	60		rts				rts
.2748					IFloatSetZero:
.2748	a9 00		lda #$00			lda 	#0
.274a					IFloatSetByte:
.274a	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.274c	74 01		stz $01,x			stz 	IM1,x
.274e	74 02		stz $02,x			stz 	IM2,x
.2750	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2752	60		rts				rts
.2753					IFloatNegate:
.2753	b5 03		lda $03,x			lda 	IExp,x
.2755	49 40		eor #$40			eor 	#IFSign
.2757	95 03		sta $03,x			sta 	IExp,x
.2759	18		clc				clc
.275a	60		rts				rts
.275b					IFloatMantissaNegate:
.275b	38		sec				sec
.275c	a9 00		lda #$00			lda 	#0
.275e	f5 00		sbc $00,x			sbc 	IM0,x
.2760	95 00		sta $00,x			sta 	IM0,x
.2762	a9 00		lda #$00			lda 	#0
.2764	f5 01		sbc $01,x			sbc 	IM1,x
.2766	95 01		sta $01,x			sta 	IM1,x
.2768	a9 00		lda #$00			lda 	#0
.276a	f5 02		sbc $02,x			sbc 	IM2,x
.276c	95 02		sta $02,x			sta 	IM2,x
.276e	60		rts				rts
.276f					IFloatShiftLeft:
.276f	18		clc				clc
.2770					IFloatRotateLeft:
.2770	36 00		rol $00,x			rol 	IM0,x
.2772	36 01		rol $01,x			rol 	IM1,x
.2774	36 02		rol $02,x			rol 	IM2,x
.2776	60		rts				rts
.2777					IFloatShiftRight:
.2777	18		clc				clc
.2778					IFloatRotateRight:
.2778	76 02		ror $02,x			ror 	IM2,x
.277a	76 01		ror $01,x			ror 	IM1,x
.277c	76 00		ror $00,x			ror 	IM0,x
.277e	60		rts				rts
.277f					IFloatNormalise:
.277f	20 41 27	jsr $2741			jsr 	IFloatCheckZero 			; is it zero
.2782	f0 18		beq $279c			beq 	_IFNExitZero 				; if so exit
.2784					_IFNLoop:
.2784	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2786	29 c0		and #$c0			and 	#$C0
.2788	c9 40		cmp #$40			cmp 	#$40
.278a	f0 13		beq $279f			beq 	_IFNExitOkay 				; if so , then we are done.
.278c	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.278e	29 3f		and #$3f			and 	#$3F
.2790	c9 20		cmp #$20			cmp 	#$20
.2792	f0 0b		beq $279f			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2794	20 b5 27	jsr $27b5			jsr 	IFloatDecExponent
.2797	20 6f 27	jsr $276f			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.279a	80 e8		bra $2784			bra 	_IFNLoop
.279c					_IFNExitZero:
.279c	20 48 27	jsr $2748			jsr 	IFloatSetZero 				; set the result to zero
.279f					_IFNExitOkay:
.279f	18		clc				clc  								; return with CC.
.27a0	60		rts				rts
.27a1					IFloatIncExponent:
.27a1	b5 03		lda $03,x			lda 	IExp,x
.27a3	48		pha				pha
.27a4	29 c0		and #$c0			and 	#$C0
.27a6	8d 45 05	sta $0545			sta 	IFXTemp
.27a9	68		pla				pla
.27aa	1a		inc a				inc 	a
.27ab	29 3f		and #$3f			and 	#$3F
.27ad	48		pha				pha
.27ae	0d 45 05	ora $0545			ora 	IFXTemp
.27b1	95 03		sta $03,x			sta 	IExp,x
.27b3	68		pla				pla
.27b4	60		rts				rts
.27b5					IFloatDecExponent:
.27b5	b5 03		lda $03,x			lda 	IExp,x
.27b7	48		pha				pha
.27b8	29 c0		and #$c0			and 	#$C0
.27ba	8d 45 05	sta $0545			sta 	IFXTemp
.27bd	68		pla				pla
.27be	3a		dec a				dec 	a
.27bf	29 3f		and #$3f			and 	#$3F
.27c1	48		pha				pha
.27c2	0d 45 05	ora $0545			ora 	IFXTemp
.27c5	95 03		sta $03,x			sta 	IExp,x
.27c7	68		pla				pla
.27c8	60		rts				rts
.0545					IFXTemp:
>0545							.fill 	1
.27c9					IFloatBufferReset:
.27c9	9c 46 05	stz $0546			stz 	IFBufferCount
.27cc	9c 47 05	stz $0547			stz 	IFBuffer
.27cf	60		rts				rts
.27d0					IFloatGetBufferAddress:
.27d0	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.27d2	a2 47		ldx #$47			ldx 	#(IFBuffer & $FF)
.27d4	ad 46 05	lda $0546			lda 	IFBufferCount
.27d7	60		rts				rts
.27d8					IFloatBufferWrite:
.27d8	da		phx				phx
.27d9	ae 46 05	ldx $0546			ldx 	IFBufferCount
.27dc	9d 47 05	sta $0547,x			sta 	IFBuffer,x
.27df	9e 48 05	stz $0548,x			stz 	IFBuffer+1,x
.27e2	ee 46 05	inc $0546			inc 	IFBufferCount
.27e5	fa		plx				plx
.27e6	60		rts				rts
.27e7					IFloatStripTrailingZeros:
.27e7	ae 46 05	ldx $0546			ldx 	IFBufferCount
.27ea	bd 46 05	lda $0546,x			lda 	IFBuffer-1,x
.27ed	c9 30		cmp #$30			cmp		#"0"
.27ef	d0 0f		bne $2800			bne 	_IFSTExit
.27f1	bd 45 05	lda $0545,x			lda 	IFBuffer-2,x
.27f4	c9 2e		cmp #$2e			cmp 	#"."
.27f6	f0 08		beq $2800			beq 	_IFSTExit
.27f8	ce 46 05	dec $0546			dec 	IFBufferCount
.27fb	9e 46 05	stz $0546,x			stz 	IFBuffer-1,x
.27fe	80 e7		bra $27e7			bra 	IFloatStripTrailingZeros
.2800					_IFSTExit:
.2800	60		rts				rts
.0546					IFBufferCount:
>0546							.fill 	1
.0547					IFBuffer:
>0547							.fill 	25
.2801					IFloatCheck:
.2801	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2803	09 40		ora #$40			ora 	#IFSign
.2805	85 0f		sta $0f				sta 	IFR0+IExp
.2807	20 3e 21	jsr $213e			jsr 	IFloatAdd 					; add allowed to error.
.280a	a2 0c		ldx #$0c			ldx 	#IFR0
.280c	20 41 27	jsr $2741			jsr 	IFloatCheckZero 			; error if < 0
.280f	f0 06		beq $2817			beq 	_IFAOkay
.2811	a5 0f		lda $0f				lda 	IFR0+IExp
.2813	29 40		and #$40			and 	#IFSign
.2815	d0 01		bne $2818			bne 	_IFAFail
.2817					_IFAOkay:
.2817	60		rts				rts
.2818					_IFAFail:
.2818	38		sec				sec
.2819	68		pla				pla 								; get address - 2
.281a	e9 02		sbc #$02			sbc 	#2
.281c	aa		tax				tax
.281d	68		pla				pla
.281e	e9 00		sbc #$00			sbc 	#0
.2820	a8		tay				tay
.2821	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2823					_IFAStop:
>2823	db						.byte 	$DB 						; display an error AA ADR ADR
.2824	80 fd		bra $2823			bra 	_IFAStop

;******  Return to file: basic.asm

.2826					NotImplemented:
.2826	a9 ff		lda #$ff			lda 	#$FF
.2828	80 04		bra $282e			bra 	EnterDbg
.282a					ErrorHandler:
.282a	fa		plx				plx
.282b	7a		ply				ply
.282c	a9 ee		lda #$ee			lda 	#$EE
.282e					EnterDbg:
>282e	db						.byte 	$DB
.282f	4c 2e 28	jmp $282e			jmp 	EnterDbg

;******  End of listing
