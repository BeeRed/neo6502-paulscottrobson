
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Tue May 30 08:45:10 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 03 1c	jsr $1c03			jsr 	PGMSetBaseAddress
.1007	20 ea 1f	jsr $1fea			jsr 	IFInitialise
.100a	4c ed 10	jmp $10ed			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 55 14	jsr $1455			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 91 11	jmp $1191		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 16 1c	jsr $1c16			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 a3 1f	jsr $1fa3			jsr 	VARClearHashTables
.1028	20 ec 1e	jsr $1eec			jsr 	StringSystemInitialise
.102b	60		rts				rts
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.102c					NoExec01:
.102c					NoExec02:
.102c					NoExec03:
.102c					NoExec04:
.102c					NoExec05:
.102c					NoExec06:
.102c					NoExec07:
.102c	4c 40 11	jmp $1140		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.102f					Command_Print:
.102f					Command_IP_Main:
.102f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1030					_CPLoop:
.1030	08		php				php 								; save last action flag
.1031	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1033	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1035	f0 3e		beq $1075			beq 	_CPExit 					; without consuming
.1037	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1039	f0 3a		beq $1075			beq 	_CPExit
.103b	68		pla				pla 								; throw last action flag
.103c	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.103e	c8		iny				iny
.103f	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1041	f0 2f		beq $1072			beq 	_CPContinueWithSameLine
.1043	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1045	f0 26		beq $106d			beq 	_CPTab
.1047	88		dey				dey 								; undo the get.
.1048	20 15 14	jsr $1415			jsr 	EXPEvaluateExpression 		; evaluate expression.
.104b	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.104d	10 14		bpl $1063			bpl 	_CPNumber
.104f	5a		phy				phy
.1050	18		clc				clc 								; string address to YX
.1051	a5 0c		lda $0c				lda 	IFR0+IM0
.1053	aa		tax				tax
.1054	a5 0d		lda $0d				lda 	IFR0+IM1
.1056	a8		tay				tay
.1057	e8		inx				inx 								; point to 1st character
.1058	d0 01		bne $105b			bne 	_CPNoCarry
.105a	c8		iny				iny
.105b					_CPNoCarry:
.105b	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.105d	20 7e 10	jsr $107e			jsr 	CPPrintAYX 					; print AYX
.1060	7a		ply				ply
.1061	80 cc		bra $102f			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1063					_CPNumber:
.1063	5a		phy				phy
.1064	20 fc 23	jsr $23fc			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.1067	20 7e 10	jsr $107e			jsr 	CPPrintAYX 					; print AYX
.106a	7a		ply				ply
.106b	80 c2		bra $102f			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.106d					_CPTab:
.106d	a9 09		lda #$09			lda 	#9 							; print TAB
.106f	20 91 10	jsr $1091			jsr 	CPPrintA
.1072					_CPContinueWithSameLine:
.1072	38		sec				sec 								; loop round with carry set, which
.1073	80 bb		bra $1030			bra 	_CPLoop 					; will inhibit final CR
.1075					_CPExit:
.1075	28		plp				plp 								; get last action flag
.1076	b0 05		bcs $107d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1078	a9 0d		lda #$0d			lda 	#13 						; print new line
.107a	20 91 10	jsr $1091			jsr 	CPPrintA
.107d					_CPExit2:
.107d	60		rts				rts
.107e					CPPrintAYX:
.107e	86 1e		stx $1e				stx 	zTemp0
.1080	84 1f		sty $1f				sty 	zTemp0+1
.1082	aa		tax				tax
.1083	f0 0b		beq $1090			beq 	_CPPrintExit
.1085	a0 00		ldy #$00			ldy 	#0
.1087					_CPPrintAYXLoop:
.1087	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1089	20 91 10	jsr $1091			jsr 	CPPrintA
.108c	c8		iny				iny
.108d	ca		dex				dex
.108e	d0 f7		bne $1087			bne 	_CPPrintAYXLoop
.1090					_CPPrintExit:
.1090	60		rts				rts
.1091					CPPrintA:
.1091	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1094					CommandLET:
.1094	20 b7 14	jsr $14b7			jsr 	EXPTermR0 					; get term
.1097	90 38		bcc $10d1			bcc 	_CLError 					; must be a reference term.
.1099	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.109b	48		pha				pha
.109c	a5 0d		lda $0d				lda 	IFR0+IM1
.109e	48		pha				pha
.109f	a5 0f		lda $0f				lda 	IFR0+IExp
.10a1	48		pha				pha
.10a2	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.10a4	20 8f 12	jsr $128f			jsr 	ERRCheckA
.10a7	20 15 14	jsr $1415			jsr 	EXPEvaluateExpression 		; right hand side.
.10aa	68		pla				pla 								; type of l-expr
.10ab	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.10ad	30 25		bmi $10d4			bmi 	_CLType
.10af	fa		plx				plx 	 							; pop target address to zTemp0
.10b0	86 1f		stx $1f				stx 	zTemp0+1
.10b2	fa		plx				plx
.10b3	86 1e		stx $1e				stx 	zTemp0
.10b5	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.10b7	30 15		bmi $10ce			bmi 	_CLStringAssign
.10b9	5a		phy				phy
.10ba	a0 03		ldy #$03			ldy 	#3
.10bc	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10be	88		dey				dey
.10bf	a5 0e		lda $0e				lda 	IFR0+IM2
.10c1	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10c3	88		dey				dey
.10c4	a5 0d		lda $0d				lda 	IFR0+IM1
.10c6	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10c8	a5 0c		lda $0c				lda 	IFR0+IM0
.10ca	92 1e		sta ($1e)			sta 	(zTemp0)
.10cc	7a		ply				ply
.10cd	60		rts				rts
.10ce					_CLStringAssign:
.10ce	4c 7e 11	jmp $117e		jmp	ErrorV_unimplemented
.10d1					_CLError:
.10d1	4c 63 12	jmp $1263		jmp	ErrorV_variable
.10d4					_CLType:
.10d4	4c 6d 11	jmp $116d		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.10d7					Command_NEW:
.10d7	20 0a 1c	jsr $1c0a			jsr 	PGMNewProgram
.10da	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.10dd	4c 3a 11	jmp $113a			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.10e0					Command_REM:
.10e0					Command_REM2:
.10e0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.10e2	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.10e4	d0 06		bne $10ec			bne 	_CRExit
.10e6	c8		iny				iny 								; skip over it, it's a comment.
.10e7	98		tya				tya
.10e8	38		sec				sec
.10e9	71 1c		adc ($1c),y			adc 	(codePtr),y
.10eb	a8		tay				tay
.10ec					_CRExit:
.10ec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.10ed					Command_RUN:
.10ed	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.10f0	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.10f3	85 1d		sta $1d				sta 	codePtr+1
.10f5	64 1c		stz $1c				stz 	codePtr
.10f7	80 0b		bra $1104			bra 	RUNNewLine
.10f9					RUNEndOfLine:
.10f9	18		clc				clc 								; advance to next line.
.10fa	b2 1c		lda ($1c)			lda 	(codePtr)
.10fc	65 1c		adc $1c				adc 	codePtr
.10fe	85 1c		sta $1c				sta 	codePtr
.1100	90 02		bcc $1104			bcc 	_RELNoCarry
.1102	e6 1d		inc $1d				inc 	codePtr+1
.1104					_RELNoCarry:
.1104					RUNNewLine:
.1104	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1106	9a		txs				txs
.1107	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.1109	f0 2f		beq $113a			beq 	Command_END
.110b	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.110d					RUNNewCommand:
.110d	9c 49 04	stz $0449			stz 	stringInitialised 			; reset string system.
.1110	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.1112	10 1a		bpl $112e			bpl		_RUNNotToken 				; probably an identifier
.1114	c8		iny				iny 								; consume token
.1115	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1117	f0 f4		beq $110d			beq 	RUNNewCommand
.1119	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.111b	b0 0e		bcs $112b			bcs 	_RUNSyntax
.111d	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.111f	90 0a		bcc $112b			bcc 	_RUNSyntax
.1121	0a		asl a				asl 	a 							; double into X.
.1122	aa		tax				tax
.1123	20 28 11	jsr $1128			jsr 	_RUNDispatchMain			; call the main dispatcher
.1126	80 e5		bra $110d			bra 	RUNNewCommand
.1128					_RUNDispatchMain:
.1128	7c 20 19	jmp ($1920,x)			jmp 	(VectorTable,x)
.112b					_RUNSyntax:
.112b	4c 40 11	jmp $1140		jmp	ErrorV_syntax
.112e					_RUNNotToken:
.112e	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1130	90 f9		bcc $112b			bcc 	_RUNSyntax
.1132	20 94 10	jsr $1094			jsr 	CommandLET 					; assignment
.1135	80 d6		bra $110d			bra 	RUNNewCommand 				; loop round.
.1137					Command_Shift_Handler:
.1137	4c 7e 11	jmp $117e		jmp	ErrorV_unimplemented
.113a					Command_END:
.113a	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.113d					Command_STOP:
.113d	4c db 11	jmp $11db		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.1140					ErrorV_syntax:
.1140	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1143	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>114b	72 72 6f 72 00
.1150					ErrorV_range:
.1150	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1153	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>115b	61 6e 67 65 00
.1160					ErrorV_value:
.1160	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1163	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>116b	65 00
.116d					ErrorV_type:
.116d	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1170	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>1178	6d 61 74 63 68 00
.117e					ErrorV_unimplemented:
.117e	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1181	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>1189	65 6d 65 6e 74 65 64 00
.1191					ErrorV_assert:
.1191	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1194	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>119c	61 69 6c 00
.11a0					ErrorV_internal:
.11a0	20 e1 26	jsr $26e1		jsr	ErrorHandler
>11a3	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>11ab	20 45 72 72 6f 72 00
.11b2					ErrorV_divzero:
.11b2	20 e1 26	jsr $26e1		jsr	ErrorHandler
>11b5	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>11bd	79 20 5a 65 72 6f 00
.11c4					ErrorV_structure:
.11c4	20 e1 26	jsr $26e1		jsr	ErrorHandler
>11c7	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>11cf	65 20 49 6d 62 61 6c 61 6e 63 65 00
.11db					ErrorV_stop:
.11db	20 e1 26	jsr $26e1		jsr	ErrorHandler
>11de	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>11e6	53 74 6f 70 70 65 64 00
.11ee					ErrorV_data:
.11ee	20 e1 26	jsr $26e1		jsr	ErrorHandler
>11f1	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>11f9	61 74 61 00
.11fd					ErrorV_redefine:
.11fd	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1200	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>1208	64 65 66 69 6e 65 64 00
.1210					ErrorV_index:
.1210	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1213	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>121b	79 20 49 6e 64 65 78 00
.1223					ErrorV_memory:
.1223	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1226	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>122e	65 6d 6f 72 79 00
.1234					ErrorV_uninitialised:
.1234	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1237	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>123f	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.124e					ErrorV_string:
.124e	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1251	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>1259	6e 67 20 4c 65 6e 67 74 68 00
.1263					ErrorV_variable:
.1263	20 e1 26	jsr $26e1		jsr	ErrorHandler
>1266	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>126e	20 4d 69 73 73 69 6e 67 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.1277					ERRCheckLParen:
.1277	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1279	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.127b	d0 18		bne $1295			bne 	ERRSyntaxError
.127d	c8		iny				iny
.127e	60		rts				rts
.127f					ERRCheckRParen:
.127f	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1281	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.1283	d0 10		bne $1295			bne 	ERRSyntaxError
.1285	c8		iny				iny
.1286	60		rts				rts
.1287					ERRCheckComma:
.1287	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1289	c9 99		cmp #$99			cmp 	#PR_COMMA
.128b	d0 08		bne $1295			bne 	ERRSyntaxError
.128d	c8		iny				iny
.128e	60		rts				rts
.128f					ERRCheckA:
.128f	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.1291	d0 02		bne $1295			bne 	ERRSyntaxError
.1293	c8		iny				iny
.1294	60		rts				rts
.1295					ERRSyntaxError:
.1295	4c 40 11	jmp $1140		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1298					EXPBinAdd:
.1298	24 0f		bit $0f				bit 	IFR0+IExp
.129a	30 6f		bmi $130b			bmi 	EXPConcatenate
.129c	a2 10		ldx #$10			ldx 	#IFR1
.129e	4c f5 1f	jmp $1ff5			jmp 	IFloatAdd
.12a1					EXPBinSub:
.12a1	24 0f		bit $0f				bit 	IFR0+IExp
.12a3	30 3f		bmi $12e4			bmi 	EXPTypeError
.12a5	a2 10		ldx #$10			ldx 	#IFR1
.12a7	4c ee 1f	jmp $1fee			jmp 	IFloatSubtract
.12aa					EXPBinMul:
.12aa	24 0f		bit $0f				bit 	IFR0+IExp
.12ac	30 36		bmi $12e4			bmi 	EXPTypeError
.12ae	a2 10		ldx #$10			ldx 	#IFR1
.12b0	4c 9f 20	jmp $209f			jmp 	IFloatMultiply
.12b3					EXPBinFDiv:
.12b3	24 0f		bit $0f				bit 	IFR0+IExp
.12b5	30 2d		bmi $12e4			bmi 	EXPTypeError
.12b7	a2 10		ldx #$10			ldx 	#IFR1
.12b9	20 22 23	jsr $2322			jsr 	IFloatDivideFloat
.12bc	b0 0f		bcs $12cd			bcs 	EXPDZero
.12be	60		rts				rts
.12bf					EXPBinIDiv:
.12bf	24 0f		bit $0f				bit 	IFR0+IExp
.12c1	30 21		bmi $12e4			bmi 	EXPTypeError
.12c3	a2 10		ldx #$10			ldx 	#IFR1
.12c5	20 22 23	jsr $2322			jsr 	IFloatDivideFloat
.12c8	b0 03		bcs $12cd			bcs 	EXPDZero
.12ca	4c ff 22	jmp $22ff			jmp 	IFloatIntegerR0
.12cd					EXPDZero:
.12cd	4c b2 11	jmp $11b2		jmp	ErrorV_divzero
.12d0					EXPBinIMod:
.12d0	24 0f		bit $0f				bit 	IFR0+IExp
.12d2	30 10		bmi $12e4			bmi 	EXPTypeError
.12d4	a2 10		ldx #$10			ldx 	#IFR1
.12d6	5a		phy				phy
.12d7	20 37 22	jsr $2237			jsr 	IFPreProcessBitwise 		; set up everything.
.12da	d0 05		bne $12e1			bne 	EXPDRange
.12dc	20 70 21	jsr $2170			jsr 	IFloatModulusInteger
.12df	7a		ply				ply
.12e0	60		rts				rts
.12e1					EXPDRange:
.12e1	4c 50 11	jmp $1150		jmp	ErrorV_range
.12e4					EXPTypeError:
.12e4	4c 6d 11	jmp $116d		jmp	ErrorV_type
.12e7					EXPBinAnd:
.12e7	24 0f		bit $0f				bit 	IFR0+IExp
.12e9	30 f9		bmi $12e4			bmi 	EXPTypeError
.12eb	a2 10		ldx #$10			ldx 	#IFR1
.12ed	20 f2 21	jsr $21f2			jsr 	IFloatBitwiseAnd
.12f0	b0 ef		bcs $12e1			bcs 	EXPDRange
.12f2	60		rts				rts
.12f3					EXPBinOr:
.12f3	24 0f		bit $0f				bit 	IFR0+IExp
.12f5	30 ed		bmi $12e4			bmi 	EXPTypeError
.12f7	a2 10		ldx #$10			ldx 	#IFR1
.12f9	20 09 22	jsr $2209			jsr 	IFloatBitwiseOr
.12fc	b0 e3		bcs $12e1			bcs 	EXPDRange
.12fe	60		rts				rts
.12ff					EXPBinXor:
.12ff	24 0f		bit $0f				bit 	IFR0+IExp
.1301	30 e1		bmi $12e4			bmi 	EXPTypeError
.1303	a2 10		ldx #$10			ldx 	#IFR1
.1305	20 20 22	jsr $2220			jsr 	IFloatBitwiseXor
.1308	b0 d7		bcs $12e1			bcs 	EXPDRange
.130a	60		rts				rts
.130b					EXPConcatenate:
.130b	18		clc				clc
.130c	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.130e	72 10		adc ($10)			adc 	(IFR1)
.1310	b0 2d		bcs $133f			bcs 	_EXPCError
.1312	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.1314	da		phx				phx
.1315	a6 0d		ldx $0d				ldx 	IFR0+1
.1317	da		phx				phx
.1318	20 14 1f	jsr $1f14			jsr 	StringTempAllocate 			; allocate string, set up return
.131b	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.131d	a5 10		lda $10				lda 	IFR1
.131f	20 28 13	jsr $1328			jsr 	_EXPCCopyXA
.1322	fa		plx				plx 								; copy second string
.1323	68		pla				pla
.1324	20 28 13	jsr $1328			jsr 	_EXPCCopyXA
.1327	60		rts				rts
.1328					_EXPCCopyXA:
.1328	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.132a	85 1e		sta $1e				sta 	zTemp0
.132c	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.132e	f0 0e		beq $133e			beq 	_EXPCCExit 					; nothing.
.1330	aa		tax				tax 								; count
.1331	5a		phy				phy 								; start positioin
.1332	a0 01		ldy #$01			ldy 	#1
.1334					_EXPCCLoop:
.1334	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.1336	20 49 1f	jsr $1f49			jsr 	StringTempWrite
.1339	c8		iny				iny
.133a	ca		dex				dex
.133b	d0 f7		bne $1334			bne 	_EXPCCLoop
.133d	7a		ply				ply
.133e					_EXPCCExit:
.133e	60		rts				rts
.133f					_EXPCError:
.133f	4c 4e 12	jmp $124e		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1342					EXPReturnTrue:
.1342	a2 0c		ldx #$0c			ldx 	#IFR0
.1344	a9 01		lda #$01			lda 	#1
.1346	20 01 26	jsr $2601			jsr 	IFloatSetByte
.1349	20 0a 26	jsr $260a			jsr 	IFloatNegate
.134c	60		rts				rts
.134d					EXPReturnFalse:
.134d	a2 0c		ldx #$0c			ldx 	#IFR0
.134f	4c ff 25	jmp $25ff			jmp 	IFloatSetZero
.1352					EXPCompareEqual:
.1352	20 88 13	jsr $1388			jsr 	EXPCompareBaseCode
.1355	c9 00		cmp #$00			cmp 	#0
.1357	f0 e9		beq $1342			beq 	EXPReturnTrue
.1359	80 f2		bra $134d			bra 	EXPReturnFalse
.135b					EXPCompareLess:
.135b	20 88 13	jsr $1388			jsr 	EXPCompareBaseCode
.135e	c9 ff		cmp #$ff			cmp 	#$FF
.1360	f0 e0		beq $1342			beq 	EXPReturnTrue
.1362	80 e9		bra $134d			bra 	EXPReturnFalse
.1364					EXPCompareGreater:
.1364	20 88 13	jsr $1388			jsr 	EXPCompareBaseCode
.1367	c9 01		cmp #$01			cmp 	#1
.1369	f0 d7		beq $1342			beq 	EXPReturnTrue
.136b	80 e0		bra $134d			bra 	EXPReturnFalse
.136d					EXPCompareNotEqual:
.136d	20 88 13	jsr $1388			jsr 	EXPCompareBaseCode
.1370	c9 00		cmp #$00			cmp 	#0
.1372	d0 ce		bne $1342			bne 	EXPReturnTrue
.1374	80 d7		bra $134d			bra 	EXPReturnFalse
.1376					EXPCompareLessEqual:
.1376	20 88 13	jsr $1388			jsr 	EXPCompareBaseCode
.1379	c9 01		cmp #$01			cmp 	#1
.137b	d0 c5		bne $1342			bne 	EXPReturnTrue
.137d	80 ce		bra $134d			bra 	EXPReturnFalse
.137f					EXPCompareGreaterEqual:
.137f	20 88 13	jsr $1388			jsr 	EXPCompareBaseCode
.1382	c9 ff		cmp #$ff			cmp 	#$FF
.1384	d0 bc		bne $1342			bne 	EXPReturnTrue
.1386	80 c5		bra $134d			bra 	EXPReturnFalse
.1388					EXPCompareBaseCode:
.1388	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.138a	30 10		bmi $139c			bmi 	_EXCBCString
.138c	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.138e	20 cd 22	jsr $22cd			jsr 	IFloatCompare
.1391	a5 0c		lda $0c				lda 	IFR0+IM0
.1393	f0 06		beq $139b			beq 	_EXCBCExit 					; return 0 if zero
.1395	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.1397	50 02		bvc $139b			bvc 	_EXCBCExit
.1399	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.139b					_EXCBCExit:
.139b	60		rts				rts
.139c					_EXCBCString:
.139c	5a		phy				phy
.139d	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.139f	d2 10		cmp ($10)			cmp 	(IFR1)
.13a1	90 02		bcc $13a5			bcc 	_EXCBCSmaller
.13a3	b2 10		lda ($10)			lda 	(IFR1)
.13a5					_EXCBCSmaller:
.13a5	aa		tax				tax
.13a6	f0 0d		beq $13b5			beq 	_EXCBCMatches 				; if zero common length matches
.13a8	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.13aa					_EXCBCCheckSmallerMatches:
.13aa	c8		iny				iny 								; compare directly as far as common length
.13ab	38		sec				sec
.13ac	b1 10		lda ($10),y			lda 	(IFR1),y
.13ae	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.13b0	d0 08		bne $13ba			bne 	_EXCBCExit2
.13b2	ca		dex				dex
.13b3	d0 f5		bne $13aa			bne 	_EXCBCCheckSmallerMatches
.13b5					_EXCBCMatches:
.13b5	38		sec				sec
.13b6	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.13b8	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.13ba					_EXCBCExit2:
.13ba	7a		ply				ply
.13bb	c9 00		cmp #$00			cmp 	#0
.13bd	f0 04		beq $13c3			beq 	_EXCBCReturn
.13bf	30 03		bmi $13c4			bmi 	_EXCBCFF
.13c1	a9 01		lda #$01			lda 	#1
.13c3					_EXCBCReturn:
.13c3	60		rts				rts
.13c4					_EXCBCFF:
.13c4	a9 ff		lda #$ff			lda 	#$FF
.13c6	60		rts				rts
.13c7					_EXCBCRange:
.13c7	4c 50 11	jmp $1150		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.13ca					EXPBinLeft:
.13ca	a9 ff		lda #$ff			lda 	#$FF
.13cc	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.13cf	4c d5 13	jmp $13d5			jmp 	EXPShiftCommon
.13d2					EXPBinRight:
.13d2	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.13d5					EXPShiftCommon:
.13d5	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.13d7	05 13		ora $13				ora 	IFR1+IExp
.13d9	29 7f		and #$7f			and 	#$7F
.13db	d0 35		bne $1412			bne 	_EXPSRange
.13dd	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.13df	29 e0		and #$e0			and 	#$E0
.13e1	05 0d		ora $0d				ora 	IFR0+IM1
.13e3	05 0e		ora $0e				ora 	IFR0+IM2
.13e5	d0 25		bne $140c			bne 	_EXPSShiftZero 				; if so return zero
.13e7	5a		phy				phy
.13e8	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.13ea	29 1f		and #$1f			and 	#$1F
.13ec	f0 17		beq $1405			beq 	_EXPSExit 					; exit if zero
.13ee	a8		tay				tay
.13ef					_EXPSLoop:
.13ef	a2 10		ldx #$10			ldx 	#IFR1
.13f1	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.13f4	30 05		bmi $13fb			bmi 	_EXPSShiftLeft
.13f6	20 2e 26	jsr $262e			jsr 	IFloatShiftRight
.13f9	80 07		bra $1402			bra 	_EXPSContinue
.13fb					_EXPSShiftLeft:
.13fb	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.13fe	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1400	30 10		bmi $1412			bmi 	_EXPSRange
.1402					_EXPSContinue:
.1402	88		dey				dey
.1403	d0 ea		bne $13ef			bne 	_EXPSLoop
.1405					_EXPSExit:
.1405	a2 10		ldx #$10			ldx 	#IFR1
.1407	20 90 25	jsr $2590			jsr 	IFloatCopyFromRegister
.140a	7a		ply				ply
.140b	60		rts				rts
.140c					_EXPSShiftZero:
.140c	a2 0c		ldx #$0c			ldx 	#IFR0
.140e	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.1411	60		rts				rts
.1412					_EXPSRange:
.1412	4c 50 11	jmp $1150		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1415					EXPEvaluateExpression:
.1415	a9 00		lda #$00			lda 	#0 							; current precedence
.1417					EXPEvaluateExpressionPrecedenceA:
.1417	48		pha				pha
.1418	20 92 14	jsr $1492			jsr 	EXPTermValueR0				; do first term.
.141b					_EELoop:
.141b	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.141d	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.141f	90 31		bcc $1452			bcc 	_EEExit
.1421	aa		tax				tax 								; access the precedence of the operator.
.1422	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1423	dd 84 16	cmp $1684,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1426	b0 2b		bcs $1453			bcs 	_EEExit2
.1428	48		pha				pha 								; save current precedence.
.1429	da		phx				phx 								; save operator
.142a	c8		iny				iny 								; consume operator
.142b	da		phx				phx
.142c	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.142e	20 4e 25	jsr $254e			jsr 	IFloatPushRx
.1431	fa		plx				plx
.1432	bd 84 16	lda $1684,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1435	20 17 14	jsr $1417			jsr 	EXPEvaluateExpressionPrecedenceA
.1438	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.143a	20 6f 25	jsr $256f			jsr 	IFloatPullRx
.143d	fa		plx				plx 								; operator
.143e	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.1440	45 13		eor $13				eor 	IFR1+IExp
.1442	30 08		bmi $144c			bmi 	_EEType
.1444					_EETypeOkay:
.1444	8a		txa				txa
.1445	0a		asl a				asl 	a 							; double -> X
.1446	aa		tax				tax
.1447	20 4f 14	jsr $144f			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.144a	80 cf		bra $141b			bra 	_EELoop
.144c					_EEType:
.144c	4c 6d 11	jmp $116d		jmp	ErrorV_type
.144f					_EECallBinary:
.144f	7c 20 19	jmp ($1920,x)			jmp 	(VectorTable,x)
.1452					_EEExit:
.1452	68		pla				pla 								; throw precedence
.1453					_EEExit2:
.1453	18		clc				clc
.1454	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1455					EXPEvalNumber:
.1455	20 15 14	jsr $1415			jsr 	EXPEvaluateExpression
.1458	24 0f		bit $0f				bit 	IFR0+IExp
.145a	30 01		bmi $145d			bmi 	EVUType
.145c	60		rts				rts
.145d					EVUType:
.145d	4c 6d 11	jmp $116d		jmp	ErrorV_type
.1460					EXPEvalInteger:
.1460	20 55 14	jsr $1455			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1463	20 ff 22	jsr $22ff			jsr 	IFloatIntegerR0
.1466	60		rts				rts
.1467					EXPEvalInteger16:
.1467	20 60 14	jsr $1460			jsr 	EXPEvalInteger
.146a	a5 0e		lda $0e				lda 	IFR0+IM2
.146c	d0 21		bne $148f			bne 	EVURange
.146e	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1470	a5 0c		lda $0c				lda 	IFR0+IM0
.1472	60		rts				rts
.1473					EXPEvalInteger8:
.1473	20 60 14	jsr $1460			jsr 	EXPEvalInteger
.1476	a5 0e		lda $0e				lda 	IFR0+IM2
.1478	05 0d		ora $0d				ora 	IFR0+IM1
.147a	d0 13		bne $148f			bne 	EVURange
.147c	a5 0c		lda $0c				lda 	IFR0+IM0
.147e	60		rts				rts
.147f					EXPEvalString:
.147f	20 15 14	jsr $1415			jsr 	EXPEvaluateExpression
.1482	24 0f		bit $0f				bit 	IFR0+IExp
.1484	10 d7		bpl $145d			bpl 	EVUType
.1486	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1488	86 1f		stx $1f				stx 	zTemp0+1
.148a	a5 0c		lda $0c				lda 	IFR0+IM0
.148c	85 1e		sta $1e				sta 	zTemp0
.148e	60		rts				rts
.148f					EVURange:
.148f	4c 50 11	jmp $1150		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1492					EXPTermValueR0:
.1492	20 b7 14	jsr $14b7			jsr 	EXPTermR0 					; get term
.1495	90 1f		bcc $14b6			bcc 	_ETVNotReference 			; exit if value.
.1497	5a		phy				phy
.1498	a0 03		ldy #$03			ldy 	#3 							; get type
.149a	b1 0c		lda ($0c),y			lda 	(IFR0),y
.149c	30 14		bmi $14b2			bmi 	_ETVDereferenceString
.149e	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.14a0	88		dey				dey
.14a1	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14a3	85 0e		sta $0e				sta 	IFR0+IM2
.14a5	88		dey				dey
.14a6	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14a8	aa		tax				tax
.14a9	b2 0c		lda ($0c)			lda 	(IFR0)
.14ab	86 0d		stx $0d				stx 	IFR0+IM1
.14ad	85 0c		sta $0c				sta 	IFR0+IM0
.14af	7a		ply				ply
.14b0	18		clc				clc
.14b1	60		rts				rts
.14b2					_ETVDereferenceString:
>14b2	db						.byte 	$DB
.14b3	4c 7e 11	jmp $117e		jmp	ErrorV_unimplemented
.14b6					_ETVNotReference:
.14b6	60		rts				rts
.14b7					EXPTermR0:
.14b7	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.14b9	30 10		bmi $14cb			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.14bb	c8		iny				iny 								; consume element
.14bc	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.14be	b0 08		bcs $14c8			bcs 	_ETMIdentifier
.14c0	20 ef 14	jsr $14ef			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.14c3	20 22 15	jsr $1522			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.14c6	18		clc				clc 								; return value
.14c7	60		rts				rts
.14c8					_ETMIdentifier:
.14c8	4c b0 1f	jmp $1fb0			jmp 	VARCheckSimple 				; check simple variables A-Z
.14cb					_ETMIsUnaryOrMinus:
.14cb	c8		iny				iny 								; consume element
.14cc	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.14ce	d0 0a		bne $14da			bne 	_ETMCheckUnary
.14d0	20 92 14	jsr $1492			jsr 	EXPTermValueR0 				; get a term to negate
.14d3	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.14d5	20 0a 26	jsr $260a			jsr 	IFloatNegate
.14d8	18		clc				clc
.14d9	60		rts				rts
.14da					_ETMCheckUnary:
.14da	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.14dc	90 0e		bcc $14ec			bcc 	_ETMUnarySyntax
.14de	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.14e0	b0 0a		bcs $14ec			bcs 	_ETMUnarySyntax
.14e2	0a		asl a				asl 	a
.14e3	aa		tax				tax
.14e4	20 e9 14	jsr $14e9			jsr 	_ETMCallUnaryFunction
.14e7	18		clc				clc
.14e8	60		rts				rts
.14e9					_ETMCallUnaryFunction:
.14e9	7c 20 19	jmp ($1920,x)			jmp 	(VectorTable,x)
.14ec					_ETMUnarySyntax:
.14ec	4c 40 11	jmp $1140		jmp	ErrorV_syntax
.14ef					EXPExtractTokenisedInteger:
.14ef	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.14f1	64 0f		stz $0f				stz 	IFR0+IExp
.14f3	64 0d		stz $0d				stz 	IFR0+IM1
.14f5	64 0e		stz $0e				stz 	IFR0+IM2
.14f7					_ETMConstant:
.14f7	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.14f9	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.14fb	b0 24		bcs $1521			bcs 	_ETMCExit 					; no.
.14fd	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.14ff	a5 0d		lda $0d				lda 	IFR0+IM1
.1501	85 0e		sta $0e				sta 	IFR0+IM2
.1503	a5 0c		lda $0c				lda 	IFR0+IM0
.1505	85 0d		sta $0d				sta 	IFR0+IM1
.1507	64 0c		stz $0c				stz 	IFR0+IM0
.1509	8a		txa				txa
.150a	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.150b	66 0e		ror $0e				ror 	IFR0+IM2
.150d	66 0d		ror $0d				ror 	IFR0+IM1
.150f	66 0c		ror $0c				ror 	IFR0+IM0
.1511	4a		lsr a				lsr 	a
.1512	66 0e		ror $0e				ror 	IFR0+IM2
.1514	66 0d		ror $0d				ror 	IFR0+IM1
.1516	66 0c		ror $0c				ror 	IFR0+IM0
.1518	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.151a	11 1c		ora ($1c),y			ora 	(codePtr),y
.151c	85 0c		sta $0c				sta 	IFR0+IM0
.151e	c8		iny				iny 								; consume, loop back
.151f	80 d6		bra $14f7			bra 	_ETMConstant
.1521					_ETMCExit:
.1521	60		rts				rts
.1522					EXPCheckDecimalFollows:
.1522	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.1524	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1526	d0 19		bne $1541			bne 	_ETMCDExit
.1528	c8		iny				iny 								; consume token.
.1529	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.152b	5a		phy				phy									; save current position
.152c	48		pha				pha 								; save count of chars.
.152d	38		sec				sec 								; address into YX : y + codePtr+1
.152e	98		tya				tya
.152f	65 1c		adc $1c				adc 	codePtr
.1531	aa		tax				tax
.1532	a5 1d		lda $1d				lda 	codePtr+1
.1534	69 00		adc #$00			adc 	#0
.1536	a8		tay				tay
.1537	68		pla				pla 								; get count.
.1538	20 a3 24	jsr $24a3			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.153b	7a		ply				ply 								; go to next token.
.153c	98		tya				tya
.153d	38		sec				sec
.153e	71 1c		adc ($1c),y			adc 	(codePtr),y
.1540	a8		tay				tay
.1541					_ETMCDExit:
.1541	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1542					EXPUnaryAbs:
.1542	20 55 14	jsr $1455			jsr 	EXPEvalNumber 					; number to R0
.1545	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.1548	20 43 22	jsr $2243			jsr 	IFloatAbsoluteR0
.154b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.154c					EXPUnaryAsc:
.154c	20 7f 14	jsr $147f			jsr 	EXPEvalString 					; string to R0, zTemp0
.154f	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.1552	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.1554	f0 06		beq $155c			beq 	_EXAZero 						; if so return 0
.1556	5a		phy				phy 									; otherwise get first character
.1557	a0 01		ldy #$01			ldy 	#1
.1559	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.155b	7a		ply				ply
.155c					_EXAZero:
.155c	a2 0c		ldx #$0c			ldx 	#IFR0
.155e	20 01 26	jsr $2601			jsr 	IFloatSetByte
.1561	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1562					EXPUnaryChr:
.1562	20 73 14	jsr $1473			jsr 	EXPEvalInteger8 				; expr
.1565	48		pha				pha 									; push on stack
.1566	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.1569	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.156b	20 14 1f	jsr $1f14			jsr 	StringTempAllocate
.156e	68		pla				pla
.156f	20 49 1f	jsr $1f49			jsr 	StringTempWrite
.1572	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1573					EXPUnaryDec:
.1573	20 7f 14	jsr $147f			jsr 	EXPEvalString 					; string to R0, zTemp0
.1576	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.1579	5a		phy				phy
.157a	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.157c	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.157f	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.1581	f0 3b		beq $15be			beq 	_EUDError 						; empty string
.1583	aa		tax				tax
.1584	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1586					_EUDLoop:
.1586	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1588	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.158a	90 02		bcc $158e			bcc 	_EUDNoCase
.158c	e9 20		sbc #$20			sbc 	#$20
.158e					_EUDNoCase:
.158e	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1590	90 2c		bcc $15be			bcc 	_EUDError
.1592	c9 3a		cmp #$3a			cmp 	#'9'+1
.1594	90 0a		bcc $15a0			bcc 	_EUDOkay
.1596	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1598	90 24		bcc $15be			bcc 	_EUDError
.159a	c9 47		cmp #$47			cmp 	#'F'+1
.159c	b0 20		bcs $15be			bcs 	_EUDError
.159e	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.15a0					_EUDOkay:
.15a0	29 0f		and #$0f			and 	#15 							; make constant
.15a2	da		phx				phx
.15a3	48		pha				pha
.15a4	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.15a6	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.15a9	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.15ac	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.15af	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.15b2	68		pla				pla 									; pop constant and OR in
.15b3	fa		plx				plx
.15b4	05 0c		ora $0c				ora 	IFR0+IM0
.15b6	85 0c		sta $0c				sta 	IFR0+IM0
.15b8	c8		iny				iny 									; next
.15b9	ca		dex				dex
.15ba	d0 ca		bne $1586			bne 	_EUDLoop
.15bc	7a		ply				ply
.15bd	60		rts				rts
.15be					_EUDError:
.15be	4c 60 11	jmp $1160		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.15c1					EXPUnaryInlineDec:
.15c1	4c 40 11	jmp $1140		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.15c4					EXPUnaryNull:
.15c4	20 92 14	jsr $1492			jsr 	EXPTermValueR0
.15c7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.15c8					EXPUnaryFrac:
.15c8	20 55 14	jsr $1455			jsr 	EXPEvalNumber 					; number to R0
.15cb	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.15ce	20 a9 22	jsr $22a9			jsr 	IFloatFractionalR0
.15d1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.15d2					EXPUnaryInt:
.15d2	20 55 14	jsr $1455			jsr 	EXPEvalNumber 					; number to R0
.15d5	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.15d8	20 ff 22	jsr $22ff			jsr 	IFloatIntegerR0
.15db	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.15dc					EXPUnaryLen:
.15dc	20 7f 14	jsr $147f			jsr 	EXPEvalString 					; string to R0, zTemp0
.15df	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.15e2	b2 1e		lda ($1e)			lda 	(zTemp0)
.15e4	a2 0c		ldx #$0c			ldx 	#IFR0
.15e6	20 01 26	jsr $2601			jsr 	IFloatSetByte
.15e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.15ea					EXPUnaryParenthesis:
.15ea	20 55 14	jsr $1455			jsr 	EXPEvalNumber 					; number to R0
.15ed	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.15f0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.15f1					EXPUnaryRnd:
.15f1	20 55 14	jsr $1455			jsr 	EXPEvalNumber 				; number to R0
.15f4	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 				; )
.15f7	a2 0c		ldx #$0c			ldx 	#IFR0
.15f9	20 10 16	jsr $1610			jsr 	EXPLoadInRandom
.15fc	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.15fe	85 0f		sta $0f				sta 	IFR0+IExp
.1600	60		rts				rts
.1601					ExpUnaryRand:
.1601	20 60 14	jsr $1460			jsr 	EXPEvalInteger 				; integer to R0
.1604	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 				; )
.1607	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.1609	20 10 16	jsr $1610			jsr 	EXPLoadInRandom
.160c	20 70 21	jsr $2170			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.160f	60		rts				rts
.1610					EXPLoadInRandom:
.1610	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.1613	20 25 16	jsr $1625			jsr 	EXPRandom32
.1616	95 00		sta $00,x			sta 	IM0,x
.1618	20 25 16	jsr $1625			jsr 	EXPRandom32
.161b	95 01		sta $01,x			sta 	IM1,x
.161d	20 25 16	jsr $1625			jsr 	EXPRandom32
.1620	29 7f		and #$7f			and 	#$7F
.1622	95 02		sta $02,x			sta 	IM2,x
.1624	60		rts				rts
.1625					EXPRandom32:
.1625	5a		phy				phy
.1626	a0 08		ldy #$08			ldy 	#8
.1628	ad 3c 03	lda $033c			lda 	EXPSeed+0
.162b	0d 3d 03	ora $033d			ora 	EXPSeed+1
.162e	0d 3e 03	ora $033e			ora 	EXPSeed+2
.1631	0d 3f 03	ora $033f			ora 	EXPSeed+3
.1634	d0 08		bne $163e			bne 	_EXPRNoReset
.1636	ee 3c 03	inc $033c			inc 	EXPSeed+0
.1639	a0 10		ldy #$10			ldy 	#16
.163b	8c 3f 03	sty $033f			sty 	EXPSeed+3
.163e					_EXPRNoReset:
.163e	ad 3c 03	lda $033c			lda 	EXPSeed+0
.1641					_EXPRLoop:
.1641	0a		asl a				asl		a
.1642	2e 3d 03	rol $033d			rol 	EXPSeed+1
.1645	2e 3e 03	rol $033e			rol 	EXPSeed+2
.1648	2e 3f 03	rol $033f			rol 	EXPSeed+3
.164b	90 02		bcc $164f			bcc 	_EXPRNoEOR
.164d	49 c5		eor #$c5			eor 	#$C5
.164f					_EXPRNoEOR:
.164f	88		dey				dey
.1650	d0 ef		bne $1641			bne 	_EXPRLoop
.1652	8d 3c 03	sta $033c			sta 	EXPSeed+0
.1655	7a		ply				ply
.1656	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1657					EXPUnarySgn:
.1657	20 55 14	jsr $1455			jsr 	EXPEvalNumber 					; number to R0
.165a	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.165d	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.165f	20 a1 25	jsr $25a1			jsr 	IFloatCopyToRegister
.1662	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.1664	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.1667	a2 10		ldx #$10			ldx 	#IFR1
.1669	20 cd 22	jsr $22cd			jsr 	IFloatCompare 					; compare R1 vs 0.
.166c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.166d					EXPUnarySqr:
.166d	20 55 14	jsr $1455			jsr 	EXPEvalNumber 					; number to R0
.1670	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.1673	20 4b 22	jsr $224b			jsr 	IFloatSquareRootR0 				; square root.
.1676	b0 01		bcs $1679			bcs 	_EUSValue
.1678	60		rts				rts
.1679					_EUSValue:
.1679	4c 50 11	jmp $1150		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.167c					EXPUnaryHex:
.167c	20 60 14	jsr $1460			jsr 	EXPEvalInteger 					; expr
.167f	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.1682	5a		phy				phy
.1683	a9 10		lda #$10			lda 	#16
.1685	20 a0 23	jsr $23a0			jsr 	IFloatIntegerToStringR0
.1688	80 0a		bra $1694			bra 	EUSMain
.168a					EXPUnaryStr:
.168a	20 55 14	jsr $1455			jsr 	EXPEvalNumber 					; expr
.168d	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.1690	5a		phy				phy
.1691	20 fc 23	jsr $23fc			jsr 	IFloatFloatToStringR0 			; convert to string
.1694					EUSMain:
.1694	b0 18		bcs $16ae			bcs 	_EUSError
.1696	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1698	84 1f		sty $1f				sty 	zTemp0+1
.169a	48		pha				pha 									; save count
.169b	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.169d	20 14 1f	jsr $1f14			jsr 	StringTempAllocate
.16a0	fa		plx				plx 									; count in X
.16a1	a0 00		ldy #$00			ldy 	#0
.16a3					_EUSCopy:
.16a3	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.16a5	c8		iny				iny
.16a6	20 49 1f	jsr $1f49			jsr 	StringTempWrite
.16a9	ca		dex				dex
.16aa	d0 f7		bne $16a3			bne	 	_EUSCopy
.16ac	7a		ply				ply
.16ad	60		rts				rts
.16ae					_EUSError:
.16ae	4c 50 11	jmp $1150		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.16b1					EXPUnaryInlineString:
.16b1	18		clc				clc 								; physical address -> IM0,1
.16b2	98		tya				tya
.16b3	65 1c		adc $1c				adc 	codePtr
.16b5	85 0c		sta $0c				sta 	IFR0+IM0
.16b7	a5 1d		lda $1d				lda 	codePtr+1
.16b9	69 00		adc #$00			adc 	#0
.16bb	85 0d		sta $0d				sta 	IFR0+IM1
.16bd	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.16bf	a9 80		lda #$80			lda 	#$80
.16c1	85 0f		sta $0f				sta 	IFR0+IExp
.16c3	98		tya				tya	 								; skip over it.
.16c4	38		sec				sec
.16c5	71 1c		adc ($1c),y			adc 	(codePtr),y
.16c7	a8		tay				tay
.16c8	60		rts				rts
.16c9					_EXPUISRange:
.16c9	4c 50 11	jmp $1150		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.16cc					EXPUnaryLeft:
.16cc	20 12 17	jsr $1712			jsr 	EXPCommonStart 					; <string>,
.16cf	48		pha				pha 									; save string address on stack
.16d0	da		phx				phx
.16d1	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.16d3	48		pha				pha
.16d4	20 73 14	jsr $1473			jsr 	EXPEvalInteger8 				; characters to do
.16d7	80 44		bra $171d			bra 	EXPSubstringCommon
.16d9					EXPUnaryRight:
.16d9	20 12 17	jsr $1712			jsr 	EXPCommonStart 					; <string>,
.16dc	48		pha				pha 									; save string address on stack
.16dd	da		phx				phx
.16de	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.16e0	48		pha				pha
.16e1	20 73 14	jsr $1473			jsr 	EXPEvalInteger8 				; characters to do
.16e4	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.16e6	68		pla				pla
.16e7	38		sec				sec
.16e8	e5 1e		sbc $1e				sbc 	zTemp0
.16ea	b0 02		bcs $16ee			bcs 	_EUROffLeft
.16ec	a9 00		lda #$00			lda 	#0
.16ee					_EUROffLeft:
.16ee	48		pha				pha 									; start pos
.16ef	a9 ff		lda #$ff			lda 	#255
.16f1	80 2a		bra $171d			bra 	EXPSubstringCommon
.16f3					EXPUnaryMid:
.16f3	20 12 17	jsr $1712			jsr 	EXPCommonStart 					; <string>,
.16f6	48		pha				pha 									; save string address on stack
.16f7	da		phx				phx
.16f8	20 73 14	jsr $1473			jsr 	EXPEvalInteger8 				; characters start
.16fb	f0 12		beq $170f			beq 	_EUSError 						; 1 is left
.16fd	3a		dec a				dec 	a 								; zero based.
.16fe	48		pha				pha
.16ff	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.1701	c9 99		cmp #$99			cmp 	#PR_COMMA
.1703	f0 04		beq $1709			beq 	_EUMLength 						; if so m is provided
.1705	a9 ff		lda #$ff			lda 	#255 							; default m
.1707	80 14		bra $171d			bra 	EXPSubstringCommon
.1709					_EUMLength:
.1709	c8		iny				iny 									; consume comma
.170a	20 73 14	jsr $1473			jsr 	EXPEvalInteger8 				; characters to do
.170d	80 0e		bra $171d			bra 	EXPSubstringCommon
.170f					_EUSError:
.170f	4c 60 11	jmp $1160		jmp	ErrorV_value
.1712					EXPCommonStart:
.1712	20 7f 14	jsr $147f			jsr 	EXPEvalString
.1715	20 87 12	jsr $1287			jsr 	ERRCheckComma
.1718	a5 0c		lda $0c				lda 	IFR0+IM0
.171a	a6 0d		ldx $0d				ldx 	IFR0+IM1
.171c	60		rts				rts
.171d					EXPSubstringCommon:
.171d	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.171f	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; check right bracket.
.1722	68		pla				pla 									; start position
.1723	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.1725	fa		plx				plx 									; get string address to zTemp2.
.1726	86 23		stx $23				stx 	zTemp2+1
.1728	68		pla				pla
.1729	85 22		sta $22				sta 	zTemp2
.172b	38		sec				sec 									; length - start is the max count of chars
.172c	b2 22		lda ($22)			lda 	(zTemp2)
.172e	e5 21		sbc $21				sbc 	zTemp1+1
.1730	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.1732	b0 02		bcs $1736			bcs 	_EXPSSNoTrim
.1734	85 20		sta $20				sta 	zTemp1 							; update count with available
.1736					_EXPSSNoTrim:
.1736	a5 20		lda $20				lda 	zTemp1 							; chars required.
.1738	20 14 1f	jsr $1f14			jsr 	StringTempAllocate 				; allocate memory for it.
.173b	a5 20		lda $20				lda 	zTemp1 							; zero length string
.173d	f0 15		beq $1754			beq 	_EXPSSExit
.173f	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.1741	d2 22		cmp ($22)			cmp 	(zTemp2)
.1743	b0 0f		bcs $1754			bcs 	_EXPSSExit
.1745	5a		phy				phy
.1746	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.1748	c8		iny				iny 									; +1 for the length byte
.1749					_EXPSSCopy:
.1749	b1 22		lda ($22),y			lda 	(zTemp2),y
.174b	20 49 1f	jsr $1f49			jsr 	StringTempWrite
.174e	c8		iny				iny
.174f	c6 20		dec $20				dec 	zTemp1
.1751	d0 f6		bne $1749			bne 	_EXPSSCopy
.1753	7a		ply				ply
.1754					_EXPSSExit:
.1754	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1755					EXPUnaryVal:
.1755	20 7f 14	jsr $147f			jsr 	EXPEvalString 					; string to R0, zTemp0
.1758	20 7f 12	jsr $127f			jsr 	ERRCheckRParen 					; )
.175b	5a		phy				phy
.175c	18		clc				clc
.175d	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.175f	69 01		adc #$01			adc 	#1
.1761	aa		tax				tax
.1762	a5 1f		lda $1f				lda 	zTemp0+1
.1764	69 00		adc #$00			adc 	#0
.1766	a8		tay				tay
.1767	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.1769	20 63 24	jsr $2463			jsr 	IFloatStringToFloatR0 			; do conversion
.176c	b0 02		bcs $1770			bcs 	_EUVError
.176e	7a		ply				ply
.176f	60		rts				rts
.1770					_EUVError:
.1770	4c 60 11	jmp $1160		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1773					BinaryPrecedence:
>1773	02					.byte	 2	; $ef =
>1774	02					.byte	 2	; $f0 <>
>1775	02					.byte	 2	; $f1 <=
>1776	02					.byte	 2	; $f2 <
>1777	02					.byte	 2	; $f3 >=
>1778	02					.byte	 2	; $f4 >
>1779	01					.byte	 1	; $f5 XOR
>177a	01					.byte	 1	; $f6 OR
>177b	01					.byte	 1	; $f7 AND
>177c	04					.byte	 4	; $f8 DIV
>177d	04					.byte	 4	; $f9 MOD
>177e	04					.byte	 4	; $fa <<
>177f	04					.byte	 4	; $fb >>
>1780	04					.byte	 4	; $fc /
>1781	04					.byte	 4	; $fd *
>1782	03					.byte	 3	; $fe -
>1783	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1784					StandardTokens:
>1784	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>178b	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1791	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1797	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>179c	02 49 46				.byte	$02,$49,$46                             	; $84 if
>179f	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>17a5	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>17a8	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>17ad	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>17b2	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>17ba	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>17be	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>17c3	00					.byte	$00                                     	; $8c [[end]]
>17c4	00					.byte	$00                                     	; $8d [[shift]]
>17c5	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>17ca	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>17cf	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>17d2	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>17d7	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>17db	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>17e1	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>17e7	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>17ec	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>17f0	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>17f4	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>17f9	01 2c					.byte	$01,$2c                                 	; $99 ,
>17fb	01 3b					.byte	$01,$3b                                 	; $9a ;
>17fd	01 3a					.byte	$01,$3a                                 	; $9b :
>17ff	01 27					.byte	$01,$27                                 	; $9c '
>1801	01 29					.byte	$01,$29                                 	; $9d )
>1803	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1807	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>180d	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1811	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1815	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>181a	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>181e	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1825	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>182a	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>182f	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1834	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1839	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>183e	00					.byte	0											; $aa
>183f	00					.byte	0											; $ab
>1840	00					.byte	0											; $ac
>1841	00					.byte	0											; $ad
>1842	00					.byte	0											; $ae
>1843	00					.byte	0											; $af
>1844	00					.byte	0											; $b0
>1845	00					.byte	0											; $b1
>1846	00					.byte	0											; $b2
>1847	00					.byte	0											; $b3
>1848	00					.byte	0											; $b4
>1849	00					.byte	0											; $b5
>184a	00					.byte	0											; $b6
>184b	00					.byte	0											; $b7
>184c	00					.byte	0											; $b8
>184d	00					.byte	0											; $b9
>184e	00					.byte	0											; $ba
>184f	00					.byte	0											; $bb
>1850	00					.byte	0											; $bc
>1851	00					.byte	0											; $bd
>1852	00					.byte	0											; $be
>1853	00					.byte	0											; $bf
>1854	00					.byte	0											; $c0
>1855	00					.byte	0											; $c1
>1856	00					.byte	0											; $c2
>1857	00					.byte	0											; $c3
>1858	00					.byte	0											; $c4
>1859	00					.byte	0											; $c5
>185a	00					.byte	0											; $c6
>185b	00					.byte	0											; $c7
>185c	00					.byte	0											; $c8
>185d	00					.byte	0											; $c9
>185e	00					.byte	0											; $ca
>185f	00					.byte	0											; $cb
>1860	00					.byte	0											; $cc
>1861	00					.byte	0											; $cd
>1862	00					.byte	0											; $ce
>1863	00					.byte	0											; $cf
>1864	00					.byte	0											; $d0
>1865	00					.byte	0											; $d1
>1866	00					.byte	0											; $d2
>1867	00					.byte	0											; $d3
>1868	00					.byte	0											; $d4
>1869	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>186f	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1875	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>187d	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1884	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>188a	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1890	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1895	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>189a	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>189f	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>18a4	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>18a9	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>18af	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>18b4	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>18bc	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>18c3	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>18c8	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>18cd	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>18d3	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>18d8	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>18de	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>18e3	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>18e9	01 28					.byte	$01,$28                                 	; $eb (
>18eb	01 24					.byte	$01,$24                                 	; $ec $
>18ed	00					.byte	$00                                     	; $ed [[decimal]]
>18ee	00					.byte	$00                                     	; $ee [[string]]
>18ef	01 3d					.byte	$01,$3d                                 	; $ef =
>18f1	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>18f4	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>18f7	01 3c					.byte	$01,$3c                                 	; $f2 <
>18f9	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>18fc	01 3e					.byte	$01,$3e                                 	; $f4 >
>18fe	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1902	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1905	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1909	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>190d	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1911	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1914	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1917	01 2f					.byte	$01,$2f                                 	; $fc /
>1919	01 2a					.byte	$01,$2a                                 	; $fd *
>191b	01 2d					.byte	$01,$2d                                 	; $fe -
>191d	01 2b					.byte	$01,$2b                                 	; $ff +
>191f	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1920					VectorTable:
>1920	dd 26					.word	NotImplemented           ; $80 REPEAT
>1922	dd 26					.word	NotImplemented           ; $81 UNTIL
>1924	dd 26					.word	NotImplemented           ; $82 WHILE
>1926	dd 26					.word	NotImplemented           ; $83 WEND
>1928	dd 26					.word	NotImplemented           ; $84 IF
>192a	dd 26					.word	NotImplemented           ; $85 ENDIF
>192c	dd 26					.word	NotImplemented           ; $86 DO
>192e	dd 26					.word	NotImplemented           ; $87 LOOP
>1930	dd 26					.word	NotImplemented           ; $88 PROC
>1932	dd 26					.word	NotImplemented           ; $89 ENDPROC
>1934	dd 26					.word	NotImplemented           ; $8a FOR
>1936	dd 26					.word	NotImplemented           ; $8b NEXT
>1938	f9 10					.word	RUNEndOfLine             ; $8c [[END]]
>193a	37 11					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>193c	dd 26					.word	NotImplemented           ; $8e ELSE
>193e	2c 10					.word	NoExec01                 ; $8f THEN
>1940	2c 10					.word	NoExec02                 ; $90 TO
>1942	2c 10					.word	NoExec03                 ; $91 STEP
>1944	94 10					.word	CommandLET               ; $92 LET
>1946	2f 10					.word	Command_Print            ; $93 PRINT
>1948	dd 26					.word	NotImplemented           ; $94 INPUT
>194a	dd 26					.word	NotImplemented           ; $95 CALL
>194c	dd 26					.word	NotImplemented           ; $96 SYS
>194e	e0 10					.word	Command_REM              ; $97 REM
>1950	dd 26					.word	NotImplemented           ; $98 EXIT
>1952	2c 10					.word	NoExec04                 ; $99 ,
>1954	2c 10					.word	NoExec05                 ; $9a ;
>1956	2c 10					.word	NoExec06                 ; $9b :
>1958	e0 10					.word	Command_REM2             ; $9c '
>195a	2c 10					.word	NoExec07                 ; $9d )
>195c	dd 26					.word	NotImplemented           ; $9e DIM
>195e	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1960	d7 10					.word	Command_NEW              ; $a0 NEW
>1962	ed 10					.word	Command_RUN              ; $a1 RUN
>1964	3d 11					.word	Command_STOP             ; $a2 STOP
>1966	3a 11					.word	Command_END              ; $a3 END
>1968	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>196a	dd 26					.word	NotImplemented           ; $a5 LIST
>196c	dd 26					.word	NotImplemented           ; $a6 SAVE
>196e	dd 26					.word	NotImplemented           ; $a7 LOAD
>1970	dd 26					.word	NotImplemented           ; $a8 POKE
>1972	dd 26					.word	NotImplemented           ; $a9 DOKE
>1974	dd 26					.word	NotImplemented           ; $aa
>1976	dd 26					.word	NotImplemented           ; $ab
>1978	dd 26					.word	NotImplemented           ; $ac
>197a	dd 26					.word	NotImplemented           ; $ad
>197c	dd 26					.word	NotImplemented           ; $ae
>197e	dd 26					.word	NotImplemented           ; $af
>1980	dd 26					.word	NotImplemented           ; $b0
>1982	dd 26					.word	NotImplemented           ; $b1
>1984	dd 26					.word	NotImplemented           ; $b2
>1986	dd 26					.word	NotImplemented           ; $b3
>1988	dd 26					.word	NotImplemented           ; $b4
>198a	dd 26					.word	NotImplemented           ; $b5
>198c	dd 26					.word	NotImplemented           ; $b6
>198e	dd 26					.word	NotImplemented           ; $b7
>1990	dd 26					.word	NotImplemented           ; $b8
>1992	dd 26					.word	NotImplemented           ; $b9
>1994	dd 26					.word	NotImplemented           ; $ba
>1996	dd 26					.word	NotImplemented           ; $bb
>1998	dd 26					.word	NotImplemented           ; $bc
>199a	dd 26					.word	NotImplemented           ; $bd
>199c	dd 26					.word	NotImplemented           ; $be
>199e	dd 26					.word	NotImplemented           ; $bf
>19a0	dd 26					.word	NotImplemented           ; $c0
>19a2	dd 26					.word	NotImplemented           ; $c1
>19a4	dd 26					.word	NotImplemented           ; $c2
>19a6	dd 26					.word	NotImplemented           ; $c3
>19a8	dd 26					.word	NotImplemented           ; $c4
>19aa	dd 26					.word	NotImplemented           ; $c5
>19ac	dd 26					.word	NotImplemented           ; $c6
>19ae	dd 26					.word	NotImplemented           ; $c7
>19b0	dd 26					.word	NotImplemented           ; $c8
>19b2	dd 26					.word	NotImplemented           ; $c9
>19b4	dd 26					.word	NotImplemented           ; $ca
>19b6	dd 26					.word	NotImplemented           ; $cb
>19b8	dd 26					.word	NotImplemented           ; $cc
>19ba	dd 26					.word	NotImplemented           ; $cd
>19bc	dd 26					.word	NotImplemented           ; $ce
>19be	dd 26					.word	NotImplemented           ; $cf
>19c0	dd 26					.word	NotImplemented           ; $d0
>19c2	dd 26					.word	NotImplemented           ; $d1
>19c4	dd 26					.word	NotImplemented           ; $d2
>19c6	dd 26					.word	NotImplemented           ; $d3
>19c8	dd 26					.word	NotImplemented           ; $d4
>19ca	dd 26					.word	NotImplemented           ; $d5 DEEK(
>19cc	dd 26					.word	NotImplemented           ; $d6 PEEK(
>19ce	d9 16					.word	EXPUnaryRight            ; $d7 RIGHT$(
>19d0	cc 16					.word	EXPUnaryLeft             ; $d8 LEFT$(
>19d2	f3 16					.word	EXPUnaryMid              ; $d9 MID$(
>19d4	8a 16					.word	EXPUnaryStr              ; $da STR$(
>19d6	55 17					.word	EXPUnaryVal              ; $db VAL(
>19d8	57 16					.word	EXPUnarySgn              ; $dc SGN(
>19da	42 15					.word	EXPUnaryAbs              ; $dd ABS(
>19dc	dc 15					.word	EXPUnaryLen              ; $de LEN(
>19de	6d 16					.word	EXPUnarySqr              ; $df SQR(
>19e0	62 15					.word	EXPUnaryChr              ; $e0 CHR$(
>19e2	4c 15					.word	EXPUnaryAsc              ; $e1 ASC(
>19e4	dd 26					.word	NotImplemented           ; $e2 INKEY$(
>19e6	dd 26					.word	NotImplemented           ; $e3 EVENT(
>19e8	dd 26					.word	NotImplemented           ; $e4 TIME
>19ea	d2 15					.word	EXPUnaryInt              ; $e5 INT(
>19ec	c8 15					.word	EXPUnaryFrac             ; $e6 FRAC(
>19ee	73 15					.word	EXPUnaryDec              ; $e7 DEC(
>19f0	7c 16					.word	EXPUnaryHex              ; $e8 HEX$(
>19f2	f1 15					.word	EXPUnaryRnd              ; $e9 RND(
>19f4	01 16					.word	ExpUnaryRand             ; $ea RAND(
>19f6	ea 15					.word	EXPUnaryParenthesis      ; $eb (
>19f8	c4 15					.word	EXPUnaryNull             ; $ec $
>19fa	c1 15					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>19fc	b1 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>19fe	52 13					.word	EXPCompareEqual          ; $ef =
>1a00	6d 13					.word	EXPCompareNotEqual       ; $f0 <>
>1a02	76 13					.word	EXPCompareLessEqual      ; $f1 <=
>1a04	5b 13					.word	EXPCompareLess           ; $f2 <
>1a06	7f 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1a08	64 13					.word	EXPCompareGreater        ; $f4 >
>1a0a	ff 12					.word	EXPBinXor                ; $f5 XOR
>1a0c	f3 12					.word	EXPBinOr                 ; $f6 OR
>1a0e	e7 12					.word	EXPBinAnd                ; $f7 AND
>1a10	bf 12					.word	EXPBinIDiv               ; $f8 DIV
>1a12	d0 12					.word	EXPBinIMod               ; $f9 MOD
>1a14	ca 13					.word	EXPBinLeft               ; $fa <<
>1a16	d2 13					.word	EXPBinRight              ; $fb >>
>1a18	b3 12					.word	EXPBinFDiv               ; $fc /
>1a1a	aa 12					.word	EXPBinMul                ; $fd *
>1a1c	a1 12					.word	EXPBinSub                ; $fe -
>1a1e	98 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1a20					TOKDetokenise:
.1a20	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1a22	84 23		sty $23				sty 	zTemp2+1
.1a24	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.1a27					_TOKDLoop:
.1a27	20 56 1a	jsr $1a56			jsr 	TOKDGet 					; get next
.1a2a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1a2c	f0 26		beq $1a54			beq 	_TOKDExit
.1a2e	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1a30	f0 1d		beq $1a4f			beq 	_TOKDDataItem
.1a32	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1a34	f0 19		beq $1a4f			beq 	_TOKDDataItem
.1a36	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1a38	10 05		bpl $1a3f			bpl 	_TOKDNotToken
.1a3a	20 1e 1b	jsr $1b1e			jsr 	TOKDToken 					; token to text.
.1a3d	80 e8		bra $1a27			bra 	_TOKDLoop
.1a3f					_TOKDNotToken:
.1a3f	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1a41	90 05		bcc $1a48			bcc 	_TOKDNotIdentifier
.1a43	20 91 1a	jsr $1a91			jsr 	TOKDIdentifier
.1a46	80 df		bra $1a27			bra 	_TOKDLoop
.1a48					_TOKDNotIdentifier:
.1a48	a0 0a		ldy #$0a			ldy 	#10
.1a4a	20 da 1a	jsr $1ada			jsr 	TOKDInteger
.1a4d	80 d8		bra $1a27			bra 	_TOKDLoop
.1a4f					_TOKDDataItem:
.1a4f	20 6c 1a	jsr $1a6c			jsr 	TOKDDataItem
.1a52	80 d3		bra $1a27			bra 	_TOKDLoop
.1a54					_TOKDExit:
.1a54	18		clc				clc
.1a55	60		rts				rts
.1a56	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1a58	e6 22		inc $22				inc 	zTemp2
.1a5a	d0 02		bne $1a5e			bne 	_TKDGExit
.1a5c	e6 23		inc $23				inc 	zTemp2+1
.1a5e					_TKDGExit:
.1a5e	60		rts				rts
.1a5f					TOKDOutput:
.1a5f	8d 42 03	sta $0342			sta 	TOKLastCharacter
.1a62	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.1a65					TOKSetDetokeniseOutput:
.1a65	8e 40 03	stx $0340			stx 	TOKOutputMethod
.1a68	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.1a6b	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1a6c					TOKDDataItem:
.1a6c	a8		tay				tay 								; type in Y
.1a6d	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1a6f	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1a71	f0 02		beq $1a75			beq 	_TOKDDIsString
.1a73	a9 2e		lda #$2e			lda 	#'.'
.1a75					_TOKDDIsString:
.1a75	20 5f 1a	jsr $1a5f			jsr 	TOKDOutput 					; dump it
.1a78	20 56 1a	jsr $1a56			jsr 	TOKDGet 					; get length into X
.1a7b	aa		tax				tax
.1a7c					_TOKDDOutput:
.1a7c	ca		dex				dex 								; are we complete
.1a7d	30 08		bmi $1a87			bmi 	_TOKDDEnd
.1a7f	20 56 1a	jsr $1a56			jsr 	TOKDGet 					; get character and output it
.1a82	20 5f 1a	jsr $1a5f			jsr 	TOKDOutput
.1a85	80 f5		bra $1a7c			bra 	_TOKDDOutput
.1a87					_TOKDDEnd:
.1a87	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1a89	d0 05		bne $1a90			bne 	_TOKDDNotString
.1a8b	a9 22		lda #$22			lda 	#'"'
.1a8d	20 5f 1a	jsr $1a5f			jsr 	TOKDOutput
.1a90					_TOKDDNotString:
.1a90	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1a91					TOKDIdentifier:
.1a91	a0 ff		ldy #$ff			ldy 	#$FF
.1a93	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.1a96					_TOKDLoop:
.1a96	a8		tay				tay 								; token in Y
.1a97	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1a99	c0 64		cpy #$64			cpy 	#$64
.1a9b	f0 11		beq $1aae			beq 	_TOKDIOutput
.1a9d	a9 5f		lda #$5f			lda 	#'_'
.1a9f	c0 65		cpy #$65			cpy 	#$65
.1aa1	f0 0b		beq $1aae			beq 	_TOKDIOutput
.1aa3	98		tya				tya 								; handle a-z
.1aa4	18		clc				clc
.1aa5	69 21		adc #$21			adc	 	#$21
.1aa7	c0 5a		cpy #$5a			cpy 	#$5A
.1aa9	90 03		bcc $1aae			bcc 	_TOKDIOutput
.1aab	38		sec				sec 								; handle 0-9
.1aac	e9 4b		sbc #$4b			sbc 	#$4B
.1aae					_TOKDIOutput:
.1aae	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.1ab1	10 08		bpl $1abb			bpl 	_TOKDINoSpacing
.1ab3	48		pha				pha
.1ab4	20 50 1b	jsr $1b50			jsr 	TOKDSpacing
.1ab7	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.1aba	68		pla				pla
.1abb					_TOKDINoSpacing:
.1abb	20 5f 1a	jsr $1a5f			jsr 	TOKDOutput
.1abe	20 56 1a	jsr $1a56			jsr 	TOKDGet 					; get next token
.1ac1	c9 7c		cmp #$7c			cmp 	#$7C
.1ac3	90 d1		bcc $1a96			bcc 	_TOKDLoop
.1ac5	f0 12		beq $1ad9			beq 	_TOKDIExit 					; it's a number, no tail.
.1ac7	4a		lsr a				lsr 	a 							; string ?
.1ac8	90 07		bcc $1ad1			bcc 	_TOKDICheckArray
.1aca	48		pha				pha
.1acb	a9 24		lda #$24			lda 	#"$"
.1acd	20 5f 1a	jsr $1a5f			jsr 	TOKDOutput
.1ad0	68		pla				pla
.1ad1					_TOKDICheckArray:
.1ad1	4a		lsr a				lsr 	a 							; array ?
.1ad2	90 05		bcc $1ad9			bcc 	_TOKDIExit
.1ad4	a9 28		lda #$28			lda 	#"("
.1ad6	20 5f 1a	jsr $1a5f			jsr 	TOKDOutput
.1ad9					_TOKDIExit:
.1ad9	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1ada					TOKDInteger:
.1ada	5a		phy				phy 								; save base
.1adb	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1add	20 01 26	jsr $2601			jsr 	IFloatSetByte
.1ae0					_TOKDILoop:
.1ae0	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1ae2	c9 40		cmp #$40			cmp 	#$40
.1ae4	b0 1d		bcs $1b03			bcs 	_TOKDIHaveInteger
.1ae6	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1ae8	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.1aeb	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.1aee	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.1af1	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.1af4	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.1af7	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.1afa	20 56 1a	jsr $1a56			jsr 	TOKDGet 					; OR byte in.
.1afd	05 0c		ora $0c				ora 	IFR0+IM0
.1aff	85 0c		sta $0c				sta 	IFR0+IM0
.1b01	80 dd		bra $1ae0			bra 	_TOKDILoop
.1b03					_TOKDIHaveInteger:
.1b03	7a		ply				ply 								; restore base
.1b04	98		tya				tya 								; base in A
.1b05	20 a0 23	jsr $23a0			jsr 	IFloatIntegerToStringR0
.1b08	86 1e		stx $1e				stx 	zTemp0
.1b0a	84 1f		sty $1f				sty 	zTemp0+1
.1b0c	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b0e	20 50 1b	jsr $1b50			jsr 	TOKDSpacing 				; check spacing okay.
.1b11	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1b13					_TOKDOutput:
.1b13	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b15	20 5f 1a	jsr $1a5f			jsr 	TOKDOutput
.1b18	c8		iny				iny
.1b19	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b1b	d0 f6		bne $1b13			bne 	_TOKDOutput
.1b1d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1b1e					TOKDToken:
.1b1e	a2 84		ldx #$84			ldx 	#StandardTokens & $FF
.1b20	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1b22					_TOKDSearch:
.1b22	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1b24	84 1f		sty $1f				sty 	zTemp0+1
.1b26	aa		tax				tax 								; token ID in X.
.1b27					_TOKDFind:
.1b27	ca		dex				dex 								; reached the start
.1b28	10 0d		bpl $1b37			bpl 	_TOKDFound
.1b2a	38		sec				sec 								; go to next entry
.1b2b	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b2d	65 1e		adc $1e				adc 	zTemp0
.1b2f	85 1e		sta $1e				sta 	zTemp0
.1b31	90 f4		bcc $1b27			bcc 	_TOKDFind
.1b33	e6 1f		inc $1f				inc 	zTemp0+1
.1b35	80 f0		bra $1b27			bra 	_TOKDFind
.1b37					_TOKDFound:
.1b37	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1b39	f0 14		beq $1b4f			beq 	_TOKDExit
.1b3b	aa		tax				tax
.1b3c	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1b3e	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1b40	20 50 1b	jsr $1b50			jsr 	TOKDSpacing
.1b43					_TOKDOutput:
.1b43	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b45	20 a7 1e	jsr $1ea7			jsr 	TOKToLower
.1b48	20 5f 1a	jsr $1a5f			jsr 	TOKDOutput
.1b4b	c8		iny				iny
.1b4c	ca		dex				dex
.1b4d	d0 f4		bne $1b43			bne 	_TOKDOutput
.1b4f					_TOKDExit:
.1b4f	60		rts				rts
.1b50					TOKDSpacing:
.1b50	20 be 1e	jsr $1ebe			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1b53	90 0d		bcc $1b62			bcc 	_TOKDSExit
.1b55	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1b58	20 be 1e	jsr $1ebe			jsr 	TOKIsIdentifierElement
.1b5b	90 05		bcc $1b62			bcc 	_TOKDSExit
.1b5d	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1b5f	20 5f 1a	jsr $1a5f			jsr 	TOKDOutput
.1b62					_TOKDSExit:
.1b62	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1b63					PGMDeleteLine:
.1b63	20 16 1c	jsr $1c16			jsr 	PGMEndProgram 				; end of program into zTemp0
.1b66	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1b68	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1b6b	85 21		sta $21				sta 	zTemp1+1
.1b6d					_PGMDLoop:
.1b6d	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1b6f	38		sec				sec
.1b70	f0 3a		beq $1bac			beq 	_PGMDExit
.1b72	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1b74	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b76	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1b79	d0 08		bne $1b83			bne 	_PGMDNext
.1b7b	c8		iny				iny
.1b7c	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b7e	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1b81	f0 0d		beq $1b90			beq 	_PGMDDelete
.1b83					_PGMDNext:
.1b83	18		clc				clc
.1b84	b2 20		lda ($20)			lda 	(zTemp1)
.1b86	65 20		adc $20				adc 	zTemp1
.1b88	85 20		sta $20				sta 	zTemp1
.1b8a	90 e1		bcc $1b6d			bcc 	_PGMDLoop
.1b8c	e6 21		inc $21				inc 	zTemp1+1
.1b8e	80 dd		bra $1b6d			bra 	_PGMDLoop
.1b90					_PGMDDelete:
.1b90	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1b92	a8		tay				tay
.1b93					_PGMDCopy:
.1b93	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1b95	92 20		sta ($20)			sta 	(zTemp1)
.1b97	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1b99	c5 1e		cmp $1e				cmp 	zTemp0
.1b9b	d0 07		bne $1ba4			bne 	_PGMDNext2
.1b9d	a5 21		lda $21				lda 	zTemp1+1
.1b9f	c5 1f		cmp $1f				cmp 	zTemp0+1
.1ba1	18		clc				clc
.1ba2	f0 08		beq $1bac			beq 	_PGMDExit
.1ba4					_PGMDNext2:
.1ba4	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1ba6	d0 eb		bne $1b93			bne 	_PGMDCopy
.1ba8	e6 21		inc $21				inc 	zTemp1+1
.1baa	80 e7		bra $1b93			bra 	_PGMDCopy
.1bac					_PGMDExit:
.1bac	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1bad					PGMInsertLine:
.1bad	20 16 1c	jsr $1c16			jsr 	PGMEndProgram 				; end of program into zTemp0
.1bb0	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1bb2	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1bb5	85 21		sta $21				sta 	zTemp1+1
.1bb7					_PGMILoop:
.1bb7	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1bb9	f0 1c		beq $1bd7			beq 	_PGMIInsert
.1bbb	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1bbd	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bbf	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1bc2	c8		iny				iny
.1bc3	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bc5	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1bc8	b0 0d		bcs $1bd7			bcs 	_PGMIInsert 				; insert here.
.1bca	18		clc				clc
.1bcb	b2 20		lda ($20)			lda 	(zTemp1)
.1bcd	65 20		adc $20				adc 	zTemp1
.1bcf	85 20		sta $20				sta 	zTemp1
.1bd1	90 e4		bcc $1bb7			bcc 	_PGMILoop
.1bd3	e6 21		inc $21				inc 	zTemp1+1
.1bd5	80 e0		bra $1bb7			bra 	_PGMILoop
.1bd7					_PGMIInsert:
.1bd7	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1bda					_PGMIInsertLoop:
.1bda	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bdc	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1bde	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1be0	c5 1e		cmp $1e				cmp 	zTemp0
.1be2	d0 06		bne $1bea			bne 	_PGMINext
.1be4	a5 21		lda $21				lda 	zTemp1+1
.1be6	c5 1f		cmp $1f				cmp 	zTemp0+1
.1be8	f0 0a		beq $1bf4			beq 	_PGMIInserted
.1bea					_PGMINext:
.1bea	a5 1e		lda $1e				lda 	zTemp0
.1bec	d0 02		bne $1bf0			bne 	_PGMINoBorrow
.1bee	c6 1f		dec $1f				dec 	zTemp0+1
.1bf0					_PGMINoBorrow:
.1bf0	c6 1e		dec $1e				dec 	zTemp0
.1bf2	80 e6		bra $1bda			bra 	_PGMIInsertLoop
.1bf4					_PGMIInserted:
.1bf4	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1bf6					_PGMICopyLoop:
.1bf6	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1bf9	91 20		sta ($20),y			sta 	(zTemp1),y
.1bfb	c8		iny				iny
.1bfc	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1bff	d0 f5		bne $1bf6			bne 	_PGMICopyLoop
.1c01	18		clc				clc
.1c02	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1c03					PGMSetBaseAddress:
.1c03	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1c06	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1c09	60		rts				rts
.1c0a					PGMNewProgram:
.1c0a	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1c0c	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c0f	85 1f		sta $1f				sta 	zTemp0+1
.1c11	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1c13	92 1e		sta ($1e)			sta 	(zTemp0)
.1c15	60		rts				rts
.1c16					PGMEndProgram:
.1c16	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1c18	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c1b	85 1f		sta $1f				sta 	zTemp0+1
.1c1d					_PGMEPLoop:
.1c1d	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c1f	f0 0b		beq $1c2c			beq 	_PGMEPExit
.1c21	18		clc				clc
.1c22	65 1e		adc $1e				adc 	zTemp0
.1c24	85 1e		sta $1e				sta 	zTemp0
.1c26	90 f5		bcc $1c1d			bcc 	_PGMEPLoop
.1c28	e6 1f		inc $1f				inc 	zTemp0+1
.1c2a	80 f1		bra $1c1d			bra 	_PGMEPLoop
.1c2c					_PGMEPExit:
.1c2c	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1c2d					TOKResetElement:
.1c2d	9c 46 03	stz $0346			stz 	TOKElement
.1c30	60		rts				rts
.1c31					TOKWriteElement:
.1c31	da		phx				phx
.1c32	ae 46 03	ldx $0346			ldx 	TOKElement
.1c35	9d 47 03	sta $0347,x			sta 	TOKElementText,x
.1c38	9e 48 03	stz $0348,x			stz 	TOKElementText+1,x
.1c3b	fa		plx				plx
.1c3c	ee 46 03	inc $0346			inc 	TOKElement
.1c3f	60		rts				rts
.0346					TOKElement:
>0346							.fill 	1
.0347					TOKElementText:
>0347							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1c40					TOKTokeniseConstant:
.1c40	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1c42	48		pha				pha 								; save on stack
.1c43	29 c0		and #$c0			and 	#$C0
.1c45	05 0d		ora $0d				ora 	IFR0+IM1
.1c47	05 0e		ora $0e				ora 	IFR0+IM2
.1c49	f0 10		beq $1c5b			beq 	_TTCLess
.1c4b	da		phx				phx
.1c4c	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1c4e					_TTCShiftRight:
.1c4e	46 0e		lsr $0e				lsr 	IFR0+IM2
.1c50	66 0d		ror $0d				ror 	IFR0+IM1
.1c52	66 0c		ror $0c				ror 	IFR0+IM0
.1c54	ca		dex				dex
.1c55	d0 f7		bne $1c4e			bne 	_TTCShiftRight
.1c57	fa		plx				plx
.1c58	20 40 1c	jsr $1c40			jsr 	TOKTokeniseConstant
.1c5b					_TTCLess:
.1c5b	68		pla				pla
.1c5c	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1c5e	20 fa 1c	jsr $1cfa			jsr 	TOKWriteA
.1c61	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1c62					TOKTokeniseDecimals:
.1c62	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext 					; consume the .
.1c65	20 34 1e	jsr $1e34			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1c68	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1c6a	20 fa 1c	jsr $1cfa			jsr 	TOKWriteA
.1c6d	20 72 1c	jsr $1c72			jsr 	TOKOutputElementBuffer 		; then the buffer
.1c70	18		clc				clc
.1c71	60		rts				rts
.1c72					TOKOutputElementBuffer:
.1c72	ad 46 03	lda $0346			lda 	TOKElement 					; get count and write that
.1c75	20 fa 1c	jsr $1cfa			jsr 	TOKWriteA
.1c78	a8		tay				tay 								; put in Y
.1c79	f0 0c		beq $1c87			beq 	_TOEExit 					; exit if empty which is okay.
.1c7b	a2 01		ldx #$01			ldx 	#1
.1c7d					_TOELoop:
.1c7d	bd 46 03	lda $0346,x			lda 	TOKElement,x
.1c80	20 fa 1c	jsr $1cfa			jsr 	TOKWriteA
.1c83	e8		inx				inx
.1c84	88		dey				dey
.1c85	d0 f6		bne $1c7d			bne 	_TOELoop
.1c87					_TOEExit:
.1c87	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1c88					TOKTokenise:
.1c88	8c 47 04	sty $0447			sty 	TOKDataSource+1 			; save source routine pointer
.1c8b	8e 46 04	stx $0446			stx 	TOKDataSource
.1c8e	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1c90	2a		rol a				rol  	a
.1c91	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1c94	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1c96	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1c99					_TOKMainLoop:
.1c99	20 06 1d	jsr $1d06			jsr 	TOKGet 						; what follows.
.1c9c	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1c9e	f0 51		beq $1cf1			beq 	_TOKExit
.1ca0	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1ca2	d0 05		bne $1ca9			bne 	_TOKElement
.1ca4	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext
.1ca7	80 f0		bra $1c99			bra 	_TOKMainLoop
.1ca9					_TOKElement:
.1ca9	20 b2 1e	jsr $1eb2			jsr 	TOKIsDigit 					; is it 0..9
.1cac	90 0a		bcc $1cb8			bcc 	_TOKNotDigit
.1cae	20 0b 1e	jsr $1e0b			jsr 	TOKTokeniseInteger 			; get integer
.1cb1	b0 45		bcs $1cf8			bcs 	_TOKFail 					; did it fail ?
.1cb3	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1cb6	80 e1		bra $1c99			bra 	_TOKMainLoop
.1cb8					_TOKNotDigit:
.1cb8	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1cbb	d0 3b		bne $1cf8			bne 	_TOKFail 					; if so, we've a problem.
.1cbd	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1cbf	d0 07		bne $1cc8			bne 	_TOKNotHex
.1cc1	20 53 1d	jsr $1d53			jsr 	TOKTokeniseHexadecimal
.1cc4	b0 32		bcs $1cf8			bcs 	_TOKFail
.1cc6	80 d1		bra $1c99			bra 	_TOKMainLoop
.1cc8					_TOKNotHex:
.1cc8	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1cca	d0 07		bne $1cd3			bne 	_TOKNotDecimal
.1ccc	20 62 1c	jsr $1c62			jsr 	TOKTokeniseDecimals
.1ccf	b0 27		bcs $1cf8			bcs 	_TOKFail
.1cd1	80 c6		bra $1c99			bra 	_TOKMainLoop
.1cd3					_TOKNotDecimal:
.1cd3	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1cd5	d0 07		bne $1cde			bne 	_TOKNotString
.1cd7	20 79 1e	jsr $1e79			jsr 	TOKTokeniseString
.1cda	b0 1c		bcs $1cf8			bcs 	_TOKFail
.1cdc	80 bb		bra $1c99			bra 	_TOKMainLoop
.1cde					_TOKNotString:
.1cde	20 cf 1e	jsr $1ecf			jsr 	TOKIsAlpha 					; identifier ?
.1ce1	b0 07		bcs $1cea			bcs 	_TOKIdentifier
.1ce3	20 48 1e	jsr $1e48			jsr 	TOKTokenisePunctuation 		; punctuation
.1ce6	b0 10		bcs $1cf8			bcs 	_TOKFail
.1ce8	80 af		bra $1c99			bra 	_TOKMainLoop
.1cea					_TOKIdentifier:
.1cea	20 8d 1d	jsr $1d8d			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1ced	b0 09		bcs $1cf8			bcs 	_TOKFail
.1cef	80 a8		bra $1c99			bra 	_TOKMainLoop
.1cf1					_TOKExit:
.1cf1	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1cf3	20 fa 1c	jsr $1cfa			jsr 	TOKWriteA
.1cf6	18		clc				clc									; return with carry set.
.1cf7	60		rts				rts
.1cf8					_TOKFail:
.1cf8	38		sec				sec
.1cf9	60		rts				rts
.1cfa					TOKWriteA:
.1cfa	da		phx				phx
.1cfb	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1cfe	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1d01	fa		plx				plx
.1d02	ee 37 02	inc $0237			inc 	TOKLineSize
.1d05	60		rts				rts
.1d06					TOKGet:
.1d06	18		clc				clc
.1d07	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1d0a					TOKGetNext:
.1d0a	38		sec				sec
.1d0b	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.0446					TOKDataSource:
>0446							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1d0e					TOKFindToken:
.1d0e	a2 84		ldx #$84			ldx 	#StandardTokens & $FF 		; do this table
.1d10	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1d12	20 1d 1d	jsr $1d1d			jsr 	TOKFindTokenXY 				; find it, or not
.1d15	90 04		bcc $1d1b			bcc 	_TOKFTFail
.1d17	a2 00		ldx #$00			ldx 	#0
.1d19	38		sec				sec
.1d1a	60		rts				rts
.1d1b					_TOKFTFail
.1d1b	18		clc				clc
.1d1c	60		rts				rts
.1d1d					TOKFindTokenXY:
.1d1d	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1d1f	84 1f		sty $1f				sty 	zTemp0+1
.1d21	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1d23	8d 48 04	sta $0448			sta 	TOKCurrent
.1d26					_TOKFindLoop:
.1d26	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1d28	18		clc				clc 		 						; clear carry in case of fail
.1d29	30 17		bmi $1d42			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1d2b	cd 46 03	cmp $0346			cmp 	TOKElement 					; compare against the element length
.1d2e	d0 13		bne $1d43			bne 	_TOKNext 					; different, try next.
.1d30	aa		tax				tax 								; number of chars to compare.
.1d31	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1d33					_TOKCompare:
.1d33	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1d35	d9 46 03	cmp $0346,y			cmp 	TOKElementText-1,y
.1d38	d0 09		bne $1d43			bne 	_TOKNext 					; different ? try next
.1d3a	c8		iny				iny 								; compare next two
.1d3b	ca		dex				dex
.1d3c	d0 f5		bne $1d33			bne 	_TOKCompare 				; until done X characters.
.1d3e	38		sec				sec
.1d3f	ad 48 04	lda $0448			lda 	TOKCurrent 					; return current ID.
.1d42					_TOKExit:
.1d42	60		rts				rts
.1d43					_TOKNext:
.1d43	ee 48 04	inc $0448			inc 	TOKCurrent 					; increment token #
.1d46	38		sec				sec 								; add length+1 to ptr
.1d47	b2 1e		lda ($1e)			lda 	(zTemp0)
.1d49	65 1e		adc $1e				adc 	zTemp0
.1d4b	85 1e		sta $1e				sta 	zTemp0
.1d4d	90 d7		bcc $1d26			bcc 	_TOKFindLoop
.1d4f	e6 1f		inc $1f				inc 	zTemp0+1
.1d51	80 d3		bra $1d26			bra 	_TOKFindLoop
.0448					TOKCurrent:
>0448							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1d53					TOKTokeniseHexadecimal:
.1d53	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext 					; consume the $
.1d56	a2 0c		ldx #$0c			ldx 	#IFR0
.1d58	20 ff 25	jsr $25ff			jsr 	IFloatSetZero 				; set R0 = 0
.1d5b					_TTHLoop:
.1d5b	20 06 1d	jsr $1d06			jsr 	TOKGet 						; keep getting and copying while numeric.
.1d5e	20 dc 1e	jsr $1edc			jsr 	TOKIsHexadecimal
.1d61	90 20		bcc $1d83			bcc 	_TTHDone
.1d63	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1d65	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.1d68	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.1d6b	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.1d6e	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.1d71	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext
.1d74	38		sec				sec 								; convert to decimal.
.1d75	e9 30		sbc #$30			sbc 	#48
.1d77	c9 0a		cmp #$0a			cmp 	#10
.1d79	90 02		bcc $1d7d			bcc 	_TTHNotAlpha
.1d7b	e9 07		sbc #$07			sbc 	#7
.1d7d					_TTHNotAlpha:
.1d7d	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1d7f	85 0c		sta $0c				sta 	IFR0+IM0
.1d81	80 d8		bra $1d5b			bra 	_TTHLoop
.1d83					_TTHDone:
.1d83	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1d85	20 fa 1c	jsr $1cfa			jsr 	TOKWriteA
.1d88	20 40 1c	jsr $1c40			jsr 	TOKTokeniseConstant 		; write integer out.
.1d8b	18		clc				clc
.1d8c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1d8d					TOKTokeniseIdentifier:
.1d8d	20 2d 1c	jsr $1c2d			jsr 	TOKResetElement 			; extract an identifier
.1d90					_TOKGetIdentifier:
.1d90	20 06 1d	jsr $1d06			jsr 	TOKGet
.1d93	20 9c 1e	jsr $1e9c			jsr 	TOKToUpper
.1d96	20 be 1e	jsr $1ebe			jsr 	TOKIsIdentifierElement
.1d99	90 08		bcc $1da3			bcc 	_TOKEndIdent
.1d9b	20 31 1c	jsr $1c31			jsr		TOKWriteElement
.1d9e	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext
.1da1	80 ed		bra $1d90			bra 	_TOKGetIdentifier
.1da3					_TOKEndIdent:
.1da3	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1da5	d0 06		bne $1dad			bne 	_TOKNotString
.1da7	20 31 1c	jsr $1c31			jsr 	TOKWriteElement 			; add it
.1daa	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext 					; consume it
.1dad					_TOKNotString:
.1dad	20 06 1d	jsr $1d06			jsr 	TOKGet 						; finally check for (
.1db0	c9 28		cmp #$28			cmp 	#"("
.1db2	d0 06		bne $1dba			bne 	_TOKNoArray
.1db4	20 31 1c	jsr $1c31			jsr 	TOKWriteElement 			; add it
.1db7	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext 					; consume it
.1dba					_TOKNoArray:
.1dba	20 0e 1d	jsr $1d0e			jsr 	TOKFindToken 				; find it
.1dbd	90 05		bcc $1dc4			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1dbf	20 fa 1c	jsr $1cfa			jsr 	TOKWriteA
.1dc2	18		clc				clc
.1dc3	60		rts				rts
.1dc4					_TOKIsVariable:
.1dc4	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1dc6					_TOKOutputBuffer:
.1dc6	bd 47 03	lda $0347,x			lda 	TOKElementText,x 			; output it translated.
.1dc9	20 f2 1d	jsr $1df2			jsr 	TOKTranslateIdentifier
.1dcc	20 fa 1c	jsr $1cfa			jsr 	TOKWriteA
.1dcf	e8		inx				inx
.1dd0	bd 47 03	lda $0347,x			lda 	TOKElementText,x
.1dd3	20 be 1e	jsr $1ebe			jsr 	TOKIsIdentifierElement
.1dd6	b0 ee		bcs $1dc6			bcs 	_TOKOutputBuffer
.1dd8	a8		tay				tay 								; last char in Y
.1dd9	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1ddb	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1ddd	f0 0e		beq $1ded			beq 	_TOKIVExit
.1ddf	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1de1	d0 04		bne $1de7			bne 	_TOKIVCheckArray 			; no, check for (
.1de3	1a		inc a				inc 	a 							; token is $7D
.1de4	bc 48 03	ldy $0348,x			ldy 	TOKElementText+1,x 			; get next one.
.1de7					_TOKIVCheckArray:
.1de7	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1de9	d0 02		bne $1ded			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1deb	1a		inc a				inc 	a
.1dec	1a		inc a				inc 	a
.1ded					_TOKIVExit:
.1ded	20 fa 1c	jsr $1cfa			jsr 	TOKWriteA 					; ending token
.1df0	18		clc				clc
.1df1	60		rts				rts
.1df2					TOKTranslateIdentifier:
.1df2	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1df4	f0 0f		beq $1e05			beq 	_TTI64
.1df6	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1df8	f0 0e		beq $1e08			beq 	_TTI65
.1dfa	38		sec				sec
.1dfb	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1dfd	10 03		bpl $1e02			bpl 	_TTIExit
.1dff	18		clc				clc 								; map 09 onto 26-35
.1e00	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1e02					_TTIExit:
.1e02	09 40		ora #$40			ora 	#$40 						; correct range.
.1e04	60		rts				rts
.1e05	a9 64		lda #$64	_TTI64:	lda 	#$64
.1e07	60		rts				rts
.1e08	a9 65		lda #$65	_TTI65:	lda 	#$65
.1e0a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1e0b					TOKTokeniseInteger:
.1e0b	20 34 1e	jsr $1e34			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e0e	a2 47		ldx #$47			ldx 	#TOKElementText & $FF
.1e10	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1e12	ad 46 03	lda $0346			lda		TOKElement
.1e15	20 63 24	jsr $2463			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1e18	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1e1b	f0 12		beq $1e2f			beq 	_TOKNotLineNumber
.1e1d	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1e1f	d0 0c		bne $1e2d			bne 	_TOKBadLineNumeber
.1e21	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1e23	8d 38 02	sta $0238			sta 	TOKLineNumber
.1e26	a5 0d		lda $0d				lda 	IFR0+IM1
.1e28	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1e2b	18		clc				clc
.1e2c	60		rts				rts
.1e2d					_TOKBadLineNumeber:
.1e2d	38		sec				sec
.1e2e	60		rts				rts
.1e2f					_TOKNotLineNumber:
.1e2f	20 40 1c	jsr $1c40			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1e32	18		clc				clc
.1e33	60		rts				rts
.1e34					TOKExtractInteger:
.1e34	20 2d 1c	jsr $1c2d			jsr 	TOKResetElement 			; restart
.1e37					_TTILoop:
.1e37	20 06 1d	jsr $1d06			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e3a	20 b2 1e	jsr $1eb2			jsr 	TOKIsDigit
.1e3d	90 08		bcc $1e47			bcc 	_TOKEIExit
.1e3f	20 31 1c	jsr $1c31			jsr 	TOKWriteElement
.1e42	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext
.1e45	80 f0		bra $1e37			bra 	_TTILoop
.1e47					_TOKEIExit:
.1e47	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1e48					TOKTokenisePunctuation:
.1e48	20 2d 1c	jsr $1c2d			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1e4b	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext
.1e4e	20 31 1c	jsr $1c31			jsr 	TOKWriteElement
.1e51	20 06 1d	jsr $1d06			jsr 	TOKGet 						; what follows ?
.1e54	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1e56	f0 10		beq $1e68			beq 	_TTPOne
.1e58	20 c6 1e	jsr $1ec6			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1e5b	b0 0b		bcs $1e68			bcs 	_TTPOne 					; these speed things up a bit.
.1e5d	20 31 1c	jsr $1c31			jsr 	TOKWriteElement 			; this is what we will search for.
.1e60	20 0e 1d	jsr $1d0e			jsr 	TOKFindToken
.1e63	b0 0a		bcs $1e6f			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1e65	ce 46 03	dec $0346			dec 	TOKElement 					; make it a single character
.1e68					_TTPOne:
.1e68	20 0e 1d	jsr $1d0e			jsr 	TOKFindToken 				; look for one character punctuation
.1e6b	b0 07		bcs $1e74			bcs 	_TTPOutputExit 				; we found it
.1e6d	38		sec				sec 								; not recognised.
.1e6e	60		rts				rts
.1e6f					_TTPConsumeExit:
.1e6f	48		pha				pha
.1e70	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext 					; get the 2nd char out.
.1e73	68		pla				pla
.1e74					_TTPOutputExit:
.1e74	20 fa 1c	jsr $1cfa			jsr  	TOKWriteA 					; write token out
.1e77	18		clc				clc
.1e78	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1e79					TOKTokeniseString:
.1e79	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext 					; consume the "
.1e7c	20 2d 1c	jsr $1c2d			jsr 	TOKResetElement 			; start getting the string
.1e7f					_TOKTSLoop:
.1e7f	20 06 1d	jsr $1d06			jsr 	TOKGet 						; check EOL
.1e82	c9 00		cmp #$00			cmp 	#0
.1e84	f0 0c		beq $1e92			beq 	_TOKTSExit
.1e86	20 0a 1d	jsr $1d0a			jsr 	TOKGetNext 					; get and consume
.1e89	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1e8b	f0 05		beq $1e92			beq 	_TOKTSExit
.1e8d	20 31 1c	jsr $1c31			jsr 	TOKWriteElement
.1e90	80 ed		bra $1e7f			bra 	_TOKTSLoop
.1e92					_TOKTSExit:
.1e92	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1e94	20 fa 1c	jsr $1cfa			jsr 	TOKWriteA
.1e97	20 72 1c	jsr $1c72			jsr 	TOKOutputElementBuffer
.1e9a	18		clc				clc
.1e9b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1e9c					TOKToUpper:
.1e9c	c9 61		cmp #$61			cmp 	#"a"
.1e9e	90 06		bcc $1ea6			bcc 	_TTUNotLower
.1ea0	c9 7b		cmp #$7b			cmp 	#"z"+1
.1ea2	b0 02		bcs $1ea6			bcs 	_TTUNotLower
.1ea4	49 20		eor #$20			eor 	#$20
.1ea6					_TTUNotLower:
.1ea6	60		rts				rts
.1ea7					TOKToLower:
.1ea7	c9 41		cmp #$41			cmp 	#"A"
.1ea9	90 06		bcc $1eb1			bcc 	_TTUNotUpper
.1eab	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1ead	b0 02		bcs $1eb1			bcs 	_TTUNotUpper
.1eaf	49 20		eor #$20			eor 	#$20
.1eb1					_TTUNotUpper:
.1eb1	60		rts				rts
.1eb2					TOKIsDigit:
.1eb2	c9 30		cmp #$30			cmp 	#"0"
.1eb4	90 06		bcc $1ebc			bcc 	TOKFail
.1eb6	c9 3a		cmp #$3a			cmp 	#"9"+1
.1eb8	b0 02		bcs $1ebc			bcs 	TOKFail
.1eba					TOKSucceed:
.1eba	38		sec				sec
.1ebb	60		rts				rts
.1ebc					TOKFail:
.1ebc	18		clc				clc
.1ebd	60		rts				rts
.1ebe					TOKIsIdentifierElement:
.1ebe	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1ec0	f0 f8		beq $1eba			beq 	TOKSucceed
.1ec2	c9 5f		cmp #$5f			cmp 	#"_"
.1ec4	f0 f4		beq $1eba			beq 	TOKSucceed 					; else fall through to alphanumeric
.1ec6					TOKIsAlphaNumeric:
.1ec6	20 cf 1e	jsr $1ecf			jsr 	TOKIsAlpha
.1ec9	b0 ef		bcs $1eba			bcs 	TOKSucceed
.1ecb	20 b2 1e	jsr $1eb2			jsr 	TOKIsDigit
.1ece	60		rts				rts
.1ecf					TOKIsAlpha:
.1ecf	20 9c 1e	jsr $1e9c			jsr 	TOKToUpper
.1ed2	c9 41		cmp #$41			cmp 	#"A"
.1ed4	90 e6		bcc $1ebc			bcc 	TOKFail
.1ed6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1ed8	b0 e2		bcs $1ebc			bcs 	TOKFail
.1eda	80 de		bra $1eba			bra 	TOKSucceed
.1edc					TOKIsHexadecimal:
.1edc	20 b2 1e	jsr $1eb2			jsr		TOKIsDigit
.1edf	b0 d9		bcs $1eba			bcs 	TOKSucceed
.1ee1	20 cf 1e	jsr $1ecf			jsr 	TOKIsAlpha
.1ee4	90 d6		bcc $1ebc			bcc 	TOKFail
.1ee6	c9 47		cmp #$47			cmp 	#"F"+1
.1ee8	b0 d2		bcs $1ebc			bcs 	TOKFail
.1eea	80 ce		bra $1eba			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.1eec					StringSystemInitialise:
.1eec	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh 			; last byte of memory
.1eef	3a		dec a				dec 	a
.1ef0	8d 4b 04	sta $044b			sta 	stringMemory+1
.1ef3	85 1f		sta $1f				sta 	zTemp0+1
.1ef5	a9 ff		lda #$ff			lda 	#$FF
.1ef7	8d 4a 04	sta $044a			sta 	stringMemory
.1efa	85 1e		sta $1e				sta 	zTemp0
.1efc	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.1efe	92 1e		sta ($1e)			sta 	(zTemp0)
.1f00	60		rts				rts
.1f01					StringSpaceInitialise:
.1f01	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.1f03	8d 49 04	sta $0449			sta 	stringInitialised
.1f06	ad 4a 04	lda $044a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.1f09	8d 4c 04	sta $044c			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.1f0c	ad 4b 04	lda $044b			lda 	stringMemory+1
.1f0f	3a		dec a				dec 	a
.1f10	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1f13	60		rts				rts
.1f14					StringTempAllocate:
.1f14	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.1f16	b0 2e		bcs $1f46			bcs 	_STALength
.1f18	2c 49 04	bit $0449			bit 	stringInitialised 			; already initialised
.1f1b	30 05		bmi $1f22			bmi 	_STAAllocate
.1f1d	48		pha				pha 								; save value to subtract.
.1f1e	20 01 1f	jsr $1f01			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.1f21	68		pla				pla 								; restore it
.1f22					_STAAllocate:
.1f22	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.1f24	18		clc				clc  								; deliberate allows one more
.1f25	6d 4c 04	adc $044c			adc 	stringTempPointer 			; subtract from temp pointer
.1f28	8d 4c 04	sta $044c			sta 	stringTempPointer
.1f2b	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.1f2d	85 26		sta $26				sta 	zsTemp 						; and zsTemp
.1f2f	ad 4d 04	lda $044d			lda 	stringTempPointer+1
.1f32	69 ff		adc #$ff			adc 	#$FF
.1f34	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1f37	85 27		sta $27				sta 	zsTemp+1
.1f39	85 0d		sta $0d				sta 	IFR0+IM1
.1f3b	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.1f3d	a9 80		lda #$80			lda 	#$80
.1f3f	85 0f		sta $0f				sta 	IFR0+IExp
.1f41	a9 00		lda #$00			lda 	#0 							; clear the target string
.1f43	92 26		sta ($26)			sta 	(zsTemp)
.1f45	60		rts				rts
.1f46					_STALength:
.1f46	4c 4e 12	jmp $124e		jmp	ErrorV_string
.1f49					StringTempWrite:
.1f49	5a		phy				phy
.1f4a	48		pha				pha
.1f4b	b2 26		lda ($26)			lda 	(zsTemp)
.1f4d	1a		inc a				inc 	a
.1f4e	92 26		sta ($26)			sta 	(zsTemp)
.1f50	a8		tay				tay
.1f51	68		pla				pla
.1f52	91 26		sta ($26),y			sta 	(zsTemp),y
.1f54	7a		ply				ply
.1f55	60		rts				rts
.0026					zsTemp:
>0026							.fill 	2
.0449					stringInitialised:
>0449							.fill 	1
.044a					stringMemory:
>044a							.fill 	2
.044c					stringTempPointer:
>044c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.1f56					VARCreate:
.1f56	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.1f57					VARFind:
.1f57	18		clc				clc
.1f58	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.1f59					VARGetInfo:
.1f59	98		tya				tya 								; calculate the address of the identifier start.
.1f5a	18		clc				clc
.1f5b	65 1c		adc $1c				adc 	codePtr
.1f5d	8d 4e 04	sta $044e			sta 	VARNameAddress
.1f60	a5 1d		lda $1d				lda 	codePtr+1
.1f62	69 00		adc #$00			adc 	#0
.1f64	8d 4f 04	sta $044f			sta 	VARNameAddress+1
.1f67	9c 50 04	stz $0450			stz 	VARHash
.1f6a	a2 00		ldx #$00			ldx 	#0
.1f6c					_VARCopyName:
.1f6c	18		clc				clc 								; update the sum hash.
.1f6d	ad 50 04	lda $0450			lda 	VARHash
.1f70	71 1c		adc ($1c),y			adc 	(codePtr),y
.1f72	8d 50 04	sta $0450			sta 	VARHash
.1f75	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.1f77	c8		iny				iny
.1f78	9d 52 04	sta $0452,x			sta 	VARBuffer,x
.1f7b	e8		inx				inx
.1f7c	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.1f7e	90 ec		bcc $1f6c			bcc 	_VARCopyName
.1f80	8d 51 04	sta $0451			sta 	VARType 					; save type byte
.1f83	29 03		and #$03			and 	#3 							; type is 0-3
.1f85	0a		asl a				asl 	a
.1f86	0a		asl a				asl 	a
.1f87	0a		asl a				asl 	a 							; now a word offset, also CC
.1f88	85 1e		sta $1e				sta 	zTemp0
.1f8a	ad 50 04	lda $0450			lda 	VARHash 					; force into range of hash entries per type.
.1f8d	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.1f8f	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.1f91	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.1f92	69 74		adc #$74			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.1f94	85 1e		sta $1e				sta 	zTemp0
.1f96	8d 72 04	sta $0472			sta 	VARHashEntry
.1f99	a9 04		lda #$04			lda 	#VARHashTables >> 8
.1f9b	69 00		adc #$00			adc 	#0
.1f9d	85 1f		sta $1f				sta 	zTemp0+1
.1f9f	8d 73 04	sta $0473			sta 	VARHashEntry+1
.1fa2	60		rts				rts
.1fa3					VARClearHashTables:
.1fa3	a2 00		ldx #$00			ldx 	#0
.1fa5					_VCHRLoop:
.1fa5	a9 00		lda #$00			lda 	#0
.1fa7	9d 74 04	sta $0474,x			sta 	VARHashTables,x
.1faa	e8		inx				inx
.1fab	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.1fad	d0 f6		bne $1fa5			bne 	_VCHRLoop
.1faf	60		rts				rts
.044e					VARNameAddress:
>044e							.fill 	2
.0450					VARHash:
>0450							.fill 	1
.0451					VARType:
>0451							.fill 	1
.0452					VARBuffer:
>0452							.fill 	32
.0472					VARHashEntry:
>0472							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0474					VARHashTables:
>0474							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.1fb0					VARCheckSimple:
.1fb0	aa		tax				tax 								; save in X
.1fb1	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1fb3	c9 7c		cmp #$7c			cmp 	#$7C
.1fb5	d0 15		bne $1fcc			bne 	_VCSComplex
.1fb7	c8		iny				iny 								; consume the second byte, the type.
.1fb8	8a		txa				txa  								; character (40-7F) x 4
.1fb9	0a		asl a				asl 	a
.1fba	0a		asl a				asl  	a
.1fbb	18		clc				clc
.1fbc	69 94		adc #$94			adc 	#FastVariables & $FF
.1fbe	85 0c		sta $0c				sta 	IFR0+IM0
.1fc0	a9 04		lda #$04			lda 	#FastVariables >> 8
.1fc2	69 00		adc #$00			adc 	#0
.1fc4	85 0d		sta $0d				sta 	IFR0+IM1
.1fc6	64 0e		stz $0e				stz 	IFR0+IM2
.1fc8	64 0f		stz $0f				stz 	IFR0+IExp
.1fca	38		sec				sec 								; it's a reference
.1fcb	60		rts				rts
.1fcc					_VCSComplex:
.1fcc	88		dey				dey	 								; extract information.
.1fcd	20 59 1f	jsr $1f59			jsr 	VARGetInfo
>1fd0	db						.byte 	$DB
.1fd1	20 57 1f	jsr $1f57			jsr 	VARFind 					; search for variable
.1fd4	b0 03		bcs $1fd9			bcs 	_VCSHaveVariable
.1fd6	20 56 1f	jsr $1f56			jsr 	VARCreate 					; create variable
.1fd9					_VCSHaveVariable:
.1fd9	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.1fdb	85 0c		sta $0c				sta 	IFR0+IM0
.1fdd	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.1fdf	ad 51 04	lda $0451			lda 	VARType 					; number/string bit into carry
.1fe2	6a		ror a				ror 	a
.1fe3	a9 00		lda #$00			lda 	#0
.1fe5	6a		ror a				ror 	a 							; now $00 or $80
.1fe6	85 0f		sta $0f				sta 	IFR0+IExp
.1fe8	38		sec				sec 								; it's a reference
.1fe9	60		rts				rts
.0494					FastVariables:
>0494							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.1fea					IFInitialise:
.1fea	9c 04 05	stz $0504			stz 	IFStackIndex
.1fed	60		rts				rts
.1fee					IFloatSubtract:
.1fee	da		phx				phx
.1fef	a2 0c		ldx #$0c			ldx 	#IFR0
.1ff1	20 0a 26	jsr $260a			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.1ff4	fa		plx				plx
.1ff5					IFloatAdd:
.1ff5	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.1ff7	05 0f		ora $0f				ora 	IFR0+IExp
.1ff9	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.1ffb	d0 4e		bne $204b			bne 	_IFloatAddDecimals 			; decimal version.
.1ffd					_IFAddSubMantissa:
.1ffd	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.1fff	45 0f		eor $0f				eor 	IFR0+IExp
.2001	29 40		and #$40			and 	#IFSign
.2003	d0 21		bne $2026			bne 	_IFloatSubMantissa
.2005	18		clc				clc 								; do the actual addition
.2006	a5 0c		lda $0c			lda 	IFR0+IM0
.2008	75 00		adc $00,x		adc 		IM0,x
.200a	85 0c		sta $0c			sta 	IFR0+IM0
.200c	a5 0d		lda $0d			lda 	IFR0+IM1
.200e	75 01		adc $01,x		adc 		IM1,x
.2010	85 0d		sta $0d			sta 	IFR0+IM1
.2012	a5 0e		lda $0e			lda 	IFR0+IM2
.2014	75 02		adc $02,x		adc 		IM2,x
.2016	85 0e		sta $0e			sta 	IFR0+IM2
.2018	10 29		bpl $2043			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.201a	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.201c	20 2e 26	jsr $262e			jsr 	IFloatShiftRight
.201f	20 58 26	jsr $2658			jsr 	IFloatIncExponent
.2022	d0 1f		bne $2043			bne 	_IFloatAddExit
.2024	38		sec				sec 								; overflowed numerically.
.2025	60		rts				rts
.2026					_IFloatSubMantissa:
.2026	38		sec				sec 								; do the subtraction R0-Rx
.2027	a5 0c		lda $0c			lda 	IFR0+IM0
.2029	f5 00		sbc $00,x		sbc 		IM0,x
.202b	85 0c		sta $0c			sta 	IFR0+IM0
.202d	a5 0d		lda $0d			lda 	IFR0+IM1
.202f	f5 01		sbc $01,x		sbc 		IM1,x
.2031	85 0d		sta $0d			sta 	IFR0+IM1
.2033	a5 0e		lda $0e			lda 	IFR0+IM2
.2035	f5 02		sbc $02,x		sbc 		IM2,x
.2037	85 0e		sta $0e			sta 	IFR0+IM2
.2039	b0 08		bcs $2043			bcs 	_IFloatAddExit 				; no borrow so we are done.
.203b	a2 0c		ldx #$0c			ldx 	#IFR0
.203d	20 12 26	jsr $2612			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2040	20 0a 26	jsr $260a			jsr 	IFloatNegate 				; negate
.2043					_IFloatAddExit:
.2043	18		clc				clc
.2044	60		rts				rts
.2045					_IFloatZeroAdd:
.2045	fa		plx				plx 								; return this value in R0
.2046	20 90 25	jsr $2590			jsr 	IFloatCopyFromRegister
.2049	18		clc				clc
.204a	60		rts				rts
.204b					_IFloatAddDecimals:
.204b	20 f8 25	jsr $25f8			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.204e	f0 f3		beq $2043			beq 	_IFloatAddExit
.2050	20 36 26	jsr $2636			jsr 	IFloatNormalise 			; normalise RX
.2053	da		phx				phx 								; normalise R0
.2054	a2 0c		ldx #$0c			ldx 	#IFR0
.2056	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero
.2059	f0 ea		beq $2045			beq 	_IFloatZeroAdd
.205b	20 36 26	jsr $2636			jsr 	IFloatNormalise
.205e	fa		plx				plx
.205f	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.2061	29 3f		and #$3f			and 	#IFXMask
.2063	38		sec				sec
.2064	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2066	85 0a		sta $0a				sta 	iTemp0
.2068	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.206a	29 3f		and #$3f			and 	#IFXMask
.206c	38		sec				sec
.206d	e9 20		sbc #$20			sbc 	#$20
.206f	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.2071	b0 02		bcs $2075			bcs 	_IFloatHaveLarger
.2073	a5 0a		lda $0a				lda 	iTemp0
.2075					_IFloatHaveLarger:
.2075	18		clc				clc 								; get the actual one back.
.2076	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2078	20 85 20	jsr $2085			jsr 	_IFShiftXToA
.207b	da		phx				phx
.207c	a2 0c		ldx #$0c			ldx 	#IFR0
.207e	20 85 20	jsr $2085			jsr 	_IFShiftXToA
.2081	fa		plx				plx
.2082	4c fd 1f	jmp $1ffd			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2085					_IFShiftXToA:
.2085	8d fc 04	sta $04fc			sta 	IFTarget
.2088	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero 			; check adding zero ?
.208b	f0 11		beq $209e			beq 	_IFSXExit
.208d					_IFSXLoop:
.208d	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.208f	29 3f		and #$3f			and 	#IFXMask
.2091	cd fc 04	cmp $04fc			cmp 	IFTarget
.2094	f0 08		beq $209e			beq 	_IFSXExit
.2096	20 2e 26	jsr $262e			jsr 	IFloatShiftRight
.2099	20 58 26	jsr $2658			jsr 	IFloatIncExponent
.209c	80 ef		bra $208d			bra 	_IFSXLoop
.209e					_IFSXExit:
.209e	60		rts				rts
.04fc					IFTarget:
>04fc							.fill 	1
.209f					IFloatMultiply:
.209f	8e fc 04	stx $04fc			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.20a2	20 5a 21	jsr $215a			jsr 	IFCalculateNewSign
.20a5	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.20a7	05 0f		ora $0f				ora 	IFR0+IExp
.20a9	29 3f		and #$3f			and 	#IFXMask
.20ab	15 01		ora $01,x			ora 	IM1,x
.20ad	05 0d		ora $0d				ora 	IFR0+IM1
.20af	15 02		ora $02,x			ora 	IM2,x
.20b1	05 0e		ora $0e				ora 	IFR0+IM2
.20b3	d0 0a		bne $20bf			bne 	_IFMStandard
.20b5	20 db 25	jsr $25db			jsr 	IFloatMultiply8BitRx
.20b8	ad fe 04	lda $04fe			lda 	IFNewSign
.20bb	85 0f		sta $0f				sta 	IFR0+IExp
.20bd	18		clc				clc
.20be	60		rts				rts
.20bf					_IFMStandard:
.20bf	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.20c1	20 51 21	jsr $2151			jsr 	IFMSignExtend
.20c4	8d fd 04	sta $04fd			sta 	IFNewExponent
.20c7	a5 0f		lda $0f				lda 	IFR0+IExp
.20c9	20 51 21	jsr $2151			jsr 	IFMSignExtend
.20cc	18		clc				clc
.20cd	6d fd 04	adc $04fd			adc 	IFNewExponent
.20d0	8d fd 04	sta $04fd			sta 	IFNewExponent
.20d3	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.20d5	20 a1 25	jsr $25a1			jsr 	IFloatCopyToRegister
.20d8	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.20da	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.20dd					_IFMLoop:
.20dd	a2 18		ldx #$18			ldx 	#IFRTemp
.20df	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero
.20e2	f0 3a		beq $211e			beq 	_IFMExit
.20e4	ae fc 04	ldx $04fc			ldx 	IFTarget 					; look at adder MSB
.20e7	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.20e9	10 03		bpl $20ee			bpl	 	_IFMTargetOkay
.20eb	20 42 21	jsr $2142			jsr 	_IFMShiftAll
.20ee					_IFMTargetOkay:
.20ee	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.20f0	29 01		and #$01			and 	#1
.20f2	f0 16		beq $210a			beq 	_IFMNoAdd
.20f4	ae fc 04	ldx $04fc			ldx 	IFTarget 					; add adder
.20f7	18		clc				clc
.20f8	a5 0c		lda $0c			lda 	IFR0+IM0
.20fa	75 00		adc $00,x		adc 		IM0,x
.20fc	85 0c		sta $0c			sta 	IFR0+IM0
.20fe	a5 0d		lda $0d			lda 	IFR0+IM1
.2100	75 01		adc $01,x		adc 		IM1,x
.2102	85 0d		sta $0d			sta 	IFR0+IM1
.2104	a5 0e		lda $0e			lda 	IFR0+IM2
.2106	75 02		adc $02,x		adc 		IM2,x
.2108	85 0e		sta $0e			sta 	IFR0+IM2
.210a					_IFMNoAdd:
.210a	a5 0e		lda $0e				lda 	IFR0+IM2
.210c	10 03		bpl $2111			bpl 	_IFMResultOkay
.210e	20 42 21	jsr $2142			jsr 	_IFMShiftAll
.2111					_IFMResultOkay:
.2111	a2 18		ldx #$18			ldx 	#IFRTemp
.2113	20 2e 26	jsr $262e			jsr 	IFloatShiftRight
.2116	ae fc 04	ldx $04fc			ldx 	IFTarget
.2119	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.211c	80 bf		bra $20dd			bra 	_IFMLoop
.211e					_IFMExit:
.211e	ad fd 04	lda $04fd			lda 	IFNewExponent 				; validate new exponent.
.2121	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2123	90 0f		bcc $2134			bcc 	_IFMOkay
.2125	c9 e0		cmp #$e0			cmp 	#$E0
.2127	b0 0b		bcs $2134			bcs 	_IFMOkay
.2129	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.212b	f0 13		beq $2140			beq 	_IFMError
.212d	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.212f	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.2132	18		clc				clc
.2133	60		rts				rts
.2134					_IFMOkay:
.2134	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2136	0d fe 04	ora $04fe			ora 	IFNewSign
.2139	85 0f		sta $0f				sta 	IFR0+IExp
.213b	18		clc				clc
.213c	60		rts				rts
.213d	4c ff ff	jmp $ffff			jmp 	$FFFF
.2140					_IFMError:
.2140	38		sec				sec
.2141	60		rts				rts
.2142					_IFMShiftAll:
.2142	a2 0c		ldx #$0c			ldx 	#IFR0
.2144	20 2e 26	jsr $262e			jsr 	IFloatShiftRight
.2147	ae fc 04	ldx $04fc			ldx 	IFTarget
.214a	20 2e 26	jsr $262e			jsr 	IFloatShiftRight
.214d	ee fd 04	inc $04fd			inc 	IFNewExponent
.2150	60		rts				rts
.2151					IFMSignExtend:
.2151	29 3f		and #$3f			and 	#IFXMask
.2153	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2155	90 02		bcc $2159			bcc 	_IFMNoSXX
.2157	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2159					_IFMNoSXX:
.2159	60		rts				rts
.215a					IFCalculateNewSign:
.215a	b5 03		lda $03,x			lda 	IExp,x
.215c	45 0f		eor $0f				eor 	IFR0+IExp
.215e	29 40		and #$40			and 	#IFSign
.2160	8d fe 04	sta $04fe			sta 	IFNewSign
.2163	60		rts				rts
.04fd					IFNewExponent:
>04fd							.fill 	1
.04fe					IFNewSign:
>04fe							.fill 	1
.2164					IFloatDivideInteger:
.2164	20 7d 21	jsr $217d			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2167	b0 06		bcs $216f			bcs 	_IFDIExit
.2169	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.216b	20 90 25	jsr $2590			jsr 	IFloatCopyFromRegister
.216e	18		clc				clc
.216f					_IFDIExit:
.216f	60		rts				rts
.2170					IFloatModulusInteger:
.2170	20 7d 21	jsr $217d			jsr 	IFloatDivideIntegerCommon
.2173	b0 07		bcs $217c			bcs 	_IFMIExit
.2175	ae fc 04	ldx $04fc			ldx 	IFTarget
.2178	20 90 25	jsr $2590			jsr 	IFloatCopyFromRegister
.217b	18		clc				clc
.217c					_IFMIExit:
.217c	60		rts				rts
.217d					IFloatDivideIntegerCommon:
.217d	8e fc 04	stx $04fc			stx 	IFTarget  					; this is s1, s0 = R0
.2180	20 5a 21	jsr $215a			jsr 	IFCalculateNewSign 			; calculate sign of result
.2183	20 ab 21	jsr $21ab			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2186	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.2188	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero
.218b	f0 1c		beq $21a9			beq 	_IFDIDivZero
.218d	ae fc 04	ldx $04fc			ldx 	IFTarget 					; zero Rx (S1)
.2190	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.2193	5a		phy				phy
.2194	a0 18		ldy #$18			ldy 	#24
.2196					_IFDILoop:
.2196	20 bc 21	jsr $21bc			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2199	20 c8 21	jsr $21c8			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.219c	88		dey				dey
.219d	d0 f7		bne $2196			bne 	_IFDILoop 					; do it 24 times
.219f	7a		ply				ply
.21a0	ad fe 04	lda $04fe			lda 	IFNewSign 					; set sign of result.
.21a3	29 40		and #$40			and 	#IFSign
.21a5	85 1b		sta $1b				sta 	IFRTemp+IExp
.21a7	18		clc				clc 								; is okay.
.21a8	60		rts				rts
.21a9					_IFDIDivZero:
.21a9	38		sec				sec
.21aa	60		rts				rts
.21ab					IFDCopyRXToRTemp:
.21ab	b5 00		lda $00,x			lda 	IM0,x
.21ad	85 18		sta $18				sta 	IFRTemp+IM0
.21af	b5 01		lda $01,x			lda 	IM1,x
.21b1	85 19		sta $19				sta 	IFRTemp+IM1
.21b3	b5 02		lda $02,x			lda 	IM2,x
.21b5	85 1a		sta $1a				sta 	IFRTemp+IM2
.21b7	b5 03		lda $03,x			lda 	IExp,x
.21b9	85 1b		sta $1b				sta 	IFRTemp+IExp
.21bb	60		rts				rts
.21bc					IFDShiftSTempS1Left:
.21bc	a2 18		ldx #$18			ldx 	#IFRTemp
.21be	20 26 26	jsr $2626			jsr 	IFloatShiftLeft
.21c1	ae fc 04	ldx $04fc			ldx 	IFTarget
.21c4	20 27 26	jsr $2627			jsr 	IFloatRotateLeft
.21c7	60		rts				rts
.21c8					IFDTrySubtract:
.21c8	ae fc 04	ldx $04fc			ldx 	IFTarget 					; s1 = Rx
.21cb	38		sec				sec 								; subtract, saving the results on the stack.
.21cc	b5 00		lda $00,x			lda 	IM0,x
.21ce	e5 0c		sbc $0c				sbc 	IFR0+IM0
.21d0	48		pha				pha
.21d1	b5 01		lda $01,x			lda 	IM1,x
.21d3	e5 0d		sbc $0d				sbc 	IFR0+IM1
.21d5	48		pha				pha
.21d6	b5 02		lda $02,x			lda 	IM2,x
.21d8	e5 0e		sbc $0e				sbc 	IFR0+IM2
.21da	b0 03		bcs $21df			bcs 	_IFDCanSubtract
.21dc	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.21dd	68		pla				pla
.21de	60		rts				rts
.21df					_IFDCanSubtract:
.21df	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.21e1	68		pla				pla
.21e2	95 01		sta $01,x			sta 	IM1,x
.21e4	68		pla				pla
.21e5	95 00		sta $00,x			sta 	IM0,x
.21e7	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.21e9	d0 06		bne $21f1			bne 	_IFDCSExit
.21eb	e6 19		inc $19				inc 	IFRTemp+IM1
.21ed	d0 02		bne $21f1			bne 	_IFDCSExit
.21ef	e6 1a		inc $1a				inc 	IFRTemp+IM2
.21f1					_IFDCSExit:
.21f1	60		rts				rts
.21f2					IFloatBitwiseAnd:
.21f2	5a		phy				phy
.21f3	20 37 22	jsr $2237			jsr 	IFPreProcessBitwise 		; set up everything.
.21f6	d0 0f		bne $2207			bne 	_IFBAExit
.21f8					_IFBALoop:
.21f8	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.21fb	35 00		and $00,x			and 	IM0,x
.21fd	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2200	e8		inx				inx
.2201	c8		iny				iny
.2202	c0 03		cpy #$03			cpy 	#3
.2204	d0 f2		bne $21f8			bne 	_IFBALoop
.2206	18		clc				clc
.2207					_IFBAExit:
.2207	7a		ply				ply
.2208	60		rts				rts
.2209					IFloatBitwiseOr:
.2209	5a		phy				phy
.220a	20 37 22	jsr $2237			jsr 	IFPreProcessBitwise 		; set up everything.
.220d	d0 0f		bne $221e			bne 	_IFBAExit
.220f					_IFBALoop:
.220f	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2212	15 00		ora $00,x			ora 	IM0,x
.2214	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2217	e8		inx				inx
.2218	c8		iny				iny
.2219	c0 03		cpy #$03			cpy 	#3
.221b	d0 f2		bne $220f			bne 	_IFBALoop
.221d	18		clc				clc
.221e					_IFBAExit:
.221e	7a		ply				ply
.221f	60		rts				rts
.2220					IFloatBitwiseXor:
.2220	5a		phy				phy
.2221	20 37 22	jsr $2237			jsr 	IFPreProcessBitwise 		; set up everything.
.2224	d0 0f		bne $2235			bne 	_IFBAExit
.2226					_IFBALoop:
.2226	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2229	55 00		eor $00,x			eor 	IM0,x
.222b	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.222e	e8		inx				inx
.222f	c8		iny				iny
.2230	c0 03		cpy #$03			cpy 	#3
.2232	d0 f2		bne $2226			bne 	_IFBALoop
.2234	18		clc				clc
.2235					_IFBAExit:
.2235	7a		ply				ply
.2236	60		rts				rts
.2237					IFPreProcessBitwise:
.2237	a0 00		ldy #$00			ldy 	#0 							; set index.
.2239	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.223b	15 03		ora $03,x			ora 	IExp,x
.223d	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.223f	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2241	38		sec				sec 								; carry set just in cases.
.2242	60		rts				rts
.2243					IFloatAbsoluteR0:
.2243	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.2245	29 bf		and #$bf			and 	#IFSign ^ 255
.2247	85 0f		sta $0f				sta 	IFR0+IExp
.2249	18		clc				clc
.224a	60		rts				rts
.224b					IFloatSquareRootR0:
.224b	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.224d	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero
.2250	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.2252	29 40		and #$40			and 	#IFSign
.2254	d0 2f		bne $2285			bne 	_IFSRFail
.2256	20 36 26	jsr $2636			jsr 	IFloatNormalise 			; it will work better !
.2259	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.225b	20 a1 25	jsr $25a1			jsr 	IFloatCopyToRegister
.225e	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2260	20 51 21	jsr $2151			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2263	18		clc				clc
.2264	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2266	85 0f		sta $0f				sta 	IFR0+IExp
.2268	4a		lsr a				lsr 	a 							; which we can halve.
.2269	38		sec				sec 								; convert back
.226a	e9 17		sbc #$17			sbc 	#23
.226c	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.226e	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.2270	20 87 22	jsr $2287			jsr 	_IFSRNewton
.2273	20 87 22	jsr $2287			jsr 	_IFSRNewton
.2276	20 87 22	jsr $2287			jsr 	_IFSRNewton
.2279	20 87 22	jsr $2287			jsr 	_IFSRNewton
.227c	18		clc				clc
.227d	60		rts				rts
.227e					_IFSRZero:
.227e	a2 0c		ldx #$0c			ldx 	#IFR0
.2280	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.2283	18		clc				clc
.2284	60		rts				rts
.2285					_IFSRFail:
.2285	38		sec				sec
.2286	60		rts				rts
.2287					_IFSRNewton:
.2287	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.2289	20 4e 25	jsr $254e			jsr 	IFloatPushRx
.228c	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.228e	20 4e 25	jsr $254e			jsr 	IFloatPushRx
.2291	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.2293	20 22 23	jsr $2322			jsr 	IFloatDivideFloat
.2296	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2298	20 6f 25	jsr $256f			jsr 	IFloatPullRx
.229b	20 f5 1f	jsr $1ff5			jsr 	IFloatAdd 					; now guess + original/guess
.229e	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.22a0	20 2e 26	jsr $262e			jsr 	IFloatShiftRight
.22a3	a2 10		ldx #$10			ldx 	#IFR1
.22a5	20 6f 25	jsr $256f			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.22a8	60		rts				rts
.22a9					IFloatFractionalR0:
.22a9	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.22ab	29 3f		and #$3f			and 	#IFXMask
.22ad	f0 17		beq $22c6			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.22af	20 43 22	jsr $2243			jsr 	IFloatAbsoluteR0 			; absolute value R9
.22b2	a2 0c		ldx #$0c			ldx 	#IFR0
.22b4	20 36 26	jsr $2636			jsr 	IFloatNormalise 			; normalise R0
.22b7	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.22b9	20 a1 25	jsr $25a1			jsr 	IFloatCopyToRegister
.22bc	20 ff 22	jsr $22ff			jsr 	IFloatIntegerR0 			; take integer part of R0
.22bf	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.22c1	20 ee 1f	jsr $1fee			jsr 	IFloatSubtract
.22c4	80 05		bra $22cb			bra 	_FIPExit
.22c6					_FIPZero:
.22c6	a2 0c		ldx #$0c			ldx 	#IFR0
.22c8	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.22cb					_FIPExit:
.22cb	18		clc				clc
.22cc	60		rts				rts
.22cd					IFloatCompare:
.22cd	20 ee 1f	jsr $1fee			jsr 	IFloatSubtract 				; subtract R0 from RX.
.22d0	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.22d2	05 0f		ora $0f				ora 	IFR0+IExp
.22d4	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.22d6	29 3f		and #$3f			and 	#IFXMask
.22d8	d0 19		bne $22f3			bne 	_IFCNonInteger
.22da	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero 			; check if zero
.22dd	f0 0f		beq $22ee			beq 	_IFCZero
.22df					_IFCReturnSign:
.22df	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.22e1	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.22e3	48		pha				pha
.22e4	a9 01		lda #$01			lda 	#1
.22e6	20 01 26	jsr $2601			jsr 	IFloatSetByte 				; return to +1
.22e9	68		pla				pla 								; sign bit back
.22ea	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.22ec	18		clc				clc
.22ed	60		rts				rts
.22ee					_IFCZero:
.22ee	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.22f1	18		clc				clc
.22f2	60		rts				rts
.22f3					_IFCNonInteger:
.22f3	a5 0c		lda $0c				lda 	IFR0+IM0
.22f5	29 00		and #$00			and		#$00
.22f7	05 0d		ora $0d				ora 	IFR0+IM1
.22f9	05 0e		ora $0e				ora 	IFR0+IM2
.22fb	f0 f1		beq $22ee			beq 	_IFCZero 					; near enough !
.22fd	80 e0		bra $22df			bra 	_IFCReturnSign 				; return the sign of the difference.
.22ff					IFloatIntegerR0:
.22ff	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2301	29 3f		and #$3f			and 	#IFXMask
.2303	f0 1b		beq $2320			beq 	_FIPExit 					; if so do nothing
.2305	a2 0c		ldx #$0c			ldx 	#IFR0
.2307	20 36 26	jsr $2636			jsr 	IFloatNormalise 			; normalise
.230a	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero 			; is it zero ?
.230d	f0 0e		beq $231d			beq 	_FIPZero 					; if so return zero.
.230f					_FIPShift:
.230f	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2311	29 20		and #$20			and 	#$20 						; still -ve
.2313	f0 0b		beq $2320			beq 	_FIPExit
.2315	20 2e 26	jsr $262e			jsr 	IFloatShiftRight 			; shift mantissa right
.2318	20 58 26	jsr $2658			jsr 	IFloatIncExponent 			; bump exponent
.231b	80 f2		bra $230f			bra 	_FIPShift
.231d					_FIPZero:
.231d	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.2320					_FIPExit:
.2320	18		clc				clc
.2321	60		rts				rts
.2322					IFloatDivideFloat:
.2322	8e fc 04	stx $04fc			stx 	IFTarget  					; this is s1, s0 = R0
.2325	20 5a 21	jsr $215a			jsr 	IFCalculateNewSign 			; calculate sign of result
.2328	20 36 26	jsr $2636			jsr 	IFloatNormalise 			; normalise RX
.232b	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.232d	20 36 26	jsr $2636			jsr 	IFloatNormalise
.2330	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero
.2333	f0 56		beq $238b			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2335	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.2337	20 51 21	jsr $2151			jsr 	IFMSignExtend
.233a	8d fd 04	sta $04fd			sta 	IFNewExponent
.233d	ae fc 04	ldx $04fc			ldx 	IFTarget 					; calculate s1.exponent
.2340	b5 03		lda $03,x			lda 	IExp,x
.2342	20 51 21	jsr $2151			jsr 	IFMSignExtend
.2345	38		sec				sec
.2346	ed fd 04	sbc $04fd			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2349	38		sec				sec
.234a	e9 17		sbc #$17			sbc 	#23
.234c	8d fd 04	sta $04fd			sta 	IFNewExponent
.234f	20 8d 23	jsr $238d			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2352	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.2354	10 08		bpl $235e			bpl 	_IFDFNoShiftResult
.2356	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.2358	20 2e 26	jsr $262e			jsr 	IFloatShiftRight
.235b	ee fd 04	inc $04fd			inc 	IFNewExponent
.235e					_IFDFNoShiftResult:
.235e	ad fd 04	lda $04fd			lda 	IFNewExponent 				; underflow/overflow check.
.2361	30 06		bmi $2369			bmi 	_IFDFCheckUnderflow
.2363	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2365	b0 24		bcs $238b			bcs 	_IFDFDivZero
.2367	80 11		bra $237a			bra		_IFDFExit
.2369					_IFDFCheckUnderflow:
.2369	ad fd 04	lda $04fd			lda 	IFNewExponent 				; shift into a legal exponent.
.236c	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.236e	b0 0a		bcs $237a			bcs 	_IFDFExit
.2370	ee fd 04	inc $04fd			inc 	IFNewExponent
.2373	a2 18		ldx #$18			ldx 	#IFRTemp
.2375	20 2e 26	jsr $262e			jsr 	IFloatShiftRight
.2378	80 ef		bra $2369			bra 	_IFDFCheckUnderflow
.237a					_IFDFExit:
.237a	ad fd 04	lda $04fd			lda 	IFNewExponent 				; combine exponent and sign.
.237d	29 3f		and #$3f			and 	#IFXMask
.237f	0d fe 04	ora $04fe			ora 	IFNewSign
.2382	85 1b		sta $1b				sta 	IFRTemp+IExp
.2384	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.2386	20 90 25	jsr $2590			jsr 	IFloatCopyFromRegister
.2389	18		clc				clc
.238a	60		rts				rts
.238b					_IFDFDivZero:
.238b	38		sec				sec
.238c	60		rts				rts
.238d					IFloatDivideSupport:
.238d	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.238f	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.2392	5a		phy				phy 								; main division loop x 23
.2393	a0 17		ldy #$17			ldy 	#23
.2395					_IFDSLoop:
.2395	20 c8 21	jsr $21c8			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2398	20 bc 21	jsr $21bc			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.239b	88		dey				dey
.239c	d0 f7		bne $2395			bne 	_IFDSLoop 					; do it 24 times
.239e	7a		ply				ply
.239f	60		rts				rts
.23a0					IFloatIntegerToStringR0:
.23a0	8d ff 04	sta $04ff			sta 	IFBase 						; save base to use.
.23a3	20 80 26	jsr $2680			jsr 	IFloatBufferReset			; empty buffer
.23a6	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.23a8	29 3f		and #$3f			and 	#IFXMask
.23aa	d0 1e		bne $23ca			bne 	_IFIFail
.23ac	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.23ae	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero
.23b1	f0 0e		beq $23c1			beq 	_IFINotNegative
.23b3	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.23b5	29 40		and #$40			and 	#IFSign
.23b7	f0 08		beq $23c1			beq 	_IFINotNegative
.23b9	a9 2d		lda #$2d			lda 	#"-"						; output -
.23bb	20 8f 26	jsr $268f			jsr 	IFloatBufferWrite
.23be	20 0a 26	jsr $260a			jsr 	IFloatNegate 				; tidy up !
.23c1					_IFINotNegative:
.23c1	20 cc 23	jsr $23cc			jsr 	_IFIRecursiveConvert 		; start converting
.23c4	20 87 26	jsr $2687			jsr 	IFloatGetBufferAddress
.23c7	18		clc				clc
.23c8	80 01		bra $23cb			bra 	_IFIExit
.23ca					_IFIFail:
.23ca	38		sec				sec
.23cb					_IFIExit:
.23cb	60		rts				rts
.23cc					_IFIRecursiveConvert:
.23cc	a2 10		ldx #$10			ldx 	#IFR1
.23ce	20 a1 25	jsr $25a1			jsr 	IFloatCopyToRegister 		; R0->R1
.23d1	a2 0c		ldx #$0c			ldx 	#IFR0
.23d3	ad ff 04	lda $04ff			lda 	IFBase 						; Base -> R0
.23d6	20 01 26	jsr $2601			jsr 	IFloatSetByte
.23d9	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.23db	20 64 21	jsr $2164			jsr 	IFloatDivideInteger
.23de	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.23e0	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero
.23e3	f0 09		beq $23ee			beq 	_IFIOutDigit
.23e5	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.23e7	48		pha				pha
.23e8	20 cc 23	jsr $23cc			jsr 	_IFIRecursiveConvert 		; convert the divider
.23eb	68		pla				pla
.23ec	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.23ee					_IFIOutDigit:
.23ee	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.23f0	c9 0a		cmp #$0a			cmp	 	#10
.23f2	90 02		bcc $23f6			bcc 	_IFINotHex
.23f4	69 06		adc #$06			adc 	#6
.23f6					_IFINotHex:
.23f6	69 30		adc #$30			adc 	#48
.23f8	20 8f 26	jsr $268f			jsr 	IFloatBufferWrite
.23fb	60		rts				rts
.04ff					IFBase:
>04ff							.fill 	1
.23fc					IFloatFloatToStringR0:
.23fc	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.23fe	20 4e 25	jsr $254e			jsr 	IFloatPushRx
.2401	20 a1 25	jsr $25a1			jsr 	IFloatCopyToRegister
.2404	20 ff 22	jsr $22ff			jsr 	IFloatIntegerR0				; make R0 integer
.2407	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2409	20 a0 23	jsr $23a0			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.240c	9c 00 05	stz $0500			stz 	IFloatDecimalCount 			; zero the decimal count.
.240f	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.2411	29 3f		and #$3f			and 	#IFXMask
.2413	f0 44		beq $2459			beq 	_IFFSExit
.2415					_IFloatFracLoop:
.2415	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.2417	20 90 25	jsr $2590			jsr 	IFloatCopyFromRegister
.241a	20 a9 22	jsr $22a9			jsr 	IFloatFractionalR0
.241d	20 36 26	jsr $2636			jsr 	IFloatNormalise
.2420	a2 14		ldx #$14			ldx 	#IFR2
.2422	20 a1 25	jsr $25a1			jsr 	IFloatCopyToRegister 		; copy to R2
.2425	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.2427	a9 0a		lda #$0a			lda 	#10
.2429	20 01 26	jsr $2601			jsr 	IFloatSetByte
.242c	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.242e	20 9f 20	jsr $209f			jsr 	IFloatMultiply
.2431	a2 14		ldx #$14			ldx 	#IFR2
.2433	20 a1 25	jsr $25a1			jsr 	IFloatCopyToRegister
.2436	20 ff 22	jsr $22ff			jsr 	IFloatIntegerR0 			; get integer part of R0
.2439	ad 00 05	lda $0500			lda 	IFloatDecimalCount 			; done 5 dp, no more
.243c	c9 03		cmp #$03			cmp 	#3
.243e	f0 16		beq $2456			beq 	_IFFSExitStripZero
.2440	ad 00 05	lda $0500			lda 	IFloatDecimalCount 			; written the DP yet ?
.2443	d0 05		bne $244a			bne 	_IFloatNotFirst
.2445	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2447	20 8f 26	jsr $268f			jsr 	IFloatBufferWrite
.244a					_IFloatNotFirst:
.244a	ee 00 05	inc $0500			inc 	IFloatDecimalCount
.244d	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.244f	09 30		ora #$30			ora 	#"0"						; ASCII
.2451	20 8f 26	jsr $268f			jsr 	IFloatBufferWrite 			; write to the buffer.
.2454	80 bf		bra $2415			bra 	_IFloatFracLoop
.2456					_IFFSExitStripZero:
.2456	20 9e 26	jsr $269e			jsr 	IFloatStripTrailingZeros
.2459					_IFFSExit:
.2459	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.245b	20 6f 25	jsr $256f			jsr 	IFloatPullRx
.245e	20 87 26	jsr $2687			jsr 	IFloatGetBufferAddress
.2461	18		clc				clc
.2462	60		rts				rts
.0500					IFloatDecimalCount:
>0500							.fill 	1
.2463					IFloatStringToFloatR0:
.2463	8d 01 05	sta $0501			sta 	IFCount 					; save it out.
.2466	86 0a		stx $0a				stx 	iTemp0
.2468	84 0b		sty $0b				sty 	iTemp0+1
.246a	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.246c	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.246f	9c 02 05	stz $0502			stz 	IFSignFlag 					; clear the sign flag
.2472	20 ff 24	jsr $24ff			jsr 	IFSTFGetNext 				; get first
.2475	f0 1b		beq $2492			beq 	_IFSTFFail 					; no character
.2477	90 10		bcc $2489			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2479	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.247b	d0 15		bne $2492			bne 	_IFSTFFail
.247d	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.247f	8d 02 05	sta $0502			sta 	IFSignFlag
.2482					_IFSTFLoop:
.2482	20 ff 24	jsr $24ff			jsr 	IFSTFGetNext 				; get next
.2485	b0 0b		bcs $2492			bcs 	_IFSTFFail 					; bad character.
.2487	f0 11		beq $249a			beq 	_IFSTFExit 					; end of data
.2489					_IFSTFHaveChar:
.2489	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.248b	f0 08		beq $2495			beq 	_IFSTFDecimal
.248d	20 23 25	jsr $2523			jsr 	IFSTFAddR0 					; add number in
.2490	80 f0		bra $2482			bra 	_IFSTFLoop 					; keep going until . or end.
.2492					_IFSTFFail:
.2492	38		sec				sec
.2493	80 0d		bra $24a2			bra 	_IFSTFReturn
.2495					_IFSTFDecimal:
.2495	20 aa 24	jsr $24aa			jsr 	IFSTFDecimal 				; call the decimal places code.
.2498	b0 08		bcs $24a2			bcs 	_IFSTFReturn 				; error
.249a					_IFSTFExit:
.249a	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.249c	0d 02 05	ora $0502			ora 	IFSignFlag
.249f	85 0f		sta $0f				sta 	IFR0+IExp
.24a1	18		clc				clc
.24a2					_IFSTFReturn:
.24a2	60		rts				rts
.24a3					IFloatAddDecimalToR0:
.24a3	8d 01 05	sta $0501			sta 	IFCount 					; save it out.
.24a6	86 0a		stx $0a				stx 	iTemp0
.24a8	84 0b		sty $0b				sty 	iTemp0+1
.24aa					IFSTFDecimal:
.24aa	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.24ac	20 4e 25	jsr $254e			jsr 	IFloatPushRx
.24af	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.24b1	20 ff 25	jsr $25ff			jsr 	IFloatSetZero
.24b4	9c 03 05	stz $0503			stz 	IFDecimalPlaces
.24b7					_IFSTDLoop:
.24b7	20 ff 24	jsr $24ff			jsr 	IFSTFGetNext 				; get next
.24ba	b0 41		bcs $24fd			bcs 	_IFSTFFail2 				; bad character.
.24bc	f0 11		beq $24cf			beq 	_IFSTFComplete 				; end of data, work out the result.
.24be	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.24c0	f0 39		beq $24fb			beq 	_IFSTFExit2
.24c2	20 23 25	jsr $2523			jsr 	IFSTFAddR0 					; add number in
.24c5	ee 03 05	inc $0503			inc 	IFDecimalPlaces 			; count decimals
.24c8	ad 03 05	lda $0503			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.24cb	c9 03		cmp #$03			cmp 	#3
.24cd	90 e8		bcc $24b7			bcc 	_IFSTDLoop
.24cf					_IFSTFComplete:
.24cf	ad 03 05	lda $0503			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.24d2	f0 27		beq $24fb			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.24d4	3a		dec a				dec 	a 							; table indexed from 1.
.24d5	0a		asl a				asl 	a
.24d6	0a		asl a				asl 	a
.24d7	aa		tax				tax
.24d8	bd 3a 25	lda $253a,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.24db	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.24dd	bd 3b 25	lda $253b,x			lda 	TableTen+1,x
.24e0	85 11		sta $11				sta  	IFR1+IM1
.24e2	bd 3c 25	lda $253c,x			lda 	TableTen+2,x
.24e5	85 12		sta $12				sta  	IFR1+IM2
.24e7	bd 3d 25	lda $253d,x			lda 	TableTen+3,x
.24ea	85 13		sta $13				sta  	IFR1+IExp
.24ec	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.24ee	20 9f 20	jsr $209f			jsr 	IFloatMultiply
.24f1	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.24f3	20 6f 25	jsr $256f			jsr 	IFloatPullRx
.24f6	a2 10		ldx #$10			ldx 	#IFR1
.24f8	20 f5 1f	jsr $1ff5			jsr 	IFloatAdd
.24fb					_IFSTFExit2:
.24fb	18		clc				clc
.24fc	60		rts				rts
.24fd					_IFSTFFail2:
.24fd	38		sec				sec
.24fe	60		rts				rts
.24ff					IFSTFGetNext:
.24ff	ad 01 05	lda $0501			lda 	IFCount  					; if count is zero, return with Z set.
.2502	f0 19		beq $251d			beq 	_IFSTFReturnOk
.2504	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2506	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2508	d0 02		bne $250c			bne 	_IFSTFGNNoCarry
.250a	e6 0b		inc $0b				inc 	iTemp0+1
.250c					_IFSTFGNNoCarry:
.250c	ce 01 05	dec $0501			dec 	IFCount 					; dec count.
.250f	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2511	f0 08		beq $251b			beq 	_IFSTFGOkay
.2513	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2515	90 08		bcc $251f			bcc 	_IFSTFGFail
.2517	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2519	b0 04		bcs $251f			bcs 	_IFSTFGFail
.251b					_IFSTFGOkay:
.251b	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.251d					_IFSTFReturnOk:
.251d	18		clc				clc
.251e	60		rts				rts
.251f					_IFSTFGFail:
.251f	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2521	38		sec				sec
.2522	60		rts				rts
.2523					IFSTFAddR0:
.2523	29 0f		and #$0f			and 	#15 						; to int value
.2525	48		pha				pha 								; save it.
.2526	a9 0a		lda #$0a			lda 	#10
.2528	a2 10		ldx #$10			ldx 	#IFR1
.252a	20 01 26	jsr $2601			jsr 	IFloatSetByte
.252d	20 9f 20	jsr $209f			jsr 	IFloatMultiply
.2530	68		pla				pla
.2531	a2 10		ldx #$10			ldx 	#IFR1
.2533	20 01 26	jsr $2601			jsr 	IFloatSetByte
.2536	20 f5 1f	jsr $1ff5			jsr 	IFloatAdd
.2539	60		rts				rts
.0501					IFCount:
>0501							.fill 	1
.0502					IFSignFlag:
>0502							.fill 	1
.0503					IFDecimalPlaces:
>0503							.fill 	1
.253a					TableTen:
>253a	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>253e	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2542	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2546	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>254a	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.254e					IFloatPushRx:
.254e	5a		phy				phy
.254f	ac 04 05	ldy $0504			ldy 	IFStackIndex
.2552	b5 00		lda $00,x			lda 	IM0,x
.2554	99 05 05	sta $0505,y			sta 	IFStack,y
.2557	b5 01		lda $01,x			lda 	IM1,x
.2559	99 06 05	sta $0506,y			sta 	IFStack+1,y
.255c	b5 02		lda $02,x			lda 	IM2,x
.255e	99 07 05	sta $0507,y			sta 	IFStack+2,y
.2561	b5 03		lda $03,x			lda 	IExp,x
.2563	99 08 05	sta $0508,y			sta 	IFStack+3,y
.2566	c8		iny				iny
.2567	c8		iny				iny
.2568	c8		iny				iny
.2569	c8		iny				iny
.256a	8c 04 05	sty $0504			sty 	IFStackIndex
.256d	7a		ply				ply
.256e	60		rts				rts
.256f					IFloatPullRx:
.256f	5a		phy				phy
.2570	ac 04 05	ldy $0504			ldy 	IFStackIndex
.2573	88		dey				dey
.2574	88		dey				dey
.2575	88		dey				dey
.2576	88		dey				dey
.2577	b9 05 05	lda $0505,y			lda 	IFStack,y
.257a	95 00		sta $00,x			sta 	IM0,x
.257c	b9 06 05	lda $0506,y			lda 	IFStack+1,y
.257f	95 01		sta $01,x			sta 	IM1,x
.2581	b9 07 05	lda $0507,y			lda 	IFStack+2,y
.2584	95 02		sta $02,x			sta 	IM2,x
.2586	b9 08 05	lda $0508,y			lda 	IFStack+3,y
.2589	95 03		sta $03,x			sta 	IExp,x
.258b	8c 04 05	sty $0504			sty 	IFStackIndex
.258e	7a		ply				ply
.258f	60		rts				rts
.0504					IFStackIndex:
>0504							.fill 	1
.0505					IFStack:
>0505							.fill 	16*4
.2590					IFloatCopyFromRegister:
.2590	b5 00		lda $00,x			lda 	0,x
.2592	85 0c		sta $0c				sta 	IFR0
.2594	b5 01		lda $01,x			lda 	1,x
.2596	85 0d		sta $0d				sta 	IFR0+1
.2598	b5 02		lda $02,x			lda 	2,x
.259a	85 0e		sta $0e				sta 	IFR0+2
.259c	b5 03		lda $03,x			lda 	3,x
.259e	85 0f		sta $0f				sta 	IFR0+3
.25a0	60		rts				rts
.25a1					IFloatCopyToRegister:
.25a1	a5 0c		lda $0c				lda 	IFR0
.25a3	95 00		sta $00,x			sta 	0,x
.25a5	a5 0d		lda $0d				lda 	IFR0+1
.25a7	95 01		sta $01,x			sta 	1,x
.25a9	a5 0e		lda $0e				lda 	IFR0+2
.25ab	95 02		sta $02,x			sta 	2,x
.25ad	a5 0f		lda $0f				lda 	IFR0+3
.25af	95 03		sta $03,x			sta 	3,x
.25b1	60		rts				rts
.25b2					IFloatLoadInline:
.25b2	68		pla				pla 								; pop address off to iTemp0
.25b3	85 0a		sta $0a				sta 	iTemp0
.25b5	68		pla				pla
.25b6	85 0b		sta $0b				sta 	iTemp0+1
.25b8	a0 01		ldy #$01			ldy 	#1
.25ba	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.25bc	95 00		sta $00,x			sta 	0,x
.25be	c8		iny				iny
.25bf	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.25c1	95 01		sta $01,x			sta 	1,x
.25c3	c8		iny				iny
.25c4	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.25c6	95 02		sta $02,x			sta 	2,x
.25c8	c8		iny				iny
.25c9	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.25cb	95 03		sta $03,x			sta 	3,x
.25cd	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.25ce	a5 0a		lda $0a				lda 	iTemp0
.25d0	69 05		adc #$05			adc 	#5
.25d2	85 0a		sta $0a				sta 	iTemp0
.25d4	90 02		bcc $25d8			bcc 	_IFLINoCarry
.25d6	e6 0b		inc $0b				inc 	iTemp0+1
.25d8					_IFLINoCarry:
.25d8	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.25db					IFloatMultiply8BitRx:
.25db	5a		phy		        phy
.25dc	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.25de	a4 0c		ldy $0c		        ldy     IFR0+IM0
.25e0	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.25e1	85 0c		sta $0c		        sta     IFR0+IM0
.25e3	84 0d		sty $0d		        sty     IFR0+IM1
.25e5	a9 00		lda #$00	        lda     #0
.25e7	a0 08		ldy #$08	        ldy     #8
.25e9					_IFMLoop:
.25e9	90 03		bcc $25ee	        bcc     _IFMNoAdd
.25eb	18		clc		        clc
.25ec	65 0d		adc $0d		        adc     IFR0+IM1
.25ee					_IFMNoAdd:
.25ee	6a		ror a		        ror     a
.25ef	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.25f1	88		dey		        dey
.25f2	d0 f5		bne $25e9	        bne     _IFMLoop
.25f4	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.25f6	7a		ply		        ply
.25f7	60		rts		        rts
.25f8					IFloatCheckZero:
.25f8	b5 00		lda $00,x			lda 	IM0,x
.25fa	15 01		ora $01,x			ora 	IM1,x
.25fc	15 02		ora $02,x			ora 	IM2,x
.25fe	60		rts				rts
.25ff					IFloatSetZero:
.25ff	a9 00		lda #$00			lda 	#0
.2601					IFloatSetByte:
.2601	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2603	74 01		stz $01,x			stz 	IM1,x
.2605	74 02		stz $02,x			stz 	IM2,x
.2607	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2609	60		rts				rts
.260a					IFloatNegate:
.260a	b5 03		lda $03,x			lda 	IExp,x
.260c	49 40		eor #$40			eor 	#IFSign
.260e	95 03		sta $03,x			sta 	IExp,x
.2610	18		clc				clc
.2611	60		rts				rts
.2612					IFloatMantissaNegate:
.2612	38		sec				sec
.2613	a9 00		lda #$00			lda 	#0
.2615	f5 00		sbc $00,x			sbc 	IM0,x
.2617	95 00		sta $00,x			sta 	IM0,x
.2619	a9 00		lda #$00			lda 	#0
.261b	f5 01		sbc $01,x			sbc 	IM1,x
.261d	95 01		sta $01,x			sta 	IM1,x
.261f	a9 00		lda #$00			lda 	#0
.2621	f5 02		sbc $02,x			sbc 	IM2,x
.2623	95 02		sta $02,x			sta 	IM2,x
.2625	60		rts				rts
.2626					IFloatShiftLeft:
.2626	18		clc				clc
.2627					IFloatRotateLeft:
.2627	36 00		rol $00,x			rol 	IM0,x
.2629	36 01		rol $01,x			rol 	IM1,x
.262b	36 02		rol $02,x			rol 	IM2,x
.262d	60		rts				rts
.262e					IFloatShiftRight:
.262e	18		clc				clc
.262f					IFloatRotateRight:
.262f	76 02		ror $02,x			ror 	IM2,x
.2631	76 01		ror $01,x			ror 	IM1,x
.2633	76 00		ror $00,x			ror 	IM0,x
.2635	60		rts				rts
.2636					IFloatNormalise:
.2636	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero 			; is it zero
.2639	f0 18		beq $2653			beq 	_IFNExitZero 				; if so exit
.263b					_IFNLoop:
.263b	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.263d	29 c0		and #$c0			and 	#$C0
.263f	c9 40		cmp #$40			cmp 	#$40
.2641	f0 13		beq $2656			beq 	_IFNExitOkay 				; if so , then we are done.
.2643	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2645	29 3f		and #$3f			and 	#$3F
.2647	c9 20		cmp #$20			cmp 	#$20
.2649	f0 0b		beq $2656			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.264b	20 6c 26	jsr $266c			jsr 	IFloatDecExponent
.264e	20 26 26	jsr $2626			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2651	80 e8		bra $263b			bra 	_IFNLoop
.2653					_IFNExitZero:
.2653	20 ff 25	jsr $25ff			jsr 	IFloatSetZero 				; set the result to zero
.2656					_IFNExitOkay:
.2656	18		clc				clc  								; return with CC.
.2657	60		rts				rts
.2658					IFloatIncExponent:
.2658	b5 03		lda $03,x			lda 	IExp,x
.265a	48		pha				pha
.265b	29 c0		and #$c0			and 	#$C0
.265d	8d 45 05	sta $0545			sta 	IFXTemp
.2660	68		pla				pla
.2661	1a		inc a				inc 	a
.2662	29 3f		and #$3f			and 	#$3F
.2664	48		pha				pha
.2665	0d 45 05	ora $0545			ora 	IFXTemp
.2668	95 03		sta $03,x			sta 	IExp,x
.266a	68		pla				pla
.266b	60		rts				rts
.266c					IFloatDecExponent:
.266c	b5 03		lda $03,x			lda 	IExp,x
.266e	48		pha				pha
.266f	29 c0		and #$c0			and 	#$C0
.2671	8d 45 05	sta $0545			sta 	IFXTemp
.2674	68		pla				pla
.2675	3a		dec a				dec 	a
.2676	29 3f		and #$3f			and 	#$3F
.2678	48		pha				pha
.2679	0d 45 05	ora $0545			ora 	IFXTemp
.267c	95 03		sta $03,x			sta 	IExp,x
.267e	68		pla				pla
.267f	60		rts				rts
.0545					IFXTemp:
>0545							.fill 	1
.2680					IFloatBufferReset:
.2680	9c 46 05	stz $0546			stz 	IFBufferCount
.2683	9c 47 05	stz $0547			stz 	IFBuffer
.2686	60		rts				rts
.2687					IFloatGetBufferAddress:
.2687	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.2689	a2 47		ldx #$47			ldx 	#(IFBuffer & $FF)
.268b	ad 46 05	lda $0546			lda 	IFBufferCount
.268e	60		rts				rts
.268f					IFloatBufferWrite:
.268f	da		phx				phx
.2690	ae 46 05	ldx $0546			ldx 	IFBufferCount
.2693	9d 47 05	sta $0547,x			sta 	IFBuffer,x
.2696	9e 48 05	stz $0548,x			stz 	IFBuffer+1,x
.2699	ee 46 05	inc $0546			inc 	IFBufferCount
.269c	fa		plx				plx
.269d	60		rts				rts
.269e					IFloatStripTrailingZeros:
.269e	ae 46 05	ldx $0546			ldx 	IFBufferCount
.26a1	bd 46 05	lda $0546,x			lda 	IFBuffer-1,x
.26a4	c9 30		cmp #$30			cmp		#"0"
.26a6	d0 0f		bne $26b7			bne 	_IFSTExit
.26a8	bd 45 05	lda $0545,x			lda 	IFBuffer-2,x
.26ab	c9 2e		cmp #$2e			cmp 	#"."
.26ad	f0 08		beq $26b7			beq 	_IFSTExit
.26af	ce 46 05	dec $0546			dec 	IFBufferCount
.26b2	9e 46 05	stz $0546,x			stz 	IFBuffer-1,x
.26b5	80 e7		bra $269e			bra 	IFloatStripTrailingZeros
.26b7					_IFSTExit:
.26b7	60		rts				rts
.0546					IFBufferCount:
>0546							.fill 	1
.0547					IFBuffer:
>0547							.fill 	25
.26b8					IFloatCheck:
.26b8	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.26ba	09 40		ora #$40			ora 	#IFSign
.26bc	85 0f		sta $0f				sta 	IFR0+IExp
.26be	20 f5 1f	jsr $1ff5			jsr 	IFloatAdd 					; add allowed to error.
.26c1	a2 0c		ldx #$0c			ldx 	#IFR0
.26c3	20 f8 25	jsr $25f8			jsr 	IFloatCheckZero 			; error if < 0
.26c6	f0 06		beq $26ce			beq 	_IFAOkay
.26c8	a5 0f		lda $0f				lda 	IFR0+IExp
.26ca	29 40		and #$40			and 	#IFSign
.26cc	d0 01		bne $26cf			bne 	_IFAFail
.26ce					_IFAOkay:
.26ce	60		rts				rts
.26cf					_IFAFail:
.26cf	38		sec				sec
.26d0	68		pla				pla 								; get address - 2
.26d1	e9 02		sbc #$02			sbc 	#2
.26d3	aa		tax				tax
.26d4	68		pla				pla
.26d5	e9 00		sbc #$00			sbc 	#0
.26d7	a8		tay				tay
.26d8	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.26da					_IFAStop:
>26da	db						.byte 	$DB 						; display an error AA ADR ADR
.26db	80 fd		bra $26da			bra 	_IFAStop

;******  Return to file: basic.asm

.26dd					NotImplemented:
.26dd	a9 ff		lda #$ff			lda 	#$FF
.26df	80 04		bra $26e5			bra 	EnterDbg
.26e1					ErrorHandler:
.26e1	fa		plx				plx
.26e2	7a		ply				ply
.26e3	a9 ee		lda #$ee			lda 	#$EE
.26e5					EnterDbg:
>26e5	db						.byte 	$DB
.26e6	4c e5 26	jmp $26e5			jmp 	EnterDbg

;******  End of listing
