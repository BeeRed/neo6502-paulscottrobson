
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Sat Jun 10 06:56:55 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 08 1f	jsr $1f08			jsr 	PGMSetBaseAddress
.1007	20 47 2a	jsr $2a47			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c 95 14	jmp $1495			jmp 	Command_RUN
.1012	4c dd 13	jmp $13dd			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$aa					PR_READ = $aa
=$ab					PR_DATA = $ab
=$ac					PR_RESTORE = $ac
=$ac					PR_STANDARD_LAST = $ac
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 db 16	jsr $16db			jsr 	EXPEvalNumber
.1018	a2 08		ldx #$08			ldx 	#IFR0
.101a	20 55 30	jsr $3055			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c 6d 25	jmp $256d		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1025	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1027	f0 14		beq $103d			beq 	_CLNoParam
.1029	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.102b	f0 10		beq $103d			beq 	_CLNoParam
.102d	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16 			; address for CLEAR
.1030	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1032	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1034	b0 0b		bcs $1041			bcs 	_CLMemory
.1036	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1038	90 07		bcc $1041			bcc 	_CLMemory
.103a	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory.
.103d					_CLNoParam:
.103d	20 44 10	jsr $1044			jsr 	ClearCode
.1040	60		rts				rts
.1041					_CLMemory:
.1041	4c 07 26	jmp $2607		jmp	ErrorV_memory
.1044					ClearCode:
.1044	20 1b 1f	jsr $1f1b			jsr 	PGMEndProgram 				; end program => zTemp0
.1047	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1049	a5 23		lda $23				lda 	zTemp0+1
.104b	1a		inc a				inc 	a
.104c	85 29		sta $29				sta 	freeMemory+1
.104e	20 e6 29	jsr $29e6			jsr 	VARClearHashTables
.1051	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.1054	20 23 27	jsr $2723			jsr 	StackReset
.1057	20 82 27	jsr $2782			jsr 	StringSystemInitialise
.105a	20 82 24	jsr $2482			jsr 	ScanProcedures
.105d	20 67 14	jsr $1467			jsr 	Command_RESTORE
.1060	60		rts				rts
.1061					AllocateMemory:
.1061	5a		phy				phy 								; save Y
.1062	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low
.1064	5a		phy				phy
.1065	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.1067	5a		phy				phy
.1068	a8		tay				tay 								; count is now in XY
.1069					_AllocateLoop:
.1069	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.106b	d0 04		bne $1071			bne 	_AllocateOne
.106d	c0 00		cpy #$00			cpy 	#0
.106f	f0 15		beq $1086			beq 	_AllocateExit
.1071					_AllocateOne:
.1071	a9 00		lda #$00			lda 	#0 							; zero byte
.1073	92 28		sta ($28)			sta 	(freeMemory)
.1075	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.1077	d0 05		bne $107e			bne 	_AllocateSkipCarry
.1079	e6 29		inc $29				inc 	freeMemory+1
.107b	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.107e					_AllocateSkipCarry:
.107e	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1080	d0 01		bne $1083			bne 	_AllocateSkipBorrow
.1082	ca		dex				dex
.1083					_AllocateSkipBorrow:
.1083	88		dey				dey
.1084	80 e3		bra $1069			bra 	_AllocateLoop
.1086					_AllocateExit:
.1086	fa		plx				plx 								; restore address
.1087	68		pla				pla
.1088	7a		ply				ply 								; restore Y
.1089	60		rts				rts
.108a					ClearCheckMemory:
.108a	a5 29		lda $29				lda 	freeMemory+1
.108c	1a		inc a				inc 	a
.108d	1a		inc a				inc 	a
.108e	cd 23 06	cmp $0623			cmp 	stringMemory+1
.1091	b0 01		bcs $1094			bcs  	_CCMError
.1093	60		rts				rts
.1094					_CCMError:
.1094	4c 07 26	jmp $2607		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1097					CommandDIM:
.1097	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1099	29 c0		and #$c0			and 	#$C0
.109b	c9 40		cmp #$40			cmp 	#$40
.109d	d0 39		bne $10d8			bne 	_CDSyntax
.109f	20 9d 29	jsr $299d			jsr 	VARGetInfo 					; get information
.10a2	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.10a5	29 02		and #$02			and 	#2
.10a7	f0 2f		beq $10d8			beq 	_CDSyntax
.10a9	20 4f 29	jsr $294f			jsr 	VARFind 					; does it already exist
.10ac	b0 2d		bcs $10db			bcs 	_CDExists
.10ae	20 fb 28	jsr $28fb			jsr 	VARCreate 					; create it - returns data ptr in XA
.10b1	da		phx				phx 								; save target address
.10b2	48		pha				pha
.10b3	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10b6	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b8	20 de 10	jsr $10de			jsr 	CreateArray 				; create array to XA
.10bb	84 24		sty $24				sty 	zTemp1 						; save Y
.10bd	7a		ply				ply 								; restore target to zTemp0
.10be	84 22		sty $22				sty 	zTemp0
.10c0	7a		ply				ply
.10c1	84 23		sty $23				sty 	zTemp0+1
.10c3	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10c5	a0 01		ldy #$01			ldy 	#1
.10c7	8a		txa				txa
.10c8	91 22		sta ($22),y			sta 	(zTemp0),y
.10ca	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10cc	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 				; check )
.10cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10d1	c8		iny				iny
.10d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10d4	f0 c1		beq $1097			beq 	CommandDIM
.10d6	88		dey				dey
.10d7	60		rts				rts
.10d8					_CDSyntax:
.10d8	4c 17 25	jmp $2517		jmp	ErrorV_syntax
.10db					_CDExists:
.10db	4c df 25	jmp $25df		jmp	ErrorV_redefine
.10de					CreateArray:
.10de	8d 03 05	sta $0503			sta 	CAType						; save type
.10e1	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10e4	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e8	f0 04		beq $10ee			beq 	_CATwoDimensions
.10ea	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ed	60		rts				rts
.10ee					_CATwoDimensions:
.10ee	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10f0	8d 05 05	sta $0505			sta 	CADim1+1
.10f3	a5 08		lda $08				lda 	IFR0+IM0
.10f5	8d 04 05	sta $0504			sta 	CADim1+0
.10f8	20 bc 26	jsr $26bc			jsr 	ERRCheckComma 				; check comma
.10fb	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10fe	5a		phy				phy 								; save Y position
.10ff	18		clc				clc 								; allocate the outer array of pointers.
.1100	ae 05 05	ldx $0505			ldx 	CADim1+1
.1103	ad 04 05	lda $0504			lda 	CADim1
.1106	20 79 11	jsr $1179			jsr 	CSAAllocate 				; allocate the outer array
.1109	da		phx				phx									; save this address on the stack
.110a	48		pha				pha
.110b	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.110d	85 26		sta $26				sta 	zTemp2
.110f					_CACreateSubLoop:
.110f	38		sec				sec
.1110	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create data array of required size.
.1113	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1115	91 26		sta ($26),y			sta 	(zTemp2),y
.1117	8a		txa				txa
.1118	c8		iny				iny
.1119	91 26		sta ($26),y			sta 	(zTemp2),y
.111b	18		clc				clc  								; next slot.
.111c	a5 26		lda $26				lda 	zTemp2
.111e	69 02		adc #$02			adc 	#2
.1120	85 26		sta $26				sta 	zTemp2
.1122	90 02		bcc $1126			bcc 	_CACNoCarry
.1124	e6 27		inc $27				inc 	zTemp2+1
.1126					_CACNoCarry:
.1126	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1129	d0 03		bne $112e			bne 	_CACNoBorrow
.112b	ce 05 05	dec $0505			dec 	CADim1+1
.112e					_CACNoBorrow:
.112e	ce 04 05	dec $0504			dec 	CADim1
.1131	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1134	10 d9		bpl $110f			bpl 	_CACreateSubLoop
.1136	68		pla				pla
.1137	fa		plx				plx
.1138	7a		ply				ply
.1139	60		rts				rts
.113a					CreateSingleArray:
.113a	5a		phy				phy
.113b	38		sec				sec 								; allocate memory block all zeros.
.113c	a5 08		lda $08				lda 	IFR0+IM0
.113e	a6 09		ldx $09				ldx 	IFR0+IM1
.1140	20 79 11	jsr $1179			jsr 	CSAAllocate
.1143	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1146	f0 2f		beq $1177			beq 	_CSANoInit
.1148	da		phx				phx 								; save address of new array
.1149	48		pha				pha
.114a	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.114c	86 23		stx $23				stx 	zTemp0+1
.114e	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1150	b1 22		lda ($22),y			lda 	(zTemp0),y
.1152	a8		tay				tay
.1153	b2 22		lda ($22)			lda 	(zTemp0)
.1155	aa		tax				tax
.1156					_CSAEraseString:
.1156	5a		phy				phy
.1157	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1159	a9 80		lda #$80			lda 	#$80
.115b	91 22		sta ($22),y			sta 	(zTemp0),y
.115d	7a		ply				ply
.115e	18		clc				clc 								; add 4 to next slot.
.115f	a5 22		lda $22				lda 	zTemp0
.1161	69 04		adc #$04			adc 	#4
.1163	85 22		sta $22				sta 	zTemp0
.1165	90 02		bcc $1169			bcc 	_CSAENoCarry
.1167	e6 23		inc $23				inc 	zTemp0+1
.1169					_CSAENoCarry:
.1169	e0 00		cpx #$00			cpx 	#0
.116b	d0 01		bne $116e			bne 	_CSANoBorrow
.116d	88		dey				dey
.116e					_CSANoBorrow:
.116e	ca		dex				dex
.116f	d0 e5		bne $1156			bne 	_CSAEraseString
.1171	c0 00		cpy #$00			cpy 	#0
.1173	d0 e1		bne $1156			bne 	_CSAEraseString
.1175	68		pla				pla
.1176	fa		plx				plx
.1177					_CSANoInit:
.1177	7a		ply				ply
.1178	60		rts				rts
.1179					CSAAllocate:
.1179	08		php				php 								; save type flag.
.117a	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.117b	d0 01		bne $117e			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.117d	e8		inx				inx
.117e					_CSAANoCarry:
.117e	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1180	b0 2e		bcs $11b0			bcs 	_CSARange
.1182	28		plp				plp 								; restore type flag
.1183	08		php				php 								; save it back again.
.1184	da		phx				phx 								; save size.
.1185	48		pha				pha
.1186	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1188	90 03		bcc $118d			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.118a	0a		asl a				asl 	a
.118b	26 23		rol $23				rol 	zTemp0+1
.118d					_CSAATimes2:
.118d	0a		asl a				asl 	a
.118e	26 23		rol $23				rol 	zTemp0+1
.1190	18		clc				clc
.1191	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1193	90 02		bcc $1197			bcc 	_CSAANoCarry2
.1195	e6 23		inc $23				inc 	zTemp0+1
.1197					_CSAANoCarry2:
.1197	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1199	20 61 10	jsr $1061			jsr 	AllocateMemory 				; allocate memory to XA
.119c	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.119e	85 22		sta $22				sta 	zTemp0
.11a0	68		pla				pla  								; write element count to first 2 bytes
.11a1	92 22		sta ($22)			sta 	(zTemp0)
.11a3	68		pla				pla 								; msb of element count
.11a4	28		plp				plp 								; CC if pointer array
.11a5	b0 02		bcs $11a9			bcs 	_CSAAIsData
.11a7	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a9					_CSAAIsData:
.11a9	a0 01		ldy #$01			ldy 	#1
.11ab	91 22		sta ($22),y			sta 	(zTemp0),y
.11ad	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11af	60		rts				rts
.11b0					_CSARange:
.11b0	4c 28 25	jmp $2528		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11b3					Command_Doke:
.11b3	38		sec				sec
.11b4	80 01		bra $11b7			bra 	DPCommon
.11b6					Command_Poke:
.11b6	18		clc				clc
.11b7					DPCommon:
.11b7	08		php				php 								; CS if DOKE
.11b8	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16 			; address
.11bb	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11bd	48		pha				pha
.11be	a5 09		lda $09				lda 	IFR0+IM1
.11c0	48		pha				pha
.11c1	20 bc 26	jsr $26bc			jsr 	ERRCheckComma 				; [dp]oke address,data
.11c4	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16
.11c7	68		pla				pla 								; get address back
.11c8	85 23		sta $23				sta 	zTemp0+1
.11ca	68		pla				pla
.11cb	85 22		sta $22				sta 	zTemp0
.11cd	a5 08		lda $08				lda 	IFR0+IM0
.11cf	92 22		sta ($22)			sta 	(zTemp0)
.11d1	28		plp				plp
.11d2	90 08		bcc $11dc			bcc 	_DPExit
.11d4	5a		phy				phy
.11d5	a5 09		lda $09				lda 	IFR0+IM1
.11d7	a0 01		ldy #$01			ldy 	#1
.11d9	91 22		sta ($22),y			sta 	(zTemp0),y
.11db	7a		ply				ply
.11dc					_DPExit:
.11dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11dd					Command_Input:
.11dd	a9 ff		lda #$ff			lda 	#$FF
.11df	8d 06 05	sta $0506			sta 	InputFlag
.11e2	80 03		bra $11e7			bra 	Command_IP_Main
.11e4					Command_Print:
.11e4	9c 06 05	stz $0506			stz 	InputFlag
.11e7					Command_IP_Main:
.11e7	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11e8					_CPLoop:
.11e8	08		php				php 								; save last action flag
.11e9	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.11eb	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11ed	f0 4e		beq $123d			beq 	_CPExit 					; without consuming
.11ef	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11f1	f0 4a		beq $123d			beq 	_CPExit
.11f3	68		pla				pla 								; throw last action flag
.11f4	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.11f6	c8		iny				iny
.11f7	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11f9	f0 3f		beq $123a			beq 	_CPContinueWithSameLine
.11fb	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11fd	f0 36		beq $1235			beq 	_CPTab
.11ff	88		dey				dey 								; undo the get.
.1200	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.1203	10 0b		bpl $1210			bpl	 	_CPNotInput
.1205	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1207	c9 40		cmp #$40			cmp 	#$40
.1209	d0 05		bne $1210			bne 	_CPNotInput
.120b	20 46 12	jsr $1246			jsr 	_CPInputCode 				; input code
.120e	80 d7		bra $11e7			bra 	Command_IP_Main 			; and go round again.
.1210					_CPNotInput:
.1210	20 9b 16	jsr $169b			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1213	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1215	10 14		bpl $122b			bpl 	_CPNumber
.1217	5a		phy				phy
.1218	18		clc				clc 								; string address to YX
.1219	a5 08		lda $08				lda 	IFR0+IM0
.121b	aa		tax				tax
.121c	a5 09		lda $09				lda 	IFR0+IM1
.121e	a8		tay				tay
.121f	e8		inx				inx 								; point to 1st character
.1220	d0 01		bne $1223			bne 	_CPNoCarry
.1222	c8		iny				iny
.1223					_CPNoCarry:
.1223	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.1225	20 7a 12	jsr $127a			jsr 	CPPrintAYX 					; print AYX
.1228	7a		ply				ply
.1229	80 bc		bra $11e7			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.122b					_CPNumber:
.122b	5a		phy				phy
.122c	20 59 2e	jsr $2e59			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.122f	20 7a 12	jsr $127a			jsr 	CPPrintAYX 					; print AYX
.1232	7a		ply				ply
.1233	80 b2		bra $11e7			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1235					_CPTab:
.1235	a9 09		lda #$09			lda 	#9 							; print TAB
.1237	20 90 12	jsr $1290			jsr 	CPPrintA
.123a					_CPContinueWithSameLine:
.123a	38		sec				sec 								; loop round with carry set, which
.123b	80 ab		bra $11e8			bra 	_CPLoop 					; will inhibit final CR
.123d					_CPExit:
.123d	28		plp				plp 								; get last action flag
.123e	b0 05		bcs $1245			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1240	a9 0d		lda #$0d			lda 	#13 						; print new line
.1242	20 90 12	jsr $1290			jsr 	CPPrintA
.1245					_CPExit2:
.1245	60		rts				rts
.1246					_CPInputCode:
.1246	20 63 17	jsr $1763			jsr 	EXPTermR0 					; get the term.
.1249	5a		phy				phy 								; save position
.124a	20 8d 12	jsr $128d			jsr 	CPInputA					; input a line to YX
.124d	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.124f	30 18		bmi $1269			bmi 	_CPInputString
.1251	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1253	48		pha				pha
.1254	a5 09		lda $09				lda 	IFR0+IM1
.1256	48		pha				pha
.1257	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1259	84 23		sty $23				sty 	zTemp0+1
.125b	20 45 1a	jsr $1a45			jsr 	VALConversionZTemp0
.125e	68		pla				pla 								; do the assign.
.125f	85 23		sta $23				sta 	zTemp0+1
.1261	68		pla				pla
.1262	85 22		sta $22				sta 	zTemp0
.1264	20 b8 12	jsr $12b8			jsr 	AssignNumber
.1267	7a		ply				ply
.1268	60		rts				rts
.1269					_CPInputString:
.1269	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.126b	85 22		sta $22				sta 	zTemp0
.126d	a5 09		lda $09				lda 	IFR0+IM1
.126f	85 23		sta $23				sta 	zTemp0+1
.1271	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1273	84 09		sty $09				sty 	IFR0+IM1
.1275	20 cf 12	jsr $12cf			jsr 	AssignString 				; assign the string
.1278	7a		ply				ply 								; exit
.1279	60		rts				rts
.127a					CPPrintAYX:
.127a	86 22		stx $22				stx 	zTemp0
.127c	84 23		sty $23				sty 	zTemp0+1
.127e	aa		tax				tax
.127f	f0 0b		beq $128c			beq 	_CPPrintExit
.1281	a0 00		ldy #$00			ldy 	#0
.1283					_CPPrintAYXLoop:
.1283	b1 22		lda ($22),y			lda 	(zTemp0),y
.1285	20 90 12	jsr $1290			jsr 	CPPrintA
.1288	c8		iny				iny
.1289	ca		dex				dex
.128a	d0 f7		bne $1283			bne 	_CPPrintAYXLoop
.128c					_CPPrintExit:
.128c	60		rts				rts
.128d					CPInputA:
.128d	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.1290					CPPrintA:
.1290	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1293					CommandLET:
.1293	20 63 17	jsr $1763			jsr 	EXPTermR0 					; get term
.1296	90 6f		bcc $1307			bcc 	CLError 					; must be a reference term.
.1298	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.129a	48		pha				pha
.129b	a5 09		lda $09				lda 	IFR0+IM1
.129d	48		pha				pha
.129e	a5 0b		lda $0b				lda 	IFR0+IExp
.12a0	48		pha				pha
.12a1	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12a3	20 c4 26	jsr $26c4			jsr 	ERRCheckA
.12a6	20 9b 16	jsr $169b			jsr 	EXPEvaluateExpression 		; right hand side.
.12a9	68		pla				pla 								; type of l-expr
.12aa	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12ac	30 5c		bmi $130a			bmi 	CLType
.12ae	fa		plx				plx 	 							; pop target address to zTemp0
.12af	86 23		stx $23				stx 	zTemp0+1
.12b1	fa		plx				plx
.12b2	86 22		stx $22				stx 	zTemp0
.12b4					AssignData:
.12b4	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12b6	30 17		bmi $12cf			bmi 	AssignString
.12b8					AssignNumber:
.12b8	5a		phy				phy
.12b9	a0 03		ldy #$03			ldy 	#3
.12bb	a5 0b		lda $0b				lda 	IFR0+IExp
.12bd	91 22		sta ($22),y			sta 	(zTemp0),y
.12bf	88		dey				dey
.12c0	a5 0a		lda $0a				lda 	IFR0+IM2
.12c2	91 22		sta ($22),y			sta 	(zTemp0),y
.12c4	88		dey				dey
.12c5	a5 09		lda $09				lda 	IFR0+IM1
.12c7	91 22		sta ($22),y			sta 	(zTemp0),y
.12c9	a5 08		lda $08				lda 	IFR0+IM0
.12cb	92 22		sta ($22)			sta 	(zTemp0)
.12cd	7a		ply				ply
.12ce	60		rts				rts
.12cf					AssignString:
.12cf	5a		phy				phy
.12d0	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12d2	b1 22		lda ($22),y			lda 	(zTemp0),y
.12d4	12 22		ora ($22)			ora 	(zTemp0)
.12d6	f0 23		beq $12fb			beq 	_CLConcreteString
.12d8	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12da	85 24		sta $24				sta 	zTemp1
.12dc	b1 22		lda ($22),y			lda 	(zTemp0),y
.12de	85 25		sta $25				sta 	zTemp1+1
.12e0	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.12e2	38		sec				sec 								; we want 3 for slot size, status, string size.
.12e3	e9 03		sbc #$03			sbc 	#3
.12e5	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.12e7	90 12		bcc $12fb			bcc 	_CLConcreteString 			; if so, concrete the string again.
.12e9	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.12eb	1a		inc a				inc 	a
.12ec	aa		tax				tax
.12ed	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.12ef					_CLReplaceString:
.12ef	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.12f1	c8		iny				iny
.12f2	c8		iny				iny
.12f3	91 24		sta ($24),y			sta 	(zTemp1),y
.12f5	88		dey				dey
.12f6	ca		dex				dex
.12f7	d0 f6		bne $12ef			bne 	_CLReplaceString
.12f9	80 0a		bra $1305			bra 	_CLExit
.12fb					_CLConcreteString:
.12fb	20 37 27	jsr $2737			jsr 	StringConcrete  			; concreted string in XA.
.12fe	a0 01		ldy #$01			ldy 	#1 							; store the address
.1300	92 22		sta ($22)			sta 	(zTemp0)
.1302	8a		txa				txa
.1303	91 22		sta ($22),y			sta 	(zTemp0),y
.1305					_CLExit:
.1305	7a		ply				ply
.1306	60		rts				rts
.1307					CLError:
.1307	4c 4a 26	jmp $264a		jmp	ErrorV_variable
.130a					CLType:
.130a	4c 47 25	jmp $2547		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.130d					Command_LIST:
.130d	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1310	9c 08 05	stz $0508			stz 	CLFrom+1
.1313	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1315	c9 99		cmp #$99			cmp 	#PR_COMMA
.1317	f0 1d		beq $1336			beq 	_CLToLine
.1319	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.131b	f0 37		beq $1354			beq 	_CLDefaultTo
.131d	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1320	a5 08		lda $08				lda 	IFR0+IM0
.1322	8d 07 05	sta $0507			sta 	CLFrom
.1325	8d 09 05	sta $0509			sta 	CLTo
.1328	a5 09		lda $09				lda 	IFR0+IM1
.132a	8d 08 05	sta $0508			sta 	CLFrom+1
.132d	8d 0a 05	sta $050a			sta 	CLTo+1
.1330	b1 18		lda ($18),y			lda 	(codePtr),y
.1332	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1334	f0 26		beq $135c			beq 	_CLList
.1336					_CLToLine:
.1336	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1338	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.133a	f0 18		beq $1354			beq 	_CLDefaultTo
.133c	20 bc 26	jsr $26bc			jsr 	ERRCheckComma 				; sep comma
.133f	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1341	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1343	f0 0f		beq $1354			beq 	_CLDefaultTo
.1345	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16 			; there's a To value.
.1348	a5 08		lda $08				lda 	IFR0+IM0
.134a	8d 09 05	sta $0509			sta 	CLTo
.134d	a5 09		lda $09				lda 	IFR0+IM1
.134f	8d 0a 05	sta $050a			sta 	CLTo+1
.1352	80 08		bra $135c			bra 	_CLList
.1354					_CLDefaultTo:
.1354	a9 ff		lda #$ff			lda 	#$FF
.1356	8d 09 05	sta $0509			sta 	CLTo
.1359	8d 0a 05	sta $050a			sta 	CLTo+1
.135c					_CLList:
.135c	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.135f	85 19		sta $19				sta 	codePtr+1
.1361	64 18		stz $18				stz 	codePtr
.1363	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1365	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1367	20 6a 1d	jsr $1d6a			jsr 	TOKSetDetokeniseOutput
.136a					_CLLoop:
.136a	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.136c	f0 4a		beq $13b8			beq 	_CLExit
.136e	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1371	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1374	d0 45		bne $13bb			bne 	_CLBreak
.1376	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1378	20 be 13	jsr $13be			jsr 	_CLCompareLine
.137b	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.137d	f0 2c		beq $13ab			beq 	_CLNext
.137f	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1381	20 be 13	jsr $13be			jsr 	_CLCompareLine
.1384	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.1386	f0 23		beq $13ab			beq 	_CLNext
.1388	a0 02		ldy #$02			ldy 	#2 							; print line #
.138a	b1 18		lda ($18),y			lda 	(codePtr),y
.138c	aa		tax				tax
.138d	88		dey				dey
.138e	b1 18		lda ($18),y			lda 	(codePtr),y
.1390	20 15 28	jsr $2815			jsr 	WriteIntXA
.1393	a9 20		lda #$20			lda 	#32
.1395	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1398	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.139a	a5 18		lda $18				lda 	codePtr
.139c	18		clc				clc
.139d	69 03		adc #$03			adc 	#3
.139f	aa		tax				tax
.13a0	90 01		bcc $13a3			bcc 	_CLNoCarry2
.13a2	c8		iny				iny
.13a3					_CLNoCarry2:
.13a3	20 25 1d	jsr $1d25			jsr 	TOKDetokenise
.13a6	a9 0d		lda #$0d			lda 	#13	 						; next line
.13a8	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13ab					_CLNext:
.13ab	18		clc				clc 								; advance to next line.
.13ac	b2 18		lda ($18)			lda 	(codePtr)
.13ae	65 18		adc $18				adc 	codePtr
.13b0	85 18		sta $18				sta 	codePtr
.13b2	90 02		bcc $13b6			bcc 	_CLNoCarry
.13b4	e6 19		inc $19				inc 	codePtr+1
.13b6					_CLNoCarry:
.13b6	80 b2		bra $136a			bra 	_CLLoop
.13b8					_CLExit:
.13b8	4c 34 28	jmp $2834			jmp 	WarmStart
.13bb					_CLBreak:
.13bb	4c a2 26	jmp $26a2		jmp	ErrorV_break
.13be					_CLCompareLine:
.13be	a0 01		ldy #$01			ldy 	#1
.13c0	38		sec				sec
.13c1	b1 18		lda ($18),y			lda 	(codePtr),y
.13c3	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13c6	85 22		sta $22				sta 	zTemp0
.13c8	c8		iny				iny
.13c9	b1 18		lda ($18),y			lda 	(codePtr),y
.13cb	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13ce	90 0a		bcc $13da			bcc 	_CLIsNegative
.13d0	d0 05		bne $13d7			bne 	_CLIsPositive
.13d2	a5 22		lda $22				lda 	zTemp0
.13d4	d0 01		bne $13d7			bne 	_CLIsPositive
.13d6	60		rts				rts
.13d7					_CLIsPositive:
.13d7	a9 01		lda #$01			lda 	#1
.13d9	60		rts				rts
.13da					_CLIsNegative:
.13da	a9 ff		lda #$ff			lda 	#255
.13dc	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.13dd					Command_NEW:
.13dd	20 0f 1f	jsr $1f0f			jsr 	PGMNewProgram
.13e0	20 44 10	jsr $1044			jsr 	ClearCode
.13e3	4c 00 15	jmp $1500			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.13e6					Command_READ:
.13e6	20 63 17	jsr $1763			jsr 	EXPTermR0 					; get term to R0
.13e9	90 35		bcc $1420			bcc 	_CRSyntax 					; fail if not a reference.
.13eb	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.13ed	48		pha				pha
.13ee	a5 09		lda $09				lda 	IFR0+IM1
.13f0	48		pha				pha
.13f1	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.13f3	48		pha				pha
.13f4	20 79 14	jsr $1479			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.13f7	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.13fa	d0 27		bne $1423			bne 	_CRHaveData  				; forward for the next one.
.13fc					_CRNextLine:
.13fc	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.13fe	f0 1a		beq $141a			beq 	_CRNoData
.1400					_CRKeepSearching:
.1400	a9 ab		lda #$ab			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1402	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1404	20 27 24	jsr $2427			jsr 	ScanForward
.1407	c9 ab		cmp #$ab			cmp 	#PR_DATA 					; found data ?
.1409	f0 18		beq $1423			beq 	_CRHaveData 				; found it
.140b	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.140d	18		clc				clc 								; try the next line, keep going.
.140e	b2 18		lda ($18)			lda 	(codePtr)
.1410	65 18		adc $18				adc 	codePtr
.1412	85 18		sta $18				sta 	codePtr
.1414	90 e6		bcc $13fc			bcc 	_CRNextLine
.1416	e6 19		inc $19				inc 	codePtr+1
.1418	80 e2		bra $13fc			bra 	_CRNextLine
.141a					_CRNoData:
.141a	4c cf 25	jmp $25cf		jmp	ErrorV_data
.141d					_CLType:
.141d	4c 47 25	jmp $2547		jmp	ErrorV_type
.1420					_CRSyntax:
.1420	4c 17 25	jmp $2517		jmp	ErrorV_syntax
.1423					_CRHaveData:
.1423	20 9b 16	jsr $169b			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1426	68		pla				pla 								; type of l-expr
.1427	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1429	30 f2		bmi $141d			bmi 	_CLType
.142b	68		pla				pla 								; restore address
.142c	85 23		sta $23				sta 	zTemp0+1
.142e	68		pla				pla
.142f	85 22		sta $22				sta 	zTemp0
.1431	20 b4 12	jsr $12b4			jsr 	AssignData 					; write R0 there.
.1434	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1437	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1439	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.143b	d0 04		bne $1441			bne 	_CRSwapBack
.143d	c8		iny				iny 								; consume comma
.143e	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.1441					_CRSwapBack:
.1441	20 79 14	jsr $1479			jsr 	SwapCodeDataPointers		; swap them back.
.1444	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1446	c8		iny				iny
.1447	c9 99		cmp #$99			cmp 	#PR_COMMA
.1449	f0 9b		beq $13e6			beq 	Command_READ 				; if so go round again.
.144b	88		dey				dey 								; unpick get.
.144c	60		rts				rts
.144d					Command_DATA:
.144d	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.144f	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1451	20 27 24	jsr $2427			jsr 	ScanForward
.1454	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1456	d0 01		bne $1459			bne 	_CDNotEOL
.1458	88		dey				dey
.1459					_CDNotEOL:
.1459	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.145a					Command_REM:
.145a					Command_REM2:
.145a	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.145c	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.145e	d0 06		bne $1466			bne 	_CRExit
.1460	c8		iny				iny 								; skip over it, it's a comment.
.1461	98		tya				tya
.1462	38		sec				sec
.1463	71 18		adc ($18),y			adc 	(codePtr),y
.1465	a8		tay				tay
.1466					_CRExit:
.1466	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1467					S
.1467					Command_RESTORE:
.1467	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.146a	8d 0c 05	sta $050c			sta 	dataPtr+1
.146d	9c 0b 05	stz $050b			stz 	dataPtr
.1470	a9 03		lda #$03			lda 	#3 							; position start of line
.1472	8d 0d 05	sta $050d			sta 	dataPos
.1475	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.1478	60		rts				rts
.1479					SwapCodeDataPointers:
.1479	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.147c	a6 18		ldx $18				ldx 	codePtr
.147e	85 18		sta $18				sta 	codePtr
.1480	8e 0b 05	stx $050b			stx 	dataPtr
.1483	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.1486	a6 19		ldx $19				ldx 	codePtr+1
.1488	85 19		sta $19				sta 	codePtr+1
.148a	8e 0c 05	stx $050c			stx 	dataPtr+1
.148d	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.1490	8c 0d 05	sty $050d			sty 	dataPos
.1493	a8		tay				tay
.1494	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1495					Command_RUN:
.1495	20 44 10	jsr $1044			jsr 	ClearCode					; clear everything out.
.1498	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.149b	85 19		sta $19				sta 	codePtr+1
.149d	64 18		stz $18				stz 	codePtr
.149f	80 0b		bra $14ac			bra 	RUNNewLine
.14a1					RUNEndOfLine:
.14a1	18		clc				clc 								; advance to next line.
.14a2	b2 18		lda ($18)			lda 	(codePtr)
.14a4	65 18		adc $18				adc 	codePtr
.14a6	85 18		sta $18				sta 	codePtr
.14a8	90 02		bcc $14ac			bcc 	_RELNoCarry
.14aa	e6 19		inc $19				inc 	codePtr+1
.14ac					_RELNoCarry:
.14ac					RUNNewLine:
.14ac	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14ae	9a		txs				txs
.14af	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14b1	f0 4d		beq $1500			beq 	Command_END
.14b3	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14b5	b1 18		lda ($18),y			lda 	(codePtr),y
.14b7	8d 26 06	sta $0626			sta 	ERRLine
.14ba	c8		iny				iny
.14bb	b1 18		lda ($18),y			lda 	(codePtr),y
.14bd	8d 27 06	sta $0627			sta 	ERRLine+1
.14c0	c8		iny				iny 								; offset into codePtr for start of line.
.14c1					RUNNewCommand:
.14c1	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14c4	ce 10 05	dec $0510			dec 	checkCounter
.14c7	d0 0a		bne $14d3			bne 	_RNCNoCheck
.14c9	5a		phy				phy 								; keyboard check.
.14ca	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.14cd	7a		ply				ply
.14ce	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.14d1	d0 1e		bne $14f1			bne 	_RUNBreak
.14d3					_RNCNoCheck:
.14d3	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.14d5	10 1d		bpl $14f4			bpl		_RUNNotToken 				; probably an identifier
.14d7	c8		iny				iny 								; consume token
.14d8	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.14da	f0 e5		beq $14c1			beq 	RUNNewCommand
.14dc	c9 ad		cmp #$ad			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.14de	b0 0e		bcs $14ee			bcs 	_RUNSyntax
.14e0	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.14e2	90 0a		bcc $14ee			bcc 	_RUNSyntax
.14e4	0a		asl a				asl 	a 							; double into X.
.14e5	aa		tax				tax
.14e6	20 eb 14	jsr $14eb			jsr 	_RUNDispatchMain			; call the main dispatcher
.14e9	80 d6		bra $14c1			bra 	RUNNewCommand
.14eb					_RUNDispatchMain:
.14eb	7c 25 1c	jmp ($1c25,x)			jmp 	(VectorTable,x)
.14ee					_RUNSyntax:
.14ee	4c 17 25	jmp $2517		jmp	ErrorV_syntax
.14f1					_RUNBreak:
.14f1	4c a2 26	jmp $26a2		jmp	ErrorV_break
.14f4					_RUNNotToken:
.14f4	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.14f6	90 f6		bcc $14ee			bcc 	_RUNSyntax
.14f8	20 93 12	jsr $1293			jsr 	CommandLET 					; assignment
.14fb	80 c4		bra $14c1			bra 	RUNNewCommand 				; loop round.
.14fd					Command_Shift_Handler:
.14fd	4c 59 25	jmp $2559		jmp	ErrorV_unimplemented
.1500					Command_END:
.1500	4c 34 28	jmp $2834			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1503					Command_STOP:
.1503	4c bb 25	jmp $25bb		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1506					Command_Sys:
.1506	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16 			; execution address
.1509	5a		phy				phy
.150a	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.150d	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1510	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.1513	20 18 15	jsr $1518			jsr 	_CSCallIFR0 				; call the code
.1516	7a		ply				ply
.1517	60		rts				rts
.1518					_CSCallIFR0:
.1518	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.151b					NoExec01:
.151b					NoExec02:
.151b					NoExec03:
.151b					NoExec04:
.151b					NoExec05:
.151b					NoExec06:
.151b					NoExec07:
.151b					NoExec08:
.151b	4c 17 25	jmp $2517		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.151e					EXPBinAdd:
.151e	24 0b		bit $0b				bit 	IFR0+IExp
.1520	30 6f		bmi $1591			bmi 	EXPConcatenate
.1522	a2 0c		ldx #$0c			ldx 	#IFR1
.1524	4c 52 2a	jmp $2a52			jmp 	IFloatAdd
.1527					EXPBinSub:
.1527	24 0b		bit $0b				bit 	IFR0+IExp
.1529	30 3f		bmi $156a			bmi 	EXPTypeError
.152b	a2 0c		ldx #$0c			ldx 	#IFR1
.152d	4c 4b 2a	jmp $2a4b			jmp 	IFloatSubtract
.1530					EXPBinMul:
.1530	24 0b		bit $0b				bit 	IFR0+IExp
.1532	30 36		bmi $156a			bmi 	EXPTypeError
.1534	a2 0c		ldx #$0c			ldx 	#IFR1
.1536	4c fc 2a	jmp $2afc			jmp 	IFloatMultiply
.1539					EXPBinFDiv:
.1539	24 0b		bit $0b				bit 	IFR0+IExp
.153b	30 2d		bmi $156a			bmi 	EXPTypeError
.153d	a2 0c		ldx #$0c			ldx 	#IFR1
.153f	20 7f 2d	jsr $2d7f			jsr 	IFloatDivideFloat
.1542	b0 0f		bcs $1553			bcs 	EXPDZero
.1544	60		rts				rts
.1545					EXPBinIDiv:
.1545	24 0b		bit $0b				bit 	IFR0+IExp
.1547	30 21		bmi $156a			bmi 	EXPTypeError
.1549	a2 0c		ldx #$0c			ldx 	#IFR1
.154b	20 7f 2d	jsr $2d7f			jsr 	IFloatDivideFloat
.154e	b0 03		bcs $1553			bcs 	EXPDZero
.1550	4c 5c 2d	jmp $2d5c			jmp 	IFloatIntegerR0
.1553					EXPDZero:
.1553	4c 90 25	jmp $2590		jmp	ErrorV_divzero
.1556					EXPBinIMod:
.1556	24 0b		bit $0b				bit 	IFR0+IExp
.1558	30 10		bmi $156a			bmi 	EXPTypeError
.155a	a2 0c		ldx #$0c			ldx 	#IFR1
.155c	5a		phy				phy
.155d	20 94 2c	jsr $2c94			jsr 	IFPreProcessBitwise 		; set up everything.
.1560	d0 05		bne $1567			bne 	EXPDRange
.1562	20 cd 2b	jsr $2bcd			jsr 	IFloatModulusInteger
.1565	7a		ply				ply
.1566	60		rts				rts
.1567					EXPDRange:
.1567	4c 28 25	jmp $2528		jmp	ErrorV_range
.156a					EXPTypeError:
.156a	4c 47 25	jmp $2547		jmp	ErrorV_type
.156d					EXPBinAnd:
.156d	24 0b		bit $0b				bit 	IFR0+IExp
.156f	30 f9		bmi $156a			bmi 	EXPTypeError
.1571	a2 0c		ldx #$0c			ldx 	#IFR1
.1573	20 4f 2c	jsr $2c4f			jsr 	IFloatBitwiseAnd
.1576	b0 ef		bcs $1567			bcs 	EXPDRange
.1578	60		rts				rts
.1579					EXPBinOr:
.1579	24 0b		bit $0b				bit 	IFR0+IExp
.157b	30 ed		bmi $156a			bmi 	EXPTypeError
.157d	a2 0c		ldx #$0c			ldx 	#IFR1
.157f	20 66 2c	jsr $2c66			jsr 	IFloatBitwiseOr
.1582	b0 e3		bcs $1567			bcs 	EXPDRange
.1584	60		rts				rts
.1585					EXPBinXor:
.1585	24 0b		bit $0b				bit 	IFR0+IExp
.1587	30 e1		bmi $156a			bmi 	EXPTypeError
.1589	a2 0c		ldx #$0c			ldx 	#IFR1
.158b	20 7d 2c	jsr $2c7d			jsr 	IFloatBitwiseXor
.158e	b0 d7		bcs $1567			bcs 	EXPDRange
.1590	60		rts				rts
.1591					EXPConcatenate:
.1591	18		clc				clc
.1592	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.1594	72 0c		adc ($0c)			adc 	(IFR1)
.1596	b0 2d		bcs $15c5			bcs 	_EXPCError
.1598	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.159a	da		phx				phx
.159b	a6 09		ldx $09				ldx 	IFR0+1
.159d	da		phx				phx
.159e	20 aa 27	jsr $27aa			jsr 	StringTempAllocate 			; allocate string, set up return
.15a1	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15a3	a5 0c		lda $0c				lda 	IFR1
.15a5	20 ae 15	jsr $15ae			jsr 	_EXPCCopyXA
.15a8	fa		plx				plx 								; copy second string
.15a9	68		pla				pla
.15aa	20 ae 15	jsr $15ae			jsr 	_EXPCCopyXA
.15ad	60		rts				rts
.15ae					_EXPCCopyXA:
.15ae	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15b0	85 22		sta $22				sta 	zTemp0
.15b2	b2 22		lda ($22)			lda 	(zTemp0)					; length
.15b4	f0 0e		beq $15c4			beq 	_EXPCCExit 					; nothing.
.15b6	aa		tax				tax 								; count
.15b7	5a		phy				phy 								; start positioin
.15b8	a0 01		ldy #$01			ldy 	#1
.15ba					_EXPCCLoop:
.15ba	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15bc	20 df 27	jsr $27df			jsr 	StringTempWrite
.15bf	c8		iny				iny
.15c0	ca		dex				dex
.15c1	d0 f7		bne $15ba			bne 	_EXPCCLoop
.15c3	7a		ply				ply
.15c4					_EXPCCExit:
.15c4	60		rts				rts
.15c5					_EXPCError:
.15c5	4c 34 26	jmp $2634		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15c8					EXPReturnTrue:
.15c8	a2 08		ldx #$08			ldx 	#IFR0
.15ca	a9 01		lda #$01			lda 	#1
.15cc	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.15cf	20 67 30	jsr $3067			jsr 	IFloatNegate
.15d2	60		rts				rts
.15d3					EXPReturnFalse:
.15d3	a2 08		ldx #$08			ldx 	#IFR0
.15d5	4c 5c 30	jmp $305c			jmp 	IFloatSetZero
.15d8					EXPCompareEqual:
.15d8	20 0e 16	jsr $160e			jsr 	EXPCompareBaseCode
.15db	c9 00		cmp #$00			cmp 	#0
.15dd	f0 e9		beq $15c8			beq 	EXPReturnTrue
.15df	80 f2		bra $15d3			bra 	EXPReturnFalse
.15e1					EXPCompareLess:
.15e1	20 0e 16	jsr $160e			jsr 	EXPCompareBaseCode
.15e4	c9 ff		cmp #$ff			cmp 	#$FF
.15e6	f0 e0		beq $15c8			beq 	EXPReturnTrue
.15e8	80 e9		bra $15d3			bra 	EXPReturnFalse
.15ea					EXPCompareGreater:
.15ea	20 0e 16	jsr $160e			jsr 	EXPCompareBaseCode
.15ed	c9 01		cmp #$01			cmp 	#1
.15ef	f0 d7		beq $15c8			beq 	EXPReturnTrue
.15f1	80 e0		bra $15d3			bra 	EXPReturnFalse
.15f3					EXPCompareNotEqual:
.15f3	20 0e 16	jsr $160e			jsr 	EXPCompareBaseCode
.15f6	c9 00		cmp #$00			cmp 	#0
.15f8	d0 ce		bne $15c8			bne 	EXPReturnTrue
.15fa	80 d7		bra $15d3			bra 	EXPReturnFalse
.15fc					EXPCompareLessEqual:
.15fc	20 0e 16	jsr $160e			jsr 	EXPCompareBaseCode
.15ff	c9 01		cmp #$01			cmp 	#1
.1601	d0 c5		bne $15c8			bne 	EXPReturnTrue
.1603	80 ce		bra $15d3			bra 	EXPReturnFalse
.1605					EXPCompareGreaterEqual:
.1605	20 0e 16	jsr $160e			jsr 	EXPCompareBaseCode
.1608	c9 ff		cmp #$ff			cmp 	#$FF
.160a	d0 bc		bne $15c8			bne 	EXPReturnTrue
.160c	80 c5		bra $15d3			bra 	EXPReturnFalse
.160e					EXPCompareBaseCode:
.160e	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1610	30 10		bmi $1622			bmi 	_EXCBCString
.1612	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1614	20 2a 2d	jsr $2d2a			jsr 	IFloatCompare
.1617	a5 08		lda $08				lda 	IFR0+IM0
.1619	f0 06		beq $1621			beq 	_EXCBCExit 					; return 0 if zero
.161b	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.161d	50 02		bvc $1621			bvc 	_EXCBCExit
.161f	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1621					_EXCBCExit:
.1621	60		rts				rts
.1622					_EXCBCString:
.1622	5a		phy				phy
.1623	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1625	d2 0c		cmp ($0c)			cmp 	(IFR1)
.1627	90 02		bcc $162b			bcc 	_EXCBCSmaller
.1629	b2 0c		lda ($0c)			lda 	(IFR1)
.162b					_EXCBCSmaller:
.162b	aa		tax				tax
.162c	f0 0d		beq $163b			beq 	_EXCBCMatches 				; if zero common length matches
.162e	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1630					_EXCBCCheckSmallerMatches:
.1630	c8		iny				iny 								; compare directly as far as common length
.1631	38		sec				sec
.1632	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1634	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1636	d0 08		bne $1640			bne 	_EXCBCExit2
.1638	ca		dex				dex
.1639	d0 f5		bne $1630			bne 	_EXCBCCheckSmallerMatches
.163b					_EXCBCMatches:
.163b	38		sec				sec
.163c	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.163e	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1640					_EXCBCExit2:
.1640	7a		ply				ply
.1641	c9 00		cmp #$00			cmp 	#0
.1643	f0 04		beq $1649			beq 	_EXCBCReturn
.1645	30 03		bmi $164a			bmi 	_EXCBCFF
.1647	a9 01		lda #$01			lda 	#1
.1649					_EXCBCReturn:
.1649	60		rts				rts
.164a					_EXCBCFF:
.164a	a9 ff		lda #$ff			lda 	#$FF
.164c	60		rts				rts
.164d					_EXCBCRange:
.164d	4c 28 25	jmp $2528		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1650					EXPBinLeft:
.1650	a9 ff		lda #$ff			lda 	#$FF
.1652	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.1655	4c 5b 16	jmp $165b			jmp 	EXPShiftCommon
.1658					EXPBinRight:
.1658	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.165b					EXPShiftCommon:
.165b	a5 0b		lda $0b				lda 	IFR0+IExp 					; both integers
.165d	05 0f		ora $0f				ora 	IFR1+IExp
.165f	29 7f		and #$7f			and 	#$7F
.1661	d0 35		bne $1698			bne 	_EXPSRange
.1663	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1665	29 e0		and #$e0			and 	#$E0
.1667	05 09		ora $09				ora 	IFR0+IM1
.1669	05 0a		ora $0a				ora 	IFR0+IM2
.166b	d0 25		bne $1692			bne 	_EXPSShiftZero 				; if so return zero
.166d	5a		phy				phy
.166e	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.1670	29 1f		and #$1f			and 	#$1F
.1672	f0 17		beq $168b			beq 	_EXPSExit 					; exit if zero
.1674	a8		tay				tay
.1675					_EXPSLoop:
.1675	a2 0c		ldx #$0c			ldx 	#IFR1
.1677	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.167a	30 05		bmi $1681			bmi 	_EXPSShiftLeft
.167c	20 8b 30	jsr $308b			jsr 	IFloatShiftRight
.167f	80 07		bra $1688			bra 	_EXPSContinue
.1681					_EXPSShiftLeft:
.1681	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.1684	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts
.1686	30 10		bmi $1698			bmi 	_EXPSRange
.1688					_EXPSContinue:
.1688	88		dey				dey
.1689	d0 ea		bne $1675			bne 	_EXPSLoop
.168b					_EXPSExit:
.168b	a2 0c		ldx #$0c			ldx 	#IFR1
.168d	20 ed 2f	jsr $2fed			jsr 	IFloatCopyFromRegister
.1690	7a		ply				ply
.1691	60		rts				rts
.1692					_EXPSShiftZero:
.1692	a2 08		ldx #$08			ldx 	#IFR0
.1694	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.1697	60		rts				rts
.1698					_EXPSRange:
.1698	4c 28 25	jmp $2528		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.169b					EXPEvaluateExpression:
.169b	a9 00		lda #$00			lda 	#0 							; current precedence
.169d					EXPEvaluateExpressionPrecedenceA:
.169d	48		pha				pha
.169e	20 18 17	jsr $1718			jsr 	EXPTermValueR0				; do first term.
.16a1					_EELoop:
.16a1	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16a3	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16a5	90 31		bcc $16d8			bcc 	_EEExit
.16a7	aa		tax				tax 								; access the precedence of the operator.
.16a8	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16a9	dd 6e 19	cmp $196e,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16ac	b0 2b		bcs $16d9			bcs 	_EEExit2
.16ae	48		pha				pha 								; save current precedence.
.16af	da		phx				phx 								; save operator
.16b0	c8		iny				iny 								; consume operator
.16b1	da		phx				phx
.16b2	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16b4	20 ab 2f	jsr $2fab			jsr 	IFloatPushRx
.16b7	fa		plx				plx
.16b8	bd 6e 19	lda $196e,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16bb	20 9d 16	jsr $169d			jsr 	EXPEvaluateExpressionPrecedenceA
.16be	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16c0	20 cc 2f	jsr $2fcc			jsr 	IFloatPullRx
.16c3	fa		plx				plx 								; operator
.16c4	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16c6	45 0f		eor $0f				eor 	IFR1+IExp
.16c8	30 08		bmi $16d2			bmi 	_EEType
.16ca					_EETypeOkay:
.16ca	8a		txa				txa
.16cb	0a		asl a				asl 	a 							; double -> X
.16cc	aa		tax				tax
.16cd	20 d5 16	jsr $16d5			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.16d0	80 cf		bra $16a1			bra 	_EELoop
.16d2					_EEType:
.16d2	4c 47 25	jmp $2547		jmp	ErrorV_type
.16d5					_EECallBinary:
.16d5	7c 25 1c	jmp ($1c25,x)			jmp 	(VectorTable,x)
.16d8					_EEExit:
.16d8	68		pla				pla 								; throw precedence
.16d9					_EEExit2:
.16d9	18		clc				clc
.16da	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.16db					EXPEvalNumber:
.16db	20 9b 16	jsr $169b			jsr 	EXPEvaluateExpression
.16de	24 0b		bit $0b				bit 	IFR0+IExp
.16e0	30 01		bmi $16e3			bmi 	EVUType
.16e2	60		rts				rts
.16e3					EVUType:
.16e3	4c 47 25	jmp $2547		jmp	ErrorV_type
.16e6					EXPEvalInteger:
.16e6	20 db 16	jsr $16db			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.16e9	20 5c 2d	jsr $2d5c			jsr 	IFloatIntegerR0
.16ec	60		rts				rts
.16ed					EXPEvalInteger16:
.16ed	20 e6 16	jsr $16e6			jsr 	EXPEvalInteger
.16f0	a5 0a		lda $0a				lda 	IFR0+IM2
.16f2	d0 21		bne $1715			bne 	EVURange
.16f4	a6 09		ldx $09				ldx 	IFR0+IM1
.16f6	a5 08		lda $08				lda 	IFR0+IM0
.16f8	60		rts				rts
.16f9					EXPEvalInteger8:
.16f9	20 e6 16	jsr $16e6			jsr 	EXPEvalInteger
.16fc	a5 0a		lda $0a				lda 	IFR0+IM2
.16fe	05 09		ora $09				ora 	IFR0+IM1
.1700	d0 13		bne $1715			bne 	EVURange
.1702	a5 08		lda $08				lda 	IFR0+IM0
.1704	60		rts				rts
.1705					EXPEvalString:
.1705	20 9b 16	jsr $169b			jsr 	EXPEvaluateExpression
.1708	24 0b		bit $0b				bit 	IFR0+IExp
.170a	10 d7		bpl $16e3			bpl 	EVUType
.170c	a6 09		ldx $09				ldx 	IFR0+IM1
.170e	86 23		stx $23				stx 	zTemp0+1
.1710	a5 08		lda $08				lda 	IFR0+IM0
.1712	85 22		sta $22				sta 	zTemp0
.1714	60		rts				rts
.1715					EVURange:
.1715	4c 28 25	jmp $2528		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1718					EXPTermValueR0:
.1718	20 63 17	jsr $1763			jsr 	EXPTermR0 					; get term
.171b	90 45		bcc $1762			bcc 	_ETVNotReference 			; exit if value.
.171d	5a		phy				phy
.171e	a0 03		ldy #$03			ldy 	#3 							; get type
.1720	b1 08		lda ($08),y			lda 	(IFR0),y
.1722	30 14		bmi $1738			bmi 	_ETVDereferenceString
.1724	85 0b		sta $0b				sta 	IFR0+IExp 					; dereference to R0
.1726	88		dey				dey
.1727	b1 08		lda ($08),y			lda 	(IFR0),y
.1729	85 0a		sta $0a				sta 	IFR0+IM2
.172b	88		dey				dey
.172c	b1 08		lda ($08),y			lda 	(IFR0),y
.172e	aa		tax				tax
.172f	b2 08		lda ($08)			lda 	(IFR0)
.1731	86 09		stx $09				stx 	IFR0+IM1
.1733	85 08		sta $08				sta 	IFR0+IM0
.1735	7a		ply				ply
.1736	18		clc				clc
.1737	60		rts				rts
.1738					_ETVDereferenceString:
.1738	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.173a	b1 08		lda ($08),y			lda 	(IFR0),y
.173c	12 08		ora ($08)			ora 	(IFR0)
.173e	f0 11		beq $1751			beq 	_ETVNull
.1740	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1742	aa		tax				tax
.1743	b2 08		lda ($08)			lda 	(IFR0)
.1745	18		clc				clc 								; add two so points to actual string.
.1746	69 02		adc #$02			adc 	#2
.1748	90 01		bcc $174b			bcc 	_EVDSNoCarry
.174a	e8		inx				inx
.174b					_EVDSNoCarry:
.174b	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.174d	85 08		sta $08				sta 	IFR0
.174f	80 08		bra $1759			bra 	_ETVFillExit 				; tidy up and exit.
.1751					_ETVNull:
.1751	a9 61		lda #$61			lda 	#_EVTNString & $FF
.1753	85 08		sta $08				sta 	IFR0+IM0
.1755	a9 17		lda #$17			lda 	#_EVTNString >> 8
.1757	85 09		sta $09				sta 	IFR0+IM1
.1759					_ETVFillExit:
.1759	64 0a		stz $0a				stz 	IFR0+IM2
.175b	a9 80		lda #$80			lda 	#$80
.175d	85 0b		sta $0b				sta 	IFR0+IExp
.175f	7a		ply				ply
.1760	60		rts				rts
.1761					_EVTNString:
>1761	00						.byte 	0
.1762					_ETVNotReference:
.1762	60		rts				rts
.1763					EXPTermR0:
.1763	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1765	30 10		bmi $1777			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1767	c8		iny				iny 								; consume element
.1768	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.176a	b0 08		bcs $1774			bcs 	_ETMIdentifier
.176c	20 9b 17	jsr $179b			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.176f	20 ce 17	jsr $17ce			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1772	18		clc				clc 								; return value
.1773	60		rts				rts
.1774					_ETMIdentifier:
.1774	4c f3 29	jmp $29f3			jmp 	VARCheckSimple 				; check simple variables A-Z
.1777					_ETMIsUnaryOrMinus:
.1777	c8		iny				iny 								; consume element
.1778	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.177a	d0 0a		bne $1786			bne 	_ETMCheckUnary
.177c	20 18 17	jsr $1718			jsr 	EXPTermValueR0 				; get a term to negate
.177f	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.1781	20 67 30	jsr $3067			jsr 	IFloatNegate
.1784	18		clc				clc
.1785	60		rts				rts
.1786					_ETMCheckUnary:
.1786	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1788	90 0e		bcc $1798			bcc 	_ETMUnarySyntax
.178a	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.178c	b0 0a		bcs $1798			bcs 	_ETMUnarySyntax
.178e	0a		asl a				asl 	a
.178f	aa		tax				tax
.1790	20 95 17	jsr $1795			jsr 	_ETMCallUnaryFunction
.1793	18		clc				clc
.1794	60		rts				rts
.1795					_ETMCallUnaryFunction:
.1795	7c 25 1c	jmp ($1c25,x)			jmp 	(VectorTable,x)
.1798					_ETMUnarySyntax:
.1798	4c 17 25	jmp $2517		jmp	ErrorV_syntax
.179b					EXPExtractTokenisedInteger:
.179b	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.179d	64 0b		stz $0b				stz 	IFR0+IExp
.179f	64 09		stz $09				stz 	IFR0+IM1
.17a1	64 0a		stz $0a				stz 	IFR0+IM2
.17a3					_ETMConstant:
.17a3	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17a5	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17a7	b0 24		bcs $17cd			bcs 	_ETMCExit 					; no.
.17a9	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17ab	a5 09		lda $09				lda 	IFR0+IM1
.17ad	85 0a		sta $0a				sta 	IFR0+IM2
.17af	a5 08		lda $08				lda 	IFR0+IM0
.17b1	85 09		sta $09				sta 	IFR0+IM1
.17b3	64 08		stz $08				stz 	IFR0+IM0
.17b5	8a		txa				txa
.17b6	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17b7	66 0a		ror $0a				ror 	IFR0+IM2
.17b9	66 09		ror $09				ror 	IFR0+IM1
.17bb	66 08		ror $08				ror 	IFR0+IM0
.17bd	4a		lsr a				lsr 	a
.17be	66 0a		ror $0a				ror 	IFR0+IM2
.17c0	66 09		ror $09				ror 	IFR0+IM1
.17c2	66 08		ror $08				ror 	IFR0+IM0
.17c4	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17c6	11 18		ora ($18),y			ora 	(codePtr),y
.17c8	85 08		sta $08				sta 	IFR0+IM0
.17ca	c8		iny				iny 								; consume, loop back
.17cb	80 d6		bra $17a3			bra 	_ETMConstant
.17cd					_ETMCExit:
.17cd	60		rts				rts
.17ce					EXPCheckDecimalFollows:
.17ce	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.17d0	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.17d2	d0 19		bne $17ed			bne 	_ETMCDExit
.17d4	c8		iny				iny 								; consume token.
.17d5	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.17d7	5a		phy				phy									; save current position
.17d8	48		pha				pha 								; save count of chars.
.17d9	38		sec				sec 								; address into YX : y + codePtr+1
.17da	98		tya				tya
.17db	65 18		adc $18				adc 	codePtr
.17dd	aa		tax				tax
.17de	a5 19		lda $19				lda 	codePtr+1
.17e0	69 00		adc #$00			adc 	#0
.17e2	a8		tay				tay
.17e3	68		pla				pla 								; get count.
.17e4	20 00 2f	jsr $2f00			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.17e7	7a		ply				ply 								; go to next token.
.17e8	98		tya				tya
.17e9	38		sec				sec
.17ea	71 18		adc ($18),y			adc 	(codePtr),y
.17ec	a8		tay				tay
.17ed					_ETMCDExit:
.17ed	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.17ee					EXPUnaryAbs:
.17ee	20 db 16	jsr $16db			jsr 	EXPEvalNumber 					; number to R0
.17f1	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.17f4	20 a0 2c	jsr $2ca0			jsr 	IFloatAbsoluteR0
.17f7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.17f8					EXPUnaryAsc:
.17f8	20 05 17	jsr $1705			jsr 	EXPEvalString 					; string to R0, zTemp0
.17fb	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.17fe	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1800	f0 06		beq $1808			beq 	_EXAZero 						; if so return 0
.1802	5a		phy				phy 									; otherwise get first character
.1803	a0 01		ldy #$01			ldy 	#1
.1805	b1 22		lda ($22),y			lda 	(zTemp0),y
.1807	7a		ply				ply
.1808					_EXAZero:
.1808	a2 08		ldx #$08			ldx 	#IFR0
.180a	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.180d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.180e					EXPUnaryChr:
.180e	20 f9 16	jsr $16f9			jsr 	EXPEvalInteger8 				; expr
.1811	48		pha				pha 									; push on stack
.1812	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.1815	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1817	20 aa 27	jsr $27aa			jsr 	StringTempAllocate
.181a	68		pla				pla
.181b	20 df 27	jsr $27df			jsr 	StringTempWrite
.181e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.181f					EXPUnaryDec:
.181f	20 05 17	jsr $1705			jsr 	EXPEvalString 					; string to R0, zTemp0
.1822	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.1825	5a		phy				phy
.1826	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1828	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.182b	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.182d	f0 3b		beq $186a			beq 	_EUDError 						; empty string
.182f	aa		tax				tax
.1830	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1832					_EUDLoop:
.1832	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next
.1834	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1836	90 02		bcc $183a			bcc 	_EUDNoCase
.1838	e9 20		sbc #$20			sbc 	#$20
.183a					_EUDNoCase:
.183a	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.183c	90 2c		bcc $186a			bcc 	_EUDError
.183e	c9 3a		cmp #$3a			cmp 	#'9'+1
.1840	90 0a		bcc $184c			bcc 	_EUDOkay
.1842	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1844	90 24		bcc $186a			bcc 	_EUDError
.1846	c9 47		cmp #$47			cmp 	#'F'+1
.1848	b0 20		bcs $186a			bcs 	_EUDError
.184a	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.184c					_EUDOkay:
.184c	29 0f		and #$0f			and 	#15 							; make constant
.184e	da		phx				phx
.184f	48		pha				pha
.1850	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1852	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.1855	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.1858	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.185b	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.185e	68		pla				pla 									; pop constant and OR in
.185f	fa		plx				plx
.1860	05 08		ora $08				ora 	IFR0+IM0
.1862	85 08		sta $08				sta 	IFR0+IM0
.1864	c8		iny				iny 									; next
.1865	ca		dex				dex
.1866	d0 ca		bne $1832			bne 	_EUDLoop
.1868	7a		ply				ply
.1869	60		rts				rts
.186a					_EUDError:
.186a	4c 39 25	jmp $2539		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.186d					EXPUnaryInlineDec:
.186d	4c 17 25	jmp $2517		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1870					EXPUnaryPeek:
.1870	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16 				; number to R0
.1873	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.1876	b2 08		lda ($08)			lda 	(IFR0)
.1878	a2 08		ldx #$08			ldx 	#IFR0
.187a	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.187d	60		rts				rts
.187e					EXPUnaryDeek:
.187e	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16 				; number to R0
.1881	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.1884	5a		phy				phy
.1885	a0 01		ldy #$01			ldy 	#1
.1887	b1 08		lda ($08),y			lda 	(IFR0),y
.1889	7a		ply				ply
.188a	48		pha				pha
.188b	b2 08		lda ($08)			lda 	(IFR0)
.188d	a2 08		ldx #$08			ldx 	#IFR0
.188f	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.1892	68		pla				pla
.1893	85 09		sta $09				sta 	IFR0+IM1
.1895	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1896					EXPUnaryNull:
.1896	20 18 17	jsr $1718			jsr 	EXPTermValueR0
.1899	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.189a					EXPUnaryFrac:
.189a	20 db 16	jsr $16db			jsr 	EXPEvalNumber 					; number to R0
.189d	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.18a0	20 06 2d	jsr $2d06			jsr 	IFloatFractionalR0
.18a3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18a4					EXPUnaryInkey:
.18a4	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.18a7	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18a9	20 aa 27	jsr $27aa			jsr 	StringTempAllocate
.18ac	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.18af	b0 06		bcs $18b7			bcs 	_EUIExit
.18b1	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18b4	20 df 27	jsr $27df			jsr 	StringTempWrite
.18b7					_EUIExit:
.18b7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18b8					EXPUnaryInt:
.18b8	20 db 16	jsr $16db			jsr 	EXPEvalNumber 					; number to R0
.18bb	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.18be	20 5c 2d	jsr $2d5c			jsr 	IFloatIntegerR0
.18c1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18c2					EXPUnaryLen:
.18c2	20 05 17	jsr $1705			jsr 	EXPEvalString 					; string to R0, zTemp0
.18c5	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.18c8	b2 22		lda ($22)			lda 	(zTemp0)
.18ca	a2 08		ldx #$08			ldx 	#IFR0
.18cc	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.18cf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.18d0					EXPUnaryParenthesis:
.18d0	20 db 16	jsr $16db			jsr 	EXPEvalNumber 					; number to R0
.18d3	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.18d6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.18d7					EXPUnaryRnd:
.18d7	20 db 16	jsr $16db			jsr 	EXPEvalNumber 				; number to R0
.18da	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 				; )
.18dd	a2 08		ldx #$08			ldx 	#IFR0
.18df	20 f6 18	jsr $18f6			jsr 	EXPLoadInRandom
.18e2	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.18e4	85 0b		sta $0b				sta 	IFR0+IExp
.18e6	60		rts				rts
.18e7					ExpUnaryRand:
.18e7	20 e6 16	jsr $16e6			jsr 	EXPEvalInteger 				; integer to R0
.18ea	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 				; )
.18ed	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.18ef	20 f6 18	jsr $18f6			jsr 	EXPLoadInRandom
.18f2	20 cd 2b	jsr $2bcd			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.18f5	60		rts				rts
.18f6					EXPLoadInRandom:
.18f6	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.18f9	20 0b 19	jsr $190b			jsr 	EXPRandom32
.18fc	95 00		sta $00,x			sta 	IM0,x
.18fe	20 0b 19	jsr $190b			jsr 	EXPRandom32
.1901	95 01		sta $01,x			sta 	IM1,x
.1903	20 0b 19	jsr $190b			jsr 	EXPRandom32
.1906	29 7f		and #$7f			and 	#$7F
.1908	95 02		sta $02,x			sta 	IM2,x
.190a	60		rts				rts
.190b					EXPRandom32:
.190b	5a		phy				phy
.190c	a0 08		ldy #$08			ldy 	#8
.190e	ad 12 05	lda $0512			lda 	EXPSeed+0
.1911	0d 13 05	ora $0513			ora 	EXPSeed+1
.1914	0d 14 05	ora $0514			ora 	EXPSeed+2
.1917	0d 15 05	ora $0515			ora 	EXPSeed+3
.191a	d0 08		bne $1924			bne 	_EXPRNoReset
.191c	ee 12 05	inc $0512			inc 	EXPSeed+0
.191f	a0 10		ldy #$10			ldy 	#16
.1921	8c 15 05	sty $0515			sty 	EXPSeed+3
.1924					_EXPRNoReset:
.1924	ad 12 05	lda $0512			lda 	EXPSeed+0
.1927					_EXPRLoop:
.1927	0a		asl a				asl		a
.1928	2e 13 05	rol $0513			rol 	EXPSeed+1
.192b	2e 14 05	rol $0514			rol 	EXPSeed+2
.192e	2e 15 05	rol $0515			rol 	EXPSeed+3
.1931	90 02		bcc $1935			bcc 	_EXPRNoEOR
.1933	49 c5		eor #$c5			eor 	#$C5
.1935					_EXPRNoEOR:
.1935	88		dey				dey
.1936	d0 ef		bne $1927			bne 	_EXPRLoop
.1938	8d 12 05	sta $0512			sta 	EXPSeed+0
.193b	7a		ply				ply
.193c	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.193d					EXPUnarySgn:
.193d	20 db 16	jsr $16db			jsr 	EXPEvalNumber 					; number to R0
.1940	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.1943	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1945	20 fe 2f	jsr $2ffe			jsr 	IFloatCopyToRegister
.1948	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.194a	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.194d	a2 0c		ldx #$0c			ldx 	#IFR1
.194f	20 2a 2d	jsr $2d2a			jsr 	IFloatCompare 					; compare R1 vs 0.
.1952	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1953					EXPUnarySqr:
.1953	20 db 16	jsr $16db			jsr 	EXPEvalNumber 					; number to R0
.1956	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.1959	20 a8 2c	jsr $2ca8			jsr 	IFloatSquareRootR0 				; square root.
.195c	b0 01		bcs $195f			bcs 	_EUSValue
.195e	60		rts				rts
.195f					_EUSValue:
.195f	4c 28 25	jmp $2528		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1962					EXPUnaryHex:
.1962	20 e6 16	jsr $16e6			jsr 	EXPEvalInteger 					; expr
.1965	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.1968	5a		phy				phy
.1969	a9 10		lda #$10			lda 	#16
.196b	20 fd 2d	jsr $2dfd			jsr 	IFloatIntegerToStringR0
.196e	80 0a		bra $197a			bra 	EUSMain
.1970					EXPUnaryStr:
.1970	20 db 16	jsr $16db			jsr 	EXPEvalNumber 					; expr
.1973	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.1976	5a		phy				phy
.1977	20 59 2e	jsr $2e59			jsr 	IFloatFloatToStringR0 			; convert to string
.197a					EUSMain:
.197a	b0 18		bcs $1994			bcs 	_EUSError
.197c	86 22		stx $22				stx 	zTemp0 							; save string address
.197e	84 23		sty $23				sty 	zTemp0+1
.1980	48		pha				pha 									; save count
.1981	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1983	20 aa 27	jsr $27aa			jsr 	StringTempAllocate
.1986	fa		plx				plx 									; count in X
.1987	a0 00		ldy #$00			ldy 	#0
.1989					_EUSCopy:
.1989	b1 22		lda ($22),y			lda 	(zTemp0),y
.198b	c8		iny				iny
.198c	20 df 27	jsr $27df			jsr 	StringTempWrite
.198f	ca		dex				dex
.1990	d0 f7		bne $1989			bne	 	_EUSCopy
.1992	7a		ply				ply
.1993	60		rts				rts
.1994					_EUSError:
.1994	4c 28 25	jmp $2528		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1997					EXPUnaryInlineString:
.1997	18		clc				clc 								; physical address -> IM0,1
.1998	98		tya				tya
.1999	65 18		adc $18				adc 	codePtr
.199b	85 08		sta $08				sta 	IFR0+IM0
.199d	a5 19		lda $19				lda 	codePtr+1
.199f	69 00		adc #$00			adc 	#0
.19a1	85 09		sta $09				sta 	IFR0+IM1
.19a3	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in rest
.19a5	a9 80		lda #$80			lda 	#$80
.19a7	85 0b		sta $0b				sta 	IFR0+IExp
.19a9	98		tya				tya	 								; skip over it.
.19aa	38		sec				sec
.19ab	71 18		adc ($18),y			adc 	(codePtr),y
.19ad	a8		tay				tay
.19ae	60		rts				rts
.19af					_EXPUISRange:
.19af	4c 28 25	jmp $2528		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19b2					EXPUnaryLeft:
.19b2	20 f8 19	jsr $19f8			jsr 	EXPCommonStart 					; <string>,
.19b5	48		pha				pha 									; save string address on stack
.19b6	da		phx				phx
.19b7	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19b9	48		pha				pha
.19ba	20 f9 16	jsr $16f9			jsr 	EXPEvalInteger8 				; characters to do
.19bd	80 44		bra $1a03			bra 	EXPSubstringCommon
.19bf					EXPUnaryRight:
.19bf	20 f8 19	jsr $19f8			jsr 	EXPCommonStart 					; <string>,
.19c2	48		pha				pha 									; save string address on stack
.19c3	da		phx				phx
.19c4	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19c6	48		pha				pha
.19c7	20 f9 16	jsr $16f9			jsr 	EXPEvalInteger8 				; characters to do
.19ca	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.19cc	68		pla				pla
.19cd	38		sec				sec
.19ce	e5 22		sbc $22				sbc 	zTemp0
.19d0	b0 02		bcs $19d4			bcs 	_EUROffLeft
.19d2	a9 00		lda #$00			lda 	#0
.19d4					_EUROffLeft:
.19d4	48		pha				pha 									; start pos
.19d5	a9 ff		lda #$ff			lda 	#255
.19d7	80 2a		bra $1a03			bra 	EXPSubstringCommon
.19d9					EXPUnaryMid:
.19d9	20 f8 19	jsr $19f8			jsr 	EXPCommonStart 					; <string>,
.19dc	48		pha				pha 									; save string address on stack
.19dd	da		phx				phx
.19de	20 f9 16	jsr $16f9			jsr 	EXPEvalInteger8 				; characters start
.19e1	f0 12		beq $19f5			beq 	_EUSError 						; 1 is left
.19e3	3a		dec a				dec 	a 								; zero based.
.19e4	48		pha				pha
.19e5	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.19e7	c9 99		cmp #$99			cmp 	#PR_COMMA
.19e9	f0 04		beq $19ef			beq 	_EUMLength 						; if so m is provided
.19eb	a9 ff		lda #$ff			lda 	#255 							; default m
.19ed	80 14		bra $1a03			bra 	EXPSubstringCommon
.19ef					_EUMLength:
.19ef	c8		iny				iny 									; consume comma
.19f0	20 f9 16	jsr $16f9			jsr 	EXPEvalInteger8 				; characters to do
.19f3	80 0e		bra $1a03			bra 	EXPSubstringCommon
.19f5					_EUSError:
.19f5	4c 39 25	jmp $2539		jmp	ErrorV_value
.19f8					EXPCommonStart:
.19f8	20 05 17	jsr $1705			jsr 	EXPEvalString
.19fb	20 bc 26	jsr $26bc			jsr 	ERRCheckComma
.19fe	a5 08		lda $08				lda 	IFR0+IM0
.1a00	a6 09		ldx $09				ldx 	IFR0+IM1
.1a02	60		rts				rts
.1a03					EXPSubstringCommon:
.1a03	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a05	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; check right bracket.
.1a08	68		pla				pla 									; start position
.1a09	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a0b	fa		plx				plx 									; get string address to zTemp2.
.1a0c	86 27		stx $27				stx 	zTemp2+1
.1a0e	68		pla				pla
.1a0f	85 26		sta $26				sta 	zTemp2
.1a11	38		sec				sec 									; length - start is the max count of chars
.1a12	b2 26		lda ($26)			lda 	(zTemp2)
.1a14	e5 25		sbc $25				sbc 	zTemp1+1
.1a16	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a18	b0 02		bcs $1a1c			bcs 	_EXPSSNoTrim
.1a1a	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a1c					_EXPSSNoTrim:
.1a1c	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a1e	20 aa 27	jsr $27aa			jsr 	StringTempAllocate 				; allocate memory for it.
.1a21	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a23	f0 15		beq $1a3a			beq 	_EXPSSExit
.1a25	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a27	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a29	b0 0f		bcs $1a3a			bcs 	_EXPSSExit
.1a2b	5a		phy				phy
.1a2c	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a2e	c8		iny				iny 									; +1 for the length byte
.1a2f					_EXPSSCopy:
.1a2f	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a31	20 df 27	jsr $27df			jsr 	StringTempWrite
.1a34	c8		iny				iny
.1a35	c6 24		dec $24				dec 	zTemp1
.1a37	d0 f6		bne $1a2f			bne 	_EXPSSCopy
.1a39	7a		ply				ply
.1a3a					_EXPSSExit:
.1a3a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a3b					EXPUnaryVal:
.1a3b	20 05 17	jsr $1705			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a3e	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 					; )
.1a41	20 45 1a	jsr $1a45			jsr 	VALConversionZTemp0
.1a44	60		rts				rts
.1a45					VALConversionZTemp0:
.1a45	5a		phy				phy
.1a46	18		clc				clc
.1a47	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a49	69 01		adc #$01			adc 	#1
.1a4b	aa		tax				tax
.1a4c	a5 23		lda $23				lda 	zTemp0+1
.1a4e	69 00		adc #$00			adc 	#0
.1a50	a8		tay				tay
.1a51	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a53	20 c0 2e	jsr $2ec0			jsr 	IFloatStringToFloatR0 			; do conversion
.1a56	b0 02		bcs $1a5a			bcs 	_EUVError
.1a58	7a		ply				ply
.1a59	60		rts				rts
.1a5a					_EUVError:
.1a5a	4c 39 25	jmp $2539		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a5d					BinaryPrecedence:
>1a5d	02					.byte	 2	; $ef =
>1a5e	02					.byte	 2	; $f0 <>
>1a5f	02					.byte	 2	; $f1 <=
>1a60	02					.byte	 2	; $f2 <
>1a61	02					.byte	 2	; $f3 >=
>1a62	02					.byte	 2	; $f4 >
>1a63	01					.byte	 1	; $f5 XOR
>1a64	01					.byte	 1	; $f6 OR
>1a65	01					.byte	 1	; $f7 AND
>1a66	04					.byte	 4	; $f8 DIV
>1a67	04					.byte	 4	; $f9 MOD
>1a68	04					.byte	 4	; $fa <<
>1a69	04					.byte	 4	; $fb >>
>1a6a	04					.byte	 4	; $fc /
>1a6b	04					.byte	 4	; $fd *
>1a6c	03					.byte	 3	; $fe -
>1a6d	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1a6e					StructureOffsets:
>1a6e	01					.byte	1  	; $80 REPEAT
>1a6f	ff					.byte	255	; $81 UNTIL
>1a70	01					.byte	1  	; $82 WHILE
>1a71	ff					.byte	255	; $83 WEND
>1a72	01					.byte	1  	; $84 IF
>1a73	ff					.byte	255	; $85 ENDIF
>1a74	01					.byte	1  	; $86 DO
>1a75	ff					.byte	255	; $87 LOOP
>1a76	01					.byte	1  	; $88 PROC
>1a77	ff					.byte	255	; $89 ENDPROC
>1a78	01					.byte	1  	; $8a FOR
>1a79	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1a7a					StandardTokens:
>1a7a	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1a81	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1a87	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1a8d	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1a92	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1a95	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1a9b	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1a9e	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1aa3	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1aa8	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1ab0	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1ab4	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1ab9	00					.byte	$00                                     	; $8c [[end]]
>1aba	00					.byte	$00                                     	; $8d [[shift]]
>1abb	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1ac0	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1ac5	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1ac8	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1acd	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1ad1	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1ad7	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1add	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1ae2	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1ae6	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1aea	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1aef	01 2c					.byte	$01,$2c                                 	; $99 ,
>1af1	01 3b					.byte	$01,$3b                                 	; $9a ;
>1af3	01 3a					.byte	$01,$3a                                 	; $9b :
>1af5	01 27					.byte	$01,$27                                 	; $9c '
>1af7	01 29					.byte	$01,$29                                 	; $9d )
>1af9	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1afd	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1b03	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1b07	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1b0b	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1b10	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1b14	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1b1b	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1b20	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1b25	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1b2a	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1b2f	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1b34	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $aa read
>1b39	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $ab data
>1b3e	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $ac restore
>1b46	00					.byte	0											; $ad
>1b47	00					.byte	0											; $ae
>1b48	00					.byte	0											; $af
>1b49	00					.byte	0											; $b0
>1b4a	00					.byte	0											; $b1
>1b4b	00					.byte	0											; $b2
>1b4c	00					.byte	0											; $b3
>1b4d	00					.byte	0											; $b4
>1b4e	00					.byte	0											; $b5
>1b4f	00					.byte	0											; $b6
>1b50	00					.byte	0											; $b7
>1b51	00					.byte	0											; $b8
>1b52	00					.byte	0											; $b9
>1b53	00					.byte	0											; $ba
>1b54	00					.byte	0											; $bb
>1b55	00					.byte	0											; $bc
>1b56	00					.byte	0											; $bd
>1b57	00					.byte	0											; $be
>1b58	00					.byte	0											; $bf
>1b59	00					.byte	0											; $c0
>1b5a	00					.byte	0											; $c1
>1b5b	00					.byte	0											; $c2
>1b5c	00					.byte	0											; $c3
>1b5d	00					.byte	0											; $c4
>1b5e	00					.byte	0											; $c5
>1b5f	00					.byte	0											; $c6
>1b60	00					.byte	0											; $c7
>1b61	00					.byte	0											; $c8
>1b62	00					.byte	0											; $c9
>1b63	00					.byte	0											; $ca
>1b64	00					.byte	0											; $cb
>1b65	00					.byte	0											; $cc
>1b66	00					.byte	0											; $cd
>1b67	00					.byte	0											; $ce
>1b68	00					.byte	0											; $cf
>1b69	00					.byte	0											; $d0
>1b6a	00					.byte	0											; $d1
>1b6b	00					.byte	0											; $d2
>1b6c	00					.byte	0											; $d3
>1b6d	00					.byte	0											; $d4
>1b6e	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1b74	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1b7a	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1b82	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1b89	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1b8f	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1b95	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1b9a	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1b9f	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1ba4	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1ba9	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1bae	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1bb4	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bb9	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1bc1	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1bc8	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1bcd	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1bd2	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1bd8	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1bdd	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1be3	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1be8	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1bee	01 28					.byte	$01,$28                                 	; $eb (
>1bf0	01 24					.byte	$01,$24                                 	; $ec $
>1bf2	00					.byte	$00                                     	; $ed [[decimal]]
>1bf3	00					.byte	$00                                     	; $ee [[string]]
>1bf4	01 3d					.byte	$01,$3d                                 	; $ef =
>1bf6	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1bf9	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1bfc	01 3c					.byte	$01,$3c                                 	; $f2 <
>1bfe	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1c01	01 3e					.byte	$01,$3e                                 	; $f4 >
>1c03	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1c07	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c0a	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c0e	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c12	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c16	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c19	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c1c	01 2f					.byte	$01,$2f                                 	; $fc /
>1c1e	01 2a					.byte	$01,$2a                                 	; $fd *
>1c20	01 2d					.byte	$01,$2d                                 	; $fe -
>1c22	01 2b					.byte	$01,$2b                                 	; $ff +
>1c24	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c25					VectorTable:
>1c25	07 24					.word	Command_REPEAT           ; $80 REPEAT
>1c27	10 24					.word	Command_UNTIL            ; $81 UNTIL
>1c29	ea 24					.word	Command_WHILE            ; $82 WHILE
>1c2b	0b 25					.word	Command_WEND             ; $83 WEND
>1c2d	dd 23					.word	IfCommand                ; $84 IF
>1c2f	06 24					.word	EndIf                    ; $85 ENDIF
>1c31	7a 22					.word	Command_DO               ; $86 DO
>1c33	92 22					.word	Command_LOOP             ; $87 LOOP
>1c35	1b 15					.word	NoExec08                 ; $88 PROC
>1c37	6e 22					.word	Command_ENDPROC          ; $89 ENDPROC
>1c39	9b 22					.word	Command_FOR              ; $8a FOR
>1c3b	28 23					.word	Command_NEXT             ; $8b NEXT
>1c3d	a1 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c3f	fd 14					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c41	ff 23					.word	ElseCode                 ; $8e ELSE
>1c43	1b 15					.word	NoExec01                 ; $8f THEN
>1c45	1b 15					.word	NoExec02                 ; $90 TO
>1c47	1b 15					.word	NoExec03                 ; $91 STEP
>1c49	93 12					.word	CommandLET               ; $92 LET
>1c4b	e4 11					.word	Command_Print            ; $93 PRINT
>1c4d	dd 11					.word	Command_Input            ; $94 INPUT
>1c4f	32 22					.word	Command_CALL             ; $95 CALL
>1c51	06 15					.word	Command_Sys              ; $96 SYS
>1c53	5a 14					.word	Command_REM              ; $97 REM
>1c55	83 22					.word	Command_EXIT             ; $98 EXIT
>1c57	1b 15					.word	NoExec04                 ; $99 ,
>1c59	1b 15					.word	NoExec05                 ; $9a ;
>1c5b	1b 15					.word	NoExec06                 ; $9b :
>1c5d	5a 14					.word	Command_REM2             ; $9c '
>1c5f	1b 15					.word	NoExec07                 ; $9d )
>1c61	97 10					.word	CommandDIM               ; $9e DIM
>1c63	23 10					.word	Command_CLEAR            ; $9f CLEAR
>1c65	dd 13					.word	Command_NEW              ; $a0 NEW
>1c67	95 14					.word	Command_RUN              ; $a1 RUN
>1c69	03 15					.word	Command_STOP             ; $a2 STOP
>1c6b	00 15					.word	Command_END              ; $a3 END
>1c6d	15 10					.word	Command_ASSERT           ; $a4 ASSERT
>1c6f	0d 13					.word	Command_LIST             ; $a5 LIST
>1c71	31 28					.word	NotImplemented           ; $a6 SAVE
>1c73	31 28					.word	NotImplemented           ; $a7 LOAD
>1c75	b6 11					.word	Command_Poke             ; $a8 POKE
>1c77	b3 11					.word	Command_Doke             ; $a9 DOKE
>1c79	e6 13					.word	Command_READ             ; $aa READ
>1c7b	4d 14					.word	Command_DATA             ; $ab DATA
>1c7d	67 14					.word	Command_RESTORE          ; $ac RESTORE
>1c7f	31 28					.word	NotImplemented           ; $ad
>1c81	31 28					.word	NotImplemented           ; $ae
>1c83	31 28					.word	NotImplemented           ; $af
>1c85	31 28					.word	NotImplemented           ; $b0
>1c87	31 28					.word	NotImplemented           ; $b1
>1c89	31 28					.word	NotImplemented           ; $b2
>1c8b	31 28					.word	NotImplemented           ; $b3
>1c8d	31 28					.word	NotImplemented           ; $b4
>1c8f	31 28					.word	NotImplemented           ; $b5
>1c91	31 28					.word	NotImplemented           ; $b6
>1c93	31 28					.word	NotImplemented           ; $b7
>1c95	31 28					.word	NotImplemented           ; $b8
>1c97	31 28					.word	NotImplemented           ; $b9
>1c99	31 28					.word	NotImplemented           ; $ba
>1c9b	31 28					.word	NotImplemented           ; $bb
>1c9d	31 28					.word	NotImplemented           ; $bc
>1c9f	31 28					.word	NotImplemented           ; $bd
>1ca1	31 28					.word	NotImplemented           ; $be
>1ca3	31 28					.word	NotImplemented           ; $bf
>1ca5	31 28					.word	NotImplemented           ; $c0
>1ca7	31 28					.word	NotImplemented           ; $c1
>1ca9	31 28					.word	NotImplemented           ; $c2
>1cab	31 28					.word	NotImplemented           ; $c3
>1cad	31 28					.word	NotImplemented           ; $c4
>1caf	31 28					.word	NotImplemented           ; $c5
>1cb1	31 28					.word	NotImplemented           ; $c6
>1cb3	31 28					.word	NotImplemented           ; $c7
>1cb5	31 28					.word	NotImplemented           ; $c8
>1cb7	31 28					.word	NotImplemented           ; $c9
>1cb9	31 28					.word	NotImplemented           ; $ca
>1cbb	31 28					.word	NotImplemented           ; $cb
>1cbd	31 28					.word	NotImplemented           ; $cc
>1cbf	31 28					.word	NotImplemented           ; $cd
>1cc1	31 28					.word	NotImplemented           ; $ce
>1cc3	31 28					.word	NotImplemented           ; $cf
>1cc5	31 28					.word	NotImplemented           ; $d0
>1cc7	31 28					.word	NotImplemented           ; $d1
>1cc9	31 28					.word	NotImplemented           ; $d2
>1ccb	31 28					.word	NotImplemented           ; $d3
>1ccd	31 28					.word	NotImplemented           ; $d4
>1ccf	7e 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1cd1	70 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1cd3	bf 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1cd5	b2 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1cd7	d9 19					.word	EXPUnaryMid              ; $d9 MID$(
>1cd9	70 19					.word	EXPUnaryStr              ; $da STR$(
>1cdb	3b 1a					.word	EXPUnaryVal              ; $db VAL(
>1cdd	3d 19					.word	EXPUnarySgn              ; $dc SGN(
>1cdf	ee 17					.word	EXPUnaryAbs              ; $dd ABS(
>1ce1	c2 18					.word	EXPUnaryLen              ; $de LEN(
>1ce3	53 19					.word	EXPUnarySqr              ; $df SQR(
>1ce5	0e 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1ce7	f8 17					.word	EXPUnaryAsc              ; $e1 ASC(
>1ce9	a4 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1ceb	31 28					.word	NotImplemented           ; $e3 EVENT(
>1ced	31 28					.word	NotImplemented           ; $e4 TIME
>1cef	b8 18					.word	EXPUnaryInt              ; $e5 INT(
>1cf1	9a 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1cf3	1f 18					.word	EXPUnaryDec              ; $e7 DEC(
>1cf5	62 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1cf7	d7 18					.word	EXPUnaryRnd              ; $e9 RND(
>1cf9	e7 18					.word	ExpUnaryRand             ; $ea RAND(
>1cfb	d0 18					.word	EXPUnaryParenthesis      ; $eb (
>1cfd	96 18					.word	EXPUnaryNull             ; $ec $
>1cff	6d 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1d01	97 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1d03	d8 15					.word	EXPCompareEqual          ; $ef =
>1d05	f3 15					.word	EXPCompareNotEqual       ; $f0 <>
>1d07	fc 15					.word	EXPCompareLessEqual      ; $f1 <=
>1d09	e1 15					.word	EXPCompareLess           ; $f2 <
>1d0b	05 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d0d	ea 15					.word	EXPCompareGreater        ; $f4 >
>1d0f	85 15					.word	EXPBinXor                ; $f5 XOR
>1d11	79 15					.word	EXPBinOr                 ; $f6 OR
>1d13	6d 15					.word	EXPBinAnd                ; $f7 AND
>1d15	45 15					.word	EXPBinIDiv               ; $f8 DIV
>1d17	56 15					.word	EXPBinIMod               ; $f9 MOD
>1d19	50 16					.word	EXPBinLeft               ; $fa <<
>1d1b	58 16					.word	EXPBinRight              ; $fb >>
>1d1d	39 15					.word	EXPBinFDiv               ; $fc /
>1d1f	30 15					.word	EXPBinMul                ; $fd *
>1d21	27 15					.word	EXPBinSub                ; $fe -
>1d23	1e 15					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d25					TOKDetokenise:
.1d25	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d27	84 27		sty $27				sty 	zTemp2+1
.1d29	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1d2c					_TOKDLoop:
.1d2c	20 5b 1d	jsr $1d5b			jsr 	TOKDGet 					; get next
.1d2f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1d31	f0 26		beq $1d59			beq 	_TOKDExit
.1d33	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1d35	f0 1d		beq $1d54			beq 	_TOKDDataItem
.1d37	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1d39	f0 19		beq $1d54			beq 	_TOKDDataItem
.1d3b	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1d3d	10 05		bpl $1d44			bpl 	_TOKDNotToken
.1d3f	20 23 1e	jsr $1e23			jsr 	TOKDToken 					; token to text.
.1d42	80 e8		bra $1d2c			bra 	_TOKDLoop
.1d44					_TOKDNotToken:
.1d44	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1d46	90 05		bcc $1d4d			bcc 	_TOKDNotIdentifier
.1d48	20 96 1d	jsr $1d96			jsr 	TOKDIdentifier
.1d4b	80 df		bra $1d2c			bra 	_TOKDLoop
.1d4d					_TOKDNotIdentifier:
.1d4d	a0 0a		ldy #$0a			ldy 	#10
.1d4f	20 df 1d	jsr $1ddf			jsr 	TOKDInteger
.1d52	80 d8		bra $1d2c			bra 	_TOKDLoop
.1d54					_TOKDDataItem:
.1d54	20 71 1d	jsr $1d71			jsr 	TOKDDataItem
.1d57	80 d3		bra $1d2c			bra 	_TOKDLoop
.1d59					_TOKDExit:
.1d59	18		clc				clc
.1d5a	60		rts				rts
.1d5b	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1d5d	e6 26		inc $26				inc 	zTemp2
.1d5f	d0 02		bne $1d63			bne 	_TKDGExit
.1d61	e6 27		inc $27				inc 	zTemp2+1
.1d63					_TKDGExit:
.1d63	60		rts				rts
.1d64					TOKDOutput:
.1d64	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1d67	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1d6a					TOKSetDetokeniseOutput:
.1d6a	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1d6d	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1d70	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1d71					TOKDDataItem:
.1d71	a8		tay				tay 								; type in Y
.1d72	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1d74	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1d76	f0 02		beq $1d7a			beq 	_TOKDDIsString
.1d78	a9 2e		lda #$2e			lda 	#'.'
.1d7a					_TOKDDIsString:
.1d7a	20 64 1d	jsr $1d64			jsr 	TOKDOutput 					; dump it
.1d7d	20 5b 1d	jsr $1d5b			jsr 	TOKDGet 					; get length into X
.1d80	aa		tax				tax
.1d81					_TOKDDOutput:
.1d81	ca		dex				dex 								; are we complete
.1d82	30 08		bmi $1d8c			bmi 	_TOKDDEnd
.1d84	20 5b 1d	jsr $1d5b			jsr 	TOKDGet 					; get character and output it
.1d87	20 64 1d	jsr $1d64			jsr 	TOKDOutput
.1d8a	80 f5		bra $1d81			bra 	_TOKDDOutput
.1d8c					_TOKDDEnd:
.1d8c	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1d8e	d0 05		bne $1d95			bne 	_TOKDDNotString
.1d90	a9 22		lda #$22			lda 	#'"'
.1d92	20 64 1d	jsr $1d64			jsr 	TOKDOutput
.1d95					_TOKDDNotString:
.1d95	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1d96					TOKDIdentifier:
.1d96	a0 ff		ldy #$ff			ldy 	#$FF
.1d98	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1d9b					_TOKDLoop:
.1d9b	a8		tay				tay 								; token in Y
.1d9c	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1d9e	c0 64		cpy #$64			cpy 	#$64
.1da0	f0 11		beq $1db3			beq 	_TOKDIOutput
.1da2	a9 5f		lda #$5f			lda 	#'_'
.1da4	c0 65		cpy #$65			cpy 	#$65
.1da6	f0 0b		beq $1db3			beq 	_TOKDIOutput
.1da8	98		tya				tya 								; handle a-z
.1da9	18		clc				clc
.1daa	69 21		adc #$21			adc	 	#$21
.1dac	c0 5a		cpy #$5a			cpy 	#$5A
.1dae	90 03		bcc $1db3			bcc 	_TOKDIOutput
.1db0	38		sec				sec 								; handle 0-9
.1db1	e9 4b		sbc #$4b			sbc 	#$4B
.1db3					_TOKDIOutput:
.1db3	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1db6	10 08		bpl $1dc0			bpl 	_TOKDINoSpacing
.1db8	48		pha				pha
.1db9	20 55 1e	jsr $1e55			jsr 	TOKDSpacing
.1dbc	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1dbf	68		pla				pla
.1dc0					_TOKDINoSpacing:
.1dc0	20 64 1d	jsr $1d64			jsr 	TOKDOutput
.1dc3	20 5b 1d	jsr $1d5b			jsr 	TOKDGet 					; get next token
.1dc6	c9 7c		cmp #$7c			cmp 	#$7C
.1dc8	90 d1		bcc $1d9b			bcc 	_TOKDLoop
.1dca	f0 12		beq $1dde			beq 	_TOKDIExit 					; it's a number, no tail.
.1dcc	4a		lsr a				lsr 	a 							; string ?
.1dcd	90 07		bcc $1dd6			bcc 	_TOKDICheckArray
.1dcf	48		pha				pha
.1dd0	a9 24		lda #$24			lda 	#"$"
.1dd2	20 64 1d	jsr $1d64			jsr 	TOKDOutput
.1dd5	68		pla				pla
.1dd6					_TOKDICheckArray:
.1dd6	4a		lsr a				lsr 	a 							; array ?
.1dd7	90 05		bcc $1dde			bcc 	_TOKDIExit
.1dd9	a9 28		lda #$28			lda 	#"("
.1ddb	20 64 1d	jsr $1d64			jsr 	TOKDOutput
.1dde					_TOKDIExit:
.1dde	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1ddf					TOKDInteger:
.1ddf	5a		phy				phy 								; save base
.1de0	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1de2	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.1de5					_TOKDILoop:
.1de5	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1de7	c9 40		cmp #$40			cmp 	#$40
.1de9	b0 1d		bcs $1e08			bcs 	_TOKDIHaveInteger
.1deb	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1ded	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.1df0	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.1df3	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.1df6	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.1df9	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.1dfc	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.1dff	20 5b 1d	jsr $1d5b			jsr 	TOKDGet 					; OR byte in.
.1e02	05 08		ora $08				ora 	IFR0+IM0
.1e04	85 08		sta $08				sta 	IFR0+IM0
.1e06	80 dd		bra $1de5			bra 	_TOKDILoop
.1e08					_TOKDIHaveInteger:
.1e08	7a		ply				ply 								; restore base
.1e09	98		tya				tya 								; base in A
.1e0a	20 fd 2d	jsr $2dfd			jsr 	IFloatIntegerToStringR0
.1e0d	86 22		stx $22				stx 	zTemp0
.1e0f	84 23		sty $23				sty 	zTemp0+1
.1e11	b2 22		lda ($22)			lda 	(zTemp0)
.1e13	20 55 1e	jsr $1e55			jsr 	TOKDSpacing 				; check spacing okay.
.1e16	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1e18					_TOKDOutput:
.1e18	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e1a	20 64 1d	jsr $1d64			jsr 	TOKDOutput
.1e1d	c8		iny				iny
.1e1e	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e20	d0 f6		bne $1e18			bne 	_TOKDOutput
.1e22	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e23					TOKDToken:
.1e23	a2 7a		ldx #$7a			ldx 	#StandardTokens & $FF
.1e25	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e27					_TOKDSearch:
.1e27	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1e29	84 23		sty $23				sty 	zTemp0+1
.1e2b	aa		tax				tax 								; token ID in X.
.1e2c					_TOKDFind:
.1e2c	ca		dex				dex 								; reached the start
.1e2d	10 0d		bpl $1e3c			bpl 	_TOKDFound
.1e2f	38		sec				sec 								; go to next entry
.1e30	b2 22		lda ($22)			lda 	(zTemp0)
.1e32	65 22		adc $22				adc 	zTemp0
.1e34	85 22		sta $22				sta 	zTemp0
.1e36	90 f4		bcc $1e2c			bcc 	_TOKDFind
.1e38	e6 23		inc $23				inc 	zTemp0+1
.1e3a	80 f0		bra $1e2c			bra 	_TOKDFind
.1e3c					_TOKDFound:
.1e3c	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1e3e	f0 14		beq $1e54			beq 	_TOKDExit
.1e40	aa		tax				tax
.1e41	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1e43	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1e45	20 55 1e	jsr $1e55			jsr 	TOKDSpacing
.1e48					_TOKDOutput:
.1e48	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e4a	20 ed 21	jsr $21ed			jsr 	TOKToLower
.1e4d	20 64 1d	jsr $1d64			jsr 	TOKDOutput
.1e50	c8		iny				iny
.1e51	ca		dex				dex
.1e52	d0 f4		bne $1e48			bne 	_TOKDOutput
.1e54					_TOKDExit:
.1e54	60		rts				rts
.1e55					TOKDSpacing:
.1e55	20 04 22	jsr $2204			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1e58	90 0d		bcc $1e67			bcc 	_TOKDSExit
.1e5a	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1e5d	20 04 22	jsr $2204			jsr 	TOKIsIdentifierElement
.1e60	90 05		bcc $1e67			bcc 	_TOKDSExit
.1e62	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1e64	20 64 1d	jsr $1d64			jsr 	TOKDOutput
.1e67					_TOKDSExit:
.1e67	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1e68					PGMDeleteLine:
.1e68	20 1b 1f	jsr $1f1b			jsr 	PGMEndProgram 				; end of program into zTemp0
.1e6b	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1e6d	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1e70	85 25		sta $25				sta 	zTemp1+1
.1e72					_PGMDLoop:
.1e72	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1e74	38		sec				sec
.1e75	f0 3a		beq $1eb1			beq 	_PGMDExit
.1e77	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1e79	b1 24		lda ($24),y			lda 	(zTemp1),y
.1e7b	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1e7e	d0 08		bne $1e88			bne 	_PGMDNext
.1e80	c8		iny				iny
.1e81	b1 24		lda ($24),y			lda 	(zTemp1),y
.1e83	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1e86	f0 0d		beq $1e95			beq 	_PGMDDelete
.1e88					_PGMDNext:
.1e88	18		clc				clc
.1e89	b2 24		lda ($24)			lda 	(zTemp1)
.1e8b	65 24		adc $24				adc 	zTemp1
.1e8d	85 24		sta $24				sta 	zTemp1
.1e8f	90 e1		bcc $1e72			bcc 	_PGMDLoop
.1e91	e6 25		inc $25				inc 	zTemp1+1
.1e93	80 dd		bra $1e72			bra 	_PGMDLoop
.1e95					_PGMDDelete:
.1e95	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1e97	a8		tay				tay
.1e98					_PGMDCopy:
.1e98	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1e9a	92 24		sta ($24)			sta 	(zTemp1)
.1e9c	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1e9e	c5 22		cmp $22				cmp 	zTemp0
.1ea0	d0 07		bne $1ea9			bne 	_PGMDNext2
.1ea2	a5 25		lda $25				lda 	zTemp1+1
.1ea4	c5 23		cmp $23				cmp 	zTemp0+1
.1ea6	18		clc				clc
.1ea7	f0 08		beq $1eb1			beq 	_PGMDExit
.1ea9					_PGMDNext2:
.1ea9	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1eab	d0 eb		bne $1e98			bne 	_PGMDCopy
.1ead	e6 25		inc $25				inc 	zTemp1+1
.1eaf	80 e7		bra $1e98			bra 	_PGMDCopy
.1eb1					_PGMDExit:
.1eb1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1eb2					PGMInsertLine:
.1eb2	20 1b 1f	jsr $1f1b			jsr 	PGMEndProgram 				; end of program into zTemp0
.1eb5	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1eb7	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1eba	85 25		sta $25				sta 	zTemp1+1
.1ebc					_PGMILoop:
.1ebc	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1ebe	f0 1c		beq $1edc			beq 	_PGMIInsert
.1ec0	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1ec2	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ec4	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1ec7	c8		iny				iny
.1ec8	b1 24		lda ($24),y			lda 	(zTemp1),y
.1eca	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1ecd	b0 0d		bcs $1edc			bcs 	_PGMIInsert 				; insert here.
.1ecf	18		clc				clc
.1ed0	b2 24		lda ($24)			lda 	(zTemp1)
.1ed2	65 24		adc $24				adc 	zTemp1
.1ed4	85 24		sta $24				sta 	zTemp1
.1ed6	90 e4		bcc $1ebc			bcc 	_PGMILoop
.1ed8	e6 25		inc $25				inc 	zTemp1+1
.1eda	80 e0		bra $1ebc			bra 	_PGMILoop
.1edc					_PGMIInsert:
.1edc	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1edf					_PGMIInsertLoop:
.1edf	b2 22		lda ($22)			lda 	(zTemp0)
.1ee1	91 22		sta ($22),y			sta 	(zTemp0),y
.1ee3	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1ee5	c5 22		cmp $22				cmp 	zTemp0
.1ee7	d0 06		bne $1eef			bne 	_PGMINext
.1ee9	a5 25		lda $25				lda 	zTemp1+1
.1eeb	c5 23		cmp $23				cmp 	zTemp0+1
.1eed	f0 0a		beq $1ef9			beq 	_PGMIInserted
.1eef					_PGMINext:
.1eef	a5 22		lda $22				lda 	zTemp0
.1ef1	d0 02		bne $1ef5			bne 	_PGMINoBorrow
.1ef3	c6 23		dec $23				dec 	zTemp0+1
.1ef5					_PGMINoBorrow:
.1ef5	c6 22		dec $22				dec 	zTemp0
.1ef7	80 e6		bra $1edf			bra 	_PGMIInsertLoop
.1ef9					_PGMIInserted:
.1ef9	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1efb					_PGMICopyLoop:
.1efb	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1efe	91 24		sta ($24),y			sta 	(zTemp1),y
.1f00	c8		iny				iny
.1f01	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1f04	d0 f5		bne $1efb			bne 	_PGMICopyLoop
.1f06	18		clc				clc
.1f07	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f08					PGMSetBaseAddress:
.1f08	8e 1a 05	stx $051a			stx 	PGMBaseHigh
.1f0b	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh
.1f0e	60		rts				rts
.1f0f					PGMNewProgram:
.1f0f	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f11	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f14	85 23		sta $23				sta 	zTemp0+1
.1f16	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1f18	92 22		sta ($22)			sta 	(zTemp0)
.1f1a	60		rts				rts
.1f1b					PGMEndProgram:
.1f1b	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f1d	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f20	85 23		sta $23				sta 	zTemp0+1
.1f22					_PGMEPLoop:
.1f22	b2 22		lda ($22)			lda 	(zTemp0)
.1f24	f0 0b		beq $1f31			beq 	_PGMEPExit
.1f26	18		clc				clc
.1f27	65 22		adc $22				adc 	zTemp0
.1f29	85 22		sta $22				sta 	zTemp0
.1f2b	90 f5		bcc $1f22			bcc 	_PGMEPLoop
.1f2d	e6 23		inc $23				inc 	zTemp0+1
.1f2f	80 f1		bra $1f22			bra 	_PGMEPLoop
.1f31					_PGMEPExit:
.1f31	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1f32					TOKResetElement:
.1f32	9c 1c 05	stz $051c			stz 	TOKElement
.1f35	60		rts				rts
.1f36					TOKWriteElement:
.1f36	da		phx				phx
.1f37	ae 1c 05	ldx $051c			ldx 	TOKElement
.1f3a	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1f3d	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1f40	fa		plx				plx
.1f41	ee 1c 05	inc $051c			inc 	TOKElement
.1f44	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1f45					TOKTokeniseConstant:
.1f45	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1f47	48		pha				pha 								; save on stack
.1f48	29 c0		and #$c0			and 	#$C0
.1f4a	05 09		ora $09				ora 	IFR0+IM1
.1f4c	05 0a		ora $0a				ora 	IFR0+IM2
.1f4e	f0 10		beq $1f60			beq 	_TTCLess
.1f50	da		phx				phx
.1f51	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1f53					_TTCShiftRight:
.1f53	46 0a		lsr $0a				lsr 	IFR0+IM2
.1f55	66 09		ror $09				ror 	IFR0+IM1
.1f57	66 08		ror $08				ror 	IFR0+IM0
.1f59	ca		dex				dex
.1f5a	d0 f7		bne $1f53			bne 	_TTCShiftRight
.1f5c	fa		plx				plx
.1f5d	20 45 1f	jsr $1f45			jsr 	TOKTokeniseConstant
.1f60					_TTCLess:
.1f60	68		pla				pla
.1f61	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1f63	20 02 20	jsr $2002			jsr 	TOKWriteA
.1f66	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1f67					TOKTokeniseDecimals:
.1f67	20 12 20	jsr $2012			jsr 	TOKGetNext 					; consume the .
.1f6a	20 7a 21	jsr $217a			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1f6d	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1f6f	20 02 20	jsr $2002			jsr 	TOKWriteA
.1f72	20 77 1f	jsr $1f77			jsr 	TOKOutputElementBuffer 		; then the buffer
.1f75	18		clc				clc
.1f76	60		rts				rts
.1f77					TOKOutputElementBuffer:
.1f77	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1f7a	20 02 20	jsr $2002			jsr 	TOKWriteA
.1f7d	a8		tay				tay 								; put in Y
.1f7e	f0 0c		beq $1f8c			beq 	_TOEExit 					; exit if empty which is okay.
.1f80	a2 01		ldx #$01			ldx 	#1
.1f82					_TOELoop:
.1f82	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.1f85	20 02 20	jsr $2002			jsr 	TOKWriteA
.1f88	e8		inx				inx
.1f89	88		dey				dey
.1f8a	d0 f6		bne $1f82			bne 	_TOELoop
.1f8c					_TOEExit:
.1f8c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1f8d					TOKTokenise:
.1f8d	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.1f90	8e 1c 06	stx $061c			stx 	TOKDataSource
.1f93	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1f95	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.1f98	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1f9a	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1f9d	9c 01 04	stz $0401			stz 	TOKLineNumber
.1fa0	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1fa3					_TOKMainLoop:
.1fa3	20 0e 20	jsr $200e			jsr 	TOKGet 						; what follows.
.1fa6	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1fa8	f0 4f		beq $1ff9			beq 	_TOKExit
.1faa	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1fac	d0 05		bne $1fb3			bne 	_TOKElement
.1fae	20 12 20	jsr $2012			jsr 	TOKGetNext
.1fb1	80 f0		bra $1fa3			bra 	_TOKMainLoop
.1fb3					_TOKElement:
.1fb3	20 f8 21	jsr $21f8			jsr 	TOKIsDigit 					; is it 0..9
.1fb6	90 0a		bcc $1fc2			bcc 	_TOKNotDigit
.1fb8	20 51 21	jsr $2151			jsr 	TOKTokeniseInteger 			; get integer
.1fbb	b0 43		bcs $2000			bcs 	_TOKFail 					; did it fail ?
.1fbd	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.1fc0	80 e1		bra $1fa3			bra 	_TOKMainLoop
.1fc2					_TOKNotDigit:
.1fc2	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.1fc5	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1fc7	d0 07		bne $1fd0			bne 	_TOKNotHex
.1fc9	20 5b 20	jsr $205b			jsr 	TOKTokeniseHexadecimal
.1fcc	b0 32		bcs $2000			bcs 	_TOKFail
.1fce	80 d3		bra $1fa3			bra 	_TOKMainLoop
.1fd0					_TOKNotHex:
.1fd0	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1fd2	d0 07		bne $1fdb			bne 	_TOKNotDecimal
.1fd4	20 67 1f	jsr $1f67			jsr 	TOKTokeniseDecimals
.1fd7	b0 27		bcs $2000			bcs 	_TOKFail
.1fd9	80 c8		bra $1fa3			bra 	_TOKMainLoop
.1fdb					_TOKNotDecimal:
.1fdb	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1fdd	d0 07		bne $1fe6			bne 	_TOKNotString
.1fdf	20 bf 21	jsr $21bf			jsr 	TOKTokeniseString
.1fe2	b0 1c		bcs $2000			bcs 	_TOKFail
.1fe4	80 bd		bra $1fa3			bra 	_TOKMainLoop
.1fe6					_TOKNotString:
.1fe6	20 15 22	jsr $2215			jsr 	TOKIsAlpha 					; identifier ?
.1fe9	b0 07		bcs $1ff2			bcs 	_TOKIdentifier
.1feb	20 8e 21	jsr $218e			jsr 	TOKTokenisePunctuation 		; punctuation
.1fee	b0 10		bcs $2000			bcs 	_TOKFail
.1ff0	80 b1		bra $1fa3			bra 	_TOKMainLoop
.1ff2					_TOKIdentifier:
.1ff2	20 95 20	jsr $2095			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1ff5	b0 09		bcs $2000			bcs 	_TOKFail
.1ff7	80 aa		bra $1fa3			bra 	_TOKMainLoop
.1ff9					_TOKExit:
.1ff9	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1ffb	20 02 20	jsr $2002			jsr 	TOKWriteA
.1ffe	18		clc				clc									; return with carry set.
.1fff	60		rts				rts
.2000					_TOKFail:
.2000	38		sec				sec
.2001	60		rts				rts
.2002					TOKWriteA:
.2002	da		phx				phx
.2003	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2006	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2009	fa		plx				plx
.200a	ee 00 04	inc $0400			inc 	TOKLineSize
.200d	60		rts				rts
.200e					TOKGet:
.200e	18		clc				clc
.200f	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.2012					TOKGetNext:
.2012	38		sec				sec
.2013	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2016					TOKFindToken:
.2016	a2 7a		ldx #$7a			ldx 	#StandardTokens & $FF 		; do this table
.2018	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.201a	20 25 20	jsr $2025			jsr 	TOKFindTokenXY 				; find it, or not
.201d	90 04		bcc $2023			bcc 	_TOKFTFail
.201f	a2 00		ldx #$00			ldx 	#0
.2021	38		sec				sec
.2022	60		rts				rts
.2023					_TOKFTFail
.2023	18		clc				clc
.2024	60		rts				rts
.2025					TOKFindTokenXY:
.2025	86 22		stx $22				stx 	zTemp0 						; save token table address
.2027	84 23		sty $23				sty 	zTemp0+1
.2029	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.202b	8d 1f 06	sta $061f			sta 	TOKCurrent
.202e					_TOKFindLoop:
.202e	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.2030	18		clc				clc 		 						; clear carry in case of fail
.2031	30 17		bmi $204a			bmi 	_TOKExit 					; end of table, fail, so return CC.
.2033	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.2036	d0 13		bne $204b			bne 	_TOKNext 					; different, try next.
.2038	aa		tax				tax 								; number of chars to compare.
.2039	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.203b					_TOKCompare:
.203b	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.203d	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.2040	d0 09		bne $204b			bne 	_TOKNext 					; different ? try next
.2042	c8		iny				iny 								; compare next two
.2043	ca		dex				dex
.2044	d0 f5		bne $203b			bne 	_TOKCompare 				; until done X characters.
.2046	38		sec				sec
.2047	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.204a					_TOKExit:
.204a	60		rts				rts
.204b					_TOKNext:
.204b	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.204e	38		sec				sec 								; add length+1 to ptr
.204f	b2 22		lda ($22)			lda 	(zTemp0)
.2051	65 22		adc $22				adc 	zTemp0
.2053	85 22		sta $22				sta 	zTemp0
.2055	90 d7		bcc $202e			bcc 	_TOKFindLoop
.2057	e6 23		inc $23				inc 	zTemp0+1
.2059	80 d3		bra $202e			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.205b					TOKTokeniseHexadecimal:
.205b	20 12 20	jsr $2012			jsr 	TOKGetNext 					; consume the $
.205e	a2 08		ldx #$08			ldx 	#IFR0
.2060	20 5c 30	jsr $305c			jsr 	IFloatSetZero 				; set R0 = 0
.2063					_TTHLoop:
.2063	20 0e 20	jsr $200e			jsr 	TOKGet 						; keep getting and copying while numeric.
.2066	20 22 22	jsr $2222			jsr 	TOKIsHexadecimal
.2069	90 20		bcc $208b			bcc 	_TTHDone
.206b	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.206d	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.2070	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.2073	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.2076	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.2079	20 12 20	jsr $2012			jsr 	TOKGetNext
.207c	38		sec				sec 								; convert to decimal.
.207d	e9 30		sbc #$30			sbc 	#48
.207f	c9 0a		cmp #$0a			cmp 	#10
.2081	90 02		bcc $2085			bcc 	_TTHNotAlpha
.2083	e9 07		sbc #$07			sbc 	#7
.2085					_TTHNotAlpha:
.2085	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2087	85 08		sta $08				sta 	IFR0+IM0
.2089	80 d8		bra $2063			bra 	_TTHLoop
.208b					_TTHDone:
.208b	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.208d	20 02 20	jsr $2002			jsr 	TOKWriteA
.2090	20 45 1f	jsr $1f45			jsr 	TOKTokeniseConstant 		; write integer out.
.2093	18		clc				clc
.2094	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2095					TOKTokeniseIdentifier:
.2095	20 32 1f	jsr $1f32			jsr 	TOKResetElement 			; extract an identifier
.2098					_TOKGetIdentifier:
.2098	20 0e 20	jsr $200e			jsr 	TOKGet
.209b	20 e2 21	jsr $21e2			jsr 	TOKToUpper
.209e	20 04 22	jsr $2204			jsr 	TOKIsIdentifierElement
.20a1	90 08		bcc $20ab			bcc 	_TOKEndIdent
.20a3	20 36 1f	jsr $1f36			jsr		TOKWriteElement
.20a6	20 12 20	jsr $2012			jsr 	TOKGetNext
.20a9	80 ed		bra $2098			bra 	_TOKGetIdentifier
.20ab					_TOKEndIdent:
.20ab	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.20ad	d0 06		bne $20b5			bne 	_TOKNotString
.20af	20 36 1f	jsr $1f36			jsr 	TOKWriteElement 			; add it
.20b2	20 12 20	jsr $2012			jsr 	TOKGetNext 					; consume it
.20b5					_TOKNotString:
.20b5	20 0e 20	jsr $200e			jsr 	TOKGet 						; finally check for (
.20b8	c9 28		cmp #$28			cmp 	#"("
.20ba	d0 06		bne $20c2			bne 	_TOKNoArray
.20bc	20 36 1f	jsr $1f36			jsr 	TOKWriteElement 			; add it
.20bf	20 12 20	jsr $2012			jsr 	TOKGetNext 					; consume it
.20c2					_TOKNoArray:
.20c2	20 16 20	jsr $2016			jsr 	TOKFindToken 				; find it
.20c5	90 0e		bcc $20d5			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.20c7	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.20c9	f0 05		beq $20d0			beq 	_TOKComment 				; yes, do comment code.
.20cb	20 02 20	jsr $2002			jsr 	TOKWriteA
.20ce	18		clc				clc
.20cf	60		rts				rts
.20d0					_TOKComment:
.20d0	20 1c 21	jsr $211c			jsr 	TOKDoComment
.20d3	18		clc				clc
.20d4	60		rts				rts
.20d5					_TOKIsVariable:
.20d5	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.20d7					_TOKOutputBuffer:
.20d7	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.20da	20 03 21	jsr $2103			jsr 	TOKTranslateIdentifier
.20dd	20 02 20	jsr $2002			jsr 	TOKWriteA
.20e0	e8		inx				inx
.20e1	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.20e4	20 04 22	jsr $2204			jsr 	TOKIsIdentifierElement
.20e7	b0 ee		bcs $20d7			bcs 	_TOKOutputBuffer
.20e9	a8		tay				tay 								; last char in Y
.20ea	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.20ec	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.20ee	f0 0e		beq $20fe			beq 	_TOKIVExit
.20f0	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.20f2	d0 04		bne $20f8			bne 	_TOKIVCheckArray 			; no, check for (
.20f4	1a		inc a				inc 	a 							; token is $7D
.20f5	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.20f8					_TOKIVCheckArray:
.20f8	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.20fa	d0 02		bne $20fe			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.20fc	1a		inc a				inc 	a
.20fd	1a		inc a				inc 	a
.20fe					_TOKIVExit:
.20fe	20 02 20	jsr $2002			jsr 	TOKWriteA 					; ending token
.2101	18		clc				clc
.2102	60		rts				rts
.2103					TOKTranslateIdentifier:
.2103	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.2105	f0 0f		beq $2116			beq 	_TTI64
.2107	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.2109	f0 0e		beq $2119			beq 	_TTI65
.210b	38		sec				sec
.210c	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.210e	10 03		bpl $2113			bpl 	_TTIExit
.2110	18		clc				clc 								; map 09 onto 26-35
.2111	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2113					_TTIExit:
.2113	09 40		ora #$40			ora 	#$40 						; correct range.
.2115	60		rts				rts
.2116	a9 64		lda #$64	_TTI64:	lda 	#$64
.2118	60		rts				rts
.2119	a9 65		lda #$65	_TTI65:	lda 	#$65
.211b	60		rts				rts
.211c					TOKDoComment:
.211c	20 0e 20	jsr $200e			jsr 	TOKGet 						; skip over spaces
.211f	c9 20		cmp #$20			cmp 	#' '
.2121	d0 05		bne $2128			bne 	_TOKEndSpaces
.2123	20 12 20	jsr $2012			jsr 	TOKGetNext
.2126	80 f4		bra $211c			bra 	TOKDoComment
.2128					_TOKEndSpaces:
.2128	48		pha				pha 								; save it
.2129	a9 97		lda #$97			lda 	#PR_REM 					; output the comment token.
.212b	20 02 20	jsr $2002			jsr 	TOKWriteA
.212e	68		pla				pla
.212f	f0 04		beq $2135			beq 	_TOKDCExit 					; end of line.
.2131	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.2133	d0 01		bne $2136			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.2135					_TOKDCExit:
.2135	60		rts				rts
.2136					_TOKDCDoLine:
.2136	20 32 1f	jsr $1f32			jsr 	TOKResetElement 			; start getting the string
.2139					_TOKDCLoop:
.2139	20 0e 20	jsr $200e			jsr 	TOKGet 						; check EOL
.213c	c9 00		cmp #$00			cmp 	#0
.213e	f0 08		beq $2148			beq 	_TOKDCEndComment
.2140	20 12 20	jsr $2012			jsr 	TOKGetNext 					; get and consume
.2143	20 36 1f	jsr $1f36			jsr 	TOKWriteElement
.2146	80 f1		bra $2139			bra 	_TOKDCLoop
.2148					_TOKDCEndComment:
.2148	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.214a	20 02 20	jsr $2002			jsr 	TOKWriteA
.214d	20 77 1f	jsr $1f77			jsr 	TOKOutputElementBuffer
.2150	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2151					TOKTokeniseInteger:
.2151	20 7a 21	jsr $217a			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2154	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.2156	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2158	ad 1c 05	lda $051c			lda		TOKElement
.215b	20 c0 2e	jsr $2ec0			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.215e	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.2161	f0 12		beq $2175			beq 	_TOKNotLineNumber
.2163	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.2165	d0 0c		bne $2173			bne 	_TOKBadLineNumeber
.2167	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2169	8d 01 04	sta $0401			sta 	TOKLineNumber
.216c	a5 09		lda $09				lda 	IFR0+IM1
.216e	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2171	18		clc				clc
.2172	60		rts				rts
.2173					_TOKBadLineNumeber:
.2173	38		sec				sec
.2174	60		rts				rts
.2175					_TOKNotLineNumber:
.2175	20 45 1f	jsr $1f45			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2178	18		clc				clc
.2179	60		rts				rts
.217a					TOKExtractInteger:
.217a	20 32 1f	jsr $1f32			jsr 	TOKResetElement 			; restart
.217d					_TTILoop:
.217d	20 0e 20	jsr $200e			jsr 	TOKGet 						; keep getting and copying while numeric.
.2180	20 f8 21	jsr $21f8			jsr 	TOKIsDigit
.2183	90 08		bcc $218d			bcc 	_TOKEIExit
.2185	20 36 1f	jsr $1f36			jsr 	TOKWriteElement
.2188	20 12 20	jsr $2012			jsr 	TOKGetNext
.218b	80 f0		bra $217d			bra 	_TTILoop
.218d					_TOKEIExit:
.218d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.218e					TOKTokenisePunctuation:
.218e	20 32 1f	jsr $1f32			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2191	20 12 20	jsr $2012			jsr 	TOKGetNext
.2194	20 36 1f	jsr $1f36			jsr 	TOKWriteElement
.2197	20 0e 20	jsr $200e			jsr 	TOKGet 						; what follows ?
.219a	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.219c	f0 10		beq $21ae			beq 	_TTPOne
.219e	20 0c 22	jsr $220c			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.21a1	b0 0b		bcs $21ae			bcs 	_TTPOne 					; these speed things up a bit.
.21a3	20 36 1f	jsr $1f36			jsr 	TOKWriteElement 			; this is what we will search for.
.21a6	20 16 20	jsr $2016			jsr 	TOKFindToken
.21a9	b0 0a		bcs $21b5			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.21ab	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.21ae					_TTPOne:
.21ae	20 16 20	jsr $2016			jsr 	TOKFindToken 				; look for one character punctuation
.21b1	b0 07		bcs $21ba			bcs 	_TTPOutputExit 				; we found it
.21b3	38		sec				sec 								; not recognised.
.21b4	60		rts				rts
.21b5					_TTPConsumeExit:
.21b5	48		pha				pha
.21b6	20 12 20	jsr $2012			jsr 	TOKGetNext 					; get the 2nd char out.
.21b9	68		pla				pla
.21ba					_TTPOutputExit:
.21ba	20 02 20	jsr $2002			jsr  	TOKWriteA 					; write token out
.21bd	18		clc				clc
.21be	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.21bf					TOKTokeniseString:
.21bf	20 12 20	jsr $2012			jsr 	TOKGetNext 					; consume the "
.21c2	20 32 1f	jsr $1f32			jsr 	TOKResetElement 			; start getting the string
.21c5					_TOKTSLoop:
.21c5	20 0e 20	jsr $200e			jsr 	TOKGet 						; check EOL
.21c8	c9 00		cmp #$00			cmp 	#0
.21ca	f0 0c		beq $21d8			beq 	_TOKTSExit
.21cc	20 12 20	jsr $2012			jsr 	TOKGetNext 					; get and consume
.21cf	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.21d1	f0 05		beq $21d8			beq 	_TOKTSExit
.21d3	20 36 1f	jsr $1f36			jsr 	TOKWriteElement
.21d6	80 ed		bra $21c5			bra 	_TOKTSLoop
.21d8					_TOKTSExit:
.21d8	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.21da	20 02 20	jsr $2002			jsr 	TOKWriteA
.21dd	20 77 1f	jsr $1f77			jsr 	TOKOutputElementBuffer
.21e0	18		clc				clc
.21e1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.21e2					TOKToUpper:
.21e2	c9 61		cmp #$61			cmp 	#"a"
.21e4	90 06		bcc $21ec			bcc 	_TTUNotLower
.21e6	c9 7b		cmp #$7b			cmp 	#"z"+1
.21e8	b0 02		bcs $21ec			bcs 	_TTUNotLower
.21ea	49 20		eor #$20			eor 	#$20
.21ec					_TTUNotLower:
.21ec	60		rts				rts
.21ed					TOKToLower:
.21ed	c9 41		cmp #$41			cmp 	#"A"
.21ef	90 06		bcc $21f7			bcc 	_TTUNotUpper
.21f1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.21f3	b0 02		bcs $21f7			bcs 	_TTUNotUpper
.21f5	49 20		eor #$20			eor 	#$20
.21f7					_TTUNotUpper:
.21f7	60		rts				rts
.21f8					TOKIsDigit:
.21f8	c9 30		cmp #$30			cmp 	#"0"
.21fa	90 06		bcc $2202			bcc 	TOKFail
.21fc	c9 3a		cmp #$3a			cmp 	#"9"+1
.21fe	b0 02		bcs $2202			bcs 	TOKFail
.2200					TOKSucceed:
.2200	38		sec				sec
.2201	60		rts				rts
.2202					TOKFail:
.2202	18		clc				clc
.2203	60		rts				rts
.2204					TOKIsIdentifierElement:
.2204	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.2206	f0 f8		beq $2200			beq 	TOKSucceed
.2208	c9 5f		cmp #$5f			cmp 	#"_"
.220a	f0 f4		beq $2200			beq 	TOKSucceed 					; else fall through to alphanumeric
.220c					TOKIsAlphaNumeric:
.220c	20 15 22	jsr $2215			jsr 	TOKIsAlpha
.220f	b0 ef		bcs $2200			bcs 	TOKSucceed
.2211	20 f8 21	jsr $21f8			jsr 	TOKIsDigit
.2214	60		rts				rts
.2215					TOKIsAlpha:
.2215	20 e2 21	jsr $21e2			jsr 	TOKToUpper
.2218	c9 41		cmp #$41			cmp 	#"A"
.221a	90 e6		bcc $2202			bcc 	TOKFail
.221c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.221e	b0 e2		bcs $2202			bcs 	TOKFail
.2220	80 de		bra $2200			bra 	TOKSucceed
.2222					TOKIsHexadecimal:
.2222	20 f8 21	jsr $21f8			jsr		TOKIsDigit
.2225	b0 d9		bcs $2200			bcs 	TOKSucceed
.2227	20 15 22	jsr $2215			jsr 	TOKIsAlpha
.222a	90 d6		bcc $2202			bcc 	TOKFail
.222c	c9 47		cmp #$47			cmp 	#"F"+1
.222e	b0 d2		bcs $2202			bcs 	TOKFail
.2230	80 ce		bra $2200			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2232					Command_CALL:
.2232	a9 42		lda #$42			lda 	#STK_CALL
.2234	20 cd 26	jsr $26cd			jsr 	StackOpen
.2237	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.2239	29 c0		and #$c0			and 	#$C0
.223b	c9 40		cmp #$40			cmp 	#$40
.223d	d0 29		bne $2268			bne 	_CCSyntax
.223f	20 9d 29	jsr $299d			jsr 	VARGetInfo 					; get the information
.2242	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 				; check right bracket follows.
.2245	20 4f 29	jsr $294f			jsr 	VARFind 					; exists ?
.2248	90 21		bcc $226b			bcc 	_CCUnknown
.224a	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.224c	85 22		sta $22				sta 	zTemp0
.224e	20 01 27	jsr $2701			jsr 	STKSaveCodePosition 		; save return address on stack.
.2251	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2253	b1 22		lda ($22),y			lda 	(zTemp0),y
.2255	c9 ff		cmp #$ff			cmp 	#$FF
.2257	d0 12		bne $226b			bne 	_CCUnknown
.2259	88		dey				dey 								; get Y offset to stack
.225a	b1 22		lda ($22),y			lda 	(zTemp0),y
.225c	48		pha				pha
.225d	88		dey				dey 								; get address
.225e	b1 22		lda ($22),y			lda 	(zTemp0),y
.2260	85 19		sta $19				sta 	codePtr+1
.2262	b2 22		lda ($22)			lda 	(zTemp0)
.2264	85 18		sta $18				sta 	codePtr
.2266	7a		ply				ply 								; restore Y
.2267	60		rts				rts
.2268					_CCSyntax:
.2268	4c 17 25	jmp $2517		jmp	ErrorV_syntax
.226b					_CCUnknown:
.226b	4c 8c 26	jmp $268c		jmp	ErrorV_unknown
.226e					Command_ENDPROC:
.226e	a9 42		lda #$42			lda 	#STK_CALL
.2270	20 f9 26	jsr $26f9			jsr 	StackCheckFrame
.2273	20 13 27	jsr $2713			jsr 	STKLoadCodePosition 		; return
.2276	20 eb 26	jsr $26eb			jsr 	StackClose
.2279	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.227a					Command_DO:
.227a	a9 22		lda #$22			lda 	#STK_DO
.227c	20 cd 26	jsr $26cd			jsr 	StackOpen
.227f	20 01 27	jsr $2701			jsr 	STKSaveCodePosition 		; save loop position
.2282	60		rts				rts
.2283					Command_EXIT:
.2283	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2285	20 f9 26	jsr $26f9			jsr 	StackCheckFrame
.2288	20 eb 26	jsr $26eb			jsr 	StackClose 					; close it
.228b	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.228d	aa		tax				tax
.228e	20 27 24	jsr $2427			jsr 	ScanForward
.2291	60		rts				rts
.2292					Command_LOOP:
.2292	a9 22		lda #$22			lda 	#STK_DO
.2294	20 f9 26	jsr $26f9			jsr 	StackCheckFrame
.2297	20 13 27	jsr $2713			jsr 	STKLoadCodePosition 		; loop back
.229a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.229b					Command_FOR:
.229b	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.229d	20 cd 26	jsr $26cd			jsr 	StackOpen
.22a0	20 93 12	jsr $1293			jsr 	CommandLET 					; do "I = 1" bit
.22a3	5a		phy				phy 								; save variable address to +4,+5
.22a4	a0 04		ldy #$04			ldy 	#4
.22a6	a5 22		lda $22				lda 	zTemp0
.22a8	91 2a		sta ($2a),y			sta 	(basicStack),y
.22aa	c8		iny				iny
.22ab	a5 23		lda $23				lda 	zTemp0+1
.22ad	91 2a		sta ($2a),y			sta 	(basicStack),y
.22af	7a		ply				ply
.22b0	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.22b2	20 c4 26	jsr $26c4			jsr 	ERRCheckA
.22b5	20 db 16	jsr $16db			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.22b8	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.22ba	a2 08		ldx #$08			ldx 	#IFR0
.22bc	20 11 23	jsr $2311			jsr 	CFSaveR0X
.22bf	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.22c1	c9 91		cmp #$91			cmp 	#PR_STEP
.22c3	d0 06		bne $22cb			bne 	_CFStep1
.22c5	c8		iny				iny 								; consume step
.22c6	20 db 16	jsr $16db			jsr 	EXPEvalNumber 				; evaluate STEP
.22c9	80 24		bra $22ef			bra 	_CFWriteStep
.22cb					_CFStep1:
.22cb	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.22cd	a9 01		lda #$01			lda 	#1
.22cf	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.22d2	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.22d3	a0 04		ldy #$04			ldy 	#4 							; get variable address
.22d5	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22d7	85 22		sta $22				sta 	zTemp0
.22d9	c8		iny				iny
.22da	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22dc	85 23		sta $23				sta 	zTemp0+1
.22de	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.22e0	b1 22		lda ($22),y			lda 	(zTemp0),y
.22e2	d0 0a		bne $22ee			bne 	_CFNotOptimised
.22e4	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.22e6	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22e8	d0 04		bne $22ee			bne 	_CFNotOptimised
.22ea	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.22ec	85 0b		sta $0b				sta 	IFR0+IExp
.22ee					_CFNotOptimised:
.22ee	7a		ply				ply
.22ef					_CFWriteStep:
.22ef	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.22f1	a9 06		lda #$06			lda 	#6
.22f3	20 11 23	jsr $2311			jsr 	CFSaveR0X
.22f6	20 01 27	jsr $2701			jsr 	STKSaveCodePosition 		; save loop position
.22f9	60		rts				rts
.22fa					CFLoadR0X:
.22fa	5a		phy				phy
.22fb	a8		tay				tay
.22fc	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22fe	95 00		sta $00,x			sta 	IM0,x
.2300	c8		iny				iny
.2301	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2303	95 01		sta $01,x			sta 	IM1,x
.2305	c8		iny				iny
.2306	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2308	95 02		sta $02,x			sta 	IM2,x
.230a	c8		iny				iny
.230b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.230d	95 03		sta $03,x			sta 	IExp,x
.230f	7a		ply				ply
.2310	60		rts				rts
.2311					CFSaveR0X:
.2311	5a		phy				phy
.2312	a8		tay				tay
.2313	b5 00		lda $00,x			lda 	IM0,x
.2315	91 2a		sta ($2a),y			sta 	(basicStack),y
.2317	c8		iny				iny
.2318	b5 01		lda $01,x			lda 	IM1,x
.231a	91 2a		sta ($2a),y			sta 	(basicStack),y
.231c	c8		iny				iny
.231d	b5 02		lda $02,x			lda 	IM2,x
.231f	91 2a		sta ($2a),y			sta 	(basicStack),y
.2321	c8		iny				iny
.2322	b5 03		lda $03,x			lda 	IExp,x
.2324	91 2a		sta ($2a),y			sta 	(basicStack),y
.2326	7a		ply				ply
.2327	60		rts				rts
.2328					Command_NEXT:
.2328	a9 37		lda #$37			lda 	#STK_FOR
.232a	20 f9 26	jsr $26f9			jsr 	StackCheckFrame
.232d	5a		phy				phy 								; check optimised loop
.232e	a0 09		ldy #$09			ldy 	#9
.2330	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2332	7a		ply				ply
.2333	0a		asl a				asl 	a
.2334	b0 35		bcs $236b			bcs 	_CNOptimised
.2336	20 a2 23	jsr $23a2			jsr 	_CNLoadValue 				; load index value to R0.
.2339	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.233b	a9 06		lda #$06			lda 	#6
.233d	20 fa 22	jsr $22fa			jsr 	CFLoadR0X
.2340	20 52 2a	jsr $2a52			jsr 	IFloatAdd 					; add them together and write back.
.2343	20 c5 23	jsr $23c5			jsr 	_CNSaveValue
.2346	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2348	a2 0c		ldx #$0c			ldx 	#IFR1
.234a	20 fa 22	jsr $22fa			jsr 	CFLoadR0X
.234d	20 2a 2d	jsr $2d2a			jsr 	IFloatCompare 				; compare terminal vs current
.2350	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2352	20 55 30	jsr $3055			jsr 	IFloatCheckZero
.2355	f0 10		beq $2367			beq 	_CNLoopBack
.2357	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2359	5a		phy				phy
.235a	a0 09		ldy #$09			ldy 	#6+IExp
.235c	51 2a		eor ($2a),y			eor 	(basicStack),y
.235e	7a		ply				ply
.235f	29 40		and #$40			and 	#IFSign
.2361	f0 04		beq $2367			beq 	_CNLoopBack
.2363					_CNExitLoop:
.2363	20 eb 26	jsr $26eb			jsr 	StackClose		 			; return
.2366	60		rts				rts
.2367					_CNLoopBack:
.2367	20 13 27	jsr $2713			jsr 	STKLoadCodePosition 		; loop back
.236a	60		rts				rts
.236b					_CNOptimised:
.236b	5a		phy				phy
.236c	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.236e	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2370	85 26		sta $26				sta 	zTemp2
.2372	c8		iny				iny
.2373	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2375	85 27		sta $27				sta 	zTemp2+1
.2377	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2379					_CNIncrement:
.2379	c8		iny				iny
.237a	b1 26		lda ($26),y			lda 	(zTemp2),y
.237c	1a		inc a				inc 	a
.237d	91 26		sta ($26),y			sta 	(zTemp2),y
.237f	f0 f8		beq $2379			beq 	_CNIncrement
.2381	18		clc				clc 								; point zTemp0 to terminal value
.2382	a5 2a		lda $2a				lda 	basicStack
.2384	69 0a		adc #$0a			adc 	#10
.2386	85 22		sta $22				sta 	zTemp0
.2388	a5 2b		lda $2b				lda 	basicStack+1
.238a	69 00		adc #$00			adc 	#0
.238c	85 23		sta $23				sta 	zTemp0+1
.238e	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2390	b2 26		lda ($26)			lda 	(zTemp2)
.2392	d2 22		cmp ($22)			cmp 	(zTemp0)
.2394	b1 26		lda ($26),y			lda 	(zTemp2),y
.2396	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2398	c8		iny				iny
.2399	b1 26		lda ($26),y			lda 	(zTemp2),y
.239b	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.239d	7a		ply				ply
.239e	b0 c3		bcs $2363			bcs 	_CNExitLoop
.23a0	80 c5		bra $2367			bra 	_CNLoopBack
.23a2					_CNLoadValue:
.23a2	5a		phy				phy
.23a3	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.23a5	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23a7	85 26		sta $26				sta 	zTemp2
.23a9	c8		iny				iny
.23aa	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23ac	85 27		sta $27				sta 	zTemp2+1
.23ae	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.23b0	b1 26		lda ($26),y			lda 	(zTemp2),y
.23b2	85 08		sta $08				sta 	IFR0+IM0
.23b4	c8		iny				iny
.23b5	b1 26		lda ($26),y			lda 	(zTemp2),y
.23b7	85 09		sta $09				sta 	IFR0+IM1
.23b9	c8		iny				iny
.23ba	b1 26		lda ($26),y			lda 	(zTemp2),y
.23bc	85 0a		sta $0a				sta 	IFR0+IM2
.23be	c8		iny				iny
.23bf	b1 26		lda ($26),y			lda 	(zTemp2),y
.23c1	85 0b		sta $0b				sta 	IFR0+IExp
.23c3	7a		ply				ply
.23c4	60		rts				rts
.23c5					_CNSaveValue:
.23c5	5a		phy				phy
.23c6	a0 00		ldy #$00			ldy 	#0
.23c8	a5 08		lda $08				lda 	IFR0+IM0
.23ca	91 26		sta ($26),y			sta 	(zTemp2),y
.23cc	c8		iny				iny
.23cd	a5 09		lda $09				lda 	IFR0+IM1
.23cf	91 26		sta ($26),y			sta 	(zTemp2),y
.23d1	c8		iny				iny
.23d2	a5 0a		lda $0a				lda 	IFR0+IM2
.23d4	91 26		sta ($26),y			sta 	(zTemp2),y
.23d6	c8		iny				iny
.23d7	a5 0b		lda $0b				lda 	IFR0+IExp
.23d9	91 26		sta ($26),y			sta 	(zTemp2),y
.23db	7a		ply				ply
.23dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.23dd					IfCommand:
.23dd	20 db 16	jsr $16db			jsr 	EXPEvalNumber 				; Get the if test.
.23e0	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.23e2	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.23e4	d0 0c		bne $23f2			bne 	_IfStructured 				; we still support it.
.23e6	c8		iny				iny 								; consume THEN
.23e7	a2 08		ldx #$08			ldx 	#IFR0
.23e9	20 55 30	jsr $3055			jsr 	IFloatCheckZero 			; is it zero
.23ec	f0 01		beq $23ef			beq 	_IfFail 					; if fail, go to next line
.23ee	60		rts				rts 								; if THEN just continue
.23ef					_IfFail:
.23ef	4c a1 14	jmp $14a1			jmp 	RUNEndOfLine
.23f2					_IfStructured:
.23f2	20 55 30	jsr $3055			jsr 	IFloatCheckZero 			; is it zero
.23f5	d0 07		bne $23fe			bne 	_IfExit 					; if not, then continue normally.
.23f7	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.23f9	a2 85		ldx #$85			ldx 	#PR_ENDIF
.23fb	20 27 24	jsr $2427			jsr 	ScanForward 				; and run from there
.23fe					_IfExit:
.23fe	60		rts				rts
.23ff					ElseCode:
.23ff	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2401	aa		tax				tax 								; so just go to the structure exit
.2402	20 27 24	jsr $2427			jsr 	ScanForward
.2405	60		rts				rts
.2406					EndIf:
.2406	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2407					Command_REPEAT:
.2407	a9 02		lda #$02			lda 	#STK_REPEAT
.2409	20 cd 26	jsr $26cd			jsr 	StackOpen
.240c	20 01 27	jsr $2701			jsr 	STKSaveCodePosition 		; save loop position
.240f	60		rts				rts
.2410					Command_UNTIL:
.2410	a9 02		lda #$02			lda 	#STK_REPEAT
.2412	20 f9 26	jsr $26f9			jsr 	StackCheckFrame
.2415	20 db 16	jsr $16db			jsr 	EXPEvalNumber 				; work out the test
.2418	a2 08		ldx #$08			ldx 	#IFR0
.241a	20 55 30	jsr $3055			jsr 	IFloatCheckZero 			; check if zero
.241d	f0 04		beq $2423			beq 	_CULoopBack 				; if so keep looping
.241f	20 eb 26	jsr $26eb			jsr 	StackClose		 			; return
.2422	60		rts				rts
.2423					_CULoopBack:
.2423	20 13 27	jsr $2713			jsr 	STKLoadCodePosition 		; loop back
.2426	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2427					ScanForward:
.2427	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.2429	86 23		stx $23				stx 	zTemp0+1
.242b	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.242d					_ScanForwardLoop:
.242d	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.242f	d0 0a		bne $243b			bne 	_ScanNoCheck
.2431	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2433	c5 22		cmp $22				cmp 	zTemp0
.2435	f0 49		beq $2480			beq 	_ScanExit
.2437	c5 23		cmp $23				cmp 	zTemp0+1
.2439	f0 45		beq $2480			beq 	_ScanExit
.243b					_ScanNoCheck:
.243b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.243d	c8		iny				iny
.243e	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2440	f0 37		beq $2479			beq		_ScanDataItem
.2442	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2444	f0 33		beq $2479			beq 	_ScanDataItem
.2446	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2448	f0 1b		beq $2465			beq 	_ScanNextLine
.244a	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.244c	d0 01		bne $244f			bne 	_ScanNoShift
.244e	c8		iny				iny
.244f					_ScanNoShift:
.244f	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2451	b0 da		bcs $242d			bcs 	_ScanForwardLoop
.2453	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2455	90 d6		bcc $242d			bcc 	_ScanForwardLoop
.2457	aa		tax				tax 								; access the table to get the adjustment.
.2458	18		clc				clc
.2459	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.245b	7d ee 19	adc $19ee,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.245e	85 24		sta $24				sta 	zTemp1
.2460	10 cb		bpl $242d			bpl		_ScanForwardLoop 			; error if -ve ?
.2462	4c a3 25	jmp $25a3		jmp	ErrorV_structure
.2465					_ScanNextLine:
.2465	18		clc				clc	 								; forward to next line.
.2466	b2 18		lda ($18)			lda 	(codePtr)
.2468	65 18		adc $18				adc 	codePtr
.246a	85 18		sta $18				sta 	codePtr
.246c	90 02		bcc $2470			bcc 	_ScanNoCarry
.246e	e6 19		inc $19				inc 	codePtr+1
.2470					_ScanNoCarry:
.2470	a0 03		ldy #$03			ldy 	#3
.2472	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2474	d0 b7		bne $242d			bne 	_ScanForwardLoop
.2476	4c a3 25	jmp $25a3		jmp	ErrorV_structure
.2479					_ScanDataItem:
.2479	98		tya				tya
.247a	38		sec				sec
.247b	71 18		adc ($18),y			adc 	(codePtr),y
.247d	a8		tay				tay
.247e	80 ad		bra $242d			bra 	_ScanForwardLoop
.2480					_ScanExit:
.2480	c8		iny				iny 								; consume final token.
.2481	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2482					ScanProcedures:
.2482	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.2484	48		pha				pha
.2485	a5 19		lda $19				lda 	codePtr+1
.2487	48		pha				pha
.2488	5a		phy				phy
.2489	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.248c	85 19		sta $19				sta 	codePtr+1
.248e	64 18		stz $18				stz 	codePtr
.2490					_SPLoop:
.2490	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2492	f0 18		beq $24ac			beq 	_SPExit
.2494	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2496	b1 18		lda ($18),y			lda 	(codePtr),y
.2498	c9 88		cmp #$88			cmp 	#PR_PROC
.249a	d0 03		bne $249f			bne 	_SPNext
.249c	20 b4 24	jsr $24b4			jsr 	_SPSetupRecord
.249f					_SPNext:
.249f	18		clc				clc 								; forward to next
.24a0	b2 18		lda ($18)			lda 	(codePtr)
.24a2	65 18		adc $18				adc 	codePtr
.24a4	85 18		sta $18				sta 	codePtr
.24a6	90 e8		bcc $2490			bcc 	_SPLoop
.24a8	e6 19		inc $19				inc 	codePtr+1
.24aa	80 e4		bra $2490			bra 	_SPLoop
.24ac					_SPExit:
.24ac	7a		ply				ply
.24ad	68		pla				pla
.24ae	85 19		sta $19				sta 	codePtr+1
.24b0	68		pla				pla
.24b1	85 18		sta $18				sta 	codePtr
.24b3	60		rts				rts
.24b4					_SPSetupRecord:
.24b4	c8		iny				iny 								; check identifier follows
.24b5	b1 18		lda ($18),y			lda 	(codePtr),y
.24b7	29 c0		and #$c0			and 	#$C0
.24b9	c9 40		cmp #$40			cmp 	#$40
.24bb	d0 27		bne $24e4			bne 	_SPSyntax
.24bd	20 9d 29	jsr $299d			jsr 	VARGetInfo 					; get the information
.24c0	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen 				; check right bracket follows.
.24c3	20 4f 29	jsr $294f			jsr 	VARFind 					; already exists ?
.24c6	b0 1f		bcs $24e7			bcs 	_SPUsed 					; error !
.24c8	20 fb 28	jsr $28fb			jsr 	VARCreate 					; create, XA points to the data.
.24cb	85 22		sta $22				sta 	zTemp0
.24cd	86 23		stx $23				stx 	zTemp0+1
.24cf	5a		phy				phy 								; save Y pos on stack
.24d0	a0 01		ldy #$01			ldy 	#1
.24d2	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.24d4	92 22		sta ($22)			sta 	(zTemp0)
.24d6	a5 19		lda $19				lda 	codePtr+1
.24d8	91 22		sta ($22),y			sta 	(zTemp0),y
.24da	c8		iny				iny
.24db	68		pla				pla
.24dc	91 22		sta ($22),y			sta 	(zTemp0),y
.24de	c8		iny				iny
.24df	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.24e1	91 22		sta ($22),y			sta 	(zTemp0),y
.24e3	60		rts				rts
.24e4					_SPSyntax:
.24e4	4c 17 25	jmp $2517		jmp	ErrorV_syntax
.24e7					_SPUsed:
.24e7	4c 6e 26	jmp $266e		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.24ea					Command_WHILE:
.24ea	5a		phy				phy 								; save position of the test
.24eb	20 db 16	jsr $16db			jsr 	EXPEvalNumber 				; work out the while test.
.24ee	a2 08		ldx #$08			ldx 	#IFR0
.24f0	20 55 30	jsr $3055			jsr 	IFloatCheckZero 			; check if zero
.24f3	f0 0e		beq $2503			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.24f5	98		tya				tya 								; position *after* test.
.24f6	7a		ply				ply 								; restore position before test, at WHILE
.24f7	88		dey				dey 								; so we execute the WHILE command again.
.24f8	48		pha				pha 								; push after test on the stack
.24f9	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.24fb	20 cd 26	jsr $26cd			jsr 	StackOpen
.24fe	20 01 27	jsr $2701			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2501	7a		ply				ply 								; restore the position *after* the test
.2502	60		rts				rts
.2503					_WHExitLoop:
.2503	68		pla				pla 								; throw post loop position
.2504	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2506	aa		tax				tax
.2507	20 27 24	jsr $2427			jsr 	ScanForward
.250a	60		rts				rts
.250b					Command_WEND:
.250b	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.250d	20 f9 26	jsr $26f9			jsr 	StackCheckFrame
.2510	20 13 27	jsr $2713			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2513	20 eb 26	jsr $26eb			jsr 	StackClose		 			; erase the frame
.2516	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2517					ErrorV_syntax:
.2517	20 ec 27	jsr $27ec		jsr	ErrorHandler
>251a	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2522	45 72 72 6f 72 00
.2528					ErrorV_range:
.2528	20 ec 27	jsr $27ec		jsr	ErrorHandler
>252b	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2533	52 61 6e 67 65 00
.2539					ErrorV_value:
.2539	20 ec 27	jsr $27ec		jsr	ErrorHandler
>253c	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2544	75 65 00
.2547					ErrorV_type:
.2547	20 ec 27	jsr $27ec		jsr	ErrorHandler
>254a	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2552	73 6d 61 74 63 68 00
.2559					ErrorV_unimplemented:
.2559	20 ec 27	jsr $27ec		jsr	ErrorHandler
>255c	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2564	6c 65 6d 65 6e 74 65 64 00
.256d					ErrorV_assert:
.256d	20 ec 27	jsr $27ec		jsr	ErrorHandler
>2570	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2578	46 61 69 6c 00
.257d					ErrorV_internal:
.257d	20 ec 27	jsr $27ec		jsr	ErrorHandler
>2580	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2588	6c 20 45 72 72 6f 72 00
.2590					ErrorV_divzero:
.2590	20 ec 27	jsr $27ec		jsr	ErrorHandler
>2593	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>259b	42 79 20 5a 65 72 6f 00
.25a3					ErrorV_structure:
.25a3	20 ec 27	jsr $27ec		jsr	ErrorHandler
>25a6	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>25ae	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.25bb					ErrorV_stop:
.25bb	20 ec 27	jsr $27ec		jsr	ErrorHandler
>25be	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>25c6	20 53 74 6f 70 70 65 64 00
.25cf					ErrorV_data:
.25cf	20 ec 27	jsr $27ec		jsr	ErrorHandler
>25d2	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>25da	44 61 74 61 00
.25df					ErrorV_redefine:
.25df	20 ec 27	jsr $27ec		jsr	ErrorHandler
>25e2	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>25ea	65 64 65 66 69 6e 65 64 00
.25f3					ErrorV_index:
.25f3	20 ec 27	jsr $27ec		jsr	ErrorHandler
>25f6	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>25fe	61 79 20 49 6e 64 65 78 00
.2607					ErrorV_memory:
.2607	20 ec 27	jsr $27ec		jsr	ErrorHandler
>260a	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2612	4d 65 6d 6f 72 79 00
.2619					ErrorV_uninitialised:
.2619	20 ec 27	jsr $27ec		jsr	ErrorHandler
>261c	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2624	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2634					ErrorV_string:
.2634	20 ec 27	jsr $27ec		jsr	ErrorHandler
>2637	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>263f	69 6e 67 20 4c 65 6e 67 74 68 00
.264a					ErrorV_variable:
.264a	20 ec 27	jsr $27ec		jsr	ErrorHandler
>264d	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2655	65 20 4d 69 73 73 69 6e 67 00
.265f					ErrorV_stack:
.265f	20 ec 27	jsr $27ec		jsr	ErrorHandler
>2662	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>266a	75 6c 6c 00
.266e					ErrorV_dupproc:
.266e	20 ec 27	jsr $27ec		jsr	ErrorHandler
>2671	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2679	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2689	65 64 00
.268c					ErrorV_unknown:
.268c	20 ec 27	jsr $27ec		jsr	ErrorHandler
>268f	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2697	20 50 72 6f 63 65 64 75 72 65 00
.26a2					ErrorV_break:
.26a2	20 ec 27	jsr $27ec		jsr	ErrorHandler
>26a5	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.26ac					ERRCheckLParen:
.26ac	b1 18		lda ($18),y			lda 	(codePtr),y
.26ae	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.26b0	d0 18		bne $26ca			bne 	ERRSyntaxError
.26b2	c8		iny				iny
.26b3	60		rts				rts
.26b4					ERRCheckRParen:
.26b4	b1 18		lda ($18),y			lda 	(codePtr),y
.26b6	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.26b8	d0 10		bne $26ca			bne 	ERRSyntaxError
.26ba	c8		iny				iny
.26bb	60		rts				rts
.26bc					ERRCheckComma:
.26bc	b1 18		lda ($18),y			lda 	(codePtr),y
.26be	c9 99		cmp #$99			cmp 	#PR_COMMA
.26c0	d0 08		bne $26ca			bne 	ERRSyntaxError
.26c2	c8		iny				iny
.26c3	60		rts				rts
.26c4					ERRCheckA:
.26c4	d1 18		cmp ($18),y			cmp 	(codePtr),y
.26c6	d0 02		bne $26ca			bne 	ERRSyntaxError
.26c8	c8		iny				iny
.26c9	60		rts				rts
.26ca					ERRSyntaxError:
.26ca	4c 17 25	jmp $2517		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.26cd					StackOpen:
.26cd	48		pha				pha 								; save frame byte
.26ce	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.26d0	0a		asl a				asl 	a 							; claim twice this for storage
.26d1	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.26d3	38		sec				sec 								; so basically subtracting from
.26d4	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.26d6	85 2a		sta $2a				sta 	basicStack
.26d8	b0 0a		bcs $26e4			bcs 	_SONoBorrow
>26da	db						.byte 	$DB
.26db	c6 2b		dec $2b				dec 	basicStack+1
.26dd	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.26df	cd 20 06	cmp $0620			cmp 	basicStackEnd
.26e2	f0 04		beq $26e8			beq 	_SOMemory
.26e4					_SONoBorrow:
.26e4	68		pla				pla 								; get marker back and write at TOS
.26e5	92 2a		sta ($2a)			sta 	(basicStack)
.26e7	60		rts				rts
.26e8					_SOMemory:
.26e8	4c 5f 26	jmp $265f		jmp	ErrorV_stack
.26eb					StackClose:
.26eb	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.26ed	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.26ef	0a		asl a				asl 	a 							; claim twice this.
.26f0	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.26f2	85 2a		sta $2a				sta 	basicStack
.26f4	90 02		bcc $26f8			bcc 	_SCExit
.26f6	e6 2b		inc $2b				inc 	basicStack+1
.26f8					_SCExit:
.26f8	60		rts				rts
.26f9					StackCheckFrame:
.26f9	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.26fb	d0 01		bne $26fe			bne 	_SCFError 					; different, we have structures mixed up
.26fd	60		rts				rts
.26fe					_SCFError:
.26fe	4c a3 25	jmp $25a3		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2701					STKSaveCodePosition:
.2701	5a		phy				phy
.2702	98		tya				tya 								; save Y at offset 1.
.2703	a0 01		ldy #$01			ldy 	#1
.2705	91 2a		sta ($2a),y			sta 	(basicStack),y
.2707	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2709	c8		iny				iny
.270a	91 2a		sta ($2a),y			sta 	(basicStack),y
.270c	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.270e	c8		iny				iny
.270f	91 2a		sta ($2a),y			sta 	(basicStack),y
.2711	7a		ply				ply
.2712	60		rts				rts
.2713					STKLoadCodePosition:
.2713	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2715	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2717	85 19		sta $19				sta 	codePtr+1
.2719	88		dey				dey
.271a	b1 2a		lda ($2a),y			lda 	(basicStack),y
.271c	85 18		sta $18				sta 	codePtr
.271e	88		dey				dey
.271f	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.2721	a8		tay				tay
.2722	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2723					StackReset:
.2723	48		pha				pha 								; save top of memory
.2724	3a		dec a				dec 	a  							; end of stack = previous byte
.2725	85 2b		sta $2b				sta 	basicStack+1
.2727	a9 ff		lda #$ff			lda 	#$FF
.2729	85 2a		sta $2a				sta 	basicStack
.272b	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.272d	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.272f	68		pla				pla 								; allocate pages for stack.
.2730	38		sec				sec
.2731	e9 02		sbc #$02			sbc 	#STACKPAGES
.2733	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2736	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2737					StringConcrete:
.2737	5a		phy				phy 								; save position on stack
.2738	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.273a	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.273c	b0 41		bcs $277f			bcs 	_SALengthError
.273e	18		clc				clc 								; length of the new string
.273f	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2741	90 02		bcc $2745			bcc 	_SAHaveLength
.2743	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2745					_SAHaveLength:
.2745	48		pha				pha 								; save length to be allocated for concreting.
.2746	38		sec				sec
.2747	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2749	6d 22 06	adc $0622			adc 	stringMemory
.274c	8d 22 06	sta $0622			sta 	stringMemory
.274f	85 26		sta $26				sta 	zTemp2 						; update storage address
.2751	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2753	6d 23 06	adc $0623			adc 	stringMemory+1
.2756	8d 23 06	sta $0623			sta 	stringMemory+1
.2759	85 27		sta $27				sta 	zTemp2+1
.275b	68		pla				pla 								; save length allocated in +0
.275c	92 26		sta ($26)			sta 	(zTemp2)
.275e	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2760	a0 01		ldy #$01			ldy 	#1
.2762	91 26		sta ($26),y			sta 	(zTemp2),y
.2764					_SACopyNewString:
.2764	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2766	a0 02		ldy #$02			ldy 	#2
.2768	91 26		sta ($26),y			sta 	(zTemp2),y
.276a	aa		tax				tax 								; bytes to copy
.276b	f0 0c		beq $2779			beq 	_SACopyExit
.276d	a0 01		ldy #$01			ldy 	#1 							; first character from here
.276f					_SACopyNSLoop:
.276f	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2771	c8		iny				iny 								; write two on in string storage
.2772	c8		iny				iny
.2773	91 26		sta ($26),y			sta 	(zTemp2),y
.2775	88		dey				dey
.2776	ca		dex				dex									; until copied all the string lengths.
.2777	d0 f6		bne $276f			bne 	_SACopyNSLoop
.2779					_SACopyExit:
.2779	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.277b	a5 26		lda $26				lda 	zTemp2
.277d	7a		ply				ply
.277e	60		rts				rts
.277f					_SALengthError:
.277f	4c 34 26	jmp $2634		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2782					StringSystemInitialise:
.2782	3a		dec a				dec 	a 							; make last byte of previous page.
.2783	8d 23 06	sta $0623			sta 	stringMemory+1
.2786	85 23		sta $23				sta 	zTemp0+1
.2788	a9 ff		lda #$ff			lda 	#$FF
.278a	8d 22 06	sta $0622			sta 	stringMemory
.278d	85 22		sta $22				sta 	zTemp0
.278f	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2791	92 22		sta ($22)			sta 	(zTemp0)
.2793	60		rts				rts
.2794					StringSpaceInitialise:
.2794	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2796	8d 21 06	sta $0621			sta 	stringInitialised
.2799	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.279c	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.279f	ad 23 06	lda $0623			lda 	stringMemory+1
.27a2	3a		dec a				dec 	a
.27a3	8d 25 06	sta $0625			sta 	stringTempPointer+1
.27a6	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.27a9	60		rts				rts
.27aa					StringTempAllocate:
.27aa	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.27ac	b0 2e		bcs $27dc			bcs 	_STALength
.27ae	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.27b1	30 05		bmi $27b8			bmi 	_STAAllocate
.27b3	48		pha				pha 								; save value to subtract.
.27b4	20 94 27	jsr $2794			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.27b7	68		pla				pla 								; restore it
.27b8					_STAAllocate:
.27b8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.27ba	18		clc				clc  								; deliberate allows one more
.27bb	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.27be	8d 24 06	sta $0624			sta 	stringTempPointer
.27c1	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.27c3	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.27c5	ad 25 06	lda $0625			lda 	stringTempPointer+1
.27c8	69 ff		adc #$ff			adc 	#$FF
.27ca	8d 25 06	sta $0625			sta 	stringTempPointer+1
.27cd	85 2d		sta $2d				sta 	zsTemp+1
.27cf	85 09		sta $09				sta 	IFR0+IM1
.27d1	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.27d3	a9 80		lda #$80			lda 	#$80
.27d5	85 0b		sta $0b				sta 	IFR0+IExp
.27d7	a9 00		lda #$00			lda 	#0 							; clear the target string
.27d9	92 2c		sta ($2c)			sta 	(zsTemp)
.27db	60		rts				rts
.27dc					_STALength:
.27dc	4c 34 26	jmp $2634		jmp	ErrorV_string
.27df					StringTempWrite:
.27df	5a		phy				phy
.27e0	48		pha				pha
.27e1	b2 2c		lda ($2c)			lda 	(zsTemp)
.27e3	1a		inc a				inc 	a
.27e4	92 2c		sta ($2c)			sta 	(zsTemp)
.27e6	a8		tay				tay
.27e7	68		pla				pla
.27e8	91 2c		sta ($2c),y			sta 	(zsTemp),y
.27ea	7a		ply				ply
.27eb	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.27ec					ErrorHandler:
.27ec	fa		plx				plx 								; get address of msg
.27ed	7a		ply				ply
.27ee	e8		inx				inx 								; bump past RTS
.27ef	d0 01		bne $27f2			bne 	_EHNoInc
.27f1	c8		iny				iny
.27f2					_EHNoInc:
.27f2	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.27f5	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.27f8	0d 27 06	ora $0627			ora 	ERRLine+1
.27fb	f0 10		beq $280d			beq 	_EHNoNumber
.27fd	a2 10		ldx #$10			ldx 	#_EHAtMsg & $FF
.27ff	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.2801	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.2804	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.2807	ae 27 06	ldx $0627			ldx 	ERRLine+1
.280a	20 15 28	jsr $2815			jsr 	WriteIntXA
.280d					_EHNoNumber:
.280d	4c 3e 28	jmp $283e			jmp 	WarmStartNewLine
.2810					_EHAtMsg:
>2810	20 61 74 20 00					.text 	" at ",0
.2815					WriteIntXA:
.2815	da		phx				phx
.2816	48		pha				pha
.2817	a2 08		ldx #$08			ldx 	#IFR0
.2819	20 ab 2f	jsr $2fab			jsr 	IFloatPushRx
.281c	68		pla				pla
.281d	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.2820	68		pla				pla
.2821	85 09		sta $09				sta 	IFR0+IM1
.2823	a9 0a		lda #$0a			lda 	#10 						; decimal
.2825	20 fd 2d	jsr $2dfd			jsr 	IFloatIntegerToStringR0	 	; convert
.2828	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.282b	a2 08		ldx #$08			ldx 	#IFR0
.282d	20 cc 2f	jsr $2fcc			jsr 	IFloatPullRx
.2830	60		rts				rts
.2831					NotImplemented:
.2831	4c 59 25	jmp $2559		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2834					WarmStart:
.2834	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2836	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2839	a9 6b		lda #$6b			lda 	#"k"
.283b	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.283e					WarmStartNewLine:
.283e	a9 0d		lda #$0d			lda 	#13
.2840	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2843					WarmStartNoPrompt:
.2843	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2845	9a		txs				txs
.2846	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.2849	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.284b	f0 f1		beq $283e			beq 	WarmStartNewLine
.284d	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.284f	d0 f2		bne $2843			bne 	WarmStartNoPrompt
.2851	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.2854	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2855	d0 01		bne $2858			bne 	_WSSkip
.2857	c8		iny				iny
.2858					_WSSkip:
.2858	86 26		stx $26				stx 	zTemp2 						; save address
.285a	84 27		sty $27				sty 	zTemp2+1
.285c	a2 86		ldx #$86			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.285e	a0 28		ldy #$28			ldy 	#TOKGetCharacter >> 8
.2860	38		sec				sec
.2861	20 8d 1f	jsr $1f8d			jsr 	TOKTokenise
.2864	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2867	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.286a	d0 0b		bne $2877			bne 	_WSLineEdit
.286c	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.286e	85 18		sta $18				sta 	codePtr
.2870	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2872	85 19		sta $19				sta 	codePtr+1
.2874	4c ac 14	jmp $14ac			jmp 	RUNNewLine
.2877					_WSLineEdit:
.2877	20 68 1e	jsr $1e68			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.287a	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.287d	c9 04		cmp #$04			cmp 	#4
.287f	f0 03		beq $2884			beq 	_WSNoInsert
.2881	20 b2 1e	jsr $1eb2			jsr 	PGMInsertLine				; if not, maybe insert
.2884					_WSNoInsert:
.2884	80 bd		bra $2843			bra 	WarmStartNoPrompt
.2886					TOKGetCharacter:
.2886	b2 26		lda ($26)			lda 	(zTemp2)
.2888	90 06		bcc $2890			bcc 	_GSNoIncrement
.288a	e6 26		inc $26				inc 	zTemp2
.288c	d0 02		bne $2890			bne 	_GSNoIncrement
.288e	e6 27		inc $27				inc 	zTemp2+1
.2890					_GSNoIncrement:
.2890	c9 00		cmp #$00			cmp 	#0
.2892	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2893					VARArrayLookup:
.2893	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2895	86 23		stx $23				stx 	zTemp0+1
.2897	b2 22		lda ($22)			lda 	(zTemp0)
.2899	48		pha				pha
.289a	5a		phy				phy
.289b	a0 01		ldy #$01			ldy 	#1
.289d	b1 22		lda ($22),y			lda 	(zTemp0),y
.289f	7a		ply				ply
.28a0	48		pha				pha
.28a1	20 ed 16	jsr $16ed			jsr 	EXPEvalInteger16 			; R0 now contains the index
.28a4	68		pla				pla 								; array address to zTemp0
.28a5	85 23		sta $23				sta 	zTemp0+1
.28a7	68		pla				pla
.28a8	85 22		sta $22				sta 	zTemp0
.28aa	5a		phy				phy 								; save codePtr position.
.28ab	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.28ad	b1 22		lda ($22),y			lda 	(zTemp0),y
.28af	48		pha				pha 								; save bit 15 on stack.
.28b0	29 7f		and #$7f			and 	#$7F
.28b2	85 24		sta $24				sta 	zTemp1
.28b4	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.28b6	d2 22		cmp ($22)			cmp 	(zTemp0)
.28b8	a5 09		lda $09				lda 	IFR0+IM1
.28ba	e5 24		sbc $24				sbc 	zTemp1
.28bc	b0 3a		bcs $28f8			bcs 	_VALIndex
.28be	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.28c0	c9 40		cmp #$40			cmp 	#$40
.28c2	b0 34		bcs $28f8			bcs 	_VALIndex
.28c4	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.28c6	26 09		rol $09				rol 	IFR0+IM1
.28c8	fa		plx				plx 								; get msb of size -> X
.28c9	30 04		bmi $28cf			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.28cb	06 08		asl $08				asl 	IFR0+IM0
.28cd	26 09		rol $09				rol 	IFR0+IM1
.28cf					_VARNotX4:
.28cf	18		clc				clc 								; add the two for the size bytes
.28d0	a5 08		lda $08				lda 	IFR0+IM0
.28d2	69 02		adc #$02			adc 	#2
.28d4	85 08		sta $08				sta 	IFR0+IM0
.28d6	90 02		bcc $28da			bcc 	_VARNoCarry1
.28d8	e6 09		inc $09				inc 	IFR0+IM1
.28da					_VARNoCarry1:
.28da	18		clc				clc 								; calculate the element address and push to stack.
.28db	a5 08		lda $08				lda 	IFR0+IM0
.28dd	65 22		adc $22				adc 	zTemp0
.28df	48		pha				pha
.28e0	a5 09		lda $09				lda 	IFR0+IM1
.28e2	65 23		adc $23				adc 	zTemp0+1
.28e4	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.28e6	30 04		bmi $28ec			bmi 	_VARHasSubLevel
.28e8	aa		tax				tax 								; address in XA
.28e9	68		pla				pla
.28ea	7a		ply				ply 								; restore Y and exit
.28eb	60		rts				rts
.28ec					_VARHasSubLevel:
.28ec	aa		tax				tax 								; get link address in XA
.28ed	68		pla				pla
.28ee	7a		ply				ply 								; restore code position.
.28ef	48		pha				pha
.28f0	20 bc 26	jsr $26bc			jsr 	ERRCheckComma 				; comma required.
.28f3	68		pla				pla
.28f4	20 93 28	jsr $2893			jsr 	VARArrayLookup 				; call it recursively
.28f7	60		rts				rts
.28f8					_VALIndex:
.28f8	4c f3 25	jmp $25f3		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.28fb					VARCreate:
.28fb	5a		phy				phy
.28fc	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.28fe	a2 00		ldx #$00			ldx 	#0
.2900	20 61 10	jsr $1061			jsr 	AllocateMemory
.2903	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.2905	86 25		stx $25				stx 	zTemp1+1
.2907	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2909	ad 2a 06	lda $062a			lda 	VARHash
.290c	91 24		sta ($24),y			sta 	(zTemp1),y
.290e	c8		iny				iny 								; put address of name into +3,+4
.290f	ad 28 06	lda $0628			lda 	VARNameAddress
.2912	91 24		sta ($24),y			sta 	(zTemp1),y
.2914	c8		iny				iny
.2915	ad 29 06	lda $0629			lda 	VARNameAddress+1
.2918	91 24		sta ($24),y			sta 	(zTemp1),y
.291a	ad 2b 06	lda $062b			lda 	VARType
.291d	29 01		and #$01			and 	#1
.291f	f0 06		beq $2927			beq 	_CVNotString
.2921	a0 08		ldy #$08			ldy 	#5+3
.2923	a9 80		lda #$80			lda 	#$80
.2925	91 24		sta ($24),y			sta 	(zTemp1),y
.2927					_CVNotString:
.2927	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.292a	85 22		sta $22				sta 	zTemp0
.292c	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.292f	85 23		sta $23				sta 	zTemp0+1
.2931	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2933	b2 22		lda ($22)			lda 	(zTemp0)
.2935	92 24		sta ($24)			sta 	(zTemp1)
.2937	b1 22		lda ($22),y			lda 	(zTemp0),y
.2939	91 24		sta ($24),y			sta 	(zTemp1),y
.293b	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.293d	92 22		sta ($22)			sta 	(zTemp0)
.293f	a5 25		lda $25				lda 	zTemp1+1
.2941	91 22		sta ($22),y			sta 	(zTemp0),y
.2943	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2945	a6 25		ldx $25				ldx 	zTemp1+1
.2947	18		clc				clc 								; add 5 to point to the data.
.2948	69 05		adc #$05			adc 	#5
.294a	90 01		bcc $294d			bcc 	_VCNoCarry
.294c	e8		inx				inx
.294d					_VCNoCarry:
.294d	7a		ply				ply
.294e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.294f					VARFind:
.294f	5a		phy				phy
.2950	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2952	b1 22		lda ($22),y			lda 	(zTemp0),y
.2954	85 25		sta $25				sta 	zTemp1+1
.2956	f0 1c		beq $2974			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2958	b2 22		lda ($22)			lda 	(zTemp0)
.295a	85 24		sta $24				sta 	zTemp1
.295c					_VFLoop:
.295c	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.295e	b1 24		lda ($24),y			lda 	(zTemp1),y
.2960	cd 2a 06	cmp $062a			cmp 	VARHash
.2963	f0 12		beq $2977			beq 	_VFHashesMatch 				; if so, check the name.
.2965					_VFNext:
.2965	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2967	aa		tax				tax
.2968	a0 01		ldy #$01			ldy 	#1
.296a	b1 24		lda ($24),y			lda 	(zTemp1),y
.296c	85 25		sta $25				sta 	zTemp1+1
.296e	86 24		stx $24				stx 	zTemp1
.2970	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2972	d0 e8		bne $295c			bne 	_VFLoop
.2974					_VFExitFail:
.2974	7a		ply				ply
.2975	18		clc				clc
.2976	60		rts				rts
.2977					_VFHashesMatch:
.2977	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2979	b1 24		lda ($24),y			lda 	(zTemp1),y
.297b	85 26		sta $26				sta 	zTemp2
.297d	c8		iny				iny
.297e	b1 24		lda ($24),y			lda 	(zTemp1),y
.2980	85 27		sta $27				sta 	zTemp2+1
.2982	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2984					_VFNameCompLoop:
.2984	c8		iny				iny 								; char at a time
.2985	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2988	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.298a	d0 d9		bne $2965			bne 	_VFNext						; next entry if different.
.298c	c9 7c		cmp #$7c			cmp 	#$7C
.298e	90 f4		bcc $2984			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2990	18		clc				clc
.2991	a5 24		lda $24				lda 	zTemp1
.2993	a6 25		ldx $25				ldx 	zTemp1+1
.2995	69 05		adc #$05			adc 	#5
.2997	90 01		bcc $299a			bcc 	_VFNNoCarry
.2999	e8		inx				inx
.299a					_VFNNoCarry:
.299a	7a		ply				ply
.299b	38		sec				sec
.299c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.299d					VARGetInfo:
.299d	98		tya				tya 								; calculate the address of the identifier start.
.299e	18		clc				clc
.299f	65 18		adc $18				adc 	codePtr
.29a1	8d 28 06	sta $0628			sta 	VARNameAddress
.29a4	a5 19		lda $19				lda 	codePtr+1
.29a6	69 00		adc #$00			adc 	#0
.29a8	8d 29 06	sta $0629			sta 	VARNameAddress+1
.29ab	9c 2a 06	stz $062a			stz 	VARHash
.29ae	a2 00		ldx #$00			ldx 	#0
.29b0					_VARCopyName:
.29b0	18		clc				clc 								; update the sum hash.
.29b1	ad 2a 06	lda $062a			lda 	VARHash
.29b4	71 18		adc ($18),y			adc 	(codePtr),y
.29b6	8d 2a 06	sta $062a			sta 	VARHash
.29b9	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.29bb	c8		iny				iny
.29bc	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.29bf	e8		inx				inx
.29c0	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.29c2	90 ec		bcc $29b0			bcc 	_VARCopyName
.29c4	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.29c7	29 03		and #$03			and 	#3 							; type is 0-3
.29c9	0a		asl a				asl 	a
.29ca	0a		asl a				asl 	a
.29cb	85 22		sta $22				sta 	zTemp0
.29cd	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.29d0	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.29d2	65 22		adc $22				adc 	zTemp0 						; index of hash table
.29d4	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.29d5	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.29d7	85 22		sta $22				sta 	zTemp0
.29d9	8d 4c 06	sta $064c			sta 	VARHashEntry
.29dc	a9 06		lda #$06			lda 	#VARHashTables >> 8
.29de	69 00		adc #$00			adc 	#0
.29e0	85 23		sta $23				sta 	zTemp0+1
.29e2	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.29e5	60		rts				rts
.29e6					VARClearHashTables:
.29e6	a2 00		ldx #$00			ldx 	#0
.29e8					_VCHRLoop:
.29e8	a9 00		lda #$00			lda 	#0
.29ea	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.29ed	e8		inx				inx
.29ee	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.29f0	d0 f6		bne $29e8			bne 	_VCHRLoop
.29f2	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.29f3					VARCheckSimple:
.29f3	aa		tax				tax 								; save in X
.29f4	b1 18		lda ($18),y			lda 	(codePtr),y
.29f6	c9 7c		cmp #$7c			cmp 	#$7C
.29f8	d0 15		bne $2a0f			bne 	_VCSComplex
.29fa	c8		iny				iny 								; consume the second byte, the type.
.29fb	8a		txa				txa  								; character (40-7F) x 4
.29fc	0a		asl a				asl 	a
.29fd	0a		asl a				asl  	a
.29fe	18		clc				clc
.29ff	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2a01	85 08		sta $08				sta 	IFR0+IM0
.2a03	a9 06		lda #$06			lda 	#FastVariables >> 8
.2a05	69 00		adc #$00			adc 	#0
.2a07	85 09		sta $09				sta 	IFR0+IM1
.2a09	64 0a		stz $0a				stz 	IFR0+IM2
.2a0b	64 0b		stz $0b				stz 	IFR0+IExp
.2a0d	38		sec				sec 								; it's a reference
.2a0e	60		rts				rts
.2a0f					_VCSComplex:
.2a0f	88		dey				dey	 								; extract information.
.2a10	20 9d 29	jsr $299d			jsr 	VARGetInfo
.2a13	20 4f 29	jsr $294f			jsr 	VARFind 					; search for variable
.2a16	b0 0a		bcs $2a22			bcs 	_VCSHaveVariable
.2a18	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2a1b	29 02		and #$02			and 	#2
.2a1d	d0 25		bne $2a44			bne 	_VCNoCreate
.2a1f	20 fb 28	jsr $28fb			jsr 	VARCreate 					; create variable
.2a22					_VCSHaveVariable:
.2a22	48		pha				pha 								; save LSB on the stack
.2a23	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2a26	6a		ror a				ror 	a
.2a27	6a		ror a				ror 	a
.2a28	68		pla				pla 								; restore LSB
.2a29	90 08		bcc $2a33			bcc 	_VCSNotArray 				; skip if not an array
.2a2b	20 93 28	jsr $2893			jsr 	VARArrayLookup 				; look for subscripts.
.2a2e	48		pha				pha 								; check )
.2a2f	20 b4 26	jsr $26b4			jsr 	ERRCheckRParen
.2a32	68		pla				pla
.2a33					_VCSNotArray:
.2a33	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2a35	85 08		sta $08				sta 	IFR0+IM0
.2a37	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2a39	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2a3c	6a		ror a				ror 	a
.2a3d	a9 00		lda #$00			lda 	#0
.2a3f	6a		ror a				ror 	a 							; now $00 or $80
.2a40	85 0b		sta $0b				sta 	IFR0+IExp
.2a42	38		sec				sec 								; it's a reference
.2a43	60		rts				rts
.2a44					_VCNoCreate:
.2a44	4c 19 26	jmp $2619		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.2a47					IFInitialise:
.2a47	9c de 06	stz $06de			stz 	IFStackIndex
.2a4a	60		rts				rts
.2a4b					IFloatSubtract:
.2a4b	da		phx				phx
.2a4c	a2 08		ldx #$08			ldx 	#IFR0
.2a4e	20 67 30	jsr $3067			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2a51	fa		plx				plx
.2a52					IFloatAdd:
.2a52	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2a54	05 0b		ora $0b				ora 	IFR0+IExp
.2a56	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2a58	d0 4e		bne $2aa8			bne 	_IFloatAddDecimals 			; decimal version.
.2a5a					_IFAddSubMantissa:
.2a5a	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2a5c	45 0b		eor $0b				eor 	IFR0+IExp
.2a5e	29 40		and #$40			and 	#IFSign
.2a60	d0 21		bne $2a83			bne 	_IFloatSubMantissa
.2a62	18		clc				clc 								; do the actual addition
.2a63	a5 08		lda $08			lda 	IFR0+IM0
.2a65	75 00		adc $00,x		adc 		IM0,x
.2a67	85 08		sta $08			sta 	IFR0+IM0
.2a69	a5 09		lda $09			lda 	IFR0+IM1
.2a6b	75 01		adc $01,x		adc 		IM1,x
.2a6d	85 09		sta $09			sta 	IFR0+IM1
.2a6f	a5 0a		lda $0a			lda 	IFR0+IM2
.2a71	75 02		adc $02,x		adc 		IM2,x
.2a73	85 0a		sta $0a			sta 	IFR0+IM2
.2a75	10 29		bpl $2aa0			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2a77	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2a79	20 8b 30	jsr $308b			jsr 	IFloatShiftRight
.2a7c	20 b5 30	jsr $30b5			jsr 	IFloatIncExponent
.2a7f	d0 1f		bne $2aa0			bne 	_IFloatAddExit
.2a81	38		sec				sec 								; overflowed numerically.
.2a82	60		rts				rts
.2a83					_IFloatSubMantissa:
.2a83	38		sec				sec 								; do the subtraction R0-Rx
.2a84	a5 08		lda $08			lda 	IFR0+IM0
.2a86	f5 00		sbc $00,x		sbc 		IM0,x
.2a88	85 08		sta $08			sta 	IFR0+IM0
.2a8a	a5 09		lda $09			lda 	IFR0+IM1
.2a8c	f5 01		sbc $01,x		sbc 		IM1,x
.2a8e	85 09		sta $09			sta 	IFR0+IM1
.2a90	a5 0a		lda $0a			lda 	IFR0+IM2
.2a92	f5 02		sbc $02,x		sbc 		IM2,x
.2a94	85 0a		sta $0a			sta 	IFR0+IM2
.2a96	b0 08		bcs $2aa0			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2a98	a2 08		ldx #$08			ldx 	#IFR0
.2a9a	20 6f 30	jsr $306f			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2a9d	20 67 30	jsr $3067			jsr 	IFloatNegate 				; negate
.2aa0					_IFloatAddExit:
.2aa0	18		clc				clc
.2aa1	60		rts				rts
.2aa2					_IFloatZeroAdd:
.2aa2	fa		plx				plx 								; return this value in R0
.2aa3	20 ed 2f	jsr $2fed			jsr 	IFloatCopyFromRegister
.2aa6	18		clc				clc
.2aa7	60		rts				rts
.2aa8					_IFloatAddDecimals:
.2aa8	20 55 30	jsr $3055			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2aab	f0 f3		beq $2aa0			beq 	_IFloatAddExit
.2aad	20 93 30	jsr $3093			jsr 	IFloatNormalise 			; normalise RX
.2ab0	da		phx				phx 								; normalise R0
.2ab1	a2 08		ldx #$08			ldx 	#IFR0
.2ab3	20 55 30	jsr $3055			jsr 	IFloatCheckZero
.2ab6	f0 ea		beq $2aa2			beq 	_IFloatZeroAdd
.2ab8	20 93 30	jsr $3093			jsr 	IFloatNormalise
.2abb	fa		plx				plx
.2abc	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2abe	29 3f		and #$3f			and 	#IFXMask
.2ac0	38		sec				sec
.2ac1	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2ac3	85 20		sta $20				sta 	iTemp0
.2ac5	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2ac7	29 3f		and #$3f			and 	#IFXMask
.2ac9	38		sec				sec
.2aca	e9 20		sbc #$20			sbc 	#$20
.2acc	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2ace	b0 02		bcs $2ad2			bcs 	_IFloatHaveLarger
.2ad0	a5 20		lda $20				lda 	iTemp0
.2ad2					_IFloatHaveLarger:
.2ad2	18		clc				clc 								; get the actual one back.
.2ad3	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2ad5	20 e2 2a	jsr $2ae2			jsr 	_IFShiftXToA
.2ad8	da		phx				phx
.2ad9	a2 08		ldx #$08			ldx 	#IFR0
.2adb	20 e2 2a	jsr $2ae2			jsr 	_IFShiftXToA
.2ade	fa		plx				plx
.2adf	4c 5a 2a	jmp $2a5a			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2ae2					_IFShiftXToA:
.2ae2	8d d6 06	sta $06d6			sta 	IFTarget
.2ae5	20 55 30	jsr $3055			jsr 	IFloatCheckZero 			; check adding zero ?
.2ae8	f0 11		beq $2afb			beq 	_IFSXExit
.2aea					_IFSXLoop:
.2aea	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2aec	29 3f		and #$3f			and 	#IFXMask
.2aee	cd d6 06	cmp $06d6			cmp 	IFTarget
.2af1	f0 08		beq $2afb			beq 	_IFSXExit
.2af3	20 8b 30	jsr $308b			jsr 	IFloatShiftRight
.2af6	20 b5 30	jsr $30b5			jsr 	IFloatIncExponent
.2af9	80 ef		bra $2aea			bra 	_IFSXLoop
.2afb					_IFSXExit:
.2afb	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2afc					IFloatMultiply:
.2afc	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2aff	20 b7 2b	jsr $2bb7			jsr 	IFCalculateNewSign
.2b02	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2b04	05 0b		ora $0b				ora 	IFR0+IExp
.2b06	29 3f		and #$3f			and 	#IFXMask
.2b08	15 01		ora $01,x			ora 	IM1,x
.2b0a	05 09		ora $09				ora 	IFR0+IM1
.2b0c	15 02		ora $02,x			ora 	IM2,x
.2b0e	05 0a		ora $0a				ora 	IFR0+IM2
.2b10	d0 0a		bne $2b1c			bne 	_IFMStandard
.2b12	20 38 30	jsr $3038			jsr 	IFloatMultiply8BitRx
.2b15	ad d8 06	lda $06d8			lda 	IFNewSign
.2b18	85 0b		sta $0b				sta 	IFR0+IExp
.2b1a	18		clc				clc
.2b1b	60		rts				rts
.2b1c					_IFMStandard:
.2b1c	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2b1e	20 ae 2b	jsr $2bae			jsr 	IFMSignExtend
.2b21	8d d7 06	sta $06d7			sta 	IFNewExponent
.2b24	a5 0b		lda $0b				lda 	IFR0+IExp
.2b26	20 ae 2b	jsr $2bae			jsr 	IFMSignExtend
.2b29	18		clc				clc
.2b2a	6d d7 06	adc $06d7			adc 	IFNewExponent
.2b2d	8d d7 06	sta $06d7			sta 	IFNewExponent
.2b30	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2b32	20 fe 2f	jsr $2ffe			jsr 	IFloatCopyToRegister
.2b35	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2b37	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.2b3a					_IFMLoop:
.2b3a	a2 14		ldx #$14			ldx 	#IFRTemp
.2b3c	20 55 30	jsr $3055			jsr 	IFloatCheckZero
.2b3f	f0 3a		beq $2b7b			beq 	_IFMExit
.2b41	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2b44	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2b46	10 03		bpl $2b4b			bpl	 	_IFMTargetOkay
.2b48	20 9f 2b	jsr $2b9f			jsr 	_IFMShiftAll
.2b4b					_IFMTargetOkay:
.2b4b	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2b4d	29 01		and #$01			and 	#1
.2b4f	f0 16		beq $2b67			beq 	_IFMNoAdd
.2b51	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2b54	18		clc				clc
.2b55	a5 08		lda $08			lda 	IFR0+IM0
.2b57	75 00		adc $00,x		adc 		IM0,x
.2b59	85 08		sta $08			sta 	IFR0+IM0
.2b5b	a5 09		lda $09			lda 	IFR0+IM1
.2b5d	75 01		adc $01,x		adc 		IM1,x
.2b5f	85 09		sta $09			sta 	IFR0+IM1
.2b61	a5 0a		lda $0a			lda 	IFR0+IM2
.2b63	75 02		adc $02,x		adc 		IM2,x
.2b65	85 0a		sta $0a			sta 	IFR0+IM2
.2b67					_IFMNoAdd:
.2b67	a5 0a		lda $0a				lda 	IFR0+IM2
.2b69	10 03		bpl $2b6e			bpl 	_IFMResultOkay
.2b6b	20 9f 2b	jsr $2b9f			jsr 	_IFMShiftAll
.2b6e					_IFMResultOkay:
.2b6e	a2 14		ldx #$14			ldx 	#IFRTemp
.2b70	20 8b 30	jsr $308b			jsr 	IFloatShiftRight
.2b73	ae d6 06	ldx $06d6			ldx 	IFTarget
.2b76	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.2b79	80 bf		bra $2b3a			bra 	_IFMLoop
.2b7b					_IFMExit:
.2b7b	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2b7e	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2b80	90 0f		bcc $2b91			bcc 	_IFMOkay
.2b82	c9 e0		cmp #$e0			cmp 	#$E0
.2b84	b0 0b		bcs $2b91			bcs 	_IFMOkay
.2b86	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2b88	f0 13		beq $2b9d			beq 	_IFMError
.2b8a	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2b8c	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.2b8f	18		clc				clc
.2b90	60		rts				rts
.2b91					_IFMOkay:
.2b91	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2b93	0d d8 06	ora $06d8			ora 	IFNewSign
.2b96	85 0b		sta $0b				sta 	IFR0+IExp
.2b98	18		clc				clc
.2b99	60		rts				rts
.2b9a	4c ff ff	jmp $ffff			jmp 	$FFFF
.2b9d					_IFMError:
.2b9d	38		sec				sec
.2b9e	60		rts				rts
.2b9f					_IFMShiftAll:
.2b9f	a2 08		ldx #$08			ldx 	#IFR0
.2ba1	20 8b 30	jsr $308b			jsr 	IFloatShiftRight
.2ba4	ae d6 06	ldx $06d6			ldx 	IFTarget
.2ba7	20 8b 30	jsr $308b			jsr 	IFloatShiftRight
.2baa	ee d7 06	inc $06d7			inc 	IFNewExponent
.2bad	60		rts				rts
.2bae					IFMSignExtend:
.2bae	29 3f		and #$3f			and 	#IFXMask
.2bb0	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2bb2	90 02		bcc $2bb6			bcc 	_IFMNoSXX
.2bb4	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2bb6					_IFMNoSXX:
.2bb6	60		rts				rts
.2bb7					IFCalculateNewSign:
.2bb7	b5 03		lda $03,x			lda 	IExp,x
.2bb9	45 0b		eor $0b				eor 	IFR0+IExp
.2bbb	29 40		and #$40			and 	#IFSign
.2bbd	8d d8 06	sta $06d8			sta 	IFNewSign
.2bc0	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2bc1					IFloatDivideInteger:
.2bc1	20 da 2b	jsr $2bda			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2bc4	b0 06		bcs $2bcc			bcs 	_IFDIExit
.2bc6	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2bc8	20 ed 2f	jsr $2fed			jsr 	IFloatCopyFromRegister
.2bcb	18		clc				clc
.2bcc					_IFDIExit:
.2bcc	60		rts				rts
.2bcd					IFloatModulusInteger:
.2bcd	20 da 2b	jsr $2bda			jsr 	IFloatDivideIntegerCommon
.2bd0	b0 07		bcs $2bd9			bcs 	_IFMIExit
.2bd2	ae d6 06	ldx $06d6			ldx 	IFTarget
.2bd5	20 ed 2f	jsr $2fed			jsr 	IFloatCopyFromRegister
.2bd8	18		clc				clc
.2bd9					_IFMIExit:
.2bd9	60		rts				rts
.2bda					IFloatDivideIntegerCommon:
.2bda	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2bdd	20 b7 2b	jsr $2bb7			jsr 	IFCalculateNewSign 			; calculate sign of result
.2be0	20 08 2c	jsr $2c08			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2be3	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2be5	20 55 30	jsr $3055			jsr 	IFloatCheckZero
.2be8	f0 1c		beq $2c06			beq 	_IFDIDivZero
.2bea	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2bed	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.2bf0	5a		phy				phy
.2bf1	a0 18		ldy #$18			ldy 	#24
.2bf3					_IFDILoop:
.2bf3	20 19 2c	jsr $2c19			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2bf6	20 25 2c	jsr $2c25			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2bf9	88		dey				dey
.2bfa	d0 f7		bne $2bf3			bne 	_IFDILoop 					; do it 24 times
.2bfc	7a		ply				ply
.2bfd	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2c00	29 40		and #$40			and 	#IFSign
.2c02	85 17		sta $17				sta 	IFRTemp+IExp
.2c04	18		clc				clc 								; is okay.
.2c05	60		rts				rts
.2c06					_IFDIDivZero:
.2c06	38		sec				sec
.2c07	60		rts				rts
.2c08					IFDCopyRXToRTemp:
.2c08	b5 00		lda $00,x			lda 	IM0,x
.2c0a	85 14		sta $14				sta 	IFRTemp+IM0
.2c0c	b5 01		lda $01,x			lda 	IM1,x
.2c0e	85 15		sta $15				sta 	IFRTemp+IM1
.2c10	b5 02		lda $02,x			lda 	IM2,x
.2c12	85 16		sta $16				sta 	IFRTemp+IM2
.2c14	b5 03		lda $03,x			lda 	IExp,x
.2c16	85 17		sta $17				sta 	IFRTemp+IExp
.2c18	60		rts				rts
.2c19					IFDShiftSTempS1Left:
.2c19	a2 14		ldx #$14			ldx 	#IFRTemp
.2c1b	20 83 30	jsr $3083			jsr 	IFloatShiftLeft
.2c1e	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c21	20 84 30	jsr $3084			jsr 	IFloatRotateLeft
.2c24	60		rts				rts
.2c25					IFDTrySubtract:
.2c25	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2c28	38		sec				sec 								; subtract, saving the results on the stack.
.2c29	b5 00		lda $00,x			lda 	IM0,x
.2c2b	e5 08		sbc $08				sbc 	IFR0+IM0
.2c2d	48		pha				pha
.2c2e	b5 01		lda $01,x			lda 	IM1,x
.2c30	e5 09		sbc $09				sbc 	IFR0+IM1
.2c32	48		pha				pha
.2c33	b5 02		lda $02,x			lda 	IM2,x
.2c35	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2c37	b0 03		bcs $2c3c			bcs 	_IFDCanSubtract
.2c39	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2c3a	68		pla				pla
.2c3b	60		rts				rts
.2c3c					_IFDCanSubtract:
.2c3c	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2c3e	68		pla				pla
.2c3f	95 01		sta $01,x			sta 	IM1,x
.2c41	68		pla				pla
.2c42	95 00		sta $00,x			sta 	IM0,x
.2c44	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2c46	d0 06		bne $2c4e			bne 	_IFDCSExit
.2c48	e6 15		inc $15				inc 	IFRTemp+IM1
.2c4a	d0 02		bne $2c4e			bne 	_IFDCSExit
.2c4c	e6 16		inc $16				inc 	IFRTemp+IM2
.2c4e					_IFDCSExit:
.2c4e	60		rts				rts
.2c4f					IFloatBitwiseAnd:
.2c4f	5a		phy				phy
.2c50	20 94 2c	jsr $2c94			jsr 	IFPreProcessBitwise 		; set up everything.
.2c53	d0 0f		bne $2c64			bne 	_IFBAExit
.2c55					_IFBALoop:
.2c55	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2c58	35 00		and $00,x			and 	IM0,x
.2c5a	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2c5d	e8		inx				inx
.2c5e	c8		iny				iny
.2c5f	c0 03		cpy #$03			cpy 	#3
.2c61	d0 f2		bne $2c55			bne 	_IFBALoop
.2c63	18		clc				clc
.2c64					_IFBAExit:
.2c64	7a		ply				ply
.2c65	60		rts				rts
.2c66					IFloatBitwiseOr:
.2c66	5a		phy				phy
.2c67	20 94 2c	jsr $2c94			jsr 	IFPreProcessBitwise 		; set up everything.
.2c6a	d0 0f		bne $2c7b			bne 	_IFBAExit
.2c6c					_IFBALoop:
.2c6c	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2c6f	15 00		ora $00,x			ora 	IM0,x
.2c71	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2c74	e8		inx				inx
.2c75	c8		iny				iny
.2c76	c0 03		cpy #$03			cpy 	#3
.2c78	d0 f2		bne $2c6c			bne 	_IFBALoop
.2c7a	18		clc				clc
.2c7b					_IFBAExit:
.2c7b	7a		ply				ply
.2c7c	60		rts				rts
.2c7d					IFloatBitwiseXor:
.2c7d	5a		phy				phy
.2c7e	20 94 2c	jsr $2c94			jsr 	IFPreProcessBitwise 		; set up everything.
.2c81	d0 0f		bne $2c92			bne 	_IFBAExit
.2c83					_IFBALoop:
.2c83	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2c86	55 00		eor $00,x			eor 	IM0,x
.2c88	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2c8b	e8		inx				inx
.2c8c	c8		iny				iny
.2c8d	c0 03		cpy #$03			cpy 	#3
.2c8f	d0 f2		bne $2c83			bne 	_IFBALoop
.2c91	18		clc				clc
.2c92					_IFBAExit:
.2c92	7a		ply				ply
.2c93	60		rts				rts
.2c94					IFPreProcessBitwise:
.2c94	a0 00		ldy #$00			ldy 	#0 							; set index.
.2c96	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2c98	15 03		ora $03,x			ora 	IExp,x
.2c9a	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2c9c	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2c9e	38		sec				sec 								; carry set just in cases.
.2c9f	60		rts				rts
.2ca0					IFloatAbsoluteR0:
.2ca0	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2ca2	29 bf		and #$bf			and 	#IFSign ^ 255
.2ca4	85 0b		sta $0b				sta 	IFR0+IExp
.2ca6	18		clc				clc
.2ca7	60		rts				rts
.2ca8					IFloatSquareRootR0:
.2ca8	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2caa	20 55 30	jsr $3055			jsr 	IFloatCheckZero
.2cad	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2caf	29 40		and #$40			and 	#IFSign
.2cb1	d0 2f		bne $2ce2			bne 	_IFSRFail
.2cb3	20 93 30	jsr $3093			jsr 	IFloatNormalise 			; it will work better !
.2cb6	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2cb8	20 fe 2f	jsr $2ffe			jsr 	IFloatCopyToRegister
.2cbb	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2cbd	20 ae 2b	jsr $2bae			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2cc0	18		clc				clc
.2cc1	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2cc3	85 0b		sta $0b				sta 	IFR0+IExp
.2cc5	4a		lsr a				lsr 	a 							; which we can halve.
.2cc6	38		sec				sec 								; convert back
.2cc7	e9 17		sbc #$17			sbc 	#23
.2cc9	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2ccb	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2ccd	20 e4 2c	jsr $2ce4			jsr 	_IFSRNewton
.2cd0	20 e4 2c	jsr $2ce4			jsr 	_IFSRNewton
.2cd3	20 e4 2c	jsr $2ce4			jsr 	_IFSRNewton
.2cd6	20 e4 2c	jsr $2ce4			jsr 	_IFSRNewton
.2cd9	18		clc				clc
.2cda	60		rts				rts
.2cdb					_IFSRZero:
.2cdb	a2 08		ldx #$08			ldx 	#IFR0
.2cdd	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.2ce0	18		clc				clc
.2ce1	60		rts				rts
.2ce2					_IFSRFail:
.2ce2	38		sec				sec
.2ce3	60		rts				rts
.2ce4					_IFSRNewton:
.2ce4	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2ce6	20 ab 2f	jsr $2fab			jsr 	IFloatPushRx
.2ce9	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2ceb	20 ab 2f	jsr $2fab			jsr 	IFloatPushRx
.2cee	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2cf0	20 7f 2d	jsr $2d7f			jsr 	IFloatDivideFloat
.2cf3	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2cf5	20 cc 2f	jsr $2fcc			jsr 	IFloatPullRx
.2cf8	20 52 2a	jsr $2a52			jsr 	IFloatAdd 					; now guess + original/guess
.2cfb	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2cfd	20 8b 30	jsr $308b			jsr 	IFloatShiftRight
.2d00	a2 0c		ldx #$0c			ldx 	#IFR1
.2d02	20 cc 2f	jsr $2fcc			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2d05	60		rts				rts
.2d06					IFloatFractionalR0:
.2d06	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2d08	29 3f		and #$3f			and 	#IFXMask
.2d0a	f0 17		beq $2d23			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2d0c	20 a0 2c	jsr $2ca0			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2d0f	a2 08		ldx #$08			ldx 	#IFR0
.2d11	20 93 30	jsr $3093			jsr 	IFloatNormalise 			; normalise R0
.2d14	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2d16	20 fe 2f	jsr $2ffe			jsr 	IFloatCopyToRegister
.2d19	20 5c 2d	jsr $2d5c			jsr 	IFloatIntegerR0 			; take integer part of R0
.2d1c	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2d1e	20 4b 2a	jsr $2a4b			jsr 	IFloatSubtract
.2d21	80 05		bra $2d28			bra 	_FIPExit
.2d23					_FIPZero:
.2d23	a2 08		ldx #$08			ldx 	#IFR0
.2d25	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.2d28					_FIPExit:
.2d28	18		clc				clc
.2d29	60		rts				rts
.2d2a					IFloatCompare:
.2d2a	20 4b 2a	jsr $2a4b			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2d2d	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2d2f	05 0b		ora $0b				ora 	IFR0+IExp
.2d31	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2d33	29 3f		and #$3f			and 	#IFXMask
.2d35	d0 19		bne $2d50			bne 	_IFCNonInteger
.2d37	20 55 30	jsr $3055			jsr 	IFloatCheckZero 			; check if zero
.2d3a	f0 0f		beq $2d4b			beq 	_IFCZero
.2d3c					_IFCReturnSign:
.2d3c	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2d3e	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2d40	48		pha				pha
.2d41	a9 01		lda #$01			lda 	#1
.2d43	20 5e 30	jsr $305e			jsr 	IFloatSetByte 				; return to +1
.2d46	68		pla				pla 								; sign bit back
.2d47	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2d49	18		clc				clc
.2d4a	60		rts				rts
.2d4b					_IFCZero:
.2d4b	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.2d4e	18		clc				clc
.2d4f	60		rts				rts
.2d50					_IFCNonInteger:
.2d50	a5 08		lda $08				lda 	IFR0+IM0
.2d52	29 00		and #$00			and		#$00
.2d54	05 09		ora $09				ora 	IFR0+IM1
.2d56	05 0a		ora $0a				ora 	IFR0+IM2
.2d58	f0 f1		beq $2d4b			beq 	_IFCZero 					; near enough !
.2d5a	80 e0		bra $2d3c			bra 	_IFCReturnSign 				; return the sign of the difference.
.2d5c					IFloatIntegerR0:
.2d5c	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2d5e	29 3f		and #$3f			and 	#IFXMask
.2d60	f0 1b		beq $2d7d			beq 	_FIPExit 					; if so do nothing
.2d62	a2 08		ldx #$08			ldx 	#IFR0
.2d64	20 93 30	jsr $3093			jsr 	IFloatNormalise 			; normalise
.2d67	20 55 30	jsr $3055			jsr 	IFloatCheckZero 			; is it zero ?
.2d6a	f0 0e		beq $2d7a			beq 	_FIPZero 					; if so return zero.
.2d6c					_FIPShift:
.2d6c	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2d6e	29 20		and #$20			and 	#$20 						; still -ve
.2d70	f0 0b		beq $2d7d			beq 	_FIPExit
.2d72	20 8b 30	jsr $308b			jsr 	IFloatShiftRight 			; shift mantissa right
.2d75	20 b5 30	jsr $30b5			jsr 	IFloatIncExponent 			; bump exponent
.2d78	80 f2		bra $2d6c			bra 	_FIPShift
.2d7a					_FIPZero:
.2d7a	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.2d7d					_FIPExit:
.2d7d	18		clc				clc
.2d7e	60		rts				rts
.2d7f					IFloatDivideFloat:
.2d7f	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2d82	20 b7 2b	jsr $2bb7			jsr 	IFCalculateNewSign 			; calculate sign of result
.2d85	20 93 30	jsr $3093			jsr 	IFloatNormalise 			; normalise RX
.2d88	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2d8a	20 93 30	jsr $3093			jsr 	IFloatNormalise
.2d8d	20 55 30	jsr $3055			jsr 	IFloatCheckZero
.2d90	f0 56		beq $2de8			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2d92	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2d94	20 ae 2b	jsr $2bae			jsr 	IFMSignExtend
.2d97	8d d7 06	sta $06d7			sta 	IFNewExponent
.2d9a	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2d9d	b5 03		lda $03,x			lda 	IExp,x
.2d9f	20 ae 2b	jsr $2bae			jsr 	IFMSignExtend
.2da2	38		sec				sec
.2da3	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2da6	38		sec				sec
.2da7	e9 17		sbc #$17			sbc 	#23
.2da9	8d d7 06	sta $06d7			sta 	IFNewExponent
.2dac	20 ea 2d	jsr $2dea			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2daf	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2db1	10 08		bpl $2dbb			bpl 	_IFDFNoShiftResult
.2db3	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2db5	20 8b 30	jsr $308b			jsr 	IFloatShiftRight
.2db8	ee d7 06	inc $06d7			inc 	IFNewExponent
.2dbb					_IFDFNoShiftResult:
.2dbb	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2dbe	30 06		bmi $2dc6			bmi 	_IFDFCheckUnderflow
.2dc0	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2dc2	b0 24		bcs $2de8			bcs 	_IFDFDivZero
.2dc4	80 11		bra $2dd7			bra		_IFDFExit
.2dc6					_IFDFCheckUnderflow:
.2dc6	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2dc9	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2dcb	b0 0a		bcs $2dd7			bcs 	_IFDFExit
.2dcd	ee d7 06	inc $06d7			inc 	IFNewExponent
.2dd0	a2 14		ldx #$14			ldx 	#IFRTemp
.2dd2	20 8b 30	jsr $308b			jsr 	IFloatShiftRight
.2dd5	80 ef		bra $2dc6			bra 	_IFDFCheckUnderflow
.2dd7					_IFDFExit:
.2dd7	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2dda	29 3f		and #$3f			and 	#IFXMask
.2ddc	0d d8 06	ora $06d8			ora 	IFNewSign
.2ddf	85 17		sta $17				sta 	IFRTemp+IExp
.2de1	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2de3	20 ed 2f	jsr $2fed			jsr 	IFloatCopyFromRegister
.2de6	18		clc				clc
.2de7	60		rts				rts
.2de8					_IFDFDivZero:
.2de8	38		sec				sec
.2de9	60		rts				rts
.2dea					IFloatDivideSupport:
.2dea	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2dec	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.2def	5a		phy				phy 								; main division loop x 23
.2df0	a0 17		ldy #$17			ldy 	#23
.2df2					_IFDSLoop:
.2df2	20 25 2c	jsr $2c25			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2df5	20 19 2c	jsr $2c19			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2df8	88		dey				dey
.2df9	d0 f7		bne $2df2			bne 	_IFDSLoop 					; do it 24 times
.2dfb	7a		ply				ply
.2dfc	60		rts				rts
.2dfd					IFloatIntegerToStringR0:
.2dfd	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2e00	20 dd 30	jsr $30dd			jsr 	IFloatBufferReset			; empty buffer
.2e03	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer
.2e05	29 3f		and #$3f			and 	#IFXMask
.2e07	d0 1e		bne $2e27			bne 	_IFIFail
.2e09	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2e0b	20 55 30	jsr $3055			jsr 	IFloatCheckZero
.2e0e	f0 0e		beq $2e1e			beq 	_IFINotNegative
.2e10	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2e12	29 40		and #$40			and 	#IFSign
.2e14	f0 08		beq $2e1e			beq 	_IFINotNegative
.2e16	a9 2d		lda #$2d			lda 	#"-"						; output -
.2e18	20 ec 30	jsr $30ec			jsr 	IFloatBufferWrite
.2e1b	20 67 30	jsr $3067			jsr 	IFloatNegate 				; tidy up !
.2e1e					_IFINotNegative:
.2e1e	20 29 2e	jsr $2e29			jsr 	_IFIRecursiveConvert 		; start converting
.2e21	20 e4 30	jsr $30e4			jsr 	IFloatGetBufferAddress
.2e24	18		clc				clc
.2e25	80 01		bra $2e28			bra 	_IFIExit
.2e27					_IFIFail:
.2e27	38		sec				sec
.2e28					_IFIExit:
.2e28	60		rts				rts
.2e29					_IFIRecursiveConvert:
.2e29	a2 0c		ldx #$0c			ldx 	#IFR1
.2e2b	20 fe 2f	jsr $2ffe			jsr 	IFloatCopyToRegister 		; R0->R1
.2e2e	a2 08		ldx #$08			ldx 	#IFR0
.2e30	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2e33	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.2e36	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2e38	20 c1 2b	jsr $2bc1			jsr 	IFloatDivideInteger
.2e3b	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2e3d	20 55 30	jsr $3055			jsr 	IFloatCheckZero
.2e40	f0 09		beq $2e4b			beq 	_IFIOutDigit
.2e42	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder
.2e44	48		pha				pha
.2e45	20 29 2e	jsr $2e29			jsr 	_IFIRecursiveConvert 		; convert the divider
.2e48	68		pla				pla
.2e49	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2e4b					_IFIOutDigit:
.2e4b	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2e4d	c9 0a		cmp #$0a			cmp	 	#10
.2e4f	90 02		bcc $2e53			bcc 	_IFINotHex
.2e51	69 06		adc #$06			adc 	#6
.2e53					_IFINotHex:
.2e53	69 30		adc #$30			adc 	#48
.2e55	20 ec 30	jsr $30ec			jsr 	IFloatBufferWrite
.2e58	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2e59					IFloatFloatToStringR0:
.2e59	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2e5b	20 ab 2f	jsr $2fab			jsr 	IFloatPushRx
.2e5e	20 fe 2f	jsr $2ffe			jsr 	IFloatCopyToRegister
.2e61	20 5c 2d	jsr $2d5c			jsr 	IFloatIntegerR0				; make R0 integer
.2e64	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2e66	20 fd 2d	jsr $2dfd			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2e69	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2e6c	a5 13		lda $13				lda 	IFR2+IExp 					; is integer.
.2e6e	29 3f		and #$3f			and 	#IFXMask
.2e70	f0 44		beq $2eb6			beq 	_IFFSExit
.2e72					_IFloatFracLoop:
.2e72	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2e74	20 ed 2f	jsr $2fed			jsr 	IFloatCopyFromRegister
.2e77	20 06 2d	jsr $2d06			jsr 	IFloatFractionalR0
.2e7a	20 93 30	jsr $3093			jsr 	IFloatNormalise
.2e7d	a2 10		ldx #$10			ldx 	#IFR2
.2e7f	20 fe 2f	jsr $2ffe			jsr 	IFloatCopyToRegister 		; copy to R2
.2e82	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2e84	a9 0a		lda #$0a			lda 	#10
.2e86	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.2e89	a2 10		ldx #$10			ldx 	#IFR2						; R0,R2 = R2 * 10
.2e8b	20 fc 2a	jsr $2afc			jsr 	IFloatMultiply
.2e8e	a2 10		ldx #$10			ldx 	#IFR2
.2e90	20 fe 2f	jsr $2ffe			jsr 	IFloatCopyToRegister
.2e93	20 5c 2d	jsr $2d5c			jsr 	IFloatIntegerR0 			; get integer part of R0
.2e96	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2e99	c9 03		cmp #$03			cmp 	#3
.2e9b	f0 16		beq $2eb3			beq 	_IFFSExitStripZero
.2e9d	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet ?
.2ea0	d0 05		bne $2ea7			bne 	_IFloatNotFirst
.2ea2	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2ea4	20 ec 30	jsr $30ec			jsr 	IFloatBufferWrite
.2ea7					_IFloatNotFirst:
.2ea7	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2eaa	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2eac	09 30		ora #$30			ora 	#"0"						; ASCII
.2eae	20 ec 30	jsr $30ec			jsr 	IFloatBufferWrite 			; write to the buffer.
.2eb1	80 bf		bra $2e72			bra 	_IFloatFracLoop
.2eb3					_IFFSExitStripZero:
.2eb3	20 fb 30	jsr $30fb			jsr 	IFloatStripTrailingZeros
.2eb6					_IFFSExit:
.2eb6	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2eb8	20 cc 2f	jsr $2fcc			jsr 	IFloatPullRx
.2ebb	20 e4 30	jsr $30e4			jsr 	IFloatGetBufferAddress
.2ebe	18		clc				clc
.2ebf	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2ec0					IFloatStringToFloatR0:
.2ec0	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2ec3	86 20		stx $20				stx 	iTemp0
.2ec5	84 21		sty $21				sty 	iTemp0+1
.2ec7	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2ec9	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.2ecc	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2ecf	20 5c 2f	jsr $2f5c			jsr 	IFSTFGetNext 				; get first
.2ed2	f0 1b		beq $2eef			beq 	_IFSTFFail 					; no character
.2ed4	90 10		bcc $2ee6			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2ed6	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2ed8	d0 15		bne $2eef			bne 	_IFSTFFail
.2eda	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2edc	8d dc 06	sta $06dc			sta 	IFSignFlag
.2edf					_IFSTFLoop:
.2edf	20 5c 2f	jsr $2f5c			jsr 	IFSTFGetNext 				; get next
.2ee2	b0 0b		bcs $2eef			bcs 	_IFSTFFail 					; bad character.
.2ee4	f0 11		beq $2ef7			beq 	_IFSTFExit 					; end of data
.2ee6					_IFSTFHaveChar:
.2ee6	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2ee8	f0 08		beq $2ef2			beq 	_IFSTFDecimal
.2eea	20 80 2f	jsr $2f80			jsr 	IFSTFAddR0 					; add number in
.2eed	80 f0		bra $2edf			bra 	_IFSTFLoop 					; keep going until . or end.
.2eef					_IFSTFFail:
.2eef	38		sec				sec
.2ef0	80 0d		bra $2eff			bra 	_IFSTFReturn
.2ef2					_IFSTFDecimal:
.2ef2	20 07 2f	jsr $2f07			jsr 	IFSTFDecimal 				; call the decimal places code.
.2ef5	b0 08		bcs $2eff			bcs 	_IFSTFReturn 				; error
.2ef7					_IFSTFExit:
.2ef7	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2ef9	0d dc 06	ora $06dc			ora 	IFSignFlag
.2efc	85 0b		sta $0b				sta 	IFR0+IExp
.2efe	18		clc				clc
.2eff					_IFSTFReturn:
.2eff	60		rts				rts
.2f00					IFloatAddDecimalToR0:
.2f00	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2f03	86 20		stx $20				stx 	iTemp0
.2f05	84 21		sty $21				sty 	iTemp0+1
.2f07					IFSTFDecimal:
.2f07	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2f09	20 ab 2f	jsr $2fab			jsr 	IFloatPushRx
.2f0c	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2f0e	20 5c 30	jsr $305c			jsr 	IFloatSetZero
.2f11	9c dd 06	stz $06dd			stz 	IFDecimalPlaces
.2f14					_IFSTDLoop:
.2f14	20 5c 2f	jsr $2f5c			jsr 	IFSTFGetNext 				; get next
.2f17	b0 41		bcs $2f5a			bcs 	_IFSTFFail2 				; bad character.
.2f19	f0 11		beq $2f2c			beq 	_IFSTFComplete 				; end of data, work out the result.
.2f1b	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2f1d	f0 39		beq $2f58			beq 	_IFSTFExit2
.2f1f	20 80 2f	jsr $2f80			jsr 	IFSTFAddR0 					; add number in
.2f22	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2f25	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2f28	c9 03		cmp #$03			cmp 	#3
.2f2a	90 e8		bcc $2f14			bcc 	_IFSTDLoop
.2f2c					_IFSTFComplete:
.2f2c	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2f2f	f0 27		beq $2f58			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2f31	3a		dec a				dec 	a 							; table indexed from 1.
.2f32	0a		asl a				asl 	a
.2f33	0a		asl a				asl 	a
.2f34	aa		tax				tax
.2f35	bd 97 2f	lda $2f97,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2f38	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2f3a	bd 98 2f	lda $2f98,x			lda 	TableTen+1,x
.2f3d	85 0d		sta $0d				sta  	IFR1+IM1
.2f3f	bd 99 2f	lda $2f99,x			lda 	TableTen+2,x
.2f42	85 0e		sta $0e				sta  	IFR1+IM2
.2f44	bd 9a 2f	lda $2f9a,x			lda 	TableTen+3,x
.2f47	85 0f		sta $0f				sta  	IFR1+IExp
.2f49	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2f4b	20 fc 2a	jsr $2afc			jsr 	IFloatMultiply
.2f4e	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop and add the decimal.
.2f50	20 cc 2f	jsr $2fcc			jsr 	IFloatPullRx
.2f53	a2 0c		ldx #$0c			ldx 	#IFR1
.2f55	20 52 2a	jsr $2a52			jsr 	IFloatAdd
.2f58					_IFSTFExit2:
.2f58	18		clc				clc
.2f59	60		rts				rts
.2f5a					_IFSTFFail2:
.2f5a	38		sec				sec
.2f5b	60		rts				rts
.2f5c					IFSTFGetNext:
.2f5c	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.2f5f	f0 19		beq $2f7a			beq 	_IFSTFReturnOk
.2f61	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.2f63	e6 20		inc $20				inc 	iTemp0 						; point at next.
.2f65	d0 02		bne $2f69			bne 	_IFSTFGNNoCarry
.2f67	e6 21		inc $21				inc 	iTemp0+1
.2f69					_IFSTFGNNoCarry:
.2f69	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.2f6c	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2f6e	f0 08		beq $2f78			beq 	_IFSTFGOkay
.2f70	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2f72	90 08		bcc $2f7c			bcc 	_IFSTFGFail
.2f74	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2f76	b0 04		bcs $2f7c			bcs 	_IFSTFGFail
.2f78					_IFSTFGOkay:
.2f78	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2f7a					_IFSTFReturnOk:
.2f7a	18		clc				clc
.2f7b	60		rts				rts
.2f7c					_IFSTFGFail:
.2f7c	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2f7e	38		sec				sec
.2f7f	60		rts				rts
.2f80					IFSTFAddR0:
.2f80	29 0f		and #$0f			and 	#15 						; to int value
.2f82	48		pha				pha 								; save it.
.2f83	a9 0a		lda #$0a			lda 	#10
.2f85	a2 0c		ldx #$0c			ldx 	#IFR1
.2f87	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.2f8a	20 fc 2a	jsr $2afc			jsr 	IFloatMultiply
.2f8d	68		pla				pla
.2f8e	a2 0c		ldx #$0c			ldx 	#IFR1
.2f90	20 5e 30	jsr $305e			jsr 	IFloatSetByte
.2f93	20 52 2a	jsr $2a52			jsr 	IFloatAdd
.2f96	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.2f97					TableTen:
>2f97	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2f9b	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2f9f	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2fa3	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2fa7	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2fab					IFloatPushRx:
.2fab	5a		phy				phy
.2fac	ac de 06	ldy $06de			ldy 	IFStackIndex
.2faf	b5 00		lda $00,x			lda 	IM0,x
.2fb1	99 df 06	sta $06df,y			sta 	IFStack,y
.2fb4	b5 01		lda $01,x			lda 	IM1,x
.2fb6	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.2fb9	b5 02		lda $02,x			lda 	IM2,x
.2fbb	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.2fbe	b5 03		lda $03,x			lda 	IExp,x
.2fc0	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.2fc3	c8		iny				iny
.2fc4	c8		iny				iny
.2fc5	c8		iny				iny
.2fc6	c8		iny				iny
.2fc7	8c de 06	sty $06de			sty 	IFStackIndex
.2fca	7a		ply				ply
.2fcb	60		rts				rts
.2fcc					IFloatPullRx:
.2fcc	5a		phy				phy
.2fcd	ac de 06	ldy $06de			ldy 	IFStackIndex
.2fd0	88		dey				dey
.2fd1	88		dey				dey
.2fd2	88		dey				dey
.2fd3	88		dey				dey
.2fd4	b9 df 06	lda $06df,y			lda 	IFStack,y
.2fd7	95 00		sta $00,x			sta 	IM0,x
.2fd9	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.2fdc	95 01		sta $01,x			sta 	IM1,x
.2fde	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.2fe1	95 02		sta $02,x			sta 	IM2,x
.2fe3	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.2fe6	95 03		sta $03,x			sta 	IExp,x
.2fe8	8c de 06	sty $06de			sty 	IFStackIndex
.2feb	7a		ply				ply
.2fec	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.2fed					IFloatCopyFromRegister:
.2fed	b5 00		lda $00,x			lda 	0,x
.2fef	85 08		sta $08				sta 	IFR0
.2ff1	b5 01		lda $01,x			lda 	1,x
.2ff3	85 09		sta $09				sta 	IFR0+1
.2ff5	b5 02		lda $02,x			lda 	2,x
.2ff7	85 0a		sta $0a				sta 	IFR0+2
.2ff9	b5 03		lda $03,x			lda 	3,x
.2ffb	85 0b		sta $0b				sta 	IFR0+3
.2ffd	60		rts				rts
.2ffe					IFloatCopyToRegister:
.2ffe	a5 08		lda $08				lda 	IFR0
.3000	95 00		sta $00,x			sta 	0,x
.3002	a5 09		lda $09				lda 	IFR0+1
.3004	95 01		sta $01,x			sta 	1,x
.3006	a5 0a		lda $0a				lda 	IFR0+2
.3008	95 02		sta $02,x			sta 	2,x
.300a	a5 0b		lda $0b				lda 	IFR0+3
.300c	95 03		sta $03,x			sta 	3,x
.300e	60		rts				rts
.300f					IFloatLoadInline:
.300f	68		pla				pla 								; pop address off to iTemp0
.3010	85 20		sta $20				sta 	iTemp0
.3012	68		pla				pla
.3013	85 21		sta $21				sta 	iTemp0+1
.3015	a0 01		ldy #$01			ldy 	#1
.3017	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.3019	95 00		sta $00,x			sta 	0,x
.301b	c8		iny				iny
.301c	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.301e	95 01		sta $01,x			sta 	1,x
.3020	c8		iny				iny
.3021	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.3023	95 02		sta $02,x			sta 	2,x
.3025	c8		iny				iny
.3026	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.3028	95 03		sta $03,x			sta 	3,x
.302a	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.302b	a5 20		lda $20				lda 	iTemp0
.302d	69 05		adc #$05			adc 	#5
.302f	85 20		sta $20				sta 	iTemp0
.3031	90 02		bcc $3035			bcc 	_IFLINoCarry
.3033	e6 21		inc $21				inc 	iTemp0+1
.3035					_IFLINoCarry:
.3035	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3038					IFloatMultiply8BitRx:
.3038	5a		phy		        phy
.3039	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.303b	a4 08		ldy $08		        ldy     IFR0+IM0
.303d	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.303e	85 08		sta $08		        sta     IFR0+IM0
.3040	84 09		sty $09		        sty     IFR0+IM1
.3042	a9 00		lda #$00	        lda     #0
.3044	a0 08		ldy #$08	        ldy     #8
.3046					_IFMLoop:
.3046	90 03		bcc $304b	        bcc     _IFMNoAdd
.3048	18		clc		        clc
.3049	65 09		adc $09		        adc     IFR0+IM1
.304b					_IFMNoAdd:
.304b	6a		ror a		        ror     a
.304c	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.304e	88		dey		        dey
.304f	d0 f5		bne $3046	        bne     _IFMLoop
.3051	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3053	7a		ply		        ply
.3054	60		rts		        rts
.3055					IFloatCheckZero:
.3055	b5 00		lda $00,x			lda 	IM0,x
.3057	15 01		ora $01,x			ora 	IM1,x
.3059	15 02		ora $02,x			ora 	IM2,x
.305b	60		rts				rts
.305c					IFloatSetZero:
.305c	a9 00		lda #$00			lda 	#0
.305e					IFloatSetByte:
.305e	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.3060	74 01		stz $01,x			stz 	IM1,x
.3062	74 02		stz $02,x			stz 	IM2,x
.3064	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3066	60		rts				rts
.3067					IFloatNegate:
.3067	b5 03		lda $03,x			lda 	IExp,x
.3069	49 40		eor #$40			eor 	#IFSign
.306b	95 03		sta $03,x			sta 	IExp,x
.306d	18		clc				clc
.306e	60		rts				rts
.306f					IFloatMantissaNegate:
.306f	38		sec				sec
.3070	a9 00		lda #$00			lda 	#0
.3072	f5 00		sbc $00,x			sbc 	IM0,x
.3074	95 00		sta $00,x			sta 	IM0,x
.3076	a9 00		lda #$00			lda 	#0
.3078	f5 01		sbc $01,x			sbc 	IM1,x
.307a	95 01		sta $01,x			sta 	IM1,x
.307c	a9 00		lda #$00			lda 	#0
.307e	f5 02		sbc $02,x			sbc 	IM2,x
.3080	95 02		sta $02,x			sta 	IM2,x
.3082	60		rts				rts
.3083					IFloatShiftLeft:
.3083	18		clc				clc
.3084					IFloatRotateLeft:
.3084	36 00		rol $00,x			rol 	IM0,x
.3086	36 01		rol $01,x			rol 	IM1,x
.3088	36 02		rol $02,x			rol 	IM2,x
.308a	60		rts				rts
.308b					IFloatShiftRight:
.308b	18		clc				clc
.308c					IFloatRotateRight:
.308c	76 02		ror $02,x			ror 	IM2,x
.308e	76 01		ror $01,x			ror 	IM1,x
.3090	76 00		ror $00,x			ror 	IM0,x
.3092	60		rts				rts
.3093					IFloatNormalise:
.3093	20 55 30	jsr $3055			jsr 	IFloatCheckZero 			; is it zero
.3096	f0 18		beq $30b0			beq 	_IFNExitZero 				; if so exit
.3098					_IFNLoop:
.3098	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.309a	29 c0		and #$c0			and 	#$C0
.309c	c9 40		cmp #$40			cmp 	#$40
.309e	f0 13		beq $30b3			beq 	_IFNExitOkay 				; if so , then we are done.
.30a0	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.30a2	29 3f		and #$3f			and 	#$3F
.30a4	c9 20		cmp #$20			cmp 	#$20
.30a6	f0 0b		beq $30b3			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.30a8	20 c9 30	jsr $30c9			jsr 	IFloatDecExponent
.30ab	20 83 30	jsr $3083			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.30ae	80 e8		bra $3098			bra 	_IFNLoop
.30b0					_IFNExitZero:
.30b0	20 5c 30	jsr $305c			jsr 	IFloatSetZero 				; set the result to zero
.30b3					_IFNExitOkay:
.30b3	18		clc				clc  								; return with CC.
.30b4	60		rts				rts
.30b5					IFloatIncExponent:
.30b5	b5 03		lda $03,x			lda 	IExp,x
.30b7	48		pha				pha
.30b8	29 c0		and #$c0			and 	#$C0
.30ba	8d 1f 07	sta $071f			sta 	IFXTemp
.30bd	68		pla				pla
.30be	1a		inc a				inc 	a
.30bf	29 3f		and #$3f			and 	#$3F
.30c1	48		pha				pha
.30c2	0d 1f 07	ora $071f			ora 	IFXTemp
.30c5	95 03		sta $03,x			sta 	IExp,x
.30c7	68		pla				pla
.30c8	60		rts				rts
.30c9					IFloatDecExponent:
.30c9	b5 03		lda $03,x			lda 	IExp,x
.30cb	48		pha				pha
.30cc	29 c0		and #$c0			and 	#$C0
.30ce	8d 1f 07	sta $071f			sta 	IFXTemp
.30d1	68		pla				pla
.30d2	3a		dec a				dec 	a
.30d3	29 3f		and #$3f			and 	#$3F
.30d5	48		pha				pha
.30d6	0d 1f 07	ora $071f			ora 	IFXTemp
.30d9	95 03		sta $03,x			sta 	IExp,x
.30db	68		pla				pla
.30dc	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.30dd					IFloatBufferReset:
.30dd	9c 20 07	stz $0720			stz 	IFBufferCount
.30e0	9c 21 07	stz $0721			stz 	IFBuffer
.30e3	60		rts				rts
.30e4					IFloatGetBufferAddress:
.30e4	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.30e6	a2 21		ldx #$21			ldx 	#(IFBuffer & $FF)
.30e8	ad 20 07	lda $0720			lda 	IFBufferCount
.30eb	60		rts				rts
.30ec					IFloatBufferWrite:
.30ec	da		phx				phx
.30ed	ae 20 07	ldx $0720			ldx 	IFBufferCount
.30f0	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.30f3	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.30f6	ee 20 07	inc $0720			inc 	IFBufferCount
.30f9	fa		plx				plx
.30fa	60		rts				rts
.30fb					IFloatStripTrailingZeros:
.30fb	ae 20 07	ldx $0720			ldx 	IFBufferCount
.30fe	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.3101	c9 30		cmp #$30			cmp		#"0"
.3103	d0 0f		bne $3114			bne 	_IFSTExit
.3105	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.3108	c9 2e		cmp #$2e			cmp 	#"."
.310a	f0 08		beq $3114			beq 	_IFSTExit
.310c	ce 20 07	dec $0720			dec 	IFBufferCount
.310f	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.3112	80 e7		bra $30fb			bra 	IFloatStripTrailingZeros
.3114					_IFSTExit:
.3114	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.3115					IFloatCheck:
.3115	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative
.3117	09 40		ora #$40			ora 	#IFSign
.3119	85 0b		sta $0b				sta 	IFR0+IExp
.311b	20 52 2a	jsr $2a52			jsr 	IFloatAdd 					; add allowed to error.
.311e	a2 08		ldx #$08			ldx 	#IFR0
.3120	20 55 30	jsr $3055			jsr 	IFloatCheckZero 			; error if < 0
.3123	f0 06		beq $312b			beq 	_IFAOkay
.3125	a5 0b		lda $0b				lda 	IFR0+IExp
.3127	29 40		and #$40			and 	#IFSign
.3129	d0 01		bne $312c			bne 	_IFAFail
.312b					_IFAOkay:
.312b	60		rts				rts
.312c					_IFAFail:
.312c	38		sec				sec
.312d	68		pla				pla 								; get address - 2
.312e	e9 02		sbc #$02			sbc 	#2
.3130	aa		tax				tax
.3131	68		pla				pla
.3132	e9 00		sbc #$00			sbc 	#0
.3134	a8		tay				tay
.3135	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3137					_IFAStop:
>3137	db						.byte 	$DB 						; display an error AA ADR ADR
.3138	80 fd		bra $3137			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
