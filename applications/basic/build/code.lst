
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Sat Jun  3 15:01:58 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=$6000					startMemory = $6000
=$a000					endMemory = $A000
=2					stackPages = 2

;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe5					OSGetScreenSize          = $ffe5 ; Get size of screen to XY
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeyboardWithCursor = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1)
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadDevice             = $fff4 ; Read device X to A
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#startMemory >> 8
.1002	a0 a0		ldy #$a0			ldy 	#endMemory >> 8
.1004	20 d0 1c	jsr $1cd0			jsr 	PGMSetBaseAddress
.1007	20 c1 25	jsr $25c1			jsr 	IFInitialise
.100a	4c a1 12	jmp $12a1			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c d9 21	jmp $21d9		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 e3 1c	jsr $1ce3			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 60 25	jsr $2560			jsr 	VARClearHashTables
.1028	ad 47 03	lda $0347			lda 	PGMEndMemoryHigh
.102b	20 44 23	jsr $2344			jsr 	StackReset
.102e	20 a3 23	jsr $23a3			jsr 	StringSystemInitialise
.1031	60		rts				rts
.1032					AllocateMemory:
.1032	5a		phy				phy 								; save Y
.1033	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.1035	5a		phy				phy
.1036	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1038	5a		phy				phy
.1039	a8		tay				tay 								; count is now in XY
.103a					_AllocateLoop:
.103a	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103c	d0 04		bne $1042			bne 	_AllocateOne
.103e	c0 00		cpy #$00			cpy 	#0
.1040	f0 15		beq $1057			beq 	_AllocateExit
.1042					_AllocateOne:
.1042	a9 00		lda #$00			lda 	#0 							; zero byte
.1044	92 24		sta ($24)			sta 	(freeMemory)
.1046	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1048	d0 05		bne $104f			bne 	_AllocateSkipCarry
.104a	e6 25		inc $25				inc 	freeMemory+1
.104c	20 5b 10	jsr $105b			jsr 	ClearCheckMemory
.104f					_AllocateSkipCarry:
.104f	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1051	d0 01		bne $1054			bne 	_AllocateSkipBorrow
.1053	ca		dex				dex
.1054					_AllocateSkipBorrow:
.1054	88		dey				dey
.1055	80 e3		bra $103a			bra 	_AllocateLoop
.1057					_AllocateExit:
.1057	fa		plx				plx 								; restore address
.1058	68		pla				pla
.1059	7a		ply				ply 								; restore Y
.105a	60		rts				rts
.105b					ClearCheckMemory:
.105b	a5 25		lda $25				lda 	freeMemory+1
.105d	1a		inc a				inc 	a
.105e	1a		inc a				inc 	a
.105f	cd 4f 04	cmp $044f			cmp 	stringMemory+1
.1062	b0 01		bcs $1065			bcs  	_CCMError
.1064	60		rts				rts
.1065					_CCMError:
.1065	4c 6b 22	jmp $226b		jmp	ErrorV_memory
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1068					CommandDIM:
.1068	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check identifier follows.
.106a	29 c0		and #$c0			and 	#$C0
.106c	c9 40		cmp #$40			cmp 	#$40
.106e	d0 39		bne $10a9			bne 	_CDSyntax
.1070	20 17 25	jsr $2517			jsr 	VARGetInfo 					; get information
.1073	ad 55 04	lda $0455			lda 	VARType 					; check array.
.1076	29 02		and #$02			and 	#2
.1078	f0 2f		beq $10a9			beq 	_CDSyntax
.107a	20 c9 24	jsr $24c9			jsr 	VARFind 					; does it already exist
.107d	b0 2d		bcs $10ac			bcs 	_CDExists
.107f	20 75 24	jsr $2475			jsr 	VARCreate 					; create it - returns data ptr in XA
.1082	da		phx				phx 								; save target address
.1083	48		pha				pha
.1084	ad 55 04	lda $0455			lda 	VARType 					; type ID.
.1087	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1089	20 af 10	jsr $10af			jsr 	CreateArray 				; create array to XA
.108c	84 20		sty $20				sty 	zTemp1 						; save Y
.108e	7a		ply				ply 								; restore target to zTemp0
.108f	84 1e		sty $1e				sty 	zTemp0
.1091	7a		ply				ply
.1092	84 1f		sty $1f				sty 	zTemp0+1
.1094	92 1e		sta ($1e)			sta 	(zTemp0) 					; save new array
.1096	a0 01		ldy #$01			ldy 	#1
.1098	8a		txa				txa
.1099	91 1e		sta ($1e),y			sta 	(zTemp0),y
.109b	a4 20		ldy $20				ldy 	zTemp1 						; restore zTemp1
.109d	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 				; check )
.10a0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10a2	c8		iny				iny
.10a3	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a5	f0 c1		beq $1068			beq 	CommandDIM
.10a7	88		dey				dey
.10a8	60		rts				rts
.10a9					_CDSyntax:
.10a9	4c 88 21	jmp $2188		jmp	ErrorV_syntax
.10ac					_CDExists:
.10ac	4c 45 22	jmp $2245		jmp	ErrorV_redefine
.10af					CreateArray:
.10af	8d 3a 03	sta $033a			sta 	CAType						; save type
.10b2	20 dc 14	jsr $14dc			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10b5	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10b7	c9 99		cmp #$99			cmp 	#PR_COMMA
.10b9	f0 04		beq $10bf			beq 	_CATwoDimensions
.10bb	20 0b 11	jsr $110b			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10be	60		rts				rts
.10bf					_CATwoDimensions:
.10bf	a5 0d		lda $0d				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10c1	8d 3c 03	sta $033c			sta 	CADim1+1
.10c4	a5 0c		lda $0c				lda 	IFR0+IM0
.10c6	8d 3b 03	sta $033b			sta 	CADim1+0
.10c9	20 dd 22	jsr $22dd			jsr 	ERRCheckComma 				; check comma
.10cc	20 dc 14	jsr $14dc			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10cf	5a		phy				phy 								; save Y position
.10d0	18		clc				clc 								; allocate the outer array of pointers.
.10d1	ae 3c 03	ldx $033c			ldx 	CADim1+1
.10d4	ad 3b 03	lda $033b			lda 	CADim1
.10d7	20 4a 11	jsr $114a			jsr 	CSAAllocate 				; allocate the outer array
.10da	da		phx				phx									; save this address on the stack
.10db	48		pha				pha
.10dc	86 23		stx $23				stx 	zTemp2+1					; and in zTemp2
.10de	85 22		sta $22				sta 	zTemp2
.10e0					_CACreateSubLoop:
.10e0	38		sec				sec
.10e1	20 0b 11	jsr $110b			jsr 	CreateSingleArray 			; create data array of required size.
.10e4	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10e6	91 22		sta ($22),y			sta 	(zTemp2),y
.10e8	8a		txa				txa
.10e9	c8		iny				iny
.10ea	91 22		sta ($22),y			sta 	(zTemp2),y
.10ec	18		clc				clc  								; next slot.
.10ed	a5 22		lda $22				lda 	zTemp2
.10ef	69 02		adc #$02			adc 	#2
.10f1	85 22		sta $22				sta 	zTemp2
.10f3	90 02		bcc $10f7			bcc 	_CACNoCarry
.10f5	e6 23		inc $23				inc 	zTemp2+1
.10f7					_CACNoCarry:
.10f7	ad 3b 03	lda $033b			lda 	CADim1 						; use DIM1 as a counter
.10fa	d0 03		bne $10ff			bne 	_CACNoBorrow
.10fc	ce 3c 03	dec $033c			dec 	CADim1+1
.10ff					_CACNoBorrow:
.10ff	ce 3b 03	dec $033b			dec 	CADim1
.1102	ad 3c 03	lda $033c			lda 	CADim1+1 					; but do one more.
.1105	10 d9		bpl $10e0			bpl 	_CACreateSubLoop
.1107	68		pla				pla
.1108	fa		plx				plx
.1109	7a		ply				ply
.110a	60		rts				rts
.110b					CreateSingleArray:
.110b	5a		phy				phy
.110c	38		sec				sec 								; allocate memory block all zeros.
.110d	a5 0c		lda $0c				lda 	IFR0+IM0
.110f	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1111	20 4a 11	jsr $114a			jsr 	CSAAllocate
.1114	ac 3a 03	ldy $033a			ldy 	CAType 						; if numbers, we don't need to initialise.
.1117	f0 2f		beq $1148			beq 	_CSANoInit
.1119	da		phx				phx 								; save address of new array
.111a	48		pha				pha
.111b	85 1e		sta $1e				sta 	zTemp0 						; address in zTemp0
.111d	86 1f		stx $1f				stx 	zTemp0+1
.111f	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1121	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1123	a8		tay				tay
.1124	b2 1e		lda ($1e)			lda 	(zTemp0)
.1126	aa		tax				tax
.1127					_CSAEraseString:
.1127	5a		phy				phy
.1128	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.112a	a9 80		lda #$80			lda 	#$80
.112c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.112e	7a		ply				ply
.112f	18		clc				clc 								; add 4 to next slot.
.1130	a5 1e		lda $1e				lda 	zTemp0
.1132	69 04		adc #$04			adc 	#4
.1134	85 1e		sta $1e				sta 	zTemp0
.1136	90 02		bcc $113a			bcc 	_CSAENoCarry
.1138	e6 1f		inc $1f				inc 	zTemp0+1
.113a					_CSAENoCarry:
.113a	e0 00		cpx #$00			cpx 	#0
.113c	d0 01		bne $113f			bne 	_CSANoBorrow
.113e	88		dey				dey
.113f					_CSANoBorrow:
.113f	ca		dex				dex
.1140	d0 e5		bne $1127			bne 	_CSAEraseString
.1142	c0 00		cpy #$00			cpy 	#0
.1144	d0 e1		bne $1127			bne 	_CSAEraseString
.1146	68		pla				pla
.1147	fa		plx				plx
.1148					_CSANoInit:
.1148	7a		ply				ply
.1149	60		rts				rts
.114a					CSAAllocate:
.114a	08		php				php 								; save type flag.
.114b	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.114c	d0 01		bne $114f			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.114e	e8		inx				inx
.114f					_CSAANoCarry:
.114f	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1151	b0 2e		bcs $1181			bcs 	_CSARange
.1153	28		plp				plp 								; restore type flag
.1154	08		php				php 								; save it back again.
.1155	da		phx				phx 								; save size.
.1156	48		pha				pha
.1157	86 1f		stx $1f				stx  	zTemp0+1 					; now in ztemp0+1:X
.1159	90 03		bcc $115e			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.115b	0a		asl a				asl 	a
.115c	26 1f		rol $1f				rol 	zTemp0+1
.115e					_CSAATimes2:
.115e	0a		asl a				asl 	a
.115f	26 1f		rol $1f				rol 	zTemp0+1
.1161	18		clc				clc
.1162	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1164	90 02		bcc $1168			bcc 	_CSAANoCarry2
.1166	e6 1f		inc $1f				inc 	zTemp0+1
.1168					_CSAANoCarry2:
.1168	a6 1f		ldx $1f				ldx 	zTemp0+1 					; XA is the bytes required.
.116a	20 32 10	jsr $1032			jsr 	AllocateMemory 				; allocate memory to XA
.116d	86 1f		stx $1f				stx 	zTemp0+1 					; save pointers
.116f	85 1e		sta $1e				sta 	zTemp0
.1171	68		pla				pla  								; write element count to first 2 bytes
.1172	92 1e		sta ($1e)			sta 	(zTemp0)
.1174	68		pla				pla 								; msb of element count
.1175	28		plp				plp 								; CC if pointer array
.1176	b0 02		bcs $117a			bcs 	_CSAAIsData
.1178	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.117a					_CSAAIsData:
.117a	a0 01		ldy #$01			ldy 	#1
.117c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.117e	a5 1e		lda $1e				lda 	zTemp0 						; fix XA back up again
.1180	60		rts				rts
.1181					_CSARange:
.1181	4c 98 21	jmp $2198		jmp	ErrorV_range
.033a					CAType:
>033a							.fill 	1
.033b					CADim1:
>033b							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.1184					Command_Doke:
.1184	38		sec				sec
.1185	80 01		bra $1188			bra 	DPCommon
.1187					Command_Poke:
.1187	18		clc				clc
.1188					DPCommon:
.1188	08		php				php 								; CS if DOKE
.1189	20 dc 14	jsr $14dc			jsr 	EXPEvalInteger16 			; address
.118c	a5 0c		lda $0c				lda 	IFR0+IM0 					; push on stack
.118e	48		pha				pha
.118f	a5 0d		lda $0d				lda 	IFR0+IM1
.1191	48		pha				pha
.1192	20 dd 22	jsr $22dd			jsr 	ERRCheckComma 				; [dp]oke address,data
.1195	20 dc 14	jsr $14dc			jsr 	EXPEvalInteger16
.1198	68		pla				pla 								; get address back
.1199	85 1f		sta $1f				sta 	zTemp0+1
.119b	68		pla				pla
.119c	85 1e		sta $1e				sta 	zTemp0
.119e	a5 0c		lda $0c				lda 	IFR0+IM0
.11a0	92 1e		sta ($1e)			sta 	(zTemp0)
.11a2	28		plp				plp
.11a3	90 08		bcc $11ad			bcc 	_DPExit
.11a5	5a		phy				phy
.11a6	a5 0d		lda $0d				lda 	IFR0+IM1
.11a8	a0 01		ldy #$01			ldy 	#1
.11aa	91 1e		sta ($1e),y			sta 	(zTemp0),y
.11ac	7a		ply				ply
.11ad					_DPExit:
.11ad	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11ae					Command_Print:
.11ae					Command_IP_Main:
.11ae	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11af					_CPLoop:
.11af	08		php				php 								; save last action flag
.11b0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.11b2	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11b4	f0 3e		beq $11f4			beq 	_CPExit 					; without consuming
.11b6	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11b8	f0 3a		beq $11f4			beq 	_CPExit
.11ba	68		pla				pla 								; throw last action flag
.11bb	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.11bd	c8		iny				iny
.11be	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11c0	f0 2f		beq $11f1			beq 	_CPContinueWithSameLine
.11c2	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11c4	f0 26		beq $11ec			beq 	_CPTab
.11c6	88		dey				dey 								; undo the get.
.11c7	20 8a 14	jsr $148a			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11ca	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.11cc	10 14		bpl $11e2			bpl 	_CPNumber
.11ce	5a		phy				phy
.11cf	18		clc				clc 								; string address to YX
.11d0	a5 0c		lda $0c				lda 	IFR0+IM0
.11d2	aa		tax				tax
.11d3	a5 0d		lda $0d				lda 	IFR0+IM1
.11d5	a8		tay				tay
.11d6	e8		inx				inx 								; point to 1st character
.11d7	d0 01		bne $11da			bne 	_CPNoCarry
.11d9	c8		iny				iny
.11da					_CPNoCarry:
.11da	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.11dc	20 fd 11	jsr $11fd			jsr 	CPPrintAYX 					; print AYX
.11df	7a		ply				ply
.11e0	80 cc		bra $11ae			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11e2					_CPNumber:
.11e2	5a		phy				phy
.11e3	20 d3 29	jsr $29d3			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11e6	20 fd 11	jsr $11fd			jsr 	CPPrintAYX 					; print AYX
.11e9	7a		ply				ply
.11ea	80 c2		bra $11ae			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11ec					_CPTab:
.11ec	a9 09		lda #$09			lda 	#9 							; print TAB
.11ee	20 10 12	jsr $1210			jsr 	CPPrintA
.11f1					_CPContinueWithSameLine:
.11f1	38		sec				sec 								; loop round with carry set, which
.11f2	80 bb		bra $11af			bra 	_CPLoop 					; will inhibit final CR
.11f4					_CPExit:
.11f4	28		plp				plp 								; get last action flag
.11f5	b0 05		bcs $11fc			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11f7	a9 0d		lda #$0d			lda 	#13 						; print new line
.11f9	20 10 12	jsr $1210			jsr 	CPPrintA
.11fc					_CPExit2:
.11fc	60		rts				rts
.11fd					CPPrintAYX:
.11fd	86 1e		stx $1e				stx 	zTemp0
.11ff	84 1f		sty $1f				sty 	zTemp0+1
.1201	aa		tax				tax
.1202	f0 0b		beq $120f			beq 	_CPPrintExit
.1204	a0 00		ldy #$00			ldy 	#0
.1206					_CPPrintAYXLoop:
.1206	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1208	20 10 12	jsr $1210			jsr 	CPPrintA
.120b	c8		iny				iny
.120c	ca		dex				dex
.120d	d0 f7		bne $1206			bne 	_CPPrintAYXLoop
.120f					_CPPrintExit:
.120f	60		rts				rts
.1210					CPPrintA:
.1210	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1213					CommandLET:
.1213	20 52 15	jsr $1552			jsr 	EXPTermR0 					; get term
.1216	90 6d		bcc $1285			bcc 	_CLError 					; must be a reference term.
.1218	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.121a	48		pha				pha
.121b	a5 0d		lda $0d				lda 	IFR0+IM1
.121d	48		pha				pha
.121e	a5 0f		lda $0f				lda 	IFR0+IExp
.1220	48		pha				pha
.1221	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1223	20 e5 22	jsr $22e5			jsr 	ERRCheckA
.1226	20 8a 14	jsr $148a			jsr 	EXPEvaluateExpression 		; right hand side.
.1229	68		pla				pla 								; type of l-expr
.122a	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.122c	30 5a		bmi $1288			bmi 	_CLType
.122e	fa		plx				plx 	 							; pop target address to zTemp0
.122f	86 1f		stx $1f				stx 	zTemp0+1
.1231	fa		plx				plx
.1232	86 1e		stx $1e				stx 	zTemp0
.1234	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.1236	30 15		bmi $124d			bmi 	_CLStringAssign
.1238	5a		phy				phy
.1239	a0 03		ldy #$03			ldy 	#3
.123b	91 1e		sta ($1e),y			sta 	(zTemp0),y
.123d	88		dey				dey
.123e	a5 0e		lda $0e				lda 	IFR0+IM2
.1240	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1242	88		dey				dey
.1243	a5 0d		lda $0d				lda 	IFR0+IM1
.1245	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1247	a5 0c		lda $0c				lda 	IFR0+IM0
.1249	92 1e		sta ($1e)			sta 	(zTemp0)
.124b	7a		ply				ply
.124c	60		rts				rts
.124d					_CLStringAssign:
.124d	5a		phy				phy
.124e	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1250	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1252	12 1e		ora ($1e)			ora 	(zTemp0)
.1254	f0 23		beq $1279			beq 	_CLConcreteString
.1256	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1258	85 20		sta $20				sta 	zTemp1
.125a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.125c	85 21		sta $21				sta 	zTemp1+1
.125e	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.1260	38		sec				sec 								; we want 3 for slot size, status, string size.
.1261	e9 03		sbc #$03			sbc 	#3
.1263	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.1265	90 12		bcc $1279			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1267	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1269	1a		inc a				inc 	a
.126a	aa		tax				tax
.126b	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.126d					_CLReplaceString:
.126d	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.126f	c8		iny				iny
.1270	c8		iny				iny
.1271	91 20		sta ($20),y			sta 	(zTemp1),y
.1273	88		dey				dey
.1274	ca		dex				dex
.1275	d0 f6		bne $126d			bne 	_CLReplaceString
.1277	80 0a		bra $1283			bra 	_CLExit
.1279					_CLConcreteString:
.1279	20 58 23	jsr $2358			jsr 	StringConcrete  			; concreted string in XA.
.127c	a0 01		ldy #$01			ldy 	#1 							; store the address
.127e	92 1e		sta ($1e)			sta 	(zTemp0)
.1280	8a		txa				txa
.1281	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1283					_CLExit:
.1283	7a		ply				ply
.1284	60		rts				rts
.1285					_CLError:
.1285	4c ab 22	jmp $22ab		jmp	ErrorV_variable
.1288					_CLType:
.1288	4c b5 21	jmp $21b5		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.128b					Command_NEW:
.128b	20 d7 1c	jsr $1cd7			jsr 	PGMNewProgram
.128e	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1291	4c ee 12	jmp $12ee			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1294					Command_REM:
.1294					Command_REM2:
.1294	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1296	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1298	d0 06		bne $12a0			bne 	_CRExit
.129a	c8		iny				iny 								; skip over it, it's a comment.
.129b	98		tya				tya
.129c	38		sec				sec
.129d	71 1c		adc ($1c),y			adc 	(codePtr),y
.129f	a8		tay				tay
.12a0					_CRExit:
.12a0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.12a1					Command_RUN:
.12a1	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.12a4	ad 46 03	lda $0346			lda 	PGMBaseHigh 				; back to the program start
.12a7	85 1d		sta $1d				sta 	codePtr+1
.12a9	64 1c		stz $1c				stz 	codePtr
.12ab	80 0b		bra $12b8			bra 	RUNNewLine
.12ad					RUNEndOfLine:
.12ad	18		clc				clc 								; advance to next line.
.12ae	b2 1c		lda ($1c)			lda 	(codePtr)
.12b0	65 1c		adc $1c				adc 	codePtr
.12b2	85 1c		sta $1c				sta 	codePtr
.12b4	90 02		bcc $12b8			bcc 	_RELNoCarry
.12b6	e6 1d		inc $1d				inc 	codePtr+1
.12b8					_RELNoCarry:
.12b8					RUNNewLine:
.12b8	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.12ba	9a		txs				txs
.12bb	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.12bd	f0 2f		beq $12ee			beq 	Command_END
.12bf	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.12c1					RUNNewCommand:
.12c1	9c 4d 04	stz $044d			stz 	stringInitialised 			; reset string system.
.12c4	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.12c6	10 1a		bpl $12e2			bpl		_RUNNotToken 				; probably an identifier
.12c8	c8		iny				iny 								; consume token
.12c9	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.12cb	f0 f4		beq $12c1			beq 	RUNNewCommand
.12cd	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.12cf	b0 0e		bcs $12df			bcs 	_RUNSyntax
.12d1	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.12d3	90 0a		bcc $12df			bcc 	_RUNSyntax
.12d5	0a		asl a				asl 	a 							; double into X.
.12d6	aa		tax				tax
.12d7	20 dc 12	jsr $12dc			jsr 	_RUNDispatchMain			; call the main dispatcher
.12da	80 e5		bra $12c1			bra 	RUNNewCommand
.12dc					_RUNDispatchMain:
.12dc	7c ed 19	jmp ($19ed,x)			jmp 	(VectorTable,x)
.12df					_RUNSyntax:
.12df	4c 88 21	jmp $2188		jmp	ErrorV_syntax
.12e2					_RUNNotToken:
.12e2	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.12e4	90 f9		bcc $12df			bcc 	_RUNSyntax
.12e6	20 13 12	jsr $1213			jsr 	CommandLET 					; assignment
.12e9	80 d6		bra $12c1			bra 	RUNNewCommand 				; loop round.
.12eb					Command_Shift_Handler:
.12eb	4c c6 21	jmp $21c6		jmp	ErrorV_unimplemented
.12ee					Command_END:
.12ee	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.12f1					Command_STOP:
.12f1	4c 23 22	jmp $2223		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.12f4					Command_Sys:
>12f4	db						.byte 	$DB
.12f5	20 dc 14	jsr $14dc			jsr 	EXPEvalInteger16 			; execution address
.12f8	5a		phy				phy
.12f9	ad 98 04	lda $0498			lda 	('A'-'A')*4 + FastVariables ; load AXY
.12fc	ae f4 04	ldx $04f4			ldx 	('X'-'A')*4 + FastVariables
.12ff	ac f8 04	ldy $04f8			ldy 	('Y'-'A')*4 + FastVariables
.1302	20 07 13	jsr $1307			jsr 	_CSCallIFR0 				; call the code
.1305	7a		ply				ply
.1306	60		rts				rts
.1307					_CSCallIFR0:
.1307	6c 0c 00	jmp ($000c)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.130a					NoExec01:
.130a					NoExec02:
.130a					NoExec03:
.130a					NoExec04:
.130a					NoExec05:
.130a					NoExec06:
.130a					NoExec07:
.130a					NoExec08:
.130a	4c 88 21	jmp $2188		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.130d					EXPBinAdd:
.130d	24 0f		bit $0f				bit 	IFR0+IExp
.130f	30 6f		bmi $1380			bmi 	EXPConcatenate
.1311	a2 10		ldx #$10			ldx 	#IFR1
.1313	4c cc 25	jmp $25cc			jmp 	IFloatAdd
.1316					EXPBinSub:
.1316	24 0f		bit $0f				bit 	IFR0+IExp
.1318	30 3f		bmi $1359			bmi 	EXPTypeError
.131a	a2 10		ldx #$10			ldx 	#IFR1
.131c	4c c5 25	jmp $25c5			jmp 	IFloatSubtract
.131f					EXPBinMul:
.131f	24 0f		bit $0f				bit 	IFR0+IExp
.1321	30 36		bmi $1359			bmi 	EXPTypeError
.1323	a2 10		ldx #$10			ldx 	#IFR1
.1325	4c 76 26	jmp $2676			jmp 	IFloatMultiply
.1328					EXPBinFDiv:
.1328	24 0f		bit $0f				bit 	IFR0+IExp
.132a	30 2d		bmi $1359			bmi 	EXPTypeError
.132c	a2 10		ldx #$10			ldx 	#IFR1
.132e	20 f9 28	jsr $28f9			jsr 	IFloatDivideFloat
.1331	b0 0f		bcs $1342			bcs 	EXPDZero
.1333	60		rts				rts
.1334					EXPBinIDiv:
.1334	24 0f		bit $0f				bit 	IFR0+IExp
.1336	30 21		bmi $1359			bmi 	EXPTypeError
.1338	a2 10		ldx #$10			ldx 	#IFR1
.133a	20 f9 28	jsr $28f9			jsr 	IFloatDivideFloat
.133d	b0 03		bcs $1342			bcs 	EXPDZero
.133f	4c d6 28	jmp $28d6			jmp 	IFloatIntegerR0
.1342					EXPDZero:
.1342	4c fa 21	jmp $21fa		jmp	ErrorV_divzero
.1345					EXPBinIMod:
.1345	24 0f		bit $0f				bit 	IFR0+IExp
.1347	30 10		bmi $1359			bmi 	EXPTypeError
.1349	a2 10		ldx #$10			ldx 	#IFR1
.134b	5a		phy				phy
.134c	20 0e 28	jsr $280e			jsr 	IFPreProcessBitwise 		; set up everything.
.134f	d0 05		bne $1356			bne 	EXPDRange
.1351	20 47 27	jsr $2747			jsr 	IFloatModulusInteger
.1354	7a		ply				ply
.1355	60		rts				rts
.1356					EXPDRange:
.1356	4c 98 21	jmp $2198		jmp	ErrorV_range
.1359					EXPTypeError:
.1359	4c b5 21	jmp $21b5		jmp	ErrorV_type
.135c					EXPBinAnd:
.135c	24 0f		bit $0f				bit 	IFR0+IExp
.135e	30 f9		bmi $1359			bmi 	EXPTypeError
.1360	a2 10		ldx #$10			ldx 	#IFR1
.1362	20 c9 27	jsr $27c9			jsr 	IFloatBitwiseAnd
.1365	b0 ef		bcs $1356			bcs 	EXPDRange
.1367	60		rts				rts
.1368					EXPBinOr:
.1368	24 0f		bit $0f				bit 	IFR0+IExp
.136a	30 ed		bmi $1359			bmi 	EXPTypeError
.136c	a2 10		ldx #$10			ldx 	#IFR1
.136e	20 e0 27	jsr $27e0			jsr 	IFloatBitwiseOr
.1371	b0 e3		bcs $1356			bcs 	EXPDRange
.1373	60		rts				rts
.1374					EXPBinXor:
.1374	24 0f		bit $0f				bit 	IFR0+IExp
.1376	30 e1		bmi $1359			bmi 	EXPTypeError
.1378	a2 10		ldx #$10			ldx 	#IFR1
.137a	20 f7 27	jsr $27f7			jsr 	IFloatBitwiseXor
.137d	b0 d7		bcs $1356			bcs 	EXPDRange
.137f	60		rts				rts
.1380					EXPConcatenate:
.1380	18		clc				clc
.1381	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1383	72 10		adc ($10)			adc 	(IFR1)
.1385	b0 2d		bcs $13b4			bcs 	_EXPCError
.1387	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.1389	da		phx				phx
.138a	a6 0d		ldx $0d				ldx 	IFR0+1
.138c	da		phx				phx
.138d	20 cb 23	jsr $23cb			jsr 	StringTempAllocate 			; allocate string, set up return
.1390	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1392	a5 10		lda $10				lda 	IFR1
.1394	20 9d 13	jsr $139d			jsr 	_EXPCCopyXA
.1397	fa		plx				plx 								; copy second string
.1398	68		pla				pla
.1399	20 9d 13	jsr $139d			jsr 	_EXPCCopyXA
.139c	60		rts				rts
.139d					_EXPCCopyXA:
.139d	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.139f	85 1e		sta $1e				sta 	zTemp0
.13a1	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.13a3	f0 0e		beq $13b3			beq 	_EXPCCExit 					; nothing.
.13a5	aa		tax				tax 								; count
.13a6	5a		phy				phy 								; start positioin
.13a7	a0 01		ldy #$01			ldy 	#1
.13a9					_EXPCCLoop:
.13a9	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.13ab	20 00 24	jsr $2400			jsr 	StringTempWrite
.13ae	c8		iny				iny
.13af	ca		dex				dex
.13b0	d0 f7		bne $13a9			bne 	_EXPCCLoop
.13b2	7a		ply				ply
.13b3					_EXPCCExit:
.13b3	60		rts				rts
.13b4					_EXPCError:
.13b4	4c 96 22	jmp $2296		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.13b7					EXPReturnTrue:
.13b7	a2 0c		ldx #$0c			ldx 	#IFR0
.13b9	a9 01		lda #$01			lda 	#1
.13bb	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.13be	20 e1 2b	jsr $2be1			jsr 	IFloatNegate
.13c1	60		rts				rts
.13c2					EXPReturnFalse:
.13c2	a2 0c		ldx #$0c			ldx 	#IFR0
.13c4	4c d6 2b	jmp $2bd6			jmp 	IFloatSetZero
.13c7					EXPCompareEqual:
.13c7	20 fd 13	jsr $13fd			jsr 	EXPCompareBaseCode
.13ca	c9 00		cmp #$00			cmp 	#0
.13cc	f0 e9		beq $13b7			beq 	EXPReturnTrue
.13ce	80 f2		bra $13c2			bra 	EXPReturnFalse
.13d0					EXPCompareLess:
.13d0	20 fd 13	jsr $13fd			jsr 	EXPCompareBaseCode
.13d3	c9 ff		cmp #$ff			cmp 	#$FF
.13d5	f0 e0		beq $13b7			beq 	EXPReturnTrue
.13d7	80 e9		bra $13c2			bra 	EXPReturnFalse
.13d9					EXPCompareGreater:
.13d9	20 fd 13	jsr $13fd			jsr 	EXPCompareBaseCode
.13dc	c9 01		cmp #$01			cmp 	#1
.13de	f0 d7		beq $13b7			beq 	EXPReturnTrue
.13e0	80 e0		bra $13c2			bra 	EXPReturnFalse
.13e2					EXPCompareNotEqual:
.13e2	20 fd 13	jsr $13fd			jsr 	EXPCompareBaseCode
.13e5	c9 00		cmp #$00			cmp 	#0
.13e7	d0 ce		bne $13b7			bne 	EXPReturnTrue
.13e9	80 d7		bra $13c2			bra 	EXPReturnFalse
.13eb					EXPCompareLessEqual:
.13eb	20 fd 13	jsr $13fd			jsr 	EXPCompareBaseCode
.13ee	c9 01		cmp #$01			cmp 	#1
.13f0	d0 c5		bne $13b7			bne 	EXPReturnTrue
.13f2	80 ce		bra $13c2			bra 	EXPReturnFalse
.13f4					EXPCompareGreaterEqual:
.13f4	20 fd 13	jsr $13fd			jsr 	EXPCompareBaseCode
.13f7	c9 ff		cmp #$ff			cmp 	#$FF
.13f9	d0 bc		bne $13b7			bne 	EXPReturnTrue
.13fb	80 c5		bra $13c2			bra 	EXPReturnFalse
.13fd					EXPCompareBaseCode:
.13fd	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.13ff	30 10		bmi $1411			bmi 	_EXCBCString
.1401	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.1403	20 a4 28	jsr $28a4			jsr 	IFloatCompare
.1406	a5 0c		lda $0c				lda 	IFR0+IM0
.1408	f0 06		beq $1410			beq 	_EXCBCExit 					; return 0 if zero
.140a	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.140c	50 02		bvc $1410			bvc 	_EXCBCExit
.140e	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1410					_EXCBCExit:
.1410	60		rts				rts
.1411					_EXCBCString:
.1411	5a		phy				phy
.1412	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.1414	d2 10		cmp ($10)			cmp 	(IFR1)
.1416	90 02		bcc $141a			bcc 	_EXCBCSmaller
.1418	b2 10		lda ($10)			lda 	(IFR1)
.141a					_EXCBCSmaller:
.141a	aa		tax				tax
.141b	f0 0d		beq $142a			beq 	_EXCBCMatches 				; if zero common length matches
.141d	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.141f					_EXCBCCheckSmallerMatches:
.141f	c8		iny				iny 								; compare directly as far as common length
.1420	38		sec				sec
.1421	b1 10		lda ($10),y			lda 	(IFR1),y
.1423	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.1425	d0 08		bne $142f			bne 	_EXCBCExit2
.1427	ca		dex				dex
.1428	d0 f5		bne $141f			bne 	_EXCBCCheckSmallerMatches
.142a					_EXCBCMatches:
.142a	38		sec				sec
.142b	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.142d	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.142f					_EXCBCExit2:
.142f	7a		ply				ply
.1430	c9 00		cmp #$00			cmp 	#0
.1432	f0 04		beq $1438			beq 	_EXCBCReturn
.1434	30 03		bmi $1439			bmi 	_EXCBCFF
.1436	a9 01		lda #$01			lda 	#1
.1438					_EXCBCReturn:
.1438	60		rts				rts
.1439					_EXCBCFF:
.1439	a9 ff		lda #$ff			lda 	#$FF
.143b	60		rts				rts
.143c					_EXCBCRange:
.143c	4c 98 21	jmp $2198		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.143f					EXPBinLeft:
.143f	a9 ff		lda #$ff			lda 	#$FF
.1441	8d 3d 03	sta $033d			sta 	EXPShiftLeftFlag
.1444	4c 4a 14	jmp $144a			jmp 	EXPShiftCommon
.1447					EXPBinRight:
.1447	9c 3d 03	stz $033d			stz 	EXPShiftLeftFlag
.144a					EXPShiftCommon:
.144a	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.144c	05 13		ora $13				ora 	IFR1+IExp
.144e	29 7f		and #$7f			and 	#$7F
.1450	d0 35		bne $1487			bne 	_EXPSRange
.1452	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1454	29 e0		and #$e0			and 	#$E0
.1456	05 0d		ora $0d				ora 	IFR0+IM1
.1458	05 0e		ora $0e				ora 	IFR0+IM2
.145a	d0 25		bne $1481			bne 	_EXPSShiftZero 				; if so return zero
.145c	5a		phy				phy
.145d	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.145f	29 1f		and #$1f			and 	#$1F
.1461	f0 17		beq $147a			beq 	_EXPSExit 					; exit if zero
.1463	a8		tay				tay
.1464					_EXPSLoop:
.1464	a2 10		ldx #$10			ldx 	#IFR1
.1466	2c 3d 03	bit $033d			bit 	EXPShiftLeftFlag
.1469	30 05		bmi $1470			bmi 	_EXPSShiftLeft
.146b	20 05 2c	jsr $2c05			jsr 	IFloatShiftRight
.146e	80 07		bra $1477			bra 	_EXPSContinue
.1470					_EXPSShiftLeft:
.1470	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1473	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1475	30 10		bmi $1487			bmi 	_EXPSRange
.1477					_EXPSContinue:
.1477	88		dey				dey
.1478	d0 ea		bne $1464			bne 	_EXPSLoop
.147a					_EXPSExit:
.147a	a2 10		ldx #$10			ldx 	#IFR1
.147c	20 67 2b	jsr $2b67			jsr 	IFloatCopyFromRegister
.147f	7a		ply				ply
.1480	60		rts				rts
.1481					_EXPSShiftZero:
.1481	a2 0c		ldx #$0c			ldx 	#IFR0
.1483	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.1486	60		rts				rts
.1487					_EXPSRange:
.1487	4c 98 21	jmp $2198		jmp	ErrorV_range
.033d					EXPShiftLeftFlag:
>033d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.148a					EXPEvaluateExpression:
.148a	a9 00		lda #$00			lda 	#0 							; current precedence
.148c					EXPEvaluateExpressionPrecedenceA:
.148c	48		pha				pha
.148d	20 07 15	jsr $1507			jsr 	EXPTermValueR0				; do first term.
.1490					_EELoop:
.1490	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1492	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1494	90 31		bcc $14c7			bcc 	_EEExit
.1496	aa		tax				tax 								; access the precedence of the operator.
.1497	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1498	dd 45 17	cmp $1745,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.149b	b0 2b		bcs $14c8			bcs 	_EEExit2
.149d	48		pha				pha 								; save current precedence.
.149e	da		phx				phx 								; save operator
.149f	c8		iny				iny 								; consume operator
.14a0	da		phx				phx
.14a1	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.14a3	20 25 2b	jsr $2b25			jsr 	IFloatPushRx
.14a6	fa		plx				plx
.14a7	bd 45 17	lda $1745,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.14aa	20 8c 14	jsr $148c			jsr 	EXPEvaluateExpressionPrecedenceA
.14ad	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.14af	20 46 2b	jsr $2b46			jsr 	IFloatPullRx
.14b2	fa		plx				plx 								; operator
.14b3	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.14b5	45 13		eor $13				eor 	IFR1+IExp
.14b7	30 08		bmi $14c1			bmi 	_EEType
.14b9					_EETypeOkay:
.14b9	8a		txa				txa
.14ba	0a		asl a				asl 	a 							; double -> X
.14bb	aa		tax				tax
.14bc	20 c4 14	jsr $14c4			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.14bf	80 cf		bra $1490			bra 	_EELoop
.14c1					_EEType:
.14c1	4c b5 21	jmp $21b5		jmp	ErrorV_type
.14c4					_EECallBinary:
.14c4	7c ed 19	jmp ($19ed,x)			jmp 	(VectorTable,x)
.14c7					_EEExit:
.14c7	68		pla				pla 								; throw precedence
.14c8					_EEExit2:
.14c8	18		clc				clc
.14c9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.14ca					EXPEvalNumber:
.14ca	20 8a 14	jsr $148a			jsr 	EXPEvaluateExpression
.14cd	24 0f		bit $0f				bit 	IFR0+IExp
.14cf	30 01		bmi $14d2			bmi 	EVUType
.14d1	60		rts				rts
.14d2					EVUType:
.14d2	4c b5 21	jmp $21b5		jmp	ErrorV_type
.14d5					EXPEvalInteger:
.14d5	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.14d8	20 d6 28	jsr $28d6			jsr 	IFloatIntegerR0
.14db	60		rts				rts
.14dc					EXPEvalInteger16:
.14dc	20 d5 14	jsr $14d5			jsr 	EXPEvalInteger
.14df	a5 0e		lda $0e				lda 	IFR0+IM2
.14e1	d0 21		bne $1504			bne 	EVURange
.14e3	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14e5	a5 0c		lda $0c				lda 	IFR0+IM0
.14e7	60		rts				rts
.14e8					EXPEvalInteger8:
.14e8	20 d5 14	jsr $14d5			jsr 	EXPEvalInteger
.14eb	a5 0e		lda $0e				lda 	IFR0+IM2
.14ed	05 0d		ora $0d				ora 	IFR0+IM1
.14ef	d0 13		bne $1504			bne 	EVURange
.14f1	a5 0c		lda $0c				lda 	IFR0+IM0
.14f3	60		rts				rts
.14f4					EXPEvalString:
.14f4	20 8a 14	jsr $148a			jsr 	EXPEvaluateExpression
.14f7	24 0f		bit $0f				bit 	IFR0+IExp
.14f9	10 d7		bpl $14d2			bpl 	EVUType
.14fb	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14fd	86 1f		stx $1f				stx 	zTemp0+1
.14ff	a5 0c		lda $0c				lda 	IFR0+IM0
.1501	85 1e		sta $1e				sta 	zTemp0
.1503	60		rts				rts
.1504					EVURange:
.1504	4c 98 21	jmp $2198		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1507					EXPTermValueR0:
.1507	20 52 15	jsr $1552			jsr 	EXPTermR0 					; get term
.150a	90 45		bcc $1551			bcc 	_ETVNotReference 			; exit if value.
.150c	5a		phy				phy
.150d	a0 03		ldy #$03			ldy 	#3 							; get type
.150f	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1511	30 14		bmi $1527			bmi 	_ETVDereferenceString
.1513	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.1515	88		dey				dey
.1516	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1518	85 0e		sta $0e				sta 	IFR0+IM2
.151a	88		dey				dey
.151b	b1 0c		lda ($0c),y			lda 	(IFR0),y
.151d	aa		tax				tax
.151e	b2 0c		lda ($0c)			lda 	(IFR0)
.1520	86 0d		stx $0d				stx 	IFR0+IM1
.1522	85 0c		sta $0c				sta 	IFR0+IM0
.1524	7a		ply				ply
.1525	18		clc				clc
.1526	60		rts				rts
.1527					_ETVDereferenceString:
.1527	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1529	b1 0c		lda ($0c),y			lda 	(IFR0),y
.152b	12 0c		ora ($0c)			ora 	(IFR0)
.152d	f0 11		beq $1540			beq 	_ETVNull
.152f	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.1531	aa		tax				tax
.1532	b2 0c		lda ($0c)			lda 	(IFR0)
.1534	18		clc				clc 								; add two so points to actual string.
.1535	69 02		adc #$02			adc 	#2
.1537	90 01		bcc $153a			bcc 	_EVDSNoCarry
.1539	e8		inx				inx
.153a					_EVDSNoCarry:
.153a	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.153c	85 0c		sta $0c				sta 	IFR0
.153e	80 08		bra $1548			bra 	_ETVFillExit 				; tidy up and exit.
.1540					_ETVNull:
.1540	a9 50		lda #$50			lda 	#_EVTNString & $FF
.1542	85 0c		sta $0c				sta 	IFR0+IM0
.1544	a9 15		lda #$15			lda 	#_EVTNString >> 8
.1546	85 0d		sta $0d				sta 	IFR0+IM1
.1548					_ETVFillExit:
.1548	64 0e		stz $0e				stz 	IFR0+IM2
.154a	a9 80		lda #$80			lda 	#$80
.154c	85 0f		sta $0f				sta 	IFR0+IExp
.154e	7a		ply				ply
.154f	60		rts				rts
.1550					_EVTNString:
>1550	00						.byte 	0
.1551					_ETVNotReference:
.1551	60		rts				rts
.1552					EXPTermR0:
.1552	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.1554	30 10		bmi $1566			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1556	c8		iny				iny 								; consume element
.1557	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1559	b0 08		bcs $1563			bcs 	_ETMIdentifier
.155b	20 8a 15	jsr $158a			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.155e	20 bd 15	jsr $15bd			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1561	18		clc				clc 								; return value
.1562	60		rts				rts
.1563					_ETMIdentifier:
.1563	4c 6d 25	jmp $256d			jmp 	VARCheckSimple 				; check simple variables A-Z
.1566					_ETMIsUnaryOrMinus:
.1566	c8		iny				iny 								; consume element
.1567	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1569	d0 0a		bne $1575			bne 	_ETMCheckUnary
.156b	20 07 15	jsr $1507			jsr 	EXPTermValueR0 				; get a term to negate
.156e	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1570	20 e1 2b	jsr $2be1			jsr 	IFloatNegate
.1573	18		clc				clc
.1574	60		rts				rts
.1575					_ETMCheckUnary:
.1575	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1577	90 0e		bcc $1587			bcc 	_ETMUnarySyntax
.1579	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.157b	b0 0a		bcs $1587			bcs 	_ETMUnarySyntax
.157d	0a		asl a				asl 	a
.157e	aa		tax				tax
.157f	20 84 15	jsr $1584			jsr 	_ETMCallUnaryFunction
.1582	18		clc				clc
.1583	60		rts				rts
.1584					_ETMCallUnaryFunction:
.1584	7c ed 19	jmp ($19ed,x)			jmp 	(VectorTable,x)
.1587					_ETMUnarySyntax:
.1587	4c 88 21	jmp $2188		jmp	ErrorV_syntax
.158a					EXPExtractTokenisedInteger:
.158a	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.158c	64 0f		stz $0f				stz 	IFR0+IExp
.158e	64 0d		stz $0d				stz 	IFR0+IM1
.1590	64 0e		stz $0e				stz 	IFR0+IM2
.1592					_ETMConstant:
.1592	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1594	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1596	b0 24		bcs $15bc			bcs 	_ETMCExit 					; no.
.1598	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.159a	a5 0d		lda $0d				lda 	IFR0+IM1
.159c	85 0e		sta $0e				sta 	IFR0+IM2
.159e	a5 0c		lda $0c				lda 	IFR0+IM0
.15a0	85 0d		sta $0d				sta 	IFR0+IM1
.15a2	64 0c		stz $0c				stz 	IFR0+IM0
.15a4	8a		txa				txa
.15a5	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.15a6	66 0e		ror $0e				ror 	IFR0+IM2
.15a8	66 0d		ror $0d				ror 	IFR0+IM1
.15aa	66 0c		ror $0c				ror 	IFR0+IM0
.15ac	4a		lsr a				lsr 	a
.15ad	66 0e		ror $0e				ror 	IFR0+IM2
.15af	66 0d		ror $0d				ror 	IFR0+IM1
.15b1	66 0c		ror $0c				ror 	IFR0+IM0
.15b3	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.15b5	11 1c		ora ($1c),y			ora 	(codePtr),y
.15b7	85 0c		sta $0c				sta 	IFR0+IM0
.15b9	c8		iny				iny 								; consume, loop back
.15ba	80 d6		bra $1592			bra 	_ETMConstant
.15bc					_ETMCExit:
.15bc	60		rts				rts
.15bd					EXPCheckDecimalFollows:
.15bd	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.15bf	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.15c1	d0 19		bne $15dc			bne 	_ETMCDExit
.15c3	c8		iny				iny 								; consume token.
.15c4	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.15c6	5a		phy				phy									; save current position
.15c7	48		pha				pha 								; save count of chars.
.15c8	38		sec				sec 								; address into YX : y + codePtr+1
.15c9	98		tya				tya
.15ca	65 1c		adc $1c				adc 	codePtr
.15cc	aa		tax				tax
.15cd	a5 1d		lda $1d				lda 	codePtr+1
.15cf	69 00		adc #$00			adc 	#0
.15d1	a8		tay				tay
.15d2	68		pla				pla 								; get count.
.15d3	20 7a 2a	jsr $2a7a			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.15d6	7a		ply				ply 								; go to next token.
.15d7	98		tya				tya
.15d8	38		sec				sec
.15d9	71 1c		adc ($1c),y			adc 	(codePtr),y
.15db	a8		tay				tay
.15dc					_ETMCDExit:
.15dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.15dd					EXPUnaryAbs:
.15dd	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 					; number to R0
.15e0	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.15e3	20 1a 28	jsr $281a			jsr 	IFloatAbsoluteR0
.15e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.15e7					EXPUnaryAsc:
.15e7	20 f4 14	jsr $14f4			jsr 	EXPEvalString 					; string to R0, zTemp0
.15ea	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.15ed	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.15ef	f0 06		beq $15f7			beq 	_EXAZero 						; if so return 0
.15f1	5a		phy				phy 									; otherwise get first character
.15f2	a0 01		ldy #$01			ldy 	#1
.15f4	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15f6	7a		ply				ply
.15f7					_EXAZero:
.15f7	a2 0c		ldx #$0c			ldx 	#IFR0
.15f9	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.15fc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.15fd					EXPUnaryChr:
.15fd	20 e8 14	jsr $14e8			jsr 	EXPEvalInteger8 				; expr
.1600	48		pha				pha 									; push on stack
.1601	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.1604	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1606	20 cb 23	jsr $23cb			jsr 	StringTempAllocate
.1609	68		pla				pla
.160a	20 00 24	jsr $2400			jsr 	StringTempWrite
.160d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.160e					EXPUnaryDec:
.160e	20 f4 14	jsr $14f4			jsr 	EXPEvalString 					; string to R0, zTemp0
.1611	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.1614	5a		phy				phy
.1615	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.1617	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.161a	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.161c	f0 3b		beq $1659			beq 	_EUDError 						; empty string
.161e	aa		tax				tax
.161f	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1621					_EUDLoop:
.1621	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1623	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1625	90 02		bcc $1629			bcc 	_EUDNoCase
.1627	e9 20		sbc #$20			sbc 	#$20
.1629					_EUDNoCase:
.1629	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.162b	90 2c		bcc $1659			bcc 	_EUDError
.162d	c9 3a		cmp #$3a			cmp 	#'9'+1
.162f	90 0a		bcc $163b			bcc 	_EUDOkay
.1631	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1633	90 24		bcc $1659			bcc 	_EUDError
.1635	c9 47		cmp #$47			cmp 	#'F'+1
.1637	b0 20		bcs $1659			bcs 	_EUDError
.1639	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.163b					_EUDOkay:
.163b	29 0f		and #$0f			and 	#15 							; make constant
.163d	da		phx				phx
.163e	48		pha				pha
.163f	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1641	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1644	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1647	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.164a	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.164d	68		pla				pla 									; pop constant and OR in
.164e	fa		plx				plx
.164f	05 0c		ora $0c				ora 	IFR0+IM0
.1651	85 0c		sta $0c				sta 	IFR0+IM0
.1653	c8		iny				iny 									; next
.1654	ca		dex				dex
.1655	d0 ca		bne $1621			bne 	_EUDLoop
.1657	7a		ply				ply
.1658	60		rts				rts
.1659					_EUDError:
.1659	4c a8 21	jmp $21a8		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.165c					EXPUnaryInlineDec:
.165c	4c 88 21	jmp $2188		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.165f					EXPUnaryPeek:
.165f	20 dc 14	jsr $14dc			jsr 	EXPEvalInteger16 				; number to R0
.1662	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.1665	b2 0c		lda ($0c)			lda 	(IFR0)
.1667	a2 0c		ldx #$0c			ldx 	#IFR0
.1669	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.166c	60		rts				rts
.166d					EXPUnaryDeek:
.166d	20 dc 14	jsr $14dc			jsr 	EXPEvalInteger16 				; number to R0
.1670	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.1673	5a		phy				phy
.1674	a0 01		ldy #$01			ldy 	#1
.1676	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1678	7a		ply				ply
.1679	48		pha				pha
.167a	b2 0c		lda ($0c)			lda 	(IFR0)
.167c	a2 0c		ldx #$0c			ldx 	#IFR0
.167e	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.1681	68		pla				pla
.1682	85 0d		sta $0d				sta 	IFR0+IM1
.1684	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1685					EXPUnaryNull:
.1685	20 07 15	jsr $1507			jsr 	EXPTermValueR0
.1688	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1689					EXPUnaryFrac:
.1689	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 					; number to R0
.168c	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.168f	20 80 28	jsr $2880			jsr 	IFloatFractionalR0
.1692	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1693					EXPUnaryInt:
.1693	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 					; number to R0
.1696	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.1699	20 d6 28	jsr $28d6			jsr 	IFloatIntegerR0
.169c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.169d					EXPUnaryLen:
.169d	20 f4 14	jsr $14f4			jsr 	EXPEvalString 					; string to R0, zTemp0
.16a0	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.16a3	b2 1e		lda ($1e)			lda 	(zTemp0)
.16a5	a2 0c		ldx #$0c			ldx 	#IFR0
.16a7	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.16aa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.16ab					EXPUnaryParenthesis:
.16ab	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 					; number to R0
.16ae	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.16b1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.16b2					EXPUnaryRnd:
.16b2	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 				; number to R0
.16b5	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 				; )
.16b8	a2 0c		ldx #$0c			ldx 	#IFR0
.16ba	20 d1 16	jsr $16d1			jsr 	EXPLoadInRandom
.16bd	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.16bf	85 0f		sta $0f				sta 	IFR0+IExp
.16c1	60		rts				rts
.16c2					ExpUnaryRand:
.16c2	20 d5 14	jsr $14d5			jsr 	EXPEvalInteger 				; integer to R0
.16c5	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 				; )
.16c8	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.16ca	20 d1 16	jsr $16d1			jsr 	EXPLoadInRandom
.16cd	20 47 27	jsr $2747			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.16d0	60		rts				rts
.16d1					EXPLoadInRandom:
.16d1	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.16d4	20 e6 16	jsr $16e6			jsr 	EXPRandom32
.16d7	95 00		sta $00,x			sta 	IM0,x
.16d9	20 e6 16	jsr $16e6			jsr 	EXPRandom32
.16dc	95 01		sta $01,x			sta 	IM1,x
.16de	20 e6 16	jsr $16e6			jsr 	EXPRandom32
.16e1	29 7f		and #$7f			and 	#$7F
.16e3	95 02		sta $02,x			sta 	IM2,x
.16e5	60		rts				rts
.16e6					EXPRandom32:
.16e6	5a		phy				phy
.16e7	a0 08		ldy #$08			ldy 	#8
.16e9	ad 3e 03	lda $033e			lda 	EXPSeed+0
.16ec	0d 3f 03	ora $033f			ora 	EXPSeed+1
.16ef	0d 40 03	ora $0340			ora 	EXPSeed+2
.16f2	0d 41 03	ora $0341			ora 	EXPSeed+3
.16f5	d0 08		bne $16ff			bne 	_EXPRNoReset
.16f7	ee 3e 03	inc $033e			inc 	EXPSeed+0
.16fa	a0 10		ldy #$10			ldy 	#16
.16fc	8c 41 03	sty $0341			sty 	EXPSeed+3
.16ff					_EXPRNoReset:
.16ff	ad 3e 03	lda $033e			lda 	EXPSeed+0
.1702					_EXPRLoop:
.1702	0a		asl a				asl		a
.1703	2e 3f 03	rol $033f			rol 	EXPSeed+1
.1706	2e 40 03	rol $0340			rol 	EXPSeed+2
.1709	2e 41 03	rol $0341			rol 	EXPSeed+3
.170c	90 02		bcc $1710			bcc 	_EXPRNoEOR
.170e	49 c5		eor #$c5			eor 	#$C5
.1710					_EXPRNoEOR:
.1710	88		dey				dey
.1711	d0 ef		bne $1702			bne 	_EXPRLoop
.1713	8d 3e 03	sta $033e			sta 	EXPSeed+0
.1716	7a		ply				ply
.1717	60		rts				rts
.033e					EXPSeed:
>033e							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1718					EXPUnarySgn:
.1718	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 					; number to R0
.171b	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.171e	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.1720	20 78 2b	jsr $2b78			jsr 	IFloatCopyToRegister
.1723	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.1725	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.1728	a2 10		ldx #$10			ldx 	#IFR1
.172a	20 a4 28	jsr $28a4			jsr 	IFloatCompare 					; compare R1 vs 0.
.172d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.172e					EXPUnarySqr:
.172e	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 					; number to R0
.1731	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.1734	20 22 28	jsr $2822			jsr 	IFloatSquareRootR0 				; square root.
.1737	b0 01		bcs $173a			bcs 	_EUSValue
.1739	60		rts				rts
.173a					_EUSValue:
.173a	4c 98 21	jmp $2198		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.173d					EXPUnaryHex:
.173d	20 d5 14	jsr $14d5			jsr 	EXPEvalInteger 					; expr
.1740	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.1743	5a		phy				phy
.1744	a9 10		lda #$10			lda 	#16
.1746	20 77 29	jsr $2977			jsr 	IFloatIntegerToStringR0
.1749	80 0a		bra $1755			bra 	EUSMain
.174b					EXPUnaryStr:
.174b	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 					; expr
.174e	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.1751	5a		phy				phy
.1752	20 d3 29	jsr $29d3			jsr 	IFloatFloatToStringR0 			; convert to string
.1755					EUSMain:
.1755	b0 18		bcs $176f			bcs 	_EUSError
.1757	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1759	84 1f		sty $1f				sty 	zTemp0+1
.175b	48		pha				pha 									; save count
.175c	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.175e	20 cb 23	jsr $23cb			jsr 	StringTempAllocate
.1761	fa		plx				plx 									; count in X
.1762	a0 00		ldy #$00			ldy 	#0
.1764					_EUSCopy:
.1764	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1766	c8		iny				iny
.1767	20 00 24	jsr $2400			jsr 	StringTempWrite
.176a	ca		dex				dex
.176b	d0 f7		bne $1764			bne	 	_EUSCopy
.176d	7a		ply				ply
.176e	60		rts				rts
.176f					_EUSError:
.176f	4c 98 21	jmp $2198		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1772					EXPUnaryInlineString:
.1772	18		clc				clc 								; physical address -> IM0,1
.1773	98		tya				tya
.1774	65 1c		adc $1c				adc 	codePtr
.1776	85 0c		sta $0c				sta 	IFR0+IM0
.1778	a5 1d		lda $1d				lda 	codePtr+1
.177a	69 00		adc #$00			adc 	#0
.177c	85 0d		sta $0d				sta 	IFR0+IM1
.177e	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.1780	a9 80		lda #$80			lda 	#$80
.1782	85 0f		sta $0f				sta 	IFR0+IExp
.1784	98		tya				tya	 								; skip over it.
.1785	38		sec				sec
.1786	71 1c		adc ($1c),y			adc 	(codePtr),y
.1788	a8		tay				tay
.1789	60		rts				rts
.178a					_EXPUISRange:
.178a	4c 98 21	jmp $2198		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.178d					EXPUnaryLeft:
.178d	20 d3 17	jsr $17d3			jsr 	EXPCommonStart 					; <string>,
.1790	48		pha				pha 									; save string address on stack
.1791	da		phx				phx
.1792	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1794	48		pha				pha
.1795	20 e8 14	jsr $14e8			jsr 	EXPEvalInteger8 				; characters to do
.1798	80 44		bra $17de			bra 	EXPSubstringCommon
.179a					EXPUnaryRight:
.179a	20 d3 17	jsr $17d3			jsr 	EXPCommonStart 					; <string>,
.179d	48		pha				pha 									; save string address on stack
.179e	da		phx				phx
.179f	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.17a1	48		pha				pha
.17a2	20 e8 14	jsr $14e8			jsr 	EXPEvalInteger8 				; characters to do
.17a5	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.17a7	68		pla				pla
.17a8	38		sec				sec
.17a9	e5 1e		sbc $1e				sbc 	zTemp0
.17ab	b0 02		bcs $17af			bcs 	_EUROffLeft
.17ad	a9 00		lda #$00			lda 	#0
.17af					_EUROffLeft:
.17af	48		pha				pha 									; start pos
.17b0	a9 ff		lda #$ff			lda 	#255
.17b2	80 2a		bra $17de			bra 	EXPSubstringCommon
.17b4					EXPUnaryMid:
.17b4	20 d3 17	jsr $17d3			jsr 	EXPCommonStart 					; <string>,
.17b7	48		pha				pha 									; save string address on stack
.17b8	da		phx				phx
.17b9	20 e8 14	jsr $14e8			jsr 	EXPEvalInteger8 				; characters start
.17bc	f0 12		beq $17d0			beq 	_EUSError 						; 1 is left
.17be	3a		dec a				dec 	a 								; zero based.
.17bf	48		pha				pha
.17c0	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.17c2	c9 99		cmp #$99			cmp 	#PR_COMMA
.17c4	f0 04		beq $17ca			beq 	_EUMLength 						; if so m is provided
.17c6	a9 ff		lda #$ff			lda 	#255 							; default m
.17c8	80 14		bra $17de			bra 	EXPSubstringCommon
.17ca					_EUMLength:
.17ca	c8		iny				iny 									; consume comma
.17cb	20 e8 14	jsr $14e8			jsr 	EXPEvalInteger8 				; characters to do
.17ce	80 0e		bra $17de			bra 	EXPSubstringCommon
.17d0					_EUSError:
.17d0	4c a8 21	jmp $21a8		jmp	ErrorV_value
.17d3					EXPCommonStart:
.17d3	20 f4 14	jsr $14f4			jsr 	EXPEvalString
.17d6	20 dd 22	jsr $22dd			jsr 	ERRCheckComma
.17d9	a5 0c		lda $0c				lda 	IFR0+IM0
.17db	a6 0d		ldx $0d				ldx 	IFR0+IM1
.17dd	60		rts				rts
.17de					EXPSubstringCommon:
.17de	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.17e0	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; check right bracket.
.17e3	68		pla				pla 									; start position
.17e4	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.17e6	fa		plx				plx 									; get string address to zTemp2.
.17e7	86 23		stx $23				stx 	zTemp2+1
.17e9	68		pla				pla
.17ea	85 22		sta $22				sta 	zTemp2
.17ec	38		sec				sec 									; length - start is the max count of chars
.17ed	b2 22		lda ($22)			lda 	(zTemp2)
.17ef	e5 21		sbc $21				sbc 	zTemp1+1
.17f1	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.17f3	b0 02		bcs $17f7			bcs 	_EXPSSNoTrim
.17f5	85 20		sta $20				sta 	zTemp1 							; update count with available
.17f7					_EXPSSNoTrim:
.17f7	a5 20		lda $20				lda 	zTemp1 							; chars required.
.17f9	20 cb 23	jsr $23cb			jsr 	StringTempAllocate 				; allocate memory for it.
.17fc	a5 20		lda $20				lda 	zTemp1 							; zero length string
.17fe	f0 15		beq $1815			beq 	_EXPSSExit
.1800	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.1802	d2 22		cmp ($22)			cmp 	(zTemp2)
.1804	b0 0f		bcs $1815			bcs 	_EXPSSExit
.1806	5a		phy				phy
.1807	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.1809	c8		iny				iny 									; +1 for the length byte
.180a					_EXPSSCopy:
.180a	b1 22		lda ($22),y			lda 	(zTemp2),y
.180c	20 00 24	jsr $2400			jsr 	StringTempWrite
.180f	c8		iny				iny
.1810	c6 20		dec $20				dec 	zTemp1
.1812	d0 f6		bne $180a			bne 	_EXPSSCopy
.1814	7a		ply				ply
.1815					_EXPSSExit:
.1815	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1816					EXPUnaryVal:
.1816	20 f4 14	jsr $14f4			jsr 	EXPEvalString 					; string to R0, zTemp0
.1819	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen 					; )
.181c	5a		phy				phy
.181d	18		clc				clc
.181e	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.1820	69 01		adc #$01			adc 	#1
.1822	aa		tax				tax
.1823	a5 1f		lda $1f				lda 	zTemp0+1
.1825	69 00		adc #$00			adc 	#0
.1827	a8		tay				tay
.1828	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.182a	20 3a 2a	jsr $2a3a			jsr 	IFloatStringToFloatR0 			; do conversion
.182d	b0 02		bcs $1831			bcs 	_EUVError
.182f	7a		ply				ply
.1830	60		rts				rts
.1831					_EUVError:
.1831	4c a8 21	jmp $21a8		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1834					BinaryPrecedence:
>1834	02					.byte	 2	; $ef =
>1835	02					.byte	 2	; $f0 <>
>1836	02					.byte	 2	; $f1 <=
>1837	02					.byte	 2	; $f2 <
>1838	02					.byte	 2	; $f3 >=
>1839	02					.byte	 2	; $f4 >
>183a	01					.byte	 1	; $f5 XOR
>183b	01					.byte	 1	; $f6 OR
>183c	01					.byte	 1	; $f7 AND
>183d	04					.byte	 4	; $f8 DIV
>183e	04					.byte	 4	; $f9 MOD
>183f	04					.byte	 4	; $fa <<
>1840	04					.byte	 4	; $fb >>
>1841	04					.byte	 4	; $fc /
>1842	04					.byte	 4	; $fd *
>1843	03					.byte	 3	; $fe -
>1844	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1845					StructureOffsets:
>1845	01					.byte	1  	; $80 REPEAT
>1846	ff					.byte	255	; $81 UNTIL
>1847	01					.byte	1  	; $82 WHILE
>1848	ff					.byte	255	; $83 WEND
>1849	01					.byte	1  	; $84 IF
>184a	ff					.byte	255	; $85 ENDIF
>184b	01					.byte	1  	; $86 DO
>184c	ff					.byte	255	; $87 LOOP
>184d	01					.byte	1  	; $88 PROC
>184e	ff					.byte	255	; $89 ENDPROC
>184f	01					.byte	1  	; $8a FOR
>1850	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1851					StandardTokens:
>1851	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1858	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>185e	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1864	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1869	02 49 46				.byte	$02,$49,$46                             	; $84 if
>186c	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1872	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1875	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>187a	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>187f	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1887	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>188b	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1890	00					.byte	$00                                     	; $8c [[end]]
>1891	00					.byte	$00                                     	; $8d [[shift]]
>1892	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1897	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>189c	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>189f	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>18a4	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>18a8	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>18ae	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>18b4	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>18b9	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>18bd	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>18c1	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>18c6	01 2c					.byte	$01,$2c                                 	; $99 ,
>18c8	01 3b					.byte	$01,$3b                                 	; $9a ;
>18ca	01 3a					.byte	$01,$3a                                 	; $9b :
>18cc	01 27					.byte	$01,$27                                 	; $9c '
>18ce	01 29					.byte	$01,$29                                 	; $9d )
>18d0	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>18d4	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>18da	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>18de	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>18e2	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>18e7	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>18eb	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>18f2	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>18f7	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>18fc	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1901	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1906	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>190b	00					.byte	0											; $aa
>190c	00					.byte	0											; $ab
>190d	00					.byte	0											; $ac
>190e	00					.byte	0											; $ad
>190f	00					.byte	0											; $ae
>1910	00					.byte	0											; $af
>1911	00					.byte	0											; $b0
>1912	00					.byte	0											; $b1
>1913	00					.byte	0											; $b2
>1914	00					.byte	0											; $b3
>1915	00					.byte	0											; $b4
>1916	00					.byte	0											; $b5
>1917	00					.byte	0											; $b6
>1918	00					.byte	0											; $b7
>1919	00					.byte	0											; $b8
>191a	00					.byte	0											; $b9
>191b	00					.byte	0											; $ba
>191c	00					.byte	0											; $bb
>191d	00					.byte	0											; $bc
>191e	00					.byte	0											; $bd
>191f	00					.byte	0											; $be
>1920	00					.byte	0											; $bf
>1921	00					.byte	0											; $c0
>1922	00					.byte	0											; $c1
>1923	00					.byte	0											; $c2
>1924	00					.byte	0											; $c3
>1925	00					.byte	0											; $c4
>1926	00					.byte	0											; $c5
>1927	00					.byte	0											; $c6
>1928	00					.byte	0											; $c7
>1929	00					.byte	0											; $c8
>192a	00					.byte	0											; $c9
>192b	00					.byte	0											; $ca
>192c	00					.byte	0											; $cb
>192d	00					.byte	0											; $cc
>192e	00					.byte	0											; $cd
>192f	00					.byte	0											; $ce
>1930	00					.byte	0											; $cf
>1931	00					.byte	0											; $d0
>1932	00					.byte	0											; $d1
>1933	00					.byte	0											; $d2
>1934	00					.byte	0											; $d3
>1935	00					.byte	0											; $d4
>1936	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>193c	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1942	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>194a	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1951	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1957	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>195d	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1962	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1967	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>196c	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1971	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1976	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>197c	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1981	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1989	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1990	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1995	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>199a	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>19a0	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>19a5	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>19ab	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>19b0	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>19b6	01 28					.byte	$01,$28                                 	; $eb (
>19b8	01 24					.byte	$01,$24                                 	; $ec $
>19ba	00					.byte	$00                                     	; $ed [[decimal]]
>19bb	00					.byte	$00                                     	; $ee [[string]]
>19bc	01 3d					.byte	$01,$3d                                 	; $ef =
>19be	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>19c1	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>19c4	01 3c					.byte	$01,$3c                                 	; $f2 <
>19c6	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>19c9	01 3e					.byte	$01,$3e                                 	; $f4 >
>19cb	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>19cf	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>19d2	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>19d6	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>19da	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>19de	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>19e1	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>19e4	01 2f					.byte	$01,$2f                                 	; $fc /
>19e6	01 2a					.byte	$01,$2a                                 	; $fd *
>19e8	01 2d					.byte	$01,$2d                                 	; $fe -
>19ea	01 2b					.byte	$01,$2b                                 	; $ff +
>19ec	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.19ed					VectorTable:
>19ed	e4 20					.word	Command_REPEAT           ; $80 REPEAT
>19ef	ed 20					.word	Command_UNTIL            ; $81 UNTIL
>19f1	5d 21					.word	Command_WHILE            ; $82 WHILE
>19f3	7c 21					.word	Command_WEND             ; $83 WEND
>19f5	bc 20					.word	IfCommand                ; $84 IF
>19f7	e3 20					.word	EndIf                    ; $85 ENDIF
>19f9	b6 1f					.word	Command_DO               ; $86 DO
>19fb	ce 1f					.word	Command_LOOP             ; $87 LOOP
>19fd	0a 13					.word	NoExec08                 ; $88 PROC
>19ff	b4 2c					.word	NotImplemented           ; $89 ENDPROC
>1a01	d7 1f					.word	Command_FOR              ; $8a FOR
>1a03	47 20					.word	Command_NEXT             ; $8b NEXT
>1a05	ad 12					.word	RUNEndOfLine             ; $8c [[END]]
>1a07	eb 12					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1a09	dc 20					.word	ElseCode                 ; $8e ELSE
>1a0b	0a 13					.word	NoExec01                 ; $8f THEN
>1a0d	0a 13					.word	NoExec02                 ; $90 TO
>1a0f	0a 13					.word	NoExec03                 ; $91 STEP
>1a11	13 12					.word	CommandLET               ; $92 LET
>1a13	ae 11					.word	Command_Print            ; $93 PRINT
>1a15	b4 2c					.word	NotImplemented           ; $94 INPUT
>1a17	b4 2c					.word	NotImplemented           ; $95 CALL
>1a19	f4 12					.word	Command_Sys              ; $96 SYS
>1a1b	94 12					.word	Command_REM              ; $97 REM
>1a1d	bf 1f					.word	Command_EXIT             ; $98 EXIT
>1a1f	0a 13					.word	NoExec04                 ; $99 ,
>1a21	0a 13					.word	NoExec05                 ; $9a ;
>1a23	0a 13					.word	NoExec06                 ; $9b :
>1a25	94 12					.word	Command_REM2             ; $9c '
>1a27	0a 13					.word	NoExec07                 ; $9d )
>1a29	68 10					.word	CommandDIM               ; $9e DIM
>1a2b	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1a2d	8b 12					.word	Command_NEW              ; $a0 NEW
>1a2f	a1 12					.word	Command_RUN              ; $a1 RUN
>1a31	f1 12					.word	Command_STOP             ; $a2 STOP
>1a33	ee 12					.word	Command_END              ; $a3 END
>1a35	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1a37	b4 2c					.word	NotImplemented           ; $a5 LIST
>1a39	b4 2c					.word	NotImplemented           ; $a6 SAVE
>1a3b	b4 2c					.word	NotImplemented           ; $a7 LOAD
>1a3d	87 11					.word	Command_Poke             ; $a8 POKE
>1a3f	84 11					.word	Command_Doke             ; $a9 DOKE
>1a41	b4 2c					.word	NotImplemented           ; $aa
>1a43	b4 2c					.word	NotImplemented           ; $ab
>1a45	b4 2c					.word	NotImplemented           ; $ac
>1a47	b4 2c					.word	NotImplemented           ; $ad
>1a49	b4 2c					.word	NotImplemented           ; $ae
>1a4b	b4 2c					.word	NotImplemented           ; $af
>1a4d	b4 2c					.word	NotImplemented           ; $b0
>1a4f	b4 2c					.word	NotImplemented           ; $b1
>1a51	b4 2c					.word	NotImplemented           ; $b2
>1a53	b4 2c					.word	NotImplemented           ; $b3
>1a55	b4 2c					.word	NotImplemented           ; $b4
>1a57	b4 2c					.word	NotImplemented           ; $b5
>1a59	b4 2c					.word	NotImplemented           ; $b6
>1a5b	b4 2c					.word	NotImplemented           ; $b7
>1a5d	b4 2c					.word	NotImplemented           ; $b8
>1a5f	b4 2c					.word	NotImplemented           ; $b9
>1a61	b4 2c					.word	NotImplemented           ; $ba
>1a63	b4 2c					.word	NotImplemented           ; $bb
>1a65	b4 2c					.word	NotImplemented           ; $bc
>1a67	b4 2c					.word	NotImplemented           ; $bd
>1a69	b4 2c					.word	NotImplemented           ; $be
>1a6b	b4 2c					.word	NotImplemented           ; $bf
>1a6d	b4 2c					.word	NotImplemented           ; $c0
>1a6f	b4 2c					.word	NotImplemented           ; $c1
>1a71	b4 2c					.word	NotImplemented           ; $c2
>1a73	b4 2c					.word	NotImplemented           ; $c3
>1a75	b4 2c					.word	NotImplemented           ; $c4
>1a77	b4 2c					.word	NotImplemented           ; $c5
>1a79	b4 2c					.word	NotImplemented           ; $c6
>1a7b	b4 2c					.word	NotImplemented           ; $c7
>1a7d	b4 2c					.word	NotImplemented           ; $c8
>1a7f	b4 2c					.word	NotImplemented           ; $c9
>1a81	b4 2c					.word	NotImplemented           ; $ca
>1a83	b4 2c					.word	NotImplemented           ; $cb
>1a85	b4 2c					.word	NotImplemented           ; $cc
>1a87	b4 2c					.word	NotImplemented           ; $cd
>1a89	b4 2c					.word	NotImplemented           ; $ce
>1a8b	b4 2c					.word	NotImplemented           ; $cf
>1a8d	b4 2c					.word	NotImplemented           ; $d0
>1a8f	b4 2c					.word	NotImplemented           ; $d1
>1a91	b4 2c					.word	NotImplemented           ; $d2
>1a93	b4 2c					.word	NotImplemented           ; $d3
>1a95	b4 2c					.word	NotImplemented           ; $d4
>1a97	6d 16					.word	EXPUnaryDeek             ; $d5 DEEK(
>1a99	5f 16					.word	EXPUnaryPeek             ; $d6 PEEK(
>1a9b	9a 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1a9d	8d 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1a9f	b4 17					.word	EXPUnaryMid              ; $d9 MID$(
>1aa1	4b 17					.word	EXPUnaryStr              ; $da STR$(
>1aa3	16 18					.word	EXPUnaryVal              ; $db VAL(
>1aa5	18 17					.word	EXPUnarySgn              ; $dc SGN(
>1aa7	dd 15					.word	EXPUnaryAbs              ; $dd ABS(
>1aa9	9d 16					.word	EXPUnaryLen              ; $de LEN(
>1aab	2e 17					.word	EXPUnarySqr              ; $df SQR(
>1aad	fd 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1aaf	e7 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1ab1	b4 2c					.word	NotImplemented           ; $e2 INKEY$(
>1ab3	b4 2c					.word	NotImplemented           ; $e3 EVENT(
>1ab5	b4 2c					.word	NotImplemented           ; $e4 TIME
>1ab7	93 16					.word	EXPUnaryInt              ; $e5 INT(
>1ab9	89 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1abb	0e 16					.word	EXPUnaryDec              ; $e7 DEC(
>1abd	3d 17					.word	EXPUnaryHex              ; $e8 HEX$(
>1abf	b2 16					.word	EXPUnaryRnd              ; $e9 RND(
>1ac1	c2 16					.word	ExpUnaryRand             ; $ea RAND(
>1ac3	ab 16					.word	EXPUnaryParenthesis      ; $eb (
>1ac5	85 16					.word	EXPUnaryNull             ; $ec $
>1ac7	5c 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1ac9	72 17					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1acb	c7 13					.word	EXPCompareEqual          ; $ef =
>1acd	e2 13					.word	EXPCompareNotEqual       ; $f0 <>
>1acf	eb 13					.word	EXPCompareLessEqual      ; $f1 <=
>1ad1	d0 13					.word	EXPCompareLess           ; $f2 <
>1ad3	f4 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1ad5	d9 13					.word	EXPCompareGreater        ; $f4 >
>1ad7	74 13					.word	EXPBinXor                ; $f5 XOR
>1ad9	68 13					.word	EXPBinOr                 ; $f6 OR
>1adb	5c 13					.word	EXPBinAnd                ; $f7 AND
>1add	34 13					.word	EXPBinIDiv               ; $f8 DIV
>1adf	45 13					.word	EXPBinIMod               ; $f9 MOD
>1ae1	3f 14					.word	EXPBinLeft               ; $fa <<
>1ae3	47 14					.word	EXPBinRight              ; $fb >>
>1ae5	28 13					.word	EXPBinFDiv               ; $fc /
>1ae7	1f 13					.word	EXPBinMul                ; $fd *
>1ae9	16 13					.word	EXPBinSub                ; $fe -
>1aeb	0d 13					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1aed					TOKDetokenise:
.1aed	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1aef	84 23		sty $23				sty 	zTemp2+1
.1af1	9c 44 03	stz $0344			stz		TOKLastCharacter 			; clear last character
.1af4					_TOKDLoop:
.1af4	20 23 1b	jsr $1b23			jsr 	TOKDGet 					; get next
.1af7	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1af9	f0 26		beq $1b21			beq 	_TOKDExit
.1afb	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1afd	f0 1d		beq $1b1c			beq 	_TOKDDataItem
.1aff	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1b01	f0 19		beq $1b1c			beq 	_TOKDDataItem
.1b03	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1b05	10 05		bpl $1b0c			bpl 	_TOKDNotToken
.1b07	20 eb 1b	jsr $1beb			jsr 	TOKDToken 					; token to text.
.1b0a	80 e8		bra $1af4			bra 	_TOKDLoop
.1b0c					_TOKDNotToken:
.1b0c	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1b0e	90 05		bcc $1b15			bcc 	_TOKDNotIdentifier
.1b10	20 5e 1b	jsr $1b5e			jsr 	TOKDIdentifier
.1b13	80 df		bra $1af4			bra 	_TOKDLoop
.1b15					_TOKDNotIdentifier:
.1b15	a0 0a		ldy #$0a			ldy 	#10
.1b17	20 a7 1b	jsr $1ba7			jsr 	TOKDInteger
.1b1a	80 d8		bra $1af4			bra 	_TOKDLoop
.1b1c					_TOKDDataItem:
.1b1c	20 39 1b	jsr $1b39			jsr 	TOKDDataItem
.1b1f	80 d3		bra $1af4			bra 	_TOKDLoop
.1b21					_TOKDExit:
.1b21	18		clc				clc
.1b22	60		rts				rts
.1b23	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1b25	e6 22		inc $22				inc 	zTemp2
.1b27	d0 02		bne $1b2b			bne 	_TKDGExit
.1b29	e6 23		inc $23				inc 	zTemp2+1
.1b2b					_TKDGExit:
.1b2b	60		rts				rts
.1b2c					TOKDOutput:
.1b2c	8d 44 03	sta $0344			sta 	TOKLastCharacter
.1b2f	6c 42 03	jmp ($0342)			jmp 	(TOKOutputMethod)
.1b32					TOKSetDetokeniseOutput:
.1b32	8e 42 03	stx $0342			stx 	TOKOutputMethod
.1b35	8c 43 03	sty $0343			sty 	TOKOutputMethod+1
.1b38	60		rts				rts
.0342					TOKOutputMethod:
>0342							.fill 	2
.0344					TOKLastCharacter:
>0344							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1b39					TOKDDataItem:
.1b39	a8		tay				tay 								; type in Y
.1b3a	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1b3c	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1b3e	f0 02		beq $1b42			beq 	_TOKDDIsString
.1b40	a9 2e		lda #$2e			lda 	#'.'
.1b42					_TOKDDIsString:
.1b42	20 2c 1b	jsr $1b2c			jsr 	TOKDOutput 					; dump it
.1b45	20 23 1b	jsr $1b23			jsr 	TOKDGet 					; get length into X
.1b48	aa		tax				tax
.1b49					_TOKDDOutput:
.1b49	ca		dex				dex 								; are we complete
.1b4a	30 08		bmi $1b54			bmi 	_TOKDDEnd
.1b4c	20 23 1b	jsr $1b23			jsr 	TOKDGet 					; get character and output it
.1b4f	20 2c 1b	jsr $1b2c			jsr 	TOKDOutput
.1b52	80 f5		bra $1b49			bra 	_TOKDDOutput
.1b54					_TOKDDEnd:
.1b54	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1b56	d0 05		bne $1b5d			bne 	_TOKDDNotString
.1b58	a9 22		lda #$22			lda 	#'"'
.1b5a	20 2c 1b	jsr $1b2c			jsr 	TOKDOutput
.1b5d					_TOKDDNotString:
.1b5d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1b5e					TOKDIdentifier:
.1b5e	a0 ff		ldy #$ff			ldy 	#$FF
.1b60	8c 45 03	sty $0345			sty 	TOKDIFirstChar
.1b63					_TOKDLoop:
.1b63	a8		tay				tay 								; token in Y
.1b64	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1b66	c0 64		cpy #$64			cpy 	#$64
.1b68	f0 11		beq $1b7b			beq 	_TOKDIOutput
.1b6a	a9 5f		lda #$5f			lda 	#'_'
.1b6c	c0 65		cpy #$65			cpy 	#$65
.1b6e	f0 0b		beq $1b7b			beq 	_TOKDIOutput
.1b70	98		tya				tya 								; handle a-z
.1b71	18		clc				clc
.1b72	69 21		adc #$21			adc	 	#$21
.1b74	c0 5a		cpy #$5a			cpy 	#$5A
.1b76	90 03		bcc $1b7b			bcc 	_TOKDIOutput
.1b78	38		sec				sec 								; handle 0-9
.1b79	e9 4b		sbc #$4b			sbc 	#$4B
.1b7b					_TOKDIOutput:
.1b7b	2c 45 03	bit $0345			bit 	TOKDIFirstChar
.1b7e	10 08		bpl $1b88			bpl 	_TOKDINoSpacing
.1b80	48		pha				pha
.1b81	20 1d 1c	jsr $1c1d			jsr 	TOKDSpacing
.1b84	9c 45 03	stz $0345			stz 	TOKDIFirstChar
.1b87	68		pla				pla
.1b88					_TOKDINoSpacing:
.1b88	20 2c 1b	jsr $1b2c			jsr 	TOKDOutput
.1b8b	20 23 1b	jsr $1b23			jsr 	TOKDGet 					; get next token
.1b8e	c9 7c		cmp #$7c			cmp 	#$7C
.1b90	90 d1		bcc $1b63			bcc 	_TOKDLoop
.1b92	f0 12		beq $1ba6			beq 	_TOKDIExit 					; it's a number, no tail.
.1b94	4a		lsr a				lsr 	a 							; string ?
.1b95	90 07		bcc $1b9e			bcc 	_TOKDICheckArray
.1b97	48		pha				pha
.1b98	a9 24		lda #$24			lda 	#"$"
.1b9a	20 2c 1b	jsr $1b2c			jsr 	TOKDOutput
.1b9d	68		pla				pla
.1b9e					_TOKDICheckArray:
.1b9e	4a		lsr a				lsr 	a 							; array ?
.1b9f	90 05		bcc $1ba6			bcc 	_TOKDIExit
.1ba1	a9 28		lda #$28			lda 	#"("
.1ba3	20 2c 1b	jsr $1b2c			jsr 	TOKDOutput
.1ba6					_TOKDIExit:
.1ba6	60		rts				rts
.0345					TOKDIFirstChar:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1ba7					TOKDInteger:
.1ba7	5a		phy				phy 								; save base
.1ba8	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1baa	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.1bad					_TOKDILoop:
.1bad	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1baf	c9 40		cmp #$40			cmp 	#$40
.1bb1	b0 1d		bcs $1bd0			bcs 	_TOKDIHaveInteger
.1bb3	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1bb5	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1bb8	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1bbb	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1bbe	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1bc1	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1bc4	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1bc7	20 23 1b	jsr $1b23			jsr 	TOKDGet 					; OR byte in.
.1bca	05 0c		ora $0c				ora 	IFR0+IM0
.1bcc	85 0c		sta $0c				sta 	IFR0+IM0
.1bce	80 dd		bra $1bad			bra 	_TOKDILoop
.1bd0					_TOKDIHaveInteger:
.1bd0	7a		ply				ply 								; restore base
.1bd1	98		tya				tya 								; base in A
.1bd2	20 77 29	jsr $2977			jsr 	IFloatIntegerToStringR0
.1bd5	86 1e		stx $1e				stx 	zTemp0
.1bd7	84 1f		sty $1f				sty 	zTemp0+1
.1bd9	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bdb	20 1d 1c	jsr $1c1d			jsr 	TOKDSpacing 				; check spacing okay.
.1bde	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1be0					_TOKDOutput:
.1be0	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1be2	20 2c 1b	jsr $1b2c			jsr 	TOKDOutput
.1be5	c8		iny				iny
.1be6	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1be8	d0 f6		bne $1be0			bne 	_TOKDOutput
.1bea	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1beb					TOKDToken:
.1beb	a2 51		ldx #$51			ldx 	#StandardTokens & $FF
.1bed	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1bef					_TOKDSearch:
.1bef	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1bf1	84 1f		sty $1f				sty 	zTemp0+1
.1bf3	aa		tax				tax 								; token ID in X.
.1bf4					_TOKDFind:
.1bf4	ca		dex				dex 								; reached the start
.1bf5	10 0d		bpl $1c04			bpl 	_TOKDFound
.1bf7	38		sec				sec 								; go to next entry
.1bf8	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bfa	65 1e		adc $1e				adc 	zTemp0
.1bfc	85 1e		sta $1e				sta 	zTemp0
.1bfe	90 f4		bcc $1bf4			bcc 	_TOKDFind
.1c00	e6 1f		inc $1f				inc 	zTemp0+1
.1c02	80 f0		bra $1bf4			bra 	_TOKDFind
.1c04					_TOKDFound:
.1c04	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1c06	f0 14		beq $1c1c			beq 	_TOKDExit
.1c08	aa		tax				tax
.1c09	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1c0b	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1c0d	20 1d 1c	jsr $1c1d			jsr 	TOKDSpacing
.1c10					_TOKDOutput:
.1c10	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1c12	20 71 1f	jsr $1f71			jsr 	TOKToLower
.1c15	20 2c 1b	jsr $1b2c			jsr 	TOKDOutput
.1c18	c8		iny				iny
.1c19	ca		dex				dex
.1c1a	d0 f4		bne $1c10			bne 	_TOKDOutput
.1c1c					_TOKDExit:
.1c1c	60		rts				rts
.1c1d					TOKDSpacing:
.1c1d	20 88 1f	jsr $1f88			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1c20	90 0d		bcc $1c2f			bcc 	_TOKDSExit
.1c22	ad 44 03	lda $0344			lda 	TOKLastCharacter			; and last character also alphanumeric
.1c25	20 88 1f	jsr $1f88			jsr 	TOKIsIdentifierElement
.1c28	90 05		bcc $1c2f			bcc 	_TOKDSExit
.1c2a	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1c2c	20 2c 1b	jsr $1b2c			jsr 	TOKDOutput
.1c2f					_TOKDSExit:
.1c2f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1c30					PGMDeleteLine:
.1c30	20 e3 1c	jsr $1ce3			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c33	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c35	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c38	85 21		sta $21				sta 	zTemp1+1
.1c3a					_PGMDLoop:
.1c3a	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1c3c	38		sec				sec
.1c3d	f0 3a		beq $1c79			beq 	_PGMDExit
.1c3f	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1c41	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c43	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c46	d0 08		bne $1c50			bne 	_PGMDNext
.1c48	c8		iny				iny
.1c49	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c4b	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1c4e	f0 0d		beq $1c5d			beq 	_PGMDDelete
.1c50					_PGMDNext:
.1c50	18		clc				clc
.1c51	b2 20		lda ($20)			lda 	(zTemp1)
.1c53	65 20		adc $20				adc 	zTemp1
.1c55	85 20		sta $20				sta 	zTemp1
.1c57	90 e1		bcc $1c3a			bcc 	_PGMDLoop
.1c59	e6 21		inc $21				inc 	zTemp1+1
.1c5b	80 dd		bra $1c3a			bra 	_PGMDLoop
.1c5d					_PGMDDelete:
.1c5d	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1c5f	a8		tay				tay
.1c60					_PGMDCopy:
.1c60	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1c62	92 20		sta ($20)			sta 	(zTemp1)
.1c64	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1c66	c5 1e		cmp $1e				cmp 	zTemp0
.1c68	d0 07		bne $1c71			bne 	_PGMDNext2
.1c6a	a5 21		lda $21				lda 	zTemp1+1
.1c6c	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c6e	18		clc				clc
.1c6f	f0 08		beq $1c79			beq 	_PGMDExit
.1c71					_PGMDNext2:
.1c71	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1c73	d0 eb		bne $1c60			bne 	_PGMDCopy
.1c75	e6 21		inc $21				inc 	zTemp1+1
.1c77	80 e7		bra $1c60			bra 	_PGMDCopy
.1c79					_PGMDExit:
.1c79	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1c7a					PGMInsertLine:
.1c7a	20 e3 1c	jsr $1ce3			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c7d	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c7f	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c82	85 21		sta $21				sta 	zTemp1+1
.1c84					_PGMILoop:
.1c84	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c86	f0 1c		beq $1ca4			beq 	_PGMIInsert
.1c88	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c8a	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c8c	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c8f	c8		iny				iny
.1c90	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c92	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1c95	b0 0d		bcs $1ca4			bcs 	_PGMIInsert 				; insert here.
.1c97	18		clc				clc
.1c98	b2 20		lda ($20)			lda 	(zTemp1)
.1c9a	65 20		adc $20				adc 	zTemp1
.1c9c	85 20		sta $20				sta 	zTemp1
.1c9e	90 e4		bcc $1c84			bcc 	_PGMILoop
.1ca0	e6 21		inc $21				inc 	zTemp1+1
.1ca2	80 e0		bra $1c84			bra 	_PGMILoop
.1ca4					_PGMIInsert:
.1ca4	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1ca7					_PGMIInsertLoop:
.1ca7	b2 1e		lda ($1e)			lda 	(zTemp0)
.1ca9	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1cab	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1cad	c5 1e		cmp $1e				cmp 	zTemp0
.1caf	d0 06		bne $1cb7			bne 	_PGMINext
.1cb1	a5 21		lda $21				lda 	zTemp1+1
.1cb3	c5 1f		cmp $1f				cmp 	zTemp0+1
.1cb5	f0 0a		beq $1cc1			beq 	_PGMIInserted
.1cb7					_PGMINext:
.1cb7	a5 1e		lda $1e				lda 	zTemp0
.1cb9	d0 02		bne $1cbd			bne 	_PGMINoBorrow
.1cbb	c6 1f		dec $1f				dec 	zTemp0+1
.1cbd					_PGMINoBorrow:
.1cbd	c6 1e		dec $1e				dec 	zTemp0
.1cbf	80 e6		bra $1ca7			bra 	_PGMIInsertLoop
.1cc1					_PGMIInserted:
.1cc1	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1cc3					_PGMICopyLoop:
.1cc3	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1cc6	91 20		sta ($20),y			sta 	(zTemp1),y
.1cc8	c8		iny				iny
.1cc9	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1ccc	d0 f5		bne $1cc3			bne 	_PGMICopyLoop
.1cce	18		clc				clc
.1ccf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1cd0					PGMSetBaseAddress:
.1cd0	8e 46 03	stx $0346			stx 	PGMBaseHigh
.1cd3	8c 47 03	sty $0347			sty 	PGMEndMemoryHigh
.1cd6	60		rts				rts
.1cd7					PGMNewProgram:
.1cd7	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1cd9	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1cdc	85 1f		sta $1f				sta 	zTemp0+1
.1cde	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1ce0	92 1e		sta ($1e)			sta 	(zTemp0)
.1ce2	60		rts				rts
.1ce3					PGMEndProgram:
.1ce3	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1ce5	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1ce8	85 1f		sta $1f				sta 	zTemp0+1
.1cea					_PGMEPLoop:
.1cea	b2 1e		lda ($1e)			lda 	(zTemp0)
.1cec	f0 0b		beq $1cf9			beq 	_PGMEPExit
.1cee	18		clc				clc
.1cef	65 1e		adc $1e				adc 	zTemp0
.1cf1	85 1e		sta $1e				sta 	zTemp0
.1cf3	90 f5		bcc $1cea			bcc 	_PGMEPLoop
.1cf5	e6 1f		inc $1f				inc 	zTemp0+1
.1cf7	80 f1		bra $1cea			bra 	_PGMEPLoop
.1cf9					_PGMEPExit:
.1cf9	60		rts				rts
.0346					PGMBaseHigh:
>0346							.fill 	1
.0347					PGMEndMemoryHigh:
>0347							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1cfa					TOKResetElement:
.1cfa	9c 48 03	stz $0348			stz 	TOKElement
.1cfd	60		rts				rts
.1cfe					TOKWriteElement:
.1cfe	da		phx				phx
.1cff	ae 48 03	ldx $0348			ldx 	TOKElement
.1d02	9d 49 03	sta $0349,x			sta 	TOKElementText,x
.1d05	9e 4a 03	stz $034a,x			stz 	TOKElementText+1,x
.1d08	fa		plx				plx
.1d09	ee 48 03	inc $0348			inc 	TOKElement
.1d0c	60		rts				rts
.0348					TOKElement:
>0348							.fill 	1
.0349					TOKElementText:
>0349							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1d0d					TOKTokeniseConstant:
.1d0d	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1d0f	48		pha				pha 								; save on stack
.1d10	29 c0		and #$c0			and 	#$C0
.1d12	05 0d		ora $0d				ora 	IFR0+IM1
.1d14	05 0e		ora $0e				ora 	IFR0+IM2
.1d16	f0 10		beq $1d28			beq 	_TTCLess
.1d18	da		phx				phx
.1d19	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1d1b					_TTCShiftRight:
.1d1b	46 0e		lsr $0e				lsr 	IFR0+IM2
.1d1d	66 0d		ror $0d				ror 	IFR0+IM1
.1d1f	66 0c		ror $0c				ror 	IFR0+IM0
.1d21	ca		dex				dex
.1d22	d0 f7		bne $1d1b			bne 	_TTCShiftRight
.1d24	fa		plx				plx
.1d25	20 0d 1d	jsr $1d0d			jsr 	TOKTokeniseConstant
.1d28					_TTCLess:
.1d28	68		pla				pla
.1d29	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1d2b	20 c4 1d	jsr $1dc4			jsr 	TOKWriteA
.1d2e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1d2f					TOKTokeniseDecimals:
.1d2f	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext 					; consume the .
.1d32	20 fe 1e	jsr $1efe			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1d35	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1d37	20 c4 1d	jsr $1dc4			jsr 	TOKWriteA
.1d3a	20 3f 1d	jsr $1d3f			jsr 	TOKOutputElementBuffer 		; then the buffer
.1d3d	18		clc				clc
.1d3e	60		rts				rts
.1d3f					TOKOutputElementBuffer:
.1d3f	ad 48 03	lda $0348			lda 	TOKElement 					; get count and write that
.1d42	20 c4 1d	jsr $1dc4			jsr 	TOKWriteA
.1d45	a8		tay				tay 								; put in Y
.1d46	f0 0c		beq $1d54			beq 	_TOEExit 					; exit if empty which is okay.
.1d48	a2 01		ldx #$01			ldx 	#1
.1d4a					_TOELoop:
.1d4a	bd 48 03	lda $0348,x			lda 	TOKElement,x
.1d4d	20 c4 1d	jsr $1dc4			jsr 	TOKWriteA
.1d50	e8		inx				inx
.1d51	88		dey				dey
.1d52	d0 f6		bne $1d4a			bne 	_TOELoop
.1d54					_TOEExit:
.1d54	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1d55					TOKTokenise:
.1d55	8c 49 04	sty $0449			sty 	TOKDataSource+1 			; save source routine pointer
.1d58	8e 48 04	stx $0448			stx 	TOKDataSource
.1d5b	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1d5d	8d 4a 04	sta $044a			sta 	TOKIsFirstElement
.1d60	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1d62	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1d65					_TOKMainLoop:
.1d65	20 d0 1d	jsr $1dd0			jsr 	TOKGet 						; what follows.
.1d68	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1d6a	f0 4f		beq $1dbb			beq 	_TOKExit
.1d6c	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1d6e	d0 05		bne $1d75			bne 	_TOKElement
.1d70	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext
.1d73	80 f0		bra $1d65			bra 	_TOKMainLoop
.1d75					_TOKElement:
.1d75	20 7c 1f	jsr $1f7c			jsr 	TOKIsDigit 					; is it 0..9
.1d78	90 0a		bcc $1d84			bcc 	_TOKNotDigit
.1d7a	20 d5 1e	jsr $1ed5			jsr 	TOKTokeniseInteger 			; get integer
.1d7d	b0 43		bcs $1dc2			bcs 	_TOKFail 					; did it fail ?
.1d7f	9c 4a 04	stz $044a			stz 	TOKIsFirstElement 			; clear first element flag
.1d82	80 e1		bra $1d65			bra 	_TOKMainLoop
.1d84					_TOKNotDigit:
.1d84	9c 4a 04	stz $044a			stz 	TOKIsFirstElement 			; clear first element flag
.1d87	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d89	d0 07		bne $1d92			bne 	_TOKNotHex
.1d8b	20 1d 1e	jsr $1e1d			jsr 	TOKTokeniseHexadecimal
.1d8e	b0 32		bcs $1dc2			bcs 	_TOKFail
.1d90	80 d3		bra $1d65			bra 	_TOKMainLoop
.1d92					_TOKNotHex:
.1d92	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1d94	d0 07		bne $1d9d			bne 	_TOKNotDecimal
.1d96	20 2f 1d	jsr $1d2f			jsr 	TOKTokeniseDecimals
.1d99	b0 27		bcs $1dc2			bcs 	_TOKFail
.1d9b	80 c8		bra $1d65			bra 	_TOKMainLoop
.1d9d					_TOKNotDecimal:
.1d9d	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1d9f	d0 07		bne $1da8			bne 	_TOKNotString
.1da1	20 43 1f	jsr $1f43			jsr 	TOKTokeniseString
.1da4	b0 1c		bcs $1dc2			bcs 	_TOKFail
.1da6	80 bd		bra $1d65			bra 	_TOKMainLoop
.1da8					_TOKNotString:
.1da8	20 99 1f	jsr $1f99			jsr 	TOKIsAlpha 					; identifier ?
.1dab	b0 07		bcs $1db4			bcs 	_TOKIdentifier
.1dad	20 12 1f	jsr $1f12			jsr 	TOKTokenisePunctuation 		; punctuation
.1db0	b0 10		bcs $1dc2			bcs 	_TOKFail
.1db2	80 b1		bra $1d65			bra 	_TOKMainLoop
.1db4					_TOKIdentifier:
.1db4	20 57 1e	jsr $1e57			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1db7	b0 09		bcs $1dc2			bcs 	_TOKFail
.1db9	80 aa		bra $1d65			bra 	_TOKMainLoop
.1dbb					_TOKExit:
.1dbb	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1dbd	20 c4 1d	jsr $1dc4			jsr 	TOKWriteA
.1dc0	18		clc				clc									; return with carry set.
.1dc1	60		rts				rts
.1dc2					_TOKFail:
.1dc2	38		sec				sec
.1dc3	60		rts				rts
.1dc4					TOKWriteA:
.1dc4	da		phx				phx
.1dc5	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1dc8	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1dcb	fa		plx				plx
.1dcc	ee 37 02	inc $0237			inc 	TOKLineSize
.1dcf	60		rts				rts
.1dd0					TOKGet:
.1dd0	18		clc				clc
.1dd1	6c 48 04	jmp ($0448)			jmp 	(TOKDataSource)
.1dd4					TOKGetNext:
.1dd4	38		sec				sec
.1dd5	6c 48 04	jmp ($0448)			jmp 	(TOKDataSource)
.0448					TOKDataSource:
>0448							.fill 	2
.044a					TOKIsFirstElement:
>044a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1dd8					TOKFindToken:
.1dd8	a2 51		ldx #$51			ldx 	#StandardTokens & $FF 		; do this table
.1dda	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1ddc	20 e7 1d	jsr $1de7			jsr 	TOKFindTokenXY 				; find it, or not
.1ddf	90 04		bcc $1de5			bcc 	_TOKFTFail
.1de1	a2 00		ldx #$00			ldx 	#0
.1de3	38		sec				sec
.1de4	60		rts				rts
.1de5					_TOKFTFail
.1de5	18		clc				clc
.1de6	60		rts				rts
.1de7					TOKFindTokenXY:
.1de7	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1de9	84 1f		sty $1f				sty 	zTemp0+1
.1deb	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1ded	8d 4b 04	sta $044b			sta 	TOKCurrent
.1df0					_TOKFindLoop:
.1df0	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1df2	18		clc				clc 		 						; clear carry in case of fail
.1df3	30 17		bmi $1e0c			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1df5	cd 48 03	cmp $0348			cmp 	TOKElement 					; compare against the element length
.1df8	d0 13		bne $1e0d			bne 	_TOKNext 					; different, try next.
.1dfa	aa		tax				tax 								; number of chars to compare.
.1dfb	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1dfd					_TOKCompare:
.1dfd	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1dff	d9 48 03	cmp $0348,y			cmp 	TOKElementText-1,y
.1e02	d0 09		bne $1e0d			bne 	_TOKNext 					; different ? try next
.1e04	c8		iny				iny 								; compare next two
.1e05	ca		dex				dex
.1e06	d0 f5		bne $1dfd			bne 	_TOKCompare 				; until done X characters.
.1e08	38		sec				sec
.1e09	ad 4b 04	lda $044b			lda 	TOKCurrent 					; return current ID.
.1e0c					_TOKExit:
.1e0c	60		rts				rts
.1e0d					_TOKNext:
.1e0d	ee 4b 04	inc $044b			inc 	TOKCurrent 					; increment token #
.1e10	38		sec				sec 								; add length+1 to ptr
.1e11	b2 1e		lda ($1e)			lda 	(zTemp0)
.1e13	65 1e		adc $1e				adc 	zTemp0
.1e15	85 1e		sta $1e				sta 	zTemp0
.1e17	90 d7		bcc $1df0			bcc 	_TOKFindLoop
.1e19	e6 1f		inc $1f				inc 	zTemp0+1
.1e1b	80 d3		bra $1df0			bra 	_TOKFindLoop
.044b					TOKCurrent:
>044b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1e1d					TOKTokeniseHexadecimal:
.1e1d	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext 					; consume the $
.1e20	a2 0c		ldx #$0c			ldx 	#IFR0
.1e22	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero 				; set R0 = 0
.1e25					_TTHLoop:
.1e25	20 d0 1d	jsr $1dd0			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e28	20 a6 1f	jsr $1fa6			jsr 	TOKIsHexadecimal
.1e2b	90 20		bcc $1e4d			bcc 	_TTHDone
.1e2d	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1e2f	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1e32	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1e35	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1e38	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.1e3b	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext
.1e3e	38		sec				sec 								; convert to decimal.
.1e3f	e9 30		sbc #$30			sbc 	#48
.1e41	c9 0a		cmp #$0a			cmp 	#10
.1e43	90 02		bcc $1e47			bcc 	_TTHNotAlpha
.1e45	e9 07		sbc #$07			sbc 	#7
.1e47					_TTHNotAlpha:
.1e47	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1e49	85 0c		sta $0c				sta 	IFR0+IM0
.1e4b	80 d8		bra $1e25			bra 	_TTHLoop
.1e4d					_TTHDone:
.1e4d	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1e4f	20 c4 1d	jsr $1dc4			jsr 	TOKWriteA
.1e52	20 0d 1d	jsr $1d0d			jsr 	TOKTokeniseConstant 		; write integer out.
.1e55	18		clc				clc
.1e56	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1e57					TOKTokeniseIdentifier:
.1e57	20 fa 1c	jsr $1cfa			jsr 	TOKResetElement 			; extract an identifier
.1e5a					_TOKGetIdentifier:
.1e5a	20 d0 1d	jsr $1dd0			jsr 	TOKGet
.1e5d	20 66 1f	jsr $1f66			jsr 	TOKToUpper
.1e60	20 88 1f	jsr $1f88			jsr 	TOKIsIdentifierElement
.1e63	90 08		bcc $1e6d			bcc 	_TOKEndIdent
.1e65	20 fe 1c	jsr $1cfe			jsr		TOKWriteElement
.1e68	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext
.1e6b	80 ed		bra $1e5a			bra 	_TOKGetIdentifier
.1e6d					_TOKEndIdent:
.1e6d	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1e6f	d0 06		bne $1e77			bne 	_TOKNotString
.1e71	20 fe 1c	jsr $1cfe			jsr 	TOKWriteElement 			; add it
.1e74	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext 					; consume it
.1e77					_TOKNotString:
.1e77	20 d0 1d	jsr $1dd0			jsr 	TOKGet 						; finally check for (
.1e7a	c9 28		cmp #$28			cmp 	#"("
.1e7c	d0 06		bne $1e84			bne 	_TOKNoArray
.1e7e	20 fe 1c	jsr $1cfe			jsr 	TOKWriteElement 			; add it
.1e81	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext 					; consume it
.1e84					_TOKNoArray:
.1e84	20 d8 1d	jsr $1dd8			jsr 	TOKFindToken 				; find it
.1e87	90 05		bcc $1e8e			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e89	20 c4 1d	jsr $1dc4			jsr 	TOKWriteA
.1e8c	18		clc				clc
.1e8d	60		rts				rts
.1e8e					_TOKIsVariable:
.1e8e	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1e90					_TOKOutputBuffer:
.1e90	bd 49 03	lda $0349,x			lda 	TOKElementText,x 			; output it translated.
.1e93	20 bc 1e	jsr $1ebc			jsr 	TOKTranslateIdentifier
.1e96	20 c4 1d	jsr $1dc4			jsr 	TOKWriteA
.1e99	e8		inx				inx
.1e9a	bd 49 03	lda $0349,x			lda 	TOKElementText,x
.1e9d	20 88 1f	jsr $1f88			jsr 	TOKIsIdentifierElement
.1ea0	b0 ee		bcs $1e90			bcs 	_TOKOutputBuffer
.1ea2	a8		tay				tay 								; last char in Y
.1ea3	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1ea5	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1ea7	f0 0e		beq $1eb7			beq 	_TOKIVExit
.1ea9	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1eab	d0 04		bne $1eb1			bne 	_TOKIVCheckArray 			; no, check for (
.1ead	1a		inc a				inc 	a 							; token is $7D
.1eae	bc 4a 03	ldy $034a,x			ldy 	TOKElementText+1,x 			; get next one.
.1eb1					_TOKIVCheckArray:
.1eb1	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1eb3	d0 02		bne $1eb7			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1eb5	1a		inc a				inc 	a
.1eb6	1a		inc a				inc 	a
.1eb7					_TOKIVExit:
.1eb7	20 c4 1d	jsr $1dc4			jsr 	TOKWriteA 					; ending token
.1eba	18		clc				clc
.1ebb	60		rts				rts
.1ebc					TOKTranslateIdentifier:
.1ebc	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1ebe	f0 0f		beq $1ecf			beq 	_TTI64
.1ec0	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1ec2	f0 0e		beq $1ed2			beq 	_TTI65
.1ec4	38		sec				sec
.1ec5	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1ec7	10 03		bpl $1ecc			bpl 	_TTIExit
.1ec9	18		clc				clc 								; map 09 onto 26-35
.1eca	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1ecc					_TTIExit:
.1ecc	09 40		ora #$40			ora 	#$40 						; correct range.
.1ece	60		rts				rts
.1ecf	a9 64		lda #$64	_TTI64:	lda 	#$64
.1ed1	60		rts				rts
.1ed2	a9 65		lda #$65	_TTI65:	lda 	#$65
.1ed4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1ed5					TOKTokeniseInteger:
.1ed5	20 fe 1e	jsr $1efe			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1ed8	a2 49		ldx #$49			ldx 	#TOKElementText & $FF
.1eda	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1edc	ad 48 03	lda $0348			lda		TOKElement
.1edf	20 3a 2a	jsr $2a3a			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1ee2	ad 4a 04	lda $044a			lda 	TOKIsFirstElement 			; first element ?
.1ee5	f0 12		beq $1ef9			beq 	_TOKNotLineNumber
.1ee7	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1ee9	d0 0c		bne $1ef7			bne 	_TOKBadLineNumeber
.1eeb	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1eed	8d 38 02	sta $0238			sta 	TOKLineNumber
.1ef0	a5 0d		lda $0d				lda 	IFR0+IM1
.1ef2	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1ef5	18		clc				clc
.1ef6	60		rts				rts
.1ef7					_TOKBadLineNumeber:
.1ef7	38		sec				sec
.1ef8	60		rts				rts
.1ef9					_TOKNotLineNumber:
.1ef9	20 0d 1d	jsr $1d0d			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1efc	18		clc				clc
.1efd	60		rts				rts
.1efe					TOKExtractInteger:
.1efe	20 fa 1c	jsr $1cfa			jsr 	TOKResetElement 			; restart
.1f01					_TTILoop:
.1f01	20 d0 1d	jsr $1dd0			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f04	20 7c 1f	jsr $1f7c			jsr 	TOKIsDigit
.1f07	90 08		bcc $1f11			bcc 	_TOKEIExit
.1f09	20 fe 1c	jsr $1cfe			jsr 	TOKWriteElement
.1f0c	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext
.1f0f	80 f0		bra $1f01			bra 	_TTILoop
.1f11					_TOKEIExit:
.1f11	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1f12					TOKTokenisePunctuation:
.1f12	20 fa 1c	jsr $1cfa			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1f15	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext
.1f18	20 fe 1c	jsr $1cfe			jsr 	TOKWriteElement
.1f1b	20 d0 1d	jsr $1dd0			jsr 	TOKGet 						; what follows ?
.1f1e	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1f20	f0 10		beq $1f32			beq 	_TTPOne
.1f22	20 90 1f	jsr $1f90			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1f25	b0 0b		bcs $1f32			bcs 	_TTPOne 					; these speed things up a bit.
.1f27	20 fe 1c	jsr $1cfe			jsr 	TOKWriteElement 			; this is what we will search for.
.1f2a	20 d8 1d	jsr $1dd8			jsr 	TOKFindToken
.1f2d	b0 0a		bcs $1f39			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1f2f	ce 48 03	dec $0348			dec 	TOKElement 					; make it a single character
.1f32					_TTPOne:
.1f32	20 d8 1d	jsr $1dd8			jsr 	TOKFindToken 				; look for one character punctuation
.1f35	b0 07		bcs $1f3e			bcs 	_TTPOutputExit 				; we found it
.1f37	38		sec				sec 								; not recognised.
.1f38	60		rts				rts
.1f39					_TTPConsumeExit:
.1f39	48		pha				pha
.1f3a	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext 					; get the 2nd char out.
.1f3d	68		pla				pla
.1f3e					_TTPOutputExit:
.1f3e	20 c4 1d	jsr $1dc4			jsr  	TOKWriteA 					; write token out
.1f41	18		clc				clc
.1f42	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1f43					TOKTokeniseString:
.1f43	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext 					; consume the "
.1f46	20 fa 1c	jsr $1cfa			jsr 	TOKResetElement 			; start getting the string
.1f49					_TOKTSLoop:
.1f49	20 d0 1d	jsr $1dd0			jsr 	TOKGet 						; check EOL
.1f4c	c9 00		cmp #$00			cmp 	#0
.1f4e	f0 0c		beq $1f5c			beq 	_TOKTSExit
.1f50	20 d4 1d	jsr $1dd4			jsr 	TOKGetNext 					; get and consume
.1f53	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1f55	f0 05		beq $1f5c			beq 	_TOKTSExit
.1f57	20 fe 1c	jsr $1cfe			jsr 	TOKWriteElement
.1f5a	80 ed		bra $1f49			bra 	_TOKTSLoop
.1f5c					_TOKTSExit:
.1f5c	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1f5e	20 c4 1d	jsr $1dc4			jsr 	TOKWriteA
.1f61	20 3f 1d	jsr $1d3f			jsr 	TOKOutputElementBuffer
.1f64	18		clc				clc
.1f65	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1f66					TOKToUpper:
.1f66	c9 61		cmp #$61			cmp 	#"a"
.1f68	90 06		bcc $1f70			bcc 	_TTUNotLower
.1f6a	c9 7b		cmp #$7b			cmp 	#"z"+1
.1f6c	b0 02		bcs $1f70			bcs 	_TTUNotLower
.1f6e	49 20		eor #$20			eor 	#$20
.1f70					_TTUNotLower:
.1f70	60		rts				rts
.1f71					TOKToLower:
.1f71	c9 41		cmp #$41			cmp 	#"A"
.1f73	90 06		bcc $1f7b			bcc 	_TTUNotUpper
.1f75	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f77	b0 02		bcs $1f7b			bcs 	_TTUNotUpper
.1f79	49 20		eor #$20			eor 	#$20
.1f7b					_TTUNotUpper:
.1f7b	60		rts				rts
.1f7c					TOKIsDigit:
.1f7c	c9 30		cmp #$30			cmp 	#"0"
.1f7e	90 06		bcc $1f86			bcc 	TOKFail
.1f80	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f82	b0 02		bcs $1f86			bcs 	TOKFail
.1f84					TOKSucceed:
.1f84	38		sec				sec
.1f85	60		rts				rts
.1f86					TOKFail:
.1f86	18		clc				clc
.1f87	60		rts				rts
.1f88					TOKIsIdentifierElement:
.1f88	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f8a	f0 f8		beq $1f84			beq 	TOKSucceed
.1f8c	c9 5f		cmp #$5f			cmp 	#"_"
.1f8e	f0 f4		beq $1f84			beq 	TOKSucceed 					; else fall through to alphanumeric
.1f90					TOKIsAlphaNumeric:
.1f90	20 99 1f	jsr $1f99			jsr 	TOKIsAlpha
.1f93	b0 ef		bcs $1f84			bcs 	TOKSucceed
.1f95	20 7c 1f	jsr $1f7c			jsr 	TOKIsDigit
.1f98	60		rts				rts
.1f99					TOKIsAlpha:
.1f99	20 66 1f	jsr $1f66			jsr 	TOKToUpper
.1f9c	c9 41		cmp #$41			cmp 	#"A"
.1f9e	90 e6		bcc $1f86			bcc 	TOKFail
.1fa0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1fa2	b0 e2		bcs $1f86			bcs 	TOKFail
.1fa4	80 de		bra $1f84			bra 	TOKSucceed
.1fa6					TOKIsHexadecimal:
.1fa6	20 7c 1f	jsr $1f7c			jsr		TOKIsDigit
.1fa9	b0 d9		bcs $1f84			bcs 	TOKSucceed
.1fab	20 99 1f	jsr $1f99			jsr 	TOKIsAlpha
.1fae	90 d6		bcc $1f86			bcc 	TOKFail
.1fb0	c9 47		cmp #$47			cmp 	#"F"+1
.1fb2	b0 d2		bcs $1f86			bcs 	TOKFail
.1fb4	80 ce		bra $1f84			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.1fb6					Command_DO:
.1fb6	a9 22		lda #$22			lda 	#STK_DO
.1fb8	20 ee 22	jsr $22ee			jsr 	StackOpen
.1fbb	20 22 23	jsr $2322			jsr 	STKSaveCodePosition 		; save loop position
.1fbe	60		rts				rts
.1fbf					Command_EXIT:
.1fbf	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.1fc1	20 1a 23	jsr $231a			jsr 	StackCheckFrame
.1fc4	20 0c 23	jsr $230c			jsr 	StackClose 					; close it
.1fc7	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.1fc9	aa		tax				tax
.1fca	20 02 21	jsr $2102			jsr 	ScanForward
.1fcd	60		rts				rts
.1fce					Command_LOOP:
.1fce	a9 22		lda #$22			lda 	#STK_DO
.1fd0	20 1a 23	jsr $231a			jsr 	StackCheckFrame
.1fd3	20 34 23	jsr $2334			jsr 	STKLoadCodePosition 		; loop back
.1fd6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.1fd7					Command_FOR:
.1fd7	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.1fd9	20 ee 22	jsr $22ee			jsr 	StackOpen
.1fdc	20 13 12	jsr $1213			jsr 	CommandLET 					; do "I = 1" bit
.1fdf	5a		phy				phy 								; save variable address to +4,+5
.1fe0	a0 04		ldy #$04			ldy 	#4
.1fe2	a5 1e		lda $1e				lda 	zTemp0
.1fe4	91 26		sta ($26),y			sta 	(basicStack),y
.1fe6	c8		iny				iny
.1fe7	a5 1f		lda $1f				lda 	zTemp0+1
.1fe9	91 26		sta ($26),y			sta 	(basicStack),y
.1feb	7a		ply				ply
.1fec	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.1fee	20 e5 22	jsr $22e5			jsr 	ERRCheckA
.1ff1	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.1ff4	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.1ff6	a2 0c		ldx #$0c			ldx 	#IFR0
.1ff8	20 30 20	jsr $2030			jsr 	CFSaveR0X
.1ffb	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; STEP here ?
.1ffd	c9 91		cmp #$91			cmp 	#PR_STEP
.1fff	d0 06		bne $2007			bne 	_CFStep1
.2001	c8		iny				iny 								; consume step
.2002	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 				; evaluate STEP
.2005	80 07		bra $200e			bra 	_CFWriteStep
.2007					_CFStep1:
.2007	a2 0c		ldx #$0c			ldx 	#IFR0 						; default R0, 1
.2009	a9 01		lda #$01			lda 	#1
.200b	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.200e					_CFWriteStep:
.200e	a2 0c		ldx #$0c			ldx 	#IFR0 						; Write to additive.
.2010	a9 06		lda #$06			lda 	#6
.2012	20 30 20	jsr $2030			jsr 	CFSaveR0X
.2015	20 22 23	jsr $2322			jsr 	STKSaveCodePosition 		; save loop position
.2018	60		rts				rts
.2019					CFLoadR0X:
.2019	5a		phy				phy
.201a	a8		tay				tay
.201b	b1 26		lda ($26),y			lda 	(basicStack),y
.201d	95 00		sta $00,x			sta 	IM0,x
.201f	c8		iny				iny
.2020	b1 26		lda ($26),y			lda 	(basicStack),y
.2022	95 01		sta $01,x			sta 	IM1,x
.2024	c8		iny				iny
.2025	b1 26		lda ($26),y			lda 	(basicStack),y
.2027	95 02		sta $02,x			sta 	IM2,x
.2029	c8		iny				iny
.202a	b1 26		lda ($26),y			lda 	(basicStack),y
.202c	95 03		sta $03,x			sta 	IExp,x
.202e	7a		ply				ply
.202f	60		rts				rts
.2030					CFSaveR0X:
.2030	5a		phy				phy
.2031	a8		tay				tay
.2032	b5 00		lda $00,x			lda 	IM0,x
.2034	91 26		sta ($26),y			sta 	(basicStack),y
.2036	c8		iny				iny
.2037	b5 01		lda $01,x			lda 	IM1,x
.2039	91 26		sta ($26),y			sta 	(basicStack),y
.203b	c8		iny				iny
.203c	b5 02		lda $02,x			lda 	IM2,x
.203e	91 26		sta ($26),y			sta 	(basicStack),y
.2040	c8		iny				iny
.2041	b5 03		lda $03,x			lda 	IExp,x
.2043	91 26		sta ($26),y			sta 	(basicStack),y
.2045	7a		ply				ply
.2046	60		rts				rts
.2047					Command_NEXT:
.2047	a9 37		lda #$37			lda 	#STK_FOR
.2049	20 1a 23	jsr $231a			jsr 	StackCheckFrame
.204c	20 81 20	jsr $2081			jsr 	_CNLoadValue 				; load index value to R0.
.204f	a2 10		ldx #$10			ldx 	#IFR1 						; load adding value to R1.
.2051	a9 06		lda #$06			lda 	#6
.2053	20 19 20	jsr $2019			jsr 	CFLoadR0X
.2056	20 cc 25	jsr $25cc			jsr 	IFloatAdd 					; add them together and write back.
.2059	20 a4 20	jsr $20a4			jsr 	_CNSaveValue
.205c	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.205e	a2 10		ldx #$10			ldx 	#IFR1
.2060	20 19 20	jsr $2019			jsr 	CFLoadR0X
.2063	20 a4 28	jsr $28a4			jsr 	IFloatCompare 				; compare terminal vs current
.2066	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2068	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero
.206b	f0 10		beq $207d			beq 	_CNLoopBack
.206d	a5 0f		lda $0f				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.206f	5a		phy				phy
.2070	a0 09		ldy #$09			ldy 	#6+IExp
.2072	51 26		eor ($26),y			eor 	(basicStack),y
.2074	7a		ply				ply
.2075	29 40		and #$40			and 	#IFSign
.2077	f0 04		beq $207d			beq 	_CNLoopBack
.2079	20 0c 23	jsr $230c			jsr 	StackClose		 			; return
.207c	60		rts				rts
.207d					_CNLoopBack:
.207d	20 34 23	jsr $2334			jsr 	STKLoadCodePosition 		; loop back
.2080	60		rts				rts
.2081					_CNLoadValue:
.2081	5a		phy				phy
.2082	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2084	b1 26		lda ($26),y			lda 	(basicStack),y
.2086	85 22		sta $22				sta 	zTemp2
.2088	c8		iny				iny
.2089	b1 26		lda ($26),y			lda 	(basicStack),y
.208b	85 23		sta $23				sta 	zTemp2+1
.208d	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.208f	b1 22		lda ($22),y			lda 	(zTemp2),y
.2091	85 0c		sta $0c				sta 	IFR0+IM0
.2093	c8		iny				iny
.2094	b1 22		lda ($22),y			lda 	(zTemp2),y
.2096	85 0d		sta $0d				sta 	IFR0+IM1
.2098	c8		iny				iny
.2099	b1 22		lda ($22),y			lda 	(zTemp2),y
.209b	85 0e		sta $0e				sta 	IFR0+IM2
.209d	c8		iny				iny
.209e	b1 22		lda ($22),y			lda 	(zTemp2),y
.20a0	85 0f		sta $0f				sta 	IFR0+IExp
.20a2	7a		ply				ply
.20a3	60		rts				rts
.20a4					_CNSaveValue:
.20a4	5a		phy				phy
.20a5	a0 00		ldy #$00			ldy 	#0
.20a7	a5 0c		lda $0c				lda 	IFR0+IM0
.20a9	91 22		sta ($22),y			sta 	(zTemp2),y
.20ab	c8		iny				iny
.20ac	a5 0d		lda $0d				lda 	IFR0+IM1
.20ae	91 22		sta ($22),y			sta 	(zTemp2),y
.20b0	c8		iny				iny
.20b1	a5 0e		lda $0e				lda 	IFR0+IM2
.20b3	91 22		sta ($22),y			sta 	(zTemp2),y
.20b5	c8		iny				iny
.20b6	a5 0f		lda $0f				lda 	IFR0+IExp
.20b8	91 22		sta ($22),y			sta 	(zTemp2),y
.20ba	7a		ply				ply
.20bb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.20bc					IfCommand:
.20bc	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 				; Get the if test.
.20bf	b1 1c		lda ($1c),y			lda 	(codePtr),y					; what follows ?
.20c1	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.20c3	d0 0a		bne $20cf			bne 	_IfStructured 				; we still support it.
.20c5	c8		iny				iny 								; consume THEN
.20c6	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero 			; is it zero
.20c9	f0 01		beq $20cc			beq 	_IfFail 					; if fail, go to next line
.20cb	60		rts				rts 								; if THEN just continue
.20cc					_IfFail:
.20cc	4c ad 12	jmp $12ad			jmp 	RUNEndOfLine
.20cf					_IfStructured:
.20cf	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero 			; is it zero
.20d2	d0 07		bne $20db			bne 	_IfExit 					; if not, then continue normally.
.20d4	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.20d6	a2 85		ldx #$85			ldx 	#PR_ENDIF
.20d8	20 02 21	jsr $2102			jsr 	ScanForward 				; and run from there
.20db					_IfExit:
.20db	60		rts				rts
.20dc					ElseCode:
.20dc	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.20de	aa		tax				tax 								; so just go to the structure exit
.20df	20 02 21	jsr $2102			jsr 	ScanForward
.20e2	60		rts				rts
.20e3					EndIf:
.20e3	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.20e4					Command_REPEAT:
.20e4	a9 02		lda #$02			lda 	#STK_REPEAT
.20e6	20 ee 22	jsr $22ee			jsr 	StackOpen
.20e9	20 22 23	jsr $2322			jsr 	STKSaveCodePosition 		; save loop position
.20ec	60		rts				rts
.20ed					Command_UNTIL:
.20ed	a9 02		lda #$02			lda 	#STK_REPEAT
.20ef	20 1a 23	jsr $231a			jsr 	StackCheckFrame
.20f2	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 				; work out the test
.20f5	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero 			; check if zero
.20f8	f0 04		beq $20fe			beq 	_CULoopBack 				; if so keep looping
.20fa	20 0c 23	jsr $230c			jsr 	StackClose		 			; return
.20fd	60		rts				rts
.20fe					_CULoopBack:
.20fe	20 34 23	jsr $2334			jsr 	STKLoadCodePosition 		; loop back
.2101	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scan.asm

.2102					ScanForward:
.2102	85 1e		sta $1e				sta 	zTemp0 						; save scan options in zTemp0
.2104	86 1f		stx $1f				stx 	zTemp0+1
.2106	64 20		stz $20				stz 	zTemp1 						; clear structure count.
.2108					_ScanForwardLoop:
.2108	a5 20		lda $20				lda 	zTemp1 						; if structure count non zero, don't check for end.
.210a	d0 0a		bne $2116			bne 	_ScanNoCheck
.210c	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; reached either target token.
.210e	c5 1e		cmp $1e				cmp 	zTemp0
.2110	f0 49		beq $215b			beq 	_ScanExit
.2112	c5 1f		cmp $1f				cmp 	zTemp0+1
.2114	f0 45		beq $215b			beq 	_ScanExit
.2116					_ScanNoCheck:
.2116	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get the token and consume it.
.2118	c8		iny				iny
.2119	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.211b	f0 37		beq $2154			beq		_ScanDataItem
.211d	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.211f	f0 33		beq $2154			beq 	_ScanDataItem
.2121	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2123	f0 1b		beq $2140			beq 	_ScanNextLine
.2125	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2127	d0 01		bne $212a			bne 	_ScanNoShift
.2129	c8		iny				iny
.212a					_ScanNoShift:
.212a	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.212c	b0 da		bcs $2108			bcs 	_ScanForwardLoop
.212e	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2130	90 d6		bcc $2108			bcc 	_ScanForwardLoop
.2132	aa		tax				tax 								; access the table to get the adjustment.
.2133	18		clc				clc
.2134	a5 20		lda $20				lda 	zTemp1 						; add it to structure count.
.2136	7d c5 17	adc $17c5,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2139	85 20		sta $20				sta 	zTemp1
.213b	10 cb		bpl $2108			bpl		_ScanForwardLoop 			; error if -ve ?
.213d	4c 0c 22	jmp $220c		jmp	ErrorV_structure
.2140					_ScanNextLine:
.2140	18		clc				clc	 								; forward to next line.
.2141	b2 1c		lda ($1c)			lda 	(codePtr)
.2143	65 1c		adc $1c				adc 	codePtr
.2145	85 1c		sta $1c				sta 	codePtr
.2147	90 02		bcc $214b			bcc 	_ScanNoCarry
.2149	e6 1d		inc $1d				inc 	codePtr+1
.214b					_ScanNoCarry:
.214b	a0 03		ldy #$03			ldy 	#3
.214d	b2 1c		lda ($1c)			lda 	(codePtr) 					; off end of program ?
.214f	d0 b7		bne $2108			bne 	_ScanForwardLoop
.2151	4c 0c 22	jmp $220c		jmp	ErrorV_structure
.2154					_ScanDataItem:
.2154	98		tya				tya
.2155	38		sec				sec
.2156	71 1c		adc ($1c),y			adc 	(codePtr),y
.2158	a8		tay				tay
.2159	80 ad		bra $2108			bra 	_ScanForwardLoop
.215b					_ScanExit:
.215b	c8		iny				iny 								; consume final token.
.215c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.215d					Command_WHILE:
.215d	5a		phy				phy 								; save position of the test
.215e	20 ca 14	jsr $14ca			jsr 	EXPEvalNumber 				; work out the while test.
.2161	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero 			; check if zero
.2164	f0 0e		beq $2174			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2166	98		tya				tya 								; position *after* test.
.2167	7a		ply				ply 								; restore position before test, at WHILE
.2168	88		dey				dey 								; so we execute the WHILE command again.
.2169	48		pha				pha 								; push after test on the stack
.216a	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.216c	20 ee 22	jsr $22ee			jsr 	StackOpen
.216f	20 22 23	jsr $2322			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2172	7a		ply				ply 								; restore the position *after* the test
.2173	60		rts				rts
.2174					_WHExitLoop:
.2174	68		pla				pla 								; throw post loop position
.2175	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2177	aa		tax				tax
.2178	20 02 21	jsr $2102			jsr 	ScanForward
.217b	60		rts				rts
.217c					Command_WEND:
.217c	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.217e	20 1a 23	jsr $231a			jsr 	StackCheckFrame
.2181	20 34 23	jsr $2334			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2184	20 0c 23	jsr $230c			jsr 	StackClose		 			; erase the frame
.2187	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2188					ErrorV_syntax:
.2188	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>218b	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>2193	72 72 6f 72 00
.2198					ErrorV_range:
.2198	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>219b	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>21a3	61 6e 67 65 00
.21a8					ErrorV_value:
.21a8	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>21ab	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>21b3	65 00
.21b5					ErrorV_type:
.21b5	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>21b8	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>21c0	6d 61 74 63 68 00
.21c6					ErrorV_unimplemented:
.21c6	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>21c9	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>21d1	65 6d 65 6e 74 65 64 00
.21d9					ErrorV_assert:
.21d9	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>21dc	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>21e4	61 69 6c 00
.21e8					ErrorV_internal:
.21e8	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>21eb	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>21f3	20 45 72 72 6f 72 00
.21fa					ErrorV_divzero:
.21fa	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>21fd	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>2205	79 20 5a 65 72 6f 00
.220c					ErrorV_structure:
.220c	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>220f	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>2217	65 20 49 6d 62 61 6c 61 6e 63 65 00
.2223					ErrorV_stop:
.2223	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>2226	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>222e	53 74 6f 70 70 65 64 00
.2236					ErrorV_data:
.2236	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>2239	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>2241	61 74 61 00
.2245					ErrorV_redefine:
.2245	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>2248	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>2250	64 65 66 69 6e 65 64 00
.2258					ErrorV_index:
.2258	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>225b	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>2263	79 20 49 6e 64 65 78 00
.226b					ErrorV_memory:
.226b	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>226e	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>2276	65 6d 6f 72 79 00
.227c					ErrorV_uninitialised:
.227c	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>227f	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>2287	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2296					ErrorV_string:
.2296	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>2299	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>22a1	6e 67 20 4c 65 6e 67 74 68 00
.22ab					ErrorV_variable:
.22ab	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>22ae	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>22b6	20 4d 69 73 73 69 6e 67 00
.22bf					ErrorV_stack:
.22bf	20 b8 2c	jsr $2cb8		jsr	ErrorHandler
>22c2	53 74 61 63 6b 20 46 75			.text	"Stack Full",0
>22ca	6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.22cd					ERRCheckLParen:
.22cd	b1 1c		lda ($1c),y			lda 	(codePtr),y
.22cf	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.22d1	d0 18		bne $22eb			bne 	ERRSyntaxError
.22d3	c8		iny				iny
.22d4	60		rts				rts
.22d5					ERRCheckRParen:
.22d5	b1 1c		lda ($1c),y			lda 	(codePtr),y
.22d7	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.22d9	d0 10		bne $22eb			bne 	ERRSyntaxError
.22db	c8		iny				iny
.22dc	60		rts				rts
.22dd					ERRCheckComma:
.22dd	b1 1c		lda ($1c),y			lda 	(codePtr),y
.22df	c9 99		cmp #$99			cmp 	#PR_COMMA
.22e1	d0 08		bne $22eb			bne 	ERRSyntaxError
.22e3	c8		iny				iny
.22e4	60		rts				rts
.22e5					ERRCheckA:
.22e5	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.22e7	d0 02		bne $22eb			bne 	ERRSyntaxError
.22e9	c8		iny				iny
.22ea	60		rts				rts
.22eb					ERRSyntaxError:
.22eb	4c 88 21	jmp $2188		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.22ee					StackOpen:
.22ee	48		pha				pha 								; save frame byte
.22ef	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.22f1	0a		asl a				asl 	a 							; claim twice this for storage
.22f2	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.22f4	38		sec				sec 								; so basically subtracting from
.22f5	65 26		adc $26				adc 	basicStack 	 				; basicStack
.22f7	85 26		sta $26				sta 	basicStack
.22f9	b0 0a		bcs $2305			bcs 	_SONoBorrow
>22fb	db						.byte 	$DB
.22fc	c6 27		dec $27				dec 	basicStack+1
.22fe	a5 27		lda $27				lda 	basicStack+1 				; reached the bottom ?
.2300	cd 4c 04	cmp $044c			cmp 	basicStackEnd
.2303	f0 04		beq $2309			beq 	_SOMemory
.2305					_SONoBorrow:
.2305	68		pla				pla 								; get marker back and write at TOS
.2306	92 26		sta ($26)			sta 	(basicStack)
.2308	60		rts				rts
.2309					_SOMemory:
.2309	4c bf 22	jmp $22bf		jmp	ErrorV_stack
.230c					StackClose:
.230c	b2 26		lda ($26)			lda 	(basicStack) 				; get TOS marker
.230e	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2310	0a		asl a				asl 	a 							; claim twice this.
.2311	65 26		adc $26				adc 	basicStack 					; add to the stack pointer.
.2313	85 26		sta $26				sta 	basicStack
.2315	90 02		bcc $2319			bcc 	_SCExit
.2317	e6 27		inc $27				inc 	basicStack+1
.2319					_SCExit:
.2319	60		rts				rts
.231a					StackCheckFrame:
.231a	d2 26		cmp ($26)			cmp		(basicStack) 				; check  frames match
.231c	d0 01		bne $231f			bne 	_SCFError 					; different, we have structures mixed up
.231e	60		rts				rts
.231f					_SCFError:
.231f	4c 0c 22	jmp $220c		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2322					STKSaveCodePosition:
.2322	5a		phy				phy
.2323	98		tya				tya 								; save Y at offset 1.
.2324	a0 01		ldy #$01			ldy 	#1
.2326	91 26		sta ($26),y			sta 	(basicStack),y
.2328	a5 1c		lda $1c				lda 	codePtr 					; save code (low) at 2
.232a	c8		iny				iny
.232b	91 26		sta ($26),y			sta 	(basicStack),y
.232d	a5 1d		lda $1d				lda 	codePtr+1 					; save code (high) at 3
.232f	c8		iny				iny
.2330	91 26		sta ($26),y			sta 	(basicStack),y
.2332	7a		ply				ply
.2333	60		rts				rts
.2334					STKLoadCodePosition:
.2334	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2336	b1 26		lda ($26),y			lda 	(basicStack),y
.2338	85 1d		sta $1d				sta 	codePtr+1
.233a	88		dey				dey
.233b	b1 26		lda ($26),y			lda 	(basicStack),y
.233d	85 1c		sta $1c				sta 	codePtr
.233f	88		dey				dey
.2340	b1 26		lda ($26),y			lda 	(basicStack),y 				; line offset to Y
.2342	a8		tay				tay
.2343	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2344					StackReset:
.2344	48		pha				pha 								; save top of memory
.2345	3a		dec a				dec 	a  							; end of stack = previous byte
.2346	85 27		sta $27				sta 	basicStack+1
.2348	a9 ff		lda #$ff			lda 	#$FF
.234a	85 26		sta $26				sta 	basicStack
.234c	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.234e	92 26		sta ($26)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2350	68		pla				pla 								; allocate pages for stack.
.2351	38		sec				sec
.2352	e9 02		sbc #$02			sbc 	#stackPages
.2354	8d 4c 04	sta $044c			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2357	60		rts				rts
.0026					basicStack:
>0026							.fill 	2
.044c					basicStackEnd:
>044c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2358					StringConcrete:
.2358	5a		phy				phy 								; save position on stack
.2359	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.235b	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.235d	b0 41		bcs $23a0			bcs 	_SALengthError
.235f	18		clc				clc 								; length of the new string
.2360	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2362	90 02		bcc $2366			bcc 	_SAHaveLength
.2364	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2366					_SAHaveLength:
.2366	48		pha				pha 								; save length to be allocated for concreting.
.2367	38		sec				sec
.2368	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.236a	6d 4e 04	adc $044e			adc 	stringMemory
.236d	8d 4e 04	sta $044e			sta 	stringMemory
.2370	85 22		sta $22				sta 	zTemp2 						; update storage address
.2372	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2374	6d 4f 04	adc $044f			adc 	stringMemory+1
.2377	8d 4f 04	sta $044f			sta 	stringMemory+1
.237a	85 23		sta $23				sta 	zTemp2+1
.237c	68		pla				pla 								; save length allocated in +0
.237d	92 22		sta ($22)			sta 	(zTemp2)
.237f	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2381	a0 01		ldy #$01			ldy 	#1
.2383	91 22		sta ($22),y			sta 	(zTemp2),y
.2385					_SACopyNewString:
.2385	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.2387	a0 02		ldy #$02			ldy 	#2
.2389	91 22		sta ($22),y			sta 	(zTemp2),y
.238b	aa		tax				tax 								; bytes to copy
.238c	f0 0c		beq $239a			beq 	_SACopyExit
.238e	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2390					_SACopyNSLoop:
.2390	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.2392	c8		iny				iny 								; write two on in string storage
.2393	c8		iny				iny
.2394	91 22		sta ($22),y			sta 	(zTemp2),y
.2396	88		dey				dey
.2397	ca		dex				dex									; until copied all the string lengths.
.2398	d0 f6		bne $2390			bne 	_SACopyNSLoop
.239a					_SACopyExit:
.239a	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.239c	a5 22		lda $22				lda 	zTemp2
.239e	7a		ply				ply
.239f	60		rts				rts
.23a0					_SALengthError:
.23a0	4c 96 22	jmp $2296		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.23a3					StringSystemInitialise:
.23a3	3a		dec a				dec 	a 							; make last byte of previous page.
.23a4	8d 4f 04	sta $044f			sta 	stringMemory+1
.23a7	85 1f		sta $1f				sta 	zTemp0+1
.23a9	a9 ff		lda #$ff			lda 	#$FF
.23ab	8d 4e 04	sta $044e			sta 	stringMemory
.23ae	85 1e		sta $1e				sta 	zTemp0
.23b0	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.23b2	92 1e		sta ($1e)			sta 	(zTemp0)
.23b4	60		rts				rts
.23b5					StringSpaceInitialise:
.23b5	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.23b7	8d 4d 04	sta $044d			sta 	stringInitialised
.23ba	ad 4e 04	lda $044e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.23bd	8d 50 04	sta $0450			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.23c0	ad 4f 04	lda $044f			lda 	stringMemory+1
.23c3	3a		dec a				dec 	a
.23c4	8d 51 04	sta $0451			sta 	stringTempPointer+1
.23c7	20 5b 10	jsr $105b			jsr 	ClearCheckMemory
.23ca	60		rts				rts
.23cb					StringTempAllocate:
.23cb	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.23cd	b0 2e		bcs $23fd			bcs 	_STALength
.23cf	2c 4d 04	bit $044d			bit 	stringInitialised 			; already initialised
.23d2	30 05		bmi $23d9			bmi 	_STAAllocate
.23d4	48		pha				pha 								; save value to subtract.
.23d5	20 b5 23	jsr $23b5			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.23d8	68		pla				pla 								; restore it
.23d9					_STAAllocate:
.23d9	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.23db	18		clc				clc  								; deliberate allows one more
.23dc	6d 50 04	adc $0450			adc 	stringTempPointer 			; subtract from temp pointer
.23df	8d 50 04	sta $0450			sta 	stringTempPointer
.23e2	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.23e4	85 28		sta $28				sta 	zsTemp 						; and zsTemp
.23e6	ad 51 04	lda $0451			lda 	stringTempPointer+1
.23e9	69 ff		adc #$ff			adc 	#$FF
.23eb	8d 51 04	sta $0451			sta 	stringTempPointer+1
.23ee	85 29		sta $29				sta 	zsTemp+1
.23f0	85 0d		sta $0d				sta 	IFR0+IM1
.23f2	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.23f4	a9 80		lda #$80			lda 	#$80
.23f6	85 0f		sta $0f				sta 	IFR0+IExp
.23f8	a9 00		lda #$00			lda 	#0 							; clear the target string
.23fa	92 28		sta ($28)			sta 	(zsTemp)
.23fc	60		rts				rts
.23fd					_STALength:
.23fd	4c 96 22	jmp $2296		jmp	ErrorV_string
.2400					StringTempWrite:
.2400	5a		phy				phy
.2401	48		pha				pha
.2402	b2 28		lda ($28)			lda 	(zsTemp)
.2404	1a		inc a				inc 	a
.2405	92 28		sta ($28)			sta 	(zsTemp)
.2407	a8		tay				tay
.2408	68		pla				pla
.2409	91 28		sta ($28),y			sta 	(zsTemp),y
.240b	7a		ply				ply
.240c	60		rts				rts
.0028					zsTemp:
>0028							.fill 	2
.044d					stringInitialised:
>044d							.fill 	1
.044e					stringMemory:
>044e							.fill 	2
.0450					stringTempPointer:
>0450							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.240d					VARArrayLookup:
.240d	85 1e		sta $1e				sta 	zTemp0 						; save the array address pointer in zTemp0
.240f	86 1f		stx $1f				stx 	zTemp0+1
.2411	b2 1e		lda ($1e)			lda 	(zTemp0)
.2413	48		pha				pha
.2414	5a		phy				phy
.2415	a0 01		ldy #$01			ldy 	#1
.2417	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2419	7a		ply				ply
.241a	48		pha				pha
.241b	20 dc 14	jsr $14dc			jsr 	EXPEvalInteger16 			; R0 now contains the index
.241e	68		pla				pla 								; array address to zTemp0
.241f	85 1f		sta $1f				sta 	zTemp0+1
.2421	68		pla				pla
.2422	85 1e		sta $1e				sta 	zTemp0
.2424	5a		phy				phy 								; save codePtr position.
.2425	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2427	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2429	48		pha				pha 								; save bit 15 on stack.
.242a	29 7f		and #$7f			and 	#$7F
.242c	85 20		sta $20				sta 	zTemp1
.242e	a5 0c		lda $0c				lda 	IFR0+IM0 					; check range of index
.2430	d2 1e		cmp ($1e)			cmp 	(zTemp0)
.2432	a5 0d		lda $0d				lda 	IFR0+IM1
.2434	e5 20		sbc $20				sbc 	zTemp1
.2436	b0 3a		bcs $2472			bcs 	_VALIndex
.2438	a5 0d		lda $0d				lda 	IFR0+IM1  					; sanity check
.243a	c9 40		cmp #$40			cmp 	#$40
.243c	b0 34		bcs $2472			bcs 	_VALIndex
.243e	06 0c		asl $0c				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2440	26 0d		rol $0d				rol 	IFR0+IM1
.2442	fa		plx				plx 								; get msb of size -> X
.2443	30 04		bmi $2449			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2445	06 0c		asl $0c				asl 	IFR0+IM0
.2447	26 0d		rol $0d				rol 	IFR0+IM1
.2449					_VARNotX4:
.2449	18		clc				clc 								; add the two for the size bytes
.244a	a5 0c		lda $0c				lda 	IFR0+IM0
.244c	69 02		adc #$02			adc 	#2
.244e	85 0c		sta $0c				sta 	IFR0+IM0
.2450	90 02		bcc $2454			bcc 	_VARNoCarry1
.2452	e6 0d		inc $0d				inc 	IFR0+IM1
.2454					_VARNoCarry1:
.2454	18		clc				clc 								; calculate the element address and push to stack.
.2455	a5 0c		lda $0c				lda 	IFR0+IM0
.2457	65 1e		adc $1e				adc 	zTemp0
.2459	48		pha				pha
.245a	a5 0d		lda $0d				lda 	IFR0+IM1
.245c	65 1f		adc $1f				adc 	zTemp0+1
.245e	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2460	30 04		bmi $2466			bmi 	_VARHasSubLevel
.2462	aa		tax				tax 								; address in XA
.2463	68		pla				pla
.2464	7a		ply				ply 								; restore Y and exit
.2465	60		rts				rts
.2466					_VARHasSubLevel:
.2466	aa		tax				tax 								; get link address in XA
.2467	68		pla				pla
.2468	7a		ply				ply 								; restore code position.
.2469	48		pha				pha
.246a	20 dd 22	jsr $22dd			jsr 	ERRCheckComma 				; comma required.
.246d	68		pla				pla
.246e	20 0d 24	jsr $240d			jsr 	VARArrayLookup 				; call it recursively
.2471	60		rts				rts
.2472					_VALIndex:
.2472	4c 58 22	jmp $2258		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2475					VARCreate:
.2475	5a		phy				phy
.2476	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2478	a2 00		ldx #$00			ldx 	#0
.247a	20 32 10	jsr $1032			jsr 	AllocateMemory
.247d	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.247f	86 21		stx $21				stx 	zTemp1+1
.2481	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2483	ad 54 04	lda $0454			lda 	VARHash
.2486	91 20		sta ($20),y			sta 	(zTemp1),y
.2488	c8		iny				iny 								; put address of name into +3,+4
.2489	ad 52 04	lda $0452			lda 	VARNameAddress
.248c	91 20		sta ($20),y			sta 	(zTemp1),y
.248e	c8		iny				iny
.248f	ad 53 04	lda $0453			lda 	VARNameAddress+1
.2492	91 20		sta ($20),y			sta 	(zTemp1),y
.2494	ad 55 04	lda $0455			lda 	VARType
.2497	29 01		and #$01			and 	#1
.2499	f0 06		beq $24a1			beq 	_CVNotString
.249b	a0 08		ldy #$08			ldy 	#5+3
.249d	a9 80		lda #$80			lda 	#$80
.249f	91 20		sta ($20),y			sta 	(zTemp1),y
.24a1					_CVNotString:
.24a1	ad 76 04	lda $0476			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.24a4	85 1e		sta $1e				sta 	zTemp0
.24a6	ad 77 04	lda $0477			lda 	VARHashEntry+1
.24a9	85 1f		sta $1f				sta 	zTemp0+1
.24ab	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.24ad	b2 1e		lda ($1e)			lda 	(zTemp0)
.24af	92 20		sta ($20)			sta 	(zTemp1)
.24b1	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.24b3	91 20		sta ($20),y			sta 	(zTemp1),y
.24b5	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.24b7	92 1e		sta ($1e)			sta 	(zTemp0)
.24b9	a5 21		lda $21				lda 	zTemp1+1
.24bb	91 1e		sta ($1e),y			sta 	(zTemp0),y
.24bd	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.24bf	a6 21		ldx $21				ldx 	zTemp1+1
.24c1	18		clc				clc 								; add 5 to point to the data.
.24c2	69 05		adc #$05			adc 	#5
.24c4	90 01		bcc $24c7			bcc 	_VCNoCarry
.24c6	e8		inx				inx
.24c7					_VCNoCarry:
.24c7	7a		ply				ply
.24c8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.24c9					VARFind:
.24c9	5a		phy				phy
.24ca	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.24cc	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.24ce	85 21		sta $21				sta 	zTemp1+1
.24d0	f0 1c		beq $24ee			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.24d2	b2 1e		lda ($1e)			lda 	(zTemp0)
.24d4	85 20		sta $20				sta 	zTemp1
.24d6					_VFLoop:
.24d6	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.24d8	b1 20		lda ($20),y			lda 	(zTemp1),y
.24da	cd 54 04	cmp $0454			cmp 	VARHash
.24dd	f0 12		beq $24f1			beq 	_VFHashesMatch 				; if so, check the name.
.24df					_VFNext:
.24df	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.24e1	aa		tax				tax
.24e2	a0 01		ldy #$01			ldy 	#1
.24e4	b1 20		lda ($20),y			lda 	(zTemp1),y
.24e6	85 21		sta $21				sta 	zTemp1+1
.24e8	86 20		stx $20				stx 	zTemp1
.24ea	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.24ec	d0 e8		bne $24d6			bne 	_VFLoop
.24ee					_VFExitFail:
.24ee	7a		ply				ply
.24ef	18		clc				clc
.24f0	60		rts				rts
.24f1					_VFHashesMatch:
.24f1	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.24f3	b1 20		lda ($20),y			lda 	(zTemp1),y
.24f5	85 22		sta $22				sta 	zTemp2
.24f7	c8		iny				iny
.24f8	b1 20		lda ($20),y			lda 	(zTemp1),y
.24fa	85 23		sta $23				sta 	zTemp2+1
.24fc	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.24fe					_VFNameCompLoop:
.24fe	c8		iny				iny 								; char at a time
.24ff	b9 56 04	lda $0456,y			lda 	VARBuffer,y
.2502	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.2504	d0 d9		bne $24df			bne 	_VFNext						; next entry if different.
.2506	c9 7c		cmp #$7c			cmp 	#$7C
.2508	90 f4		bcc $24fe			bcc 	_VFNameCompLoop 			; until done the whole lot.
.250a	18		clc				clc
.250b	a5 20		lda $20				lda 	zTemp1
.250d	a6 21		ldx $21				ldx 	zTemp1+1
.250f	69 05		adc #$05			adc 	#5
.2511	90 01		bcc $2514			bcc 	_VFNNoCarry
.2513	e8		inx				inx
.2514					_VFNNoCarry:
.2514	7a		ply				ply
.2515	38		sec				sec
.2516	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2517					VARGetInfo:
.2517	98		tya				tya 								; calculate the address of the identifier start.
.2518	18		clc				clc
.2519	65 1c		adc $1c				adc 	codePtr
.251b	8d 52 04	sta $0452			sta 	VARNameAddress
.251e	a5 1d		lda $1d				lda 	codePtr+1
.2520	69 00		adc #$00			adc 	#0
.2522	8d 53 04	sta $0453			sta 	VARNameAddress+1
.2525	9c 54 04	stz $0454			stz 	VARHash
.2528	a2 00		ldx #$00			ldx 	#0
.252a					_VARCopyName:
.252a	18		clc				clc 								; update the sum hash.
.252b	ad 54 04	lda $0454			lda 	VARHash
.252e	71 1c		adc ($1c),y			adc 	(codePtr),y
.2530	8d 54 04	sta $0454			sta 	VARHash
.2533	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.2535	c8		iny				iny
.2536	9d 56 04	sta $0456,x			sta 	VARBuffer,x
.2539	e8		inx				inx
.253a	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.253c	90 ec		bcc $252a			bcc 	_VARCopyName
.253e	8d 55 04	sta $0455			sta 	VARType 					; save type byte
.2541	29 03		and #$03			and 	#3 							; type is 0-3
.2543	0a		asl a				asl 	a
.2544	0a		asl a				asl 	a
.2545	85 1e		sta $1e				sta 	zTemp0
.2547	ad 54 04	lda $0454			lda 	VARHash 					; force into range of hash entries per type.
.254a	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.254c	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.254e	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.254f	69 78		adc #$78			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2551	85 1e		sta $1e				sta 	zTemp0
.2553	8d 76 04	sta $0476			sta 	VARHashEntry
.2556	a9 04		lda #$04			lda 	#VARHashTables >> 8
.2558	69 00		adc #$00			adc 	#0
.255a	85 1f		sta $1f				sta 	zTemp0+1
.255c	8d 77 04	sta $0477			sta 	VARHashEntry+1
.255f	60		rts				rts
.2560					VARClearHashTables:
.2560	a2 00		ldx #$00			ldx 	#0
.2562					_VCHRLoop:
.2562	a9 00		lda #$00			lda 	#0
.2564	9d 78 04	sta $0478,x			sta 	VARHashTables,x
.2567	e8		inx				inx
.2568	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.256a	d0 f6		bne $2562			bne 	_VCHRLoop
.256c	60		rts				rts
.0452					VARNameAddress:
>0452							.fill 	2
.0454					VARHash:
>0454							.fill 	1
.0455					VARType:
>0455							.fill 	1
.0456					VARBuffer:
>0456							.fill 	32
.0476					VARHashEntry:
>0476							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0478					VARHashTables:
>0478							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.256d					VARCheckSimple:
.256d	aa		tax				tax 								; save in X
.256e	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2570	c9 7c		cmp #$7c			cmp 	#$7C
.2572	d0 15		bne $2589			bne 	_VCSComplex
.2574	c8		iny				iny 								; consume the second byte, the type.
.2575	8a		txa				txa  								; character (40-7F) x 4
.2576	0a		asl a				asl 	a
.2577	0a		asl a				asl  	a
.2578	18		clc				clc
.2579	69 98		adc #$98			adc 	#FastVariables & $FF
.257b	85 0c		sta $0c				sta 	IFR0+IM0
.257d	a9 04		lda #$04			lda 	#FastVariables >> 8
.257f	69 00		adc #$00			adc 	#0
.2581	85 0d		sta $0d				sta 	IFR0+IM1
.2583	64 0e		stz $0e				stz 	IFR0+IM2
.2585	64 0f		stz $0f				stz 	IFR0+IExp
.2587	38		sec				sec 								; it's a reference
.2588	60		rts				rts
.2589					_VCSComplex:
.2589	88		dey				dey	 								; extract information.
.258a	20 17 25	jsr $2517			jsr 	VARGetInfo
.258d	20 c9 24	jsr $24c9			jsr 	VARFind 					; search for variable
.2590	b0 0a		bcs $259c			bcs 	_VCSHaveVariable
.2592	ad 55 04	lda $0455			lda 	VARType 					; error if arrays, cannot autocreate
.2595	29 02		and #$02			and 	#2
.2597	d0 25		bne $25be			bne 	_VCNoCreate
.2599	20 75 24	jsr $2475			jsr 	VARCreate 					; create variable
.259c					_VCSHaveVariable:
.259c	48		pha				pha 								; save LSB on the stack
.259d	ad 55 04	lda $0455			lda 	VARType 					; get var type, and shift bit 1 into carry
.25a0	6a		ror a				ror 	a
.25a1	6a		ror a				ror 	a
.25a2	68		pla				pla 								; restore LSB
.25a3	90 08		bcc $25ad			bcc 	_VCSNotArray 				; skip if not an array
.25a5	20 0d 24	jsr $240d			jsr 	VARArrayLookup 				; look for subscripts.
.25a8	48		pha				pha 								; check )
.25a9	20 d5 22	jsr $22d5			jsr 	ERRCheckRParen
.25ac	68		pla				pla
.25ad					_VCSNotArray:
.25ad	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.25af	85 0c		sta $0c				sta 	IFR0+IM0
.25b1	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.25b3	ad 55 04	lda $0455			lda 	VARType 					; number/string bit into carry
.25b6	6a		ror a				ror 	a
.25b7	a9 00		lda #$00			lda 	#0
.25b9	6a		ror a				ror 	a 							; now $00 or $80
.25ba	85 0f		sta $0f				sta 	IFR0+IExp
.25bc	38		sec				sec 								; it's a reference
.25bd	60		rts				rts
.25be					_VCNoCreate:
.25be	4c 7c 22	jmp $227c		jmp	ErrorV_uninitialised
.0498					FastVariables:
>0498							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.25c1					IFInitialise:
.25c1	9c 08 05	stz $0508			stz 	IFStackIndex
.25c4	60		rts				rts
.25c5					IFloatSubtract:
.25c5	da		phx				phx
.25c6	a2 0c		ldx #$0c			ldx 	#IFR0
.25c8	20 e1 2b	jsr $2be1			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.25cb	fa		plx				plx
.25cc					IFloatAdd:
.25cc	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.25ce	05 0f		ora $0f				ora 	IFR0+IExp
.25d0	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.25d2	d0 4e		bne $2622			bne 	_IFloatAddDecimals 			; decimal version.
.25d4					_IFAddSubMantissa:
.25d4	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.25d6	45 0f		eor $0f				eor 	IFR0+IExp
.25d8	29 40		and #$40			and 	#IFSign
.25da	d0 21		bne $25fd			bne 	_IFloatSubMantissa
.25dc	18		clc				clc 								; do the actual addition
.25dd	a5 0c		lda $0c			lda 	IFR0+IM0
.25df	75 00		adc $00,x		adc 		IM0,x
.25e1	85 0c		sta $0c			sta 	IFR0+IM0
.25e3	a5 0d		lda $0d			lda 	IFR0+IM1
.25e5	75 01		adc $01,x		adc 		IM1,x
.25e7	85 0d		sta $0d			sta 	IFR0+IM1
.25e9	a5 0e		lda $0e			lda 	IFR0+IM2
.25eb	75 02		adc $02,x		adc 		IM2,x
.25ed	85 0e		sta $0e			sta 	IFR0+IM2
.25ef	10 29		bpl $261a			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.25f1	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.25f3	20 05 2c	jsr $2c05			jsr 	IFloatShiftRight
.25f6	20 2f 2c	jsr $2c2f			jsr 	IFloatIncExponent
.25f9	d0 1f		bne $261a			bne 	_IFloatAddExit
.25fb	38		sec				sec 								; overflowed numerically.
.25fc	60		rts				rts
.25fd					_IFloatSubMantissa:
.25fd	38		sec				sec 								; do the subtraction R0-Rx
.25fe	a5 0c		lda $0c			lda 	IFR0+IM0
.2600	f5 00		sbc $00,x		sbc 		IM0,x
.2602	85 0c		sta $0c			sta 	IFR0+IM0
.2604	a5 0d		lda $0d			lda 	IFR0+IM1
.2606	f5 01		sbc $01,x		sbc 		IM1,x
.2608	85 0d		sta $0d			sta 	IFR0+IM1
.260a	a5 0e		lda $0e			lda 	IFR0+IM2
.260c	f5 02		sbc $02,x		sbc 		IM2,x
.260e	85 0e		sta $0e			sta 	IFR0+IM2
.2610	b0 08		bcs $261a			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2612	a2 0c		ldx #$0c			ldx 	#IFR0
.2614	20 e9 2b	jsr $2be9			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2617	20 e1 2b	jsr $2be1			jsr 	IFloatNegate 				; negate
.261a					_IFloatAddExit:
.261a	18		clc				clc
.261b	60		rts				rts
.261c					_IFloatZeroAdd:
.261c	fa		plx				plx 								; return this value in R0
.261d	20 67 2b	jsr $2b67			jsr 	IFloatCopyFromRegister
.2620	18		clc				clc
.2621	60		rts				rts
.2622					_IFloatAddDecimals:
.2622	20 cf 2b	jsr $2bcf			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2625	f0 f3		beq $261a			beq 	_IFloatAddExit
.2627	20 0d 2c	jsr $2c0d			jsr 	IFloatNormalise 			; normalise RX
.262a	da		phx				phx 								; normalise R0
.262b	a2 0c		ldx #$0c			ldx 	#IFR0
.262d	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero
.2630	f0 ea		beq $261c			beq 	_IFloatZeroAdd
.2632	20 0d 2c	jsr $2c0d			jsr 	IFloatNormalise
.2635	fa		plx				plx
.2636	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.2638	29 3f		and #$3f			and 	#IFXMask
.263a	38		sec				sec
.263b	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.263d	85 0a		sta $0a				sta 	iTemp0
.263f	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2641	29 3f		and #$3f			and 	#IFXMask
.2643	38		sec				sec
.2644	e9 20		sbc #$20			sbc 	#$20
.2646	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.2648	b0 02		bcs $264c			bcs 	_IFloatHaveLarger
.264a	a5 0a		lda $0a				lda 	iTemp0
.264c					_IFloatHaveLarger:
.264c	18		clc				clc 								; get the actual one back.
.264d	69 20		adc #$20			adc 	#$20 						; shift both to that.
.264f	20 5c 26	jsr $265c			jsr 	_IFShiftXToA
.2652	da		phx				phx
.2653	a2 0c		ldx #$0c			ldx 	#IFR0
.2655	20 5c 26	jsr $265c			jsr 	_IFShiftXToA
.2658	fa		plx				plx
.2659	4c d4 25	jmp $25d4			jmp 	_IFAddSubMantissa 			; do the adding bit.
.265c					_IFShiftXToA:
.265c	8d 00 05	sta $0500			sta 	IFTarget
.265f	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero 			; check adding zero ?
.2662	f0 11		beq $2675			beq 	_IFSXExit
.2664					_IFSXLoop:
.2664	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2666	29 3f		and #$3f			and 	#IFXMask
.2668	cd 00 05	cmp $0500			cmp 	IFTarget
.266b	f0 08		beq $2675			beq 	_IFSXExit
.266d	20 05 2c	jsr $2c05			jsr 	IFloatShiftRight
.2670	20 2f 2c	jsr $2c2f			jsr 	IFloatIncExponent
.2673	80 ef		bra $2664			bra 	_IFSXLoop
.2675					_IFSXExit:
.2675	60		rts				rts
.0500					IFTarget:
>0500							.fill 	1
.2676					IFloatMultiply:
.2676	8e 00 05	stx $0500			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2679	20 31 27	jsr $2731			jsr 	IFCalculateNewSign
.267c	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.267e	05 0f		ora $0f				ora 	IFR0+IExp
.2680	29 3f		and #$3f			and 	#IFXMask
.2682	15 01		ora $01,x			ora 	IM1,x
.2684	05 0d		ora $0d				ora 	IFR0+IM1
.2686	15 02		ora $02,x			ora 	IM2,x
.2688	05 0e		ora $0e				ora 	IFR0+IM2
.268a	d0 0a		bne $2696			bne 	_IFMStandard
.268c	20 b2 2b	jsr $2bb2			jsr 	IFloatMultiply8BitRx
.268f	ad 02 05	lda $0502			lda 	IFNewSign
.2692	85 0f		sta $0f				sta 	IFR0+IExp
.2694	18		clc				clc
.2695	60		rts				rts
.2696					_IFMStandard:
.2696	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2698	20 28 27	jsr $2728			jsr 	IFMSignExtend
.269b	8d 01 05	sta $0501			sta 	IFNewExponent
.269e	a5 0f		lda $0f				lda 	IFR0+IExp
.26a0	20 28 27	jsr $2728			jsr 	IFMSignExtend
.26a3	18		clc				clc
.26a4	6d 01 05	adc $0501			adc 	IFNewExponent
.26a7	8d 01 05	sta $0501			sta 	IFNewExponent
.26aa	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.26ac	20 78 2b	jsr $2b78			jsr 	IFloatCopyToRegister
.26af	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.26b1	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.26b4					_IFMLoop:
.26b4	a2 18		ldx #$18			ldx 	#IFRTemp
.26b6	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero
.26b9	f0 3a		beq $26f5			beq 	_IFMExit
.26bb	ae 00 05	ldx $0500			ldx 	IFTarget 					; look at adder MSB
.26be	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.26c0	10 03		bpl $26c5			bpl	 	_IFMTargetOkay
.26c2	20 19 27	jsr $2719			jsr 	_IFMShiftAll
.26c5					_IFMTargetOkay:
.26c5	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.26c7	29 01		and #$01			and 	#1
.26c9	f0 16		beq $26e1			beq 	_IFMNoAdd
.26cb	ae 00 05	ldx $0500			ldx 	IFTarget 					; add adder
.26ce	18		clc				clc
.26cf	a5 0c		lda $0c			lda 	IFR0+IM0
.26d1	75 00		adc $00,x		adc 		IM0,x
.26d3	85 0c		sta $0c			sta 	IFR0+IM0
.26d5	a5 0d		lda $0d			lda 	IFR0+IM1
.26d7	75 01		adc $01,x		adc 		IM1,x
.26d9	85 0d		sta $0d			sta 	IFR0+IM1
.26db	a5 0e		lda $0e			lda 	IFR0+IM2
.26dd	75 02		adc $02,x		adc 		IM2,x
.26df	85 0e		sta $0e			sta 	IFR0+IM2
.26e1					_IFMNoAdd:
.26e1	a5 0e		lda $0e				lda 	IFR0+IM2
.26e3	10 03		bpl $26e8			bpl 	_IFMResultOkay
.26e5	20 19 27	jsr $2719			jsr 	_IFMShiftAll
.26e8					_IFMResultOkay:
.26e8	a2 18		ldx #$18			ldx 	#IFRTemp
.26ea	20 05 2c	jsr $2c05			jsr 	IFloatShiftRight
.26ed	ae 00 05	ldx $0500			ldx 	IFTarget
.26f0	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.26f3	80 bf		bra $26b4			bra 	_IFMLoop
.26f5					_IFMExit:
.26f5	ad 01 05	lda $0501			lda 	IFNewExponent 				; validate new exponent.
.26f8	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.26fa	90 0f		bcc $270b			bcc 	_IFMOkay
.26fc	c9 e0		cmp #$e0			cmp 	#$E0
.26fe	b0 0b		bcs $270b			bcs 	_IFMOkay
.2700	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2702	f0 13		beq $2717			beq 	_IFMError
.2704	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.2706	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.2709	18		clc				clc
.270a	60		rts				rts
.270b					_IFMOkay:
.270b	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.270d	0d 02 05	ora $0502			ora 	IFNewSign
.2710	85 0f		sta $0f				sta 	IFR0+IExp
.2712	18		clc				clc
.2713	60		rts				rts
.2714	4c ff ff	jmp $ffff			jmp 	$FFFF
.2717					_IFMError:
.2717	38		sec				sec
.2718	60		rts				rts
.2719					_IFMShiftAll:
.2719	a2 0c		ldx #$0c			ldx 	#IFR0
.271b	20 05 2c	jsr $2c05			jsr 	IFloatShiftRight
.271e	ae 00 05	ldx $0500			ldx 	IFTarget
.2721	20 05 2c	jsr $2c05			jsr 	IFloatShiftRight
.2724	ee 01 05	inc $0501			inc 	IFNewExponent
.2727	60		rts				rts
.2728					IFMSignExtend:
.2728	29 3f		and #$3f			and 	#IFXMask
.272a	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.272c	90 02		bcc $2730			bcc 	_IFMNoSXX
.272e	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2730					_IFMNoSXX:
.2730	60		rts				rts
.2731					IFCalculateNewSign:
.2731	b5 03		lda $03,x			lda 	IExp,x
.2733	45 0f		eor $0f				eor 	IFR0+IExp
.2735	29 40		and #$40			and 	#IFSign
.2737	8d 02 05	sta $0502			sta 	IFNewSign
.273a	60		rts				rts
.0501					IFNewExponent:
>0501							.fill 	1
.0502					IFNewSign:
>0502							.fill 	1
.273b					IFloatDivideInteger:
.273b	20 54 27	jsr $2754			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.273e	b0 06		bcs $2746			bcs 	_IFDIExit
.2740	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.2742	20 67 2b	jsr $2b67			jsr 	IFloatCopyFromRegister
.2745	18		clc				clc
.2746					_IFDIExit:
.2746	60		rts				rts
.2747					IFloatModulusInteger:
.2747	20 54 27	jsr $2754			jsr 	IFloatDivideIntegerCommon
.274a	b0 07		bcs $2753			bcs 	_IFMIExit
.274c	ae 00 05	ldx $0500			ldx 	IFTarget
.274f	20 67 2b	jsr $2b67			jsr 	IFloatCopyFromRegister
.2752	18		clc				clc
.2753					_IFMIExit:
.2753	60		rts				rts
.2754					IFloatDivideIntegerCommon:
.2754	8e 00 05	stx $0500			stx 	IFTarget  					; this is s1, s0 = R0
.2757	20 31 27	jsr $2731			jsr 	IFCalculateNewSign 			; calculate sign of result
.275a	20 82 27	jsr $2782			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.275d	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.275f	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero
.2762	f0 1c		beq $2780			beq 	_IFDIDivZero
.2764	ae 00 05	ldx $0500			ldx 	IFTarget 					; zero Rx (S1)
.2767	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.276a	5a		phy				phy
.276b	a0 18		ldy #$18			ldy 	#24
.276d					_IFDILoop:
.276d	20 93 27	jsr $2793			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2770	20 9f 27	jsr $279f			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2773	88		dey				dey
.2774	d0 f7		bne $276d			bne 	_IFDILoop 					; do it 24 times
.2776	7a		ply				ply
.2777	ad 02 05	lda $0502			lda 	IFNewSign 					; set sign of result.
.277a	29 40		and #$40			and 	#IFSign
.277c	85 1b		sta $1b				sta 	IFRTemp+IExp
.277e	18		clc				clc 								; is okay.
.277f	60		rts				rts
.2780					_IFDIDivZero:
.2780	38		sec				sec
.2781	60		rts				rts
.2782					IFDCopyRXToRTemp:
.2782	b5 00		lda $00,x			lda 	IM0,x
.2784	85 18		sta $18				sta 	IFRTemp+IM0
.2786	b5 01		lda $01,x			lda 	IM1,x
.2788	85 19		sta $19				sta 	IFRTemp+IM1
.278a	b5 02		lda $02,x			lda 	IM2,x
.278c	85 1a		sta $1a				sta 	IFRTemp+IM2
.278e	b5 03		lda $03,x			lda 	IExp,x
.2790	85 1b		sta $1b				sta 	IFRTemp+IExp
.2792	60		rts				rts
.2793					IFDShiftSTempS1Left:
.2793	a2 18		ldx #$18			ldx 	#IFRTemp
.2795	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft
.2798	ae 00 05	ldx $0500			ldx 	IFTarget
.279b	20 fe 2b	jsr $2bfe			jsr 	IFloatRotateLeft
.279e	60		rts				rts
.279f					IFDTrySubtract:
.279f	ae 00 05	ldx $0500			ldx 	IFTarget 					; s1 = Rx
.27a2	38		sec				sec 								; subtract, saving the results on the stack.
.27a3	b5 00		lda $00,x			lda 	IM0,x
.27a5	e5 0c		sbc $0c				sbc 	IFR0+IM0
.27a7	48		pha				pha
.27a8	b5 01		lda $01,x			lda 	IM1,x
.27aa	e5 0d		sbc $0d				sbc 	IFR0+IM1
.27ac	48		pha				pha
.27ad	b5 02		lda $02,x			lda 	IM2,x
.27af	e5 0e		sbc $0e				sbc 	IFR0+IM2
.27b1	b0 03		bcs $27b6			bcs 	_IFDCanSubtract
.27b3	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.27b4	68		pla				pla
.27b5	60		rts				rts
.27b6					_IFDCanSubtract:
.27b6	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.27b8	68		pla				pla
.27b9	95 01		sta $01,x			sta 	IM1,x
.27bb	68		pla				pla
.27bc	95 00		sta $00,x			sta 	IM0,x
.27be	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.27c0	d0 06		bne $27c8			bne 	_IFDCSExit
.27c2	e6 19		inc $19				inc 	IFRTemp+IM1
.27c4	d0 02		bne $27c8			bne 	_IFDCSExit
.27c6	e6 1a		inc $1a				inc 	IFRTemp+IM2
.27c8					_IFDCSExit:
.27c8	60		rts				rts
.27c9					IFloatBitwiseAnd:
.27c9	5a		phy				phy
.27ca	20 0e 28	jsr $280e			jsr 	IFPreProcessBitwise 		; set up everything.
.27cd	d0 0f		bne $27de			bne 	_IFBAExit
.27cf					_IFBALoop:
.27cf	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.27d2	35 00		and $00,x			and 	IM0,x
.27d4	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.27d7	e8		inx				inx
.27d8	c8		iny				iny
.27d9	c0 03		cpy #$03			cpy 	#3
.27db	d0 f2		bne $27cf			bne 	_IFBALoop
.27dd	18		clc				clc
.27de					_IFBAExit:
.27de	7a		ply				ply
.27df	60		rts				rts
.27e0					IFloatBitwiseOr:
.27e0	5a		phy				phy
.27e1	20 0e 28	jsr $280e			jsr 	IFPreProcessBitwise 		; set up everything.
.27e4	d0 0f		bne $27f5			bne 	_IFBAExit
.27e6					_IFBALoop:
.27e6	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.27e9	15 00		ora $00,x			ora 	IM0,x
.27eb	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.27ee	e8		inx				inx
.27ef	c8		iny				iny
.27f0	c0 03		cpy #$03			cpy 	#3
.27f2	d0 f2		bne $27e6			bne 	_IFBALoop
.27f4	18		clc				clc
.27f5					_IFBAExit:
.27f5	7a		ply				ply
.27f6	60		rts				rts
.27f7					IFloatBitwiseXor:
.27f7	5a		phy				phy
.27f8	20 0e 28	jsr $280e			jsr 	IFPreProcessBitwise 		; set up everything.
.27fb	d0 0f		bne $280c			bne 	_IFBAExit
.27fd					_IFBALoop:
.27fd	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2800	55 00		eor $00,x			eor 	IM0,x
.2802	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2805	e8		inx				inx
.2806	c8		iny				iny
.2807	c0 03		cpy #$03			cpy 	#3
.2809	d0 f2		bne $27fd			bne 	_IFBALoop
.280b	18		clc				clc
.280c					_IFBAExit:
.280c	7a		ply				ply
.280d	60		rts				rts
.280e					IFPreProcessBitwise:
.280e	a0 00		ldy #$00			ldy 	#0 							; set index.
.2810	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.2812	15 03		ora $03,x			ora 	IExp,x
.2814	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2816	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2818	38		sec				sec 								; carry set just in cases.
.2819	60		rts				rts
.281a					IFloatAbsoluteR0:
.281a	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.281c	29 bf		and #$bf			and 	#IFSign ^ 255
.281e	85 0f		sta $0f				sta 	IFR0+IExp
.2820	18		clc				clc
.2821	60		rts				rts
.2822					IFloatSquareRootR0:
.2822	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.2824	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero
.2827	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.2829	29 40		and #$40			and 	#IFSign
.282b	d0 2f		bne $285c			bne 	_IFSRFail
.282d	20 0d 2c	jsr $2c0d			jsr 	IFloatNormalise 			; it will work better !
.2830	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.2832	20 78 2b	jsr $2b78			jsr 	IFloatCopyToRegister
.2835	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2837	20 28 27	jsr $2728			jsr 	IFMSignExtend 				; sign extended version of the exponent
.283a	18		clc				clc
.283b	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.283d	85 0f		sta $0f				sta 	IFR0+IExp
.283f	4a		lsr a				lsr 	a 							; which we can halve.
.2840	38		sec				sec 								; convert back
.2841	e9 17		sbc #$17			sbc 	#23
.2843	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2845	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.2847	20 5e 28	jsr $285e			jsr 	_IFSRNewton
.284a	20 5e 28	jsr $285e			jsr 	_IFSRNewton
.284d	20 5e 28	jsr $285e			jsr 	_IFSRNewton
.2850	20 5e 28	jsr $285e			jsr 	_IFSRNewton
.2853	18		clc				clc
.2854	60		rts				rts
.2855					_IFSRZero:
.2855	a2 0c		ldx #$0c			ldx 	#IFR0
.2857	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.285a	18		clc				clc
.285b	60		rts				rts
.285c					_IFSRFail:
.285c	38		sec				sec
.285d	60		rts				rts
.285e					_IFSRNewton:
.285e	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.2860	20 25 2b	jsr $2b25			jsr 	IFloatPushRx
.2863	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2865	20 25 2b	jsr $2b25			jsr 	IFloatPushRx
.2868	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.286a	20 f9 28	jsr $28f9			jsr 	IFloatDivideFloat
.286d	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.286f	20 46 2b	jsr $2b46			jsr 	IFloatPullRx
.2872	20 cc 25	jsr $25cc			jsr 	IFloatAdd 					; now guess + original/guess
.2875	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.2877	20 05 2c	jsr $2c05			jsr 	IFloatShiftRight
.287a	a2 10		ldx #$10			ldx 	#IFR1
.287c	20 46 2b	jsr $2b46			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.287f	60		rts				rts
.2880					IFloatFractionalR0:
.2880	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2882	29 3f		and #$3f			and 	#IFXMask
.2884	f0 17		beq $289d			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2886	20 1a 28	jsr $281a			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2889	a2 0c		ldx #$0c			ldx 	#IFR0
.288b	20 0d 2c	jsr $2c0d			jsr 	IFloatNormalise 			; normalise R0
.288e	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.2890	20 78 2b	jsr $2b78			jsr 	IFloatCopyToRegister
.2893	20 d6 28	jsr $28d6			jsr 	IFloatIntegerR0 			; take integer part of R0
.2896	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.2898	20 c5 25	jsr $25c5			jsr 	IFloatSubtract
.289b	80 05		bra $28a2			bra 	_FIPExit
.289d					_FIPZero:
.289d	a2 0c		ldx #$0c			ldx 	#IFR0
.289f	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.28a2					_FIPExit:
.28a2	18		clc				clc
.28a3	60		rts				rts
.28a4					IFloatCompare:
.28a4	20 c5 25	jsr $25c5			jsr 	IFloatSubtract 				; subtract R0 from RX.
.28a7	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.28a9	05 0f		ora $0f				ora 	IFR0+IExp
.28ab	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.28ad	29 3f		and #$3f			and 	#IFXMask
.28af	d0 19		bne $28ca			bne 	_IFCNonInteger
.28b1	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero 			; check if zero
.28b4	f0 0f		beq $28c5			beq 	_IFCZero
.28b6					_IFCReturnSign:
.28b6	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.28b8	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.28ba	48		pha				pha
.28bb	a9 01		lda #$01			lda 	#1
.28bd	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte 				; return to +1
.28c0	68		pla				pla 								; sign bit back
.28c1	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.28c3	18		clc				clc
.28c4	60		rts				rts
.28c5					_IFCZero:
.28c5	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.28c8	18		clc				clc
.28c9	60		rts				rts
.28ca					_IFCNonInteger:
.28ca	a5 0c		lda $0c				lda 	IFR0+IM0
.28cc	29 00		and #$00			and		#$00
.28ce	05 0d		ora $0d				ora 	IFR0+IM1
.28d0	05 0e		ora $0e				ora 	IFR0+IM2
.28d2	f0 f1		beq $28c5			beq 	_IFCZero 					; near enough !
.28d4	80 e0		bra $28b6			bra 	_IFCReturnSign 				; return the sign of the difference.
.28d6					IFloatIntegerR0:
.28d6	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.28d8	29 3f		and #$3f			and 	#IFXMask
.28da	f0 1b		beq $28f7			beq 	_FIPExit 					; if so do nothing
.28dc	a2 0c		ldx #$0c			ldx 	#IFR0
.28de	20 0d 2c	jsr $2c0d			jsr 	IFloatNormalise 			; normalise
.28e1	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero 			; is it zero ?
.28e4	f0 0e		beq $28f4			beq 	_FIPZero 					; if so return zero.
.28e6					_FIPShift:
.28e6	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.28e8	29 20		and #$20			and 	#$20 						; still -ve
.28ea	f0 0b		beq $28f7			beq 	_FIPExit
.28ec	20 05 2c	jsr $2c05			jsr 	IFloatShiftRight 			; shift mantissa right
.28ef	20 2f 2c	jsr $2c2f			jsr 	IFloatIncExponent 			; bump exponent
.28f2	80 f2		bra $28e6			bra 	_FIPShift
.28f4					_FIPZero:
.28f4	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.28f7					_FIPExit:
.28f7	18		clc				clc
.28f8	60		rts				rts
.28f9					IFloatDivideFloat:
.28f9	8e 00 05	stx $0500			stx 	IFTarget  					; this is s1, s0 = R0
.28fc	20 31 27	jsr $2731			jsr 	IFCalculateNewSign 			; calculate sign of result
.28ff	20 0d 2c	jsr $2c0d			jsr 	IFloatNormalise 			; normalise RX
.2902	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.2904	20 0d 2c	jsr $2c0d			jsr 	IFloatNormalise
.2907	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero
.290a	f0 56		beq $2962			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.290c	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.290e	20 28 27	jsr $2728			jsr 	IFMSignExtend
.2911	8d 01 05	sta $0501			sta 	IFNewExponent
.2914	ae 00 05	ldx $0500			ldx 	IFTarget 					; calculate s1.exponent
.2917	b5 03		lda $03,x			lda 	IExp,x
.2919	20 28 27	jsr $2728			jsr 	IFMSignExtend
.291c	38		sec				sec
.291d	ed 01 05	sbc $0501			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2920	38		sec				sec
.2921	e9 17		sbc #$17			sbc 	#23
.2923	8d 01 05	sta $0501			sta 	IFNewExponent
.2926	20 64 29	jsr $2964			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2929	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.292b	10 08		bpl $2935			bpl 	_IFDFNoShiftResult
.292d	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.292f	20 05 2c	jsr $2c05			jsr 	IFloatShiftRight
.2932	ee 01 05	inc $0501			inc 	IFNewExponent
.2935					_IFDFNoShiftResult:
.2935	ad 01 05	lda $0501			lda 	IFNewExponent 				; underflow/overflow check.
.2938	30 06		bmi $2940			bmi 	_IFDFCheckUnderflow
.293a	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.293c	b0 24		bcs $2962			bcs 	_IFDFDivZero
.293e	80 11		bra $2951			bra		_IFDFExit
.2940					_IFDFCheckUnderflow:
.2940	ad 01 05	lda $0501			lda 	IFNewExponent 				; shift into a legal exponent.
.2943	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2945	b0 0a		bcs $2951			bcs 	_IFDFExit
.2947	ee 01 05	inc $0501			inc 	IFNewExponent
.294a	a2 18		ldx #$18			ldx 	#IFRTemp
.294c	20 05 2c	jsr $2c05			jsr 	IFloatShiftRight
.294f	80 ef		bra $2940			bra 	_IFDFCheckUnderflow
.2951					_IFDFExit:
.2951	ad 01 05	lda $0501			lda 	IFNewExponent 				; combine exponent and sign.
.2954	29 3f		and #$3f			and 	#IFXMask
.2956	0d 02 05	ora $0502			ora 	IFNewSign
.2959	85 1b		sta $1b				sta 	IFRTemp+IExp
.295b	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.295d	20 67 2b	jsr $2b67			jsr 	IFloatCopyFromRegister
.2960	18		clc				clc
.2961	60		rts				rts
.2962					_IFDFDivZero:
.2962	38		sec				sec
.2963	60		rts				rts
.2964					IFloatDivideSupport:
.2964	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.2966	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.2969	5a		phy				phy 								; main division loop x 23
.296a	a0 17		ldy #$17			ldy 	#23
.296c					_IFDSLoop:
.296c	20 9f 27	jsr $279f			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.296f	20 93 27	jsr $2793			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2972	88		dey				dey
.2973	d0 f7		bne $296c			bne 	_IFDSLoop 					; do it 24 times
.2975	7a		ply				ply
.2976	60		rts				rts
.2977					IFloatIntegerToStringR0:
.2977	8d 03 05	sta $0503			sta 	IFBase 						; save base to use.
.297a	20 57 2c	jsr $2c57			jsr 	IFloatBufferReset			; empty buffer
.297d	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.297f	29 3f		and #$3f			and 	#IFXMask
.2981	d0 1e		bne $29a1			bne 	_IFIFail
.2983	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.2985	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero
.2988	f0 0e		beq $2998			beq 	_IFINotNegative
.298a	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.298c	29 40		and #$40			and 	#IFSign
.298e	f0 08		beq $2998			beq 	_IFINotNegative
.2990	a9 2d		lda #$2d			lda 	#"-"						; output -
.2992	20 66 2c	jsr $2c66			jsr 	IFloatBufferWrite
.2995	20 e1 2b	jsr $2be1			jsr 	IFloatNegate 				; tidy up !
.2998					_IFINotNegative:
.2998	20 a3 29	jsr $29a3			jsr 	_IFIRecursiveConvert 		; start converting
.299b	20 5e 2c	jsr $2c5e			jsr 	IFloatGetBufferAddress
.299e	18		clc				clc
.299f	80 01		bra $29a2			bra 	_IFIExit
.29a1					_IFIFail:
.29a1	38		sec				sec
.29a2					_IFIExit:
.29a2	60		rts				rts
.29a3					_IFIRecursiveConvert:
.29a3	a2 10		ldx #$10			ldx 	#IFR1
.29a5	20 78 2b	jsr $2b78			jsr 	IFloatCopyToRegister 		; R0->R1
.29a8	a2 0c		ldx #$0c			ldx 	#IFR0
.29aa	ad 03 05	lda $0503			lda 	IFBase 						; Base -> R0
.29ad	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.29b0	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.29b2	20 3b 27	jsr $273b			jsr 	IFloatDivideInteger
.29b5	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.29b7	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero
.29ba	f0 09		beq $29c5			beq 	_IFIOutDigit
.29bc	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.29be	48		pha				pha
.29bf	20 a3 29	jsr $29a3			jsr 	_IFIRecursiveConvert 		; convert the divider
.29c2	68		pla				pla
.29c3	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.29c5					_IFIOutDigit:
.29c5	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.29c7	c9 0a		cmp #$0a			cmp	 	#10
.29c9	90 02		bcc $29cd			bcc 	_IFINotHex
.29cb	69 06		adc #$06			adc 	#6
.29cd					_IFINotHex:
.29cd	69 30		adc #$30			adc 	#48
.29cf	20 66 2c	jsr $2c66			jsr 	IFloatBufferWrite
.29d2	60		rts				rts
.0503					IFBase:
>0503							.fill 	1
.29d3					IFloatFloatToStringR0:
.29d3	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.29d5	20 25 2b	jsr $2b25			jsr 	IFloatPushRx
.29d8	20 78 2b	jsr $2b78			jsr 	IFloatCopyToRegister
.29db	20 d6 28	jsr $28d6			jsr 	IFloatIntegerR0				; make R0 integer
.29de	a9 0a		lda #$0a			lda 	#10 						; base 10.
.29e0	20 77 29	jsr $2977			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.29e3	9c 04 05	stz $0504			stz 	IFloatDecimalCount 			; zero the decimal count.
.29e6	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.29e8	29 3f		and #$3f			and 	#IFXMask
.29ea	f0 44		beq $2a30			beq 	_IFFSExit
.29ec					_IFloatFracLoop:
.29ec	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.29ee	20 67 2b	jsr $2b67			jsr 	IFloatCopyFromRegister
.29f1	20 80 28	jsr $2880			jsr 	IFloatFractionalR0
.29f4	20 0d 2c	jsr $2c0d			jsr 	IFloatNormalise
.29f7	a2 14		ldx #$14			ldx 	#IFR2
.29f9	20 78 2b	jsr $2b78			jsr 	IFloatCopyToRegister 		; copy to R2
.29fc	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.29fe	a9 0a		lda #$0a			lda 	#10
.2a00	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.2a03	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.2a05	20 76 26	jsr $2676			jsr 	IFloatMultiply
.2a08	a2 14		ldx #$14			ldx 	#IFR2
.2a0a	20 78 2b	jsr $2b78			jsr 	IFloatCopyToRegister
.2a0d	20 d6 28	jsr $28d6			jsr 	IFloatIntegerR0 			; get integer part of R0
.2a10	ad 04 05	lda $0504			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2a13	c9 03		cmp #$03			cmp 	#3
.2a15	f0 16		beq $2a2d			beq 	_IFFSExitStripZero
.2a17	ad 04 05	lda $0504			lda 	IFloatDecimalCount 			; written the DP yet ?
.2a1a	d0 05		bne $2a21			bne 	_IFloatNotFirst
.2a1c	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2a1e	20 66 2c	jsr $2c66			jsr 	IFloatBufferWrite
.2a21					_IFloatNotFirst:
.2a21	ee 04 05	inc $0504			inc 	IFloatDecimalCount
.2a24	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.2a26	09 30		ora #$30			ora 	#"0"						; ASCII
.2a28	20 66 2c	jsr $2c66			jsr 	IFloatBufferWrite 			; write to the buffer.
.2a2b	80 bf		bra $29ec			bra 	_IFloatFracLoop
.2a2d					_IFFSExitStripZero:
.2a2d	20 75 2c	jsr $2c75			jsr 	IFloatStripTrailingZeros
.2a30					_IFFSExit:
.2a30	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.2a32	20 46 2b	jsr $2b46			jsr 	IFloatPullRx
.2a35	20 5e 2c	jsr $2c5e			jsr 	IFloatGetBufferAddress
.2a38	18		clc				clc
.2a39	60		rts				rts
.0504					IFloatDecimalCount:
>0504							.fill 	1
.2a3a					IFloatStringToFloatR0:
.2a3a	8d 05 05	sta $0505			sta 	IFCount 					; save it out.
.2a3d	86 0a		stx $0a				stx 	iTemp0
.2a3f	84 0b		sty $0b				sty 	iTemp0+1
.2a41	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.2a43	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.2a46	9c 06 05	stz $0506			stz 	IFSignFlag 					; clear the sign flag
.2a49	20 d6 2a	jsr $2ad6			jsr 	IFSTFGetNext 				; get first
.2a4c	f0 1b		beq $2a69			beq 	_IFSTFFail 					; no character
.2a4e	90 10		bcc $2a60			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2a50	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2a52	d0 15		bne $2a69			bne 	_IFSTFFail
.2a54	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2a56	8d 06 05	sta $0506			sta 	IFSignFlag
.2a59					_IFSTFLoop:
.2a59	20 d6 2a	jsr $2ad6			jsr 	IFSTFGetNext 				; get next
.2a5c	b0 0b		bcs $2a69			bcs 	_IFSTFFail 					; bad character.
.2a5e	f0 11		beq $2a71			beq 	_IFSTFExit 					; end of data
.2a60					_IFSTFHaveChar:
.2a60	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2a62	f0 08		beq $2a6c			beq 	_IFSTFDecimal
.2a64	20 fa 2a	jsr $2afa			jsr 	IFSTFAddR0 					; add number in
.2a67	80 f0		bra $2a59			bra 	_IFSTFLoop 					; keep going until . or end.
.2a69					_IFSTFFail:
.2a69	38		sec				sec
.2a6a	80 0d		bra $2a79			bra 	_IFSTFReturn
.2a6c					_IFSTFDecimal:
.2a6c	20 81 2a	jsr $2a81			jsr 	IFSTFDecimal 				; call the decimal places code.
.2a6f	b0 08		bcs $2a79			bcs 	_IFSTFReturn 				; error
.2a71					_IFSTFExit:
.2a71	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2a73	0d 06 05	ora $0506			ora 	IFSignFlag
.2a76	85 0f		sta $0f				sta 	IFR0+IExp
.2a78	18		clc				clc
.2a79					_IFSTFReturn:
.2a79	60		rts				rts
.2a7a					IFloatAddDecimalToR0:
.2a7a	8d 05 05	sta $0505			sta 	IFCount 					; save it out.
.2a7d	86 0a		stx $0a				stx 	iTemp0
.2a7f	84 0b		sty $0b				sty 	iTemp0+1
.2a81					IFSTFDecimal:
.2a81	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2a83	20 25 2b	jsr $2b25			jsr 	IFloatPushRx
.2a86	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2a88	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero
.2a8b	9c 07 05	stz $0507			stz 	IFDecimalPlaces
.2a8e					_IFSTDLoop:
.2a8e	20 d6 2a	jsr $2ad6			jsr 	IFSTFGetNext 				; get next
.2a91	b0 41		bcs $2ad4			bcs 	_IFSTFFail2 				; bad character.
.2a93	f0 11		beq $2aa6			beq 	_IFSTFComplete 				; end of data, work out the result.
.2a95	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2a97	f0 39		beq $2ad2			beq 	_IFSTFExit2
.2a99	20 fa 2a	jsr $2afa			jsr 	IFSTFAddR0 					; add number in
.2a9c	ee 07 05	inc $0507			inc 	IFDecimalPlaces 			; count decimals
.2a9f	ad 07 05	lda $0507			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2aa2	c9 03		cmp #$03			cmp 	#3
.2aa4	90 e8		bcc $2a8e			bcc 	_IFSTDLoop
.2aa6					_IFSTFComplete:
.2aa6	ad 07 05	lda $0507			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2aa9	f0 27		beq $2ad2			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2aab	3a		dec a				dec 	a 							; table indexed from 1.
.2aac	0a		asl a				asl 	a
.2aad	0a		asl a				asl 	a
.2aae	aa		tax				tax
.2aaf	bd 11 2b	lda $2b11,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2ab2	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2ab4	bd 12 2b	lda $2b12,x			lda 	TableTen+1,x
.2ab7	85 11		sta $11				sta  	IFR1+IM1
.2ab9	bd 13 2b	lda $2b13,x			lda 	TableTen+2,x
.2abc	85 12		sta $12				sta  	IFR1+IM2
.2abe	bd 14 2b	lda $2b14,x			lda 	TableTen+3,x
.2ac1	85 13		sta $13				sta  	IFR1+IExp
.2ac3	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2ac5	20 76 26	jsr $2676			jsr 	IFloatMultiply
.2ac8	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.2aca	20 46 2b	jsr $2b46			jsr 	IFloatPullRx
.2acd	a2 10		ldx #$10			ldx 	#IFR1
.2acf	20 cc 25	jsr $25cc			jsr 	IFloatAdd
.2ad2					_IFSTFExit2:
.2ad2	18		clc				clc
.2ad3	60		rts				rts
.2ad4					_IFSTFFail2:
.2ad4	38		sec				sec
.2ad5	60		rts				rts
.2ad6					IFSTFGetNext:
.2ad6	ad 05 05	lda $0505			lda 	IFCount  					; if count is zero, return with Z set.
.2ad9	f0 19		beq $2af4			beq 	_IFSTFReturnOk
.2adb	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2add	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2adf	d0 02		bne $2ae3			bne 	_IFSTFGNNoCarry
.2ae1	e6 0b		inc $0b				inc 	iTemp0+1
.2ae3					_IFSTFGNNoCarry:
.2ae3	ce 05 05	dec $0505			dec 	IFCount 					; dec count.
.2ae6	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2ae8	f0 08		beq $2af2			beq 	_IFSTFGOkay
.2aea	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2aec	90 08		bcc $2af6			bcc 	_IFSTFGFail
.2aee	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2af0	b0 04		bcs $2af6			bcs 	_IFSTFGFail
.2af2					_IFSTFGOkay:
.2af2	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2af4					_IFSTFReturnOk:
.2af4	18		clc				clc
.2af5	60		rts				rts
.2af6					_IFSTFGFail:
.2af6	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2af8	38		sec				sec
.2af9	60		rts				rts
.2afa					IFSTFAddR0:
.2afa	29 0f		and #$0f			and 	#15 						; to int value
.2afc	48		pha				pha 								; save it.
.2afd	a9 0a		lda #$0a			lda 	#10
.2aff	a2 10		ldx #$10			ldx 	#IFR1
.2b01	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.2b04	20 76 26	jsr $2676			jsr 	IFloatMultiply
.2b07	68		pla				pla
.2b08	a2 10		ldx #$10			ldx 	#IFR1
.2b0a	20 d8 2b	jsr $2bd8			jsr 	IFloatSetByte
.2b0d	20 cc 25	jsr $25cc			jsr 	IFloatAdd
.2b10	60		rts				rts
.0505					IFCount:
>0505							.fill 	1
.0506					IFSignFlag:
>0506							.fill 	1
.0507					IFDecimalPlaces:
>0507							.fill 	1
.2b11					TableTen:
>2b11	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2b15	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2b19	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2b1d	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2b21	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2b25					IFloatPushRx:
.2b25	5a		phy				phy
.2b26	ac 08 05	ldy $0508			ldy 	IFStackIndex
.2b29	b5 00		lda $00,x			lda 	IM0,x
.2b2b	99 09 05	sta $0509,y			sta 	IFStack,y
.2b2e	b5 01		lda $01,x			lda 	IM1,x
.2b30	99 0a 05	sta $050a,y			sta 	IFStack+1,y
.2b33	b5 02		lda $02,x			lda 	IM2,x
.2b35	99 0b 05	sta $050b,y			sta 	IFStack+2,y
.2b38	b5 03		lda $03,x			lda 	IExp,x
.2b3a	99 0c 05	sta $050c,y			sta 	IFStack+3,y
.2b3d	c8		iny				iny
.2b3e	c8		iny				iny
.2b3f	c8		iny				iny
.2b40	c8		iny				iny
.2b41	8c 08 05	sty $0508			sty 	IFStackIndex
.2b44	7a		ply				ply
.2b45	60		rts				rts
.2b46					IFloatPullRx:
.2b46	5a		phy				phy
.2b47	ac 08 05	ldy $0508			ldy 	IFStackIndex
.2b4a	88		dey				dey
.2b4b	88		dey				dey
.2b4c	88		dey				dey
.2b4d	88		dey				dey
.2b4e	b9 09 05	lda $0509,y			lda 	IFStack,y
.2b51	95 00		sta $00,x			sta 	IM0,x
.2b53	b9 0a 05	lda $050a,y			lda 	IFStack+1,y
.2b56	95 01		sta $01,x			sta 	IM1,x
.2b58	b9 0b 05	lda $050b,y			lda 	IFStack+2,y
.2b5b	95 02		sta $02,x			sta 	IM2,x
.2b5d	b9 0c 05	lda $050c,y			lda 	IFStack+3,y
.2b60	95 03		sta $03,x			sta 	IExp,x
.2b62	8c 08 05	sty $0508			sty 	IFStackIndex
.2b65	7a		ply				ply
.2b66	60		rts				rts
.0508					IFStackIndex:
>0508							.fill 	1
.0509					IFStack:
>0509							.fill 	16*4
.2b67					IFloatCopyFromRegister:
.2b67	b5 00		lda $00,x			lda 	0,x
.2b69	85 0c		sta $0c				sta 	IFR0
.2b6b	b5 01		lda $01,x			lda 	1,x
.2b6d	85 0d		sta $0d				sta 	IFR0+1
.2b6f	b5 02		lda $02,x			lda 	2,x
.2b71	85 0e		sta $0e				sta 	IFR0+2
.2b73	b5 03		lda $03,x			lda 	3,x
.2b75	85 0f		sta $0f				sta 	IFR0+3
.2b77	60		rts				rts
.2b78					IFloatCopyToRegister:
.2b78	a5 0c		lda $0c				lda 	IFR0
.2b7a	95 00		sta $00,x			sta 	0,x
.2b7c	a5 0d		lda $0d				lda 	IFR0+1
.2b7e	95 01		sta $01,x			sta 	1,x
.2b80	a5 0e		lda $0e				lda 	IFR0+2
.2b82	95 02		sta $02,x			sta 	2,x
.2b84	a5 0f		lda $0f				lda 	IFR0+3
.2b86	95 03		sta $03,x			sta 	3,x
.2b88	60		rts				rts
.2b89					IFloatLoadInline:
.2b89	68		pla				pla 								; pop address off to iTemp0
.2b8a	85 0a		sta $0a				sta 	iTemp0
.2b8c	68		pla				pla
.2b8d	85 0b		sta $0b				sta 	iTemp0+1
.2b8f	a0 01		ldy #$01			ldy 	#1
.2b91	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2b93	95 00		sta $00,x			sta 	0,x
.2b95	c8		iny				iny
.2b96	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.2b98	95 01		sta $01,x			sta 	1,x
.2b9a	c8		iny				iny
.2b9b	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2b9d	95 02		sta $02,x			sta 	2,x
.2b9f	c8		iny				iny
.2ba0	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2ba2	95 03		sta $03,x			sta 	3,x
.2ba4	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2ba5	a5 0a		lda $0a				lda 	iTemp0
.2ba7	69 05		adc #$05			adc 	#5
.2ba9	85 0a		sta $0a				sta 	iTemp0
.2bab	90 02		bcc $2baf			bcc 	_IFLINoCarry
.2bad	e6 0b		inc $0b				inc 	iTemp0+1
.2baf					_IFLINoCarry:
.2baf	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2bb2					IFloatMultiply8BitRx:
.2bb2	5a		phy		        phy
.2bb3	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2bb5	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2bb7	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2bb8	85 0c		sta $0c		        sta     IFR0+IM0
.2bba	84 0d		sty $0d		        sty     IFR0+IM1
.2bbc	a9 00		lda #$00	        lda     #0
.2bbe	a0 08		ldy #$08	        ldy     #8
.2bc0					_IFMLoop:
.2bc0	90 03		bcc $2bc5	        bcc     _IFMNoAdd
.2bc2	18		clc		        clc
.2bc3	65 0d		adc $0d		        adc     IFR0+IM1
.2bc5					_IFMNoAdd:
.2bc5	6a		ror a		        ror     a
.2bc6	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2bc8	88		dey		        dey
.2bc9	d0 f5		bne $2bc0	        bne     _IFMLoop
.2bcb	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2bcd	7a		ply		        ply
.2bce	60		rts		        rts
.2bcf					IFloatCheckZero:
.2bcf	b5 00		lda $00,x			lda 	IM0,x
.2bd1	15 01		ora $01,x			ora 	IM1,x
.2bd3	15 02		ora $02,x			ora 	IM2,x
.2bd5	60		rts				rts
.2bd6					IFloatSetZero:
.2bd6	a9 00		lda #$00			lda 	#0
.2bd8					IFloatSetByte:
.2bd8	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2bda	74 01		stz $01,x			stz 	IM1,x
.2bdc	74 02		stz $02,x			stz 	IM2,x
.2bde	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2be0	60		rts				rts
.2be1					IFloatNegate:
.2be1	b5 03		lda $03,x			lda 	IExp,x
.2be3	49 40		eor #$40			eor 	#IFSign
.2be5	95 03		sta $03,x			sta 	IExp,x
.2be7	18		clc				clc
.2be8	60		rts				rts
.2be9					IFloatMantissaNegate:
.2be9	38		sec				sec
.2bea	a9 00		lda #$00			lda 	#0
.2bec	f5 00		sbc $00,x			sbc 	IM0,x
.2bee	95 00		sta $00,x			sta 	IM0,x
.2bf0	a9 00		lda #$00			lda 	#0
.2bf2	f5 01		sbc $01,x			sbc 	IM1,x
.2bf4	95 01		sta $01,x			sta 	IM1,x
.2bf6	a9 00		lda #$00			lda 	#0
.2bf8	f5 02		sbc $02,x			sbc 	IM2,x
.2bfa	95 02		sta $02,x			sta 	IM2,x
.2bfc	60		rts				rts
.2bfd					IFloatShiftLeft:
.2bfd	18		clc				clc
.2bfe					IFloatRotateLeft:
.2bfe	36 00		rol $00,x			rol 	IM0,x
.2c00	36 01		rol $01,x			rol 	IM1,x
.2c02	36 02		rol $02,x			rol 	IM2,x
.2c04	60		rts				rts
.2c05					IFloatShiftRight:
.2c05	18		clc				clc
.2c06					IFloatRotateRight:
.2c06	76 02		ror $02,x			ror 	IM2,x
.2c08	76 01		ror $01,x			ror 	IM1,x
.2c0a	76 00		ror $00,x			ror 	IM0,x
.2c0c	60		rts				rts
.2c0d					IFloatNormalise:
.2c0d	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero 			; is it zero
.2c10	f0 18		beq $2c2a			beq 	_IFNExitZero 				; if so exit
.2c12					_IFNLoop:
.2c12	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2c14	29 c0		and #$c0			and 	#$C0
.2c16	c9 40		cmp #$40			cmp 	#$40
.2c18	f0 13		beq $2c2d			beq 	_IFNExitOkay 				; if so , then we are done.
.2c1a	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2c1c	29 3f		and #$3f			and 	#$3F
.2c1e	c9 20		cmp #$20			cmp 	#$20
.2c20	f0 0b		beq $2c2d			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2c22	20 43 2c	jsr $2c43			jsr 	IFloatDecExponent
.2c25	20 fd 2b	jsr $2bfd			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2c28	80 e8		bra $2c12			bra 	_IFNLoop
.2c2a					_IFNExitZero:
.2c2a	20 d6 2b	jsr $2bd6			jsr 	IFloatSetZero 				; set the result to zero
.2c2d					_IFNExitOkay:
.2c2d	18		clc				clc  								; return with CC.
.2c2e	60		rts				rts
.2c2f					IFloatIncExponent:
.2c2f	b5 03		lda $03,x			lda 	IExp,x
.2c31	48		pha				pha
.2c32	29 c0		and #$c0			and 	#$C0
.2c34	8d 49 05	sta $0549			sta 	IFXTemp
.2c37	68		pla				pla
.2c38	1a		inc a				inc 	a
.2c39	29 3f		and #$3f			and 	#$3F
.2c3b	48		pha				pha
.2c3c	0d 49 05	ora $0549			ora 	IFXTemp
.2c3f	95 03		sta $03,x			sta 	IExp,x
.2c41	68		pla				pla
.2c42	60		rts				rts
.2c43					IFloatDecExponent:
.2c43	b5 03		lda $03,x			lda 	IExp,x
.2c45	48		pha				pha
.2c46	29 c0		and #$c0			and 	#$C0
.2c48	8d 49 05	sta $0549			sta 	IFXTemp
.2c4b	68		pla				pla
.2c4c	3a		dec a				dec 	a
.2c4d	29 3f		and #$3f			and 	#$3F
.2c4f	48		pha				pha
.2c50	0d 49 05	ora $0549			ora 	IFXTemp
.2c53	95 03		sta $03,x			sta 	IExp,x
.2c55	68		pla				pla
.2c56	60		rts				rts
.0549					IFXTemp:
>0549							.fill 	1
.2c57					IFloatBufferReset:
.2c57	9c 4a 05	stz $054a			stz 	IFBufferCount
.2c5a	9c 4b 05	stz $054b			stz 	IFBuffer
.2c5d	60		rts				rts
.2c5e					IFloatGetBufferAddress:
.2c5e	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.2c60	a2 4b		ldx #$4b			ldx 	#(IFBuffer & $FF)
.2c62	ad 4a 05	lda $054a			lda 	IFBufferCount
.2c65	60		rts				rts
.2c66					IFloatBufferWrite:
.2c66	da		phx				phx
.2c67	ae 4a 05	ldx $054a			ldx 	IFBufferCount
.2c6a	9d 4b 05	sta $054b,x			sta 	IFBuffer,x
.2c6d	9e 4c 05	stz $054c,x			stz 	IFBuffer+1,x
.2c70	ee 4a 05	inc $054a			inc 	IFBufferCount
.2c73	fa		plx				plx
.2c74	60		rts				rts
.2c75					IFloatStripTrailingZeros:
.2c75	ae 4a 05	ldx $054a			ldx 	IFBufferCount
.2c78	bd 4a 05	lda $054a,x			lda 	IFBuffer-1,x
.2c7b	c9 30		cmp #$30			cmp		#"0"
.2c7d	d0 0f		bne $2c8e			bne 	_IFSTExit
.2c7f	bd 49 05	lda $0549,x			lda 	IFBuffer-2,x
.2c82	c9 2e		cmp #$2e			cmp 	#"."
.2c84	f0 08		beq $2c8e			beq 	_IFSTExit
.2c86	ce 4a 05	dec $054a			dec 	IFBufferCount
.2c89	9e 4a 05	stz $054a,x			stz 	IFBuffer-1,x
.2c8c	80 e7		bra $2c75			bra 	IFloatStripTrailingZeros
.2c8e					_IFSTExit:
.2c8e	60		rts				rts
.054a					IFBufferCount:
>054a							.fill 	1
.054b					IFBuffer:
>054b							.fill 	25
.2c8f					IFloatCheck:
.2c8f	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2c91	09 40		ora #$40			ora 	#IFSign
.2c93	85 0f		sta $0f				sta 	IFR0+IExp
.2c95	20 cc 25	jsr $25cc			jsr 	IFloatAdd 					; add allowed to error.
.2c98	a2 0c		ldx #$0c			ldx 	#IFR0
.2c9a	20 cf 2b	jsr $2bcf			jsr 	IFloatCheckZero 			; error if < 0
.2c9d	f0 06		beq $2ca5			beq 	_IFAOkay
.2c9f	a5 0f		lda $0f				lda 	IFR0+IExp
.2ca1	29 40		and #$40			and 	#IFSign
.2ca3	d0 01		bne $2ca6			bne 	_IFAFail
.2ca5					_IFAOkay:
.2ca5	60		rts				rts
.2ca6					_IFAFail:
.2ca6	38		sec				sec
.2ca7	68		pla				pla 								; get address - 2
.2ca8	e9 02		sbc #$02			sbc 	#2
.2caa	aa		tax				tax
.2cab	68		pla				pla
.2cac	e9 00		sbc #$00			sbc 	#0
.2cae	a8		tay				tay
.2caf	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2cb1					_IFAStop:
>2cb1	db						.byte 	$DB 						; display an error AA ADR ADR
.2cb2	80 fd		bra $2cb1			bra 	_IFAStop

;******  Return to file: basic.asm

.2cb4					NotImplemented:
.2cb4	a9 ff		lda #$ff			lda 	#$FF
.2cb6	80 04		bra $2cbc			bra 	EnterDbg
.2cb8					ErrorHandler:
.2cb8	fa		plx				plx
.2cb9	7a		ply				ply
.2cba	a9 ee		lda #$ee			lda 	#$EE
.2cbc					EnterDbg:
>2cbc	db						.byte 	$DB
.2cbd	4c bc 2c	jmp $2cbc			jmp 	EnterDbg

;******  End of listing
