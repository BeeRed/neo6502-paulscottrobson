
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Wed May 31 07:01:39 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 84 1c	jsr $1c84			jsr 	PGMSetBaseAddress
.1007	20 53 21	jsr $2153			jsr 	IFInitialise
.100a	4c 48 11	jmp $1148			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 b0 14	jsr $14b0			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 61 27	jsr $2761			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c ec 11	jmp $11ec		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 97 1c	jsr $1c97			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 0d 21	jsr $210d			jsr 	VARClearHashTables
.1028	20 b8 1f	jsr $1fb8			jsr 	StringSystemInitialise
.102b	60		rts				rts
.102c					AllocateMemory:
.102c	5a		phy				phy 								; save Y
.102d	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.102f	5a		phy				phy
.1030	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1032	5a		phy				phy
.1033	a8		tay				tay 								; count is now in XY
.1034					_AllocateLoop:
.1034	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1036	d0 04		bne $103c			bne 	_AllocateOne
.1038	c0 00		cpy #$00			cpy 	#0
.103a	f0 12		beq $104e			beq 	_AllocateExit
.103c					_AllocateOne:
.103c	a9 00		lda #$00			lda 	#0 							; zero byte
.103e	92 24		sta ($24)			sta 	(freeMemory)
.1040	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1042	d0 02		bne $1046			bne 	_AllocateSkipCarry
.1044	e6 25		inc $25				inc 	freeMemory+1
.1046					_AllocateSkipCarry:
.1046	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1048	d0 01		bne $104b			bne 	_AllocateSkipBorrow
.104a	ca		dex				dex
.104b					_AllocateSkipBorrow:
.104b	88		dey				dey
.104c	80 e6		bra $1034			bra 	_AllocateLoop
.104e					_AllocateExit:
.104e	fa		plx				plx 								; restore address
.104f	68		pla				pla
.1050	7a		ply				ply 								; restore Y
.1051	60		rts				rts
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.1052					NoExec01:
.1052					NoExec02:
.1052					NoExec03:
.1052					NoExec04:
.1052					NoExec05:
.1052					NoExec06:
.1052					NoExec07:
.1052	4c 9b 11	jmp $119b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1055					Command_Print:
.1055					Command_IP_Main:
.1055	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1056					_CPLoop:
.1056	08		php				php 								; save last action flag
.1057	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1059	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.105b	f0 3e		beq $109b			beq 	_CPExit 					; without consuming
.105d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.105f	f0 3a		beq $109b			beq 	_CPExit
.1061	68		pla				pla 								; throw last action flag
.1062	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1064	c8		iny				iny
.1065	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1067	f0 2f		beq $1098			beq 	_CPContinueWithSameLine
.1069	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.106b	f0 26		beq $1093			beq 	_CPTab
.106d	88		dey				dey 								; undo the get.
.106e	20 70 14	jsr $1470			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1071	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1073	10 14		bpl $1089			bpl 	_CPNumber
.1075	5a		phy				phy
.1076	18		clc				clc 								; string address to YX
.1077	a5 0c		lda $0c				lda 	IFR0+IM0
.1079	aa		tax				tax
.107a	a5 0d		lda $0d				lda 	IFR0+IM1
.107c	a8		tay				tay
.107d	e8		inx				inx 								; point to 1st character
.107e	d0 01		bne $1081			bne 	_CPNoCarry
.1080	c8		iny				iny
.1081					_CPNoCarry:
.1081	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1083	20 a4 10	jsr $10a4			jsr 	CPPrintAYX 					; print AYX
.1086	7a		ply				ply
.1087	80 cc		bra $1055			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1089					_CPNumber:
.1089	5a		phy				phy
.108a	20 65 25	jsr $2565			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.108d	20 a4 10	jsr $10a4			jsr 	CPPrintAYX 					; print AYX
.1090	7a		ply				ply
.1091	80 c2		bra $1055			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1093					_CPTab:
.1093	a9 09		lda #$09			lda 	#9 							; print TAB
.1095	20 b7 10	jsr $10b7			jsr 	CPPrintA
.1098					_CPContinueWithSameLine:
.1098	38		sec				sec 								; loop round with carry set, which
.1099	80 bb		bra $1056			bra 	_CPLoop 					; will inhibit final CR
.109b					_CPExit:
.109b	28		plp				plp 								; get last action flag
.109c	b0 05		bcs $10a3			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.109e	a9 0d		lda #$0d			lda 	#13 						; print new line
.10a0	20 b7 10	jsr $10b7			jsr 	CPPrintA
.10a3					_CPExit2:
.10a3	60		rts				rts
.10a4					CPPrintAYX:
.10a4	86 1e		stx $1e				stx 	zTemp0
.10a6	84 1f		sty $1f				sty 	zTemp0+1
.10a8	aa		tax				tax
.10a9	f0 0b		beq $10b6			beq 	_CPPrintExit
.10ab	a0 00		ldy #$00			ldy 	#0
.10ad					_CPPrintAYXLoop:
.10ad	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.10af	20 b7 10	jsr $10b7			jsr 	CPPrintA
.10b2	c8		iny				iny
.10b3	ca		dex				dex
.10b4	d0 f7		bne $10ad			bne 	_CPPrintAYXLoop
.10b6					_CPPrintExit:
.10b6	60		rts				rts
.10b7					CPPrintA:
.10b7	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.10ba					CommandLET:
.10ba	20 38 15	jsr $1538			jsr 	EXPTermR0 					; get term
.10bd	90 6d		bcc $112c			bcc 	_CLError 					; must be a reference term.
.10bf	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.10c1	48		pha				pha
.10c2	a5 0d		lda $0d				lda 	IFR0+IM1
.10c4	48		pha				pha
.10c5	a5 0f		lda $0f				lda 	IFR0+IExp
.10c7	48		pha				pha
.10c8	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.10ca	20 ea 12	jsr $12ea			jsr 	ERRCheckA
.10cd	20 70 14	jsr $1470			jsr 	EXPEvaluateExpression 		; right hand side.
.10d0	68		pla				pla 								; type of l-expr
.10d1	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.10d3	30 5a		bmi $112f			bmi 	_CLType
.10d5	fa		plx				plx 	 							; pop target address to zTemp0
.10d6	86 1f		stx $1f				stx 	zTemp0+1
.10d8	fa		plx				plx
.10d9	86 1e		stx $1e				stx 	zTemp0
.10db	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.10dd	30 15		bmi $10f4			bmi 	_CLStringAssign
.10df	5a		phy				phy
.10e0	a0 03		ldy #$03			ldy 	#3
.10e2	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10e4	88		dey				dey
.10e5	a5 0e		lda $0e				lda 	IFR0+IM2
.10e7	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10e9	88		dey				dey
.10ea	a5 0d		lda $0d				lda 	IFR0+IM1
.10ec	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10ee	a5 0c		lda $0c				lda 	IFR0+IM0
.10f0	92 1e		sta ($1e)			sta 	(zTemp0)
.10f2	7a		ply				ply
.10f3	60		rts				rts
.10f4					_CLStringAssign:
.10f4	5a		phy				phy
.10f5	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.10f7	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.10f9	12 1e		ora ($1e)			ora 	(zTemp0)
.10fb	f0 23		beq $1120			beq 	_CLConcreteString
.10fd	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.10ff	85 20		sta $20				sta 	zTemp1
.1101	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1103	85 21		sta $21				sta 	zTemp1+1
.1105	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.1107	38		sec				sec 								; we want 3 for slot size, status, string size.
.1108	e9 03		sbc #$03			sbc 	#3
.110a	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.110c	90 12		bcc $1120			bcc 	_CLConcreteString 			; if so, concrete the string again.
.110e	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1110	1a		inc a				inc 	a
.1111	aa		tax				tax
.1112	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1114					_CLReplaceString:
.1114	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.1116	c8		iny				iny
.1117	c8		iny				iny
.1118	91 20		sta ($20),y			sta 	(zTemp1),y
.111a	88		dey				dey
.111b	ca		dex				dex
.111c	d0 f6		bne $1114			bne 	_CLReplaceString
.111e	80 0a		bra $112a			bra 	_CLExit
.1120					_CLConcreteString:
.1120	20 6d 1f	jsr $1f6d			jsr 	StringConcrete  			; concreted string in XA.
.1123	a0 01		ldy #$01			ldy 	#1 							; store the address
.1125	92 1e		sta ($1e)			sta 	(zTemp0)
.1127	8a		txa				txa
.1128	91 1e		sta ($1e),y			sta 	(zTemp0),y
.112a					_CLExit:
.112a	7a		ply				ply
.112b	60		rts				rts
.112c					_CLError:
.112c	4c be 12	jmp $12be		jmp	ErrorV_variable
.112f					_CLType:
.112f	4c c8 11	jmp $11c8		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1132					Command_NEW:
.1132	20 8b 1c	jsr $1c8b			jsr 	PGMNewProgram
.1135	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1138	4c 95 11	jmp $1195			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.113b					Command_REM:
.113b					Command_REM2:
.113b	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.113d	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.113f	d0 06		bne $1147			bne 	_CRExit
.1141	c8		iny				iny 								; skip over it, it's a comment.
.1142	98		tya				tya
.1143	38		sec				sec
.1144	71 1c		adc ($1c),y			adc 	(codePtr),y
.1146	a8		tay				tay
.1147					_CRExit:
.1147	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1148					Command_RUN:
.1148	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.114b	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.114e	85 1d		sta $1d				sta 	codePtr+1
.1150	64 1c		stz $1c				stz 	codePtr
.1152	80 0b		bra $115f			bra 	RUNNewLine
.1154					RUNEndOfLine:
.1154	18		clc				clc 								; advance to next line.
.1155	b2 1c		lda ($1c)			lda 	(codePtr)
.1157	65 1c		adc $1c				adc 	codePtr
.1159	85 1c		sta $1c				sta 	codePtr
.115b	90 02		bcc $115f			bcc 	_RELNoCarry
.115d	e6 1d		inc $1d				inc 	codePtr+1
.115f					_RELNoCarry:
.115f					RUNNewLine:
.115f	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1161	9a		txs				txs
.1162	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.1164	f0 2f		beq $1195			beq 	Command_END
.1166	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.1168					RUNNewCommand:
.1168	9c 49 04	stz $0449			stz 	stringInitialised 			; reset string system.
.116b	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.116d	10 1a		bpl $1189			bpl		_RUNNotToken 				; probably an identifier
.116f	c8		iny				iny 								; consume token
.1170	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1172	f0 f4		beq $1168			beq 	RUNNewCommand
.1174	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1176	b0 0e		bcs $1186			bcs 	_RUNSyntax
.1178	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.117a	90 0a		bcc $1186			bcc 	_RUNSyntax
.117c	0a		asl a				asl 	a 							; double into X.
.117d	aa		tax				tax
.117e	20 83 11	jsr $1183			jsr 	_RUNDispatchMain			; call the main dispatcher
.1181	80 e5		bra $1168			bra 	RUNNewCommand
.1183					_RUNDispatchMain:
.1183	7c a1 19	jmp ($19a1,x)			jmp 	(VectorTable,x)
.1186					_RUNSyntax:
.1186	4c 9b 11	jmp $119b		jmp	ErrorV_syntax
.1189					_RUNNotToken:
.1189	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.118b	90 f9		bcc $1186			bcc 	_RUNSyntax
.118d	20 ba 10	jsr $10ba			jsr 	CommandLET 					; assignment
.1190	80 d6		bra $1168			bra 	RUNNewCommand 				; loop round.
.1192					Command_Shift_Handler:
.1192	4c d9 11	jmp $11d9		jmp	ErrorV_unimplemented
.1195					Command_END:
.1195	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1198					Command_STOP:
.1198	4c 36 12	jmp $1236		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.119b					ErrorV_syntax:
.119b	20 4a 28	jsr $284a		jsr	ErrorHandler
>119e	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>11a6	72 72 6f 72 00
.11ab					ErrorV_range:
.11ab	20 4a 28	jsr $284a		jsr	ErrorHandler
>11ae	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>11b6	61 6e 67 65 00
.11bb					ErrorV_value:
.11bb	20 4a 28	jsr $284a		jsr	ErrorHandler
>11be	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>11c6	65 00
.11c8					ErrorV_type:
.11c8	20 4a 28	jsr $284a		jsr	ErrorHandler
>11cb	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>11d3	6d 61 74 63 68 00
.11d9					ErrorV_unimplemented:
.11d9	20 4a 28	jsr $284a		jsr	ErrorHandler
>11dc	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>11e4	65 6d 65 6e 74 65 64 00
.11ec					ErrorV_assert:
.11ec	20 4a 28	jsr $284a		jsr	ErrorHandler
>11ef	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>11f7	61 69 6c 00
.11fb					ErrorV_internal:
.11fb	20 4a 28	jsr $284a		jsr	ErrorHandler
>11fe	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>1206	20 45 72 72 6f 72 00
.120d					ErrorV_divzero:
.120d	20 4a 28	jsr $284a		jsr	ErrorHandler
>1210	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>1218	79 20 5a 65 72 6f 00
.121f					ErrorV_structure:
.121f	20 4a 28	jsr $284a		jsr	ErrorHandler
>1222	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>122a	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1236					ErrorV_stop:
.1236	20 4a 28	jsr $284a		jsr	ErrorHandler
>1239	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>1241	53 74 6f 70 70 65 64 00
.1249					ErrorV_data:
.1249	20 4a 28	jsr $284a		jsr	ErrorHandler
>124c	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>1254	61 74 61 00
.1258					ErrorV_redefine:
.1258	20 4a 28	jsr $284a		jsr	ErrorHandler
>125b	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>1263	64 65 66 69 6e 65 64 00
.126b					ErrorV_index:
.126b	20 4a 28	jsr $284a		jsr	ErrorHandler
>126e	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>1276	79 20 49 6e 64 65 78 00
.127e					ErrorV_memory:
.127e	20 4a 28	jsr $284a		jsr	ErrorHandler
>1281	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>1289	65 6d 6f 72 79 00
.128f					ErrorV_uninitialised:
.128f	20 4a 28	jsr $284a		jsr	ErrorHandler
>1292	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>129a	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.12a9					ErrorV_string:
.12a9	20 4a 28	jsr $284a		jsr	ErrorHandler
>12ac	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>12b4	6e 67 20 4c 65 6e 67 74 68 00
.12be					ErrorV_variable:
.12be	20 4a 28	jsr $284a		jsr	ErrorHandler
>12c1	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>12c9	20 4d 69 73 73 69 6e 67 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.12d2					ERRCheckLParen:
.12d2	b1 1c		lda ($1c),y			lda 	(codePtr),y
.12d4	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.12d6	d0 18		bne $12f0			bne 	ERRSyntaxError
.12d8	c8		iny				iny
.12d9	60		rts				rts
.12da					ERRCheckRParen:
.12da	b1 1c		lda ($1c),y			lda 	(codePtr),y
.12dc	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.12de	d0 10		bne $12f0			bne 	ERRSyntaxError
.12e0	c8		iny				iny
.12e1	60		rts				rts
.12e2					ERRCheckComma:
.12e2	b1 1c		lda ($1c),y			lda 	(codePtr),y
.12e4	c9 99		cmp #$99			cmp 	#PR_COMMA
.12e6	d0 08		bne $12f0			bne 	ERRSyntaxError
.12e8	c8		iny				iny
.12e9	60		rts				rts
.12ea					ERRCheckA:
.12ea	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.12ec	d0 02		bne $12f0			bne 	ERRSyntaxError
.12ee	c8		iny				iny
.12ef	60		rts				rts
.12f0					ERRSyntaxError:
.12f0	4c 9b 11	jmp $119b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.12f3					EXPBinAdd:
.12f3	24 0f		bit $0f				bit 	IFR0+IExp
.12f5	30 6f		bmi $1366			bmi 	EXPConcatenate
.12f7	a2 10		ldx #$10			ldx 	#IFR1
.12f9	4c 5e 21	jmp $215e			jmp 	IFloatAdd
.12fc					EXPBinSub:
.12fc	24 0f		bit $0f				bit 	IFR0+IExp
.12fe	30 3f		bmi $133f			bmi 	EXPTypeError
.1300	a2 10		ldx #$10			ldx 	#IFR1
.1302	4c 57 21	jmp $2157			jmp 	IFloatSubtract
.1305					EXPBinMul:
.1305	24 0f		bit $0f				bit 	IFR0+IExp
.1307	30 36		bmi $133f			bmi 	EXPTypeError
.1309	a2 10		ldx #$10			ldx 	#IFR1
.130b	4c 08 22	jmp $2208			jmp 	IFloatMultiply
.130e					EXPBinFDiv:
.130e	24 0f		bit $0f				bit 	IFR0+IExp
.1310	30 2d		bmi $133f			bmi 	EXPTypeError
.1312	a2 10		ldx #$10			ldx 	#IFR1
.1314	20 8b 24	jsr $248b			jsr 	IFloatDivideFloat
.1317	b0 0f		bcs $1328			bcs 	EXPDZero
.1319	60		rts				rts
.131a					EXPBinIDiv:
.131a	24 0f		bit $0f				bit 	IFR0+IExp
.131c	30 21		bmi $133f			bmi 	EXPTypeError
.131e	a2 10		ldx #$10			ldx 	#IFR1
.1320	20 8b 24	jsr $248b			jsr 	IFloatDivideFloat
.1323	b0 03		bcs $1328			bcs 	EXPDZero
.1325	4c 68 24	jmp $2468			jmp 	IFloatIntegerR0
.1328					EXPDZero:
.1328	4c 0d 12	jmp $120d		jmp	ErrorV_divzero
.132b					EXPBinIMod:
.132b	24 0f		bit $0f				bit 	IFR0+IExp
.132d	30 10		bmi $133f			bmi 	EXPTypeError
.132f	a2 10		ldx #$10			ldx 	#IFR1
.1331	5a		phy				phy
.1332	20 a0 23	jsr $23a0			jsr 	IFPreProcessBitwise 		; set up everything.
.1335	d0 05		bne $133c			bne 	EXPDRange
.1337	20 d9 22	jsr $22d9			jsr 	IFloatModulusInteger
.133a	7a		ply				ply
.133b	60		rts				rts
.133c					EXPDRange:
.133c	4c ab 11	jmp $11ab		jmp	ErrorV_range
.133f					EXPTypeError:
.133f	4c c8 11	jmp $11c8		jmp	ErrorV_type
.1342					EXPBinAnd:
.1342	24 0f		bit $0f				bit 	IFR0+IExp
.1344	30 f9		bmi $133f			bmi 	EXPTypeError
.1346	a2 10		ldx #$10			ldx 	#IFR1
.1348	20 5b 23	jsr $235b			jsr 	IFloatBitwiseAnd
.134b	b0 ef		bcs $133c			bcs 	EXPDRange
.134d	60		rts				rts
.134e					EXPBinOr:
.134e	24 0f		bit $0f				bit 	IFR0+IExp
.1350	30 ed		bmi $133f			bmi 	EXPTypeError
.1352	a2 10		ldx #$10			ldx 	#IFR1
.1354	20 72 23	jsr $2372			jsr 	IFloatBitwiseOr
.1357	b0 e3		bcs $133c			bcs 	EXPDRange
.1359	60		rts				rts
.135a					EXPBinXor:
.135a	24 0f		bit $0f				bit 	IFR0+IExp
.135c	30 e1		bmi $133f			bmi 	EXPTypeError
.135e	a2 10		ldx #$10			ldx 	#IFR1
.1360	20 89 23	jsr $2389			jsr 	IFloatBitwiseXor
.1363	b0 d7		bcs $133c			bcs 	EXPDRange
.1365	60		rts				rts
.1366					EXPConcatenate:
.1366	18		clc				clc
.1367	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1369	72 10		adc ($10)			adc 	(IFR1)
.136b	b0 2d		bcs $139a			bcs 	_EXPCError
.136d	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.136f	da		phx				phx
.1370	a6 0d		ldx $0d				ldx 	IFR0+1
.1372	da		phx				phx
.1373	20 e0 1f	jsr $1fe0			jsr 	StringTempAllocate 			; allocate string, set up return
.1376	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1378	a5 10		lda $10				lda 	IFR1
.137a	20 83 13	jsr $1383			jsr 	_EXPCCopyXA
.137d	fa		plx				plx 								; copy second string
.137e	68		pla				pla
.137f	20 83 13	jsr $1383			jsr 	_EXPCCopyXA
.1382	60		rts				rts
.1383					_EXPCCopyXA:
.1383	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.1385	85 1e		sta $1e				sta 	zTemp0
.1387	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.1389	f0 0e		beq $1399			beq 	_EXPCCExit 					; nothing.
.138b	aa		tax				tax 								; count
.138c	5a		phy				phy 								; start positioin
.138d	a0 01		ldy #$01			ldy 	#1
.138f					_EXPCCLoop:
.138f	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.1391	20 15 20	jsr $2015			jsr 	StringTempWrite
.1394	c8		iny				iny
.1395	ca		dex				dex
.1396	d0 f7		bne $138f			bne 	_EXPCCLoop
.1398	7a		ply				ply
.1399					_EXPCCExit:
.1399	60		rts				rts
.139a					_EXPCError:
.139a	4c a9 12	jmp $12a9		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.139d					EXPReturnTrue:
.139d	a2 0c		ldx #$0c			ldx 	#IFR0
.139f	a9 01		lda #$01			lda 	#1
.13a1	20 6a 27	jsr $276a			jsr 	IFloatSetByte
.13a4	20 73 27	jsr $2773			jsr 	IFloatNegate
.13a7	60		rts				rts
.13a8					EXPReturnFalse:
.13a8	a2 0c		ldx #$0c			ldx 	#IFR0
.13aa	4c 68 27	jmp $2768			jmp 	IFloatSetZero
.13ad					EXPCompareEqual:
.13ad	20 e3 13	jsr $13e3			jsr 	EXPCompareBaseCode
.13b0	c9 00		cmp #$00			cmp 	#0
.13b2	f0 e9		beq $139d			beq 	EXPReturnTrue
.13b4	80 f2		bra $13a8			bra 	EXPReturnFalse
.13b6					EXPCompareLess:
.13b6	20 e3 13	jsr $13e3			jsr 	EXPCompareBaseCode
.13b9	c9 ff		cmp #$ff			cmp 	#$FF
.13bb	f0 e0		beq $139d			beq 	EXPReturnTrue
.13bd	80 e9		bra $13a8			bra 	EXPReturnFalse
.13bf					EXPCompareGreater:
.13bf	20 e3 13	jsr $13e3			jsr 	EXPCompareBaseCode
.13c2	c9 01		cmp #$01			cmp 	#1
.13c4	f0 d7		beq $139d			beq 	EXPReturnTrue
.13c6	80 e0		bra $13a8			bra 	EXPReturnFalse
.13c8					EXPCompareNotEqual:
.13c8	20 e3 13	jsr $13e3			jsr 	EXPCompareBaseCode
.13cb	c9 00		cmp #$00			cmp 	#0
.13cd	d0 ce		bne $139d			bne 	EXPReturnTrue
.13cf	80 d7		bra $13a8			bra 	EXPReturnFalse
.13d1					EXPCompareLessEqual:
.13d1	20 e3 13	jsr $13e3			jsr 	EXPCompareBaseCode
.13d4	c9 01		cmp #$01			cmp 	#1
.13d6	d0 c5		bne $139d			bne 	EXPReturnTrue
.13d8	80 ce		bra $13a8			bra 	EXPReturnFalse
.13da					EXPCompareGreaterEqual:
.13da	20 e3 13	jsr $13e3			jsr 	EXPCompareBaseCode
.13dd	c9 ff		cmp #$ff			cmp 	#$FF
.13df	d0 bc		bne $139d			bne 	EXPReturnTrue
.13e1	80 c5		bra $13a8			bra 	EXPReturnFalse
.13e3					EXPCompareBaseCode:
.13e3	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.13e5	30 10		bmi $13f7			bmi 	_EXCBCString
.13e7	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.13e9	20 36 24	jsr $2436			jsr 	IFloatCompare
.13ec	a5 0c		lda $0c				lda 	IFR0+IM0
.13ee	f0 06		beq $13f6			beq 	_EXCBCExit 					; return 0 if zero
.13f0	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.13f2	50 02		bvc $13f6			bvc 	_EXCBCExit
.13f4	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.13f6					_EXCBCExit:
.13f6	60		rts				rts
.13f7					_EXCBCString:
.13f7	5a		phy				phy
.13f8	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.13fa	d2 10		cmp ($10)			cmp 	(IFR1)
.13fc	90 02		bcc $1400			bcc 	_EXCBCSmaller
.13fe	b2 10		lda ($10)			lda 	(IFR1)
.1400					_EXCBCSmaller:
.1400	aa		tax				tax
.1401	f0 0d		beq $1410			beq 	_EXCBCMatches 				; if zero common length matches
.1403	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1405					_EXCBCCheckSmallerMatches:
.1405	c8		iny				iny 								; compare directly as far as common length
.1406	38		sec				sec
.1407	b1 10		lda ($10),y			lda 	(IFR1),y
.1409	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.140b	d0 08		bne $1415			bne 	_EXCBCExit2
.140d	ca		dex				dex
.140e	d0 f5		bne $1405			bne 	_EXCBCCheckSmallerMatches
.1410					_EXCBCMatches:
.1410	38		sec				sec
.1411	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.1413	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1415					_EXCBCExit2:
.1415	7a		ply				ply
.1416	c9 00		cmp #$00			cmp 	#0
.1418	f0 04		beq $141e			beq 	_EXCBCReturn
.141a	30 03		bmi $141f			bmi 	_EXCBCFF
.141c	a9 01		lda #$01			lda 	#1
.141e					_EXCBCReturn:
.141e	60		rts				rts
.141f					_EXCBCFF:
.141f	a9 ff		lda #$ff			lda 	#$FF
.1421	60		rts				rts
.1422					_EXCBCRange:
.1422	4c ab 11	jmp $11ab		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1425					EXPBinLeft:
.1425	a9 ff		lda #$ff			lda 	#$FF
.1427	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.142a	4c 30 14	jmp $1430			jmp 	EXPShiftCommon
.142d					EXPBinRight:
.142d	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.1430					EXPShiftCommon:
.1430	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.1432	05 13		ora $13				ora 	IFR1+IExp
.1434	29 7f		and #$7f			and 	#$7F
.1436	d0 35		bne $146d			bne 	_EXPSRange
.1438	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.143a	29 e0		and #$e0			and 	#$E0
.143c	05 0d		ora $0d				ora 	IFR0+IM1
.143e	05 0e		ora $0e				ora 	IFR0+IM2
.1440	d0 25		bne $1467			bne 	_EXPSShiftZero 				; if so return zero
.1442	5a		phy				phy
.1443	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1445	29 1f		and #$1f			and 	#$1F
.1447	f0 17		beq $1460			beq 	_EXPSExit 					; exit if zero
.1449	a8		tay				tay
.144a					_EXPSLoop:
.144a	a2 10		ldx #$10			ldx 	#IFR1
.144c	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.144f	30 05		bmi $1456			bmi 	_EXPSShiftLeft
.1451	20 97 27	jsr $2797			jsr 	IFloatShiftRight
.1454	80 07		bra $145d			bra 	_EXPSContinue
.1456					_EXPSShiftLeft:
.1456	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1459	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.145b	30 10		bmi $146d			bmi 	_EXPSRange
.145d					_EXPSContinue:
.145d	88		dey				dey
.145e	d0 ea		bne $144a			bne 	_EXPSLoop
.1460					_EXPSExit:
.1460	a2 10		ldx #$10			ldx 	#IFR1
.1462	20 f9 26	jsr $26f9			jsr 	IFloatCopyFromRegister
.1465	7a		ply				ply
.1466	60		rts				rts
.1467					_EXPSShiftZero:
.1467	a2 0c		ldx #$0c			ldx 	#IFR0
.1469	20 68 27	jsr $2768			jsr 	IFloatSetZero
.146c	60		rts				rts
.146d					_EXPSRange:
.146d	4c ab 11	jmp $11ab		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1470					EXPEvaluateExpression:
.1470	a9 00		lda #$00			lda 	#0 							; current precedence
.1472					EXPEvaluateExpressionPrecedenceA:
.1472	48		pha				pha
.1473	20 ed 14	jsr $14ed			jsr 	EXPTermValueR0				; do first term.
.1476					_EELoop:
.1476	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1478	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.147a	90 31		bcc $14ad			bcc 	_EEExit
.147c	aa		tax				tax 								; access the precedence of the operator.
.147d	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.147e	dd 05 17	cmp $1705,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1481	b0 2b		bcs $14ae			bcs 	_EEExit2
.1483	48		pha				pha 								; save current precedence.
.1484	da		phx				phx 								; save operator
.1485	c8		iny				iny 								; consume operator
.1486	da		phx				phx
.1487	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.1489	20 b7 26	jsr $26b7			jsr 	IFloatPushRx
.148c	fa		plx				plx
.148d	bd 05 17	lda $1705,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1490	20 72 14	jsr $1472			jsr 	EXPEvaluateExpressionPrecedenceA
.1493	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.1495	20 d8 26	jsr $26d8			jsr 	IFloatPullRx
.1498	fa		plx				plx 								; operator
.1499	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.149b	45 13		eor $13				eor 	IFR1+IExp
.149d	30 08		bmi $14a7			bmi 	_EEType
.149f					_EETypeOkay:
.149f	8a		txa				txa
.14a0	0a		asl a				asl 	a 							; double -> X
.14a1	aa		tax				tax
.14a2	20 aa 14	jsr $14aa			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.14a5	80 cf		bra $1476			bra 	_EELoop
.14a7					_EEType:
.14a7	4c c8 11	jmp $11c8		jmp	ErrorV_type
.14aa					_EECallBinary:
.14aa	7c a1 19	jmp ($19a1,x)			jmp 	(VectorTable,x)
.14ad					_EEExit:
.14ad	68		pla				pla 								; throw precedence
.14ae					_EEExit2:
.14ae	18		clc				clc
.14af	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.14b0					EXPEvalNumber:
.14b0	20 70 14	jsr $1470			jsr 	EXPEvaluateExpression
.14b3	24 0f		bit $0f				bit 	IFR0+IExp
.14b5	30 01		bmi $14b8			bmi 	EVUType
.14b7	60		rts				rts
.14b8					EVUType:
.14b8	4c c8 11	jmp $11c8		jmp	ErrorV_type
.14bb					EXPEvalInteger:
.14bb	20 b0 14	jsr $14b0			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.14be	20 68 24	jsr $2468			jsr 	IFloatIntegerR0
.14c1	60		rts				rts
.14c2					EXPEvalInteger16:
.14c2	20 bb 14	jsr $14bb			jsr 	EXPEvalInteger
.14c5	a5 0e		lda $0e				lda 	IFR0+IM2
.14c7	d0 21		bne $14ea			bne 	EVURange
.14c9	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14cb	a5 0c		lda $0c				lda 	IFR0+IM0
.14cd	60		rts				rts
.14ce					EXPEvalInteger8:
.14ce	20 bb 14	jsr $14bb			jsr 	EXPEvalInteger
.14d1	a5 0e		lda $0e				lda 	IFR0+IM2
.14d3	05 0d		ora $0d				ora 	IFR0+IM1
.14d5	d0 13		bne $14ea			bne 	EVURange
.14d7	a5 0c		lda $0c				lda 	IFR0+IM0
.14d9	60		rts				rts
.14da					EXPEvalString:
.14da	20 70 14	jsr $1470			jsr 	EXPEvaluateExpression
.14dd	24 0f		bit $0f				bit 	IFR0+IExp
.14df	10 d7		bpl $14b8			bpl 	EVUType
.14e1	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14e3	86 1f		stx $1f				stx 	zTemp0+1
.14e5	a5 0c		lda $0c				lda 	IFR0+IM0
.14e7	85 1e		sta $1e				sta 	zTemp0
.14e9	60		rts				rts
.14ea					EVURange:
.14ea	4c ab 11	jmp $11ab		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.14ed					EXPTermValueR0:
.14ed	20 38 15	jsr $1538			jsr 	EXPTermR0 					; get term
.14f0	90 45		bcc $1537			bcc 	_ETVNotReference 			; exit if value.
.14f2	5a		phy				phy
.14f3	a0 03		ldy #$03			ldy 	#3 							; get type
.14f5	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14f7	30 14		bmi $150d			bmi 	_ETVDereferenceString
.14f9	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.14fb	88		dey				dey
.14fc	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14fe	85 0e		sta $0e				sta 	IFR0+IM2
.1500	88		dey				dey
.1501	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1503	aa		tax				tax
.1504	b2 0c		lda ($0c)			lda 	(IFR0)
.1506	86 0d		stx $0d				stx 	IFR0+IM1
.1508	85 0c		sta $0c				sta 	IFR0+IM0
.150a	7a		ply				ply
.150b	18		clc				clc
.150c	60		rts				rts
.150d					_ETVDereferenceString:
.150d	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.150f	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1511	12 0c		ora ($0c)			ora 	(IFR0)
.1513	f0 11		beq $1526			beq 	_ETVNull
.1515	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.1517	aa		tax				tax
.1518	b2 0c		lda ($0c)			lda 	(IFR0)
.151a	18		clc				clc 								; add two so points to actual string.
.151b	69 02		adc #$02			adc 	#2
.151d	90 01		bcc $1520			bcc 	_EVDSNoCarry
.151f	e8		inx				inx
.1520					_EVDSNoCarry:
.1520	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.1522	85 0c		sta $0c				sta 	IFR0
.1524	80 08		bra $152e			bra 	_ETVFillExit 				; tidy up and exit.
.1526					_ETVNull:
.1526	a9 36		lda #$36			lda 	#_EVTNString & $FF
.1528	85 0c		sta $0c				sta 	IFR0+IM0
.152a	a9 15		lda #$15			lda 	#_EVTNString >> 8
.152c	85 0d		sta $0d				sta 	IFR0+IM1
.152e					_ETVFillExit:
.152e	64 0e		stz $0e				stz 	IFR0+IM2
.1530	a9 80		lda #$80			lda 	#$80
.1532	85 0f		sta $0f				sta 	IFR0+IExp
.1534	7a		ply				ply
.1535	60		rts				rts
.1536					_EVTNString:
>1536	00						.byte 	0
.1537					_ETVNotReference:
.1537	60		rts				rts
.1538					EXPTermR0:
.1538	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.153a	30 10		bmi $154c			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.153c	c8		iny				iny 								; consume element
.153d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.153f	b0 08		bcs $1549			bcs 	_ETMIdentifier
.1541	20 70 15	jsr $1570			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1544	20 a3 15	jsr $15a3			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1547	18		clc				clc 								; return value
.1548	60		rts				rts
.1549					_ETMIdentifier:
.1549	4c 1a 21	jmp $211a			jmp 	VARCheckSimple 				; check simple variables A-Z
.154c					_ETMIsUnaryOrMinus:
.154c	c8		iny				iny 								; consume element
.154d	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.154f	d0 0a		bne $155b			bne 	_ETMCheckUnary
.1551	20 ed 14	jsr $14ed			jsr 	EXPTermValueR0 				; get a term to negate
.1554	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1556	20 73 27	jsr $2773			jsr 	IFloatNegate
.1559	18		clc				clc
.155a	60		rts				rts
.155b					_ETMCheckUnary:
.155b	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.155d	90 0e		bcc $156d			bcc 	_ETMUnarySyntax
.155f	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1561	b0 0a		bcs $156d			bcs 	_ETMUnarySyntax
.1563	0a		asl a				asl 	a
.1564	aa		tax				tax
.1565	20 6a 15	jsr $156a			jsr 	_ETMCallUnaryFunction
.1568	18		clc				clc
.1569	60		rts				rts
.156a					_ETMCallUnaryFunction:
.156a	7c a1 19	jmp ($19a1,x)			jmp 	(VectorTable,x)
.156d					_ETMUnarySyntax:
.156d	4c 9b 11	jmp $119b		jmp	ErrorV_syntax
.1570					EXPExtractTokenisedInteger:
.1570	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.1572	64 0f		stz $0f				stz 	IFR0+IExp
.1574	64 0d		stz $0d				stz 	IFR0+IM1
.1576	64 0e		stz $0e				stz 	IFR0+IM2
.1578					_ETMConstant:
.1578	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.157a	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.157c	b0 24		bcs $15a2			bcs 	_ETMCExit 					; no.
.157e	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1580	a5 0d		lda $0d				lda 	IFR0+IM1
.1582	85 0e		sta $0e				sta 	IFR0+IM2
.1584	a5 0c		lda $0c				lda 	IFR0+IM0
.1586	85 0d		sta $0d				sta 	IFR0+IM1
.1588	64 0c		stz $0c				stz 	IFR0+IM0
.158a	8a		txa				txa
.158b	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.158c	66 0e		ror $0e				ror 	IFR0+IM2
.158e	66 0d		ror $0d				ror 	IFR0+IM1
.1590	66 0c		ror $0c				ror 	IFR0+IM0
.1592	4a		lsr a				lsr 	a
.1593	66 0e		ror $0e				ror 	IFR0+IM2
.1595	66 0d		ror $0d				ror 	IFR0+IM1
.1597	66 0c		ror $0c				ror 	IFR0+IM0
.1599	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.159b	11 1c		ora ($1c),y			ora 	(codePtr),y
.159d	85 0c		sta $0c				sta 	IFR0+IM0
.159f	c8		iny				iny 								; consume, loop back
.15a0	80 d6		bra $1578			bra 	_ETMConstant
.15a2					_ETMCExit:
.15a2	60		rts				rts
.15a3					EXPCheckDecimalFollows:
.15a3	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.15a5	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.15a7	d0 19		bne $15c2			bne 	_ETMCDExit
.15a9	c8		iny				iny 								; consume token.
.15aa	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.15ac	5a		phy				phy									; save current position
.15ad	48		pha				pha 								; save count of chars.
.15ae	38		sec				sec 								; address into YX : y + codePtr+1
.15af	98		tya				tya
.15b0	65 1c		adc $1c				adc 	codePtr
.15b2	aa		tax				tax
.15b3	a5 1d		lda $1d				lda 	codePtr+1
.15b5	69 00		adc #$00			adc 	#0
.15b7	a8		tay				tay
.15b8	68		pla				pla 								; get count.
.15b9	20 0c 26	jsr $260c			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.15bc	7a		ply				ply 								; go to next token.
.15bd	98		tya				tya
.15be	38		sec				sec
.15bf	71 1c		adc ($1c),y			adc 	(codePtr),y
.15c1	a8		tay				tay
.15c2					_ETMCDExit:
.15c2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.15c3					EXPUnaryAbs:
.15c3	20 b0 14	jsr $14b0			jsr 	EXPEvalNumber 					; number to R0
.15c6	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.15c9	20 ac 23	jsr $23ac			jsr 	IFloatAbsoluteR0
.15cc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.15cd					EXPUnaryAsc:
.15cd	20 da 14	jsr $14da			jsr 	EXPEvalString 					; string to R0, zTemp0
.15d0	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.15d3	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.15d5	f0 06		beq $15dd			beq 	_EXAZero 						; if so return 0
.15d7	5a		phy				phy 									; otherwise get first character
.15d8	a0 01		ldy #$01			ldy 	#1
.15da	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15dc	7a		ply				ply
.15dd					_EXAZero:
.15dd	a2 0c		ldx #$0c			ldx 	#IFR0
.15df	20 6a 27	jsr $276a			jsr 	IFloatSetByte
.15e2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.15e3					EXPUnaryChr:
.15e3	20 ce 14	jsr $14ce			jsr 	EXPEvalInteger8 				; expr
.15e6	48		pha				pha 									; push on stack
.15e7	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.15ea	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.15ec	20 e0 1f	jsr $1fe0			jsr 	StringTempAllocate
.15ef	68		pla				pla
.15f0	20 15 20	jsr $2015			jsr 	StringTempWrite
.15f3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.15f4					EXPUnaryDec:
.15f4	20 da 14	jsr $14da			jsr 	EXPEvalString 					; string to R0, zTemp0
.15f7	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.15fa	5a		phy				phy
.15fb	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.15fd	20 68 27	jsr $2768			jsr 	IFloatSetZero
.1600	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.1602	f0 3b		beq $163f			beq 	_EUDError 						; empty string
.1604	aa		tax				tax
.1605	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1607					_EUDLoop:
.1607	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1609	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.160b	90 02		bcc $160f			bcc 	_EUDNoCase
.160d	e9 20		sbc #$20			sbc 	#$20
.160f					_EUDNoCase:
.160f	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1611	90 2c		bcc $163f			bcc 	_EUDError
.1613	c9 3a		cmp #$3a			cmp 	#'9'+1
.1615	90 0a		bcc $1621			bcc 	_EUDOkay
.1617	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1619	90 24		bcc $163f			bcc 	_EUDError
.161b	c9 47		cmp #$47			cmp 	#'F'+1
.161d	b0 20		bcs $163f			bcs 	_EUDError
.161f	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1621					_EUDOkay:
.1621	29 0f		and #$0f			and 	#15 							; make constant
.1623	da		phx				phx
.1624	48		pha				pha
.1625	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1627	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.162a	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.162d	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1630	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1633	68		pla				pla 									; pop constant and OR in
.1634	fa		plx				plx
.1635	05 0c		ora $0c				ora 	IFR0+IM0
.1637	85 0c		sta $0c				sta 	IFR0+IM0
.1639	c8		iny				iny 									; next
.163a	ca		dex				dex
.163b	d0 ca		bne $1607			bne 	_EUDLoop
.163d	7a		ply				ply
.163e	60		rts				rts
.163f					_EUDError:
.163f	4c bb 11	jmp $11bb		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1642					EXPUnaryInlineDec:
.1642	4c 9b 11	jmp $119b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1645					EXPUnaryNull:
.1645	20 ed 14	jsr $14ed			jsr 	EXPTermValueR0
.1648	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1649					EXPUnaryFrac:
.1649	20 b0 14	jsr $14b0			jsr 	EXPEvalNumber 					; number to R0
.164c	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.164f	20 12 24	jsr $2412			jsr 	IFloatFractionalR0
.1652	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1653					EXPUnaryInt:
.1653	20 b0 14	jsr $14b0			jsr 	EXPEvalNumber 					; number to R0
.1656	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.1659	20 68 24	jsr $2468			jsr 	IFloatIntegerR0
.165c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.165d					EXPUnaryLen:
.165d	20 da 14	jsr $14da			jsr 	EXPEvalString 					; string to R0, zTemp0
.1660	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.1663	b2 1e		lda ($1e)			lda 	(zTemp0)
.1665	a2 0c		ldx #$0c			ldx 	#IFR0
.1667	20 6a 27	jsr $276a			jsr 	IFloatSetByte
.166a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.166b					EXPUnaryParenthesis:
.166b	20 b0 14	jsr $14b0			jsr 	EXPEvalNumber 					; number to R0
.166e	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.1671	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1672					EXPUnaryRnd:
.1672	20 b0 14	jsr $14b0			jsr 	EXPEvalNumber 				; number to R0
.1675	20 da 12	jsr $12da			jsr 	ERRCheckRParen 				; )
.1678	a2 0c		ldx #$0c			ldx 	#IFR0
.167a	20 91 16	jsr $1691			jsr 	EXPLoadInRandom
.167d	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.167f	85 0f		sta $0f				sta 	IFR0+IExp
.1681	60		rts				rts
.1682					ExpUnaryRand:
.1682	20 bb 14	jsr $14bb			jsr 	EXPEvalInteger 				; integer to R0
.1685	20 da 12	jsr $12da			jsr 	ERRCheckRParen 				; )
.1688	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.168a	20 91 16	jsr $1691			jsr 	EXPLoadInRandom
.168d	20 d9 22	jsr $22d9			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1690	60		rts				rts
.1691					EXPLoadInRandom:
.1691	20 68 27	jsr $2768			jsr 	IFloatSetZero
.1694	20 a6 16	jsr $16a6			jsr 	EXPRandom32
.1697	95 00		sta $00,x			sta 	IM0,x
.1699	20 a6 16	jsr $16a6			jsr 	EXPRandom32
.169c	95 01		sta $01,x			sta 	IM1,x
.169e	20 a6 16	jsr $16a6			jsr 	EXPRandom32
.16a1	29 7f		and #$7f			and 	#$7F
.16a3	95 02		sta $02,x			sta 	IM2,x
.16a5	60		rts				rts
.16a6					EXPRandom32:
.16a6	5a		phy				phy
.16a7	a0 08		ldy #$08			ldy 	#8
.16a9	ad 3c 03	lda $033c			lda 	EXPSeed+0
.16ac	0d 3d 03	ora $033d			ora 	EXPSeed+1
.16af	0d 3e 03	ora $033e			ora 	EXPSeed+2
.16b2	0d 3f 03	ora $033f			ora 	EXPSeed+3
.16b5	d0 08		bne $16bf			bne 	_EXPRNoReset
.16b7	ee 3c 03	inc $033c			inc 	EXPSeed+0
.16ba	a0 10		ldy #$10			ldy 	#16
.16bc	8c 3f 03	sty $033f			sty 	EXPSeed+3
.16bf					_EXPRNoReset:
.16bf	ad 3c 03	lda $033c			lda 	EXPSeed+0
.16c2					_EXPRLoop:
.16c2	0a		asl a				asl		a
.16c3	2e 3d 03	rol $033d			rol 	EXPSeed+1
.16c6	2e 3e 03	rol $033e			rol 	EXPSeed+2
.16c9	2e 3f 03	rol $033f			rol 	EXPSeed+3
.16cc	90 02		bcc $16d0			bcc 	_EXPRNoEOR
.16ce	49 c5		eor #$c5			eor 	#$C5
.16d0					_EXPRNoEOR:
.16d0	88		dey				dey
.16d1	d0 ef		bne $16c2			bne 	_EXPRLoop
.16d3	8d 3c 03	sta $033c			sta 	EXPSeed+0
.16d6	7a		ply				ply
.16d7	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.16d8					EXPUnarySgn:
.16d8	20 b0 14	jsr $14b0			jsr 	EXPEvalNumber 					; number to R0
.16db	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.16de	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.16e0	20 0a 27	jsr $270a			jsr 	IFloatCopyToRegister
.16e3	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.16e5	20 68 27	jsr $2768			jsr 	IFloatSetZero
.16e8	a2 10		ldx #$10			ldx 	#IFR1
.16ea	20 36 24	jsr $2436			jsr 	IFloatCompare 					; compare R1 vs 0.
.16ed	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.16ee					EXPUnarySqr:
.16ee	20 b0 14	jsr $14b0			jsr 	EXPEvalNumber 					; number to R0
.16f1	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.16f4	20 b4 23	jsr $23b4			jsr 	IFloatSquareRootR0 				; square root.
.16f7	b0 01		bcs $16fa			bcs 	_EUSValue
.16f9	60		rts				rts
.16fa					_EUSValue:
.16fa	4c ab 11	jmp $11ab		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.16fd					EXPUnaryHex:
.16fd	20 bb 14	jsr $14bb			jsr 	EXPEvalInteger 					; expr
.1700	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.1703	5a		phy				phy
.1704	a9 10		lda #$10			lda 	#16
.1706	20 09 25	jsr $2509			jsr 	IFloatIntegerToStringR0
.1709	80 0a		bra $1715			bra 	EUSMain
.170b					EXPUnaryStr:
.170b	20 b0 14	jsr $14b0			jsr 	EXPEvalNumber 					; expr
.170e	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.1711	5a		phy				phy
.1712	20 65 25	jsr $2565			jsr 	IFloatFloatToStringR0 			; convert to string
.1715					EUSMain:
.1715	b0 18		bcs $172f			bcs 	_EUSError
.1717	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1719	84 1f		sty $1f				sty 	zTemp0+1
.171b	48		pha				pha 									; save count
.171c	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.171e	20 e0 1f	jsr $1fe0			jsr 	StringTempAllocate
.1721	fa		plx				plx 									; count in X
.1722	a0 00		ldy #$00			ldy 	#0
.1724					_EUSCopy:
.1724	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1726	c8		iny				iny
.1727	20 15 20	jsr $2015			jsr 	StringTempWrite
.172a	ca		dex				dex
.172b	d0 f7		bne $1724			bne	 	_EUSCopy
.172d	7a		ply				ply
.172e	60		rts				rts
.172f					_EUSError:
.172f	4c ab 11	jmp $11ab		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1732					EXPUnaryInlineString:
.1732	18		clc				clc 								; physical address -> IM0,1
.1733	98		tya				tya
.1734	65 1c		adc $1c				adc 	codePtr
.1736	85 0c		sta $0c				sta 	IFR0+IM0
.1738	a5 1d		lda $1d				lda 	codePtr+1
.173a	69 00		adc #$00			adc 	#0
.173c	85 0d		sta $0d				sta 	IFR0+IM1
.173e	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.1740	a9 80		lda #$80			lda 	#$80
.1742	85 0f		sta $0f				sta 	IFR0+IExp
.1744	98		tya				tya	 								; skip over it.
.1745	38		sec				sec
.1746	71 1c		adc ($1c),y			adc 	(codePtr),y
.1748	a8		tay				tay
.1749	60		rts				rts
.174a					_EXPUISRange:
.174a	4c ab 11	jmp $11ab		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.174d					EXPUnaryLeft:
.174d	20 93 17	jsr $1793			jsr 	EXPCommonStart 					; <string>,
.1750	48		pha				pha 									; save string address on stack
.1751	da		phx				phx
.1752	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1754	48		pha				pha
.1755	20 ce 14	jsr $14ce			jsr 	EXPEvalInteger8 				; characters to do
.1758	80 44		bra $179e			bra 	EXPSubstringCommon
.175a					EXPUnaryRight:
.175a	20 93 17	jsr $1793			jsr 	EXPCommonStart 					; <string>,
.175d	48		pha				pha 									; save string address on stack
.175e	da		phx				phx
.175f	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.1761	48		pha				pha
.1762	20 ce 14	jsr $14ce			jsr 	EXPEvalInteger8 				; characters to do
.1765	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.1767	68		pla				pla
.1768	38		sec				sec
.1769	e5 1e		sbc $1e				sbc 	zTemp0
.176b	b0 02		bcs $176f			bcs 	_EUROffLeft
.176d	a9 00		lda #$00			lda 	#0
.176f					_EUROffLeft:
.176f	48		pha				pha 									; start pos
.1770	a9 ff		lda #$ff			lda 	#255
.1772	80 2a		bra $179e			bra 	EXPSubstringCommon
.1774					EXPUnaryMid:
.1774	20 93 17	jsr $1793			jsr 	EXPCommonStart 					; <string>,
.1777	48		pha				pha 									; save string address on stack
.1778	da		phx				phx
.1779	20 ce 14	jsr $14ce			jsr 	EXPEvalInteger8 				; characters start
.177c	f0 12		beq $1790			beq 	_EUSError 						; 1 is left
.177e	3a		dec a				dec 	a 								; zero based.
.177f	48		pha				pha
.1780	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.1782	c9 99		cmp #$99			cmp 	#PR_COMMA
.1784	f0 04		beq $178a			beq 	_EUMLength 						; if so m is provided
.1786	a9 ff		lda #$ff			lda 	#255 							; default m
.1788	80 14		bra $179e			bra 	EXPSubstringCommon
.178a					_EUMLength:
.178a	c8		iny				iny 									; consume comma
.178b	20 ce 14	jsr $14ce			jsr 	EXPEvalInteger8 				; characters to do
.178e	80 0e		bra $179e			bra 	EXPSubstringCommon
.1790					_EUSError:
.1790	4c bb 11	jmp $11bb		jmp	ErrorV_value
.1793					EXPCommonStart:
.1793	20 da 14	jsr $14da			jsr 	EXPEvalString
.1796	20 e2 12	jsr $12e2			jsr 	ERRCheckComma
.1799	a5 0c		lda $0c				lda 	IFR0+IM0
.179b	a6 0d		ldx $0d				ldx 	IFR0+IM1
.179d	60		rts				rts
.179e					EXPSubstringCommon:
.179e	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.17a0	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; check right bracket.
.17a3	68		pla				pla 									; start position
.17a4	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.17a6	fa		plx				plx 									; get string address to zTemp2.
.17a7	86 23		stx $23				stx 	zTemp2+1
.17a9	68		pla				pla
.17aa	85 22		sta $22				sta 	zTemp2
.17ac	38		sec				sec 									; length - start is the max count of chars
.17ad	b2 22		lda ($22)			lda 	(zTemp2)
.17af	e5 21		sbc $21				sbc 	zTemp1+1
.17b1	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.17b3	b0 02		bcs $17b7			bcs 	_EXPSSNoTrim
.17b5	85 20		sta $20				sta 	zTemp1 							; update count with available
.17b7					_EXPSSNoTrim:
.17b7	a5 20		lda $20				lda 	zTemp1 							; chars required.
.17b9	20 e0 1f	jsr $1fe0			jsr 	StringTempAllocate 				; allocate memory for it.
.17bc	a5 20		lda $20				lda 	zTemp1 							; zero length string
.17be	f0 15		beq $17d5			beq 	_EXPSSExit
.17c0	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.17c2	d2 22		cmp ($22)			cmp 	(zTemp2)
.17c4	b0 0f		bcs $17d5			bcs 	_EXPSSExit
.17c6	5a		phy				phy
.17c7	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.17c9	c8		iny				iny 									; +1 for the length byte
.17ca					_EXPSSCopy:
.17ca	b1 22		lda ($22),y			lda 	(zTemp2),y
.17cc	20 15 20	jsr $2015			jsr 	StringTempWrite
.17cf	c8		iny				iny
.17d0	c6 20		dec $20				dec 	zTemp1
.17d2	d0 f6		bne $17ca			bne 	_EXPSSCopy
.17d4	7a		ply				ply
.17d5					_EXPSSExit:
.17d5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.17d6					EXPUnaryVal:
.17d6	20 da 14	jsr $14da			jsr 	EXPEvalString 					; string to R0, zTemp0
.17d9	20 da 12	jsr $12da			jsr 	ERRCheckRParen 					; )
.17dc	5a		phy				phy
.17dd	18		clc				clc
.17de	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.17e0	69 01		adc #$01			adc 	#1
.17e2	aa		tax				tax
.17e3	a5 1f		lda $1f				lda 	zTemp0+1
.17e5	69 00		adc #$00			adc 	#0
.17e7	a8		tay				tay
.17e8	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.17ea	20 cc 25	jsr $25cc			jsr 	IFloatStringToFloatR0 			; do conversion
.17ed	b0 02		bcs $17f1			bcs 	_EUVError
.17ef	7a		ply				ply
.17f0	60		rts				rts
.17f1					_EUVError:
.17f1	4c bb 11	jmp $11bb		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.17f4					BinaryPrecedence:
>17f4	02					.byte	 2	; $ef =
>17f5	02					.byte	 2	; $f0 <>
>17f6	02					.byte	 2	; $f1 <=
>17f7	02					.byte	 2	; $f2 <
>17f8	02					.byte	 2	; $f3 >=
>17f9	02					.byte	 2	; $f4 >
>17fa	01					.byte	 1	; $f5 XOR
>17fb	01					.byte	 1	; $f6 OR
>17fc	01					.byte	 1	; $f7 AND
>17fd	04					.byte	 4	; $f8 DIV
>17fe	04					.byte	 4	; $f9 MOD
>17ff	04					.byte	 4	; $fa <<
>1800	04					.byte	 4	; $fb >>
>1801	04					.byte	 4	; $fc /
>1802	04					.byte	 4	; $fd *
>1803	03					.byte	 3	; $fe -
>1804	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1805					StandardTokens:
>1805	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>180c	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1812	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1818	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>181d	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1820	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1826	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1829	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>182e	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1833	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>183b	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>183f	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1844	00					.byte	$00                                     	; $8c [[end]]
>1845	00					.byte	$00                                     	; $8d [[shift]]
>1846	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>184b	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1850	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1853	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1858	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>185c	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1862	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1868	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>186d	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1871	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1875	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>187a	01 2c					.byte	$01,$2c                                 	; $99 ,
>187c	01 3b					.byte	$01,$3b                                 	; $9a ;
>187e	01 3a					.byte	$01,$3a                                 	; $9b :
>1880	01 27					.byte	$01,$27                                 	; $9c '
>1882	01 29					.byte	$01,$29                                 	; $9d )
>1884	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1888	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>188e	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1892	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1896	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>189b	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>189f	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>18a6	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>18ab	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>18b0	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>18b5	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>18ba	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>18bf	00					.byte	0											; $aa
>18c0	00					.byte	0											; $ab
>18c1	00					.byte	0											; $ac
>18c2	00					.byte	0											; $ad
>18c3	00					.byte	0											; $ae
>18c4	00					.byte	0											; $af
>18c5	00					.byte	0											; $b0
>18c6	00					.byte	0											; $b1
>18c7	00					.byte	0											; $b2
>18c8	00					.byte	0											; $b3
>18c9	00					.byte	0											; $b4
>18ca	00					.byte	0											; $b5
>18cb	00					.byte	0											; $b6
>18cc	00					.byte	0											; $b7
>18cd	00					.byte	0											; $b8
>18ce	00					.byte	0											; $b9
>18cf	00					.byte	0											; $ba
>18d0	00					.byte	0											; $bb
>18d1	00					.byte	0											; $bc
>18d2	00					.byte	0											; $bd
>18d3	00					.byte	0											; $be
>18d4	00					.byte	0											; $bf
>18d5	00					.byte	0											; $c0
>18d6	00					.byte	0											; $c1
>18d7	00					.byte	0											; $c2
>18d8	00					.byte	0											; $c3
>18d9	00					.byte	0											; $c4
>18da	00					.byte	0											; $c5
>18db	00					.byte	0											; $c6
>18dc	00					.byte	0											; $c7
>18dd	00					.byte	0											; $c8
>18de	00					.byte	0											; $c9
>18df	00					.byte	0											; $ca
>18e0	00					.byte	0											; $cb
>18e1	00					.byte	0											; $cc
>18e2	00					.byte	0											; $cd
>18e3	00					.byte	0											; $ce
>18e4	00					.byte	0											; $cf
>18e5	00					.byte	0											; $d0
>18e6	00					.byte	0											; $d1
>18e7	00					.byte	0											; $d2
>18e8	00					.byte	0											; $d3
>18e9	00					.byte	0											; $d4
>18ea	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>18f0	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>18f6	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>18fe	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1905	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>190b	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1911	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1916	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>191b	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1920	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1925	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>192a	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1930	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1935	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>193d	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1944	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1949	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>194e	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1954	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1959	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>195f	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1964	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>196a	01 28					.byte	$01,$28                                 	; $eb (
>196c	01 24					.byte	$01,$24                                 	; $ec $
>196e	00					.byte	$00                                     	; $ed [[decimal]]
>196f	00					.byte	$00                                     	; $ee [[string]]
>1970	01 3d					.byte	$01,$3d                                 	; $ef =
>1972	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1975	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1978	01 3c					.byte	$01,$3c                                 	; $f2 <
>197a	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>197d	01 3e					.byte	$01,$3e                                 	; $f4 >
>197f	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1983	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1986	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>198a	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>198e	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1992	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1995	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1998	01 2f					.byte	$01,$2f                                 	; $fc /
>199a	01 2a					.byte	$01,$2a                                 	; $fd *
>199c	01 2d					.byte	$01,$2d                                 	; $fe -
>199e	01 2b					.byte	$01,$2b                                 	; $ff +
>19a0	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.19a1					VectorTable:
>19a1	46 28					.word	NotImplemented           ; $80 REPEAT
>19a3	46 28					.word	NotImplemented           ; $81 UNTIL
>19a5	46 28					.word	NotImplemented           ; $82 WHILE
>19a7	46 28					.word	NotImplemented           ; $83 WEND
>19a9	46 28					.word	NotImplemented           ; $84 IF
>19ab	46 28					.word	NotImplemented           ; $85 ENDIF
>19ad	46 28					.word	NotImplemented           ; $86 DO
>19af	46 28					.word	NotImplemented           ; $87 LOOP
>19b1	46 28					.word	NotImplemented           ; $88 PROC
>19b3	46 28					.word	NotImplemented           ; $89 ENDPROC
>19b5	46 28					.word	NotImplemented           ; $8a FOR
>19b7	46 28					.word	NotImplemented           ; $8b NEXT
>19b9	54 11					.word	RUNEndOfLine             ; $8c [[END]]
>19bb	92 11					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>19bd	46 28					.word	NotImplemented           ; $8e ELSE
>19bf	52 10					.word	NoExec01                 ; $8f THEN
>19c1	52 10					.word	NoExec02                 ; $90 TO
>19c3	52 10					.word	NoExec03                 ; $91 STEP
>19c5	ba 10					.word	CommandLET               ; $92 LET
>19c7	55 10					.word	Command_Print            ; $93 PRINT
>19c9	46 28					.word	NotImplemented           ; $94 INPUT
>19cb	46 28					.word	NotImplemented           ; $95 CALL
>19cd	46 28					.word	NotImplemented           ; $96 SYS
>19cf	3b 11					.word	Command_REM              ; $97 REM
>19d1	46 28					.word	NotImplemented           ; $98 EXIT
>19d3	52 10					.word	NoExec04                 ; $99 ,
>19d5	52 10					.word	NoExec05                 ; $9a ;
>19d7	52 10					.word	NoExec06                 ; $9b :
>19d9	3b 11					.word	Command_REM2             ; $9c '
>19db	52 10					.word	NoExec07                 ; $9d )
>19dd	46 28					.word	NotImplemented           ; $9e DIM
>19df	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>19e1	32 11					.word	Command_NEW              ; $a0 NEW
>19e3	48 11					.word	Command_RUN              ; $a1 RUN
>19e5	98 11					.word	Command_STOP             ; $a2 STOP
>19e7	95 11					.word	Command_END              ; $a3 END
>19e9	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>19eb	46 28					.word	NotImplemented           ; $a5 LIST
>19ed	46 28					.word	NotImplemented           ; $a6 SAVE
>19ef	46 28					.word	NotImplemented           ; $a7 LOAD
>19f1	46 28					.word	NotImplemented           ; $a8 POKE
>19f3	46 28					.word	NotImplemented           ; $a9 DOKE
>19f5	46 28					.word	NotImplemented           ; $aa
>19f7	46 28					.word	NotImplemented           ; $ab
>19f9	46 28					.word	NotImplemented           ; $ac
>19fb	46 28					.word	NotImplemented           ; $ad
>19fd	46 28					.word	NotImplemented           ; $ae
>19ff	46 28					.word	NotImplemented           ; $af
>1a01	46 28					.word	NotImplemented           ; $b0
>1a03	46 28					.word	NotImplemented           ; $b1
>1a05	46 28					.word	NotImplemented           ; $b2
>1a07	46 28					.word	NotImplemented           ; $b3
>1a09	46 28					.word	NotImplemented           ; $b4
>1a0b	46 28					.word	NotImplemented           ; $b5
>1a0d	46 28					.word	NotImplemented           ; $b6
>1a0f	46 28					.word	NotImplemented           ; $b7
>1a11	46 28					.word	NotImplemented           ; $b8
>1a13	46 28					.word	NotImplemented           ; $b9
>1a15	46 28					.word	NotImplemented           ; $ba
>1a17	46 28					.word	NotImplemented           ; $bb
>1a19	46 28					.word	NotImplemented           ; $bc
>1a1b	46 28					.word	NotImplemented           ; $bd
>1a1d	46 28					.word	NotImplemented           ; $be
>1a1f	46 28					.word	NotImplemented           ; $bf
>1a21	46 28					.word	NotImplemented           ; $c0
>1a23	46 28					.word	NotImplemented           ; $c1
>1a25	46 28					.word	NotImplemented           ; $c2
>1a27	46 28					.word	NotImplemented           ; $c3
>1a29	46 28					.word	NotImplemented           ; $c4
>1a2b	46 28					.word	NotImplemented           ; $c5
>1a2d	46 28					.word	NotImplemented           ; $c6
>1a2f	46 28					.word	NotImplemented           ; $c7
>1a31	46 28					.word	NotImplemented           ; $c8
>1a33	46 28					.word	NotImplemented           ; $c9
>1a35	46 28					.word	NotImplemented           ; $ca
>1a37	46 28					.word	NotImplemented           ; $cb
>1a39	46 28					.word	NotImplemented           ; $cc
>1a3b	46 28					.word	NotImplemented           ; $cd
>1a3d	46 28					.word	NotImplemented           ; $ce
>1a3f	46 28					.word	NotImplemented           ; $cf
>1a41	46 28					.word	NotImplemented           ; $d0
>1a43	46 28					.word	NotImplemented           ; $d1
>1a45	46 28					.word	NotImplemented           ; $d2
>1a47	46 28					.word	NotImplemented           ; $d3
>1a49	46 28					.word	NotImplemented           ; $d4
>1a4b	46 28					.word	NotImplemented           ; $d5 DEEK(
>1a4d	46 28					.word	NotImplemented           ; $d6 PEEK(
>1a4f	5a 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1a51	4d 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1a53	74 17					.word	EXPUnaryMid              ; $d9 MID$(
>1a55	0b 17					.word	EXPUnaryStr              ; $da STR$(
>1a57	d6 17					.word	EXPUnaryVal              ; $db VAL(
>1a59	d8 16					.word	EXPUnarySgn              ; $dc SGN(
>1a5b	c3 15					.word	EXPUnaryAbs              ; $dd ABS(
>1a5d	5d 16					.word	EXPUnaryLen              ; $de LEN(
>1a5f	ee 16					.word	EXPUnarySqr              ; $df SQR(
>1a61	e3 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1a63	cd 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1a65	46 28					.word	NotImplemented           ; $e2 INKEY$(
>1a67	46 28					.word	NotImplemented           ; $e3 EVENT(
>1a69	46 28					.word	NotImplemented           ; $e4 TIME
>1a6b	53 16					.word	EXPUnaryInt              ; $e5 INT(
>1a6d	49 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1a6f	f4 15					.word	EXPUnaryDec              ; $e7 DEC(
>1a71	fd 16					.word	EXPUnaryHex              ; $e8 HEX$(
>1a73	72 16					.word	EXPUnaryRnd              ; $e9 RND(
>1a75	82 16					.word	ExpUnaryRand             ; $ea RAND(
>1a77	6b 16					.word	EXPUnaryParenthesis      ; $eb (
>1a79	45 16					.word	EXPUnaryNull             ; $ec $
>1a7b	42 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1a7d	32 17					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1a7f	ad 13					.word	EXPCompareEqual          ; $ef =
>1a81	c8 13					.word	EXPCompareNotEqual       ; $f0 <>
>1a83	d1 13					.word	EXPCompareLessEqual      ; $f1 <=
>1a85	b6 13					.word	EXPCompareLess           ; $f2 <
>1a87	da 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1a89	bf 13					.word	EXPCompareGreater        ; $f4 >
>1a8b	5a 13					.word	EXPBinXor                ; $f5 XOR
>1a8d	4e 13					.word	EXPBinOr                 ; $f6 OR
>1a8f	42 13					.word	EXPBinAnd                ; $f7 AND
>1a91	1a 13					.word	EXPBinIDiv               ; $f8 DIV
>1a93	2b 13					.word	EXPBinIMod               ; $f9 MOD
>1a95	25 14					.word	EXPBinLeft               ; $fa <<
>1a97	2d 14					.word	EXPBinRight              ; $fb >>
>1a99	0e 13					.word	EXPBinFDiv               ; $fc /
>1a9b	05 13					.word	EXPBinMul                ; $fd *
>1a9d	fc 12					.word	EXPBinSub                ; $fe -
>1a9f	f3 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1aa1					TOKDetokenise:
.1aa1	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1aa3	84 23		sty $23				sty 	zTemp2+1
.1aa5	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.1aa8					_TOKDLoop:
.1aa8	20 d7 1a	jsr $1ad7			jsr 	TOKDGet 					; get next
.1aab	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1aad	f0 26		beq $1ad5			beq 	_TOKDExit
.1aaf	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1ab1	f0 1d		beq $1ad0			beq 	_TOKDDataItem
.1ab3	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1ab5	f0 19		beq $1ad0			beq 	_TOKDDataItem
.1ab7	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1ab9	10 05		bpl $1ac0			bpl 	_TOKDNotToken
.1abb	20 9f 1b	jsr $1b9f			jsr 	TOKDToken 					; token to text.
.1abe	80 e8		bra $1aa8			bra 	_TOKDLoop
.1ac0					_TOKDNotToken:
.1ac0	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1ac2	90 05		bcc $1ac9			bcc 	_TOKDNotIdentifier
.1ac4	20 12 1b	jsr $1b12			jsr 	TOKDIdentifier
.1ac7	80 df		bra $1aa8			bra 	_TOKDLoop
.1ac9					_TOKDNotIdentifier:
.1ac9	a0 0a		ldy #$0a			ldy 	#10
.1acb	20 5b 1b	jsr $1b5b			jsr 	TOKDInteger
.1ace	80 d8		bra $1aa8			bra 	_TOKDLoop
.1ad0					_TOKDDataItem:
.1ad0	20 ed 1a	jsr $1aed			jsr 	TOKDDataItem
.1ad3	80 d3		bra $1aa8			bra 	_TOKDLoop
.1ad5					_TOKDExit:
.1ad5	18		clc				clc
.1ad6	60		rts				rts
.1ad7	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1ad9	e6 22		inc $22				inc 	zTemp2
.1adb	d0 02		bne $1adf			bne 	_TKDGExit
.1add	e6 23		inc $23				inc 	zTemp2+1
.1adf					_TKDGExit:
.1adf	60		rts				rts
.1ae0					TOKDOutput:
.1ae0	8d 42 03	sta $0342			sta 	TOKLastCharacter
.1ae3	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.1ae6					TOKSetDetokeniseOutput:
.1ae6	8e 40 03	stx $0340			stx 	TOKOutputMethod
.1ae9	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.1aec	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1aed					TOKDDataItem:
.1aed	a8		tay				tay 								; type in Y
.1aee	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1af0	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1af2	f0 02		beq $1af6			beq 	_TOKDDIsString
.1af4	a9 2e		lda #$2e			lda 	#'.'
.1af6					_TOKDDIsString:
.1af6	20 e0 1a	jsr $1ae0			jsr 	TOKDOutput 					; dump it
.1af9	20 d7 1a	jsr $1ad7			jsr 	TOKDGet 					; get length into X
.1afc	aa		tax				tax
.1afd					_TOKDDOutput:
.1afd	ca		dex				dex 								; are we complete
.1afe	30 08		bmi $1b08			bmi 	_TOKDDEnd
.1b00	20 d7 1a	jsr $1ad7			jsr 	TOKDGet 					; get character and output it
.1b03	20 e0 1a	jsr $1ae0			jsr 	TOKDOutput
.1b06	80 f5		bra $1afd			bra 	_TOKDDOutput
.1b08					_TOKDDEnd:
.1b08	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1b0a	d0 05		bne $1b11			bne 	_TOKDDNotString
.1b0c	a9 22		lda #$22			lda 	#'"'
.1b0e	20 e0 1a	jsr $1ae0			jsr 	TOKDOutput
.1b11					_TOKDDNotString:
.1b11	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1b12					TOKDIdentifier:
.1b12	a0 ff		ldy #$ff			ldy 	#$FF
.1b14	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.1b17					_TOKDLoop:
.1b17	a8		tay				tay 								; token in Y
.1b18	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1b1a	c0 64		cpy #$64			cpy 	#$64
.1b1c	f0 11		beq $1b2f			beq 	_TOKDIOutput
.1b1e	a9 5f		lda #$5f			lda 	#'_'
.1b20	c0 65		cpy #$65			cpy 	#$65
.1b22	f0 0b		beq $1b2f			beq 	_TOKDIOutput
.1b24	98		tya				tya 								; handle a-z
.1b25	18		clc				clc
.1b26	69 21		adc #$21			adc	 	#$21
.1b28	c0 5a		cpy #$5a			cpy 	#$5A
.1b2a	90 03		bcc $1b2f			bcc 	_TOKDIOutput
.1b2c	38		sec				sec 								; handle 0-9
.1b2d	e9 4b		sbc #$4b			sbc 	#$4B
.1b2f					_TOKDIOutput:
.1b2f	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.1b32	10 08		bpl $1b3c			bpl 	_TOKDINoSpacing
.1b34	48		pha				pha
.1b35	20 d1 1b	jsr $1bd1			jsr 	TOKDSpacing
.1b38	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.1b3b	68		pla				pla
.1b3c					_TOKDINoSpacing:
.1b3c	20 e0 1a	jsr $1ae0			jsr 	TOKDOutput
.1b3f	20 d7 1a	jsr $1ad7			jsr 	TOKDGet 					; get next token
.1b42	c9 7c		cmp #$7c			cmp 	#$7C
.1b44	90 d1		bcc $1b17			bcc 	_TOKDLoop
.1b46	f0 12		beq $1b5a			beq 	_TOKDIExit 					; it's a number, no tail.
.1b48	4a		lsr a				lsr 	a 							; string ?
.1b49	90 07		bcc $1b52			bcc 	_TOKDICheckArray
.1b4b	48		pha				pha
.1b4c	a9 24		lda #$24			lda 	#"$"
.1b4e	20 e0 1a	jsr $1ae0			jsr 	TOKDOutput
.1b51	68		pla				pla
.1b52					_TOKDICheckArray:
.1b52	4a		lsr a				lsr 	a 							; array ?
.1b53	90 05		bcc $1b5a			bcc 	_TOKDIExit
.1b55	a9 28		lda #$28			lda 	#"("
.1b57	20 e0 1a	jsr $1ae0			jsr 	TOKDOutput
.1b5a					_TOKDIExit:
.1b5a	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1b5b					TOKDInteger:
.1b5b	5a		phy				phy 								; save base
.1b5c	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1b5e	20 6a 27	jsr $276a			jsr 	IFloatSetByte
.1b61					_TOKDILoop:
.1b61	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1b63	c9 40		cmp #$40			cmp 	#$40
.1b65	b0 1d		bcs $1b84			bcs 	_TOKDIHaveInteger
.1b67	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1b69	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1b6c	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1b6f	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1b72	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1b75	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1b78	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1b7b	20 d7 1a	jsr $1ad7			jsr 	TOKDGet 					; OR byte in.
.1b7e	05 0c		ora $0c				ora 	IFR0+IM0
.1b80	85 0c		sta $0c				sta 	IFR0+IM0
.1b82	80 dd		bra $1b61			bra 	_TOKDILoop
.1b84					_TOKDIHaveInteger:
.1b84	7a		ply				ply 								; restore base
.1b85	98		tya				tya 								; base in A
.1b86	20 09 25	jsr $2509			jsr 	IFloatIntegerToStringR0
.1b89	86 1e		stx $1e				stx 	zTemp0
.1b8b	84 1f		sty $1f				sty 	zTemp0+1
.1b8d	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b8f	20 d1 1b	jsr $1bd1			jsr 	TOKDSpacing 				; check spacing okay.
.1b92	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1b94					_TOKDOutput:
.1b94	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b96	20 e0 1a	jsr $1ae0			jsr 	TOKDOutput
.1b99	c8		iny				iny
.1b9a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b9c	d0 f6		bne $1b94			bne 	_TOKDOutput
.1b9e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1b9f					TOKDToken:
.1b9f	a2 05		ldx #$05			ldx 	#StandardTokens & $FF
.1ba1	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1ba3					_TOKDSearch:
.1ba3	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1ba5	84 1f		sty $1f				sty 	zTemp0+1
.1ba7	aa		tax				tax 								; token ID in X.
.1ba8					_TOKDFind:
.1ba8	ca		dex				dex 								; reached the start
.1ba9	10 0d		bpl $1bb8			bpl 	_TOKDFound
.1bab	38		sec				sec 								; go to next entry
.1bac	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bae	65 1e		adc $1e				adc 	zTemp0
.1bb0	85 1e		sta $1e				sta 	zTemp0
.1bb2	90 f4		bcc $1ba8			bcc 	_TOKDFind
.1bb4	e6 1f		inc $1f				inc 	zTemp0+1
.1bb6	80 f0		bra $1ba8			bra 	_TOKDFind
.1bb8					_TOKDFound:
.1bb8	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1bba	f0 14		beq $1bd0			beq 	_TOKDExit
.1bbc	aa		tax				tax
.1bbd	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1bbf	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1bc1	20 d1 1b	jsr $1bd1			jsr 	TOKDSpacing
.1bc4					_TOKDOutput:
.1bc4	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1bc6	20 28 1f	jsr $1f28			jsr 	TOKToLower
.1bc9	20 e0 1a	jsr $1ae0			jsr 	TOKDOutput
.1bcc	c8		iny				iny
.1bcd	ca		dex				dex
.1bce	d0 f4		bne $1bc4			bne 	_TOKDOutput
.1bd0					_TOKDExit:
.1bd0	60		rts				rts
.1bd1					TOKDSpacing:
.1bd1	20 3f 1f	jsr $1f3f			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1bd4	90 0d		bcc $1be3			bcc 	_TOKDSExit
.1bd6	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1bd9	20 3f 1f	jsr $1f3f			jsr 	TOKIsIdentifierElement
.1bdc	90 05		bcc $1be3			bcc 	_TOKDSExit
.1bde	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1be0	20 e0 1a	jsr $1ae0			jsr 	TOKDOutput
.1be3					_TOKDSExit:
.1be3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1be4					PGMDeleteLine:
.1be4	20 97 1c	jsr $1c97			jsr 	PGMEndProgram 				; end of program into zTemp0
.1be7	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1be9	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1bec	85 21		sta $21				sta 	zTemp1+1
.1bee					_PGMDLoop:
.1bee	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1bf0	38		sec				sec
.1bf1	f0 3a		beq $1c2d			beq 	_PGMDExit
.1bf3	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1bf5	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bf7	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1bfa	d0 08		bne $1c04			bne 	_PGMDNext
.1bfc	c8		iny				iny
.1bfd	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bff	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1c02	f0 0d		beq $1c11			beq 	_PGMDDelete
.1c04					_PGMDNext:
.1c04	18		clc				clc
.1c05	b2 20		lda ($20)			lda 	(zTemp1)
.1c07	65 20		adc $20				adc 	zTemp1
.1c09	85 20		sta $20				sta 	zTemp1
.1c0b	90 e1		bcc $1bee			bcc 	_PGMDLoop
.1c0d	e6 21		inc $21				inc 	zTemp1+1
.1c0f	80 dd		bra $1bee			bra 	_PGMDLoop
.1c11					_PGMDDelete:
.1c11	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1c13	a8		tay				tay
.1c14					_PGMDCopy:
.1c14	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1c16	92 20		sta ($20)			sta 	(zTemp1)
.1c18	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1c1a	c5 1e		cmp $1e				cmp 	zTemp0
.1c1c	d0 07		bne $1c25			bne 	_PGMDNext2
.1c1e	a5 21		lda $21				lda 	zTemp1+1
.1c20	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c22	18		clc				clc
.1c23	f0 08		beq $1c2d			beq 	_PGMDExit
.1c25					_PGMDNext2:
.1c25	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1c27	d0 eb		bne $1c14			bne 	_PGMDCopy
.1c29	e6 21		inc $21				inc 	zTemp1+1
.1c2b	80 e7		bra $1c14			bra 	_PGMDCopy
.1c2d					_PGMDExit:
.1c2d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1c2e					PGMInsertLine:
.1c2e	20 97 1c	jsr $1c97			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c31	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c33	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c36	85 21		sta $21				sta 	zTemp1+1
.1c38					_PGMILoop:
.1c38	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c3a	f0 1c		beq $1c58			beq 	_PGMIInsert
.1c3c	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c3e	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c40	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c43	c8		iny				iny
.1c44	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c46	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1c49	b0 0d		bcs $1c58			bcs 	_PGMIInsert 				; insert here.
.1c4b	18		clc				clc
.1c4c	b2 20		lda ($20)			lda 	(zTemp1)
.1c4e	65 20		adc $20				adc 	zTemp1
.1c50	85 20		sta $20				sta 	zTemp1
.1c52	90 e4		bcc $1c38			bcc 	_PGMILoop
.1c54	e6 21		inc $21				inc 	zTemp1+1
.1c56	80 e0		bra $1c38			bra 	_PGMILoop
.1c58					_PGMIInsert:
.1c58	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1c5b					_PGMIInsertLoop:
.1c5b	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c5d	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1c5f	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1c61	c5 1e		cmp $1e				cmp 	zTemp0
.1c63	d0 06		bne $1c6b			bne 	_PGMINext
.1c65	a5 21		lda $21				lda 	zTemp1+1
.1c67	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c69	f0 0a		beq $1c75			beq 	_PGMIInserted
.1c6b					_PGMINext:
.1c6b	a5 1e		lda $1e				lda 	zTemp0
.1c6d	d0 02		bne $1c71			bne 	_PGMINoBorrow
.1c6f	c6 1f		dec $1f				dec 	zTemp0+1
.1c71					_PGMINoBorrow:
.1c71	c6 1e		dec $1e				dec 	zTemp0
.1c73	80 e6		bra $1c5b			bra 	_PGMIInsertLoop
.1c75					_PGMIInserted:
.1c75	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1c77					_PGMICopyLoop:
.1c77	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1c7a	91 20		sta ($20),y			sta 	(zTemp1),y
.1c7c	c8		iny				iny
.1c7d	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1c80	d0 f5		bne $1c77			bne 	_PGMICopyLoop
.1c82	18		clc				clc
.1c83	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1c84					PGMSetBaseAddress:
.1c84	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1c87	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1c8a	60		rts				rts
.1c8b					PGMNewProgram:
.1c8b	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1c8d	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c90	85 1f		sta $1f				sta 	zTemp0+1
.1c92	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1c94	92 1e		sta ($1e)			sta 	(zTemp0)
.1c96	60		rts				rts
.1c97					PGMEndProgram:
.1c97	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1c99	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c9c	85 1f		sta $1f				sta 	zTemp0+1
.1c9e					_PGMEPLoop:
.1c9e	b2 1e		lda ($1e)			lda 	(zTemp0)
.1ca0	f0 0b		beq $1cad			beq 	_PGMEPExit
.1ca2	18		clc				clc
.1ca3	65 1e		adc $1e				adc 	zTemp0
.1ca5	85 1e		sta $1e				sta 	zTemp0
.1ca7	90 f5		bcc $1c9e			bcc 	_PGMEPLoop
.1ca9	e6 1f		inc $1f				inc 	zTemp0+1
.1cab	80 f1		bra $1c9e			bra 	_PGMEPLoop
.1cad					_PGMEPExit:
.1cad	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1cae					TOKResetElement:
.1cae	9c 46 03	stz $0346			stz 	TOKElement
.1cb1	60		rts				rts
.1cb2					TOKWriteElement:
.1cb2	da		phx				phx
.1cb3	ae 46 03	ldx $0346			ldx 	TOKElement
.1cb6	9d 47 03	sta $0347,x			sta 	TOKElementText,x
.1cb9	9e 48 03	stz $0348,x			stz 	TOKElementText+1,x
.1cbc	fa		plx				plx
.1cbd	ee 46 03	inc $0346			inc 	TOKElement
.1cc0	60		rts				rts
.0346					TOKElement:
>0346							.fill 	1
.0347					TOKElementText:
>0347							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1cc1					TOKTokeniseConstant:
.1cc1	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1cc3	48		pha				pha 								; save on stack
.1cc4	29 c0		and #$c0			and 	#$C0
.1cc6	05 0d		ora $0d				ora 	IFR0+IM1
.1cc8	05 0e		ora $0e				ora 	IFR0+IM2
.1cca	f0 10		beq $1cdc			beq 	_TTCLess
.1ccc	da		phx				phx
.1ccd	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1ccf					_TTCShiftRight:
.1ccf	46 0e		lsr $0e				lsr 	IFR0+IM2
.1cd1	66 0d		ror $0d				ror 	IFR0+IM1
.1cd3	66 0c		ror $0c				ror 	IFR0+IM0
.1cd5	ca		dex				dex
.1cd6	d0 f7		bne $1ccf			bne 	_TTCShiftRight
.1cd8	fa		plx				plx
.1cd9	20 c1 1c	jsr $1cc1			jsr 	TOKTokeniseConstant
.1cdc					_TTCLess:
.1cdc	68		pla				pla
.1cdd	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1cdf	20 7b 1d	jsr $1d7b			jsr 	TOKWriteA
.1ce2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1ce3					TOKTokeniseDecimals:
.1ce3	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext 					; consume the .
.1ce6	20 b5 1e	jsr $1eb5			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1ce9	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1ceb	20 7b 1d	jsr $1d7b			jsr 	TOKWriteA
.1cee	20 f3 1c	jsr $1cf3			jsr 	TOKOutputElementBuffer 		; then the buffer
.1cf1	18		clc				clc
.1cf2	60		rts				rts
.1cf3					TOKOutputElementBuffer:
.1cf3	ad 46 03	lda $0346			lda 	TOKElement 					; get count and write that
.1cf6	20 7b 1d	jsr $1d7b			jsr 	TOKWriteA
.1cf9	a8		tay				tay 								; put in Y
.1cfa	f0 0c		beq $1d08			beq 	_TOEExit 					; exit if empty which is okay.
.1cfc	a2 01		ldx #$01			ldx 	#1
.1cfe					_TOELoop:
.1cfe	bd 46 03	lda $0346,x			lda 	TOKElement,x
.1d01	20 7b 1d	jsr $1d7b			jsr 	TOKWriteA
.1d04	e8		inx				inx
.1d05	88		dey				dey
.1d06	d0 f6		bne $1cfe			bne 	_TOELoop
.1d08					_TOEExit:
.1d08	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1d09					TOKTokenise:
.1d09	8c 47 04	sty $0447			sty 	TOKDataSource+1 			; save source routine pointer
.1d0c	8e 46 04	stx $0446			stx 	TOKDataSource
.1d0f	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1d11	2a		rol a				rol  	a
.1d12	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1d15	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1d17	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1d1a					_TOKMainLoop:
.1d1a	20 87 1d	jsr $1d87			jsr 	TOKGet 						; what follows.
.1d1d	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1d1f	f0 51		beq $1d72			beq 	_TOKExit
.1d21	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1d23	d0 05		bne $1d2a			bne 	_TOKElement
.1d25	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext
.1d28	80 f0		bra $1d1a			bra 	_TOKMainLoop
.1d2a					_TOKElement:
.1d2a	20 33 1f	jsr $1f33			jsr 	TOKIsDigit 					; is it 0..9
.1d2d	90 0a		bcc $1d39			bcc 	_TOKNotDigit
.1d2f	20 8c 1e	jsr $1e8c			jsr 	TOKTokeniseInteger 			; get integer
.1d32	b0 45		bcs $1d79			bcs 	_TOKFail 					; did it fail ?
.1d34	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1d37	80 e1		bra $1d1a			bra 	_TOKMainLoop
.1d39					_TOKNotDigit:
.1d39	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1d3c	d0 3b		bne $1d79			bne 	_TOKFail 					; if so, we've a problem.
.1d3e	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d40	d0 07		bne $1d49			bne 	_TOKNotHex
.1d42	20 d4 1d	jsr $1dd4			jsr 	TOKTokeniseHexadecimal
.1d45	b0 32		bcs $1d79			bcs 	_TOKFail
.1d47	80 d1		bra $1d1a			bra 	_TOKMainLoop
.1d49					_TOKNotHex:
.1d49	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1d4b	d0 07		bne $1d54			bne 	_TOKNotDecimal
.1d4d	20 e3 1c	jsr $1ce3			jsr 	TOKTokeniseDecimals
.1d50	b0 27		bcs $1d79			bcs 	_TOKFail
.1d52	80 c6		bra $1d1a			bra 	_TOKMainLoop
.1d54					_TOKNotDecimal:
.1d54	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1d56	d0 07		bne $1d5f			bne 	_TOKNotString
.1d58	20 fa 1e	jsr $1efa			jsr 	TOKTokeniseString
.1d5b	b0 1c		bcs $1d79			bcs 	_TOKFail
.1d5d	80 bb		bra $1d1a			bra 	_TOKMainLoop
.1d5f					_TOKNotString:
.1d5f	20 50 1f	jsr $1f50			jsr 	TOKIsAlpha 					; identifier ?
.1d62	b0 07		bcs $1d6b			bcs 	_TOKIdentifier
.1d64	20 c9 1e	jsr $1ec9			jsr 	TOKTokenisePunctuation 		; punctuation
.1d67	b0 10		bcs $1d79			bcs 	_TOKFail
.1d69	80 af		bra $1d1a			bra 	_TOKMainLoop
.1d6b					_TOKIdentifier:
.1d6b	20 0e 1e	jsr $1e0e			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1d6e	b0 09		bcs $1d79			bcs 	_TOKFail
.1d70	80 a8		bra $1d1a			bra 	_TOKMainLoop
.1d72					_TOKExit:
.1d72	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1d74	20 7b 1d	jsr $1d7b			jsr 	TOKWriteA
.1d77	18		clc				clc									; return with carry set.
.1d78	60		rts				rts
.1d79					_TOKFail:
.1d79	38		sec				sec
.1d7a	60		rts				rts
.1d7b					TOKWriteA:
.1d7b	da		phx				phx
.1d7c	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1d7f	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1d82	fa		plx				plx
.1d83	ee 37 02	inc $0237			inc 	TOKLineSize
.1d86	60		rts				rts
.1d87					TOKGet:
.1d87	18		clc				clc
.1d88	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1d8b					TOKGetNext:
.1d8b	38		sec				sec
.1d8c	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.0446					TOKDataSource:
>0446							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1d8f					TOKFindToken:
.1d8f	a2 05		ldx #$05			ldx 	#StandardTokens & $FF 		; do this table
.1d91	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1d93	20 9e 1d	jsr $1d9e			jsr 	TOKFindTokenXY 				; find it, or not
.1d96	90 04		bcc $1d9c			bcc 	_TOKFTFail
.1d98	a2 00		ldx #$00			ldx 	#0
.1d9a	38		sec				sec
.1d9b	60		rts				rts
.1d9c					_TOKFTFail
.1d9c	18		clc				clc
.1d9d	60		rts				rts
.1d9e					TOKFindTokenXY:
.1d9e	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1da0	84 1f		sty $1f				sty 	zTemp0+1
.1da2	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1da4	8d 48 04	sta $0448			sta 	TOKCurrent
.1da7					_TOKFindLoop:
.1da7	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1da9	18		clc				clc 		 						; clear carry in case of fail
.1daa	30 17		bmi $1dc3			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1dac	cd 46 03	cmp $0346			cmp 	TOKElement 					; compare against the element length
.1daf	d0 13		bne $1dc4			bne 	_TOKNext 					; different, try next.
.1db1	aa		tax				tax 								; number of chars to compare.
.1db2	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1db4					_TOKCompare:
.1db4	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1db6	d9 46 03	cmp $0346,y			cmp 	TOKElementText-1,y
.1db9	d0 09		bne $1dc4			bne 	_TOKNext 					; different ? try next
.1dbb	c8		iny				iny 								; compare next two
.1dbc	ca		dex				dex
.1dbd	d0 f5		bne $1db4			bne 	_TOKCompare 				; until done X characters.
.1dbf	38		sec				sec
.1dc0	ad 48 04	lda $0448			lda 	TOKCurrent 					; return current ID.
.1dc3					_TOKExit:
.1dc3	60		rts				rts
.1dc4					_TOKNext:
.1dc4	ee 48 04	inc $0448			inc 	TOKCurrent 					; increment token #
.1dc7	38		sec				sec 								; add length+1 to ptr
.1dc8	b2 1e		lda ($1e)			lda 	(zTemp0)
.1dca	65 1e		adc $1e				adc 	zTemp0
.1dcc	85 1e		sta $1e				sta 	zTemp0
.1dce	90 d7		bcc $1da7			bcc 	_TOKFindLoop
.1dd0	e6 1f		inc $1f				inc 	zTemp0+1
.1dd2	80 d3		bra $1da7			bra 	_TOKFindLoop
.0448					TOKCurrent:
>0448							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1dd4					TOKTokeniseHexadecimal:
.1dd4	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext 					; consume the $
.1dd7	a2 0c		ldx #$0c			ldx 	#IFR0
.1dd9	20 68 27	jsr $2768			jsr 	IFloatSetZero 				; set R0 = 0
.1ddc					_TTHLoop:
.1ddc	20 87 1d	jsr $1d87			jsr 	TOKGet 						; keep getting and copying while numeric.
.1ddf	20 5d 1f	jsr $1f5d			jsr 	TOKIsHexadecimal
.1de2	90 20		bcc $1e04			bcc 	_TTHDone
.1de4	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1de6	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1de9	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1dec	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1def	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.1df2	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext
.1df5	38		sec				sec 								; convert to decimal.
.1df6	e9 30		sbc #$30			sbc 	#48
.1df8	c9 0a		cmp #$0a			cmp 	#10
.1dfa	90 02		bcc $1dfe			bcc 	_TTHNotAlpha
.1dfc	e9 07		sbc #$07			sbc 	#7
.1dfe					_TTHNotAlpha:
.1dfe	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1e00	85 0c		sta $0c				sta 	IFR0+IM0
.1e02	80 d8		bra $1ddc			bra 	_TTHLoop
.1e04					_TTHDone:
.1e04	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1e06	20 7b 1d	jsr $1d7b			jsr 	TOKWriteA
.1e09	20 c1 1c	jsr $1cc1			jsr 	TOKTokeniseConstant 		; write integer out.
.1e0c	18		clc				clc
.1e0d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1e0e					TOKTokeniseIdentifier:
.1e0e	20 ae 1c	jsr $1cae			jsr 	TOKResetElement 			; extract an identifier
.1e11					_TOKGetIdentifier:
.1e11	20 87 1d	jsr $1d87			jsr 	TOKGet
.1e14	20 1d 1f	jsr $1f1d			jsr 	TOKToUpper
.1e17	20 3f 1f	jsr $1f3f			jsr 	TOKIsIdentifierElement
.1e1a	90 08		bcc $1e24			bcc 	_TOKEndIdent
.1e1c	20 b2 1c	jsr $1cb2			jsr		TOKWriteElement
.1e1f	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext
.1e22	80 ed		bra $1e11			bra 	_TOKGetIdentifier
.1e24					_TOKEndIdent:
.1e24	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1e26	d0 06		bne $1e2e			bne 	_TOKNotString
.1e28	20 b2 1c	jsr $1cb2			jsr 	TOKWriteElement 			; add it
.1e2b	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext 					; consume it
.1e2e					_TOKNotString:
.1e2e	20 87 1d	jsr $1d87			jsr 	TOKGet 						; finally check for (
.1e31	c9 28		cmp #$28			cmp 	#"("
.1e33	d0 06		bne $1e3b			bne 	_TOKNoArray
.1e35	20 b2 1c	jsr $1cb2			jsr 	TOKWriteElement 			; add it
.1e38	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext 					; consume it
.1e3b					_TOKNoArray:
.1e3b	20 8f 1d	jsr $1d8f			jsr 	TOKFindToken 				; find it
.1e3e	90 05		bcc $1e45			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e40	20 7b 1d	jsr $1d7b			jsr 	TOKWriteA
.1e43	18		clc				clc
.1e44	60		rts				rts
.1e45					_TOKIsVariable:
.1e45	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1e47					_TOKOutputBuffer:
.1e47	bd 47 03	lda $0347,x			lda 	TOKElementText,x 			; output it translated.
.1e4a	20 73 1e	jsr $1e73			jsr 	TOKTranslateIdentifier
.1e4d	20 7b 1d	jsr $1d7b			jsr 	TOKWriteA
.1e50	e8		inx				inx
.1e51	bd 47 03	lda $0347,x			lda 	TOKElementText,x
.1e54	20 3f 1f	jsr $1f3f			jsr 	TOKIsIdentifierElement
.1e57	b0 ee		bcs $1e47			bcs 	_TOKOutputBuffer
.1e59	a8		tay				tay 								; last char in Y
.1e5a	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1e5c	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1e5e	f0 0e		beq $1e6e			beq 	_TOKIVExit
.1e60	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1e62	d0 04		bne $1e68			bne 	_TOKIVCheckArray 			; no, check for (
.1e64	1a		inc a				inc 	a 							; token is $7D
.1e65	bc 48 03	ldy $0348,x			ldy 	TOKElementText+1,x 			; get next one.
.1e68					_TOKIVCheckArray:
.1e68	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1e6a	d0 02		bne $1e6e			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1e6c	1a		inc a				inc 	a
.1e6d	1a		inc a				inc 	a
.1e6e					_TOKIVExit:
.1e6e	20 7b 1d	jsr $1d7b			jsr 	TOKWriteA 					; ending token
.1e71	18		clc				clc
.1e72	60		rts				rts
.1e73					TOKTranslateIdentifier:
.1e73	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1e75	f0 0f		beq $1e86			beq 	_TTI64
.1e77	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1e79	f0 0e		beq $1e89			beq 	_TTI65
.1e7b	38		sec				sec
.1e7c	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1e7e	10 03		bpl $1e83			bpl 	_TTIExit
.1e80	18		clc				clc 								; map 09 onto 26-35
.1e81	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1e83					_TTIExit:
.1e83	09 40		ora #$40			ora 	#$40 						; correct range.
.1e85	60		rts				rts
.1e86	a9 64		lda #$64	_TTI64:	lda 	#$64
.1e88	60		rts				rts
.1e89	a9 65		lda #$65	_TTI65:	lda 	#$65
.1e8b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1e8c					TOKTokeniseInteger:
.1e8c	20 b5 1e	jsr $1eb5			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e8f	a2 47		ldx #$47			ldx 	#TOKElementText & $FF
.1e91	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1e93	ad 46 03	lda $0346			lda		TOKElement
.1e96	20 cc 25	jsr $25cc			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1e99	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1e9c	f0 12		beq $1eb0			beq 	_TOKNotLineNumber
.1e9e	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1ea0	d0 0c		bne $1eae			bne 	_TOKBadLineNumeber
.1ea2	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1ea4	8d 38 02	sta $0238			sta 	TOKLineNumber
.1ea7	a5 0d		lda $0d				lda 	IFR0+IM1
.1ea9	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1eac	18		clc				clc
.1ead	60		rts				rts
.1eae					_TOKBadLineNumeber:
.1eae	38		sec				sec
.1eaf	60		rts				rts
.1eb0					_TOKNotLineNumber:
.1eb0	20 c1 1c	jsr $1cc1			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1eb3	18		clc				clc
.1eb4	60		rts				rts
.1eb5					TOKExtractInteger:
.1eb5	20 ae 1c	jsr $1cae			jsr 	TOKResetElement 			; restart
.1eb8					_TTILoop:
.1eb8	20 87 1d	jsr $1d87			jsr 	TOKGet 						; keep getting and copying while numeric.
.1ebb	20 33 1f	jsr $1f33			jsr 	TOKIsDigit
.1ebe	90 08		bcc $1ec8			bcc 	_TOKEIExit
.1ec0	20 b2 1c	jsr $1cb2			jsr 	TOKWriteElement
.1ec3	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext
.1ec6	80 f0		bra $1eb8			bra 	_TTILoop
.1ec8					_TOKEIExit:
.1ec8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1ec9					TOKTokenisePunctuation:
.1ec9	20 ae 1c	jsr $1cae			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1ecc	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext
.1ecf	20 b2 1c	jsr $1cb2			jsr 	TOKWriteElement
.1ed2	20 87 1d	jsr $1d87			jsr 	TOKGet 						; what follows ?
.1ed5	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1ed7	f0 10		beq $1ee9			beq 	_TTPOne
.1ed9	20 47 1f	jsr $1f47			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1edc	b0 0b		bcs $1ee9			bcs 	_TTPOne 					; these speed things up a bit.
.1ede	20 b2 1c	jsr $1cb2			jsr 	TOKWriteElement 			; this is what we will search for.
.1ee1	20 8f 1d	jsr $1d8f			jsr 	TOKFindToken
.1ee4	b0 0a		bcs $1ef0			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1ee6	ce 46 03	dec $0346			dec 	TOKElement 					; make it a single character
.1ee9					_TTPOne:
.1ee9	20 8f 1d	jsr $1d8f			jsr 	TOKFindToken 				; look for one character punctuation
.1eec	b0 07		bcs $1ef5			bcs 	_TTPOutputExit 				; we found it
.1eee	38		sec				sec 								; not recognised.
.1eef	60		rts				rts
.1ef0					_TTPConsumeExit:
.1ef0	48		pha				pha
.1ef1	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext 					; get the 2nd char out.
.1ef4	68		pla				pla
.1ef5					_TTPOutputExit:
.1ef5	20 7b 1d	jsr $1d7b			jsr  	TOKWriteA 					; write token out
.1ef8	18		clc				clc
.1ef9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1efa					TOKTokeniseString:
.1efa	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext 					; consume the "
.1efd	20 ae 1c	jsr $1cae			jsr 	TOKResetElement 			; start getting the string
.1f00					_TOKTSLoop:
.1f00	20 87 1d	jsr $1d87			jsr 	TOKGet 						; check EOL
.1f03	c9 00		cmp #$00			cmp 	#0
.1f05	f0 0c		beq $1f13			beq 	_TOKTSExit
.1f07	20 8b 1d	jsr $1d8b			jsr 	TOKGetNext 					; get and consume
.1f0a	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1f0c	f0 05		beq $1f13			beq 	_TOKTSExit
.1f0e	20 b2 1c	jsr $1cb2			jsr 	TOKWriteElement
.1f11	80 ed		bra $1f00			bra 	_TOKTSLoop
.1f13					_TOKTSExit:
.1f13	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1f15	20 7b 1d	jsr $1d7b			jsr 	TOKWriteA
.1f18	20 f3 1c	jsr $1cf3			jsr 	TOKOutputElementBuffer
.1f1b	18		clc				clc
.1f1c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1f1d					TOKToUpper:
.1f1d	c9 61		cmp #$61			cmp 	#"a"
.1f1f	90 06		bcc $1f27			bcc 	_TTUNotLower
.1f21	c9 7b		cmp #$7b			cmp 	#"z"+1
.1f23	b0 02		bcs $1f27			bcs 	_TTUNotLower
.1f25	49 20		eor #$20			eor 	#$20
.1f27					_TTUNotLower:
.1f27	60		rts				rts
.1f28					TOKToLower:
.1f28	c9 41		cmp #$41			cmp 	#"A"
.1f2a	90 06		bcc $1f32			bcc 	_TTUNotUpper
.1f2c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f2e	b0 02		bcs $1f32			bcs 	_TTUNotUpper
.1f30	49 20		eor #$20			eor 	#$20
.1f32					_TTUNotUpper:
.1f32	60		rts				rts
.1f33					TOKIsDigit:
.1f33	c9 30		cmp #$30			cmp 	#"0"
.1f35	90 06		bcc $1f3d			bcc 	TOKFail
.1f37	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f39	b0 02		bcs $1f3d			bcs 	TOKFail
.1f3b					TOKSucceed:
.1f3b	38		sec				sec
.1f3c	60		rts				rts
.1f3d					TOKFail:
.1f3d	18		clc				clc
.1f3e	60		rts				rts
.1f3f					TOKIsIdentifierElement:
.1f3f	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f41	f0 f8		beq $1f3b			beq 	TOKSucceed
.1f43	c9 5f		cmp #$5f			cmp 	#"_"
.1f45	f0 f4		beq $1f3b			beq 	TOKSucceed 					; else fall through to alphanumeric
.1f47					TOKIsAlphaNumeric:
.1f47	20 50 1f	jsr $1f50			jsr 	TOKIsAlpha
.1f4a	b0 ef		bcs $1f3b			bcs 	TOKSucceed
.1f4c	20 33 1f	jsr $1f33			jsr 	TOKIsDigit
.1f4f	60		rts				rts
.1f50					TOKIsAlpha:
.1f50	20 1d 1f	jsr $1f1d			jsr 	TOKToUpper
.1f53	c9 41		cmp #$41			cmp 	#"A"
.1f55	90 e6		bcc $1f3d			bcc 	TOKFail
.1f57	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f59	b0 e2		bcs $1f3d			bcs 	TOKFail
.1f5b	80 de		bra $1f3b			bra 	TOKSucceed
.1f5d					TOKIsHexadecimal:
.1f5d	20 33 1f	jsr $1f33			jsr		TOKIsDigit
.1f60	b0 d9		bcs $1f3b			bcs 	TOKSucceed
.1f62	20 50 1f	jsr $1f50			jsr 	TOKIsAlpha
.1f65	90 d6		bcc $1f3d			bcc 	TOKFail
.1f67	c9 47		cmp #$47			cmp 	#"F"+1
.1f69	b0 d2		bcs $1f3d			bcs 	TOKFail
.1f6b	80 ce		bra $1f3b			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.1f6d					StringConcrete:
.1f6d	5a		phy				phy 								; save position on stack
.1f6e	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.1f70	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.1f72	b0 41		bcs $1fb5			bcs 	_SALengthError
.1f74	18		clc				clc 								; length of the new string
.1f75	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.1f77	90 02		bcc $1f7b			bcc 	_SAHaveLength
.1f79	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.1f7b					_SAHaveLength:
.1f7b	48		pha				pha 								; save length to be allocated for concreting.
.1f7c	38		sec				sec
.1f7d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.1f7f	6d 4a 04	adc $044a			adc 	stringMemory
.1f82	8d 4a 04	sta $044a			sta 	stringMemory
.1f85	85 22		sta $22				sta 	zTemp2 						; update storage address
.1f87	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.1f89	6d 4b 04	adc $044b			adc 	stringMemory+1
.1f8c	8d 4b 04	sta $044b			sta 	stringMemory+1
.1f8f	85 23		sta $23				sta 	zTemp2+1
.1f91	68		pla				pla 								; save length allocated in +0
.1f92	92 22		sta ($22)			sta 	(zTemp2)
.1f94	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.1f96	a0 01		ldy #$01			ldy 	#1
.1f98	91 22		sta ($22),y			sta 	(zTemp2),y
.1f9a					_SACopyNewString:
.1f9a	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.1f9c	a0 02		ldy #$02			ldy 	#2
.1f9e	91 22		sta ($22),y			sta 	(zTemp2),y
.1fa0	aa		tax				tax 								; bytes to copy
.1fa1	f0 0c		beq $1faf			beq 	_SACopyExit
.1fa3	a0 01		ldy #$01			ldy 	#1 							; first character from here
.1fa5					_SACopyNSLoop:
.1fa5	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.1fa7	c8		iny				iny 								; write two on in string storage
.1fa8	c8		iny				iny
.1fa9	91 22		sta ($22),y			sta 	(zTemp2),y
.1fab	88		dey				dey
.1fac	ca		dex				dex									; until copied all the string lengths.
.1fad	d0 f6		bne $1fa5			bne 	_SACopyNSLoop
.1faf					_SACopyExit:
.1faf	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.1fb1	a5 22		lda $22				lda 	zTemp2
.1fb3	7a		ply				ply
.1fb4	60		rts				rts
.1fb5					_SALengthError:
.1fb5	4c a9 12	jmp $12a9		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.1fb8					StringSystemInitialise:
.1fb8	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh 			; last byte of memory
.1fbb	3a		dec a				dec 	a
.1fbc	8d 4b 04	sta $044b			sta 	stringMemory+1
.1fbf	85 1f		sta $1f				sta 	zTemp0+1
.1fc1	a9 ff		lda #$ff			lda 	#$FF
.1fc3	8d 4a 04	sta $044a			sta 	stringMemory
.1fc6	85 1e		sta $1e				sta 	zTemp0
.1fc8	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.1fca	92 1e		sta ($1e)			sta 	(zTemp0)
.1fcc	60		rts				rts
.1fcd					StringSpaceInitialise:
.1fcd	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.1fcf	8d 49 04	sta $0449			sta 	stringInitialised
.1fd2	ad 4a 04	lda $044a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.1fd5	8d 4c 04	sta $044c			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.1fd8	ad 4b 04	lda $044b			lda 	stringMemory+1
.1fdb	3a		dec a				dec 	a
.1fdc	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1fdf	60		rts				rts
.1fe0					StringTempAllocate:
.1fe0	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.1fe2	b0 2e		bcs $2012			bcs 	_STALength
.1fe4	2c 49 04	bit $0449			bit 	stringInitialised 			; already initialised
.1fe7	30 05		bmi $1fee			bmi 	_STAAllocate
.1fe9	48		pha				pha 								; save value to subtract.
.1fea	20 cd 1f	jsr $1fcd			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.1fed	68		pla				pla 								; restore it
.1fee					_STAAllocate:
.1fee	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.1ff0	18		clc				clc  								; deliberate allows one more
.1ff1	6d 4c 04	adc $044c			adc 	stringTempPointer 			; subtract from temp pointer
.1ff4	8d 4c 04	sta $044c			sta 	stringTempPointer
.1ff7	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.1ff9	85 26		sta $26				sta 	zsTemp 						; and zsTemp
.1ffb	ad 4d 04	lda $044d			lda 	stringTempPointer+1
.1ffe	69 ff		adc #$ff			adc 	#$FF
.2000	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.2003	85 27		sta $27				sta 	zsTemp+1
.2005	85 0d		sta $0d				sta 	IFR0+IM1
.2007	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2009	a9 80		lda #$80			lda 	#$80
.200b	85 0f		sta $0f				sta 	IFR0+IExp
.200d	a9 00		lda #$00			lda 	#0 							; clear the target string
.200f	92 26		sta ($26)			sta 	(zsTemp)
.2011	60		rts				rts
.2012					_STALength:
.2012	4c a9 12	jmp $12a9		jmp	ErrorV_string
.2015					StringTempWrite:
.2015	5a		phy				phy
.2016	48		pha				pha
.2017	b2 26		lda ($26)			lda 	(zsTemp)
.2019	1a		inc a				inc 	a
.201a	92 26		sta ($26)			sta 	(zsTemp)
.201c	a8		tay				tay
.201d	68		pla				pla
.201e	91 26		sta ($26),y			sta 	(zsTemp),y
.2020	7a		ply				ply
.2021	60		rts				rts
.0026					zsTemp:
>0026							.fill 	2
.0449					stringInitialised:
>0449							.fill 	1
.044a					stringMemory:
>044a							.fill 	2
.044c					stringTempPointer:
>044c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2022					VARCreate:
.2022	5a		phy				phy
.2023	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2025	a2 00		ldx #$00			ldx 	#0
.2027	20 2c 10	jsr $102c			jsr 	AllocateMemory
.202a	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.202c	86 21		stx $21				stx 	zTemp1+1
.202e	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2030	ad 50 04	lda $0450			lda 	VARHash
.2033	91 20		sta ($20),y			sta 	(zTemp1),y
.2035	c8		iny				iny 								; put address of name into +3,+4
.2036	ad 4e 04	lda $044e			lda 	VARNameAddress
.2039	91 20		sta ($20),y			sta 	(zTemp1),y
.203b	c8		iny				iny
.203c	ad 4f 04	lda $044f			lda 	VARNameAddress+1
.203f	91 20		sta ($20),y			sta 	(zTemp1),y
.2041	ad 51 04	lda $0451			lda 	VARType
.2044	29 01		and #$01			and 	#1
.2046	f0 06		beq $204e			beq 	_CVNotString
.2048	a0 08		ldy #$08			ldy 	#5+3
.204a	a9 80		lda #$80			lda 	#$80
.204c	91 20		sta ($20),y			sta 	(zTemp1),y
.204e					_CVNotString:
.204e	ad 72 04	lda $0472			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2051	85 1e		sta $1e				sta 	zTemp0
.2053	ad 73 04	lda $0473			lda 	VARHashEntry+1
.2056	85 1f		sta $1f				sta 	zTemp0+1
.2058	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.205a	b2 1e		lda ($1e)			lda 	(zTemp0)
.205c	92 20		sta ($20)			sta 	(zTemp1)
.205e	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2060	91 20		sta ($20),y			sta 	(zTemp1),y
.2062	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.2064	92 1e		sta ($1e)			sta 	(zTemp0)
.2066	a5 21		lda $21				lda 	zTemp1+1
.2068	91 1e		sta ($1e),y			sta 	(zTemp0),y
.206a	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.206c	a6 21		ldx $21				ldx 	zTemp1+1
.206e	18		clc				clc 								; add 5 to point to the data.
.206f	69 05		adc #$05			adc 	#5
.2071	90 01		bcc $2074			bcc 	_VCNoCarry
.2073	e8		inx				inx
.2074					_VCNoCarry:
.2074	7a		ply				ply
.2075	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2076					VARFind:
.2076	5a		phy				phy
.2077	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2079	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.207b	85 21		sta $21				sta 	zTemp1+1
.207d	f0 1c		beq $209b			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.207f	b2 1e		lda ($1e)			lda 	(zTemp0)
.2081	85 20		sta $20				sta 	zTemp1
.2083					_VFLoop:
.2083	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2085	b1 20		lda ($20),y			lda 	(zTemp1),y
.2087	cd 50 04	cmp $0450			cmp 	VARHash
.208a	f0 12		beq $209e			beq 	_VFHashesMatch 				; if so, check the name.
.208c					_VFNext:
.208c	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.208e	aa		tax				tax
.208f	a0 01		ldy #$01			ldy 	#1
.2091	b1 20		lda ($20),y			lda 	(zTemp1),y
.2093	85 21		sta $21				sta 	zTemp1+1
.2095	86 20		stx $20				stx 	zTemp1
.2097	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2099	d0 e8		bne $2083			bne 	_VFLoop
.209b					_VFExitFail:
.209b	7a		ply				ply
.209c	18		clc				clc
.209d	60		rts				rts
.209e					_VFHashesMatch:
.209e	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.20a0	b1 20		lda ($20),y			lda 	(zTemp1),y
.20a2	85 22		sta $22				sta 	zTemp2
.20a4	c8		iny				iny
.20a5	b1 20		lda ($20),y			lda 	(zTemp1),y
.20a7	85 23		sta $23				sta 	zTemp2+1
.20a9	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.20ab					_VFNameCompLoop:
.20ab	c8		iny				iny 								; char at a time
.20ac	b9 52 04	lda $0452,y			lda 	VARBuffer,y
.20af	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.20b1	d0 d9		bne $208c			bne 	_VFNext						; next entry if different.
.20b3	c9 7c		cmp #$7c			cmp 	#$7C
.20b5	90 f4		bcc $20ab			bcc 	_VFNameCompLoop 			; until done the whole lot.
.20b7	18		clc				clc
.20b8	a5 20		lda $20				lda 	zTemp1
.20ba	a6 21		ldx $21				ldx 	zTemp1+1
.20bc	69 05		adc #$05			adc 	#5
.20be	90 01		bcc $20c1			bcc 	_VFNNoCarry
.20c0	e8		inx				inx
.20c1					_VFNNoCarry:
.20c1	7a		ply				ply
.20c2	38		sec				sec
.20c3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.20c4					VARGetInfo:
.20c4	98		tya				tya 								; calculate the address of the identifier start.
.20c5	18		clc				clc
.20c6	65 1c		adc $1c				adc 	codePtr
.20c8	8d 4e 04	sta $044e			sta 	VARNameAddress
.20cb	a5 1d		lda $1d				lda 	codePtr+1
.20cd	69 00		adc #$00			adc 	#0
.20cf	8d 4f 04	sta $044f			sta 	VARNameAddress+1
.20d2	9c 50 04	stz $0450			stz 	VARHash
.20d5	a2 00		ldx #$00			ldx 	#0
.20d7					_VARCopyName:
.20d7	18		clc				clc 								; update the sum hash.
.20d8	ad 50 04	lda $0450			lda 	VARHash
.20db	71 1c		adc ($1c),y			adc 	(codePtr),y
.20dd	8d 50 04	sta $0450			sta 	VARHash
.20e0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.20e2	c8		iny				iny
.20e3	9d 52 04	sta $0452,x			sta 	VARBuffer,x
.20e6	e8		inx				inx
.20e7	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.20e9	90 ec		bcc $20d7			bcc 	_VARCopyName
.20eb	8d 51 04	sta $0451			sta 	VARType 					; save type byte
.20ee	29 03		and #$03			and 	#3 							; type is 0-3
.20f0	0a		asl a				asl 	a
.20f1	0a		asl a				asl 	a
.20f2	85 1e		sta $1e				sta 	zTemp0
.20f4	ad 50 04	lda $0450			lda 	VARHash 					; force into range of hash entries per type.
.20f7	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.20f9	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.20fb	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.20fc	69 74		adc #$74			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.20fe	85 1e		sta $1e				sta 	zTemp0
.2100	8d 72 04	sta $0472			sta 	VARHashEntry
.2103	a9 04		lda #$04			lda 	#VARHashTables >> 8
.2105	69 00		adc #$00			adc 	#0
.2107	85 1f		sta $1f				sta 	zTemp0+1
.2109	8d 73 04	sta $0473			sta 	VARHashEntry+1
.210c	60		rts				rts
.210d					VARClearHashTables:
.210d	a2 00		ldx #$00			ldx 	#0
.210f					_VCHRLoop:
.210f	a9 00		lda #$00			lda 	#0
.2111	9d 74 04	sta $0474,x			sta 	VARHashTables,x
.2114	e8		inx				inx
.2115	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2117	d0 f6		bne $210f			bne 	_VCHRLoop
.2119	60		rts				rts
.044e					VARNameAddress:
>044e							.fill 	2
.0450					VARHash:
>0450							.fill 	1
.0451					VARType:
>0451							.fill 	1
.0452					VARBuffer:
>0452							.fill 	32
.0472					VARHashEntry:
>0472							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0474					VARHashTables:
>0474							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.211a					VARCheckSimple:
.211a	aa		tax				tax 								; save in X
.211b	b1 1c		lda ($1c),y			lda 	(codePtr),y
.211d	c9 7c		cmp #$7c			cmp 	#$7C
.211f	d0 15		bne $2136			bne 	_VCSComplex
.2121	c8		iny				iny 								; consume the second byte, the type.
.2122	8a		txa				txa  								; character (40-7F) x 4
.2123	0a		asl a				asl 	a
.2124	0a		asl a				asl  	a
.2125	18		clc				clc
.2126	69 94		adc #$94			adc 	#FastVariables & $FF
.2128	85 0c		sta $0c				sta 	IFR0+IM0
.212a	a9 04		lda #$04			lda 	#FastVariables >> 8
.212c	69 00		adc #$00			adc 	#0
.212e	85 0d		sta $0d				sta 	IFR0+IM1
.2130	64 0e		stz $0e				stz 	IFR0+IM2
.2132	64 0f		stz $0f				stz 	IFR0+IExp
.2134	38		sec				sec 								; it's a reference
.2135	60		rts				rts
.2136					_VCSComplex:
.2136	88		dey				dey	 								; extract information.
.2137	20 c4 20	jsr $20c4			jsr 	VARGetInfo
.213a	20 76 20	jsr $2076			jsr 	VARFind 					; search for variable
.213d	b0 03		bcs $2142			bcs 	_VCSHaveVariable
.213f	20 22 20	jsr $2022			jsr 	VARCreate 					; create variable
.2142					_VCSHaveVariable:
.2142	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.2144	85 0c		sta $0c				sta 	IFR0+IM0
.2146	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.2148	ad 51 04	lda $0451			lda 	VARType 					; number/string bit into carry
.214b	6a		ror a				ror 	a
.214c	a9 00		lda #$00			lda 	#0
.214e	6a		ror a				ror 	a 							; now $00 or $80
.214f	85 0f		sta $0f				sta 	IFR0+IExp
.2151	38		sec				sec 								; it's a reference
.2152	60		rts				rts
.0494					FastVariables:
>0494							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.2153					IFInitialise:
.2153	9c 04 05	stz $0504			stz 	IFStackIndex
.2156	60		rts				rts
.2157					IFloatSubtract:
.2157	da		phx				phx
.2158	a2 0c		ldx #$0c			ldx 	#IFR0
.215a	20 73 27	jsr $2773			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.215d	fa		plx				plx
.215e					IFloatAdd:
.215e	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2160	05 0f		ora $0f				ora 	IFR0+IExp
.2162	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2164	d0 4e		bne $21b4			bne 	_IFloatAddDecimals 			; decimal version.
.2166					_IFAddSubMantissa:
.2166	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2168	45 0f		eor $0f				eor 	IFR0+IExp
.216a	29 40		and #$40			and 	#IFSign
.216c	d0 21		bne $218f			bne 	_IFloatSubMantissa
.216e	18		clc				clc 								; do the actual addition
.216f	a5 0c		lda $0c			lda 	IFR0+IM0
.2171	75 00		adc $00,x		adc 		IM0,x
.2173	85 0c		sta $0c			sta 	IFR0+IM0
.2175	a5 0d		lda $0d			lda 	IFR0+IM1
.2177	75 01		adc $01,x		adc 		IM1,x
.2179	85 0d		sta $0d			sta 	IFR0+IM1
.217b	a5 0e		lda $0e			lda 	IFR0+IM2
.217d	75 02		adc $02,x		adc 		IM2,x
.217f	85 0e		sta $0e			sta 	IFR0+IM2
.2181	10 29		bpl $21ac			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2183	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.2185	20 97 27	jsr $2797			jsr 	IFloatShiftRight
.2188	20 c1 27	jsr $27c1			jsr 	IFloatIncExponent
.218b	d0 1f		bne $21ac			bne 	_IFloatAddExit
.218d	38		sec				sec 								; overflowed numerically.
.218e	60		rts				rts
.218f					_IFloatSubMantissa:
.218f	38		sec				sec 								; do the subtraction R0-Rx
.2190	a5 0c		lda $0c			lda 	IFR0+IM0
.2192	f5 00		sbc $00,x		sbc 		IM0,x
.2194	85 0c		sta $0c			sta 	IFR0+IM0
.2196	a5 0d		lda $0d			lda 	IFR0+IM1
.2198	f5 01		sbc $01,x		sbc 		IM1,x
.219a	85 0d		sta $0d			sta 	IFR0+IM1
.219c	a5 0e		lda $0e			lda 	IFR0+IM2
.219e	f5 02		sbc $02,x		sbc 		IM2,x
.21a0	85 0e		sta $0e			sta 	IFR0+IM2
.21a2	b0 08		bcs $21ac			bcs 	_IFloatAddExit 				; no borrow so we are done.
.21a4	a2 0c		ldx #$0c			ldx 	#IFR0
.21a6	20 7b 27	jsr $277b			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.21a9	20 73 27	jsr $2773			jsr 	IFloatNegate 				; negate
.21ac					_IFloatAddExit:
.21ac	18		clc				clc
.21ad	60		rts				rts
.21ae					_IFloatZeroAdd:
.21ae	fa		plx				plx 								; return this value in R0
.21af	20 f9 26	jsr $26f9			jsr 	IFloatCopyFromRegister
.21b2	18		clc				clc
.21b3	60		rts				rts
.21b4					_IFloatAddDecimals:
.21b4	20 61 27	jsr $2761			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.21b7	f0 f3		beq $21ac			beq 	_IFloatAddExit
.21b9	20 9f 27	jsr $279f			jsr 	IFloatNormalise 			; normalise RX
.21bc	da		phx				phx 								; normalise R0
.21bd	a2 0c		ldx #$0c			ldx 	#IFR0
.21bf	20 61 27	jsr $2761			jsr 	IFloatCheckZero
.21c2	f0 ea		beq $21ae			beq 	_IFloatZeroAdd
.21c4	20 9f 27	jsr $279f			jsr 	IFloatNormalise
.21c7	fa		plx				plx
.21c8	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.21ca	29 3f		and #$3f			and 	#IFXMask
.21cc	38		sec				sec
.21cd	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.21cf	85 0a		sta $0a				sta 	iTemp0
.21d1	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.21d3	29 3f		and #$3f			and 	#IFXMask
.21d5	38		sec				sec
.21d6	e9 20		sbc #$20			sbc 	#$20
.21d8	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.21da	b0 02		bcs $21de			bcs 	_IFloatHaveLarger
.21dc	a5 0a		lda $0a				lda 	iTemp0
.21de					_IFloatHaveLarger:
.21de	18		clc				clc 								; get the actual one back.
.21df	69 20		adc #$20			adc 	#$20 						; shift both to that.
.21e1	20 ee 21	jsr $21ee			jsr 	_IFShiftXToA
.21e4	da		phx				phx
.21e5	a2 0c		ldx #$0c			ldx 	#IFR0
.21e7	20 ee 21	jsr $21ee			jsr 	_IFShiftXToA
.21ea	fa		plx				plx
.21eb	4c 66 21	jmp $2166			jmp 	_IFAddSubMantissa 			; do the adding bit.
.21ee					_IFShiftXToA:
.21ee	8d fc 04	sta $04fc			sta 	IFTarget
.21f1	20 61 27	jsr $2761			jsr 	IFloatCheckZero 			; check adding zero ?
.21f4	f0 11		beq $2207			beq 	_IFSXExit
.21f6					_IFSXLoop:
.21f6	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.21f8	29 3f		and #$3f			and 	#IFXMask
.21fa	cd fc 04	cmp $04fc			cmp 	IFTarget
.21fd	f0 08		beq $2207			beq 	_IFSXExit
.21ff	20 97 27	jsr $2797			jsr 	IFloatShiftRight
.2202	20 c1 27	jsr $27c1			jsr 	IFloatIncExponent
.2205	80 ef		bra $21f6			bra 	_IFSXLoop
.2207					_IFSXExit:
.2207	60		rts				rts
.04fc					IFTarget:
>04fc							.fill 	1
.2208					IFloatMultiply:
.2208	8e fc 04	stx $04fc			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.220b	20 c3 22	jsr $22c3			jsr 	IFCalculateNewSign
.220e	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2210	05 0f		ora $0f				ora 	IFR0+IExp
.2212	29 3f		and #$3f			and 	#IFXMask
.2214	15 01		ora $01,x			ora 	IM1,x
.2216	05 0d		ora $0d				ora 	IFR0+IM1
.2218	15 02		ora $02,x			ora 	IM2,x
.221a	05 0e		ora $0e				ora 	IFR0+IM2
.221c	d0 0a		bne $2228			bne 	_IFMStandard
.221e	20 44 27	jsr $2744			jsr 	IFloatMultiply8BitRx
.2221	ad fe 04	lda $04fe			lda 	IFNewSign
.2224	85 0f		sta $0f				sta 	IFR0+IExp
.2226	18		clc				clc
.2227	60		rts				rts
.2228					_IFMStandard:
.2228	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.222a	20 ba 22	jsr $22ba			jsr 	IFMSignExtend
.222d	8d fd 04	sta $04fd			sta 	IFNewExponent
.2230	a5 0f		lda $0f				lda 	IFR0+IExp
.2232	20 ba 22	jsr $22ba			jsr 	IFMSignExtend
.2235	18		clc				clc
.2236	6d fd 04	adc $04fd			adc 	IFNewExponent
.2239	8d fd 04	sta $04fd			sta 	IFNewExponent
.223c	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.223e	20 0a 27	jsr $270a			jsr 	IFloatCopyToRegister
.2241	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.2243	20 68 27	jsr $2768			jsr 	IFloatSetZero
.2246					_IFMLoop:
.2246	a2 18		ldx #$18			ldx 	#IFRTemp
.2248	20 61 27	jsr $2761			jsr 	IFloatCheckZero
.224b	f0 3a		beq $2287			beq 	_IFMExit
.224d	ae fc 04	ldx $04fc			ldx 	IFTarget 					; look at adder MSB
.2250	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2252	10 03		bpl $2257			bpl	 	_IFMTargetOkay
.2254	20 ab 22	jsr $22ab			jsr 	_IFMShiftAll
.2257					_IFMTargetOkay:
.2257	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2259	29 01		and #$01			and 	#1
.225b	f0 16		beq $2273			beq 	_IFMNoAdd
.225d	ae fc 04	ldx $04fc			ldx 	IFTarget 					; add adder
.2260	18		clc				clc
.2261	a5 0c		lda $0c			lda 	IFR0+IM0
.2263	75 00		adc $00,x		adc 		IM0,x
.2265	85 0c		sta $0c			sta 	IFR0+IM0
.2267	a5 0d		lda $0d			lda 	IFR0+IM1
.2269	75 01		adc $01,x		adc 		IM1,x
.226b	85 0d		sta $0d			sta 	IFR0+IM1
.226d	a5 0e		lda $0e			lda 	IFR0+IM2
.226f	75 02		adc $02,x		adc 		IM2,x
.2271	85 0e		sta $0e			sta 	IFR0+IM2
.2273					_IFMNoAdd:
.2273	a5 0e		lda $0e				lda 	IFR0+IM2
.2275	10 03		bpl $227a			bpl 	_IFMResultOkay
.2277	20 ab 22	jsr $22ab			jsr 	_IFMShiftAll
.227a					_IFMResultOkay:
.227a	a2 18		ldx #$18			ldx 	#IFRTemp
.227c	20 97 27	jsr $2797			jsr 	IFloatShiftRight
.227f	ae fc 04	ldx $04fc			ldx 	IFTarget
.2282	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.2285	80 bf		bra $2246			bra 	_IFMLoop
.2287					_IFMExit:
.2287	ad fd 04	lda $04fd			lda 	IFNewExponent 				; validate new exponent.
.228a	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.228c	90 0f		bcc $229d			bcc 	_IFMOkay
.228e	c9 e0		cmp #$e0			cmp 	#$E0
.2290	b0 0b		bcs $229d			bcs 	_IFMOkay
.2292	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2294	f0 13		beq $22a9			beq 	_IFMError
.2296	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.2298	20 68 27	jsr $2768			jsr 	IFloatSetZero
.229b	18		clc				clc
.229c	60		rts				rts
.229d					_IFMOkay:
.229d	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.229f	0d fe 04	ora $04fe			ora 	IFNewSign
.22a2	85 0f		sta $0f				sta 	IFR0+IExp
.22a4	18		clc				clc
.22a5	60		rts				rts
.22a6	4c ff ff	jmp $ffff			jmp 	$FFFF
.22a9					_IFMError:
.22a9	38		sec				sec
.22aa	60		rts				rts
.22ab					_IFMShiftAll:
.22ab	a2 0c		ldx #$0c			ldx 	#IFR0
.22ad	20 97 27	jsr $2797			jsr 	IFloatShiftRight
.22b0	ae fc 04	ldx $04fc			ldx 	IFTarget
.22b3	20 97 27	jsr $2797			jsr 	IFloatShiftRight
.22b6	ee fd 04	inc $04fd			inc 	IFNewExponent
.22b9	60		rts				rts
.22ba					IFMSignExtend:
.22ba	29 3f		and #$3f			and 	#IFXMask
.22bc	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.22be	90 02		bcc $22c2			bcc 	_IFMNoSXX
.22c0	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.22c2					_IFMNoSXX:
.22c2	60		rts				rts
.22c3					IFCalculateNewSign:
.22c3	b5 03		lda $03,x			lda 	IExp,x
.22c5	45 0f		eor $0f				eor 	IFR0+IExp
.22c7	29 40		and #$40			and 	#IFSign
.22c9	8d fe 04	sta $04fe			sta 	IFNewSign
.22cc	60		rts				rts
.04fd					IFNewExponent:
>04fd							.fill 	1
.04fe					IFNewSign:
>04fe							.fill 	1
.22cd					IFloatDivideInteger:
.22cd	20 e6 22	jsr $22e6			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.22d0	b0 06		bcs $22d8			bcs 	_IFDIExit
.22d2	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.22d4	20 f9 26	jsr $26f9			jsr 	IFloatCopyFromRegister
.22d7	18		clc				clc
.22d8					_IFDIExit:
.22d8	60		rts				rts
.22d9					IFloatModulusInteger:
.22d9	20 e6 22	jsr $22e6			jsr 	IFloatDivideIntegerCommon
.22dc	b0 07		bcs $22e5			bcs 	_IFMIExit
.22de	ae fc 04	ldx $04fc			ldx 	IFTarget
.22e1	20 f9 26	jsr $26f9			jsr 	IFloatCopyFromRegister
.22e4	18		clc				clc
.22e5					_IFMIExit:
.22e5	60		rts				rts
.22e6					IFloatDivideIntegerCommon:
.22e6	8e fc 04	stx $04fc			stx 	IFTarget  					; this is s1, s0 = R0
.22e9	20 c3 22	jsr $22c3			jsr 	IFCalculateNewSign 			; calculate sign of result
.22ec	20 14 23	jsr $2314			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.22ef	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.22f1	20 61 27	jsr $2761			jsr 	IFloatCheckZero
.22f4	f0 1c		beq $2312			beq 	_IFDIDivZero
.22f6	ae fc 04	ldx $04fc			ldx 	IFTarget 					; zero Rx (S1)
.22f9	20 68 27	jsr $2768			jsr 	IFloatSetZero
.22fc	5a		phy				phy
.22fd	a0 18		ldy #$18			ldy 	#24
.22ff					_IFDILoop:
.22ff	20 25 23	jsr $2325			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2302	20 31 23	jsr $2331			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2305	88		dey				dey
.2306	d0 f7		bne $22ff			bne 	_IFDILoop 					; do it 24 times
.2308	7a		ply				ply
.2309	ad fe 04	lda $04fe			lda 	IFNewSign 					; set sign of result.
.230c	29 40		and #$40			and 	#IFSign
.230e	85 1b		sta $1b				sta 	IFRTemp+IExp
.2310	18		clc				clc 								; is okay.
.2311	60		rts				rts
.2312					_IFDIDivZero:
.2312	38		sec				sec
.2313	60		rts				rts
.2314					IFDCopyRXToRTemp:
.2314	b5 00		lda $00,x			lda 	IM0,x
.2316	85 18		sta $18				sta 	IFRTemp+IM0
.2318	b5 01		lda $01,x			lda 	IM1,x
.231a	85 19		sta $19				sta 	IFRTemp+IM1
.231c	b5 02		lda $02,x			lda 	IM2,x
.231e	85 1a		sta $1a				sta 	IFRTemp+IM2
.2320	b5 03		lda $03,x			lda 	IExp,x
.2322	85 1b		sta $1b				sta 	IFRTemp+IExp
.2324	60		rts				rts
.2325					IFDShiftSTempS1Left:
.2325	a2 18		ldx #$18			ldx 	#IFRTemp
.2327	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft
.232a	ae fc 04	ldx $04fc			ldx 	IFTarget
.232d	20 90 27	jsr $2790			jsr 	IFloatRotateLeft
.2330	60		rts				rts
.2331					IFDTrySubtract:
.2331	ae fc 04	ldx $04fc			ldx 	IFTarget 					; s1 = Rx
.2334	38		sec				sec 								; subtract, saving the results on the stack.
.2335	b5 00		lda $00,x			lda 	IM0,x
.2337	e5 0c		sbc $0c				sbc 	IFR0+IM0
.2339	48		pha				pha
.233a	b5 01		lda $01,x			lda 	IM1,x
.233c	e5 0d		sbc $0d				sbc 	IFR0+IM1
.233e	48		pha				pha
.233f	b5 02		lda $02,x			lda 	IM2,x
.2341	e5 0e		sbc $0e				sbc 	IFR0+IM2
.2343	b0 03		bcs $2348			bcs 	_IFDCanSubtract
.2345	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2346	68		pla				pla
.2347	60		rts				rts
.2348					_IFDCanSubtract:
.2348	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.234a	68		pla				pla
.234b	95 01		sta $01,x			sta 	IM1,x
.234d	68		pla				pla
.234e	95 00		sta $00,x			sta 	IM0,x
.2350	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.2352	d0 06		bne $235a			bne 	_IFDCSExit
.2354	e6 19		inc $19				inc 	IFRTemp+IM1
.2356	d0 02		bne $235a			bne 	_IFDCSExit
.2358	e6 1a		inc $1a				inc 	IFRTemp+IM2
.235a					_IFDCSExit:
.235a	60		rts				rts
.235b					IFloatBitwiseAnd:
.235b	5a		phy				phy
.235c	20 a0 23	jsr $23a0			jsr 	IFPreProcessBitwise 		; set up everything.
.235f	d0 0f		bne $2370			bne 	_IFBAExit
.2361					_IFBALoop:
.2361	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2364	35 00		and $00,x			and 	IM0,x
.2366	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2369	e8		inx				inx
.236a	c8		iny				iny
.236b	c0 03		cpy #$03			cpy 	#3
.236d	d0 f2		bne $2361			bne 	_IFBALoop
.236f	18		clc				clc
.2370					_IFBAExit:
.2370	7a		ply				ply
.2371	60		rts				rts
.2372					IFloatBitwiseOr:
.2372	5a		phy				phy
.2373	20 a0 23	jsr $23a0			jsr 	IFPreProcessBitwise 		; set up everything.
.2376	d0 0f		bne $2387			bne 	_IFBAExit
.2378					_IFBALoop:
.2378	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.237b	15 00		ora $00,x			ora 	IM0,x
.237d	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2380	e8		inx				inx
.2381	c8		iny				iny
.2382	c0 03		cpy #$03			cpy 	#3
.2384	d0 f2		bne $2378			bne 	_IFBALoop
.2386	18		clc				clc
.2387					_IFBAExit:
.2387	7a		ply				ply
.2388	60		rts				rts
.2389					IFloatBitwiseXor:
.2389	5a		phy				phy
.238a	20 a0 23	jsr $23a0			jsr 	IFPreProcessBitwise 		; set up everything.
.238d	d0 0f		bne $239e			bne 	_IFBAExit
.238f					_IFBALoop:
.238f	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2392	55 00		eor $00,x			eor 	IM0,x
.2394	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2397	e8		inx				inx
.2398	c8		iny				iny
.2399	c0 03		cpy #$03			cpy 	#3
.239b	d0 f2		bne $238f			bne 	_IFBALoop
.239d	18		clc				clc
.239e					_IFBAExit:
.239e	7a		ply				ply
.239f	60		rts				rts
.23a0					IFPreProcessBitwise:
.23a0	a0 00		ldy #$00			ldy 	#0 							; set index.
.23a2	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.23a4	15 03		ora $03,x			ora 	IExp,x
.23a6	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.23a8	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.23aa	38		sec				sec 								; carry set just in cases.
.23ab	60		rts				rts
.23ac					IFloatAbsoluteR0:
.23ac	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.23ae	29 bf		and #$bf			and 	#IFSign ^ 255
.23b0	85 0f		sta $0f				sta 	IFR0+IExp
.23b2	18		clc				clc
.23b3	60		rts				rts
.23b4					IFloatSquareRootR0:
.23b4	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.23b6	20 61 27	jsr $2761			jsr 	IFloatCheckZero
.23b9	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.23bb	29 40		and #$40			and 	#IFSign
.23bd	d0 2f		bne $23ee			bne 	_IFSRFail
.23bf	20 9f 27	jsr $279f			jsr 	IFloatNormalise 			; it will work better !
.23c2	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.23c4	20 0a 27	jsr $270a			jsr 	IFloatCopyToRegister
.23c7	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.23c9	20 ba 22	jsr $22ba			jsr 	IFMSignExtend 				; sign extended version of the exponent
.23cc	18		clc				clc
.23cd	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.23cf	85 0f		sta $0f				sta 	IFR0+IExp
.23d1	4a		lsr a				lsr 	a 							; which we can halve.
.23d2	38		sec				sec 								; convert back
.23d3	e9 17		sbc #$17			sbc 	#23
.23d5	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.23d7	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.23d9	20 f0 23	jsr $23f0			jsr 	_IFSRNewton
.23dc	20 f0 23	jsr $23f0			jsr 	_IFSRNewton
.23df	20 f0 23	jsr $23f0			jsr 	_IFSRNewton
.23e2	20 f0 23	jsr $23f0			jsr 	_IFSRNewton
.23e5	18		clc				clc
.23e6	60		rts				rts
.23e7					_IFSRZero:
.23e7	a2 0c		ldx #$0c			ldx 	#IFR0
.23e9	20 68 27	jsr $2768			jsr 	IFloatSetZero
.23ec	18		clc				clc
.23ed	60		rts				rts
.23ee					_IFSRFail:
.23ee	38		sec				sec
.23ef	60		rts				rts
.23f0					_IFSRNewton:
.23f0	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.23f2	20 b7 26	jsr $26b7			jsr 	IFloatPushRx
.23f5	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.23f7	20 b7 26	jsr $26b7			jsr 	IFloatPushRx
.23fa	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.23fc	20 8b 24	jsr $248b			jsr 	IFloatDivideFloat
.23ff	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2401	20 d8 26	jsr $26d8			jsr 	IFloatPullRx
.2404	20 5e 21	jsr $215e			jsr 	IFloatAdd 					; now guess + original/guess
.2407	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.2409	20 97 27	jsr $2797			jsr 	IFloatShiftRight
.240c	a2 10		ldx #$10			ldx 	#IFR1
.240e	20 d8 26	jsr $26d8			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2411	60		rts				rts
.2412					IFloatFractionalR0:
.2412	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2414	29 3f		and #$3f			and 	#IFXMask
.2416	f0 17		beq $242f			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2418	20 ac 23	jsr $23ac			jsr 	IFloatAbsoluteR0 			; absolute value R9
.241b	a2 0c		ldx #$0c			ldx 	#IFR0
.241d	20 9f 27	jsr $279f			jsr 	IFloatNormalise 			; normalise R0
.2420	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.2422	20 0a 27	jsr $270a			jsr 	IFloatCopyToRegister
.2425	20 68 24	jsr $2468			jsr 	IFloatIntegerR0 			; take integer part of R0
.2428	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.242a	20 57 21	jsr $2157			jsr 	IFloatSubtract
.242d	80 05		bra $2434			bra 	_FIPExit
.242f					_FIPZero:
.242f	a2 0c		ldx #$0c			ldx 	#IFR0
.2431	20 68 27	jsr $2768			jsr 	IFloatSetZero
.2434					_FIPExit:
.2434	18		clc				clc
.2435	60		rts				rts
.2436					IFloatCompare:
.2436	20 57 21	jsr $2157			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2439	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.243b	05 0f		ora $0f				ora 	IFR0+IExp
.243d	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.243f	29 3f		and #$3f			and 	#IFXMask
.2441	d0 19		bne $245c			bne 	_IFCNonInteger
.2443	20 61 27	jsr $2761			jsr 	IFloatCheckZero 			; check if zero
.2446	f0 0f		beq $2457			beq 	_IFCZero
.2448					_IFCReturnSign:
.2448	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.244a	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.244c	48		pha				pha
.244d	a9 01		lda #$01			lda 	#1
.244f	20 6a 27	jsr $276a			jsr 	IFloatSetByte 				; return to +1
.2452	68		pla				pla 								; sign bit back
.2453	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.2455	18		clc				clc
.2456	60		rts				rts
.2457					_IFCZero:
.2457	20 68 27	jsr $2768			jsr 	IFloatSetZero
.245a	18		clc				clc
.245b	60		rts				rts
.245c					_IFCNonInteger:
.245c	a5 0c		lda $0c				lda 	IFR0+IM0
.245e	29 00		and #$00			and		#$00
.2460	05 0d		ora $0d				ora 	IFR0+IM1
.2462	05 0e		ora $0e				ora 	IFR0+IM2
.2464	f0 f1		beq $2457			beq 	_IFCZero 					; near enough !
.2466	80 e0		bra $2448			bra 	_IFCReturnSign 				; return the sign of the difference.
.2468					IFloatIntegerR0:
.2468	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.246a	29 3f		and #$3f			and 	#IFXMask
.246c	f0 1b		beq $2489			beq 	_FIPExit 					; if so do nothing
.246e	a2 0c		ldx #$0c			ldx 	#IFR0
.2470	20 9f 27	jsr $279f			jsr 	IFloatNormalise 			; normalise
.2473	20 61 27	jsr $2761			jsr 	IFloatCheckZero 			; is it zero ?
.2476	f0 0e		beq $2486			beq 	_FIPZero 					; if so return zero.
.2478					_FIPShift:
.2478	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.247a	29 20		and #$20			and 	#$20 						; still -ve
.247c	f0 0b		beq $2489			beq 	_FIPExit
.247e	20 97 27	jsr $2797			jsr 	IFloatShiftRight 			; shift mantissa right
.2481	20 c1 27	jsr $27c1			jsr 	IFloatIncExponent 			; bump exponent
.2484	80 f2		bra $2478			bra 	_FIPShift
.2486					_FIPZero:
.2486	20 68 27	jsr $2768			jsr 	IFloatSetZero
.2489					_FIPExit:
.2489	18		clc				clc
.248a	60		rts				rts
.248b					IFloatDivideFloat:
.248b	8e fc 04	stx $04fc			stx 	IFTarget  					; this is s1, s0 = R0
.248e	20 c3 22	jsr $22c3			jsr 	IFCalculateNewSign 			; calculate sign of result
.2491	20 9f 27	jsr $279f			jsr 	IFloatNormalise 			; normalise RX
.2494	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.2496	20 9f 27	jsr $279f			jsr 	IFloatNormalise
.2499	20 61 27	jsr $2761			jsr 	IFloatCheckZero
.249c	f0 56		beq $24f4			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.249e	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.24a0	20 ba 22	jsr $22ba			jsr 	IFMSignExtend
.24a3	8d fd 04	sta $04fd			sta 	IFNewExponent
.24a6	ae fc 04	ldx $04fc			ldx 	IFTarget 					; calculate s1.exponent
.24a9	b5 03		lda $03,x			lda 	IExp,x
.24ab	20 ba 22	jsr $22ba			jsr 	IFMSignExtend
.24ae	38		sec				sec
.24af	ed fd 04	sbc $04fd			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.24b2	38		sec				sec
.24b3	e9 17		sbc #$17			sbc 	#23
.24b5	8d fd 04	sta $04fd			sta 	IFNewExponent
.24b8	20 f6 24	jsr $24f6			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.24bb	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.24bd	10 08		bpl $24c7			bpl 	_IFDFNoShiftResult
.24bf	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.24c1	20 97 27	jsr $2797			jsr 	IFloatShiftRight
.24c4	ee fd 04	inc $04fd			inc 	IFNewExponent
.24c7					_IFDFNoShiftResult:
.24c7	ad fd 04	lda $04fd			lda 	IFNewExponent 				; underflow/overflow check.
.24ca	30 06		bmi $24d2			bmi 	_IFDFCheckUnderflow
.24cc	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.24ce	b0 24		bcs $24f4			bcs 	_IFDFDivZero
.24d0	80 11		bra $24e3			bra		_IFDFExit
.24d2					_IFDFCheckUnderflow:
.24d2	ad fd 04	lda $04fd			lda 	IFNewExponent 				; shift into a legal exponent.
.24d5	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.24d7	b0 0a		bcs $24e3			bcs 	_IFDFExit
.24d9	ee fd 04	inc $04fd			inc 	IFNewExponent
.24dc	a2 18		ldx #$18			ldx 	#IFRTemp
.24de	20 97 27	jsr $2797			jsr 	IFloatShiftRight
.24e1	80 ef		bra $24d2			bra 	_IFDFCheckUnderflow
.24e3					_IFDFExit:
.24e3	ad fd 04	lda $04fd			lda 	IFNewExponent 				; combine exponent and sign.
.24e6	29 3f		and #$3f			and 	#IFXMask
.24e8	0d fe 04	ora $04fe			ora 	IFNewSign
.24eb	85 1b		sta $1b				sta 	IFRTemp+IExp
.24ed	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.24ef	20 f9 26	jsr $26f9			jsr 	IFloatCopyFromRegister
.24f2	18		clc				clc
.24f3	60		rts				rts
.24f4					_IFDFDivZero:
.24f4	38		sec				sec
.24f5	60		rts				rts
.24f6					IFloatDivideSupport:
.24f6	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.24f8	20 68 27	jsr $2768			jsr 	IFloatSetZero
.24fb	5a		phy				phy 								; main division loop x 23
.24fc	a0 17		ldy #$17			ldy 	#23
.24fe					_IFDSLoop:
.24fe	20 31 23	jsr $2331			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2501	20 25 23	jsr $2325			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2504	88		dey				dey
.2505	d0 f7		bne $24fe			bne 	_IFDSLoop 					; do it 24 times
.2507	7a		ply				ply
.2508	60		rts				rts
.2509					IFloatIntegerToStringR0:
.2509	8d ff 04	sta $04ff			sta 	IFBase 						; save base to use.
.250c	20 e9 27	jsr $27e9			jsr 	IFloatBufferReset			; empty buffer
.250f	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.2511	29 3f		and #$3f			and 	#IFXMask
.2513	d0 1e		bne $2533			bne 	_IFIFail
.2515	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.2517	20 61 27	jsr $2761			jsr 	IFloatCheckZero
.251a	f0 0e		beq $252a			beq 	_IFINotNegative
.251c	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.251e	29 40		and #$40			and 	#IFSign
.2520	f0 08		beq $252a			beq 	_IFINotNegative
.2522	a9 2d		lda #$2d			lda 	#"-"						; output -
.2524	20 f8 27	jsr $27f8			jsr 	IFloatBufferWrite
.2527	20 73 27	jsr $2773			jsr 	IFloatNegate 				; tidy up !
.252a					_IFINotNegative:
.252a	20 35 25	jsr $2535			jsr 	_IFIRecursiveConvert 		; start converting
.252d	20 f0 27	jsr $27f0			jsr 	IFloatGetBufferAddress
.2530	18		clc				clc
.2531	80 01		bra $2534			bra 	_IFIExit
.2533					_IFIFail:
.2533	38		sec				sec
.2534					_IFIExit:
.2534	60		rts				rts
.2535					_IFIRecursiveConvert:
.2535	a2 10		ldx #$10			ldx 	#IFR1
.2537	20 0a 27	jsr $270a			jsr 	IFloatCopyToRegister 		; R0->R1
.253a	a2 0c		ldx #$0c			ldx 	#IFR0
.253c	ad ff 04	lda $04ff			lda 	IFBase 						; Base -> R0
.253f	20 6a 27	jsr $276a			jsr 	IFloatSetByte
.2542	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.2544	20 cd 22	jsr $22cd			jsr 	IFloatDivideInteger
.2547	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.2549	20 61 27	jsr $2761			jsr 	IFloatCheckZero
.254c	f0 09		beq $2557			beq 	_IFIOutDigit
.254e	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.2550	48		pha				pha
.2551	20 35 25	jsr $2535			jsr 	_IFIRecursiveConvert 		; convert the divider
.2554	68		pla				pla
.2555	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.2557					_IFIOutDigit:
.2557	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.2559	c9 0a		cmp #$0a			cmp	 	#10
.255b	90 02		bcc $255f			bcc 	_IFINotHex
.255d	69 06		adc #$06			adc 	#6
.255f					_IFINotHex:
.255f	69 30		adc #$30			adc 	#48
.2561	20 f8 27	jsr $27f8			jsr 	IFloatBufferWrite
.2564	60		rts				rts
.04ff					IFBase:
>04ff							.fill 	1
.2565					IFloatFloatToStringR0:
.2565	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2567	20 b7 26	jsr $26b7			jsr 	IFloatPushRx
.256a	20 0a 27	jsr $270a			jsr 	IFloatCopyToRegister
.256d	20 68 24	jsr $2468			jsr 	IFloatIntegerR0				; make R0 integer
.2570	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2572	20 09 25	jsr $2509			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2575	9c 00 05	stz $0500			stz 	IFloatDecimalCount 			; zero the decimal count.
.2578	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.257a	29 3f		and #$3f			and 	#IFXMask
.257c	f0 44		beq $25c2			beq 	_IFFSExit
.257e					_IFloatFracLoop:
.257e	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.2580	20 f9 26	jsr $26f9			jsr 	IFloatCopyFromRegister
.2583	20 12 24	jsr $2412			jsr 	IFloatFractionalR0
.2586	20 9f 27	jsr $279f			jsr 	IFloatNormalise
.2589	a2 14		ldx #$14			ldx 	#IFR2
.258b	20 0a 27	jsr $270a			jsr 	IFloatCopyToRegister 		; copy to R2
.258e	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.2590	a9 0a		lda #$0a			lda 	#10
.2592	20 6a 27	jsr $276a			jsr 	IFloatSetByte
.2595	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.2597	20 08 22	jsr $2208			jsr 	IFloatMultiply
.259a	a2 14		ldx #$14			ldx 	#IFR2
.259c	20 0a 27	jsr $270a			jsr 	IFloatCopyToRegister
.259f	20 68 24	jsr $2468			jsr 	IFloatIntegerR0 			; get integer part of R0
.25a2	ad 00 05	lda $0500			lda 	IFloatDecimalCount 			; done 5 dp, no more
.25a5	c9 03		cmp #$03			cmp 	#3
.25a7	f0 16		beq $25bf			beq 	_IFFSExitStripZero
.25a9	ad 00 05	lda $0500			lda 	IFloatDecimalCount 			; written the DP yet ?
.25ac	d0 05		bne $25b3			bne 	_IFloatNotFirst
.25ae	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.25b0	20 f8 27	jsr $27f8			jsr 	IFloatBufferWrite
.25b3					_IFloatNotFirst:
.25b3	ee 00 05	inc $0500			inc 	IFloatDecimalCount
.25b6	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.25b8	09 30		ora #$30			ora 	#"0"						; ASCII
.25ba	20 f8 27	jsr $27f8			jsr 	IFloatBufferWrite 			; write to the buffer.
.25bd	80 bf		bra $257e			bra 	_IFloatFracLoop
.25bf					_IFFSExitStripZero:
.25bf	20 07 28	jsr $2807			jsr 	IFloatStripTrailingZeros
.25c2					_IFFSExit:
.25c2	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.25c4	20 d8 26	jsr $26d8			jsr 	IFloatPullRx
.25c7	20 f0 27	jsr $27f0			jsr 	IFloatGetBufferAddress
.25ca	18		clc				clc
.25cb	60		rts				rts
.0500					IFloatDecimalCount:
>0500							.fill 	1
.25cc					IFloatStringToFloatR0:
.25cc	8d 01 05	sta $0501			sta 	IFCount 					; save it out.
.25cf	86 0a		stx $0a				stx 	iTemp0
.25d1	84 0b		sty $0b				sty 	iTemp0+1
.25d3	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.25d5	20 68 27	jsr $2768			jsr 	IFloatSetZero
.25d8	9c 02 05	stz $0502			stz 	IFSignFlag 					; clear the sign flag
.25db	20 68 26	jsr $2668			jsr 	IFSTFGetNext 				; get first
.25de	f0 1b		beq $25fb			beq 	_IFSTFFail 					; no character
.25e0	90 10		bcc $25f2			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.25e2	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.25e4	d0 15		bne $25fb			bne 	_IFSTFFail
.25e6	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.25e8	8d 02 05	sta $0502			sta 	IFSignFlag
.25eb					_IFSTFLoop:
.25eb	20 68 26	jsr $2668			jsr 	IFSTFGetNext 				; get next
.25ee	b0 0b		bcs $25fb			bcs 	_IFSTFFail 					; bad character.
.25f0	f0 11		beq $2603			beq 	_IFSTFExit 					; end of data
.25f2					_IFSTFHaveChar:
.25f2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.25f4	f0 08		beq $25fe			beq 	_IFSTFDecimal
.25f6	20 8c 26	jsr $268c			jsr 	IFSTFAddR0 					; add number in
.25f9	80 f0		bra $25eb			bra 	_IFSTFLoop 					; keep going until . or end.
.25fb					_IFSTFFail:
.25fb	38		sec				sec
.25fc	80 0d		bra $260b			bra 	_IFSTFReturn
.25fe					_IFSTFDecimal:
.25fe	20 13 26	jsr $2613			jsr 	IFSTFDecimal 				; call the decimal places code.
.2601	b0 08		bcs $260b			bcs 	_IFSTFReturn 				; error
.2603					_IFSTFExit:
.2603	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2605	0d 02 05	ora $0502			ora 	IFSignFlag
.2608	85 0f		sta $0f				sta 	IFR0+IExp
.260a	18		clc				clc
.260b					_IFSTFReturn:
.260b	60		rts				rts
.260c					IFloatAddDecimalToR0:
.260c	8d 01 05	sta $0501			sta 	IFCount 					; save it out.
.260f	86 0a		stx $0a				stx 	iTemp0
.2611	84 0b		sty $0b				sty 	iTemp0+1
.2613					IFSTFDecimal:
.2613	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2615	20 b7 26	jsr $26b7			jsr 	IFloatPushRx
.2618	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.261a	20 68 27	jsr $2768			jsr 	IFloatSetZero
.261d	9c 03 05	stz $0503			stz 	IFDecimalPlaces
.2620					_IFSTDLoop:
.2620	20 68 26	jsr $2668			jsr 	IFSTFGetNext 				; get next
.2623	b0 41		bcs $2666			bcs 	_IFSTFFail2 				; bad character.
.2625	f0 11		beq $2638			beq 	_IFSTFComplete 				; end of data, work out the result.
.2627	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2629	f0 39		beq $2664			beq 	_IFSTFExit2
.262b	20 8c 26	jsr $268c			jsr 	IFSTFAddR0 					; add number in
.262e	ee 03 05	inc $0503			inc 	IFDecimalPlaces 			; count decimals
.2631	ad 03 05	lda $0503			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2634	c9 03		cmp #$03			cmp 	#3
.2636	90 e8		bcc $2620			bcc 	_IFSTDLoop
.2638					_IFSTFComplete:
.2638	ad 03 05	lda $0503			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.263b	f0 27		beq $2664			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.263d	3a		dec a				dec 	a 							; table indexed from 1.
.263e	0a		asl a				asl 	a
.263f	0a		asl a				asl 	a
.2640	aa		tax				tax
.2641	bd a3 26	lda $26a3,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2644	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2646	bd a4 26	lda $26a4,x			lda 	TableTen+1,x
.2649	85 11		sta $11				sta  	IFR1+IM1
.264b	bd a5 26	lda $26a5,x			lda 	TableTen+2,x
.264e	85 12		sta $12				sta  	IFR1+IM2
.2650	bd a6 26	lda $26a6,x			lda 	TableTen+3,x
.2653	85 13		sta $13				sta  	IFR1+IExp
.2655	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2657	20 08 22	jsr $2208			jsr 	IFloatMultiply
.265a	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.265c	20 d8 26	jsr $26d8			jsr 	IFloatPullRx
.265f	a2 10		ldx #$10			ldx 	#IFR1
.2661	20 5e 21	jsr $215e			jsr 	IFloatAdd
.2664					_IFSTFExit2:
.2664	18		clc				clc
.2665	60		rts				rts
.2666					_IFSTFFail2:
.2666	38		sec				sec
.2667	60		rts				rts
.2668					IFSTFGetNext:
.2668	ad 01 05	lda $0501			lda 	IFCount  					; if count is zero, return with Z set.
.266b	f0 19		beq $2686			beq 	_IFSTFReturnOk
.266d	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.266f	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2671	d0 02		bne $2675			bne 	_IFSTFGNNoCarry
.2673	e6 0b		inc $0b				inc 	iTemp0+1
.2675					_IFSTFGNNoCarry:
.2675	ce 01 05	dec $0501			dec 	IFCount 					; dec count.
.2678	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.267a	f0 08		beq $2684			beq 	_IFSTFGOkay
.267c	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.267e	90 08		bcc $2688			bcc 	_IFSTFGFail
.2680	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2682	b0 04		bcs $2688			bcs 	_IFSTFGFail
.2684					_IFSTFGOkay:
.2684	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2686					_IFSTFReturnOk:
.2686	18		clc				clc
.2687	60		rts				rts
.2688					_IFSTFGFail:
.2688	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.268a	38		sec				sec
.268b	60		rts				rts
.268c					IFSTFAddR0:
.268c	29 0f		and #$0f			and 	#15 						; to int value
.268e	48		pha				pha 								; save it.
.268f	a9 0a		lda #$0a			lda 	#10
.2691	a2 10		ldx #$10			ldx 	#IFR1
.2693	20 6a 27	jsr $276a			jsr 	IFloatSetByte
.2696	20 08 22	jsr $2208			jsr 	IFloatMultiply
.2699	68		pla				pla
.269a	a2 10		ldx #$10			ldx 	#IFR1
.269c	20 6a 27	jsr $276a			jsr 	IFloatSetByte
.269f	20 5e 21	jsr $215e			jsr 	IFloatAdd
.26a2	60		rts				rts
.0501					IFCount:
>0501							.fill 	1
.0502					IFSignFlag:
>0502							.fill 	1
.0503					IFDecimalPlaces:
>0503							.fill 	1
.26a3					TableTen:
>26a3	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>26a7	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>26ab	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>26af	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>26b3	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.26b7					IFloatPushRx:
.26b7	5a		phy				phy
.26b8	ac 04 05	ldy $0504			ldy 	IFStackIndex
.26bb	b5 00		lda $00,x			lda 	IM0,x
.26bd	99 05 05	sta $0505,y			sta 	IFStack,y
.26c0	b5 01		lda $01,x			lda 	IM1,x
.26c2	99 06 05	sta $0506,y			sta 	IFStack+1,y
.26c5	b5 02		lda $02,x			lda 	IM2,x
.26c7	99 07 05	sta $0507,y			sta 	IFStack+2,y
.26ca	b5 03		lda $03,x			lda 	IExp,x
.26cc	99 08 05	sta $0508,y			sta 	IFStack+3,y
.26cf	c8		iny				iny
.26d0	c8		iny				iny
.26d1	c8		iny				iny
.26d2	c8		iny				iny
.26d3	8c 04 05	sty $0504			sty 	IFStackIndex
.26d6	7a		ply				ply
.26d7	60		rts				rts
.26d8					IFloatPullRx:
.26d8	5a		phy				phy
.26d9	ac 04 05	ldy $0504			ldy 	IFStackIndex
.26dc	88		dey				dey
.26dd	88		dey				dey
.26de	88		dey				dey
.26df	88		dey				dey
.26e0	b9 05 05	lda $0505,y			lda 	IFStack,y
.26e3	95 00		sta $00,x			sta 	IM0,x
.26e5	b9 06 05	lda $0506,y			lda 	IFStack+1,y
.26e8	95 01		sta $01,x			sta 	IM1,x
.26ea	b9 07 05	lda $0507,y			lda 	IFStack+2,y
.26ed	95 02		sta $02,x			sta 	IM2,x
.26ef	b9 08 05	lda $0508,y			lda 	IFStack+3,y
.26f2	95 03		sta $03,x			sta 	IExp,x
.26f4	8c 04 05	sty $0504			sty 	IFStackIndex
.26f7	7a		ply				ply
.26f8	60		rts				rts
.0504					IFStackIndex:
>0504							.fill 	1
.0505					IFStack:
>0505							.fill 	16*4
.26f9					IFloatCopyFromRegister:
.26f9	b5 00		lda $00,x			lda 	0,x
.26fb	85 0c		sta $0c				sta 	IFR0
.26fd	b5 01		lda $01,x			lda 	1,x
.26ff	85 0d		sta $0d				sta 	IFR0+1
.2701	b5 02		lda $02,x			lda 	2,x
.2703	85 0e		sta $0e				sta 	IFR0+2
.2705	b5 03		lda $03,x			lda 	3,x
.2707	85 0f		sta $0f				sta 	IFR0+3
.2709	60		rts				rts
.270a					IFloatCopyToRegister:
.270a	a5 0c		lda $0c				lda 	IFR0
.270c	95 00		sta $00,x			sta 	0,x
.270e	a5 0d		lda $0d				lda 	IFR0+1
.2710	95 01		sta $01,x			sta 	1,x
.2712	a5 0e		lda $0e				lda 	IFR0+2
.2714	95 02		sta $02,x			sta 	2,x
.2716	a5 0f		lda $0f				lda 	IFR0+3
.2718	95 03		sta $03,x			sta 	3,x
.271a	60		rts				rts
.271b					IFloatLoadInline:
.271b	68		pla				pla 								; pop address off to iTemp0
.271c	85 0a		sta $0a				sta 	iTemp0
.271e	68		pla				pla
.271f	85 0b		sta $0b				sta 	iTemp0+1
.2721	a0 01		ldy #$01			ldy 	#1
.2723	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2725	95 00		sta $00,x			sta 	0,x
.2727	c8		iny				iny
.2728	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.272a	95 01		sta $01,x			sta 	1,x
.272c	c8		iny				iny
.272d	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.272f	95 02		sta $02,x			sta 	2,x
.2731	c8		iny				iny
.2732	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2734	95 03		sta $03,x			sta 	3,x
.2736	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2737	a5 0a		lda $0a				lda 	iTemp0
.2739	69 05		adc #$05			adc 	#5
.273b	85 0a		sta $0a				sta 	iTemp0
.273d	90 02		bcc $2741			bcc 	_IFLINoCarry
.273f	e6 0b		inc $0b				inc 	iTemp0+1
.2741					_IFLINoCarry:
.2741	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2744					IFloatMultiply8BitRx:
.2744	5a		phy		        phy
.2745	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2747	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2749	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.274a	85 0c		sta $0c		        sta     IFR0+IM0
.274c	84 0d		sty $0d		        sty     IFR0+IM1
.274e	a9 00		lda #$00	        lda     #0
.2750	a0 08		ldy #$08	        ldy     #8
.2752					_IFMLoop:
.2752	90 03		bcc $2757	        bcc     _IFMNoAdd
.2754	18		clc		        clc
.2755	65 0d		adc $0d		        adc     IFR0+IM1
.2757					_IFMNoAdd:
.2757	6a		ror a		        ror     a
.2758	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.275a	88		dey		        dey
.275b	d0 f5		bne $2752	        bne     _IFMLoop
.275d	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.275f	7a		ply		        ply
.2760	60		rts		        rts
.2761					IFloatCheckZero:
.2761	b5 00		lda $00,x			lda 	IM0,x
.2763	15 01		ora $01,x			ora 	IM1,x
.2765	15 02		ora $02,x			ora 	IM2,x
.2767	60		rts				rts
.2768					IFloatSetZero:
.2768	a9 00		lda #$00			lda 	#0
.276a					IFloatSetByte:
.276a	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.276c	74 01		stz $01,x			stz 	IM1,x
.276e	74 02		stz $02,x			stz 	IM2,x
.2770	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2772	60		rts				rts
.2773					IFloatNegate:
.2773	b5 03		lda $03,x			lda 	IExp,x
.2775	49 40		eor #$40			eor 	#IFSign
.2777	95 03		sta $03,x			sta 	IExp,x
.2779	18		clc				clc
.277a	60		rts				rts
.277b					IFloatMantissaNegate:
.277b	38		sec				sec
.277c	a9 00		lda #$00			lda 	#0
.277e	f5 00		sbc $00,x			sbc 	IM0,x
.2780	95 00		sta $00,x			sta 	IM0,x
.2782	a9 00		lda #$00			lda 	#0
.2784	f5 01		sbc $01,x			sbc 	IM1,x
.2786	95 01		sta $01,x			sta 	IM1,x
.2788	a9 00		lda #$00			lda 	#0
.278a	f5 02		sbc $02,x			sbc 	IM2,x
.278c	95 02		sta $02,x			sta 	IM2,x
.278e	60		rts				rts
.278f					IFloatShiftLeft:
.278f	18		clc				clc
.2790					IFloatRotateLeft:
.2790	36 00		rol $00,x			rol 	IM0,x
.2792	36 01		rol $01,x			rol 	IM1,x
.2794	36 02		rol $02,x			rol 	IM2,x
.2796	60		rts				rts
.2797					IFloatShiftRight:
.2797	18		clc				clc
.2798					IFloatRotateRight:
.2798	76 02		ror $02,x			ror 	IM2,x
.279a	76 01		ror $01,x			ror 	IM1,x
.279c	76 00		ror $00,x			ror 	IM0,x
.279e	60		rts				rts
.279f					IFloatNormalise:
.279f	20 61 27	jsr $2761			jsr 	IFloatCheckZero 			; is it zero
.27a2	f0 18		beq $27bc			beq 	_IFNExitZero 				; if so exit
.27a4					_IFNLoop:
.27a4	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.27a6	29 c0		and #$c0			and 	#$C0
.27a8	c9 40		cmp #$40			cmp 	#$40
.27aa	f0 13		beq $27bf			beq 	_IFNExitOkay 				; if so , then we are done.
.27ac	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.27ae	29 3f		and #$3f			and 	#$3F
.27b0	c9 20		cmp #$20			cmp 	#$20
.27b2	f0 0b		beq $27bf			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.27b4	20 d5 27	jsr $27d5			jsr 	IFloatDecExponent
.27b7	20 8f 27	jsr $278f			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.27ba	80 e8		bra $27a4			bra 	_IFNLoop
.27bc					_IFNExitZero:
.27bc	20 68 27	jsr $2768			jsr 	IFloatSetZero 				; set the result to zero
.27bf					_IFNExitOkay:
.27bf	18		clc				clc  								; return with CC.
.27c0	60		rts				rts
.27c1					IFloatIncExponent:
.27c1	b5 03		lda $03,x			lda 	IExp,x
.27c3	48		pha				pha
.27c4	29 c0		and #$c0			and 	#$C0
.27c6	8d 45 05	sta $0545			sta 	IFXTemp
.27c9	68		pla				pla
.27ca	1a		inc a				inc 	a
.27cb	29 3f		and #$3f			and 	#$3F
.27cd	48		pha				pha
.27ce	0d 45 05	ora $0545			ora 	IFXTemp
.27d1	95 03		sta $03,x			sta 	IExp,x
.27d3	68		pla				pla
.27d4	60		rts				rts
.27d5					IFloatDecExponent:
.27d5	b5 03		lda $03,x			lda 	IExp,x
.27d7	48		pha				pha
.27d8	29 c0		and #$c0			and 	#$C0
.27da	8d 45 05	sta $0545			sta 	IFXTemp
.27dd	68		pla				pla
.27de	3a		dec a				dec 	a
.27df	29 3f		and #$3f			and 	#$3F
.27e1	48		pha				pha
.27e2	0d 45 05	ora $0545			ora 	IFXTemp
.27e5	95 03		sta $03,x			sta 	IExp,x
.27e7	68		pla				pla
.27e8	60		rts				rts
.0545					IFXTemp:
>0545							.fill 	1
.27e9					IFloatBufferReset:
.27e9	9c 46 05	stz $0546			stz 	IFBufferCount
.27ec	9c 47 05	stz $0547			stz 	IFBuffer
.27ef	60		rts				rts
.27f0					IFloatGetBufferAddress:
.27f0	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.27f2	a2 47		ldx #$47			ldx 	#(IFBuffer & $FF)
.27f4	ad 46 05	lda $0546			lda 	IFBufferCount
.27f7	60		rts				rts
.27f8					IFloatBufferWrite:
.27f8	da		phx				phx
.27f9	ae 46 05	ldx $0546			ldx 	IFBufferCount
.27fc	9d 47 05	sta $0547,x			sta 	IFBuffer,x
.27ff	9e 48 05	stz $0548,x			stz 	IFBuffer+1,x
.2802	ee 46 05	inc $0546			inc 	IFBufferCount
.2805	fa		plx				plx
.2806	60		rts				rts
.2807					IFloatStripTrailingZeros:
.2807	ae 46 05	ldx $0546			ldx 	IFBufferCount
.280a	bd 46 05	lda $0546,x			lda 	IFBuffer-1,x
.280d	c9 30		cmp #$30			cmp		#"0"
.280f	d0 0f		bne $2820			bne 	_IFSTExit
.2811	bd 45 05	lda $0545,x			lda 	IFBuffer-2,x
.2814	c9 2e		cmp #$2e			cmp 	#"."
.2816	f0 08		beq $2820			beq 	_IFSTExit
.2818	ce 46 05	dec $0546			dec 	IFBufferCount
.281b	9e 46 05	stz $0546,x			stz 	IFBuffer-1,x
.281e	80 e7		bra $2807			bra 	IFloatStripTrailingZeros
.2820					_IFSTExit:
.2820	60		rts				rts
.0546					IFBufferCount:
>0546							.fill 	1
.0547					IFBuffer:
>0547							.fill 	25
.2821					IFloatCheck:
.2821	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2823	09 40		ora #$40			ora 	#IFSign
.2825	85 0f		sta $0f				sta 	IFR0+IExp
.2827	20 5e 21	jsr $215e			jsr 	IFloatAdd 					; add allowed to error.
.282a	a2 0c		ldx #$0c			ldx 	#IFR0
.282c	20 61 27	jsr $2761			jsr 	IFloatCheckZero 			; error if < 0
.282f	f0 06		beq $2837			beq 	_IFAOkay
.2831	a5 0f		lda $0f				lda 	IFR0+IExp
.2833	29 40		and #$40			and 	#IFSign
.2835	d0 01		bne $2838			bne 	_IFAFail
.2837					_IFAOkay:
.2837	60		rts				rts
.2838					_IFAFail:
.2838	38		sec				sec
.2839	68		pla				pla 								; get address - 2
.283a	e9 02		sbc #$02			sbc 	#2
.283c	aa		tax				tax
.283d	68		pla				pla
.283e	e9 00		sbc #$00			sbc 	#0
.2840	a8		tay				tay
.2841	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2843					_IFAStop:
>2843	db						.byte 	$DB 						; display an error AA ADR ADR
.2844	80 fd		bra $2843			bra 	_IFAStop

;******  Return to file: basic.asm

.2846					NotImplemented:
.2846	a9 ff		lda #$ff			lda 	#$FF
.2848	80 04		bra $284e			bra 	EnterDbg
.284a					ErrorHandler:
.284a	fa		plx				plx
.284b	7a		ply				ply
.284c	a9 ee		lda #$ee			lda 	#$EE
.284e					EnterDbg:
>284e	db						.byte 	$DB
.284f	4c 4e 28	jmp $284e			jmp 	EnterDbg

;******  End of listing
