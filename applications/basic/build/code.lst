
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$6000" -D "ENDMEMORY=\$B000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Tue Jun  6 18:31:19 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$6000					BASICCODE=$6000
=$b000					ENDMEMORY=$B000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					rTemp1:
>000a							.fill 	2
.000c					iTemp0:
>000c							.fill 	2
.000e					IFR0:
>000e							.fill 	4
.0012					IFR1:
>0012							.fill 	4
.0016					IFR2:
>0016							.fill 	4
.001a					IFRTemp:
>001a							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 b0		ldy #$b0			ldy 	#ENDMEMORY >> 8
.1004	20 c0 1d	jsr $1dc0			jsr 	PGMSetBaseAddress
.1007	20 bb 28	jsr $28bb			jsr 	IFInitialise 				; setup math library
.100a	4c 5e 13	jmp $135e			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001e					codePtr:
>001e							.fill 	2
.0020					zTemp0:
>0020							.fill 	2
.0022					zTemp1:
>0022							.fill 	2
.0024					zTemp2:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber
.1010	a2 0e		ldx #$0e			ldx 	#IFR0
.1012	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c e1 23	jmp $23e1		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 d3 1d	jsr $1dd3			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 26		stz $26				stz 	freeMemory 					; start on next free page
.1020	a5 21		lda $21				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 27		sta $27				sta 	freeMemory+1
.1025	20 5a 28	jsr $285a			jsr 	VARClearHashTables
.1028	ad 15 05	lda $0515			lda 	PGMEndMemoryHigh
.102b	20 97 25	jsr $2597			jsr 	StackReset
.102e	20 f6 25	jsr $25f6			jsr 	StringSystemInitialise
.1031	20 f8 22	jsr $22f8			jsr 	ScanProcedures
.1034	60		rts				rts
.1035					AllocateMemory:
.1035	5a		phy				phy 								; save Y
.1036	a4 26		ldy $26				ldy 	freeMemory 					; save addr.low
.1038	5a		phy				phy
.1039	a4 27		ldy $27				ldy 	freeMemory+1 				; save addr.high
.103b	5a		phy				phy
.103c	a8		tay				tay 								; count is now in XY
.103d					_AllocateLoop:
.103d	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103f	d0 04		bne $1045			bne 	_AllocateOne
.1041	c0 00		cpy #$00			cpy 	#0
.1043	f0 15		beq $105a			beq 	_AllocateExit
.1045					_AllocateOne:
.1045	a9 00		lda #$00			lda 	#0 							; zero byte
.1047	92 26		sta ($26)			sta 	(freeMemory)
.1049	e6 26		inc $26				inc 	freeMemory 					; bump pointer
.104b	d0 05		bne $1052			bne 	_AllocateSkipCarry
.104d	e6 27		inc $27				inc 	freeMemory+1
.104f	20 5e 10	jsr $105e			jsr 	ClearCheckMemory
.1052					_AllocateSkipCarry:
.1052	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1054	d0 01		bne $1057			bne 	_AllocateSkipBorrow
.1056	ca		dex				dex
.1057					_AllocateSkipBorrow:
.1057	88		dey				dey
.1058	80 e3		bra $103d			bra 	_AllocateLoop
.105a					_AllocateExit:
.105a	fa		plx				plx 								; restore address
.105b	68		pla				pla
.105c	7a		ply				ply 								; restore Y
.105d	60		rts				rts
.105e					ClearCheckMemory:
.105e	a5 27		lda $27				lda 	freeMemory+1
.1060	1a		inc a				inc 	a
.1061	1a		inc a				inc 	a
.1062	cd 1d 06	cmp $061d			cmp 	stringMemory+1
.1065	b0 01		bcs $1068			bcs  	_CCMError
.1067	60		rts				rts
.1068					_CCMError:
.1068	4c 7b 24	jmp $247b		jmp	ErrorV_memory
.0026					freeMemory:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.106b					CommandDIM:
.106b	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.106d	29 c0		and #$c0			and 	#$C0
.106f	c9 40		cmp #$40			cmp 	#$40
.1071	d0 39		bne $10ac			bne 	_CDSyntax
.1073	20 11 28	jsr $2811			jsr 	VARGetInfo 					; get information
.1076	ad 25 06	lda $0625			lda 	VARType 					; check array.
.1079	29 02		and #$02			and 	#2
.107b	f0 2f		beq $10ac			beq 	_CDSyntax
.107d	20 c3 27	jsr $27c3			jsr 	VARFind 					; does it already exist
.1080	b0 2d		bcs $10af			bcs 	_CDExists
.1082	20 6f 27	jsr $276f			jsr 	VARCreate 					; create it - returns data ptr in XA
.1085	da		phx				phx 								; save target address
.1086	48		pha				pha
.1087	ad 25 06	lda $0625			lda 	VARType 					; type ID.
.108a	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.108c	20 b2 10	jsr $10b2			jsr 	CreateArray 				; create array to XA
.108f	84 22		sty $22				sty 	zTemp1 						; save Y
.1091	7a		ply				ply 								; restore target to zTemp0
.1092	84 20		sty $20				sty 	zTemp0
.1094	7a		ply				ply
.1095	84 21		sty $21				sty 	zTemp0+1
.1097	92 20		sta ($20)			sta 	(zTemp0) 					; save new array
.1099	a0 01		ldy #$01			ldy 	#1
.109b	8a		txa				txa
.109c	91 20		sta ($20),y			sta 	(zTemp0),y
.109e	a4 22		ldy $22				ldy 	zTemp1 						; restore zTemp1
.10a0	20 28 25	jsr $2528			jsr 	ERRCheckRParen 				; check )
.10a3	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10a5	c8		iny				iny
.10a6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a8	f0 c1		beq $106b			beq 	CommandDIM
.10aa	88		dey				dey
.10ab	60		rts				rts
.10ac					_CDSyntax:
.10ac	4c 8b 23	jmp $238b		jmp	ErrorV_syntax
.10af					_CDExists:
.10af	4c 53 24	jmp $2453		jmp	ErrorV_redefine
.10b2					CreateArray:
.10b2	8d 03 05	sta $0503			sta 	CAType						; save type
.10b5	20 cc 15	jsr $15cc			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10b8	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10ba	c9 99		cmp #$99			cmp 	#PR_COMMA
.10bc	f0 04		beq $10c2			beq 	_CATwoDimensions
.10be	20 0e 11	jsr $110e			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10c1	60		rts				rts
.10c2					_CATwoDimensions:
.10c2	a5 0f		lda $0f				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10c4	8d 05 05	sta $0505			sta 	CADim1+1
.10c7	a5 0e		lda $0e				lda 	IFR0+IM0
.10c9	8d 04 05	sta $0504			sta 	CADim1+0
.10cc	20 30 25	jsr $2530			jsr 	ERRCheckComma 				; check comma
.10cf	20 cc 15	jsr $15cc			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10d2	5a		phy				phy 								; save Y position
.10d3	18		clc				clc 								; allocate the outer array of pointers.
.10d4	ae 05 05	ldx $0505			ldx 	CADim1+1
.10d7	ad 04 05	lda $0504			lda 	CADim1
.10da	20 4d 11	jsr $114d			jsr 	CSAAllocate 				; allocate the outer array
.10dd	da		phx				phx									; save this address on the stack
.10de	48		pha				pha
.10df	86 25		stx $25				stx 	zTemp2+1					; and in zTemp2
.10e1	85 24		sta $24				sta 	zTemp2
.10e3					_CACreateSubLoop:
.10e3	38		sec				sec
.10e4	20 0e 11	jsr $110e			jsr 	CreateSingleArray 			; create data array of required size.
.10e7	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10e9	91 24		sta ($24),y			sta 	(zTemp2),y
.10eb	8a		txa				txa
.10ec	c8		iny				iny
.10ed	91 24		sta ($24),y			sta 	(zTemp2),y
.10ef	18		clc				clc  								; next slot.
.10f0	a5 24		lda $24				lda 	zTemp2
.10f2	69 02		adc #$02			adc 	#2
.10f4	85 24		sta $24				sta 	zTemp2
.10f6	90 02		bcc $10fa			bcc 	_CACNoCarry
.10f8	e6 25		inc $25				inc 	zTemp2+1
.10fa					_CACNoCarry:
.10fa	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.10fd	d0 03		bne $1102			bne 	_CACNoBorrow
.10ff	ce 05 05	dec $0505			dec 	CADim1+1
.1102					_CACNoBorrow:
.1102	ce 04 05	dec $0504			dec 	CADim1
.1105	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1108	10 d9		bpl $10e3			bpl 	_CACreateSubLoop
.110a	68		pla				pla
.110b	fa		plx				plx
.110c	7a		ply				ply
.110d	60		rts				rts
.110e					CreateSingleArray:
.110e	5a		phy				phy
.110f	38		sec				sec 								; allocate memory block all zeros.
.1110	a5 0e		lda $0e				lda 	IFR0+IM0
.1112	a6 0f		ldx $0f				ldx 	IFR0+IM1
.1114	20 4d 11	jsr $114d			jsr 	CSAAllocate
.1117	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.111a	f0 2f		beq $114b			beq 	_CSANoInit
.111c	da		phx				phx 								; save address of new array
.111d	48		pha				pha
.111e	85 20		sta $20				sta 	zTemp0 						; address in zTemp0
.1120	86 21		stx $21				stx 	zTemp0+1
.1122	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1124	b1 20		lda ($20),y			lda 	(zTemp0),y
.1126	a8		tay				tay
.1127	b2 20		lda ($20)			lda 	(zTemp0)
.1129	aa		tax				tax
.112a					_CSAEraseString:
.112a	5a		phy				phy
.112b	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.112d	a9 80		lda #$80			lda 	#$80
.112f	91 20		sta ($20),y			sta 	(zTemp0),y
.1131	7a		ply				ply
.1132	18		clc				clc 								; add 4 to next slot.
.1133	a5 20		lda $20				lda 	zTemp0
.1135	69 04		adc #$04			adc 	#4
.1137	85 20		sta $20				sta 	zTemp0
.1139	90 02		bcc $113d			bcc 	_CSAENoCarry
.113b	e6 21		inc $21				inc 	zTemp0+1
.113d					_CSAENoCarry:
.113d	e0 00		cpx #$00			cpx 	#0
.113f	d0 01		bne $1142			bne 	_CSANoBorrow
.1141	88		dey				dey
.1142					_CSANoBorrow:
.1142	ca		dex				dex
.1143	d0 e5		bne $112a			bne 	_CSAEraseString
.1145	c0 00		cpy #$00			cpy 	#0
.1147	d0 e1		bne $112a			bne 	_CSAEraseString
.1149	68		pla				pla
.114a	fa		plx				plx
.114b					_CSANoInit:
.114b	7a		ply				ply
.114c	60		rts				rts
.114d					CSAAllocate:
.114d	08		php				php 								; save type flag.
.114e	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.114f	d0 01		bne $1152			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1151	e8		inx				inx
.1152					_CSAANoCarry:
.1152	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1154	b0 2e		bcs $1184			bcs 	_CSARange
.1156	28		plp				plp 								; restore type flag
.1157	08		php				php 								; save it back again.
.1158	da		phx				phx 								; save size.
.1159	48		pha				pha
.115a	86 21		stx $21				stx  	zTemp0+1 					; now in ztemp0+1:X
.115c	90 03		bcc $1161			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.115e	0a		asl a				asl 	a
.115f	26 21		rol $21				rol 	zTemp0+1
.1161					_CSAATimes2:
.1161	0a		asl a				asl 	a
.1162	26 21		rol $21				rol 	zTemp0+1
.1164	18		clc				clc
.1165	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1167	90 02		bcc $116b			bcc 	_CSAANoCarry2
.1169	e6 21		inc $21				inc 	zTemp0+1
.116b					_CSAANoCarry2:
.116b	a6 21		ldx $21				ldx 	zTemp0+1 					; XA is the bytes required.
.116d	20 35 10	jsr $1035			jsr 	AllocateMemory 				; allocate memory to XA
.1170	86 21		stx $21				stx 	zTemp0+1 					; save pointers
.1172	85 20		sta $20				sta 	zTemp0
.1174	68		pla				pla  								; write element count to first 2 bytes
.1175	92 20		sta ($20)			sta 	(zTemp0)
.1177	68		pla				pla 								; msb of element count
.1178	28		plp				plp 								; CC if pointer array
.1179	b0 02		bcs $117d			bcs 	_CSAAIsData
.117b	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.117d					_CSAAIsData:
.117d	a0 01		ldy #$01			ldy 	#1
.117f	91 20		sta ($20),y			sta 	(zTemp0),y
.1181	a5 20		lda $20				lda 	zTemp0 						; fix XA back up again
.1183	60		rts				rts
.1184					_CSARange:
.1184	4c 9c 23	jmp $239c		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.1187					Command_Doke:
.1187	38		sec				sec
.1188	80 01		bra $118b			bra 	DPCommon
.118a					Command_Poke:
.118a	18		clc				clc
.118b					DPCommon:
.118b	08		php				php 								; CS if DOKE
.118c	20 cc 15	jsr $15cc			jsr 	EXPEvalInteger16 			; address
.118f	a5 0e		lda $0e				lda 	IFR0+IM0 					; push on stack
.1191	48		pha				pha
.1192	a5 0f		lda $0f				lda 	IFR0+IM1
.1194	48		pha				pha
.1195	20 30 25	jsr $2530			jsr 	ERRCheckComma 				; [dp]oke address,data
.1198	20 cc 15	jsr $15cc			jsr 	EXPEvalInteger16
.119b	68		pla				pla 								; get address back
.119c	85 21		sta $21				sta 	zTemp0+1
.119e	68		pla				pla
.119f	85 20		sta $20				sta 	zTemp0
.11a1	a5 0e		lda $0e				lda 	IFR0+IM0
.11a3	92 20		sta ($20)			sta 	(zTemp0)
.11a5	28		plp				plp
.11a6	90 08		bcc $11b0			bcc 	_DPExit
.11a8	5a		phy				phy
.11a9	a5 0f		lda $0f				lda 	IFR0+IM1
.11ab	a0 01		ldy #$01			ldy 	#1
.11ad	91 20		sta ($20),y			sta 	(zTemp0),y
.11af	7a		ply				ply
.11b0					_DPExit:
.11b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11b1					Command_Print:
.11b1					Command_IP_Main:
.11b1	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11b2					_CPLoop:
.11b2	08		php				php 								; save last action flag
.11b3	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next character
.11b5	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11b7	f0 3e		beq $11f7			beq 	_CPExit 					; without consuming
.11b9	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11bb	f0 3a		beq $11f7			beq 	_CPExit
.11bd	68		pla				pla 								; throw last action flag
.11be	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; next character and bump
.11c0	c8		iny				iny
.11c1	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11c3	f0 2f		beq $11f4			beq 	_CPContinueWithSameLine
.11c5	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11c7	f0 26		beq $11ef			beq 	_CPTab
.11c9	88		dey				dey 								; undo the get.
.11ca	20 7a 15	jsr $157a			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11cd	24 11		bit $11				bit 	IFR0+IExp 					; is it a number ?
.11cf	10 14		bpl $11e5			bpl 	_CPNumber
.11d1	5a		phy				phy
.11d2	18		clc				clc 								; string address to YX
.11d3	a5 0e		lda $0e				lda 	IFR0+IM0
.11d5	aa		tax				tax
.11d6	a5 0f		lda $0f				lda 	IFR0+IM1
.11d8	a8		tay				tay
.11d9	e8		inx				inx 								; point to 1st character
.11da	d0 01		bne $11dd			bne 	_CPNoCarry
.11dc	c8		iny				iny
.11dd					_CPNoCarry:
.11dd	b2 0e		lda ($0e)			lda 	(IFR0+IM0)					; length to A
.11df	20 00 12	jsr $1200			jsr 	CPPrintAYX 					; print AYX
.11e2	7a		ply				ply
.11e3	80 cc		bra $11b1			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11e5					_CPNumber:
.11e5	5a		phy				phy
.11e6	20 cd 2c	jsr $2ccd			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11e9	20 00 12	jsr $1200			jsr 	CPPrintAYX 					; print AYX
.11ec	7a		ply				ply
.11ed	80 c2		bra $11b1			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11ef					_CPTab:
.11ef	a9 09		lda #$09			lda 	#9 							; print TAB
.11f1	20 13 12	jsr $1213			jsr 	CPPrintA
.11f4					_CPContinueWithSameLine:
.11f4	38		sec				sec 								; loop round with carry set, which
.11f5	80 bb		bra $11b2			bra 	_CPLoop 					; will inhibit final CR
.11f7					_CPExit:
.11f7	28		plp				plp 								; get last action flag
.11f8	b0 05		bcs $11ff			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11fa	a9 0d		lda #$0d			lda 	#13 						; print new line
.11fc	20 13 12	jsr $1213			jsr 	CPPrintA
.11ff					_CPExit2:
.11ff	60		rts				rts
.1200					CPPrintAYX:
.1200	86 20		stx $20				stx 	zTemp0
.1202	84 21		sty $21				sty 	zTemp0+1
.1204	aa		tax				tax
.1205	f0 0b		beq $1212			beq 	_CPPrintExit
.1207	a0 00		ldy #$00			ldy 	#0
.1209					_CPPrintAYXLoop:
.1209	b1 20		lda ($20),y			lda 	(zTemp0),y
.120b	20 13 12	jsr $1213			jsr 	CPPrintA
.120e	c8		iny				iny
.120f	ca		dex				dex
.1210	d0 f7		bne $1209			bne 	_CPPrintAYXLoop
.1212					_CPPrintExit:
.1212	60		rts				rts
.1213					CPPrintA:
.1213	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1216					CommandLET:
.1216	20 42 16	jsr $1642			jsr 	EXPTermR0 					; get term
.1219	90 6d		bcc $1288			bcc 	_CLError 					; must be a reference term.
.121b	a5 0e		lda $0e				lda 	IFR0+IM0 					; push address and type onto stack
.121d	48		pha				pha
.121e	a5 0f		lda $0f				lda 	IFR0+IM1
.1220	48		pha				pha
.1221	a5 11		lda $11				lda 	IFR0+IExp
.1223	48		pha				pha
.1224	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1226	20 38 25	jsr $2538			jsr 	ERRCheckA
.1229	20 7a 15	jsr $157a			jsr 	EXPEvaluateExpression 		; right hand side.
.122c	68		pla				pla 								; type of l-expr
.122d	45 11		eor $11				eor 	IFR0+IExp 					; check types match
.122f	30 5a		bmi $128b			bmi 	_CLType
.1231	fa		plx				plx 	 							; pop target address to zTemp0
.1232	86 21		stx $21				stx 	zTemp0+1
.1234	fa		plx				plx
.1235	86 20		stx $20				stx 	zTemp0
.1237	a5 11		lda $11				lda 	IFR0+IExp 					; string assignment
.1239	30 15		bmi $1250			bmi 	_CLStringAssign
.123b	5a		phy				phy
.123c	a0 03		ldy #$03			ldy 	#3
.123e	91 20		sta ($20),y			sta 	(zTemp0),y
.1240	88		dey				dey
.1241	a5 10		lda $10				lda 	IFR0+IM2
.1243	91 20		sta ($20),y			sta 	(zTemp0),y
.1245	88		dey				dey
.1246	a5 0f		lda $0f				lda 	IFR0+IM1
.1248	91 20		sta ($20),y			sta 	(zTemp0),y
.124a	a5 0e		lda $0e				lda 	IFR0+IM0
.124c	92 20		sta ($20)			sta 	(zTemp0)
.124e	7a		ply				ply
.124f	60		rts				rts
.1250					_CLStringAssign:
.1250	5a		phy				phy
.1251	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1253	b1 20		lda ($20),y			lda 	(zTemp0),y
.1255	12 20		ora ($20)			ora 	(zTemp0)
.1257	f0 23		beq $127c			beq 	_CLConcreteString
.1259	b2 20		lda ($20)			lda 	(zTemp0) 					; copy address of string to zTemp1
.125b	85 22		sta $22				sta 	zTemp1
.125d	b1 20		lda ($20),y			lda 	(zTemp0),y
.125f	85 23		sta $23				sta 	zTemp1+1
.1261	b2 22		lda ($22)			lda 	(zTemp1) 					; bytes available in the new slot
.1263	38		sec				sec 								; we want 3 for slot size, status, string size.
.1264	e9 03		sbc #$03			sbc 	#3
.1266	d2 0e		cmp ($0e)			cmp 	(IFR0) 						; compare against string size.
.1268	90 12		bcc $127c			bcc 	_CLConcreteString 			; if so, concrete the string again.
.126a	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.126c	1a		inc a				inc 	a
.126d	aa		tax				tax
.126e	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1270					_CLReplaceString:
.1270	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; copy new string into previous space.
.1272	c8		iny				iny
.1273	c8		iny				iny
.1274	91 22		sta ($22),y			sta 	(zTemp1),y
.1276	88		dey				dey
.1277	ca		dex				dex
.1278	d0 f6		bne $1270			bne 	_CLReplaceString
.127a	80 0a		bra $1286			bra 	_CLExit
.127c					_CLConcreteString:
.127c	20 ab 25	jsr $25ab			jsr 	StringConcrete  			; concreted string in XA.
.127f	a0 01		ldy #$01			ldy 	#1 							; store the address
.1281	92 20		sta ($20)			sta 	(zTemp0)
.1283	8a		txa				txa
.1284	91 20		sta ($20),y			sta 	(zTemp0),y
.1286					_CLExit:
.1286	7a		ply				ply
.1287	60		rts				rts
.1288					_CLError:
.1288	4c be 24	jmp $24be		jmp	ErrorV_variable
.128b					_CLType:
.128b	4c bb 23	jmp $23bb		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.128e					Command_LIST:
.128e	9c 06 05	stz $0506			stz 	CLFrom 						; default from
.1291	9c 07 05	stz $0507			stz 	CLFrom+1
.1294	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1296	c9 99		cmp #$99			cmp 	#PR_COMMA
.1298	f0 1d		beq $12b7			beq 	_CLToLine
.129a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.129c	f0 37		beq $12d5			beq 	_CLDefaultTo
.129e	20 cc 15	jsr $15cc			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.12a1	a5 0e		lda $0e				lda 	IFR0+IM0
.12a3	8d 06 05	sta $0506			sta 	CLFrom
.12a6	8d 08 05	sta $0508			sta 	CLTo
.12a9	a5 0f		lda $0f				lda 	IFR0+IM1
.12ab	8d 07 05	sta $0507			sta 	CLFrom+1
.12ae	8d 09 05	sta $0509			sta 	CLTo+1
.12b1	b1 1e		lda ($1e),y			lda 	(codePtr),y
.12b3	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.12b5	f0 26		beq $12dd			beq 	_CLList
.12b7					_CLToLine:
.12b7	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.12b9	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12bb	f0 18		beq $12d5			beq 	_CLDefaultTo
.12bd	20 30 25	jsr $2530			jsr 	ERRCheckComma 				; sep comma
.12c0	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.12c2	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.12c4	f0 0f		beq $12d5			beq 	_CLDefaultTo
.12c6	20 cc 15	jsr $15cc			jsr 	EXPEvalInteger16 			; there's a To value.
.12c9	a5 0e		lda $0e				lda 	IFR0+IM0
.12cb	8d 08 05	sta $0508			sta 	CLTo
.12ce	a5 0f		lda $0f				lda 	IFR0+IM1
.12d0	8d 09 05	sta $0509			sta 	CLTo+1
.12d3	80 08		bra $12dd			bra 	_CLList
.12d5					_CLDefaultTo:
.12d5	a9 ff		lda #$ff			lda 	#$FF
.12d7	8d 08 05	sta $0508			sta 	CLTo
.12da	8d 09 05	sta $0509			sta 	CLTo+1
.12dd					_CLList:
.12dd	ad 14 05	lda $0514			lda 	PGMBaseHigh 				; back to the program start
.12e0	85 1f		sta $1f				sta 	codePtr+1
.12e2	64 1e		stz $1e				stz 	codePtr
.12e4	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.12e6	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.12e8	20 22 1c	jsr $1c22			jsr 	TOKSetDetokeniseOutput
.12eb					_CLLoop:
.12eb	b2 1e		lda ($1e)			lda 	(codePtr) 					; finished
.12ed	f0 4a		beq $1339			beq 	_CLExit
.12ef	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.12f2	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.12f5	d0 45		bne $133c			bne 	_CLBreak
.12f7	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.12f9	20 3f 13	jsr $133f			jsr 	_CLCompareLine
.12fc	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.12fe	f0 2c		beq $132c			beq 	_CLNext
.1300	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1302	20 3f 13	jsr $133f			jsr 	_CLCompareLine
.1305	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.1307	f0 23		beq $132c			beq 	_CLNext
.1309	a0 02		ldy #$02			ldy 	#2 							; print line #
.130b	b1 1e		lda ($1e),y			lda 	(codePtr),y
.130d	aa		tax				tax
.130e	88		dey				dey
.130f	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1311	20 89 26	jsr $2689			jsr 	WriteIntXA
.1314	a9 20		lda #$20			lda 	#32
.1316	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1319	a4 1f		ldy $1f				ldy 	codePtr+1 					; point YX to tokenised code/
.131b	a5 1e		lda $1e				lda 	codePtr
.131d	18		clc				clc
.131e	69 03		adc #$03			adc 	#3
.1320	aa		tax				tax
.1321	90 01		bcc $1324			bcc 	_CLNoCarry2
.1323	c8		iny				iny
.1324					_CLNoCarry2:
.1324	20 dd 1b	jsr $1bdd			jsr 	TOKDetokenise
.1327	a9 0d		lda #$0d			lda 	#13	 						; next line
.1329	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.132c					_CLNext:
.132c	18		clc				clc 								; advance to next line.
.132d	b2 1e		lda ($1e)			lda 	(codePtr)
.132f	65 1e		adc $1e				adc 	codePtr
.1331	85 1e		sta $1e				sta 	codePtr
.1333	90 02		bcc $1337			bcc 	_CLNoCarry
.1335	e6 1f		inc $1f				inc 	codePtr+1
.1337					_CLNoCarry:
.1337	80 b2		bra $12eb			bra 	_CLLoop
.1339					_CLExit:
.1339	4c a8 26	jmp $26a8			jmp 	WarmStart
.133c					_CLBreak:
.133c	4c 16 25	jmp $2516		jmp	ErrorV_break
.133f					_CLCompareLine:
.133f	a0 01		ldy #$01			ldy 	#1
.1341	38		sec				sec
.1342	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1344	fd 06 05	sbc $0506,x			sbc 	CLFrom,x
.1347	85 20		sta $20				sta 	zTemp0
.1349	c8		iny				iny
.134a	b1 1e		lda ($1e),y			lda 	(codePtr),y
.134c	fd 07 05	sbc $0507,x			sbc 	CLFrom+1,x
.134f	90 0a		bcc $135b			bcc 	_CLIsNegative
.1351	d0 05		bne $1358			bne 	_CLIsPositive
.1353	a5 20		lda $20				lda 	zTemp0
.1355	d0 01		bne $1358			bne 	_CLIsPositive
.1357	60		rts				rts
.1358					_CLIsPositive:
.1358	a9 01		lda #$01			lda 	#1
.135a	60		rts				rts
.135b					_CLIsNegative:
.135b	a9 ff		lda #$ff			lda 	#255
.135d	60		rts				rts
.0506					CLFrom:
>0506							.fill 	2
.0508					CLTo:
>0508							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.135e					Command_NEW:
.135e	20 c7 1d	jsr $1dc7			jsr 	PGMNewProgram
.1361	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1364	4c df 13	jmp $13df			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1367					Command_REM:
.1367					Command_REM2:
.1367	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; optional string parameter
.1369	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.136b	d0 06		bne $1373			bne 	_CRExit
.136d	c8		iny				iny 								; skip over it, it's a comment.
.136e	98		tya				tya
.136f	38		sec				sec
.1370	71 1e		adc ($1e),y			adc 	(codePtr),y
.1372	a8		tay				tay
.1373					_CRExit:
.1373	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1374					Command_RUN:
.1374	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.1377	ad 14 05	lda $0514			lda 	PGMBaseHigh 				; back to the program start
.137a	85 1f		sta $1f				sta 	codePtr+1
.137c	64 1e		stz $1e				stz 	codePtr
.137e	80 0b		bra $138b			bra 	RUNNewLine
.1380					RUNEndOfLine:
.1380	18		clc				clc 								; advance to next line.
.1381	b2 1e		lda ($1e)			lda 	(codePtr)
.1383	65 1e		adc $1e				adc 	codePtr
.1385	85 1e		sta $1e				sta 	codePtr
.1387	90 02		bcc $138b			bcc 	_RELNoCarry
.1389	e6 1f		inc $1f				inc 	codePtr+1
.138b					_RELNoCarry:
.138b					RUNNewLine:
.138b	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.138d	9a		txs				txs
.138e	b2 1e		lda ($1e)			lda 	(codePtr) 					; check off end of program
.1390	f0 4d		beq $13df			beq 	Command_END
.1392	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1394	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1396	8d 20 06	sta $0620			sta 	ERRLine
.1399	c8		iny				iny
.139a	b1 1e		lda ($1e),y			lda 	(codePtr),y
.139c	8d 21 06	sta $0621			sta 	ERRLine+1
.139f	c8		iny				iny 								; offset into codePtr for start of line.
.13a0					RUNNewCommand:
.13a0	9c 1b 06	stz $061b			stz 	stringInitialised 			; reset string system.
.13a3	ce 0a 05	dec $050a			dec 	checkCounter
.13a6	d0 0a		bne $13b2			bne 	_RNCNoCheck
.13a8	5a		phy				phy 								; keyboard check.
.13a9	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.13ac	7a		ply				ply
.13ad	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.13b0	d0 1e		bne $13d0			bne 	_RUNBreak
.13b2					_RNCNoCheck:
.13b2	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token
.13b4	10 1d		bpl $13d3			bpl		_RUNNotToken 				; probably an identifier
.13b6	c8		iny				iny 								; consume token
.13b7	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.13b9	f0 e5		beq $13a0			beq 	RUNNewCommand
.13bb	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.13bd	b0 0e		bcs $13cd			bcs 	_RUNSyntax
.13bf	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.13c1	90 0a		bcc $13cd			bcc 	_RUNSyntax
.13c3	0a		asl a				asl 	a 							; double into X.
.13c4	aa		tax				tax
.13c5	20 ca 13	jsr $13ca			jsr 	_RUNDispatchMain			; call the main dispatcher
.13c8	80 d6		bra $13a0			bra 	RUNNewCommand
.13ca					_RUNDispatchMain:
.13ca	7c dd 1a	jmp ($1add,x)			jmp 	(VectorTable,x)
.13cd					_RUNSyntax:
.13cd	4c 8b 23	jmp $238b		jmp	ErrorV_syntax
.13d0					_RUNBreak:
.13d0	4c 16 25	jmp $2516		jmp	ErrorV_break
.13d3					_RUNNotToken:
.13d3	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.13d5	90 f6		bcc $13cd			bcc 	_RUNSyntax
.13d7	20 16 12	jsr $1216			jsr 	CommandLET 					; assignment
.13da	80 c4		bra $13a0			bra 	RUNNewCommand 				; loop round.
.13dc					Command_Shift_Handler:
.13dc	4c cd 23	jmp $23cd		jmp	ErrorV_unimplemented
.13df					Command_END:
.13df	4c a8 26	jmp $26a8			jmp 	WarmStart
.050a					checkCounter:
>050a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.13e2					Command_STOP:
.13e2	4c 2f 24	jmp $242f		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.13e5					Command_Sys:
.13e5	20 cc 15	jsr $15cc			jsr 	EXPEvalInteger16 			; execution address
.13e8	5a		phy				phy
.13e9	ad 68 06	lda $0668			lda 	('A'-'A')*4 + FastVariables ; load AXY
.13ec	ae c4 06	ldx $06c4			ldx 	('X'-'A')*4 + FastVariables
.13ef	ac c8 06	ldy $06c8			ldy 	('Y'-'A')*4 + FastVariables
.13f2	20 f7 13	jsr $13f7			jsr 	_CSCallIFR0 				; call the code
.13f5	7a		ply				ply
.13f6	60		rts				rts
.13f7					_CSCallIFR0:
.13f7	6c 0e 00	jmp ($000e)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.13fa					NoExec01:
.13fa					NoExec02:
.13fa					NoExec03:
.13fa					NoExec04:
.13fa					NoExec05:
.13fa					NoExec06:
.13fa					NoExec07:
.13fa					NoExec08:
.13fa	4c 8b 23	jmp $238b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.13fd					EXPBinAdd:
.13fd	24 11		bit $11				bit 	IFR0+IExp
.13ff	30 6f		bmi $1470			bmi 	EXPConcatenate
.1401	a2 12		ldx #$12			ldx 	#IFR1
.1403	4c c6 28	jmp $28c6			jmp 	IFloatAdd
.1406					EXPBinSub:
.1406	24 11		bit $11				bit 	IFR0+IExp
.1408	30 3f		bmi $1449			bmi 	EXPTypeError
.140a	a2 12		ldx #$12			ldx 	#IFR1
.140c	4c bf 28	jmp $28bf			jmp 	IFloatSubtract
.140f					EXPBinMul:
.140f	24 11		bit $11				bit 	IFR0+IExp
.1411	30 36		bmi $1449			bmi 	EXPTypeError
.1413	a2 12		ldx #$12			ldx 	#IFR1
.1415	4c 70 29	jmp $2970			jmp 	IFloatMultiply
.1418					EXPBinFDiv:
.1418	24 11		bit $11				bit 	IFR0+IExp
.141a	30 2d		bmi $1449			bmi 	EXPTypeError
.141c	a2 12		ldx #$12			ldx 	#IFR1
.141e	20 f3 2b	jsr $2bf3			jsr 	IFloatDivideFloat
.1421	b0 0f		bcs $1432			bcs 	EXPDZero
.1423	60		rts				rts
.1424					EXPBinIDiv:
.1424	24 11		bit $11				bit 	IFR0+IExp
.1426	30 21		bmi $1449			bmi 	EXPTypeError
.1428	a2 12		ldx #$12			ldx 	#IFR1
.142a	20 f3 2b	jsr $2bf3			jsr 	IFloatDivideFloat
.142d	b0 03		bcs $1432			bcs 	EXPDZero
.142f	4c d0 2b	jmp $2bd0			jmp 	IFloatIntegerR0
.1432					EXPDZero:
.1432	4c 04 24	jmp $2404		jmp	ErrorV_divzero
.1435					EXPBinIMod:
.1435	24 11		bit $11				bit 	IFR0+IExp
.1437	30 10		bmi $1449			bmi 	EXPTypeError
.1439	a2 12		ldx #$12			ldx 	#IFR1
.143b	5a		phy				phy
.143c	20 08 2b	jsr $2b08			jsr 	IFPreProcessBitwise 		; set up everything.
.143f	d0 05		bne $1446			bne 	EXPDRange
.1441	20 41 2a	jsr $2a41			jsr 	IFloatModulusInteger
.1444	7a		ply				ply
.1445	60		rts				rts
.1446					EXPDRange:
.1446	4c 9c 23	jmp $239c		jmp	ErrorV_range
.1449					EXPTypeError:
.1449	4c bb 23	jmp $23bb		jmp	ErrorV_type
.144c					EXPBinAnd:
.144c	24 11		bit $11				bit 	IFR0+IExp
.144e	30 f9		bmi $1449			bmi 	EXPTypeError
.1450	a2 12		ldx #$12			ldx 	#IFR1
.1452	20 c3 2a	jsr $2ac3			jsr 	IFloatBitwiseAnd
.1455	b0 ef		bcs $1446			bcs 	EXPDRange
.1457	60		rts				rts
.1458					EXPBinOr:
.1458	24 11		bit $11				bit 	IFR0+IExp
.145a	30 ed		bmi $1449			bmi 	EXPTypeError
.145c	a2 12		ldx #$12			ldx 	#IFR1
.145e	20 da 2a	jsr $2ada			jsr 	IFloatBitwiseOr
.1461	b0 e3		bcs $1446			bcs 	EXPDRange
.1463	60		rts				rts
.1464					EXPBinXor:
.1464	24 11		bit $11				bit 	IFR0+IExp
.1466	30 e1		bmi $1449			bmi 	EXPTypeError
.1468	a2 12		ldx #$12			ldx 	#IFR1
.146a	20 f1 2a	jsr $2af1			jsr 	IFloatBitwiseXor
.146d	b0 d7		bcs $1446			bcs 	EXPDRange
.146f	60		rts				rts
.1470					EXPConcatenate:
.1470	18		clc				clc
.1471	b2 0e		lda ($0e)			lda 	(IFR0) 	 					; work out total length
.1473	72 12		adc ($12)			adc 	(IFR1)
.1475	b0 2d		bcs $14a4			bcs 	_EXPCError
.1477	a6 0e		ldx $0e				ldx 	IFR0 						; push R0 string on stack.
.1479	da		phx				phx
.147a	a6 0f		ldx $0f				ldx 	IFR0+1
.147c	da		phx				phx
.147d	20 1e 26	jsr $261e			jsr 	StringTempAllocate 			; allocate string, set up return
.1480	a6 13		ldx $13				ldx 	IFR1+1 						; copy first string.
.1482	a5 12		lda $12				lda 	IFR1
.1484	20 8d 14	jsr $148d			jsr 	_EXPCCopyXA
.1487	fa		plx				plx 								; copy second string
.1488	68		pla				pla
.1489	20 8d 14	jsr $148d			jsr 	_EXPCCopyXA
.148c	60		rts				rts
.148d					_EXPCCopyXA:
.148d	86 21		stx $21				stx 	zTemp0+1 					; save address to zTemp0
.148f	85 20		sta $20				sta 	zTemp0
.1491	b2 20		lda ($20)			lda 	(zTemp0)					; length
.1493	f0 0e		beq $14a3			beq 	_EXPCCExit 					; nothing.
.1495	aa		tax				tax 								; count
.1496	5a		phy				phy 								; start positioin
.1497	a0 01		ldy #$01			ldy 	#1
.1499					_EXPCCLoop:
.1499	b1 20		lda ($20),y			lda 	(zTemp0),y 					; write characters one at a time.
.149b	20 53 26	jsr $2653			jsr 	StringTempWrite
.149e	c8		iny				iny
.149f	ca		dex				dex
.14a0	d0 f7		bne $1499			bne 	_EXPCCLoop
.14a2	7a		ply				ply
.14a3					_EXPCCExit:
.14a3	60		rts				rts
.14a4					_EXPCError:
.14a4	4c a8 24	jmp $24a8		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.14a7					EXPReturnTrue:
.14a7	a2 0e		ldx #$0e			ldx 	#IFR0
.14a9	a9 01		lda #$01			lda 	#1
.14ab	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.14ae	20 db 2e	jsr $2edb			jsr 	IFloatNegate
.14b1	60		rts				rts
.14b2					EXPReturnFalse:
.14b2	a2 0e		ldx #$0e			ldx 	#IFR0
.14b4	4c d0 2e	jmp $2ed0			jmp 	IFloatSetZero
.14b7					EXPCompareEqual:
.14b7	20 ed 14	jsr $14ed			jsr 	EXPCompareBaseCode
.14ba	c9 00		cmp #$00			cmp 	#0
.14bc	f0 e9		beq $14a7			beq 	EXPReturnTrue
.14be	80 f2		bra $14b2			bra 	EXPReturnFalse
.14c0					EXPCompareLess:
.14c0	20 ed 14	jsr $14ed			jsr 	EXPCompareBaseCode
.14c3	c9 ff		cmp #$ff			cmp 	#$FF
.14c5	f0 e0		beq $14a7			beq 	EXPReturnTrue
.14c7	80 e9		bra $14b2			bra 	EXPReturnFalse
.14c9					EXPCompareGreater:
.14c9	20 ed 14	jsr $14ed			jsr 	EXPCompareBaseCode
.14cc	c9 01		cmp #$01			cmp 	#1
.14ce	f0 d7		beq $14a7			beq 	EXPReturnTrue
.14d0	80 e0		bra $14b2			bra 	EXPReturnFalse
.14d2					EXPCompareNotEqual:
.14d2	20 ed 14	jsr $14ed			jsr 	EXPCompareBaseCode
.14d5	c9 00		cmp #$00			cmp 	#0
.14d7	d0 ce		bne $14a7			bne 	EXPReturnTrue
.14d9	80 d7		bra $14b2			bra 	EXPReturnFalse
.14db					EXPCompareLessEqual:
.14db	20 ed 14	jsr $14ed			jsr 	EXPCompareBaseCode
.14de	c9 01		cmp #$01			cmp 	#1
.14e0	d0 c5		bne $14a7			bne 	EXPReturnTrue
.14e2	80 ce		bra $14b2			bra 	EXPReturnFalse
.14e4					EXPCompareGreaterEqual:
.14e4	20 ed 14	jsr $14ed			jsr 	EXPCompareBaseCode
.14e7	c9 ff		cmp #$ff			cmp 	#$FF
.14e9	d0 bc		bne $14a7			bne 	EXPReturnTrue
.14eb	80 c5		bra $14b2			bra 	EXPReturnFalse
.14ed					EXPCompareBaseCode:
.14ed	24 11		bit $11				bit 	IFR0+IExp 					; string compare ?
.14ef	30 10		bmi $1501			bmi 	_EXCBCString
.14f1	a2 12		ldx #$12			ldx 	#IFR1						; float compare
.14f3	20 9e 2b	jsr $2b9e			jsr 	IFloatCompare
.14f6	a5 0e		lda $0e				lda 	IFR0+IM0
.14f8	f0 06		beq $1500			beq 	_EXCBCExit 					; return 0 if zero
.14fa	24 11		bit $11				bit 	IFR0+IExp 					; return 1 if +ve
.14fc	50 02		bvc $1500			bvc 	_EXCBCExit
.14fe	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1500					_EXCBCExit:
.1500	60		rts				rts
.1501					_EXCBCString:
.1501	5a		phy				phy
.1502	b2 0e		lda ($0e)			lda 	(IFR0) 						; length of smaller of the two in X.
.1504	d2 12		cmp ($12)			cmp 	(IFR1)
.1506	90 02		bcc $150a			bcc 	_EXCBCSmaller
.1508	b2 12		lda ($12)			lda 	(IFR1)
.150a					_EXCBCSmaller:
.150a	aa		tax				tax
.150b	f0 0d		beq $151a			beq 	_EXCBCMatches 				; if zero common length matches
.150d	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.150f					_EXCBCCheckSmallerMatches:
.150f	c8		iny				iny 								; compare directly as far as common length
.1510	38		sec				sec
.1511	b1 12		lda ($12),y			lda 	(IFR1),y
.1513	f1 0e		sbc ($0e),y			sbc 	(IFR0),y
.1515	d0 08		bne $151f			bne 	_EXCBCExit2
.1517	ca		dex				dex
.1518	d0 f5		bne $150f			bne 	_EXCBCCheckSmallerMatches
.151a					_EXCBCMatches:
.151a	38		sec				sec
.151b	b2 12		lda ($12)			lda 	(IFR1) 						; common length matches. If same length equal
.151d	f2 0e		sbc ($0e)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.151f					_EXCBCExit2:
.151f	7a		ply				ply
.1520	c9 00		cmp #$00			cmp 	#0
.1522	f0 04		beq $1528			beq 	_EXCBCReturn
.1524	30 03		bmi $1529			bmi 	_EXCBCFF
.1526	a9 01		lda #$01			lda 	#1
.1528					_EXCBCReturn:
.1528	60		rts				rts
.1529					_EXCBCFF:
.1529	a9 ff		lda #$ff			lda 	#$FF
.152b	60		rts				rts
.152c					_EXCBCRange:
.152c	4c 9c 23	jmp $239c		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.152f					EXPBinLeft:
.152f	a9 ff		lda #$ff			lda 	#$FF
.1531	8d 0b 05	sta $050b			sta 	EXPShiftLeftFlag
.1534	4c 3a 15	jmp $153a			jmp 	EXPShiftCommon
.1537					EXPBinRight:
.1537	9c 0b 05	stz $050b			stz 	EXPShiftLeftFlag
.153a					EXPShiftCommon:
.153a	a5 11		lda $11				lda 	IFR0+IExp 					; both integers
.153c	05 15		ora $15				ora 	IFR1+IExp
.153e	29 7f		and #$7f			and 	#$7F
.1540	d0 35		bne $1577			bne 	_EXPSRange
.1542	a5 0e		lda $0e				lda 	IFR0+IM0					; check shift >= 32
.1544	29 e0		and #$e0			and 	#$E0
.1546	05 0f		ora $0f				ora 	IFR0+IM1
.1548	05 10		ora $10				ora 	IFR0+IM2
.154a	d0 25		bne $1571			bne 	_EXPSShiftZero 				; if so return zero
.154c	5a		phy				phy
.154d	a5 0e		lda $0e				lda 	IFR0+IM0 					; get shift
.154f	29 1f		and #$1f			and 	#$1F
.1551	f0 17		beq $156a			beq 	_EXPSExit 					; exit if zero
.1553	a8		tay				tay
.1554					_EXPSLoop:
.1554	a2 12		ldx #$12			ldx 	#IFR1
.1556	2c 0b 05	bit $050b			bit 	EXPShiftLeftFlag
.1559	30 05		bmi $1560			bmi 	_EXPSShiftLeft
.155b	20 ff 2e	jsr $2eff			jsr 	IFloatShiftRight
.155e	80 07		bra $1567			bra 	_EXPSContinue
.1560					_EXPSShiftLeft:
.1560	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1563	24 10		bit $10				bit 	IFR0+IM2 					; too many shifts
.1565	30 10		bmi $1577			bmi 	_EXPSRange
.1567					_EXPSContinue:
.1567	88		dey				dey
.1568	d0 ea		bne $1554			bne 	_EXPSLoop
.156a					_EXPSExit:
.156a	a2 12		ldx #$12			ldx 	#IFR1
.156c	20 61 2e	jsr $2e61			jsr 	IFloatCopyFromRegister
.156f	7a		ply				ply
.1570	60		rts				rts
.1571					_EXPSShiftZero:
.1571	a2 0e		ldx #$0e			ldx 	#IFR0
.1573	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.1576	60		rts				rts
.1577					_EXPSRange:
.1577	4c 9c 23	jmp $239c		jmp	ErrorV_range
.050b					EXPShiftLeftFlag:
>050b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.157a					EXPEvaluateExpression:
.157a	a9 00		lda #$00			lda 	#0 							; current precedence
.157c					EXPEvaluateExpressionPrecedenceA:
.157c	48		pha				pha
.157d	20 f7 15	jsr $15f7			jsr 	EXPTermValueR0				; do first term.
.1580					_EELoop:
.1580	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1582	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1584	90 31		bcc $15b7			bcc 	_EEExit
.1586	aa		tax				tax 								; access the precedence of the operator.
.1587	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1588	dd 35 18	cmp $1835,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.158b	b0 2b		bcs $15b8			bcs 	_EEExit2
.158d	48		pha				pha 								; save current precedence.
.158e	da		phx				phx 								; save operator
.158f	c8		iny				iny 								; consume operator
.1590	da		phx				phx
.1591	a2 0e		ldx #$0e			ldx 	#IFR0 						; push R0 on the stack
.1593	20 1f 2e	jsr $2e1f			jsr 	IFloatPushRx
.1596	fa		plx				plx
.1597	bd 35 18	lda $1835,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.159a	20 7c 15	jsr $157c			jsr 	EXPEvaluateExpressionPrecedenceA
.159d	a2 12		ldx #$12			ldx 	#IFR1 						; pop LHS to R1.
.159f	20 40 2e	jsr $2e40			jsr 	IFloatPullRx
.15a2	fa		plx				plx 								; operator
.15a3	a5 11		lda $11				lda 	IFR0+IExp 					; if check types match.
.15a5	45 15		eor $15				eor 	IFR1+IExp
.15a7	30 08		bmi $15b1			bmi 	_EEType
.15a9					_EETypeOkay:
.15a9	8a		txa				txa
.15aa	0a		asl a				asl 	a 							; double -> X
.15ab	aa		tax				tax
.15ac	20 b4 15	jsr $15b4			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.15af	80 cf		bra $1580			bra 	_EELoop
.15b1					_EEType:
.15b1	4c bb 23	jmp $23bb		jmp	ErrorV_type
.15b4					_EECallBinary:
.15b4	7c dd 1a	jmp ($1add,x)			jmp 	(VectorTable,x)
.15b7					_EEExit:
.15b7	68		pla				pla 								; throw precedence
.15b8					_EEExit2:
.15b8	18		clc				clc
.15b9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.15ba					EXPEvalNumber:
.15ba	20 7a 15	jsr $157a			jsr 	EXPEvaluateExpression
.15bd	24 11		bit $11				bit 	IFR0+IExp
.15bf	30 01		bmi $15c2			bmi 	EVUType
.15c1	60		rts				rts
.15c2					EVUType:
.15c2	4c bb 23	jmp $23bb		jmp	ErrorV_type
.15c5					EXPEvalInteger:
.15c5	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.15c8	20 d0 2b	jsr $2bd0			jsr 	IFloatIntegerR0
.15cb	60		rts				rts
.15cc					EXPEvalInteger16:
.15cc	20 c5 15	jsr $15c5			jsr 	EXPEvalInteger
.15cf	a5 10		lda $10				lda 	IFR0+IM2
.15d1	d0 21		bne $15f4			bne 	EVURange
.15d3	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15d5	a5 0e		lda $0e				lda 	IFR0+IM0
.15d7	60		rts				rts
.15d8					EXPEvalInteger8:
.15d8	20 c5 15	jsr $15c5			jsr 	EXPEvalInteger
.15db	a5 10		lda $10				lda 	IFR0+IM2
.15dd	05 0f		ora $0f				ora 	IFR0+IM1
.15df	d0 13		bne $15f4			bne 	EVURange
.15e1	a5 0e		lda $0e				lda 	IFR0+IM0
.15e3	60		rts				rts
.15e4					EXPEvalString:
.15e4	20 7a 15	jsr $157a			jsr 	EXPEvaluateExpression
.15e7	24 11		bit $11				bit 	IFR0+IExp
.15e9	10 d7		bpl $15c2			bpl 	EVUType
.15eb	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15ed	86 21		stx $21				stx 	zTemp0+1
.15ef	a5 0e		lda $0e				lda 	IFR0+IM0
.15f1	85 20		sta $20				sta 	zTemp0
.15f3	60		rts				rts
.15f4					EVURange:
.15f4	4c 9c 23	jmp $239c		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.15f7					EXPTermValueR0:
.15f7	20 42 16	jsr $1642			jsr 	EXPTermR0 					; get term
.15fa	90 45		bcc $1641			bcc 	_ETVNotReference 			; exit if value.
.15fc	5a		phy				phy
.15fd	a0 03		ldy #$03			ldy 	#3 							; get type
.15ff	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1601	30 14		bmi $1617			bmi 	_ETVDereferenceString
.1603	85 11		sta $11				sta 	IFR0+IExp 					; dereference to R0
.1605	88		dey				dey
.1606	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1608	85 10		sta $10				sta 	IFR0+IM2
.160a	88		dey				dey
.160b	b1 0e		lda ($0e),y			lda 	(IFR0),y
.160d	aa		tax				tax
.160e	b2 0e		lda ($0e)			lda 	(IFR0)
.1610	86 0f		stx $0f				stx 	IFR0+IM1
.1612	85 0e		sta $0e				sta 	IFR0+IM0
.1614	7a		ply				ply
.1615	18		clc				clc
.1616	60		rts				rts
.1617					_ETVDereferenceString:
.1617	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1619	b1 0e		lda ($0e),y			lda 	(IFR0),y
.161b	12 0e		ora ($0e)			ora 	(IFR0)
.161d	f0 11		beq $1630			beq 	_ETVNull
.161f	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; load address of string to XA
.1621	aa		tax				tax
.1622	b2 0e		lda ($0e)			lda 	(IFR0)
.1624	18		clc				clc 								; add two so points to actual string.
.1625	69 02		adc #$02			adc 	#2
.1627	90 01		bcc $162a			bcc 	_EVDSNoCarry
.1629	e8		inx				inx
.162a					_EVDSNoCarry:
.162a	86 0f		stx $0f				stx 	IFR0+IM1 					; save in slots
.162c	85 0e		sta $0e				sta 	IFR0
.162e	80 08		bra $1638			bra 	_ETVFillExit 				; tidy up and exit.
.1630					_ETVNull:
.1630	a9 40		lda #$40			lda 	#_EVTNString & $FF
.1632	85 0e		sta $0e				sta 	IFR0+IM0
.1634	a9 16		lda #$16			lda 	#_EVTNString >> 8
.1636	85 0f		sta $0f				sta 	IFR0+IM1
.1638					_ETVFillExit:
.1638	64 10		stz $10				stz 	IFR0+IM2
.163a	a9 80		lda #$80			lda 	#$80
.163c	85 11		sta $11				sta 	IFR0+IExp
.163e	7a		ply				ply
.163f	60		rts				rts
.1640					_EVTNString:
>1640	00						.byte 	0
.1641					_ETVNotReference:
.1641	60		rts				rts
.1642					EXPTermR0:
.1642	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token/element
.1644	30 10		bmi $1656			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1646	c8		iny				iny 								; consume element
.1647	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1649	b0 08		bcs $1653			bcs 	_ETMIdentifier
.164b	20 7a 16	jsr $167a			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.164e	20 ad 16	jsr $16ad			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1651	18		clc				clc 								; return value
.1652	60		rts				rts
.1653					_ETMIdentifier:
.1653	4c 67 28	jmp $2867			jmp 	VARCheckSimple 				; check simple variables A-Z
.1656					_ETMIsUnaryOrMinus:
.1656	c8		iny				iny 								; consume element
.1657	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1659	d0 0a		bne $1665			bne 	_ETMCheckUnary
.165b	20 f7 15	jsr $15f7			jsr 	EXPTermValueR0 				; get a term to negate
.165e	a2 0e		ldx #$0e			ldx 	#IFR0 						; and negate it
.1660	20 db 2e	jsr $2edb			jsr 	IFloatNegate
.1663	18		clc				clc
.1664	60		rts				rts
.1665					_ETMCheckUnary:
.1665	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1667	90 0e		bcc $1677			bcc 	_ETMUnarySyntax
.1669	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.166b	b0 0a		bcs $1677			bcs 	_ETMUnarySyntax
.166d	0a		asl a				asl 	a
.166e	aa		tax				tax
.166f	20 74 16	jsr $1674			jsr 	_ETMCallUnaryFunction
.1672	18		clc				clc
.1673	60		rts				rts
.1674					_ETMCallUnaryFunction:
.1674	7c dd 1a	jmp ($1add,x)			jmp 	(VectorTable,x)
.1677					_ETMUnarySyntax:
.1677	4c 8b 23	jmp $238b		jmp	ErrorV_syntax
.167a					EXPExtractTokenisedInteger:
.167a	85 0e		sta $0e				sta 	IFR0+IM0 					; initial value in IM0
.167c	64 11		stz $11				stz 	IFR0+IExp
.167e	64 0f		stz $0f				stz 	IFR0+IM1
.1680	64 10		stz $10				stz 	IFR0+IM2
.1682					_ETMConstant:
.1682	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.1684	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1686	b0 24		bcs $16ac			bcs 	_ETMCExit 					; no.
.1688	a6 10		ldx $10				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.168a	a5 0f		lda $0f				lda 	IFR0+IM1
.168c	85 10		sta $10				sta 	IFR0+IM2
.168e	a5 0e		lda $0e				lda 	IFR0+IM0
.1690	85 0f		sta $0f				sta 	IFR0+IM1
.1692	64 0e		stz $0e				stz 	IFR0+IM0
.1694	8a		txa				txa
.1695	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1696	66 10		ror $10				ror 	IFR0+IM2
.1698	66 0f		ror $0f				ror 	IFR0+IM1
.169a	66 0e		ror $0e				ror 	IFR0+IM0
.169c	4a		lsr a				lsr 	a
.169d	66 10		ror $10				ror 	IFR0+IM2
.169f	66 0f		ror $0f				ror 	IFR0+IM1
.16a1	66 0e		ror $0e				ror 	IFR0+IM0
.16a3	a5 0e		lda $0e				lda 	IFR0+IM0 					; LSB in.
.16a5	11 1e		ora ($1e),y			ora 	(codePtr),y
.16a7	85 0e		sta $0e				sta 	IFR0+IM0
.16a9	c8		iny				iny 								; consume, loop back
.16aa	80 d6		bra $1682			bra 	_ETMConstant
.16ac					_ETMCExit:
.16ac	60		rts				rts
.16ad					EXPCheckDecimalFollows:
.16ad	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check for decimal
.16af	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.16b1	d0 19		bne $16cc			bne 	_ETMCDExit
.16b3	c8		iny				iny 								; consume token.
.16b4	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get count
.16b6	5a		phy				phy									; save current position
.16b7	48		pha				pha 								; save count of chars.
.16b8	38		sec				sec 								; address into YX : y + codePtr+1
.16b9	98		tya				tya
.16ba	65 1e		adc $1e				adc 	codePtr
.16bc	aa		tax				tax
.16bd	a5 1f		lda $1f				lda 	codePtr+1
.16bf	69 00		adc #$00			adc 	#0
.16c1	a8		tay				tay
.16c2	68		pla				pla 								; get count.
.16c3	20 74 2d	jsr $2d74			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.16c6	7a		ply				ply 								; go to next token.
.16c7	98		tya				tya
.16c8	38		sec				sec
.16c9	71 1e		adc ($1e),y			adc 	(codePtr),y
.16cb	a8		tay				tay
.16cc					_ETMCDExit:
.16cc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.16cd					EXPUnaryAbs:
.16cd	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 					; number to R0
.16d0	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.16d3	20 14 2b	jsr $2b14			jsr 	IFloatAbsoluteR0
.16d6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.16d7					EXPUnaryAsc:
.16d7	20 e4 15	jsr $15e4			jsr 	EXPEvalString 					; string to R0, zTemp0
.16da	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.16dd	b2 20		lda ($20)			lda 	(zTemp0) 						; length 0 ?
.16df	f0 06		beq $16e7			beq 	_EXAZero 						; if so return 0
.16e1	5a		phy				phy 									; otherwise get first character
.16e2	a0 01		ldy #$01			ldy 	#1
.16e4	b1 20		lda ($20),y			lda 	(zTemp0),y
.16e6	7a		ply				ply
.16e7					_EXAZero:
.16e7	a2 0e		ldx #$0e			ldx 	#IFR0
.16e9	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.16ec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.16ed					EXPUnaryChr:
.16ed	20 d8 15	jsr $15d8			jsr 	EXPEvalInteger8 				; expr
.16f0	48		pha				pha 									; push on stack
.16f1	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.16f4	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.16f6	20 1e 26	jsr $261e			jsr 	StringTempAllocate
.16f9	68		pla				pla
.16fa	20 53 26	jsr $2653			jsr 	StringTempWrite
.16fd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.16fe					EXPUnaryDec:
.16fe	20 e4 15	jsr $15e4			jsr 	EXPEvalString 					; string to R0, zTemp0
.1701	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.1704	5a		phy				phy
.1705	a2 0e		ldx #$0e			ldx 	#IFR0 							; zero the result
.1707	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.170a	b2 20		lda ($20)			lda 	(zTemp0)						; read the length to X
.170c	f0 3b		beq $1749			beq 	_EUDError 						; empty string
.170e	aa		tax				tax
.170f	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1711					_EUDLoop:
.1711	b1 20		lda ($20),y			lda 	(zTemp0),y 						; get next
.1713	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1715	90 02		bcc $1719			bcc 	_EUDNoCase
.1717	e9 20		sbc #$20			sbc 	#$20
.1719					_EUDNoCase:
.1719	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.171b	90 2c		bcc $1749			bcc 	_EUDError
.171d	c9 3a		cmp #$3a			cmp 	#'9'+1
.171f	90 0a		bcc $172b			bcc 	_EUDOkay
.1721	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1723	90 24		bcc $1749			bcc 	_EUDError
.1725	c9 47		cmp #$47			cmp 	#'F'+1
.1727	b0 20		bcs $1749			bcs 	_EUDError
.1729	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.172b					_EUDOkay:
.172b	29 0f		and #$0f			and 	#15 							; make constant
.172d	da		phx				phx
.172e	48		pha				pha
.172f	a2 0e		ldx #$0e			ldx 	#IFR0 							; multiply R0 x 16
.1731	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1734	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1737	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.173a	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.173d	68		pla				pla 									; pop constant and OR in
.173e	fa		plx				plx
.173f	05 0e		ora $0e				ora 	IFR0+IM0
.1741	85 0e		sta $0e				sta 	IFR0+IM0
.1743	c8		iny				iny 									; next
.1744	ca		dex				dex
.1745	d0 ca		bne $1711			bne 	_EUDLoop
.1747	7a		ply				ply
.1748	60		rts				rts
.1749					_EUDError:
.1749	4c ad 23	jmp $23ad		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.174c					EXPUnaryInlineDec:
.174c	4c 8b 23	jmp $238b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.174f					EXPUnaryPeek:
.174f	20 cc 15	jsr $15cc			jsr 	EXPEvalInteger16 				; number to R0
.1752	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.1755	b2 0e		lda ($0e)			lda 	(IFR0)
.1757	a2 0e		ldx #$0e			ldx 	#IFR0
.1759	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.175c	60		rts				rts
.175d					EXPUnaryDeek:
.175d	20 cc 15	jsr $15cc			jsr 	EXPEvalInteger16 				; number to R0
.1760	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.1763	5a		phy				phy
.1764	a0 01		ldy #$01			ldy 	#1
.1766	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1768	7a		ply				ply
.1769	48		pha				pha
.176a	b2 0e		lda ($0e)			lda 	(IFR0)
.176c	a2 0e		ldx #$0e			ldx 	#IFR0
.176e	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.1771	68		pla				pla
.1772	85 0f		sta $0f				sta 	IFR0+IM1
.1774	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1775					EXPUnaryNull:
.1775	20 f7 15	jsr $15f7			jsr 	EXPTermValueR0
.1778	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1779					EXPUnaryFrac:
.1779	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 					; number to R0
.177c	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.177f	20 7a 2b	jsr $2b7a			jsr 	IFloatFractionalR0
.1782	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1783					EXPUnaryInt:
.1783	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 					; number to R0
.1786	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.1789	20 d0 2b	jsr $2bd0			jsr 	IFloatIntegerR0
.178c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.178d					EXPUnaryLen:
.178d	20 e4 15	jsr $15e4			jsr 	EXPEvalString 					; string to R0, zTemp0
.1790	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.1793	b2 20		lda ($20)			lda 	(zTemp0)
.1795	a2 0e		ldx #$0e			ldx 	#IFR0
.1797	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.179a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.179b					EXPUnaryParenthesis:
.179b	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 					; number to R0
.179e	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.17a1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.17a2					EXPUnaryRnd:
.17a2	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 				; number to R0
.17a5	20 28 25	jsr $2528			jsr 	ERRCheckRParen 				; )
.17a8	a2 0e		ldx #$0e			ldx 	#IFR0
.17aa	20 c1 17	jsr $17c1			jsr 	EXPLoadInRandom
.17ad	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.17af	85 11		sta $11				sta 	IFR0+IExp
.17b1	60		rts				rts
.17b2					ExpUnaryRand:
.17b2	20 c5 15	jsr $15c5			jsr 	EXPEvalInteger 				; integer to R0
.17b5	20 28 25	jsr $2528			jsr 	ERRCheckRParen 				; )
.17b8	a2 12		ldx #$12			ldx 	#IFR1 						; random to R1
.17ba	20 c1 17	jsr $17c1			jsr 	EXPLoadInRandom
.17bd	20 41 2a	jsr $2a41			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.17c0	60		rts				rts
.17c1					EXPLoadInRandom:
.17c1	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.17c4	20 d6 17	jsr $17d6			jsr 	EXPRandom32
.17c7	95 00		sta $00,x			sta 	IM0,x
.17c9	20 d6 17	jsr $17d6			jsr 	EXPRandom32
.17cc	95 01		sta $01,x			sta 	IM1,x
.17ce	20 d6 17	jsr $17d6			jsr 	EXPRandom32
.17d1	29 7f		and #$7f			and 	#$7F
.17d3	95 02		sta $02,x			sta 	IM2,x
.17d5	60		rts				rts
.17d6					EXPRandom32:
.17d6	5a		phy				phy
.17d7	a0 08		ldy #$08			ldy 	#8
.17d9	ad 0c 05	lda $050c			lda 	EXPSeed+0
.17dc	0d 0d 05	ora $050d			ora 	EXPSeed+1
.17df	0d 0e 05	ora $050e			ora 	EXPSeed+2
.17e2	0d 0f 05	ora $050f			ora 	EXPSeed+3
.17e5	d0 08		bne $17ef			bne 	_EXPRNoReset
.17e7	ee 0c 05	inc $050c			inc 	EXPSeed+0
.17ea	a0 10		ldy #$10			ldy 	#16
.17ec	8c 0f 05	sty $050f			sty 	EXPSeed+3
.17ef					_EXPRNoReset:
.17ef	ad 0c 05	lda $050c			lda 	EXPSeed+0
.17f2					_EXPRLoop:
.17f2	0a		asl a				asl		a
.17f3	2e 0d 05	rol $050d			rol 	EXPSeed+1
.17f6	2e 0e 05	rol $050e			rol 	EXPSeed+2
.17f9	2e 0f 05	rol $050f			rol 	EXPSeed+3
.17fc	90 02		bcc $1800			bcc 	_EXPRNoEOR
.17fe	49 c5		eor #$c5			eor 	#$C5
.1800					_EXPRNoEOR:
.1800	88		dey				dey
.1801	d0 ef		bne $17f2			bne 	_EXPRLoop
.1803	8d 0c 05	sta $050c			sta 	EXPSeed+0
.1806	7a		ply				ply
.1807	60		rts				rts
.050c					EXPSeed:
>050c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1808					EXPUnarySgn:
.1808	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 					; number to R0
.180b	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.180e	a2 12		ldx #$12			ldx 	#IFR1 							; copy to R1
.1810	20 72 2e	jsr $2e72			jsr 	IFloatCopyToRegister
.1813	a2 0e		ldx #$0e			ldx 	#IFR0 							; R0 = 0
.1815	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.1818	a2 12		ldx #$12			ldx 	#IFR1
.181a	20 9e 2b	jsr $2b9e			jsr 	IFloatCompare 					; compare R1 vs 0.
.181d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.181e					EXPUnarySqr:
.181e	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 					; number to R0
.1821	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.1824	20 1c 2b	jsr $2b1c			jsr 	IFloatSquareRootR0 				; square root.
.1827	b0 01		bcs $182a			bcs 	_EUSValue
.1829	60		rts				rts
.182a					_EUSValue:
.182a	4c 9c 23	jmp $239c		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.182d					EXPUnaryHex:
.182d	20 c5 15	jsr $15c5			jsr 	EXPEvalInteger 					; expr
.1830	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.1833	5a		phy				phy
.1834	a9 10		lda #$10			lda 	#16
.1836	20 71 2c	jsr $2c71			jsr 	IFloatIntegerToStringR0
.1839	80 0a		bra $1845			bra 	EUSMain
.183b					EXPUnaryStr:
.183b	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 					; expr
.183e	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.1841	5a		phy				phy
.1842	20 cd 2c	jsr $2ccd			jsr 	IFloatFloatToStringR0 			; convert to string
.1845					EUSMain:
.1845	b0 18		bcs $185f			bcs 	_EUSError
.1847	86 20		stx $20				stx 	zTemp0 							; save string address
.1849	84 21		sty $21				sty 	zTemp0+1
.184b	48		pha				pha 									; save count
.184c	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.184e	20 1e 26	jsr $261e			jsr 	StringTempAllocate
.1851	fa		plx				plx 									; count in X
.1852	a0 00		ldy #$00			ldy 	#0
.1854					_EUSCopy:
.1854	b1 20		lda ($20),y			lda 	(zTemp0),y
.1856	c8		iny				iny
.1857	20 53 26	jsr $2653			jsr 	StringTempWrite
.185a	ca		dex				dex
.185b	d0 f7		bne $1854			bne	 	_EUSCopy
.185d	7a		ply				ply
.185e	60		rts				rts
.185f					_EUSError:
.185f	4c 9c 23	jmp $239c		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1862					EXPUnaryInlineString:
.1862	18		clc				clc 								; physical address -> IM0,1
.1863	98		tya				tya
.1864	65 1e		adc $1e				adc 	codePtr
.1866	85 0e		sta $0e				sta 	IFR0+IM0
.1868	a5 1f		lda $1f				lda 	codePtr+1
.186a	69 00		adc #$00			adc 	#0
.186c	85 0f		sta $0f				sta 	IFR0+IM1
.186e	64 10		stz $10				stz 	IFR0+IM2 					; fill in rest
.1870	a9 80		lda #$80			lda 	#$80
.1872	85 11		sta $11				sta 	IFR0+IExp
.1874	98		tya				tya	 								; skip over it.
.1875	38		sec				sec
.1876	71 1e		adc ($1e),y			adc 	(codePtr),y
.1878	a8		tay				tay
.1879	60		rts				rts
.187a					_EXPUISRange:
.187a	4c 9c 23	jmp $239c		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.187d					EXPUnaryLeft:
.187d	20 c3 18	jsr $18c3			jsr 	EXPCommonStart 					; <string>,
.1880	48		pha				pha 									; save string address on stack
.1881	da		phx				phx
.1882	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1884	48		pha				pha
.1885	20 d8 15	jsr $15d8			jsr 	EXPEvalInteger8 				; characters to do
.1888	80 44		bra $18ce			bra 	EXPSubstringCommon
.188a					EXPUnaryRight:
.188a	20 c3 18	jsr $18c3			jsr 	EXPCommonStart 					; <string>,
.188d	48		pha				pha 									; save string address on stack
.188e	da		phx				phx
.188f	b2 0e		lda ($0e)			lda 	(IFR0) 							; the string length => stack.
.1891	48		pha				pha
.1892	20 d8 15	jsr $15d8			jsr 	EXPEvalInteger8 				; characters to do
.1895	85 20		sta $20				sta 	zTemp0 							; calculate length - required, start point.
.1897	68		pla				pla
.1898	38		sec				sec
.1899	e5 20		sbc $20				sbc 	zTemp0
.189b	b0 02		bcs $189f			bcs 	_EUROffLeft
.189d	a9 00		lda #$00			lda 	#0
.189f					_EUROffLeft:
.189f	48		pha				pha 									; start pos
.18a0	a9 ff		lda #$ff			lda 	#255
.18a2	80 2a		bra $18ce			bra 	EXPSubstringCommon
.18a4					EXPUnaryMid:
.18a4	20 c3 18	jsr $18c3			jsr 	EXPCommonStart 					; <string>,
.18a7	48		pha				pha 									; save string address on stack
.18a8	da		phx				phx
.18a9	20 d8 15	jsr $15d8			jsr 	EXPEvalInteger8 				; characters start
.18ac	f0 12		beq $18c0			beq 	_EUSError 						; 1 is left
.18ae	3a		dec a				dec 	a 								; zero based.
.18af	48		pha				pha
.18b0	b1 1e		lda ($1e),y			lda 	(codePtr),y 					; comma follows
.18b2	c9 99		cmp #$99			cmp 	#PR_COMMA
.18b4	f0 04		beq $18ba			beq 	_EUMLength 						; if so m is provided
.18b6	a9 ff		lda #$ff			lda 	#255 							; default m
.18b8	80 14		bra $18ce			bra 	EXPSubstringCommon
.18ba					_EUMLength:
.18ba	c8		iny				iny 									; consume comma
.18bb	20 d8 15	jsr $15d8			jsr 	EXPEvalInteger8 				; characters to do
.18be	80 0e		bra $18ce			bra 	EXPSubstringCommon
.18c0					_EUSError:
.18c0	4c ad 23	jmp $23ad		jmp	ErrorV_value
.18c3					EXPCommonStart:
.18c3	20 e4 15	jsr $15e4			jsr 	EXPEvalString
.18c6	20 30 25	jsr $2530			jsr 	ERRCheckComma
.18c9	a5 0e		lda $0e				lda 	IFR0+IM0
.18cb	a6 0f		ldx $0f				ldx 	IFR0+IM1
.18cd	60		rts				rts
.18ce					EXPSubstringCommon:
.18ce	85 22		sta $22				sta 	zTemp1 							; count to do in zTemp1.
.18d0	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; check right bracket.
.18d3	68		pla				pla 									; start position
.18d4	85 23		sta $23				sta 	zTemp1+1 						; save in zTemp1+1
.18d6	fa		plx				plx 									; get string address to zTemp2.
.18d7	86 25		stx $25				stx 	zTemp2+1
.18d9	68		pla				pla
.18da	85 24		sta $24				sta 	zTemp2
.18dc	38		sec				sec 									; length - start is the max count of chars
.18dd	b2 24		lda ($24)			lda 	(zTemp2)
.18df	e5 23		sbc $23				sbc 	zTemp1+1
.18e1	c5 22		cmp $22				cmp 	zTemp1 							; if available < count
.18e3	b0 02		bcs $18e7			bcs 	_EXPSSNoTrim
.18e5	85 22		sta $22				sta 	zTemp1 							; update count with available
.18e7					_EXPSSNoTrim:
.18e7	a5 22		lda $22				lda 	zTemp1 							; chars required.
.18e9	20 1e 26	jsr $261e			jsr 	StringTempAllocate 				; allocate memory for it.
.18ec	a5 22		lda $22				lda 	zTemp1 							; zero length string
.18ee	f0 15		beq $1905			beq 	_EXPSSExit
.18f0	a5 23		lda $23				lda 	zTemp1+1 						; if length >= start exit
.18f2	d2 24		cmp ($24)			cmp 	(zTemp2)
.18f4	b0 0f		bcs $1905			bcs 	_EXPSSExit
.18f6	5a		phy				phy
.18f7	a4 23		ldy $23				ldy 	zTemp1+1 						; start position
.18f9	c8		iny				iny 									; +1 for the length byte
.18fa					_EXPSSCopy:
.18fa	b1 24		lda ($24),y			lda 	(zTemp2),y
.18fc	20 53 26	jsr $2653			jsr 	StringTempWrite
.18ff	c8		iny				iny
.1900	c6 22		dec $22				dec 	zTemp1
.1902	d0 f6		bne $18fa			bne 	_EXPSSCopy
.1904	7a		ply				ply
.1905					_EXPSSExit:
.1905	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1906					EXPUnaryVal:
.1906	20 e4 15	jsr $15e4			jsr 	EXPEvalString 					; string to R0, zTemp0
.1909	20 28 25	jsr $2528			jsr 	ERRCheckRParen 					; )
.190c	5a		phy				phy
.190d	18		clc				clc
.190e	a5 20		lda $20				lda		zTemp0 							; point XY to the text
.1910	69 01		adc #$01			adc 	#1
.1912	aa		tax				tax
.1913	a5 21		lda $21				lda 	zTemp0+1
.1915	69 00		adc #$00			adc 	#0
.1917	a8		tay				tay
.1918	b2 20		lda ($20)			lda 	(zTemp0) 						; get length.
.191a	20 34 2d	jsr $2d34			jsr 	IFloatStringToFloatR0 			; do conversion
.191d	b0 02		bcs $1921			bcs 	_EUVError
.191f	7a		ply				ply
.1920	60		rts				rts
.1921					_EUVError:
.1921	4c ad 23	jmp $23ad		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1924					BinaryPrecedence:
>1924	02					.byte	 2	; $ef =
>1925	02					.byte	 2	; $f0 <>
>1926	02					.byte	 2	; $f1 <=
>1927	02					.byte	 2	; $f2 <
>1928	02					.byte	 2	; $f3 >=
>1929	02					.byte	 2	; $f4 >
>192a	01					.byte	 1	; $f5 XOR
>192b	01					.byte	 1	; $f6 OR
>192c	01					.byte	 1	; $f7 AND
>192d	04					.byte	 4	; $f8 DIV
>192e	04					.byte	 4	; $f9 MOD
>192f	04					.byte	 4	; $fa <<
>1930	04					.byte	 4	; $fb >>
>1931	04					.byte	 4	; $fc /
>1932	04					.byte	 4	; $fd *
>1933	03					.byte	 3	; $fe -
>1934	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1935					StructureOffsets:
>1935	01					.byte	1  	; $80 REPEAT
>1936	ff					.byte	255	; $81 UNTIL
>1937	01					.byte	1  	; $82 WHILE
>1938	ff					.byte	255	; $83 WEND
>1939	01					.byte	1  	; $84 IF
>193a	ff					.byte	255	; $85 ENDIF
>193b	01					.byte	1  	; $86 DO
>193c	ff					.byte	255	; $87 LOOP
>193d	01					.byte	1  	; $88 PROC
>193e	ff					.byte	255	; $89 ENDPROC
>193f	01					.byte	1  	; $8a FOR
>1940	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1941					StandardTokens:
>1941	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1948	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>194e	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1954	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1959	02 49 46				.byte	$02,$49,$46                             	; $84 if
>195c	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1962	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1965	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>196a	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>196f	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1977	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>197b	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1980	00					.byte	$00                                     	; $8c [[end]]
>1981	00					.byte	$00                                     	; $8d [[shift]]
>1982	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1987	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>198c	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>198f	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1994	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1998	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>199e	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>19a4	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>19a9	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>19ad	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>19b1	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>19b6	01 2c					.byte	$01,$2c                                 	; $99 ,
>19b8	01 3b					.byte	$01,$3b                                 	; $9a ;
>19ba	01 3a					.byte	$01,$3a                                 	; $9b :
>19bc	01 27					.byte	$01,$27                                 	; $9c '
>19be	01 29					.byte	$01,$29                                 	; $9d )
>19c0	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>19c4	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>19ca	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>19ce	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>19d2	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>19d7	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>19db	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>19e2	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>19e7	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>19ec	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>19f1	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>19f6	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>19fb	00					.byte	0											; $aa
>19fc	00					.byte	0											; $ab
>19fd	00					.byte	0											; $ac
>19fe	00					.byte	0											; $ad
>19ff	00					.byte	0											; $ae
>1a00	00					.byte	0											; $af
>1a01	00					.byte	0											; $b0
>1a02	00					.byte	0											; $b1
>1a03	00					.byte	0											; $b2
>1a04	00					.byte	0											; $b3
>1a05	00					.byte	0											; $b4
>1a06	00					.byte	0											; $b5
>1a07	00					.byte	0											; $b6
>1a08	00					.byte	0											; $b7
>1a09	00					.byte	0											; $b8
>1a0a	00					.byte	0											; $b9
>1a0b	00					.byte	0											; $ba
>1a0c	00					.byte	0											; $bb
>1a0d	00					.byte	0											; $bc
>1a0e	00					.byte	0											; $bd
>1a0f	00					.byte	0											; $be
>1a10	00					.byte	0											; $bf
>1a11	00					.byte	0											; $c0
>1a12	00					.byte	0											; $c1
>1a13	00					.byte	0											; $c2
>1a14	00					.byte	0											; $c3
>1a15	00					.byte	0											; $c4
>1a16	00					.byte	0											; $c5
>1a17	00					.byte	0											; $c6
>1a18	00					.byte	0											; $c7
>1a19	00					.byte	0											; $c8
>1a1a	00					.byte	0											; $c9
>1a1b	00					.byte	0											; $ca
>1a1c	00					.byte	0											; $cb
>1a1d	00					.byte	0											; $cc
>1a1e	00					.byte	0											; $cd
>1a1f	00					.byte	0											; $ce
>1a20	00					.byte	0											; $cf
>1a21	00					.byte	0											; $d0
>1a22	00					.byte	0											; $d1
>1a23	00					.byte	0											; $d2
>1a24	00					.byte	0											; $d3
>1a25	00					.byte	0											; $d4
>1a26	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1a2c	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1a32	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1a3a	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1a41	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1a47	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1a4d	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1a52	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1a57	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1a5c	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1a61	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1a66	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1a6c	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1a71	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1a79	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1a80	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1a85	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1a8a	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1a90	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1a95	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1a9b	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1aa0	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1aa6	01 28					.byte	$01,$28                                 	; $eb (
>1aa8	01 24					.byte	$01,$24                                 	; $ec $
>1aaa	00					.byte	$00                                     	; $ed [[decimal]]
>1aab	00					.byte	$00                                     	; $ee [[string]]
>1aac	01 3d					.byte	$01,$3d                                 	; $ef =
>1aae	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1ab1	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1ab4	01 3c					.byte	$01,$3c                                 	; $f2 <
>1ab6	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1ab9	01 3e					.byte	$01,$3e                                 	; $f4 >
>1abb	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1abf	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1ac2	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1ac6	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1aca	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1ace	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1ad1	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1ad4	01 2f					.byte	$01,$2f                                 	; $fc /
>1ad6	01 2a					.byte	$01,$2a                                 	; $fd *
>1ad8	01 2d					.byte	$01,$2d                                 	; $fe -
>1ada	01 2b					.byte	$01,$2b                                 	; $ff +
>1adc	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1add					VectorTable:
>1add	7f 22					.word	Command_REPEAT           ; $80 REPEAT
>1adf	88 22					.word	Command_UNTIL            ; $81 UNTIL
>1ae1	60 23					.word	Command_WHILE            ; $82 WHILE
>1ae3	7f 23					.word	Command_WEND             ; $83 WEND
>1ae5	57 22					.word	IfCommand                ; $84 IF
>1ae7	7e 22					.word	EndIf                    ; $85 ENDIF
>1ae9	f4 20					.word	Command_DO               ; $86 DO
>1aeb	0c 21					.word	Command_LOOP             ; $87 LOOP
>1aed	fa 13					.word	NoExec08                 ; $88 PROC
>1aef	e8 20					.word	Command_ENDPROC          ; $89 ENDPROC
>1af1	15 21					.word	Command_FOR              ; $8a FOR
>1af3	a2 21					.word	Command_NEXT             ; $8b NEXT
>1af5	80 13					.word	RUNEndOfLine             ; $8c [[END]]
>1af7	dc 13					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1af9	77 22					.word	ElseCode                 ; $8e ELSE
>1afb	fa 13					.word	NoExec01                 ; $8f THEN
>1afd	fa 13					.word	NoExec02                 ; $90 TO
>1aff	fa 13					.word	NoExec03                 ; $91 STEP
>1b01	16 12					.word	CommandLET               ; $92 LET
>1b03	b1 11					.word	Command_Print            ; $93 PRINT
>1b05	a5 26					.word	NotImplemented           ; $94 INPUT
>1b07	ac 20					.word	Command_CALL             ; $95 CALL
>1b09	e5 13					.word	Command_Sys              ; $96 SYS
>1b0b	67 13					.word	Command_REM              ; $97 REM
>1b0d	fd 20					.word	Command_EXIT             ; $98 EXIT
>1b0f	fa 13					.word	NoExec04                 ; $99 ,
>1b11	fa 13					.word	NoExec05                 ; $9a ;
>1b13	fa 13					.word	NoExec06                 ; $9b :
>1b15	67 13					.word	Command_REM2             ; $9c '
>1b17	fa 13					.word	NoExec07                 ; $9d )
>1b19	6b 10					.word	CommandDIM               ; $9e DIM
>1b1b	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1b1d	5e 13					.word	Command_NEW              ; $a0 NEW
>1b1f	74 13					.word	Command_RUN              ; $a1 RUN
>1b21	e2 13					.word	Command_STOP             ; $a2 STOP
>1b23	df 13					.word	Command_END              ; $a3 END
>1b25	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1b27	8e 12					.word	Command_LIST             ; $a5 LIST
>1b29	a5 26					.word	NotImplemented           ; $a6 SAVE
>1b2b	a5 26					.word	NotImplemented           ; $a7 LOAD
>1b2d	8a 11					.word	Command_Poke             ; $a8 POKE
>1b2f	87 11					.word	Command_Doke             ; $a9 DOKE
>1b31	a5 26					.word	NotImplemented           ; $aa
>1b33	a5 26					.word	NotImplemented           ; $ab
>1b35	a5 26					.word	NotImplemented           ; $ac
>1b37	a5 26					.word	NotImplemented           ; $ad
>1b39	a5 26					.word	NotImplemented           ; $ae
>1b3b	a5 26					.word	NotImplemented           ; $af
>1b3d	a5 26					.word	NotImplemented           ; $b0
>1b3f	a5 26					.word	NotImplemented           ; $b1
>1b41	a5 26					.word	NotImplemented           ; $b2
>1b43	a5 26					.word	NotImplemented           ; $b3
>1b45	a5 26					.word	NotImplemented           ; $b4
>1b47	a5 26					.word	NotImplemented           ; $b5
>1b49	a5 26					.word	NotImplemented           ; $b6
>1b4b	a5 26					.word	NotImplemented           ; $b7
>1b4d	a5 26					.word	NotImplemented           ; $b8
>1b4f	a5 26					.word	NotImplemented           ; $b9
>1b51	a5 26					.word	NotImplemented           ; $ba
>1b53	a5 26					.word	NotImplemented           ; $bb
>1b55	a5 26					.word	NotImplemented           ; $bc
>1b57	a5 26					.word	NotImplemented           ; $bd
>1b59	a5 26					.word	NotImplemented           ; $be
>1b5b	a5 26					.word	NotImplemented           ; $bf
>1b5d	a5 26					.word	NotImplemented           ; $c0
>1b5f	a5 26					.word	NotImplemented           ; $c1
>1b61	a5 26					.word	NotImplemented           ; $c2
>1b63	a5 26					.word	NotImplemented           ; $c3
>1b65	a5 26					.word	NotImplemented           ; $c4
>1b67	a5 26					.word	NotImplemented           ; $c5
>1b69	a5 26					.word	NotImplemented           ; $c6
>1b6b	a5 26					.word	NotImplemented           ; $c7
>1b6d	a5 26					.word	NotImplemented           ; $c8
>1b6f	a5 26					.word	NotImplemented           ; $c9
>1b71	a5 26					.word	NotImplemented           ; $ca
>1b73	a5 26					.word	NotImplemented           ; $cb
>1b75	a5 26					.word	NotImplemented           ; $cc
>1b77	a5 26					.word	NotImplemented           ; $cd
>1b79	a5 26					.word	NotImplemented           ; $ce
>1b7b	a5 26					.word	NotImplemented           ; $cf
>1b7d	a5 26					.word	NotImplemented           ; $d0
>1b7f	a5 26					.word	NotImplemented           ; $d1
>1b81	a5 26					.word	NotImplemented           ; $d2
>1b83	a5 26					.word	NotImplemented           ; $d3
>1b85	a5 26					.word	NotImplemented           ; $d4
>1b87	5d 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1b89	4f 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1b8b	8a 18					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1b8d	7d 18					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1b8f	a4 18					.word	EXPUnaryMid              ; $d9 MID$(
>1b91	3b 18					.word	EXPUnaryStr              ; $da STR$(
>1b93	06 19					.word	EXPUnaryVal              ; $db VAL(
>1b95	08 18					.word	EXPUnarySgn              ; $dc SGN(
>1b97	cd 16					.word	EXPUnaryAbs              ; $dd ABS(
>1b99	8d 17					.word	EXPUnaryLen              ; $de LEN(
>1b9b	1e 18					.word	EXPUnarySqr              ; $df SQR(
>1b9d	ed 16					.word	EXPUnaryChr              ; $e0 CHR$(
>1b9f	d7 16					.word	EXPUnaryAsc              ; $e1 ASC(
>1ba1	a5 26					.word	NotImplemented           ; $e2 INKEY$(
>1ba3	a5 26					.word	NotImplemented           ; $e3 EVENT(
>1ba5	a5 26					.word	NotImplemented           ; $e4 TIME
>1ba7	83 17					.word	EXPUnaryInt              ; $e5 INT(
>1ba9	79 17					.word	EXPUnaryFrac             ; $e6 FRAC(
>1bab	fe 16					.word	EXPUnaryDec              ; $e7 DEC(
>1bad	2d 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1baf	a2 17					.word	EXPUnaryRnd              ; $e9 RND(
>1bb1	b2 17					.word	ExpUnaryRand             ; $ea RAND(
>1bb3	9b 17					.word	EXPUnaryParenthesis      ; $eb (
>1bb5	75 17					.word	EXPUnaryNull             ; $ec $
>1bb7	4c 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1bb9	62 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1bbb	b7 14					.word	EXPCompareEqual          ; $ef =
>1bbd	d2 14					.word	EXPCompareNotEqual       ; $f0 <>
>1bbf	db 14					.word	EXPCompareLessEqual      ; $f1 <=
>1bc1	c0 14					.word	EXPCompareLess           ; $f2 <
>1bc3	e4 14					.word	EXPCompareGreaterEqual   ; $f3 >=
>1bc5	c9 14					.word	EXPCompareGreater        ; $f4 >
>1bc7	64 14					.word	EXPBinXor                ; $f5 XOR
>1bc9	58 14					.word	EXPBinOr                 ; $f6 OR
>1bcb	4c 14					.word	EXPBinAnd                ; $f7 AND
>1bcd	24 14					.word	EXPBinIDiv               ; $f8 DIV
>1bcf	35 14					.word	EXPBinIMod               ; $f9 MOD
>1bd1	2f 15					.word	EXPBinLeft               ; $fa <<
>1bd3	37 15					.word	EXPBinRight              ; $fb >>
>1bd5	18 14					.word	EXPBinFDiv               ; $fc /
>1bd7	0f 14					.word	EXPBinMul                ; $fd *
>1bd9	06 14					.word	EXPBinSub                ; $fe -
>1bdb	fd 13					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1bdd					TOKDetokenise:
.1bdd	86 24		stx $24				stx 	zTemp2 						; save tokenised code in zTemp2
.1bdf	84 25		sty $25				sty 	zTemp2+1
.1be1	9c 12 05	stz $0512			stz		TOKLastCharacter 			; clear last character
.1be4					_TOKDLoop:
.1be4	20 13 1c	jsr $1c13			jsr 	TOKDGet 					; get next
.1be7	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1be9	f0 26		beq $1c11			beq 	_TOKDExit
.1beb	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1bed	f0 1d		beq $1c0c			beq 	_TOKDDataItem
.1bef	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1bf1	f0 19		beq $1c0c			beq 	_TOKDDataItem
.1bf3	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1bf5	10 05		bpl $1bfc			bpl 	_TOKDNotToken
.1bf7	20 db 1c	jsr $1cdb			jsr 	TOKDToken 					; token to text.
.1bfa	80 e8		bra $1be4			bra 	_TOKDLoop
.1bfc					_TOKDNotToken:
.1bfc	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1bfe	90 05		bcc $1c05			bcc 	_TOKDNotIdentifier
.1c00	20 4e 1c	jsr $1c4e			jsr 	TOKDIdentifier
.1c03	80 df		bra $1be4			bra 	_TOKDLoop
.1c05					_TOKDNotIdentifier:
.1c05	a0 0a		ldy #$0a			ldy 	#10
.1c07	20 97 1c	jsr $1c97			jsr 	TOKDInteger
.1c0a	80 d8		bra $1be4			bra 	_TOKDLoop
.1c0c					_TOKDDataItem:
.1c0c	20 29 1c	jsr $1c29			jsr 	TOKDDataItem
.1c0f	80 d3		bra $1be4			bra 	_TOKDLoop
.1c11					_TOKDExit:
.1c11	18		clc				clc
.1c12	60		rts				rts
.1c13	b2 24		lda ($24)	TOKDGet:lda 	(zTemp2)
.1c15	e6 24		inc $24				inc 	zTemp2
.1c17	d0 02		bne $1c1b			bne 	_TKDGExit
.1c19	e6 25		inc $25				inc 	zTemp2+1
.1c1b					_TKDGExit:
.1c1b	60		rts				rts
.1c1c					TOKDOutput:
.1c1c	8d 12 05	sta $0512			sta 	TOKLastCharacter
.1c1f	6c 10 05	jmp ($0510)			jmp 	(TOKOutputMethod)
.1c22					TOKSetDetokeniseOutput:
.1c22	8e 10 05	stx $0510			stx 	TOKOutputMethod
.1c25	8c 11 05	sty $0511			sty 	TOKOutputMethod+1
.1c28	60		rts				rts
.0510					TOKOutputMethod:
>0510							.fill 	2
.0512					TOKLastCharacter:
>0512							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1c29					TOKDDataItem:
.1c29	a8		tay				tay 								; type in Y
.1c2a	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1c2c	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1c2e	f0 02		beq $1c32			beq 	_TOKDDIsString
.1c30	a9 2e		lda #$2e			lda 	#'.'
.1c32					_TOKDDIsString:
.1c32	20 1c 1c	jsr $1c1c			jsr 	TOKDOutput 					; dump it
.1c35	20 13 1c	jsr $1c13			jsr 	TOKDGet 					; get length into X
.1c38	aa		tax				tax
.1c39					_TOKDDOutput:
.1c39	ca		dex				dex 								; are we complete
.1c3a	30 08		bmi $1c44			bmi 	_TOKDDEnd
.1c3c	20 13 1c	jsr $1c13			jsr 	TOKDGet 					; get character and output it
.1c3f	20 1c 1c	jsr $1c1c			jsr 	TOKDOutput
.1c42	80 f5		bra $1c39			bra 	_TOKDDOutput
.1c44					_TOKDDEnd:
.1c44	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1c46	d0 05		bne $1c4d			bne 	_TOKDDNotString
.1c48	a9 22		lda #$22			lda 	#'"'
.1c4a	20 1c 1c	jsr $1c1c			jsr 	TOKDOutput
.1c4d					_TOKDDNotString:
.1c4d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1c4e					TOKDIdentifier:
.1c4e	a0 ff		ldy #$ff			ldy 	#$FF
.1c50	8c 13 05	sty $0513			sty 	TOKDIFirstChar
.1c53					_TOKDLoop:
.1c53	a8		tay				tay 								; token in Y
.1c54	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1c56	c0 64		cpy #$64			cpy 	#$64
.1c58	f0 11		beq $1c6b			beq 	_TOKDIOutput
.1c5a	a9 5f		lda #$5f			lda 	#'_'
.1c5c	c0 65		cpy #$65			cpy 	#$65
.1c5e	f0 0b		beq $1c6b			beq 	_TOKDIOutput
.1c60	98		tya				tya 								; handle a-z
.1c61	18		clc				clc
.1c62	69 21		adc #$21			adc	 	#$21
.1c64	c0 5a		cpy #$5a			cpy 	#$5A
.1c66	90 03		bcc $1c6b			bcc 	_TOKDIOutput
.1c68	38		sec				sec 								; handle 0-9
.1c69	e9 4b		sbc #$4b			sbc 	#$4B
.1c6b					_TOKDIOutput:
.1c6b	2c 13 05	bit $0513			bit 	TOKDIFirstChar
.1c6e	10 08		bpl $1c78			bpl 	_TOKDINoSpacing
.1c70	48		pha				pha
.1c71	20 0d 1d	jsr $1d0d			jsr 	TOKDSpacing
.1c74	9c 13 05	stz $0513			stz 	TOKDIFirstChar
.1c77	68		pla				pla
.1c78					_TOKDINoSpacing:
.1c78	20 1c 1c	jsr $1c1c			jsr 	TOKDOutput
.1c7b	20 13 1c	jsr $1c13			jsr 	TOKDGet 					; get next token
.1c7e	c9 7c		cmp #$7c			cmp 	#$7C
.1c80	90 d1		bcc $1c53			bcc 	_TOKDLoop
.1c82	f0 12		beq $1c96			beq 	_TOKDIExit 					; it's a number, no tail.
.1c84	4a		lsr a				lsr 	a 							; string ?
.1c85	90 07		bcc $1c8e			bcc 	_TOKDICheckArray
.1c87	48		pha				pha
.1c88	a9 24		lda #$24			lda 	#"$"
.1c8a	20 1c 1c	jsr $1c1c			jsr 	TOKDOutput
.1c8d	68		pla				pla
.1c8e					_TOKDICheckArray:
.1c8e	4a		lsr a				lsr 	a 							; array ?
.1c8f	90 05		bcc $1c96			bcc 	_TOKDIExit
.1c91	a9 28		lda #$28			lda 	#"("
.1c93	20 1c 1c	jsr $1c1c			jsr 	TOKDOutput
.1c96					_TOKDIExit:
.1c96	60		rts				rts
.0513					TOKDIFirstChar:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1c97					TOKDInteger:
.1c97	5a		phy				phy 								; save base
.1c98	a2 0e		ldx #$0e			ldx 	#IFR0 						; set into R0
.1c9a	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.1c9d					_TOKDILoop:
.1c9d	b2 24		lda ($24)			lda 	(zTemp2) 					; followed by a 00-3F
.1c9f	c9 40		cmp #$40			cmp 	#$40
.1ca1	b0 1d		bcs $1cc0			bcs 	_TOKDIHaveInteger
.1ca3	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 << 6
.1ca5	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1ca8	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1cab	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1cae	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1cb1	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1cb4	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1cb7	20 13 1c	jsr $1c13			jsr 	TOKDGet 					; OR byte in.
.1cba	05 0e		ora $0e				ora 	IFR0+IM0
.1cbc	85 0e		sta $0e				sta 	IFR0+IM0
.1cbe	80 dd		bra $1c9d			bra 	_TOKDILoop
.1cc0					_TOKDIHaveInteger:
.1cc0	7a		ply				ply 								; restore base
.1cc1	98		tya				tya 								; base in A
.1cc2	20 71 2c	jsr $2c71			jsr 	IFloatIntegerToStringR0
.1cc5	86 20		stx $20				stx 	zTemp0
.1cc7	84 21		sty $21				sty 	zTemp0+1
.1cc9	b2 20		lda ($20)			lda 	(zTemp0)
.1ccb	20 0d 1d	jsr $1d0d			jsr 	TOKDSpacing 				; check spacing okay.
.1cce	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1cd0					_TOKDOutput:
.1cd0	b1 20		lda ($20),y			lda 	(zTemp0),y
.1cd2	20 1c 1c	jsr $1c1c			jsr 	TOKDOutput
.1cd5	c8		iny				iny
.1cd6	b1 20		lda ($20),y			lda 	(zTemp0),y
.1cd8	d0 f6		bne $1cd0			bne 	_TOKDOutput
.1cda	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1cdb					TOKDToken:
.1cdb	a2 41		ldx #$41			ldx 	#StandardTokens & $FF
.1cdd	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1cdf					_TOKDSearch:
.1cdf	86 20		stx $20				stx 	zTemp0 						; put table in zTemp0
.1ce1	84 21		sty $21				sty 	zTemp0+1
.1ce3	aa		tax				tax 								; token ID in X.
.1ce4					_TOKDFind:
.1ce4	ca		dex				dex 								; reached the start
.1ce5	10 0d		bpl $1cf4			bpl 	_TOKDFound
.1ce7	38		sec				sec 								; go to next entry
.1ce8	b2 20		lda ($20)			lda 	(zTemp0)
.1cea	65 20		adc $20				adc 	zTemp0
.1cec	85 20		sta $20				sta 	zTemp0
.1cee	90 f4		bcc $1ce4			bcc 	_TOKDFind
.1cf0	e6 21		inc $21				inc 	zTemp0+1
.1cf2	80 f0		bra $1ce4			bra 	_TOKDFind
.1cf4					_TOKDFound:
.1cf4	b2 20		lda ($20)			lda 	(zTemp0) 					; length to X
.1cf6	f0 14		beq $1d0c			beq 	_TOKDExit
.1cf8	aa		tax				tax
.1cf9	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1cfb	b1 20		lda ($20),y			lda 	(zTemp0),y 					; check spacing
.1cfd	20 0d 1d	jsr $1d0d			jsr 	TOKDSpacing
.1d00					_TOKDOutput:
.1d00	b1 20		lda ($20),y			lda 	(zTemp0),y
.1d02	20 67 20	jsr $2067			jsr 	TOKToLower
.1d05	20 1c 1c	jsr $1c1c			jsr 	TOKDOutput
.1d08	c8		iny				iny
.1d09	ca		dex				dex
.1d0a	d0 f4		bne $1d00			bne 	_TOKDOutput
.1d0c					_TOKDExit:
.1d0c	60		rts				rts
.1d0d					TOKDSpacing:
.1d0d	20 7e 20	jsr $207e			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1d10	90 0d		bcc $1d1f			bcc 	_TOKDSExit
.1d12	ad 12 05	lda $0512			lda 	TOKLastCharacter			; and last character also alphanumeric
.1d15	20 7e 20	jsr $207e			jsr 	TOKIsIdentifierElement
.1d18	90 05		bcc $1d1f			bcc 	_TOKDSExit
.1d1a	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1d1c	20 1c 1c	jsr $1c1c			jsr 	TOKDOutput
.1d1f					_TOKDSExit:
.1d1f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1d20					PGMDeleteLine:
.1d20	20 d3 1d	jsr $1dd3			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d23	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d25	ad 14 05	lda $0514			lda 	PGMBaseHigh
.1d28	85 23		sta $23				sta 	zTemp1+1
.1d2a					_PGMDLoop:
.1d2a	b2 22		lda ($22)			lda 	(zTemp1) 					; finished, not found ?
.1d2c	38		sec				sec
.1d2d	f0 3a		beq $1d69			beq 	_PGMDExit
.1d2f	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1d31	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d33	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d36	d0 08		bne $1d40			bne 	_PGMDNext
.1d38	c8		iny				iny
.1d39	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d3b	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1d3e	f0 0d		beq $1d4d			beq 	_PGMDDelete
.1d40					_PGMDNext:
.1d40	18		clc				clc
.1d41	b2 22		lda ($22)			lda 	(zTemp1)
.1d43	65 22		adc $22				adc 	zTemp1
.1d45	85 22		sta $22				sta 	zTemp1
.1d47	90 e1		bcc $1d2a			bcc 	_PGMDLoop
.1d49	e6 23		inc $23				inc 	zTemp1+1
.1d4b	80 dd		bra $1d2a			bra 	_PGMDLoop
.1d4d					_PGMDDelete:
.1d4d	b2 22		lda ($22)			lda 	(zTemp1) 					; offset to next in Y
.1d4f	a8		tay				tay
.1d50					_PGMDCopy:
.1d50	b1 22		lda ($22),y			lda 	(zTemp1),y 					; copy down.
.1d52	92 22		sta ($22)			sta 	(zTemp1)
.1d54	a5 22		lda $22				lda 	zTemp1 						; reached the end ?
.1d56	c5 20		cmp $20				cmp 	zTemp0
.1d58	d0 07		bne $1d61			bne 	_PGMDNext2
.1d5a	a5 23		lda $23				lda 	zTemp1+1
.1d5c	c5 21		cmp $21				cmp 	zTemp0+1
.1d5e	18		clc				clc
.1d5f	f0 08		beq $1d69			beq 	_PGMDExit
.1d61					_PGMDNext2:
.1d61	e6 22		inc $22				inc 	zTemp1 						; advance pointer.
.1d63	d0 eb		bne $1d50			bne 	_PGMDCopy
.1d65	e6 23		inc $23				inc 	zTemp1+1
.1d67	80 e7		bra $1d50			bra 	_PGMDCopy
.1d69					_PGMDExit:
.1d69	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1d6a					PGMInsertLine:
.1d6a	20 d3 1d	jsr $1dd3			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d6d	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d6f	ad 14 05	lda $0514			lda 	PGMBaseHigh
.1d72	85 23		sta $23				sta 	zTemp1+1
.1d74					_PGMILoop:
.1d74	b2 22		lda ($22)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1d76	f0 1c		beq $1d94			beq 	_PGMIInsert
.1d78	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1d7a	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d7c	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d7f	c8		iny				iny
.1d80	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d82	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1d85	b0 0d		bcs $1d94			bcs 	_PGMIInsert 				; insert here.
.1d87	18		clc				clc
.1d88	b2 22		lda ($22)			lda 	(zTemp1)
.1d8a	65 22		adc $22				adc 	zTemp1
.1d8c	85 22		sta $22				sta 	zTemp1
.1d8e	90 e4		bcc $1d74			bcc 	_PGMILoop
.1d90	e6 23		inc $23				inc 	zTemp1+1
.1d92	80 e0		bra $1d74			bra 	_PGMILoop
.1d94					_PGMIInsert:
.1d94	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1d97					_PGMIInsertLoop:
.1d97	b2 20		lda ($20)			lda 	(zTemp0)
.1d99	91 20		sta ($20),y			sta 	(zTemp0),y
.1d9b	a5 22		lda $22				lda 	zTemp1 						; reached insert point
.1d9d	c5 20		cmp $20				cmp 	zTemp0
.1d9f	d0 06		bne $1da7			bne 	_PGMINext
.1da1	a5 23		lda $23				lda 	zTemp1+1
.1da3	c5 21		cmp $21				cmp 	zTemp0+1
.1da5	f0 0a		beq $1db1			beq 	_PGMIInserted
.1da7					_PGMINext:
.1da7	a5 20		lda $20				lda 	zTemp0
.1da9	d0 02		bne $1dad			bne 	_PGMINoBorrow
.1dab	c6 21		dec $21				dec 	zTemp0+1
.1dad					_PGMINoBorrow:
.1dad	c6 20		dec $20				dec 	zTemp0
.1daf	80 e6		bra $1d97			bra 	_PGMIInsertLoop
.1db1					_PGMIInserted:
.1db1	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1db3					_PGMICopyLoop:
.1db3	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1db6	91 22		sta ($22),y			sta 	(zTemp1),y
.1db8	c8		iny				iny
.1db9	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1dbc	d0 f5		bne $1db3			bne 	_PGMICopyLoop
.1dbe	18		clc				clc
.1dbf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1dc0					PGMSetBaseAddress:
.1dc0	8e 14 05	stx $0514			stx 	PGMBaseHigh
.1dc3	8c 15 05	sty $0515			sty 	PGMEndMemoryHigh
.1dc6	60		rts				rts
.1dc7					PGMNewProgram:
.1dc7	64 20		stz $20				stz 	zTemp0						; copy base address to zTemp0
.1dc9	ad 14 05	lda $0514			lda 	PGMBaseHigh
.1dcc	85 21		sta $21				sta 	zTemp0+1
.1dce	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1dd0	92 20		sta ($20)			sta 	(zTemp0)
.1dd2	60		rts				rts
.1dd3					PGMEndProgram:
.1dd3	64 20		stz $20				stz 	zTemp0 						; copy base address to zTemp0
.1dd5	ad 14 05	lda $0514			lda 	PGMBaseHigh
.1dd8	85 21		sta $21				sta 	zTemp0+1
.1dda					_PGMEPLoop:
.1dda	b2 20		lda ($20)			lda 	(zTemp0)
.1ddc	f0 0b		beq $1de9			beq 	_PGMEPExit
.1dde	18		clc				clc
.1ddf	65 20		adc $20				adc 	zTemp0
.1de1	85 20		sta $20				sta 	zTemp0
.1de3	90 f5		bcc $1dda			bcc 	_PGMEPLoop
.1de5	e6 21		inc $21				inc 	zTemp0+1
.1de7	80 f1		bra $1dda			bra 	_PGMEPLoop
.1de9					_PGMEPExit:
.1de9	60		rts				rts
.0514					PGMBaseHigh:
>0514							.fill 	1
.0515					PGMEndMemoryHigh:
>0515							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1dea					TOKResetElement:
.1dea	9c 16 05	stz $0516			stz 	TOKElement
.1ded	60		rts				rts
.1dee					TOKWriteElement:
.1dee	da		phx				phx
.1def	ae 16 05	ldx $0516			ldx 	TOKElement
.1df2	9d 17 05	sta $0517,x			sta 	TOKElementText,x
.1df5	9e 18 05	stz $0518,x			stz 	TOKElementText+1,x
.1df8	fa		plx				plx
.1df9	ee 16 05	inc $0516			inc 	TOKElement
.1dfc	60		rts				rts
.0516					TOKElement:
>0516							.fill 	1
.0517					TOKElementText:
>0517							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1dfd					TOKTokeniseConstant:
.1dfd	a5 0e		lda $0e				lda 	IFR0+IM0 					; check > 64
.1dff	48		pha				pha 								; save on stack
.1e00	29 c0		and #$c0			and 	#$C0
.1e02	05 0f		ora $0f				ora 	IFR0+IM1
.1e04	05 10		ora $10				ora 	IFR0+IM2
.1e06	f0 10		beq $1e18			beq 	_TTCLess
.1e08	da		phx				phx
.1e09	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1e0b					_TTCShiftRight:
.1e0b	46 10		lsr $10				lsr 	IFR0+IM2
.1e0d	66 0f		ror $0f				ror 	IFR0+IM1
.1e0f	66 0e		ror $0e				ror 	IFR0+IM0
.1e11	ca		dex				dex
.1e12	d0 f7		bne $1e0b			bne 	_TTCShiftRight
.1e14	fa		plx				plx
.1e15	20 fd 1d	jsr $1dfd			jsr 	TOKTokeniseConstant
.1e18					_TTCLess:
.1e18	68		pla				pla
.1e19	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1e1b	20 ba 1e	jsr $1eba			jsr 	TOKWriteA
.1e1e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1e1f					TOKTokeniseDecimals:
.1e1f	20 ca 1e	jsr $1eca			jsr 	TOKGetNext 					; consume the .
.1e22	20 f4 1f	jsr $1ff4			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e25	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1e27	20 ba 1e	jsr $1eba			jsr 	TOKWriteA
.1e2a	20 2f 1e	jsr $1e2f			jsr 	TOKOutputElementBuffer 		; then the buffer
.1e2d	18		clc				clc
.1e2e	60		rts				rts
.1e2f					TOKOutputElementBuffer:
.1e2f	ad 16 05	lda $0516			lda 	TOKElement 					; get count and write that
.1e32	20 ba 1e	jsr $1eba			jsr 	TOKWriteA
.1e35	a8		tay				tay 								; put in Y
.1e36	f0 0c		beq $1e44			beq 	_TOEExit 					; exit if empty which is okay.
.1e38	a2 01		ldx #$01			ldx 	#1
.1e3a					_TOELoop:
.1e3a	bd 16 05	lda $0516,x			lda 	TOKElement,x
.1e3d	20 ba 1e	jsr $1eba			jsr 	TOKWriteA
.1e40	e8		inx				inx
.1e41	88		dey				dey
.1e42	d0 f6		bne $1e3a			bne 	_TOELoop
.1e44					_TOEExit:
.1e44	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1e45					TOKTokenise:
.1e45	8c 17 06	sty $0617			sty 	TOKDataSource+1 			; save source routine pointer
.1e48	8e 16 06	stx $0616			stx 	TOKDataSource
.1e4b	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1e4d	8d 18 06	sta $0618			sta 	TOKIsFirstElement
.1e50	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1e52	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1e55	9c 01 04	stz $0401			stz 	TOKLineNumber
.1e58	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1e5b					_TOKMainLoop:
.1e5b	20 c6 1e	jsr $1ec6			jsr 	TOKGet 						; what follows.
.1e5e	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1e60	f0 4f		beq $1eb1			beq 	_TOKExit
.1e62	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1e64	d0 05		bne $1e6b			bne 	_TOKElement
.1e66	20 ca 1e	jsr $1eca			jsr 	TOKGetNext
.1e69	80 f0		bra $1e5b			bra 	_TOKMainLoop
.1e6b					_TOKElement:
.1e6b	20 72 20	jsr $2072			jsr 	TOKIsDigit 					; is it 0..9
.1e6e	90 0a		bcc $1e7a			bcc 	_TOKNotDigit
.1e70	20 cb 1f	jsr $1fcb			jsr 	TOKTokeniseInteger 			; get integer
.1e73	b0 43		bcs $1eb8			bcs 	_TOKFail 					; did it fail ?
.1e75	9c 18 06	stz $0618			stz 	TOKIsFirstElement 			; clear first element flag
.1e78	80 e1		bra $1e5b			bra 	_TOKMainLoop
.1e7a					_TOKNotDigit:
.1e7a	9c 18 06	stz $0618			stz 	TOKIsFirstElement 			; clear first element flag
.1e7d	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1e7f	d0 07		bne $1e88			bne 	_TOKNotHex
.1e81	20 13 1f	jsr $1f13			jsr 	TOKTokeniseHexadecimal
.1e84	b0 32		bcs $1eb8			bcs 	_TOKFail
.1e86	80 d3		bra $1e5b			bra 	_TOKMainLoop
.1e88					_TOKNotHex:
.1e88	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1e8a	d0 07		bne $1e93			bne 	_TOKNotDecimal
.1e8c	20 1f 1e	jsr $1e1f			jsr 	TOKTokeniseDecimals
.1e8f	b0 27		bcs $1eb8			bcs 	_TOKFail
.1e91	80 c8		bra $1e5b			bra 	_TOKMainLoop
.1e93					_TOKNotDecimal:
.1e93	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1e95	d0 07		bne $1e9e			bne 	_TOKNotString
.1e97	20 39 20	jsr $2039			jsr 	TOKTokeniseString
.1e9a	b0 1c		bcs $1eb8			bcs 	_TOKFail
.1e9c	80 bd		bra $1e5b			bra 	_TOKMainLoop
.1e9e					_TOKNotString:
.1e9e	20 8f 20	jsr $208f			jsr 	TOKIsAlpha 					; identifier ?
.1ea1	b0 07		bcs $1eaa			bcs 	_TOKIdentifier
.1ea3	20 08 20	jsr $2008			jsr 	TOKTokenisePunctuation 		; punctuation
.1ea6	b0 10		bcs $1eb8			bcs 	_TOKFail
.1ea8	80 b1		bra $1e5b			bra 	_TOKMainLoop
.1eaa					_TOKIdentifier:
.1eaa	20 4d 1f	jsr $1f4d			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1ead	b0 09		bcs $1eb8			bcs 	_TOKFail
.1eaf	80 aa		bra $1e5b			bra 	_TOKMainLoop
.1eb1					_TOKExit:
.1eb1	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1eb3	20 ba 1e	jsr $1eba			jsr 	TOKWriteA
.1eb6	18		clc				clc									; return with carry set.
.1eb7	60		rts				rts
.1eb8					_TOKFail:
.1eb8	38		sec				sec
.1eb9	60		rts				rts
.1eba					TOKWriteA:
.1eba	da		phx				phx
.1ebb	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1ebe	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1ec1	fa		plx				plx
.1ec2	ee 00 04	inc $0400			inc 	TOKLineSize
.1ec5	60		rts				rts
.1ec6					TOKGet:
.1ec6	18		clc				clc
.1ec7	6c 16 06	jmp ($0616)			jmp 	(TOKDataSource)
.1eca					TOKGetNext:
.1eca	38		sec				sec
.1ecb	6c 16 06	jmp ($0616)			jmp 	(TOKDataSource)
.0616					TOKDataSource:
>0616							.fill 	2
.0618					TOKIsFirstElement:
>0618							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1ece					TOKFindToken:
.1ece	a2 41		ldx #$41			ldx 	#StandardTokens & $FF 		; do this table
.1ed0	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1ed2	20 dd 1e	jsr $1edd			jsr 	TOKFindTokenXY 				; find it, or not
.1ed5	90 04		bcc $1edb			bcc 	_TOKFTFail
.1ed7	a2 00		ldx #$00			ldx 	#0
.1ed9	38		sec				sec
.1eda	60		rts				rts
.1edb					_TOKFTFail
.1edb	18		clc				clc
.1edc	60		rts				rts
.1edd					TOKFindTokenXY:
.1edd	86 20		stx $20				stx 	zTemp0 						; save token table address
.1edf	84 21		sty $21				sty 	zTemp0+1
.1ee1	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1ee3	8d 19 06	sta $0619			sta 	TOKCurrent
.1ee6					_TOKFindLoop:
.1ee6	b2 20		lda ($20)			lda 	(zTemp0) 					; get token length from table
.1ee8	18		clc				clc 		 						; clear carry in case of fail
.1ee9	30 17		bmi $1f02			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1eeb	cd 16 05	cmp $0516			cmp 	TOKElement 					; compare against the element length
.1eee	d0 13		bne $1f03			bne 	_TOKNext 					; different, try next.
.1ef0	aa		tax				tax 								; number of chars to compare.
.1ef1	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1ef3					_TOKCompare:
.1ef3	b1 20		lda ($20),y			lda 	(zTemp0),y 					; compare the characters
.1ef5	d9 16 05	cmp $0516,y			cmp 	TOKElementText-1,y
.1ef8	d0 09		bne $1f03			bne 	_TOKNext 					; different ? try next
.1efa	c8		iny				iny 								; compare next two
.1efb	ca		dex				dex
.1efc	d0 f5		bne $1ef3			bne 	_TOKCompare 				; until done X characters.
.1efe	38		sec				sec
.1eff	ad 19 06	lda $0619			lda 	TOKCurrent 					; return current ID.
.1f02					_TOKExit:
.1f02	60		rts				rts
.1f03					_TOKNext:
.1f03	ee 19 06	inc $0619			inc 	TOKCurrent 					; increment token #
.1f06	38		sec				sec 								; add length+1 to ptr
.1f07	b2 20		lda ($20)			lda 	(zTemp0)
.1f09	65 20		adc $20				adc 	zTemp0
.1f0b	85 20		sta $20				sta 	zTemp0
.1f0d	90 d7		bcc $1ee6			bcc 	_TOKFindLoop
.1f0f	e6 21		inc $21				inc 	zTemp0+1
.1f11	80 d3		bra $1ee6			bra 	_TOKFindLoop
.0619					TOKCurrent:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1f13					TOKTokeniseHexadecimal:
.1f13	20 ca 1e	jsr $1eca			jsr 	TOKGetNext 					; consume the $
.1f16	a2 0e		ldx #$0e			ldx 	#IFR0
.1f18	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero 				; set R0 = 0
.1f1b					_TTHLoop:
.1f1b	20 c6 1e	jsr $1ec6			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f1e	20 9c 20	jsr $209c			jsr 	TOKIsHexadecimal
.1f21	90 20		bcc $1f43			bcc 	_TTHDone
.1f23	a2 0e		ldx #$0e			ldx 	#IFR0 						; shift R0 right 4
.1f25	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1f28	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1f2b	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1f2e	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.1f31	20 ca 1e	jsr $1eca			jsr 	TOKGetNext
.1f34	38		sec				sec 								; convert to decimal.
.1f35	e9 30		sbc #$30			sbc 	#48
.1f37	c9 0a		cmp #$0a			cmp 	#10
.1f39	90 02		bcc $1f3d			bcc 	_TTHNotAlpha
.1f3b	e9 07		sbc #$07			sbc 	#7
.1f3d					_TTHNotAlpha:
.1f3d	05 0e		ora $0e				ora 	IFR0+IM0 					; OR in
.1f3f	85 0e		sta $0e				sta 	IFR0+IM0
.1f41	80 d8		bra $1f1b			bra 	_TTHLoop
.1f43					_TTHDone:
.1f43	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1f45	20 ba 1e	jsr $1eba			jsr 	TOKWriteA
.1f48	20 fd 1d	jsr $1dfd			jsr 	TOKTokeniseConstant 		; write integer out.
.1f4b	18		clc				clc
.1f4c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1f4d					TOKTokeniseIdentifier:
.1f4d	20 ea 1d	jsr $1dea			jsr 	TOKResetElement 			; extract an identifier
.1f50					_TOKGetIdentifier:
.1f50	20 c6 1e	jsr $1ec6			jsr 	TOKGet
.1f53	20 5c 20	jsr $205c			jsr 	TOKToUpper
.1f56	20 7e 20	jsr $207e			jsr 	TOKIsIdentifierElement
.1f59	90 08		bcc $1f63			bcc 	_TOKEndIdent
.1f5b	20 ee 1d	jsr $1dee			jsr		TOKWriteElement
.1f5e	20 ca 1e	jsr $1eca			jsr 	TOKGetNext
.1f61	80 ed		bra $1f50			bra 	_TOKGetIdentifier
.1f63					_TOKEndIdent:
.1f63	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1f65	d0 06		bne $1f6d			bne 	_TOKNotString
.1f67	20 ee 1d	jsr $1dee			jsr 	TOKWriteElement 			; add it
.1f6a	20 ca 1e	jsr $1eca			jsr 	TOKGetNext 					; consume it
.1f6d					_TOKNotString:
.1f6d	20 c6 1e	jsr $1ec6			jsr 	TOKGet 						; finally check for (
.1f70	c9 28		cmp #$28			cmp 	#"("
.1f72	d0 06		bne $1f7a			bne 	_TOKNoArray
.1f74	20 ee 1d	jsr $1dee			jsr 	TOKWriteElement 			; add it
.1f77	20 ca 1e	jsr $1eca			jsr 	TOKGetNext 					; consume it
.1f7a					_TOKNoArray:
.1f7a	20 ce 1e	jsr $1ece			jsr 	TOKFindToken 				; find it
.1f7d	90 05		bcc $1f84			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1f7f	20 ba 1e	jsr $1eba			jsr 	TOKWriteA
.1f82	18		clc				clc
.1f83	60		rts				rts
.1f84					_TOKIsVariable:
.1f84	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1f86					_TOKOutputBuffer:
.1f86	bd 17 05	lda $0517,x			lda 	TOKElementText,x 			; output it translated.
.1f89	20 b2 1f	jsr $1fb2			jsr 	TOKTranslateIdentifier
.1f8c	20 ba 1e	jsr $1eba			jsr 	TOKWriteA
.1f8f	e8		inx				inx
.1f90	bd 17 05	lda $0517,x			lda 	TOKElementText,x
.1f93	20 7e 20	jsr $207e			jsr 	TOKIsIdentifierElement
.1f96	b0 ee		bcs $1f86			bcs 	_TOKOutputBuffer
.1f98	a8		tay				tay 								; last char in Y
.1f99	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1f9b	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1f9d	f0 0e		beq $1fad			beq 	_TOKIVExit
.1f9f	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1fa1	d0 04		bne $1fa7			bne 	_TOKIVCheckArray 			; no, check for (
.1fa3	1a		inc a				inc 	a 							; token is $7D
.1fa4	bc 18 05	ldy $0518,x			ldy 	TOKElementText+1,x 			; get next one.
.1fa7					_TOKIVCheckArray:
.1fa7	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1fa9	d0 02		bne $1fad			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1fab	1a		inc a				inc 	a
.1fac	1a		inc a				inc 	a
.1fad					_TOKIVExit:
.1fad	20 ba 1e	jsr $1eba			jsr 	TOKWriteA 					; ending token
.1fb0	18		clc				clc
.1fb1	60		rts				rts
.1fb2					TOKTranslateIdentifier:
.1fb2	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1fb4	f0 0f		beq $1fc5			beq 	_TTI64
.1fb6	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1fb8	f0 0e		beq $1fc8			beq 	_TTI65
.1fba	38		sec				sec
.1fbb	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1fbd	10 03		bpl $1fc2			bpl 	_TTIExit
.1fbf	18		clc				clc 								; map 09 onto 26-35
.1fc0	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1fc2					_TTIExit:
.1fc2	09 40		ora #$40			ora 	#$40 						; correct range.
.1fc4	60		rts				rts
.1fc5	a9 64		lda #$64	_TTI64:	lda 	#$64
.1fc7	60		rts				rts
.1fc8	a9 65		lda #$65	_TTI65:	lda 	#$65
.1fca	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1fcb					TOKTokeniseInteger:
.1fcb	20 f4 1f	jsr $1ff4			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fce	a2 17		ldx #$17			ldx 	#TOKElementText & $FF
.1fd0	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.1fd2	ad 16 05	lda $0516			lda		TOKElement
.1fd5	20 34 2d	jsr $2d34			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1fd8	ad 18 06	lda $0618			lda 	TOKIsFirstElement 			; first element ?
.1fdb	f0 12		beq $1fef			beq 	_TOKNotLineNumber
.1fdd	a5 10		lda $10				lda 	IFR0+IM2 					; check it's a 2 digit number
.1fdf	d0 0c		bne $1fed			bne 	_TOKBadLineNumeber
.1fe1	a5 0e		lda $0e				lda 	IFR0+IM0 					; copy it to the line number section.
.1fe3	8d 01 04	sta $0401			sta 	TOKLineNumber
.1fe6	a5 0f		lda $0f				lda 	IFR0+IM1
.1fe8	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.1feb	18		clc				clc
.1fec	60		rts				rts
.1fed					_TOKBadLineNumeber:
.1fed	38		sec				sec
.1fee	60		rts				rts
.1fef					_TOKNotLineNumber:
.1fef	20 fd 1d	jsr $1dfd			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1ff2	18		clc				clc
.1ff3	60		rts				rts
.1ff4					TOKExtractInteger:
.1ff4	20 ea 1d	jsr $1dea			jsr 	TOKResetElement 			; restart
.1ff7					_TTILoop:
.1ff7	20 c6 1e	jsr $1ec6			jsr 	TOKGet 						; keep getting and copying while numeric.
.1ffa	20 72 20	jsr $2072			jsr 	TOKIsDigit
.1ffd	90 08		bcc $2007			bcc 	_TOKEIExit
.1fff	20 ee 1d	jsr $1dee			jsr 	TOKWriteElement
.2002	20 ca 1e	jsr $1eca			jsr 	TOKGetNext
.2005	80 f0		bra $1ff7			bra 	_TTILoop
.2007					_TOKEIExit:
.2007	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2008					TOKTokenisePunctuation:
.2008	20 ea 1d	jsr $1dea			jsr 	TOKResetElement 			; copy first punctuation character into element.
.200b	20 ca 1e	jsr $1eca			jsr 	TOKGetNext
.200e	20 ee 1d	jsr $1dee			jsr 	TOKWriteElement
.2011	20 c6 1e	jsr $1ec6			jsr 	TOKGet 						; what follows ?
.2014	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2016	f0 10		beq $2028			beq 	_TTPOne
.2018	20 86 20	jsr $2086			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.201b	b0 0b		bcs $2028			bcs 	_TTPOne 					; these speed things up a bit.
.201d	20 ee 1d	jsr $1dee			jsr 	TOKWriteElement 			; this is what we will search for.
.2020	20 ce 1e	jsr $1ece			jsr 	TOKFindToken
.2023	b0 0a		bcs $202f			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2025	ce 16 05	dec $0516			dec 	TOKElement 					; make it a single character
.2028					_TTPOne:
.2028	20 ce 1e	jsr $1ece			jsr 	TOKFindToken 				; look for one character punctuation
.202b	b0 07		bcs $2034			bcs 	_TTPOutputExit 				; we found it
.202d	38		sec				sec 								; not recognised.
.202e	60		rts				rts
.202f					_TTPConsumeExit:
.202f	48		pha				pha
.2030	20 ca 1e	jsr $1eca			jsr 	TOKGetNext 					; get the 2nd char out.
.2033	68		pla				pla
.2034					_TTPOutputExit:
.2034	20 ba 1e	jsr $1eba			jsr  	TOKWriteA 					; write token out
.2037	18		clc				clc
.2038	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2039					TOKTokeniseString:
.2039	20 ca 1e	jsr $1eca			jsr 	TOKGetNext 					; consume the "
.203c	20 ea 1d	jsr $1dea			jsr 	TOKResetElement 			; start getting the string
.203f					_TOKTSLoop:
.203f	20 c6 1e	jsr $1ec6			jsr 	TOKGet 						; check EOL
.2042	c9 00		cmp #$00			cmp 	#0
.2044	f0 0c		beq $2052			beq 	_TOKTSExit
.2046	20 ca 1e	jsr $1eca			jsr 	TOKGetNext 					; get and consume
.2049	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.204b	f0 05		beq $2052			beq 	_TOKTSExit
.204d	20 ee 1d	jsr $1dee			jsr 	TOKWriteElement
.2050	80 ed		bra $203f			bra 	_TOKTSLoop
.2052					_TOKTSExit:
.2052	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2054	20 ba 1e	jsr $1eba			jsr 	TOKWriteA
.2057	20 2f 1e	jsr $1e2f			jsr 	TOKOutputElementBuffer
.205a	18		clc				clc
.205b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.205c					TOKToUpper:
.205c	c9 61		cmp #$61			cmp 	#"a"
.205e	90 06		bcc $2066			bcc 	_TTUNotLower
.2060	c9 7b		cmp #$7b			cmp 	#"z"+1
.2062	b0 02		bcs $2066			bcs 	_TTUNotLower
.2064	49 20		eor #$20			eor 	#$20
.2066					_TTUNotLower:
.2066	60		rts				rts
.2067					TOKToLower:
.2067	c9 41		cmp #$41			cmp 	#"A"
.2069	90 06		bcc $2071			bcc 	_TTUNotUpper
.206b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.206d	b0 02		bcs $2071			bcs 	_TTUNotUpper
.206f	49 20		eor #$20			eor 	#$20
.2071					_TTUNotUpper:
.2071	60		rts				rts
.2072					TOKIsDigit:
.2072	c9 30		cmp #$30			cmp 	#"0"
.2074	90 06		bcc $207c			bcc 	TOKFail
.2076	c9 3a		cmp #$3a			cmp 	#"9"+1
.2078	b0 02		bcs $207c			bcs 	TOKFail
.207a					TOKSucceed:
.207a	38		sec				sec
.207b	60		rts				rts
.207c					TOKFail:
.207c	18		clc				clc
.207d	60		rts				rts
.207e					TOKIsIdentifierElement:
.207e	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.2080	f0 f8		beq $207a			beq 	TOKSucceed
.2082	c9 5f		cmp #$5f			cmp 	#"_"
.2084	f0 f4		beq $207a			beq 	TOKSucceed 					; else fall through to alphanumeric
.2086					TOKIsAlphaNumeric:
.2086	20 8f 20	jsr $208f			jsr 	TOKIsAlpha
.2089	b0 ef		bcs $207a			bcs 	TOKSucceed
.208b	20 72 20	jsr $2072			jsr 	TOKIsDigit
.208e	60		rts				rts
.208f					TOKIsAlpha:
.208f	20 5c 20	jsr $205c			jsr 	TOKToUpper
.2092	c9 41		cmp #$41			cmp 	#"A"
.2094	90 e6		bcc $207c			bcc 	TOKFail
.2096	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2098	b0 e2		bcs $207c			bcs 	TOKFail
.209a	80 de		bra $207a			bra 	TOKSucceed
.209c					TOKIsHexadecimal:
.209c	20 72 20	jsr $2072			jsr		TOKIsDigit
.209f	b0 d9		bcs $207a			bcs 	TOKSucceed
.20a1	20 8f 20	jsr $208f			jsr 	TOKIsAlpha
.20a4	90 d6		bcc $207c			bcc 	TOKFail
.20a6	c9 47		cmp #$47			cmp 	#"F"+1
.20a8	b0 d2		bcs $207c			bcs 	TOKFail
.20aa	80 ce		bra $207a			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.20ac					Command_CALL:
.20ac	a9 42		lda #$42			lda 	#STK_CALL
.20ae	20 41 25	jsr $2541			jsr 	StackOpen
.20b1	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.20b3	29 c0		and #$c0			and 	#$C0
.20b5	c9 40		cmp #$40			cmp 	#$40
.20b7	d0 29		bne $20e2			bne 	_CCSyntax
.20b9	20 11 28	jsr $2811			jsr 	VARGetInfo 					; get the information
.20bc	20 28 25	jsr $2528			jsr 	ERRCheckRParen 				; check right bracket follows.
.20bf	20 c3 27	jsr $27c3			jsr 	VARFind 					; exists ?
.20c2	90 21		bcc $20e5			bcc 	_CCUnknown
.20c4	86 21		stx $21				stx 	zTemp0+1 					; save target in XA
.20c6	85 20		sta $20				sta 	zTemp0
.20c8	20 75 25	jsr $2575			jsr 	STKSaveCodePosition 		; save return address on stack.
.20cb	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.20cd	b1 20		lda ($20),y			lda 	(zTemp0),y
.20cf	c9 ff		cmp #$ff			cmp 	#$FF
.20d1	d0 12		bne $20e5			bne 	_CCUnknown
.20d3	88		dey				dey 								; get Y offset to stack
.20d4	b1 20		lda ($20),y			lda 	(zTemp0),y
.20d6	48		pha				pha
.20d7	88		dey				dey 								; get address
.20d8	b1 20		lda ($20),y			lda 	(zTemp0),y
.20da	85 1f		sta $1f				sta 	codePtr+1
.20dc	b2 20		lda ($20)			lda 	(zTemp0)
.20de	85 1e		sta $1e				sta 	codePtr
.20e0	7a		ply				ply 								; restore Y
.20e1	60		rts				rts
.20e2					_CCSyntax:
.20e2	4c 8b 23	jmp $238b		jmp	ErrorV_syntax
.20e5					_CCUnknown:
.20e5	4c 00 25	jmp $2500		jmp	ErrorV_unknown
.20e8					Command_ENDPROC:
.20e8	a9 42		lda #$42			lda 	#STK_CALL
.20ea	20 6d 25	jsr $256d			jsr 	StackCheckFrame
.20ed	20 87 25	jsr $2587			jsr 	STKLoadCodePosition 		; return
.20f0	20 5f 25	jsr $255f			jsr 	StackClose
.20f3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.20f4					Command_DO:
.20f4	a9 22		lda #$22			lda 	#STK_DO
.20f6	20 41 25	jsr $2541			jsr 	StackOpen
.20f9	20 75 25	jsr $2575			jsr 	STKSaveCodePosition 		; save loop position
.20fc	60		rts				rts
.20fd					Command_EXIT:
.20fd	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.20ff	20 6d 25	jsr $256d			jsr 	StackCheckFrame
.2102	20 5f 25	jsr $255f			jsr 	StackClose 					; close it
.2105	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2107	aa		tax				tax
.2108	20 9d 22	jsr $229d			jsr 	ScanForward
.210b	60		rts				rts
.210c					Command_LOOP:
.210c	a9 22		lda #$22			lda 	#STK_DO
.210e	20 6d 25	jsr $256d			jsr 	StackCheckFrame
.2111	20 87 25	jsr $2587			jsr 	STKLoadCodePosition 		; loop back
.2114	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2115					Command_FOR:
.2115	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2117	20 41 25	jsr $2541			jsr 	StackOpen
.211a	20 16 12	jsr $1216			jsr 	CommandLET 					; do "I = 1" bit
.211d	5a		phy				phy 								; save variable address to +4,+5
.211e	a0 04		ldy #$04			ldy 	#4
.2120	a5 20		lda $20				lda 	zTemp0
.2122	91 28		sta ($28),y			sta 	(basicStack),y
.2124	c8		iny				iny
.2125	a5 21		lda $21				lda 	zTemp0+1
.2127	91 28		sta ($28),y			sta 	(basicStack),y
.2129	7a		ply				ply
.212a	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.212c	20 38 25	jsr $2538			jsr 	ERRCheckA
.212f	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2132	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2134	a2 0e		ldx #$0e			ldx 	#IFR0
.2136	20 8b 21	jsr $218b			jsr 	CFSaveR0X
.2139	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; STEP here ?
.213b	c9 91		cmp #$91			cmp 	#PR_STEP
.213d	d0 06		bne $2145			bne 	_CFStep1
.213f	c8		iny				iny 								; consume step
.2140	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 				; evaluate STEP
.2143	80 24		bra $2169			bra 	_CFWriteStep
.2145					_CFStep1:
.2145	a2 0e		ldx #$0e			ldx 	#IFR0 						; default R0, 1
.2147	a9 01		lda #$01			lda 	#1
.2149	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.214c	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.214d	a0 04		ldy #$04			ldy 	#4 							; get variable address
.214f	b1 28		lda ($28),y			lda 	(basicStack),y
.2151	85 20		sta $20				sta 	zTemp0
.2153	c8		iny				iny
.2154	b1 28		lda ($28),y			lda 	(basicStack),y
.2156	85 21		sta $21				sta 	zTemp0+1
.2158	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.215a	b1 20		lda ($20),y			lda 	(zTemp0),y
.215c	d0 0a		bne $2168			bne 	_CFNotOptimised
.215e	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2160	b1 28		lda ($28),y			lda 	(basicStack),y
.2162	d0 04		bne $2168			bne 	_CFNotOptimised
.2164	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2166	85 11		sta $11				sta 	IFR0+IExp
.2168					_CFNotOptimised:
.2168	7a		ply				ply
.2169					_CFWriteStep:
.2169	a2 0e		ldx #$0e			ldx 	#IFR0 						; Write to additive.
.216b	a9 06		lda #$06			lda 	#6
.216d	20 8b 21	jsr $218b			jsr 	CFSaveR0X
.2170	20 75 25	jsr $2575			jsr 	STKSaveCodePosition 		; save loop position
.2173	60		rts				rts
.2174					CFLoadR0X:
.2174	5a		phy				phy
.2175	a8		tay				tay
.2176	b1 28		lda ($28),y			lda 	(basicStack),y
.2178	95 00		sta $00,x			sta 	IM0,x
.217a	c8		iny				iny
.217b	b1 28		lda ($28),y			lda 	(basicStack),y
.217d	95 01		sta $01,x			sta 	IM1,x
.217f	c8		iny				iny
.2180	b1 28		lda ($28),y			lda 	(basicStack),y
.2182	95 02		sta $02,x			sta 	IM2,x
.2184	c8		iny				iny
.2185	b1 28		lda ($28),y			lda 	(basicStack),y
.2187	95 03		sta $03,x			sta 	IExp,x
.2189	7a		ply				ply
.218a	60		rts				rts
.218b					CFSaveR0X:
.218b	5a		phy				phy
.218c	a8		tay				tay
.218d	b5 00		lda $00,x			lda 	IM0,x
.218f	91 28		sta ($28),y			sta 	(basicStack),y
.2191	c8		iny				iny
.2192	b5 01		lda $01,x			lda 	IM1,x
.2194	91 28		sta ($28),y			sta 	(basicStack),y
.2196	c8		iny				iny
.2197	b5 02		lda $02,x			lda 	IM2,x
.2199	91 28		sta ($28),y			sta 	(basicStack),y
.219b	c8		iny				iny
.219c	b5 03		lda $03,x			lda 	IExp,x
.219e	91 28		sta ($28),y			sta 	(basicStack),y
.21a0	7a		ply				ply
.21a1	60		rts				rts
.21a2					Command_NEXT:
.21a2	a9 37		lda #$37			lda 	#STK_FOR
.21a4	20 6d 25	jsr $256d			jsr 	StackCheckFrame
.21a7	5a		phy				phy 								; check optimised loop
.21a8	a0 09		ldy #$09			ldy 	#9
.21aa	b1 28		lda ($28),y			lda 	(basicStack),y
.21ac	7a		ply				ply
.21ad	0a		asl a				asl 	a
.21ae	b0 35		bcs $21e5			bcs 	_CNOptimised
.21b0	20 1c 22	jsr $221c			jsr 	_CNLoadValue 				; load index value to R0.
.21b3	a2 12		ldx #$12			ldx 	#IFR1 						; load adding value to R1.
.21b5	a9 06		lda #$06			lda 	#6
.21b7	20 74 21	jsr $2174			jsr 	CFLoadR0X
.21ba	20 c6 28	jsr $28c6			jsr 	IFloatAdd 					; add them together and write back.
.21bd	20 3f 22	jsr $223f			jsr 	_CNSaveValue
.21c0	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.21c2	a2 12		ldx #$12			ldx 	#IFR1
.21c4	20 74 21	jsr $2174			jsr 	CFLoadR0X
.21c7	20 9e 2b	jsr $2b9e			jsr 	IFloatCompare 				; compare terminal vs current
.21ca	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.21cc	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero
.21cf	f0 10		beq $21e1			beq 	_CNLoopBack
.21d1	a5 11		lda $11				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.21d3	5a		phy				phy
.21d4	a0 09		ldy #$09			ldy 	#6+IExp
.21d6	51 28		eor ($28),y			eor 	(basicStack),y
.21d8	7a		ply				ply
.21d9	29 40		and #$40			and 	#IFSign
.21db	f0 04		beq $21e1			beq 	_CNLoopBack
.21dd					_CNExitLoop:
.21dd	20 5f 25	jsr $255f			jsr 	StackClose		 			; return
.21e0	60		rts				rts
.21e1					_CNLoopBack:
.21e1	20 87 25	jsr $2587			jsr 	STKLoadCodePosition 		; loop back
.21e4	60		rts				rts
.21e5					_CNOptimised:
.21e5	5a		phy				phy
.21e6	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.21e8	b1 28		lda ($28),y			lda 	(basicStack),y
.21ea	85 24		sta $24				sta 	zTemp2
.21ec	c8		iny				iny
.21ed	b1 28		lda ($28),y			lda 	(basicStack),y
.21ef	85 25		sta $25				sta 	zTemp2+1
.21f1	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.21f3					_CNIncrement:
.21f3	c8		iny				iny
.21f4	b1 24		lda ($24),y			lda 	(zTemp2),y
.21f6	1a		inc a				inc 	a
.21f7	91 24		sta ($24),y			sta 	(zTemp2),y
.21f9	f0 f8		beq $21f3			beq 	_CNIncrement
.21fb	18		clc				clc 								; point zTemp0 to terminal value
.21fc	a5 28		lda $28				lda 	basicStack
.21fe	69 0a		adc #$0a			adc 	#10
.2200	85 20		sta $20				sta 	zTemp0
.2202	a5 29		lda $29				lda 	basicStack+1
.2204	69 00		adc #$00			adc 	#0
.2206	85 21		sta $21				sta 	zTemp0+1
.2208	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.220a	b2 24		lda ($24)			lda 	(zTemp2)
.220c	d2 20		cmp ($20)			cmp 	(zTemp0)
.220e	b1 24		lda ($24),y			lda 	(zTemp2),y
.2210	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.2212	c8		iny				iny
.2213	b1 24		lda ($24),y			lda 	(zTemp2),y
.2215	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.2217	7a		ply				ply
.2218	b0 c3		bcs $21dd			bcs 	_CNExitLoop
.221a	80 c5		bra $21e1			bra 	_CNLoopBack
.221c					_CNLoadValue:
.221c	5a		phy				phy
.221d	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.221f	b1 28		lda ($28),y			lda 	(basicStack),y
.2221	85 24		sta $24				sta 	zTemp2
.2223	c8		iny				iny
.2224	b1 28		lda ($28),y			lda 	(basicStack),y
.2226	85 25		sta $25				sta 	zTemp2+1
.2228	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.222a	b1 24		lda ($24),y			lda 	(zTemp2),y
.222c	85 0e		sta $0e				sta 	IFR0+IM0
.222e	c8		iny				iny
.222f	b1 24		lda ($24),y			lda 	(zTemp2),y
.2231	85 0f		sta $0f				sta 	IFR0+IM1
.2233	c8		iny				iny
.2234	b1 24		lda ($24),y			lda 	(zTemp2),y
.2236	85 10		sta $10				sta 	IFR0+IM2
.2238	c8		iny				iny
.2239	b1 24		lda ($24),y			lda 	(zTemp2),y
.223b	85 11		sta $11				sta 	IFR0+IExp
.223d	7a		ply				ply
.223e	60		rts				rts
.223f					_CNSaveValue:
.223f	5a		phy				phy
.2240	a0 00		ldy #$00			ldy 	#0
.2242	a5 0e		lda $0e				lda 	IFR0+IM0
.2244	91 24		sta ($24),y			sta 	(zTemp2),y
.2246	c8		iny				iny
.2247	a5 0f		lda $0f				lda 	IFR0+IM1
.2249	91 24		sta ($24),y			sta 	(zTemp2),y
.224b	c8		iny				iny
.224c	a5 10		lda $10				lda 	IFR0+IM2
.224e	91 24		sta ($24),y			sta 	(zTemp2),y
.2250	c8		iny				iny
.2251	a5 11		lda $11				lda 	IFR0+IExp
.2253	91 24		sta ($24),y			sta 	(zTemp2),y
.2255	7a		ply				ply
.2256	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2257					IfCommand:
.2257	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 				; Get the if test.
.225a	b1 1e		lda ($1e),y			lda 	(codePtr),y					; what follows ?
.225c	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.225e	d0 0a		bne $226a			bne 	_IfStructured 				; we still support it.
.2260	c8		iny				iny 								; consume THEN
.2261	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero 			; is it zero
.2264	f0 01		beq $2267			beq 	_IfFail 					; if fail, go to next line
.2266	60		rts				rts 								; if THEN just continue
.2267					_IfFail:
.2267	4c 80 13	jmp $1380			jmp 	RUNEndOfLine
.226a					_IfStructured:
.226a	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero 			; is it zero
.226d	d0 07		bne $2276			bne 	_IfExit 					; if not, then continue normally.
.226f	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2271	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2273	20 9d 22	jsr $229d			jsr 	ScanForward 				; and run from there
.2276					_IfExit:
.2276	60		rts				rts
.2277					ElseCode:
.2277	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2279	aa		tax				tax 								; so just go to the structure exit
.227a	20 9d 22	jsr $229d			jsr 	ScanForward
.227d	60		rts				rts
.227e					EndIf:
.227e	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.227f					Command_REPEAT:
.227f	a9 02		lda #$02			lda 	#STK_REPEAT
.2281	20 41 25	jsr $2541			jsr 	StackOpen
.2284	20 75 25	jsr $2575			jsr 	STKSaveCodePosition 		; save loop position
.2287	60		rts				rts
.2288					Command_UNTIL:
.2288	a9 02		lda #$02			lda 	#STK_REPEAT
.228a	20 6d 25	jsr $256d			jsr 	StackCheckFrame
.228d	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 				; work out the test
.2290	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero 			; check if zero
.2293	f0 04		beq $2299			beq 	_CULoopBack 				; if so keep looping
.2295	20 5f 25	jsr $255f			jsr 	StackClose		 			; return
.2298	60		rts				rts
.2299					_CULoopBack:
.2299	20 87 25	jsr $2587			jsr 	STKLoadCodePosition 		; loop back
.229c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.229d					ScanForward:
.229d	85 20		sta $20				sta 	zTemp0 						; save scan options in zTemp0
.229f	86 21		stx $21				stx 	zTemp0+1
.22a1	64 22		stz $22				stz 	zTemp1 						; clear structure count.
.22a3					_ScanForwardLoop:
.22a3	a5 22		lda $22				lda 	zTemp1 						; if structure count non zero, don't check for end.
.22a5	d0 0a		bne $22b1			bne 	_ScanNoCheck
.22a7	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; reached either target token.
.22a9	c5 20		cmp $20				cmp 	zTemp0
.22ab	f0 49		beq $22f6			beq 	_ScanExit
.22ad	c5 21		cmp $21				cmp 	zTemp0+1
.22af	f0 45		beq $22f6			beq 	_ScanExit
.22b1					_ScanNoCheck:
.22b1	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get the token and consume it.
.22b3	c8		iny				iny
.22b4	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.22b6	f0 37		beq $22ef			beq		_ScanDataItem
.22b8	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.22ba	f0 33		beq $22ef			beq 	_ScanDataItem
.22bc	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.22be	f0 1b		beq $22db			beq 	_ScanNextLine
.22c0	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.22c2	d0 01		bne $22c5			bne 	_ScanNoShift
.22c4	c8		iny				iny
.22c5					_ScanNoShift:
.22c5	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.22c7	b0 da		bcs $22a3			bcs 	_ScanForwardLoop
.22c9	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.22cb	90 d6		bcc $22a3			bcc 	_ScanForwardLoop
.22cd	aa		tax				tax 								; access the table to get the adjustment.
.22ce	18		clc				clc
.22cf	a5 22		lda $22				lda 	zTemp1 						; add it to structure count.
.22d1	7d b5 18	adc $18b5,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.22d4	85 22		sta $22				sta 	zTemp1
.22d6	10 cb		bpl $22a3			bpl		_ScanForwardLoop 			; error if -ve ?
.22d8	4c 17 24	jmp $2417		jmp	ErrorV_structure
.22db					_ScanNextLine:
.22db	18		clc				clc	 								; forward to next line.
.22dc	b2 1e		lda ($1e)			lda 	(codePtr)
.22de	65 1e		adc $1e				adc 	codePtr
.22e0	85 1e		sta $1e				sta 	codePtr
.22e2	90 02		bcc $22e6			bcc 	_ScanNoCarry
.22e4	e6 1f		inc $1f				inc 	codePtr+1
.22e6					_ScanNoCarry:
.22e6	a0 03		ldy #$03			ldy 	#3
.22e8	b2 1e		lda ($1e)			lda 	(codePtr) 					; off end of program ?
.22ea	d0 b7		bne $22a3			bne 	_ScanForwardLoop
.22ec	4c 17 24	jmp $2417		jmp	ErrorV_structure
.22ef					_ScanDataItem:
.22ef	98		tya				tya
.22f0	38		sec				sec
.22f1	71 1e		adc ($1e),y			adc 	(codePtr),y
.22f3	a8		tay				tay
.22f4	80 ad		bra $22a3			bra 	_ScanForwardLoop
.22f6					_ScanExit:
.22f6	c8		iny				iny 								; consume final token.
.22f7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.22f8					ScanProcedures:
.22f8	a5 1e		lda $1e				lda 	codePtr 					; push codePtr on the stack
.22fa	48		pha				pha
.22fb	a5 1f		lda $1f				lda 	codePtr+1
.22fd	48		pha				pha
.22fe	5a		phy				phy
.22ff	ad 14 05	lda $0514			lda 	PGMBaseHigh 				; back to the program start
.2302	85 1f		sta $1f				sta 	codePtr+1
.2304	64 1e		stz $1e				stz 	codePtr
.2306					_SPLoop:
.2306	b2 1e		lda ($1e)			lda 	(codePtr) 					; end of program
.2308	f0 18		beq $2322			beq 	_SPExit
.230a	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.230c	b1 1e		lda ($1e),y			lda 	(codePtr),y
.230e	c9 88		cmp #$88			cmp 	#PR_PROC
.2310	d0 03		bne $2315			bne 	_SPNext
.2312	20 2a 23	jsr $232a			jsr 	_SPSetupRecord
.2315					_SPNext:
.2315	18		clc				clc 								; forward to next
.2316	b2 1e		lda ($1e)			lda 	(codePtr)
.2318	65 1e		adc $1e				adc 	codePtr
.231a	85 1e		sta $1e				sta 	codePtr
.231c	90 e8		bcc $2306			bcc 	_SPLoop
.231e	e6 1f		inc $1f				inc 	codePtr+1
.2320	80 e4		bra $2306			bra 	_SPLoop
.2322					_SPExit:
.2322	7a		ply				ply
.2323	68		pla				pla
.2324	85 1f		sta $1f				sta 	codePtr+1
.2326	68		pla				pla
.2327	85 1e		sta $1e				sta 	codePtr
.2329	60		rts				rts
.232a					_SPSetupRecord:
.232a	c8		iny				iny 								; check identifier follows
.232b	b1 1e		lda ($1e),y			lda 	(codePtr),y
.232d	29 c0		and #$c0			and 	#$C0
.232f	c9 40		cmp #$40			cmp 	#$40
.2331	d0 27		bne $235a			bne 	_SPSyntax
.2333	20 11 28	jsr $2811			jsr 	VARGetInfo 					; get the information
.2336	20 28 25	jsr $2528			jsr 	ERRCheckRParen 				; check right bracket follows.
.2339	20 c3 27	jsr $27c3			jsr 	VARFind 					; already exists ?
.233c	b0 1f		bcs $235d			bcs 	_SPUsed 					; error !
.233e	20 6f 27	jsr $276f			jsr 	VARCreate 					; create, XA points to the data.
.2341	85 20		sta $20				sta 	zTemp0
.2343	86 21		stx $21				stx 	zTemp0+1
.2345	5a		phy				phy 								; save Y pos on stack
.2346	a0 01		ldy #$01			ldy 	#1
.2348	a5 1e		lda $1e				lda 	codePtr 					; save codePtr/Y
.234a	92 20		sta ($20)			sta 	(zTemp0)
.234c	a5 1f		lda $1f				lda 	codePtr+1
.234e	91 20		sta ($20),y			sta 	(zTemp0),y
.2350	c8		iny				iny
.2351	68		pla				pla
.2352	91 20		sta ($20),y			sta 	(zTemp0),y
.2354	c8		iny				iny
.2355	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2357	91 20		sta ($20),y			sta 	(zTemp0),y
.2359	60		rts				rts
.235a					_SPSyntax:
.235a	4c 8b 23	jmp $238b		jmp	ErrorV_syntax
.235d					_SPUsed:
.235d	4c e2 24	jmp $24e2		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2360					Command_WHILE:
.2360	5a		phy				phy 								; save position of the test
.2361	20 ba 15	jsr $15ba			jsr 	EXPEvalNumber 				; work out the while test.
.2364	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero 			; check if zero
.2367	f0 0e		beq $2377			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2369	98		tya				tya 								; position *after* test.
.236a	7a		ply				ply 								; restore position before test, at WHILE
.236b	88		dey				dey 								; so we execute the WHILE command again.
.236c	48		pha				pha 								; push after test on the stack
.236d	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.236f	20 41 25	jsr $2541			jsr 	StackOpen
.2372	20 75 25	jsr $2575			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2375	7a		ply				ply 								; restore the position *after* the test
.2376	60		rts				rts
.2377					_WHExitLoop:
.2377	68		pla				pla 								; throw post loop position
.2378	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.237a	aa		tax				tax
.237b	20 9d 22	jsr $229d			jsr 	ScanForward
.237e	60		rts				rts
.237f					Command_WEND:
.237f	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2381	20 6d 25	jsr $256d			jsr 	StackCheckFrame
.2384	20 87 25	jsr $2587			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2387	20 5f 25	jsr $255f			jsr 	StackClose		 			; erase the frame
.238a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.238b					ErrorV_syntax:
.238b	20 60 26	jsr $2660		jsr	ErrorHandler
>238e	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2396	45 72 72 6f 72 00
.239c					ErrorV_range:
.239c	20 60 26	jsr $2660		jsr	ErrorHandler
>239f	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>23a7	52 61 6e 67 65 00
.23ad					ErrorV_value:
.23ad	20 60 26	jsr $2660		jsr	ErrorHandler
>23b0	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>23b8	75 65 00
.23bb					ErrorV_type:
.23bb	20 60 26	jsr $2660		jsr	ErrorHandler
>23be	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>23c6	73 6d 61 74 63 68 00
.23cd					ErrorV_unimplemented:
.23cd	20 60 26	jsr $2660		jsr	ErrorHandler
>23d0	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>23d8	6c 65 6d 65 6e 74 65 64 00
.23e1					ErrorV_assert:
.23e1	20 60 26	jsr $2660		jsr	ErrorHandler
>23e4	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>23ec	46 61 69 6c 00
.23f1					ErrorV_internal:
.23f1	20 60 26	jsr $2660		jsr	ErrorHandler
>23f4	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>23fc	6c 20 45 72 72 6f 72 00
.2404					ErrorV_divzero:
.2404	20 60 26	jsr $2660		jsr	ErrorHandler
>2407	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>240f	42 79 20 5a 65 72 6f 00
.2417					ErrorV_structure:
.2417	20 60 26	jsr $2660		jsr	ErrorHandler
>241a	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2422	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.242f					ErrorV_stop:
.242f	20 60 26	jsr $2660		jsr	ErrorHandler
>2432	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>243a	20 53 74 6f 70 70 65 64 00
.2443					ErrorV_data:
.2443	20 60 26	jsr $2660		jsr	ErrorHandler
>2446	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>244e	44 61 74 61 00
.2453					ErrorV_redefine:
.2453	20 60 26	jsr $2660		jsr	ErrorHandler
>2456	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>245e	65 64 65 66 69 6e 65 64 00
.2467					ErrorV_index:
.2467	20 60 26	jsr $2660		jsr	ErrorHandler
>246a	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2472	61 79 20 49 6e 64 65 78 00
.247b					ErrorV_memory:
.247b	20 60 26	jsr $2660		jsr	ErrorHandler
>247e	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2486	4d 65 6d 6f 72 79 00
.248d					ErrorV_uninitialised:
.248d	20 60 26	jsr $2660		jsr	ErrorHandler
>2490	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2498	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.24a8					ErrorV_string:
.24a8	20 60 26	jsr $2660		jsr	ErrorHandler
>24ab	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>24b3	69 6e 67 20 4c 65 6e 67 74 68 00
.24be					ErrorV_variable:
.24be	20 60 26	jsr $2660		jsr	ErrorHandler
>24c1	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>24c9	65 20 4d 69 73 73 69 6e 67 00
.24d3					ErrorV_stack:
.24d3	20 60 26	jsr $2660		jsr	ErrorHandler
>24d6	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>24de	75 6c 6c 00
.24e2					ErrorV_dupproc:
.24e2	20 60 26	jsr $2660		jsr	ErrorHandler
>24e5	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>24ed	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>24fd	65 64 00
.2500					ErrorV_unknown:
.2500	20 60 26	jsr $2660		jsr	ErrorHandler
>2503	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>250b	20 50 72 6f 63 65 64 75 72 65 00
.2516					ErrorV_break:
.2516	20 60 26	jsr $2660		jsr	ErrorHandler
>2519	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2520					ERRCheckLParen:
.2520	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2522	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2524	d0 18		bne $253e			bne 	ERRSyntaxError
.2526	c8		iny				iny
.2527	60		rts				rts
.2528					ERRCheckRParen:
.2528	b1 1e		lda ($1e),y			lda 	(codePtr),y
.252a	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.252c	d0 10		bne $253e			bne 	ERRSyntaxError
.252e	c8		iny				iny
.252f	60		rts				rts
.2530					ERRCheckComma:
.2530	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2532	c9 99		cmp #$99			cmp 	#PR_COMMA
.2534	d0 08		bne $253e			bne 	ERRSyntaxError
.2536	c8		iny				iny
.2537	60		rts				rts
.2538					ERRCheckA:
.2538	d1 1e		cmp ($1e),y			cmp 	(codePtr),y
.253a	d0 02		bne $253e			bne 	ERRSyntaxError
.253c	c8		iny				iny
.253d	60		rts				rts
.253e					ERRSyntaxError:
.253e	4c 8b 23	jmp $238b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2541					StackOpen:
.2541	48		pha				pha 								; save frame byte
.2542	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.2544	0a		asl a				asl 	a 							; claim twice this for storage
.2545	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2547	38		sec				sec 								; so basically subtracting from
.2548	65 28		adc $28				adc 	basicStack 	 				; basicStack
.254a	85 28		sta $28				sta 	basicStack
.254c	b0 0a		bcs $2558			bcs 	_SONoBorrow
>254e	db						.byte 	$DB
.254f	c6 29		dec $29				dec 	basicStack+1
.2551	a5 29		lda $29				lda 	basicStack+1 				; reached the bottom ?
.2553	cd 1a 06	cmp $061a			cmp 	basicStackEnd
.2556	f0 04		beq $255c			beq 	_SOMemory
.2558					_SONoBorrow:
.2558	68		pla				pla 								; get marker back and write at TOS
.2559	92 28		sta ($28)			sta 	(basicStack)
.255b	60		rts				rts
.255c					_SOMemory:
.255c	4c d3 24	jmp $24d3		jmp	ErrorV_stack
.255f					StackClose:
.255f	b2 28		lda ($28)			lda 	(basicStack) 				; get TOS marker
.2561	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2563	0a		asl a				asl 	a 							; claim twice this.
.2564	65 28		adc $28				adc 	basicStack 					; add to the stack pointer.
.2566	85 28		sta $28				sta 	basicStack
.2568	90 02		bcc $256c			bcc 	_SCExit
.256a	e6 29		inc $29				inc 	basicStack+1
.256c					_SCExit:
.256c	60		rts				rts
.256d					StackCheckFrame:
.256d	d2 28		cmp ($28)			cmp		(basicStack) 				; check  frames match
.256f	d0 01		bne $2572			bne 	_SCFError 					; different, we have structures mixed up
.2571	60		rts				rts
.2572					_SCFError:
.2572	4c 17 24	jmp $2417		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2575					STKSaveCodePosition:
.2575	5a		phy				phy
.2576	98		tya				tya 								; save Y at offset 1.
.2577	a0 01		ldy #$01			ldy 	#1
.2579	91 28		sta ($28),y			sta 	(basicStack),y
.257b	a5 1e		lda $1e				lda 	codePtr 					; save code (low) at 2
.257d	c8		iny				iny
.257e	91 28		sta ($28),y			sta 	(basicStack),y
.2580	a5 1f		lda $1f				lda 	codePtr+1 					; save code (high) at 3
.2582	c8		iny				iny
.2583	91 28		sta ($28),y			sta 	(basicStack),y
.2585	7a		ply				ply
.2586	60		rts				rts
.2587					STKLoadCodePosition:
.2587	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2589	b1 28		lda ($28),y			lda 	(basicStack),y
.258b	85 1f		sta $1f				sta 	codePtr+1
.258d	88		dey				dey
.258e	b1 28		lda ($28),y			lda 	(basicStack),y
.2590	85 1e		sta $1e				sta 	codePtr
.2592	88		dey				dey
.2593	b1 28		lda ($28),y			lda 	(basicStack),y 				; line offset to Y
.2595	a8		tay				tay
.2596	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2597					StackReset:
.2597	48		pha				pha 								; save top of memory
.2598	3a		dec a				dec 	a  							; end of stack = previous byte
.2599	85 29		sta $29				sta 	basicStack+1
.259b	a9 ff		lda #$ff			lda 	#$FF
.259d	85 28		sta $28				sta 	basicStack
.259f	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.25a1	92 28		sta ($28)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.25a3	68		pla				pla 								; allocate pages for stack.
.25a4	38		sec				sec
.25a5	e9 02		sbc #$02			sbc 	#STACKPAGES
.25a7	8d 1a 06	sta $061a			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.25aa	60		rts				rts
.0028					basicStack:
>0028							.fill 	2
.061a					basicStackEnd:
>061a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.25ab					StringConcrete:
.25ab	5a		phy				phy 								; save position on stack
.25ac	b2 0e		lda ($0e)			lda 	(IFR0) 						; get string length
.25ae	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.25b0	b0 41		bcs $25f3			bcs 	_SALengthError
.25b2	18		clc				clc 								; length of the new string
.25b3	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.25b5	90 02		bcc $25b9			bcc 	_SAHaveLength
.25b7	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.25b9					_SAHaveLength:
.25b9	48		pha				pha 								; save length to be allocated for concreting.
.25ba	38		sec				sec
.25bb	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.25bd	6d 1c 06	adc $061c			adc 	stringMemory
.25c0	8d 1c 06	sta $061c			sta 	stringMemory
.25c3	85 24		sta $24				sta 	zTemp2 						; update storage address
.25c5	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.25c7	6d 1d 06	adc $061d			adc 	stringMemory+1
.25ca	8d 1d 06	sta $061d			sta 	stringMemory+1
.25cd	85 25		sta $25				sta 	zTemp2+1
.25cf	68		pla				pla 								; save length allocated in +0
.25d0	92 24		sta ($24)			sta 	(zTemp2)
.25d2	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.25d4	a0 01		ldy #$01			ldy 	#1
.25d6	91 24		sta ($24),y			sta 	(zTemp2),y
.25d8					_SACopyNewString:
.25d8	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy length at +2
.25da	a0 02		ldy #$02			ldy 	#2
.25dc	91 24		sta ($24),y			sta 	(zTemp2),y
.25de	aa		tax				tax 								; bytes to copy
.25df	f0 0c		beq $25ed			beq 	_SACopyExit
.25e1	a0 01		ldy #$01			ldy 	#1 							; first character from here
.25e3					_SACopyNSLoop:
.25e3	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; get character from here
.25e5	c8		iny				iny 								; write two on in string storage
.25e6	c8		iny				iny
.25e7	91 24		sta ($24),y			sta 	(zTemp2),y
.25e9	88		dey				dey
.25ea	ca		dex				dex									; until copied all the string lengths.
.25eb	d0 f6		bne $25e3			bne 	_SACopyNSLoop
.25ed					_SACopyExit:
.25ed	a6 25		ldx $25				ldx 	zTemp2+1 					; XA contain the concreted string.
.25ef	a5 24		lda $24				lda 	zTemp2
.25f1	7a		ply				ply
.25f2	60		rts				rts
.25f3					_SALengthError:
.25f3	4c a8 24	jmp $24a8		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.25f6					StringSystemInitialise:
.25f6	3a		dec a				dec 	a 							; make last byte of previous page.
.25f7	8d 1d 06	sta $061d			sta 	stringMemory+1
.25fa	85 21		sta $21				sta 	zTemp0+1
.25fc	a9 ff		lda #$ff			lda 	#$FF
.25fe	8d 1c 06	sta $061c			sta 	stringMemory
.2601	85 20		sta $20				sta 	zTemp0
.2603	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2605	92 20		sta ($20)			sta 	(zTemp0)
.2607	60		rts				rts
.2608					StringSpaceInitialise:
.2608	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.260a	8d 1b 06	sta $061b			sta 	stringInitialised
.260d	ad 1c 06	lda $061c			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2610	8d 1e 06	sta $061e			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2613	ad 1d 06	lda $061d			lda 	stringMemory+1
.2616	3a		dec a				dec 	a
.2617	8d 1f 06	sta $061f			sta 	stringTempPointer+1
.261a	20 5e 10	jsr $105e			jsr 	ClearCheckMemory
.261d	60		rts				rts
.261e					StringTempAllocate:
.261e	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2620	b0 2e		bcs $2650			bcs 	_STALength
.2622	2c 1b 06	bit $061b			bit 	stringInitialised 			; already initialised
.2625	30 05		bmi $262c			bmi 	_STAAllocate
.2627	48		pha				pha 								; save value to subtract.
.2628	20 08 26	jsr $2608			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.262b	68		pla				pla 								; restore it
.262c					_STAAllocate:
.262c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.262e	18		clc				clc  								; deliberate allows one more
.262f	6d 1e 06	adc $061e			adc 	stringTempPointer 			; subtract from temp pointer
.2632	8d 1e 06	sta $061e			sta 	stringTempPointer
.2635	85 0e		sta $0e				sta 	IFR0+IM0 					; address in mantissa too
.2637	85 2a		sta $2a				sta 	zsTemp 						; and zsTemp
.2639	ad 1f 06	lda $061f			lda 	stringTempPointer+1
.263c	69 ff		adc #$ff			adc 	#$FF
.263e	8d 1f 06	sta $061f			sta 	stringTempPointer+1
.2641	85 2b		sta $2b				sta 	zsTemp+1
.2643	85 0f		sta $0f				sta 	IFR0+IM1
.2645	64 10		stz $10				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2647	a9 80		lda #$80			lda 	#$80
.2649	85 11		sta $11				sta 	IFR0+IExp
.264b	a9 00		lda #$00			lda 	#0 							; clear the target string
.264d	92 2a		sta ($2a)			sta 	(zsTemp)
.264f	60		rts				rts
.2650					_STALength:
.2650	4c a8 24	jmp $24a8		jmp	ErrorV_string
.2653					StringTempWrite:
.2653	5a		phy				phy
.2654	48		pha				pha
.2655	b2 2a		lda ($2a)			lda 	(zsTemp)
.2657	1a		inc a				inc 	a
.2658	92 2a		sta ($2a)			sta 	(zsTemp)
.265a	a8		tay				tay
.265b	68		pla				pla
.265c	91 2a		sta ($2a),y			sta 	(zsTemp),y
.265e	7a		ply				ply
.265f	60		rts				rts
.002a					zsTemp:
>002a							.fill 	2
.061b					stringInitialised:
>061b							.fill 	1
.061c					stringMemory:
>061c							.fill 	2
.061e					stringTempPointer:
>061e							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2660					ErrorHandler:
.2660	fa		plx				plx 								; get address of msg
.2661	7a		ply				ply
.2662	e8		inx				inx 								; bump past RTS
.2663	d0 01		bne $2666			bne 	_EHNoInc
.2665	c8		iny				iny
.2666					_EHNoInc:
.2666	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.2669	ad 20 06	lda $0620			lda 	ERRLine 					; direct command ?
.266c	0d 21 06	ora $0621			ora 	ERRLine+1
.266f	f0 10		beq $2681			beq 	_EHNoNumber
.2671	a2 84		ldx #$84			ldx 	#_EHAtMsg & $FF
.2673	a0 26		ldy #$26			ldy 	#_EHAtMsg >> 8
.2675	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.2678	ad 20 06	lda $0620			lda 	ERRLine 					; line number -> XA
.267b	ae 21 06	ldx $0621			ldx 	ERRLine+1
.267e	20 89 26	jsr $2689			jsr 	WriteIntXA
.2681					_EHNoNumber:
.2681	4c b2 26	jmp $26b2			jmp 	WarmStartNewLine
.2684					_EHAtMsg:
>2684	20 61 74 20 00					.text 	" at ",0
.2689					WriteIntXA:
.2689	da		phx				phx
.268a	48		pha				pha
.268b	a2 0e		ldx #$0e			ldx 	#IFR0
.268d	20 1f 2e	jsr $2e1f			jsr 	IFloatPushRx
.2690	68		pla				pla
.2691	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.2694	68		pla				pla
.2695	85 0f		sta $0f				sta 	IFR0+IM1
.2697	a9 0a		lda #$0a			lda 	#10 						; decimal
.2699	20 71 2c	jsr $2c71			jsr 	IFloatIntegerToStringR0	 	; convert
.269c	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.269f	a2 0e		ldx #$0e			ldx 	#IFR0
.26a1	20 40 2e	jsr $2e40			jsr 	IFloatPullRx
.26a4	60		rts				rts
.26a5					NotImplemented:
.26a5	4c cd 23	jmp $23cd		jmp	ErrorV_unimplemented
.0620					ERRLine:
>0620							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.26a8					WarmStart:
.26a8	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.26aa	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.26ad	a9 6b		lda #$6b			lda 	#"k"
.26af	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.26b2					WarmStartNewLine:
.26b2	a9 0d		lda #$0d			lda 	#13
.26b4	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.26b7					WarmStartNoPrompt:
.26b7	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.26b9	9a		txs				txs
.26ba	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.26bd	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.26bf	f0 f1		beq $26b2			beq 	WarmStartNewLine
.26c1	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.26c3	d0 f2		bne $26b7			bne 	WarmStartNoPrompt
.26c5	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.26c8	e8		inx				inx 								; skip length byte to make it ASCIIZ
.26c9	d0 01		bne $26cc			bne 	_WSSkip
.26cb	c8		iny				iny
.26cc					_WSSkip:
.26cc	86 24		stx $24				stx 	zTemp2 						; save address
.26ce	84 25		sty $25				sty 	zTemp2+1
.26d0	a2 fa		ldx #$fa			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.26d2	a0 26		ldy #$26			ldy 	#TOKGetCharacter >> 8
.26d4	38		sec				sec
.26d5	20 45 1e	jsr $1e45			jsr 	TOKTokenise
.26d8	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.26db	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.26de	d0 0b		bne $26eb			bne 	_WSLineEdit
.26e0	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.26e2	85 1e		sta $1e				sta 	codePtr
.26e4	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.26e6	85 1f		sta $1f				sta 	codePtr+1
.26e8	4c 8b 13	jmp $138b			jmp 	RUNNewLine
.26eb					_WSLineEdit:
.26eb	20 20 1d	jsr $1d20			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.26ee	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.26f1	c9 04		cmp #$04			cmp 	#4
.26f3	f0 03		beq $26f8			beq 	_WSNoInsert
.26f5	20 6a 1d	jsr $1d6a			jsr 	PGMInsertLine				; if not, maybe insert
.26f8					_WSNoInsert:
.26f8	80 bd		bra $26b7			bra 	WarmStartNoPrompt
.26fa					TOKGetCharacter:
.26fa	b2 24		lda ($24)			lda 	(zTemp2)
.26fc	90 06		bcc $2704			bcc 	_GSNoIncrement
.26fe	e6 24		inc $24				inc 	zTemp2
.2700	d0 02		bne $2704			bne 	_GSNoIncrement
.2702	e6 25		inc $25				inc 	zTemp2+1
.2704					_GSNoIncrement:
.2704	c9 00		cmp #$00			cmp 	#0
.2706	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2707					VARArrayLookup:
.2707	85 20		sta $20				sta 	zTemp0 						; save the array address pointer in zTemp0
.2709	86 21		stx $21				stx 	zTemp0+1
.270b	b2 20		lda ($20)			lda 	(zTemp0)
.270d	48		pha				pha
.270e	5a		phy				phy
.270f	a0 01		ldy #$01			ldy 	#1
.2711	b1 20		lda ($20),y			lda 	(zTemp0),y
.2713	7a		ply				ply
.2714	48		pha				pha
.2715	20 cc 15	jsr $15cc			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2718	68		pla				pla 								; array address to zTemp0
.2719	85 21		sta $21				sta 	zTemp0+1
.271b	68		pla				pla
.271c	85 20		sta $20				sta 	zTemp0
.271e	5a		phy				phy 								; save codePtr position.
.271f	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2721	b1 20		lda ($20),y			lda 	(zTemp0),y
.2723	48		pha				pha 								; save bit 15 on stack.
.2724	29 7f		and #$7f			and 	#$7F
.2726	85 22		sta $22				sta 	zTemp1
.2728	a5 0e		lda $0e				lda 	IFR0+IM0 					; check range of index
.272a	d2 20		cmp ($20)			cmp 	(zTemp0)
.272c	a5 0f		lda $0f				lda 	IFR0+IM1
.272e	e5 22		sbc $22				sbc 	zTemp1
.2730	b0 3a		bcs $276c			bcs 	_VALIndex
.2732	a5 0f		lda $0f				lda 	IFR0+IM1  					; sanity check
.2734	c9 40		cmp #$40			cmp 	#$40
.2736	b0 34		bcs $276c			bcs 	_VALIndex
.2738	06 0e		asl $0e				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.273a	26 0f		rol $0f				rol 	IFR0+IM1
.273c	fa		plx				plx 								; get msb of size -> X
.273d	30 04		bmi $2743			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.273f	06 0e		asl $0e				asl 	IFR0+IM0
.2741	26 0f		rol $0f				rol 	IFR0+IM1
.2743					_VARNotX4:
.2743	18		clc				clc 								; add the two for the size bytes
.2744	a5 0e		lda $0e				lda 	IFR0+IM0
.2746	69 02		adc #$02			adc 	#2
.2748	85 0e		sta $0e				sta 	IFR0+IM0
.274a	90 02		bcc $274e			bcc 	_VARNoCarry1
.274c	e6 0f		inc $0f				inc 	IFR0+IM1
.274e					_VARNoCarry1:
.274e	18		clc				clc 								; calculate the element address and push to stack.
.274f	a5 0e		lda $0e				lda 	IFR0+IM0
.2751	65 20		adc $20				adc 	zTemp0
.2753	48		pha				pha
.2754	a5 0f		lda $0f				lda 	IFR0+IM1
.2756	65 21		adc $21				adc 	zTemp0+1
.2758	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.275a	30 04		bmi $2760			bmi 	_VARHasSubLevel
.275c	aa		tax				tax 								; address in XA
.275d	68		pla				pla
.275e	7a		ply				ply 								; restore Y and exit
.275f	60		rts				rts
.2760					_VARHasSubLevel:
.2760	aa		tax				tax 								; get link address in XA
.2761	68		pla				pla
.2762	7a		ply				ply 								; restore code position.
.2763	48		pha				pha
.2764	20 30 25	jsr $2530			jsr 	ERRCheckComma 				; comma required.
.2767	68		pla				pla
.2768	20 07 27	jsr $2707			jsr 	VARArrayLookup 				; call it recursively
.276b	60		rts				rts
.276c					_VALIndex:
.276c	4c 67 24	jmp $2467		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.276f					VARCreate:
.276f	5a		phy				phy
.2770	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2772	a2 00		ldx #$00			ldx 	#0
.2774	20 35 10	jsr $1035			jsr 	AllocateMemory
.2777	85 22		sta $22				sta 	zTemp1 						; save new address in zTemp1
.2779	86 23		stx $23				stx 	zTemp1+1
.277b	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.277d	ad 24 06	lda $0624			lda 	VARHash
.2780	91 22		sta ($22),y			sta 	(zTemp1),y
.2782	c8		iny				iny 								; put address of name into +3,+4
.2783	ad 22 06	lda $0622			lda 	VARNameAddress
.2786	91 22		sta ($22),y			sta 	(zTemp1),y
.2788	c8		iny				iny
.2789	ad 23 06	lda $0623			lda 	VARNameAddress+1
.278c	91 22		sta ($22),y			sta 	(zTemp1),y
.278e	ad 25 06	lda $0625			lda 	VARType
.2791	29 01		and #$01			and 	#1
.2793	f0 06		beq $279b			beq 	_CVNotString
.2795	a0 08		ldy #$08			ldy 	#5+3
.2797	a9 80		lda #$80			lda 	#$80
.2799	91 22		sta ($22),y			sta 	(zTemp1),y
.279b					_CVNotString:
.279b	ad 46 06	lda $0646			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.279e	85 20		sta $20				sta 	zTemp0
.27a0	ad 47 06	lda $0647			lda 	VARHashEntry+1
.27a3	85 21		sta $21				sta 	zTemp0+1
.27a5	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.27a7	b2 20		lda ($20)			lda 	(zTemp0)
.27a9	92 22		sta ($22)			sta 	(zTemp1)
.27ab	b1 20		lda ($20),y			lda 	(zTemp0),y
.27ad	91 22		sta ($22),y			sta 	(zTemp1),y
.27af	a5 22		lda $22				lda 	zTemp1 						; address of the new record into head
.27b1	92 20		sta ($20)			sta 	(zTemp0)
.27b3	a5 23		lda $23				lda 	zTemp1+1
.27b5	91 20		sta ($20),y			sta 	(zTemp0),y
.27b7	a5 22		lda $22				lda 	zTemp1 						; new record to XA
.27b9	a6 23		ldx $23				ldx 	zTemp1+1
.27bb	18		clc				clc 								; add 5 to point to the data.
.27bc	69 05		adc #$05			adc 	#5
.27be	90 01		bcc $27c1			bcc 	_VCNoCarry
.27c0	e8		inx				inx
.27c1					_VCNoCarry:
.27c1	7a		ply				ply
.27c2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.27c3					VARFind:
.27c3	5a		phy				phy
.27c4	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.27c6	b1 20		lda ($20),y			lda 	(zTemp0),y
.27c8	85 23		sta $23				sta 	zTemp1+1
.27ca	f0 1c		beq $27e8			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.27cc	b2 20		lda ($20)			lda 	(zTemp0)
.27ce	85 22		sta $22				sta 	zTemp1
.27d0					_VFLoop:
.27d0	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.27d2	b1 22		lda ($22),y			lda 	(zTemp1),y
.27d4	cd 24 06	cmp $0624			cmp 	VARHash
.27d7	f0 12		beq $27eb			beq 	_VFHashesMatch 				; if so, check the name.
.27d9					_VFNext:
.27d9	b2 22		lda ($22)			lda 	(zTemp1) 					; next link to AX
.27db	aa		tax				tax
.27dc	a0 01		ldy #$01			ldy 	#1
.27de	b1 22		lda ($22),y			lda 	(zTemp1),y
.27e0	85 23		sta $23				sta 	zTemp1+1
.27e2	86 22		stx $22				stx 	zTemp1
.27e4	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.27e6	d0 e8		bne $27d0			bne 	_VFLoop
.27e8					_VFExitFail:
.27e8	7a		ply				ply
.27e9	18		clc				clc
.27ea	60		rts				rts
.27eb					_VFHashesMatch:
.27eb	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.27ed	b1 22		lda ($22),y			lda 	(zTemp1),y
.27ef	85 24		sta $24				sta 	zTemp2
.27f1	c8		iny				iny
.27f2	b1 22		lda ($22),y			lda 	(zTemp1),y
.27f4	85 25		sta $25				sta 	zTemp2+1
.27f6	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.27f8					_VFNameCompLoop:
.27f8	c8		iny				iny 								; char at a time
.27f9	b9 26 06	lda $0626,y			lda 	VARBuffer,y
.27fc	d1 24		cmp ($24),y			cmp 	(zTemp2),y
.27fe	d0 d9		bne $27d9			bne 	_VFNext						; next entry if different.
.2800	c9 7c		cmp #$7c			cmp 	#$7C
.2802	90 f4		bcc $27f8			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2804	18		clc				clc
.2805	a5 22		lda $22				lda 	zTemp1
.2807	a6 23		ldx $23				ldx 	zTemp1+1
.2809	69 05		adc #$05			adc 	#5
.280b	90 01		bcc $280e			bcc 	_VFNNoCarry
.280d	e8		inx				inx
.280e					_VFNNoCarry:
.280e	7a		ply				ply
.280f	38		sec				sec
.2810	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2811					VARGetInfo:
.2811	98		tya				tya 								; calculate the address of the identifier start.
.2812	18		clc				clc
.2813	65 1e		adc $1e				adc 	codePtr
.2815	8d 22 06	sta $0622			sta 	VARNameAddress
.2818	a5 1f		lda $1f				lda 	codePtr+1
.281a	69 00		adc #$00			adc 	#0
.281c	8d 23 06	sta $0623			sta 	VARNameAddress+1
.281f	9c 24 06	stz $0624			stz 	VARHash
.2822	a2 00		ldx #$00			ldx 	#0
.2824					_VARCopyName:
.2824	18		clc				clc 								; update the sum hash.
.2825	ad 24 06	lda $0624			lda 	VARHash
.2828	71 1e		adc ($1e),y			adc 	(codePtr),y
.282a	8d 24 06	sta $0624			sta 	VARHash
.282d	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get character and save it in buffer
.282f	c8		iny				iny
.2830	9d 26 06	sta $0626,x			sta 	VARBuffer,x
.2833	e8		inx				inx
.2834	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2836	90 ec		bcc $2824			bcc 	_VARCopyName
.2838	8d 25 06	sta $0625			sta 	VARType 					; save type byte
.283b	29 03		and #$03			and 	#3 							; type is 0-3
.283d	0a		asl a				asl 	a
.283e	0a		asl a				asl 	a
.283f	85 20		sta $20				sta 	zTemp0
.2841	ad 24 06	lda $0624			lda 	VARHash 					; force into range of hash entries per type.
.2844	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2846	65 20		adc $20				adc 	zTemp0 						; index of hash table
.2848	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2849	69 48		adc #$48			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.284b	85 20		sta $20				sta 	zTemp0
.284d	8d 46 06	sta $0646			sta 	VARHashEntry
.2850	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2852	69 00		adc #$00			adc 	#0
.2854	85 21		sta $21				sta 	zTemp0+1
.2856	8d 47 06	sta $0647			sta 	VARHashEntry+1
.2859	60		rts				rts
.285a					VARClearHashTables:
.285a	a2 00		ldx #$00			ldx 	#0
.285c					_VCHRLoop:
.285c	a9 00		lda #$00			lda 	#0
.285e	9d 48 06	sta $0648,x			sta 	VARHashTables,x
.2861	e8		inx				inx
.2862	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2864	d0 f6		bne $285c			bne 	_VCHRLoop
.2866	60		rts				rts
.0622					VARNameAddress:
>0622							.fill 	2
.0624					VARHash:
>0624							.fill 	1
.0625					VARType:
>0625							.fill 	1
.0626					VARBuffer:
>0626							.fill 	32
.0646					VARHashEntry:
>0646							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0648					VARHashTables:
>0648							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2867					VARCheckSimple:
.2867	aa		tax				tax 								; save in X
.2868	b1 1e		lda ($1e),y			lda 	(codePtr),y
.286a	c9 7c		cmp #$7c			cmp 	#$7C
.286c	d0 15		bne $2883			bne 	_VCSComplex
.286e	c8		iny				iny 								; consume the second byte, the type.
.286f	8a		txa				txa  								; character (40-7F) x 4
.2870	0a		asl a				asl 	a
.2871	0a		asl a				asl  	a
.2872	18		clc				clc
.2873	69 68		adc #$68			adc 	#FastVariables & $FF
.2875	85 0e		sta $0e				sta 	IFR0+IM0
.2877	a9 06		lda #$06			lda 	#FastVariables >> 8
.2879	69 00		adc #$00			adc 	#0
.287b	85 0f		sta $0f				sta 	IFR0+IM1
.287d	64 10		stz $10				stz 	IFR0+IM2
.287f	64 11		stz $11				stz 	IFR0+IExp
.2881	38		sec				sec 								; it's a reference
.2882	60		rts				rts
.2883					_VCSComplex:
.2883	88		dey				dey	 								; extract information.
.2884	20 11 28	jsr $2811			jsr 	VARGetInfo
.2887	20 c3 27	jsr $27c3			jsr 	VARFind 					; search for variable
.288a	b0 0a		bcs $2896			bcs 	_VCSHaveVariable
.288c	ad 25 06	lda $0625			lda 	VARType 					; error if arrays, cannot autocreate
.288f	29 02		and #$02			and 	#2
.2891	d0 25		bne $28b8			bne 	_VCNoCreate
.2893	20 6f 27	jsr $276f			jsr 	VARCreate 					; create variable
.2896					_VCSHaveVariable:
.2896	48		pha				pha 								; save LSB on the stack
.2897	ad 25 06	lda $0625			lda 	VARType 					; get var type, and shift bit 1 into carry
.289a	6a		ror a				ror 	a
.289b	6a		ror a				ror 	a
.289c	68		pla				pla 								; restore LSB
.289d	90 08		bcc $28a7			bcc 	_VCSNotArray 				; skip if not an array
.289f	20 07 27	jsr $2707			jsr 	VARArrayLookup 				; look for subscripts.
.28a2	48		pha				pha 								; check )
.28a3	20 28 25	jsr $2528			jsr 	ERRCheckRParen
.28a6	68		pla				pla
.28a7					_VCSNotArray:
.28a7	86 0f		stx $0f				stx 	IFR0+IM1 					; save address
.28a9	85 0e		sta $0e				sta 	IFR0+IM0
.28ab	64 10		stz $10				stz 	IFR0+IM2 					; clear the unused byte.
.28ad	ad 25 06	lda $0625			lda 	VARType 					; number/string bit into carry
.28b0	6a		ror a				ror 	a
.28b1	a9 00		lda #$00			lda 	#0
.28b3	6a		ror a				ror 	a 							; now $00 or $80
.28b4	85 11		sta $11				sta 	IFR0+IExp
.28b6	38		sec				sec 								; it's a reference
.28b7	60		rts				rts
.28b8					_VCNoCreate:
.28b8	4c 8d 24	jmp $248d		jmp	ErrorV_uninitialised
.0668					FastVariables:
>0668							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.28bb					IFInitialise:
.28bb	9c d8 06	stz $06d8			stz 	IFStackIndex
.28be	60		rts				rts
.28bf					IFloatSubtract:
.28bf	da		phx				phx
.28c0	a2 0e		ldx #$0e			ldx 	#IFR0
.28c2	20 db 2e	jsr $2edb			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.28c5	fa		plx				plx
.28c6					IFloatAdd:
.28c6	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.28c8	05 11		ora $11				ora 	IFR0+IExp
.28ca	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.28cc	d0 4e		bne $291c			bne 	_IFloatAddDecimals 			; decimal version.
.28ce					_IFAddSubMantissa:
.28ce	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.28d0	45 11		eor $11				eor 	IFR0+IExp
.28d2	29 40		and #$40			and 	#IFSign
.28d4	d0 21		bne $28f7			bne 	_IFloatSubMantissa
.28d6	18		clc				clc 								; do the actual addition
.28d7	a5 0e		lda $0e			lda 	IFR0+IM0
.28d9	75 00		adc $00,x		adc 		IM0,x
.28db	85 0e		sta $0e			sta 	IFR0+IM0
.28dd	a5 0f		lda $0f			lda 	IFR0+IM1
.28df	75 01		adc $01,x		adc 		IM1,x
.28e1	85 0f		sta $0f			sta 	IFR0+IM1
.28e3	a5 10		lda $10			lda 	IFR0+IM2
.28e5	75 02		adc $02,x		adc 		IM2,x
.28e7	85 10		sta $10			sta 	IFR0+IM2
.28e9	10 29		bpl $2914			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.28eb	a2 0e		ldx #$0e			ldx 	#IFR0						; shift R0 right, divide by 2
.28ed	20 ff 2e	jsr $2eff			jsr 	IFloatShiftRight
.28f0	20 29 2f	jsr $2f29			jsr 	IFloatIncExponent
.28f3	d0 1f		bne $2914			bne 	_IFloatAddExit
.28f5	38		sec				sec 								; overflowed numerically.
.28f6	60		rts				rts
.28f7					_IFloatSubMantissa:
.28f7	38		sec				sec 								; do the subtraction R0-Rx
.28f8	a5 0e		lda $0e			lda 	IFR0+IM0
.28fa	f5 00		sbc $00,x		sbc 		IM0,x
.28fc	85 0e		sta $0e			sta 	IFR0+IM0
.28fe	a5 0f		lda $0f			lda 	IFR0+IM1
.2900	f5 01		sbc $01,x		sbc 		IM1,x
.2902	85 0f		sta $0f			sta 	IFR0+IM1
.2904	a5 10		lda $10			lda 	IFR0+IM2
.2906	f5 02		sbc $02,x		sbc 		IM2,x
.2908	85 10		sta $10			sta 	IFR0+IM2
.290a	b0 08		bcs $2914			bcs 	_IFloatAddExit 				; no borrow so we are done.
.290c	a2 0e		ldx #$0e			ldx 	#IFR0
.290e	20 e3 2e	jsr $2ee3			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2911	20 db 2e	jsr $2edb			jsr 	IFloatNegate 				; negate
.2914					_IFloatAddExit:
.2914	18		clc				clc
.2915	60		rts				rts
.2916					_IFloatZeroAdd:
.2916	fa		plx				plx 								; return this value in R0
.2917	20 61 2e	jsr $2e61			jsr 	IFloatCopyFromRegister
.291a	18		clc				clc
.291b	60		rts				rts
.291c					_IFloatAddDecimals:
.291c	20 c9 2e	jsr $2ec9			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.291f	f0 f3		beq $2914			beq 	_IFloatAddExit
.2921	20 07 2f	jsr $2f07			jsr 	IFloatNormalise 			; normalise RX
.2924	da		phx				phx 								; normalise R0
.2925	a2 0e		ldx #$0e			ldx 	#IFR0
.2927	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero
.292a	f0 ea		beq $2916			beq 	_IFloatZeroAdd
.292c	20 07 2f	jsr $2f07			jsr 	IFloatNormalise
.292f	fa		plx				plx
.2930	a5 11		lda $11				lda 	IFR0+IExp 					; get the exponent of R0
.2932	29 3f		and #$3f			and 	#IFXMask
.2934	38		sec				sec
.2935	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2937	85 0c		sta $0c				sta 	iTemp0
.2939	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.293b	29 3f		and #$3f			and 	#IFXMask
.293d	38		sec				sec
.293e	e9 20		sbc #$20			sbc 	#$20
.2940	c5 0c		cmp $0c				cmp 	iTemp0 						; get the larger adjusted
.2942	b0 02		bcs $2946			bcs 	_IFloatHaveLarger
.2944	a5 0c		lda $0c				lda 	iTemp0
.2946					_IFloatHaveLarger:
.2946	18		clc				clc 								; get the actual one back.
.2947	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2949	20 56 29	jsr $2956			jsr 	_IFShiftXToA
.294c	da		phx				phx
.294d	a2 0e		ldx #$0e			ldx 	#IFR0
.294f	20 56 29	jsr $2956			jsr 	_IFShiftXToA
.2952	fa		plx				plx
.2953	4c ce 28	jmp $28ce			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2956					_IFShiftXToA:
.2956	8d d0 06	sta $06d0			sta 	IFTarget
.2959	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero 			; check adding zero ?
.295c	f0 11		beq $296f			beq 	_IFSXExit
.295e					_IFSXLoop:
.295e	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2960	29 3f		and #$3f			and 	#IFXMask
.2962	cd d0 06	cmp $06d0			cmp 	IFTarget
.2965	f0 08		beq $296f			beq 	_IFSXExit
.2967	20 ff 2e	jsr $2eff			jsr 	IFloatShiftRight
.296a	20 29 2f	jsr $2f29			jsr 	IFloatIncExponent
.296d	80 ef		bra $295e			bra 	_IFSXLoop
.296f					_IFSXExit:
.296f	60		rts				rts
.06d0					IFTarget:
>06d0							.fill 	1
.2970					IFloatMultiply:
.2970	8e d0 06	stx $06d0			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2973	20 2b 2a	jsr $2a2b			jsr 	IFCalculateNewSign
.2976	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2978	05 11		ora $11				ora 	IFR0+IExp
.297a	29 3f		and #$3f			and 	#IFXMask
.297c	15 01		ora $01,x			ora 	IM1,x
.297e	05 0f		ora $0f				ora 	IFR0+IM1
.2980	15 02		ora $02,x			ora 	IM2,x
.2982	05 10		ora $10				ora 	IFR0+IM2
.2984	d0 0a		bne $2990			bne 	_IFMStandard
.2986	20 ac 2e	jsr $2eac			jsr 	IFloatMultiply8BitRx
.2989	ad d2 06	lda $06d2			lda 	IFNewSign
.298c	85 11		sta $11				sta 	IFR0+IExp
.298e	18		clc				clc
.298f	60		rts				rts
.2990					_IFMStandard:
.2990	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2992	20 22 2a	jsr $2a22			jsr 	IFMSignExtend
.2995	8d d1 06	sta $06d1			sta 	IFNewExponent
.2998	a5 11		lda $11				lda 	IFR0+IExp
.299a	20 22 2a	jsr $2a22			jsr 	IFMSignExtend
.299d	18		clc				clc
.299e	6d d1 06	adc $06d1			adc 	IFNewExponent
.29a1	8d d1 06	sta $06d1			sta 	IFNewExponent
.29a4	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.29a6	20 72 2e	jsr $2e72			jsr 	IFloatCopyToRegister
.29a9	a2 0e		ldx #$0e			ldx 	#IFR0 						; zero R0 (the result)
.29ab	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.29ae					_IFMLoop:
.29ae	a2 1a		ldx #$1a			ldx 	#IFRTemp
.29b0	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero
.29b3	f0 3a		beq $29ef			beq 	_IFMExit
.29b5	ae d0 06	ldx $06d0			ldx 	IFTarget 					; look at adder MSB
.29b8	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.29ba	10 03		bpl $29bf			bpl	 	_IFMTargetOkay
.29bc	20 13 2a	jsr $2a13			jsr 	_IFMShiftAll
.29bf					_IFMTargetOkay:
.29bf	a5 1a		lda $1a				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.29c1	29 01		and #$01			and 	#1
.29c3	f0 16		beq $29db			beq 	_IFMNoAdd
.29c5	ae d0 06	ldx $06d0			ldx 	IFTarget 					; add adder
.29c8	18		clc				clc
.29c9	a5 0e		lda $0e			lda 	IFR0+IM0
.29cb	75 00		adc $00,x		adc 		IM0,x
.29cd	85 0e		sta $0e			sta 	IFR0+IM0
.29cf	a5 0f		lda $0f			lda 	IFR0+IM1
.29d1	75 01		adc $01,x		adc 		IM1,x
.29d3	85 0f		sta $0f			sta 	IFR0+IM1
.29d5	a5 10		lda $10			lda 	IFR0+IM2
.29d7	75 02		adc $02,x		adc 		IM2,x
.29d9	85 10		sta $10			sta 	IFR0+IM2
.29db					_IFMNoAdd:
.29db	a5 10		lda $10				lda 	IFR0+IM2
.29dd	10 03		bpl $29e2			bpl 	_IFMResultOkay
.29df	20 13 2a	jsr $2a13			jsr 	_IFMShiftAll
.29e2					_IFMResultOkay:
.29e2	a2 1a		ldx #$1a			ldx 	#IFRTemp
.29e4	20 ff 2e	jsr $2eff			jsr 	IFloatShiftRight
.29e7	ae d0 06	ldx $06d0			ldx 	IFTarget
.29ea	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.29ed	80 bf		bra $29ae			bra 	_IFMLoop
.29ef					_IFMExit:
.29ef	ad d1 06	lda $06d1			lda 	IFNewExponent 				; validate new exponent.
.29f2	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.29f4	90 0f		bcc $2a05			bcc 	_IFMOkay
.29f6	c9 e0		cmp #$e0			cmp 	#$E0
.29f8	b0 0b		bcs $2a05			bcs 	_IFMOkay
.29fa	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.29fc	f0 13		beq $2a11			beq 	_IFMError
.29fe	a2 0e		ldx #$0e			ldx 	#IFR0 						; return zero underflow
.2a00	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.2a03	18		clc				clc
.2a04	60		rts				rts
.2a05					_IFMOkay:
.2a05	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2a07	0d d2 06	ora $06d2			ora 	IFNewSign
.2a0a	85 11		sta $11				sta 	IFR0+IExp
.2a0c	18		clc				clc
.2a0d	60		rts				rts
.2a0e	4c ff ff	jmp $ffff			jmp 	$FFFF
.2a11					_IFMError:
.2a11	38		sec				sec
.2a12	60		rts				rts
.2a13					_IFMShiftAll:
.2a13	a2 0e		ldx #$0e			ldx 	#IFR0
.2a15	20 ff 2e	jsr $2eff			jsr 	IFloatShiftRight
.2a18	ae d0 06	ldx $06d0			ldx 	IFTarget
.2a1b	20 ff 2e	jsr $2eff			jsr 	IFloatShiftRight
.2a1e	ee d1 06	inc $06d1			inc 	IFNewExponent
.2a21	60		rts				rts
.2a22					IFMSignExtend:
.2a22	29 3f		and #$3f			and 	#IFXMask
.2a24	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2a26	90 02		bcc $2a2a			bcc 	_IFMNoSXX
.2a28	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2a2a					_IFMNoSXX:
.2a2a	60		rts				rts
.2a2b					IFCalculateNewSign:
.2a2b	b5 03		lda $03,x			lda 	IExp,x
.2a2d	45 11		eor $11				eor 	IFR0+IExp
.2a2f	29 40		and #$40			and 	#IFSign
.2a31	8d d2 06	sta $06d2			sta 	IFNewSign
.2a34	60		rts				rts
.06d1					IFNewExponent:
>06d1							.fill 	1
.06d2					IFNewSign:
>06d2							.fill 	1
.2a35					IFloatDivideInteger:
.2a35	20 4e 2a	jsr $2a4e			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2a38	b0 06		bcs $2a40			bcs 	_IFDIExit
.2a3a	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy result from register.
.2a3c	20 61 2e	jsr $2e61			jsr 	IFloatCopyFromRegister
.2a3f	18		clc				clc
.2a40					_IFDIExit:
.2a40	60		rts				rts
.2a41					IFloatModulusInteger:
.2a41	20 4e 2a	jsr $2a4e			jsr 	IFloatDivideIntegerCommon
.2a44	b0 07		bcs $2a4d			bcs 	_IFMIExit
.2a46	ae d0 06	ldx $06d0			ldx 	IFTarget
.2a49	20 61 2e	jsr $2e61			jsr 	IFloatCopyFromRegister
.2a4c	18		clc				clc
.2a4d					_IFMIExit:
.2a4d	60		rts				rts
.2a4e					IFloatDivideIntegerCommon:
.2a4e	8e d0 06	stx $06d0			stx 	IFTarget  					; this is s1, s0 = R0
.2a51	20 2b 2a	jsr $2a2b			jsr 	IFCalculateNewSign 			; calculate sign of result
.2a54	20 7c 2a	jsr $2a7c			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2a57	a2 0e		ldx #$0e			ldx 	#IFR0 						; check divide by zero
.2a59	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero
.2a5c	f0 1c		beq $2a7a			beq 	_IFDIDivZero
.2a5e	ae d0 06	ldx $06d0			ldx 	IFTarget 					; zero Rx (S1)
.2a61	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.2a64	5a		phy				phy
.2a65	a0 18		ldy #$18			ldy 	#24
.2a67					_IFDILoop:
.2a67	20 8d 2a	jsr $2a8d			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2a6a	20 99 2a	jsr $2a99			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2a6d	88		dey				dey
.2a6e	d0 f7		bne $2a67			bne 	_IFDILoop 					; do it 24 times
.2a70	7a		ply				ply
.2a71	ad d2 06	lda $06d2			lda 	IFNewSign 					; set sign of result.
.2a74	29 40		and #$40			and 	#IFSign
.2a76	85 1d		sta $1d				sta 	IFRTemp+IExp
.2a78	18		clc				clc 								; is okay.
.2a79	60		rts				rts
.2a7a					_IFDIDivZero:
.2a7a	38		sec				sec
.2a7b	60		rts				rts
.2a7c					IFDCopyRXToRTemp:
.2a7c	b5 00		lda $00,x			lda 	IM0,x
.2a7e	85 1a		sta $1a				sta 	IFRTemp+IM0
.2a80	b5 01		lda $01,x			lda 	IM1,x
.2a82	85 1b		sta $1b				sta 	IFRTemp+IM1
.2a84	b5 02		lda $02,x			lda 	IM2,x
.2a86	85 1c		sta $1c				sta 	IFRTemp+IM2
.2a88	b5 03		lda $03,x			lda 	IExp,x
.2a8a	85 1d		sta $1d				sta 	IFRTemp+IExp
.2a8c	60		rts				rts
.2a8d					IFDShiftSTempS1Left:
.2a8d	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2a8f	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft
.2a92	ae d0 06	ldx $06d0			ldx 	IFTarget
.2a95	20 f8 2e	jsr $2ef8			jsr 	IFloatRotateLeft
.2a98	60		rts				rts
.2a99					IFDTrySubtract:
.2a99	ae d0 06	ldx $06d0			ldx 	IFTarget 					; s1 = Rx
.2a9c	38		sec				sec 								; subtract, saving the results on the stack.
.2a9d	b5 00		lda $00,x			lda 	IM0,x
.2a9f	e5 0e		sbc $0e				sbc 	IFR0+IM0
.2aa1	48		pha				pha
.2aa2	b5 01		lda $01,x			lda 	IM1,x
.2aa4	e5 0f		sbc $0f				sbc 	IFR0+IM1
.2aa6	48		pha				pha
.2aa7	b5 02		lda $02,x			lda 	IM2,x
.2aa9	e5 10		sbc $10				sbc 	IFR0+IM2
.2aab	b0 03		bcs $2ab0			bcs 	_IFDCanSubtract
.2aad	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2aae	68		pla				pla
.2aaf	60		rts				rts
.2ab0					_IFDCanSubtract:
.2ab0	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2ab2	68		pla				pla
.2ab3	95 01		sta $01,x			sta 	IM1,x
.2ab5	68		pla				pla
.2ab6	95 00		sta $00,x			sta 	IM0,x
.2ab8	e6 1a		inc $1a				inc 	IFRTemp+IM0 				; increment temp
.2aba	d0 06		bne $2ac2			bne 	_IFDCSExit
.2abc	e6 1b		inc $1b				inc 	IFRTemp+IM1
.2abe	d0 02		bne $2ac2			bne 	_IFDCSExit
.2ac0	e6 1c		inc $1c				inc 	IFRTemp+IM2
.2ac2					_IFDCSExit:
.2ac2	60		rts				rts
.2ac3					IFloatBitwiseAnd:
.2ac3	5a		phy				phy
.2ac4	20 08 2b	jsr $2b08			jsr 	IFPreProcessBitwise 		; set up everything.
.2ac7	d0 0f		bne $2ad8			bne 	_IFBAExit
.2ac9					_IFBALoop:
.2ac9	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2acc	35 00		and $00,x			and 	IM0,x
.2ace	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2ad1	e8		inx				inx
.2ad2	c8		iny				iny
.2ad3	c0 03		cpy #$03			cpy 	#3
.2ad5	d0 f2		bne $2ac9			bne 	_IFBALoop
.2ad7	18		clc				clc
.2ad8					_IFBAExit:
.2ad8	7a		ply				ply
.2ad9	60		rts				rts
.2ada					IFloatBitwiseOr:
.2ada	5a		phy				phy
.2adb	20 08 2b	jsr $2b08			jsr 	IFPreProcessBitwise 		; set up everything.
.2ade	d0 0f		bne $2aef			bne 	_IFBAExit
.2ae0					_IFBALoop:
.2ae0	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2ae3	15 00		ora $00,x			ora 	IM0,x
.2ae5	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2ae8	e8		inx				inx
.2ae9	c8		iny				iny
.2aea	c0 03		cpy #$03			cpy 	#3
.2aec	d0 f2		bne $2ae0			bne 	_IFBALoop
.2aee	18		clc				clc
.2aef					_IFBAExit:
.2aef	7a		ply				ply
.2af0	60		rts				rts
.2af1					IFloatBitwiseXor:
.2af1	5a		phy				phy
.2af2	20 08 2b	jsr $2b08			jsr 	IFPreProcessBitwise 		; set up everything.
.2af5	d0 0f		bne $2b06			bne 	_IFBAExit
.2af7					_IFBALoop:
.2af7	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2afa	55 00		eor $00,x			eor 	IM0,x
.2afc	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2aff	e8		inx				inx
.2b00	c8		iny				iny
.2b01	c0 03		cpy #$03			cpy 	#3
.2b03	d0 f2		bne $2af7			bne 	_IFBALoop
.2b05	18		clc				clc
.2b06					_IFBAExit:
.2b06	7a		ply				ply
.2b07	60		rts				rts
.2b08					IFPreProcessBitwise:
.2b08	a0 00		ldy #$00			ldy 	#0 							; set index.
.2b0a	a5 11		lda $11				lda 	IFR0+IExp 					; OR exponents
.2b0c	15 03		ora $03,x			ora 	IExp,x
.2b0e	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2b10	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2b12	38		sec				sec 								; carry set just in cases.
.2b13	60		rts				rts
.2b14					IFloatAbsoluteR0:
.2b14	a5 11		lda $11				lda 	IFR0+IExp					; reset the sign bit.
.2b16	29 bf		and #$bf			and 	#IFSign ^ 255
.2b18	85 11		sta $11				sta 	IFR0+IExp
.2b1a	18		clc				clc
.2b1b	60		rts				rts
.2b1c					IFloatSquareRootR0:
.2b1c	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, return zero.
.2b1e	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero
.2b21	a5 11		lda $11				lda	 	IFR0+IExp 					; if negative fail.
.2b23	29 40		and #$40			and 	#IFSign
.2b25	d0 2f		bne $2b56			bne 	_IFSRFail
.2b27	20 07 2f	jsr $2f07			jsr 	IFloatNormalise 			; it will work better !
.2b2a	a2 12		ldx #$12			ldx 	#IFR1 						; R1 contains original throughout
.2b2c	20 72 2e	jsr $2e72			jsr 	IFloatCopyToRegister
.2b2f	a5 11		lda $11				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2b31	20 22 2a	jsr $2a22			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2b34	18		clc				clc
.2b35	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2b37	85 11		sta $11				sta 	IFR0+IExp
.2b39	4a		lsr a				lsr 	a 							; which we can halve.
.2b3a	38		sec				sec 								; convert back
.2b3b	e9 17		sbc #$17			sbc 	#23
.2b3d	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2b3f	85 11		sta $11				sta 	IFR0+IExp 					; to R0
.2b41	20 58 2b	jsr $2b58			jsr 	_IFSRNewton
.2b44	20 58 2b	jsr $2b58			jsr 	_IFSRNewton
.2b47	20 58 2b	jsr $2b58			jsr 	_IFSRNewton
.2b4a	20 58 2b	jsr $2b58			jsr 	_IFSRNewton
.2b4d	18		clc				clc
.2b4e	60		rts				rts
.2b4f					_IFSRZero:
.2b4f	a2 0e		ldx #$0e			ldx 	#IFR0
.2b51	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.2b54	18		clc				clc
.2b55	60		rts				rts
.2b56					_IFSRFail:
.2b56	38		sec				sec
.2b57	60		rts				rts
.2b58					_IFSRNewton:
.2b58	a2 12		ldx #$12			ldx 	#IFR1 						; push original value (R3) on the stack
.2b5a	20 1f 2e	jsr $2e1f			jsr 	IFloatPushRx
.2b5d	a2 0e		ldx #$0e			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2b5f	20 1f 2e	jsr $2e1f			jsr 	IFloatPushRx
.2b62	a2 12		ldx #$12			ldx 	#IFR1 						; guess = original / guess
.2b64	20 f3 2b	jsr $2bf3			jsr 	IFloatDivideFloat
.2b67	a2 12		ldx #$12			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2b69	20 40 2e	jsr $2e40			jsr 	IFloatPullRx
.2b6c	20 c6 28	jsr $28c6			jsr 	IFloatAdd 					; now guess + original/guess
.2b6f	a2 0e		ldx #$0e			ldx 	#IFR0 						; divide by 2
.2b71	20 ff 2e	jsr $2eff			jsr 	IFloatShiftRight
.2b74	a2 12		ldx #$12			ldx 	#IFR1
.2b76	20 40 2e	jsr $2e40			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2b79	60		rts				rts
.2b7a					IFloatFractionalR0:
.2b7a	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2b7c	29 3f		and #$3f			and 	#IFXMask
.2b7e	f0 17		beq $2b97			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2b80	20 14 2b	jsr $2b14			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2b83	a2 0e		ldx #$0e			ldx 	#IFR0
.2b85	20 07 2f	jsr $2f07			jsr 	IFloatNormalise 			; normalise R0
.2b88	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy to RTemp
.2b8a	20 72 2e	jsr $2e72			jsr 	IFloatCopyToRegister
.2b8d	20 d0 2b	jsr $2bd0			jsr 	IFloatIntegerR0 			; take integer part of R0
.2b90	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; subtract
.2b92	20 bf 28	jsr $28bf			jsr 	IFloatSubtract
.2b95	80 05		bra $2b9c			bra 	_FIPExit
.2b97					_FIPZero:
.2b97	a2 0e		ldx #$0e			ldx 	#IFR0
.2b99	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.2b9c					_FIPExit:
.2b9c	18		clc				clc
.2b9d	60		rts				rts
.2b9e					IFloatCompare:
.2b9e	20 bf 28	jsr $28bf			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2ba1	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2ba3	05 11		ora $11				ora 	IFR0+IExp
.2ba5	a2 0e		ldx #$0e			ldx 	#IFR0 						; only using R0 from now on.
.2ba7	29 3f		and #$3f			and 	#IFXMask
.2ba9	d0 19		bne $2bc4			bne 	_IFCNonInteger
.2bab	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero 			; check if zero
.2bae	f0 0f		beq $2bbf			beq 	_IFCZero
.2bb0					_IFCReturnSign:
.2bb0	a5 11		lda $11				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2bb2	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2bb4	48		pha				pha
.2bb5	a9 01		lda #$01			lda 	#1
.2bb7	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte 				; return to +1
.2bba	68		pla				pla 								; sign bit back
.2bbb	85 11		sta $11				sta 	IFR0+IExp					; set that sign
.2bbd	18		clc				clc
.2bbe	60		rts				rts
.2bbf					_IFCZero:
.2bbf	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.2bc2	18		clc				clc
.2bc3	60		rts				rts
.2bc4					_IFCNonInteger:
.2bc4	a5 0e		lda $0e				lda 	IFR0+IM0
.2bc6	29 00		and #$00			and		#$00
.2bc8	05 0f		ora $0f				ora 	IFR0+IM1
.2bca	05 10		ora $10				ora 	IFR0+IM2
.2bcc	f0 f1		beq $2bbf			beq 	_IFCZero 					; near enough !
.2bce	80 e0		bra $2bb0			bra 	_IFCReturnSign 				; return the sign of the difference.
.2bd0					IFloatIntegerR0:
.2bd0	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2bd2	29 3f		and #$3f			and 	#IFXMask
.2bd4	f0 1b		beq $2bf1			beq 	_FIPExit 					; if so do nothing
.2bd6	a2 0e		ldx #$0e			ldx 	#IFR0
.2bd8	20 07 2f	jsr $2f07			jsr 	IFloatNormalise 			; normalise
.2bdb	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero 			; is it zero ?
.2bde	f0 0e		beq $2bee			beq 	_FIPZero 					; if so return zero.
.2be0					_FIPShift:
.2be0	a5 11		lda $11				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2be2	29 20		and #$20			and 	#$20 						; still -ve
.2be4	f0 0b		beq $2bf1			beq 	_FIPExit
.2be6	20 ff 2e	jsr $2eff			jsr 	IFloatShiftRight 			; shift mantissa right
.2be9	20 29 2f	jsr $2f29			jsr 	IFloatIncExponent 			; bump exponent
.2bec	80 f2		bra $2be0			bra 	_FIPShift
.2bee					_FIPZero:
.2bee	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.2bf1					_FIPExit:
.2bf1	18		clc				clc
.2bf2	60		rts				rts
.2bf3					IFloatDivideFloat:
.2bf3	8e d0 06	stx $06d0			stx 	IFTarget  					; this is s1, s0 = R0
.2bf6	20 2b 2a	jsr $2a2b			jsr 	IFCalculateNewSign 			; calculate sign of result
.2bf9	20 07 2f	jsr $2f07			jsr 	IFloatNormalise 			; normalise RX
.2bfc	a2 0e		ldx #$0e			ldx 	#IFR0 						; normalise R0
.2bfe	20 07 2f	jsr $2f07			jsr 	IFloatNormalise
.2c01	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero
.2c04	f0 56		beq $2c5c			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2c06	a5 11		lda $11				lda 	IFR0+IExp 					; calculate s0.exponent
.2c08	20 22 2a	jsr $2a22			jsr 	IFMSignExtend
.2c0b	8d d1 06	sta $06d1			sta 	IFNewExponent
.2c0e	ae d0 06	ldx $06d0			ldx 	IFTarget 					; calculate s1.exponent
.2c11	b5 03		lda $03,x			lda 	IExp,x
.2c13	20 22 2a	jsr $2a22			jsr 	IFMSignExtend
.2c16	38		sec				sec
.2c17	ed d1 06	sbc $06d1			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2c1a	38		sec				sec
.2c1b	e9 17		sbc #$17			sbc 	#23
.2c1d	8d d1 06	sta $06d1			sta 	IFNewExponent
.2c20	20 5e 2c	jsr $2c5e			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2c23	a5 1c		lda $1c				lda 	IFRTemp+IM2 				; result has overflowed ?
.2c25	10 08		bpl $2c2f			bpl 	_IFDFNoShiftResult
.2c27	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; if so, fix it up.
.2c29	20 ff 2e	jsr $2eff			jsr 	IFloatShiftRight
.2c2c	ee d1 06	inc $06d1			inc 	IFNewExponent
.2c2f					_IFDFNoShiftResult:
.2c2f	ad d1 06	lda $06d1			lda 	IFNewExponent 				; underflow/overflow check.
.2c32	30 06		bmi $2c3a			bmi 	_IFDFCheckUnderflow
.2c34	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2c36	b0 24		bcs $2c5c			bcs 	_IFDFDivZero
.2c38	80 11		bra $2c4b			bra		_IFDFExit
.2c3a					_IFDFCheckUnderflow:
.2c3a	ad d1 06	lda $06d1			lda 	IFNewExponent 				; shift into a legal exponent.
.2c3d	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2c3f	b0 0a		bcs $2c4b			bcs 	_IFDFExit
.2c41	ee d1 06	inc $06d1			inc 	IFNewExponent
.2c44	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2c46	20 ff 2e	jsr $2eff			jsr 	IFloatShiftRight
.2c49	80 ef		bra $2c3a			bra 	_IFDFCheckUnderflow
.2c4b					_IFDFExit:
.2c4b	ad d1 06	lda $06d1			lda 	IFNewExponent 				; combine exponent and sign.
.2c4e	29 3f		and #$3f			and 	#IFXMask
.2c50	0d d2 06	ora $06d2			ora 	IFNewSign
.2c53	85 1d		sta $1d				sta 	IFRTemp+IExp
.2c55	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy RTemp to R0.
.2c57	20 61 2e	jsr $2e61			jsr 	IFloatCopyFromRegister
.2c5a	18		clc				clc
.2c5b	60		rts				rts
.2c5c					_IFDFDivZero:
.2c5c	38		sec				sec
.2c5d	60		rts				rts
.2c5e					IFloatDivideSupport:
.2c5e	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; zero RTemp
.2c60	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.2c63	5a		phy				phy 								; main division loop x 23
.2c64	a0 17		ldy #$17			ldy 	#23
.2c66					_IFDSLoop:
.2c66	20 99 2a	jsr $2a99			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2c69	20 8d 2a	jsr $2a8d			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2c6c	88		dey				dey
.2c6d	d0 f7		bne $2c66			bne 	_IFDSLoop 					; do it 24 times
.2c6f	7a		ply				ply
.2c70	60		rts				rts
.2c71					IFloatIntegerToStringR0:
.2c71	8d d3 06	sta $06d3			sta 	IFBase 						; save base to use.
.2c74	20 51 2f	jsr $2f51			jsr 	IFloatBufferReset			; empty buffer
.2c77	a5 11		lda $11				lda 	IFR0+IExp					; check integer
.2c79	29 3f		and #$3f			and 	#IFXMask
.2c7b	d0 1e		bne $2c9b			bne 	_IFIFail
.2c7d	a2 0e		ldx #$0e			ldx 	#IFR0 						; skip - check if zero.
.2c7f	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero
.2c82	f0 0e		beq $2c92			beq 	_IFINotNegative
.2c84	a5 11		lda $11				lda 	IFR0+IExp 					; is signed ?
.2c86	29 40		and #$40			and 	#IFSign
.2c88	f0 08		beq $2c92			beq 	_IFINotNegative
.2c8a	a9 2d		lda #$2d			lda 	#"-"						; output -
.2c8c	20 60 2f	jsr $2f60			jsr 	IFloatBufferWrite
.2c8f	20 db 2e	jsr $2edb			jsr 	IFloatNegate 				; tidy up !
.2c92					_IFINotNegative:
.2c92	20 9d 2c	jsr $2c9d			jsr 	_IFIRecursiveConvert 		; start converting
.2c95	20 58 2f	jsr $2f58			jsr 	IFloatGetBufferAddress
.2c98	18		clc				clc
.2c99	80 01		bra $2c9c			bra 	_IFIExit
.2c9b					_IFIFail:
.2c9b	38		sec				sec
.2c9c					_IFIExit:
.2c9c	60		rts				rts
.2c9d					_IFIRecursiveConvert:
.2c9d	a2 12		ldx #$12			ldx 	#IFR1
.2c9f	20 72 2e	jsr $2e72			jsr 	IFloatCopyToRegister 		; R0->R1
.2ca2	a2 0e		ldx #$0e			ldx 	#IFR0
.2ca4	ad d3 06	lda $06d3			lda 	IFBase 						; Base -> R0
.2ca7	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.2caa	a2 12		ldx #$12			ldx 	#IFR1 						; R0 = R1 / R0
.2cac	20 35 2a	jsr $2a35			jsr 	IFloatDivideInteger
.2caf	a2 0e		ldx #$0e			ldx 	#IFR0 						; if result <> 0
.2cb1	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero
.2cb4	f0 09		beq $2cbf			beq 	_IFIOutDigit
.2cb6	a5 12		lda $12				lda 	IFR1+IM0 					; save remainder
.2cb8	48		pha				pha
.2cb9	20 9d 2c	jsr $2c9d			jsr 	_IFIRecursiveConvert 		; convert the divider
.2cbc	68		pla				pla
.2cbd	85 12		sta $12				sta 	IFR1+IM0 					; restore remainder
.2cbf					_IFIOutDigit:
.2cbf	a5 12		lda $12				lda 	IFR1+IM0 					; get remainder.
.2cc1	c9 0a		cmp #$0a			cmp	 	#10
.2cc3	90 02		bcc $2cc7			bcc 	_IFINotHex
.2cc5	69 06		adc #$06			adc 	#6
.2cc7					_IFINotHex:
.2cc7	69 30		adc #$30			adc 	#48
.2cc9	20 60 2f	jsr $2f60			jsr 	IFloatBufferWrite
.2ccc	60		rts				rts
.06d3					IFBase:
>06d3							.fill 	1
.2ccd					IFloatFloatToStringR0:
.2ccd	a2 16		ldx #$16			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2ccf	20 1f 2e	jsr $2e1f			jsr 	IFloatPushRx
.2cd2	20 72 2e	jsr $2e72			jsr 	IFloatCopyToRegister
.2cd5	20 d0 2b	jsr $2bd0			jsr 	IFloatIntegerR0				; make R0 integer
.2cd8	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2cda	20 71 2c	jsr $2c71			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2cdd	9c d4 06	stz $06d4			stz 	IFloatDecimalCount 			; zero the decimal count.
.2ce0	a5 19		lda $19				lda 	IFR2+IExp 					; is integer.
.2ce2	29 3f		and #$3f			and 	#IFXMask
.2ce4	f0 44		beq $2d2a			beq 	_IFFSExit
.2ce6					_IFloatFracLoop:
.2ce6	a2 16		ldx #$16			ldx 	#IFR2 						; R0 = fractional part of R2
.2ce8	20 61 2e	jsr $2e61			jsr 	IFloatCopyFromRegister
.2ceb	20 7a 2b	jsr $2b7a			jsr 	IFloatFractionalR0
.2cee	20 07 2f	jsr $2f07			jsr 	IFloatNormalise
.2cf1	a2 16		ldx #$16			ldx 	#IFR2
.2cf3	20 72 2e	jsr $2e72			jsr 	IFloatCopyToRegister 		; copy to R2
.2cf6	a2 16		ldx #$16			ldx 	#IFR2 						; set R2 to 10
.2cf8	a9 0a		lda #$0a			lda 	#10
.2cfa	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.2cfd	a2 16		ldx #$16			ldx 	#IFR2						; R0,R2 = R2 * 10
.2cff	20 70 29	jsr $2970			jsr 	IFloatMultiply
.2d02	a2 16		ldx #$16			ldx 	#IFR2
.2d04	20 72 2e	jsr $2e72			jsr 	IFloatCopyToRegister
.2d07	20 d0 2b	jsr $2bd0			jsr 	IFloatIntegerR0 			; get integer part of R0
.2d0a	ad d4 06	lda $06d4			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2d0d	c9 03		cmp #$03			cmp 	#3
.2d0f	f0 16		beq $2d27			beq 	_IFFSExitStripZero
.2d11	ad d4 06	lda $06d4			lda 	IFloatDecimalCount 			; written the DP yet ?
.2d14	d0 05		bne $2d1b			bne 	_IFloatNotFirst
.2d16	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2d18	20 60 2f	jsr $2f60			jsr 	IFloatBufferWrite
.2d1b					_IFloatNotFirst:
.2d1b	ee d4 06	inc $06d4			inc 	IFloatDecimalCount
.2d1e	a5 0e		lda $0e				lda 	IFR0+IM0 					; get digit
.2d20	09 30		ora #$30			ora 	#"0"						; ASCII
.2d22	20 60 2f	jsr $2f60			jsr 	IFloatBufferWrite 			; write to the buffer.
.2d25	80 bf		bra $2ce6			bra 	_IFloatFracLoop
.2d27					_IFFSExitStripZero:
.2d27	20 6f 2f	jsr $2f6f			jsr 	IFloatStripTrailingZeros
.2d2a					_IFFSExit:
.2d2a	a2 16		ldx #$16			ldx 	#IFR2 						; restore R2
.2d2c	20 40 2e	jsr $2e40			jsr 	IFloatPullRx
.2d2f	20 58 2f	jsr $2f58			jsr 	IFloatGetBufferAddress
.2d32	18		clc				clc
.2d33	60		rts				rts
.06d4					IFloatDecimalCount:
>06d4							.fill 	1
.2d34					IFloatStringToFloatR0:
.2d34	8d d5 06	sta $06d5			sta 	IFCount 					; save it out.
.2d37	86 0c		stx $0c				stx 	iTemp0
.2d39	84 0d		sty $0d				sty 	iTemp0+1
.2d3b	a2 0e		ldx #$0e			ldx 	#IFR0 						; reset the current value.
.2d3d	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.2d40	9c d6 06	stz $06d6			stz 	IFSignFlag 					; clear the sign flag
.2d43	20 d0 2d	jsr $2dd0			jsr 	IFSTFGetNext 				; get first
.2d46	f0 1b		beq $2d63			beq 	_IFSTFFail 					; no character
.2d48	90 10		bcc $2d5a			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2d4a	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2d4c	d0 15		bne $2d63			bne 	_IFSTFFail
.2d4e	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2d50	8d d6 06	sta $06d6			sta 	IFSignFlag
.2d53					_IFSTFLoop:
.2d53	20 d0 2d	jsr $2dd0			jsr 	IFSTFGetNext 				; get next
.2d56	b0 0b		bcs $2d63			bcs 	_IFSTFFail 					; bad character.
.2d58	f0 11		beq $2d6b			beq 	_IFSTFExit 					; end of data
.2d5a					_IFSTFHaveChar:
.2d5a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2d5c	f0 08		beq $2d66			beq 	_IFSTFDecimal
.2d5e	20 f4 2d	jsr $2df4			jsr 	IFSTFAddR0 					; add number in
.2d61	80 f0		bra $2d53			bra 	_IFSTFLoop 					; keep going until . or end.
.2d63					_IFSTFFail:
.2d63	38		sec				sec
.2d64	80 0d		bra $2d73			bra 	_IFSTFReturn
.2d66					_IFSTFDecimal:
.2d66	20 7b 2d	jsr $2d7b			jsr 	IFSTFDecimal 				; call the decimal places code.
.2d69	b0 08		bcs $2d73			bcs 	_IFSTFReturn 				; error
.2d6b					_IFSTFExit:
.2d6b	a5 11		lda $11				lda 	IFR0+IExp 					; copy sign flag in.
.2d6d	0d d6 06	ora $06d6			ora 	IFSignFlag
.2d70	85 11		sta $11				sta 	IFR0+IExp
.2d72	18		clc				clc
.2d73					_IFSTFReturn:
.2d73	60		rts				rts
.2d74					IFloatAddDecimalToR0:
.2d74	8d d5 06	sta $06d5			sta 	IFCount 					; save it out.
.2d77	86 0c		stx $0c				stx 	iTemp0
.2d79	84 0d		sty $0d				sty 	iTemp0+1
.2d7b					IFSTFDecimal:
.2d7b	a2 0e		ldx #$0e			ldx 	#IFR0 						; push integer part on stack
.2d7d	20 1f 2e	jsr $2e1f			jsr 	IFloatPushRx
.2d80	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2d82	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero
.2d85	9c d7 06	stz $06d7			stz 	IFDecimalPlaces
.2d88					_IFSTDLoop:
.2d88	20 d0 2d	jsr $2dd0			jsr 	IFSTFGetNext 				; get next
.2d8b	b0 41		bcs $2dce			bcs 	_IFSTFFail2 				; bad character.
.2d8d	f0 11		beq $2da0			beq 	_IFSTFComplete 				; end of data, work out the result.
.2d8f	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2d91	f0 39		beq $2dcc			beq 	_IFSTFExit2
.2d93	20 f4 2d	jsr $2df4			jsr 	IFSTFAddR0 					; add number in
.2d96	ee d7 06	inc $06d7			inc 	IFDecimalPlaces 			; count decimals
.2d99	ad d7 06	lda $06d7			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2d9c	c9 03		cmp #$03			cmp 	#3
.2d9e	90 e8		bcc $2d88			bcc 	_IFSTDLoop
.2da0					_IFSTFComplete:
.2da0	ad d7 06	lda $06d7			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2da3	f0 27		beq $2dcc			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2da5	3a		dec a				dec 	a 							; table indexed from 1.
.2da6	0a		asl a				asl 	a
.2da7	0a		asl a				asl 	a
.2da8	aa		tax				tax
.2da9	bd 0b 2e	lda $2e0b,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2dac	85 12		sta $12				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2dae	bd 0c 2e	lda $2e0c,x			lda 	TableTen+1,x
.2db1	85 13		sta $13				sta  	IFR1+IM1
.2db3	bd 0d 2e	lda $2e0d,x			lda 	TableTen+2,x
.2db6	85 14		sta $14				sta  	IFR1+IM2
.2db8	bd 0e 2e	lda $2e0e,x			lda 	TableTen+3,x
.2dbb	85 15		sta $15				sta  	IFR1+IExp
.2dbd	a2 12		ldx #$12			ldx 	#IFR1 						; multiply into result
.2dbf	20 70 29	jsr $2970			jsr 	IFloatMultiply
.2dc2	a2 12		ldx #$12			ldx 	#IFR1  						; pop and add the decimal.
.2dc4	20 40 2e	jsr $2e40			jsr 	IFloatPullRx
.2dc7	a2 12		ldx #$12			ldx 	#IFR1
.2dc9	20 c6 28	jsr $28c6			jsr 	IFloatAdd
.2dcc					_IFSTFExit2:
.2dcc	18		clc				clc
.2dcd	60		rts				rts
.2dce					_IFSTFFail2:
.2dce	38		sec				sec
.2dcf	60		rts				rts
.2dd0					IFSTFGetNext:
.2dd0	ad d5 06	lda $06d5			lda 	IFCount  					; if count is zero, return with Z set.
.2dd3	f0 19		beq $2dee			beq 	_IFSTFReturnOk
.2dd5	b2 0c		lda ($0c)			lda 	(iTemp0) 					; get next character
.2dd7	e6 0c		inc $0c				inc 	iTemp0 						; point at next.
.2dd9	d0 02		bne $2ddd			bne 	_IFSTFGNNoCarry
.2ddb	e6 0d		inc $0d				inc 	iTemp0+1
.2ddd					_IFSTFGNNoCarry:
.2ddd	ce d5 06	dec $06d5			dec 	IFCount 					; dec count.
.2de0	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2de2	f0 08		beq $2dec			beq 	_IFSTFGOkay
.2de4	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2de6	90 08		bcc $2df0			bcc 	_IFSTFGFail
.2de8	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2dea	b0 04		bcs $2df0			bcs 	_IFSTFGFail
.2dec					_IFSTFGOkay:
.2dec	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2dee					_IFSTFReturnOk:
.2dee	18		clc				clc
.2def	60		rts				rts
.2df0					_IFSTFGFail:
.2df0	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2df2	38		sec				sec
.2df3	60		rts				rts
.2df4					IFSTFAddR0:
.2df4	29 0f		and #$0f			and 	#15 						; to int value
.2df6	48		pha				pha 								; save it.
.2df7	a9 0a		lda #$0a			lda 	#10
.2df9	a2 12		ldx #$12			ldx 	#IFR1
.2dfb	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.2dfe	20 70 29	jsr $2970			jsr 	IFloatMultiply
.2e01	68		pla				pla
.2e02	a2 12		ldx #$12			ldx 	#IFR1
.2e04	20 d2 2e	jsr $2ed2			jsr 	IFloatSetByte
.2e07	20 c6 28	jsr $28c6			jsr 	IFloatAdd
.2e0a	60		rts				rts
.06d5					IFCount:
>06d5							.fill 	1
.06d6					IFSignFlag:
>06d6							.fill 	1
.06d7					IFDecimalPlaces:
>06d7							.fill 	1
.2e0b					TableTen:
>2e0b	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2e0f	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2e13	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2e17	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2e1b	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2e1f					IFloatPushRx:
.2e1f	5a		phy				phy
.2e20	ac d8 06	ldy $06d8			ldy 	IFStackIndex
.2e23	b5 00		lda $00,x			lda 	IM0,x
.2e25	99 d9 06	sta $06d9,y			sta 	IFStack,y
.2e28	b5 01		lda $01,x			lda 	IM1,x
.2e2a	99 da 06	sta $06da,y			sta 	IFStack+1,y
.2e2d	b5 02		lda $02,x			lda 	IM2,x
.2e2f	99 db 06	sta $06db,y			sta 	IFStack+2,y
.2e32	b5 03		lda $03,x			lda 	IExp,x
.2e34	99 dc 06	sta $06dc,y			sta 	IFStack+3,y
.2e37	c8		iny				iny
.2e38	c8		iny				iny
.2e39	c8		iny				iny
.2e3a	c8		iny				iny
.2e3b	8c d8 06	sty $06d8			sty 	IFStackIndex
.2e3e	7a		ply				ply
.2e3f	60		rts				rts
.2e40					IFloatPullRx:
.2e40	5a		phy				phy
.2e41	ac d8 06	ldy $06d8			ldy 	IFStackIndex
.2e44	88		dey				dey
.2e45	88		dey				dey
.2e46	88		dey				dey
.2e47	88		dey				dey
.2e48	b9 d9 06	lda $06d9,y			lda 	IFStack,y
.2e4b	95 00		sta $00,x			sta 	IM0,x
.2e4d	b9 da 06	lda $06da,y			lda 	IFStack+1,y
.2e50	95 01		sta $01,x			sta 	IM1,x
.2e52	b9 db 06	lda $06db,y			lda 	IFStack+2,y
.2e55	95 02		sta $02,x			sta 	IM2,x
.2e57	b9 dc 06	lda $06dc,y			lda 	IFStack+3,y
.2e5a	95 03		sta $03,x			sta 	IExp,x
.2e5c	8c d8 06	sty $06d8			sty 	IFStackIndex
.2e5f	7a		ply				ply
.2e60	60		rts				rts
.06d8					IFStackIndex:
>06d8							.fill 	1
.06d9					IFStack:
>06d9							.fill 	16*4
.2e61					IFloatCopyFromRegister:
.2e61	b5 00		lda $00,x			lda 	0,x
.2e63	85 0e		sta $0e				sta 	IFR0
.2e65	b5 01		lda $01,x			lda 	1,x
.2e67	85 0f		sta $0f				sta 	IFR0+1
.2e69	b5 02		lda $02,x			lda 	2,x
.2e6b	85 10		sta $10				sta 	IFR0+2
.2e6d	b5 03		lda $03,x			lda 	3,x
.2e6f	85 11		sta $11				sta 	IFR0+3
.2e71	60		rts				rts
.2e72					IFloatCopyToRegister:
.2e72	a5 0e		lda $0e				lda 	IFR0
.2e74	95 00		sta $00,x			sta 	0,x
.2e76	a5 0f		lda $0f				lda 	IFR0+1
.2e78	95 01		sta $01,x			sta 	1,x
.2e7a	a5 10		lda $10				lda 	IFR0+2
.2e7c	95 02		sta $02,x			sta 	2,x
.2e7e	a5 11		lda $11				lda 	IFR0+3
.2e80	95 03		sta $03,x			sta 	3,x
.2e82	60		rts				rts
.2e83					IFloatLoadInline:
.2e83	68		pla				pla 								; pop address off to iTemp0
.2e84	85 0c		sta $0c				sta 	iTemp0
.2e86	68		pla				pla
.2e87	85 0d		sta $0d				sta 	iTemp0+1
.2e89	a0 01		ldy #$01			ldy 	#1
.2e8b	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 0
.2e8d	95 00		sta $00,x			sta 	0,x
.2e8f	c8		iny				iny
.2e90	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 1
.2e92	95 01		sta $01,x			sta 	1,x
.2e94	c8		iny				iny
.2e95	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 2
.2e97	95 02		sta $02,x			sta 	2,x
.2e99	c8		iny				iny
.2e9a	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 3
.2e9c	95 03		sta $03,x			sta 	3,x
.2e9e	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2e9f	a5 0c		lda $0c				lda 	iTemp0
.2ea1	69 05		adc #$05			adc 	#5
.2ea3	85 0c		sta $0c				sta 	iTemp0
.2ea5	90 02		bcc $2ea9			bcc 	_IFLINoCarry
.2ea7	e6 0d		inc $0d				inc 	iTemp0+1
.2ea9					_IFLINoCarry:
.2ea9	6c 0c 00	jmp ($000c)			jmp 	(iTemp0)					; effectively RTS
.2eac					IFloatMultiply8BitRx:
.2eac	5a		phy		        phy
.2ead	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2eaf	a4 0e		ldy $0e		        ldy     IFR0+IM0
.2eb1	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2eb2	85 0e		sta $0e		        sta     IFR0+IM0
.2eb4	84 0f		sty $0f		        sty     IFR0+IM1
.2eb6	a9 00		lda #$00	        lda     #0
.2eb8	a0 08		ldy #$08	        ldy     #8
.2eba					_IFMLoop:
.2eba	90 03		bcc $2ebf	        bcc     _IFMNoAdd
.2ebc	18		clc		        clc
.2ebd	65 0f		adc $0f		        adc     IFR0+IM1
.2ebf					_IFMNoAdd:
.2ebf	6a		ror a		        ror     a
.2ec0	66 0e		ror $0e		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2ec2	88		dey		        dey
.2ec3	d0 f5		bne $2eba	        bne     _IFMLoop
.2ec5	85 0f		sta $0f		        sta     IFR0+IM1                    ; write MSB out
.2ec7	7a		ply		        ply
.2ec8	60		rts		        rts
.2ec9					IFloatCheckZero:
.2ec9	b5 00		lda $00,x			lda 	IM0,x
.2ecb	15 01		ora $01,x			ora 	IM1,x
.2ecd	15 02		ora $02,x			ora 	IM2,x
.2ecf	60		rts				rts
.2ed0					IFloatSetZero:
.2ed0	a9 00		lda #$00			lda 	#0
.2ed2					IFloatSetByte:
.2ed2	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2ed4	74 01		stz $01,x			stz 	IM1,x
.2ed6	74 02		stz $02,x			stz 	IM2,x
.2ed8	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2eda	60		rts				rts
.2edb					IFloatNegate:
.2edb	b5 03		lda $03,x			lda 	IExp,x
.2edd	49 40		eor #$40			eor 	#IFSign
.2edf	95 03		sta $03,x			sta 	IExp,x
.2ee1	18		clc				clc
.2ee2	60		rts				rts
.2ee3					IFloatMantissaNegate:
.2ee3	38		sec				sec
.2ee4	a9 00		lda #$00			lda 	#0
.2ee6	f5 00		sbc $00,x			sbc 	IM0,x
.2ee8	95 00		sta $00,x			sta 	IM0,x
.2eea	a9 00		lda #$00			lda 	#0
.2eec	f5 01		sbc $01,x			sbc 	IM1,x
.2eee	95 01		sta $01,x			sta 	IM1,x
.2ef0	a9 00		lda #$00			lda 	#0
.2ef2	f5 02		sbc $02,x			sbc 	IM2,x
.2ef4	95 02		sta $02,x			sta 	IM2,x
.2ef6	60		rts				rts
.2ef7					IFloatShiftLeft:
.2ef7	18		clc				clc
.2ef8					IFloatRotateLeft:
.2ef8	36 00		rol $00,x			rol 	IM0,x
.2efa	36 01		rol $01,x			rol 	IM1,x
.2efc	36 02		rol $02,x			rol 	IM2,x
.2efe	60		rts				rts
.2eff					IFloatShiftRight:
.2eff	18		clc				clc
.2f00					IFloatRotateRight:
.2f00	76 02		ror $02,x			ror 	IM2,x
.2f02	76 01		ror $01,x			ror 	IM1,x
.2f04	76 00		ror $00,x			ror 	IM0,x
.2f06	60		rts				rts
.2f07					IFloatNormalise:
.2f07	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero 			; is it zero
.2f0a	f0 18		beq $2f24			beq 	_IFNExitZero 				; if so exit
.2f0c					_IFNLoop:
.2f0c	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2f0e	29 c0		and #$c0			and 	#$C0
.2f10	c9 40		cmp #$40			cmp 	#$40
.2f12	f0 13		beq $2f27			beq 	_IFNExitOkay 				; if so , then we are done.
.2f14	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2f16	29 3f		and #$3f			and 	#$3F
.2f18	c9 20		cmp #$20			cmp 	#$20
.2f1a	f0 0b		beq $2f27			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2f1c	20 3d 2f	jsr $2f3d			jsr 	IFloatDecExponent
.2f1f	20 f7 2e	jsr $2ef7			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2f22	80 e8		bra $2f0c			bra 	_IFNLoop
.2f24					_IFNExitZero:
.2f24	20 d0 2e	jsr $2ed0			jsr 	IFloatSetZero 				; set the result to zero
.2f27					_IFNExitOkay:
.2f27	18		clc				clc  								; return with CC.
.2f28	60		rts				rts
.2f29					IFloatIncExponent:
.2f29	b5 03		lda $03,x			lda 	IExp,x
.2f2b	48		pha				pha
.2f2c	29 c0		and #$c0			and 	#$C0
.2f2e	8d 19 07	sta $0719			sta 	IFXTemp
.2f31	68		pla				pla
.2f32	1a		inc a				inc 	a
.2f33	29 3f		and #$3f			and 	#$3F
.2f35	48		pha				pha
.2f36	0d 19 07	ora $0719			ora 	IFXTemp
.2f39	95 03		sta $03,x			sta 	IExp,x
.2f3b	68		pla				pla
.2f3c	60		rts				rts
.2f3d					IFloatDecExponent:
.2f3d	b5 03		lda $03,x			lda 	IExp,x
.2f3f	48		pha				pha
.2f40	29 c0		and #$c0			and 	#$C0
.2f42	8d 19 07	sta $0719			sta 	IFXTemp
.2f45	68		pla				pla
.2f46	3a		dec a				dec 	a
.2f47	29 3f		and #$3f			and 	#$3F
.2f49	48		pha				pha
.2f4a	0d 19 07	ora $0719			ora 	IFXTemp
.2f4d	95 03		sta $03,x			sta 	IExp,x
.2f4f	68		pla				pla
.2f50	60		rts				rts
.0719					IFXTemp:
>0719							.fill 	1
.2f51					IFloatBufferReset:
.2f51	9c 1a 07	stz $071a			stz 	IFBufferCount
.2f54	9c 1b 07	stz $071b			stz 	IFBuffer
.2f57	60		rts				rts
.2f58					IFloatGetBufferAddress:
.2f58	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.2f5a	a2 1b		ldx #$1b			ldx 	#(IFBuffer & $FF)
.2f5c	ad 1a 07	lda $071a			lda 	IFBufferCount
.2f5f	60		rts				rts
.2f60					IFloatBufferWrite:
.2f60	da		phx				phx
.2f61	ae 1a 07	ldx $071a			ldx 	IFBufferCount
.2f64	9d 1b 07	sta $071b,x			sta 	IFBuffer,x
.2f67	9e 1c 07	stz $071c,x			stz 	IFBuffer+1,x
.2f6a	ee 1a 07	inc $071a			inc 	IFBufferCount
.2f6d	fa		plx				plx
.2f6e	60		rts				rts
.2f6f					IFloatStripTrailingZeros:
.2f6f	ae 1a 07	ldx $071a			ldx 	IFBufferCount
.2f72	bd 1a 07	lda $071a,x			lda 	IFBuffer-1,x
.2f75	c9 30		cmp #$30			cmp		#"0"
.2f77	d0 0f		bne $2f88			bne 	_IFSTExit
.2f79	bd 19 07	lda $0719,x			lda 	IFBuffer-2,x
.2f7c	c9 2e		cmp #$2e			cmp 	#"."
.2f7e	f0 08		beq $2f88			beq 	_IFSTExit
.2f80	ce 1a 07	dec $071a			dec 	IFBufferCount
.2f83	9e 1a 07	stz $071a,x			stz 	IFBuffer-1,x
.2f86	80 e7		bra $2f6f			bra 	IFloatStripTrailingZeros
.2f88					_IFSTExit:
.2f88	60		rts				rts
.071a					IFBufferCount:
>071a							.fill 	1
.071b					IFBuffer:
>071b							.fill 	25
.2f89					IFloatCheck:
.2f89	a5 11		lda $11				lda 	IFR0+IExp					; force it negative
.2f8b	09 40		ora #$40			ora 	#IFSign
.2f8d	85 11		sta $11				sta 	IFR0+IExp
.2f8f	20 c6 28	jsr $28c6			jsr 	IFloatAdd 					; add allowed to error.
.2f92	a2 0e		ldx #$0e			ldx 	#IFR0
.2f94	20 c9 2e	jsr $2ec9			jsr 	IFloatCheckZero 			; error if < 0
.2f97	f0 06		beq $2f9f			beq 	_IFAOkay
.2f99	a5 11		lda $11				lda 	IFR0+IExp
.2f9b	29 40		and #$40			and 	#IFSign
.2f9d	d0 01		bne $2fa0			bne 	_IFAFail
.2f9f					_IFAOkay:
.2f9f	60		rts				rts
.2fa0					_IFAFail:
.2fa0	38		sec				sec
.2fa1	68		pla				pla 								; get address - 2
.2fa2	e9 02		sbc #$02			sbc 	#2
.2fa4	aa		tax				tax
.2fa5	68		pla				pla
.2fa6	e9 00		sbc #$00			sbc 	#0
.2fa8	a8		tay				tay
.2fa9	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2fab					_IFAStop:
>2fab	db						.byte 	$DB 						; display an error AA ADR ADR
.2fac	80 fd		bra $2fab			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
