
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Mon Jul 10 21:55:39 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorCount:
>0344							.fill 	2
.0346					currentSector:
>0346							.fill 	2
.0348					successFlag:
>0348							.fill 	1
.0349					sectorHeader:
.0349					shFirstNext:
>0349							.fill 	1
.034a					shContinue:
>034a							.fill 	1
.034b					shDataSize:
>034b							.fill 	2
.034d					shFileSize:
>034d							.fill 	2
>034f							.fill 	10
.0359					shNameLength:
>0359							.fill 	1
.035a					shNameText:
>035a							.fill 	15
.0369					shFileSizeCopy:
>0369							.fill 	2
.036b					notFirstSector:
>036b							.fill 	1
.036c					fileRemainingSize:
>036c							.fill 	2
.036e					checkLoopRound:
>036e							.fill 	1
.036f					FSRandomSeed:
>036f							.fill 	1
>0370							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 18 24	jsr $2418			jsr 	PGMSetBaseAddress
.1007	20 ec 30	jsr $30ec			jsr 	IFInitialise 				; setup math library
.100a	4c 1f 17	jmp $171f			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="R"					AM_RELATIVE 	= 'R' 						; bra nnnn
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="T"					AM_ABSOLUTEI  	= 'T' 						; jmp (nnnn)   [only instance]
="U"					AM_ABSOLUTEIX	= 'U' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d4					AM_ZIND 	= ('T'|AM_ZPAGE) 				; lda (nn)
=$d5					AM_ZINDX	= ('U'|AM_ZPAGE) 				; lda (nn,x)
=$d6					AM_ZINDY	= ('V'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_THEN = $88
=$89					PR_PROC = $89
=$8a					PR_ENDPROC = $8a
=$8b					PR_FOR = $8b
=$8c					PR_STRUCTURE_LAST = $8c
=$8c					PR_NEXT = $8c
=$8d					PR_STANDARD_FIRST = $8d
=$8d					PR_LSQLSQENDRSQRSQ = $8d
=$8e					PR_LSQLSQSHIFTRSQRSQ = $8e
=$8f					PR_ELSE = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8e80					PR_CLEAR = $8e80
=$8e81					PR_NEW = $8e81
=$8e82					PR_RUN = $8e82
=$8e83					PR_STOP = $8e83
=$8e84					PR_END = $8e84
=$8e85					PR_ASSERT = $8e85
=$8e86					PR_LIST = $8e86
=$8e87					PR_SAVE = $8e87
=$8e88					PR_LOAD = $8e88
=$8e89					PR_GOSUB = $8e89
=$8e8a					PR_GOTO = $8e8a
=$8e8b					PR_RETURN = $8e8b
=$8e8c					PR_RESTORE = $8e8c
=$8e8d					PR_DIM = $8e8d
=$8e8e					PR_DIR = $8e8e
=$8e8f					PR_ERASE = $8e8f
=$8e90					PR_RENUMBER = $8e90
=$8e91					PR_OPT = $8e91

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.100d					Command_AssemblerStart:
.100d					_CALoop:
.100d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.100f	c8		iny				iny 								; consume it.
.1010	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.1012	f0 19		beq $102d			beq 	_CALabel
.1014	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.1016	f0 41		beq $1059			beq 	_CAExit
.1018	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.101a	f0 f1		beq $100d			beq 	_CALoop
.101c	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; end of line.
.101e	f0 18		beq $1038			beq 	_CAEnd
.1020	c9 f7		cmp #$f7			cmp 	#PR_AND	 					; AND is an opcode *and* a keyword
.1022	f0 0e		beq $1032			beq 	_CAOpcode
.1024	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.1026	c9 40		cmp #$40			cmp 	#$40
.1028	f0 08		beq $1032			beq 	_CAOpcode
.102a	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.102d					_CALabel:
.102d	20 b7 12	jsr $12b7			jsr 	ASLabel 					; handle a label
.1030	80 db		bra $100d			bra 	_CALoop
.1032					_CAOpcode:
.1032	88		dey				dey 								; get it back
.1033	20 ce 11	jsr $11ce			jsr 	ASOpcode 					; assemble that opcode.
.1036	80 d5		bra $100d			bra 	_CALoop
.1038	18		clc		_CAEnd:	clc 								; next line
.1039	b2 18		lda ($18)			lda 	(codePtr)
.103b	65 18		adc $18				adc 	codePtr
.103d	85 18		sta $18				sta 	codePtr
.103f	90 02		bcc $1043			bcc 	_CANoCarry
.1041	e6 19		inc $19				inc 	codePtr+1
.1043					_CANoCarry:
.1043	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1045	b1 18		lda ($18),y			lda 	(codePtr),y
.1047	8d 31 06	sta $0631			sta 	ERRLine
.104a	c8		iny				iny
.104b	b1 18		lda ($18),y			lda 	(codePtr),y
.104d	8d 32 06	sta $0632			sta 	ERRLine+1
.1050	a0 03		ldy #$03			ldy 	#3 							; tokenised code position.
.1052	b2 18		lda ($18)			lda 	(codePtr) 					; code present
.1054	d0 b7		bne $100d			bne 	_CALoop 					; go round again
.1056	4c 8b 18	jmp $188b			jmp 	Command_END 				; do END.
.1059					_CAExit:
.1059	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/calcopcode.asm

.105a					ASCalculateOpcodeHash:
.105a	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for AND token.
.105c	c9 f7		cmp #$f7			cmp 	#PR_AND
.105e	f0 28		beq $1088			beq 	_ASCOAnd
.1060	20 8c 10	jsr $108c			jsr 	_ASCGetCharacter 			; get first alphanumeric character 0-25 rep A-Z
.1063	20 99 10	jsr $1099			jsr 	_ASCProcess 				; go through the shift/multiply process
.1066	85 24		sta $24				sta 	zTemp0
.1068	20 8c 10	jsr $108c			jsr 	_ASCGetCharacter 			; get second alphanumeric character
.106b	18		clc				clc
.106c	65 24		adc $24				adc 	zTemp0 						; add previous result.
.106e	2a		rol a				rol 	a 							; 8 bit rotate left
.106f	69 00		adc #$00			adc 	#0
.1071	49 a5		eor #$a5			eor 	#165 						; XOR with 165
.1073	20 99 10	jsr $1099			jsr 	_ASCProcess 				; and shift/multiply again.
.1076	85 24		sta $24				sta 	zTemp0
.1078	20 8c 10	jsr $108c			jsr 	_ASCGetCharacter 			; get third character
.107b	18		clc				clc
.107c	65 24		adc $24				adc 	zTemp0 						; and add
.107e	48		pha				pha
.107f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by
.1081	c9 7c		cmp #$7c			cmp 	#$7C 						; $7C which identifies end of identifier.
.1083	d0 1f		bne $10a4			bne 	_ASCSyntax
.1085	c8		iny				iny
.1086	68		pla				pla 								; restore and exit
.1087	60		rts				rts
.1088					_ASCOAnd:
.1088	c8		iny				iny 								; consume the token.
.1089	a9 6a		lda #$6a			lda 	#106 						; the hash value for "AND"
.108b	60		rts				rts
.108c					_ASCGetCharacter:
.108c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get and consume character
.108e	c8		iny				iny
.108f	38		sec				sec
.1090	e9 40		sbc #$40			sbc 	#$40 						; shift $40 -> $00
.1092	30 10		bmi $10a4			bmi 	_ASCSyntax 					; check range.
.1094	c9 1a		cmp #$1a			cmp 	#26
.1096	b0 0c		bcs $10a4			bcs 	_ASCSyntax
.1098	60		rts				rts
.1099					_ASCProcess:
.1099	85 25		sta $25				sta 	zTemp0+1 					; multiply by 5
.109b	0a		asl a				asl 	a
.109c	0a		asl a				asl 	a
.109d	18		clc				clc
.109e	65 25		adc $25				adc 	zTemp0+1
.10a0	18		clc				clc 								; add 68
.10a1	69 44		adc #$44			adc 	#68
.10a3	60		rts				rts
.10a4					_ASCSyntax:
.10a4	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/generate.asm

.10a7					ASGenerateCode:
.10a7	5a		phy				phy
.10a8	a2 00		ldx #$00			ldx 	#0
.10aa					_ASGSearch:
.10aa	bd f0 1d	lda $1df0,x			lda 	AssemblerLookup,x 			; check table
.10ad	cd 04 05	cmp $0504			cmp 	ASCurrOpcode 				; do we have a match ?
.10b0	d0 0e		bne $10c0			bne 	_ASGNoMatch
.10b2	da		phx				phx 								; save X
.10b3	8a		txa				txa 								; get the address mode for this instruction
.10b4	8d 03 05	sta $0503			sta 	ASGOpcode
.10b7	20 69 11	jsr $1169			jsr 	ASGetModeForOpcode 			; into A.
.10ba	20 c8 10	jsr $10c8			jsr 	ASGTryGenerate		 		; try to generate with mode A
.10bd	fa		plx				plx
.10be	b0 06		bcs $10c6			bcs 	_ASGDone 					; successful :)
.10c0					_ASGNoMatch:
.10c0	e8		inx				inx 								; keep going.
.10c1	d0 e7		bne $10aa			bne 	_ASGSearch
.10c3	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.10c6					_ASGDone:
.10c6	7a		ply				ply
.10c7	60		rts				rts
.10c8					ASGTryGenerate:
.10c8	c9 52		cmp #$52			cmp 	#AM_RELATIVE 				; is it relative (will identify as absolute)
.10ca	f0 58		beq $1124			beq 	_ASGRelative
.10cc	cd 05 05	cmp $0505			cmp 	ASCurrMode 					; do the modes match ?
.10cf	f0 26		beq $10f7			beq 	_ASGMatches 				; yes, we have a result.
.10d1	ae 05 05	ldx $0505			ldx 	ASCurrMode 					; get the instruction mode.
.10d4	e0 41		cpx #$41			cpx 	#AM_ABSOLUTE 				; is it an absolute we can try as ZP
.10d6	f0 12		beq $10ea			beq 	_ASGTryZero 				; this works because in the 65C02 all the
.10d8	e0 58		cpx #$58			cpx 	#AM_ABSOLUTEX 				; ZP equivalents are before the Absolutes
.10da	f0 0e		beq $10ea			beq 	_ASGTryZero 				; numerically.
.10dc	e0 59		cpx #$59			cpx 	#AM_ABSOLUTEY
.10de	f0 0a		beq $10ea			beq 	_ASGTryZero
.10e0	e0 54		cpx #$54			cpx 	#AM_ABSOLUTEI
.10e2	f0 06		beq $10ea			beq 	_ASGTryZero
.10e4	e0 55		cpx #$55			cpx 	#AM_ABSOLUTEIX
.10e6	f0 02		beq $10ea			beq 	_ASGTryZero
.10e8					_ASGFail:
.10e8	18		clc				clc 								; give up.
.10e9	60		rts				rts
.10ea					_ASGTryZero:
.10ea	29 7f		and #$7f			and 	#$7F 						; this is the ZP equivalent of A,AX,AY ?
.10ec	cd 05 05	cmp $0505			cmp 	ASCurrMode 					; does that match ?
.10ef	d0 f7		bne $10e8			bne  	_ASGFail 					; no, this won't work.
.10f1	09 80		ora #$80			ora 	#$80 						; try with a ZP
.10f3	a6 09		ldx $09				ldx 	IFR0+IM1 					; check if this is okay for zero page.
.10f5	d0 f1		bne $10e8			bne 	_ASGFail 					; cannot use as the value is too large (e.g. >256)
.10f7					_ASGMatches:
.10f7	48		pha				pha
.10f8	20 72 12	jsr $1272			jsr 	ASAddress 					; address out.
.10fb	ad 03 05	lda $0503			lda 	ASGOpcode 					; write opcode
.10fe	20 4d 12	jsr $124d			jsr 	ASWriteByte 				; write a byte
.1101	68		pla				pla
.1102	c9 49		cmp #$49			cmp 	#AM_IMPLIED 				; dispatch
.1104	f0 0e		beq $1114			beq 	_ASGExit
.1106	c9 00		cmp #$00			cmp 	#0
.1108	30 0f		bmi $1119			bmi 	_ASGZeroPage
.110a					_ASGAbsolute:
.110a	a5 08		lda $08				lda 	IFR0+IM0
.110c	20 4d 12	jsr $124d			jsr 	ASWriteByte
.110f	a5 09		lda $09				lda 	IFR0+IM1
.1111					_ASGWExit:
.1111	20 4d 12	jsr $124d			jsr 	ASWriteByte
.1114					_ASGExit:
.1114	20 8f 12	jsr $128f			jsr 	ASEndLine
.1117	38		sec				sec
.1118	60		rts				rts
.1119					_ASGZeroPage:
.1119	a5 09		lda $09				lda 	IFR0+IM1 					; check operand
.111b	f0 03		beq $1120			beq 	_ASGWriteLSB
.111d	4c 99 2a	jmp $2a99		jmp	ErrorV_value
.1120					_ASGWriteLSB:
.1120	a5 08		lda $08				lda 	IFR0+IM0
.1122	80 ed		bra $1111			bra 	_ASGWExit
.1124					_ASGRelative:
.1124	48		pha				pha
.1125	20 72 12	jsr $1272			jsr 	ASAddress 					; address out.
.1128	ad 03 05	lda $0503			lda 	ASGOpcode 					; write opcode
.112b	20 4d 12	jsr $124d			jsr 	ASWriteByte 				; write a byte
.112e	68		pla				pla
.112f	ad 05 05	lda $0505			lda 	ASCurrMode 					; check absolute.
.1132	c9 41		cmp #$41			cmp 	#AM_ABSOLUTE
.1134	f0 03		beq $1139			beq 	_ASGCalcCheck
.1136	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.1139					_ASGCalcCheck:
.1139	ad 06 05	lda $0506			lda 	ASMOption 					; if pass bit set, just write junk
.113c	29 02		and #$02			and 	#2
.113e	aa		tax				tax
.113f	f0 1c		beq $115d			beq 	_ASGRout
.1141	18		clc				clc 								; calculate offset, borrowing one.
.1142	a5 08		lda $08				lda 	IFR0+IM0
.1144	ed b5 06	sbc $06b5			sbc 	('P'-'A')*4 + FastVariables + 0
.1147	aa		tax				tax
.1148	a5 09		lda $09				lda 	IFR0+IM1
.114a	ed b6 06	sbc $06b6			sbc 	('P'-'A')*4 + FastVariables + 1
.114d	85 24		sta $24				sta 	zTemp0 						; save MSB temporarily
.114f	e0 00		cpx #$00			cpx 	#0 							; if X is -ve A needs to be $FF so inc so it needs to be $00
.1151	10 01		bpl $1154			bpl 	_ASGForward
.1153	1a		inc a				inc 	a
.1154					_ASGForward:
.1154	c9 00		cmp #$00			cmp 	#0
.1156	d0 0e		bne $1166			bne 	_ASGRange
.1158	8a		txa				txa 								; MSB and LSB need to be the same sign.
.1159	45 24		eor $24				eor 	zTemp0
.115b	30 09		bmi $1166			bmi 	_ASGRange
.115d					_ASGRout:
.115d	8a		txa				txa
.115e	20 4d 12	jsr $124d			jsr 	ASWriteByte 				; write the relative branch
.1161	20 8f 12	jsr $128f			jsr 	ASEndLine
.1164	38		sec				sec
.1165	60		rts				rts
.1166					_ASGRange:
.1166	4c 88 2a	jmp $2a88		jmp	ErrorV_range
.0503					ASGOpcode:
>0503							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/getmode.asm

.1169					ASGetModeForOpcode:
.1169	5a		phy				phy
.116a	a8		tay				tay 								; save in Y
.116b	a2 00		ldx #$00			ldx 	#0
.116d					_ASGSearch:
.116d	98		tya				tya 								; check if opcode matches
.116e	dd b3 11	cmp $11b3,x			cmp 	ASGSpecialCases,x
.1171	f0 1b		beq $118e			beq 	_ASGIsSpecial
.1173	e8		inx				inx
.1174	e8		inx				inx
.1175	bd b3 11	lda $11b3,x			lda 	ASGSpecialCases,x 			; check end of table ($F3 is an illegal 65C02 opcode)
.1178	c9 f3		cmp #$f3			cmp 	#$F3
.117a	d0 f1		bne $116d			bne 	_ASGSearch
.117c	98		tya				tya 								; only interested in lower 5 bits.
.117d	29 1f		and #$1f			and 	#$1F
.117f	a8		tay				tay
.1180	29 0f		and #$0f			and 	#$0F 						; lower 4 bits of the opcode
.1182	0a		asl a				asl 	a 							; index into ASG Table
.1183	aa		tax				tax
.1184	c0 10		cpy #$10			cpy 	#$10 						; was bit 5 set,  e.g. the MSB is odd
.1186	90 01		bcc $1189			bcc 	_ASGEven
.1188	e8		inx				inx 								; if so, take from second half.
.1189					_ASGEven:
.1189	bd 93 11	lda $1193,x			lda 	ASGTable,x 					; fetch the mode from the table
.118c	7a		ply				ply
.118d	60		rts				rts
.118e					_ASGIsSpecial:
.118e	bd b4 11	lda $11b4,x			lda 	ASGSpecialCases+1,x 		; get special case for that mode.
.1191	7a		ply				ply
.1192	60		rts				rts
.1193					ASGTable:
>1193	a3 52						.byte 	AM_IMMEDIATE,AM_RELATIVE				; x0
>1195	d5 d6						.byte 	AM_ZINDX,AM_ZINDY 						; x1
>1197	a3 d4						.byte 	AM_IMMEDIATE,AM_ZIND 					; x2
>1199	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x3 (all NOP)
>119b	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x4
>119d	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x5
>119f	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x6
>11a1	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; x7
>11a3	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x8
>11a5	a3 59						.byte 	AM_IMMEDIATE,AM_ABSOLUTEY				; x9
>11a7	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xA
>11a9	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xB
>11ab	41 41						.byte 	AM_ABSOLUTE,AM_ABSOLUTE 				; xC
>11ad	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xD
>11af	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xE
>11b1	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; xF
.11b3					ASGSpecialCases:
>11b3	80 52						.byte	$80	,	AM_RELATIVE						;	BRA	rel
>11b5	14 c1						.byte	$14	,	AM_ZERO							;	TRB	nn
>11b7	96 d9						.byte	$96	,	AM_ZEROY						;	STX	nn,y
>11b9	b6 d9						.byte	$B6	,	AM_ZEROY						;	LDX	nn,y
>11bb	3c 58						.byte	$3C	,	AM_ABSOLUTEX					;	BIT	nnnn,x
>11bd	6c 54						.byte	$6C	,	AM_ABSOLUTEI					;	JMP	(nnnn)
>11bf	7c 55						.byte	$7C	,	AM_ABSOLUTEIX					;	JMP 	(nnnn,x)
>11c1	bc 58						.byte	$BC	,	AM_ABSOLUTEX					;	LDY	nnnn,x
>11c3	be 59						.byte	$BE	,	AM_ABSOLUTEY					;	LDX	nnnn,y
>11c5	00 49						.byte	$00	,	AM_IMPLIED						;	BRK
>11c7	20 41						.byte	$20	,	AM_ABSOLUTE						;	JSR	nnnn
>11c9	40 49						.byte	$40	,	AM_IMPLIED						;	RTI
>11cb	60 49						.byte	$60	,	AM_IMPLIED						;	RTS
>11cd	f3						.byte 	$F3 									; (illegal opcode)

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/instruction.asm

.11ce					ASOpcode:
.11ce	20 5a 10	jsr $105a			jsr 	ASCalculateOpcodeHash 		; calculate the opcode hash.
.11d1	8d 04 05	sta $0504			sta 	ASCurrOpcode
.11d4	20 de 11	jsr $11de			jsr 	ASIdentifyAddressMode 		; identify the address mode type.
.11d7	8d 05 05	sta $0505			sta 	ASCurrMode
.11da	20 a7 10	jsr $10a7			jsr 	ASGenerateCode 				; search and generate appropriate code.
.11dd	60		rts				rts
.0504					ASCurrOpcode:
>0504							.fill 	1
.0505					ASCurrMode:
>0505							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/parsemode.asm

.11de					ASIdentifyAddressMode:
.11de	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next ?
.11e0	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ  		; EOL or : => implied
.11e2	f0 17		beq $11fb			beq 	_ASImplied
.11e4	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11e6	f0 13		beq $11fb			beq 	_ASImplied
.11e8	c9 a4		cmp #$a4			cmp 	#PR_HASH 					; # then immediate
.11ea	f0 12		beq $11fe			beq 	_ASImmediate
.11ec	c9 eb		cmp #$eb			cmp 	#PR_LPAREN 					; if ( then indirection of some sort.
.11ee	f0 15		beq $1205			beq 	_ASIndirect
.11f0	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; remaining choices are nnnn nnnn,x and nnnn,y
.11f3	20 2d 12	jsr $122d			jsr 	ASCheckIndex 				; check index follows
.11f6	b0 02		bcs $11fa			bcs 	_ASIndexed 					; index found ? then it will return X Y
.11f8	a9 41		lda #$41			lda 	#AM_ABSOLUTE 				; otherwise return A
.11fa					_ASIndexed:
.11fa	60		rts				rts
.11fb					_ASImplied:
.11fb	a9 49		lda #$49			lda 	#AM_IMPLIED 				; return implied mode
.11fd	60		rts				rts
.11fe					_ASImmediate:
.11fe	c8		iny				iny 								; consume #
.11ff	20 84 1a	jsr $1a84			jsr 	EXPEvalInteger8 			; 8 bit operand
.1202	a9 a3		lda #$a3			lda 	#AM_IMMEDIATE
.1204	60		rts				rts
.1205					_ASIndirect:
.1205	c8		iny				iny 								; consume the open bracket
.1206	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; we do this because of jmp (xxxx) and (xxxx,x)
.1209	20 2d 12	jsr $122d			jsr 	ASCheckIndex 				; look for ,X
.120c	b0 12		bcs $1220			bcs 	_ASInternalIndirect 		; ,X or ,Y found.
.120e	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 				; not found. Must be ) or ),Y
.1211	20 2d 12	jsr $122d			jsr 	ASCheckIndex
.1214	90 07		bcc $121d			bcc 	_ASIIndirect 				; if ,[XY] not found, then exit assuming (xxxx)
.1216	c9 59		cmp #$59			cmp 	#"Y" 						; must be ,Y in this mode.
.1218	d0 10		bne $122a			bne 	ASCISyntax 					; if not error
.121a	a9 d6		lda #$d6			lda 	#AM_ZINDY 					; return (nn),y
.121c	60		rts				rts
.121d					_ASIIndirect:
.121d	a9 54		lda #$54			lda 	#AM_ABSOLUTEI 				; might be jmp (xxxx)
.121f	60		rts				rts
.1220					_ASInternalIndirect:
.1220	c9 58		cmp #$58			cmp 	#"X"						; must have been X
.1222	d0 06		bne $122a			bne 	ASCISyntax 					; error if (nn,y) not allowed !
.1224	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 				; check complete e.g. (nnnn,x)
.1227	a9 55		lda #$55			lda 	#AM_ABSOLUTEIX 				; because it might be JMP (nnnn,x)
.1229	60		rts				rts
.122a					ASCISyntax:
.122a	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.122d					ASCheckIndex:
.122d	b1 18		lda ($18),y			lda 	(codePtr),y 				; check comma ?
.122f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1231	d0 18		bne $124b			bne 	_ASCIFail
.1233	c8		iny				iny 								; consume comma
.1234	b1 18		lda ($18),y			lda 	(codePtr),y
.1236	c9 57		cmp #$57			cmp 	#'X'-'A'+$40 				; check if X or Y
.1238	f0 04		beq $123e			beq 	_ASCIFound
.123a	c9 58		cmp #$58			cmp 	#'Y'-'A'+$40
.123c	d0 ec		bne $122a			bne 	ASCISyntax
.123e					_ASCIFound:
.123e	aa		tax				tax 								; save X or Y in X
.123f	c8		iny				iny 								; consume
.1240	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by end of identifier
.1242	c8		iny				iny
.1243	c9 7c		cmp #$7c			cmp 	#$7C
.1245	d0 e3		bne $122a			bne 	ASCISyntax
.1247	8a		txa				txa 								; get X/Y back
.1248	1a		inc a				inc 	a 							; convert to 'X' or 'Y' characters
.1249	38		sec				sec
.124a	60		rts				rts
.124b					_ASCIFail:
.124b	18		clc				clc
.124c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/write.asm

.124d					ASWriteByte:
.124d	ae b5 06	ldx $06b5			ldx 	('P'-'A')*4 + FastVariables + 0
.1250	86 24		stx $24				stx 	zTemp0
.1252	ae b6 06	ldx $06b6			ldx 	('P'-'A')*4 + FastVariables + 1
.1255	86 25		stx $25				stx 	zTemp0+1
.1257	92 24		sta ($24)			sta 	(zTemp0)
.1259	aa		tax				tax
.125a	ad 06 05	lda $0506			lda 	ASMOption
.125d	4a		lsr a				lsr 	a
.125e	90 09		bcc $1269			bcc 	_ASWBNoEcho
.1260	a9 20		lda #$20			lda 	#32
.1262	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1265	8a		txa				txa
.1266	20 9b 12	jsr $129b			jsr 	ASPrintHex
.1269					_ASWBNoEcho:
.1269	ee b5 06	inc $06b5			inc 	('P'-'A')*4 + FastVariables + 0
.126c	d0 03		bne $1271			bne 	_ASWBNoCarry
.126e	ee b6 06	inc $06b6			inc 	('P'-'A')*4 + FastVariables + 1
.1271					_ASWBNoCarry:
.1271	60		rts				rts
.1272					ASAddress:
.1272	ad 06 05	lda $0506			lda 	ASMOption
.1275	4a		lsr a				lsr 	a
.1276	90 16		bcc $128e			bcc 	_ASAExit
.1278	ad b6 06	lda $06b6			lda 	('P'-'A')*4 + FastVariables + 1
.127b	20 9b 12	jsr $129b			jsr 	ASPrintHex
.127e	ad b5 06	lda $06b5			lda 	('P'-'A')*4 + FastVariables + 0
.1281	20 9b 12	jsr $129b			jsr 	ASPrintHex
.1284	a9 20		lda #$20			lda 	#32
.1286	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1289	a9 3a		lda #$3a			lda 	#':'
.128b	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.128e					_ASAExit:
.128e	60		rts				rts
.128f					ASEndLine:
.128f	ad 06 05	lda $0506			lda 	ASMOption
.1292	4a		lsr a				lsr 	a
.1293	90 05		bcc $129a			bcc 	_ASEExit
.1295	a9 0d		lda #$0d			lda 	#13
.1297	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.129a					_ASEExit:
.129a	60		rts				rts
.129b					ASPrintHex:
.129b	48		pha				pha
.129c	4a		lsr a				lsr 	a
.129d	4a		lsr a				lsr 	a
.129e	4a		lsr a				lsr 	a
.129f	4a		lsr a				lsr 	a
.12a0	20 a4 12	jsr $12a4			jsr 	_ASPrintNibble
.12a3	68		pla				pla
.12a4					_ASPrintNibble:
.12a4	29 0f		and #$0f			and 	#15
.12a6	c9 0a		cmp #$0a			cmp 	#10
.12a8	90 02		bcc $12ac			bcc 	_ASNotHex
.12aa	69 06		adc #$06			adc 	#6
.12ac					_ASNotHex:
.12ac	69 30		adc #$30			adc 	#48
.12ae	c9 40		cmp #$40			cmp 	#64
.12b0	90 02		bcc $12b4			bcc 	_ASNotChar
.12b2	49 20		eor #$20			eor 	#32
.12b4					_ASNotChar:
.12b4	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.12b7					ASLabel:
.12b7	20 ee 1a	jsr $1aee			jsr 	EXPTermR0 					; get term
.12ba	90 38		bcc $12f4			bcc 	_ALError 					; must be a reference term.
.12bc	24 0b		bit $0b				bit 	IFR0+IExp	 				; string reference ?
.12be	30 34		bmi $12f4			bmi 	_ALError
.12c0	ad 06 05	lda $0506			lda 	ASMOption 					; on pass 2 (e.g. OPT bit 1 is set)
.12c3	29 02		and #$02			and 	#2
.12c5	f0 16		beq $12dd			beq 	_ASLNoCheck
.12c7	5a		phy				phy 								; if the variable changes there's an error.
.12c8	b2 08		lda ($08)			lda 	(IFR0+IM0)
.12ca	f0 05		beq $12d1			beq 	_ASLOk1						; (providing not changed from zero)
.12cc	cd b5 06	cmp $06b5			cmp 	('P'-'A')*4 + FastVariables
.12cf	d0 26		bne $12f7			bne 	_ALChanged
.12d1					_ASLOk1:
.12d1	a0 01		ldy #$01			ldy 	#1
.12d3	b1 08		lda ($08),y			lda 	(IFR0+IM0),y
.12d5	f0 05		beq $12dc			beq 	_ASLOk2
.12d7	cd b6 06	cmp $06b6			cmp 	('P'-'A')*4 + FastVariables+1
.12da	d0 1b		bne $12f7			bne 	_ALChanged
.12dc					_ASLOk2:
.12dc	7a		ply				ply
.12dd					_ASLNoCheck:
.12dd	5a		phy				phy
.12de	ad b5 06	lda $06b5			lda 	('P'-'A')*4 + FastVariables	; copy P to variable
.12e1	92 08		sta ($08)			sta 	(IFR0+IM0)
.12e3	a0 01		ldy #$01			ldy 	#1
.12e5	ad b6 06	lda $06b6			lda 	('P'-'A')*4 + FastVariables+1
.12e8	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12ea	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.12ec	c8		iny				iny
.12ed	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12ef	c8		iny				iny
.12f0	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12f2	7a		ply				ply
.12f3	60		rts				rts
.12f4					_ALError:
.12f4	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.12f7					_ALChanged:
.12f7	4c 48 2c	jmp $2c48		jmp	ErrorV_align

;******  Return to file: include.files


;******  Processing file: src/assembler/opt.asm

.12fa					Command_OPT:
.12fa	20 84 1a	jsr $1a84			jsr 	EXPEvalInteger8
.12fd	8d 06 05	sta $0506			sta 	ASMOption
.1300	60		rts				rts
.0506					ASMOption:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1301					Command_ASSERT:
.1301	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 				; get a number to assert
.1304	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1306	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero
.1309	f0 01		beq $130c			beq 	_CAFail 					; if so, the assert fails.
.130b	60		rts				rts
.130c					_CAFail:
.130c	4c cd 2a	jmp $2acd		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.130f					Command_CLEAR:
.130f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1311	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1313	f0 14		beq $1329			beq 	_CLNoParam
.1315	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ
.1317	f0 10		beq $1329			beq 	_CLNoParam
.1319	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; address for CLEAR
.131c	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.131e	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1320	b0 0b		bcs $132d			bcs 	_CLMemory
.1322	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1324	90 07		bcc $132d			bcc 	_CLMemory
.1326	8d 20 05	sta $0520			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1329					_CLNoParam:
.1329	20 30 13	jsr $1330			jsr 	ClearCode
.132c	60		rts				rts
.132d					_CLMemory:
.132d	4c 67 2b	jmp $2b67		jmp	ErrorV_memory
.1330					ClearCode:
.1330	20 2b 24	jsr $242b			jsr 	PGMEndProgram 				; end program => zTemp0
.1333	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.1335	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.1337	1a		inc a				inc 	a
.1338	85 2b		sta $2b				sta 	freeMemory+1
.133a	20 8b 30	jsr $308b			jsr 	VARClearHashTables
.133d	ad 20 05	lda $0520			lda 	PGMEndMemoryHigh
.1340	20 d0 2c	jsr $2cd0			jsr 	StackReset 					; page passed on in A
.1343	20 2f 2d	jsr $2d2f			jsr 	StringSystemInitialise
.1346	20 e2 29	jsr $29e2			jsr 	ScanProcedures
.1349	20 ed 17	jsr $17ed			jsr 	Command_RESTORE
.134c	60		rts				rts
.134d					AllocateMemory:
.134d	5a		phy				phy 								; save Y
.134e	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.1350	5a		phy				phy
.1351	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.1353	5a		phy				phy
.1354	a8		tay				tay 								; count is now in XY
.1355					_AllocateLoop:
.1355	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1357	d0 04		bne $135d			bne 	_AllocateOne
.1359	c0 00		cpy #$00			cpy 	#0
.135b	f0 15		beq $1372			beq 	_AllocateExit
.135d					_AllocateOne:
.135d	a9 00		lda #$00			lda 	#0 							; zero byte
.135f	92 2a		sta ($2a)			sta 	(freeMemory)
.1361	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.1363	d0 05		bne $136a			bne 	_AllocateSkipCarry
.1365	e6 2b		inc $2b				inc 	freeMemory+1
.1367	20 76 13	jsr $1376			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.136a					_AllocateSkipCarry:
.136a	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.136c	d0 01		bne $136f			bne 	_AllocateSkipBorrow
.136e	ca		dex				dex
.136f					_AllocateSkipBorrow:
.136f	88		dey				dey
.1370	80 e3		bra $1355			bra 	_AllocateLoop
.1372					_AllocateExit:
.1372	fa		plx				plx 								; restore address
.1373	68		pla				pla
.1374	7a		ply				ply 								; restore Y
.1375	60		rts				rts
.1376					ClearCheckMemory:
.1376	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.1378	1a		inc a				inc 	a 							; spacing 2 pages
.1379	1a		inc a				inc 	a
.137a	cd 28 06	cmp $0628			cmp 	stringMemory+1 				; problems if hit string memory
.137d	b0 01		bcs $1380			bcs  	_CCMError
.137f	60		rts				rts
.1380					_CCMError:
.1380	4c 67 2b	jmp $2b67		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1383					CommandDIM:
.1383	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1385	29 c0		and #$c0			and 	#$C0
.1387	c9 40		cmp #$40			cmp 	#$40
.1389	d0 39		bne $13c4			bne 	_CDSyntax 					; no syntax error
.138b	20 42 30	jsr $3042			jsr 	VARGetInfo 					; get information
.138e	ad 36 06	lda $0636			lda 	VARType 					; check array.
.1391	29 02		and #$02			and 	#2
.1393	f0 2f		beq $13c4			beq 	_CDSyntax
.1395	20 f4 2f	jsr $2ff4			jsr 	VARFind 					; does it already exist. that's an error
.1398	b0 2d		bcs $13c7			bcs 	_CDExists
.139a	20 a0 2f	jsr $2fa0			jsr 	VARCreate 					; create it - returns data ptr in XA
.139d	da		phx				phx 								; save target address
.139e	48		pha				pha
.139f	ad 36 06	lda $0636			lda 	VARType 					; type ID.
.13a2	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.13a4	20 ca 13	jsr $13ca			jsr 	CreateArray 				; create array to XA
.13a7	84 26		sty $26				sty 	zTemp1 						; save Y
.13a9	7a		ply				ply 								; restore target to zTemp0
.13aa	84 24		sty $24				sty 	zTemp0
.13ac	7a		ply				ply
.13ad	84 25		sty $25				sty 	zTemp0+1
.13af	92 24		sta ($24)			sta 	(zTemp0) 					; save new array pointer.
.13b1	a0 01		ldy #$01			ldy 	#1
.13b3	8a		txa				txa
.13b4	91 24		sta ($24),y			sta 	(zTemp0),y
.13b6	a4 26		ldy $26				ldy 	zTemp1 						; restore Y
.13b8	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 				; check )
.13bb	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.13bd	c8		iny				iny 								; dim a(4),b(6)
.13be	c9 99		cmp #$99			cmp 	#PR_COMMA
.13c0	f0 c1		beq $1383			beq 	CommandDIM
.13c2	88		dey				dey
.13c3	60		rts				rts
.13c4					_CDSyntax:
.13c4	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.13c7					_CDExists:
.13c7	4c 3f 2b	jmp $2b3f		jmp	ErrorV_redefine
.13ca					CreateArray:
.13ca	8d 07 05	sta $0507			sta 	CAType						; save type
.13cd	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; get array dimension to R0
.13d0	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.13d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.13d4	f0 04		beq $13da			beq 	_CATwoDimensions
.13d6	20 26 14	jsr $1426			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.13d9	60		rts				rts
.13da					_CATwoDimensions:
.13da	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.13dc	8d 09 05	sta $0509			sta 	CADim1+1
.13df	a5 08		lda $08				lda 	IFR0+IM0
.13e1	8d 08 05	sta $0508			sta 	CADim1+0
.13e4	20 6a 2c	jsr $2c6a			jsr 	ERRCheckComma 				; check comma
.13e7	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.13ea	5a		phy				phy 								; save Y position
.13eb	18		clc				clc 								; allocate the outer array of pointers.
.13ec	ae 09 05	ldx $0509			ldx 	CADim1+1
.13ef	ad 08 05	lda $0508			lda 	CADim1
.13f2	20 65 14	jsr $1465			jsr 	CSAAllocate 				; allocate the outer array
.13f5	da		phx				phx									; save this address on the stack
.13f6	48		pha				pha
.13f7	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.13f9	85 28		sta $28				sta 	zTemp2
.13fb					_CACreateSubLoop:
.13fb	38		sec				sec
.13fc	20 26 14	jsr $1426			jsr 	CreateSingleArray 			; create data array of required size.
.13ff	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1401	91 28		sta ($28),y			sta 	(zTemp2),y
.1403	8a		txa				txa
.1404	c8		iny				iny
.1405	91 28		sta ($28),y			sta 	(zTemp2),y
.1407	18		clc				clc  								; next slot.
.1408	a5 28		lda $28				lda 	zTemp2
.140a	69 02		adc #$02			adc 	#2
.140c	85 28		sta $28				sta 	zTemp2
.140e	90 02		bcc $1412			bcc 	_CACNoCarry
.1410	e6 29		inc $29				inc 	zTemp2+1
.1412					_CACNoCarry:
.1412	ad 08 05	lda $0508			lda 	CADim1 						; use DIM1 as a counter
.1415	d0 03		bne $141a			bne 	_CACNoBorrow
.1417	ce 09 05	dec $0509			dec 	CADim1+1
.141a					_CACNoBorrow:
.141a	ce 08 05	dec $0508			dec 	CADim1
.141d	ad 09 05	lda $0509			lda 	CADim1+1 					; but do one more.
.1420	10 d9		bpl $13fb			bpl 	_CACreateSubLoop
.1422	68		pla				pla
.1423	fa		plx				plx
.1424	7a		ply				ply
.1425	60		rts				rts
.1426					CreateSingleArray:
.1426	5a		phy				phy
.1427	38		sec				sec 								; allocate memory block all zeros.
.1428	a5 08		lda $08				lda 	IFR0+IM0
.142a	a6 09		ldx $09				ldx 	IFR0+IM1
.142c	20 65 14	jsr $1465			jsr 	CSAAllocate
.142f	ac 07 05	ldy $0507			ldy 	CAType 						; if numbers, we don't need to initialise.
.1432	f0 2f		beq $1463			beq 	_CSANoInit
.1434	da		phx				phx 								; save address of new array
.1435	48		pha				pha
.1436	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.1438	86 25		stx $25				stx 	zTemp0+1
.143a	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.143c	b1 24		lda ($24),y			lda 	(zTemp0),y
.143e	a8		tay				tay
.143f	b2 24		lda ($24)			lda 	(zTemp0)
.1441	aa		tax				tax
.1442					_CSAEraseString:
.1442	5a		phy				phy
.1443	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1445	a9 80		lda #$80			lda 	#$80
.1447	91 24		sta ($24),y			sta 	(zTemp0),y
.1449	7a		ply				ply
.144a	18		clc				clc 								; add 4 to next slot.
.144b	a5 24		lda $24				lda 	zTemp0
.144d	69 04		adc #$04			adc 	#4
.144f	85 24		sta $24				sta 	zTemp0
.1451	90 02		bcc $1455			bcc 	_CSAENoCarry
.1453	e6 25		inc $25				inc 	zTemp0+1
.1455					_CSAENoCarry:
.1455	e0 00		cpx #$00			cpx 	#0
.1457	d0 01		bne $145a			bne 	_CSANoBorrow
.1459	88		dey				dey
.145a					_CSANoBorrow:
.145a	ca		dex				dex
.145b	d0 e5		bne $1442			bne 	_CSAEraseString
.145d	c0 00		cpy #$00			cpy 	#0
.145f	d0 e1		bne $1442			bne 	_CSAEraseString
.1461	68		pla				pla
.1462	fa		plx				plx
.1463					_CSANoInit:
.1463	7a		ply				ply
.1464	60		rts				rts
.1465					CSAAllocate:
.1465	08		php				php 								; save type flag.
.1466	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1467	d0 01		bne $146a			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1469	e8		inx				inx
.146a					_CSAANoCarry:
.146a	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.146c	b0 2e		bcs $149c			bcs 	_CSARange
.146e	28		plp				plp 								; restore type flag
.146f	08		php				php 								; save it back again.
.1470	da		phx				phx 								; save size.
.1471	48		pha				pha
.1472	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.1474	90 03		bcc $1479			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1476	0a		asl a				asl 	a
.1477	26 25		rol $25				rol 	zTemp0+1
.1479					_CSAATimes2:
.1479	0a		asl a				asl 	a
.147a	26 25		rol $25				rol 	zTemp0+1
.147c	18		clc				clc
.147d	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.147f	90 02		bcc $1483			bcc 	_CSAANoCarry2
.1481	e6 25		inc $25				inc 	zTemp0+1
.1483					_CSAANoCarry2:
.1483	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.1485	20 4d 13	jsr $134d			jsr 	AllocateMemory 				; allocate memory to XA
.1488	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.148a	85 24		sta $24				sta 	zTemp0
.148c	68		pla				pla  								; write element count to first 2 bytes
.148d	92 24		sta ($24)			sta 	(zTemp0)
.148f	68		pla				pla 								; msb of element count
.1490	28		plp				plp 								; CC if pointer array
.1491	b0 02		bcs $1495			bcs 	_CSAAIsData
.1493	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1495					_CSAAIsData:
.1495	a0 01		ldy #$01			ldy 	#1
.1497	91 24		sta ($24),y			sta 	(zTemp0),y
.1499	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.149b	60		rts				rts
.149c					_CSARange:
.149c	4c 88 2a	jmp $2a88		jmp	ErrorV_range
.0507					CAType:
>0507							.fill 	1
.0508					CADim1:
>0508							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.149f					Command_Doke:
.149f	38		sec				sec
.14a0	80 01		bra $14a3			bra 	DPCommon
.14a2					Command_Poke:
.14a2	18		clc				clc
.14a3					DPCommon:
.14a3	08		php				php 								; CS if DOKE
.14a4	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; address
.14a7	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.14a9	48		pha				pha
.14aa	a5 09		lda $09				lda 	IFR0+IM1
.14ac	48		pha				pha
.14ad	20 6a 2c	jsr $2c6a			jsr 	ERRCheckComma 				; [dp]oke address,data
.14b0	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16
.14b3	68		pla				pla 								; get address back
.14b4	85 25		sta $25				sta 	zTemp0+1
.14b6	68		pla				pla
.14b7	85 24		sta $24				sta 	zTemp0
.14b9	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.14bb	92 24		sta ($24)			sta 	(zTemp0)
.14bd	28		plp				plp 								; done if CC
.14be	90 08		bcc $14c8			bcc 	_DPExit
.14c0	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.14c1	a5 09		lda $09				lda 	IFR0+IM1
.14c3	a0 01		ldy #$01			ldy 	#1
.14c5	91 24		sta ($24),y			sta 	(zTemp0),y
.14c7	7a		ply				ply
.14c8					_DPExit:
.14c8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.14c9					Command_GOTO:
.14c9	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; get line number
.14cc					GotoR0:
.14cc	ad 1f 05	lda $051f			lda 	PGMBaseHigh 				; back to the program start
.14cf	85 19		sta $19				sta 	codePtr+1
.14d1	64 18		stz $18				stz 	codePtr
.14d3					_GOSearch:
.14d3	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.14d5	f0 1f		beq $14f6			beq 	_GOError
.14d7	a0 01		ldy #$01			ldy 	#1 							; found line #
.14d9	b1 18		lda ($18),y			lda 	(codePtr),y
.14db	c5 08		cmp $08				cmp 	IFR0+IM0
.14dd	d0 0a		bne $14e9			bne 	_GONext
.14df	c8		iny				iny
.14e0	b1 18		lda ($18),y			lda 	(codePtr),y
.14e2	c5 09		cmp $09				cmp 	IFR0+IM1
.14e4	d0 03		bne $14e9			bne 	_GONext
.14e6	4c 32 18	jmp $1832			jmp 	RUNNewLine
.14e9					_GONext:
.14e9	18		clc				clc 								; advance to next line.
.14ea	b2 18		lda ($18)			lda 	(codePtr)
.14ec	65 18		adc $18				adc 	codePtr
.14ee	85 18		sta $18				sta 	codePtr
.14f0	90 e1		bcc $14d3			bcc 	_GOSearch
.14f2	e6 19		inc $19				inc 	codePtr+1
.14f4	80 dd		bra $14d3			bra 	_GOSearch
.14f6					_GOError:
.14f6	4c 0c 2c	jmp $2c0c		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.14f9					Command_Input:
.14f9	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.14fb	8d 0a 05	sta $050a			sta 	InputFlag
.14fe	80 03		bra $1503			bra 	Command_IP_Main
.1500					Command_Print:
.1500	9c 0a 05	stz $050a			stz 	InputFlag
.1503					Command_IP_Main:
.1503	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1504					_CPLoop:
.1504	08		php				php 								; save "last action" flag
.1505	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1507	c9 8d		cmp #$8d			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1509	f0 48		beq $1553			beq 	_CPExit 					; without consuming
.150b	c9 9b		cmp #$9b			cmp 	#PR_COLON
.150d	f0 44		beq $1553			beq 	_CPExit
.150f	68		pla				pla 								; throw last action flag
.1510	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and consume
.1512	c8		iny				iny
.1513	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon (syntax seperator)
.1515	f0 39		beq $1550			beq 	_CPContinueWithSameLine
.1517	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma (tab)
.1519	f0 30		beq $154b			beq 	_CPTab
.151b	88		dey				dey 								; undo the get.
.151c	2c 0a 05	bit $050a			bit 	InputFlag 					; check for Input
.151f	10 0b		bpl $152c			bpl	 	_CPNotInput
.1521	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1523	c9 40		cmp #$40			cmp 	#$40
.1525	d0 05		bne $152c			bne 	_CPNotInput
.1527	20 5c 15	jsr $155c			jsr 	_CPInputCode 				; input code
.152a	80 d7		bra $1503			bra 	Command_IP_Main 			; and go round again.
.152c					_CPNotInput:
.152c	20 26 1a	jsr $1a26			jsr 	EXPEvaluateExpression 		; evaluate expression.
.152f	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1531	10 0e		bpl $1541			bpl 	_CPNumber
.1533	5a		phy				phy
.1534	18		clc				clc 								; string address to YX
.1535	a5 08		lda $08				lda 	IFR0+IM0
.1537	aa		tax				tax
.1538	a5 09		lda $09				lda 	IFR0+IM1
.153a	a8		tay				tay
.153b	20 90 15	jsr $1590			jsr 	CPPrintYX 					; print YX
.153e	7a		ply				ply
.153f	80 c2		bra $1503			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1541					_CPNumber:
.1541	5a		phy				phy
.1542	20 fc 34	jsr $34fc			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1545	20 90 15	jsr $1590			jsr 	CPPrintYX 					; print string at YX
.1548	7a		ply				ply
.1549	80 b8		bra $1503			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.154b					_CPTab:
.154b	a9 09		lda #$09			lda 	#9 							; print TAB
.154d	20 a8 15	jsr $15a8			jsr 	CPPrintA
.1550					_CPContinueWithSameLine:
.1550	38		sec				sec 								; loop round with carry set, which
.1551	80 b1		bra $1504			bra 	_CPLoop 					; will inhibit final CR
.1553					_CPExit:
.1553	28		plp				plp 								; get last action flag
.1554	b0 05		bcs $155b			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1556	a9 0d		lda #$0d			lda 	#13 						; print new line
.1558	20 a8 15	jsr $15a8			jsr 	CPPrintA
.155b					_CPExit2:
.155b	60		rts				rts
.155c					_CPInputCode:
.155c	20 ee 1a	jsr $1aee			jsr 	EXPTermR0 					; get the term, the thing being input to
.155f	5a		phy				phy 								; save position
.1560	20 a5 15	jsr $15a5			jsr 	CPInputA					; input a line to YX
.1563	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1565	30 18		bmi $157f			bmi 	_CPInputString
.1567	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1569	48		pha				pha
.156a	a5 09		lda $09				lda 	IFR0+IM1
.156c	48		pha				pha
.156d	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.156f	84 25		sty $25				sty 	zTemp0+1
.1571	20 d8 1d	jsr $1dd8			jsr 	VALConversionZTemp0
.1574	68		pla				pla 								; do the assign.
.1575	85 25		sta $25				sta 	zTemp0+1
.1577	68		pla				pla
.1578	85 24		sta $24				sta 	zTemp0
.157a	20 d0 15	jsr $15d0			jsr 	AssignNumber
.157d	7a		ply				ply
.157e	60		rts				rts
.157f					_CPInputString:
.157f	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1581	85 24		sta $24				sta 	zTemp0
.1583	a5 09		lda $09				lda 	IFR0+IM1
.1585	85 25		sta $25				sta 	zTemp0+1
.1587	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1589	84 09		sty $09				sty 	IFR0+IM1
.158b	20 e7 15	jsr $15e7			jsr 	AssignString 				; assign the string
.158e	7a		ply				ply 								; exit
.158f	60		rts				rts
.1590					CPPrintYX:
.1590	86 24		stx $24				stx 	zTemp0
.1592	84 25		sty $25				sty 	zTemp0+1
.1594	b2 24		lda ($24)			lda 	(zTemp0)
.1596	aa		tax				tax
.1597	f0 0b		beq $15a4			beq 	_CPPrintExit
.1599	a0 01		ldy #$01			ldy 	#1
.159b					_CPPrintAYXLoop:
.159b	b1 24		lda ($24),y			lda 	(zTemp0),y
.159d	20 a8 15	jsr $15a8			jsr 	CPPrintA
.15a0	c8		iny				iny
.15a1	ca		dex				dex
.15a2	d0 f7		bne $159b			bne 	_CPPrintAYXLoop
.15a4					_CPPrintExit:
.15a4	60		rts				rts
.15a5					CPInputA:
.15a5	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.15a8					CPPrintA:
.15a8	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.050a					InputFlag:
>050a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.15ab					CommandLET:
.15ab	20 ee 1a	jsr $1aee			jsr 	EXPTermR0 					; get term
.15ae	90 6f		bcc $161f			bcc 	CLError 					; must be a reference term.
.15b0	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.15b2	48		pha				pha
.15b3	a5 09		lda $09				lda 	IFR0+IM1
.15b5	48		pha				pha
.15b6	a5 0b		lda $0b				lda 	IFR0+IExp
.15b8	48		pha				pha
.15b9	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.15bb	20 72 2c	jsr $2c72			jsr 	ERRCheckA
.15be	20 26 1a	jsr $1a26			jsr 	EXPEvaluateExpression 		; right hand side.
.15c1	68		pla				pla 								; restore type of l-expr
.15c2	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.15c4	30 5c		bmi $1622			bmi 	CLType
.15c6	fa		plx				plx 	 							; pop target address to zTemp0
.15c7	86 25		stx $25				stx 	zTemp0+1
.15c9	fa		plx				plx
.15ca	86 24		stx $24				stx 	zTemp0
.15cc					AssignData:
.15cc	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.15ce	30 17		bmi $15e7			bmi 	AssignString
.15d0					AssignNumber:
.15d0	5a		phy				phy
.15d1	a0 03		ldy #$03			ldy 	#3
.15d3	a5 0b		lda $0b				lda 	IFR0+IExp
.15d5	91 24		sta ($24),y			sta 	(zTemp0),y
.15d7	88		dey				dey
.15d8	a5 0a		lda $0a				lda 	IFR0+IM2
.15da	91 24		sta ($24),y			sta 	(zTemp0),y
.15dc	88		dey				dey
.15dd	a5 09		lda $09				lda 	IFR0+IM1
.15df	91 24		sta ($24),y			sta 	(zTemp0),y
.15e1	a5 08		lda $08				lda 	IFR0+IM0
.15e3	92 24		sta ($24)			sta 	(zTemp0)
.15e5	7a		ply				ply
.15e6	60		rts				rts
.15e7					AssignString:
.15e7	5a		phy				phy
.15e8	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.15ea	b1 24		lda ($24),y			lda 	(zTemp0),y
.15ec	12 24		ora ($24)			ora 	(zTemp0)
.15ee	f0 23		beq $1613			beq 	_CLConcreteString
.15f0	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.15f2	85 26		sta $26				sta 	zTemp1
.15f4	b1 24		lda ($24),y			lda 	(zTemp0),y
.15f6	85 27		sta $27				sta 	zTemp1+1
.15f8	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.15fa	38		sec				sec 								; we want 3 for slot size, status, string size.
.15fb	e9 03		sbc #$03			sbc 	#3
.15fd	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.15ff	90 12		bcc $1613			bcc 	_CLConcreteString 			; if it won't fit concrete the string again.
.1601	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte)
.1603	1a		inc a				inc 	a
.1604	aa		tax				tax
.1605	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1607					_CLReplaceString:
.1607	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1609	c8		iny				iny
.160a	c8		iny				iny
.160b	91 26		sta ($26),y			sta 	(zTemp1),y
.160d	88		dey				dey
.160e	ca		dex				dex
.160f	d0 f6		bne $1607			bne 	_CLReplaceString
.1611	80 0a		bra $161d			bra 	_CLExit
.1613					_CLConcreteString:
.1613	20 e4 2c	jsr $2ce4			jsr 	StringConcrete  			; concreted string in XA.
.1616	a0 01		ldy #$01			ldy 	#1 							; store the address
.1618	92 24		sta ($24)			sta 	(zTemp0)
.161a	8a		txa				txa
.161b	91 24		sta ($24),y			sta 	(zTemp0),y
.161d					_CLExit:
.161d	7a		ply				ply
.161e	60		rts				rts
.161f					CLError:
.161f	4c aa 2b	jmp $2baa		jmp	ErrorV_variable
.1622					CLType:
.1622	4c a7 2a	jmp $2aa7		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1625					Command_LIST:
.1625	a9 06		lda #$06			lda 	#6 							; set default spacing.
.1627	8d 0f 05	sta $050f			sta 	CLIndent
.162a	9c 0b 05	stz $050b			stz 	CLFrom 						; default from
.162d	9c 0c 05	stz $050c			stz 	CLFrom+1
.1630	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1632	c9 99		cmp #$99			cmp 	#PR_COMMA
.1634	f0 1d		beq $1653			beq 	_CLToLine
.1636	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1638	f0 37		beq $1671			beq 	_CLDefaultTo
.163a	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.163d	a5 08		lda $08				lda 	IFR0+IM0
.163f	8d 0b 05	sta $050b			sta 	CLFrom
.1642	8d 0d 05	sta $050d			sta 	CLTo
.1645	a5 09		lda $09				lda 	IFR0+IM1
.1647	8d 0c 05	sta $050c			sta 	CLFrom+1
.164a	8d 0e 05	sta $050e			sta 	CLTo+1
.164d	b1 18		lda ($18),y			lda 	(codePtr),y
.164f	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1651	f0 26		beq $1679			beq 	_CLList
.1653					_CLToLine:
.1653	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1655	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1657	f0 18		beq $1671			beq 	_CLDefaultTo
.1659	20 6a 2c	jsr $2c6a			jsr 	ERRCheckComma 				; sep comma
.165c	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.165e	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ
.1660	f0 0f		beq $1671			beq 	_CLDefaultTo
.1662	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; there's a To value.
.1665	a5 08		lda $08				lda 	IFR0+IM0
.1667	8d 0d 05	sta $050d			sta 	CLTo
.166a	a5 09		lda $09				lda 	IFR0+IM1
.166c	8d 0e 05	sta $050e			sta 	CLTo+1
.166f	80 08		bra $1679			bra 	_CLList
.1671					_CLDefaultTo:
.1671	a9 ff		lda #$ff			lda 	#$FF
.1673	8d 0d 05	sta $050d			sta 	CLTo
.1676	8d 0e 05	sta $050e			sta 	CLTo+1
.1679					_CLList:
.1679	ad 1f 05	lda $051f			lda 	PGMBaseHigh 				; back to the program start
.167c	85 19		sta $19				sta 	codePtr+1
.167e	64 18		stz $18				stz 	codePtr
.1680	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1682	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1684	20 71 22	jsr $2271			jsr 	TOKSetDetokeniseOutput
.1687					_CLLoop:
.1687	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1689	f0 6f		beq $16fa			beq 	_CLExit
.168b	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.168e	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1691	d0 6a		bne $16fd			bne 	_CLBreak
.1693	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1695	20 00 17	jsr $1700			jsr 	_CLCompareLine
.1698	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.169a	f0 51		beq $16ed			beq 	_CLNext
.169c	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.169e	20 00 17	jsr $1700			jsr 	_CLCompareLine
.16a1	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.16a3	f0 48		beq $16ed			beq 	_CLNext
.16a5	a0 02		ldy #$02			ldy 	#2 							; print line #
.16a7	b1 18		lda ($18),y			lda 	(codePtr),y
.16a9	aa		tax				tax
.16aa	88		dey				dey
.16ab	b1 18		lda ($18),y			lda 	(codePtr),y
.16ad	20 b9 2e	jsr $2eb9			jsr 	WriteIntXA
.16b0	20 4c 29	jsr $294c			jsr 	GetIndent
.16b3	48		pha				pha
.16b4	10 0d		bpl $16c3			bpl 	_CLSpacing 					; skip if +ve
.16b6	18		clc				clc 								; move backwards
.16b7	6d 0f 05	adc $050f			adc 	CLIndent
.16ba	c9 06		cmp #$06			cmp 	#6 							; no further than this
.16bc	b0 02		bcs $16c0			bcs 	_CLSaveIndent
.16be	a9 06		lda #$06			lda 	#6
.16c0					_CLSaveIndent:
.16c0	8d 0f 05	sta $050f			sta 	CLIndent 					; update the indent.
.16c3					_CLSpacing:
.16c3	a9 20		lda #$20			lda 	#32
.16c5	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.16c8	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.16cb	ec 0f 05	cpx $050f			cpx 	CLIndent
.16ce	d0 f3		bne $16c3			bne 	_CLSpacing
.16d0	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.16d2	a5 18		lda $18				lda 	codePtr
.16d4	18		clc				clc
.16d5	69 03		adc #$03			adc 	#3
.16d7	aa		tax				tax
.16d8	90 01		bcc $16db			bcc 	_CLNoCarry2
.16da	c8		iny				iny
.16db					_CLNoCarry2:
.16db	20 16 22	jsr $2216			jsr 	TOKDetokenise
.16de	a9 0d		lda #$0d			lda 	#13	 						; next line
.16e0	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.16e3	68		pla				pla 								; get indent up
.16e4	30 07		bmi $16ed			bmi 	_CLNext 				 	; if +ve add to indent
.16e6	18		clc				clc
.16e7	6d 0f 05	adc $050f			adc 	CLIndent
.16ea	8d 0f 05	sta $050f			sta 	CLIndent
.16ed					_CLNext:
.16ed	18		clc				clc 								; advance to next line.
.16ee	b2 18		lda ($18)			lda 	(codePtr)
.16f0	65 18		adc $18				adc 	codePtr
.16f2	85 18		sta $18				sta 	codePtr
.16f4	90 02		bcc $16f8			bcc 	_CLNoCarry
.16f6	e6 19		inc $19				inc 	codePtr+1
.16f8					_CLNoCarry:
.16f8	80 8d		bra $1687			bra 	_CLLoop
.16fa					_CLExit:
.16fa	4c d8 2e	jmp $2ed8			jmp 	WarmStart
.16fd					_CLBreak:
.16fd	4c 02 2c	jmp $2c02		jmp	ErrorV_break
.1700					_CLCompareLine:
.1700	a0 01		ldy #$01			ldy 	#1
.1702	38		sec				sec
.1703	b1 18		lda ($18),y			lda 	(codePtr),y
.1705	fd 0b 05	sbc $050b,x			sbc 	CLFrom,x
.1708	85 24		sta $24				sta 	zTemp0
.170a	c8		iny				iny
.170b	b1 18		lda ($18),y			lda 	(codePtr),y
.170d	fd 0c 05	sbc $050c,x			sbc 	CLFrom+1,x
.1710	90 0a		bcc $171c			bcc 	_CLIsNegative
.1712	d0 05		bne $1719			bne 	_CLIsPositive
.1714	a5 24		lda $24				lda 	zTemp0
.1716	d0 01		bne $1719			bne 	_CLIsPositive
.1718	60		rts				rts
.1719					_CLIsPositive:
.1719	a9 01		lda #$01			lda 	#1
.171b	60		rts				rts
.171c					_CLIsNegative:
.171c	a9 ff		lda #$ff			lda 	#255
.171e	60		rts				rts
.050b					CLFrom:
>050b							.fill 	2
.050d					CLTo:
>050d							.fill 	2
.050f					CLIndent:
>050f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.171f					Command_NEW:
.171f	20 1f 24	jsr $241f			jsr 	PGMNewProgram 				; Reset current program
.1722	20 30 13	jsr $1330			jsr 	ClearCode 					; Run CLR
.1725	4c 8b 18	jmp $188b			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1728					Command_READ:
.1728	20 ee 1a	jsr $1aee			jsr 	EXPTermR0 					; get term to R0
.172b	90 35		bcc $1762			bcc 	_CRSyntax 					; fail if not a reference.
.172d	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.172f	48		pha				pha
.1730	a5 09		lda $09				lda 	IFR0+IM1
.1732	48		pha				pha
.1733	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1735	48		pha				pha
.1736	20 ff 17	jsr $17ff			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1739	ad 14 05	lda $0514			lda 	dataInStatement 			; if in a data statement, we don't need to search
.173c	d0 27		bne $1765			bne 	_CRHaveData  				; forward for the next one.
.173e					_CRNextLine:
.173e	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1740	f0 1a		beq $175c			beq 	_CRNoData
.1742					_CRKeepSearching:
.1742	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1744	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQENDRSQRSQ
.1746	20 7f 29	jsr $297f			jsr 	ScanForward
.1749	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.174b	f0 18		beq $1765			beq 	_CRHaveData 				; found it
.174d	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.174f	18		clc				clc 								; try the next line, keep going.
.1750	b2 18		lda ($18)			lda 	(codePtr)
.1752	65 18		adc $18				adc 	codePtr
.1754	85 18		sta $18				sta 	codePtr
.1756	90 e6		bcc $173e			bcc 	_CRNextLine
.1758	e6 19		inc $19				inc 	codePtr+1
.175a	80 e2		bra $173e			bra 	_CRNextLine
.175c					_CRNoData:
.175c	4c 2f 2b	jmp $2b2f		jmp	ErrorV_data
.175f					_CLType:
.175f	4c a7 2a	jmp $2aa7		jmp	ErrorV_type
.1762					_CRSyntax:
.1762	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.1765					_CRHaveData:
.1765	20 26 1a	jsr $1a26			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1768	68		pla				pla 								; type of l-expr
.1769	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.176b	30 f2		bmi $175f			bmi 	_CLType
.176d	68		pla				pla 								; restore address
.176e	85 25		sta $25				sta 	zTemp0+1
.1770	68		pla				pla
.1771	85 24		sta $24				sta 	zTemp0
.1773	20 cc 15	jsr $15cc			jsr 	AssignData 					; write R0 there.
.1776	9c 14 05	stz $0514			stz 	dataInStatement 			; clear in data flag
.1779	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.177b	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.177d	d0 04		bne $1783			bne 	_CRSwapBack
.177f	c8		iny				iny 								; consume comma
.1780	ee 14 05	inc $0514			inc 	dataInStatement 			; set in data statement flag.
.1783					_CRSwapBack:
.1783	20 ff 17	jsr $17ff			jsr 	SwapCodeDataPointers		; swap them back.
.1786	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1788	c8		iny				iny
.1789	c9 99		cmp #$99			cmp 	#PR_COMMA
.178b	f0 9b		beq $1728			beq 	Command_READ 				; if so go round again.
.178d	88		dey				dey 								; unpick get.
.178e	60		rts				rts
.178f					Command_DATA:
.178f	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1791	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQENDRSQRSQ
.1793	20 7f 29	jsr $297f			jsr 	ScanForward
.1796	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1798	d0 01		bne $179b			bne 	_CDNotEOL
.179a	88		dey				dey
.179b					_CDNotEOL:
.179b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.179c					Command_REM:
.179c					Command_REM2:
.179c	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.179e	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.17a0	d0 06		bne $17a8			bne 	_CRExit
.17a2	c8		iny				iny 								; skip over it, it's a comment.
.17a3	98		tya				tya
.17a4	38		sec				sec
.17a5	71 18		adc ($18),y			adc 	(codePtr),y
.17a7	a8		tay				tay
.17a8					_CRExit:
.17a8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.17a9					Command_RENUMBER:
.17a9	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.17ab	85 08		sta $08				sta 	IM0+IFR0
.17ad	a9 03		lda #$03			lda 	#1000 >> 8
.17af	85 09		sta $09				sta 	IM1+IFR0
.17b1	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17b3	c9 9b		cmp #$9b			cmp 	#PR_COLON
.17b5	f0 07		beq $17be			beq 	_CRIsDefault
.17b7	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ
.17b9	f0 03		beq $17be			beq 	_CRIsDefault
.17bb	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; get other start
.17be					_CRIsDefault:
.17be	5a		phy				phy
.17bf	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.17c1	ad 1f 05	lda $051f			lda 	PGMBaseHigh
.17c4	85 25		sta $25				sta 	zTemp0+1
.17c6					_CRRenumberLoop:
.17c6	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.17c8	f0 21		beq $17eb			beq 	_CRExit
.17ca	18		clc				clc
.17cb	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.17cd	a5 08		lda $08				lda 	IFR0+IM0
.17cf	91 24		sta ($24),y			sta 	(zTemp0),y
.17d1	69 0a		adc #$0a			adc 	#10
.17d3	85 08		sta $08				sta 	IFR0+IM0
.17d5	c8		iny				iny
.17d6	a5 09		lda $09				lda 	IFR0+IM1
.17d8	91 24		sta ($24),y			sta 	(zTemp0),y
.17da	69 00		adc #$00			adc 	#0
.17dc	85 09		sta $09				sta 	IFR0+IM1
.17de	18		clc				clc 								; next line.
.17df	b2 24		lda ($24)			lda 	(zTemp0)
.17e1	65 24		adc $24				adc 	zTemp0
.17e3	85 24		sta $24				sta 	zTemp0
.17e5	90 df		bcc $17c6			bcc 	_CRRenumberLoop
.17e7	e6 25		inc $25				inc 	zTemp0+1
.17e9	80 db		bra $17c6			bra 	_CRRenumberLoop
.17eb					_CRExit:
.17eb	7a		ply				ply
.17ec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.17ed					S
.17ed					Command_RESTORE:
.17ed	ad 1f 05	lda $051f			lda 	PGMBaseHigh 				; back to the program start
.17f0	8d 11 05	sta $0511			sta 	dataPtr+1
.17f3	9c 10 05	stz $0510			stz 	dataPtr
.17f6	a9 03		lda #$03			lda 	#3 							; position start of line
.17f8	8d 12 05	sta $0512			sta 	dataPos
.17fb	9c 14 05	stz $0514			stz 	dataInStatement 			; not in statement
.17fe	60		rts				rts
.17ff					SwapCodeDataPointers:
.17ff	ad 10 05	lda $0510			lda 	dataPtr 					; swap LSB of code/data
.1802	a6 18		ldx $18				ldx 	codePtr
.1804	85 18		sta $18				sta 	codePtr
.1806	8e 10 05	stx $0510			stx 	dataPtr
.1809	ad 11 05	lda $0511			lda 	dataPtr+1 					; swap MSB of code/data
.180c	a6 19		ldx $19				ldx 	codePtr+1
.180e	85 19		sta $19				sta 	codePtr+1
.1810	8e 11 05	stx $0511			stx 	dataPtr+1
.1813	ad 12 05	lda $0512			lda 	dataPos 					; swap dataPos and Y
.1816	8c 12 05	sty $0512			sty 	dataPos
.1819	a8		tay				tay
.181a	60		rts				rts
.0510					dataPtr:
>0510							.fill 	2
.0512					dataPos:
>0512							.fill 	2
.0514					dataInStatement:
>0514							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.181b					Command_RUN:
.181b	20 30 13	jsr $1330			jsr 	ClearCode					; clear everything out.
.181e	ad 1f 05	lda $051f			lda 	PGMBaseHigh 				; back to the program start
.1821	85 19		sta $19				sta 	codePtr+1
.1823	64 18		stz $18				stz 	codePtr
.1825	80 0b		bra $1832			bra 	RUNNewLine
.1827					RUNEndOfLine:
.1827	18		clc				clc 								; advance to next line.
.1828	b2 18		lda ($18)			lda 	(codePtr)
.182a	65 18		adc $18				adc 	codePtr
.182c	85 18		sta $18				sta 	codePtr
.182e	90 02		bcc $1832			bcc 	_RELNoCarry
.1830	e6 19		inc $19				inc 	codePtr+1
.1832					_RELNoCarry:
.1832					RUNNewLine:
.1832	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1834	9a		txs				txs
.1835	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.1837	f0 52		beq $188b			beq 	Command_END
.1839	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.183b	b1 18		lda ($18),y			lda 	(codePtr),y
.183d	8d 31 06	sta $0631			sta 	ERRLine
.1840	c8		iny				iny
.1841	b1 18		lda ($18),y			lda 	(codePtr),y
.1843	8d 32 06	sta $0632			sta 	ERRLine+1
.1846	c8		iny				iny 								; offset into codePtr for start of line.
.1847					RUNNewCommand:
.1847	9c 26 06	stz $0626			stz 	stringInitialised 			; reset string system flag.
.184a	ce 15 05	dec $0515			dec 	checkCounter				; don't do these checks ever command
.184d	d0 0a		bne $1859			bne 	_RNCNoCheck
.184f	5a		phy				phy 								; keyboard check.
.1850	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1853	7a		ply				ply
.1854	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1857	d0 1e		bne $1877			bne 	_RUNBreak
.1859					_RNCNoCheck:
.1859	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.185b	10 1d		bpl $187a			bpl		_RUNNotToken 				; probably an identifier
.185d	c8		iny				iny 								; consume token
.185e	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1860	f0 e5		beq $1847			beq 	RUNNewCommand
.1862	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1864	b0 0e		bcs $1874			bcs 	_RUNSyntax
.1866	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1868	90 0a		bcc $1874			bcc 	_RUNSyntax
.186a	0a		asl a				asl 	a 							; double into X.
.186b	aa		tax				tax
.186c	20 71 18	jsr $1871			jsr 	_RUNDispatchMain			; call the main dispatcher
.186f	80 d6		bra $1847			bra 	RUNNewCommand
.1871					_RUNDispatchMain:
.1871	7c f2 20	jmp ($20f2,x)			jmp 	(VectorTable,x)
.1874					_RUNSyntax:
.1874	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.1877					_RUNBreak:
.1877	4c 02 2c	jmp $2c02		jmp	ErrorV_break
.187a					_RUNNotToken:
.187a	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error (numbers)
.187c	90 f6		bcc $1874			bcc 	_RUNSyntax
.187e	20 ab 15	jsr $15ab			jsr 	CommandLET 					; assignment
.1881	80 c4		bra $1847			bra 	RUNNewCommand 				; loop round.
.1883					Command_Shift_Handler:
.1883	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.1885	c8		iny				iny
.1886	0a		asl a				asl 	a 							; double into X
.1887	aa		tax				tax
.1888	7c f2 21	jmp ($21f2,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.188b					Command_END:
.188b	4c d8 2e	jmp $2ed8			jmp 	WarmStart
.0515					checkCounter:
>0515							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.188e					Command_STOP:
.188e	4c 1b 2b	jmp $2b1b		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1891					Command_Sys:
.1891	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; execution address
.1894	5a		phy				phy
.1895	ad 79 06	lda $0679			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1898	ae d5 06	ldx $06d5			ldx 	('X'-'A')*4 + FastVariables
.189b	ac d9 06	ldy $06d9			ldy 	('Y'-'A')*4 + FastVariables
.189e	20 a3 18	jsr $18a3			jsr 	_CSCallIFR0 				; call the code
.18a1	7a		ply				ply
.18a2	60		rts				rts
.18a3					_CSCallIFR0:
.18a3	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.18a6					NoExec01:
.18a6					NoExec02:
.18a6					NoExec03:
.18a6					NoExec04:
.18a6					NoExec05:
.18a6					NoExec06:
.18a6					NoExec07:
.18a6					NoExec08:
.18a6	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.18a9					EXPBinAdd:
.18a9	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.18ab	30 6f		bmi $191c			bmi 	EXPConcatenate
.18ad	a2 0c		ldx #$0c			ldx 	#IFR1
.18af	4c f7 30	jmp $30f7			jmp 	IFloatAdd
.18b2					EXPBinSub:
.18b2	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18b4	30 3f		bmi $18f5			bmi 	EXPTypeError
.18b6	a2 0c		ldx #$0c			ldx 	#IFR1
.18b8	4c f0 30	jmp $30f0			jmp 	IFloatSubtract
.18bb					EXPBinMul:
.18bb	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.18bd	30 36		bmi $18f5			bmi 	EXPTypeError
.18bf	a2 0c		ldx #$0c			ldx 	#IFR1
.18c1	4c a1 31	jmp $31a1			jmp 	IFloatMultiply
.18c4					EXPBinFDiv:
.18c4	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18c6	30 2d		bmi $18f5			bmi 	EXPTypeError
.18c8	a2 0c		ldx #$0c			ldx 	#IFR1
.18ca	20 23 34	jsr $3423			jsr 	IFloatDivideFloat
.18cd	b0 0f		bcs $18de			bcs 	EXPDZero
.18cf	60		rts				rts
.18d0					EXPBinIDiv:
.18d0	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18d2	30 21		bmi $18f5			bmi 	EXPTypeError
.18d4	a2 0c		ldx #$0c			ldx 	#IFR1
.18d6	20 23 34	jsr $3423			jsr 	IFloatDivideFloat
.18d9	b0 03		bcs $18de			bcs 	EXPDZero
.18db	4c 00 34	jmp $3400			jmp 	IFloatIntegerR0
.18de					EXPDZero:
.18de	4c f0 2a	jmp $2af0		jmp	ErrorV_divzero
.18e1					EXPBinIMod:
.18e1	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18e3	30 10		bmi $18f5			bmi 	EXPTypeError
.18e5	a2 0c		ldx #$0c			ldx 	#IFR1
.18e7	5a		phy				phy
.18e8	20 36 33	jsr $3336			jsr 	IFPreProcessBitwise 		; set up everything.
.18eb	d0 05		bne $18f2			bne 	EXPDRange
.18ed	20 6f 32	jsr $326f			jsr 	IFloatModulusInteger
.18f0	7a		ply				ply
.18f1	60		rts				rts
.18f2					EXPDRange:
.18f2	4c 88 2a	jmp $2a88		jmp	ErrorV_range
.18f5					EXPTypeError:
.18f5	4c a7 2a	jmp $2aa7		jmp	ErrorV_type
.18f8					EXPBinAnd:
.18f8	24 0b		bit $0b				bit 	IFR0+IExp
.18fa	30 f9		bmi $18f5			bmi 	EXPTypeError
.18fc	a2 0c		ldx #$0c			ldx 	#IFR1
.18fe	20 f1 32	jsr $32f1			jsr 	IFloatBitwiseAnd
.1901	b0 ef		bcs $18f2			bcs 	EXPDRange
.1903	60		rts				rts
.1904					EXPBinOr:
.1904	24 0b		bit $0b				bit 	IFR0+IExp
.1906	30 ed		bmi $18f5			bmi 	EXPTypeError
.1908	a2 0c		ldx #$0c			ldx 	#IFR1
.190a	20 08 33	jsr $3308			jsr 	IFloatBitwiseOr
.190d	b0 e3		bcs $18f2			bcs 	EXPDRange
.190f	60		rts				rts
.1910					EXPBinXor:
.1910	24 0b		bit $0b				bit 	IFR0+IExp
.1912	30 e1		bmi $18f5			bmi 	EXPTypeError
.1914	a2 0c		ldx #$0c			ldx 	#IFR1
.1916	20 1f 33	jsr $331f			jsr 	IFloatBitwiseXor
.1919	b0 d7		bcs $18f2			bcs 	EXPDRange
.191b	60		rts				rts
.191c					EXPConcatenate:
.191c	18		clc				clc
.191d	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.191f	72 0c		adc ($0c)			adc 	(IFR1)
.1921	b0 2d		bcs $1950			bcs 	_EXPCError 					; far too long.
.1923	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.1925	da		phx				phx
.1926	a6 09		ldx $09				ldx 	IFR0+1
.1928	da		phx				phx
.1929	20 57 2d	jsr $2d57			jsr 	StringTempAllocate 			; allocate string, set up return
.192c	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.192e	a5 0c		lda $0c				lda 	IFR1
.1930	20 39 19	jsr $1939			jsr 	_EXPCCopyXA
.1933	fa		plx				plx 								; copy second string
.1934	68		pla				pla
.1935	20 39 19	jsr $1939			jsr 	_EXPCCopyXA
.1938	60		rts				rts
.1939					_EXPCCopyXA:
.1939	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.193b	85 24		sta $24				sta 	zTemp0
.193d	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.193f	f0 0e		beq $194f			beq 	_EXPCCExit 					; nothing in string
.1941	aa		tax				tax 								; count
.1942	5a		phy				phy 								; start position
.1943	a0 01		ldy #$01			ldy 	#1
.1945					_EXPCCLoop:
.1945	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.1947	20 8c 2d	jsr $2d8c			jsr 	StringTempWrite
.194a	c8		iny				iny
.194b	ca		dex				dex
.194c	d0 f7		bne $1945			bne 	_EXPCCLoop
.194e	7a		ply				ply
.194f					_EXPCCExit:
.194f	60		rts				rts
.1950					_EXPCError:
.1950	4c 94 2b	jmp $2b94		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1953					EXPReturnTrue:
.1953	a2 08		ldx #$08			ldx 	#IFR0
.1955	a9 01		lda #$01			lda 	#1
.1957	20 01 37	jsr $3701			jsr 	IFloatSetByte
.195a	20 0a 37	jsr $370a			jsr 	IFloatNegate
.195d	60		rts				rts
.195e					EXPReturnFalse:
.195e	a2 08		ldx #$08			ldx 	#IFR0
.1960	4c ff 36	jmp $36ff			jmp 	IFloatSetZero
.1963					EXPCompareEqual:
.1963	20 99 19	jsr $1999			jsr 	EXPCompareBaseCode
.1966	c9 00		cmp #$00			cmp 	#0
.1968	f0 e9		beq $1953			beq 	EXPReturnTrue
.196a	80 f2		bra $195e			bra 	EXPReturnFalse
.196c					EXPCompareLess:
.196c	20 99 19	jsr $1999			jsr 	EXPCompareBaseCode
.196f	c9 ff		cmp #$ff			cmp 	#$FF
.1971	f0 e0		beq $1953			beq 	EXPReturnTrue
.1973	80 e9		bra $195e			bra 	EXPReturnFalse
.1975					EXPCompareGreater:
.1975	20 99 19	jsr $1999			jsr 	EXPCompareBaseCode
.1978	c9 01		cmp #$01			cmp 	#1
.197a	f0 d7		beq $1953			beq 	EXPReturnTrue
.197c	80 e0		bra $195e			bra 	EXPReturnFalse
.197e					EXPCompareNotEqual:
.197e	20 99 19	jsr $1999			jsr 	EXPCompareBaseCode
.1981	c9 00		cmp #$00			cmp 	#0
.1983	d0 ce		bne $1953			bne 	EXPReturnTrue
.1985	80 d7		bra $195e			bra 	EXPReturnFalse
.1987					EXPCompareLessEqual:
.1987	20 99 19	jsr $1999			jsr 	EXPCompareBaseCode
.198a	c9 01		cmp #$01			cmp 	#1
.198c	d0 c5		bne $1953			bne 	EXPReturnTrue
.198e	80 ce		bra $195e			bra 	EXPReturnFalse
.1990					EXPCompareGreaterEqual:
.1990	20 99 19	jsr $1999			jsr 	EXPCompareBaseCode
.1993	c9 ff		cmp #$ff			cmp 	#$FF
.1995	d0 bc		bne $1953			bne 	EXPReturnTrue
.1997	80 c5		bra $195e			bra 	EXPReturnFalse
.1999					EXPCompareBaseCode:
.1999	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.199b	30 10		bmi $19ad			bmi 	_EXCBCString
.199d	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.199f	20 ce 33	jsr $33ce			jsr 	IFloatCompare
.19a2	a5 08		lda $08				lda 	IFR0+IM0
.19a4	f0 06		beq $19ac			beq 	_EXCBCExit 					; return 0 if zero
.19a6	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.19a8	50 02		bvc $19ac			bvc 	_EXCBCExit
.19aa	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.19ac					_EXCBCExit:
.19ac	60		rts				rts
.19ad					_EXCBCString:
.19ad	5a		phy				phy
.19ae	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.19b0	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.19b2	90 02		bcc $19b6			bcc 	_EXCBCSmaller
.19b4	b2 0c		lda ($0c)			lda 	(IFR1)
.19b6					_EXCBCSmaller:
.19b6	aa		tax				tax
.19b7	f0 0d		beq $19c6			beq 	_EXCBCMatches 				; if zero common length matches
.19b9	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.19bb					_EXCBCCheckSmallerMatches:
.19bb	c8		iny				iny 								; compare directly as far as common length
.19bc	38		sec				sec
.19bd	b1 0c		lda ($0c),y			lda 	(IFR1),y
.19bf	f1 08		sbc ($08),y			sbc 	(IFR0),y
.19c1	d0 08		bne $19cb			bne 	_EXCBCExit2
.19c3	ca		dex				dex
.19c4	d0 f5		bne $19bb			bne 	_EXCBCCheckSmallerMatches
.19c6					_EXCBCMatches:
.19c6	38		sec				sec
.19c7	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.19c9	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.19cb					_EXCBCExit2:
.19cb	7a		ply				ply
.19cc	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.19ce	f0 04		beq $19d4			beq 	_EXCBCReturn
.19d0	30 03		bmi $19d5			bmi 	_EXCBCFF 					; return $FF if <
.19d2	a9 01		lda #$01			lda 	#1 							; return 1 if >
.19d4					_EXCBCReturn:
.19d4	60		rts				rts
.19d5					_EXCBCFF:
.19d5	a9 ff		lda #$ff			lda 	#$FF
.19d7	60		rts				rts
.19d8					_EXCBCRange:
.19d8	4c 88 2a	jmp $2a88		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.19db					EXPBinLeft:
.19db	a9 ff		lda #$ff			lda 	#$FF
.19dd	8d 16 05	sta $0516			sta 	EXPShiftLeftFlag
.19e0	4c e6 19	jmp $19e6			jmp 	EXPShiftCommon
.19e3					EXPBinRight:
.19e3	9c 16 05	stz $0516			stz 	EXPShiftLeftFlag
.19e6					EXPShiftCommon:
.19e6	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.19e8	05 0f		ora $0f				ora 	IFR1+IExp
.19ea	29 7f		and #$7f			and 	#$7F
.19ec	d0 35		bne $1a23			bne 	_EXPSRange
.19ee	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.19f0	29 e0		and #$e0			and 	#$E0
.19f2	05 09		ora $09				ora 	IFR0+IM1
.19f4	05 0a		ora $0a				ora 	IFR0+IM2
.19f6	d0 25		bne $1a1d			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.19f8	5a		phy				phy
.19f9	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.19fb	29 1f		and #$1f			and 	#$1F
.19fd	f0 17		beq $1a16			beq 	_EXPSExit 					; exit if zero
.19ff	a8		tay				tay
.1a00					_EXPSLoop:
.1a00	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.1a02	2c 16 05	bit $0516			bit 	EXPShiftLeftFlag
.1a05	30 05		bmi $1a0c			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.1a07	20 2e 37	jsr $372e			jsr 	IFloatShiftRight
.1a0a	80 07		bra $1a13			bra 	_EXPSContinue
.1a0c					_EXPSShiftLeft:
.1a0c	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.1a0f	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.1a11	30 10		bmi $1a23			bmi 	_EXPSRange
.1a13					_EXPSContinue:
.1a13	88		dey				dey 								; do it Y times
.1a14	d0 ea		bne $1a00			bne 	_EXPSLoop
.1a16					_EXPSExit:
.1a16	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.1a18	20 90 36	jsr $3690			jsr 	IFloatCopyFromRegister
.1a1b	7a		ply				ply
.1a1c	60		rts				rts
.1a1d					_EXPSShiftZero:
.1a1d	a2 08		ldx #$08			ldx 	#IFR0
.1a1f	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.1a22	60		rts				rts
.1a23					_EXPSRange:
.1a23	4c 88 2a	jmp $2a88		jmp	ErrorV_range
.0516					EXPShiftLeftFlag:
>0516							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1a26					EXPEvaluateExpression:
.1a26	a9 00		lda #$00			lda 	#0 							; current precedence
.1a28					EXPEvaluateExpressionPrecedenceA:
.1a28	48		pha				pha
.1a29	20 a3 1a	jsr $1aa3			jsr 	EXPTermValueR0				; do first term.
.1a2c					_EELoop:
.1a2c	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1a2e	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1a30	90 31		bcc $1a63			bcc 	_EEExit
.1a32	aa		tax				tax 								; access the precedence of the operator.
.1a33	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1a34	dd 01 1e	cmp $1e01,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1a37	b0 2b		bcs $1a64			bcs 	_EEExit2
.1a39	48		pha				pha 								; save current precedence.
.1a3a	da		phx				phx 								; save operator
.1a3b	c8		iny				iny 								; consume operator
.1a3c	da		phx				phx
.1a3d	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.1a3f	20 4e 36	jsr $364e			jsr 	IFloatPushRx
.1a42	fa		plx				plx
.1a43	bd 01 1e	lda $1e01,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1a46	20 28 1a	jsr $1a28			jsr 	EXPEvaluateExpressionPrecedenceA
.1a49	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.1a4b	20 6f 36	jsr $366f			jsr 	IFloatPullRx
.1a4e	fa		plx				plx 								; operator
.1a4f	a5 0b		lda $0b				lda 	IFR0+IExp 					; check if types match.
.1a51	45 0f		eor $0f				eor 	IFR1+IExp
.1a53	30 08		bmi $1a5d			bmi 	_EEType		 				; MSBs differ, error.
.1a55					_EETypeOkay:
.1a55	8a		txa				txa
.1a56	0a		asl a				asl 	a 							; double -> X
.1a57	aa		tax				tax
.1a58	20 60 1a	jsr $1a60			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1a5b	80 cf		bra $1a2c			bra 	_EELoop
.1a5d					_EEType:
.1a5d	4c a7 2a	jmp $2aa7		jmp	ErrorV_type
.1a60					_EECallBinary:
.1a60	7c f2 20	jmp ($20f2,x)			jmp 	(VectorTable,x)
.1a63					_EEExit:
.1a63	68		pla				pla 								; throw precedence
.1a64					_EEExit2:
.1a64	18		clc				clc
.1a65	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1a66					EXPEvalNumber:
.1a66	20 26 1a	jsr $1a26			jsr 	EXPEvaluateExpression 		; get a value
.1a69	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1a6b	30 01		bmi $1a6e			bmi 	EVUType
.1a6d	60		rts				rts
.1a6e					EVUType:
.1a6e	4c a7 2a	jmp $2aa7		jmp	ErrorV_type
.1a71					EXPEvalInteger:
.1a71	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1a74	20 00 34	jsr $3400			jsr 	IFloatIntegerR0
.1a77	60		rts				rts
.1a78					EXPEvalInteger16:
.1a78	20 71 1a	jsr $1a71			jsr 	EXPEvalInteger 				; get integer
.1a7b	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1a7d	d0 21		bne $1aa0			bne 	EVURange
.1a7f	a6 09		ldx $09				ldx 	IFR0+IM1
.1a81	a5 08		lda $08				lda 	IFR0+IM0
.1a83	60		rts				rts
.1a84					EXPEvalInteger8:
.1a84	20 71 1a	jsr $1a71			jsr 	EXPEvalInteger 				; get integer
.1a87	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1a89	05 09		ora $09				ora 	IFR0+IM1
.1a8b	d0 13		bne $1aa0			bne 	EVURange
.1a8d	a5 08		lda $08				lda 	IFR0+IM0
.1a8f	60		rts				rts
.1a90					EXPEvalString:
.1a90	20 26 1a	jsr $1a26			jsr 	EXPEvaluateExpression 		; get value
.1a93	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1a95	10 d7		bpl $1a6e			bpl 	EVUType
.1a97	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1a99	86 25		stx $25				stx 	zTemp0+1
.1a9b	a5 08		lda $08				lda 	IFR0+IM0
.1a9d	85 24		sta $24				sta 	zTemp0
.1a9f	60		rts				rts
.1aa0					EVURange:
.1aa0	4c 88 2a	jmp $2a88		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1aa3					EXPTermValueR0:
.1aa3	20 ee 1a	jsr $1aee			jsr 	EXPTermR0 					; get term
.1aa6	90 45		bcc $1aed			bcc 	_ETVNotReference 			; exit if value.
.1aa8	5a		phy				phy
.1aa9	a0 03		ldy #$03			ldy 	#3 							; get type
.1aab	b1 08		lda ($08),y			lda 	(IFR0),y
.1aad	30 14		bmi $1ac3			bmi 	_ETVDereferenceString
.1aaf	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1ab1	88		dey				dey 								; get byte 2
.1ab2	b1 08		lda ($08),y			lda 	(IFR0),y
.1ab4	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1ab6	88		dey				dey 								; get byte 1
.1ab7	b1 08		lda ($08),y			lda 	(IFR0),y
.1ab9	aa		tax				tax 								; save in X so we can overwrite it
.1aba	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1abc	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1abe	85 08		sta $08				sta 	IFR0+IM0
.1ac0	7a		ply				ply
.1ac1	18		clc				clc
.1ac2	60		rts				rts
.1ac3					_ETVDereferenceString:
.1ac3	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1ac5	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1ac7	12 08		ora ($08)			ora 	(IFR0)
.1ac9	f0 11		beq $1adc			beq 	_ETVNull 					; if so, return a fake NULL.
.1acb	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1acd	aa		tax				tax
.1ace	b2 08		lda ($08)			lda 	(IFR0)
.1ad0	18		clc				clc 								; add two so points to actual string.
.1ad1	69 02		adc #$02			adc 	#2
.1ad3	90 01		bcc $1ad6			bcc 	_EVDSNoCarry
.1ad5	e8		inx				inx
.1ad6					_EVDSNoCarry:
.1ad6	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1ad8	85 08		sta $08				sta 	IFR0
.1ada	80 08		bra $1ae4			bra 	_ETVFillExit 				; tidy up and exit.
.1adc					_ETVNull:
.1adc	a9 ec		lda #$ec			lda 	#_EVTNString & $FF
.1ade	85 08		sta $08				sta 	IFR0+IM0
.1ae0	a9 1a		lda #$1a			lda 	#_EVTNString >> 8
.1ae2	85 09		sta $09				sta 	IFR0+IM1
.1ae4					_ETVFillExit:
.1ae4	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1ae6	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1ae8	85 0b		sta $0b				sta 	IFR0+IExp
.1aea	7a		ply				ply
.1aeb	60		rts				rts
.1aec					_EVTNString:
>1aec	00						.byte 	0
.1aed					_ETVNotReference:
.1aed	60		rts				rts
.1aee					EXPTermR0:
.1aee	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1af0	30 10		bmi $1b02			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1af2	c8		iny				iny 								; consume element
.1af3	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1af5	b0 08		bcs $1aff			bcs 	_ETMIdentifier
.1af7	20 2d 1b	jsr $1b2d			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1afa	20 60 1b	jsr $1b60			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1afd	18		clc				clc 								; return value ok
.1afe	60		rts				rts
.1aff					_ETMIdentifier:
.1aff	4c 98 30	jmp $3098			jmp 	VARCheckSimple 				; check variables, seperate module.
.1b02					_ETMIsUnaryOrMinus:
.1b02	c8		iny				iny 								; consume element
.1b03	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1b05	d0 0e		bne $1b15			bne 	_ETMCheckUnary
.1b07	20 a3 1a	jsr $1aa3			jsr 	EXPTermValueR0 				; get a term to negate
.1b0a	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.1b0c	20 0a 37	jsr $370a			jsr 	IFloatNegate
.1b0f	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.1b11	30 17		bmi $1b2a			bmi 	_ETMUnaryType				; if so error.
.1b13	18		clc				clc
.1b14	60		rts				rts
.1b15					_ETMCheckUnary:
.1b15	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1b17	90 0e		bcc $1b27			bcc 	_ETMUnarySyntax
.1b19	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1b1b	b0 0a		bcs $1b27			bcs 	_ETMUnarySyntax
.1b1d	0a		asl a				asl 	a 							; make it into an index => X
.1b1e	aa		tax				tax
.1b1f	20 24 1b	jsr $1b24			jsr 	_ETMCallUnaryFunction 		; call the function
.1b22	18		clc				clc 								; and return it.
.1b23	60		rts				rts
.1b24					_ETMCallUnaryFunction:
.1b24	7c f2 20	jmp ($20f2,x)			jmp 	(VectorTable,x)
.1b27					_ETMUnarySyntax:
.1b27	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.1b2a					_ETMUnaryType:
.1b2a	4c a7 2a	jmp $2aa7		jmp	ErrorV_type
.1b2d					EXPExtractTokenisedInteger:
.1b2d	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.1b2f	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.1b31	64 09		stz $09				stz 	IFR0+IM1
.1b33	64 0a		stz $0a				stz 	IFR0+IM2
.1b35					_ETMConstant:
.1b35	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1b37	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1b39	b0 24		bcs $1b5f			bcs 	_ETMCExit 					; no, exit.
.1b3b	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1b3d	a5 09		lda $09				lda 	IFR0+IM1
.1b3f	85 0a		sta $0a				sta 	IFR0+IM2
.1b41	a5 08		lda $08				lda 	IFR0+IM0
.1b43	85 09		sta $09				sta 	IFR0+IM1
.1b45	64 08		stz $08				stz 	IFR0+IM0
.1b47	8a		txa				txa
.1b48	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1b49	66 0a		ror $0a				ror 	IFR0+IM2
.1b4b	66 09		ror $09				ror 	IFR0+IM1
.1b4d	66 08		ror $08				ror 	IFR0+IM0
.1b4f	4a		lsr a				lsr 	a
.1b50	66 0a		ror $0a				ror 	IFR0+IM2
.1b52	66 09		ror $09				ror 	IFR0+IM1
.1b54	66 08		ror $08				ror 	IFR0+IM0
.1b56	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1b58	11 18		ora ($18),y			ora 	(codePtr),y
.1b5a	85 08		sta $08				sta 	IFR0+IM0
.1b5c	c8		iny				iny 								; consume, loop back
.1b5d	80 d6		bra $1b35			bra 	_ETMConstant
.1b5f					_ETMCExit:
.1b5f	60		rts				rts
.1b60					EXPCheckDecimalFollows:
.1b60	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1b62	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1b64	d0 19		bne $1b7f			bne 	_ETMCDExit
.1b66	c8		iny				iny 								; consume token.
.1b67	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1b69	5a		phy				phy									; save current position
.1b6a	48		pha				pha 								; save count of chars.
.1b6b	38		sec				sec 								; address into YX : y + codePtr+1
.1b6c	98		tya				tya
.1b6d	65 18		adc $18				adc 	codePtr
.1b6f	aa		tax				tax
.1b70	a5 19		lda $19				lda 	codePtr+1
.1b72	69 00		adc #$00			adc 	#0
.1b74	a8		tay				tay
.1b75	68		pla				pla 								; get count.
.1b76	20 a3 35	jsr $35a3			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1b79	7a		ply				ply 								; go to next token.
.1b7a	98		tya				tya
.1b7b	38		sec				sec
.1b7c	71 18		adc ($18),y			adc 	(codePtr),y
.1b7e	a8		tay				tay
.1b7f					_ETMCDExit:
.1b7f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1b80					EXPUnaryAbs:
.1b80	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 					; number to R0
.1b83	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1b86	20 42 33	jsr $3342			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1b89	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.1b8a					EXPUnaryNull:
.1b8a	20 a3 1a	jsr $1aa3			jsr 	EXPTermValueR0
.1b8d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1b8e					EXPUnaryAsc:
.1b8e	20 90 1a	jsr $1a90			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b91	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1b94	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.1b96	f0 06		beq $1b9e			beq 	_EXAZero 						; if so return 0
.1b98	5a		phy				phy 									; otherwise get first character
.1b99	a0 01		ldy #$01			ldy 	#1
.1b9b	b1 24		lda ($24),y			lda 	(zTemp0),y
.1b9d	7a		ply				ply
.1b9e					_EXAZero:
.1b9e	a2 08		ldx #$08			ldx 	#IFR0
.1ba0	20 01 37	jsr $3701			jsr 	IFloatSetByte
.1ba3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1ba4					EXPUnaryChr:
.1ba4	20 84 1a	jsr $1a84			jsr 	EXPEvalInteger8 				; expr
.1ba7	48		pha				pha 									; push on stack
.1ba8	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1bab	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1bad	20 57 2d	jsr $2d57			jsr 	StringTempAllocate
.1bb0	68		pla				pla 									; get value back
.1bb1	20 8c 2d	jsr $2d8c			jsr 	StringTempWrite 				; write to string.
.1bb4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1bb5					EXPUnaryDec:
.1bb5	20 90 1a	jsr $1a90			jsr 	EXPEvalString 					; string to R0, zTemp0
.1bb8	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1bbb	5a		phy				phy 									; save position.
.1bbc	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1bbe	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.1bc1	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.1bc3	f0 3b		beq $1c00			beq 	_EUDError 						; empty string is not legit.
.1bc5	aa		tax				tax 									; count in X.
.1bc6	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1bc8					_EUDLoop:
.1bc8	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.1bca	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1bcc	90 02		bcc $1bd0			bcc 	_EUDNoCase
.1bce	e9 20		sbc #$20			sbc 	#$20
.1bd0					_EUDNoCase:
.1bd0	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1bd2	90 2c		bcc $1c00			bcc 	_EUDError
.1bd4	c9 3a		cmp #$3a			cmp 	#'9'+1
.1bd6	90 0a		bcc $1be2			bcc 	_EUDOkay
.1bd8	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1bda	90 24		bcc $1c00			bcc 	_EUDError
.1bdc	c9 47		cmp #$47			cmp 	#'F'+1
.1bde	b0 20		bcs $1c00			bcs 	_EUDError
.1be0	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1be2					_EUDOkay:
.1be2	29 0f		and #$0f			and 	#15 							; make constant
.1be4	da		phx				phx
.1be5	48		pha				pha
.1be6	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1be8	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.1beb	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.1bee	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.1bf1	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.1bf4	68		pla				pla 									; pop constant and OR in
.1bf5	fa		plx				plx
.1bf6	05 08		ora $08				ora 	IFR0+IM0
.1bf8	85 08		sta $08				sta 	IFR0+IM0
.1bfa	c8		iny				iny 									; next char
.1bfb	ca		dex				dex 									; done all characters ?
.1bfc	d0 ca		bne $1bc8			bne 	_EUDLoop
.1bfe	7a		ply				ply
.1bff	60		rts				rts
.1c00					_EUDError:
.1c00	4c 99 2a	jmp $2a99		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1c03					EXPUnaryInlineDec:
.1c03	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1c06					EXPUnaryPeek:
.1c06	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 				; number to R0
.1c09	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1c0c	b2 08		lda ($08)			lda 	(IFR0) 							; read byte and set it
.1c0e	a2 08		ldx #$08			ldx 	#IFR0
.1c10	20 01 37	jsr $3701			jsr 	IFloatSetByte
.1c13	60		rts				rts
.1c14					EXPUnaryDeek:
.1c14	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 				; number to R0
.1c17	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1c1a	5a		phy				phy 									; read MSB and push on stack
.1c1b	a0 01		ldy #$01			ldy 	#1
.1c1d	b1 08		lda ($08),y			lda 	(IFR0),y
.1c1f	7a		ply				ply
.1c20	48		pha				pha
.1c21	b2 08		lda ($08)			lda 	(IFR0) 							; set LSB
.1c23	a2 08		ldx #$08			ldx 	#IFR0
.1c25	20 01 37	jsr $3701			jsr 	IFloatSetByte
.1c28	68		pla				pla 									; set MSB
.1c29	85 09		sta $09				sta 	IFR0+IM1
.1c2b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1c2c					EXPUnaryFrac:
.1c2c	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 					; number to R0
.1c2f	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1c32	20 aa 33	jsr $33aa			jsr 	IFloatFractionalR0 				; get fractional bit.
.1c35	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1c36					EXPUnaryInkey:
.1c36	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1c39	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1c3b	20 57 2d	jsr $2d57			jsr 	StringTempAllocate
.1c3e	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit with the empty string
.1c41	b0 06		bcs $1c49			bcs 	_EUIExit
.1c43	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it and put it in first character
.1c46	20 8c 2d	jsr $2d8c			jsr 	StringTempWrite
.1c49					_EUIExit:
.1c49	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1c4a					EXPUnaryInt:
.1c4a	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 					; number to R0
.1c4d	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; check for )
.1c50	20 00 34	jsr $3400			jsr 	IFloatIntegerR0 				; force to integer.
.1c53	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1c54					EXPUnaryLen:
.1c54	20 90 1a	jsr $1a90			jsr 	EXPEvalString 					; string to R0, zTemp0
.1c57	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1c5a	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.1c5c	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1c5e	20 01 37	jsr $3701			jsr 	IFloatSetByte
.1c61	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1c62					EXPUnaryParenthesis:
.1c62	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 					; number to R0
.1c65	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1c68	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1c69					EXPUnaryRnd:
.1c69	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 				; number to R0
.1c6c	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 				; )
.1c6f	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1c71	20 88 1c	jsr $1c88			jsr 	EXPLoadInRandom
.1c74	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1c76	85 0b		sta $0b				sta 	IFR0+IExp
.1c78	60		rts				rts
.1c79					ExpUnaryRand:
.1c79	20 71 1a	jsr $1a71			jsr 	EXPEvalInteger 				; integer to R0
.1c7c	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 				; )
.1c7f	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1c81	20 88 1c	jsr $1c88			jsr 	EXPLoadInRandom
.1c84	20 6f 32	jsr $326f			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1c87	60		rts				rts
.1c88					EXPLoadInRandom:
.1c88	20 ff 36	jsr $36ff			jsr 	IFloatSetZero 				; zero it
.1c8b	20 9d 1c	jsr $1c9d			jsr 	EXPRandom32 				; do a 23 bit number.
.1c8e	95 00		sta $00,x			sta 	IM0,x
.1c90	20 9d 1c	jsr $1c9d			jsr 	EXPRandom32
.1c93	95 01		sta $01,x			sta 	IM1,x
.1c95	20 9d 1c	jsr $1c9d			jsr 	EXPRandom32
.1c98	29 7f		and #$7f			and 	#$7F
.1c9a	95 02		sta $02,x			sta 	IM2,x
.1c9c	60		rts				rts
.1c9d					EXPRandom32:
.1c9d	5a		phy				phy
.1c9e	a0 08		ldy #$08			ldy 	#8
.1ca0	ad 17 05	lda $0517			lda 	EXPSeed+0
.1ca3	0d 18 05	ora $0518			ora 	EXPSeed+1
.1ca6	0d 19 05	ora $0519			ora 	EXPSeed+2
.1ca9	0d 1a 05	ora $051a			ora 	EXPSeed+3
.1cac	d0 08		bne $1cb6			bne 	_EXPRNoReset
.1cae	ee 17 05	inc $0517			inc 	EXPSeed+0
.1cb1	a0 10		ldy #$10			ldy 	#16
.1cb3	8c 1a 05	sty $051a			sty 	EXPSeed+3
.1cb6					_EXPRNoReset:
.1cb6	ad 17 05	lda $0517			lda 	EXPSeed+0
.1cb9					_EXPRLoop:
.1cb9	0a		asl a				asl		a
.1cba	2e 18 05	rol $0518			rol 	EXPSeed+1
.1cbd	2e 19 05	rol $0519			rol 	EXPSeed+2
.1cc0	2e 1a 05	rol $051a			rol 	EXPSeed+3
.1cc3	90 02		bcc $1cc7			bcc 	_EXPRNoEOR
.1cc5	49 c5		eor #$c5			eor 	#$C5
.1cc7					_EXPRNoEOR:
.1cc7	88		dey				dey
.1cc8	d0 ef		bne $1cb9			bne 	_EXPRLoop
.1cca	8d 17 05	sta $0517			sta 	EXPSeed+0
.1ccd	7a		ply				ply
.1cce	60		rts				rts
.0517					EXPSeed:
>0517							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1ccf					EXPUnarySgn:
.1ccf	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 					; number to R0
.1cd2	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1cd5	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1cd7	20 a1 36	jsr $36a1			jsr 	IFloatCopyToRegister
.1cda	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1cdc	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.1cdf	a2 0c		ldx #$0c			ldx 	#IFR1
.1ce1	20 ce 33	jsr $33ce			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1ce4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1ce5					EXPUnarySqr:
.1ce5	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 					; number to R0
.1ce8	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1ceb	20 4a 33	jsr $334a			jsr 	IFloatSquareRootR0 				; square root.
.1cee	b0 01		bcs $1cf1			bcs 	_EUSValue 						; error check.
.1cf0	60		rts				rts
.1cf1					_EUSValue:
.1cf1	4c 88 2a	jmp $2a88		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1cf4					EXPUnaryHex:
.1cf4	20 71 1a	jsr $1a71			jsr 	EXPEvalInteger 					; expr
.1cf7	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1cfa	5a		phy				phy
.1cfb	a9 10		lda #$10			lda 	#16
.1cfd	20 a1 34	jsr $34a1			jsr 	IFloatIntegerToStringR0
.1d00	80 0a		bra $1d0c			bra 	EUSMain
.1d02					EXPUnaryStr:
.1d02	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 					; expr
.1d05	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1d08	5a		phy				phy
.1d09	20 fc 34	jsr $34fc			jsr 	IFloatFloatToStringR0 			; convert to string
.1d0c					EUSMain:
.1d0c	b0 19		bcs $1d27			bcs 	_EUSError
.1d0e	86 24		stx $24				stx 	zTemp0 							; save string address
.1d10	84 25		sty $25				sty 	zTemp0+1
.1d12	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1d14	20 57 2d	jsr $2d57			jsr 	StringTempAllocate
.1d17	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1d19	aa		tax				tax 									; count in X
.1d1a	a0 01		ldy #$01			ldy 	#1
.1d1c					_EUSCopy:
.1d1c	b1 24		lda ($24),y			lda 	(zTemp0),y
.1d1e	c8		iny				iny
.1d1f	20 8c 2d	jsr $2d8c			jsr 	StringTempWrite
.1d22	ca		dex				dex
.1d23	d0 f7		bne $1d1c			bne	 	_EUSCopy
.1d25	7a		ply				ply
.1d26	60		rts				rts
.1d27					_EUSError:
.1d27	4c 88 2a	jmp $2a88		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1d2a					EXPUnaryInlineString:
.1d2a	18		clc				clc 								; physical address -> IM0,1
.1d2b	98		tya				tya 								; put the actual address in IM0
.1d2c	65 18		adc $18				adc 	codePtr
.1d2e	85 08		sta $08				sta 	IFR0+IM0
.1d30	a5 19		lda $19				lda 	codePtr+1
.1d32	69 00		adc #$00			adc 	#0
.1d34	85 09		sta $09				sta 	IFR0+IM1
.1d36	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1d38	a9 80		lda #$80			lda 	#$80
.1d3a	85 0b		sta $0b				sta 	IFR0+IExp
.1d3c	98		tya				tya	 								; skip over it.
.1d3d	38		sec				sec
.1d3e	71 18		adc ($18),y			adc 	(codePtr),y
.1d40	a8		tay				tay
.1d41	60		rts				rts
.1d42					_EXPUISRange:
.1d42	4c 88 2a	jmp $2a88		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1d45					EXPUnaryLeft:
.1d45	20 8b 1d	jsr $1d8b			jsr 	EXPCommonStart 					; <string>,
.1d48	48		pha				pha 									; save string address on stack
.1d49	da		phx				phx
.1d4a	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1d4c	48		pha				pha
.1d4d	20 84 1a	jsr $1a84			jsr 	EXPEvalInteger8 				; characters to do
.1d50	80 44		bra $1d96			bra 	EXPSubstringCommon
.1d52					EXPUnaryRight:
.1d52	20 8b 1d	jsr $1d8b			jsr 	EXPCommonStart 					; <string>,
.1d55	48		pha				pha 									; save string address on stack
.1d56	da		phx				phx
.1d57	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1d59	48		pha				pha
.1d5a	20 84 1a	jsr $1a84			jsr 	EXPEvalInteger8 				; characters to do
.1d5d	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1d5f	68		pla				pla
.1d60	38		sec				sec
.1d61	e5 24		sbc $24				sbc 	zTemp0
.1d63	b0 02		bcs $1d67			bcs 	_EUROffLeft 					; check not past start
.1d65	a9 00		lda #$00			lda 	#0
.1d67					_EUROffLeft:
.1d67	48		pha				pha 									; start pos
.1d68	a9 ff		lda #$ff			lda 	#255		 					; length
.1d6a	80 2a		bra $1d96			bra 	EXPSubstringCommon
.1d6c					EXPUnaryMid:
.1d6c	20 8b 1d	jsr $1d8b			jsr 	EXPCommonStart 					; <string>,
.1d6f	48		pha				pha 									; save string address on stack
.1d70	da		phx				phx
.1d71	20 84 1a	jsr $1a84			jsr 	EXPEvalInteger8 				; characters start
.1d74	f0 12		beq $1d88			beq 	_EUSError 						; 1 is left
.1d76	3a		dec a				dec 	a 								; zero based.
.1d77	48		pha				pha
.1d78	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1d7a	c9 99		cmp #$99			cmp 	#PR_COMMA
.1d7c	f0 04		beq $1d82			beq 	_EUMLength 						; if so m is provided
.1d7e	a9 ff		lda #$ff			lda 	#255 							; default m
.1d80	80 14		bra $1d96			bra 	EXPSubstringCommon
.1d82					_EUMLength:
.1d82	c8		iny				iny 									; consume comma
.1d83	20 84 1a	jsr $1a84			jsr 	EXPEvalInteger8 				; characters to do
.1d86	80 0e		bra $1d96			bra 	EXPSubstringCommon
.1d88					_EUSError:
.1d88	4c 99 2a	jmp $2a99		jmp	ErrorV_value
.1d8b					EXPCommonStart:
.1d8b	20 90 1a	jsr $1a90			jsr 	EXPEvalString
.1d8e	20 6a 2c	jsr $2c6a			jsr 	ERRCheckComma
.1d91	a5 08		lda $08				lda 	IFR0+IM0
.1d93	a6 09		ldx $09				ldx 	IFR0+IM1
.1d95	60		rts				rts
.1d96					EXPSubstringCommon:
.1d96	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1d98	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; check right bracket.
.1d9b	68		pla				pla 									; start position
.1d9c	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1d9e	fa		plx				plx 									; get string address to zTemp2.
.1d9f	86 29		stx $29				stx 	zTemp2+1
.1da1	68		pla				pla
.1da2	85 28		sta $28				sta 	zTemp2
.1da4	38		sec				sec 									; length - start is the max count of chars
.1da5	b2 28		lda ($28)			lda 	(zTemp2)
.1da7	e5 27		sbc $27				sbc 	zTemp1+1
.1da9	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1dab	b0 02		bcs $1daf			bcs 	_EXPSSNoTrim
.1dad	85 26		sta $26				sta 	zTemp1 							; update count with available
.1daf					_EXPSSNoTrim:
.1daf	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1db1	20 57 2d	jsr $2d57			jsr 	StringTempAllocate 				; allocate memory for it.
.1db4	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1db6	f0 15		beq $1dcd			beq 	_EXPSSExit
.1db8	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1dba	d2 28		cmp ($28)			cmp 	(zTemp2)
.1dbc	b0 0f		bcs $1dcd			bcs 	_EXPSSExit
.1dbe	5a		phy				phy
.1dbf	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1dc1	c8		iny				iny 									; +1 for the length byte
.1dc2					_EXPSSCopy:
.1dc2	b1 28		lda ($28),y			lda 	(zTemp2),y
.1dc4	20 8c 2d	jsr $2d8c			jsr 	StringTempWrite
.1dc7	c8		iny				iny
.1dc8	c6 26		dec $26				dec 	zTemp1
.1dca	d0 f6		bne $1dc2			bne 	_EXPSSCopy
.1dcc	7a		ply				ply
.1dcd					_EXPSSExit:
.1dcd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1dce					EXPUnaryVal:
.1dce	20 90 1a	jsr $1a90			jsr 	EXPEvalString 					; string to R0, zTemp0
.1dd1	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 					; )
.1dd4	20 d8 1d	jsr $1dd8			jsr 	VALConversionZTemp0
.1dd7	60		rts				rts
.1dd8					VALConversionZTemp0:
.1dd8	5a		phy				phy
.1dd9	18		clc				clc
.1dda	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1ddc	69 01		adc #$01			adc 	#1
.1dde	aa		tax				tax
.1ddf	a5 25		lda $25				lda 	zTemp0+1
.1de1	69 00		adc #$00			adc 	#0
.1de3	a8		tay				tay
.1de4	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1de6	20 63 35	jsr $3563			jsr 	IFloatStringToFloatR0 			; do conversion
.1de9	b0 02		bcs $1ded			bcs 	_EUVError
.1deb	7a		ply				ply
.1dec	60		rts				rts
.1ded					_EUVError:
.1ded	4c 99 2a	jmp $2a99		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1df0					AssemblerLookup:
>1df0	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,0,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,0,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,0,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,0,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,0,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,0,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,0,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,0,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,0,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,0,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,0,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,0,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,0,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,0,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,0,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,0
>1df8	fb 1e 7c 00 4b 1e 7c 00 b8 1e 1e 00 41 1e 7c eb
>1e08	b9 1e f9 00 41 1e 7c 00 7f 6a 00 00 7a 6a e1 eb
>1e18	23 6a e1 00 7a 6a e1 00 97 6a 6a 00 7a 6a e1 eb
>1e28	a6 6a 7d 00 7a 6a e1 00 38 62 00 00 00 62 0b eb
>1e38	ec 62 0b 00 2e 62 0b 00 c3 62 62 00 00 62 0b eb
>1e48	bf 62 04 00 00 62 0b 00 42 1d 00 00 3b 1d e7 eb
>1e58	14 1d e7 00 2e 1d e7 00 d3 1d 1d 00 3b 1d e7 eb
>1e68	ac 1d 2c 00 2e 1d e7 00 99 22 00 00 3a 22 39 f5
>1e78	93 7a 54 00 3a 22 39 00 45 22 22 00 3a 22 39 f5
>1e88	5e 22 66 00 3b 22 3b 00 19 01 18 00 19 01 18 f5
>1e98	c6 01 c5 00 19 01 18 00 55 01 01 00 19 01 18 f5
>1ea8	cc 01 61 00 19 01 18 00 f7 a8 00 00 f7 a8 7d f5
>1eb8	0f a8 92 0c f7 a8 7d 00 75 a8 a8 00 00 a8 7d f5
>1ec8	ba a8 03 31 00 a8 7d 00 f6 48 00 00 f6 48 f9 f5
>1ed8	0e 48 dd 00 f6 48 f9 00 8f 48 48 00 00 48 f9 f5
>1ee8	a7 48 2b 00 00 48 f9 00

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1ef0					BinaryPrecedence:
>1ef0	02					.byte	 2	; $ef =
>1ef1	02					.byte	 2	; $f0 <>
>1ef2	02					.byte	 2	; $f1 <=
>1ef3	02					.byte	 2	; $f2 <
>1ef4	02					.byte	 2	; $f3 >=
>1ef5	02					.byte	 2	; $f4 >
>1ef6	01					.byte	 1	; $f5 XOR
>1ef7	01					.byte	 1	; $f6 OR
>1ef8	01					.byte	 1	; $f7 AND
>1ef9	04					.byte	 4	; $f8 DIV
>1efa	04					.byte	 4	; $f9 MOD
>1efb	04					.byte	 4	; $fa <<
>1efc	04					.byte	 4	; $fb >>
>1efd	04					.byte	 4	; $fc /
>1efe	04					.byte	 4	; $fd *
>1eff	03					.byte	 3	; $fe -
>1f00	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1f01					StructureOffsets:
>1f01	01					.byte	1  	; $80 REPEAT
>1f02	ff					.byte	255	; $81 UNTIL
>1f03	01					.byte	1  	; $82 WHILE
>1f04	ff					.byte	255	; $83 WEND
>1f05	01					.byte	1  	; $84 IF
>1f06	ff					.byte	255	; $85 ENDIF
>1f07	01					.byte	1  	; $86 DO
>1f08	ff					.byte	255	; $87 LOOP
>1f09	ff					.byte	255	; $88 THEN
>1f0a	01					.byte	1  	; $89 PROC
>1f0b	ff					.byte	255	; $8a ENDPROC
>1f0c	01					.byte	1  	; $8b FOR
>1f0d	ff					.byte	255	; $8c NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1f0e					StandardTokens:
>1f0e	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1f15	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1f1b	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1f21	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1f26	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1f29	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1f2f	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1f32	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1f37	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $88 then
>1f3c	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $89 proc
>1f41	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $8a endproc
>1f49	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8b for
>1f4d	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8c next
>1f52	00					.byte	$00                                     	; $8d [[end]]
>1f53	00					.byte	$00                                     	; $8e [[shift]]
>1f54	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8f else
>1f59	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1f5c	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1f61	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1f65	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1f6b	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1f71	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1f76	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1f7a	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1f7e	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1f83	01 2c					.byte	$01,$2c                                 	; $99 ,
>1f85	01 3b					.byte	$01,$3b                                 	; $9a ;
>1f87	01 3a					.byte	$01,$3a                                 	; $9b :
>1f89	01 27					.byte	$01,$27                                 	; $9c '
>1f8b	01 29					.byte	$01,$29                                 	; $9d )
>1f8d	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1f92	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1f97	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1f9c	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1fa1	01 5b					.byte	$01,$5b                                 	; $a2 [
>1fa3	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1fa5	01 23					.byte	$01,$23                                 	; $a4 #
>1fa7	01 2e					.byte	$01,$2e                                 	; $a5 .
>1fa9	00					.byte	0											; $a6
>1faa	00					.byte	0											; $a7
>1fab	00					.byte	0											; $a8
>1fac	00					.byte	0											; $a9
>1fad	00					.byte	0											; $aa
>1fae	00					.byte	0											; $ab
>1faf	00					.byte	0											; $ac
>1fb0	00					.byte	0											; $ad
>1fb1	00					.byte	0											; $ae
>1fb2	00					.byte	0											; $af
>1fb3	00					.byte	0											; $b0
>1fb4	00					.byte	0											; $b1
>1fb5	00					.byte	0											; $b2
>1fb6	00					.byte	0											; $b3
>1fb7	00					.byte	0											; $b4
>1fb8	00					.byte	0											; $b5
>1fb9	00					.byte	0											; $b6
>1fba	00					.byte	0											; $b7
>1fbb	00					.byte	0											; $b8
>1fbc	00					.byte	0											; $b9
>1fbd	00					.byte	0											; $ba
>1fbe	00					.byte	0											; $bb
>1fbf	00					.byte	0											; $bc
>1fc0	00					.byte	0											; $bd
>1fc1	00					.byte	0											; $be
>1fc2	00					.byte	0											; $bf
>1fc3	00					.byte	0											; $c0
>1fc4	00					.byte	0											; $c1
>1fc5	00					.byte	0											; $c2
>1fc6	00					.byte	0											; $c3
>1fc7	00					.byte	0											; $c4
>1fc8	00					.byte	0											; $c5
>1fc9	00					.byte	0											; $c6
>1fca	00					.byte	0											; $c7
>1fcb	00					.byte	0											; $c8
>1fcc	00					.byte	0											; $c9
>1fcd	00					.byte	0											; $ca
>1fce	00					.byte	0											; $cb
>1fcf	00					.byte	0											; $cc
>1fd0	00					.byte	0											; $cd
>1fd1	00					.byte	0											; $ce
>1fd2	00					.byte	0											; $cf
>1fd3	00					.byte	0											; $d0
>1fd4	00					.byte	0											; $d1
>1fd5	00					.byte	0											; $d2
>1fd6	00					.byte	0											; $d3
>1fd7	00					.byte	0											; $d4
>1fd8	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1fde	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1fe4	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1fec	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1ff3	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1ff9	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1fff	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>2004	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>2009	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>200e	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>2013	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>2018	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>201e	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>2023	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>202b	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>2032	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>2037	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>203c	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>2042	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>2047	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>204d	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>2052	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>2058	01 28					.byte	$01,$28                                 	; $eb (
>205a	01 26					.byte	$01,$26                                 	; $ec &
>205c	00					.byte	$00                                     	; $ed [[decimal]]
>205d	00					.byte	$00                                     	; $ee [[string]]
>205e	01 3d					.byte	$01,$3d                                 	; $ef =
>2060	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>2063	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>2066	01 3c					.byte	$01,$3c                                 	; $f2 <
>2068	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>206b	01 3e					.byte	$01,$3e                                 	; $f4 >
>206d	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>2071	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>2074	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>2078	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>207c	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>2080	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>2083	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>2086	01 2f					.byte	$01,$2f                                 	; $fc /
>2088	01 2a					.byte	$01,$2a                                 	; $fd *
>208a	01 2d					.byte	$01,$2d                                 	; $fe -
>208c	01 2b					.byte	$01,$2b                                 	; $ff +
>208e	ff					.byte	$FF
.208f					AlternateTokens:
>208f	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8e80 clear
>2095	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8e81 new
>2099	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8e82 run
>209d	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8e83 stop
>20a2	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8e84 end
>20a6	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8e85 assert
>20ad	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8e86 list
>20b2	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8e87 save
>20b7	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8e88 load
>20bc	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8e89 gosub
>20c2	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8e8a goto
>20c7	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8e8b return
>20ce	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8e8c restore
>20d6	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8e8d dim
>20da	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8e8e dir
>20de	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8e8f erase
>20e4	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8e90 renumber
>20ec	52
>20ed	03 4f 50 54				.byte	$03,$4f,$50,$54                         	; $8e91 opt
>20f1	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.20f2					VectorTable:
>20f2	5f 29					.word	Command_REPEAT           ; $80 REPEAT
>20f4	68 29					.word	Command_UNTIL            ; $81 UNTIL
>20f6	4a 2a					.word	Command_WHILE            ; $82 WHILE
>20f8	6b 2a					.word	Command_WEND             ; $83 WEND
>20fa	22 29					.word	IfCommand                ; $84 IF
>20fc	4b 29					.word	EndIf                    ; $85 ENDIF
>20fe	a4 27					.word	Command_DO               ; $86 DO
>2100	bc 27					.word	Command_LOOP             ; $87 LOOP
>2102	a6 18					.word	NoExec01                 ; $88 THEN
>2104	a6 18					.word	NoExec08                 ; $89 PROC
>2106	98 27					.word	Command_ENDPROC          ; $8a ENDPROC
>2108	c5 27					.word	Command_FOR              ; $8b FOR
>210a	52 28					.word	Command_NEXT             ; $8c NEXT
>210c	27 18					.word	RUNEndOfLine             ; $8d [[END]]
>210e	83 18					.word	Command_Shift_Handler    ; $8e [[SHIFT]]
>2110	44 29					.word	ElseCode                 ; $8f ELSE
>2112	a6 18					.word	NoExec02                 ; $90 TO
>2114	a6 18					.word	NoExec03                 ; $91 STEP
>2116	ab 15					.word	CommandLET               ; $92 LET
>2118	00 15					.word	Command_Print            ; $93 PRINT
>211a	f9 14					.word	Command_Input            ; $94 INPUT
>211c	5c 27					.word	Command_CALL             ; $95 CALL
>211e	91 18					.word	Command_Sys              ; $96 SYS
>2120	9c 17					.word	Command_REM              ; $97 REM
>2122	ad 27					.word	Command_EXIT             ; $98 EXIT
>2124	a6 18					.word	NoExec04                 ; $99 ,
>2126	a6 18					.word	NoExec05                 ; $9a ;
>2128	a6 18					.word	NoExec06                 ; $9b :
>212a	9c 17					.word	Command_REM2             ; $9c '
>212c	a6 18					.word	NoExec07                 ; $9d )
>212e	a2 14					.word	Command_Poke             ; $9e POKE
>2130	9f 14					.word	Command_Doke             ; $9f DOKE
>2132	28 17					.word	Command_READ             ; $a0 READ
>2134	8f 17					.word	Command_DATA             ; $a1 DATA
>2136	0d 10					.word	Command_AssemblerStart   ; $a2 [
>2138	d5 2e					.word	NotImplemented           ; $a3 ]
>213a	d5 2e					.word	NotImplemented           ; $a4 #
>213c	d5 2e					.word	NotImplemented           ; $a5 .
>213e	d5 2e					.word	NotImplemented           ; $a6
>2140	d5 2e					.word	NotImplemented           ; $a7
>2142	d5 2e					.word	NotImplemented           ; $a8
>2144	d5 2e					.word	NotImplemented           ; $a9
>2146	d5 2e					.word	NotImplemented           ; $aa
>2148	d5 2e					.word	NotImplemented           ; $ab
>214a	d5 2e					.word	NotImplemented           ; $ac
>214c	d5 2e					.word	NotImplemented           ; $ad
>214e	d5 2e					.word	NotImplemented           ; $ae
>2150	d5 2e					.word	NotImplemented           ; $af
>2152	d5 2e					.word	NotImplemented           ; $b0
>2154	d5 2e					.word	NotImplemented           ; $b1
>2156	d5 2e					.word	NotImplemented           ; $b2
>2158	d5 2e					.word	NotImplemented           ; $b3
>215a	d5 2e					.word	NotImplemented           ; $b4
>215c	d5 2e					.word	NotImplemented           ; $b5
>215e	d5 2e					.word	NotImplemented           ; $b6
>2160	d5 2e					.word	NotImplemented           ; $b7
>2162	d5 2e					.word	NotImplemented           ; $b8
>2164	d5 2e					.word	NotImplemented           ; $b9
>2166	d5 2e					.word	NotImplemented           ; $ba
>2168	d5 2e					.word	NotImplemented           ; $bb
>216a	d5 2e					.word	NotImplemented           ; $bc
>216c	d5 2e					.word	NotImplemented           ; $bd
>216e	d5 2e					.word	NotImplemented           ; $be
>2170	d5 2e					.word	NotImplemented           ; $bf
>2172	d5 2e					.word	NotImplemented           ; $c0
>2174	d5 2e					.word	NotImplemented           ; $c1
>2176	d5 2e					.word	NotImplemented           ; $c2
>2178	d5 2e					.word	NotImplemented           ; $c3
>217a	d5 2e					.word	NotImplemented           ; $c4
>217c	d5 2e					.word	NotImplemented           ; $c5
>217e	d5 2e					.word	NotImplemented           ; $c6
>2180	d5 2e					.word	NotImplemented           ; $c7
>2182	d5 2e					.word	NotImplemented           ; $c8
>2184	d5 2e					.word	NotImplemented           ; $c9
>2186	d5 2e					.word	NotImplemented           ; $ca
>2188	d5 2e					.word	NotImplemented           ; $cb
>218a	d5 2e					.word	NotImplemented           ; $cc
>218c	d5 2e					.word	NotImplemented           ; $cd
>218e	d5 2e					.word	NotImplemented           ; $ce
>2190	d5 2e					.word	NotImplemented           ; $cf
>2192	d5 2e					.word	NotImplemented           ; $d0
>2194	d5 2e					.word	NotImplemented           ; $d1
>2196	d5 2e					.word	NotImplemented           ; $d2
>2198	d5 2e					.word	NotImplemented           ; $d3
>219a	d5 2e					.word	NotImplemented           ; $d4
>219c	14 1c					.word	EXPUnaryDeek             ; $d5 DEEK(
>219e	06 1c					.word	EXPUnaryPeek             ; $d6 PEEK(
>21a0	52 1d					.word	EXPUnaryRight            ; $d7 RIGHT$(
>21a2	45 1d					.word	EXPUnaryLeft             ; $d8 LEFT$(
>21a4	6c 1d					.word	EXPUnaryMid              ; $d9 MID$(
>21a6	02 1d					.word	EXPUnaryStr              ; $da STR$(
>21a8	ce 1d					.word	EXPUnaryVal              ; $db VAL(
>21aa	cf 1c					.word	EXPUnarySgn              ; $dc SGN(
>21ac	80 1b					.word	EXPUnaryAbs              ; $dd ABS(
>21ae	54 1c					.word	EXPUnaryLen              ; $de LEN(
>21b0	e5 1c					.word	EXPUnarySqr              ; $df SQR(
>21b2	a4 1b					.word	EXPUnaryChr              ; $e0 CHR$(
>21b4	8e 1b					.word	EXPUnaryAsc              ; $e1 ASC(
>21b6	36 1c					.word	EXPUnaryInkey            ; $e2 INKEY$(
>21b8	d5 2e					.word	NotImplemented           ; $e3 EVENT(
>21ba	d5 2e					.word	NotImplemented           ; $e4 TIME
>21bc	4a 1c					.word	EXPUnaryInt              ; $e5 INT(
>21be	2c 1c					.word	EXPUnaryFrac             ; $e6 FRAC(
>21c0	b5 1b					.word	EXPUnaryDec              ; $e7 DEC(
>21c2	f4 1c					.word	EXPUnaryHex              ; $e8 HEX$(
>21c4	69 1c					.word	EXPUnaryRnd              ; $e9 RND(
>21c6	79 1c					.word	ExpUnaryRand             ; $ea RAND(
>21c8	62 1c					.word	EXPUnaryParenthesis      ; $eb (
>21ca	8a 1b					.word	EXPUnaryNull             ; $ec &
>21cc	03 1c					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>21ce	2a 1d					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>21d0	63 19					.word	EXPCompareEqual          ; $ef =
>21d2	7e 19					.word	EXPCompareNotEqual       ; $f0 <>
>21d4	87 19					.word	EXPCompareLessEqual      ; $f1 <=
>21d6	6c 19					.word	EXPCompareLess           ; $f2 <
>21d8	90 19					.word	EXPCompareGreaterEqual   ; $f3 >=
>21da	75 19					.word	EXPCompareGreater        ; $f4 >
>21dc	10 19					.word	EXPBinXor                ; $f5 XOR
>21de	04 19					.word	EXPBinOr                 ; $f6 OR
>21e0	f8 18					.word	EXPBinAnd                ; $f7 AND
>21e2	d0 18					.word	EXPBinIDiv               ; $f8 DIV
>21e4	e1 18					.word	EXPBinIMod               ; $f9 MOD
>21e6	db 19					.word	EXPBinLeft               ; $fa <<
>21e8	e3 19					.word	EXPBinRight              ; $fb >>
>21ea	c4 18					.word	EXPBinFDiv               ; $fc /
>21ec	bb 18					.word	EXPBinMul                ; $fd *
>21ee	b2 18					.word	EXPBinSub                ; $fe -
>21f0	a9 18					.word	EXPBinAdd                ; $ff +
.21f2					AlternateVectorTable:
>21f2	0f 13					.word	Command_CLEAR            ; $8e80 CLEAR
>21f4	1f 17					.word	Command_NEW              ; $8e81 NEW
>21f6	1b 18					.word	Command_RUN              ; $8e82 RUN
>21f8	8e 18					.word	Command_STOP             ; $8e83 STOP
>21fa	8b 18					.word	Command_END              ; $8e84 END
>21fc	01 13					.word	Command_ASSERT           ; $8e85 ASSERT
>21fe	25 16					.word	Command_LIST             ; $8e86 LIST
>2200	43 2e					.word	Command_SAVE             ; $8e87 SAVE
>2202	02 2e					.word	Command_LOAD             ; $8e88 LOAD
>2204	08 29					.word	Command_GOSUB            ; $8e89 GOSUB
>2206	c9 14					.word	Command_GOTO             ; $8e8a GOTO
>2208	16 29					.word	Command_RETURN           ; $8e8b RETURN
>220a	ed 17					.word	Command_RESTORE          ; $8e8c RESTORE
>220c	83 13					.word	CommandDIM               ; $8e8d DIM
>220e	99 2d					.word	Command_DIR              ; $8e8e DIR
>2210	d6 2d					.word	Command_ERASE            ; $8e8f ERASE
>2212	a9 17					.word	Command_RENUMBER         ; $8e90 RENUMBER
>2214	fa 12					.word	Command_OPT              ; $8e91 OPT

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.2216					TOKDetokenise:
.2216	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.2218	84 29		sty $29				sty 	zTemp2+1
.221a	9c 1d 05	stz $051d			stz		TOKLastCharacter 			; clear last character
.221d					_TOKDLoop:
.221d	20 62 22	jsr $2262			jsr 	TOKDGet 					; get next
.2220	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line, exit.
.2222	f0 3c		beq $2260			beq 	_TOKDExit
.2224	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string or decimal places modifier
.2226	f0 33		beq $225b			beq 	_TOKDDataItem
.2228	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.222a	f0 2f		beq $225b			beq 	_TOKDDataItem
.222c	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.222e	f0 19		beq $2249			beq 	_TOKAmpersand
.2230	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.2232	10 05		bpl $2239			bpl 	_TOKDNotToken
.2234	20 28 23	jsr $2328			jsr 	TOKDToken 					; token to text.
.2237	80 e4		bra $221d			bra 	_TOKDLoop
.2239					_TOKDNotToken:
.2239	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.223b	90 05		bcc $2242			bcc 	_TOKDNotIdentifier
.223d	20 9f 22	jsr $229f			jsr 	TOKDIdentifier
.2240	80 db		bra $221d			bra 	_TOKDLoop
.2242					_TOKDNotIdentifier:
.2242	a0 0a		ldy #$0a			ldy 	#10
.2244	20 e2 22	jsr $22e2			jsr 	TOKDInteger
.2247	80 d4		bra $221d			bra 	_TOKDLoop
.2249					_TOKAmpersand:
.2249	20 6a 23	jsr $236a			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.224c	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.224e	20 6b 22	jsr $226b			jsr 	TOKDOutput
.2251	20 62 22	jsr $2262			jsr 	TOKDGet 					; get first char of integer
.2254	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.2256	20 e2 22	jsr $22e2			jsr 	TOKDInteger
.2259	80 c2		bra $221d			bra 	_TOKDLoop
.225b					_TOKDDataItem:
.225b	20 78 22	jsr $2278			jsr 	TOKDDataItem
.225e	80 bd		bra $221d			bra 	_TOKDLoop
.2260					_TOKDExit:
.2260	18		clc				clc
.2261	60		rts				rts
.2262	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.2264	e6 28		inc $28				inc 	zTemp2
.2266	d0 02		bne $226a			bne 	_TKDGExit
.2268	e6 29		inc $29				inc 	zTemp2+1
.226a					_TKDGExit:
.226a	60		rts				rts
.226b					TOKDOutput:
.226b	8d 1d 05	sta $051d			sta 	TOKLastCharacter 			; save last character
.226e	6c 1b 05	jmp ($051b)			jmp 	(TOKOutputMethod) 			; call output handler
.2271					TOKSetDetokeniseOutput:
.2271	8e 1b 05	stx $051b			stx 	TOKOutputMethod
.2274	8c 1c 05	sty $051c			sty 	TOKOutputMethod+1
.2277	60		rts				rts
.051b					TOKOutputMethod:
>051b							.fill 	2
.051d					TOKLastCharacter:
>051d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.2278					TOKDDataItem:
.2278	a8		tay				tay 								; type in Y
.2279	a9 22		lda #$22			lda 	#'"'						; start with " or . depending on type.
.227b	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.227d	f0 02		beq $2281			beq 	_TOKDDIsString
.227f	a9 2e		lda #$2e			lda 	#'.'
.2281					_TOKDDIsString:
.2281	20 6b 22	jsr $226b			jsr 	TOKDOutput 					; dump it
.2284	20 62 22	jsr $2262			jsr 	TOKDGet 					; get length into X
.2287	aa		tax				tax
.2288					_TOKDDOutput:
.2288	ca		dex				dex 								; output all the data.
.2289	e0 ff		cpx #$ff			cpx 	#255
.228b	f0 08		beq $2295			beq 	_TOKDDEnd
.228d	20 62 22	jsr $2262			jsr 	TOKDGet 					; get character and output it
.2290	20 6b 22	jsr $226b			jsr 	TOKDOutput
.2293	80 f3		bra $2288			bra 	_TOKDDOutput
.2295					_TOKDDEnd:
.2295	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.2297	d0 05		bne $229e			bne 	_TOKDDNotString
.2299	a9 22		lda #$22			lda 	#'"'
.229b	20 6b 22	jsr $226b			jsr 	TOKDOutput
.229e					_TOKDDNotString:
.229e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.229f					TOKDIdentifier:
.229f	a0 ff		ldy #$ff			ldy 	#$FF 						; flag set on first character only.
.22a1	8c 1e 05	sty $051e			sty 	TOKDIFirstChar
.22a4					_TOKDLoop:
.22a4	a8		tay				tay 								; token in Y, now coner it to ASCII
.22a5	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.22a7	c0 64		cpy #$64			cpy 	#$64
.22a9	f0 0b		beq $22b6			beq 	_TOKDIOutput
.22ab	98		tya				tya 								; handle a-z
.22ac	18		clc				clc
.22ad	69 21		adc #$21			adc	 	#$21
.22af	c0 5a		cpy #$5a			cpy 	#$5A
.22b1	90 03		bcc $22b6			bcc 	_TOKDIOutput
.22b3	38		sec				sec 								; handle 0-9
.22b4	e9 4b		sbc #$4b			sbc 	#$4B
.22b6					_TOKDIOutput:
.22b6	2c 1e 05	bit $051e			bit 	TOKDIFirstChar 				; check spacing if first character
.22b9	10 08		bpl $22c3			bpl 	_TOKDINoSpacing
.22bb	48		pha				pha
.22bc	20 65 23	jsr $2365			jsr 	TOKDSpacing
.22bf	9c 1e 05	stz $051e			stz 	TOKDIFirstChar
.22c2	68		pla				pla
.22c3					_TOKDINoSpacing:
.22c3	20 6b 22	jsr $226b			jsr 	TOKDOutput
.22c6	20 62 22	jsr $2262			jsr 	TOKDGet 					; get next token
.22c9	c9 7c		cmp #$7c			cmp 	#$7C 						; 7C..7F are end markers
.22cb	90 d7		bcc $22a4			bcc 	_TOKDLoop
.22cd	f0 12		beq $22e1			beq 	_TOKDIExit 					; it's a number, no tail.
.22cf	4a		lsr a				lsr 	a 							; string ?
.22d0	90 07		bcc $22d9			bcc 	_TOKDICheckArray
.22d2	48		pha				pha
.22d3	a9 24		lda #$24			lda 	#"$"
.22d5	20 6b 22	jsr $226b			jsr 	TOKDOutput
.22d8	68		pla				pla
.22d9					_TOKDICheckArray:
.22d9	4a		lsr a				lsr 	a 							; array ?
.22da	90 05		bcc $22e1			bcc 	_TOKDIExit
.22dc	a9 28		lda #$28			lda 	#"("
.22de	20 6b 22	jsr $226b			jsr 	TOKDOutput
.22e1					_TOKDIExit:
.22e1	60		rts				rts
.051e					TOKDIFirstChar:
>051e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.22e2					TOKDInteger:
.22e2	5a		phy				phy 								; save base on stack
.22e3	a2 08		ldx #$08			ldx 	#IFR0 						; set first byte of integer into into R0
.22e5	20 01 37	jsr $3701			jsr 	IFloatSetByte
.22e8					_TOKDILoop:
.22e8	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F, extract the whole integer out.
.22ea	c9 40		cmp #$40			cmp 	#$40
.22ec	b0 1d		bcs $230b			bcs 	_TOKDIHaveInteger
.22ee	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.22f0	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.22f3	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.22f6	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.22f9	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.22fc	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.22ff	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.2302	20 62 22	jsr $2262			jsr 	TOKDGet 					; OR byte in.
.2305	05 08		ora $08				ora 	IFR0+IM0
.2307	85 08		sta $08				sta 	IFR0+IM0
.2309	80 dd		bra $22e8			bra 	_TOKDILoop
.230b					_TOKDIHaveInteger:
.230b	7a		ply				ply 								; restore base
.230c	98		tya				tya 								; base in A
.230d	20 a1 34	jsr $34a1			jsr 	IFloatIntegerToStringR0 	; make it a string
.2310	86 24		stx $24				stx 	zTemp0 						; output that string.
.2312	84 25		sty $25				sty 	zTemp0+1
.2314	b2 24		lda ($24)			lda 	(zTemp0)
.2316	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.2318	b1 24		lda ($24),y			lda 	(zTemp0),y
.231a	20 65 23	jsr $2365			jsr 	TOKDSpacing 				; check spacing okay.
.231d					_TOKDOutput:
.231d	b1 24		lda ($24),y			lda 	(zTemp0),y
.231f	20 6b 22	jsr $226b			jsr 	TOKDOutput
.2322	c8		iny				iny
.2323	b1 24		lda ($24),y			lda 	(zTemp0),y
.2325	d0 f6		bne $231d			bne 	_TOKDOutput
.2327	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.2328					TOKDToken:
.2328	a2 0e		ldx #$0e			ldx 	#StandardTokens & $FF 		; standard table
.232a	a0 1f		ldy #$1f			ldy 	#StandardTokens >> 8
.232c	c9 8e		cmp #$8e			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.232e	d0 07		bne $2337			bne 	_TOKDSearch
.2330	20 62 22	jsr $2262			jsr 	TOKDGet 					; get next
.2333	a2 8f		ldx #$8f			ldx 	#AlternateTokens & $FF 		; alt table address
.2335	a0 20		ldy #$20			ldy 	#AlternateTokens >> 8
.2337					_TOKDSearch:
.2337	86 24		stx $24				stx 	zTemp0 						; save table in zTemp0
.2339	84 25		sty $25				sty 	zTemp0+1
.233b	aa		tax				tax 								; token ID in X.
.233c					_TOKDFind:
.233c	ca		dex				dex 								; reached the token position
.233d	10 0d		bpl $234c			bpl 	_TOKDFound
.233f	38		sec				sec 								; go to next entry in token table
.2340	b2 24		lda ($24)			lda 	(zTemp0)
.2342	65 24		adc $24				adc 	zTemp0
.2344	85 24		sta $24				sta 	zTemp0
.2346	90 f4		bcc $233c			bcc 	_TOKDFind
.2348	e6 25		inc $25				inc 	zTemp0+1
.234a	80 f0		bra $233c			bra 	_TOKDFind
.234c					_TOKDFound:
.234c	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X.
.234e	f0 14		beq $2364			beq 	_TOKDExit 					; not a token with text.
.2350	aa		tax				tax
.2351	a0 01		ldy #$01			ldy 	#1 							; output the token.
.2353	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.2355	20 65 23	jsr $2365			jsr 	TOKDSpacing 				; do we need space before this.
.2358					_TOKDOutput:
.2358	b1 24		lda ($24),y			lda 	(zTemp0),y 					; output them in lower case
.235a	20 1b 27	jsr $271b			jsr 	TOKToLower
.235d	20 6b 22	jsr $226b			jsr 	TOKDOutput
.2360	c8		iny				iny
.2361	ca		dex				dex
.2362	d0 f4		bne $2358			bne 	_TOKDOutput
.2364					_TOKDExit:
.2364	60		rts				rts
.2365					TOKDSpacing:
.2365	20 32 27	jsr $2732			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.2368	90 0d		bcc $2377			bcc 	TOKDSExit
.236a					TOKDSpaceLastAlpha:
.236a	ad 1d 05	lda $051d			lda 	TOKLastCharacter			; and last character also alphanumeric
.236d	20 32 27	jsr $2732			jsr 	TOKIsIdentifierElement
.2370	90 05		bcc $2377			bcc 	TOKDSExit
.2372	a9 20		lda #$20			lda 	#" " 						; we need a space.
.2374	20 6b 22	jsr $226b			jsr 	TOKDOutput
.2377					TOKDSExit:
.2377	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.2378					PGMDeleteLine:
.2378	20 2b 24	jsr $242b			jsr 	PGMEndProgram 				; end of program into zTemp0
.237b	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.237d	ad 1f 05	lda $051f			lda 	PGMBaseHigh
.2380	85 27		sta $27				sta 	zTemp1+1
.2382					_PGMDLoop:
.2382	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.2384	38		sec				sec
.2385	f0 3a		beq $23c1			beq 	_PGMDExit
.2387	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.2389	b1 26		lda ($26),y			lda 	(zTemp1),y 					; compare LSB
.238b	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.238e	d0 08		bne $2398			bne 	_PGMDNext
.2390	c8		iny				iny 								; compare MSB
.2391	b1 26		lda ($26),y			lda 	(zTemp1),y
.2393	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.2396	f0 0d		beq $23a5			beq 	_PGMDDelete
.2398					_PGMDNext:
.2398	18		clc				clc
.2399	b2 26		lda ($26)			lda 	(zTemp1)
.239b	65 26		adc $26				adc 	zTemp1
.239d	85 26		sta $26				sta 	zTemp1
.239f	90 e1		bcc $2382			bcc 	_PGMDLoop
.23a1	e6 27		inc $27				inc 	zTemp1+1
.23a3	80 dd		bra $2382			bra 	_PGMDLoop
.23a5					_PGMDDelete:
.23a5	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.23a7	a8		tay				tay
.23a8					_PGMDCopy:
.23a8	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.23aa	92 26		sta ($26)			sta 	(zTemp1)
.23ac	a5 26		lda $26				lda 	zTemp1 						; reached the end in zTemp0
.23ae	c5 24		cmp $24				cmp 	zTemp0
.23b0	d0 07		bne $23b9			bne 	_PGMDNext2
.23b2	a5 27		lda $27				lda 	zTemp1+1
.23b4	c5 25		cmp $25				cmp 	zTemp0+1
.23b6	18		clc				clc
.23b7	f0 08		beq $23c1			beq 	_PGMDExit 					; then exit.
.23b9					_PGMDNext2:
.23b9	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.23bb	d0 eb		bne $23a8			bne 	_PGMDCopy
.23bd	e6 27		inc $27				inc 	zTemp1+1
.23bf	80 e7		bra $23a8			bra 	_PGMDCopy
.23c1					_PGMDExit:
.23c1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.23c2					PGMInsertLine:
.23c2	20 2b 24	jsr $242b			jsr 	PGMEndProgram 				; end of program into zTemp0
.23c5	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.23c7	ad 1f 05	lda $051f			lda 	PGMBaseHigh
.23ca	85 27		sta $27				sta 	zTemp1+1
.23cc					_PGMILoop:
.23cc	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.23ce	f0 1c		beq $23ec			beq 	_PGMIInsert
.23d0	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.23d2	b1 26		lda ($26),y			lda 	(zTemp1),y
.23d4	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.23d7	c8		iny				iny
.23d8	b1 26		lda ($26),y			lda 	(zTemp1),y
.23da	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.23dd	b0 0d		bcs $23ec			bcs 	_PGMIInsert 				; insert here.
.23df	18		clc				clc
.23e0	b2 26		lda ($26)			lda 	(zTemp1)
.23e2	65 26		adc $26				adc 	zTemp1
.23e4	85 26		sta $26				sta 	zTemp1
.23e6	90 e4		bcc $23cc			bcc 	_PGMILoop
.23e8	e6 27		inc $27				inc 	zTemp1+1
.23ea	80 e0		bra $23cc			bra 	_PGMILoop
.23ec					_PGMIInsert:
.23ec	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required is length in token buffer.
.23ef					_PGMIInsertLoop:
.23ef	b2 24		lda ($24)			lda 	(zTemp0) 					; shift byte up.
.23f1	91 24		sta ($24),y			sta 	(zTemp0),y
.23f3	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.23f5	c5 24		cmp $24				cmp 	zTemp0
.23f7	d0 06		bne $23ff			bne 	_PGMINext
.23f9	a5 27		lda $27				lda 	zTemp1+1
.23fb	c5 25		cmp $25				cmp 	zTemp0+1
.23fd	f0 0a		beq $2409			beq 	_PGMIInserted
.23ff					_PGMINext:
.23ff	a5 24		lda $24				lda 	zTemp0
.2401	d0 02		bne $2405			bne 	_PGMINoBorrow
.2403	c6 25		dec $25				dec 	zTemp0+1
.2405					_PGMINoBorrow:
.2405	c6 24		dec $24				dec 	zTemp0
.2407	80 e6		bra $23ef			bra 	_PGMIInsertLoop 			; do previous byte.
.2409					_PGMIInserted:
.2409	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.240b					_PGMICopyLoop:
.240b	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.240e	91 26		sta ($26),y			sta 	(zTemp1),y
.2410	c8		iny				iny
.2411	cc 00 04	cpy $0400			cpy 	TOKLineSize
.2414	d0 f5		bne $240b			bne 	_PGMICopyLoop
.2416	18		clc				clc
.2417	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.2418					PGMSetBaseAddress:
.2418	8e 1f 05	stx $051f			stx 	PGMBaseHigh 				; use memory from here
.241b	8c 20 05	sty $0520			sty 	PGMEndMemoryHigh 			; to here.
.241e	60		rts				rts
.241f					PGMNewProgram:
.241f	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.2421	ad 1f 05	lda $051f			lda 	PGMBaseHigh
.2424	85 25		sta $25				sta 	zTemp0+1
.2426	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.2428	92 24		sta ($24)			sta 	(zTemp0)
.242a	60		rts				rts
.242b					PGMEndProgram:
.242b	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.242d	ad 1f 05	lda $051f			lda 	PGMBaseHigh
.2430	85 25		sta $25				sta 	zTemp0+1
.2432					_PGMEPLoop:
.2432	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.2434	f0 0b		beq $2441			beq 	_PGMEPExit
.2436	18		clc				clc 								; no, advance to next
.2437	65 24		adc $24				adc 	zTemp0
.2439	85 24		sta $24				sta 	zTemp0
.243b	90 f5		bcc $2432			bcc 	_PGMEPLoop
.243d	e6 25		inc $25				inc 	zTemp0+1
.243f	80 f1		bra $2432			bra 	_PGMEPLoop
.2441					_PGMEPExit:
.2441	60		rts				rts
.051f					PGMBaseHigh:
>051f							.fill 	1
.0520					PGMEndMemoryHigh:
>0520							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.2442					TOKResetElement:
.2442	9c 21 05	stz $0521			stz 	TOKElement
.2445	60		rts				rts
.2446					TOKWriteElement:
.2446	da		phx				phx
.2447	ae 21 05	ldx $0521			ldx 	TOKElement
.244a	9d 22 05	sta $0522,x			sta 	TOKElementText,x
.244d	9e 23 05	stz $0523,x			stz 	TOKElementText+1,x
.2450	fa		plx				plx
.2451	ee 21 05	inc $0521			inc 	TOKElement
.2454	60		rts				rts
.0521					TOKElement:
>0521							.fill 	1
.0522					TOKElementText:
>0522							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.2455					TOKTokeniseConstant:
.2455	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.2457	48		pha				pha 								; save LSB on stack
.2458	29 c0		and #$c0			and 	#$C0
.245a	05 09		ora $09				ora 	IFR0+IM1
.245c	05 0a		ora $0a				ora 	IFR0+IM2
.245e	f0 10		beq $2470			beq 	_TTCLess
.2460	da		phx				phx
.2461	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.2463					_TTCShiftRight:
.2463	46 0a		lsr $0a				lsr 	IFR0+IM2
.2465	66 09		ror $09				ror 	IFR0+IM1
.2467	66 08		ror $08				ror 	IFR0+IM0
.2469	ca		dex				dex
.246a	d0 f7		bne $2463			bne 	_TTCShiftRight
.246c	fa		plx				plx
.246d	20 55 24	jsr $2455			jsr 	TOKTokeniseConstant
.2470					_TTCLess:
.2470	68		pla				pla
.2471	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.2473	20 13 25	jsr $2513			jsr 	TOKWriteA
.2476	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.2477					TOKTokeniseDecimals:
.2477	20 26 25	jsr $2526			jsr 	TOKGetNext 					; consume the .
.247a	20 9f 26	jsr $269f			jsr 	TOKExtractInteger 			; pull an integer out as text.
.247d	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.247f	20 13 25	jsr $2513			jsr 	TOKWriteA
.2482	20 87 24	jsr $2487			jsr 	TOKOutputElementBuffer 		; then the buffer
.2485	18		clc				clc
.2486	60		rts				rts
.2487					TOKOutputElementBuffer:
.2487	ad 21 05	lda $0521			lda 	TOKElement 					; get count and write that
.248a	20 13 25	jsr $2513			jsr 	TOKWriteA
.248d	a8		tay				tay 								; put in Y
.248e	f0 0c		beq $249c			beq 	_TOEExit 					; exit if empty which is okay.
.2490	a2 01		ldx #$01			ldx 	#1
.2492					_TOELoop:
.2492	bd 21 05	lda $0521,x			lda 	TOKElement,x
.2495	20 13 25	jsr $2513			jsr 	TOKWriteA
.2498	e8		inx				inx
.2499	88		dey				dey
.249a	d0 f6		bne $2492			bne 	_TOELoop
.249c					_TOEExit:
.249c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.249d					TOKTokenise:
.249d	8c 22 06	sty $0622			sty 	TOKDataSource+1 			; save source routine pointer
.24a0	8e 21 06	stx $0621			stx 	TOKDataSource
.24a3	a9 01		lda #$01			lda 	#1 							; set first element flag.
.24a5	8d 23 06	sta $0623			sta 	TOKIsFirstElement
.24a8	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.24aa	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.24ad	9c 01 04	stz $0401			stz 	TOKLineNumber
.24b0	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.24b3					_TOKMainLoop:
.24b3	20 22 25	jsr $2522			jsr 	TOKGet 						; what follows ?
.24b6	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.24b8	f0 50		beq $250a			beq 	_TOKExit
.24ba	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.24bc	d0 05		bne $24c3			bne 	_TOKElement
.24be	20 26 25	jsr $2526			jsr 	TOKGetNext
.24c1	80 f0		bra $24b3			bra 	_TOKMainLoop
.24c3					_TOKElement:
.24c3	20 26 27	jsr $2726			jsr 	TOKIsDigit 					; is it 0..9
.24c6	90 16		bcc $24de			bcc 	_TOKNotDigit
.24c8	20 76 26	jsr $2676			jsr 	TOKTokeniseInteger 			; get integer
.24cb	b0 44		bcs $2511			bcs 	_TOKFail 					; did it fail ?
.24cd	9c 23 06	stz $0623			stz 	TOKIsFirstElement 			; clear first element flag
.24d0	20 22 25	jsr $2522			jsr 	TOKGet 						; what follows ?
.24d3	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.24d5	d0 dc		bne $24b3			bne 	_TOKMainLoop
.24d7	20 77 24	jsr $2477			jsr 	TOKTokeniseDecimals
.24da	b0 35		bcs $2511			bcs 	_TOKFail
.24dc	80 d5		bra $24b3			bra 	_TOKMainLoop
.24de					_TOKNotDigit:
.24de	9c 23 06	stz $0623			stz 	TOKIsFirstElement 			; clear first element flag
.24e1	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.24e3	d0 07		bne $24ec			bne 	_TOKNotHex
.24e5	20 7c 25	jsr $257c			jsr 	TOKTokeniseHexadecimal
.24e8	b0 27		bcs $2511			bcs 	_TOKFail
.24ea	80 c7		bra $24b3			bra 	_TOKMainLoop
.24ec					_TOKNotHex:
.24ec	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.24ee	d0 07		bne $24f7			bne 	_TOKNotString
.24f0	20 ed 26	jsr $26ed			jsr 	TOKTokeniseString
.24f3	b0 1c		bcs $2511			bcs 	_TOKFail
.24f5	80 bc		bra $24b3			bra 	_TOKMainLoop
.24f7					_TOKNotString:
.24f7	20 3f 27	jsr $273f			jsr 	TOKIsAlpha 					; identifier ?
.24fa	b0 07		bcs $2503			bcs 	_TOKIdentifier
.24fc	20 b3 26	jsr $26b3			jsr 	TOKTokenisePunctuation 		; punctuation
.24ff	b0 10		bcs $2511			bcs 	_TOKFail
.2501	80 b0		bra $24b3			bra 	_TOKMainLoop
.2503					_TOKIdentifier:
.2503	20 b9 25	jsr $25b9			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2506	b0 09		bcs $2511			bcs 	_TOKFail
.2508	80 a9		bra $24b3			bra 	_TOKMainLoop
.250a					_TOKExit:
.250a	a9 8d		lda #$8d			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.250c	20 13 25	jsr $2513			jsr 	TOKWriteA
.250f	18		clc				clc									; return with carry set.
.2510	60		rts				rts
.2511					_TOKFail:
.2511	38		sec				sec
.2512	60		rts				rts
.2513					TOKWriteA:
.2513	da		phx				phx
.2514	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2517	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.251a	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.251d	fa		plx				plx
.251e	ee 00 04	inc $0400			inc 	TOKLineSize
.2521	60		rts				rts
.2522					TOKGet:
.2522	18		clc				clc
.2523	6c 21 06	jmp ($0621)			jmp 	(TOKDataSource)
.2526					TOKGetNext:
.2526	38		sec				sec
.2527	6c 21 06	jmp ($0621)			jmp 	(TOKDataSource)
.0621					TOKDataSource:
>0621							.fill 	2
.0623					TOKIsFirstElement:
>0623							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.252a					TOKFindToken:
.252a	a2 0e		ldx #$0e			ldx 	#StandardTokens & $FF 		; do this table
.252c	a0 1f		ldy #$1f			ldy 	#StandardTokens >> 8
.252e	20 46 25	jsr $2546			jsr 	TOKFindTokenXY 				; find it, or not
.2531	b0 0d		bcs $2540			bcs 	_TOKFound1
.2533	a2 8f		ldx #$8f			ldx 	#AlternateTokens & $FF 		; do the alternate table
.2535	a0 20		ldy #$20			ldy 	#AlternateTokens >> 8
.2537	20 46 25	jsr $2546			jsr 	TOKFindTokenXY 				; find it, or not
.253a	90 08		bcc $2544			bcc 	_TOKFTFail 					; not ....
.253c	a2 8e		ldx #$8e			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shift token
.253e	38		sec				sec
.253f	60		rts				rts
.2540					_TOKFound1:
.2540	a2 00		ldx #$00			ldx 	#0 							; come here for unshifted (e.g. X = 0)
.2542	38		sec				sec
.2543	60		rts				rts
.2544					_TOKFTFail:
.2544	18		clc				clc
.2545	60		rts				rts
.2546					TOKFindTokenXY:
.2546	86 24		stx $24				stx 	zTemp0 						; save token table address
.2548	84 25		sty $25				sty 	zTemp0+1
.254a	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.254c	8d 24 06	sta $0624			sta 	TOKCurrent
.254f					_TOKFindLoop:
.254f	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.2551	18		clc				clc 		 						; clear carry in case of fail
.2552	30 17		bmi $256b			bmi 	_TOKExit 					; end of table, fail, so return CC.
.2554	cd 21 05	cmp $0521			cmp 	TOKElement 					; compare against the element length
.2557	d0 13		bne $256c			bne 	_TOKNext 					; different, try next.
.2559	aa		tax				tax 								; number of chars to compare.
.255a	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.255c					_TOKCompare:
.255c	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.255e	d9 21 05	cmp $0521,y			cmp 	TOKElementText-1,y
.2561	d0 09		bne $256c			bne 	_TOKNext 					; different ? try next
.2563	c8		iny				iny 								; compare next two
.2564	ca		dex				dex
.2565	d0 f5		bne $255c			bne 	_TOKCompare 				; until done X characters.
.2567	38		sec				sec
.2568	ad 24 06	lda $0624			lda 	TOKCurrent 					; return current ID.
.256b					_TOKExit:
.256b	60		rts				rts
.256c					_TOKNext:
.256c	ee 24 06	inc $0624			inc 	TOKCurrent 					; increment token #
.256f	38		sec				sec 								; add length+1 to ptr
.2570	b2 24		lda ($24)			lda 	(zTemp0)
.2572	65 24		adc $24				adc 	zTemp0
.2574	85 24		sta $24				sta 	zTemp0
.2576	90 d7		bcc $254f			bcc 	_TOKFindLoop
.2578	e6 25		inc $25				inc 	zTemp0+1
.257a	80 d3		bra $254f			bra 	_TOKFindLoop
.0624					TOKCurrent:
>0624							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.257c					TOKTokeniseHexadecimal:
.257c	20 26 25	jsr $2526			jsr 	TOKGetNext 					; consume the $
.257f	a2 08		ldx #$08			ldx 	#IFR0
.2581	20 ff 36	jsr $36ff			jsr 	IFloatSetZero 				; set R0 = 0
.2584					_TTHLoop:
.2584	20 22 25	jsr $2522			jsr 	TOKGet 						; keep getting and copying while numeric.
.2587	20 4c 27	jsr $274c			jsr 	TOKIsHexadecimal
.258a	90 23		bcc $25af			bcc 	_TTHDone
.258c	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.258e	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.2591	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.2594	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.2597	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.259a	20 26 25	jsr $2526			jsr 	TOKGetNext
.259d	20 10 27	jsr $2710			jsr 	TOKToUpper 					; make U/C
.25a0	38		sec				sec 								; convert to decimal.
.25a1	e9 30		sbc #$30			sbc 	#48
.25a3	c9 0a		cmp #$0a			cmp 	#10
.25a5	90 02		bcc $25a9			bcc 	_TTHNotAlpha
.25a7	e9 07		sbc #$07			sbc 	#7
.25a9					_TTHNotAlpha:
.25a9	05 08		ora $08				ora 	IFR0+IM0 					; OR into R0
.25ab	85 08		sta $08				sta 	IFR0+IM0
.25ad	80 d5		bra $2584			bra 	_TTHLoop
.25af					_TTHDone:
.25af	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.25b1	20 13 25	jsr $2513			jsr 	TOKWriteA
.25b4	20 55 24	jsr $2455			jsr 	TOKTokeniseConstant 		; write integer out.
.25b7	18		clc				clc
.25b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.25b9					TOKTokeniseIdentifier:
.25b9	20 42 24	jsr $2442			jsr 	TOKResetElement 			; extract an identifier
.25bc					_TOKGetIdentifier:
.25bc	20 22 25	jsr $2522			jsr 	TOKGet 						; get identifier character as capital
.25bf	20 10 27	jsr $2710			jsr 	TOKToUpper
.25c2	20 32 27	jsr $2732			jsr 	TOKIsIdentifierElement 		; exit if complete
.25c5	90 08		bcc $25cf			bcc 	_TOKEndIdent
.25c7	20 46 24	jsr $2446			jsr		TOKWriteElement 			; add to element buffer
.25ca	20 26 25	jsr $2526			jsr 	TOKGetNext
.25cd	80 ed		bra $25bc			bra 	_TOKGetIdentifier
.25cf					_TOKEndIdent:
.25cf	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.25d1	d0 06		bne $25d9			bne 	_TOKNotString
.25d3	20 46 24	jsr $2446			jsr 	TOKWriteElement 			; add it
.25d6	20 26 25	jsr $2526			jsr 	TOKGetNext 					; consume it
.25d9					_TOKNotString:
.25d9	20 22 25	jsr $2522			jsr 	TOKGet 						; finally check for (
.25dc	c9 28		cmp #$28			cmp 	#"("
.25de	d0 06		bne $25e6			bne 	_TOKNoArray
.25e0	20 46 24	jsr $2446			jsr 	TOKWriteElement 			; add it
.25e3	20 26 25	jsr $2526			jsr 	TOKGetNext 					; consume it
.25e6					_TOKNoArray:
.25e6	20 2a 25	jsr $252a			jsr 	TOKFindToken 				; find it
.25e9	90 18		bcc $2603			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.25eb	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.25ed	f0 0f		beq $25fe			beq 	_TOKComment 				; yes, do comment code.
.25ef	e0 8e		cpx #$8e			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.25f1	d0 06		bne $25f9			bne 	_TOKNoShift
.25f3	48		pha				pha 								; write the shift.
.25f4	8a		txa				txa
.25f5	20 13 25	jsr $2513			jsr 	TOKWriteA
.25f8	68		pla				pla
.25f9					_TOKNoShift:
.25f9	20 13 25	jsr $2513			jsr 	TOKWriteA 					; write the main token.
.25fc	18		clc				clc
.25fd	60		rts				rts
.25fe					_TOKComment:
.25fe	20 43 26	jsr $2643			jsr 	TOKDoComment 				; comments are special case.
.2601	18		clc				clc
.2602	60		rts				rts
.2603					_TOKIsVariable:
.2603	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2605					_TOKOutputBuffer:
.2605	bd 22 05	lda $0522,x			lda 	TOKElementText,x 			; output it translated.
.2608	20 31 26	jsr $2631			jsr 	TOKTranslateIdentifier
.260b	20 13 25	jsr $2513			jsr 	TOKWriteA
.260e	e8		inx				inx
.260f	bd 22 05	lda $0522,x			lda 	TOKElementText,x
.2612	20 32 27	jsr $2732			jsr 	TOKIsIdentifierElement
.2615	b0 ee		bcs $2605			bcs 	_TOKOutputBuffer
.2617	a8		tay				tay 								; last char in Y
.2618	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.261a	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.261c	f0 0e		beq $262c			beq 	_TOKIVExit
.261e	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2620	d0 04		bne $2626			bne 	_TOKIVCheckArray 			; no, check for (
.2622	1a		inc a				inc 	a 							; token is $7D
.2623	bc 23 05	ldy $0523,x			ldy 	TOKElementText+1,x 			; get next one.
.2626					_TOKIVCheckArray:
.2626	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2628	d0 02		bne $262c			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.262a	1a		inc a				inc 	a
.262b	1a		inc a				inc 	a
.262c					_TOKIVExit:
.262c	20 13 25	jsr $2513			jsr 	TOKWriteA 					; ending token
.262f	18		clc				clc
.2630	60		rts				rts
.2631					TOKTranslateIdentifier:
.2631	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.2633	f0 0b		beq $2640			beq 	_TTI64
.2635	38		sec				sec
.2636	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2638	10 03		bpl $263d			bpl 	_TTIExit
.263a	18		clc				clc 								; map 09 onto 26-35
.263b	69 2b		adc #$2b			adc 	#"A"-"0"+26
.263d					_TTIExit:
.263d	09 40		ora #$40			ora 	#$40 						; correct range.
.263f	60		rts				rts
.2640	a9 64		lda #$64	_TTI64:	lda 	#$64
.2642	60		rts				rts
.2643					TOKDoComment:
.2643	20 13 25	jsr $2513			jsr 	TOKWriteA					; output the token.
.2646					_TOKSkipSpaces:
.2646	20 22 25	jsr $2522			jsr 	TOKGet 						; skip over spaces
.2649	c9 20		cmp #$20			cmp 	#' '
.264b	d0 05		bne $2652			bne 	_TOKEndSpaces
.264d	20 26 25	jsr $2526			jsr 	TOKGetNext
.2650	80 f4		bra $2646			bra 	_TOKSkipSpaces
.2652					_TOKEndSpaces:
.2652	48		pha				pha 								; save it
.2653	68		pla				pla
.2654	f0 04		beq $265a			beq 	_TOKDCExit 					; end of line.
.2656	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark , we should be okay.
.2658	d0 01		bne $265b			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.265a					_TOKDCExit:
.265a	60		rts				rts
.265b					_TOKDCDoLine:
.265b	20 42 24	jsr $2442			jsr 	TOKResetElement 			; start getting the string
.265e					_TOKDCLoop:
.265e	20 22 25	jsr $2522			jsr 	TOKGet 						; check EOL
.2661	c9 00		cmp #$00			cmp 	#0
.2663	f0 08		beq $266d			beq 	_TOKDCEndComment
.2665	20 26 25	jsr $2526			jsr 	TOKGetNext 					; get and consume
.2668	20 46 24	jsr $2446			jsr 	TOKWriteElement
.266b	80 f1		bra $265e			bra 	_TOKDCLoop
.266d					_TOKDCEndComment:
.266d	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ 		; output as string.
.266f	20 13 25	jsr $2513			jsr 	TOKWriteA
.2672	20 87 24	jsr $2487			jsr 	TOKOutputElementBuffer
.2675	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2676					TOKTokeniseInteger:
.2676	20 9f 26	jsr $269f			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2679	a2 22		ldx #$22			ldx 	#TOKElementText & $FF 		; get length/address
.267b	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.267d	ad 21 05	lda $0521			lda		TOKElement
.2680	20 63 35	jsr $3563			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2683	ad 23 06	lda $0623			lda 	TOKIsFirstElement 			; first element ?
.2686	f0 12		beq $269a			beq 	_TOKNotLineNumber
.2688	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.268a	d0 0c		bne $2698			bne 	_TOKBadLineNumeber
.268c	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.268e	8d 01 04	sta $0401			sta 	TOKLineNumber
.2691	a5 09		lda $09				lda 	IFR0+IM1
.2693	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2696	18		clc				clc
.2697	60		rts				rts
.2698					_TOKBadLineNumeber:
.2698	38		sec				sec
.2699	60		rts				rts
.269a					_TOKNotLineNumber:
.269a	20 55 24	jsr $2455			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.269d	18		clc				clc
.269e	60		rts				rts
.269f					TOKExtractInteger:
.269f	20 42 24	jsr $2442			jsr 	TOKResetElement 			; restart
.26a2					_TTILoop:
.26a2	20 22 25	jsr $2522			jsr 	TOKGet 						; keep getting and copying while numeric.
.26a5	20 26 27	jsr $2726			jsr 	TOKIsDigit
.26a8	90 08		bcc $26b2			bcc 	_TOKEIExit
.26aa	20 46 24	jsr $2446			jsr 	TOKWriteElement
.26ad	20 26 25	jsr $2526			jsr 	TOKGetNext
.26b0	80 f0		bra $26a2			bra 	_TTILoop
.26b2					_TOKEIExit:
.26b2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.26b3					TOKTokenisePunctuation:
.26b3	20 42 24	jsr $2442			jsr 	TOKResetElement 			; copy first punctuation character into element.
.26b6	20 26 25	jsr $2526			jsr 	TOKGetNext
.26b9	20 46 24	jsr $2446			jsr 	TOKWriteElement
.26bc	20 22 25	jsr $2522			jsr 	TOKGet 						; what follows ?
.26bf	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character.
.26c1	f0 10		beq $26d3			beq 	_TTPOne
.26c3	20 36 27	jsr $2736			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.26c6	b0 0b		bcs $26d3			bcs 	_TTPOne 					; these speed things up a bit.
.26c8	20 46 24	jsr $2446			jsr 	TOKWriteElement 			; this is what we will search for.
.26cb	20 2a 25	jsr $252a			jsr 	TOKFindToken
.26ce	b0 0a		bcs $26da			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.26d0	ce 21 05	dec $0521			dec 	TOKElement 					; make it a single character
.26d3					_TTPOne:
.26d3	20 2a 25	jsr $252a			jsr 	TOKFindToken 				; look for one character punctuation
.26d6	b0 07		bcs $26df			bcs 	_TTPOutputExit 				; we found it
.26d8	38		sec				sec 								; not recognised.
.26d9	60		rts				rts
.26da					_TTPConsumeExit:
.26da	48		pha				pha
.26db	20 26 25	jsr $2526			jsr 	TOKGetNext 					; get the 2nd char out.
.26de	68		pla				pla
.26df					_TTPOutputExit:
.26df	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.26e1	f0 05		beq $26e8			beq 	_TTPComment
.26e3	20 13 25	jsr $2513			jsr  	TOKWriteA 					; write token out
.26e6	18		clc				clc
.26e7	60		rts				rts
.26e8					_TTPComment:
.26e8	20 43 26	jsr $2643			jsr 	TOKDoComment
.26eb	18		clc				clc
.26ec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.26ed					TOKTokeniseString:
.26ed	20 26 25	jsr $2526			jsr 	TOKGetNext 					; consume the "
.26f0	20 42 24	jsr $2442			jsr 	TOKResetElement 			; start getting the string
.26f3					_TOKTSLoop:
.26f3	20 22 25	jsr $2522			jsr 	TOKGet 						; check EOL
.26f6	c9 00		cmp #$00			cmp 	#0
.26f8	f0 0c		beq $2706			beq 	_TOKTSExit
.26fa	20 26 25	jsr $2526			jsr 	TOKGetNext 					; get and consume
.26fd	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.26ff	f0 05		beq $2706			beq 	_TOKTSExit
.2701	20 46 24	jsr $2446			jsr 	TOKWriteElement
.2704	80 ed		bra $26f3			bra 	_TOKTSLoop
.2706					_TOKTSExit:
.2706	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ		; token for [[string]]
.2708	20 13 25	jsr $2513			jsr 	TOKWriteA
.270b	20 87 24	jsr $2487			jsr 	TOKOutputElementBuffer 		; output collected data.
.270e	18		clc				clc
.270f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2710					TOKToUpper:
.2710	c9 61		cmp #$61			cmp 	#"a"
.2712	90 06		bcc $271a			bcc 	_TTUNotLower
.2714	c9 7b		cmp #$7b			cmp 	#"z"+1
.2716	b0 02		bcs $271a			bcs 	_TTUNotLower
.2718	49 20		eor #$20			eor 	#$20
.271a					_TTUNotLower:
.271a	60		rts				rts
.271b					TOKToLower:
.271b	c9 41		cmp #$41			cmp 	#"A"
.271d	90 06		bcc $2725			bcc 	_TTUNotUpper
.271f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2721	b0 02		bcs $2725			bcs 	_TTUNotUpper
.2723	49 20		eor #$20			eor 	#$20
.2725					_TTUNotUpper:
.2725	60		rts				rts
.2726					TOKIsDigit:
.2726	c9 30		cmp #$30			cmp 	#"0"
.2728	90 06		bcc $2730			bcc 	TOKFail
.272a	c9 3a		cmp #$3a			cmp 	#"9"+1
.272c	b0 02		bcs $2730			bcs 	TOKFail
.272e					TOKSucceed:
.272e	38		sec				sec
.272f	60		rts				rts
.2730					TOKFail:
.2730	18		clc				clc
.2731	60		rts				rts
.2732					TOKIsIdentifierElement:
.2732	c9 5f		cmp #$5f			cmp 	#"_"
.2734	f0 f8		beq $272e			beq 	TOKSucceed 					; else fall through to alphanumeric
.2736					TOKIsAlphaNumeric:
.2736	20 3f 27	jsr $273f			jsr 	TOKIsAlpha
.2739	b0 f3		bcs $272e			bcs 	TOKSucceed
.273b	20 26 27	jsr $2726			jsr 	TOKIsDigit
.273e	60		rts				rts
.273f					TOKIsAlpha:
.273f	20 10 27	jsr $2710			jsr 	TOKToUpper
.2742	c9 41		cmp #$41			cmp 	#"A"
.2744	90 ea		bcc $2730			bcc 	TOKFail
.2746	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2748	b0 e6		bcs $2730			bcs 	TOKFail
.274a	80 e2		bra $272e			bra 	TOKSucceed
.274c					TOKIsHexadecimal:
.274c	20 26 27	jsr $2726			jsr		TOKIsDigit
.274f	b0 dd		bcs $272e			bcs 	TOKSucceed
.2751	20 3f 27	jsr $273f			jsr 	TOKIsAlpha
.2754	90 da		bcc $2730			bcc 	TOKFail
.2756	c9 47		cmp #$47			cmp 	#"F"+1
.2758	b0 d6		bcs $2730			bcs 	TOKFail
.275a	80 d2		bra $272e			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.275c					Command_CALL:
.275c	a9 42		lda #$42			lda 	#STK_CALL
.275e	20 7b 2c	jsr $2c7b			jsr 	StackOpen
.2761	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.2763	29 c0		and #$c0			and 	#$C0
.2765	c9 40		cmp #$40			cmp 	#$40
.2767	d0 29		bne $2792			bne 	_CCSyntax
.2769	20 42 30	jsr $3042			jsr 	VARGetInfo 					; get the information
.276c	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 				; check right bracket follows.
.276f	20 f4 2f	jsr $2ff4			jsr 	VARFind 					; exists ?
.2772	90 21		bcc $2795			bcc 	_CCUnknown
.2774	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.2776	85 24		sta $24				sta 	zTemp0
.2778	20 ae 2c	jsr $2cae			jsr 	STKSaveCodePosition 		; save return address on stack.
.277b	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.277d	b1 24		lda ($24),y			lda 	(zTemp0),y
.277f	c9 ff		cmp #$ff			cmp 	#$FF
.2781	d0 12		bne $2795			bne 	_CCUnknown
.2783	88		dey				dey 								; get Y offset to stack
.2784	b1 24		lda ($24),y			lda 	(zTemp0),y
.2786	48		pha				pha
.2787	88		dey				dey 								; get address
.2788	b1 24		lda ($24),y			lda 	(zTemp0),y
.278a	85 19		sta $19				sta 	codePtr+1
.278c	b2 24		lda ($24)			lda 	(zTemp0)
.278e	85 18		sta $18				sta 	codePtr
.2790	7a		ply				ply 								; restore Y
.2791	60		rts				rts
.2792					_CCSyntax:
.2792	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.2795					_CCUnknown:
.2795	4c ec 2b	jmp $2bec		jmp	ErrorV_unknown
.2798					Command_ENDPROC:
.2798	a9 42		lda #$42			lda 	#STK_CALL
.279a	20 a6 2c	jsr $2ca6			jsr 	StackCheckFrame
.279d	20 c0 2c	jsr $2cc0			jsr 	STKLoadCodePosition 		; return
.27a0	20 98 2c	jsr $2c98			jsr 	StackClose
.27a3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.27a4					Command_DO:
.27a4	a9 22		lda #$22			lda 	#STK_DO
.27a6	20 7b 2c	jsr $2c7b			jsr 	StackOpen
.27a9	20 ae 2c	jsr $2cae			jsr 	STKSaveCodePosition 		; save loop position
.27ac	60		rts				rts
.27ad					Command_EXIT:
.27ad	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.27af	20 a6 2c	jsr $2ca6			jsr 	StackCheckFrame
.27b2	20 98 2c	jsr $2c98			jsr 	StackClose 					; close it
.27b5	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.27b7	aa		tax				tax
.27b8	20 7f 29	jsr $297f			jsr 	ScanForward
.27bb	60		rts				rts
.27bc					Command_LOOP:
.27bc	a9 22		lda #$22			lda 	#STK_DO
.27be	20 a6 2c	jsr $2ca6			jsr 	StackCheckFrame
.27c1	20 c0 2c	jsr $2cc0			jsr 	STKLoadCodePosition 		; loop back
.27c4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.27c5					Command_FOR:
.27c5	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.27c7	20 7b 2c	jsr $2c7b			jsr 	StackOpen
.27ca	20 ab 15	jsr $15ab			jsr 	CommandLET 					; do "I = 1" bit
.27cd	5a		phy				phy 								; save variable address to +4,+5
.27ce	a0 04		ldy #$04			ldy 	#4
.27d0	a5 24		lda $24				lda 	zTemp0
.27d2	91 2c		sta ($2c),y			sta 	(basicStack),y
.27d4	c8		iny				iny
.27d5	a5 25		lda $25				lda 	zTemp0+1
.27d7	91 2c		sta ($2c),y			sta 	(basicStack),y
.27d9	7a		ply				ply
.27da	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.27dc	20 72 2c	jsr $2c72			jsr 	ERRCheckA
.27df	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.27e2	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.27e4	a2 08		ldx #$08			ldx 	#IFR0
.27e6	20 3b 28	jsr $283b			jsr 	CFSaveR0X
.27e9	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.27eb	c9 91		cmp #$91			cmp 	#PR_STEP
.27ed	d0 06		bne $27f5			bne 	_CFStep1
.27ef	c8		iny				iny 								; consume step
.27f0	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 				; evaluate STEP
.27f3	80 24		bra $2819			bra 	_CFWriteStep
.27f5					_CFStep1:
.27f5	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.27f7	a9 01		lda #$01			lda 	#1
.27f9	20 01 37	jsr $3701			jsr 	IFloatSetByte
.27fc	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.27fd	a0 04		ldy #$04			ldy 	#4 							; get variable address
.27ff	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2801	85 24		sta $24				sta 	zTemp0
.2803	c8		iny				iny
.2804	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2806	85 25		sta $25				sta 	zTemp0+1
.2808	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.280a	b1 24		lda ($24),y			lda 	(zTemp0),y
.280c	d0 0a		bne $2818			bne 	_CFNotOptimised
.280e	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2810	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2812	d0 04		bne $2818			bne 	_CFNotOptimised
.2814	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2816	85 0b		sta $0b				sta 	IFR0+IExp
.2818					_CFNotOptimised:
.2818	7a		ply				ply
.2819					_CFWriteStep:
.2819	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.281b	a9 06		lda #$06			lda 	#6
.281d	20 3b 28	jsr $283b			jsr 	CFSaveR0X
.2820	20 ae 2c	jsr $2cae			jsr 	STKSaveCodePosition 		; save loop position
.2823	60		rts				rts
.2824					CFLoadR0X:
.2824	5a		phy				phy
.2825	a8		tay				tay
.2826	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2828	95 00		sta $00,x			sta 	IM0,x
.282a	c8		iny				iny
.282b	b1 2c		lda ($2c),y			lda 	(basicStack),y
.282d	95 01		sta $01,x			sta 	IM1,x
.282f	c8		iny				iny
.2830	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2832	95 02		sta $02,x			sta 	IM2,x
.2834	c8		iny				iny
.2835	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2837	95 03		sta $03,x			sta 	IExp,x
.2839	7a		ply				ply
.283a	60		rts				rts
.283b					CFSaveR0X:
.283b	5a		phy				phy
.283c	a8		tay				tay
.283d	b5 00		lda $00,x			lda 	IM0,x
.283f	91 2c		sta ($2c),y			sta 	(basicStack),y
.2841	c8		iny				iny
.2842	b5 01		lda $01,x			lda 	IM1,x
.2844	91 2c		sta ($2c),y			sta 	(basicStack),y
.2846	c8		iny				iny
.2847	b5 02		lda $02,x			lda 	IM2,x
.2849	91 2c		sta ($2c),y			sta 	(basicStack),y
.284b	c8		iny				iny
.284c	b5 03		lda $03,x			lda 	IExp,x
.284e	91 2c		sta ($2c),y			sta 	(basicStack),y
.2850	7a		ply				ply
.2851	60		rts				rts
.2852					Command_NEXT:
.2852	a9 37		lda #$37			lda 	#STK_FOR
.2854	20 a6 2c	jsr $2ca6			jsr 	StackCheckFrame
.2857	5a		phy				phy 								; check optimised loop
.2858	a0 09		ldy #$09			ldy 	#9
.285a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.285c	7a		ply				ply
.285d	0a		asl a				asl 	a
.285e	b0 35		bcs $2895			bcs 	_CNOptimised
.2860	20 cd 28	jsr $28cd			jsr 	_CNLoadValue 				; load index value to R0.
.2863	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2865	a9 06		lda #$06			lda 	#6
.2867	20 24 28	jsr $2824			jsr 	CFLoadR0X
.286a	20 f7 30	jsr $30f7			jsr 	IFloatAdd 					; add them together and write back.
.286d	20 f0 28	jsr $28f0			jsr 	_CNSaveValue
.2870	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2872	a2 0c		ldx #$0c			ldx 	#IFR1
.2874	20 24 28	jsr $2824			jsr 	CFLoadR0X
.2877	20 ce 33	jsr $33ce			jsr 	IFloatCompare 				; compare terminal vs current
.287a	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.287c	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero
.287f	f0 10		beq $2891			beq 	_CNLoopBack
.2881	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2883	5a		phy				phy
.2884	a0 09		ldy #$09			ldy 	#6+IExp
.2886	51 2c		eor ($2c),y			eor 	(basicStack),y
.2888	7a		ply				ply
.2889	29 40		and #$40			and 	#IFSign
.288b	f0 04		beq $2891			beq 	_CNLoopBack
.288d					_CNExitLoop:
.288d	20 98 2c	jsr $2c98			jsr 	StackClose		 			; return
.2890	60		rts				rts
.2891					_CNLoopBack:
.2891	20 c0 2c	jsr $2cc0			jsr 	STKLoadCodePosition 		; loop back
.2894	60		rts				rts
.2895					_CNOptimised:
.2895	5a		phy				phy
.2896	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2898	b1 2c		lda ($2c),y			lda 	(basicStack),y
.289a	85 28		sta $28				sta 	zTemp2
.289c	c8		iny				iny
.289d	b1 2c		lda ($2c),y			lda 	(basicStack),y
.289f	85 29		sta $29				sta 	zTemp2+1
.28a1	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.28a3					_CNIncrement:
.28a3	c8		iny				iny
.28a4	b1 28		lda ($28),y			lda 	(zTemp2),y
.28a6	1a		inc a				inc 	a
.28a7	91 28		sta ($28),y			sta 	(zTemp2),y
.28a9	f0 f8		beq $28a3			beq 	_CNIncrement
.28ab	18		clc				clc 								; point zTemp0 to terminal value
.28ac	a5 2c		lda $2c				lda 	basicStack
.28ae	69 0a		adc #$0a			adc 	#10
.28b0	85 24		sta $24				sta 	zTemp0
.28b2	a5 2d		lda $2d				lda 	basicStack+1
.28b4	69 00		adc #$00			adc 	#0
.28b6	85 25		sta $25				sta 	zTemp0+1
.28b8	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.28ba	18		clc				clc 								; borrow 1, we want > not >=
.28bb	b2 28		lda ($28)			lda 	(zTemp2)
.28bd	f2 24		sbc ($24)			sbc 	(zTemp0)
.28bf	b1 28		lda ($28),y			lda 	(zTemp2),y
.28c1	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.28c3	c8		iny				iny
.28c4	b1 28		lda ($28),y			lda 	(zTemp2),y
.28c6	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.28c8	7a		ply				ply
.28c9	b0 c2		bcs $288d			bcs 	_CNExitLoop
.28cb	80 c4		bra $2891			bra 	_CNLoopBack
.28cd					_CNLoadValue:
.28cd	5a		phy				phy
.28ce	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.28d0	b1 2c		lda ($2c),y			lda 	(basicStack),y
.28d2	85 28		sta $28				sta 	zTemp2
.28d4	c8		iny				iny
.28d5	b1 2c		lda ($2c),y			lda 	(basicStack),y
.28d7	85 29		sta $29				sta 	zTemp2+1
.28d9	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.28db	b1 28		lda ($28),y			lda 	(zTemp2),y
.28dd	85 08		sta $08				sta 	IFR0+IM0
.28df	c8		iny				iny
.28e0	b1 28		lda ($28),y			lda 	(zTemp2),y
.28e2	85 09		sta $09				sta 	IFR0+IM1
.28e4	c8		iny				iny
.28e5	b1 28		lda ($28),y			lda 	(zTemp2),y
.28e7	85 0a		sta $0a				sta 	IFR0+IM2
.28e9	c8		iny				iny
.28ea	b1 28		lda ($28),y			lda 	(zTemp2),y
.28ec	85 0b		sta $0b				sta 	IFR0+IExp
.28ee	7a		ply				ply
.28ef	60		rts				rts
.28f0					_CNSaveValue:
.28f0	5a		phy				phy
.28f1	a0 00		ldy #$00			ldy 	#0
.28f3	a5 08		lda $08				lda 	IFR0+IM0
.28f5	91 28		sta ($28),y			sta 	(zTemp2),y
.28f7	c8		iny				iny
.28f8	a5 09		lda $09				lda 	IFR0+IM1
.28fa	91 28		sta ($28),y			sta 	(zTemp2),y
.28fc	c8		iny				iny
.28fd	a5 0a		lda $0a				lda 	IFR0+IM2
.28ff	91 28		sta ($28),y			sta 	(zTemp2),y
.2901	c8		iny				iny
.2902	a5 0b		lda $0b				lda 	IFR0+IExp
.2904	91 28		sta ($28),y			sta 	(zTemp2),y
.2906	7a		ply				ply
.2907	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2908					Command_GOSUB:
.2908	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; get line number
.290b	a9 52		lda #$52			lda 	#STK_GOSUB
.290d	20 7b 2c	jsr $2c7b			jsr 	StackOpen
.2910	20 ae 2c	jsr $2cae			jsr 	STKSaveCodePosition 		; save return address on stack.
.2913	4c cc 14	jmp $14cc			jmp 	GotoR0
.2916					Command_RETURN:
.2916	a9 52		lda #$52			lda 	#STK_GOSUB
.2918	20 a6 2c	jsr $2ca6			jsr 	StackCheckFrame
.291b	20 c0 2c	jsr $2cc0			jsr 	STKLoadCodePosition 		; return
.291e	20 98 2c	jsr $2c98			jsr 	StackClose
.2921	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2922					IfCommand:
.2922	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 				; Get the if test.
.2925	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2927	c9 88		cmp #$88			cmp 	#PR_THEN  					; could be THEN <stuff>
.2929	d0 0c		bne $2937			bne 	_IfStructured 				; we still support it.
.292b	c8		iny				iny 								; consume THEN
.292c	a2 08		ldx #$08			ldx 	#IFR0
.292e	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero 			; is it zero
.2931	f0 01		beq $2934			beq 	_IfFail 					; if fail, go to next line
.2933	60		rts				rts 								; if THEN just continue
.2934					_IfFail:
.2934	4c 27 18	jmp $1827			jmp 	RUNEndOfLine
.2937					_IfStructured:
.2937	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero 			; is it zero
.293a	d0 07		bne $2943			bne 	_IfExit 					; if not, then continue normally.
.293c	a9 8f		lda #$8f			lda 	#PR_ELSE 					; look for else/endif
.293e	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2940	20 7f 29	jsr $297f			jsr 	ScanForward 				; and run from there
.2943					_IfExit:
.2943	60		rts				rts
.2944					ElseCode:
.2944	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2946	aa		tax				tax 								; so just go to the structure exit
.2947	20 7f 29	jsr $297f			jsr 	ScanForward
.294a	60		rts				rts
.294b					EndIf:
.294b	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/indent.asm

.294c					GetIndent:
.294c	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.294e	a0 03		ldy #$03			ldy 	#3
.2950					_GILoop:
.2950	b1 18		lda ($18),y			lda 	(codePtr),y 				; end of line ?
.2952	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ
.2954	f0 05		beq $295b			beq 	_GIExit
.2956	20 9d 29	jsr $299d			jsr 	SkipOneInstruction
.2959	80 f5		bra $2950			bra 	_GILoop
.295b					_GIExit:
.295b	a5 26		lda $26				lda 	zTemp1
.295d	0a		asl a				asl 	a
.295e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.295f					Command_REPEAT:
.295f	a9 02		lda #$02			lda 	#STK_REPEAT
.2961	20 7b 2c	jsr $2c7b			jsr 	StackOpen
.2964	20 ae 2c	jsr $2cae			jsr 	STKSaveCodePosition 		; save loop position
.2967	60		rts				rts
.2968					Command_UNTIL:
.2968	a9 02		lda #$02			lda 	#STK_REPEAT 				; check REPEAT
.296a	20 a6 2c	jsr $2ca6			jsr 	StackCheckFrame
.296d	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 				; work out the test
.2970	a2 08		ldx #$08			ldx 	#IFR0
.2972	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero 			; check if zero
.2975	f0 04		beq $297b			beq 	_CULoopBack 				; if so keep looping
.2977	20 98 2c	jsr $2c98			jsr 	StackClose		 			; return
.297a	60		rts				rts
.297b					_CULoopBack:
.297b	20 c0 2c	jsr $2cc0			jsr 	STKLoadCodePosition 		; loop back
.297e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.297f					ScanForward:
.297f	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.2981					ScanForwardMain:
.2981	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.2983	86 25		stx $25				stx 	zTemp0+1
.2985					_ScanLoop:
.2985	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2987	d0 0a		bne $2993			bne 	_ScanNoCheck
.2989	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.298b	c5 24		cmp $24				cmp 	zTemp0
.298d	f0 0c		beq $299b			beq 	_ScanExit
.298f	c5 25		cmp $25				cmp 	zTemp0+1
.2991	f0 08		beq $299b			beq 	_ScanExit
.2993					_ScanNoCheck:
.2993	20 9d 29	jsr $299d			jsr 	SkipOneInstruction
.2996	90 ed		bcc $2985			bcc 	_ScanLoop
.2998	4c 03 2b	jmp $2b03		jmp	ErrorV_structure
.299b					_ScanExit:
.299b	c8		iny				iny 								; consume final token.
.299c	60		rts				rts
.299d					SkipOneInstruction:
.299d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.299f	c8		iny				iny
.29a0	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.29a2	f0 35		beq $29d9			beq		_ScanDataItem
.29a4	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.29a6	f0 31		beq $29d9			beq 	_ScanDataItem
.29a8	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.29aa	f0 1a		beq $29c6			beq 	_ScanNextLine
.29ac	c9 8e		cmp #$8e			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.29ae	d0 01		bne $29b1			bne 	_ScanNoShift
.29b0	c8		iny				iny
.29b1					_ScanNoShift:
.29b1	c9 8d		cmp #$8d			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.29b3	b0 2b		bcs $29e0			bcs 	_SOIExit
.29b5	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.29b7	90 27		bcc $29e0			bcc 	_SOIExit
.29b9	aa		tax				tax 								; access the table to get the adjustment.
.29ba	18		clc				clc
.29bb	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.29bd	7d 81 1e	adc $1e81,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.29c0	85 26		sta $26				sta 	zTemp1
.29c2	10 1c		bpl $29e0			bpl		_SOIExit 		 			; error if -ve ?
.29c4	38		sec				sec
.29c5	60		rts				rts
.29c6					_ScanNextLine:
.29c6	18		clc				clc	 								; forward to next line.
.29c7	b2 18		lda ($18)			lda 	(codePtr)
.29c9	65 18		adc $18				adc 	codePtr
.29cb	85 18		sta $18				sta 	codePtr
.29cd	90 02		bcc $29d1			bcc 	_ScanNoCarry
.29cf	e6 19		inc $19				inc 	codePtr+1
.29d1					_ScanNoCarry:
.29d1	a0 03		ldy #$03			ldy 	#3
.29d3	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.29d5	d0 09		bne $29e0			bne 	_SOIExit
.29d7	38		sec				sec 								; failed.
.29d8	60		rts				rts
.29d9					_ScanDataItem:
.29d9	98		tya				tya
.29da	38		sec				sec
.29db	71 18		adc ($18),y			adc 	(codePtr),y
.29dd	a8		tay				tay
.29de	80 00		bra $29e0			bra 	_SOIExit
.29e0					_SOIExit:
.29e0	18		clc				clc
.29e1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.29e2					ScanProcedures:
.29e2	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.29e4	48		pha				pha
.29e5	a5 19		lda $19				lda 	codePtr+1
.29e7	48		pha				pha
.29e8	5a		phy				phy
.29e9	ad 1f 05	lda $051f			lda 	PGMBaseHigh 				; back to the program start
.29ec	85 19		sta $19				sta 	codePtr+1
.29ee	64 18		stz $18				stz 	codePtr
.29f0					_SPLoop:
.29f0	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.29f2	f0 18		beq $2a0c			beq 	_SPExit
.29f4	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.29f6	b1 18		lda ($18),y			lda 	(codePtr),y
.29f8	c9 89		cmp #$89			cmp 	#PR_PROC
.29fa	d0 03		bne $29ff			bne 	_SPNext
.29fc	20 14 2a	jsr $2a14			jsr 	_SPSetupRecord
.29ff					_SPNext:
.29ff	18		clc				clc 								; forward to next
.2a00	b2 18		lda ($18)			lda 	(codePtr)
.2a02	65 18		adc $18				adc 	codePtr
.2a04	85 18		sta $18				sta 	codePtr
.2a06	90 e8		bcc $29f0			bcc 	_SPLoop
.2a08	e6 19		inc $19				inc 	codePtr+1
.2a0a	80 e4		bra $29f0			bra 	_SPLoop
.2a0c					_SPExit:
.2a0c	7a		ply				ply
.2a0d	68		pla				pla
.2a0e	85 19		sta $19				sta 	codePtr+1
.2a10	68		pla				pla
.2a11	85 18		sta $18				sta 	codePtr
.2a13	60		rts				rts
.2a14					_SPSetupRecord:
.2a14	c8		iny				iny 								; check identifier follows
.2a15	b1 18		lda ($18),y			lda 	(codePtr),y
.2a17	29 c0		and #$c0			and 	#$C0
.2a19	c9 40		cmp #$40			cmp 	#$40
.2a1b	d0 27		bne $2a44			bne 	_SPSyntax
.2a1d	20 42 30	jsr $3042			jsr 	VARGetInfo 					; get the information
.2a20	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen 				; check right bracket follows.
.2a23	20 f4 2f	jsr $2ff4			jsr 	VARFind 					; already exists ?
.2a26	b0 1f		bcs $2a47			bcs 	_SPUsed 					; error !
.2a28	20 a0 2f	jsr $2fa0			jsr 	VARCreate 					; create, XA points to the data.
.2a2b	85 24		sta $24				sta 	zTemp0
.2a2d	86 25		stx $25				stx 	zTemp0+1
.2a2f	5a		phy				phy 								; save Y pos on stack
.2a30	a0 01		ldy #$01			ldy 	#1
.2a32	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2a34	92 24		sta ($24)			sta 	(zTemp0)
.2a36	a5 19		lda $19				lda 	codePtr+1
.2a38	91 24		sta ($24),y			sta 	(zTemp0),y
.2a3a	c8		iny				iny
.2a3b	68		pla				pla
.2a3c	91 24		sta ($24),y			sta 	(zTemp0),y
.2a3e	c8		iny				iny
.2a3f	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2a41	91 24		sta ($24),y			sta 	(zTemp0),y
.2a43	60		rts				rts
.2a44					_SPSyntax:
.2a44	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.2a47					_SPUsed:
.2a47	4c ce 2b	jmp $2bce		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2a4a					Command_WHILE:
.2a4a	5a		phy				phy 								; save position of the test
.2a4b	20 66 1a	jsr $1a66			jsr 	EXPEvalNumber 				; work out the while test.
.2a4e	a2 08		ldx #$08			ldx 	#IFR0
.2a50	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero 			; check if zero
.2a53	f0 0e		beq $2a63			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2a55	98		tya				tya 								; position *after* test.
.2a56	7a		ply				ply 								; restore position before test, at WHILE
.2a57	88		dey				dey 								; so we execute the WHILE command again.
.2a58	48		pha				pha 								; push after test on the stack
.2a59	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2a5b	20 7b 2c	jsr $2c7b			jsr 	StackOpen
.2a5e	20 ae 2c	jsr $2cae			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2a61	7a		ply				ply 								; restore the position *after* the test
.2a62	60		rts				rts
.2a63					_WHExitLoop:
.2a63	68		pla				pla 								; throw post loop position
.2a64	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2a66	aa		tax				tax
.2a67	20 7f 29	jsr $297f			jsr 	ScanForward
.2a6a	60		rts				rts
.2a6b					Command_WEND:
.2a6b	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2a6d	20 a6 2c	jsr $2ca6			jsr 	StackCheckFrame
.2a70	20 c0 2c	jsr $2cc0			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2a73	20 98 2c	jsr $2c98			jsr 	StackClose		 			; erase the frame
.2a76	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2a77					ErrorV_syntax:
.2a77	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2a7a	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2a82	45 72 72 6f 72 00
.2a88					ErrorV_range:
.2a88	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2a8b	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2a93	52 61 6e 67 65 00
.2a99					ErrorV_value:
.2a99	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2a9c	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2aa4	75 65 00
.2aa7					ErrorV_type:
.2aa7	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2aaa	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2ab2	73 6d 61 74 63 68 00
.2ab9					ErrorV_unimplemented:
.2ab9	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2abc	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2ac4	6c 65 6d 65 6e 74 65 64 00
.2acd					ErrorV_assert:
.2acd	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2ad0	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2ad8	46 61 69 6c 00
.2add					ErrorV_internal:
.2add	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2ae0	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2ae8	6c 20 45 72 72 6f 72 00
.2af0					ErrorV_divzero:
.2af0	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2af3	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2afb	42 79 20 5a 65 72 6f 00
.2b03					ErrorV_structure:
.2b03	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2b06	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2b0e	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2b1b					ErrorV_stop:
.2b1b	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2b1e	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2b26	20 53 74 6f 70 70 65 64 00
.2b2f					ErrorV_data:
.2b2f	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2b32	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2b3a	44 61 74 61 00
.2b3f					ErrorV_redefine:
.2b3f	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2b42	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2b4a	65 64 65 66 69 6e 65 64 00
.2b53					ErrorV_index:
.2b53	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2b56	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2b5e	61 79 20 49 6e 64 65 78 00
.2b67					ErrorV_memory:
.2b67	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2b6a	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2b72	4d 65 6d 6f 72 79 00
.2b79					ErrorV_uninitialised:
.2b79	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2b7c	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2b84	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2b94					ErrorV_string:
.2b94	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2b97	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2b9f	69 6e 67 20 4c 65 6e 67 74 68 00
.2baa					ErrorV_variable:
.2baa	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2bad	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2bb5	65 20 4d 69 73 73 69 6e 67 00
.2bbf					ErrorV_stack:
.2bbf	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2bc2	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2bca	75 6c 6c 00
.2bce					ErrorV_dupproc:
.2bce	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2bd1	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2bd9	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2be9	65 64 00
.2bec					ErrorV_unknown:
.2bec	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2bef	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2bf7	20 50 72 6f 63 65 64 75 72 65 00
.2c02					ErrorV_break:
.2c02	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2c05	05 42 72 65 61 6b 00			.text	5,"Break",0
.2c0c					ErrorV_line:
.2c0c	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2c0f	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2c17	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.2c24					ErrorV_fnf:
.2c24	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2c27	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>2c2f	74 20 46 6f 75 6e 64 00
.2c37					ErrorV_full:
.2c37	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2c3a	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>2c42	20 46 75 6c 6c 00
.2c48					ErrorV_align:
.2c48	20 90 2e	jsr $2e90		jsr	ErrorHandler
>2c4b	0d 4c 61 62 65 6c 20 43			.text	13,"Label Changed",0
>2c53	68 61 6e 67 65 64 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2c5a					ERRCheckLParen:
.2c5a	b1 18		lda ($18),y			lda 	(codePtr),y
.2c5c	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2c5e	d0 18		bne $2c78			bne 	ERRSyntaxError
.2c60	c8		iny				iny
.2c61	60		rts				rts
.2c62					ERRCheckRParen:
.2c62	b1 18		lda ($18),y			lda 	(codePtr),y
.2c64	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2c66	d0 10		bne $2c78			bne 	ERRSyntaxError
.2c68	c8		iny				iny
.2c69	60		rts				rts
.2c6a					ERRCheckComma:
.2c6a	b1 18		lda ($18),y			lda 	(codePtr),y
.2c6c	c9 99		cmp #$99			cmp 	#PR_COMMA
.2c6e	d0 08		bne $2c78			bne 	ERRSyntaxError
.2c70	c8		iny				iny
.2c71	60		rts				rts
.2c72					ERRCheckA:
.2c72	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2c74	d0 02		bne $2c78			bne 	ERRSyntaxError
.2c76	c8		iny				iny
.2c77	60		rts				rts
.2c78					ERRSyntaxError:
.2c78	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2c7b					StackOpen:
.2c7b	48		pha				pha 								; save frame byte
.2c7c	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.2c7e	0a		asl a				asl 	a 							; claim twice this for storage
.2c7f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2c81	38		sec				sec 								; so basically subtracting from
.2c82	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.2c84	85 2c		sta $2c				sta 	basicStack
.2c86	b0 09		bcs $2c91			bcs 	_SONoBorrow
.2c88	c6 2d		dec $2d				dec 	basicStack+1
.2c8a	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.2c8c	cd 25 06	cmp $0625			cmp 	basicStackEnd
.2c8f	f0 04		beq $2c95			beq 	_SOMemory
.2c91					_SONoBorrow:
.2c91	68		pla				pla 								; get marker back and write at TOS
.2c92	92 2c		sta ($2c)			sta 	(basicStack)
.2c94	60		rts				rts
.2c95					_SOMemory:
.2c95	4c bf 2b	jmp $2bbf		jmp	ErrorV_stack
.2c98					StackClose:
.2c98	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2c9a	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2c9c	0a		asl a				asl 	a 							; claim twice this.
.2c9d	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.2c9f	85 2c		sta $2c				sta 	basicStack
.2ca1	90 02		bcc $2ca5			bcc 	_SCExit
.2ca3	e6 2d		inc $2d				inc 	basicStack+1
.2ca5					_SCExit:
.2ca5	60		rts				rts
.2ca6					StackCheckFrame:
.2ca6	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2ca8	d0 01		bne $2cab			bne 	_SCFError 					; different, we have structures mixed up
.2caa	60		rts				rts
.2cab					_SCFError:
.2cab	4c 03 2b	jmp $2b03		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2cae					STKSaveCodePosition:
.2cae	5a		phy				phy
.2caf	98		tya				tya 								; save Y at offset 1.
.2cb0	a0 01		ldy #$01			ldy 	#1
.2cb2	91 2c		sta ($2c),y			sta 	(basicStack),y
.2cb4	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2cb6	c8		iny				iny
.2cb7	91 2c		sta ($2c),y			sta 	(basicStack),y
.2cb9	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2cbb	c8		iny				iny
.2cbc	91 2c		sta ($2c),y			sta 	(basicStack),y
.2cbe	7a		ply				ply
.2cbf	60		rts				rts
.2cc0					STKLoadCodePosition:
.2cc0	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2cc2	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2cc4	85 19		sta $19				sta 	codePtr+1
.2cc6	88		dey				dey
.2cc7	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2cc9	85 18		sta $18				sta 	codePtr
.2ccb	88		dey				dey
.2ccc	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.2cce	a8		tay				tay
.2ccf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2cd0					StackReset:
.2cd0	48		pha				pha 								; save top of memory
.2cd1	3a		dec a				dec 	a  							; end of stack = previous byte
.2cd2	85 2d		sta $2d				sta 	basicStack+1
.2cd4	a9 ff		lda #$ff			lda 	#$FF
.2cd6	85 2c		sta $2c				sta 	basicStack
.2cd8	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2cda	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2cdc	68		pla				pla 								; allocate pages for stack.
.2cdd	38		sec				sec
.2cde	e9 02		sbc #$02			sbc 	#STACKPAGES
.2ce0	8d 25 06	sta $0625			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2ce3	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0625					basicStackEnd:
>0625							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2ce4					StringConcrete:
.2ce4	5a		phy				phy 								; save position on stack
.2ce5	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2ce7	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2ce9	b0 41		bcs $2d2c			bcs 	_SALengthError
.2ceb	18		clc				clc 								; length of the new string
.2cec	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2cee	90 02		bcc $2cf2			bcc 	_SAHaveLength
.2cf0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2cf2					_SAHaveLength:
.2cf2	48		pha				pha 								; save length to be allocated for concreting.
.2cf3	38		sec				sec
.2cf4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2cf6	6d 27 06	adc $0627			adc 	stringMemory
.2cf9	8d 27 06	sta $0627			sta 	stringMemory
.2cfc	85 28		sta $28				sta 	zTemp2 						; update storage address
.2cfe	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2d00	6d 28 06	adc $0628			adc 	stringMemory+1
.2d03	8d 28 06	sta $0628			sta 	stringMemory+1
.2d06	85 29		sta $29				sta 	zTemp2+1
.2d08	68		pla				pla 								; save length allocated in +0
.2d09	92 28		sta ($28)			sta 	(zTemp2)
.2d0b	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2d0d	a0 01		ldy #$01			ldy 	#1
.2d0f	91 28		sta ($28),y			sta 	(zTemp2),y
.2d11					_SACopyNewString:
.2d11	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2d13	a0 02		ldy #$02			ldy 	#2
.2d15	91 28		sta ($28),y			sta 	(zTemp2),y
.2d17	aa		tax				tax 								; bytes to copy
.2d18	f0 0c		beq $2d26			beq 	_SACopyExit
.2d1a	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2d1c					_SACopyNSLoop:
.2d1c	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2d1e	c8		iny				iny 								; write two on in string storage
.2d1f	c8		iny				iny
.2d20	91 28		sta ($28),y			sta 	(zTemp2),y
.2d22	88		dey				dey
.2d23	ca		dex				dex									; until copied all the string lengths.
.2d24	d0 f6		bne $2d1c			bne 	_SACopyNSLoop
.2d26					_SACopyExit:
.2d26	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2d28	a5 28		lda $28				lda 	zTemp2
.2d2a	7a		ply				ply
.2d2b	60		rts				rts
.2d2c					_SALengthError:
.2d2c	4c 94 2b	jmp $2b94		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2d2f					StringSystemInitialise:
.2d2f	3a		dec a				dec 	a 							; make last byte of previous page.
.2d30	8d 28 06	sta $0628			sta 	stringMemory+1
.2d33	85 25		sta $25				sta 	zTemp0+1
.2d35	a9 ff		lda #$ff			lda 	#$FF
.2d37	8d 27 06	sta $0627			sta 	stringMemory
.2d3a	85 24		sta $24				sta 	zTemp0
.2d3c	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2d3e	92 24		sta ($24)			sta 	(zTemp0)
.2d40	60		rts				rts
.2d41					StringSpaceInitialise:
.2d41	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2d43	8d 26 06	sta $0626			sta 	stringInitialised
.2d46	ad 27 06	lda $0627			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2d49	8d 29 06	sta $0629			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2d4c	ad 28 06	lda $0628			lda 	stringMemory+1
.2d4f	3a		dec a				dec 	a
.2d50	8d 2a 06	sta $062a			sta 	stringTempPointer+1
.2d53	20 76 13	jsr $1376			jsr 	ClearCheckMemory
.2d56	60		rts				rts
.2d57					StringTempAllocate:
.2d57	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2d59	b0 2e		bcs $2d89			bcs 	_STALength
.2d5b	2c 26 06	bit $0626			bit 	stringInitialised 			; already initialised
.2d5e	30 05		bmi $2d65			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.2d60	48		pha				pha 								; save value to subtract.
.2d61	20 41 2d	jsr $2d41			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2d64	68		pla				pla 								; restore it
.2d65					_STAAllocate:
.2d65	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2d67	18		clc				clc  								; deliberate allows one more
.2d68	6d 29 06	adc $0629			adc 	stringTempPointer 			; subtract from temp pointer
.2d6b	8d 29 06	sta $0629			sta 	stringTempPointer
.2d6e	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2d70	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2d72	ad 2a 06	lda $062a			lda 	stringTempPointer+1
.2d75	69 ff		adc #$ff			adc 	#$FF
.2d77	8d 2a 06	sta $062a			sta 	stringTempPointer+1
.2d7a	85 2f		sta $2f				sta 	zsTemp+1
.2d7c	85 09		sta $09				sta 	IFR0+IM1
.2d7e	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2d80	a9 80		lda #$80			lda 	#$80
.2d82	85 0b		sta $0b				sta 	IFR0+IExp
.2d84	a9 00		lda #$00			lda 	#0 							; clear the target string
.2d86	92 2e		sta ($2e)			sta 	(zsTemp)
.2d88	60		rts				rts
.2d89					_STALength:
.2d89	4c 94 2b	jmp $2b94		jmp	ErrorV_string
.2d8c					StringTempWrite:
.2d8c	5a		phy				phy
.2d8d	48		pha				pha
.2d8e	b2 2e		lda ($2e)			lda 	(zsTemp)
.2d90	1a		inc a				inc 	a
.2d91	92 2e		sta ($2e)			sta 	(zsTemp)
.2d93	a8		tay				tay
.2d94	68		pla				pla
.2d95	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2d97	7a		ply				ply
.2d98	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0626					stringInitialised:
>0626							.fill 	1
.0627					stringMemory:
>0627							.fill 	2
.0629					stringTempPointer:
>0629							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2d99					Command_DIR:
.2d99	5a		phy				phy
.2d9a	38		sec				sec 								; reset read
.2d9b	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2d9e	18		clc		_CDLoop:clc
.2d9f	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2da2	b0 27		bcs $2dcb			bcs 	_CDExit 					; no more
.2da4	86 24		stx $24				stx 	zTemp0
.2da6	84 25		sty $25				sty 	zTemp0+1
.2da8	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2dab					_CDPad:
.2dab	a9 20		lda #$20			lda 	#32
.2dad	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2db0	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2db3	e0 10		cpx #$10			cpx 	#16
.2db5	90 f4		bcc $2dab			bcc 	_CDPad
.2db7	a0 11		ldy #$11			ldy 	#17
.2db9	b1 24		lda ($24),y			lda 	(zTemp0),y
.2dbb	aa		tax				tax
.2dbc	88		dey				dey
.2dbd	b1 24		lda ($24),y			lda 	(zTemp0),y
.2dbf	20 b9 2e	jsr $2eb9			jsr 	WriteIntXA
.2dc2	a2 cd		ldx #$cd			ldx 	#_CDTail & $FF
.2dc4	a0 2d		ldy #$2d			ldy 	#_CDTail >> 8
.2dc6	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2dc9	80 d3		bra $2d9e			bra 	_CDLoop
.2dcb	7a		ply		_CDExit:ply
.2dcc	60		rts				rts
.2dcd					_CDTail:
>2dcd	08						.byte 	_CDTail2-*-1
>2dce	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2dd6					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2dd6					Command_ERASE:
.2dd6	20 e8 2d	jsr $2de8			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2dd9	5a		phy				phy
.2dda	a2 2b		ldx #$2b			ldx 	#FSBBlock & $FF
.2ddc	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2dde	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2de1	7a		ply				ply
.2de2	b0 01		bcs $2de5			bcs 	_CEFail
.2de4	60		rts				rts
.2de5					_CEFail:
.2de5	4c 24 2c	jmp $2c24		jmp	ErrorV_fnf
.2de8					FileSetupBlock:
.2de8	20 90 1a	jsr $1a90			jsr 	EXPEvalString 					; string to R0, zTemp0
.2deb	a5 24		lda $24				lda 	zTemp0 							; address to name
.2ded	8d 2b 06	sta $062b			sta 	FSBBlock
.2df0	a5 25		lda $25				lda 	zTemp0+1
.2df2	8d 2c 06	sta $062c			sta 	FSBBlock+1 						; zero the rest.
.2df5	9c 2d 06	stz $062d			stz 	FSBBlock+2
.2df8	9c 2e 06	stz $062e			stz 	FSBBlock+3
.2dfb	9c 2f 06	stz $062f			stz 	FSBBlock+4
.2dfe	9c 30 06	stz $0630			stz 	FSBBlock+5
.2e01	60		rts				rts
.062b					FSBBlock:
>062b							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2e02					Command_LOAD:
.2e02	20 e8 2d	jsr $2de8			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2e05	ad 1f 05	lda $051f			lda 	PGMBaseHigh 				; set load address
.2e08	8d 2e 06	sta $062e			sta 	FSBBlock+3
.2e0b	9c 2d 06	stz $062d			stz 	FSBBlock+2
.2e0e	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2e10	48		pha				pha
.2e11	20 2e 2e	jsr $2e2e			jsr	 	FileCheckSecondParam
.2e14	5a		phy				phy
.2e15	a2 2b		ldx #$2b			ldx 	#FSBBlock & $FF
.2e17	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2e19	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2e1c	7a		ply				ply
.2e1d	b0 0c		bcs $2e2b			bcs 	_CLFail
.2e1f	68		pla				pla 								; load program
.2e20	c9 99		cmp #$99			cmp 	#PR_COMMA
.2e22	f0 06		beq $2e2a			beq 	_CLNoClear
.2e24	20 30 13	jsr $1330			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2e27	4c d8 2e	jmp $2ed8			jmp 	WarmStart 					; and warm start
.2e2a					_CLNoClear:
.2e2a	60		rts				rts
.2e2b					_CLFail:
.2e2b	4c 24 2c	jmp $2c24		jmp	ErrorV_fnf
.2e2e					FileCheckSecondParam:
.2e2e	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2e30	c9 99		cmp #$99			cmp 	#PR_COMMA
.2e32	d0 0e		bne $2e42			bne 	_FCSPExit
.2e34	c8		iny				iny 								; consume
.2e35	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; get address
.2e38	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2e3a	8d 2d 06	sta $062d			sta 	FSBBlock+2
.2e3d	a5 09		lda $09				lda 	IFR0+IM1
.2e3f	8d 2e 06	sta $062e			sta 	FSBBlock+3
.2e42					_FCSPExit:
.2e42	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2e43					Command_SAVE:
.2e43	20 e8 2d	jsr $2de8			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2e46	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2e48	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2e4a	f0 22		beq $2e6e			beq 	_CLSaveBlock 				; save "Name",from,size
.2e4c	ad 1f 05	lda $051f			lda 	PGMBaseHigh 				; set load address
.2e4f	8d 2e 06	sta $062e			sta 	FSBBlock+3
.2e52	9c 2d 06	stz $062d			stz 	FSBBlock+2
.2e55	20 2b 24	jsr $242b			jsr		PGMEndProgram 				; end of program -> zTemp0
.2e58	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2e5a	d0 02		bne $2e5e			bne 	_CLNoCarry
.2e5c	e6 25		inc $25				inc 	zTemp0+1
.2e5e					_CLNoCarry:
.2e5e	a5 24		lda $24				lda 	zTemp0
.2e60	8d 2f 06	sta $062f			sta 	FSBBlock+4
.2e63	38		sec				sec
.2e64	a5 25		lda $25				lda 	zTemp0+1
.2e66	ed 2e 06	sbc $062e			sbc 	FSBBlock+3
.2e69	8d 30 06	sta $0630			sta 	FSBBlock+5
.2e6c	80 13		bra $2e81			bra 	_CSSave
.2e6e					_CLSaveBlock:
.2e6e	20 2e 2e	jsr $2e2e			jsr 	FileCheckSecondParam 		; the address to save from.
.2e71	20 6a 2c	jsr $2c6a			jsr 	ERRCheckComma
.2e74	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; get size
.2e77	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2e79	8d 2f 06	sta $062f			sta 	FSBBlock+4
.2e7c	a5 09		lda $09				lda 	IFR0+IM1
.2e7e	8d 30 06	sta $0630			sta 	FSBBlock+5
.2e81					_CSSave:
.2e81	5a		phy				phy
.2e82	a2 2b		ldx #$2b			ldx 	#FSBBlock & $FF
.2e84	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2e86	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2e89	7a		ply				ply
.2e8a	b0 01		bcs $2e8d			bcs 	_CSFail
.2e8c	60		rts				rts
.2e8d					_CSFail:
.2e8d	4c 37 2c	jmp $2c37		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2e90					ErrorHandler:
.2e90	fa		plx				plx 								; get address of msg
.2e91	7a		ply				ply
.2e92	e8		inx				inx 								; bump past RTS
.2e93	d0 01		bne $2e96			bne 	_EHNoInc
.2e95	c8		iny				iny
.2e96					_EHNoInc:
.2e96	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2e99	ad 31 06	lda $0631			lda 	ERRLine 					; direct command ?
.2e9c	0d 32 06	ora $0632			ora 	ERRLine+1 					; (e.g. no line number)
.2e9f	f0 10		beq $2eb1			beq 	_EHNoNumber
.2ea1	a2 b4		ldx #$b4			ldx 	#_EHAtMsg & $FF 			; print ' at '
.2ea3	a0 2e		ldy #$2e			ldy 	#_EHAtMsg >> 8
.2ea5	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2ea8	ad 31 06	lda $0631			lda 	ERRLine 					; line number -> XA
.2eab	ae 32 06	ldx $0632			ldx 	ERRLine+1
.2eae	20 b9 2e	jsr $2eb9			jsr 	WriteIntXA
.2eb1					_EHNoNumber:
.2eb1	4c e2 2e	jmp $2ee2			jmp 	WarmStartNewLine 			; no OK or anything.
.2eb4					_EHAtMsg:
>2eb4	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2eb9					_EHAtMsg1:
.2eb9					WriteIntXA:
.2eb9	da		phx				phx
.2eba	48		pha				pha
.2ebb	a2 08		ldx #$08			ldx 	#IFR0 						; copy into R0
.2ebd	20 4e 36	jsr $364e			jsr 	IFloatPushRx
.2ec0	68		pla				pla
.2ec1	20 01 37	jsr $3701			jsr 	IFloatSetByte
.2ec4	68		pla				pla
.2ec5	85 09		sta $09				sta 	IFR0+IM1
.2ec7	a9 0a		lda #$0a			lda 	#10 						; convert to decimal
.2ec9	20 a1 34	jsr $34a1			jsr 	IFloatIntegerToStringR0	 	; c
.2ecc	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2ecf	a2 08		ldx #$08			ldx 	#IFR0
.2ed1	20 6f 36	jsr $366f			jsr 	IFloatPullRx
.2ed4	60		rts				rts
.2ed5					NotImplemented:
.2ed5	4c b9 2a	jmp $2ab9		jmp	ErrorV_unimplemented
.0631					ERRLine:
>0631							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2ed8					WarmStart:
.2ed8	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2eda	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2edd	a9 6b		lda #$6b			lda 	#"k"
.2edf	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2ee2					WarmStartNewLine:
.2ee2	a9 0d		lda #$0d			lda 	#13
.2ee4	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2ee7					WarmStartNoPrompt:
.2ee7	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2ee9	9a		txs				txs
.2eea	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2eed	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2eee	d0 01		bne $2ef1			bne 	_WSSkip
.2ef0	c8		iny				iny
.2ef1					_WSSkip:
.2ef1	86 28		stx $28				stx 	zTemp2 						; save address for tokeniser getter.
.2ef3	84 29		sty $29				sty 	zTemp2+1
.2ef5	b2 28		lda ($28)			lda 	(zTemp2) 					; see if it's an empty line.
.2ef7	f0 ee		beq $2ee7			beq 	WarmStartNoPrompt 			; if so ignore empty line.
.2ef9	a2 2b		ldx #$2b			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2efb	a0 2f		ldy #$2f			ldy 	#TOKGetCharacter >> 8
.2efd	38		sec				sec
.2efe	20 9d 24	jsr $249d			jsr 	TOKTokenise
.2f01	b0 25		bcs $2f28			bcs 	_WSSyntax 					; error in tokenising.
.2f03	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2f06	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2f09	d0 0b		bne $2f16			bne 	_WSLineEdit 				; it's an editing command
.2f0b	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2f0d	85 18		sta $18				sta 	codePtr
.2f0f	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2f11	85 19		sta $19				sta 	codePtr+1
.2f13	4c 32 18	jmp $1832			jmp 	RUNNewLine
.2f16					_WSLineEdit:
.2f16	20 78 23	jsr $2378			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2f19	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2f1c	c9 04		cmp #$04			cmp 	#4
.2f1e	f0 03		beq $2f23			beq 	_WSNoInsert
.2f20	20 c2 23	jsr $23c2			jsr 	PGMInsertLine				; if not, maybe insert
.2f23					_WSNoInsert:
.2f23	20 30 13	jsr $1330			jsr 	ClearCode 					; clear variables etc.
.2f26	80 bf		bra $2ee7			bra 	WarmStartNoPrompt
.2f28					_WSSyntax:
.2f28	4c 77 2a	jmp $2a77		jmp	ErrorV_syntax
.2f2b					TOKGetCharacter:
.2f2b	b2 28		lda ($28)			lda 	(zTemp2)
.2f2d	90 06		bcc $2f35			bcc 	_GSNoIncrement
.2f2f	e6 28		inc $28				inc 	zTemp2
.2f31	d0 02		bne $2f35			bne 	_GSNoIncrement
.2f33	e6 29		inc $29				inc 	zTemp2+1
.2f35					_GSNoIncrement:
.2f35	c9 00		cmp #$00			cmp 	#0
.2f37	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2f38					VARArrayLookup:
.2f38	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2f3a	86 25		stx $25				stx 	zTemp0+1
.2f3c	b2 24		lda ($24)			lda 	(zTemp0)
.2f3e	48		pha				pha
.2f3f	5a		phy				phy
.2f40	a0 01		ldy #$01			ldy 	#1
.2f42	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f44	7a		ply				ply
.2f45	48		pha				pha
.2f46	20 78 1a	jsr $1a78			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2f49	68		pla				pla 								; array address to zTemp0
.2f4a	85 25		sta $25				sta 	zTemp0+1
.2f4c	68		pla				pla
.2f4d	85 24		sta $24				sta 	zTemp0
.2f4f	5a		phy				phy 								; save codePtr position.
.2f50	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2f52	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f54	48		pha				pha 								; save bit 15 on stack.
.2f55	29 7f		and #$7f			and 	#$7F
.2f57	85 26		sta $26				sta 	zTemp1
.2f59	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2f5b	d2 24		cmp ($24)			cmp 	(zTemp0)
.2f5d	a5 09		lda $09				lda 	IFR0+IM1
.2f5f	e5 26		sbc $26				sbc 	zTemp1
.2f61	b0 3a		bcs $2f9d			bcs 	_VALIndex
.2f63	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2f65	c9 40		cmp #$40			cmp 	#$40
.2f67	b0 34		bcs $2f9d			bcs 	_VALIndex
.2f69	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2f6b	26 09		rol $09				rol 	IFR0+IM1
.2f6d	fa		plx				plx 								; get msb of size -> X
.2f6e	30 04		bmi $2f74			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2f70	06 08		asl $08				asl 	IFR0+IM0
.2f72	26 09		rol $09				rol 	IFR0+IM1
.2f74					_VARNotX4:
.2f74	18		clc				clc 								; add the two for the size bytes
.2f75	a5 08		lda $08				lda 	IFR0+IM0
.2f77	69 02		adc #$02			adc 	#2
.2f79	85 08		sta $08				sta 	IFR0+IM0
.2f7b	90 02		bcc $2f7f			bcc 	_VARNoCarry1
.2f7d	e6 09		inc $09				inc 	IFR0+IM1
.2f7f					_VARNoCarry1:
.2f7f	18		clc				clc 								; calculate the element address and push to stack.
.2f80	a5 08		lda $08				lda 	IFR0+IM0
.2f82	65 24		adc $24				adc 	zTemp0
.2f84	48		pha				pha
.2f85	a5 09		lda $09				lda 	IFR0+IM1
.2f87	65 25		adc $25				adc 	zTemp0+1
.2f89	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2f8b	30 04		bmi $2f91			bmi 	_VARHasSubLevel
.2f8d	aa		tax				tax 								; address in XA
.2f8e	68		pla				pla
.2f8f	7a		ply				ply 								; restore Y and exit
.2f90	60		rts				rts
.2f91					_VARHasSubLevel:
.2f91	aa		tax				tax 								; get link address in XA
.2f92	68		pla				pla
.2f93	7a		ply				ply 								; restore code position.
.2f94	48		pha				pha
.2f95	20 6a 2c	jsr $2c6a			jsr 	ERRCheckComma 				; comma required.
.2f98	68		pla				pla
.2f99	20 38 2f	jsr $2f38			jsr 	VARArrayLookup 				; call it recursively
.2f9c	60		rts				rts
.2f9d					_VALIndex:
.2f9d	4c 53 2b	jmp $2b53		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2fa0					VARCreate:
.2fa0	5a		phy				phy
.2fa1	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space (size of variable record)
.2fa3	a2 00		ldx #$00			ldx 	#0
.2fa5	20 4d 13	jsr $134d			jsr 	AllocateMemory
.2fa8	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2faa	86 27		stx $27				stx 	zTemp1+1
.2fac	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2fae	ad 35 06	lda $0635			lda 	VARHash
.2fb1	91 26		sta ($26),y			sta 	(zTemp1),y
.2fb3	c8		iny				iny 								; put address of name into +3,+4
.2fb4	ad 33 06	lda $0633			lda 	VARNameAddress
.2fb7	91 26		sta ($26),y			sta 	(zTemp1),y
.2fb9	c8		iny				iny
.2fba	ad 34 06	lda $0634			lda 	VARNameAddress+1
.2fbd	91 26		sta ($26),y			sta 	(zTemp1),y
.2fbf	ad 36 06	lda $0636			lda 	VARType
.2fc2	29 01		and #$01			and 	#1
.2fc4	f0 06		beq $2fcc			beq 	_CVNotString
.2fc6	a0 08		ldy #$08			ldy 	#5+3
.2fc8	a9 80		lda #$80			lda 	#$80
.2fca	91 26		sta ($26),y			sta 	(zTemp1),y
.2fcc					_CVNotString:
.2fcc	ad 57 06	lda $0657			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2fcf	85 24		sta $24				sta 	zTemp0
.2fd1	ad 58 06	lda $0658			lda 	VARHashEntry+1
.2fd4	85 25		sta $25				sta 	zTemp0+1
.2fd6	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2fd8	b2 24		lda ($24)			lda 	(zTemp0)
.2fda	92 26		sta ($26)			sta 	(zTemp1)
.2fdc	b1 24		lda ($24),y			lda 	(zTemp0),y
.2fde	91 26		sta ($26),y			sta 	(zTemp1),y
.2fe0	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2fe2	92 24		sta ($24)			sta 	(zTemp0)
.2fe4	a5 27		lda $27				lda 	zTemp1+1
.2fe6	91 24		sta ($24),y			sta 	(zTemp0),y
.2fe8	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2fea	a6 27		ldx $27				ldx 	zTemp1+1
.2fec	18		clc				clc 								; add 5 to point to the data.
.2fed	69 05		adc #$05			adc 	#5
.2fef	90 01		bcc $2ff2			bcc 	_VCNoCarry
.2ff1	e8		inx				inx
.2ff2					_VCNoCarry:
.2ff2	7a		ply				ply
.2ff3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2ff4					VARFind:
.2ff4	5a		phy				phy
.2ff5	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2ff7	b1 24		lda ($24),y			lda 	(zTemp0),y
.2ff9	85 27		sta $27				sta 	zTemp1+1
.2ffb	f0 1c		beq $3019			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2ffd	b2 24		lda ($24)			lda 	(zTemp0) 					; complete the link.
.2fff	85 26		sta $26				sta 	zTemp1
.3001					_VFLoop:
.3001	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.3003	b1 26		lda ($26),y			lda 	(zTemp1),y
.3005	cd 35 06	cmp $0635			cmp 	VARHash
.3008	f0 12		beq $301c			beq 	_VFHashesMatch 				; if so, check the name.
.300a					_VFNext:
.300a	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.300c	aa		tax				tax
.300d	a0 01		ldy #$01			ldy 	#1
.300f	b1 26		lda ($26),y			lda 	(zTemp1),y
.3011	85 27		sta $27				sta 	zTemp1+1
.3013	86 26		stx $26				stx 	zTemp1
.3015	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.3017	d0 e8		bne $3001			bne 	_VFLoop
.3019					_VFExitFail:
.3019	7a		ply				ply
.301a	18		clc				clc
.301b	60		rts				rts
.301c					_VFHashesMatch:
.301c	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.301e	b1 26		lda ($26),y			lda 	(zTemp1),y
.3020	85 28		sta $28				sta 	zTemp2
.3022	c8		iny				iny
.3023	b1 26		lda ($26),y			lda 	(zTemp1),y
.3025	85 29		sta $29				sta 	zTemp2+1
.3027	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.3029					_VFNameCompLoop:
.3029	c8		iny				iny 								; char at a time
.302a	b9 37 06	lda $0637,y			lda 	VARBuffer,y
.302d	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.302f	d0 d9		bne $300a			bne 	_VFNext						; next entry if different.
.3031	c9 7c		cmp #$7c			cmp 	#$7C
.3033	90 f4		bcc $3029			bcc 	_VFNameCompLoop 			; until done the whole lot.
.3035	18		clc				clc 								; +5 is the offset of the actual data
.3036	a5 26		lda $26				lda 	zTemp1 						; word:link byte:hash word:name pointer
.3038	a6 27		ldx $27				ldx 	zTemp1+1
.303a	69 05		adc #$05			adc 	#5
.303c	90 01		bcc $303f			bcc 	_VFNNoCarry
.303e	e8		inx				inx
.303f					_VFNNoCarry:
.303f	7a		ply				ply
.3040	38		sec				sec
.3041	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.3042					VARGetInfo:
.3042	98		tya				tya 								; calculate the address of the identifier start.
.3043	18		clc				clc  								; (add Y to codePtr)
.3044	65 18		adc $18				adc 	codePtr
.3046	8d 33 06	sta $0633			sta 	VARNameAddress 				; save in VARName Address
.3049	a5 19		lda $19				lda 	codePtr+1
.304b	69 00		adc #$00			adc 	#0
.304d	8d 34 06	sta $0634			sta 	VARNameAddress+1
.3050	9c 35 06	stz $0635			stz 	VARHash
.3053	a2 00		ldx #$00			ldx 	#0
.3055					_VARCopyName:
.3055	18		clc				clc 								; update the sum hash.
.3056	ad 35 06	lda $0635			lda 	VARHash
.3059	71 18		adc ($18),y			adc 	(codePtr),y
.305b	8d 35 06	sta $0635			sta 	VARHash
.305e	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.3060	c8		iny				iny
.3061	9d 37 06	sta $0637,x			sta 	VARBuffer,x
.3064	e8		inx				inx
.3065	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.3067	90 ec		bcc $3055			bcc 	_VARCopyName
.3069	8d 36 06	sta $0636			sta 	VARType 					; save type byte
.306c	29 03		and #$03			and 	#3 							; type is 0-3
.306e	0a		asl a				asl 	a
.306f	0a		asl a				asl 	a
.3070	85 24		sta $24				sta 	zTemp0
.3072	ad 35 06	lda $0635			lda 	VARHash 					; force hash into range of hash entries per type.
.3075	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.3077	65 24		adc $24				adc 	zTemp0 						; index of hash table
.3079	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.307a	69 59		adc #$59			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.307c	85 24		sta $24				sta 	zTemp0
.307e	8d 57 06	sta $0657			sta 	VARHashEntry
.3081	a9 06		lda #$06			lda 	#VARHashTables >> 8
.3083	69 00		adc #$00			adc 	#0
.3085	85 25		sta $25				sta 	zTemp0+1
.3087	8d 58 06	sta $0658			sta 	VARHashEntry+1
.308a	60		rts				rts
.308b					VARClearHashTables:
.308b	a2 00		ldx #$00			ldx 	#0
.308d					_VCHRLoop:
.308d	a9 00		lda #$00			lda 	#0
.308f	9d 59 06	sta $0659,x			sta 	VARHashTables,x
.3092	e8		inx				inx
.3093	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.3095	d0 f6		bne $308d			bne 	_VCHRLoop
.3097	60		rts				rts
.0633					VARNameAddress:
>0633							.fill 	2
.0635					VARHash:
>0635							.fill 	1
.0636					VARType:
>0636							.fill 	1
.0637					VARBuffer:
>0637							.fill 	32
.0657					VARHashEntry:
>0657							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0659					VARHashTables:
>0659							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.3098					VARCheckSimple:
.3098	aa		tax				tax 								; save first character in X
.3099	b1 18		lda ($18),y			lda 	(codePtr),y 				; is type numeric variable.
.309b	c9 7c		cmp #$7c			cmp 	#$7C 		 				; no it's a complex variable
.309d	d0 15		bne $30b4			bne 	_VCSComplex
.309f	c8		iny				iny 								; consume the second byte, the type.
.30a0	8a		txa				txa  								; character (40-7F) x 4
.30a1	0a		asl a				asl 	a
.30a2	0a		asl a				asl  	a
.30a3	18		clc				clc 								; add to the base of 'fast variables'
.30a4	69 79		adc #$79			adc 	#FastVariables & $FF
.30a6	85 08		sta $08				sta 	IFR0+IM0
.30a8	a9 06		lda #$06			lda 	#FastVariables >> 8
.30aa	69 00		adc #$00			adc 	#0
.30ac	85 09		sta $09				sta 	IFR0+IM1
.30ae	64 0a		stz $0a				stz 	IFR0+IM2
.30b0	64 0b		stz $0b				stz 	IFR0+IExp
.30b2	38		sec				sec 								; it's a reference
.30b3	60		rts				rts
.30b4					_VCSComplex:
.30b4	88		dey				dey	 								; extract information.
.30b5	20 42 30	jsr $3042			jsr 	VARGetInfo
.30b8	20 f4 2f	jsr $2ff4			jsr 	VARFind 					; search for variable
.30bb	b0 0a		bcs $30c7			bcs 	_VCSHaveVariable			; it already exists.
.30bd	ad 36 06	lda $0636			lda 	VARType 					; error if arrays, cannot autocreate
.30c0	29 02		and #$02			and 	#2
.30c2	d0 25		bne $30e9			bne 	_VCNoCreate
.30c4	20 a0 2f	jsr $2fa0			jsr 	VARCreate 					; create variable
.30c7					_VCSHaveVariable:
.30c7	48		pha				pha 								; save LSB on the stack
.30c8	ad 36 06	lda $0636			lda 	VARType 					; get var type, and shift bit 1 into carry
.30cb	6a		ror a				ror 	a
.30cc	6a		ror a				ror 	a
.30cd	68		pla				pla 								; restore LSB
.30ce	90 08		bcc $30d8			bcc 	_VCSNotArray 				; skip if not an array
.30d0	20 38 2f	jsr $2f38			jsr 	VARArrayLookup 				; look for subscripts.
.30d3	48		pha				pha 								; check )
.30d4	20 62 2c	jsr $2c62			jsr 	ERRCheckRParen
.30d7	68		pla				pla
.30d8					_VCSNotArray:
.30d8	86 09		stx $09				stx 	IFR0+IM1 					; save address
.30da	85 08		sta $08				sta 	IFR0+IM0
.30dc	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.30de	ad 36 06	lda $0636			lda 	VARType 					; number/string bit into carry
.30e1	6a		ror a				ror 	a
.30e2	a9 00		lda #$00			lda 	#0
.30e4	6a		ror a				ror 	a 							; now $00 or $80
.30e5	85 0b		sta $0b				sta 	IFR0+IExp
.30e7	38		sec				sec 								; it's a reference
.30e8	60		rts				rts
.30e9					_VCNoCreate:
.30e9	4c 79 2b	jmp $2b79		jmp	ErrorV_uninitialised
.0679					FastVariables:
>0679							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.30ec					IFInitialise:
.30ec	9c e9 06	stz $06e9			stz 	IFStackIndex 				; reset the internal stack.
.30ef	60		rts				rts
.30f0					IFloatSubtract:
.30f0	da		phx				phx
.30f1	a2 08		ldx #$08			ldx 	#IFR0
.30f3	20 0a 37	jsr $370a			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.30f6	fa		plx				plx
.30f7					IFloatAdd:
.30f7	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.30f9	05 0b		ora $0b				ora 	IFR0+IExp
.30fb	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.30fd	d0 4e		bne $314d			bne 	_IFloatAddDecimals 			; floating point version.
.30ff					_IFAddSubMantissa:
.30ff	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.3101	45 0b		eor $0b				eor 	IFR0+IExp
.3103	29 40		and #$40			and 	#IFSign
.3105	d0 21		bne $3128			bne 	_IFloatSubMantissa			; if so, we do a subtract
.3107	18		clc				clc 								; do the actual addition
.3108	a5 08		lda $08				lda 	IFR0+IM0
.310a	75 00		adc $00,x			adc 		IM0,x
.310c	85 08		sta $08				sta 	IFR0+IM0
.310e	a5 09		lda $09				lda 	IFR0+IM1
.3110	75 01		adc $01,x			adc 		IM1,x
.3112	85 09		sta $09				sta 	IFR0+IM1
.3114	a5 0a		lda $0a				lda 	IFR0+IM2
.3116	75 02		adc $02,x			adc 		IM2,x
.3118	85 0a		sta $0a				sta 	IFR0+IM2
.311a	10 29		bpl $3145			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.311c	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.311e	20 2e 37	jsr $372e			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.3121	20 58 37	jsr $3758			jsr 	IFloatIncExponent
.3124	d0 1f		bne $3145			bne 	_IFloatAddExit
.3126	38		sec				sec 								; overflowed numerically.
.3127	60		rts				rts
.3128					_IFloatSubMantissa:
.3128	38		sec				sec 								; do the subtraction R0-Rx
.3129	a5 08		lda $08				lda 	IFR0+IM0
.312b	f5 00		sbc $00,x			sbc 		IM0,x
.312d	85 08		sta $08				sta 	IFR0+IM0
.312f	a5 09		lda $09				lda 	IFR0+IM1
.3131	f5 01		sbc $01,x			sbc 		IM1,x
.3133	85 09		sta $09				sta 	IFR0+IM1
.3135	a5 0a		lda $0a				lda 	IFR0+IM2
.3137	f5 02		sbc $02,x			sbc 		IM2,x
.3139	85 0a		sta $0a				sta 	IFR0+IM2
.313b	b0 08		bcs $3145			bcs 	_IFloatAddExit 				; no borrow so we are done.
.313d	a2 08		ldx #$08			ldx 	#IFR0
.313f	20 12 37	jsr $3712			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.3142	20 0a 37	jsr $370a			jsr 	IFloatNegate 				; negate the result using sign bit.
.3145					_IFloatAddExit:
.3145	18		clc				clc
.3146	60		rts				rts
.3147					_IFloatZeroAdd:
.3147	fa		plx				plx 								; return this value in R0
.3148	20 90 36	jsr $3690			jsr 	IFloatCopyFromRegister
.314b	18		clc				clc
.314c	60		rts				rts
.314d					_IFloatAddDecimals:
.314d	20 f8 36	jsr $36f8			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.3150	f0 f3		beq $3145			beq 	_IFloatAddExit
.3152	20 36 37	jsr $3736			jsr 	IFloatNormalise 			; normalise RX
.3155	da		phx				phx 								; normalise R0
.3156	a2 08		ldx #$08			ldx 	#IFR0
.3158	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero
.315b	f0 ea		beq $3147			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.315d	20 36 37	jsr $3736			jsr 	IFloatNormalise
.3160	fa		plx				plx
.3161	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.3163	29 3f		and #$3f			and 	#IFXMask
.3165	38		sec				sec
.3166	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.3168	85 20		sta $20				sta 	iTemp0
.316a	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.316c	29 3f		and #$3f			and 	#IFXMask
.316e	38		sec				sec
.316f	e9 20		sbc #$20			sbc 	#$20
.3171	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.3173	b0 02		bcs $3177			bcs 	_IFloatHaveLarger
.3175	a5 20		lda $20				lda 	iTemp0
.3177					_IFloatHaveLarger:
.3177	18		clc				clc 								; get the actual one back.
.3178	69 20		adc #$20			adc 	#$20 						; shift both to that.
.317a	20 87 31	jsr $3187			jsr 	_IFShiftXToA
.317d	da		phx				phx
.317e	a2 08		ldx #$08			ldx 	#IFR0
.3180	20 87 31	jsr $3187			jsr 	_IFShiftXToA
.3183	fa		plx				plx
.3184	4c ff 30	jmp $30ff			jmp 	_IFAddSubMantissa 			; do the adding bit.
.3187					_IFShiftXToA:
.3187	8d e1 06	sta $06e1			sta 	IFTarget
.318a	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero 			; check adding zero ?
.318d	f0 11		beq $31a0			beq 	_IFSXExit
.318f					_IFSXLoop:
.318f	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.3191	29 3f		and #$3f			and 	#IFXMask
.3193	cd e1 06	cmp $06e1			cmp 	IFTarget
.3196	f0 08		beq $31a0			beq 	_IFSXExit
.3198	20 2e 37	jsr $372e			jsr 	IFloatShiftRight
.319b	20 58 37	jsr $3758			jsr 	IFloatIncExponent
.319e	80 ef		bra $318f			bra 	_IFSXLoop
.31a0					_IFSXExit:
.31a0	60		rts				rts
.06e1					IFTarget:
>06e1							.fill 	1
.31a1					IFloatMultiply:
.31a1	8e e1 06	stx $06e1			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.31a4	20 59 32	jsr $3259			jsr 	IFCalculateNewSign
.31a7	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.31a9	05 0b		ora $0b				ora 	IFR0+IExp
.31ab	29 3f		and #$3f			and 	#IFXMask
.31ad	15 01		ora $01,x			ora 	IM1,x
.31af	05 09		ora $09				ora 	IFR0+IM1
.31b1	15 02		ora $02,x			ora 	IM2,x
.31b3	05 0a		ora $0a				ora 	IFR0+IM2
.31b5	d0 0a		bne $31c1			bne 	_IFMStandard
.31b7	20 db 36	jsr $36db			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.31ba	ad e3 06	lda $06e3			lda 	IFNewSign
.31bd	85 0b		sta $0b				sta 	IFR0+IExp
.31bf	18		clc				clc
.31c0	60		rts				rts
.31c1					_IFMStandard:
.31c1	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.31c3	20 50 32	jsr $3250			jsr 	IFMSignExtend
.31c6	8d e2 06	sta $06e2			sta 	IFNewExponent
.31c9	a5 0b		lda $0b				lda 	IFR0+IExp
.31cb	20 50 32	jsr $3250			jsr 	IFMSignExtend
.31ce	18		clc				clc
.31cf	6d e2 06	adc $06e2			adc 	IFNewExponent
.31d2	8d e2 06	sta $06e2			sta 	IFNewExponent
.31d5	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.31d7	20 a1 36	jsr $36a1			jsr 	IFloatCopyToRegister
.31da	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.31dc	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.31df					_IFMLoop:
.31df	a2 14		ldx #$14			ldx 	#IFRTemp
.31e1	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero
.31e4	f0 3a		beq $3220			beq 	_IFMExit
.31e6	ae e1 06	ldx $06e1			ldx 	IFTarget 					; look at adder MSB
.31e9	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.31eb	10 03		bpl $31f0			bpl	 	_IFMTargetOkay
.31ed	20 41 32	jsr $3241			jsr 	_IFMShiftAll
.31f0					_IFMTargetOkay:
.31f0	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.31f2	29 01		and #$01			and 	#1
.31f4	f0 16		beq $320c			beq 	_IFMNoAdd
.31f6	ae e1 06	ldx $06e1			ldx 	IFTarget 					; add adder
.31f9	18		clc				clc
.31fa	a5 08		lda $08				lda 	IFR0+IM0
.31fc	75 00		adc $00,x			adc 		IM0,x
.31fe	85 08		sta $08				sta 	IFR0+IM0
.3200	a5 09		lda $09				lda 	IFR0+IM1
.3202	75 01		adc $01,x			adc 		IM1,x
.3204	85 09		sta $09				sta 	IFR0+IM1
.3206	a5 0a		lda $0a				lda 	IFR0+IM2
.3208	75 02		adc $02,x			adc 		IM2,x
.320a	85 0a		sta $0a				sta 	IFR0+IM2
.320c					_IFMNoAdd:
.320c	a5 0a		lda $0a				lda 	IFR0+IM2
.320e	10 03		bpl $3213			bpl 	_IFMResultOkay
.3210	20 41 32	jsr $3241			jsr 	_IFMShiftAll
.3213					_IFMResultOkay:
.3213	a2 14		ldx #$14			ldx 	#IFRTemp
.3215	20 2e 37	jsr $372e			jsr 	IFloatShiftRight
.3218	ae e1 06	ldx $06e1			ldx 	IFTarget
.321b	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.321e	80 bf		bra $31df			bra 	_IFMLoop
.3220					_IFMExit:
.3220	ad e2 06	lda $06e2			lda 	IFNewExponent 				; validate new exponent.
.3223	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.3225	90 0f		bcc $3236			bcc 	_IFMOkay
.3227	c9 e0		cmp #$e0			cmp 	#$E0
.3229	b0 0b		bcs $3236			bcs 	_IFMOkay
.322b	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.322d	f0 10		beq $323f			beq 	_IFMError
.322f	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.3231	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.3234	18		clc				clc
.3235	60		rts				rts
.3236					_IFMOkay:
.3236	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.3238	0d e3 06	ora $06e3			ora 	IFNewSign
.323b	85 0b		sta $0b				sta 	IFR0+IExp
.323d	18		clc				clc
.323e	60		rts				rts
.323f					_IFMError:
.323f	38		sec				sec
.3240	60		rts				rts
.3241					_IFMShiftAll:
.3241	a2 08		ldx #$08			ldx 	#IFR0
.3243	20 2e 37	jsr $372e			jsr 	IFloatShiftRight
.3246	ae e1 06	ldx $06e1			ldx 	IFTarget
.3249	20 2e 37	jsr $372e			jsr 	IFloatShiftRight
.324c	ee e2 06	inc $06e2			inc 	IFNewExponent
.324f	60		rts				rts
.3250					IFMSignExtend:
.3250	29 3f		and #$3f			and 	#IFXMask
.3252	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.3254	90 02		bcc $3258			bcc 	_IFMNoSXX
.3256	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.3258					_IFMNoSXX:
.3258	60		rts				rts
.3259					IFCalculateNewSign:
.3259	b5 03		lda $03,x			lda 	IExp,x
.325b	45 0b		eor $0b				eor 	IFR0+IExp
.325d	29 40		and #$40			and 	#IFSign
.325f	8d e3 06	sta $06e3			sta 	IFNewSign
.3262	60		rts				rts
.06e2					IFNewExponent:
>06e2							.fill 	1
.06e3					IFNewSign:
>06e3							.fill 	1
.3263					IFloatDivideInteger:
.3263	20 7c 32	jsr $327c			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.3266	b0 06		bcs $326e			bcs 	_IFDIExit
.3268	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.326a	20 90 36	jsr $3690			jsr 	IFloatCopyFromRegister
.326d	18		clc				clc
.326e					_IFDIExit:
.326e	60		rts				rts
.326f					IFloatModulusInteger:
.326f	20 7c 32	jsr $327c			jsr 	IFloatDivideIntegerCommon
.3272	b0 07		bcs $327b			bcs 	_IFMIExit
.3274	ae e1 06	ldx $06e1			ldx 	IFTarget
.3277	20 90 36	jsr $3690			jsr 	IFloatCopyFromRegister
.327a	18		clc				clc
.327b					_IFMIExit:
.327b	60		rts				rts
.327c					IFloatDivideIntegerCommon:
.327c	8e e1 06	stx $06e1			stx 	IFTarget  					; this is s1, s0 = R0
.327f	20 59 32	jsr $3259			jsr 	IFCalculateNewSign 			; calculate sign of result
.3282	20 aa 32	jsr $32aa			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.3285	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.3287	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero
.328a	f0 1c		beq $32a8			beq 	_IFDIDivZero
.328c	ae e1 06	ldx $06e1			ldx 	IFTarget 					; zero Rx (S1)
.328f	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.3292	5a		phy				phy
.3293	a0 18		ldy #$18			ldy 	#24
.3295					_IFDILoop:
.3295	20 bb 32	jsr $32bb			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3298	20 c7 32	jsr $32c7			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.329b	88		dey				dey
.329c	d0 f7		bne $3295			bne 	_IFDILoop 					; do it 24 times
.329e	7a		ply				ply
.329f	ad e3 06	lda $06e3			lda 	IFNewSign 					; set sign of result.
.32a2	29 40		and #$40			and 	#IFSign
.32a4	85 17		sta $17				sta 	IFRTemp+IExp
.32a6	18		clc				clc 								; is okay.
.32a7	60		rts				rts
.32a8					_IFDIDivZero:
.32a8	38		sec				sec
.32a9	60		rts				rts
.32aa					IFDCopyRXToRTemp:
.32aa	b5 00		lda $00,x			lda 	IM0,x
.32ac	85 14		sta $14				sta 	IFRTemp+IM0
.32ae	b5 01		lda $01,x			lda 	IM1,x
.32b0	85 15		sta $15				sta 	IFRTemp+IM1
.32b2	b5 02		lda $02,x			lda 	IM2,x
.32b4	85 16		sta $16				sta 	IFRTemp+IM2
.32b6	b5 03		lda $03,x			lda 	IExp,x
.32b8	85 17		sta $17				sta 	IFRTemp+IExp
.32ba	60		rts				rts
.32bb					IFDShiftSTempS1Left:
.32bb	a2 14		ldx #$14			ldx 	#IFRTemp
.32bd	20 26 37	jsr $3726			jsr 	IFloatShiftLeft
.32c0	ae e1 06	ldx $06e1			ldx 	IFTarget
.32c3	20 27 37	jsr $3727			jsr 	IFloatRotateLeft
.32c6	60		rts				rts
.32c7					IFDTrySubtract:
.32c7	ae e1 06	ldx $06e1			ldx 	IFTarget 					; s1 = Rx
.32ca	38		sec				sec 								; subtract, saving the results on the stack.
.32cb	b5 00		lda $00,x			lda 	IM0,x
.32cd	e5 08		sbc $08				sbc 	IFR0+IM0
.32cf	48		pha				pha
.32d0	b5 01		lda $01,x			lda 	IM1,x
.32d2	e5 09		sbc $09				sbc 	IFR0+IM1
.32d4	48		pha				pha
.32d5	b5 02		lda $02,x			lda 	IM2,x
.32d7	e5 0a		sbc $0a				sbc 	IFR0+IM2
.32d9	b0 03		bcs $32de			bcs 	_IFDCanSubtract
.32db	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.32dc	68		pla				pla
.32dd	60		rts				rts
.32de					_IFDCanSubtract:
.32de	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.32e0	68		pla				pla
.32e1	95 01		sta $01,x			sta 	IM1,x
.32e3	68		pla				pla
.32e4	95 00		sta $00,x			sta 	IM0,x
.32e6	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.32e8	d0 06		bne $32f0			bne 	_IFDCSExit
.32ea	e6 15		inc $15				inc 	IFRTemp+IM1
.32ec	d0 02		bne $32f0			bne 	_IFDCSExit
.32ee	e6 16		inc $16				inc 	IFRTemp+IM2
.32f0					_IFDCSExit:
.32f0	60		rts				rts
.32f1					IFloatBitwiseAnd:
.32f1	5a		phy				phy
.32f2	20 36 33	jsr $3336			jsr 	IFPreProcessBitwise 		; set up everything.
.32f5	d0 0f		bne $3306			bne 	_IFBAExit
.32f7					_IFBALoop:
.32f7	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.32fa	35 00		and $00,x			and 	IM0,x
.32fc	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.32ff	e8		inx				inx
.3300	c8		iny				iny
.3301	c0 03		cpy #$03			cpy 	#3
.3303	d0 f2		bne $32f7			bne 	_IFBALoop
.3305	18		clc				clc
.3306					_IFBAExit:
.3306	7a		ply				ply
.3307	60		rts				rts
.3308					IFloatBitwiseOr:
.3308	5a		phy				phy
.3309	20 36 33	jsr $3336			jsr 	IFPreProcessBitwise 		; set up everything.
.330c	d0 0f		bne $331d			bne 	_IFBAExit
.330e					_IFBALoop:
.330e	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3311	15 00		ora $00,x			ora 	IM0,x
.3313	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3316	e8		inx				inx
.3317	c8		iny				iny
.3318	c0 03		cpy #$03			cpy 	#3
.331a	d0 f2		bne $330e			bne 	_IFBALoop
.331c	18		clc				clc
.331d					_IFBAExit:
.331d	7a		ply				ply
.331e	60		rts				rts
.331f					IFloatBitwiseXor:
.331f	5a		phy				phy
.3320	20 36 33	jsr $3336			jsr 	IFPreProcessBitwise 		; set up everything.
.3323	d0 0f		bne $3334			bne 	_IFBAExit
.3325					_IFBALoop:
.3325	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3328	55 00		eor $00,x			eor 	IM0,x
.332a	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.332d	e8		inx				inx
.332e	c8		iny				iny
.332f	c0 03		cpy #$03			cpy 	#3
.3331	d0 f2		bne $3325			bne 	_IFBALoop
.3333	18		clc				clc
.3334					_IFBAExit:
.3334	7a		ply				ply
.3335	60		rts				rts
.3336					IFPreProcessBitwise:
.3336	a0 00		ldy #$00			ldy 	#0 							; set index.
.3338	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.333a	15 03		ora $03,x			ora 	IExp,x
.333c	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.333e	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.3340	38		sec				sec 								; carry set just in cases.
.3341	60		rts				rts
.3342					IFloatAbsoluteR0:
.3342	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.3344	29 bf		and #$bf			and 	#IFSign ^ 255
.3346	85 0b		sta $0b				sta 	IFR0+IExp
.3348	18		clc				clc
.3349	60		rts				rts
.334a					IFloatSquareRootR0:
.334a	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.334c	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero
.334f	f0 2e		beq $337f			beq 	_IFSRZero
.3351	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.3353	29 40		and #$40			and 	#IFSign
.3355	d0 2f		bne $3386			bne 	_IFSRFail
.3357	20 36 37	jsr $3736			jsr 	IFloatNormalise 			; it will work better !
.335a	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.335c	20 a1 36	jsr $36a1			jsr 	IFloatCopyToRegister
.335f	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.3361	20 50 32	jsr $3250			jsr 	IFMSignExtend 				; sign extended version of the exponent
.3364	18		clc				clc
.3365	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.3367	85 0b		sta $0b				sta 	IFR0+IExp
.3369	4a		lsr a				lsr 	a 							; which we can halve.
.336a	38		sec				sec 								; convert back
.336b	e9 17		sbc #$17			sbc 	#23
.336d	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.336f	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.3371	20 88 33	jsr $3388			jsr 	_IFSRNewton
.3374	20 88 33	jsr $3388			jsr 	_IFSRNewton
.3377	20 88 33	jsr $3388			jsr 	_IFSRNewton
.337a	20 88 33	jsr $3388			jsr 	_IFSRNewton
.337d	18		clc				clc
.337e	60		rts				rts
.337f					_IFSRZero:
.337f	a2 08		ldx #$08			ldx 	#IFR0
.3381	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.3384	18		clc				clc
.3385	60		rts				rts
.3386					_IFSRFail:
.3386	38		sec				sec
.3387	60		rts				rts
.3388					_IFSRNewton:
.3388	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.338a	20 4e 36	jsr $364e			jsr 	IFloatPushRx
.338d	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.338f	20 4e 36	jsr $364e			jsr 	IFloatPushRx
.3392	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.3394	20 23 34	jsr $3423			jsr 	IFloatDivideFloat
.3397	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.3399	20 6f 36	jsr $366f			jsr 	IFloatPullRx
.339c	20 f7 30	jsr $30f7			jsr 	IFloatAdd 					; now guess + original/guess
.339f	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.33a1	20 2e 37	jsr $372e			jsr 	IFloatShiftRight
.33a4	a2 0c		ldx #$0c			ldx 	#IFR1
.33a6	20 6f 36	jsr $366f			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.33a9	60		rts				rts
.33aa					IFloatFractionalR0:
.33aa	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.33ac	29 3f		and #$3f			and 	#IFXMask
.33ae	f0 17		beq $33c7			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.33b0	20 42 33	jsr $3342			jsr 	IFloatAbsoluteR0 			; absolute value R0
.33b3	a2 08		ldx #$08			ldx 	#IFR0
.33b5	20 36 37	jsr $3736			jsr 	IFloatNormalise 			; normalise R0
.33b8	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.33ba	20 a1 36	jsr $36a1			jsr 	IFloatCopyToRegister
.33bd	20 00 34	jsr $3400			jsr 	IFloatIntegerR0 			; take integer part of R0
.33c0	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.33c2	20 f0 30	jsr $30f0			jsr 	IFloatSubtract
.33c5	80 05		bra $33cc			bra 	_FIPExit
.33c7					_FIPZero:
.33c7	a2 08		ldx #$08			ldx 	#IFR0
.33c9	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.33cc					_FIPExit:
.33cc	18		clc				clc
.33cd	60		rts				rts
.33ce					IFloatCompare:
.33ce	20 f0 30	jsr $30f0			jsr 	IFloatSubtract 				; subtract R0 from RX.
.33d1	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.33d3	05 0b		ora $0b				ora 	IFR0+IExp
.33d5	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.33d7	29 3f		and #$3f			and 	#IFXMask
.33d9	d0 19		bne $33f4			bne 	_IFCNonInteger
.33db	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero 			; check if zero
.33de	f0 0f		beq $33ef			beq 	_IFCZero
.33e0					_IFCReturnSign:
.33e0	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.33e2	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.33e4	48		pha				pha
.33e5	a9 01		lda #$01			lda 	#1
.33e7	20 01 37	jsr $3701			jsr 	IFloatSetByte 				; return to +1
.33ea	68		pla				pla 								; sign bit back
.33eb	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.33ed	18		clc				clc
.33ee	60		rts				rts
.33ef					_IFCZero:
.33ef	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.33f2	18		clc				clc
.33f3	60		rts				rts
.33f4					_IFCNonInteger:
.33f4	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.33f6	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.33f8	05 09		ora $09				ora 	IFR0+IM1
.33fa	05 0a		ora $0a				ora 	IFR0+IM2
.33fc	f0 f1		beq $33ef			beq 	_IFCZero 					; near enough !
.33fe	80 e0		bra $33e0			bra 	_IFCReturnSign 				; return the sign of the difference.
.3400					IFloatIntegerR0:
.3400	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.3402	29 3f		and #$3f			and 	#IFXMask
.3404	f0 1b		beq $3421			beq 	_FIPExit 					; if so do nothing
.3406	a2 08		ldx #$08			ldx 	#IFR0
.3408	20 36 37	jsr $3736			jsr 	IFloatNormalise 			; normalise
.340b	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero 			; is it zero ?
.340e	f0 0e		beq $341e			beq 	_FIPZero 					; if so return zero.
.3410					_FIPShift:
.3410	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.3412	29 20		and #$20			and 	#$20 						; still -ve
.3414	f0 0b		beq $3421			beq 	_FIPExit
.3416	20 2e 37	jsr $372e			jsr 	IFloatShiftRight 			; shift mantissa right
.3419	20 58 37	jsr $3758			jsr 	IFloatIncExponent 			; bump exponent
.341c	80 f2		bra $3410			bra 	_FIPShift
.341e					_FIPZero:
.341e	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.3421					_FIPExit:
.3421	18		clc				clc
.3422	60		rts				rts
.3423					IFloatDivideFloat:
.3423	8e e1 06	stx $06e1			stx 	IFTarget  					; this is s1, s0 = R0
.3426	20 59 32	jsr $3259			jsr 	IFCalculateNewSign 			; calculate sign of result
.3429	20 36 37	jsr $3736			jsr 	IFloatNormalise 			; normalise RX
.342c	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.342e	20 36 37	jsr $3736			jsr 	IFloatNormalise
.3431	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero
.3434	f0 56		beq $348c			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.3436	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.3438	20 50 32	jsr $3250			jsr 	IFMSignExtend
.343b	8d e2 06	sta $06e2			sta 	IFNewExponent
.343e	ae e1 06	ldx $06e1			ldx 	IFTarget 					; calculate s1.exponent
.3441	b5 03		lda $03,x			lda 	IExp,x
.3443	20 50 32	jsr $3250			jsr 	IFMSignExtend
.3446	38		sec				sec
.3447	ed e2 06	sbc $06e2			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.344a	38		sec				sec
.344b	e9 17		sbc #$17			sbc 	#23
.344d	8d e2 06	sta $06e2			sta 	IFNewExponent
.3450	20 8e 34	jsr $348e			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.3453	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.3455	10 08		bpl $345f			bpl 	_IFDFNoShiftResult
.3457	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.3459	20 2e 37	jsr $372e			jsr 	IFloatShiftRight
.345c	ee e2 06	inc $06e2			inc 	IFNewExponent
.345f					_IFDFNoShiftResult:
.345f	ad e2 06	lda $06e2			lda 	IFNewExponent 				; underflow/overflow check.
.3462	30 06		bmi $346a			bmi 	_IFDFCheckUnderflow
.3464	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.3466	b0 24		bcs $348c			bcs 	_IFDFDivZero
.3468	80 11		bra $347b			bra		_IFDFExit
.346a					_IFDFCheckUnderflow:
.346a	ad e2 06	lda $06e2			lda 	IFNewExponent 				; shift into a legal exponent.
.346d	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.346f	b0 0a		bcs $347b			bcs 	_IFDFExit
.3471	ee e2 06	inc $06e2			inc 	IFNewExponent
.3474	a2 14		ldx #$14			ldx 	#IFRTemp
.3476	20 2e 37	jsr $372e			jsr 	IFloatShiftRight
.3479	80 ef		bra $346a			bra 	_IFDFCheckUnderflow
.347b					_IFDFExit:
.347b	ad e2 06	lda $06e2			lda 	IFNewExponent 				; combine exponent and sign.
.347e	29 3f		and #$3f			and 	#IFXMask
.3480	0d e3 06	ora $06e3			ora 	IFNewSign
.3483	85 17		sta $17				sta 	IFRTemp+IExp
.3485	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.3487	20 90 36	jsr $3690			jsr 	IFloatCopyFromRegister
.348a	18		clc				clc
.348b	60		rts				rts
.348c					_IFDFDivZero:
.348c	38		sec				sec
.348d	60		rts				rts
.348e					IFloatDivideSupport:
.348e	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.3490	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.3493	5a		phy				phy 								; main division loop x 23
.3494	a0 17		ldy #$17			ldy 	#23
.3496					_IFDSLoop:
.3496	20 c7 32	jsr $32c7			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.3499	20 bb 32	jsr $32bb			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.349c	88		dey				dey
.349d	d0 f7		bne $3496			bne 	_IFDSLoop 					; do it 24 times
.349f	7a		ply				ply
.34a0	60		rts				rts
.34a1					IFloatIntegerToStringR0:
.34a1	8d e4 06	sta $06e4			sta 	IFBase 						; save base to use.
.34a4	20 80 37	jsr $3780			jsr 	IFloatBufferReset			; empty buffer
.34a7	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.34a9	29 3f		and #$3f			and 	#IFXMask
.34ab	d0 1d		bne $34ca			bne 	_IFIFail
.34ad	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.34af	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero
.34b2	f0 0e		beq $34c2			beq 	_IFINotNegative
.34b4	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.34b6	29 40		and #$40			and 	#IFSign
.34b8	f0 08		beq $34c2			beq 	_IFINotNegative
.34ba	a9 2d		lda #$2d			lda 	#"-"						; output -
.34bc	20 8f 37	jsr $378f			jsr 	IFloatBufferWrite
.34bf	20 0a 37	jsr $370a			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.34c2					_IFINotNegative:
.34c2	20 cc 34	jsr $34cc			jsr 	_IFIRecursiveConvert 		; start converting
.34c5	20 87 37	jsr $3787			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.34c8	18		clc				clc
.34c9	60		rts				rts
.34ca					_IFIFail:
.34ca	38		sec				sec
.34cb	60		rts				rts
.34cc					_IFIRecursiveConvert:
.34cc	a2 0c		ldx #$0c			ldx 	#IFR1
.34ce	20 a1 36	jsr $36a1			jsr 	IFloatCopyToRegister 		; R0->R1
.34d1	a2 08		ldx #$08			ldx 	#IFR0
.34d3	ad e4 06	lda $06e4			lda 	IFBase 						; Base -> R0
.34d6	20 01 37	jsr $3701			jsr 	IFloatSetByte
.34d9	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.34db	20 63 32	jsr $3263			jsr 	IFloatDivideInteger
.34de	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.34e0	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero
.34e3	f0 09		beq $34ee			beq 	_IFIOutDigit
.34e5	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.34e7	48		pha				pha
.34e8	20 cc 34	jsr $34cc			jsr 	_IFIRecursiveConvert 		; convert the divide result
.34eb	68		pla				pla
.34ec	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.34ee					_IFIOutDigit:
.34ee	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.34f0	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.34f2	90 02		bcc $34f6			bcc 	_IFINotHex
.34f4	69 06		adc #$06			adc 	#6
.34f6					_IFINotHex:
.34f6	69 30		adc #$30			adc 	#48
.34f8	20 8f 37	jsr $378f			jsr 	IFloatBufferWrite 			; write character to buffer.
.34fb	60		rts				rts
.06e4					IFBase:
>06e4							.fill 	1
.34fc					IFloatFloatToStringR0:
.34fc	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.34fe	20 4e 36	jsr $364e			jsr 	IFloatPushRx
.3501	20 a1 36	jsr $36a1			jsr 	IFloatCopyToRegister
.3504	20 00 34	jsr $3400			jsr 	IFloatIntegerR0				; make R0 integer
.3507	a9 0a		lda #$0a			lda 	#10 						; base 10.
.3509	20 a1 34	jsr $34a1			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.350c	9c e5 06	stz $06e5			stz 	IFloatDecimalCount 			; zero the decimal count.
.350f	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.3511	29 3f		and #$3f			and 	#IFXMask
.3513	f0 44		beq $3559			beq 	_IFFSExit
.3515					_IFloatFracLoop:
.3515	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.3517	20 90 36	jsr $3690			jsr 	IFloatCopyFromRegister
.351a	20 aa 33	jsr $33aa			jsr 	IFloatFractionalR0
.351d	20 36 37	jsr $3736			jsr 	IFloatNormalise
.3520	a2 10		ldx #$10			ldx 	#IFR2
.3522	20 a1 36	jsr $36a1			jsr 	IFloatCopyToRegister 		; copy to back R2
.3525	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.3527	a9 0a		lda #$0a			lda 	#10
.3529	20 01 37	jsr $3701			jsr 	IFloatSetByte
.352c	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.352e	20 a1 31	jsr $31a1			jsr 	IFloatMultiply
.3531	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.3533	20 a1 36	jsr $36a1			jsr 	IFloatCopyToRegister
.3536	20 00 34	jsr $3400			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.3539	ad e5 06	lda $06e5			lda 	IFloatDecimalCount 			; done 3 dp, no more
.353c	c9 03		cmp #$03			cmp 	#3
.353e	f0 16		beq $3556			beq 	_IFFSExitStripZero
.3540	ad e5 06	lda $06e5			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.3543	d0 05		bne $354a			bne 	_IFloatNotFirst
.3545	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3547	20 8f 37	jsr $378f			jsr 	IFloatBufferWrite
.354a					_IFloatNotFirst:
.354a	ee e5 06	inc $06e5			inc 	IFloatDecimalCount
.354d	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.354f	09 30		ora #$30			ora 	#"0"						; ASCII
.3551	20 8f 37	jsr $378f			jsr 	IFloatBufferWrite 			; write to the buffer.
.3554	80 bf		bra $3515			bra 	_IFloatFracLoop
.3556					_IFFSExitStripZero:
.3556	20 9e 37	jsr $379e			jsr 	IFloatStripTrailingZeros
.3559					_IFFSExit:
.3559	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.355b	20 6f 36	jsr $366f			jsr 	IFloatPullRx
.355e	20 87 37	jsr $3787			jsr 	IFloatGetBufferAddress
.3561	18		clc				clc
.3562	60		rts				rts
.06e5					IFloatDecimalCount:
>06e5							.fill 	1
.3563					IFloatStringToFloatR0:
.3563	8d e6 06	sta $06e6			sta 	IFCount 					; save length and positions out.
.3566	86 20		stx $20				stx 	iTemp0
.3568	84 21		sty $21				sty 	iTemp0+1
.356a	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.356c	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.356f	9c e7 06	stz $06e7			stz 	IFSignFlag 					; clear the sign flag
.3572	20 ff 35	jsr $35ff			jsr 	IFSTFGetNext 				; get first
.3575	f0 1b		beq $3592			beq 	_IFSTFFail 					; no character, fail.
.3577	90 10		bcc $3589			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.3579	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.357b	d0 15		bne $3592			bne 	_IFSTFFail
.357d	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.357f	8d e7 06	sta $06e7			sta 	IFSignFlag
.3582					_IFSTFLoop:
.3582	20 ff 35	jsr $35ff			jsr 	IFSTFGetNext 				; get next character
.3585	b0 0b		bcs $3592			bcs 	_IFSTFFail 					; bad character.
.3587	f0 11		beq $359a			beq 	_IFSTFExit 					; end of data
.3589					_IFSTFHaveChar:
.3589	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.358b	f0 08		beq $3595			beq 	_IFSTFDecimal
.358d	20 23 36	jsr $3623			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.3590	80 f0		bra $3582			bra 	_IFSTFLoop 					; keep going until . or end.
.3592					_IFSTFFail:
.3592	38		sec				sec
.3593	80 0d		bra $35a2			bra 	_IFSTFReturn
.3595					_IFSTFDecimal:
.3595	20 aa 35	jsr $35aa			jsr 	IFSTFDecimal 				; call the decimal places code.
.3598	b0 08		bcs $35a2			bcs 	_IFSTFReturn 				; error
.359a					_IFSTFExit:
.359a	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.359c	0d e7 06	ora $06e7			ora 	IFSignFlag
.359f	85 0b		sta $0b				sta 	IFR0+IExp
.35a1	18		clc				clc
.35a2					_IFSTFReturn:
.35a2	60		rts				rts
.35a3					IFloatAddDecimalToR0:
.35a3	8d e6 06	sta $06e6			sta 	IFCount 					; save it out.
.35a6	86 20		stx $20				stx 	iTemp0
.35a8	84 21		sty $21				sty 	iTemp0+1
.35aa					IFSTFDecimal:
.35aa	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.35ac	20 4e 36	jsr $364e			jsr 	IFloatPushRx
.35af	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.35b1	20 ff 36	jsr $36ff			jsr 	IFloatSetZero
.35b4	9c e8 06	stz $06e8			stz 	IFDecimalPlaces 			; zero DP.
.35b7					_IFSTDLoop:
.35b7	20 ff 35	jsr $35ff			jsr 	IFSTFGetNext 				; get next
.35ba	b0 41		bcs $35fd			bcs 	_IFSTFFail2 				; bad character.
.35bc	f0 11		beq $35cf			beq 	_IFSTFComplete 				; end of data, work out the result.
.35be	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.35c0	f0 39		beq $35fb			beq 	_IFSTFExit2
.35c2	20 23 36	jsr $3623			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.35c5	ee e8 06	inc $06e8			inc 	IFDecimalPlaces 			; count decimals
.35c8	ad e8 06	lda $06e8			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.35cb	c9 03		cmp #$03			cmp 	#3
.35cd	90 e8		bcc $35b7			bcc 	_IFSTDLoop
.35cf					_IFSTFComplete:
.35cf	ad e8 06	lda $06e8			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.35d2	f0 27		beq $35fb			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.35d4	3a		dec a				dec 	a 							; table indexed from 1.
.35d5	0a		asl a				asl 	a
.35d6	0a		asl a				asl 	a
.35d7	aa		tax				tax
.35d8	bd 3a 36	lda $363a,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.35db	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.35dd	bd 3b 36	lda $363b,x			lda 	TableTen+1,x
.35e0	85 0d		sta $0d				sta  	IFR1+IM1
.35e2	bd 3c 36	lda $363c,x			lda 	TableTen+2,x
.35e5	85 0e		sta $0e				sta  	IFR1+IM2
.35e7	bd 3d 36	lda $363d,x			lda 	TableTen+3,x
.35ea	85 0f		sta $0f				sta  	IFR1+IExp
.35ec	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.35ee	20 a1 31	jsr $31a1			jsr 	IFloatMultiply
.35f1	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.35f3	20 6f 36	jsr $366f			jsr 	IFloatPullRx
.35f6	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.35f8	20 f7 30	jsr $30f7			jsr 	IFloatAdd
.35fb					_IFSTFExit2:
.35fb	18		clc				clc
.35fc	60		rts				rts
.35fd					_IFSTFFail2:
.35fd	38		sec				sec
.35fe	60		rts				rts
.35ff					IFSTFGetNext:
.35ff	ad e6 06	lda $06e6			lda 	IFCount  					; if count is zero, return with Z set.
.3602	f0 19		beq $361d			beq 	_IFSTFReturnOk
.3604	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3606	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3608	d0 02		bne $360c			bne 	_IFSTFGNNoCarry
.360a	e6 21		inc $21				inc 	iTemp0+1
.360c					_IFSTFGNNoCarry:
.360c	ce e6 06	dec $06e6			dec 	IFCount 					; dec count.
.360f	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.3611	f0 08		beq $361b			beq 	_IFSTFGOkay
.3613	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3615	90 08		bcc $361f			bcc 	_IFSTFGFail
.3617	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3619	b0 04		bcs $361f			bcs 	_IFSTFGFail
.361b					_IFSTFGOkay:
.361b	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.361d					_IFSTFReturnOk:
.361d	18		clc				clc
.361e	60		rts				rts
.361f					_IFSTFGFail:
.361f	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3621	38		sec				sec
.3622	60		rts				rts
.3623					IFSTFAddR0:
.3623	29 0f		and #$0f			and 	#15 						; to int value
.3625	48		pha				pha 								; save it.
.3626	a9 0a		lda #$0a			lda 	#10
.3628	a2 0c		ldx #$0c			ldx 	#IFR1
.362a	20 01 37	jsr $3701			jsr 	IFloatSetByte
.362d	20 a1 31	jsr $31a1			jsr 	IFloatMultiply
.3630	68		pla				pla
.3631	a2 0c		ldx #$0c			ldx 	#IFR1
.3633	20 01 37	jsr $3701			jsr 	IFloatSetByte
.3636	20 f7 30	jsr $30f7			jsr 	IFloatAdd
.3639	60		rts				rts
.06e6					IFCount:
>06e6							.fill 	1
.06e7					IFSignFlag:
>06e7							.fill 	1
.06e8					IFDecimalPlaces:
>06e8							.fill 	1
.363a					TableTen:
>363a	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>363e	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>3642	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3646	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>364a	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.364e					IFloatPushRx:
.364e	5a		phy				phy
.364f	ac e9 06	ldy $06e9			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.3652	b5 00		lda $00,x			lda 	IM0,x
.3654	99 ea 06	sta $06ea,y			sta 	IFStack,y
.3657	b5 01		lda $01,x			lda 	IM1,x
.3659	99 eb 06	sta $06eb,y			sta 	IFStack+1,y
.365c	b5 02		lda $02,x			lda 	IM2,x
.365e	99 ec 06	sta $06ec,y			sta 	IFStack+2,y
.3661	b5 03		lda $03,x			lda 	IExp,x
.3663	99 ed 06	sta $06ed,y			sta 	IFStack+3,y
.3666	c8		iny				iny
.3667	c8		iny				iny
.3668	c8		iny				iny
.3669	c8		iny				iny
.366a	8c e9 06	sty $06e9			sty 	IFStackIndex 				; update SP
.366d	7a		ply				ply
.366e	60		rts				rts
.366f					IFloatPullRx:
.366f	5a		phy				phy
.3670	ac e9 06	ldy $06e9			ldy 	IFStackIndex	 			; decrement SP
.3673	88		dey				dey
.3674	88		dey				dey
.3675	88		dey				dey
.3676	88		dey				dey
.3677	b9 ea 06	lda $06ea,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.367a	95 00		sta $00,x			sta 	IM0,x
.367c	b9 eb 06	lda $06eb,y			lda 	IFStack+1,y
.367f	95 01		sta $01,x			sta 	IM1,x
.3681	b9 ec 06	lda $06ec,y			lda 	IFStack+2,y
.3684	95 02		sta $02,x			sta 	IM2,x
.3686	b9 ed 06	lda $06ed,y			lda 	IFStack+3,y
.3689	95 03		sta $03,x			sta 	IExp,x
.368b	8c e9 06	sty $06e9			sty 	IFStackIndex 				; update SP
.368e	7a		ply				ply
.368f	60		rts				rts
.06e9					IFStackIndex:
>06e9							.fill 	1
.06ea					IFStack:
>06ea							.fill 	16*4
.3690					IFloatCopyFromRegister:
.3690	b5 00		lda $00,x			lda 	0,x
.3692	85 08		sta $08				sta 	IFR0
.3694	b5 01		lda $01,x			lda 	1,x
.3696	85 09		sta $09				sta 	IFR0+1
.3698	b5 02		lda $02,x			lda 	2,x
.369a	85 0a		sta $0a				sta 	IFR0+2
.369c	b5 03		lda $03,x			lda 	3,x
.369e	85 0b		sta $0b				sta 	IFR0+3
.36a0	60		rts				rts
.36a1					IFloatCopyToRegister:
.36a1	a5 08		lda $08				lda 	IFR0
.36a3	95 00		sta $00,x			sta 	0,x
.36a5	a5 09		lda $09				lda 	IFR0+1
.36a7	95 01		sta $01,x			sta 	1,x
.36a9	a5 0a		lda $0a				lda 	IFR0+2
.36ab	95 02		sta $02,x			sta 	2,x
.36ad	a5 0b		lda $0b				lda 	IFR0+3
.36af	95 03		sta $03,x			sta 	3,x
.36b1	60		rts				rts
.36b2					IFloatLoadInline:
.36b2	68		pla				pla 								; pop address off to iTemp0
.36b3	85 20		sta $20				sta 	iTemp0
.36b5	68		pla				pla
.36b6	85 21		sta $21				sta 	iTemp0+1
.36b8	a0 01		ldy #$01			ldy 	#1
.36ba	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.36bc	95 00		sta $00,x			sta 	0,x
.36be	c8		iny				iny
.36bf	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.36c1	95 01		sta $01,x			sta 	1,x
.36c3	c8		iny				iny
.36c4	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.36c6	95 02		sta $02,x			sta 	2,x
.36c8	c8		iny				iny
.36c9	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.36cb	95 03		sta $03,x			sta 	3,x
.36cd	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.36ce	a5 20		lda $20				lda 	iTemp0
.36d0	69 05		adc #$05			adc 	#5
.36d2	85 20		sta $20				sta 	iTemp0
.36d4	90 02		bcc $36d8			bcc 	_IFLINoCarry
.36d6	e6 21		inc $21				inc 	iTemp0+1
.36d8					_IFLINoCarry:
.36d8	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.36db					IFloatMultiply8BitRx:
.36db	5a		phy		        phy
.36dc	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.36de	a4 08		ldy $08		        ldy     IFR0+IM0
.36e0	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.36e1	85 08		sta $08		        sta     IFR0+IM0
.36e3	84 09		sty $09		        sty     IFR0+IM1
.36e5	a9 00		lda #$00	        lda     #0
.36e7	a0 08		ldy #$08	        ldy     #8
.36e9					_IFMLoop:
.36e9	90 03		bcc $36ee	        bcc     _IFMNoAdd
.36eb	18		clc		        clc
.36ec	65 09		adc $09		        adc     IFR0+IM1
.36ee					_IFMNoAdd:
.36ee	6a		ror a		        ror     a
.36ef	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.36f1	88		dey		        dey
.36f2	d0 f5		bne $36e9	        bne     _IFMLoop
.36f4	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.36f6	7a		ply		        ply
.36f7	60		rts		        rts
.36f8					IFloatCheckZero:
.36f8	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.36fa	15 01		ora $01,x			ora 	IM1,x
.36fc	15 02		ora $02,x			ora 	IM2,x
.36fe	60		rts				rts
.36ff					IFloatSetZero:
.36ff	a9 00		lda #$00			lda 	#0
.3701					IFloatSetByte:
.3701	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3703	74 01		stz $01,x			stz 	IM1,x
.3705	74 02		stz $02,x			stz 	IM2,x
.3707	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3709	60		rts				rts
.370a					IFloatNegate:
.370a	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.370c	49 40		eor #$40			eor 	#IFSign
.370e	95 03		sta $03,x			sta 	IExp,x
.3710	18		clc				clc
.3711	60		rts				rts
.3712					IFloatMantissaNegate:
.3712	38		sec				sec 								; when you want a real 2's complement negative value.
.3713	a9 00		lda #$00			lda 	#0
.3715	f5 00		sbc $00,x			sbc 	IM0,x
.3717	95 00		sta $00,x			sta 	IM0,x
.3719	a9 00		lda #$00			lda 	#0
.371b	f5 01		sbc $01,x			sbc 	IM1,x
.371d	95 01		sta $01,x			sta 	IM1,x
.371f	a9 00		lda #$00			lda 	#0
.3721	f5 02		sbc $02,x			sbc 	IM2,x
.3723	95 02		sta $02,x			sta 	IM2,x
.3725	60		rts				rts
.3726					IFloatShiftLeft:
.3726	18		clc				clc
.3727					IFloatRotateLeft:
.3727	36 00		rol $00,x			rol 	IM0,x
.3729	36 01		rol $01,x			rol 	IM1,x
.372b	36 02		rol $02,x			rol 	IM2,x
.372d	60		rts				rts
.372e					IFloatShiftRight:
.372e	18		clc				clc
.372f					IFloatRotateRight:
.372f	76 02		ror $02,x			ror 	IM2,x
.3731	76 01		ror $01,x			ror 	IM1,x
.3733	76 00		ror $00,x			ror 	IM0,x
.3735	60		rts				rts
.3736					IFloatNormalise:
.3736	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero 			; is it zero
.3739	f0 18		beq $3753			beq 	_IFNExitZero 				; if so exit
.373b					_IFNLoop:
.373b	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.373d	29 c0		and #$c0			and 	#$C0
.373f	c9 40		cmp #$40			cmp 	#$40
.3741	f0 13		beq $3756			beq 	_IFNExitOkay 				; if so , then we are done.
.3743	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3745	29 3f		and #$3f			and 	#$3F
.3747	c9 20		cmp #$20			cmp 	#$20
.3749	f0 0b		beq $3756			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.374b	20 6c 37	jsr $376c			jsr 	IFloatDecExponent
.374e	20 26 37	jsr $3726			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3751	80 e8		bra $373b			bra 	_IFNLoop
.3753					_IFNExitZero:
.3753	20 ff 36	jsr $36ff			jsr 	IFloatSetZero 				; set the result to zero
.3756					_IFNExitOkay:
.3756	18		clc				clc  								; return with CC.
.3757	60		rts				rts
.3758					IFloatIncExponent:
.3758	b5 03		lda $03,x			lda 	IExp,x
.375a	48		pha				pha
.375b	29 c0		and #$c0			and 	#$C0
.375d	8d 2a 07	sta $072a			sta 	IFXTemp
.3760	68		pla				pla
.3761	1a		inc a				inc 	a
.3762	29 3f		and #$3f			and 	#$3F
.3764	48		pha				pha
.3765	0d 2a 07	ora $072a			ora 	IFXTemp
.3768	95 03		sta $03,x			sta 	IExp,x
.376a	68		pla				pla
.376b	60		rts				rts
.376c					IFloatDecExponent:
.376c	b5 03		lda $03,x			lda 	IExp,x
.376e	48		pha				pha
.376f	29 c0		and #$c0			and 	#$C0
.3771	8d 2a 07	sta $072a			sta 	IFXTemp
.3774	68		pla				pla
.3775	3a		dec a				dec 	a
.3776	29 3f		and #$3f			and 	#$3F
.3778	48		pha				pha
.3779	0d 2a 07	ora $072a			ora 	IFXTemp
.377c	95 03		sta $03,x			sta 	IExp,x
.377e	68		pla				pla
.377f	60		rts				rts
.072a					IFXTemp:
>072a							.fill 	1
.3780					IFloatBufferReset:
.3780	9c 2b 07	stz $072b			stz 	IFBufferCount
.3783	9c 2c 07	stz $072c			stz 	IFBuffer
.3786	60		rts				rts
.3787					IFloatGetBufferAddress:
.3787	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.3789	a2 2b		ldx #$2b			ldx 	#(IFBufferCount & $FF)
.378b	ad 2b 07	lda $072b			lda 	IFBufferCount
.378e	60		rts				rts
.378f					IFloatBufferWrite:
.378f	da		phx				phx
.3790	ae 2b 07	ldx $072b			ldx 	IFBufferCount
.3793	9d 2c 07	sta $072c,x			sta 	IFBuffer,x
.3796	9e 2d 07	stz $072d,x			stz 	IFBuffer+1,x
.3799	ee 2b 07	inc $072b			inc 	IFBufferCount
.379c	fa		plx				plx
.379d	60		rts				rts
.379e					IFloatStripTrailingZeros:
.379e	ae 2b 07	ldx $072b			ldx 	IFBufferCount
.37a1	bd 2b 07	lda $072b,x			lda 	IFBuffer-1,x
.37a4	c9 30		cmp #$30			cmp		#"0"
.37a6	d0 0f		bne $37b7			bne 	_IFSTExit
.37a8	bd 2a 07	lda $072a,x			lda 	IFBuffer-2,x
.37ab	c9 2e		cmp #$2e			cmp 	#"."
.37ad	f0 08		beq $37b7			beq 	_IFSTExit
.37af	ce 2b 07	dec $072b			dec 	IFBufferCount
.37b2	9e 2b 07	stz $072b,x			stz 	IFBuffer-1,x
.37b5	80 e7		bra $379e			bra 	IFloatStripTrailingZeros
.37b7					_IFSTExit:
.37b7	60		rts				rts
.072b					IFBufferCount:
>072b							.fill 	1
.072c					IFBuffer:
>072c							.fill 	25
.37b8					IFloatCheckRange:
.37b8	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.37ba	09 40		ora #$40			ora 	#IFSign
.37bc	85 0b		sta $0b				sta 	IFR0+IExp
.37be	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.37c0	20 f7 30	jsr $30f7			jsr 	IFloatAdd 					; add allowed to error.
.37c3	a2 08		ldx #$08			ldx 	#IFR0
.37c5	20 f8 36	jsr $36f8			jsr 	IFloatCheckZero 			; error if < 0
.37c8	f0 06		beq $37d0			beq 	_IFAOkay
.37ca	a5 0b		lda $0b				lda 	IFR0+IExp
.37cc	29 40		and #$40			and 	#IFSign
.37ce	d0 01		bne $37d1			bne 	_IFAFail
.37d0					_IFAOkay:
.37d0	60		rts				rts
.37d1					_IFAFail:
.37d1	38		sec				sec
.37d2	68		pla				pla 								; get address - 2
.37d3	e9 02		sbc #$02			sbc 	#2
.37d5	aa		tax				tax
.37d6	68		pla				pla
.37d7	e9 00		sbc #$00			sbc 	#0
.37d9	a8		tay				tay
.37da	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.37dc					_IFAStop:
>37dc	db						.byte 	$DB 						; display an error AA ADR ADR
.37dd	80 fd		bra $37dc			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
