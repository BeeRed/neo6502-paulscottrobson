
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Tue Jun 27 19:42:36 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 6a 1f	jsr $1f6a			jsr 	PGMSetBaseAddress
.1007	20 e8 2a	jsr $2ae8			jsr 	IFInitialise 				; setup math library
.100a	4c 05 14	jmp $1405			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_STANDARD_LAST = $a1
=$a1					PR_DATA = $a1
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; get a number to assert
.1010	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1012	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail 					; if so, the assert fails.
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c f3 25	jmp $25f3		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.101d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.101f	f0 14		beq $1035			beq 	_CLNoParam
.1021	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1023	f0 10		beq $1035			beq 	_CLNoParam
.1025	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; address for CLEAR
.1028	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102a	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102c	b0 0b		bcs $1039			bcs 	_CLMemory
.102e	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1030	90 07		bcc $1039			bcc 	_CLMemory
.1032	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1035					_CLNoParam:
.1035	20 3c 10	jsr $103c			jsr 	ClearCode
.1038	60		rts				rts
.1039					_CLMemory:
.1039	4c 8d 26	jmp $268d		jmp	ErrorV_memory
.103c					ClearCode:
.103c	20 7d 1f	jsr $1f7d			jsr 	PGMEndProgram 				; end program => zTemp0
.103f	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1041	a5 23		lda $23				lda 	zTemp0+1 					; for variables.
.1043	1a		inc a				inc 	a
.1044	85 29		sta $29				sta 	freeMemory+1
.1046	20 87 2a	jsr $2a87			jsr 	VARClearHashTables
.1049	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.104c	20 c1 27	jsr $27c1			jsr 	StackReset 					; page passed on in A
.104f	20 20 28	jsr $2820			jsr 	StringSystemInitialise
.1052	20 08 25	jsr $2508			jsr 	ScanProcedures
.1055	20 8f 14	jsr $148f			jsr 	Command_RESTORE
.1058	60		rts				rts
.1059					AllocateMemory:
.1059	5a		phy				phy 								; save Y
.105a	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low (of final memory)
.105c	5a		phy				phy
.105d	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.105f	5a		phy				phy
.1060	a8		tay				tay 								; count is now in XY
.1061					_AllocateLoop:
.1061	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1063	d0 04		bne $1069			bne 	_AllocateOne
.1065	c0 00		cpy #$00			cpy 	#0
.1067	f0 15		beq $107e			beq 	_AllocateExit
.1069					_AllocateOne:
.1069	a9 00		lda #$00			lda 	#0 							; zero byte
.106b	92 28		sta ($28)			sta 	(freeMemory)
.106d	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.106f	d0 05		bne $1076			bne 	_AllocateSkipCarry
.1071	e6 29		inc $29				inc 	freeMemory+1
.1073	20 82 10	jsr $1082			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.1076					_AllocateSkipCarry:
.1076	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1078	d0 01		bne $107b			bne 	_AllocateSkipBorrow
.107a	ca		dex				dex
.107b					_AllocateSkipBorrow:
.107b	88		dey				dey
.107c	80 e3		bra $1061			bra 	_AllocateLoop
.107e					_AllocateExit:
.107e	fa		plx				plx 								; restore address
.107f	68		pla				pla
.1080	7a		ply				ply 								; restore Y
.1081	60		rts				rts
.1082					ClearCheckMemory:
.1082	a5 29		lda $29				lda 	freeMemory+1 				; allocatable memory
.1084	1a		inc a				inc 	a 							; spacing 2 pages
.1085	1a		inc a				inc 	a
.1086	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.1089	b0 01		bcs $108c			bcs  	_CCMError
.108b	60		rts				rts
.108c					_CCMError:
.108c	4c 8d 26	jmp $268d		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.108f					CommandDIM:
.108f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1091	29 c0		and #$c0			and 	#$C0
.1093	c9 40		cmp #$40			cmp 	#$40
.1095	d0 39		bne $10d0			bne 	_CDSyntax
.1097	20 3e 2a	jsr $2a3e			jsr 	VARGetInfo 					; get information
.109a	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.109d	29 02		and #$02			and 	#2
.109f	f0 2f		beq $10d0			beq 	_CDSyntax
.10a1	20 f0 29	jsr $29f0			jsr 	VARFind 					; does it already exist
.10a4	b0 2d		bcs $10d3			bcs 	_CDExists
.10a6	20 9c 29	jsr $299c			jsr 	VARCreate 					; create it - returns data ptr in XA
.10a9	da		phx				phx 								; save target address
.10aa	48		pha				pha
.10ab	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10ae	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b0	20 d6 10	jsr $10d6			jsr 	CreateArray 				; create array to XA
.10b3	84 24		sty $24				sty 	zTemp1 						; save Y
.10b5	7a		ply				ply 								; restore target to zTemp0
.10b6	84 22		sty $22				sty 	zTemp0
.10b8	7a		ply				ply
.10b9	84 23		sty $23				sty 	zTemp0+1
.10bb	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10bd	a0 01		ldy #$01			ldy 	#1
.10bf	8a		txa				txa
.10c0	91 22		sta ($22),y			sta 	(zTemp0),y
.10c2	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10c4	20 52 27	jsr $2752			jsr 	ERRCheckRParen 				; check )
.10c7	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10c9	c8		iny				iny
.10ca	c9 99		cmp #$99			cmp 	#PR_COMMA
.10cc	f0 c1		beq $108f			beq 	CommandDIM
.10ce	88		dey				dey
.10cf	60		rts				rts
.10d0					_CDSyntax:
.10d0	4c 9d 25	jmp $259d		jmp	ErrorV_syntax
.10d3					_CDExists:
.10d3	4c 65 26	jmp $2665		jmp	ErrorV_redefine
.10d6					CreateArray:
.10d6	8d 03 05	sta $0503			sta 	CAType						; save type
.10d9	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10dc	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10de	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e0	f0 04		beq $10e6			beq 	_CATwoDimensions
.10e2	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e5	60		rts				rts
.10e6					_CATwoDimensions:
.10e6	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10e8	8d 05 05	sta $0505			sta 	CADim1+1
.10eb	a5 08		lda $08				lda 	IFR0+IM0
.10ed	8d 04 05	sta $0504			sta 	CADim1+0
.10f0	20 5a 27	jsr $275a			jsr 	ERRCheckComma 				; check comma
.10f3	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f6	5a		phy				phy 								; save Y position
.10f7	18		clc				clc 								; allocate the outer array of pointers.
.10f8	ae 05 05	ldx $0505			ldx 	CADim1+1
.10fb	ad 04 05	lda $0504			lda 	CADim1
.10fe	20 71 11	jsr $1171			jsr 	CSAAllocate 				; allocate the outer array
.1101	da		phx				phx									; save this address on the stack
.1102	48		pha				pha
.1103	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.1105	85 26		sta $26				sta 	zTemp2
.1107					_CACreateSubLoop:
.1107	38		sec				sec
.1108	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create data array of required size.
.110b	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.110d	91 26		sta ($26),y			sta 	(zTemp2),y
.110f	8a		txa				txa
.1110	c8		iny				iny
.1111	91 26		sta ($26),y			sta 	(zTemp2),y
.1113	18		clc				clc  								; next slot.
.1114	a5 26		lda $26				lda 	zTemp2
.1116	69 02		adc #$02			adc 	#2
.1118	85 26		sta $26				sta 	zTemp2
.111a	90 02		bcc $111e			bcc 	_CACNoCarry
.111c	e6 27		inc $27				inc 	zTemp2+1
.111e					_CACNoCarry:
.111e	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1121	d0 03		bne $1126			bne 	_CACNoBorrow
.1123	ce 05 05	dec $0505			dec 	CADim1+1
.1126					_CACNoBorrow:
.1126	ce 04 05	dec $0504			dec 	CADim1
.1129	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.112c	10 d9		bpl $1107			bpl 	_CACreateSubLoop
.112e	68		pla				pla
.112f	fa		plx				plx
.1130	7a		ply				ply
.1131	60		rts				rts
.1132					CreateSingleArray:
.1132	5a		phy				phy
.1133	38		sec				sec 								; allocate memory block all zeros.
.1134	a5 08		lda $08				lda 	IFR0+IM0
.1136	a6 09		ldx $09				ldx 	IFR0+IM1
.1138	20 71 11	jsr $1171			jsr 	CSAAllocate
.113b	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.113e	f0 2f		beq $116f			beq 	_CSANoInit
.1140	da		phx				phx 								; save address of new array
.1141	48		pha				pha
.1142	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1144	86 23		stx $23				stx 	zTemp0+1
.1146	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1148	b1 22		lda ($22),y			lda 	(zTemp0),y
.114a	a8		tay				tay
.114b	b2 22		lda ($22)			lda 	(zTemp0)
.114d	aa		tax				tax
.114e					_CSAEraseString:
.114e	5a		phy				phy
.114f	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1151	a9 80		lda #$80			lda 	#$80
.1153	91 22		sta ($22),y			sta 	(zTemp0),y
.1155	7a		ply				ply
.1156	18		clc				clc 								; add 4 to next slot.
.1157	a5 22		lda $22				lda 	zTemp0
.1159	69 04		adc #$04			adc 	#4
.115b	85 22		sta $22				sta 	zTemp0
.115d	90 02		bcc $1161			bcc 	_CSAENoCarry
.115f	e6 23		inc $23				inc 	zTemp0+1
.1161					_CSAENoCarry:
.1161	e0 00		cpx #$00			cpx 	#0
.1163	d0 01		bne $1166			bne 	_CSANoBorrow
.1165	88		dey				dey
.1166					_CSANoBorrow:
.1166	ca		dex				dex
.1167	d0 e5		bne $114e			bne 	_CSAEraseString
.1169	c0 00		cpy #$00			cpy 	#0
.116b	d0 e1		bne $114e			bne 	_CSAEraseString
.116d	68		pla				pla
.116e	fa		plx				plx
.116f					_CSANoInit:
.116f	7a		ply				ply
.1170	60		rts				rts
.1171					CSAAllocate:
.1171	08		php				php 								; save type flag.
.1172	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1173	d0 01		bne $1176			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1175	e8		inx				inx
.1176					_CSAANoCarry:
.1176	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1178	b0 2e		bcs $11a8			bcs 	_CSARange
.117a	28		plp				plp 								; restore type flag
.117b	08		php				php 								; save it back again.
.117c	da		phx				phx 								; save size.
.117d	48		pha				pha
.117e	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1180	90 03		bcc $1185			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1182	0a		asl a				asl 	a
.1183	26 23		rol $23				rol 	zTemp0+1
.1185					_CSAATimes2:
.1185	0a		asl a				asl 	a
.1186	26 23		rol $23				rol 	zTemp0+1
.1188	18		clc				clc
.1189	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.118b	90 02		bcc $118f			bcc 	_CSAANoCarry2
.118d	e6 23		inc $23				inc 	zTemp0+1
.118f					_CSAANoCarry2:
.118f	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1191	20 59 10	jsr $1059			jsr 	AllocateMemory 				; allocate memory to XA
.1194	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1196	85 22		sta $22				sta 	zTemp0
.1198	68		pla				pla  								; write element count to first 2 bytes
.1199	92 22		sta ($22)			sta 	(zTemp0)
.119b	68		pla				pla 								; msb of element count
.119c	28		plp				plp 								; CC if pointer array
.119d	b0 02		bcs $11a1			bcs 	_CSAAIsData
.119f	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a1					_CSAAIsData:
.11a1	a0 01		ldy #$01			ldy 	#1
.11a3	91 22		sta ($22),y			sta 	(zTemp0),y
.11a5	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11a7	60		rts				rts
.11a8					_CSARange:
.11a8	4c ae 25	jmp $25ae		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11ab					Command_Doke:
.11ab	38		sec				sec
.11ac	80 01		bra $11af			bra 	DPCommon
.11ae					Command_Poke:
.11ae	18		clc				clc
.11af					DPCommon:
.11af	08		php				php 								; CS if DOKE
.11b0	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; address
.11b3	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b5	48		pha				pha
.11b6	a5 09		lda $09				lda 	IFR0+IM1
.11b8	48		pha				pha
.11b9	20 5a 27	jsr $275a			jsr 	ERRCheckComma 				; [dp]oke address,data
.11bc	20 15 17	jsr $1715			jsr 	EXPEvalInteger16
.11bf	68		pla				pla 								; get address back
.11c0	85 23		sta $23				sta 	zTemp0+1
.11c2	68		pla				pla
.11c3	85 22		sta $22				sta 	zTemp0
.11c5	a5 08		lda $08				lda 	IFR0+IM0
.11c7	92 22		sta ($22)			sta 	(zTemp0)
.11c9	28		plp				plp
.11ca	90 08		bcc $11d4			bcc 	_DPExit
.11cc	5a		phy				phy
.11cd	a5 09		lda $09				lda 	IFR0+IM1
.11cf	a0 01		ldy #$01			ldy 	#1
.11d1	91 22		sta ($22),y			sta 	(zTemp0),y
.11d3	7a		ply				ply
.11d4					_DPExit:
.11d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11d5					Command_GOTO:
.11d5	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; get line number
.11d8					GotoR0:
.11d8	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11db	85 19		sta $19				sta 	codePtr+1
.11dd	64 18		stz $18				stz 	codePtr
.11df					_GOSearch:
.11df	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e1	f0 1f		beq $1202			beq 	_GOError
.11e3	a0 01		ldy #$01			ldy 	#1 							; found line #
.11e5	b1 18		lda ($18),y			lda 	(codePtr),y
.11e7	c5 08		cmp $08				cmp 	IFR0+IM0
.11e9	d0 0a		bne $11f5			bne 	_GONext
.11eb	c8		iny				iny
.11ec	b1 18		lda ($18),y			lda 	(codePtr),y
.11ee	c5 09		cmp $09				cmp 	IFR0+IM1
.11f0	d0 03		bne $11f5			bne 	_GONext
.11f2	4c d4 14	jmp $14d4			jmp 	RUNNewLine
.11f5					_GONext:
.11f5	18		clc				clc 								; advance to next line.
.11f6	b2 18		lda ($18)			lda 	(codePtr)
.11f8	65 18		adc $18				adc 	codePtr
.11fa	85 18		sta $18				sta 	codePtr
.11fc	90 e1		bcc $11df			bcc 	_GOSearch
.11fe	e6 19		inc $19				inc 	codePtr+1
.1200	80 dd		bra $11df			bra 	_GOSearch
.1202					_GOError:
.1202	4c 32 27	jmp $2732		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1205					Command_Input:
.1205	a9 ff		lda #$ff			lda 	#$FF
.1207	8d 06 05	sta $0506			sta 	InputFlag
.120a	80 03		bra $120f			bra 	Command_IP_Main
.120c					Command_Print:
.120c	9c 06 05	stz $0506			stz 	InputFlag
.120f					Command_IP_Main:
.120f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1210					_CPLoop:
.1210	08		php				php 								; save last action flag
.1211	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1213	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1215	f0 4e		beq $1265			beq 	_CPExit 					; without consuming
.1217	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1219	f0 4a		beq $1265			beq 	_CPExit
.121b	68		pla				pla 								; throw last action flag
.121c	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.121e	c8		iny				iny
.121f	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1221	f0 3f		beq $1262			beq 	_CPContinueWithSameLine
.1223	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1225	f0 36		beq $125d			beq 	_CPTab
.1227	88		dey				dey 								; undo the get.
.1228	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.122b	10 0b		bpl $1238			bpl	 	_CPNotInput
.122d	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.122f	c9 40		cmp #$40			cmp 	#$40
.1231	d0 05		bne $1238			bne 	_CPNotInput
.1233	20 6e 12	jsr $126e			jsr 	_CPInputCode 				; input code
.1236	80 d7		bra $120f			bra 	Command_IP_Main 			; and go round again.
.1238					_CPNotInput:
.1238	20 c3 16	jsr $16c3			jsr 	EXPEvaluateExpression 		; evaluate expression.
.123b	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.123d	10 14		bpl $1253			bpl 	_CPNumber
.123f	5a		phy				phy
.1240	18		clc				clc 								; string address to YX
.1241	a5 08		lda $08				lda 	IFR0+IM0
.1243	aa		tax				tax
.1244	a5 09		lda $09				lda 	IFR0+IM1
.1246	a8		tay				tay
.1247	e8		inx				inx 								; point to 1st character
.1248	d0 01		bne $124b			bne 	_CPNoCarry
.124a	c8		iny				iny
.124b					_CPNoCarry:
.124b	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.124d	20 a2 12	jsr $12a2			jsr 	CPPrintAYX 					; print AYX
.1250	7a		ply				ply
.1251	80 bc		bra $120f			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1253					_CPNumber:
.1253	5a		phy				phy
.1254	20 f8 2e	jsr $2ef8			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.1257	20 a2 12	jsr $12a2			jsr 	CPPrintAYX 					; print AYX
.125a	7a		ply				ply
.125b	80 b2		bra $120f			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.125d					_CPTab:
.125d	a9 09		lda #$09			lda 	#9 							; print TAB
.125f	20 b8 12	jsr $12b8			jsr 	CPPrintA
.1262					_CPContinueWithSameLine:
.1262	38		sec				sec 								; loop round with carry set, which
.1263	80 ab		bra $1210			bra 	_CPLoop 					; will inhibit final CR
.1265					_CPExit:
.1265	28		plp				plp 								; get last action flag
.1266	b0 05		bcs $126d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1268	a9 0d		lda #$0d			lda 	#13 						; print new line
.126a	20 b8 12	jsr $12b8			jsr 	CPPrintA
.126d					_CPExit2:
.126d	60		rts				rts
.126e					_CPInputCode:
.126e	20 8b 17	jsr $178b			jsr 	EXPTermR0 					; get the term.
.1271	5a		phy				phy 								; save position
.1272	20 b5 12	jsr $12b5			jsr 	CPInputA					; input a line to YX
.1275	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1277	30 18		bmi $1291			bmi 	_CPInputString
.1279	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.127b	48		pha				pha
.127c	a5 09		lda $09				lda 	IFR0+IM1
.127e	48		pha				pha
.127f	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1281	84 23		sty $23				sty 	zTemp0+1
.1283	20 74 1a	jsr $1a74			jsr 	VALConversionZTemp0
.1286	68		pla				pla 								; do the assign.
.1287	85 23		sta $23				sta 	zTemp0+1
.1289	68		pla				pla
.128a	85 22		sta $22				sta 	zTemp0
.128c	20 e0 12	jsr $12e0			jsr 	AssignNumber
.128f	7a		ply				ply
.1290	60		rts				rts
.1291					_CPInputString:
.1291	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1293	85 22		sta $22				sta 	zTemp0
.1295	a5 09		lda $09				lda 	IFR0+IM1
.1297	85 23		sta $23				sta 	zTemp0+1
.1299	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.129b	84 09		sty $09				sty 	IFR0+IM1
.129d	20 f7 12	jsr $12f7			jsr 	AssignString 				; assign the string
.12a0	7a		ply				ply 								; exit
.12a1	60		rts				rts
.12a2					CPPrintAYX:
.12a2	86 22		stx $22				stx 	zTemp0
.12a4	84 23		sty $23				sty 	zTemp0+1
.12a6	aa		tax				tax
.12a7	f0 0b		beq $12b4			beq 	_CPPrintExit
.12a9	a0 00		ldy #$00			ldy 	#0
.12ab					_CPPrintAYXLoop:
.12ab	b1 22		lda ($22),y			lda 	(zTemp0),y
.12ad	20 b8 12	jsr $12b8			jsr 	CPPrintA
.12b0	c8		iny				iny
.12b1	ca		dex				dex
.12b2	d0 f7		bne $12ab			bne 	_CPPrintAYXLoop
.12b4					_CPPrintExit:
.12b4	60		rts				rts
.12b5					CPInputA:
.12b5	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.12b8					CPPrintA:
.12b8	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12bb					CommandLET:
.12bb	20 8b 17	jsr $178b			jsr 	EXPTermR0 					; get term
.12be	90 6f		bcc $132f			bcc 	CLError 					; must be a reference term.
.12c0	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12c2	48		pha				pha
.12c3	a5 09		lda $09				lda 	IFR0+IM1
.12c5	48		pha				pha
.12c6	a5 0b		lda $0b				lda 	IFR0+IExp
.12c8	48		pha				pha
.12c9	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12cb	20 62 27	jsr $2762			jsr 	ERRCheckA
.12ce	20 c3 16	jsr $16c3			jsr 	EXPEvaluateExpression 		; right hand side.
.12d1	68		pla				pla 								; type of l-expr
.12d2	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d4	30 5c		bmi $1332			bmi 	CLType
.12d6	fa		plx				plx 	 							; pop target address to zTemp0
.12d7	86 23		stx $23				stx 	zTemp0+1
.12d9	fa		plx				plx
.12da	86 22		stx $22				stx 	zTemp0
.12dc					AssignData:
.12dc	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12de	30 17		bmi $12f7			bmi 	AssignString
.12e0					AssignNumber:
.12e0	5a		phy				phy
.12e1	a0 03		ldy #$03			ldy 	#3
.12e3	a5 0b		lda $0b				lda 	IFR0+IExp
.12e5	91 22		sta ($22),y			sta 	(zTemp0),y
.12e7	88		dey				dey
.12e8	a5 0a		lda $0a				lda 	IFR0+IM2
.12ea	91 22		sta ($22),y			sta 	(zTemp0),y
.12ec	88		dey				dey
.12ed	a5 09		lda $09				lda 	IFR0+IM1
.12ef	91 22		sta ($22),y			sta 	(zTemp0),y
.12f1	a5 08		lda $08				lda 	IFR0+IM0
.12f3	92 22		sta ($22)			sta 	(zTemp0)
.12f5	7a		ply				ply
.12f6	60		rts				rts
.12f7					AssignString:
.12f7	5a		phy				phy
.12f8	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12fa	b1 22		lda ($22),y			lda 	(zTemp0),y
.12fc	12 22		ora ($22)			ora 	(zTemp0)
.12fe	f0 23		beq $1323			beq 	_CLConcreteString
.1300	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1302	85 24		sta $24				sta 	zTemp1
.1304	b1 22		lda ($22),y			lda 	(zTemp0),y
.1306	85 25		sta $25				sta 	zTemp1+1
.1308	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.130a	38		sec				sec 								; we want 3 for slot size, status, string size.
.130b	e9 03		sbc #$03			sbc 	#3
.130d	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.130f	90 12		bcc $1323			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1311	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1313	1a		inc a				inc 	a
.1314	aa		tax				tax
.1315	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1317					_CLReplaceString:
.1317	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1319	c8		iny				iny
.131a	c8		iny				iny
.131b	91 24		sta ($24),y			sta 	(zTemp1),y
.131d	88		dey				dey
.131e	ca		dex				dex
.131f	d0 f6		bne $1317			bne 	_CLReplaceString
.1321	80 0a		bra $132d			bra 	_CLExit
.1323					_CLConcreteString:
.1323	20 d5 27	jsr $27d5			jsr 	StringConcrete  			; concreted string in XA.
.1326	a0 01		ldy #$01			ldy 	#1 							; store the address
.1328	92 22		sta ($22)			sta 	(zTemp0)
.132a	8a		txa				txa
.132b	91 22		sta ($22),y			sta 	(zTemp0),y
.132d					_CLExit:
.132d	7a		ply				ply
.132e	60		rts				rts
.132f					CLError:
.132f	4c d0 26	jmp $26d0		jmp	ErrorV_variable
.1332					CLType:
.1332	4c cd 25	jmp $25cd		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1335					Command_LIST:
.1335	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1338	9c 08 05	stz $0508			stz 	CLFrom+1
.133b	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.133d	c9 99		cmp #$99			cmp 	#PR_COMMA
.133f	f0 1d		beq $135e			beq 	_CLToLine
.1341	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1343	f0 37		beq $137c			beq 	_CLDefaultTo
.1345	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1348	a5 08		lda $08				lda 	IFR0+IM0
.134a	8d 07 05	sta $0507			sta 	CLFrom
.134d	8d 09 05	sta $0509			sta 	CLTo
.1350	a5 09		lda $09				lda 	IFR0+IM1
.1352	8d 08 05	sta $0508			sta 	CLFrom+1
.1355	8d 0a 05	sta $050a			sta 	CLTo+1
.1358	b1 18		lda ($18),y			lda 	(codePtr),y
.135a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.135c	f0 26		beq $1384			beq 	_CLList
.135e					_CLToLine:
.135e	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1360	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1362	f0 18		beq $137c			beq 	_CLDefaultTo
.1364	20 5a 27	jsr $275a			jsr 	ERRCheckComma 				; sep comma
.1367	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1369	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.136b	f0 0f		beq $137c			beq 	_CLDefaultTo
.136d	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; there's a To value.
.1370	a5 08		lda $08				lda 	IFR0+IM0
.1372	8d 09 05	sta $0509			sta 	CLTo
.1375	a5 09		lda $09				lda 	IFR0+IM1
.1377	8d 0a 05	sta $050a			sta 	CLTo+1
.137a	80 08		bra $1384			bra 	_CLList
.137c					_CLDefaultTo:
.137c	a9 ff		lda #$ff			lda 	#$FF
.137e	8d 09 05	sta $0509			sta 	CLTo
.1381	8d 0a 05	sta $050a			sta 	CLTo+1
.1384					_CLList:
.1384	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1387	85 19		sta $19				sta 	codePtr+1
.1389	64 18		stz $18				stz 	codePtr
.138b	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.138d	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.138f	20 cc 1d	jsr $1dcc			jsr 	TOKSetDetokeniseOutput
.1392					_CLLoop:
.1392	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1394	f0 4a		beq $13e0			beq 	_CLExit
.1396	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1399	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.139c	d0 45		bne $13e3			bne 	_CLBreak
.139e	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13a0	20 e6 13	jsr $13e6			jsr 	_CLCompareLine
.13a3	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a5	f0 2c		beq $13d3			beq 	_CLNext
.13a7	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13a9	20 e6 13	jsr $13e6			jsr 	_CLCompareLine
.13ac	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13ae	f0 23		beq $13d3			beq 	_CLNext
.13b0	a0 02		ldy #$02			ldy 	#2 							; print line #
.13b2	b1 18		lda ($18),y			lda 	(codePtr),y
.13b4	aa		tax				tax
.13b5	88		dey				dey
.13b6	b1 18		lda ($18),y			lda 	(codePtr),y
.13b8	20 b3 28	jsr $28b3			jsr 	WriteIntXA
.13bb	a9 20		lda #$20			lda 	#32
.13bd	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13c0	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13c2	a5 18		lda $18				lda 	codePtr
.13c4	18		clc				clc
.13c5	69 03		adc #$03			adc 	#3
.13c7	aa		tax				tax
.13c8	90 01		bcc $13cb			bcc 	_CLNoCarry2
.13ca	c8		iny				iny
.13cb					_CLNoCarry2:
.13cb	20 87 1d	jsr $1d87			jsr 	TOKDetokenise
.13ce	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d0	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13d3					_CLNext:
.13d3	18		clc				clc 								; advance to next line.
.13d4	b2 18		lda ($18)			lda 	(codePtr)
.13d6	65 18		adc $18				adc 	codePtr
.13d8	85 18		sta $18				sta 	codePtr
.13da	90 02		bcc $13de			bcc 	_CLNoCarry
.13dc	e6 19		inc $19				inc 	codePtr+1
.13de					_CLNoCarry:
.13de	80 b2		bra $1392			bra 	_CLLoop
.13e0					_CLExit:
.13e0	4c d2 28	jmp $28d2			jmp 	WarmStart
.13e3					_CLBreak:
.13e3	4c 28 27	jmp $2728		jmp	ErrorV_break
.13e6					_CLCompareLine:
.13e6	a0 01		ldy #$01			ldy 	#1
.13e8	38		sec				sec
.13e9	b1 18		lda ($18),y			lda 	(codePtr),y
.13eb	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13ee	85 22		sta $22				sta 	zTemp0
.13f0	c8		iny				iny
.13f1	b1 18		lda ($18),y			lda 	(codePtr),y
.13f3	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13f6	90 0a		bcc $1402			bcc 	_CLIsNegative
.13f8	d0 05		bne $13ff			bne 	_CLIsPositive
.13fa	a5 22		lda $22				lda 	zTemp0
.13fc	d0 01		bne $13ff			bne 	_CLIsPositive
.13fe	60		rts				rts
.13ff					_CLIsPositive:
.13ff	a9 01		lda #$01			lda 	#1
.1401	60		rts				rts
.1402					_CLIsNegative:
.1402	a9 ff		lda #$ff			lda 	#255
.1404	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1405					Command_NEW:
.1405	20 71 1f	jsr $1f71			jsr 	PGMNewProgram 				; Reset current program
.1408	20 3c 10	jsr $103c			jsr 	ClearCode 					; Run CLR
.140b	4c 28 15	jmp $1528			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.140e					Command_READ:
.140e	20 8b 17	jsr $178b			jsr 	EXPTermR0 					; get term to R0
.1411	90 35		bcc $1448			bcc 	_CRSyntax 					; fail if not a reference.
.1413	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1415	48		pha				pha
.1416	a5 09		lda $09				lda 	IFR0+IM1
.1418	48		pha				pha
.1419	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.141b	48		pha				pha
.141c	20 a1 14	jsr $14a1			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.141f	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1422	d0 27		bne $144b			bne 	_CRHaveData  				; forward for the next one.
.1424					_CRNextLine:
.1424	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1426	f0 1a		beq $1442			beq 	_CRNoData
.1428					_CRKeepSearching:
.1428	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.142a	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.142c	20 ad 24	jsr $24ad			jsr 	ScanForward
.142f	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1431	f0 18		beq $144b			beq 	_CRHaveData 				; found it
.1433	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1435	18		clc				clc 								; try the next line, keep going.
.1436	b2 18		lda ($18)			lda 	(codePtr)
.1438	65 18		adc $18				adc 	codePtr
.143a	85 18		sta $18				sta 	codePtr
.143c	90 e6		bcc $1424			bcc 	_CRNextLine
.143e	e6 19		inc $19				inc 	codePtr+1
.1440	80 e2		bra $1424			bra 	_CRNextLine
.1442					_CRNoData:
.1442	4c 55 26	jmp $2655		jmp	ErrorV_data
.1445					_CLType:
.1445	4c cd 25	jmp $25cd		jmp	ErrorV_type
.1448					_CRSyntax:
.1448	4c 9d 25	jmp $259d		jmp	ErrorV_syntax
.144b					_CRHaveData:
.144b	20 c3 16	jsr $16c3			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.144e	68		pla				pla 								; type of l-expr
.144f	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1451	30 f2		bmi $1445			bmi 	_CLType
.1453	68		pla				pla 								; restore address
.1454	85 23		sta $23				sta 	zTemp0+1
.1456	68		pla				pla
.1457	85 22		sta $22				sta 	zTemp0
.1459	20 dc 12	jsr $12dc			jsr 	AssignData 					; write R0 there.
.145c	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.145f	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1461	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1463	d0 04		bne $1469			bne 	_CRSwapBack
.1465	c8		iny				iny 								; consume comma
.1466	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.1469					_CRSwapBack:
.1469	20 a1 14	jsr $14a1			jsr 	SwapCodeDataPointers		; swap them back.
.146c	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.146e	c8		iny				iny
.146f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1471	f0 9b		beq $140e			beq 	Command_READ 				; if so go round again.
.1473	88		dey				dey 								; unpick get.
.1474	60		rts				rts
.1475					Command_DATA:
.1475	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1477	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1479	20 ad 24	jsr $24ad			jsr 	ScanForward
.147c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.147e	d0 01		bne $1481			bne 	_CDNotEOL
.1480	88		dey				dey
.1481					_CDNotEOL:
.1481	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1482					Command_REM:
.1482					Command_REM2:
.1482	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1484	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1486	d0 06		bne $148e			bne 	_CRExit
.1488	c8		iny				iny 								; skip over it, it's a comment.
.1489	98		tya				tya
.148a	38		sec				sec
.148b	71 18		adc ($18),y			adc 	(codePtr),y
.148d	a8		tay				tay
.148e					_CRExit:
.148e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.148f					S
.148f					Command_RESTORE:
.148f	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1492	8d 0c 05	sta $050c			sta 	dataPtr+1
.1495	9c 0b 05	stz $050b			stz 	dataPtr
.1498	a9 03		lda #$03			lda 	#3 							; position start of line
.149a	8d 0d 05	sta $050d			sta 	dataPos
.149d	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14a0	60		rts				rts
.14a1					SwapCodeDataPointers:
.14a1	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14a4	a6 18		ldx $18				ldx 	codePtr
.14a6	85 18		sta $18				sta 	codePtr
.14a8	8e 0b 05	stx $050b			stx 	dataPtr
.14ab	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14ae	a6 19		ldx $19				ldx 	codePtr+1
.14b0	85 19		sta $19				sta 	codePtr+1
.14b2	8e 0c 05	stx $050c			stx 	dataPtr+1
.14b5	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14b8	8c 0d 05	sty $050d			sty 	dataPos
.14bb	a8		tay				tay
.14bc	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14bd					Command_RUN:
.14bd	20 3c 10	jsr $103c			jsr 	ClearCode					; clear everything out.
.14c0	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14c3	85 19		sta $19				sta 	codePtr+1
.14c5	64 18		stz $18				stz 	codePtr
.14c7	80 0b		bra $14d4			bra 	RUNNewLine
.14c9					RUNEndOfLine:
.14c9	18		clc				clc 								; advance to next line.
.14ca	b2 18		lda ($18)			lda 	(codePtr)
.14cc	65 18		adc $18				adc 	codePtr
.14ce	85 18		sta $18				sta 	codePtr
.14d0	90 02		bcc $14d4			bcc 	_RELNoCarry
.14d2	e6 19		inc $19				inc 	codePtr+1
.14d4					_RELNoCarry:
.14d4					RUNNewLine:
.14d4	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14d6	9a		txs				txs
.14d7	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14d9	f0 4d		beq $1528			beq 	Command_END
.14db	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14dd	b1 18		lda ($18),y			lda 	(codePtr),y
.14df	8d 26 06	sta $0626			sta 	ERRLine
.14e2	c8		iny				iny
.14e3	b1 18		lda ($18),y			lda 	(codePtr),y
.14e5	8d 27 06	sta $0627			sta 	ERRLine+1
.14e8	c8		iny				iny 								; offset into codePtr for start of line.
.14e9					RUNNewCommand:
.14e9	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14ec	ce 10 05	dec $0510			dec 	checkCounter
.14ef	d0 0a		bne $14fb			bne 	_RNCNoCheck
.14f1	5a		phy				phy 								; keyboard check.
.14f2	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.14f5	7a		ply				ply
.14f6	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.14f9	d0 1e		bne $1519			bne 	_RUNBreak
.14fb					_RNCNoCheck:
.14fb	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.14fd	10 1d		bpl $151c			bpl		_RUNNotToken 				; probably an identifier
.14ff	c8		iny				iny 								; consume token
.1500	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1502	f0 e5		beq $14e9			beq 	RUNNewCommand
.1504	c9 a2		cmp #$a2			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1506	b0 0e		bcs $1516			bcs 	_RUNSyntax
.1508	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.150a	90 0a		bcc $1516			bcc 	_RUNSyntax
.150c	0a		asl a				asl 	a 							; double into X.
.150d	aa		tax				tax
.150e	20 13 15	jsr $1513			jsr 	_RUNDispatchMain			; call the main dispatcher
.1511	80 d6		bra $14e9			bra 	RUNNewCommand
.1513					_RUNDispatchMain:
.1513	7c 6d 1c	jmp ($1c6d,x)			jmp 	(VectorTable,x)
.1516					_RUNSyntax:
.1516	4c 9d 25	jmp $259d		jmp	ErrorV_syntax
.1519					_RUNBreak:
.1519	4c 28 27	jmp $2728		jmp	ErrorV_break
.151c					_RUNNotToken:
.151c	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.151e	90 f6		bcc $1516			bcc 	_RUNSyntax
.1520	20 bb 12	jsr $12bb			jsr 	CommandLET 					; assignment
.1523	80 c4		bra $14e9			bra 	RUNNewCommand 				; loop round.
.1525					Command_Shift_Handler:
.1525	4c df 25	jmp $25df		jmp	ErrorV_unimplemented
.1528					Command_END:
.1528	4c d2 28	jmp $28d2			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.152b					Command_STOP:
.152b	4c 41 26	jmp $2641		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.152e					Command_Sys:
.152e	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; execution address
.1531	5a		phy				phy
.1532	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1535	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1538	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.153b	20 40 15	jsr $1540			jsr 	_CSCallIFR0 				; call the code
.153e	7a		ply				ply
.153f	60		rts				rts
.1540					_CSCallIFR0:
.1540	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1543					NoExec01:
.1543					NoExec02:
.1543					NoExec03:
.1543					NoExec04:
.1543					NoExec05:
.1543					NoExec06:
.1543					NoExec07:
.1543					NoExec08:
.1543	4c 9d 25	jmp $259d		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1546					EXPBinAdd:
.1546	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1548	30 6f		bmi $15b9			bmi 	EXPConcatenate
.154a	a2 0c		ldx #$0c			ldx 	#IFR1
.154c	4c f3 2a	jmp $2af3			jmp 	IFloatAdd
.154f					EXPBinSub:
.154f	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1551	30 3f		bmi $1592			bmi 	EXPTypeError
.1553	a2 0c		ldx #$0c			ldx 	#IFR1
.1555	4c ec 2a	jmp $2aec			jmp 	IFloatSubtract
.1558					EXPBinMul:
.1558	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.155a	30 36		bmi $1592			bmi 	EXPTypeError
.155c	a2 0c		ldx #$0c			ldx 	#IFR1
.155e	4c 9d 2b	jmp $2b9d			jmp 	IFloatMultiply
.1561					EXPBinFDiv:
.1561	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1563	30 2d		bmi $1592			bmi 	EXPTypeError
.1565	a2 0c		ldx #$0c			ldx 	#IFR1
.1567	20 1f 2e	jsr $2e1f			jsr 	IFloatDivideFloat
.156a	b0 0f		bcs $157b			bcs 	EXPDZero
.156c	60		rts				rts
.156d					EXPBinIDiv:
.156d	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.156f	30 21		bmi $1592			bmi 	EXPTypeError
.1571	a2 0c		ldx #$0c			ldx 	#IFR1
.1573	20 1f 2e	jsr $2e1f			jsr 	IFloatDivideFloat
.1576	b0 03		bcs $157b			bcs 	EXPDZero
.1578	4c fc 2d	jmp $2dfc			jmp 	IFloatIntegerR0
.157b					EXPDZero:
.157b	4c 16 26	jmp $2616		jmp	ErrorV_divzero
.157e					EXPBinIMod:
.157e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1580	30 10		bmi $1592			bmi 	EXPTypeError
.1582	a2 0c		ldx #$0c			ldx 	#IFR1
.1584	5a		phy				phy
.1585	20 32 2d	jsr $2d32			jsr 	IFPreProcessBitwise 		; set up everything.
.1588	d0 05		bne $158f			bne 	EXPDRange
.158a	20 6b 2c	jsr $2c6b			jsr 	IFloatModulusInteger
.158d	7a		ply				ply
.158e	60		rts				rts
.158f					EXPDRange:
.158f	4c ae 25	jmp $25ae		jmp	ErrorV_range
.1592					EXPTypeError:
.1592	4c cd 25	jmp $25cd		jmp	ErrorV_type
.1595					EXPBinAnd:
.1595	24 0b		bit $0b				bit 	IFR0+IExp
.1597	30 f9		bmi $1592			bmi 	EXPTypeError
.1599	a2 0c		ldx #$0c			ldx 	#IFR1
.159b	20 ed 2c	jsr $2ced			jsr 	IFloatBitwiseAnd
.159e	b0 ef		bcs $158f			bcs 	EXPDRange
.15a0	60		rts				rts
.15a1					EXPBinOr:
.15a1	24 0b		bit $0b				bit 	IFR0+IExp
.15a3	30 ed		bmi $1592			bmi 	EXPTypeError
.15a5	a2 0c		ldx #$0c			ldx 	#IFR1
.15a7	20 04 2d	jsr $2d04			jsr 	IFloatBitwiseOr
.15aa	b0 e3		bcs $158f			bcs 	EXPDRange
.15ac	60		rts				rts
.15ad					EXPBinXor:
.15ad	24 0b		bit $0b				bit 	IFR0+IExp
.15af	30 e1		bmi $1592			bmi 	EXPTypeError
.15b1	a2 0c		ldx #$0c			ldx 	#IFR1
.15b3	20 1b 2d	jsr $2d1b			jsr 	IFloatBitwiseXor
.15b6	b0 d7		bcs $158f			bcs 	EXPDRange
.15b8	60		rts				rts
.15b9					EXPConcatenate:
.15b9	18		clc				clc
.15ba	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15bc	72 0c		adc ($0c)			adc 	(IFR1)
.15be	b0 2d		bcs $15ed			bcs 	_EXPCError 					; far too long.
.15c0	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15c2	da		phx				phx
.15c3	a6 09		ldx $09				ldx 	IFR0+1
.15c5	da		phx				phx
.15c6	20 48 28	jsr $2848			jsr 	StringTempAllocate 			; allocate string, set up return
.15c9	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15cb	a5 0c		lda $0c				lda 	IFR1
.15cd	20 d6 15	jsr $15d6			jsr 	_EXPCCopyXA
.15d0	fa		plx				plx 								; copy second string
.15d1	68		pla				pla
.15d2	20 d6 15	jsr $15d6			jsr 	_EXPCCopyXA
.15d5	60		rts				rts
.15d6					_EXPCCopyXA:
.15d6	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15d8	85 22		sta $22				sta 	zTemp0
.15da	b2 22		lda ($22)			lda 	(zTemp0)					; length of string
.15dc	f0 0e		beq $15ec			beq 	_EXPCCExit 					; nothing in string
.15de	aa		tax				tax 								; count
.15df	5a		phy				phy 								; start position
.15e0	a0 01		ldy #$01			ldy 	#1
.15e2					_EXPCCLoop:
.15e2	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15e4	20 7d 28	jsr $287d			jsr 	StringTempWrite
.15e7	c8		iny				iny
.15e8	ca		dex				dex
.15e9	d0 f7		bne $15e2			bne 	_EXPCCLoop
.15eb	7a		ply				ply
.15ec					_EXPCCExit:
.15ec	60		rts				rts
.15ed					_EXPCError:
.15ed	4c ba 26	jmp $26ba		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15f0					EXPReturnTrue:
.15f0	a2 08		ldx #$08			ldx 	#IFR0
.15f2	a9 01		lda #$01			lda 	#1
.15f4	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.15f7	20 06 31	jsr $3106			jsr 	IFloatNegate
.15fa	60		rts				rts
.15fb					EXPReturnFalse:
.15fb	a2 08		ldx #$08			ldx 	#IFR0
.15fd	4c fb 30	jmp $30fb			jmp 	IFloatSetZero
.1600					EXPCompareEqual:
.1600	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.1603	c9 00		cmp #$00			cmp 	#0
.1605	f0 e9		beq $15f0			beq 	EXPReturnTrue
.1607	80 f2		bra $15fb			bra 	EXPReturnFalse
.1609					EXPCompareLess:
.1609	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.160c	c9 ff		cmp #$ff			cmp 	#$FF
.160e	f0 e0		beq $15f0			beq 	EXPReturnTrue
.1610	80 e9		bra $15fb			bra 	EXPReturnFalse
.1612					EXPCompareGreater:
.1612	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.1615	c9 01		cmp #$01			cmp 	#1
.1617	f0 d7		beq $15f0			beq 	EXPReturnTrue
.1619	80 e0		bra $15fb			bra 	EXPReturnFalse
.161b					EXPCompareNotEqual:
.161b	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.161e	c9 00		cmp #$00			cmp 	#0
.1620	d0 ce		bne $15f0			bne 	EXPReturnTrue
.1622	80 d7		bra $15fb			bra 	EXPReturnFalse
.1624					EXPCompareLessEqual:
.1624	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.1627	c9 01		cmp #$01			cmp 	#1
.1629	d0 c5		bne $15f0			bne 	EXPReturnTrue
.162b	80 ce		bra $15fb			bra 	EXPReturnFalse
.162d					EXPCompareGreaterEqual:
.162d	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.1630	c9 ff		cmp #$ff			cmp 	#$FF
.1632	d0 bc		bne $15f0			bne 	EXPReturnTrue
.1634	80 c5		bra $15fb			bra 	EXPReturnFalse
.1636					EXPCompareBaseCode:
.1636	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1638	30 10		bmi $164a			bmi 	_EXCBCString
.163a	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.163c	20 ca 2d	jsr $2dca			jsr 	IFloatCompare
.163f	a5 08		lda $08				lda 	IFR0+IM0
.1641	f0 06		beq $1649			beq 	_EXCBCExit 					; return 0 if zero
.1643	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1645	50 02		bvc $1649			bvc 	_EXCBCExit
.1647	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1649					_EXCBCExit:
.1649	60		rts				rts
.164a					_EXCBCString:
.164a	5a		phy				phy
.164b	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.164d	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.164f	90 02		bcc $1653			bcc 	_EXCBCSmaller
.1651	b2 0c		lda ($0c)			lda 	(IFR1)
.1653					_EXCBCSmaller:
.1653	aa		tax				tax
.1654	f0 0d		beq $1663			beq 	_EXCBCMatches 				; if zero common length matches
.1656	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1658					_EXCBCCheckSmallerMatches:
.1658	c8		iny				iny 								; compare directly as far as common length
.1659	38		sec				sec
.165a	b1 0c		lda ($0c),y			lda 	(IFR1),y
.165c	f1 08		sbc ($08),y			sbc 	(IFR0),y
.165e	d0 08		bne $1668			bne 	_EXCBCExit2
.1660	ca		dex				dex
.1661	d0 f5		bne $1658			bne 	_EXCBCCheckSmallerMatches
.1663					_EXCBCMatches:
.1663	38		sec				sec
.1664	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1666	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1668					_EXCBCExit2:
.1668	7a		ply				ply
.1669	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.166b	f0 04		beq $1671			beq 	_EXCBCReturn
.166d	30 03		bmi $1672			bmi 	_EXCBCFF 					; return $FF if <
.166f	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1671					_EXCBCReturn:
.1671	60		rts				rts
.1672					_EXCBCFF:
.1672	a9 ff		lda #$ff			lda 	#$FF
.1674	60		rts				rts
.1675					_EXCBCRange:
.1675	4c ae 25	jmp $25ae		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1678					EXPBinLeft:
.1678	a9 ff		lda #$ff			lda 	#$FF
.167a	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.167d	4c 83 16	jmp $1683			jmp 	EXPShiftCommon
.1680					EXPBinRight:
.1680	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.1683					EXPShiftCommon:
.1683	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1685	05 0f		ora $0f				ora 	IFR1+IExp
.1687	29 7f		and #$7f			and 	#$7F
.1689	d0 35		bne $16c0			bne 	_EXPSRange
.168b	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.168d	29 e0		and #$e0			and 	#$E0
.168f	05 09		ora $09				ora 	IFR0+IM1
.1691	05 0a		ora $0a				ora 	IFR0+IM2
.1693	d0 25		bne $16ba			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.1695	5a		phy				phy
.1696	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.1698	29 1f		and #$1f			and 	#$1F
.169a	f0 17		beq $16b3			beq 	_EXPSExit 					; exit if zero
.169c	a8		tay				tay
.169d					_EXPSLoop:
.169d	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.169f	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16a2	30 05		bmi $16a9			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16a4	20 2a 31	jsr $312a			jsr 	IFloatShiftRight
.16a7	80 07		bra $16b0			bra 	_EXPSContinue
.16a9					_EXPSShiftLeft:
.16a9	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.16ac	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16ae	30 10		bmi $16c0			bmi 	_EXPSRange
.16b0					_EXPSContinue:
.16b0	88		dey				dey 								; do it Y times
.16b1	d0 ea		bne $169d			bne 	_EXPSLoop
.16b3					_EXPSExit:
.16b3	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16b5	20 8c 30	jsr $308c			jsr 	IFloatCopyFromRegister
.16b8	7a		ply				ply
.16b9	60		rts				rts
.16ba					_EXPSShiftZero:
.16ba	a2 08		ldx #$08			ldx 	#IFR0
.16bc	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.16bf	60		rts				rts
.16c0					_EXPSRange:
.16c0	4c ae 25	jmp $25ae		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16c3					EXPEvaluateExpression:
.16c3	a9 00		lda #$00			lda 	#0 							; current precedence
.16c5					EXPEvaluateExpressionPrecedenceA:
.16c5	48		pha				pha
.16c6	20 40 17	jsr $1740			jsr 	EXPTermValueR0				; do first term.
.16c9					_EELoop:
.16c9	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16cb	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16cd	90 31		bcc $1700			bcc 	_EEExit
.16cf	aa		tax				tax 								; access the precedence of the operator.
.16d0	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16d1	dd 9d 19	cmp $199d,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16d4	b0 2b		bcs $1701			bcs 	_EEExit2
.16d6	48		pha				pha 								; save current precedence.
.16d7	da		phx				phx 								; save operator
.16d8	c8		iny				iny 								; consume operator
.16d9	da		phx				phx
.16da	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16dc	20 4a 30	jsr $304a			jsr 	IFloatPushRx
.16df	fa		plx				plx
.16e0	bd 9d 19	lda $199d,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16e3	20 c5 16	jsr $16c5			jsr 	EXPEvaluateExpressionPrecedenceA
.16e6	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16e8	20 6b 30	jsr $306b			jsr 	IFloatPullRx
.16eb	fa		plx				plx 								; operator
.16ec	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16ee	45 0f		eor $0f				eor 	IFR1+IExp
.16f0	30 08		bmi $16fa			bmi 	_EEType
.16f2					_EETypeOkay:
.16f2	8a		txa				txa
.16f3	0a		asl a				asl 	a 							; double -> X
.16f4	aa		tax				tax
.16f5	20 fd 16	jsr $16fd			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.16f8	80 cf		bra $16c9			bra 	_EELoop
.16fa					_EEType:
.16fa	4c cd 25	jmp $25cd		jmp	ErrorV_type
.16fd					_EECallBinary:
.16fd	7c 6d 1c	jmp ($1c6d,x)			jmp 	(VectorTable,x)
.1700					_EEExit:
.1700	68		pla				pla 								; throw precedence
.1701					_EEExit2:
.1701	18		clc				clc
.1702	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1703					EXPEvalNumber:
.1703	20 c3 16	jsr $16c3			jsr 	EXPEvaluateExpression 		; get a value
.1706	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1708	30 01		bmi $170b			bmi 	EVUType
.170a	60		rts				rts
.170b					EVUType:
.170b	4c cd 25	jmp $25cd		jmp	ErrorV_type
.170e					EXPEvalInteger:
.170e	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1711	20 fc 2d	jsr $2dfc			jsr 	IFloatIntegerR0
.1714	60		rts				rts
.1715					EXPEvalInteger16:
.1715	20 0e 17	jsr $170e			jsr 	EXPEvalInteger 				; get integer
.1718	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.171a	d0 21		bne $173d			bne 	EVURange
.171c	a6 09		ldx $09				ldx 	IFR0+IM1
.171e	a5 08		lda $08				lda 	IFR0+IM0
.1720	60		rts				rts
.1721					EXPEvalInteger8:
.1721	20 0e 17	jsr $170e			jsr 	EXPEvalInteger 				; get integer
.1724	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1726	05 09		ora $09				ora 	IFR0+IM1
.1728	d0 13		bne $173d			bne 	EVURange
.172a	a5 08		lda $08				lda 	IFR0+IM0
.172c	60		rts				rts
.172d					EXPEvalString:
.172d	20 c3 16	jsr $16c3			jsr 	EXPEvaluateExpression 		; get value
.1730	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1732	10 d7		bpl $170b			bpl 	EVUType
.1734	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1736	86 23		stx $23				stx 	zTemp0+1
.1738	a5 08		lda $08				lda 	IFR0+IM0
.173a	85 22		sta $22				sta 	zTemp0
.173c	60		rts				rts
.173d					EVURange:
.173d	4c ae 25	jmp $25ae		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1740					EXPTermValueR0:
.1740	20 8b 17	jsr $178b			jsr 	EXPTermR0 					; get term
.1743	90 45		bcc $178a			bcc 	_ETVNotReference 			; exit if value.
.1745	5a		phy				phy
.1746	a0 03		ldy #$03			ldy 	#3 							; get type
.1748	b1 08		lda ($08),y			lda 	(IFR0),y
.174a	30 14		bmi $1760			bmi 	_ETVDereferenceString
.174c	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.174e	88		dey				dey 								; get byte 2
.174f	b1 08		lda ($08),y			lda 	(IFR0),y
.1751	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1753	88		dey				dey 								; get byte 1
.1754	b1 08		lda ($08),y			lda 	(IFR0),y
.1756	aa		tax				tax 								; save in X so we can overwrite it
.1757	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1759	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.175b	85 08		sta $08				sta 	IFR0+IM0
.175d	7a		ply				ply
.175e	18		clc				clc
.175f	60		rts				rts
.1760					_ETVDereferenceString:
.1760	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1762	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1764	12 08		ora ($08)			ora 	(IFR0)
.1766	f0 11		beq $1779			beq 	_ETVNull 					; if so, return a fake NULL.
.1768	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.176a	aa		tax				tax
.176b	b2 08		lda ($08)			lda 	(IFR0)
.176d	18		clc				clc 								; add two so points to actual string.
.176e	69 02		adc #$02			adc 	#2
.1770	90 01		bcc $1773			bcc 	_EVDSNoCarry
.1772	e8		inx				inx
.1773					_EVDSNoCarry:
.1773	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1775	85 08		sta $08				sta 	IFR0
.1777	80 08		bra $1781			bra 	_ETVFillExit 				; tidy up and exit.
.1779					_ETVNull:
.1779	a9 89		lda #$89			lda 	#_EVTNString & $FF
.177b	85 08		sta $08				sta 	IFR0+IM0
.177d	a9 17		lda #$17			lda 	#_EVTNString >> 8
.177f	85 09		sta $09				sta 	IFR0+IM1
.1781					_ETVFillExit:
.1781	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1783	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1785	85 0b		sta $0b				sta 	IFR0+IExp
.1787	7a		ply				ply
.1788	60		rts				rts
.1789					_EVTNString:
>1789	00						.byte 	0
.178a					_ETVNotReference:
.178a	60		rts				rts
.178b					EXPTermR0:
.178b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.178d	30 10		bmi $179f			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.178f	c8		iny				iny 								; consume element
.1790	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1792	b0 08		bcs $179c			bcs 	_ETMIdentifier
.1794	20 ca 17	jsr $17ca			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1797	20 fd 17	jsr $17fd			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.179a	18		clc				clc 								; return value ok
.179b	60		rts				rts
.179c					_ETMIdentifier:
.179c	4c 94 2a	jmp $2a94			jmp 	VARCheckSimple 				; check variables, seperate module.
.179f					_ETMIsUnaryOrMinus:
.179f	c8		iny				iny 								; consume element
.17a0	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17a2	d0 0e		bne $17b2			bne 	_ETMCheckUnary
.17a4	20 40 17	jsr $1740			jsr 	EXPTermValueR0 				; get a term to negate
.17a7	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17a9	20 06 31	jsr $3106			jsr 	IFloatNegate
.17ac	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17ae	30 17		bmi $17c7			bmi 	_ETMUnaryType				; if so error.
.17b0	18		clc				clc
.17b1	60		rts				rts
.17b2					_ETMCheckUnary:
.17b2	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17b4	90 0e		bcc $17c4			bcc 	_ETMUnarySyntax
.17b6	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17b8	b0 0a		bcs $17c4			bcs 	_ETMUnarySyntax
.17ba	0a		asl a				asl 	a 							; make it into an index => X
.17bb	aa		tax				tax
.17bc	20 c1 17	jsr $17c1			jsr 	_ETMCallUnaryFunction 		; call the function
.17bf	18		clc				clc 								; and return it.
.17c0	60		rts				rts
.17c1					_ETMCallUnaryFunction:
.17c1	7c 6d 1c	jmp ($1c6d,x)			jmp 	(VectorTable,x)
.17c4					_ETMUnarySyntax:
.17c4	4c 9d 25	jmp $259d		jmp	ErrorV_syntax
.17c7					_ETMUnaryType:
.17c7	4c cd 25	jmp $25cd		jmp	ErrorV_type
.17ca					EXPExtractTokenisedInteger:
.17ca	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17cc	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17ce	64 09		stz $09				stz 	IFR0+IM1
.17d0	64 0a		stz $0a				stz 	IFR0+IM2
.17d2					_ETMConstant:
.17d2	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17d4	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17d6	b0 24		bcs $17fc			bcs 	_ETMCExit 					; no, exit.
.17d8	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17da	a5 09		lda $09				lda 	IFR0+IM1
.17dc	85 0a		sta $0a				sta 	IFR0+IM2
.17de	a5 08		lda $08				lda 	IFR0+IM0
.17e0	85 09		sta $09				sta 	IFR0+IM1
.17e2	64 08		stz $08				stz 	IFR0+IM0
.17e4	8a		txa				txa
.17e5	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17e6	66 0a		ror $0a				ror 	IFR0+IM2
.17e8	66 09		ror $09				ror 	IFR0+IM1
.17ea	66 08		ror $08				ror 	IFR0+IM0
.17ec	4a		lsr a				lsr 	a
.17ed	66 0a		ror $0a				ror 	IFR0+IM2
.17ef	66 09		ror $09				ror 	IFR0+IM1
.17f1	66 08		ror $08				ror 	IFR0+IM0
.17f3	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17f5	11 18		ora ($18),y			ora 	(codePtr),y
.17f7	85 08		sta $08				sta 	IFR0+IM0
.17f9	c8		iny				iny 								; consume, loop back
.17fa	80 d6		bra $17d2			bra 	_ETMConstant
.17fc					_ETMCExit:
.17fc	60		rts				rts
.17fd					EXPCheckDecimalFollows:
.17fd	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.17ff	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1801	d0 19		bne $181c			bne 	_ETMCDExit
.1803	c8		iny				iny 								; consume token.
.1804	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1806	5a		phy				phy									; save current position
.1807	48		pha				pha 								; save count of chars.
.1808	38		sec				sec 								; address into YX : y + codePtr+1
.1809	98		tya				tya
.180a	65 18		adc $18				adc 	codePtr
.180c	aa		tax				tax
.180d	a5 19		lda $19				lda 	codePtr+1
.180f	69 00		adc #$00			adc 	#0
.1811	a8		tay				tay
.1812	68		pla				pla 								; get count.
.1813	20 9f 2f	jsr $2f9f			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1816	7a		ply				ply 								; go to next token.
.1817	98		tya				tya
.1818	38		sec				sec
.1819	71 18		adc ($18),y			adc 	(codePtr),y
.181b	a8		tay				tay
.181c					_ETMCDExit:
.181c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.181d					EXPUnaryAbs:
.181d	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.1820	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.1823	20 3e 2d	jsr $2d3e			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1826	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1827					EXPUnaryAsc:
.1827	20 2d 17	jsr $172d			jsr 	EXPEvalString 					; string to R0, zTemp0
.182a	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.182d	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.182f	f0 06		beq $1837			beq 	_EXAZero 						; if so return 0
.1831	5a		phy				phy 									; otherwise get first character
.1832	a0 01		ldy #$01			ldy 	#1
.1834	b1 22		lda ($22),y			lda 	(zTemp0),y
.1836	7a		ply				ply
.1837					_EXAZero:
.1837	a2 08		ldx #$08			ldx 	#IFR0
.1839	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.183c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.183d					EXPUnaryChr:
.183d	20 21 17	jsr $1721			jsr 	EXPEvalInteger8 				; expr
.1840	48		pha				pha 									; push on stack
.1841	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.1844	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1846	20 48 28	jsr $2848			jsr 	StringTempAllocate
.1849	68		pla				pla 									; get value back
.184a	20 7d 28	jsr $287d			jsr 	StringTempWrite 				; write to string.
.184d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.184e					EXPUnaryDec:
.184e	20 2d 17	jsr $172d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1851	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.1854	5a		phy				phy 									; save position.
.1855	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1857	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.185a	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.185c	f0 3b		beq $1899			beq 	_EUDError 						; empty string is not legit.
.185e	aa		tax				tax 									; count in X.
.185f	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1861					_EUDLoop:
.1861	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next from string
.1863	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1865	90 02		bcc $1869			bcc 	_EUDNoCase
.1867	e9 20		sbc #$20			sbc 	#$20
.1869					_EUDNoCase:
.1869	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.186b	90 2c		bcc $1899			bcc 	_EUDError
.186d	c9 3a		cmp #$3a			cmp 	#'9'+1
.186f	90 0a		bcc $187b			bcc 	_EUDOkay
.1871	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1873	90 24		bcc $1899			bcc 	_EUDError
.1875	c9 47		cmp #$47			cmp 	#'F'+1
.1877	b0 20		bcs $1899			bcs 	_EUDError
.1879	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.187b					_EUDOkay:
.187b	29 0f		and #$0f			and 	#15 							; make constant
.187d	da		phx				phx
.187e	48		pha				pha
.187f	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1881	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.1884	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.1887	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.188a	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.188d	68		pla				pla 									; pop constant and OR in
.188e	fa		plx				plx
.188f	05 08		ora $08				ora 	IFR0+IM0
.1891	85 08		sta $08				sta 	IFR0+IM0
.1893	c8		iny				iny 									; next char
.1894	ca		dex				dex 									; done all characters ?
.1895	d0 ca		bne $1861			bne 	_EUDLoop
.1897	7a		ply				ply
.1898	60		rts				rts
.1899					_EUDError:
.1899	4c bf 25	jmp $25bf		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.189c					EXPUnaryInlineDec:
.189c	4c 9d 25	jmp $259d		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.189f					EXPUnaryPeek:
.189f	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 				; number to R0
.18a2	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.18a5	b2 08		lda ($08)			lda 	(IFR0)
.18a7	a2 08		ldx #$08			ldx 	#IFR0
.18a9	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.18ac	60		rts				rts
.18ad					EXPUnaryDeek:
.18ad	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 				; number to R0
.18b0	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.18b3	5a		phy				phy
.18b4	a0 01		ldy #$01			ldy 	#1
.18b6	b1 08		lda ($08),y			lda 	(IFR0),y
.18b8	7a		ply				ply
.18b9	48		pha				pha
.18ba	b2 08		lda ($08)			lda 	(IFR0)
.18bc	a2 08		ldx #$08			ldx 	#IFR0
.18be	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.18c1	68		pla				pla
.18c2	85 09		sta $09				sta 	IFR0+IM1
.18c4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.18c5					EXPUnaryNull:
.18c5	20 40 17	jsr $1740			jsr 	EXPTermValueR0
.18c8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18c9					EXPUnaryFrac:
.18c9	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.18cc	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.18cf	20 a6 2d	jsr $2da6			jsr 	IFloatFractionalR0 				; get fractional bit.
.18d2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18d3					EXPUnaryInkey:
.18d3	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.18d6	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18d8	20 48 28	jsr $2848			jsr 	StringTempAllocate
.18db	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.18de	b0 06		bcs $18e6			bcs 	_EUIExit
.18e0	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18e3	20 7d 28	jsr $287d			jsr 	StringTempWrite
.18e6					_EUIExit:
.18e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18e7					EXPUnaryInt:
.18e7	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.18ea	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; check for )
.18ed	20 fc 2d	jsr $2dfc			jsr 	IFloatIntegerR0 				; force to integer.
.18f0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18f1					EXPUnaryLen:
.18f1	20 2d 17	jsr $172d			jsr 	EXPEvalString 					; string to R0, zTemp0
.18f4	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.18f7	b2 22		lda ($22)			lda 	(zTemp0) 						; first byte is the length
.18f9	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.18fb	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.18fe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.18ff					EXPUnaryParenthesis:
.18ff	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.1902	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.1905	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1906					EXPUnaryRnd:
.1906	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; number to R0
.1909	20 52 27	jsr $2752			jsr 	ERRCheckRParen 				; )
.190c	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.190e	20 25 19	jsr $1925			jsr 	EXPLoadInRandom
.1911	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1913	85 0b		sta $0b				sta 	IFR0+IExp
.1915	60		rts				rts
.1916					ExpUnaryRand:
.1916	20 0e 17	jsr $170e			jsr 	EXPEvalInteger 				; integer to R0
.1919	20 52 27	jsr $2752			jsr 	ERRCheckRParen 				; )
.191c	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.191e	20 25 19	jsr $1925			jsr 	EXPLoadInRandom
.1921	20 6b 2c	jsr $2c6b			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1924	60		rts				rts
.1925					EXPLoadInRandom:
.1925	20 fb 30	jsr $30fb			jsr 	IFloatSetZero 				; zero it
.1928	20 3a 19	jsr $193a			jsr 	EXPRandom32 				; do a 23 bit number.
.192b	95 00		sta $00,x			sta 	IM0,x
.192d	20 3a 19	jsr $193a			jsr 	EXPRandom32
.1930	95 01		sta $01,x			sta 	IM1,x
.1932	20 3a 19	jsr $193a			jsr 	EXPRandom32
.1935	29 7f		and #$7f			and 	#$7F
.1937	95 02		sta $02,x			sta 	IM2,x
.1939	60		rts				rts
.193a					EXPRandom32:
.193a	5a		phy				phy
.193b	a0 08		ldy #$08			ldy 	#8
.193d	ad 12 05	lda $0512			lda 	EXPSeed+0
.1940	0d 13 05	ora $0513			ora 	EXPSeed+1
.1943	0d 14 05	ora $0514			ora 	EXPSeed+2
.1946	0d 15 05	ora $0515			ora 	EXPSeed+3
.1949	d0 08		bne $1953			bne 	_EXPRNoReset
.194b	ee 12 05	inc $0512			inc 	EXPSeed+0
.194e	a0 10		ldy #$10			ldy 	#16
.1950	8c 15 05	sty $0515			sty 	EXPSeed+3
.1953					_EXPRNoReset:
.1953	ad 12 05	lda $0512			lda 	EXPSeed+0
.1956					_EXPRLoop:
.1956	0a		asl a				asl		a
.1957	2e 13 05	rol $0513			rol 	EXPSeed+1
.195a	2e 14 05	rol $0514			rol 	EXPSeed+2
.195d	2e 15 05	rol $0515			rol 	EXPSeed+3
.1960	90 02		bcc $1964			bcc 	_EXPRNoEOR
.1962	49 c5		eor #$c5			eor 	#$C5
.1964					_EXPRNoEOR:
.1964	88		dey				dey
.1965	d0 ef		bne $1956			bne 	_EXPRLoop
.1967	8d 12 05	sta $0512			sta 	EXPSeed+0
.196a	7a		ply				ply
.196b	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.196c					EXPUnarySgn:
.196c	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.196f	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.1972	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1974	20 9d 30	jsr $309d			jsr 	IFloatCopyToRegister
.1977	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1979	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.197c	a2 0c		ldx #$0c			ldx 	#IFR1
.197e	20 ca 2d	jsr $2dca			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1981	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1982					EXPUnarySqr:
.1982	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.1985	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.1988	20 46 2d	jsr $2d46			jsr 	IFloatSquareRootR0 				; square root.
.198b	b0 01		bcs $198e			bcs 	_EUSValue 						; error check.
.198d	60		rts				rts
.198e					_EUSValue:
.198e	4c ae 25	jmp $25ae		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1991					EXPUnaryHex:
.1991	20 0e 17	jsr $170e			jsr 	EXPEvalInteger 					; expr
.1994	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.1997	5a		phy				phy
.1998	a9 10		lda #$10			lda 	#16
.199a	20 9d 2e	jsr $2e9d			jsr 	IFloatIntegerToStringR0
.199d	80 0a		bra $19a9			bra 	EUSMain
.199f					EXPUnaryStr:
.199f	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; expr
.19a2	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.19a5	5a		phy				phy
.19a6	20 f8 2e	jsr $2ef8			jsr 	IFloatFloatToStringR0 			; convert to string
.19a9					EUSMain:
.19a9	b0 18		bcs $19c3			bcs 	_EUSError
.19ab	86 22		stx $22				stx 	zTemp0 							; save string address
.19ad	84 23		sty $23				sty 	zTemp0+1
.19af	48		pha				pha 									; save count
.19b0	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19b2	20 48 28	jsr $2848			jsr 	StringTempAllocate
.19b5	fa		plx				plx 									; count in X
.19b6	a0 00		ldy #$00			ldy 	#0
.19b8					_EUSCopy:
.19b8	b1 22		lda ($22),y			lda 	(zTemp0),y
.19ba	c8		iny				iny
.19bb	20 7d 28	jsr $287d			jsr 	StringTempWrite
.19be	ca		dex				dex
.19bf	d0 f7		bne $19b8			bne	 	_EUSCopy
.19c1	7a		ply				ply
.19c2	60		rts				rts
.19c3					_EUSError:
.19c3	4c ae 25	jmp $25ae		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19c6					EXPUnaryInlineString:
.19c6	18		clc				clc 								; physical address -> IM0,1
.19c7	98		tya				tya 								; put the actual address in IM0
.19c8	65 18		adc $18				adc 	codePtr
.19ca	85 08		sta $08				sta 	IFR0+IM0
.19cc	a5 19		lda $19				lda 	codePtr+1
.19ce	69 00		adc #$00			adc 	#0
.19d0	85 09		sta $09				sta 	IFR0+IM1
.19d2	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19d4	a9 80		lda #$80			lda 	#$80
.19d6	85 0b		sta $0b				sta 	IFR0+IExp
.19d8	98		tya				tya	 								; skip over it.
.19d9	38		sec				sec
.19da	71 18		adc ($18),y			adc 	(codePtr),y
.19dc	a8		tay				tay
.19dd	60		rts				rts
.19de					_EXPUISRange:
.19de	4c ae 25	jmp $25ae		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19e1					EXPUnaryLeft:
.19e1	20 27 1a	jsr $1a27			jsr 	EXPCommonStart 					; <string>,
.19e4	48		pha				pha 									; save string address on stack
.19e5	da		phx				phx
.19e6	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19e8	48		pha				pha
.19e9	20 21 17	jsr $1721			jsr 	EXPEvalInteger8 				; characters to do
.19ec	80 44		bra $1a32			bra 	EXPSubstringCommon
.19ee					EXPUnaryRight:
.19ee	20 27 1a	jsr $1a27			jsr 	EXPCommonStart 					; <string>,
.19f1	48		pha				pha 									; save string address on stack
.19f2	da		phx				phx
.19f3	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19f5	48		pha				pha
.19f6	20 21 17	jsr $1721			jsr 	EXPEvalInteger8 				; characters to do
.19f9	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.19fb	68		pla				pla
.19fc	38		sec				sec
.19fd	e5 22		sbc $22				sbc 	zTemp0
.19ff	b0 02		bcs $1a03			bcs 	_EUROffLeft
.1a01	a9 00		lda #$00			lda 	#0
.1a03					_EUROffLeft:
.1a03	48		pha				pha 									; start pos
.1a04	a9 ff		lda #$ff			lda 	#255
.1a06	80 2a		bra $1a32			bra 	EXPSubstringCommon
.1a08					EXPUnaryMid:
.1a08	20 27 1a	jsr $1a27			jsr 	EXPCommonStart 					; <string>,
.1a0b	48		pha				pha 									; save string address on stack
.1a0c	da		phx				phx
.1a0d	20 21 17	jsr $1721			jsr 	EXPEvalInteger8 				; characters start
.1a10	f0 12		beq $1a24			beq 	_EUSError 						; 1 is left
.1a12	3a		dec a				dec 	a 								; zero based.
.1a13	48		pha				pha
.1a14	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a16	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a18	f0 04		beq $1a1e			beq 	_EUMLength 						; if so m is provided
.1a1a	a9 ff		lda #$ff			lda 	#255 							; default m
.1a1c	80 14		bra $1a32			bra 	EXPSubstringCommon
.1a1e					_EUMLength:
.1a1e	c8		iny				iny 									; consume comma
.1a1f	20 21 17	jsr $1721			jsr 	EXPEvalInteger8 				; characters to do
.1a22	80 0e		bra $1a32			bra 	EXPSubstringCommon
.1a24					_EUSError:
.1a24	4c bf 25	jmp $25bf		jmp	ErrorV_value
.1a27					EXPCommonStart:
.1a27	20 2d 17	jsr $172d			jsr 	EXPEvalString
.1a2a	20 5a 27	jsr $275a			jsr 	ERRCheckComma
.1a2d	a5 08		lda $08				lda 	IFR0+IM0
.1a2f	a6 09		ldx $09				ldx 	IFR0+IM1
.1a31	60		rts				rts
.1a32					EXPSubstringCommon:
.1a32	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a34	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; check right bracket.
.1a37	68		pla				pla 									; start position
.1a38	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a3a	fa		plx				plx 									; get string address to zTemp2.
.1a3b	86 27		stx $27				stx 	zTemp2+1
.1a3d	68		pla				pla
.1a3e	85 26		sta $26				sta 	zTemp2
.1a40	38		sec				sec 									; length - start is the max count of chars
.1a41	b2 26		lda ($26)			lda 	(zTemp2)
.1a43	e5 25		sbc $25				sbc 	zTemp1+1
.1a45	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a47	b0 02		bcs $1a4b			bcs 	_EXPSSNoTrim
.1a49	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a4b					_EXPSSNoTrim:
.1a4b	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a4d	20 48 28	jsr $2848			jsr 	StringTempAllocate 				; allocate memory for it.
.1a50	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a52	f0 15		beq $1a69			beq 	_EXPSSExit
.1a54	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a56	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a58	b0 0f		bcs $1a69			bcs 	_EXPSSExit
.1a5a	5a		phy				phy
.1a5b	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a5d	c8		iny				iny 									; +1 for the length byte
.1a5e					_EXPSSCopy:
.1a5e	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a60	20 7d 28	jsr $287d			jsr 	StringTempWrite
.1a63	c8		iny				iny
.1a64	c6 24		dec $24				dec 	zTemp1
.1a66	d0 f6		bne $1a5e			bne 	_EXPSSCopy
.1a68	7a		ply				ply
.1a69					_EXPSSExit:
.1a69	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a6a					EXPUnaryVal:
.1a6a	20 2d 17	jsr $172d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a6d	20 52 27	jsr $2752			jsr 	ERRCheckRParen 					; )
.1a70	20 74 1a	jsr $1a74			jsr 	VALConversionZTemp0
.1a73	60		rts				rts
.1a74					VALConversionZTemp0:
.1a74	5a		phy				phy
.1a75	18		clc				clc
.1a76	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a78	69 01		adc #$01			adc 	#1
.1a7a	aa		tax				tax
.1a7b	a5 23		lda $23				lda 	zTemp0+1
.1a7d	69 00		adc #$00			adc 	#0
.1a7f	a8		tay				tay
.1a80	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a82	20 5f 2f	jsr $2f5f			jsr 	IFloatStringToFloatR0 			; do conversion
.1a85	b0 02		bcs $1a89			bcs 	_EUVError
.1a87	7a		ply				ply
.1a88	60		rts				rts
.1a89					_EUVError:
.1a89	4c bf 25	jmp $25bf		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a8c					BinaryPrecedence:
>1a8c	02					.byte	 2	; $ef =
>1a8d	02					.byte	 2	; $f0 <>
>1a8e	02					.byte	 2	; $f1 <=
>1a8f	02					.byte	 2	; $f2 <
>1a90	02					.byte	 2	; $f3 >=
>1a91	02					.byte	 2	; $f4 >
>1a92	01					.byte	 1	; $f5 XOR
>1a93	01					.byte	 1	; $f6 OR
>1a94	01					.byte	 1	; $f7 AND
>1a95	04					.byte	 4	; $f8 DIV
>1a96	04					.byte	 4	; $f9 MOD
>1a97	04					.byte	 4	; $fa <<
>1a98	04					.byte	 4	; $fb >>
>1a99	04					.byte	 4	; $fc /
>1a9a	04					.byte	 4	; $fd *
>1a9b	03					.byte	 3	; $fe -
>1a9c	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1a9d					StructureOffsets:
>1a9d	01					.byte	1  	; $80 REPEAT
>1a9e	ff					.byte	255	; $81 UNTIL
>1a9f	01					.byte	1  	; $82 WHILE
>1aa0	ff					.byte	255	; $83 WEND
>1aa1	01					.byte	1  	; $84 IF
>1aa2	ff					.byte	255	; $85 ENDIF
>1aa3	01					.byte	1  	; $86 DO
>1aa4	ff					.byte	255	; $87 LOOP
>1aa5	01					.byte	1  	; $88 PROC
>1aa6	ff					.byte	255	; $89 ENDPROC
>1aa7	01					.byte	1  	; $8a FOR
>1aa8	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1aa9					StandardTokens:
>1aa9	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1ab0	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1ab6	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1abc	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1ac1	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1ac4	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1aca	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1acd	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1ad2	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1ad7	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1adf	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1ae3	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1ae8	00					.byte	$00                                     	; $8c [[end]]
>1ae9	00					.byte	$00                                     	; $8d [[shift]]
>1aea	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1aef	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1af4	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1af7	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1afc	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1b00	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1b06	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1b0c	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1b11	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1b15	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1b19	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1b1e	01 2c					.byte	$01,$2c                                 	; $99 ,
>1b20	01 3b					.byte	$01,$3b                                 	; $9a ;
>1b22	01 3a					.byte	$01,$3a                                 	; $9b :
>1b24	01 27					.byte	$01,$27                                 	; $9c '
>1b26	01 29					.byte	$01,$29                                 	; $9d )
>1b28	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1b2d	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1b32	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1b37	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1b3c	00					.byte	0											; $a2
>1b3d	00					.byte	0											; $a3
>1b3e	00					.byte	0											; $a4
>1b3f	00					.byte	0											; $a5
>1b40	00					.byte	0											; $a6
>1b41	00					.byte	0											; $a7
>1b42	00					.byte	0											; $a8
>1b43	00					.byte	0											; $a9
>1b44	00					.byte	0											; $aa
>1b45	00					.byte	0											; $ab
>1b46	00					.byte	0											; $ac
>1b47	00					.byte	0											; $ad
>1b48	00					.byte	0											; $ae
>1b49	00					.byte	0											; $af
>1b4a	00					.byte	0											; $b0
>1b4b	00					.byte	0											; $b1
>1b4c	00					.byte	0											; $b2
>1b4d	00					.byte	0											; $b3
>1b4e	00					.byte	0											; $b4
>1b4f	00					.byte	0											; $b5
>1b50	00					.byte	0											; $b6
>1b51	00					.byte	0											; $b7
>1b52	00					.byte	0											; $b8
>1b53	00					.byte	0											; $b9
>1b54	00					.byte	0											; $ba
>1b55	00					.byte	0											; $bb
>1b56	00					.byte	0											; $bc
>1b57	00					.byte	0											; $bd
>1b58	00					.byte	0											; $be
>1b59	00					.byte	0											; $bf
>1b5a	00					.byte	0											; $c0
>1b5b	00					.byte	0											; $c1
>1b5c	00					.byte	0											; $c2
>1b5d	00					.byte	0											; $c3
>1b5e	00					.byte	0											; $c4
>1b5f	00					.byte	0											; $c5
>1b60	00					.byte	0											; $c6
>1b61	00					.byte	0											; $c7
>1b62	00					.byte	0											; $c8
>1b63	00					.byte	0											; $c9
>1b64	00					.byte	0											; $ca
>1b65	00					.byte	0											; $cb
>1b66	00					.byte	0											; $cc
>1b67	00					.byte	0											; $cd
>1b68	00					.byte	0											; $ce
>1b69	00					.byte	0											; $cf
>1b6a	00					.byte	0											; $d0
>1b6b	00					.byte	0											; $d1
>1b6c	00					.byte	0											; $d2
>1b6d	00					.byte	0											; $d3
>1b6e	00					.byte	0											; $d4
>1b6f	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1b75	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1b7b	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1b83	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1b8a	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1b90	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1b96	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1b9b	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1ba0	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1ba5	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1baa	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1baf	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1bb5	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bba	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1bc2	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1bc9	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1bce	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1bd3	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1bd9	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1bde	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1be4	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1be9	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1bef	01 28					.byte	$01,$28                                 	; $eb (
>1bf1	01 24					.byte	$01,$24                                 	; $ec $
>1bf3	00					.byte	$00                                     	; $ed [[decimal]]
>1bf4	00					.byte	$00                                     	; $ee [[string]]
>1bf5	01 3d					.byte	$01,$3d                                 	; $ef =
>1bf7	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1bfa	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1bfd	01 3c					.byte	$01,$3c                                 	; $f2 <
>1bff	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1c02	01 3e					.byte	$01,$3e                                 	; $f4 >
>1c04	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1c08	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c0b	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c0f	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c13	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c17	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c1a	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c1d	01 2f					.byte	$01,$2f                                 	; $fc /
>1c1f	01 2a					.byte	$01,$2a                                 	; $fd *
>1c21	01 2d					.byte	$01,$2d                                 	; $fe -
>1c23	01 2b					.byte	$01,$2b                                 	; $ff +
.1c25					AlternateTokens:
>1c25	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1c2b	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1c2f	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1c33	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1c38	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1c3c	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1c43	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1c48	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1c4d	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1c52	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1c58	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1c5d	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1c64	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1c6c	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c6d					VectorTable:
>1c6d	8d 24					.word	Command_REPEAT           ; $80 REPEAT
>1c6f	96 24					.word	Command_UNTIL            ; $81 UNTIL
>1c71	70 25					.word	Command_WHILE            ; $82 WHILE
>1c73	91 25					.word	Command_WEND             ; $83 WEND
>1c75	63 24					.word	IfCommand                ; $84 IF
>1c77	8c 24					.word	EndIf                    ; $85 ENDIF
>1c79	e6 22					.word	Command_DO               ; $86 DO
>1c7b	fe 22					.word	Command_LOOP             ; $87 LOOP
>1c7d	43 15					.word	NoExec08                 ; $88 PROC
>1c7f	da 22					.word	Command_ENDPROC          ; $89 ENDPROC
>1c81	07 23					.word	Command_FOR              ; $8a FOR
>1c83	94 23					.word	Command_NEXT             ; $8b NEXT
>1c85	c9 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c87	25 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c89	85 24					.word	ElseCode                 ; $8e ELSE
>1c8b	43 15					.word	NoExec01                 ; $8f THEN
>1c8d	43 15					.word	NoExec02                 ; $90 TO
>1c8f	43 15					.word	NoExec03                 ; $91 STEP
>1c91	bb 12					.word	CommandLET               ; $92 LET
>1c93	0c 12					.word	Command_Print            ; $93 PRINT
>1c95	05 12					.word	Command_Input            ; $94 INPUT
>1c97	9e 22					.word	Command_CALL             ; $95 CALL
>1c99	2e 15					.word	Command_Sys              ; $96 SYS
>1c9b	82 14					.word	Command_REM              ; $97 REM
>1c9d	ef 22					.word	Command_EXIT             ; $98 EXIT
>1c9f	43 15					.word	NoExec04                 ; $99 ,
>1ca1	43 15					.word	NoExec05                 ; $9a ;
>1ca3	43 15					.word	NoExec06                 ; $9b :
>1ca5	82 14					.word	Command_REM2             ; $9c '
>1ca7	43 15					.word	NoExec07                 ; $9d )
>1ca9	ae 11					.word	Command_Poke             ; $9e POKE
>1cab	ab 11					.word	Command_Doke             ; $9f DOKE
>1cad	0e 14					.word	Command_READ             ; $a0 READ
>1caf	75 14					.word	Command_DATA             ; $a1 DATA
>1cb1	cf 28					.word	NotImplemented           ; $a2
>1cb3	cf 28					.word	NotImplemented           ; $a3
>1cb5	cf 28					.word	NotImplemented           ; $a4
>1cb7	cf 28					.word	NotImplemented           ; $a5
>1cb9	cf 28					.word	NotImplemented           ; $a6
>1cbb	cf 28					.word	NotImplemented           ; $a7
>1cbd	cf 28					.word	NotImplemented           ; $a8
>1cbf	cf 28					.word	NotImplemented           ; $a9
>1cc1	cf 28					.word	NotImplemented           ; $aa
>1cc3	cf 28					.word	NotImplemented           ; $ab
>1cc5	cf 28					.word	NotImplemented           ; $ac
>1cc7	cf 28					.word	NotImplemented           ; $ad
>1cc9	cf 28					.word	NotImplemented           ; $ae
>1ccb	cf 28					.word	NotImplemented           ; $af
>1ccd	cf 28					.word	NotImplemented           ; $b0
>1ccf	cf 28					.word	NotImplemented           ; $b1
>1cd1	cf 28					.word	NotImplemented           ; $b2
>1cd3	cf 28					.word	NotImplemented           ; $b3
>1cd5	cf 28					.word	NotImplemented           ; $b4
>1cd7	cf 28					.word	NotImplemented           ; $b5
>1cd9	cf 28					.word	NotImplemented           ; $b6
>1cdb	cf 28					.word	NotImplemented           ; $b7
>1cdd	cf 28					.word	NotImplemented           ; $b8
>1cdf	cf 28					.word	NotImplemented           ; $b9
>1ce1	cf 28					.word	NotImplemented           ; $ba
>1ce3	cf 28					.word	NotImplemented           ; $bb
>1ce5	cf 28					.word	NotImplemented           ; $bc
>1ce7	cf 28					.word	NotImplemented           ; $bd
>1ce9	cf 28					.word	NotImplemented           ; $be
>1ceb	cf 28					.word	NotImplemented           ; $bf
>1ced	cf 28					.word	NotImplemented           ; $c0
>1cef	cf 28					.word	NotImplemented           ; $c1
>1cf1	cf 28					.word	NotImplemented           ; $c2
>1cf3	cf 28					.word	NotImplemented           ; $c3
>1cf5	cf 28					.word	NotImplemented           ; $c4
>1cf7	cf 28					.word	NotImplemented           ; $c5
>1cf9	cf 28					.word	NotImplemented           ; $c6
>1cfb	cf 28					.word	NotImplemented           ; $c7
>1cfd	cf 28					.word	NotImplemented           ; $c8
>1cff	cf 28					.word	NotImplemented           ; $c9
>1d01	cf 28					.word	NotImplemented           ; $ca
>1d03	cf 28					.word	NotImplemented           ; $cb
>1d05	cf 28					.word	NotImplemented           ; $cc
>1d07	cf 28					.word	NotImplemented           ; $cd
>1d09	cf 28					.word	NotImplemented           ; $ce
>1d0b	cf 28					.word	NotImplemented           ; $cf
>1d0d	cf 28					.word	NotImplemented           ; $d0
>1d0f	cf 28					.word	NotImplemented           ; $d1
>1d11	cf 28					.word	NotImplemented           ; $d2
>1d13	cf 28					.word	NotImplemented           ; $d3
>1d15	cf 28					.word	NotImplemented           ; $d4
>1d17	ad 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1d19	9f 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1d1b	ee 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1d1d	e1 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1d1f	08 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1d21	9f 19					.word	EXPUnaryStr              ; $da STR$(
>1d23	6a 1a					.word	EXPUnaryVal              ; $db VAL(
>1d25	6c 19					.word	EXPUnarySgn              ; $dc SGN(
>1d27	1d 18					.word	EXPUnaryAbs              ; $dd ABS(
>1d29	f1 18					.word	EXPUnaryLen              ; $de LEN(
>1d2b	82 19					.word	EXPUnarySqr              ; $df SQR(
>1d2d	3d 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1d2f	27 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1d31	d3 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1d33	cf 28					.word	NotImplemented           ; $e3 EVENT(
>1d35	cf 28					.word	NotImplemented           ; $e4 TIME
>1d37	e7 18					.word	EXPUnaryInt              ; $e5 INT(
>1d39	c9 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1d3b	4e 18					.word	EXPUnaryDec              ; $e7 DEC(
>1d3d	91 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1d3f	06 19					.word	EXPUnaryRnd              ; $e9 RND(
>1d41	16 19					.word	ExpUnaryRand             ; $ea RAND(
>1d43	ff 18					.word	EXPUnaryParenthesis      ; $eb (
>1d45	c5 18					.word	EXPUnaryNull             ; $ec $
>1d47	9c 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1d49	c6 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1d4b	00 16					.word	EXPCompareEqual          ; $ef =
>1d4d	1b 16					.word	EXPCompareNotEqual       ; $f0 <>
>1d4f	24 16					.word	EXPCompareLessEqual      ; $f1 <=
>1d51	09 16					.word	EXPCompareLess           ; $f2 <
>1d53	2d 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d55	12 16					.word	EXPCompareGreater        ; $f4 >
>1d57	ad 15					.word	EXPBinXor                ; $f5 XOR
>1d59	a1 15					.word	EXPBinOr                 ; $f6 OR
>1d5b	95 15					.word	EXPBinAnd                ; $f7 AND
>1d5d	6d 15					.word	EXPBinIDiv               ; $f8 DIV
>1d5f	7e 15					.word	EXPBinIMod               ; $f9 MOD
>1d61	78 16					.word	EXPBinLeft               ; $fa <<
>1d63	80 16					.word	EXPBinRight              ; $fb >>
>1d65	61 15					.word	EXPBinFDiv               ; $fc /
>1d67	58 15					.word	EXPBinMul                ; $fd *
>1d69	4f 15					.word	EXPBinSub                ; $fe -
>1d6b	46 15					.word	EXPBinAdd                ; $ff +
.1d6d					AlternateVectorTable:
>1d6d	1b 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1d6f	05 14					.word	Command_NEW              ; $8d81 NEW
>1d71	bd 14					.word	Command_RUN              ; $8d82 RUN
>1d73	2b 15					.word	Command_STOP             ; $8d83 STOP
>1d75	28 15					.word	Command_END              ; $8d84 END
>1d77	0d 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1d79	35 13					.word	Command_LIST             ; $8d86 LIST
>1d7b	cf 28					.word	NotImplemented           ; $8d87 SAVE
>1d7d	cf 28					.word	NotImplemented           ; $8d88 LOAD
>1d7f	49 24					.word	Command_GOSUB            ; $8d89 GOSUB
>1d81	d5 11					.word	Command_GOTO             ; $8d8a GOTO
>1d83	57 24					.word	Command_RETURN           ; $8d8b RETURN
>1d85	8f 14					.word	Command_RESTORE          ; $8d8c RESTORE

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d87					TOKDetokenise:
.1d87	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d89	84 27		sty $27				sty 	zTemp2+1
.1d8b	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1d8e					_TOKDLoop:
.1d8e	20 bd 1d	jsr $1dbd			jsr 	TOKDGet 					; get next
.1d91	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1d93	f0 26		beq $1dbb			beq 	_TOKDExit
.1d95	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1d97	f0 1d		beq $1db6			beq 	_TOKDDataItem
.1d99	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1d9b	f0 19		beq $1db6			beq 	_TOKDDataItem
.1d9d	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1d9f	10 05		bpl $1da6			bpl 	_TOKDNotToken
.1da1	20 85 1e	jsr $1e85			jsr 	TOKDToken 					; token to text.
.1da4	80 e8		bra $1d8e			bra 	_TOKDLoop
.1da6					_TOKDNotToken:
.1da6	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1da8	90 05		bcc $1daf			bcc 	_TOKDNotIdentifier
.1daa	20 f8 1d	jsr $1df8			jsr 	TOKDIdentifier
.1dad	80 df		bra $1d8e			bra 	_TOKDLoop
.1daf					_TOKDNotIdentifier:
.1daf	a0 0a		ldy #$0a			ldy 	#10
.1db1	20 41 1e	jsr $1e41			jsr 	TOKDInteger
.1db4	80 d8		bra $1d8e			bra 	_TOKDLoop
.1db6					_TOKDDataItem:
.1db6	20 d3 1d	jsr $1dd3			jsr 	TOKDDataItem
.1db9	80 d3		bra $1d8e			bra 	_TOKDLoop
.1dbb					_TOKDExit:
.1dbb	18		clc				clc
.1dbc	60		rts				rts
.1dbd	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1dbf	e6 26		inc $26				inc 	zTemp2
.1dc1	d0 02		bne $1dc5			bne 	_TKDGExit
.1dc3	e6 27		inc $27				inc 	zTemp2+1
.1dc5					_TKDGExit:
.1dc5	60		rts				rts
.1dc6					TOKDOutput:
.1dc6	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1dc9	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1dcc					TOKSetDetokeniseOutput:
.1dcc	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1dcf	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1dd2	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1dd3					TOKDDataItem:
.1dd3	a8		tay				tay 								; type in Y
.1dd4	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1dd6	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1dd8	f0 02		beq $1ddc			beq 	_TOKDDIsString
.1dda	a9 2e		lda #$2e			lda 	#'.'
.1ddc					_TOKDDIsString:
.1ddc	20 c6 1d	jsr $1dc6			jsr 	TOKDOutput 					; dump it
.1ddf	20 bd 1d	jsr $1dbd			jsr 	TOKDGet 					; get length into X
.1de2	aa		tax				tax
.1de3					_TOKDDOutput:
.1de3	ca		dex				dex 								; are we complete
.1de4	30 08		bmi $1dee			bmi 	_TOKDDEnd
.1de6	20 bd 1d	jsr $1dbd			jsr 	TOKDGet 					; get character and output it
.1de9	20 c6 1d	jsr $1dc6			jsr 	TOKDOutput
.1dec	80 f5		bra $1de3			bra 	_TOKDDOutput
.1dee					_TOKDDEnd:
.1dee	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1df0	d0 05		bne $1df7			bne 	_TOKDDNotString
.1df2	a9 22		lda #$22			lda 	#'"'
.1df4	20 c6 1d	jsr $1dc6			jsr 	TOKDOutput
.1df7					_TOKDDNotString:
.1df7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1df8					TOKDIdentifier:
.1df8	a0 ff		ldy #$ff			ldy 	#$FF
.1dfa	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1dfd					_TOKDLoop:
.1dfd	a8		tay				tay 								; token in Y
.1dfe	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1e00	c0 64		cpy #$64			cpy 	#$64
.1e02	f0 11		beq $1e15			beq 	_TOKDIOutput
.1e04	a9 5f		lda #$5f			lda 	#'_'
.1e06	c0 65		cpy #$65			cpy 	#$65
.1e08	f0 0b		beq $1e15			beq 	_TOKDIOutput
.1e0a	98		tya				tya 								; handle a-z
.1e0b	18		clc				clc
.1e0c	69 21		adc #$21			adc	 	#$21
.1e0e	c0 5a		cpy #$5a			cpy 	#$5A
.1e10	90 03		bcc $1e15			bcc 	_TOKDIOutput
.1e12	38		sec				sec 								; handle 0-9
.1e13	e9 4b		sbc #$4b			sbc 	#$4B
.1e15					_TOKDIOutput:
.1e15	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1e18	10 08		bpl $1e22			bpl 	_TOKDINoSpacing
.1e1a	48		pha				pha
.1e1b	20 b7 1e	jsr $1eb7			jsr 	TOKDSpacing
.1e1e	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1e21	68		pla				pla
.1e22					_TOKDINoSpacing:
.1e22	20 c6 1d	jsr $1dc6			jsr 	TOKDOutput
.1e25	20 bd 1d	jsr $1dbd			jsr 	TOKDGet 					; get next token
.1e28	c9 7c		cmp #$7c			cmp 	#$7C
.1e2a	90 d1		bcc $1dfd			bcc 	_TOKDLoop
.1e2c	f0 12		beq $1e40			beq 	_TOKDIExit 					; it's a number, no tail.
.1e2e	4a		lsr a				lsr 	a 							; string ?
.1e2f	90 07		bcc $1e38			bcc 	_TOKDICheckArray
.1e31	48		pha				pha
.1e32	a9 24		lda #$24			lda 	#"$"
.1e34	20 c6 1d	jsr $1dc6			jsr 	TOKDOutput
.1e37	68		pla				pla
.1e38					_TOKDICheckArray:
.1e38	4a		lsr a				lsr 	a 							; array ?
.1e39	90 05		bcc $1e40			bcc 	_TOKDIExit
.1e3b	a9 28		lda #$28			lda 	#"("
.1e3d	20 c6 1d	jsr $1dc6			jsr 	TOKDOutput
.1e40					_TOKDIExit:
.1e40	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1e41					TOKDInteger:
.1e41	5a		phy				phy 								; save base
.1e42	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1e44	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.1e47					_TOKDILoop:
.1e47	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1e49	c9 40		cmp #$40			cmp 	#$40
.1e4b	b0 1d		bcs $1e6a			bcs 	_TOKDIHaveInteger
.1e4d	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1e4f	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.1e52	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.1e55	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.1e58	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.1e5b	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.1e5e	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.1e61	20 bd 1d	jsr $1dbd			jsr 	TOKDGet 					; OR byte in.
.1e64	05 08		ora $08				ora 	IFR0+IM0
.1e66	85 08		sta $08				sta 	IFR0+IM0
.1e68	80 dd		bra $1e47			bra 	_TOKDILoop
.1e6a					_TOKDIHaveInteger:
.1e6a	7a		ply				ply 								; restore base
.1e6b	98		tya				tya 								; base in A
.1e6c	20 9d 2e	jsr $2e9d			jsr 	IFloatIntegerToStringR0
.1e6f	86 22		stx $22				stx 	zTemp0
.1e71	84 23		sty $23				sty 	zTemp0+1
.1e73	b2 22		lda ($22)			lda 	(zTemp0)
.1e75	20 b7 1e	jsr $1eb7			jsr 	TOKDSpacing 				; check spacing okay.
.1e78	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1e7a					_TOKDOutput:
.1e7a	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e7c	20 c6 1d	jsr $1dc6			jsr 	TOKDOutput
.1e7f	c8		iny				iny
.1e80	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e82	d0 f6		bne $1e7a			bne 	_TOKDOutput
.1e84	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e85					TOKDToken:
.1e85	a2 a9		ldx #$a9			ldx 	#StandardTokens & $FF
.1e87	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e89					_TOKDSearch:
.1e89	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1e8b	84 23		sty $23				sty 	zTemp0+1
.1e8d	aa		tax				tax 								; token ID in X.
.1e8e					_TOKDFind:
.1e8e	ca		dex				dex 								; reached the start
.1e8f	10 0d		bpl $1e9e			bpl 	_TOKDFound
.1e91	38		sec				sec 								; go to next entry
.1e92	b2 22		lda ($22)			lda 	(zTemp0)
.1e94	65 22		adc $22				adc 	zTemp0
.1e96	85 22		sta $22				sta 	zTemp0
.1e98	90 f4		bcc $1e8e			bcc 	_TOKDFind
.1e9a	e6 23		inc $23				inc 	zTemp0+1
.1e9c	80 f0		bra $1e8e			bra 	_TOKDFind
.1e9e					_TOKDFound:
.1e9e	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1ea0	f0 14		beq $1eb6			beq 	_TOKDExit
.1ea2	aa		tax				tax
.1ea3	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1ea5	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1ea7	20 b7 1e	jsr $1eb7			jsr 	TOKDSpacing
.1eaa					_TOKDOutput:
.1eaa	b1 22		lda ($22),y			lda 	(zTemp0),y
.1eac	20 59 22	jsr $2259			jsr 	TOKToLower
.1eaf	20 c6 1d	jsr $1dc6			jsr 	TOKDOutput
.1eb2	c8		iny				iny
.1eb3	ca		dex				dex
.1eb4	d0 f4		bne $1eaa			bne 	_TOKDOutput
.1eb6					_TOKDExit:
.1eb6	60		rts				rts
.1eb7					TOKDSpacing:
.1eb7	20 70 22	jsr $2270			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1eba	90 0d		bcc $1ec9			bcc 	_TOKDSExit
.1ebc	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1ebf	20 70 22	jsr $2270			jsr 	TOKIsIdentifierElement
.1ec2	90 05		bcc $1ec9			bcc 	_TOKDSExit
.1ec4	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1ec6	20 c6 1d	jsr $1dc6			jsr 	TOKDOutput
.1ec9					_TOKDSExit:
.1ec9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1eca					PGMDeleteLine:
.1eca	20 7d 1f	jsr $1f7d			jsr 	PGMEndProgram 				; end of program into zTemp0
.1ecd	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1ecf	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1ed2	85 25		sta $25				sta 	zTemp1+1
.1ed4					_PGMDLoop:
.1ed4	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1ed6	38		sec				sec
.1ed7	f0 3a		beq $1f13			beq 	_PGMDExit
.1ed9	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1edb	b1 24		lda ($24),y			lda 	(zTemp1),y
.1edd	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1ee0	d0 08		bne $1eea			bne 	_PGMDNext
.1ee2	c8		iny				iny
.1ee3	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ee5	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1ee8	f0 0d		beq $1ef7			beq 	_PGMDDelete
.1eea					_PGMDNext:
.1eea	18		clc				clc
.1eeb	b2 24		lda ($24)			lda 	(zTemp1)
.1eed	65 24		adc $24				adc 	zTemp1
.1eef	85 24		sta $24				sta 	zTemp1
.1ef1	90 e1		bcc $1ed4			bcc 	_PGMDLoop
.1ef3	e6 25		inc $25				inc 	zTemp1+1
.1ef5	80 dd		bra $1ed4			bra 	_PGMDLoop
.1ef7					_PGMDDelete:
.1ef7	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1ef9	a8		tay				tay
.1efa					_PGMDCopy:
.1efa	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1efc	92 24		sta ($24)			sta 	(zTemp1)
.1efe	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1f00	c5 22		cmp $22				cmp 	zTemp0
.1f02	d0 07		bne $1f0b			bne 	_PGMDNext2
.1f04	a5 25		lda $25				lda 	zTemp1+1
.1f06	c5 23		cmp $23				cmp 	zTemp0+1
.1f08	18		clc				clc
.1f09	f0 08		beq $1f13			beq 	_PGMDExit
.1f0b					_PGMDNext2:
.1f0b	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1f0d	d0 eb		bne $1efa			bne 	_PGMDCopy
.1f0f	e6 25		inc $25				inc 	zTemp1+1
.1f11	80 e7		bra $1efa			bra 	_PGMDCopy
.1f13					_PGMDExit:
.1f13	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1f14					PGMInsertLine:
.1f14	20 7d 1f	jsr $1f7d			jsr 	PGMEndProgram 				; end of program into zTemp0
.1f17	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1f19	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f1c	85 25		sta $25				sta 	zTemp1+1
.1f1e					_PGMILoop:
.1f1e	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1f20	f0 1c		beq $1f3e			beq 	_PGMIInsert
.1f22	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1f24	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f26	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1f29	c8		iny				iny
.1f2a	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f2c	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1f2f	b0 0d		bcs $1f3e			bcs 	_PGMIInsert 				; insert here.
.1f31	18		clc				clc
.1f32	b2 24		lda ($24)			lda 	(zTemp1)
.1f34	65 24		adc $24				adc 	zTemp1
.1f36	85 24		sta $24				sta 	zTemp1
.1f38	90 e4		bcc $1f1e			bcc 	_PGMILoop
.1f3a	e6 25		inc $25				inc 	zTemp1+1
.1f3c	80 e0		bra $1f1e			bra 	_PGMILoop
.1f3e					_PGMIInsert:
.1f3e	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1f41					_PGMIInsertLoop:
.1f41	b2 22		lda ($22)			lda 	(zTemp0)
.1f43	91 22		sta ($22),y			sta 	(zTemp0),y
.1f45	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1f47	c5 22		cmp $22				cmp 	zTemp0
.1f49	d0 06		bne $1f51			bne 	_PGMINext
.1f4b	a5 25		lda $25				lda 	zTemp1+1
.1f4d	c5 23		cmp $23				cmp 	zTemp0+1
.1f4f	f0 0a		beq $1f5b			beq 	_PGMIInserted
.1f51					_PGMINext:
.1f51	a5 22		lda $22				lda 	zTemp0
.1f53	d0 02		bne $1f57			bne 	_PGMINoBorrow
.1f55	c6 23		dec $23				dec 	zTemp0+1
.1f57					_PGMINoBorrow:
.1f57	c6 22		dec $22				dec 	zTemp0
.1f59	80 e6		bra $1f41			bra 	_PGMIInsertLoop
.1f5b					_PGMIInserted:
.1f5b	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1f5d					_PGMICopyLoop:
.1f5d	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1f60	91 24		sta ($24),y			sta 	(zTemp1),y
.1f62	c8		iny				iny
.1f63	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1f66	d0 f5		bne $1f5d			bne 	_PGMICopyLoop
.1f68	18		clc				clc
.1f69	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f6a					PGMSetBaseAddress:
.1f6a	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.1f6d	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.1f70	60		rts				rts
.1f71					PGMNewProgram:
.1f71	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f73	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f76	85 23		sta $23				sta 	zTemp0+1
.1f78	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.1f7a	92 22		sta ($22)			sta 	(zTemp0)
.1f7c	60		rts				rts
.1f7d					PGMEndProgram:
.1f7d	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f7f	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f82	85 23		sta $23				sta 	zTemp0+1
.1f84					_PGMEPLoop:
.1f84	b2 22		lda ($22)			lda 	(zTemp0) 					; reached end ?
.1f86	f0 0b		beq $1f93			beq 	_PGMEPExit
.1f88	18		clc				clc 								; no, advance to next
.1f89	65 22		adc $22				adc 	zTemp0
.1f8b	85 22		sta $22				sta 	zTemp0
.1f8d	90 f5		bcc $1f84			bcc 	_PGMEPLoop
.1f8f	e6 23		inc $23				inc 	zTemp0+1
.1f91	80 f1		bra $1f84			bra 	_PGMEPLoop
.1f93					_PGMEPExit:
.1f93	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1f94					TOKResetElement:
.1f94	9c 1c 05	stz $051c			stz 	TOKElement
.1f97	60		rts				rts
.1f98					TOKWriteElement:
.1f98	da		phx				phx
.1f99	ae 1c 05	ldx $051c			ldx 	TOKElement
.1f9c	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1f9f	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1fa2	fa		plx				plx
.1fa3	ee 1c 05	inc $051c			inc 	TOKElement
.1fa6	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1fa7					TOKTokeniseConstant:
.1fa7	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1fa9	48		pha				pha 								; save on stack
.1faa	29 c0		and #$c0			and 	#$C0
.1fac	05 09		ora $09				ora 	IFR0+IM1
.1fae	05 0a		ora $0a				ora 	IFR0+IM2
.1fb0	f0 10		beq $1fc2			beq 	_TTCLess
.1fb2	da		phx				phx
.1fb3	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1fb5					_TTCShiftRight:
.1fb5	46 0a		lsr $0a				lsr 	IFR0+IM2
.1fb7	66 09		ror $09				ror 	IFR0+IM1
.1fb9	66 08		ror $08				ror 	IFR0+IM0
.1fbb	ca		dex				dex
.1fbc	d0 f7		bne $1fb5			bne 	_TTCShiftRight
.1fbe	fa		plx				plx
.1fbf	20 a7 1f	jsr $1fa7			jsr 	TOKTokeniseConstant
.1fc2					_TTCLess:
.1fc2	68		pla				pla
.1fc3	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1fc5	20 64 20	jsr $2064			jsr 	TOKWriteA
.1fc8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1fc9					TOKTokeniseDecimals:
.1fc9	20 77 20	jsr $2077			jsr 	TOKGetNext 					; consume the .
.1fcc	20 dd 21	jsr $21dd			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fcf	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1fd1	20 64 20	jsr $2064			jsr 	TOKWriteA
.1fd4	20 d9 1f	jsr $1fd9			jsr 	TOKOutputElementBuffer 		; then the buffer
.1fd7	18		clc				clc
.1fd8	60		rts				rts
.1fd9					TOKOutputElementBuffer:
.1fd9	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1fdc	20 64 20	jsr $2064			jsr 	TOKWriteA
.1fdf	a8		tay				tay 								; put in Y
.1fe0	f0 0c		beq $1fee			beq 	_TOEExit 					; exit if empty which is okay.
.1fe2	a2 01		ldx #$01			ldx 	#1
.1fe4					_TOELoop:
.1fe4	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.1fe7	20 64 20	jsr $2064			jsr 	TOKWriteA
.1fea	e8		inx				inx
.1feb	88		dey				dey
.1fec	d0 f6		bne $1fe4			bne 	_TOELoop
.1fee					_TOEExit:
.1fee	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1fef					TOKTokenise:
.1fef	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.1ff2	8e 1c 06	stx $061c			stx 	TOKDataSource
.1ff5	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1ff7	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.1ffa	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1ffc	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1fff	9c 01 04	stz $0401			stz 	TOKLineNumber
.2002	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2005					_TOKMainLoop:
.2005	20 73 20	jsr $2073			jsr 	TOKGet 						; what follows.
.2008	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.200a	f0 4f		beq $205b			beq 	_TOKExit
.200c	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.200e	d0 05		bne $2015			bne 	_TOKElement
.2010	20 77 20	jsr $2077			jsr 	TOKGetNext
.2013	80 f0		bra $2005			bra 	_TOKMainLoop
.2015					_TOKElement:
.2015	20 64 22	jsr $2264			jsr 	TOKIsDigit 					; is it 0..9
.2018	90 0a		bcc $2024			bcc 	_TOKNotDigit
.201a	20 b4 21	jsr $21b4			jsr 	TOKTokeniseInteger 			; get integer
.201d	b0 43		bcs $2062			bcs 	_TOKFail 					; did it fail ?
.201f	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2022	80 e1		bra $2005			bra 	_TOKMainLoop
.2024					_TOKNotDigit:
.2024	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2027	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.2029	d0 07		bne $2032			bne 	_TOKNotHex
.202b	20 c0 20	jsr $20c0			jsr 	TOKTokeniseHexadecimal
.202e	b0 32		bcs $2062			bcs 	_TOKFail
.2030	80 d3		bra $2005			bra 	_TOKMainLoop
.2032					_TOKNotHex:
.2032	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2034	d0 07		bne $203d			bne 	_TOKNotDecimal
.2036	20 c9 1f	jsr $1fc9			jsr 	TOKTokeniseDecimals
.2039	b0 27		bcs $2062			bcs 	_TOKFail
.203b	80 c8		bra $2005			bra 	_TOKMainLoop
.203d					_TOKNotDecimal:
.203d	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.203f	d0 07		bne $2048			bne 	_TOKNotString
.2041	20 2b 22	jsr $222b			jsr 	TOKTokeniseString
.2044	b0 1c		bcs $2062			bcs 	_TOKFail
.2046	80 bd		bra $2005			bra 	_TOKMainLoop
.2048					_TOKNotString:
.2048	20 81 22	jsr $2281			jsr 	TOKIsAlpha 					; identifier ?
.204b	b0 07		bcs $2054			bcs 	_TOKIdentifier
.204d	20 f1 21	jsr $21f1			jsr 	TOKTokenisePunctuation 		; punctuation
.2050	b0 10		bcs $2062			bcs 	_TOKFail
.2052	80 b1		bra $2005			bra 	_TOKMainLoop
.2054					_TOKIdentifier:
.2054	20 fa 20	jsr $20fa			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2057	b0 09		bcs $2062			bcs 	_TOKFail
.2059	80 aa		bra $2005			bra 	_TOKMainLoop
.205b					_TOKExit:
.205b	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.205d	20 64 20	jsr $2064			jsr 	TOKWriteA
.2060	18		clc				clc									; return with carry set.
.2061	60		rts				rts
.2062					_TOKFail:
.2062	38		sec				sec
.2063	60		rts				rts
.2064					TOKWriteA:
.2064	da		phx				phx
.2065	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2068	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.206b	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.206e	fa		plx				plx
.206f	ee 00 04	inc $0400			inc 	TOKLineSize
.2072	60		rts				rts
.2073					TOKGet:
.2073	18		clc				clc
.2074	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.2077					TOKGetNext:
.2077	38		sec				sec
.2078	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.207b					TOKFindToken:
.207b	a2 a9		ldx #$a9			ldx 	#StandardTokens & $FF 		; do this table
.207d	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.207f	20 8a 20	jsr $208a			jsr 	TOKFindTokenXY 				; find it, or not
.2082	90 04		bcc $2088			bcc 	_TOKFTFail
.2084	a2 00		ldx #$00			ldx 	#0
.2086	38		sec				sec
.2087	60		rts				rts
.2088					_TOKFTFail
.2088	18		clc				clc
.2089	60		rts				rts
.208a					TOKFindTokenXY:
.208a	86 22		stx $22				stx 	zTemp0 						; save token table address
.208c	84 23		sty $23				sty 	zTemp0+1
.208e	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.2090	8d 1f 06	sta $061f			sta 	TOKCurrent
.2093					_TOKFindLoop:
.2093	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.2095	18		clc				clc 		 						; clear carry in case of fail
.2096	30 17		bmi $20af			bmi 	_TOKExit 					; end of table, fail, so return CC.
.2098	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.209b	d0 13		bne $20b0			bne 	_TOKNext 					; different, try next.
.209d	aa		tax				tax 								; number of chars to compare.
.209e	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.20a0					_TOKCompare:
.20a0	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.20a2	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.20a5	d0 09		bne $20b0			bne 	_TOKNext 					; different ? try next
.20a7	c8		iny				iny 								; compare next two
.20a8	ca		dex				dex
.20a9	d0 f5		bne $20a0			bne 	_TOKCompare 				; until done X characters.
.20ab	38		sec				sec
.20ac	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.20af					_TOKExit:
.20af	60		rts				rts
.20b0					_TOKNext:
.20b0	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.20b3	38		sec				sec 								; add length+1 to ptr
.20b4	b2 22		lda ($22)			lda 	(zTemp0)
.20b6	65 22		adc $22				adc 	zTemp0
.20b8	85 22		sta $22				sta 	zTemp0
.20ba	90 d7		bcc $2093			bcc 	_TOKFindLoop
.20bc	e6 23		inc $23				inc 	zTemp0+1
.20be	80 d3		bra $2093			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.20c0					TOKTokeniseHexadecimal:
.20c0	20 77 20	jsr $2077			jsr 	TOKGetNext 					; consume the $
.20c3	a2 08		ldx #$08			ldx 	#IFR0
.20c5	20 fb 30	jsr $30fb			jsr 	IFloatSetZero 				; set R0 = 0
.20c8					_TTHLoop:
.20c8	20 73 20	jsr $2073			jsr 	TOKGet 						; keep getting and copying while numeric.
.20cb	20 8e 22	jsr $228e			jsr 	TOKIsHexadecimal
.20ce	90 20		bcc $20f0			bcc 	_TTHDone
.20d0	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.20d2	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.20d5	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.20d8	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.20db	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.20de	20 77 20	jsr $2077			jsr 	TOKGetNext
.20e1	38		sec				sec 								; convert to decimal.
.20e2	e9 30		sbc #$30			sbc 	#48
.20e4	c9 0a		cmp #$0a			cmp 	#10
.20e6	90 02		bcc $20ea			bcc 	_TTHNotAlpha
.20e8	e9 07		sbc #$07			sbc 	#7
.20ea					_TTHNotAlpha:
.20ea	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.20ec	85 08		sta $08				sta 	IFR0+IM0
.20ee	80 d8		bra $20c8			bra 	_TTHLoop
.20f0					_TTHDone:
.20f0	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.20f2	20 64 20	jsr $2064			jsr 	TOKWriteA
.20f5	20 a7 1f	jsr $1fa7			jsr 	TOKTokeniseConstant 		; write integer out.
.20f8	18		clc				clc
.20f9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.20fa					TOKTokeniseIdentifier:
.20fa	20 94 1f	jsr $1f94			jsr 	TOKResetElement 			; extract an identifier
.20fd					_TOKGetIdentifier:
.20fd	20 73 20	jsr $2073			jsr 	TOKGet
.2100	20 4e 22	jsr $224e			jsr 	TOKToUpper
.2103	20 70 22	jsr $2270			jsr 	TOKIsIdentifierElement
.2106	90 08		bcc $2110			bcc 	_TOKEndIdent
.2108	20 98 1f	jsr $1f98			jsr		TOKWriteElement
.210b	20 77 20	jsr $2077			jsr 	TOKGetNext
.210e	80 ed		bra $20fd			bra 	_TOKGetIdentifier
.2110					_TOKEndIdent:
.2110	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.2112	d0 06		bne $211a			bne 	_TOKNotString
.2114	20 98 1f	jsr $1f98			jsr 	TOKWriteElement 			; add it
.2117	20 77 20	jsr $2077			jsr 	TOKGetNext 					; consume it
.211a					_TOKNotString:
.211a	20 73 20	jsr $2073			jsr 	TOKGet 						; finally check for (
.211d	c9 28		cmp #$28			cmp 	#"("
.211f	d0 06		bne $2127			bne 	_TOKNoArray
.2121	20 98 1f	jsr $1f98			jsr 	TOKWriteElement 			; add it
.2124	20 77 20	jsr $2077			jsr 	TOKGetNext 					; consume it
.2127					_TOKNoArray:
.2127	20 7b 20	jsr $207b			jsr 	TOKFindToken 				; find it
.212a	90 0e		bcc $213a			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.212c	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.212e	f0 05		beq $2135			beq 	_TOKComment 				; yes, do comment code.
.2130	20 64 20	jsr $2064			jsr 	TOKWriteA
.2133	18		clc				clc
.2134	60		rts				rts
.2135					_TOKComment:
.2135	20 81 21	jsr $2181			jsr 	TOKDoComment
.2138	18		clc				clc
.2139	60		rts				rts
.213a					_TOKIsVariable:
.213a	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.213c					_TOKOutputBuffer:
.213c	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.213f	20 68 21	jsr $2168			jsr 	TOKTranslateIdentifier
.2142	20 64 20	jsr $2064			jsr 	TOKWriteA
.2145	e8		inx				inx
.2146	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.2149	20 70 22	jsr $2270			jsr 	TOKIsIdentifierElement
.214c	b0 ee		bcs $213c			bcs 	_TOKOutputBuffer
.214e	a8		tay				tay 								; last char in Y
.214f	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2151	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2153	f0 0e		beq $2163			beq 	_TOKIVExit
.2155	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2157	d0 04		bne $215d			bne 	_TOKIVCheckArray 			; no, check for (
.2159	1a		inc a				inc 	a 							; token is $7D
.215a	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.215d					_TOKIVCheckArray:
.215d	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.215f	d0 02		bne $2163			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2161	1a		inc a				inc 	a
.2162	1a		inc a				inc 	a
.2163					_TOKIVExit:
.2163	20 64 20	jsr $2064			jsr 	TOKWriteA 					; ending token
.2166	18		clc				clc
.2167	60		rts				rts
.2168					TOKTranslateIdentifier:
.2168	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.216a	f0 0f		beq $217b			beq 	_TTI64
.216c	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.216e	f0 0e		beq $217e			beq 	_TTI65
.2170	38		sec				sec
.2171	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2173	10 03		bpl $2178			bpl 	_TTIExit
.2175	18		clc				clc 								; map 09 onto 26-35
.2176	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2178					_TTIExit:
.2178	09 40		ora #$40			ora 	#$40 						; correct range.
.217a	60		rts				rts
.217b	a9 64		lda #$64	_TTI64:	lda 	#$64
.217d	60		rts				rts
.217e	a9 65		lda #$65	_TTI65:	lda 	#$65
.2180	60		rts				rts
.2181					TOKDoComment:
.2181	20 64 20	jsr $2064			jsr 	TOKWriteA					; output the token.
.2184					_TOKSkipSpaces:
.2184	20 73 20	jsr $2073			jsr 	TOKGet 						; skip over spaces
.2187	c9 20		cmp #$20			cmp 	#' '
.2189	d0 05		bne $2190			bne 	_TOKEndSpaces
.218b	20 77 20	jsr $2077			jsr 	TOKGetNext
.218e	80 f4		bra $2184			bra 	_TOKSkipSpaces
.2190					_TOKEndSpaces:
.2190	48		pha				pha 								; save it
.2191	68		pla				pla
.2192	f0 04		beq $2198			beq 	_TOKDCExit 					; end of line.
.2194	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.2196	d0 01		bne $2199			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.2198					_TOKDCExit:
.2198	60		rts				rts
.2199					_TOKDCDoLine:
.2199	20 94 1f	jsr $1f94			jsr 	TOKResetElement 			; start getting the string
.219c					_TOKDCLoop:
.219c	20 73 20	jsr $2073			jsr 	TOKGet 						; check EOL
.219f	c9 00		cmp #$00			cmp 	#0
.21a1	f0 08		beq $21ab			beq 	_TOKDCEndComment
.21a3	20 77 20	jsr $2077			jsr 	TOKGetNext 					; get and consume
.21a6	20 98 1f	jsr $1f98			jsr 	TOKWriteElement
.21a9	80 f1		bra $219c			bra 	_TOKDCLoop
.21ab					_TOKDCEndComment:
.21ab	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.21ad	20 64 20	jsr $2064			jsr 	TOKWriteA
.21b0	20 d9 1f	jsr $1fd9			jsr 	TOKOutputElementBuffer
.21b3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.21b4					TOKTokeniseInteger:
.21b4	20 dd 21	jsr $21dd			jsr 	TOKExtractInteger 			; pull an integer out as text.
.21b7	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.21b9	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.21bb	ad 1c 05	lda $051c			lda		TOKElement
.21be	20 5f 2f	jsr $2f5f			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.21c1	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.21c4	f0 12		beq $21d8			beq 	_TOKNotLineNumber
.21c6	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.21c8	d0 0c		bne $21d6			bne 	_TOKBadLineNumeber
.21ca	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.21cc	8d 01 04	sta $0401			sta 	TOKLineNumber
.21cf	a5 09		lda $09				lda 	IFR0+IM1
.21d1	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.21d4	18		clc				clc
.21d5	60		rts				rts
.21d6					_TOKBadLineNumeber:
.21d6	38		sec				sec
.21d7	60		rts				rts
.21d8					_TOKNotLineNumber:
.21d8	20 a7 1f	jsr $1fa7			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.21db	18		clc				clc
.21dc	60		rts				rts
.21dd					TOKExtractInteger:
.21dd	20 94 1f	jsr $1f94			jsr 	TOKResetElement 			; restart
.21e0					_TTILoop:
.21e0	20 73 20	jsr $2073			jsr 	TOKGet 						; keep getting and copying while numeric.
.21e3	20 64 22	jsr $2264			jsr 	TOKIsDigit
.21e6	90 08		bcc $21f0			bcc 	_TOKEIExit
.21e8	20 98 1f	jsr $1f98			jsr 	TOKWriteElement
.21eb	20 77 20	jsr $2077			jsr 	TOKGetNext
.21ee	80 f0		bra $21e0			bra 	_TTILoop
.21f0					_TOKEIExit:
.21f0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.21f1					TOKTokenisePunctuation:
.21f1	20 94 1f	jsr $1f94			jsr 	TOKResetElement 			; copy first punctuation character into element.
.21f4	20 77 20	jsr $2077			jsr 	TOKGetNext
.21f7	20 98 1f	jsr $1f98			jsr 	TOKWriteElement
.21fa	20 73 20	jsr $2073			jsr 	TOKGet 						; what follows ?
.21fd	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.21ff	f0 10		beq $2211			beq 	_TTPOne
.2201	20 78 22	jsr $2278			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2204	b0 0b		bcs $2211			bcs 	_TTPOne 					; these speed things up a bit.
.2206	20 98 1f	jsr $1f98			jsr 	TOKWriteElement 			; this is what we will search for.
.2209	20 7b 20	jsr $207b			jsr 	TOKFindToken
.220c	b0 0a		bcs $2218			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.220e	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.2211					_TTPOne:
.2211	20 7b 20	jsr $207b			jsr 	TOKFindToken 				; look for one character punctuation
.2214	b0 07		bcs $221d			bcs 	_TTPOutputExit 				; we found it
.2216	38		sec				sec 								; not recognised.
.2217	60		rts				rts
.2218					_TTPConsumeExit:
.2218	48		pha				pha
.2219	20 77 20	jsr $2077			jsr 	TOKGetNext 					; get the 2nd char out.
.221c	68		pla				pla
.221d					_TTPOutputExit:
.221d	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.221f	f0 05		beq $2226			beq 	_TTPComment
.2221	20 64 20	jsr $2064			jsr  	TOKWriteA 					; write token out
.2224	18		clc				clc
.2225	60		rts				rts
.2226					_TTPComment:
.2226	20 81 21	jsr $2181			jsr 	TOKDoComment
.2229	18		clc				clc
.222a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.222b					TOKTokeniseString:
.222b	20 77 20	jsr $2077			jsr 	TOKGetNext 					; consume the "
.222e	20 94 1f	jsr $1f94			jsr 	TOKResetElement 			; start getting the string
.2231					_TOKTSLoop:
.2231	20 73 20	jsr $2073			jsr 	TOKGet 						; check EOL
.2234	c9 00		cmp #$00			cmp 	#0
.2236	f0 0c		beq $2244			beq 	_TOKTSExit
.2238	20 77 20	jsr $2077			jsr 	TOKGetNext 					; get and consume
.223b	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.223d	f0 05		beq $2244			beq 	_TOKTSExit
.223f	20 98 1f	jsr $1f98			jsr 	TOKWriteElement
.2242	80 ed		bra $2231			bra 	_TOKTSLoop
.2244					_TOKTSExit:
.2244	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2246	20 64 20	jsr $2064			jsr 	TOKWriteA
.2249	20 d9 1f	jsr $1fd9			jsr 	TOKOutputElementBuffer
.224c	18		clc				clc
.224d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.224e					TOKToUpper:
.224e	c9 61		cmp #$61			cmp 	#"a"
.2250	90 06		bcc $2258			bcc 	_TTUNotLower
.2252	c9 7b		cmp #$7b			cmp 	#"z"+1
.2254	b0 02		bcs $2258			bcs 	_TTUNotLower
.2256	49 20		eor #$20			eor 	#$20
.2258					_TTUNotLower:
.2258	60		rts				rts
.2259					TOKToLower:
.2259	c9 41		cmp #$41			cmp 	#"A"
.225b	90 06		bcc $2263			bcc 	_TTUNotUpper
.225d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.225f	b0 02		bcs $2263			bcs 	_TTUNotUpper
.2261	49 20		eor #$20			eor 	#$20
.2263					_TTUNotUpper:
.2263	60		rts				rts
.2264					TOKIsDigit:
.2264	c9 30		cmp #$30			cmp 	#"0"
.2266	90 06		bcc $226e			bcc 	TOKFail
.2268	c9 3a		cmp #$3a			cmp 	#"9"+1
.226a	b0 02		bcs $226e			bcs 	TOKFail
.226c					TOKSucceed:
.226c	38		sec				sec
.226d	60		rts				rts
.226e					TOKFail:
.226e	18		clc				clc
.226f	60		rts				rts
.2270					TOKIsIdentifierElement:
.2270	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.2272	f0 f8		beq $226c			beq 	TOKSucceed
.2274	c9 5f		cmp #$5f			cmp 	#"_"
.2276	f0 f4		beq $226c			beq 	TOKSucceed 					; else fall through to alphanumeric
.2278					TOKIsAlphaNumeric:
.2278	20 81 22	jsr $2281			jsr 	TOKIsAlpha
.227b	b0 ef		bcs $226c			bcs 	TOKSucceed
.227d	20 64 22	jsr $2264			jsr 	TOKIsDigit
.2280	60		rts				rts
.2281					TOKIsAlpha:
.2281	20 4e 22	jsr $224e			jsr 	TOKToUpper
.2284	c9 41		cmp #$41			cmp 	#"A"
.2286	90 e6		bcc $226e			bcc 	TOKFail
.2288	c9 5b		cmp #$5b			cmp 	#"Z"+1
.228a	b0 e2		bcs $226e			bcs 	TOKFail
.228c	80 de		bra $226c			bra 	TOKSucceed
.228e					TOKIsHexadecimal:
.228e	20 64 22	jsr $2264			jsr		TOKIsDigit
.2291	b0 d9		bcs $226c			bcs 	TOKSucceed
.2293	20 81 22	jsr $2281			jsr 	TOKIsAlpha
.2296	90 d6		bcc $226e			bcc 	TOKFail
.2298	c9 47		cmp #$47			cmp 	#"F"+1
.229a	b0 d2		bcs $226e			bcs 	TOKFail
.229c	80 ce		bra $226c			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.229e					Command_CALL:
.229e	a9 42		lda #$42			lda 	#STK_CALL
.22a0	20 6b 27	jsr $276b			jsr 	StackOpen
.22a3	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.22a5	29 c0		and #$c0			and 	#$C0
.22a7	c9 40		cmp #$40			cmp 	#$40
.22a9	d0 29		bne $22d4			bne 	_CCSyntax
.22ab	20 3e 2a	jsr $2a3e			jsr 	VARGetInfo 					; get the information
.22ae	20 52 27	jsr $2752			jsr 	ERRCheckRParen 				; check right bracket follows.
.22b1	20 f0 29	jsr $29f0			jsr 	VARFind 					; exists ?
.22b4	90 21		bcc $22d7			bcc 	_CCUnknown
.22b6	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.22b8	85 22		sta $22				sta 	zTemp0
.22ba	20 9f 27	jsr $279f			jsr 	STKSaveCodePosition 		; save return address on stack.
.22bd	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.22bf	b1 22		lda ($22),y			lda 	(zTemp0),y
.22c1	c9 ff		cmp #$ff			cmp 	#$FF
.22c3	d0 12		bne $22d7			bne 	_CCUnknown
.22c5	88		dey				dey 								; get Y offset to stack
.22c6	b1 22		lda ($22),y			lda 	(zTemp0),y
.22c8	48		pha				pha
.22c9	88		dey				dey 								; get address
.22ca	b1 22		lda ($22),y			lda 	(zTemp0),y
.22cc	85 19		sta $19				sta 	codePtr+1
.22ce	b2 22		lda ($22)			lda 	(zTemp0)
.22d0	85 18		sta $18				sta 	codePtr
.22d2	7a		ply				ply 								; restore Y
.22d3	60		rts				rts
.22d4					_CCSyntax:
.22d4	4c 9d 25	jmp $259d		jmp	ErrorV_syntax
.22d7					_CCUnknown:
.22d7	4c 12 27	jmp $2712		jmp	ErrorV_unknown
.22da					Command_ENDPROC:
.22da	a9 42		lda #$42			lda 	#STK_CALL
.22dc	20 97 27	jsr $2797			jsr 	StackCheckFrame
.22df	20 b1 27	jsr $27b1			jsr 	STKLoadCodePosition 		; return
.22e2	20 89 27	jsr $2789			jsr 	StackClose
.22e5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.22e6					Command_DO:
.22e6	a9 22		lda #$22			lda 	#STK_DO
.22e8	20 6b 27	jsr $276b			jsr 	StackOpen
.22eb	20 9f 27	jsr $279f			jsr 	STKSaveCodePosition 		; save loop position
.22ee	60		rts				rts
.22ef					Command_EXIT:
.22ef	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.22f1	20 97 27	jsr $2797			jsr 	StackCheckFrame
.22f4	20 89 27	jsr $2789			jsr 	StackClose 					; close it
.22f7	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.22f9	aa		tax				tax
.22fa	20 ad 24	jsr $24ad			jsr 	ScanForward
.22fd	60		rts				rts
.22fe					Command_LOOP:
.22fe	a9 22		lda #$22			lda 	#STK_DO
.2300	20 97 27	jsr $2797			jsr 	StackCheckFrame
.2303	20 b1 27	jsr $27b1			jsr 	STKLoadCodePosition 		; loop back
.2306	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2307					Command_FOR:
.2307	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2309	20 6b 27	jsr $276b			jsr 	StackOpen
.230c	20 bb 12	jsr $12bb			jsr 	CommandLET 					; do "I = 1" bit
.230f	5a		phy				phy 								; save variable address to +4,+5
.2310	a0 04		ldy #$04			ldy 	#4
.2312	a5 22		lda $22				lda 	zTemp0
.2314	91 2a		sta ($2a),y			sta 	(basicStack),y
.2316	c8		iny				iny
.2317	a5 23		lda $23				lda 	zTemp0+1
.2319	91 2a		sta ($2a),y			sta 	(basicStack),y
.231b	7a		ply				ply
.231c	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.231e	20 62 27	jsr $2762			jsr 	ERRCheckA
.2321	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2324	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2326	a2 08		ldx #$08			ldx 	#IFR0
.2328	20 7d 23	jsr $237d			jsr 	CFSaveR0X
.232b	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.232d	c9 91		cmp #$91			cmp 	#PR_STEP
.232f	d0 06		bne $2337			bne 	_CFStep1
.2331	c8		iny				iny 								; consume step
.2332	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; evaluate STEP
.2335	80 24		bra $235b			bra 	_CFWriteStep
.2337					_CFStep1:
.2337	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2339	a9 01		lda #$01			lda 	#1
.233b	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.233e	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.233f	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2341	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2343	85 22		sta $22				sta 	zTemp0
.2345	c8		iny				iny
.2346	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2348	85 23		sta $23				sta 	zTemp0+1
.234a	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.234c	b1 22		lda ($22),y			lda 	(zTemp0),y
.234e	d0 0a		bne $235a			bne 	_CFNotOptimised
.2350	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2352	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2354	d0 04		bne $235a			bne 	_CFNotOptimised
.2356	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2358	85 0b		sta $0b				sta 	IFR0+IExp
.235a					_CFNotOptimised:
.235a	7a		ply				ply
.235b					_CFWriteStep:
.235b	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.235d	a9 06		lda #$06			lda 	#6
.235f	20 7d 23	jsr $237d			jsr 	CFSaveR0X
.2362	20 9f 27	jsr $279f			jsr 	STKSaveCodePosition 		; save loop position
.2365	60		rts				rts
.2366					CFLoadR0X:
.2366	5a		phy				phy
.2367	a8		tay				tay
.2368	b1 2a		lda ($2a),y			lda 	(basicStack),y
.236a	95 00		sta $00,x			sta 	IM0,x
.236c	c8		iny				iny
.236d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.236f	95 01		sta $01,x			sta 	IM1,x
.2371	c8		iny				iny
.2372	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2374	95 02		sta $02,x			sta 	IM2,x
.2376	c8		iny				iny
.2377	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2379	95 03		sta $03,x			sta 	IExp,x
.237b	7a		ply				ply
.237c	60		rts				rts
.237d					CFSaveR0X:
.237d	5a		phy				phy
.237e	a8		tay				tay
.237f	b5 00		lda $00,x			lda 	IM0,x
.2381	91 2a		sta ($2a),y			sta 	(basicStack),y
.2383	c8		iny				iny
.2384	b5 01		lda $01,x			lda 	IM1,x
.2386	91 2a		sta ($2a),y			sta 	(basicStack),y
.2388	c8		iny				iny
.2389	b5 02		lda $02,x			lda 	IM2,x
.238b	91 2a		sta ($2a),y			sta 	(basicStack),y
.238d	c8		iny				iny
.238e	b5 03		lda $03,x			lda 	IExp,x
.2390	91 2a		sta ($2a),y			sta 	(basicStack),y
.2392	7a		ply				ply
.2393	60		rts				rts
.2394					Command_NEXT:
.2394	a9 37		lda #$37			lda 	#STK_FOR
.2396	20 97 27	jsr $2797			jsr 	StackCheckFrame
.2399	5a		phy				phy 								; check optimised loop
.239a	a0 09		ldy #$09			ldy 	#9
.239c	b1 2a		lda ($2a),y			lda 	(basicStack),y
.239e	7a		ply				ply
.239f	0a		asl a				asl 	a
.23a0	b0 35		bcs $23d7			bcs 	_CNOptimised
.23a2	20 0e 24	jsr $240e			jsr 	_CNLoadValue 				; load index value to R0.
.23a5	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.23a7	a9 06		lda #$06			lda 	#6
.23a9	20 66 23	jsr $2366			jsr 	CFLoadR0X
.23ac	20 f3 2a	jsr $2af3			jsr 	IFloatAdd 					; add them together and write back.
.23af	20 31 24	jsr $2431			jsr 	_CNSaveValue
.23b2	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.23b4	a2 0c		ldx #$0c			ldx 	#IFR1
.23b6	20 66 23	jsr $2366			jsr 	CFLoadR0X
.23b9	20 ca 2d	jsr $2dca			jsr 	IFloatCompare 				; compare terminal vs current
.23bc	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.23be	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero
.23c1	f0 10		beq $23d3			beq 	_CNLoopBack
.23c3	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.23c5	5a		phy				phy
.23c6	a0 09		ldy #$09			ldy 	#6+IExp
.23c8	51 2a		eor ($2a),y			eor 	(basicStack),y
.23ca	7a		ply				ply
.23cb	29 40		and #$40			and 	#IFSign
.23cd	f0 04		beq $23d3			beq 	_CNLoopBack
.23cf					_CNExitLoop:
.23cf	20 89 27	jsr $2789			jsr 	StackClose		 			; return
.23d2	60		rts				rts
.23d3					_CNLoopBack:
.23d3	20 b1 27	jsr $27b1			jsr 	STKLoadCodePosition 		; loop back
.23d6	60		rts				rts
.23d7					_CNOptimised:
.23d7	5a		phy				phy
.23d8	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.23da	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23dc	85 26		sta $26				sta 	zTemp2
.23de	c8		iny				iny
.23df	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23e1	85 27		sta $27				sta 	zTemp2+1
.23e3	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.23e5					_CNIncrement:
.23e5	c8		iny				iny
.23e6	b1 26		lda ($26),y			lda 	(zTemp2),y
.23e8	1a		inc a				inc 	a
.23e9	91 26		sta ($26),y			sta 	(zTemp2),y
.23eb	f0 f8		beq $23e5			beq 	_CNIncrement
.23ed	18		clc				clc 								; point zTemp0 to terminal value
.23ee	a5 2a		lda $2a				lda 	basicStack
.23f0	69 0a		adc #$0a			adc 	#10
.23f2	85 22		sta $22				sta 	zTemp0
.23f4	a5 2b		lda $2b				lda 	basicStack+1
.23f6	69 00		adc #$00			adc 	#0
.23f8	85 23		sta $23				sta 	zTemp0+1
.23fa	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.23fc	b2 26		lda ($26)			lda 	(zTemp2)
.23fe	d2 22		cmp ($22)			cmp 	(zTemp0)
.2400	b1 26		lda ($26),y			lda 	(zTemp2),y
.2402	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2404	c8		iny				iny
.2405	b1 26		lda ($26),y			lda 	(zTemp2),y
.2407	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2409	7a		ply				ply
.240a	b0 c3		bcs $23cf			bcs 	_CNExitLoop
.240c	80 c5		bra $23d3			bra 	_CNLoopBack
.240e					_CNLoadValue:
.240e	5a		phy				phy
.240f	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2411	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2413	85 26		sta $26				sta 	zTemp2
.2415	c8		iny				iny
.2416	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2418	85 27		sta $27				sta 	zTemp2+1
.241a	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.241c	b1 26		lda ($26),y			lda 	(zTemp2),y
.241e	85 08		sta $08				sta 	IFR0+IM0
.2420	c8		iny				iny
.2421	b1 26		lda ($26),y			lda 	(zTemp2),y
.2423	85 09		sta $09				sta 	IFR0+IM1
.2425	c8		iny				iny
.2426	b1 26		lda ($26),y			lda 	(zTemp2),y
.2428	85 0a		sta $0a				sta 	IFR0+IM2
.242a	c8		iny				iny
.242b	b1 26		lda ($26),y			lda 	(zTemp2),y
.242d	85 0b		sta $0b				sta 	IFR0+IExp
.242f	7a		ply				ply
.2430	60		rts				rts
.2431					_CNSaveValue:
.2431	5a		phy				phy
.2432	a0 00		ldy #$00			ldy 	#0
.2434	a5 08		lda $08				lda 	IFR0+IM0
.2436	91 26		sta ($26),y			sta 	(zTemp2),y
.2438	c8		iny				iny
.2439	a5 09		lda $09				lda 	IFR0+IM1
.243b	91 26		sta ($26),y			sta 	(zTemp2),y
.243d	c8		iny				iny
.243e	a5 0a		lda $0a				lda 	IFR0+IM2
.2440	91 26		sta ($26),y			sta 	(zTemp2),y
.2442	c8		iny				iny
.2443	a5 0b		lda $0b				lda 	IFR0+IExp
.2445	91 26		sta ($26),y			sta 	(zTemp2),y
.2447	7a		ply				ply
.2448	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2449					Command_GOSUB:
.2449	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; get line number
.244c	a9 52		lda #$52			lda 	#STK_GOSUB
.244e	20 6b 27	jsr $276b			jsr 	StackOpen
.2451	20 9f 27	jsr $279f			jsr 	STKSaveCodePosition 		; save return address on stack.
.2454	4c d8 11	jmp $11d8			jmp 	GotoR0
.2457					Command_RETURN:
.2457	a9 52		lda #$52			lda 	#STK_GOSUB
.2459	20 97 27	jsr $2797			jsr 	StackCheckFrame
.245c	20 b1 27	jsr $27b1			jsr 	STKLoadCodePosition 		; return
.245f	20 89 27	jsr $2789			jsr 	StackClose
.2462	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2463					IfCommand:
.2463	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; Get the if test.
.2466	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2468	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.246a	d0 0c		bne $2478			bne 	_IfStructured 				; we still support it.
.246c	c8		iny				iny 								; consume THEN
.246d	a2 08		ldx #$08			ldx 	#IFR0
.246f	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero 			; is it zero
.2472	f0 01		beq $2475			beq 	_IfFail 					; if fail, go to next line
.2474	60		rts				rts 								; if THEN just continue
.2475					_IfFail:
.2475	4c c9 14	jmp $14c9			jmp 	RUNEndOfLine
.2478					_IfStructured:
.2478	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero 			; is it zero
.247b	d0 07		bne $2484			bne 	_IfExit 					; if not, then continue normally.
.247d	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.247f	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2481	20 ad 24	jsr $24ad			jsr 	ScanForward 				; and run from there
.2484					_IfExit:
.2484	60		rts				rts
.2485					ElseCode:
.2485	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2487	aa		tax				tax 								; so just go to the structure exit
.2488	20 ad 24	jsr $24ad			jsr 	ScanForward
.248b	60		rts				rts
.248c					EndIf:
.248c	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.248d					Command_REPEAT:
.248d	a9 02		lda #$02			lda 	#STK_REPEAT
.248f	20 6b 27	jsr $276b			jsr 	StackOpen
.2492	20 9f 27	jsr $279f			jsr 	STKSaveCodePosition 		; save loop position
.2495	60		rts				rts
.2496					Command_UNTIL:
.2496	a9 02		lda #$02			lda 	#STK_REPEAT
.2498	20 97 27	jsr $2797			jsr 	StackCheckFrame
.249b	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; work out the test
.249e	a2 08		ldx #$08			ldx 	#IFR0
.24a0	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero 			; check if zero
.24a3	f0 04		beq $24a9			beq 	_CULoopBack 				; if so keep looping
.24a5	20 89 27	jsr $2789			jsr 	StackClose		 			; return
.24a8	60		rts				rts
.24a9					_CULoopBack:
.24a9	20 b1 27	jsr $27b1			jsr 	STKLoadCodePosition 		; loop back
.24ac	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.24ad					ScanForward:
.24ad	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.24af	86 23		stx $23				stx 	zTemp0+1
.24b1	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.24b3					_ScanForwardLoop:
.24b3	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.24b5	d0 0a		bne $24c1			bne 	_ScanNoCheck
.24b7	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.24b9	c5 22		cmp $22				cmp 	zTemp0
.24bb	f0 49		beq $2506			beq 	_ScanExit
.24bd	c5 23		cmp $23				cmp 	zTemp0+1
.24bf	f0 45		beq $2506			beq 	_ScanExit
.24c1					_ScanNoCheck:
.24c1	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.24c3	c8		iny				iny
.24c4	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.24c6	f0 37		beq $24ff			beq		_ScanDataItem
.24c8	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.24ca	f0 33		beq $24ff			beq 	_ScanDataItem
.24cc	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.24ce	f0 1b		beq $24eb			beq 	_ScanNextLine
.24d0	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.24d2	d0 01		bne $24d5			bne 	_ScanNoShift
.24d4	c8		iny				iny
.24d5					_ScanNoShift:
.24d5	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.24d7	b0 da		bcs $24b3			bcs 	_ScanForwardLoop
.24d9	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.24db	90 d6		bcc $24b3			bcc 	_ScanForwardLoop
.24dd	aa		tax				tax 								; access the table to get the adjustment.
.24de	18		clc				clc
.24df	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.24e1	7d 1d 1a	adc $1a1d,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.24e4	85 24		sta $24				sta 	zTemp1
.24e6	10 cb		bpl $24b3			bpl		_ScanForwardLoop 			; error if -ve ?
.24e8	4c 29 26	jmp $2629		jmp	ErrorV_structure
.24eb					_ScanNextLine:
.24eb	18		clc				clc	 								; forward to next line.
.24ec	b2 18		lda ($18)			lda 	(codePtr)
.24ee	65 18		adc $18				adc 	codePtr
.24f0	85 18		sta $18				sta 	codePtr
.24f2	90 02		bcc $24f6			bcc 	_ScanNoCarry
.24f4	e6 19		inc $19				inc 	codePtr+1
.24f6					_ScanNoCarry:
.24f6	a0 03		ldy #$03			ldy 	#3
.24f8	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.24fa	d0 b7		bne $24b3			bne 	_ScanForwardLoop
.24fc	4c 29 26	jmp $2629		jmp	ErrorV_structure
.24ff					_ScanDataItem:
.24ff	98		tya				tya
.2500	38		sec				sec
.2501	71 18		adc ($18),y			adc 	(codePtr),y
.2503	a8		tay				tay
.2504	80 ad		bra $24b3			bra 	_ScanForwardLoop
.2506					_ScanExit:
.2506	c8		iny				iny 								; consume final token.
.2507	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2508					ScanProcedures:
.2508	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.250a	48		pha				pha
.250b	a5 19		lda $19				lda 	codePtr+1
.250d	48		pha				pha
.250e	5a		phy				phy
.250f	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.2512	85 19		sta $19				sta 	codePtr+1
.2514	64 18		stz $18				stz 	codePtr
.2516					_SPLoop:
.2516	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2518	f0 18		beq $2532			beq 	_SPExit
.251a	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.251c	b1 18		lda ($18),y			lda 	(codePtr),y
.251e	c9 88		cmp #$88			cmp 	#PR_PROC
.2520	d0 03		bne $2525			bne 	_SPNext
.2522	20 3a 25	jsr $253a			jsr 	_SPSetupRecord
.2525					_SPNext:
.2525	18		clc				clc 								; forward to next
.2526	b2 18		lda ($18)			lda 	(codePtr)
.2528	65 18		adc $18				adc 	codePtr
.252a	85 18		sta $18				sta 	codePtr
.252c	90 e8		bcc $2516			bcc 	_SPLoop
.252e	e6 19		inc $19				inc 	codePtr+1
.2530	80 e4		bra $2516			bra 	_SPLoop
.2532					_SPExit:
.2532	7a		ply				ply
.2533	68		pla				pla
.2534	85 19		sta $19				sta 	codePtr+1
.2536	68		pla				pla
.2537	85 18		sta $18				sta 	codePtr
.2539	60		rts				rts
.253a					_SPSetupRecord:
.253a	c8		iny				iny 								; check identifier follows
.253b	b1 18		lda ($18),y			lda 	(codePtr),y
.253d	29 c0		and #$c0			and 	#$C0
.253f	c9 40		cmp #$40			cmp 	#$40
.2541	d0 27		bne $256a			bne 	_SPSyntax
.2543	20 3e 2a	jsr $2a3e			jsr 	VARGetInfo 					; get the information
.2546	20 52 27	jsr $2752			jsr 	ERRCheckRParen 				; check right bracket follows.
.2549	20 f0 29	jsr $29f0			jsr 	VARFind 					; already exists ?
.254c	b0 1f		bcs $256d			bcs 	_SPUsed 					; error !
.254e	20 9c 29	jsr $299c			jsr 	VARCreate 					; create, XA points to the data.
.2551	85 22		sta $22				sta 	zTemp0
.2553	86 23		stx $23				stx 	zTemp0+1
.2555	5a		phy				phy 								; save Y pos on stack
.2556	a0 01		ldy #$01			ldy 	#1
.2558	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.255a	92 22		sta ($22)			sta 	(zTemp0)
.255c	a5 19		lda $19				lda 	codePtr+1
.255e	91 22		sta ($22),y			sta 	(zTemp0),y
.2560	c8		iny				iny
.2561	68		pla				pla
.2562	91 22		sta ($22),y			sta 	(zTemp0),y
.2564	c8		iny				iny
.2565	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2567	91 22		sta ($22),y			sta 	(zTemp0),y
.2569	60		rts				rts
.256a					_SPSyntax:
.256a	4c 9d 25	jmp $259d		jmp	ErrorV_syntax
.256d					_SPUsed:
.256d	4c f4 26	jmp $26f4		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2570					Command_WHILE:
.2570	5a		phy				phy 								; save position of the test
.2571	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; work out the while test.
.2574	a2 08		ldx #$08			ldx 	#IFR0
.2576	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero 			; check if zero
.2579	f0 0e		beq $2589			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.257b	98		tya				tya 								; position *after* test.
.257c	7a		ply				ply 								; restore position before test, at WHILE
.257d	88		dey				dey 								; so we execute the WHILE command again.
.257e	48		pha				pha 								; push after test on the stack
.257f	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2581	20 6b 27	jsr $276b			jsr 	StackOpen
.2584	20 9f 27	jsr $279f			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2587	7a		ply				ply 								; restore the position *after* the test
.2588	60		rts				rts
.2589					_WHExitLoop:
.2589	68		pla				pla 								; throw post loop position
.258a	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.258c	aa		tax				tax
.258d	20 ad 24	jsr $24ad			jsr 	ScanForward
.2590	60		rts				rts
.2591					Command_WEND:
.2591	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2593	20 97 27	jsr $2797			jsr 	StackCheckFrame
.2596	20 b1 27	jsr $27b1			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2599	20 89 27	jsr $2789			jsr 	StackClose		 			; erase the frame
.259c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.259d					ErrorV_syntax:
.259d	20 8a 28	jsr $288a		jsr	ErrorHandler
>25a0	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>25a8	45 72 72 6f 72 00
.25ae					ErrorV_range:
.25ae	20 8a 28	jsr $288a		jsr	ErrorHandler
>25b1	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>25b9	52 61 6e 67 65 00
.25bf					ErrorV_value:
.25bf	20 8a 28	jsr $288a		jsr	ErrorHandler
>25c2	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>25ca	75 65 00
.25cd					ErrorV_type:
.25cd	20 8a 28	jsr $288a		jsr	ErrorHandler
>25d0	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>25d8	73 6d 61 74 63 68 00
.25df					ErrorV_unimplemented:
.25df	20 8a 28	jsr $288a		jsr	ErrorHandler
>25e2	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>25ea	6c 65 6d 65 6e 74 65 64 00
.25f3					ErrorV_assert:
.25f3	20 8a 28	jsr $288a		jsr	ErrorHandler
>25f6	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>25fe	46 61 69 6c 00
.2603					ErrorV_internal:
.2603	20 8a 28	jsr $288a		jsr	ErrorHandler
>2606	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>260e	6c 20 45 72 72 6f 72 00
.2616					ErrorV_divzero:
.2616	20 8a 28	jsr $288a		jsr	ErrorHandler
>2619	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2621	42 79 20 5a 65 72 6f 00
.2629					ErrorV_structure:
.2629	20 8a 28	jsr $288a		jsr	ErrorHandler
>262c	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2634	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2641					ErrorV_stop:
.2641	20 8a 28	jsr $288a		jsr	ErrorHandler
>2644	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>264c	20 53 74 6f 70 70 65 64 00
.2655					ErrorV_data:
.2655	20 8a 28	jsr $288a		jsr	ErrorHandler
>2658	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2660	44 61 74 61 00
.2665					ErrorV_redefine:
.2665	20 8a 28	jsr $288a		jsr	ErrorHandler
>2668	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2670	65 64 65 66 69 6e 65 64 00
.2679					ErrorV_index:
.2679	20 8a 28	jsr $288a		jsr	ErrorHandler
>267c	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2684	61 79 20 49 6e 64 65 78 00
.268d					ErrorV_memory:
.268d	20 8a 28	jsr $288a		jsr	ErrorHandler
>2690	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2698	4d 65 6d 6f 72 79 00
.269f					ErrorV_uninitialised:
.269f	20 8a 28	jsr $288a		jsr	ErrorHandler
>26a2	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>26aa	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.26ba					ErrorV_string:
.26ba	20 8a 28	jsr $288a		jsr	ErrorHandler
>26bd	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>26c5	69 6e 67 20 4c 65 6e 67 74 68 00
.26d0					ErrorV_variable:
.26d0	20 8a 28	jsr $288a		jsr	ErrorHandler
>26d3	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>26db	65 20 4d 69 73 73 69 6e 67 00
.26e5					ErrorV_stack:
.26e5	20 8a 28	jsr $288a		jsr	ErrorHandler
>26e8	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>26f0	75 6c 6c 00
.26f4					ErrorV_dupproc:
.26f4	20 8a 28	jsr $288a		jsr	ErrorHandler
>26f7	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>26ff	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>270f	65 64 00
.2712					ErrorV_unknown:
.2712	20 8a 28	jsr $288a		jsr	ErrorHandler
>2715	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>271d	20 50 72 6f 63 65 64 75 72 65 00
.2728					ErrorV_break:
.2728	20 8a 28	jsr $288a		jsr	ErrorHandler
>272b	05 42 72 65 61 6b 00			.text	5,"Break",0
.2732					ErrorV_line:
.2732	20 8a 28	jsr $288a		jsr	ErrorHandler
>2735	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>273d	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.274a					ERRCheckLParen:
.274a	b1 18		lda ($18),y			lda 	(codePtr),y
.274c	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.274e	d0 18		bne $2768			bne 	ERRSyntaxError
.2750	c8		iny				iny
.2751	60		rts				rts
.2752					ERRCheckRParen:
.2752	b1 18		lda ($18),y			lda 	(codePtr),y
.2754	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2756	d0 10		bne $2768			bne 	ERRSyntaxError
.2758	c8		iny				iny
.2759	60		rts				rts
.275a					ERRCheckComma:
.275a	b1 18		lda ($18),y			lda 	(codePtr),y
.275c	c9 99		cmp #$99			cmp 	#PR_COMMA
.275e	d0 08		bne $2768			bne 	ERRSyntaxError
.2760	c8		iny				iny
.2761	60		rts				rts
.2762					ERRCheckA:
.2762	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2764	d0 02		bne $2768			bne 	ERRSyntaxError
.2766	c8		iny				iny
.2767	60		rts				rts
.2768					ERRSyntaxError:
.2768	4c 9d 25	jmp $259d		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.276b					StackOpen:
.276b	48		pha				pha 								; save frame byte
.276c	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.276e	0a		asl a				asl 	a 							; claim twice this for storage
.276f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2771	38		sec				sec 								; so basically subtracting from
.2772	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.2774	85 2a		sta $2a				sta 	basicStack
.2776	b0 0a		bcs $2782			bcs 	_SONoBorrow
>2778	db						.byte 	$DB
.2779	c6 2b		dec $2b				dec 	basicStack+1
.277b	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.277d	cd 20 06	cmp $0620			cmp 	basicStackEnd
.2780	f0 04		beq $2786			beq 	_SOMemory
.2782					_SONoBorrow:
.2782	68		pla				pla 								; get marker back and write at TOS
.2783	92 2a		sta ($2a)			sta 	(basicStack)
.2785	60		rts				rts
.2786					_SOMemory:
.2786	4c e5 26	jmp $26e5		jmp	ErrorV_stack
.2789					StackClose:
.2789	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.278b	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.278d	0a		asl a				asl 	a 							; claim twice this.
.278e	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.2790	85 2a		sta $2a				sta 	basicStack
.2792	90 02		bcc $2796			bcc 	_SCExit
.2794	e6 2b		inc $2b				inc 	basicStack+1
.2796					_SCExit:
.2796	60		rts				rts
.2797					StackCheckFrame:
.2797	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.2799	d0 01		bne $279c			bne 	_SCFError 					; different, we have structures mixed up
.279b	60		rts				rts
.279c					_SCFError:
.279c	4c 29 26	jmp $2629		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.279f					STKSaveCodePosition:
.279f	5a		phy				phy
.27a0	98		tya				tya 								; save Y at offset 1.
.27a1	a0 01		ldy #$01			ldy 	#1
.27a3	91 2a		sta ($2a),y			sta 	(basicStack),y
.27a5	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.27a7	c8		iny				iny
.27a8	91 2a		sta ($2a),y			sta 	(basicStack),y
.27aa	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.27ac	c8		iny				iny
.27ad	91 2a		sta ($2a),y			sta 	(basicStack),y
.27af	7a		ply				ply
.27b0	60		rts				rts
.27b1					STKLoadCodePosition:
.27b1	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.27b3	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27b5	85 19		sta $19				sta 	codePtr+1
.27b7	88		dey				dey
.27b8	b1 2a		lda ($2a),y			lda 	(basicStack),y
.27ba	85 18		sta $18				sta 	codePtr
.27bc	88		dey				dey
.27bd	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.27bf	a8		tay				tay
.27c0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.27c1					StackReset:
.27c1	48		pha				pha 								; save top of memory
.27c2	3a		dec a				dec 	a  							; end of stack = previous byte
.27c3	85 2b		sta $2b				sta 	basicStack+1
.27c5	a9 ff		lda #$ff			lda 	#$FF
.27c7	85 2a		sta $2a				sta 	basicStack
.27c9	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.27cb	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.27cd	68		pla				pla 								; allocate pages for stack.
.27ce	38		sec				sec
.27cf	e9 02		sbc #$02			sbc 	#STACKPAGES
.27d1	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.27d4	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.27d5					StringConcrete:
.27d5	5a		phy				phy 								; save position on stack
.27d6	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.27d8	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.27da	b0 41		bcs $281d			bcs 	_SALengthError
.27dc	18		clc				clc 								; length of the new string
.27dd	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.27df	90 02		bcc $27e3			bcc 	_SAHaveLength
.27e1	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.27e3					_SAHaveLength:
.27e3	48		pha				pha 								; save length to be allocated for concreting.
.27e4	38		sec				sec
.27e5	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.27e7	6d 22 06	adc $0622			adc 	stringMemory
.27ea	8d 22 06	sta $0622			sta 	stringMemory
.27ed	85 26		sta $26				sta 	zTemp2 						; update storage address
.27ef	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.27f1	6d 23 06	adc $0623			adc 	stringMemory+1
.27f4	8d 23 06	sta $0623			sta 	stringMemory+1
.27f7	85 27		sta $27				sta 	zTemp2+1
.27f9	68		pla				pla 								; save length allocated in +0
.27fa	92 26		sta ($26)			sta 	(zTemp2)
.27fc	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.27fe	a0 01		ldy #$01			ldy 	#1
.2800	91 26		sta ($26),y			sta 	(zTemp2),y
.2802					_SACopyNewString:
.2802	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2804	a0 02		ldy #$02			ldy 	#2
.2806	91 26		sta ($26),y			sta 	(zTemp2),y
.2808	aa		tax				tax 								; bytes to copy
.2809	f0 0c		beq $2817			beq 	_SACopyExit
.280b	a0 01		ldy #$01			ldy 	#1 							; first character from here
.280d					_SACopyNSLoop:
.280d	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.280f	c8		iny				iny 								; write two on in string storage
.2810	c8		iny				iny
.2811	91 26		sta ($26),y			sta 	(zTemp2),y
.2813	88		dey				dey
.2814	ca		dex				dex									; until copied all the string lengths.
.2815	d0 f6		bne $280d			bne 	_SACopyNSLoop
.2817					_SACopyExit:
.2817	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.2819	a5 26		lda $26				lda 	zTemp2
.281b	7a		ply				ply
.281c	60		rts				rts
.281d					_SALengthError:
.281d	4c ba 26	jmp $26ba		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2820					StringSystemInitialise:
.2820	3a		dec a				dec 	a 							; make last byte of previous page.
.2821	8d 23 06	sta $0623			sta 	stringMemory+1
.2824	85 23		sta $23				sta 	zTemp0+1
.2826	a9 ff		lda #$ff			lda 	#$FF
.2828	8d 22 06	sta $0622			sta 	stringMemory
.282b	85 22		sta $22				sta 	zTemp0
.282d	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.282f	92 22		sta ($22)			sta 	(zTemp0)
.2831	60		rts				rts
.2832					StringSpaceInitialise:
.2832	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2834	8d 21 06	sta $0621			sta 	stringInitialised
.2837	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.283a	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.283d	ad 23 06	lda $0623			lda 	stringMemory+1
.2840	3a		dec a				dec 	a
.2841	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2844	20 82 10	jsr $1082			jsr 	ClearCheckMemory
.2847	60		rts				rts
.2848					StringTempAllocate:
.2848	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.284a	b0 2e		bcs $287a			bcs 	_STALength
.284c	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.284f	30 05		bmi $2856			bmi 	_STAAllocate
.2851	48		pha				pha 								; save value to subtract.
.2852	20 32 28	jsr $2832			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2855	68		pla				pla 								; restore it
.2856					_STAAllocate:
.2856	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2858	18		clc				clc  								; deliberate allows one more
.2859	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.285c	8d 24 06	sta $0624			sta 	stringTempPointer
.285f	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2861	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.2863	ad 25 06	lda $0625			lda 	stringTempPointer+1
.2866	69 ff		adc #$ff			adc 	#$FF
.2868	8d 25 06	sta $0625			sta 	stringTempPointer+1
.286b	85 2d		sta $2d				sta 	zsTemp+1
.286d	85 09		sta $09				sta 	IFR0+IM1
.286f	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2871	a9 80		lda #$80			lda 	#$80
.2873	85 0b		sta $0b				sta 	IFR0+IExp
.2875	a9 00		lda #$00			lda 	#0 							; clear the target string
.2877	92 2c		sta ($2c)			sta 	(zsTemp)
.2879	60		rts				rts
.287a					_STALength:
.287a	4c ba 26	jmp $26ba		jmp	ErrorV_string
.287d					StringTempWrite:
.287d	5a		phy				phy
.287e	48		pha				pha
.287f	b2 2c		lda ($2c)			lda 	(zsTemp)
.2881	1a		inc a				inc 	a
.2882	92 2c		sta ($2c)			sta 	(zsTemp)
.2884	a8		tay				tay
.2885	68		pla				pla
.2886	91 2c		sta ($2c),y			sta 	(zsTemp),y
.2888	7a		ply				ply
.2889	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.288a					ErrorHandler:
.288a	fa		plx				plx 								; get address of msg
.288b	7a		ply				ply
.288c	e8		inx				inx 								; bump past RTS
.288d	d0 01		bne $2890			bne 	_EHNoInc
.288f	c8		iny				iny
.2890					_EHNoInc:
.2890	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.2893	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.2896	0d 27 06	ora $0627			ora 	ERRLine+1
.2899	f0 10		beq $28ab			beq 	_EHNoNumber
.289b	a2 ae		ldx #$ae			ldx 	#_EHAtMsg & $FF
.289d	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.289f	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.28a2	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.28a5	ae 27 06	ldx $0627			ldx 	ERRLine+1
.28a8	20 b3 28	jsr $28b3			jsr 	WriteIntXA
.28ab					_EHNoNumber:
.28ab	4c dc 28	jmp $28dc			jmp 	WarmStartNewLine
.28ae					_EHAtMsg:
>28ae	20 61 74 20 00					.text 	" at ",0
.28b3					WriteIntXA:
.28b3	da		phx				phx
.28b4	48		pha				pha
.28b5	a2 08		ldx #$08			ldx 	#IFR0
.28b7	20 4a 30	jsr $304a			jsr 	IFloatPushRx
.28ba	68		pla				pla
.28bb	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.28be	68		pla				pla
.28bf	85 09		sta $09				sta 	IFR0+IM1
.28c1	a9 0a		lda #$0a			lda 	#10 						; decimal
.28c3	20 9d 2e	jsr $2e9d			jsr 	IFloatIntegerToStringR0	 	; convert
.28c6	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.28c9	a2 08		ldx #$08			ldx 	#IFR0
.28cb	20 6b 30	jsr $306b			jsr 	IFloatPullRx
.28ce	60		rts				rts
.28cf					NotImplemented:
.28cf	4c df 25	jmp $25df		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.28d2					WarmStart:
.28d2	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.28d4	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.28d7	a9 6b		lda #$6b			lda 	#"k"
.28d9	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.28dc					WarmStartNewLine:
.28dc	a9 0d		lda #$0d			lda 	#13
.28de	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.28e1					WarmStartNoPrompt:
.28e1	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.28e3	9a		txs				txs
.28e4	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.28e7	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.28e9	f0 f1		beq $28dc			beq 	WarmStartNewLine
.28eb	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.28ed	d0 f2		bne $28e1			bne 	WarmStartNoPrompt
.28ef	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.28f2	e8		inx				inx 								; skip length byte to make it ASCIIZ
.28f3	d0 01		bne $28f6			bne 	_WSSkip
.28f5	c8		iny				iny
.28f6					_WSSkip:
.28f6	86 26		stx $26				stx 	zTemp2 						; save address
.28f8	84 27		sty $27				sty 	zTemp2+1
.28fa	a2 27		ldx #$27			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.28fc	a0 29		ldy #$29			ldy 	#TOKGetCharacter >> 8
.28fe	38		sec				sec
.28ff	20 ef 1f	jsr $1fef			jsr 	TOKTokenise
.2902	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2905	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2908	d0 0b		bne $2915			bne 	_WSLineEdit
.290a	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.290c	85 18		sta $18				sta 	codePtr
.290e	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2910	85 19		sta $19				sta 	codePtr+1
.2912	4c d4 14	jmp $14d4			jmp 	RUNNewLine
.2915					_WSLineEdit:
.2915	20 ca 1e	jsr $1eca			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2918	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.291b	c9 04		cmp #$04			cmp 	#4
.291d	f0 03		beq $2922			beq 	_WSNoInsert
.291f	20 14 1f	jsr $1f14			jsr 	PGMInsertLine				; if not, maybe insert
.2922					_WSNoInsert:
.2922	20 3c 10	jsr $103c			jsr 	ClearCode 					; clear variables etc.
.2925	80 ba		bra $28e1			bra 	WarmStartNoPrompt
.2927					TOKGetCharacter:
.2927	b2 26		lda ($26)			lda 	(zTemp2)
.2929	90 06		bcc $2931			bcc 	_GSNoIncrement
.292b	e6 26		inc $26				inc 	zTemp2
.292d	d0 02		bne $2931			bne 	_GSNoIncrement
.292f	e6 27		inc $27				inc 	zTemp2+1
.2931					_GSNoIncrement:
.2931	c9 00		cmp #$00			cmp 	#0
.2933	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2934					VARArrayLookup:
.2934	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2936	86 23		stx $23				stx 	zTemp0+1
.2938	b2 22		lda ($22)			lda 	(zTemp0)
.293a	48		pha				pha
.293b	5a		phy				phy
.293c	a0 01		ldy #$01			ldy 	#1
.293e	b1 22		lda ($22),y			lda 	(zTemp0),y
.2940	7a		ply				ply
.2941	48		pha				pha
.2942	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2945	68		pla				pla 								; array address to zTemp0
.2946	85 23		sta $23				sta 	zTemp0+1
.2948	68		pla				pla
.2949	85 22		sta $22				sta 	zTemp0
.294b	5a		phy				phy 								; save codePtr position.
.294c	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.294e	b1 22		lda ($22),y			lda 	(zTemp0),y
.2950	48		pha				pha 								; save bit 15 on stack.
.2951	29 7f		and #$7f			and 	#$7F
.2953	85 24		sta $24				sta 	zTemp1
.2955	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2957	d2 22		cmp ($22)			cmp 	(zTemp0)
.2959	a5 09		lda $09				lda 	IFR0+IM1
.295b	e5 24		sbc $24				sbc 	zTemp1
.295d	b0 3a		bcs $2999			bcs 	_VALIndex
.295f	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2961	c9 40		cmp #$40			cmp 	#$40
.2963	b0 34		bcs $2999			bcs 	_VALIndex
.2965	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2967	26 09		rol $09				rol 	IFR0+IM1
.2969	fa		plx				plx 								; get msb of size -> X
.296a	30 04		bmi $2970			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.296c	06 08		asl $08				asl 	IFR0+IM0
.296e	26 09		rol $09				rol 	IFR0+IM1
.2970					_VARNotX4:
.2970	18		clc				clc 								; add the two for the size bytes
.2971	a5 08		lda $08				lda 	IFR0+IM0
.2973	69 02		adc #$02			adc 	#2
.2975	85 08		sta $08				sta 	IFR0+IM0
.2977	90 02		bcc $297b			bcc 	_VARNoCarry1
.2979	e6 09		inc $09				inc 	IFR0+IM1
.297b					_VARNoCarry1:
.297b	18		clc				clc 								; calculate the element address and push to stack.
.297c	a5 08		lda $08				lda 	IFR0+IM0
.297e	65 22		adc $22				adc 	zTemp0
.2980	48		pha				pha
.2981	a5 09		lda $09				lda 	IFR0+IM1
.2983	65 23		adc $23				adc 	zTemp0+1
.2985	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2987	30 04		bmi $298d			bmi 	_VARHasSubLevel
.2989	aa		tax				tax 								; address in XA
.298a	68		pla				pla
.298b	7a		ply				ply 								; restore Y and exit
.298c	60		rts				rts
.298d					_VARHasSubLevel:
.298d	aa		tax				tax 								; get link address in XA
.298e	68		pla				pla
.298f	7a		ply				ply 								; restore code position.
.2990	48		pha				pha
.2991	20 5a 27	jsr $275a			jsr 	ERRCheckComma 				; comma required.
.2994	68		pla				pla
.2995	20 34 29	jsr $2934			jsr 	VARArrayLookup 				; call it recursively
.2998	60		rts				rts
.2999					_VALIndex:
.2999	4c 79 26	jmp $2679		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.299c					VARCreate:
.299c	5a		phy				phy
.299d	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.299f	a2 00		ldx #$00			ldx 	#0
.29a1	20 59 10	jsr $1059			jsr 	AllocateMemory
.29a4	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.29a6	86 25		stx $25				stx 	zTemp1+1
.29a8	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.29aa	ad 2a 06	lda $062a			lda 	VARHash
.29ad	91 24		sta ($24),y			sta 	(zTemp1),y
.29af	c8		iny				iny 								; put address of name into +3,+4
.29b0	ad 28 06	lda $0628			lda 	VARNameAddress
.29b3	91 24		sta ($24),y			sta 	(zTemp1),y
.29b5	c8		iny				iny
.29b6	ad 29 06	lda $0629			lda 	VARNameAddress+1
.29b9	91 24		sta ($24),y			sta 	(zTemp1),y
.29bb	ad 2b 06	lda $062b			lda 	VARType
.29be	29 01		and #$01			and 	#1
.29c0	f0 06		beq $29c8			beq 	_CVNotString
.29c2	a0 08		ldy #$08			ldy 	#5+3
.29c4	a9 80		lda #$80			lda 	#$80
.29c6	91 24		sta ($24),y			sta 	(zTemp1),y
.29c8					_CVNotString:
.29c8	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.29cb	85 22		sta $22				sta 	zTemp0
.29cd	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.29d0	85 23		sta $23				sta 	zTemp0+1
.29d2	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.29d4	b2 22		lda ($22)			lda 	(zTemp0)
.29d6	92 24		sta ($24)			sta 	(zTemp1)
.29d8	b1 22		lda ($22),y			lda 	(zTemp0),y
.29da	91 24		sta ($24),y			sta 	(zTemp1),y
.29dc	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.29de	92 22		sta ($22)			sta 	(zTemp0)
.29e0	a5 25		lda $25				lda 	zTemp1+1
.29e2	91 22		sta ($22),y			sta 	(zTemp0),y
.29e4	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.29e6	a6 25		ldx $25				ldx 	zTemp1+1
.29e8	18		clc				clc 								; add 5 to point to the data.
.29e9	69 05		adc #$05			adc 	#5
.29eb	90 01		bcc $29ee			bcc 	_VCNoCarry
.29ed	e8		inx				inx
.29ee					_VCNoCarry:
.29ee	7a		ply				ply
.29ef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.29f0					VARFind:
.29f0	5a		phy				phy
.29f1	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.29f3	b1 22		lda ($22),y			lda 	(zTemp0),y
.29f5	85 25		sta $25				sta 	zTemp1+1
.29f7	f0 1c		beq $2a15			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.29f9	b2 22		lda ($22)			lda 	(zTemp0)
.29fb	85 24		sta $24				sta 	zTemp1
.29fd					_VFLoop:
.29fd	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.29ff	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a01	cd 2a 06	cmp $062a			cmp 	VARHash
.2a04	f0 12		beq $2a18			beq 	_VFHashesMatch 				; if so, check the name.
.2a06					_VFNext:
.2a06	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2a08	aa		tax				tax
.2a09	a0 01		ldy #$01			ldy 	#1
.2a0b	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a0d	85 25		sta $25				sta 	zTemp1+1
.2a0f	86 24		stx $24				stx 	zTemp1
.2a11	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2a13	d0 e8		bne $29fd			bne 	_VFLoop
.2a15					_VFExitFail:
.2a15	7a		ply				ply
.2a16	18		clc				clc
.2a17	60		rts				rts
.2a18					_VFHashesMatch:
.2a18	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2a1a	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a1c	85 26		sta $26				sta 	zTemp2
.2a1e	c8		iny				iny
.2a1f	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a21	85 27		sta $27				sta 	zTemp2+1
.2a23	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2a25					_VFNameCompLoop:
.2a25	c8		iny				iny 								; char at a time
.2a26	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2a29	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2a2b	d0 d9		bne $2a06			bne 	_VFNext						; next entry if different.
.2a2d	c9 7c		cmp #$7c			cmp 	#$7C
.2a2f	90 f4		bcc $2a25			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2a31	18		clc				clc
.2a32	a5 24		lda $24				lda 	zTemp1
.2a34	a6 25		ldx $25				ldx 	zTemp1+1
.2a36	69 05		adc #$05			adc 	#5
.2a38	90 01		bcc $2a3b			bcc 	_VFNNoCarry
.2a3a	e8		inx				inx
.2a3b					_VFNNoCarry:
.2a3b	7a		ply				ply
.2a3c	38		sec				sec
.2a3d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2a3e					VARGetInfo:
.2a3e	98		tya				tya 								; calculate the address of the identifier start.
.2a3f	18		clc				clc
.2a40	65 18		adc $18				adc 	codePtr
.2a42	8d 28 06	sta $0628			sta 	VARNameAddress
.2a45	a5 19		lda $19				lda 	codePtr+1
.2a47	69 00		adc #$00			adc 	#0
.2a49	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2a4c	9c 2a 06	stz $062a			stz 	VARHash
.2a4f	a2 00		ldx #$00			ldx 	#0
.2a51					_VARCopyName:
.2a51	18		clc				clc 								; update the sum hash.
.2a52	ad 2a 06	lda $062a			lda 	VARHash
.2a55	71 18		adc ($18),y			adc 	(codePtr),y
.2a57	8d 2a 06	sta $062a			sta 	VARHash
.2a5a	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2a5c	c8		iny				iny
.2a5d	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2a60	e8		inx				inx
.2a61	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2a63	90 ec		bcc $2a51			bcc 	_VARCopyName
.2a65	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2a68	29 03		and #$03			and 	#3 							; type is 0-3
.2a6a	0a		asl a				asl 	a
.2a6b	0a		asl a				asl 	a
.2a6c	85 22		sta $22				sta 	zTemp0
.2a6e	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2a71	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2a73	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2a75	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2a76	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2a78	85 22		sta $22				sta 	zTemp0
.2a7a	8d 4c 06	sta $064c			sta 	VARHashEntry
.2a7d	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2a7f	69 00		adc #$00			adc 	#0
.2a81	85 23		sta $23				sta 	zTemp0+1
.2a83	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2a86	60		rts				rts
.2a87					VARClearHashTables:
.2a87	a2 00		ldx #$00			ldx 	#0
.2a89					_VCHRLoop:
.2a89	a9 00		lda #$00			lda 	#0
.2a8b	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2a8e	e8		inx				inx
.2a8f	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2a91	d0 f6		bne $2a89			bne 	_VCHRLoop
.2a93	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2a94					VARCheckSimple:
.2a94	aa		tax				tax 								; save in X
.2a95	b1 18		lda ($18),y			lda 	(codePtr),y
.2a97	c9 7c		cmp #$7c			cmp 	#$7C
.2a99	d0 15		bne $2ab0			bne 	_VCSComplex
.2a9b	c8		iny				iny 								; consume the second byte, the type.
.2a9c	8a		txa				txa  								; character (40-7F) x 4
.2a9d	0a		asl a				asl 	a
.2a9e	0a		asl a				asl  	a
.2a9f	18		clc				clc
.2aa0	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2aa2	85 08		sta $08				sta 	IFR0+IM0
.2aa4	a9 06		lda #$06			lda 	#FastVariables >> 8
.2aa6	69 00		adc #$00			adc 	#0
.2aa8	85 09		sta $09				sta 	IFR0+IM1
.2aaa	64 0a		stz $0a				stz 	IFR0+IM2
.2aac	64 0b		stz $0b				stz 	IFR0+IExp
.2aae	38		sec				sec 								; it's a reference
.2aaf	60		rts				rts
.2ab0					_VCSComplex:
.2ab0	88		dey				dey	 								; extract information.
.2ab1	20 3e 2a	jsr $2a3e			jsr 	VARGetInfo
.2ab4	20 f0 29	jsr $29f0			jsr 	VARFind 					; search for variable
.2ab7	b0 0a		bcs $2ac3			bcs 	_VCSHaveVariable
.2ab9	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2abc	29 02		and #$02			and 	#2
.2abe	d0 25		bne $2ae5			bne 	_VCNoCreate
.2ac0	20 9c 29	jsr $299c			jsr 	VARCreate 					; create variable
.2ac3					_VCSHaveVariable:
.2ac3	48		pha				pha 								; save LSB on the stack
.2ac4	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2ac7	6a		ror a				ror 	a
.2ac8	6a		ror a				ror 	a
.2ac9	68		pla				pla 								; restore LSB
.2aca	90 08		bcc $2ad4			bcc 	_VCSNotArray 				; skip if not an array
.2acc	20 34 29	jsr $2934			jsr 	VARArrayLookup 				; look for subscripts.
.2acf	48		pha				pha 								; check )
.2ad0	20 52 27	jsr $2752			jsr 	ERRCheckRParen
.2ad3	68		pla				pla
.2ad4					_VCSNotArray:
.2ad4	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2ad6	85 08		sta $08				sta 	IFR0+IM0
.2ad8	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2ada	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2add	6a		ror a				ror 	a
.2ade	a9 00		lda #$00			lda 	#0
.2ae0	6a		ror a				ror 	a 							; now $00 or $80
.2ae1	85 0b		sta $0b				sta 	IFR0+IExp
.2ae3	38		sec				sec 								; it's a reference
.2ae4	60		rts				rts
.2ae5					_VCNoCreate:
.2ae5	4c 9f 26	jmp $269f		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2ae8					IFInitialise:
.2ae8	9c de 06	stz $06de			stz 	IFStackIndex 				; reset the internal stack.
.2aeb	60		rts				rts
.2aec					IFloatSubtract:
.2aec	da		phx				phx
.2aed	a2 08		ldx #$08			ldx 	#IFR0
.2aef	20 06 31	jsr $3106			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2af2	fa		plx				plx
.2af3					IFloatAdd:
.2af3	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2af5	05 0b		ora $0b				ora 	IFR0+IExp
.2af7	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2af9	d0 4e		bne $2b49			bne 	_IFloatAddDecimals 			; floating point version.
.2afb					_IFAddSubMantissa:
.2afb	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2afd	45 0b		eor $0b				eor 	IFR0+IExp
.2aff	29 40		and #$40			and 	#IFSign
.2b01	d0 21		bne $2b24			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2b03	18		clc				clc 								; do the actual addition
.2b04	a5 08		lda $08				lda 	IFR0+IM0
.2b06	75 00		adc $00,x			adc 		IM0,x
.2b08	85 08		sta $08				sta 	IFR0+IM0
.2b0a	a5 09		lda $09				lda 	IFR0+IM1
.2b0c	75 01		adc $01,x			adc 		IM1,x
.2b0e	85 09		sta $09				sta 	IFR0+IM1
.2b10	a5 0a		lda $0a				lda 	IFR0+IM2
.2b12	75 02		adc $02,x			adc 		IM2,x
.2b14	85 0a		sta $0a				sta 	IFR0+IM2
.2b16	10 29		bpl $2b41			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2b18	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2b1a	20 2a 31	jsr $312a			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2b1d	20 54 31	jsr $3154			jsr 	IFloatIncExponent
.2b20	d0 1f		bne $2b41			bne 	_IFloatAddExit
.2b22	38		sec				sec 								; overflowed numerically.
.2b23	60		rts				rts
.2b24					_IFloatSubMantissa:
.2b24	38		sec				sec 								; do the subtraction R0-Rx
.2b25	a5 08		lda $08				lda 	IFR0+IM0
.2b27	f5 00		sbc $00,x			sbc 		IM0,x
.2b29	85 08		sta $08				sta 	IFR0+IM0
.2b2b	a5 09		lda $09				lda 	IFR0+IM1
.2b2d	f5 01		sbc $01,x			sbc 		IM1,x
.2b2f	85 09		sta $09				sta 	IFR0+IM1
.2b31	a5 0a		lda $0a				lda 	IFR0+IM2
.2b33	f5 02		sbc $02,x			sbc 		IM2,x
.2b35	85 0a		sta $0a				sta 	IFR0+IM2
.2b37	b0 08		bcs $2b41			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2b39	a2 08		ldx #$08			ldx 	#IFR0
.2b3b	20 0e 31	jsr $310e			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2b3e	20 06 31	jsr $3106			jsr 	IFloatNegate 				; negate the result using sign bit.
.2b41					_IFloatAddExit:
.2b41	18		clc				clc
.2b42	60		rts				rts
.2b43					_IFloatZeroAdd:
.2b43	fa		plx				plx 								; return this value in R0
.2b44	20 8c 30	jsr $308c			jsr 	IFloatCopyFromRegister
.2b47	18		clc				clc
.2b48	60		rts				rts
.2b49					_IFloatAddDecimals:
.2b49	20 f4 30	jsr $30f4			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2b4c	f0 f3		beq $2b41			beq 	_IFloatAddExit
.2b4e	20 32 31	jsr $3132			jsr 	IFloatNormalise 			; normalise RX
.2b51	da		phx				phx 								; normalise R0
.2b52	a2 08		ldx #$08			ldx 	#IFR0
.2b54	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero
.2b57	f0 ea		beq $2b43			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2b59	20 32 31	jsr $3132			jsr 	IFloatNormalise
.2b5c	fa		plx				plx
.2b5d	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2b5f	29 3f		and #$3f			and 	#IFXMask
.2b61	38		sec				sec
.2b62	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2b64	85 20		sta $20				sta 	iTemp0
.2b66	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2b68	29 3f		and #$3f			and 	#IFXMask
.2b6a	38		sec				sec
.2b6b	e9 20		sbc #$20			sbc 	#$20
.2b6d	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2b6f	b0 02		bcs $2b73			bcs 	_IFloatHaveLarger
.2b71	a5 20		lda $20				lda 	iTemp0
.2b73					_IFloatHaveLarger:
.2b73	18		clc				clc 								; get the actual one back.
.2b74	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2b76	20 83 2b	jsr $2b83			jsr 	_IFShiftXToA
.2b79	da		phx				phx
.2b7a	a2 08		ldx #$08			ldx 	#IFR0
.2b7c	20 83 2b	jsr $2b83			jsr 	_IFShiftXToA
.2b7f	fa		plx				plx
.2b80	4c fb 2a	jmp $2afb			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2b83					_IFShiftXToA:
.2b83	8d d6 06	sta $06d6			sta 	IFTarget
.2b86	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero 			; check adding zero ?
.2b89	f0 11		beq $2b9c			beq 	_IFSXExit
.2b8b					_IFSXLoop:
.2b8b	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2b8d	29 3f		and #$3f			and 	#IFXMask
.2b8f	cd d6 06	cmp $06d6			cmp 	IFTarget
.2b92	f0 08		beq $2b9c			beq 	_IFSXExit
.2b94	20 2a 31	jsr $312a			jsr 	IFloatShiftRight
.2b97	20 54 31	jsr $3154			jsr 	IFloatIncExponent
.2b9a	80 ef		bra $2b8b			bra 	_IFSXLoop
.2b9c					_IFSXExit:
.2b9c	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2b9d					IFloatMultiply:
.2b9d	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2ba0	20 55 2c	jsr $2c55			jsr 	IFCalculateNewSign
.2ba3	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2ba5	05 0b		ora $0b				ora 	IFR0+IExp
.2ba7	29 3f		and #$3f			and 	#IFXMask
.2ba9	15 01		ora $01,x			ora 	IM1,x
.2bab	05 09		ora $09				ora 	IFR0+IM1
.2bad	15 02		ora $02,x			ora 	IM2,x
.2baf	05 0a		ora $0a				ora 	IFR0+IM2
.2bb1	d0 0a		bne $2bbd			bne 	_IFMStandard
.2bb3	20 d7 30	jsr $30d7			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2bb6	ad d8 06	lda $06d8			lda 	IFNewSign
.2bb9	85 0b		sta $0b				sta 	IFR0+IExp
.2bbb	18		clc				clc
.2bbc	60		rts				rts
.2bbd					_IFMStandard:
.2bbd	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2bbf	20 4c 2c	jsr $2c4c			jsr 	IFMSignExtend
.2bc2	8d d7 06	sta $06d7			sta 	IFNewExponent
.2bc5	a5 0b		lda $0b				lda 	IFR0+IExp
.2bc7	20 4c 2c	jsr $2c4c			jsr 	IFMSignExtend
.2bca	18		clc				clc
.2bcb	6d d7 06	adc $06d7			adc 	IFNewExponent
.2bce	8d d7 06	sta $06d7			sta 	IFNewExponent
.2bd1	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2bd3	20 9d 30	jsr $309d			jsr 	IFloatCopyToRegister
.2bd6	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2bd8	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.2bdb					_IFMLoop:
.2bdb	a2 14		ldx #$14			ldx 	#IFRTemp
.2bdd	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero
.2be0	f0 3a		beq $2c1c			beq 	_IFMExit
.2be2	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2be5	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2be7	10 03		bpl $2bec			bpl	 	_IFMTargetOkay
.2be9	20 3d 2c	jsr $2c3d			jsr 	_IFMShiftAll
.2bec					_IFMTargetOkay:
.2bec	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2bee	29 01		and #$01			and 	#1
.2bf0	f0 16		beq $2c08			beq 	_IFMNoAdd
.2bf2	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2bf5	18		clc				clc
.2bf6	a5 08		lda $08				lda 	IFR0+IM0
.2bf8	75 00		adc $00,x			adc 		IM0,x
.2bfa	85 08		sta $08				sta 	IFR0+IM0
.2bfc	a5 09		lda $09				lda 	IFR0+IM1
.2bfe	75 01		adc $01,x			adc 		IM1,x
.2c00	85 09		sta $09				sta 	IFR0+IM1
.2c02	a5 0a		lda $0a				lda 	IFR0+IM2
.2c04	75 02		adc $02,x			adc 		IM2,x
.2c06	85 0a		sta $0a				sta 	IFR0+IM2
.2c08					_IFMNoAdd:
.2c08	a5 0a		lda $0a				lda 	IFR0+IM2
.2c0a	10 03		bpl $2c0f			bpl 	_IFMResultOkay
.2c0c	20 3d 2c	jsr $2c3d			jsr 	_IFMShiftAll
.2c0f					_IFMResultOkay:
.2c0f	a2 14		ldx #$14			ldx 	#IFRTemp
.2c11	20 2a 31	jsr $312a			jsr 	IFloatShiftRight
.2c14	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c17	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.2c1a	80 bf		bra $2bdb			bra 	_IFMLoop
.2c1c					_IFMExit:
.2c1c	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2c1f	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2c21	90 0f		bcc $2c32			bcc 	_IFMOkay
.2c23	c9 e0		cmp #$e0			cmp 	#$E0
.2c25	b0 0b		bcs $2c32			bcs 	_IFMOkay
.2c27	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2c29	f0 10		beq $2c3b			beq 	_IFMError
.2c2b	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2c2d	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.2c30	18		clc				clc
.2c31	60		rts				rts
.2c32					_IFMOkay:
.2c32	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2c34	0d d8 06	ora $06d8			ora 	IFNewSign
.2c37	85 0b		sta $0b				sta 	IFR0+IExp
.2c39	18		clc				clc
.2c3a	60		rts				rts
.2c3b					_IFMError:
.2c3b	38		sec				sec
.2c3c	60		rts				rts
.2c3d					_IFMShiftAll:
.2c3d	a2 08		ldx #$08			ldx 	#IFR0
.2c3f	20 2a 31	jsr $312a			jsr 	IFloatShiftRight
.2c42	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c45	20 2a 31	jsr $312a			jsr 	IFloatShiftRight
.2c48	ee d7 06	inc $06d7			inc 	IFNewExponent
.2c4b	60		rts				rts
.2c4c					IFMSignExtend:
.2c4c	29 3f		and #$3f			and 	#IFXMask
.2c4e	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2c50	90 02		bcc $2c54			bcc 	_IFMNoSXX
.2c52	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2c54					_IFMNoSXX:
.2c54	60		rts				rts
.2c55					IFCalculateNewSign:
.2c55	b5 03		lda $03,x			lda 	IExp,x
.2c57	45 0b		eor $0b				eor 	IFR0+IExp
.2c59	29 40		and #$40			and 	#IFSign
.2c5b	8d d8 06	sta $06d8			sta 	IFNewSign
.2c5e	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2c5f					IFloatDivideInteger:
.2c5f	20 78 2c	jsr $2c78			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2c62	b0 06		bcs $2c6a			bcs 	_IFDIExit
.2c64	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2c66	20 8c 30	jsr $308c			jsr 	IFloatCopyFromRegister
.2c69	18		clc				clc
.2c6a					_IFDIExit:
.2c6a	60		rts				rts
.2c6b					IFloatModulusInteger:
.2c6b	20 78 2c	jsr $2c78			jsr 	IFloatDivideIntegerCommon
.2c6e	b0 07		bcs $2c77			bcs 	_IFMIExit
.2c70	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c73	20 8c 30	jsr $308c			jsr 	IFloatCopyFromRegister
.2c76	18		clc				clc
.2c77					_IFMIExit:
.2c77	60		rts				rts
.2c78					IFloatDivideIntegerCommon:
.2c78	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2c7b	20 55 2c	jsr $2c55			jsr 	IFCalculateNewSign 			; calculate sign of result
.2c7e	20 a6 2c	jsr $2ca6			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2c81	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2c83	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero
.2c86	f0 1c		beq $2ca4			beq 	_IFDIDivZero
.2c88	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2c8b	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.2c8e	5a		phy				phy
.2c8f	a0 18		ldy #$18			ldy 	#24
.2c91					_IFDILoop:
.2c91	20 b7 2c	jsr $2cb7			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2c94	20 c3 2c	jsr $2cc3			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2c97	88		dey				dey
.2c98	d0 f7		bne $2c91			bne 	_IFDILoop 					; do it 24 times
.2c9a	7a		ply				ply
.2c9b	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2c9e	29 40		and #$40			and 	#IFSign
.2ca0	85 17		sta $17				sta 	IFRTemp+IExp
.2ca2	18		clc				clc 								; is okay.
.2ca3	60		rts				rts
.2ca4					_IFDIDivZero:
.2ca4	38		sec				sec
.2ca5	60		rts				rts
.2ca6					IFDCopyRXToRTemp:
.2ca6	b5 00		lda $00,x			lda 	IM0,x
.2ca8	85 14		sta $14				sta 	IFRTemp+IM0
.2caa	b5 01		lda $01,x			lda 	IM1,x
.2cac	85 15		sta $15				sta 	IFRTemp+IM1
.2cae	b5 02		lda $02,x			lda 	IM2,x
.2cb0	85 16		sta $16				sta 	IFRTemp+IM2
.2cb2	b5 03		lda $03,x			lda 	IExp,x
.2cb4	85 17		sta $17				sta 	IFRTemp+IExp
.2cb6	60		rts				rts
.2cb7					IFDShiftSTempS1Left:
.2cb7	a2 14		ldx #$14			ldx 	#IFRTemp
.2cb9	20 22 31	jsr $3122			jsr 	IFloatShiftLeft
.2cbc	ae d6 06	ldx $06d6			ldx 	IFTarget
.2cbf	20 23 31	jsr $3123			jsr 	IFloatRotateLeft
.2cc2	60		rts				rts
.2cc3					IFDTrySubtract:
.2cc3	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2cc6	38		sec				sec 								; subtract, saving the results on the stack.
.2cc7	b5 00		lda $00,x			lda 	IM0,x
.2cc9	e5 08		sbc $08				sbc 	IFR0+IM0
.2ccb	48		pha				pha
.2ccc	b5 01		lda $01,x			lda 	IM1,x
.2cce	e5 09		sbc $09				sbc 	IFR0+IM1
.2cd0	48		pha				pha
.2cd1	b5 02		lda $02,x			lda 	IM2,x
.2cd3	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2cd5	b0 03		bcs $2cda			bcs 	_IFDCanSubtract
.2cd7	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2cd8	68		pla				pla
.2cd9	60		rts				rts
.2cda					_IFDCanSubtract:
.2cda	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2cdc	68		pla				pla
.2cdd	95 01		sta $01,x			sta 	IM1,x
.2cdf	68		pla				pla
.2ce0	95 00		sta $00,x			sta 	IM0,x
.2ce2	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2ce4	d0 06		bne $2cec			bne 	_IFDCSExit
.2ce6	e6 15		inc $15				inc 	IFRTemp+IM1
.2ce8	d0 02		bne $2cec			bne 	_IFDCSExit
.2cea	e6 16		inc $16				inc 	IFRTemp+IM2
.2cec					_IFDCSExit:
.2cec	60		rts				rts
.2ced					IFloatBitwiseAnd:
.2ced	5a		phy				phy
.2cee	20 32 2d	jsr $2d32			jsr 	IFPreProcessBitwise 		; set up everything.
.2cf1	d0 0f		bne $2d02			bne 	_IFBAExit
.2cf3					_IFBALoop:
.2cf3	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2cf6	35 00		and $00,x			and 	IM0,x
.2cf8	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2cfb	e8		inx				inx
.2cfc	c8		iny				iny
.2cfd	c0 03		cpy #$03			cpy 	#3
.2cff	d0 f2		bne $2cf3			bne 	_IFBALoop
.2d01	18		clc				clc
.2d02					_IFBAExit:
.2d02	7a		ply				ply
.2d03	60		rts				rts
.2d04					IFloatBitwiseOr:
.2d04	5a		phy				phy
.2d05	20 32 2d	jsr $2d32			jsr 	IFPreProcessBitwise 		; set up everything.
.2d08	d0 0f		bne $2d19			bne 	_IFBAExit
.2d0a					_IFBALoop:
.2d0a	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d0d	15 00		ora $00,x			ora 	IM0,x
.2d0f	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d12	e8		inx				inx
.2d13	c8		iny				iny
.2d14	c0 03		cpy #$03			cpy 	#3
.2d16	d0 f2		bne $2d0a			bne 	_IFBALoop
.2d18	18		clc				clc
.2d19					_IFBAExit:
.2d19	7a		ply				ply
.2d1a	60		rts				rts
.2d1b					IFloatBitwiseXor:
.2d1b	5a		phy				phy
.2d1c	20 32 2d	jsr $2d32			jsr 	IFPreProcessBitwise 		; set up everything.
.2d1f	d0 0f		bne $2d30			bne 	_IFBAExit
.2d21					_IFBALoop:
.2d21	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d24	55 00		eor $00,x			eor 	IM0,x
.2d26	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d29	e8		inx				inx
.2d2a	c8		iny				iny
.2d2b	c0 03		cpy #$03			cpy 	#3
.2d2d	d0 f2		bne $2d21			bne 	_IFBALoop
.2d2f	18		clc				clc
.2d30					_IFBAExit:
.2d30	7a		ply				ply
.2d31	60		rts				rts
.2d32					IFPreProcessBitwise:
.2d32	a0 00		ldy #$00			ldy 	#0 							; set index.
.2d34	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2d36	15 03		ora $03,x			ora 	IExp,x
.2d38	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2d3a	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2d3c	38		sec				sec 								; carry set just in cases.
.2d3d	60		rts				rts
.2d3e					IFloatAbsoluteR0:
.2d3e	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2d40	29 bf		and #$bf			and 	#IFSign ^ 255
.2d42	85 0b		sta $0b				sta 	IFR0+IExp
.2d44	18		clc				clc
.2d45	60		rts				rts
.2d46					IFloatSquareRootR0:
.2d46	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2d48	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero
.2d4b	f0 2e		beq $2d7b			beq 	_IFSRZero
.2d4d	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2d4f	29 40		and #$40			and 	#IFSign
.2d51	d0 2f		bne $2d82			bne 	_IFSRFail
.2d53	20 32 31	jsr $3132			jsr 	IFloatNormalise 			; it will work better !
.2d56	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2d58	20 9d 30	jsr $309d			jsr 	IFloatCopyToRegister
.2d5b	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2d5d	20 4c 2c	jsr $2c4c			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2d60	18		clc				clc
.2d61	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2d63	85 0b		sta $0b				sta 	IFR0+IExp
.2d65	4a		lsr a				lsr 	a 							; which we can halve.
.2d66	38		sec				sec 								; convert back
.2d67	e9 17		sbc #$17			sbc 	#23
.2d69	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2d6b	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2d6d	20 84 2d	jsr $2d84			jsr 	_IFSRNewton
.2d70	20 84 2d	jsr $2d84			jsr 	_IFSRNewton
.2d73	20 84 2d	jsr $2d84			jsr 	_IFSRNewton
.2d76	20 84 2d	jsr $2d84			jsr 	_IFSRNewton
.2d79	18		clc				clc
.2d7a	60		rts				rts
.2d7b					_IFSRZero:
.2d7b	a2 08		ldx #$08			ldx 	#IFR0
.2d7d	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.2d80	18		clc				clc
.2d81	60		rts				rts
.2d82					_IFSRFail:
.2d82	38		sec				sec
.2d83	60		rts				rts
.2d84					_IFSRNewton:
.2d84	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2d86	20 4a 30	jsr $304a			jsr 	IFloatPushRx
.2d89	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2d8b	20 4a 30	jsr $304a			jsr 	IFloatPushRx
.2d8e	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2d90	20 1f 2e	jsr $2e1f			jsr 	IFloatDivideFloat
.2d93	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2d95	20 6b 30	jsr $306b			jsr 	IFloatPullRx
.2d98	20 f3 2a	jsr $2af3			jsr 	IFloatAdd 					; now guess + original/guess
.2d9b	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2d9d	20 2a 31	jsr $312a			jsr 	IFloatShiftRight
.2da0	a2 0c		ldx #$0c			ldx 	#IFR1
.2da2	20 6b 30	jsr $306b			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2da5	60		rts				rts
.2da6					IFloatFractionalR0:
.2da6	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2da8	29 3f		and #$3f			and 	#IFXMask
.2daa	f0 17		beq $2dc3			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2dac	20 3e 2d	jsr $2d3e			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2daf	a2 08		ldx #$08			ldx 	#IFR0
.2db1	20 32 31	jsr $3132			jsr 	IFloatNormalise 			; normalise R0
.2db4	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2db6	20 9d 30	jsr $309d			jsr 	IFloatCopyToRegister
.2db9	20 fc 2d	jsr $2dfc			jsr 	IFloatIntegerR0 			; take integer part of R0
.2dbc	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2dbe	20 ec 2a	jsr $2aec			jsr 	IFloatSubtract
.2dc1	80 05		bra $2dc8			bra 	_FIPExit
.2dc3					_FIPZero:
.2dc3	a2 08		ldx #$08			ldx 	#IFR0
.2dc5	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.2dc8					_FIPExit:
.2dc8	18		clc				clc
.2dc9	60		rts				rts
.2dca					IFloatCompare:
.2dca	20 ec 2a	jsr $2aec			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2dcd	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2dcf	05 0b		ora $0b				ora 	IFR0+IExp
.2dd1	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2dd3	29 3f		and #$3f			and 	#IFXMask
.2dd5	d0 19		bne $2df0			bne 	_IFCNonInteger
.2dd7	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero 			; check if zero
.2dda	f0 0f		beq $2deb			beq 	_IFCZero
.2ddc					_IFCReturnSign:
.2ddc	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2dde	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2de0	48		pha				pha
.2de1	a9 01		lda #$01			lda 	#1
.2de3	20 fd 30	jsr $30fd			jsr 	IFloatSetByte 				; return to +1
.2de6	68		pla				pla 								; sign bit back
.2de7	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2de9	18		clc				clc
.2dea	60		rts				rts
.2deb					_IFCZero:
.2deb	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.2dee	18		clc				clc
.2def	60		rts				rts
.2df0					_IFCNonInteger:
.2df0	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2df2	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2df4	05 09		ora $09				ora 	IFR0+IM1
.2df6	05 0a		ora $0a				ora 	IFR0+IM2
.2df8	f0 f1		beq $2deb			beq 	_IFCZero 					; near enough !
.2dfa	80 e0		bra $2ddc			bra 	_IFCReturnSign 				; return the sign of the difference.
.2dfc					IFloatIntegerR0:
.2dfc	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2dfe	29 3f		and #$3f			and 	#IFXMask
.2e00	f0 1b		beq $2e1d			beq 	_FIPExit 					; if so do nothing
.2e02	a2 08		ldx #$08			ldx 	#IFR0
.2e04	20 32 31	jsr $3132			jsr 	IFloatNormalise 			; normalise
.2e07	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero 			; is it zero ?
.2e0a	f0 0e		beq $2e1a			beq 	_FIPZero 					; if so return zero.
.2e0c					_FIPShift:
.2e0c	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2e0e	29 20		and #$20			and 	#$20 						; still -ve
.2e10	f0 0b		beq $2e1d			beq 	_FIPExit
.2e12	20 2a 31	jsr $312a			jsr 	IFloatShiftRight 			; shift mantissa right
.2e15	20 54 31	jsr $3154			jsr 	IFloatIncExponent 			; bump exponent
.2e18	80 f2		bra $2e0c			bra 	_FIPShift
.2e1a					_FIPZero:
.2e1a	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.2e1d					_FIPExit:
.2e1d	18		clc				clc
.2e1e	60		rts				rts
.2e1f					IFloatDivideFloat:
.2e1f	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2e22	20 55 2c	jsr $2c55			jsr 	IFCalculateNewSign 			; calculate sign of result
.2e25	20 32 31	jsr $3132			jsr 	IFloatNormalise 			; normalise RX
.2e28	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2e2a	20 32 31	jsr $3132			jsr 	IFloatNormalise
.2e2d	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero
.2e30	f0 56		beq $2e88			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2e32	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2e34	20 4c 2c	jsr $2c4c			jsr 	IFMSignExtend
.2e37	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e3a	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2e3d	b5 03		lda $03,x			lda 	IExp,x
.2e3f	20 4c 2c	jsr $2c4c			jsr 	IFMSignExtend
.2e42	38		sec				sec
.2e43	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2e46	38		sec				sec
.2e47	e9 17		sbc #$17			sbc 	#23
.2e49	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e4c	20 8a 2e	jsr $2e8a			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2e4f	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2e51	10 08		bpl $2e5b			bpl 	_IFDFNoShiftResult
.2e53	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2e55	20 2a 31	jsr $312a			jsr 	IFloatShiftRight
.2e58	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e5b					_IFDFNoShiftResult:
.2e5b	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2e5e	30 06		bmi $2e66			bmi 	_IFDFCheckUnderflow
.2e60	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2e62	b0 24		bcs $2e88			bcs 	_IFDFDivZero
.2e64	80 11		bra $2e77			bra		_IFDFExit
.2e66					_IFDFCheckUnderflow:
.2e66	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2e69	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2e6b	b0 0a		bcs $2e77			bcs 	_IFDFExit
.2e6d	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e70	a2 14		ldx #$14			ldx 	#IFRTemp
.2e72	20 2a 31	jsr $312a			jsr 	IFloatShiftRight
.2e75	80 ef		bra $2e66			bra 	_IFDFCheckUnderflow
.2e77					_IFDFExit:
.2e77	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2e7a	29 3f		and #$3f			and 	#IFXMask
.2e7c	0d d8 06	ora $06d8			ora 	IFNewSign
.2e7f	85 17		sta $17				sta 	IFRTemp+IExp
.2e81	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2e83	20 8c 30	jsr $308c			jsr 	IFloatCopyFromRegister
.2e86	18		clc				clc
.2e87	60		rts				rts
.2e88					_IFDFDivZero:
.2e88	38		sec				sec
.2e89	60		rts				rts
.2e8a					IFloatDivideSupport:
.2e8a	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2e8c	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.2e8f	5a		phy				phy 								; main division loop x 23
.2e90	a0 17		ldy #$17			ldy 	#23
.2e92					_IFDSLoop:
.2e92	20 c3 2c	jsr $2cc3			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2e95	20 b7 2c	jsr $2cb7			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2e98	88		dey				dey
.2e99	d0 f7		bne $2e92			bne 	_IFDSLoop 					; do it 24 times
.2e9b	7a		ply				ply
.2e9c	60		rts				rts
.2e9d					IFloatIntegerToStringR0:
.2e9d	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2ea0	20 7c 31	jsr $317c			jsr 	IFloatBufferReset			; empty buffer
.2ea3	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2ea5	29 3f		and #$3f			and 	#IFXMask
.2ea7	d0 1d		bne $2ec6			bne 	_IFIFail
.2ea9	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2eab	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero
.2eae	f0 0e		beq $2ebe			beq 	_IFINotNegative
.2eb0	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2eb2	29 40		and #$40			and 	#IFSign
.2eb4	f0 08		beq $2ebe			beq 	_IFINotNegative
.2eb6	a9 2d		lda #$2d			lda 	#"-"						; output -
.2eb8	20 8b 31	jsr $318b			jsr 	IFloatBufferWrite
.2ebb	20 06 31	jsr $3106			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.2ebe					_IFINotNegative:
.2ebe	20 c8 2e	jsr $2ec8			jsr 	_IFIRecursiveConvert 		; start converting
.2ec1	20 83 31	jsr $3183			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.2ec4	18		clc				clc
.2ec5	60		rts				rts
.2ec6					_IFIFail:
.2ec6	38		sec				sec
.2ec7	60		rts				rts
.2ec8					_IFIRecursiveConvert:
.2ec8	a2 0c		ldx #$0c			ldx 	#IFR1
.2eca	20 9d 30	jsr $309d			jsr 	IFloatCopyToRegister 		; R0->R1
.2ecd	a2 08		ldx #$08			ldx 	#IFR0
.2ecf	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2ed2	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.2ed5	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2ed7	20 5f 2c	jsr $2c5f			jsr 	IFloatDivideInteger
.2eda	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2edc	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero
.2edf	f0 09		beq $2eea			beq 	_IFIOutDigit
.2ee1	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.2ee3	48		pha				pha
.2ee4	20 c8 2e	jsr $2ec8			jsr 	_IFIRecursiveConvert 		; convert the divide result
.2ee7	68		pla				pla
.2ee8	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2eea					_IFIOutDigit:
.2eea	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2eec	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.2eee	90 02		bcc $2ef2			bcc 	_IFINotHex
.2ef0	69 06		adc #$06			adc 	#6
.2ef2					_IFINotHex:
.2ef2	69 30		adc #$30			adc 	#48
.2ef4	20 8b 31	jsr $318b			jsr 	IFloatBufferWrite 			; write character to buffer.
.2ef7	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2ef8					IFloatFloatToStringR0:
.2ef8	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2efa	20 4a 30	jsr $304a			jsr 	IFloatPushRx
.2efd	20 9d 30	jsr $309d			jsr 	IFloatCopyToRegister
.2f00	20 fc 2d	jsr $2dfc			jsr 	IFloatIntegerR0				; make R0 integer
.2f03	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2f05	20 9d 2e	jsr $2e9d			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2f08	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2f0b	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.2f0d	29 3f		and #$3f			and 	#IFXMask
.2f0f	f0 44		beq $2f55			beq 	_IFFSExit
.2f11					_IFloatFracLoop:
.2f11	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2f13	20 8c 30	jsr $308c			jsr 	IFloatCopyFromRegister
.2f16	20 a6 2d	jsr $2da6			jsr 	IFloatFractionalR0
.2f19	20 32 31	jsr $3132			jsr 	IFloatNormalise
.2f1c	a2 10		ldx #$10			ldx 	#IFR2
.2f1e	20 9d 30	jsr $309d			jsr 	IFloatCopyToRegister 		; copy to back R2
.2f21	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2f23	a9 0a		lda #$0a			lda 	#10
.2f25	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.2f28	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.2f2a	20 9d 2b	jsr $2b9d			jsr 	IFloatMultiply
.2f2d	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.2f2f	20 9d 30	jsr $309d			jsr 	IFloatCopyToRegister
.2f32	20 fc 2d	jsr $2dfc			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.2f35	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 3 dp, no more
.2f38	c9 03		cmp #$03			cmp 	#3
.2f3a	f0 16		beq $2f52			beq 	_IFFSExitStripZero
.2f3c	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.2f3f	d0 05		bne $2f46			bne 	_IFloatNotFirst
.2f41	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2f43	20 8b 31	jsr $318b			jsr 	IFloatBufferWrite
.2f46					_IFloatNotFirst:
.2f46	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2f49	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2f4b	09 30		ora #$30			ora 	#"0"						; ASCII
.2f4d	20 8b 31	jsr $318b			jsr 	IFloatBufferWrite 			; write to the buffer.
.2f50	80 bf		bra $2f11			bra 	_IFloatFracLoop
.2f52					_IFFSExitStripZero:
.2f52	20 9a 31	jsr $319a			jsr 	IFloatStripTrailingZeros
.2f55					_IFFSExit:
.2f55	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2f57	20 6b 30	jsr $306b			jsr 	IFloatPullRx
.2f5a	20 83 31	jsr $3183			jsr 	IFloatGetBufferAddress
.2f5d	18		clc				clc
.2f5e	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2f5f					IFloatStringToFloatR0:
.2f5f	8d db 06	sta $06db			sta 	IFCount 					; save length and positions out.
.2f62	86 20		stx $20				stx 	iTemp0
.2f64	84 21		sty $21				sty 	iTemp0+1
.2f66	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2f68	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.2f6b	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2f6e	20 fb 2f	jsr $2ffb			jsr 	IFSTFGetNext 				; get first
.2f71	f0 1b		beq $2f8e			beq 	_IFSTFFail 					; no character, fail.
.2f73	90 10		bcc $2f85			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2f75	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2f77	d0 15		bne $2f8e			bne 	_IFSTFFail
.2f79	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2f7b	8d dc 06	sta $06dc			sta 	IFSignFlag
.2f7e					_IFSTFLoop:
.2f7e	20 fb 2f	jsr $2ffb			jsr 	IFSTFGetNext 				; get next character
.2f81	b0 0b		bcs $2f8e			bcs 	_IFSTFFail 					; bad character.
.2f83	f0 11		beq $2f96			beq 	_IFSTFExit 					; end of data
.2f85					_IFSTFHaveChar:
.2f85	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.2f87	f0 08		beq $2f91			beq 	_IFSTFDecimal
.2f89	20 1f 30	jsr $301f			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.2f8c	80 f0		bra $2f7e			bra 	_IFSTFLoop 					; keep going until . or end.
.2f8e					_IFSTFFail:
.2f8e	38		sec				sec
.2f8f	80 0d		bra $2f9e			bra 	_IFSTFReturn
.2f91					_IFSTFDecimal:
.2f91	20 a6 2f	jsr $2fa6			jsr 	IFSTFDecimal 				; call the decimal places code.
.2f94	b0 08		bcs $2f9e			bcs 	_IFSTFReturn 				; error
.2f96					_IFSTFExit:
.2f96	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2f98	0d dc 06	ora $06dc			ora 	IFSignFlag
.2f9b	85 0b		sta $0b				sta 	IFR0+IExp
.2f9d	18		clc				clc
.2f9e					_IFSTFReturn:
.2f9e	60		rts				rts
.2f9f					IFloatAddDecimalToR0:
.2f9f	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2fa2	86 20		stx $20				stx 	iTemp0
.2fa4	84 21		sty $21				sty 	iTemp0+1
.2fa6					IFSTFDecimal:
.2fa6	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2fa8	20 4a 30	jsr $304a			jsr 	IFloatPushRx
.2fab	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.2fad	20 fb 30	jsr $30fb			jsr 	IFloatSetZero
.2fb0	9c dd 06	stz $06dd			stz 	IFDecimalPlaces 			; zero DP.
.2fb3					_IFSTDLoop:
.2fb3	20 fb 2f	jsr $2ffb			jsr 	IFSTFGetNext 				; get next
.2fb6	b0 41		bcs $2ff9			bcs 	_IFSTFFail2 				; bad character.
.2fb8	f0 11		beq $2fcb			beq 	_IFSTFComplete 				; end of data, work out the result.
.2fba	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2fbc	f0 39		beq $2ff7			beq 	_IFSTFExit2
.2fbe	20 1f 30	jsr $301f			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.2fc1	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2fc4	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2fc7	c9 03		cmp #$03			cmp 	#3
.2fc9	90 e8		bcc $2fb3			bcc 	_IFSTDLoop
.2fcb					_IFSTFComplete:
.2fcb	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2fce	f0 27		beq $2ff7			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2fd0	3a		dec a				dec 	a 							; table indexed from 1.
.2fd1	0a		asl a				asl 	a
.2fd2	0a		asl a				asl 	a
.2fd3	aa		tax				tax
.2fd4	bd 36 30	lda $3036,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2fd7	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2fd9	bd 37 30	lda $3037,x			lda 	TableTen+1,x
.2fdc	85 0d		sta $0d				sta  	IFR1+IM1
.2fde	bd 38 30	lda $3038,x			lda 	TableTen+2,x
.2fe1	85 0e		sta $0e				sta  	IFR1+IM2
.2fe3	bd 39 30	lda $3039,x			lda 	TableTen+3,x
.2fe6	85 0f		sta $0f				sta  	IFR1+IExp
.2fe8	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2fea	20 9d 2b	jsr $2b9d			jsr 	IFloatMultiply
.2fed	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.2fef	20 6b 30	jsr $306b			jsr 	IFloatPullRx
.2ff2	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.2ff4	20 f3 2a	jsr $2af3			jsr 	IFloatAdd
.2ff7					_IFSTFExit2:
.2ff7	18		clc				clc
.2ff8	60		rts				rts
.2ff9					_IFSTFFail2:
.2ff9	38		sec				sec
.2ffa	60		rts				rts
.2ffb					IFSTFGetNext:
.2ffb	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.2ffe	f0 19		beq $3019			beq 	_IFSTFReturnOk
.3000	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3002	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3004	d0 02		bne $3008			bne 	_IFSTFGNNoCarry
.3006	e6 21		inc $21				inc 	iTemp0+1
.3008					_IFSTFGNNoCarry:
.3008	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.300b	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.300d	f0 08		beq $3017			beq 	_IFSTFGOkay
.300f	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3011	90 08		bcc $301b			bcc 	_IFSTFGFail
.3013	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3015	b0 04		bcs $301b			bcs 	_IFSTFGFail
.3017					_IFSTFGOkay:
.3017	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3019					_IFSTFReturnOk:
.3019	18		clc				clc
.301a	60		rts				rts
.301b					_IFSTFGFail:
.301b	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.301d	38		sec				sec
.301e	60		rts				rts
.301f					IFSTFAddR0:
.301f	29 0f		and #$0f			and 	#15 						; to int value
.3021	48		pha				pha 								; save it.
.3022	a9 0a		lda #$0a			lda 	#10
.3024	a2 0c		ldx #$0c			ldx 	#IFR1
.3026	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.3029	20 9d 2b	jsr $2b9d			jsr 	IFloatMultiply
.302c	68		pla				pla
.302d	a2 0c		ldx #$0c			ldx 	#IFR1
.302f	20 fd 30	jsr $30fd			jsr 	IFloatSetByte
.3032	20 f3 2a	jsr $2af3			jsr 	IFloatAdd
.3035	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.3036					TableTen:
>3036	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>303a	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>303e	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3042	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3046	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.304a					IFloatPushRx:
.304a	5a		phy				phy
.304b	ac de 06	ldy $06de			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.304e	b5 00		lda $00,x			lda 	IM0,x
.3050	99 df 06	sta $06df,y			sta 	IFStack,y
.3053	b5 01		lda $01,x			lda 	IM1,x
.3055	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.3058	b5 02		lda $02,x			lda 	IM2,x
.305a	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.305d	b5 03		lda $03,x			lda 	IExp,x
.305f	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.3062	c8		iny				iny
.3063	c8		iny				iny
.3064	c8		iny				iny
.3065	c8		iny				iny
.3066	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.3069	7a		ply				ply
.306a	60		rts				rts
.306b					IFloatPullRx:
.306b	5a		phy				phy
.306c	ac de 06	ldy $06de			ldy 	IFStackIndex	 			; decrement SP
.306f	88		dey				dey
.3070	88		dey				dey
.3071	88		dey				dey
.3072	88		dey				dey
.3073	b9 df 06	lda $06df,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.3076	95 00		sta $00,x			sta 	IM0,x
.3078	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.307b	95 01		sta $01,x			sta 	IM1,x
.307d	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.3080	95 02		sta $02,x			sta 	IM2,x
.3082	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.3085	95 03		sta $03,x			sta 	IExp,x
.3087	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.308a	7a		ply				ply
.308b	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.308c					IFloatCopyFromRegister:
.308c	b5 00		lda $00,x			lda 	0,x
.308e	85 08		sta $08				sta 	IFR0
.3090	b5 01		lda $01,x			lda 	1,x
.3092	85 09		sta $09				sta 	IFR0+1
.3094	b5 02		lda $02,x			lda 	2,x
.3096	85 0a		sta $0a				sta 	IFR0+2
.3098	b5 03		lda $03,x			lda 	3,x
.309a	85 0b		sta $0b				sta 	IFR0+3
.309c	60		rts				rts
.309d					IFloatCopyToRegister:
.309d	a5 08		lda $08				lda 	IFR0
.309f	95 00		sta $00,x			sta 	0,x
.30a1	a5 09		lda $09				lda 	IFR0+1
.30a3	95 01		sta $01,x			sta 	1,x
.30a5	a5 0a		lda $0a				lda 	IFR0+2
.30a7	95 02		sta $02,x			sta 	2,x
.30a9	a5 0b		lda $0b				lda 	IFR0+3
.30ab	95 03		sta $03,x			sta 	3,x
.30ad	60		rts				rts
.30ae					IFloatLoadInline:
.30ae	68		pla				pla 								; pop address off to iTemp0
.30af	85 20		sta $20				sta 	iTemp0
.30b1	68		pla				pla
.30b2	85 21		sta $21				sta 	iTemp0+1
.30b4	a0 01		ldy #$01			ldy 	#1
.30b6	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.30b8	95 00		sta $00,x			sta 	0,x
.30ba	c8		iny				iny
.30bb	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.30bd	95 01		sta $01,x			sta 	1,x
.30bf	c8		iny				iny
.30c0	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.30c2	95 02		sta $02,x			sta 	2,x
.30c4	c8		iny				iny
.30c5	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.30c7	95 03		sta $03,x			sta 	3,x
.30c9	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.30ca	a5 20		lda $20				lda 	iTemp0
.30cc	69 05		adc #$05			adc 	#5
.30ce	85 20		sta $20				sta 	iTemp0
.30d0	90 02		bcc $30d4			bcc 	_IFLINoCarry
.30d2	e6 21		inc $21				inc 	iTemp0+1
.30d4					_IFLINoCarry:
.30d4	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.30d7					IFloatMultiply8BitRx:
.30d7	5a		phy		        phy
.30d8	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.30da	a4 08		ldy $08		        ldy     IFR0+IM0
.30dc	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.30dd	85 08		sta $08		        sta     IFR0+IM0
.30df	84 09		sty $09		        sty     IFR0+IM1
.30e1	a9 00		lda #$00	        lda     #0
.30e3	a0 08		ldy #$08	        ldy     #8
.30e5					_IFMLoop:
.30e5	90 03		bcc $30ea	        bcc     _IFMNoAdd
.30e7	18		clc		        clc
.30e8	65 09		adc $09		        adc     IFR0+IM1
.30ea					_IFMNoAdd:
.30ea	6a		ror a		        ror     a
.30eb	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.30ed	88		dey		        dey
.30ee	d0 f5		bne $30e5	        bne     _IFMLoop
.30f0	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.30f2	7a		ply		        ply
.30f3	60		rts		        rts
.30f4					IFloatCheckZero:
.30f4	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.30f6	15 01		ora $01,x			ora 	IM1,x
.30f8	15 02		ora $02,x			ora 	IM2,x
.30fa	60		rts				rts
.30fb					IFloatSetZero:
.30fb	a9 00		lda #$00			lda 	#0
.30fd					IFloatSetByte:
.30fd	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.30ff	74 01		stz $01,x			stz 	IM1,x
.3101	74 02		stz $02,x			stz 	IM2,x
.3103	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3105	60		rts				rts
.3106					IFloatNegate:
.3106	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3108	49 40		eor #$40			eor 	#IFSign
.310a	95 03		sta $03,x			sta 	IExp,x
.310c	18		clc				clc
.310d	60		rts				rts
.310e					IFloatMantissaNegate:
.310e	38		sec				sec 								; when you want a real 2's complement negative value.
.310f	a9 00		lda #$00			lda 	#0
.3111	f5 00		sbc $00,x			sbc 	IM0,x
.3113	95 00		sta $00,x			sta 	IM0,x
.3115	a9 00		lda #$00			lda 	#0
.3117	f5 01		sbc $01,x			sbc 	IM1,x
.3119	95 01		sta $01,x			sta 	IM1,x
.311b	a9 00		lda #$00			lda 	#0
.311d	f5 02		sbc $02,x			sbc 	IM2,x
.311f	95 02		sta $02,x			sta 	IM2,x
.3121	60		rts				rts
.3122					IFloatShiftLeft:
.3122	18		clc				clc
.3123					IFloatRotateLeft:
.3123	36 00		rol $00,x			rol 	IM0,x
.3125	36 01		rol $01,x			rol 	IM1,x
.3127	36 02		rol $02,x			rol 	IM2,x
.3129	60		rts				rts
.312a					IFloatShiftRight:
.312a	18		clc				clc
.312b					IFloatRotateRight:
.312b	76 02		ror $02,x			ror 	IM2,x
.312d	76 01		ror $01,x			ror 	IM1,x
.312f	76 00		ror $00,x			ror 	IM0,x
.3131	60		rts				rts
.3132					IFloatNormalise:
.3132	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero 			; is it zero
.3135	f0 18		beq $314f			beq 	_IFNExitZero 				; if so exit
.3137					_IFNLoop:
.3137	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3139	29 c0		and #$c0			and 	#$C0
.313b	c9 40		cmp #$40			cmp 	#$40
.313d	f0 13		beq $3152			beq 	_IFNExitOkay 				; if so , then we are done.
.313f	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3141	29 3f		and #$3f			and 	#$3F
.3143	c9 20		cmp #$20			cmp 	#$20
.3145	f0 0b		beq $3152			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3147	20 68 31	jsr $3168			jsr 	IFloatDecExponent
.314a	20 22 31	jsr $3122			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.314d	80 e8		bra $3137			bra 	_IFNLoop
.314f					_IFNExitZero:
.314f	20 fb 30	jsr $30fb			jsr 	IFloatSetZero 				; set the result to zero
.3152					_IFNExitOkay:
.3152	18		clc				clc  								; return with CC.
.3153	60		rts				rts
.3154					IFloatIncExponent:
.3154	b5 03		lda $03,x			lda 	IExp,x
.3156	48		pha				pha
.3157	29 c0		and #$c0			and 	#$C0
.3159	8d 1f 07	sta $071f			sta 	IFXTemp
.315c	68		pla				pla
.315d	1a		inc a				inc 	a
.315e	29 3f		and #$3f			and 	#$3F
.3160	48		pha				pha
.3161	0d 1f 07	ora $071f			ora 	IFXTemp
.3164	95 03		sta $03,x			sta 	IExp,x
.3166	68		pla				pla
.3167	60		rts				rts
.3168					IFloatDecExponent:
.3168	b5 03		lda $03,x			lda 	IExp,x
.316a	48		pha				pha
.316b	29 c0		and #$c0			and 	#$C0
.316d	8d 1f 07	sta $071f			sta 	IFXTemp
.3170	68		pla				pla
.3171	3a		dec a				dec 	a
.3172	29 3f		and #$3f			and 	#$3F
.3174	48		pha				pha
.3175	0d 1f 07	ora $071f			ora 	IFXTemp
.3178	95 03		sta $03,x			sta 	IExp,x
.317a	68		pla				pla
.317b	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.317c					IFloatBufferReset:
.317c	9c 20 07	stz $0720			stz 	IFBufferCount
.317f	9c 21 07	stz $0721			stz 	IFBuffer
.3182	60		rts				rts
.3183					IFloatGetBufferAddress:
.3183	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.3185	a2 21		ldx #$21			ldx 	#(IFBuffer & $FF)
.3187	ad 20 07	lda $0720			lda 	IFBufferCount
.318a	60		rts				rts
.318b					IFloatBufferWrite:
.318b	da		phx				phx
.318c	ae 20 07	ldx $0720			ldx 	IFBufferCount
.318f	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.3192	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.3195	ee 20 07	inc $0720			inc 	IFBufferCount
.3198	fa		plx				plx
.3199	60		rts				rts
.319a					IFloatStripTrailingZeros:
.319a	ae 20 07	ldx $0720			ldx 	IFBufferCount
.319d	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.31a0	c9 30		cmp #$30			cmp		#"0"
.31a2	d0 0f		bne $31b3			bne 	_IFSTExit
.31a4	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.31a7	c9 2e		cmp #$2e			cmp 	#"."
.31a9	f0 08		beq $31b3			beq 	_IFSTExit
.31ab	ce 20 07	dec $0720			dec 	IFBufferCount
.31ae	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.31b1	80 e7		bra $319a			bra 	IFloatStripTrailingZeros
.31b3					_IFSTExit:
.31b3	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.31b4					IFloatCheckRange:
.31b4	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.31b6	09 40		ora #$40			ora 	#IFSign
.31b8	85 0b		sta $0b				sta 	IFR0+IExp
.31ba	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.31bc	20 f3 2a	jsr $2af3			jsr 	IFloatAdd 					; add allowed to error.
.31bf	a2 08		ldx #$08			ldx 	#IFR0
.31c1	20 f4 30	jsr $30f4			jsr 	IFloatCheckZero 			; error if < 0
.31c4	f0 06		beq $31cc			beq 	_IFAOkay
.31c6	a5 0b		lda $0b				lda 	IFR0+IExp
.31c8	29 40		and #$40			and 	#IFSign
.31ca	d0 01		bne $31cd			bne 	_IFAFail
.31cc					_IFAOkay:
.31cc	60		rts				rts
.31cd					_IFAFail:
.31cd	38		sec				sec
.31ce	68		pla				pla 								; get address - 2
.31cf	e9 02		sbc #$02			sbc 	#2
.31d1	aa		tax				tax
.31d2	68		pla				pla
.31d3	e9 00		sbc #$00			sbc 	#0
.31d5	a8		tay				tay
.31d6	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.31d8					_IFAStop:
>31d8	db						.byte 	$DB 						; display an error AA ADR ADR
.31d9	80 fd		bra $31d8			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
