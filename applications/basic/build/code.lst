
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Wed Jul  5 21:54:21 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorSize:
>0344							.fill 	2
.0346					sectorCount:
>0346							.fill 	2
.0348					currentSector:
>0348							.fill 	2
.034a					successFlag:
>034a							.fill 	1
.034b					sectorHeader:
.034b					shFirstNext:
>034b							.fill 	1
.034c					shContinue:
>034c							.fill 	1
.034d					shDataSize:
>034d							.fill 	2
.034f					shFileSize:
>034f							.fill 	2
>0351							.fill 	10
.035b					shNameLength:
>035b							.fill 	1
.035c					shNameText:
>035c							.fill 	15
.036b					shFileSizeCopy:
>036b							.fill 	2
.036d					notFirstSector:
>036d							.fill 	1
.036e					sectorCapacity:
>036e							.fill 	2
.0370					fileRemainingSize:
>0370							.fill 	2
.0372					bytesToWrite:
>0372							.fill 	2
>0374							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 ae 21	jsr $21ae			jsr 	PGMSetBaseAddress
.1007	20 55 2e	jsr $2e55			jsr 	IFInitialise 				; setup math library
.100a	4c bc 14	jmp $14bc			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="I"					AM_ABSOLUTEIX	= 'I' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d0					AM_IND 		= ('P'|AM_ZPAGE) 				; lda (nn)
=$d1					AM_INDX		= ('Q'|AM_ZPAGE) 				; lda (nn,x)
=$d2					AM_INDY		= ('R'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f
=$8d90					PR_RENUMBER = $8d90

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.100d					Command_AssemblerStart:
.100d					_CALoop:
.100d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.100f	c8		iny				iny 								; consume it.
.1010	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.1012	f0 15		beq $1029			beq 	_CALabel
.1014	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.1016	f0 30		beq $1048			beq 	_CAExit
.1018	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.101a	f0 f1		beq $100d			beq 	_CALoop
.101c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; end of line.
.101e	f0 14		beq $1034			beq 	_CAEnd
.1020	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.1022	c9 40		cmp #$40			cmp 	#$40
.1024	f0 08		beq $102e			beq 	_CAOpcode
.1026	4c f2 27	jmp $27f2		jmp	ErrorV_syntax
.1029					_CALabel:
.1029	20 9e 10	jsr $109e			jsr 	ASLabel 					; handle a label
.102c	80 df		bra $100d			bra 	_CALoop
.102e					_CAOpcode:
.102e	88		dey				dey 								; get it back
.102f	20 8e 10	jsr $108e			jsr 	ASOpcode 					; assemble that opcode.
.1032	80 d9		bra $100d			bra 	_CALoop
.1034	18		clc		_CAEnd:	clc 								; next line
.1035	a0 03		ldy #$03			ldy 	#3 							; tokenised code position.
.1037	b2 18		lda ($18)			lda 	(codePtr)
.1039	65 18		adc $18				adc 	codePtr
.103b	85 18		sta $18				sta 	codePtr
.103d	90 02		bcc $1041			bcc 	_CANoCarry
.103f	e6 19		inc $19				inc 	codePtr+1
.1041					_CANoCarry:
.1041	b2 18		lda ($18)			lda 	(codePtr) 					; code present
.1043	d0 c8		bne $100d			bne 	_CALoop 					; go round again
.1045	4c 28 16	jmp $1628			jmp 	Command_END 				; do END.
.1048					_CAExit:
.1048	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/calcopcode.asm

.1049					ASCalculateOpcodeHash:
.1049	20 70 10	jsr $1070			jsr 	_ASCGetCharacter 			; get first alphanumeric character 0-25 rep A-Z
.104c	20 7d 10	jsr $107d			jsr 	_ASCProcess 				; go through the shift/multiply process
.104f	85 24		sta $24				sta 	zTemp0
.1051	20 70 10	jsr $1070			jsr 	_ASCGetCharacter 			; get second alphanumeric character
.1054	18		clc				clc
.1055	65 24		adc $24				adc 	zTemp0 						; add previous result.
.1057	2a		rol a				rol 	a 							; 8 bit rotate left
.1058	69 00		adc #$00			adc 	#0
.105a	49 a5		eor #$a5			eor 	#165 						; XOR with 165
.105c	20 7d 10	jsr $107d			jsr 	_ASCProcess 				; and shift/multiply again.
.105f	85 24		sta $24				sta 	zTemp0
.1061	20 70 10	jsr $1070			jsr 	_ASCGetCharacter 			; get third character
.1064	18		clc				clc
.1065	65 24		adc $24				adc 	zTemp0 						; and add
.1067	48		pha				pha
.1068	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by
.106a	c9 7c		cmp #$7c			cmp 	#$7C 						; $7C which identifies end of identifier.
.106c	d0 1a		bne $1088			bne 	_ASCSyntax
.106e	c8		iny				iny
.106f	60		rts				rts
.1070					_ASCGetCharacter:
.1070	b1 18		lda ($18),y			lda 	(codePtr),y 				; get and consume character
.1072	c8		iny				iny
.1073	38		sec				sec
.1074	e9 40		sbc #$40			sbc 	#$40 						; shift $40 -> $00
.1076	30 10		bmi $1088			bmi 	_ASCSyntax 					; check range.
.1078	c9 1a		cmp #$1a			cmp 	#26
.107a	b0 0c		bcs $1088			bcs 	_ASCSyntax
.107c	60		rts				rts
.107d					_ASCProcess:
.107d	85 25		sta $25				sta 	zTemp0+1 					; multiply by 5
.107f	0a		asl a				asl 	a
.1080	0a		asl a				asl 	a
.1081	18		clc				clc
.1082	65 25		adc $25				adc 	zTemp0+1
.1084	18		clc				clc 								; add 68
.1085	69 44		adc #$44			adc 	#68
.1087	60		rts				rts
.1088					_ASCSyntax:
.1088	4c f2 27	jmp $27f2		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/findmode.asm

.108b					ASIdentifyAddressMode:
.108b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/generate.asm

.108c					ASGenerateCode:
.108c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/getmode.asm

.108d					ASGetModeForOpcode:
.108d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/instruction.asm

.108e					ASOpcode:
.108e	20 49 10	jsr $1049			jsr 	ASCalculateOpcodeHash 		; calculate the opcode hash.
.1091	8d 03 05	sta $0503			sta 	ASCurrOpcode
.1094	20 8b 10	jsr $108b			jsr 	ASIdentifyAddressMode 		; identify the address mode type.
.1097	8d 04 05	sta $0504			sta 	ASCurrMode
.109a	20 8c 10	jsr $108c			jsr 	ASGenerateCode 				; search and generate appropriate code.
.109d	60		rts				rts
.0503					ASCurrOpcode:
>0503							.fill 	1
.0504					ASCurrMode:
>0504							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.109e					ASLabel:
.109e	20 8b 18	jsr $188b			jsr 	EXPTermR0 					; get term
.10a1	90 1b		bcc $10be			bcc 	_ALError 					; must be a reference term.
.10a3	24 0b		bit $0b				bit 	IFR0+IExp	 				; string reference ?
.10a5	30 17		bmi $10be			bmi 	_ALError
.10a7	5a		phy				phy
.10a8	ad b2 06	lda $06b2			lda 	('P'-'A')*4 + FastVariables	; copy P to variable
.10ab	92 08		sta ($08)			sta 	(IFR0+IM0)
.10ad	a0 01		ldy #$01			ldy 	#1
.10af	ad b3 06	lda $06b3			lda 	('P'-'A')*4 + FastVariables+1
.10b2	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.10b4	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.10b6	c8		iny				iny
.10b7	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.10b9	c8		iny				iny
.10ba	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.10bc	7a		ply				ply
.10bd	60		rts				rts
.10be					_ALError:
.10be	4c f2 27	jmp $27f2		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.10c1					Command_ASSERT:
.10c1	20 03 18	jsr $1803			jsr 	EXPEvalNumber 				; get a number to assert
.10c4	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.10c6	20 61 34	jsr $3461			jsr 	IFloatCheckZero
.10c9	f0 01		beq $10cc			beq 	_CAFail 					; if so, the assert fails.
.10cb	60		rts				rts
.10cc					_CAFail:
.10cc	4c 48 28	jmp $2848		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.10cf					Command_CLEAR:
.10cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.10d1	c9 9b		cmp #$9b			cmp 	#PR_COLON
.10d3	f0 14		beq $10e9			beq 	_CLNoParam
.10d5	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.10d7	f0 10		beq $10e9			beq 	_CLNoParam
.10d9	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; address for CLEAR
.10dc	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.10de	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.10e0	b0 0b		bcs $10ed			bcs 	_CLMemory
.10e2	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.10e4	90 07		bcc $10ed			bcc 	_CLMemory
.10e6	8d 1d 05	sta $051d			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.10e9					_CLNoParam:
.10e9	20 f0 10	jsr $10f0			jsr 	ClearCode
.10ec	60		rts				rts
.10ed					_CLMemory:
.10ed	4c e2 28	jmp $28e2		jmp	ErrorV_memory
.10f0					ClearCode:
.10f0	20 c1 21	jsr $21c1			jsr 	PGMEndProgram 				; end program => zTemp0
.10f3	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.10f5	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.10f7	1a		inc a				inc 	a
.10f8	85 2b		sta $2b				sta 	freeMemory+1
.10fa	20 f4 2d	jsr $2df4			jsr 	VARClearHashTables
.10fd	ad 1d 05	lda $051d			lda 	PGMEndMemoryHigh
.1100	20 39 2a	jsr $2a39			jsr 	StackReset 					; page passed on in A
.1103	20 98 2a	jsr $2a98			jsr 	StringSystemInitialise
.1106	20 5d 27	jsr $275d			jsr 	ScanProcedures
.1109	20 8a 15	jsr $158a			jsr 	Command_RESTORE
.110c	60		rts				rts
.110d					AllocateMemory:
.110d	5a		phy				phy 								; save Y
.110e	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.1110	5a		phy				phy
.1111	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.1113	5a		phy				phy
.1114	a8		tay				tay 								; count is now in XY
.1115					_AllocateLoop:
.1115	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1117	d0 04		bne $111d			bne 	_AllocateOne
.1119	c0 00		cpy #$00			cpy 	#0
.111b	f0 15		beq $1132			beq 	_AllocateExit
.111d					_AllocateOne:
.111d	a9 00		lda #$00			lda 	#0 							; zero byte
.111f	92 2a		sta ($2a)			sta 	(freeMemory)
.1121	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.1123	d0 05		bne $112a			bne 	_AllocateSkipCarry
.1125	e6 2b		inc $2b				inc 	freeMemory+1
.1127	20 36 11	jsr $1136			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.112a					_AllocateSkipCarry:
.112a	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.112c	d0 01		bne $112f			bne 	_AllocateSkipBorrow
.112e	ca		dex				dex
.112f					_AllocateSkipBorrow:
.112f	88		dey				dey
.1130	80 e3		bra $1115			bra 	_AllocateLoop
.1132					_AllocateExit:
.1132	fa		plx				plx 								; restore address
.1133	68		pla				pla
.1134	7a		ply				ply 								; restore Y
.1135	60		rts				rts
.1136					ClearCheckMemory:
.1136	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.1138	1a		inc a				inc 	a 							; spacing 2 pages
.1139	1a		inc a				inc 	a
.113a	cd 25 06	cmp $0625			cmp 	stringMemory+1 				; problems if hit string memory
.113d	b0 01		bcs $1140			bcs  	_CCMError
.113f	60		rts				rts
.1140					_CCMError:
.1140	4c e2 28	jmp $28e2		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1143					CommandDIM:
.1143	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1145	29 c0		and #$c0			and 	#$C0
.1147	c9 40		cmp #$40			cmp 	#$40
.1149	d0 39		bne $1184			bne 	_CDSyntax
.114b	20 ab 2d	jsr $2dab			jsr 	VARGetInfo 					; get information
.114e	ad 33 06	lda $0633			lda 	VARType 					; check array.
.1151	29 02		and #$02			and 	#2
.1153	f0 2f		beq $1184			beq 	_CDSyntax
.1155	20 5d 2d	jsr $2d5d			jsr 	VARFind 					; does it already exist
.1158	b0 2d		bcs $1187			bcs 	_CDExists
.115a	20 09 2d	jsr $2d09			jsr 	VARCreate 					; create it - returns data ptr in XA
.115d	da		phx				phx 								; save target address
.115e	48		pha				pha
.115f	ad 33 06	lda $0633			lda 	VARType 					; type ID.
.1162	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1164	20 8a 11	jsr $118a			jsr 	CreateArray 				; create array to XA
.1167	84 26		sty $26				sty 	zTemp1 						; save Y
.1169	7a		ply				ply 								; restore target to zTemp0
.116a	84 24		sty $24				sty 	zTemp0
.116c	7a		ply				ply
.116d	84 25		sty $25				sty 	zTemp0+1
.116f	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.1171	a0 01		ldy #$01			ldy 	#1
.1173	8a		txa				txa
.1174	91 24		sta ($24),y			sta 	(zTemp0),y
.1176	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.1178	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 				; check )
.117b	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.117d	c8		iny				iny
.117e	c9 99		cmp #$99			cmp 	#PR_COMMA
.1180	f0 c1		beq $1143			beq 	CommandDIM
.1182	88		dey				dey
.1183	60		rts				rts
.1184					_CDSyntax:
.1184	4c f2 27	jmp $27f2		jmp	ErrorV_syntax
.1187					_CDExists:
.1187	4c ba 28	jmp $28ba		jmp	ErrorV_redefine
.118a					CreateArray:
.118a	8d 05 05	sta $0505			sta 	CAType						; save type
.118d	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; get array dimension to R0
.1190	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.1192	c9 99		cmp #$99			cmp 	#PR_COMMA
.1194	f0 04		beq $119a			beq 	_CATwoDimensions
.1196	20 e6 11	jsr $11e6			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.1199	60		rts				rts
.119a					_CATwoDimensions:
.119a	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.119c	8d 07 05	sta $0507			sta 	CADim1+1
.119f	a5 08		lda $08				lda 	IFR0+IM0
.11a1	8d 06 05	sta $0506			sta 	CADim1+0
.11a4	20 d3 29	jsr $29d3			jsr 	ERRCheckComma 				; check comma
.11a7	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.11aa	5a		phy				phy 								; save Y position
.11ab	18		clc				clc 								; allocate the outer array of pointers.
.11ac	ae 07 05	ldx $0507			ldx 	CADim1+1
.11af	ad 06 05	lda $0506			lda 	CADim1
.11b2	20 25 12	jsr $1225			jsr 	CSAAllocate 				; allocate the outer array
.11b5	da		phx				phx									; save this address on the stack
.11b6	48		pha				pha
.11b7	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.11b9	85 28		sta $28				sta 	zTemp2
.11bb					_CACreateSubLoop:
.11bb	38		sec				sec
.11bc	20 e6 11	jsr $11e6			jsr 	CreateSingleArray 			; create data array of required size.
.11bf	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.11c1	91 28		sta ($28),y			sta 	(zTemp2),y
.11c3	8a		txa				txa
.11c4	c8		iny				iny
.11c5	91 28		sta ($28),y			sta 	(zTemp2),y
.11c7	18		clc				clc  								; next slot.
.11c8	a5 28		lda $28				lda 	zTemp2
.11ca	69 02		adc #$02			adc 	#2
.11cc	85 28		sta $28				sta 	zTemp2
.11ce	90 02		bcc $11d2			bcc 	_CACNoCarry
.11d0	e6 29		inc $29				inc 	zTemp2+1
.11d2					_CACNoCarry:
.11d2	ad 06 05	lda $0506			lda 	CADim1 						; use DIM1 as a counter
.11d5	d0 03		bne $11da			bne 	_CACNoBorrow
.11d7	ce 07 05	dec $0507			dec 	CADim1+1
.11da					_CACNoBorrow:
.11da	ce 06 05	dec $0506			dec 	CADim1
.11dd	ad 07 05	lda $0507			lda 	CADim1+1 					; but do one more.
.11e0	10 d9		bpl $11bb			bpl 	_CACreateSubLoop
.11e2	68		pla				pla
.11e3	fa		plx				plx
.11e4	7a		ply				ply
.11e5	60		rts				rts
.11e6					CreateSingleArray:
.11e6	5a		phy				phy
.11e7	38		sec				sec 								; allocate memory block all zeros.
.11e8	a5 08		lda $08				lda 	IFR0+IM0
.11ea	a6 09		ldx $09				ldx 	IFR0+IM1
.11ec	20 25 12	jsr $1225			jsr 	CSAAllocate
.11ef	ac 05 05	ldy $0505			ldy 	CAType 						; if numbers, we don't need to initialise.
.11f2	f0 2f		beq $1223			beq 	_CSANoInit
.11f4	da		phx				phx 								; save address of new array
.11f5	48		pha				pha
.11f6	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.11f8	86 25		stx $25				stx 	zTemp0+1
.11fa	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.11fc	b1 24		lda ($24),y			lda 	(zTemp0),y
.11fe	a8		tay				tay
.11ff	b2 24		lda ($24)			lda 	(zTemp0)
.1201	aa		tax				tax
.1202					_CSAEraseString:
.1202	5a		phy				phy
.1203	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1205	a9 80		lda #$80			lda 	#$80
.1207	91 24		sta ($24),y			sta 	(zTemp0),y
.1209	7a		ply				ply
.120a	18		clc				clc 								; add 4 to next slot.
.120b	a5 24		lda $24				lda 	zTemp0
.120d	69 04		adc #$04			adc 	#4
.120f	85 24		sta $24				sta 	zTemp0
.1211	90 02		bcc $1215			bcc 	_CSAENoCarry
.1213	e6 25		inc $25				inc 	zTemp0+1
.1215					_CSAENoCarry:
.1215	e0 00		cpx #$00			cpx 	#0
.1217	d0 01		bne $121a			bne 	_CSANoBorrow
.1219	88		dey				dey
.121a					_CSANoBorrow:
.121a	ca		dex				dex
.121b	d0 e5		bne $1202			bne 	_CSAEraseString
.121d	c0 00		cpy #$00			cpy 	#0
.121f	d0 e1		bne $1202			bne 	_CSAEraseString
.1221	68		pla				pla
.1222	fa		plx				plx
.1223					_CSANoInit:
.1223	7a		ply				ply
.1224	60		rts				rts
.1225					CSAAllocate:
.1225	08		php				php 								; save type flag.
.1226	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1227	d0 01		bne $122a			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1229	e8		inx				inx
.122a					_CSAANoCarry:
.122a	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.122c	b0 2e		bcs $125c			bcs 	_CSARange
.122e	28		plp				plp 								; restore type flag
.122f	08		php				php 								; save it back again.
.1230	da		phx				phx 								; save size.
.1231	48		pha				pha
.1232	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.1234	90 03		bcc $1239			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1236	0a		asl a				asl 	a
.1237	26 25		rol $25				rol 	zTemp0+1
.1239					_CSAATimes2:
.1239	0a		asl a				asl 	a
.123a	26 25		rol $25				rol 	zTemp0+1
.123c	18		clc				clc
.123d	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.123f	90 02		bcc $1243			bcc 	_CSAANoCarry2
.1241	e6 25		inc $25				inc 	zTemp0+1
.1243					_CSAANoCarry2:
.1243	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.1245	20 0d 11	jsr $110d			jsr 	AllocateMemory 				; allocate memory to XA
.1248	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.124a	85 24		sta $24				sta 	zTemp0
.124c	68		pla				pla  								; write element count to first 2 bytes
.124d	92 24		sta ($24)			sta 	(zTemp0)
.124f	68		pla				pla 								; msb of element count
.1250	28		plp				plp 								; CC if pointer array
.1251	b0 02		bcs $1255			bcs 	_CSAAIsData
.1253	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1255					_CSAAIsData:
.1255	a0 01		ldy #$01			ldy 	#1
.1257	91 24		sta ($24),y			sta 	(zTemp0),y
.1259	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.125b	60		rts				rts
.125c					_CSARange:
.125c	4c 03 28	jmp $2803		jmp	ErrorV_range
.0505					CAType:
>0505							.fill 	1
.0506					CADim1:
>0506							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.125f					Command_Doke:
.125f	38		sec				sec
.1260	80 01		bra $1263			bra 	DPCommon
.1262					Command_Poke:
.1262	18		clc				clc
.1263					DPCommon:
.1263	08		php				php 								; CS if DOKE
.1264	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; address
.1267	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.1269	48		pha				pha
.126a	a5 09		lda $09				lda 	IFR0+IM1
.126c	48		pha				pha
.126d	20 d3 29	jsr $29d3			jsr 	ERRCheckComma 				; [dp]oke address,data
.1270	20 15 18	jsr $1815			jsr 	EXPEvalInteger16
.1273	68		pla				pla 								; get address back
.1274	85 25		sta $25				sta 	zTemp0+1
.1276	68		pla				pla
.1277	85 24		sta $24				sta 	zTemp0
.1279	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.127b	92 24		sta ($24)			sta 	(zTemp0)
.127d	28		plp				plp 								; done if CC
.127e	90 08		bcc $1288			bcc 	_DPExit
.1280	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.1281	a5 09		lda $09				lda 	IFR0+IM1
.1283	a0 01		ldy #$01			ldy 	#1
.1285	91 24		sta ($24),y			sta 	(zTemp0),y
.1287	7a		ply				ply
.1288					_DPExit:
.1288	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.1289					Command_GOTO:
.1289	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; get line number
.128c					GotoR0:
.128c	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.128f	85 19		sta $19				sta 	codePtr+1
.1291	64 18		stz $18				stz 	codePtr
.1293					_GOSearch:
.1293	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.1295	f0 1f		beq $12b6			beq 	_GOError
.1297	a0 01		ldy #$01			ldy 	#1 							; found line #
.1299	b1 18		lda ($18),y			lda 	(codePtr),y
.129b	c5 08		cmp $08				cmp 	IFR0+IM0
.129d	d0 0a		bne $12a9			bne 	_GONext
.129f	c8		iny				iny
.12a0	b1 18		lda ($18),y			lda 	(codePtr),y
.12a2	c5 09		cmp $09				cmp 	IFR0+IM1
.12a4	d0 03		bne $12a9			bne 	_GONext
.12a6	4c cf 15	jmp $15cf			jmp 	RUNNewLine
.12a9					_GONext:
.12a9	18		clc				clc 								; advance to next line.
.12aa	b2 18		lda ($18)			lda 	(codePtr)
.12ac	65 18		adc $18				adc 	codePtr
.12ae	85 18		sta $18				sta 	codePtr
.12b0	90 e1		bcc $1293			bcc 	_GOSearch
.12b2	e6 19		inc $19				inc 	codePtr+1
.12b4	80 dd		bra $1293			bra 	_GOSearch
.12b6					_GOError:
.12b6	4c 87 29	jmp $2987		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.12b9					Command_Input:
.12b9	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.12bb	8d 08 05	sta $0508			sta 	InputFlag
.12be	80 03		bra $12c3			bra 	Command_IP_Main
.12c0					Command_Print:
.12c0	9c 08 05	stz $0508			stz 	InputFlag
.12c3					Command_IP_Main:
.12c3	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.12c4					_CPLoop:
.12c4	08		php				php 								; save "last action" flag
.12c5	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.12c7	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.12c9	f0 48		beq $1313			beq 	_CPExit 					; without consuming
.12cb	c9 9b		cmp #$9b			cmp 	#PR_COLON
.12cd	f0 44		beq $1313			beq 	_CPExit
.12cf	68		pla				pla 								; throw last action flag
.12d0	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and consume
.12d2	c8		iny				iny
.12d3	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon (syntax seperator)
.12d5	f0 39		beq $1310			beq 	_CPContinueWithSameLine
.12d7	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma (tab)
.12d9	f0 30		beq $130b			beq 	_CPTab
.12db	88		dey				dey 								; undo the get.
.12dc	2c 08 05	bit $0508			bit 	InputFlag 					; check for Input
.12df	10 0b		bpl $12ec			bpl	 	_CPNotInput
.12e1	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.12e3	c9 40		cmp #$40			cmp 	#$40
.12e5	d0 05		bne $12ec			bne 	_CPNotInput
.12e7	20 1c 13	jsr $131c			jsr 	_CPInputCode 				; input code
.12ea	80 d7		bra $12c3			bra 	Command_IP_Main 			; and go round again.
.12ec					_CPNotInput:
.12ec	20 c3 17	jsr $17c3			jsr 	EXPEvaluateExpression 		; evaluate expression.
.12ef	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.12f1	10 0e		bpl $1301			bpl 	_CPNumber
.12f3	5a		phy				phy
.12f4	18		clc				clc 								; string address to YX
.12f5	a5 08		lda $08				lda 	IFR0+IM0
.12f7	aa		tax				tax
.12f8	a5 09		lda $09				lda 	IFR0+IM1
.12fa	a8		tay				tay
.12fb	20 50 13	jsr $1350			jsr 	CPPrintYX 					; print YX
.12fe	7a		ply				ply
.12ff	80 c2		bra $12c3			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1301					_CPNumber:
.1301	5a		phy				phy
.1302	20 65 32	jsr $3265			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1305	20 50 13	jsr $1350			jsr 	CPPrintYX 					; print string at YX
.1308	7a		ply				ply
.1309	80 b8		bra $12c3			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.130b					_CPTab:
.130b	a9 09		lda #$09			lda 	#9 							; print TAB
.130d	20 68 13	jsr $1368			jsr 	CPPrintA
.1310					_CPContinueWithSameLine:
.1310	38		sec				sec 								; loop round with carry set, which
.1311	80 b1		bra $12c4			bra 	_CPLoop 					; will inhibit final CR
.1313					_CPExit:
.1313	28		plp				plp 								; get last action flag
.1314	b0 05		bcs $131b			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1316	a9 0d		lda #$0d			lda 	#13 						; print new line
.1318	20 68 13	jsr $1368			jsr 	CPPrintA
.131b					_CPExit2:
.131b	60		rts				rts
.131c					_CPInputCode:
.131c	20 8b 18	jsr $188b			jsr 	EXPTermR0 					; get the term, the thing being input to
.131f	5a		phy				phy 								; save position
.1320	20 65 13	jsr $1365			jsr 	CPInputA					; input a line to YX
.1323	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1325	30 18		bmi $133f			bmi 	_CPInputString
.1327	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1329	48		pha				pha
.132a	a5 09		lda $09				lda 	IFR0+IM1
.132c	48		pha				pha
.132d	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.132f	84 25		sty $25				sty 	zTemp0+1
.1331	20 75 1b	jsr $1b75			jsr 	VALConversionZTemp0
.1334	68		pla				pla 								; do the assign.
.1335	85 25		sta $25				sta 	zTemp0+1
.1337	68		pla				pla
.1338	85 24		sta $24				sta 	zTemp0
.133a	20 90 13	jsr $1390			jsr 	AssignNumber
.133d	7a		ply				ply
.133e	60		rts				rts
.133f					_CPInputString:
.133f	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1341	85 24		sta $24				sta 	zTemp0
.1343	a5 09		lda $09				lda 	IFR0+IM1
.1345	85 25		sta $25				sta 	zTemp0+1
.1347	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1349	84 09		sty $09				sty 	IFR0+IM1
.134b	20 a7 13	jsr $13a7			jsr 	AssignString 				; assign the string
.134e	7a		ply				ply 								; exit
.134f	60		rts				rts
.1350					CPPrintYX:
.1350	86 24		stx $24				stx 	zTemp0
.1352	84 25		sty $25				sty 	zTemp0+1
.1354	b2 24		lda ($24)			lda 	(zTemp0)
.1356	aa		tax				tax
.1357	f0 0b		beq $1364			beq 	_CPPrintExit
.1359	a0 01		ldy #$01			ldy 	#1
.135b					_CPPrintAYXLoop:
.135b	b1 24		lda ($24),y			lda 	(zTemp0),y
.135d	20 68 13	jsr $1368			jsr 	CPPrintA
.1360	c8		iny				iny
.1361	ca		dex				dex
.1362	d0 f7		bne $135b			bne 	_CPPrintAYXLoop
.1364					_CPPrintExit:
.1364	60		rts				rts
.1365					CPInputA:
.1365	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.1368					CPPrintA:
.1368	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.0508					InputFlag:
>0508							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.136b					CommandLET:
.136b	20 8b 18	jsr $188b			jsr 	EXPTermR0 					; get term
.136e	90 6f		bcc $13df			bcc 	CLError 					; must be a reference term.
.1370	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.1372	48		pha				pha
.1373	a5 09		lda $09				lda 	IFR0+IM1
.1375	48		pha				pha
.1376	a5 0b		lda $0b				lda 	IFR0+IExp
.1378	48		pha				pha
.1379	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.137b	20 db 29	jsr $29db			jsr 	ERRCheckA
.137e	20 c3 17	jsr $17c3			jsr 	EXPEvaluateExpression 		; right hand side.
.1381	68		pla				pla 								; restore type of l-expr
.1382	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1384	30 5c		bmi $13e2			bmi 	CLType
.1386	fa		plx				plx 	 							; pop target address to zTemp0
.1387	86 25		stx $25				stx 	zTemp0+1
.1389	fa		plx				plx
.138a	86 24		stx $24				stx 	zTemp0
.138c					AssignData:
.138c	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.138e	30 17		bmi $13a7			bmi 	AssignString
.1390					AssignNumber:
.1390	5a		phy				phy
.1391	a0 03		ldy #$03			ldy 	#3
.1393	a5 0b		lda $0b				lda 	IFR0+IExp
.1395	91 24		sta ($24),y			sta 	(zTemp0),y
.1397	88		dey				dey
.1398	a5 0a		lda $0a				lda 	IFR0+IM2
.139a	91 24		sta ($24),y			sta 	(zTemp0),y
.139c	88		dey				dey
.139d	a5 09		lda $09				lda 	IFR0+IM1
.139f	91 24		sta ($24),y			sta 	(zTemp0),y
.13a1	a5 08		lda $08				lda 	IFR0+IM0
.13a3	92 24		sta ($24)			sta 	(zTemp0)
.13a5	7a		ply				ply
.13a6	60		rts				rts
.13a7					AssignString:
.13a7	5a		phy				phy
.13a8	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.13aa	b1 24		lda ($24),y			lda 	(zTemp0),y
.13ac	12 24		ora ($24)			ora 	(zTemp0)
.13ae	f0 23		beq $13d3			beq 	_CLConcreteString
.13b0	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.13b2	85 26		sta $26				sta 	zTemp1
.13b4	b1 24		lda ($24),y			lda 	(zTemp0),y
.13b6	85 27		sta $27				sta 	zTemp1+1
.13b8	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.13ba	38		sec				sec 								; we want 3 for slot size, status, string size.
.13bb	e9 03		sbc #$03			sbc 	#3
.13bd	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.13bf	90 12		bcc $13d3			bcc 	_CLConcreteString 			; if it won't fit concrete the string again.
.13c1	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte)
.13c3	1a		inc a				inc 	a
.13c4	aa		tax				tax
.13c5	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.13c7					_CLReplaceString:
.13c7	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.13c9	c8		iny				iny
.13ca	c8		iny				iny
.13cb	91 26		sta ($26),y			sta 	(zTemp1),y
.13cd	88		dey				dey
.13ce	ca		dex				dex
.13cf	d0 f6		bne $13c7			bne 	_CLReplaceString
.13d1	80 0a		bra $13dd			bra 	_CLExit
.13d3					_CLConcreteString:
.13d3	20 4d 2a	jsr $2a4d			jsr 	StringConcrete  			; concreted string in XA.
.13d6	a0 01		ldy #$01			ldy 	#1 							; store the address
.13d8	92 24		sta ($24)			sta 	(zTemp0)
.13da	8a		txa				txa
.13db	91 24		sta ($24),y			sta 	(zTemp0),y
.13dd					_CLExit:
.13dd	7a		ply				ply
.13de	60		rts				rts
.13df					CLError:
.13df	4c 25 29	jmp $2925		jmp	ErrorV_variable
.13e2					CLType:
.13e2	4c 22 28	jmp $2822		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.13e5					Command_LIST:
.13e5	9c 09 05	stz $0509			stz 	CLFrom 						; default from
.13e8	9c 0a 05	stz $050a			stz 	CLFrom+1
.13eb	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.13ed	c9 99		cmp #$99			cmp 	#PR_COMMA
.13ef	f0 1d		beq $140e			beq 	_CLToLine
.13f1	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.13f3	f0 37		beq $142c			beq 	_CLDefaultTo
.13f5	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.13f8	a5 08		lda $08				lda 	IFR0+IM0
.13fa	8d 09 05	sta $0509			sta 	CLFrom
.13fd	8d 0b 05	sta $050b			sta 	CLTo
.1400	a5 09		lda $09				lda 	IFR0+IM1
.1402	8d 0a 05	sta $050a			sta 	CLFrom+1
.1405	8d 0c 05	sta $050c			sta 	CLTo+1
.1408	b1 18		lda ($18),y			lda 	(codePtr),y
.140a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.140c	f0 26		beq $1434			beq 	_CLList
.140e					_CLToLine:
.140e	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1410	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1412	f0 18		beq $142c			beq 	_CLDefaultTo
.1414	20 d3 29	jsr $29d3			jsr 	ERRCheckComma 				; sep comma
.1417	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1419	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.141b	f0 0f		beq $142c			beq 	_CLDefaultTo
.141d	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; there's a To value.
.1420	a5 08		lda $08				lda 	IFR0+IM0
.1422	8d 0b 05	sta $050b			sta 	CLTo
.1425	a5 09		lda $09				lda 	IFR0+IM1
.1427	8d 0c 05	sta $050c			sta 	CLTo+1
.142a	80 08		bra $1434			bra 	_CLList
.142c					_CLDefaultTo:
.142c	a9 ff		lda #$ff			lda 	#$FF
.142e	8d 0b 05	sta $050b			sta 	CLTo
.1431	8d 0c 05	sta $050c			sta 	CLTo+1
.1434					_CLList:
.1434	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.1437	85 19		sta $19				sta 	codePtr+1
.1439	64 18		stz $18				stz 	codePtr
.143b	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.143d	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.143f	20 07 20	jsr $2007			jsr 	TOKSetDetokeniseOutput
.1442					_CLLoop:
.1442	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1444	f0 51		beq $1497			beq 	_CLExit
.1446	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1449	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.144c	d0 4c		bne $149a			bne 	_CLBreak
.144e	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1450	20 9d 14	jsr $149d			jsr 	_CLCompareLine
.1453	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1455	f0 33		beq $148a			beq 	_CLNext
.1457	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1459	20 9d 14	jsr $149d			jsr 	_CLCompareLine
.145c	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.145e	f0 2a		beq $148a			beq 	_CLNext
.1460	a0 02		ldy #$02			ldy 	#2 							; print line #
.1462	b1 18		lda ($18),y			lda 	(codePtr),y
.1464	aa		tax				tax
.1465	88		dey				dey
.1466	b1 18		lda ($18),y			lda 	(codePtr),y
.1468	20 22 2c	jsr $2c22			jsr 	WriteIntXA
.146b					_CLSpacing:
.146b	a9 20		lda #$20			lda 	#32
.146d	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1470	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.1473	e0 06		cpx #$06			cpx 	#6
.1475	d0 f4		bne $146b			bne 	_CLSpacing
.1477	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.1479	a5 18		lda $18				lda 	codePtr
.147b	18		clc				clc
.147c	69 03		adc #$03			adc 	#3
.147e	aa		tax				tax
.147f	90 01		bcc $1482			bcc 	_CLNoCarry2
.1481	c8		iny				iny
.1482					_CLNoCarry2:
.1482	20 ac 1f	jsr $1fac			jsr 	TOKDetokenise
.1485	a9 0d		lda #$0d			lda 	#13	 						; next line
.1487	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.148a					_CLNext:
.148a	18		clc				clc 								; advance to next line.
.148b	b2 18		lda ($18)			lda 	(codePtr)
.148d	65 18		adc $18				adc 	codePtr
.148f	85 18		sta $18				sta 	codePtr
.1491	90 02		bcc $1495			bcc 	_CLNoCarry
.1493	e6 19		inc $19				inc 	codePtr+1
.1495					_CLNoCarry:
.1495	80 ab		bra $1442			bra 	_CLLoop
.1497					_CLExit:
.1497	4c 41 2c	jmp $2c41			jmp 	WarmStart
.149a					_CLBreak:
.149a	4c 7d 29	jmp $297d		jmp	ErrorV_break
.149d					_CLCompareLine:
.149d	a0 01		ldy #$01			ldy 	#1
.149f	38		sec				sec
.14a0	b1 18		lda ($18),y			lda 	(codePtr),y
.14a2	fd 09 05	sbc $0509,x			sbc 	CLFrom,x
.14a5	85 24		sta $24				sta 	zTemp0
.14a7	c8		iny				iny
.14a8	b1 18		lda ($18),y			lda 	(codePtr),y
.14aa	fd 0a 05	sbc $050a,x			sbc 	CLFrom+1,x
.14ad	90 0a		bcc $14b9			bcc 	_CLIsNegative
.14af	d0 05		bne $14b6			bne 	_CLIsPositive
.14b1	a5 24		lda $24				lda 	zTemp0
.14b3	d0 01		bne $14b6			bne 	_CLIsPositive
.14b5	60		rts				rts
.14b6					_CLIsPositive:
.14b6	a9 01		lda #$01			lda 	#1
.14b8	60		rts				rts
.14b9					_CLIsNegative:
.14b9	a9 ff		lda #$ff			lda 	#255
.14bb	60		rts				rts
.0509					CLFrom:
>0509							.fill 	2
.050b					CLTo:
>050b							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.14bc					Command_NEW:
.14bc	20 b5 21	jsr $21b5			jsr 	PGMNewProgram 				; Reset current program
.14bf	20 f0 10	jsr $10f0			jsr 	ClearCode 					; Run CLR
.14c2	4c 28 16	jmp $1628			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.14c5					Command_READ:
.14c5	20 8b 18	jsr $188b			jsr 	EXPTermR0 					; get term to R0
.14c8	90 35		bcc $14ff			bcc 	_CRSyntax 					; fail if not a reference.
.14ca	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.14cc	48		pha				pha
.14cd	a5 09		lda $09				lda 	IFR0+IM1
.14cf	48		pha				pha
.14d0	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.14d2	48		pha				pha
.14d3	20 9c 15	jsr $159c			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.14d6	ad 11 05	lda $0511			lda 	dataInStatement 			; if in a data statement, we don't need to search
.14d9	d0 27		bne $1502			bne 	_CRHaveData  				; forward for the next one.
.14db					_CRNextLine:
.14db	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.14dd	f0 1a		beq $14f9			beq 	_CRNoData
.14df					_CRKeepSearching:
.14df	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.14e1	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.14e3	20 02 27	jsr $2702			jsr 	ScanForward
.14e6	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.14e8	f0 18		beq $1502			beq 	_CRHaveData 				; found it
.14ea	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.14ec	18		clc				clc 								; try the next line, keep going.
.14ed	b2 18		lda ($18)			lda 	(codePtr)
.14ef	65 18		adc $18				adc 	codePtr
.14f1	85 18		sta $18				sta 	codePtr
.14f3	90 e6		bcc $14db			bcc 	_CRNextLine
.14f5	e6 19		inc $19				inc 	codePtr+1
.14f7	80 e2		bra $14db			bra 	_CRNextLine
.14f9					_CRNoData:
.14f9	4c aa 28	jmp $28aa		jmp	ErrorV_data
.14fc					_CLType:
.14fc	4c 22 28	jmp $2822		jmp	ErrorV_type
.14ff					_CRSyntax:
.14ff	4c f2 27	jmp $27f2		jmp	ErrorV_syntax
.1502					_CRHaveData:
.1502	20 c3 17	jsr $17c3			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1505	68		pla				pla 								; type of l-expr
.1506	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1508	30 f2		bmi $14fc			bmi 	_CLType
.150a	68		pla				pla 								; restore address
.150b	85 25		sta $25				sta 	zTemp0+1
.150d	68		pla				pla
.150e	85 24		sta $24				sta 	zTemp0
.1510	20 8c 13	jsr $138c			jsr 	AssignData 					; write R0 there.
.1513	9c 11 05	stz $0511			stz 	dataInStatement 			; clear in data flag
.1516	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1518	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.151a	d0 04		bne $1520			bne 	_CRSwapBack
.151c	c8		iny				iny 								; consume comma
.151d	ee 11 05	inc $0511			inc 	dataInStatement 			; set in data statement flag.
.1520					_CRSwapBack:
.1520	20 9c 15	jsr $159c			jsr 	SwapCodeDataPointers		; swap them back.
.1523	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1525	c8		iny				iny
.1526	c9 99		cmp #$99			cmp 	#PR_COMMA
.1528	f0 9b		beq $14c5			beq 	Command_READ 				; if so go round again.
.152a	88		dey				dey 								; unpick get.
.152b	60		rts				rts
.152c					Command_DATA:
.152c	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.152e	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1530	20 02 27	jsr $2702			jsr 	ScanForward
.1533	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1535	d0 01		bne $1538			bne 	_CDNotEOL
.1537	88		dey				dey
.1538					_CDNotEOL:
.1538	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1539					Command_REM:
.1539					Command_REM2:
.1539	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.153b	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.153d	d0 06		bne $1545			bne 	_CRExit
.153f	c8		iny				iny 								; skip over it, it's a comment.
.1540	98		tya				tya
.1541	38		sec				sec
.1542	71 18		adc ($18),y			adc 	(codePtr),y
.1544	a8		tay				tay
.1545					_CRExit:
.1545	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.1546					Command_RENUMBER:
.1546	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.1548	85 08		sta $08				sta 	IM0+IFR0
.154a	a9 03		lda #$03			lda 	#1000 >> 8
.154c	85 09		sta $09				sta 	IM1+IFR0
.154e	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1550	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1552	f0 07		beq $155b			beq 	_CRIsDefault
.1554	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1556	f0 03		beq $155b			beq 	_CRIsDefault
.1558	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; get other start
.155b					_CRIsDefault:
.155b	5a		phy				phy
.155c	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.155e	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.1561	85 25		sta $25				sta 	zTemp0+1
.1563					_CRRenumberLoop:
.1563	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.1565	f0 21		beq $1588			beq 	_CRExit
.1567	18		clc				clc
.1568	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.156a	a5 08		lda $08				lda 	IFR0+IM0
.156c	91 24		sta ($24),y			sta 	(zTemp0),y
.156e	69 0a		adc #$0a			adc 	#10
.1570	85 08		sta $08				sta 	IFR0+IM0
.1572	c8		iny				iny
.1573	a5 09		lda $09				lda 	IFR0+IM1
.1575	91 24		sta ($24),y			sta 	(zTemp0),y
.1577	69 00		adc #$00			adc 	#0
.1579	85 09		sta $09				sta 	IFR0+IM1
.157b	18		clc				clc 								; next line.
.157c	b2 24		lda ($24)			lda 	(zTemp0)
.157e	65 24		adc $24				adc 	zTemp0
.1580	85 24		sta $24				sta 	zTemp0
.1582	90 df		bcc $1563			bcc 	_CRRenumberLoop
.1584	e6 25		inc $25				inc 	zTemp0+1
.1586	80 db		bra $1563			bra 	_CRRenumberLoop
.1588					_CRExit:
.1588	7a		ply				ply
.1589	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.158a					S
.158a					Command_RESTORE:
.158a	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.158d	8d 0e 05	sta $050e			sta 	dataPtr+1
.1590	9c 0d 05	stz $050d			stz 	dataPtr
.1593	a9 03		lda #$03			lda 	#3 							; position start of line
.1595	8d 0f 05	sta $050f			sta 	dataPos
.1598	9c 11 05	stz $0511			stz 	dataInStatement 			; not in statement
.159b	60		rts				rts
.159c					SwapCodeDataPointers:
.159c	ad 0d 05	lda $050d			lda 	dataPtr 					; swap LSB of code/data
.159f	a6 18		ldx $18				ldx 	codePtr
.15a1	85 18		sta $18				sta 	codePtr
.15a3	8e 0d 05	stx $050d			stx 	dataPtr
.15a6	ad 0e 05	lda $050e			lda 	dataPtr+1 					; swap MSB of code/data
.15a9	a6 19		ldx $19				ldx 	codePtr+1
.15ab	85 19		sta $19				sta 	codePtr+1
.15ad	8e 0e 05	stx $050e			stx 	dataPtr+1
.15b0	ad 0f 05	lda $050f			lda 	dataPos 					; swap dataPos and Y
.15b3	8c 0f 05	sty $050f			sty 	dataPos
.15b6	a8		tay				tay
.15b7	60		rts				rts
.050d					dataPtr:
>050d							.fill 	2
.050f					dataPos:
>050f							.fill 	2
.0511					dataInStatement:
>0511							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.15b8					Command_RUN:
.15b8	20 f0 10	jsr $10f0			jsr 	ClearCode					; clear everything out.
.15bb	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.15be	85 19		sta $19				sta 	codePtr+1
.15c0	64 18		stz $18				stz 	codePtr
.15c2	80 0b		bra $15cf			bra 	RUNNewLine
.15c4					RUNEndOfLine:
.15c4	18		clc				clc 								; advance to next line.
.15c5	b2 18		lda ($18)			lda 	(codePtr)
.15c7	65 18		adc $18				adc 	codePtr
.15c9	85 18		sta $18				sta 	codePtr
.15cb	90 02		bcc $15cf			bcc 	_RELNoCarry
.15cd	e6 19		inc $19				inc 	codePtr+1
.15cf					_RELNoCarry:
.15cf					RUNNewLine:
.15cf	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.15d1	9a		txs				txs
.15d2	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.15d4	f0 52		beq $1628			beq 	Command_END
.15d6	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.15d8	b1 18		lda ($18),y			lda 	(codePtr),y
.15da	8d 2e 06	sta $062e			sta 	ERRLine
.15dd	c8		iny				iny
.15de	b1 18		lda ($18),y			lda 	(codePtr),y
.15e0	8d 2f 06	sta $062f			sta 	ERRLine+1
.15e3	c8		iny				iny 								; offset into codePtr for start of line.
.15e4					RUNNewCommand:
.15e4	9c 23 06	stz $0623			stz 	stringInitialised 			; reset string system flag.
.15e7	ce 12 05	dec $0512			dec 	checkCounter				; don't do these checks ever command
.15ea	d0 0a		bne $15f6			bne 	_RNCNoCheck
.15ec	5a		phy				phy 								; keyboard check.
.15ed	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.15f0	7a		ply				ply
.15f1	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.15f4	d0 1e		bne $1614			bne 	_RUNBreak
.15f6					_RNCNoCheck:
.15f6	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.15f8	10 1d		bpl $1617			bpl		_RUNNotToken 				; probably an identifier
.15fa	c8		iny				iny 								; consume token
.15fb	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.15fd	f0 e5		beq $15e4			beq 	RUNNewCommand
.15ff	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1601	b0 0e		bcs $1611			bcs 	_RUNSyntax
.1603	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1605	90 0a		bcc $1611			bcc 	_RUNSyntax
.1607	0a		asl a				asl 	a 							; double into X.
.1608	aa		tax				tax
.1609	20 0e 16	jsr $160e			jsr 	_RUNDispatchMain			; call the main dispatcher
.160c	80 d6		bra $15e4			bra 	RUNNewCommand
.160e					_RUNDispatchMain:
.160e	7c 8a 1e	jmp ($1e8a,x)			jmp 	(VectorTable,x)
.1611					_RUNSyntax:
.1611	4c f2 27	jmp $27f2		jmp	ErrorV_syntax
.1614					_RUNBreak:
.1614	4c 7d 29	jmp $297d		jmp	ErrorV_break
.1617					_RUNNotToken:
.1617	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error (numbers)
.1619	90 f6		bcc $1611			bcc 	_RUNSyntax
.161b	20 6b 13	jsr $136b			jsr 	CommandLET 					; assignment
.161e	80 c4		bra $15e4			bra 	RUNNewCommand 				; loop round.
.1620					Command_Shift_Handler:
.1620	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.1622	c8		iny				iny
.1623	0a		asl a				asl 	a 							; double into X
.1624	aa		tax				tax
.1625	7c 8a 1f	jmp ($1f8a,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1628					Command_END:
.1628	4c 41 2c	jmp $2c41			jmp 	WarmStart
.0512					checkCounter:
>0512							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.162b					Command_STOP:
.162b	4c 96 28	jmp $2896		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.162e					Command_Sys:
.162e	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; execution address
.1631	5a		phy				phy
.1632	ad 76 06	lda $0676			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1635	ae d2 06	ldx $06d2			ldx 	('X'-'A')*4 + FastVariables
.1638	ac d6 06	ldy $06d6			ldy 	('Y'-'A')*4 + FastVariables
.163b	20 40 16	jsr $1640			jsr 	_CSCallIFR0 				; call the code
.163e	7a		ply				ply
.163f	60		rts				rts
.1640					_CSCallIFR0:
.1640	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1643					NoExec01:
.1643					NoExec02:
.1643					NoExec03:
.1643					NoExec04:
.1643					NoExec05:
.1643					NoExec06:
.1643					NoExec07:
.1643					NoExec08:
.1643	4c f2 27	jmp $27f2		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1646					EXPBinAdd:
.1646	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1648	30 6f		bmi $16b9			bmi 	EXPConcatenate
.164a	a2 0c		ldx #$0c			ldx 	#IFR1
.164c	4c 60 2e	jmp $2e60			jmp 	IFloatAdd
.164f					EXPBinSub:
.164f	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1651	30 3f		bmi $1692			bmi 	EXPTypeError
.1653	a2 0c		ldx #$0c			ldx 	#IFR1
.1655	4c 59 2e	jmp $2e59			jmp 	IFloatSubtract
.1658					EXPBinMul:
.1658	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.165a	30 36		bmi $1692			bmi 	EXPTypeError
.165c	a2 0c		ldx #$0c			ldx 	#IFR1
.165e	4c 0a 2f	jmp $2f0a			jmp 	IFloatMultiply
.1661					EXPBinFDiv:
.1661	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1663	30 2d		bmi $1692			bmi 	EXPTypeError
.1665	a2 0c		ldx #$0c			ldx 	#IFR1
.1667	20 8c 31	jsr $318c			jsr 	IFloatDivideFloat
.166a	b0 0f		bcs $167b			bcs 	EXPDZero
.166c	60		rts				rts
.166d					EXPBinIDiv:
.166d	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.166f	30 21		bmi $1692			bmi 	EXPTypeError
.1671	a2 0c		ldx #$0c			ldx 	#IFR1
.1673	20 8c 31	jsr $318c			jsr 	IFloatDivideFloat
.1676	b0 03		bcs $167b			bcs 	EXPDZero
.1678	4c 69 31	jmp $3169			jmp 	IFloatIntegerR0
.167b					EXPDZero:
.167b	4c 6b 28	jmp $286b		jmp	ErrorV_divzero
.167e					EXPBinIMod:
.167e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1680	30 10		bmi $1692			bmi 	EXPTypeError
.1682	a2 0c		ldx #$0c			ldx 	#IFR1
.1684	5a		phy				phy
.1685	20 9f 30	jsr $309f			jsr 	IFPreProcessBitwise 		; set up everything.
.1688	d0 05		bne $168f			bne 	EXPDRange
.168a	20 d8 2f	jsr $2fd8			jsr 	IFloatModulusInteger
.168d	7a		ply				ply
.168e	60		rts				rts
.168f					EXPDRange:
.168f	4c 03 28	jmp $2803		jmp	ErrorV_range
.1692					EXPTypeError:
.1692	4c 22 28	jmp $2822		jmp	ErrorV_type
.1695					EXPBinAnd:
.1695	24 0b		bit $0b				bit 	IFR0+IExp
.1697	30 f9		bmi $1692			bmi 	EXPTypeError
.1699	a2 0c		ldx #$0c			ldx 	#IFR1
.169b	20 5a 30	jsr $305a			jsr 	IFloatBitwiseAnd
.169e	b0 ef		bcs $168f			bcs 	EXPDRange
.16a0	60		rts				rts
.16a1					EXPBinOr:
.16a1	24 0b		bit $0b				bit 	IFR0+IExp
.16a3	30 ed		bmi $1692			bmi 	EXPTypeError
.16a5	a2 0c		ldx #$0c			ldx 	#IFR1
.16a7	20 71 30	jsr $3071			jsr 	IFloatBitwiseOr
.16aa	b0 e3		bcs $168f			bcs 	EXPDRange
.16ac	60		rts				rts
.16ad					EXPBinXor:
.16ad	24 0b		bit $0b				bit 	IFR0+IExp
.16af	30 e1		bmi $1692			bmi 	EXPTypeError
.16b1	a2 0c		ldx #$0c			ldx 	#IFR1
.16b3	20 88 30	jsr $3088			jsr 	IFloatBitwiseXor
.16b6	b0 d7		bcs $168f			bcs 	EXPDRange
.16b8	60		rts				rts
.16b9					EXPConcatenate:
.16b9	18		clc				clc
.16ba	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.16bc	72 0c		adc ($0c)			adc 	(IFR1)
.16be	b0 2d		bcs $16ed			bcs 	_EXPCError 					; far too long.
.16c0	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.16c2	da		phx				phx
.16c3	a6 09		ldx $09				ldx 	IFR0+1
.16c5	da		phx				phx
.16c6	20 c0 2a	jsr $2ac0			jsr 	StringTempAllocate 			; allocate string, set up return
.16c9	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.16cb	a5 0c		lda $0c				lda 	IFR1
.16cd	20 d6 16	jsr $16d6			jsr 	_EXPCCopyXA
.16d0	fa		plx				plx 								; copy second string
.16d1	68		pla				pla
.16d2	20 d6 16	jsr $16d6			jsr 	_EXPCCopyXA
.16d5	60		rts				rts
.16d6					_EXPCCopyXA:
.16d6	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.16d8	85 24		sta $24				sta 	zTemp0
.16da	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.16dc	f0 0e		beq $16ec			beq 	_EXPCCExit 					; nothing in string
.16de	aa		tax				tax 								; count
.16df	5a		phy				phy 								; start position
.16e0	a0 01		ldy #$01			ldy 	#1
.16e2					_EXPCCLoop:
.16e2	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.16e4	20 f5 2a	jsr $2af5			jsr 	StringTempWrite
.16e7	c8		iny				iny
.16e8	ca		dex				dex
.16e9	d0 f7		bne $16e2			bne 	_EXPCCLoop
.16eb	7a		ply				ply
.16ec					_EXPCCExit:
.16ec	60		rts				rts
.16ed					_EXPCError:
.16ed	4c 0f 29	jmp $290f		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.16f0					EXPReturnTrue:
.16f0	a2 08		ldx #$08			ldx 	#IFR0
.16f2	a9 01		lda #$01			lda 	#1
.16f4	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.16f7	20 73 34	jsr $3473			jsr 	IFloatNegate
.16fa	60		rts				rts
.16fb					EXPReturnFalse:
.16fb	a2 08		ldx #$08			ldx 	#IFR0
.16fd	4c 68 34	jmp $3468			jmp 	IFloatSetZero
.1700					EXPCompareEqual:
.1700	20 36 17	jsr $1736			jsr 	EXPCompareBaseCode
.1703	c9 00		cmp #$00			cmp 	#0
.1705	f0 e9		beq $16f0			beq 	EXPReturnTrue
.1707	80 f2		bra $16fb			bra 	EXPReturnFalse
.1709					EXPCompareLess:
.1709	20 36 17	jsr $1736			jsr 	EXPCompareBaseCode
.170c	c9 ff		cmp #$ff			cmp 	#$FF
.170e	f0 e0		beq $16f0			beq 	EXPReturnTrue
.1710	80 e9		bra $16fb			bra 	EXPReturnFalse
.1712					EXPCompareGreater:
.1712	20 36 17	jsr $1736			jsr 	EXPCompareBaseCode
.1715	c9 01		cmp #$01			cmp 	#1
.1717	f0 d7		beq $16f0			beq 	EXPReturnTrue
.1719	80 e0		bra $16fb			bra 	EXPReturnFalse
.171b					EXPCompareNotEqual:
.171b	20 36 17	jsr $1736			jsr 	EXPCompareBaseCode
.171e	c9 00		cmp #$00			cmp 	#0
.1720	d0 ce		bne $16f0			bne 	EXPReturnTrue
.1722	80 d7		bra $16fb			bra 	EXPReturnFalse
.1724					EXPCompareLessEqual:
.1724	20 36 17	jsr $1736			jsr 	EXPCompareBaseCode
.1727	c9 01		cmp #$01			cmp 	#1
.1729	d0 c5		bne $16f0			bne 	EXPReturnTrue
.172b	80 ce		bra $16fb			bra 	EXPReturnFalse
.172d					EXPCompareGreaterEqual:
.172d	20 36 17	jsr $1736			jsr 	EXPCompareBaseCode
.1730	c9 ff		cmp #$ff			cmp 	#$FF
.1732	d0 bc		bne $16f0			bne 	EXPReturnTrue
.1734	80 c5		bra $16fb			bra 	EXPReturnFalse
.1736					EXPCompareBaseCode:
.1736	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1738	30 10		bmi $174a			bmi 	_EXCBCString
.173a	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.173c	20 37 31	jsr $3137			jsr 	IFloatCompare
.173f	a5 08		lda $08				lda 	IFR0+IM0
.1741	f0 06		beq $1749			beq 	_EXCBCExit 					; return 0 if zero
.1743	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1745	50 02		bvc $1749			bvc 	_EXCBCExit
.1747	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1749					_EXCBCExit:
.1749	60		rts				rts
.174a					_EXCBCString:
.174a	5a		phy				phy
.174b	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.174d	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.174f	90 02		bcc $1753			bcc 	_EXCBCSmaller
.1751	b2 0c		lda ($0c)			lda 	(IFR1)
.1753					_EXCBCSmaller:
.1753	aa		tax				tax
.1754	f0 0d		beq $1763			beq 	_EXCBCMatches 				; if zero common length matches
.1756	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1758					_EXCBCCheckSmallerMatches:
.1758	c8		iny				iny 								; compare directly as far as common length
.1759	38		sec				sec
.175a	b1 0c		lda ($0c),y			lda 	(IFR1),y
.175c	f1 08		sbc ($08),y			sbc 	(IFR0),y
.175e	d0 08		bne $1768			bne 	_EXCBCExit2
.1760	ca		dex				dex
.1761	d0 f5		bne $1758			bne 	_EXCBCCheckSmallerMatches
.1763					_EXCBCMatches:
.1763	38		sec				sec
.1764	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1766	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1768					_EXCBCExit2:
.1768	7a		ply				ply
.1769	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.176b	f0 04		beq $1771			beq 	_EXCBCReturn
.176d	30 03		bmi $1772			bmi 	_EXCBCFF 					; return $FF if <
.176f	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1771					_EXCBCReturn:
.1771	60		rts				rts
.1772					_EXCBCFF:
.1772	a9 ff		lda #$ff			lda 	#$FF
.1774	60		rts				rts
.1775					_EXCBCRange:
.1775	4c 03 28	jmp $2803		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1778					EXPBinLeft:
.1778	a9 ff		lda #$ff			lda 	#$FF
.177a	8d 13 05	sta $0513			sta 	EXPShiftLeftFlag
.177d	4c 83 17	jmp $1783			jmp 	EXPShiftCommon
.1780					EXPBinRight:
.1780	9c 13 05	stz $0513			stz 	EXPShiftLeftFlag
.1783					EXPShiftCommon:
.1783	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1785	05 0f		ora $0f				ora 	IFR1+IExp
.1787	29 7f		and #$7f			and 	#$7F
.1789	d0 35		bne $17c0			bne 	_EXPSRange
.178b	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.178d	29 e0		and #$e0			and 	#$E0
.178f	05 09		ora $09				ora 	IFR0+IM1
.1791	05 0a		ora $0a				ora 	IFR0+IM2
.1793	d0 25		bne $17ba			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.1795	5a		phy				phy
.1796	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.1798	29 1f		and #$1f			and 	#$1F
.179a	f0 17		beq $17b3			beq 	_EXPSExit 					; exit if zero
.179c	a8		tay				tay
.179d					_EXPSLoop:
.179d	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.179f	2c 13 05	bit $0513			bit 	EXPShiftLeftFlag
.17a2	30 05		bmi $17a9			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.17a4	20 97 34	jsr $3497			jsr 	IFloatShiftRight
.17a7	80 07		bra $17b0			bra 	_EXPSContinue
.17a9					_EXPSShiftLeft:
.17a9	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.17ac	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.17ae	30 10		bmi $17c0			bmi 	_EXPSRange
.17b0					_EXPSContinue:
.17b0	88		dey				dey 								; do it Y times
.17b1	d0 ea		bne $179d			bne 	_EXPSLoop
.17b3					_EXPSExit:
.17b3	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.17b5	20 f9 33	jsr $33f9			jsr 	IFloatCopyFromRegister
.17b8	7a		ply				ply
.17b9	60		rts				rts
.17ba					_EXPSShiftZero:
.17ba	a2 08		ldx #$08			ldx 	#IFR0
.17bc	20 68 34	jsr $3468			jsr 	IFloatSetZero
.17bf	60		rts				rts
.17c0					_EXPSRange:
.17c0	4c 03 28	jmp $2803		jmp	ErrorV_range
.0513					EXPShiftLeftFlag:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.17c3					EXPEvaluateExpression:
.17c3	a9 00		lda #$00			lda 	#0 							; current precedence
.17c5					EXPEvaluateExpressionPrecedenceA:
.17c5	48		pha				pha
.17c6	20 40 18	jsr $1840			jsr 	EXPTermValueR0				; do first term.
.17c9					_EELoop:
.17c9	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.17cb	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.17cd	90 31		bcc $1800			bcc 	_EEExit
.17cf	aa		tax				tax 								; access the precedence of the operator.
.17d0	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.17d1	dd 9e 1b	cmp $1b9e,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.17d4	b0 2b		bcs $1801			bcs 	_EEExit2
.17d6	48		pha				pha 								; save current precedence.
.17d7	da		phx				phx 								; save operator
.17d8	c8		iny				iny 								; consume operator
.17d9	da		phx				phx
.17da	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.17dc	20 b7 33	jsr $33b7			jsr 	IFloatPushRx
.17df	fa		plx				plx
.17e0	bd 9e 1b	lda $1b9e,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.17e3	20 c5 17	jsr $17c5			jsr 	EXPEvaluateExpressionPrecedenceA
.17e6	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.17e8	20 d8 33	jsr $33d8			jsr 	IFloatPullRx
.17eb	fa		plx				plx 								; operator
.17ec	a5 0b		lda $0b				lda 	IFR0+IExp 					; check if types match.
.17ee	45 0f		eor $0f				eor 	IFR1+IExp
.17f0	30 08		bmi $17fa			bmi 	_EEType		 				; MSBs differ, error.
.17f2					_EETypeOkay:
.17f2	8a		txa				txa
.17f3	0a		asl a				asl 	a 							; double -> X
.17f4	aa		tax				tax
.17f5	20 fd 17	jsr $17fd			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.17f8	80 cf		bra $17c9			bra 	_EELoop
.17fa					_EEType:
.17fa	4c 22 28	jmp $2822		jmp	ErrorV_type
.17fd					_EECallBinary:
.17fd	7c 8a 1e	jmp ($1e8a,x)			jmp 	(VectorTable,x)
.1800					_EEExit:
.1800	68		pla				pla 								; throw precedence
.1801					_EEExit2:
.1801	18		clc				clc
.1802	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1803					EXPEvalNumber:
.1803	20 c3 17	jsr $17c3			jsr 	EXPEvaluateExpression 		; get a value
.1806	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1808	30 01		bmi $180b			bmi 	EVUType
.180a	60		rts				rts
.180b					EVUType:
.180b	4c 22 28	jmp $2822		jmp	ErrorV_type
.180e					EXPEvalInteger:
.180e	20 03 18	jsr $1803			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1811	20 69 31	jsr $3169			jsr 	IFloatIntegerR0
.1814	60		rts				rts
.1815					EXPEvalInteger16:
.1815	20 0e 18	jsr $180e			jsr 	EXPEvalInteger 				; get integer
.1818	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.181a	d0 21		bne $183d			bne 	EVURange
.181c	a6 09		ldx $09				ldx 	IFR0+IM1
.181e	a5 08		lda $08				lda 	IFR0+IM0
.1820	60		rts				rts
.1821					EXPEvalInteger8:
.1821	20 0e 18	jsr $180e			jsr 	EXPEvalInteger 				; get integer
.1824	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1826	05 09		ora $09				ora 	IFR0+IM1
.1828	d0 13		bne $183d			bne 	EVURange
.182a	a5 08		lda $08				lda 	IFR0+IM0
.182c	60		rts				rts
.182d					EXPEvalString:
.182d	20 c3 17	jsr $17c3			jsr 	EXPEvaluateExpression 		; get value
.1830	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1832	10 d7		bpl $180b			bpl 	EVUType
.1834	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1836	86 25		stx $25				stx 	zTemp0+1
.1838	a5 08		lda $08				lda 	IFR0+IM0
.183a	85 24		sta $24				sta 	zTemp0
.183c	60		rts				rts
.183d					EVURange:
.183d	4c 03 28	jmp $2803		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1840					EXPTermValueR0:
.1840	20 8b 18	jsr $188b			jsr 	EXPTermR0 					; get term
.1843	90 45		bcc $188a			bcc 	_ETVNotReference 			; exit if value.
.1845	5a		phy				phy
.1846	a0 03		ldy #$03			ldy 	#3 							; get type
.1848	b1 08		lda ($08),y			lda 	(IFR0),y
.184a	30 14		bmi $1860			bmi 	_ETVDereferenceString
.184c	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.184e	88		dey				dey 								; get byte 2
.184f	b1 08		lda ($08),y			lda 	(IFR0),y
.1851	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1853	88		dey				dey 								; get byte 1
.1854	b1 08		lda ($08),y			lda 	(IFR0),y
.1856	aa		tax				tax 								; save in X so we can overwrite it
.1857	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1859	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.185b	85 08		sta $08				sta 	IFR0+IM0
.185d	7a		ply				ply
.185e	18		clc				clc
.185f	60		rts				rts
.1860					_ETVDereferenceString:
.1860	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1862	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1864	12 08		ora ($08)			ora 	(IFR0)
.1866	f0 11		beq $1879			beq 	_ETVNull 					; if so, return a fake NULL.
.1868	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.186a	aa		tax				tax
.186b	b2 08		lda ($08)			lda 	(IFR0)
.186d	18		clc				clc 								; add two so points to actual string.
.186e	69 02		adc #$02			adc 	#2
.1870	90 01		bcc $1873			bcc 	_EVDSNoCarry
.1872	e8		inx				inx
.1873					_EVDSNoCarry:
.1873	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1875	85 08		sta $08				sta 	IFR0
.1877	80 08		bra $1881			bra 	_ETVFillExit 				; tidy up and exit.
.1879					_ETVNull:
.1879	a9 89		lda #$89			lda 	#_EVTNString & $FF
.187b	85 08		sta $08				sta 	IFR0+IM0
.187d	a9 18		lda #$18			lda 	#_EVTNString >> 8
.187f	85 09		sta $09				sta 	IFR0+IM1
.1881					_ETVFillExit:
.1881	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1883	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1885	85 0b		sta $0b				sta 	IFR0+IExp
.1887	7a		ply				ply
.1888	60		rts				rts
.1889					_EVTNString:
>1889	00						.byte 	0
.188a					_ETVNotReference:
.188a	60		rts				rts
.188b					EXPTermR0:
.188b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.188d	30 10		bmi $189f			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.188f	c8		iny				iny 								; consume element
.1890	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1892	b0 08		bcs $189c			bcs 	_ETMIdentifier
.1894	20 ca 18	jsr $18ca			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1897	20 fd 18	jsr $18fd			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.189a	18		clc				clc 								; return value ok
.189b	60		rts				rts
.189c					_ETMIdentifier:
.189c	4c 01 2e	jmp $2e01			jmp 	VARCheckSimple 				; check variables, seperate module.
.189f					_ETMIsUnaryOrMinus:
.189f	c8		iny				iny 								; consume element
.18a0	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.18a2	d0 0e		bne $18b2			bne 	_ETMCheckUnary
.18a4	20 40 18	jsr $1840			jsr 	EXPTermValueR0 				; get a term to negate
.18a7	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.18a9	20 73 34	jsr $3473			jsr 	IFloatNegate
.18ac	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.18ae	30 17		bmi $18c7			bmi 	_ETMUnaryType				; if so error.
.18b0	18		clc				clc
.18b1	60		rts				rts
.18b2					_ETMCheckUnary:
.18b2	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.18b4	90 0e		bcc $18c4			bcc 	_ETMUnarySyntax
.18b6	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.18b8	b0 0a		bcs $18c4			bcs 	_ETMUnarySyntax
.18ba	0a		asl a				asl 	a 							; make it into an index => X
.18bb	aa		tax				tax
.18bc	20 c1 18	jsr $18c1			jsr 	_ETMCallUnaryFunction 		; call the function
.18bf	18		clc				clc 								; and return it.
.18c0	60		rts				rts
.18c1					_ETMCallUnaryFunction:
.18c1	7c 8a 1e	jmp ($1e8a,x)			jmp 	(VectorTable,x)
.18c4					_ETMUnarySyntax:
.18c4	4c f2 27	jmp $27f2		jmp	ErrorV_syntax
.18c7					_ETMUnaryType:
.18c7	4c 22 28	jmp $2822		jmp	ErrorV_type
.18ca					EXPExtractTokenisedInteger:
.18ca	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.18cc	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.18ce	64 09		stz $09				stz 	IFR0+IM1
.18d0	64 0a		stz $0a				stz 	IFR0+IM2
.18d2					_ETMConstant:
.18d2	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.18d4	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.18d6	b0 24		bcs $18fc			bcs 	_ETMCExit 					; no, exit.
.18d8	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.18da	a5 09		lda $09				lda 	IFR0+IM1
.18dc	85 0a		sta $0a				sta 	IFR0+IM2
.18de	a5 08		lda $08				lda 	IFR0+IM0
.18e0	85 09		sta $09				sta 	IFR0+IM1
.18e2	64 08		stz $08				stz 	IFR0+IM0
.18e4	8a		txa				txa
.18e5	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.18e6	66 0a		ror $0a				ror 	IFR0+IM2
.18e8	66 09		ror $09				ror 	IFR0+IM1
.18ea	66 08		ror $08				ror 	IFR0+IM0
.18ec	4a		lsr a				lsr 	a
.18ed	66 0a		ror $0a				ror 	IFR0+IM2
.18ef	66 09		ror $09				ror 	IFR0+IM1
.18f1	66 08		ror $08				ror 	IFR0+IM0
.18f3	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.18f5	11 18		ora ($18),y			ora 	(codePtr),y
.18f7	85 08		sta $08				sta 	IFR0+IM0
.18f9	c8		iny				iny 								; consume, loop back
.18fa	80 d6		bra $18d2			bra 	_ETMConstant
.18fc					_ETMCExit:
.18fc	60		rts				rts
.18fd					EXPCheckDecimalFollows:
.18fd	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.18ff	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1901	d0 19		bne $191c			bne 	_ETMCDExit
.1903	c8		iny				iny 								; consume token.
.1904	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1906	5a		phy				phy									; save current position
.1907	48		pha				pha 								; save count of chars.
.1908	38		sec				sec 								; address into YX : y + codePtr+1
.1909	98		tya				tya
.190a	65 18		adc $18				adc 	codePtr
.190c	aa		tax				tax
.190d	a5 19		lda $19				lda 	codePtr+1
.190f	69 00		adc #$00			adc 	#0
.1911	a8		tay				tay
.1912	68		pla				pla 								; get count.
.1913	20 0c 33	jsr $330c			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1916	7a		ply				ply 								; go to next token.
.1917	98		tya				tya
.1918	38		sec				sec
.1919	71 18		adc ($18),y			adc 	(codePtr),y
.191b	a8		tay				tay
.191c					_ETMCDExit:
.191c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.191d					EXPUnaryAbs:
.191d	20 03 18	jsr $1803			jsr 	EXPEvalNumber 					; number to R0
.1920	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.1923	20 ab 30	jsr $30ab			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1926	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.1927					EXPUnaryNull:
.1927	20 40 18	jsr $1840			jsr 	EXPTermValueR0
.192a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.192b					EXPUnaryAsc:
.192b	20 2d 18	jsr $182d			jsr 	EXPEvalString 					; string to R0, zTemp0
.192e	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.1931	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.1933	f0 06		beq $193b			beq 	_EXAZero 						; if so return 0
.1935	5a		phy				phy 									; otherwise get first character
.1936	a0 01		ldy #$01			ldy 	#1
.1938	b1 24		lda ($24),y			lda 	(zTemp0),y
.193a	7a		ply				ply
.193b					_EXAZero:
.193b	a2 08		ldx #$08			ldx 	#IFR0
.193d	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.1940	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1941					EXPUnaryChr:
.1941	20 21 18	jsr $1821			jsr 	EXPEvalInteger8 				; expr
.1944	48		pha				pha 									; push on stack
.1945	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.1948	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.194a	20 c0 2a	jsr $2ac0			jsr 	StringTempAllocate
.194d	68		pla				pla 									; get value back
.194e	20 f5 2a	jsr $2af5			jsr 	StringTempWrite 				; write to string.
.1951	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1952					EXPUnaryDec:
.1952	20 2d 18	jsr $182d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1955	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.1958	5a		phy				phy 									; save position.
.1959	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.195b	20 68 34	jsr $3468			jsr 	IFloatSetZero
.195e	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.1960	f0 3b		beq $199d			beq 	_EUDError 						; empty string is not legit.
.1962	aa		tax				tax 									; count in X.
.1963	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1965					_EUDLoop:
.1965	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.1967	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1969	90 02		bcc $196d			bcc 	_EUDNoCase
.196b	e9 20		sbc #$20			sbc 	#$20
.196d					_EUDNoCase:
.196d	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.196f	90 2c		bcc $199d			bcc 	_EUDError
.1971	c9 3a		cmp #$3a			cmp 	#'9'+1
.1973	90 0a		bcc $197f			bcc 	_EUDOkay
.1975	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1977	90 24		bcc $199d			bcc 	_EUDError
.1979	c9 47		cmp #$47			cmp 	#'F'+1
.197b	b0 20		bcs $199d			bcs 	_EUDError
.197d	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.197f					_EUDOkay:
.197f	29 0f		and #$0f			and 	#15 							; make constant
.1981	da		phx				phx
.1982	48		pha				pha
.1983	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1985	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.1988	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.198b	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.198e	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.1991	68		pla				pla 									; pop constant and OR in
.1992	fa		plx				plx
.1993	05 08		ora $08				ora 	IFR0+IM0
.1995	85 08		sta $08				sta 	IFR0+IM0
.1997	c8		iny				iny 									; next char
.1998	ca		dex				dex 									; done all characters ?
.1999	d0 ca		bne $1965			bne 	_EUDLoop
.199b	7a		ply				ply
.199c	60		rts				rts
.199d					_EUDError:
.199d	4c 14 28	jmp $2814		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.19a0					EXPUnaryInlineDec:
.19a0	4c f2 27	jmp $27f2		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.19a3					EXPUnaryPeek:
.19a3	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 				; number to R0
.19a6	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.19a9	b2 08		lda ($08)			lda 	(IFR0) 							; read byte and set it
.19ab	a2 08		ldx #$08			ldx 	#IFR0
.19ad	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.19b0	60		rts				rts
.19b1					EXPUnaryDeek:
.19b1	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 				; number to R0
.19b4	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.19b7	5a		phy				phy 									; read MSB and push on stack
.19b8	a0 01		ldy #$01			ldy 	#1
.19ba	b1 08		lda ($08),y			lda 	(IFR0),y
.19bc	7a		ply				ply
.19bd	48		pha				pha
.19be	b2 08		lda ($08)			lda 	(IFR0) 							; set LSB
.19c0	a2 08		ldx #$08			ldx 	#IFR0
.19c2	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.19c5	68		pla				pla 									; set MSB
.19c6	85 09		sta $09				sta 	IFR0+IM1
.19c8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.19c9					EXPUnaryFrac:
.19c9	20 03 18	jsr $1803			jsr 	EXPEvalNumber 					; number to R0
.19cc	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.19cf	20 13 31	jsr $3113			jsr 	IFloatFractionalR0 				; get fractional bit.
.19d2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.19d3					EXPUnaryInkey:
.19d3	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.19d6	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.19d8	20 c0 2a	jsr $2ac0			jsr 	StringTempAllocate
.19db	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit with the empty string
.19de	b0 06		bcs $19e6			bcs 	_EUIExit
.19e0	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it and put it in first character
.19e3	20 f5 2a	jsr $2af5			jsr 	StringTempWrite
.19e6					_EUIExit:
.19e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.19e7					EXPUnaryInt:
.19e7	20 03 18	jsr $1803			jsr 	EXPEvalNumber 					; number to R0
.19ea	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; check for )
.19ed	20 69 31	jsr $3169			jsr 	IFloatIntegerR0 				; force to integer.
.19f0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.19f1					EXPUnaryLen:
.19f1	20 2d 18	jsr $182d			jsr 	EXPEvalString 					; string to R0, zTemp0
.19f4	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.19f7	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.19f9	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.19fb	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.19fe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.19ff					EXPUnaryParenthesis:
.19ff	20 03 18	jsr $1803			jsr 	EXPEvalNumber 					; number to R0
.1a02	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.1a05	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1a06					EXPUnaryRnd:
.1a06	20 03 18	jsr $1803			jsr 	EXPEvalNumber 				; number to R0
.1a09	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 				; )
.1a0c	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1a0e	20 25 1a	jsr $1a25			jsr 	EXPLoadInRandom
.1a11	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1a13	85 0b		sta $0b				sta 	IFR0+IExp
.1a15	60		rts				rts
.1a16					ExpUnaryRand:
.1a16	20 0e 18	jsr $180e			jsr 	EXPEvalInteger 				; integer to R0
.1a19	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 				; )
.1a1c	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1a1e	20 25 1a	jsr $1a25			jsr 	EXPLoadInRandom
.1a21	20 d8 2f	jsr $2fd8			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1a24	60		rts				rts
.1a25					EXPLoadInRandom:
.1a25	20 68 34	jsr $3468			jsr 	IFloatSetZero 				; zero it
.1a28	20 3a 1a	jsr $1a3a			jsr 	EXPRandom32 				; do a 23 bit number.
.1a2b	95 00		sta $00,x			sta 	IM0,x
.1a2d	20 3a 1a	jsr $1a3a			jsr 	EXPRandom32
.1a30	95 01		sta $01,x			sta 	IM1,x
.1a32	20 3a 1a	jsr $1a3a			jsr 	EXPRandom32
.1a35	29 7f		and #$7f			and 	#$7F
.1a37	95 02		sta $02,x			sta 	IM2,x
.1a39	60		rts				rts
.1a3a					EXPRandom32:
.1a3a	5a		phy				phy
.1a3b	a0 08		ldy #$08			ldy 	#8
.1a3d	ad 14 05	lda $0514			lda 	EXPSeed+0
.1a40	0d 15 05	ora $0515			ora 	EXPSeed+1
.1a43	0d 16 05	ora $0516			ora 	EXPSeed+2
.1a46	0d 17 05	ora $0517			ora 	EXPSeed+3
.1a49	d0 08		bne $1a53			bne 	_EXPRNoReset
.1a4b	ee 14 05	inc $0514			inc 	EXPSeed+0
.1a4e	a0 10		ldy #$10			ldy 	#16
.1a50	8c 17 05	sty $0517			sty 	EXPSeed+3
.1a53					_EXPRNoReset:
.1a53	ad 14 05	lda $0514			lda 	EXPSeed+0
.1a56					_EXPRLoop:
.1a56	0a		asl a				asl		a
.1a57	2e 15 05	rol $0515			rol 	EXPSeed+1
.1a5a	2e 16 05	rol $0516			rol 	EXPSeed+2
.1a5d	2e 17 05	rol $0517			rol 	EXPSeed+3
.1a60	90 02		bcc $1a64			bcc 	_EXPRNoEOR
.1a62	49 c5		eor #$c5			eor 	#$C5
.1a64					_EXPRNoEOR:
.1a64	88		dey				dey
.1a65	d0 ef		bne $1a56			bne 	_EXPRLoop
.1a67	8d 14 05	sta $0514			sta 	EXPSeed+0
.1a6a	7a		ply				ply
.1a6b	60		rts				rts
.0514					EXPSeed:
>0514							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1a6c					EXPUnarySgn:
.1a6c	20 03 18	jsr $1803			jsr 	EXPEvalNumber 					; number to R0
.1a6f	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.1a72	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1a74	20 0a 34	jsr $340a			jsr 	IFloatCopyToRegister
.1a77	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1a79	20 68 34	jsr $3468			jsr 	IFloatSetZero
.1a7c	a2 0c		ldx #$0c			ldx 	#IFR1
.1a7e	20 37 31	jsr $3137			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1a81	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1a82					EXPUnarySqr:
.1a82	20 03 18	jsr $1803			jsr 	EXPEvalNumber 					; number to R0
.1a85	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.1a88	20 b3 30	jsr $30b3			jsr 	IFloatSquareRootR0 				; square root.
.1a8b	b0 01		bcs $1a8e			bcs 	_EUSValue 						; error check.
.1a8d	60		rts				rts
.1a8e					_EUSValue:
.1a8e	4c 03 28	jmp $2803		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1a91					EXPUnaryHex:
.1a91	20 0e 18	jsr $180e			jsr 	EXPEvalInteger 					; expr
.1a94	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.1a97	5a		phy				phy
.1a98	a9 10		lda #$10			lda 	#16
.1a9a	20 0a 32	jsr $320a			jsr 	IFloatIntegerToStringR0
.1a9d	80 0a		bra $1aa9			bra 	EUSMain
.1a9f					EXPUnaryStr:
.1a9f	20 03 18	jsr $1803			jsr 	EXPEvalNumber 					; expr
.1aa2	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.1aa5	5a		phy				phy
.1aa6	20 65 32	jsr $3265			jsr 	IFloatFloatToStringR0 			; convert to string
.1aa9					EUSMain:
.1aa9	b0 19		bcs $1ac4			bcs 	_EUSError
.1aab	86 24		stx $24				stx 	zTemp0 							; save string address
.1aad	84 25		sty $25				sty 	zTemp0+1
.1aaf	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1ab1	20 c0 2a	jsr $2ac0			jsr 	StringTempAllocate
.1ab4	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1ab6	aa		tax				tax 									; count in X
.1ab7	a0 01		ldy #$01			ldy 	#1
.1ab9					_EUSCopy:
.1ab9	b1 24		lda ($24),y			lda 	(zTemp0),y
.1abb	c8		iny				iny
.1abc	20 f5 2a	jsr $2af5			jsr 	StringTempWrite
.1abf	ca		dex				dex
.1ac0	d0 f7		bne $1ab9			bne	 	_EUSCopy
.1ac2	7a		ply				ply
.1ac3	60		rts				rts
.1ac4					_EUSError:
.1ac4	4c 03 28	jmp $2803		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1ac7					EXPUnaryInlineString:
.1ac7	18		clc				clc 								; physical address -> IM0,1
.1ac8	98		tya				tya 								; put the actual address in IM0
.1ac9	65 18		adc $18				adc 	codePtr
.1acb	85 08		sta $08				sta 	IFR0+IM0
.1acd	a5 19		lda $19				lda 	codePtr+1
.1acf	69 00		adc #$00			adc 	#0
.1ad1	85 09		sta $09				sta 	IFR0+IM1
.1ad3	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1ad5	a9 80		lda #$80			lda 	#$80
.1ad7	85 0b		sta $0b				sta 	IFR0+IExp
.1ad9	98		tya				tya	 								; skip over it.
.1ada	38		sec				sec
.1adb	71 18		adc ($18),y			adc 	(codePtr),y
.1add	a8		tay				tay
.1ade	60		rts				rts
.1adf					_EXPUISRange:
.1adf	4c 03 28	jmp $2803		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1ae2					EXPUnaryLeft:
.1ae2	20 28 1b	jsr $1b28			jsr 	EXPCommonStart 					; <string>,
.1ae5	48		pha				pha 									; save string address on stack
.1ae6	da		phx				phx
.1ae7	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1ae9	48		pha				pha
.1aea	20 21 18	jsr $1821			jsr 	EXPEvalInteger8 				; characters to do
.1aed	80 44		bra $1b33			bra 	EXPSubstringCommon
.1aef					EXPUnaryRight:
.1aef	20 28 1b	jsr $1b28			jsr 	EXPCommonStart 					; <string>,
.1af2	48		pha				pha 									; save string address on stack
.1af3	da		phx				phx
.1af4	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1af6	48		pha				pha
.1af7	20 21 18	jsr $1821			jsr 	EXPEvalInteger8 				; characters to do
.1afa	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1afc	68		pla				pla
.1afd	38		sec				sec
.1afe	e5 24		sbc $24				sbc 	zTemp0
.1b00	b0 02		bcs $1b04			bcs 	_EUROffLeft
.1b02	a9 00		lda #$00			lda 	#0
.1b04					_EUROffLeft:
.1b04	48		pha				pha 									; start pos
.1b05	a9 ff		lda #$ff			lda 	#255
.1b07	80 2a		bra $1b33			bra 	EXPSubstringCommon
.1b09					EXPUnaryMid:
.1b09	20 28 1b	jsr $1b28			jsr 	EXPCommonStart 					; <string>,
.1b0c	48		pha				pha 									; save string address on stack
.1b0d	da		phx				phx
.1b0e	20 21 18	jsr $1821			jsr 	EXPEvalInteger8 				; characters start
.1b11	f0 12		beq $1b25			beq 	_EUSError 						; 1 is left
.1b13	3a		dec a				dec 	a 								; zero based.
.1b14	48		pha				pha
.1b15	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1b17	c9 99		cmp #$99			cmp 	#PR_COMMA
.1b19	f0 04		beq $1b1f			beq 	_EUMLength 						; if so m is provided
.1b1b	a9 ff		lda #$ff			lda 	#255 							; default m
.1b1d	80 14		bra $1b33			bra 	EXPSubstringCommon
.1b1f					_EUMLength:
.1b1f	c8		iny				iny 									; consume comma
.1b20	20 21 18	jsr $1821			jsr 	EXPEvalInteger8 				; characters to do
.1b23	80 0e		bra $1b33			bra 	EXPSubstringCommon
.1b25					_EUSError:
.1b25	4c 14 28	jmp $2814		jmp	ErrorV_value
.1b28					EXPCommonStart:
.1b28	20 2d 18	jsr $182d			jsr 	EXPEvalString
.1b2b	20 d3 29	jsr $29d3			jsr 	ERRCheckComma
.1b2e	a5 08		lda $08				lda 	IFR0+IM0
.1b30	a6 09		ldx $09				ldx 	IFR0+IM1
.1b32	60		rts				rts
.1b33					EXPSubstringCommon:
.1b33	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1b35	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; check right bracket.
.1b38	68		pla				pla 									; start position
.1b39	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1b3b	fa		plx				plx 									; get string address to zTemp2.
.1b3c	86 29		stx $29				stx 	zTemp2+1
.1b3e	68		pla				pla
.1b3f	85 28		sta $28				sta 	zTemp2
.1b41	38		sec				sec 									; length - start is the max count of chars
.1b42	b2 28		lda ($28)			lda 	(zTemp2)
.1b44	e5 27		sbc $27				sbc 	zTemp1+1
.1b46	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1b48	b0 02		bcs $1b4c			bcs 	_EXPSSNoTrim
.1b4a	85 26		sta $26				sta 	zTemp1 							; update count with available
.1b4c					_EXPSSNoTrim:
.1b4c	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1b4e	20 c0 2a	jsr $2ac0			jsr 	StringTempAllocate 				; allocate memory for it.
.1b51	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1b53	f0 15		beq $1b6a			beq 	_EXPSSExit
.1b55	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1b57	d2 28		cmp ($28)			cmp 	(zTemp2)
.1b59	b0 0f		bcs $1b6a			bcs 	_EXPSSExit
.1b5b	5a		phy				phy
.1b5c	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1b5e	c8		iny				iny 									; +1 for the length byte
.1b5f					_EXPSSCopy:
.1b5f	b1 28		lda ($28),y			lda 	(zTemp2),y
.1b61	20 f5 2a	jsr $2af5			jsr 	StringTempWrite
.1b64	c8		iny				iny
.1b65	c6 26		dec $26				dec 	zTemp1
.1b67	d0 f6		bne $1b5f			bne 	_EXPSSCopy
.1b69	7a		ply				ply
.1b6a					_EXPSSExit:
.1b6a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1b6b					EXPUnaryVal:
.1b6b	20 2d 18	jsr $182d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b6e	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 					; )
.1b71	20 75 1b	jsr $1b75			jsr 	VALConversionZTemp0
.1b74	60		rts				rts
.1b75					VALConversionZTemp0:
.1b75	5a		phy				phy
.1b76	18		clc				clc
.1b77	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1b79	69 01		adc #$01			adc 	#1
.1b7b	aa		tax				tax
.1b7c	a5 25		lda $25				lda 	zTemp0+1
.1b7e	69 00		adc #$00			adc 	#0
.1b80	a8		tay				tay
.1b81	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1b83	20 cc 32	jsr $32cc			jsr 	IFloatStringToFloatR0 			; do conversion
.1b86	b0 02		bcs $1b8a			bcs 	_EUVError
.1b88	7a		ply				ply
.1b89	60		rts				rts
.1b8a					_EUVError:
.1b8a	4c 14 28	jmp $2814		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1b8d					AssemblerLookup:
>1b8d	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,0,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,0,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,0,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,0,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,0,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,0,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,0,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,0,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,0,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,0,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,0,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,0,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,0,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,0,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,0,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,0
>1b95	fb 1e 7c 00 4b 1e 7c 00 b8 1e 1e 00 41 1e 7c eb
>1ba5	b9 1e f9 00 41 1e 7c 00 7f 6a 00 00 7a 6a e1 eb
>1bb5	23 6a e1 00 7a 6a e1 00 97 6a 6a 00 7a 6a e1 eb
>1bc5	a6 6a 7d 00 7a 6a e1 00 38 62 00 00 00 62 0b eb
>1bd5	ec 62 0b 00 2e 62 0b 00 c3 62 62 00 00 62 0b eb
>1be5	bf 62 04 00 00 62 0b 00 42 1d 00 00 3b 1d e7 eb
>1bf5	14 1d e7 00 2e 1d e7 00 d3 1d 1d 00 3b 1d e7 eb
>1c05	ac 1d 2c 00 2e 1d e7 00 99 22 00 00 3a 22 39 f5
>1c15	93 7a 54 00 3a 22 39 00 45 22 22 00 3a 22 39 f5
>1c25	5e 22 66 00 3b 22 3b 00 19 01 18 00 19 01 18 f5
>1c35	c6 01 c5 00 19 01 18 00 55 01 01 00 19 01 18 f5
>1c45	cc 01 61 00 19 01 18 00 f7 a8 00 00 f7 a8 7d f5
>1c55	0f a8 92 0c f7 a8 7d 00 75 a8 a8 00 00 a8 7d f5
>1c65	ba a8 03 31 00 a8 7d 00 f6 48 00 00 f6 48 f9 f5
>1c75	0e 48 dd 00 f6 48 f9 00 8f 48 48 00 00 48 f9 f5
>1c85	a7 48 2b 00 00 48 f9 00

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1c8d					BinaryPrecedence:
>1c8d	02					.byte	 2	; $ef =
>1c8e	02					.byte	 2	; $f0 <>
>1c8f	02					.byte	 2	; $f1 <=
>1c90	02					.byte	 2	; $f2 <
>1c91	02					.byte	 2	; $f3 >=
>1c92	02					.byte	 2	; $f4 >
>1c93	01					.byte	 1	; $f5 XOR
>1c94	01					.byte	 1	; $f6 OR
>1c95	01					.byte	 1	; $f7 AND
>1c96	04					.byte	 4	; $f8 DIV
>1c97	04					.byte	 4	; $f9 MOD
>1c98	04					.byte	 4	; $fa <<
>1c99	04					.byte	 4	; $fb >>
>1c9a	04					.byte	 4	; $fc /
>1c9b	04					.byte	 4	; $fd *
>1c9c	03					.byte	 3	; $fe -
>1c9d	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1c9e					StructureOffsets:
>1c9e	01					.byte	1  	; $80 REPEAT
>1c9f	ff					.byte	255	; $81 UNTIL
>1ca0	01					.byte	1  	; $82 WHILE
>1ca1	ff					.byte	255	; $83 WEND
>1ca2	01					.byte	1  	; $84 IF
>1ca3	ff					.byte	255	; $85 ENDIF
>1ca4	01					.byte	1  	; $86 DO
>1ca5	ff					.byte	255	; $87 LOOP
>1ca6	01					.byte	1  	; $88 PROC
>1ca7	ff					.byte	255	; $89 ENDPROC
>1ca8	01					.byte	1  	; $8a FOR
>1ca9	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1caa					StandardTokens:
>1caa	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1cb1	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1cb7	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1cbd	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1cc2	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1cc5	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1ccb	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1cce	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1cd3	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1cd8	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1ce0	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1ce4	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1ce9	00					.byte	$00                                     	; $8c [[end]]
>1cea	00					.byte	$00                                     	; $8d [[shift]]
>1ceb	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1cf0	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1cf5	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1cf8	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1cfd	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1d01	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1d07	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1d0d	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1d12	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1d16	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1d1a	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1d1f	01 2c					.byte	$01,$2c                                 	; $99 ,
>1d21	01 3b					.byte	$01,$3b                                 	; $9a ;
>1d23	01 3a					.byte	$01,$3a                                 	; $9b :
>1d25	01 27					.byte	$01,$27                                 	; $9c '
>1d27	01 29					.byte	$01,$29                                 	; $9d )
>1d29	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1d2e	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1d33	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1d38	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1d3d	01 5b					.byte	$01,$5b                                 	; $a2 [
>1d3f	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1d41	01 23					.byte	$01,$23                                 	; $a4 #
>1d43	01 2e					.byte	$01,$2e                                 	; $a5 .
>1d45	00					.byte	0											; $a6
>1d46	00					.byte	0											; $a7
>1d47	00					.byte	0											; $a8
>1d48	00					.byte	0											; $a9
>1d49	00					.byte	0											; $aa
>1d4a	00					.byte	0											; $ab
>1d4b	00					.byte	0											; $ac
>1d4c	00					.byte	0											; $ad
>1d4d	00					.byte	0											; $ae
>1d4e	00					.byte	0											; $af
>1d4f	00					.byte	0											; $b0
>1d50	00					.byte	0											; $b1
>1d51	00					.byte	0											; $b2
>1d52	00					.byte	0											; $b3
>1d53	00					.byte	0											; $b4
>1d54	00					.byte	0											; $b5
>1d55	00					.byte	0											; $b6
>1d56	00					.byte	0											; $b7
>1d57	00					.byte	0											; $b8
>1d58	00					.byte	0											; $b9
>1d59	00					.byte	0											; $ba
>1d5a	00					.byte	0											; $bb
>1d5b	00					.byte	0											; $bc
>1d5c	00					.byte	0											; $bd
>1d5d	00					.byte	0											; $be
>1d5e	00					.byte	0											; $bf
>1d5f	00					.byte	0											; $c0
>1d60	00					.byte	0											; $c1
>1d61	00					.byte	0											; $c2
>1d62	00					.byte	0											; $c3
>1d63	00					.byte	0											; $c4
>1d64	00					.byte	0											; $c5
>1d65	00					.byte	0											; $c6
>1d66	00					.byte	0											; $c7
>1d67	00					.byte	0											; $c8
>1d68	00					.byte	0											; $c9
>1d69	00					.byte	0											; $ca
>1d6a	00					.byte	0											; $cb
>1d6b	00					.byte	0											; $cc
>1d6c	00					.byte	0											; $cd
>1d6d	00					.byte	0											; $ce
>1d6e	00					.byte	0											; $cf
>1d6f	00					.byte	0											; $d0
>1d70	00					.byte	0											; $d1
>1d71	00					.byte	0											; $d2
>1d72	00					.byte	0											; $d3
>1d73	00					.byte	0											; $d4
>1d74	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1d7a	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1d80	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1d88	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1d8f	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1d95	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1d9b	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1da0	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1da5	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1daa	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1daf	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1db4	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1dba	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1dbf	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1dc7	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1dce	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1dd3	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1dd8	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1dde	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1de3	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1de9	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1dee	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1df4	01 28					.byte	$01,$28                                 	; $eb (
>1df6	01 26					.byte	$01,$26                                 	; $ec &
>1df8	00					.byte	$00                                     	; $ed [[decimal]]
>1df9	00					.byte	$00                                     	; $ee [[string]]
>1dfa	01 3d					.byte	$01,$3d                                 	; $ef =
>1dfc	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1dff	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1e02	01 3c					.byte	$01,$3c                                 	; $f2 <
>1e04	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1e07	01 3e					.byte	$01,$3e                                 	; $f4 >
>1e09	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1e0d	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1e10	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1e14	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1e18	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1e1c	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1e1f	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1e22	01 2f					.byte	$01,$2f                                 	; $fc /
>1e24	01 2a					.byte	$01,$2a                                 	; $fd *
>1e26	01 2d					.byte	$01,$2d                                 	; $fe -
>1e28	01 2b					.byte	$01,$2b                                 	; $ff +
>1e2a	ff					.byte	$FF
.1e2b					AlternateTokens:
>1e2b	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1e31	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1e35	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1e39	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1e3e	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1e42	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1e49	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1e4e	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1e53	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1e58	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1e5e	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1e63	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1e6a	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1e72	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1e76	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>1e7a	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>1e80	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8d90 renumber
>1e88	52
>1e89	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1e8a					VectorTable:
>1e8a	e2 26					.word	Command_REPEAT           ; $80 REPEAT
>1e8c	eb 26					.word	Command_UNTIL            ; $81 UNTIL
>1e8e	c5 27					.word	Command_WHILE            ; $82 WHILE
>1e90	e6 27					.word	Command_WEND             ; $83 WEND
>1e92	b8 26					.word	IfCommand                ; $84 IF
>1e94	e1 26					.word	EndIf                    ; $85 ENDIF
>1e96	3a 25					.word	Command_DO               ; $86 DO
>1e98	52 25					.word	Command_LOOP             ; $87 LOOP
>1e9a	43 16					.word	NoExec08                 ; $88 PROC
>1e9c	2e 25					.word	Command_ENDPROC          ; $89 ENDPROC
>1e9e	5b 25					.word	Command_FOR              ; $8a FOR
>1ea0	e8 25					.word	Command_NEXT             ; $8b NEXT
>1ea2	c4 15					.word	RUNEndOfLine             ; $8c [[END]]
>1ea4	20 16					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1ea6	da 26					.word	ElseCode                 ; $8e ELSE
>1ea8	43 16					.word	NoExec01                 ; $8f THEN
>1eaa	43 16					.word	NoExec02                 ; $90 TO
>1eac	43 16					.word	NoExec03                 ; $91 STEP
>1eae	6b 13					.word	CommandLET               ; $92 LET
>1eb0	c0 12					.word	Command_Print            ; $93 PRINT
>1eb2	b9 12					.word	Command_Input            ; $94 INPUT
>1eb4	f2 24					.word	Command_CALL             ; $95 CALL
>1eb6	2e 16					.word	Command_Sys              ; $96 SYS
>1eb8	39 15					.word	Command_REM              ; $97 REM
>1eba	43 25					.word	Command_EXIT             ; $98 EXIT
>1ebc	43 16					.word	NoExec04                 ; $99 ,
>1ebe	43 16					.word	NoExec05                 ; $9a ;
>1ec0	43 16					.word	NoExec06                 ; $9b :
>1ec2	39 15					.word	Command_REM2             ; $9c '
>1ec4	43 16					.word	NoExec07                 ; $9d )
>1ec6	62 12					.word	Command_Poke             ; $9e POKE
>1ec8	5f 12					.word	Command_Doke             ; $9f DOKE
>1eca	c5 14					.word	Command_READ             ; $a0 READ
>1ecc	2c 15					.word	Command_DATA             ; $a1 DATA
>1ece	0d 10					.word	Command_AssemblerStart   ; $a2 [
>1ed0	3e 2c					.word	NotImplemented           ; $a3 ]
>1ed2	3e 2c					.word	NotImplemented           ; $a4 #
>1ed4	3e 2c					.word	NotImplemented           ; $a5 .
>1ed6	3e 2c					.word	NotImplemented           ; $a6
>1ed8	3e 2c					.word	NotImplemented           ; $a7
>1eda	3e 2c					.word	NotImplemented           ; $a8
>1edc	3e 2c					.word	NotImplemented           ; $a9
>1ede	3e 2c					.word	NotImplemented           ; $aa
>1ee0	3e 2c					.word	NotImplemented           ; $ab
>1ee2	3e 2c					.word	NotImplemented           ; $ac
>1ee4	3e 2c					.word	NotImplemented           ; $ad
>1ee6	3e 2c					.word	NotImplemented           ; $ae
>1ee8	3e 2c					.word	NotImplemented           ; $af
>1eea	3e 2c					.word	NotImplemented           ; $b0
>1eec	3e 2c					.word	NotImplemented           ; $b1
>1eee	3e 2c					.word	NotImplemented           ; $b2
>1ef0	3e 2c					.word	NotImplemented           ; $b3
>1ef2	3e 2c					.word	NotImplemented           ; $b4
>1ef4	3e 2c					.word	NotImplemented           ; $b5
>1ef6	3e 2c					.word	NotImplemented           ; $b6
>1ef8	3e 2c					.word	NotImplemented           ; $b7
>1efa	3e 2c					.word	NotImplemented           ; $b8
>1efc	3e 2c					.word	NotImplemented           ; $b9
>1efe	3e 2c					.word	NotImplemented           ; $ba
>1f00	3e 2c					.word	NotImplemented           ; $bb
>1f02	3e 2c					.word	NotImplemented           ; $bc
>1f04	3e 2c					.word	NotImplemented           ; $bd
>1f06	3e 2c					.word	NotImplemented           ; $be
>1f08	3e 2c					.word	NotImplemented           ; $bf
>1f0a	3e 2c					.word	NotImplemented           ; $c0
>1f0c	3e 2c					.word	NotImplemented           ; $c1
>1f0e	3e 2c					.word	NotImplemented           ; $c2
>1f10	3e 2c					.word	NotImplemented           ; $c3
>1f12	3e 2c					.word	NotImplemented           ; $c4
>1f14	3e 2c					.word	NotImplemented           ; $c5
>1f16	3e 2c					.word	NotImplemented           ; $c6
>1f18	3e 2c					.word	NotImplemented           ; $c7
>1f1a	3e 2c					.word	NotImplemented           ; $c8
>1f1c	3e 2c					.word	NotImplemented           ; $c9
>1f1e	3e 2c					.word	NotImplemented           ; $ca
>1f20	3e 2c					.word	NotImplemented           ; $cb
>1f22	3e 2c					.word	NotImplemented           ; $cc
>1f24	3e 2c					.word	NotImplemented           ; $cd
>1f26	3e 2c					.word	NotImplemented           ; $ce
>1f28	3e 2c					.word	NotImplemented           ; $cf
>1f2a	3e 2c					.word	NotImplemented           ; $d0
>1f2c	3e 2c					.word	NotImplemented           ; $d1
>1f2e	3e 2c					.word	NotImplemented           ; $d2
>1f30	3e 2c					.word	NotImplemented           ; $d3
>1f32	3e 2c					.word	NotImplemented           ; $d4
>1f34	b1 19					.word	EXPUnaryDeek             ; $d5 DEEK(
>1f36	a3 19					.word	EXPUnaryPeek             ; $d6 PEEK(
>1f38	ef 1a					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1f3a	e2 1a					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1f3c	09 1b					.word	EXPUnaryMid              ; $d9 MID$(
>1f3e	9f 1a					.word	EXPUnaryStr              ; $da STR$(
>1f40	6b 1b					.word	EXPUnaryVal              ; $db VAL(
>1f42	6c 1a					.word	EXPUnarySgn              ; $dc SGN(
>1f44	1d 19					.word	EXPUnaryAbs              ; $dd ABS(
>1f46	f1 19					.word	EXPUnaryLen              ; $de LEN(
>1f48	82 1a					.word	EXPUnarySqr              ; $df SQR(
>1f4a	41 19					.word	EXPUnaryChr              ; $e0 CHR$(
>1f4c	2b 19					.word	EXPUnaryAsc              ; $e1 ASC(
>1f4e	d3 19					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1f50	3e 2c					.word	NotImplemented           ; $e3 EVENT(
>1f52	3e 2c					.word	NotImplemented           ; $e4 TIME
>1f54	e7 19					.word	EXPUnaryInt              ; $e5 INT(
>1f56	c9 19					.word	EXPUnaryFrac             ; $e6 FRAC(
>1f58	52 19					.word	EXPUnaryDec              ; $e7 DEC(
>1f5a	91 1a					.word	EXPUnaryHex              ; $e8 HEX$(
>1f5c	06 1a					.word	EXPUnaryRnd              ; $e9 RND(
>1f5e	16 1a					.word	ExpUnaryRand             ; $ea RAND(
>1f60	ff 19					.word	EXPUnaryParenthesis      ; $eb (
>1f62	27 19					.word	EXPUnaryNull             ; $ec &
>1f64	a0 19					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1f66	c7 1a					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1f68	00 17					.word	EXPCompareEqual          ; $ef =
>1f6a	1b 17					.word	EXPCompareNotEqual       ; $f0 <>
>1f6c	24 17					.word	EXPCompareLessEqual      ; $f1 <=
>1f6e	09 17					.word	EXPCompareLess           ; $f2 <
>1f70	2d 17					.word	EXPCompareGreaterEqual   ; $f3 >=
>1f72	12 17					.word	EXPCompareGreater        ; $f4 >
>1f74	ad 16					.word	EXPBinXor                ; $f5 XOR
>1f76	a1 16					.word	EXPBinOr                 ; $f6 OR
>1f78	95 16					.word	EXPBinAnd                ; $f7 AND
>1f7a	6d 16					.word	EXPBinIDiv               ; $f8 DIV
>1f7c	7e 16					.word	EXPBinIMod               ; $f9 MOD
>1f7e	78 17					.word	EXPBinLeft               ; $fa <<
>1f80	80 17					.word	EXPBinRight              ; $fb >>
>1f82	61 16					.word	EXPBinFDiv               ; $fc /
>1f84	58 16					.word	EXPBinMul                ; $fd *
>1f86	4f 16					.word	EXPBinSub                ; $fe -
>1f88	46 16					.word	EXPBinAdd                ; $ff +
.1f8a					AlternateVectorTable:
>1f8a	cf 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1f8c	bc 14					.word	Command_NEW              ; $8d81 NEW
>1f8e	b8 15					.word	Command_RUN              ; $8d82 RUN
>1f90	2b 16					.word	Command_STOP             ; $8d83 STOP
>1f92	28 16					.word	Command_END              ; $8d84 END
>1f94	c1 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1f96	e5 13					.word	Command_LIST             ; $8d86 LIST
>1f98	ac 2b					.word	Command_SAVE             ; $8d87 SAVE
>1f9a	6b 2b					.word	Command_LOAD             ; $8d88 LOAD
>1f9c	9e 26					.word	Command_GOSUB            ; $8d89 GOSUB
>1f9e	89 12					.word	Command_GOTO             ; $8d8a GOTO
>1fa0	ac 26					.word	Command_RETURN           ; $8d8b RETURN
>1fa2	8a 15					.word	Command_RESTORE          ; $8d8c RESTORE
>1fa4	43 11					.word	CommandDIM               ; $8d8d DIM
>1fa6	02 2b					.word	Command_DIR              ; $8d8e DIR
>1fa8	3f 2b					.word	Command_ERASE            ; $8d8f ERASE
>1faa	46 15					.word	Command_RENUMBER         ; $8d90 RENUMBER

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1fac					TOKDetokenise:
.1fac	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.1fae	84 29		sty $29				sty 	zTemp2+1
.1fb0	9c 1a 05	stz $051a			stz		TOKLastCharacter 			; clear last character
.1fb3					_TOKDLoop:
.1fb3	20 f8 1f	jsr $1ff8			jsr 	TOKDGet 					; get next
.1fb6	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1fb8	f0 3c		beq $1ff6			beq 	_TOKDExit
.1fba	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1fbc	f0 33		beq $1ff1			beq 	_TOKDDataItem
.1fbe	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1fc0	f0 2f		beq $1ff1			beq 	_TOKDDataItem
.1fc2	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.1fc4	f0 19		beq $1fdf			beq 	_TOKAmpersand
.1fc6	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1fc8	10 05		bpl $1fcf			bpl 	_TOKDNotToken
.1fca	20 be 20	jsr $20be			jsr 	TOKDToken 					; token to text.
.1fcd	80 e4		bra $1fb3			bra 	_TOKDLoop
.1fcf					_TOKDNotToken:
.1fcf	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1fd1	90 05		bcc $1fd8			bcc 	_TOKDNotIdentifier
.1fd3	20 35 20	jsr $2035			jsr 	TOKDIdentifier
.1fd6	80 db		bra $1fb3			bra 	_TOKDLoop
.1fd8					_TOKDNotIdentifier:
.1fd8	a0 0a		ldy #$0a			ldy 	#10
.1fda	20 78 20	jsr $2078			jsr 	TOKDInteger
.1fdd	80 d4		bra $1fb3			bra 	_TOKDLoop
.1fdf					_TOKAmpersand:
.1fdf	20 00 21	jsr $2100			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.1fe2	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.1fe4	20 01 20	jsr $2001			jsr 	TOKDOutput
.1fe7	20 f8 1f	jsr $1ff8			jsr 	TOKDGet 					; get first char of integer
.1fea	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.1fec	20 78 20	jsr $2078			jsr 	TOKDInteger
.1fef	80 c2		bra $1fb3			bra 	_TOKDLoop
.1ff1					_TOKDDataItem:
.1ff1	20 0e 20	jsr $200e			jsr 	TOKDDataItem
.1ff4	80 bd		bra $1fb3			bra 	_TOKDLoop
.1ff6					_TOKDExit:
.1ff6	18		clc				clc
.1ff7	60		rts				rts
.1ff8	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.1ffa	e6 28		inc $28				inc 	zTemp2
.1ffc	d0 02		bne $2000			bne 	_TKDGExit
.1ffe	e6 29		inc $29				inc 	zTemp2+1
.2000					_TKDGExit:
.2000	60		rts				rts
.2001					TOKDOutput:
.2001	8d 1a 05	sta $051a			sta 	TOKLastCharacter
.2004	6c 18 05	jmp ($0518)			jmp 	(TOKOutputMethod)
.2007					TOKSetDetokeniseOutput:
.2007	8e 18 05	stx $0518			stx 	TOKOutputMethod
.200a	8c 19 05	sty $0519			sty 	TOKOutputMethod+1
.200d	60		rts				rts
.0518					TOKOutputMethod:
>0518							.fill 	2
.051a					TOKLastCharacter:
>051a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.200e					TOKDDataItem:
.200e	a8		tay				tay 								; type in Y
.200f	a9 22		lda #$22			lda 	#'"'						; start with " or .
.2011	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.2013	f0 02		beq $2017			beq 	_TOKDDIsString
.2015	a9 2e		lda #$2e			lda 	#'.'
.2017					_TOKDDIsString:
.2017	20 01 20	jsr $2001			jsr 	TOKDOutput 					; dump it
.201a	20 f8 1f	jsr $1ff8			jsr 	TOKDGet 					; get length into X
.201d	aa		tax				tax
.201e					_TOKDDOutput:
.201e	ca		dex				dex 								; are we complete
.201f	e0 ff		cpx #$ff			cpx 	#255
.2021	f0 08		beq $202b			beq 	_TOKDDEnd
.2023	20 f8 1f	jsr $1ff8			jsr 	TOKDGet 					; get character and output it
.2026	20 01 20	jsr $2001			jsr 	TOKDOutput
.2029	80 f3		bra $201e			bra 	_TOKDDOutput
.202b					_TOKDDEnd:
.202b	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.202d	d0 05		bne $2034			bne 	_TOKDDNotString
.202f	a9 22		lda #$22			lda 	#'"'
.2031	20 01 20	jsr $2001			jsr 	TOKDOutput
.2034					_TOKDDNotString:
.2034	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.2035					TOKDIdentifier:
.2035	a0 ff		ldy #$ff			ldy 	#$FF
.2037	8c 1b 05	sty $051b			sty 	TOKDIFirstChar
.203a					_TOKDLoop:
.203a	a8		tay				tay 								; token in Y
.203b	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.203d	c0 64		cpy #$64			cpy 	#$64
.203f	f0 0b		beq $204c			beq 	_TOKDIOutput
.2041	98		tya				tya 								; handle a-z
.2042	18		clc				clc
.2043	69 21		adc #$21			adc	 	#$21
.2045	c0 5a		cpy #$5a			cpy 	#$5A
.2047	90 03		bcc $204c			bcc 	_TOKDIOutput
.2049	38		sec				sec 								; handle 0-9
.204a	e9 4b		sbc #$4b			sbc 	#$4B
.204c					_TOKDIOutput:
.204c	2c 1b 05	bit $051b			bit 	TOKDIFirstChar
.204f	10 08		bpl $2059			bpl 	_TOKDINoSpacing
.2051	48		pha				pha
.2052	20 fb 20	jsr $20fb			jsr 	TOKDSpacing
.2055	9c 1b 05	stz $051b			stz 	TOKDIFirstChar
.2058	68		pla				pla
.2059					_TOKDINoSpacing:
.2059	20 01 20	jsr $2001			jsr 	TOKDOutput
.205c	20 f8 1f	jsr $1ff8			jsr 	TOKDGet 					; get next token
.205f	c9 7c		cmp #$7c			cmp 	#$7C
.2061	90 d7		bcc $203a			bcc 	_TOKDLoop
.2063	f0 12		beq $2077			beq 	_TOKDIExit 					; it's a number, no tail.
.2065	4a		lsr a				lsr 	a 							; string ?
.2066	90 07		bcc $206f			bcc 	_TOKDICheckArray
.2068	48		pha				pha
.2069	a9 24		lda #$24			lda 	#"$"
.206b	20 01 20	jsr $2001			jsr 	TOKDOutput
.206e	68		pla				pla
.206f					_TOKDICheckArray:
.206f	4a		lsr a				lsr 	a 							; array ?
.2070	90 05		bcc $2077			bcc 	_TOKDIExit
.2072	a9 28		lda #$28			lda 	#"("
.2074	20 01 20	jsr $2001			jsr 	TOKDOutput
.2077					_TOKDIExit:
.2077	60		rts				rts
.051b					TOKDIFirstChar:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.2078					TOKDInteger:
.2078	5a		phy				phy 								; save base
.2079	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.207b	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.207e					_TOKDILoop:
.207e	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F
.2080	c9 40		cmp #$40			cmp 	#$40
.2082	b0 1d		bcs $20a1			bcs 	_TOKDIHaveInteger
.2084	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.2086	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.2089	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.208c	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.208f	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.2092	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.2095	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.2098	20 f8 1f	jsr $1ff8			jsr 	TOKDGet 					; OR byte in.
.209b	05 08		ora $08				ora 	IFR0+IM0
.209d	85 08		sta $08				sta 	IFR0+IM0
.209f	80 dd		bra $207e			bra 	_TOKDILoop
.20a1					_TOKDIHaveInteger:
.20a1	7a		ply				ply 								; restore base
.20a2	98		tya				tya 								; base in A
.20a3	20 0a 32	jsr $320a			jsr 	IFloatIntegerToStringR0
.20a6	86 24		stx $24				stx 	zTemp0
.20a8	84 25		sty $25				sty 	zTemp0+1
.20aa	b2 24		lda ($24)			lda 	(zTemp0)
.20ac	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.20ae	b1 24		lda ($24),y			lda 	(zTemp0),y
.20b0	20 fb 20	jsr $20fb			jsr 	TOKDSpacing 				; check spacing okay.
.20b3					_TOKDOutput:
.20b3	b1 24		lda ($24),y			lda 	(zTemp0),y
.20b5	20 01 20	jsr $2001			jsr 	TOKDOutput
.20b8	c8		iny				iny
.20b9	b1 24		lda ($24),y			lda 	(zTemp0),y
.20bb	d0 f6		bne $20b3			bne 	_TOKDOutput
.20bd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.20be					TOKDToken:
.20be	a2 aa		ldx #$aa			ldx 	#StandardTokens & $FF 		; standard table
.20c0	a0 1c		ldy #$1c			ldy 	#StandardTokens >> 8
.20c2	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.20c4	d0 07		bne $20cd			bne 	_TOKDSearch
.20c6	20 f8 1f	jsr $1ff8			jsr 	TOKDGet 					; get next
.20c9	a2 2b		ldx #$2b			ldx 	#AlternateTokens & $FF 		; alt table
.20cb	a0 1e		ldy #$1e			ldy 	#AlternateTokens >> 8
.20cd					_TOKDSearch:
.20cd	86 24		stx $24				stx 	zTemp0 						; put table in zTemp0
.20cf	84 25		sty $25				sty 	zTemp0+1
.20d1	aa		tax				tax 								; token ID in X.
.20d2					_TOKDFind:
.20d2	ca		dex				dex 								; reached the start
.20d3	10 0d		bpl $20e2			bpl 	_TOKDFound
.20d5	38		sec				sec 								; go to next entry
.20d6	b2 24		lda ($24)			lda 	(zTemp0)
.20d8	65 24		adc $24				adc 	zTemp0
.20da	85 24		sta $24				sta 	zTemp0
.20dc	90 f4		bcc $20d2			bcc 	_TOKDFind
.20de	e6 25		inc $25				inc 	zTemp0+1
.20e0	80 f0		bra $20d2			bra 	_TOKDFind
.20e2					_TOKDFound:
.20e2	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X
.20e4	f0 14		beq $20fa			beq 	_TOKDExit
.20e6	aa		tax				tax
.20e7	a0 01		ldy #$01			ldy 	#1 							; output the token.
.20e9	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.20eb	20 fb 20	jsr $20fb			jsr 	TOKDSpacing
.20ee					_TOKDOutput:
.20ee	b1 24		lda ($24),y			lda 	(zTemp0),y
.20f0	20 b1 24	jsr $24b1			jsr 	TOKToLower
.20f3	20 01 20	jsr $2001			jsr 	TOKDOutput
.20f6	c8		iny				iny
.20f7	ca		dex				dex
.20f8	d0 f4		bne $20ee			bne 	_TOKDOutput
.20fa					_TOKDExit:
.20fa	60		rts				rts
.20fb					TOKDSpacing:
.20fb	20 c8 24	jsr $24c8			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.20fe	90 0d		bcc $210d			bcc 	TOKDSExit
.2100					TOKDSpaceLastAlpha:
.2100	ad 1a 05	lda $051a			lda 	TOKLastCharacter			; and last character also alphanumeric
.2103	20 c8 24	jsr $24c8			jsr 	TOKIsIdentifierElement
.2106	90 05		bcc $210d			bcc 	TOKDSExit
.2108	a9 20		lda #$20			lda 	#" " 						; we need a space.
.210a	20 01 20	jsr $2001			jsr 	TOKDOutput
.210d					TOKDSExit:
.210d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.210e					PGMDeleteLine:
.210e	20 c1 21	jsr $21c1			jsr 	PGMEndProgram 				; end of program into zTemp0
.2111	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2113	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.2116	85 27		sta $27				sta 	zTemp1+1
.2118					_PGMDLoop:
.2118	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.211a	38		sec				sec
.211b	f0 3a		beq $2157			beq 	_PGMDExit
.211d	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.211f	b1 26		lda ($26),y			lda 	(zTemp1),y
.2121	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2124	d0 08		bne $212e			bne 	_PGMDNext
.2126	c8		iny				iny
.2127	b1 26		lda ($26),y			lda 	(zTemp1),y
.2129	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.212c	f0 0d		beq $213b			beq 	_PGMDDelete
.212e					_PGMDNext:
.212e	18		clc				clc
.212f	b2 26		lda ($26)			lda 	(zTemp1)
.2131	65 26		adc $26				adc 	zTemp1
.2133	85 26		sta $26				sta 	zTemp1
.2135	90 e1		bcc $2118			bcc 	_PGMDLoop
.2137	e6 27		inc $27				inc 	zTemp1+1
.2139	80 dd		bra $2118			bra 	_PGMDLoop
.213b					_PGMDDelete:
.213b	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.213d	a8		tay				tay
.213e					_PGMDCopy:
.213e	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.2140	92 26		sta ($26)			sta 	(zTemp1)
.2142	a5 26		lda $26				lda 	zTemp1 						; reached the end ?
.2144	c5 24		cmp $24				cmp 	zTemp0
.2146	d0 07		bne $214f			bne 	_PGMDNext2
.2148	a5 27		lda $27				lda 	zTemp1+1
.214a	c5 25		cmp $25				cmp 	zTemp0+1
.214c	18		clc				clc
.214d	f0 08		beq $2157			beq 	_PGMDExit
.214f					_PGMDNext2:
.214f	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.2151	d0 eb		bne $213e			bne 	_PGMDCopy
.2153	e6 27		inc $27				inc 	zTemp1+1
.2155	80 e7		bra $213e			bra 	_PGMDCopy
.2157					_PGMDExit:
.2157	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.2158					PGMInsertLine:
.2158	20 c1 21	jsr $21c1			jsr 	PGMEndProgram 				; end of program into zTemp0
.215b	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.215d	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.2160	85 27		sta $27				sta 	zTemp1+1
.2162					_PGMILoop:
.2162	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.2164	f0 1c		beq $2182			beq 	_PGMIInsert
.2166	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.2168	b1 26		lda ($26),y			lda 	(zTemp1),y
.216a	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.216d	c8		iny				iny
.216e	b1 26		lda ($26),y			lda 	(zTemp1),y
.2170	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.2173	b0 0d		bcs $2182			bcs 	_PGMIInsert 				; insert here.
.2175	18		clc				clc
.2176	b2 26		lda ($26)			lda 	(zTemp1)
.2178	65 26		adc $26				adc 	zTemp1
.217a	85 26		sta $26				sta 	zTemp1
.217c	90 e4		bcc $2162			bcc 	_PGMILoop
.217e	e6 27		inc $27				inc 	zTemp1+1
.2180	80 e0		bra $2162			bra 	_PGMILoop
.2182					_PGMIInsert:
.2182	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.2185					_PGMIInsertLoop:
.2185	b2 24		lda ($24)			lda 	(zTemp0)
.2187	91 24		sta ($24),y			sta 	(zTemp0),y
.2189	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.218b	c5 24		cmp $24				cmp 	zTemp0
.218d	d0 06		bne $2195			bne 	_PGMINext
.218f	a5 27		lda $27				lda 	zTemp1+1
.2191	c5 25		cmp $25				cmp 	zTemp0+1
.2193	f0 0a		beq $219f			beq 	_PGMIInserted
.2195					_PGMINext:
.2195	a5 24		lda $24				lda 	zTemp0
.2197	d0 02		bne $219b			bne 	_PGMINoBorrow
.2199	c6 25		dec $25				dec 	zTemp0+1
.219b					_PGMINoBorrow:
.219b	c6 24		dec $24				dec 	zTemp0
.219d	80 e6		bra $2185			bra 	_PGMIInsertLoop
.219f					_PGMIInserted:
.219f	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.21a1					_PGMICopyLoop:
.21a1	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.21a4	91 26		sta ($26),y			sta 	(zTemp1),y
.21a6	c8		iny				iny
.21a7	cc 00 04	cpy $0400			cpy 	TOKLineSize
.21aa	d0 f5		bne $21a1			bne 	_PGMICopyLoop
.21ac	18		clc				clc
.21ad	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.21ae					PGMSetBaseAddress:
.21ae	8e 1c 05	stx $051c			stx 	PGMBaseHigh 				; use memory from here
.21b1	8c 1d 05	sty $051d			sty 	PGMEndMemoryHigh 			; to here.
.21b4	60		rts				rts
.21b5					PGMNewProgram:
.21b5	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.21b7	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.21ba	85 25		sta $25				sta 	zTemp0+1
.21bc	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.21be	92 24		sta ($24)			sta 	(zTemp0)
.21c0	60		rts				rts
.21c1					PGMEndProgram:
.21c1	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.21c3	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.21c6	85 25		sta $25				sta 	zTemp0+1
.21c8					_PGMEPLoop:
.21c8	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.21ca	f0 0b		beq $21d7			beq 	_PGMEPExit
.21cc	18		clc				clc 								; no, advance to next
.21cd	65 24		adc $24				adc 	zTemp0
.21cf	85 24		sta $24				sta 	zTemp0
.21d1	90 f5		bcc $21c8			bcc 	_PGMEPLoop
.21d3	e6 25		inc $25				inc 	zTemp0+1
.21d5	80 f1		bra $21c8			bra 	_PGMEPLoop
.21d7					_PGMEPExit:
.21d7	60		rts				rts
.051c					PGMBaseHigh:
>051c							.fill 	1
.051d					PGMEndMemoryHigh:
>051d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.21d8					TOKResetElement:
.21d8	9c 1e 05	stz $051e			stz 	TOKElement
.21db	60		rts				rts
.21dc					TOKWriteElement:
.21dc	da		phx				phx
.21dd	ae 1e 05	ldx $051e			ldx 	TOKElement
.21e0	9d 1f 05	sta $051f,x			sta 	TOKElementText,x
.21e3	9e 20 05	stz $0520,x			stz 	TOKElementText+1,x
.21e6	fa		plx				plx
.21e7	ee 1e 05	inc $051e			inc 	TOKElement
.21ea	60		rts				rts
.051e					TOKElement:
>051e							.fill 	1
.051f					TOKElementText:
>051f							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.21eb					TOKTokeniseConstant:
.21eb	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.21ed	48		pha				pha 								; save on stack
.21ee	29 c0		and #$c0			and 	#$C0
.21f0	05 09		ora $09				ora 	IFR0+IM1
.21f2	05 0a		ora $0a				ora 	IFR0+IM2
.21f4	f0 10		beq $2206			beq 	_TTCLess
.21f6	da		phx				phx
.21f7	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.21f9					_TTCShiftRight:
.21f9	46 0a		lsr $0a				lsr 	IFR0+IM2
.21fb	66 09		ror $09				ror 	IFR0+IM1
.21fd	66 08		ror $08				ror 	IFR0+IM0
.21ff	ca		dex				dex
.2200	d0 f7		bne $21f9			bne 	_TTCShiftRight
.2202	fa		plx				plx
.2203	20 eb 21	jsr $21eb			jsr 	TOKTokeniseConstant
.2206					_TTCLess:
.2206	68		pla				pla
.2207	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.2209	20 a9 22	jsr $22a9			jsr 	TOKWriteA
.220c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.220d					TOKTokeniseDecimals:
.220d	20 bc 22	jsr $22bc			jsr 	TOKGetNext 					; consume the .
.2210	20 35 24	jsr $2435			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2213	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.2215	20 a9 22	jsr $22a9			jsr 	TOKWriteA
.2218	20 1d 22	jsr $221d			jsr 	TOKOutputElementBuffer 		; then the buffer
.221b	18		clc				clc
.221c	60		rts				rts
.221d					TOKOutputElementBuffer:
.221d	ad 1e 05	lda $051e			lda 	TOKElement 					; get count and write that
.2220	20 a9 22	jsr $22a9			jsr 	TOKWriteA
.2223	a8		tay				tay 								; put in Y
.2224	f0 0c		beq $2232			beq 	_TOEExit 					; exit if empty which is okay.
.2226	a2 01		ldx #$01			ldx 	#1
.2228					_TOELoop:
.2228	bd 1e 05	lda $051e,x			lda 	TOKElement,x
.222b	20 a9 22	jsr $22a9			jsr 	TOKWriteA
.222e	e8		inx				inx
.222f	88		dey				dey
.2230	d0 f6		bne $2228			bne 	_TOELoop
.2232					_TOEExit:
.2232	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.2233					TOKTokenise:
.2233	8c 1f 06	sty $061f			sty 	TOKDataSource+1 			; save source routine pointer
.2236	8e 1e 06	stx $061e			stx 	TOKDataSource
.2239	a9 01		lda #$01			lda 	#1 							; set first element flag.
.223b	8d 20 06	sta $0620			sta 	TOKIsFirstElement
.223e	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.2240	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.2243	9c 01 04	stz $0401			stz 	TOKLineNumber
.2246	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2249					_TOKMainLoop:
.2249	20 b8 22	jsr $22b8			jsr 	TOKGet 						; what follows.
.224c	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.224e	f0 50		beq $22a0			beq 	_TOKExit
.2250	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.2252	d0 05		bne $2259			bne 	_TOKElement
.2254	20 bc 22	jsr $22bc			jsr 	TOKGetNext
.2257	80 f0		bra $2249			bra 	_TOKMainLoop
.2259					_TOKElement:
.2259	20 bc 24	jsr $24bc			jsr 	TOKIsDigit 					; is it 0..9
.225c	90 16		bcc $2274			bcc 	_TOKNotDigit
.225e	20 0c 24	jsr $240c			jsr 	TOKTokeniseInteger 			; get integer
.2261	b0 44		bcs $22a7			bcs 	_TOKFail 					; did it fail ?
.2263	9c 20 06	stz $0620			stz 	TOKIsFirstElement 			; clear first element flag
.2266	20 b8 22	jsr $22b8			jsr 	TOKGet 						; what follows ?
.2269	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.226b	d0 dc		bne $2249			bne 	_TOKMainLoop
.226d	20 0d 22	jsr $220d			jsr 	TOKTokeniseDecimals
.2270	b0 35		bcs $22a7			bcs 	_TOKFail
.2272	80 d5		bra $2249			bra 	_TOKMainLoop
.2274					_TOKNotDigit:
.2274	9c 20 06	stz $0620			stz 	TOKIsFirstElement 			; clear first element flag
.2277	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.2279	d0 07		bne $2282			bne 	_TOKNotHex
.227b	20 12 23	jsr $2312			jsr 	TOKTokeniseHexadecimal
.227e	b0 27		bcs $22a7			bcs 	_TOKFail
.2280	80 c7		bra $2249			bra 	_TOKMainLoop
.2282					_TOKNotHex:
.2282	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.2284	d0 07		bne $228d			bne 	_TOKNotString
.2286	20 83 24	jsr $2483			jsr 	TOKTokeniseString
.2289	b0 1c		bcs $22a7			bcs 	_TOKFail
.228b	80 bc		bra $2249			bra 	_TOKMainLoop
.228d					_TOKNotString:
.228d	20 d5 24	jsr $24d5			jsr 	TOKIsAlpha 					; identifier ?
.2290	b0 07		bcs $2299			bcs 	_TOKIdentifier
.2292	20 49 24	jsr $2449			jsr 	TOKTokenisePunctuation 		; punctuation
.2295	b0 10		bcs $22a7			bcs 	_TOKFail
.2297	80 b0		bra $2249			bra 	_TOKMainLoop
.2299					_TOKIdentifier:
.2299	20 4f 23	jsr $234f			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.229c	b0 09		bcs $22a7			bcs 	_TOKFail
.229e	80 a9		bra $2249			bra 	_TOKMainLoop
.22a0					_TOKExit:
.22a0	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.22a2	20 a9 22	jsr $22a9			jsr 	TOKWriteA
.22a5	18		clc				clc									; return with carry set.
.22a6	60		rts				rts
.22a7					_TOKFail:
.22a7	38		sec				sec
.22a8	60		rts				rts
.22a9					TOKWriteA:
.22a9	da		phx				phx
.22aa	ae 00 04	ldx $0400			ldx 	TOKLineSize
.22ad	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.22b0	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.22b3	fa		plx				plx
.22b4	ee 00 04	inc $0400			inc 	TOKLineSize
.22b7	60		rts				rts
.22b8					TOKGet:
.22b8	18		clc				clc
.22b9	6c 1e 06	jmp ($061e)			jmp 	(TOKDataSource)
.22bc					TOKGetNext:
.22bc	38		sec				sec
.22bd	6c 1e 06	jmp ($061e)			jmp 	(TOKDataSource)
.061e					TOKDataSource:
>061e							.fill 	2
.0620					TOKIsFirstElement:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.22c0					TOKFindToken:
.22c0	a2 aa		ldx #$aa			ldx 	#StandardTokens & $FF 		; do this table
.22c2	a0 1c		ldy #$1c			ldy 	#StandardTokens >> 8
.22c4	20 dc 22	jsr $22dc			jsr 	TOKFindTokenXY 				; find it, or not
.22c7	b0 0d		bcs $22d6			bcs 	_TOKFound1
.22c9	a2 2b		ldx #$2b			ldx 	#AlternateTokens & $FF 		; do the alternate table
.22cb	a0 1e		ldy #$1e			ldy 	#AlternateTokens >> 8
.22cd	20 dc 22	jsr $22dc			jsr 	TOKFindTokenXY 				; find it, or not
.22d0	90 08		bcc $22da			bcc 	_TOKFTFail 					; not ....
.22d2	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.22d4	38		sec				sec
.22d5	60		rts				rts
.22d6					_TOKFound1:
.22d6	a2 00		ldx #$00			ldx 	#0
.22d8	38		sec				sec
.22d9	60		rts				rts
.22da					_TOKFTFail
.22da	18		clc				clc
.22db	60		rts				rts
.22dc					TOKFindTokenXY:
.22dc	86 24		stx $24				stx 	zTemp0 						; save token table address
.22de	84 25		sty $25				sty 	zTemp0+1
.22e0	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.22e2	8d 21 06	sta $0621			sta 	TOKCurrent
.22e5					_TOKFindLoop:
.22e5	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.22e7	18		clc				clc 		 						; clear carry in case of fail
.22e8	30 17		bmi $2301			bmi 	_TOKExit 					; end of table, fail, so return CC.
.22ea	cd 1e 05	cmp $051e			cmp 	TOKElement 					; compare against the element length
.22ed	d0 13		bne $2302			bne 	_TOKNext 					; different, try next.
.22ef	aa		tax				tax 								; number of chars to compare.
.22f0	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.22f2					_TOKCompare:
.22f2	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.22f4	d9 1e 05	cmp $051e,y			cmp 	TOKElementText-1,y
.22f7	d0 09		bne $2302			bne 	_TOKNext 					; different ? try next
.22f9	c8		iny				iny 								; compare next two
.22fa	ca		dex				dex
.22fb	d0 f5		bne $22f2			bne 	_TOKCompare 				; until done X characters.
.22fd	38		sec				sec
.22fe	ad 21 06	lda $0621			lda 	TOKCurrent 					; return current ID.
.2301					_TOKExit:
.2301	60		rts				rts
.2302					_TOKNext:
.2302	ee 21 06	inc $0621			inc 	TOKCurrent 					; increment token #
.2305	38		sec				sec 								; add length+1 to ptr
.2306	b2 24		lda ($24)			lda 	(zTemp0)
.2308	65 24		adc $24				adc 	zTemp0
.230a	85 24		sta $24				sta 	zTemp0
.230c	90 d7		bcc $22e5			bcc 	_TOKFindLoop
.230e	e6 25		inc $25				inc 	zTemp0+1
.2310	80 d3		bra $22e5			bra 	_TOKFindLoop
.0621					TOKCurrent:
>0621							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.2312					TOKTokeniseHexadecimal:
.2312	20 bc 22	jsr $22bc			jsr 	TOKGetNext 					; consume the $
.2315	a2 08		ldx #$08			ldx 	#IFR0
.2317	20 68 34	jsr $3468			jsr 	IFloatSetZero 				; set R0 = 0
.231a					_TTHLoop:
.231a	20 b8 22	jsr $22b8			jsr 	TOKGet 						; keep getting and copying while numeric.
.231d	20 e2 24	jsr $24e2			jsr 	TOKIsHexadecimal
.2320	90 23		bcc $2345			bcc 	_TTHDone
.2322	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.2324	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.2327	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.232a	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.232d	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.2330	20 bc 22	jsr $22bc			jsr 	TOKGetNext
.2333	20 a6 24	jsr $24a6			jsr 	TOKToUpper 					; make U/C
.2336	38		sec				sec 								; convert to decimal.
.2337	e9 30		sbc #$30			sbc 	#48
.2339	c9 0a		cmp #$0a			cmp 	#10
.233b	90 02		bcc $233f			bcc 	_TTHNotAlpha
.233d	e9 07		sbc #$07			sbc 	#7
.233f					_TTHNotAlpha:
.233f	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2341	85 08		sta $08				sta 	IFR0+IM0
.2343	80 d5		bra $231a			bra 	_TTHLoop
.2345					_TTHDone:
.2345	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.2347	20 a9 22	jsr $22a9			jsr 	TOKWriteA
.234a	20 eb 21	jsr $21eb			jsr 	TOKTokeniseConstant 		; write integer out.
.234d	18		clc				clc
.234e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.234f					TOKTokeniseIdentifier:
.234f	20 d8 21	jsr $21d8			jsr 	TOKResetElement 			; extract an identifier
.2352					_TOKGetIdentifier:
.2352	20 b8 22	jsr $22b8			jsr 	TOKGet
.2355	20 a6 24	jsr $24a6			jsr 	TOKToUpper
.2358	20 c8 24	jsr $24c8			jsr 	TOKIsIdentifierElement
.235b	90 08		bcc $2365			bcc 	_TOKEndIdent
.235d	20 dc 21	jsr $21dc			jsr		TOKWriteElement
.2360	20 bc 22	jsr $22bc			jsr 	TOKGetNext
.2363	80 ed		bra $2352			bra 	_TOKGetIdentifier
.2365					_TOKEndIdent:
.2365	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.2367	d0 06		bne $236f			bne 	_TOKNotString
.2369	20 dc 21	jsr $21dc			jsr 	TOKWriteElement 			; add it
.236c	20 bc 22	jsr $22bc			jsr 	TOKGetNext 					; consume it
.236f					_TOKNotString:
.236f	20 b8 22	jsr $22b8			jsr 	TOKGet 						; finally check for (
.2372	c9 28		cmp #$28			cmp 	#"("
.2374	d0 06		bne $237c			bne 	_TOKNoArray
.2376	20 dc 21	jsr $21dc			jsr 	TOKWriteElement 			; add it
.2379	20 bc 22	jsr $22bc			jsr 	TOKGetNext 					; consume it
.237c					_TOKNoArray:
.237c	20 c0 22	jsr $22c0			jsr 	TOKFindToken 				; find it
.237f	90 18		bcc $2399			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2381	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2383	f0 0f		beq $2394			beq 	_TOKComment 				; yes, do comment code.
.2385	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.2387	d0 06		bne $238f			bne 	_TOKNoShift
.2389	48		pha				pha 								; write the shift.
.238a	8a		txa				txa
.238b	20 a9 22	jsr $22a9			jsr 	TOKWriteA
.238e	68		pla				pla
.238f					_TOKNoShift:
.238f	20 a9 22	jsr $22a9			jsr 	TOKWriteA 					; write the main token.
.2392	18		clc				clc
.2393	60		rts				rts
.2394					_TOKComment:
.2394	20 d9 23	jsr $23d9			jsr 	TOKDoComment
.2397	18		clc				clc
.2398	60		rts				rts
.2399					_TOKIsVariable:
.2399	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.239b					_TOKOutputBuffer:
.239b	bd 1f 05	lda $051f,x			lda 	TOKElementText,x 			; output it translated.
.239e	20 c7 23	jsr $23c7			jsr 	TOKTranslateIdentifier
.23a1	20 a9 22	jsr $22a9			jsr 	TOKWriteA
.23a4	e8		inx				inx
.23a5	bd 1f 05	lda $051f,x			lda 	TOKElementText,x
.23a8	20 c8 24	jsr $24c8			jsr 	TOKIsIdentifierElement
.23ab	b0 ee		bcs $239b			bcs 	_TOKOutputBuffer
.23ad	a8		tay				tay 								; last char in Y
.23ae	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.23b0	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.23b2	f0 0e		beq $23c2			beq 	_TOKIVExit
.23b4	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.23b6	d0 04		bne $23bc			bne 	_TOKIVCheckArray 			; no, check for (
.23b8	1a		inc a				inc 	a 							; token is $7D
.23b9	bc 20 05	ldy $0520,x			ldy 	TOKElementText+1,x 			; get next one.
.23bc					_TOKIVCheckArray:
.23bc	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.23be	d0 02		bne $23c2			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.23c0	1a		inc a				inc 	a
.23c1	1a		inc a				inc 	a
.23c2					_TOKIVExit:
.23c2	20 a9 22	jsr $22a9			jsr 	TOKWriteA 					; ending token
.23c5	18		clc				clc
.23c6	60		rts				rts
.23c7					TOKTranslateIdentifier:
.23c7	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.23c9	f0 0b		beq $23d6			beq 	_TTI64
.23cb	38		sec				sec
.23cc	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.23ce	10 03		bpl $23d3			bpl 	_TTIExit
.23d0	18		clc				clc 								; map 09 onto 26-35
.23d1	69 2b		adc #$2b			adc 	#"A"-"0"+26
.23d3					_TTIExit:
.23d3	09 40		ora #$40			ora 	#$40 						; correct range.
.23d5	60		rts				rts
.23d6	a9 64		lda #$64	_TTI64:	lda 	#$64
.23d8	60		rts				rts
.23d9					TOKDoComment:
.23d9	20 a9 22	jsr $22a9			jsr 	TOKWriteA					; output the token.
.23dc					_TOKSkipSpaces:
.23dc	20 b8 22	jsr $22b8			jsr 	TOKGet 						; skip over spaces
.23df	c9 20		cmp #$20			cmp 	#' '
.23e1	d0 05		bne $23e8			bne 	_TOKEndSpaces
.23e3	20 bc 22	jsr $22bc			jsr 	TOKGetNext
.23e6	80 f4		bra $23dc			bra 	_TOKSkipSpaces
.23e8					_TOKEndSpaces:
.23e8	48		pha				pha 								; save it
.23e9	68		pla				pla
.23ea	f0 04		beq $23f0			beq 	_TOKDCExit 					; end of line.
.23ec	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.23ee	d0 01		bne $23f1			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.23f0					_TOKDCExit:
.23f0	60		rts				rts
.23f1					_TOKDCDoLine:
.23f1	20 d8 21	jsr $21d8			jsr 	TOKResetElement 			; start getting the string
.23f4					_TOKDCLoop:
.23f4	20 b8 22	jsr $22b8			jsr 	TOKGet 						; check EOL
.23f7	c9 00		cmp #$00			cmp 	#0
.23f9	f0 08		beq $2403			beq 	_TOKDCEndComment
.23fb	20 bc 22	jsr $22bc			jsr 	TOKGetNext 					; get and consume
.23fe	20 dc 21	jsr $21dc			jsr 	TOKWriteElement
.2401	80 f1		bra $23f4			bra 	_TOKDCLoop
.2403					_TOKDCEndComment:
.2403	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2405	20 a9 22	jsr $22a9			jsr 	TOKWriteA
.2408	20 1d 22	jsr $221d			jsr 	TOKOutputElementBuffer
.240b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.240c					TOKTokeniseInteger:
.240c	20 35 24	jsr $2435			jsr 	TOKExtractInteger 			; pull an integer out as text.
.240f	a2 1f		ldx #$1f			ldx 	#TOKElementText & $FF
.2411	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2413	ad 1e 05	lda $051e			lda		TOKElement
.2416	20 cc 32	jsr $32cc			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2419	ad 20 06	lda $0620			lda 	TOKIsFirstElement 			; first element ?
.241c	f0 12		beq $2430			beq 	_TOKNotLineNumber
.241e	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.2420	d0 0c		bne $242e			bne 	_TOKBadLineNumeber
.2422	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2424	8d 01 04	sta $0401			sta 	TOKLineNumber
.2427	a5 09		lda $09				lda 	IFR0+IM1
.2429	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.242c	18		clc				clc
.242d	60		rts				rts
.242e					_TOKBadLineNumeber:
.242e	38		sec				sec
.242f	60		rts				rts
.2430					_TOKNotLineNumber:
.2430	20 eb 21	jsr $21eb			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2433	18		clc				clc
.2434	60		rts				rts
.2435					TOKExtractInteger:
.2435	20 d8 21	jsr $21d8			jsr 	TOKResetElement 			; restart
.2438					_TTILoop:
.2438	20 b8 22	jsr $22b8			jsr 	TOKGet 						; keep getting and copying while numeric.
.243b	20 bc 24	jsr $24bc			jsr 	TOKIsDigit
.243e	90 08		bcc $2448			bcc 	_TOKEIExit
.2440	20 dc 21	jsr $21dc			jsr 	TOKWriteElement
.2443	20 bc 22	jsr $22bc			jsr 	TOKGetNext
.2446	80 f0		bra $2438			bra 	_TTILoop
.2448					_TOKEIExit:
.2448	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2449					TOKTokenisePunctuation:
.2449	20 d8 21	jsr $21d8			jsr 	TOKResetElement 			; copy first punctuation character into element.
.244c	20 bc 22	jsr $22bc			jsr 	TOKGetNext
.244f	20 dc 21	jsr $21dc			jsr 	TOKWriteElement
.2452	20 b8 22	jsr $22b8			jsr 	TOKGet 						; what follows ?
.2455	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2457	f0 10		beq $2469			beq 	_TTPOne
.2459	20 cc 24	jsr $24cc			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.245c	b0 0b		bcs $2469			bcs 	_TTPOne 					; these speed things up a bit.
.245e	20 dc 21	jsr $21dc			jsr 	TOKWriteElement 			; this is what we will search for.
.2461	20 c0 22	jsr $22c0			jsr 	TOKFindToken
.2464	b0 0a		bcs $2470			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2466	ce 1e 05	dec $051e			dec 	TOKElement 					; make it a single character
.2469					_TTPOne:
.2469	20 c0 22	jsr $22c0			jsr 	TOKFindToken 				; look for one character punctuation
.246c	b0 07		bcs $2475			bcs 	_TTPOutputExit 				; we found it
.246e	38		sec				sec 								; not recognised.
.246f	60		rts				rts
.2470					_TTPConsumeExit:
.2470	48		pha				pha
.2471	20 bc 22	jsr $22bc			jsr 	TOKGetNext 					; get the 2nd char out.
.2474	68		pla				pla
.2475					_TTPOutputExit:
.2475	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.2477	f0 05		beq $247e			beq 	_TTPComment
.2479	20 a9 22	jsr $22a9			jsr  	TOKWriteA 					; write token out
.247c	18		clc				clc
.247d	60		rts				rts
.247e					_TTPComment:
.247e	20 d9 23	jsr $23d9			jsr 	TOKDoComment
.2481	18		clc				clc
.2482	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2483					TOKTokeniseString:
.2483	20 bc 22	jsr $22bc			jsr 	TOKGetNext 					; consume the "
.2486	20 d8 21	jsr $21d8			jsr 	TOKResetElement 			; start getting the string
.2489					_TOKTSLoop:
.2489	20 b8 22	jsr $22b8			jsr 	TOKGet 						; check EOL
.248c	c9 00		cmp #$00			cmp 	#0
.248e	f0 0c		beq $249c			beq 	_TOKTSExit
.2490	20 bc 22	jsr $22bc			jsr 	TOKGetNext 					; get and consume
.2493	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2495	f0 05		beq $249c			beq 	_TOKTSExit
.2497	20 dc 21	jsr $21dc			jsr 	TOKWriteElement
.249a	80 ed		bra $2489			bra 	_TOKTSLoop
.249c					_TOKTSExit:
.249c	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.249e	20 a9 22	jsr $22a9			jsr 	TOKWriteA
.24a1	20 1d 22	jsr $221d			jsr 	TOKOutputElementBuffer
.24a4	18		clc				clc
.24a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.24a6					TOKToUpper:
.24a6	c9 61		cmp #$61			cmp 	#"a"
.24a8	90 06		bcc $24b0			bcc 	_TTUNotLower
.24aa	c9 7b		cmp #$7b			cmp 	#"z"+1
.24ac	b0 02		bcs $24b0			bcs 	_TTUNotLower
.24ae	49 20		eor #$20			eor 	#$20
.24b0					_TTUNotLower:
.24b0	60		rts				rts
.24b1					TOKToLower:
.24b1	c9 41		cmp #$41			cmp 	#"A"
.24b3	90 06		bcc $24bb			bcc 	_TTUNotUpper
.24b5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.24b7	b0 02		bcs $24bb			bcs 	_TTUNotUpper
.24b9	49 20		eor #$20			eor 	#$20
.24bb					_TTUNotUpper:
.24bb	60		rts				rts
.24bc					TOKIsDigit:
.24bc	c9 30		cmp #$30			cmp 	#"0"
.24be	90 06		bcc $24c6			bcc 	TOKFail
.24c0	c9 3a		cmp #$3a			cmp 	#"9"+1
.24c2	b0 02		bcs $24c6			bcs 	TOKFail
.24c4					TOKSucceed:
.24c4	38		sec				sec
.24c5	60		rts				rts
.24c6					TOKFail:
.24c6	18		clc				clc
.24c7	60		rts				rts
.24c8					TOKIsIdentifierElement:
.24c8	c9 5f		cmp #$5f			cmp 	#"_"
.24ca	f0 f8		beq $24c4			beq 	TOKSucceed 					; else fall through to alphanumeric
.24cc					TOKIsAlphaNumeric:
.24cc	20 d5 24	jsr $24d5			jsr 	TOKIsAlpha
.24cf	b0 f3		bcs $24c4			bcs 	TOKSucceed
.24d1	20 bc 24	jsr $24bc			jsr 	TOKIsDigit
.24d4	60		rts				rts
.24d5					TOKIsAlpha:
.24d5	20 a6 24	jsr $24a6			jsr 	TOKToUpper
.24d8	c9 41		cmp #$41			cmp 	#"A"
.24da	90 ea		bcc $24c6			bcc 	TOKFail
.24dc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.24de	b0 e6		bcs $24c6			bcs 	TOKFail
.24e0	80 e2		bra $24c4			bra 	TOKSucceed
.24e2					TOKIsHexadecimal:
.24e2	20 bc 24	jsr $24bc			jsr		TOKIsDigit
.24e5	b0 dd		bcs $24c4			bcs 	TOKSucceed
.24e7	20 d5 24	jsr $24d5			jsr 	TOKIsAlpha
.24ea	90 da		bcc $24c6			bcc 	TOKFail
.24ec	c9 47		cmp #$47			cmp 	#"F"+1
.24ee	b0 d6		bcs $24c6			bcs 	TOKFail
.24f0	80 d2		bra $24c4			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.24f2					Command_CALL:
.24f2	a9 42		lda #$42			lda 	#STK_CALL
.24f4	20 e4 29	jsr $29e4			jsr 	StackOpen
.24f7	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.24f9	29 c0		and #$c0			and 	#$C0
.24fb	c9 40		cmp #$40			cmp 	#$40
.24fd	d0 29		bne $2528			bne 	_CCSyntax
.24ff	20 ab 2d	jsr $2dab			jsr 	VARGetInfo 					; get the information
.2502	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 				; check right bracket follows.
.2505	20 5d 2d	jsr $2d5d			jsr 	VARFind 					; exists ?
.2508	90 21		bcc $252b			bcc 	_CCUnknown
.250a	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.250c	85 24		sta $24				sta 	zTemp0
.250e	20 17 2a	jsr $2a17			jsr 	STKSaveCodePosition 		; save return address on stack.
.2511	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2513	b1 24		lda ($24),y			lda 	(zTemp0),y
.2515	c9 ff		cmp #$ff			cmp 	#$FF
.2517	d0 12		bne $252b			bne 	_CCUnknown
.2519	88		dey				dey 								; get Y offset to stack
.251a	b1 24		lda ($24),y			lda 	(zTemp0),y
.251c	48		pha				pha
.251d	88		dey				dey 								; get address
.251e	b1 24		lda ($24),y			lda 	(zTemp0),y
.2520	85 19		sta $19				sta 	codePtr+1
.2522	b2 24		lda ($24)			lda 	(zTemp0)
.2524	85 18		sta $18				sta 	codePtr
.2526	7a		ply				ply 								; restore Y
.2527	60		rts				rts
.2528					_CCSyntax:
.2528	4c f2 27	jmp $27f2		jmp	ErrorV_syntax
.252b					_CCUnknown:
.252b	4c 67 29	jmp $2967		jmp	ErrorV_unknown
.252e					Command_ENDPROC:
.252e	a9 42		lda #$42			lda 	#STK_CALL
.2530	20 0f 2a	jsr $2a0f			jsr 	StackCheckFrame
.2533	20 29 2a	jsr $2a29			jsr 	STKLoadCodePosition 		; return
.2536	20 01 2a	jsr $2a01			jsr 	StackClose
.2539	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.253a					Command_DO:
.253a	a9 22		lda #$22			lda 	#STK_DO
.253c	20 e4 29	jsr $29e4			jsr 	StackOpen
.253f	20 17 2a	jsr $2a17			jsr 	STKSaveCodePosition 		; save loop position
.2542	60		rts				rts
.2543					Command_EXIT:
.2543	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2545	20 0f 2a	jsr $2a0f			jsr 	StackCheckFrame
.2548	20 01 2a	jsr $2a01			jsr 	StackClose 					; close it
.254b	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.254d	aa		tax				tax
.254e	20 02 27	jsr $2702			jsr 	ScanForward
.2551	60		rts				rts
.2552					Command_LOOP:
.2552	a9 22		lda #$22			lda 	#STK_DO
.2554	20 0f 2a	jsr $2a0f			jsr 	StackCheckFrame
.2557	20 29 2a	jsr $2a29			jsr 	STKLoadCodePosition 		; loop back
.255a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.255b					Command_FOR:
.255b	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.255d	20 e4 29	jsr $29e4			jsr 	StackOpen
.2560	20 6b 13	jsr $136b			jsr 	CommandLET 					; do "I = 1" bit
.2563	5a		phy				phy 								; save variable address to +4,+5
.2564	a0 04		ldy #$04			ldy 	#4
.2566	a5 24		lda $24				lda 	zTemp0
.2568	91 2c		sta ($2c),y			sta 	(basicStack),y
.256a	c8		iny				iny
.256b	a5 25		lda $25				lda 	zTemp0+1
.256d	91 2c		sta ($2c),y			sta 	(basicStack),y
.256f	7a		ply				ply
.2570	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2572	20 db 29	jsr $29db			jsr 	ERRCheckA
.2575	20 03 18	jsr $1803			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2578	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.257a	a2 08		ldx #$08			ldx 	#IFR0
.257c	20 d1 25	jsr $25d1			jsr 	CFSaveR0X
.257f	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2581	c9 91		cmp #$91			cmp 	#PR_STEP
.2583	d0 06		bne $258b			bne 	_CFStep1
.2585	c8		iny				iny 								; consume step
.2586	20 03 18	jsr $1803			jsr 	EXPEvalNumber 				; evaluate STEP
.2589	80 24		bra $25af			bra 	_CFWriteStep
.258b					_CFStep1:
.258b	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.258d	a9 01		lda #$01			lda 	#1
.258f	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.2592	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2593	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2595	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2597	85 24		sta $24				sta 	zTemp0
.2599	c8		iny				iny
.259a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.259c	85 25		sta $25				sta 	zTemp0+1
.259e	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.25a0	b1 24		lda ($24),y			lda 	(zTemp0),y
.25a2	d0 0a		bne $25ae			bne 	_CFNotOptimised
.25a4	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.25a6	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25a8	d0 04		bne $25ae			bne 	_CFNotOptimised
.25aa	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.25ac	85 0b		sta $0b				sta 	IFR0+IExp
.25ae					_CFNotOptimised:
.25ae	7a		ply				ply
.25af					_CFWriteStep:
.25af	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.25b1	a9 06		lda #$06			lda 	#6
.25b3	20 d1 25	jsr $25d1			jsr 	CFSaveR0X
.25b6	20 17 2a	jsr $2a17			jsr 	STKSaveCodePosition 		; save loop position
.25b9	60		rts				rts
.25ba					CFLoadR0X:
.25ba	5a		phy				phy
.25bb	a8		tay				tay
.25bc	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25be	95 00		sta $00,x			sta 	IM0,x
.25c0	c8		iny				iny
.25c1	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25c3	95 01		sta $01,x			sta 	IM1,x
.25c5	c8		iny				iny
.25c6	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25c8	95 02		sta $02,x			sta 	IM2,x
.25ca	c8		iny				iny
.25cb	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25cd	95 03		sta $03,x			sta 	IExp,x
.25cf	7a		ply				ply
.25d0	60		rts				rts
.25d1					CFSaveR0X:
.25d1	5a		phy				phy
.25d2	a8		tay				tay
.25d3	b5 00		lda $00,x			lda 	IM0,x
.25d5	91 2c		sta ($2c),y			sta 	(basicStack),y
.25d7	c8		iny				iny
.25d8	b5 01		lda $01,x			lda 	IM1,x
.25da	91 2c		sta ($2c),y			sta 	(basicStack),y
.25dc	c8		iny				iny
.25dd	b5 02		lda $02,x			lda 	IM2,x
.25df	91 2c		sta ($2c),y			sta 	(basicStack),y
.25e1	c8		iny				iny
.25e2	b5 03		lda $03,x			lda 	IExp,x
.25e4	91 2c		sta ($2c),y			sta 	(basicStack),y
.25e6	7a		ply				ply
.25e7	60		rts				rts
.25e8					Command_NEXT:
.25e8	a9 37		lda #$37			lda 	#STK_FOR
.25ea	20 0f 2a	jsr $2a0f			jsr 	StackCheckFrame
.25ed	5a		phy				phy 								; check optimised loop
.25ee	a0 09		ldy #$09			ldy 	#9
.25f0	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25f2	7a		ply				ply
.25f3	0a		asl a				asl 	a
.25f4	b0 35		bcs $262b			bcs 	_CNOptimised
.25f6	20 63 26	jsr $2663			jsr 	_CNLoadValue 				; load index value to R0.
.25f9	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.25fb	a9 06		lda #$06			lda 	#6
.25fd	20 ba 25	jsr $25ba			jsr 	CFLoadR0X
.2600	20 60 2e	jsr $2e60			jsr 	IFloatAdd 					; add them together and write back.
.2603	20 86 26	jsr $2686			jsr 	_CNSaveValue
.2606	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2608	a2 0c		ldx #$0c			ldx 	#IFR1
.260a	20 ba 25	jsr $25ba			jsr 	CFLoadR0X
.260d	20 37 31	jsr $3137			jsr 	IFloatCompare 				; compare terminal vs current
.2610	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2612	20 61 34	jsr $3461			jsr 	IFloatCheckZero
.2615	f0 10		beq $2627			beq 	_CNLoopBack
.2617	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2619	5a		phy				phy
.261a	a0 09		ldy #$09			ldy 	#6+IExp
.261c	51 2c		eor ($2c),y			eor 	(basicStack),y
.261e	7a		ply				ply
.261f	29 40		and #$40			and 	#IFSign
.2621	f0 04		beq $2627			beq 	_CNLoopBack
.2623					_CNExitLoop:
.2623	20 01 2a	jsr $2a01			jsr 	StackClose		 			; return
.2626	60		rts				rts
.2627					_CNLoopBack:
.2627	20 29 2a	jsr $2a29			jsr 	STKLoadCodePosition 		; loop back
.262a	60		rts				rts
.262b					_CNOptimised:
.262b	5a		phy				phy
.262c	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.262e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2630	85 28		sta $28				sta 	zTemp2
.2632	c8		iny				iny
.2633	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2635	85 29		sta $29				sta 	zTemp2+1
.2637	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2639					_CNIncrement:
.2639	c8		iny				iny
.263a	b1 28		lda ($28),y			lda 	(zTemp2),y
.263c	1a		inc a				inc 	a
.263d	91 28		sta ($28),y			sta 	(zTemp2),y
.263f	f0 f8		beq $2639			beq 	_CNIncrement
.2641	18		clc				clc 								; point zTemp0 to terminal value
.2642	a5 2c		lda $2c				lda 	basicStack
.2644	69 0a		adc #$0a			adc 	#10
.2646	85 24		sta $24				sta 	zTemp0
.2648	a5 2d		lda $2d				lda 	basicStack+1
.264a	69 00		adc #$00			adc 	#0
.264c	85 25		sta $25				sta 	zTemp0+1
.264e	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2650	18		clc				clc 								; borrow 1, we want > not >=
.2651	b2 28		lda ($28)			lda 	(zTemp2)
.2653	f2 24		sbc ($24)			sbc 	(zTemp0)
.2655	b1 28		lda ($28),y			lda 	(zTemp2),y
.2657	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.2659	c8		iny				iny
.265a	b1 28		lda ($28),y			lda 	(zTemp2),y
.265c	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.265e	7a		ply				ply
.265f	b0 c2		bcs $2623			bcs 	_CNExitLoop
.2661	80 c4		bra $2627			bra 	_CNLoopBack
.2663					_CNLoadValue:
.2663	5a		phy				phy
.2664	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2666	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2668	85 28		sta $28				sta 	zTemp2
.266a	c8		iny				iny
.266b	b1 2c		lda ($2c),y			lda 	(basicStack),y
.266d	85 29		sta $29				sta 	zTemp2+1
.266f	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2671	b1 28		lda ($28),y			lda 	(zTemp2),y
.2673	85 08		sta $08				sta 	IFR0+IM0
.2675	c8		iny				iny
.2676	b1 28		lda ($28),y			lda 	(zTemp2),y
.2678	85 09		sta $09				sta 	IFR0+IM1
.267a	c8		iny				iny
.267b	b1 28		lda ($28),y			lda 	(zTemp2),y
.267d	85 0a		sta $0a				sta 	IFR0+IM2
.267f	c8		iny				iny
.2680	b1 28		lda ($28),y			lda 	(zTemp2),y
.2682	85 0b		sta $0b				sta 	IFR0+IExp
.2684	7a		ply				ply
.2685	60		rts				rts
.2686					_CNSaveValue:
.2686	5a		phy				phy
.2687	a0 00		ldy #$00			ldy 	#0
.2689	a5 08		lda $08				lda 	IFR0+IM0
.268b	91 28		sta ($28),y			sta 	(zTemp2),y
.268d	c8		iny				iny
.268e	a5 09		lda $09				lda 	IFR0+IM1
.2690	91 28		sta ($28),y			sta 	(zTemp2),y
.2692	c8		iny				iny
.2693	a5 0a		lda $0a				lda 	IFR0+IM2
.2695	91 28		sta ($28),y			sta 	(zTemp2),y
.2697	c8		iny				iny
.2698	a5 0b		lda $0b				lda 	IFR0+IExp
.269a	91 28		sta ($28),y			sta 	(zTemp2),y
.269c	7a		ply				ply
.269d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.269e					Command_GOSUB:
.269e	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; get line number
.26a1	a9 52		lda #$52			lda 	#STK_GOSUB
.26a3	20 e4 29	jsr $29e4			jsr 	StackOpen
.26a6	20 17 2a	jsr $2a17			jsr 	STKSaveCodePosition 		; save return address on stack.
.26a9	4c 8c 12	jmp $128c			jmp 	GotoR0
.26ac					Command_RETURN:
.26ac	a9 52		lda #$52			lda 	#STK_GOSUB
.26ae	20 0f 2a	jsr $2a0f			jsr 	StackCheckFrame
.26b1	20 29 2a	jsr $2a29			jsr 	STKLoadCodePosition 		; return
.26b4	20 01 2a	jsr $2a01			jsr 	StackClose
.26b7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.26b8					IfCommand:
.26b8	20 03 18	jsr $1803			jsr 	EXPEvalNumber 				; Get the if test.
.26bb	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.26bd	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.26bf	d0 0c		bne $26cd			bne 	_IfStructured 				; we still support it.
.26c1	c8		iny				iny 								; consume THEN
.26c2	a2 08		ldx #$08			ldx 	#IFR0
.26c4	20 61 34	jsr $3461			jsr 	IFloatCheckZero 			; is it zero
.26c7	f0 01		beq $26ca			beq 	_IfFail 					; if fail, go to next line
.26c9	60		rts				rts 								; if THEN just continue
.26ca					_IfFail:
.26ca	4c c4 15	jmp $15c4			jmp 	RUNEndOfLine
.26cd					_IfStructured:
.26cd	20 61 34	jsr $3461			jsr 	IFloatCheckZero 			; is it zero
.26d0	d0 07		bne $26d9			bne 	_IfExit 					; if not, then continue normally.
.26d2	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.26d4	a2 85		ldx #$85			ldx 	#PR_ENDIF
.26d6	20 02 27	jsr $2702			jsr 	ScanForward 				; and run from there
.26d9					_IfExit:
.26d9	60		rts				rts
.26da					ElseCode:
.26da	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.26dc	aa		tax				tax 								; so just go to the structure exit
.26dd	20 02 27	jsr $2702			jsr 	ScanForward
.26e0	60		rts				rts
.26e1					EndIf:
.26e1	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.26e2					Command_REPEAT:
.26e2	a9 02		lda #$02			lda 	#STK_REPEAT
.26e4	20 e4 29	jsr $29e4			jsr 	StackOpen
.26e7	20 17 2a	jsr $2a17			jsr 	STKSaveCodePosition 		; save loop position
.26ea	60		rts				rts
.26eb					Command_UNTIL:
.26eb	a9 02		lda #$02			lda 	#STK_REPEAT
.26ed	20 0f 2a	jsr $2a0f			jsr 	StackCheckFrame
.26f0	20 03 18	jsr $1803			jsr 	EXPEvalNumber 				; work out the test
.26f3	a2 08		ldx #$08			ldx 	#IFR0
.26f5	20 61 34	jsr $3461			jsr 	IFloatCheckZero 			; check if zero
.26f8	f0 04		beq $26fe			beq 	_CULoopBack 				; if so keep looping
.26fa	20 01 2a	jsr $2a01			jsr 	StackClose		 			; return
.26fd	60		rts				rts
.26fe					_CULoopBack:
.26fe	20 29 2a	jsr $2a29			jsr 	STKLoadCodePosition 		; loop back
.2701	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2702					ScanForward:
.2702	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.2704	86 25		stx $25				stx 	zTemp0+1
.2706	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.2708					_ScanForwardLoop:
.2708	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.270a	d0 0a		bne $2716			bne 	_ScanNoCheck
.270c	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.270e	c5 24		cmp $24				cmp 	zTemp0
.2710	f0 49		beq $275b			beq 	_ScanExit
.2712	c5 25		cmp $25				cmp 	zTemp0+1
.2714	f0 45		beq $275b			beq 	_ScanExit
.2716					_ScanNoCheck:
.2716	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2718	c8		iny				iny
.2719	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.271b	f0 37		beq $2754			beq		_ScanDataItem
.271d	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.271f	f0 33		beq $2754			beq 	_ScanDataItem
.2721	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2723	f0 1b		beq $2740			beq 	_ScanNextLine
.2725	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2727	d0 01		bne $272a			bne 	_ScanNoShift
.2729	c8		iny				iny
.272a					_ScanNoShift:
.272a	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.272c	b0 da		bcs $2708			bcs 	_ScanForwardLoop
.272e	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2730	90 d6		bcc $2708			bcc 	_ScanForwardLoop
.2732	aa		tax				tax 								; access the table to get the adjustment.
.2733	18		clc				clc
.2734	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.2736	7d 1e 1c	adc $1c1e,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2739	85 26		sta $26				sta 	zTemp1
.273b	10 cb		bpl $2708			bpl		_ScanForwardLoop 			; error if -ve ?
.273d	4c 7e 28	jmp $287e		jmp	ErrorV_structure
.2740					_ScanNextLine:
.2740	18		clc				clc	 								; forward to next line.
.2741	b2 18		lda ($18)			lda 	(codePtr)
.2743	65 18		adc $18				adc 	codePtr
.2745	85 18		sta $18				sta 	codePtr
.2747	90 02		bcc $274b			bcc 	_ScanNoCarry
.2749	e6 19		inc $19				inc 	codePtr+1
.274b					_ScanNoCarry:
.274b	a0 03		ldy #$03			ldy 	#3
.274d	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.274f	d0 b7		bne $2708			bne 	_ScanForwardLoop
.2751	4c 7e 28	jmp $287e		jmp	ErrorV_structure
.2754					_ScanDataItem:
.2754	98		tya				tya
.2755	38		sec				sec
.2756	71 18		adc ($18),y			adc 	(codePtr),y
.2758	a8		tay				tay
.2759	80 ad		bra $2708			bra 	_ScanForwardLoop
.275b					_ScanExit:
.275b	c8		iny				iny 								; consume final token.
.275c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.275d					ScanProcedures:
.275d	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.275f	48		pha				pha
.2760	a5 19		lda $19				lda 	codePtr+1
.2762	48		pha				pha
.2763	5a		phy				phy
.2764	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.2767	85 19		sta $19				sta 	codePtr+1
.2769	64 18		stz $18				stz 	codePtr
.276b					_SPLoop:
.276b	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.276d	f0 18		beq $2787			beq 	_SPExit
.276f	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2771	b1 18		lda ($18),y			lda 	(codePtr),y
.2773	c9 88		cmp #$88			cmp 	#PR_PROC
.2775	d0 03		bne $277a			bne 	_SPNext
.2777	20 8f 27	jsr $278f			jsr 	_SPSetupRecord
.277a					_SPNext:
.277a	18		clc				clc 								; forward to next
.277b	b2 18		lda ($18)			lda 	(codePtr)
.277d	65 18		adc $18				adc 	codePtr
.277f	85 18		sta $18				sta 	codePtr
.2781	90 e8		bcc $276b			bcc 	_SPLoop
.2783	e6 19		inc $19				inc 	codePtr+1
.2785	80 e4		bra $276b			bra 	_SPLoop
.2787					_SPExit:
.2787	7a		ply				ply
.2788	68		pla				pla
.2789	85 19		sta $19				sta 	codePtr+1
.278b	68		pla				pla
.278c	85 18		sta $18				sta 	codePtr
.278e	60		rts				rts
.278f					_SPSetupRecord:
.278f	c8		iny				iny 								; check identifier follows
.2790	b1 18		lda ($18),y			lda 	(codePtr),y
.2792	29 c0		and #$c0			and 	#$C0
.2794	c9 40		cmp #$40			cmp 	#$40
.2796	d0 27		bne $27bf			bne 	_SPSyntax
.2798	20 ab 2d	jsr $2dab			jsr 	VARGetInfo 					; get the information
.279b	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen 				; check right bracket follows.
.279e	20 5d 2d	jsr $2d5d			jsr 	VARFind 					; already exists ?
.27a1	b0 1f		bcs $27c2			bcs 	_SPUsed 					; error !
.27a3	20 09 2d	jsr $2d09			jsr 	VARCreate 					; create, XA points to the data.
.27a6	85 24		sta $24				sta 	zTemp0
.27a8	86 25		stx $25				stx 	zTemp0+1
.27aa	5a		phy				phy 								; save Y pos on stack
.27ab	a0 01		ldy #$01			ldy 	#1
.27ad	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.27af	92 24		sta ($24)			sta 	(zTemp0)
.27b1	a5 19		lda $19				lda 	codePtr+1
.27b3	91 24		sta ($24),y			sta 	(zTemp0),y
.27b5	c8		iny				iny
.27b6	68		pla				pla
.27b7	91 24		sta ($24),y			sta 	(zTemp0),y
.27b9	c8		iny				iny
.27ba	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.27bc	91 24		sta ($24),y			sta 	(zTemp0),y
.27be	60		rts				rts
.27bf					_SPSyntax:
.27bf	4c f2 27	jmp $27f2		jmp	ErrorV_syntax
.27c2					_SPUsed:
.27c2	4c 49 29	jmp $2949		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.27c5					Command_WHILE:
.27c5	5a		phy				phy 								; save position of the test
.27c6	20 03 18	jsr $1803			jsr 	EXPEvalNumber 				; work out the while test.
.27c9	a2 08		ldx #$08			ldx 	#IFR0
.27cb	20 61 34	jsr $3461			jsr 	IFloatCheckZero 			; check if zero
.27ce	f0 0e		beq $27de			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.27d0	98		tya				tya 								; position *after* test.
.27d1	7a		ply				ply 								; restore position before test, at WHILE
.27d2	88		dey				dey 								; so we execute the WHILE command again.
.27d3	48		pha				pha 								; push after test on the stack
.27d4	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.27d6	20 e4 29	jsr $29e4			jsr 	StackOpen
.27d9	20 17 2a	jsr $2a17			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.27dc	7a		ply				ply 								; restore the position *after* the test
.27dd	60		rts				rts
.27de					_WHExitLoop:
.27de	68		pla				pla 								; throw post loop position
.27df	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.27e1	aa		tax				tax
.27e2	20 02 27	jsr $2702			jsr 	ScanForward
.27e5	60		rts				rts
.27e6					Command_WEND:
.27e6	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.27e8	20 0f 2a	jsr $2a0f			jsr 	StackCheckFrame
.27eb	20 29 2a	jsr $2a29			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.27ee	20 01 2a	jsr $2a01			jsr 	StackClose		 			; erase the frame
.27f1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.27f2					ErrorV_syntax:
.27f2	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>27f5	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>27fd	45 72 72 6f 72 00
.2803					ErrorV_range:
.2803	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>2806	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>280e	52 61 6e 67 65 00
.2814					ErrorV_value:
.2814	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>2817	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>281f	75 65 00
.2822					ErrorV_type:
.2822	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>2825	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>282d	73 6d 61 74 63 68 00
.2834					ErrorV_unimplemented:
.2834	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>2837	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>283f	6c 65 6d 65 6e 74 65 64 00
.2848					ErrorV_assert:
.2848	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>284b	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2853	46 61 69 6c 00
.2858					ErrorV_internal:
.2858	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>285b	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2863	6c 20 45 72 72 6f 72 00
.286b					ErrorV_divzero:
.286b	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>286e	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2876	42 79 20 5a 65 72 6f 00
.287e					ErrorV_structure:
.287e	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>2881	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2889	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2896					ErrorV_stop:
.2896	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>2899	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>28a1	20 53 74 6f 70 70 65 64 00
.28aa					ErrorV_data:
.28aa	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>28ad	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>28b5	44 61 74 61 00
.28ba					ErrorV_redefine:
.28ba	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>28bd	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>28c5	65 64 65 66 69 6e 65 64 00
.28ce					ErrorV_index:
.28ce	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>28d1	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>28d9	61 79 20 49 6e 64 65 78 00
.28e2					ErrorV_memory:
.28e2	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>28e5	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>28ed	4d 65 6d 6f 72 79 00
.28f4					ErrorV_uninitialised:
.28f4	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>28f7	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>28ff	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.290f					ErrorV_string:
.290f	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>2912	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>291a	69 6e 67 20 4c 65 6e 67 74 68 00
.2925					ErrorV_variable:
.2925	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>2928	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2930	65 20 4d 69 73 73 69 6e 67 00
.293a					ErrorV_stack:
.293a	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>293d	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2945	75 6c 6c 00
.2949					ErrorV_dupproc:
.2949	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>294c	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2954	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2964	65 64 00
.2967					ErrorV_unknown:
.2967	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>296a	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2972	20 50 72 6f 63 65 64 75 72 65 00
.297d					ErrorV_break:
.297d	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>2980	05 42 72 65 61 6b 00			.text	5,"Break",0
.2987					ErrorV_line:
.2987	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>298a	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2992	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.299f					ErrorV_fnf:
.299f	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>29a2	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>29aa	74 20 46 6f 75 6e 64 00
.29b2					ErrorV_full:
.29b2	20 f9 2b	jsr $2bf9		jsr	ErrorHandler
>29b5	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>29bd	20 46 75 6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.29c3					ERRCheckLParen:
.29c3	b1 18		lda ($18),y			lda 	(codePtr),y
.29c5	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.29c7	d0 18		bne $29e1			bne 	ERRSyntaxError
.29c9	c8		iny				iny
.29ca	60		rts				rts
.29cb					ERRCheckRParen:
.29cb	b1 18		lda ($18),y			lda 	(codePtr),y
.29cd	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.29cf	d0 10		bne $29e1			bne 	ERRSyntaxError
.29d1	c8		iny				iny
.29d2	60		rts				rts
.29d3					ERRCheckComma:
.29d3	b1 18		lda ($18),y			lda 	(codePtr),y
.29d5	c9 99		cmp #$99			cmp 	#PR_COMMA
.29d7	d0 08		bne $29e1			bne 	ERRSyntaxError
.29d9	c8		iny				iny
.29da	60		rts				rts
.29db					ERRCheckA:
.29db	d1 18		cmp ($18),y			cmp 	(codePtr),y
.29dd	d0 02		bne $29e1			bne 	ERRSyntaxError
.29df	c8		iny				iny
.29e0	60		rts				rts
.29e1					ERRSyntaxError:
.29e1	4c f2 27	jmp $27f2		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.29e4					StackOpen:
.29e4	48		pha				pha 								; save frame byte
.29e5	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.29e7	0a		asl a				asl 	a 							; claim twice this for storage
.29e8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.29ea	38		sec				sec 								; so basically subtracting from
.29eb	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.29ed	85 2c		sta $2c				sta 	basicStack
.29ef	b0 09		bcs $29fa			bcs 	_SONoBorrow
.29f1	c6 2d		dec $2d				dec 	basicStack+1
.29f3	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.29f5	cd 22 06	cmp $0622			cmp 	basicStackEnd
.29f8	f0 04		beq $29fe			beq 	_SOMemory
.29fa					_SONoBorrow:
.29fa	68		pla				pla 								; get marker back and write at TOS
.29fb	92 2c		sta ($2c)			sta 	(basicStack)
.29fd	60		rts				rts
.29fe					_SOMemory:
.29fe	4c 3a 29	jmp $293a		jmp	ErrorV_stack
.2a01					StackClose:
.2a01	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2a03	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2a05	0a		asl a				asl 	a 							; claim twice this.
.2a06	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.2a08	85 2c		sta $2c				sta 	basicStack
.2a0a	90 02		bcc $2a0e			bcc 	_SCExit
.2a0c	e6 2d		inc $2d				inc 	basicStack+1
.2a0e					_SCExit:
.2a0e	60		rts				rts
.2a0f					StackCheckFrame:
.2a0f	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2a11	d0 01		bne $2a14			bne 	_SCFError 					; different, we have structures mixed up
.2a13	60		rts				rts
.2a14					_SCFError:
.2a14	4c 7e 28	jmp $287e		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2a17					STKSaveCodePosition:
.2a17	5a		phy				phy
.2a18	98		tya				tya 								; save Y at offset 1.
.2a19	a0 01		ldy #$01			ldy 	#1
.2a1b	91 2c		sta ($2c),y			sta 	(basicStack),y
.2a1d	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2a1f	c8		iny				iny
.2a20	91 2c		sta ($2c),y			sta 	(basicStack),y
.2a22	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2a24	c8		iny				iny
.2a25	91 2c		sta ($2c),y			sta 	(basicStack),y
.2a27	7a		ply				ply
.2a28	60		rts				rts
.2a29					STKLoadCodePosition:
.2a29	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2a2b	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2a2d	85 19		sta $19				sta 	codePtr+1
.2a2f	88		dey				dey
.2a30	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2a32	85 18		sta $18				sta 	codePtr
.2a34	88		dey				dey
.2a35	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.2a37	a8		tay				tay
.2a38	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2a39					StackReset:
.2a39	48		pha				pha 								; save top of memory
.2a3a	3a		dec a				dec 	a  							; end of stack = previous byte
.2a3b	85 2d		sta $2d				sta 	basicStack+1
.2a3d	a9 ff		lda #$ff			lda 	#$FF
.2a3f	85 2c		sta $2c				sta 	basicStack
.2a41	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2a43	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2a45	68		pla				pla 								; allocate pages for stack.
.2a46	38		sec				sec
.2a47	e9 02		sbc #$02			sbc 	#STACKPAGES
.2a49	8d 22 06	sta $0622			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2a4c	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0622					basicStackEnd:
>0622							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2a4d					StringConcrete:
.2a4d	5a		phy				phy 								; save position on stack
.2a4e	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2a50	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2a52	b0 41		bcs $2a95			bcs 	_SALengthError
.2a54	18		clc				clc 								; length of the new string
.2a55	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2a57	90 02		bcc $2a5b			bcc 	_SAHaveLength
.2a59	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2a5b					_SAHaveLength:
.2a5b	48		pha				pha 								; save length to be allocated for concreting.
.2a5c	38		sec				sec
.2a5d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2a5f	6d 24 06	adc $0624			adc 	stringMemory
.2a62	8d 24 06	sta $0624			sta 	stringMemory
.2a65	85 28		sta $28				sta 	zTemp2 						; update storage address
.2a67	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2a69	6d 25 06	adc $0625			adc 	stringMemory+1
.2a6c	8d 25 06	sta $0625			sta 	stringMemory+1
.2a6f	85 29		sta $29				sta 	zTemp2+1
.2a71	68		pla				pla 								; save length allocated in +0
.2a72	92 28		sta ($28)			sta 	(zTemp2)
.2a74	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2a76	a0 01		ldy #$01			ldy 	#1
.2a78	91 28		sta ($28),y			sta 	(zTemp2),y
.2a7a					_SACopyNewString:
.2a7a	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2a7c	a0 02		ldy #$02			ldy 	#2
.2a7e	91 28		sta ($28),y			sta 	(zTemp2),y
.2a80	aa		tax				tax 								; bytes to copy
.2a81	f0 0c		beq $2a8f			beq 	_SACopyExit
.2a83	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2a85					_SACopyNSLoop:
.2a85	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2a87	c8		iny				iny 								; write two on in string storage
.2a88	c8		iny				iny
.2a89	91 28		sta ($28),y			sta 	(zTemp2),y
.2a8b	88		dey				dey
.2a8c	ca		dex				dex									; until copied all the string lengths.
.2a8d	d0 f6		bne $2a85			bne 	_SACopyNSLoop
.2a8f					_SACopyExit:
.2a8f	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2a91	a5 28		lda $28				lda 	zTemp2
.2a93	7a		ply				ply
.2a94	60		rts				rts
.2a95					_SALengthError:
.2a95	4c 0f 29	jmp $290f		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2a98					StringSystemInitialise:
.2a98	3a		dec a				dec 	a 							; make last byte of previous page.
.2a99	8d 25 06	sta $0625			sta 	stringMemory+1
.2a9c	85 25		sta $25				sta 	zTemp0+1
.2a9e	a9 ff		lda #$ff			lda 	#$FF
.2aa0	8d 24 06	sta $0624			sta 	stringMemory
.2aa3	85 24		sta $24				sta 	zTemp0
.2aa5	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2aa7	92 24		sta ($24)			sta 	(zTemp0)
.2aa9	60		rts				rts
.2aaa					StringSpaceInitialise:
.2aaa	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2aac	8d 23 06	sta $0623			sta 	stringInitialised
.2aaf	ad 24 06	lda $0624			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2ab2	8d 26 06	sta $0626			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2ab5	ad 25 06	lda $0625			lda 	stringMemory+1
.2ab8	3a		dec a				dec 	a
.2ab9	8d 27 06	sta $0627			sta 	stringTempPointer+1
.2abc	20 36 11	jsr $1136			jsr 	ClearCheckMemory
.2abf	60		rts				rts
.2ac0					StringTempAllocate:
.2ac0	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2ac2	b0 2e		bcs $2af2			bcs 	_STALength
.2ac4	2c 23 06	bit $0623			bit 	stringInitialised 			; already initialised
.2ac7	30 05		bmi $2ace			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.2ac9	48		pha				pha 								; save value to subtract.
.2aca	20 aa 2a	jsr $2aaa			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2acd	68		pla				pla 								; restore it
.2ace					_STAAllocate:
.2ace	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2ad0	18		clc				clc  								; deliberate allows one more
.2ad1	6d 26 06	adc $0626			adc 	stringTempPointer 			; subtract from temp pointer
.2ad4	8d 26 06	sta $0626			sta 	stringTempPointer
.2ad7	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2ad9	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2adb	ad 27 06	lda $0627			lda 	stringTempPointer+1
.2ade	69 ff		adc #$ff			adc 	#$FF
.2ae0	8d 27 06	sta $0627			sta 	stringTempPointer+1
.2ae3	85 2f		sta $2f				sta 	zsTemp+1
.2ae5	85 09		sta $09				sta 	IFR0+IM1
.2ae7	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2ae9	a9 80		lda #$80			lda 	#$80
.2aeb	85 0b		sta $0b				sta 	IFR0+IExp
.2aed	a9 00		lda #$00			lda 	#0 							; clear the target string
.2aef	92 2e		sta ($2e)			sta 	(zsTemp)
.2af1	60		rts				rts
.2af2					_STALength:
.2af2	4c 0f 29	jmp $290f		jmp	ErrorV_string
.2af5					StringTempWrite:
.2af5	5a		phy				phy
.2af6	48		pha				pha
.2af7	b2 2e		lda ($2e)			lda 	(zsTemp)
.2af9	1a		inc a				inc 	a
.2afa	92 2e		sta ($2e)			sta 	(zsTemp)
.2afc	a8		tay				tay
.2afd	68		pla				pla
.2afe	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2b00	7a		ply				ply
.2b01	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0623					stringInitialised:
>0623							.fill 	1
.0624					stringMemory:
>0624							.fill 	2
.0626					stringTempPointer:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2b02					Command_DIR:
.2b02	5a		phy				phy
.2b03	38		sec				sec 								; reset read
.2b04	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2b07	18		clc		_CDLoop:clc
.2b08	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2b0b	b0 27		bcs $2b34			bcs 	_CDExit 					; no more
.2b0d	86 24		stx $24				stx 	zTemp0
.2b0f	84 25		sty $25				sty 	zTemp0+1
.2b11	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2b14					_CDPad:
.2b14	a9 20		lda #$20			lda 	#32
.2b16	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2b19	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2b1c	e0 10		cpx #$10			cpx 	#16
.2b1e	90 f4		bcc $2b14			bcc 	_CDPad
.2b20	a0 11		ldy #$11			ldy 	#17
.2b22	b1 24		lda ($24),y			lda 	(zTemp0),y
.2b24	aa		tax				tax
.2b25	88		dey				dey
.2b26	b1 24		lda ($24),y			lda 	(zTemp0),y
.2b28	20 22 2c	jsr $2c22			jsr 	WriteIntXA
.2b2b	a2 36		ldx #$36			ldx 	#_CDTail & $FF
.2b2d	a0 2b		ldy #$2b			ldy 	#_CDTail >> 8
.2b2f	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2b32	80 d3		bra $2b07			bra 	_CDLoop
.2b34	7a		ply		_CDExit:ply
.2b35	60		rts				rts
.2b36					_CDTail:
>2b36	08						.byte 	_CDTail2-*-1
>2b37	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2b3f					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2b3f					Command_ERASE:
.2b3f	20 51 2b	jsr $2b51			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2b42	5a		phy				phy
.2b43	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2b45	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2b47	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2b4a	7a		ply				ply
.2b4b	b0 01		bcs $2b4e			bcs 	_CEFail
.2b4d	60		rts				rts
.2b4e					_CEFail:
.2b4e	4c 9f 29	jmp $299f		jmp	ErrorV_fnf
.2b51					FileSetupBlock:
.2b51	20 2d 18	jsr $182d			jsr 	EXPEvalString 					; string to R0, zTemp0
.2b54	a5 24		lda $24				lda 	zTemp0 							; address to name
.2b56	8d 28 06	sta $0628			sta 	FSBBlock
.2b59	a5 25		lda $25				lda 	zTemp0+1
.2b5b	8d 29 06	sta $0629			sta 	FSBBlock+1 						; zero the rest.
.2b5e	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2b61	9c 2b 06	stz $062b			stz 	FSBBlock+3
.2b64	9c 2c 06	stz $062c			stz 	FSBBlock+4
.2b67	9c 2d 06	stz $062d			stz 	FSBBlock+5
.2b6a	60		rts				rts
.0628					FSBBlock:
>0628							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2b6b					Command_LOAD:
.2b6b	20 51 2b	jsr $2b51			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2b6e	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; set load address
.2b71	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2b74	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2b77	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2b79	48		pha				pha
.2b7a	20 97 2b	jsr $2b97			jsr	 	FileCheckSecondParam
.2b7d	5a		phy				phy
.2b7e	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2b80	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2b82	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2b85	7a		ply				ply
.2b86	b0 0c		bcs $2b94			bcs 	_CLFail
.2b88	68		pla				pla 								; load program
.2b89	c9 99		cmp #$99			cmp 	#PR_COMMA
.2b8b	f0 06		beq $2b93			beq 	_CLNoClear
.2b8d	20 f0 10	jsr $10f0			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2b90	4c 41 2c	jmp $2c41			jmp 	WarmStart 					; and warm start
.2b93					_CLNoClear:
.2b93	60		rts				rts
.2b94					_CLFail:
.2b94	4c 9f 29	jmp $299f		jmp	ErrorV_fnf
.2b97					FileCheckSecondParam:
.2b97	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2b99	c9 99		cmp #$99			cmp 	#PR_COMMA
.2b9b	d0 0e		bne $2bab			bne 	_FCSPExit
.2b9d	c8		iny				iny 								; consume
.2b9e	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; get address
.2ba1	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2ba3	8d 2a 06	sta $062a			sta 	FSBBlock+2
.2ba6	a5 09		lda $09				lda 	IFR0+IM1
.2ba8	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2bab					_FCSPExit:
.2bab	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2bac					Command_SAVE:
.2bac	20 51 2b	jsr $2b51			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2baf	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2bb1	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2bb3	f0 22		beq $2bd7			beq 	_CLSaveBlock 				; save "Name",from,size
.2bb5	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; set load address
.2bb8	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2bbb	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2bbe	20 c1 21	jsr $21c1			jsr		PGMEndProgram 				; end of program -> zTemp0
.2bc1	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2bc3	d0 02		bne $2bc7			bne 	_CLNoCarry
.2bc5	e6 25		inc $25				inc 	zTemp0+1
.2bc7					_CLNoCarry:
.2bc7	a5 24		lda $24				lda 	zTemp0
.2bc9	8d 2c 06	sta $062c			sta 	FSBBlock+4
.2bcc	38		sec				sec
.2bcd	a5 25		lda $25				lda 	zTemp0+1
.2bcf	ed 2b 06	sbc $062b			sbc 	FSBBlock+3
.2bd2	8d 2d 06	sta $062d			sta 	FSBBlock+5
.2bd5	80 13		bra $2bea			bra 	_CSSave
.2bd7					_CLSaveBlock:
.2bd7	20 97 2b	jsr $2b97			jsr 	FileCheckSecondParam 		; the address to save from.
.2bda	20 d3 29	jsr $29d3			jsr 	ERRCheckComma
.2bdd	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; get size
.2be0	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2be2	8d 2c 06	sta $062c			sta 	FSBBlock+4
.2be5	a5 09		lda $09				lda 	IFR0+IM1
.2be7	8d 2d 06	sta $062d			sta 	FSBBlock+5
.2bea					_CSSave:
.2bea	5a		phy				phy
.2beb	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2bed	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2bef	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2bf2	7a		ply				ply
.2bf3	b0 01		bcs $2bf6			bcs 	_CSFail
.2bf5	60		rts				rts
.2bf6					_CSFail:
.2bf6	4c b2 29	jmp $29b2		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2bf9					ErrorHandler:
.2bf9	fa		plx				plx 								; get address of msg
.2bfa	7a		ply				ply
.2bfb	e8		inx				inx 								; bump past RTS
.2bfc	d0 01		bne $2bff			bne 	_EHNoInc
.2bfe	c8		iny				iny
.2bff					_EHNoInc:
.2bff	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2c02	ad 2e 06	lda $062e			lda 	ERRLine 					; direct command ?
.2c05	0d 2f 06	ora $062f			ora 	ERRLine+1
.2c08	f0 10		beq $2c1a			beq 	_EHNoNumber
.2c0a	a2 1d		ldx #$1d			ldx 	#_EHAtMsg & $FF
.2c0c	a0 2c		ldy #$2c			ldy 	#_EHAtMsg >> 8
.2c0e	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2c11	ad 2e 06	lda $062e			lda 	ERRLine 					; line number -> XA
.2c14	ae 2f 06	ldx $062f			ldx 	ERRLine+1
.2c17	20 22 2c	jsr $2c22			jsr 	WriteIntXA
.2c1a					_EHNoNumber:
.2c1a	4c 4b 2c	jmp $2c4b			jmp 	WarmStartNewLine
.2c1d					_EHAtMsg:
>2c1d	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2c22					_EHAtMsg1:
.2c22					WriteIntXA:
.2c22	da		phx				phx
.2c23	48		pha				pha
.2c24	a2 08		ldx #$08			ldx 	#IFR0
.2c26	20 b7 33	jsr $33b7			jsr 	IFloatPushRx
.2c29	68		pla				pla
.2c2a	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.2c2d	68		pla				pla
.2c2e	85 09		sta $09				sta 	IFR0+IM1
.2c30	a9 0a		lda #$0a			lda 	#10 						; decimal
.2c32	20 0a 32	jsr $320a			jsr 	IFloatIntegerToStringR0	 	; convert
.2c35	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2c38	a2 08		ldx #$08			ldx 	#IFR0
.2c3a	20 d8 33	jsr $33d8			jsr 	IFloatPullRx
.2c3d	60		rts				rts
.2c3e					NotImplemented:
.2c3e	4c 34 28	jmp $2834		jmp	ErrorV_unimplemented
.062e					ERRLine:
>062e							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2c41					WarmStart:
.2c41	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2c43	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2c46	a9 6b		lda #$6b			lda 	#"k"
.2c48	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2c4b					WarmStartNewLine:
.2c4b	a9 0d		lda #$0d			lda 	#13
.2c4d	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2c50					WarmStartNoPrompt:
.2c50	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2c52	9a		txs				txs
.2c53	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2c56	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2c57	d0 01		bne $2c5a			bne 	_WSSkip
.2c59	c8		iny				iny
.2c5a					_WSSkip:
.2c5a	86 28		stx $28				stx 	zTemp2 						; save address
.2c5c	84 29		sty $29				sty 	zTemp2+1
.2c5e	b2 28		lda ($28)			lda 	(zTemp2)
.2c60	f0 ee		beq $2c50			beq 	WarmStartNoPrompt 			; ignore empty line.
.2c62	a2 94		ldx #$94			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2c64	a0 2c		ldy #$2c			ldy 	#TOKGetCharacter >> 8
.2c66	38		sec				sec
.2c67	20 33 22	jsr $2233			jsr 	TOKTokenise
.2c6a	b0 25		bcs $2c91			bcs 	_WSSyntax
.2c6c	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2c6f	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2c72	d0 0b		bne $2c7f			bne 	_WSLineEdit
.2c74	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2c76	85 18		sta $18				sta 	codePtr
.2c78	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2c7a	85 19		sta $19				sta 	codePtr+1
.2c7c	4c cf 15	jmp $15cf			jmp 	RUNNewLine
.2c7f					_WSLineEdit:
.2c7f	20 0e 21	jsr $210e			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2c82	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2c85	c9 04		cmp #$04			cmp 	#4
.2c87	f0 03		beq $2c8c			beq 	_WSNoInsert
.2c89	20 58 21	jsr $2158			jsr 	PGMInsertLine				; if not, maybe insert
.2c8c					_WSNoInsert:
.2c8c	20 f0 10	jsr $10f0			jsr 	ClearCode 					; clear variables etc.
.2c8f	80 bf		bra $2c50			bra 	WarmStartNoPrompt
.2c91					_WSSyntax:
.2c91	4c f2 27	jmp $27f2		jmp	ErrorV_syntax
.2c94					TOKGetCharacter:
.2c94	b2 28		lda ($28)			lda 	(zTemp2)
.2c96	90 06		bcc $2c9e			bcc 	_GSNoIncrement
.2c98	e6 28		inc $28				inc 	zTemp2
.2c9a	d0 02		bne $2c9e			bne 	_GSNoIncrement
.2c9c	e6 29		inc $29				inc 	zTemp2+1
.2c9e					_GSNoIncrement:
.2c9e	c9 00		cmp #$00			cmp 	#0
.2ca0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2ca1					VARArrayLookup:
.2ca1	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2ca3	86 25		stx $25				stx 	zTemp0+1
.2ca5	b2 24		lda ($24)			lda 	(zTemp0)
.2ca7	48		pha				pha
.2ca8	5a		phy				phy
.2ca9	a0 01		ldy #$01			ldy 	#1
.2cab	b1 24		lda ($24),y			lda 	(zTemp0),y
.2cad	7a		ply				ply
.2cae	48		pha				pha
.2caf	20 15 18	jsr $1815			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2cb2	68		pla				pla 								; array address to zTemp0
.2cb3	85 25		sta $25				sta 	zTemp0+1
.2cb5	68		pla				pla
.2cb6	85 24		sta $24				sta 	zTemp0
.2cb8	5a		phy				phy 								; save codePtr position.
.2cb9	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2cbb	b1 24		lda ($24),y			lda 	(zTemp0),y
.2cbd	48		pha				pha 								; save bit 15 on stack.
.2cbe	29 7f		and #$7f			and 	#$7F
.2cc0	85 26		sta $26				sta 	zTemp1
.2cc2	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2cc4	d2 24		cmp ($24)			cmp 	(zTemp0)
.2cc6	a5 09		lda $09				lda 	IFR0+IM1
.2cc8	e5 26		sbc $26				sbc 	zTemp1
.2cca	b0 3a		bcs $2d06			bcs 	_VALIndex
.2ccc	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2cce	c9 40		cmp #$40			cmp 	#$40
.2cd0	b0 34		bcs $2d06			bcs 	_VALIndex
.2cd2	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2cd4	26 09		rol $09				rol 	IFR0+IM1
.2cd6	fa		plx				plx 								; get msb of size -> X
.2cd7	30 04		bmi $2cdd			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2cd9	06 08		asl $08				asl 	IFR0+IM0
.2cdb	26 09		rol $09				rol 	IFR0+IM1
.2cdd					_VARNotX4:
.2cdd	18		clc				clc 								; add the two for the size bytes
.2cde	a5 08		lda $08				lda 	IFR0+IM0
.2ce0	69 02		adc #$02			adc 	#2
.2ce2	85 08		sta $08				sta 	IFR0+IM0
.2ce4	90 02		bcc $2ce8			bcc 	_VARNoCarry1
.2ce6	e6 09		inc $09				inc 	IFR0+IM1
.2ce8					_VARNoCarry1:
.2ce8	18		clc				clc 								; calculate the element address and push to stack.
.2ce9	a5 08		lda $08				lda 	IFR0+IM0
.2ceb	65 24		adc $24				adc 	zTemp0
.2ced	48		pha				pha
.2cee	a5 09		lda $09				lda 	IFR0+IM1
.2cf0	65 25		adc $25				adc 	zTemp0+1
.2cf2	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2cf4	30 04		bmi $2cfa			bmi 	_VARHasSubLevel
.2cf6	aa		tax				tax 								; address in XA
.2cf7	68		pla				pla
.2cf8	7a		ply				ply 								; restore Y and exit
.2cf9	60		rts				rts
.2cfa					_VARHasSubLevel:
.2cfa	aa		tax				tax 								; get link address in XA
.2cfb	68		pla				pla
.2cfc	7a		ply				ply 								; restore code position.
.2cfd	48		pha				pha
.2cfe	20 d3 29	jsr $29d3			jsr 	ERRCheckComma 				; comma required.
.2d01	68		pla				pla
.2d02	20 a1 2c	jsr $2ca1			jsr 	VARArrayLookup 				; call it recursively
.2d05	60		rts				rts
.2d06					_VALIndex:
.2d06	4c ce 28	jmp $28ce		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2d09					VARCreate:
.2d09	5a		phy				phy
.2d0a	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2d0c	a2 00		ldx #$00			ldx 	#0
.2d0e	20 0d 11	jsr $110d			jsr 	AllocateMemory
.2d11	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2d13	86 27		stx $27				stx 	zTemp1+1
.2d15	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2d17	ad 32 06	lda $0632			lda 	VARHash
.2d1a	91 26		sta ($26),y			sta 	(zTemp1),y
.2d1c	c8		iny				iny 								; put address of name into +3,+4
.2d1d	ad 30 06	lda $0630			lda 	VARNameAddress
.2d20	91 26		sta ($26),y			sta 	(zTemp1),y
.2d22	c8		iny				iny
.2d23	ad 31 06	lda $0631			lda 	VARNameAddress+1
.2d26	91 26		sta ($26),y			sta 	(zTemp1),y
.2d28	ad 33 06	lda $0633			lda 	VARType
.2d2b	29 01		and #$01			and 	#1
.2d2d	f0 06		beq $2d35			beq 	_CVNotString
.2d2f	a0 08		ldy #$08			ldy 	#5+3
.2d31	a9 80		lda #$80			lda 	#$80
.2d33	91 26		sta ($26),y			sta 	(zTemp1),y
.2d35					_CVNotString:
.2d35	ad 54 06	lda $0654			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2d38	85 24		sta $24				sta 	zTemp0
.2d3a	ad 55 06	lda $0655			lda 	VARHashEntry+1
.2d3d	85 25		sta $25				sta 	zTemp0+1
.2d3f	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2d41	b2 24		lda ($24)			lda 	(zTemp0)
.2d43	92 26		sta ($26)			sta 	(zTemp1)
.2d45	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d47	91 26		sta ($26),y			sta 	(zTemp1),y
.2d49	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2d4b	92 24		sta ($24)			sta 	(zTemp0)
.2d4d	a5 27		lda $27				lda 	zTemp1+1
.2d4f	91 24		sta ($24),y			sta 	(zTemp0),y
.2d51	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2d53	a6 27		ldx $27				ldx 	zTemp1+1
.2d55	18		clc				clc 								; add 5 to point to the data.
.2d56	69 05		adc #$05			adc 	#5
.2d58	90 01		bcc $2d5b			bcc 	_VCNoCarry
.2d5a	e8		inx				inx
.2d5b					_VCNoCarry:
.2d5b	7a		ply				ply
.2d5c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2d5d					VARFind:
.2d5d	5a		phy				phy
.2d5e	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2d60	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d62	85 27		sta $27				sta 	zTemp1+1
.2d64	f0 1c		beq $2d82			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2d66	b2 24		lda ($24)			lda 	(zTemp0)
.2d68	85 26		sta $26				sta 	zTemp1
.2d6a					_VFLoop:
.2d6a	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2d6c	b1 26		lda ($26),y			lda 	(zTemp1),y
.2d6e	cd 32 06	cmp $0632			cmp 	VARHash
.2d71	f0 12		beq $2d85			beq 	_VFHashesMatch 				; if so, check the name.
.2d73					_VFNext:
.2d73	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2d75	aa		tax				tax
.2d76	a0 01		ldy #$01			ldy 	#1
.2d78	b1 26		lda ($26),y			lda 	(zTemp1),y
.2d7a	85 27		sta $27				sta 	zTemp1+1
.2d7c	86 26		stx $26				stx 	zTemp1
.2d7e	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2d80	d0 e8		bne $2d6a			bne 	_VFLoop
.2d82					_VFExitFail:
.2d82	7a		ply				ply
.2d83	18		clc				clc
.2d84	60		rts				rts
.2d85					_VFHashesMatch:
.2d85	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2d87	b1 26		lda ($26),y			lda 	(zTemp1),y
.2d89	85 28		sta $28				sta 	zTemp2
.2d8b	c8		iny				iny
.2d8c	b1 26		lda ($26),y			lda 	(zTemp1),y
.2d8e	85 29		sta $29				sta 	zTemp2+1
.2d90	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2d92					_VFNameCompLoop:
.2d92	c8		iny				iny 								; char at a time
.2d93	b9 34 06	lda $0634,y			lda 	VARBuffer,y
.2d96	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2d98	d0 d9		bne $2d73			bne 	_VFNext						; next entry if different.
.2d9a	c9 7c		cmp #$7c			cmp 	#$7C
.2d9c	90 f4		bcc $2d92			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2d9e	18		clc				clc
.2d9f	a5 26		lda $26				lda 	zTemp1
.2da1	a6 27		ldx $27				ldx 	zTemp1+1
.2da3	69 05		adc #$05			adc 	#5
.2da5	90 01		bcc $2da8			bcc 	_VFNNoCarry
.2da7	e8		inx				inx
.2da8					_VFNNoCarry:
.2da8	7a		ply				ply
.2da9	38		sec				sec
.2daa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2dab					VARGetInfo:
.2dab	98		tya				tya 								; calculate the address of the identifier start.
.2dac	18		clc				clc
.2dad	65 18		adc $18				adc 	codePtr
.2daf	8d 30 06	sta $0630			sta 	VARNameAddress
.2db2	a5 19		lda $19				lda 	codePtr+1
.2db4	69 00		adc #$00			adc 	#0
.2db6	8d 31 06	sta $0631			sta 	VARNameAddress+1
.2db9	9c 32 06	stz $0632			stz 	VARHash
.2dbc	a2 00		ldx #$00			ldx 	#0
.2dbe					_VARCopyName:
.2dbe	18		clc				clc 								; update the sum hash.
.2dbf	ad 32 06	lda $0632			lda 	VARHash
.2dc2	71 18		adc ($18),y			adc 	(codePtr),y
.2dc4	8d 32 06	sta $0632			sta 	VARHash
.2dc7	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2dc9	c8		iny				iny
.2dca	9d 34 06	sta $0634,x			sta 	VARBuffer,x
.2dcd	e8		inx				inx
.2dce	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2dd0	90 ec		bcc $2dbe			bcc 	_VARCopyName
.2dd2	8d 33 06	sta $0633			sta 	VARType 					; save type byte
.2dd5	29 03		and #$03			and 	#3 							; type is 0-3
.2dd7	0a		asl a				asl 	a
.2dd8	0a		asl a				asl 	a
.2dd9	85 24		sta $24				sta 	zTemp0
.2ddb	ad 32 06	lda $0632			lda 	VARHash 					; force into range of hash entries per type.
.2dde	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2de0	65 24		adc $24				adc 	zTemp0 						; index of hash table
.2de2	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2de3	69 56		adc #$56			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2de5	85 24		sta $24				sta 	zTemp0
.2de7	8d 54 06	sta $0654			sta 	VARHashEntry
.2dea	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2dec	69 00		adc #$00			adc 	#0
.2dee	85 25		sta $25				sta 	zTemp0+1
.2df0	8d 55 06	sta $0655			sta 	VARHashEntry+1
.2df3	60		rts				rts
.2df4					VARClearHashTables:
.2df4	a2 00		ldx #$00			ldx 	#0
.2df6					_VCHRLoop:
.2df6	a9 00		lda #$00			lda 	#0
.2df8	9d 56 06	sta $0656,x			sta 	VARHashTables,x
.2dfb	e8		inx				inx
.2dfc	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2dfe	d0 f6		bne $2df6			bne 	_VCHRLoop
.2e00	60		rts				rts
.0630					VARNameAddress:
>0630							.fill 	2
.0632					VARHash:
>0632							.fill 	1
.0633					VARType:
>0633							.fill 	1
.0634					VARBuffer:
>0634							.fill 	32
.0654					VARHashEntry:
>0654							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0656					VARHashTables:
>0656							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2e01					VARCheckSimple:
.2e01	aa		tax				tax 								; save in X
.2e02	b1 18		lda ($18),y			lda 	(codePtr),y
.2e04	c9 7c		cmp #$7c			cmp 	#$7C
.2e06	d0 15		bne $2e1d			bne 	_VCSComplex
.2e08	c8		iny				iny 								; consume the second byte, the type.
.2e09	8a		txa				txa  								; character (40-7F) x 4
.2e0a	0a		asl a				asl 	a
.2e0b	0a		asl a				asl  	a
.2e0c	18		clc				clc
.2e0d	69 76		adc #$76			adc 	#FastVariables & $FF
.2e0f	85 08		sta $08				sta 	IFR0+IM0
.2e11	a9 06		lda #$06			lda 	#FastVariables >> 8
.2e13	69 00		adc #$00			adc 	#0
.2e15	85 09		sta $09				sta 	IFR0+IM1
.2e17	64 0a		stz $0a				stz 	IFR0+IM2
.2e19	64 0b		stz $0b				stz 	IFR0+IExp
.2e1b	38		sec				sec 								; it's a reference
.2e1c	60		rts				rts
.2e1d					_VCSComplex:
.2e1d	88		dey				dey	 								; extract information.
.2e1e	20 ab 2d	jsr $2dab			jsr 	VARGetInfo
.2e21	20 5d 2d	jsr $2d5d			jsr 	VARFind 					; search for variable
.2e24	b0 0a		bcs $2e30			bcs 	_VCSHaveVariable
.2e26	ad 33 06	lda $0633			lda 	VARType 					; error if arrays, cannot autocreate
.2e29	29 02		and #$02			and 	#2
.2e2b	d0 25		bne $2e52			bne 	_VCNoCreate
.2e2d	20 09 2d	jsr $2d09			jsr 	VARCreate 					; create variable
.2e30					_VCSHaveVariable:
.2e30	48		pha				pha 								; save LSB on the stack
.2e31	ad 33 06	lda $0633			lda 	VARType 					; get var type, and shift bit 1 into carry
.2e34	6a		ror a				ror 	a
.2e35	6a		ror a				ror 	a
.2e36	68		pla				pla 								; restore LSB
.2e37	90 08		bcc $2e41			bcc 	_VCSNotArray 				; skip if not an array
.2e39	20 a1 2c	jsr $2ca1			jsr 	VARArrayLookup 				; look for subscripts.
.2e3c	48		pha				pha 								; check )
.2e3d	20 cb 29	jsr $29cb			jsr 	ERRCheckRParen
.2e40	68		pla				pla
.2e41					_VCSNotArray:
.2e41	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2e43	85 08		sta $08				sta 	IFR0+IM0
.2e45	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2e47	ad 33 06	lda $0633			lda 	VARType 					; number/string bit into carry
.2e4a	6a		ror a				ror 	a
.2e4b	a9 00		lda #$00			lda 	#0
.2e4d	6a		ror a				ror 	a 							; now $00 or $80
.2e4e	85 0b		sta $0b				sta 	IFR0+IExp
.2e50	38		sec				sec 								; it's a reference
.2e51	60		rts				rts
.2e52					_VCNoCreate:
.2e52	4c f4 28	jmp $28f4		jmp	ErrorV_uninitialised
.0676					FastVariables:
>0676							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2e55					IFInitialise:
.2e55	9c e6 06	stz $06e6			stz 	IFStackIndex 				; reset the internal stack.
.2e58	60		rts				rts
.2e59					IFloatSubtract:
.2e59	da		phx				phx
.2e5a	a2 08		ldx #$08			ldx 	#IFR0
.2e5c	20 73 34	jsr $3473			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2e5f	fa		plx				plx
.2e60					IFloatAdd:
.2e60	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2e62	05 0b		ora $0b				ora 	IFR0+IExp
.2e64	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2e66	d0 4e		bne $2eb6			bne 	_IFloatAddDecimals 			; floating point version.
.2e68					_IFAddSubMantissa:
.2e68	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2e6a	45 0b		eor $0b				eor 	IFR0+IExp
.2e6c	29 40		and #$40			and 	#IFSign
.2e6e	d0 21		bne $2e91			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2e70	18		clc				clc 								; do the actual addition
.2e71	a5 08		lda $08				lda 	IFR0+IM0
.2e73	75 00		adc $00,x			adc 		IM0,x
.2e75	85 08		sta $08				sta 	IFR0+IM0
.2e77	a5 09		lda $09				lda 	IFR0+IM1
.2e79	75 01		adc $01,x			adc 		IM1,x
.2e7b	85 09		sta $09				sta 	IFR0+IM1
.2e7d	a5 0a		lda $0a				lda 	IFR0+IM2
.2e7f	75 02		adc $02,x			adc 		IM2,x
.2e81	85 0a		sta $0a				sta 	IFR0+IM2
.2e83	10 29		bpl $2eae			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2e85	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2e87	20 97 34	jsr $3497			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2e8a	20 c1 34	jsr $34c1			jsr 	IFloatIncExponent
.2e8d	d0 1f		bne $2eae			bne 	_IFloatAddExit
.2e8f	38		sec				sec 								; overflowed numerically.
.2e90	60		rts				rts
.2e91					_IFloatSubMantissa:
.2e91	38		sec				sec 								; do the subtraction R0-Rx
.2e92	a5 08		lda $08				lda 	IFR0+IM0
.2e94	f5 00		sbc $00,x			sbc 		IM0,x
.2e96	85 08		sta $08				sta 	IFR0+IM0
.2e98	a5 09		lda $09				lda 	IFR0+IM1
.2e9a	f5 01		sbc $01,x			sbc 		IM1,x
.2e9c	85 09		sta $09				sta 	IFR0+IM1
.2e9e	a5 0a		lda $0a				lda 	IFR0+IM2
.2ea0	f5 02		sbc $02,x			sbc 		IM2,x
.2ea2	85 0a		sta $0a				sta 	IFR0+IM2
.2ea4	b0 08		bcs $2eae			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2ea6	a2 08		ldx #$08			ldx 	#IFR0
.2ea8	20 7b 34	jsr $347b			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2eab	20 73 34	jsr $3473			jsr 	IFloatNegate 				; negate the result using sign bit.
.2eae					_IFloatAddExit:
.2eae	18		clc				clc
.2eaf	60		rts				rts
.2eb0					_IFloatZeroAdd:
.2eb0	fa		plx				plx 								; return this value in R0
.2eb1	20 f9 33	jsr $33f9			jsr 	IFloatCopyFromRegister
.2eb4	18		clc				clc
.2eb5	60		rts				rts
.2eb6					_IFloatAddDecimals:
.2eb6	20 61 34	jsr $3461			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2eb9	f0 f3		beq $2eae			beq 	_IFloatAddExit
.2ebb	20 9f 34	jsr $349f			jsr 	IFloatNormalise 			; normalise RX
.2ebe	da		phx				phx 								; normalise R0
.2ebf	a2 08		ldx #$08			ldx 	#IFR0
.2ec1	20 61 34	jsr $3461			jsr 	IFloatCheckZero
.2ec4	f0 ea		beq $2eb0			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2ec6	20 9f 34	jsr $349f			jsr 	IFloatNormalise
.2ec9	fa		plx				plx
.2eca	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2ecc	29 3f		and #$3f			and 	#IFXMask
.2ece	38		sec				sec
.2ecf	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2ed1	85 20		sta $20				sta 	iTemp0
.2ed3	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2ed5	29 3f		and #$3f			and 	#IFXMask
.2ed7	38		sec				sec
.2ed8	e9 20		sbc #$20			sbc 	#$20
.2eda	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2edc	b0 02		bcs $2ee0			bcs 	_IFloatHaveLarger
.2ede	a5 20		lda $20				lda 	iTemp0
.2ee0					_IFloatHaveLarger:
.2ee0	18		clc				clc 								; get the actual one back.
.2ee1	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2ee3	20 f0 2e	jsr $2ef0			jsr 	_IFShiftXToA
.2ee6	da		phx				phx
.2ee7	a2 08		ldx #$08			ldx 	#IFR0
.2ee9	20 f0 2e	jsr $2ef0			jsr 	_IFShiftXToA
.2eec	fa		plx				plx
.2eed	4c 68 2e	jmp $2e68			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2ef0					_IFShiftXToA:
.2ef0	8d de 06	sta $06de			sta 	IFTarget
.2ef3	20 61 34	jsr $3461			jsr 	IFloatCheckZero 			; check adding zero ?
.2ef6	f0 11		beq $2f09			beq 	_IFSXExit
.2ef8					_IFSXLoop:
.2ef8	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2efa	29 3f		and #$3f			and 	#IFXMask
.2efc	cd de 06	cmp $06de			cmp 	IFTarget
.2eff	f0 08		beq $2f09			beq 	_IFSXExit
.2f01	20 97 34	jsr $3497			jsr 	IFloatShiftRight
.2f04	20 c1 34	jsr $34c1			jsr 	IFloatIncExponent
.2f07	80 ef		bra $2ef8			bra 	_IFSXLoop
.2f09					_IFSXExit:
.2f09	60		rts				rts
.06de					IFTarget:
>06de							.fill 	1
.2f0a					IFloatMultiply:
.2f0a	8e de 06	stx $06de			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2f0d	20 c2 2f	jsr $2fc2			jsr 	IFCalculateNewSign
.2f10	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2f12	05 0b		ora $0b				ora 	IFR0+IExp
.2f14	29 3f		and #$3f			and 	#IFXMask
.2f16	15 01		ora $01,x			ora 	IM1,x
.2f18	05 09		ora $09				ora 	IFR0+IM1
.2f1a	15 02		ora $02,x			ora 	IM2,x
.2f1c	05 0a		ora $0a				ora 	IFR0+IM2
.2f1e	d0 0a		bne $2f2a			bne 	_IFMStandard
.2f20	20 44 34	jsr $3444			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2f23	ad e0 06	lda $06e0			lda 	IFNewSign
.2f26	85 0b		sta $0b				sta 	IFR0+IExp
.2f28	18		clc				clc
.2f29	60		rts				rts
.2f2a					_IFMStandard:
.2f2a	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2f2c	20 b9 2f	jsr $2fb9			jsr 	IFMSignExtend
.2f2f	8d df 06	sta $06df			sta 	IFNewExponent
.2f32	a5 0b		lda $0b				lda 	IFR0+IExp
.2f34	20 b9 2f	jsr $2fb9			jsr 	IFMSignExtend
.2f37	18		clc				clc
.2f38	6d df 06	adc $06df			adc 	IFNewExponent
.2f3b	8d df 06	sta $06df			sta 	IFNewExponent
.2f3e	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2f40	20 0a 34	jsr $340a			jsr 	IFloatCopyToRegister
.2f43	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2f45	20 68 34	jsr $3468			jsr 	IFloatSetZero
.2f48					_IFMLoop:
.2f48	a2 14		ldx #$14			ldx 	#IFRTemp
.2f4a	20 61 34	jsr $3461			jsr 	IFloatCheckZero
.2f4d	f0 3a		beq $2f89			beq 	_IFMExit
.2f4f	ae de 06	ldx $06de			ldx 	IFTarget 					; look at adder MSB
.2f52	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2f54	10 03		bpl $2f59			bpl	 	_IFMTargetOkay
.2f56	20 aa 2f	jsr $2faa			jsr 	_IFMShiftAll
.2f59					_IFMTargetOkay:
.2f59	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2f5b	29 01		and #$01			and 	#1
.2f5d	f0 16		beq $2f75			beq 	_IFMNoAdd
.2f5f	ae de 06	ldx $06de			ldx 	IFTarget 					; add adder
.2f62	18		clc				clc
.2f63	a5 08		lda $08				lda 	IFR0+IM0
.2f65	75 00		adc $00,x			adc 		IM0,x
.2f67	85 08		sta $08				sta 	IFR0+IM0
.2f69	a5 09		lda $09				lda 	IFR0+IM1
.2f6b	75 01		adc $01,x			adc 		IM1,x
.2f6d	85 09		sta $09				sta 	IFR0+IM1
.2f6f	a5 0a		lda $0a				lda 	IFR0+IM2
.2f71	75 02		adc $02,x			adc 		IM2,x
.2f73	85 0a		sta $0a				sta 	IFR0+IM2
.2f75					_IFMNoAdd:
.2f75	a5 0a		lda $0a				lda 	IFR0+IM2
.2f77	10 03		bpl $2f7c			bpl 	_IFMResultOkay
.2f79	20 aa 2f	jsr $2faa			jsr 	_IFMShiftAll
.2f7c					_IFMResultOkay:
.2f7c	a2 14		ldx #$14			ldx 	#IFRTemp
.2f7e	20 97 34	jsr $3497			jsr 	IFloatShiftRight
.2f81	ae de 06	ldx $06de			ldx 	IFTarget
.2f84	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.2f87	80 bf		bra $2f48			bra 	_IFMLoop
.2f89					_IFMExit:
.2f89	ad df 06	lda $06df			lda 	IFNewExponent 				; validate new exponent.
.2f8c	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2f8e	90 0f		bcc $2f9f			bcc 	_IFMOkay
.2f90	c9 e0		cmp #$e0			cmp 	#$E0
.2f92	b0 0b		bcs $2f9f			bcs 	_IFMOkay
.2f94	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2f96	f0 10		beq $2fa8			beq 	_IFMError
.2f98	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2f9a	20 68 34	jsr $3468			jsr 	IFloatSetZero
.2f9d	18		clc				clc
.2f9e	60		rts				rts
.2f9f					_IFMOkay:
.2f9f	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2fa1	0d e0 06	ora $06e0			ora 	IFNewSign
.2fa4	85 0b		sta $0b				sta 	IFR0+IExp
.2fa6	18		clc				clc
.2fa7	60		rts				rts
.2fa8					_IFMError:
.2fa8	38		sec				sec
.2fa9	60		rts				rts
.2faa					_IFMShiftAll:
.2faa	a2 08		ldx #$08			ldx 	#IFR0
.2fac	20 97 34	jsr $3497			jsr 	IFloatShiftRight
.2faf	ae de 06	ldx $06de			ldx 	IFTarget
.2fb2	20 97 34	jsr $3497			jsr 	IFloatShiftRight
.2fb5	ee df 06	inc $06df			inc 	IFNewExponent
.2fb8	60		rts				rts
.2fb9					IFMSignExtend:
.2fb9	29 3f		and #$3f			and 	#IFXMask
.2fbb	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2fbd	90 02		bcc $2fc1			bcc 	_IFMNoSXX
.2fbf	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2fc1					_IFMNoSXX:
.2fc1	60		rts				rts
.2fc2					IFCalculateNewSign:
.2fc2	b5 03		lda $03,x			lda 	IExp,x
.2fc4	45 0b		eor $0b				eor 	IFR0+IExp
.2fc6	29 40		and #$40			and 	#IFSign
.2fc8	8d e0 06	sta $06e0			sta 	IFNewSign
.2fcb	60		rts				rts
.06df					IFNewExponent:
>06df							.fill 	1
.06e0					IFNewSign:
>06e0							.fill 	1
.2fcc					IFloatDivideInteger:
.2fcc	20 e5 2f	jsr $2fe5			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2fcf	b0 06		bcs $2fd7			bcs 	_IFDIExit
.2fd1	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2fd3	20 f9 33	jsr $33f9			jsr 	IFloatCopyFromRegister
.2fd6	18		clc				clc
.2fd7					_IFDIExit:
.2fd7	60		rts				rts
.2fd8					IFloatModulusInteger:
.2fd8	20 e5 2f	jsr $2fe5			jsr 	IFloatDivideIntegerCommon
.2fdb	b0 07		bcs $2fe4			bcs 	_IFMIExit
.2fdd	ae de 06	ldx $06de			ldx 	IFTarget
.2fe0	20 f9 33	jsr $33f9			jsr 	IFloatCopyFromRegister
.2fe3	18		clc				clc
.2fe4					_IFMIExit:
.2fe4	60		rts				rts
.2fe5					IFloatDivideIntegerCommon:
.2fe5	8e de 06	stx $06de			stx 	IFTarget  					; this is s1, s0 = R0
.2fe8	20 c2 2f	jsr $2fc2			jsr 	IFCalculateNewSign 			; calculate sign of result
.2feb	20 13 30	jsr $3013			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2fee	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2ff0	20 61 34	jsr $3461			jsr 	IFloatCheckZero
.2ff3	f0 1c		beq $3011			beq 	_IFDIDivZero
.2ff5	ae de 06	ldx $06de			ldx 	IFTarget 					; zero Rx (S1)
.2ff8	20 68 34	jsr $3468			jsr 	IFloatSetZero
.2ffb	5a		phy				phy
.2ffc	a0 18		ldy #$18			ldy 	#24
.2ffe					_IFDILoop:
.2ffe	20 24 30	jsr $3024			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3001	20 30 30	jsr $3030			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.3004	88		dey				dey
.3005	d0 f7		bne $2ffe			bne 	_IFDILoop 					; do it 24 times
.3007	7a		ply				ply
.3008	ad e0 06	lda $06e0			lda 	IFNewSign 					; set sign of result.
.300b	29 40		and #$40			and 	#IFSign
.300d	85 17		sta $17				sta 	IFRTemp+IExp
.300f	18		clc				clc 								; is okay.
.3010	60		rts				rts
.3011					_IFDIDivZero:
.3011	38		sec				sec
.3012	60		rts				rts
.3013					IFDCopyRXToRTemp:
.3013	b5 00		lda $00,x			lda 	IM0,x
.3015	85 14		sta $14				sta 	IFRTemp+IM0
.3017	b5 01		lda $01,x			lda 	IM1,x
.3019	85 15		sta $15				sta 	IFRTemp+IM1
.301b	b5 02		lda $02,x			lda 	IM2,x
.301d	85 16		sta $16				sta 	IFRTemp+IM2
.301f	b5 03		lda $03,x			lda 	IExp,x
.3021	85 17		sta $17				sta 	IFRTemp+IExp
.3023	60		rts				rts
.3024					IFDShiftSTempS1Left:
.3024	a2 14		ldx #$14			ldx 	#IFRTemp
.3026	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft
.3029	ae de 06	ldx $06de			ldx 	IFTarget
.302c	20 90 34	jsr $3490			jsr 	IFloatRotateLeft
.302f	60		rts				rts
.3030					IFDTrySubtract:
.3030	ae de 06	ldx $06de			ldx 	IFTarget 					; s1 = Rx
.3033	38		sec				sec 								; subtract, saving the results on the stack.
.3034	b5 00		lda $00,x			lda 	IM0,x
.3036	e5 08		sbc $08				sbc 	IFR0+IM0
.3038	48		pha				pha
.3039	b5 01		lda $01,x			lda 	IM1,x
.303b	e5 09		sbc $09				sbc 	IFR0+IM1
.303d	48		pha				pha
.303e	b5 02		lda $02,x			lda 	IM2,x
.3040	e5 0a		sbc $0a				sbc 	IFR0+IM2
.3042	b0 03		bcs $3047			bcs 	_IFDCanSubtract
.3044	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.3045	68		pla				pla
.3046	60		rts				rts
.3047					_IFDCanSubtract:
.3047	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.3049	68		pla				pla
.304a	95 01		sta $01,x			sta 	IM1,x
.304c	68		pla				pla
.304d	95 00		sta $00,x			sta 	IM0,x
.304f	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.3051	d0 06		bne $3059			bne 	_IFDCSExit
.3053	e6 15		inc $15				inc 	IFRTemp+IM1
.3055	d0 02		bne $3059			bne 	_IFDCSExit
.3057	e6 16		inc $16				inc 	IFRTemp+IM2
.3059					_IFDCSExit:
.3059	60		rts				rts
.305a					IFloatBitwiseAnd:
.305a	5a		phy				phy
.305b	20 9f 30	jsr $309f			jsr 	IFPreProcessBitwise 		; set up everything.
.305e	d0 0f		bne $306f			bne 	_IFBAExit
.3060					_IFBALoop:
.3060	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3063	35 00		and $00,x			and 	IM0,x
.3065	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3068	e8		inx				inx
.3069	c8		iny				iny
.306a	c0 03		cpy #$03			cpy 	#3
.306c	d0 f2		bne $3060			bne 	_IFBALoop
.306e	18		clc				clc
.306f					_IFBAExit:
.306f	7a		ply				ply
.3070	60		rts				rts
.3071					IFloatBitwiseOr:
.3071	5a		phy				phy
.3072	20 9f 30	jsr $309f			jsr 	IFPreProcessBitwise 		; set up everything.
.3075	d0 0f		bne $3086			bne 	_IFBAExit
.3077					_IFBALoop:
.3077	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.307a	15 00		ora $00,x			ora 	IM0,x
.307c	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.307f	e8		inx				inx
.3080	c8		iny				iny
.3081	c0 03		cpy #$03			cpy 	#3
.3083	d0 f2		bne $3077			bne 	_IFBALoop
.3085	18		clc				clc
.3086					_IFBAExit:
.3086	7a		ply				ply
.3087	60		rts				rts
.3088					IFloatBitwiseXor:
.3088	5a		phy				phy
.3089	20 9f 30	jsr $309f			jsr 	IFPreProcessBitwise 		; set up everything.
.308c	d0 0f		bne $309d			bne 	_IFBAExit
.308e					_IFBALoop:
.308e	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3091	55 00		eor $00,x			eor 	IM0,x
.3093	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3096	e8		inx				inx
.3097	c8		iny				iny
.3098	c0 03		cpy #$03			cpy 	#3
.309a	d0 f2		bne $308e			bne 	_IFBALoop
.309c	18		clc				clc
.309d					_IFBAExit:
.309d	7a		ply				ply
.309e	60		rts				rts
.309f					IFPreProcessBitwise:
.309f	a0 00		ldy #$00			ldy 	#0 							; set index.
.30a1	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.30a3	15 03		ora $03,x			ora 	IExp,x
.30a5	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.30a7	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.30a9	38		sec				sec 								; carry set just in cases.
.30aa	60		rts				rts
.30ab					IFloatAbsoluteR0:
.30ab	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.30ad	29 bf		and #$bf			and 	#IFSign ^ 255
.30af	85 0b		sta $0b				sta 	IFR0+IExp
.30b1	18		clc				clc
.30b2	60		rts				rts
.30b3					IFloatSquareRootR0:
.30b3	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.30b5	20 61 34	jsr $3461			jsr 	IFloatCheckZero
.30b8	f0 2e		beq $30e8			beq 	_IFSRZero
.30ba	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.30bc	29 40		and #$40			and 	#IFSign
.30be	d0 2f		bne $30ef			bne 	_IFSRFail
.30c0	20 9f 34	jsr $349f			jsr 	IFloatNormalise 			; it will work better !
.30c3	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.30c5	20 0a 34	jsr $340a			jsr 	IFloatCopyToRegister
.30c8	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.30ca	20 b9 2f	jsr $2fb9			jsr 	IFMSignExtend 				; sign extended version of the exponent
.30cd	18		clc				clc
.30ce	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.30d0	85 0b		sta $0b				sta 	IFR0+IExp
.30d2	4a		lsr a				lsr 	a 							; which we can halve.
.30d3	38		sec				sec 								; convert back
.30d4	e9 17		sbc #$17			sbc 	#23
.30d6	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.30d8	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.30da	20 f1 30	jsr $30f1			jsr 	_IFSRNewton
.30dd	20 f1 30	jsr $30f1			jsr 	_IFSRNewton
.30e0	20 f1 30	jsr $30f1			jsr 	_IFSRNewton
.30e3	20 f1 30	jsr $30f1			jsr 	_IFSRNewton
.30e6	18		clc				clc
.30e7	60		rts				rts
.30e8					_IFSRZero:
.30e8	a2 08		ldx #$08			ldx 	#IFR0
.30ea	20 68 34	jsr $3468			jsr 	IFloatSetZero
.30ed	18		clc				clc
.30ee	60		rts				rts
.30ef					_IFSRFail:
.30ef	38		sec				sec
.30f0	60		rts				rts
.30f1					_IFSRNewton:
.30f1	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.30f3	20 b7 33	jsr $33b7			jsr 	IFloatPushRx
.30f6	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.30f8	20 b7 33	jsr $33b7			jsr 	IFloatPushRx
.30fb	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.30fd	20 8c 31	jsr $318c			jsr 	IFloatDivideFloat
.3100	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.3102	20 d8 33	jsr $33d8			jsr 	IFloatPullRx
.3105	20 60 2e	jsr $2e60			jsr 	IFloatAdd 					; now guess + original/guess
.3108	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.310a	20 97 34	jsr $3497			jsr 	IFloatShiftRight
.310d	a2 0c		ldx #$0c			ldx 	#IFR1
.310f	20 d8 33	jsr $33d8			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.3112	60		rts				rts
.3113					IFloatFractionalR0:
.3113	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.3115	29 3f		and #$3f			and 	#IFXMask
.3117	f0 17		beq $3130			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.3119	20 ab 30	jsr $30ab			jsr 	IFloatAbsoluteR0 			; absolute value R0
.311c	a2 08		ldx #$08			ldx 	#IFR0
.311e	20 9f 34	jsr $349f			jsr 	IFloatNormalise 			; normalise R0
.3121	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.3123	20 0a 34	jsr $340a			jsr 	IFloatCopyToRegister
.3126	20 69 31	jsr $3169			jsr 	IFloatIntegerR0 			; take integer part of R0
.3129	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.312b	20 59 2e	jsr $2e59			jsr 	IFloatSubtract
.312e	80 05		bra $3135			bra 	_FIPExit
.3130					_FIPZero:
.3130	a2 08		ldx #$08			ldx 	#IFR0
.3132	20 68 34	jsr $3468			jsr 	IFloatSetZero
.3135					_FIPExit:
.3135	18		clc				clc
.3136	60		rts				rts
.3137					IFloatCompare:
.3137	20 59 2e	jsr $2e59			jsr 	IFloatSubtract 				; subtract R0 from RX.
.313a	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.313c	05 0b		ora $0b				ora 	IFR0+IExp
.313e	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.3140	29 3f		and #$3f			and 	#IFXMask
.3142	d0 19		bne $315d			bne 	_IFCNonInteger
.3144	20 61 34	jsr $3461			jsr 	IFloatCheckZero 			; check if zero
.3147	f0 0f		beq $3158			beq 	_IFCZero
.3149					_IFCReturnSign:
.3149	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.314b	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.314d	48		pha				pha
.314e	a9 01		lda #$01			lda 	#1
.3150	20 6a 34	jsr $346a			jsr 	IFloatSetByte 				; return to +1
.3153	68		pla				pla 								; sign bit back
.3154	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.3156	18		clc				clc
.3157	60		rts				rts
.3158					_IFCZero:
.3158	20 68 34	jsr $3468			jsr 	IFloatSetZero
.315b	18		clc				clc
.315c	60		rts				rts
.315d					_IFCNonInteger:
.315d	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.315f	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.3161	05 09		ora $09				ora 	IFR0+IM1
.3163	05 0a		ora $0a				ora 	IFR0+IM2
.3165	f0 f1		beq $3158			beq 	_IFCZero 					; near enough !
.3167	80 e0		bra $3149			bra 	_IFCReturnSign 				; return the sign of the difference.
.3169					IFloatIntegerR0:
.3169	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.316b	29 3f		and #$3f			and 	#IFXMask
.316d	f0 1b		beq $318a			beq 	_FIPExit 					; if so do nothing
.316f	a2 08		ldx #$08			ldx 	#IFR0
.3171	20 9f 34	jsr $349f			jsr 	IFloatNormalise 			; normalise
.3174	20 61 34	jsr $3461			jsr 	IFloatCheckZero 			; is it zero ?
.3177	f0 0e		beq $3187			beq 	_FIPZero 					; if so return zero.
.3179					_FIPShift:
.3179	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.317b	29 20		and #$20			and 	#$20 						; still -ve
.317d	f0 0b		beq $318a			beq 	_FIPExit
.317f	20 97 34	jsr $3497			jsr 	IFloatShiftRight 			; shift mantissa right
.3182	20 c1 34	jsr $34c1			jsr 	IFloatIncExponent 			; bump exponent
.3185	80 f2		bra $3179			bra 	_FIPShift
.3187					_FIPZero:
.3187	20 68 34	jsr $3468			jsr 	IFloatSetZero
.318a					_FIPExit:
.318a	18		clc				clc
.318b	60		rts				rts
.318c					IFloatDivideFloat:
.318c	8e de 06	stx $06de			stx 	IFTarget  					; this is s1, s0 = R0
.318f	20 c2 2f	jsr $2fc2			jsr 	IFCalculateNewSign 			; calculate sign of result
.3192	20 9f 34	jsr $349f			jsr 	IFloatNormalise 			; normalise RX
.3195	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.3197	20 9f 34	jsr $349f			jsr 	IFloatNormalise
.319a	20 61 34	jsr $3461			jsr 	IFloatCheckZero
.319d	f0 56		beq $31f5			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.319f	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.31a1	20 b9 2f	jsr $2fb9			jsr 	IFMSignExtend
.31a4	8d df 06	sta $06df			sta 	IFNewExponent
.31a7	ae de 06	ldx $06de			ldx 	IFTarget 					; calculate s1.exponent
.31aa	b5 03		lda $03,x			lda 	IExp,x
.31ac	20 b9 2f	jsr $2fb9			jsr 	IFMSignExtend
.31af	38		sec				sec
.31b0	ed df 06	sbc $06df			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.31b3	38		sec				sec
.31b4	e9 17		sbc #$17			sbc 	#23
.31b6	8d df 06	sta $06df			sta 	IFNewExponent
.31b9	20 f7 31	jsr $31f7			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.31bc	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.31be	10 08		bpl $31c8			bpl 	_IFDFNoShiftResult
.31c0	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.31c2	20 97 34	jsr $3497			jsr 	IFloatShiftRight
.31c5	ee df 06	inc $06df			inc 	IFNewExponent
.31c8					_IFDFNoShiftResult:
.31c8	ad df 06	lda $06df			lda 	IFNewExponent 				; underflow/overflow check.
.31cb	30 06		bmi $31d3			bmi 	_IFDFCheckUnderflow
.31cd	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.31cf	b0 24		bcs $31f5			bcs 	_IFDFDivZero
.31d1	80 11		bra $31e4			bra		_IFDFExit
.31d3					_IFDFCheckUnderflow:
.31d3	ad df 06	lda $06df			lda 	IFNewExponent 				; shift into a legal exponent.
.31d6	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.31d8	b0 0a		bcs $31e4			bcs 	_IFDFExit
.31da	ee df 06	inc $06df			inc 	IFNewExponent
.31dd	a2 14		ldx #$14			ldx 	#IFRTemp
.31df	20 97 34	jsr $3497			jsr 	IFloatShiftRight
.31e2	80 ef		bra $31d3			bra 	_IFDFCheckUnderflow
.31e4					_IFDFExit:
.31e4	ad df 06	lda $06df			lda 	IFNewExponent 				; combine exponent and sign.
.31e7	29 3f		and #$3f			and 	#IFXMask
.31e9	0d e0 06	ora $06e0			ora 	IFNewSign
.31ec	85 17		sta $17				sta 	IFRTemp+IExp
.31ee	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.31f0	20 f9 33	jsr $33f9			jsr 	IFloatCopyFromRegister
.31f3	18		clc				clc
.31f4	60		rts				rts
.31f5					_IFDFDivZero:
.31f5	38		sec				sec
.31f6	60		rts				rts
.31f7					IFloatDivideSupport:
.31f7	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.31f9	20 68 34	jsr $3468			jsr 	IFloatSetZero
.31fc	5a		phy				phy 								; main division loop x 23
.31fd	a0 17		ldy #$17			ldy 	#23
.31ff					_IFDSLoop:
.31ff	20 30 30	jsr $3030			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.3202	20 24 30	jsr $3024			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3205	88		dey				dey
.3206	d0 f7		bne $31ff			bne 	_IFDSLoop 					; do it 24 times
.3208	7a		ply				ply
.3209	60		rts				rts
.320a					IFloatIntegerToStringR0:
.320a	8d e1 06	sta $06e1			sta 	IFBase 						; save base to use.
.320d	20 e9 34	jsr $34e9			jsr 	IFloatBufferReset			; empty buffer
.3210	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.3212	29 3f		and #$3f			and 	#IFXMask
.3214	d0 1d		bne $3233			bne 	_IFIFail
.3216	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.3218	20 61 34	jsr $3461			jsr 	IFloatCheckZero
.321b	f0 0e		beq $322b			beq 	_IFINotNegative
.321d	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.321f	29 40		and #$40			and 	#IFSign
.3221	f0 08		beq $322b			beq 	_IFINotNegative
.3223	a9 2d		lda #$2d			lda 	#"-"						; output -
.3225	20 f8 34	jsr $34f8			jsr 	IFloatBufferWrite
.3228	20 73 34	jsr $3473			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.322b					_IFINotNegative:
.322b	20 35 32	jsr $3235			jsr 	_IFIRecursiveConvert 		; start converting
.322e	20 f0 34	jsr $34f0			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.3231	18		clc				clc
.3232	60		rts				rts
.3233					_IFIFail:
.3233	38		sec				sec
.3234	60		rts				rts
.3235					_IFIRecursiveConvert:
.3235	a2 0c		ldx #$0c			ldx 	#IFR1
.3237	20 0a 34	jsr $340a			jsr 	IFloatCopyToRegister 		; R0->R1
.323a	a2 08		ldx #$08			ldx 	#IFR0
.323c	ad e1 06	lda $06e1			lda 	IFBase 						; Base -> R0
.323f	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.3242	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.3244	20 cc 2f	jsr $2fcc			jsr 	IFloatDivideInteger
.3247	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.3249	20 61 34	jsr $3461			jsr 	IFloatCheckZero
.324c	f0 09		beq $3257			beq 	_IFIOutDigit
.324e	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.3250	48		pha				pha
.3251	20 35 32	jsr $3235			jsr 	_IFIRecursiveConvert 		; convert the divide result
.3254	68		pla				pla
.3255	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.3257					_IFIOutDigit:
.3257	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.3259	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.325b	90 02		bcc $325f			bcc 	_IFINotHex
.325d	69 06		adc #$06			adc 	#6
.325f					_IFINotHex:
.325f	69 30		adc #$30			adc 	#48
.3261	20 f8 34	jsr $34f8			jsr 	IFloatBufferWrite 			; write character to buffer.
.3264	60		rts				rts
.06e1					IFBase:
>06e1							.fill 	1
.3265					IFloatFloatToStringR0:
.3265	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.3267	20 b7 33	jsr $33b7			jsr 	IFloatPushRx
.326a	20 0a 34	jsr $340a			jsr 	IFloatCopyToRegister
.326d	20 69 31	jsr $3169			jsr 	IFloatIntegerR0				; make R0 integer
.3270	a9 0a		lda #$0a			lda 	#10 						; base 10.
.3272	20 0a 32	jsr $320a			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.3275	9c e2 06	stz $06e2			stz 	IFloatDecimalCount 			; zero the decimal count.
.3278	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.327a	29 3f		and #$3f			and 	#IFXMask
.327c	f0 44		beq $32c2			beq 	_IFFSExit
.327e					_IFloatFracLoop:
.327e	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.3280	20 f9 33	jsr $33f9			jsr 	IFloatCopyFromRegister
.3283	20 13 31	jsr $3113			jsr 	IFloatFractionalR0
.3286	20 9f 34	jsr $349f			jsr 	IFloatNormalise
.3289	a2 10		ldx #$10			ldx 	#IFR2
.328b	20 0a 34	jsr $340a			jsr 	IFloatCopyToRegister 		; copy to back R2
.328e	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.3290	a9 0a		lda #$0a			lda 	#10
.3292	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.3295	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.3297	20 0a 2f	jsr $2f0a			jsr 	IFloatMultiply
.329a	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.329c	20 0a 34	jsr $340a			jsr 	IFloatCopyToRegister
.329f	20 69 31	jsr $3169			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.32a2	ad e2 06	lda $06e2			lda 	IFloatDecimalCount 			; done 3 dp, no more
.32a5	c9 03		cmp #$03			cmp 	#3
.32a7	f0 16		beq $32bf			beq 	_IFFSExitStripZero
.32a9	ad e2 06	lda $06e2			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.32ac	d0 05		bne $32b3			bne 	_IFloatNotFirst
.32ae	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.32b0	20 f8 34	jsr $34f8			jsr 	IFloatBufferWrite
.32b3					_IFloatNotFirst:
.32b3	ee e2 06	inc $06e2			inc 	IFloatDecimalCount
.32b6	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.32b8	09 30		ora #$30			ora 	#"0"						; ASCII
.32ba	20 f8 34	jsr $34f8			jsr 	IFloatBufferWrite 			; write to the buffer.
.32bd	80 bf		bra $327e			bra 	_IFloatFracLoop
.32bf					_IFFSExitStripZero:
.32bf	20 07 35	jsr $3507			jsr 	IFloatStripTrailingZeros
.32c2					_IFFSExit:
.32c2	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.32c4	20 d8 33	jsr $33d8			jsr 	IFloatPullRx
.32c7	20 f0 34	jsr $34f0			jsr 	IFloatGetBufferAddress
.32ca	18		clc				clc
.32cb	60		rts				rts
.06e2					IFloatDecimalCount:
>06e2							.fill 	1
.32cc					IFloatStringToFloatR0:
.32cc	8d e3 06	sta $06e3			sta 	IFCount 					; save length and positions out.
.32cf	86 20		stx $20				stx 	iTemp0
.32d1	84 21		sty $21				sty 	iTemp0+1
.32d3	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.32d5	20 68 34	jsr $3468			jsr 	IFloatSetZero
.32d8	9c e4 06	stz $06e4			stz 	IFSignFlag 					; clear the sign flag
.32db	20 68 33	jsr $3368			jsr 	IFSTFGetNext 				; get first
.32de	f0 1b		beq $32fb			beq 	_IFSTFFail 					; no character, fail.
.32e0	90 10		bcc $32f2			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.32e2	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.32e4	d0 15		bne $32fb			bne 	_IFSTFFail
.32e6	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.32e8	8d e4 06	sta $06e4			sta 	IFSignFlag
.32eb					_IFSTFLoop:
.32eb	20 68 33	jsr $3368			jsr 	IFSTFGetNext 				; get next character
.32ee	b0 0b		bcs $32fb			bcs 	_IFSTFFail 					; bad character.
.32f0	f0 11		beq $3303			beq 	_IFSTFExit 					; end of data
.32f2					_IFSTFHaveChar:
.32f2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.32f4	f0 08		beq $32fe			beq 	_IFSTFDecimal
.32f6	20 8c 33	jsr $338c			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.32f9	80 f0		bra $32eb			bra 	_IFSTFLoop 					; keep going until . or end.
.32fb					_IFSTFFail:
.32fb	38		sec				sec
.32fc	80 0d		bra $330b			bra 	_IFSTFReturn
.32fe					_IFSTFDecimal:
.32fe	20 13 33	jsr $3313			jsr 	IFSTFDecimal 				; call the decimal places code.
.3301	b0 08		bcs $330b			bcs 	_IFSTFReturn 				; error
.3303					_IFSTFExit:
.3303	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.3305	0d e4 06	ora $06e4			ora 	IFSignFlag
.3308	85 0b		sta $0b				sta 	IFR0+IExp
.330a	18		clc				clc
.330b					_IFSTFReturn:
.330b	60		rts				rts
.330c					IFloatAddDecimalToR0:
.330c	8d e3 06	sta $06e3			sta 	IFCount 					; save it out.
.330f	86 20		stx $20				stx 	iTemp0
.3311	84 21		sty $21				sty 	iTemp0+1
.3313					IFSTFDecimal:
.3313	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.3315	20 b7 33	jsr $33b7			jsr 	IFloatPushRx
.3318	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.331a	20 68 34	jsr $3468			jsr 	IFloatSetZero
.331d	9c e5 06	stz $06e5			stz 	IFDecimalPlaces 			; zero DP.
.3320					_IFSTDLoop:
.3320	20 68 33	jsr $3368			jsr 	IFSTFGetNext 				; get next
.3323	b0 41		bcs $3366			bcs 	_IFSTFFail2 				; bad character.
.3325	f0 11		beq $3338			beq 	_IFSTFComplete 				; end of data, work out the result.
.3327	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.3329	f0 39		beq $3364			beq 	_IFSTFExit2
.332b	20 8c 33	jsr $338c			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.332e	ee e5 06	inc $06e5			inc 	IFDecimalPlaces 			; count decimals
.3331	ad e5 06	lda $06e5			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.3334	c9 03		cmp #$03			cmp 	#3
.3336	90 e8		bcc $3320			bcc 	_IFSTDLoop
.3338					_IFSTFComplete:
.3338	ad e5 06	lda $06e5			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.333b	f0 27		beq $3364			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.333d	3a		dec a				dec 	a 							; table indexed from 1.
.333e	0a		asl a				asl 	a
.333f	0a		asl a				asl 	a
.3340	aa		tax				tax
.3341	bd a3 33	lda $33a3,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.3344	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.3346	bd a4 33	lda $33a4,x			lda 	TableTen+1,x
.3349	85 0d		sta $0d				sta  	IFR1+IM1
.334b	bd a5 33	lda $33a5,x			lda 	TableTen+2,x
.334e	85 0e		sta $0e				sta  	IFR1+IM2
.3350	bd a6 33	lda $33a6,x			lda 	TableTen+3,x
.3353	85 0f		sta $0f				sta  	IFR1+IExp
.3355	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.3357	20 0a 2f	jsr $2f0a			jsr 	IFloatMultiply
.335a	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.335c	20 d8 33	jsr $33d8			jsr 	IFloatPullRx
.335f	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.3361	20 60 2e	jsr $2e60			jsr 	IFloatAdd
.3364					_IFSTFExit2:
.3364	18		clc				clc
.3365	60		rts				rts
.3366					_IFSTFFail2:
.3366	38		sec				sec
.3367	60		rts				rts
.3368					IFSTFGetNext:
.3368	ad e3 06	lda $06e3			lda 	IFCount  					; if count is zero, return with Z set.
.336b	f0 19		beq $3386			beq 	_IFSTFReturnOk
.336d	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.336f	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3371	d0 02		bne $3375			bne 	_IFSTFGNNoCarry
.3373	e6 21		inc $21				inc 	iTemp0+1
.3375					_IFSTFGNNoCarry:
.3375	ce e3 06	dec $06e3			dec 	IFCount 					; dec count.
.3378	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.337a	f0 08		beq $3384			beq 	_IFSTFGOkay
.337c	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.337e	90 08		bcc $3388			bcc 	_IFSTFGFail
.3380	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3382	b0 04		bcs $3388			bcs 	_IFSTFGFail
.3384					_IFSTFGOkay:
.3384	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3386					_IFSTFReturnOk:
.3386	18		clc				clc
.3387	60		rts				rts
.3388					_IFSTFGFail:
.3388	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.338a	38		sec				sec
.338b	60		rts				rts
.338c					IFSTFAddR0:
.338c	29 0f		and #$0f			and 	#15 						; to int value
.338e	48		pha				pha 								; save it.
.338f	a9 0a		lda #$0a			lda 	#10
.3391	a2 0c		ldx #$0c			ldx 	#IFR1
.3393	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.3396	20 0a 2f	jsr $2f0a			jsr 	IFloatMultiply
.3399	68		pla				pla
.339a	a2 0c		ldx #$0c			ldx 	#IFR1
.339c	20 6a 34	jsr $346a			jsr 	IFloatSetByte
.339f	20 60 2e	jsr $2e60			jsr 	IFloatAdd
.33a2	60		rts				rts
.06e3					IFCount:
>06e3							.fill 	1
.06e4					IFSignFlag:
>06e4							.fill 	1
.06e5					IFDecimalPlaces:
>06e5							.fill 	1
.33a3					TableTen:
>33a3	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>33a7	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>33ab	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>33af	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>33b3	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.33b7					IFloatPushRx:
.33b7	5a		phy				phy
.33b8	ac e6 06	ldy $06e6			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.33bb	b5 00		lda $00,x			lda 	IM0,x
.33bd	99 e7 06	sta $06e7,y			sta 	IFStack,y
.33c0	b5 01		lda $01,x			lda 	IM1,x
.33c2	99 e8 06	sta $06e8,y			sta 	IFStack+1,y
.33c5	b5 02		lda $02,x			lda 	IM2,x
.33c7	99 e9 06	sta $06e9,y			sta 	IFStack+2,y
.33ca	b5 03		lda $03,x			lda 	IExp,x
.33cc	99 ea 06	sta $06ea,y			sta 	IFStack+3,y
.33cf	c8		iny				iny
.33d0	c8		iny				iny
.33d1	c8		iny				iny
.33d2	c8		iny				iny
.33d3	8c e6 06	sty $06e6			sty 	IFStackIndex 				; update SP
.33d6	7a		ply				ply
.33d7	60		rts				rts
.33d8					IFloatPullRx:
.33d8	5a		phy				phy
.33d9	ac e6 06	ldy $06e6			ldy 	IFStackIndex	 			; decrement SP
.33dc	88		dey				dey
.33dd	88		dey				dey
.33de	88		dey				dey
.33df	88		dey				dey
.33e0	b9 e7 06	lda $06e7,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.33e3	95 00		sta $00,x			sta 	IM0,x
.33e5	b9 e8 06	lda $06e8,y			lda 	IFStack+1,y
.33e8	95 01		sta $01,x			sta 	IM1,x
.33ea	b9 e9 06	lda $06e9,y			lda 	IFStack+2,y
.33ed	95 02		sta $02,x			sta 	IM2,x
.33ef	b9 ea 06	lda $06ea,y			lda 	IFStack+3,y
.33f2	95 03		sta $03,x			sta 	IExp,x
.33f4	8c e6 06	sty $06e6			sty 	IFStackIndex 				; update SP
.33f7	7a		ply				ply
.33f8	60		rts				rts
.06e6					IFStackIndex:
>06e6							.fill 	1
.06e7					IFStack:
>06e7							.fill 	16*4
.33f9					IFloatCopyFromRegister:
.33f9	b5 00		lda $00,x			lda 	0,x
.33fb	85 08		sta $08				sta 	IFR0
.33fd	b5 01		lda $01,x			lda 	1,x
.33ff	85 09		sta $09				sta 	IFR0+1
.3401	b5 02		lda $02,x			lda 	2,x
.3403	85 0a		sta $0a				sta 	IFR0+2
.3405	b5 03		lda $03,x			lda 	3,x
.3407	85 0b		sta $0b				sta 	IFR0+3
.3409	60		rts				rts
.340a					IFloatCopyToRegister:
.340a	a5 08		lda $08				lda 	IFR0
.340c	95 00		sta $00,x			sta 	0,x
.340e	a5 09		lda $09				lda 	IFR0+1
.3410	95 01		sta $01,x			sta 	1,x
.3412	a5 0a		lda $0a				lda 	IFR0+2
.3414	95 02		sta $02,x			sta 	2,x
.3416	a5 0b		lda $0b				lda 	IFR0+3
.3418	95 03		sta $03,x			sta 	3,x
.341a	60		rts				rts
.341b					IFloatLoadInline:
.341b	68		pla				pla 								; pop address off to iTemp0
.341c	85 20		sta $20				sta 	iTemp0
.341e	68		pla				pla
.341f	85 21		sta $21				sta 	iTemp0+1
.3421	a0 01		ldy #$01			ldy 	#1
.3423	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.3425	95 00		sta $00,x			sta 	0,x
.3427	c8		iny				iny
.3428	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.342a	95 01		sta $01,x			sta 	1,x
.342c	c8		iny				iny
.342d	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.342f	95 02		sta $02,x			sta 	2,x
.3431	c8		iny				iny
.3432	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.3434	95 03		sta $03,x			sta 	3,x
.3436	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.3437	a5 20		lda $20				lda 	iTemp0
.3439	69 05		adc #$05			adc 	#5
.343b	85 20		sta $20				sta 	iTemp0
.343d	90 02		bcc $3441			bcc 	_IFLINoCarry
.343f	e6 21		inc $21				inc 	iTemp0+1
.3441					_IFLINoCarry:
.3441	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3444					IFloatMultiply8BitRx:
.3444	5a		phy		        phy
.3445	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3447	a4 08		ldy $08		        ldy     IFR0+IM0
.3449	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.344a	85 08		sta $08		        sta     IFR0+IM0
.344c	84 09		sty $09		        sty     IFR0+IM1
.344e	a9 00		lda #$00	        lda     #0
.3450	a0 08		ldy #$08	        ldy     #8
.3452					_IFMLoop:
.3452	90 03		bcc $3457	        bcc     _IFMNoAdd
.3454	18		clc		        clc
.3455	65 09		adc $09		        adc     IFR0+IM1
.3457					_IFMNoAdd:
.3457	6a		ror a		        ror     a
.3458	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.345a	88		dey		        dey
.345b	d0 f5		bne $3452	        bne     _IFMLoop
.345d	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.345f	7a		ply		        ply
.3460	60		rts		        rts
.3461					IFloatCheckZero:
.3461	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.3463	15 01		ora $01,x			ora 	IM1,x
.3465	15 02		ora $02,x			ora 	IM2,x
.3467	60		rts				rts
.3468					IFloatSetZero:
.3468	a9 00		lda #$00			lda 	#0
.346a					IFloatSetByte:
.346a	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.346c	74 01		stz $01,x			stz 	IM1,x
.346e	74 02		stz $02,x			stz 	IM2,x
.3470	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3472	60		rts				rts
.3473					IFloatNegate:
.3473	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3475	49 40		eor #$40			eor 	#IFSign
.3477	95 03		sta $03,x			sta 	IExp,x
.3479	18		clc				clc
.347a	60		rts				rts
.347b					IFloatMantissaNegate:
.347b	38		sec				sec 								; when you want a real 2's complement negative value.
.347c	a9 00		lda #$00			lda 	#0
.347e	f5 00		sbc $00,x			sbc 	IM0,x
.3480	95 00		sta $00,x			sta 	IM0,x
.3482	a9 00		lda #$00			lda 	#0
.3484	f5 01		sbc $01,x			sbc 	IM1,x
.3486	95 01		sta $01,x			sta 	IM1,x
.3488	a9 00		lda #$00			lda 	#0
.348a	f5 02		sbc $02,x			sbc 	IM2,x
.348c	95 02		sta $02,x			sta 	IM2,x
.348e	60		rts				rts
.348f					IFloatShiftLeft:
.348f	18		clc				clc
.3490					IFloatRotateLeft:
.3490	36 00		rol $00,x			rol 	IM0,x
.3492	36 01		rol $01,x			rol 	IM1,x
.3494	36 02		rol $02,x			rol 	IM2,x
.3496	60		rts				rts
.3497					IFloatShiftRight:
.3497	18		clc				clc
.3498					IFloatRotateRight:
.3498	76 02		ror $02,x			ror 	IM2,x
.349a	76 01		ror $01,x			ror 	IM1,x
.349c	76 00		ror $00,x			ror 	IM0,x
.349e	60		rts				rts
.349f					IFloatNormalise:
.349f	20 61 34	jsr $3461			jsr 	IFloatCheckZero 			; is it zero
.34a2	f0 18		beq $34bc			beq 	_IFNExitZero 				; if so exit
.34a4					_IFNLoop:
.34a4	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.34a6	29 c0		and #$c0			and 	#$C0
.34a8	c9 40		cmp #$40			cmp 	#$40
.34aa	f0 13		beq $34bf			beq 	_IFNExitOkay 				; if so , then we are done.
.34ac	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.34ae	29 3f		and #$3f			and 	#$3F
.34b0	c9 20		cmp #$20			cmp 	#$20
.34b2	f0 0b		beq $34bf			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.34b4	20 d5 34	jsr $34d5			jsr 	IFloatDecExponent
.34b7	20 8f 34	jsr $348f			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.34ba	80 e8		bra $34a4			bra 	_IFNLoop
.34bc					_IFNExitZero:
.34bc	20 68 34	jsr $3468			jsr 	IFloatSetZero 				; set the result to zero
.34bf					_IFNExitOkay:
.34bf	18		clc				clc  								; return with CC.
.34c0	60		rts				rts
.34c1					IFloatIncExponent:
.34c1	b5 03		lda $03,x			lda 	IExp,x
.34c3	48		pha				pha
.34c4	29 c0		and #$c0			and 	#$C0
.34c6	8d 27 07	sta $0727			sta 	IFXTemp
.34c9	68		pla				pla
.34ca	1a		inc a				inc 	a
.34cb	29 3f		and #$3f			and 	#$3F
.34cd	48		pha				pha
.34ce	0d 27 07	ora $0727			ora 	IFXTemp
.34d1	95 03		sta $03,x			sta 	IExp,x
.34d3	68		pla				pla
.34d4	60		rts				rts
.34d5					IFloatDecExponent:
.34d5	b5 03		lda $03,x			lda 	IExp,x
.34d7	48		pha				pha
.34d8	29 c0		and #$c0			and 	#$C0
.34da	8d 27 07	sta $0727			sta 	IFXTemp
.34dd	68		pla				pla
.34de	3a		dec a				dec 	a
.34df	29 3f		and #$3f			and 	#$3F
.34e1	48		pha				pha
.34e2	0d 27 07	ora $0727			ora 	IFXTemp
.34e5	95 03		sta $03,x			sta 	IExp,x
.34e7	68		pla				pla
.34e8	60		rts				rts
.0727					IFXTemp:
>0727							.fill 	1
.34e9					IFloatBufferReset:
.34e9	9c 28 07	stz $0728			stz 	IFBufferCount
.34ec	9c 29 07	stz $0729			stz 	IFBuffer
.34ef	60		rts				rts
.34f0					IFloatGetBufferAddress:
.34f0	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.34f2	a2 28		ldx #$28			ldx 	#(IFBufferCount & $FF)
.34f4	ad 28 07	lda $0728			lda 	IFBufferCount
.34f7	60		rts				rts
.34f8					IFloatBufferWrite:
.34f8	da		phx				phx
.34f9	ae 28 07	ldx $0728			ldx 	IFBufferCount
.34fc	9d 29 07	sta $0729,x			sta 	IFBuffer,x
.34ff	9e 2a 07	stz $072a,x			stz 	IFBuffer+1,x
.3502	ee 28 07	inc $0728			inc 	IFBufferCount
.3505	fa		plx				plx
.3506	60		rts				rts
.3507					IFloatStripTrailingZeros:
.3507	ae 28 07	ldx $0728			ldx 	IFBufferCount
.350a	bd 28 07	lda $0728,x			lda 	IFBuffer-1,x
.350d	c9 30		cmp #$30			cmp		#"0"
.350f	d0 0f		bne $3520			bne 	_IFSTExit
.3511	bd 27 07	lda $0727,x			lda 	IFBuffer-2,x
.3514	c9 2e		cmp #$2e			cmp 	#"."
.3516	f0 08		beq $3520			beq 	_IFSTExit
.3518	ce 28 07	dec $0728			dec 	IFBufferCount
.351b	9e 28 07	stz $0728,x			stz 	IFBuffer-1,x
.351e	80 e7		bra $3507			bra 	IFloatStripTrailingZeros
.3520					_IFSTExit:
.3520	60		rts				rts
.0728					IFBufferCount:
>0728							.fill 	1
.0729					IFBuffer:
>0729							.fill 	25
.3521					IFloatCheckRange:
.3521	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.3523	09 40		ora #$40			ora 	#IFSign
.3525	85 0b		sta $0b				sta 	IFR0+IExp
.3527	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.3529	20 60 2e	jsr $2e60			jsr 	IFloatAdd 					; add allowed to error.
.352c	a2 08		ldx #$08			ldx 	#IFR0
.352e	20 61 34	jsr $3461			jsr 	IFloatCheckZero 			; error if < 0
.3531	f0 06		beq $3539			beq 	_IFAOkay
.3533	a5 0b		lda $0b				lda 	IFR0+IExp
.3535	29 40		and #$40			and 	#IFSign
.3537	d0 01		bne $353a			bne 	_IFAFail
.3539					_IFAOkay:
.3539	60		rts				rts
.353a					_IFAFail:
.353a	38		sec				sec
.353b	68		pla				pla 								; get address - 2
.353c	e9 02		sbc #$02			sbc 	#2
.353e	aa		tax				tax
.353f	68		pla				pla
.3540	e9 00		sbc #$00			sbc 	#0
.3542	a8		tay				tay
.3543	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3545					_IFAStop:
>3545	db						.byte 	$DB 						; display an error AA ADR ADR
.3546	80 fd		bra $3545			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
