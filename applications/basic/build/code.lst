
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3400" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Fri Jun  9 16:34:11 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3400					BASICCODE=$3400
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 34		ldx #$34			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 5b 1e	jsr $1e5b			jsr 	PGMSetBaseAddress
.1007	20 9a 29	jsr $299a			jsr 	IFInitialise 				; setup math library
.100a	4c d2 13	jmp $13d2			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$aa					PR_READ = $aa
=$ab					PR_DATA = $ab
=$ac					PR_RESTORE = $ac
=$ac					PR_STANDARD_LAST = $ac
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 2e 16	jsr $162e			jsr 	EXPEvalNumber
.1010	a2 08		ldx #$08			ldx 	#IFR0
.1012	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c c0 24	jmp $24c0		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.101d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.101f	f0 14		beq $1035			beq 	_CLNoParam
.1021	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1023	f0 10		beq $1035			beq 	_CLNoParam
.1025	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; address for CLEAR
.1028	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102a	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102c	b0 0b		bcs $1039			bcs 	_CLMemory
.102e	c9 35		cmp #$35			cmp 	#(BASICCODE >> 8)+1 		; too low
.1030	90 07		bcc $1039			bcc 	_CLMemory
.1032	8d 16 05	sta $0516			sta 	PGMEndMemoryHigh 			; update end of memory.
.1035					_CLNoParam:
.1035	20 3c 10	jsr $103c			jsr 	ClearCode
.1038	60		rts				rts
.1039					_CLMemory:
.1039	4c 5a 25	jmp $255a		jmp	ErrorV_memory
.103c					ClearCode:
.103c	20 6e 1e	jsr $1e6e			jsr 	PGMEndProgram 				; end program => zTemp0
.103f	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1041	a5 23		lda $23				lda 	zTemp0+1
.1043	1a		inc a				inc 	a
.1044	85 29		sta $29				sta 	freeMemory+1
.1046	20 39 29	jsr $2939			jsr 	VARClearHashTables
.1049	ad 16 05	lda $0516			lda 	PGMEndMemoryHigh
.104c	20 76 26	jsr $2676			jsr 	StackReset
.104f	20 d5 26	jsr $26d5			jsr 	StringSystemInitialise
.1052	20 d5 23	jsr $23d5			jsr 	ScanProcedures
.1055	60		rts				rts
.1056					AllocateMemory:
.1056	5a		phy				phy 								; save Y
.1057	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low
.1059	5a		phy				phy
.105a	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.105c	5a		phy				phy
.105d	a8		tay				tay 								; count is now in XY
.105e					_AllocateLoop:
.105e	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1060	d0 04		bne $1066			bne 	_AllocateOne
.1062	c0 00		cpy #$00			cpy 	#0
.1064	f0 15		beq $107b			beq 	_AllocateExit
.1066					_AllocateOne:
.1066	a9 00		lda #$00			lda 	#0 							; zero byte
.1068	92 28		sta ($28)			sta 	(freeMemory)
.106a	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.106c	d0 05		bne $1073			bne 	_AllocateSkipCarry
.106e	e6 29		inc $29				inc 	freeMemory+1
.1070	20 7f 10	jsr $107f			jsr 	ClearCheckMemory
.1073					_AllocateSkipCarry:
.1073	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1075	d0 01		bne $1078			bne 	_AllocateSkipBorrow
.1077	ca		dex				dex
.1078					_AllocateSkipBorrow:
.1078	88		dey				dey
.1079	80 e3		bra $105e			bra 	_AllocateLoop
.107b					_AllocateExit:
.107b	fa		plx				plx 								; restore address
.107c	68		pla				pla
.107d	7a		ply				ply 								; restore Y
.107e	60		rts				rts
.107f					ClearCheckMemory:
.107f	a5 29		lda $29				lda 	freeMemory+1
.1081	1a		inc a				inc 	a
.1082	1a		inc a				inc 	a
.1083	cd 1e 06	cmp $061e			cmp 	stringMemory+1
.1086	b0 01		bcs $1089			bcs  	_CCMError
.1088	60		rts				rts
.1089					_CCMError:
.1089	4c 5a 25	jmp $255a		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.108c					CommandDIM:
.108c	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.108e	29 c0		and #$c0			and 	#$C0
.1090	c9 40		cmp #$40			cmp 	#$40
.1092	d0 39		bne $10cd			bne 	_CDSyntax
.1094	20 f0 28	jsr $28f0			jsr 	VARGetInfo 					; get information
.1097	ad 26 06	lda $0626			lda 	VARType 					; check array.
.109a	29 02		and #$02			and 	#2
.109c	f0 2f		beq $10cd			beq 	_CDSyntax
.109e	20 a2 28	jsr $28a2			jsr 	VARFind 					; does it already exist
.10a1	b0 2d		bcs $10d0			bcs 	_CDExists
.10a3	20 4e 28	jsr $284e			jsr 	VARCreate 					; create it - returns data ptr in XA
.10a6	da		phx				phx 								; save target address
.10a7	48		pha				pha
.10a8	ad 26 06	lda $0626			lda 	VARType 					; type ID.
.10ab	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10ad	20 d3 10	jsr $10d3			jsr 	CreateArray 				; create array to XA
.10b0	84 24		sty $24				sty 	zTemp1 						; save Y
.10b2	7a		ply				ply 								; restore target to zTemp0
.10b3	84 22		sty $22				sty 	zTemp0
.10b5	7a		ply				ply
.10b6	84 23		sty $23				sty 	zTemp0+1
.10b8	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10ba	a0 01		ldy #$01			ldy 	#1
.10bc	8a		txa				txa
.10bd	91 22		sta ($22),y			sta 	(zTemp0),y
.10bf	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10c1	20 07 26	jsr $2607			jsr 	ERRCheckRParen 				; check )
.10c4	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10c6	c8		iny				iny
.10c7	c9 99		cmp #$99			cmp 	#PR_COMMA
.10c9	f0 c1		beq $108c			beq 	CommandDIM
.10cb	88		dey				dey
.10cc	60		rts				rts
.10cd					_CDSyntax:
.10cd	4c 6a 24	jmp $246a		jmp	ErrorV_syntax
.10d0					_CDExists:
.10d0	4c 32 25	jmp $2532		jmp	ErrorV_redefine
.10d3					CreateArray:
.10d3	8d 03 05	sta $0503			sta 	CAType						; save type
.10d6	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10d9	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10db	c9 99		cmp #$99			cmp 	#PR_COMMA
.10dd	f0 04		beq $10e3			beq 	_CATwoDimensions
.10df	20 2f 11	jsr $112f			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e2	60		rts				rts
.10e3					_CATwoDimensions:
.10e3	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10e5	8d 05 05	sta $0505			sta 	CADim1+1
.10e8	a5 08		lda $08				lda 	IFR0+IM0
.10ea	8d 04 05	sta $0504			sta 	CADim1+0
.10ed	20 0f 26	jsr $260f			jsr 	ERRCheckComma 				; check comma
.10f0	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f3	5a		phy				phy 								; save Y position
.10f4	18		clc				clc 								; allocate the outer array of pointers.
.10f5	ae 05 05	ldx $0505			ldx 	CADim1+1
.10f8	ad 04 05	lda $0504			lda 	CADim1
.10fb	20 6e 11	jsr $116e			jsr 	CSAAllocate 				; allocate the outer array
.10fe	da		phx				phx									; save this address on the stack
.10ff	48		pha				pha
.1100	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.1102	85 26		sta $26				sta 	zTemp2
.1104					_CACreateSubLoop:
.1104	38		sec				sec
.1105	20 2f 11	jsr $112f			jsr 	CreateSingleArray 			; create data array of required size.
.1108	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.110a	91 26		sta ($26),y			sta 	(zTemp2),y
.110c	8a		txa				txa
.110d	c8		iny				iny
.110e	91 26		sta ($26),y			sta 	(zTemp2),y
.1110	18		clc				clc  								; next slot.
.1111	a5 26		lda $26				lda 	zTemp2
.1113	69 02		adc #$02			adc 	#2
.1115	85 26		sta $26				sta 	zTemp2
.1117	90 02		bcc $111b			bcc 	_CACNoCarry
.1119	e6 27		inc $27				inc 	zTemp2+1
.111b					_CACNoCarry:
.111b	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.111e	d0 03		bne $1123			bne 	_CACNoBorrow
.1120	ce 05 05	dec $0505			dec 	CADim1+1
.1123					_CACNoBorrow:
.1123	ce 04 05	dec $0504			dec 	CADim1
.1126	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1129	10 d9		bpl $1104			bpl 	_CACreateSubLoop
.112b	68		pla				pla
.112c	fa		plx				plx
.112d	7a		ply				ply
.112e	60		rts				rts
.112f					CreateSingleArray:
.112f	5a		phy				phy
.1130	38		sec				sec 								; allocate memory block all zeros.
.1131	a5 08		lda $08				lda 	IFR0+IM0
.1133	a6 09		ldx $09				ldx 	IFR0+IM1
.1135	20 6e 11	jsr $116e			jsr 	CSAAllocate
.1138	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.113b	f0 2f		beq $116c			beq 	_CSANoInit
.113d	da		phx				phx 								; save address of new array
.113e	48		pha				pha
.113f	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1141	86 23		stx $23				stx 	zTemp0+1
.1143	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1145	b1 22		lda ($22),y			lda 	(zTemp0),y
.1147	a8		tay				tay
.1148	b2 22		lda ($22)			lda 	(zTemp0)
.114a	aa		tax				tax
.114b					_CSAEraseString:
.114b	5a		phy				phy
.114c	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.114e	a9 80		lda #$80			lda 	#$80
.1150	91 22		sta ($22),y			sta 	(zTemp0),y
.1152	7a		ply				ply
.1153	18		clc				clc 								; add 4 to next slot.
.1154	a5 22		lda $22				lda 	zTemp0
.1156	69 04		adc #$04			adc 	#4
.1158	85 22		sta $22				sta 	zTemp0
.115a	90 02		bcc $115e			bcc 	_CSAENoCarry
.115c	e6 23		inc $23				inc 	zTemp0+1
.115e					_CSAENoCarry:
.115e	e0 00		cpx #$00			cpx 	#0
.1160	d0 01		bne $1163			bne 	_CSANoBorrow
.1162	88		dey				dey
.1163					_CSANoBorrow:
.1163	ca		dex				dex
.1164	d0 e5		bne $114b			bne 	_CSAEraseString
.1166	c0 00		cpy #$00			cpy 	#0
.1168	d0 e1		bne $114b			bne 	_CSAEraseString
.116a	68		pla				pla
.116b	fa		plx				plx
.116c					_CSANoInit:
.116c	7a		ply				ply
.116d	60		rts				rts
.116e					CSAAllocate:
.116e	08		php				php 								; save type flag.
.116f	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1170	d0 01		bne $1173			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1172	e8		inx				inx
.1173					_CSAANoCarry:
.1173	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1175	b0 2e		bcs $11a5			bcs 	_CSARange
.1177	28		plp				plp 								; restore type flag
.1178	08		php				php 								; save it back again.
.1179	da		phx				phx 								; save size.
.117a	48		pha				pha
.117b	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.117d	90 03		bcc $1182			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.117f	0a		asl a				asl 	a
.1180	26 23		rol $23				rol 	zTemp0+1
.1182					_CSAATimes2:
.1182	0a		asl a				asl 	a
.1183	26 23		rol $23				rol 	zTemp0+1
.1185	18		clc				clc
.1186	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1188	90 02		bcc $118c			bcc 	_CSAANoCarry2
.118a	e6 23		inc $23				inc 	zTemp0+1
.118c					_CSAANoCarry2:
.118c	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.118e	20 56 10	jsr $1056			jsr 	AllocateMemory 				; allocate memory to XA
.1191	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1193	85 22		sta $22				sta 	zTemp0
.1195	68		pla				pla  								; write element count to first 2 bytes
.1196	92 22		sta ($22)			sta 	(zTemp0)
.1198	68		pla				pla 								; msb of element count
.1199	28		plp				plp 								; CC if pointer array
.119a	b0 02		bcs $119e			bcs 	_CSAAIsData
.119c	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.119e					_CSAAIsData:
.119e	a0 01		ldy #$01			ldy 	#1
.11a0	91 22		sta ($22),y			sta 	(zTemp0),y
.11a2	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11a4	60		rts				rts
.11a5					_CSARange:
.11a5	4c 7b 24	jmp $247b		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11a8					Command_Doke:
.11a8	38		sec				sec
.11a9	80 01		bra $11ac			bra 	DPCommon
.11ab					Command_Poke:
.11ab	18		clc				clc
.11ac					DPCommon:
.11ac	08		php				php 								; CS if DOKE
.11ad	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; address
.11b0	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b2	48		pha				pha
.11b3	a5 09		lda $09				lda 	IFR0+IM1
.11b5	48		pha				pha
.11b6	20 0f 26	jsr $260f			jsr 	ERRCheckComma 				; [dp]oke address,data
.11b9	20 40 16	jsr $1640			jsr 	EXPEvalInteger16
.11bc	68		pla				pla 								; get address back
.11bd	85 23		sta $23				sta 	zTemp0+1
.11bf	68		pla				pla
.11c0	85 22		sta $22				sta 	zTemp0
.11c2	a5 08		lda $08				lda 	IFR0+IM0
.11c4	92 22		sta ($22)			sta 	(zTemp0)
.11c6	28		plp				plp
.11c7	90 08		bcc $11d1			bcc 	_DPExit
.11c9	5a		phy				phy
.11ca	a5 09		lda $09				lda 	IFR0+IM1
.11cc	a0 01		ldy #$01			ldy 	#1
.11ce	91 22		sta ($22),y			sta 	(zTemp0),y
.11d0	7a		ply				ply
.11d1					_DPExit:
.11d1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11d2					Command_Input:
.11d2	a9 ff		lda #$ff			lda 	#$FF
.11d4	8d 06 05	sta $0506			sta 	InputFlag
.11d7	80 03		bra $11dc			bra 	Command_IP_Main
.11d9					Command_Print:
.11d9	9c 06 05	stz $0506			stz 	InputFlag
.11dc					Command_IP_Main:
.11dc	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11dd					_CPLoop:
.11dd	08		php				php 								; save last action flag
.11de	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.11e0	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11e2	f0 4e		beq $1232			beq 	_CPExit 					; without consuming
.11e4	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11e6	f0 4a		beq $1232			beq 	_CPExit
.11e8	68		pla				pla 								; throw last action flag
.11e9	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.11eb	c8		iny				iny
.11ec	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11ee	f0 3f		beq $122f			beq 	_CPContinueWithSameLine
.11f0	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11f2	f0 36		beq $122a			beq 	_CPTab
.11f4	88		dey				dey 								; undo the get.
.11f5	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.11f8	10 0b		bpl $1205			bpl	 	_CPNotInput
.11fa	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.11fc	c9 40		cmp #$40			cmp 	#$40
.11fe	d0 05		bne $1205			bne 	_CPNotInput
.1200	20 3b 12	jsr $123b			jsr 	_CPInputCode 				; input code
.1203	80 d7		bra $11dc			bra 	Command_IP_Main 			; and go round again.
.1205					_CPNotInput:
.1205	20 ee 15	jsr $15ee			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1208	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.120a	10 14		bpl $1220			bpl 	_CPNumber
.120c	5a		phy				phy
.120d	18		clc				clc 								; string address to YX
.120e	a5 08		lda $08				lda 	IFR0+IM0
.1210	aa		tax				tax
.1211	a5 09		lda $09				lda 	IFR0+IM1
.1213	a8		tay				tay
.1214	e8		inx				inx 								; point to 1st character
.1215	d0 01		bne $1218			bne 	_CPNoCarry
.1217	c8		iny				iny
.1218					_CPNoCarry:
.1218	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.121a	20 6f 12	jsr $126f			jsr 	CPPrintAYX 					; print AYX
.121d	7a		ply				ply
.121e	80 bc		bra $11dc			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1220					_CPNumber:
.1220	5a		phy				phy
.1221	20 ac 2d	jsr $2dac			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.1224	20 6f 12	jsr $126f			jsr 	CPPrintAYX 					; print AYX
.1227	7a		ply				ply
.1228	80 b2		bra $11dc			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.122a					_CPTab:
.122a	a9 09		lda #$09			lda 	#9 							; print TAB
.122c	20 85 12	jsr $1285			jsr 	CPPrintA
.122f					_CPContinueWithSameLine:
.122f	38		sec				sec 								; loop round with carry set, which
.1230	80 ab		bra $11dd			bra 	_CPLoop 					; will inhibit final CR
.1232					_CPExit:
.1232	28		plp				plp 								; get last action flag
.1233	b0 05		bcs $123a			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1235	a9 0d		lda #$0d			lda 	#13 						; print new line
.1237	20 85 12	jsr $1285			jsr 	CPPrintA
.123a					_CPExit2:
.123a	60		rts				rts
.123b					_CPInputCode:
.123b	20 b6 16	jsr $16b6			jsr 	EXPTermR0 					; get the term.
.123e	5a		phy				phy 								; save position
.123f	20 82 12	jsr $1282			jsr 	CPInputA					; input a line to YX
.1242	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1244	30 18		bmi $125e			bmi 	_CPInputString
.1246	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1248	48		pha				pha
.1249	a5 09		lda $09				lda 	IFR0+IM1
.124b	48		pha				pha
.124c	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.124e	84 23		sty $23				sty 	zTemp0+1
.1250	20 98 19	jsr $1998			jsr 	VALConversionZTemp0
.1253	68		pla				pla 								; do the assign.
.1254	85 23		sta $23				sta 	zTemp0+1
.1256	68		pla				pla
.1257	85 22		sta $22				sta 	zTemp0
.1259	20 ad 12	jsr $12ad			jsr 	AssignNumber
.125c	7a		ply				ply
.125d	60		rts				rts
.125e					_CPInputString:
.125e	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1260	85 22		sta $22				sta 	zTemp0
.1262	a5 09		lda $09				lda 	IFR0+IM1
.1264	85 23		sta $23				sta 	zTemp0+1
.1266	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1268	84 09		sty $09				sty 	IFR0+IM1
.126a	20 c4 12	jsr $12c4			jsr 	AssignString 				; assign the string
.126d	7a		ply				ply 								; exit
.126e	60		rts				rts
.126f					CPPrintAYX:
.126f	86 22		stx $22				stx 	zTemp0
.1271	84 23		sty $23				sty 	zTemp0+1
.1273	aa		tax				tax
.1274	f0 0b		beq $1281			beq 	_CPPrintExit
.1276	a0 00		ldy #$00			ldy 	#0
.1278					_CPPrintAYXLoop:
.1278	b1 22		lda ($22),y			lda 	(zTemp0),y
.127a	20 85 12	jsr $1285			jsr 	CPPrintA
.127d	c8		iny				iny
.127e	ca		dex				dex
.127f	d0 f7		bne $1278			bne 	_CPPrintAYXLoop
.1281					_CPPrintExit:
.1281	60		rts				rts
.1282					CPInputA:
.1282	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.1285					CPPrintA:
.1285	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1288					CommandLET:
.1288	20 b6 16	jsr $16b6			jsr 	EXPTermR0 					; get term
.128b	90 6f		bcc $12fc			bcc 	CLError 					; must be a reference term.
.128d	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.128f	48		pha				pha
.1290	a5 09		lda $09				lda 	IFR0+IM1
.1292	48		pha				pha
.1293	a5 0b		lda $0b				lda 	IFR0+IExp
.1295	48		pha				pha
.1296	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1298	20 17 26	jsr $2617			jsr 	ERRCheckA
.129b	20 ee 15	jsr $15ee			jsr 	EXPEvaluateExpression 		; right hand side.
.129e	68		pla				pla 								; type of l-expr
.129f	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12a1	30 5c		bmi $12ff			bmi 	CLType
.12a3	fa		plx				plx 	 							; pop target address to zTemp0
.12a4	86 23		stx $23				stx 	zTemp0+1
.12a6	fa		plx				plx
.12a7	86 22		stx $22				stx 	zTemp0
.12a9					AssignData:
.12a9	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12ab	30 17		bmi $12c4			bmi 	AssignString
.12ad					AssignNumber:
.12ad	5a		phy				phy
.12ae	a0 03		ldy #$03			ldy 	#3
.12b0	a5 0b		lda $0b				lda 	IFR0+IExp
.12b2	91 22		sta ($22),y			sta 	(zTemp0),y
.12b4	88		dey				dey
.12b5	a5 0a		lda $0a				lda 	IFR0+IM2
.12b7	91 22		sta ($22),y			sta 	(zTemp0),y
.12b9	88		dey				dey
.12ba	a5 09		lda $09				lda 	IFR0+IM1
.12bc	91 22		sta ($22),y			sta 	(zTemp0),y
.12be	a5 08		lda $08				lda 	IFR0+IM0
.12c0	92 22		sta ($22)			sta 	(zTemp0)
.12c2	7a		ply				ply
.12c3	60		rts				rts
.12c4					AssignString:
.12c4	5a		phy				phy
.12c5	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12c7	b1 22		lda ($22),y			lda 	(zTemp0),y
.12c9	12 22		ora ($22)			ora 	(zTemp0)
.12cb	f0 23		beq $12f0			beq 	_CLConcreteString
.12cd	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12cf	85 24		sta $24				sta 	zTemp1
.12d1	b1 22		lda ($22),y			lda 	(zTemp0),y
.12d3	85 25		sta $25				sta 	zTemp1+1
.12d5	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.12d7	38		sec				sec 								; we want 3 for slot size, status, string size.
.12d8	e9 03		sbc #$03			sbc 	#3
.12da	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.12dc	90 12		bcc $12f0			bcc 	_CLConcreteString 			; if so, concrete the string again.
.12de	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.12e0	1a		inc a				inc 	a
.12e1	aa		tax				tax
.12e2	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.12e4					_CLReplaceString:
.12e4	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.12e6	c8		iny				iny
.12e7	c8		iny				iny
.12e8	91 24		sta ($24),y			sta 	(zTemp1),y
.12ea	88		dey				dey
.12eb	ca		dex				dex
.12ec	d0 f6		bne $12e4			bne 	_CLReplaceString
.12ee	80 0a		bra $12fa			bra 	_CLExit
.12f0					_CLConcreteString:
.12f0	20 8a 26	jsr $268a			jsr 	StringConcrete  			; concreted string in XA.
.12f3	a0 01		ldy #$01			ldy 	#1 							; store the address
.12f5	92 22		sta ($22)			sta 	(zTemp0)
.12f7	8a		txa				txa
.12f8	91 22		sta ($22),y			sta 	(zTemp0),y
.12fa					_CLExit:
.12fa	7a		ply				ply
.12fb	60		rts				rts
.12fc					CLError:
.12fc	4c 9d 25	jmp $259d		jmp	ErrorV_variable
.12ff					CLType:
.12ff	4c 9a 24	jmp $249a		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1302					Command_LIST:
.1302	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1305	9c 08 05	stz $0508			stz 	CLFrom+1
.1308	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.130a	c9 99		cmp #$99			cmp 	#PR_COMMA
.130c	f0 1d		beq $132b			beq 	_CLToLine
.130e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1310	f0 37		beq $1349			beq 	_CLDefaultTo
.1312	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1315	a5 08		lda $08				lda 	IFR0+IM0
.1317	8d 07 05	sta $0507			sta 	CLFrom
.131a	8d 09 05	sta $0509			sta 	CLTo
.131d	a5 09		lda $09				lda 	IFR0+IM1
.131f	8d 08 05	sta $0508			sta 	CLFrom+1
.1322	8d 0a 05	sta $050a			sta 	CLTo+1
.1325	b1 18		lda ($18),y			lda 	(codePtr),y
.1327	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1329	f0 26		beq $1351			beq 	_CLList
.132b					_CLToLine:
.132b	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.132d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.132f	f0 18		beq $1349			beq 	_CLDefaultTo
.1331	20 0f 26	jsr $260f			jsr 	ERRCheckComma 				; sep comma
.1334	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1336	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1338	f0 0f		beq $1349			beq 	_CLDefaultTo
.133a	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; there's a To value.
.133d	a5 08		lda $08				lda 	IFR0+IM0
.133f	8d 09 05	sta $0509			sta 	CLTo
.1342	a5 09		lda $09				lda 	IFR0+IM1
.1344	8d 0a 05	sta $050a			sta 	CLTo+1
.1347	80 08		bra $1351			bra 	_CLList
.1349					_CLDefaultTo:
.1349	a9 ff		lda #$ff			lda 	#$FF
.134b	8d 09 05	sta $0509			sta 	CLTo
.134e	8d 0a 05	sta $050a			sta 	CLTo+1
.1351					_CLList:
.1351	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.1354	85 19		sta $19				sta 	codePtr+1
.1356	64 18		stz $18				stz 	codePtr
.1358	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.135a	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.135c	20 bd 1c	jsr $1cbd			jsr 	TOKSetDetokeniseOutput
.135f					_CLLoop:
.135f	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1361	f0 4a		beq $13ad			beq 	_CLExit
.1363	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1366	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1369	d0 45		bne $13b0			bne 	_CLBreak
.136b	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.136d	20 b3 13	jsr $13b3			jsr 	_CLCompareLine
.1370	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1372	f0 2c		beq $13a0			beq 	_CLNext
.1374	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1376	20 b3 13	jsr $13b3			jsr 	_CLCompareLine
.1379	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.137b	f0 23		beq $13a0			beq 	_CLNext
.137d	a0 02		ldy #$02			ldy 	#2 							; print line #
.137f	b1 18		lda ($18),y			lda 	(codePtr),y
.1381	aa		tax				tax
.1382	88		dey				dey
.1383	b1 18		lda ($18),y			lda 	(codePtr),y
.1385	20 68 27	jsr $2768			jsr 	WriteIntXA
.1388	a9 20		lda #$20			lda 	#32
.138a	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.138d	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.138f	a5 18		lda $18				lda 	codePtr
.1391	18		clc				clc
.1392	69 03		adc #$03			adc 	#3
.1394	aa		tax				tax
.1395	90 01		bcc $1398			bcc 	_CLNoCarry2
.1397	c8		iny				iny
.1398					_CLNoCarry2:
.1398	20 78 1c	jsr $1c78			jsr 	TOKDetokenise
.139b	a9 0d		lda #$0d			lda 	#13	 						; next line
.139d	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13a0					_CLNext:
.13a0	18		clc				clc 								; advance to next line.
.13a1	b2 18		lda ($18)			lda 	(codePtr)
.13a3	65 18		adc $18				adc 	codePtr
.13a5	85 18		sta $18				sta 	codePtr
.13a7	90 02		bcc $13ab			bcc 	_CLNoCarry
.13a9	e6 19		inc $19				inc 	codePtr+1
.13ab					_CLNoCarry:
.13ab	80 b2		bra $135f			bra 	_CLLoop
.13ad					_CLExit:
.13ad	4c 87 27	jmp $2787			jmp 	WarmStart
.13b0					_CLBreak:
.13b0	4c f5 25	jmp $25f5		jmp	ErrorV_break
.13b3					_CLCompareLine:
.13b3	a0 01		ldy #$01			ldy 	#1
.13b5	38		sec				sec
.13b6	b1 18		lda ($18),y			lda 	(codePtr),y
.13b8	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13bb	85 22		sta $22				sta 	zTemp0
.13bd	c8		iny				iny
.13be	b1 18		lda ($18),y			lda 	(codePtr),y
.13c0	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13c3	90 0a		bcc $13cf			bcc 	_CLIsNegative
.13c5	d0 05		bne $13cc			bne 	_CLIsPositive
.13c7	a5 22		lda $22				lda 	zTemp0
.13c9	d0 01		bne $13cc			bne 	_CLIsPositive
.13cb	60		rts				rts
.13cc					_CLIsPositive:
.13cc	a9 01		lda #$01			lda 	#1
.13ce	60		rts				rts
.13cf					_CLIsNegative:
.13cf	a9 ff		lda #$ff			lda 	#255
.13d1	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.13d2					Command_NEW:
.13d2	20 62 1e	jsr $1e62			jsr 	PGMNewProgram
.13d5	20 3c 10	jsr $103c			jsr 	ClearCode
.13d8	4c 53 14	jmp $1453			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.13db					Command_REM:
.13db					Command_REM2:
.13db	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.13dd	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.13df	d0 06		bne $13e7			bne 	_CRExit
.13e1	c8		iny				iny 								; skip over it, it's a comment.
.13e2	98		tya				tya
.13e3	38		sec				sec
.13e4	71 18		adc ($18),y			adc 	(codePtr),y
.13e6	a8		tay				tay
.13e7					_CRExit:
.13e7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.13e8					Command_RUN:
.13e8	20 3c 10	jsr $103c			jsr 	ClearCode					; clear everything out.
.13eb	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.13ee	85 19		sta $19				sta 	codePtr+1
.13f0	64 18		stz $18				stz 	codePtr
.13f2	80 0b		bra $13ff			bra 	RUNNewLine
.13f4					RUNEndOfLine:
.13f4	18		clc				clc 								; advance to next line.
.13f5	b2 18		lda ($18)			lda 	(codePtr)
.13f7	65 18		adc $18				adc 	codePtr
.13f9	85 18		sta $18				sta 	codePtr
.13fb	90 02		bcc $13ff			bcc 	_RELNoCarry
.13fd	e6 19		inc $19				inc 	codePtr+1
.13ff					_RELNoCarry:
.13ff					RUNNewLine:
.13ff	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1401	9a		txs				txs
.1402	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.1404	f0 4d		beq $1453			beq 	Command_END
.1406	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1408	b1 18		lda ($18),y			lda 	(codePtr),y
.140a	8d 21 06	sta $0621			sta 	ERRLine
.140d	c8		iny				iny
.140e	b1 18		lda ($18),y			lda 	(codePtr),y
.1410	8d 22 06	sta $0622			sta 	ERRLine+1
.1413	c8		iny				iny 								; offset into codePtr for start of line.
.1414					RUNNewCommand:
.1414	9c 1c 06	stz $061c			stz 	stringInitialised 			; reset string system.
.1417	ce 0b 05	dec $050b			dec 	checkCounter
.141a	d0 0a		bne $1426			bne 	_RNCNoCheck
.141c	5a		phy				phy 								; keyboard check.
.141d	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1420	7a		ply				ply
.1421	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1424	d0 1e		bne $1444			bne 	_RUNBreak
.1426					_RNCNoCheck:
.1426	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1428	10 1d		bpl $1447			bpl		_RUNNotToken 				; probably an identifier
.142a	c8		iny				iny 								; consume token
.142b	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.142d	f0 e5		beq $1414			beq 	RUNNewCommand
.142f	c9 ad		cmp #$ad			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1431	b0 0e		bcs $1441			bcs 	_RUNSyntax
.1433	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1435	90 0a		bcc $1441			bcc 	_RUNSyntax
.1437	0a		asl a				asl 	a 							; double into X.
.1438	aa		tax				tax
.1439	20 3e 14	jsr $143e			jsr 	_RUNDispatchMain			; call the main dispatcher
.143c	80 d6		bra $1414			bra 	RUNNewCommand
.143e					_RUNDispatchMain:
.143e	7c 78 1b	jmp ($1b78,x)			jmp 	(VectorTable,x)
.1441					_RUNSyntax:
.1441	4c 6a 24	jmp $246a		jmp	ErrorV_syntax
.1444					_RUNBreak:
.1444	4c f5 25	jmp $25f5		jmp	ErrorV_break
.1447					_RUNNotToken:
.1447	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1449	90 f6		bcc $1441			bcc 	_RUNSyntax
.144b	20 88 12	jsr $1288			jsr 	CommandLET 					; assignment
.144e	80 c4		bra $1414			bra 	RUNNewCommand 				; loop round.
.1450					Command_Shift_Handler:
.1450	4c ac 24	jmp $24ac		jmp	ErrorV_unimplemented
.1453					Command_END:
.1453	4c 87 27	jmp $2787			jmp 	WarmStart
.050b					checkCounter:
>050b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1456					Command_STOP:
.1456	4c 0e 25	jmp $250e		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1459					Command_Sys:
.1459	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; execution address
.145c	5a		phy				phy
.145d	ad 69 06	lda $0669			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1460	ae c5 06	ldx $06c5			ldx 	('X'-'A')*4 + FastVariables
.1463	ac c9 06	ldy $06c9			ldy 	('Y'-'A')*4 + FastVariables
.1466	20 6b 14	jsr $146b			jsr 	_CSCallIFR0 				; call the code
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					_CSCallIFR0:
.146b	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.146e					NoExec01:
.146e					NoExec02:
.146e					NoExec03:
.146e					NoExec04:
.146e					NoExec05:
.146e					NoExec06:
.146e					NoExec07:
.146e					NoExec08:
.146e	4c 6a 24	jmp $246a		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1471					EXPBinAdd:
.1471	24 0b		bit $0b				bit 	IFR0+IExp
.1473	30 6f		bmi $14e4			bmi 	EXPConcatenate
.1475	a2 0c		ldx #$0c			ldx 	#IFR1
.1477	4c a5 29	jmp $29a5			jmp 	IFloatAdd
.147a					EXPBinSub:
.147a	24 0b		bit $0b				bit 	IFR0+IExp
.147c	30 3f		bmi $14bd			bmi 	EXPTypeError
.147e	a2 0c		ldx #$0c			ldx 	#IFR1
.1480	4c 9e 29	jmp $299e			jmp 	IFloatSubtract
.1483					EXPBinMul:
.1483	24 0b		bit $0b				bit 	IFR0+IExp
.1485	30 36		bmi $14bd			bmi 	EXPTypeError
.1487	a2 0c		ldx #$0c			ldx 	#IFR1
.1489	4c 4f 2a	jmp $2a4f			jmp 	IFloatMultiply
.148c					EXPBinFDiv:
.148c	24 0b		bit $0b				bit 	IFR0+IExp
.148e	30 2d		bmi $14bd			bmi 	EXPTypeError
.1490	a2 0c		ldx #$0c			ldx 	#IFR1
.1492	20 d2 2c	jsr $2cd2			jsr 	IFloatDivideFloat
.1495	b0 0f		bcs $14a6			bcs 	EXPDZero
.1497	60		rts				rts
.1498					EXPBinIDiv:
.1498	24 0b		bit $0b				bit 	IFR0+IExp
.149a	30 21		bmi $14bd			bmi 	EXPTypeError
.149c	a2 0c		ldx #$0c			ldx 	#IFR1
.149e	20 d2 2c	jsr $2cd2			jsr 	IFloatDivideFloat
.14a1	b0 03		bcs $14a6			bcs 	EXPDZero
.14a3	4c af 2c	jmp $2caf			jmp 	IFloatIntegerR0
.14a6					EXPDZero:
.14a6	4c e3 24	jmp $24e3		jmp	ErrorV_divzero
.14a9					EXPBinIMod:
.14a9	24 0b		bit $0b				bit 	IFR0+IExp
.14ab	30 10		bmi $14bd			bmi 	EXPTypeError
.14ad	a2 0c		ldx #$0c			ldx 	#IFR1
.14af	5a		phy				phy
.14b0	20 e7 2b	jsr $2be7			jsr 	IFPreProcessBitwise 		; set up everything.
.14b3	d0 05		bne $14ba			bne 	EXPDRange
.14b5	20 20 2b	jsr $2b20			jsr 	IFloatModulusInteger
.14b8	7a		ply				ply
.14b9	60		rts				rts
.14ba					EXPDRange:
.14ba	4c 7b 24	jmp $247b		jmp	ErrorV_range
.14bd					EXPTypeError:
.14bd	4c 9a 24	jmp $249a		jmp	ErrorV_type
.14c0					EXPBinAnd:
.14c0	24 0b		bit $0b				bit 	IFR0+IExp
.14c2	30 f9		bmi $14bd			bmi 	EXPTypeError
.14c4	a2 0c		ldx #$0c			ldx 	#IFR1
.14c6	20 a2 2b	jsr $2ba2			jsr 	IFloatBitwiseAnd
.14c9	b0 ef		bcs $14ba			bcs 	EXPDRange
.14cb	60		rts				rts
.14cc					EXPBinOr:
.14cc	24 0b		bit $0b				bit 	IFR0+IExp
.14ce	30 ed		bmi $14bd			bmi 	EXPTypeError
.14d0	a2 0c		ldx #$0c			ldx 	#IFR1
.14d2	20 b9 2b	jsr $2bb9			jsr 	IFloatBitwiseOr
.14d5	b0 e3		bcs $14ba			bcs 	EXPDRange
.14d7	60		rts				rts
.14d8					EXPBinXor:
.14d8	24 0b		bit $0b				bit 	IFR0+IExp
.14da	30 e1		bmi $14bd			bmi 	EXPTypeError
.14dc	a2 0c		ldx #$0c			ldx 	#IFR1
.14de	20 d0 2b	jsr $2bd0			jsr 	IFloatBitwiseXor
.14e1	b0 d7		bcs $14ba			bcs 	EXPDRange
.14e3	60		rts				rts
.14e4					EXPConcatenate:
.14e4	18		clc				clc
.14e5	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.14e7	72 0c		adc ($0c)			adc 	(IFR1)
.14e9	b0 2d		bcs $1518			bcs 	_EXPCError
.14eb	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.14ed	da		phx				phx
.14ee	a6 09		ldx $09				ldx 	IFR0+1
.14f0	da		phx				phx
.14f1	20 fd 26	jsr $26fd			jsr 	StringTempAllocate 			; allocate string, set up return
.14f4	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.14f6	a5 0c		lda $0c				lda 	IFR1
.14f8	20 01 15	jsr $1501			jsr 	_EXPCCopyXA
.14fb	fa		plx				plx 								; copy second string
.14fc	68		pla				pla
.14fd	20 01 15	jsr $1501			jsr 	_EXPCCopyXA
.1500	60		rts				rts
.1501					_EXPCCopyXA:
.1501	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.1503	85 22		sta $22				sta 	zTemp0
.1505	b2 22		lda ($22)			lda 	(zTemp0)					; length
.1507	f0 0e		beq $1517			beq 	_EXPCCExit 					; nothing.
.1509	aa		tax				tax 								; count
.150a	5a		phy				phy 								; start positioin
.150b	a0 01		ldy #$01			ldy 	#1
.150d					_EXPCCLoop:
.150d	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.150f	20 32 27	jsr $2732			jsr 	StringTempWrite
.1512	c8		iny				iny
.1513	ca		dex				dex
.1514	d0 f7		bne $150d			bne 	_EXPCCLoop
.1516	7a		ply				ply
.1517					_EXPCCExit:
.1517	60		rts				rts
.1518					_EXPCError:
.1518	4c 87 25	jmp $2587		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.151b					EXPReturnTrue:
.151b	a2 08		ldx #$08			ldx 	#IFR0
.151d	a9 01		lda #$01			lda 	#1
.151f	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.1522	20 ba 2f	jsr $2fba			jsr 	IFloatNegate
.1525	60		rts				rts
.1526					EXPReturnFalse:
.1526	a2 08		ldx #$08			ldx 	#IFR0
.1528	4c af 2f	jmp $2faf			jmp 	IFloatSetZero
.152b					EXPCompareEqual:
.152b	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.152e	c9 00		cmp #$00			cmp 	#0
.1530	f0 e9		beq $151b			beq 	EXPReturnTrue
.1532	80 f2		bra $1526			bra 	EXPReturnFalse
.1534					EXPCompareLess:
.1534	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.1537	c9 ff		cmp #$ff			cmp 	#$FF
.1539	f0 e0		beq $151b			beq 	EXPReturnTrue
.153b	80 e9		bra $1526			bra 	EXPReturnFalse
.153d					EXPCompareGreater:
.153d	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.1540	c9 01		cmp #$01			cmp 	#1
.1542	f0 d7		beq $151b			beq 	EXPReturnTrue
.1544	80 e0		bra $1526			bra 	EXPReturnFalse
.1546					EXPCompareNotEqual:
.1546	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.1549	c9 00		cmp #$00			cmp 	#0
.154b	d0 ce		bne $151b			bne 	EXPReturnTrue
.154d	80 d7		bra $1526			bra 	EXPReturnFalse
.154f					EXPCompareLessEqual:
.154f	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.1552	c9 01		cmp #$01			cmp 	#1
.1554	d0 c5		bne $151b			bne 	EXPReturnTrue
.1556	80 ce		bra $1526			bra 	EXPReturnFalse
.1558					EXPCompareGreaterEqual:
.1558	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.155b	c9 ff		cmp #$ff			cmp 	#$FF
.155d	d0 bc		bne $151b			bne 	EXPReturnTrue
.155f	80 c5		bra $1526			bra 	EXPReturnFalse
.1561					EXPCompareBaseCode:
.1561	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1563	30 10		bmi $1575			bmi 	_EXCBCString
.1565	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1567	20 7d 2c	jsr $2c7d			jsr 	IFloatCompare
.156a	a5 08		lda $08				lda 	IFR0+IM0
.156c	f0 06		beq $1574			beq 	_EXCBCExit 					; return 0 if zero
.156e	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1570	50 02		bvc $1574			bvc 	_EXCBCExit
.1572	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1574					_EXCBCExit:
.1574	60		rts				rts
.1575					_EXCBCString:
.1575	5a		phy				phy
.1576	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1578	d2 0c		cmp ($0c)			cmp 	(IFR1)
.157a	90 02		bcc $157e			bcc 	_EXCBCSmaller
.157c	b2 0c		lda ($0c)			lda 	(IFR1)
.157e					_EXCBCSmaller:
.157e	aa		tax				tax
.157f	f0 0d		beq $158e			beq 	_EXCBCMatches 				; if zero common length matches
.1581	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1583					_EXCBCCheckSmallerMatches:
.1583	c8		iny				iny 								; compare directly as far as common length
.1584	38		sec				sec
.1585	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1587	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1589	d0 08		bne $1593			bne 	_EXCBCExit2
.158b	ca		dex				dex
.158c	d0 f5		bne $1583			bne 	_EXCBCCheckSmallerMatches
.158e					_EXCBCMatches:
.158e	38		sec				sec
.158f	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1591	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1593					_EXCBCExit2:
.1593	7a		ply				ply
.1594	c9 00		cmp #$00			cmp 	#0
.1596	f0 04		beq $159c			beq 	_EXCBCReturn
.1598	30 03		bmi $159d			bmi 	_EXCBCFF
.159a	a9 01		lda #$01			lda 	#1
.159c					_EXCBCReturn:
.159c	60		rts				rts
.159d					_EXCBCFF:
.159d	a9 ff		lda #$ff			lda 	#$FF
.159f	60		rts				rts
.15a0					_EXCBCRange:
.15a0	4c 7b 24	jmp $247b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.15a3					EXPBinLeft:
.15a3	a9 ff		lda #$ff			lda 	#$FF
.15a5	8d 0c 05	sta $050c			sta 	EXPShiftLeftFlag
.15a8	4c ae 15	jmp $15ae			jmp 	EXPShiftCommon
.15ab					EXPBinRight:
.15ab	9c 0c 05	stz $050c			stz 	EXPShiftLeftFlag
.15ae					EXPShiftCommon:
.15ae	a5 0b		lda $0b				lda 	IFR0+IExp 					; both integers
.15b0	05 0f		ora $0f				ora 	IFR1+IExp
.15b2	29 7f		and #$7f			and 	#$7F
.15b4	d0 35		bne $15eb			bne 	_EXPSRange
.15b6	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.15b8	29 e0		and #$e0			and 	#$E0
.15ba	05 09		ora $09				ora 	IFR0+IM1
.15bc	05 0a		ora $0a				ora 	IFR0+IM2
.15be	d0 25		bne $15e5			bne 	_EXPSShiftZero 				; if so return zero
.15c0	5a		phy				phy
.15c1	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.15c3	29 1f		and #$1f			and 	#$1F
.15c5	f0 17		beq $15de			beq 	_EXPSExit 					; exit if zero
.15c7	a8		tay				tay
.15c8					_EXPSLoop:
.15c8	a2 0c		ldx #$0c			ldx 	#IFR1
.15ca	2c 0c 05	bit $050c			bit 	EXPShiftLeftFlag
.15cd	30 05		bmi $15d4			bmi 	_EXPSShiftLeft
.15cf	20 de 2f	jsr $2fde			jsr 	IFloatShiftRight
.15d2	80 07		bra $15db			bra 	_EXPSContinue
.15d4					_EXPSShiftLeft:
.15d4	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.15d7	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts
.15d9	30 10		bmi $15eb			bmi 	_EXPSRange
.15db					_EXPSContinue:
.15db	88		dey				dey
.15dc	d0 ea		bne $15c8			bne 	_EXPSLoop
.15de					_EXPSExit:
.15de	a2 0c		ldx #$0c			ldx 	#IFR1
.15e0	20 40 2f	jsr $2f40			jsr 	IFloatCopyFromRegister
.15e3	7a		ply				ply
.15e4	60		rts				rts
.15e5					_EXPSShiftZero:
.15e5	a2 08		ldx #$08			ldx 	#IFR0
.15e7	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.15ea	60		rts				rts
.15eb					_EXPSRange:
.15eb	4c 7b 24	jmp $247b		jmp	ErrorV_range
.050c					EXPShiftLeftFlag:
>050c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.15ee					EXPEvaluateExpression:
.15ee	a9 00		lda #$00			lda 	#0 							; current precedence
.15f0					EXPEvaluateExpressionPrecedenceA:
.15f0	48		pha				pha
.15f1	20 6b 16	jsr $166b			jsr 	EXPTermValueR0				; do first term.
.15f4					_EELoop:
.15f4	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.15f6	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.15f8	90 31		bcc $162b			bcc 	_EEExit
.15fa	aa		tax				tax 								; access the precedence of the operator.
.15fb	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.15fc	dd c1 18	cmp $18c1,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.15ff	b0 2b		bcs $162c			bcs 	_EEExit2
.1601	48		pha				pha 								; save current precedence.
.1602	da		phx				phx 								; save operator
.1603	c8		iny				iny 								; consume operator
.1604	da		phx				phx
.1605	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.1607	20 fe 2e	jsr $2efe			jsr 	IFloatPushRx
.160a	fa		plx				plx
.160b	bd c1 18	lda $18c1,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.160e	20 f0 15	jsr $15f0			jsr 	EXPEvaluateExpressionPrecedenceA
.1611	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.1613	20 1f 2f	jsr $2f1f			jsr 	IFloatPullRx
.1616	fa		plx				plx 								; operator
.1617	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.1619	45 0f		eor $0f				eor 	IFR1+IExp
.161b	30 08		bmi $1625			bmi 	_EEType
.161d					_EETypeOkay:
.161d	8a		txa				txa
.161e	0a		asl a				asl 	a 							; double -> X
.161f	aa		tax				tax
.1620	20 28 16	jsr $1628			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1623	80 cf		bra $15f4			bra 	_EELoop
.1625					_EEType:
.1625	4c 9a 24	jmp $249a		jmp	ErrorV_type
.1628					_EECallBinary:
.1628	7c 78 1b	jmp ($1b78,x)			jmp 	(VectorTable,x)
.162b					_EEExit:
.162b	68		pla				pla 								; throw precedence
.162c					_EEExit2:
.162c	18		clc				clc
.162d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.162e					EXPEvalNumber:
.162e	20 ee 15	jsr $15ee			jsr 	EXPEvaluateExpression
.1631	24 0b		bit $0b				bit 	IFR0+IExp
.1633	30 01		bmi $1636			bmi 	EVUType
.1635	60		rts				rts
.1636					EVUType:
.1636	4c 9a 24	jmp $249a		jmp	ErrorV_type
.1639					EXPEvalInteger:
.1639	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.163c	20 af 2c	jsr $2caf			jsr 	IFloatIntegerR0
.163f	60		rts				rts
.1640					EXPEvalInteger16:
.1640	20 39 16	jsr $1639			jsr 	EXPEvalInteger
.1643	a5 0a		lda $0a				lda 	IFR0+IM2
.1645	d0 21		bne $1668			bne 	EVURange
.1647	a6 09		ldx $09				ldx 	IFR0+IM1
.1649	a5 08		lda $08				lda 	IFR0+IM0
.164b	60		rts				rts
.164c					EXPEvalInteger8:
.164c	20 39 16	jsr $1639			jsr 	EXPEvalInteger
.164f	a5 0a		lda $0a				lda 	IFR0+IM2
.1651	05 09		ora $09				ora 	IFR0+IM1
.1653	d0 13		bne $1668			bne 	EVURange
.1655	a5 08		lda $08				lda 	IFR0+IM0
.1657	60		rts				rts
.1658					EXPEvalString:
.1658	20 ee 15	jsr $15ee			jsr 	EXPEvaluateExpression
.165b	24 0b		bit $0b				bit 	IFR0+IExp
.165d	10 d7		bpl $1636			bpl 	EVUType
.165f	a6 09		ldx $09				ldx 	IFR0+IM1
.1661	86 23		stx $23				stx 	zTemp0+1
.1663	a5 08		lda $08				lda 	IFR0+IM0
.1665	85 22		sta $22				sta 	zTemp0
.1667	60		rts				rts
.1668					EVURange:
.1668	4c 7b 24	jmp $247b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.166b					EXPTermValueR0:
.166b	20 b6 16	jsr $16b6			jsr 	EXPTermR0 					; get term
.166e	90 45		bcc $16b5			bcc 	_ETVNotReference 			; exit if value.
.1670	5a		phy				phy
.1671	a0 03		ldy #$03			ldy 	#3 							; get type
.1673	b1 08		lda ($08),y			lda 	(IFR0),y
.1675	30 14		bmi $168b			bmi 	_ETVDereferenceString
.1677	85 0b		sta $0b				sta 	IFR0+IExp 					; dereference to R0
.1679	88		dey				dey
.167a	b1 08		lda ($08),y			lda 	(IFR0),y
.167c	85 0a		sta $0a				sta 	IFR0+IM2
.167e	88		dey				dey
.167f	b1 08		lda ($08),y			lda 	(IFR0),y
.1681	aa		tax				tax
.1682	b2 08		lda ($08)			lda 	(IFR0)
.1684	86 09		stx $09				stx 	IFR0+IM1
.1686	85 08		sta $08				sta 	IFR0+IM0
.1688	7a		ply				ply
.1689	18		clc				clc
.168a	60		rts				rts
.168b					_ETVDereferenceString:
.168b	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.168d	b1 08		lda ($08),y			lda 	(IFR0),y
.168f	12 08		ora ($08)			ora 	(IFR0)
.1691	f0 11		beq $16a4			beq 	_ETVNull
.1693	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1695	aa		tax				tax
.1696	b2 08		lda ($08)			lda 	(IFR0)
.1698	18		clc				clc 								; add two so points to actual string.
.1699	69 02		adc #$02			adc 	#2
.169b	90 01		bcc $169e			bcc 	_EVDSNoCarry
.169d	e8		inx				inx
.169e					_EVDSNoCarry:
.169e	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.16a0	85 08		sta $08				sta 	IFR0
.16a2	80 08		bra $16ac			bra 	_ETVFillExit 				; tidy up and exit.
.16a4					_ETVNull:
.16a4	a9 b4		lda #$b4			lda 	#_EVTNString & $FF
.16a6	85 08		sta $08				sta 	IFR0+IM0
.16a8	a9 16		lda #$16			lda 	#_EVTNString >> 8
.16aa	85 09		sta $09				sta 	IFR0+IM1
.16ac					_ETVFillExit:
.16ac	64 0a		stz $0a				stz 	IFR0+IM2
.16ae	a9 80		lda #$80			lda 	#$80
.16b0	85 0b		sta $0b				sta 	IFR0+IExp
.16b2	7a		ply				ply
.16b3	60		rts				rts
.16b4					_EVTNString:
>16b4	00						.byte 	0
.16b5					_ETVNotReference:
.16b5	60		rts				rts
.16b6					EXPTermR0:
.16b6	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.16b8	30 10		bmi $16ca			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.16ba	c8		iny				iny 								; consume element
.16bb	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.16bd	b0 08		bcs $16c7			bcs 	_ETMIdentifier
.16bf	20 ee 16	jsr $16ee			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.16c2	20 21 17	jsr $1721			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.16c5	18		clc				clc 								; return value
.16c6	60		rts				rts
.16c7					_ETMIdentifier:
.16c7	4c 46 29	jmp $2946			jmp 	VARCheckSimple 				; check simple variables A-Z
.16ca					_ETMIsUnaryOrMinus:
.16ca	c8		iny				iny 								; consume element
.16cb	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.16cd	d0 0a		bne $16d9			bne 	_ETMCheckUnary
.16cf	20 6b 16	jsr $166b			jsr 	EXPTermValueR0 				; get a term to negate
.16d2	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.16d4	20 ba 2f	jsr $2fba			jsr 	IFloatNegate
.16d7	18		clc				clc
.16d8	60		rts				rts
.16d9					_ETMCheckUnary:
.16d9	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.16db	90 0e		bcc $16eb			bcc 	_ETMUnarySyntax
.16dd	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.16df	b0 0a		bcs $16eb			bcs 	_ETMUnarySyntax
.16e1	0a		asl a				asl 	a
.16e2	aa		tax				tax
.16e3	20 e8 16	jsr $16e8			jsr 	_ETMCallUnaryFunction
.16e6	18		clc				clc
.16e7	60		rts				rts
.16e8					_ETMCallUnaryFunction:
.16e8	7c 78 1b	jmp ($1b78,x)			jmp 	(VectorTable,x)
.16eb					_ETMUnarySyntax:
.16eb	4c 6a 24	jmp $246a		jmp	ErrorV_syntax
.16ee					EXPExtractTokenisedInteger:
.16ee	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.16f0	64 0b		stz $0b				stz 	IFR0+IExp
.16f2	64 09		stz $09				stz 	IFR0+IM1
.16f4	64 0a		stz $0a				stz 	IFR0+IM2
.16f6					_ETMConstant:
.16f6	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.16f8	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.16fa	b0 24		bcs $1720			bcs 	_ETMCExit 					; no.
.16fc	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.16fe	a5 09		lda $09				lda 	IFR0+IM1
.1700	85 0a		sta $0a				sta 	IFR0+IM2
.1702	a5 08		lda $08				lda 	IFR0+IM0
.1704	85 09		sta $09				sta 	IFR0+IM1
.1706	64 08		stz $08				stz 	IFR0+IM0
.1708	8a		txa				txa
.1709	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.170a	66 0a		ror $0a				ror 	IFR0+IM2
.170c	66 09		ror $09				ror 	IFR0+IM1
.170e	66 08		ror $08				ror 	IFR0+IM0
.1710	4a		lsr a				lsr 	a
.1711	66 0a		ror $0a				ror 	IFR0+IM2
.1713	66 09		ror $09				ror 	IFR0+IM1
.1715	66 08		ror $08				ror 	IFR0+IM0
.1717	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1719	11 18		ora ($18),y			ora 	(codePtr),y
.171b	85 08		sta $08				sta 	IFR0+IM0
.171d	c8		iny				iny 								; consume, loop back
.171e	80 d6		bra $16f6			bra 	_ETMConstant
.1720					_ETMCExit:
.1720	60		rts				rts
.1721					EXPCheckDecimalFollows:
.1721	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1723	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1725	d0 19		bne $1740			bne 	_ETMCDExit
.1727	c8		iny				iny 								; consume token.
.1728	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.172a	5a		phy				phy									; save current position
.172b	48		pha				pha 								; save count of chars.
.172c	38		sec				sec 								; address into YX : y + codePtr+1
.172d	98		tya				tya
.172e	65 18		adc $18				adc 	codePtr
.1730	aa		tax				tax
.1731	a5 19		lda $19				lda 	codePtr+1
.1733	69 00		adc #$00			adc 	#0
.1735	a8		tay				tay
.1736	68		pla				pla 								; get count.
.1737	20 53 2e	jsr $2e53			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.173a	7a		ply				ply 								; go to next token.
.173b	98		tya				tya
.173c	38		sec				sec
.173d	71 18		adc ($18),y			adc 	(codePtr),y
.173f	a8		tay				tay
.1740					_ETMCDExit:
.1740	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1741					EXPUnaryAbs:
.1741	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.1744	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.1747	20 f3 2b	jsr $2bf3			jsr 	IFloatAbsoluteR0
.174a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.174b					EXPUnaryAsc:
.174b	20 58 16	jsr $1658			jsr 	EXPEvalString 					; string to R0, zTemp0
.174e	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.1751	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1753	f0 06		beq $175b			beq 	_EXAZero 						; if so return 0
.1755	5a		phy				phy 									; otherwise get first character
.1756	a0 01		ldy #$01			ldy 	#1
.1758	b1 22		lda ($22),y			lda 	(zTemp0),y
.175a	7a		ply				ply
.175b					_EXAZero:
.175b	a2 08		ldx #$08			ldx 	#IFR0
.175d	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.1760	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1761					EXPUnaryChr:
.1761	20 4c 16	jsr $164c			jsr 	EXPEvalInteger8 				; expr
.1764	48		pha				pha 									; push on stack
.1765	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.1768	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.176a	20 fd 26	jsr $26fd			jsr 	StringTempAllocate
.176d	68		pla				pla
.176e	20 32 27	jsr $2732			jsr 	StringTempWrite
.1771	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1772					EXPUnaryDec:
.1772	20 58 16	jsr $1658			jsr 	EXPEvalString 					; string to R0, zTemp0
.1775	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.1778	5a		phy				phy
.1779	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.177b	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.177e	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1780	f0 3b		beq $17bd			beq 	_EUDError 						; empty string
.1782	aa		tax				tax
.1783	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1785					_EUDLoop:
.1785	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next
.1787	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1789	90 02		bcc $178d			bcc 	_EUDNoCase
.178b	e9 20		sbc #$20			sbc 	#$20
.178d					_EUDNoCase:
.178d	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.178f	90 2c		bcc $17bd			bcc 	_EUDError
.1791	c9 3a		cmp #$3a			cmp 	#'9'+1
.1793	90 0a		bcc $179f			bcc 	_EUDOkay
.1795	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1797	90 24		bcc $17bd			bcc 	_EUDError
.1799	c9 47		cmp #$47			cmp 	#'F'+1
.179b	b0 20		bcs $17bd			bcs 	_EUDError
.179d	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.179f					_EUDOkay:
.179f	29 0f		and #$0f			and 	#15 							; make constant
.17a1	da		phx				phx
.17a2	48		pha				pha
.17a3	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.17a5	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.17a8	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.17ab	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.17ae	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.17b1	68		pla				pla 									; pop constant and OR in
.17b2	fa		plx				plx
.17b3	05 08		ora $08				ora 	IFR0+IM0
.17b5	85 08		sta $08				sta 	IFR0+IM0
.17b7	c8		iny				iny 									; next
.17b8	ca		dex				dex
.17b9	d0 ca		bne $1785			bne 	_EUDLoop
.17bb	7a		ply				ply
.17bc	60		rts				rts
.17bd					_EUDError:
.17bd	4c 8c 24	jmp $248c		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.17c0					EXPUnaryInlineDec:
.17c0	4c 6a 24	jmp $246a		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.17c3					EXPUnaryPeek:
.17c3	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 				; number to R0
.17c6	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.17c9	b2 08		lda ($08)			lda 	(IFR0)
.17cb	a2 08		ldx #$08			ldx 	#IFR0
.17cd	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.17d0	60		rts				rts
.17d1					EXPUnaryDeek:
.17d1	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 				; number to R0
.17d4	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.17d7	5a		phy				phy
.17d8	a0 01		ldy #$01			ldy 	#1
.17da	b1 08		lda ($08),y			lda 	(IFR0),y
.17dc	7a		ply				ply
.17dd	48		pha				pha
.17de	b2 08		lda ($08)			lda 	(IFR0)
.17e0	a2 08		ldx #$08			ldx 	#IFR0
.17e2	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.17e5	68		pla				pla
.17e6	85 09		sta $09				sta 	IFR0+IM1
.17e8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.17e9					EXPUnaryNull:
.17e9	20 6b 16	jsr $166b			jsr 	EXPTermValueR0
.17ec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.17ed					EXPUnaryFrac:
.17ed	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.17f0	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.17f3	20 59 2c	jsr $2c59			jsr 	IFloatFractionalR0
.17f6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.17f7					EXPUnaryInkey:
.17f7	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.17fa	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.17fc	20 fd 26	jsr $26fd			jsr 	StringTempAllocate
.17ff	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.1802	b0 06		bcs $180a			bcs 	_EUIExit
.1804	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.1807	20 32 27	jsr $2732			jsr 	StringTempWrite
.180a					_EUIExit:
.180a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.180b					EXPUnaryInt:
.180b	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.180e	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.1811	20 af 2c	jsr $2caf			jsr 	IFloatIntegerR0
.1814	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1815					EXPUnaryLen:
.1815	20 58 16	jsr $1658			jsr 	EXPEvalString 					; string to R0, zTemp0
.1818	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.181b	b2 22		lda ($22)			lda 	(zTemp0)
.181d	a2 08		ldx #$08			ldx 	#IFR0
.181f	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.1822	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1823					EXPUnaryParenthesis:
.1823	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.1826	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.1829	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.182a					EXPUnaryRnd:
.182a	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; number to R0
.182d	20 07 26	jsr $2607			jsr 	ERRCheckRParen 				; )
.1830	a2 08		ldx #$08			ldx 	#IFR0
.1832	20 49 18	jsr $1849			jsr 	EXPLoadInRandom
.1835	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1837	85 0b		sta $0b				sta 	IFR0+IExp
.1839	60		rts				rts
.183a					ExpUnaryRand:
.183a	20 39 16	jsr $1639			jsr 	EXPEvalInteger 				; integer to R0
.183d	20 07 26	jsr $2607			jsr 	ERRCheckRParen 				; )
.1840	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1842	20 49 18	jsr $1849			jsr 	EXPLoadInRandom
.1845	20 20 2b	jsr $2b20			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1848	60		rts				rts
.1849					EXPLoadInRandom:
.1849	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.184c	20 5e 18	jsr $185e			jsr 	EXPRandom32
.184f	95 00		sta $00,x			sta 	IM0,x
.1851	20 5e 18	jsr $185e			jsr 	EXPRandom32
.1854	95 01		sta $01,x			sta 	IM1,x
.1856	20 5e 18	jsr $185e			jsr 	EXPRandom32
.1859	29 7f		and #$7f			and 	#$7F
.185b	95 02		sta $02,x			sta 	IM2,x
.185d	60		rts				rts
.185e					EXPRandom32:
.185e	5a		phy				phy
.185f	a0 08		ldy #$08			ldy 	#8
.1861	ad 0d 05	lda $050d			lda 	EXPSeed+0
.1864	0d 0e 05	ora $050e			ora 	EXPSeed+1
.1867	0d 0f 05	ora $050f			ora 	EXPSeed+2
.186a	0d 10 05	ora $0510			ora 	EXPSeed+3
.186d	d0 08		bne $1877			bne 	_EXPRNoReset
.186f	ee 0d 05	inc $050d			inc 	EXPSeed+0
.1872	a0 10		ldy #$10			ldy 	#16
.1874	8c 10 05	sty $0510			sty 	EXPSeed+3
.1877					_EXPRNoReset:
.1877	ad 0d 05	lda $050d			lda 	EXPSeed+0
.187a					_EXPRLoop:
.187a	0a		asl a				asl		a
.187b	2e 0e 05	rol $050e			rol 	EXPSeed+1
.187e	2e 0f 05	rol $050f			rol 	EXPSeed+2
.1881	2e 10 05	rol $0510			rol 	EXPSeed+3
.1884	90 02		bcc $1888			bcc 	_EXPRNoEOR
.1886	49 c5		eor #$c5			eor 	#$C5
.1888					_EXPRNoEOR:
.1888	88		dey				dey
.1889	d0 ef		bne $187a			bne 	_EXPRLoop
.188b	8d 0d 05	sta $050d			sta 	EXPSeed+0
.188e	7a		ply				ply
.188f	60		rts				rts
.050d					EXPSeed:
>050d							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1890					EXPUnarySgn:
.1890	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.1893	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.1896	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1898	20 51 2f	jsr $2f51			jsr 	IFloatCopyToRegister
.189b	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.189d	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.18a0	a2 0c		ldx #$0c			ldx 	#IFR1
.18a2	20 7d 2c	jsr $2c7d			jsr 	IFloatCompare 					; compare R1 vs 0.
.18a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.18a6					EXPUnarySqr:
.18a6	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.18a9	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.18ac	20 fb 2b	jsr $2bfb			jsr 	IFloatSquareRootR0 				; square root.
.18af	b0 01		bcs $18b2			bcs 	_EUSValue
.18b1	60		rts				rts
.18b2					_EUSValue:
.18b2	4c 7b 24	jmp $247b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.18b5					EXPUnaryHex:
.18b5	20 39 16	jsr $1639			jsr 	EXPEvalInteger 					; expr
.18b8	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.18bb	5a		phy				phy
.18bc	a9 10		lda #$10			lda 	#16
.18be	20 50 2d	jsr $2d50			jsr 	IFloatIntegerToStringR0
.18c1	80 0a		bra $18cd			bra 	EUSMain
.18c3					EXPUnaryStr:
.18c3	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; expr
.18c6	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.18c9	5a		phy				phy
.18ca	20 ac 2d	jsr $2dac			jsr 	IFloatFloatToStringR0 			; convert to string
.18cd					EUSMain:
.18cd	b0 18		bcs $18e7			bcs 	_EUSError
.18cf	86 22		stx $22				stx 	zTemp0 							; save string address
.18d1	84 23		sty $23				sty 	zTemp0+1
.18d3	48		pha				pha 									; save count
.18d4	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.18d6	20 fd 26	jsr $26fd			jsr 	StringTempAllocate
.18d9	fa		plx				plx 									; count in X
.18da	a0 00		ldy #$00			ldy 	#0
.18dc					_EUSCopy:
.18dc	b1 22		lda ($22),y			lda 	(zTemp0),y
.18de	c8		iny				iny
.18df	20 32 27	jsr $2732			jsr 	StringTempWrite
.18e2	ca		dex				dex
.18e3	d0 f7		bne $18dc			bne	 	_EUSCopy
.18e5	7a		ply				ply
.18e6	60		rts				rts
.18e7					_EUSError:
.18e7	4c 7b 24	jmp $247b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.18ea					EXPUnaryInlineString:
.18ea	18		clc				clc 								; physical address -> IM0,1
.18eb	98		tya				tya
.18ec	65 18		adc $18				adc 	codePtr
.18ee	85 08		sta $08				sta 	IFR0+IM0
.18f0	a5 19		lda $19				lda 	codePtr+1
.18f2	69 00		adc #$00			adc 	#0
.18f4	85 09		sta $09				sta 	IFR0+IM1
.18f6	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in rest
.18f8	a9 80		lda #$80			lda 	#$80
.18fa	85 0b		sta $0b				sta 	IFR0+IExp
.18fc	98		tya				tya	 								; skip over it.
.18fd	38		sec				sec
.18fe	71 18		adc ($18),y			adc 	(codePtr),y
.1900	a8		tay				tay
.1901	60		rts				rts
.1902					_EXPUISRange:
.1902	4c 7b 24	jmp $247b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1905					EXPUnaryLeft:
.1905	20 4b 19	jsr $194b			jsr 	EXPCommonStart 					; <string>,
.1908	48		pha				pha 									; save string address on stack
.1909	da		phx				phx
.190a	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.190c	48		pha				pha
.190d	20 4c 16	jsr $164c			jsr 	EXPEvalInteger8 				; characters to do
.1910	80 44		bra $1956			bra 	EXPSubstringCommon
.1912					EXPUnaryRight:
.1912	20 4b 19	jsr $194b			jsr 	EXPCommonStart 					; <string>,
.1915	48		pha				pha 									; save string address on stack
.1916	da		phx				phx
.1917	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1919	48		pha				pha
.191a	20 4c 16	jsr $164c			jsr 	EXPEvalInteger8 				; characters to do
.191d	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.191f	68		pla				pla
.1920	38		sec				sec
.1921	e5 22		sbc $22				sbc 	zTemp0
.1923	b0 02		bcs $1927			bcs 	_EUROffLeft
.1925	a9 00		lda #$00			lda 	#0
.1927					_EUROffLeft:
.1927	48		pha				pha 									; start pos
.1928	a9 ff		lda #$ff			lda 	#255
.192a	80 2a		bra $1956			bra 	EXPSubstringCommon
.192c					EXPUnaryMid:
.192c	20 4b 19	jsr $194b			jsr 	EXPCommonStart 					; <string>,
.192f	48		pha				pha 									; save string address on stack
.1930	da		phx				phx
.1931	20 4c 16	jsr $164c			jsr 	EXPEvalInteger8 				; characters start
.1934	f0 12		beq $1948			beq 	_EUSError 						; 1 is left
.1936	3a		dec a				dec 	a 								; zero based.
.1937	48		pha				pha
.1938	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.193a	c9 99		cmp #$99			cmp 	#PR_COMMA
.193c	f0 04		beq $1942			beq 	_EUMLength 						; if so m is provided
.193e	a9 ff		lda #$ff			lda 	#255 							; default m
.1940	80 14		bra $1956			bra 	EXPSubstringCommon
.1942					_EUMLength:
.1942	c8		iny				iny 									; consume comma
.1943	20 4c 16	jsr $164c			jsr 	EXPEvalInteger8 				; characters to do
.1946	80 0e		bra $1956			bra 	EXPSubstringCommon
.1948					_EUSError:
.1948	4c 8c 24	jmp $248c		jmp	ErrorV_value
.194b					EXPCommonStart:
.194b	20 58 16	jsr $1658			jsr 	EXPEvalString
.194e	20 0f 26	jsr $260f			jsr 	ERRCheckComma
.1951	a5 08		lda $08				lda 	IFR0+IM0
.1953	a6 09		ldx $09				ldx 	IFR0+IM1
.1955	60		rts				rts
.1956					EXPSubstringCommon:
.1956	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1958	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; check right bracket.
.195b	68		pla				pla 									; start position
.195c	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.195e	fa		plx				plx 									; get string address to zTemp2.
.195f	86 27		stx $27				stx 	zTemp2+1
.1961	68		pla				pla
.1962	85 26		sta $26				sta 	zTemp2
.1964	38		sec				sec 									; length - start is the max count of chars
.1965	b2 26		lda ($26)			lda 	(zTemp2)
.1967	e5 25		sbc $25				sbc 	zTemp1+1
.1969	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.196b	b0 02		bcs $196f			bcs 	_EXPSSNoTrim
.196d	85 24		sta $24				sta 	zTemp1 							; update count with available
.196f					_EXPSSNoTrim:
.196f	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1971	20 fd 26	jsr $26fd			jsr 	StringTempAllocate 				; allocate memory for it.
.1974	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1976	f0 15		beq $198d			beq 	_EXPSSExit
.1978	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.197a	d2 26		cmp ($26)			cmp 	(zTemp2)
.197c	b0 0f		bcs $198d			bcs 	_EXPSSExit
.197e	5a		phy				phy
.197f	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1981	c8		iny				iny 									; +1 for the length byte
.1982					_EXPSSCopy:
.1982	b1 26		lda ($26),y			lda 	(zTemp2),y
.1984	20 32 27	jsr $2732			jsr 	StringTempWrite
.1987	c8		iny				iny
.1988	c6 24		dec $24				dec 	zTemp1
.198a	d0 f6		bne $1982			bne 	_EXPSSCopy
.198c	7a		ply				ply
.198d					_EXPSSExit:
.198d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.198e					EXPUnaryVal:
.198e	20 58 16	jsr $1658			jsr 	EXPEvalString 					; string to R0, zTemp0
.1991	20 07 26	jsr $2607			jsr 	ERRCheckRParen 					; )
.1994	20 98 19	jsr $1998			jsr 	VALConversionZTemp0
.1997	60		rts				rts
.1998					VALConversionZTemp0:
.1998	5a		phy				phy
.1999	18		clc				clc
.199a	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.199c	69 01		adc #$01			adc 	#1
.199e	aa		tax				tax
.199f	a5 23		lda $23				lda 	zTemp0+1
.19a1	69 00		adc #$00			adc 	#0
.19a3	a8		tay				tay
.19a4	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.19a6	20 13 2e	jsr $2e13			jsr 	IFloatStringToFloatR0 			; do conversion
.19a9	b0 02		bcs $19ad			bcs 	_EUVError
.19ab	7a		ply				ply
.19ac	60		rts				rts
.19ad					_EUVError:
.19ad	4c 8c 24	jmp $248c		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.19b0					BinaryPrecedence:
>19b0	02					.byte	 2	; $ef =
>19b1	02					.byte	 2	; $f0 <>
>19b2	02					.byte	 2	; $f1 <=
>19b3	02					.byte	 2	; $f2 <
>19b4	02					.byte	 2	; $f3 >=
>19b5	02					.byte	 2	; $f4 >
>19b6	01					.byte	 1	; $f5 XOR
>19b7	01					.byte	 1	; $f6 OR
>19b8	01					.byte	 1	; $f7 AND
>19b9	04					.byte	 4	; $f8 DIV
>19ba	04					.byte	 4	; $f9 MOD
>19bb	04					.byte	 4	; $fa <<
>19bc	04					.byte	 4	; $fb >>
>19bd	04					.byte	 4	; $fc /
>19be	04					.byte	 4	; $fd *
>19bf	03					.byte	 3	; $fe -
>19c0	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.19c1					StructureOffsets:
>19c1	01					.byte	1  	; $80 REPEAT
>19c2	ff					.byte	255	; $81 UNTIL
>19c3	01					.byte	1  	; $82 WHILE
>19c4	ff					.byte	255	; $83 WEND
>19c5	01					.byte	1  	; $84 IF
>19c6	ff					.byte	255	; $85 ENDIF
>19c7	01					.byte	1  	; $86 DO
>19c8	ff					.byte	255	; $87 LOOP
>19c9	01					.byte	1  	; $88 PROC
>19ca	ff					.byte	255	; $89 ENDPROC
>19cb	01					.byte	1  	; $8a FOR
>19cc	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.19cd					StandardTokens:
>19cd	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>19d4	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>19da	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>19e0	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>19e5	02 49 46				.byte	$02,$49,$46                             	; $84 if
>19e8	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>19ee	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>19f1	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>19f6	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>19fb	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1a03	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1a07	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1a0c	00					.byte	$00                                     	; $8c [[end]]
>1a0d	00					.byte	$00                                     	; $8d [[shift]]
>1a0e	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1a13	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1a18	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1a1b	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1a20	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1a24	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1a2a	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1a30	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1a35	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1a39	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1a3d	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1a42	01 2c					.byte	$01,$2c                                 	; $99 ,
>1a44	01 3b					.byte	$01,$3b                                 	; $9a ;
>1a46	01 3a					.byte	$01,$3a                                 	; $9b :
>1a48	01 27					.byte	$01,$27                                 	; $9c '
>1a4a	01 29					.byte	$01,$29                                 	; $9d )
>1a4c	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1a50	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1a56	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1a5a	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1a5e	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1a63	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1a67	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1a6e	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1a73	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1a78	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1a7d	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1a82	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1a87	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $aa read
>1a8c	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $ab data
>1a91	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $ac restore
>1a99	00					.byte	0											; $ad
>1a9a	00					.byte	0											; $ae
>1a9b	00					.byte	0											; $af
>1a9c	00					.byte	0											; $b0
>1a9d	00					.byte	0											; $b1
>1a9e	00					.byte	0											; $b2
>1a9f	00					.byte	0											; $b3
>1aa0	00					.byte	0											; $b4
>1aa1	00					.byte	0											; $b5
>1aa2	00					.byte	0											; $b6
>1aa3	00					.byte	0											; $b7
>1aa4	00					.byte	0											; $b8
>1aa5	00					.byte	0											; $b9
>1aa6	00					.byte	0											; $ba
>1aa7	00					.byte	0											; $bb
>1aa8	00					.byte	0											; $bc
>1aa9	00					.byte	0											; $bd
>1aaa	00					.byte	0											; $be
>1aab	00					.byte	0											; $bf
>1aac	00					.byte	0											; $c0
>1aad	00					.byte	0											; $c1
>1aae	00					.byte	0											; $c2
>1aaf	00					.byte	0											; $c3
>1ab0	00					.byte	0											; $c4
>1ab1	00					.byte	0											; $c5
>1ab2	00					.byte	0											; $c6
>1ab3	00					.byte	0											; $c7
>1ab4	00					.byte	0											; $c8
>1ab5	00					.byte	0											; $c9
>1ab6	00					.byte	0											; $ca
>1ab7	00					.byte	0											; $cb
>1ab8	00					.byte	0											; $cc
>1ab9	00					.byte	0											; $cd
>1aba	00					.byte	0											; $ce
>1abb	00					.byte	0											; $cf
>1abc	00					.byte	0											; $d0
>1abd	00					.byte	0											; $d1
>1abe	00					.byte	0											; $d2
>1abf	00					.byte	0											; $d3
>1ac0	00					.byte	0											; $d4
>1ac1	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1ac7	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1acd	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1ad5	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1adc	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1ae2	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ae8	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1aed	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1af2	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1af7	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1afc	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1b01	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1b07	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1b0c	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1b14	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1b1b	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1b20	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1b25	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1b2b	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1b30	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1b36	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1b3b	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1b41	01 28					.byte	$01,$28                                 	; $eb (
>1b43	01 24					.byte	$01,$24                                 	; $ec $
>1b45	00					.byte	$00                                     	; $ed [[decimal]]
>1b46	00					.byte	$00                                     	; $ee [[string]]
>1b47	01 3d					.byte	$01,$3d                                 	; $ef =
>1b49	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1b4c	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1b4f	01 3c					.byte	$01,$3c                                 	; $f2 <
>1b51	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1b54	01 3e					.byte	$01,$3e                                 	; $f4 >
>1b56	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1b5a	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1b5d	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1b61	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1b65	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1b69	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1b6c	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1b6f	01 2f					.byte	$01,$2f                                 	; $fc /
>1b71	01 2a					.byte	$01,$2a                                 	; $fd *
>1b73	01 2d					.byte	$01,$2d                                 	; $fe -
>1b75	01 2b					.byte	$01,$2b                                 	; $ff +
>1b77	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1b78					VectorTable:
>1b78	5a 23					.word	Command_REPEAT           ; $80 REPEAT
>1b7a	63 23					.word	Command_UNTIL            ; $81 UNTIL
>1b7c	3d 24					.word	Command_WHILE            ; $82 WHILE
>1b7e	5e 24					.word	Command_WEND             ; $83 WEND
>1b80	30 23					.word	IfCommand                ; $84 IF
>1b82	59 23					.word	EndIf                    ; $85 ENDIF
>1b84	cd 21					.word	Command_DO               ; $86 DO
>1b86	e5 21					.word	Command_LOOP             ; $87 LOOP
>1b88	6e 14					.word	NoExec08                 ; $88 PROC
>1b8a	c1 21					.word	Command_ENDPROC          ; $89 ENDPROC
>1b8c	ee 21					.word	Command_FOR              ; $8a FOR
>1b8e	7b 22					.word	Command_NEXT             ; $8b NEXT
>1b90	f4 13					.word	RUNEndOfLine             ; $8c [[END]]
>1b92	50 14					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1b94	52 23					.word	ElseCode                 ; $8e ELSE
>1b96	6e 14					.word	NoExec01                 ; $8f THEN
>1b98	6e 14					.word	NoExec02                 ; $90 TO
>1b9a	6e 14					.word	NoExec03                 ; $91 STEP
>1b9c	88 12					.word	CommandLET               ; $92 LET
>1b9e	d9 11					.word	Command_Print            ; $93 PRINT
>1ba0	d2 11					.word	Command_Input            ; $94 INPUT
>1ba2	85 21					.word	Command_CALL             ; $95 CALL
>1ba4	59 14					.word	Command_Sys              ; $96 SYS
>1ba6	db 13					.word	Command_REM              ; $97 REM
>1ba8	d6 21					.word	Command_EXIT             ; $98 EXIT
>1baa	6e 14					.word	NoExec04                 ; $99 ,
>1bac	6e 14					.word	NoExec05                 ; $9a ;
>1bae	6e 14					.word	NoExec06                 ; $9b :
>1bb0	db 13					.word	Command_REM2             ; $9c '
>1bb2	6e 14					.word	NoExec07                 ; $9d )
>1bb4	8c 10					.word	CommandDIM               ; $9e DIM
>1bb6	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1bb8	d2 13					.word	Command_NEW              ; $a0 NEW
>1bba	e8 13					.word	Command_RUN              ; $a1 RUN
>1bbc	56 14					.word	Command_STOP             ; $a2 STOP
>1bbe	53 14					.word	Command_END              ; $a3 END
>1bc0	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1bc2	02 13					.word	Command_LIST             ; $a5 LIST
>1bc4	84 27					.word	NotImplemented           ; $a6 SAVE
>1bc6	84 27					.word	NotImplemented           ; $a7 LOAD
>1bc8	ab 11					.word	Command_Poke             ; $a8 POKE
>1bca	a8 11					.word	Command_Doke             ; $a9 DOKE
>1bcc	84 27					.word	NotImplemented           ; $aa READ
>1bce	84 27					.word	NotImplemented           ; $ab DATA
>1bd0	84 27					.word	NotImplemented           ; $ac RESTORE
>1bd2	84 27					.word	NotImplemented           ; $ad
>1bd4	84 27					.word	NotImplemented           ; $ae
>1bd6	84 27					.word	NotImplemented           ; $af
>1bd8	84 27					.word	NotImplemented           ; $b0
>1bda	84 27					.word	NotImplemented           ; $b1
>1bdc	84 27					.word	NotImplemented           ; $b2
>1bde	84 27					.word	NotImplemented           ; $b3
>1be0	84 27					.word	NotImplemented           ; $b4
>1be2	84 27					.word	NotImplemented           ; $b5
>1be4	84 27					.word	NotImplemented           ; $b6
>1be6	84 27					.word	NotImplemented           ; $b7
>1be8	84 27					.word	NotImplemented           ; $b8
>1bea	84 27					.word	NotImplemented           ; $b9
>1bec	84 27					.word	NotImplemented           ; $ba
>1bee	84 27					.word	NotImplemented           ; $bb
>1bf0	84 27					.word	NotImplemented           ; $bc
>1bf2	84 27					.word	NotImplemented           ; $bd
>1bf4	84 27					.word	NotImplemented           ; $be
>1bf6	84 27					.word	NotImplemented           ; $bf
>1bf8	84 27					.word	NotImplemented           ; $c0
>1bfa	84 27					.word	NotImplemented           ; $c1
>1bfc	84 27					.word	NotImplemented           ; $c2
>1bfe	84 27					.word	NotImplemented           ; $c3
>1c00	84 27					.word	NotImplemented           ; $c4
>1c02	84 27					.word	NotImplemented           ; $c5
>1c04	84 27					.word	NotImplemented           ; $c6
>1c06	84 27					.word	NotImplemented           ; $c7
>1c08	84 27					.word	NotImplemented           ; $c8
>1c0a	84 27					.word	NotImplemented           ; $c9
>1c0c	84 27					.word	NotImplemented           ; $ca
>1c0e	84 27					.word	NotImplemented           ; $cb
>1c10	84 27					.word	NotImplemented           ; $cc
>1c12	84 27					.word	NotImplemented           ; $cd
>1c14	84 27					.word	NotImplemented           ; $ce
>1c16	84 27					.word	NotImplemented           ; $cf
>1c18	84 27					.word	NotImplemented           ; $d0
>1c1a	84 27					.word	NotImplemented           ; $d1
>1c1c	84 27					.word	NotImplemented           ; $d2
>1c1e	84 27					.word	NotImplemented           ; $d3
>1c20	84 27					.word	NotImplemented           ; $d4
>1c22	d1 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1c24	c3 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1c26	12 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1c28	05 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1c2a	2c 19					.word	EXPUnaryMid              ; $d9 MID$(
>1c2c	c3 18					.word	EXPUnaryStr              ; $da STR$(
>1c2e	8e 19					.word	EXPUnaryVal              ; $db VAL(
>1c30	90 18					.word	EXPUnarySgn              ; $dc SGN(
>1c32	41 17					.word	EXPUnaryAbs              ; $dd ABS(
>1c34	15 18					.word	EXPUnaryLen              ; $de LEN(
>1c36	a6 18					.word	EXPUnarySqr              ; $df SQR(
>1c38	61 17					.word	EXPUnaryChr              ; $e0 CHR$(
>1c3a	4b 17					.word	EXPUnaryAsc              ; $e1 ASC(
>1c3c	f7 17					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1c3e	84 27					.word	NotImplemented           ; $e3 EVENT(
>1c40	84 27					.word	NotImplemented           ; $e4 TIME
>1c42	0b 18					.word	EXPUnaryInt              ; $e5 INT(
>1c44	ed 17					.word	EXPUnaryFrac             ; $e6 FRAC(
>1c46	72 17					.word	EXPUnaryDec              ; $e7 DEC(
>1c48	b5 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1c4a	2a 18					.word	EXPUnaryRnd              ; $e9 RND(
>1c4c	3a 18					.word	ExpUnaryRand             ; $ea RAND(
>1c4e	23 18					.word	EXPUnaryParenthesis      ; $eb (
>1c50	e9 17					.word	EXPUnaryNull             ; $ec $
>1c52	c0 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1c54	ea 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1c56	2b 15					.word	EXPCompareEqual          ; $ef =
>1c58	46 15					.word	EXPCompareNotEqual       ; $f0 <>
>1c5a	4f 15					.word	EXPCompareLessEqual      ; $f1 <=
>1c5c	34 15					.word	EXPCompareLess           ; $f2 <
>1c5e	58 15					.word	EXPCompareGreaterEqual   ; $f3 >=
>1c60	3d 15					.word	EXPCompareGreater        ; $f4 >
>1c62	d8 14					.word	EXPBinXor                ; $f5 XOR
>1c64	cc 14					.word	EXPBinOr                 ; $f6 OR
>1c66	c0 14					.word	EXPBinAnd                ; $f7 AND
>1c68	98 14					.word	EXPBinIDiv               ; $f8 DIV
>1c6a	a9 14					.word	EXPBinIMod               ; $f9 MOD
>1c6c	a3 15					.word	EXPBinLeft               ; $fa <<
>1c6e	ab 15					.word	EXPBinRight              ; $fb >>
>1c70	8c 14					.word	EXPBinFDiv               ; $fc /
>1c72	83 14					.word	EXPBinMul                ; $fd *
>1c74	7a 14					.word	EXPBinSub                ; $fe -
>1c76	71 14					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1c78					TOKDetokenise:
.1c78	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1c7a	84 27		sty $27				sty 	zTemp2+1
.1c7c	9c 13 05	stz $0513			stz		TOKLastCharacter 			; clear last character
.1c7f					_TOKDLoop:
.1c7f	20 ae 1c	jsr $1cae			jsr 	TOKDGet 					; get next
.1c82	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1c84	f0 26		beq $1cac			beq 	_TOKDExit
.1c86	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1c88	f0 1d		beq $1ca7			beq 	_TOKDDataItem
.1c8a	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1c8c	f0 19		beq $1ca7			beq 	_TOKDDataItem
.1c8e	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1c90	10 05		bpl $1c97			bpl 	_TOKDNotToken
.1c92	20 76 1d	jsr $1d76			jsr 	TOKDToken 					; token to text.
.1c95	80 e8		bra $1c7f			bra 	_TOKDLoop
.1c97					_TOKDNotToken:
.1c97	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1c99	90 05		bcc $1ca0			bcc 	_TOKDNotIdentifier
.1c9b	20 e9 1c	jsr $1ce9			jsr 	TOKDIdentifier
.1c9e	80 df		bra $1c7f			bra 	_TOKDLoop
.1ca0					_TOKDNotIdentifier:
.1ca0	a0 0a		ldy #$0a			ldy 	#10
.1ca2	20 32 1d	jsr $1d32			jsr 	TOKDInteger
.1ca5	80 d8		bra $1c7f			bra 	_TOKDLoop
.1ca7					_TOKDDataItem:
.1ca7	20 c4 1c	jsr $1cc4			jsr 	TOKDDataItem
.1caa	80 d3		bra $1c7f			bra 	_TOKDLoop
.1cac					_TOKDExit:
.1cac	18		clc				clc
.1cad	60		rts				rts
.1cae	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1cb0	e6 26		inc $26				inc 	zTemp2
.1cb2	d0 02		bne $1cb6			bne 	_TKDGExit
.1cb4	e6 27		inc $27				inc 	zTemp2+1
.1cb6					_TKDGExit:
.1cb6	60		rts				rts
.1cb7					TOKDOutput:
.1cb7	8d 13 05	sta $0513			sta 	TOKLastCharacter
.1cba	6c 11 05	jmp ($0511)			jmp 	(TOKOutputMethod)
.1cbd					TOKSetDetokeniseOutput:
.1cbd	8e 11 05	stx $0511			stx 	TOKOutputMethod
.1cc0	8c 12 05	sty $0512			sty 	TOKOutputMethod+1
.1cc3	60		rts				rts
.0511					TOKOutputMethod:
>0511							.fill 	2
.0513					TOKLastCharacter:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1cc4					TOKDDataItem:
.1cc4	a8		tay				tay 								; type in Y
.1cc5	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1cc7	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1cc9	f0 02		beq $1ccd			beq 	_TOKDDIsString
.1ccb	a9 2e		lda #$2e			lda 	#'.'
.1ccd					_TOKDDIsString:
.1ccd	20 b7 1c	jsr $1cb7			jsr 	TOKDOutput 					; dump it
.1cd0	20 ae 1c	jsr $1cae			jsr 	TOKDGet 					; get length into X
.1cd3	aa		tax				tax
.1cd4					_TOKDDOutput:
.1cd4	ca		dex				dex 								; are we complete
.1cd5	30 08		bmi $1cdf			bmi 	_TOKDDEnd
.1cd7	20 ae 1c	jsr $1cae			jsr 	TOKDGet 					; get character and output it
.1cda	20 b7 1c	jsr $1cb7			jsr 	TOKDOutput
.1cdd	80 f5		bra $1cd4			bra 	_TOKDDOutput
.1cdf					_TOKDDEnd:
.1cdf	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1ce1	d0 05		bne $1ce8			bne 	_TOKDDNotString
.1ce3	a9 22		lda #$22			lda 	#'"'
.1ce5	20 b7 1c	jsr $1cb7			jsr 	TOKDOutput
.1ce8					_TOKDDNotString:
.1ce8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1ce9					TOKDIdentifier:
.1ce9	a0 ff		ldy #$ff			ldy 	#$FF
.1ceb	8c 14 05	sty $0514			sty 	TOKDIFirstChar
.1cee					_TOKDLoop:
.1cee	a8		tay				tay 								; token in Y
.1cef	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1cf1	c0 64		cpy #$64			cpy 	#$64
.1cf3	f0 11		beq $1d06			beq 	_TOKDIOutput
.1cf5	a9 5f		lda #$5f			lda 	#'_'
.1cf7	c0 65		cpy #$65			cpy 	#$65
.1cf9	f0 0b		beq $1d06			beq 	_TOKDIOutput
.1cfb	98		tya				tya 								; handle a-z
.1cfc	18		clc				clc
.1cfd	69 21		adc #$21			adc	 	#$21
.1cff	c0 5a		cpy #$5a			cpy 	#$5A
.1d01	90 03		bcc $1d06			bcc 	_TOKDIOutput
.1d03	38		sec				sec 								; handle 0-9
.1d04	e9 4b		sbc #$4b			sbc 	#$4B
.1d06					_TOKDIOutput:
.1d06	2c 14 05	bit $0514			bit 	TOKDIFirstChar
.1d09	10 08		bpl $1d13			bpl 	_TOKDINoSpacing
.1d0b	48		pha				pha
.1d0c	20 a8 1d	jsr $1da8			jsr 	TOKDSpacing
.1d0f	9c 14 05	stz $0514			stz 	TOKDIFirstChar
.1d12	68		pla				pla
.1d13					_TOKDINoSpacing:
.1d13	20 b7 1c	jsr $1cb7			jsr 	TOKDOutput
.1d16	20 ae 1c	jsr $1cae			jsr 	TOKDGet 					; get next token
.1d19	c9 7c		cmp #$7c			cmp 	#$7C
.1d1b	90 d1		bcc $1cee			bcc 	_TOKDLoop
.1d1d	f0 12		beq $1d31			beq 	_TOKDIExit 					; it's a number, no tail.
.1d1f	4a		lsr a				lsr 	a 							; string ?
.1d20	90 07		bcc $1d29			bcc 	_TOKDICheckArray
.1d22	48		pha				pha
.1d23	a9 24		lda #$24			lda 	#"$"
.1d25	20 b7 1c	jsr $1cb7			jsr 	TOKDOutput
.1d28	68		pla				pla
.1d29					_TOKDICheckArray:
.1d29	4a		lsr a				lsr 	a 							; array ?
.1d2a	90 05		bcc $1d31			bcc 	_TOKDIExit
.1d2c	a9 28		lda #$28			lda 	#"("
.1d2e	20 b7 1c	jsr $1cb7			jsr 	TOKDOutput
.1d31					_TOKDIExit:
.1d31	60		rts				rts
.0514					TOKDIFirstChar:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1d32					TOKDInteger:
.1d32	5a		phy				phy 								; save base
.1d33	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1d35	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.1d38					_TOKDILoop:
.1d38	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1d3a	c9 40		cmp #$40			cmp 	#$40
.1d3c	b0 1d		bcs $1d5b			bcs 	_TOKDIHaveInteger
.1d3e	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1d40	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.1d43	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.1d46	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.1d49	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.1d4c	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.1d4f	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.1d52	20 ae 1c	jsr $1cae			jsr 	TOKDGet 					; OR byte in.
.1d55	05 08		ora $08				ora 	IFR0+IM0
.1d57	85 08		sta $08				sta 	IFR0+IM0
.1d59	80 dd		bra $1d38			bra 	_TOKDILoop
.1d5b					_TOKDIHaveInteger:
.1d5b	7a		ply				ply 								; restore base
.1d5c	98		tya				tya 								; base in A
.1d5d	20 50 2d	jsr $2d50			jsr 	IFloatIntegerToStringR0
.1d60	86 22		stx $22				stx 	zTemp0
.1d62	84 23		sty $23				sty 	zTemp0+1
.1d64	b2 22		lda ($22)			lda 	(zTemp0)
.1d66	20 a8 1d	jsr $1da8			jsr 	TOKDSpacing 				; check spacing okay.
.1d69	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1d6b					_TOKDOutput:
.1d6b	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d6d	20 b7 1c	jsr $1cb7			jsr 	TOKDOutput
.1d70	c8		iny				iny
.1d71	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d73	d0 f6		bne $1d6b			bne 	_TOKDOutput
.1d75	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1d76					TOKDToken:
.1d76	a2 cd		ldx #$cd			ldx 	#StandardTokens & $FF
.1d78	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1d7a					_TOKDSearch:
.1d7a	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1d7c	84 23		sty $23				sty 	zTemp0+1
.1d7e	aa		tax				tax 								; token ID in X.
.1d7f					_TOKDFind:
.1d7f	ca		dex				dex 								; reached the start
.1d80	10 0d		bpl $1d8f			bpl 	_TOKDFound
.1d82	38		sec				sec 								; go to next entry
.1d83	b2 22		lda ($22)			lda 	(zTemp0)
.1d85	65 22		adc $22				adc 	zTemp0
.1d87	85 22		sta $22				sta 	zTemp0
.1d89	90 f4		bcc $1d7f			bcc 	_TOKDFind
.1d8b	e6 23		inc $23				inc 	zTemp0+1
.1d8d	80 f0		bra $1d7f			bra 	_TOKDFind
.1d8f					_TOKDFound:
.1d8f	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1d91	f0 14		beq $1da7			beq 	_TOKDExit
.1d93	aa		tax				tax
.1d94	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1d96	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1d98	20 a8 1d	jsr $1da8			jsr 	TOKDSpacing
.1d9b					_TOKDOutput:
.1d9b	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d9d	20 40 21	jsr $2140			jsr 	TOKToLower
.1da0	20 b7 1c	jsr $1cb7			jsr 	TOKDOutput
.1da3	c8		iny				iny
.1da4	ca		dex				dex
.1da5	d0 f4		bne $1d9b			bne 	_TOKDOutput
.1da7					_TOKDExit:
.1da7	60		rts				rts
.1da8					TOKDSpacing:
.1da8	20 57 21	jsr $2157			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1dab	90 0d		bcc $1dba			bcc 	_TOKDSExit
.1dad	ad 13 05	lda $0513			lda 	TOKLastCharacter			; and last character also alphanumeric
.1db0	20 57 21	jsr $2157			jsr 	TOKIsIdentifierElement
.1db3	90 05		bcc $1dba			bcc 	_TOKDSExit
.1db5	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1db7	20 b7 1c	jsr $1cb7			jsr 	TOKDOutput
.1dba					_TOKDSExit:
.1dba	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1dbb					PGMDeleteLine:
.1dbb	20 6e 1e	jsr $1e6e			jsr 	PGMEndProgram 				; end of program into zTemp0
.1dbe	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1dc0	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1dc3	85 25		sta $25				sta 	zTemp1+1
.1dc5					_PGMDLoop:
.1dc5	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1dc7	38		sec				sec
.1dc8	f0 3a		beq $1e04			beq 	_PGMDExit
.1dca	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1dcc	b1 24		lda ($24),y			lda 	(zTemp1),y
.1dce	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1dd1	d0 08		bne $1ddb			bne 	_PGMDNext
.1dd3	c8		iny				iny
.1dd4	b1 24		lda ($24),y			lda 	(zTemp1),y
.1dd6	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1dd9	f0 0d		beq $1de8			beq 	_PGMDDelete
.1ddb					_PGMDNext:
.1ddb	18		clc				clc
.1ddc	b2 24		lda ($24)			lda 	(zTemp1)
.1dde	65 24		adc $24				adc 	zTemp1
.1de0	85 24		sta $24				sta 	zTemp1
.1de2	90 e1		bcc $1dc5			bcc 	_PGMDLoop
.1de4	e6 25		inc $25				inc 	zTemp1+1
.1de6	80 dd		bra $1dc5			bra 	_PGMDLoop
.1de8					_PGMDDelete:
.1de8	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1dea	a8		tay				tay
.1deb					_PGMDCopy:
.1deb	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1ded	92 24		sta ($24)			sta 	(zTemp1)
.1def	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1df1	c5 22		cmp $22				cmp 	zTemp0
.1df3	d0 07		bne $1dfc			bne 	_PGMDNext2
.1df5	a5 25		lda $25				lda 	zTemp1+1
.1df7	c5 23		cmp $23				cmp 	zTemp0+1
.1df9	18		clc				clc
.1dfa	f0 08		beq $1e04			beq 	_PGMDExit
.1dfc					_PGMDNext2:
.1dfc	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1dfe	d0 eb		bne $1deb			bne 	_PGMDCopy
.1e00	e6 25		inc $25				inc 	zTemp1+1
.1e02	80 e7		bra $1deb			bra 	_PGMDCopy
.1e04					_PGMDExit:
.1e04	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1e05					PGMInsertLine:
.1e05	20 6e 1e	jsr $1e6e			jsr 	PGMEndProgram 				; end of program into zTemp0
.1e08	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1e0a	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1e0d	85 25		sta $25				sta 	zTemp1+1
.1e0f					_PGMILoop:
.1e0f	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1e11	f0 1c		beq $1e2f			beq 	_PGMIInsert
.1e13	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1e15	b1 24		lda ($24),y			lda 	(zTemp1),y
.1e17	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1e1a	c8		iny				iny
.1e1b	b1 24		lda ($24),y			lda 	(zTemp1),y
.1e1d	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1e20	b0 0d		bcs $1e2f			bcs 	_PGMIInsert 				; insert here.
.1e22	18		clc				clc
.1e23	b2 24		lda ($24)			lda 	(zTemp1)
.1e25	65 24		adc $24				adc 	zTemp1
.1e27	85 24		sta $24				sta 	zTemp1
.1e29	90 e4		bcc $1e0f			bcc 	_PGMILoop
.1e2b	e6 25		inc $25				inc 	zTemp1+1
.1e2d	80 e0		bra $1e0f			bra 	_PGMILoop
.1e2f					_PGMIInsert:
.1e2f	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1e32					_PGMIInsertLoop:
.1e32	b2 22		lda ($22)			lda 	(zTemp0)
.1e34	91 22		sta ($22),y			sta 	(zTemp0),y
.1e36	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1e38	c5 22		cmp $22				cmp 	zTemp0
.1e3a	d0 06		bne $1e42			bne 	_PGMINext
.1e3c	a5 25		lda $25				lda 	zTemp1+1
.1e3e	c5 23		cmp $23				cmp 	zTemp0+1
.1e40	f0 0a		beq $1e4c			beq 	_PGMIInserted
.1e42					_PGMINext:
.1e42	a5 22		lda $22				lda 	zTemp0
.1e44	d0 02		bne $1e48			bne 	_PGMINoBorrow
.1e46	c6 23		dec $23				dec 	zTemp0+1
.1e48					_PGMINoBorrow:
.1e48	c6 22		dec $22				dec 	zTemp0
.1e4a	80 e6		bra $1e32			bra 	_PGMIInsertLoop
.1e4c					_PGMIInserted:
.1e4c	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1e4e					_PGMICopyLoop:
.1e4e	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1e51	91 24		sta ($24),y			sta 	(zTemp1),y
.1e53	c8		iny				iny
.1e54	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1e57	d0 f5		bne $1e4e			bne 	_PGMICopyLoop
.1e59	18		clc				clc
.1e5a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1e5b					PGMSetBaseAddress:
.1e5b	8e 15 05	stx $0515			stx 	PGMBaseHigh
.1e5e	8c 16 05	sty $0516			sty 	PGMEndMemoryHigh
.1e61	60		rts				rts
.1e62					PGMNewProgram:
.1e62	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1e64	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1e67	85 23		sta $23				sta 	zTemp0+1
.1e69	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1e6b	92 22		sta ($22)			sta 	(zTemp0)
.1e6d	60		rts				rts
.1e6e					PGMEndProgram:
.1e6e	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1e70	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1e73	85 23		sta $23				sta 	zTemp0+1
.1e75					_PGMEPLoop:
.1e75	b2 22		lda ($22)			lda 	(zTemp0)
.1e77	f0 0b		beq $1e84			beq 	_PGMEPExit
.1e79	18		clc				clc
.1e7a	65 22		adc $22				adc 	zTemp0
.1e7c	85 22		sta $22				sta 	zTemp0
.1e7e	90 f5		bcc $1e75			bcc 	_PGMEPLoop
.1e80	e6 23		inc $23				inc 	zTemp0+1
.1e82	80 f1		bra $1e75			bra 	_PGMEPLoop
.1e84					_PGMEPExit:
.1e84	60		rts				rts
.0515					PGMBaseHigh:
>0515							.fill 	1
.0516					PGMEndMemoryHigh:
>0516							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1e85					TOKResetElement:
.1e85	9c 17 05	stz $0517			stz 	TOKElement
.1e88	60		rts				rts
.1e89					TOKWriteElement:
.1e89	da		phx				phx
.1e8a	ae 17 05	ldx $0517			ldx 	TOKElement
.1e8d	9d 18 05	sta $0518,x			sta 	TOKElementText,x
.1e90	9e 19 05	stz $0519,x			stz 	TOKElementText+1,x
.1e93	fa		plx				plx
.1e94	ee 17 05	inc $0517			inc 	TOKElement
.1e97	60		rts				rts
.0517					TOKElement:
>0517							.fill 	1
.0518					TOKElementText:
>0518							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1e98					TOKTokeniseConstant:
.1e98	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1e9a	48		pha				pha 								; save on stack
.1e9b	29 c0		and #$c0			and 	#$C0
.1e9d	05 09		ora $09				ora 	IFR0+IM1
.1e9f	05 0a		ora $0a				ora 	IFR0+IM2
.1ea1	f0 10		beq $1eb3			beq 	_TTCLess
.1ea3	da		phx				phx
.1ea4	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1ea6					_TTCShiftRight:
.1ea6	46 0a		lsr $0a				lsr 	IFR0+IM2
.1ea8	66 09		ror $09				ror 	IFR0+IM1
.1eaa	66 08		ror $08				ror 	IFR0+IM0
.1eac	ca		dex				dex
.1ead	d0 f7		bne $1ea6			bne 	_TTCShiftRight
.1eaf	fa		plx				plx
.1eb0	20 98 1e	jsr $1e98			jsr 	TOKTokeniseConstant
.1eb3					_TTCLess:
.1eb3	68		pla				pla
.1eb4	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1eb6	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.1eb9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1eba					TOKTokeniseDecimals:
.1eba	20 65 1f	jsr $1f65			jsr 	TOKGetNext 					; consume the .
.1ebd	20 cd 20	jsr $20cd			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1ec0	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1ec2	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.1ec5	20 ca 1e	jsr $1eca			jsr 	TOKOutputElementBuffer 		; then the buffer
.1ec8	18		clc				clc
.1ec9	60		rts				rts
.1eca					TOKOutputElementBuffer:
.1eca	ad 17 05	lda $0517			lda 	TOKElement 					; get count and write that
.1ecd	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.1ed0	a8		tay				tay 								; put in Y
.1ed1	f0 0c		beq $1edf			beq 	_TOEExit 					; exit if empty which is okay.
.1ed3	a2 01		ldx #$01			ldx 	#1
.1ed5					_TOELoop:
.1ed5	bd 17 05	lda $0517,x			lda 	TOKElement,x
.1ed8	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.1edb	e8		inx				inx
.1edc	88		dey				dey
.1edd	d0 f6		bne $1ed5			bne 	_TOELoop
.1edf					_TOEExit:
.1edf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1ee0					TOKTokenise:
.1ee0	8c 18 06	sty $0618			sty 	TOKDataSource+1 			; save source routine pointer
.1ee3	8e 17 06	stx $0617			stx 	TOKDataSource
.1ee6	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1ee8	8d 19 06	sta $0619			sta 	TOKIsFirstElement
.1eeb	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1eed	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1ef0	9c 01 04	stz $0401			stz 	TOKLineNumber
.1ef3	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1ef6					_TOKMainLoop:
.1ef6	20 61 1f	jsr $1f61			jsr 	TOKGet 						; what follows.
.1ef9	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1efb	f0 4f		beq $1f4c			beq 	_TOKExit
.1efd	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1eff	d0 05		bne $1f06			bne 	_TOKElement
.1f01	20 65 1f	jsr $1f65			jsr 	TOKGetNext
.1f04	80 f0		bra $1ef6			bra 	_TOKMainLoop
.1f06					_TOKElement:
.1f06	20 4b 21	jsr $214b			jsr 	TOKIsDigit 					; is it 0..9
.1f09	90 0a		bcc $1f15			bcc 	_TOKNotDigit
.1f0b	20 a4 20	jsr $20a4			jsr 	TOKTokeniseInteger 			; get integer
.1f0e	b0 43		bcs $1f53			bcs 	_TOKFail 					; did it fail ?
.1f10	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.1f13	80 e1		bra $1ef6			bra 	_TOKMainLoop
.1f15					_TOKNotDigit:
.1f15	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.1f18	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1f1a	d0 07		bne $1f23			bne 	_TOKNotHex
.1f1c	20 ae 1f	jsr $1fae			jsr 	TOKTokeniseHexadecimal
.1f1f	b0 32		bcs $1f53			bcs 	_TOKFail
.1f21	80 d3		bra $1ef6			bra 	_TOKMainLoop
.1f23					_TOKNotHex:
.1f23	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1f25	d0 07		bne $1f2e			bne 	_TOKNotDecimal
.1f27	20 ba 1e	jsr $1eba			jsr 	TOKTokeniseDecimals
.1f2a	b0 27		bcs $1f53			bcs 	_TOKFail
.1f2c	80 c8		bra $1ef6			bra 	_TOKMainLoop
.1f2e					_TOKNotDecimal:
.1f2e	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1f30	d0 07		bne $1f39			bne 	_TOKNotString
.1f32	20 12 21	jsr $2112			jsr 	TOKTokeniseString
.1f35	b0 1c		bcs $1f53			bcs 	_TOKFail
.1f37	80 bd		bra $1ef6			bra 	_TOKMainLoop
.1f39					_TOKNotString:
.1f39	20 68 21	jsr $2168			jsr 	TOKIsAlpha 					; identifier ?
.1f3c	b0 07		bcs $1f45			bcs 	_TOKIdentifier
.1f3e	20 e1 20	jsr $20e1			jsr 	TOKTokenisePunctuation 		; punctuation
.1f41	b0 10		bcs $1f53			bcs 	_TOKFail
.1f43	80 b1		bra $1ef6			bra 	_TOKMainLoop
.1f45					_TOKIdentifier:
.1f45	20 e8 1f	jsr $1fe8			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1f48	b0 09		bcs $1f53			bcs 	_TOKFail
.1f4a	80 aa		bra $1ef6			bra 	_TOKMainLoop
.1f4c					_TOKExit:
.1f4c	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1f4e	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.1f51	18		clc				clc									; return with carry set.
.1f52	60		rts				rts
.1f53					_TOKFail:
.1f53	38		sec				sec
.1f54	60		rts				rts
.1f55					TOKWriteA:
.1f55	da		phx				phx
.1f56	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1f59	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1f5c	fa		plx				plx
.1f5d	ee 00 04	inc $0400			inc 	TOKLineSize
.1f60	60		rts				rts
.1f61					TOKGet:
.1f61	18		clc				clc
.1f62	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.1f65					TOKGetNext:
.1f65	38		sec				sec
.1f66	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.0617					TOKDataSource:
>0617							.fill 	2
.0619					TOKIsFirstElement:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1f69					TOKFindToken:
.1f69	a2 cd		ldx #$cd			ldx 	#StandardTokens & $FF 		; do this table
.1f6b	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1f6d	20 78 1f	jsr $1f78			jsr 	TOKFindTokenXY 				; find it, or not
.1f70	90 04		bcc $1f76			bcc 	_TOKFTFail
.1f72	a2 00		ldx #$00			ldx 	#0
.1f74	38		sec				sec
.1f75	60		rts				rts
.1f76					_TOKFTFail
.1f76	18		clc				clc
.1f77	60		rts				rts
.1f78					TOKFindTokenXY:
.1f78	86 22		stx $22				stx 	zTemp0 						; save token table address
.1f7a	84 23		sty $23				sty 	zTemp0+1
.1f7c	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1f7e	8d 1a 06	sta $061a			sta 	TOKCurrent
.1f81					_TOKFindLoop:
.1f81	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.1f83	18		clc				clc 		 						; clear carry in case of fail
.1f84	30 17		bmi $1f9d			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1f86	cd 17 05	cmp $0517			cmp 	TOKElement 					; compare against the element length
.1f89	d0 13		bne $1f9e			bne 	_TOKNext 					; different, try next.
.1f8b	aa		tax				tax 								; number of chars to compare.
.1f8c	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1f8e					_TOKCompare:
.1f8e	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.1f90	d9 17 05	cmp $0517,y			cmp 	TOKElementText-1,y
.1f93	d0 09		bne $1f9e			bne 	_TOKNext 					; different ? try next
.1f95	c8		iny				iny 								; compare next two
.1f96	ca		dex				dex
.1f97	d0 f5		bne $1f8e			bne 	_TOKCompare 				; until done X characters.
.1f99	38		sec				sec
.1f9a	ad 1a 06	lda $061a			lda 	TOKCurrent 					; return current ID.
.1f9d					_TOKExit:
.1f9d	60		rts				rts
.1f9e					_TOKNext:
.1f9e	ee 1a 06	inc $061a			inc 	TOKCurrent 					; increment token #
.1fa1	38		sec				sec 								; add length+1 to ptr
.1fa2	b2 22		lda ($22)			lda 	(zTemp0)
.1fa4	65 22		adc $22				adc 	zTemp0
.1fa6	85 22		sta $22				sta 	zTemp0
.1fa8	90 d7		bcc $1f81			bcc 	_TOKFindLoop
.1faa	e6 23		inc $23				inc 	zTemp0+1
.1fac	80 d3		bra $1f81			bra 	_TOKFindLoop
.061a					TOKCurrent:
>061a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1fae					TOKTokeniseHexadecimal:
.1fae	20 65 1f	jsr $1f65			jsr 	TOKGetNext 					; consume the $
.1fb1	a2 08		ldx #$08			ldx 	#IFR0
.1fb3	20 af 2f	jsr $2faf			jsr 	IFloatSetZero 				; set R0 = 0
.1fb6					_TTHLoop:
.1fb6	20 61 1f	jsr $1f61			jsr 	TOKGet 						; keep getting and copying while numeric.
.1fb9	20 75 21	jsr $2175			jsr 	TOKIsHexadecimal
.1fbc	90 20		bcc $1fde			bcc 	_TTHDone
.1fbe	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.1fc0	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.1fc3	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.1fc6	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.1fc9	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.1fcc	20 65 1f	jsr $1f65			jsr 	TOKGetNext
.1fcf	38		sec				sec 								; convert to decimal.
.1fd0	e9 30		sbc #$30			sbc 	#48
.1fd2	c9 0a		cmp #$0a			cmp 	#10
.1fd4	90 02		bcc $1fd8			bcc 	_TTHNotAlpha
.1fd6	e9 07		sbc #$07			sbc 	#7
.1fd8					_TTHNotAlpha:
.1fd8	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.1fda	85 08		sta $08				sta 	IFR0+IM0
.1fdc	80 d8		bra $1fb6			bra 	_TTHLoop
.1fde					_TTHDone:
.1fde	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1fe0	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.1fe3	20 98 1e	jsr $1e98			jsr 	TOKTokeniseConstant 		; write integer out.
.1fe6	18		clc				clc
.1fe7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1fe8					TOKTokeniseIdentifier:
.1fe8	20 85 1e	jsr $1e85			jsr 	TOKResetElement 			; extract an identifier
.1feb					_TOKGetIdentifier:
.1feb	20 61 1f	jsr $1f61			jsr 	TOKGet
.1fee	20 35 21	jsr $2135			jsr 	TOKToUpper
.1ff1	20 57 21	jsr $2157			jsr 	TOKIsIdentifierElement
.1ff4	90 08		bcc $1ffe			bcc 	_TOKEndIdent
.1ff6	20 89 1e	jsr $1e89			jsr		TOKWriteElement
.1ff9	20 65 1f	jsr $1f65			jsr 	TOKGetNext
.1ffc	80 ed		bra $1feb			bra 	_TOKGetIdentifier
.1ffe					_TOKEndIdent:
.1ffe	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.2000	d0 06		bne $2008			bne 	_TOKNotString
.2002	20 89 1e	jsr $1e89			jsr 	TOKWriteElement 			; add it
.2005	20 65 1f	jsr $1f65			jsr 	TOKGetNext 					; consume it
.2008					_TOKNotString:
.2008	20 61 1f	jsr $1f61			jsr 	TOKGet 						; finally check for (
.200b	c9 28		cmp #$28			cmp 	#"("
.200d	d0 06		bne $2015			bne 	_TOKNoArray
.200f	20 89 1e	jsr $1e89			jsr 	TOKWriteElement 			; add it
.2012	20 65 1f	jsr $1f65			jsr 	TOKGetNext 					; consume it
.2015					_TOKNoArray:
.2015	20 69 1f	jsr $1f69			jsr 	TOKFindToken 				; find it
.2018	90 0e		bcc $2028			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.201a	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.201c	f0 05		beq $2023			beq 	_TOKComment 				; yes, do comment code.
.201e	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.2021	18		clc				clc
.2022	60		rts				rts
.2023					_TOKComment:
.2023	20 6f 20	jsr $206f			jsr 	TOKDoComment
.2026	18		clc				clc
.2027	60		rts				rts
.2028					_TOKIsVariable:
.2028	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.202a					_TOKOutputBuffer:
.202a	bd 18 05	lda $0518,x			lda 	TOKElementText,x 			; output it translated.
.202d	20 56 20	jsr $2056			jsr 	TOKTranslateIdentifier
.2030	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.2033	e8		inx				inx
.2034	bd 18 05	lda $0518,x			lda 	TOKElementText,x
.2037	20 57 21	jsr $2157			jsr 	TOKIsIdentifierElement
.203a	b0 ee		bcs $202a			bcs 	_TOKOutputBuffer
.203c	a8		tay				tay 								; last char in Y
.203d	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.203f	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2041	f0 0e		beq $2051			beq 	_TOKIVExit
.2043	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2045	d0 04		bne $204b			bne 	_TOKIVCheckArray 			; no, check for (
.2047	1a		inc a				inc 	a 							; token is $7D
.2048	bc 19 05	ldy $0519,x			ldy 	TOKElementText+1,x 			; get next one.
.204b					_TOKIVCheckArray:
.204b	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.204d	d0 02		bne $2051			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.204f	1a		inc a				inc 	a
.2050	1a		inc a				inc 	a
.2051					_TOKIVExit:
.2051	20 55 1f	jsr $1f55			jsr 	TOKWriteA 					; ending token
.2054	18		clc				clc
.2055	60		rts				rts
.2056					TOKTranslateIdentifier:
.2056	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.2058	f0 0f		beq $2069			beq 	_TTI64
.205a	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.205c	f0 0e		beq $206c			beq 	_TTI65
.205e	38		sec				sec
.205f	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2061	10 03		bpl $2066			bpl 	_TTIExit
.2063	18		clc				clc 								; map 09 onto 26-35
.2064	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2066					_TTIExit:
.2066	09 40		ora #$40			ora 	#$40 						; correct range.
.2068	60		rts				rts
.2069	a9 64		lda #$64	_TTI64:	lda 	#$64
.206b	60		rts				rts
.206c	a9 65		lda #$65	_TTI65:	lda 	#$65
.206e	60		rts				rts
.206f					TOKDoComment:
.206f	20 61 1f	jsr $1f61			jsr 	TOKGet 						; skip over spaces
.2072	c9 20		cmp #$20			cmp 	#' '
.2074	d0 05		bne $207b			bne 	_TOKEndSpaces
.2076	20 65 1f	jsr $1f65			jsr 	TOKGetNext
.2079	80 f4		bra $206f			bra 	TOKDoComment
.207b					_TOKEndSpaces:
.207b	48		pha				pha 								; save it
.207c	a9 97		lda #$97			lda 	#PR_REM 					; output the comment token.
.207e	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.2081	68		pla				pla
.2082	f0 04		beq $2088			beq 	_TOKDCExit 					; end of line.
.2084	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.2086	d0 01		bne $2089			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.2088					_TOKDCExit:
.2088	60		rts				rts
.2089					_TOKDCDoLine:
.2089	20 85 1e	jsr $1e85			jsr 	TOKResetElement 			; start getting the string
.208c					_TOKDCLoop:
.208c	20 61 1f	jsr $1f61			jsr 	TOKGet 						; check EOL
.208f	c9 00		cmp #$00			cmp 	#0
.2091	f0 08		beq $209b			beq 	_TOKDCEndComment
.2093	20 65 1f	jsr $1f65			jsr 	TOKGetNext 					; get and consume
.2096	20 89 1e	jsr $1e89			jsr 	TOKWriteElement
.2099	80 f1		bra $208c			bra 	_TOKDCLoop
.209b					_TOKDCEndComment:
.209b	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.209d	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.20a0	20 ca 1e	jsr $1eca			jsr 	TOKOutputElementBuffer
.20a3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.20a4					TOKTokeniseInteger:
.20a4	20 cd 20	jsr $20cd			jsr 	TOKExtractInteger 			; pull an integer out as text.
.20a7	a2 18		ldx #$18			ldx 	#TOKElementText & $FF
.20a9	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.20ab	ad 17 05	lda $0517			lda		TOKElement
.20ae	20 13 2e	jsr $2e13			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.20b1	ad 19 06	lda $0619			lda 	TOKIsFirstElement 			; first element ?
.20b4	f0 12		beq $20c8			beq 	_TOKNotLineNumber
.20b6	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.20b8	d0 0c		bne $20c6			bne 	_TOKBadLineNumeber
.20ba	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.20bc	8d 01 04	sta $0401			sta 	TOKLineNumber
.20bf	a5 09		lda $09				lda 	IFR0+IM1
.20c1	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.20c4	18		clc				clc
.20c5	60		rts				rts
.20c6					_TOKBadLineNumeber:
.20c6	38		sec				sec
.20c7	60		rts				rts
.20c8					_TOKNotLineNumber:
.20c8	20 98 1e	jsr $1e98			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.20cb	18		clc				clc
.20cc	60		rts				rts
.20cd					TOKExtractInteger:
.20cd	20 85 1e	jsr $1e85			jsr 	TOKResetElement 			; restart
.20d0					_TTILoop:
.20d0	20 61 1f	jsr $1f61			jsr 	TOKGet 						; keep getting and copying while numeric.
.20d3	20 4b 21	jsr $214b			jsr 	TOKIsDigit
.20d6	90 08		bcc $20e0			bcc 	_TOKEIExit
.20d8	20 89 1e	jsr $1e89			jsr 	TOKWriteElement
.20db	20 65 1f	jsr $1f65			jsr 	TOKGetNext
.20de	80 f0		bra $20d0			bra 	_TTILoop
.20e0					_TOKEIExit:
.20e0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.20e1					TOKTokenisePunctuation:
.20e1	20 85 1e	jsr $1e85			jsr 	TOKResetElement 			; copy first punctuation character into element.
.20e4	20 65 1f	jsr $1f65			jsr 	TOKGetNext
.20e7	20 89 1e	jsr $1e89			jsr 	TOKWriteElement
.20ea	20 61 1f	jsr $1f61			jsr 	TOKGet 						; what follows ?
.20ed	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.20ef	f0 10		beq $2101			beq 	_TTPOne
.20f1	20 5f 21	jsr $215f			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.20f4	b0 0b		bcs $2101			bcs 	_TTPOne 					; these speed things up a bit.
.20f6	20 89 1e	jsr $1e89			jsr 	TOKWriteElement 			; this is what we will search for.
.20f9	20 69 1f	jsr $1f69			jsr 	TOKFindToken
.20fc	b0 0a		bcs $2108			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.20fe	ce 17 05	dec $0517			dec 	TOKElement 					; make it a single character
.2101					_TTPOne:
.2101	20 69 1f	jsr $1f69			jsr 	TOKFindToken 				; look for one character punctuation
.2104	b0 07		bcs $210d			bcs 	_TTPOutputExit 				; we found it
.2106	38		sec				sec 								; not recognised.
.2107	60		rts				rts
.2108					_TTPConsumeExit:
.2108	48		pha				pha
.2109	20 65 1f	jsr $1f65			jsr 	TOKGetNext 					; get the 2nd char out.
.210c	68		pla				pla
.210d					_TTPOutputExit:
.210d	20 55 1f	jsr $1f55			jsr  	TOKWriteA 					; write token out
.2110	18		clc				clc
.2111	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2112					TOKTokeniseString:
.2112	20 65 1f	jsr $1f65			jsr 	TOKGetNext 					; consume the "
.2115	20 85 1e	jsr $1e85			jsr 	TOKResetElement 			; start getting the string
.2118					_TOKTSLoop:
.2118	20 61 1f	jsr $1f61			jsr 	TOKGet 						; check EOL
.211b	c9 00		cmp #$00			cmp 	#0
.211d	f0 0c		beq $212b			beq 	_TOKTSExit
.211f	20 65 1f	jsr $1f65			jsr 	TOKGetNext 					; get and consume
.2122	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2124	f0 05		beq $212b			beq 	_TOKTSExit
.2126	20 89 1e	jsr $1e89			jsr 	TOKWriteElement
.2129	80 ed		bra $2118			bra 	_TOKTSLoop
.212b					_TOKTSExit:
.212b	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.212d	20 55 1f	jsr $1f55			jsr 	TOKWriteA
.2130	20 ca 1e	jsr $1eca			jsr 	TOKOutputElementBuffer
.2133	18		clc				clc
.2134	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2135					TOKToUpper:
.2135	c9 61		cmp #$61			cmp 	#"a"
.2137	90 06		bcc $213f			bcc 	_TTUNotLower
.2139	c9 7b		cmp #$7b			cmp 	#"z"+1
.213b	b0 02		bcs $213f			bcs 	_TTUNotLower
.213d	49 20		eor #$20			eor 	#$20
.213f					_TTUNotLower:
.213f	60		rts				rts
.2140					TOKToLower:
.2140	c9 41		cmp #$41			cmp 	#"A"
.2142	90 06		bcc $214a			bcc 	_TTUNotUpper
.2144	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2146	b0 02		bcs $214a			bcs 	_TTUNotUpper
.2148	49 20		eor #$20			eor 	#$20
.214a					_TTUNotUpper:
.214a	60		rts				rts
.214b					TOKIsDigit:
.214b	c9 30		cmp #$30			cmp 	#"0"
.214d	90 06		bcc $2155			bcc 	TOKFail
.214f	c9 3a		cmp #$3a			cmp 	#"9"+1
.2151	b0 02		bcs $2155			bcs 	TOKFail
.2153					TOKSucceed:
.2153	38		sec				sec
.2154	60		rts				rts
.2155					TOKFail:
.2155	18		clc				clc
.2156	60		rts				rts
.2157					TOKIsIdentifierElement:
.2157	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.2159	f0 f8		beq $2153			beq 	TOKSucceed
.215b	c9 5f		cmp #$5f			cmp 	#"_"
.215d	f0 f4		beq $2153			beq 	TOKSucceed 					; else fall through to alphanumeric
.215f					TOKIsAlphaNumeric:
.215f	20 68 21	jsr $2168			jsr 	TOKIsAlpha
.2162	b0 ef		bcs $2153			bcs 	TOKSucceed
.2164	20 4b 21	jsr $214b			jsr 	TOKIsDigit
.2167	60		rts				rts
.2168					TOKIsAlpha:
.2168	20 35 21	jsr $2135			jsr 	TOKToUpper
.216b	c9 41		cmp #$41			cmp 	#"A"
.216d	90 e6		bcc $2155			bcc 	TOKFail
.216f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2171	b0 e2		bcs $2155			bcs 	TOKFail
.2173	80 de		bra $2153			bra 	TOKSucceed
.2175					TOKIsHexadecimal:
.2175	20 4b 21	jsr $214b			jsr		TOKIsDigit
.2178	b0 d9		bcs $2153			bcs 	TOKSucceed
.217a	20 68 21	jsr $2168			jsr 	TOKIsAlpha
.217d	90 d6		bcc $2155			bcc 	TOKFail
.217f	c9 47		cmp #$47			cmp 	#"F"+1
.2181	b0 d2		bcs $2155			bcs 	TOKFail
.2183	80 ce		bra $2153			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2185					Command_CALL:
.2185	a9 42		lda #$42			lda 	#STK_CALL
.2187	20 20 26	jsr $2620			jsr 	StackOpen
.218a	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.218c	29 c0		and #$c0			and 	#$C0
.218e	c9 40		cmp #$40			cmp 	#$40
.2190	d0 29		bne $21bb			bne 	_CCSyntax
.2192	20 f0 28	jsr $28f0			jsr 	VARGetInfo 					; get the information
.2195	20 07 26	jsr $2607			jsr 	ERRCheckRParen 				; check right bracket follows.
.2198	20 a2 28	jsr $28a2			jsr 	VARFind 					; exists ?
.219b	90 21		bcc $21be			bcc 	_CCUnknown
.219d	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.219f	85 22		sta $22				sta 	zTemp0
.21a1	20 54 26	jsr $2654			jsr 	STKSaveCodePosition 		; save return address on stack.
.21a4	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.21a6	b1 22		lda ($22),y			lda 	(zTemp0),y
.21a8	c9 ff		cmp #$ff			cmp 	#$FF
.21aa	d0 12		bne $21be			bne 	_CCUnknown
.21ac	88		dey				dey 								; get Y offset to stack
.21ad	b1 22		lda ($22),y			lda 	(zTemp0),y
.21af	48		pha				pha
.21b0	88		dey				dey 								; get address
.21b1	b1 22		lda ($22),y			lda 	(zTemp0),y
.21b3	85 19		sta $19				sta 	codePtr+1
.21b5	b2 22		lda ($22)			lda 	(zTemp0)
.21b7	85 18		sta $18				sta 	codePtr
.21b9	7a		ply				ply 								; restore Y
.21ba	60		rts				rts
.21bb					_CCSyntax:
.21bb	4c 6a 24	jmp $246a		jmp	ErrorV_syntax
.21be					_CCUnknown:
.21be	4c df 25	jmp $25df		jmp	ErrorV_unknown
.21c1					Command_ENDPROC:
.21c1	a9 42		lda #$42			lda 	#STK_CALL
.21c3	20 4c 26	jsr $264c			jsr 	StackCheckFrame
.21c6	20 66 26	jsr $2666			jsr 	STKLoadCodePosition 		; return
.21c9	20 3e 26	jsr $263e			jsr 	StackClose
.21cc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.21cd					Command_DO:
.21cd	a9 22		lda #$22			lda 	#STK_DO
.21cf	20 20 26	jsr $2620			jsr 	StackOpen
.21d2	20 54 26	jsr $2654			jsr 	STKSaveCodePosition 		; save loop position
.21d5	60		rts				rts
.21d6					Command_EXIT:
.21d6	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.21d8	20 4c 26	jsr $264c			jsr 	StackCheckFrame
.21db	20 3e 26	jsr $263e			jsr 	StackClose 					; close it
.21de	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.21e0	aa		tax				tax
.21e1	20 7a 23	jsr $237a			jsr 	ScanForward
.21e4	60		rts				rts
.21e5					Command_LOOP:
.21e5	a9 22		lda #$22			lda 	#STK_DO
.21e7	20 4c 26	jsr $264c			jsr 	StackCheckFrame
.21ea	20 66 26	jsr $2666			jsr 	STKLoadCodePosition 		; loop back
.21ed	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.21ee					Command_FOR:
.21ee	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.21f0	20 20 26	jsr $2620			jsr 	StackOpen
.21f3	20 88 12	jsr $1288			jsr 	CommandLET 					; do "I = 1" bit
.21f6	5a		phy				phy 								; save variable address to +4,+5
.21f7	a0 04		ldy #$04			ldy 	#4
.21f9	a5 22		lda $22				lda 	zTemp0
.21fb	91 2a		sta ($2a),y			sta 	(basicStack),y
.21fd	c8		iny				iny
.21fe	a5 23		lda $23				lda 	zTemp0+1
.2200	91 2a		sta ($2a),y			sta 	(basicStack),y
.2202	7a		ply				ply
.2203	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2205	20 17 26	jsr $2617			jsr 	ERRCheckA
.2208	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.220b	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.220d	a2 08		ldx #$08			ldx 	#IFR0
.220f	20 64 22	jsr $2264			jsr 	CFSaveR0X
.2212	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2214	c9 91		cmp #$91			cmp 	#PR_STEP
.2216	d0 06		bne $221e			bne 	_CFStep1
.2218	c8		iny				iny 								; consume step
.2219	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; evaluate STEP
.221c	80 24		bra $2242			bra 	_CFWriteStep
.221e					_CFStep1:
.221e	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2220	a9 01		lda #$01			lda 	#1
.2222	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.2225	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2226	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2228	b1 2a		lda ($2a),y			lda 	(basicStack),y
.222a	85 22		sta $22				sta 	zTemp0
.222c	c8		iny				iny
.222d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.222f	85 23		sta $23				sta 	zTemp0+1
.2231	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2233	b1 22		lda ($22),y			lda 	(zTemp0),y
.2235	d0 0a		bne $2241			bne 	_CFNotOptimised
.2237	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2239	b1 2a		lda ($2a),y			lda 	(basicStack),y
.223b	d0 04		bne $2241			bne 	_CFNotOptimised
.223d	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.223f	85 0b		sta $0b				sta 	IFR0+IExp
.2241					_CFNotOptimised:
.2241	7a		ply				ply
.2242					_CFWriteStep:
.2242	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2244	a9 06		lda #$06			lda 	#6
.2246	20 64 22	jsr $2264			jsr 	CFSaveR0X
.2249	20 54 26	jsr $2654			jsr 	STKSaveCodePosition 		; save loop position
.224c	60		rts				rts
.224d					CFLoadR0X:
.224d	5a		phy				phy
.224e	a8		tay				tay
.224f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2251	95 00		sta $00,x			sta 	IM0,x
.2253	c8		iny				iny
.2254	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2256	95 01		sta $01,x			sta 	IM1,x
.2258	c8		iny				iny
.2259	b1 2a		lda ($2a),y			lda 	(basicStack),y
.225b	95 02		sta $02,x			sta 	IM2,x
.225d	c8		iny				iny
.225e	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2260	95 03		sta $03,x			sta 	IExp,x
.2262	7a		ply				ply
.2263	60		rts				rts
.2264					CFSaveR0X:
.2264	5a		phy				phy
.2265	a8		tay				tay
.2266	b5 00		lda $00,x			lda 	IM0,x
.2268	91 2a		sta ($2a),y			sta 	(basicStack),y
.226a	c8		iny				iny
.226b	b5 01		lda $01,x			lda 	IM1,x
.226d	91 2a		sta ($2a),y			sta 	(basicStack),y
.226f	c8		iny				iny
.2270	b5 02		lda $02,x			lda 	IM2,x
.2272	91 2a		sta ($2a),y			sta 	(basicStack),y
.2274	c8		iny				iny
.2275	b5 03		lda $03,x			lda 	IExp,x
.2277	91 2a		sta ($2a),y			sta 	(basicStack),y
.2279	7a		ply				ply
.227a	60		rts				rts
.227b					Command_NEXT:
.227b	a9 37		lda #$37			lda 	#STK_FOR
.227d	20 4c 26	jsr $264c			jsr 	StackCheckFrame
.2280	5a		phy				phy 								; check optimised loop
.2281	a0 09		ldy #$09			ldy 	#9
.2283	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2285	7a		ply				ply
.2286	0a		asl a				asl 	a
.2287	b0 35		bcs $22be			bcs 	_CNOptimised
.2289	20 f5 22	jsr $22f5			jsr 	_CNLoadValue 				; load index value to R0.
.228c	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.228e	a9 06		lda #$06			lda 	#6
.2290	20 4d 22	jsr $224d			jsr 	CFLoadR0X
.2293	20 a5 29	jsr $29a5			jsr 	IFloatAdd 					; add them together and write back.
.2296	20 18 23	jsr $2318			jsr 	_CNSaveValue
.2299	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.229b	a2 0c		ldx #$0c			ldx 	#IFR1
.229d	20 4d 22	jsr $224d			jsr 	CFLoadR0X
.22a0	20 7d 2c	jsr $2c7d			jsr 	IFloatCompare 				; compare terminal vs current
.22a3	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.22a5	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero
.22a8	f0 10		beq $22ba			beq 	_CNLoopBack
.22aa	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.22ac	5a		phy				phy
.22ad	a0 09		ldy #$09			ldy 	#6+IExp
.22af	51 2a		eor ($2a),y			eor 	(basicStack),y
.22b1	7a		ply				ply
.22b2	29 40		and #$40			and 	#IFSign
.22b4	f0 04		beq $22ba			beq 	_CNLoopBack
.22b6					_CNExitLoop:
.22b6	20 3e 26	jsr $263e			jsr 	StackClose		 			; return
.22b9	60		rts				rts
.22ba					_CNLoopBack:
.22ba	20 66 26	jsr $2666			jsr 	STKLoadCodePosition 		; loop back
.22bd	60		rts				rts
.22be					_CNOptimised:
.22be	5a		phy				phy
.22bf	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.22c1	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22c3	85 26		sta $26				sta 	zTemp2
.22c5	c8		iny				iny
.22c6	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22c8	85 27		sta $27				sta 	zTemp2+1
.22ca	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.22cc					_CNIncrement:
.22cc	c8		iny				iny
.22cd	b1 26		lda ($26),y			lda 	(zTemp2),y
.22cf	1a		inc a				inc 	a
.22d0	91 26		sta ($26),y			sta 	(zTemp2),y
.22d2	f0 f8		beq $22cc			beq 	_CNIncrement
.22d4	18		clc				clc 								; point zTemp0 to terminal value
.22d5	a5 2a		lda $2a				lda 	basicStack
.22d7	69 0a		adc #$0a			adc 	#10
.22d9	85 22		sta $22				sta 	zTemp0
.22db	a5 2b		lda $2b				lda 	basicStack+1
.22dd	69 00		adc #$00			adc 	#0
.22df	85 23		sta $23				sta 	zTemp0+1
.22e1	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.22e3	b2 26		lda ($26)			lda 	(zTemp2)
.22e5	d2 22		cmp ($22)			cmp 	(zTemp0)
.22e7	b1 26		lda ($26),y			lda 	(zTemp2),y
.22e9	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.22eb	c8		iny				iny
.22ec	b1 26		lda ($26),y			lda 	(zTemp2),y
.22ee	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.22f0	7a		ply				ply
.22f1	b0 c3		bcs $22b6			bcs 	_CNExitLoop
.22f3	80 c5		bra $22ba			bra 	_CNLoopBack
.22f5					_CNLoadValue:
.22f5	5a		phy				phy
.22f6	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.22f8	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22fa	85 26		sta $26				sta 	zTemp2
.22fc	c8		iny				iny
.22fd	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22ff	85 27		sta $27				sta 	zTemp2+1
.2301	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2303	b1 26		lda ($26),y			lda 	(zTemp2),y
.2305	85 08		sta $08				sta 	IFR0+IM0
.2307	c8		iny				iny
.2308	b1 26		lda ($26),y			lda 	(zTemp2),y
.230a	85 09		sta $09				sta 	IFR0+IM1
.230c	c8		iny				iny
.230d	b1 26		lda ($26),y			lda 	(zTemp2),y
.230f	85 0a		sta $0a				sta 	IFR0+IM2
.2311	c8		iny				iny
.2312	b1 26		lda ($26),y			lda 	(zTemp2),y
.2314	85 0b		sta $0b				sta 	IFR0+IExp
.2316	7a		ply				ply
.2317	60		rts				rts
.2318					_CNSaveValue:
.2318	5a		phy				phy
.2319	a0 00		ldy #$00			ldy 	#0
.231b	a5 08		lda $08				lda 	IFR0+IM0
.231d	91 26		sta ($26),y			sta 	(zTemp2),y
.231f	c8		iny				iny
.2320	a5 09		lda $09				lda 	IFR0+IM1
.2322	91 26		sta ($26),y			sta 	(zTemp2),y
.2324	c8		iny				iny
.2325	a5 0a		lda $0a				lda 	IFR0+IM2
.2327	91 26		sta ($26),y			sta 	(zTemp2),y
.2329	c8		iny				iny
.232a	a5 0b		lda $0b				lda 	IFR0+IExp
.232c	91 26		sta ($26),y			sta 	(zTemp2),y
.232e	7a		ply				ply
.232f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2330					IfCommand:
.2330	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; Get the if test.
.2333	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2335	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2337	d0 0c		bne $2345			bne 	_IfStructured 				; we still support it.
.2339	c8		iny				iny 								; consume THEN
.233a	a2 08		ldx #$08			ldx 	#IFR0
.233c	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero 			; is it zero
.233f	f0 01		beq $2342			beq 	_IfFail 					; if fail, go to next line
.2341	60		rts				rts 								; if THEN just continue
.2342					_IfFail:
.2342	4c f4 13	jmp $13f4			jmp 	RUNEndOfLine
.2345					_IfStructured:
.2345	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero 			; is it zero
.2348	d0 07		bne $2351			bne 	_IfExit 					; if not, then continue normally.
.234a	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.234c	a2 85		ldx #$85			ldx 	#PR_ENDIF
.234e	20 7a 23	jsr $237a			jsr 	ScanForward 				; and run from there
.2351					_IfExit:
.2351	60		rts				rts
.2352					ElseCode:
.2352	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2354	aa		tax				tax 								; so just go to the structure exit
.2355	20 7a 23	jsr $237a			jsr 	ScanForward
.2358	60		rts				rts
.2359					EndIf:
.2359	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.235a					Command_REPEAT:
.235a	a9 02		lda #$02			lda 	#STK_REPEAT
.235c	20 20 26	jsr $2620			jsr 	StackOpen
.235f	20 54 26	jsr $2654			jsr 	STKSaveCodePosition 		; save loop position
.2362	60		rts				rts
.2363					Command_UNTIL:
.2363	a9 02		lda #$02			lda 	#STK_REPEAT
.2365	20 4c 26	jsr $264c			jsr 	StackCheckFrame
.2368	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; work out the test
.236b	a2 08		ldx #$08			ldx 	#IFR0
.236d	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero 			; check if zero
.2370	f0 04		beq $2376			beq 	_CULoopBack 				; if so keep looping
.2372	20 3e 26	jsr $263e			jsr 	StackClose		 			; return
.2375	60		rts				rts
.2376					_CULoopBack:
.2376	20 66 26	jsr $2666			jsr 	STKLoadCodePosition 		; loop back
.2379	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.237a					ScanForward:
.237a	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.237c	86 23		stx $23				stx 	zTemp0+1
.237e	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.2380					_ScanForwardLoop:
.2380	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2382	d0 0a		bne $238e			bne 	_ScanNoCheck
.2384	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2386	c5 22		cmp $22				cmp 	zTemp0
.2388	f0 49		beq $23d3			beq 	_ScanExit
.238a	c5 23		cmp $23				cmp 	zTemp0+1
.238c	f0 45		beq $23d3			beq 	_ScanExit
.238e					_ScanNoCheck:
.238e	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2390	c8		iny				iny
.2391	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2393	f0 37		beq $23cc			beq		_ScanDataItem
.2395	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2397	f0 33		beq $23cc			beq 	_ScanDataItem
.2399	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.239b	f0 1b		beq $23b8			beq 	_ScanNextLine
.239d	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.239f	d0 01		bne $23a2			bne 	_ScanNoShift
.23a1	c8		iny				iny
.23a2					_ScanNoShift:
.23a2	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.23a4	b0 da		bcs $2380			bcs 	_ScanForwardLoop
.23a6	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.23a8	90 d6		bcc $2380			bcc 	_ScanForwardLoop
.23aa	aa		tax				tax 								; access the table to get the adjustment.
.23ab	18		clc				clc
.23ac	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.23ae	7d 41 19	adc $1941,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.23b1	85 24		sta $24				sta 	zTemp1
.23b3	10 cb		bpl $2380			bpl		_ScanForwardLoop 			; error if -ve ?
.23b5	4c f6 24	jmp $24f6		jmp	ErrorV_structure
.23b8					_ScanNextLine:
.23b8	18		clc				clc	 								; forward to next line.
.23b9	b2 18		lda ($18)			lda 	(codePtr)
.23bb	65 18		adc $18				adc 	codePtr
.23bd	85 18		sta $18				sta 	codePtr
.23bf	90 02		bcc $23c3			bcc 	_ScanNoCarry
.23c1	e6 19		inc $19				inc 	codePtr+1
.23c3					_ScanNoCarry:
.23c3	a0 03		ldy #$03			ldy 	#3
.23c5	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.23c7	d0 b7		bne $2380			bne 	_ScanForwardLoop
.23c9	4c f6 24	jmp $24f6		jmp	ErrorV_structure
.23cc					_ScanDataItem:
.23cc	98		tya				tya
.23cd	38		sec				sec
.23ce	71 18		adc ($18),y			adc 	(codePtr),y
.23d0	a8		tay				tay
.23d1	80 ad		bra $2380			bra 	_ScanForwardLoop
.23d3					_ScanExit:
.23d3	c8		iny				iny 								; consume final token.
.23d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.23d5					ScanProcedures:
.23d5	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.23d7	48		pha				pha
.23d8	a5 19		lda $19				lda 	codePtr+1
.23da	48		pha				pha
.23db	5a		phy				phy
.23dc	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.23df	85 19		sta $19				sta 	codePtr+1
.23e1	64 18		stz $18				stz 	codePtr
.23e3					_SPLoop:
.23e3	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.23e5	f0 18		beq $23ff			beq 	_SPExit
.23e7	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.23e9	b1 18		lda ($18),y			lda 	(codePtr),y
.23eb	c9 88		cmp #$88			cmp 	#PR_PROC
.23ed	d0 03		bne $23f2			bne 	_SPNext
.23ef	20 07 24	jsr $2407			jsr 	_SPSetupRecord
.23f2					_SPNext:
.23f2	18		clc				clc 								; forward to next
.23f3	b2 18		lda ($18)			lda 	(codePtr)
.23f5	65 18		adc $18				adc 	codePtr
.23f7	85 18		sta $18				sta 	codePtr
.23f9	90 e8		bcc $23e3			bcc 	_SPLoop
.23fb	e6 19		inc $19				inc 	codePtr+1
.23fd	80 e4		bra $23e3			bra 	_SPLoop
.23ff					_SPExit:
.23ff	7a		ply				ply
.2400	68		pla				pla
.2401	85 19		sta $19				sta 	codePtr+1
.2403	68		pla				pla
.2404	85 18		sta $18				sta 	codePtr
.2406	60		rts				rts
.2407					_SPSetupRecord:
.2407	c8		iny				iny 								; check identifier follows
.2408	b1 18		lda ($18),y			lda 	(codePtr),y
.240a	29 c0		and #$c0			and 	#$C0
.240c	c9 40		cmp #$40			cmp 	#$40
.240e	d0 27		bne $2437			bne 	_SPSyntax
.2410	20 f0 28	jsr $28f0			jsr 	VARGetInfo 					; get the information
.2413	20 07 26	jsr $2607			jsr 	ERRCheckRParen 				; check right bracket follows.
.2416	20 a2 28	jsr $28a2			jsr 	VARFind 					; already exists ?
.2419	b0 1f		bcs $243a			bcs 	_SPUsed 					; error !
.241b	20 4e 28	jsr $284e			jsr 	VARCreate 					; create, XA points to the data.
.241e	85 22		sta $22				sta 	zTemp0
.2420	86 23		stx $23				stx 	zTemp0+1
.2422	5a		phy				phy 								; save Y pos on stack
.2423	a0 01		ldy #$01			ldy 	#1
.2425	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2427	92 22		sta ($22)			sta 	(zTemp0)
.2429	a5 19		lda $19				lda 	codePtr+1
.242b	91 22		sta ($22),y			sta 	(zTemp0),y
.242d	c8		iny				iny
.242e	68		pla				pla
.242f	91 22		sta ($22),y			sta 	(zTemp0),y
.2431	c8		iny				iny
.2432	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2434	91 22		sta ($22),y			sta 	(zTemp0),y
.2436	60		rts				rts
.2437					_SPSyntax:
.2437	4c 6a 24	jmp $246a		jmp	ErrorV_syntax
.243a					_SPUsed:
.243a	4c c1 25	jmp $25c1		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.243d					Command_WHILE:
.243d	5a		phy				phy 								; save position of the test
.243e	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; work out the while test.
.2441	a2 08		ldx #$08			ldx 	#IFR0
.2443	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero 			; check if zero
.2446	f0 0e		beq $2456			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2448	98		tya				tya 								; position *after* test.
.2449	7a		ply				ply 								; restore position before test, at WHILE
.244a	88		dey				dey 								; so we execute the WHILE command again.
.244b	48		pha				pha 								; push after test on the stack
.244c	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.244e	20 20 26	jsr $2620			jsr 	StackOpen
.2451	20 54 26	jsr $2654			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2454	7a		ply				ply 								; restore the position *after* the test
.2455	60		rts				rts
.2456					_WHExitLoop:
.2456	68		pla				pla 								; throw post loop position
.2457	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2459	aa		tax				tax
.245a	20 7a 23	jsr $237a			jsr 	ScanForward
.245d	60		rts				rts
.245e					Command_WEND:
.245e	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2460	20 4c 26	jsr $264c			jsr 	StackCheckFrame
.2463	20 66 26	jsr $2666			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2466	20 3e 26	jsr $263e			jsr 	StackClose		 			; erase the frame
.2469	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.246a					ErrorV_syntax:
.246a	20 3f 27	jsr $273f		jsr	ErrorHandler
>246d	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2475	45 72 72 6f 72 00
.247b					ErrorV_range:
.247b	20 3f 27	jsr $273f		jsr	ErrorHandler
>247e	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2486	52 61 6e 67 65 00
.248c					ErrorV_value:
.248c	20 3f 27	jsr $273f		jsr	ErrorHandler
>248f	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2497	75 65 00
.249a					ErrorV_type:
.249a	20 3f 27	jsr $273f		jsr	ErrorHandler
>249d	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>24a5	73 6d 61 74 63 68 00
.24ac					ErrorV_unimplemented:
.24ac	20 3f 27	jsr $273f		jsr	ErrorHandler
>24af	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>24b7	6c 65 6d 65 6e 74 65 64 00
.24c0					ErrorV_assert:
.24c0	20 3f 27	jsr $273f		jsr	ErrorHandler
>24c3	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>24cb	46 61 69 6c 00
.24d0					ErrorV_internal:
.24d0	20 3f 27	jsr $273f		jsr	ErrorHandler
>24d3	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>24db	6c 20 45 72 72 6f 72 00
.24e3					ErrorV_divzero:
.24e3	20 3f 27	jsr $273f		jsr	ErrorHandler
>24e6	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>24ee	42 79 20 5a 65 72 6f 00
.24f6					ErrorV_structure:
.24f6	20 3f 27	jsr $273f		jsr	ErrorHandler
>24f9	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2501	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.250e					ErrorV_stop:
.250e	20 3f 27	jsr $273f		jsr	ErrorHandler
>2511	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2519	20 53 74 6f 70 70 65 64 00
.2522					ErrorV_data:
.2522	20 3f 27	jsr $273f		jsr	ErrorHandler
>2525	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>252d	44 61 74 61 00
.2532					ErrorV_redefine:
.2532	20 3f 27	jsr $273f		jsr	ErrorHandler
>2535	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>253d	65 64 65 66 69 6e 65 64 00
.2546					ErrorV_index:
.2546	20 3f 27	jsr $273f		jsr	ErrorHandler
>2549	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2551	61 79 20 49 6e 64 65 78 00
.255a					ErrorV_memory:
.255a	20 3f 27	jsr $273f		jsr	ErrorHandler
>255d	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2565	4d 65 6d 6f 72 79 00
.256c					ErrorV_uninitialised:
.256c	20 3f 27	jsr $273f		jsr	ErrorHandler
>256f	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2577	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2587					ErrorV_string:
.2587	20 3f 27	jsr $273f		jsr	ErrorHandler
>258a	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2592	69 6e 67 20 4c 65 6e 67 74 68 00
.259d					ErrorV_variable:
.259d	20 3f 27	jsr $273f		jsr	ErrorHandler
>25a0	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>25a8	65 20 4d 69 73 73 69 6e 67 00
.25b2					ErrorV_stack:
.25b2	20 3f 27	jsr $273f		jsr	ErrorHandler
>25b5	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>25bd	75 6c 6c 00
.25c1					ErrorV_dupproc:
.25c1	20 3f 27	jsr $273f		jsr	ErrorHandler
>25c4	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>25cc	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>25dc	65 64 00
.25df					ErrorV_unknown:
.25df	20 3f 27	jsr $273f		jsr	ErrorHandler
>25e2	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>25ea	20 50 72 6f 63 65 64 75 72 65 00
.25f5					ErrorV_break:
.25f5	20 3f 27	jsr $273f		jsr	ErrorHandler
>25f8	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.25ff					ERRCheckLParen:
.25ff	b1 18		lda ($18),y			lda 	(codePtr),y
.2601	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2603	d0 18		bne $261d			bne 	ERRSyntaxError
.2605	c8		iny				iny
.2606	60		rts				rts
.2607					ERRCheckRParen:
.2607	b1 18		lda ($18),y			lda 	(codePtr),y
.2609	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.260b	d0 10		bne $261d			bne 	ERRSyntaxError
.260d	c8		iny				iny
.260e	60		rts				rts
.260f					ERRCheckComma:
.260f	b1 18		lda ($18),y			lda 	(codePtr),y
.2611	c9 99		cmp #$99			cmp 	#PR_COMMA
.2613	d0 08		bne $261d			bne 	ERRSyntaxError
.2615	c8		iny				iny
.2616	60		rts				rts
.2617					ERRCheckA:
.2617	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2619	d0 02		bne $261d			bne 	ERRSyntaxError
.261b	c8		iny				iny
.261c	60		rts				rts
.261d					ERRSyntaxError:
.261d	4c 6a 24	jmp $246a		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2620					StackOpen:
.2620	48		pha				pha 								; save frame byte
.2621	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.2623	0a		asl a				asl 	a 							; claim twice this for storage
.2624	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2626	38		sec				sec 								; so basically subtracting from
.2627	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.2629	85 2a		sta $2a				sta 	basicStack
.262b	b0 0a		bcs $2637			bcs 	_SONoBorrow
>262d	db						.byte 	$DB
.262e	c6 2b		dec $2b				dec 	basicStack+1
.2630	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.2632	cd 1b 06	cmp $061b			cmp 	basicStackEnd
.2635	f0 04		beq $263b			beq 	_SOMemory
.2637					_SONoBorrow:
.2637	68		pla				pla 								; get marker back and write at TOS
.2638	92 2a		sta ($2a)			sta 	(basicStack)
.263a	60		rts				rts
.263b					_SOMemory:
.263b	4c b2 25	jmp $25b2		jmp	ErrorV_stack
.263e					StackClose:
.263e	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.2640	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2642	0a		asl a				asl 	a 							; claim twice this.
.2643	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.2645	85 2a		sta $2a				sta 	basicStack
.2647	90 02		bcc $264b			bcc 	_SCExit
.2649	e6 2b		inc $2b				inc 	basicStack+1
.264b					_SCExit:
.264b	60		rts				rts
.264c					StackCheckFrame:
.264c	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.264e	d0 01		bne $2651			bne 	_SCFError 					; different, we have structures mixed up
.2650	60		rts				rts
.2651					_SCFError:
.2651	4c f6 24	jmp $24f6		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2654					STKSaveCodePosition:
.2654	5a		phy				phy
.2655	98		tya				tya 								; save Y at offset 1.
.2656	a0 01		ldy #$01			ldy 	#1
.2658	91 2a		sta ($2a),y			sta 	(basicStack),y
.265a	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.265c	c8		iny				iny
.265d	91 2a		sta ($2a),y			sta 	(basicStack),y
.265f	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2661	c8		iny				iny
.2662	91 2a		sta ($2a),y			sta 	(basicStack),y
.2664	7a		ply				ply
.2665	60		rts				rts
.2666					STKLoadCodePosition:
.2666	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2668	b1 2a		lda ($2a),y			lda 	(basicStack),y
.266a	85 19		sta $19				sta 	codePtr+1
.266c	88		dey				dey
.266d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.266f	85 18		sta $18				sta 	codePtr
.2671	88		dey				dey
.2672	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.2674	a8		tay				tay
.2675	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2676					StackReset:
.2676	48		pha				pha 								; save top of memory
.2677	3a		dec a				dec 	a  							; end of stack = previous byte
.2678	85 2b		sta $2b				sta 	basicStack+1
.267a	a9 ff		lda #$ff			lda 	#$FF
.267c	85 2a		sta $2a				sta 	basicStack
.267e	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2680	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2682	68		pla				pla 								; allocate pages for stack.
.2683	38		sec				sec
.2684	e9 02		sbc #$02			sbc 	#STACKPAGES
.2686	8d 1b 06	sta $061b			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2689	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.061b					basicStackEnd:
>061b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.268a					StringConcrete:
.268a	5a		phy				phy 								; save position on stack
.268b	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.268d	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.268f	b0 41		bcs $26d2			bcs 	_SALengthError
.2691	18		clc				clc 								; length of the new string
.2692	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2694	90 02		bcc $2698			bcc 	_SAHaveLength
.2696	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2698					_SAHaveLength:
.2698	48		pha				pha 								; save length to be allocated for concreting.
.2699	38		sec				sec
.269a	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.269c	6d 1d 06	adc $061d			adc 	stringMemory
.269f	8d 1d 06	sta $061d			sta 	stringMemory
.26a2	85 26		sta $26				sta 	zTemp2 						; update storage address
.26a4	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.26a6	6d 1e 06	adc $061e			adc 	stringMemory+1
.26a9	8d 1e 06	sta $061e			sta 	stringMemory+1
.26ac	85 27		sta $27				sta 	zTemp2+1
.26ae	68		pla				pla 								; save length allocated in +0
.26af	92 26		sta ($26)			sta 	(zTemp2)
.26b1	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.26b3	a0 01		ldy #$01			ldy 	#1
.26b5	91 26		sta ($26),y			sta 	(zTemp2),y
.26b7					_SACopyNewString:
.26b7	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.26b9	a0 02		ldy #$02			ldy 	#2
.26bb	91 26		sta ($26),y			sta 	(zTemp2),y
.26bd	aa		tax				tax 								; bytes to copy
.26be	f0 0c		beq $26cc			beq 	_SACopyExit
.26c0	a0 01		ldy #$01			ldy 	#1 							; first character from here
.26c2					_SACopyNSLoop:
.26c2	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.26c4	c8		iny				iny 								; write two on in string storage
.26c5	c8		iny				iny
.26c6	91 26		sta ($26),y			sta 	(zTemp2),y
.26c8	88		dey				dey
.26c9	ca		dex				dex									; until copied all the string lengths.
.26ca	d0 f6		bne $26c2			bne 	_SACopyNSLoop
.26cc					_SACopyExit:
.26cc	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.26ce	a5 26		lda $26				lda 	zTemp2
.26d0	7a		ply				ply
.26d1	60		rts				rts
.26d2					_SALengthError:
.26d2	4c 87 25	jmp $2587		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.26d5					StringSystemInitialise:
.26d5	3a		dec a				dec 	a 							; make last byte of previous page.
.26d6	8d 1e 06	sta $061e			sta 	stringMemory+1
.26d9	85 23		sta $23				sta 	zTemp0+1
.26db	a9 ff		lda #$ff			lda 	#$FF
.26dd	8d 1d 06	sta $061d			sta 	stringMemory
.26e0	85 22		sta $22				sta 	zTemp0
.26e2	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.26e4	92 22		sta ($22)			sta 	(zTemp0)
.26e6	60		rts				rts
.26e7					StringSpaceInitialise:
.26e7	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.26e9	8d 1c 06	sta $061c			sta 	stringInitialised
.26ec	ad 1d 06	lda $061d			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.26ef	8d 1f 06	sta $061f			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.26f2	ad 1e 06	lda $061e			lda 	stringMemory+1
.26f5	3a		dec a				dec 	a
.26f6	8d 20 06	sta $0620			sta 	stringTempPointer+1
.26f9	20 7f 10	jsr $107f			jsr 	ClearCheckMemory
.26fc	60		rts				rts
.26fd					StringTempAllocate:
.26fd	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.26ff	b0 2e		bcs $272f			bcs 	_STALength
.2701	2c 1c 06	bit $061c			bit 	stringInitialised 			; already initialised
.2704	30 05		bmi $270b			bmi 	_STAAllocate
.2706	48		pha				pha 								; save value to subtract.
.2707	20 e7 26	jsr $26e7			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.270a	68		pla				pla 								; restore it
.270b					_STAAllocate:
.270b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.270d	18		clc				clc  								; deliberate allows one more
.270e	6d 1f 06	adc $061f			adc 	stringTempPointer 			; subtract from temp pointer
.2711	8d 1f 06	sta $061f			sta 	stringTempPointer
.2714	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2716	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.2718	ad 20 06	lda $0620			lda 	stringTempPointer+1
.271b	69 ff		adc #$ff			adc 	#$FF
.271d	8d 20 06	sta $0620			sta 	stringTempPointer+1
.2720	85 2d		sta $2d				sta 	zsTemp+1
.2722	85 09		sta $09				sta 	IFR0+IM1
.2724	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2726	a9 80		lda #$80			lda 	#$80
.2728	85 0b		sta $0b				sta 	IFR0+IExp
.272a	a9 00		lda #$00			lda 	#0 							; clear the target string
.272c	92 2c		sta ($2c)			sta 	(zsTemp)
.272e	60		rts				rts
.272f					_STALength:
.272f	4c 87 25	jmp $2587		jmp	ErrorV_string
.2732					StringTempWrite:
.2732	5a		phy				phy
.2733	48		pha				pha
.2734	b2 2c		lda ($2c)			lda 	(zsTemp)
.2736	1a		inc a				inc 	a
.2737	92 2c		sta ($2c)			sta 	(zsTemp)
.2739	a8		tay				tay
.273a	68		pla				pla
.273b	91 2c		sta ($2c),y			sta 	(zsTemp),y
.273d	7a		ply				ply
.273e	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.061c					stringInitialised:
>061c							.fill 	1
.061d					stringMemory:
>061d							.fill 	2
.061f					stringTempPointer:
>061f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.273f					ErrorHandler:
.273f	fa		plx				plx 								; get address of msg
.2740	7a		ply				ply
.2741	e8		inx				inx 								; bump past RTS
.2742	d0 01		bne $2745			bne 	_EHNoInc
.2744	c8		iny				iny
.2745					_EHNoInc:
.2745	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.2748	ad 21 06	lda $0621			lda 	ERRLine 					; direct command ?
.274b	0d 22 06	ora $0622			ora 	ERRLine+1
.274e	f0 10		beq $2760			beq 	_EHNoNumber
.2750	a2 63		ldx #$63			ldx 	#_EHAtMsg & $FF
.2752	a0 27		ldy #$27			ldy 	#_EHAtMsg >> 8
.2754	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.2757	ad 21 06	lda $0621			lda 	ERRLine 					; line number -> XA
.275a	ae 22 06	ldx $0622			ldx 	ERRLine+1
.275d	20 68 27	jsr $2768			jsr 	WriteIntXA
.2760					_EHNoNumber:
.2760	4c 91 27	jmp $2791			jmp 	WarmStartNewLine
.2763					_EHAtMsg:
>2763	20 61 74 20 00					.text 	" at ",0
.2768					WriteIntXA:
.2768	da		phx				phx
.2769	48		pha				pha
.276a	a2 08		ldx #$08			ldx 	#IFR0
.276c	20 fe 2e	jsr $2efe			jsr 	IFloatPushRx
.276f	68		pla				pla
.2770	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.2773	68		pla				pla
.2774	85 09		sta $09				sta 	IFR0+IM1
.2776	a9 0a		lda #$0a			lda 	#10 						; decimal
.2778	20 50 2d	jsr $2d50			jsr 	IFloatIntegerToStringR0	 	; convert
.277b	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.277e	a2 08		ldx #$08			ldx 	#IFR0
.2780	20 1f 2f	jsr $2f1f			jsr 	IFloatPullRx
.2783	60		rts				rts
.2784					NotImplemented:
.2784	4c ac 24	jmp $24ac		jmp	ErrorV_unimplemented
.0621					ERRLine:
>0621							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2787					WarmStart:
.2787	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2789	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.278c	a9 6b		lda #$6b			lda 	#"k"
.278e	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2791					WarmStartNewLine:
.2791	a9 0d		lda #$0d			lda 	#13
.2793	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2796					WarmStartNoPrompt:
.2796	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2798	9a		txs				txs
.2799	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.279c	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.279e	f0 f1		beq $2791			beq 	WarmStartNewLine
.27a0	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.27a2	d0 f2		bne $2796			bne 	WarmStartNoPrompt
.27a4	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.27a7	e8		inx				inx 								; skip length byte to make it ASCIIZ
.27a8	d0 01		bne $27ab			bne 	_WSSkip
.27aa	c8		iny				iny
.27ab					_WSSkip:
.27ab	86 26		stx $26				stx 	zTemp2 						; save address
.27ad	84 27		sty $27				sty 	zTemp2+1
.27af	a2 d9		ldx #$d9			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.27b1	a0 27		ldy #$27			ldy 	#TOKGetCharacter >> 8
.27b3	38		sec				sec
.27b4	20 e0 1e	jsr $1ee0			jsr 	TOKTokenise
.27b7	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.27ba	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.27bd	d0 0b		bne $27ca			bne 	_WSLineEdit
.27bf	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.27c1	85 18		sta $18				sta 	codePtr
.27c3	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.27c5	85 19		sta $19				sta 	codePtr+1
.27c7	4c ff 13	jmp $13ff			jmp 	RUNNewLine
.27ca					_WSLineEdit:
.27ca	20 bb 1d	jsr $1dbb			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.27cd	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.27d0	c9 04		cmp #$04			cmp 	#4
.27d2	f0 03		beq $27d7			beq 	_WSNoInsert
.27d4	20 05 1e	jsr $1e05			jsr 	PGMInsertLine				; if not, maybe insert
.27d7					_WSNoInsert:
.27d7	80 bd		bra $2796			bra 	WarmStartNoPrompt
.27d9					TOKGetCharacter:
.27d9	b2 26		lda ($26)			lda 	(zTemp2)
.27db	90 06		bcc $27e3			bcc 	_GSNoIncrement
.27dd	e6 26		inc $26				inc 	zTemp2
.27df	d0 02		bne $27e3			bne 	_GSNoIncrement
.27e1	e6 27		inc $27				inc 	zTemp2+1
.27e3					_GSNoIncrement:
.27e3	c9 00		cmp #$00			cmp 	#0
.27e5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.27e6					VARArrayLookup:
.27e6	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.27e8	86 23		stx $23				stx 	zTemp0+1
.27ea	b2 22		lda ($22)			lda 	(zTemp0)
.27ec	48		pha				pha
.27ed	5a		phy				phy
.27ee	a0 01		ldy #$01			ldy 	#1
.27f0	b1 22		lda ($22),y			lda 	(zTemp0),y
.27f2	7a		ply				ply
.27f3	48		pha				pha
.27f4	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; R0 now contains the index
.27f7	68		pla				pla 								; array address to zTemp0
.27f8	85 23		sta $23				sta 	zTemp0+1
.27fa	68		pla				pla
.27fb	85 22		sta $22				sta 	zTemp0
.27fd	5a		phy				phy 								; save codePtr position.
.27fe	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2800	b1 22		lda ($22),y			lda 	(zTemp0),y
.2802	48		pha				pha 								; save bit 15 on stack.
.2803	29 7f		and #$7f			and 	#$7F
.2805	85 24		sta $24				sta 	zTemp1
.2807	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2809	d2 22		cmp ($22)			cmp 	(zTemp0)
.280b	a5 09		lda $09				lda 	IFR0+IM1
.280d	e5 24		sbc $24				sbc 	zTemp1
.280f	b0 3a		bcs $284b			bcs 	_VALIndex
.2811	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2813	c9 40		cmp #$40			cmp 	#$40
.2815	b0 34		bcs $284b			bcs 	_VALIndex
.2817	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2819	26 09		rol $09				rol 	IFR0+IM1
.281b	fa		plx				plx 								; get msb of size -> X
.281c	30 04		bmi $2822			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.281e	06 08		asl $08				asl 	IFR0+IM0
.2820	26 09		rol $09				rol 	IFR0+IM1
.2822					_VARNotX4:
.2822	18		clc				clc 								; add the two for the size bytes
.2823	a5 08		lda $08				lda 	IFR0+IM0
.2825	69 02		adc #$02			adc 	#2
.2827	85 08		sta $08				sta 	IFR0+IM0
.2829	90 02		bcc $282d			bcc 	_VARNoCarry1
.282b	e6 09		inc $09				inc 	IFR0+IM1
.282d					_VARNoCarry1:
.282d	18		clc				clc 								; calculate the element address and push to stack.
.282e	a5 08		lda $08				lda 	IFR0+IM0
.2830	65 22		adc $22				adc 	zTemp0
.2832	48		pha				pha
.2833	a5 09		lda $09				lda 	IFR0+IM1
.2835	65 23		adc $23				adc 	zTemp0+1
.2837	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2839	30 04		bmi $283f			bmi 	_VARHasSubLevel
.283b	aa		tax				tax 								; address in XA
.283c	68		pla				pla
.283d	7a		ply				ply 								; restore Y and exit
.283e	60		rts				rts
.283f					_VARHasSubLevel:
.283f	aa		tax				tax 								; get link address in XA
.2840	68		pla				pla
.2841	7a		ply				ply 								; restore code position.
.2842	48		pha				pha
.2843	20 0f 26	jsr $260f			jsr 	ERRCheckComma 				; comma required.
.2846	68		pla				pla
.2847	20 e6 27	jsr $27e6			jsr 	VARArrayLookup 				; call it recursively
.284a	60		rts				rts
.284b					_VALIndex:
.284b	4c 46 25	jmp $2546		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.284e					VARCreate:
.284e	5a		phy				phy
.284f	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2851	a2 00		ldx #$00			ldx 	#0
.2853	20 56 10	jsr $1056			jsr 	AllocateMemory
.2856	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.2858	86 25		stx $25				stx 	zTemp1+1
.285a	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.285c	ad 25 06	lda $0625			lda 	VARHash
.285f	91 24		sta ($24),y			sta 	(zTemp1),y
.2861	c8		iny				iny 								; put address of name into +3,+4
.2862	ad 23 06	lda $0623			lda 	VARNameAddress
.2865	91 24		sta ($24),y			sta 	(zTemp1),y
.2867	c8		iny				iny
.2868	ad 24 06	lda $0624			lda 	VARNameAddress+1
.286b	91 24		sta ($24),y			sta 	(zTemp1),y
.286d	ad 26 06	lda $0626			lda 	VARType
.2870	29 01		and #$01			and 	#1
.2872	f0 06		beq $287a			beq 	_CVNotString
.2874	a0 08		ldy #$08			ldy 	#5+3
.2876	a9 80		lda #$80			lda 	#$80
.2878	91 24		sta ($24),y			sta 	(zTemp1),y
.287a					_CVNotString:
.287a	ad 47 06	lda $0647			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.287d	85 22		sta $22				sta 	zTemp0
.287f	ad 48 06	lda $0648			lda 	VARHashEntry+1
.2882	85 23		sta $23				sta 	zTemp0+1
.2884	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2886	b2 22		lda ($22)			lda 	(zTemp0)
.2888	92 24		sta ($24)			sta 	(zTemp1)
.288a	b1 22		lda ($22),y			lda 	(zTemp0),y
.288c	91 24		sta ($24),y			sta 	(zTemp1),y
.288e	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2890	92 22		sta ($22)			sta 	(zTemp0)
.2892	a5 25		lda $25				lda 	zTemp1+1
.2894	91 22		sta ($22),y			sta 	(zTemp0),y
.2896	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2898	a6 25		ldx $25				ldx 	zTemp1+1
.289a	18		clc				clc 								; add 5 to point to the data.
.289b	69 05		adc #$05			adc 	#5
.289d	90 01		bcc $28a0			bcc 	_VCNoCarry
.289f	e8		inx				inx
.28a0					_VCNoCarry:
.28a0	7a		ply				ply
.28a1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.28a2					VARFind:
.28a2	5a		phy				phy
.28a3	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.28a5	b1 22		lda ($22),y			lda 	(zTemp0),y
.28a7	85 25		sta $25				sta 	zTemp1+1
.28a9	f0 1c		beq $28c7			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.28ab	b2 22		lda ($22)			lda 	(zTemp0)
.28ad	85 24		sta $24				sta 	zTemp1
.28af					_VFLoop:
.28af	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.28b1	b1 24		lda ($24),y			lda 	(zTemp1),y
.28b3	cd 25 06	cmp $0625			cmp 	VARHash
.28b6	f0 12		beq $28ca			beq 	_VFHashesMatch 				; if so, check the name.
.28b8					_VFNext:
.28b8	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.28ba	aa		tax				tax
.28bb	a0 01		ldy #$01			ldy 	#1
.28bd	b1 24		lda ($24),y			lda 	(zTemp1),y
.28bf	85 25		sta $25				sta 	zTemp1+1
.28c1	86 24		stx $24				stx 	zTemp1
.28c3	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.28c5	d0 e8		bne $28af			bne 	_VFLoop
.28c7					_VFExitFail:
.28c7	7a		ply				ply
.28c8	18		clc				clc
.28c9	60		rts				rts
.28ca					_VFHashesMatch:
.28ca	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.28cc	b1 24		lda ($24),y			lda 	(zTemp1),y
.28ce	85 26		sta $26				sta 	zTemp2
.28d0	c8		iny				iny
.28d1	b1 24		lda ($24),y			lda 	(zTemp1),y
.28d3	85 27		sta $27				sta 	zTemp2+1
.28d5	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.28d7					_VFNameCompLoop:
.28d7	c8		iny				iny 								; char at a time
.28d8	b9 27 06	lda $0627,y			lda 	VARBuffer,y
.28db	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.28dd	d0 d9		bne $28b8			bne 	_VFNext						; next entry if different.
.28df	c9 7c		cmp #$7c			cmp 	#$7C
.28e1	90 f4		bcc $28d7			bcc 	_VFNameCompLoop 			; until done the whole lot.
.28e3	18		clc				clc
.28e4	a5 24		lda $24				lda 	zTemp1
.28e6	a6 25		ldx $25				ldx 	zTemp1+1
.28e8	69 05		adc #$05			adc 	#5
.28ea	90 01		bcc $28ed			bcc 	_VFNNoCarry
.28ec	e8		inx				inx
.28ed					_VFNNoCarry:
.28ed	7a		ply				ply
.28ee	38		sec				sec
.28ef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.28f0					VARGetInfo:
.28f0	98		tya				tya 								; calculate the address of the identifier start.
.28f1	18		clc				clc
.28f2	65 18		adc $18				adc 	codePtr
.28f4	8d 23 06	sta $0623			sta 	VARNameAddress
.28f7	a5 19		lda $19				lda 	codePtr+1
.28f9	69 00		adc #$00			adc 	#0
.28fb	8d 24 06	sta $0624			sta 	VARNameAddress+1
.28fe	9c 25 06	stz $0625			stz 	VARHash
.2901	a2 00		ldx #$00			ldx 	#0
.2903					_VARCopyName:
.2903	18		clc				clc 								; update the sum hash.
.2904	ad 25 06	lda $0625			lda 	VARHash
.2907	71 18		adc ($18),y			adc 	(codePtr),y
.2909	8d 25 06	sta $0625			sta 	VARHash
.290c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.290e	c8		iny				iny
.290f	9d 27 06	sta $0627,x			sta 	VARBuffer,x
.2912	e8		inx				inx
.2913	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2915	90 ec		bcc $2903			bcc 	_VARCopyName
.2917	8d 26 06	sta $0626			sta 	VARType 					; save type byte
.291a	29 03		and #$03			and 	#3 							; type is 0-3
.291c	0a		asl a				asl 	a
.291d	0a		asl a				asl 	a
.291e	85 22		sta $22				sta 	zTemp0
.2920	ad 25 06	lda $0625			lda 	VARHash 					; force into range of hash entries per type.
.2923	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2925	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2927	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2928	69 49		adc #$49			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.292a	85 22		sta $22				sta 	zTemp0
.292c	8d 47 06	sta $0647			sta 	VARHashEntry
.292f	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2931	69 00		adc #$00			adc 	#0
.2933	85 23		sta $23				sta 	zTemp0+1
.2935	8d 48 06	sta $0648			sta 	VARHashEntry+1
.2938	60		rts				rts
.2939					VARClearHashTables:
.2939	a2 00		ldx #$00			ldx 	#0
.293b					_VCHRLoop:
.293b	a9 00		lda #$00			lda 	#0
.293d	9d 49 06	sta $0649,x			sta 	VARHashTables,x
.2940	e8		inx				inx
.2941	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2943	d0 f6		bne $293b			bne 	_VCHRLoop
.2945	60		rts				rts
.0623					VARNameAddress:
>0623							.fill 	2
.0625					VARHash:
>0625							.fill 	1
.0626					VARType:
>0626							.fill 	1
.0627					VARBuffer:
>0627							.fill 	32
.0647					VARHashEntry:
>0647							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0649					VARHashTables:
>0649							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2946					VARCheckSimple:
.2946	aa		tax				tax 								; save in X
.2947	b1 18		lda ($18),y			lda 	(codePtr),y
.2949	c9 7c		cmp #$7c			cmp 	#$7C
.294b	d0 15		bne $2962			bne 	_VCSComplex
.294d	c8		iny				iny 								; consume the second byte, the type.
.294e	8a		txa				txa  								; character (40-7F) x 4
.294f	0a		asl a				asl 	a
.2950	0a		asl a				asl  	a
.2951	18		clc				clc
.2952	69 69		adc #$69			adc 	#FastVariables & $FF
.2954	85 08		sta $08				sta 	IFR0+IM0
.2956	a9 06		lda #$06			lda 	#FastVariables >> 8
.2958	69 00		adc #$00			adc 	#0
.295a	85 09		sta $09				sta 	IFR0+IM1
.295c	64 0a		stz $0a				stz 	IFR0+IM2
.295e	64 0b		stz $0b				stz 	IFR0+IExp
.2960	38		sec				sec 								; it's a reference
.2961	60		rts				rts
.2962					_VCSComplex:
.2962	88		dey				dey	 								; extract information.
.2963	20 f0 28	jsr $28f0			jsr 	VARGetInfo
.2966	20 a2 28	jsr $28a2			jsr 	VARFind 					; search for variable
.2969	b0 0a		bcs $2975			bcs 	_VCSHaveVariable
.296b	ad 26 06	lda $0626			lda 	VARType 					; error if arrays, cannot autocreate
.296e	29 02		and #$02			and 	#2
.2970	d0 25		bne $2997			bne 	_VCNoCreate
.2972	20 4e 28	jsr $284e			jsr 	VARCreate 					; create variable
.2975					_VCSHaveVariable:
.2975	48		pha				pha 								; save LSB on the stack
.2976	ad 26 06	lda $0626			lda 	VARType 					; get var type, and shift bit 1 into carry
.2979	6a		ror a				ror 	a
.297a	6a		ror a				ror 	a
.297b	68		pla				pla 								; restore LSB
.297c	90 08		bcc $2986			bcc 	_VCSNotArray 				; skip if not an array
.297e	20 e6 27	jsr $27e6			jsr 	VARArrayLookup 				; look for subscripts.
.2981	48		pha				pha 								; check )
.2982	20 07 26	jsr $2607			jsr 	ERRCheckRParen
.2985	68		pla				pla
.2986					_VCSNotArray:
.2986	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2988	85 08		sta $08				sta 	IFR0+IM0
.298a	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.298c	ad 26 06	lda $0626			lda 	VARType 					; number/string bit into carry
.298f	6a		ror a				ror 	a
.2990	a9 00		lda #$00			lda 	#0
.2992	6a		ror a				ror 	a 							; now $00 or $80
.2993	85 0b		sta $0b				sta 	IFR0+IExp
.2995	38		sec				sec 								; it's a reference
.2996	60		rts				rts
.2997					_VCNoCreate:
.2997	4c 6c 25	jmp $256c		jmp	ErrorV_uninitialised
.0669					FastVariables:
>0669							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.299a					IFInitialise:
.299a	9c d9 06	stz $06d9			stz 	IFStackIndex
.299d	60		rts				rts
.299e					IFloatSubtract:
.299e	da		phx				phx
.299f	a2 08		ldx #$08			ldx 	#IFR0
.29a1	20 ba 2f	jsr $2fba			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.29a4	fa		plx				plx
.29a5					IFloatAdd:
.29a5	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.29a7	05 0b		ora $0b				ora 	IFR0+IExp
.29a9	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.29ab	d0 4e		bne $29fb			bne 	_IFloatAddDecimals 			; decimal version.
.29ad					_IFAddSubMantissa:
.29ad	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.29af	45 0b		eor $0b				eor 	IFR0+IExp
.29b1	29 40		and #$40			and 	#IFSign
.29b3	d0 21		bne $29d6			bne 	_IFloatSubMantissa
.29b5	18		clc				clc 								; do the actual addition
.29b6	a5 08		lda $08			lda 	IFR0+IM0
.29b8	75 00		adc $00,x		adc 		IM0,x
.29ba	85 08		sta $08			sta 	IFR0+IM0
.29bc	a5 09		lda $09			lda 	IFR0+IM1
.29be	75 01		adc $01,x		adc 		IM1,x
.29c0	85 09		sta $09			sta 	IFR0+IM1
.29c2	a5 0a		lda $0a			lda 	IFR0+IM2
.29c4	75 02		adc $02,x		adc 		IM2,x
.29c6	85 0a		sta $0a			sta 	IFR0+IM2
.29c8	10 29		bpl $29f3			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.29ca	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.29cc	20 de 2f	jsr $2fde			jsr 	IFloatShiftRight
.29cf	20 08 30	jsr $3008			jsr 	IFloatIncExponent
.29d2	d0 1f		bne $29f3			bne 	_IFloatAddExit
.29d4	38		sec				sec 								; overflowed numerically.
.29d5	60		rts				rts
.29d6					_IFloatSubMantissa:
.29d6	38		sec				sec 								; do the subtraction R0-Rx
.29d7	a5 08		lda $08			lda 	IFR0+IM0
.29d9	f5 00		sbc $00,x		sbc 		IM0,x
.29db	85 08		sta $08			sta 	IFR0+IM0
.29dd	a5 09		lda $09			lda 	IFR0+IM1
.29df	f5 01		sbc $01,x		sbc 		IM1,x
.29e1	85 09		sta $09			sta 	IFR0+IM1
.29e3	a5 0a		lda $0a			lda 	IFR0+IM2
.29e5	f5 02		sbc $02,x		sbc 		IM2,x
.29e7	85 0a		sta $0a			sta 	IFR0+IM2
.29e9	b0 08		bcs $29f3			bcs 	_IFloatAddExit 				; no borrow so we are done.
.29eb	a2 08		ldx #$08			ldx 	#IFR0
.29ed	20 c2 2f	jsr $2fc2			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.29f0	20 ba 2f	jsr $2fba			jsr 	IFloatNegate 				; negate
.29f3					_IFloatAddExit:
.29f3	18		clc				clc
.29f4	60		rts				rts
.29f5					_IFloatZeroAdd:
.29f5	fa		plx				plx 								; return this value in R0
.29f6	20 40 2f	jsr $2f40			jsr 	IFloatCopyFromRegister
.29f9	18		clc				clc
.29fa	60		rts				rts
.29fb					_IFloatAddDecimals:
.29fb	20 a8 2f	jsr $2fa8			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.29fe	f0 f3		beq $29f3			beq 	_IFloatAddExit
.2a00	20 e6 2f	jsr $2fe6			jsr 	IFloatNormalise 			; normalise RX
.2a03	da		phx				phx 								; normalise R0
.2a04	a2 08		ldx #$08			ldx 	#IFR0
.2a06	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero
.2a09	f0 ea		beq $29f5			beq 	_IFloatZeroAdd
.2a0b	20 e6 2f	jsr $2fe6			jsr 	IFloatNormalise
.2a0e	fa		plx				plx
.2a0f	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2a11	29 3f		and #$3f			and 	#IFXMask
.2a13	38		sec				sec
.2a14	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2a16	85 20		sta $20				sta 	iTemp0
.2a18	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2a1a	29 3f		and #$3f			and 	#IFXMask
.2a1c	38		sec				sec
.2a1d	e9 20		sbc #$20			sbc 	#$20
.2a1f	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2a21	b0 02		bcs $2a25			bcs 	_IFloatHaveLarger
.2a23	a5 20		lda $20				lda 	iTemp0
.2a25					_IFloatHaveLarger:
.2a25	18		clc				clc 								; get the actual one back.
.2a26	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2a28	20 35 2a	jsr $2a35			jsr 	_IFShiftXToA
.2a2b	da		phx				phx
.2a2c	a2 08		ldx #$08			ldx 	#IFR0
.2a2e	20 35 2a	jsr $2a35			jsr 	_IFShiftXToA
.2a31	fa		plx				plx
.2a32	4c ad 29	jmp $29ad			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2a35					_IFShiftXToA:
.2a35	8d d1 06	sta $06d1			sta 	IFTarget
.2a38	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero 			; check adding zero ?
.2a3b	f0 11		beq $2a4e			beq 	_IFSXExit
.2a3d					_IFSXLoop:
.2a3d	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2a3f	29 3f		and #$3f			and 	#IFXMask
.2a41	cd d1 06	cmp $06d1			cmp 	IFTarget
.2a44	f0 08		beq $2a4e			beq 	_IFSXExit
.2a46	20 de 2f	jsr $2fde			jsr 	IFloatShiftRight
.2a49	20 08 30	jsr $3008			jsr 	IFloatIncExponent
.2a4c	80 ef		bra $2a3d			bra 	_IFSXLoop
.2a4e					_IFSXExit:
.2a4e	60		rts				rts
.06d1					IFTarget:
>06d1							.fill 	1
.2a4f					IFloatMultiply:
.2a4f	8e d1 06	stx $06d1			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2a52	20 0a 2b	jsr $2b0a			jsr 	IFCalculateNewSign
.2a55	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2a57	05 0b		ora $0b				ora 	IFR0+IExp
.2a59	29 3f		and #$3f			and 	#IFXMask
.2a5b	15 01		ora $01,x			ora 	IM1,x
.2a5d	05 09		ora $09				ora 	IFR0+IM1
.2a5f	15 02		ora $02,x			ora 	IM2,x
.2a61	05 0a		ora $0a				ora 	IFR0+IM2
.2a63	d0 0a		bne $2a6f			bne 	_IFMStandard
.2a65	20 8b 2f	jsr $2f8b			jsr 	IFloatMultiply8BitRx
.2a68	ad d3 06	lda $06d3			lda 	IFNewSign
.2a6b	85 0b		sta $0b				sta 	IFR0+IExp
.2a6d	18		clc				clc
.2a6e	60		rts				rts
.2a6f					_IFMStandard:
.2a6f	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2a71	20 01 2b	jsr $2b01			jsr 	IFMSignExtend
.2a74	8d d2 06	sta $06d2			sta 	IFNewExponent
.2a77	a5 0b		lda $0b				lda 	IFR0+IExp
.2a79	20 01 2b	jsr $2b01			jsr 	IFMSignExtend
.2a7c	18		clc				clc
.2a7d	6d d2 06	adc $06d2			adc 	IFNewExponent
.2a80	8d d2 06	sta $06d2			sta 	IFNewExponent
.2a83	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2a85	20 51 2f	jsr $2f51			jsr 	IFloatCopyToRegister
.2a88	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2a8a	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.2a8d					_IFMLoop:
.2a8d	a2 14		ldx #$14			ldx 	#IFRTemp
.2a8f	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero
.2a92	f0 3a		beq $2ace			beq 	_IFMExit
.2a94	ae d1 06	ldx $06d1			ldx 	IFTarget 					; look at adder MSB
.2a97	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2a99	10 03		bpl $2a9e			bpl	 	_IFMTargetOkay
.2a9b	20 f2 2a	jsr $2af2			jsr 	_IFMShiftAll
.2a9e					_IFMTargetOkay:
.2a9e	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2aa0	29 01		and #$01			and 	#1
.2aa2	f0 16		beq $2aba			beq 	_IFMNoAdd
.2aa4	ae d1 06	ldx $06d1			ldx 	IFTarget 					; add adder
.2aa7	18		clc				clc
.2aa8	a5 08		lda $08			lda 	IFR0+IM0
.2aaa	75 00		adc $00,x		adc 		IM0,x
.2aac	85 08		sta $08			sta 	IFR0+IM0
.2aae	a5 09		lda $09			lda 	IFR0+IM1
.2ab0	75 01		adc $01,x		adc 		IM1,x
.2ab2	85 09		sta $09			sta 	IFR0+IM1
.2ab4	a5 0a		lda $0a			lda 	IFR0+IM2
.2ab6	75 02		adc $02,x		adc 		IM2,x
.2ab8	85 0a		sta $0a			sta 	IFR0+IM2
.2aba					_IFMNoAdd:
.2aba	a5 0a		lda $0a				lda 	IFR0+IM2
.2abc	10 03		bpl $2ac1			bpl 	_IFMResultOkay
.2abe	20 f2 2a	jsr $2af2			jsr 	_IFMShiftAll
.2ac1					_IFMResultOkay:
.2ac1	a2 14		ldx #$14			ldx 	#IFRTemp
.2ac3	20 de 2f	jsr $2fde			jsr 	IFloatShiftRight
.2ac6	ae d1 06	ldx $06d1			ldx 	IFTarget
.2ac9	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.2acc	80 bf		bra $2a8d			bra 	_IFMLoop
.2ace					_IFMExit:
.2ace	ad d2 06	lda $06d2			lda 	IFNewExponent 				; validate new exponent.
.2ad1	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2ad3	90 0f		bcc $2ae4			bcc 	_IFMOkay
.2ad5	c9 e0		cmp #$e0			cmp 	#$E0
.2ad7	b0 0b		bcs $2ae4			bcs 	_IFMOkay
.2ad9	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2adb	f0 13		beq $2af0			beq 	_IFMError
.2add	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2adf	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.2ae2	18		clc				clc
.2ae3	60		rts				rts
.2ae4					_IFMOkay:
.2ae4	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2ae6	0d d3 06	ora $06d3			ora 	IFNewSign
.2ae9	85 0b		sta $0b				sta 	IFR0+IExp
.2aeb	18		clc				clc
.2aec	60		rts				rts
.2aed	4c ff ff	jmp $ffff			jmp 	$FFFF
.2af0					_IFMError:
.2af0	38		sec				sec
.2af1	60		rts				rts
.2af2					_IFMShiftAll:
.2af2	a2 08		ldx #$08			ldx 	#IFR0
.2af4	20 de 2f	jsr $2fde			jsr 	IFloatShiftRight
.2af7	ae d1 06	ldx $06d1			ldx 	IFTarget
.2afa	20 de 2f	jsr $2fde			jsr 	IFloatShiftRight
.2afd	ee d2 06	inc $06d2			inc 	IFNewExponent
.2b00	60		rts				rts
.2b01					IFMSignExtend:
.2b01	29 3f		and #$3f			and 	#IFXMask
.2b03	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2b05	90 02		bcc $2b09			bcc 	_IFMNoSXX
.2b07	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2b09					_IFMNoSXX:
.2b09	60		rts				rts
.2b0a					IFCalculateNewSign:
.2b0a	b5 03		lda $03,x			lda 	IExp,x
.2b0c	45 0b		eor $0b				eor 	IFR0+IExp
.2b0e	29 40		and #$40			and 	#IFSign
.2b10	8d d3 06	sta $06d3			sta 	IFNewSign
.2b13	60		rts				rts
.06d2					IFNewExponent:
>06d2							.fill 	1
.06d3					IFNewSign:
>06d3							.fill 	1
.2b14					IFloatDivideInteger:
.2b14	20 2d 2b	jsr $2b2d			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2b17	b0 06		bcs $2b1f			bcs 	_IFDIExit
.2b19	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2b1b	20 40 2f	jsr $2f40			jsr 	IFloatCopyFromRegister
.2b1e	18		clc				clc
.2b1f					_IFDIExit:
.2b1f	60		rts				rts
.2b20					IFloatModulusInteger:
.2b20	20 2d 2b	jsr $2b2d			jsr 	IFloatDivideIntegerCommon
.2b23	b0 07		bcs $2b2c			bcs 	_IFMIExit
.2b25	ae d1 06	ldx $06d1			ldx 	IFTarget
.2b28	20 40 2f	jsr $2f40			jsr 	IFloatCopyFromRegister
.2b2b	18		clc				clc
.2b2c					_IFMIExit:
.2b2c	60		rts				rts
.2b2d					IFloatDivideIntegerCommon:
.2b2d	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.2b30	20 0a 2b	jsr $2b0a			jsr 	IFCalculateNewSign 			; calculate sign of result
.2b33	20 5b 2b	jsr $2b5b			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2b36	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2b38	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero
.2b3b	f0 1c		beq $2b59			beq 	_IFDIDivZero
.2b3d	ae d1 06	ldx $06d1			ldx 	IFTarget 					; zero Rx (S1)
.2b40	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.2b43	5a		phy				phy
.2b44	a0 18		ldy #$18			ldy 	#24
.2b46					_IFDILoop:
.2b46	20 6c 2b	jsr $2b6c			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2b49	20 78 2b	jsr $2b78			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2b4c	88		dey				dey
.2b4d	d0 f7		bne $2b46			bne 	_IFDILoop 					; do it 24 times
.2b4f	7a		ply				ply
.2b50	ad d3 06	lda $06d3			lda 	IFNewSign 					; set sign of result.
.2b53	29 40		and #$40			and 	#IFSign
.2b55	85 17		sta $17				sta 	IFRTemp+IExp
.2b57	18		clc				clc 								; is okay.
.2b58	60		rts				rts
.2b59					_IFDIDivZero:
.2b59	38		sec				sec
.2b5a	60		rts				rts
.2b5b					IFDCopyRXToRTemp:
.2b5b	b5 00		lda $00,x			lda 	IM0,x
.2b5d	85 14		sta $14				sta 	IFRTemp+IM0
.2b5f	b5 01		lda $01,x			lda 	IM1,x
.2b61	85 15		sta $15				sta 	IFRTemp+IM1
.2b63	b5 02		lda $02,x			lda 	IM2,x
.2b65	85 16		sta $16				sta 	IFRTemp+IM2
.2b67	b5 03		lda $03,x			lda 	IExp,x
.2b69	85 17		sta $17				sta 	IFRTemp+IExp
.2b6b	60		rts				rts
.2b6c					IFDShiftSTempS1Left:
.2b6c	a2 14		ldx #$14			ldx 	#IFRTemp
.2b6e	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft
.2b71	ae d1 06	ldx $06d1			ldx 	IFTarget
.2b74	20 d7 2f	jsr $2fd7			jsr 	IFloatRotateLeft
.2b77	60		rts				rts
.2b78					IFDTrySubtract:
.2b78	ae d1 06	ldx $06d1			ldx 	IFTarget 					; s1 = Rx
.2b7b	38		sec				sec 								; subtract, saving the results on the stack.
.2b7c	b5 00		lda $00,x			lda 	IM0,x
.2b7e	e5 08		sbc $08				sbc 	IFR0+IM0
.2b80	48		pha				pha
.2b81	b5 01		lda $01,x			lda 	IM1,x
.2b83	e5 09		sbc $09				sbc 	IFR0+IM1
.2b85	48		pha				pha
.2b86	b5 02		lda $02,x			lda 	IM2,x
.2b88	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2b8a	b0 03		bcs $2b8f			bcs 	_IFDCanSubtract
.2b8c	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2b8d	68		pla				pla
.2b8e	60		rts				rts
.2b8f					_IFDCanSubtract:
.2b8f	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2b91	68		pla				pla
.2b92	95 01		sta $01,x			sta 	IM1,x
.2b94	68		pla				pla
.2b95	95 00		sta $00,x			sta 	IM0,x
.2b97	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2b99	d0 06		bne $2ba1			bne 	_IFDCSExit
.2b9b	e6 15		inc $15				inc 	IFRTemp+IM1
.2b9d	d0 02		bne $2ba1			bne 	_IFDCSExit
.2b9f	e6 16		inc $16				inc 	IFRTemp+IM2
.2ba1					_IFDCSExit:
.2ba1	60		rts				rts
.2ba2					IFloatBitwiseAnd:
.2ba2	5a		phy				phy
.2ba3	20 e7 2b	jsr $2be7			jsr 	IFPreProcessBitwise 		; set up everything.
.2ba6	d0 0f		bne $2bb7			bne 	_IFBAExit
.2ba8					_IFBALoop:
.2ba8	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2bab	35 00		and $00,x			and 	IM0,x
.2bad	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2bb0	e8		inx				inx
.2bb1	c8		iny				iny
.2bb2	c0 03		cpy #$03			cpy 	#3
.2bb4	d0 f2		bne $2ba8			bne 	_IFBALoop
.2bb6	18		clc				clc
.2bb7					_IFBAExit:
.2bb7	7a		ply				ply
.2bb8	60		rts				rts
.2bb9					IFloatBitwiseOr:
.2bb9	5a		phy				phy
.2bba	20 e7 2b	jsr $2be7			jsr 	IFPreProcessBitwise 		; set up everything.
.2bbd	d0 0f		bne $2bce			bne 	_IFBAExit
.2bbf					_IFBALoop:
.2bbf	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2bc2	15 00		ora $00,x			ora 	IM0,x
.2bc4	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2bc7	e8		inx				inx
.2bc8	c8		iny				iny
.2bc9	c0 03		cpy #$03			cpy 	#3
.2bcb	d0 f2		bne $2bbf			bne 	_IFBALoop
.2bcd	18		clc				clc
.2bce					_IFBAExit:
.2bce	7a		ply				ply
.2bcf	60		rts				rts
.2bd0					IFloatBitwiseXor:
.2bd0	5a		phy				phy
.2bd1	20 e7 2b	jsr $2be7			jsr 	IFPreProcessBitwise 		; set up everything.
.2bd4	d0 0f		bne $2be5			bne 	_IFBAExit
.2bd6					_IFBALoop:
.2bd6	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2bd9	55 00		eor $00,x			eor 	IM0,x
.2bdb	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2bde	e8		inx				inx
.2bdf	c8		iny				iny
.2be0	c0 03		cpy #$03			cpy 	#3
.2be2	d0 f2		bne $2bd6			bne 	_IFBALoop
.2be4	18		clc				clc
.2be5					_IFBAExit:
.2be5	7a		ply				ply
.2be6	60		rts				rts
.2be7					IFPreProcessBitwise:
.2be7	a0 00		ldy #$00			ldy 	#0 							; set index.
.2be9	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2beb	15 03		ora $03,x			ora 	IExp,x
.2bed	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2bef	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2bf1	38		sec				sec 								; carry set just in cases.
.2bf2	60		rts				rts
.2bf3					IFloatAbsoluteR0:
.2bf3	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2bf5	29 bf		and #$bf			and 	#IFSign ^ 255
.2bf7	85 0b		sta $0b				sta 	IFR0+IExp
.2bf9	18		clc				clc
.2bfa	60		rts				rts
.2bfb					IFloatSquareRootR0:
.2bfb	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2bfd	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero
.2c00	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2c02	29 40		and #$40			and 	#IFSign
.2c04	d0 2f		bne $2c35			bne 	_IFSRFail
.2c06	20 e6 2f	jsr $2fe6			jsr 	IFloatNormalise 			; it will work better !
.2c09	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2c0b	20 51 2f	jsr $2f51			jsr 	IFloatCopyToRegister
.2c0e	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2c10	20 01 2b	jsr $2b01			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2c13	18		clc				clc
.2c14	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2c16	85 0b		sta $0b				sta 	IFR0+IExp
.2c18	4a		lsr a				lsr 	a 							; which we can halve.
.2c19	38		sec				sec 								; convert back
.2c1a	e9 17		sbc #$17			sbc 	#23
.2c1c	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2c1e	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2c20	20 37 2c	jsr $2c37			jsr 	_IFSRNewton
.2c23	20 37 2c	jsr $2c37			jsr 	_IFSRNewton
.2c26	20 37 2c	jsr $2c37			jsr 	_IFSRNewton
.2c29	20 37 2c	jsr $2c37			jsr 	_IFSRNewton
.2c2c	18		clc				clc
.2c2d	60		rts				rts
.2c2e					_IFSRZero:
.2c2e	a2 08		ldx #$08			ldx 	#IFR0
.2c30	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.2c33	18		clc				clc
.2c34	60		rts				rts
.2c35					_IFSRFail:
.2c35	38		sec				sec
.2c36	60		rts				rts
.2c37					_IFSRNewton:
.2c37	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2c39	20 fe 2e	jsr $2efe			jsr 	IFloatPushRx
.2c3c	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2c3e	20 fe 2e	jsr $2efe			jsr 	IFloatPushRx
.2c41	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2c43	20 d2 2c	jsr $2cd2			jsr 	IFloatDivideFloat
.2c46	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2c48	20 1f 2f	jsr $2f1f			jsr 	IFloatPullRx
.2c4b	20 a5 29	jsr $29a5			jsr 	IFloatAdd 					; now guess + original/guess
.2c4e	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2c50	20 de 2f	jsr $2fde			jsr 	IFloatShiftRight
.2c53	a2 0c		ldx #$0c			ldx 	#IFR1
.2c55	20 1f 2f	jsr $2f1f			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2c58	60		rts				rts
.2c59					IFloatFractionalR0:
.2c59	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2c5b	29 3f		and #$3f			and 	#IFXMask
.2c5d	f0 17		beq $2c76			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2c5f	20 f3 2b	jsr $2bf3			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2c62	a2 08		ldx #$08			ldx 	#IFR0
.2c64	20 e6 2f	jsr $2fe6			jsr 	IFloatNormalise 			; normalise R0
.2c67	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2c69	20 51 2f	jsr $2f51			jsr 	IFloatCopyToRegister
.2c6c	20 af 2c	jsr $2caf			jsr 	IFloatIntegerR0 			; take integer part of R0
.2c6f	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2c71	20 9e 29	jsr $299e			jsr 	IFloatSubtract
.2c74	80 05		bra $2c7b			bra 	_FIPExit
.2c76					_FIPZero:
.2c76	a2 08		ldx #$08			ldx 	#IFR0
.2c78	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.2c7b					_FIPExit:
.2c7b	18		clc				clc
.2c7c	60		rts				rts
.2c7d					IFloatCompare:
.2c7d	20 9e 29	jsr $299e			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2c80	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2c82	05 0b		ora $0b				ora 	IFR0+IExp
.2c84	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2c86	29 3f		and #$3f			and 	#IFXMask
.2c88	d0 19		bne $2ca3			bne 	_IFCNonInteger
.2c8a	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero 			; check if zero
.2c8d	f0 0f		beq $2c9e			beq 	_IFCZero
.2c8f					_IFCReturnSign:
.2c8f	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2c91	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2c93	48		pha				pha
.2c94	a9 01		lda #$01			lda 	#1
.2c96	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte 				; return to +1
.2c99	68		pla				pla 								; sign bit back
.2c9a	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2c9c	18		clc				clc
.2c9d	60		rts				rts
.2c9e					_IFCZero:
.2c9e	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.2ca1	18		clc				clc
.2ca2	60		rts				rts
.2ca3					_IFCNonInteger:
.2ca3	a5 08		lda $08				lda 	IFR0+IM0
.2ca5	29 00		and #$00			and		#$00
.2ca7	05 09		ora $09				ora 	IFR0+IM1
.2ca9	05 0a		ora $0a				ora 	IFR0+IM2
.2cab	f0 f1		beq $2c9e			beq 	_IFCZero 					; near enough !
.2cad	80 e0		bra $2c8f			bra 	_IFCReturnSign 				; return the sign of the difference.
.2caf					IFloatIntegerR0:
.2caf	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2cb1	29 3f		and #$3f			and 	#IFXMask
.2cb3	f0 1b		beq $2cd0			beq 	_FIPExit 					; if so do nothing
.2cb5	a2 08		ldx #$08			ldx 	#IFR0
.2cb7	20 e6 2f	jsr $2fe6			jsr 	IFloatNormalise 			; normalise
.2cba	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero 			; is it zero ?
.2cbd	f0 0e		beq $2ccd			beq 	_FIPZero 					; if so return zero.
.2cbf					_FIPShift:
.2cbf	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2cc1	29 20		and #$20			and 	#$20 						; still -ve
.2cc3	f0 0b		beq $2cd0			beq 	_FIPExit
.2cc5	20 de 2f	jsr $2fde			jsr 	IFloatShiftRight 			; shift mantissa right
.2cc8	20 08 30	jsr $3008			jsr 	IFloatIncExponent 			; bump exponent
.2ccb	80 f2		bra $2cbf			bra 	_FIPShift
.2ccd					_FIPZero:
.2ccd	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.2cd0					_FIPExit:
.2cd0	18		clc				clc
.2cd1	60		rts				rts
.2cd2					IFloatDivideFloat:
.2cd2	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.2cd5	20 0a 2b	jsr $2b0a			jsr 	IFCalculateNewSign 			; calculate sign of result
.2cd8	20 e6 2f	jsr $2fe6			jsr 	IFloatNormalise 			; normalise RX
.2cdb	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2cdd	20 e6 2f	jsr $2fe6			jsr 	IFloatNormalise
.2ce0	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero
.2ce3	f0 56		beq $2d3b			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2ce5	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2ce7	20 01 2b	jsr $2b01			jsr 	IFMSignExtend
.2cea	8d d2 06	sta $06d2			sta 	IFNewExponent
.2ced	ae d1 06	ldx $06d1			ldx 	IFTarget 					; calculate s1.exponent
.2cf0	b5 03		lda $03,x			lda 	IExp,x
.2cf2	20 01 2b	jsr $2b01			jsr 	IFMSignExtend
.2cf5	38		sec				sec
.2cf6	ed d2 06	sbc $06d2			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2cf9	38		sec				sec
.2cfa	e9 17		sbc #$17			sbc 	#23
.2cfc	8d d2 06	sta $06d2			sta 	IFNewExponent
.2cff	20 3d 2d	jsr $2d3d			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2d02	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2d04	10 08		bpl $2d0e			bpl 	_IFDFNoShiftResult
.2d06	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2d08	20 de 2f	jsr $2fde			jsr 	IFloatShiftRight
.2d0b	ee d2 06	inc $06d2			inc 	IFNewExponent
.2d0e					_IFDFNoShiftResult:
.2d0e	ad d2 06	lda $06d2			lda 	IFNewExponent 				; underflow/overflow check.
.2d11	30 06		bmi $2d19			bmi 	_IFDFCheckUnderflow
.2d13	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2d15	b0 24		bcs $2d3b			bcs 	_IFDFDivZero
.2d17	80 11		bra $2d2a			bra		_IFDFExit
.2d19					_IFDFCheckUnderflow:
.2d19	ad d2 06	lda $06d2			lda 	IFNewExponent 				; shift into a legal exponent.
.2d1c	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2d1e	b0 0a		bcs $2d2a			bcs 	_IFDFExit
.2d20	ee d2 06	inc $06d2			inc 	IFNewExponent
.2d23	a2 14		ldx #$14			ldx 	#IFRTemp
.2d25	20 de 2f	jsr $2fde			jsr 	IFloatShiftRight
.2d28	80 ef		bra $2d19			bra 	_IFDFCheckUnderflow
.2d2a					_IFDFExit:
.2d2a	ad d2 06	lda $06d2			lda 	IFNewExponent 				; combine exponent and sign.
.2d2d	29 3f		and #$3f			and 	#IFXMask
.2d2f	0d d3 06	ora $06d3			ora 	IFNewSign
.2d32	85 17		sta $17				sta 	IFRTemp+IExp
.2d34	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2d36	20 40 2f	jsr $2f40			jsr 	IFloatCopyFromRegister
.2d39	18		clc				clc
.2d3a	60		rts				rts
.2d3b					_IFDFDivZero:
.2d3b	38		sec				sec
.2d3c	60		rts				rts
.2d3d					IFloatDivideSupport:
.2d3d	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2d3f	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.2d42	5a		phy				phy 								; main division loop x 23
.2d43	a0 17		ldy #$17			ldy 	#23
.2d45					_IFDSLoop:
.2d45	20 78 2b	jsr $2b78			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2d48	20 6c 2b	jsr $2b6c			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2d4b	88		dey				dey
.2d4c	d0 f7		bne $2d45			bne 	_IFDSLoop 					; do it 24 times
.2d4e	7a		ply				ply
.2d4f	60		rts				rts
.2d50					IFloatIntegerToStringR0:
.2d50	8d d4 06	sta $06d4			sta 	IFBase 						; save base to use.
.2d53	20 30 30	jsr $3030			jsr 	IFloatBufferReset			; empty buffer
.2d56	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer
.2d58	29 3f		and #$3f			and 	#IFXMask
.2d5a	d0 1e		bne $2d7a			bne 	_IFIFail
.2d5c	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2d5e	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero
.2d61	f0 0e		beq $2d71			beq 	_IFINotNegative
.2d63	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2d65	29 40		and #$40			and 	#IFSign
.2d67	f0 08		beq $2d71			beq 	_IFINotNegative
.2d69	a9 2d		lda #$2d			lda 	#"-"						; output -
.2d6b	20 3f 30	jsr $303f			jsr 	IFloatBufferWrite
.2d6e	20 ba 2f	jsr $2fba			jsr 	IFloatNegate 				; tidy up !
.2d71					_IFINotNegative:
.2d71	20 7c 2d	jsr $2d7c			jsr 	_IFIRecursiveConvert 		; start converting
.2d74	20 37 30	jsr $3037			jsr 	IFloatGetBufferAddress
.2d77	18		clc				clc
.2d78	80 01		bra $2d7b			bra 	_IFIExit
.2d7a					_IFIFail:
.2d7a	38		sec				sec
.2d7b					_IFIExit:
.2d7b	60		rts				rts
.2d7c					_IFIRecursiveConvert:
.2d7c	a2 0c		ldx #$0c			ldx 	#IFR1
.2d7e	20 51 2f	jsr $2f51			jsr 	IFloatCopyToRegister 		; R0->R1
.2d81	a2 08		ldx #$08			ldx 	#IFR0
.2d83	ad d4 06	lda $06d4			lda 	IFBase 						; Base -> R0
.2d86	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.2d89	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2d8b	20 14 2b	jsr $2b14			jsr 	IFloatDivideInteger
.2d8e	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2d90	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero
.2d93	f0 09		beq $2d9e			beq 	_IFIOutDigit
.2d95	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder
.2d97	48		pha				pha
.2d98	20 7c 2d	jsr $2d7c			jsr 	_IFIRecursiveConvert 		; convert the divider
.2d9b	68		pla				pla
.2d9c	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2d9e					_IFIOutDigit:
.2d9e	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2da0	c9 0a		cmp #$0a			cmp	 	#10
.2da2	90 02		bcc $2da6			bcc 	_IFINotHex
.2da4	69 06		adc #$06			adc 	#6
.2da6					_IFINotHex:
.2da6	69 30		adc #$30			adc 	#48
.2da8	20 3f 30	jsr $303f			jsr 	IFloatBufferWrite
.2dab	60		rts				rts
.06d4					IFBase:
>06d4							.fill 	1
.2dac					IFloatFloatToStringR0:
.2dac	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2dae	20 fe 2e	jsr $2efe			jsr 	IFloatPushRx
.2db1	20 51 2f	jsr $2f51			jsr 	IFloatCopyToRegister
.2db4	20 af 2c	jsr $2caf			jsr 	IFloatIntegerR0				; make R0 integer
.2db7	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2db9	20 50 2d	jsr $2d50			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2dbc	9c d5 06	stz $06d5			stz 	IFloatDecimalCount 			; zero the decimal count.
.2dbf	a5 13		lda $13				lda 	IFR2+IExp 					; is integer.
.2dc1	29 3f		and #$3f			and 	#IFXMask
.2dc3	f0 44		beq $2e09			beq 	_IFFSExit
.2dc5					_IFloatFracLoop:
.2dc5	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2dc7	20 40 2f	jsr $2f40			jsr 	IFloatCopyFromRegister
.2dca	20 59 2c	jsr $2c59			jsr 	IFloatFractionalR0
.2dcd	20 e6 2f	jsr $2fe6			jsr 	IFloatNormalise
.2dd0	a2 10		ldx #$10			ldx 	#IFR2
.2dd2	20 51 2f	jsr $2f51			jsr 	IFloatCopyToRegister 		; copy to R2
.2dd5	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2dd7	a9 0a		lda #$0a			lda 	#10
.2dd9	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.2ddc	a2 10		ldx #$10			ldx 	#IFR2						; R0,R2 = R2 * 10
.2dde	20 4f 2a	jsr $2a4f			jsr 	IFloatMultiply
.2de1	a2 10		ldx #$10			ldx 	#IFR2
.2de3	20 51 2f	jsr $2f51			jsr 	IFloatCopyToRegister
.2de6	20 af 2c	jsr $2caf			jsr 	IFloatIntegerR0 			; get integer part of R0
.2de9	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2dec	c9 03		cmp #$03			cmp 	#3
.2dee	f0 16		beq $2e06			beq 	_IFFSExitStripZero
.2df0	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; written the DP yet ?
.2df3	d0 05		bne $2dfa			bne 	_IFloatNotFirst
.2df5	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2df7	20 3f 30	jsr $303f			jsr 	IFloatBufferWrite
.2dfa					_IFloatNotFirst:
.2dfa	ee d5 06	inc $06d5			inc 	IFloatDecimalCount
.2dfd	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2dff	09 30		ora #$30			ora 	#"0"						; ASCII
.2e01	20 3f 30	jsr $303f			jsr 	IFloatBufferWrite 			; write to the buffer.
.2e04	80 bf		bra $2dc5			bra 	_IFloatFracLoop
.2e06					_IFFSExitStripZero:
.2e06	20 4e 30	jsr $304e			jsr 	IFloatStripTrailingZeros
.2e09					_IFFSExit:
.2e09	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2e0b	20 1f 2f	jsr $2f1f			jsr 	IFloatPullRx
.2e0e	20 37 30	jsr $3037			jsr 	IFloatGetBufferAddress
.2e11	18		clc				clc
.2e12	60		rts				rts
.06d5					IFloatDecimalCount:
>06d5							.fill 	1
.2e13					IFloatStringToFloatR0:
.2e13	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.2e16	86 20		stx $20				stx 	iTemp0
.2e18	84 21		sty $21				sty 	iTemp0+1
.2e1a	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2e1c	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.2e1f	9c d7 06	stz $06d7			stz 	IFSignFlag 					; clear the sign flag
.2e22	20 af 2e	jsr $2eaf			jsr 	IFSTFGetNext 				; get first
.2e25	f0 1b		beq $2e42			beq 	_IFSTFFail 					; no character
.2e27	90 10		bcc $2e39			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2e29	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2e2b	d0 15		bne $2e42			bne 	_IFSTFFail
.2e2d	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2e2f	8d d7 06	sta $06d7			sta 	IFSignFlag
.2e32					_IFSTFLoop:
.2e32	20 af 2e	jsr $2eaf			jsr 	IFSTFGetNext 				; get next
.2e35	b0 0b		bcs $2e42			bcs 	_IFSTFFail 					; bad character.
.2e37	f0 11		beq $2e4a			beq 	_IFSTFExit 					; end of data
.2e39					_IFSTFHaveChar:
.2e39	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2e3b	f0 08		beq $2e45			beq 	_IFSTFDecimal
.2e3d	20 d3 2e	jsr $2ed3			jsr 	IFSTFAddR0 					; add number in
.2e40	80 f0		bra $2e32			bra 	_IFSTFLoop 					; keep going until . or end.
.2e42					_IFSTFFail:
.2e42	38		sec				sec
.2e43	80 0d		bra $2e52			bra 	_IFSTFReturn
.2e45					_IFSTFDecimal:
.2e45	20 5a 2e	jsr $2e5a			jsr 	IFSTFDecimal 				; call the decimal places code.
.2e48	b0 08		bcs $2e52			bcs 	_IFSTFReturn 				; error
.2e4a					_IFSTFExit:
.2e4a	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2e4c	0d d7 06	ora $06d7			ora 	IFSignFlag
.2e4f	85 0b		sta $0b				sta 	IFR0+IExp
.2e51	18		clc				clc
.2e52					_IFSTFReturn:
.2e52	60		rts				rts
.2e53					IFloatAddDecimalToR0:
.2e53	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.2e56	86 20		stx $20				stx 	iTemp0
.2e58	84 21		sty $21				sty 	iTemp0+1
.2e5a					IFSTFDecimal:
.2e5a	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2e5c	20 fe 2e	jsr $2efe			jsr 	IFloatPushRx
.2e5f	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2e61	20 af 2f	jsr $2faf			jsr 	IFloatSetZero
.2e64	9c d8 06	stz $06d8			stz 	IFDecimalPlaces
.2e67					_IFSTDLoop:
.2e67	20 af 2e	jsr $2eaf			jsr 	IFSTFGetNext 				; get next
.2e6a	b0 41		bcs $2ead			bcs 	_IFSTFFail2 				; bad character.
.2e6c	f0 11		beq $2e7f			beq 	_IFSTFComplete 				; end of data, work out the result.
.2e6e	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2e70	f0 39		beq $2eab			beq 	_IFSTFExit2
.2e72	20 d3 2e	jsr $2ed3			jsr 	IFSTFAddR0 					; add number in
.2e75	ee d8 06	inc $06d8			inc 	IFDecimalPlaces 			; count decimals
.2e78	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2e7b	c9 03		cmp #$03			cmp 	#3
.2e7d	90 e8		bcc $2e67			bcc 	_IFSTDLoop
.2e7f					_IFSTFComplete:
.2e7f	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2e82	f0 27		beq $2eab			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2e84	3a		dec a				dec 	a 							; table indexed from 1.
.2e85	0a		asl a				asl 	a
.2e86	0a		asl a				asl 	a
.2e87	aa		tax				tax
.2e88	bd ea 2e	lda $2eea,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2e8b	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2e8d	bd eb 2e	lda $2eeb,x			lda 	TableTen+1,x
.2e90	85 0d		sta $0d				sta  	IFR1+IM1
.2e92	bd ec 2e	lda $2eec,x			lda 	TableTen+2,x
.2e95	85 0e		sta $0e				sta  	IFR1+IM2
.2e97	bd ed 2e	lda $2eed,x			lda 	TableTen+3,x
.2e9a	85 0f		sta $0f				sta  	IFR1+IExp
.2e9c	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2e9e	20 4f 2a	jsr $2a4f			jsr 	IFloatMultiply
.2ea1	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop and add the decimal.
.2ea3	20 1f 2f	jsr $2f1f			jsr 	IFloatPullRx
.2ea6	a2 0c		ldx #$0c			ldx 	#IFR1
.2ea8	20 a5 29	jsr $29a5			jsr 	IFloatAdd
.2eab					_IFSTFExit2:
.2eab	18		clc				clc
.2eac	60		rts				rts
.2ead					_IFSTFFail2:
.2ead	38		sec				sec
.2eae	60		rts				rts
.2eaf					IFSTFGetNext:
.2eaf	ad d6 06	lda $06d6			lda 	IFCount  					; if count is zero, return with Z set.
.2eb2	f0 19		beq $2ecd			beq 	_IFSTFReturnOk
.2eb4	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.2eb6	e6 20		inc $20				inc 	iTemp0 						; point at next.
.2eb8	d0 02		bne $2ebc			bne 	_IFSTFGNNoCarry
.2eba	e6 21		inc $21				inc 	iTemp0+1
.2ebc					_IFSTFGNNoCarry:
.2ebc	ce d6 06	dec $06d6			dec 	IFCount 					; dec count.
.2ebf	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2ec1	f0 08		beq $2ecb			beq 	_IFSTFGOkay
.2ec3	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2ec5	90 08		bcc $2ecf			bcc 	_IFSTFGFail
.2ec7	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2ec9	b0 04		bcs $2ecf			bcs 	_IFSTFGFail
.2ecb					_IFSTFGOkay:
.2ecb	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ecd					_IFSTFReturnOk:
.2ecd	18		clc				clc
.2ece	60		rts				rts
.2ecf					_IFSTFGFail:
.2ecf	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ed1	38		sec				sec
.2ed2	60		rts				rts
.2ed3					IFSTFAddR0:
.2ed3	29 0f		and #$0f			and 	#15 						; to int value
.2ed5	48		pha				pha 								; save it.
.2ed6	a9 0a		lda #$0a			lda 	#10
.2ed8	a2 0c		ldx #$0c			ldx 	#IFR1
.2eda	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.2edd	20 4f 2a	jsr $2a4f			jsr 	IFloatMultiply
.2ee0	68		pla				pla
.2ee1	a2 0c		ldx #$0c			ldx 	#IFR1
.2ee3	20 b1 2f	jsr $2fb1			jsr 	IFloatSetByte
.2ee6	20 a5 29	jsr $29a5			jsr 	IFloatAdd
.2ee9	60		rts				rts
.06d6					IFCount:
>06d6							.fill 	1
.06d7					IFSignFlag:
>06d7							.fill 	1
.06d8					IFDecimalPlaces:
>06d8							.fill 	1
.2eea					TableTen:
>2eea	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2eee	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2ef2	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2ef6	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2efa	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2efe					IFloatPushRx:
.2efe	5a		phy				phy
.2eff	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.2f02	b5 00		lda $00,x			lda 	IM0,x
.2f04	99 da 06	sta $06da,y			sta 	IFStack,y
.2f07	b5 01		lda $01,x			lda 	IM1,x
.2f09	99 db 06	sta $06db,y			sta 	IFStack+1,y
.2f0c	b5 02		lda $02,x			lda 	IM2,x
.2f0e	99 dc 06	sta $06dc,y			sta 	IFStack+2,y
.2f11	b5 03		lda $03,x			lda 	IExp,x
.2f13	99 dd 06	sta $06dd,y			sta 	IFStack+3,y
.2f16	c8		iny				iny
.2f17	c8		iny				iny
.2f18	c8		iny				iny
.2f19	c8		iny				iny
.2f1a	8c d9 06	sty $06d9			sty 	IFStackIndex
.2f1d	7a		ply				ply
.2f1e	60		rts				rts
.2f1f					IFloatPullRx:
.2f1f	5a		phy				phy
.2f20	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.2f23	88		dey				dey
.2f24	88		dey				dey
.2f25	88		dey				dey
.2f26	88		dey				dey
.2f27	b9 da 06	lda $06da,y			lda 	IFStack,y
.2f2a	95 00		sta $00,x			sta 	IM0,x
.2f2c	b9 db 06	lda $06db,y			lda 	IFStack+1,y
.2f2f	95 01		sta $01,x			sta 	IM1,x
.2f31	b9 dc 06	lda $06dc,y			lda 	IFStack+2,y
.2f34	95 02		sta $02,x			sta 	IM2,x
.2f36	b9 dd 06	lda $06dd,y			lda 	IFStack+3,y
.2f39	95 03		sta $03,x			sta 	IExp,x
.2f3b	8c d9 06	sty $06d9			sty 	IFStackIndex
.2f3e	7a		ply				ply
.2f3f	60		rts				rts
.06d9					IFStackIndex:
>06d9							.fill 	1
.06da					IFStack:
>06da							.fill 	16*4
.2f40					IFloatCopyFromRegister:
.2f40	b5 00		lda $00,x			lda 	0,x
.2f42	85 08		sta $08				sta 	IFR0
.2f44	b5 01		lda $01,x			lda 	1,x
.2f46	85 09		sta $09				sta 	IFR0+1
.2f48	b5 02		lda $02,x			lda 	2,x
.2f4a	85 0a		sta $0a				sta 	IFR0+2
.2f4c	b5 03		lda $03,x			lda 	3,x
.2f4e	85 0b		sta $0b				sta 	IFR0+3
.2f50	60		rts				rts
.2f51					IFloatCopyToRegister:
.2f51	a5 08		lda $08				lda 	IFR0
.2f53	95 00		sta $00,x			sta 	0,x
.2f55	a5 09		lda $09				lda 	IFR0+1
.2f57	95 01		sta $01,x			sta 	1,x
.2f59	a5 0a		lda $0a				lda 	IFR0+2
.2f5b	95 02		sta $02,x			sta 	2,x
.2f5d	a5 0b		lda $0b				lda 	IFR0+3
.2f5f	95 03		sta $03,x			sta 	3,x
.2f61	60		rts				rts
.2f62					IFloatLoadInline:
.2f62	68		pla				pla 								; pop address off to iTemp0
.2f63	85 20		sta $20				sta 	iTemp0
.2f65	68		pla				pla
.2f66	85 21		sta $21				sta 	iTemp0+1
.2f68	a0 01		ldy #$01			ldy 	#1
.2f6a	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.2f6c	95 00		sta $00,x			sta 	0,x
.2f6e	c8		iny				iny
.2f6f	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.2f71	95 01		sta $01,x			sta 	1,x
.2f73	c8		iny				iny
.2f74	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.2f76	95 02		sta $02,x			sta 	2,x
.2f78	c8		iny				iny
.2f79	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.2f7b	95 03		sta $03,x			sta 	3,x
.2f7d	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2f7e	a5 20		lda $20				lda 	iTemp0
.2f80	69 05		adc #$05			adc 	#5
.2f82	85 20		sta $20				sta 	iTemp0
.2f84	90 02		bcc $2f88			bcc 	_IFLINoCarry
.2f86	e6 21		inc $21				inc 	iTemp0+1
.2f88					_IFLINoCarry:
.2f88	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.2f8b					IFloatMultiply8BitRx:
.2f8b	5a		phy		        phy
.2f8c	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2f8e	a4 08		ldy $08		        ldy     IFR0+IM0
.2f90	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2f91	85 08		sta $08		        sta     IFR0+IM0
.2f93	84 09		sty $09		        sty     IFR0+IM1
.2f95	a9 00		lda #$00	        lda     #0
.2f97	a0 08		ldy #$08	        ldy     #8
.2f99					_IFMLoop:
.2f99	90 03		bcc $2f9e	        bcc     _IFMNoAdd
.2f9b	18		clc		        clc
.2f9c	65 09		adc $09		        adc     IFR0+IM1
.2f9e					_IFMNoAdd:
.2f9e	6a		ror a		        ror     a
.2f9f	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2fa1	88		dey		        dey
.2fa2	d0 f5		bne $2f99	        bne     _IFMLoop
.2fa4	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.2fa6	7a		ply		        ply
.2fa7	60		rts		        rts
.2fa8					IFloatCheckZero:
.2fa8	b5 00		lda $00,x			lda 	IM0,x
.2faa	15 01		ora $01,x			ora 	IM1,x
.2fac	15 02		ora $02,x			ora 	IM2,x
.2fae	60		rts				rts
.2faf					IFloatSetZero:
.2faf	a9 00		lda #$00			lda 	#0
.2fb1					IFloatSetByte:
.2fb1	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2fb3	74 01		stz $01,x			stz 	IM1,x
.2fb5	74 02		stz $02,x			stz 	IM2,x
.2fb7	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2fb9	60		rts				rts
.2fba					IFloatNegate:
.2fba	b5 03		lda $03,x			lda 	IExp,x
.2fbc	49 40		eor #$40			eor 	#IFSign
.2fbe	95 03		sta $03,x			sta 	IExp,x
.2fc0	18		clc				clc
.2fc1	60		rts				rts
.2fc2					IFloatMantissaNegate:
.2fc2	38		sec				sec
.2fc3	a9 00		lda #$00			lda 	#0
.2fc5	f5 00		sbc $00,x			sbc 	IM0,x
.2fc7	95 00		sta $00,x			sta 	IM0,x
.2fc9	a9 00		lda #$00			lda 	#0
.2fcb	f5 01		sbc $01,x			sbc 	IM1,x
.2fcd	95 01		sta $01,x			sta 	IM1,x
.2fcf	a9 00		lda #$00			lda 	#0
.2fd1	f5 02		sbc $02,x			sbc 	IM2,x
.2fd3	95 02		sta $02,x			sta 	IM2,x
.2fd5	60		rts				rts
.2fd6					IFloatShiftLeft:
.2fd6	18		clc				clc
.2fd7					IFloatRotateLeft:
.2fd7	36 00		rol $00,x			rol 	IM0,x
.2fd9	36 01		rol $01,x			rol 	IM1,x
.2fdb	36 02		rol $02,x			rol 	IM2,x
.2fdd	60		rts				rts
.2fde					IFloatShiftRight:
.2fde	18		clc				clc
.2fdf					IFloatRotateRight:
.2fdf	76 02		ror $02,x			ror 	IM2,x
.2fe1	76 01		ror $01,x			ror 	IM1,x
.2fe3	76 00		ror $00,x			ror 	IM0,x
.2fe5	60		rts				rts
.2fe6					IFloatNormalise:
.2fe6	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero 			; is it zero
.2fe9	f0 18		beq $3003			beq 	_IFNExitZero 				; if so exit
.2feb					_IFNLoop:
.2feb	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2fed	29 c0		and #$c0			and 	#$C0
.2fef	c9 40		cmp #$40			cmp 	#$40
.2ff1	f0 13		beq $3006			beq 	_IFNExitOkay 				; if so , then we are done.
.2ff3	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2ff5	29 3f		and #$3f			and 	#$3F
.2ff7	c9 20		cmp #$20			cmp 	#$20
.2ff9	f0 0b		beq $3006			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2ffb	20 1c 30	jsr $301c			jsr 	IFloatDecExponent
.2ffe	20 d6 2f	jsr $2fd6			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3001	80 e8		bra $2feb			bra 	_IFNLoop
.3003					_IFNExitZero:
.3003	20 af 2f	jsr $2faf			jsr 	IFloatSetZero 				; set the result to zero
.3006					_IFNExitOkay:
.3006	18		clc				clc  								; return with CC.
.3007	60		rts				rts
.3008					IFloatIncExponent:
.3008	b5 03		lda $03,x			lda 	IExp,x
.300a	48		pha				pha
.300b	29 c0		and #$c0			and 	#$C0
.300d	8d 1a 07	sta $071a			sta 	IFXTemp
.3010	68		pla				pla
.3011	1a		inc a				inc 	a
.3012	29 3f		and #$3f			and 	#$3F
.3014	48		pha				pha
.3015	0d 1a 07	ora $071a			ora 	IFXTemp
.3018	95 03		sta $03,x			sta 	IExp,x
.301a	68		pla				pla
.301b	60		rts				rts
.301c					IFloatDecExponent:
.301c	b5 03		lda $03,x			lda 	IExp,x
.301e	48		pha				pha
.301f	29 c0		and #$c0			and 	#$C0
.3021	8d 1a 07	sta $071a			sta 	IFXTemp
.3024	68		pla				pla
.3025	3a		dec a				dec 	a
.3026	29 3f		and #$3f			and 	#$3F
.3028	48		pha				pha
.3029	0d 1a 07	ora $071a			ora 	IFXTemp
.302c	95 03		sta $03,x			sta 	IExp,x
.302e	68		pla				pla
.302f	60		rts				rts
.071a					IFXTemp:
>071a							.fill 	1
.3030					IFloatBufferReset:
.3030	9c 1b 07	stz $071b			stz 	IFBufferCount
.3033	9c 1c 07	stz $071c			stz 	IFBuffer
.3036	60		rts				rts
.3037					IFloatGetBufferAddress:
.3037	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.3039	a2 1c		ldx #$1c			ldx 	#(IFBuffer & $FF)
.303b	ad 1b 07	lda $071b			lda 	IFBufferCount
.303e	60		rts				rts
.303f					IFloatBufferWrite:
.303f	da		phx				phx
.3040	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.3043	9d 1c 07	sta $071c,x			sta 	IFBuffer,x
.3046	9e 1d 07	stz $071d,x			stz 	IFBuffer+1,x
.3049	ee 1b 07	inc $071b			inc 	IFBufferCount
.304c	fa		plx				plx
.304d	60		rts				rts
.304e					IFloatStripTrailingZeros:
.304e	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.3051	bd 1b 07	lda $071b,x			lda 	IFBuffer-1,x
.3054	c9 30		cmp #$30			cmp		#"0"
.3056	d0 0f		bne $3067			bne 	_IFSTExit
.3058	bd 1a 07	lda $071a,x			lda 	IFBuffer-2,x
.305b	c9 2e		cmp #$2e			cmp 	#"."
.305d	f0 08		beq $3067			beq 	_IFSTExit
.305f	ce 1b 07	dec $071b			dec 	IFBufferCount
.3062	9e 1b 07	stz $071b,x			stz 	IFBuffer-1,x
.3065	80 e7		bra $304e			bra 	IFloatStripTrailingZeros
.3067					_IFSTExit:
.3067	60		rts				rts
.071b					IFBufferCount:
>071b							.fill 	1
.071c					IFBuffer:
>071c							.fill 	25
.3068					IFloatCheck:
.3068	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative
.306a	09 40		ora #$40			ora 	#IFSign
.306c	85 0b		sta $0b				sta 	IFR0+IExp
.306e	20 a5 29	jsr $29a5			jsr 	IFloatAdd 					; add allowed to error.
.3071	a2 08		ldx #$08			ldx 	#IFR0
.3073	20 a8 2f	jsr $2fa8			jsr 	IFloatCheckZero 			; error if < 0
.3076	f0 06		beq $307e			beq 	_IFAOkay
.3078	a5 0b		lda $0b				lda 	IFR0+IExp
.307a	29 40		and #$40			and 	#IFSign
.307c	d0 01		bne $307f			bne 	_IFAFail
.307e					_IFAOkay:
.307e	60		rts				rts
.307f					_IFAFail:
.307f	38		sec				sec
.3080	68		pla				pla 								; get address - 2
.3081	e9 02		sbc #$02			sbc 	#2
.3083	aa		tax				tax
.3084	68		pla				pla
.3085	e9 00		sbc #$00			sbc 	#0
.3087	a8		tay				tay
.3088	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.308a					_IFAStop:
>308a	db						.byte 	$DB 						; display an error AA ADR ADR
.308b	80 fd		bra $308a			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
