
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$6000" -D "ENDMEMORY=\$B000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Wed Jun  7 08:34:53 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$6000					BASICCODE=$6000
=$b000					ENDMEMORY=$B000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 b0		ldy #$b0			ldy 	#ENDMEMORY >> 8
.1004	20 2b 1e	jsr $1e2b			jsr 	PGMSetBaseAddress
.1007	20 26 29	jsr $2926			jsr 	IFInitialise 				; setup math library
.100a	4c b1 13	jmp $13b1			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 0d 16	jsr $160d			jsr 	EXPEvalNumber
.1010	a2 08		ldx #$08			ldx 	#IFR0
.1012	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 4c 24	jmp $244c		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 3e 1e	jsr $1e3e			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1020	a5 23		lda $23				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 29		sta $29				sta 	freeMemory+1
.1025	20 c5 28	jsr $28c5			jsr 	VARClearHashTables
.1028	ad 16 05	lda $0516			lda 	PGMEndMemoryHigh
.102b	20 02 26	jsr $2602			jsr 	StackReset
.102e	20 61 26	jsr $2661			jsr 	StringSystemInitialise
.1031	20 63 23	jsr $2363			jsr 	ScanProcedures
.1034	60		rts				rts
.1035					AllocateMemory:
.1035	5a		phy				phy 								; save Y
.1036	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low
.1038	5a		phy				phy
.1039	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.103b	5a		phy				phy
.103c	a8		tay				tay 								; count is now in XY
.103d					_AllocateLoop:
.103d	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103f	d0 04		bne $1045			bne 	_AllocateOne
.1041	c0 00		cpy #$00			cpy 	#0
.1043	f0 15		beq $105a			beq 	_AllocateExit
.1045					_AllocateOne:
.1045	a9 00		lda #$00			lda 	#0 							; zero byte
.1047	92 28		sta ($28)			sta 	(freeMemory)
.1049	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.104b	d0 05		bne $1052			bne 	_AllocateSkipCarry
.104d	e6 29		inc $29				inc 	freeMemory+1
.104f	20 5e 10	jsr $105e			jsr 	ClearCheckMemory
.1052					_AllocateSkipCarry:
.1052	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1054	d0 01		bne $1057			bne 	_AllocateSkipBorrow
.1056	ca		dex				dex
.1057					_AllocateSkipBorrow:
.1057	88		dey				dey
.1058	80 e3		bra $103d			bra 	_AllocateLoop
.105a					_AllocateExit:
.105a	fa		plx				plx 								; restore address
.105b	68		pla				pla
.105c	7a		ply				ply 								; restore Y
.105d	60		rts				rts
.105e					ClearCheckMemory:
.105e	a5 29		lda $29				lda 	freeMemory+1
.1060	1a		inc a				inc 	a
.1061	1a		inc a				inc 	a
.1062	cd 1e 06	cmp $061e			cmp 	stringMemory+1
.1065	b0 01		bcs $1068			bcs  	_CCMError
.1067	60		rts				rts
.1068					_CCMError:
.1068	4c e6 24	jmp $24e6		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.106b					CommandDIM:
.106b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.106d	29 c0		and #$c0			and 	#$C0
.106f	c9 40		cmp #$40			cmp 	#$40
.1071	d0 39		bne $10ac			bne 	_CDSyntax
.1073	20 7c 28	jsr $287c			jsr 	VARGetInfo 					; get information
.1076	ad 26 06	lda $0626			lda 	VARType 					; check array.
.1079	29 02		and #$02			and 	#2
.107b	f0 2f		beq $10ac			beq 	_CDSyntax
.107d	20 2e 28	jsr $282e			jsr 	VARFind 					; does it already exist
.1080	b0 2d		bcs $10af			bcs 	_CDExists
.1082	20 da 27	jsr $27da			jsr 	VARCreate 					; create it - returns data ptr in XA
.1085	da		phx				phx 								; save target address
.1086	48		pha				pha
.1087	ad 26 06	lda $0626			lda 	VARType 					; type ID.
.108a	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.108c	20 b2 10	jsr $10b2			jsr 	CreateArray 				; create array to XA
.108f	84 24		sty $24				sty 	zTemp1 						; save Y
.1091	7a		ply				ply 								; restore target to zTemp0
.1092	84 22		sty $22				sty 	zTemp0
.1094	7a		ply				ply
.1095	84 23		sty $23				sty 	zTemp0+1
.1097	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.1099	a0 01		ldy #$01			ldy 	#1
.109b	8a		txa				txa
.109c	91 22		sta ($22),y			sta 	(zTemp0),y
.109e	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10a0	20 93 25	jsr $2593			jsr 	ERRCheckRParen 				; check )
.10a3	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10a5	c8		iny				iny
.10a6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a8	f0 c1		beq $106b			beq 	CommandDIM
.10aa	88		dey				dey
.10ab	60		rts				rts
.10ac					_CDSyntax:
.10ac	4c f6 23	jmp $23f6		jmp	ErrorV_syntax
.10af					_CDExists:
.10af	4c be 24	jmp $24be		jmp	ErrorV_redefine
.10b2					CreateArray:
.10b2	8d 03 05	sta $0503			sta 	CAType						; save type
.10b5	20 1f 16	jsr $161f			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10b8	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10ba	c9 99		cmp #$99			cmp 	#PR_COMMA
.10bc	f0 04		beq $10c2			beq 	_CATwoDimensions
.10be	20 0e 11	jsr $110e			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10c1	60		rts				rts
.10c2					_CATwoDimensions:
.10c2	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10c4	8d 05 05	sta $0505			sta 	CADim1+1
.10c7	a5 08		lda $08				lda 	IFR0+IM0
.10c9	8d 04 05	sta $0504			sta 	CADim1+0
.10cc	20 9b 25	jsr $259b			jsr 	ERRCheckComma 				; check comma
.10cf	20 1f 16	jsr $161f			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10d2	5a		phy				phy 								; save Y position
.10d3	18		clc				clc 								; allocate the outer array of pointers.
.10d4	ae 05 05	ldx $0505			ldx 	CADim1+1
.10d7	ad 04 05	lda $0504			lda 	CADim1
.10da	20 4d 11	jsr $114d			jsr 	CSAAllocate 				; allocate the outer array
.10dd	da		phx				phx									; save this address on the stack
.10de	48		pha				pha
.10df	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.10e1	85 26		sta $26				sta 	zTemp2
.10e3					_CACreateSubLoop:
.10e3	38		sec				sec
.10e4	20 0e 11	jsr $110e			jsr 	CreateSingleArray 			; create data array of required size.
.10e7	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10e9	91 26		sta ($26),y			sta 	(zTemp2),y
.10eb	8a		txa				txa
.10ec	c8		iny				iny
.10ed	91 26		sta ($26),y			sta 	(zTemp2),y
.10ef	18		clc				clc  								; next slot.
.10f0	a5 26		lda $26				lda 	zTemp2
.10f2	69 02		adc #$02			adc 	#2
.10f4	85 26		sta $26				sta 	zTemp2
.10f6	90 02		bcc $10fa			bcc 	_CACNoCarry
.10f8	e6 27		inc $27				inc 	zTemp2+1
.10fa					_CACNoCarry:
.10fa	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.10fd	d0 03		bne $1102			bne 	_CACNoBorrow
.10ff	ce 05 05	dec $0505			dec 	CADim1+1
.1102					_CACNoBorrow:
.1102	ce 04 05	dec $0504			dec 	CADim1
.1105	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1108	10 d9		bpl $10e3			bpl 	_CACreateSubLoop
.110a	68		pla				pla
.110b	fa		plx				plx
.110c	7a		ply				ply
.110d	60		rts				rts
.110e					CreateSingleArray:
.110e	5a		phy				phy
.110f	38		sec				sec 								; allocate memory block all zeros.
.1110	a5 08		lda $08				lda 	IFR0+IM0
.1112	a6 09		ldx $09				ldx 	IFR0+IM1
.1114	20 4d 11	jsr $114d			jsr 	CSAAllocate
.1117	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.111a	f0 2f		beq $114b			beq 	_CSANoInit
.111c	da		phx				phx 								; save address of new array
.111d	48		pha				pha
.111e	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1120	86 23		stx $23				stx 	zTemp0+1
.1122	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1124	b1 22		lda ($22),y			lda 	(zTemp0),y
.1126	a8		tay				tay
.1127	b2 22		lda ($22)			lda 	(zTemp0)
.1129	aa		tax				tax
.112a					_CSAEraseString:
.112a	5a		phy				phy
.112b	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.112d	a9 80		lda #$80			lda 	#$80
.112f	91 22		sta ($22),y			sta 	(zTemp0),y
.1131	7a		ply				ply
.1132	18		clc				clc 								; add 4 to next slot.
.1133	a5 22		lda $22				lda 	zTemp0
.1135	69 04		adc #$04			adc 	#4
.1137	85 22		sta $22				sta 	zTemp0
.1139	90 02		bcc $113d			bcc 	_CSAENoCarry
.113b	e6 23		inc $23				inc 	zTemp0+1
.113d					_CSAENoCarry:
.113d	e0 00		cpx #$00			cpx 	#0
.113f	d0 01		bne $1142			bne 	_CSANoBorrow
.1141	88		dey				dey
.1142					_CSANoBorrow:
.1142	ca		dex				dex
.1143	d0 e5		bne $112a			bne 	_CSAEraseString
.1145	c0 00		cpy #$00			cpy 	#0
.1147	d0 e1		bne $112a			bne 	_CSAEraseString
.1149	68		pla				pla
.114a	fa		plx				plx
.114b					_CSANoInit:
.114b	7a		ply				ply
.114c	60		rts				rts
.114d					CSAAllocate:
.114d	08		php				php 								; save type flag.
.114e	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.114f	d0 01		bne $1152			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1151	e8		inx				inx
.1152					_CSAANoCarry:
.1152	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1154	b0 2e		bcs $1184			bcs 	_CSARange
.1156	28		plp				plp 								; restore type flag
.1157	08		php				php 								; save it back again.
.1158	da		phx				phx 								; save size.
.1159	48		pha				pha
.115a	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.115c	90 03		bcc $1161			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.115e	0a		asl a				asl 	a
.115f	26 23		rol $23				rol 	zTemp0+1
.1161					_CSAATimes2:
.1161	0a		asl a				asl 	a
.1162	26 23		rol $23				rol 	zTemp0+1
.1164	18		clc				clc
.1165	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1167	90 02		bcc $116b			bcc 	_CSAANoCarry2
.1169	e6 23		inc $23				inc 	zTemp0+1
.116b					_CSAANoCarry2:
.116b	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.116d	20 35 10	jsr $1035			jsr 	AllocateMemory 				; allocate memory to XA
.1170	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1172	85 22		sta $22				sta 	zTemp0
.1174	68		pla				pla  								; write element count to first 2 bytes
.1175	92 22		sta ($22)			sta 	(zTemp0)
.1177	68		pla				pla 								; msb of element count
.1178	28		plp				plp 								; CC if pointer array
.1179	b0 02		bcs $117d			bcs 	_CSAAIsData
.117b	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.117d					_CSAAIsData:
.117d	a0 01		ldy #$01			ldy 	#1
.117f	91 22		sta ($22),y			sta 	(zTemp0),y
.1181	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.1183	60		rts				rts
.1184					_CSARange:
.1184	4c 07 24	jmp $2407		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.1187					Command_Doke:
.1187	38		sec				sec
.1188	80 01		bra $118b			bra 	DPCommon
.118a					Command_Poke:
.118a	18		clc				clc
.118b					DPCommon:
.118b	08		php				php 								; CS if DOKE
.118c	20 1f 16	jsr $161f			jsr 	EXPEvalInteger16 			; address
.118f	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.1191	48		pha				pha
.1192	a5 09		lda $09				lda 	IFR0+IM1
.1194	48		pha				pha
.1195	20 9b 25	jsr $259b			jsr 	ERRCheckComma 				; [dp]oke address,data
.1198	20 1f 16	jsr $161f			jsr 	EXPEvalInteger16
.119b	68		pla				pla 								; get address back
.119c	85 23		sta $23				sta 	zTemp0+1
.119e	68		pla				pla
.119f	85 22		sta $22				sta 	zTemp0
.11a1	a5 08		lda $08				lda 	IFR0+IM0
.11a3	92 22		sta ($22)			sta 	(zTemp0)
.11a5	28		plp				plp
.11a6	90 08		bcc $11b0			bcc 	_DPExit
.11a8	5a		phy				phy
.11a9	a5 09		lda $09				lda 	IFR0+IM1
.11ab	a0 01		ldy #$01			ldy 	#1
.11ad	91 22		sta ($22),y			sta 	(zTemp0),y
.11af	7a		ply				ply
.11b0					_DPExit:
.11b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11b1					Command_Input:
.11b1	a9 ff		lda #$ff			lda 	#$FF
.11b3	8d 06 05	sta $0506			sta 	InputFlag
.11b6	80 03		bra $11bb			bra 	Command_IP_Main
.11b8					Command_Print:
.11b8	9c 06 05	stz $0506			stz 	InputFlag
.11bb					Command_IP_Main:
.11bb	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11bc					_CPLoop:
.11bc	08		php				php 								; save last action flag
.11bd	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.11bf	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11c1	f0 4e		beq $1211			beq 	_CPExit 					; without consuming
.11c3	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11c5	f0 4a		beq $1211			beq 	_CPExit
.11c7	68		pla				pla 								; throw last action flag
.11c8	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.11ca	c8		iny				iny
.11cb	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11cd	f0 3f		beq $120e			beq 	_CPContinueWithSameLine
.11cf	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11d1	f0 36		beq $1209			beq 	_CPTab
.11d3	88		dey				dey 								; undo the get.
.11d4	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.11d7	10 0b		bpl $11e4			bpl	 	_CPNotInput
.11d9	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.11db	c9 40		cmp #$40			cmp 	#$40
.11dd	d0 05		bne $11e4			bne 	_CPNotInput
.11df	20 1a 12	jsr $121a			jsr 	_CPInputCode 				; input code
.11e2	80 d7		bra $11bb			bra 	Command_IP_Main 			; and go round again.
.11e4					_CPNotInput:
.11e4	20 cd 15	jsr $15cd			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11e7	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.11e9	10 14		bpl $11ff			bpl 	_CPNumber
.11eb	5a		phy				phy
.11ec	18		clc				clc 								; string address to YX
.11ed	a5 08		lda $08				lda 	IFR0+IM0
.11ef	aa		tax				tax
.11f0	a5 09		lda $09				lda 	IFR0+IM1
.11f2	a8		tay				tay
.11f3	e8		inx				inx 								; point to 1st character
.11f4	d0 01		bne $11f7			bne 	_CPNoCarry
.11f6	c8		iny				iny
.11f7					_CPNoCarry:
.11f7	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.11f9	20 4e 12	jsr $124e			jsr 	CPPrintAYX 					; print AYX
.11fc	7a		ply				ply
.11fd	80 bc		bra $11bb			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11ff					_CPNumber:
.11ff	5a		phy				phy
.1200	20 38 2d	jsr $2d38			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.1203	20 4e 12	jsr $124e			jsr 	CPPrintAYX 					; print AYX
.1206	7a		ply				ply
.1207	80 b2		bra $11bb			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1209					_CPTab:
.1209	a9 09		lda #$09			lda 	#9 							; print TAB
.120b	20 64 12	jsr $1264			jsr 	CPPrintA
.120e					_CPContinueWithSameLine:
.120e	38		sec				sec 								; loop round with carry set, which
.120f	80 ab		bra $11bc			bra 	_CPLoop 					; will inhibit final CR
.1211					_CPExit:
.1211	28		plp				plp 								; get last action flag
.1212	b0 05		bcs $1219			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1214	a9 0d		lda #$0d			lda 	#13 						; print new line
.1216	20 64 12	jsr $1264			jsr 	CPPrintA
.1219					_CPExit2:
.1219	60		rts				rts
.121a					_CPInputCode:
.121a	20 95 16	jsr $1695			jsr 	EXPTermR0 					; get the term.
.121d	5a		phy				phy 								; save position
.121e	20 61 12	jsr $1261			jsr 	CPInputA					; input a line to YX
.1221	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1223	30 18		bmi $123d			bmi 	_CPInputString
.1225	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1227	48		pha				pha
.1228	a5 09		lda $09				lda 	IFR0+IM1
.122a	48		pha				pha
.122b	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.122d	84 23		sty $23				sty 	zTemp0+1
.122f	20 77 19	jsr $1977			jsr 	VALConversionZTemp0
.1232	68		pla				pla 								; do the assign.
.1233	85 23		sta $23				sta 	zTemp0+1
.1235	68		pla				pla
.1236	85 22		sta $22				sta 	zTemp0
.1238	20 8c 12	jsr $128c			jsr 	AssignNumber
.123b	7a		ply				ply
.123c	60		rts				rts
.123d					_CPInputString:
.123d	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.123f	85 22		sta $22				sta 	zTemp0
.1241	a5 09		lda $09				lda 	IFR0+IM1
.1243	85 23		sta $23				sta 	zTemp0+1
.1245	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1247	84 09		sty $09				sty 	IFR0+IM1
.1249	20 a3 12	jsr $12a3			jsr 	AssignString 				; assign the string
.124c	7a		ply				ply 								; exit
.124d	60		rts				rts
.124e					CPPrintAYX:
.124e	86 22		stx $22				stx 	zTemp0
.1250	84 23		sty $23				sty 	zTemp0+1
.1252	aa		tax				tax
.1253	f0 0b		beq $1260			beq 	_CPPrintExit
.1255	a0 00		ldy #$00			ldy 	#0
.1257					_CPPrintAYXLoop:
.1257	b1 22		lda ($22),y			lda 	(zTemp0),y
.1259	20 64 12	jsr $1264			jsr 	CPPrintA
.125c	c8		iny				iny
.125d	ca		dex				dex
.125e	d0 f7		bne $1257			bne 	_CPPrintAYXLoop
.1260					_CPPrintExit:
.1260	60		rts				rts
.1261					CPInputA:
.1261	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.1264					CPPrintA:
.1264	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1267					CommandLET:
.1267	20 95 16	jsr $1695			jsr 	EXPTermR0 					; get term
.126a	90 6f		bcc $12db			bcc 	CLError 					; must be a reference term.
.126c	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.126e	48		pha				pha
.126f	a5 09		lda $09				lda 	IFR0+IM1
.1271	48		pha				pha
.1272	a5 0b		lda $0b				lda 	IFR0+IExp
.1274	48		pha				pha
.1275	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1277	20 a3 25	jsr $25a3			jsr 	ERRCheckA
.127a	20 cd 15	jsr $15cd			jsr 	EXPEvaluateExpression 		; right hand side.
.127d	68		pla				pla 								; type of l-expr
.127e	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1280	30 5c		bmi $12de			bmi 	CLType
.1282	fa		plx				plx 	 							; pop target address to zTemp0
.1283	86 23		stx $23				stx 	zTemp0+1
.1285	fa		plx				plx
.1286	86 22		stx $22				stx 	zTemp0
.1288					AssignData:
.1288	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.128a	30 17		bmi $12a3			bmi 	AssignString
.128c					AssignNumber:
.128c	5a		phy				phy
.128d	a0 03		ldy #$03			ldy 	#3
.128f	a5 0b		lda $0b				lda 	IFR0+IExp
.1291	91 22		sta ($22),y			sta 	(zTemp0),y
.1293	88		dey				dey
.1294	a5 0a		lda $0a				lda 	IFR0+IM2
.1296	91 22		sta ($22),y			sta 	(zTemp0),y
.1298	88		dey				dey
.1299	a5 09		lda $09				lda 	IFR0+IM1
.129b	91 22		sta ($22),y			sta 	(zTemp0),y
.129d	a5 08		lda $08				lda 	IFR0+IM0
.129f	92 22		sta ($22)			sta 	(zTemp0)
.12a1	7a		ply				ply
.12a2	60		rts				rts
.12a3					AssignString:
.12a3	5a		phy				phy
.12a4	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12a6	b1 22		lda ($22),y			lda 	(zTemp0),y
.12a8	12 22		ora ($22)			ora 	(zTemp0)
.12aa	f0 23		beq $12cf			beq 	_CLConcreteString
.12ac	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12ae	85 24		sta $24				sta 	zTemp1
.12b0	b1 22		lda ($22),y			lda 	(zTemp0),y
.12b2	85 25		sta $25				sta 	zTemp1+1
.12b4	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.12b6	38		sec				sec 								; we want 3 for slot size, status, string size.
.12b7	e9 03		sbc #$03			sbc 	#3
.12b9	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.12bb	90 12		bcc $12cf			bcc 	_CLConcreteString 			; if so, concrete the string again.
.12bd	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.12bf	1a		inc a				inc 	a
.12c0	aa		tax				tax
.12c1	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.12c3					_CLReplaceString:
.12c3	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.12c5	c8		iny				iny
.12c6	c8		iny				iny
.12c7	91 24		sta ($24),y			sta 	(zTemp1),y
.12c9	88		dey				dey
.12ca	ca		dex				dex
.12cb	d0 f6		bne $12c3			bne 	_CLReplaceString
.12cd	80 0a		bra $12d9			bra 	_CLExit
.12cf					_CLConcreteString:
.12cf	20 16 26	jsr $2616			jsr 	StringConcrete  			; concreted string in XA.
.12d2	a0 01		ldy #$01			ldy 	#1 							; store the address
.12d4	92 22		sta ($22)			sta 	(zTemp0)
.12d6	8a		txa				txa
.12d7	91 22		sta ($22),y			sta 	(zTemp0),y
.12d9					_CLExit:
.12d9	7a		ply				ply
.12da	60		rts				rts
.12db					CLError:
.12db	4c 29 25	jmp $2529		jmp	ErrorV_variable
.12de					CLType:
.12de	4c 26 24	jmp $2426		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.12e1					Command_LIST:
.12e1	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.12e4	9c 08 05	stz $0508			stz 	CLFrom+1
.12e7	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.12e9	c9 99		cmp #$99			cmp 	#PR_COMMA
.12eb	f0 1d		beq $130a			beq 	_CLToLine
.12ed	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12ef	f0 37		beq $1328			beq 	_CLDefaultTo
.12f1	20 1f 16	jsr $161f			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.12f4	a5 08		lda $08				lda 	IFR0+IM0
.12f6	8d 07 05	sta $0507			sta 	CLFrom
.12f9	8d 09 05	sta $0509			sta 	CLTo
.12fc	a5 09		lda $09				lda 	IFR0+IM1
.12fe	8d 08 05	sta $0508			sta 	CLFrom+1
.1301	8d 0a 05	sta $050a			sta 	CLTo+1
.1304	b1 18		lda ($18),y			lda 	(codePtr),y
.1306	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1308	f0 26		beq $1330			beq 	_CLList
.130a					_CLToLine:
.130a	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.130c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.130e	f0 18		beq $1328			beq 	_CLDefaultTo
.1310	20 9b 25	jsr $259b			jsr 	ERRCheckComma 				; sep comma
.1313	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1315	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1317	f0 0f		beq $1328			beq 	_CLDefaultTo
.1319	20 1f 16	jsr $161f			jsr 	EXPEvalInteger16 			; there's a To value.
.131c	a5 08		lda $08				lda 	IFR0+IM0
.131e	8d 09 05	sta $0509			sta 	CLTo
.1321	a5 09		lda $09				lda 	IFR0+IM1
.1323	8d 0a 05	sta $050a			sta 	CLTo+1
.1326	80 08		bra $1330			bra 	_CLList
.1328					_CLDefaultTo:
.1328	a9 ff		lda #$ff			lda 	#$FF
.132a	8d 09 05	sta $0509			sta 	CLTo
.132d	8d 0a 05	sta $050a			sta 	CLTo+1
.1330					_CLList:
.1330	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.1333	85 19		sta $19				sta 	codePtr+1
.1335	64 18		stz $18				stz 	codePtr
.1337	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1339	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.133b	20 8d 1c	jsr $1c8d			jsr 	TOKSetDetokeniseOutput
.133e					_CLLoop:
.133e	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1340	f0 4a		beq $138c			beq 	_CLExit
.1342	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1345	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1348	d0 45		bne $138f			bne 	_CLBreak
.134a	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.134c	20 92 13	jsr $1392			jsr 	_CLCompareLine
.134f	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1351	f0 2c		beq $137f			beq 	_CLNext
.1353	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1355	20 92 13	jsr $1392			jsr 	_CLCompareLine
.1358	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.135a	f0 23		beq $137f			beq 	_CLNext
.135c	a0 02		ldy #$02			ldy 	#2 							; print line #
.135e	b1 18		lda ($18),y			lda 	(codePtr),y
.1360	aa		tax				tax
.1361	88		dey				dey
.1362	b1 18		lda ($18),y			lda 	(codePtr),y
.1364	20 f4 26	jsr $26f4			jsr 	WriteIntXA
.1367	a9 20		lda #$20			lda 	#32
.1369	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.136c	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.136e	a5 18		lda $18				lda 	codePtr
.1370	18		clc				clc
.1371	69 03		adc #$03			adc 	#3
.1373	aa		tax				tax
.1374	90 01		bcc $1377			bcc 	_CLNoCarry2
.1376	c8		iny				iny
.1377					_CLNoCarry2:
.1377	20 48 1c	jsr $1c48			jsr 	TOKDetokenise
.137a	a9 0d		lda #$0d			lda 	#13	 						; next line
.137c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.137f					_CLNext:
.137f	18		clc				clc 								; advance to next line.
.1380	b2 18		lda ($18)			lda 	(codePtr)
.1382	65 18		adc $18				adc 	codePtr
.1384	85 18		sta $18				sta 	codePtr
.1386	90 02		bcc $138a			bcc 	_CLNoCarry
.1388	e6 19		inc $19				inc 	codePtr+1
.138a					_CLNoCarry:
.138a	80 b2		bra $133e			bra 	_CLLoop
.138c					_CLExit:
.138c	4c 13 27	jmp $2713			jmp 	WarmStart
.138f					_CLBreak:
.138f	4c 81 25	jmp $2581		jmp	ErrorV_break
.1392					_CLCompareLine:
.1392	a0 01		ldy #$01			ldy 	#1
.1394	38		sec				sec
.1395	b1 18		lda ($18),y			lda 	(codePtr),y
.1397	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.139a	85 22		sta $22				sta 	zTemp0
.139c	c8		iny				iny
.139d	b1 18		lda ($18),y			lda 	(codePtr),y
.139f	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13a2	90 0a		bcc $13ae			bcc 	_CLIsNegative
.13a4	d0 05		bne $13ab			bne 	_CLIsPositive
.13a6	a5 22		lda $22				lda 	zTemp0
.13a8	d0 01		bne $13ab			bne 	_CLIsPositive
.13aa	60		rts				rts
.13ab					_CLIsPositive:
.13ab	a9 01		lda #$01			lda 	#1
.13ad	60		rts				rts
.13ae					_CLIsNegative:
.13ae	a9 ff		lda #$ff			lda 	#255
.13b0	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.13b1					Command_NEW:
.13b1	20 32 1e	jsr $1e32			jsr 	PGMNewProgram
.13b4	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.13b7	4c 32 14	jmp $1432			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.13ba					Command_REM:
.13ba					Command_REM2:
.13ba	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.13bc	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.13be	d0 06		bne $13c6			bne 	_CRExit
.13c0	c8		iny				iny 								; skip over it, it's a comment.
.13c1	98		tya				tya
.13c2	38		sec				sec
.13c3	71 18		adc ($18),y			adc 	(codePtr),y
.13c5	a8		tay				tay
.13c6					_CRExit:
.13c6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.13c7					Command_RUN:
.13c7	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.13ca	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.13cd	85 19		sta $19				sta 	codePtr+1
.13cf	64 18		stz $18				stz 	codePtr
.13d1	80 0b		bra $13de			bra 	RUNNewLine
.13d3					RUNEndOfLine:
.13d3	18		clc				clc 								; advance to next line.
.13d4	b2 18		lda ($18)			lda 	(codePtr)
.13d6	65 18		adc $18				adc 	codePtr
.13d8	85 18		sta $18				sta 	codePtr
.13da	90 02		bcc $13de			bcc 	_RELNoCarry
.13dc	e6 19		inc $19				inc 	codePtr+1
.13de					_RELNoCarry:
.13de					RUNNewLine:
.13de	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.13e0	9a		txs				txs
.13e1	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.13e3	f0 4d		beq $1432			beq 	Command_END
.13e5	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.13e7	b1 18		lda ($18),y			lda 	(codePtr),y
.13e9	8d 21 06	sta $0621			sta 	ERRLine
.13ec	c8		iny				iny
.13ed	b1 18		lda ($18),y			lda 	(codePtr),y
.13ef	8d 22 06	sta $0622			sta 	ERRLine+1
.13f2	c8		iny				iny 								; offset into codePtr for start of line.
.13f3					RUNNewCommand:
.13f3	9c 1c 06	stz $061c			stz 	stringInitialised 			; reset string system.
.13f6	ce 0b 05	dec $050b			dec 	checkCounter
.13f9	d0 0a		bne $1405			bne 	_RNCNoCheck
.13fb	5a		phy				phy 								; keyboard check.
.13fc	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.13ff	7a		ply				ply
.1400	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1403	d0 1e		bne $1423			bne 	_RUNBreak
.1405					_RNCNoCheck:
.1405	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1407	10 1d		bpl $1426			bpl		_RUNNotToken 				; probably an identifier
.1409	c8		iny				iny 								; consume token
.140a	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.140c	f0 e5		beq $13f3			beq 	RUNNewCommand
.140e	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1410	b0 0e		bcs $1420			bcs 	_RUNSyntax
.1412	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1414	90 0a		bcc $1420			bcc 	_RUNSyntax
.1416	0a		asl a				asl 	a 							; double into X.
.1417	aa		tax				tax
.1418	20 1d 14	jsr $141d			jsr 	_RUNDispatchMain			; call the main dispatcher
.141b	80 d6		bra $13f3			bra 	RUNNewCommand
.141d					_RUNDispatchMain:
.141d	7c 48 1b	jmp ($1b48,x)			jmp 	(VectorTable,x)
.1420					_RUNSyntax:
.1420	4c f6 23	jmp $23f6		jmp	ErrorV_syntax
.1423					_RUNBreak:
.1423	4c 81 25	jmp $2581		jmp	ErrorV_break
.1426					_RUNNotToken:
.1426	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1428	90 f6		bcc $1420			bcc 	_RUNSyntax
.142a	20 67 12	jsr $1267			jsr 	CommandLET 					; assignment
.142d	80 c4		bra $13f3			bra 	RUNNewCommand 				; loop round.
.142f					Command_Shift_Handler:
.142f	4c 38 24	jmp $2438		jmp	ErrorV_unimplemented
.1432					Command_END:
.1432	4c 13 27	jmp $2713			jmp 	WarmStart
.050b					checkCounter:
>050b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1435					Command_STOP:
.1435	4c 9a 24	jmp $249a		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1438					Command_Sys:
.1438	20 1f 16	jsr $161f			jsr 	EXPEvalInteger16 			; execution address
.143b	5a		phy				phy
.143c	ad 69 06	lda $0669			lda 	('A'-'A')*4 + FastVariables ; load AXY
.143f	ae c5 06	ldx $06c5			ldx 	('X'-'A')*4 + FastVariables
.1442	ac c9 06	ldy $06c9			ldy 	('Y'-'A')*4 + FastVariables
.1445	20 4a 14	jsr $144a			jsr 	_CSCallIFR0 				; call the code
.1448	7a		ply				ply
.1449	60		rts				rts
.144a					_CSCallIFR0:
.144a	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.144d					NoExec01:
.144d					NoExec02:
.144d					NoExec03:
.144d					NoExec04:
.144d					NoExec05:
.144d					NoExec06:
.144d					NoExec07:
.144d					NoExec08:
.144d	4c f6 23	jmp $23f6		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1450					EXPBinAdd:
.1450	24 0b		bit $0b				bit 	IFR0+IExp
.1452	30 6f		bmi $14c3			bmi 	EXPConcatenate
.1454	a2 0c		ldx #$0c			ldx 	#IFR1
.1456	4c 31 29	jmp $2931			jmp 	IFloatAdd
.1459					EXPBinSub:
.1459	24 0b		bit $0b				bit 	IFR0+IExp
.145b	30 3f		bmi $149c			bmi 	EXPTypeError
.145d	a2 0c		ldx #$0c			ldx 	#IFR1
.145f	4c 2a 29	jmp $292a			jmp 	IFloatSubtract
.1462					EXPBinMul:
.1462	24 0b		bit $0b				bit 	IFR0+IExp
.1464	30 36		bmi $149c			bmi 	EXPTypeError
.1466	a2 0c		ldx #$0c			ldx 	#IFR1
.1468	4c db 29	jmp $29db			jmp 	IFloatMultiply
.146b					EXPBinFDiv:
.146b	24 0b		bit $0b				bit 	IFR0+IExp
.146d	30 2d		bmi $149c			bmi 	EXPTypeError
.146f	a2 0c		ldx #$0c			ldx 	#IFR1
.1471	20 5e 2c	jsr $2c5e			jsr 	IFloatDivideFloat
.1474	b0 0f		bcs $1485			bcs 	EXPDZero
.1476	60		rts				rts
.1477					EXPBinIDiv:
.1477	24 0b		bit $0b				bit 	IFR0+IExp
.1479	30 21		bmi $149c			bmi 	EXPTypeError
.147b	a2 0c		ldx #$0c			ldx 	#IFR1
.147d	20 5e 2c	jsr $2c5e			jsr 	IFloatDivideFloat
.1480	b0 03		bcs $1485			bcs 	EXPDZero
.1482	4c 3b 2c	jmp $2c3b			jmp 	IFloatIntegerR0
.1485					EXPDZero:
.1485	4c 6f 24	jmp $246f		jmp	ErrorV_divzero
.1488					EXPBinIMod:
.1488	24 0b		bit $0b				bit 	IFR0+IExp
.148a	30 10		bmi $149c			bmi 	EXPTypeError
.148c	a2 0c		ldx #$0c			ldx 	#IFR1
.148e	5a		phy				phy
.148f	20 73 2b	jsr $2b73			jsr 	IFPreProcessBitwise 		; set up everything.
.1492	d0 05		bne $1499			bne 	EXPDRange
.1494	20 ac 2a	jsr $2aac			jsr 	IFloatModulusInteger
.1497	7a		ply				ply
.1498	60		rts				rts
.1499					EXPDRange:
.1499	4c 07 24	jmp $2407		jmp	ErrorV_range
.149c					EXPTypeError:
.149c	4c 26 24	jmp $2426		jmp	ErrorV_type
.149f					EXPBinAnd:
.149f	24 0b		bit $0b				bit 	IFR0+IExp
.14a1	30 f9		bmi $149c			bmi 	EXPTypeError
.14a3	a2 0c		ldx #$0c			ldx 	#IFR1
.14a5	20 2e 2b	jsr $2b2e			jsr 	IFloatBitwiseAnd
.14a8	b0 ef		bcs $1499			bcs 	EXPDRange
.14aa	60		rts				rts
.14ab					EXPBinOr:
.14ab	24 0b		bit $0b				bit 	IFR0+IExp
.14ad	30 ed		bmi $149c			bmi 	EXPTypeError
.14af	a2 0c		ldx #$0c			ldx 	#IFR1
.14b1	20 45 2b	jsr $2b45			jsr 	IFloatBitwiseOr
.14b4	b0 e3		bcs $1499			bcs 	EXPDRange
.14b6	60		rts				rts
.14b7					EXPBinXor:
.14b7	24 0b		bit $0b				bit 	IFR0+IExp
.14b9	30 e1		bmi $149c			bmi 	EXPTypeError
.14bb	a2 0c		ldx #$0c			ldx 	#IFR1
.14bd	20 5c 2b	jsr $2b5c			jsr 	IFloatBitwiseXor
.14c0	b0 d7		bcs $1499			bcs 	EXPDRange
.14c2	60		rts				rts
.14c3					EXPConcatenate:
.14c3	18		clc				clc
.14c4	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.14c6	72 0c		adc ($0c)			adc 	(IFR1)
.14c8	b0 2d		bcs $14f7			bcs 	_EXPCError
.14ca	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.14cc	da		phx				phx
.14cd	a6 09		ldx $09				ldx 	IFR0+1
.14cf	da		phx				phx
.14d0	20 89 26	jsr $2689			jsr 	StringTempAllocate 			; allocate string, set up return
.14d3	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.14d5	a5 0c		lda $0c				lda 	IFR1
.14d7	20 e0 14	jsr $14e0			jsr 	_EXPCCopyXA
.14da	fa		plx				plx 								; copy second string
.14db	68		pla				pla
.14dc	20 e0 14	jsr $14e0			jsr 	_EXPCCopyXA
.14df	60		rts				rts
.14e0					_EXPCCopyXA:
.14e0	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.14e2	85 22		sta $22				sta 	zTemp0
.14e4	b2 22		lda ($22)			lda 	(zTemp0)					; length
.14e6	f0 0e		beq $14f6			beq 	_EXPCCExit 					; nothing.
.14e8	aa		tax				tax 								; count
.14e9	5a		phy				phy 								; start positioin
.14ea	a0 01		ldy #$01			ldy 	#1
.14ec					_EXPCCLoop:
.14ec	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.14ee	20 be 26	jsr $26be			jsr 	StringTempWrite
.14f1	c8		iny				iny
.14f2	ca		dex				dex
.14f3	d0 f7		bne $14ec			bne 	_EXPCCLoop
.14f5	7a		ply				ply
.14f6					_EXPCCExit:
.14f6	60		rts				rts
.14f7					_EXPCError:
.14f7	4c 13 25	jmp $2513		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.14fa					EXPReturnTrue:
.14fa	a2 08		ldx #$08			ldx 	#IFR0
.14fc	a9 01		lda #$01			lda 	#1
.14fe	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.1501	20 46 2f	jsr $2f46			jsr 	IFloatNegate
.1504	60		rts				rts
.1505					EXPReturnFalse:
.1505	a2 08		ldx #$08			ldx 	#IFR0
.1507	4c 3b 2f	jmp $2f3b			jmp 	IFloatSetZero
.150a					EXPCompareEqual:
.150a	20 40 15	jsr $1540			jsr 	EXPCompareBaseCode
.150d	c9 00		cmp #$00			cmp 	#0
.150f	f0 e9		beq $14fa			beq 	EXPReturnTrue
.1511	80 f2		bra $1505			bra 	EXPReturnFalse
.1513					EXPCompareLess:
.1513	20 40 15	jsr $1540			jsr 	EXPCompareBaseCode
.1516	c9 ff		cmp #$ff			cmp 	#$FF
.1518	f0 e0		beq $14fa			beq 	EXPReturnTrue
.151a	80 e9		bra $1505			bra 	EXPReturnFalse
.151c					EXPCompareGreater:
.151c	20 40 15	jsr $1540			jsr 	EXPCompareBaseCode
.151f	c9 01		cmp #$01			cmp 	#1
.1521	f0 d7		beq $14fa			beq 	EXPReturnTrue
.1523	80 e0		bra $1505			bra 	EXPReturnFalse
.1525					EXPCompareNotEqual:
.1525	20 40 15	jsr $1540			jsr 	EXPCompareBaseCode
.1528	c9 00		cmp #$00			cmp 	#0
.152a	d0 ce		bne $14fa			bne 	EXPReturnTrue
.152c	80 d7		bra $1505			bra 	EXPReturnFalse
.152e					EXPCompareLessEqual:
.152e	20 40 15	jsr $1540			jsr 	EXPCompareBaseCode
.1531	c9 01		cmp #$01			cmp 	#1
.1533	d0 c5		bne $14fa			bne 	EXPReturnTrue
.1535	80 ce		bra $1505			bra 	EXPReturnFalse
.1537					EXPCompareGreaterEqual:
.1537	20 40 15	jsr $1540			jsr 	EXPCompareBaseCode
.153a	c9 ff		cmp #$ff			cmp 	#$FF
.153c	d0 bc		bne $14fa			bne 	EXPReturnTrue
.153e	80 c5		bra $1505			bra 	EXPReturnFalse
.1540					EXPCompareBaseCode:
.1540	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1542	30 10		bmi $1554			bmi 	_EXCBCString
.1544	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1546	20 09 2c	jsr $2c09			jsr 	IFloatCompare
.1549	a5 08		lda $08				lda 	IFR0+IM0
.154b	f0 06		beq $1553			beq 	_EXCBCExit 					; return 0 if zero
.154d	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.154f	50 02		bvc $1553			bvc 	_EXCBCExit
.1551	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1553					_EXCBCExit:
.1553	60		rts				rts
.1554					_EXCBCString:
.1554	5a		phy				phy
.1555	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1557	d2 0c		cmp ($0c)			cmp 	(IFR1)
.1559	90 02		bcc $155d			bcc 	_EXCBCSmaller
.155b	b2 0c		lda ($0c)			lda 	(IFR1)
.155d					_EXCBCSmaller:
.155d	aa		tax				tax
.155e	f0 0d		beq $156d			beq 	_EXCBCMatches 				; if zero common length matches
.1560	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1562					_EXCBCCheckSmallerMatches:
.1562	c8		iny				iny 								; compare directly as far as common length
.1563	38		sec				sec
.1564	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1566	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1568	d0 08		bne $1572			bne 	_EXCBCExit2
.156a	ca		dex				dex
.156b	d0 f5		bne $1562			bne 	_EXCBCCheckSmallerMatches
.156d					_EXCBCMatches:
.156d	38		sec				sec
.156e	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1570	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1572					_EXCBCExit2:
.1572	7a		ply				ply
.1573	c9 00		cmp #$00			cmp 	#0
.1575	f0 04		beq $157b			beq 	_EXCBCReturn
.1577	30 03		bmi $157c			bmi 	_EXCBCFF
.1579	a9 01		lda #$01			lda 	#1
.157b					_EXCBCReturn:
.157b	60		rts				rts
.157c					_EXCBCFF:
.157c	a9 ff		lda #$ff			lda 	#$FF
.157e	60		rts				rts
.157f					_EXCBCRange:
.157f	4c 07 24	jmp $2407		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1582					EXPBinLeft:
.1582	a9 ff		lda #$ff			lda 	#$FF
.1584	8d 0c 05	sta $050c			sta 	EXPShiftLeftFlag
.1587	4c 8d 15	jmp $158d			jmp 	EXPShiftCommon
.158a					EXPBinRight:
.158a	9c 0c 05	stz $050c			stz 	EXPShiftLeftFlag
.158d					EXPShiftCommon:
.158d	a5 0b		lda $0b				lda 	IFR0+IExp 					; both integers
.158f	05 0f		ora $0f				ora 	IFR1+IExp
.1591	29 7f		and #$7f			and 	#$7F
.1593	d0 35		bne $15ca			bne 	_EXPSRange
.1595	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1597	29 e0		and #$e0			and 	#$E0
.1599	05 09		ora $09				ora 	IFR0+IM1
.159b	05 0a		ora $0a				ora 	IFR0+IM2
.159d	d0 25		bne $15c4			bne 	_EXPSShiftZero 				; if so return zero
.159f	5a		phy				phy
.15a0	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.15a2	29 1f		and #$1f			and 	#$1F
.15a4	f0 17		beq $15bd			beq 	_EXPSExit 					; exit if zero
.15a6	a8		tay				tay
.15a7					_EXPSLoop:
.15a7	a2 0c		ldx #$0c			ldx 	#IFR1
.15a9	2c 0c 05	bit $050c			bit 	EXPShiftLeftFlag
.15ac	30 05		bmi $15b3			bmi 	_EXPSShiftLeft
.15ae	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftRight
.15b1	80 07		bra $15ba			bra 	_EXPSContinue
.15b3					_EXPSShiftLeft:
.15b3	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.15b6	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts
.15b8	30 10		bmi $15ca			bmi 	_EXPSRange
.15ba					_EXPSContinue:
.15ba	88		dey				dey
.15bb	d0 ea		bne $15a7			bne 	_EXPSLoop
.15bd					_EXPSExit:
.15bd	a2 0c		ldx #$0c			ldx 	#IFR1
.15bf	20 cc 2e	jsr $2ecc			jsr 	IFloatCopyFromRegister
.15c2	7a		ply				ply
.15c3	60		rts				rts
.15c4					_EXPSShiftZero:
.15c4	a2 08		ldx #$08			ldx 	#IFR0
.15c6	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.15c9	60		rts				rts
.15ca					_EXPSRange:
.15ca	4c 07 24	jmp $2407		jmp	ErrorV_range
.050c					EXPShiftLeftFlag:
>050c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.15cd					EXPEvaluateExpression:
.15cd	a9 00		lda #$00			lda 	#0 							; current precedence
.15cf					EXPEvaluateExpressionPrecedenceA:
.15cf	48		pha				pha
.15d0	20 4a 16	jsr $164a			jsr 	EXPTermValueR0				; do first term.
.15d3					_EELoop:
.15d3	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.15d5	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.15d7	90 31		bcc $160a			bcc 	_EEExit
.15d9	aa		tax				tax 								; access the precedence of the operator.
.15da	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.15db	dd a0 18	cmp $18a0,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.15de	b0 2b		bcs $160b			bcs 	_EEExit2
.15e0	48		pha				pha 								; save current precedence.
.15e1	da		phx				phx 								; save operator
.15e2	c8		iny				iny 								; consume operator
.15e3	da		phx				phx
.15e4	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.15e6	20 8a 2e	jsr $2e8a			jsr 	IFloatPushRx
.15e9	fa		plx				plx
.15ea	bd a0 18	lda $18a0,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.15ed	20 cf 15	jsr $15cf			jsr 	EXPEvaluateExpressionPrecedenceA
.15f0	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.15f2	20 ab 2e	jsr $2eab			jsr 	IFloatPullRx
.15f5	fa		plx				plx 								; operator
.15f6	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.15f8	45 0f		eor $0f				eor 	IFR1+IExp
.15fa	30 08		bmi $1604			bmi 	_EEType
.15fc					_EETypeOkay:
.15fc	8a		txa				txa
.15fd	0a		asl a				asl 	a 							; double -> X
.15fe	aa		tax				tax
.15ff	20 07 16	jsr $1607			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1602	80 cf		bra $15d3			bra 	_EELoop
.1604					_EEType:
.1604	4c 26 24	jmp $2426		jmp	ErrorV_type
.1607					_EECallBinary:
.1607	7c 48 1b	jmp ($1b48,x)			jmp 	(VectorTable,x)
.160a					_EEExit:
.160a	68		pla				pla 								; throw precedence
.160b					_EEExit2:
.160b	18		clc				clc
.160c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.160d					EXPEvalNumber:
.160d	20 cd 15	jsr $15cd			jsr 	EXPEvaluateExpression
.1610	24 0b		bit $0b				bit 	IFR0+IExp
.1612	30 01		bmi $1615			bmi 	EVUType
.1614	60		rts				rts
.1615					EVUType:
.1615	4c 26 24	jmp $2426		jmp	ErrorV_type
.1618					EXPEvalInteger:
.1618	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.161b	20 3b 2c	jsr $2c3b			jsr 	IFloatIntegerR0
.161e	60		rts				rts
.161f					EXPEvalInteger16:
.161f	20 18 16	jsr $1618			jsr 	EXPEvalInteger
.1622	a5 0a		lda $0a				lda 	IFR0+IM2
.1624	d0 21		bne $1647			bne 	EVURange
.1626	a6 09		ldx $09				ldx 	IFR0+IM1
.1628	a5 08		lda $08				lda 	IFR0+IM0
.162a	60		rts				rts
.162b					EXPEvalInteger8:
.162b	20 18 16	jsr $1618			jsr 	EXPEvalInteger
.162e	a5 0a		lda $0a				lda 	IFR0+IM2
.1630	05 09		ora $09				ora 	IFR0+IM1
.1632	d0 13		bne $1647			bne 	EVURange
.1634	a5 08		lda $08				lda 	IFR0+IM0
.1636	60		rts				rts
.1637					EXPEvalString:
.1637	20 cd 15	jsr $15cd			jsr 	EXPEvaluateExpression
.163a	24 0b		bit $0b				bit 	IFR0+IExp
.163c	10 d7		bpl $1615			bpl 	EVUType
.163e	a6 09		ldx $09				ldx 	IFR0+IM1
.1640	86 23		stx $23				stx 	zTemp0+1
.1642	a5 08		lda $08				lda 	IFR0+IM0
.1644	85 22		sta $22				sta 	zTemp0
.1646	60		rts				rts
.1647					EVURange:
.1647	4c 07 24	jmp $2407		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.164a					EXPTermValueR0:
.164a	20 95 16	jsr $1695			jsr 	EXPTermR0 					; get term
.164d	90 45		bcc $1694			bcc 	_ETVNotReference 			; exit if value.
.164f	5a		phy				phy
.1650	a0 03		ldy #$03			ldy 	#3 							; get type
.1652	b1 08		lda ($08),y			lda 	(IFR0),y
.1654	30 14		bmi $166a			bmi 	_ETVDereferenceString
.1656	85 0b		sta $0b				sta 	IFR0+IExp 					; dereference to R0
.1658	88		dey				dey
.1659	b1 08		lda ($08),y			lda 	(IFR0),y
.165b	85 0a		sta $0a				sta 	IFR0+IM2
.165d	88		dey				dey
.165e	b1 08		lda ($08),y			lda 	(IFR0),y
.1660	aa		tax				tax
.1661	b2 08		lda ($08)			lda 	(IFR0)
.1663	86 09		stx $09				stx 	IFR0+IM1
.1665	85 08		sta $08				sta 	IFR0+IM0
.1667	7a		ply				ply
.1668	18		clc				clc
.1669	60		rts				rts
.166a					_ETVDereferenceString:
.166a	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.166c	b1 08		lda ($08),y			lda 	(IFR0),y
.166e	12 08		ora ($08)			ora 	(IFR0)
.1670	f0 11		beq $1683			beq 	_ETVNull
.1672	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1674	aa		tax				tax
.1675	b2 08		lda ($08)			lda 	(IFR0)
.1677	18		clc				clc 								; add two so points to actual string.
.1678	69 02		adc #$02			adc 	#2
.167a	90 01		bcc $167d			bcc 	_EVDSNoCarry
.167c	e8		inx				inx
.167d					_EVDSNoCarry:
.167d	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.167f	85 08		sta $08				sta 	IFR0
.1681	80 08		bra $168b			bra 	_ETVFillExit 				; tidy up and exit.
.1683					_ETVNull:
.1683	a9 93		lda #$93			lda 	#_EVTNString & $FF
.1685	85 08		sta $08				sta 	IFR0+IM0
.1687	a9 16		lda #$16			lda 	#_EVTNString >> 8
.1689	85 09		sta $09				sta 	IFR0+IM1
.168b					_ETVFillExit:
.168b	64 0a		stz $0a				stz 	IFR0+IM2
.168d	a9 80		lda #$80			lda 	#$80
.168f	85 0b		sta $0b				sta 	IFR0+IExp
.1691	7a		ply				ply
.1692	60		rts				rts
.1693					_EVTNString:
>1693	00						.byte 	0
.1694					_ETVNotReference:
.1694	60		rts				rts
.1695					EXPTermR0:
.1695	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1697	30 10		bmi $16a9			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1699	c8		iny				iny 								; consume element
.169a	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.169c	b0 08		bcs $16a6			bcs 	_ETMIdentifier
.169e	20 cd 16	jsr $16cd			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.16a1	20 00 17	jsr $1700			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.16a4	18		clc				clc 								; return value
.16a5	60		rts				rts
.16a6					_ETMIdentifier:
.16a6	4c d2 28	jmp $28d2			jmp 	VARCheckSimple 				; check simple variables A-Z
.16a9					_ETMIsUnaryOrMinus:
.16a9	c8		iny				iny 								; consume element
.16aa	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.16ac	d0 0a		bne $16b8			bne 	_ETMCheckUnary
.16ae	20 4a 16	jsr $164a			jsr 	EXPTermValueR0 				; get a term to negate
.16b1	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.16b3	20 46 2f	jsr $2f46			jsr 	IFloatNegate
.16b6	18		clc				clc
.16b7	60		rts				rts
.16b8					_ETMCheckUnary:
.16b8	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.16ba	90 0e		bcc $16ca			bcc 	_ETMUnarySyntax
.16bc	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.16be	b0 0a		bcs $16ca			bcs 	_ETMUnarySyntax
.16c0	0a		asl a				asl 	a
.16c1	aa		tax				tax
.16c2	20 c7 16	jsr $16c7			jsr 	_ETMCallUnaryFunction
.16c5	18		clc				clc
.16c6	60		rts				rts
.16c7					_ETMCallUnaryFunction:
.16c7	7c 48 1b	jmp ($1b48,x)			jmp 	(VectorTable,x)
.16ca					_ETMUnarySyntax:
.16ca	4c f6 23	jmp $23f6		jmp	ErrorV_syntax
.16cd					EXPExtractTokenisedInteger:
.16cd	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.16cf	64 0b		stz $0b				stz 	IFR0+IExp
.16d1	64 09		stz $09				stz 	IFR0+IM1
.16d3	64 0a		stz $0a				stz 	IFR0+IM2
.16d5					_ETMConstant:
.16d5	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.16d7	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.16d9	b0 24		bcs $16ff			bcs 	_ETMCExit 					; no.
.16db	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.16dd	a5 09		lda $09				lda 	IFR0+IM1
.16df	85 0a		sta $0a				sta 	IFR0+IM2
.16e1	a5 08		lda $08				lda 	IFR0+IM0
.16e3	85 09		sta $09				sta 	IFR0+IM1
.16e5	64 08		stz $08				stz 	IFR0+IM0
.16e7	8a		txa				txa
.16e8	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.16e9	66 0a		ror $0a				ror 	IFR0+IM2
.16eb	66 09		ror $09				ror 	IFR0+IM1
.16ed	66 08		ror $08				ror 	IFR0+IM0
.16ef	4a		lsr a				lsr 	a
.16f0	66 0a		ror $0a				ror 	IFR0+IM2
.16f2	66 09		ror $09				ror 	IFR0+IM1
.16f4	66 08		ror $08				ror 	IFR0+IM0
.16f6	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.16f8	11 18		ora ($18),y			ora 	(codePtr),y
.16fa	85 08		sta $08				sta 	IFR0+IM0
.16fc	c8		iny				iny 								; consume, loop back
.16fd	80 d6		bra $16d5			bra 	_ETMConstant
.16ff					_ETMCExit:
.16ff	60		rts				rts
.1700					EXPCheckDecimalFollows:
.1700	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1702	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1704	d0 19		bne $171f			bne 	_ETMCDExit
.1706	c8		iny				iny 								; consume token.
.1707	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1709	5a		phy				phy									; save current position
.170a	48		pha				pha 								; save count of chars.
.170b	38		sec				sec 								; address into YX : y + codePtr+1
.170c	98		tya				tya
.170d	65 18		adc $18				adc 	codePtr
.170f	aa		tax				tax
.1710	a5 19		lda $19				lda 	codePtr+1
.1712	69 00		adc #$00			adc 	#0
.1714	a8		tay				tay
.1715	68		pla				pla 								; get count.
.1716	20 df 2d	jsr $2ddf			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1719	7a		ply				ply 								; go to next token.
.171a	98		tya				tya
.171b	38		sec				sec
.171c	71 18		adc ($18),y			adc 	(codePtr),y
.171e	a8		tay				tay
.171f					_ETMCDExit:
.171f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1720					EXPUnaryAbs:
.1720	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 					; number to R0
.1723	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.1726	20 7f 2b	jsr $2b7f			jsr 	IFloatAbsoluteR0
.1729	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.172a					EXPUnaryAsc:
.172a	20 37 16	jsr $1637			jsr 	EXPEvalString 					; string to R0, zTemp0
.172d	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.1730	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1732	f0 06		beq $173a			beq 	_EXAZero 						; if so return 0
.1734	5a		phy				phy 									; otherwise get first character
.1735	a0 01		ldy #$01			ldy 	#1
.1737	b1 22		lda ($22),y			lda 	(zTemp0),y
.1739	7a		ply				ply
.173a					_EXAZero:
.173a	a2 08		ldx #$08			ldx 	#IFR0
.173c	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.173f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1740					EXPUnaryChr:
.1740	20 2b 16	jsr $162b			jsr 	EXPEvalInteger8 				; expr
.1743	48		pha				pha 									; push on stack
.1744	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.1747	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1749	20 89 26	jsr $2689			jsr 	StringTempAllocate
.174c	68		pla				pla
.174d	20 be 26	jsr $26be			jsr 	StringTempWrite
.1750	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1751					EXPUnaryDec:
.1751	20 37 16	jsr $1637			jsr 	EXPEvalString 					; string to R0, zTemp0
.1754	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.1757	5a		phy				phy
.1758	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.175a	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.175d	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.175f	f0 3b		beq $179c			beq 	_EUDError 						; empty string
.1761	aa		tax				tax
.1762	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1764					_EUDLoop:
.1764	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next
.1766	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1768	90 02		bcc $176c			bcc 	_EUDNoCase
.176a	e9 20		sbc #$20			sbc 	#$20
.176c					_EUDNoCase:
.176c	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.176e	90 2c		bcc $179c			bcc 	_EUDError
.1770	c9 3a		cmp #$3a			cmp 	#'9'+1
.1772	90 0a		bcc $177e			bcc 	_EUDOkay
.1774	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1776	90 24		bcc $179c			bcc 	_EUDError
.1778	c9 47		cmp #$47			cmp 	#'F'+1
.177a	b0 20		bcs $179c			bcs 	_EUDError
.177c	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.177e					_EUDOkay:
.177e	29 0f		and #$0f			and 	#15 							; make constant
.1780	da		phx				phx
.1781	48		pha				pha
.1782	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1784	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1787	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.178a	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.178d	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1790	68		pla				pla 									; pop constant and OR in
.1791	fa		plx				plx
.1792	05 08		ora $08				ora 	IFR0+IM0
.1794	85 08		sta $08				sta 	IFR0+IM0
.1796	c8		iny				iny 									; next
.1797	ca		dex				dex
.1798	d0 ca		bne $1764			bne 	_EUDLoop
.179a	7a		ply				ply
.179b	60		rts				rts
.179c					_EUDError:
.179c	4c 18 24	jmp $2418		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.179f					EXPUnaryInlineDec:
.179f	4c f6 23	jmp $23f6		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.17a2					EXPUnaryPeek:
.17a2	20 1f 16	jsr $161f			jsr 	EXPEvalInteger16 				; number to R0
.17a5	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.17a8	b2 08		lda ($08)			lda 	(IFR0)
.17aa	a2 08		ldx #$08			ldx 	#IFR0
.17ac	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.17af	60		rts				rts
.17b0					EXPUnaryDeek:
.17b0	20 1f 16	jsr $161f			jsr 	EXPEvalInteger16 				; number to R0
.17b3	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.17b6	5a		phy				phy
.17b7	a0 01		ldy #$01			ldy 	#1
.17b9	b1 08		lda ($08),y			lda 	(IFR0),y
.17bb	7a		ply				ply
.17bc	48		pha				pha
.17bd	b2 08		lda ($08)			lda 	(IFR0)
.17bf	a2 08		ldx #$08			ldx 	#IFR0
.17c1	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.17c4	68		pla				pla
.17c5	85 09		sta $09				sta 	IFR0+IM1
.17c7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.17c8					EXPUnaryNull:
.17c8	20 4a 16	jsr $164a			jsr 	EXPTermValueR0
.17cb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.17cc					EXPUnaryFrac:
.17cc	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 					; number to R0
.17cf	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.17d2	20 e5 2b	jsr $2be5			jsr 	IFloatFractionalR0
.17d5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.17d6					EXPUnaryInkey:
.17d6	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.17d9	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.17db	20 89 26	jsr $2689			jsr 	StringTempAllocate
.17de	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.17e1	b0 06		bcs $17e9			bcs 	_EUIExit
.17e3	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.17e6	20 be 26	jsr $26be			jsr 	StringTempWrite
.17e9					_EUIExit:
.17e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.17ea					EXPUnaryInt:
.17ea	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 					; number to R0
.17ed	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.17f0	20 3b 2c	jsr $2c3b			jsr 	IFloatIntegerR0
.17f3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.17f4					EXPUnaryLen:
.17f4	20 37 16	jsr $1637			jsr 	EXPEvalString 					; string to R0, zTemp0
.17f7	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.17fa	b2 22		lda ($22)			lda 	(zTemp0)
.17fc	a2 08		ldx #$08			ldx 	#IFR0
.17fe	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.1801	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1802					EXPUnaryParenthesis:
.1802	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 					; number to R0
.1805	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.1808	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1809					EXPUnaryRnd:
.1809	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 				; number to R0
.180c	20 93 25	jsr $2593			jsr 	ERRCheckRParen 				; )
.180f	a2 08		ldx #$08			ldx 	#IFR0
.1811	20 28 18	jsr $1828			jsr 	EXPLoadInRandom
.1814	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1816	85 0b		sta $0b				sta 	IFR0+IExp
.1818	60		rts				rts
.1819					ExpUnaryRand:
.1819	20 18 16	jsr $1618			jsr 	EXPEvalInteger 				; integer to R0
.181c	20 93 25	jsr $2593			jsr 	ERRCheckRParen 				; )
.181f	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1821	20 28 18	jsr $1828			jsr 	EXPLoadInRandom
.1824	20 ac 2a	jsr $2aac			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1827	60		rts				rts
.1828					EXPLoadInRandom:
.1828	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.182b	20 3d 18	jsr $183d			jsr 	EXPRandom32
.182e	95 00		sta $00,x			sta 	IM0,x
.1830	20 3d 18	jsr $183d			jsr 	EXPRandom32
.1833	95 01		sta $01,x			sta 	IM1,x
.1835	20 3d 18	jsr $183d			jsr 	EXPRandom32
.1838	29 7f		and #$7f			and 	#$7F
.183a	95 02		sta $02,x			sta 	IM2,x
.183c	60		rts				rts
.183d					EXPRandom32:
.183d	5a		phy				phy
.183e	a0 08		ldy #$08			ldy 	#8
.1840	ad 0d 05	lda $050d			lda 	EXPSeed+0
.1843	0d 0e 05	ora $050e			ora 	EXPSeed+1
.1846	0d 0f 05	ora $050f			ora 	EXPSeed+2
.1849	0d 10 05	ora $0510			ora 	EXPSeed+3
.184c	d0 08		bne $1856			bne 	_EXPRNoReset
.184e	ee 0d 05	inc $050d			inc 	EXPSeed+0
.1851	a0 10		ldy #$10			ldy 	#16
.1853	8c 10 05	sty $0510			sty 	EXPSeed+3
.1856					_EXPRNoReset:
.1856	ad 0d 05	lda $050d			lda 	EXPSeed+0
.1859					_EXPRLoop:
.1859	0a		asl a				asl		a
.185a	2e 0e 05	rol $050e			rol 	EXPSeed+1
.185d	2e 0f 05	rol $050f			rol 	EXPSeed+2
.1860	2e 10 05	rol $0510			rol 	EXPSeed+3
.1863	90 02		bcc $1867			bcc 	_EXPRNoEOR
.1865	49 c5		eor #$c5			eor 	#$C5
.1867					_EXPRNoEOR:
.1867	88		dey				dey
.1868	d0 ef		bne $1859			bne 	_EXPRLoop
.186a	8d 0d 05	sta $050d			sta 	EXPSeed+0
.186d	7a		ply				ply
.186e	60		rts				rts
.050d					EXPSeed:
>050d							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.186f					EXPUnarySgn:
.186f	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 					; number to R0
.1872	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.1875	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1877	20 dd 2e	jsr $2edd			jsr 	IFloatCopyToRegister
.187a	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.187c	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.187f	a2 0c		ldx #$0c			ldx 	#IFR1
.1881	20 09 2c	jsr $2c09			jsr 	IFloatCompare 					; compare R1 vs 0.
.1884	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1885					EXPUnarySqr:
.1885	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 					; number to R0
.1888	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.188b	20 87 2b	jsr $2b87			jsr 	IFloatSquareRootR0 				; square root.
.188e	b0 01		bcs $1891			bcs 	_EUSValue
.1890	60		rts				rts
.1891					_EUSValue:
.1891	4c 07 24	jmp $2407		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1894					EXPUnaryHex:
.1894	20 18 16	jsr $1618			jsr 	EXPEvalInteger 					; expr
.1897	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.189a	5a		phy				phy
.189b	a9 10		lda #$10			lda 	#16
.189d	20 dc 2c	jsr $2cdc			jsr 	IFloatIntegerToStringR0
.18a0	80 0a		bra $18ac			bra 	EUSMain
.18a2					EXPUnaryStr:
.18a2	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 					; expr
.18a5	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.18a8	5a		phy				phy
.18a9	20 38 2d	jsr $2d38			jsr 	IFloatFloatToStringR0 			; convert to string
.18ac					EUSMain:
.18ac	b0 18		bcs $18c6			bcs 	_EUSError
.18ae	86 22		stx $22				stx 	zTemp0 							; save string address
.18b0	84 23		sty $23				sty 	zTemp0+1
.18b2	48		pha				pha 									; save count
.18b3	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.18b5	20 89 26	jsr $2689			jsr 	StringTempAllocate
.18b8	fa		plx				plx 									; count in X
.18b9	a0 00		ldy #$00			ldy 	#0
.18bb					_EUSCopy:
.18bb	b1 22		lda ($22),y			lda 	(zTemp0),y
.18bd	c8		iny				iny
.18be	20 be 26	jsr $26be			jsr 	StringTempWrite
.18c1	ca		dex				dex
.18c2	d0 f7		bne $18bb			bne	 	_EUSCopy
.18c4	7a		ply				ply
.18c5	60		rts				rts
.18c6					_EUSError:
.18c6	4c 07 24	jmp $2407		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.18c9					EXPUnaryInlineString:
.18c9	18		clc				clc 								; physical address -> IM0,1
.18ca	98		tya				tya
.18cb	65 18		adc $18				adc 	codePtr
.18cd	85 08		sta $08				sta 	IFR0+IM0
.18cf	a5 19		lda $19				lda 	codePtr+1
.18d1	69 00		adc #$00			adc 	#0
.18d3	85 09		sta $09				sta 	IFR0+IM1
.18d5	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in rest
.18d7	a9 80		lda #$80			lda 	#$80
.18d9	85 0b		sta $0b				sta 	IFR0+IExp
.18db	98		tya				tya	 								; skip over it.
.18dc	38		sec				sec
.18dd	71 18		adc ($18),y			adc 	(codePtr),y
.18df	a8		tay				tay
.18e0	60		rts				rts
.18e1					_EXPUISRange:
.18e1	4c 07 24	jmp $2407		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.18e4					EXPUnaryLeft:
.18e4	20 2a 19	jsr $192a			jsr 	EXPCommonStart 					; <string>,
.18e7	48		pha				pha 									; save string address on stack
.18e8	da		phx				phx
.18e9	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.18eb	48		pha				pha
.18ec	20 2b 16	jsr $162b			jsr 	EXPEvalInteger8 				; characters to do
.18ef	80 44		bra $1935			bra 	EXPSubstringCommon
.18f1					EXPUnaryRight:
.18f1	20 2a 19	jsr $192a			jsr 	EXPCommonStart 					; <string>,
.18f4	48		pha				pha 									; save string address on stack
.18f5	da		phx				phx
.18f6	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.18f8	48		pha				pha
.18f9	20 2b 16	jsr $162b			jsr 	EXPEvalInteger8 				; characters to do
.18fc	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.18fe	68		pla				pla
.18ff	38		sec				sec
.1900	e5 22		sbc $22				sbc 	zTemp0
.1902	b0 02		bcs $1906			bcs 	_EUROffLeft
.1904	a9 00		lda #$00			lda 	#0
.1906					_EUROffLeft:
.1906	48		pha				pha 									; start pos
.1907	a9 ff		lda #$ff			lda 	#255
.1909	80 2a		bra $1935			bra 	EXPSubstringCommon
.190b					EXPUnaryMid:
.190b	20 2a 19	jsr $192a			jsr 	EXPCommonStart 					; <string>,
.190e	48		pha				pha 									; save string address on stack
.190f	da		phx				phx
.1910	20 2b 16	jsr $162b			jsr 	EXPEvalInteger8 				; characters start
.1913	f0 12		beq $1927			beq 	_EUSError 						; 1 is left
.1915	3a		dec a				dec 	a 								; zero based.
.1916	48		pha				pha
.1917	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1919	c9 99		cmp #$99			cmp 	#PR_COMMA
.191b	f0 04		beq $1921			beq 	_EUMLength 						; if so m is provided
.191d	a9 ff		lda #$ff			lda 	#255 							; default m
.191f	80 14		bra $1935			bra 	EXPSubstringCommon
.1921					_EUMLength:
.1921	c8		iny				iny 									; consume comma
.1922	20 2b 16	jsr $162b			jsr 	EXPEvalInteger8 				; characters to do
.1925	80 0e		bra $1935			bra 	EXPSubstringCommon
.1927					_EUSError:
.1927	4c 18 24	jmp $2418		jmp	ErrorV_value
.192a					EXPCommonStart:
.192a	20 37 16	jsr $1637			jsr 	EXPEvalString
.192d	20 9b 25	jsr $259b			jsr 	ERRCheckComma
.1930	a5 08		lda $08				lda 	IFR0+IM0
.1932	a6 09		ldx $09				ldx 	IFR0+IM1
.1934	60		rts				rts
.1935					EXPSubstringCommon:
.1935	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1937	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; check right bracket.
.193a	68		pla				pla 									; start position
.193b	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.193d	fa		plx				plx 									; get string address to zTemp2.
.193e	86 27		stx $27				stx 	zTemp2+1
.1940	68		pla				pla
.1941	85 26		sta $26				sta 	zTemp2
.1943	38		sec				sec 									; length - start is the max count of chars
.1944	b2 26		lda ($26)			lda 	(zTemp2)
.1946	e5 25		sbc $25				sbc 	zTemp1+1
.1948	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.194a	b0 02		bcs $194e			bcs 	_EXPSSNoTrim
.194c	85 24		sta $24				sta 	zTemp1 							; update count with available
.194e					_EXPSSNoTrim:
.194e	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1950	20 89 26	jsr $2689			jsr 	StringTempAllocate 				; allocate memory for it.
.1953	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1955	f0 15		beq $196c			beq 	_EXPSSExit
.1957	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1959	d2 26		cmp ($26)			cmp 	(zTemp2)
.195b	b0 0f		bcs $196c			bcs 	_EXPSSExit
.195d	5a		phy				phy
.195e	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1960	c8		iny				iny 									; +1 for the length byte
.1961					_EXPSSCopy:
.1961	b1 26		lda ($26),y			lda 	(zTemp2),y
.1963	20 be 26	jsr $26be			jsr 	StringTempWrite
.1966	c8		iny				iny
.1967	c6 24		dec $24				dec 	zTemp1
.1969	d0 f6		bne $1961			bne 	_EXPSSCopy
.196b	7a		ply				ply
.196c					_EXPSSExit:
.196c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.196d					EXPUnaryVal:
.196d	20 37 16	jsr $1637			jsr 	EXPEvalString 					; string to R0, zTemp0
.1970	20 93 25	jsr $2593			jsr 	ERRCheckRParen 					; )
.1973	20 77 19	jsr $1977			jsr 	VALConversionZTemp0
.1976	60		rts				rts
.1977					VALConversionZTemp0:
.1977	5a		phy				phy
.1978	18		clc				clc
.1979	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.197b	69 01		adc #$01			adc 	#1
.197d	aa		tax				tax
.197e	a5 23		lda $23				lda 	zTemp0+1
.1980	69 00		adc #$00			adc 	#0
.1982	a8		tay				tay
.1983	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1985	20 9f 2d	jsr $2d9f			jsr 	IFloatStringToFloatR0 			; do conversion
.1988	b0 02		bcs $198c			bcs 	_EUVError
.198a	7a		ply				ply
.198b	60		rts				rts
.198c					_EUVError:
.198c	4c 18 24	jmp $2418		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.198f					BinaryPrecedence:
>198f	02					.byte	 2	; $ef =
>1990	02					.byte	 2	; $f0 <>
>1991	02					.byte	 2	; $f1 <=
>1992	02					.byte	 2	; $f2 <
>1993	02					.byte	 2	; $f3 >=
>1994	02					.byte	 2	; $f4 >
>1995	01					.byte	 1	; $f5 XOR
>1996	01					.byte	 1	; $f6 OR
>1997	01					.byte	 1	; $f7 AND
>1998	04					.byte	 4	; $f8 DIV
>1999	04					.byte	 4	; $f9 MOD
>199a	04					.byte	 4	; $fa <<
>199b	04					.byte	 4	; $fb >>
>199c	04					.byte	 4	; $fc /
>199d	04					.byte	 4	; $fd *
>199e	03					.byte	 3	; $fe -
>199f	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.19a0					StructureOffsets:
>19a0	01					.byte	1  	; $80 REPEAT
>19a1	ff					.byte	255	; $81 UNTIL
>19a2	01					.byte	1  	; $82 WHILE
>19a3	ff					.byte	255	; $83 WEND
>19a4	01					.byte	1  	; $84 IF
>19a5	ff					.byte	255	; $85 ENDIF
>19a6	01					.byte	1  	; $86 DO
>19a7	ff					.byte	255	; $87 LOOP
>19a8	01					.byte	1  	; $88 PROC
>19a9	ff					.byte	255	; $89 ENDPROC
>19aa	01					.byte	1  	; $8a FOR
>19ab	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.19ac					StandardTokens:
>19ac	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>19b3	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>19b9	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>19bf	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>19c4	02 49 46				.byte	$02,$49,$46                             	; $84 if
>19c7	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>19cd	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>19d0	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>19d5	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>19da	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>19e2	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>19e6	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>19eb	00					.byte	$00                                     	; $8c [[end]]
>19ec	00					.byte	$00                                     	; $8d [[shift]]
>19ed	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>19f2	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>19f7	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>19fa	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>19ff	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1a03	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1a09	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1a0f	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1a14	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1a18	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1a1c	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1a21	01 2c					.byte	$01,$2c                                 	; $99 ,
>1a23	01 3b					.byte	$01,$3b                                 	; $9a ;
>1a25	01 3a					.byte	$01,$3a                                 	; $9b :
>1a27	01 27					.byte	$01,$27                                 	; $9c '
>1a29	01 29					.byte	$01,$29                                 	; $9d )
>1a2b	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1a2f	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1a35	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1a39	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1a3d	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1a42	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1a46	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1a4d	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1a52	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1a57	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1a5c	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1a61	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1a66	00					.byte	0											; $aa
>1a67	00					.byte	0											; $ab
>1a68	00					.byte	0											; $ac
>1a69	00					.byte	0											; $ad
>1a6a	00					.byte	0											; $ae
>1a6b	00					.byte	0											; $af
>1a6c	00					.byte	0											; $b0
>1a6d	00					.byte	0											; $b1
>1a6e	00					.byte	0											; $b2
>1a6f	00					.byte	0											; $b3
>1a70	00					.byte	0											; $b4
>1a71	00					.byte	0											; $b5
>1a72	00					.byte	0											; $b6
>1a73	00					.byte	0											; $b7
>1a74	00					.byte	0											; $b8
>1a75	00					.byte	0											; $b9
>1a76	00					.byte	0											; $ba
>1a77	00					.byte	0											; $bb
>1a78	00					.byte	0											; $bc
>1a79	00					.byte	0											; $bd
>1a7a	00					.byte	0											; $be
>1a7b	00					.byte	0											; $bf
>1a7c	00					.byte	0											; $c0
>1a7d	00					.byte	0											; $c1
>1a7e	00					.byte	0											; $c2
>1a7f	00					.byte	0											; $c3
>1a80	00					.byte	0											; $c4
>1a81	00					.byte	0											; $c5
>1a82	00					.byte	0											; $c6
>1a83	00					.byte	0											; $c7
>1a84	00					.byte	0											; $c8
>1a85	00					.byte	0											; $c9
>1a86	00					.byte	0											; $ca
>1a87	00					.byte	0											; $cb
>1a88	00					.byte	0											; $cc
>1a89	00					.byte	0											; $cd
>1a8a	00					.byte	0											; $ce
>1a8b	00					.byte	0											; $cf
>1a8c	00					.byte	0											; $d0
>1a8d	00					.byte	0											; $d1
>1a8e	00					.byte	0											; $d2
>1a8f	00					.byte	0											; $d3
>1a90	00					.byte	0											; $d4
>1a91	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1a97	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1a9d	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1aa5	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1aac	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1ab2	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ab8	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1abd	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1ac2	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1ac7	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1acc	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1ad1	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1ad7	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1adc	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1ae4	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1aeb	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1af0	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1af5	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1afb	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1b00	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1b06	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1b0b	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1b11	01 28					.byte	$01,$28                                 	; $eb (
>1b13	01 24					.byte	$01,$24                                 	; $ec $
>1b15	00					.byte	$00                                     	; $ed [[decimal]]
>1b16	00					.byte	$00                                     	; $ee [[string]]
>1b17	01 3d					.byte	$01,$3d                                 	; $ef =
>1b19	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1b1c	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1b1f	01 3c					.byte	$01,$3c                                 	; $f2 <
>1b21	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1b24	01 3e					.byte	$01,$3e                                 	; $f4 >
>1b26	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1b2a	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1b2d	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1b31	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1b35	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1b39	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1b3c	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1b3f	01 2f					.byte	$01,$2f                                 	; $fc /
>1b41	01 2a					.byte	$01,$2a                                 	; $fd *
>1b43	01 2d					.byte	$01,$2d                                 	; $fe -
>1b45	01 2b					.byte	$01,$2b                                 	; $ff +
>1b47	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1b48					VectorTable:
>1b48	ea 22					.word	Command_REPEAT           ; $80 REPEAT
>1b4a	f3 22					.word	Command_UNTIL            ; $81 UNTIL
>1b4c	cb 23					.word	Command_WHILE            ; $82 WHILE
>1b4e	ea 23					.word	Command_WEND             ; $83 WEND
>1b50	c2 22					.word	IfCommand                ; $84 IF
>1b52	e9 22					.word	EndIf                    ; $85 ENDIF
>1b54	5f 21					.word	Command_DO               ; $86 DO
>1b56	77 21					.word	Command_LOOP             ; $87 LOOP
>1b58	4d 14					.word	NoExec08                 ; $88 PROC
>1b5a	53 21					.word	Command_ENDPROC          ; $89 ENDPROC
>1b5c	80 21					.word	Command_FOR              ; $8a FOR
>1b5e	0d 22					.word	Command_NEXT             ; $8b NEXT
>1b60	d3 13					.word	RUNEndOfLine             ; $8c [[END]]
>1b62	2f 14					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1b64	e2 22					.word	ElseCode                 ; $8e ELSE
>1b66	4d 14					.word	NoExec01                 ; $8f THEN
>1b68	4d 14					.word	NoExec02                 ; $90 TO
>1b6a	4d 14					.word	NoExec03                 ; $91 STEP
>1b6c	67 12					.word	CommandLET               ; $92 LET
>1b6e	b8 11					.word	Command_Print            ; $93 PRINT
>1b70	b1 11					.word	Command_Input            ; $94 INPUT
>1b72	17 21					.word	Command_CALL             ; $95 CALL
>1b74	38 14					.word	Command_Sys              ; $96 SYS
>1b76	ba 13					.word	Command_REM              ; $97 REM
>1b78	68 21					.word	Command_EXIT             ; $98 EXIT
>1b7a	4d 14					.word	NoExec04                 ; $99 ,
>1b7c	4d 14					.word	NoExec05                 ; $9a ;
>1b7e	4d 14					.word	NoExec06                 ; $9b :
>1b80	ba 13					.word	Command_REM2             ; $9c '
>1b82	4d 14					.word	NoExec07                 ; $9d )
>1b84	6b 10					.word	CommandDIM               ; $9e DIM
>1b86	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1b88	b1 13					.word	Command_NEW              ; $a0 NEW
>1b8a	c7 13					.word	Command_RUN              ; $a1 RUN
>1b8c	35 14					.word	Command_STOP             ; $a2 STOP
>1b8e	32 14					.word	Command_END              ; $a3 END
>1b90	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1b92	e1 12					.word	Command_LIST             ; $a5 LIST
>1b94	10 27					.word	NotImplemented           ; $a6 SAVE
>1b96	10 27					.word	NotImplemented           ; $a7 LOAD
>1b98	8a 11					.word	Command_Poke             ; $a8 POKE
>1b9a	87 11					.word	Command_Doke             ; $a9 DOKE
>1b9c	10 27					.word	NotImplemented           ; $aa
>1b9e	10 27					.word	NotImplemented           ; $ab
>1ba0	10 27					.word	NotImplemented           ; $ac
>1ba2	10 27					.word	NotImplemented           ; $ad
>1ba4	10 27					.word	NotImplemented           ; $ae
>1ba6	10 27					.word	NotImplemented           ; $af
>1ba8	10 27					.word	NotImplemented           ; $b0
>1baa	10 27					.word	NotImplemented           ; $b1
>1bac	10 27					.word	NotImplemented           ; $b2
>1bae	10 27					.word	NotImplemented           ; $b3
>1bb0	10 27					.word	NotImplemented           ; $b4
>1bb2	10 27					.word	NotImplemented           ; $b5
>1bb4	10 27					.word	NotImplemented           ; $b6
>1bb6	10 27					.word	NotImplemented           ; $b7
>1bb8	10 27					.word	NotImplemented           ; $b8
>1bba	10 27					.word	NotImplemented           ; $b9
>1bbc	10 27					.word	NotImplemented           ; $ba
>1bbe	10 27					.word	NotImplemented           ; $bb
>1bc0	10 27					.word	NotImplemented           ; $bc
>1bc2	10 27					.word	NotImplemented           ; $bd
>1bc4	10 27					.word	NotImplemented           ; $be
>1bc6	10 27					.word	NotImplemented           ; $bf
>1bc8	10 27					.word	NotImplemented           ; $c0
>1bca	10 27					.word	NotImplemented           ; $c1
>1bcc	10 27					.word	NotImplemented           ; $c2
>1bce	10 27					.word	NotImplemented           ; $c3
>1bd0	10 27					.word	NotImplemented           ; $c4
>1bd2	10 27					.word	NotImplemented           ; $c5
>1bd4	10 27					.word	NotImplemented           ; $c6
>1bd6	10 27					.word	NotImplemented           ; $c7
>1bd8	10 27					.word	NotImplemented           ; $c8
>1bda	10 27					.word	NotImplemented           ; $c9
>1bdc	10 27					.word	NotImplemented           ; $ca
>1bde	10 27					.word	NotImplemented           ; $cb
>1be0	10 27					.word	NotImplemented           ; $cc
>1be2	10 27					.word	NotImplemented           ; $cd
>1be4	10 27					.word	NotImplemented           ; $ce
>1be6	10 27					.word	NotImplemented           ; $cf
>1be8	10 27					.word	NotImplemented           ; $d0
>1bea	10 27					.word	NotImplemented           ; $d1
>1bec	10 27					.word	NotImplemented           ; $d2
>1bee	10 27					.word	NotImplemented           ; $d3
>1bf0	10 27					.word	NotImplemented           ; $d4
>1bf2	b0 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1bf4	a2 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1bf6	f1 18					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1bf8	e4 18					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1bfa	0b 19					.word	EXPUnaryMid              ; $d9 MID$(
>1bfc	a2 18					.word	EXPUnaryStr              ; $da STR$(
>1bfe	6d 19					.word	EXPUnaryVal              ; $db VAL(
>1c00	6f 18					.word	EXPUnarySgn              ; $dc SGN(
>1c02	20 17					.word	EXPUnaryAbs              ; $dd ABS(
>1c04	f4 17					.word	EXPUnaryLen              ; $de LEN(
>1c06	85 18					.word	EXPUnarySqr              ; $df SQR(
>1c08	40 17					.word	EXPUnaryChr              ; $e0 CHR$(
>1c0a	2a 17					.word	EXPUnaryAsc              ; $e1 ASC(
>1c0c	d6 17					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1c0e	10 27					.word	NotImplemented           ; $e3 EVENT(
>1c10	10 27					.word	NotImplemented           ; $e4 TIME
>1c12	ea 17					.word	EXPUnaryInt              ; $e5 INT(
>1c14	cc 17					.word	EXPUnaryFrac             ; $e6 FRAC(
>1c16	51 17					.word	EXPUnaryDec              ; $e7 DEC(
>1c18	94 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1c1a	09 18					.word	EXPUnaryRnd              ; $e9 RND(
>1c1c	19 18					.word	ExpUnaryRand             ; $ea RAND(
>1c1e	02 18					.word	EXPUnaryParenthesis      ; $eb (
>1c20	c8 17					.word	EXPUnaryNull             ; $ec $
>1c22	9f 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1c24	c9 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1c26	0a 15					.word	EXPCompareEqual          ; $ef =
>1c28	25 15					.word	EXPCompareNotEqual       ; $f0 <>
>1c2a	2e 15					.word	EXPCompareLessEqual      ; $f1 <=
>1c2c	13 15					.word	EXPCompareLess           ; $f2 <
>1c2e	37 15					.word	EXPCompareGreaterEqual   ; $f3 >=
>1c30	1c 15					.word	EXPCompareGreater        ; $f4 >
>1c32	b7 14					.word	EXPBinXor                ; $f5 XOR
>1c34	ab 14					.word	EXPBinOr                 ; $f6 OR
>1c36	9f 14					.word	EXPBinAnd                ; $f7 AND
>1c38	77 14					.word	EXPBinIDiv               ; $f8 DIV
>1c3a	88 14					.word	EXPBinIMod               ; $f9 MOD
>1c3c	82 15					.word	EXPBinLeft               ; $fa <<
>1c3e	8a 15					.word	EXPBinRight              ; $fb >>
>1c40	6b 14					.word	EXPBinFDiv               ; $fc /
>1c42	62 14					.word	EXPBinMul                ; $fd *
>1c44	59 14					.word	EXPBinSub                ; $fe -
>1c46	50 14					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1c48					TOKDetokenise:
.1c48	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1c4a	84 27		sty $27				sty 	zTemp2+1
.1c4c	9c 13 05	stz $0513			stz		TOKLastCharacter 			; clear last character
.1c4f					_TOKDLoop:
.1c4f	20 7e 1c	jsr $1c7e			jsr 	TOKDGet 					; get next
.1c52	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1c54	f0 26		beq $1c7c			beq 	_TOKDExit
.1c56	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1c58	f0 1d		beq $1c77			beq 	_TOKDDataItem
.1c5a	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1c5c	f0 19		beq $1c77			beq 	_TOKDDataItem
.1c5e	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1c60	10 05		bpl $1c67			bpl 	_TOKDNotToken
.1c62	20 46 1d	jsr $1d46			jsr 	TOKDToken 					; token to text.
.1c65	80 e8		bra $1c4f			bra 	_TOKDLoop
.1c67					_TOKDNotToken:
.1c67	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1c69	90 05		bcc $1c70			bcc 	_TOKDNotIdentifier
.1c6b	20 b9 1c	jsr $1cb9			jsr 	TOKDIdentifier
.1c6e	80 df		bra $1c4f			bra 	_TOKDLoop
.1c70					_TOKDNotIdentifier:
.1c70	a0 0a		ldy #$0a			ldy 	#10
.1c72	20 02 1d	jsr $1d02			jsr 	TOKDInteger
.1c75	80 d8		bra $1c4f			bra 	_TOKDLoop
.1c77					_TOKDDataItem:
.1c77	20 94 1c	jsr $1c94			jsr 	TOKDDataItem
.1c7a	80 d3		bra $1c4f			bra 	_TOKDLoop
.1c7c					_TOKDExit:
.1c7c	18		clc				clc
.1c7d	60		rts				rts
.1c7e	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1c80	e6 26		inc $26				inc 	zTemp2
.1c82	d0 02		bne $1c86			bne 	_TKDGExit
.1c84	e6 27		inc $27				inc 	zTemp2+1
.1c86					_TKDGExit:
.1c86	60		rts				rts
.1c87					TOKDOutput:
.1c87	8d 13 05	sta $0513			sta 	TOKLastCharacter
.1c8a	6c 11 05	jmp ($0511)			jmp 	(TOKOutputMethod)
.1c8d					TOKSetDetokeniseOutput:
.1c8d	8e 11 05	stx $0511			stx 	TOKOutputMethod
.1c90	8c 12 05	sty $0512			sty 	TOKOutputMethod+1
.1c93	60		rts				rts
.0511					TOKOutputMethod:
>0511							.fill 	2
.0513					TOKLastCharacter:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1c94					TOKDDataItem:
.1c94	a8		tay				tay 								; type in Y
.1c95	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1c97	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1c99	f0 02		beq $1c9d			beq 	_TOKDDIsString
.1c9b	a9 2e		lda #$2e			lda 	#'.'
.1c9d					_TOKDDIsString:
.1c9d	20 87 1c	jsr $1c87			jsr 	TOKDOutput 					; dump it
.1ca0	20 7e 1c	jsr $1c7e			jsr 	TOKDGet 					; get length into X
.1ca3	aa		tax				tax
.1ca4					_TOKDDOutput:
.1ca4	ca		dex				dex 								; are we complete
.1ca5	30 08		bmi $1caf			bmi 	_TOKDDEnd
.1ca7	20 7e 1c	jsr $1c7e			jsr 	TOKDGet 					; get character and output it
.1caa	20 87 1c	jsr $1c87			jsr 	TOKDOutput
.1cad	80 f5		bra $1ca4			bra 	_TOKDDOutput
.1caf					_TOKDDEnd:
.1caf	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1cb1	d0 05		bne $1cb8			bne 	_TOKDDNotString
.1cb3	a9 22		lda #$22			lda 	#'"'
.1cb5	20 87 1c	jsr $1c87			jsr 	TOKDOutput
.1cb8					_TOKDDNotString:
.1cb8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1cb9					TOKDIdentifier:
.1cb9	a0 ff		ldy #$ff			ldy 	#$FF
.1cbb	8c 14 05	sty $0514			sty 	TOKDIFirstChar
.1cbe					_TOKDLoop:
.1cbe	a8		tay				tay 								; token in Y
.1cbf	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1cc1	c0 64		cpy #$64			cpy 	#$64
.1cc3	f0 11		beq $1cd6			beq 	_TOKDIOutput
.1cc5	a9 5f		lda #$5f			lda 	#'_'
.1cc7	c0 65		cpy #$65			cpy 	#$65
.1cc9	f0 0b		beq $1cd6			beq 	_TOKDIOutput
.1ccb	98		tya				tya 								; handle a-z
.1ccc	18		clc				clc
.1ccd	69 21		adc #$21			adc	 	#$21
.1ccf	c0 5a		cpy #$5a			cpy 	#$5A
.1cd1	90 03		bcc $1cd6			bcc 	_TOKDIOutput
.1cd3	38		sec				sec 								; handle 0-9
.1cd4	e9 4b		sbc #$4b			sbc 	#$4B
.1cd6					_TOKDIOutput:
.1cd6	2c 14 05	bit $0514			bit 	TOKDIFirstChar
.1cd9	10 08		bpl $1ce3			bpl 	_TOKDINoSpacing
.1cdb	48		pha				pha
.1cdc	20 78 1d	jsr $1d78			jsr 	TOKDSpacing
.1cdf	9c 14 05	stz $0514			stz 	TOKDIFirstChar
.1ce2	68		pla				pla
.1ce3					_TOKDINoSpacing:
.1ce3	20 87 1c	jsr $1c87			jsr 	TOKDOutput
.1ce6	20 7e 1c	jsr $1c7e			jsr 	TOKDGet 					; get next token
.1ce9	c9 7c		cmp #$7c			cmp 	#$7C
.1ceb	90 d1		bcc $1cbe			bcc 	_TOKDLoop
.1ced	f0 12		beq $1d01			beq 	_TOKDIExit 					; it's a number, no tail.
.1cef	4a		lsr a				lsr 	a 							; string ?
.1cf0	90 07		bcc $1cf9			bcc 	_TOKDICheckArray
.1cf2	48		pha				pha
.1cf3	a9 24		lda #$24			lda 	#"$"
.1cf5	20 87 1c	jsr $1c87			jsr 	TOKDOutput
.1cf8	68		pla				pla
.1cf9					_TOKDICheckArray:
.1cf9	4a		lsr a				lsr 	a 							; array ?
.1cfa	90 05		bcc $1d01			bcc 	_TOKDIExit
.1cfc	a9 28		lda #$28			lda 	#"("
.1cfe	20 87 1c	jsr $1c87			jsr 	TOKDOutput
.1d01					_TOKDIExit:
.1d01	60		rts				rts
.0514					TOKDIFirstChar:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1d02					TOKDInteger:
.1d02	5a		phy				phy 								; save base
.1d03	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1d05	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.1d08					_TOKDILoop:
.1d08	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1d0a	c9 40		cmp #$40			cmp 	#$40
.1d0c	b0 1d		bcs $1d2b			bcs 	_TOKDIHaveInteger
.1d0e	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1d10	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1d13	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1d16	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1d19	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1d1c	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1d1f	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1d22	20 7e 1c	jsr $1c7e			jsr 	TOKDGet 					; OR byte in.
.1d25	05 08		ora $08				ora 	IFR0+IM0
.1d27	85 08		sta $08				sta 	IFR0+IM0
.1d29	80 dd		bra $1d08			bra 	_TOKDILoop
.1d2b					_TOKDIHaveInteger:
.1d2b	7a		ply				ply 								; restore base
.1d2c	98		tya				tya 								; base in A
.1d2d	20 dc 2c	jsr $2cdc			jsr 	IFloatIntegerToStringR0
.1d30	86 22		stx $22				stx 	zTemp0
.1d32	84 23		sty $23				sty 	zTemp0+1
.1d34	b2 22		lda ($22)			lda 	(zTemp0)
.1d36	20 78 1d	jsr $1d78			jsr 	TOKDSpacing 				; check spacing okay.
.1d39	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1d3b					_TOKDOutput:
.1d3b	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d3d	20 87 1c	jsr $1c87			jsr 	TOKDOutput
.1d40	c8		iny				iny
.1d41	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d43	d0 f6		bne $1d3b			bne 	_TOKDOutput
.1d45	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1d46					TOKDToken:
.1d46	a2 ac		ldx #$ac			ldx 	#StandardTokens & $FF
.1d48	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1d4a					_TOKDSearch:
.1d4a	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1d4c	84 23		sty $23				sty 	zTemp0+1
.1d4e	aa		tax				tax 								; token ID in X.
.1d4f					_TOKDFind:
.1d4f	ca		dex				dex 								; reached the start
.1d50	10 0d		bpl $1d5f			bpl 	_TOKDFound
.1d52	38		sec				sec 								; go to next entry
.1d53	b2 22		lda ($22)			lda 	(zTemp0)
.1d55	65 22		adc $22				adc 	zTemp0
.1d57	85 22		sta $22				sta 	zTemp0
.1d59	90 f4		bcc $1d4f			bcc 	_TOKDFind
.1d5b	e6 23		inc $23				inc 	zTemp0+1
.1d5d	80 f0		bra $1d4f			bra 	_TOKDFind
.1d5f					_TOKDFound:
.1d5f	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1d61	f0 14		beq $1d77			beq 	_TOKDExit
.1d63	aa		tax				tax
.1d64	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1d66	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1d68	20 78 1d	jsr $1d78			jsr 	TOKDSpacing
.1d6b					_TOKDOutput:
.1d6b	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d6d	20 d2 20	jsr $20d2			jsr 	TOKToLower
.1d70	20 87 1c	jsr $1c87			jsr 	TOKDOutput
.1d73	c8		iny				iny
.1d74	ca		dex				dex
.1d75	d0 f4		bne $1d6b			bne 	_TOKDOutput
.1d77					_TOKDExit:
.1d77	60		rts				rts
.1d78					TOKDSpacing:
.1d78	20 e9 20	jsr $20e9			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1d7b	90 0d		bcc $1d8a			bcc 	_TOKDSExit
.1d7d	ad 13 05	lda $0513			lda 	TOKLastCharacter			; and last character also alphanumeric
.1d80	20 e9 20	jsr $20e9			jsr 	TOKIsIdentifierElement
.1d83	90 05		bcc $1d8a			bcc 	_TOKDSExit
.1d85	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1d87	20 87 1c	jsr $1c87			jsr 	TOKDOutput
.1d8a					_TOKDSExit:
.1d8a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1d8b					PGMDeleteLine:
.1d8b	20 3e 1e	jsr $1e3e			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d8e	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1d90	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1d93	85 25		sta $25				sta 	zTemp1+1
.1d95					_PGMDLoop:
.1d95	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1d97	38		sec				sec
.1d98	f0 3a		beq $1dd4			beq 	_PGMDExit
.1d9a	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1d9c	b1 24		lda ($24),y			lda 	(zTemp1),y
.1d9e	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1da1	d0 08		bne $1dab			bne 	_PGMDNext
.1da3	c8		iny				iny
.1da4	b1 24		lda ($24),y			lda 	(zTemp1),y
.1da6	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1da9	f0 0d		beq $1db8			beq 	_PGMDDelete
.1dab					_PGMDNext:
.1dab	18		clc				clc
.1dac	b2 24		lda ($24)			lda 	(zTemp1)
.1dae	65 24		adc $24				adc 	zTemp1
.1db0	85 24		sta $24				sta 	zTemp1
.1db2	90 e1		bcc $1d95			bcc 	_PGMDLoop
.1db4	e6 25		inc $25				inc 	zTemp1+1
.1db6	80 dd		bra $1d95			bra 	_PGMDLoop
.1db8					_PGMDDelete:
.1db8	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1dba	a8		tay				tay
.1dbb					_PGMDCopy:
.1dbb	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1dbd	92 24		sta ($24)			sta 	(zTemp1)
.1dbf	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1dc1	c5 22		cmp $22				cmp 	zTemp0
.1dc3	d0 07		bne $1dcc			bne 	_PGMDNext2
.1dc5	a5 25		lda $25				lda 	zTemp1+1
.1dc7	c5 23		cmp $23				cmp 	zTemp0+1
.1dc9	18		clc				clc
.1dca	f0 08		beq $1dd4			beq 	_PGMDExit
.1dcc					_PGMDNext2:
.1dcc	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1dce	d0 eb		bne $1dbb			bne 	_PGMDCopy
.1dd0	e6 25		inc $25				inc 	zTemp1+1
.1dd2	80 e7		bra $1dbb			bra 	_PGMDCopy
.1dd4					_PGMDExit:
.1dd4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1dd5					PGMInsertLine:
.1dd5	20 3e 1e	jsr $1e3e			jsr 	PGMEndProgram 				; end of program into zTemp0
.1dd8	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1dda	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1ddd	85 25		sta $25				sta 	zTemp1+1
.1ddf					_PGMILoop:
.1ddf	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1de1	f0 1c		beq $1dff			beq 	_PGMIInsert
.1de3	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1de5	b1 24		lda ($24),y			lda 	(zTemp1),y
.1de7	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1dea	c8		iny				iny
.1deb	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ded	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1df0	b0 0d		bcs $1dff			bcs 	_PGMIInsert 				; insert here.
.1df2	18		clc				clc
.1df3	b2 24		lda ($24)			lda 	(zTemp1)
.1df5	65 24		adc $24				adc 	zTemp1
.1df7	85 24		sta $24				sta 	zTemp1
.1df9	90 e4		bcc $1ddf			bcc 	_PGMILoop
.1dfb	e6 25		inc $25				inc 	zTemp1+1
.1dfd	80 e0		bra $1ddf			bra 	_PGMILoop
.1dff					_PGMIInsert:
.1dff	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1e02					_PGMIInsertLoop:
.1e02	b2 22		lda ($22)			lda 	(zTemp0)
.1e04	91 22		sta ($22),y			sta 	(zTemp0),y
.1e06	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1e08	c5 22		cmp $22				cmp 	zTemp0
.1e0a	d0 06		bne $1e12			bne 	_PGMINext
.1e0c	a5 25		lda $25				lda 	zTemp1+1
.1e0e	c5 23		cmp $23				cmp 	zTemp0+1
.1e10	f0 0a		beq $1e1c			beq 	_PGMIInserted
.1e12					_PGMINext:
.1e12	a5 22		lda $22				lda 	zTemp0
.1e14	d0 02		bne $1e18			bne 	_PGMINoBorrow
.1e16	c6 23		dec $23				dec 	zTemp0+1
.1e18					_PGMINoBorrow:
.1e18	c6 22		dec $22				dec 	zTemp0
.1e1a	80 e6		bra $1e02			bra 	_PGMIInsertLoop
.1e1c					_PGMIInserted:
.1e1c	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1e1e					_PGMICopyLoop:
.1e1e	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1e21	91 24		sta ($24),y			sta 	(zTemp1),y
.1e23	c8		iny				iny
.1e24	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1e27	d0 f5		bne $1e1e			bne 	_PGMICopyLoop
.1e29	18		clc				clc
.1e2a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1e2b					PGMSetBaseAddress:
.1e2b	8e 15 05	stx $0515			stx 	PGMBaseHigh
.1e2e	8c 16 05	sty $0516			sty 	PGMEndMemoryHigh
.1e31	60		rts				rts
.1e32					PGMNewProgram:
.1e32	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1e34	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1e37	85 23		sta $23				sta 	zTemp0+1
.1e39	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1e3b	92 22		sta ($22)			sta 	(zTemp0)
.1e3d	60		rts				rts
.1e3e					PGMEndProgram:
.1e3e	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1e40	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1e43	85 23		sta $23				sta 	zTemp0+1
.1e45					_PGMEPLoop:
.1e45	b2 22		lda ($22)			lda 	(zTemp0)
.1e47	f0 0b		beq $1e54			beq 	_PGMEPExit
.1e49	18		clc				clc
.1e4a	65 22		adc $22				adc 	zTemp0
.1e4c	85 22		sta $22				sta 	zTemp0
.1e4e	90 f5		bcc $1e45			bcc 	_PGMEPLoop
.1e50	e6 23		inc $23				inc 	zTemp0+1
.1e52	80 f1		bra $1e45			bra 	_PGMEPLoop
.1e54					_PGMEPExit:
.1e54	60		rts				rts
.0515					PGMBaseHigh:
>0515							.fill 	1
.0516					PGMEndMemoryHigh:
>0516							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1e55					TOKResetElement:
.1e55	9c 17 05	stz $0517			stz 	TOKElement
.1e58	60		rts				rts
.1e59					TOKWriteElement:
.1e59	da		phx				phx
.1e5a	ae 17 05	ldx $0517			ldx 	TOKElement
.1e5d	9d 18 05	sta $0518,x			sta 	TOKElementText,x
.1e60	9e 19 05	stz $0519,x			stz 	TOKElementText+1,x
.1e63	fa		plx				plx
.1e64	ee 17 05	inc $0517			inc 	TOKElement
.1e67	60		rts				rts
.0517					TOKElement:
>0517							.fill 	1
.0518					TOKElementText:
>0518							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1e68					TOKTokeniseConstant:
.1e68	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1e6a	48		pha				pha 								; save on stack
.1e6b	29 c0		and #$c0			and 	#$C0
.1e6d	05 09		ora $09				ora 	IFR0+IM1
.1e6f	05 0a		ora $0a				ora 	IFR0+IM2
.1e71	f0 10		beq $1e83			beq 	_TTCLess
.1e73	da		phx				phx
.1e74	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1e76					_TTCShiftRight:
.1e76	46 0a		lsr $0a				lsr 	IFR0+IM2
.1e78	66 09		ror $09				ror 	IFR0+IM1
.1e7a	66 08		ror $08				ror 	IFR0+IM0
.1e7c	ca		dex				dex
.1e7d	d0 f7		bne $1e76			bne 	_TTCShiftRight
.1e7f	fa		plx				plx
.1e80	20 68 1e	jsr $1e68			jsr 	TOKTokeniseConstant
.1e83					_TTCLess:
.1e83	68		pla				pla
.1e84	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1e86	20 25 1f	jsr $1f25			jsr 	TOKWriteA
.1e89	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1e8a					TOKTokeniseDecimals:
.1e8a	20 35 1f	jsr $1f35			jsr 	TOKGetNext 					; consume the .
.1e8d	20 5f 20	jsr $205f			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e90	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1e92	20 25 1f	jsr $1f25			jsr 	TOKWriteA
.1e95	20 9a 1e	jsr $1e9a			jsr 	TOKOutputElementBuffer 		; then the buffer
.1e98	18		clc				clc
.1e99	60		rts				rts
.1e9a					TOKOutputElementBuffer:
.1e9a	ad 17 05	lda $0517			lda 	TOKElement 					; get count and write that
.1e9d	20 25 1f	jsr $1f25			jsr 	TOKWriteA
.1ea0	a8		tay				tay 								; put in Y
.1ea1	f0 0c		beq $1eaf			beq 	_TOEExit 					; exit if empty which is okay.
.1ea3	a2 01		ldx #$01			ldx 	#1
.1ea5					_TOELoop:
.1ea5	bd 17 05	lda $0517,x			lda 	TOKElement,x
.1ea8	20 25 1f	jsr $1f25			jsr 	TOKWriteA
.1eab	e8		inx				inx
.1eac	88		dey				dey
.1ead	d0 f6		bne $1ea5			bne 	_TOELoop
.1eaf					_TOEExit:
.1eaf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1eb0					TOKTokenise:
.1eb0	8c 18 06	sty $0618			sty 	TOKDataSource+1 			; save source routine pointer
.1eb3	8e 17 06	stx $0617			stx 	TOKDataSource
.1eb6	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1eb8	8d 19 06	sta $0619			sta 	TOKIsFirstElement
.1ebb	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1ebd	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1ec0	9c 01 04	stz $0401			stz 	TOKLineNumber
.1ec3	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1ec6					_TOKMainLoop:
.1ec6	20 31 1f	jsr $1f31			jsr 	TOKGet 						; what follows.
.1ec9	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1ecb	f0 4f		beq $1f1c			beq 	_TOKExit
.1ecd	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1ecf	d0 05		bne $1ed6			bne 	_TOKElement
.1ed1	20 35 1f	jsr $1f35			jsr 	TOKGetNext
.1ed4	80 f0		bra $1ec6			bra 	_TOKMainLoop
.1ed6					_TOKElement:
.1ed6	20 dd 20	jsr $20dd			jsr 	TOKIsDigit 					; is it 0..9
.1ed9	90 0a		bcc $1ee5			bcc 	_TOKNotDigit
.1edb	20 36 20	jsr $2036			jsr 	TOKTokeniseInteger 			; get integer
.1ede	b0 43		bcs $1f23			bcs 	_TOKFail 					; did it fail ?
.1ee0	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.1ee3	80 e1		bra $1ec6			bra 	_TOKMainLoop
.1ee5					_TOKNotDigit:
.1ee5	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.1ee8	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1eea	d0 07		bne $1ef3			bne 	_TOKNotHex
.1eec	20 7e 1f	jsr $1f7e			jsr 	TOKTokeniseHexadecimal
.1eef	b0 32		bcs $1f23			bcs 	_TOKFail
.1ef1	80 d3		bra $1ec6			bra 	_TOKMainLoop
.1ef3					_TOKNotHex:
.1ef3	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1ef5	d0 07		bne $1efe			bne 	_TOKNotDecimal
.1ef7	20 8a 1e	jsr $1e8a			jsr 	TOKTokeniseDecimals
.1efa	b0 27		bcs $1f23			bcs 	_TOKFail
.1efc	80 c8		bra $1ec6			bra 	_TOKMainLoop
.1efe					_TOKNotDecimal:
.1efe	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1f00	d0 07		bne $1f09			bne 	_TOKNotString
.1f02	20 a4 20	jsr $20a4			jsr 	TOKTokeniseString
.1f05	b0 1c		bcs $1f23			bcs 	_TOKFail
.1f07	80 bd		bra $1ec6			bra 	_TOKMainLoop
.1f09					_TOKNotString:
.1f09	20 fa 20	jsr $20fa			jsr 	TOKIsAlpha 					; identifier ?
.1f0c	b0 07		bcs $1f15			bcs 	_TOKIdentifier
.1f0e	20 73 20	jsr $2073			jsr 	TOKTokenisePunctuation 		; punctuation
.1f11	b0 10		bcs $1f23			bcs 	_TOKFail
.1f13	80 b1		bra $1ec6			bra 	_TOKMainLoop
.1f15					_TOKIdentifier:
.1f15	20 b8 1f	jsr $1fb8			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1f18	b0 09		bcs $1f23			bcs 	_TOKFail
.1f1a	80 aa		bra $1ec6			bra 	_TOKMainLoop
.1f1c					_TOKExit:
.1f1c	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1f1e	20 25 1f	jsr $1f25			jsr 	TOKWriteA
.1f21	18		clc				clc									; return with carry set.
.1f22	60		rts				rts
.1f23					_TOKFail:
.1f23	38		sec				sec
.1f24	60		rts				rts
.1f25					TOKWriteA:
.1f25	da		phx				phx
.1f26	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1f29	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1f2c	fa		plx				plx
.1f2d	ee 00 04	inc $0400			inc 	TOKLineSize
.1f30	60		rts				rts
.1f31					TOKGet:
.1f31	18		clc				clc
.1f32	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.1f35					TOKGetNext:
.1f35	38		sec				sec
.1f36	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.0617					TOKDataSource:
>0617							.fill 	2
.0619					TOKIsFirstElement:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1f39					TOKFindToken:
.1f39	a2 ac		ldx #$ac			ldx 	#StandardTokens & $FF 		; do this table
.1f3b	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1f3d	20 48 1f	jsr $1f48			jsr 	TOKFindTokenXY 				; find it, or not
.1f40	90 04		bcc $1f46			bcc 	_TOKFTFail
.1f42	a2 00		ldx #$00			ldx 	#0
.1f44	38		sec				sec
.1f45	60		rts				rts
.1f46					_TOKFTFail
.1f46	18		clc				clc
.1f47	60		rts				rts
.1f48					TOKFindTokenXY:
.1f48	86 22		stx $22				stx 	zTemp0 						; save token table address
.1f4a	84 23		sty $23				sty 	zTemp0+1
.1f4c	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1f4e	8d 1a 06	sta $061a			sta 	TOKCurrent
.1f51					_TOKFindLoop:
.1f51	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.1f53	18		clc				clc 		 						; clear carry in case of fail
.1f54	30 17		bmi $1f6d			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1f56	cd 17 05	cmp $0517			cmp 	TOKElement 					; compare against the element length
.1f59	d0 13		bne $1f6e			bne 	_TOKNext 					; different, try next.
.1f5b	aa		tax				tax 								; number of chars to compare.
.1f5c	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1f5e					_TOKCompare:
.1f5e	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.1f60	d9 17 05	cmp $0517,y			cmp 	TOKElementText-1,y
.1f63	d0 09		bne $1f6e			bne 	_TOKNext 					; different ? try next
.1f65	c8		iny				iny 								; compare next two
.1f66	ca		dex				dex
.1f67	d0 f5		bne $1f5e			bne 	_TOKCompare 				; until done X characters.
.1f69	38		sec				sec
.1f6a	ad 1a 06	lda $061a			lda 	TOKCurrent 					; return current ID.
.1f6d					_TOKExit:
.1f6d	60		rts				rts
.1f6e					_TOKNext:
.1f6e	ee 1a 06	inc $061a			inc 	TOKCurrent 					; increment token #
.1f71	38		sec				sec 								; add length+1 to ptr
.1f72	b2 22		lda ($22)			lda 	(zTemp0)
.1f74	65 22		adc $22				adc 	zTemp0
.1f76	85 22		sta $22				sta 	zTemp0
.1f78	90 d7		bcc $1f51			bcc 	_TOKFindLoop
.1f7a	e6 23		inc $23				inc 	zTemp0+1
.1f7c	80 d3		bra $1f51			bra 	_TOKFindLoop
.061a					TOKCurrent:
>061a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1f7e					TOKTokeniseHexadecimal:
.1f7e	20 35 1f	jsr $1f35			jsr 	TOKGetNext 					; consume the $
.1f81	a2 08		ldx #$08			ldx 	#IFR0
.1f83	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero 				; set R0 = 0
.1f86					_TTHLoop:
.1f86	20 31 1f	jsr $1f31			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f89	20 07 21	jsr $2107			jsr 	TOKIsHexadecimal
.1f8c	90 20		bcc $1fae			bcc 	_TTHDone
.1f8e	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.1f90	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1f93	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1f96	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1f99	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.1f9c	20 35 1f	jsr $1f35			jsr 	TOKGetNext
.1f9f	38		sec				sec 								; convert to decimal.
.1fa0	e9 30		sbc #$30			sbc 	#48
.1fa2	c9 0a		cmp #$0a			cmp 	#10
.1fa4	90 02		bcc $1fa8			bcc 	_TTHNotAlpha
.1fa6	e9 07		sbc #$07			sbc 	#7
.1fa8					_TTHNotAlpha:
.1fa8	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.1faa	85 08		sta $08				sta 	IFR0+IM0
.1fac	80 d8		bra $1f86			bra 	_TTHLoop
.1fae					_TTHDone:
.1fae	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1fb0	20 25 1f	jsr $1f25			jsr 	TOKWriteA
.1fb3	20 68 1e	jsr $1e68			jsr 	TOKTokeniseConstant 		; write integer out.
.1fb6	18		clc				clc
.1fb7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1fb8					TOKTokeniseIdentifier:
.1fb8	20 55 1e	jsr $1e55			jsr 	TOKResetElement 			; extract an identifier
.1fbb					_TOKGetIdentifier:
.1fbb	20 31 1f	jsr $1f31			jsr 	TOKGet
.1fbe	20 c7 20	jsr $20c7			jsr 	TOKToUpper
.1fc1	20 e9 20	jsr $20e9			jsr 	TOKIsIdentifierElement
.1fc4	90 08		bcc $1fce			bcc 	_TOKEndIdent
.1fc6	20 59 1e	jsr $1e59			jsr		TOKWriteElement
.1fc9	20 35 1f	jsr $1f35			jsr 	TOKGetNext
.1fcc	80 ed		bra $1fbb			bra 	_TOKGetIdentifier
.1fce					_TOKEndIdent:
.1fce	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1fd0	d0 06		bne $1fd8			bne 	_TOKNotString
.1fd2	20 59 1e	jsr $1e59			jsr 	TOKWriteElement 			; add it
.1fd5	20 35 1f	jsr $1f35			jsr 	TOKGetNext 					; consume it
.1fd8					_TOKNotString:
.1fd8	20 31 1f	jsr $1f31			jsr 	TOKGet 						; finally check for (
.1fdb	c9 28		cmp #$28			cmp 	#"("
.1fdd	d0 06		bne $1fe5			bne 	_TOKNoArray
.1fdf	20 59 1e	jsr $1e59			jsr 	TOKWriteElement 			; add it
.1fe2	20 35 1f	jsr $1f35			jsr 	TOKGetNext 					; consume it
.1fe5					_TOKNoArray:
.1fe5	20 39 1f	jsr $1f39			jsr 	TOKFindToken 				; find it
.1fe8	90 05		bcc $1fef			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1fea	20 25 1f	jsr $1f25			jsr 	TOKWriteA
.1fed	18		clc				clc
.1fee	60		rts				rts
.1fef					_TOKIsVariable:
.1fef	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1ff1					_TOKOutputBuffer:
.1ff1	bd 18 05	lda $0518,x			lda 	TOKElementText,x 			; output it translated.
.1ff4	20 1d 20	jsr $201d			jsr 	TOKTranslateIdentifier
.1ff7	20 25 1f	jsr $1f25			jsr 	TOKWriteA
.1ffa	e8		inx				inx
.1ffb	bd 18 05	lda $0518,x			lda 	TOKElementText,x
.1ffe	20 e9 20	jsr $20e9			jsr 	TOKIsIdentifierElement
.2001	b0 ee		bcs $1ff1			bcs 	_TOKOutputBuffer
.2003	a8		tay				tay 								; last char in Y
.2004	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2006	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2008	f0 0e		beq $2018			beq 	_TOKIVExit
.200a	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.200c	d0 04		bne $2012			bne 	_TOKIVCheckArray 			; no, check for (
.200e	1a		inc a				inc 	a 							; token is $7D
.200f	bc 19 05	ldy $0519,x			ldy 	TOKElementText+1,x 			; get next one.
.2012					_TOKIVCheckArray:
.2012	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2014	d0 02		bne $2018			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2016	1a		inc a				inc 	a
.2017	1a		inc a				inc 	a
.2018					_TOKIVExit:
.2018	20 25 1f	jsr $1f25			jsr 	TOKWriteA 					; ending token
.201b	18		clc				clc
.201c	60		rts				rts
.201d					TOKTranslateIdentifier:
.201d	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.201f	f0 0f		beq $2030			beq 	_TTI64
.2021	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.2023	f0 0e		beq $2033			beq 	_TTI65
.2025	38		sec				sec
.2026	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2028	10 03		bpl $202d			bpl 	_TTIExit
.202a	18		clc				clc 								; map 09 onto 26-35
.202b	69 2b		adc #$2b			adc 	#"A"-"0"+26
.202d					_TTIExit:
.202d	09 40		ora #$40			ora 	#$40 						; correct range.
.202f	60		rts				rts
.2030	a9 64		lda #$64	_TTI64:	lda 	#$64
.2032	60		rts				rts
.2033	a9 65		lda #$65	_TTI65:	lda 	#$65
.2035	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2036					TOKTokeniseInteger:
.2036	20 5f 20	jsr $205f			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2039	a2 18		ldx #$18			ldx 	#TOKElementText & $FF
.203b	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.203d	ad 17 05	lda $0517			lda		TOKElement
.2040	20 9f 2d	jsr $2d9f			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2043	ad 19 06	lda $0619			lda 	TOKIsFirstElement 			; first element ?
.2046	f0 12		beq $205a			beq 	_TOKNotLineNumber
.2048	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.204a	d0 0c		bne $2058			bne 	_TOKBadLineNumeber
.204c	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.204e	8d 01 04	sta $0401			sta 	TOKLineNumber
.2051	a5 09		lda $09				lda 	IFR0+IM1
.2053	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2056	18		clc				clc
.2057	60		rts				rts
.2058					_TOKBadLineNumeber:
.2058	38		sec				sec
.2059	60		rts				rts
.205a					_TOKNotLineNumber:
.205a	20 68 1e	jsr $1e68			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.205d	18		clc				clc
.205e	60		rts				rts
.205f					TOKExtractInteger:
.205f	20 55 1e	jsr $1e55			jsr 	TOKResetElement 			; restart
.2062					_TTILoop:
.2062	20 31 1f	jsr $1f31			jsr 	TOKGet 						; keep getting and copying while numeric.
.2065	20 dd 20	jsr $20dd			jsr 	TOKIsDigit
.2068	90 08		bcc $2072			bcc 	_TOKEIExit
.206a	20 59 1e	jsr $1e59			jsr 	TOKWriteElement
.206d	20 35 1f	jsr $1f35			jsr 	TOKGetNext
.2070	80 f0		bra $2062			bra 	_TTILoop
.2072					_TOKEIExit:
.2072	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2073					TOKTokenisePunctuation:
.2073	20 55 1e	jsr $1e55			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2076	20 35 1f	jsr $1f35			jsr 	TOKGetNext
.2079	20 59 1e	jsr $1e59			jsr 	TOKWriteElement
.207c	20 31 1f	jsr $1f31			jsr 	TOKGet 						; what follows ?
.207f	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2081	f0 10		beq $2093			beq 	_TTPOne
.2083	20 f1 20	jsr $20f1			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2086	b0 0b		bcs $2093			bcs 	_TTPOne 					; these speed things up a bit.
.2088	20 59 1e	jsr $1e59			jsr 	TOKWriteElement 			; this is what we will search for.
.208b	20 39 1f	jsr $1f39			jsr 	TOKFindToken
.208e	b0 0a		bcs $209a			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2090	ce 17 05	dec $0517			dec 	TOKElement 					; make it a single character
.2093					_TTPOne:
.2093	20 39 1f	jsr $1f39			jsr 	TOKFindToken 				; look for one character punctuation
.2096	b0 07		bcs $209f			bcs 	_TTPOutputExit 				; we found it
.2098	38		sec				sec 								; not recognised.
.2099	60		rts				rts
.209a					_TTPConsumeExit:
.209a	48		pha				pha
.209b	20 35 1f	jsr $1f35			jsr 	TOKGetNext 					; get the 2nd char out.
.209e	68		pla				pla
.209f					_TTPOutputExit:
.209f	20 25 1f	jsr $1f25			jsr  	TOKWriteA 					; write token out
.20a2	18		clc				clc
.20a3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.20a4					TOKTokeniseString:
.20a4	20 35 1f	jsr $1f35			jsr 	TOKGetNext 					; consume the "
.20a7	20 55 1e	jsr $1e55			jsr 	TOKResetElement 			; start getting the string
.20aa					_TOKTSLoop:
.20aa	20 31 1f	jsr $1f31			jsr 	TOKGet 						; check EOL
.20ad	c9 00		cmp #$00			cmp 	#0
.20af	f0 0c		beq $20bd			beq 	_TOKTSExit
.20b1	20 35 1f	jsr $1f35			jsr 	TOKGetNext 					; get and consume
.20b4	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.20b6	f0 05		beq $20bd			beq 	_TOKTSExit
.20b8	20 59 1e	jsr $1e59			jsr 	TOKWriteElement
.20bb	80 ed		bra $20aa			bra 	_TOKTSLoop
.20bd					_TOKTSExit:
.20bd	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.20bf	20 25 1f	jsr $1f25			jsr 	TOKWriteA
.20c2	20 9a 1e	jsr $1e9a			jsr 	TOKOutputElementBuffer
.20c5	18		clc				clc
.20c6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.20c7					TOKToUpper:
.20c7	c9 61		cmp #$61			cmp 	#"a"
.20c9	90 06		bcc $20d1			bcc 	_TTUNotLower
.20cb	c9 7b		cmp #$7b			cmp 	#"z"+1
.20cd	b0 02		bcs $20d1			bcs 	_TTUNotLower
.20cf	49 20		eor #$20			eor 	#$20
.20d1					_TTUNotLower:
.20d1	60		rts				rts
.20d2					TOKToLower:
.20d2	c9 41		cmp #$41			cmp 	#"A"
.20d4	90 06		bcc $20dc			bcc 	_TTUNotUpper
.20d6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.20d8	b0 02		bcs $20dc			bcs 	_TTUNotUpper
.20da	49 20		eor #$20			eor 	#$20
.20dc					_TTUNotUpper:
.20dc	60		rts				rts
.20dd					TOKIsDigit:
.20dd	c9 30		cmp #$30			cmp 	#"0"
.20df	90 06		bcc $20e7			bcc 	TOKFail
.20e1	c9 3a		cmp #$3a			cmp 	#"9"+1
.20e3	b0 02		bcs $20e7			bcs 	TOKFail
.20e5					TOKSucceed:
.20e5	38		sec				sec
.20e6	60		rts				rts
.20e7					TOKFail:
.20e7	18		clc				clc
.20e8	60		rts				rts
.20e9					TOKIsIdentifierElement:
.20e9	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.20eb	f0 f8		beq $20e5			beq 	TOKSucceed
.20ed	c9 5f		cmp #$5f			cmp 	#"_"
.20ef	f0 f4		beq $20e5			beq 	TOKSucceed 					; else fall through to alphanumeric
.20f1					TOKIsAlphaNumeric:
.20f1	20 fa 20	jsr $20fa			jsr 	TOKIsAlpha
.20f4	b0 ef		bcs $20e5			bcs 	TOKSucceed
.20f6	20 dd 20	jsr $20dd			jsr 	TOKIsDigit
.20f9	60		rts				rts
.20fa					TOKIsAlpha:
.20fa	20 c7 20	jsr $20c7			jsr 	TOKToUpper
.20fd	c9 41		cmp #$41			cmp 	#"A"
.20ff	90 e6		bcc $20e7			bcc 	TOKFail
.2101	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2103	b0 e2		bcs $20e7			bcs 	TOKFail
.2105	80 de		bra $20e5			bra 	TOKSucceed
.2107					TOKIsHexadecimal:
.2107	20 dd 20	jsr $20dd			jsr		TOKIsDigit
.210a	b0 d9		bcs $20e5			bcs 	TOKSucceed
.210c	20 fa 20	jsr $20fa			jsr 	TOKIsAlpha
.210f	90 d6		bcc $20e7			bcc 	TOKFail
.2111	c9 47		cmp #$47			cmp 	#"F"+1
.2113	b0 d2		bcs $20e7			bcs 	TOKFail
.2115	80 ce		bra $20e5			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2117					Command_CALL:
.2117	a9 42		lda #$42			lda 	#STK_CALL
.2119	20 ac 25	jsr $25ac			jsr 	StackOpen
.211c	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.211e	29 c0		and #$c0			and 	#$C0
.2120	c9 40		cmp #$40			cmp 	#$40
.2122	d0 29		bne $214d			bne 	_CCSyntax
.2124	20 7c 28	jsr $287c			jsr 	VARGetInfo 					; get the information
.2127	20 93 25	jsr $2593			jsr 	ERRCheckRParen 				; check right bracket follows.
.212a	20 2e 28	jsr $282e			jsr 	VARFind 					; exists ?
.212d	90 21		bcc $2150			bcc 	_CCUnknown
.212f	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.2131	85 22		sta $22				sta 	zTemp0
.2133	20 e0 25	jsr $25e0			jsr 	STKSaveCodePosition 		; save return address on stack.
.2136	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2138	b1 22		lda ($22),y			lda 	(zTemp0),y
.213a	c9 ff		cmp #$ff			cmp 	#$FF
.213c	d0 12		bne $2150			bne 	_CCUnknown
.213e	88		dey				dey 								; get Y offset to stack
.213f	b1 22		lda ($22),y			lda 	(zTemp0),y
.2141	48		pha				pha
.2142	88		dey				dey 								; get address
.2143	b1 22		lda ($22),y			lda 	(zTemp0),y
.2145	85 19		sta $19				sta 	codePtr+1
.2147	b2 22		lda ($22)			lda 	(zTemp0)
.2149	85 18		sta $18				sta 	codePtr
.214b	7a		ply				ply 								; restore Y
.214c	60		rts				rts
.214d					_CCSyntax:
.214d	4c f6 23	jmp $23f6		jmp	ErrorV_syntax
.2150					_CCUnknown:
.2150	4c 6b 25	jmp $256b		jmp	ErrorV_unknown
.2153					Command_ENDPROC:
.2153	a9 42		lda #$42			lda 	#STK_CALL
.2155	20 d8 25	jsr $25d8			jsr 	StackCheckFrame
.2158	20 f2 25	jsr $25f2			jsr 	STKLoadCodePosition 		; return
.215b	20 ca 25	jsr $25ca			jsr 	StackClose
.215e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.215f					Command_DO:
.215f	a9 22		lda #$22			lda 	#STK_DO
.2161	20 ac 25	jsr $25ac			jsr 	StackOpen
.2164	20 e0 25	jsr $25e0			jsr 	STKSaveCodePosition 		; save loop position
.2167	60		rts				rts
.2168					Command_EXIT:
.2168	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.216a	20 d8 25	jsr $25d8			jsr 	StackCheckFrame
.216d	20 ca 25	jsr $25ca			jsr 	StackClose 					; close it
.2170	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2172	aa		tax				tax
.2173	20 08 23	jsr $2308			jsr 	ScanForward
.2176	60		rts				rts
.2177					Command_LOOP:
.2177	a9 22		lda #$22			lda 	#STK_DO
.2179	20 d8 25	jsr $25d8			jsr 	StackCheckFrame
.217c	20 f2 25	jsr $25f2			jsr 	STKLoadCodePosition 		; loop back
.217f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2180					Command_FOR:
.2180	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2182	20 ac 25	jsr $25ac			jsr 	StackOpen
.2185	20 67 12	jsr $1267			jsr 	CommandLET 					; do "I = 1" bit
.2188	5a		phy				phy 								; save variable address to +4,+5
.2189	a0 04		ldy #$04			ldy 	#4
.218b	a5 22		lda $22				lda 	zTemp0
.218d	91 2a		sta ($2a),y			sta 	(basicStack),y
.218f	c8		iny				iny
.2190	a5 23		lda $23				lda 	zTemp0+1
.2192	91 2a		sta ($2a),y			sta 	(basicStack),y
.2194	7a		ply				ply
.2195	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2197	20 a3 25	jsr $25a3			jsr 	ERRCheckA
.219a	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.219d	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.219f	a2 08		ldx #$08			ldx 	#IFR0
.21a1	20 f6 21	jsr $21f6			jsr 	CFSaveR0X
.21a4	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.21a6	c9 91		cmp #$91			cmp 	#PR_STEP
.21a8	d0 06		bne $21b0			bne 	_CFStep1
.21aa	c8		iny				iny 								; consume step
.21ab	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 				; evaluate STEP
.21ae	80 24		bra $21d4			bra 	_CFWriteStep
.21b0					_CFStep1:
.21b0	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.21b2	a9 01		lda #$01			lda 	#1
.21b4	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.21b7	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.21b8	a0 04		ldy #$04			ldy 	#4 							; get variable address
.21ba	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21bc	85 22		sta $22				sta 	zTemp0
.21be	c8		iny				iny
.21bf	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21c1	85 23		sta $23				sta 	zTemp0+1
.21c3	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.21c5	b1 22		lda ($22),y			lda 	(zTemp0),y
.21c7	d0 0a		bne $21d3			bne 	_CFNotOptimised
.21c9	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.21cb	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21cd	d0 04		bne $21d3			bne 	_CFNotOptimised
.21cf	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.21d1	85 0b		sta $0b				sta 	IFR0+IExp
.21d3					_CFNotOptimised:
.21d3	7a		ply				ply
.21d4					_CFWriteStep:
.21d4	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.21d6	a9 06		lda #$06			lda 	#6
.21d8	20 f6 21	jsr $21f6			jsr 	CFSaveR0X
.21db	20 e0 25	jsr $25e0			jsr 	STKSaveCodePosition 		; save loop position
.21de	60		rts				rts
.21df					CFLoadR0X:
.21df	5a		phy				phy
.21e0	a8		tay				tay
.21e1	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21e3	95 00		sta $00,x			sta 	IM0,x
.21e5	c8		iny				iny
.21e6	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21e8	95 01		sta $01,x			sta 	IM1,x
.21ea	c8		iny				iny
.21eb	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21ed	95 02		sta $02,x			sta 	IM2,x
.21ef	c8		iny				iny
.21f0	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21f2	95 03		sta $03,x			sta 	IExp,x
.21f4	7a		ply				ply
.21f5	60		rts				rts
.21f6					CFSaveR0X:
.21f6	5a		phy				phy
.21f7	a8		tay				tay
.21f8	b5 00		lda $00,x			lda 	IM0,x
.21fa	91 2a		sta ($2a),y			sta 	(basicStack),y
.21fc	c8		iny				iny
.21fd	b5 01		lda $01,x			lda 	IM1,x
.21ff	91 2a		sta ($2a),y			sta 	(basicStack),y
.2201	c8		iny				iny
.2202	b5 02		lda $02,x			lda 	IM2,x
.2204	91 2a		sta ($2a),y			sta 	(basicStack),y
.2206	c8		iny				iny
.2207	b5 03		lda $03,x			lda 	IExp,x
.2209	91 2a		sta ($2a),y			sta 	(basicStack),y
.220b	7a		ply				ply
.220c	60		rts				rts
.220d					Command_NEXT:
.220d	a9 37		lda #$37			lda 	#STK_FOR
.220f	20 d8 25	jsr $25d8			jsr 	StackCheckFrame
.2212	5a		phy				phy 								; check optimised loop
.2213	a0 09		ldy #$09			ldy 	#9
.2215	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2217	7a		ply				ply
.2218	0a		asl a				asl 	a
.2219	b0 35		bcs $2250			bcs 	_CNOptimised
.221b	20 87 22	jsr $2287			jsr 	_CNLoadValue 				; load index value to R0.
.221e	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2220	a9 06		lda #$06			lda 	#6
.2222	20 df 21	jsr $21df			jsr 	CFLoadR0X
.2225	20 31 29	jsr $2931			jsr 	IFloatAdd 					; add them together and write back.
.2228	20 aa 22	jsr $22aa			jsr 	_CNSaveValue
.222b	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.222d	a2 0c		ldx #$0c			ldx 	#IFR1
.222f	20 df 21	jsr $21df			jsr 	CFLoadR0X
.2232	20 09 2c	jsr $2c09			jsr 	IFloatCompare 				; compare terminal vs current
.2235	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2237	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero
.223a	f0 10		beq $224c			beq 	_CNLoopBack
.223c	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.223e	5a		phy				phy
.223f	a0 09		ldy #$09			ldy 	#6+IExp
.2241	51 2a		eor ($2a),y			eor 	(basicStack),y
.2243	7a		ply				ply
.2244	29 40		and #$40			and 	#IFSign
.2246	f0 04		beq $224c			beq 	_CNLoopBack
.2248					_CNExitLoop:
.2248	20 ca 25	jsr $25ca			jsr 	StackClose		 			; return
.224b	60		rts				rts
.224c					_CNLoopBack:
.224c	20 f2 25	jsr $25f2			jsr 	STKLoadCodePosition 		; loop back
.224f	60		rts				rts
.2250					_CNOptimised:
.2250	5a		phy				phy
.2251	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2253	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2255	85 26		sta $26				sta 	zTemp2
.2257	c8		iny				iny
.2258	b1 2a		lda ($2a),y			lda 	(basicStack),y
.225a	85 27		sta $27				sta 	zTemp2+1
.225c	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.225e					_CNIncrement:
.225e	c8		iny				iny
.225f	b1 26		lda ($26),y			lda 	(zTemp2),y
.2261	1a		inc a				inc 	a
.2262	91 26		sta ($26),y			sta 	(zTemp2),y
.2264	f0 f8		beq $225e			beq 	_CNIncrement
.2266	18		clc				clc 								; point zTemp0 to terminal value
.2267	a5 2a		lda $2a				lda 	basicStack
.2269	69 0a		adc #$0a			adc 	#10
.226b	85 22		sta $22				sta 	zTemp0
.226d	a5 2b		lda $2b				lda 	basicStack+1
.226f	69 00		adc #$00			adc 	#0
.2271	85 23		sta $23				sta 	zTemp0+1
.2273	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2275	b2 26		lda ($26)			lda 	(zTemp2)
.2277	d2 22		cmp ($22)			cmp 	(zTemp0)
.2279	b1 26		lda ($26),y			lda 	(zTemp2),y
.227b	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.227d	c8		iny				iny
.227e	b1 26		lda ($26),y			lda 	(zTemp2),y
.2280	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2282	7a		ply				ply
.2283	b0 c3		bcs $2248			bcs 	_CNExitLoop
.2285	80 c5		bra $224c			bra 	_CNLoopBack
.2287					_CNLoadValue:
.2287	5a		phy				phy
.2288	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.228a	b1 2a		lda ($2a),y			lda 	(basicStack),y
.228c	85 26		sta $26				sta 	zTemp2
.228e	c8		iny				iny
.228f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2291	85 27		sta $27				sta 	zTemp2+1
.2293	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2295	b1 26		lda ($26),y			lda 	(zTemp2),y
.2297	85 08		sta $08				sta 	IFR0+IM0
.2299	c8		iny				iny
.229a	b1 26		lda ($26),y			lda 	(zTemp2),y
.229c	85 09		sta $09				sta 	IFR0+IM1
.229e	c8		iny				iny
.229f	b1 26		lda ($26),y			lda 	(zTemp2),y
.22a1	85 0a		sta $0a				sta 	IFR0+IM2
.22a3	c8		iny				iny
.22a4	b1 26		lda ($26),y			lda 	(zTemp2),y
.22a6	85 0b		sta $0b				sta 	IFR0+IExp
.22a8	7a		ply				ply
.22a9	60		rts				rts
.22aa					_CNSaveValue:
.22aa	5a		phy				phy
.22ab	a0 00		ldy #$00			ldy 	#0
.22ad	a5 08		lda $08				lda 	IFR0+IM0
.22af	91 26		sta ($26),y			sta 	(zTemp2),y
.22b1	c8		iny				iny
.22b2	a5 09		lda $09				lda 	IFR0+IM1
.22b4	91 26		sta ($26),y			sta 	(zTemp2),y
.22b6	c8		iny				iny
.22b7	a5 0a		lda $0a				lda 	IFR0+IM2
.22b9	91 26		sta ($26),y			sta 	(zTemp2),y
.22bb	c8		iny				iny
.22bc	a5 0b		lda $0b				lda 	IFR0+IExp
.22be	91 26		sta ($26),y			sta 	(zTemp2),y
.22c0	7a		ply				ply
.22c1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.22c2					IfCommand:
.22c2	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 				; Get the if test.
.22c5	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.22c7	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.22c9	d0 0a		bne $22d5			bne 	_IfStructured 				; we still support it.
.22cb	c8		iny				iny 								; consume THEN
.22cc	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero 			; is it zero
.22cf	f0 01		beq $22d2			beq 	_IfFail 					; if fail, go to next line
.22d1	60		rts				rts 								; if THEN just continue
.22d2					_IfFail:
.22d2	4c d3 13	jmp $13d3			jmp 	RUNEndOfLine
.22d5					_IfStructured:
.22d5	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero 			; is it zero
.22d8	d0 07		bne $22e1			bne 	_IfExit 					; if not, then continue normally.
.22da	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.22dc	a2 85		ldx #$85			ldx 	#PR_ENDIF
.22de	20 08 23	jsr $2308			jsr 	ScanForward 				; and run from there
.22e1					_IfExit:
.22e1	60		rts				rts
.22e2					ElseCode:
.22e2	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.22e4	aa		tax				tax 								; so just go to the structure exit
.22e5	20 08 23	jsr $2308			jsr 	ScanForward
.22e8	60		rts				rts
.22e9					EndIf:
.22e9	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.22ea					Command_REPEAT:
.22ea	a9 02		lda #$02			lda 	#STK_REPEAT
.22ec	20 ac 25	jsr $25ac			jsr 	StackOpen
.22ef	20 e0 25	jsr $25e0			jsr 	STKSaveCodePosition 		; save loop position
.22f2	60		rts				rts
.22f3					Command_UNTIL:
.22f3	a9 02		lda #$02			lda 	#STK_REPEAT
.22f5	20 d8 25	jsr $25d8			jsr 	StackCheckFrame
.22f8	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 				; work out the test
.22fb	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero 			; check if zero
.22fe	f0 04		beq $2304			beq 	_CULoopBack 				; if so keep looping
.2300	20 ca 25	jsr $25ca			jsr 	StackClose		 			; return
.2303	60		rts				rts
.2304					_CULoopBack:
.2304	20 f2 25	jsr $25f2			jsr 	STKLoadCodePosition 		; loop back
.2307	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2308					ScanForward:
.2308	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.230a	86 23		stx $23				stx 	zTemp0+1
.230c	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.230e					_ScanForwardLoop:
.230e	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2310	d0 0a		bne $231c			bne 	_ScanNoCheck
.2312	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2314	c5 22		cmp $22				cmp 	zTemp0
.2316	f0 49		beq $2361			beq 	_ScanExit
.2318	c5 23		cmp $23				cmp 	zTemp0+1
.231a	f0 45		beq $2361			beq 	_ScanExit
.231c					_ScanNoCheck:
.231c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.231e	c8		iny				iny
.231f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2321	f0 37		beq $235a			beq		_ScanDataItem
.2323	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2325	f0 33		beq $235a			beq 	_ScanDataItem
.2327	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2329	f0 1b		beq $2346			beq 	_ScanNextLine
.232b	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.232d	d0 01		bne $2330			bne 	_ScanNoShift
.232f	c8		iny				iny
.2330					_ScanNoShift:
.2330	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2332	b0 da		bcs $230e			bcs 	_ScanForwardLoop
.2334	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2336	90 d6		bcc $230e			bcc 	_ScanForwardLoop
.2338	aa		tax				tax 								; access the table to get the adjustment.
.2339	18		clc				clc
.233a	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.233c	7d 20 19	adc $1920,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.233f	85 24		sta $24				sta 	zTemp1
.2341	10 cb		bpl $230e			bpl		_ScanForwardLoop 			; error if -ve ?
.2343	4c 82 24	jmp $2482		jmp	ErrorV_structure
.2346					_ScanNextLine:
.2346	18		clc				clc	 								; forward to next line.
.2347	b2 18		lda ($18)			lda 	(codePtr)
.2349	65 18		adc $18				adc 	codePtr
.234b	85 18		sta $18				sta 	codePtr
.234d	90 02		bcc $2351			bcc 	_ScanNoCarry
.234f	e6 19		inc $19				inc 	codePtr+1
.2351					_ScanNoCarry:
.2351	a0 03		ldy #$03			ldy 	#3
.2353	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2355	d0 b7		bne $230e			bne 	_ScanForwardLoop
.2357	4c 82 24	jmp $2482		jmp	ErrorV_structure
.235a					_ScanDataItem:
.235a	98		tya				tya
.235b	38		sec				sec
.235c	71 18		adc ($18),y			adc 	(codePtr),y
.235e	a8		tay				tay
.235f	80 ad		bra $230e			bra 	_ScanForwardLoop
.2361					_ScanExit:
.2361	c8		iny				iny 								; consume final token.
.2362	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2363					ScanProcedures:
.2363	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.2365	48		pha				pha
.2366	a5 19		lda $19				lda 	codePtr+1
.2368	48		pha				pha
.2369	5a		phy				phy
.236a	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.236d	85 19		sta $19				sta 	codePtr+1
.236f	64 18		stz $18				stz 	codePtr
.2371					_SPLoop:
.2371	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2373	f0 18		beq $238d			beq 	_SPExit
.2375	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2377	b1 18		lda ($18),y			lda 	(codePtr),y
.2379	c9 88		cmp #$88			cmp 	#PR_PROC
.237b	d0 03		bne $2380			bne 	_SPNext
.237d	20 95 23	jsr $2395			jsr 	_SPSetupRecord
.2380					_SPNext:
.2380	18		clc				clc 								; forward to next
.2381	b2 18		lda ($18)			lda 	(codePtr)
.2383	65 18		adc $18				adc 	codePtr
.2385	85 18		sta $18				sta 	codePtr
.2387	90 e8		bcc $2371			bcc 	_SPLoop
.2389	e6 19		inc $19				inc 	codePtr+1
.238b	80 e4		bra $2371			bra 	_SPLoop
.238d					_SPExit:
.238d	7a		ply				ply
.238e	68		pla				pla
.238f	85 19		sta $19				sta 	codePtr+1
.2391	68		pla				pla
.2392	85 18		sta $18				sta 	codePtr
.2394	60		rts				rts
.2395					_SPSetupRecord:
.2395	c8		iny				iny 								; check identifier follows
.2396	b1 18		lda ($18),y			lda 	(codePtr),y
.2398	29 c0		and #$c0			and 	#$C0
.239a	c9 40		cmp #$40			cmp 	#$40
.239c	d0 27		bne $23c5			bne 	_SPSyntax
.239e	20 7c 28	jsr $287c			jsr 	VARGetInfo 					; get the information
.23a1	20 93 25	jsr $2593			jsr 	ERRCheckRParen 				; check right bracket follows.
.23a4	20 2e 28	jsr $282e			jsr 	VARFind 					; already exists ?
.23a7	b0 1f		bcs $23c8			bcs 	_SPUsed 					; error !
.23a9	20 da 27	jsr $27da			jsr 	VARCreate 					; create, XA points to the data.
.23ac	85 22		sta $22				sta 	zTemp0
.23ae	86 23		stx $23				stx 	zTemp0+1
.23b0	5a		phy				phy 								; save Y pos on stack
.23b1	a0 01		ldy #$01			ldy 	#1
.23b3	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.23b5	92 22		sta ($22)			sta 	(zTemp0)
.23b7	a5 19		lda $19				lda 	codePtr+1
.23b9	91 22		sta ($22),y			sta 	(zTemp0),y
.23bb	c8		iny				iny
.23bc	68		pla				pla
.23bd	91 22		sta ($22),y			sta 	(zTemp0),y
.23bf	c8		iny				iny
.23c0	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.23c2	91 22		sta ($22),y			sta 	(zTemp0),y
.23c4	60		rts				rts
.23c5					_SPSyntax:
.23c5	4c f6 23	jmp $23f6		jmp	ErrorV_syntax
.23c8					_SPUsed:
.23c8	4c 4d 25	jmp $254d		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.23cb					Command_WHILE:
.23cb	5a		phy				phy 								; save position of the test
.23cc	20 0d 16	jsr $160d			jsr 	EXPEvalNumber 				; work out the while test.
.23cf	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero 			; check if zero
.23d2	f0 0e		beq $23e2			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.23d4	98		tya				tya 								; position *after* test.
.23d5	7a		ply				ply 								; restore position before test, at WHILE
.23d6	88		dey				dey 								; so we execute the WHILE command again.
.23d7	48		pha				pha 								; push after test on the stack
.23d8	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.23da	20 ac 25	jsr $25ac			jsr 	StackOpen
.23dd	20 e0 25	jsr $25e0			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.23e0	7a		ply				ply 								; restore the position *after* the test
.23e1	60		rts				rts
.23e2					_WHExitLoop:
.23e2	68		pla				pla 								; throw post loop position
.23e3	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.23e5	aa		tax				tax
.23e6	20 08 23	jsr $2308			jsr 	ScanForward
.23e9	60		rts				rts
.23ea					Command_WEND:
.23ea	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.23ec	20 d8 25	jsr $25d8			jsr 	StackCheckFrame
.23ef	20 f2 25	jsr $25f2			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.23f2	20 ca 25	jsr $25ca			jsr 	StackClose		 			; erase the frame
.23f5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.23f6					ErrorV_syntax:
.23f6	20 cb 26	jsr $26cb		jsr	ErrorHandler
>23f9	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2401	45 72 72 6f 72 00
.2407					ErrorV_range:
.2407	20 cb 26	jsr $26cb		jsr	ErrorHandler
>240a	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2412	52 61 6e 67 65 00
.2418					ErrorV_value:
.2418	20 cb 26	jsr $26cb		jsr	ErrorHandler
>241b	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2423	75 65 00
.2426					ErrorV_type:
.2426	20 cb 26	jsr $26cb		jsr	ErrorHandler
>2429	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2431	73 6d 61 74 63 68 00
.2438					ErrorV_unimplemented:
.2438	20 cb 26	jsr $26cb		jsr	ErrorHandler
>243b	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2443	6c 65 6d 65 6e 74 65 64 00
.244c					ErrorV_assert:
.244c	20 cb 26	jsr $26cb		jsr	ErrorHandler
>244f	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2457	46 61 69 6c 00
.245c					ErrorV_internal:
.245c	20 cb 26	jsr $26cb		jsr	ErrorHandler
>245f	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2467	6c 20 45 72 72 6f 72 00
.246f					ErrorV_divzero:
.246f	20 cb 26	jsr $26cb		jsr	ErrorHandler
>2472	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>247a	42 79 20 5a 65 72 6f 00
.2482					ErrorV_structure:
.2482	20 cb 26	jsr $26cb		jsr	ErrorHandler
>2485	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>248d	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.249a					ErrorV_stop:
.249a	20 cb 26	jsr $26cb		jsr	ErrorHandler
>249d	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>24a5	20 53 74 6f 70 70 65 64 00
.24ae					ErrorV_data:
.24ae	20 cb 26	jsr $26cb		jsr	ErrorHandler
>24b1	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>24b9	44 61 74 61 00
.24be					ErrorV_redefine:
.24be	20 cb 26	jsr $26cb		jsr	ErrorHandler
>24c1	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>24c9	65 64 65 66 69 6e 65 64 00
.24d2					ErrorV_index:
.24d2	20 cb 26	jsr $26cb		jsr	ErrorHandler
>24d5	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>24dd	61 79 20 49 6e 64 65 78 00
.24e6					ErrorV_memory:
.24e6	20 cb 26	jsr $26cb		jsr	ErrorHandler
>24e9	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>24f1	4d 65 6d 6f 72 79 00
.24f8					ErrorV_uninitialised:
.24f8	20 cb 26	jsr $26cb		jsr	ErrorHandler
>24fb	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2503	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2513					ErrorV_string:
.2513	20 cb 26	jsr $26cb		jsr	ErrorHandler
>2516	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>251e	69 6e 67 20 4c 65 6e 67 74 68 00
.2529					ErrorV_variable:
.2529	20 cb 26	jsr $26cb		jsr	ErrorHandler
>252c	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2534	65 20 4d 69 73 73 69 6e 67 00
.253e					ErrorV_stack:
.253e	20 cb 26	jsr $26cb		jsr	ErrorHandler
>2541	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2549	75 6c 6c 00
.254d					ErrorV_dupproc:
.254d	20 cb 26	jsr $26cb		jsr	ErrorHandler
>2550	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2558	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2568	65 64 00
.256b					ErrorV_unknown:
.256b	20 cb 26	jsr $26cb		jsr	ErrorHandler
>256e	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2576	20 50 72 6f 63 65 64 75 72 65 00
.2581					ErrorV_break:
.2581	20 cb 26	jsr $26cb		jsr	ErrorHandler
>2584	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.258b					ERRCheckLParen:
.258b	b1 18		lda ($18),y			lda 	(codePtr),y
.258d	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.258f	d0 18		bne $25a9			bne 	ERRSyntaxError
.2591	c8		iny				iny
.2592	60		rts				rts
.2593					ERRCheckRParen:
.2593	b1 18		lda ($18),y			lda 	(codePtr),y
.2595	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2597	d0 10		bne $25a9			bne 	ERRSyntaxError
.2599	c8		iny				iny
.259a	60		rts				rts
.259b					ERRCheckComma:
.259b	b1 18		lda ($18),y			lda 	(codePtr),y
.259d	c9 99		cmp #$99			cmp 	#PR_COMMA
.259f	d0 08		bne $25a9			bne 	ERRSyntaxError
.25a1	c8		iny				iny
.25a2	60		rts				rts
.25a3					ERRCheckA:
.25a3	d1 18		cmp ($18),y			cmp 	(codePtr),y
.25a5	d0 02		bne $25a9			bne 	ERRSyntaxError
.25a7	c8		iny				iny
.25a8	60		rts				rts
.25a9					ERRSyntaxError:
.25a9	4c f6 23	jmp $23f6		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.25ac					StackOpen:
.25ac	48		pha				pha 								; save frame byte
.25ad	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.25af	0a		asl a				asl 	a 							; claim twice this for storage
.25b0	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.25b2	38		sec				sec 								; so basically subtracting from
.25b3	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.25b5	85 2a		sta $2a				sta 	basicStack
.25b7	b0 0a		bcs $25c3			bcs 	_SONoBorrow
>25b9	db						.byte 	$DB
.25ba	c6 2b		dec $2b				dec 	basicStack+1
.25bc	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.25be	cd 1b 06	cmp $061b			cmp 	basicStackEnd
.25c1	f0 04		beq $25c7			beq 	_SOMemory
.25c3					_SONoBorrow:
.25c3	68		pla				pla 								; get marker back and write at TOS
.25c4	92 2a		sta ($2a)			sta 	(basicStack)
.25c6	60		rts				rts
.25c7					_SOMemory:
.25c7	4c 3e 25	jmp $253e		jmp	ErrorV_stack
.25ca					StackClose:
.25ca	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.25cc	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.25ce	0a		asl a				asl 	a 							; claim twice this.
.25cf	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.25d1	85 2a		sta $2a				sta 	basicStack
.25d3	90 02		bcc $25d7			bcc 	_SCExit
.25d5	e6 2b		inc $2b				inc 	basicStack+1
.25d7					_SCExit:
.25d7	60		rts				rts
.25d8					StackCheckFrame:
.25d8	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.25da	d0 01		bne $25dd			bne 	_SCFError 					; different, we have structures mixed up
.25dc	60		rts				rts
.25dd					_SCFError:
.25dd	4c 82 24	jmp $2482		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.25e0					STKSaveCodePosition:
.25e0	5a		phy				phy
.25e1	98		tya				tya 								; save Y at offset 1.
.25e2	a0 01		ldy #$01			ldy 	#1
.25e4	91 2a		sta ($2a),y			sta 	(basicStack),y
.25e6	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.25e8	c8		iny				iny
.25e9	91 2a		sta ($2a),y			sta 	(basicStack),y
.25eb	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.25ed	c8		iny				iny
.25ee	91 2a		sta ($2a),y			sta 	(basicStack),y
.25f0	7a		ply				ply
.25f1	60		rts				rts
.25f2					STKLoadCodePosition:
.25f2	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.25f4	b1 2a		lda ($2a),y			lda 	(basicStack),y
.25f6	85 19		sta $19				sta 	codePtr+1
.25f8	88		dey				dey
.25f9	b1 2a		lda ($2a),y			lda 	(basicStack),y
.25fb	85 18		sta $18				sta 	codePtr
.25fd	88		dey				dey
.25fe	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.2600	a8		tay				tay
.2601	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2602					StackReset:
.2602	48		pha				pha 								; save top of memory
.2603	3a		dec a				dec 	a  							; end of stack = previous byte
.2604	85 2b		sta $2b				sta 	basicStack+1
.2606	a9 ff		lda #$ff			lda 	#$FF
.2608	85 2a		sta $2a				sta 	basicStack
.260a	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.260c	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.260e	68		pla				pla 								; allocate pages for stack.
.260f	38		sec				sec
.2610	e9 02		sbc #$02			sbc 	#STACKPAGES
.2612	8d 1b 06	sta $061b			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2615	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.061b					basicStackEnd:
>061b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2616					StringConcrete:
.2616	5a		phy				phy 								; save position on stack
.2617	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2619	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.261b	b0 41		bcs $265e			bcs 	_SALengthError
.261d	18		clc				clc 								; length of the new string
.261e	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2620	90 02		bcc $2624			bcc 	_SAHaveLength
.2622	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2624					_SAHaveLength:
.2624	48		pha				pha 								; save length to be allocated for concreting.
.2625	38		sec				sec
.2626	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2628	6d 1d 06	adc $061d			adc 	stringMemory
.262b	8d 1d 06	sta $061d			sta 	stringMemory
.262e	85 26		sta $26				sta 	zTemp2 						; update storage address
.2630	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2632	6d 1e 06	adc $061e			adc 	stringMemory+1
.2635	8d 1e 06	sta $061e			sta 	stringMemory+1
.2638	85 27		sta $27				sta 	zTemp2+1
.263a	68		pla				pla 								; save length allocated in +0
.263b	92 26		sta ($26)			sta 	(zTemp2)
.263d	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.263f	a0 01		ldy #$01			ldy 	#1
.2641	91 26		sta ($26),y			sta 	(zTemp2),y
.2643					_SACopyNewString:
.2643	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2645	a0 02		ldy #$02			ldy 	#2
.2647	91 26		sta ($26),y			sta 	(zTemp2),y
.2649	aa		tax				tax 								; bytes to copy
.264a	f0 0c		beq $2658			beq 	_SACopyExit
.264c	a0 01		ldy #$01			ldy 	#1 							; first character from here
.264e					_SACopyNSLoop:
.264e	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2650	c8		iny				iny 								; write two on in string storage
.2651	c8		iny				iny
.2652	91 26		sta ($26),y			sta 	(zTemp2),y
.2654	88		dey				dey
.2655	ca		dex				dex									; until copied all the string lengths.
.2656	d0 f6		bne $264e			bne 	_SACopyNSLoop
.2658					_SACopyExit:
.2658	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.265a	a5 26		lda $26				lda 	zTemp2
.265c	7a		ply				ply
.265d	60		rts				rts
.265e					_SALengthError:
.265e	4c 13 25	jmp $2513		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2661					StringSystemInitialise:
.2661	3a		dec a				dec 	a 							; make last byte of previous page.
.2662	8d 1e 06	sta $061e			sta 	stringMemory+1
.2665	85 23		sta $23				sta 	zTemp0+1
.2667	a9 ff		lda #$ff			lda 	#$FF
.2669	8d 1d 06	sta $061d			sta 	stringMemory
.266c	85 22		sta $22				sta 	zTemp0
.266e	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2670	92 22		sta ($22)			sta 	(zTemp0)
.2672	60		rts				rts
.2673					StringSpaceInitialise:
.2673	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2675	8d 1c 06	sta $061c			sta 	stringInitialised
.2678	ad 1d 06	lda $061d			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.267b	8d 1f 06	sta $061f			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.267e	ad 1e 06	lda $061e			lda 	stringMemory+1
.2681	3a		dec a				dec 	a
.2682	8d 20 06	sta $0620			sta 	stringTempPointer+1
.2685	20 5e 10	jsr $105e			jsr 	ClearCheckMemory
.2688	60		rts				rts
.2689					StringTempAllocate:
.2689	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.268b	b0 2e		bcs $26bb			bcs 	_STALength
.268d	2c 1c 06	bit $061c			bit 	stringInitialised 			; already initialised
.2690	30 05		bmi $2697			bmi 	_STAAllocate
.2692	48		pha				pha 								; save value to subtract.
.2693	20 73 26	jsr $2673			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2696	68		pla				pla 								; restore it
.2697					_STAAllocate:
.2697	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2699	18		clc				clc  								; deliberate allows one more
.269a	6d 1f 06	adc $061f			adc 	stringTempPointer 			; subtract from temp pointer
.269d	8d 1f 06	sta $061f			sta 	stringTempPointer
.26a0	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.26a2	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.26a4	ad 20 06	lda $0620			lda 	stringTempPointer+1
.26a7	69 ff		adc #$ff			adc 	#$FF
.26a9	8d 20 06	sta $0620			sta 	stringTempPointer+1
.26ac	85 2d		sta $2d				sta 	zsTemp+1
.26ae	85 09		sta $09				sta 	IFR0+IM1
.26b0	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.26b2	a9 80		lda #$80			lda 	#$80
.26b4	85 0b		sta $0b				sta 	IFR0+IExp
.26b6	a9 00		lda #$00			lda 	#0 							; clear the target string
.26b8	92 2c		sta ($2c)			sta 	(zsTemp)
.26ba	60		rts				rts
.26bb					_STALength:
.26bb	4c 13 25	jmp $2513		jmp	ErrorV_string
.26be					StringTempWrite:
.26be	5a		phy				phy
.26bf	48		pha				pha
.26c0	b2 2c		lda ($2c)			lda 	(zsTemp)
.26c2	1a		inc a				inc 	a
.26c3	92 2c		sta ($2c)			sta 	(zsTemp)
.26c5	a8		tay				tay
.26c6	68		pla				pla
.26c7	91 2c		sta ($2c),y			sta 	(zsTemp),y
.26c9	7a		ply				ply
.26ca	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.061c					stringInitialised:
>061c							.fill 	1
.061d					stringMemory:
>061d							.fill 	2
.061f					stringTempPointer:
>061f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.26cb					ErrorHandler:
.26cb	fa		plx				plx 								; get address of msg
.26cc	7a		ply				ply
.26cd	e8		inx				inx 								; bump past RTS
.26ce	d0 01		bne $26d1			bne 	_EHNoInc
.26d0	c8		iny				iny
.26d1					_EHNoInc:
.26d1	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.26d4	ad 21 06	lda $0621			lda 	ERRLine 					; direct command ?
.26d7	0d 22 06	ora $0622			ora 	ERRLine+1
.26da	f0 10		beq $26ec			beq 	_EHNoNumber
.26dc	a2 ef		ldx #$ef			ldx 	#_EHAtMsg & $FF
.26de	a0 26		ldy #$26			ldy 	#_EHAtMsg >> 8
.26e0	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.26e3	ad 21 06	lda $0621			lda 	ERRLine 					; line number -> XA
.26e6	ae 22 06	ldx $0622			ldx 	ERRLine+1
.26e9	20 f4 26	jsr $26f4			jsr 	WriteIntXA
.26ec					_EHNoNumber:
.26ec	4c 1d 27	jmp $271d			jmp 	WarmStartNewLine
.26ef					_EHAtMsg:
>26ef	20 61 74 20 00					.text 	" at ",0
.26f4					WriteIntXA:
.26f4	da		phx				phx
.26f5	48		pha				pha
.26f6	a2 08		ldx #$08			ldx 	#IFR0
.26f8	20 8a 2e	jsr $2e8a			jsr 	IFloatPushRx
.26fb	68		pla				pla
.26fc	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.26ff	68		pla				pla
.2700	85 09		sta $09				sta 	IFR0+IM1
.2702	a9 0a		lda #$0a			lda 	#10 						; decimal
.2704	20 dc 2c	jsr $2cdc			jsr 	IFloatIntegerToStringR0	 	; convert
.2707	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.270a	a2 08		ldx #$08			ldx 	#IFR0
.270c	20 ab 2e	jsr $2eab			jsr 	IFloatPullRx
.270f	60		rts				rts
.2710					NotImplemented:
.2710	4c 38 24	jmp $2438		jmp	ErrorV_unimplemented
.0621					ERRLine:
>0621							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2713					WarmStart:
.2713	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2715	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2718	a9 6b		lda #$6b			lda 	#"k"
.271a	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.271d					WarmStartNewLine:
.271d	a9 0d		lda #$0d			lda 	#13
.271f	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2722					WarmStartNoPrompt:
.2722	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2724	9a		txs				txs
.2725	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.2728	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.272a	f0 f1		beq $271d			beq 	WarmStartNewLine
.272c	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.272e	d0 f2		bne $2722			bne 	WarmStartNoPrompt
.2730	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.2733	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2734	d0 01		bne $2737			bne 	_WSSkip
.2736	c8		iny				iny
.2737					_WSSkip:
.2737	86 26		stx $26				stx 	zTemp2 						; save address
.2739	84 27		sty $27				sty 	zTemp2+1
.273b	a2 65		ldx #$65			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.273d	a0 27		ldy #$27			ldy 	#TOKGetCharacter >> 8
.273f	38		sec				sec
.2740	20 b0 1e	jsr $1eb0			jsr 	TOKTokenise
.2743	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2746	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2749	d0 0b		bne $2756			bne 	_WSLineEdit
.274b	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.274d	85 18		sta $18				sta 	codePtr
.274f	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2751	85 19		sta $19				sta 	codePtr+1
.2753	4c de 13	jmp $13de			jmp 	RUNNewLine
.2756					_WSLineEdit:
.2756	20 8b 1d	jsr $1d8b			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2759	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.275c	c9 04		cmp #$04			cmp 	#4
.275e	f0 03		beq $2763			beq 	_WSNoInsert
.2760	20 d5 1d	jsr $1dd5			jsr 	PGMInsertLine				; if not, maybe insert
.2763					_WSNoInsert:
.2763	80 bd		bra $2722			bra 	WarmStartNoPrompt
.2765					TOKGetCharacter:
.2765	b2 26		lda ($26)			lda 	(zTemp2)
.2767	90 06		bcc $276f			bcc 	_GSNoIncrement
.2769	e6 26		inc $26				inc 	zTemp2
.276b	d0 02		bne $276f			bne 	_GSNoIncrement
.276d	e6 27		inc $27				inc 	zTemp2+1
.276f					_GSNoIncrement:
.276f	c9 00		cmp #$00			cmp 	#0
.2771	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2772					VARArrayLookup:
.2772	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2774	86 23		stx $23				stx 	zTemp0+1
.2776	b2 22		lda ($22)			lda 	(zTemp0)
.2778	48		pha				pha
.2779	5a		phy				phy
.277a	a0 01		ldy #$01			ldy 	#1
.277c	b1 22		lda ($22),y			lda 	(zTemp0),y
.277e	7a		ply				ply
.277f	48		pha				pha
.2780	20 1f 16	jsr $161f			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2783	68		pla				pla 								; array address to zTemp0
.2784	85 23		sta $23				sta 	zTemp0+1
.2786	68		pla				pla
.2787	85 22		sta $22				sta 	zTemp0
.2789	5a		phy				phy 								; save codePtr position.
.278a	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.278c	b1 22		lda ($22),y			lda 	(zTemp0),y
.278e	48		pha				pha 								; save bit 15 on stack.
.278f	29 7f		and #$7f			and 	#$7F
.2791	85 24		sta $24				sta 	zTemp1
.2793	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2795	d2 22		cmp ($22)			cmp 	(zTemp0)
.2797	a5 09		lda $09				lda 	IFR0+IM1
.2799	e5 24		sbc $24				sbc 	zTemp1
.279b	b0 3a		bcs $27d7			bcs 	_VALIndex
.279d	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.279f	c9 40		cmp #$40			cmp 	#$40
.27a1	b0 34		bcs $27d7			bcs 	_VALIndex
.27a3	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.27a5	26 09		rol $09				rol 	IFR0+IM1
.27a7	fa		plx				plx 								; get msb of size -> X
.27a8	30 04		bmi $27ae			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.27aa	06 08		asl $08				asl 	IFR0+IM0
.27ac	26 09		rol $09				rol 	IFR0+IM1
.27ae					_VARNotX4:
.27ae	18		clc				clc 								; add the two for the size bytes
.27af	a5 08		lda $08				lda 	IFR0+IM0
.27b1	69 02		adc #$02			adc 	#2
.27b3	85 08		sta $08				sta 	IFR0+IM0
.27b5	90 02		bcc $27b9			bcc 	_VARNoCarry1
.27b7	e6 09		inc $09				inc 	IFR0+IM1
.27b9					_VARNoCarry1:
.27b9	18		clc				clc 								; calculate the element address and push to stack.
.27ba	a5 08		lda $08				lda 	IFR0+IM0
.27bc	65 22		adc $22				adc 	zTemp0
.27be	48		pha				pha
.27bf	a5 09		lda $09				lda 	IFR0+IM1
.27c1	65 23		adc $23				adc 	zTemp0+1
.27c3	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.27c5	30 04		bmi $27cb			bmi 	_VARHasSubLevel
.27c7	aa		tax				tax 								; address in XA
.27c8	68		pla				pla
.27c9	7a		ply				ply 								; restore Y and exit
.27ca	60		rts				rts
.27cb					_VARHasSubLevel:
.27cb	aa		tax				tax 								; get link address in XA
.27cc	68		pla				pla
.27cd	7a		ply				ply 								; restore code position.
.27ce	48		pha				pha
.27cf	20 9b 25	jsr $259b			jsr 	ERRCheckComma 				; comma required.
.27d2	68		pla				pla
.27d3	20 72 27	jsr $2772			jsr 	VARArrayLookup 				; call it recursively
.27d6	60		rts				rts
.27d7					_VALIndex:
.27d7	4c d2 24	jmp $24d2		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.27da					VARCreate:
.27da	5a		phy				phy
.27db	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.27dd	a2 00		ldx #$00			ldx 	#0
.27df	20 35 10	jsr $1035			jsr 	AllocateMemory
.27e2	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.27e4	86 25		stx $25				stx 	zTemp1+1
.27e6	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.27e8	ad 25 06	lda $0625			lda 	VARHash
.27eb	91 24		sta ($24),y			sta 	(zTemp1),y
.27ed	c8		iny				iny 								; put address of name into +3,+4
.27ee	ad 23 06	lda $0623			lda 	VARNameAddress
.27f1	91 24		sta ($24),y			sta 	(zTemp1),y
.27f3	c8		iny				iny
.27f4	ad 24 06	lda $0624			lda 	VARNameAddress+1
.27f7	91 24		sta ($24),y			sta 	(zTemp1),y
.27f9	ad 26 06	lda $0626			lda 	VARType
.27fc	29 01		and #$01			and 	#1
.27fe	f0 06		beq $2806			beq 	_CVNotString
.2800	a0 08		ldy #$08			ldy 	#5+3
.2802	a9 80		lda #$80			lda 	#$80
.2804	91 24		sta ($24),y			sta 	(zTemp1),y
.2806					_CVNotString:
.2806	ad 47 06	lda $0647			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2809	85 22		sta $22				sta 	zTemp0
.280b	ad 48 06	lda $0648			lda 	VARHashEntry+1
.280e	85 23		sta $23				sta 	zTemp0+1
.2810	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2812	b2 22		lda ($22)			lda 	(zTemp0)
.2814	92 24		sta ($24)			sta 	(zTemp1)
.2816	b1 22		lda ($22),y			lda 	(zTemp0),y
.2818	91 24		sta ($24),y			sta 	(zTemp1),y
.281a	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.281c	92 22		sta ($22)			sta 	(zTemp0)
.281e	a5 25		lda $25				lda 	zTemp1+1
.2820	91 22		sta ($22),y			sta 	(zTemp0),y
.2822	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2824	a6 25		ldx $25				ldx 	zTemp1+1
.2826	18		clc				clc 								; add 5 to point to the data.
.2827	69 05		adc #$05			adc 	#5
.2829	90 01		bcc $282c			bcc 	_VCNoCarry
.282b	e8		inx				inx
.282c					_VCNoCarry:
.282c	7a		ply				ply
.282d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.282e					VARFind:
.282e	5a		phy				phy
.282f	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2831	b1 22		lda ($22),y			lda 	(zTemp0),y
.2833	85 25		sta $25				sta 	zTemp1+1
.2835	f0 1c		beq $2853			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2837	b2 22		lda ($22)			lda 	(zTemp0)
.2839	85 24		sta $24				sta 	zTemp1
.283b					_VFLoop:
.283b	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.283d	b1 24		lda ($24),y			lda 	(zTemp1),y
.283f	cd 25 06	cmp $0625			cmp 	VARHash
.2842	f0 12		beq $2856			beq 	_VFHashesMatch 				; if so, check the name.
.2844					_VFNext:
.2844	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2846	aa		tax				tax
.2847	a0 01		ldy #$01			ldy 	#1
.2849	b1 24		lda ($24),y			lda 	(zTemp1),y
.284b	85 25		sta $25				sta 	zTemp1+1
.284d	86 24		stx $24				stx 	zTemp1
.284f	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2851	d0 e8		bne $283b			bne 	_VFLoop
.2853					_VFExitFail:
.2853	7a		ply				ply
.2854	18		clc				clc
.2855	60		rts				rts
.2856					_VFHashesMatch:
.2856	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2858	b1 24		lda ($24),y			lda 	(zTemp1),y
.285a	85 26		sta $26				sta 	zTemp2
.285c	c8		iny				iny
.285d	b1 24		lda ($24),y			lda 	(zTemp1),y
.285f	85 27		sta $27				sta 	zTemp2+1
.2861	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2863					_VFNameCompLoop:
.2863	c8		iny				iny 								; char at a time
.2864	b9 27 06	lda $0627,y			lda 	VARBuffer,y
.2867	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2869	d0 d9		bne $2844			bne 	_VFNext						; next entry if different.
.286b	c9 7c		cmp #$7c			cmp 	#$7C
.286d	90 f4		bcc $2863			bcc 	_VFNameCompLoop 			; until done the whole lot.
.286f	18		clc				clc
.2870	a5 24		lda $24				lda 	zTemp1
.2872	a6 25		ldx $25				ldx 	zTemp1+1
.2874	69 05		adc #$05			adc 	#5
.2876	90 01		bcc $2879			bcc 	_VFNNoCarry
.2878	e8		inx				inx
.2879					_VFNNoCarry:
.2879	7a		ply				ply
.287a	38		sec				sec
.287b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.287c					VARGetInfo:
.287c	98		tya				tya 								; calculate the address of the identifier start.
.287d	18		clc				clc
.287e	65 18		adc $18				adc 	codePtr
.2880	8d 23 06	sta $0623			sta 	VARNameAddress
.2883	a5 19		lda $19				lda 	codePtr+1
.2885	69 00		adc #$00			adc 	#0
.2887	8d 24 06	sta $0624			sta 	VARNameAddress+1
.288a	9c 25 06	stz $0625			stz 	VARHash
.288d	a2 00		ldx #$00			ldx 	#0
.288f					_VARCopyName:
.288f	18		clc				clc 								; update the sum hash.
.2890	ad 25 06	lda $0625			lda 	VARHash
.2893	71 18		adc ($18),y			adc 	(codePtr),y
.2895	8d 25 06	sta $0625			sta 	VARHash
.2898	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.289a	c8		iny				iny
.289b	9d 27 06	sta $0627,x			sta 	VARBuffer,x
.289e	e8		inx				inx
.289f	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.28a1	90 ec		bcc $288f			bcc 	_VARCopyName
.28a3	8d 26 06	sta $0626			sta 	VARType 					; save type byte
.28a6	29 03		and #$03			and 	#3 							; type is 0-3
.28a8	0a		asl a				asl 	a
.28a9	0a		asl a				asl 	a
.28aa	85 22		sta $22				sta 	zTemp0
.28ac	ad 25 06	lda $0625			lda 	VARHash 					; force into range of hash entries per type.
.28af	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.28b1	65 22		adc $22				adc 	zTemp0 						; index of hash table
.28b3	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.28b4	69 49		adc #$49			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.28b6	85 22		sta $22				sta 	zTemp0
.28b8	8d 47 06	sta $0647			sta 	VARHashEntry
.28bb	a9 06		lda #$06			lda 	#VARHashTables >> 8
.28bd	69 00		adc #$00			adc 	#0
.28bf	85 23		sta $23				sta 	zTemp0+1
.28c1	8d 48 06	sta $0648			sta 	VARHashEntry+1
.28c4	60		rts				rts
.28c5					VARClearHashTables:
.28c5	a2 00		ldx #$00			ldx 	#0
.28c7					_VCHRLoop:
.28c7	a9 00		lda #$00			lda 	#0
.28c9	9d 49 06	sta $0649,x			sta 	VARHashTables,x
.28cc	e8		inx				inx
.28cd	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.28cf	d0 f6		bne $28c7			bne 	_VCHRLoop
.28d1	60		rts				rts
.0623					VARNameAddress:
>0623							.fill 	2
.0625					VARHash:
>0625							.fill 	1
.0626					VARType:
>0626							.fill 	1
.0627					VARBuffer:
>0627							.fill 	32
.0647					VARHashEntry:
>0647							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0649					VARHashTables:
>0649							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.28d2					VARCheckSimple:
.28d2	aa		tax				tax 								; save in X
.28d3	b1 18		lda ($18),y			lda 	(codePtr),y
.28d5	c9 7c		cmp #$7c			cmp 	#$7C
.28d7	d0 15		bne $28ee			bne 	_VCSComplex
.28d9	c8		iny				iny 								; consume the second byte, the type.
.28da	8a		txa				txa  								; character (40-7F) x 4
.28db	0a		asl a				asl 	a
.28dc	0a		asl a				asl  	a
.28dd	18		clc				clc
.28de	69 69		adc #$69			adc 	#FastVariables & $FF
.28e0	85 08		sta $08				sta 	IFR0+IM0
.28e2	a9 06		lda #$06			lda 	#FastVariables >> 8
.28e4	69 00		adc #$00			adc 	#0
.28e6	85 09		sta $09				sta 	IFR0+IM1
.28e8	64 0a		stz $0a				stz 	IFR0+IM2
.28ea	64 0b		stz $0b				stz 	IFR0+IExp
.28ec	38		sec				sec 								; it's a reference
.28ed	60		rts				rts
.28ee					_VCSComplex:
.28ee	88		dey				dey	 								; extract information.
.28ef	20 7c 28	jsr $287c			jsr 	VARGetInfo
.28f2	20 2e 28	jsr $282e			jsr 	VARFind 					; search for variable
.28f5	b0 0a		bcs $2901			bcs 	_VCSHaveVariable
.28f7	ad 26 06	lda $0626			lda 	VARType 					; error if arrays, cannot autocreate
.28fa	29 02		and #$02			and 	#2
.28fc	d0 25		bne $2923			bne 	_VCNoCreate
.28fe	20 da 27	jsr $27da			jsr 	VARCreate 					; create variable
.2901					_VCSHaveVariable:
.2901	48		pha				pha 								; save LSB on the stack
.2902	ad 26 06	lda $0626			lda 	VARType 					; get var type, and shift bit 1 into carry
.2905	6a		ror a				ror 	a
.2906	6a		ror a				ror 	a
.2907	68		pla				pla 								; restore LSB
.2908	90 08		bcc $2912			bcc 	_VCSNotArray 				; skip if not an array
.290a	20 72 27	jsr $2772			jsr 	VARArrayLookup 				; look for subscripts.
.290d	48		pha				pha 								; check )
.290e	20 93 25	jsr $2593			jsr 	ERRCheckRParen
.2911	68		pla				pla
.2912					_VCSNotArray:
.2912	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2914	85 08		sta $08				sta 	IFR0+IM0
.2916	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2918	ad 26 06	lda $0626			lda 	VARType 					; number/string bit into carry
.291b	6a		ror a				ror 	a
.291c	a9 00		lda #$00			lda 	#0
.291e	6a		ror a				ror 	a 							; now $00 or $80
.291f	85 0b		sta $0b				sta 	IFR0+IExp
.2921	38		sec				sec 								; it's a reference
.2922	60		rts				rts
.2923					_VCNoCreate:
.2923	4c f8 24	jmp $24f8		jmp	ErrorV_uninitialised
.0669					FastVariables:
>0669							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.2926					IFInitialise:
.2926	9c d9 06	stz $06d9			stz 	IFStackIndex
.2929	60		rts				rts
.292a					IFloatSubtract:
.292a	da		phx				phx
.292b	a2 08		ldx #$08			ldx 	#IFR0
.292d	20 46 2f	jsr $2f46			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2930	fa		plx				plx
.2931					IFloatAdd:
.2931	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2933	05 0b		ora $0b				ora 	IFR0+IExp
.2935	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2937	d0 4e		bne $2987			bne 	_IFloatAddDecimals 			; decimal version.
.2939					_IFAddSubMantissa:
.2939	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.293b	45 0b		eor $0b				eor 	IFR0+IExp
.293d	29 40		and #$40			and 	#IFSign
.293f	d0 21		bne $2962			bne 	_IFloatSubMantissa
.2941	18		clc				clc 								; do the actual addition
.2942	a5 08		lda $08			lda 	IFR0+IM0
.2944	75 00		adc $00,x		adc 		IM0,x
.2946	85 08		sta $08			sta 	IFR0+IM0
.2948	a5 09		lda $09			lda 	IFR0+IM1
.294a	75 01		adc $01,x		adc 		IM1,x
.294c	85 09		sta $09			sta 	IFR0+IM1
.294e	a5 0a		lda $0a			lda 	IFR0+IM2
.2950	75 02		adc $02,x		adc 		IM2,x
.2952	85 0a		sta $0a			sta 	IFR0+IM2
.2954	10 29		bpl $297f			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2956	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2958	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftRight
.295b	20 94 2f	jsr $2f94			jsr 	IFloatIncExponent
.295e	d0 1f		bne $297f			bne 	_IFloatAddExit
.2960	38		sec				sec 								; overflowed numerically.
.2961	60		rts				rts
.2962					_IFloatSubMantissa:
.2962	38		sec				sec 								; do the subtraction R0-Rx
.2963	a5 08		lda $08			lda 	IFR0+IM0
.2965	f5 00		sbc $00,x		sbc 		IM0,x
.2967	85 08		sta $08			sta 	IFR0+IM0
.2969	a5 09		lda $09			lda 	IFR0+IM1
.296b	f5 01		sbc $01,x		sbc 		IM1,x
.296d	85 09		sta $09			sta 	IFR0+IM1
.296f	a5 0a		lda $0a			lda 	IFR0+IM2
.2971	f5 02		sbc $02,x		sbc 		IM2,x
.2973	85 0a		sta $0a			sta 	IFR0+IM2
.2975	b0 08		bcs $297f			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2977	a2 08		ldx #$08			ldx 	#IFR0
.2979	20 4e 2f	jsr $2f4e			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.297c	20 46 2f	jsr $2f46			jsr 	IFloatNegate 				; negate
.297f					_IFloatAddExit:
.297f	18		clc				clc
.2980	60		rts				rts
.2981					_IFloatZeroAdd:
.2981	fa		plx				plx 								; return this value in R0
.2982	20 cc 2e	jsr $2ecc			jsr 	IFloatCopyFromRegister
.2985	18		clc				clc
.2986	60		rts				rts
.2987					_IFloatAddDecimals:
.2987	20 34 2f	jsr $2f34			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.298a	f0 f3		beq $297f			beq 	_IFloatAddExit
.298c	20 72 2f	jsr $2f72			jsr 	IFloatNormalise 			; normalise RX
.298f	da		phx				phx 								; normalise R0
.2990	a2 08		ldx #$08			ldx 	#IFR0
.2992	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero
.2995	f0 ea		beq $2981			beq 	_IFloatZeroAdd
.2997	20 72 2f	jsr $2f72			jsr 	IFloatNormalise
.299a	fa		plx				plx
.299b	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.299d	29 3f		and #$3f			and 	#IFXMask
.299f	38		sec				sec
.29a0	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.29a2	85 20		sta $20				sta 	iTemp0
.29a4	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.29a6	29 3f		and #$3f			and 	#IFXMask
.29a8	38		sec				sec
.29a9	e9 20		sbc #$20			sbc 	#$20
.29ab	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.29ad	b0 02		bcs $29b1			bcs 	_IFloatHaveLarger
.29af	a5 20		lda $20				lda 	iTemp0
.29b1					_IFloatHaveLarger:
.29b1	18		clc				clc 								; get the actual one back.
.29b2	69 20		adc #$20			adc 	#$20 						; shift both to that.
.29b4	20 c1 29	jsr $29c1			jsr 	_IFShiftXToA
.29b7	da		phx				phx
.29b8	a2 08		ldx #$08			ldx 	#IFR0
.29ba	20 c1 29	jsr $29c1			jsr 	_IFShiftXToA
.29bd	fa		plx				plx
.29be	4c 39 29	jmp $2939			jmp 	_IFAddSubMantissa 			; do the adding bit.
.29c1					_IFShiftXToA:
.29c1	8d d1 06	sta $06d1			sta 	IFTarget
.29c4	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero 			; check adding zero ?
.29c7	f0 11		beq $29da			beq 	_IFSXExit
.29c9					_IFSXLoop:
.29c9	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.29cb	29 3f		and #$3f			and 	#IFXMask
.29cd	cd d1 06	cmp $06d1			cmp 	IFTarget
.29d0	f0 08		beq $29da			beq 	_IFSXExit
.29d2	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftRight
.29d5	20 94 2f	jsr $2f94			jsr 	IFloatIncExponent
.29d8	80 ef		bra $29c9			bra 	_IFSXLoop
.29da					_IFSXExit:
.29da	60		rts				rts
.06d1					IFTarget:
>06d1							.fill 	1
.29db					IFloatMultiply:
.29db	8e d1 06	stx $06d1			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.29de	20 96 2a	jsr $2a96			jsr 	IFCalculateNewSign
.29e1	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.29e3	05 0b		ora $0b				ora 	IFR0+IExp
.29e5	29 3f		and #$3f			and 	#IFXMask
.29e7	15 01		ora $01,x			ora 	IM1,x
.29e9	05 09		ora $09				ora 	IFR0+IM1
.29eb	15 02		ora $02,x			ora 	IM2,x
.29ed	05 0a		ora $0a				ora 	IFR0+IM2
.29ef	d0 0a		bne $29fb			bne 	_IFMStandard
.29f1	20 17 2f	jsr $2f17			jsr 	IFloatMultiply8BitRx
.29f4	ad d3 06	lda $06d3			lda 	IFNewSign
.29f7	85 0b		sta $0b				sta 	IFR0+IExp
.29f9	18		clc				clc
.29fa	60		rts				rts
.29fb					_IFMStandard:
.29fb	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.29fd	20 8d 2a	jsr $2a8d			jsr 	IFMSignExtend
.2a00	8d d2 06	sta $06d2			sta 	IFNewExponent
.2a03	a5 0b		lda $0b				lda 	IFR0+IExp
.2a05	20 8d 2a	jsr $2a8d			jsr 	IFMSignExtend
.2a08	18		clc				clc
.2a09	6d d2 06	adc $06d2			adc 	IFNewExponent
.2a0c	8d d2 06	sta $06d2			sta 	IFNewExponent
.2a0f	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2a11	20 dd 2e	jsr $2edd			jsr 	IFloatCopyToRegister
.2a14	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2a16	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.2a19					_IFMLoop:
.2a19	a2 14		ldx #$14			ldx 	#IFRTemp
.2a1b	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero
.2a1e	f0 3a		beq $2a5a			beq 	_IFMExit
.2a20	ae d1 06	ldx $06d1			ldx 	IFTarget 					; look at adder MSB
.2a23	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2a25	10 03		bpl $2a2a			bpl	 	_IFMTargetOkay
.2a27	20 7e 2a	jsr $2a7e			jsr 	_IFMShiftAll
.2a2a					_IFMTargetOkay:
.2a2a	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2a2c	29 01		and #$01			and 	#1
.2a2e	f0 16		beq $2a46			beq 	_IFMNoAdd
.2a30	ae d1 06	ldx $06d1			ldx 	IFTarget 					; add adder
.2a33	18		clc				clc
.2a34	a5 08		lda $08			lda 	IFR0+IM0
.2a36	75 00		adc $00,x		adc 		IM0,x
.2a38	85 08		sta $08			sta 	IFR0+IM0
.2a3a	a5 09		lda $09			lda 	IFR0+IM1
.2a3c	75 01		adc $01,x		adc 		IM1,x
.2a3e	85 09		sta $09			sta 	IFR0+IM1
.2a40	a5 0a		lda $0a			lda 	IFR0+IM2
.2a42	75 02		adc $02,x		adc 		IM2,x
.2a44	85 0a		sta $0a			sta 	IFR0+IM2
.2a46					_IFMNoAdd:
.2a46	a5 0a		lda $0a				lda 	IFR0+IM2
.2a48	10 03		bpl $2a4d			bpl 	_IFMResultOkay
.2a4a	20 7e 2a	jsr $2a7e			jsr 	_IFMShiftAll
.2a4d					_IFMResultOkay:
.2a4d	a2 14		ldx #$14			ldx 	#IFRTemp
.2a4f	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftRight
.2a52	ae d1 06	ldx $06d1			ldx 	IFTarget
.2a55	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.2a58	80 bf		bra $2a19			bra 	_IFMLoop
.2a5a					_IFMExit:
.2a5a	ad d2 06	lda $06d2			lda 	IFNewExponent 				; validate new exponent.
.2a5d	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2a5f	90 0f		bcc $2a70			bcc 	_IFMOkay
.2a61	c9 e0		cmp #$e0			cmp 	#$E0
.2a63	b0 0b		bcs $2a70			bcs 	_IFMOkay
.2a65	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2a67	f0 13		beq $2a7c			beq 	_IFMError
.2a69	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2a6b	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.2a6e	18		clc				clc
.2a6f	60		rts				rts
.2a70					_IFMOkay:
.2a70	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2a72	0d d3 06	ora $06d3			ora 	IFNewSign
.2a75	85 0b		sta $0b				sta 	IFR0+IExp
.2a77	18		clc				clc
.2a78	60		rts				rts
.2a79	4c ff ff	jmp $ffff			jmp 	$FFFF
.2a7c					_IFMError:
.2a7c	38		sec				sec
.2a7d	60		rts				rts
.2a7e					_IFMShiftAll:
.2a7e	a2 08		ldx #$08			ldx 	#IFR0
.2a80	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftRight
.2a83	ae d1 06	ldx $06d1			ldx 	IFTarget
.2a86	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftRight
.2a89	ee d2 06	inc $06d2			inc 	IFNewExponent
.2a8c	60		rts				rts
.2a8d					IFMSignExtend:
.2a8d	29 3f		and #$3f			and 	#IFXMask
.2a8f	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2a91	90 02		bcc $2a95			bcc 	_IFMNoSXX
.2a93	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2a95					_IFMNoSXX:
.2a95	60		rts				rts
.2a96					IFCalculateNewSign:
.2a96	b5 03		lda $03,x			lda 	IExp,x
.2a98	45 0b		eor $0b				eor 	IFR0+IExp
.2a9a	29 40		and #$40			and 	#IFSign
.2a9c	8d d3 06	sta $06d3			sta 	IFNewSign
.2a9f	60		rts				rts
.06d2					IFNewExponent:
>06d2							.fill 	1
.06d3					IFNewSign:
>06d3							.fill 	1
.2aa0					IFloatDivideInteger:
.2aa0	20 b9 2a	jsr $2ab9			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2aa3	b0 06		bcs $2aab			bcs 	_IFDIExit
.2aa5	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2aa7	20 cc 2e	jsr $2ecc			jsr 	IFloatCopyFromRegister
.2aaa	18		clc				clc
.2aab					_IFDIExit:
.2aab	60		rts				rts
.2aac					IFloatModulusInteger:
.2aac	20 b9 2a	jsr $2ab9			jsr 	IFloatDivideIntegerCommon
.2aaf	b0 07		bcs $2ab8			bcs 	_IFMIExit
.2ab1	ae d1 06	ldx $06d1			ldx 	IFTarget
.2ab4	20 cc 2e	jsr $2ecc			jsr 	IFloatCopyFromRegister
.2ab7	18		clc				clc
.2ab8					_IFMIExit:
.2ab8	60		rts				rts
.2ab9					IFloatDivideIntegerCommon:
.2ab9	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.2abc	20 96 2a	jsr $2a96			jsr 	IFCalculateNewSign 			; calculate sign of result
.2abf	20 e7 2a	jsr $2ae7			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2ac2	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2ac4	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero
.2ac7	f0 1c		beq $2ae5			beq 	_IFDIDivZero
.2ac9	ae d1 06	ldx $06d1			ldx 	IFTarget 					; zero Rx (S1)
.2acc	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.2acf	5a		phy				phy
.2ad0	a0 18		ldy #$18			ldy 	#24
.2ad2					_IFDILoop:
.2ad2	20 f8 2a	jsr $2af8			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2ad5	20 04 2b	jsr $2b04			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2ad8	88		dey				dey
.2ad9	d0 f7		bne $2ad2			bne 	_IFDILoop 					; do it 24 times
.2adb	7a		ply				ply
.2adc	ad d3 06	lda $06d3			lda 	IFNewSign 					; set sign of result.
.2adf	29 40		and #$40			and 	#IFSign
.2ae1	85 17		sta $17				sta 	IFRTemp+IExp
.2ae3	18		clc				clc 								; is okay.
.2ae4	60		rts				rts
.2ae5					_IFDIDivZero:
.2ae5	38		sec				sec
.2ae6	60		rts				rts
.2ae7					IFDCopyRXToRTemp:
.2ae7	b5 00		lda $00,x			lda 	IM0,x
.2ae9	85 14		sta $14				sta 	IFRTemp+IM0
.2aeb	b5 01		lda $01,x			lda 	IM1,x
.2aed	85 15		sta $15				sta 	IFRTemp+IM1
.2aef	b5 02		lda $02,x			lda 	IM2,x
.2af1	85 16		sta $16				sta 	IFRTemp+IM2
.2af3	b5 03		lda $03,x			lda 	IExp,x
.2af5	85 17		sta $17				sta 	IFRTemp+IExp
.2af7	60		rts				rts
.2af8					IFDShiftSTempS1Left:
.2af8	a2 14		ldx #$14			ldx 	#IFRTemp
.2afa	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft
.2afd	ae d1 06	ldx $06d1			ldx 	IFTarget
.2b00	20 63 2f	jsr $2f63			jsr 	IFloatRotateLeft
.2b03	60		rts				rts
.2b04					IFDTrySubtract:
.2b04	ae d1 06	ldx $06d1			ldx 	IFTarget 					; s1 = Rx
.2b07	38		sec				sec 								; subtract, saving the results on the stack.
.2b08	b5 00		lda $00,x			lda 	IM0,x
.2b0a	e5 08		sbc $08				sbc 	IFR0+IM0
.2b0c	48		pha				pha
.2b0d	b5 01		lda $01,x			lda 	IM1,x
.2b0f	e5 09		sbc $09				sbc 	IFR0+IM1
.2b11	48		pha				pha
.2b12	b5 02		lda $02,x			lda 	IM2,x
.2b14	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2b16	b0 03		bcs $2b1b			bcs 	_IFDCanSubtract
.2b18	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2b19	68		pla				pla
.2b1a	60		rts				rts
.2b1b					_IFDCanSubtract:
.2b1b	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2b1d	68		pla				pla
.2b1e	95 01		sta $01,x			sta 	IM1,x
.2b20	68		pla				pla
.2b21	95 00		sta $00,x			sta 	IM0,x
.2b23	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2b25	d0 06		bne $2b2d			bne 	_IFDCSExit
.2b27	e6 15		inc $15				inc 	IFRTemp+IM1
.2b29	d0 02		bne $2b2d			bne 	_IFDCSExit
.2b2b	e6 16		inc $16				inc 	IFRTemp+IM2
.2b2d					_IFDCSExit:
.2b2d	60		rts				rts
.2b2e					IFloatBitwiseAnd:
.2b2e	5a		phy				phy
.2b2f	20 73 2b	jsr $2b73			jsr 	IFPreProcessBitwise 		; set up everything.
.2b32	d0 0f		bne $2b43			bne 	_IFBAExit
.2b34					_IFBALoop:
.2b34	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2b37	35 00		and $00,x			and 	IM0,x
.2b39	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2b3c	e8		inx				inx
.2b3d	c8		iny				iny
.2b3e	c0 03		cpy #$03			cpy 	#3
.2b40	d0 f2		bne $2b34			bne 	_IFBALoop
.2b42	18		clc				clc
.2b43					_IFBAExit:
.2b43	7a		ply				ply
.2b44	60		rts				rts
.2b45					IFloatBitwiseOr:
.2b45	5a		phy				phy
.2b46	20 73 2b	jsr $2b73			jsr 	IFPreProcessBitwise 		; set up everything.
.2b49	d0 0f		bne $2b5a			bne 	_IFBAExit
.2b4b					_IFBALoop:
.2b4b	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2b4e	15 00		ora $00,x			ora 	IM0,x
.2b50	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2b53	e8		inx				inx
.2b54	c8		iny				iny
.2b55	c0 03		cpy #$03			cpy 	#3
.2b57	d0 f2		bne $2b4b			bne 	_IFBALoop
.2b59	18		clc				clc
.2b5a					_IFBAExit:
.2b5a	7a		ply				ply
.2b5b	60		rts				rts
.2b5c					IFloatBitwiseXor:
.2b5c	5a		phy				phy
.2b5d	20 73 2b	jsr $2b73			jsr 	IFPreProcessBitwise 		; set up everything.
.2b60	d0 0f		bne $2b71			bne 	_IFBAExit
.2b62					_IFBALoop:
.2b62	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2b65	55 00		eor $00,x			eor 	IM0,x
.2b67	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2b6a	e8		inx				inx
.2b6b	c8		iny				iny
.2b6c	c0 03		cpy #$03			cpy 	#3
.2b6e	d0 f2		bne $2b62			bne 	_IFBALoop
.2b70	18		clc				clc
.2b71					_IFBAExit:
.2b71	7a		ply				ply
.2b72	60		rts				rts
.2b73					IFPreProcessBitwise:
.2b73	a0 00		ldy #$00			ldy 	#0 							; set index.
.2b75	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2b77	15 03		ora $03,x			ora 	IExp,x
.2b79	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2b7b	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2b7d	38		sec				sec 								; carry set just in cases.
.2b7e	60		rts				rts
.2b7f					IFloatAbsoluteR0:
.2b7f	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2b81	29 bf		and #$bf			and 	#IFSign ^ 255
.2b83	85 0b		sta $0b				sta 	IFR0+IExp
.2b85	18		clc				clc
.2b86	60		rts				rts
.2b87					IFloatSquareRootR0:
.2b87	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2b89	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero
.2b8c	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2b8e	29 40		and #$40			and 	#IFSign
.2b90	d0 2f		bne $2bc1			bne 	_IFSRFail
.2b92	20 72 2f	jsr $2f72			jsr 	IFloatNormalise 			; it will work better !
.2b95	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2b97	20 dd 2e	jsr $2edd			jsr 	IFloatCopyToRegister
.2b9a	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2b9c	20 8d 2a	jsr $2a8d			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2b9f	18		clc				clc
.2ba0	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2ba2	85 0b		sta $0b				sta 	IFR0+IExp
.2ba4	4a		lsr a				lsr 	a 							; which we can halve.
.2ba5	38		sec				sec 								; convert back
.2ba6	e9 17		sbc #$17			sbc 	#23
.2ba8	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2baa	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2bac	20 c3 2b	jsr $2bc3			jsr 	_IFSRNewton
.2baf	20 c3 2b	jsr $2bc3			jsr 	_IFSRNewton
.2bb2	20 c3 2b	jsr $2bc3			jsr 	_IFSRNewton
.2bb5	20 c3 2b	jsr $2bc3			jsr 	_IFSRNewton
.2bb8	18		clc				clc
.2bb9	60		rts				rts
.2bba					_IFSRZero:
.2bba	a2 08		ldx #$08			ldx 	#IFR0
.2bbc	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.2bbf	18		clc				clc
.2bc0	60		rts				rts
.2bc1					_IFSRFail:
.2bc1	38		sec				sec
.2bc2	60		rts				rts
.2bc3					_IFSRNewton:
.2bc3	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2bc5	20 8a 2e	jsr $2e8a			jsr 	IFloatPushRx
.2bc8	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2bca	20 8a 2e	jsr $2e8a			jsr 	IFloatPushRx
.2bcd	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2bcf	20 5e 2c	jsr $2c5e			jsr 	IFloatDivideFloat
.2bd2	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2bd4	20 ab 2e	jsr $2eab			jsr 	IFloatPullRx
.2bd7	20 31 29	jsr $2931			jsr 	IFloatAdd 					; now guess + original/guess
.2bda	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2bdc	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftRight
.2bdf	a2 0c		ldx #$0c			ldx 	#IFR1
.2be1	20 ab 2e	jsr $2eab			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2be4	60		rts				rts
.2be5					IFloatFractionalR0:
.2be5	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2be7	29 3f		and #$3f			and 	#IFXMask
.2be9	f0 17		beq $2c02			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2beb	20 7f 2b	jsr $2b7f			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2bee	a2 08		ldx #$08			ldx 	#IFR0
.2bf0	20 72 2f	jsr $2f72			jsr 	IFloatNormalise 			; normalise R0
.2bf3	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2bf5	20 dd 2e	jsr $2edd			jsr 	IFloatCopyToRegister
.2bf8	20 3b 2c	jsr $2c3b			jsr 	IFloatIntegerR0 			; take integer part of R0
.2bfb	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2bfd	20 2a 29	jsr $292a			jsr 	IFloatSubtract
.2c00	80 05		bra $2c07			bra 	_FIPExit
.2c02					_FIPZero:
.2c02	a2 08		ldx #$08			ldx 	#IFR0
.2c04	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.2c07					_FIPExit:
.2c07	18		clc				clc
.2c08	60		rts				rts
.2c09					IFloatCompare:
.2c09	20 2a 29	jsr $292a			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2c0c	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2c0e	05 0b		ora $0b				ora 	IFR0+IExp
.2c10	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2c12	29 3f		and #$3f			and 	#IFXMask
.2c14	d0 19		bne $2c2f			bne 	_IFCNonInteger
.2c16	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero 			; check if zero
.2c19	f0 0f		beq $2c2a			beq 	_IFCZero
.2c1b					_IFCReturnSign:
.2c1b	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2c1d	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2c1f	48		pha				pha
.2c20	a9 01		lda #$01			lda 	#1
.2c22	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte 				; return to +1
.2c25	68		pla				pla 								; sign bit back
.2c26	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2c28	18		clc				clc
.2c29	60		rts				rts
.2c2a					_IFCZero:
.2c2a	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.2c2d	18		clc				clc
.2c2e	60		rts				rts
.2c2f					_IFCNonInteger:
.2c2f	a5 08		lda $08				lda 	IFR0+IM0
.2c31	29 00		and #$00			and		#$00
.2c33	05 09		ora $09				ora 	IFR0+IM1
.2c35	05 0a		ora $0a				ora 	IFR0+IM2
.2c37	f0 f1		beq $2c2a			beq 	_IFCZero 					; near enough !
.2c39	80 e0		bra $2c1b			bra 	_IFCReturnSign 				; return the sign of the difference.
.2c3b					IFloatIntegerR0:
.2c3b	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2c3d	29 3f		and #$3f			and 	#IFXMask
.2c3f	f0 1b		beq $2c5c			beq 	_FIPExit 					; if so do nothing
.2c41	a2 08		ldx #$08			ldx 	#IFR0
.2c43	20 72 2f	jsr $2f72			jsr 	IFloatNormalise 			; normalise
.2c46	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero 			; is it zero ?
.2c49	f0 0e		beq $2c59			beq 	_FIPZero 					; if so return zero.
.2c4b					_FIPShift:
.2c4b	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2c4d	29 20		and #$20			and 	#$20 						; still -ve
.2c4f	f0 0b		beq $2c5c			beq 	_FIPExit
.2c51	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftRight 			; shift mantissa right
.2c54	20 94 2f	jsr $2f94			jsr 	IFloatIncExponent 			; bump exponent
.2c57	80 f2		bra $2c4b			bra 	_FIPShift
.2c59					_FIPZero:
.2c59	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.2c5c					_FIPExit:
.2c5c	18		clc				clc
.2c5d	60		rts				rts
.2c5e					IFloatDivideFloat:
.2c5e	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.2c61	20 96 2a	jsr $2a96			jsr 	IFCalculateNewSign 			; calculate sign of result
.2c64	20 72 2f	jsr $2f72			jsr 	IFloatNormalise 			; normalise RX
.2c67	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2c69	20 72 2f	jsr $2f72			jsr 	IFloatNormalise
.2c6c	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero
.2c6f	f0 56		beq $2cc7			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2c71	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2c73	20 8d 2a	jsr $2a8d			jsr 	IFMSignExtend
.2c76	8d d2 06	sta $06d2			sta 	IFNewExponent
.2c79	ae d1 06	ldx $06d1			ldx 	IFTarget 					; calculate s1.exponent
.2c7c	b5 03		lda $03,x			lda 	IExp,x
.2c7e	20 8d 2a	jsr $2a8d			jsr 	IFMSignExtend
.2c81	38		sec				sec
.2c82	ed d2 06	sbc $06d2			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2c85	38		sec				sec
.2c86	e9 17		sbc #$17			sbc 	#23
.2c88	8d d2 06	sta $06d2			sta 	IFNewExponent
.2c8b	20 c9 2c	jsr $2cc9			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2c8e	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2c90	10 08		bpl $2c9a			bpl 	_IFDFNoShiftResult
.2c92	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2c94	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftRight
.2c97	ee d2 06	inc $06d2			inc 	IFNewExponent
.2c9a					_IFDFNoShiftResult:
.2c9a	ad d2 06	lda $06d2			lda 	IFNewExponent 				; underflow/overflow check.
.2c9d	30 06		bmi $2ca5			bmi 	_IFDFCheckUnderflow
.2c9f	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2ca1	b0 24		bcs $2cc7			bcs 	_IFDFDivZero
.2ca3	80 11		bra $2cb6			bra		_IFDFExit
.2ca5					_IFDFCheckUnderflow:
.2ca5	ad d2 06	lda $06d2			lda 	IFNewExponent 				; shift into a legal exponent.
.2ca8	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2caa	b0 0a		bcs $2cb6			bcs 	_IFDFExit
.2cac	ee d2 06	inc $06d2			inc 	IFNewExponent
.2caf	a2 14		ldx #$14			ldx 	#IFRTemp
.2cb1	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftRight
.2cb4	80 ef		bra $2ca5			bra 	_IFDFCheckUnderflow
.2cb6					_IFDFExit:
.2cb6	ad d2 06	lda $06d2			lda 	IFNewExponent 				; combine exponent and sign.
.2cb9	29 3f		and #$3f			and 	#IFXMask
.2cbb	0d d3 06	ora $06d3			ora 	IFNewSign
.2cbe	85 17		sta $17				sta 	IFRTemp+IExp
.2cc0	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2cc2	20 cc 2e	jsr $2ecc			jsr 	IFloatCopyFromRegister
.2cc5	18		clc				clc
.2cc6	60		rts				rts
.2cc7					_IFDFDivZero:
.2cc7	38		sec				sec
.2cc8	60		rts				rts
.2cc9					IFloatDivideSupport:
.2cc9	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2ccb	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.2cce	5a		phy				phy 								; main division loop x 23
.2ccf	a0 17		ldy #$17			ldy 	#23
.2cd1					_IFDSLoop:
.2cd1	20 04 2b	jsr $2b04			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2cd4	20 f8 2a	jsr $2af8			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2cd7	88		dey				dey
.2cd8	d0 f7		bne $2cd1			bne 	_IFDSLoop 					; do it 24 times
.2cda	7a		ply				ply
.2cdb	60		rts				rts
.2cdc					IFloatIntegerToStringR0:
.2cdc	8d d4 06	sta $06d4			sta 	IFBase 						; save base to use.
.2cdf	20 bc 2f	jsr $2fbc			jsr 	IFloatBufferReset			; empty buffer
.2ce2	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer
.2ce4	29 3f		and #$3f			and 	#IFXMask
.2ce6	d0 1e		bne $2d06			bne 	_IFIFail
.2ce8	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2cea	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero
.2ced	f0 0e		beq $2cfd			beq 	_IFINotNegative
.2cef	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2cf1	29 40		and #$40			and 	#IFSign
.2cf3	f0 08		beq $2cfd			beq 	_IFINotNegative
.2cf5	a9 2d		lda #$2d			lda 	#"-"						; output -
.2cf7	20 cb 2f	jsr $2fcb			jsr 	IFloatBufferWrite
.2cfa	20 46 2f	jsr $2f46			jsr 	IFloatNegate 				; tidy up !
.2cfd					_IFINotNegative:
.2cfd	20 08 2d	jsr $2d08			jsr 	_IFIRecursiveConvert 		; start converting
.2d00	20 c3 2f	jsr $2fc3			jsr 	IFloatGetBufferAddress
.2d03	18		clc				clc
.2d04	80 01		bra $2d07			bra 	_IFIExit
.2d06					_IFIFail:
.2d06	38		sec				sec
.2d07					_IFIExit:
.2d07	60		rts				rts
.2d08					_IFIRecursiveConvert:
.2d08	a2 0c		ldx #$0c			ldx 	#IFR1
.2d0a	20 dd 2e	jsr $2edd			jsr 	IFloatCopyToRegister 		; R0->R1
.2d0d	a2 08		ldx #$08			ldx 	#IFR0
.2d0f	ad d4 06	lda $06d4			lda 	IFBase 						; Base -> R0
.2d12	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.2d15	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2d17	20 a0 2a	jsr $2aa0			jsr 	IFloatDivideInteger
.2d1a	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2d1c	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero
.2d1f	f0 09		beq $2d2a			beq 	_IFIOutDigit
.2d21	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder
.2d23	48		pha				pha
.2d24	20 08 2d	jsr $2d08			jsr 	_IFIRecursiveConvert 		; convert the divider
.2d27	68		pla				pla
.2d28	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2d2a					_IFIOutDigit:
.2d2a	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2d2c	c9 0a		cmp #$0a			cmp	 	#10
.2d2e	90 02		bcc $2d32			bcc 	_IFINotHex
.2d30	69 06		adc #$06			adc 	#6
.2d32					_IFINotHex:
.2d32	69 30		adc #$30			adc 	#48
.2d34	20 cb 2f	jsr $2fcb			jsr 	IFloatBufferWrite
.2d37	60		rts				rts
.06d4					IFBase:
>06d4							.fill 	1
.2d38					IFloatFloatToStringR0:
.2d38	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2d3a	20 8a 2e	jsr $2e8a			jsr 	IFloatPushRx
.2d3d	20 dd 2e	jsr $2edd			jsr 	IFloatCopyToRegister
.2d40	20 3b 2c	jsr $2c3b			jsr 	IFloatIntegerR0				; make R0 integer
.2d43	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2d45	20 dc 2c	jsr $2cdc			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2d48	9c d5 06	stz $06d5			stz 	IFloatDecimalCount 			; zero the decimal count.
.2d4b	a5 13		lda $13				lda 	IFR2+IExp 					; is integer.
.2d4d	29 3f		and #$3f			and 	#IFXMask
.2d4f	f0 44		beq $2d95			beq 	_IFFSExit
.2d51					_IFloatFracLoop:
.2d51	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2d53	20 cc 2e	jsr $2ecc			jsr 	IFloatCopyFromRegister
.2d56	20 e5 2b	jsr $2be5			jsr 	IFloatFractionalR0
.2d59	20 72 2f	jsr $2f72			jsr 	IFloatNormalise
.2d5c	a2 10		ldx #$10			ldx 	#IFR2
.2d5e	20 dd 2e	jsr $2edd			jsr 	IFloatCopyToRegister 		; copy to R2
.2d61	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2d63	a9 0a		lda #$0a			lda 	#10
.2d65	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.2d68	a2 10		ldx #$10			ldx 	#IFR2						; R0,R2 = R2 * 10
.2d6a	20 db 29	jsr $29db			jsr 	IFloatMultiply
.2d6d	a2 10		ldx #$10			ldx 	#IFR2
.2d6f	20 dd 2e	jsr $2edd			jsr 	IFloatCopyToRegister
.2d72	20 3b 2c	jsr $2c3b			jsr 	IFloatIntegerR0 			; get integer part of R0
.2d75	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2d78	c9 03		cmp #$03			cmp 	#3
.2d7a	f0 16		beq $2d92			beq 	_IFFSExitStripZero
.2d7c	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; written the DP yet ?
.2d7f	d0 05		bne $2d86			bne 	_IFloatNotFirst
.2d81	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2d83	20 cb 2f	jsr $2fcb			jsr 	IFloatBufferWrite
.2d86					_IFloatNotFirst:
.2d86	ee d5 06	inc $06d5			inc 	IFloatDecimalCount
.2d89	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2d8b	09 30		ora #$30			ora 	#"0"						; ASCII
.2d8d	20 cb 2f	jsr $2fcb			jsr 	IFloatBufferWrite 			; write to the buffer.
.2d90	80 bf		bra $2d51			bra 	_IFloatFracLoop
.2d92					_IFFSExitStripZero:
.2d92	20 da 2f	jsr $2fda			jsr 	IFloatStripTrailingZeros
.2d95					_IFFSExit:
.2d95	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2d97	20 ab 2e	jsr $2eab			jsr 	IFloatPullRx
.2d9a	20 c3 2f	jsr $2fc3			jsr 	IFloatGetBufferAddress
.2d9d	18		clc				clc
.2d9e	60		rts				rts
.06d5					IFloatDecimalCount:
>06d5							.fill 	1
.2d9f					IFloatStringToFloatR0:
.2d9f	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.2da2	86 20		stx $20				stx 	iTemp0
.2da4	84 21		sty $21				sty 	iTemp0+1
.2da6	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2da8	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.2dab	9c d7 06	stz $06d7			stz 	IFSignFlag 					; clear the sign flag
.2dae	20 3b 2e	jsr $2e3b			jsr 	IFSTFGetNext 				; get first
.2db1	f0 1b		beq $2dce			beq 	_IFSTFFail 					; no character
.2db3	90 10		bcc $2dc5			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2db5	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2db7	d0 15		bne $2dce			bne 	_IFSTFFail
.2db9	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2dbb	8d d7 06	sta $06d7			sta 	IFSignFlag
.2dbe					_IFSTFLoop:
.2dbe	20 3b 2e	jsr $2e3b			jsr 	IFSTFGetNext 				; get next
.2dc1	b0 0b		bcs $2dce			bcs 	_IFSTFFail 					; bad character.
.2dc3	f0 11		beq $2dd6			beq 	_IFSTFExit 					; end of data
.2dc5					_IFSTFHaveChar:
.2dc5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2dc7	f0 08		beq $2dd1			beq 	_IFSTFDecimal
.2dc9	20 5f 2e	jsr $2e5f			jsr 	IFSTFAddR0 					; add number in
.2dcc	80 f0		bra $2dbe			bra 	_IFSTFLoop 					; keep going until . or end.
.2dce					_IFSTFFail:
.2dce	38		sec				sec
.2dcf	80 0d		bra $2dde			bra 	_IFSTFReturn
.2dd1					_IFSTFDecimal:
.2dd1	20 e6 2d	jsr $2de6			jsr 	IFSTFDecimal 				; call the decimal places code.
.2dd4	b0 08		bcs $2dde			bcs 	_IFSTFReturn 				; error
.2dd6					_IFSTFExit:
.2dd6	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2dd8	0d d7 06	ora $06d7			ora 	IFSignFlag
.2ddb	85 0b		sta $0b				sta 	IFR0+IExp
.2ddd	18		clc				clc
.2dde					_IFSTFReturn:
.2dde	60		rts				rts
.2ddf					IFloatAddDecimalToR0:
.2ddf	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.2de2	86 20		stx $20				stx 	iTemp0
.2de4	84 21		sty $21				sty 	iTemp0+1
.2de6					IFSTFDecimal:
.2de6	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2de8	20 8a 2e	jsr $2e8a			jsr 	IFloatPushRx
.2deb	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2ded	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero
.2df0	9c d8 06	stz $06d8			stz 	IFDecimalPlaces
.2df3					_IFSTDLoop:
.2df3	20 3b 2e	jsr $2e3b			jsr 	IFSTFGetNext 				; get next
.2df6	b0 41		bcs $2e39			bcs 	_IFSTFFail2 				; bad character.
.2df8	f0 11		beq $2e0b			beq 	_IFSTFComplete 				; end of data, work out the result.
.2dfa	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2dfc	f0 39		beq $2e37			beq 	_IFSTFExit2
.2dfe	20 5f 2e	jsr $2e5f			jsr 	IFSTFAddR0 					; add number in
.2e01	ee d8 06	inc $06d8			inc 	IFDecimalPlaces 			; count decimals
.2e04	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2e07	c9 03		cmp #$03			cmp 	#3
.2e09	90 e8		bcc $2df3			bcc 	_IFSTDLoop
.2e0b					_IFSTFComplete:
.2e0b	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2e0e	f0 27		beq $2e37			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2e10	3a		dec a				dec 	a 							; table indexed from 1.
.2e11	0a		asl a				asl 	a
.2e12	0a		asl a				asl 	a
.2e13	aa		tax				tax
.2e14	bd 76 2e	lda $2e76,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2e17	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2e19	bd 77 2e	lda $2e77,x			lda 	TableTen+1,x
.2e1c	85 0d		sta $0d				sta  	IFR1+IM1
.2e1e	bd 78 2e	lda $2e78,x			lda 	TableTen+2,x
.2e21	85 0e		sta $0e				sta  	IFR1+IM2
.2e23	bd 79 2e	lda $2e79,x			lda 	TableTen+3,x
.2e26	85 0f		sta $0f				sta  	IFR1+IExp
.2e28	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2e2a	20 db 29	jsr $29db			jsr 	IFloatMultiply
.2e2d	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop and add the decimal.
.2e2f	20 ab 2e	jsr $2eab			jsr 	IFloatPullRx
.2e32	a2 0c		ldx #$0c			ldx 	#IFR1
.2e34	20 31 29	jsr $2931			jsr 	IFloatAdd
.2e37					_IFSTFExit2:
.2e37	18		clc				clc
.2e38	60		rts				rts
.2e39					_IFSTFFail2:
.2e39	38		sec				sec
.2e3a	60		rts				rts
.2e3b					IFSTFGetNext:
.2e3b	ad d6 06	lda $06d6			lda 	IFCount  					; if count is zero, return with Z set.
.2e3e	f0 19		beq $2e59			beq 	_IFSTFReturnOk
.2e40	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.2e42	e6 20		inc $20				inc 	iTemp0 						; point at next.
.2e44	d0 02		bne $2e48			bne 	_IFSTFGNNoCarry
.2e46	e6 21		inc $21				inc 	iTemp0+1
.2e48					_IFSTFGNNoCarry:
.2e48	ce d6 06	dec $06d6			dec 	IFCount 					; dec count.
.2e4b	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2e4d	f0 08		beq $2e57			beq 	_IFSTFGOkay
.2e4f	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2e51	90 08		bcc $2e5b			bcc 	_IFSTFGFail
.2e53	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2e55	b0 04		bcs $2e5b			bcs 	_IFSTFGFail
.2e57					_IFSTFGOkay:
.2e57	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2e59					_IFSTFReturnOk:
.2e59	18		clc				clc
.2e5a	60		rts				rts
.2e5b					_IFSTFGFail:
.2e5b	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2e5d	38		sec				sec
.2e5e	60		rts				rts
.2e5f					IFSTFAddR0:
.2e5f	29 0f		and #$0f			and 	#15 						; to int value
.2e61	48		pha				pha 								; save it.
.2e62	a9 0a		lda #$0a			lda 	#10
.2e64	a2 0c		ldx #$0c			ldx 	#IFR1
.2e66	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.2e69	20 db 29	jsr $29db			jsr 	IFloatMultiply
.2e6c	68		pla				pla
.2e6d	a2 0c		ldx #$0c			ldx 	#IFR1
.2e6f	20 3d 2f	jsr $2f3d			jsr 	IFloatSetByte
.2e72	20 31 29	jsr $2931			jsr 	IFloatAdd
.2e75	60		rts				rts
.06d6					IFCount:
>06d6							.fill 	1
.06d7					IFSignFlag:
>06d7							.fill 	1
.06d8					IFDecimalPlaces:
>06d8							.fill 	1
.2e76					TableTen:
>2e76	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2e7a	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2e7e	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2e82	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2e86	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2e8a					IFloatPushRx:
.2e8a	5a		phy				phy
.2e8b	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.2e8e	b5 00		lda $00,x			lda 	IM0,x
.2e90	99 da 06	sta $06da,y			sta 	IFStack,y
.2e93	b5 01		lda $01,x			lda 	IM1,x
.2e95	99 db 06	sta $06db,y			sta 	IFStack+1,y
.2e98	b5 02		lda $02,x			lda 	IM2,x
.2e9a	99 dc 06	sta $06dc,y			sta 	IFStack+2,y
.2e9d	b5 03		lda $03,x			lda 	IExp,x
.2e9f	99 dd 06	sta $06dd,y			sta 	IFStack+3,y
.2ea2	c8		iny				iny
.2ea3	c8		iny				iny
.2ea4	c8		iny				iny
.2ea5	c8		iny				iny
.2ea6	8c d9 06	sty $06d9			sty 	IFStackIndex
.2ea9	7a		ply				ply
.2eaa	60		rts				rts
.2eab					IFloatPullRx:
.2eab	5a		phy				phy
.2eac	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.2eaf	88		dey				dey
.2eb0	88		dey				dey
.2eb1	88		dey				dey
.2eb2	88		dey				dey
.2eb3	b9 da 06	lda $06da,y			lda 	IFStack,y
.2eb6	95 00		sta $00,x			sta 	IM0,x
.2eb8	b9 db 06	lda $06db,y			lda 	IFStack+1,y
.2ebb	95 01		sta $01,x			sta 	IM1,x
.2ebd	b9 dc 06	lda $06dc,y			lda 	IFStack+2,y
.2ec0	95 02		sta $02,x			sta 	IM2,x
.2ec2	b9 dd 06	lda $06dd,y			lda 	IFStack+3,y
.2ec5	95 03		sta $03,x			sta 	IExp,x
.2ec7	8c d9 06	sty $06d9			sty 	IFStackIndex
.2eca	7a		ply				ply
.2ecb	60		rts				rts
.06d9					IFStackIndex:
>06d9							.fill 	1
.06da					IFStack:
>06da							.fill 	16*4
.2ecc					IFloatCopyFromRegister:
.2ecc	b5 00		lda $00,x			lda 	0,x
.2ece	85 08		sta $08				sta 	IFR0
.2ed0	b5 01		lda $01,x			lda 	1,x
.2ed2	85 09		sta $09				sta 	IFR0+1
.2ed4	b5 02		lda $02,x			lda 	2,x
.2ed6	85 0a		sta $0a				sta 	IFR0+2
.2ed8	b5 03		lda $03,x			lda 	3,x
.2eda	85 0b		sta $0b				sta 	IFR0+3
.2edc	60		rts				rts
.2edd					IFloatCopyToRegister:
.2edd	a5 08		lda $08				lda 	IFR0
.2edf	95 00		sta $00,x			sta 	0,x
.2ee1	a5 09		lda $09				lda 	IFR0+1
.2ee3	95 01		sta $01,x			sta 	1,x
.2ee5	a5 0a		lda $0a				lda 	IFR0+2
.2ee7	95 02		sta $02,x			sta 	2,x
.2ee9	a5 0b		lda $0b				lda 	IFR0+3
.2eeb	95 03		sta $03,x			sta 	3,x
.2eed	60		rts				rts
.2eee					IFloatLoadInline:
.2eee	68		pla				pla 								; pop address off to iTemp0
.2eef	85 20		sta $20				sta 	iTemp0
.2ef1	68		pla				pla
.2ef2	85 21		sta $21				sta 	iTemp0+1
.2ef4	a0 01		ldy #$01			ldy 	#1
.2ef6	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.2ef8	95 00		sta $00,x			sta 	0,x
.2efa	c8		iny				iny
.2efb	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.2efd	95 01		sta $01,x			sta 	1,x
.2eff	c8		iny				iny
.2f00	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.2f02	95 02		sta $02,x			sta 	2,x
.2f04	c8		iny				iny
.2f05	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.2f07	95 03		sta $03,x			sta 	3,x
.2f09	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2f0a	a5 20		lda $20				lda 	iTemp0
.2f0c	69 05		adc #$05			adc 	#5
.2f0e	85 20		sta $20				sta 	iTemp0
.2f10	90 02		bcc $2f14			bcc 	_IFLINoCarry
.2f12	e6 21		inc $21				inc 	iTemp0+1
.2f14					_IFLINoCarry:
.2f14	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.2f17					IFloatMultiply8BitRx:
.2f17	5a		phy		        phy
.2f18	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2f1a	a4 08		ldy $08		        ldy     IFR0+IM0
.2f1c	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2f1d	85 08		sta $08		        sta     IFR0+IM0
.2f1f	84 09		sty $09		        sty     IFR0+IM1
.2f21	a9 00		lda #$00	        lda     #0
.2f23	a0 08		ldy #$08	        ldy     #8
.2f25					_IFMLoop:
.2f25	90 03		bcc $2f2a	        bcc     _IFMNoAdd
.2f27	18		clc		        clc
.2f28	65 09		adc $09		        adc     IFR0+IM1
.2f2a					_IFMNoAdd:
.2f2a	6a		ror a		        ror     a
.2f2b	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2f2d	88		dey		        dey
.2f2e	d0 f5		bne $2f25	        bne     _IFMLoop
.2f30	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.2f32	7a		ply		        ply
.2f33	60		rts		        rts
.2f34					IFloatCheckZero:
.2f34	b5 00		lda $00,x			lda 	IM0,x
.2f36	15 01		ora $01,x			ora 	IM1,x
.2f38	15 02		ora $02,x			ora 	IM2,x
.2f3a	60		rts				rts
.2f3b					IFloatSetZero:
.2f3b	a9 00		lda #$00			lda 	#0
.2f3d					IFloatSetByte:
.2f3d	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2f3f	74 01		stz $01,x			stz 	IM1,x
.2f41	74 02		stz $02,x			stz 	IM2,x
.2f43	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2f45	60		rts				rts
.2f46					IFloatNegate:
.2f46	b5 03		lda $03,x			lda 	IExp,x
.2f48	49 40		eor #$40			eor 	#IFSign
.2f4a	95 03		sta $03,x			sta 	IExp,x
.2f4c	18		clc				clc
.2f4d	60		rts				rts
.2f4e					IFloatMantissaNegate:
.2f4e	38		sec				sec
.2f4f	a9 00		lda #$00			lda 	#0
.2f51	f5 00		sbc $00,x			sbc 	IM0,x
.2f53	95 00		sta $00,x			sta 	IM0,x
.2f55	a9 00		lda #$00			lda 	#0
.2f57	f5 01		sbc $01,x			sbc 	IM1,x
.2f59	95 01		sta $01,x			sta 	IM1,x
.2f5b	a9 00		lda #$00			lda 	#0
.2f5d	f5 02		sbc $02,x			sbc 	IM2,x
.2f5f	95 02		sta $02,x			sta 	IM2,x
.2f61	60		rts				rts
.2f62					IFloatShiftLeft:
.2f62	18		clc				clc
.2f63					IFloatRotateLeft:
.2f63	36 00		rol $00,x			rol 	IM0,x
.2f65	36 01		rol $01,x			rol 	IM1,x
.2f67	36 02		rol $02,x			rol 	IM2,x
.2f69	60		rts				rts
.2f6a					IFloatShiftRight:
.2f6a	18		clc				clc
.2f6b					IFloatRotateRight:
.2f6b	76 02		ror $02,x			ror 	IM2,x
.2f6d	76 01		ror $01,x			ror 	IM1,x
.2f6f	76 00		ror $00,x			ror 	IM0,x
.2f71	60		rts				rts
.2f72					IFloatNormalise:
.2f72	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero 			; is it zero
.2f75	f0 18		beq $2f8f			beq 	_IFNExitZero 				; if so exit
.2f77					_IFNLoop:
.2f77	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2f79	29 c0		and #$c0			and 	#$C0
.2f7b	c9 40		cmp #$40			cmp 	#$40
.2f7d	f0 13		beq $2f92			beq 	_IFNExitOkay 				; if so , then we are done.
.2f7f	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2f81	29 3f		and #$3f			and 	#$3F
.2f83	c9 20		cmp #$20			cmp 	#$20
.2f85	f0 0b		beq $2f92			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2f87	20 a8 2f	jsr $2fa8			jsr 	IFloatDecExponent
.2f8a	20 62 2f	jsr $2f62			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2f8d	80 e8		bra $2f77			bra 	_IFNLoop
.2f8f					_IFNExitZero:
.2f8f	20 3b 2f	jsr $2f3b			jsr 	IFloatSetZero 				; set the result to zero
.2f92					_IFNExitOkay:
.2f92	18		clc				clc  								; return with CC.
.2f93	60		rts				rts
.2f94					IFloatIncExponent:
.2f94	b5 03		lda $03,x			lda 	IExp,x
.2f96	48		pha				pha
.2f97	29 c0		and #$c0			and 	#$C0
.2f99	8d 1a 07	sta $071a			sta 	IFXTemp
.2f9c	68		pla				pla
.2f9d	1a		inc a				inc 	a
.2f9e	29 3f		and #$3f			and 	#$3F
.2fa0	48		pha				pha
.2fa1	0d 1a 07	ora $071a			ora 	IFXTemp
.2fa4	95 03		sta $03,x			sta 	IExp,x
.2fa6	68		pla				pla
.2fa7	60		rts				rts
.2fa8					IFloatDecExponent:
.2fa8	b5 03		lda $03,x			lda 	IExp,x
.2faa	48		pha				pha
.2fab	29 c0		and #$c0			and 	#$C0
.2fad	8d 1a 07	sta $071a			sta 	IFXTemp
.2fb0	68		pla				pla
.2fb1	3a		dec a				dec 	a
.2fb2	29 3f		and #$3f			and 	#$3F
.2fb4	48		pha				pha
.2fb5	0d 1a 07	ora $071a			ora 	IFXTemp
.2fb8	95 03		sta $03,x			sta 	IExp,x
.2fba	68		pla				pla
.2fbb	60		rts				rts
.071a					IFXTemp:
>071a							.fill 	1
.2fbc					IFloatBufferReset:
.2fbc	9c 1b 07	stz $071b			stz 	IFBufferCount
.2fbf	9c 1c 07	stz $071c			stz 	IFBuffer
.2fc2	60		rts				rts
.2fc3					IFloatGetBufferAddress:
.2fc3	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.2fc5	a2 1c		ldx #$1c			ldx 	#(IFBuffer & $FF)
.2fc7	ad 1b 07	lda $071b			lda 	IFBufferCount
.2fca	60		rts				rts
.2fcb					IFloatBufferWrite:
.2fcb	da		phx				phx
.2fcc	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.2fcf	9d 1c 07	sta $071c,x			sta 	IFBuffer,x
.2fd2	9e 1d 07	stz $071d,x			stz 	IFBuffer+1,x
.2fd5	ee 1b 07	inc $071b			inc 	IFBufferCount
.2fd8	fa		plx				plx
.2fd9	60		rts				rts
.2fda					IFloatStripTrailingZeros:
.2fda	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.2fdd	bd 1b 07	lda $071b,x			lda 	IFBuffer-1,x
.2fe0	c9 30		cmp #$30			cmp		#"0"
.2fe2	d0 0f		bne $2ff3			bne 	_IFSTExit
.2fe4	bd 1a 07	lda $071a,x			lda 	IFBuffer-2,x
.2fe7	c9 2e		cmp #$2e			cmp 	#"."
.2fe9	f0 08		beq $2ff3			beq 	_IFSTExit
.2feb	ce 1b 07	dec $071b			dec 	IFBufferCount
.2fee	9e 1b 07	stz $071b,x			stz 	IFBuffer-1,x
.2ff1	80 e7		bra $2fda			bra 	IFloatStripTrailingZeros
.2ff3					_IFSTExit:
.2ff3	60		rts				rts
.071b					IFBufferCount:
>071b							.fill 	1
.071c					IFBuffer:
>071c							.fill 	25
.2ff4					IFloatCheck:
.2ff4	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative
.2ff6	09 40		ora #$40			ora 	#IFSign
.2ff8	85 0b		sta $0b				sta 	IFR0+IExp
.2ffa	20 31 29	jsr $2931			jsr 	IFloatAdd 					; add allowed to error.
.2ffd	a2 08		ldx #$08			ldx 	#IFR0
.2fff	20 34 2f	jsr $2f34			jsr 	IFloatCheckZero 			; error if < 0
.3002	f0 06		beq $300a			beq 	_IFAOkay
.3004	a5 0b		lda $0b				lda 	IFR0+IExp
.3006	29 40		and #$40			and 	#IFSign
.3008	d0 01		bne $300b			bne 	_IFAFail
.300a					_IFAOkay:
.300a	60		rts				rts
.300b					_IFAFail:
.300b	38		sec				sec
.300c	68		pla				pla 								; get address - 2
.300d	e9 02		sbc #$02			sbc 	#2
.300f	aa		tax				tax
.3010	68		pla				pla
.3011	e9 00		sbc #$00			sbc 	#0
.3013	a8		tay				tay
.3014	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3016					_IFAStop:
>3016	db						.byte 	$DB 						; display an error AA ADR ADR
.3017	80 fd		bra $3016			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
