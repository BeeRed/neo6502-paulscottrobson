
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Tue May 30 16:52:24 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 29 1c	jsr $1c29			jsr 	PGMSetBaseAddress
.1007	20 a0 20	jsr $20a0			jsr 	IFInitialise
.100a	4c 13 11	jmp $1113			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 7b 14	jsr $147b			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c b7 11	jmp $11b7		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 3c 1c	jsr $1c3c			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 5a 20	jsr $205a			jsr 	VARClearHashTables
.1028	20 12 1f	jsr $1f12			jsr 	StringSystemInitialise
.102b	60		rts				rts
.102c					AllocateMemory:
.102c	5a		phy				phy 								; save Y
.102d	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.102f	5a		phy				phy
.1030	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1032	5a		phy				phy
.1033	a8		tay				tay 								; count is now in XY
.1034					_AllocateLoop:
.1034	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1036	d0 04		bne $103c			bne 	_AllocateOne
.1038	c0 00		cpy #$00			cpy 	#0
.103a	f0 12		beq $104e			beq 	_AllocateExit
.103c					_AllocateOne:
.103c	a9 00		lda #$00			lda 	#0 							; zero byte
.103e	92 24		sta ($24)			sta 	(freeMemory)
.1040	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1042	d0 02		bne $1046			bne 	_AllocateSkipCarry
.1044	e6 25		inc $25				inc 	freeMemory+1
.1046					_AllocateSkipCarry:
.1046	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1048	d0 01		bne $104b			bne 	_AllocateSkipBorrow
.104a	ca		dex				dex
.104b					_AllocateSkipBorrow:
.104b	88		dey				dey
.104c	80 e6		bra $1034			bra 	_AllocateLoop
.104e					_AllocateExit:
.104e	fa		plx				plx 								; restore address
.104f	68		pla				pla
.1050	7a		ply				ply 								; restore Y
.1051	60		rts				rts
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.1052					NoExec01:
.1052					NoExec02:
.1052					NoExec03:
.1052					NoExec04:
.1052					NoExec05:
.1052					NoExec06:
.1052					NoExec07:
.1052	4c 66 11	jmp $1166		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1055					Command_Print:
.1055					Command_IP_Main:
.1055	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1056					_CPLoop:
.1056	08		php				php 								; save last action flag
.1057	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1059	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.105b	f0 3e		beq $109b			beq 	_CPExit 					; without consuming
.105d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.105f	f0 3a		beq $109b			beq 	_CPExit
.1061	68		pla				pla 								; throw last action flag
.1062	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1064	c8		iny				iny
.1065	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1067	f0 2f		beq $1098			beq 	_CPContinueWithSameLine
.1069	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.106b	f0 26		beq $1093			beq 	_CPTab
.106d	88		dey				dey 								; undo the get.
.106e	20 3b 14	jsr $143b			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1071	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1073	10 14		bpl $1089			bpl 	_CPNumber
.1075	5a		phy				phy
.1076	18		clc				clc 								; string address to YX
.1077	a5 0c		lda $0c				lda 	IFR0+IM0
.1079	aa		tax				tax
.107a	a5 0d		lda $0d				lda 	IFR0+IM1
.107c	a8		tay				tay
.107d	e8		inx				inx 								; point to 1st character
.107e	d0 01		bne $1081			bne 	_CPNoCarry
.1080	c8		iny				iny
.1081					_CPNoCarry:
.1081	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1083	20 a4 10	jsr $10a4			jsr 	CPPrintAYX 					; print AYX
.1086	7a		ply				ply
.1087	80 cc		bra $1055			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1089					_CPNumber:
.1089	5a		phy				phy
.108a	20 b2 24	jsr $24b2			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.108d	20 a4 10	jsr $10a4			jsr 	CPPrintAYX 					; print AYX
.1090	7a		ply				ply
.1091	80 c2		bra $1055			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1093					_CPTab:
.1093	a9 09		lda #$09			lda 	#9 							; print TAB
.1095	20 b7 10	jsr $10b7			jsr 	CPPrintA
.1098					_CPContinueWithSameLine:
.1098	38		sec				sec 								; loop round with carry set, which
.1099	80 bb		bra $1056			bra 	_CPLoop 					; will inhibit final CR
.109b					_CPExit:
.109b	28		plp				plp 								; get last action flag
.109c	b0 05		bcs $10a3			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.109e	a9 0d		lda #$0d			lda 	#13 						; print new line
.10a0	20 b7 10	jsr $10b7			jsr 	CPPrintA
.10a3					_CPExit2:
.10a3	60		rts				rts
.10a4					CPPrintAYX:
.10a4	86 1e		stx $1e				stx 	zTemp0
.10a6	84 1f		sty $1f				sty 	zTemp0+1
.10a8	aa		tax				tax
.10a9	f0 0b		beq $10b6			beq 	_CPPrintExit
.10ab	a0 00		ldy #$00			ldy 	#0
.10ad					_CPPrintAYXLoop:
.10ad	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.10af	20 b7 10	jsr $10b7			jsr 	CPPrintA
.10b2	c8		iny				iny
.10b3	ca		dex				dex
.10b4	d0 f7		bne $10ad			bne 	_CPPrintAYXLoop
.10b6					_CPPrintExit:
.10b6	60		rts				rts
.10b7					CPPrintA:
.10b7	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.10ba					CommandLET:
.10ba	20 dd 14	jsr $14dd			jsr 	EXPTermR0 					; get term
.10bd	90 38		bcc $10f7			bcc 	_CLError 					; must be a reference term.
.10bf	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.10c1	48		pha				pha
.10c2	a5 0d		lda $0d				lda 	IFR0+IM1
.10c4	48		pha				pha
.10c5	a5 0f		lda $0f				lda 	IFR0+IExp
.10c7	48		pha				pha
.10c8	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.10ca	20 b5 12	jsr $12b5			jsr 	ERRCheckA
.10cd	20 3b 14	jsr $143b			jsr 	EXPEvaluateExpression 		; right hand side.
.10d0	68		pla				pla 								; type of l-expr
.10d1	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.10d3	30 25		bmi $10fa			bmi 	_CLType
.10d5	fa		plx				plx 	 							; pop target address to zTemp0
.10d6	86 1f		stx $1f				stx 	zTemp0+1
.10d8	fa		plx				plx
.10d9	86 1e		stx $1e				stx 	zTemp0
.10db	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.10dd	30 15		bmi $10f4			bmi 	_CLStringAssign
.10df	5a		phy				phy
.10e0	a0 03		ldy #$03			ldy 	#3
.10e2	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10e4	88		dey				dey
.10e5	a5 0e		lda $0e				lda 	IFR0+IM2
.10e7	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10e9	88		dey				dey
.10ea	a5 0d		lda $0d				lda 	IFR0+IM1
.10ec	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10ee	a5 0c		lda $0c				lda 	IFR0+IM0
.10f0	92 1e		sta ($1e)			sta 	(zTemp0)
.10f2	7a		ply				ply
.10f3	60		rts				rts
.10f4					_CLStringAssign:
.10f4	4c a4 11	jmp $11a4		jmp	ErrorV_unimplemented
.10f7					_CLError:
.10f7	4c 89 12	jmp $1289		jmp	ErrorV_variable
.10fa					_CLType:
.10fa	4c 93 11	jmp $1193		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.10fd					Command_NEW:
.10fd	20 30 1c	jsr $1c30			jsr 	PGMNewProgram
.1100	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1103	4c 60 11	jmp $1160			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1106					Command_REM:
.1106					Command_REM2:
.1106	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1108	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.110a	d0 06		bne $1112			bne 	_CRExit
.110c	c8		iny				iny 								; skip over it, it's a comment.
.110d	98		tya				tya
.110e	38		sec				sec
.110f	71 1c		adc ($1c),y			adc 	(codePtr),y
.1111	a8		tay				tay
.1112					_CRExit:
.1112	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1113					Command_RUN:
.1113	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.1116	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.1119	85 1d		sta $1d				sta 	codePtr+1
.111b	64 1c		stz $1c				stz 	codePtr
.111d	80 0b		bra $112a			bra 	RUNNewLine
.111f					RUNEndOfLine:
.111f	18		clc				clc 								; advance to next line.
.1120	b2 1c		lda ($1c)			lda 	(codePtr)
.1122	65 1c		adc $1c				adc 	codePtr
.1124	85 1c		sta $1c				sta 	codePtr
.1126	90 02		bcc $112a			bcc 	_RELNoCarry
.1128	e6 1d		inc $1d				inc 	codePtr+1
.112a					_RELNoCarry:
.112a					RUNNewLine:
.112a	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.112c	9a		txs				txs
.112d	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.112f	f0 2f		beq $1160			beq 	Command_END
.1131	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.1133					RUNNewCommand:
.1133	9c 49 04	stz $0449			stz 	stringInitialised 			; reset string system.
.1136	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.1138	10 1a		bpl $1154			bpl		_RUNNotToken 				; probably an identifier
.113a	c8		iny				iny 								; consume token
.113b	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.113d	f0 f4		beq $1133			beq 	RUNNewCommand
.113f	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1141	b0 0e		bcs $1151			bcs 	_RUNSyntax
.1143	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1145	90 0a		bcc $1151			bcc 	_RUNSyntax
.1147	0a		asl a				asl 	a 							; double into X.
.1148	aa		tax				tax
.1149	20 4e 11	jsr $114e			jsr 	_RUNDispatchMain			; call the main dispatcher
.114c	80 e5		bra $1133			bra 	RUNNewCommand
.114e					_RUNDispatchMain:
.114e	7c 46 19	jmp ($1946,x)			jmp 	(VectorTable,x)
.1151					_RUNSyntax:
.1151	4c 66 11	jmp $1166		jmp	ErrorV_syntax
.1154					_RUNNotToken:
.1154	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1156	90 f9		bcc $1151			bcc 	_RUNSyntax
.1158	20 ba 10	jsr $10ba			jsr 	CommandLET 					; assignment
.115b	80 d6		bra $1133			bra 	RUNNewCommand 				; loop round.
.115d					Command_Shift_Handler:
.115d	4c a4 11	jmp $11a4		jmp	ErrorV_unimplemented
.1160					Command_END:
.1160	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1163					Command_STOP:
.1163	4c 01 12	jmp $1201		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.1166					ErrorV_syntax:
.1166	20 97 27	jsr $2797		jsr	ErrorHandler
>1169	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>1171	72 72 6f 72 00
.1176					ErrorV_range:
.1176	20 97 27	jsr $2797		jsr	ErrorHandler
>1179	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>1181	61 6e 67 65 00
.1186					ErrorV_value:
.1186	20 97 27	jsr $2797		jsr	ErrorHandler
>1189	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>1191	65 00
.1193					ErrorV_type:
.1193	20 97 27	jsr $2797		jsr	ErrorHandler
>1196	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>119e	6d 61 74 63 68 00
.11a4					ErrorV_unimplemented:
.11a4	20 97 27	jsr $2797		jsr	ErrorHandler
>11a7	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>11af	65 6d 65 6e 74 65 64 00
.11b7					ErrorV_assert:
.11b7	20 97 27	jsr $2797		jsr	ErrorHandler
>11ba	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>11c2	61 69 6c 00
.11c6					ErrorV_internal:
.11c6	20 97 27	jsr $2797		jsr	ErrorHandler
>11c9	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>11d1	20 45 72 72 6f 72 00
.11d8					ErrorV_divzero:
.11d8	20 97 27	jsr $2797		jsr	ErrorHandler
>11db	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>11e3	79 20 5a 65 72 6f 00
.11ea					ErrorV_structure:
.11ea	20 97 27	jsr $2797		jsr	ErrorHandler
>11ed	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>11f5	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1201					ErrorV_stop:
.1201	20 97 27	jsr $2797		jsr	ErrorHandler
>1204	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>120c	53 74 6f 70 70 65 64 00
.1214					ErrorV_data:
.1214	20 97 27	jsr $2797		jsr	ErrorHandler
>1217	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>121f	61 74 61 00
.1223					ErrorV_redefine:
.1223	20 97 27	jsr $2797		jsr	ErrorHandler
>1226	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>122e	64 65 66 69 6e 65 64 00
.1236					ErrorV_index:
.1236	20 97 27	jsr $2797		jsr	ErrorHandler
>1239	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>1241	79 20 49 6e 64 65 78 00
.1249					ErrorV_memory:
.1249	20 97 27	jsr $2797		jsr	ErrorHandler
>124c	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>1254	65 6d 6f 72 79 00
.125a					ErrorV_uninitialised:
.125a	20 97 27	jsr $2797		jsr	ErrorHandler
>125d	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>1265	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.1274					ErrorV_string:
.1274	20 97 27	jsr $2797		jsr	ErrorHandler
>1277	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>127f	6e 67 20 4c 65 6e 67 74 68 00
.1289					ErrorV_variable:
.1289	20 97 27	jsr $2797		jsr	ErrorHandler
>128c	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>1294	20 4d 69 73 73 69 6e 67 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.129d					ERRCheckLParen:
.129d	b1 1c		lda ($1c),y			lda 	(codePtr),y
.129f	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.12a1	d0 18		bne $12bb			bne 	ERRSyntaxError
.12a3	c8		iny				iny
.12a4	60		rts				rts
.12a5					ERRCheckRParen:
.12a5	b1 1c		lda ($1c),y			lda 	(codePtr),y
.12a7	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.12a9	d0 10		bne $12bb			bne 	ERRSyntaxError
.12ab	c8		iny				iny
.12ac	60		rts				rts
.12ad					ERRCheckComma:
.12ad	b1 1c		lda ($1c),y			lda 	(codePtr),y
.12af	c9 99		cmp #$99			cmp 	#PR_COMMA
.12b1	d0 08		bne $12bb			bne 	ERRSyntaxError
.12b3	c8		iny				iny
.12b4	60		rts				rts
.12b5					ERRCheckA:
.12b5	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.12b7	d0 02		bne $12bb			bne 	ERRSyntaxError
.12b9	c8		iny				iny
.12ba	60		rts				rts
.12bb					ERRSyntaxError:
.12bb	4c 66 11	jmp $1166		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.12be					EXPBinAdd:
.12be	24 0f		bit $0f				bit 	IFR0+IExp
.12c0	30 6f		bmi $1331			bmi 	EXPConcatenate
.12c2	a2 10		ldx #$10			ldx 	#IFR1
.12c4	4c ab 20	jmp $20ab			jmp 	IFloatAdd
.12c7					EXPBinSub:
.12c7	24 0f		bit $0f				bit 	IFR0+IExp
.12c9	30 3f		bmi $130a			bmi 	EXPTypeError
.12cb	a2 10		ldx #$10			ldx 	#IFR1
.12cd	4c a4 20	jmp $20a4			jmp 	IFloatSubtract
.12d0					EXPBinMul:
.12d0	24 0f		bit $0f				bit 	IFR0+IExp
.12d2	30 36		bmi $130a			bmi 	EXPTypeError
.12d4	a2 10		ldx #$10			ldx 	#IFR1
.12d6	4c 55 21	jmp $2155			jmp 	IFloatMultiply
.12d9					EXPBinFDiv:
.12d9	24 0f		bit $0f				bit 	IFR0+IExp
.12db	30 2d		bmi $130a			bmi 	EXPTypeError
.12dd	a2 10		ldx #$10			ldx 	#IFR1
.12df	20 d8 23	jsr $23d8			jsr 	IFloatDivideFloat
.12e2	b0 0f		bcs $12f3			bcs 	EXPDZero
.12e4	60		rts				rts
.12e5					EXPBinIDiv:
.12e5	24 0f		bit $0f				bit 	IFR0+IExp
.12e7	30 21		bmi $130a			bmi 	EXPTypeError
.12e9	a2 10		ldx #$10			ldx 	#IFR1
.12eb	20 d8 23	jsr $23d8			jsr 	IFloatDivideFloat
.12ee	b0 03		bcs $12f3			bcs 	EXPDZero
.12f0	4c b5 23	jmp $23b5			jmp 	IFloatIntegerR0
.12f3					EXPDZero:
.12f3	4c d8 11	jmp $11d8		jmp	ErrorV_divzero
.12f6					EXPBinIMod:
.12f6	24 0f		bit $0f				bit 	IFR0+IExp
.12f8	30 10		bmi $130a			bmi 	EXPTypeError
.12fa	a2 10		ldx #$10			ldx 	#IFR1
.12fc	5a		phy				phy
.12fd	20 ed 22	jsr $22ed			jsr 	IFPreProcessBitwise 		; set up everything.
.1300	d0 05		bne $1307			bne 	EXPDRange
.1302	20 26 22	jsr $2226			jsr 	IFloatModulusInteger
.1305	7a		ply				ply
.1306	60		rts				rts
.1307					EXPDRange:
.1307	4c 76 11	jmp $1176		jmp	ErrorV_range
.130a					EXPTypeError:
.130a	4c 93 11	jmp $1193		jmp	ErrorV_type
.130d					EXPBinAnd:
.130d	24 0f		bit $0f				bit 	IFR0+IExp
.130f	30 f9		bmi $130a			bmi 	EXPTypeError
.1311	a2 10		ldx #$10			ldx 	#IFR1
.1313	20 a8 22	jsr $22a8			jsr 	IFloatBitwiseAnd
.1316	b0 ef		bcs $1307			bcs 	EXPDRange
.1318	60		rts				rts
.1319					EXPBinOr:
.1319	24 0f		bit $0f				bit 	IFR0+IExp
.131b	30 ed		bmi $130a			bmi 	EXPTypeError
.131d	a2 10		ldx #$10			ldx 	#IFR1
.131f	20 bf 22	jsr $22bf			jsr 	IFloatBitwiseOr
.1322	b0 e3		bcs $1307			bcs 	EXPDRange
.1324	60		rts				rts
.1325					EXPBinXor:
.1325	24 0f		bit $0f				bit 	IFR0+IExp
.1327	30 e1		bmi $130a			bmi 	EXPTypeError
.1329	a2 10		ldx #$10			ldx 	#IFR1
.132b	20 d6 22	jsr $22d6			jsr 	IFloatBitwiseXor
.132e	b0 d7		bcs $1307			bcs 	EXPDRange
.1330	60		rts				rts
.1331					EXPConcatenate:
.1331	18		clc				clc
.1332	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1334	72 10		adc ($10)			adc 	(IFR1)
.1336	b0 2d		bcs $1365			bcs 	_EXPCError
.1338	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.133a	da		phx				phx
.133b	a6 0d		ldx $0d				ldx 	IFR0+1
.133d	da		phx				phx
.133e	20 3a 1f	jsr $1f3a			jsr 	StringTempAllocate 			; allocate string, set up return
.1341	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1343	a5 10		lda $10				lda 	IFR1
.1345	20 4e 13	jsr $134e			jsr 	_EXPCCopyXA
.1348	fa		plx				plx 								; copy second string
.1349	68		pla				pla
.134a	20 4e 13	jsr $134e			jsr 	_EXPCCopyXA
.134d	60		rts				rts
.134e					_EXPCCopyXA:
.134e	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.1350	85 1e		sta $1e				sta 	zTemp0
.1352	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.1354	f0 0e		beq $1364			beq 	_EXPCCExit 					; nothing.
.1356	aa		tax				tax 								; count
.1357	5a		phy				phy 								; start positioin
.1358	a0 01		ldy #$01			ldy 	#1
.135a					_EXPCCLoop:
.135a	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.135c	20 6f 1f	jsr $1f6f			jsr 	StringTempWrite
.135f	c8		iny				iny
.1360	ca		dex				dex
.1361	d0 f7		bne $135a			bne 	_EXPCCLoop
.1363	7a		ply				ply
.1364					_EXPCCExit:
.1364	60		rts				rts
.1365					_EXPCError:
.1365	4c 74 12	jmp $1274		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1368					EXPReturnTrue:
.1368	a2 0c		ldx #$0c			ldx 	#IFR0
.136a	a9 01		lda #$01			lda 	#1
.136c	20 b7 26	jsr $26b7			jsr 	IFloatSetByte
.136f	20 c0 26	jsr $26c0			jsr 	IFloatNegate
.1372	60		rts				rts
.1373					EXPReturnFalse:
.1373	a2 0c		ldx #$0c			ldx 	#IFR0
.1375	4c b5 26	jmp $26b5			jmp 	IFloatSetZero
.1378					EXPCompareEqual:
.1378	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.137b	c9 00		cmp #$00			cmp 	#0
.137d	f0 e9		beq $1368			beq 	EXPReturnTrue
.137f	80 f2		bra $1373			bra 	EXPReturnFalse
.1381					EXPCompareLess:
.1381	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.1384	c9 ff		cmp #$ff			cmp 	#$FF
.1386	f0 e0		beq $1368			beq 	EXPReturnTrue
.1388	80 e9		bra $1373			bra 	EXPReturnFalse
.138a					EXPCompareGreater:
.138a	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.138d	c9 01		cmp #$01			cmp 	#1
.138f	f0 d7		beq $1368			beq 	EXPReturnTrue
.1391	80 e0		bra $1373			bra 	EXPReturnFalse
.1393					EXPCompareNotEqual:
.1393	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.1396	c9 00		cmp #$00			cmp 	#0
.1398	d0 ce		bne $1368			bne 	EXPReturnTrue
.139a	80 d7		bra $1373			bra 	EXPReturnFalse
.139c					EXPCompareLessEqual:
.139c	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.139f	c9 01		cmp #$01			cmp 	#1
.13a1	d0 c5		bne $1368			bne 	EXPReturnTrue
.13a3	80 ce		bra $1373			bra 	EXPReturnFalse
.13a5					EXPCompareGreaterEqual:
.13a5	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.13a8	c9 ff		cmp #$ff			cmp 	#$FF
.13aa	d0 bc		bne $1368			bne 	EXPReturnTrue
.13ac	80 c5		bra $1373			bra 	EXPReturnFalse
.13ae					EXPCompareBaseCode:
.13ae	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.13b0	30 10		bmi $13c2			bmi 	_EXCBCString
.13b2	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.13b4	20 83 23	jsr $2383			jsr 	IFloatCompare
.13b7	a5 0c		lda $0c				lda 	IFR0+IM0
.13b9	f0 06		beq $13c1			beq 	_EXCBCExit 					; return 0 if zero
.13bb	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.13bd	50 02		bvc $13c1			bvc 	_EXCBCExit
.13bf	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.13c1					_EXCBCExit:
.13c1	60		rts				rts
.13c2					_EXCBCString:
.13c2	5a		phy				phy
.13c3	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.13c5	d2 10		cmp ($10)			cmp 	(IFR1)
.13c7	90 02		bcc $13cb			bcc 	_EXCBCSmaller
.13c9	b2 10		lda ($10)			lda 	(IFR1)
.13cb					_EXCBCSmaller:
.13cb	aa		tax				tax
.13cc	f0 0d		beq $13db			beq 	_EXCBCMatches 				; if zero common length matches
.13ce	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.13d0					_EXCBCCheckSmallerMatches:
.13d0	c8		iny				iny 								; compare directly as far as common length
.13d1	38		sec				sec
.13d2	b1 10		lda ($10),y			lda 	(IFR1),y
.13d4	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.13d6	d0 08		bne $13e0			bne 	_EXCBCExit2
.13d8	ca		dex				dex
.13d9	d0 f5		bne $13d0			bne 	_EXCBCCheckSmallerMatches
.13db					_EXCBCMatches:
.13db	38		sec				sec
.13dc	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.13de	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.13e0					_EXCBCExit2:
.13e0	7a		ply				ply
.13e1	c9 00		cmp #$00			cmp 	#0
.13e3	f0 04		beq $13e9			beq 	_EXCBCReturn
.13e5	30 03		bmi $13ea			bmi 	_EXCBCFF
.13e7	a9 01		lda #$01			lda 	#1
.13e9					_EXCBCReturn:
.13e9	60		rts				rts
.13ea					_EXCBCFF:
.13ea	a9 ff		lda #$ff			lda 	#$FF
.13ec	60		rts				rts
.13ed					_EXCBCRange:
.13ed	4c 76 11	jmp $1176		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.13f0					EXPBinLeft:
.13f0	a9 ff		lda #$ff			lda 	#$FF
.13f2	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.13f5	4c fb 13	jmp $13fb			jmp 	EXPShiftCommon
.13f8					EXPBinRight:
.13f8	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.13fb					EXPShiftCommon:
.13fb	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.13fd	05 13		ora $13				ora 	IFR1+IExp
.13ff	29 7f		and #$7f			and 	#$7F
.1401	d0 35		bne $1438			bne 	_EXPSRange
.1403	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1405	29 e0		and #$e0			and 	#$E0
.1407	05 0d		ora $0d				ora 	IFR0+IM1
.1409	05 0e		ora $0e				ora 	IFR0+IM2
.140b	d0 25		bne $1432			bne 	_EXPSShiftZero 				; if so return zero
.140d	5a		phy				phy
.140e	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1410	29 1f		and #$1f			and 	#$1F
.1412	f0 17		beq $142b			beq 	_EXPSExit 					; exit if zero
.1414	a8		tay				tay
.1415					_EXPSLoop:
.1415	a2 10		ldx #$10			ldx 	#IFR1
.1417	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.141a	30 05		bmi $1421			bmi 	_EXPSShiftLeft
.141c	20 e4 26	jsr $26e4			jsr 	IFloatShiftRight
.141f	80 07		bra $1428			bra 	_EXPSContinue
.1421					_EXPSShiftLeft:
.1421	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1424	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1426	30 10		bmi $1438			bmi 	_EXPSRange
.1428					_EXPSContinue:
.1428	88		dey				dey
.1429	d0 ea		bne $1415			bne 	_EXPSLoop
.142b					_EXPSExit:
.142b	a2 10		ldx #$10			ldx 	#IFR1
.142d	20 46 26	jsr $2646			jsr 	IFloatCopyFromRegister
.1430	7a		ply				ply
.1431	60		rts				rts
.1432					_EXPSShiftZero:
.1432	a2 0c		ldx #$0c			ldx 	#IFR0
.1434	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.1437	60		rts				rts
.1438					_EXPSRange:
.1438	4c 76 11	jmp $1176		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.143b					EXPEvaluateExpression:
.143b	a9 00		lda #$00			lda 	#0 							; current precedence
.143d					EXPEvaluateExpressionPrecedenceA:
.143d	48		pha				pha
.143e	20 b8 14	jsr $14b8			jsr 	EXPTermValueR0				; do first term.
.1441					_EELoop:
.1441	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1443	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1445	90 31		bcc $1478			bcc 	_EEExit
.1447	aa		tax				tax 								; access the precedence of the operator.
.1448	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1449	dd aa 16	cmp $16aa,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.144c	b0 2b		bcs $1479			bcs 	_EEExit2
.144e	48		pha				pha 								; save current precedence.
.144f	da		phx				phx 								; save operator
.1450	c8		iny				iny 								; consume operator
.1451	da		phx				phx
.1452	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.1454	20 04 26	jsr $2604			jsr 	IFloatPushRx
.1457	fa		plx				plx
.1458	bd aa 16	lda $16aa,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.145b	20 3d 14	jsr $143d			jsr 	EXPEvaluateExpressionPrecedenceA
.145e	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.1460	20 25 26	jsr $2625			jsr 	IFloatPullRx
.1463	fa		plx				plx 								; operator
.1464	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.1466	45 13		eor $13				eor 	IFR1+IExp
.1468	30 08		bmi $1472			bmi 	_EEType
.146a					_EETypeOkay:
.146a	8a		txa				txa
.146b	0a		asl a				asl 	a 							; double -> X
.146c	aa		tax				tax
.146d	20 75 14	jsr $1475			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1470	80 cf		bra $1441			bra 	_EELoop
.1472					_EEType:
.1472	4c 93 11	jmp $1193		jmp	ErrorV_type
.1475					_EECallBinary:
.1475	7c 46 19	jmp ($1946,x)			jmp 	(VectorTable,x)
.1478					_EEExit:
.1478	68		pla				pla 								; throw precedence
.1479					_EEExit2:
.1479	18		clc				clc
.147a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.147b					EXPEvalNumber:
.147b	20 3b 14	jsr $143b			jsr 	EXPEvaluateExpression
.147e	24 0f		bit $0f				bit 	IFR0+IExp
.1480	30 01		bmi $1483			bmi 	EVUType
.1482	60		rts				rts
.1483					EVUType:
.1483	4c 93 11	jmp $1193		jmp	ErrorV_type
.1486					EXPEvalInteger:
.1486	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1489	20 b5 23	jsr $23b5			jsr 	IFloatIntegerR0
.148c	60		rts				rts
.148d					EXPEvalInteger16:
.148d	20 86 14	jsr $1486			jsr 	EXPEvalInteger
.1490	a5 0e		lda $0e				lda 	IFR0+IM2
.1492	d0 21		bne $14b5			bne 	EVURange
.1494	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1496	a5 0c		lda $0c				lda 	IFR0+IM0
.1498	60		rts				rts
.1499					EXPEvalInteger8:
.1499	20 86 14	jsr $1486			jsr 	EXPEvalInteger
.149c	a5 0e		lda $0e				lda 	IFR0+IM2
.149e	05 0d		ora $0d				ora 	IFR0+IM1
.14a0	d0 13		bne $14b5			bne 	EVURange
.14a2	a5 0c		lda $0c				lda 	IFR0+IM0
.14a4	60		rts				rts
.14a5					EXPEvalString:
.14a5	20 3b 14	jsr $143b			jsr 	EXPEvaluateExpression
.14a8	24 0f		bit $0f				bit 	IFR0+IExp
.14aa	10 d7		bpl $1483			bpl 	EVUType
.14ac	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14ae	86 1f		stx $1f				stx 	zTemp0+1
.14b0	a5 0c		lda $0c				lda 	IFR0+IM0
.14b2	85 1e		sta $1e				sta 	zTemp0
.14b4	60		rts				rts
.14b5					EVURange:
.14b5	4c 76 11	jmp $1176		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.14b8					EXPTermValueR0:
.14b8	20 dd 14	jsr $14dd			jsr 	EXPTermR0 					; get term
.14bb	90 1f		bcc $14dc			bcc 	_ETVNotReference 			; exit if value.
.14bd	5a		phy				phy
.14be	a0 03		ldy #$03			ldy 	#3 							; get type
.14c0	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14c2	30 14		bmi $14d8			bmi 	_ETVDereferenceString
.14c4	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.14c6	88		dey				dey
.14c7	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14c9	85 0e		sta $0e				sta 	IFR0+IM2
.14cb	88		dey				dey
.14cc	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14ce	aa		tax				tax
.14cf	b2 0c		lda ($0c)			lda 	(IFR0)
.14d1	86 0d		stx $0d				stx 	IFR0+IM1
.14d3	85 0c		sta $0c				sta 	IFR0+IM0
.14d5	7a		ply				ply
.14d6	18		clc				clc
.14d7	60		rts				rts
.14d8					_ETVDereferenceString:
>14d8	db						.byte 	$DB
.14d9	4c a4 11	jmp $11a4		jmp	ErrorV_unimplemented
.14dc					_ETVNotReference:
.14dc	60		rts				rts
.14dd					EXPTermR0:
.14dd	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.14df	30 10		bmi $14f1			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.14e1	c8		iny				iny 								; consume element
.14e2	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.14e4	b0 08		bcs $14ee			bcs 	_ETMIdentifier
.14e6	20 15 15	jsr $1515			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.14e9	20 48 15	jsr $1548			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.14ec	18		clc				clc 								; return value
.14ed	60		rts				rts
.14ee					_ETMIdentifier:
.14ee	4c 67 20	jmp $2067			jmp 	VARCheckSimple 				; check simple variables A-Z
.14f1					_ETMIsUnaryOrMinus:
.14f1	c8		iny				iny 								; consume element
.14f2	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.14f4	d0 0a		bne $1500			bne 	_ETMCheckUnary
.14f6	20 b8 14	jsr $14b8			jsr 	EXPTermValueR0 				; get a term to negate
.14f9	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.14fb	20 c0 26	jsr $26c0			jsr 	IFloatNegate
.14fe	18		clc				clc
.14ff	60		rts				rts
.1500					_ETMCheckUnary:
.1500	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1502	90 0e		bcc $1512			bcc 	_ETMUnarySyntax
.1504	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1506	b0 0a		bcs $1512			bcs 	_ETMUnarySyntax
.1508	0a		asl a				asl 	a
.1509	aa		tax				tax
.150a	20 0f 15	jsr $150f			jsr 	_ETMCallUnaryFunction
.150d	18		clc				clc
.150e	60		rts				rts
.150f					_ETMCallUnaryFunction:
.150f	7c 46 19	jmp ($1946,x)			jmp 	(VectorTable,x)
.1512					_ETMUnarySyntax:
.1512	4c 66 11	jmp $1166		jmp	ErrorV_syntax
.1515					EXPExtractTokenisedInteger:
.1515	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.1517	64 0f		stz $0f				stz 	IFR0+IExp
.1519	64 0d		stz $0d				stz 	IFR0+IM1
.151b	64 0e		stz $0e				stz 	IFR0+IM2
.151d					_ETMConstant:
.151d	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.151f	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1521	b0 24		bcs $1547			bcs 	_ETMCExit 					; no.
.1523	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1525	a5 0d		lda $0d				lda 	IFR0+IM1
.1527	85 0e		sta $0e				sta 	IFR0+IM2
.1529	a5 0c		lda $0c				lda 	IFR0+IM0
.152b	85 0d		sta $0d				sta 	IFR0+IM1
.152d	64 0c		stz $0c				stz 	IFR0+IM0
.152f	8a		txa				txa
.1530	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1531	66 0e		ror $0e				ror 	IFR0+IM2
.1533	66 0d		ror $0d				ror 	IFR0+IM1
.1535	66 0c		ror $0c				ror 	IFR0+IM0
.1537	4a		lsr a				lsr 	a
.1538	66 0e		ror $0e				ror 	IFR0+IM2
.153a	66 0d		ror $0d				ror 	IFR0+IM1
.153c	66 0c		ror $0c				ror 	IFR0+IM0
.153e	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.1540	11 1c		ora ($1c),y			ora 	(codePtr),y
.1542	85 0c		sta $0c				sta 	IFR0+IM0
.1544	c8		iny				iny 								; consume, loop back
.1545	80 d6		bra $151d			bra 	_ETMConstant
.1547					_ETMCExit:
.1547	60		rts				rts
.1548					EXPCheckDecimalFollows:
.1548	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.154a	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.154c	d0 19		bne $1567			bne 	_ETMCDExit
.154e	c8		iny				iny 								; consume token.
.154f	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.1551	5a		phy				phy									; save current position
.1552	48		pha				pha 								; save count of chars.
.1553	38		sec				sec 								; address into YX : y + codePtr+1
.1554	98		tya				tya
.1555	65 1c		adc $1c				adc 	codePtr
.1557	aa		tax				tax
.1558	a5 1d		lda $1d				lda 	codePtr+1
.155a	69 00		adc #$00			adc 	#0
.155c	a8		tay				tay
.155d	68		pla				pla 								; get count.
.155e	20 59 25	jsr $2559			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1561	7a		ply				ply 								; go to next token.
.1562	98		tya				tya
.1563	38		sec				sec
.1564	71 1c		adc ($1c),y			adc 	(codePtr),y
.1566	a8		tay				tay
.1567					_ETMCDExit:
.1567	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1568					EXPUnaryAbs:
.1568	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.156b	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.156e	20 f9 22	jsr $22f9			jsr 	IFloatAbsoluteR0
.1571	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1572					EXPUnaryAsc:
.1572	20 a5 14	jsr $14a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.1575	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.1578	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.157a	f0 06		beq $1582			beq 	_EXAZero 						; if so return 0
.157c	5a		phy				phy 									; otherwise get first character
.157d	a0 01		ldy #$01			ldy 	#1
.157f	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1581	7a		ply				ply
.1582					_EXAZero:
.1582	a2 0c		ldx #$0c			ldx 	#IFR0
.1584	20 b7 26	jsr $26b7			jsr 	IFloatSetByte
.1587	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1588					EXPUnaryChr:
.1588	20 99 14	jsr $1499			jsr 	EXPEvalInteger8 				; expr
.158b	48		pha				pha 									; push on stack
.158c	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.158f	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1591	20 3a 1f	jsr $1f3a			jsr 	StringTempAllocate
.1594	68		pla				pla
.1595	20 6f 1f	jsr $1f6f			jsr 	StringTempWrite
.1598	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1599					EXPUnaryDec:
.1599	20 a5 14	jsr $14a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.159c	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.159f	5a		phy				phy
.15a0	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.15a2	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.15a5	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.15a7	f0 3b		beq $15e4			beq 	_EUDError 						; empty string
.15a9	aa		tax				tax
.15aa	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.15ac					_EUDLoop:
.15ac	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.15ae	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.15b0	90 02		bcc $15b4			bcc 	_EUDNoCase
.15b2	e9 20		sbc #$20			sbc 	#$20
.15b4					_EUDNoCase:
.15b4	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.15b6	90 2c		bcc $15e4			bcc 	_EUDError
.15b8	c9 3a		cmp #$3a			cmp 	#'9'+1
.15ba	90 0a		bcc $15c6			bcc 	_EUDOkay
.15bc	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.15be	90 24		bcc $15e4			bcc 	_EUDError
.15c0	c9 47		cmp #$47			cmp 	#'F'+1
.15c2	b0 20		bcs $15e4			bcs 	_EUDError
.15c4	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.15c6					_EUDOkay:
.15c6	29 0f		and #$0f			and 	#15 							; make constant
.15c8	da		phx				phx
.15c9	48		pha				pha
.15ca	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.15cc	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.15cf	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.15d2	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.15d5	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.15d8	68		pla				pla 									; pop constant and OR in
.15d9	fa		plx				plx
.15da	05 0c		ora $0c				ora 	IFR0+IM0
.15dc	85 0c		sta $0c				sta 	IFR0+IM0
.15de	c8		iny				iny 									; next
.15df	ca		dex				dex
.15e0	d0 ca		bne $15ac			bne 	_EUDLoop
.15e2	7a		ply				ply
.15e3	60		rts				rts
.15e4					_EUDError:
.15e4	4c 86 11	jmp $1186		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.15e7					EXPUnaryInlineDec:
.15e7	4c 66 11	jmp $1166		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.15ea					EXPUnaryNull:
.15ea	20 b8 14	jsr $14b8			jsr 	EXPTermValueR0
.15ed	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.15ee					EXPUnaryFrac:
.15ee	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.15f1	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.15f4	20 5f 23	jsr $235f			jsr 	IFloatFractionalR0
.15f7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.15f8					EXPUnaryInt:
.15f8	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.15fb	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.15fe	20 b5 23	jsr $23b5			jsr 	IFloatIntegerR0
.1601	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1602					EXPUnaryLen:
.1602	20 a5 14	jsr $14a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.1605	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.1608	b2 1e		lda ($1e)			lda 	(zTemp0)
.160a	a2 0c		ldx #$0c			ldx 	#IFR0
.160c	20 b7 26	jsr $26b7			jsr 	IFloatSetByte
.160f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1610					EXPUnaryParenthesis:
.1610	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.1613	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.1616	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1617					EXPUnaryRnd:
.1617	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 				; number to R0
.161a	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 				; )
.161d	a2 0c		ldx #$0c			ldx 	#IFR0
.161f	20 36 16	jsr $1636			jsr 	EXPLoadInRandom
.1622	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1624	85 0f		sta $0f				sta 	IFR0+IExp
.1626	60		rts				rts
.1627					ExpUnaryRand:
.1627	20 86 14	jsr $1486			jsr 	EXPEvalInteger 				; integer to R0
.162a	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 				; )
.162d	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.162f	20 36 16	jsr $1636			jsr 	EXPLoadInRandom
.1632	20 26 22	jsr $2226			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1635	60		rts				rts
.1636					EXPLoadInRandom:
.1636	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.1639	20 4b 16	jsr $164b			jsr 	EXPRandom32
.163c	95 00		sta $00,x			sta 	IM0,x
.163e	20 4b 16	jsr $164b			jsr 	EXPRandom32
.1641	95 01		sta $01,x			sta 	IM1,x
.1643	20 4b 16	jsr $164b			jsr 	EXPRandom32
.1646	29 7f		and #$7f			and 	#$7F
.1648	95 02		sta $02,x			sta 	IM2,x
.164a	60		rts				rts
.164b					EXPRandom32:
.164b	5a		phy				phy
.164c	a0 08		ldy #$08			ldy 	#8
.164e	ad 3c 03	lda $033c			lda 	EXPSeed+0
.1651	0d 3d 03	ora $033d			ora 	EXPSeed+1
.1654	0d 3e 03	ora $033e			ora 	EXPSeed+2
.1657	0d 3f 03	ora $033f			ora 	EXPSeed+3
.165a	d0 08		bne $1664			bne 	_EXPRNoReset
.165c	ee 3c 03	inc $033c			inc 	EXPSeed+0
.165f	a0 10		ldy #$10			ldy 	#16
.1661	8c 3f 03	sty $033f			sty 	EXPSeed+3
.1664					_EXPRNoReset:
.1664	ad 3c 03	lda $033c			lda 	EXPSeed+0
.1667					_EXPRLoop:
.1667	0a		asl a				asl		a
.1668	2e 3d 03	rol $033d			rol 	EXPSeed+1
.166b	2e 3e 03	rol $033e			rol 	EXPSeed+2
.166e	2e 3f 03	rol $033f			rol 	EXPSeed+3
.1671	90 02		bcc $1675			bcc 	_EXPRNoEOR
.1673	49 c5		eor #$c5			eor 	#$C5
.1675					_EXPRNoEOR:
.1675	88		dey				dey
.1676	d0 ef		bne $1667			bne 	_EXPRLoop
.1678	8d 3c 03	sta $033c			sta 	EXPSeed+0
.167b	7a		ply				ply
.167c	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.167d					EXPUnarySgn:
.167d	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.1680	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.1683	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.1685	20 57 26	jsr $2657			jsr 	IFloatCopyToRegister
.1688	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.168a	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.168d	a2 10		ldx #$10			ldx 	#IFR1
.168f	20 83 23	jsr $2383			jsr 	IFloatCompare 					; compare R1 vs 0.
.1692	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1693					EXPUnarySqr:
.1693	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.1696	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.1699	20 01 23	jsr $2301			jsr 	IFloatSquareRootR0 				; square root.
.169c	b0 01		bcs $169f			bcs 	_EUSValue
.169e	60		rts				rts
.169f					_EUSValue:
.169f	4c 76 11	jmp $1176		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.16a2					EXPUnaryHex:
.16a2	20 86 14	jsr $1486			jsr 	EXPEvalInteger 					; expr
.16a5	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.16a8	5a		phy				phy
.16a9	a9 10		lda #$10			lda 	#16
.16ab	20 56 24	jsr $2456			jsr 	IFloatIntegerToStringR0
.16ae	80 0a		bra $16ba			bra 	EUSMain
.16b0					EXPUnaryStr:
.16b0	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; expr
.16b3	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.16b6	5a		phy				phy
.16b7	20 b2 24	jsr $24b2			jsr 	IFloatFloatToStringR0 			; convert to string
.16ba					EUSMain:
.16ba	b0 18		bcs $16d4			bcs 	_EUSError
.16bc	86 1e		stx $1e				stx 	zTemp0 							; save string address
.16be	84 1f		sty $1f				sty 	zTemp0+1
.16c0	48		pha				pha 									; save count
.16c1	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.16c3	20 3a 1f	jsr $1f3a			jsr 	StringTempAllocate
.16c6	fa		plx				plx 									; count in X
.16c7	a0 00		ldy #$00			ldy 	#0
.16c9					_EUSCopy:
.16c9	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.16cb	c8		iny				iny
.16cc	20 6f 1f	jsr $1f6f			jsr 	StringTempWrite
.16cf	ca		dex				dex
.16d0	d0 f7		bne $16c9			bne	 	_EUSCopy
.16d2	7a		ply				ply
.16d3	60		rts				rts
.16d4					_EUSError:
.16d4	4c 76 11	jmp $1176		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.16d7					EXPUnaryInlineString:
.16d7	18		clc				clc 								; physical address -> IM0,1
.16d8	98		tya				tya
.16d9	65 1c		adc $1c				adc 	codePtr
.16db	85 0c		sta $0c				sta 	IFR0+IM0
.16dd	a5 1d		lda $1d				lda 	codePtr+1
.16df	69 00		adc #$00			adc 	#0
.16e1	85 0d		sta $0d				sta 	IFR0+IM1
.16e3	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.16e5	a9 80		lda #$80			lda 	#$80
.16e7	85 0f		sta $0f				sta 	IFR0+IExp
.16e9	98		tya				tya	 								; skip over it.
.16ea	38		sec				sec
.16eb	71 1c		adc ($1c),y			adc 	(codePtr),y
.16ed	a8		tay				tay
.16ee	60		rts				rts
.16ef					_EXPUISRange:
.16ef	4c 76 11	jmp $1176		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.16f2					EXPUnaryLeft:
.16f2	20 38 17	jsr $1738			jsr 	EXPCommonStart 					; <string>,
.16f5	48		pha				pha 									; save string address on stack
.16f6	da		phx				phx
.16f7	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.16f9	48		pha				pha
.16fa	20 99 14	jsr $1499			jsr 	EXPEvalInteger8 				; characters to do
.16fd	80 44		bra $1743			bra 	EXPSubstringCommon
.16ff					EXPUnaryRight:
.16ff	20 38 17	jsr $1738			jsr 	EXPCommonStart 					; <string>,
.1702	48		pha				pha 									; save string address on stack
.1703	da		phx				phx
.1704	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.1706	48		pha				pha
.1707	20 99 14	jsr $1499			jsr 	EXPEvalInteger8 				; characters to do
.170a	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.170c	68		pla				pla
.170d	38		sec				sec
.170e	e5 1e		sbc $1e				sbc 	zTemp0
.1710	b0 02		bcs $1714			bcs 	_EUROffLeft
.1712	a9 00		lda #$00			lda 	#0
.1714					_EUROffLeft:
.1714	48		pha				pha 									; start pos
.1715	a9 ff		lda #$ff			lda 	#255
.1717	80 2a		bra $1743			bra 	EXPSubstringCommon
.1719					EXPUnaryMid:
.1719	20 38 17	jsr $1738			jsr 	EXPCommonStart 					; <string>,
.171c	48		pha				pha 									; save string address on stack
.171d	da		phx				phx
.171e	20 99 14	jsr $1499			jsr 	EXPEvalInteger8 				; characters start
.1721	f0 12		beq $1735			beq 	_EUSError 						; 1 is left
.1723	3a		dec a				dec 	a 								; zero based.
.1724	48		pha				pha
.1725	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.1727	c9 99		cmp #$99			cmp 	#PR_COMMA
.1729	f0 04		beq $172f			beq 	_EUMLength 						; if so m is provided
.172b	a9 ff		lda #$ff			lda 	#255 							; default m
.172d	80 14		bra $1743			bra 	EXPSubstringCommon
.172f					_EUMLength:
.172f	c8		iny				iny 									; consume comma
.1730	20 99 14	jsr $1499			jsr 	EXPEvalInteger8 				; characters to do
.1733	80 0e		bra $1743			bra 	EXPSubstringCommon
.1735					_EUSError:
.1735	4c 86 11	jmp $1186		jmp	ErrorV_value
.1738					EXPCommonStart:
.1738	20 a5 14	jsr $14a5			jsr 	EXPEvalString
.173b	20 ad 12	jsr $12ad			jsr 	ERRCheckComma
.173e	a5 0c		lda $0c				lda 	IFR0+IM0
.1740	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1742	60		rts				rts
.1743					EXPSubstringCommon:
.1743	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.1745	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; check right bracket.
.1748	68		pla				pla 									; start position
.1749	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.174b	fa		plx				plx 									; get string address to zTemp2.
.174c	86 23		stx $23				stx 	zTemp2+1
.174e	68		pla				pla
.174f	85 22		sta $22				sta 	zTemp2
.1751	38		sec				sec 									; length - start is the max count of chars
.1752	b2 22		lda ($22)			lda 	(zTemp2)
.1754	e5 21		sbc $21				sbc 	zTemp1+1
.1756	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.1758	b0 02		bcs $175c			bcs 	_EXPSSNoTrim
.175a	85 20		sta $20				sta 	zTemp1 							; update count with available
.175c					_EXPSSNoTrim:
.175c	a5 20		lda $20				lda 	zTemp1 							; chars required.
.175e	20 3a 1f	jsr $1f3a			jsr 	StringTempAllocate 				; allocate memory for it.
.1761	a5 20		lda $20				lda 	zTemp1 							; zero length string
.1763	f0 15		beq $177a			beq 	_EXPSSExit
.1765	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.1767	d2 22		cmp ($22)			cmp 	(zTemp2)
.1769	b0 0f		bcs $177a			bcs 	_EXPSSExit
.176b	5a		phy				phy
.176c	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.176e	c8		iny				iny 									; +1 for the length byte
.176f					_EXPSSCopy:
.176f	b1 22		lda ($22),y			lda 	(zTemp2),y
.1771	20 6f 1f	jsr $1f6f			jsr 	StringTempWrite
.1774	c8		iny				iny
.1775	c6 20		dec $20				dec 	zTemp1
.1777	d0 f6		bne $176f			bne 	_EXPSSCopy
.1779	7a		ply				ply
.177a					_EXPSSExit:
.177a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.177b					EXPUnaryVal:
.177b	20 a5 14	jsr $14a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.177e	20 a5 12	jsr $12a5			jsr 	ERRCheckRParen 					; )
.1781	5a		phy				phy
.1782	18		clc				clc
.1783	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.1785	69 01		adc #$01			adc 	#1
.1787	aa		tax				tax
.1788	a5 1f		lda $1f				lda 	zTemp0+1
.178a	69 00		adc #$00			adc 	#0
.178c	a8		tay				tay
.178d	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.178f	20 19 25	jsr $2519			jsr 	IFloatStringToFloatR0 			; do conversion
.1792	b0 02		bcs $1796			bcs 	_EUVError
.1794	7a		ply				ply
.1795	60		rts				rts
.1796					_EUVError:
.1796	4c 86 11	jmp $1186		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1799					BinaryPrecedence:
>1799	02					.byte	 2	; $ef =
>179a	02					.byte	 2	; $f0 <>
>179b	02					.byte	 2	; $f1 <=
>179c	02					.byte	 2	; $f2 <
>179d	02					.byte	 2	; $f3 >=
>179e	02					.byte	 2	; $f4 >
>179f	01					.byte	 1	; $f5 XOR
>17a0	01					.byte	 1	; $f6 OR
>17a1	01					.byte	 1	; $f7 AND
>17a2	04					.byte	 4	; $f8 DIV
>17a3	04					.byte	 4	; $f9 MOD
>17a4	04					.byte	 4	; $fa <<
>17a5	04					.byte	 4	; $fb >>
>17a6	04					.byte	 4	; $fc /
>17a7	04					.byte	 4	; $fd *
>17a8	03					.byte	 3	; $fe -
>17a9	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.17aa					StandardTokens:
>17aa	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>17b1	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>17b7	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>17bd	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>17c2	02 49 46				.byte	$02,$49,$46                             	; $84 if
>17c5	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>17cb	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>17ce	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>17d3	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>17d8	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>17e0	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>17e4	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>17e9	00					.byte	$00                                     	; $8c [[end]]
>17ea	00					.byte	$00                                     	; $8d [[shift]]
>17eb	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>17f0	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>17f5	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>17f8	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>17fd	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1801	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1807	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>180d	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1812	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1816	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>181a	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>181f	01 2c					.byte	$01,$2c                                 	; $99 ,
>1821	01 3b					.byte	$01,$3b                                 	; $9a ;
>1823	01 3a					.byte	$01,$3a                                 	; $9b :
>1825	01 27					.byte	$01,$27                                 	; $9c '
>1827	01 29					.byte	$01,$29                                 	; $9d )
>1829	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>182d	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1833	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1837	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>183b	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1840	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1844	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>184b	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1850	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1855	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>185a	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>185f	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1864	00					.byte	0											; $aa
>1865	00					.byte	0											; $ab
>1866	00					.byte	0											; $ac
>1867	00					.byte	0											; $ad
>1868	00					.byte	0											; $ae
>1869	00					.byte	0											; $af
>186a	00					.byte	0											; $b0
>186b	00					.byte	0											; $b1
>186c	00					.byte	0											; $b2
>186d	00					.byte	0											; $b3
>186e	00					.byte	0											; $b4
>186f	00					.byte	0											; $b5
>1870	00					.byte	0											; $b6
>1871	00					.byte	0											; $b7
>1872	00					.byte	0											; $b8
>1873	00					.byte	0											; $b9
>1874	00					.byte	0											; $ba
>1875	00					.byte	0											; $bb
>1876	00					.byte	0											; $bc
>1877	00					.byte	0											; $bd
>1878	00					.byte	0											; $be
>1879	00					.byte	0											; $bf
>187a	00					.byte	0											; $c0
>187b	00					.byte	0											; $c1
>187c	00					.byte	0											; $c2
>187d	00					.byte	0											; $c3
>187e	00					.byte	0											; $c4
>187f	00					.byte	0											; $c5
>1880	00					.byte	0											; $c6
>1881	00					.byte	0											; $c7
>1882	00					.byte	0											; $c8
>1883	00					.byte	0											; $c9
>1884	00					.byte	0											; $ca
>1885	00					.byte	0											; $cb
>1886	00					.byte	0											; $cc
>1887	00					.byte	0											; $cd
>1888	00					.byte	0											; $ce
>1889	00					.byte	0											; $cf
>188a	00					.byte	0											; $d0
>188b	00					.byte	0											; $d1
>188c	00					.byte	0											; $d2
>188d	00					.byte	0											; $d3
>188e	00					.byte	0											; $d4
>188f	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1895	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>189b	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>18a3	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>18aa	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>18b0	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>18b6	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>18bb	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>18c0	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>18c5	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>18ca	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>18cf	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>18d5	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>18da	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>18e2	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>18e9	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>18ee	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>18f3	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>18f9	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>18fe	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1904	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1909	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>190f	01 28					.byte	$01,$28                                 	; $eb (
>1911	01 24					.byte	$01,$24                                 	; $ec $
>1913	00					.byte	$00                                     	; $ed [[decimal]]
>1914	00					.byte	$00                                     	; $ee [[string]]
>1915	01 3d					.byte	$01,$3d                                 	; $ef =
>1917	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>191a	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>191d	01 3c					.byte	$01,$3c                                 	; $f2 <
>191f	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1922	01 3e					.byte	$01,$3e                                 	; $f4 >
>1924	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1928	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>192b	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>192f	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1933	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1937	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>193a	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>193d	01 2f					.byte	$01,$2f                                 	; $fc /
>193f	01 2a					.byte	$01,$2a                                 	; $fd *
>1941	01 2d					.byte	$01,$2d                                 	; $fe -
>1943	01 2b					.byte	$01,$2b                                 	; $ff +
>1945	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1946					VectorTable:
>1946	93 27					.word	NotImplemented           ; $80 REPEAT
>1948	93 27					.word	NotImplemented           ; $81 UNTIL
>194a	93 27					.word	NotImplemented           ; $82 WHILE
>194c	93 27					.word	NotImplemented           ; $83 WEND
>194e	93 27					.word	NotImplemented           ; $84 IF
>1950	93 27					.word	NotImplemented           ; $85 ENDIF
>1952	93 27					.word	NotImplemented           ; $86 DO
>1954	93 27					.word	NotImplemented           ; $87 LOOP
>1956	93 27					.word	NotImplemented           ; $88 PROC
>1958	93 27					.word	NotImplemented           ; $89 ENDPROC
>195a	93 27					.word	NotImplemented           ; $8a FOR
>195c	93 27					.word	NotImplemented           ; $8b NEXT
>195e	1f 11					.word	RUNEndOfLine             ; $8c [[END]]
>1960	5d 11					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1962	93 27					.word	NotImplemented           ; $8e ELSE
>1964	52 10					.word	NoExec01                 ; $8f THEN
>1966	52 10					.word	NoExec02                 ; $90 TO
>1968	52 10					.word	NoExec03                 ; $91 STEP
>196a	ba 10					.word	CommandLET               ; $92 LET
>196c	55 10					.word	Command_Print            ; $93 PRINT
>196e	93 27					.word	NotImplemented           ; $94 INPUT
>1970	93 27					.word	NotImplemented           ; $95 CALL
>1972	93 27					.word	NotImplemented           ; $96 SYS
>1974	06 11					.word	Command_REM              ; $97 REM
>1976	93 27					.word	NotImplemented           ; $98 EXIT
>1978	52 10					.word	NoExec04                 ; $99 ,
>197a	52 10					.word	NoExec05                 ; $9a ;
>197c	52 10					.word	NoExec06                 ; $9b :
>197e	06 11					.word	Command_REM2             ; $9c '
>1980	52 10					.word	NoExec07                 ; $9d )
>1982	93 27					.word	NotImplemented           ; $9e DIM
>1984	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1986	fd 10					.word	Command_NEW              ; $a0 NEW
>1988	13 11					.word	Command_RUN              ; $a1 RUN
>198a	63 11					.word	Command_STOP             ; $a2 STOP
>198c	60 11					.word	Command_END              ; $a3 END
>198e	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1990	93 27					.word	NotImplemented           ; $a5 LIST
>1992	93 27					.word	NotImplemented           ; $a6 SAVE
>1994	93 27					.word	NotImplemented           ; $a7 LOAD
>1996	93 27					.word	NotImplemented           ; $a8 POKE
>1998	93 27					.word	NotImplemented           ; $a9 DOKE
>199a	93 27					.word	NotImplemented           ; $aa
>199c	93 27					.word	NotImplemented           ; $ab
>199e	93 27					.word	NotImplemented           ; $ac
>19a0	93 27					.word	NotImplemented           ; $ad
>19a2	93 27					.word	NotImplemented           ; $ae
>19a4	93 27					.word	NotImplemented           ; $af
>19a6	93 27					.word	NotImplemented           ; $b0
>19a8	93 27					.word	NotImplemented           ; $b1
>19aa	93 27					.word	NotImplemented           ; $b2
>19ac	93 27					.word	NotImplemented           ; $b3
>19ae	93 27					.word	NotImplemented           ; $b4
>19b0	93 27					.word	NotImplemented           ; $b5
>19b2	93 27					.word	NotImplemented           ; $b6
>19b4	93 27					.word	NotImplemented           ; $b7
>19b6	93 27					.word	NotImplemented           ; $b8
>19b8	93 27					.word	NotImplemented           ; $b9
>19ba	93 27					.word	NotImplemented           ; $ba
>19bc	93 27					.word	NotImplemented           ; $bb
>19be	93 27					.word	NotImplemented           ; $bc
>19c0	93 27					.word	NotImplemented           ; $bd
>19c2	93 27					.word	NotImplemented           ; $be
>19c4	93 27					.word	NotImplemented           ; $bf
>19c6	93 27					.word	NotImplemented           ; $c0
>19c8	93 27					.word	NotImplemented           ; $c1
>19ca	93 27					.word	NotImplemented           ; $c2
>19cc	93 27					.word	NotImplemented           ; $c3
>19ce	93 27					.word	NotImplemented           ; $c4
>19d0	93 27					.word	NotImplemented           ; $c5
>19d2	93 27					.word	NotImplemented           ; $c6
>19d4	93 27					.word	NotImplemented           ; $c7
>19d6	93 27					.word	NotImplemented           ; $c8
>19d8	93 27					.word	NotImplemented           ; $c9
>19da	93 27					.word	NotImplemented           ; $ca
>19dc	93 27					.word	NotImplemented           ; $cb
>19de	93 27					.word	NotImplemented           ; $cc
>19e0	93 27					.word	NotImplemented           ; $cd
>19e2	93 27					.word	NotImplemented           ; $ce
>19e4	93 27					.word	NotImplemented           ; $cf
>19e6	93 27					.word	NotImplemented           ; $d0
>19e8	93 27					.word	NotImplemented           ; $d1
>19ea	93 27					.word	NotImplemented           ; $d2
>19ec	93 27					.word	NotImplemented           ; $d3
>19ee	93 27					.word	NotImplemented           ; $d4
>19f0	93 27					.word	NotImplemented           ; $d5 DEEK(
>19f2	93 27					.word	NotImplemented           ; $d6 PEEK(
>19f4	ff 16					.word	EXPUnaryRight            ; $d7 RIGHT$(
>19f6	f2 16					.word	EXPUnaryLeft             ; $d8 LEFT$(
>19f8	19 17					.word	EXPUnaryMid              ; $d9 MID$(
>19fa	b0 16					.word	EXPUnaryStr              ; $da STR$(
>19fc	7b 17					.word	EXPUnaryVal              ; $db VAL(
>19fe	7d 16					.word	EXPUnarySgn              ; $dc SGN(
>1a00	68 15					.word	EXPUnaryAbs              ; $dd ABS(
>1a02	02 16					.word	EXPUnaryLen              ; $de LEN(
>1a04	93 16					.word	EXPUnarySqr              ; $df SQR(
>1a06	88 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1a08	72 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1a0a	93 27					.word	NotImplemented           ; $e2 INKEY$(
>1a0c	93 27					.word	NotImplemented           ; $e3 EVENT(
>1a0e	93 27					.word	NotImplemented           ; $e4 TIME
>1a10	f8 15					.word	EXPUnaryInt              ; $e5 INT(
>1a12	ee 15					.word	EXPUnaryFrac             ; $e6 FRAC(
>1a14	99 15					.word	EXPUnaryDec              ; $e7 DEC(
>1a16	a2 16					.word	EXPUnaryHex              ; $e8 HEX$(
>1a18	17 16					.word	EXPUnaryRnd              ; $e9 RND(
>1a1a	27 16					.word	ExpUnaryRand             ; $ea RAND(
>1a1c	10 16					.word	EXPUnaryParenthesis      ; $eb (
>1a1e	ea 15					.word	EXPUnaryNull             ; $ec $
>1a20	e7 15					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1a22	d7 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1a24	78 13					.word	EXPCompareEqual          ; $ef =
>1a26	93 13					.word	EXPCompareNotEqual       ; $f0 <>
>1a28	9c 13					.word	EXPCompareLessEqual      ; $f1 <=
>1a2a	81 13					.word	EXPCompareLess           ; $f2 <
>1a2c	a5 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1a2e	8a 13					.word	EXPCompareGreater        ; $f4 >
>1a30	25 13					.word	EXPBinXor                ; $f5 XOR
>1a32	19 13					.word	EXPBinOr                 ; $f6 OR
>1a34	0d 13					.word	EXPBinAnd                ; $f7 AND
>1a36	e5 12					.word	EXPBinIDiv               ; $f8 DIV
>1a38	f6 12					.word	EXPBinIMod               ; $f9 MOD
>1a3a	f0 13					.word	EXPBinLeft               ; $fa <<
>1a3c	f8 13					.word	EXPBinRight              ; $fb >>
>1a3e	d9 12					.word	EXPBinFDiv               ; $fc /
>1a40	d0 12					.word	EXPBinMul                ; $fd *
>1a42	c7 12					.word	EXPBinSub                ; $fe -
>1a44	be 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1a46					TOKDetokenise:
.1a46	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1a48	84 23		sty $23				sty 	zTemp2+1
.1a4a	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.1a4d					_TOKDLoop:
.1a4d	20 7c 1a	jsr $1a7c			jsr 	TOKDGet 					; get next
.1a50	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1a52	f0 26		beq $1a7a			beq 	_TOKDExit
.1a54	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1a56	f0 1d		beq $1a75			beq 	_TOKDDataItem
.1a58	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1a5a	f0 19		beq $1a75			beq 	_TOKDDataItem
.1a5c	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1a5e	10 05		bpl $1a65			bpl 	_TOKDNotToken
.1a60	20 44 1b	jsr $1b44			jsr 	TOKDToken 					; token to text.
.1a63	80 e8		bra $1a4d			bra 	_TOKDLoop
.1a65					_TOKDNotToken:
.1a65	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1a67	90 05		bcc $1a6e			bcc 	_TOKDNotIdentifier
.1a69	20 b7 1a	jsr $1ab7			jsr 	TOKDIdentifier
.1a6c	80 df		bra $1a4d			bra 	_TOKDLoop
.1a6e					_TOKDNotIdentifier:
.1a6e	a0 0a		ldy #$0a			ldy 	#10
.1a70	20 00 1b	jsr $1b00			jsr 	TOKDInteger
.1a73	80 d8		bra $1a4d			bra 	_TOKDLoop
.1a75					_TOKDDataItem:
.1a75	20 92 1a	jsr $1a92			jsr 	TOKDDataItem
.1a78	80 d3		bra $1a4d			bra 	_TOKDLoop
.1a7a					_TOKDExit:
.1a7a	18		clc				clc
.1a7b	60		rts				rts
.1a7c	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1a7e	e6 22		inc $22				inc 	zTemp2
.1a80	d0 02		bne $1a84			bne 	_TKDGExit
.1a82	e6 23		inc $23				inc 	zTemp2+1
.1a84					_TKDGExit:
.1a84	60		rts				rts
.1a85					TOKDOutput:
.1a85	8d 42 03	sta $0342			sta 	TOKLastCharacter
.1a88	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.1a8b					TOKSetDetokeniseOutput:
.1a8b	8e 40 03	stx $0340			stx 	TOKOutputMethod
.1a8e	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.1a91	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1a92					TOKDDataItem:
.1a92	a8		tay				tay 								; type in Y
.1a93	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1a95	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1a97	f0 02		beq $1a9b			beq 	_TOKDDIsString
.1a99	a9 2e		lda #$2e			lda 	#'.'
.1a9b					_TOKDDIsString:
.1a9b	20 85 1a	jsr $1a85			jsr 	TOKDOutput 					; dump it
.1a9e	20 7c 1a	jsr $1a7c			jsr 	TOKDGet 					; get length into X
.1aa1	aa		tax				tax
.1aa2					_TOKDDOutput:
.1aa2	ca		dex				dex 								; are we complete
.1aa3	30 08		bmi $1aad			bmi 	_TOKDDEnd
.1aa5	20 7c 1a	jsr $1a7c			jsr 	TOKDGet 					; get character and output it
.1aa8	20 85 1a	jsr $1a85			jsr 	TOKDOutput
.1aab	80 f5		bra $1aa2			bra 	_TOKDDOutput
.1aad					_TOKDDEnd:
.1aad	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1aaf	d0 05		bne $1ab6			bne 	_TOKDDNotString
.1ab1	a9 22		lda #$22			lda 	#'"'
.1ab3	20 85 1a	jsr $1a85			jsr 	TOKDOutput
.1ab6					_TOKDDNotString:
.1ab6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1ab7					TOKDIdentifier:
.1ab7	a0 ff		ldy #$ff			ldy 	#$FF
.1ab9	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.1abc					_TOKDLoop:
.1abc	a8		tay				tay 								; token in Y
.1abd	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1abf	c0 64		cpy #$64			cpy 	#$64
.1ac1	f0 11		beq $1ad4			beq 	_TOKDIOutput
.1ac3	a9 5f		lda #$5f			lda 	#'_'
.1ac5	c0 65		cpy #$65			cpy 	#$65
.1ac7	f0 0b		beq $1ad4			beq 	_TOKDIOutput
.1ac9	98		tya				tya 								; handle a-z
.1aca	18		clc				clc
.1acb	69 21		adc #$21			adc	 	#$21
.1acd	c0 5a		cpy #$5a			cpy 	#$5A
.1acf	90 03		bcc $1ad4			bcc 	_TOKDIOutput
.1ad1	38		sec				sec 								; handle 0-9
.1ad2	e9 4b		sbc #$4b			sbc 	#$4B
.1ad4					_TOKDIOutput:
.1ad4	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.1ad7	10 08		bpl $1ae1			bpl 	_TOKDINoSpacing
.1ad9	48		pha				pha
.1ada	20 76 1b	jsr $1b76			jsr 	TOKDSpacing
.1add	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.1ae0	68		pla				pla
.1ae1					_TOKDINoSpacing:
.1ae1	20 85 1a	jsr $1a85			jsr 	TOKDOutput
.1ae4	20 7c 1a	jsr $1a7c			jsr 	TOKDGet 					; get next token
.1ae7	c9 7c		cmp #$7c			cmp 	#$7C
.1ae9	90 d1		bcc $1abc			bcc 	_TOKDLoop
.1aeb	f0 12		beq $1aff			beq 	_TOKDIExit 					; it's a number, no tail.
.1aed	4a		lsr a				lsr 	a 							; string ?
.1aee	90 07		bcc $1af7			bcc 	_TOKDICheckArray
.1af0	48		pha				pha
.1af1	a9 24		lda #$24			lda 	#"$"
.1af3	20 85 1a	jsr $1a85			jsr 	TOKDOutput
.1af6	68		pla				pla
.1af7					_TOKDICheckArray:
.1af7	4a		lsr a				lsr 	a 							; array ?
.1af8	90 05		bcc $1aff			bcc 	_TOKDIExit
.1afa	a9 28		lda #$28			lda 	#"("
.1afc	20 85 1a	jsr $1a85			jsr 	TOKDOutput
.1aff					_TOKDIExit:
.1aff	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1b00					TOKDInteger:
.1b00	5a		phy				phy 								; save base
.1b01	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1b03	20 b7 26	jsr $26b7			jsr 	IFloatSetByte
.1b06					_TOKDILoop:
.1b06	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1b08	c9 40		cmp #$40			cmp 	#$40
.1b0a	b0 1d		bcs $1b29			bcs 	_TOKDIHaveInteger
.1b0c	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1b0e	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1b11	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1b14	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1b17	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1b1a	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1b1d	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1b20	20 7c 1a	jsr $1a7c			jsr 	TOKDGet 					; OR byte in.
.1b23	05 0c		ora $0c				ora 	IFR0+IM0
.1b25	85 0c		sta $0c				sta 	IFR0+IM0
.1b27	80 dd		bra $1b06			bra 	_TOKDILoop
.1b29					_TOKDIHaveInteger:
.1b29	7a		ply				ply 								; restore base
.1b2a	98		tya				tya 								; base in A
.1b2b	20 56 24	jsr $2456			jsr 	IFloatIntegerToStringR0
.1b2e	86 1e		stx $1e				stx 	zTemp0
.1b30	84 1f		sty $1f				sty 	zTemp0+1
.1b32	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b34	20 76 1b	jsr $1b76			jsr 	TOKDSpacing 				; check spacing okay.
.1b37	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1b39					_TOKDOutput:
.1b39	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b3b	20 85 1a	jsr $1a85			jsr 	TOKDOutput
.1b3e	c8		iny				iny
.1b3f	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b41	d0 f6		bne $1b39			bne 	_TOKDOutput
.1b43	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1b44					TOKDToken:
.1b44	a2 aa		ldx #$aa			ldx 	#StandardTokens & $FF
.1b46	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1b48					_TOKDSearch:
.1b48	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1b4a	84 1f		sty $1f				sty 	zTemp0+1
.1b4c	aa		tax				tax 								; token ID in X.
.1b4d					_TOKDFind:
.1b4d	ca		dex				dex 								; reached the start
.1b4e	10 0d		bpl $1b5d			bpl 	_TOKDFound
.1b50	38		sec				sec 								; go to next entry
.1b51	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b53	65 1e		adc $1e				adc 	zTemp0
.1b55	85 1e		sta $1e				sta 	zTemp0
.1b57	90 f4		bcc $1b4d			bcc 	_TOKDFind
.1b59	e6 1f		inc $1f				inc 	zTemp0+1
.1b5b	80 f0		bra $1b4d			bra 	_TOKDFind
.1b5d					_TOKDFound:
.1b5d	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1b5f	f0 14		beq $1b75			beq 	_TOKDExit
.1b61	aa		tax				tax
.1b62	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1b64	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1b66	20 76 1b	jsr $1b76			jsr 	TOKDSpacing
.1b69					_TOKDOutput:
.1b69	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b6b	20 cd 1e	jsr $1ecd			jsr 	TOKToLower
.1b6e	20 85 1a	jsr $1a85			jsr 	TOKDOutput
.1b71	c8		iny				iny
.1b72	ca		dex				dex
.1b73	d0 f4		bne $1b69			bne 	_TOKDOutput
.1b75					_TOKDExit:
.1b75	60		rts				rts
.1b76					TOKDSpacing:
.1b76	20 e4 1e	jsr $1ee4			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1b79	90 0d		bcc $1b88			bcc 	_TOKDSExit
.1b7b	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1b7e	20 e4 1e	jsr $1ee4			jsr 	TOKIsIdentifierElement
.1b81	90 05		bcc $1b88			bcc 	_TOKDSExit
.1b83	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1b85	20 85 1a	jsr $1a85			jsr 	TOKDOutput
.1b88					_TOKDSExit:
.1b88	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1b89					PGMDeleteLine:
.1b89	20 3c 1c	jsr $1c3c			jsr 	PGMEndProgram 				; end of program into zTemp0
.1b8c	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1b8e	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1b91	85 21		sta $21				sta 	zTemp1+1
.1b93					_PGMDLoop:
.1b93	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1b95	38		sec				sec
.1b96	f0 3a		beq $1bd2			beq 	_PGMDExit
.1b98	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1b9a	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b9c	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1b9f	d0 08		bne $1ba9			bne 	_PGMDNext
.1ba1	c8		iny				iny
.1ba2	b1 20		lda ($20),y			lda 	(zTemp1),y
.1ba4	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1ba7	f0 0d		beq $1bb6			beq 	_PGMDDelete
.1ba9					_PGMDNext:
.1ba9	18		clc				clc
.1baa	b2 20		lda ($20)			lda 	(zTemp1)
.1bac	65 20		adc $20				adc 	zTemp1
.1bae	85 20		sta $20				sta 	zTemp1
.1bb0	90 e1		bcc $1b93			bcc 	_PGMDLoop
.1bb2	e6 21		inc $21				inc 	zTemp1+1
.1bb4	80 dd		bra $1b93			bra 	_PGMDLoop
.1bb6					_PGMDDelete:
.1bb6	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1bb8	a8		tay				tay
.1bb9					_PGMDCopy:
.1bb9	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1bbb	92 20		sta ($20)			sta 	(zTemp1)
.1bbd	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1bbf	c5 1e		cmp $1e				cmp 	zTemp0
.1bc1	d0 07		bne $1bca			bne 	_PGMDNext2
.1bc3	a5 21		lda $21				lda 	zTemp1+1
.1bc5	c5 1f		cmp $1f				cmp 	zTemp0+1
.1bc7	18		clc				clc
.1bc8	f0 08		beq $1bd2			beq 	_PGMDExit
.1bca					_PGMDNext2:
.1bca	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1bcc	d0 eb		bne $1bb9			bne 	_PGMDCopy
.1bce	e6 21		inc $21				inc 	zTemp1+1
.1bd0	80 e7		bra $1bb9			bra 	_PGMDCopy
.1bd2					_PGMDExit:
.1bd2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1bd3					PGMInsertLine:
.1bd3	20 3c 1c	jsr $1c3c			jsr 	PGMEndProgram 				; end of program into zTemp0
.1bd6	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1bd8	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1bdb	85 21		sta $21				sta 	zTemp1+1
.1bdd					_PGMILoop:
.1bdd	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1bdf	f0 1c		beq $1bfd			beq 	_PGMIInsert
.1be1	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1be3	b1 20		lda ($20),y			lda 	(zTemp1),y
.1be5	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1be8	c8		iny				iny
.1be9	b1 20		lda ($20),y			lda 	(zTemp1),y
.1beb	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1bee	b0 0d		bcs $1bfd			bcs 	_PGMIInsert 				; insert here.
.1bf0	18		clc				clc
.1bf1	b2 20		lda ($20)			lda 	(zTemp1)
.1bf3	65 20		adc $20				adc 	zTemp1
.1bf5	85 20		sta $20				sta 	zTemp1
.1bf7	90 e4		bcc $1bdd			bcc 	_PGMILoop
.1bf9	e6 21		inc $21				inc 	zTemp1+1
.1bfb	80 e0		bra $1bdd			bra 	_PGMILoop
.1bfd					_PGMIInsert:
.1bfd	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1c00					_PGMIInsertLoop:
.1c00	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c02	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1c04	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1c06	c5 1e		cmp $1e				cmp 	zTemp0
.1c08	d0 06		bne $1c10			bne 	_PGMINext
.1c0a	a5 21		lda $21				lda 	zTemp1+1
.1c0c	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c0e	f0 0a		beq $1c1a			beq 	_PGMIInserted
.1c10					_PGMINext:
.1c10	a5 1e		lda $1e				lda 	zTemp0
.1c12	d0 02		bne $1c16			bne 	_PGMINoBorrow
.1c14	c6 1f		dec $1f				dec 	zTemp0+1
.1c16					_PGMINoBorrow:
.1c16	c6 1e		dec $1e				dec 	zTemp0
.1c18	80 e6		bra $1c00			bra 	_PGMIInsertLoop
.1c1a					_PGMIInserted:
.1c1a	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1c1c					_PGMICopyLoop:
.1c1c	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1c1f	91 20		sta ($20),y			sta 	(zTemp1),y
.1c21	c8		iny				iny
.1c22	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1c25	d0 f5		bne $1c1c			bne 	_PGMICopyLoop
.1c27	18		clc				clc
.1c28	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1c29					PGMSetBaseAddress:
.1c29	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1c2c	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1c2f	60		rts				rts
.1c30					PGMNewProgram:
.1c30	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1c32	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c35	85 1f		sta $1f				sta 	zTemp0+1
.1c37	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1c39	92 1e		sta ($1e)			sta 	(zTemp0)
.1c3b	60		rts				rts
.1c3c					PGMEndProgram:
.1c3c	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1c3e	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1c41	85 1f		sta $1f				sta 	zTemp0+1
.1c43					_PGMEPLoop:
.1c43	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c45	f0 0b		beq $1c52			beq 	_PGMEPExit
.1c47	18		clc				clc
.1c48	65 1e		adc $1e				adc 	zTemp0
.1c4a	85 1e		sta $1e				sta 	zTemp0
.1c4c	90 f5		bcc $1c43			bcc 	_PGMEPLoop
.1c4e	e6 1f		inc $1f				inc 	zTemp0+1
.1c50	80 f1		bra $1c43			bra 	_PGMEPLoop
.1c52					_PGMEPExit:
.1c52	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1c53					TOKResetElement:
.1c53	9c 46 03	stz $0346			stz 	TOKElement
.1c56	60		rts				rts
.1c57					TOKWriteElement:
.1c57	da		phx				phx
.1c58	ae 46 03	ldx $0346			ldx 	TOKElement
.1c5b	9d 47 03	sta $0347,x			sta 	TOKElementText,x
.1c5e	9e 48 03	stz $0348,x			stz 	TOKElementText+1,x
.1c61	fa		plx				plx
.1c62	ee 46 03	inc $0346			inc 	TOKElement
.1c65	60		rts				rts
.0346					TOKElement:
>0346							.fill 	1
.0347					TOKElementText:
>0347							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1c66					TOKTokeniseConstant:
.1c66	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1c68	48		pha				pha 								; save on stack
.1c69	29 c0		and #$c0			and 	#$C0
.1c6b	05 0d		ora $0d				ora 	IFR0+IM1
.1c6d	05 0e		ora $0e				ora 	IFR0+IM2
.1c6f	f0 10		beq $1c81			beq 	_TTCLess
.1c71	da		phx				phx
.1c72	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1c74					_TTCShiftRight:
.1c74	46 0e		lsr $0e				lsr 	IFR0+IM2
.1c76	66 0d		ror $0d				ror 	IFR0+IM1
.1c78	66 0c		ror $0c				ror 	IFR0+IM0
.1c7a	ca		dex				dex
.1c7b	d0 f7		bne $1c74			bne 	_TTCShiftRight
.1c7d	fa		plx				plx
.1c7e	20 66 1c	jsr $1c66			jsr 	TOKTokeniseConstant
.1c81					_TTCLess:
.1c81	68		pla				pla
.1c82	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1c84	20 20 1d	jsr $1d20			jsr 	TOKWriteA
.1c87	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1c88					TOKTokeniseDecimals:
.1c88	20 30 1d	jsr $1d30			jsr 	TOKGetNext 					; consume the .
.1c8b	20 5a 1e	jsr $1e5a			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1c8e	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1c90	20 20 1d	jsr $1d20			jsr 	TOKWriteA
.1c93	20 98 1c	jsr $1c98			jsr 	TOKOutputElementBuffer 		; then the buffer
.1c96	18		clc				clc
.1c97	60		rts				rts
.1c98					TOKOutputElementBuffer:
.1c98	ad 46 03	lda $0346			lda 	TOKElement 					; get count and write that
.1c9b	20 20 1d	jsr $1d20			jsr 	TOKWriteA
.1c9e	a8		tay				tay 								; put in Y
.1c9f	f0 0c		beq $1cad			beq 	_TOEExit 					; exit if empty which is okay.
.1ca1	a2 01		ldx #$01			ldx 	#1
.1ca3					_TOELoop:
.1ca3	bd 46 03	lda $0346,x			lda 	TOKElement,x
.1ca6	20 20 1d	jsr $1d20			jsr 	TOKWriteA
.1ca9	e8		inx				inx
.1caa	88		dey				dey
.1cab	d0 f6		bne $1ca3			bne 	_TOELoop
.1cad					_TOEExit:
.1cad	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1cae					TOKTokenise:
.1cae	8c 47 04	sty $0447			sty 	TOKDataSource+1 			; save source routine pointer
.1cb1	8e 46 04	stx $0446			stx 	TOKDataSource
.1cb4	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1cb6	2a		rol a				rol  	a
.1cb7	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1cba	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1cbc	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1cbf					_TOKMainLoop:
.1cbf	20 2c 1d	jsr $1d2c			jsr 	TOKGet 						; what follows.
.1cc2	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1cc4	f0 51		beq $1d17			beq 	_TOKExit
.1cc6	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1cc8	d0 05		bne $1ccf			bne 	_TOKElement
.1cca	20 30 1d	jsr $1d30			jsr 	TOKGetNext
.1ccd	80 f0		bra $1cbf			bra 	_TOKMainLoop
.1ccf					_TOKElement:
.1ccf	20 d8 1e	jsr $1ed8			jsr 	TOKIsDigit 					; is it 0..9
.1cd2	90 0a		bcc $1cde			bcc 	_TOKNotDigit
.1cd4	20 31 1e	jsr $1e31			jsr 	TOKTokeniseInteger 			; get integer
.1cd7	b0 45		bcs $1d1e			bcs 	_TOKFail 					; did it fail ?
.1cd9	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1cdc	80 e1		bra $1cbf			bra 	_TOKMainLoop
.1cde					_TOKNotDigit:
.1cde	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1ce1	d0 3b		bne $1d1e			bne 	_TOKFail 					; if so, we've a problem.
.1ce3	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1ce5	d0 07		bne $1cee			bne 	_TOKNotHex
.1ce7	20 79 1d	jsr $1d79			jsr 	TOKTokeniseHexadecimal
.1cea	b0 32		bcs $1d1e			bcs 	_TOKFail
.1cec	80 d1		bra $1cbf			bra 	_TOKMainLoop
.1cee					_TOKNotHex:
.1cee	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1cf0	d0 07		bne $1cf9			bne 	_TOKNotDecimal
.1cf2	20 88 1c	jsr $1c88			jsr 	TOKTokeniseDecimals
.1cf5	b0 27		bcs $1d1e			bcs 	_TOKFail
.1cf7	80 c6		bra $1cbf			bra 	_TOKMainLoop
.1cf9					_TOKNotDecimal:
.1cf9	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1cfb	d0 07		bne $1d04			bne 	_TOKNotString
.1cfd	20 9f 1e	jsr $1e9f			jsr 	TOKTokeniseString
.1d00	b0 1c		bcs $1d1e			bcs 	_TOKFail
.1d02	80 bb		bra $1cbf			bra 	_TOKMainLoop
.1d04					_TOKNotString:
.1d04	20 f5 1e	jsr $1ef5			jsr 	TOKIsAlpha 					; identifier ?
.1d07	b0 07		bcs $1d10			bcs 	_TOKIdentifier
.1d09	20 6e 1e	jsr $1e6e			jsr 	TOKTokenisePunctuation 		; punctuation
.1d0c	b0 10		bcs $1d1e			bcs 	_TOKFail
.1d0e	80 af		bra $1cbf			bra 	_TOKMainLoop
.1d10					_TOKIdentifier:
.1d10	20 b3 1d	jsr $1db3			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1d13	b0 09		bcs $1d1e			bcs 	_TOKFail
.1d15	80 a8		bra $1cbf			bra 	_TOKMainLoop
.1d17					_TOKExit:
.1d17	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1d19	20 20 1d	jsr $1d20			jsr 	TOKWriteA
.1d1c	18		clc				clc									; return with carry set.
.1d1d	60		rts				rts
.1d1e					_TOKFail:
.1d1e	38		sec				sec
.1d1f	60		rts				rts
.1d20					TOKWriteA:
.1d20	da		phx				phx
.1d21	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1d24	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1d27	fa		plx				plx
.1d28	ee 37 02	inc $0237			inc 	TOKLineSize
.1d2b	60		rts				rts
.1d2c					TOKGet:
.1d2c	18		clc				clc
.1d2d	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1d30					TOKGetNext:
.1d30	38		sec				sec
.1d31	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.0446					TOKDataSource:
>0446							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1d34					TOKFindToken:
.1d34	a2 aa		ldx #$aa			ldx 	#StandardTokens & $FF 		; do this table
.1d36	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1d38	20 43 1d	jsr $1d43			jsr 	TOKFindTokenXY 				; find it, or not
.1d3b	90 04		bcc $1d41			bcc 	_TOKFTFail
.1d3d	a2 00		ldx #$00			ldx 	#0
.1d3f	38		sec				sec
.1d40	60		rts				rts
.1d41					_TOKFTFail
.1d41	18		clc				clc
.1d42	60		rts				rts
.1d43					TOKFindTokenXY:
.1d43	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1d45	84 1f		sty $1f				sty 	zTemp0+1
.1d47	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1d49	8d 48 04	sta $0448			sta 	TOKCurrent
.1d4c					_TOKFindLoop:
.1d4c	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1d4e	18		clc				clc 		 						; clear carry in case of fail
.1d4f	30 17		bmi $1d68			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1d51	cd 46 03	cmp $0346			cmp 	TOKElement 					; compare against the element length
.1d54	d0 13		bne $1d69			bne 	_TOKNext 					; different, try next.
.1d56	aa		tax				tax 								; number of chars to compare.
.1d57	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1d59					_TOKCompare:
.1d59	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1d5b	d9 46 03	cmp $0346,y			cmp 	TOKElementText-1,y
.1d5e	d0 09		bne $1d69			bne 	_TOKNext 					; different ? try next
.1d60	c8		iny				iny 								; compare next two
.1d61	ca		dex				dex
.1d62	d0 f5		bne $1d59			bne 	_TOKCompare 				; until done X characters.
.1d64	38		sec				sec
.1d65	ad 48 04	lda $0448			lda 	TOKCurrent 					; return current ID.
.1d68					_TOKExit:
.1d68	60		rts				rts
.1d69					_TOKNext:
.1d69	ee 48 04	inc $0448			inc 	TOKCurrent 					; increment token #
.1d6c	38		sec				sec 								; add length+1 to ptr
.1d6d	b2 1e		lda ($1e)			lda 	(zTemp0)
.1d6f	65 1e		adc $1e				adc 	zTemp0
.1d71	85 1e		sta $1e				sta 	zTemp0
.1d73	90 d7		bcc $1d4c			bcc 	_TOKFindLoop
.1d75	e6 1f		inc $1f				inc 	zTemp0+1
.1d77	80 d3		bra $1d4c			bra 	_TOKFindLoop
.0448					TOKCurrent:
>0448							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1d79					TOKTokeniseHexadecimal:
.1d79	20 30 1d	jsr $1d30			jsr 	TOKGetNext 					; consume the $
.1d7c	a2 0c		ldx #$0c			ldx 	#IFR0
.1d7e	20 b5 26	jsr $26b5			jsr 	IFloatSetZero 				; set R0 = 0
.1d81					_TTHLoop:
.1d81	20 2c 1d	jsr $1d2c			jsr 	TOKGet 						; keep getting and copying while numeric.
.1d84	20 02 1f	jsr $1f02			jsr 	TOKIsHexadecimal
.1d87	90 20		bcc $1da9			bcc 	_TTHDone
.1d89	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1d8b	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1d8e	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1d91	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1d94	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.1d97	20 30 1d	jsr $1d30			jsr 	TOKGetNext
.1d9a	38		sec				sec 								; convert to decimal.
.1d9b	e9 30		sbc #$30			sbc 	#48
.1d9d	c9 0a		cmp #$0a			cmp 	#10
.1d9f	90 02		bcc $1da3			bcc 	_TTHNotAlpha
.1da1	e9 07		sbc #$07			sbc 	#7
.1da3					_TTHNotAlpha:
.1da3	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1da5	85 0c		sta $0c				sta 	IFR0+IM0
.1da7	80 d8		bra $1d81			bra 	_TTHLoop
.1da9					_TTHDone:
.1da9	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1dab	20 20 1d	jsr $1d20			jsr 	TOKWriteA
.1dae	20 66 1c	jsr $1c66			jsr 	TOKTokeniseConstant 		; write integer out.
.1db1	18		clc				clc
.1db2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1db3					TOKTokeniseIdentifier:
.1db3	20 53 1c	jsr $1c53			jsr 	TOKResetElement 			; extract an identifier
.1db6					_TOKGetIdentifier:
.1db6	20 2c 1d	jsr $1d2c			jsr 	TOKGet
.1db9	20 c2 1e	jsr $1ec2			jsr 	TOKToUpper
.1dbc	20 e4 1e	jsr $1ee4			jsr 	TOKIsIdentifierElement
.1dbf	90 08		bcc $1dc9			bcc 	_TOKEndIdent
.1dc1	20 57 1c	jsr $1c57			jsr		TOKWriteElement
.1dc4	20 30 1d	jsr $1d30			jsr 	TOKGetNext
.1dc7	80 ed		bra $1db6			bra 	_TOKGetIdentifier
.1dc9					_TOKEndIdent:
.1dc9	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1dcb	d0 06		bne $1dd3			bne 	_TOKNotString
.1dcd	20 57 1c	jsr $1c57			jsr 	TOKWriteElement 			; add it
.1dd0	20 30 1d	jsr $1d30			jsr 	TOKGetNext 					; consume it
.1dd3					_TOKNotString:
.1dd3	20 2c 1d	jsr $1d2c			jsr 	TOKGet 						; finally check for (
.1dd6	c9 28		cmp #$28			cmp 	#"("
.1dd8	d0 06		bne $1de0			bne 	_TOKNoArray
.1dda	20 57 1c	jsr $1c57			jsr 	TOKWriteElement 			; add it
.1ddd	20 30 1d	jsr $1d30			jsr 	TOKGetNext 					; consume it
.1de0					_TOKNoArray:
.1de0	20 34 1d	jsr $1d34			jsr 	TOKFindToken 				; find it
.1de3	90 05		bcc $1dea			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1de5	20 20 1d	jsr $1d20			jsr 	TOKWriteA
.1de8	18		clc				clc
.1de9	60		rts				rts
.1dea					_TOKIsVariable:
.1dea	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1dec					_TOKOutputBuffer:
.1dec	bd 47 03	lda $0347,x			lda 	TOKElementText,x 			; output it translated.
.1def	20 18 1e	jsr $1e18			jsr 	TOKTranslateIdentifier
.1df2	20 20 1d	jsr $1d20			jsr 	TOKWriteA
.1df5	e8		inx				inx
.1df6	bd 47 03	lda $0347,x			lda 	TOKElementText,x
.1df9	20 e4 1e	jsr $1ee4			jsr 	TOKIsIdentifierElement
.1dfc	b0 ee		bcs $1dec			bcs 	_TOKOutputBuffer
.1dfe	a8		tay				tay 								; last char in Y
.1dff	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1e01	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1e03	f0 0e		beq $1e13			beq 	_TOKIVExit
.1e05	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1e07	d0 04		bne $1e0d			bne 	_TOKIVCheckArray 			; no, check for (
.1e09	1a		inc a				inc 	a 							; token is $7D
.1e0a	bc 48 03	ldy $0348,x			ldy 	TOKElementText+1,x 			; get next one.
.1e0d					_TOKIVCheckArray:
.1e0d	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1e0f	d0 02		bne $1e13			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1e11	1a		inc a				inc 	a
.1e12	1a		inc a				inc 	a
.1e13					_TOKIVExit:
.1e13	20 20 1d	jsr $1d20			jsr 	TOKWriteA 					; ending token
.1e16	18		clc				clc
.1e17	60		rts				rts
.1e18					TOKTranslateIdentifier:
.1e18	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1e1a	f0 0f		beq $1e2b			beq 	_TTI64
.1e1c	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1e1e	f0 0e		beq $1e2e			beq 	_TTI65
.1e20	38		sec				sec
.1e21	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1e23	10 03		bpl $1e28			bpl 	_TTIExit
.1e25	18		clc				clc 								; map 09 onto 26-35
.1e26	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1e28					_TTIExit:
.1e28	09 40		ora #$40			ora 	#$40 						; correct range.
.1e2a	60		rts				rts
.1e2b	a9 64		lda #$64	_TTI64:	lda 	#$64
.1e2d	60		rts				rts
.1e2e	a9 65		lda #$65	_TTI65:	lda 	#$65
.1e30	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1e31					TOKTokeniseInteger:
.1e31	20 5a 1e	jsr $1e5a			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e34	a2 47		ldx #$47			ldx 	#TOKElementText & $FF
.1e36	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1e38	ad 46 03	lda $0346			lda		TOKElement
.1e3b	20 19 25	jsr $2519			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1e3e	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1e41	f0 12		beq $1e55			beq 	_TOKNotLineNumber
.1e43	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1e45	d0 0c		bne $1e53			bne 	_TOKBadLineNumeber
.1e47	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1e49	8d 38 02	sta $0238			sta 	TOKLineNumber
.1e4c	a5 0d		lda $0d				lda 	IFR0+IM1
.1e4e	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1e51	18		clc				clc
.1e52	60		rts				rts
.1e53					_TOKBadLineNumeber:
.1e53	38		sec				sec
.1e54	60		rts				rts
.1e55					_TOKNotLineNumber:
.1e55	20 66 1c	jsr $1c66			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1e58	18		clc				clc
.1e59	60		rts				rts
.1e5a					TOKExtractInteger:
.1e5a	20 53 1c	jsr $1c53			jsr 	TOKResetElement 			; restart
.1e5d					_TTILoop:
.1e5d	20 2c 1d	jsr $1d2c			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e60	20 d8 1e	jsr $1ed8			jsr 	TOKIsDigit
.1e63	90 08		bcc $1e6d			bcc 	_TOKEIExit
.1e65	20 57 1c	jsr $1c57			jsr 	TOKWriteElement
.1e68	20 30 1d	jsr $1d30			jsr 	TOKGetNext
.1e6b	80 f0		bra $1e5d			bra 	_TTILoop
.1e6d					_TOKEIExit:
.1e6d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1e6e					TOKTokenisePunctuation:
.1e6e	20 53 1c	jsr $1c53			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1e71	20 30 1d	jsr $1d30			jsr 	TOKGetNext
.1e74	20 57 1c	jsr $1c57			jsr 	TOKWriteElement
.1e77	20 2c 1d	jsr $1d2c			jsr 	TOKGet 						; what follows ?
.1e7a	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1e7c	f0 10		beq $1e8e			beq 	_TTPOne
.1e7e	20 ec 1e	jsr $1eec			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1e81	b0 0b		bcs $1e8e			bcs 	_TTPOne 					; these speed things up a bit.
.1e83	20 57 1c	jsr $1c57			jsr 	TOKWriteElement 			; this is what we will search for.
.1e86	20 34 1d	jsr $1d34			jsr 	TOKFindToken
.1e89	b0 0a		bcs $1e95			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1e8b	ce 46 03	dec $0346			dec 	TOKElement 					; make it a single character
.1e8e					_TTPOne:
.1e8e	20 34 1d	jsr $1d34			jsr 	TOKFindToken 				; look for one character punctuation
.1e91	b0 07		bcs $1e9a			bcs 	_TTPOutputExit 				; we found it
.1e93	38		sec				sec 								; not recognised.
.1e94	60		rts				rts
.1e95					_TTPConsumeExit:
.1e95	48		pha				pha
.1e96	20 30 1d	jsr $1d30			jsr 	TOKGetNext 					; get the 2nd char out.
.1e99	68		pla				pla
.1e9a					_TTPOutputExit:
.1e9a	20 20 1d	jsr $1d20			jsr  	TOKWriteA 					; write token out
.1e9d	18		clc				clc
.1e9e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1e9f					TOKTokeniseString:
.1e9f	20 30 1d	jsr $1d30			jsr 	TOKGetNext 					; consume the "
.1ea2	20 53 1c	jsr $1c53			jsr 	TOKResetElement 			; start getting the string
.1ea5					_TOKTSLoop:
.1ea5	20 2c 1d	jsr $1d2c			jsr 	TOKGet 						; check EOL
.1ea8	c9 00		cmp #$00			cmp 	#0
.1eaa	f0 0c		beq $1eb8			beq 	_TOKTSExit
.1eac	20 30 1d	jsr $1d30			jsr 	TOKGetNext 					; get and consume
.1eaf	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1eb1	f0 05		beq $1eb8			beq 	_TOKTSExit
.1eb3	20 57 1c	jsr $1c57			jsr 	TOKWriteElement
.1eb6	80 ed		bra $1ea5			bra 	_TOKTSLoop
.1eb8					_TOKTSExit:
.1eb8	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1eba	20 20 1d	jsr $1d20			jsr 	TOKWriteA
.1ebd	20 98 1c	jsr $1c98			jsr 	TOKOutputElementBuffer
.1ec0	18		clc				clc
.1ec1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1ec2					TOKToUpper:
.1ec2	c9 61		cmp #$61			cmp 	#"a"
.1ec4	90 06		bcc $1ecc			bcc 	_TTUNotLower
.1ec6	c9 7b		cmp #$7b			cmp 	#"z"+1
.1ec8	b0 02		bcs $1ecc			bcs 	_TTUNotLower
.1eca	49 20		eor #$20			eor 	#$20
.1ecc					_TTUNotLower:
.1ecc	60		rts				rts
.1ecd					TOKToLower:
.1ecd	c9 41		cmp #$41			cmp 	#"A"
.1ecf	90 06		bcc $1ed7			bcc 	_TTUNotUpper
.1ed1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1ed3	b0 02		bcs $1ed7			bcs 	_TTUNotUpper
.1ed5	49 20		eor #$20			eor 	#$20
.1ed7					_TTUNotUpper:
.1ed7	60		rts				rts
.1ed8					TOKIsDigit:
.1ed8	c9 30		cmp #$30			cmp 	#"0"
.1eda	90 06		bcc $1ee2			bcc 	TOKFail
.1edc	c9 3a		cmp #$3a			cmp 	#"9"+1
.1ede	b0 02		bcs $1ee2			bcs 	TOKFail
.1ee0					TOKSucceed:
.1ee0	38		sec				sec
.1ee1	60		rts				rts
.1ee2					TOKFail:
.1ee2	18		clc				clc
.1ee3	60		rts				rts
.1ee4					TOKIsIdentifierElement:
.1ee4	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1ee6	f0 f8		beq $1ee0			beq 	TOKSucceed
.1ee8	c9 5f		cmp #$5f			cmp 	#"_"
.1eea	f0 f4		beq $1ee0			beq 	TOKSucceed 					; else fall through to alphanumeric
.1eec					TOKIsAlphaNumeric:
.1eec	20 f5 1e	jsr $1ef5			jsr 	TOKIsAlpha
.1eef	b0 ef		bcs $1ee0			bcs 	TOKSucceed
.1ef1	20 d8 1e	jsr $1ed8			jsr 	TOKIsDigit
.1ef4	60		rts				rts
.1ef5					TOKIsAlpha:
.1ef5	20 c2 1e	jsr $1ec2			jsr 	TOKToUpper
.1ef8	c9 41		cmp #$41			cmp 	#"A"
.1efa	90 e6		bcc $1ee2			bcc 	TOKFail
.1efc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1efe	b0 e2		bcs $1ee2			bcs 	TOKFail
.1f00	80 de		bra $1ee0			bra 	TOKSucceed
.1f02					TOKIsHexadecimal:
.1f02	20 d8 1e	jsr $1ed8			jsr		TOKIsDigit
.1f05	b0 d9		bcs $1ee0			bcs 	TOKSucceed
.1f07	20 f5 1e	jsr $1ef5			jsr 	TOKIsAlpha
.1f0a	90 d6		bcc $1ee2			bcc 	TOKFail
.1f0c	c9 47		cmp #$47			cmp 	#"F"+1
.1f0e	b0 d2		bcs $1ee2			bcs 	TOKFail
.1f10	80 ce		bra $1ee0			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.1f12					StringSystemInitialise:
.1f12	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh 			; last byte of memory
.1f15	3a		dec a				dec 	a
.1f16	8d 4b 04	sta $044b			sta 	stringMemory+1
.1f19	85 1f		sta $1f				sta 	zTemp0+1
.1f1b	a9 ff		lda #$ff			lda 	#$FF
.1f1d	8d 4a 04	sta $044a			sta 	stringMemory
.1f20	85 1e		sta $1e				sta 	zTemp0
.1f22	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.1f24	92 1e		sta ($1e)			sta 	(zTemp0)
.1f26	60		rts				rts
.1f27					StringSpaceInitialise:
.1f27	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.1f29	8d 49 04	sta $0449			sta 	stringInitialised
.1f2c	ad 4a 04	lda $044a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.1f2f	8d 4c 04	sta $044c			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.1f32	ad 4b 04	lda $044b			lda 	stringMemory+1
.1f35	3a		dec a				dec 	a
.1f36	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1f39	60		rts				rts
.1f3a					StringTempAllocate:
.1f3a	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.1f3c	b0 2e		bcs $1f6c			bcs 	_STALength
.1f3e	2c 49 04	bit $0449			bit 	stringInitialised 			; already initialised
.1f41	30 05		bmi $1f48			bmi 	_STAAllocate
.1f43	48		pha				pha 								; save value to subtract.
.1f44	20 27 1f	jsr $1f27			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.1f47	68		pla				pla 								; restore it
.1f48					_STAAllocate:
.1f48	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.1f4a	18		clc				clc  								; deliberate allows one more
.1f4b	6d 4c 04	adc $044c			adc 	stringTempPointer 			; subtract from temp pointer
.1f4e	8d 4c 04	sta $044c			sta 	stringTempPointer
.1f51	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.1f53	85 26		sta $26				sta 	zsTemp 						; and zsTemp
.1f55	ad 4d 04	lda $044d			lda 	stringTempPointer+1
.1f58	69 ff		adc #$ff			adc 	#$FF
.1f5a	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1f5d	85 27		sta $27				sta 	zsTemp+1
.1f5f	85 0d		sta $0d				sta 	IFR0+IM1
.1f61	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.1f63	a9 80		lda #$80			lda 	#$80
.1f65	85 0f		sta $0f				sta 	IFR0+IExp
.1f67	a9 00		lda #$00			lda 	#0 							; clear the target string
.1f69	92 26		sta ($26)			sta 	(zsTemp)
.1f6b	60		rts				rts
.1f6c					_STALength:
.1f6c	4c 74 12	jmp $1274		jmp	ErrorV_string
.1f6f					StringTempWrite:
.1f6f	5a		phy				phy
.1f70	48		pha				pha
.1f71	b2 26		lda ($26)			lda 	(zsTemp)
.1f73	1a		inc a				inc 	a
.1f74	92 26		sta ($26)			sta 	(zsTemp)
.1f76	a8		tay				tay
.1f77	68		pla				pla
.1f78	91 26		sta ($26),y			sta 	(zsTemp),y
.1f7a	7a		ply				ply
.1f7b	60		rts				rts
.0026					zsTemp:
>0026							.fill 	2
.0449					stringInitialised:
>0449							.fill 	1
.044a					stringMemory:
>044a							.fill 	2
.044c					stringTempPointer:
>044c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.1f7c					VARCreate:
.1f7c	5a		phy				phy
.1f7d	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.1f7f	a2 00		ldx #$00			ldx 	#0
.1f81	20 2c 10	jsr $102c			jsr 	AllocateMemory
.1f84	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.1f86	86 21		stx $21				stx 	zTemp1+1
.1f88	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.1f8a	ad 50 04	lda $0450			lda 	VARHash
.1f8d	91 20		sta ($20),y			sta 	(zTemp1),y
.1f8f	c8		iny				iny 								; put address of name into +3,+4
.1f90	ad 4e 04	lda $044e			lda 	VARNameAddress
.1f93	91 20		sta ($20),y			sta 	(zTemp1),y
.1f95	c8		iny				iny
.1f96	ad 4f 04	lda $044f			lda 	VARNameAddress+1
.1f99	91 20		sta ($20),y			sta 	(zTemp1),y
.1f9b	ad 72 04	lda $0472			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.1f9e	85 1e		sta $1e				sta 	zTemp0
.1fa0	ad 73 04	lda $0473			lda 	VARHashEntry+1
.1fa3	85 1f		sta $1f				sta 	zTemp0+1
.1fa5	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.1fa7	b2 1e		lda ($1e)			lda 	(zTemp0)
.1fa9	92 20		sta ($20)			sta 	(zTemp1)
.1fab	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1fad	91 20		sta ($20),y			sta 	(zTemp1),y
.1faf	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.1fb1	92 1e		sta ($1e)			sta 	(zTemp0)
.1fb3	a5 21		lda $21				lda 	zTemp1+1
.1fb5	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1fb7	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.1fb9	a6 21		ldx $21				ldx 	zTemp1+1
.1fbb	18		clc				clc 								; add 5 to point to the data.
.1fbc	69 05		adc #$05			adc 	#5
.1fbe	90 01		bcc $1fc1			bcc 	_VCNoCarry
.1fc0	e8		inx				inx
.1fc1					_VCNoCarry:
.1fc1	7a		ply				ply
.1fc2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.1fc3					VARFind:
.1fc3	5a		phy				phy
.1fc4	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.1fc6	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1fc8	85 21		sta $21				sta 	zTemp1+1
.1fca	f0 1c		beq $1fe8			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.1fcc	b2 1e		lda ($1e)			lda 	(zTemp0)
.1fce	85 20		sta $20				sta 	zTemp1
.1fd0					_VFLoop:
.1fd0	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.1fd2	b1 20		lda ($20),y			lda 	(zTemp1),y
.1fd4	cd 50 04	cmp $0450			cmp 	VARHash
.1fd7	f0 12		beq $1feb			beq 	_VFHashesMatch 				; if so, check the name.
.1fd9					_VFNext:
.1fd9	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.1fdb	aa		tax				tax
.1fdc	a0 01		ldy #$01			ldy 	#1
.1fde	b1 20		lda ($20),y			lda 	(zTemp1),y
.1fe0	85 21		sta $21				sta 	zTemp1+1
.1fe2	86 20		stx $20				stx 	zTemp1
.1fe4	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.1fe6	d0 e8		bne $1fd0			bne 	_VFLoop
.1fe8					_VFExitFail:
.1fe8	7a		ply				ply
.1fe9	18		clc				clc
.1fea	60		rts				rts
.1feb					_VFHashesMatch:
.1feb	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.1fed	b1 20		lda ($20),y			lda 	(zTemp1),y
.1fef	85 22		sta $22				sta 	zTemp2
.1ff1	c8		iny				iny
.1ff2	b1 20		lda ($20),y			lda 	(zTemp1),y
.1ff4	85 23		sta $23				sta 	zTemp2+1
.1ff6	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.1ff8					_VFNameCompLoop:
.1ff8	c8		iny				iny 								; char at a time
.1ff9	b9 52 04	lda $0452,y			lda 	VARBuffer,y
.1ffc	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.1ffe	d0 d9		bne $1fd9			bne 	_VFNext						; next entry if different.
.2000	c9 7c		cmp #$7c			cmp 	#$7C
.2002	90 f4		bcc $1ff8			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2004	18		clc				clc
.2005	a5 20		lda $20				lda 	zTemp1
.2007	a6 21		ldx $21				ldx 	zTemp1+1
.2009	69 05		adc #$05			adc 	#5
.200b	90 01		bcc $200e			bcc 	_VFNNoCarry
.200d	e8		inx				inx
.200e					_VFNNoCarry:
.200e	7a		ply				ply
.200f	38		sec				sec
.2010	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2011					VARGetInfo:
.2011	98		tya				tya 								; calculate the address of the identifier start.
.2012	18		clc				clc
.2013	65 1c		adc $1c				adc 	codePtr
.2015	8d 4e 04	sta $044e			sta 	VARNameAddress
.2018	a5 1d		lda $1d				lda 	codePtr+1
.201a	69 00		adc #$00			adc 	#0
.201c	8d 4f 04	sta $044f			sta 	VARNameAddress+1
.201f	9c 50 04	stz $0450			stz 	VARHash
.2022	a2 00		ldx #$00			ldx 	#0
.2024					_VARCopyName:
.2024	18		clc				clc 								; update the sum hash.
.2025	ad 50 04	lda $0450			lda 	VARHash
.2028	71 1c		adc ($1c),y			adc 	(codePtr),y
.202a	8d 50 04	sta $0450			sta 	VARHash
.202d	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.202f	c8		iny				iny
.2030	9d 52 04	sta $0452,x			sta 	VARBuffer,x
.2033	e8		inx				inx
.2034	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2036	90 ec		bcc $2024			bcc 	_VARCopyName
.2038	8d 51 04	sta $0451			sta 	VARType 					; save type byte
.203b	29 03		and #$03			and 	#3 							; type is 0-3
.203d	0a		asl a				asl 	a
.203e	0a		asl a				asl 	a
.203f	85 1e		sta $1e				sta 	zTemp0
.2041	ad 50 04	lda $0450			lda 	VARHash 					; force into range of hash entries per type.
.2044	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2046	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.2048	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2049	69 74		adc #$74			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.204b	85 1e		sta $1e				sta 	zTemp0
.204d	8d 72 04	sta $0472			sta 	VARHashEntry
.2050	a9 04		lda #$04			lda 	#VARHashTables >> 8
.2052	69 00		adc #$00			adc 	#0
.2054	85 1f		sta $1f				sta 	zTemp0+1
.2056	8d 73 04	sta $0473			sta 	VARHashEntry+1
.2059	60		rts				rts
.205a					VARClearHashTables:
.205a	a2 00		ldx #$00			ldx 	#0
.205c					_VCHRLoop:
.205c	a9 00		lda #$00			lda 	#0
.205e	9d 74 04	sta $0474,x			sta 	VARHashTables,x
.2061	e8		inx				inx
.2062	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2064	d0 f6		bne $205c			bne 	_VCHRLoop
.2066	60		rts				rts
.044e					VARNameAddress:
>044e							.fill 	2
.0450					VARHash:
>0450							.fill 	1
.0451					VARType:
>0451							.fill 	1
.0452					VARBuffer:
>0452							.fill 	32
.0472					VARHashEntry:
>0472							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0474					VARHashTables:
>0474							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2067					VARCheckSimple:
.2067	aa		tax				tax 								; save in X
.2068	b1 1c		lda ($1c),y			lda 	(codePtr),y
.206a	c9 7c		cmp #$7c			cmp 	#$7C
.206c	d0 15		bne $2083			bne 	_VCSComplex
.206e	c8		iny				iny 								; consume the second byte, the type.
.206f	8a		txa				txa  								; character (40-7F) x 4
.2070	0a		asl a				asl 	a
.2071	0a		asl a				asl  	a
.2072	18		clc				clc
.2073	69 94		adc #$94			adc 	#FastVariables & $FF
.2075	85 0c		sta $0c				sta 	IFR0+IM0
.2077	a9 04		lda #$04			lda 	#FastVariables >> 8
.2079	69 00		adc #$00			adc 	#0
.207b	85 0d		sta $0d				sta 	IFR0+IM1
.207d	64 0e		stz $0e				stz 	IFR0+IM2
.207f	64 0f		stz $0f				stz 	IFR0+IExp
.2081	38		sec				sec 								; it's a reference
.2082	60		rts				rts
.2083					_VCSComplex:
.2083	88		dey				dey	 								; extract information.
.2084	20 11 20	jsr $2011			jsr 	VARGetInfo
.2087	20 c3 1f	jsr $1fc3			jsr 	VARFind 					; search for variable
.208a	b0 03		bcs $208f			bcs 	_VCSHaveVariable
.208c	20 7c 1f	jsr $1f7c			jsr 	VARCreate 					; create variable
.208f					_VCSHaveVariable:
.208f	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.2091	85 0c		sta $0c				sta 	IFR0+IM0
.2093	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.2095	ad 51 04	lda $0451			lda 	VARType 					; number/string bit into carry
.2098	6a		ror a				ror 	a
.2099	a9 00		lda #$00			lda 	#0
.209b	6a		ror a				ror 	a 							; now $00 or $80
.209c	85 0f		sta $0f				sta 	IFR0+IExp
.209e	38		sec				sec 								; it's a reference
.209f	60		rts				rts
.0494					FastVariables:
>0494							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.20a0					IFInitialise:
.20a0	9c 04 05	stz $0504			stz 	IFStackIndex
.20a3	60		rts				rts
.20a4					IFloatSubtract:
.20a4	da		phx				phx
.20a5	a2 0c		ldx #$0c			ldx 	#IFR0
.20a7	20 c0 26	jsr $26c0			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.20aa	fa		plx				plx
.20ab					IFloatAdd:
.20ab	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.20ad	05 0f		ora $0f				ora 	IFR0+IExp
.20af	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.20b1	d0 4e		bne $2101			bne 	_IFloatAddDecimals 			; decimal version.
.20b3					_IFAddSubMantissa:
.20b3	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.20b5	45 0f		eor $0f				eor 	IFR0+IExp
.20b7	29 40		and #$40			and 	#IFSign
.20b9	d0 21		bne $20dc			bne 	_IFloatSubMantissa
.20bb	18		clc				clc 								; do the actual addition
.20bc	a5 0c		lda $0c			lda 	IFR0+IM0
.20be	75 00		adc $00,x		adc 		IM0,x
.20c0	85 0c		sta $0c			sta 	IFR0+IM0
.20c2	a5 0d		lda $0d			lda 	IFR0+IM1
.20c4	75 01		adc $01,x		adc 		IM1,x
.20c6	85 0d		sta $0d			sta 	IFR0+IM1
.20c8	a5 0e		lda $0e			lda 	IFR0+IM2
.20ca	75 02		adc $02,x		adc 		IM2,x
.20cc	85 0e		sta $0e			sta 	IFR0+IM2
.20ce	10 29		bpl $20f9			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.20d0	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.20d2	20 e4 26	jsr $26e4			jsr 	IFloatShiftRight
.20d5	20 0e 27	jsr $270e			jsr 	IFloatIncExponent
.20d8	d0 1f		bne $20f9			bne 	_IFloatAddExit
.20da	38		sec				sec 								; overflowed numerically.
.20db	60		rts				rts
.20dc					_IFloatSubMantissa:
.20dc	38		sec				sec 								; do the subtraction R0-Rx
.20dd	a5 0c		lda $0c			lda 	IFR0+IM0
.20df	f5 00		sbc $00,x		sbc 		IM0,x
.20e1	85 0c		sta $0c			sta 	IFR0+IM0
.20e3	a5 0d		lda $0d			lda 	IFR0+IM1
.20e5	f5 01		sbc $01,x		sbc 		IM1,x
.20e7	85 0d		sta $0d			sta 	IFR0+IM1
.20e9	a5 0e		lda $0e			lda 	IFR0+IM2
.20eb	f5 02		sbc $02,x		sbc 		IM2,x
.20ed	85 0e		sta $0e			sta 	IFR0+IM2
.20ef	b0 08		bcs $20f9			bcs 	_IFloatAddExit 				; no borrow so we are done.
.20f1	a2 0c		ldx #$0c			ldx 	#IFR0
.20f3	20 c8 26	jsr $26c8			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.20f6	20 c0 26	jsr $26c0			jsr 	IFloatNegate 				; negate
.20f9					_IFloatAddExit:
.20f9	18		clc				clc
.20fa	60		rts				rts
.20fb					_IFloatZeroAdd:
.20fb	fa		plx				plx 								; return this value in R0
.20fc	20 46 26	jsr $2646			jsr 	IFloatCopyFromRegister
.20ff	18		clc				clc
.2100	60		rts				rts
.2101					_IFloatAddDecimals:
.2101	20 ae 26	jsr $26ae			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2104	f0 f3		beq $20f9			beq 	_IFloatAddExit
.2106	20 ec 26	jsr $26ec			jsr 	IFloatNormalise 			; normalise RX
.2109	da		phx				phx 								; normalise R0
.210a	a2 0c		ldx #$0c			ldx 	#IFR0
.210c	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero
.210f	f0 ea		beq $20fb			beq 	_IFloatZeroAdd
.2111	20 ec 26	jsr $26ec			jsr 	IFloatNormalise
.2114	fa		plx				plx
.2115	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.2117	29 3f		and #$3f			and 	#IFXMask
.2119	38		sec				sec
.211a	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.211c	85 0a		sta $0a				sta 	iTemp0
.211e	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2120	29 3f		and #$3f			and 	#IFXMask
.2122	38		sec				sec
.2123	e9 20		sbc #$20			sbc 	#$20
.2125	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.2127	b0 02		bcs $212b			bcs 	_IFloatHaveLarger
.2129	a5 0a		lda $0a				lda 	iTemp0
.212b					_IFloatHaveLarger:
.212b	18		clc				clc 								; get the actual one back.
.212c	69 20		adc #$20			adc 	#$20 						; shift both to that.
.212e	20 3b 21	jsr $213b			jsr 	_IFShiftXToA
.2131	da		phx				phx
.2132	a2 0c		ldx #$0c			ldx 	#IFR0
.2134	20 3b 21	jsr $213b			jsr 	_IFShiftXToA
.2137	fa		plx				plx
.2138	4c b3 20	jmp $20b3			jmp 	_IFAddSubMantissa 			; do the adding bit.
.213b					_IFShiftXToA:
.213b	8d fc 04	sta $04fc			sta 	IFTarget
.213e	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero 			; check adding zero ?
.2141	f0 11		beq $2154			beq 	_IFSXExit
.2143					_IFSXLoop:
.2143	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2145	29 3f		and #$3f			and 	#IFXMask
.2147	cd fc 04	cmp $04fc			cmp 	IFTarget
.214a	f0 08		beq $2154			beq 	_IFSXExit
.214c	20 e4 26	jsr $26e4			jsr 	IFloatShiftRight
.214f	20 0e 27	jsr $270e			jsr 	IFloatIncExponent
.2152	80 ef		bra $2143			bra 	_IFSXLoop
.2154					_IFSXExit:
.2154	60		rts				rts
.04fc					IFTarget:
>04fc							.fill 	1
.2155					IFloatMultiply:
.2155	8e fc 04	stx $04fc			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2158	20 10 22	jsr $2210			jsr 	IFCalculateNewSign
.215b	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.215d	05 0f		ora $0f				ora 	IFR0+IExp
.215f	29 3f		and #$3f			and 	#IFXMask
.2161	15 01		ora $01,x			ora 	IM1,x
.2163	05 0d		ora $0d				ora 	IFR0+IM1
.2165	15 02		ora $02,x			ora 	IM2,x
.2167	05 0e		ora $0e				ora 	IFR0+IM2
.2169	d0 0a		bne $2175			bne 	_IFMStandard
.216b	20 91 26	jsr $2691			jsr 	IFloatMultiply8BitRx
.216e	ad fe 04	lda $04fe			lda 	IFNewSign
.2171	85 0f		sta $0f				sta 	IFR0+IExp
.2173	18		clc				clc
.2174	60		rts				rts
.2175					_IFMStandard:
.2175	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2177	20 07 22	jsr $2207			jsr 	IFMSignExtend
.217a	8d fd 04	sta $04fd			sta 	IFNewExponent
.217d	a5 0f		lda $0f				lda 	IFR0+IExp
.217f	20 07 22	jsr $2207			jsr 	IFMSignExtend
.2182	18		clc				clc
.2183	6d fd 04	adc $04fd			adc 	IFNewExponent
.2186	8d fd 04	sta $04fd			sta 	IFNewExponent
.2189	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.218b	20 57 26	jsr $2657			jsr 	IFloatCopyToRegister
.218e	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.2190	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.2193					_IFMLoop:
.2193	a2 18		ldx #$18			ldx 	#IFRTemp
.2195	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero
.2198	f0 3a		beq $21d4			beq 	_IFMExit
.219a	ae fc 04	ldx $04fc			ldx 	IFTarget 					; look at adder MSB
.219d	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.219f	10 03		bpl $21a4			bpl	 	_IFMTargetOkay
.21a1	20 f8 21	jsr $21f8			jsr 	_IFMShiftAll
.21a4					_IFMTargetOkay:
.21a4	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.21a6	29 01		and #$01			and 	#1
.21a8	f0 16		beq $21c0			beq 	_IFMNoAdd
.21aa	ae fc 04	ldx $04fc			ldx 	IFTarget 					; add adder
.21ad	18		clc				clc
.21ae	a5 0c		lda $0c			lda 	IFR0+IM0
.21b0	75 00		adc $00,x		adc 		IM0,x
.21b2	85 0c		sta $0c			sta 	IFR0+IM0
.21b4	a5 0d		lda $0d			lda 	IFR0+IM1
.21b6	75 01		adc $01,x		adc 		IM1,x
.21b8	85 0d		sta $0d			sta 	IFR0+IM1
.21ba	a5 0e		lda $0e			lda 	IFR0+IM2
.21bc	75 02		adc $02,x		adc 		IM2,x
.21be	85 0e		sta $0e			sta 	IFR0+IM2
.21c0					_IFMNoAdd:
.21c0	a5 0e		lda $0e				lda 	IFR0+IM2
.21c2	10 03		bpl $21c7			bpl 	_IFMResultOkay
.21c4	20 f8 21	jsr $21f8			jsr 	_IFMShiftAll
.21c7					_IFMResultOkay:
.21c7	a2 18		ldx #$18			ldx 	#IFRTemp
.21c9	20 e4 26	jsr $26e4			jsr 	IFloatShiftRight
.21cc	ae fc 04	ldx $04fc			ldx 	IFTarget
.21cf	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.21d2	80 bf		bra $2193			bra 	_IFMLoop
.21d4					_IFMExit:
.21d4	ad fd 04	lda $04fd			lda 	IFNewExponent 				; validate new exponent.
.21d7	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.21d9	90 0f		bcc $21ea			bcc 	_IFMOkay
.21db	c9 e0		cmp #$e0			cmp 	#$E0
.21dd	b0 0b		bcs $21ea			bcs 	_IFMOkay
.21df	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.21e1	f0 13		beq $21f6			beq 	_IFMError
.21e3	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.21e5	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.21e8	18		clc				clc
.21e9	60		rts				rts
.21ea					_IFMOkay:
.21ea	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.21ec	0d fe 04	ora $04fe			ora 	IFNewSign
.21ef	85 0f		sta $0f				sta 	IFR0+IExp
.21f1	18		clc				clc
.21f2	60		rts				rts
.21f3	4c ff ff	jmp $ffff			jmp 	$FFFF
.21f6					_IFMError:
.21f6	38		sec				sec
.21f7	60		rts				rts
.21f8					_IFMShiftAll:
.21f8	a2 0c		ldx #$0c			ldx 	#IFR0
.21fa	20 e4 26	jsr $26e4			jsr 	IFloatShiftRight
.21fd	ae fc 04	ldx $04fc			ldx 	IFTarget
.2200	20 e4 26	jsr $26e4			jsr 	IFloatShiftRight
.2203	ee fd 04	inc $04fd			inc 	IFNewExponent
.2206	60		rts				rts
.2207					IFMSignExtend:
.2207	29 3f		and #$3f			and 	#IFXMask
.2209	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.220b	90 02		bcc $220f			bcc 	_IFMNoSXX
.220d	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.220f					_IFMNoSXX:
.220f	60		rts				rts
.2210					IFCalculateNewSign:
.2210	b5 03		lda $03,x			lda 	IExp,x
.2212	45 0f		eor $0f				eor 	IFR0+IExp
.2214	29 40		and #$40			and 	#IFSign
.2216	8d fe 04	sta $04fe			sta 	IFNewSign
.2219	60		rts				rts
.04fd					IFNewExponent:
>04fd							.fill 	1
.04fe					IFNewSign:
>04fe							.fill 	1
.221a					IFloatDivideInteger:
.221a	20 33 22	jsr $2233			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.221d	b0 06		bcs $2225			bcs 	_IFDIExit
.221f	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.2221	20 46 26	jsr $2646			jsr 	IFloatCopyFromRegister
.2224	18		clc				clc
.2225					_IFDIExit:
.2225	60		rts				rts
.2226					IFloatModulusInteger:
.2226	20 33 22	jsr $2233			jsr 	IFloatDivideIntegerCommon
.2229	b0 07		bcs $2232			bcs 	_IFMIExit
.222b	ae fc 04	ldx $04fc			ldx 	IFTarget
.222e	20 46 26	jsr $2646			jsr 	IFloatCopyFromRegister
.2231	18		clc				clc
.2232					_IFMIExit:
.2232	60		rts				rts
.2233					IFloatDivideIntegerCommon:
.2233	8e fc 04	stx $04fc			stx 	IFTarget  					; this is s1, s0 = R0
.2236	20 10 22	jsr $2210			jsr 	IFCalculateNewSign 			; calculate sign of result
.2239	20 61 22	jsr $2261			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.223c	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.223e	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero
.2241	f0 1c		beq $225f			beq 	_IFDIDivZero
.2243	ae fc 04	ldx $04fc			ldx 	IFTarget 					; zero Rx (S1)
.2246	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.2249	5a		phy				phy
.224a	a0 18		ldy #$18			ldy 	#24
.224c					_IFDILoop:
.224c	20 72 22	jsr $2272			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.224f	20 7e 22	jsr $227e			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2252	88		dey				dey
.2253	d0 f7		bne $224c			bne 	_IFDILoop 					; do it 24 times
.2255	7a		ply				ply
.2256	ad fe 04	lda $04fe			lda 	IFNewSign 					; set sign of result.
.2259	29 40		and #$40			and 	#IFSign
.225b	85 1b		sta $1b				sta 	IFRTemp+IExp
.225d	18		clc				clc 								; is okay.
.225e	60		rts				rts
.225f					_IFDIDivZero:
.225f	38		sec				sec
.2260	60		rts				rts
.2261					IFDCopyRXToRTemp:
.2261	b5 00		lda $00,x			lda 	IM0,x
.2263	85 18		sta $18				sta 	IFRTemp+IM0
.2265	b5 01		lda $01,x			lda 	IM1,x
.2267	85 19		sta $19				sta 	IFRTemp+IM1
.2269	b5 02		lda $02,x			lda 	IM2,x
.226b	85 1a		sta $1a				sta 	IFRTemp+IM2
.226d	b5 03		lda $03,x			lda 	IExp,x
.226f	85 1b		sta $1b				sta 	IFRTemp+IExp
.2271	60		rts				rts
.2272					IFDShiftSTempS1Left:
.2272	a2 18		ldx #$18			ldx 	#IFRTemp
.2274	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft
.2277	ae fc 04	ldx $04fc			ldx 	IFTarget
.227a	20 dd 26	jsr $26dd			jsr 	IFloatRotateLeft
.227d	60		rts				rts
.227e					IFDTrySubtract:
.227e	ae fc 04	ldx $04fc			ldx 	IFTarget 					; s1 = Rx
.2281	38		sec				sec 								; subtract, saving the results on the stack.
.2282	b5 00		lda $00,x			lda 	IM0,x
.2284	e5 0c		sbc $0c				sbc 	IFR0+IM0
.2286	48		pha				pha
.2287	b5 01		lda $01,x			lda 	IM1,x
.2289	e5 0d		sbc $0d				sbc 	IFR0+IM1
.228b	48		pha				pha
.228c	b5 02		lda $02,x			lda 	IM2,x
.228e	e5 0e		sbc $0e				sbc 	IFR0+IM2
.2290	b0 03		bcs $2295			bcs 	_IFDCanSubtract
.2292	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2293	68		pla				pla
.2294	60		rts				rts
.2295					_IFDCanSubtract:
.2295	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2297	68		pla				pla
.2298	95 01		sta $01,x			sta 	IM1,x
.229a	68		pla				pla
.229b	95 00		sta $00,x			sta 	IM0,x
.229d	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.229f	d0 06		bne $22a7			bne 	_IFDCSExit
.22a1	e6 19		inc $19				inc 	IFRTemp+IM1
.22a3	d0 02		bne $22a7			bne 	_IFDCSExit
.22a5	e6 1a		inc $1a				inc 	IFRTemp+IM2
.22a7					_IFDCSExit:
.22a7	60		rts				rts
.22a8					IFloatBitwiseAnd:
.22a8	5a		phy				phy
.22a9	20 ed 22	jsr $22ed			jsr 	IFPreProcessBitwise 		; set up everything.
.22ac	d0 0f		bne $22bd			bne 	_IFBAExit
.22ae					_IFBALoop:
.22ae	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.22b1	35 00		and $00,x			and 	IM0,x
.22b3	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.22b6	e8		inx				inx
.22b7	c8		iny				iny
.22b8	c0 03		cpy #$03			cpy 	#3
.22ba	d0 f2		bne $22ae			bne 	_IFBALoop
.22bc	18		clc				clc
.22bd					_IFBAExit:
.22bd	7a		ply				ply
.22be	60		rts				rts
.22bf					IFloatBitwiseOr:
.22bf	5a		phy				phy
.22c0	20 ed 22	jsr $22ed			jsr 	IFPreProcessBitwise 		; set up everything.
.22c3	d0 0f		bne $22d4			bne 	_IFBAExit
.22c5					_IFBALoop:
.22c5	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.22c8	15 00		ora $00,x			ora 	IM0,x
.22ca	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.22cd	e8		inx				inx
.22ce	c8		iny				iny
.22cf	c0 03		cpy #$03			cpy 	#3
.22d1	d0 f2		bne $22c5			bne 	_IFBALoop
.22d3	18		clc				clc
.22d4					_IFBAExit:
.22d4	7a		ply				ply
.22d5	60		rts				rts
.22d6					IFloatBitwiseXor:
.22d6	5a		phy				phy
.22d7	20 ed 22	jsr $22ed			jsr 	IFPreProcessBitwise 		; set up everything.
.22da	d0 0f		bne $22eb			bne 	_IFBAExit
.22dc					_IFBALoop:
.22dc	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.22df	55 00		eor $00,x			eor 	IM0,x
.22e1	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.22e4	e8		inx				inx
.22e5	c8		iny				iny
.22e6	c0 03		cpy #$03			cpy 	#3
.22e8	d0 f2		bne $22dc			bne 	_IFBALoop
.22ea	18		clc				clc
.22eb					_IFBAExit:
.22eb	7a		ply				ply
.22ec	60		rts				rts
.22ed					IFPreProcessBitwise:
.22ed	a0 00		ldy #$00			ldy 	#0 							; set index.
.22ef	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.22f1	15 03		ora $03,x			ora 	IExp,x
.22f3	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.22f5	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.22f7	38		sec				sec 								; carry set just in cases.
.22f8	60		rts				rts
.22f9					IFloatAbsoluteR0:
.22f9	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.22fb	29 bf		and #$bf			and 	#IFSign ^ 255
.22fd	85 0f		sta $0f				sta 	IFR0+IExp
.22ff	18		clc				clc
.2300	60		rts				rts
.2301					IFloatSquareRootR0:
.2301	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.2303	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero
.2306	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.2308	29 40		and #$40			and 	#IFSign
.230a	d0 2f		bne $233b			bne 	_IFSRFail
.230c	20 ec 26	jsr $26ec			jsr 	IFloatNormalise 			; it will work better !
.230f	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.2311	20 57 26	jsr $2657			jsr 	IFloatCopyToRegister
.2314	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2316	20 07 22	jsr $2207			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2319	18		clc				clc
.231a	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.231c	85 0f		sta $0f				sta 	IFR0+IExp
.231e	4a		lsr a				lsr 	a 							; which we can halve.
.231f	38		sec				sec 								; convert back
.2320	e9 17		sbc #$17			sbc 	#23
.2322	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2324	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.2326	20 3d 23	jsr $233d			jsr 	_IFSRNewton
.2329	20 3d 23	jsr $233d			jsr 	_IFSRNewton
.232c	20 3d 23	jsr $233d			jsr 	_IFSRNewton
.232f	20 3d 23	jsr $233d			jsr 	_IFSRNewton
.2332	18		clc				clc
.2333	60		rts				rts
.2334					_IFSRZero:
.2334	a2 0c		ldx #$0c			ldx 	#IFR0
.2336	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.2339	18		clc				clc
.233a	60		rts				rts
.233b					_IFSRFail:
.233b	38		sec				sec
.233c	60		rts				rts
.233d					_IFSRNewton:
.233d	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.233f	20 04 26	jsr $2604			jsr 	IFloatPushRx
.2342	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2344	20 04 26	jsr $2604			jsr 	IFloatPushRx
.2347	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.2349	20 d8 23	jsr $23d8			jsr 	IFloatDivideFloat
.234c	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.234e	20 25 26	jsr $2625			jsr 	IFloatPullRx
.2351	20 ab 20	jsr $20ab			jsr 	IFloatAdd 					; now guess + original/guess
.2354	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.2356	20 e4 26	jsr $26e4			jsr 	IFloatShiftRight
.2359	a2 10		ldx #$10			ldx 	#IFR1
.235b	20 25 26	jsr $2625			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.235e	60		rts				rts
.235f					IFloatFractionalR0:
.235f	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2361	29 3f		and #$3f			and 	#IFXMask
.2363	f0 17		beq $237c			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2365	20 f9 22	jsr $22f9			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2368	a2 0c		ldx #$0c			ldx 	#IFR0
.236a	20 ec 26	jsr $26ec			jsr 	IFloatNormalise 			; normalise R0
.236d	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.236f	20 57 26	jsr $2657			jsr 	IFloatCopyToRegister
.2372	20 b5 23	jsr $23b5			jsr 	IFloatIntegerR0 			; take integer part of R0
.2375	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.2377	20 a4 20	jsr $20a4			jsr 	IFloatSubtract
.237a	80 05		bra $2381			bra 	_FIPExit
.237c					_FIPZero:
.237c	a2 0c		ldx #$0c			ldx 	#IFR0
.237e	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.2381					_FIPExit:
.2381	18		clc				clc
.2382	60		rts				rts
.2383					IFloatCompare:
.2383	20 a4 20	jsr $20a4			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2386	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2388	05 0f		ora $0f				ora 	IFR0+IExp
.238a	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.238c	29 3f		and #$3f			and 	#IFXMask
.238e	d0 19		bne $23a9			bne 	_IFCNonInteger
.2390	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero 			; check if zero
.2393	f0 0f		beq $23a4			beq 	_IFCZero
.2395					_IFCReturnSign:
.2395	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2397	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2399	48		pha				pha
.239a	a9 01		lda #$01			lda 	#1
.239c	20 b7 26	jsr $26b7			jsr 	IFloatSetByte 				; return to +1
.239f	68		pla				pla 								; sign bit back
.23a0	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.23a2	18		clc				clc
.23a3	60		rts				rts
.23a4					_IFCZero:
.23a4	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.23a7	18		clc				clc
.23a8	60		rts				rts
.23a9					_IFCNonInteger:
.23a9	a5 0c		lda $0c				lda 	IFR0+IM0
.23ab	29 00		and #$00			and		#$00
.23ad	05 0d		ora $0d				ora 	IFR0+IM1
.23af	05 0e		ora $0e				ora 	IFR0+IM2
.23b1	f0 f1		beq $23a4			beq 	_IFCZero 					; near enough !
.23b3	80 e0		bra $2395			bra 	_IFCReturnSign 				; return the sign of the difference.
.23b5					IFloatIntegerR0:
.23b5	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.23b7	29 3f		and #$3f			and 	#IFXMask
.23b9	f0 1b		beq $23d6			beq 	_FIPExit 					; if so do nothing
.23bb	a2 0c		ldx #$0c			ldx 	#IFR0
.23bd	20 ec 26	jsr $26ec			jsr 	IFloatNormalise 			; normalise
.23c0	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero 			; is it zero ?
.23c3	f0 0e		beq $23d3			beq 	_FIPZero 					; if so return zero.
.23c5					_FIPShift:
.23c5	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.23c7	29 20		and #$20			and 	#$20 						; still -ve
.23c9	f0 0b		beq $23d6			beq 	_FIPExit
.23cb	20 e4 26	jsr $26e4			jsr 	IFloatShiftRight 			; shift mantissa right
.23ce	20 0e 27	jsr $270e			jsr 	IFloatIncExponent 			; bump exponent
.23d1	80 f2		bra $23c5			bra 	_FIPShift
.23d3					_FIPZero:
.23d3	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.23d6					_FIPExit:
.23d6	18		clc				clc
.23d7	60		rts				rts
.23d8					IFloatDivideFloat:
.23d8	8e fc 04	stx $04fc			stx 	IFTarget  					; this is s1, s0 = R0
.23db	20 10 22	jsr $2210			jsr 	IFCalculateNewSign 			; calculate sign of result
.23de	20 ec 26	jsr $26ec			jsr 	IFloatNormalise 			; normalise RX
.23e1	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.23e3	20 ec 26	jsr $26ec			jsr 	IFloatNormalise
.23e6	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero
.23e9	f0 56		beq $2441			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.23eb	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.23ed	20 07 22	jsr $2207			jsr 	IFMSignExtend
.23f0	8d fd 04	sta $04fd			sta 	IFNewExponent
.23f3	ae fc 04	ldx $04fc			ldx 	IFTarget 					; calculate s1.exponent
.23f6	b5 03		lda $03,x			lda 	IExp,x
.23f8	20 07 22	jsr $2207			jsr 	IFMSignExtend
.23fb	38		sec				sec
.23fc	ed fd 04	sbc $04fd			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.23ff	38		sec				sec
.2400	e9 17		sbc #$17			sbc 	#23
.2402	8d fd 04	sta $04fd			sta 	IFNewExponent
.2405	20 43 24	jsr $2443			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2408	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.240a	10 08		bpl $2414			bpl 	_IFDFNoShiftResult
.240c	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.240e	20 e4 26	jsr $26e4			jsr 	IFloatShiftRight
.2411	ee fd 04	inc $04fd			inc 	IFNewExponent
.2414					_IFDFNoShiftResult:
.2414	ad fd 04	lda $04fd			lda 	IFNewExponent 				; underflow/overflow check.
.2417	30 06		bmi $241f			bmi 	_IFDFCheckUnderflow
.2419	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.241b	b0 24		bcs $2441			bcs 	_IFDFDivZero
.241d	80 11		bra $2430			bra		_IFDFExit
.241f					_IFDFCheckUnderflow:
.241f	ad fd 04	lda $04fd			lda 	IFNewExponent 				; shift into a legal exponent.
.2422	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2424	b0 0a		bcs $2430			bcs 	_IFDFExit
.2426	ee fd 04	inc $04fd			inc 	IFNewExponent
.2429	a2 18		ldx #$18			ldx 	#IFRTemp
.242b	20 e4 26	jsr $26e4			jsr 	IFloatShiftRight
.242e	80 ef		bra $241f			bra 	_IFDFCheckUnderflow
.2430					_IFDFExit:
.2430	ad fd 04	lda $04fd			lda 	IFNewExponent 				; combine exponent and sign.
.2433	29 3f		and #$3f			and 	#IFXMask
.2435	0d fe 04	ora $04fe			ora 	IFNewSign
.2438	85 1b		sta $1b				sta 	IFRTemp+IExp
.243a	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.243c	20 46 26	jsr $2646			jsr 	IFloatCopyFromRegister
.243f	18		clc				clc
.2440	60		rts				rts
.2441					_IFDFDivZero:
.2441	38		sec				sec
.2442	60		rts				rts
.2443					IFloatDivideSupport:
.2443	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.2445	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.2448	5a		phy				phy 								; main division loop x 23
.2449	a0 17		ldy #$17			ldy 	#23
.244b					_IFDSLoop:
.244b	20 7e 22	jsr $227e			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.244e	20 72 22	jsr $2272			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2451	88		dey				dey
.2452	d0 f7		bne $244b			bne 	_IFDSLoop 					; do it 24 times
.2454	7a		ply				ply
.2455	60		rts				rts
.2456					IFloatIntegerToStringR0:
.2456	8d ff 04	sta $04ff			sta 	IFBase 						; save base to use.
.2459	20 36 27	jsr $2736			jsr 	IFloatBufferReset			; empty buffer
.245c	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.245e	29 3f		and #$3f			and 	#IFXMask
.2460	d0 1e		bne $2480			bne 	_IFIFail
.2462	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.2464	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero
.2467	f0 0e		beq $2477			beq 	_IFINotNegative
.2469	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.246b	29 40		and #$40			and 	#IFSign
.246d	f0 08		beq $2477			beq 	_IFINotNegative
.246f	a9 2d		lda #$2d			lda 	#"-"						; output -
.2471	20 45 27	jsr $2745			jsr 	IFloatBufferWrite
.2474	20 c0 26	jsr $26c0			jsr 	IFloatNegate 				; tidy up !
.2477					_IFINotNegative:
.2477	20 82 24	jsr $2482			jsr 	_IFIRecursiveConvert 		; start converting
.247a	20 3d 27	jsr $273d			jsr 	IFloatGetBufferAddress
.247d	18		clc				clc
.247e	80 01		bra $2481			bra 	_IFIExit
.2480					_IFIFail:
.2480	38		sec				sec
.2481					_IFIExit:
.2481	60		rts				rts
.2482					_IFIRecursiveConvert:
.2482	a2 10		ldx #$10			ldx 	#IFR1
.2484	20 57 26	jsr $2657			jsr 	IFloatCopyToRegister 		; R0->R1
.2487	a2 0c		ldx #$0c			ldx 	#IFR0
.2489	ad ff 04	lda $04ff			lda 	IFBase 						; Base -> R0
.248c	20 b7 26	jsr $26b7			jsr 	IFloatSetByte
.248f	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.2491	20 1a 22	jsr $221a			jsr 	IFloatDivideInteger
.2494	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.2496	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero
.2499	f0 09		beq $24a4			beq 	_IFIOutDigit
.249b	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.249d	48		pha				pha
.249e	20 82 24	jsr $2482			jsr 	_IFIRecursiveConvert 		; convert the divider
.24a1	68		pla				pla
.24a2	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.24a4					_IFIOutDigit:
.24a4	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.24a6	c9 0a		cmp #$0a			cmp	 	#10
.24a8	90 02		bcc $24ac			bcc 	_IFINotHex
.24aa	69 06		adc #$06			adc 	#6
.24ac					_IFINotHex:
.24ac	69 30		adc #$30			adc 	#48
.24ae	20 45 27	jsr $2745			jsr 	IFloatBufferWrite
.24b1	60		rts				rts
.04ff					IFBase:
>04ff							.fill 	1
.24b2					IFloatFloatToStringR0:
.24b2	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.24b4	20 04 26	jsr $2604			jsr 	IFloatPushRx
.24b7	20 57 26	jsr $2657			jsr 	IFloatCopyToRegister
.24ba	20 b5 23	jsr $23b5			jsr 	IFloatIntegerR0				; make R0 integer
.24bd	a9 0a		lda #$0a			lda 	#10 						; base 10.
.24bf	20 56 24	jsr $2456			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.24c2	9c 00 05	stz $0500			stz 	IFloatDecimalCount 			; zero the decimal count.
.24c5	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.24c7	29 3f		and #$3f			and 	#IFXMask
.24c9	f0 44		beq $250f			beq 	_IFFSExit
.24cb					_IFloatFracLoop:
.24cb	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.24cd	20 46 26	jsr $2646			jsr 	IFloatCopyFromRegister
.24d0	20 5f 23	jsr $235f			jsr 	IFloatFractionalR0
.24d3	20 ec 26	jsr $26ec			jsr 	IFloatNormalise
.24d6	a2 14		ldx #$14			ldx 	#IFR2
.24d8	20 57 26	jsr $2657			jsr 	IFloatCopyToRegister 		; copy to R2
.24db	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.24dd	a9 0a		lda #$0a			lda 	#10
.24df	20 b7 26	jsr $26b7			jsr 	IFloatSetByte
.24e2	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.24e4	20 55 21	jsr $2155			jsr 	IFloatMultiply
.24e7	a2 14		ldx #$14			ldx 	#IFR2
.24e9	20 57 26	jsr $2657			jsr 	IFloatCopyToRegister
.24ec	20 b5 23	jsr $23b5			jsr 	IFloatIntegerR0 			; get integer part of R0
.24ef	ad 00 05	lda $0500			lda 	IFloatDecimalCount 			; done 5 dp, no more
.24f2	c9 03		cmp #$03			cmp 	#3
.24f4	f0 16		beq $250c			beq 	_IFFSExitStripZero
.24f6	ad 00 05	lda $0500			lda 	IFloatDecimalCount 			; written the DP yet ?
.24f9	d0 05		bne $2500			bne 	_IFloatNotFirst
.24fb	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.24fd	20 45 27	jsr $2745			jsr 	IFloatBufferWrite
.2500					_IFloatNotFirst:
.2500	ee 00 05	inc $0500			inc 	IFloatDecimalCount
.2503	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.2505	09 30		ora #$30			ora 	#"0"						; ASCII
.2507	20 45 27	jsr $2745			jsr 	IFloatBufferWrite 			; write to the buffer.
.250a	80 bf		bra $24cb			bra 	_IFloatFracLoop
.250c					_IFFSExitStripZero:
.250c	20 54 27	jsr $2754			jsr 	IFloatStripTrailingZeros
.250f					_IFFSExit:
.250f	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.2511	20 25 26	jsr $2625			jsr 	IFloatPullRx
.2514	20 3d 27	jsr $273d			jsr 	IFloatGetBufferAddress
.2517	18		clc				clc
.2518	60		rts				rts
.0500					IFloatDecimalCount:
>0500							.fill 	1
.2519					IFloatStringToFloatR0:
.2519	8d 01 05	sta $0501			sta 	IFCount 					; save it out.
.251c	86 0a		stx $0a				stx 	iTemp0
.251e	84 0b		sty $0b				sty 	iTemp0+1
.2520	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.2522	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.2525	9c 02 05	stz $0502			stz 	IFSignFlag 					; clear the sign flag
.2528	20 b5 25	jsr $25b5			jsr 	IFSTFGetNext 				; get first
.252b	f0 1b		beq $2548			beq 	_IFSTFFail 					; no character
.252d	90 10		bcc $253f			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.252f	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2531	d0 15		bne $2548			bne 	_IFSTFFail
.2533	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2535	8d 02 05	sta $0502			sta 	IFSignFlag
.2538					_IFSTFLoop:
.2538	20 b5 25	jsr $25b5			jsr 	IFSTFGetNext 				; get next
.253b	b0 0b		bcs $2548			bcs 	_IFSTFFail 					; bad character.
.253d	f0 11		beq $2550			beq 	_IFSTFExit 					; end of data
.253f					_IFSTFHaveChar:
.253f	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2541	f0 08		beq $254b			beq 	_IFSTFDecimal
.2543	20 d9 25	jsr $25d9			jsr 	IFSTFAddR0 					; add number in
.2546	80 f0		bra $2538			bra 	_IFSTFLoop 					; keep going until . or end.
.2548					_IFSTFFail:
.2548	38		sec				sec
.2549	80 0d		bra $2558			bra 	_IFSTFReturn
.254b					_IFSTFDecimal:
.254b	20 60 25	jsr $2560			jsr 	IFSTFDecimal 				; call the decimal places code.
.254e	b0 08		bcs $2558			bcs 	_IFSTFReturn 				; error
.2550					_IFSTFExit:
.2550	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2552	0d 02 05	ora $0502			ora 	IFSignFlag
.2555	85 0f		sta $0f				sta 	IFR0+IExp
.2557	18		clc				clc
.2558					_IFSTFReturn:
.2558	60		rts				rts
.2559					IFloatAddDecimalToR0:
.2559	8d 01 05	sta $0501			sta 	IFCount 					; save it out.
.255c	86 0a		stx $0a				stx 	iTemp0
.255e	84 0b		sty $0b				sty 	iTemp0+1
.2560					IFSTFDecimal:
.2560	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2562	20 04 26	jsr $2604			jsr 	IFloatPushRx
.2565	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2567	20 b5 26	jsr $26b5			jsr 	IFloatSetZero
.256a	9c 03 05	stz $0503			stz 	IFDecimalPlaces
.256d					_IFSTDLoop:
.256d	20 b5 25	jsr $25b5			jsr 	IFSTFGetNext 				; get next
.2570	b0 41		bcs $25b3			bcs 	_IFSTFFail2 				; bad character.
.2572	f0 11		beq $2585			beq 	_IFSTFComplete 				; end of data, work out the result.
.2574	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2576	f0 39		beq $25b1			beq 	_IFSTFExit2
.2578	20 d9 25	jsr $25d9			jsr 	IFSTFAddR0 					; add number in
.257b	ee 03 05	inc $0503			inc 	IFDecimalPlaces 			; count decimals
.257e	ad 03 05	lda $0503			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2581	c9 03		cmp #$03			cmp 	#3
.2583	90 e8		bcc $256d			bcc 	_IFSTDLoop
.2585					_IFSTFComplete:
.2585	ad 03 05	lda $0503			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2588	f0 27		beq $25b1			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.258a	3a		dec a				dec 	a 							; table indexed from 1.
.258b	0a		asl a				asl 	a
.258c	0a		asl a				asl 	a
.258d	aa		tax				tax
.258e	bd f0 25	lda $25f0,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2591	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2593	bd f1 25	lda $25f1,x			lda 	TableTen+1,x
.2596	85 11		sta $11				sta  	IFR1+IM1
.2598	bd f2 25	lda $25f2,x			lda 	TableTen+2,x
.259b	85 12		sta $12				sta  	IFR1+IM2
.259d	bd f3 25	lda $25f3,x			lda 	TableTen+3,x
.25a0	85 13		sta $13				sta  	IFR1+IExp
.25a2	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.25a4	20 55 21	jsr $2155			jsr 	IFloatMultiply
.25a7	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.25a9	20 25 26	jsr $2625			jsr 	IFloatPullRx
.25ac	a2 10		ldx #$10			ldx 	#IFR1
.25ae	20 ab 20	jsr $20ab			jsr 	IFloatAdd
.25b1					_IFSTFExit2:
.25b1	18		clc				clc
.25b2	60		rts				rts
.25b3					_IFSTFFail2:
.25b3	38		sec				sec
.25b4	60		rts				rts
.25b5					IFSTFGetNext:
.25b5	ad 01 05	lda $0501			lda 	IFCount  					; if count is zero, return with Z set.
.25b8	f0 19		beq $25d3			beq 	_IFSTFReturnOk
.25ba	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.25bc	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.25be	d0 02		bne $25c2			bne 	_IFSTFGNNoCarry
.25c0	e6 0b		inc $0b				inc 	iTemp0+1
.25c2					_IFSTFGNNoCarry:
.25c2	ce 01 05	dec $0501			dec 	IFCount 					; dec count.
.25c5	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.25c7	f0 08		beq $25d1			beq 	_IFSTFGOkay
.25c9	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.25cb	90 08		bcc $25d5			bcc 	_IFSTFGFail
.25cd	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.25cf	b0 04		bcs $25d5			bcs 	_IFSTFGFail
.25d1					_IFSTFGOkay:
.25d1	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.25d3					_IFSTFReturnOk:
.25d3	18		clc				clc
.25d4	60		rts				rts
.25d5					_IFSTFGFail:
.25d5	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.25d7	38		sec				sec
.25d8	60		rts				rts
.25d9					IFSTFAddR0:
.25d9	29 0f		and #$0f			and 	#15 						; to int value
.25db	48		pha				pha 								; save it.
.25dc	a9 0a		lda #$0a			lda 	#10
.25de	a2 10		ldx #$10			ldx 	#IFR1
.25e0	20 b7 26	jsr $26b7			jsr 	IFloatSetByte
.25e3	20 55 21	jsr $2155			jsr 	IFloatMultiply
.25e6	68		pla				pla
.25e7	a2 10		ldx #$10			ldx 	#IFR1
.25e9	20 b7 26	jsr $26b7			jsr 	IFloatSetByte
.25ec	20 ab 20	jsr $20ab			jsr 	IFloatAdd
.25ef	60		rts				rts
.0501					IFCount:
>0501							.fill 	1
.0502					IFSignFlag:
>0502							.fill 	1
.0503					IFDecimalPlaces:
>0503							.fill 	1
.25f0					TableTen:
>25f0	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>25f4	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>25f8	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>25fc	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2600	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2604					IFloatPushRx:
.2604	5a		phy				phy
.2605	ac 04 05	ldy $0504			ldy 	IFStackIndex
.2608	b5 00		lda $00,x			lda 	IM0,x
.260a	99 05 05	sta $0505,y			sta 	IFStack,y
.260d	b5 01		lda $01,x			lda 	IM1,x
.260f	99 06 05	sta $0506,y			sta 	IFStack+1,y
.2612	b5 02		lda $02,x			lda 	IM2,x
.2614	99 07 05	sta $0507,y			sta 	IFStack+2,y
.2617	b5 03		lda $03,x			lda 	IExp,x
.2619	99 08 05	sta $0508,y			sta 	IFStack+3,y
.261c	c8		iny				iny
.261d	c8		iny				iny
.261e	c8		iny				iny
.261f	c8		iny				iny
.2620	8c 04 05	sty $0504			sty 	IFStackIndex
.2623	7a		ply				ply
.2624	60		rts				rts
.2625					IFloatPullRx:
.2625	5a		phy				phy
.2626	ac 04 05	ldy $0504			ldy 	IFStackIndex
.2629	88		dey				dey
.262a	88		dey				dey
.262b	88		dey				dey
.262c	88		dey				dey
.262d	b9 05 05	lda $0505,y			lda 	IFStack,y
.2630	95 00		sta $00,x			sta 	IM0,x
.2632	b9 06 05	lda $0506,y			lda 	IFStack+1,y
.2635	95 01		sta $01,x			sta 	IM1,x
.2637	b9 07 05	lda $0507,y			lda 	IFStack+2,y
.263a	95 02		sta $02,x			sta 	IM2,x
.263c	b9 08 05	lda $0508,y			lda 	IFStack+3,y
.263f	95 03		sta $03,x			sta 	IExp,x
.2641	8c 04 05	sty $0504			sty 	IFStackIndex
.2644	7a		ply				ply
.2645	60		rts				rts
.0504					IFStackIndex:
>0504							.fill 	1
.0505					IFStack:
>0505							.fill 	16*4
.2646					IFloatCopyFromRegister:
.2646	b5 00		lda $00,x			lda 	0,x
.2648	85 0c		sta $0c				sta 	IFR0
.264a	b5 01		lda $01,x			lda 	1,x
.264c	85 0d		sta $0d				sta 	IFR0+1
.264e	b5 02		lda $02,x			lda 	2,x
.2650	85 0e		sta $0e				sta 	IFR0+2
.2652	b5 03		lda $03,x			lda 	3,x
.2654	85 0f		sta $0f				sta 	IFR0+3
.2656	60		rts				rts
.2657					IFloatCopyToRegister:
.2657	a5 0c		lda $0c				lda 	IFR0
.2659	95 00		sta $00,x			sta 	0,x
.265b	a5 0d		lda $0d				lda 	IFR0+1
.265d	95 01		sta $01,x			sta 	1,x
.265f	a5 0e		lda $0e				lda 	IFR0+2
.2661	95 02		sta $02,x			sta 	2,x
.2663	a5 0f		lda $0f				lda 	IFR0+3
.2665	95 03		sta $03,x			sta 	3,x
.2667	60		rts				rts
.2668					IFloatLoadInline:
.2668	68		pla				pla 								; pop address off to iTemp0
.2669	85 0a		sta $0a				sta 	iTemp0
.266b	68		pla				pla
.266c	85 0b		sta $0b				sta 	iTemp0+1
.266e	a0 01		ldy #$01			ldy 	#1
.2670	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2672	95 00		sta $00,x			sta 	0,x
.2674	c8		iny				iny
.2675	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.2677	95 01		sta $01,x			sta 	1,x
.2679	c8		iny				iny
.267a	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.267c	95 02		sta $02,x			sta 	2,x
.267e	c8		iny				iny
.267f	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2681	95 03		sta $03,x			sta 	3,x
.2683	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2684	a5 0a		lda $0a				lda 	iTemp0
.2686	69 05		adc #$05			adc 	#5
.2688	85 0a		sta $0a				sta 	iTemp0
.268a	90 02		bcc $268e			bcc 	_IFLINoCarry
.268c	e6 0b		inc $0b				inc 	iTemp0+1
.268e					_IFLINoCarry:
.268e	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2691					IFloatMultiply8BitRx:
.2691	5a		phy		        phy
.2692	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2694	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2696	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2697	85 0c		sta $0c		        sta     IFR0+IM0
.2699	84 0d		sty $0d		        sty     IFR0+IM1
.269b	a9 00		lda #$00	        lda     #0
.269d	a0 08		ldy #$08	        ldy     #8
.269f					_IFMLoop:
.269f	90 03		bcc $26a4	        bcc     _IFMNoAdd
.26a1	18		clc		        clc
.26a2	65 0d		adc $0d		        adc     IFR0+IM1
.26a4					_IFMNoAdd:
.26a4	6a		ror a		        ror     a
.26a5	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.26a7	88		dey		        dey
.26a8	d0 f5		bne $269f	        bne     _IFMLoop
.26aa	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.26ac	7a		ply		        ply
.26ad	60		rts		        rts
.26ae					IFloatCheckZero:
.26ae	b5 00		lda $00,x			lda 	IM0,x
.26b0	15 01		ora $01,x			ora 	IM1,x
.26b2	15 02		ora $02,x			ora 	IM2,x
.26b4	60		rts				rts
.26b5					IFloatSetZero:
.26b5	a9 00		lda #$00			lda 	#0
.26b7					IFloatSetByte:
.26b7	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.26b9	74 01		stz $01,x			stz 	IM1,x
.26bb	74 02		stz $02,x			stz 	IM2,x
.26bd	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.26bf	60		rts				rts
.26c0					IFloatNegate:
.26c0	b5 03		lda $03,x			lda 	IExp,x
.26c2	49 40		eor #$40			eor 	#IFSign
.26c4	95 03		sta $03,x			sta 	IExp,x
.26c6	18		clc				clc
.26c7	60		rts				rts
.26c8					IFloatMantissaNegate:
.26c8	38		sec				sec
.26c9	a9 00		lda #$00			lda 	#0
.26cb	f5 00		sbc $00,x			sbc 	IM0,x
.26cd	95 00		sta $00,x			sta 	IM0,x
.26cf	a9 00		lda #$00			lda 	#0
.26d1	f5 01		sbc $01,x			sbc 	IM1,x
.26d3	95 01		sta $01,x			sta 	IM1,x
.26d5	a9 00		lda #$00			lda 	#0
.26d7	f5 02		sbc $02,x			sbc 	IM2,x
.26d9	95 02		sta $02,x			sta 	IM2,x
.26db	60		rts				rts
.26dc					IFloatShiftLeft:
.26dc	18		clc				clc
.26dd					IFloatRotateLeft:
.26dd	36 00		rol $00,x			rol 	IM0,x
.26df	36 01		rol $01,x			rol 	IM1,x
.26e1	36 02		rol $02,x			rol 	IM2,x
.26e3	60		rts				rts
.26e4					IFloatShiftRight:
.26e4	18		clc				clc
.26e5					IFloatRotateRight:
.26e5	76 02		ror $02,x			ror 	IM2,x
.26e7	76 01		ror $01,x			ror 	IM1,x
.26e9	76 00		ror $00,x			ror 	IM0,x
.26eb	60		rts				rts
.26ec					IFloatNormalise:
.26ec	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero 			; is it zero
.26ef	f0 18		beq $2709			beq 	_IFNExitZero 				; if so exit
.26f1					_IFNLoop:
.26f1	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.26f3	29 c0		and #$c0			and 	#$C0
.26f5	c9 40		cmp #$40			cmp 	#$40
.26f7	f0 13		beq $270c			beq 	_IFNExitOkay 				; if so , then we are done.
.26f9	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.26fb	29 3f		and #$3f			and 	#$3F
.26fd	c9 20		cmp #$20			cmp 	#$20
.26ff	f0 0b		beq $270c			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2701	20 22 27	jsr $2722			jsr 	IFloatDecExponent
.2704	20 dc 26	jsr $26dc			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2707	80 e8		bra $26f1			bra 	_IFNLoop
.2709					_IFNExitZero:
.2709	20 b5 26	jsr $26b5			jsr 	IFloatSetZero 				; set the result to zero
.270c					_IFNExitOkay:
.270c	18		clc				clc  								; return with CC.
.270d	60		rts				rts
.270e					IFloatIncExponent:
.270e	b5 03		lda $03,x			lda 	IExp,x
.2710	48		pha				pha
.2711	29 c0		and #$c0			and 	#$C0
.2713	8d 45 05	sta $0545			sta 	IFXTemp
.2716	68		pla				pla
.2717	1a		inc a				inc 	a
.2718	29 3f		and #$3f			and 	#$3F
.271a	48		pha				pha
.271b	0d 45 05	ora $0545			ora 	IFXTemp
.271e	95 03		sta $03,x			sta 	IExp,x
.2720	68		pla				pla
.2721	60		rts				rts
.2722					IFloatDecExponent:
.2722	b5 03		lda $03,x			lda 	IExp,x
.2724	48		pha				pha
.2725	29 c0		and #$c0			and 	#$C0
.2727	8d 45 05	sta $0545			sta 	IFXTemp
.272a	68		pla				pla
.272b	3a		dec a				dec 	a
.272c	29 3f		and #$3f			and 	#$3F
.272e	48		pha				pha
.272f	0d 45 05	ora $0545			ora 	IFXTemp
.2732	95 03		sta $03,x			sta 	IExp,x
.2734	68		pla				pla
.2735	60		rts				rts
.0545					IFXTemp:
>0545							.fill 	1
.2736					IFloatBufferReset:
.2736	9c 46 05	stz $0546			stz 	IFBufferCount
.2739	9c 47 05	stz $0547			stz 	IFBuffer
.273c	60		rts				rts
.273d					IFloatGetBufferAddress:
.273d	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.273f	a2 47		ldx #$47			ldx 	#(IFBuffer & $FF)
.2741	ad 46 05	lda $0546			lda 	IFBufferCount
.2744	60		rts				rts
.2745					IFloatBufferWrite:
.2745	da		phx				phx
.2746	ae 46 05	ldx $0546			ldx 	IFBufferCount
.2749	9d 47 05	sta $0547,x			sta 	IFBuffer,x
.274c	9e 48 05	stz $0548,x			stz 	IFBuffer+1,x
.274f	ee 46 05	inc $0546			inc 	IFBufferCount
.2752	fa		plx				plx
.2753	60		rts				rts
.2754					IFloatStripTrailingZeros:
.2754	ae 46 05	ldx $0546			ldx 	IFBufferCount
.2757	bd 46 05	lda $0546,x			lda 	IFBuffer-1,x
.275a	c9 30		cmp #$30			cmp		#"0"
.275c	d0 0f		bne $276d			bne 	_IFSTExit
.275e	bd 45 05	lda $0545,x			lda 	IFBuffer-2,x
.2761	c9 2e		cmp #$2e			cmp 	#"."
.2763	f0 08		beq $276d			beq 	_IFSTExit
.2765	ce 46 05	dec $0546			dec 	IFBufferCount
.2768	9e 46 05	stz $0546,x			stz 	IFBuffer-1,x
.276b	80 e7		bra $2754			bra 	IFloatStripTrailingZeros
.276d					_IFSTExit:
.276d	60		rts				rts
.0546					IFBufferCount:
>0546							.fill 	1
.0547					IFBuffer:
>0547							.fill 	25
.276e					IFloatCheck:
.276e	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2770	09 40		ora #$40			ora 	#IFSign
.2772	85 0f		sta $0f				sta 	IFR0+IExp
.2774	20 ab 20	jsr $20ab			jsr 	IFloatAdd 					; add allowed to error.
.2777	a2 0c		ldx #$0c			ldx 	#IFR0
.2779	20 ae 26	jsr $26ae			jsr 	IFloatCheckZero 			; error if < 0
.277c	f0 06		beq $2784			beq 	_IFAOkay
.277e	a5 0f		lda $0f				lda 	IFR0+IExp
.2780	29 40		and #$40			and 	#IFSign
.2782	d0 01		bne $2785			bne 	_IFAFail
.2784					_IFAOkay:
.2784	60		rts				rts
.2785					_IFAFail:
.2785	38		sec				sec
.2786	68		pla				pla 								; get address - 2
.2787	e9 02		sbc #$02			sbc 	#2
.2789	aa		tax				tax
.278a	68		pla				pla
.278b	e9 00		sbc #$00			sbc 	#0
.278d	a8		tay				tay
.278e	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2790					_IFAStop:
>2790	db						.byte 	$DB 						; display an error AA ADR ADR
.2791	80 fd		bra $2790			bra 	_IFAStop

;******  Return to file: basic.asm

.2793					NotImplemented:
.2793	a9 ff		lda #$ff			lda 	#$FF
.2795	80 04		bra $279b			bra 	EnterDbg
.2797					ErrorHandler:
.2797	fa		plx				plx
.2798	7a		ply				ply
.2799	a9 ee		lda #$ee			lda 	#$EE
.279b					EnterDbg:
>279b	db						.byte 	$DB
.279c	4c 9b 27	jmp $279b			jmp 	EnterDbg

;******  End of listing
