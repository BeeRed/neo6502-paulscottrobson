
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Wed Jul  5 09:19:43 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorSize:
>0344							.fill 	2
.0346					sectorCount:
>0346							.fill 	2
.0348					currentSector:
>0348							.fill 	2
.034a					successFlag:
>034a							.fill 	1
.034b					sectorHeader:
.034b					shFirstNext:
>034b							.fill 	1
.034c					shContinue:
>034c							.fill 	1
.034d					shDataSize:
>034d							.fill 	2
.034f					shFileSize:
>034f							.fill 	2
>0351							.fill 	10
.035b					shNameLength:
>035b							.fill 	1
.035c					shNameText:
>035c							.fill 	15
.036b					shFileSizeCopy:
>036b							.fill 	2
.036d					notFirstSector:
>036d							.fill 	1
.036e					sectorCapacity:
>036e							.fill 	2
.0370					fileRemainingSize:
>0370							.fill 	2
.0372					bytesToWrite:
>0372							.fill 	2
>0374							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 02 21	jsr $2102			jsr 	PGMSetBaseAddress
.1007	20 a9 2d	jsr $2da9			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.100f	4c 0c 15	jmp $150c			jmp 	Command_RUN
.1012	4c 10 14	jmp $1410			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="I"					AM_ABSOLUTEIX	= 'I' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d0					AM_IND 		= ('P'|AM_ZPAGE) 				; lda (nn)
=$d1					AM_INDX		= ('Q'|AM_ZPAGE) 				; lda (nn,x)
=$d2					AM_INDY		= ('R'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f
=$8d90					PR_RENUMBER = $8d90

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 57 17	jsr $1757			jsr 	EXPEvalNumber 				; get a number to assert
.1018	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.101a	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail 					; if so, the assert fails.
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c 9c 27	jmp $279c		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1025	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1027	f0 14		beq $103d			beq 	_CLNoParam
.1029	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.102b	f0 10		beq $103d			beq 	_CLNoParam
.102d	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; address for CLEAR
.1030	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1032	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1034	b0 0b		bcs $1041			bcs 	_CLMemory
.1036	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1038	90 07		bcc $1041			bcc 	_CLMemory
.103a	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.103d					_CLNoParam:
.103d	20 44 10	jsr $1044			jsr 	ClearCode
.1040	60		rts				rts
.1041					_CLMemory:
.1041	4c 36 28	jmp $2836		jmp	ErrorV_memory
.1044					ClearCode:
.1044	20 15 21	jsr $2115			jsr 	PGMEndProgram 				; end program => zTemp0
.1047	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.1049	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.104b	1a		inc a				inc 	a
.104c	85 2b		sta $2b				sta 	freeMemory+1
.104e	20 48 2d	jsr $2d48			jsr 	VARClearHashTables
.1051	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.1054	20 8d 29	jsr $298d			jsr 	StackReset 					; page passed on in A
.1057	20 ec 29	jsr $29ec			jsr 	StringSystemInitialise
.105a	20 b1 26	jsr $26b1			jsr 	ScanProcedures
.105d	20 de 14	jsr $14de			jsr 	Command_RESTORE
.1060	60		rts				rts
.1061					AllocateMemory:
.1061	5a		phy				phy 								; save Y
.1062	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.1064	5a		phy				phy
.1065	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.1067	5a		phy				phy
.1068	a8		tay				tay 								; count is now in XY
.1069					_AllocateLoop:
.1069	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.106b	d0 04		bne $1071			bne 	_AllocateOne
.106d	c0 00		cpy #$00			cpy 	#0
.106f	f0 15		beq $1086			beq 	_AllocateExit
.1071					_AllocateOne:
.1071	a9 00		lda #$00			lda 	#0 							; zero byte
.1073	92 2a		sta ($2a)			sta 	(freeMemory)
.1075	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.1077	d0 05		bne $107e			bne 	_AllocateSkipCarry
.1079	e6 2b		inc $2b				inc 	freeMemory+1
.107b	20 8a 10	jsr $108a			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.107e					_AllocateSkipCarry:
.107e	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1080	d0 01		bne $1083			bne 	_AllocateSkipBorrow
.1082	ca		dex				dex
.1083					_AllocateSkipBorrow:
.1083	88		dey				dey
.1084	80 e3		bra $1069			bra 	_AllocateLoop
.1086					_AllocateExit:
.1086	fa		plx				plx 								; restore address
.1087	68		pla				pla
.1088	7a		ply				ply 								; restore Y
.1089	60		rts				rts
.108a					ClearCheckMemory:
.108a	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.108c	1a		inc a				inc 	a 							; spacing 2 pages
.108d	1a		inc a				inc 	a
.108e	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.1091	b0 01		bcs $1094			bcs  	_CCMError
.1093	60		rts				rts
.1094					_CCMError:
.1094	4c 36 28	jmp $2836		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1097					CommandDIM:
.1097	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1099	29 c0		and #$c0			and 	#$C0
.109b	c9 40		cmp #$40			cmp 	#$40
.109d	d0 39		bne $10d8			bne 	_CDSyntax
.109f	20 ff 2c	jsr $2cff			jsr 	VARGetInfo 					; get information
.10a2	ad 31 06	lda $0631			lda 	VARType 					; check array.
.10a5	29 02		and #$02			and 	#2
.10a7	f0 2f		beq $10d8			beq 	_CDSyntax
.10a9	20 b1 2c	jsr $2cb1			jsr 	VARFind 					; does it already exist
.10ac	b0 2d		bcs $10db			bcs 	_CDExists
.10ae	20 5d 2c	jsr $2c5d			jsr 	VARCreate 					; create it - returns data ptr in XA
.10b1	da		phx				phx 								; save target address
.10b2	48		pha				pha
.10b3	ad 31 06	lda $0631			lda 	VARType 					; type ID.
.10b6	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b8	20 de 10	jsr $10de			jsr 	CreateArray 				; create array to XA
.10bb	84 26		sty $26				sty 	zTemp1 						; save Y
.10bd	7a		ply				ply 								; restore target to zTemp0
.10be	84 24		sty $24				sty 	zTemp0
.10c0	7a		ply				ply
.10c1	84 25		sty $25				sty 	zTemp0+1
.10c3	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.10c5	a0 01		ldy #$01			ldy 	#1
.10c7	8a		txa				txa
.10c8	91 24		sta ($24),y			sta 	(zTemp0),y
.10ca	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.10cc	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 				; check )
.10cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10d1	c8		iny				iny
.10d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10d4	f0 c1		beq $1097			beq 	CommandDIM
.10d6	88		dey				dey
.10d7	60		rts				rts
.10d8					_CDSyntax:
.10d8	4c 46 27	jmp $2746		jmp	ErrorV_syntax
.10db					_CDExists:
.10db	4c 0e 28	jmp $280e		jmp	ErrorV_redefine
.10de					CreateArray:
.10de	8d 03 05	sta $0503			sta 	CAType						; save type
.10e1	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10e4	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e8	f0 04		beq $10ee			beq 	_CATwoDimensions
.10ea	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ed	60		rts				rts
.10ee					_CATwoDimensions:
.10ee	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10f0	8d 05 05	sta $0505			sta 	CADim1+1
.10f3	a5 08		lda $08				lda 	IFR0+IM0
.10f5	8d 04 05	sta $0504			sta 	CADim1+0
.10f8	20 27 29	jsr $2927			jsr 	ERRCheckComma 				; check comma
.10fb	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10fe	5a		phy				phy 								; save Y position
.10ff	18		clc				clc 								; allocate the outer array of pointers.
.1100	ae 05 05	ldx $0505			ldx 	CADim1+1
.1103	ad 04 05	lda $0504			lda 	CADim1
.1106	20 79 11	jsr $1179			jsr 	CSAAllocate 				; allocate the outer array
.1109	da		phx				phx									; save this address on the stack
.110a	48		pha				pha
.110b	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.110d	85 28		sta $28				sta 	zTemp2
.110f					_CACreateSubLoop:
.110f	38		sec				sec
.1110	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create data array of required size.
.1113	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1115	91 28		sta ($28),y			sta 	(zTemp2),y
.1117	8a		txa				txa
.1118	c8		iny				iny
.1119	91 28		sta ($28),y			sta 	(zTemp2),y
.111b	18		clc				clc  								; next slot.
.111c	a5 28		lda $28				lda 	zTemp2
.111e	69 02		adc #$02			adc 	#2
.1120	85 28		sta $28				sta 	zTemp2
.1122	90 02		bcc $1126			bcc 	_CACNoCarry
.1124	e6 29		inc $29				inc 	zTemp2+1
.1126					_CACNoCarry:
.1126	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1129	d0 03		bne $112e			bne 	_CACNoBorrow
.112b	ce 05 05	dec $0505			dec 	CADim1+1
.112e					_CACNoBorrow:
.112e	ce 04 05	dec $0504			dec 	CADim1
.1131	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1134	10 d9		bpl $110f			bpl 	_CACreateSubLoop
.1136	68		pla				pla
.1137	fa		plx				plx
.1138	7a		ply				ply
.1139	60		rts				rts
.113a					CreateSingleArray:
.113a	5a		phy				phy
.113b	38		sec				sec 								; allocate memory block all zeros.
.113c	a5 08		lda $08				lda 	IFR0+IM0
.113e	a6 09		ldx $09				ldx 	IFR0+IM1
.1140	20 79 11	jsr $1179			jsr 	CSAAllocate
.1143	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1146	f0 2f		beq $1177			beq 	_CSANoInit
.1148	da		phx				phx 								; save address of new array
.1149	48		pha				pha
.114a	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.114c	86 25		stx $25				stx 	zTemp0+1
.114e	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1150	b1 24		lda ($24),y			lda 	(zTemp0),y
.1152	a8		tay				tay
.1153	b2 24		lda ($24)			lda 	(zTemp0)
.1155	aa		tax				tax
.1156					_CSAEraseString:
.1156	5a		phy				phy
.1157	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1159	a9 80		lda #$80			lda 	#$80
.115b	91 24		sta ($24),y			sta 	(zTemp0),y
.115d	7a		ply				ply
.115e	18		clc				clc 								; add 4 to next slot.
.115f	a5 24		lda $24				lda 	zTemp0
.1161	69 04		adc #$04			adc 	#4
.1163	85 24		sta $24				sta 	zTemp0
.1165	90 02		bcc $1169			bcc 	_CSAENoCarry
.1167	e6 25		inc $25				inc 	zTemp0+1
.1169					_CSAENoCarry:
.1169	e0 00		cpx #$00			cpx 	#0
.116b	d0 01		bne $116e			bne 	_CSANoBorrow
.116d	88		dey				dey
.116e					_CSANoBorrow:
.116e	ca		dex				dex
.116f	d0 e5		bne $1156			bne 	_CSAEraseString
.1171	c0 00		cpy #$00			cpy 	#0
.1173	d0 e1		bne $1156			bne 	_CSAEraseString
.1175	68		pla				pla
.1176	fa		plx				plx
.1177					_CSANoInit:
.1177	7a		ply				ply
.1178	60		rts				rts
.1179					CSAAllocate:
.1179	08		php				php 								; save type flag.
.117a	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.117b	d0 01		bne $117e			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.117d	e8		inx				inx
.117e					_CSAANoCarry:
.117e	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1180	b0 2e		bcs $11b0			bcs 	_CSARange
.1182	28		plp				plp 								; restore type flag
.1183	08		php				php 								; save it back again.
.1184	da		phx				phx 								; save size.
.1185	48		pha				pha
.1186	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.1188	90 03		bcc $118d			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.118a	0a		asl a				asl 	a
.118b	26 25		rol $25				rol 	zTemp0+1
.118d					_CSAATimes2:
.118d	0a		asl a				asl 	a
.118e	26 25		rol $25				rol 	zTemp0+1
.1190	18		clc				clc
.1191	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1193	90 02		bcc $1197			bcc 	_CSAANoCarry2
.1195	e6 25		inc $25				inc 	zTemp0+1
.1197					_CSAANoCarry2:
.1197	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.1199	20 61 10	jsr $1061			jsr 	AllocateMemory 				; allocate memory to XA
.119c	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.119e	85 24		sta $24				sta 	zTemp0
.11a0	68		pla				pla  								; write element count to first 2 bytes
.11a1	92 24		sta ($24)			sta 	(zTemp0)
.11a3	68		pla				pla 								; msb of element count
.11a4	28		plp				plp 								; CC if pointer array
.11a5	b0 02		bcs $11a9			bcs 	_CSAAIsData
.11a7	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a9					_CSAAIsData:
.11a9	a0 01		ldy #$01			ldy 	#1
.11ab	91 24		sta ($24),y			sta 	(zTemp0),y
.11ad	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.11af	60		rts				rts
.11b0					_CSARange:
.11b0	4c 57 27	jmp $2757		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11b3					Command_Doke:
.11b3	38		sec				sec
.11b4	80 01		bra $11b7			bra 	DPCommon
.11b6					Command_Poke:
.11b6	18		clc				clc
.11b7					DPCommon:
.11b7	08		php				php 								; CS if DOKE
.11b8	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; address
.11bb	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11bd	48		pha				pha
.11be	a5 09		lda $09				lda 	IFR0+IM1
.11c0	48		pha				pha
.11c1	20 27 29	jsr $2927			jsr 	ERRCheckComma 				; [dp]oke address,data
.11c4	20 69 17	jsr $1769			jsr 	EXPEvalInteger16
.11c7	68		pla				pla 								; get address back
.11c8	85 25		sta $25				sta 	zTemp0+1
.11ca	68		pla				pla
.11cb	85 24		sta $24				sta 	zTemp0
.11cd	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.11cf	92 24		sta ($24)			sta 	(zTemp0)
.11d1	28		plp				plp 								; done if CC
.11d2	90 08		bcc $11dc			bcc 	_DPExit
.11d4	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.11d5	a5 09		lda $09				lda 	IFR0+IM1
.11d7	a0 01		ldy #$01			ldy 	#1
.11d9	91 24		sta ($24),y			sta 	(zTemp0),y
.11db	7a		ply				ply
.11dc					_DPExit:
.11dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11dd					Command_GOTO:
.11dd	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; get line number
.11e0					GotoR0:
.11e0	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11e3	85 19		sta $19				sta 	codePtr+1
.11e5	64 18		stz $18				stz 	codePtr
.11e7					_GOSearch:
.11e7	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e9	f0 1f		beq $120a			beq 	_GOError
.11eb	a0 01		ldy #$01			ldy 	#1 							; found line #
.11ed	b1 18		lda ($18),y			lda 	(codePtr),y
.11ef	c5 08		cmp $08				cmp 	IFR0+IM0
.11f1	d0 0a		bne $11fd			bne 	_GONext
.11f3	c8		iny				iny
.11f4	b1 18		lda ($18),y			lda 	(codePtr),y
.11f6	c5 09		cmp $09				cmp 	IFR0+IM1
.11f8	d0 03		bne $11fd			bne 	_GONext
.11fa	4c 23 15	jmp $1523			jmp 	RUNNewLine
.11fd					_GONext:
.11fd	18		clc				clc 								; advance to next line.
.11fe	b2 18		lda ($18)			lda 	(codePtr)
.1200	65 18		adc $18				adc 	codePtr
.1202	85 18		sta $18				sta 	codePtr
.1204	90 e1		bcc $11e7			bcc 	_GOSearch
.1206	e6 19		inc $19				inc 	codePtr+1
.1208	80 dd		bra $11e7			bra 	_GOSearch
.120a					_GOError:
.120a	4c db 28	jmp $28db		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.120d					Command_Input:
.120d	a9 ff		lda #$ff			lda 	#$FF
.120f	8d 06 05	sta $0506			sta 	InputFlag
.1212	80 03		bra $1217			bra 	Command_IP_Main
.1214					Command_Print:
.1214	9c 06 05	stz $0506			stz 	InputFlag
.1217					Command_IP_Main:
.1217	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1218					_CPLoop:
.1218	08		php				php 								; save last action flag
.1219	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.121b	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.121d	f0 48		beq $1267			beq 	_CPExit 					; without consuming
.121f	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1221	f0 44		beq $1267			beq 	_CPExit
.1223	68		pla				pla 								; throw last action flag
.1224	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.1226	c8		iny				iny
.1227	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1229	f0 39		beq $1264			beq 	_CPContinueWithSameLine
.122b	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.122d	f0 30		beq $125f			beq 	_CPTab
.122f	88		dey				dey 								; undo the get.
.1230	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.1233	10 0b		bpl $1240			bpl	 	_CPNotInput
.1235	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1237	c9 40		cmp #$40			cmp 	#$40
.1239	d0 05		bne $1240			bne 	_CPNotInput
.123b	20 70 12	jsr $1270			jsr 	_CPInputCode 				; input code
.123e	80 d7		bra $1217			bra 	Command_IP_Main 			; and go round again.
.1240					_CPNotInput:
.1240	20 17 17	jsr $1717			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1243	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1245	10 0e		bpl $1255			bpl 	_CPNumber
.1247	5a		phy				phy
.1248	18		clc				clc 								; string address to YX
.1249	a5 08		lda $08				lda 	IFR0+IM0
.124b	aa		tax				tax
.124c	a5 09		lda $09				lda 	IFR0+IM1
.124e	a8		tay				tay
.124f	20 a4 12	jsr $12a4			jsr 	CPPrintYX 					; print YX
.1252	7a		ply				ply
.1253	80 c2		bra $1217			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1255					_CPNumber:
.1255	5a		phy				phy
.1256	20 b9 31	jsr $31b9			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1259	20 a4 12	jsr $12a4			jsr 	CPPrintYX 					; print string at YX
.125c	7a		ply				ply
.125d	80 b8		bra $1217			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.125f					_CPTab:
.125f	a9 09		lda #$09			lda 	#9 							; print TAB
.1261	20 bc 12	jsr $12bc			jsr 	CPPrintA
.1264					_CPContinueWithSameLine:
.1264	38		sec				sec 								; loop round with carry set, which
.1265	80 b1		bra $1218			bra 	_CPLoop 					; will inhibit final CR
.1267					_CPExit:
.1267	28		plp				plp 								; get last action flag
.1268	b0 05		bcs $126f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.126a	a9 0d		lda #$0d			lda 	#13 						; print new line
.126c	20 bc 12	jsr $12bc			jsr 	CPPrintA
.126f					_CPExit2:
.126f	60		rts				rts
.1270					_CPInputCode:
.1270	20 df 17	jsr $17df			jsr 	EXPTermR0 					; get the term.
.1273	5a		phy				phy 								; save position
.1274	20 b9 12	jsr $12b9			jsr 	CPInputA					; input a line to YX
.1277	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1279	30 18		bmi $1293			bmi 	_CPInputString
.127b	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.127d	48		pha				pha
.127e	a5 09		lda $09				lda 	IFR0+IM1
.1280	48		pha				pha
.1281	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.1283	84 25		sty $25				sty 	zTemp0+1
.1285	20 c9 1a	jsr $1ac9			jsr 	VALConversionZTemp0
.1288	68		pla				pla 								; do the assign.
.1289	85 25		sta $25				sta 	zTemp0+1
.128b	68		pla				pla
.128c	85 24		sta $24				sta 	zTemp0
.128e	20 e4 12	jsr $12e4			jsr 	AssignNumber
.1291	7a		ply				ply
.1292	60		rts				rts
.1293					_CPInputString:
.1293	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1295	85 24		sta $24				sta 	zTemp0
.1297	a5 09		lda $09				lda 	IFR0+IM1
.1299	85 25		sta $25				sta 	zTemp0+1
.129b	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.129d	84 09		sty $09				sty 	IFR0+IM1
.129f	20 fb 12	jsr $12fb			jsr 	AssignString 				; assign the string
.12a2	7a		ply				ply 								; exit
.12a3	60		rts				rts
.12a4					CPPrintYX:
.12a4	86 24		stx $24				stx 	zTemp0
.12a6	84 25		sty $25				sty 	zTemp0+1
.12a8	b2 24		lda ($24)			lda 	(zTemp0)
.12aa	aa		tax				tax
.12ab	f0 0b		beq $12b8			beq 	_CPPrintExit
.12ad	a0 01		ldy #$01			ldy 	#1
.12af					_CPPrintAYXLoop:
.12af	b1 24		lda ($24),y			lda 	(zTemp0),y
.12b1	20 bc 12	jsr $12bc			jsr 	CPPrintA
.12b4	c8		iny				iny
.12b5	ca		dex				dex
.12b6	d0 f7		bne $12af			bne 	_CPPrintAYXLoop
.12b8					_CPPrintExit:
.12b8	60		rts				rts
.12b9					CPInputA:
.12b9	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.12bc					CPPrintA:
.12bc	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12bf					CommandLET:
.12bf	20 df 17	jsr $17df			jsr 	EXPTermR0 					; get term
.12c2	90 6f		bcc $1333			bcc 	CLError 					; must be a reference term.
.12c4	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12c6	48		pha				pha
.12c7	a5 09		lda $09				lda 	IFR0+IM1
.12c9	48		pha				pha
.12ca	a5 0b		lda $0b				lda 	IFR0+IExp
.12cc	48		pha				pha
.12cd	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12cf	20 2f 29	jsr $292f			jsr 	ERRCheckA
.12d2	20 17 17	jsr $1717			jsr 	EXPEvaluateExpression 		; right hand side.
.12d5	68		pla				pla 								; type of l-expr
.12d6	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d8	30 5c		bmi $1336			bmi 	CLType
.12da	fa		plx				plx 	 							; pop target address to zTemp0
.12db	86 25		stx $25				stx 	zTemp0+1
.12dd	fa		plx				plx
.12de	86 24		stx $24				stx 	zTemp0
.12e0					AssignData:
.12e0	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12e2	30 17		bmi $12fb			bmi 	AssignString
.12e4					AssignNumber:
.12e4	5a		phy				phy
.12e5	a0 03		ldy #$03			ldy 	#3
.12e7	a5 0b		lda $0b				lda 	IFR0+IExp
.12e9	91 24		sta ($24),y			sta 	(zTemp0),y
.12eb	88		dey				dey
.12ec	a5 0a		lda $0a				lda 	IFR0+IM2
.12ee	91 24		sta ($24),y			sta 	(zTemp0),y
.12f0	88		dey				dey
.12f1	a5 09		lda $09				lda 	IFR0+IM1
.12f3	91 24		sta ($24),y			sta 	(zTemp0),y
.12f5	a5 08		lda $08				lda 	IFR0+IM0
.12f7	92 24		sta ($24)			sta 	(zTemp0)
.12f9	7a		ply				ply
.12fa	60		rts				rts
.12fb					AssignString:
.12fb	5a		phy				phy
.12fc	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12fe	b1 24		lda ($24),y			lda 	(zTemp0),y
.1300	12 24		ora ($24)			ora 	(zTemp0)
.1302	f0 23		beq $1327			beq 	_CLConcreteString
.1304	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1306	85 26		sta $26				sta 	zTemp1
.1308	b1 24		lda ($24),y			lda 	(zTemp0),y
.130a	85 27		sta $27				sta 	zTemp1+1
.130c	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.130e	38		sec				sec 								; we want 3 for slot size, status, string size.
.130f	e9 03		sbc #$03			sbc 	#3
.1311	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1313	90 12		bcc $1327			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1315	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1317	1a		inc a				inc 	a
.1318	aa		tax				tax
.1319	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.131b					_CLReplaceString:
.131b	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.131d	c8		iny				iny
.131e	c8		iny				iny
.131f	91 26		sta ($26),y			sta 	(zTemp1),y
.1321	88		dey				dey
.1322	ca		dex				dex
.1323	d0 f6		bne $131b			bne 	_CLReplaceString
.1325	80 0a		bra $1331			bra 	_CLExit
.1327					_CLConcreteString:
.1327	20 a1 29	jsr $29a1			jsr 	StringConcrete  			; concreted string in XA.
.132a	a0 01		ldy #$01			ldy 	#1 							; store the address
.132c	92 24		sta ($24)			sta 	(zTemp0)
.132e	8a		txa				txa
.132f	91 24		sta ($24),y			sta 	(zTemp0),y
.1331					_CLExit:
.1331	7a		ply				ply
.1332	60		rts				rts
.1333					CLError:
.1333	4c 79 28	jmp $2879		jmp	ErrorV_variable
.1336					CLType:
.1336	4c 76 27	jmp $2776		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1339					Command_LIST:
.1339	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.133c	9c 08 05	stz $0508			stz 	CLFrom+1
.133f	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1341	c9 99		cmp #$99			cmp 	#PR_COMMA
.1343	f0 1d		beq $1362			beq 	_CLToLine
.1345	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1347	f0 37		beq $1380			beq 	_CLDefaultTo
.1349	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.134c	a5 08		lda $08				lda 	IFR0+IM0
.134e	8d 07 05	sta $0507			sta 	CLFrom
.1351	8d 09 05	sta $0509			sta 	CLTo
.1354	a5 09		lda $09				lda 	IFR0+IM1
.1356	8d 08 05	sta $0508			sta 	CLFrom+1
.1359	8d 0a 05	sta $050a			sta 	CLTo+1
.135c	b1 18		lda ($18),y			lda 	(codePtr),y
.135e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1360	f0 26		beq $1388			beq 	_CLList
.1362					_CLToLine:
.1362	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1364	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1366	f0 18		beq $1380			beq 	_CLDefaultTo
.1368	20 27 29	jsr $2927			jsr 	ERRCheckComma 				; sep comma
.136b	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.136d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.136f	f0 0f		beq $1380			beq 	_CLDefaultTo
.1371	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; there's a To value.
.1374	a5 08		lda $08				lda 	IFR0+IM0
.1376	8d 09 05	sta $0509			sta 	CLTo
.1379	a5 09		lda $09				lda 	IFR0+IM1
.137b	8d 0a 05	sta $050a			sta 	CLTo+1
.137e	80 08		bra $1388			bra 	_CLList
.1380					_CLDefaultTo:
.1380	a9 ff		lda #$ff			lda 	#$FF
.1382	8d 09 05	sta $0509			sta 	CLTo
.1385	8d 0a 05	sta $050a			sta 	CLTo+1
.1388					_CLList:
.1388	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.138b	85 19		sta $19				sta 	codePtr+1
.138d	64 18		stz $18				stz 	codePtr
.138f	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1391	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1393	20 5b 1f	jsr $1f5b			jsr 	TOKSetDetokeniseOutput
.1396					_CLLoop:
.1396	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1398	f0 51		beq $13eb			beq 	_CLExit
.139a	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.139d	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.13a0	d0 4c		bne $13ee			bne 	_CLBreak
.13a2	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13a4	20 f1 13	jsr $13f1			jsr 	_CLCompareLine
.13a7	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a9	f0 33		beq $13de			beq 	_CLNext
.13ab	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13ad	20 f1 13	jsr $13f1			jsr 	_CLCompareLine
.13b0	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13b2	f0 2a		beq $13de			beq 	_CLNext
.13b4	a0 02		ldy #$02			ldy 	#2 							; print line #
.13b6	b1 18		lda ($18),y			lda 	(codePtr),y
.13b8	aa		tax				tax
.13b9	88		dey				dey
.13ba	b1 18		lda ($18),y			lda 	(codePtr),y
.13bc	20 76 2b	jsr $2b76			jsr 	WriteIntXA
.13bf					_CLSpacing:
.13bf	a9 20		lda #$20			lda 	#32
.13c1	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.13c4	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.13c7	e0 06		cpx #$06			cpx 	#6
.13c9	d0 f4		bne $13bf			bne 	_CLSpacing
.13cb	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13cd	a5 18		lda $18				lda 	codePtr
.13cf	18		clc				clc
.13d0	69 03		adc #$03			adc 	#3
.13d2	aa		tax				tax
.13d3	90 01		bcc $13d6			bcc 	_CLNoCarry2
.13d5	c8		iny				iny
.13d6					_CLNoCarry2:
.13d6	20 00 1f	jsr $1f00			jsr 	TOKDetokenise
.13d9	a9 0d		lda #$0d			lda 	#13	 						; next line
.13db	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.13de					_CLNext:
.13de	18		clc				clc 								; advance to next line.
.13df	b2 18		lda ($18)			lda 	(codePtr)
.13e1	65 18		adc $18				adc 	codePtr
.13e3	85 18		sta $18				sta 	codePtr
.13e5	90 02		bcc $13e9			bcc 	_CLNoCarry
.13e7	e6 19		inc $19				inc 	codePtr+1
.13e9					_CLNoCarry:
.13e9	80 ab		bra $1396			bra 	_CLLoop
.13eb					_CLExit:
.13eb	4c 95 2b	jmp $2b95			jmp 	WarmStart
.13ee					_CLBreak:
.13ee	4c d1 28	jmp $28d1		jmp	ErrorV_break
.13f1					_CLCompareLine:
.13f1	a0 01		ldy #$01			ldy 	#1
.13f3	38		sec				sec
.13f4	b1 18		lda ($18),y			lda 	(codePtr),y
.13f6	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f9	85 24		sta $24				sta 	zTemp0
.13fb	c8		iny				iny
.13fc	b1 18		lda ($18),y			lda 	(codePtr),y
.13fe	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.1401	90 0a		bcc $140d			bcc 	_CLIsNegative
.1403	d0 05		bne $140a			bne 	_CLIsPositive
.1405	a5 24		lda $24				lda 	zTemp0
.1407	d0 01		bne $140a			bne 	_CLIsPositive
.1409	60		rts				rts
.140a					_CLIsPositive:
.140a	a9 01		lda #$01			lda 	#1
.140c	60		rts				rts
.140d					_CLIsNegative:
.140d	a9 ff		lda #$ff			lda 	#255
.140f	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1410					Command_NEW:
.1410	20 09 21	jsr $2109			jsr 	PGMNewProgram 				; Reset current program
.1413	20 44 10	jsr $1044			jsr 	ClearCode 					; Run CLR
.1416	4c 7c 15	jmp $157c			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1419					Command_READ:
.1419	20 df 17	jsr $17df			jsr 	EXPTermR0 					; get term to R0
.141c	90 35		bcc $1453			bcc 	_CRSyntax 					; fail if not a reference.
.141e	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1420	48		pha				pha
.1421	a5 09		lda $09				lda 	IFR0+IM1
.1423	48		pha				pha
.1424	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1426	48		pha				pha
.1427	20 f0 14	jsr $14f0			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.142a	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.142d	d0 27		bne $1456			bne 	_CRHaveData  				; forward for the next one.
.142f					_CRNextLine:
.142f	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1431	f0 1a		beq $144d			beq 	_CRNoData
.1433					_CRKeepSearching:
.1433	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1435	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1437	20 56 26	jsr $2656			jsr 	ScanForward
.143a	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.143c	f0 18		beq $1456			beq 	_CRHaveData 				; found it
.143e	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1440	18		clc				clc 								; try the next line, keep going.
.1441	b2 18		lda ($18)			lda 	(codePtr)
.1443	65 18		adc $18				adc 	codePtr
.1445	85 18		sta $18				sta 	codePtr
.1447	90 e6		bcc $142f			bcc 	_CRNextLine
.1449	e6 19		inc $19				inc 	codePtr+1
.144b	80 e2		bra $142f			bra 	_CRNextLine
.144d					_CRNoData:
.144d	4c fe 27	jmp $27fe		jmp	ErrorV_data
.1450					_CLType:
.1450	4c 76 27	jmp $2776		jmp	ErrorV_type
.1453					_CRSyntax:
.1453	4c 46 27	jmp $2746		jmp	ErrorV_syntax
.1456					_CRHaveData:
.1456	20 17 17	jsr $1717			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1459	68		pla				pla 								; type of l-expr
.145a	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.145c	30 f2		bmi $1450			bmi 	_CLType
.145e	68		pla				pla 								; restore address
.145f	85 25		sta $25				sta 	zTemp0+1
.1461	68		pla				pla
.1462	85 24		sta $24				sta 	zTemp0
.1464	20 e0 12	jsr $12e0			jsr 	AssignData 					; write R0 there.
.1467	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.146a	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.146c	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.146e	d0 04		bne $1474			bne 	_CRSwapBack
.1470	c8		iny				iny 								; consume comma
.1471	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.1474					_CRSwapBack:
.1474	20 f0 14	jsr $14f0			jsr 	SwapCodeDataPointers		; swap them back.
.1477	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1479	c8		iny				iny
.147a	c9 99		cmp #$99			cmp 	#PR_COMMA
.147c	f0 9b		beq $1419			beq 	Command_READ 				; if so go round again.
.147e	88		dey				dey 								; unpick get.
.147f	60		rts				rts
.1480					Command_DATA:
.1480	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1482	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1484	20 56 26	jsr $2656			jsr 	ScanForward
.1487	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1489	d0 01		bne $148c			bne 	_CDNotEOL
.148b	88		dey				dey
.148c					_CDNotEOL:
.148c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.148d					Command_REM:
.148d					Command_REM2:
.148d	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.148f	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1491	d0 06		bne $1499			bne 	_CRExit
.1493	c8		iny				iny 								; skip over it, it's a comment.
.1494	98		tya				tya
.1495	38		sec				sec
.1496	71 18		adc ($18),y			adc 	(codePtr),y
.1498	a8		tay				tay
.1499					_CRExit:
.1499	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.149a					Command_RENUMBER:
.149a	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.149c	85 08		sta $08				sta 	IM0+IFR0
.149e	a9 03		lda #$03			lda 	#1000 >> 8
.14a0	85 09		sta $09				sta 	IM1+IFR0
.14a2	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.14a4	c9 9b		cmp #$9b			cmp 	#PR_COLON
.14a6	f0 07		beq $14af			beq 	_CRIsDefault
.14a8	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.14aa	f0 03		beq $14af			beq 	_CRIsDefault
.14ac	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; get other start
.14af					_CRIsDefault:
.14af	5a		phy				phy
.14b0	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.14b2	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.14b5	85 25		sta $25				sta 	zTemp0+1
.14b7					_CRRenumberLoop:
.14b7	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.14b9	f0 21		beq $14dc			beq 	_CRExit
.14bb	18		clc				clc
.14bc	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.14be	a5 08		lda $08				lda 	IFR0+IM0
.14c0	91 24		sta ($24),y			sta 	(zTemp0),y
.14c2	69 0a		adc #$0a			adc 	#10
.14c4	85 08		sta $08				sta 	IFR0+IM0
.14c6	c8		iny				iny
.14c7	a5 09		lda $09				lda 	IFR0+IM1
.14c9	91 24		sta ($24),y			sta 	(zTemp0),y
.14cb	69 00		adc #$00			adc 	#0
.14cd	85 09		sta $09				sta 	IFR0+IM1
.14cf	18		clc				clc 								; next line.
.14d0	b2 24		lda ($24)			lda 	(zTemp0)
.14d2	65 24		adc $24				adc 	zTemp0
.14d4	85 24		sta $24				sta 	zTemp0
.14d6	90 df		bcc $14b7			bcc 	_CRRenumberLoop
.14d8	e6 25		inc $25				inc 	zTemp0+1
.14da	80 db		bra $14b7			bra 	_CRRenumberLoop
.14dc					_CRExit:
.14dc	7a		ply				ply
.14dd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.14de					S
.14de					Command_RESTORE:
.14de	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14e1	8d 0c 05	sta $050c			sta 	dataPtr+1
.14e4	9c 0b 05	stz $050b			stz 	dataPtr
.14e7	a9 03		lda #$03			lda 	#3 							; position start of line
.14e9	8d 0d 05	sta $050d			sta 	dataPos
.14ec	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14ef	60		rts				rts
.14f0					SwapCodeDataPointers:
.14f0	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14f3	a6 18		ldx $18				ldx 	codePtr
.14f5	85 18		sta $18				sta 	codePtr
.14f7	8e 0b 05	stx $050b			stx 	dataPtr
.14fa	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14fd	a6 19		ldx $19				ldx 	codePtr+1
.14ff	85 19		sta $19				sta 	codePtr+1
.1501	8e 0c 05	stx $050c			stx 	dataPtr+1
.1504	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.1507	8c 0d 05	sty $050d			sty 	dataPos
.150a	a8		tay				tay
.150b	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.150c					Command_RUN:
.150c	20 44 10	jsr $1044			jsr 	ClearCode					; clear everything out.
.150f	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1512	85 19		sta $19				sta 	codePtr+1
.1514	64 18		stz $18				stz 	codePtr
.1516	80 0b		bra $1523			bra 	RUNNewLine
.1518					RUNEndOfLine:
.1518	18		clc				clc 								; advance to next line.
.1519	b2 18		lda ($18)			lda 	(codePtr)
.151b	65 18		adc $18				adc 	codePtr
.151d	85 18		sta $18				sta 	codePtr
.151f	90 02		bcc $1523			bcc 	_RELNoCarry
.1521	e6 19		inc $19				inc 	codePtr+1
.1523					_RELNoCarry:
.1523					RUNNewLine:
.1523	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1525	9a		txs				txs
.1526	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.1528	f0 52		beq $157c			beq 	Command_END
.152a	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.152c	b1 18		lda ($18),y			lda 	(codePtr),y
.152e	8d 2c 06	sta $062c			sta 	ERRLine
.1531	c8		iny				iny
.1532	b1 18		lda ($18),y			lda 	(codePtr),y
.1534	8d 2d 06	sta $062d			sta 	ERRLine+1
.1537	c8		iny				iny 								; offset into codePtr for start of line.
.1538					RUNNewCommand:
.1538	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.153b	ce 10 05	dec $0510			dec 	checkCounter
.153e	d0 0a		bne $154a			bne 	_RNCNoCheck
.1540	5a		phy				phy 								; keyboard check.
.1541	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1544	7a		ply				ply
.1545	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1548	d0 1e		bne $1568			bne 	_RUNBreak
.154a					_RNCNoCheck:
.154a	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.154c	10 1d		bpl $156b			bpl		_RUNNotToken 				; probably an identifier
.154e	c8		iny				iny 								; consume token
.154f	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1551	f0 e5		beq $1538			beq 	RUNNewCommand
.1553	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1555	b0 0e		bcs $1565			bcs 	_RUNSyntax
.1557	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1559	90 0a		bcc $1565			bcc 	_RUNSyntax
.155b	0a		asl a				asl 	a 							; double into X.
.155c	aa		tax				tax
.155d	20 62 15	jsr $1562			jsr 	_RUNDispatchMain			; call the main dispatcher
.1560	80 d6		bra $1538			bra 	RUNNewCommand
.1562					_RUNDispatchMain:
.1562	7c de 1d	jmp ($1dde,x)			jmp 	(VectorTable,x)
.1565					_RUNSyntax:
.1565	4c 46 27	jmp $2746		jmp	ErrorV_syntax
.1568					_RUNBreak:
.1568	4c d1 28	jmp $28d1		jmp	ErrorV_break
.156b					_RUNNotToken:
.156b	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.156d	90 f6		bcc $1565			bcc 	_RUNSyntax
.156f	20 bf 12	jsr $12bf			jsr 	CommandLET 					; assignment
.1572	80 c4		bra $1538			bra 	RUNNewCommand 				; loop round.
.1574					Command_Shift_Handler:
.1574	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.1576	c8		iny				iny
.1577	0a		asl a				asl 	a 							; double into X
.1578	aa		tax				tax
.1579	7c de 1e	jmp ($1ede,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.157c					Command_END:
.157c	4c 95 2b	jmp $2b95			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.157f					Command_STOP:
.157f	4c ea 27	jmp $27ea		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1582					Command_Sys:
.1582	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; execution address
.1585	5a		phy				phy
.1586	ad 74 06	lda $0674			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1589	ae d0 06	ldx $06d0			ldx 	('X'-'A')*4 + FastVariables
.158c	ac d4 06	ldy $06d4			ldy 	('Y'-'A')*4 + FastVariables
.158f	20 94 15	jsr $1594			jsr 	_CSCallIFR0 				; call the code
.1592	7a		ply				ply
.1593	60		rts				rts
.1594					_CSCallIFR0:
.1594	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1597					NoExec01:
.1597					NoExec02:
.1597					NoExec03:
.1597					NoExec04:
.1597					NoExec05:
.1597					NoExec06:
.1597					NoExec07:
.1597					NoExec08:
.1597	4c 46 27	jmp $2746		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.159a					EXPBinAdd:
.159a	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.159c	30 6f		bmi $160d			bmi 	EXPConcatenate
.159e	a2 0c		ldx #$0c			ldx 	#IFR1
.15a0	4c b4 2d	jmp $2db4			jmp 	IFloatAdd
.15a3					EXPBinSub:
.15a3	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.15a5	30 3f		bmi $15e6			bmi 	EXPTypeError
.15a7	a2 0c		ldx #$0c			ldx 	#IFR1
.15a9	4c ad 2d	jmp $2dad			jmp 	IFloatSubtract
.15ac					EXPBinMul:
.15ac	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.15ae	30 36		bmi $15e6			bmi 	EXPTypeError
.15b0	a2 0c		ldx #$0c			ldx 	#IFR1
.15b2	4c 5e 2e	jmp $2e5e			jmp 	IFloatMultiply
.15b5					EXPBinFDiv:
.15b5	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.15b7	30 2d		bmi $15e6			bmi 	EXPTypeError
.15b9	a2 0c		ldx #$0c			ldx 	#IFR1
.15bb	20 e0 30	jsr $30e0			jsr 	IFloatDivideFloat
.15be	b0 0f		bcs $15cf			bcs 	EXPDZero
.15c0	60		rts				rts
.15c1					EXPBinIDiv:
.15c1	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.15c3	30 21		bmi $15e6			bmi 	EXPTypeError
.15c5	a2 0c		ldx #$0c			ldx 	#IFR1
.15c7	20 e0 30	jsr $30e0			jsr 	IFloatDivideFloat
.15ca	b0 03		bcs $15cf			bcs 	EXPDZero
.15cc	4c bd 30	jmp $30bd			jmp 	IFloatIntegerR0
.15cf					EXPDZero:
.15cf	4c bf 27	jmp $27bf		jmp	ErrorV_divzero
.15d2					EXPBinIMod:
.15d2	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.15d4	30 10		bmi $15e6			bmi 	EXPTypeError
.15d6	a2 0c		ldx #$0c			ldx 	#IFR1
.15d8	5a		phy				phy
.15d9	20 f3 2f	jsr $2ff3			jsr 	IFPreProcessBitwise 		; set up everything.
.15dc	d0 05		bne $15e3			bne 	EXPDRange
.15de	20 2c 2f	jsr $2f2c			jsr 	IFloatModulusInteger
.15e1	7a		ply				ply
.15e2	60		rts				rts
.15e3					EXPDRange:
.15e3	4c 57 27	jmp $2757		jmp	ErrorV_range
.15e6					EXPTypeError:
.15e6	4c 76 27	jmp $2776		jmp	ErrorV_type
.15e9					EXPBinAnd:
.15e9	24 0b		bit $0b				bit 	IFR0+IExp
.15eb	30 f9		bmi $15e6			bmi 	EXPTypeError
.15ed	a2 0c		ldx #$0c			ldx 	#IFR1
.15ef	20 ae 2f	jsr $2fae			jsr 	IFloatBitwiseAnd
.15f2	b0 ef		bcs $15e3			bcs 	EXPDRange
.15f4	60		rts				rts
.15f5					EXPBinOr:
.15f5	24 0b		bit $0b				bit 	IFR0+IExp
.15f7	30 ed		bmi $15e6			bmi 	EXPTypeError
.15f9	a2 0c		ldx #$0c			ldx 	#IFR1
.15fb	20 c5 2f	jsr $2fc5			jsr 	IFloatBitwiseOr
.15fe	b0 e3		bcs $15e3			bcs 	EXPDRange
.1600	60		rts				rts
.1601					EXPBinXor:
.1601	24 0b		bit $0b				bit 	IFR0+IExp
.1603	30 e1		bmi $15e6			bmi 	EXPTypeError
.1605	a2 0c		ldx #$0c			ldx 	#IFR1
.1607	20 dc 2f	jsr $2fdc			jsr 	IFloatBitwiseXor
.160a	b0 d7		bcs $15e3			bcs 	EXPDRange
.160c	60		rts				rts
.160d					EXPConcatenate:
.160d	18		clc				clc
.160e	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.1610	72 0c		adc ($0c)			adc 	(IFR1)
.1612	b0 2d		bcs $1641			bcs 	_EXPCError 					; far too long.
.1614	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.1616	da		phx				phx
.1617	a6 09		ldx $09				ldx 	IFR0+1
.1619	da		phx				phx
.161a	20 14 2a	jsr $2a14			jsr 	StringTempAllocate 			; allocate string, set up return
.161d	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.161f	a5 0c		lda $0c				lda 	IFR1
.1621	20 2a 16	jsr $162a			jsr 	_EXPCCopyXA
.1624	fa		plx				plx 								; copy second string
.1625	68		pla				pla
.1626	20 2a 16	jsr $162a			jsr 	_EXPCCopyXA
.1629	60		rts				rts
.162a					_EXPCCopyXA:
.162a	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.162c	85 24		sta $24				sta 	zTemp0
.162e	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.1630	f0 0e		beq $1640			beq 	_EXPCCExit 					; nothing in string
.1632	aa		tax				tax 								; count
.1633	5a		phy				phy 								; start position
.1634	a0 01		ldy #$01			ldy 	#1
.1636					_EXPCCLoop:
.1636	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.1638	20 49 2a	jsr $2a49			jsr 	StringTempWrite
.163b	c8		iny				iny
.163c	ca		dex				dex
.163d	d0 f7		bne $1636			bne 	_EXPCCLoop
.163f	7a		ply				ply
.1640					_EXPCCExit:
.1640	60		rts				rts
.1641					_EXPCError:
.1641	4c 63 28	jmp $2863		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1644					EXPReturnTrue:
.1644	a2 08		ldx #$08			ldx 	#IFR0
.1646	a9 01		lda #$01			lda 	#1
.1648	20 be 33	jsr $33be			jsr 	IFloatSetByte
.164b	20 c7 33	jsr $33c7			jsr 	IFloatNegate
.164e	60		rts				rts
.164f					EXPReturnFalse:
.164f	a2 08		ldx #$08			ldx 	#IFR0
.1651	4c bc 33	jmp $33bc			jmp 	IFloatSetZero
.1654					EXPCompareEqual:
.1654	20 8a 16	jsr $168a			jsr 	EXPCompareBaseCode
.1657	c9 00		cmp #$00			cmp 	#0
.1659	f0 e9		beq $1644			beq 	EXPReturnTrue
.165b	80 f2		bra $164f			bra 	EXPReturnFalse
.165d					EXPCompareLess:
.165d	20 8a 16	jsr $168a			jsr 	EXPCompareBaseCode
.1660	c9 ff		cmp #$ff			cmp 	#$FF
.1662	f0 e0		beq $1644			beq 	EXPReturnTrue
.1664	80 e9		bra $164f			bra 	EXPReturnFalse
.1666					EXPCompareGreater:
.1666	20 8a 16	jsr $168a			jsr 	EXPCompareBaseCode
.1669	c9 01		cmp #$01			cmp 	#1
.166b	f0 d7		beq $1644			beq 	EXPReturnTrue
.166d	80 e0		bra $164f			bra 	EXPReturnFalse
.166f					EXPCompareNotEqual:
.166f	20 8a 16	jsr $168a			jsr 	EXPCompareBaseCode
.1672	c9 00		cmp #$00			cmp 	#0
.1674	d0 ce		bne $1644			bne 	EXPReturnTrue
.1676	80 d7		bra $164f			bra 	EXPReturnFalse
.1678					EXPCompareLessEqual:
.1678	20 8a 16	jsr $168a			jsr 	EXPCompareBaseCode
.167b	c9 01		cmp #$01			cmp 	#1
.167d	d0 c5		bne $1644			bne 	EXPReturnTrue
.167f	80 ce		bra $164f			bra 	EXPReturnFalse
.1681					EXPCompareGreaterEqual:
.1681	20 8a 16	jsr $168a			jsr 	EXPCompareBaseCode
.1684	c9 ff		cmp #$ff			cmp 	#$FF
.1686	d0 bc		bne $1644			bne 	EXPReturnTrue
.1688	80 c5		bra $164f			bra 	EXPReturnFalse
.168a					EXPCompareBaseCode:
.168a	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.168c	30 10		bmi $169e			bmi 	_EXCBCString
.168e	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1690	20 8b 30	jsr $308b			jsr 	IFloatCompare
.1693	a5 08		lda $08				lda 	IFR0+IM0
.1695	f0 06		beq $169d			beq 	_EXCBCExit 					; return 0 if zero
.1697	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1699	50 02		bvc $169d			bvc 	_EXCBCExit
.169b	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.169d					_EXCBCExit:
.169d	60		rts				rts
.169e					_EXCBCString:
.169e	5a		phy				phy
.169f	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.16a1	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.16a3	90 02		bcc $16a7			bcc 	_EXCBCSmaller
.16a5	b2 0c		lda ($0c)			lda 	(IFR1)
.16a7					_EXCBCSmaller:
.16a7	aa		tax				tax
.16a8	f0 0d		beq $16b7			beq 	_EXCBCMatches 				; if zero common length matches
.16aa	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.16ac					_EXCBCCheckSmallerMatches:
.16ac	c8		iny				iny 								; compare directly as far as common length
.16ad	38		sec				sec
.16ae	b1 0c		lda ($0c),y			lda 	(IFR1),y
.16b0	f1 08		sbc ($08),y			sbc 	(IFR0),y
.16b2	d0 08		bne $16bc			bne 	_EXCBCExit2
.16b4	ca		dex				dex
.16b5	d0 f5		bne $16ac			bne 	_EXCBCCheckSmallerMatches
.16b7					_EXCBCMatches:
.16b7	38		sec				sec
.16b8	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.16ba	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.16bc					_EXCBCExit2:
.16bc	7a		ply				ply
.16bd	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.16bf	f0 04		beq $16c5			beq 	_EXCBCReturn
.16c1	30 03		bmi $16c6			bmi 	_EXCBCFF 					; return $FF if <
.16c3	a9 01		lda #$01			lda 	#1 							; return 1 if >
.16c5					_EXCBCReturn:
.16c5	60		rts				rts
.16c6					_EXCBCFF:
.16c6	a9 ff		lda #$ff			lda 	#$FF
.16c8	60		rts				rts
.16c9					_EXCBCRange:
.16c9	4c 57 27	jmp $2757		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.16cc					EXPBinLeft:
.16cc	a9 ff		lda #$ff			lda 	#$FF
.16ce	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.16d1	4c d7 16	jmp $16d7			jmp 	EXPShiftCommon
.16d4					EXPBinRight:
.16d4	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.16d7					EXPShiftCommon:
.16d7	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.16d9	05 0f		ora $0f				ora 	IFR1+IExp
.16db	29 7f		and #$7f			and 	#$7F
.16dd	d0 35		bne $1714			bne 	_EXPSRange
.16df	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.16e1	29 e0		and #$e0			and 	#$E0
.16e3	05 09		ora $09				ora 	IFR0+IM1
.16e5	05 0a		ora $0a				ora 	IFR0+IM2
.16e7	d0 25		bne $170e			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.16e9	5a		phy				phy
.16ea	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16ec	29 1f		and #$1f			and 	#$1F
.16ee	f0 17		beq $1707			beq 	_EXPSExit 					; exit if zero
.16f0	a8		tay				tay
.16f1					_EXPSLoop:
.16f1	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16f3	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16f6	30 05		bmi $16fd			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16f8	20 eb 33	jsr $33eb			jsr 	IFloatShiftRight
.16fb	80 07		bra $1704			bra 	_EXPSContinue
.16fd					_EXPSShiftLeft:
.16fd	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.1700	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.1702	30 10		bmi $1714			bmi 	_EXPSRange
.1704					_EXPSContinue:
.1704	88		dey				dey 								; do it Y times
.1705	d0 ea		bne $16f1			bne 	_EXPSLoop
.1707					_EXPSExit:
.1707	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.1709	20 4d 33	jsr $334d			jsr 	IFloatCopyFromRegister
.170c	7a		ply				ply
.170d	60		rts				rts
.170e					_EXPSShiftZero:
.170e	a2 08		ldx #$08			ldx 	#IFR0
.1710	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.1713	60		rts				rts
.1714					_EXPSRange:
.1714	4c 57 27	jmp $2757		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1717					EXPEvaluateExpression:
.1717	a9 00		lda #$00			lda 	#0 							; current precedence
.1719					EXPEvaluateExpressionPrecedenceA:
.1719	48		pha				pha
.171a	20 94 17	jsr $1794			jsr 	EXPTermValueR0				; do first term.
.171d					_EELoop:
.171d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.171f	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1721	90 31		bcc $1754			bcc 	_EEExit
.1723	aa		tax				tax 								; access the precedence of the operator.
.1724	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1725	dd f2 1a	cmp $1af2,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1728	b0 2b		bcs $1755			bcs 	_EEExit2
.172a	48		pha				pha 								; save current precedence.
.172b	da		phx				phx 								; save operator
.172c	c8		iny				iny 								; consume operator
.172d	da		phx				phx
.172e	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.1730	20 0b 33	jsr $330b			jsr 	IFloatPushRx
.1733	fa		plx				plx
.1734	bd f2 1a	lda $1af2,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1737	20 19 17	jsr $1719			jsr 	EXPEvaluateExpressionPrecedenceA
.173a	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.173c	20 2c 33	jsr $332c			jsr 	IFloatPullRx
.173f	fa		plx				plx 								; operator
.1740	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.1742	45 0f		eor $0f				eor 	IFR1+IExp
.1744	30 08		bmi $174e			bmi 	_EEType
.1746					_EETypeOkay:
.1746	8a		txa				txa
.1747	0a		asl a				asl 	a 							; double -> X
.1748	aa		tax				tax
.1749	20 51 17	jsr $1751			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.174c	80 cf		bra $171d			bra 	_EELoop
.174e					_EEType:
.174e	4c 76 27	jmp $2776		jmp	ErrorV_type
.1751					_EECallBinary:
.1751	7c de 1d	jmp ($1dde,x)			jmp 	(VectorTable,x)
.1754					_EEExit:
.1754	68		pla				pla 								; throw precedence
.1755					_EEExit2:
.1755	18		clc				clc
.1756	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1757					EXPEvalNumber:
.1757	20 17 17	jsr $1717			jsr 	EXPEvaluateExpression 		; get a value
.175a	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.175c	30 01		bmi $175f			bmi 	EVUType
.175e	60		rts				rts
.175f					EVUType:
.175f	4c 76 27	jmp $2776		jmp	ErrorV_type
.1762					EXPEvalInteger:
.1762	20 57 17	jsr $1757			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1765	20 bd 30	jsr $30bd			jsr 	IFloatIntegerR0
.1768	60		rts				rts
.1769					EXPEvalInteger16:
.1769	20 62 17	jsr $1762			jsr 	EXPEvalInteger 				; get integer
.176c	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.176e	d0 21		bne $1791			bne 	EVURange
.1770	a6 09		ldx $09				ldx 	IFR0+IM1
.1772	a5 08		lda $08				lda 	IFR0+IM0
.1774	60		rts				rts
.1775					EXPEvalInteger8:
.1775	20 62 17	jsr $1762			jsr 	EXPEvalInteger 				; get integer
.1778	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.177a	05 09		ora $09				ora 	IFR0+IM1
.177c	d0 13		bne $1791			bne 	EVURange
.177e	a5 08		lda $08				lda 	IFR0+IM0
.1780	60		rts				rts
.1781					EXPEvalString:
.1781	20 17 17	jsr $1717			jsr 	EXPEvaluateExpression 		; get value
.1784	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1786	10 d7		bpl $175f			bpl 	EVUType
.1788	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.178a	86 25		stx $25				stx 	zTemp0+1
.178c	a5 08		lda $08				lda 	IFR0+IM0
.178e	85 24		sta $24				sta 	zTemp0
.1790	60		rts				rts
.1791					EVURange:
.1791	4c 57 27	jmp $2757		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1794					EXPTermValueR0:
.1794	20 df 17	jsr $17df			jsr 	EXPTermR0 					; get term
.1797	90 45		bcc $17de			bcc 	_ETVNotReference 			; exit if value.
.1799	5a		phy				phy
.179a	a0 03		ldy #$03			ldy 	#3 							; get type
.179c	b1 08		lda ($08),y			lda 	(IFR0),y
.179e	30 14		bmi $17b4			bmi 	_ETVDereferenceString
.17a0	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.17a2	88		dey				dey 								; get byte 2
.17a3	b1 08		lda ($08),y			lda 	(IFR0),y
.17a5	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.17a7	88		dey				dey 								; get byte 1
.17a8	b1 08		lda ($08),y			lda 	(IFR0),y
.17aa	aa		tax				tax 								; save in X so we can overwrite it
.17ab	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.17ad	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.17af	85 08		sta $08				sta 	IFR0+IM0
.17b1	7a		ply				ply
.17b2	18		clc				clc
.17b3	60		rts				rts
.17b4					_ETVDereferenceString:
.17b4	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.17b6	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.17b8	12 08		ora ($08)			ora 	(IFR0)
.17ba	f0 11		beq $17cd			beq 	_ETVNull 					; if so, return a fake NULL.
.17bc	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.17be	aa		tax				tax
.17bf	b2 08		lda ($08)			lda 	(IFR0)
.17c1	18		clc				clc 								; add two so points to actual string.
.17c2	69 02		adc #$02			adc 	#2
.17c4	90 01		bcc $17c7			bcc 	_EVDSNoCarry
.17c6	e8		inx				inx
.17c7					_EVDSNoCarry:
.17c7	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.17c9	85 08		sta $08				sta 	IFR0
.17cb	80 08		bra $17d5			bra 	_ETVFillExit 				; tidy up and exit.
.17cd					_ETVNull:
.17cd	a9 dd		lda #$dd			lda 	#_EVTNString & $FF
.17cf	85 08		sta $08				sta 	IFR0+IM0
.17d1	a9 17		lda #$17			lda 	#_EVTNString >> 8
.17d3	85 09		sta $09				sta 	IFR0+IM1
.17d5					_ETVFillExit:
.17d5	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.17d7	a9 80		lda #$80			lda 	#$80 						; set type to string.
.17d9	85 0b		sta $0b				sta 	IFR0+IExp
.17db	7a		ply				ply
.17dc	60		rts				rts
.17dd					_EVTNString:
>17dd	00						.byte 	0
.17de					_ETVNotReference:
.17de	60		rts				rts
.17df					EXPTermR0:
.17df	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.17e1	30 10		bmi $17f3			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.17e3	c8		iny				iny 								; consume element
.17e4	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.17e6	b0 08		bcs $17f0			bcs 	_ETMIdentifier
.17e8	20 1e 18	jsr $181e			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.17eb	20 51 18	jsr $1851			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17ee	18		clc				clc 								; return value ok
.17ef	60		rts				rts
.17f0					_ETMIdentifier:
.17f0	4c 55 2d	jmp $2d55			jmp 	VARCheckSimple 				; check variables, seperate module.
.17f3					_ETMIsUnaryOrMinus:
.17f3	c8		iny				iny 								; consume element
.17f4	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17f6	d0 0e		bne $1806			bne 	_ETMCheckUnary
.17f8	20 94 17	jsr $1794			jsr 	EXPTermValueR0 				; get a term to negate
.17fb	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17fd	20 c7 33	jsr $33c7			jsr 	IFloatNegate
.1800	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.1802	30 17		bmi $181b			bmi 	_ETMUnaryType				; if so error.
.1804	18		clc				clc
.1805	60		rts				rts
.1806					_ETMCheckUnary:
.1806	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1808	90 0e		bcc $1818			bcc 	_ETMUnarySyntax
.180a	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.180c	b0 0a		bcs $1818			bcs 	_ETMUnarySyntax
.180e	0a		asl a				asl 	a 							; make it into an index => X
.180f	aa		tax				tax
.1810	20 15 18	jsr $1815			jsr 	_ETMCallUnaryFunction 		; call the function
.1813	18		clc				clc 								; and return it.
.1814	60		rts				rts
.1815					_ETMCallUnaryFunction:
.1815	7c de 1d	jmp ($1dde,x)			jmp 	(VectorTable,x)
.1818					_ETMUnarySyntax:
.1818	4c 46 27	jmp $2746		jmp	ErrorV_syntax
.181b					_ETMUnaryType:
.181b	4c 76 27	jmp $2776		jmp	ErrorV_type
.181e					EXPExtractTokenisedInteger:
.181e	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.1820	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.1822	64 09		stz $09				stz 	IFR0+IM1
.1824	64 0a		stz $0a				stz 	IFR0+IM2
.1826					_ETMConstant:
.1826	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1828	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.182a	b0 24		bcs $1850			bcs 	_ETMCExit 					; no, exit.
.182c	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.182e	a5 09		lda $09				lda 	IFR0+IM1
.1830	85 0a		sta $0a				sta 	IFR0+IM2
.1832	a5 08		lda $08				lda 	IFR0+IM0
.1834	85 09		sta $09				sta 	IFR0+IM1
.1836	64 08		stz $08				stz 	IFR0+IM0
.1838	8a		txa				txa
.1839	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.183a	66 0a		ror $0a				ror 	IFR0+IM2
.183c	66 09		ror $09				ror 	IFR0+IM1
.183e	66 08		ror $08				ror 	IFR0+IM0
.1840	4a		lsr a				lsr 	a
.1841	66 0a		ror $0a				ror 	IFR0+IM2
.1843	66 09		ror $09				ror 	IFR0+IM1
.1845	66 08		ror $08				ror 	IFR0+IM0
.1847	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1849	11 18		ora ($18),y			ora 	(codePtr),y
.184b	85 08		sta $08				sta 	IFR0+IM0
.184d	c8		iny				iny 								; consume, loop back
.184e	80 d6		bra $1826			bra 	_ETMConstant
.1850					_ETMCExit:
.1850	60		rts				rts
.1851					EXPCheckDecimalFollows:
.1851	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1853	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1855	d0 19		bne $1870			bne 	_ETMCDExit
.1857	c8		iny				iny 								; consume token.
.1858	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.185a	5a		phy				phy									; save current position
.185b	48		pha				pha 								; save count of chars.
.185c	38		sec				sec 								; address into YX : y + codePtr+1
.185d	98		tya				tya
.185e	65 18		adc $18				adc 	codePtr
.1860	aa		tax				tax
.1861	a5 19		lda $19				lda 	codePtr+1
.1863	69 00		adc #$00			adc 	#0
.1865	a8		tay				tay
.1866	68		pla				pla 								; get count.
.1867	20 60 32	jsr $3260			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.186a	7a		ply				ply 								; go to next token.
.186b	98		tya				tya
.186c	38		sec				sec
.186d	71 18		adc ($18),y			adc 	(codePtr),y
.186f	a8		tay				tay
.1870					_ETMCDExit:
.1870	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1871					EXPUnaryAbs:
.1871	20 57 17	jsr $1757			jsr 	EXPEvalNumber 					; number to R0
.1874	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.1877	20 ff 2f	jsr $2fff			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.187a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.187b					EXPUnaryNull:
.187b	20 94 17	jsr $1794			jsr 	EXPTermValueR0
.187e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.187f					EXPUnaryAsc:
.187f	20 81 17	jsr $1781			jsr 	EXPEvalString 					; string to R0, zTemp0
.1882	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.1885	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.1887	f0 06		beq $188f			beq 	_EXAZero 						; if so return 0
.1889	5a		phy				phy 									; otherwise get first character
.188a	a0 01		ldy #$01			ldy 	#1
.188c	b1 24		lda ($24),y			lda 	(zTemp0),y
.188e	7a		ply				ply
.188f					_EXAZero:
.188f	a2 08		ldx #$08			ldx 	#IFR0
.1891	20 be 33	jsr $33be			jsr 	IFloatSetByte
.1894	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1895					EXPUnaryChr:
.1895	20 75 17	jsr $1775			jsr 	EXPEvalInteger8 				; expr
.1898	48		pha				pha 									; push on stack
.1899	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.189c	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.189e	20 14 2a	jsr $2a14			jsr 	StringTempAllocate
.18a1	68		pla				pla 									; get value back
.18a2	20 49 2a	jsr $2a49			jsr 	StringTempWrite 				; write to string.
.18a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.18a6					EXPUnaryDec:
.18a6	20 81 17	jsr $1781			jsr 	EXPEvalString 					; string to R0, zTemp0
.18a9	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.18ac	5a		phy				phy 									; save position.
.18ad	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.18af	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.18b2	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.18b4	f0 3b		beq $18f1			beq 	_EUDError 						; empty string is not legit.
.18b6	aa		tax				tax 									; count in X.
.18b7	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.18b9					_EUDLoop:
.18b9	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.18bb	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.18bd	90 02		bcc $18c1			bcc 	_EUDNoCase
.18bf	e9 20		sbc #$20			sbc 	#$20
.18c1					_EUDNoCase:
.18c1	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.18c3	90 2c		bcc $18f1			bcc 	_EUDError
.18c5	c9 3a		cmp #$3a			cmp 	#'9'+1
.18c7	90 0a		bcc $18d3			bcc 	_EUDOkay
.18c9	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.18cb	90 24		bcc $18f1			bcc 	_EUDError
.18cd	c9 47		cmp #$47			cmp 	#'F'+1
.18cf	b0 20		bcs $18f1			bcs 	_EUDError
.18d1	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.18d3					_EUDOkay:
.18d3	29 0f		and #$0f			and 	#15 							; make constant
.18d5	da		phx				phx
.18d6	48		pha				pha
.18d7	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.18d9	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.18dc	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.18df	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.18e2	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.18e5	68		pla				pla 									; pop constant and OR in
.18e6	fa		plx				plx
.18e7	05 08		ora $08				ora 	IFR0+IM0
.18e9	85 08		sta $08				sta 	IFR0+IM0
.18eb	c8		iny				iny 									; next char
.18ec	ca		dex				dex 									; done all characters ?
.18ed	d0 ca		bne $18b9			bne 	_EUDLoop
.18ef	7a		ply				ply
.18f0	60		rts				rts
.18f1					_EUDError:
.18f1	4c 68 27	jmp $2768		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.18f4					EXPUnaryInlineDec:
.18f4	4c 46 27	jmp $2746		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18f7					EXPUnaryPeek:
.18f7	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 				; number to R0
.18fa	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.18fd	b2 08		lda ($08)			lda 	(IFR0)
.18ff	a2 08		ldx #$08			ldx 	#IFR0
.1901	20 be 33	jsr $33be			jsr 	IFloatSetByte
.1904	60		rts				rts
.1905					EXPUnaryDeek:
.1905	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 				; number to R0
.1908	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.190b	5a		phy				phy
.190c	a0 01		ldy #$01			ldy 	#1
.190e	b1 08		lda ($08),y			lda 	(IFR0),y
.1910	7a		ply				ply
.1911	48		pha				pha
.1912	b2 08		lda ($08)			lda 	(IFR0)
.1914	a2 08		ldx #$08			ldx 	#IFR0
.1916	20 be 33	jsr $33be			jsr 	IFloatSetByte
.1919	68		pla				pla
.191a	85 09		sta $09				sta 	IFR0+IM1
.191c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.191d					EXPUnaryFrac:
.191d	20 57 17	jsr $1757			jsr 	EXPEvalNumber 					; number to R0
.1920	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.1923	20 67 30	jsr $3067			jsr 	IFloatFractionalR0 				; get fractional bit.
.1926	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1927					EXPUnaryInkey:
.1927	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.192a	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.192c	20 14 2a	jsr $2a14			jsr 	StringTempAllocate
.192f	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit
.1932	b0 06		bcs $193a			bcs 	_EUIExit
.1934	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it.
.1937	20 49 2a	jsr $2a49			jsr 	StringTempWrite
.193a					_EUIExit:
.193a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.193b					EXPUnaryInt:
.193b	20 57 17	jsr $1757			jsr 	EXPEvalNumber 					; number to R0
.193e	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; check for )
.1941	20 bd 30	jsr $30bd			jsr 	IFloatIntegerR0 				; force to integer.
.1944	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1945					EXPUnaryLen:
.1945	20 81 17	jsr $1781			jsr 	EXPEvalString 					; string to R0, zTemp0
.1948	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.194b	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.194d	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.194f	20 be 33	jsr $33be			jsr 	IFloatSetByte
.1952	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1953					EXPUnaryParenthesis:
.1953	20 57 17	jsr $1757			jsr 	EXPEvalNumber 					; number to R0
.1956	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.1959	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.195a					EXPUnaryRnd:
.195a	20 57 17	jsr $1757			jsr 	EXPEvalNumber 				; number to R0
.195d	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 				; )
.1960	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1962	20 79 19	jsr $1979			jsr 	EXPLoadInRandom
.1965	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1967	85 0b		sta $0b				sta 	IFR0+IExp
.1969	60		rts				rts
.196a					ExpUnaryRand:
.196a	20 62 17	jsr $1762			jsr 	EXPEvalInteger 				; integer to R0
.196d	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 				; )
.1970	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1972	20 79 19	jsr $1979			jsr 	EXPLoadInRandom
.1975	20 2c 2f	jsr $2f2c			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1978	60		rts				rts
.1979					EXPLoadInRandom:
.1979	20 bc 33	jsr $33bc			jsr 	IFloatSetZero 				; zero it
.197c	20 8e 19	jsr $198e			jsr 	EXPRandom32 				; do a 23 bit number.
.197f	95 00		sta $00,x			sta 	IM0,x
.1981	20 8e 19	jsr $198e			jsr 	EXPRandom32
.1984	95 01		sta $01,x			sta 	IM1,x
.1986	20 8e 19	jsr $198e			jsr 	EXPRandom32
.1989	29 7f		and #$7f			and 	#$7F
.198b	95 02		sta $02,x			sta 	IM2,x
.198d	60		rts				rts
.198e					EXPRandom32:
.198e	5a		phy				phy
.198f	a0 08		ldy #$08			ldy 	#8
.1991	ad 12 05	lda $0512			lda 	EXPSeed+0
.1994	0d 13 05	ora $0513			ora 	EXPSeed+1
.1997	0d 14 05	ora $0514			ora 	EXPSeed+2
.199a	0d 15 05	ora $0515			ora 	EXPSeed+3
.199d	d0 08		bne $19a7			bne 	_EXPRNoReset
.199f	ee 12 05	inc $0512			inc 	EXPSeed+0
.19a2	a0 10		ldy #$10			ldy 	#16
.19a4	8c 15 05	sty $0515			sty 	EXPSeed+3
.19a7					_EXPRNoReset:
.19a7	ad 12 05	lda $0512			lda 	EXPSeed+0
.19aa					_EXPRLoop:
.19aa	0a		asl a				asl		a
.19ab	2e 13 05	rol $0513			rol 	EXPSeed+1
.19ae	2e 14 05	rol $0514			rol 	EXPSeed+2
.19b1	2e 15 05	rol $0515			rol 	EXPSeed+3
.19b4	90 02		bcc $19b8			bcc 	_EXPRNoEOR
.19b6	49 c5		eor #$c5			eor 	#$C5
.19b8					_EXPRNoEOR:
.19b8	88		dey				dey
.19b9	d0 ef		bne $19aa			bne 	_EXPRLoop
.19bb	8d 12 05	sta $0512			sta 	EXPSeed+0
.19be	7a		ply				ply
.19bf	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.19c0					EXPUnarySgn:
.19c0	20 57 17	jsr $1757			jsr 	EXPEvalNumber 					; number to R0
.19c3	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.19c6	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.19c8	20 5e 33	jsr $335e			jsr 	IFloatCopyToRegister
.19cb	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.19cd	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.19d0	a2 0c		ldx #$0c			ldx 	#IFR1
.19d2	20 8b 30	jsr $308b			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.19d5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.19d6					EXPUnarySqr:
.19d6	20 57 17	jsr $1757			jsr 	EXPEvalNumber 					; number to R0
.19d9	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.19dc	20 07 30	jsr $3007			jsr 	IFloatSquareRootR0 				; square root.
.19df	b0 01		bcs $19e2			bcs 	_EUSValue 						; error check.
.19e1	60		rts				rts
.19e2					_EUSValue:
.19e2	4c 57 27	jmp $2757		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.19e5					EXPUnaryHex:
.19e5	20 62 17	jsr $1762			jsr 	EXPEvalInteger 					; expr
.19e8	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.19eb	5a		phy				phy
.19ec	a9 10		lda #$10			lda 	#16
.19ee	20 5e 31	jsr $315e			jsr 	IFloatIntegerToStringR0
.19f1	80 0a		bra $19fd			bra 	EUSMain
.19f3					EXPUnaryStr:
.19f3	20 57 17	jsr $1757			jsr 	EXPEvalNumber 					; expr
.19f6	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.19f9	5a		phy				phy
.19fa	20 b9 31	jsr $31b9			jsr 	IFloatFloatToStringR0 			; convert to string
.19fd					EUSMain:
.19fd	b0 19		bcs $1a18			bcs 	_EUSError
.19ff	86 24		stx $24				stx 	zTemp0 							; save string address
.1a01	84 25		sty $25				sty 	zTemp0+1
.1a03	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1a05	20 14 2a	jsr $2a14			jsr 	StringTempAllocate
.1a08	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1a0a	aa		tax				tax 									; count in X
.1a0b	a0 01		ldy #$01			ldy 	#1
.1a0d					_EUSCopy:
.1a0d	b1 24		lda ($24),y			lda 	(zTemp0),y
.1a0f	c8		iny				iny
.1a10	20 49 2a	jsr $2a49			jsr 	StringTempWrite
.1a13	ca		dex				dex
.1a14	d0 f7		bne $1a0d			bne	 	_EUSCopy
.1a16	7a		ply				ply
.1a17	60		rts				rts
.1a18					_EUSError:
.1a18	4c 57 27	jmp $2757		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1a1b					EXPUnaryInlineString:
.1a1b	18		clc				clc 								; physical address -> IM0,1
.1a1c	98		tya				tya 								; put the actual address in IM0
.1a1d	65 18		adc $18				adc 	codePtr
.1a1f	85 08		sta $08				sta 	IFR0+IM0
.1a21	a5 19		lda $19				lda 	codePtr+1
.1a23	69 00		adc #$00			adc 	#0
.1a25	85 09		sta $09				sta 	IFR0+IM1
.1a27	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1a29	a9 80		lda #$80			lda 	#$80
.1a2b	85 0b		sta $0b				sta 	IFR0+IExp
.1a2d	98		tya				tya	 								; skip over it.
.1a2e	38		sec				sec
.1a2f	71 18		adc ($18),y			adc 	(codePtr),y
.1a31	a8		tay				tay
.1a32	60		rts				rts
.1a33					_EXPUISRange:
.1a33	4c 57 27	jmp $2757		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1a36					EXPUnaryLeft:
.1a36	20 7c 1a	jsr $1a7c			jsr 	EXPCommonStart 					; <string>,
.1a39	48		pha				pha 									; save string address on stack
.1a3a	da		phx				phx
.1a3b	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1a3d	48		pha				pha
.1a3e	20 75 17	jsr $1775			jsr 	EXPEvalInteger8 				; characters to do
.1a41	80 44		bra $1a87			bra 	EXPSubstringCommon
.1a43					EXPUnaryRight:
.1a43	20 7c 1a	jsr $1a7c			jsr 	EXPCommonStart 					; <string>,
.1a46	48		pha				pha 									; save string address on stack
.1a47	da		phx				phx
.1a48	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1a4a	48		pha				pha
.1a4b	20 75 17	jsr $1775			jsr 	EXPEvalInteger8 				; characters to do
.1a4e	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1a50	68		pla				pla
.1a51	38		sec				sec
.1a52	e5 24		sbc $24				sbc 	zTemp0
.1a54	b0 02		bcs $1a58			bcs 	_EUROffLeft
.1a56	a9 00		lda #$00			lda 	#0
.1a58					_EUROffLeft:
.1a58	48		pha				pha 									; start pos
.1a59	a9 ff		lda #$ff			lda 	#255
.1a5b	80 2a		bra $1a87			bra 	EXPSubstringCommon
.1a5d					EXPUnaryMid:
.1a5d	20 7c 1a	jsr $1a7c			jsr 	EXPCommonStart 					; <string>,
.1a60	48		pha				pha 									; save string address on stack
.1a61	da		phx				phx
.1a62	20 75 17	jsr $1775			jsr 	EXPEvalInteger8 				; characters start
.1a65	f0 12		beq $1a79			beq 	_EUSError 						; 1 is left
.1a67	3a		dec a				dec 	a 								; zero based.
.1a68	48		pha				pha
.1a69	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a6b	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a6d	f0 04		beq $1a73			beq 	_EUMLength 						; if so m is provided
.1a6f	a9 ff		lda #$ff			lda 	#255 							; default m
.1a71	80 14		bra $1a87			bra 	EXPSubstringCommon
.1a73					_EUMLength:
.1a73	c8		iny				iny 									; consume comma
.1a74	20 75 17	jsr $1775			jsr 	EXPEvalInteger8 				; characters to do
.1a77	80 0e		bra $1a87			bra 	EXPSubstringCommon
.1a79					_EUSError:
.1a79	4c 68 27	jmp $2768		jmp	ErrorV_value
.1a7c					EXPCommonStart:
.1a7c	20 81 17	jsr $1781			jsr 	EXPEvalString
.1a7f	20 27 29	jsr $2927			jsr 	ERRCheckComma
.1a82	a5 08		lda $08				lda 	IFR0+IM0
.1a84	a6 09		ldx $09				ldx 	IFR0+IM1
.1a86	60		rts				rts
.1a87					EXPSubstringCommon:
.1a87	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1a89	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; check right bracket.
.1a8c	68		pla				pla 									; start position
.1a8d	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1a8f	fa		plx				plx 									; get string address to zTemp2.
.1a90	86 29		stx $29				stx 	zTemp2+1
.1a92	68		pla				pla
.1a93	85 28		sta $28				sta 	zTemp2
.1a95	38		sec				sec 									; length - start is the max count of chars
.1a96	b2 28		lda ($28)			lda 	(zTemp2)
.1a98	e5 27		sbc $27				sbc 	zTemp1+1
.1a9a	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1a9c	b0 02		bcs $1aa0			bcs 	_EXPSSNoTrim
.1a9e	85 26		sta $26				sta 	zTemp1 							; update count with available
.1aa0					_EXPSSNoTrim:
.1aa0	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1aa2	20 14 2a	jsr $2a14			jsr 	StringTempAllocate 				; allocate memory for it.
.1aa5	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1aa7	f0 15		beq $1abe			beq 	_EXPSSExit
.1aa9	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1aab	d2 28		cmp ($28)			cmp 	(zTemp2)
.1aad	b0 0f		bcs $1abe			bcs 	_EXPSSExit
.1aaf	5a		phy				phy
.1ab0	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1ab2	c8		iny				iny 									; +1 for the length byte
.1ab3					_EXPSSCopy:
.1ab3	b1 28		lda ($28),y			lda 	(zTemp2),y
.1ab5	20 49 2a	jsr $2a49			jsr 	StringTempWrite
.1ab8	c8		iny				iny
.1ab9	c6 26		dec $26				dec 	zTemp1
.1abb	d0 f6		bne $1ab3			bne 	_EXPSSCopy
.1abd	7a		ply				ply
.1abe					_EXPSSExit:
.1abe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1abf					EXPUnaryVal:
.1abf	20 81 17	jsr $1781			jsr 	EXPEvalString 					; string to R0, zTemp0
.1ac2	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 					; )
.1ac5	20 c9 1a	jsr $1ac9			jsr 	VALConversionZTemp0
.1ac8	60		rts				rts
.1ac9					VALConversionZTemp0:
.1ac9	5a		phy				phy
.1aca	18		clc				clc
.1acb	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1acd	69 01		adc #$01			adc 	#1
.1acf	aa		tax				tax
.1ad0	a5 25		lda $25				lda 	zTemp0+1
.1ad2	69 00		adc #$00			adc 	#0
.1ad4	a8		tay				tay
.1ad5	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1ad7	20 20 32	jsr $3220			jsr 	IFloatStringToFloatR0 			; do conversion
.1ada	b0 02		bcs $1ade			bcs 	_EUVError
.1adc	7a		ply				ply
.1add	60		rts				rts
.1ade					_EUVError:
.1ade	4c 68 27	jmp $2768		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1ae1					AssemblerLookup:
>1ae1	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,74,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,74,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,74,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,74,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,74,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,74,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,74,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,74,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,75,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,75,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,75,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,75,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,75,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,75,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,75,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,75
>1ae9	fb 1e 7c 00 4b 1e 7c 4a b8 1e 1e 00 41 1e 7c eb
>1af9	b9 1e f9 00 41 1e 7c 4a 7f 6a 00 00 7a 6a e1 eb
>1b09	23 6a e1 00 7a 6a e1 4a 97 6a 6a 00 7a 6a e1 eb
>1b19	a6 6a 7d 00 7a 6a e1 4a 38 62 00 00 00 62 0b eb
>1b29	ec 62 0b 00 2e 62 0b 4a c3 62 62 00 00 62 0b eb
>1b39	bf 62 04 00 00 62 0b 4a 42 1d 00 00 3b 1d e7 eb
>1b49	14 1d e7 00 2e 1d e7 4a d3 1d 1d 00 3b 1d e7 eb
>1b59	ac 1d 2c 00 2e 1d e7 4a 99 22 00 00 3a 22 39 f5
>1b69	93 7a 54 00 3a 22 39 4b 45 22 22 00 3a 22 39 f5
>1b79	5e 22 66 00 3b 22 3b 4b 19 01 18 00 19 01 18 f5
>1b89	c6 01 c5 00 19 01 18 4b 55 01 01 00 19 01 18 f5
>1b99	cc 01 61 00 19 01 18 4b f7 a8 00 00 f7 a8 7d f5
>1ba9	0f a8 92 0c f7 a8 7d 4b 75 a8 a8 00 00 a8 7d f5
>1bb9	ba a8 03 31 00 a8 7d 4b f6 48 00 00 f6 48 f9 f5
>1bc9	0e 48 dd 00 f6 48 f9 4b 8f 48 48 00 00 48 f9 f5
>1bd9	a7 48 2b 00 00 48 f9 4b

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1be1					BinaryPrecedence:
>1be1	02					.byte	 2	; $ef =
>1be2	02					.byte	 2	; $f0 <>
>1be3	02					.byte	 2	; $f1 <=
>1be4	02					.byte	 2	; $f2 <
>1be5	02					.byte	 2	; $f3 >=
>1be6	02					.byte	 2	; $f4 >
>1be7	01					.byte	 1	; $f5 XOR
>1be8	01					.byte	 1	; $f6 OR
>1be9	01					.byte	 1	; $f7 AND
>1bea	04					.byte	 4	; $f8 DIV
>1beb	04					.byte	 4	; $f9 MOD
>1bec	04					.byte	 4	; $fa <<
>1bed	04					.byte	 4	; $fb >>
>1bee	04					.byte	 4	; $fc /
>1bef	04					.byte	 4	; $fd *
>1bf0	03					.byte	 3	; $fe -
>1bf1	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1bf2					StructureOffsets:
>1bf2	01					.byte	1  	; $80 REPEAT
>1bf3	ff					.byte	255	; $81 UNTIL
>1bf4	01					.byte	1  	; $82 WHILE
>1bf5	ff					.byte	255	; $83 WEND
>1bf6	01					.byte	1  	; $84 IF
>1bf7	ff					.byte	255	; $85 ENDIF
>1bf8	01					.byte	1  	; $86 DO
>1bf9	ff					.byte	255	; $87 LOOP
>1bfa	01					.byte	1  	; $88 PROC
>1bfb	ff					.byte	255	; $89 ENDPROC
>1bfc	01					.byte	1  	; $8a FOR
>1bfd	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1bfe					StandardTokens:
>1bfe	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1c05	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1c0b	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1c11	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1c16	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1c19	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1c1f	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1c22	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1c27	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1c2c	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1c34	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1c38	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1c3d	00					.byte	$00                                     	; $8c [[end]]
>1c3e	00					.byte	$00                                     	; $8d [[shift]]
>1c3f	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1c44	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1c49	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1c4c	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1c51	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1c55	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1c5b	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1c61	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1c66	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1c6a	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1c6e	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1c73	01 2c					.byte	$01,$2c                                 	; $99 ,
>1c75	01 3b					.byte	$01,$3b                                 	; $9a ;
>1c77	01 3a					.byte	$01,$3a                                 	; $9b :
>1c79	01 27					.byte	$01,$27                                 	; $9c '
>1c7b	01 29					.byte	$01,$29                                 	; $9d )
>1c7d	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1c82	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1c87	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1c8c	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1c91	01 5b					.byte	$01,$5b                                 	; $a2 [
>1c93	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1c95	01 23					.byte	$01,$23                                 	; $a4 #
>1c97	01 2e					.byte	$01,$2e                                 	; $a5 .
>1c99	00					.byte	0											; $a6
>1c9a	00					.byte	0											; $a7
>1c9b	00					.byte	0											; $a8
>1c9c	00					.byte	0											; $a9
>1c9d	00					.byte	0											; $aa
>1c9e	00					.byte	0											; $ab
>1c9f	00					.byte	0											; $ac
>1ca0	00					.byte	0											; $ad
>1ca1	00					.byte	0											; $ae
>1ca2	00					.byte	0											; $af
>1ca3	00					.byte	0											; $b0
>1ca4	00					.byte	0											; $b1
>1ca5	00					.byte	0											; $b2
>1ca6	00					.byte	0											; $b3
>1ca7	00					.byte	0											; $b4
>1ca8	00					.byte	0											; $b5
>1ca9	00					.byte	0											; $b6
>1caa	00					.byte	0											; $b7
>1cab	00					.byte	0											; $b8
>1cac	00					.byte	0											; $b9
>1cad	00					.byte	0											; $ba
>1cae	00					.byte	0											; $bb
>1caf	00					.byte	0											; $bc
>1cb0	00					.byte	0											; $bd
>1cb1	00					.byte	0											; $be
>1cb2	00					.byte	0											; $bf
>1cb3	00					.byte	0											; $c0
>1cb4	00					.byte	0											; $c1
>1cb5	00					.byte	0											; $c2
>1cb6	00					.byte	0											; $c3
>1cb7	00					.byte	0											; $c4
>1cb8	00					.byte	0											; $c5
>1cb9	00					.byte	0											; $c6
>1cba	00					.byte	0											; $c7
>1cbb	00					.byte	0											; $c8
>1cbc	00					.byte	0											; $c9
>1cbd	00					.byte	0											; $ca
>1cbe	00					.byte	0											; $cb
>1cbf	00					.byte	0											; $cc
>1cc0	00					.byte	0											; $cd
>1cc1	00					.byte	0											; $ce
>1cc2	00					.byte	0											; $cf
>1cc3	00					.byte	0											; $d0
>1cc4	00					.byte	0											; $d1
>1cc5	00					.byte	0											; $d2
>1cc6	00					.byte	0											; $d3
>1cc7	00					.byte	0											; $d4
>1cc8	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1cce	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1cd4	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1cdc	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1ce3	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1ce9	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1cef	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1cf4	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1cf9	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1cfe	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1d03	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1d08	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1d0e	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1d13	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1d1b	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1d22	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1d27	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1d2c	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1d32	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1d37	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1d3d	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1d42	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1d48	01 28					.byte	$01,$28                                 	; $eb (
>1d4a	01 26					.byte	$01,$26                                 	; $ec &
>1d4c	00					.byte	$00                                     	; $ed [[decimal]]
>1d4d	00					.byte	$00                                     	; $ee [[string]]
>1d4e	01 3d					.byte	$01,$3d                                 	; $ef =
>1d50	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1d53	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1d56	01 3c					.byte	$01,$3c                                 	; $f2 <
>1d58	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1d5b	01 3e					.byte	$01,$3e                                 	; $f4 >
>1d5d	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1d61	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1d64	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1d68	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1d6c	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1d70	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1d73	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1d76	01 2f					.byte	$01,$2f                                 	; $fc /
>1d78	01 2a					.byte	$01,$2a                                 	; $fd *
>1d7a	01 2d					.byte	$01,$2d                                 	; $fe -
>1d7c	01 2b					.byte	$01,$2b                                 	; $ff +
>1d7e	ff					.byte	$FF
.1d7f					AlternateTokens:
>1d7f	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1d85	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1d89	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1d8d	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1d92	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1d96	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1d9d	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1da2	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1da7	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1dac	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1db2	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1db7	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1dbe	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1dc6	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1dca	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>1dce	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>1dd4	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8d90 renumber
>1ddc	52
>1ddd	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1dde					VectorTable:
>1dde	36 26					.word	Command_REPEAT           ; $80 REPEAT
>1de0	3f 26					.word	Command_UNTIL            ; $81 UNTIL
>1de2	19 27					.word	Command_WHILE            ; $82 WHILE
>1de4	3a 27					.word	Command_WEND             ; $83 WEND
>1de6	0c 26					.word	IfCommand                ; $84 IF
>1de8	35 26					.word	EndIf                    ; $85 ENDIF
>1dea	8e 24					.word	Command_DO               ; $86 DO
>1dec	a6 24					.word	Command_LOOP             ; $87 LOOP
>1dee	97 15					.word	NoExec08                 ; $88 PROC
>1df0	82 24					.word	Command_ENDPROC          ; $89 ENDPROC
>1df2	af 24					.word	Command_FOR              ; $8a FOR
>1df4	3c 25					.word	Command_NEXT             ; $8b NEXT
>1df6	18 15					.word	RUNEndOfLine             ; $8c [[END]]
>1df8	74 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1dfa	2e 26					.word	ElseCode                 ; $8e ELSE
>1dfc	97 15					.word	NoExec01                 ; $8f THEN
>1dfe	97 15					.word	NoExec02                 ; $90 TO
>1e00	97 15					.word	NoExec03                 ; $91 STEP
>1e02	bf 12					.word	CommandLET               ; $92 LET
>1e04	14 12					.word	Command_Print            ; $93 PRINT
>1e06	0d 12					.word	Command_Input            ; $94 INPUT
>1e08	46 24					.word	Command_CALL             ; $95 CALL
>1e0a	82 15					.word	Command_Sys              ; $96 SYS
>1e0c	8d 14					.word	Command_REM              ; $97 REM
>1e0e	97 24					.word	Command_EXIT             ; $98 EXIT
>1e10	97 15					.word	NoExec04                 ; $99 ,
>1e12	97 15					.word	NoExec05                 ; $9a ;
>1e14	97 15					.word	NoExec06                 ; $9b :
>1e16	8d 14					.word	Command_REM2             ; $9c '
>1e18	97 15					.word	NoExec07                 ; $9d )
>1e1a	b6 11					.word	Command_Poke             ; $9e POKE
>1e1c	b3 11					.word	Command_Doke             ; $9f DOKE
>1e1e	19 14					.word	Command_READ             ; $a0 READ
>1e20	80 14					.word	Command_DATA             ; $a1 DATA
>1e22	92 2b					.word	NotImplemented           ; $a2 [
>1e24	92 2b					.word	NotImplemented           ; $a3 ]
>1e26	92 2b					.word	NotImplemented           ; $a4 #
>1e28	92 2b					.word	NotImplemented           ; $a5 .
>1e2a	92 2b					.word	NotImplemented           ; $a6
>1e2c	92 2b					.word	NotImplemented           ; $a7
>1e2e	92 2b					.word	NotImplemented           ; $a8
>1e30	92 2b					.word	NotImplemented           ; $a9
>1e32	92 2b					.word	NotImplemented           ; $aa
>1e34	92 2b					.word	NotImplemented           ; $ab
>1e36	92 2b					.word	NotImplemented           ; $ac
>1e38	92 2b					.word	NotImplemented           ; $ad
>1e3a	92 2b					.word	NotImplemented           ; $ae
>1e3c	92 2b					.word	NotImplemented           ; $af
>1e3e	92 2b					.word	NotImplemented           ; $b0
>1e40	92 2b					.word	NotImplemented           ; $b1
>1e42	92 2b					.word	NotImplemented           ; $b2
>1e44	92 2b					.word	NotImplemented           ; $b3
>1e46	92 2b					.word	NotImplemented           ; $b4
>1e48	92 2b					.word	NotImplemented           ; $b5
>1e4a	92 2b					.word	NotImplemented           ; $b6
>1e4c	92 2b					.word	NotImplemented           ; $b7
>1e4e	92 2b					.word	NotImplemented           ; $b8
>1e50	92 2b					.word	NotImplemented           ; $b9
>1e52	92 2b					.word	NotImplemented           ; $ba
>1e54	92 2b					.word	NotImplemented           ; $bb
>1e56	92 2b					.word	NotImplemented           ; $bc
>1e58	92 2b					.word	NotImplemented           ; $bd
>1e5a	92 2b					.word	NotImplemented           ; $be
>1e5c	92 2b					.word	NotImplemented           ; $bf
>1e5e	92 2b					.word	NotImplemented           ; $c0
>1e60	92 2b					.word	NotImplemented           ; $c1
>1e62	92 2b					.word	NotImplemented           ; $c2
>1e64	92 2b					.word	NotImplemented           ; $c3
>1e66	92 2b					.word	NotImplemented           ; $c4
>1e68	92 2b					.word	NotImplemented           ; $c5
>1e6a	92 2b					.word	NotImplemented           ; $c6
>1e6c	92 2b					.word	NotImplemented           ; $c7
>1e6e	92 2b					.word	NotImplemented           ; $c8
>1e70	92 2b					.word	NotImplemented           ; $c9
>1e72	92 2b					.word	NotImplemented           ; $ca
>1e74	92 2b					.word	NotImplemented           ; $cb
>1e76	92 2b					.word	NotImplemented           ; $cc
>1e78	92 2b					.word	NotImplemented           ; $cd
>1e7a	92 2b					.word	NotImplemented           ; $ce
>1e7c	92 2b					.word	NotImplemented           ; $cf
>1e7e	92 2b					.word	NotImplemented           ; $d0
>1e80	92 2b					.word	NotImplemented           ; $d1
>1e82	92 2b					.word	NotImplemented           ; $d2
>1e84	92 2b					.word	NotImplemented           ; $d3
>1e86	92 2b					.word	NotImplemented           ; $d4
>1e88	05 19					.word	EXPUnaryDeek             ; $d5 DEEK(
>1e8a	f7 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1e8c	43 1a					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1e8e	36 1a					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1e90	5d 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1e92	f3 19					.word	EXPUnaryStr              ; $da STR$(
>1e94	bf 1a					.word	EXPUnaryVal              ; $db VAL(
>1e96	c0 19					.word	EXPUnarySgn              ; $dc SGN(
>1e98	71 18					.word	EXPUnaryAbs              ; $dd ABS(
>1e9a	45 19					.word	EXPUnaryLen              ; $de LEN(
>1e9c	d6 19					.word	EXPUnarySqr              ; $df SQR(
>1e9e	95 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1ea0	7f 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1ea2	27 19					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1ea4	92 2b					.word	NotImplemented           ; $e3 EVENT(
>1ea6	92 2b					.word	NotImplemented           ; $e4 TIME
>1ea8	3b 19					.word	EXPUnaryInt              ; $e5 INT(
>1eaa	1d 19					.word	EXPUnaryFrac             ; $e6 FRAC(
>1eac	a6 18					.word	EXPUnaryDec              ; $e7 DEC(
>1eae	e5 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1eb0	5a 19					.word	EXPUnaryRnd              ; $e9 RND(
>1eb2	6a 19					.word	ExpUnaryRand             ; $ea RAND(
>1eb4	53 19					.word	EXPUnaryParenthesis      ; $eb (
>1eb6	7b 18					.word	EXPUnaryNull             ; $ec &
>1eb8	f4 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1eba	1b 1a					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1ebc	54 16					.word	EXPCompareEqual          ; $ef =
>1ebe	6f 16					.word	EXPCompareNotEqual       ; $f0 <>
>1ec0	78 16					.word	EXPCompareLessEqual      ; $f1 <=
>1ec2	5d 16					.word	EXPCompareLess           ; $f2 <
>1ec4	81 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1ec6	66 16					.word	EXPCompareGreater        ; $f4 >
>1ec8	01 16					.word	EXPBinXor                ; $f5 XOR
>1eca	f5 15					.word	EXPBinOr                 ; $f6 OR
>1ecc	e9 15					.word	EXPBinAnd                ; $f7 AND
>1ece	c1 15					.word	EXPBinIDiv               ; $f8 DIV
>1ed0	d2 15					.word	EXPBinIMod               ; $f9 MOD
>1ed2	cc 16					.word	EXPBinLeft               ; $fa <<
>1ed4	d4 16					.word	EXPBinRight              ; $fb >>
>1ed6	b5 15					.word	EXPBinFDiv               ; $fc /
>1ed8	ac 15					.word	EXPBinMul                ; $fd *
>1eda	a3 15					.word	EXPBinSub                ; $fe -
>1edc	9a 15					.word	EXPBinAdd                ; $ff +
.1ede					AlternateVectorTable:
>1ede	23 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1ee0	10 14					.word	Command_NEW              ; $8d81 NEW
>1ee2	0c 15					.word	Command_RUN              ; $8d82 RUN
>1ee4	7f 15					.word	Command_STOP             ; $8d83 STOP
>1ee6	7c 15					.word	Command_END              ; $8d84 END
>1ee8	15 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1eea	39 13					.word	Command_LIST             ; $8d86 LIST
>1eec	00 2b					.word	Command_SAVE             ; $8d87 SAVE
>1eee	bf 2a					.word	Command_LOAD             ; $8d88 LOAD
>1ef0	f2 25					.word	Command_GOSUB            ; $8d89 GOSUB
>1ef2	dd 11					.word	Command_GOTO             ; $8d8a GOTO
>1ef4	00 26					.word	Command_RETURN           ; $8d8b RETURN
>1ef6	de 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1ef8	97 10					.word	CommandDIM               ; $8d8d DIM
>1efa	56 2a					.word	Command_DIR              ; $8d8e DIR
>1efc	93 2a					.word	Command_ERASE            ; $8d8f ERASE
>1efe	9a 14					.word	Command_RENUMBER         ; $8d90 RENUMBER

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1f00					TOKDetokenise:
.1f00	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.1f02	84 29		sty $29				sty 	zTemp2+1
.1f04	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1f07					_TOKDLoop:
.1f07	20 4c 1f	jsr $1f4c			jsr 	TOKDGet 					; get next
.1f0a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1f0c	f0 3c		beq $1f4a			beq 	_TOKDExit
.1f0e	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1f10	f0 33		beq $1f45			beq 	_TOKDDataItem
.1f12	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1f14	f0 2f		beq $1f45			beq 	_TOKDDataItem
.1f16	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.1f18	f0 19		beq $1f33			beq 	_TOKAmpersand
.1f1a	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1f1c	10 05		bpl $1f23			bpl 	_TOKDNotToken
.1f1e	20 12 20	jsr $2012			jsr 	TOKDToken 					; token to text.
.1f21	80 e4		bra $1f07			bra 	_TOKDLoop
.1f23					_TOKDNotToken:
.1f23	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1f25	90 05		bcc $1f2c			bcc 	_TOKDNotIdentifier
.1f27	20 89 1f	jsr $1f89			jsr 	TOKDIdentifier
.1f2a	80 db		bra $1f07			bra 	_TOKDLoop
.1f2c					_TOKDNotIdentifier:
.1f2c	a0 0a		ldy #$0a			ldy 	#10
.1f2e	20 cc 1f	jsr $1fcc			jsr 	TOKDInteger
.1f31	80 d4		bra $1f07			bra 	_TOKDLoop
.1f33					_TOKAmpersand:
.1f33	20 54 20	jsr $2054			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.1f36	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.1f38	20 55 1f	jsr $1f55			jsr 	TOKDOutput
.1f3b	20 4c 1f	jsr $1f4c			jsr 	TOKDGet 					; get first char of integer
.1f3e	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.1f40	20 cc 1f	jsr $1fcc			jsr 	TOKDInteger
.1f43	80 c2		bra $1f07			bra 	_TOKDLoop
.1f45					_TOKDDataItem:
.1f45	20 62 1f	jsr $1f62			jsr 	TOKDDataItem
.1f48	80 bd		bra $1f07			bra 	_TOKDLoop
.1f4a					_TOKDExit:
.1f4a	18		clc				clc
.1f4b	60		rts				rts
.1f4c	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.1f4e	e6 28		inc $28				inc 	zTemp2
.1f50	d0 02		bne $1f54			bne 	_TKDGExit
.1f52	e6 29		inc $29				inc 	zTemp2+1
.1f54					_TKDGExit:
.1f54	60		rts				rts
.1f55					TOKDOutput:
.1f55	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1f58	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1f5b					TOKSetDetokeniseOutput:
.1f5b	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1f5e	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1f61	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1f62					TOKDDataItem:
.1f62	a8		tay				tay 								; type in Y
.1f63	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1f65	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1f67	f0 02		beq $1f6b			beq 	_TOKDDIsString
.1f69	a9 2e		lda #$2e			lda 	#'.'
.1f6b					_TOKDDIsString:
.1f6b	20 55 1f	jsr $1f55			jsr 	TOKDOutput 					; dump it
.1f6e	20 4c 1f	jsr $1f4c			jsr 	TOKDGet 					; get length into X
.1f71	aa		tax				tax
.1f72					_TOKDDOutput:
.1f72	ca		dex				dex 								; are we complete
.1f73	e0 ff		cpx #$ff			cpx 	#255
.1f75	f0 08		beq $1f7f			beq 	_TOKDDEnd
.1f77	20 4c 1f	jsr $1f4c			jsr 	TOKDGet 					; get character and output it
.1f7a	20 55 1f	jsr $1f55			jsr 	TOKDOutput
.1f7d	80 f3		bra $1f72			bra 	_TOKDDOutput
.1f7f					_TOKDDEnd:
.1f7f	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1f81	d0 05		bne $1f88			bne 	_TOKDDNotString
.1f83	a9 22		lda #$22			lda 	#'"'
.1f85	20 55 1f	jsr $1f55			jsr 	TOKDOutput
.1f88					_TOKDDNotString:
.1f88	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1f89					TOKDIdentifier:
.1f89	a0 ff		ldy #$ff			ldy 	#$FF
.1f8b	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1f8e					_TOKDLoop:
.1f8e	a8		tay				tay 								; token in Y
.1f8f	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.1f91	c0 64		cpy #$64			cpy 	#$64
.1f93	f0 0b		beq $1fa0			beq 	_TOKDIOutput
.1f95	98		tya				tya 								; handle a-z
.1f96	18		clc				clc
.1f97	69 21		adc #$21			adc	 	#$21
.1f99	c0 5a		cpy #$5a			cpy 	#$5A
.1f9b	90 03		bcc $1fa0			bcc 	_TOKDIOutput
.1f9d	38		sec				sec 								; handle 0-9
.1f9e	e9 4b		sbc #$4b			sbc 	#$4B
.1fa0					_TOKDIOutput:
.1fa0	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1fa3	10 08		bpl $1fad			bpl 	_TOKDINoSpacing
.1fa5	48		pha				pha
.1fa6	20 4f 20	jsr $204f			jsr 	TOKDSpacing
.1fa9	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1fac	68		pla				pla
.1fad					_TOKDINoSpacing:
.1fad	20 55 1f	jsr $1f55			jsr 	TOKDOutput
.1fb0	20 4c 1f	jsr $1f4c			jsr 	TOKDGet 					; get next token
.1fb3	c9 7c		cmp #$7c			cmp 	#$7C
.1fb5	90 d7		bcc $1f8e			bcc 	_TOKDLoop
.1fb7	f0 12		beq $1fcb			beq 	_TOKDIExit 					; it's a number, no tail.
.1fb9	4a		lsr a				lsr 	a 							; string ?
.1fba	90 07		bcc $1fc3			bcc 	_TOKDICheckArray
.1fbc	48		pha				pha
.1fbd	a9 24		lda #$24			lda 	#"$"
.1fbf	20 55 1f	jsr $1f55			jsr 	TOKDOutput
.1fc2	68		pla				pla
.1fc3					_TOKDICheckArray:
.1fc3	4a		lsr a				lsr 	a 							; array ?
.1fc4	90 05		bcc $1fcb			bcc 	_TOKDIExit
.1fc6	a9 28		lda #$28			lda 	#"("
.1fc8	20 55 1f	jsr $1f55			jsr 	TOKDOutput
.1fcb					_TOKDIExit:
.1fcb	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1fcc					TOKDInteger:
.1fcc	5a		phy				phy 								; save base
.1fcd	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1fcf	20 be 33	jsr $33be			jsr 	IFloatSetByte
.1fd2					_TOKDILoop:
.1fd2	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F
.1fd4	c9 40		cmp #$40			cmp 	#$40
.1fd6	b0 1d		bcs $1ff5			bcs 	_TOKDIHaveInteger
.1fd8	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1fda	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.1fdd	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.1fe0	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.1fe3	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.1fe6	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.1fe9	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.1fec	20 4c 1f	jsr $1f4c			jsr 	TOKDGet 					; OR byte in.
.1fef	05 08		ora $08				ora 	IFR0+IM0
.1ff1	85 08		sta $08				sta 	IFR0+IM0
.1ff3	80 dd		bra $1fd2			bra 	_TOKDILoop
.1ff5					_TOKDIHaveInteger:
.1ff5	7a		ply				ply 								; restore base
.1ff6	98		tya				tya 								; base in A
.1ff7	20 5e 31	jsr $315e			jsr 	IFloatIntegerToStringR0
.1ffa	86 24		stx $24				stx 	zTemp0
.1ffc	84 25		sty $25				sty 	zTemp0+1
.1ffe	b2 24		lda ($24)			lda 	(zTemp0)
.2000	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.2002	b1 24		lda ($24),y			lda 	(zTemp0),y
.2004	20 4f 20	jsr $204f			jsr 	TOKDSpacing 				; check spacing okay.
.2007					_TOKDOutput:
.2007	b1 24		lda ($24),y			lda 	(zTemp0),y
.2009	20 55 1f	jsr $1f55			jsr 	TOKDOutput
.200c	c8		iny				iny
.200d	b1 24		lda ($24),y			lda 	(zTemp0),y
.200f	d0 f6		bne $2007			bne 	_TOKDOutput
.2011	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.2012					TOKDToken:
.2012	a2 fe		ldx #$fe			ldx 	#StandardTokens & $FF 		; standard table
.2014	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.2016	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.2018	d0 07		bne $2021			bne 	_TOKDSearch
.201a	20 4c 1f	jsr $1f4c			jsr 	TOKDGet 					; get next
.201d	a2 7f		ldx #$7f			ldx 	#AlternateTokens & $FF 		; alt table
.201f	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.2021					_TOKDSearch:
.2021	86 24		stx $24				stx 	zTemp0 						; put table in zTemp0
.2023	84 25		sty $25				sty 	zTemp0+1
.2025	aa		tax				tax 								; token ID in X.
.2026					_TOKDFind:
.2026	ca		dex				dex 								; reached the start
.2027	10 0d		bpl $2036			bpl 	_TOKDFound
.2029	38		sec				sec 								; go to next entry
.202a	b2 24		lda ($24)			lda 	(zTemp0)
.202c	65 24		adc $24				adc 	zTemp0
.202e	85 24		sta $24				sta 	zTemp0
.2030	90 f4		bcc $2026			bcc 	_TOKDFind
.2032	e6 25		inc $25				inc 	zTemp0+1
.2034	80 f0		bra $2026			bra 	_TOKDFind
.2036					_TOKDFound:
.2036	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X
.2038	f0 14		beq $204e			beq 	_TOKDExit
.203a	aa		tax				tax
.203b	a0 01		ldy #$01			ldy 	#1 							; output the token.
.203d	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.203f	20 4f 20	jsr $204f			jsr 	TOKDSpacing
.2042					_TOKDOutput:
.2042	b1 24		lda ($24),y			lda 	(zTemp0),y
.2044	20 05 24	jsr $2405			jsr 	TOKToLower
.2047	20 55 1f	jsr $1f55			jsr 	TOKDOutput
.204a	c8		iny				iny
.204b	ca		dex				dex
.204c	d0 f4		bne $2042			bne 	_TOKDOutput
.204e					_TOKDExit:
.204e	60		rts				rts
.204f					TOKDSpacing:
.204f	20 1c 24	jsr $241c			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.2052	90 0d		bcc $2061			bcc 	TOKDSExit
.2054					TOKDSpaceLastAlpha:
.2054	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.2057	20 1c 24	jsr $241c			jsr 	TOKIsIdentifierElement
.205a	90 05		bcc $2061			bcc 	TOKDSExit
.205c	a9 20		lda #$20			lda 	#" " 						; we need a space.
.205e	20 55 1f	jsr $1f55			jsr 	TOKDOutput
.2061					TOKDSExit:
.2061	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.2062					PGMDeleteLine:
.2062	20 15 21	jsr $2115			jsr 	PGMEndProgram 				; end of program into zTemp0
.2065	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2067	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.206a	85 27		sta $27				sta 	zTemp1+1
.206c					_PGMDLoop:
.206c	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.206e	38		sec				sec
.206f	f0 3a		beq $20ab			beq 	_PGMDExit
.2071	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.2073	b1 26		lda ($26),y			lda 	(zTemp1),y
.2075	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2078	d0 08		bne $2082			bne 	_PGMDNext
.207a	c8		iny				iny
.207b	b1 26		lda ($26),y			lda 	(zTemp1),y
.207d	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.2080	f0 0d		beq $208f			beq 	_PGMDDelete
.2082					_PGMDNext:
.2082	18		clc				clc
.2083	b2 26		lda ($26)			lda 	(zTemp1)
.2085	65 26		adc $26				adc 	zTemp1
.2087	85 26		sta $26				sta 	zTemp1
.2089	90 e1		bcc $206c			bcc 	_PGMDLoop
.208b	e6 27		inc $27				inc 	zTemp1+1
.208d	80 dd		bra $206c			bra 	_PGMDLoop
.208f					_PGMDDelete:
.208f	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.2091	a8		tay				tay
.2092					_PGMDCopy:
.2092	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.2094	92 26		sta ($26)			sta 	(zTemp1)
.2096	a5 26		lda $26				lda 	zTemp1 						; reached the end ?
.2098	c5 24		cmp $24				cmp 	zTemp0
.209a	d0 07		bne $20a3			bne 	_PGMDNext2
.209c	a5 27		lda $27				lda 	zTemp1+1
.209e	c5 25		cmp $25				cmp 	zTemp0+1
.20a0	18		clc				clc
.20a1	f0 08		beq $20ab			beq 	_PGMDExit
.20a3					_PGMDNext2:
.20a3	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.20a5	d0 eb		bne $2092			bne 	_PGMDCopy
.20a7	e6 27		inc $27				inc 	zTemp1+1
.20a9	80 e7		bra $2092			bra 	_PGMDCopy
.20ab					_PGMDExit:
.20ab	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.20ac					PGMInsertLine:
.20ac	20 15 21	jsr $2115			jsr 	PGMEndProgram 				; end of program into zTemp0
.20af	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.20b1	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.20b4	85 27		sta $27				sta 	zTemp1+1
.20b6					_PGMILoop:
.20b6	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.20b8	f0 1c		beq $20d6			beq 	_PGMIInsert
.20ba	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.20bc	b1 26		lda ($26),y			lda 	(zTemp1),y
.20be	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.20c1	c8		iny				iny
.20c2	b1 26		lda ($26),y			lda 	(zTemp1),y
.20c4	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.20c7	b0 0d		bcs $20d6			bcs 	_PGMIInsert 				; insert here.
.20c9	18		clc				clc
.20ca	b2 26		lda ($26)			lda 	(zTemp1)
.20cc	65 26		adc $26				adc 	zTemp1
.20ce	85 26		sta $26				sta 	zTemp1
.20d0	90 e4		bcc $20b6			bcc 	_PGMILoop
.20d2	e6 27		inc $27				inc 	zTemp1+1
.20d4	80 e0		bra $20b6			bra 	_PGMILoop
.20d6					_PGMIInsert:
.20d6	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.20d9					_PGMIInsertLoop:
.20d9	b2 24		lda ($24)			lda 	(zTemp0)
.20db	91 24		sta ($24),y			sta 	(zTemp0),y
.20dd	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.20df	c5 24		cmp $24				cmp 	zTemp0
.20e1	d0 06		bne $20e9			bne 	_PGMINext
.20e3	a5 27		lda $27				lda 	zTemp1+1
.20e5	c5 25		cmp $25				cmp 	zTemp0+1
.20e7	f0 0a		beq $20f3			beq 	_PGMIInserted
.20e9					_PGMINext:
.20e9	a5 24		lda $24				lda 	zTemp0
.20eb	d0 02		bne $20ef			bne 	_PGMINoBorrow
.20ed	c6 25		dec $25				dec 	zTemp0+1
.20ef					_PGMINoBorrow:
.20ef	c6 24		dec $24				dec 	zTemp0
.20f1	80 e6		bra $20d9			bra 	_PGMIInsertLoop
.20f3					_PGMIInserted:
.20f3	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.20f5					_PGMICopyLoop:
.20f5	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.20f8	91 26		sta ($26),y			sta 	(zTemp1),y
.20fa	c8		iny				iny
.20fb	cc 00 04	cpy $0400			cpy 	TOKLineSize
.20fe	d0 f5		bne $20f5			bne 	_PGMICopyLoop
.2100	18		clc				clc
.2101	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.2102					PGMSetBaseAddress:
.2102	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.2105	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.2108	60		rts				rts
.2109					PGMNewProgram:
.2109	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.210b	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.210e	85 25		sta $25				sta 	zTemp0+1
.2110	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.2112	92 24		sta ($24)			sta 	(zTemp0)
.2114	60		rts				rts
.2115					PGMEndProgram:
.2115	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.2117	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.211a	85 25		sta $25				sta 	zTemp0+1
.211c					_PGMEPLoop:
.211c	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.211e	f0 0b		beq $212b			beq 	_PGMEPExit
.2120	18		clc				clc 								; no, advance to next
.2121	65 24		adc $24				adc 	zTemp0
.2123	85 24		sta $24				sta 	zTemp0
.2125	90 f5		bcc $211c			bcc 	_PGMEPLoop
.2127	e6 25		inc $25				inc 	zTemp0+1
.2129	80 f1		bra $211c			bra 	_PGMEPLoop
.212b					_PGMEPExit:
.212b	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.212c					TOKResetElement:
.212c	9c 1c 05	stz $051c			stz 	TOKElement
.212f	60		rts				rts
.2130					TOKWriteElement:
.2130	da		phx				phx
.2131	ae 1c 05	ldx $051c			ldx 	TOKElement
.2134	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.2137	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.213a	fa		plx				plx
.213b	ee 1c 05	inc $051c			inc 	TOKElement
.213e	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.213f					TOKTokeniseConstant:
.213f	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.2141	48		pha				pha 								; save on stack
.2142	29 c0		and #$c0			and 	#$C0
.2144	05 09		ora $09				ora 	IFR0+IM1
.2146	05 0a		ora $0a				ora 	IFR0+IM2
.2148	f0 10		beq $215a			beq 	_TTCLess
.214a	da		phx				phx
.214b	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.214d					_TTCShiftRight:
.214d	46 0a		lsr $0a				lsr 	IFR0+IM2
.214f	66 09		ror $09				ror 	IFR0+IM1
.2151	66 08		ror $08				ror 	IFR0+IM0
.2153	ca		dex				dex
.2154	d0 f7		bne $214d			bne 	_TTCShiftRight
.2156	fa		plx				plx
.2157	20 3f 21	jsr $213f			jsr 	TOKTokeniseConstant
.215a					_TTCLess:
.215a	68		pla				pla
.215b	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.215d	20 fd 21	jsr $21fd			jsr 	TOKWriteA
.2160	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.2161					TOKTokeniseDecimals:
.2161	20 10 22	jsr $2210			jsr 	TOKGetNext 					; consume the .
.2164	20 89 23	jsr $2389			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2167	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.2169	20 fd 21	jsr $21fd			jsr 	TOKWriteA
.216c	20 71 21	jsr $2171			jsr 	TOKOutputElementBuffer 		; then the buffer
.216f	18		clc				clc
.2170	60		rts				rts
.2171					TOKOutputElementBuffer:
.2171	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.2174	20 fd 21	jsr $21fd			jsr 	TOKWriteA
.2177	a8		tay				tay 								; put in Y
.2178	f0 0c		beq $2186			beq 	_TOEExit 					; exit if empty which is okay.
.217a	a2 01		ldx #$01			ldx 	#1
.217c					_TOELoop:
.217c	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.217f	20 fd 21	jsr $21fd			jsr 	TOKWriteA
.2182	e8		inx				inx
.2183	88		dey				dey
.2184	d0 f6		bne $217c			bne 	_TOELoop
.2186					_TOEExit:
.2186	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.2187					TOKTokenise:
.2187	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.218a	8e 1c 06	stx $061c			stx 	TOKDataSource
.218d	a9 01		lda #$01			lda 	#1 							; set first element flag.
.218f	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.2192	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.2194	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.2197	9c 01 04	stz $0401			stz 	TOKLineNumber
.219a	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.219d					_TOKMainLoop:
.219d	20 0c 22	jsr $220c			jsr 	TOKGet 						; what follows.
.21a0	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.21a2	f0 50		beq $21f4			beq 	_TOKExit
.21a4	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.21a6	d0 05		bne $21ad			bne 	_TOKElement
.21a8	20 10 22	jsr $2210			jsr 	TOKGetNext
.21ab	80 f0		bra $219d			bra 	_TOKMainLoop
.21ad					_TOKElement:
.21ad	20 10 24	jsr $2410			jsr 	TOKIsDigit 					; is it 0..9
.21b0	90 16		bcc $21c8			bcc 	_TOKNotDigit
.21b2	20 60 23	jsr $2360			jsr 	TOKTokeniseInteger 			; get integer
.21b5	b0 44		bcs $21fb			bcs 	_TOKFail 					; did it fail ?
.21b7	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.21ba	20 0c 22	jsr $220c			jsr 	TOKGet 						; what follows ?
.21bd	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.21bf	d0 dc		bne $219d			bne 	_TOKMainLoop
.21c1	20 61 21	jsr $2161			jsr 	TOKTokeniseDecimals
.21c4	b0 35		bcs $21fb			bcs 	_TOKFail
.21c6	80 d5		bra $219d			bra 	_TOKMainLoop
.21c8					_TOKNotDigit:
.21c8	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.21cb	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.21cd	d0 07		bne $21d6			bne 	_TOKNotHex
.21cf	20 66 22	jsr $2266			jsr 	TOKTokeniseHexadecimal
.21d2	b0 27		bcs $21fb			bcs 	_TOKFail
.21d4	80 c7		bra $219d			bra 	_TOKMainLoop
.21d6					_TOKNotHex:
.21d6	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.21d8	d0 07		bne $21e1			bne 	_TOKNotString
.21da	20 d7 23	jsr $23d7			jsr 	TOKTokeniseString
.21dd	b0 1c		bcs $21fb			bcs 	_TOKFail
.21df	80 bc		bra $219d			bra 	_TOKMainLoop
.21e1					_TOKNotString:
.21e1	20 29 24	jsr $2429			jsr 	TOKIsAlpha 					; identifier ?
.21e4	b0 07		bcs $21ed			bcs 	_TOKIdentifier
.21e6	20 9d 23	jsr $239d			jsr 	TOKTokenisePunctuation 		; punctuation
.21e9	b0 10		bcs $21fb			bcs 	_TOKFail
.21eb	80 b0		bra $219d			bra 	_TOKMainLoop
.21ed					_TOKIdentifier:
.21ed	20 a3 22	jsr $22a3			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.21f0	b0 09		bcs $21fb			bcs 	_TOKFail
.21f2	80 a9		bra $219d			bra 	_TOKMainLoop
.21f4					_TOKExit:
.21f4	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.21f6	20 fd 21	jsr $21fd			jsr 	TOKWriteA
.21f9	18		clc				clc									; return with carry set.
.21fa	60		rts				rts
.21fb					_TOKFail:
.21fb	38		sec				sec
.21fc	60		rts				rts
.21fd					TOKWriteA:
.21fd	da		phx				phx
.21fe	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2201	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2204	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.2207	fa		plx				plx
.2208	ee 00 04	inc $0400			inc 	TOKLineSize
.220b	60		rts				rts
.220c					TOKGet:
.220c	18		clc				clc
.220d	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.2210					TOKGetNext:
.2210	38		sec				sec
.2211	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2214					TOKFindToken:
.2214	a2 fe		ldx #$fe			ldx 	#StandardTokens & $FF 		; do this table
.2216	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.2218	20 30 22	jsr $2230			jsr 	TOKFindTokenXY 				; find it, or not
.221b	b0 0d		bcs $222a			bcs 	_TOKFound1
.221d	a2 7f		ldx #$7f			ldx 	#AlternateTokens & $FF 		; do the alternate table
.221f	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.2221	20 30 22	jsr $2230			jsr 	TOKFindTokenXY 				; find it, or not
.2224	90 08		bcc $222e			bcc 	_TOKFTFail 					; not ....
.2226	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.2228	38		sec				sec
.2229	60		rts				rts
.222a					_TOKFound1:
.222a	a2 00		ldx #$00			ldx 	#0
.222c	38		sec				sec
.222d	60		rts				rts
.222e					_TOKFTFail
.222e	18		clc				clc
.222f	60		rts				rts
.2230					TOKFindTokenXY:
.2230	86 24		stx $24				stx 	zTemp0 						; save token table address
.2232	84 25		sty $25				sty 	zTemp0+1
.2234	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.2236	8d 1f 06	sta $061f			sta 	TOKCurrent
.2239					_TOKFindLoop:
.2239	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.223b	18		clc				clc 		 						; clear carry in case of fail
.223c	30 17		bmi $2255			bmi 	_TOKExit 					; end of table, fail, so return CC.
.223e	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.2241	d0 13		bne $2256			bne 	_TOKNext 					; different, try next.
.2243	aa		tax				tax 								; number of chars to compare.
.2244	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.2246					_TOKCompare:
.2246	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.2248	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.224b	d0 09		bne $2256			bne 	_TOKNext 					; different ? try next
.224d	c8		iny				iny 								; compare next two
.224e	ca		dex				dex
.224f	d0 f5		bne $2246			bne 	_TOKCompare 				; until done X characters.
.2251	38		sec				sec
.2252	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.2255					_TOKExit:
.2255	60		rts				rts
.2256					_TOKNext:
.2256	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.2259	38		sec				sec 								; add length+1 to ptr
.225a	b2 24		lda ($24)			lda 	(zTemp0)
.225c	65 24		adc $24				adc 	zTemp0
.225e	85 24		sta $24				sta 	zTemp0
.2260	90 d7		bcc $2239			bcc 	_TOKFindLoop
.2262	e6 25		inc $25				inc 	zTemp0+1
.2264	80 d3		bra $2239			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.2266					TOKTokeniseHexadecimal:
.2266	20 10 22	jsr $2210			jsr 	TOKGetNext 					; consume the $
.2269	a2 08		ldx #$08			ldx 	#IFR0
.226b	20 bc 33	jsr $33bc			jsr 	IFloatSetZero 				; set R0 = 0
.226e					_TTHLoop:
.226e	20 0c 22	jsr $220c			jsr 	TOKGet 						; keep getting and copying while numeric.
.2271	20 36 24	jsr $2436			jsr 	TOKIsHexadecimal
.2274	90 23		bcc $2299			bcc 	_TTHDone
.2276	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.2278	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.227b	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.227e	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.2281	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.2284	20 10 22	jsr $2210			jsr 	TOKGetNext
.2287	20 fa 23	jsr $23fa			jsr 	TOKToUpper 					; make U/C
.228a	38		sec				sec 								; convert to decimal.
.228b	e9 30		sbc #$30			sbc 	#48
.228d	c9 0a		cmp #$0a			cmp 	#10
.228f	90 02		bcc $2293			bcc 	_TTHNotAlpha
.2291	e9 07		sbc #$07			sbc 	#7
.2293					_TTHNotAlpha:
.2293	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2295	85 08		sta $08				sta 	IFR0+IM0
.2297	80 d5		bra $226e			bra 	_TTHLoop
.2299					_TTHDone:
.2299	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.229b	20 fd 21	jsr $21fd			jsr 	TOKWriteA
.229e	20 3f 21	jsr $213f			jsr 	TOKTokeniseConstant 		; write integer out.
.22a1	18		clc				clc
.22a2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.22a3					TOKTokeniseIdentifier:
.22a3	20 2c 21	jsr $212c			jsr 	TOKResetElement 			; extract an identifier
.22a6					_TOKGetIdentifier:
.22a6	20 0c 22	jsr $220c			jsr 	TOKGet
.22a9	20 fa 23	jsr $23fa			jsr 	TOKToUpper
.22ac	20 1c 24	jsr $241c			jsr 	TOKIsIdentifierElement
.22af	90 08		bcc $22b9			bcc 	_TOKEndIdent
.22b1	20 30 21	jsr $2130			jsr		TOKWriteElement
.22b4	20 10 22	jsr $2210			jsr 	TOKGetNext
.22b7	80 ed		bra $22a6			bra 	_TOKGetIdentifier
.22b9					_TOKEndIdent:
.22b9	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.22bb	d0 06		bne $22c3			bne 	_TOKNotString
.22bd	20 30 21	jsr $2130			jsr 	TOKWriteElement 			; add it
.22c0	20 10 22	jsr $2210			jsr 	TOKGetNext 					; consume it
.22c3					_TOKNotString:
.22c3	20 0c 22	jsr $220c			jsr 	TOKGet 						; finally check for (
.22c6	c9 28		cmp #$28			cmp 	#"("
.22c8	d0 06		bne $22d0			bne 	_TOKNoArray
.22ca	20 30 21	jsr $2130			jsr 	TOKWriteElement 			; add it
.22cd	20 10 22	jsr $2210			jsr 	TOKGetNext 					; consume it
.22d0					_TOKNoArray:
.22d0	20 14 22	jsr $2214			jsr 	TOKFindToken 				; find it
.22d3	90 18		bcc $22ed			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.22d5	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.22d7	f0 0f		beq $22e8			beq 	_TOKComment 				; yes, do comment code.
.22d9	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.22db	d0 06		bne $22e3			bne 	_TOKNoShift
.22dd	48		pha				pha 								; write the shift.
.22de	8a		txa				txa
.22df	20 fd 21	jsr $21fd			jsr 	TOKWriteA
.22e2	68		pla				pla
.22e3					_TOKNoShift:
.22e3	20 fd 21	jsr $21fd			jsr 	TOKWriteA 					; write the main token.
.22e6	18		clc				clc
.22e7	60		rts				rts
.22e8					_TOKComment:
.22e8	20 2d 23	jsr $232d			jsr 	TOKDoComment
.22eb	18		clc				clc
.22ec	60		rts				rts
.22ed					_TOKIsVariable:
.22ed	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.22ef					_TOKOutputBuffer:
.22ef	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.22f2	20 1b 23	jsr $231b			jsr 	TOKTranslateIdentifier
.22f5	20 fd 21	jsr $21fd			jsr 	TOKWriteA
.22f8	e8		inx				inx
.22f9	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.22fc	20 1c 24	jsr $241c			jsr 	TOKIsIdentifierElement
.22ff	b0 ee		bcs $22ef			bcs 	_TOKOutputBuffer
.2301	a8		tay				tay 								; last char in Y
.2302	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2304	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2306	f0 0e		beq $2316			beq 	_TOKIVExit
.2308	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.230a	d0 04		bne $2310			bne 	_TOKIVCheckArray 			; no, check for (
.230c	1a		inc a				inc 	a 							; token is $7D
.230d	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.2310					_TOKIVCheckArray:
.2310	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2312	d0 02		bne $2316			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2314	1a		inc a				inc 	a
.2315	1a		inc a				inc 	a
.2316					_TOKIVExit:
.2316	20 fd 21	jsr $21fd			jsr 	TOKWriteA 					; ending token
.2319	18		clc				clc
.231a	60		rts				rts
.231b					TOKTranslateIdentifier:
.231b	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.231d	f0 0b		beq $232a			beq 	_TTI64
.231f	38		sec				sec
.2320	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2322	10 03		bpl $2327			bpl 	_TTIExit
.2324	18		clc				clc 								; map 09 onto 26-35
.2325	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2327					_TTIExit:
.2327	09 40		ora #$40			ora 	#$40 						; correct range.
.2329	60		rts				rts
.232a	a9 64		lda #$64	_TTI64:	lda 	#$64
.232c	60		rts				rts
.232d					TOKDoComment:
.232d	20 fd 21	jsr $21fd			jsr 	TOKWriteA					; output the token.
.2330					_TOKSkipSpaces:
.2330	20 0c 22	jsr $220c			jsr 	TOKGet 						; skip over spaces
.2333	c9 20		cmp #$20			cmp 	#' '
.2335	d0 05		bne $233c			bne 	_TOKEndSpaces
.2337	20 10 22	jsr $2210			jsr 	TOKGetNext
.233a	80 f4		bra $2330			bra 	_TOKSkipSpaces
.233c					_TOKEndSpaces:
.233c	48		pha				pha 								; save it
.233d	68		pla				pla
.233e	f0 04		beq $2344			beq 	_TOKDCExit 					; end of line.
.2340	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.2342	d0 01		bne $2345			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.2344					_TOKDCExit:
.2344	60		rts				rts
.2345					_TOKDCDoLine:
.2345	20 2c 21	jsr $212c			jsr 	TOKResetElement 			; start getting the string
.2348					_TOKDCLoop:
.2348	20 0c 22	jsr $220c			jsr 	TOKGet 						; check EOL
.234b	c9 00		cmp #$00			cmp 	#0
.234d	f0 08		beq $2357			beq 	_TOKDCEndComment
.234f	20 10 22	jsr $2210			jsr 	TOKGetNext 					; get and consume
.2352	20 30 21	jsr $2130			jsr 	TOKWriteElement
.2355	80 f1		bra $2348			bra 	_TOKDCLoop
.2357					_TOKDCEndComment:
.2357	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2359	20 fd 21	jsr $21fd			jsr 	TOKWriteA
.235c	20 71 21	jsr $2171			jsr 	TOKOutputElementBuffer
.235f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2360					TOKTokeniseInteger:
.2360	20 89 23	jsr $2389			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2363	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.2365	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2367	ad 1c 05	lda $051c			lda		TOKElement
.236a	20 20 32	jsr $3220			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.236d	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.2370	f0 12		beq $2384			beq 	_TOKNotLineNumber
.2372	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.2374	d0 0c		bne $2382			bne 	_TOKBadLineNumeber
.2376	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2378	8d 01 04	sta $0401			sta 	TOKLineNumber
.237b	a5 09		lda $09				lda 	IFR0+IM1
.237d	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2380	18		clc				clc
.2381	60		rts				rts
.2382					_TOKBadLineNumeber:
.2382	38		sec				sec
.2383	60		rts				rts
.2384					_TOKNotLineNumber:
.2384	20 3f 21	jsr $213f			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2387	18		clc				clc
.2388	60		rts				rts
.2389					TOKExtractInteger:
.2389	20 2c 21	jsr $212c			jsr 	TOKResetElement 			; restart
.238c					_TTILoop:
.238c	20 0c 22	jsr $220c			jsr 	TOKGet 						; keep getting and copying while numeric.
.238f	20 10 24	jsr $2410			jsr 	TOKIsDigit
.2392	90 08		bcc $239c			bcc 	_TOKEIExit
.2394	20 30 21	jsr $2130			jsr 	TOKWriteElement
.2397	20 10 22	jsr $2210			jsr 	TOKGetNext
.239a	80 f0		bra $238c			bra 	_TTILoop
.239c					_TOKEIExit:
.239c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.239d					TOKTokenisePunctuation:
.239d	20 2c 21	jsr $212c			jsr 	TOKResetElement 			; copy first punctuation character into element.
.23a0	20 10 22	jsr $2210			jsr 	TOKGetNext
.23a3	20 30 21	jsr $2130			jsr 	TOKWriteElement
.23a6	20 0c 22	jsr $220c			jsr 	TOKGet 						; what follows ?
.23a9	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.23ab	f0 10		beq $23bd			beq 	_TTPOne
.23ad	20 20 24	jsr $2420			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.23b0	b0 0b		bcs $23bd			bcs 	_TTPOne 					; these speed things up a bit.
.23b2	20 30 21	jsr $2130			jsr 	TOKWriteElement 			; this is what we will search for.
.23b5	20 14 22	jsr $2214			jsr 	TOKFindToken
.23b8	b0 0a		bcs $23c4			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.23ba	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.23bd					_TTPOne:
.23bd	20 14 22	jsr $2214			jsr 	TOKFindToken 				; look for one character punctuation
.23c0	b0 07		bcs $23c9			bcs 	_TTPOutputExit 				; we found it
.23c2	38		sec				sec 								; not recognised.
.23c3	60		rts				rts
.23c4					_TTPConsumeExit:
.23c4	48		pha				pha
.23c5	20 10 22	jsr $2210			jsr 	TOKGetNext 					; get the 2nd char out.
.23c8	68		pla				pla
.23c9					_TTPOutputExit:
.23c9	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.23cb	f0 05		beq $23d2			beq 	_TTPComment
.23cd	20 fd 21	jsr $21fd			jsr  	TOKWriteA 					; write token out
.23d0	18		clc				clc
.23d1	60		rts				rts
.23d2					_TTPComment:
.23d2	20 2d 23	jsr $232d			jsr 	TOKDoComment
.23d5	18		clc				clc
.23d6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.23d7					TOKTokeniseString:
.23d7	20 10 22	jsr $2210			jsr 	TOKGetNext 					; consume the "
.23da	20 2c 21	jsr $212c			jsr 	TOKResetElement 			; start getting the string
.23dd					_TOKTSLoop:
.23dd	20 0c 22	jsr $220c			jsr 	TOKGet 						; check EOL
.23e0	c9 00		cmp #$00			cmp 	#0
.23e2	f0 0c		beq $23f0			beq 	_TOKTSExit
.23e4	20 10 22	jsr $2210			jsr 	TOKGetNext 					; get and consume
.23e7	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.23e9	f0 05		beq $23f0			beq 	_TOKTSExit
.23eb	20 30 21	jsr $2130			jsr 	TOKWriteElement
.23ee	80 ed		bra $23dd			bra 	_TOKTSLoop
.23f0					_TOKTSExit:
.23f0	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.23f2	20 fd 21	jsr $21fd			jsr 	TOKWriteA
.23f5	20 71 21	jsr $2171			jsr 	TOKOutputElementBuffer
.23f8	18		clc				clc
.23f9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.23fa					TOKToUpper:
.23fa	c9 61		cmp #$61			cmp 	#"a"
.23fc	90 06		bcc $2404			bcc 	_TTUNotLower
.23fe	c9 7b		cmp #$7b			cmp 	#"z"+1
.2400	b0 02		bcs $2404			bcs 	_TTUNotLower
.2402	49 20		eor #$20			eor 	#$20
.2404					_TTUNotLower:
.2404	60		rts				rts
.2405					TOKToLower:
.2405	c9 41		cmp #$41			cmp 	#"A"
.2407	90 06		bcc $240f			bcc 	_TTUNotUpper
.2409	c9 5b		cmp #$5b			cmp 	#"Z"+1
.240b	b0 02		bcs $240f			bcs 	_TTUNotUpper
.240d	49 20		eor #$20			eor 	#$20
.240f					_TTUNotUpper:
.240f	60		rts				rts
.2410					TOKIsDigit:
.2410	c9 30		cmp #$30			cmp 	#"0"
.2412	90 06		bcc $241a			bcc 	TOKFail
.2414	c9 3a		cmp #$3a			cmp 	#"9"+1
.2416	b0 02		bcs $241a			bcs 	TOKFail
.2418					TOKSucceed:
.2418	38		sec				sec
.2419	60		rts				rts
.241a					TOKFail:
.241a	18		clc				clc
.241b	60		rts				rts
.241c					TOKIsIdentifierElement:
.241c	c9 5f		cmp #$5f			cmp 	#"_"
.241e	f0 f8		beq $2418			beq 	TOKSucceed 					; else fall through to alphanumeric
.2420					TOKIsAlphaNumeric:
.2420	20 29 24	jsr $2429			jsr 	TOKIsAlpha
.2423	b0 f3		bcs $2418			bcs 	TOKSucceed
.2425	20 10 24	jsr $2410			jsr 	TOKIsDigit
.2428	60		rts				rts
.2429					TOKIsAlpha:
.2429	20 fa 23	jsr $23fa			jsr 	TOKToUpper
.242c	c9 41		cmp #$41			cmp 	#"A"
.242e	90 ea		bcc $241a			bcc 	TOKFail
.2430	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2432	b0 e6		bcs $241a			bcs 	TOKFail
.2434	80 e2		bra $2418			bra 	TOKSucceed
.2436					TOKIsHexadecimal:
.2436	20 10 24	jsr $2410			jsr		TOKIsDigit
.2439	b0 dd		bcs $2418			bcs 	TOKSucceed
.243b	20 29 24	jsr $2429			jsr 	TOKIsAlpha
.243e	90 da		bcc $241a			bcc 	TOKFail
.2440	c9 47		cmp #$47			cmp 	#"F"+1
.2442	b0 d6		bcs $241a			bcs 	TOKFail
.2444	80 d2		bra $2418			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2446					Command_CALL:
.2446	a9 42		lda #$42			lda 	#STK_CALL
.2448	20 38 29	jsr $2938			jsr 	StackOpen
.244b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.244d	29 c0		and #$c0			and 	#$C0
.244f	c9 40		cmp #$40			cmp 	#$40
.2451	d0 29		bne $247c			bne 	_CCSyntax
.2453	20 ff 2c	jsr $2cff			jsr 	VARGetInfo 					; get the information
.2456	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 				; check right bracket follows.
.2459	20 b1 2c	jsr $2cb1			jsr 	VARFind 					; exists ?
.245c	90 21		bcc $247f			bcc 	_CCUnknown
.245e	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.2460	85 24		sta $24				sta 	zTemp0
.2462	20 6b 29	jsr $296b			jsr 	STKSaveCodePosition 		; save return address on stack.
.2465	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2467	b1 24		lda ($24),y			lda 	(zTemp0),y
.2469	c9 ff		cmp #$ff			cmp 	#$FF
.246b	d0 12		bne $247f			bne 	_CCUnknown
.246d	88		dey				dey 								; get Y offset to stack
.246e	b1 24		lda ($24),y			lda 	(zTemp0),y
.2470	48		pha				pha
.2471	88		dey				dey 								; get address
.2472	b1 24		lda ($24),y			lda 	(zTemp0),y
.2474	85 19		sta $19				sta 	codePtr+1
.2476	b2 24		lda ($24)			lda 	(zTemp0)
.2478	85 18		sta $18				sta 	codePtr
.247a	7a		ply				ply 								; restore Y
.247b	60		rts				rts
.247c					_CCSyntax:
.247c	4c 46 27	jmp $2746		jmp	ErrorV_syntax
.247f					_CCUnknown:
.247f	4c bb 28	jmp $28bb		jmp	ErrorV_unknown
.2482					Command_ENDPROC:
.2482	a9 42		lda #$42			lda 	#STK_CALL
.2484	20 63 29	jsr $2963			jsr 	StackCheckFrame
.2487	20 7d 29	jsr $297d			jsr 	STKLoadCodePosition 		; return
.248a	20 55 29	jsr $2955			jsr 	StackClose
.248d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.248e					Command_DO:
.248e	a9 22		lda #$22			lda 	#STK_DO
.2490	20 38 29	jsr $2938			jsr 	StackOpen
.2493	20 6b 29	jsr $296b			jsr 	STKSaveCodePosition 		; save loop position
.2496	60		rts				rts
.2497					Command_EXIT:
.2497	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2499	20 63 29	jsr $2963			jsr 	StackCheckFrame
.249c	20 55 29	jsr $2955			jsr 	StackClose 					; close it
.249f	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.24a1	aa		tax				tax
.24a2	20 56 26	jsr $2656			jsr 	ScanForward
.24a5	60		rts				rts
.24a6					Command_LOOP:
.24a6	a9 22		lda #$22			lda 	#STK_DO
.24a8	20 63 29	jsr $2963			jsr 	StackCheckFrame
.24ab	20 7d 29	jsr $297d			jsr 	STKLoadCodePosition 		; loop back
.24ae	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.24af					Command_FOR:
.24af	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.24b1	20 38 29	jsr $2938			jsr 	StackOpen
.24b4	20 bf 12	jsr $12bf			jsr 	CommandLET 					; do "I = 1" bit
.24b7	5a		phy				phy 								; save variable address to +4,+5
.24b8	a0 04		ldy #$04			ldy 	#4
.24ba	a5 24		lda $24				lda 	zTemp0
.24bc	91 2c		sta ($2c),y			sta 	(basicStack),y
.24be	c8		iny				iny
.24bf	a5 25		lda $25				lda 	zTemp0+1
.24c1	91 2c		sta ($2c),y			sta 	(basicStack),y
.24c3	7a		ply				ply
.24c4	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.24c6	20 2f 29	jsr $292f			jsr 	ERRCheckA
.24c9	20 57 17	jsr $1757			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.24cc	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.24ce	a2 08		ldx #$08			ldx 	#IFR0
.24d0	20 25 25	jsr $2525			jsr 	CFSaveR0X
.24d3	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.24d5	c9 91		cmp #$91			cmp 	#PR_STEP
.24d7	d0 06		bne $24df			bne 	_CFStep1
.24d9	c8		iny				iny 								; consume step
.24da	20 57 17	jsr $1757			jsr 	EXPEvalNumber 				; evaluate STEP
.24dd	80 24		bra $2503			bra 	_CFWriteStep
.24df					_CFStep1:
.24df	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.24e1	a9 01		lda #$01			lda 	#1
.24e3	20 be 33	jsr $33be			jsr 	IFloatSetByte
.24e6	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.24e7	a0 04		ldy #$04			ldy 	#4 							; get variable address
.24e9	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24eb	85 24		sta $24				sta 	zTemp0
.24ed	c8		iny				iny
.24ee	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24f0	85 25		sta $25				sta 	zTemp0+1
.24f2	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.24f4	b1 24		lda ($24),y			lda 	(zTemp0),y
.24f6	d0 0a		bne $2502			bne 	_CFNotOptimised
.24f8	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.24fa	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24fc	d0 04		bne $2502			bne 	_CFNotOptimised
.24fe	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2500	85 0b		sta $0b				sta 	IFR0+IExp
.2502					_CFNotOptimised:
.2502	7a		ply				ply
.2503					_CFWriteStep:
.2503	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2505	a9 06		lda #$06			lda 	#6
.2507	20 25 25	jsr $2525			jsr 	CFSaveR0X
.250a	20 6b 29	jsr $296b			jsr 	STKSaveCodePosition 		; save loop position
.250d	60		rts				rts
.250e					CFLoadR0X:
.250e	5a		phy				phy
.250f	a8		tay				tay
.2510	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2512	95 00		sta $00,x			sta 	IM0,x
.2514	c8		iny				iny
.2515	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2517	95 01		sta $01,x			sta 	IM1,x
.2519	c8		iny				iny
.251a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.251c	95 02		sta $02,x			sta 	IM2,x
.251e	c8		iny				iny
.251f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2521	95 03		sta $03,x			sta 	IExp,x
.2523	7a		ply				ply
.2524	60		rts				rts
.2525					CFSaveR0X:
.2525	5a		phy				phy
.2526	a8		tay				tay
.2527	b5 00		lda $00,x			lda 	IM0,x
.2529	91 2c		sta ($2c),y			sta 	(basicStack),y
.252b	c8		iny				iny
.252c	b5 01		lda $01,x			lda 	IM1,x
.252e	91 2c		sta ($2c),y			sta 	(basicStack),y
.2530	c8		iny				iny
.2531	b5 02		lda $02,x			lda 	IM2,x
.2533	91 2c		sta ($2c),y			sta 	(basicStack),y
.2535	c8		iny				iny
.2536	b5 03		lda $03,x			lda 	IExp,x
.2538	91 2c		sta ($2c),y			sta 	(basicStack),y
.253a	7a		ply				ply
.253b	60		rts				rts
.253c					Command_NEXT:
.253c	a9 37		lda #$37			lda 	#STK_FOR
.253e	20 63 29	jsr $2963			jsr 	StackCheckFrame
.2541	5a		phy				phy 								; check optimised loop
.2542	a0 09		ldy #$09			ldy 	#9
.2544	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2546	7a		ply				ply
.2547	0a		asl a				asl 	a
.2548	b0 35		bcs $257f			bcs 	_CNOptimised
.254a	20 b7 25	jsr $25b7			jsr 	_CNLoadValue 				; load index value to R0.
.254d	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.254f	a9 06		lda #$06			lda 	#6
.2551	20 0e 25	jsr $250e			jsr 	CFLoadR0X
.2554	20 b4 2d	jsr $2db4			jsr 	IFloatAdd 					; add them together and write back.
.2557	20 da 25	jsr $25da			jsr 	_CNSaveValue
.255a	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.255c	a2 0c		ldx #$0c			ldx 	#IFR1
.255e	20 0e 25	jsr $250e			jsr 	CFLoadR0X
.2561	20 8b 30	jsr $308b			jsr 	IFloatCompare 				; compare terminal vs current
.2564	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2566	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero
.2569	f0 10		beq $257b			beq 	_CNLoopBack
.256b	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.256d	5a		phy				phy
.256e	a0 09		ldy #$09			ldy 	#6+IExp
.2570	51 2c		eor ($2c),y			eor 	(basicStack),y
.2572	7a		ply				ply
.2573	29 40		and #$40			and 	#IFSign
.2575	f0 04		beq $257b			beq 	_CNLoopBack
.2577					_CNExitLoop:
.2577	20 55 29	jsr $2955			jsr 	StackClose		 			; return
.257a	60		rts				rts
.257b					_CNLoopBack:
.257b	20 7d 29	jsr $297d			jsr 	STKLoadCodePosition 		; loop back
.257e	60		rts				rts
.257f					_CNOptimised:
.257f	5a		phy				phy
.2580	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2582	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2584	85 28		sta $28				sta 	zTemp2
.2586	c8		iny				iny
.2587	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2589	85 29		sta $29				sta 	zTemp2+1
.258b	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.258d					_CNIncrement:
.258d	c8		iny				iny
.258e	b1 28		lda ($28),y			lda 	(zTemp2),y
.2590	1a		inc a				inc 	a
.2591	91 28		sta ($28),y			sta 	(zTemp2),y
.2593	f0 f8		beq $258d			beq 	_CNIncrement
.2595	18		clc				clc 								; point zTemp0 to terminal value
.2596	a5 2c		lda $2c				lda 	basicStack
.2598	69 0a		adc #$0a			adc 	#10
.259a	85 24		sta $24				sta 	zTemp0
.259c	a5 2d		lda $2d				lda 	basicStack+1
.259e	69 00		adc #$00			adc 	#0
.25a0	85 25		sta $25				sta 	zTemp0+1
.25a2	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.25a4	18		clc				clc 								; borrow 1, we want > not >=
.25a5	b2 28		lda ($28)			lda 	(zTemp2)
.25a7	f2 24		sbc ($24)			sbc 	(zTemp0)
.25a9	b1 28		lda ($28),y			lda 	(zTemp2),y
.25ab	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.25ad	c8		iny				iny
.25ae	b1 28		lda ($28),y			lda 	(zTemp2),y
.25b0	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.25b2	7a		ply				ply
.25b3	b0 c2		bcs $2577			bcs 	_CNExitLoop
.25b5	80 c4		bra $257b			bra 	_CNLoopBack
.25b7					_CNLoadValue:
.25b7	5a		phy				phy
.25b8	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.25ba	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25bc	85 28		sta $28				sta 	zTemp2
.25be	c8		iny				iny
.25bf	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25c1	85 29		sta $29				sta 	zTemp2+1
.25c3	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.25c5	b1 28		lda ($28),y			lda 	(zTemp2),y
.25c7	85 08		sta $08				sta 	IFR0+IM0
.25c9	c8		iny				iny
.25ca	b1 28		lda ($28),y			lda 	(zTemp2),y
.25cc	85 09		sta $09				sta 	IFR0+IM1
.25ce	c8		iny				iny
.25cf	b1 28		lda ($28),y			lda 	(zTemp2),y
.25d1	85 0a		sta $0a				sta 	IFR0+IM2
.25d3	c8		iny				iny
.25d4	b1 28		lda ($28),y			lda 	(zTemp2),y
.25d6	85 0b		sta $0b				sta 	IFR0+IExp
.25d8	7a		ply				ply
.25d9	60		rts				rts
.25da					_CNSaveValue:
.25da	5a		phy				phy
.25db	a0 00		ldy #$00			ldy 	#0
.25dd	a5 08		lda $08				lda 	IFR0+IM0
.25df	91 28		sta ($28),y			sta 	(zTemp2),y
.25e1	c8		iny				iny
.25e2	a5 09		lda $09				lda 	IFR0+IM1
.25e4	91 28		sta ($28),y			sta 	(zTemp2),y
.25e6	c8		iny				iny
.25e7	a5 0a		lda $0a				lda 	IFR0+IM2
.25e9	91 28		sta ($28),y			sta 	(zTemp2),y
.25eb	c8		iny				iny
.25ec	a5 0b		lda $0b				lda 	IFR0+IExp
.25ee	91 28		sta ($28),y			sta 	(zTemp2),y
.25f0	7a		ply				ply
.25f1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.25f2					Command_GOSUB:
.25f2	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; get line number
.25f5	a9 52		lda #$52			lda 	#STK_GOSUB
.25f7	20 38 29	jsr $2938			jsr 	StackOpen
.25fa	20 6b 29	jsr $296b			jsr 	STKSaveCodePosition 		; save return address on stack.
.25fd	4c e0 11	jmp $11e0			jmp 	GotoR0
.2600					Command_RETURN:
.2600	a9 52		lda #$52			lda 	#STK_GOSUB
.2602	20 63 29	jsr $2963			jsr 	StackCheckFrame
.2605	20 7d 29	jsr $297d			jsr 	STKLoadCodePosition 		; return
.2608	20 55 29	jsr $2955			jsr 	StackClose
.260b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.260c					IfCommand:
.260c	20 57 17	jsr $1757			jsr 	EXPEvalNumber 				; Get the if test.
.260f	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2611	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2613	d0 0c		bne $2621			bne 	_IfStructured 				; we still support it.
.2615	c8		iny				iny 								; consume THEN
.2616	a2 08		ldx #$08			ldx 	#IFR0
.2618	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero 			; is it zero
.261b	f0 01		beq $261e			beq 	_IfFail 					; if fail, go to next line
.261d	60		rts				rts 								; if THEN just continue
.261e					_IfFail:
.261e	4c 18 15	jmp $1518			jmp 	RUNEndOfLine
.2621					_IfStructured:
.2621	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero 			; is it zero
.2624	d0 07		bne $262d			bne 	_IfExit 					; if not, then continue normally.
.2626	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2628	a2 85		ldx #$85			ldx 	#PR_ENDIF
.262a	20 56 26	jsr $2656			jsr 	ScanForward 				; and run from there
.262d					_IfExit:
.262d	60		rts				rts
.262e					ElseCode:
.262e	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2630	aa		tax				tax 								; so just go to the structure exit
.2631	20 56 26	jsr $2656			jsr 	ScanForward
.2634	60		rts				rts
.2635					EndIf:
.2635	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2636					Command_REPEAT:
.2636	a9 02		lda #$02			lda 	#STK_REPEAT
.2638	20 38 29	jsr $2938			jsr 	StackOpen
.263b	20 6b 29	jsr $296b			jsr 	STKSaveCodePosition 		; save loop position
.263e	60		rts				rts
.263f					Command_UNTIL:
.263f	a9 02		lda #$02			lda 	#STK_REPEAT
.2641	20 63 29	jsr $2963			jsr 	StackCheckFrame
.2644	20 57 17	jsr $1757			jsr 	EXPEvalNumber 				; work out the test
.2647	a2 08		ldx #$08			ldx 	#IFR0
.2649	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero 			; check if zero
.264c	f0 04		beq $2652			beq 	_CULoopBack 				; if so keep looping
.264e	20 55 29	jsr $2955			jsr 	StackClose		 			; return
.2651	60		rts				rts
.2652					_CULoopBack:
.2652	20 7d 29	jsr $297d			jsr 	STKLoadCodePosition 		; loop back
.2655	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2656					ScanForward:
.2656	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.2658	86 25		stx $25				stx 	zTemp0+1
.265a	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.265c					_ScanForwardLoop:
.265c	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.265e	d0 0a		bne $266a			bne 	_ScanNoCheck
.2660	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2662	c5 24		cmp $24				cmp 	zTemp0
.2664	f0 49		beq $26af			beq 	_ScanExit
.2666	c5 25		cmp $25				cmp 	zTemp0+1
.2668	f0 45		beq $26af			beq 	_ScanExit
.266a					_ScanNoCheck:
.266a	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.266c	c8		iny				iny
.266d	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.266f	f0 37		beq $26a8			beq		_ScanDataItem
.2671	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2673	f0 33		beq $26a8			beq 	_ScanDataItem
.2675	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2677	f0 1b		beq $2694			beq 	_ScanNextLine
.2679	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.267b	d0 01		bne $267e			bne 	_ScanNoShift
.267d	c8		iny				iny
.267e					_ScanNoShift:
.267e	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2680	b0 da		bcs $265c			bcs 	_ScanForwardLoop
.2682	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2684	90 d6		bcc $265c			bcc 	_ScanForwardLoop
.2686	aa		tax				tax 								; access the table to get the adjustment.
.2687	18		clc				clc
.2688	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.268a	7d 72 1b	adc $1b72,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.268d	85 26		sta $26				sta 	zTemp1
.268f	10 cb		bpl $265c			bpl		_ScanForwardLoop 			; error if -ve ?
.2691	4c d2 27	jmp $27d2		jmp	ErrorV_structure
.2694					_ScanNextLine:
.2694	18		clc				clc	 								; forward to next line.
.2695	b2 18		lda ($18)			lda 	(codePtr)
.2697	65 18		adc $18				adc 	codePtr
.2699	85 18		sta $18				sta 	codePtr
.269b	90 02		bcc $269f			bcc 	_ScanNoCarry
.269d	e6 19		inc $19				inc 	codePtr+1
.269f					_ScanNoCarry:
.269f	a0 03		ldy #$03			ldy 	#3
.26a1	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.26a3	d0 b7		bne $265c			bne 	_ScanForwardLoop
.26a5	4c d2 27	jmp $27d2		jmp	ErrorV_structure
.26a8					_ScanDataItem:
.26a8	98		tya				tya
.26a9	38		sec				sec
.26aa	71 18		adc ($18),y			adc 	(codePtr),y
.26ac	a8		tay				tay
.26ad	80 ad		bra $265c			bra 	_ScanForwardLoop
.26af					_ScanExit:
.26af	c8		iny				iny 								; consume final token.
.26b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.26b1					ScanProcedures:
.26b1	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.26b3	48		pha				pha
.26b4	a5 19		lda $19				lda 	codePtr+1
.26b6	48		pha				pha
.26b7	5a		phy				phy
.26b8	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.26bb	85 19		sta $19				sta 	codePtr+1
.26bd	64 18		stz $18				stz 	codePtr
.26bf					_SPLoop:
.26bf	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.26c1	f0 18		beq $26db			beq 	_SPExit
.26c3	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.26c5	b1 18		lda ($18),y			lda 	(codePtr),y
.26c7	c9 88		cmp #$88			cmp 	#PR_PROC
.26c9	d0 03		bne $26ce			bne 	_SPNext
.26cb	20 e3 26	jsr $26e3			jsr 	_SPSetupRecord
.26ce					_SPNext:
.26ce	18		clc				clc 								; forward to next
.26cf	b2 18		lda ($18)			lda 	(codePtr)
.26d1	65 18		adc $18				adc 	codePtr
.26d3	85 18		sta $18				sta 	codePtr
.26d5	90 e8		bcc $26bf			bcc 	_SPLoop
.26d7	e6 19		inc $19				inc 	codePtr+1
.26d9	80 e4		bra $26bf			bra 	_SPLoop
.26db					_SPExit:
.26db	7a		ply				ply
.26dc	68		pla				pla
.26dd	85 19		sta $19				sta 	codePtr+1
.26df	68		pla				pla
.26e0	85 18		sta $18				sta 	codePtr
.26e2	60		rts				rts
.26e3					_SPSetupRecord:
.26e3	c8		iny				iny 								; check identifier follows
.26e4	b1 18		lda ($18),y			lda 	(codePtr),y
.26e6	29 c0		and #$c0			and 	#$C0
.26e8	c9 40		cmp #$40			cmp 	#$40
.26ea	d0 27		bne $2713			bne 	_SPSyntax
.26ec	20 ff 2c	jsr $2cff			jsr 	VARGetInfo 					; get the information
.26ef	20 1f 29	jsr $291f			jsr 	ERRCheckRParen 				; check right bracket follows.
.26f2	20 b1 2c	jsr $2cb1			jsr 	VARFind 					; already exists ?
.26f5	b0 1f		bcs $2716			bcs 	_SPUsed 					; error !
.26f7	20 5d 2c	jsr $2c5d			jsr 	VARCreate 					; create, XA points to the data.
.26fa	85 24		sta $24				sta 	zTemp0
.26fc	86 25		stx $25				stx 	zTemp0+1
.26fe	5a		phy				phy 								; save Y pos on stack
.26ff	a0 01		ldy #$01			ldy 	#1
.2701	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2703	92 24		sta ($24)			sta 	(zTemp0)
.2705	a5 19		lda $19				lda 	codePtr+1
.2707	91 24		sta ($24),y			sta 	(zTemp0),y
.2709	c8		iny				iny
.270a	68		pla				pla
.270b	91 24		sta ($24),y			sta 	(zTemp0),y
.270d	c8		iny				iny
.270e	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2710	91 24		sta ($24),y			sta 	(zTemp0),y
.2712	60		rts				rts
.2713					_SPSyntax:
.2713	4c 46 27	jmp $2746		jmp	ErrorV_syntax
.2716					_SPUsed:
.2716	4c 9d 28	jmp $289d		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2719					Command_WHILE:
.2719	5a		phy				phy 								; save position of the test
.271a	20 57 17	jsr $1757			jsr 	EXPEvalNumber 				; work out the while test.
.271d	a2 08		ldx #$08			ldx 	#IFR0
.271f	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero 			; check if zero
.2722	f0 0e		beq $2732			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2724	98		tya				tya 								; position *after* test.
.2725	7a		ply				ply 								; restore position before test, at WHILE
.2726	88		dey				dey 								; so we execute the WHILE command again.
.2727	48		pha				pha 								; push after test on the stack
.2728	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.272a	20 38 29	jsr $2938			jsr 	StackOpen
.272d	20 6b 29	jsr $296b			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2730	7a		ply				ply 								; restore the position *after* the test
.2731	60		rts				rts
.2732					_WHExitLoop:
.2732	68		pla				pla 								; throw post loop position
.2733	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2735	aa		tax				tax
.2736	20 56 26	jsr $2656			jsr 	ScanForward
.2739	60		rts				rts
.273a					Command_WEND:
.273a	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.273c	20 63 29	jsr $2963			jsr 	StackCheckFrame
.273f	20 7d 29	jsr $297d			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2742	20 55 29	jsr $2955			jsr 	StackClose		 			; erase the frame
.2745	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2746					ErrorV_syntax:
.2746	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>2749	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2751	45 72 72 6f 72 00
.2757					ErrorV_range:
.2757	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>275a	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2762	52 61 6e 67 65 00
.2768					ErrorV_value:
.2768	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>276b	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2773	75 65 00
.2776					ErrorV_type:
.2776	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>2779	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2781	73 6d 61 74 63 68 00
.2788					ErrorV_unimplemented:
.2788	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>278b	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2793	6c 65 6d 65 6e 74 65 64 00
.279c					ErrorV_assert:
.279c	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>279f	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>27a7	46 61 69 6c 00
.27ac					ErrorV_internal:
.27ac	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>27af	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>27b7	6c 20 45 72 72 6f 72 00
.27bf					ErrorV_divzero:
.27bf	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>27c2	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>27ca	42 79 20 5a 65 72 6f 00
.27d2					ErrorV_structure:
.27d2	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>27d5	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>27dd	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.27ea					ErrorV_stop:
.27ea	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>27ed	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>27f5	20 53 74 6f 70 70 65 64 00
.27fe					ErrorV_data:
.27fe	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>2801	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2809	44 61 74 61 00
.280e					ErrorV_redefine:
.280e	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>2811	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2819	65 64 65 66 69 6e 65 64 00
.2822					ErrorV_index:
.2822	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>2825	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>282d	61 79 20 49 6e 64 65 78 00
.2836					ErrorV_memory:
.2836	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>2839	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2841	4d 65 6d 6f 72 79 00
.2848					ErrorV_uninitialised:
.2848	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>284b	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2853	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2863					ErrorV_string:
.2863	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>2866	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>286e	69 6e 67 20 4c 65 6e 67 74 68 00
.2879					ErrorV_variable:
.2879	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>287c	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2884	65 20 4d 69 73 73 69 6e 67 00
.288e					ErrorV_stack:
.288e	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>2891	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2899	75 6c 6c 00
.289d					ErrorV_dupproc:
.289d	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>28a0	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>28a8	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>28b8	65 64 00
.28bb					ErrorV_unknown:
.28bb	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>28be	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>28c6	20 50 72 6f 63 65 64 75 72 65 00
.28d1					ErrorV_break:
.28d1	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>28d4	05 42 72 65 61 6b 00			.text	5,"Break",0
.28db					ErrorV_line:
.28db	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>28de	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>28e6	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.28f3					ErrorV_fnf:
.28f3	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>28f6	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>28fe	74 20 46 6f 75 6e 64 00
.2906					ErrorV_full:
.2906	20 4d 2b	jsr $2b4d		jsr	ErrorHandler
>2909	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>2911	20 46 75 6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2917					ERRCheckLParen:
.2917	b1 18		lda ($18),y			lda 	(codePtr),y
.2919	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.291b	d0 18		bne $2935			bne 	ERRSyntaxError
.291d	c8		iny				iny
.291e	60		rts				rts
.291f					ERRCheckRParen:
.291f	b1 18		lda ($18),y			lda 	(codePtr),y
.2921	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2923	d0 10		bne $2935			bne 	ERRSyntaxError
.2925	c8		iny				iny
.2926	60		rts				rts
.2927					ERRCheckComma:
.2927	b1 18		lda ($18),y			lda 	(codePtr),y
.2929	c9 99		cmp #$99			cmp 	#PR_COMMA
.292b	d0 08		bne $2935			bne 	ERRSyntaxError
.292d	c8		iny				iny
.292e	60		rts				rts
.292f					ERRCheckA:
.292f	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2931	d0 02		bne $2935			bne 	ERRSyntaxError
.2933	c8		iny				iny
.2934	60		rts				rts
.2935					ERRSyntaxError:
.2935	4c 46 27	jmp $2746		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2938					StackOpen:
.2938	48		pha				pha 								; save frame byte
.2939	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.293b	0a		asl a				asl 	a 							; claim twice this for storage
.293c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.293e	38		sec				sec 								; so basically subtracting from
.293f	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.2941	85 2c		sta $2c				sta 	basicStack
.2943	b0 09		bcs $294e			bcs 	_SONoBorrow
.2945	c6 2d		dec $2d				dec 	basicStack+1
.2947	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.2949	cd 20 06	cmp $0620			cmp 	basicStackEnd
.294c	f0 04		beq $2952			beq 	_SOMemory
.294e					_SONoBorrow:
.294e	68		pla				pla 								; get marker back and write at TOS
.294f	92 2c		sta ($2c)			sta 	(basicStack)
.2951	60		rts				rts
.2952					_SOMemory:
.2952	4c 8e 28	jmp $288e		jmp	ErrorV_stack
.2955					StackClose:
.2955	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2957	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2959	0a		asl a				asl 	a 							; claim twice this.
.295a	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.295c	85 2c		sta $2c				sta 	basicStack
.295e	90 02		bcc $2962			bcc 	_SCExit
.2960	e6 2d		inc $2d				inc 	basicStack+1
.2962					_SCExit:
.2962	60		rts				rts
.2963					StackCheckFrame:
.2963	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2965	d0 01		bne $2968			bne 	_SCFError 					; different, we have structures mixed up
.2967	60		rts				rts
.2968					_SCFError:
.2968	4c d2 27	jmp $27d2		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.296b					STKSaveCodePosition:
.296b	5a		phy				phy
.296c	98		tya				tya 								; save Y at offset 1.
.296d	a0 01		ldy #$01			ldy 	#1
.296f	91 2c		sta ($2c),y			sta 	(basicStack),y
.2971	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2973	c8		iny				iny
.2974	91 2c		sta ($2c),y			sta 	(basicStack),y
.2976	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2978	c8		iny				iny
.2979	91 2c		sta ($2c),y			sta 	(basicStack),y
.297b	7a		ply				ply
.297c	60		rts				rts
.297d					STKLoadCodePosition:
.297d	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.297f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2981	85 19		sta $19				sta 	codePtr+1
.2983	88		dey				dey
.2984	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2986	85 18		sta $18				sta 	codePtr
.2988	88		dey				dey
.2989	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.298b	a8		tay				tay
.298c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.298d					StackReset:
.298d	48		pha				pha 								; save top of memory
.298e	3a		dec a				dec 	a  							; end of stack = previous byte
.298f	85 2d		sta $2d				sta 	basicStack+1
.2991	a9 ff		lda #$ff			lda 	#$FF
.2993	85 2c		sta $2c				sta 	basicStack
.2995	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2997	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2999	68		pla				pla 								; allocate pages for stack.
.299a	38		sec				sec
.299b	e9 02		sbc #$02			sbc 	#STACKPAGES
.299d	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.29a0	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.29a1					StringConcrete:
.29a1	5a		phy				phy 								; save position on stack
.29a2	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.29a4	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.29a6	b0 41		bcs $29e9			bcs 	_SALengthError
.29a8	18		clc				clc 								; length of the new string
.29a9	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.29ab	90 02		bcc $29af			bcc 	_SAHaveLength
.29ad	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.29af					_SAHaveLength:
.29af	48		pha				pha 								; save length to be allocated for concreting.
.29b0	38		sec				sec
.29b1	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.29b3	6d 22 06	adc $0622			adc 	stringMemory
.29b6	8d 22 06	sta $0622			sta 	stringMemory
.29b9	85 28		sta $28				sta 	zTemp2 						; update storage address
.29bb	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.29bd	6d 23 06	adc $0623			adc 	stringMemory+1
.29c0	8d 23 06	sta $0623			sta 	stringMemory+1
.29c3	85 29		sta $29				sta 	zTemp2+1
.29c5	68		pla				pla 								; save length allocated in +0
.29c6	92 28		sta ($28)			sta 	(zTemp2)
.29c8	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.29ca	a0 01		ldy #$01			ldy 	#1
.29cc	91 28		sta ($28),y			sta 	(zTemp2),y
.29ce					_SACopyNewString:
.29ce	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.29d0	a0 02		ldy #$02			ldy 	#2
.29d2	91 28		sta ($28),y			sta 	(zTemp2),y
.29d4	aa		tax				tax 								; bytes to copy
.29d5	f0 0c		beq $29e3			beq 	_SACopyExit
.29d7	a0 01		ldy #$01			ldy 	#1 							; first character from here
.29d9					_SACopyNSLoop:
.29d9	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.29db	c8		iny				iny 								; write two on in string storage
.29dc	c8		iny				iny
.29dd	91 28		sta ($28),y			sta 	(zTemp2),y
.29df	88		dey				dey
.29e0	ca		dex				dex									; until copied all the string lengths.
.29e1	d0 f6		bne $29d9			bne 	_SACopyNSLoop
.29e3					_SACopyExit:
.29e3	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.29e5	a5 28		lda $28				lda 	zTemp2
.29e7	7a		ply				ply
.29e8	60		rts				rts
.29e9					_SALengthError:
.29e9	4c 63 28	jmp $2863		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.29ec					StringSystemInitialise:
.29ec	3a		dec a				dec 	a 							; make last byte of previous page.
.29ed	8d 23 06	sta $0623			sta 	stringMemory+1
.29f0	85 25		sta $25				sta 	zTemp0+1
.29f2	a9 ff		lda #$ff			lda 	#$FF
.29f4	8d 22 06	sta $0622			sta 	stringMemory
.29f7	85 24		sta $24				sta 	zTemp0
.29f9	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.29fb	92 24		sta ($24)			sta 	(zTemp0)
.29fd	60		rts				rts
.29fe					StringSpaceInitialise:
.29fe	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2a00	8d 21 06	sta $0621			sta 	stringInitialised
.2a03	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2a06	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2a09	ad 23 06	lda $0623			lda 	stringMemory+1
.2a0c	3a		dec a				dec 	a
.2a0d	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2a10	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.2a13	60		rts				rts
.2a14					StringTempAllocate:
.2a14	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2a16	b0 2e		bcs $2a46			bcs 	_STALength
.2a18	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.2a1b	30 05		bmi $2a22			bmi 	_STAAllocate
.2a1d	48		pha				pha 								; save value to subtract.
.2a1e	20 fe 29	jsr $29fe			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2a21	68		pla				pla 								; restore it
.2a22					_STAAllocate:
.2a22	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2a24	18		clc				clc  								; deliberate allows one more
.2a25	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.2a28	8d 24 06	sta $0624			sta 	stringTempPointer
.2a2b	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2a2d	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2a2f	ad 25 06	lda $0625			lda 	stringTempPointer+1
.2a32	69 ff		adc #$ff			adc 	#$FF
.2a34	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2a37	85 2f		sta $2f				sta 	zsTemp+1
.2a39	85 09		sta $09				sta 	IFR0+IM1
.2a3b	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2a3d	a9 80		lda #$80			lda 	#$80
.2a3f	85 0b		sta $0b				sta 	IFR0+IExp
.2a41	a9 00		lda #$00			lda 	#0 							; clear the target string
.2a43	92 2e		sta ($2e)			sta 	(zsTemp)
.2a45	60		rts				rts
.2a46					_STALength:
.2a46	4c 63 28	jmp $2863		jmp	ErrorV_string
.2a49					StringTempWrite:
.2a49	5a		phy				phy
.2a4a	48		pha				pha
.2a4b	b2 2e		lda ($2e)			lda 	(zsTemp)
.2a4d	1a		inc a				inc 	a
.2a4e	92 2e		sta ($2e)			sta 	(zsTemp)
.2a50	a8		tay				tay
.2a51	68		pla				pla
.2a52	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2a54	7a		ply				ply
.2a55	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2a56					Command_DIR:
.2a56	5a		phy				phy
.2a57	38		sec				sec 								; reset read
.2a58	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2a5b	18		clc		_CDLoop:clc
.2a5c	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2a5f	b0 27		bcs $2a88			bcs 	_CDExit 					; no more
.2a61	86 24		stx $24				stx 	zTemp0
.2a63	84 25		sty $25				sty 	zTemp0+1
.2a65	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2a68					_CDPad:
.2a68	a9 20		lda #$20			lda 	#32
.2a6a	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2a6d	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2a70	e0 10		cpx #$10			cpx 	#16
.2a72	90 f4		bcc $2a68			bcc 	_CDPad
.2a74	a0 11		ldy #$11			ldy 	#17
.2a76	b1 24		lda ($24),y			lda 	(zTemp0),y
.2a78	aa		tax				tax
.2a79	88		dey				dey
.2a7a	b1 24		lda ($24),y			lda 	(zTemp0),y
.2a7c	20 76 2b	jsr $2b76			jsr 	WriteIntXA
.2a7f	a2 8a		ldx #$8a			ldx 	#_CDTail & $FF
.2a81	a0 2a		ldy #$2a			ldy 	#_CDTail >> 8
.2a83	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2a86	80 d3		bra $2a5b			bra 	_CDLoop
.2a88	7a		ply		_CDExit:ply
.2a89	60		rts				rts
.2a8a					_CDTail:
>2a8a	08						.byte 	_CDTail2-*-1
>2a8b	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2a93					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2a93					Command_ERASE:
.2a93	20 a5 2a	jsr $2aa5			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2a96	5a		phy				phy
.2a97	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2a99	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2a9b	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2a9e	7a		ply				ply
.2a9f	b0 01		bcs $2aa2			bcs 	_CEFail
.2aa1	60		rts				rts
.2aa2					_CEFail:
.2aa2	4c f3 28	jmp $28f3		jmp	ErrorV_fnf
.2aa5					FileSetupBlock:
.2aa5	20 81 17	jsr $1781			jsr 	EXPEvalString 					; string to R0, zTemp0
.2aa8	a5 24		lda $24				lda 	zTemp0 							; address to name
.2aaa	8d 26 06	sta $0626			sta 	FSBBlock
.2aad	a5 25		lda $25				lda 	zTemp0+1
.2aaf	8d 27 06	sta $0627			sta 	FSBBlock+1 						; zero the rest.
.2ab2	9c 28 06	stz $0628			stz 	FSBBlock+2
.2ab5	9c 29 06	stz $0629			stz 	FSBBlock+3
.2ab8	9c 2a 06	stz $062a			stz 	FSBBlock+4
.2abb	9c 2b 06	stz $062b			stz 	FSBBlock+5
.2abe	60		rts				rts
.0626					FSBBlock:
>0626							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2abf					Command_LOAD:
.2abf	20 a5 2a	jsr $2aa5			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2ac2	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; set load address
.2ac5	8d 29 06	sta $0629			sta 	FSBBlock+3
.2ac8	9c 28 06	stz $0628			stz 	FSBBlock+2
.2acb	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2acd	48		pha				pha
.2ace	20 eb 2a	jsr $2aeb			jsr	 	FileCheckSecondParam
.2ad1	5a		phy				phy
.2ad2	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2ad4	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2ad6	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2ad9	7a		ply				ply
.2ada	b0 0c		bcs $2ae8			bcs 	_CLFail
.2adc	68		pla				pla 								; load program
.2add	c9 99		cmp #$99			cmp 	#PR_COMMA
.2adf	f0 06		beq $2ae7			beq 	_CLNoClear
.2ae1	20 44 10	jsr $1044			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2ae4	4c 95 2b	jmp $2b95			jmp 	WarmStart 					; and warm start
.2ae7					_CLNoClear:
.2ae7	60		rts				rts
.2ae8					_CLFail:
.2ae8	4c f3 28	jmp $28f3		jmp	ErrorV_fnf
.2aeb					FileCheckSecondParam:
.2aeb	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2aed	c9 99		cmp #$99			cmp 	#PR_COMMA
.2aef	d0 0e		bne $2aff			bne 	_FCSPExit
.2af1	c8		iny				iny 								; consume
.2af2	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; get address
.2af5	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2af7	8d 28 06	sta $0628			sta 	FSBBlock+2
.2afa	a5 09		lda $09				lda 	IFR0+IM1
.2afc	8d 29 06	sta $0629			sta 	FSBBlock+3
.2aff					_FCSPExit:
.2aff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2b00					Command_SAVE:
.2b00	20 a5 2a	jsr $2aa5			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2b03	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2b05	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2b07	f0 22		beq $2b2b			beq 	_CLSaveBlock 				; save "Name",from,size
.2b09	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; set load address
.2b0c	8d 29 06	sta $0629			sta 	FSBBlock+3
.2b0f	9c 28 06	stz $0628			stz 	FSBBlock+2
.2b12	20 15 21	jsr $2115			jsr		PGMEndProgram 				; end of program -> zTemp0
.2b15	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2b17	d0 02		bne $2b1b			bne 	_CLNoCarry
.2b19	e6 25		inc $25				inc 	zTemp0+1
.2b1b					_CLNoCarry:
.2b1b	a5 24		lda $24				lda 	zTemp0
.2b1d	8d 2a 06	sta $062a			sta 	FSBBlock+4
.2b20	38		sec				sec
.2b21	a5 25		lda $25				lda 	zTemp0+1
.2b23	ed 29 06	sbc $0629			sbc 	FSBBlock+3
.2b26	8d 2b 06	sta $062b			sta 	FSBBlock+5
.2b29	80 13		bra $2b3e			bra 	_CSSave
.2b2b					_CLSaveBlock:
.2b2b	20 eb 2a	jsr $2aeb			jsr 	FileCheckSecondParam 		; the address to save from.
.2b2e	20 27 29	jsr $2927			jsr 	ERRCheckComma
.2b31	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; get size
.2b34	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2b36	8d 2a 06	sta $062a			sta 	FSBBlock+4
.2b39	a5 09		lda $09				lda 	IFR0+IM1
.2b3b	8d 2b 06	sta $062b			sta 	FSBBlock+5
.2b3e					_CSSave:
.2b3e	5a		phy				phy
.2b3f	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2b41	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2b43	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2b46	7a		ply				ply
.2b47	b0 01		bcs $2b4a			bcs 	_CSFail
.2b49	60		rts				rts
.2b4a					_CSFail:
.2b4a	4c 06 29	jmp $2906		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2b4d					ErrorHandler:
.2b4d	fa		plx				plx 								; get address of msg
.2b4e	7a		ply				ply
.2b4f	e8		inx				inx 								; bump past RTS
.2b50	d0 01		bne $2b53			bne 	_EHNoInc
.2b52	c8		iny				iny
.2b53					_EHNoInc:
.2b53	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2b56	ad 2c 06	lda $062c			lda 	ERRLine 					; direct command ?
.2b59	0d 2d 06	ora $062d			ora 	ERRLine+1
.2b5c	f0 10		beq $2b6e			beq 	_EHNoNumber
.2b5e	a2 71		ldx #$71			ldx 	#_EHAtMsg & $FF
.2b60	a0 2b		ldy #$2b			ldy 	#_EHAtMsg >> 8
.2b62	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2b65	ad 2c 06	lda $062c			lda 	ERRLine 					; line number -> XA
.2b68	ae 2d 06	ldx $062d			ldx 	ERRLine+1
.2b6b	20 76 2b	jsr $2b76			jsr 	WriteIntXA
.2b6e					_EHNoNumber:
.2b6e	4c 9f 2b	jmp $2b9f			jmp 	WarmStartNewLine
.2b71					_EHAtMsg:
>2b71	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2b76					_EHAtMsg1:
.2b76					WriteIntXA:
.2b76	da		phx				phx
.2b77	48		pha				pha
.2b78	a2 08		ldx #$08			ldx 	#IFR0
.2b7a	20 0b 33	jsr $330b			jsr 	IFloatPushRx
.2b7d	68		pla				pla
.2b7e	20 be 33	jsr $33be			jsr 	IFloatSetByte
.2b81	68		pla				pla
.2b82	85 09		sta $09				sta 	IFR0+IM1
.2b84	a9 0a		lda #$0a			lda 	#10 						; decimal
.2b86	20 5e 31	jsr $315e			jsr 	IFloatIntegerToStringR0	 	; convert
.2b89	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2b8c	a2 08		ldx #$08			ldx 	#IFR0
.2b8e	20 2c 33	jsr $332c			jsr 	IFloatPullRx
.2b91	60		rts				rts
.2b92					NotImplemented:
.2b92	4c 88 27	jmp $2788		jmp	ErrorV_unimplemented
.062c					ERRLine:
>062c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2b95					WarmStart:
.2b95	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2b97	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2b9a	a9 6b		lda #$6b			lda 	#"k"
.2b9c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2b9f					WarmStartNewLine:
.2b9f	a9 0d		lda #$0d			lda 	#13
.2ba1	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2ba4					WarmStartNoPrompt:
.2ba4	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2ba6	9a		txs				txs
.2ba7	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2baa	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2bab	d0 01		bne $2bae			bne 	_WSSkip
.2bad	c8		iny				iny
.2bae					_WSSkip:
.2bae	86 28		stx $28				stx 	zTemp2 						; save address
.2bb0	84 29		sty $29				sty 	zTemp2+1
.2bb2	b2 28		lda ($28)			lda 	(zTemp2)
.2bb4	f0 ee		beq $2ba4			beq 	WarmStartNoPrompt 			; ignore empty line.
.2bb6	a2 e8		ldx #$e8			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2bb8	a0 2b		ldy #$2b			ldy 	#TOKGetCharacter >> 8
.2bba	38		sec				sec
.2bbb	20 87 21	jsr $2187			jsr 	TOKTokenise
.2bbe	b0 25		bcs $2be5			bcs 	_WSSyntax
.2bc0	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2bc3	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2bc6	d0 0b		bne $2bd3			bne 	_WSLineEdit
.2bc8	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2bca	85 18		sta $18				sta 	codePtr
.2bcc	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2bce	85 19		sta $19				sta 	codePtr+1
.2bd0	4c 23 15	jmp $1523			jmp 	RUNNewLine
.2bd3					_WSLineEdit:
.2bd3	20 62 20	jsr $2062			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2bd6	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2bd9	c9 04		cmp #$04			cmp 	#4
.2bdb	f0 03		beq $2be0			beq 	_WSNoInsert
.2bdd	20 ac 20	jsr $20ac			jsr 	PGMInsertLine				; if not, maybe insert
.2be0					_WSNoInsert:
.2be0	20 44 10	jsr $1044			jsr 	ClearCode 					; clear variables etc.
.2be3	80 bf		bra $2ba4			bra 	WarmStartNoPrompt
.2be5					_WSSyntax:
.2be5	4c 46 27	jmp $2746		jmp	ErrorV_syntax
.2be8					TOKGetCharacter:
.2be8	b2 28		lda ($28)			lda 	(zTemp2)
.2bea	90 06		bcc $2bf2			bcc 	_GSNoIncrement
.2bec	e6 28		inc $28				inc 	zTemp2
.2bee	d0 02		bne $2bf2			bne 	_GSNoIncrement
.2bf0	e6 29		inc $29				inc 	zTemp2+1
.2bf2					_GSNoIncrement:
.2bf2	c9 00		cmp #$00			cmp 	#0
.2bf4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2bf5					VARArrayLookup:
.2bf5	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2bf7	86 25		stx $25				stx 	zTemp0+1
.2bf9	b2 24		lda ($24)			lda 	(zTemp0)
.2bfb	48		pha				pha
.2bfc	5a		phy				phy
.2bfd	a0 01		ldy #$01			ldy 	#1
.2bff	b1 24		lda ($24),y			lda 	(zTemp0),y
.2c01	7a		ply				ply
.2c02	48		pha				pha
.2c03	20 69 17	jsr $1769			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2c06	68		pla				pla 								; array address to zTemp0
.2c07	85 25		sta $25				sta 	zTemp0+1
.2c09	68		pla				pla
.2c0a	85 24		sta $24				sta 	zTemp0
.2c0c	5a		phy				phy 								; save codePtr position.
.2c0d	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2c0f	b1 24		lda ($24),y			lda 	(zTemp0),y
.2c11	48		pha				pha 								; save bit 15 on stack.
.2c12	29 7f		and #$7f			and 	#$7F
.2c14	85 26		sta $26				sta 	zTemp1
.2c16	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2c18	d2 24		cmp ($24)			cmp 	(zTemp0)
.2c1a	a5 09		lda $09				lda 	IFR0+IM1
.2c1c	e5 26		sbc $26				sbc 	zTemp1
.2c1e	b0 3a		bcs $2c5a			bcs 	_VALIndex
.2c20	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2c22	c9 40		cmp #$40			cmp 	#$40
.2c24	b0 34		bcs $2c5a			bcs 	_VALIndex
.2c26	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2c28	26 09		rol $09				rol 	IFR0+IM1
.2c2a	fa		plx				plx 								; get msb of size -> X
.2c2b	30 04		bmi $2c31			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2c2d	06 08		asl $08				asl 	IFR0+IM0
.2c2f	26 09		rol $09				rol 	IFR0+IM1
.2c31					_VARNotX4:
.2c31	18		clc				clc 								; add the two for the size bytes
.2c32	a5 08		lda $08				lda 	IFR0+IM0
.2c34	69 02		adc #$02			adc 	#2
.2c36	85 08		sta $08				sta 	IFR0+IM0
.2c38	90 02		bcc $2c3c			bcc 	_VARNoCarry1
.2c3a	e6 09		inc $09				inc 	IFR0+IM1
.2c3c					_VARNoCarry1:
.2c3c	18		clc				clc 								; calculate the element address and push to stack.
.2c3d	a5 08		lda $08				lda 	IFR0+IM0
.2c3f	65 24		adc $24				adc 	zTemp0
.2c41	48		pha				pha
.2c42	a5 09		lda $09				lda 	IFR0+IM1
.2c44	65 25		adc $25				adc 	zTemp0+1
.2c46	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2c48	30 04		bmi $2c4e			bmi 	_VARHasSubLevel
.2c4a	aa		tax				tax 								; address in XA
.2c4b	68		pla				pla
.2c4c	7a		ply				ply 								; restore Y and exit
.2c4d	60		rts				rts
.2c4e					_VARHasSubLevel:
.2c4e	aa		tax				tax 								; get link address in XA
.2c4f	68		pla				pla
.2c50	7a		ply				ply 								; restore code position.
.2c51	48		pha				pha
.2c52	20 27 29	jsr $2927			jsr 	ERRCheckComma 				; comma required.
.2c55	68		pla				pla
.2c56	20 f5 2b	jsr $2bf5			jsr 	VARArrayLookup 				; call it recursively
.2c59	60		rts				rts
.2c5a					_VALIndex:
.2c5a	4c 22 28	jmp $2822		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2c5d					VARCreate:
.2c5d	5a		phy				phy
.2c5e	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2c60	a2 00		ldx #$00			ldx 	#0
.2c62	20 61 10	jsr $1061			jsr 	AllocateMemory
.2c65	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2c67	86 27		stx $27				stx 	zTemp1+1
.2c69	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2c6b	ad 30 06	lda $0630			lda 	VARHash
.2c6e	91 26		sta ($26),y			sta 	(zTemp1),y
.2c70	c8		iny				iny 								; put address of name into +3,+4
.2c71	ad 2e 06	lda $062e			lda 	VARNameAddress
.2c74	91 26		sta ($26),y			sta 	(zTemp1),y
.2c76	c8		iny				iny
.2c77	ad 2f 06	lda $062f			lda 	VARNameAddress+1
.2c7a	91 26		sta ($26),y			sta 	(zTemp1),y
.2c7c	ad 31 06	lda $0631			lda 	VARType
.2c7f	29 01		and #$01			and 	#1
.2c81	f0 06		beq $2c89			beq 	_CVNotString
.2c83	a0 08		ldy #$08			ldy 	#5+3
.2c85	a9 80		lda #$80			lda 	#$80
.2c87	91 26		sta ($26),y			sta 	(zTemp1),y
.2c89					_CVNotString:
.2c89	ad 52 06	lda $0652			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2c8c	85 24		sta $24				sta 	zTemp0
.2c8e	ad 53 06	lda $0653			lda 	VARHashEntry+1
.2c91	85 25		sta $25				sta 	zTemp0+1
.2c93	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2c95	b2 24		lda ($24)			lda 	(zTemp0)
.2c97	92 26		sta ($26)			sta 	(zTemp1)
.2c99	b1 24		lda ($24),y			lda 	(zTemp0),y
.2c9b	91 26		sta ($26),y			sta 	(zTemp1),y
.2c9d	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2c9f	92 24		sta ($24)			sta 	(zTemp0)
.2ca1	a5 27		lda $27				lda 	zTemp1+1
.2ca3	91 24		sta ($24),y			sta 	(zTemp0),y
.2ca5	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2ca7	a6 27		ldx $27				ldx 	zTemp1+1
.2ca9	18		clc				clc 								; add 5 to point to the data.
.2caa	69 05		adc #$05			adc 	#5
.2cac	90 01		bcc $2caf			bcc 	_VCNoCarry
.2cae	e8		inx				inx
.2caf					_VCNoCarry:
.2caf	7a		ply				ply
.2cb0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2cb1					VARFind:
.2cb1	5a		phy				phy
.2cb2	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2cb4	b1 24		lda ($24),y			lda 	(zTemp0),y
.2cb6	85 27		sta $27				sta 	zTemp1+1
.2cb8	f0 1c		beq $2cd6			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2cba	b2 24		lda ($24)			lda 	(zTemp0)
.2cbc	85 26		sta $26				sta 	zTemp1
.2cbe					_VFLoop:
.2cbe	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2cc0	b1 26		lda ($26),y			lda 	(zTemp1),y
.2cc2	cd 30 06	cmp $0630			cmp 	VARHash
.2cc5	f0 12		beq $2cd9			beq 	_VFHashesMatch 				; if so, check the name.
.2cc7					_VFNext:
.2cc7	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2cc9	aa		tax				tax
.2cca	a0 01		ldy #$01			ldy 	#1
.2ccc	b1 26		lda ($26),y			lda 	(zTemp1),y
.2cce	85 27		sta $27				sta 	zTemp1+1
.2cd0	86 26		stx $26				stx 	zTemp1
.2cd2	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2cd4	d0 e8		bne $2cbe			bne 	_VFLoop
.2cd6					_VFExitFail:
.2cd6	7a		ply				ply
.2cd7	18		clc				clc
.2cd8	60		rts				rts
.2cd9					_VFHashesMatch:
.2cd9	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2cdb	b1 26		lda ($26),y			lda 	(zTemp1),y
.2cdd	85 28		sta $28				sta 	zTemp2
.2cdf	c8		iny				iny
.2ce0	b1 26		lda ($26),y			lda 	(zTemp1),y
.2ce2	85 29		sta $29				sta 	zTemp2+1
.2ce4	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2ce6					_VFNameCompLoop:
.2ce6	c8		iny				iny 								; char at a time
.2ce7	b9 32 06	lda $0632,y			lda 	VARBuffer,y
.2cea	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2cec	d0 d9		bne $2cc7			bne 	_VFNext						; next entry if different.
.2cee	c9 7c		cmp #$7c			cmp 	#$7C
.2cf0	90 f4		bcc $2ce6			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2cf2	18		clc				clc
.2cf3	a5 26		lda $26				lda 	zTemp1
.2cf5	a6 27		ldx $27				ldx 	zTemp1+1
.2cf7	69 05		adc #$05			adc 	#5
.2cf9	90 01		bcc $2cfc			bcc 	_VFNNoCarry
.2cfb	e8		inx				inx
.2cfc					_VFNNoCarry:
.2cfc	7a		ply				ply
.2cfd	38		sec				sec
.2cfe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2cff					VARGetInfo:
.2cff	98		tya				tya 								; calculate the address of the identifier start.
.2d00	18		clc				clc
.2d01	65 18		adc $18				adc 	codePtr
.2d03	8d 2e 06	sta $062e			sta 	VARNameAddress
.2d06	a5 19		lda $19				lda 	codePtr+1
.2d08	69 00		adc #$00			adc 	#0
.2d0a	8d 2f 06	sta $062f			sta 	VARNameAddress+1
.2d0d	9c 30 06	stz $0630			stz 	VARHash
.2d10	a2 00		ldx #$00			ldx 	#0
.2d12					_VARCopyName:
.2d12	18		clc				clc 								; update the sum hash.
.2d13	ad 30 06	lda $0630			lda 	VARHash
.2d16	71 18		adc ($18),y			adc 	(codePtr),y
.2d18	8d 30 06	sta $0630			sta 	VARHash
.2d1b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2d1d	c8		iny				iny
.2d1e	9d 32 06	sta $0632,x			sta 	VARBuffer,x
.2d21	e8		inx				inx
.2d22	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2d24	90 ec		bcc $2d12			bcc 	_VARCopyName
.2d26	8d 31 06	sta $0631			sta 	VARType 					; save type byte
.2d29	29 03		and #$03			and 	#3 							; type is 0-3
.2d2b	0a		asl a				asl 	a
.2d2c	0a		asl a				asl 	a
.2d2d	85 24		sta $24				sta 	zTemp0
.2d2f	ad 30 06	lda $0630			lda 	VARHash 					; force into range of hash entries per type.
.2d32	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2d34	65 24		adc $24				adc 	zTemp0 						; index of hash table
.2d36	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2d37	69 54		adc #$54			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2d39	85 24		sta $24				sta 	zTemp0
.2d3b	8d 52 06	sta $0652			sta 	VARHashEntry
.2d3e	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2d40	69 00		adc #$00			adc 	#0
.2d42	85 25		sta $25				sta 	zTemp0+1
.2d44	8d 53 06	sta $0653			sta 	VARHashEntry+1
.2d47	60		rts				rts
.2d48					VARClearHashTables:
.2d48	a2 00		ldx #$00			ldx 	#0
.2d4a					_VCHRLoop:
.2d4a	a9 00		lda #$00			lda 	#0
.2d4c	9d 54 06	sta $0654,x			sta 	VARHashTables,x
.2d4f	e8		inx				inx
.2d50	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2d52	d0 f6		bne $2d4a			bne 	_VCHRLoop
.2d54	60		rts				rts
.062e					VARNameAddress:
>062e							.fill 	2
.0630					VARHash:
>0630							.fill 	1
.0631					VARType:
>0631							.fill 	1
.0632					VARBuffer:
>0632							.fill 	32
.0652					VARHashEntry:
>0652							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0654					VARHashTables:
>0654							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2d55					VARCheckSimple:
.2d55	aa		tax				tax 								; save in X
.2d56	b1 18		lda ($18),y			lda 	(codePtr),y
.2d58	c9 7c		cmp #$7c			cmp 	#$7C
.2d5a	d0 15		bne $2d71			bne 	_VCSComplex
.2d5c	c8		iny				iny 								; consume the second byte, the type.
.2d5d	8a		txa				txa  								; character (40-7F) x 4
.2d5e	0a		asl a				asl 	a
.2d5f	0a		asl a				asl  	a
.2d60	18		clc				clc
.2d61	69 74		adc #$74			adc 	#FastVariables & $FF
.2d63	85 08		sta $08				sta 	IFR0+IM0
.2d65	a9 06		lda #$06			lda 	#FastVariables >> 8
.2d67	69 00		adc #$00			adc 	#0
.2d69	85 09		sta $09				sta 	IFR0+IM1
.2d6b	64 0a		stz $0a				stz 	IFR0+IM2
.2d6d	64 0b		stz $0b				stz 	IFR0+IExp
.2d6f	38		sec				sec 								; it's a reference
.2d70	60		rts				rts
.2d71					_VCSComplex:
.2d71	88		dey				dey	 								; extract information.
.2d72	20 ff 2c	jsr $2cff			jsr 	VARGetInfo
.2d75	20 b1 2c	jsr $2cb1			jsr 	VARFind 					; search for variable
.2d78	b0 0a		bcs $2d84			bcs 	_VCSHaveVariable
.2d7a	ad 31 06	lda $0631			lda 	VARType 					; error if arrays, cannot autocreate
.2d7d	29 02		and #$02			and 	#2
.2d7f	d0 25		bne $2da6			bne 	_VCNoCreate
.2d81	20 5d 2c	jsr $2c5d			jsr 	VARCreate 					; create variable
.2d84					_VCSHaveVariable:
.2d84	48		pha				pha 								; save LSB on the stack
.2d85	ad 31 06	lda $0631			lda 	VARType 					; get var type, and shift bit 1 into carry
.2d88	6a		ror a				ror 	a
.2d89	6a		ror a				ror 	a
.2d8a	68		pla				pla 								; restore LSB
.2d8b	90 08		bcc $2d95			bcc 	_VCSNotArray 				; skip if not an array
.2d8d	20 f5 2b	jsr $2bf5			jsr 	VARArrayLookup 				; look for subscripts.
.2d90	48		pha				pha 								; check )
.2d91	20 1f 29	jsr $291f			jsr 	ERRCheckRParen
.2d94	68		pla				pla
.2d95					_VCSNotArray:
.2d95	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2d97	85 08		sta $08				sta 	IFR0+IM0
.2d99	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2d9b	ad 31 06	lda $0631			lda 	VARType 					; number/string bit into carry
.2d9e	6a		ror a				ror 	a
.2d9f	a9 00		lda #$00			lda 	#0
.2da1	6a		ror a				ror 	a 							; now $00 or $80
.2da2	85 0b		sta $0b				sta 	IFR0+IExp
.2da4	38		sec				sec 								; it's a reference
.2da5	60		rts				rts
.2da6					_VCNoCreate:
.2da6	4c 48 28	jmp $2848		jmp	ErrorV_uninitialised
.0674					FastVariables:
>0674							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2da9					IFInitialise:
.2da9	9c e4 06	stz $06e4			stz 	IFStackIndex 				; reset the internal stack.
.2dac	60		rts				rts
.2dad					IFloatSubtract:
.2dad	da		phx				phx
.2dae	a2 08		ldx #$08			ldx 	#IFR0
.2db0	20 c7 33	jsr $33c7			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2db3	fa		plx				plx
.2db4					IFloatAdd:
.2db4	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2db6	05 0b		ora $0b				ora 	IFR0+IExp
.2db8	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2dba	d0 4e		bne $2e0a			bne 	_IFloatAddDecimals 			; floating point version.
.2dbc					_IFAddSubMantissa:
.2dbc	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2dbe	45 0b		eor $0b				eor 	IFR0+IExp
.2dc0	29 40		and #$40			and 	#IFSign
.2dc2	d0 21		bne $2de5			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2dc4	18		clc				clc 								; do the actual addition
.2dc5	a5 08		lda $08				lda 	IFR0+IM0
.2dc7	75 00		adc $00,x			adc 		IM0,x
.2dc9	85 08		sta $08				sta 	IFR0+IM0
.2dcb	a5 09		lda $09				lda 	IFR0+IM1
.2dcd	75 01		adc $01,x			adc 		IM1,x
.2dcf	85 09		sta $09				sta 	IFR0+IM1
.2dd1	a5 0a		lda $0a				lda 	IFR0+IM2
.2dd3	75 02		adc $02,x			adc 		IM2,x
.2dd5	85 0a		sta $0a				sta 	IFR0+IM2
.2dd7	10 29		bpl $2e02			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2dd9	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2ddb	20 eb 33	jsr $33eb			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2dde	20 15 34	jsr $3415			jsr 	IFloatIncExponent
.2de1	d0 1f		bne $2e02			bne 	_IFloatAddExit
.2de3	38		sec				sec 								; overflowed numerically.
.2de4	60		rts				rts
.2de5					_IFloatSubMantissa:
.2de5	38		sec				sec 								; do the subtraction R0-Rx
.2de6	a5 08		lda $08				lda 	IFR0+IM0
.2de8	f5 00		sbc $00,x			sbc 		IM0,x
.2dea	85 08		sta $08				sta 	IFR0+IM0
.2dec	a5 09		lda $09				lda 	IFR0+IM1
.2dee	f5 01		sbc $01,x			sbc 		IM1,x
.2df0	85 09		sta $09				sta 	IFR0+IM1
.2df2	a5 0a		lda $0a				lda 	IFR0+IM2
.2df4	f5 02		sbc $02,x			sbc 		IM2,x
.2df6	85 0a		sta $0a				sta 	IFR0+IM2
.2df8	b0 08		bcs $2e02			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2dfa	a2 08		ldx #$08			ldx 	#IFR0
.2dfc	20 cf 33	jsr $33cf			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2dff	20 c7 33	jsr $33c7			jsr 	IFloatNegate 				; negate the result using sign bit.
.2e02					_IFloatAddExit:
.2e02	18		clc				clc
.2e03	60		rts				rts
.2e04					_IFloatZeroAdd:
.2e04	fa		plx				plx 								; return this value in R0
.2e05	20 4d 33	jsr $334d			jsr 	IFloatCopyFromRegister
.2e08	18		clc				clc
.2e09	60		rts				rts
.2e0a					_IFloatAddDecimals:
.2e0a	20 b5 33	jsr $33b5			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2e0d	f0 f3		beq $2e02			beq 	_IFloatAddExit
.2e0f	20 f3 33	jsr $33f3			jsr 	IFloatNormalise 			; normalise RX
.2e12	da		phx				phx 								; normalise R0
.2e13	a2 08		ldx #$08			ldx 	#IFR0
.2e15	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero
.2e18	f0 ea		beq $2e04			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2e1a	20 f3 33	jsr $33f3			jsr 	IFloatNormalise
.2e1d	fa		plx				plx
.2e1e	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2e20	29 3f		and #$3f			and 	#IFXMask
.2e22	38		sec				sec
.2e23	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2e25	85 20		sta $20				sta 	iTemp0
.2e27	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2e29	29 3f		and #$3f			and 	#IFXMask
.2e2b	38		sec				sec
.2e2c	e9 20		sbc #$20			sbc 	#$20
.2e2e	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2e30	b0 02		bcs $2e34			bcs 	_IFloatHaveLarger
.2e32	a5 20		lda $20				lda 	iTemp0
.2e34					_IFloatHaveLarger:
.2e34	18		clc				clc 								; get the actual one back.
.2e35	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2e37	20 44 2e	jsr $2e44			jsr 	_IFShiftXToA
.2e3a	da		phx				phx
.2e3b	a2 08		ldx #$08			ldx 	#IFR0
.2e3d	20 44 2e	jsr $2e44			jsr 	_IFShiftXToA
.2e40	fa		plx				plx
.2e41	4c bc 2d	jmp $2dbc			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2e44					_IFShiftXToA:
.2e44	8d dc 06	sta $06dc			sta 	IFTarget
.2e47	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero 			; check adding zero ?
.2e4a	f0 11		beq $2e5d			beq 	_IFSXExit
.2e4c					_IFSXLoop:
.2e4c	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2e4e	29 3f		and #$3f			and 	#IFXMask
.2e50	cd dc 06	cmp $06dc			cmp 	IFTarget
.2e53	f0 08		beq $2e5d			beq 	_IFSXExit
.2e55	20 eb 33	jsr $33eb			jsr 	IFloatShiftRight
.2e58	20 15 34	jsr $3415			jsr 	IFloatIncExponent
.2e5b	80 ef		bra $2e4c			bra 	_IFSXLoop
.2e5d					_IFSXExit:
.2e5d	60		rts				rts
.06dc					IFTarget:
>06dc							.fill 	1
.2e5e					IFloatMultiply:
.2e5e	8e dc 06	stx $06dc			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2e61	20 16 2f	jsr $2f16			jsr 	IFCalculateNewSign
.2e64	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2e66	05 0b		ora $0b				ora 	IFR0+IExp
.2e68	29 3f		and #$3f			and 	#IFXMask
.2e6a	15 01		ora $01,x			ora 	IM1,x
.2e6c	05 09		ora $09				ora 	IFR0+IM1
.2e6e	15 02		ora $02,x			ora 	IM2,x
.2e70	05 0a		ora $0a				ora 	IFR0+IM2
.2e72	d0 0a		bne $2e7e			bne 	_IFMStandard
.2e74	20 98 33	jsr $3398			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2e77	ad de 06	lda $06de			lda 	IFNewSign
.2e7a	85 0b		sta $0b				sta 	IFR0+IExp
.2e7c	18		clc				clc
.2e7d	60		rts				rts
.2e7e					_IFMStandard:
.2e7e	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2e80	20 0d 2f	jsr $2f0d			jsr 	IFMSignExtend
.2e83	8d dd 06	sta $06dd			sta 	IFNewExponent
.2e86	a5 0b		lda $0b				lda 	IFR0+IExp
.2e88	20 0d 2f	jsr $2f0d			jsr 	IFMSignExtend
.2e8b	18		clc				clc
.2e8c	6d dd 06	adc $06dd			adc 	IFNewExponent
.2e8f	8d dd 06	sta $06dd			sta 	IFNewExponent
.2e92	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2e94	20 5e 33	jsr $335e			jsr 	IFloatCopyToRegister
.2e97	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2e99	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.2e9c					_IFMLoop:
.2e9c	a2 14		ldx #$14			ldx 	#IFRTemp
.2e9e	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero
.2ea1	f0 3a		beq $2edd			beq 	_IFMExit
.2ea3	ae dc 06	ldx $06dc			ldx 	IFTarget 					; look at adder MSB
.2ea6	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2ea8	10 03		bpl $2ead			bpl	 	_IFMTargetOkay
.2eaa	20 fe 2e	jsr $2efe			jsr 	_IFMShiftAll
.2ead					_IFMTargetOkay:
.2ead	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2eaf	29 01		and #$01			and 	#1
.2eb1	f0 16		beq $2ec9			beq 	_IFMNoAdd
.2eb3	ae dc 06	ldx $06dc			ldx 	IFTarget 					; add adder
.2eb6	18		clc				clc
.2eb7	a5 08		lda $08				lda 	IFR0+IM0
.2eb9	75 00		adc $00,x			adc 		IM0,x
.2ebb	85 08		sta $08				sta 	IFR0+IM0
.2ebd	a5 09		lda $09				lda 	IFR0+IM1
.2ebf	75 01		adc $01,x			adc 		IM1,x
.2ec1	85 09		sta $09				sta 	IFR0+IM1
.2ec3	a5 0a		lda $0a				lda 	IFR0+IM2
.2ec5	75 02		adc $02,x			adc 		IM2,x
.2ec7	85 0a		sta $0a				sta 	IFR0+IM2
.2ec9					_IFMNoAdd:
.2ec9	a5 0a		lda $0a				lda 	IFR0+IM2
.2ecb	10 03		bpl $2ed0			bpl 	_IFMResultOkay
.2ecd	20 fe 2e	jsr $2efe			jsr 	_IFMShiftAll
.2ed0					_IFMResultOkay:
.2ed0	a2 14		ldx #$14			ldx 	#IFRTemp
.2ed2	20 eb 33	jsr $33eb			jsr 	IFloatShiftRight
.2ed5	ae dc 06	ldx $06dc			ldx 	IFTarget
.2ed8	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.2edb	80 bf		bra $2e9c			bra 	_IFMLoop
.2edd					_IFMExit:
.2edd	ad dd 06	lda $06dd			lda 	IFNewExponent 				; validate new exponent.
.2ee0	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2ee2	90 0f		bcc $2ef3			bcc 	_IFMOkay
.2ee4	c9 e0		cmp #$e0			cmp 	#$E0
.2ee6	b0 0b		bcs $2ef3			bcs 	_IFMOkay
.2ee8	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2eea	f0 10		beq $2efc			beq 	_IFMError
.2eec	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2eee	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.2ef1	18		clc				clc
.2ef2	60		rts				rts
.2ef3					_IFMOkay:
.2ef3	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2ef5	0d de 06	ora $06de			ora 	IFNewSign
.2ef8	85 0b		sta $0b				sta 	IFR0+IExp
.2efa	18		clc				clc
.2efb	60		rts				rts
.2efc					_IFMError:
.2efc	38		sec				sec
.2efd	60		rts				rts
.2efe					_IFMShiftAll:
.2efe	a2 08		ldx #$08			ldx 	#IFR0
.2f00	20 eb 33	jsr $33eb			jsr 	IFloatShiftRight
.2f03	ae dc 06	ldx $06dc			ldx 	IFTarget
.2f06	20 eb 33	jsr $33eb			jsr 	IFloatShiftRight
.2f09	ee dd 06	inc $06dd			inc 	IFNewExponent
.2f0c	60		rts				rts
.2f0d					IFMSignExtend:
.2f0d	29 3f		and #$3f			and 	#IFXMask
.2f0f	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2f11	90 02		bcc $2f15			bcc 	_IFMNoSXX
.2f13	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2f15					_IFMNoSXX:
.2f15	60		rts				rts
.2f16					IFCalculateNewSign:
.2f16	b5 03		lda $03,x			lda 	IExp,x
.2f18	45 0b		eor $0b				eor 	IFR0+IExp
.2f1a	29 40		and #$40			and 	#IFSign
.2f1c	8d de 06	sta $06de			sta 	IFNewSign
.2f1f	60		rts				rts
.06dd					IFNewExponent:
>06dd							.fill 	1
.06de					IFNewSign:
>06de							.fill 	1
.2f20					IFloatDivideInteger:
.2f20	20 39 2f	jsr $2f39			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2f23	b0 06		bcs $2f2b			bcs 	_IFDIExit
.2f25	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2f27	20 4d 33	jsr $334d			jsr 	IFloatCopyFromRegister
.2f2a	18		clc				clc
.2f2b					_IFDIExit:
.2f2b	60		rts				rts
.2f2c					IFloatModulusInteger:
.2f2c	20 39 2f	jsr $2f39			jsr 	IFloatDivideIntegerCommon
.2f2f	b0 07		bcs $2f38			bcs 	_IFMIExit
.2f31	ae dc 06	ldx $06dc			ldx 	IFTarget
.2f34	20 4d 33	jsr $334d			jsr 	IFloatCopyFromRegister
.2f37	18		clc				clc
.2f38					_IFMIExit:
.2f38	60		rts				rts
.2f39					IFloatDivideIntegerCommon:
.2f39	8e dc 06	stx $06dc			stx 	IFTarget  					; this is s1, s0 = R0
.2f3c	20 16 2f	jsr $2f16			jsr 	IFCalculateNewSign 			; calculate sign of result
.2f3f	20 67 2f	jsr $2f67			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2f42	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2f44	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero
.2f47	f0 1c		beq $2f65			beq 	_IFDIDivZero
.2f49	ae dc 06	ldx $06dc			ldx 	IFTarget 					; zero Rx (S1)
.2f4c	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.2f4f	5a		phy				phy
.2f50	a0 18		ldy #$18			ldy 	#24
.2f52					_IFDILoop:
.2f52	20 78 2f	jsr $2f78			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2f55	20 84 2f	jsr $2f84			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2f58	88		dey				dey
.2f59	d0 f7		bne $2f52			bne 	_IFDILoop 					; do it 24 times
.2f5b	7a		ply				ply
.2f5c	ad de 06	lda $06de			lda 	IFNewSign 					; set sign of result.
.2f5f	29 40		and #$40			and 	#IFSign
.2f61	85 17		sta $17				sta 	IFRTemp+IExp
.2f63	18		clc				clc 								; is okay.
.2f64	60		rts				rts
.2f65					_IFDIDivZero:
.2f65	38		sec				sec
.2f66	60		rts				rts
.2f67					IFDCopyRXToRTemp:
.2f67	b5 00		lda $00,x			lda 	IM0,x
.2f69	85 14		sta $14				sta 	IFRTemp+IM0
.2f6b	b5 01		lda $01,x			lda 	IM1,x
.2f6d	85 15		sta $15				sta 	IFRTemp+IM1
.2f6f	b5 02		lda $02,x			lda 	IM2,x
.2f71	85 16		sta $16				sta 	IFRTemp+IM2
.2f73	b5 03		lda $03,x			lda 	IExp,x
.2f75	85 17		sta $17				sta 	IFRTemp+IExp
.2f77	60		rts				rts
.2f78					IFDShiftSTempS1Left:
.2f78	a2 14		ldx #$14			ldx 	#IFRTemp
.2f7a	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft
.2f7d	ae dc 06	ldx $06dc			ldx 	IFTarget
.2f80	20 e4 33	jsr $33e4			jsr 	IFloatRotateLeft
.2f83	60		rts				rts
.2f84					IFDTrySubtract:
.2f84	ae dc 06	ldx $06dc			ldx 	IFTarget 					; s1 = Rx
.2f87	38		sec				sec 								; subtract, saving the results on the stack.
.2f88	b5 00		lda $00,x			lda 	IM0,x
.2f8a	e5 08		sbc $08				sbc 	IFR0+IM0
.2f8c	48		pha				pha
.2f8d	b5 01		lda $01,x			lda 	IM1,x
.2f8f	e5 09		sbc $09				sbc 	IFR0+IM1
.2f91	48		pha				pha
.2f92	b5 02		lda $02,x			lda 	IM2,x
.2f94	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2f96	b0 03		bcs $2f9b			bcs 	_IFDCanSubtract
.2f98	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2f99	68		pla				pla
.2f9a	60		rts				rts
.2f9b					_IFDCanSubtract:
.2f9b	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2f9d	68		pla				pla
.2f9e	95 01		sta $01,x			sta 	IM1,x
.2fa0	68		pla				pla
.2fa1	95 00		sta $00,x			sta 	IM0,x
.2fa3	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2fa5	d0 06		bne $2fad			bne 	_IFDCSExit
.2fa7	e6 15		inc $15				inc 	IFRTemp+IM1
.2fa9	d0 02		bne $2fad			bne 	_IFDCSExit
.2fab	e6 16		inc $16				inc 	IFRTemp+IM2
.2fad					_IFDCSExit:
.2fad	60		rts				rts
.2fae					IFloatBitwiseAnd:
.2fae	5a		phy				phy
.2faf	20 f3 2f	jsr $2ff3			jsr 	IFPreProcessBitwise 		; set up everything.
.2fb2	d0 0f		bne $2fc3			bne 	_IFBAExit
.2fb4					_IFBALoop:
.2fb4	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2fb7	35 00		and $00,x			and 	IM0,x
.2fb9	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2fbc	e8		inx				inx
.2fbd	c8		iny				iny
.2fbe	c0 03		cpy #$03			cpy 	#3
.2fc0	d0 f2		bne $2fb4			bne 	_IFBALoop
.2fc2	18		clc				clc
.2fc3					_IFBAExit:
.2fc3	7a		ply				ply
.2fc4	60		rts				rts
.2fc5					IFloatBitwiseOr:
.2fc5	5a		phy				phy
.2fc6	20 f3 2f	jsr $2ff3			jsr 	IFPreProcessBitwise 		; set up everything.
.2fc9	d0 0f		bne $2fda			bne 	_IFBAExit
.2fcb					_IFBALoop:
.2fcb	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2fce	15 00		ora $00,x			ora 	IM0,x
.2fd0	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2fd3	e8		inx				inx
.2fd4	c8		iny				iny
.2fd5	c0 03		cpy #$03			cpy 	#3
.2fd7	d0 f2		bne $2fcb			bne 	_IFBALoop
.2fd9	18		clc				clc
.2fda					_IFBAExit:
.2fda	7a		ply				ply
.2fdb	60		rts				rts
.2fdc					IFloatBitwiseXor:
.2fdc	5a		phy				phy
.2fdd	20 f3 2f	jsr $2ff3			jsr 	IFPreProcessBitwise 		; set up everything.
.2fe0	d0 0f		bne $2ff1			bne 	_IFBAExit
.2fe2					_IFBALoop:
.2fe2	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2fe5	55 00		eor $00,x			eor 	IM0,x
.2fe7	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2fea	e8		inx				inx
.2feb	c8		iny				iny
.2fec	c0 03		cpy #$03			cpy 	#3
.2fee	d0 f2		bne $2fe2			bne 	_IFBALoop
.2ff0	18		clc				clc
.2ff1					_IFBAExit:
.2ff1	7a		ply				ply
.2ff2	60		rts				rts
.2ff3					IFPreProcessBitwise:
.2ff3	a0 00		ldy #$00			ldy 	#0 							; set index.
.2ff5	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2ff7	15 03		ora $03,x			ora 	IExp,x
.2ff9	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2ffb	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2ffd	38		sec				sec 								; carry set just in cases.
.2ffe	60		rts				rts
.2fff					IFloatAbsoluteR0:
.2fff	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.3001	29 bf		and #$bf			and 	#IFSign ^ 255
.3003	85 0b		sta $0b				sta 	IFR0+IExp
.3005	18		clc				clc
.3006	60		rts				rts
.3007					IFloatSquareRootR0:
.3007	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.3009	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero
.300c	f0 2e		beq $303c			beq 	_IFSRZero
.300e	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.3010	29 40		and #$40			and 	#IFSign
.3012	d0 2f		bne $3043			bne 	_IFSRFail
.3014	20 f3 33	jsr $33f3			jsr 	IFloatNormalise 			; it will work better !
.3017	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.3019	20 5e 33	jsr $335e			jsr 	IFloatCopyToRegister
.301c	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.301e	20 0d 2f	jsr $2f0d			jsr 	IFMSignExtend 				; sign extended version of the exponent
.3021	18		clc				clc
.3022	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.3024	85 0b		sta $0b				sta 	IFR0+IExp
.3026	4a		lsr a				lsr 	a 							; which we can halve.
.3027	38		sec				sec 								; convert back
.3028	e9 17		sbc #$17			sbc 	#23
.302a	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.302c	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.302e	20 45 30	jsr $3045			jsr 	_IFSRNewton
.3031	20 45 30	jsr $3045			jsr 	_IFSRNewton
.3034	20 45 30	jsr $3045			jsr 	_IFSRNewton
.3037	20 45 30	jsr $3045			jsr 	_IFSRNewton
.303a	18		clc				clc
.303b	60		rts				rts
.303c					_IFSRZero:
.303c	a2 08		ldx #$08			ldx 	#IFR0
.303e	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.3041	18		clc				clc
.3042	60		rts				rts
.3043					_IFSRFail:
.3043	38		sec				sec
.3044	60		rts				rts
.3045					_IFSRNewton:
.3045	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.3047	20 0b 33	jsr $330b			jsr 	IFloatPushRx
.304a	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.304c	20 0b 33	jsr $330b			jsr 	IFloatPushRx
.304f	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.3051	20 e0 30	jsr $30e0			jsr 	IFloatDivideFloat
.3054	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.3056	20 2c 33	jsr $332c			jsr 	IFloatPullRx
.3059	20 b4 2d	jsr $2db4			jsr 	IFloatAdd 					; now guess + original/guess
.305c	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.305e	20 eb 33	jsr $33eb			jsr 	IFloatShiftRight
.3061	a2 0c		ldx #$0c			ldx 	#IFR1
.3063	20 2c 33	jsr $332c			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.3066	60		rts				rts
.3067					IFloatFractionalR0:
.3067	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.3069	29 3f		and #$3f			and 	#IFXMask
.306b	f0 17		beq $3084			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.306d	20 ff 2f	jsr $2fff			jsr 	IFloatAbsoluteR0 			; absolute value R0
.3070	a2 08		ldx #$08			ldx 	#IFR0
.3072	20 f3 33	jsr $33f3			jsr 	IFloatNormalise 			; normalise R0
.3075	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.3077	20 5e 33	jsr $335e			jsr 	IFloatCopyToRegister
.307a	20 bd 30	jsr $30bd			jsr 	IFloatIntegerR0 			; take integer part of R0
.307d	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.307f	20 ad 2d	jsr $2dad			jsr 	IFloatSubtract
.3082	80 05		bra $3089			bra 	_FIPExit
.3084					_FIPZero:
.3084	a2 08		ldx #$08			ldx 	#IFR0
.3086	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.3089					_FIPExit:
.3089	18		clc				clc
.308a	60		rts				rts
.308b					IFloatCompare:
.308b	20 ad 2d	jsr $2dad			jsr 	IFloatSubtract 				; subtract R0 from RX.
.308e	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.3090	05 0b		ora $0b				ora 	IFR0+IExp
.3092	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.3094	29 3f		and #$3f			and 	#IFXMask
.3096	d0 19		bne $30b1			bne 	_IFCNonInteger
.3098	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero 			; check if zero
.309b	f0 0f		beq $30ac			beq 	_IFCZero
.309d					_IFCReturnSign:
.309d	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.309f	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.30a1	48		pha				pha
.30a2	a9 01		lda #$01			lda 	#1
.30a4	20 be 33	jsr $33be			jsr 	IFloatSetByte 				; return to +1
.30a7	68		pla				pla 								; sign bit back
.30a8	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.30aa	18		clc				clc
.30ab	60		rts				rts
.30ac					_IFCZero:
.30ac	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.30af	18		clc				clc
.30b0	60		rts				rts
.30b1					_IFCNonInteger:
.30b1	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.30b3	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.30b5	05 09		ora $09				ora 	IFR0+IM1
.30b7	05 0a		ora $0a				ora 	IFR0+IM2
.30b9	f0 f1		beq $30ac			beq 	_IFCZero 					; near enough !
.30bb	80 e0		bra $309d			bra 	_IFCReturnSign 				; return the sign of the difference.
.30bd					IFloatIntegerR0:
.30bd	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.30bf	29 3f		and #$3f			and 	#IFXMask
.30c1	f0 1b		beq $30de			beq 	_FIPExit 					; if so do nothing
.30c3	a2 08		ldx #$08			ldx 	#IFR0
.30c5	20 f3 33	jsr $33f3			jsr 	IFloatNormalise 			; normalise
.30c8	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero 			; is it zero ?
.30cb	f0 0e		beq $30db			beq 	_FIPZero 					; if so return zero.
.30cd					_FIPShift:
.30cd	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.30cf	29 20		and #$20			and 	#$20 						; still -ve
.30d1	f0 0b		beq $30de			beq 	_FIPExit
.30d3	20 eb 33	jsr $33eb			jsr 	IFloatShiftRight 			; shift mantissa right
.30d6	20 15 34	jsr $3415			jsr 	IFloatIncExponent 			; bump exponent
.30d9	80 f2		bra $30cd			bra 	_FIPShift
.30db					_FIPZero:
.30db	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.30de					_FIPExit:
.30de	18		clc				clc
.30df	60		rts				rts
.30e0					IFloatDivideFloat:
.30e0	8e dc 06	stx $06dc			stx 	IFTarget  					; this is s1, s0 = R0
.30e3	20 16 2f	jsr $2f16			jsr 	IFCalculateNewSign 			; calculate sign of result
.30e6	20 f3 33	jsr $33f3			jsr 	IFloatNormalise 			; normalise RX
.30e9	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.30eb	20 f3 33	jsr $33f3			jsr 	IFloatNormalise
.30ee	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero
.30f1	f0 56		beq $3149			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.30f3	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.30f5	20 0d 2f	jsr $2f0d			jsr 	IFMSignExtend
.30f8	8d dd 06	sta $06dd			sta 	IFNewExponent
.30fb	ae dc 06	ldx $06dc			ldx 	IFTarget 					; calculate s1.exponent
.30fe	b5 03		lda $03,x			lda 	IExp,x
.3100	20 0d 2f	jsr $2f0d			jsr 	IFMSignExtend
.3103	38		sec				sec
.3104	ed dd 06	sbc $06dd			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.3107	38		sec				sec
.3108	e9 17		sbc #$17			sbc 	#23
.310a	8d dd 06	sta $06dd			sta 	IFNewExponent
.310d	20 4b 31	jsr $314b			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.3110	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.3112	10 08		bpl $311c			bpl 	_IFDFNoShiftResult
.3114	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.3116	20 eb 33	jsr $33eb			jsr 	IFloatShiftRight
.3119	ee dd 06	inc $06dd			inc 	IFNewExponent
.311c					_IFDFNoShiftResult:
.311c	ad dd 06	lda $06dd			lda 	IFNewExponent 				; underflow/overflow check.
.311f	30 06		bmi $3127			bmi 	_IFDFCheckUnderflow
.3121	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.3123	b0 24		bcs $3149			bcs 	_IFDFDivZero
.3125	80 11		bra $3138			bra		_IFDFExit
.3127					_IFDFCheckUnderflow:
.3127	ad dd 06	lda $06dd			lda 	IFNewExponent 				; shift into a legal exponent.
.312a	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.312c	b0 0a		bcs $3138			bcs 	_IFDFExit
.312e	ee dd 06	inc $06dd			inc 	IFNewExponent
.3131	a2 14		ldx #$14			ldx 	#IFRTemp
.3133	20 eb 33	jsr $33eb			jsr 	IFloatShiftRight
.3136	80 ef		bra $3127			bra 	_IFDFCheckUnderflow
.3138					_IFDFExit:
.3138	ad dd 06	lda $06dd			lda 	IFNewExponent 				; combine exponent and sign.
.313b	29 3f		and #$3f			and 	#IFXMask
.313d	0d de 06	ora $06de			ora 	IFNewSign
.3140	85 17		sta $17				sta 	IFRTemp+IExp
.3142	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.3144	20 4d 33	jsr $334d			jsr 	IFloatCopyFromRegister
.3147	18		clc				clc
.3148	60		rts				rts
.3149					_IFDFDivZero:
.3149	38		sec				sec
.314a	60		rts				rts
.314b					IFloatDivideSupport:
.314b	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.314d	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.3150	5a		phy				phy 								; main division loop x 23
.3151	a0 17		ldy #$17			ldy 	#23
.3153					_IFDSLoop:
.3153	20 84 2f	jsr $2f84			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.3156	20 78 2f	jsr $2f78			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3159	88		dey				dey
.315a	d0 f7		bne $3153			bne 	_IFDSLoop 					; do it 24 times
.315c	7a		ply				ply
.315d	60		rts				rts
.315e					IFloatIntegerToStringR0:
.315e	8d df 06	sta $06df			sta 	IFBase 						; save base to use.
.3161	20 3d 34	jsr $343d			jsr 	IFloatBufferReset			; empty buffer
.3164	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.3166	29 3f		and #$3f			and 	#IFXMask
.3168	d0 1d		bne $3187			bne 	_IFIFail
.316a	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.316c	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero
.316f	f0 0e		beq $317f			beq 	_IFINotNegative
.3171	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.3173	29 40		and #$40			and 	#IFSign
.3175	f0 08		beq $317f			beq 	_IFINotNegative
.3177	a9 2d		lda #$2d			lda 	#"-"						; output -
.3179	20 4c 34	jsr $344c			jsr 	IFloatBufferWrite
.317c	20 c7 33	jsr $33c7			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.317f					_IFINotNegative:
.317f	20 89 31	jsr $3189			jsr 	_IFIRecursiveConvert 		; start converting
.3182	20 44 34	jsr $3444			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.3185	18		clc				clc
.3186	60		rts				rts
.3187					_IFIFail:
.3187	38		sec				sec
.3188	60		rts				rts
.3189					_IFIRecursiveConvert:
.3189	a2 0c		ldx #$0c			ldx 	#IFR1
.318b	20 5e 33	jsr $335e			jsr 	IFloatCopyToRegister 		; R0->R1
.318e	a2 08		ldx #$08			ldx 	#IFR0
.3190	ad df 06	lda $06df			lda 	IFBase 						; Base -> R0
.3193	20 be 33	jsr $33be			jsr 	IFloatSetByte
.3196	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.3198	20 20 2f	jsr $2f20			jsr 	IFloatDivideInteger
.319b	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.319d	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero
.31a0	f0 09		beq $31ab			beq 	_IFIOutDigit
.31a2	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.31a4	48		pha				pha
.31a5	20 89 31	jsr $3189			jsr 	_IFIRecursiveConvert 		; convert the divide result
.31a8	68		pla				pla
.31a9	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.31ab					_IFIOutDigit:
.31ab	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.31ad	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.31af	90 02		bcc $31b3			bcc 	_IFINotHex
.31b1	69 06		adc #$06			adc 	#6
.31b3					_IFINotHex:
.31b3	69 30		adc #$30			adc 	#48
.31b5	20 4c 34	jsr $344c			jsr 	IFloatBufferWrite 			; write character to buffer.
.31b8	60		rts				rts
.06df					IFBase:
>06df							.fill 	1
.31b9					IFloatFloatToStringR0:
.31b9	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.31bb	20 0b 33	jsr $330b			jsr 	IFloatPushRx
.31be	20 5e 33	jsr $335e			jsr 	IFloatCopyToRegister
.31c1	20 bd 30	jsr $30bd			jsr 	IFloatIntegerR0				; make R0 integer
.31c4	a9 0a		lda #$0a			lda 	#10 						; base 10.
.31c6	20 5e 31	jsr $315e			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.31c9	9c e0 06	stz $06e0			stz 	IFloatDecimalCount 			; zero the decimal count.
.31cc	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.31ce	29 3f		and #$3f			and 	#IFXMask
.31d0	f0 44		beq $3216			beq 	_IFFSExit
.31d2					_IFloatFracLoop:
.31d2	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.31d4	20 4d 33	jsr $334d			jsr 	IFloatCopyFromRegister
.31d7	20 67 30	jsr $3067			jsr 	IFloatFractionalR0
.31da	20 f3 33	jsr $33f3			jsr 	IFloatNormalise
.31dd	a2 10		ldx #$10			ldx 	#IFR2
.31df	20 5e 33	jsr $335e			jsr 	IFloatCopyToRegister 		; copy to back R2
.31e2	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.31e4	a9 0a		lda #$0a			lda 	#10
.31e6	20 be 33	jsr $33be			jsr 	IFloatSetByte
.31e9	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.31eb	20 5e 2e	jsr $2e5e			jsr 	IFloatMultiply
.31ee	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.31f0	20 5e 33	jsr $335e			jsr 	IFloatCopyToRegister
.31f3	20 bd 30	jsr $30bd			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.31f6	ad e0 06	lda $06e0			lda 	IFloatDecimalCount 			; done 3 dp, no more
.31f9	c9 03		cmp #$03			cmp 	#3
.31fb	f0 16		beq $3213			beq 	_IFFSExitStripZero
.31fd	ad e0 06	lda $06e0			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.3200	d0 05		bne $3207			bne 	_IFloatNotFirst
.3202	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3204	20 4c 34	jsr $344c			jsr 	IFloatBufferWrite
.3207					_IFloatNotFirst:
.3207	ee e0 06	inc $06e0			inc 	IFloatDecimalCount
.320a	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.320c	09 30		ora #$30			ora 	#"0"						; ASCII
.320e	20 4c 34	jsr $344c			jsr 	IFloatBufferWrite 			; write to the buffer.
.3211	80 bf		bra $31d2			bra 	_IFloatFracLoop
.3213					_IFFSExitStripZero:
.3213	20 5b 34	jsr $345b			jsr 	IFloatStripTrailingZeros
.3216					_IFFSExit:
.3216	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.3218	20 2c 33	jsr $332c			jsr 	IFloatPullRx
.321b	20 44 34	jsr $3444			jsr 	IFloatGetBufferAddress
.321e	18		clc				clc
.321f	60		rts				rts
.06e0					IFloatDecimalCount:
>06e0							.fill 	1
.3220					IFloatStringToFloatR0:
.3220	8d e1 06	sta $06e1			sta 	IFCount 					; save length and positions out.
.3223	86 20		stx $20				stx 	iTemp0
.3225	84 21		sty $21				sty 	iTemp0+1
.3227	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.3229	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.322c	9c e2 06	stz $06e2			stz 	IFSignFlag 					; clear the sign flag
.322f	20 bc 32	jsr $32bc			jsr 	IFSTFGetNext 				; get first
.3232	f0 1b		beq $324f			beq 	_IFSTFFail 					; no character, fail.
.3234	90 10		bcc $3246			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.3236	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.3238	d0 15		bne $324f			bne 	_IFSTFFail
.323a	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.323c	8d e2 06	sta $06e2			sta 	IFSignFlag
.323f					_IFSTFLoop:
.323f	20 bc 32	jsr $32bc			jsr 	IFSTFGetNext 				; get next character
.3242	b0 0b		bcs $324f			bcs 	_IFSTFFail 					; bad character.
.3244	f0 11		beq $3257			beq 	_IFSTFExit 					; end of data
.3246					_IFSTFHaveChar:
.3246	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.3248	f0 08		beq $3252			beq 	_IFSTFDecimal
.324a	20 e0 32	jsr $32e0			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.324d	80 f0		bra $323f			bra 	_IFSTFLoop 					; keep going until . or end.
.324f					_IFSTFFail:
.324f	38		sec				sec
.3250	80 0d		bra $325f			bra 	_IFSTFReturn
.3252					_IFSTFDecimal:
.3252	20 67 32	jsr $3267			jsr 	IFSTFDecimal 				; call the decimal places code.
.3255	b0 08		bcs $325f			bcs 	_IFSTFReturn 				; error
.3257					_IFSTFExit:
.3257	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.3259	0d e2 06	ora $06e2			ora 	IFSignFlag
.325c	85 0b		sta $0b				sta 	IFR0+IExp
.325e	18		clc				clc
.325f					_IFSTFReturn:
.325f	60		rts				rts
.3260					IFloatAddDecimalToR0:
.3260	8d e1 06	sta $06e1			sta 	IFCount 					; save it out.
.3263	86 20		stx $20				stx 	iTemp0
.3265	84 21		sty $21				sty 	iTemp0+1
.3267					IFSTFDecimal:
.3267	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.3269	20 0b 33	jsr $330b			jsr 	IFloatPushRx
.326c	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.326e	20 bc 33	jsr $33bc			jsr 	IFloatSetZero
.3271	9c e3 06	stz $06e3			stz 	IFDecimalPlaces 			; zero DP.
.3274					_IFSTDLoop:
.3274	20 bc 32	jsr $32bc			jsr 	IFSTFGetNext 				; get next
.3277	b0 41		bcs $32ba			bcs 	_IFSTFFail2 				; bad character.
.3279	f0 11		beq $328c			beq 	_IFSTFComplete 				; end of data, work out the result.
.327b	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.327d	f0 39		beq $32b8			beq 	_IFSTFExit2
.327f	20 e0 32	jsr $32e0			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.3282	ee e3 06	inc $06e3			inc 	IFDecimalPlaces 			; count decimals
.3285	ad e3 06	lda $06e3			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.3288	c9 03		cmp #$03			cmp 	#3
.328a	90 e8		bcc $3274			bcc 	_IFSTDLoop
.328c					_IFSTFComplete:
.328c	ad e3 06	lda $06e3			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.328f	f0 27		beq $32b8			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.3291	3a		dec a				dec 	a 							; table indexed from 1.
.3292	0a		asl a				asl 	a
.3293	0a		asl a				asl 	a
.3294	aa		tax				tax
.3295	bd f7 32	lda $32f7,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.3298	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.329a	bd f8 32	lda $32f8,x			lda 	TableTen+1,x
.329d	85 0d		sta $0d				sta  	IFR1+IM1
.329f	bd f9 32	lda $32f9,x			lda 	TableTen+2,x
.32a2	85 0e		sta $0e				sta  	IFR1+IM2
.32a4	bd fa 32	lda $32fa,x			lda 	TableTen+3,x
.32a7	85 0f		sta $0f				sta  	IFR1+IExp
.32a9	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.32ab	20 5e 2e	jsr $2e5e			jsr 	IFloatMultiply
.32ae	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.32b0	20 2c 33	jsr $332c			jsr 	IFloatPullRx
.32b3	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.32b5	20 b4 2d	jsr $2db4			jsr 	IFloatAdd
.32b8					_IFSTFExit2:
.32b8	18		clc				clc
.32b9	60		rts				rts
.32ba					_IFSTFFail2:
.32ba	38		sec				sec
.32bb	60		rts				rts
.32bc					IFSTFGetNext:
.32bc	ad e1 06	lda $06e1			lda 	IFCount  					; if count is zero, return with Z set.
.32bf	f0 19		beq $32da			beq 	_IFSTFReturnOk
.32c1	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.32c3	e6 20		inc $20				inc 	iTemp0 						; point at next.
.32c5	d0 02		bne $32c9			bne 	_IFSTFGNNoCarry
.32c7	e6 21		inc $21				inc 	iTemp0+1
.32c9					_IFSTFGNNoCarry:
.32c9	ce e1 06	dec $06e1			dec 	IFCount 					; dec count.
.32cc	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.32ce	f0 08		beq $32d8			beq 	_IFSTFGOkay
.32d0	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.32d2	90 08		bcc $32dc			bcc 	_IFSTFGFail
.32d4	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.32d6	b0 04		bcs $32dc			bcs 	_IFSTFGFail
.32d8					_IFSTFGOkay:
.32d8	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.32da					_IFSTFReturnOk:
.32da	18		clc				clc
.32db	60		rts				rts
.32dc					_IFSTFGFail:
.32dc	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.32de	38		sec				sec
.32df	60		rts				rts
.32e0					IFSTFAddR0:
.32e0	29 0f		and #$0f			and 	#15 						; to int value
.32e2	48		pha				pha 								; save it.
.32e3	a9 0a		lda #$0a			lda 	#10
.32e5	a2 0c		ldx #$0c			ldx 	#IFR1
.32e7	20 be 33	jsr $33be			jsr 	IFloatSetByte
.32ea	20 5e 2e	jsr $2e5e			jsr 	IFloatMultiply
.32ed	68		pla				pla
.32ee	a2 0c		ldx #$0c			ldx 	#IFR1
.32f0	20 be 33	jsr $33be			jsr 	IFloatSetByte
.32f3	20 b4 2d	jsr $2db4			jsr 	IFloatAdd
.32f6	60		rts				rts
.06e1					IFCount:
>06e1							.fill 	1
.06e2					IFSignFlag:
>06e2							.fill 	1
.06e3					IFDecimalPlaces:
>06e3							.fill 	1
.32f7					TableTen:
>32f7	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>32fb	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>32ff	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3303	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3307	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.330b					IFloatPushRx:
.330b	5a		phy				phy
.330c	ac e4 06	ldy $06e4			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.330f	b5 00		lda $00,x			lda 	IM0,x
.3311	99 e5 06	sta $06e5,y			sta 	IFStack,y
.3314	b5 01		lda $01,x			lda 	IM1,x
.3316	99 e6 06	sta $06e6,y			sta 	IFStack+1,y
.3319	b5 02		lda $02,x			lda 	IM2,x
.331b	99 e7 06	sta $06e7,y			sta 	IFStack+2,y
.331e	b5 03		lda $03,x			lda 	IExp,x
.3320	99 e8 06	sta $06e8,y			sta 	IFStack+3,y
.3323	c8		iny				iny
.3324	c8		iny				iny
.3325	c8		iny				iny
.3326	c8		iny				iny
.3327	8c e4 06	sty $06e4			sty 	IFStackIndex 				; update SP
.332a	7a		ply				ply
.332b	60		rts				rts
.332c					IFloatPullRx:
.332c	5a		phy				phy
.332d	ac e4 06	ldy $06e4			ldy 	IFStackIndex	 			; decrement SP
.3330	88		dey				dey
.3331	88		dey				dey
.3332	88		dey				dey
.3333	88		dey				dey
.3334	b9 e5 06	lda $06e5,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.3337	95 00		sta $00,x			sta 	IM0,x
.3339	b9 e6 06	lda $06e6,y			lda 	IFStack+1,y
.333c	95 01		sta $01,x			sta 	IM1,x
.333e	b9 e7 06	lda $06e7,y			lda 	IFStack+2,y
.3341	95 02		sta $02,x			sta 	IM2,x
.3343	b9 e8 06	lda $06e8,y			lda 	IFStack+3,y
.3346	95 03		sta $03,x			sta 	IExp,x
.3348	8c e4 06	sty $06e4			sty 	IFStackIndex 				; update SP
.334b	7a		ply				ply
.334c	60		rts				rts
.06e4					IFStackIndex:
>06e4							.fill 	1
.06e5					IFStack:
>06e5							.fill 	16*4
.334d					IFloatCopyFromRegister:
.334d	b5 00		lda $00,x			lda 	0,x
.334f	85 08		sta $08				sta 	IFR0
.3351	b5 01		lda $01,x			lda 	1,x
.3353	85 09		sta $09				sta 	IFR0+1
.3355	b5 02		lda $02,x			lda 	2,x
.3357	85 0a		sta $0a				sta 	IFR0+2
.3359	b5 03		lda $03,x			lda 	3,x
.335b	85 0b		sta $0b				sta 	IFR0+3
.335d	60		rts				rts
.335e					IFloatCopyToRegister:
.335e	a5 08		lda $08				lda 	IFR0
.3360	95 00		sta $00,x			sta 	0,x
.3362	a5 09		lda $09				lda 	IFR0+1
.3364	95 01		sta $01,x			sta 	1,x
.3366	a5 0a		lda $0a				lda 	IFR0+2
.3368	95 02		sta $02,x			sta 	2,x
.336a	a5 0b		lda $0b				lda 	IFR0+3
.336c	95 03		sta $03,x			sta 	3,x
.336e	60		rts				rts
.336f					IFloatLoadInline:
.336f	68		pla				pla 								; pop address off to iTemp0
.3370	85 20		sta $20				sta 	iTemp0
.3372	68		pla				pla
.3373	85 21		sta $21				sta 	iTemp0+1
.3375	a0 01		ldy #$01			ldy 	#1
.3377	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.3379	95 00		sta $00,x			sta 	0,x
.337b	c8		iny				iny
.337c	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.337e	95 01		sta $01,x			sta 	1,x
.3380	c8		iny				iny
.3381	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.3383	95 02		sta $02,x			sta 	2,x
.3385	c8		iny				iny
.3386	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.3388	95 03		sta $03,x			sta 	3,x
.338a	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.338b	a5 20		lda $20				lda 	iTemp0
.338d	69 05		adc #$05			adc 	#5
.338f	85 20		sta $20				sta 	iTemp0
.3391	90 02		bcc $3395			bcc 	_IFLINoCarry
.3393	e6 21		inc $21				inc 	iTemp0+1
.3395					_IFLINoCarry:
.3395	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3398					IFloatMultiply8BitRx:
.3398	5a		phy		        phy
.3399	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.339b	a4 08		ldy $08		        ldy     IFR0+IM0
.339d	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.339e	85 08		sta $08		        sta     IFR0+IM0
.33a0	84 09		sty $09		        sty     IFR0+IM1
.33a2	a9 00		lda #$00	        lda     #0
.33a4	a0 08		ldy #$08	        ldy     #8
.33a6					_IFMLoop:
.33a6	90 03		bcc $33ab	        bcc     _IFMNoAdd
.33a8	18		clc		        clc
.33a9	65 09		adc $09		        adc     IFR0+IM1
.33ab					_IFMNoAdd:
.33ab	6a		ror a		        ror     a
.33ac	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.33ae	88		dey		        dey
.33af	d0 f5		bne $33a6	        bne     _IFMLoop
.33b1	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.33b3	7a		ply		        ply
.33b4	60		rts		        rts
.33b5					IFloatCheckZero:
.33b5	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.33b7	15 01		ora $01,x			ora 	IM1,x
.33b9	15 02		ora $02,x			ora 	IM2,x
.33bb	60		rts				rts
.33bc					IFloatSetZero:
.33bc	a9 00		lda #$00			lda 	#0
.33be					IFloatSetByte:
.33be	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.33c0	74 01		stz $01,x			stz 	IM1,x
.33c2	74 02		stz $02,x			stz 	IM2,x
.33c4	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.33c6	60		rts				rts
.33c7					IFloatNegate:
.33c7	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.33c9	49 40		eor #$40			eor 	#IFSign
.33cb	95 03		sta $03,x			sta 	IExp,x
.33cd	18		clc				clc
.33ce	60		rts				rts
.33cf					IFloatMantissaNegate:
.33cf	38		sec				sec 								; when you want a real 2's complement negative value.
.33d0	a9 00		lda #$00			lda 	#0
.33d2	f5 00		sbc $00,x			sbc 	IM0,x
.33d4	95 00		sta $00,x			sta 	IM0,x
.33d6	a9 00		lda #$00			lda 	#0
.33d8	f5 01		sbc $01,x			sbc 	IM1,x
.33da	95 01		sta $01,x			sta 	IM1,x
.33dc	a9 00		lda #$00			lda 	#0
.33de	f5 02		sbc $02,x			sbc 	IM2,x
.33e0	95 02		sta $02,x			sta 	IM2,x
.33e2	60		rts				rts
.33e3					IFloatShiftLeft:
.33e3	18		clc				clc
.33e4					IFloatRotateLeft:
.33e4	36 00		rol $00,x			rol 	IM0,x
.33e6	36 01		rol $01,x			rol 	IM1,x
.33e8	36 02		rol $02,x			rol 	IM2,x
.33ea	60		rts				rts
.33eb					IFloatShiftRight:
.33eb	18		clc				clc
.33ec					IFloatRotateRight:
.33ec	76 02		ror $02,x			ror 	IM2,x
.33ee	76 01		ror $01,x			ror 	IM1,x
.33f0	76 00		ror $00,x			ror 	IM0,x
.33f2	60		rts				rts
.33f3					IFloatNormalise:
.33f3	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero 			; is it zero
.33f6	f0 18		beq $3410			beq 	_IFNExitZero 				; if so exit
.33f8					_IFNLoop:
.33f8	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.33fa	29 c0		and #$c0			and 	#$C0
.33fc	c9 40		cmp #$40			cmp 	#$40
.33fe	f0 13		beq $3413			beq 	_IFNExitOkay 				; if so , then we are done.
.3400	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3402	29 3f		and #$3f			and 	#$3F
.3404	c9 20		cmp #$20			cmp 	#$20
.3406	f0 0b		beq $3413			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3408	20 29 34	jsr $3429			jsr 	IFloatDecExponent
.340b	20 e3 33	jsr $33e3			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.340e	80 e8		bra $33f8			bra 	_IFNLoop
.3410					_IFNExitZero:
.3410	20 bc 33	jsr $33bc			jsr 	IFloatSetZero 				; set the result to zero
.3413					_IFNExitOkay:
.3413	18		clc				clc  								; return with CC.
.3414	60		rts				rts
.3415					IFloatIncExponent:
.3415	b5 03		lda $03,x			lda 	IExp,x
.3417	48		pha				pha
.3418	29 c0		and #$c0			and 	#$C0
.341a	8d 25 07	sta $0725			sta 	IFXTemp
.341d	68		pla				pla
.341e	1a		inc a				inc 	a
.341f	29 3f		and #$3f			and 	#$3F
.3421	48		pha				pha
.3422	0d 25 07	ora $0725			ora 	IFXTemp
.3425	95 03		sta $03,x			sta 	IExp,x
.3427	68		pla				pla
.3428	60		rts				rts
.3429					IFloatDecExponent:
.3429	b5 03		lda $03,x			lda 	IExp,x
.342b	48		pha				pha
.342c	29 c0		and #$c0			and 	#$C0
.342e	8d 25 07	sta $0725			sta 	IFXTemp
.3431	68		pla				pla
.3432	3a		dec a				dec 	a
.3433	29 3f		and #$3f			and 	#$3F
.3435	48		pha				pha
.3436	0d 25 07	ora $0725			ora 	IFXTemp
.3439	95 03		sta $03,x			sta 	IExp,x
.343b	68		pla				pla
.343c	60		rts				rts
.0725					IFXTemp:
>0725							.fill 	1
.343d					IFloatBufferReset:
.343d	9c 26 07	stz $0726			stz 	IFBufferCount
.3440	9c 27 07	stz $0727			stz 	IFBuffer
.3443	60		rts				rts
.3444					IFloatGetBufferAddress:
.3444	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.3446	a2 26		ldx #$26			ldx 	#(IFBufferCount & $FF)
.3448	ad 26 07	lda $0726			lda 	IFBufferCount
.344b	60		rts				rts
.344c					IFloatBufferWrite:
.344c	da		phx				phx
.344d	ae 26 07	ldx $0726			ldx 	IFBufferCount
.3450	9d 27 07	sta $0727,x			sta 	IFBuffer,x
.3453	9e 28 07	stz $0728,x			stz 	IFBuffer+1,x
.3456	ee 26 07	inc $0726			inc 	IFBufferCount
.3459	fa		plx				plx
.345a	60		rts				rts
.345b					IFloatStripTrailingZeros:
.345b	ae 26 07	ldx $0726			ldx 	IFBufferCount
.345e	bd 26 07	lda $0726,x			lda 	IFBuffer-1,x
.3461	c9 30		cmp #$30			cmp		#"0"
.3463	d0 0f		bne $3474			bne 	_IFSTExit
.3465	bd 25 07	lda $0725,x			lda 	IFBuffer-2,x
.3468	c9 2e		cmp #$2e			cmp 	#"."
.346a	f0 08		beq $3474			beq 	_IFSTExit
.346c	ce 26 07	dec $0726			dec 	IFBufferCount
.346f	9e 26 07	stz $0726,x			stz 	IFBuffer-1,x
.3472	80 e7		bra $345b			bra 	IFloatStripTrailingZeros
.3474					_IFSTExit:
.3474	60		rts				rts
.0726					IFBufferCount:
>0726							.fill 	1
.0727					IFBuffer:
>0727							.fill 	25
.3475					IFloatCheckRange:
.3475	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.3477	09 40		ora #$40			ora 	#IFSign
.3479	85 0b		sta $0b				sta 	IFR0+IExp
.347b	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.347d	20 b4 2d	jsr $2db4			jsr 	IFloatAdd 					; add allowed to error.
.3480	a2 08		ldx #$08			ldx 	#IFR0
.3482	20 b5 33	jsr $33b5			jsr 	IFloatCheckZero 			; error if < 0
.3485	f0 06		beq $348d			beq 	_IFAOkay
.3487	a5 0b		lda $0b				lda 	IFR0+IExp
.3489	29 40		and #$40			and 	#IFSign
.348b	d0 01		bne $348e			bne 	_IFAFail
.348d					_IFAOkay:
.348d	60		rts				rts
.348e					_IFAFail:
.348e	38		sec				sec
.348f	68		pla				pla 								; get address - 2
.3490	e9 02		sbc #$02			sbc 	#2
.3492	aa		tax				tax
.3493	68		pla				pla
.3494	e9 00		sbc #$00			sbc 	#0
.3496	a8		tay				tay
.3497	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3499					_IFAStop:
>3499	db						.byte 	$DB 						; display an error AA ADR ADR
.349a	80 fd		bra $3499			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
