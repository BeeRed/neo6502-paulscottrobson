
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$6000" -D "ENDMEMORY=\$B000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Tue Jun  6 18:29:14 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$6000					BASICCODE=$6000
=$b000					ENDMEMORY=$B000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					rTemp1:
>000a							.fill 	2
.000c					iTemp0:
>000c							.fill 	2
.000e					IFR0:
>000e							.fill 	4
.0012					IFR1:
>0012							.fill 	4
.0016					IFR2:
>0016							.fill 	4
.001a					IFRTemp:
>001a							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 b0		ldy #$b0			ldy 	#ENDMEMORY >> 8
.1004	20 c8 1d	jsr $1dc8			jsr 	PGMSetBaseAddress
.1007	20 c3 28	jsr $28c3			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c 7c 13	jmp $137c			jmp 	Command_RUN
.1012	4c 66 13	jmp $1366			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001e					codePtr:
>001e							.fill 	2
.0020					zTemp0:
>0020							.fill 	2
.0022					zTemp1:
>0022							.fill 	2
.0024					zTemp2:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber
.1018	a2 0e		ldx #$0e			ldx 	#IFR0
.101a	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c e9 23	jmp $23e9		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	20 db 1d	jsr $1ddb			jsr 	PGMEndProgram 				; end program => zTemp0
.1026	64 26		stz $26				stz 	freeMemory 					; start on next free page
.1028	a5 21		lda $21				lda 	zTemp0+1
.102a	1a		inc a				inc 	a
.102b	85 27		sta $27				sta 	freeMemory+1
.102d	20 62 28	jsr $2862			jsr 	VARClearHashTables
.1030	ad 15 05	lda $0515			lda 	PGMEndMemoryHigh
.1033	20 9f 25	jsr $259f			jsr 	StackReset
.1036	20 fe 25	jsr $25fe			jsr 	StringSystemInitialise
.1039	20 00 23	jsr $2300			jsr 	ScanProcedures
.103c	60		rts				rts
.103d					AllocateMemory:
.103d	5a		phy				phy 								; save Y
.103e	a4 26		ldy $26				ldy 	freeMemory 					; save addr.low
.1040	5a		phy				phy
.1041	a4 27		ldy $27				ldy 	freeMemory+1 				; save addr.high
.1043	5a		phy				phy
.1044	a8		tay				tay 								; count is now in XY
.1045					_AllocateLoop:
.1045	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1047	d0 04		bne $104d			bne 	_AllocateOne
.1049	c0 00		cpy #$00			cpy 	#0
.104b	f0 15		beq $1062			beq 	_AllocateExit
.104d					_AllocateOne:
.104d	a9 00		lda #$00			lda 	#0 							; zero byte
.104f	92 26		sta ($26)			sta 	(freeMemory)
.1051	e6 26		inc $26				inc 	freeMemory 					; bump pointer
.1053	d0 05		bne $105a			bne 	_AllocateSkipCarry
.1055	e6 27		inc $27				inc 	freeMemory+1
.1057	20 66 10	jsr $1066			jsr 	ClearCheckMemory
.105a					_AllocateSkipCarry:
.105a	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.105c	d0 01		bne $105f			bne 	_AllocateSkipBorrow
.105e	ca		dex				dex
.105f					_AllocateSkipBorrow:
.105f	88		dey				dey
.1060	80 e3		bra $1045			bra 	_AllocateLoop
.1062					_AllocateExit:
.1062	fa		plx				plx 								; restore address
.1063	68		pla				pla
.1064	7a		ply				ply 								; restore Y
.1065	60		rts				rts
.1066					ClearCheckMemory:
.1066	a5 27		lda $27				lda 	freeMemory+1
.1068	1a		inc a				inc 	a
.1069	1a		inc a				inc 	a
.106a	cd 1d 06	cmp $061d			cmp 	stringMemory+1
.106d	b0 01		bcs $1070			bcs  	_CCMError
.106f	60		rts				rts
.1070					_CCMError:
.1070	4c 83 24	jmp $2483		jmp	ErrorV_memory
.0026					freeMemory:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1073					CommandDIM:
.1073	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.1075	29 c0		and #$c0			and 	#$C0
.1077	c9 40		cmp #$40			cmp 	#$40
.1079	d0 39		bne $10b4			bne 	_CDSyntax
.107b	20 19 28	jsr $2819			jsr 	VARGetInfo 					; get information
.107e	ad 25 06	lda $0625			lda 	VARType 					; check array.
.1081	29 02		and #$02			and 	#2
.1083	f0 2f		beq $10b4			beq 	_CDSyntax
.1085	20 cb 27	jsr $27cb			jsr 	VARFind 					; does it already exist
.1088	b0 2d		bcs $10b7			bcs 	_CDExists
.108a	20 77 27	jsr $2777			jsr 	VARCreate 					; create it - returns data ptr in XA
.108d	da		phx				phx 								; save target address
.108e	48		pha				pha
.108f	ad 25 06	lda $0625			lda 	VARType 					; type ID.
.1092	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1094	20 ba 10	jsr $10ba			jsr 	CreateArray 				; create array to XA
.1097	84 22		sty $22				sty 	zTemp1 						; save Y
.1099	7a		ply				ply 								; restore target to zTemp0
.109a	84 20		sty $20				sty 	zTemp0
.109c	7a		ply				ply
.109d	84 21		sty $21				sty 	zTemp0+1
.109f	92 20		sta ($20)			sta 	(zTemp0) 					; save new array
.10a1	a0 01		ldy #$01			ldy 	#1
.10a3	8a		txa				txa
.10a4	91 20		sta ($20),y			sta 	(zTemp0),y
.10a6	a4 22		ldy $22				ldy 	zTemp1 						; restore zTemp1
.10a8	20 30 25	jsr $2530			jsr 	ERRCheckRParen 				; check )
.10ab	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10ad	c8		iny				iny
.10ae	c9 99		cmp #$99			cmp 	#PR_COMMA
.10b0	f0 c1		beq $1073			beq 	CommandDIM
.10b2	88		dey				dey
.10b3	60		rts				rts
.10b4					_CDSyntax:
.10b4	4c 93 23	jmp $2393		jmp	ErrorV_syntax
.10b7					_CDExists:
.10b7	4c 5b 24	jmp $245b		jmp	ErrorV_redefine
.10ba					CreateArray:
.10ba	8d 03 05	sta $0503			sta 	CAType						; save type
.10bd	20 d4 15	jsr $15d4			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10c0	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10c2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10c4	f0 04		beq $10ca			beq 	_CATwoDimensions
.10c6	20 16 11	jsr $1116			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10c9	60		rts				rts
.10ca					_CATwoDimensions:
.10ca	a5 0f		lda $0f				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10cc	8d 05 05	sta $0505			sta 	CADim1+1
.10cf	a5 0e		lda $0e				lda 	IFR0+IM0
.10d1	8d 04 05	sta $0504			sta 	CADim1+0
.10d4	20 38 25	jsr $2538			jsr 	ERRCheckComma 				; check comma
.10d7	20 d4 15	jsr $15d4			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10da	5a		phy				phy 								; save Y position
.10db	18		clc				clc 								; allocate the outer array of pointers.
.10dc	ae 05 05	ldx $0505			ldx 	CADim1+1
.10df	ad 04 05	lda $0504			lda 	CADim1
.10e2	20 55 11	jsr $1155			jsr 	CSAAllocate 				; allocate the outer array
.10e5	da		phx				phx									; save this address on the stack
.10e6	48		pha				pha
.10e7	86 25		stx $25				stx 	zTemp2+1					; and in zTemp2
.10e9	85 24		sta $24				sta 	zTemp2
.10eb					_CACreateSubLoop:
.10eb	38		sec				sec
.10ec	20 16 11	jsr $1116			jsr 	CreateSingleArray 			; create data array of required size.
.10ef	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10f1	91 24		sta ($24),y			sta 	(zTemp2),y
.10f3	8a		txa				txa
.10f4	c8		iny				iny
.10f5	91 24		sta ($24),y			sta 	(zTemp2),y
.10f7	18		clc				clc  								; next slot.
.10f8	a5 24		lda $24				lda 	zTemp2
.10fa	69 02		adc #$02			adc 	#2
.10fc	85 24		sta $24				sta 	zTemp2
.10fe	90 02		bcc $1102			bcc 	_CACNoCarry
.1100	e6 25		inc $25				inc 	zTemp2+1
.1102					_CACNoCarry:
.1102	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1105	d0 03		bne $110a			bne 	_CACNoBorrow
.1107	ce 05 05	dec $0505			dec 	CADim1+1
.110a					_CACNoBorrow:
.110a	ce 04 05	dec $0504			dec 	CADim1
.110d	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1110	10 d9		bpl $10eb			bpl 	_CACreateSubLoop
.1112	68		pla				pla
.1113	fa		plx				plx
.1114	7a		ply				ply
.1115	60		rts				rts
.1116					CreateSingleArray:
.1116	5a		phy				phy
.1117	38		sec				sec 								; allocate memory block all zeros.
.1118	a5 0e		lda $0e				lda 	IFR0+IM0
.111a	a6 0f		ldx $0f				ldx 	IFR0+IM1
.111c	20 55 11	jsr $1155			jsr 	CSAAllocate
.111f	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1122	f0 2f		beq $1153			beq 	_CSANoInit
.1124	da		phx				phx 								; save address of new array
.1125	48		pha				pha
.1126	85 20		sta $20				sta 	zTemp0 						; address in zTemp0
.1128	86 21		stx $21				stx 	zTemp0+1
.112a	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.112c	b1 20		lda ($20),y			lda 	(zTemp0),y
.112e	a8		tay				tay
.112f	b2 20		lda ($20)			lda 	(zTemp0)
.1131	aa		tax				tax
.1132					_CSAEraseString:
.1132	5a		phy				phy
.1133	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1135	a9 80		lda #$80			lda 	#$80
.1137	91 20		sta ($20),y			sta 	(zTemp0),y
.1139	7a		ply				ply
.113a	18		clc				clc 								; add 4 to next slot.
.113b	a5 20		lda $20				lda 	zTemp0
.113d	69 04		adc #$04			adc 	#4
.113f	85 20		sta $20				sta 	zTemp0
.1141	90 02		bcc $1145			bcc 	_CSAENoCarry
.1143	e6 21		inc $21				inc 	zTemp0+1
.1145					_CSAENoCarry:
.1145	e0 00		cpx #$00			cpx 	#0
.1147	d0 01		bne $114a			bne 	_CSANoBorrow
.1149	88		dey				dey
.114a					_CSANoBorrow:
.114a	ca		dex				dex
.114b	d0 e5		bne $1132			bne 	_CSAEraseString
.114d	c0 00		cpy #$00			cpy 	#0
.114f	d0 e1		bne $1132			bne 	_CSAEraseString
.1151	68		pla				pla
.1152	fa		plx				plx
.1153					_CSANoInit:
.1153	7a		ply				ply
.1154	60		rts				rts
.1155					CSAAllocate:
.1155	08		php				php 								; save type flag.
.1156	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1157	d0 01		bne $115a			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1159	e8		inx				inx
.115a					_CSAANoCarry:
.115a	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.115c	b0 2e		bcs $118c			bcs 	_CSARange
.115e	28		plp				plp 								; restore type flag
.115f	08		php				php 								; save it back again.
.1160	da		phx				phx 								; save size.
.1161	48		pha				pha
.1162	86 21		stx $21				stx  	zTemp0+1 					; now in ztemp0+1:X
.1164	90 03		bcc $1169			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1166	0a		asl a				asl 	a
.1167	26 21		rol $21				rol 	zTemp0+1
.1169					_CSAATimes2:
.1169	0a		asl a				asl 	a
.116a	26 21		rol $21				rol 	zTemp0+1
.116c	18		clc				clc
.116d	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.116f	90 02		bcc $1173			bcc 	_CSAANoCarry2
.1171	e6 21		inc $21				inc 	zTemp0+1
.1173					_CSAANoCarry2:
.1173	a6 21		ldx $21				ldx 	zTemp0+1 					; XA is the bytes required.
.1175	20 3d 10	jsr $103d			jsr 	AllocateMemory 				; allocate memory to XA
.1178	86 21		stx $21				stx 	zTemp0+1 					; save pointers
.117a	85 20		sta $20				sta 	zTemp0
.117c	68		pla				pla  								; write element count to first 2 bytes
.117d	92 20		sta ($20)			sta 	(zTemp0)
.117f	68		pla				pla 								; msb of element count
.1180	28		plp				plp 								; CC if pointer array
.1181	b0 02		bcs $1185			bcs 	_CSAAIsData
.1183	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1185					_CSAAIsData:
.1185	a0 01		ldy #$01			ldy 	#1
.1187	91 20		sta ($20),y			sta 	(zTemp0),y
.1189	a5 20		lda $20				lda 	zTemp0 						; fix XA back up again
.118b	60		rts				rts
.118c					_CSARange:
.118c	4c a4 23	jmp $23a4		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.118f					Command_Doke:
.118f	38		sec				sec
.1190	80 01		bra $1193			bra 	DPCommon
.1192					Command_Poke:
.1192	18		clc				clc
.1193					DPCommon:
.1193	08		php				php 								; CS if DOKE
.1194	20 d4 15	jsr $15d4			jsr 	EXPEvalInteger16 			; address
.1197	a5 0e		lda $0e				lda 	IFR0+IM0 					; push on stack
.1199	48		pha				pha
.119a	a5 0f		lda $0f				lda 	IFR0+IM1
.119c	48		pha				pha
.119d	20 38 25	jsr $2538			jsr 	ERRCheckComma 				; [dp]oke address,data
.11a0	20 d4 15	jsr $15d4			jsr 	EXPEvalInteger16
.11a3	68		pla				pla 								; get address back
.11a4	85 21		sta $21				sta 	zTemp0+1
.11a6	68		pla				pla
.11a7	85 20		sta $20				sta 	zTemp0
.11a9	a5 0e		lda $0e				lda 	IFR0+IM0
.11ab	92 20		sta ($20)			sta 	(zTemp0)
.11ad	28		plp				plp
.11ae	90 08		bcc $11b8			bcc 	_DPExit
.11b0	5a		phy				phy
.11b1	a5 0f		lda $0f				lda 	IFR0+IM1
.11b3	a0 01		ldy #$01			ldy 	#1
.11b5	91 20		sta ($20),y			sta 	(zTemp0),y
.11b7	7a		ply				ply
.11b8					_DPExit:
.11b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11b9					Command_Print:
.11b9					Command_IP_Main:
.11b9	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11ba					_CPLoop:
.11ba	08		php				php 								; save last action flag
.11bb	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next character
.11bd	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11bf	f0 3e		beq $11ff			beq 	_CPExit 					; without consuming
.11c1	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11c3	f0 3a		beq $11ff			beq 	_CPExit
.11c5	68		pla				pla 								; throw last action flag
.11c6	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; next character and bump
.11c8	c8		iny				iny
.11c9	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11cb	f0 2f		beq $11fc			beq 	_CPContinueWithSameLine
.11cd	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11cf	f0 26		beq $11f7			beq 	_CPTab
.11d1	88		dey				dey 								; undo the get.
.11d2	20 82 15	jsr $1582			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11d5	24 11		bit $11				bit 	IFR0+IExp 					; is it a number ?
.11d7	10 14		bpl $11ed			bpl 	_CPNumber
.11d9	5a		phy				phy
.11da	18		clc				clc 								; string address to YX
.11db	a5 0e		lda $0e				lda 	IFR0+IM0
.11dd	aa		tax				tax
.11de	a5 0f		lda $0f				lda 	IFR0+IM1
.11e0	a8		tay				tay
.11e1	e8		inx				inx 								; point to 1st character
.11e2	d0 01		bne $11e5			bne 	_CPNoCarry
.11e4	c8		iny				iny
.11e5					_CPNoCarry:
.11e5	b2 0e		lda ($0e)			lda 	(IFR0+IM0)					; length to A
.11e7	20 08 12	jsr $1208			jsr 	CPPrintAYX 					; print AYX
.11ea	7a		ply				ply
.11eb	80 cc		bra $11b9			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11ed					_CPNumber:
.11ed	5a		phy				phy
.11ee	20 d5 2c	jsr $2cd5			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11f1	20 08 12	jsr $1208			jsr 	CPPrintAYX 					; print AYX
.11f4	7a		ply				ply
.11f5	80 c2		bra $11b9			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11f7					_CPTab:
.11f7	a9 09		lda #$09			lda 	#9 							; print TAB
.11f9	20 1b 12	jsr $121b			jsr 	CPPrintA
.11fc					_CPContinueWithSameLine:
.11fc	38		sec				sec 								; loop round with carry set, which
.11fd	80 bb		bra $11ba			bra 	_CPLoop 					; will inhibit final CR
.11ff					_CPExit:
.11ff	28		plp				plp 								; get last action flag
.1200	b0 05		bcs $1207			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1202	a9 0d		lda #$0d			lda 	#13 						; print new line
.1204	20 1b 12	jsr $121b			jsr 	CPPrintA
.1207					_CPExit2:
.1207	60		rts				rts
.1208					CPPrintAYX:
.1208	86 20		stx $20				stx 	zTemp0
.120a	84 21		sty $21				sty 	zTemp0+1
.120c	aa		tax				tax
.120d	f0 0b		beq $121a			beq 	_CPPrintExit
.120f	a0 00		ldy #$00			ldy 	#0
.1211					_CPPrintAYXLoop:
.1211	b1 20		lda ($20),y			lda 	(zTemp0),y
.1213	20 1b 12	jsr $121b			jsr 	CPPrintA
.1216	c8		iny				iny
.1217	ca		dex				dex
.1218	d0 f7		bne $1211			bne 	_CPPrintAYXLoop
.121a					_CPPrintExit:
.121a	60		rts				rts
.121b					CPPrintA:
.121b	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.121e					CommandLET:
.121e	20 4a 16	jsr $164a			jsr 	EXPTermR0 					; get term
.1221	90 6d		bcc $1290			bcc 	_CLError 					; must be a reference term.
.1223	a5 0e		lda $0e				lda 	IFR0+IM0 					; push address and type onto stack
.1225	48		pha				pha
.1226	a5 0f		lda $0f				lda 	IFR0+IM1
.1228	48		pha				pha
.1229	a5 11		lda $11				lda 	IFR0+IExp
.122b	48		pha				pha
.122c	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.122e	20 40 25	jsr $2540			jsr 	ERRCheckA
.1231	20 82 15	jsr $1582			jsr 	EXPEvaluateExpression 		; right hand side.
.1234	68		pla				pla 								; type of l-expr
.1235	45 11		eor $11				eor 	IFR0+IExp 					; check types match
.1237	30 5a		bmi $1293			bmi 	_CLType
.1239	fa		plx				plx 	 							; pop target address to zTemp0
.123a	86 21		stx $21				stx 	zTemp0+1
.123c	fa		plx				plx
.123d	86 20		stx $20				stx 	zTemp0
.123f	a5 11		lda $11				lda 	IFR0+IExp 					; string assignment
.1241	30 15		bmi $1258			bmi 	_CLStringAssign
.1243	5a		phy				phy
.1244	a0 03		ldy #$03			ldy 	#3
.1246	91 20		sta ($20),y			sta 	(zTemp0),y
.1248	88		dey				dey
.1249	a5 10		lda $10				lda 	IFR0+IM2
.124b	91 20		sta ($20),y			sta 	(zTemp0),y
.124d	88		dey				dey
.124e	a5 0f		lda $0f				lda 	IFR0+IM1
.1250	91 20		sta ($20),y			sta 	(zTemp0),y
.1252	a5 0e		lda $0e				lda 	IFR0+IM0
.1254	92 20		sta ($20)			sta 	(zTemp0)
.1256	7a		ply				ply
.1257	60		rts				rts
.1258					_CLStringAssign:
.1258	5a		phy				phy
.1259	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.125b	b1 20		lda ($20),y			lda 	(zTemp0),y
.125d	12 20		ora ($20)			ora 	(zTemp0)
.125f	f0 23		beq $1284			beq 	_CLConcreteString
.1261	b2 20		lda ($20)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1263	85 22		sta $22				sta 	zTemp1
.1265	b1 20		lda ($20),y			lda 	(zTemp0),y
.1267	85 23		sta $23				sta 	zTemp1+1
.1269	b2 22		lda ($22)			lda 	(zTemp1) 					; bytes available in the new slot
.126b	38		sec				sec 								; we want 3 for slot size, status, string size.
.126c	e9 03		sbc #$03			sbc 	#3
.126e	d2 0e		cmp ($0e)			cmp 	(IFR0) 						; compare against string size.
.1270	90 12		bcc $1284			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1272	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1274	1a		inc a				inc 	a
.1275	aa		tax				tax
.1276	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1278					_CLReplaceString:
.1278	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; copy new string into previous space.
.127a	c8		iny				iny
.127b	c8		iny				iny
.127c	91 22		sta ($22),y			sta 	(zTemp1),y
.127e	88		dey				dey
.127f	ca		dex				dex
.1280	d0 f6		bne $1278			bne 	_CLReplaceString
.1282	80 0a		bra $128e			bra 	_CLExit
.1284					_CLConcreteString:
.1284	20 b3 25	jsr $25b3			jsr 	StringConcrete  			; concreted string in XA.
.1287	a0 01		ldy #$01			ldy 	#1 							; store the address
.1289	92 20		sta ($20)			sta 	(zTemp0)
.128b	8a		txa				txa
.128c	91 20		sta ($20),y			sta 	(zTemp0),y
.128e					_CLExit:
.128e	7a		ply				ply
.128f	60		rts				rts
.1290					_CLError:
.1290	4c c6 24	jmp $24c6		jmp	ErrorV_variable
.1293					_CLType:
.1293	4c c3 23	jmp $23c3		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1296					Command_LIST:
.1296	9c 06 05	stz $0506			stz 	CLFrom 						; default from
.1299	9c 07 05	stz $0507			stz 	CLFrom+1
.129c	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.129e	c9 99		cmp #$99			cmp 	#PR_COMMA
.12a0	f0 1d		beq $12bf			beq 	_CLToLine
.12a2	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12a4	f0 37		beq $12dd			beq 	_CLDefaultTo
.12a6	20 d4 15	jsr $15d4			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.12a9	a5 0e		lda $0e				lda 	IFR0+IM0
.12ab	8d 06 05	sta $0506			sta 	CLFrom
.12ae	8d 08 05	sta $0508			sta 	CLTo
.12b1	a5 0f		lda $0f				lda 	IFR0+IM1
.12b3	8d 07 05	sta $0507			sta 	CLFrom+1
.12b6	8d 09 05	sta $0509			sta 	CLTo+1
.12b9	b1 1e		lda ($1e),y			lda 	(codePtr),y
.12bb	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.12bd	f0 26		beq $12e5			beq 	_CLList
.12bf					_CLToLine:
.12bf	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.12c1	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12c3	f0 18		beq $12dd			beq 	_CLDefaultTo
.12c5	20 38 25	jsr $2538			jsr 	ERRCheckComma 				; sep comma
.12c8	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.12ca	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.12cc	f0 0f		beq $12dd			beq 	_CLDefaultTo
.12ce	20 d4 15	jsr $15d4			jsr 	EXPEvalInteger16 			; there's a To value.
.12d1	a5 0e		lda $0e				lda 	IFR0+IM0
.12d3	8d 08 05	sta $0508			sta 	CLTo
.12d6	a5 0f		lda $0f				lda 	IFR0+IM1
.12d8	8d 09 05	sta $0509			sta 	CLTo+1
.12db	80 08		bra $12e5			bra 	_CLList
.12dd					_CLDefaultTo:
.12dd	a9 ff		lda #$ff			lda 	#$FF
.12df	8d 08 05	sta $0508			sta 	CLTo
.12e2	8d 09 05	sta $0509			sta 	CLTo+1
.12e5					_CLList:
.12e5	ad 14 05	lda $0514			lda 	PGMBaseHigh 				; back to the program start
.12e8	85 1f		sta $1f				sta 	codePtr+1
.12ea	64 1e		stz $1e				stz 	codePtr
.12ec	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.12ee	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.12f0	20 2a 1c	jsr $1c2a			jsr 	TOKSetDetokeniseOutput
.12f3					_CLLoop:
.12f3	b2 1e		lda ($1e)			lda 	(codePtr) 					; finished
.12f5	f0 4a		beq $1341			beq 	_CLExit
.12f7	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.12fa	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.12fd	d0 45		bne $1344			bne 	_CLBreak
.12ff	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1301	20 47 13	jsr $1347			jsr 	_CLCompareLine
.1304	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1306	f0 2c		beq $1334			beq 	_CLNext
.1308	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.130a	20 47 13	jsr $1347			jsr 	_CLCompareLine
.130d	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.130f	f0 23		beq $1334			beq 	_CLNext
.1311	a0 02		ldy #$02			ldy 	#2 							; print line #
.1313	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1315	aa		tax				tax
.1316	88		dey				dey
.1317	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1319	20 91 26	jsr $2691			jsr 	WriteIntXA
.131c	a9 20		lda #$20			lda 	#32
.131e	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1321	a4 1f		ldy $1f				ldy 	codePtr+1 					; point YX to tokenised code/
.1323	a5 1e		lda $1e				lda 	codePtr
.1325	18		clc				clc
.1326	69 03		adc #$03			adc 	#3
.1328	aa		tax				tax
.1329	90 01		bcc $132c			bcc 	_CLNoCarry2
.132b	c8		iny				iny
.132c					_CLNoCarry2:
.132c	20 e5 1b	jsr $1be5			jsr 	TOKDetokenise
.132f	a9 0d		lda #$0d			lda 	#13	 						; next line
.1331	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1334					_CLNext:
.1334	18		clc				clc 								; advance to next line.
.1335	b2 1e		lda ($1e)			lda 	(codePtr)
.1337	65 1e		adc $1e				adc 	codePtr
.1339	85 1e		sta $1e				sta 	codePtr
.133b	90 02		bcc $133f			bcc 	_CLNoCarry
.133d	e6 1f		inc $1f				inc 	codePtr+1
.133f					_CLNoCarry:
.133f	80 b2		bra $12f3			bra 	_CLLoop
.1341					_CLExit:
.1341	4c b0 26	jmp $26b0			jmp 	WarmStart
.1344					_CLBreak:
.1344	4c 1e 25	jmp $251e		jmp	ErrorV_break
.1347					_CLCompareLine:
.1347	a0 01		ldy #$01			ldy 	#1
.1349	38		sec				sec
.134a	b1 1e		lda ($1e),y			lda 	(codePtr),y
.134c	fd 06 05	sbc $0506,x			sbc 	CLFrom,x
.134f	85 20		sta $20				sta 	zTemp0
.1351	c8		iny				iny
.1352	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1354	fd 07 05	sbc $0507,x			sbc 	CLFrom+1,x
.1357	90 0a		bcc $1363			bcc 	_CLIsNegative
.1359	d0 05		bne $1360			bne 	_CLIsPositive
.135b	a5 20		lda $20				lda 	zTemp0
.135d	d0 01		bne $1360			bne 	_CLIsPositive
.135f	60		rts				rts
.1360					_CLIsPositive:
.1360	a9 01		lda #$01			lda 	#1
.1362	60		rts				rts
.1363					_CLIsNegative:
.1363	a9 ff		lda #$ff			lda 	#255
.1365	60		rts				rts
.0506					CLFrom:
>0506							.fill 	2
.0508					CLTo:
>0508							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1366					Command_NEW:
.1366	20 cf 1d	jsr $1dcf			jsr 	PGMNewProgram
.1369	20 23 10	jsr $1023			jsr 	Command_CLEAR
.136c	4c e7 13	jmp $13e7			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.136f					Command_REM:
.136f					Command_REM2:
.136f	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; optional string parameter
.1371	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1373	d0 06		bne $137b			bne 	_CRExit
.1375	c8		iny				iny 								; skip over it, it's a comment.
.1376	98		tya				tya
.1377	38		sec				sec
.1378	71 1e		adc ($1e),y			adc 	(codePtr),y
.137a	a8		tay				tay
.137b					_CRExit:
.137b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.137c					Command_RUN:
.137c	20 23 10	jsr $1023			jsr 	Command_CLEAR 				; clear everything out.
.137f	ad 14 05	lda $0514			lda 	PGMBaseHigh 				; back to the program start
.1382	85 1f		sta $1f				sta 	codePtr+1
.1384	64 1e		stz $1e				stz 	codePtr
.1386	80 0b		bra $1393			bra 	RUNNewLine
.1388					RUNEndOfLine:
.1388	18		clc				clc 								; advance to next line.
.1389	b2 1e		lda ($1e)			lda 	(codePtr)
.138b	65 1e		adc $1e				adc 	codePtr
.138d	85 1e		sta $1e				sta 	codePtr
.138f	90 02		bcc $1393			bcc 	_RELNoCarry
.1391	e6 1f		inc $1f				inc 	codePtr+1
.1393					_RELNoCarry:
.1393					RUNNewLine:
.1393	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1395	9a		txs				txs
.1396	b2 1e		lda ($1e)			lda 	(codePtr) 					; check off end of program
.1398	f0 4d		beq $13e7			beq 	Command_END
.139a	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.139c	b1 1e		lda ($1e),y			lda 	(codePtr),y
.139e	8d 20 06	sta $0620			sta 	ERRLine
.13a1	c8		iny				iny
.13a2	b1 1e		lda ($1e),y			lda 	(codePtr),y
.13a4	8d 21 06	sta $0621			sta 	ERRLine+1
.13a7	c8		iny				iny 								; offset into codePtr for start of line.
.13a8					RUNNewCommand:
.13a8	9c 1b 06	stz $061b			stz 	stringInitialised 			; reset string system.
.13ab	ce 0a 05	dec $050a			dec 	checkCounter
.13ae	d0 0a		bne $13ba			bne 	_RNCNoCheck
.13b0	5a		phy				phy 								; keyboard check.
.13b1	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.13b4	7a		ply				ply
.13b5	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.13b8	d0 1e		bne $13d8			bne 	_RUNBreak
.13ba					_RNCNoCheck:
.13ba	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token
.13bc	10 1d		bpl $13db			bpl		_RUNNotToken 				; probably an identifier
.13be	c8		iny				iny 								; consume token
.13bf	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.13c1	f0 e5		beq $13a8			beq 	RUNNewCommand
.13c3	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.13c5	b0 0e		bcs $13d5			bcs 	_RUNSyntax
.13c7	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.13c9	90 0a		bcc $13d5			bcc 	_RUNSyntax
.13cb	0a		asl a				asl 	a 							; double into X.
.13cc	aa		tax				tax
.13cd	20 d2 13	jsr $13d2			jsr 	_RUNDispatchMain			; call the main dispatcher
.13d0	80 d6		bra $13a8			bra 	RUNNewCommand
.13d2					_RUNDispatchMain:
.13d2	7c e5 1a	jmp ($1ae5,x)			jmp 	(VectorTable,x)
.13d5					_RUNSyntax:
.13d5	4c 93 23	jmp $2393		jmp	ErrorV_syntax
.13d8					_RUNBreak:
.13d8	4c 1e 25	jmp $251e		jmp	ErrorV_break
.13db					_RUNNotToken:
.13db	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.13dd	90 f6		bcc $13d5			bcc 	_RUNSyntax
.13df	20 1e 12	jsr $121e			jsr 	CommandLET 					; assignment
.13e2	80 c4		bra $13a8			bra 	RUNNewCommand 				; loop round.
.13e4					Command_Shift_Handler:
.13e4	4c d5 23	jmp $23d5		jmp	ErrorV_unimplemented
.13e7					Command_END:
.13e7	4c b0 26	jmp $26b0			jmp 	WarmStart
.050a					checkCounter:
>050a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.13ea					Command_STOP:
.13ea	4c 37 24	jmp $2437		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.13ed					Command_Sys:
.13ed	20 d4 15	jsr $15d4			jsr 	EXPEvalInteger16 			; execution address
.13f0	5a		phy				phy
.13f1	ad 68 06	lda $0668			lda 	('A'-'A')*4 + FastVariables ; load AXY
.13f4	ae c4 06	ldx $06c4			ldx 	('X'-'A')*4 + FastVariables
.13f7	ac c8 06	ldy $06c8			ldy 	('Y'-'A')*4 + FastVariables
.13fa	20 ff 13	jsr $13ff			jsr 	_CSCallIFR0 				; call the code
.13fd	7a		ply				ply
.13fe	60		rts				rts
.13ff					_CSCallIFR0:
.13ff	6c 0e 00	jmp ($000e)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1402					NoExec01:
.1402					NoExec02:
.1402					NoExec03:
.1402					NoExec04:
.1402					NoExec05:
.1402					NoExec06:
.1402					NoExec07:
.1402					NoExec08:
.1402	4c 93 23	jmp $2393		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1405					EXPBinAdd:
.1405	24 11		bit $11				bit 	IFR0+IExp
.1407	30 6f		bmi $1478			bmi 	EXPConcatenate
.1409	a2 12		ldx #$12			ldx 	#IFR1
.140b	4c ce 28	jmp $28ce			jmp 	IFloatAdd
.140e					EXPBinSub:
.140e	24 11		bit $11				bit 	IFR0+IExp
.1410	30 3f		bmi $1451			bmi 	EXPTypeError
.1412	a2 12		ldx #$12			ldx 	#IFR1
.1414	4c c7 28	jmp $28c7			jmp 	IFloatSubtract
.1417					EXPBinMul:
.1417	24 11		bit $11				bit 	IFR0+IExp
.1419	30 36		bmi $1451			bmi 	EXPTypeError
.141b	a2 12		ldx #$12			ldx 	#IFR1
.141d	4c 78 29	jmp $2978			jmp 	IFloatMultiply
.1420					EXPBinFDiv:
.1420	24 11		bit $11				bit 	IFR0+IExp
.1422	30 2d		bmi $1451			bmi 	EXPTypeError
.1424	a2 12		ldx #$12			ldx 	#IFR1
.1426	20 fb 2b	jsr $2bfb			jsr 	IFloatDivideFloat
.1429	b0 0f		bcs $143a			bcs 	EXPDZero
.142b	60		rts				rts
.142c					EXPBinIDiv:
.142c	24 11		bit $11				bit 	IFR0+IExp
.142e	30 21		bmi $1451			bmi 	EXPTypeError
.1430	a2 12		ldx #$12			ldx 	#IFR1
.1432	20 fb 2b	jsr $2bfb			jsr 	IFloatDivideFloat
.1435	b0 03		bcs $143a			bcs 	EXPDZero
.1437	4c d8 2b	jmp $2bd8			jmp 	IFloatIntegerR0
.143a					EXPDZero:
.143a	4c 0c 24	jmp $240c		jmp	ErrorV_divzero
.143d					EXPBinIMod:
.143d	24 11		bit $11				bit 	IFR0+IExp
.143f	30 10		bmi $1451			bmi 	EXPTypeError
.1441	a2 12		ldx #$12			ldx 	#IFR1
.1443	5a		phy				phy
.1444	20 10 2b	jsr $2b10			jsr 	IFPreProcessBitwise 		; set up everything.
.1447	d0 05		bne $144e			bne 	EXPDRange
.1449	20 49 2a	jsr $2a49			jsr 	IFloatModulusInteger
.144c	7a		ply				ply
.144d	60		rts				rts
.144e					EXPDRange:
.144e	4c a4 23	jmp $23a4		jmp	ErrorV_range
.1451					EXPTypeError:
.1451	4c c3 23	jmp $23c3		jmp	ErrorV_type
.1454					EXPBinAnd:
.1454	24 11		bit $11				bit 	IFR0+IExp
.1456	30 f9		bmi $1451			bmi 	EXPTypeError
.1458	a2 12		ldx #$12			ldx 	#IFR1
.145a	20 cb 2a	jsr $2acb			jsr 	IFloatBitwiseAnd
.145d	b0 ef		bcs $144e			bcs 	EXPDRange
.145f	60		rts				rts
.1460					EXPBinOr:
.1460	24 11		bit $11				bit 	IFR0+IExp
.1462	30 ed		bmi $1451			bmi 	EXPTypeError
.1464	a2 12		ldx #$12			ldx 	#IFR1
.1466	20 e2 2a	jsr $2ae2			jsr 	IFloatBitwiseOr
.1469	b0 e3		bcs $144e			bcs 	EXPDRange
.146b	60		rts				rts
.146c					EXPBinXor:
.146c	24 11		bit $11				bit 	IFR0+IExp
.146e	30 e1		bmi $1451			bmi 	EXPTypeError
.1470	a2 12		ldx #$12			ldx 	#IFR1
.1472	20 f9 2a	jsr $2af9			jsr 	IFloatBitwiseXor
.1475	b0 d7		bcs $144e			bcs 	EXPDRange
.1477	60		rts				rts
.1478					EXPConcatenate:
.1478	18		clc				clc
.1479	b2 0e		lda ($0e)			lda 	(IFR0) 	 					; work out total length
.147b	72 12		adc ($12)			adc 	(IFR1)
.147d	b0 2d		bcs $14ac			bcs 	_EXPCError
.147f	a6 0e		ldx $0e				ldx 	IFR0 						; push R0 string on stack.
.1481	da		phx				phx
.1482	a6 0f		ldx $0f				ldx 	IFR0+1
.1484	da		phx				phx
.1485	20 26 26	jsr $2626			jsr 	StringTempAllocate 			; allocate string, set up return
.1488	a6 13		ldx $13				ldx 	IFR1+1 						; copy first string.
.148a	a5 12		lda $12				lda 	IFR1
.148c	20 95 14	jsr $1495			jsr 	_EXPCCopyXA
.148f	fa		plx				plx 								; copy second string
.1490	68		pla				pla
.1491	20 95 14	jsr $1495			jsr 	_EXPCCopyXA
.1494	60		rts				rts
.1495					_EXPCCopyXA:
.1495	86 21		stx $21				stx 	zTemp0+1 					; save address to zTemp0
.1497	85 20		sta $20				sta 	zTemp0
.1499	b2 20		lda ($20)			lda 	(zTemp0)					; length
.149b	f0 0e		beq $14ab			beq 	_EXPCCExit 					; nothing.
.149d	aa		tax				tax 								; count
.149e	5a		phy				phy 								; start positioin
.149f	a0 01		ldy #$01			ldy 	#1
.14a1					_EXPCCLoop:
.14a1	b1 20		lda ($20),y			lda 	(zTemp0),y 					; write characters one at a time.
.14a3	20 5b 26	jsr $265b			jsr 	StringTempWrite
.14a6	c8		iny				iny
.14a7	ca		dex				dex
.14a8	d0 f7		bne $14a1			bne 	_EXPCCLoop
.14aa	7a		ply				ply
.14ab					_EXPCCExit:
.14ab	60		rts				rts
.14ac					_EXPCError:
.14ac	4c b0 24	jmp $24b0		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.14af					EXPReturnTrue:
.14af	a2 0e		ldx #$0e			ldx 	#IFR0
.14b1	a9 01		lda #$01			lda 	#1
.14b3	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.14b6	20 e3 2e	jsr $2ee3			jsr 	IFloatNegate
.14b9	60		rts				rts
.14ba					EXPReturnFalse:
.14ba	a2 0e		ldx #$0e			ldx 	#IFR0
.14bc	4c d8 2e	jmp $2ed8			jmp 	IFloatSetZero
.14bf					EXPCompareEqual:
.14bf	20 f5 14	jsr $14f5			jsr 	EXPCompareBaseCode
.14c2	c9 00		cmp #$00			cmp 	#0
.14c4	f0 e9		beq $14af			beq 	EXPReturnTrue
.14c6	80 f2		bra $14ba			bra 	EXPReturnFalse
.14c8					EXPCompareLess:
.14c8	20 f5 14	jsr $14f5			jsr 	EXPCompareBaseCode
.14cb	c9 ff		cmp #$ff			cmp 	#$FF
.14cd	f0 e0		beq $14af			beq 	EXPReturnTrue
.14cf	80 e9		bra $14ba			bra 	EXPReturnFalse
.14d1					EXPCompareGreater:
.14d1	20 f5 14	jsr $14f5			jsr 	EXPCompareBaseCode
.14d4	c9 01		cmp #$01			cmp 	#1
.14d6	f0 d7		beq $14af			beq 	EXPReturnTrue
.14d8	80 e0		bra $14ba			bra 	EXPReturnFalse
.14da					EXPCompareNotEqual:
.14da	20 f5 14	jsr $14f5			jsr 	EXPCompareBaseCode
.14dd	c9 00		cmp #$00			cmp 	#0
.14df	d0 ce		bne $14af			bne 	EXPReturnTrue
.14e1	80 d7		bra $14ba			bra 	EXPReturnFalse
.14e3					EXPCompareLessEqual:
.14e3	20 f5 14	jsr $14f5			jsr 	EXPCompareBaseCode
.14e6	c9 01		cmp #$01			cmp 	#1
.14e8	d0 c5		bne $14af			bne 	EXPReturnTrue
.14ea	80 ce		bra $14ba			bra 	EXPReturnFalse
.14ec					EXPCompareGreaterEqual:
.14ec	20 f5 14	jsr $14f5			jsr 	EXPCompareBaseCode
.14ef	c9 ff		cmp #$ff			cmp 	#$FF
.14f1	d0 bc		bne $14af			bne 	EXPReturnTrue
.14f3	80 c5		bra $14ba			bra 	EXPReturnFalse
.14f5					EXPCompareBaseCode:
.14f5	24 11		bit $11				bit 	IFR0+IExp 					; string compare ?
.14f7	30 10		bmi $1509			bmi 	_EXCBCString
.14f9	a2 12		ldx #$12			ldx 	#IFR1						; float compare
.14fb	20 a6 2b	jsr $2ba6			jsr 	IFloatCompare
.14fe	a5 0e		lda $0e				lda 	IFR0+IM0
.1500	f0 06		beq $1508			beq 	_EXCBCExit 					; return 0 if zero
.1502	24 11		bit $11				bit 	IFR0+IExp 					; return 1 if +ve
.1504	50 02		bvc $1508			bvc 	_EXCBCExit
.1506	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1508					_EXCBCExit:
.1508	60		rts				rts
.1509					_EXCBCString:
.1509	5a		phy				phy
.150a	b2 0e		lda ($0e)			lda 	(IFR0) 						; length of smaller of the two in X.
.150c	d2 12		cmp ($12)			cmp 	(IFR1)
.150e	90 02		bcc $1512			bcc 	_EXCBCSmaller
.1510	b2 12		lda ($12)			lda 	(IFR1)
.1512					_EXCBCSmaller:
.1512	aa		tax				tax
.1513	f0 0d		beq $1522			beq 	_EXCBCMatches 				; if zero common length matches
.1515	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1517					_EXCBCCheckSmallerMatches:
.1517	c8		iny				iny 								; compare directly as far as common length
.1518	38		sec				sec
.1519	b1 12		lda ($12),y			lda 	(IFR1),y
.151b	f1 0e		sbc ($0e),y			sbc 	(IFR0),y
.151d	d0 08		bne $1527			bne 	_EXCBCExit2
.151f	ca		dex				dex
.1520	d0 f5		bne $1517			bne 	_EXCBCCheckSmallerMatches
.1522					_EXCBCMatches:
.1522	38		sec				sec
.1523	b2 12		lda ($12)			lda 	(IFR1) 						; common length matches. If same length equal
.1525	f2 0e		sbc ($0e)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1527					_EXCBCExit2:
.1527	7a		ply				ply
.1528	c9 00		cmp #$00			cmp 	#0
.152a	f0 04		beq $1530			beq 	_EXCBCReturn
.152c	30 03		bmi $1531			bmi 	_EXCBCFF
.152e	a9 01		lda #$01			lda 	#1
.1530					_EXCBCReturn:
.1530	60		rts				rts
.1531					_EXCBCFF:
.1531	a9 ff		lda #$ff			lda 	#$FF
.1533	60		rts				rts
.1534					_EXCBCRange:
.1534	4c a4 23	jmp $23a4		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1537					EXPBinLeft:
.1537	a9 ff		lda #$ff			lda 	#$FF
.1539	8d 0b 05	sta $050b			sta 	EXPShiftLeftFlag
.153c	4c 42 15	jmp $1542			jmp 	EXPShiftCommon
.153f					EXPBinRight:
.153f	9c 0b 05	stz $050b			stz 	EXPShiftLeftFlag
.1542					EXPShiftCommon:
.1542	a5 11		lda $11				lda 	IFR0+IExp 					; both integers
.1544	05 15		ora $15				ora 	IFR1+IExp
.1546	29 7f		and #$7f			and 	#$7F
.1548	d0 35		bne $157f			bne 	_EXPSRange
.154a	a5 0e		lda $0e				lda 	IFR0+IM0					; check shift >= 32
.154c	29 e0		and #$e0			and 	#$E0
.154e	05 0f		ora $0f				ora 	IFR0+IM1
.1550	05 10		ora $10				ora 	IFR0+IM2
.1552	d0 25		bne $1579			bne 	_EXPSShiftZero 				; if so return zero
.1554	5a		phy				phy
.1555	a5 0e		lda $0e				lda 	IFR0+IM0 					; get shift
.1557	29 1f		and #$1f			and 	#$1F
.1559	f0 17		beq $1572			beq 	_EXPSExit 					; exit if zero
.155b	a8		tay				tay
.155c					_EXPSLoop:
.155c	a2 12		ldx #$12			ldx 	#IFR1
.155e	2c 0b 05	bit $050b			bit 	EXPShiftLeftFlag
.1561	30 05		bmi $1568			bmi 	_EXPSShiftLeft
.1563	20 07 2f	jsr $2f07			jsr 	IFloatShiftRight
.1566	80 07		bra $156f			bra 	_EXPSContinue
.1568					_EXPSShiftLeft:
.1568	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.156b	24 10		bit $10				bit 	IFR0+IM2 					; too many shifts
.156d	30 10		bmi $157f			bmi 	_EXPSRange
.156f					_EXPSContinue:
.156f	88		dey				dey
.1570	d0 ea		bne $155c			bne 	_EXPSLoop
.1572					_EXPSExit:
.1572	a2 12		ldx #$12			ldx 	#IFR1
.1574	20 69 2e	jsr $2e69			jsr 	IFloatCopyFromRegister
.1577	7a		ply				ply
.1578	60		rts				rts
.1579					_EXPSShiftZero:
.1579	a2 0e		ldx #$0e			ldx 	#IFR0
.157b	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.157e	60		rts				rts
.157f					_EXPSRange:
.157f	4c a4 23	jmp $23a4		jmp	ErrorV_range
.050b					EXPShiftLeftFlag:
>050b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1582					EXPEvaluateExpression:
.1582	a9 00		lda #$00			lda 	#0 							; current precedence
.1584					EXPEvaluateExpressionPrecedenceA:
.1584	48		pha				pha
.1585	20 ff 15	jsr $15ff			jsr 	EXPTermValueR0				; do first term.
.1588					_EELoop:
.1588	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.158a	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.158c	90 31		bcc $15bf			bcc 	_EEExit
.158e	aa		tax				tax 								; access the precedence of the operator.
.158f	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1590	dd 3d 18	cmp $183d,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1593	b0 2b		bcs $15c0			bcs 	_EEExit2
.1595	48		pha				pha 								; save current precedence.
.1596	da		phx				phx 								; save operator
.1597	c8		iny				iny 								; consume operator
.1598	da		phx				phx
.1599	a2 0e		ldx #$0e			ldx 	#IFR0 						; push R0 on the stack
.159b	20 27 2e	jsr $2e27			jsr 	IFloatPushRx
.159e	fa		plx				plx
.159f	bd 3d 18	lda $183d,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.15a2	20 84 15	jsr $1584			jsr 	EXPEvaluateExpressionPrecedenceA
.15a5	a2 12		ldx #$12			ldx 	#IFR1 						; pop LHS to R1.
.15a7	20 48 2e	jsr $2e48			jsr 	IFloatPullRx
.15aa	fa		plx				plx 								; operator
.15ab	a5 11		lda $11				lda 	IFR0+IExp 					; if check types match.
.15ad	45 15		eor $15				eor 	IFR1+IExp
.15af	30 08		bmi $15b9			bmi 	_EEType
.15b1					_EETypeOkay:
.15b1	8a		txa				txa
.15b2	0a		asl a				asl 	a 							; double -> X
.15b3	aa		tax				tax
.15b4	20 bc 15	jsr $15bc			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.15b7	80 cf		bra $1588			bra 	_EELoop
.15b9					_EEType:
.15b9	4c c3 23	jmp $23c3		jmp	ErrorV_type
.15bc					_EECallBinary:
.15bc	7c e5 1a	jmp ($1ae5,x)			jmp 	(VectorTable,x)
.15bf					_EEExit:
.15bf	68		pla				pla 								; throw precedence
.15c0					_EEExit2:
.15c0	18		clc				clc
.15c1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.15c2					EXPEvalNumber:
.15c2	20 82 15	jsr $1582			jsr 	EXPEvaluateExpression
.15c5	24 11		bit $11				bit 	IFR0+IExp
.15c7	30 01		bmi $15ca			bmi 	EVUType
.15c9	60		rts				rts
.15ca					EVUType:
.15ca	4c c3 23	jmp $23c3		jmp	ErrorV_type
.15cd					EXPEvalInteger:
.15cd	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.15d0	20 d8 2b	jsr $2bd8			jsr 	IFloatIntegerR0
.15d3	60		rts				rts
.15d4					EXPEvalInteger16:
.15d4	20 cd 15	jsr $15cd			jsr 	EXPEvalInteger
.15d7	a5 10		lda $10				lda 	IFR0+IM2
.15d9	d0 21		bne $15fc			bne 	EVURange
.15db	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15dd	a5 0e		lda $0e				lda 	IFR0+IM0
.15df	60		rts				rts
.15e0					EXPEvalInteger8:
.15e0	20 cd 15	jsr $15cd			jsr 	EXPEvalInteger
.15e3	a5 10		lda $10				lda 	IFR0+IM2
.15e5	05 0f		ora $0f				ora 	IFR0+IM1
.15e7	d0 13		bne $15fc			bne 	EVURange
.15e9	a5 0e		lda $0e				lda 	IFR0+IM0
.15eb	60		rts				rts
.15ec					EXPEvalString:
.15ec	20 82 15	jsr $1582			jsr 	EXPEvaluateExpression
.15ef	24 11		bit $11				bit 	IFR0+IExp
.15f1	10 d7		bpl $15ca			bpl 	EVUType
.15f3	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15f5	86 21		stx $21				stx 	zTemp0+1
.15f7	a5 0e		lda $0e				lda 	IFR0+IM0
.15f9	85 20		sta $20				sta 	zTemp0
.15fb	60		rts				rts
.15fc					EVURange:
.15fc	4c a4 23	jmp $23a4		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.15ff					EXPTermValueR0:
.15ff	20 4a 16	jsr $164a			jsr 	EXPTermR0 					; get term
.1602	90 45		bcc $1649			bcc 	_ETVNotReference 			; exit if value.
.1604	5a		phy				phy
.1605	a0 03		ldy #$03			ldy 	#3 							; get type
.1607	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1609	30 14		bmi $161f			bmi 	_ETVDereferenceString
.160b	85 11		sta $11				sta 	IFR0+IExp 					; dereference to R0
.160d	88		dey				dey
.160e	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1610	85 10		sta $10				sta 	IFR0+IM2
.1612	88		dey				dey
.1613	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1615	aa		tax				tax
.1616	b2 0e		lda ($0e)			lda 	(IFR0)
.1618	86 0f		stx $0f				stx 	IFR0+IM1
.161a	85 0e		sta $0e				sta 	IFR0+IM0
.161c	7a		ply				ply
.161d	18		clc				clc
.161e	60		rts				rts
.161f					_ETVDereferenceString:
.161f	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1621	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1623	12 0e		ora ($0e)			ora 	(IFR0)
.1625	f0 11		beq $1638			beq 	_ETVNull
.1627	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; load address of string to XA
.1629	aa		tax				tax
.162a	b2 0e		lda ($0e)			lda 	(IFR0)
.162c	18		clc				clc 								; add two so points to actual string.
.162d	69 02		adc #$02			adc 	#2
.162f	90 01		bcc $1632			bcc 	_EVDSNoCarry
.1631	e8		inx				inx
.1632					_EVDSNoCarry:
.1632	86 0f		stx $0f				stx 	IFR0+IM1 					; save in slots
.1634	85 0e		sta $0e				sta 	IFR0
.1636	80 08		bra $1640			bra 	_ETVFillExit 				; tidy up and exit.
.1638					_ETVNull:
.1638	a9 48		lda #$48			lda 	#_EVTNString & $FF
.163a	85 0e		sta $0e				sta 	IFR0+IM0
.163c	a9 16		lda #$16			lda 	#_EVTNString >> 8
.163e	85 0f		sta $0f				sta 	IFR0+IM1
.1640					_ETVFillExit:
.1640	64 10		stz $10				stz 	IFR0+IM2
.1642	a9 80		lda #$80			lda 	#$80
.1644	85 11		sta $11				sta 	IFR0+IExp
.1646	7a		ply				ply
.1647	60		rts				rts
.1648					_EVTNString:
>1648	00						.byte 	0
.1649					_ETVNotReference:
.1649	60		rts				rts
.164a					EXPTermR0:
.164a	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token/element
.164c	30 10		bmi $165e			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.164e	c8		iny				iny 								; consume element
.164f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1651	b0 08		bcs $165b			bcs 	_ETMIdentifier
.1653	20 82 16	jsr $1682			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1656	20 b5 16	jsr $16b5			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1659	18		clc				clc 								; return value
.165a	60		rts				rts
.165b					_ETMIdentifier:
.165b	4c 6f 28	jmp $286f			jmp 	VARCheckSimple 				; check simple variables A-Z
.165e					_ETMIsUnaryOrMinus:
.165e	c8		iny				iny 								; consume element
.165f	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1661	d0 0a		bne $166d			bne 	_ETMCheckUnary
.1663	20 ff 15	jsr $15ff			jsr 	EXPTermValueR0 				; get a term to negate
.1666	a2 0e		ldx #$0e			ldx 	#IFR0 						; and negate it
.1668	20 e3 2e	jsr $2ee3			jsr 	IFloatNegate
.166b	18		clc				clc
.166c	60		rts				rts
.166d					_ETMCheckUnary:
.166d	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.166f	90 0e		bcc $167f			bcc 	_ETMUnarySyntax
.1671	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1673	b0 0a		bcs $167f			bcs 	_ETMUnarySyntax
.1675	0a		asl a				asl 	a
.1676	aa		tax				tax
.1677	20 7c 16	jsr $167c			jsr 	_ETMCallUnaryFunction
.167a	18		clc				clc
.167b	60		rts				rts
.167c					_ETMCallUnaryFunction:
.167c	7c e5 1a	jmp ($1ae5,x)			jmp 	(VectorTable,x)
.167f					_ETMUnarySyntax:
.167f	4c 93 23	jmp $2393		jmp	ErrorV_syntax
.1682					EXPExtractTokenisedInteger:
.1682	85 0e		sta $0e				sta 	IFR0+IM0 					; initial value in IM0
.1684	64 11		stz $11				stz 	IFR0+IExp
.1686	64 0f		stz $0f				stz 	IFR0+IM1
.1688	64 10		stz $10				stz 	IFR0+IM2
.168a					_ETMConstant:
.168a	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.168c	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.168e	b0 24		bcs $16b4			bcs 	_ETMCExit 					; no.
.1690	a6 10		ldx $10				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1692	a5 0f		lda $0f				lda 	IFR0+IM1
.1694	85 10		sta $10				sta 	IFR0+IM2
.1696	a5 0e		lda $0e				lda 	IFR0+IM0
.1698	85 0f		sta $0f				sta 	IFR0+IM1
.169a	64 0e		stz $0e				stz 	IFR0+IM0
.169c	8a		txa				txa
.169d	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.169e	66 10		ror $10				ror 	IFR0+IM2
.16a0	66 0f		ror $0f				ror 	IFR0+IM1
.16a2	66 0e		ror $0e				ror 	IFR0+IM0
.16a4	4a		lsr a				lsr 	a
.16a5	66 10		ror $10				ror 	IFR0+IM2
.16a7	66 0f		ror $0f				ror 	IFR0+IM1
.16a9	66 0e		ror $0e				ror 	IFR0+IM0
.16ab	a5 0e		lda $0e				lda 	IFR0+IM0 					; LSB in.
.16ad	11 1e		ora ($1e),y			ora 	(codePtr),y
.16af	85 0e		sta $0e				sta 	IFR0+IM0
.16b1	c8		iny				iny 								; consume, loop back
.16b2	80 d6		bra $168a			bra 	_ETMConstant
.16b4					_ETMCExit:
.16b4	60		rts				rts
.16b5					EXPCheckDecimalFollows:
.16b5	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check for decimal
.16b7	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.16b9	d0 19		bne $16d4			bne 	_ETMCDExit
.16bb	c8		iny				iny 								; consume token.
.16bc	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get count
.16be	5a		phy				phy									; save current position
.16bf	48		pha				pha 								; save count of chars.
.16c0	38		sec				sec 								; address into YX : y + codePtr+1
.16c1	98		tya				tya
.16c2	65 1e		adc $1e				adc 	codePtr
.16c4	aa		tax				tax
.16c5	a5 1f		lda $1f				lda 	codePtr+1
.16c7	69 00		adc #$00			adc 	#0
.16c9	a8		tay				tay
.16ca	68		pla				pla 								; get count.
.16cb	20 7c 2d	jsr $2d7c			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.16ce	7a		ply				ply 								; go to next token.
.16cf	98		tya				tya
.16d0	38		sec				sec
.16d1	71 1e		adc ($1e),y			adc 	(codePtr),y
.16d3	a8		tay				tay
.16d4					_ETMCDExit:
.16d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.16d5					EXPUnaryAbs:
.16d5	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 					; number to R0
.16d8	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.16db	20 1c 2b	jsr $2b1c			jsr 	IFloatAbsoluteR0
.16de	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.16df					EXPUnaryAsc:
.16df	20 ec 15	jsr $15ec			jsr 	EXPEvalString 					; string to R0, zTemp0
.16e2	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.16e5	b2 20		lda ($20)			lda 	(zTemp0) 						; length 0 ?
.16e7	f0 06		beq $16ef			beq 	_EXAZero 						; if so return 0
.16e9	5a		phy				phy 									; otherwise get first character
.16ea	a0 01		ldy #$01			ldy 	#1
.16ec	b1 20		lda ($20),y			lda 	(zTemp0),y
.16ee	7a		ply				ply
.16ef					_EXAZero:
.16ef	a2 0e		ldx #$0e			ldx 	#IFR0
.16f1	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.16f4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.16f5					EXPUnaryChr:
.16f5	20 e0 15	jsr $15e0			jsr 	EXPEvalInteger8 				; expr
.16f8	48		pha				pha 									; push on stack
.16f9	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.16fc	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.16fe	20 26 26	jsr $2626			jsr 	StringTempAllocate
.1701	68		pla				pla
.1702	20 5b 26	jsr $265b			jsr 	StringTempWrite
.1705	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1706					EXPUnaryDec:
.1706	20 ec 15	jsr $15ec			jsr 	EXPEvalString 					; string to R0, zTemp0
.1709	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.170c	5a		phy				phy
.170d	a2 0e		ldx #$0e			ldx 	#IFR0 							; zero the result
.170f	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.1712	b2 20		lda ($20)			lda 	(zTemp0)						; read the length to X
.1714	f0 3b		beq $1751			beq 	_EUDError 						; empty string
.1716	aa		tax				tax
.1717	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1719					_EUDLoop:
.1719	b1 20		lda ($20),y			lda 	(zTemp0),y 						; get next
.171b	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.171d	90 02		bcc $1721			bcc 	_EUDNoCase
.171f	e9 20		sbc #$20			sbc 	#$20
.1721					_EUDNoCase:
.1721	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1723	90 2c		bcc $1751			bcc 	_EUDError
.1725	c9 3a		cmp #$3a			cmp 	#'9'+1
.1727	90 0a		bcc $1733			bcc 	_EUDOkay
.1729	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.172b	90 24		bcc $1751			bcc 	_EUDError
.172d	c9 47		cmp #$47			cmp 	#'F'+1
.172f	b0 20		bcs $1751			bcs 	_EUDError
.1731	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1733					_EUDOkay:
.1733	29 0f		and #$0f			and 	#15 							; make constant
.1735	da		phx				phx
.1736	48		pha				pha
.1737	a2 0e		ldx #$0e			ldx 	#IFR0 							; multiply R0 x 16
.1739	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.173c	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.173f	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1742	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1745	68		pla				pla 									; pop constant and OR in
.1746	fa		plx				plx
.1747	05 0e		ora $0e				ora 	IFR0+IM0
.1749	85 0e		sta $0e				sta 	IFR0+IM0
.174b	c8		iny				iny 									; next
.174c	ca		dex				dex
.174d	d0 ca		bne $1719			bne 	_EUDLoop
.174f	7a		ply				ply
.1750	60		rts				rts
.1751					_EUDError:
.1751	4c b5 23	jmp $23b5		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1754					EXPUnaryInlineDec:
.1754	4c 93 23	jmp $2393		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1757					EXPUnaryPeek:
.1757	20 d4 15	jsr $15d4			jsr 	EXPEvalInteger16 				; number to R0
.175a	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.175d	b2 0e		lda ($0e)			lda 	(IFR0)
.175f	a2 0e		ldx #$0e			ldx 	#IFR0
.1761	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.1764	60		rts				rts
.1765					EXPUnaryDeek:
.1765	20 d4 15	jsr $15d4			jsr 	EXPEvalInteger16 				; number to R0
.1768	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.176b	5a		phy				phy
.176c	a0 01		ldy #$01			ldy 	#1
.176e	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1770	7a		ply				ply
.1771	48		pha				pha
.1772	b2 0e		lda ($0e)			lda 	(IFR0)
.1774	a2 0e		ldx #$0e			ldx 	#IFR0
.1776	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.1779	68		pla				pla
.177a	85 0f		sta $0f				sta 	IFR0+IM1
.177c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.177d					EXPUnaryNull:
.177d	20 ff 15	jsr $15ff			jsr 	EXPTermValueR0
.1780	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1781					EXPUnaryFrac:
.1781	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 					; number to R0
.1784	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.1787	20 82 2b	jsr $2b82			jsr 	IFloatFractionalR0
.178a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.178b					EXPUnaryInt:
.178b	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 					; number to R0
.178e	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.1791	20 d8 2b	jsr $2bd8			jsr 	IFloatIntegerR0
.1794	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1795					EXPUnaryLen:
.1795	20 ec 15	jsr $15ec			jsr 	EXPEvalString 					; string to R0, zTemp0
.1798	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.179b	b2 20		lda ($20)			lda 	(zTemp0)
.179d	a2 0e		ldx #$0e			ldx 	#IFR0
.179f	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.17a2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.17a3					EXPUnaryParenthesis:
.17a3	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 					; number to R0
.17a6	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.17a9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.17aa					EXPUnaryRnd:
.17aa	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 				; number to R0
.17ad	20 30 25	jsr $2530			jsr 	ERRCheckRParen 				; )
.17b0	a2 0e		ldx #$0e			ldx 	#IFR0
.17b2	20 c9 17	jsr $17c9			jsr 	EXPLoadInRandom
.17b5	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.17b7	85 11		sta $11				sta 	IFR0+IExp
.17b9	60		rts				rts
.17ba					ExpUnaryRand:
.17ba	20 cd 15	jsr $15cd			jsr 	EXPEvalInteger 				; integer to R0
.17bd	20 30 25	jsr $2530			jsr 	ERRCheckRParen 				; )
.17c0	a2 12		ldx #$12			ldx 	#IFR1 						; random to R1
.17c2	20 c9 17	jsr $17c9			jsr 	EXPLoadInRandom
.17c5	20 49 2a	jsr $2a49			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.17c8	60		rts				rts
.17c9					EXPLoadInRandom:
.17c9	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.17cc	20 de 17	jsr $17de			jsr 	EXPRandom32
.17cf	95 00		sta $00,x			sta 	IM0,x
.17d1	20 de 17	jsr $17de			jsr 	EXPRandom32
.17d4	95 01		sta $01,x			sta 	IM1,x
.17d6	20 de 17	jsr $17de			jsr 	EXPRandom32
.17d9	29 7f		and #$7f			and 	#$7F
.17db	95 02		sta $02,x			sta 	IM2,x
.17dd	60		rts				rts
.17de					EXPRandom32:
.17de	5a		phy				phy
.17df	a0 08		ldy #$08			ldy 	#8
.17e1	ad 0c 05	lda $050c			lda 	EXPSeed+0
.17e4	0d 0d 05	ora $050d			ora 	EXPSeed+1
.17e7	0d 0e 05	ora $050e			ora 	EXPSeed+2
.17ea	0d 0f 05	ora $050f			ora 	EXPSeed+3
.17ed	d0 08		bne $17f7			bne 	_EXPRNoReset
.17ef	ee 0c 05	inc $050c			inc 	EXPSeed+0
.17f2	a0 10		ldy #$10			ldy 	#16
.17f4	8c 0f 05	sty $050f			sty 	EXPSeed+3
.17f7					_EXPRNoReset:
.17f7	ad 0c 05	lda $050c			lda 	EXPSeed+0
.17fa					_EXPRLoop:
.17fa	0a		asl a				asl		a
.17fb	2e 0d 05	rol $050d			rol 	EXPSeed+1
.17fe	2e 0e 05	rol $050e			rol 	EXPSeed+2
.1801	2e 0f 05	rol $050f			rol 	EXPSeed+3
.1804	90 02		bcc $1808			bcc 	_EXPRNoEOR
.1806	49 c5		eor #$c5			eor 	#$C5
.1808					_EXPRNoEOR:
.1808	88		dey				dey
.1809	d0 ef		bne $17fa			bne 	_EXPRLoop
.180b	8d 0c 05	sta $050c			sta 	EXPSeed+0
.180e	7a		ply				ply
.180f	60		rts				rts
.050c					EXPSeed:
>050c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1810					EXPUnarySgn:
.1810	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 					; number to R0
.1813	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.1816	a2 12		ldx #$12			ldx 	#IFR1 							; copy to R1
.1818	20 7a 2e	jsr $2e7a			jsr 	IFloatCopyToRegister
.181b	a2 0e		ldx #$0e			ldx 	#IFR0 							; R0 = 0
.181d	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.1820	a2 12		ldx #$12			ldx 	#IFR1
.1822	20 a6 2b	jsr $2ba6			jsr 	IFloatCompare 					; compare R1 vs 0.
.1825	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1826					EXPUnarySqr:
.1826	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 					; number to R0
.1829	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.182c	20 24 2b	jsr $2b24			jsr 	IFloatSquareRootR0 				; square root.
.182f	b0 01		bcs $1832			bcs 	_EUSValue
.1831	60		rts				rts
.1832					_EUSValue:
.1832	4c a4 23	jmp $23a4		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1835					EXPUnaryHex:
.1835	20 cd 15	jsr $15cd			jsr 	EXPEvalInteger 					; expr
.1838	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.183b	5a		phy				phy
.183c	a9 10		lda #$10			lda 	#16
.183e	20 79 2c	jsr $2c79			jsr 	IFloatIntegerToStringR0
.1841	80 0a		bra $184d			bra 	EUSMain
.1843					EXPUnaryStr:
.1843	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 					; expr
.1846	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.1849	5a		phy				phy
.184a	20 d5 2c	jsr $2cd5			jsr 	IFloatFloatToStringR0 			; convert to string
.184d					EUSMain:
.184d	b0 18		bcs $1867			bcs 	_EUSError
.184f	86 20		stx $20				stx 	zTemp0 							; save string address
.1851	84 21		sty $21				sty 	zTemp0+1
.1853	48		pha				pha 									; save count
.1854	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1856	20 26 26	jsr $2626			jsr 	StringTempAllocate
.1859	fa		plx				plx 									; count in X
.185a	a0 00		ldy #$00			ldy 	#0
.185c					_EUSCopy:
.185c	b1 20		lda ($20),y			lda 	(zTemp0),y
.185e	c8		iny				iny
.185f	20 5b 26	jsr $265b			jsr 	StringTempWrite
.1862	ca		dex				dex
.1863	d0 f7		bne $185c			bne	 	_EUSCopy
.1865	7a		ply				ply
.1866	60		rts				rts
.1867					_EUSError:
.1867	4c a4 23	jmp $23a4		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.186a					EXPUnaryInlineString:
.186a	18		clc				clc 								; physical address -> IM0,1
.186b	98		tya				tya
.186c	65 1e		adc $1e				adc 	codePtr
.186e	85 0e		sta $0e				sta 	IFR0+IM0
.1870	a5 1f		lda $1f				lda 	codePtr+1
.1872	69 00		adc #$00			adc 	#0
.1874	85 0f		sta $0f				sta 	IFR0+IM1
.1876	64 10		stz $10				stz 	IFR0+IM2 					; fill in rest
.1878	a9 80		lda #$80			lda 	#$80
.187a	85 11		sta $11				sta 	IFR0+IExp
.187c	98		tya				tya	 								; skip over it.
.187d	38		sec				sec
.187e	71 1e		adc ($1e),y			adc 	(codePtr),y
.1880	a8		tay				tay
.1881	60		rts				rts
.1882					_EXPUISRange:
.1882	4c a4 23	jmp $23a4		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1885					EXPUnaryLeft:
.1885	20 cb 18	jsr $18cb			jsr 	EXPCommonStart 					; <string>,
.1888	48		pha				pha 									; save string address on stack
.1889	da		phx				phx
.188a	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.188c	48		pha				pha
.188d	20 e0 15	jsr $15e0			jsr 	EXPEvalInteger8 				; characters to do
.1890	80 44		bra $18d6			bra 	EXPSubstringCommon
.1892					EXPUnaryRight:
.1892	20 cb 18	jsr $18cb			jsr 	EXPCommonStart 					; <string>,
.1895	48		pha				pha 									; save string address on stack
.1896	da		phx				phx
.1897	b2 0e		lda ($0e)			lda 	(IFR0) 							; the string length => stack.
.1899	48		pha				pha
.189a	20 e0 15	jsr $15e0			jsr 	EXPEvalInteger8 				; characters to do
.189d	85 20		sta $20				sta 	zTemp0 							; calculate length - required, start point.
.189f	68		pla				pla
.18a0	38		sec				sec
.18a1	e5 20		sbc $20				sbc 	zTemp0
.18a3	b0 02		bcs $18a7			bcs 	_EUROffLeft
.18a5	a9 00		lda #$00			lda 	#0
.18a7					_EUROffLeft:
.18a7	48		pha				pha 									; start pos
.18a8	a9 ff		lda #$ff			lda 	#255
.18aa	80 2a		bra $18d6			bra 	EXPSubstringCommon
.18ac					EXPUnaryMid:
.18ac	20 cb 18	jsr $18cb			jsr 	EXPCommonStart 					; <string>,
.18af	48		pha				pha 									; save string address on stack
.18b0	da		phx				phx
.18b1	20 e0 15	jsr $15e0			jsr 	EXPEvalInteger8 				; characters start
.18b4	f0 12		beq $18c8			beq 	_EUSError 						; 1 is left
.18b6	3a		dec a				dec 	a 								; zero based.
.18b7	48		pha				pha
.18b8	b1 1e		lda ($1e),y			lda 	(codePtr),y 					; comma follows
.18ba	c9 99		cmp #$99			cmp 	#PR_COMMA
.18bc	f0 04		beq $18c2			beq 	_EUMLength 						; if so m is provided
.18be	a9 ff		lda #$ff			lda 	#255 							; default m
.18c0	80 14		bra $18d6			bra 	EXPSubstringCommon
.18c2					_EUMLength:
.18c2	c8		iny				iny 									; consume comma
.18c3	20 e0 15	jsr $15e0			jsr 	EXPEvalInteger8 				; characters to do
.18c6	80 0e		bra $18d6			bra 	EXPSubstringCommon
.18c8					_EUSError:
.18c8	4c b5 23	jmp $23b5		jmp	ErrorV_value
.18cb					EXPCommonStart:
.18cb	20 ec 15	jsr $15ec			jsr 	EXPEvalString
.18ce	20 38 25	jsr $2538			jsr 	ERRCheckComma
.18d1	a5 0e		lda $0e				lda 	IFR0+IM0
.18d3	a6 0f		ldx $0f				ldx 	IFR0+IM1
.18d5	60		rts				rts
.18d6					EXPSubstringCommon:
.18d6	85 22		sta $22				sta 	zTemp1 							; count to do in zTemp1.
.18d8	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; check right bracket.
.18db	68		pla				pla 									; start position
.18dc	85 23		sta $23				sta 	zTemp1+1 						; save in zTemp1+1
.18de	fa		plx				plx 									; get string address to zTemp2.
.18df	86 25		stx $25				stx 	zTemp2+1
.18e1	68		pla				pla
.18e2	85 24		sta $24				sta 	zTemp2
.18e4	38		sec				sec 									; length - start is the max count of chars
.18e5	b2 24		lda ($24)			lda 	(zTemp2)
.18e7	e5 23		sbc $23				sbc 	zTemp1+1
.18e9	c5 22		cmp $22				cmp 	zTemp1 							; if available < count
.18eb	b0 02		bcs $18ef			bcs 	_EXPSSNoTrim
.18ed	85 22		sta $22				sta 	zTemp1 							; update count with available
.18ef					_EXPSSNoTrim:
.18ef	a5 22		lda $22				lda 	zTemp1 							; chars required.
.18f1	20 26 26	jsr $2626			jsr 	StringTempAllocate 				; allocate memory for it.
.18f4	a5 22		lda $22				lda 	zTemp1 							; zero length string
.18f6	f0 15		beq $190d			beq 	_EXPSSExit
.18f8	a5 23		lda $23				lda 	zTemp1+1 						; if length >= start exit
.18fa	d2 24		cmp ($24)			cmp 	(zTemp2)
.18fc	b0 0f		bcs $190d			bcs 	_EXPSSExit
.18fe	5a		phy				phy
.18ff	a4 23		ldy $23				ldy 	zTemp1+1 						; start position
.1901	c8		iny				iny 									; +1 for the length byte
.1902					_EXPSSCopy:
.1902	b1 24		lda ($24),y			lda 	(zTemp2),y
.1904	20 5b 26	jsr $265b			jsr 	StringTempWrite
.1907	c8		iny				iny
.1908	c6 22		dec $22				dec 	zTemp1
.190a	d0 f6		bne $1902			bne 	_EXPSSCopy
.190c	7a		ply				ply
.190d					_EXPSSExit:
.190d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.190e					EXPUnaryVal:
.190e	20 ec 15	jsr $15ec			jsr 	EXPEvalString 					; string to R0, zTemp0
.1911	20 30 25	jsr $2530			jsr 	ERRCheckRParen 					; )
.1914	5a		phy				phy
.1915	18		clc				clc
.1916	a5 20		lda $20				lda		zTemp0 							; point XY to the text
.1918	69 01		adc #$01			adc 	#1
.191a	aa		tax				tax
.191b	a5 21		lda $21				lda 	zTemp0+1
.191d	69 00		adc #$00			adc 	#0
.191f	a8		tay				tay
.1920	b2 20		lda ($20)			lda 	(zTemp0) 						; get length.
.1922	20 3c 2d	jsr $2d3c			jsr 	IFloatStringToFloatR0 			; do conversion
.1925	b0 02		bcs $1929			bcs 	_EUVError
.1927	7a		ply				ply
.1928	60		rts				rts
.1929					_EUVError:
.1929	4c b5 23	jmp $23b5		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.192c					BinaryPrecedence:
>192c	02					.byte	 2	; $ef =
>192d	02					.byte	 2	; $f0 <>
>192e	02					.byte	 2	; $f1 <=
>192f	02					.byte	 2	; $f2 <
>1930	02					.byte	 2	; $f3 >=
>1931	02					.byte	 2	; $f4 >
>1932	01					.byte	 1	; $f5 XOR
>1933	01					.byte	 1	; $f6 OR
>1934	01					.byte	 1	; $f7 AND
>1935	04					.byte	 4	; $f8 DIV
>1936	04					.byte	 4	; $f9 MOD
>1937	04					.byte	 4	; $fa <<
>1938	04					.byte	 4	; $fb >>
>1939	04					.byte	 4	; $fc /
>193a	04					.byte	 4	; $fd *
>193b	03					.byte	 3	; $fe -
>193c	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.193d					StructureOffsets:
>193d	01					.byte	1  	; $80 REPEAT
>193e	ff					.byte	255	; $81 UNTIL
>193f	01					.byte	1  	; $82 WHILE
>1940	ff					.byte	255	; $83 WEND
>1941	01					.byte	1  	; $84 IF
>1942	ff					.byte	255	; $85 ENDIF
>1943	01					.byte	1  	; $86 DO
>1944	ff					.byte	255	; $87 LOOP
>1945	01					.byte	1  	; $88 PROC
>1946	ff					.byte	255	; $89 ENDPROC
>1947	01					.byte	1  	; $8a FOR
>1948	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1949					StandardTokens:
>1949	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1950	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1956	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>195c	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1961	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1964	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>196a	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>196d	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1972	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1977	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>197f	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1983	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1988	00					.byte	$00                                     	; $8c [[end]]
>1989	00					.byte	$00                                     	; $8d [[shift]]
>198a	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>198f	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1994	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1997	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>199c	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>19a0	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>19a6	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>19ac	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>19b1	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>19b5	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>19b9	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>19be	01 2c					.byte	$01,$2c                                 	; $99 ,
>19c0	01 3b					.byte	$01,$3b                                 	; $9a ;
>19c2	01 3a					.byte	$01,$3a                                 	; $9b :
>19c4	01 27					.byte	$01,$27                                 	; $9c '
>19c6	01 29					.byte	$01,$29                                 	; $9d )
>19c8	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>19cc	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>19d2	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>19d6	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>19da	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>19df	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>19e3	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>19ea	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>19ef	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>19f4	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>19f9	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>19fe	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1a03	00					.byte	0											; $aa
>1a04	00					.byte	0											; $ab
>1a05	00					.byte	0											; $ac
>1a06	00					.byte	0											; $ad
>1a07	00					.byte	0											; $ae
>1a08	00					.byte	0											; $af
>1a09	00					.byte	0											; $b0
>1a0a	00					.byte	0											; $b1
>1a0b	00					.byte	0											; $b2
>1a0c	00					.byte	0											; $b3
>1a0d	00					.byte	0											; $b4
>1a0e	00					.byte	0											; $b5
>1a0f	00					.byte	0											; $b6
>1a10	00					.byte	0											; $b7
>1a11	00					.byte	0											; $b8
>1a12	00					.byte	0											; $b9
>1a13	00					.byte	0											; $ba
>1a14	00					.byte	0											; $bb
>1a15	00					.byte	0											; $bc
>1a16	00					.byte	0											; $bd
>1a17	00					.byte	0											; $be
>1a18	00					.byte	0											; $bf
>1a19	00					.byte	0											; $c0
>1a1a	00					.byte	0											; $c1
>1a1b	00					.byte	0											; $c2
>1a1c	00					.byte	0											; $c3
>1a1d	00					.byte	0											; $c4
>1a1e	00					.byte	0											; $c5
>1a1f	00					.byte	0											; $c6
>1a20	00					.byte	0											; $c7
>1a21	00					.byte	0											; $c8
>1a22	00					.byte	0											; $c9
>1a23	00					.byte	0											; $ca
>1a24	00					.byte	0											; $cb
>1a25	00					.byte	0											; $cc
>1a26	00					.byte	0											; $cd
>1a27	00					.byte	0											; $ce
>1a28	00					.byte	0											; $cf
>1a29	00					.byte	0											; $d0
>1a2a	00					.byte	0											; $d1
>1a2b	00					.byte	0											; $d2
>1a2c	00					.byte	0											; $d3
>1a2d	00					.byte	0											; $d4
>1a2e	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1a34	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1a3a	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1a42	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1a49	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1a4f	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1a55	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1a5a	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1a5f	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1a64	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1a69	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1a6e	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1a74	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1a79	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1a81	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1a88	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1a8d	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1a92	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1a98	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1a9d	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1aa3	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1aa8	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1aae	01 28					.byte	$01,$28                                 	; $eb (
>1ab0	01 24					.byte	$01,$24                                 	; $ec $
>1ab2	00					.byte	$00                                     	; $ed [[decimal]]
>1ab3	00					.byte	$00                                     	; $ee [[string]]
>1ab4	01 3d					.byte	$01,$3d                                 	; $ef =
>1ab6	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1ab9	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1abc	01 3c					.byte	$01,$3c                                 	; $f2 <
>1abe	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1ac1	01 3e					.byte	$01,$3e                                 	; $f4 >
>1ac3	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1ac7	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1aca	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1ace	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1ad2	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1ad6	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1ad9	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1adc	01 2f					.byte	$01,$2f                                 	; $fc /
>1ade	01 2a					.byte	$01,$2a                                 	; $fd *
>1ae0	01 2d					.byte	$01,$2d                                 	; $fe -
>1ae2	01 2b					.byte	$01,$2b                                 	; $ff +
>1ae4	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1ae5					VectorTable:
>1ae5	87 22					.word	Command_REPEAT           ; $80 REPEAT
>1ae7	90 22					.word	Command_UNTIL            ; $81 UNTIL
>1ae9	68 23					.word	Command_WHILE            ; $82 WHILE
>1aeb	87 23					.word	Command_WEND             ; $83 WEND
>1aed	5f 22					.word	IfCommand                ; $84 IF
>1aef	86 22					.word	EndIf                    ; $85 ENDIF
>1af1	fc 20					.word	Command_DO               ; $86 DO
>1af3	14 21					.word	Command_LOOP             ; $87 LOOP
>1af5	02 14					.word	NoExec08                 ; $88 PROC
>1af7	f0 20					.word	Command_ENDPROC          ; $89 ENDPROC
>1af9	1d 21					.word	Command_FOR              ; $8a FOR
>1afb	aa 21					.word	Command_NEXT             ; $8b NEXT
>1afd	88 13					.word	RUNEndOfLine             ; $8c [[END]]
>1aff	e4 13					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1b01	7f 22					.word	ElseCode                 ; $8e ELSE
>1b03	02 14					.word	NoExec01                 ; $8f THEN
>1b05	02 14					.word	NoExec02                 ; $90 TO
>1b07	02 14					.word	NoExec03                 ; $91 STEP
>1b09	1e 12					.word	CommandLET               ; $92 LET
>1b0b	b9 11					.word	Command_Print            ; $93 PRINT
>1b0d	ad 26					.word	NotImplemented           ; $94 INPUT
>1b0f	b4 20					.word	Command_CALL             ; $95 CALL
>1b11	ed 13					.word	Command_Sys              ; $96 SYS
>1b13	6f 13					.word	Command_REM              ; $97 REM
>1b15	05 21					.word	Command_EXIT             ; $98 EXIT
>1b17	02 14					.word	NoExec04                 ; $99 ,
>1b19	02 14					.word	NoExec05                 ; $9a ;
>1b1b	02 14					.word	NoExec06                 ; $9b :
>1b1d	6f 13					.word	Command_REM2             ; $9c '
>1b1f	02 14					.word	NoExec07                 ; $9d )
>1b21	73 10					.word	CommandDIM               ; $9e DIM
>1b23	23 10					.word	Command_CLEAR            ; $9f CLEAR
>1b25	66 13					.word	Command_NEW              ; $a0 NEW
>1b27	7c 13					.word	Command_RUN              ; $a1 RUN
>1b29	ea 13					.word	Command_STOP             ; $a2 STOP
>1b2b	e7 13					.word	Command_END              ; $a3 END
>1b2d	15 10					.word	Command_ASSERT           ; $a4 ASSERT
>1b2f	96 12					.word	Command_LIST             ; $a5 LIST
>1b31	ad 26					.word	NotImplemented           ; $a6 SAVE
>1b33	ad 26					.word	NotImplemented           ; $a7 LOAD
>1b35	92 11					.word	Command_Poke             ; $a8 POKE
>1b37	8f 11					.word	Command_Doke             ; $a9 DOKE
>1b39	ad 26					.word	NotImplemented           ; $aa
>1b3b	ad 26					.word	NotImplemented           ; $ab
>1b3d	ad 26					.word	NotImplemented           ; $ac
>1b3f	ad 26					.word	NotImplemented           ; $ad
>1b41	ad 26					.word	NotImplemented           ; $ae
>1b43	ad 26					.word	NotImplemented           ; $af
>1b45	ad 26					.word	NotImplemented           ; $b0
>1b47	ad 26					.word	NotImplemented           ; $b1
>1b49	ad 26					.word	NotImplemented           ; $b2
>1b4b	ad 26					.word	NotImplemented           ; $b3
>1b4d	ad 26					.word	NotImplemented           ; $b4
>1b4f	ad 26					.word	NotImplemented           ; $b5
>1b51	ad 26					.word	NotImplemented           ; $b6
>1b53	ad 26					.word	NotImplemented           ; $b7
>1b55	ad 26					.word	NotImplemented           ; $b8
>1b57	ad 26					.word	NotImplemented           ; $b9
>1b59	ad 26					.word	NotImplemented           ; $ba
>1b5b	ad 26					.word	NotImplemented           ; $bb
>1b5d	ad 26					.word	NotImplemented           ; $bc
>1b5f	ad 26					.word	NotImplemented           ; $bd
>1b61	ad 26					.word	NotImplemented           ; $be
>1b63	ad 26					.word	NotImplemented           ; $bf
>1b65	ad 26					.word	NotImplemented           ; $c0
>1b67	ad 26					.word	NotImplemented           ; $c1
>1b69	ad 26					.word	NotImplemented           ; $c2
>1b6b	ad 26					.word	NotImplemented           ; $c3
>1b6d	ad 26					.word	NotImplemented           ; $c4
>1b6f	ad 26					.word	NotImplemented           ; $c5
>1b71	ad 26					.word	NotImplemented           ; $c6
>1b73	ad 26					.word	NotImplemented           ; $c7
>1b75	ad 26					.word	NotImplemented           ; $c8
>1b77	ad 26					.word	NotImplemented           ; $c9
>1b79	ad 26					.word	NotImplemented           ; $ca
>1b7b	ad 26					.word	NotImplemented           ; $cb
>1b7d	ad 26					.word	NotImplemented           ; $cc
>1b7f	ad 26					.word	NotImplemented           ; $cd
>1b81	ad 26					.word	NotImplemented           ; $ce
>1b83	ad 26					.word	NotImplemented           ; $cf
>1b85	ad 26					.word	NotImplemented           ; $d0
>1b87	ad 26					.word	NotImplemented           ; $d1
>1b89	ad 26					.word	NotImplemented           ; $d2
>1b8b	ad 26					.word	NotImplemented           ; $d3
>1b8d	ad 26					.word	NotImplemented           ; $d4
>1b8f	65 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1b91	57 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1b93	92 18					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1b95	85 18					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1b97	ac 18					.word	EXPUnaryMid              ; $d9 MID$(
>1b99	43 18					.word	EXPUnaryStr              ; $da STR$(
>1b9b	0e 19					.word	EXPUnaryVal              ; $db VAL(
>1b9d	10 18					.word	EXPUnarySgn              ; $dc SGN(
>1b9f	d5 16					.word	EXPUnaryAbs              ; $dd ABS(
>1ba1	95 17					.word	EXPUnaryLen              ; $de LEN(
>1ba3	26 18					.word	EXPUnarySqr              ; $df SQR(
>1ba5	f5 16					.word	EXPUnaryChr              ; $e0 CHR$(
>1ba7	df 16					.word	EXPUnaryAsc              ; $e1 ASC(
>1ba9	ad 26					.word	NotImplemented           ; $e2 INKEY$(
>1bab	ad 26					.word	NotImplemented           ; $e3 EVENT(
>1bad	ad 26					.word	NotImplemented           ; $e4 TIME
>1baf	8b 17					.word	EXPUnaryInt              ; $e5 INT(
>1bb1	81 17					.word	EXPUnaryFrac             ; $e6 FRAC(
>1bb3	06 17					.word	EXPUnaryDec              ; $e7 DEC(
>1bb5	35 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1bb7	aa 17					.word	EXPUnaryRnd              ; $e9 RND(
>1bb9	ba 17					.word	ExpUnaryRand             ; $ea RAND(
>1bbb	a3 17					.word	EXPUnaryParenthesis      ; $eb (
>1bbd	7d 17					.word	EXPUnaryNull             ; $ec $
>1bbf	54 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1bc1	6a 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1bc3	bf 14					.word	EXPCompareEqual          ; $ef =
>1bc5	da 14					.word	EXPCompareNotEqual       ; $f0 <>
>1bc7	e3 14					.word	EXPCompareLessEqual      ; $f1 <=
>1bc9	c8 14					.word	EXPCompareLess           ; $f2 <
>1bcb	ec 14					.word	EXPCompareGreaterEqual   ; $f3 >=
>1bcd	d1 14					.word	EXPCompareGreater        ; $f4 >
>1bcf	6c 14					.word	EXPBinXor                ; $f5 XOR
>1bd1	60 14					.word	EXPBinOr                 ; $f6 OR
>1bd3	54 14					.word	EXPBinAnd                ; $f7 AND
>1bd5	2c 14					.word	EXPBinIDiv               ; $f8 DIV
>1bd7	3d 14					.word	EXPBinIMod               ; $f9 MOD
>1bd9	37 15					.word	EXPBinLeft               ; $fa <<
>1bdb	3f 15					.word	EXPBinRight              ; $fb >>
>1bdd	20 14					.word	EXPBinFDiv               ; $fc /
>1bdf	17 14					.word	EXPBinMul                ; $fd *
>1be1	0e 14					.word	EXPBinSub                ; $fe -
>1be3	05 14					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1be5					TOKDetokenise:
.1be5	86 24		stx $24				stx 	zTemp2 						; save tokenised code in zTemp2
.1be7	84 25		sty $25				sty 	zTemp2+1
.1be9	9c 12 05	stz $0512			stz		TOKLastCharacter 			; clear last character
.1bec					_TOKDLoop:
.1bec	20 1b 1c	jsr $1c1b			jsr 	TOKDGet 					; get next
.1bef	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1bf1	f0 26		beq $1c19			beq 	_TOKDExit
.1bf3	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1bf5	f0 1d		beq $1c14			beq 	_TOKDDataItem
.1bf7	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1bf9	f0 19		beq $1c14			beq 	_TOKDDataItem
.1bfb	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1bfd	10 05		bpl $1c04			bpl 	_TOKDNotToken
.1bff	20 e3 1c	jsr $1ce3			jsr 	TOKDToken 					; token to text.
.1c02	80 e8		bra $1bec			bra 	_TOKDLoop
.1c04					_TOKDNotToken:
.1c04	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1c06	90 05		bcc $1c0d			bcc 	_TOKDNotIdentifier
.1c08	20 56 1c	jsr $1c56			jsr 	TOKDIdentifier
.1c0b	80 df		bra $1bec			bra 	_TOKDLoop
.1c0d					_TOKDNotIdentifier:
.1c0d	a0 0a		ldy #$0a			ldy 	#10
.1c0f	20 9f 1c	jsr $1c9f			jsr 	TOKDInteger
.1c12	80 d8		bra $1bec			bra 	_TOKDLoop
.1c14					_TOKDDataItem:
.1c14	20 31 1c	jsr $1c31			jsr 	TOKDDataItem
.1c17	80 d3		bra $1bec			bra 	_TOKDLoop
.1c19					_TOKDExit:
.1c19	18		clc				clc
.1c1a	60		rts				rts
.1c1b	b2 24		lda ($24)	TOKDGet:lda 	(zTemp2)
.1c1d	e6 24		inc $24				inc 	zTemp2
.1c1f	d0 02		bne $1c23			bne 	_TKDGExit
.1c21	e6 25		inc $25				inc 	zTemp2+1
.1c23					_TKDGExit:
.1c23	60		rts				rts
.1c24					TOKDOutput:
.1c24	8d 12 05	sta $0512			sta 	TOKLastCharacter
.1c27	6c 10 05	jmp ($0510)			jmp 	(TOKOutputMethod)
.1c2a					TOKSetDetokeniseOutput:
.1c2a	8e 10 05	stx $0510			stx 	TOKOutputMethod
.1c2d	8c 11 05	sty $0511			sty 	TOKOutputMethod+1
.1c30	60		rts				rts
.0510					TOKOutputMethod:
>0510							.fill 	2
.0512					TOKLastCharacter:
>0512							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1c31					TOKDDataItem:
.1c31	a8		tay				tay 								; type in Y
.1c32	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1c34	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1c36	f0 02		beq $1c3a			beq 	_TOKDDIsString
.1c38	a9 2e		lda #$2e			lda 	#'.'
.1c3a					_TOKDDIsString:
.1c3a	20 24 1c	jsr $1c24			jsr 	TOKDOutput 					; dump it
.1c3d	20 1b 1c	jsr $1c1b			jsr 	TOKDGet 					; get length into X
.1c40	aa		tax				tax
.1c41					_TOKDDOutput:
.1c41	ca		dex				dex 								; are we complete
.1c42	30 08		bmi $1c4c			bmi 	_TOKDDEnd
.1c44	20 1b 1c	jsr $1c1b			jsr 	TOKDGet 					; get character and output it
.1c47	20 24 1c	jsr $1c24			jsr 	TOKDOutput
.1c4a	80 f5		bra $1c41			bra 	_TOKDDOutput
.1c4c					_TOKDDEnd:
.1c4c	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1c4e	d0 05		bne $1c55			bne 	_TOKDDNotString
.1c50	a9 22		lda #$22			lda 	#'"'
.1c52	20 24 1c	jsr $1c24			jsr 	TOKDOutput
.1c55					_TOKDDNotString:
.1c55	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1c56					TOKDIdentifier:
.1c56	a0 ff		ldy #$ff			ldy 	#$FF
.1c58	8c 13 05	sty $0513			sty 	TOKDIFirstChar
.1c5b					_TOKDLoop:
.1c5b	a8		tay				tay 								; token in Y
.1c5c	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1c5e	c0 64		cpy #$64			cpy 	#$64
.1c60	f0 11		beq $1c73			beq 	_TOKDIOutput
.1c62	a9 5f		lda #$5f			lda 	#'_'
.1c64	c0 65		cpy #$65			cpy 	#$65
.1c66	f0 0b		beq $1c73			beq 	_TOKDIOutput
.1c68	98		tya				tya 								; handle a-z
.1c69	18		clc				clc
.1c6a	69 21		adc #$21			adc	 	#$21
.1c6c	c0 5a		cpy #$5a			cpy 	#$5A
.1c6e	90 03		bcc $1c73			bcc 	_TOKDIOutput
.1c70	38		sec				sec 								; handle 0-9
.1c71	e9 4b		sbc #$4b			sbc 	#$4B
.1c73					_TOKDIOutput:
.1c73	2c 13 05	bit $0513			bit 	TOKDIFirstChar
.1c76	10 08		bpl $1c80			bpl 	_TOKDINoSpacing
.1c78	48		pha				pha
.1c79	20 15 1d	jsr $1d15			jsr 	TOKDSpacing
.1c7c	9c 13 05	stz $0513			stz 	TOKDIFirstChar
.1c7f	68		pla				pla
.1c80					_TOKDINoSpacing:
.1c80	20 24 1c	jsr $1c24			jsr 	TOKDOutput
.1c83	20 1b 1c	jsr $1c1b			jsr 	TOKDGet 					; get next token
.1c86	c9 7c		cmp #$7c			cmp 	#$7C
.1c88	90 d1		bcc $1c5b			bcc 	_TOKDLoop
.1c8a	f0 12		beq $1c9e			beq 	_TOKDIExit 					; it's a number, no tail.
.1c8c	4a		lsr a				lsr 	a 							; string ?
.1c8d	90 07		bcc $1c96			bcc 	_TOKDICheckArray
.1c8f	48		pha				pha
.1c90	a9 24		lda #$24			lda 	#"$"
.1c92	20 24 1c	jsr $1c24			jsr 	TOKDOutput
.1c95	68		pla				pla
.1c96					_TOKDICheckArray:
.1c96	4a		lsr a				lsr 	a 							; array ?
.1c97	90 05		bcc $1c9e			bcc 	_TOKDIExit
.1c99	a9 28		lda #$28			lda 	#"("
.1c9b	20 24 1c	jsr $1c24			jsr 	TOKDOutput
.1c9e					_TOKDIExit:
.1c9e	60		rts				rts
.0513					TOKDIFirstChar:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1c9f					TOKDInteger:
.1c9f	5a		phy				phy 								; save base
.1ca0	a2 0e		ldx #$0e			ldx 	#IFR0 						; set into R0
.1ca2	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.1ca5					_TOKDILoop:
.1ca5	b2 24		lda ($24)			lda 	(zTemp2) 					; followed by a 00-3F
.1ca7	c9 40		cmp #$40			cmp 	#$40
.1ca9	b0 1d		bcs $1cc8			bcs 	_TOKDIHaveInteger
.1cab	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 << 6
.1cad	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1cb0	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1cb3	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1cb6	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1cb9	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1cbc	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1cbf	20 1b 1c	jsr $1c1b			jsr 	TOKDGet 					; OR byte in.
.1cc2	05 0e		ora $0e				ora 	IFR0+IM0
.1cc4	85 0e		sta $0e				sta 	IFR0+IM0
.1cc6	80 dd		bra $1ca5			bra 	_TOKDILoop
.1cc8					_TOKDIHaveInteger:
.1cc8	7a		ply				ply 								; restore base
.1cc9	98		tya				tya 								; base in A
.1cca	20 79 2c	jsr $2c79			jsr 	IFloatIntegerToStringR0
.1ccd	86 20		stx $20				stx 	zTemp0
.1ccf	84 21		sty $21				sty 	zTemp0+1
.1cd1	b2 20		lda ($20)			lda 	(zTemp0)
.1cd3	20 15 1d	jsr $1d15			jsr 	TOKDSpacing 				; check spacing okay.
.1cd6	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1cd8					_TOKDOutput:
.1cd8	b1 20		lda ($20),y			lda 	(zTemp0),y
.1cda	20 24 1c	jsr $1c24			jsr 	TOKDOutput
.1cdd	c8		iny				iny
.1cde	b1 20		lda ($20),y			lda 	(zTemp0),y
.1ce0	d0 f6		bne $1cd8			bne 	_TOKDOutput
.1ce2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1ce3					TOKDToken:
.1ce3	a2 49		ldx #$49			ldx 	#StandardTokens & $FF
.1ce5	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1ce7					_TOKDSearch:
.1ce7	86 20		stx $20				stx 	zTemp0 						; put table in zTemp0
.1ce9	84 21		sty $21				sty 	zTemp0+1
.1ceb	aa		tax				tax 								; token ID in X.
.1cec					_TOKDFind:
.1cec	ca		dex				dex 								; reached the start
.1ced	10 0d		bpl $1cfc			bpl 	_TOKDFound
.1cef	38		sec				sec 								; go to next entry
.1cf0	b2 20		lda ($20)			lda 	(zTemp0)
.1cf2	65 20		adc $20				adc 	zTemp0
.1cf4	85 20		sta $20				sta 	zTemp0
.1cf6	90 f4		bcc $1cec			bcc 	_TOKDFind
.1cf8	e6 21		inc $21				inc 	zTemp0+1
.1cfa	80 f0		bra $1cec			bra 	_TOKDFind
.1cfc					_TOKDFound:
.1cfc	b2 20		lda ($20)			lda 	(zTemp0) 					; length to X
.1cfe	f0 14		beq $1d14			beq 	_TOKDExit
.1d00	aa		tax				tax
.1d01	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1d03	b1 20		lda ($20),y			lda 	(zTemp0),y 					; check spacing
.1d05	20 15 1d	jsr $1d15			jsr 	TOKDSpacing
.1d08					_TOKDOutput:
.1d08	b1 20		lda ($20),y			lda 	(zTemp0),y
.1d0a	20 6f 20	jsr $206f			jsr 	TOKToLower
.1d0d	20 24 1c	jsr $1c24			jsr 	TOKDOutput
.1d10	c8		iny				iny
.1d11	ca		dex				dex
.1d12	d0 f4		bne $1d08			bne 	_TOKDOutput
.1d14					_TOKDExit:
.1d14	60		rts				rts
.1d15					TOKDSpacing:
.1d15	20 86 20	jsr $2086			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1d18	90 0d		bcc $1d27			bcc 	_TOKDSExit
.1d1a	ad 12 05	lda $0512			lda 	TOKLastCharacter			; and last character also alphanumeric
.1d1d	20 86 20	jsr $2086			jsr 	TOKIsIdentifierElement
.1d20	90 05		bcc $1d27			bcc 	_TOKDSExit
.1d22	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1d24	20 24 1c	jsr $1c24			jsr 	TOKDOutput
.1d27					_TOKDSExit:
.1d27	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1d28					PGMDeleteLine:
.1d28	20 db 1d	jsr $1ddb			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d2b	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d2d	ad 14 05	lda $0514			lda 	PGMBaseHigh
.1d30	85 23		sta $23				sta 	zTemp1+1
.1d32					_PGMDLoop:
.1d32	b2 22		lda ($22)			lda 	(zTemp1) 					; finished, not found ?
.1d34	38		sec				sec
.1d35	f0 3a		beq $1d71			beq 	_PGMDExit
.1d37	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1d39	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d3b	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d3e	d0 08		bne $1d48			bne 	_PGMDNext
.1d40	c8		iny				iny
.1d41	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d43	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1d46	f0 0d		beq $1d55			beq 	_PGMDDelete
.1d48					_PGMDNext:
.1d48	18		clc				clc
.1d49	b2 22		lda ($22)			lda 	(zTemp1)
.1d4b	65 22		adc $22				adc 	zTemp1
.1d4d	85 22		sta $22				sta 	zTemp1
.1d4f	90 e1		bcc $1d32			bcc 	_PGMDLoop
.1d51	e6 23		inc $23				inc 	zTemp1+1
.1d53	80 dd		bra $1d32			bra 	_PGMDLoop
.1d55					_PGMDDelete:
.1d55	b2 22		lda ($22)			lda 	(zTemp1) 					; offset to next in Y
.1d57	a8		tay				tay
.1d58					_PGMDCopy:
.1d58	b1 22		lda ($22),y			lda 	(zTemp1),y 					; copy down.
.1d5a	92 22		sta ($22)			sta 	(zTemp1)
.1d5c	a5 22		lda $22				lda 	zTemp1 						; reached the end ?
.1d5e	c5 20		cmp $20				cmp 	zTemp0
.1d60	d0 07		bne $1d69			bne 	_PGMDNext2
.1d62	a5 23		lda $23				lda 	zTemp1+1
.1d64	c5 21		cmp $21				cmp 	zTemp0+1
.1d66	18		clc				clc
.1d67	f0 08		beq $1d71			beq 	_PGMDExit
.1d69					_PGMDNext2:
.1d69	e6 22		inc $22				inc 	zTemp1 						; advance pointer.
.1d6b	d0 eb		bne $1d58			bne 	_PGMDCopy
.1d6d	e6 23		inc $23				inc 	zTemp1+1
.1d6f	80 e7		bra $1d58			bra 	_PGMDCopy
.1d71					_PGMDExit:
.1d71	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1d72					PGMInsertLine:
.1d72	20 db 1d	jsr $1ddb			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d75	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d77	ad 14 05	lda $0514			lda 	PGMBaseHigh
.1d7a	85 23		sta $23				sta 	zTemp1+1
.1d7c					_PGMILoop:
.1d7c	b2 22		lda ($22)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1d7e	f0 1c		beq $1d9c			beq 	_PGMIInsert
.1d80	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1d82	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d84	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d87	c8		iny				iny
.1d88	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d8a	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1d8d	b0 0d		bcs $1d9c			bcs 	_PGMIInsert 				; insert here.
.1d8f	18		clc				clc
.1d90	b2 22		lda ($22)			lda 	(zTemp1)
.1d92	65 22		adc $22				adc 	zTemp1
.1d94	85 22		sta $22				sta 	zTemp1
.1d96	90 e4		bcc $1d7c			bcc 	_PGMILoop
.1d98	e6 23		inc $23				inc 	zTemp1+1
.1d9a	80 e0		bra $1d7c			bra 	_PGMILoop
.1d9c					_PGMIInsert:
.1d9c	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1d9f					_PGMIInsertLoop:
.1d9f	b2 20		lda ($20)			lda 	(zTemp0)
.1da1	91 20		sta ($20),y			sta 	(zTemp0),y
.1da3	a5 22		lda $22				lda 	zTemp1 						; reached insert point
.1da5	c5 20		cmp $20				cmp 	zTemp0
.1da7	d0 06		bne $1daf			bne 	_PGMINext
.1da9	a5 23		lda $23				lda 	zTemp1+1
.1dab	c5 21		cmp $21				cmp 	zTemp0+1
.1dad	f0 0a		beq $1db9			beq 	_PGMIInserted
.1daf					_PGMINext:
.1daf	a5 20		lda $20				lda 	zTemp0
.1db1	d0 02		bne $1db5			bne 	_PGMINoBorrow
.1db3	c6 21		dec $21				dec 	zTemp0+1
.1db5					_PGMINoBorrow:
.1db5	c6 20		dec $20				dec 	zTemp0
.1db7	80 e6		bra $1d9f			bra 	_PGMIInsertLoop
.1db9					_PGMIInserted:
.1db9	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1dbb					_PGMICopyLoop:
.1dbb	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1dbe	91 22		sta ($22),y			sta 	(zTemp1),y
.1dc0	c8		iny				iny
.1dc1	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1dc4	d0 f5		bne $1dbb			bne 	_PGMICopyLoop
.1dc6	18		clc				clc
.1dc7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1dc8					PGMSetBaseAddress:
.1dc8	8e 14 05	stx $0514			stx 	PGMBaseHigh
.1dcb	8c 15 05	sty $0515			sty 	PGMEndMemoryHigh
.1dce	60		rts				rts
.1dcf					PGMNewProgram:
.1dcf	64 20		stz $20				stz 	zTemp0						; copy base address to zTemp0
.1dd1	ad 14 05	lda $0514			lda 	PGMBaseHigh
.1dd4	85 21		sta $21				sta 	zTemp0+1
.1dd6	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1dd8	92 20		sta ($20)			sta 	(zTemp0)
.1dda	60		rts				rts
.1ddb					PGMEndProgram:
.1ddb	64 20		stz $20				stz 	zTemp0 						; copy base address to zTemp0
.1ddd	ad 14 05	lda $0514			lda 	PGMBaseHigh
.1de0	85 21		sta $21				sta 	zTemp0+1
.1de2					_PGMEPLoop:
.1de2	b2 20		lda ($20)			lda 	(zTemp0)
.1de4	f0 0b		beq $1df1			beq 	_PGMEPExit
.1de6	18		clc				clc
.1de7	65 20		adc $20				adc 	zTemp0
.1de9	85 20		sta $20				sta 	zTemp0
.1deb	90 f5		bcc $1de2			bcc 	_PGMEPLoop
.1ded	e6 21		inc $21				inc 	zTemp0+1
.1def	80 f1		bra $1de2			bra 	_PGMEPLoop
.1df1					_PGMEPExit:
.1df1	60		rts				rts
.0514					PGMBaseHigh:
>0514							.fill 	1
.0515					PGMEndMemoryHigh:
>0515							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1df2					TOKResetElement:
.1df2	9c 16 05	stz $0516			stz 	TOKElement
.1df5	60		rts				rts
.1df6					TOKWriteElement:
.1df6	da		phx				phx
.1df7	ae 16 05	ldx $0516			ldx 	TOKElement
.1dfa	9d 17 05	sta $0517,x			sta 	TOKElementText,x
.1dfd	9e 18 05	stz $0518,x			stz 	TOKElementText+1,x
.1e00	fa		plx				plx
.1e01	ee 16 05	inc $0516			inc 	TOKElement
.1e04	60		rts				rts
.0516					TOKElement:
>0516							.fill 	1
.0517					TOKElementText:
>0517							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1e05					TOKTokeniseConstant:
.1e05	a5 0e		lda $0e				lda 	IFR0+IM0 					; check > 64
.1e07	48		pha				pha 								; save on stack
.1e08	29 c0		and #$c0			and 	#$C0
.1e0a	05 0f		ora $0f				ora 	IFR0+IM1
.1e0c	05 10		ora $10				ora 	IFR0+IM2
.1e0e	f0 10		beq $1e20			beq 	_TTCLess
.1e10	da		phx				phx
.1e11	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1e13					_TTCShiftRight:
.1e13	46 10		lsr $10				lsr 	IFR0+IM2
.1e15	66 0f		ror $0f				ror 	IFR0+IM1
.1e17	66 0e		ror $0e				ror 	IFR0+IM0
.1e19	ca		dex				dex
.1e1a	d0 f7		bne $1e13			bne 	_TTCShiftRight
.1e1c	fa		plx				plx
.1e1d	20 05 1e	jsr $1e05			jsr 	TOKTokeniseConstant
.1e20					_TTCLess:
.1e20	68		pla				pla
.1e21	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1e23	20 c2 1e	jsr $1ec2			jsr 	TOKWriteA
.1e26	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1e27					TOKTokeniseDecimals:
.1e27	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext 					; consume the .
.1e2a	20 fc 1f	jsr $1ffc			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e2d	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1e2f	20 c2 1e	jsr $1ec2			jsr 	TOKWriteA
.1e32	20 37 1e	jsr $1e37			jsr 	TOKOutputElementBuffer 		; then the buffer
.1e35	18		clc				clc
.1e36	60		rts				rts
.1e37					TOKOutputElementBuffer:
.1e37	ad 16 05	lda $0516			lda 	TOKElement 					; get count and write that
.1e3a	20 c2 1e	jsr $1ec2			jsr 	TOKWriteA
.1e3d	a8		tay				tay 								; put in Y
.1e3e	f0 0c		beq $1e4c			beq 	_TOEExit 					; exit if empty which is okay.
.1e40	a2 01		ldx #$01			ldx 	#1
.1e42					_TOELoop:
.1e42	bd 16 05	lda $0516,x			lda 	TOKElement,x
.1e45	20 c2 1e	jsr $1ec2			jsr 	TOKWriteA
.1e48	e8		inx				inx
.1e49	88		dey				dey
.1e4a	d0 f6		bne $1e42			bne 	_TOELoop
.1e4c					_TOEExit:
.1e4c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1e4d					TOKTokenise:
.1e4d	8c 17 06	sty $0617			sty 	TOKDataSource+1 			; save source routine pointer
.1e50	8e 16 06	stx $0616			stx 	TOKDataSource
.1e53	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1e55	8d 18 06	sta $0618			sta 	TOKIsFirstElement
.1e58	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1e5a	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1e5d	9c 01 04	stz $0401			stz 	TOKLineNumber
.1e60	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1e63					_TOKMainLoop:
.1e63	20 ce 1e	jsr $1ece			jsr 	TOKGet 						; what follows.
.1e66	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1e68	f0 4f		beq $1eb9			beq 	_TOKExit
.1e6a	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1e6c	d0 05		bne $1e73			bne 	_TOKElement
.1e6e	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext
.1e71	80 f0		bra $1e63			bra 	_TOKMainLoop
.1e73					_TOKElement:
.1e73	20 7a 20	jsr $207a			jsr 	TOKIsDigit 					; is it 0..9
.1e76	90 0a		bcc $1e82			bcc 	_TOKNotDigit
.1e78	20 d3 1f	jsr $1fd3			jsr 	TOKTokeniseInteger 			; get integer
.1e7b	b0 43		bcs $1ec0			bcs 	_TOKFail 					; did it fail ?
.1e7d	9c 18 06	stz $0618			stz 	TOKIsFirstElement 			; clear first element flag
.1e80	80 e1		bra $1e63			bra 	_TOKMainLoop
.1e82					_TOKNotDigit:
.1e82	9c 18 06	stz $0618			stz 	TOKIsFirstElement 			; clear first element flag
.1e85	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1e87	d0 07		bne $1e90			bne 	_TOKNotHex
.1e89	20 1b 1f	jsr $1f1b			jsr 	TOKTokeniseHexadecimal
.1e8c	b0 32		bcs $1ec0			bcs 	_TOKFail
.1e8e	80 d3		bra $1e63			bra 	_TOKMainLoop
.1e90					_TOKNotHex:
.1e90	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1e92	d0 07		bne $1e9b			bne 	_TOKNotDecimal
.1e94	20 27 1e	jsr $1e27			jsr 	TOKTokeniseDecimals
.1e97	b0 27		bcs $1ec0			bcs 	_TOKFail
.1e99	80 c8		bra $1e63			bra 	_TOKMainLoop
.1e9b					_TOKNotDecimal:
.1e9b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1e9d	d0 07		bne $1ea6			bne 	_TOKNotString
.1e9f	20 41 20	jsr $2041			jsr 	TOKTokeniseString
.1ea2	b0 1c		bcs $1ec0			bcs 	_TOKFail
.1ea4	80 bd		bra $1e63			bra 	_TOKMainLoop
.1ea6					_TOKNotString:
.1ea6	20 97 20	jsr $2097			jsr 	TOKIsAlpha 					; identifier ?
.1ea9	b0 07		bcs $1eb2			bcs 	_TOKIdentifier
.1eab	20 10 20	jsr $2010			jsr 	TOKTokenisePunctuation 		; punctuation
.1eae	b0 10		bcs $1ec0			bcs 	_TOKFail
.1eb0	80 b1		bra $1e63			bra 	_TOKMainLoop
.1eb2					_TOKIdentifier:
.1eb2	20 55 1f	jsr $1f55			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1eb5	b0 09		bcs $1ec0			bcs 	_TOKFail
.1eb7	80 aa		bra $1e63			bra 	_TOKMainLoop
.1eb9					_TOKExit:
.1eb9	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1ebb	20 c2 1e	jsr $1ec2			jsr 	TOKWriteA
.1ebe	18		clc				clc									; return with carry set.
.1ebf	60		rts				rts
.1ec0					_TOKFail:
.1ec0	38		sec				sec
.1ec1	60		rts				rts
.1ec2					TOKWriteA:
.1ec2	da		phx				phx
.1ec3	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1ec6	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1ec9	fa		plx				plx
.1eca	ee 00 04	inc $0400			inc 	TOKLineSize
.1ecd	60		rts				rts
.1ece					TOKGet:
.1ece	18		clc				clc
.1ecf	6c 16 06	jmp ($0616)			jmp 	(TOKDataSource)
.1ed2					TOKGetNext:
.1ed2	38		sec				sec
.1ed3	6c 16 06	jmp ($0616)			jmp 	(TOKDataSource)
.0616					TOKDataSource:
>0616							.fill 	2
.0618					TOKIsFirstElement:
>0618							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1ed6					TOKFindToken:
.1ed6	a2 49		ldx #$49			ldx 	#StandardTokens & $FF 		; do this table
.1ed8	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1eda	20 e5 1e	jsr $1ee5			jsr 	TOKFindTokenXY 				; find it, or not
.1edd	90 04		bcc $1ee3			bcc 	_TOKFTFail
.1edf	a2 00		ldx #$00			ldx 	#0
.1ee1	38		sec				sec
.1ee2	60		rts				rts
.1ee3					_TOKFTFail
.1ee3	18		clc				clc
.1ee4	60		rts				rts
.1ee5					TOKFindTokenXY:
.1ee5	86 20		stx $20				stx 	zTemp0 						; save token table address
.1ee7	84 21		sty $21				sty 	zTemp0+1
.1ee9	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1eeb	8d 19 06	sta $0619			sta 	TOKCurrent
.1eee					_TOKFindLoop:
.1eee	b2 20		lda ($20)			lda 	(zTemp0) 					; get token length from table
.1ef0	18		clc				clc 		 						; clear carry in case of fail
.1ef1	30 17		bmi $1f0a			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1ef3	cd 16 05	cmp $0516			cmp 	TOKElement 					; compare against the element length
.1ef6	d0 13		bne $1f0b			bne 	_TOKNext 					; different, try next.
.1ef8	aa		tax				tax 								; number of chars to compare.
.1ef9	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1efb					_TOKCompare:
.1efb	b1 20		lda ($20),y			lda 	(zTemp0),y 					; compare the characters
.1efd	d9 16 05	cmp $0516,y			cmp 	TOKElementText-1,y
.1f00	d0 09		bne $1f0b			bne 	_TOKNext 					; different ? try next
.1f02	c8		iny				iny 								; compare next two
.1f03	ca		dex				dex
.1f04	d0 f5		bne $1efb			bne 	_TOKCompare 				; until done X characters.
.1f06	38		sec				sec
.1f07	ad 19 06	lda $0619			lda 	TOKCurrent 					; return current ID.
.1f0a					_TOKExit:
.1f0a	60		rts				rts
.1f0b					_TOKNext:
.1f0b	ee 19 06	inc $0619			inc 	TOKCurrent 					; increment token #
.1f0e	38		sec				sec 								; add length+1 to ptr
.1f0f	b2 20		lda ($20)			lda 	(zTemp0)
.1f11	65 20		adc $20				adc 	zTemp0
.1f13	85 20		sta $20				sta 	zTemp0
.1f15	90 d7		bcc $1eee			bcc 	_TOKFindLoop
.1f17	e6 21		inc $21				inc 	zTemp0+1
.1f19	80 d3		bra $1eee			bra 	_TOKFindLoop
.0619					TOKCurrent:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1f1b					TOKTokeniseHexadecimal:
.1f1b	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext 					; consume the $
.1f1e	a2 0e		ldx #$0e			ldx 	#IFR0
.1f20	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero 				; set R0 = 0
.1f23					_TTHLoop:
.1f23	20 ce 1e	jsr $1ece			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f26	20 a4 20	jsr $20a4			jsr 	TOKIsHexadecimal
.1f29	90 20		bcc $1f4b			bcc 	_TTHDone
.1f2b	a2 0e		ldx #$0e			ldx 	#IFR0 						; shift R0 right 4
.1f2d	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1f30	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1f33	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1f36	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.1f39	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext
.1f3c	38		sec				sec 								; convert to decimal.
.1f3d	e9 30		sbc #$30			sbc 	#48
.1f3f	c9 0a		cmp #$0a			cmp 	#10
.1f41	90 02		bcc $1f45			bcc 	_TTHNotAlpha
.1f43	e9 07		sbc #$07			sbc 	#7
.1f45					_TTHNotAlpha:
.1f45	05 0e		ora $0e				ora 	IFR0+IM0 					; OR in
.1f47	85 0e		sta $0e				sta 	IFR0+IM0
.1f49	80 d8		bra $1f23			bra 	_TTHLoop
.1f4b					_TTHDone:
.1f4b	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1f4d	20 c2 1e	jsr $1ec2			jsr 	TOKWriteA
.1f50	20 05 1e	jsr $1e05			jsr 	TOKTokeniseConstant 		; write integer out.
.1f53	18		clc				clc
.1f54	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1f55					TOKTokeniseIdentifier:
.1f55	20 f2 1d	jsr $1df2			jsr 	TOKResetElement 			; extract an identifier
.1f58					_TOKGetIdentifier:
.1f58	20 ce 1e	jsr $1ece			jsr 	TOKGet
.1f5b	20 64 20	jsr $2064			jsr 	TOKToUpper
.1f5e	20 86 20	jsr $2086			jsr 	TOKIsIdentifierElement
.1f61	90 08		bcc $1f6b			bcc 	_TOKEndIdent
.1f63	20 f6 1d	jsr $1df6			jsr		TOKWriteElement
.1f66	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext
.1f69	80 ed		bra $1f58			bra 	_TOKGetIdentifier
.1f6b					_TOKEndIdent:
.1f6b	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1f6d	d0 06		bne $1f75			bne 	_TOKNotString
.1f6f	20 f6 1d	jsr $1df6			jsr 	TOKWriteElement 			; add it
.1f72	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext 					; consume it
.1f75					_TOKNotString:
.1f75	20 ce 1e	jsr $1ece			jsr 	TOKGet 						; finally check for (
.1f78	c9 28		cmp #$28			cmp 	#"("
.1f7a	d0 06		bne $1f82			bne 	_TOKNoArray
.1f7c	20 f6 1d	jsr $1df6			jsr 	TOKWriteElement 			; add it
.1f7f	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext 					; consume it
.1f82					_TOKNoArray:
.1f82	20 d6 1e	jsr $1ed6			jsr 	TOKFindToken 				; find it
.1f85	90 05		bcc $1f8c			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1f87	20 c2 1e	jsr $1ec2			jsr 	TOKWriteA
.1f8a	18		clc				clc
.1f8b	60		rts				rts
.1f8c					_TOKIsVariable:
.1f8c	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1f8e					_TOKOutputBuffer:
.1f8e	bd 17 05	lda $0517,x			lda 	TOKElementText,x 			; output it translated.
.1f91	20 ba 1f	jsr $1fba			jsr 	TOKTranslateIdentifier
.1f94	20 c2 1e	jsr $1ec2			jsr 	TOKWriteA
.1f97	e8		inx				inx
.1f98	bd 17 05	lda $0517,x			lda 	TOKElementText,x
.1f9b	20 86 20	jsr $2086			jsr 	TOKIsIdentifierElement
.1f9e	b0 ee		bcs $1f8e			bcs 	_TOKOutputBuffer
.1fa0	a8		tay				tay 								; last char in Y
.1fa1	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1fa3	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1fa5	f0 0e		beq $1fb5			beq 	_TOKIVExit
.1fa7	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1fa9	d0 04		bne $1faf			bne 	_TOKIVCheckArray 			; no, check for (
.1fab	1a		inc a				inc 	a 							; token is $7D
.1fac	bc 18 05	ldy $0518,x			ldy 	TOKElementText+1,x 			; get next one.
.1faf					_TOKIVCheckArray:
.1faf	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1fb1	d0 02		bne $1fb5			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1fb3	1a		inc a				inc 	a
.1fb4	1a		inc a				inc 	a
.1fb5					_TOKIVExit:
.1fb5	20 c2 1e	jsr $1ec2			jsr 	TOKWriteA 					; ending token
.1fb8	18		clc				clc
.1fb9	60		rts				rts
.1fba					TOKTranslateIdentifier:
.1fba	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1fbc	f0 0f		beq $1fcd			beq 	_TTI64
.1fbe	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1fc0	f0 0e		beq $1fd0			beq 	_TTI65
.1fc2	38		sec				sec
.1fc3	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1fc5	10 03		bpl $1fca			bpl 	_TTIExit
.1fc7	18		clc				clc 								; map 09 onto 26-35
.1fc8	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1fca					_TTIExit:
.1fca	09 40		ora #$40			ora 	#$40 						; correct range.
.1fcc	60		rts				rts
.1fcd	a9 64		lda #$64	_TTI64:	lda 	#$64
.1fcf	60		rts				rts
.1fd0	a9 65		lda #$65	_TTI65:	lda 	#$65
.1fd2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1fd3					TOKTokeniseInteger:
.1fd3	20 fc 1f	jsr $1ffc			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fd6	a2 17		ldx #$17			ldx 	#TOKElementText & $FF
.1fd8	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.1fda	ad 16 05	lda $0516			lda		TOKElement
.1fdd	20 3c 2d	jsr $2d3c			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1fe0	ad 18 06	lda $0618			lda 	TOKIsFirstElement 			; first element ?
.1fe3	f0 12		beq $1ff7			beq 	_TOKNotLineNumber
.1fe5	a5 10		lda $10				lda 	IFR0+IM2 					; check it's a 2 digit number
.1fe7	d0 0c		bne $1ff5			bne 	_TOKBadLineNumeber
.1fe9	a5 0e		lda $0e				lda 	IFR0+IM0 					; copy it to the line number section.
.1feb	8d 01 04	sta $0401			sta 	TOKLineNumber
.1fee	a5 0f		lda $0f				lda 	IFR0+IM1
.1ff0	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.1ff3	18		clc				clc
.1ff4	60		rts				rts
.1ff5					_TOKBadLineNumeber:
.1ff5	38		sec				sec
.1ff6	60		rts				rts
.1ff7					_TOKNotLineNumber:
.1ff7	20 05 1e	jsr $1e05			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1ffa	18		clc				clc
.1ffb	60		rts				rts
.1ffc					TOKExtractInteger:
.1ffc	20 f2 1d	jsr $1df2			jsr 	TOKResetElement 			; restart
.1fff					_TTILoop:
.1fff	20 ce 1e	jsr $1ece			jsr 	TOKGet 						; keep getting and copying while numeric.
.2002	20 7a 20	jsr $207a			jsr 	TOKIsDigit
.2005	90 08		bcc $200f			bcc 	_TOKEIExit
.2007	20 f6 1d	jsr $1df6			jsr 	TOKWriteElement
.200a	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext
.200d	80 f0		bra $1fff			bra 	_TTILoop
.200f					_TOKEIExit:
.200f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2010					TOKTokenisePunctuation:
.2010	20 f2 1d	jsr $1df2			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2013	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext
.2016	20 f6 1d	jsr $1df6			jsr 	TOKWriteElement
.2019	20 ce 1e	jsr $1ece			jsr 	TOKGet 						; what follows ?
.201c	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.201e	f0 10		beq $2030			beq 	_TTPOne
.2020	20 8e 20	jsr $208e			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2023	b0 0b		bcs $2030			bcs 	_TTPOne 					; these speed things up a bit.
.2025	20 f6 1d	jsr $1df6			jsr 	TOKWriteElement 			; this is what we will search for.
.2028	20 d6 1e	jsr $1ed6			jsr 	TOKFindToken
.202b	b0 0a		bcs $2037			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.202d	ce 16 05	dec $0516			dec 	TOKElement 					; make it a single character
.2030					_TTPOne:
.2030	20 d6 1e	jsr $1ed6			jsr 	TOKFindToken 				; look for one character punctuation
.2033	b0 07		bcs $203c			bcs 	_TTPOutputExit 				; we found it
.2035	38		sec				sec 								; not recognised.
.2036	60		rts				rts
.2037					_TTPConsumeExit:
.2037	48		pha				pha
.2038	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext 					; get the 2nd char out.
.203b	68		pla				pla
.203c					_TTPOutputExit:
.203c	20 c2 1e	jsr $1ec2			jsr  	TOKWriteA 					; write token out
.203f	18		clc				clc
.2040	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2041					TOKTokeniseString:
.2041	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext 					; consume the "
.2044	20 f2 1d	jsr $1df2			jsr 	TOKResetElement 			; start getting the string
.2047					_TOKTSLoop:
.2047	20 ce 1e	jsr $1ece			jsr 	TOKGet 						; check EOL
.204a	c9 00		cmp #$00			cmp 	#0
.204c	f0 0c		beq $205a			beq 	_TOKTSExit
.204e	20 d2 1e	jsr $1ed2			jsr 	TOKGetNext 					; get and consume
.2051	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2053	f0 05		beq $205a			beq 	_TOKTSExit
.2055	20 f6 1d	jsr $1df6			jsr 	TOKWriteElement
.2058	80 ed		bra $2047			bra 	_TOKTSLoop
.205a					_TOKTSExit:
.205a	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.205c	20 c2 1e	jsr $1ec2			jsr 	TOKWriteA
.205f	20 37 1e	jsr $1e37			jsr 	TOKOutputElementBuffer
.2062	18		clc				clc
.2063	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2064					TOKToUpper:
.2064	c9 61		cmp #$61			cmp 	#"a"
.2066	90 06		bcc $206e			bcc 	_TTUNotLower
.2068	c9 7b		cmp #$7b			cmp 	#"z"+1
.206a	b0 02		bcs $206e			bcs 	_TTUNotLower
.206c	49 20		eor #$20			eor 	#$20
.206e					_TTUNotLower:
.206e	60		rts				rts
.206f					TOKToLower:
.206f	c9 41		cmp #$41			cmp 	#"A"
.2071	90 06		bcc $2079			bcc 	_TTUNotUpper
.2073	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2075	b0 02		bcs $2079			bcs 	_TTUNotUpper
.2077	49 20		eor #$20			eor 	#$20
.2079					_TTUNotUpper:
.2079	60		rts				rts
.207a					TOKIsDigit:
.207a	c9 30		cmp #$30			cmp 	#"0"
.207c	90 06		bcc $2084			bcc 	TOKFail
.207e	c9 3a		cmp #$3a			cmp 	#"9"+1
.2080	b0 02		bcs $2084			bcs 	TOKFail
.2082					TOKSucceed:
.2082	38		sec				sec
.2083	60		rts				rts
.2084					TOKFail:
.2084	18		clc				clc
.2085	60		rts				rts
.2086					TOKIsIdentifierElement:
.2086	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.2088	f0 f8		beq $2082			beq 	TOKSucceed
.208a	c9 5f		cmp #$5f			cmp 	#"_"
.208c	f0 f4		beq $2082			beq 	TOKSucceed 					; else fall through to alphanumeric
.208e					TOKIsAlphaNumeric:
.208e	20 97 20	jsr $2097			jsr 	TOKIsAlpha
.2091	b0 ef		bcs $2082			bcs 	TOKSucceed
.2093	20 7a 20	jsr $207a			jsr 	TOKIsDigit
.2096	60		rts				rts
.2097					TOKIsAlpha:
.2097	20 64 20	jsr $2064			jsr 	TOKToUpper
.209a	c9 41		cmp #$41			cmp 	#"A"
.209c	90 e6		bcc $2084			bcc 	TOKFail
.209e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.20a0	b0 e2		bcs $2084			bcs 	TOKFail
.20a2	80 de		bra $2082			bra 	TOKSucceed
.20a4					TOKIsHexadecimal:
.20a4	20 7a 20	jsr $207a			jsr		TOKIsDigit
.20a7	b0 d9		bcs $2082			bcs 	TOKSucceed
.20a9	20 97 20	jsr $2097			jsr 	TOKIsAlpha
.20ac	90 d6		bcc $2084			bcc 	TOKFail
.20ae	c9 47		cmp #$47			cmp 	#"F"+1
.20b0	b0 d2		bcs $2084			bcs 	TOKFail
.20b2	80 ce		bra $2082			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.20b4					Command_CALL:
.20b4	a9 42		lda #$42			lda 	#STK_CALL
.20b6	20 49 25	jsr $2549			jsr 	StackOpen
.20b9	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.20bb	29 c0		and #$c0			and 	#$C0
.20bd	c9 40		cmp #$40			cmp 	#$40
.20bf	d0 29		bne $20ea			bne 	_CCSyntax
.20c1	20 19 28	jsr $2819			jsr 	VARGetInfo 					; get the information
.20c4	20 30 25	jsr $2530			jsr 	ERRCheckRParen 				; check right bracket follows.
.20c7	20 cb 27	jsr $27cb			jsr 	VARFind 					; exists ?
.20ca	90 21		bcc $20ed			bcc 	_CCUnknown
.20cc	86 21		stx $21				stx 	zTemp0+1 					; save target in XA
.20ce	85 20		sta $20				sta 	zTemp0
.20d0	20 7d 25	jsr $257d			jsr 	STKSaveCodePosition 		; save return address on stack.
.20d3	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.20d5	b1 20		lda ($20),y			lda 	(zTemp0),y
.20d7	c9 ff		cmp #$ff			cmp 	#$FF
.20d9	d0 12		bne $20ed			bne 	_CCUnknown
.20db	88		dey				dey 								; get Y offset to stack
.20dc	b1 20		lda ($20),y			lda 	(zTemp0),y
.20de	48		pha				pha
.20df	88		dey				dey 								; get address
.20e0	b1 20		lda ($20),y			lda 	(zTemp0),y
.20e2	85 1f		sta $1f				sta 	codePtr+1
.20e4	b2 20		lda ($20)			lda 	(zTemp0)
.20e6	85 1e		sta $1e				sta 	codePtr
.20e8	7a		ply				ply 								; restore Y
.20e9	60		rts				rts
.20ea					_CCSyntax:
.20ea	4c 93 23	jmp $2393		jmp	ErrorV_syntax
.20ed					_CCUnknown:
.20ed	4c 08 25	jmp $2508		jmp	ErrorV_unknown
.20f0					Command_ENDPROC:
.20f0	a9 42		lda #$42			lda 	#STK_CALL
.20f2	20 75 25	jsr $2575			jsr 	StackCheckFrame
.20f5	20 8f 25	jsr $258f			jsr 	STKLoadCodePosition 		; return
.20f8	20 67 25	jsr $2567			jsr 	StackClose
.20fb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.20fc					Command_DO:
.20fc	a9 22		lda #$22			lda 	#STK_DO
.20fe	20 49 25	jsr $2549			jsr 	StackOpen
.2101	20 7d 25	jsr $257d			jsr 	STKSaveCodePosition 		; save loop position
.2104	60		rts				rts
.2105					Command_EXIT:
.2105	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2107	20 75 25	jsr $2575			jsr 	StackCheckFrame
.210a	20 67 25	jsr $2567			jsr 	StackClose 					; close it
.210d	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.210f	aa		tax				tax
.2110	20 a5 22	jsr $22a5			jsr 	ScanForward
.2113	60		rts				rts
.2114					Command_LOOP:
.2114	a9 22		lda #$22			lda 	#STK_DO
.2116	20 75 25	jsr $2575			jsr 	StackCheckFrame
.2119	20 8f 25	jsr $258f			jsr 	STKLoadCodePosition 		; loop back
.211c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.211d					Command_FOR:
.211d	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.211f	20 49 25	jsr $2549			jsr 	StackOpen
.2122	20 1e 12	jsr $121e			jsr 	CommandLET 					; do "I = 1" bit
.2125	5a		phy				phy 								; save variable address to +4,+5
.2126	a0 04		ldy #$04			ldy 	#4
.2128	a5 20		lda $20				lda 	zTemp0
.212a	91 28		sta ($28),y			sta 	(basicStack),y
.212c	c8		iny				iny
.212d	a5 21		lda $21				lda 	zTemp0+1
.212f	91 28		sta ($28),y			sta 	(basicStack),y
.2131	7a		ply				ply
.2132	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2134	20 40 25	jsr $2540			jsr 	ERRCheckA
.2137	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.213a	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.213c	a2 0e		ldx #$0e			ldx 	#IFR0
.213e	20 93 21	jsr $2193			jsr 	CFSaveR0X
.2141	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; STEP here ?
.2143	c9 91		cmp #$91			cmp 	#PR_STEP
.2145	d0 06		bne $214d			bne 	_CFStep1
.2147	c8		iny				iny 								; consume step
.2148	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 				; evaluate STEP
.214b	80 24		bra $2171			bra 	_CFWriteStep
.214d					_CFStep1:
.214d	a2 0e		ldx #$0e			ldx 	#IFR0 						; default R0, 1
.214f	a9 01		lda #$01			lda 	#1
.2151	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.2154	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2155	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2157	b1 28		lda ($28),y			lda 	(basicStack),y
.2159	85 20		sta $20				sta 	zTemp0
.215b	c8		iny				iny
.215c	b1 28		lda ($28),y			lda 	(basicStack),y
.215e	85 21		sta $21				sta 	zTemp0+1
.2160	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2162	b1 20		lda ($20),y			lda 	(zTemp0),y
.2164	d0 0a		bne $2170			bne 	_CFNotOptimised
.2166	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2168	b1 28		lda ($28),y			lda 	(basicStack),y
.216a	d0 04		bne $2170			bne 	_CFNotOptimised
.216c	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.216e	85 11		sta $11				sta 	IFR0+IExp
.2170					_CFNotOptimised:
.2170	7a		ply				ply
.2171					_CFWriteStep:
.2171	a2 0e		ldx #$0e			ldx 	#IFR0 						; Write to additive.
.2173	a9 06		lda #$06			lda 	#6
.2175	20 93 21	jsr $2193			jsr 	CFSaveR0X
.2178	20 7d 25	jsr $257d			jsr 	STKSaveCodePosition 		; save loop position
.217b	60		rts				rts
.217c					CFLoadR0X:
.217c	5a		phy				phy
.217d	a8		tay				tay
.217e	b1 28		lda ($28),y			lda 	(basicStack),y
.2180	95 00		sta $00,x			sta 	IM0,x
.2182	c8		iny				iny
.2183	b1 28		lda ($28),y			lda 	(basicStack),y
.2185	95 01		sta $01,x			sta 	IM1,x
.2187	c8		iny				iny
.2188	b1 28		lda ($28),y			lda 	(basicStack),y
.218a	95 02		sta $02,x			sta 	IM2,x
.218c	c8		iny				iny
.218d	b1 28		lda ($28),y			lda 	(basicStack),y
.218f	95 03		sta $03,x			sta 	IExp,x
.2191	7a		ply				ply
.2192	60		rts				rts
.2193					CFSaveR0X:
.2193	5a		phy				phy
.2194	a8		tay				tay
.2195	b5 00		lda $00,x			lda 	IM0,x
.2197	91 28		sta ($28),y			sta 	(basicStack),y
.2199	c8		iny				iny
.219a	b5 01		lda $01,x			lda 	IM1,x
.219c	91 28		sta ($28),y			sta 	(basicStack),y
.219e	c8		iny				iny
.219f	b5 02		lda $02,x			lda 	IM2,x
.21a1	91 28		sta ($28),y			sta 	(basicStack),y
.21a3	c8		iny				iny
.21a4	b5 03		lda $03,x			lda 	IExp,x
.21a6	91 28		sta ($28),y			sta 	(basicStack),y
.21a8	7a		ply				ply
.21a9	60		rts				rts
.21aa					Command_NEXT:
.21aa	a9 37		lda #$37			lda 	#STK_FOR
.21ac	20 75 25	jsr $2575			jsr 	StackCheckFrame
.21af	5a		phy				phy 								; check optimised loop
.21b0	a0 09		ldy #$09			ldy 	#9
.21b2	b1 28		lda ($28),y			lda 	(basicStack),y
.21b4	7a		ply				ply
.21b5	0a		asl a				asl 	a
.21b6	b0 35		bcs $21ed			bcs 	_CNOptimised
.21b8	20 24 22	jsr $2224			jsr 	_CNLoadValue 				; load index value to R0.
.21bb	a2 12		ldx #$12			ldx 	#IFR1 						; load adding value to R1.
.21bd	a9 06		lda #$06			lda 	#6
.21bf	20 7c 21	jsr $217c			jsr 	CFLoadR0X
.21c2	20 ce 28	jsr $28ce			jsr 	IFloatAdd 					; add them together and write back.
.21c5	20 47 22	jsr $2247			jsr 	_CNSaveValue
.21c8	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.21ca	a2 12		ldx #$12			ldx 	#IFR1
.21cc	20 7c 21	jsr $217c			jsr 	CFLoadR0X
.21cf	20 a6 2b	jsr $2ba6			jsr 	IFloatCompare 				; compare terminal vs current
.21d2	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.21d4	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero
.21d7	f0 10		beq $21e9			beq 	_CNLoopBack
.21d9	a5 11		lda $11				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.21db	5a		phy				phy
.21dc	a0 09		ldy #$09			ldy 	#6+IExp
.21de	51 28		eor ($28),y			eor 	(basicStack),y
.21e0	7a		ply				ply
.21e1	29 40		and #$40			and 	#IFSign
.21e3	f0 04		beq $21e9			beq 	_CNLoopBack
.21e5					_CNExitLoop:
.21e5	20 67 25	jsr $2567			jsr 	StackClose		 			; return
.21e8	60		rts				rts
.21e9					_CNLoopBack:
.21e9	20 8f 25	jsr $258f			jsr 	STKLoadCodePosition 		; loop back
.21ec	60		rts				rts
.21ed					_CNOptimised:
.21ed	5a		phy				phy
.21ee	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.21f0	b1 28		lda ($28),y			lda 	(basicStack),y
.21f2	85 24		sta $24				sta 	zTemp2
.21f4	c8		iny				iny
.21f5	b1 28		lda ($28),y			lda 	(basicStack),y
.21f7	85 25		sta $25				sta 	zTemp2+1
.21f9	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.21fb					_CNIncrement:
.21fb	c8		iny				iny
.21fc	b1 24		lda ($24),y			lda 	(zTemp2),y
.21fe	1a		inc a				inc 	a
.21ff	91 24		sta ($24),y			sta 	(zTemp2),y
.2201	f0 f8		beq $21fb			beq 	_CNIncrement
.2203	18		clc				clc 								; point zTemp0 to terminal value
.2204	a5 28		lda $28				lda 	basicStack
.2206	69 0a		adc #$0a			adc 	#10
.2208	85 20		sta $20				sta 	zTemp0
.220a	a5 29		lda $29				lda 	basicStack+1
.220c	69 00		adc #$00			adc 	#0
.220e	85 21		sta $21				sta 	zTemp0+1
.2210	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2212	b2 24		lda ($24)			lda 	(zTemp2)
.2214	d2 20		cmp ($20)			cmp 	(zTemp0)
.2216	b1 24		lda ($24),y			lda 	(zTemp2),y
.2218	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.221a	c8		iny				iny
.221b	b1 24		lda ($24),y			lda 	(zTemp2),y
.221d	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.221f	7a		ply				ply
.2220	b0 c3		bcs $21e5			bcs 	_CNExitLoop
.2222	80 c5		bra $21e9			bra 	_CNLoopBack
.2224					_CNLoadValue:
.2224	5a		phy				phy
.2225	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2227	b1 28		lda ($28),y			lda 	(basicStack),y
.2229	85 24		sta $24				sta 	zTemp2
.222b	c8		iny				iny
.222c	b1 28		lda ($28),y			lda 	(basicStack),y
.222e	85 25		sta $25				sta 	zTemp2+1
.2230	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2232	b1 24		lda ($24),y			lda 	(zTemp2),y
.2234	85 0e		sta $0e				sta 	IFR0+IM0
.2236	c8		iny				iny
.2237	b1 24		lda ($24),y			lda 	(zTemp2),y
.2239	85 0f		sta $0f				sta 	IFR0+IM1
.223b	c8		iny				iny
.223c	b1 24		lda ($24),y			lda 	(zTemp2),y
.223e	85 10		sta $10				sta 	IFR0+IM2
.2240	c8		iny				iny
.2241	b1 24		lda ($24),y			lda 	(zTemp2),y
.2243	85 11		sta $11				sta 	IFR0+IExp
.2245	7a		ply				ply
.2246	60		rts				rts
.2247					_CNSaveValue:
.2247	5a		phy				phy
.2248	a0 00		ldy #$00			ldy 	#0
.224a	a5 0e		lda $0e				lda 	IFR0+IM0
.224c	91 24		sta ($24),y			sta 	(zTemp2),y
.224e	c8		iny				iny
.224f	a5 0f		lda $0f				lda 	IFR0+IM1
.2251	91 24		sta ($24),y			sta 	(zTemp2),y
.2253	c8		iny				iny
.2254	a5 10		lda $10				lda 	IFR0+IM2
.2256	91 24		sta ($24),y			sta 	(zTemp2),y
.2258	c8		iny				iny
.2259	a5 11		lda $11				lda 	IFR0+IExp
.225b	91 24		sta ($24),y			sta 	(zTemp2),y
.225d	7a		ply				ply
.225e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.225f					IfCommand:
.225f	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 				; Get the if test.
.2262	b1 1e		lda ($1e),y			lda 	(codePtr),y					; what follows ?
.2264	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2266	d0 0a		bne $2272			bne 	_IfStructured 				; we still support it.
.2268	c8		iny				iny 								; consume THEN
.2269	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero 			; is it zero
.226c	f0 01		beq $226f			beq 	_IfFail 					; if fail, go to next line
.226e	60		rts				rts 								; if THEN just continue
.226f					_IfFail:
.226f	4c 88 13	jmp $1388			jmp 	RUNEndOfLine
.2272					_IfStructured:
.2272	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero 			; is it zero
.2275	d0 07		bne $227e			bne 	_IfExit 					; if not, then continue normally.
.2277	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2279	a2 85		ldx #$85			ldx 	#PR_ENDIF
.227b	20 a5 22	jsr $22a5			jsr 	ScanForward 				; and run from there
.227e					_IfExit:
.227e	60		rts				rts
.227f					ElseCode:
.227f	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2281	aa		tax				tax 								; so just go to the structure exit
.2282	20 a5 22	jsr $22a5			jsr 	ScanForward
.2285	60		rts				rts
.2286					EndIf:
.2286	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2287					Command_REPEAT:
.2287	a9 02		lda #$02			lda 	#STK_REPEAT
.2289	20 49 25	jsr $2549			jsr 	StackOpen
.228c	20 7d 25	jsr $257d			jsr 	STKSaveCodePosition 		; save loop position
.228f	60		rts				rts
.2290					Command_UNTIL:
.2290	a9 02		lda #$02			lda 	#STK_REPEAT
.2292	20 75 25	jsr $2575			jsr 	StackCheckFrame
.2295	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 				; work out the test
.2298	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero 			; check if zero
.229b	f0 04		beq $22a1			beq 	_CULoopBack 				; if so keep looping
.229d	20 67 25	jsr $2567			jsr 	StackClose		 			; return
.22a0	60		rts				rts
.22a1					_CULoopBack:
.22a1	20 8f 25	jsr $258f			jsr 	STKLoadCodePosition 		; loop back
.22a4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.22a5					ScanForward:
.22a5	85 20		sta $20				sta 	zTemp0 						; save scan options in zTemp0
.22a7	86 21		stx $21				stx 	zTemp0+1
.22a9	64 22		stz $22				stz 	zTemp1 						; clear structure count.
.22ab					_ScanForwardLoop:
.22ab	a5 22		lda $22				lda 	zTemp1 						; if structure count non zero, don't check for end.
.22ad	d0 0a		bne $22b9			bne 	_ScanNoCheck
.22af	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; reached either target token.
.22b1	c5 20		cmp $20				cmp 	zTemp0
.22b3	f0 49		beq $22fe			beq 	_ScanExit
.22b5	c5 21		cmp $21				cmp 	zTemp0+1
.22b7	f0 45		beq $22fe			beq 	_ScanExit
.22b9					_ScanNoCheck:
.22b9	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get the token and consume it.
.22bb	c8		iny				iny
.22bc	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.22be	f0 37		beq $22f7			beq		_ScanDataItem
.22c0	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.22c2	f0 33		beq $22f7			beq 	_ScanDataItem
.22c4	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.22c6	f0 1b		beq $22e3			beq 	_ScanNextLine
.22c8	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.22ca	d0 01		bne $22cd			bne 	_ScanNoShift
.22cc	c8		iny				iny
.22cd					_ScanNoShift:
.22cd	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.22cf	b0 da		bcs $22ab			bcs 	_ScanForwardLoop
.22d1	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.22d3	90 d6		bcc $22ab			bcc 	_ScanForwardLoop
.22d5	aa		tax				tax 								; access the table to get the adjustment.
.22d6	18		clc				clc
.22d7	a5 22		lda $22				lda 	zTemp1 						; add it to structure count.
.22d9	7d bd 18	adc $18bd,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.22dc	85 22		sta $22				sta 	zTemp1
.22de	10 cb		bpl $22ab			bpl		_ScanForwardLoop 			; error if -ve ?
.22e0	4c 1f 24	jmp $241f		jmp	ErrorV_structure
.22e3					_ScanNextLine:
.22e3	18		clc				clc	 								; forward to next line.
.22e4	b2 1e		lda ($1e)			lda 	(codePtr)
.22e6	65 1e		adc $1e				adc 	codePtr
.22e8	85 1e		sta $1e				sta 	codePtr
.22ea	90 02		bcc $22ee			bcc 	_ScanNoCarry
.22ec	e6 1f		inc $1f				inc 	codePtr+1
.22ee					_ScanNoCarry:
.22ee	a0 03		ldy #$03			ldy 	#3
.22f0	b2 1e		lda ($1e)			lda 	(codePtr) 					; off end of program ?
.22f2	d0 b7		bne $22ab			bne 	_ScanForwardLoop
.22f4	4c 1f 24	jmp $241f		jmp	ErrorV_structure
.22f7					_ScanDataItem:
.22f7	98		tya				tya
.22f8	38		sec				sec
.22f9	71 1e		adc ($1e),y			adc 	(codePtr),y
.22fb	a8		tay				tay
.22fc	80 ad		bra $22ab			bra 	_ScanForwardLoop
.22fe					_ScanExit:
.22fe	c8		iny				iny 								; consume final token.
.22ff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2300					ScanProcedures:
.2300	a5 1e		lda $1e				lda 	codePtr 					; push codePtr on the stack
.2302	48		pha				pha
.2303	a5 1f		lda $1f				lda 	codePtr+1
.2305	48		pha				pha
.2306	5a		phy				phy
.2307	ad 14 05	lda $0514			lda 	PGMBaseHigh 				; back to the program start
.230a	85 1f		sta $1f				sta 	codePtr+1
.230c	64 1e		stz $1e				stz 	codePtr
.230e					_SPLoop:
.230e	b2 1e		lda ($1e)			lda 	(codePtr) 					; end of program
.2310	f0 18		beq $232a			beq 	_SPExit
.2312	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2314	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2316	c9 88		cmp #$88			cmp 	#PR_PROC
.2318	d0 03		bne $231d			bne 	_SPNext
.231a	20 32 23	jsr $2332			jsr 	_SPSetupRecord
.231d					_SPNext:
.231d	18		clc				clc 								; forward to next
.231e	b2 1e		lda ($1e)			lda 	(codePtr)
.2320	65 1e		adc $1e				adc 	codePtr
.2322	85 1e		sta $1e				sta 	codePtr
.2324	90 e8		bcc $230e			bcc 	_SPLoop
.2326	e6 1f		inc $1f				inc 	codePtr+1
.2328	80 e4		bra $230e			bra 	_SPLoop
.232a					_SPExit:
.232a	7a		ply				ply
.232b	68		pla				pla
.232c	85 1f		sta $1f				sta 	codePtr+1
.232e	68		pla				pla
.232f	85 1e		sta $1e				sta 	codePtr
.2331	60		rts				rts
.2332					_SPSetupRecord:
.2332	c8		iny				iny 								; check identifier follows
.2333	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2335	29 c0		and #$c0			and 	#$C0
.2337	c9 40		cmp #$40			cmp 	#$40
.2339	d0 27		bne $2362			bne 	_SPSyntax
.233b	20 19 28	jsr $2819			jsr 	VARGetInfo 					; get the information
.233e	20 30 25	jsr $2530			jsr 	ERRCheckRParen 				; check right bracket follows.
.2341	20 cb 27	jsr $27cb			jsr 	VARFind 					; already exists ?
.2344	b0 1f		bcs $2365			bcs 	_SPUsed 					; error !
.2346	20 77 27	jsr $2777			jsr 	VARCreate 					; create, XA points to the data.
.2349	85 20		sta $20				sta 	zTemp0
.234b	86 21		stx $21				stx 	zTemp0+1
.234d	5a		phy				phy 								; save Y pos on stack
.234e	a0 01		ldy #$01			ldy 	#1
.2350	a5 1e		lda $1e				lda 	codePtr 					; save codePtr/Y
.2352	92 20		sta ($20)			sta 	(zTemp0)
.2354	a5 1f		lda $1f				lda 	codePtr+1
.2356	91 20		sta ($20),y			sta 	(zTemp0),y
.2358	c8		iny				iny
.2359	68		pla				pla
.235a	91 20		sta ($20),y			sta 	(zTemp0),y
.235c	c8		iny				iny
.235d	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.235f	91 20		sta ($20),y			sta 	(zTemp0),y
.2361	60		rts				rts
.2362					_SPSyntax:
.2362	4c 93 23	jmp $2393		jmp	ErrorV_syntax
.2365					_SPUsed:
.2365	4c ea 24	jmp $24ea		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2368					Command_WHILE:
.2368	5a		phy				phy 								; save position of the test
.2369	20 c2 15	jsr $15c2			jsr 	EXPEvalNumber 				; work out the while test.
.236c	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero 			; check if zero
.236f	f0 0e		beq $237f			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2371	98		tya				tya 								; position *after* test.
.2372	7a		ply				ply 								; restore position before test, at WHILE
.2373	88		dey				dey 								; so we execute the WHILE command again.
.2374	48		pha				pha 								; push after test on the stack
.2375	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2377	20 49 25	jsr $2549			jsr 	StackOpen
.237a	20 7d 25	jsr $257d			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.237d	7a		ply				ply 								; restore the position *after* the test
.237e	60		rts				rts
.237f					_WHExitLoop:
.237f	68		pla				pla 								; throw post loop position
.2380	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2382	aa		tax				tax
.2383	20 a5 22	jsr $22a5			jsr 	ScanForward
.2386	60		rts				rts
.2387					Command_WEND:
.2387	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2389	20 75 25	jsr $2575			jsr 	StackCheckFrame
.238c	20 8f 25	jsr $258f			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.238f	20 67 25	jsr $2567			jsr 	StackClose		 			; erase the frame
.2392	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2393					ErrorV_syntax:
.2393	20 68 26	jsr $2668		jsr	ErrorHandler
>2396	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>239e	45 72 72 6f 72 00
.23a4					ErrorV_range:
.23a4	20 68 26	jsr $2668		jsr	ErrorHandler
>23a7	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>23af	52 61 6e 67 65 00
.23b5					ErrorV_value:
.23b5	20 68 26	jsr $2668		jsr	ErrorHandler
>23b8	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>23c0	75 65 00
.23c3					ErrorV_type:
.23c3	20 68 26	jsr $2668		jsr	ErrorHandler
>23c6	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>23ce	73 6d 61 74 63 68 00
.23d5					ErrorV_unimplemented:
.23d5	20 68 26	jsr $2668		jsr	ErrorHandler
>23d8	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>23e0	6c 65 6d 65 6e 74 65 64 00
.23e9					ErrorV_assert:
.23e9	20 68 26	jsr $2668		jsr	ErrorHandler
>23ec	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>23f4	46 61 69 6c 00
.23f9					ErrorV_internal:
.23f9	20 68 26	jsr $2668		jsr	ErrorHandler
>23fc	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2404	6c 20 45 72 72 6f 72 00
.240c					ErrorV_divzero:
.240c	20 68 26	jsr $2668		jsr	ErrorHandler
>240f	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2417	42 79 20 5a 65 72 6f 00
.241f					ErrorV_structure:
.241f	20 68 26	jsr $2668		jsr	ErrorHandler
>2422	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>242a	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2437					ErrorV_stop:
.2437	20 68 26	jsr $2668		jsr	ErrorHandler
>243a	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2442	20 53 74 6f 70 70 65 64 00
.244b					ErrorV_data:
.244b	20 68 26	jsr $2668		jsr	ErrorHandler
>244e	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2456	44 61 74 61 00
.245b					ErrorV_redefine:
.245b	20 68 26	jsr $2668		jsr	ErrorHandler
>245e	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2466	65 64 65 66 69 6e 65 64 00
.246f					ErrorV_index:
.246f	20 68 26	jsr $2668		jsr	ErrorHandler
>2472	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>247a	61 79 20 49 6e 64 65 78 00
.2483					ErrorV_memory:
.2483	20 68 26	jsr $2668		jsr	ErrorHandler
>2486	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>248e	4d 65 6d 6f 72 79 00
.2495					ErrorV_uninitialised:
.2495	20 68 26	jsr $2668		jsr	ErrorHandler
>2498	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>24a0	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.24b0					ErrorV_string:
.24b0	20 68 26	jsr $2668		jsr	ErrorHandler
>24b3	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>24bb	69 6e 67 20 4c 65 6e 67 74 68 00
.24c6					ErrorV_variable:
.24c6	20 68 26	jsr $2668		jsr	ErrorHandler
>24c9	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>24d1	65 20 4d 69 73 73 69 6e 67 00
.24db					ErrorV_stack:
.24db	20 68 26	jsr $2668		jsr	ErrorHandler
>24de	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>24e6	75 6c 6c 00
.24ea					ErrorV_dupproc:
.24ea	20 68 26	jsr $2668		jsr	ErrorHandler
>24ed	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>24f5	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2505	65 64 00
.2508					ErrorV_unknown:
.2508	20 68 26	jsr $2668		jsr	ErrorHandler
>250b	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2513	20 50 72 6f 63 65 64 75 72 65 00
.251e					ErrorV_break:
.251e	20 68 26	jsr $2668		jsr	ErrorHandler
>2521	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2528					ERRCheckLParen:
.2528	b1 1e		lda ($1e),y			lda 	(codePtr),y
.252a	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.252c	d0 18		bne $2546			bne 	ERRSyntaxError
.252e	c8		iny				iny
.252f	60		rts				rts
.2530					ERRCheckRParen:
.2530	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2532	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2534	d0 10		bne $2546			bne 	ERRSyntaxError
.2536	c8		iny				iny
.2537	60		rts				rts
.2538					ERRCheckComma:
.2538	b1 1e		lda ($1e),y			lda 	(codePtr),y
.253a	c9 99		cmp #$99			cmp 	#PR_COMMA
.253c	d0 08		bne $2546			bne 	ERRSyntaxError
.253e	c8		iny				iny
.253f	60		rts				rts
.2540					ERRCheckA:
.2540	d1 1e		cmp ($1e),y			cmp 	(codePtr),y
.2542	d0 02		bne $2546			bne 	ERRSyntaxError
.2544	c8		iny				iny
.2545	60		rts				rts
.2546					ERRSyntaxError:
.2546	4c 93 23	jmp $2393		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2549					StackOpen:
.2549	48		pha				pha 								; save frame byte
.254a	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.254c	0a		asl a				asl 	a 							; claim twice this for storage
.254d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.254f	38		sec				sec 								; so basically subtracting from
.2550	65 28		adc $28				adc 	basicStack 	 				; basicStack
.2552	85 28		sta $28				sta 	basicStack
.2554	b0 0a		bcs $2560			bcs 	_SONoBorrow
>2556	db						.byte 	$DB
.2557	c6 29		dec $29				dec 	basicStack+1
.2559	a5 29		lda $29				lda 	basicStack+1 				; reached the bottom ?
.255b	cd 1a 06	cmp $061a			cmp 	basicStackEnd
.255e	f0 04		beq $2564			beq 	_SOMemory
.2560					_SONoBorrow:
.2560	68		pla				pla 								; get marker back and write at TOS
.2561	92 28		sta ($28)			sta 	(basicStack)
.2563	60		rts				rts
.2564					_SOMemory:
.2564	4c db 24	jmp $24db		jmp	ErrorV_stack
.2567					StackClose:
.2567	b2 28		lda ($28)			lda 	(basicStack) 				; get TOS marker
.2569	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.256b	0a		asl a				asl 	a 							; claim twice this.
.256c	65 28		adc $28				adc 	basicStack 					; add to the stack pointer.
.256e	85 28		sta $28				sta 	basicStack
.2570	90 02		bcc $2574			bcc 	_SCExit
.2572	e6 29		inc $29				inc 	basicStack+1
.2574					_SCExit:
.2574	60		rts				rts
.2575					StackCheckFrame:
.2575	d2 28		cmp ($28)			cmp		(basicStack) 				; check  frames match
.2577	d0 01		bne $257a			bne 	_SCFError 					; different, we have structures mixed up
.2579	60		rts				rts
.257a					_SCFError:
.257a	4c 1f 24	jmp $241f		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.257d					STKSaveCodePosition:
.257d	5a		phy				phy
.257e	98		tya				tya 								; save Y at offset 1.
.257f	a0 01		ldy #$01			ldy 	#1
.2581	91 28		sta ($28),y			sta 	(basicStack),y
.2583	a5 1e		lda $1e				lda 	codePtr 					; save code (low) at 2
.2585	c8		iny				iny
.2586	91 28		sta ($28),y			sta 	(basicStack),y
.2588	a5 1f		lda $1f				lda 	codePtr+1 					; save code (high) at 3
.258a	c8		iny				iny
.258b	91 28		sta ($28),y			sta 	(basicStack),y
.258d	7a		ply				ply
.258e	60		rts				rts
.258f					STKLoadCodePosition:
.258f	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2591	b1 28		lda ($28),y			lda 	(basicStack),y
.2593	85 1f		sta $1f				sta 	codePtr+1
.2595	88		dey				dey
.2596	b1 28		lda ($28),y			lda 	(basicStack),y
.2598	85 1e		sta $1e				sta 	codePtr
.259a	88		dey				dey
.259b	b1 28		lda ($28),y			lda 	(basicStack),y 				; line offset to Y
.259d	a8		tay				tay
.259e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.259f					StackReset:
.259f	48		pha				pha 								; save top of memory
.25a0	3a		dec a				dec 	a  							; end of stack = previous byte
.25a1	85 29		sta $29				sta 	basicStack+1
.25a3	a9 ff		lda #$ff			lda 	#$FF
.25a5	85 28		sta $28				sta 	basicStack
.25a7	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.25a9	92 28		sta ($28)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.25ab	68		pla				pla 								; allocate pages for stack.
.25ac	38		sec				sec
.25ad	e9 02		sbc #$02			sbc 	#STACKPAGES
.25af	8d 1a 06	sta $061a			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.25b2	60		rts				rts
.0028					basicStack:
>0028							.fill 	2
.061a					basicStackEnd:
>061a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.25b3					StringConcrete:
.25b3	5a		phy				phy 								; save position on stack
.25b4	b2 0e		lda ($0e)			lda 	(IFR0) 						; get string length
.25b6	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.25b8	b0 41		bcs $25fb			bcs 	_SALengthError
.25ba	18		clc				clc 								; length of the new string
.25bb	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.25bd	90 02		bcc $25c1			bcc 	_SAHaveLength
.25bf	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.25c1					_SAHaveLength:
.25c1	48		pha				pha 								; save length to be allocated for concreting.
.25c2	38		sec				sec
.25c3	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.25c5	6d 1c 06	adc $061c			adc 	stringMemory
.25c8	8d 1c 06	sta $061c			sta 	stringMemory
.25cb	85 24		sta $24				sta 	zTemp2 						; update storage address
.25cd	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.25cf	6d 1d 06	adc $061d			adc 	stringMemory+1
.25d2	8d 1d 06	sta $061d			sta 	stringMemory+1
.25d5	85 25		sta $25				sta 	zTemp2+1
.25d7	68		pla				pla 								; save length allocated in +0
.25d8	92 24		sta ($24)			sta 	(zTemp2)
.25da	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.25dc	a0 01		ldy #$01			ldy 	#1
.25de	91 24		sta ($24),y			sta 	(zTemp2),y
.25e0					_SACopyNewString:
.25e0	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy length at +2
.25e2	a0 02		ldy #$02			ldy 	#2
.25e4	91 24		sta ($24),y			sta 	(zTemp2),y
.25e6	aa		tax				tax 								; bytes to copy
.25e7	f0 0c		beq $25f5			beq 	_SACopyExit
.25e9	a0 01		ldy #$01			ldy 	#1 							; first character from here
.25eb					_SACopyNSLoop:
.25eb	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; get character from here
.25ed	c8		iny				iny 								; write two on in string storage
.25ee	c8		iny				iny
.25ef	91 24		sta ($24),y			sta 	(zTemp2),y
.25f1	88		dey				dey
.25f2	ca		dex				dex									; until copied all the string lengths.
.25f3	d0 f6		bne $25eb			bne 	_SACopyNSLoop
.25f5					_SACopyExit:
.25f5	a6 25		ldx $25				ldx 	zTemp2+1 					; XA contain the concreted string.
.25f7	a5 24		lda $24				lda 	zTemp2
.25f9	7a		ply				ply
.25fa	60		rts				rts
.25fb					_SALengthError:
.25fb	4c b0 24	jmp $24b0		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.25fe					StringSystemInitialise:
.25fe	3a		dec a				dec 	a 							; make last byte of previous page.
.25ff	8d 1d 06	sta $061d			sta 	stringMemory+1
.2602	85 21		sta $21				sta 	zTemp0+1
.2604	a9 ff		lda #$ff			lda 	#$FF
.2606	8d 1c 06	sta $061c			sta 	stringMemory
.2609	85 20		sta $20				sta 	zTemp0
.260b	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.260d	92 20		sta ($20)			sta 	(zTemp0)
.260f	60		rts				rts
.2610					StringSpaceInitialise:
.2610	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2612	8d 1b 06	sta $061b			sta 	stringInitialised
.2615	ad 1c 06	lda $061c			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2618	8d 1e 06	sta $061e			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.261b	ad 1d 06	lda $061d			lda 	stringMemory+1
.261e	3a		dec a				dec 	a
.261f	8d 1f 06	sta $061f			sta 	stringTempPointer+1
.2622	20 66 10	jsr $1066			jsr 	ClearCheckMemory
.2625	60		rts				rts
.2626					StringTempAllocate:
.2626	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2628	b0 2e		bcs $2658			bcs 	_STALength
.262a	2c 1b 06	bit $061b			bit 	stringInitialised 			; already initialised
.262d	30 05		bmi $2634			bmi 	_STAAllocate
.262f	48		pha				pha 								; save value to subtract.
.2630	20 10 26	jsr $2610			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2633	68		pla				pla 								; restore it
.2634					_STAAllocate:
.2634	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2636	18		clc				clc  								; deliberate allows one more
.2637	6d 1e 06	adc $061e			adc 	stringTempPointer 			; subtract from temp pointer
.263a	8d 1e 06	sta $061e			sta 	stringTempPointer
.263d	85 0e		sta $0e				sta 	IFR0+IM0 					; address in mantissa too
.263f	85 2a		sta $2a				sta 	zsTemp 						; and zsTemp
.2641	ad 1f 06	lda $061f			lda 	stringTempPointer+1
.2644	69 ff		adc #$ff			adc 	#$FF
.2646	8d 1f 06	sta $061f			sta 	stringTempPointer+1
.2649	85 2b		sta $2b				sta 	zsTemp+1
.264b	85 0f		sta $0f				sta 	IFR0+IM1
.264d	64 10		stz $10				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.264f	a9 80		lda #$80			lda 	#$80
.2651	85 11		sta $11				sta 	IFR0+IExp
.2653	a9 00		lda #$00			lda 	#0 							; clear the target string
.2655	92 2a		sta ($2a)			sta 	(zsTemp)
.2657	60		rts				rts
.2658					_STALength:
.2658	4c b0 24	jmp $24b0		jmp	ErrorV_string
.265b					StringTempWrite:
.265b	5a		phy				phy
.265c	48		pha				pha
.265d	b2 2a		lda ($2a)			lda 	(zsTemp)
.265f	1a		inc a				inc 	a
.2660	92 2a		sta ($2a)			sta 	(zsTemp)
.2662	a8		tay				tay
.2663	68		pla				pla
.2664	91 2a		sta ($2a),y			sta 	(zsTemp),y
.2666	7a		ply				ply
.2667	60		rts				rts
.002a					zsTemp:
>002a							.fill 	2
.061b					stringInitialised:
>061b							.fill 	1
.061c					stringMemory:
>061c							.fill 	2
.061e					stringTempPointer:
>061e							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2668					ErrorHandler:
.2668	fa		plx				plx 								; get address of msg
.2669	7a		ply				ply
.266a	e8		inx				inx 								; bump past RTS
.266b	d0 01		bne $266e			bne 	_EHNoInc
.266d	c8		iny				iny
.266e					_EHNoInc:
.266e	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.2671	ad 20 06	lda $0620			lda 	ERRLine 					; direct command ?
.2674	0d 21 06	ora $0621			ora 	ERRLine+1
.2677	f0 10		beq $2689			beq 	_EHNoNumber
.2679	a2 8c		ldx #$8c			ldx 	#_EHAtMsg & $FF
.267b	a0 26		ldy #$26			ldy 	#_EHAtMsg >> 8
.267d	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.2680	ad 20 06	lda $0620			lda 	ERRLine 					; line number -> XA
.2683	ae 21 06	ldx $0621			ldx 	ERRLine+1
.2686	20 91 26	jsr $2691			jsr 	WriteIntXA
.2689					_EHNoNumber:
.2689	4c ba 26	jmp $26ba			jmp 	WarmStartNewLine
.268c					_EHAtMsg:
>268c	20 61 74 20 00					.text 	" at ",0
.2691					WriteIntXA:
.2691	da		phx				phx
.2692	48		pha				pha
.2693	a2 0e		ldx #$0e			ldx 	#IFR0
.2695	20 27 2e	jsr $2e27			jsr 	IFloatPushRx
.2698	68		pla				pla
.2699	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.269c	68		pla				pla
.269d	85 0f		sta $0f				sta 	IFR0+IM1
.269f	a9 0a		lda #$0a			lda 	#10 						; decimal
.26a1	20 79 2c	jsr $2c79			jsr 	IFloatIntegerToStringR0	 	; convert
.26a4	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.26a7	a2 0e		ldx #$0e			ldx 	#IFR0
.26a9	20 48 2e	jsr $2e48			jsr 	IFloatPullRx
.26ac	60		rts				rts
.26ad					NotImplemented:
.26ad	4c d5 23	jmp $23d5		jmp	ErrorV_unimplemented
.0620					ERRLine:
>0620							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.26b0					WarmStart:
.26b0	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.26b2	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.26b5	a9 6b		lda #$6b			lda 	#"k"
.26b7	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.26ba					WarmStartNewLine:
.26ba	a9 0d		lda #$0d			lda 	#13
.26bc	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.26bf					WarmStartNoPrompt:
.26bf	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.26c1	9a		txs				txs
.26c2	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.26c5	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.26c7	f0 f1		beq $26ba			beq 	WarmStartNewLine
.26c9	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.26cb	d0 f2		bne $26bf			bne 	WarmStartNoPrompt
.26cd	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.26d0	e8		inx				inx 								; skip length byte to make it ASCIIZ
.26d1	d0 01		bne $26d4			bne 	_WSSkip
.26d3	c8		iny				iny
.26d4					_WSSkip:
.26d4	86 24		stx $24				stx 	zTemp2 						; save address
.26d6	84 25		sty $25				sty 	zTemp2+1
.26d8	a2 02		ldx #$02			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.26da	a0 27		ldy #$27			ldy 	#TOKGetCharacter >> 8
.26dc	38		sec				sec
.26dd	20 4d 1e	jsr $1e4d			jsr 	TOKTokenise
.26e0	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.26e3	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.26e6	d0 0b		bne $26f3			bne 	_WSLineEdit
.26e8	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.26ea	85 1e		sta $1e				sta 	codePtr
.26ec	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.26ee	85 1f		sta $1f				sta 	codePtr+1
.26f0	4c 93 13	jmp $1393			jmp 	RUNNewLine
.26f3					_WSLineEdit:
.26f3	20 28 1d	jsr $1d28			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.26f6	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.26f9	c9 04		cmp #$04			cmp 	#4
.26fb	f0 03		beq $2700			beq 	_WSNoInsert
.26fd	20 72 1d	jsr $1d72			jsr 	PGMInsertLine				; if not, maybe insert
.2700					_WSNoInsert:
.2700	80 bd		bra $26bf			bra 	WarmStartNoPrompt
.2702					TOKGetCharacter:
.2702	b2 24		lda ($24)			lda 	(zTemp2)
.2704	90 06		bcc $270c			bcc 	_GSNoIncrement
.2706	e6 24		inc $24				inc 	zTemp2
.2708	d0 02		bne $270c			bne 	_GSNoIncrement
.270a	e6 25		inc $25				inc 	zTemp2+1
.270c					_GSNoIncrement:
.270c	c9 00		cmp #$00			cmp 	#0
.270e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.270f					VARArrayLookup:
.270f	85 20		sta $20				sta 	zTemp0 						; save the array address pointer in zTemp0
.2711	86 21		stx $21				stx 	zTemp0+1
.2713	b2 20		lda ($20)			lda 	(zTemp0)
.2715	48		pha				pha
.2716	5a		phy				phy
.2717	a0 01		ldy #$01			ldy 	#1
.2719	b1 20		lda ($20),y			lda 	(zTemp0),y
.271b	7a		ply				ply
.271c	48		pha				pha
.271d	20 d4 15	jsr $15d4			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2720	68		pla				pla 								; array address to zTemp0
.2721	85 21		sta $21				sta 	zTemp0+1
.2723	68		pla				pla
.2724	85 20		sta $20				sta 	zTemp0
.2726	5a		phy				phy 								; save codePtr position.
.2727	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2729	b1 20		lda ($20),y			lda 	(zTemp0),y
.272b	48		pha				pha 								; save bit 15 on stack.
.272c	29 7f		and #$7f			and 	#$7F
.272e	85 22		sta $22				sta 	zTemp1
.2730	a5 0e		lda $0e				lda 	IFR0+IM0 					; check range of index
.2732	d2 20		cmp ($20)			cmp 	(zTemp0)
.2734	a5 0f		lda $0f				lda 	IFR0+IM1
.2736	e5 22		sbc $22				sbc 	zTemp1
.2738	b0 3a		bcs $2774			bcs 	_VALIndex
.273a	a5 0f		lda $0f				lda 	IFR0+IM1  					; sanity check
.273c	c9 40		cmp #$40			cmp 	#$40
.273e	b0 34		bcs $2774			bcs 	_VALIndex
.2740	06 0e		asl $0e				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2742	26 0f		rol $0f				rol 	IFR0+IM1
.2744	fa		plx				plx 								; get msb of size -> X
.2745	30 04		bmi $274b			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2747	06 0e		asl $0e				asl 	IFR0+IM0
.2749	26 0f		rol $0f				rol 	IFR0+IM1
.274b					_VARNotX4:
.274b	18		clc				clc 								; add the two for the size bytes
.274c	a5 0e		lda $0e				lda 	IFR0+IM0
.274e	69 02		adc #$02			adc 	#2
.2750	85 0e		sta $0e				sta 	IFR0+IM0
.2752	90 02		bcc $2756			bcc 	_VARNoCarry1
.2754	e6 0f		inc $0f				inc 	IFR0+IM1
.2756					_VARNoCarry1:
.2756	18		clc				clc 								; calculate the element address and push to stack.
.2757	a5 0e		lda $0e				lda 	IFR0+IM0
.2759	65 20		adc $20				adc 	zTemp0
.275b	48		pha				pha
.275c	a5 0f		lda $0f				lda 	IFR0+IM1
.275e	65 21		adc $21				adc 	zTemp0+1
.2760	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2762	30 04		bmi $2768			bmi 	_VARHasSubLevel
.2764	aa		tax				tax 								; address in XA
.2765	68		pla				pla
.2766	7a		ply				ply 								; restore Y and exit
.2767	60		rts				rts
.2768					_VARHasSubLevel:
.2768	aa		tax				tax 								; get link address in XA
.2769	68		pla				pla
.276a	7a		ply				ply 								; restore code position.
.276b	48		pha				pha
.276c	20 38 25	jsr $2538			jsr 	ERRCheckComma 				; comma required.
.276f	68		pla				pla
.2770	20 0f 27	jsr $270f			jsr 	VARArrayLookup 				; call it recursively
.2773	60		rts				rts
.2774					_VALIndex:
.2774	4c 6f 24	jmp $246f		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2777					VARCreate:
.2777	5a		phy				phy
.2778	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.277a	a2 00		ldx #$00			ldx 	#0
.277c	20 3d 10	jsr $103d			jsr 	AllocateMemory
.277f	85 22		sta $22				sta 	zTemp1 						; save new address in zTemp1
.2781	86 23		stx $23				stx 	zTemp1+1
.2783	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2785	ad 24 06	lda $0624			lda 	VARHash
.2788	91 22		sta ($22),y			sta 	(zTemp1),y
.278a	c8		iny				iny 								; put address of name into +3,+4
.278b	ad 22 06	lda $0622			lda 	VARNameAddress
.278e	91 22		sta ($22),y			sta 	(zTemp1),y
.2790	c8		iny				iny
.2791	ad 23 06	lda $0623			lda 	VARNameAddress+1
.2794	91 22		sta ($22),y			sta 	(zTemp1),y
.2796	ad 25 06	lda $0625			lda 	VARType
.2799	29 01		and #$01			and 	#1
.279b	f0 06		beq $27a3			beq 	_CVNotString
.279d	a0 08		ldy #$08			ldy 	#5+3
.279f	a9 80		lda #$80			lda 	#$80
.27a1	91 22		sta ($22),y			sta 	(zTemp1),y
.27a3					_CVNotString:
.27a3	ad 46 06	lda $0646			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.27a6	85 20		sta $20				sta 	zTemp0
.27a8	ad 47 06	lda $0647			lda 	VARHashEntry+1
.27ab	85 21		sta $21				sta 	zTemp0+1
.27ad	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.27af	b2 20		lda ($20)			lda 	(zTemp0)
.27b1	92 22		sta ($22)			sta 	(zTemp1)
.27b3	b1 20		lda ($20),y			lda 	(zTemp0),y
.27b5	91 22		sta ($22),y			sta 	(zTemp1),y
.27b7	a5 22		lda $22				lda 	zTemp1 						; address of the new record into head
.27b9	92 20		sta ($20)			sta 	(zTemp0)
.27bb	a5 23		lda $23				lda 	zTemp1+1
.27bd	91 20		sta ($20),y			sta 	(zTemp0),y
.27bf	a5 22		lda $22				lda 	zTemp1 						; new record to XA
.27c1	a6 23		ldx $23				ldx 	zTemp1+1
.27c3	18		clc				clc 								; add 5 to point to the data.
.27c4	69 05		adc #$05			adc 	#5
.27c6	90 01		bcc $27c9			bcc 	_VCNoCarry
.27c8	e8		inx				inx
.27c9					_VCNoCarry:
.27c9	7a		ply				ply
.27ca	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.27cb					VARFind:
.27cb	5a		phy				phy
.27cc	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.27ce	b1 20		lda ($20),y			lda 	(zTemp0),y
.27d0	85 23		sta $23				sta 	zTemp1+1
.27d2	f0 1c		beq $27f0			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.27d4	b2 20		lda ($20)			lda 	(zTemp0)
.27d6	85 22		sta $22				sta 	zTemp1
.27d8					_VFLoop:
.27d8	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.27da	b1 22		lda ($22),y			lda 	(zTemp1),y
.27dc	cd 24 06	cmp $0624			cmp 	VARHash
.27df	f0 12		beq $27f3			beq 	_VFHashesMatch 				; if so, check the name.
.27e1					_VFNext:
.27e1	b2 22		lda ($22)			lda 	(zTemp1) 					; next link to AX
.27e3	aa		tax				tax
.27e4	a0 01		ldy #$01			ldy 	#1
.27e6	b1 22		lda ($22),y			lda 	(zTemp1),y
.27e8	85 23		sta $23				sta 	zTemp1+1
.27ea	86 22		stx $22				stx 	zTemp1
.27ec	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.27ee	d0 e8		bne $27d8			bne 	_VFLoop
.27f0					_VFExitFail:
.27f0	7a		ply				ply
.27f1	18		clc				clc
.27f2	60		rts				rts
.27f3					_VFHashesMatch:
.27f3	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.27f5	b1 22		lda ($22),y			lda 	(zTemp1),y
.27f7	85 24		sta $24				sta 	zTemp2
.27f9	c8		iny				iny
.27fa	b1 22		lda ($22),y			lda 	(zTemp1),y
.27fc	85 25		sta $25				sta 	zTemp2+1
.27fe	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2800					_VFNameCompLoop:
.2800	c8		iny				iny 								; char at a time
.2801	b9 26 06	lda $0626,y			lda 	VARBuffer,y
.2804	d1 24		cmp ($24),y			cmp 	(zTemp2),y
.2806	d0 d9		bne $27e1			bne 	_VFNext						; next entry if different.
.2808	c9 7c		cmp #$7c			cmp 	#$7C
.280a	90 f4		bcc $2800			bcc 	_VFNameCompLoop 			; until done the whole lot.
.280c	18		clc				clc
.280d	a5 22		lda $22				lda 	zTemp1
.280f	a6 23		ldx $23				ldx 	zTemp1+1
.2811	69 05		adc #$05			adc 	#5
.2813	90 01		bcc $2816			bcc 	_VFNNoCarry
.2815	e8		inx				inx
.2816					_VFNNoCarry:
.2816	7a		ply				ply
.2817	38		sec				sec
.2818	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2819					VARGetInfo:
.2819	98		tya				tya 								; calculate the address of the identifier start.
.281a	18		clc				clc
.281b	65 1e		adc $1e				adc 	codePtr
.281d	8d 22 06	sta $0622			sta 	VARNameAddress
.2820	a5 1f		lda $1f				lda 	codePtr+1
.2822	69 00		adc #$00			adc 	#0
.2824	8d 23 06	sta $0623			sta 	VARNameAddress+1
.2827	9c 24 06	stz $0624			stz 	VARHash
.282a	a2 00		ldx #$00			ldx 	#0
.282c					_VARCopyName:
.282c	18		clc				clc 								; update the sum hash.
.282d	ad 24 06	lda $0624			lda 	VARHash
.2830	71 1e		adc ($1e),y			adc 	(codePtr),y
.2832	8d 24 06	sta $0624			sta 	VARHash
.2835	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get character and save it in buffer
.2837	c8		iny				iny
.2838	9d 26 06	sta $0626,x			sta 	VARBuffer,x
.283b	e8		inx				inx
.283c	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.283e	90 ec		bcc $282c			bcc 	_VARCopyName
.2840	8d 25 06	sta $0625			sta 	VARType 					; save type byte
.2843	29 03		and #$03			and 	#3 							; type is 0-3
.2845	0a		asl a				asl 	a
.2846	0a		asl a				asl 	a
.2847	85 20		sta $20				sta 	zTemp0
.2849	ad 24 06	lda $0624			lda 	VARHash 					; force into range of hash entries per type.
.284c	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.284e	65 20		adc $20				adc 	zTemp0 						; index of hash table
.2850	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2851	69 48		adc #$48			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2853	85 20		sta $20				sta 	zTemp0
.2855	8d 46 06	sta $0646			sta 	VARHashEntry
.2858	a9 06		lda #$06			lda 	#VARHashTables >> 8
.285a	69 00		adc #$00			adc 	#0
.285c	85 21		sta $21				sta 	zTemp0+1
.285e	8d 47 06	sta $0647			sta 	VARHashEntry+1
.2861	60		rts				rts
.2862					VARClearHashTables:
.2862	a2 00		ldx #$00			ldx 	#0
.2864					_VCHRLoop:
.2864	a9 00		lda #$00			lda 	#0
.2866	9d 48 06	sta $0648,x			sta 	VARHashTables,x
.2869	e8		inx				inx
.286a	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.286c	d0 f6		bne $2864			bne 	_VCHRLoop
.286e	60		rts				rts
.0622					VARNameAddress:
>0622							.fill 	2
.0624					VARHash:
>0624							.fill 	1
.0625					VARType:
>0625							.fill 	1
.0626					VARBuffer:
>0626							.fill 	32
.0646					VARHashEntry:
>0646							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0648					VARHashTables:
>0648							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.286f					VARCheckSimple:
.286f	aa		tax				tax 								; save in X
.2870	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2872	c9 7c		cmp #$7c			cmp 	#$7C
.2874	d0 15		bne $288b			bne 	_VCSComplex
.2876	c8		iny				iny 								; consume the second byte, the type.
.2877	8a		txa				txa  								; character (40-7F) x 4
.2878	0a		asl a				asl 	a
.2879	0a		asl a				asl  	a
.287a	18		clc				clc
.287b	69 68		adc #$68			adc 	#FastVariables & $FF
.287d	85 0e		sta $0e				sta 	IFR0+IM0
.287f	a9 06		lda #$06			lda 	#FastVariables >> 8
.2881	69 00		adc #$00			adc 	#0
.2883	85 0f		sta $0f				sta 	IFR0+IM1
.2885	64 10		stz $10				stz 	IFR0+IM2
.2887	64 11		stz $11				stz 	IFR0+IExp
.2889	38		sec				sec 								; it's a reference
.288a	60		rts				rts
.288b					_VCSComplex:
.288b	88		dey				dey	 								; extract information.
.288c	20 19 28	jsr $2819			jsr 	VARGetInfo
.288f	20 cb 27	jsr $27cb			jsr 	VARFind 					; search for variable
.2892	b0 0a		bcs $289e			bcs 	_VCSHaveVariable
.2894	ad 25 06	lda $0625			lda 	VARType 					; error if arrays, cannot autocreate
.2897	29 02		and #$02			and 	#2
.2899	d0 25		bne $28c0			bne 	_VCNoCreate
.289b	20 77 27	jsr $2777			jsr 	VARCreate 					; create variable
.289e					_VCSHaveVariable:
.289e	48		pha				pha 								; save LSB on the stack
.289f	ad 25 06	lda $0625			lda 	VARType 					; get var type, and shift bit 1 into carry
.28a2	6a		ror a				ror 	a
.28a3	6a		ror a				ror 	a
.28a4	68		pla				pla 								; restore LSB
.28a5	90 08		bcc $28af			bcc 	_VCSNotArray 				; skip if not an array
.28a7	20 0f 27	jsr $270f			jsr 	VARArrayLookup 				; look for subscripts.
.28aa	48		pha				pha 								; check )
.28ab	20 30 25	jsr $2530			jsr 	ERRCheckRParen
.28ae	68		pla				pla
.28af					_VCSNotArray:
.28af	86 0f		stx $0f				stx 	IFR0+IM1 					; save address
.28b1	85 0e		sta $0e				sta 	IFR0+IM0
.28b3	64 10		stz $10				stz 	IFR0+IM2 					; clear the unused byte.
.28b5	ad 25 06	lda $0625			lda 	VARType 					; number/string bit into carry
.28b8	6a		ror a				ror 	a
.28b9	a9 00		lda #$00			lda 	#0
.28bb	6a		ror a				ror 	a 							; now $00 or $80
.28bc	85 11		sta $11				sta 	IFR0+IExp
.28be	38		sec				sec 								; it's a reference
.28bf	60		rts				rts
.28c0					_VCNoCreate:
.28c0	4c 95 24	jmp $2495		jmp	ErrorV_uninitialised
.0668					FastVariables:
>0668							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.28c3					IFInitialise:
.28c3	9c d8 06	stz $06d8			stz 	IFStackIndex
.28c6	60		rts				rts
.28c7					IFloatSubtract:
.28c7	da		phx				phx
.28c8	a2 0e		ldx #$0e			ldx 	#IFR0
.28ca	20 e3 2e	jsr $2ee3			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.28cd	fa		plx				plx
.28ce					IFloatAdd:
.28ce	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.28d0	05 11		ora $11				ora 	IFR0+IExp
.28d2	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.28d4	d0 4e		bne $2924			bne 	_IFloatAddDecimals 			; decimal version.
.28d6					_IFAddSubMantissa:
.28d6	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.28d8	45 11		eor $11				eor 	IFR0+IExp
.28da	29 40		and #$40			and 	#IFSign
.28dc	d0 21		bne $28ff			bne 	_IFloatSubMantissa
.28de	18		clc				clc 								; do the actual addition
.28df	a5 0e		lda $0e			lda 	IFR0+IM0
.28e1	75 00		adc $00,x		adc 		IM0,x
.28e3	85 0e		sta $0e			sta 	IFR0+IM0
.28e5	a5 0f		lda $0f			lda 	IFR0+IM1
.28e7	75 01		adc $01,x		adc 		IM1,x
.28e9	85 0f		sta $0f			sta 	IFR0+IM1
.28eb	a5 10		lda $10			lda 	IFR0+IM2
.28ed	75 02		adc $02,x		adc 		IM2,x
.28ef	85 10		sta $10			sta 	IFR0+IM2
.28f1	10 29		bpl $291c			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.28f3	a2 0e		ldx #$0e			ldx 	#IFR0						; shift R0 right, divide by 2
.28f5	20 07 2f	jsr $2f07			jsr 	IFloatShiftRight
.28f8	20 31 2f	jsr $2f31			jsr 	IFloatIncExponent
.28fb	d0 1f		bne $291c			bne 	_IFloatAddExit
.28fd	38		sec				sec 								; overflowed numerically.
.28fe	60		rts				rts
.28ff					_IFloatSubMantissa:
.28ff	38		sec				sec 								; do the subtraction R0-Rx
.2900	a5 0e		lda $0e			lda 	IFR0+IM0
.2902	f5 00		sbc $00,x		sbc 		IM0,x
.2904	85 0e		sta $0e			sta 	IFR0+IM0
.2906	a5 0f		lda $0f			lda 	IFR0+IM1
.2908	f5 01		sbc $01,x		sbc 		IM1,x
.290a	85 0f		sta $0f			sta 	IFR0+IM1
.290c	a5 10		lda $10			lda 	IFR0+IM2
.290e	f5 02		sbc $02,x		sbc 		IM2,x
.2910	85 10		sta $10			sta 	IFR0+IM2
.2912	b0 08		bcs $291c			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2914	a2 0e		ldx #$0e			ldx 	#IFR0
.2916	20 eb 2e	jsr $2eeb			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2919	20 e3 2e	jsr $2ee3			jsr 	IFloatNegate 				; negate
.291c					_IFloatAddExit:
.291c	18		clc				clc
.291d	60		rts				rts
.291e					_IFloatZeroAdd:
.291e	fa		plx				plx 								; return this value in R0
.291f	20 69 2e	jsr $2e69			jsr 	IFloatCopyFromRegister
.2922	18		clc				clc
.2923	60		rts				rts
.2924					_IFloatAddDecimals:
.2924	20 d1 2e	jsr $2ed1			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2927	f0 f3		beq $291c			beq 	_IFloatAddExit
.2929	20 0f 2f	jsr $2f0f			jsr 	IFloatNormalise 			; normalise RX
.292c	da		phx				phx 								; normalise R0
.292d	a2 0e		ldx #$0e			ldx 	#IFR0
.292f	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero
.2932	f0 ea		beq $291e			beq 	_IFloatZeroAdd
.2934	20 0f 2f	jsr $2f0f			jsr 	IFloatNormalise
.2937	fa		plx				plx
.2938	a5 11		lda $11				lda 	IFR0+IExp 					; get the exponent of R0
.293a	29 3f		and #$3f			and 	#IFXMask
.293c	38		sec				sec
.293d	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.293f	85 0c		sta $0c				sta 	iTemp0
.2941	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2943	29 3f		and #$3f			and 	#IFXMask
.2945	38		sec				sec
.2946	e9 20		sbc #$20			sbc 	#$20
.2948	c5 0c		cmp $0c				cmp 	iTemp0 						; get the larger adjusted
.294a	b0 02		bcs $294e			bcs 	_IFloatHaveLarger
.294c	a5 0c		lda $0c				lda 	iTemp0
.294e					_IFloatHaveLarger:
.294e	18		clc				clc 								; get the actual one back.
.294f	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2951	20 5e 29	jsr $295e			jsr 	_IFShiftXToA
.2954	da		phx				phx
.2955	a2 0e		ldx #$0e			ldx 	#IFR0
.2957	20 5e 29	jsr $295e			jsr 	_IFShiftXToA
.295a	fa		plx				plx
.295b	4c d6 28	jmp $28d6			jmp 	_IFAddSubMantissa 			; do the adding bit.
.295e					_IFShiftXToA:
.295e	8d d0 06	sta $06d0			sta 	IFTarget
.2961	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero 			; check adding zero ?
.2964	f0 11		beq $2977			beq 	_IFSXExit
.2966					_IFSXLoop:
.2966	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2968	29 3f		and #$3f			and 	#IFXMask
.296a	cd d0 06	cmp $06d0			cmp 	IFTarget
.296d	f0 08		beq $2977			beq 	_IFSXExit
.296f	20 07 2f	jsr $2f07			jsr 	IFloatShiftRight
.2972	20 31 2f	jsr $2f31			jsr 	IFloatIncExponent
.2975	80 ef		bra $2966			bra 	_IFSXLoop
.2977					_IFSXExit:
.2977	60		rts				rts
.06d0					IFTarget:
>06d0							.fill 	1
.2978					IFloatMultiply:
.2978	8e d0 06	stx $06d0			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.297b	20 33 2a	jsr $2a33			jsr 	IFCalculateNewSign
.297e	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2980	05 11		ora $11				ora 	IFR0+IExp
.2982	29 3f		and #$3f			and 	#IFXMask
.2984	15 01		ora $01,x			ora 	IM1,x
.2986	05 0f		ora $0f				ora 	IFR0+IM1
.2988	15 02		ora $02,x			ora 	IM2,x
.298a	05 10		ora $10				ora 	IFR0+IM2
.298c	d0 0a		bne $2998			bne 	_IFMStandard
.298e	20 b4 2e	jsr $2eb4			jsr 	IFloatMultiply8BitRx
.2991	ad d2 06	lda $06d2			lda 	IFNewSign
.2994	85 11		sta $11				sta 	IFR0+IExp
.2996	18		clc				clc
.2997	60		rts				rts
.2998					_IFMStandard:
.2998	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.299a	20 2a 2a	jsr $2a2a			jsr 	IFMSignExtend
.299d	8d d1 06	sta $06d1			sta 	IFNewExponent
.29a0	a5 11		lda $11				lda 	IFR0+IExp
.29a2	20 2a 2a	jsr $2a2a			jsr 	IFMSignExtend
.29a5	18		clc				clc
.29a6	6d d1 06	adc $06d1			adc 	IFNewExponent
.29a9	8d d1 06	sta $06d1			sta 	IFNewExponent
.29ac	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.29ae	20 7a 2e	jsr $2e7a			jsr 	IFloatCopyToRegister
.29b1	a2 0e		ldx #$0e			ldx 	#IFR0 						; zero R0 (the result)
.29b3	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.29b6					_IFMLoop:
.29b6	a2 1a		ldx #$1a			ldx 	#IFRTemp
.29b8	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero
.29bb	f0 3a		beq $29f7			beq 	_IFMExit
.29bd	ae d0 06	ldx $06d0			ldx 	IFTarget 					; look at adder MSB
.29c0	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.29c2	10 03		bpl $29c7			bpl	 	_IFMTargetOkay
.29c4	20 1b 2a	jsr $2a1b			jsr 	_IFMShiftAll
.29c7					_IFMTargetOkay:
.29c7	a5 1a		lda $1a				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.29c9	29 01		and #$01			and 	#1
.29cb	f0 16		beq $29e3			beq 	_IFMNoAdd
.29cd	ae d0 06	ldx $06d0			ldx 	IFTarget 					; add adder
.29d0	18		clc				clc
.29d1	a5 0e		lda $0e			lda 	IFR0+IM0
.29d3	75 00		adc $00,x		adc 		IM0,x
.29d5	85 0e		sta $0e			sta 	IFR0+IM0
.29d7	a5 0f		lda $0f			lda 	IFR0+IM1
.29d9	75 01		adc $01,x		adc 		IM1,x
.29db	85 0f		sta $0f			sta 	IFR0+IM1
.29dd	a5 10		lda $10			lda 	IFR0+IM2
.29df	75 02		adc $02,x		adc 		IM2,x
.29e1	85 10		sta $10			sta 	IFR0+IM2
.29e3					_IFMNoAdd:
.29e3	a5 10		lda $10				lda 	IFR0+IM2
.29e5	10 03		bpl $29ea			bpl 	_IFMResultOkay
.29e7	20 1b 2a	jsr $2a1b			jsr 	_IFMShiftAll
.29ea					_IFMResultOkay:
.29ea	a2 1a		ldx #$1a			ldx 	#IFRTemp
.29ec	20 07 2f	jsr $2f07			jsr 	IFloatShiftRight
.29ef	ae d0 06	ldx $06d0			ldx 	IFTarget
.29f2	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.29f5	80 bf		bra $29b6			bra 	_IFMLoop
.29f7					_IFMExit:
.29f7	ad d1 06	lda $06d1			lda 	IFNewExponent 				; validate new exponent.
.29fa	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.29fc	90 0f		bcc $2a0d			bcc 	_IFMOkay
.29fe	c9 e0		cmp #$e0			cmp 	#$E0
.2a00	b0 0b		bcs $2a0d			bcs 	_IFMOkay
.2a02	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2a04	f0 13		beq $2a19			beq 	_IFMError
.2a06	a2 0e		ldx #$0e			ldx 	#IFR0 						; return zero underflow
.2a08	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.2a0b	18		clc				clc
.2a0c	60		rts				rts
.2a0d					_IFMOkay:
.2a0d	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2a0f	0d d2 06	ora $06d2			ora 	IFNewSign
.2a12	85 11		sta $11				sta 	IFR0+IExp
.2a14	18		clc				clc
.2a15	60		rts				rts
.2a16	4c ff ff	jmp $ffff			jmp 	$FFFF
.2a19					_IFMError:
.2a19	38		sec				sec
.2a1a	60		rts				rts
.2a1b					_IFMShiftAll:
.2a1b	a2 0e		ldx #$0e			ldx 	#IFR0
.2a1d	20 07 2f	jsr $2f07			jsr 	IFloatShiftRight
.2a20	ae d0 06	ldx $06d0			ldx 	IFTarget
.2a23	20 07 2f	jsr $2f07			jsr 	IFloatShiftRight
.2a26	ee d1 06	inc $06d1			inc 	IFNewExponent
.2a29	60		rts				rts
.2a2a					IFMSignExtend:
.2a2a	29 3f		and #$3f			and 	#IFXMask
.2a2c	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2a2e	90 02		bcc $2a32			bcc 	_IFMNoSXX
.2a30	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2a32					_IFMNoSXX:
.2a32	60		rts				rts
.2a33					IFCalculateNewSign:
.2a33	b5 03		lda $03,x			lda 	IExp,x
.2a35	45 11		eor $11				eor 	IFR0+IExp
.2a37	29 40		and #$40			and 	#IFSign
.2a39	8d d2 06	sta $06d2			sta 	IFNewSign
.2a3c	60		rts				rts
.06d1					IFNewExponent:
>06d1							.fill 	1
.06d2					IFNewSign:
>06d2							.fill 	1
.2a3d					IFloatDivideInteger:
.2a3d	20 56 2a	jsr $2a56			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2a40	b0 06		bcs $2a48			bcs 	_IFDIExit
.2a42	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy result from register.
.2a44	20 69 2e	jsr $2e69			jsr 	IFloatCopyFromRegister
.2a47	18		clc				clc
.2a48					_IFDIExit:
.2a48	60		rts				rts
.2a49					IFloatModulusInteger:
.2a49	20 56 2a	jsr $2a56			jsr 	IFloatDivideIntegerCommon
.2a4c	b0 07		bcs $2a55			bcs 	_IFMIExit
.2a4e	ae d0 06	ldx $06d0			ldx 	IFTarget
.2a51	20 69 2e	jsr $2e69			jsr 	IFloatCopyFromRegister
.2a54	18		clc				clc
.2a55					_IFMIExit:
.2a55	60		rts				rts
.2a56					IFloatDivideIntegerCommon:
.2a56	8e d0 06	stx $06d0			stx 	IFTarget  					; this is s1, s0 = R0
.2a59	20 33 2a	jsr $2a33			jsr 	IFCalculateNewSign 			; calculate sign of result
.2a5c	20 84 2a	jsr $2a84			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2a5f	a2 0e		ldx #$0e			ldx 	#IFR0 						; check divide by zero
.2a61	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero
.2a64	f0 1c		beq $2a82			beq 	_IFDIDivZero
.2a66	ae d0 06	ldx $06d0			ldx 	IFTarget 					; zero Rx (S1)
.2a69	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.2a6c	5a		phy				phy
.2a6d	a0 18		ldy #$18			ldy 	#24
.2a6f					_IFDILoop:
.2a6f	20 95 2a	jsr $2a95			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2a72	20 a1 2a	jsr $2aa1			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2a75	88		dey				dey
.2a76	d0 f7		bne $2a6f			bne 	_IFDILoop 					; do it 24 times
.2a78	7a		ply				ply
.2a79	ad d2 06	lda $06d2			lda 	IFNewSign 					; set sign of result.
.2a7c	29 40		and #$40			and 	#IFSign
.2a7e	85 1d		sta $1d				sta 	IFRTemp+IExp
.2a80	18		clc				clc 								; is okay.
.2a81	60		rts				rts
.2a82					_IFDIDivZero:
.2a82	38		sec				sec
.2a83	60		rts				rts
.2a84					IFDCopyRXToRTemp:
.2a84	b5 00		lda $00,x			lda 	IM0,x
.2a86	85 1a		sta $1a				sta 	IFRTemp+IM0
.2a88	b5 01		lda $01,x			lda 	IM1,x
.2a8a	85 1b		sta $1b				sta 	IFRTemp+IM1
.2a8c	b5 02		lda $02,x			lda 	IM2,x
.2a8e	85 1c		sta $1c				sta 	IFRTemp+IM2
.2a90	b5 03		lda $03,x			lda 	IExp,x
.2a92	85 1d		sta $1d				sta 	IFRTemp+IExp
.2a94	60		rts				rts
.2a95					IFDShiftSTempS1Left:
.2a95	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2a97	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft
.2a9a	ae d0 06	ldx $06d0			ldx 	IFTarget
.2a9d	20 00 2f	jsr $2f00			jsr 	IFloatRotateLeft
.2aa0	60		rts				rts
.2aa1					IFDTrySubtract:
.2aa1	ae d0 06	ldx $06d0			ldx 	IFTarget 					; s1 = Rx
.2aa4	38		sec				sec 								; subtract, saving the results on the stack.
.2aa5	b5 00		lda $00,x			lda 	IM0,x
.2aa7	e5 0e		sbc $0e				sbc 	IFR0+IM0
.2aa9	48		pha				pha
.2aaa	b5 01		lda $01,x			lda 	IM1,x
.2aac	e5 0f		sbc $0f				sbc 	IFR0+IM1
.2aae	48		pha				pha
.2aaf	b5 02		lda $02,x			lda 	IM2,x
.2ab1	e5 10		sbc $10				sbc 	IFR0+IM2
.2ab3	b0 03		bcs $2ab8			bcs 	_IFDCanSubtract
.2ab5	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2ab6	68		pla				pla
.2ab7	60		rts				rts
.2ab8					_IFDCanSubtract:
.2ab8	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2aba	68		pla				pla
.2abb	95 01		sta $01,x			sta 	IM1,x
.2abd	68		pla				pla
.2abe	95 00		sta $00,x			sta 	IM0,x
.2ac0	e6 1a		inc $1a				inc 	IFRTemp+IM0 				; increment temp
.2ac2	d0 06		bne $2aca			bne 	_IFDCSExit
.2ac4	e6 1b		inc $1b				inc 	IFRTemp+IM1
.2ac6	d0 02		bne $2aca			bne 	_IFDCSExit
.2ac8	e6 1c		inc $1c				inc 	IFRTemp+IM2
.2aca					_IFDCSExit:
.2aca	60		rts				rts
.2acb					IFloatBitwiseAnd:
.2acb	5a		phy				phy
.2acc	20 10 2b	jsr $2b10			jsr 	IFPreProcessBitwise 		; set up everything.
.2acf	d0 0f		bne $2ae0			bne 	_IFBAExit
.2ad1					_IFBALoop:
.2ad1	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2ad4	35 00		and $00,x			and 	IM0,x
.2ad6	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2ad9	e8		inx				inx
.2ada	c8		iny				iny
.2adb	c0 03		cpy #$03			cpy 	#3
.2add	d0 f2		bne $2ad1			bne 	_IFBALoop
.2adf	18		clc				clc
.2ae0					_IFBAExit:
.2ae0	7a		ply				ply
.2ae1	60		rts				rts
.2ae2					IFloatBitwiseOr:
.2ae2	5a		phy				phy
.2ae3	20 10 2b	jsr $2b10			jsr 	IFPreProcessBitwise 		; set up everything.
.2ae6	d0 0f		bne $2af7			bne 	_IFBAExit
.2ae8					_IFBALoop:
.2ae8	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2aeb	15 00		ora $00,x			ora 	IM0,x
.2aed	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2af0	e8		inx				inx
.2af1	c8		iny				iny
.2af2	c0 03		cpy #$03			cpy 	#3
.2af4	d0 f2		bne $2ae8			bne 	_IFBALoop
.2af6	18		clc				clc
.2af7					_IFBAExit:
.2af7	7a		ply				ply
.2af8	60		rts				rts
.2af9					IFloatBitwiseXor:
.2af9	5a		phy				phy
.2afa	20 10 2b	jsr $2b10			jsr 	IFPreProcessBitwise 		; set up everything.
.2afd	d0 0f		bne $2b0e			bne 	_IFBAExit
.2aff					_IFBALoop:
.2aff	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2b02	55 00		eor $00,x			eor 	IM0,x
.2b04	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2b07	e8		inx				inx
.2b08	c8		iny				iny
.2b09	c0 03		cpy #$03			cpy 	#3
.2b0b	d0 f2		bne $2aff			bne 	_IFBALoop
.2b0d	18		clc				clc
.2b0e					_IFBAExit:
.2b0e	7a		ply				ply
.2b0f	60		rts				rts
.2b10					IFPreProcessBitwise:
.2b10	a0 00		ldy #$00			ldy 	#0 							; set index.
.2b12	a5 11		lda $11				lda 	IFR0+IExp 					; OR exponents
.2b14	15 03		ora $03,x			ora 	IExp,x
.2b16	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2b18	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2b1a	38		sec				sec 								; carry set just in cases.
.2b1b	60		rts				rts
.2b1c					IFloatAbsoluteR0:
.2b1c	a5 11		lda $11				lda 	IFR0+IExp					; reset the sign bit.
.2b1e	29 bf		and #$bf			and 	#IFSign ^ 255
.2b20	85 11		sta $11				sta 	IFR0+IExp
.2b22	18		clc				clc
.2b23	60		rts				rts
.2b24					IFloatSquareRootR0:
.2b24	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, return zero.
.2b26	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero
.2b29	a5 11		lda $11				lda	 	IFR0+IExp 					; if negative fail.
.2b2b	29 40		and #$40			and 	#IFSign
.2b2d	d0 2f		bne $2b5e			bne 	_IFSRFail
.2b2f	20 0f 2f	jsr $2f0f			jsr 	IFloatNormalise 			; it will work better !
.2b32	a2 12		ldx #$12			ldx 	#IFR1 						; R1 contains original throughout
.2b34	20 7a 2e	jsr $2e7a			jsr 	IFloatCopyToRegister
.2b37	a5 11		lda $11				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2b39	20 2a 2a	jsr $2a2a			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2b3c	18		clc				clc
.2b3d	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2b3f	85 11		sta $11				sta 	IFR0+IExp
.2b41	4a		lsr a				lsr 	a 							; which we can halve.
.2b42	38		sec				sec 								; convert back
.2b43	e9 17		sbc #$17			sbc 	#23
.2b45	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2b47	85 11		sta $11				sta 	IFR0+IExp 					; to R0
.2b49	20 60 2b	jsr $2b60			jsr 	_IFSRNewton
.2b4c	20 60 2b	jsr $2b60			jsr 	_IFSRNewton
.2b4f	20 60 2b	jsr $2b60			jsr 	_IFSRNewton
.2b52	20 60 2b	jsr $2b60			jsr 	_IFSRNewton
.2b55	18		clc				clc
.2b56	60		rts				rts
.2b57					_IFSRZero:
.2b57	a2 0e		ldx #$0e			ldx 	#IFR0
.2b59	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.2b5c	18		clc				clc
.2b5d	60		rts				rts
.2b5e					_IFSRFail:
.2b5e	38		sec				sec
.2b5f	60		rts				rts
.2b60					_IFSRNewton:
.2b60	a2 12		ldx #$12			ldx 	#IFR1 						; push original value (R3) on the stack
.2b62	20 27 2e	jsr $2e27			jsr 	IFloatPushRx
.2b65	a2 0e		ldx #$0e			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2b67	20 27 2e	jsr $2e27			jsr 	IFloatPushRx
.2b6a	a2 12		ldx #$12			ldx 	#IFR1 						; guess = original / guess
.2b6c	20 fb 2b	jsr $2bfb			jsr 	IFloatDivideFloat
.2b6f	a2 12		ldx #$12			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2b71	20 48 2e	jsr $2e48			jsr 	IFloatPullRx
.2b74	20 ce 28	jsr $28ce			jsr 	IFloatAdd 					; now guess + original/guess
.2b77	a2 0e		ldx #$0e			ldx 	#IFR0 						; divide by 2
.2b79	20 07 2f	jsr $2f07			jsr 	IFloatShiftRight
.2b7c	a2 12		ldx #$12			ldx 	#IFR1
.2b7e	20 48 2e	jsr $2e48			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2b81	60		rts				rts
.2b82					IFloatFractionalR0:
.2b82	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2b84	29 3f		and #$3f			and 	#IFXMask
.2b86	f0 17		beq $2b9f			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2b88	20 1c 2b	jsr $2b1c			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2b8b	a2 0e		ldx #$0e			ldx 	#IFR0
.2b8d	20 0f 2f	jsr $2f0f			jsr 	IFloatNormalise 			; normalise R0
.2b90	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy to RTemp
.2b92	20 7a 2e	jsr $2e7a			jsr 	IFloatCopyToRegister
.2b95	20 d8 2b	jsr $2bd8			jsr 	IFloatIntegerR0 			; take integer part of R0
.2b98	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; subtract
.2b9a	20 c7 28	jsr $28c7			jsr 	IFloatSubtract
.2b9d	80 05		bra $2ba4			bra 	_FIPExit
.2b9f					_FIPZero:
.2b9f	a2 0e		ldx #$0e			ldx 	#IFR0
.2ba1	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.2ba4					_FIPExit:
.2ba4	18		clc				clc
.2ba5	60		rts				rts
.2ba6					IFloatCompare:
.2ba6	20 c7 28	jsr $28c7			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2ba9	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2bab	05 11		ora $11				ora 	IFR0+IExp
.2bad	a2 0e		ldx #$0e			ldx 	#IFR0 						; only using R0 from now on.
.2baf	29 3f		and #$3f			and 	#IFXMask
.2bb1	d0 19		bne $2bcc			bne 	_IFCNonInteger
.2bb3	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero 			; check if zero
.2bb6	f0 0f		beq $2bc7			beq 	_IFCZero
.2bb8					_IFCReturnSign:
.2bb8	a5 11		lda $11				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2bba	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2bbc	48		pha				pha
.2bbd	a9 01		lda #$01			lda 	#1
.2bbf	20 da 2e	jsr $2eda			jsr 	IFloatSetByte 				; return to +1
.2bc2	68		pla				pla 								; sign bit back
.2bc3	85 11		sta $11				sta 	IFR0+IExp					; set that sign
.2bc5	18		clc				clc
.2bc6	60		rts				rts
.2bc7					_IFCZero:
.2bc7	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.2bca	18		clc				clc
.2bcb	60		rts				rts
.2bcc					_IFCNonInteger:
.2bcc	a5 0e		lda $0e				lda 	IFR0+IM0
.2bce	29 00		and #$00			and		#$00
.2bd0	05 0f		ora $0f				ora 	IFR0+IM1
.2bd2	05 10		ora $10				ora 	IFR0+IM2
.2bd4	f0 f1		beq $2bc7			beq 	_IFCZero 					; near enough !
.2bd6	80 e0		bra $2bb8			bra 	_IFCReturnSign 				; return the sign of the difference.
.2bd8					IFloatIntegerR0:
.2bd8	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2bda	29 3f		and #$3f			and 	#IFXMask
.2bdc	f0 1b		beq $2bf9			beq 	_FIPExit 					; if so do nothing
.2bde	a2 0e		ldx #$0e			ldx 	#IFR0
.2be0	20 0f 2f	jsr $2f0f			jsr 	IFloatNormalise 			; normalise
.2be3	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero 			; is it zero ?
.2be6	f0 0e		beq $2bf6			beq 	_FIPZero 					; if so return zero.
.2be8					_FIPShift:
.2be8	a5 11		lda $11				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2bea	29 20		and #$20			and 	#$20 						; still -ve
.2bec	f0 0b		beq $2bf9			beq 	_FIPExit
.2bee	20 07 2f	jsr $2f07			jsr 	IFloatShiftRight 			; shift mantissa right
.2bf1	20 31 2f	jsr $2f31			jsr 	IFloatIncExponent 			; bump exponent
.2bf4	80 f2		bra $2be8			bra 	_FIPShift
.2bf6					_FIPZero:
.2bf6	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.2bf9					_FIPExit:
.2bf9	18		clc				clc
.2bfa	60		rts				rts
.2bfb					IFloatDivideFloat:
.2bfb	8e d0 06	stx $06d0			stx 	IFTarget  					; this is s1, s0 = R0
.2bfe	20 33 2a	jsr $2a33			jsr 	IFCalculateNewSign 			; calculate sign of result
.2c01	20 0f 2f	jsr $2f0f			jsr 	IFloatNormalise 			; normalise RX
.2c04	a2 0e		ldx #$0e			ldx 	#IFR0 						; normalise R0
.2c06	20 0f 2f	jsr $2f0f			jsr 	IFloatNormalise
.2c09	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero
.2c0c	f0 56		beq $2c64			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2c0e	a5 11		lda $11				lda 	IFR0+IExp 					; calculate s0.exponent
.2c10	20 2a 2a	jsr $2a2a			jsr 	IFMSignExtend
.2c13	8d d1 06	sta $06d1			sta 	IFNewExponent
.2c16	ae d0 06	ldx $06d0			ldx 	IFTarget 					; calculate s1.exponent
.2c19	b5 03		lda $03,x			lda 	IExp,x
.2c1b	20 2a 2a	jsr $2a2a			jsr 	IFMSignExtend
.2c1e	38		sec				sec
.2c1f	ed d1 06	sbc $06d1			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2c22	38		sec				sec
.2c23	e9 17		sbc #$17			sbc 	#23
.2c25	8d d1 06	sta $06d1			sta 	IFNewExponent
.2c28	20 66 2c	jsr $2c66			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2c2b	a5 1c		lda $1c				lda 	IFRTemp+IM2 				; result has overflowed ?
.2c2d	10 08		bpl $2c37			bpl 	_IFDFNoShiftResult
.2c2f	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; if so, fix it up.
.2c31	20 07 2f	jsr $2f07			jsr 	IFloatShiftRight
.2c34	ee d1 06	inc $06d1			inc 	IFNewExponent
.2c37					_IFDFNoShiftResult:
.2c37	ad d1 06	lda $06d1			lda 	IFNewExponent 				; underflow/overflow check.
.2c3a	30 06		bmi $2c42			bmi 	_IFDFCheckUnderflow
.2c3c	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2c3e	b0 24		bcs $2c64			bcs 	_IFDFDivZero
.2c40	80 11		bra $2c53			bra		_IFDFExit
.2c42					_IFDFCheckUnderflow:
.2c42	ad d1 06	lda $06d1			lda 	IFNewExponent 				; shift into a legal exponent.
.2c45	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2c47	b0 0a		bcs $2c53			bcs 	_IFDFExit
.2c49	ee d1 06	inc $06d1			inc 	IFNewExponent
.2c4c	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2c4e	20 07 2f	jsr $2f07			jsr 	IFloatShiftRight
.2c51	80 ef		bra $2c42			bra 	_IFDFCheckUnderflow
.2c53					_IFDFExit:
.2c53	ad d1 06	lda $06d1			lda 	IFNewExponent 				; combine exponent and sign.
.2c56	29 3f		and #$3f			and 	#IFXMask
.2c58	0d d2 06	ora $06d2			ora 	IFNewSign
.2c5b	85 1d		sta $1d				sta 	IFRTemp+IExp
.2c5d	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy RTemp to R0.
.2c5f	20 69 2e	jsr $2e69			jsr 	IFloatCopyFromRegister
.2c62	18		clc				clc
.2c63	60		rts				rts
.2c64					_IFDFDivZero:
.2c64	38		sec				sec
.2c65	60		rts				rts
.2c66					IFloatDivideSupport:
.2c66	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; zero RTemp
.2c68	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.2c6b	5a		phy				phy 								; main division loop x 23
.2c6c	a0 17		ldy #$17			ldy 	#23
.2c6e					_IFDSLoop:
.2c6e	20 a1 2a	jsr $2aa1			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2c71	20 95 2a	jsr $2a95			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2c74	88		dey				dey
.2c75	d0 f7		bne $2c6e			bne 	_IFDSLoop 					; do it 24 times
.2c77	7a		ply				ply
.2c78	60		rts				rts
.2c79					IFloatIntegerToStringR0:
.2c79	8d d3 06	sta $06d3			sta 	IFBase 						; save base to use.
.2c7c	20 59 2f	jsr $2f59			jsr 	IFloatBufferReset			; empty buffer
.2c7f	a5 11		lda $11				lda 	IFR0+IExp					; check integer
.2c81	29 3f		and #$3f			and 	#IFXMask
.2c83	d0 1e		bne $2ca3			bne 	_IFIFail
.2c85	a2 0e		ldx #$0e			ldx 	#IFR0 						; skip - check if zero.
.2c87	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero
.2c8a	f0 0e		beq $2c9a			beq 	_IFINotNegative
.2c8c	a5 11		lda $11				lda 	IFR0+IExp 					; is signed ?
.2c8e	29 40		and #$40			and 	#IFSign
.2c90	f0 08		beq $2c9a			beq 	_IFINotNegative
.2c92	a9 2d		lda #$2d			lda 	#"-"						; output -
.2c94	20 68 2f	jsr $2f68			jsr 	IFloatBufferWrite
.2c97	20 e3 2e	jsr $2ee3			jsr 	IFloatNegate 				; tidy up !
.2c9a					_IFINotNegative:
.2c9a	20 a5 2c	jsr $2ca5			jsr 	_IFIRecursiveConvert 		; start converting
.2c9d	20 60 2f	jsr $2f60			jsr 	IFloatGetBufferAddress
.2ca0	18		clc				clc
.2ca1	80 01		bra $2ca4			bra 	_IFIExit
.2ca3					_IFIFail:
.2ca3	38		sec				sec
.2ca4					_IFIExit:
.2ca4	60		rts				rts
.2ca5					_IFIRecursiveConvert:
.2ca5	a2 12		ldx #$12			ldx 	#IFR1
.2ca7	20 7a 2e	jsr $2e7a			jsr 	IFloatCopyToRegister 		; R0->R1
.2caa	a2 0e		ldx #$0e			ldx 	#IFR0
.2cac	ad d3 06	lda $06d3			lda 	IFBase 						; Base -> R0
.2caf	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.2cb2	a2 12		ldx #$12			ldx 	#IFR1 						; R0 = R1 / R0
.2cb4	20 3d 2a	jsr $2a3d			jsr 	IFloatDivideInteger
.2cb7	a2 0e		ldx #$0e			ldx 	#IFR0 						; if result <> 0
.2cb9	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero
.2cbc	f0 09		beq $2cc7			beq 	_IFIOutDigit
.2cbe	a5 12		lda $12				lda 	IFR1+IM0 					; save remainder
.2cc0	48		pha				pha
.2cc1	20 a5 2c	jsr $2ca5			jsr 	_IFIRecursiveConvert 		; convert the divider
.2cc4	68		pla				pla
.2cc5	85 12		sta $12				sta 	IFR1+IM0 					; restore remainder
.2cc7					_IFIOutDigit:
.2cc7	a5 12		lda $12				lda 	IFR1+IM0 					; get remainder.
.2cc9	c9 0a		cmp #$0a			cmp	 	#10
.2ccb	90 02		bcc $2ccf			bcc 	_IFINotHex
.2ccd	69 06		adc #$06			adc 	#6
.2ccf					_IFINotHex:
.2ccf	69 30		adc #$30			adc 	#48
.2cd1	20 68 2f	jsr $2f68			jsr 	IFloatBufferWrite
.2cd4	60		rts				rts
.06d3					IFBase:
>06d3							.fill 	1
.2cd5					IFloatFloatToStringR0:
.2cd5	a2 16		ldx #$16			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2cd7	20 27 2e	jsr $2e27			jsr 	IFloatPushRx
.2cda	20 7a 2e	jsr $2e7a			jsr 	IFloatCopyToRegister
.2cdd	20 d8 2b	jsr $2bd8			jsr 	IFloatIntegerR0				; make R0 integer
.2ce0	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2ce2	20 79 2c	jsr $2c79			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2ce5	9c d4 06	stz $06d4			stz 	IFloatDecimalCount 			; zero the decimal count.
.2ce8	a5 19		lda $19				lda 	IFR2+IExp 					; is integer.
.2cea	29 3f		and #$3f			and 	#IFXMask
.2cec	f0 44		beq $2d32			beq 	_IFFSExit
.2cee					_IFloatFracLoop:
.2cee	a2 16		ldx #$16			ldx 	#IFR2 						; R0 = fractional part of R2
.2cf0	20 69 2e	jsr $2e69			jsr 	IFloatCopyFromRegister
.2cf3	20 82 2b	jsr $2b82			jsr 	IFloatFractionalR0
.2cf6	20 0f 2f	jsr $2f0f			jsr 	IFloatNormalise
.2cf9	a2 16		ldx #$16			ldx 	#IFR2
.2cfb	20 7a 2e	jsr $2e7a			jsr 	IFloatCopyToRegister 		; copy to R2
.2cfe	a2 16		ldx #$16			ldx 	#IFR2 						; set R2 to 10
.2d00	a9 0a		lda #$0a			lda 	#10
.2d02	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.2d05	a2 16		ldx #$16			ldx 	#IFR2						; R0,R2 = R2 * 10
.2d07	20 78 29	jsr $2978			jsr 	IFloatMultiply
.2d0a	a2 16		ldx #$16			ldx 	#IFR2
.2d0c	20 7a 2e	jsr $2e7a			jsr 	IFloatCopyToRegister
.2d0f	20 d8 2b	jsr $2bd8			jsr 	IFloatIntegerR0 			; get integer part of R0
.2d12	ad d4 06	lda $06d4			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2d15	c9 03		cmp #$03			cmp 	#3
.2d17	f0 16		beq $2d2f			beq 	_IFFSExitStripZero
.2d19	ad d4 06	lda $06d4			lda 	IFloatDecimalCount 			; written the DP yet ?
.2d1c	d0 05		bne $2d23			bne 	_IFloatNotFirst
.2d1e	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2d20	20 68 2f	jsr $2f68			jsr 	IFloatBufferWrite
.2d23					_IFloatNotFirst:
.2d23	ee d4 06	inc $06d4			inc 	IFloatDecimalCount
.2d26	a5 0e		lda $0e				lda 	IFR0+IM0 					; get digit
.2d28	09 30		ora #$30			ora 	#"0"						; ASCII
.2d2a	20 68 2f	jsr $2f68			jsr 	IFloatBufferWrite 			; write to the buffer.
.2d2d	80 bf		bra $2cee			bra 	_IFloatFracLoop
.2d2f					_IFFSExitStripZero:
.2d2f	20 77 2f	jsr $2f77			jsr 	IFloatStripTrailingZeros
.2d32					_IFFSExit:
.2d32	a2 16		ldx #$16			ldx 	#IFR2 						; restore R2
.2d34	20 48 2e	jsr $2e48			jsr 	IFloatPullRx
.2d37	20 60 2f	jsr $2f60			jsr 	IFloatGetBufferAddress
.2d3a	18		clc				clc
.2d3b	60		rts				rts
.06d4					IFloatDecimalCount:
>06d4							.fill 	1
.2d3c					IFloatStringToFloatR0:
.2d3c	8d d5 06	sta $06d5			sta 	IFCount 					; save it out.
.2d3f	86 0c		stx $0c				stx 	iTemp0
.2d41	84 0d		sty $0d				sty 	iTemp0+1
.2d43	a2 0e		ldx #$0e			ldx 	#IFR0 						; reset the current value.
.2d45	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.2d48	9c d6 06	stz $06d6			stz 	IFSignFlag 					; clear the sign flag
.2d4b	20 d8 2d	jsr $2dd8			jsr 	IFSTFGetNext 				; get first
.2d4e	f0 1b		beq $2d6b			beq 	_IFSTFFail 					; no character
.2d50	90 10		bcc $2d62			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2d52	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2d54	d0 15		bne $2d6b			bne 	_IFSTFFail
.2d56	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2d58	8d d6 06	sta $06d6			sta 	IFSignFlag
.2d5b					_IFSTFLoop:
.2d5b	20 d8 2d	jsr $2dd8			jsr 	IFSTFGetNext 				; get next
.2d5e	b0 0b		bcs $2d6b			bcs 	_IFSTFFail 					; bad character.
.2d60	f0 11		beq $2d73			beq 	_IFSTFExit 					; end of data
.2d62					_IFSTFHaveChar:
.2d62	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2d64	f0 08		beq $2d6e			beq 	_IFSTFDecimal
.2d66	20 fc 2d	jsr $2dfc			jsr 	IFSTFAddR0 					; add number in
.2d69	80 f0		bra $2d5b			bra 	_IFSTFLoop 					; keep going until . or end.
.2d6b					_IFSTFFail:
.2d6b	38		sec				sec
.2d6c	80 0d		bra $2d7b			bra 	_IFSTFReturn
.2d6e					_IFSTFDecimal:
.2d6e	20 83 2d	jsr $2d83			jsr 	IFSTFDecimal 				; call the decimal places code.
.2d71	b0 08		bcs $2d7b			bcs 	_IFSTFReturn 				; error
.2d73					_IFSTFExit:
.2d73	a5 11		lda $11				lda 	IFR0+IExp 					; copy sign flag in.
.2d75	0d d6 06	ora $06d6			ora 	IFSignFlag
.2d78	85 11		sta $11				sta 	IFR0+IExp
.2d7a	18		clc				clc
.2d7b					_IFSTFReturn:
.2d7b	60		rts				rts
.2d7c					IFloatAddDecimalToR0:
.2d7c	8d d5 06	sta $06d5			sta 	IFCount 					; save it out.
.2d7f	86 0c		stx $0c				stx 	iTemp0
.2d81	84 0d		sty $0d				sty 	iTemp0+1
.2d83					IFSTFDecimal:
.2d83	a2 0e		ldx #$0e			ldx 	#IFR0 						; push integer part on stack
.2d85	20 27 2e	jsr $2e27			jsr 	IFloatPushRx
.2d88	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2d8a	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero
.2d8d	9c d7 06	stz $06d7			stz 	IFDecimalPlaces
.2d90					_IFSTDLoop:
.2d90	20 d8 2d	jsr $2dd8			jsr 	IFSTFGetNext 				; get next
.2d93	b0 41		bcs $2dd6			bcs 	_IFSTFFail2 				; bad character.
.2d95	f0 11		beq $2da8			beq 	_IFSTFComplete 				; end of data, work out the result.
.2d97	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2d99	f0 39		beq $2dd4			beq 	_IFSTFExit2
.2d9b	20 fc 2d	jsr $2dfc			jsr 	IFSTFAddR0 					; add number in
.2d9e	ee d7 06	inc $06d7			inc 	IFDecimalPlaces 			; count decimals
.2da1	ad d7 06	lda $06d7			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2da4	c9 03		cmp #$03			cmp 	#3
.2da6	90 e8		bcc $2d90			bcc 	_IFSTDLoop
.2da8					_IFSTFComplete:
.2da8	ad d7 06	lda $06d7			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2dab	f0 27		beq $2dd4			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2dad	3a		dec a				dec 	a 							; table indexed from 1.
.2dae	0a		asl a				asl 	a
.2daf	0a		asl a				asl 	a
.2db0	aa		tax				tax
.2db1	bd 13 2e	lda $2e13,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2db4	85 12		sta $12				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2db6	bd 14 2e	lda $2e14,x			lda 	TableTen+1,x
.2db9	85 13		sta $13				sta  	IFR1+IM1
.2dbb	bd 15 2e	lda $2e15,x			lda 	TableTen+2,x
.2dbe	85 14		sta $14				sta  	IFR1+IM2
.2dc0	bd 16 2e	lda $2e16,x			lda 	TableTen+3,x
.2dc3	85 15		sta $15				sta  	IFR1+IExp
.2dc5	a2 12		ldx #$12			ldx 	#IFR1 						; multiply into result
.2dc7	20 78 29	jsr $2978			jsr 	IFloatMultiply
.2dca	a2 12		ldx #$12			ldx 	#IFR1  						; pop and add the decimal.
.2dcc	20 48 2e	jsr $2e48			jsr 	IFloatPullRx
.2dcf	a2 12		ldx #$12			ldx 	#IFR1
.2dd1	20 ce 28	jsr $28ce			jsr 	IFloatAdd
.2dd4					_IFSTFExit2:
.2dd4	18		clc				clc
.2dd5	60		rts				rts
.2dd6					_IFSTFFail2:
.2dd6	38		sec				sec
.2dd7	60		rts				rts
.2dd8					IFSTFGetNext:
.2dd8	ad d5 06	lda $06d5			lda 	IFCount  					; if count is zero, return with Z set.
.2ddb	f0 19		beq $2df6			beq 	_IFSTFReturnOk
.2ddd	b2 0c		lda ($0c)			lda 	(iTemp0) 					; get next character
.2ddf	e6 0c		inc $0c				inc 	iTemp0 						; point at next.
.2de1	d0 02		bne $2de5			bne 	_IFSTFGNNoCarry
.2de3	e6 0d		inc $0d				inc 	iTemp0+1
.2de5					_IFSTFGNNoCarry:
.2de5	ce d5 06	dec $06d5			dec 	IFCount 					; dec count.
.2de8	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2dea	f0 08		beq $2df4			beq 	_IFSTFGOkay
.2dec	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2dee	90 08		bcc $2df8			bcc 	_IFSTFGFail
.2df0	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2df2	b0 04		bcs $2df8			bcs 	_IFSTFGFail
.2df4					_IFSTFGOkay:
.2df4	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2df6					_IFSTFReturnOk:
.2df6	18		clc				clc
.2df7	60		rts				rts
.2df8					_IFSTFGFail:
.2df8	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2dfa	38		sec				sec
.2dfb	60		rts				rts
.2dfc					IFSTFAddR0:
.2dfc	29 0f		and #$0f			and 	#15 						; to int value
.2dfe	48		pha				pha 								; save it.
.2dff	a9 0a		lda #$0a			lda 	#10
.2e01	a2 12		ldx #$12			ldx 	#IFR1
.2e03	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.2e06	20 78 29	jsr $2978			jsr 	IFloatMultiply
.2e09	68		pla				pla
.2e0a	a2 12		ldx #$12			ldx 	#IFR1
.2e0c	20 da 2e	jsr $2eda			jsr 	IFloatSetByte
.2e0f	20 ce 28	jsr $28ce			jsr 	IFloatAdd
.2e12	60		rts				rts
.06d5					IFCount:
>06d5							.fill 	1
.06d6					IFSignFlag:
>06d6							.fill 	1
.06d7					IFDecimalPlaces:
>06d7							.fill 	1
.2e13					TableTen:
>2e13	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2e17	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2e1b	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2e1f	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2e23	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2e27					IFloatPushRx:
.2e27	5a		phy				phy
.2e28	ac d8 06	ldy $06d8			ldy 	IFStackIndex
.2e2b	b5 00		lda $00,x			lda 	IM0,x
.2e2d	99 d9 06	sta $06d9,y			sta 	IFStack,y
.2e30	b5 01		lda $01,x			lda 	IM1,x
.2e32	99 da 06	sta $06da,y			sta 	IFStack+1,y
.2e35	b5 02		lda $02,x			lda 	IM2,x
.2e37	99 db 06	sta $06db,y			sta 	IFStack+2,y
.2e3a	b5 03		lda $03,x			lda 	IExp,x
.2e3c	99 dc 06	sta $06dc,y			sta 	IFStack+3,y
.2e3f	c8		iny				iny
.2e40	c8		iny				iny
.2e41	c8		iny				iny
.2e42	c8		iny				iny
.2e43	8c d8 06	sty $06d8			sty 	IFStackIndex
.2e46	7a		ply				ply
.2e47	60		rts				rts
.2e48					IFloatPullRx:
.2e48	5a		phy				phy
.2e49	ac d8 06	ldy $06d8			ldy 	IFStackIndex
.2e4c	88		dey				dey
.2e4d	88		dey				dey
.2e4e	88		dey				dey
.2e4f	88		dey				dey
.2e50	b9 d9 06	lda $06d9,y			lda 	IFStack,y
.2e53	95 00		sta $00,x			sta 	IM0,x
.2e55	b9 da 06	lda $06da,y			lda 	IFStack+1,y
.2e58	95 01		sta $01,x			sta 	IM1,x
.2e5a	b9 db 06	lda $06db,y			lda 	IFStack+2,y
.2e5d	95 02		sta $02,x			sta 	IM2,x
.2e5f	b9 dc 06	lda $06dc,y			lda 	IFStack+3,y
.2e62	95 03		sta $03,x			sta 	IExp,x
.2e64	8c d8 06	sty $06d8			sty 	IFStackIndex
.2e67	7a		ply				ply
.2e68	60		rts				rts
.06d8					IFStackIndex:
>06d8							.fill 	1
.06d9					IFStack:
>06d9							.fill 	16*4
.2e69					IFloatCopyFromRegister:
.2e69	b5 00		lda $00,x			lda 	0,x
.2e6b	85 0e		sta $0e				sta 	IFR0
.2e6d	b5 01		lda $01,x			lda 	1,x
.2e6f	85 0f		sta $0f				sta 	IFR0+1
.2e71	b5 02		lda $02,x			lda 	2,x
.2e73	85 10		sta $10				sta 	IFR0+2
.2e75	b5 03		lda $03,x			lda 	3,x
.2e77	85 11		sta $11				sta 	IFR0+3
.2e79	60		rts				rts
.2e7a					IFloatCopyToRegister:
.2e7a	a5 0e		lda $0e				lda 	IFR0
.2e7c	95 00		sta $00,x			sta 	0,x
.2e7e	a5 0f		lda $0f				lda 	IFR0+1
.2e80	95 01		sta $01,x			sta 	1,x
.2e82	a5 10		lda $10				lda 	IFR0+2
.2e84	95 02		sta $02,x			sta 	2,x
.2e86	a5 11		lda $11				lda 	IFR0+3
.2e88	95 03		sta $03,x			sta 	3,x
.2e8a	60		rts				rts
.2e8b					IFloatLoadInline:
.2e8b	68		pla				pla 								; pop address off to iTemp0
.2e8c	85 0c		sta $0c				sta 	iTemp0
.2e8e	68		pla				pla
.2e8f	85 0d		sta $0d				sta 	iTemp0+1
.2e91	a0 01		ldy #$01			ldy 	#1
.2e93	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 0
.2e95	95 00		sta $00,x			sta 	0,x
.2e97	c8		iny				iny
.2e98	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 1
.2e9a	95 01		sta $01,x			sta 	1,x
.2e9c	c8		iny				iny
.2e9d	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 2
.2e9f	95 02		sta $02,x			sta 	2,x
.2ea1	c8		iny				iny
.2ea2	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 3
.2ea4	95 03		sta $03,x			sta 	3,x
.2ea6	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2ea7	a5 0c		lda $0c				lda 	iTemp0
.2ea9	69 05		adc #$05			adc 	#5
.2eab	85 0c		sta $0c				sta 	iTemp0
.2ead	90 02		bcc $2eb1			bcc 	_IFLINoCarry
.2eaf	e6 0d		inc $0d				inc 	iTemp0+1
.2eb1					_IFLINoCarry:
.2eb1	6c 0c 00	jmp ($000c)			jmp 	(iTemp0)					; effectively RTS
.2eb4					IFloatMultiply8BitRx:
.2eb4	5a		phy		        phy
.2eb5	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2eb7	a4 0e		ldy $0e		        ldy     IFR0+IM0
.2eb9	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2eba	85 0e		sta $0e		        sta     IFR0+IM0
.2ebc	84 0f		sty $0f		        sty     IFR0+IM1
.2ebe	a9 00		lda #$00	        lda     #0
.2ec0	a0 08		ldy #$08	        ldy     #8
.2ec2					_IFMLoop:
.2ec2	90 03		bcc $2ec7	        bcc     _IFMNoAdd
.2ec4	18		clc		        clc
.2ec5	65 0f		adc $0f		        adc     IFR0+IM1
.2ec7					_IFMNoAdd:
.2ec7	6a		ror a		        ror     a
.2ec8	66 0e		ror $0e		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2eca	88		dey		        dey
.2ecb	d0 f5		bne $2ec2	        bne     _IFMLoop
.2ecd	85 0f		sta $0f		        sta     IFR0+IM1                    ; write MSB out
.2ecf	7a		ply		        ply
.2ed0	60		rts		        rts
.2ed1					IFloatCheckZero:
.2ed1	b5 00		lda $00,x			lda 	IM0,x
.2ed3	15 01		ora $01,x			ora 	IM1,x
.2ed5	15 02		ora $02,x			ora 	IM2,x
.2ed7	60		rts				rts
.2ed8					IFloatSetZero:
.2ed8	a9 00		lda #$00			lda 	#0
.2eda					IFloatSetByte:
.2eda	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2edc	74 01		stz $01,x			stz 	IM1,x
.2ede	74 02		stz $02,x			stz 	IM2,x
.2ee0	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2ee2	60		rts				rts
.2ee3					IFloatNegate:
.2ee3	b5 03		lda $03,x			lda 	IExp,x
.2ee5	49 40		eor #$40			eor 	#IFSign
.2ee7	95 03		sta $03,x			sta 	IExp,x
.2ee9	18		clc				clc
.2eea	60		rts				rts
.2eeb					IFloatMantissaNegate:
.2eeb	38		sec				sec
.2eec	a9 00		lda #$00			lda 	#0
.2eee	f5 00		sbc $00,x			sbc 	IM0,x
.2ef0	95 00		sta $00,x			sta 	IM0,x
.2ef2	a9 00		lda #$00			lda 	#0
.2ef4	f5 01		sbc $01,x			sbc 	IM1,x
.2ef6	95 01		sta $01,x			sta 	IM1,x
.2ef8	a9 00		lda #$00			lda 	#0
.2efa	f5 02		sbc $02,x			sbc 	IM2,x
.2efc	95 02		sta $02,x			sta 	IM2,x
.2efe	60		rts				rts
.2eff					IFloatShiftLeft:
.2eff	18		clc				clc
.2f00					IFloatRotateLeft:
.2f00	36 00		rol $00,x			rol 	IM0,x
.2f02	36 01		rol $01,x			rol 	IM1,x
.2f04	36 02		rol $02,x			rol 	IM2,x
.2f06	60		rts				rts
.2f07					IFloatShiftRight:
.2f07	18		clc				clc
.2f08					IFloatRotateRight:
.2f08	76 02		ror $02,x			ror 	IM2,x
.2f0a	76 01		ror $01,x			ror 	IM1,x
.2f0c	76 00		ror $00,x			ror 	IM0,x
.2f0e	60		rts				rts
.2f0f					IFloatNormalise:
.2f0f	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero 			; is it zero
.2f12	f0 18		beq $2f2c			beq 	_IFNExitZero 				; if so exit
.2f14					_IFNLoop:
.2f14	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2f16	29 c0		and #$c0			and 	#$C0
.2f18	c9 40		cmp #$40			cmp 	#$40
.2f1a	f0 13		beq $2f2f			beq 	_IFNExitOkay 				; if so , then we are done.
.2f1c	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2f1e	29 3f		and #$3f			and 	#$3F
.2f20	c9 20		cmp #$20			cmp 	#$20
.2f22	f0 0b		beq $2f2f			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2f24	20 45 2f	jsr $2f45			jsr 	IFloatDecExponent
.2f27	20 ff 2e	jsr $2eff			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2f2a	80 e8		bra $2f14			bra 	_IFNLoop
.2f2c					_IFNExitZero:
.2f2c	20 d8 2e	jsr $2ed8			jsr 	IFloatSetZero 				; set the result to zero
.2f2f					_IFNExitOkay:
.2f2f	18		clc				clc  								; return with CC.
.2f30	60		rts				rts
.2f31					IFloatIncExponent:
.2f31	b5 03		lda $03,x			lda 	IExp,x
.2f33	48		pha				pha
.2f34	29 c0		and #$c0			and 	#$C0
.2f36	8d 19 07	sta $0719			sta 	IFXTemp
.2f39	68		pla				pla
.2f3a	1a		inc a				inc 	a
.2f3b	29 3f		and #$3f			and 	#$3F
.2f3d	48		pha				pha
.2f3e	0d 19 07	ora $0719			ora 	IFXTemp
.2f41	95 03		sta $03,x			sta 	IExp,x
.2f43	68		pla				pla
.2f44	60		rts				rts
.2f45					IFloatDecExponent:
.2f45	b5 03		lda $03,x			lda 	IExp,x
.2f47	48		pha				pha
.2f48	29 c0		and #$c0			and 	#$C0
.2f4a	8d 19 07	sta $0719			sta 	IFXTemp
.2f4d	68		pla				pla
.2f4e	3a		dec a				dec 	a
.2f4f	29 3f		and #$3f			and 	#$3F
.2f51	48		pha				pha
.2f52	0d 19 07	ora $0719			ora 	IFXTemp
.2f55	95 03		sta $03,x			sta 	IExp,x
.2f57	68		pla				pla
.2f58	60		rts				rts
.0719					IFXTemp:
>0719							.fill 	1
.2f59					IFloatBufferReset:
.2f59	9c 1a 07	stz $071a			stz 	IFBufferCount
.2f5c	9c 1b 07	stz $071b			stz 	IFBuffer
.2f5f	60		rts				rts
.2f60					IFloatGetBufferAddress:
.2f60	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.2f62	a2 1b		ldx #$1b			ldx 	#(IFBuffer & $FF)
.2f64	ad 1a 07	lda $071a			lda 	IFBufferCount
.2f67	60		rts				rts
.2f68					IFloatBufferWrite:
.2f68	da		phx				phx
.2f69	ae 1a 07	ldx $071a			ldx 	IFBufferCount
.2f6c	9d 1b 07	sta $071b,x			sta 	IFBuffer,x
.2f6f	9e 1c 07	stz $071c,x			stz 	IFBuffer+1,x
.2f72	ee 1a 07	inc $071a			inc 	IFBufferCount
.2f75	fa		plx				plx
.2f76	60		rts				rts
.2f77					IFloatStripTrailingZeros:
.2f77	ae 1a 07	ldx $071a			ldx 	IFBufferCount
.2f7a	bd 1a 07	lda $071a,x			lda 	IFBuffer-1,x
.2f7d	c9 30		cmp #$30			cmp		#"0"
.2f7f	d0 0f		bne $2f90			bne 	_IFSTExit
.2f81	bd 19 07	lda $0719,x			lda 	IFBuffer-2,x
.2f84	c9 2e		cmp #$2e			cmp 	#"."
.2f86	f0 08		beq $2f90			beq 	_IFSTExit
.2f88	ce 1a 07	dec $071a			dec 	IFBufferCount
.2f8b	9e 1a 07	stz $071a,x			stz 	IFBuffer-1,x
.2f8e	80 e7		bra $2f77			bra 	IFloatStripTrailingZeros
.2f90					_IFSTExit:
.2f90	60		rts				rts
.071a					IFBufferCount:
>071a							.fill 	1
.071b					IFBuffer:
>071b							.fill 	25
.2f91					IFloatCheck:
.2f91	a5 11		lda $11				lda 	IFR0+IExp					; force it negative
.2f93	09 40		ora #$40			ora 	#IFSign
.2f95	85 11		sta $11				sta 	IFR0+IExp
.2f97	20 ce 28	jsr $28ce			jsr 	IFloatAdd 					; add allowed to error.
.2f9a	a2 0e		ldx #$0e			ldx 	#IFR0
.2f9c	20 d1 2e	jsr $2ed1			jsr 	IFloatCheckZero 			; error if < 0
.2f9f	f0 06		beq $2fa7			beq 	_IFAOkay
.2fa1	a5 11		lda $11				lda 	IFR0+IExp
.2fa3	29 40		and #$40			and 	#IFSign
.2fa5	d0 01		bne $2fa8			bne 	_IFAFail
.2fa7					_IFAOkay:
.2fa7	60		rts				rts
.2fa8					_IFAFail:
.2fa8	38		sec				sec
.2fa9	68		pla				pla 								; get address - 2
.2faa	e9 02		sbc #$02			sbc 	#2
.2fac	aa		tax				tax
.2fad	68		pla				pla
.2fae	e9 00		sbc #$00			sbc 	#0
.2fb0	a8		tay				tay
.2fb1	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2fb3					_IFAStop:
>2fb3	db						.byte 	$DB 						; display an error AA ADR ADR
.2fb4	80 fd		bra $2fb3			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
