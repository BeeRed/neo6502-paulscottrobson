
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$6000" -D "ENDMEMORY=\$B000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Tue Jun  6 17:55:20 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$6000					BASICCODE=$6000
=$b000					ENDMEMORY=$B000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					rTemp1:
>000a							.fill 	2
.000c					iTemp0:
>000c							.fill 	2
.000e					IFR0:
>000e							.fill 	4
.0012					IFR1:
>0012							.fill 	4
.0016					IFR2:
>0016							.fill 	4
.001a					IFRTemp:
>001a							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd6					OSEditLine               = $ffd6 ; Edit line, return completion in A, line in YX
=$ffd9					OSEditNewLine            = $ffd9 ; Edit line, start clear.
=$ffdc					OSWriteString            = $ffdc ; Write length prefixed string YX to screen
=$ffdf					OSWriteStringZ           = $ffdf ; Write ASCIIZ string YX to screen
=$ffe2					OSGetScreenSize          = $ffe2 ; Get size of screen to XY
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 b0		ldy #$b0			ldy 	#ENDMEMORY >> 8
.1004	20 ab 1d	jsr $1dab			jsr 	PGMSetBaseAddress
.1007	20 9c 28	jsr $289c			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c 71 13	jmp $1371			jmp 	Command_RUN
.1012	4c 5b 13	jmp $135b			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001e					codePtr:
>001e							.fill 	2
.0020					zTemp0:
>0020							.fill 	2
.0022					zTemp1:
>0022							.fill 	2
.0024					zTemp2:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber
.1018	a2 0e		ldx #$0e			ldx 	#IFR0
.101a	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c cc 23	jmp $23cc		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	20 be 1d	jsr $1dbe			jsr 	PGMEndProgram 				; end program => zTemp0
.1026	64 26		stz $26				stz 	freeMemory 					; start on next free page
.1028	a5 21		lda $21				lda 	zTemp0+1
.102a	1a		inc a				inc 	a
.102b	85 27		sta $27				sta 	freeMemory+1
.102d	20 3b 28	jsr $283b			jsr 	VARClearHashTables
.1030	ad 14 05	lda $0514			lda 	PGMEndMemoryHigh
.1033	20 78 25	jsr $2578			jsr 	StackReset
.1036	20 d7 25	jsr $25d7			jsr 	StringSystemInitialise
.1039	20 e3 22	jsr $22e3			jsr 	ScanProcedures
.103c	60		rts				rts
.103d					AllocateMemory:
.103d	5a		phy				phy 								; save Y
.103e	a4 26		ldy $26				ldy 	freeMemory 					; save addr.low
.1040	5a		phy				phy
.1041	a4 27		ldy $27				ldy 	freeMemory+1 				; save addr.high
.1043	5a		phy				phy
.1044	a8		tay				tay 								; count is now in XY
.1045					_AllocateLoop:
.1045	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1047	d0 04		bne $104d			bne 	_AllocateOne
.1049	c0 00		cpy #$00			cpy 	#0
.104b	f0 15		beq $1062			beq 	_AllocateExit
.104d					_AllocateOne:
.104d	a9 00		lda #$00			lda 	#0 							; zero byte
.104f	92 26		sta ($26)			sta 	(freeMemory)
.1051	e6 26		inc $26				inc 	freeMemory 					; bump pointer
.1053	d0 05		bne $105a			bne 	_AllocateSkipCarry
.1055	e6 27		inc $27				inc 	freeMemory+1
.1057	20 66 10	jsr $1066			jsr 	ClearCheckMemory
.105a					_AllocateSkipCarry:
.105a	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.105c	d0 01		bne $105f			bne 	_AllocateSkipBorrow
.105e	ca		dex				dex
.105f					_AllocateSkipBorrow:
.105f	88		dey				dey
.1060	80 e3		bra $1045			bra 	_AllocateLoop
.1062					_AllocateExit:
.1062	fa		plx				plx 								; restore address
.1063	68		pla				pla
.1064	7a		ply				ply 								; restore Y
.1065	60		rts				rts
.1066					ClearCheckMemory:
.1066	a5 27		lda $27				lda 	freeMemory+1
.1068	1a		inc a				inc 	a
.1069	1a		inc a				inc 	a
.106a	cd 1c 06	cmp $061c			cmp 	stringMemory+1
.106d	b0 01		bcs $1070			bcs  	_CCMError
.106f	60		rts				rts
.1070					_CCMError:
.1070	4c 66 24	jmp $2466		jmp	ErrorV_memory
.0026					freeMemory:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1073					CommandDIM:
.1073	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.1075	29 c0		and #$c0			and 	#$C0
.1077	c9 40		cmp #$40			cmp 	#$40
.1079	d0 39		bne $10b4			bne 	_CDSyntax
.107b	20 f2 27	jsr $27f2			jsr 	VARGetInfo 					; get information
.107e	ad 24 06	lda $0624			lda 	VARType 					; check array.
.1081	29 02		and #$02			and 	#2
.1083	f0 2f		beq $10b4			beq 	_CDSyntax
.1085	20 a4 27	jsr $27a4			jsr 	VARFind 					; does it already exist
.1088	b0 2d		bcs $10b7			bcs 	_CDExists
.108a	20 50 27	jsr $2750			jsr 	VARCreate 					; create it - returns data ptr in XA
.108d	da		phx				phx 								; save target address
.108e	48		pha				pha
.108f	ad 24 06	lda $0624			lda 	VARType 					; type ID.
.1092	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1094	20 ba 10	jsr $10ba			jsr 	CreateArray 				; create array to XA
.1097	84 22		sty $22				sty 	zTemp1 						; save Y
.1099	7a		ply				ply 								; restore target to zTemp0
.109a	84 20		sty $20				sty 	zTemp0
.109c	7a		ply				ply
.109d	84 21		sty $21				sty 	zTemp0+1
.109f	92 20		sta ($20)			sta 	(zTemp0) 					; save new array
.10a1	a0 01		ldy #$01			ldy 	#1
.10a3	8a		txa				txa
.10a4	91 20		sta ($20),y			sta 	(zTemp0),y
.10a6	a4 22		ldy $22				ldy 	zTemp1 						; restore zTemp1
.10a8	20 09 25	jsr $2509			jsr 	ERRCheckRParen 				; check )
.10ab	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10ad	c8		iny				iny
.10ae	c9 99		cmp #$99			cmp 	#PR_COMMA
.10b0	f0 c1		beq $1073			beq 	CommandDIM
.10b2	88		dey				dey
.10b3	60		rts				rts
.10b4					_CDSyntax:
.10b4	4c 76 23	jmp $2376		jmp	ErrorV_syntax
.10b7					_CDExists:
.10b7	4c 3e 24	jmp $243e		jmp	ErrorV_redefine
.10ba					CreateArray:
.10ba	8d 03 05	sta $0503			sta 	CAType						; save type
.10bd	20 b7 15	jsr $15b7			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10c0	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10c2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10c4	f0 04		beq $10ca			beq 	_CATwoDimensions
.10c6	20 16 11	jsr $1116			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10c9	60		rts				rts
.10ca					_CATwoDimensions:
.10ca	a5 0f		lda $0f				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10cc	8d 05 05	sta $0505			sta 	CADim1+1
.10cf	a5 0e		lda $0e				lda 	IFR0+IM0
.10d1	8d 04 05	sta $0504			sta 	CADim1+0
.10d4	20 11 25	jsr $2511			jsr 	ERRCheckComma 				; check comma
.10d7	20 b7 15	jsr $15b7			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10da	5a		phy				phy 								; save Y position
.10db	18		clc				clc 								; allocate the outer array of pointers.
.10dc	ae 05 05	ldx $0505			ldx 	CADim1+1
.10df	ad 04 05	lda $0504			lda 	CADim1
.10e2	20 55 11	jsr $1155			jsr 	CSAAllocate 				; allocate the outer array
.10e5	da		phx				phx									; save this address on the stack
.10e6	48		pha				pha
.10e7	86 25		stx $25				stx 	zTemp2+1					; and in zTemp2
.10e9	85 24		sta $24				sta 	zTemp2
.10eb					_CACreateSubLoop:
.10eb	38		sec				sec
.10ec	20 16 11	jsr $1116			jsr 	CreateSingleArray 			; create data array of required size.
.10ef	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10f1	91 24		sta ($24),y			sta 	(zTemp2),y
.10f3	8a		txa				txa
.10f4	c8		iny				iny
.10f5	91 24		sta ($24),y			sta 	(zTemp2),y
.10f7	18		clc				clc  								; next slot.
.10f8	a5 24		lda $24				lda 	zTemp2
.10fa	69 02		adc #$02			adc 	#2
.10fc	85 24		sta $24				sta 	zTemp2
.10fe	90 02		bcc $1102			bcc 	_CACNoCarry
.1100	e6 25		inc $25				inc 	zTemp2+1
.1102					_CACNoCarry:
.1102	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1105	d0 03		bne $110a			bne 	_CACNoBorrow
.1107	ce 05 05	dec $0505			dec 	CADim1+1
.110a					_CACNoBorrow:
.110a	ce 04 05	dec $0504			dec 	CADim1
.110d	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1110	10 d9		bpl $10eb			bpl 	_CACreateSubLoop
.1112	68		pla				pla
.1113	fa		plx				plx
.1114	7a		ply				ply
.1115	60		rts				rts
.1116					CreateSingleArray:
.1116	5a		phy				phy
.1117	38		sec				sec 								; allocate memory block all zeros.
.1118	a5 0e		lda $0e				lda 	IFR0+IM0
.111a	a6 0f		ldx $0f				ldx 	IFR0+IM1
.111c	20 55 11	jsr $1155			jsr 	CSAAllocate
.111f	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1122	f0 2f		beq $1153			beq 	_CSANoInit
.1124	da		phx				phx 								; save address of new array
.1125	48		pha				pha
.1126	85 20		sta $20				sta 	zTemp0 						; address in zTemp0
.1128	86 21		stx $21				stx 	zTemp0+1
.112a	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.112c	b1 20		lda ($20),y			lda 	(zTemp0),y
.112e	a8		tay				tay
.112f	b2 20		lda ($20)			lda 	(zTemp0)
.1131	aa		tax				tax
.1132					_CSAEraseString:
.1132	5a		phy				phy
.1133	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1135	a9 80		lda #$80			lda 	#$80
.1137	91 20		sta ($20),y			sta 	(zTemp0),y
.1139	7a		ply				ply
.113a	18		clc				clc 								; add 4 to next slot.
.113b	a5 20		lda $20				lda 	zTemp0
.113d	69 04		adc #$04			adc 	#4
.113f	85 20		sta $20				sta 	zTemp0
.1141	90 02		bcc $1145			bcc 	_CSAENoCarry
.1143	e6 21		inc $21				inc 	zTemp0+1
.1145					_CSAENoCarry:
.1145	e0 00		cpx #$00			cpx 	#0
.1147	d0 01		bne $114a			bne 	_CSANoBorrow
.1149	88		dey				dey
.114a					_CSANoBorrow:
.114a	ca		dex				dex
.114b	d0 e5		bne $1132			bne 	_CSAEraseString
.114d	c0 00		cpy #$00			cpy 	#0
.114f	d0 e1		bne $1132			bne 	_CSAEraseString
.1151	68		pla				pla
.1152	fa		plx				plx
.1153					_CSANoInit:
.1153	7a		ply				ply
.1154	60		rts				rts
.1155					CSAAllocate:
.1155	08		php				php 								; save type flag.
.1156	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1157	d0 01		bne $115a			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1159	e8		inx				inx
.115a					_CSAANoCarry:
.115a	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.115c	b0 2e		bcs $118c			bcs 	_CSARange
.115e	28		plp				plp 								; restore type flag
.115f	08		php				php 								; save it back again.
.1160	da		phx				phx 								; save size.
.1161	48		pha				pha
.1162	86 21		stx $21				stx  	zTemp0+1 					; now in ztemp0+1:X
.1164	90 03		bcc $1169			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1166	0a		asl a				asl 	a
.1167	26 21		rol $21				rol 	zTemp0+1
.1169					_CSAATimes2:
.1169	0a		asl a				asl 	a
.116a	26 21		rol $21				rol 	zTemp0+1
.116c	18		clc				clc
.116d	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.116f	90 02		bcc $1173			bcc 	_CSAANoCarry2
.1171	e6 21		inc $21				inc 	zTemp0+1
.1173					_CSAANoCarry2:
.1173	a6 21		ldx $21				ldx 	zTemp0+1 					; XA is the bytes required.
.1175	20 3d 10	jsr $103d			jsr 	AllocateMemory 				; allocate memory to XA
.1178	86 21		stx $21				stx 	zTemp0+1 					; save pointers
.117a	85 20		sta $20				sta 	zTemp0
.117c	68		pla				pla  								; write element count to first 2 bytes
.117d	92 20		sta ($20)			sta 	(zTemp0)
.117f	68		pla				pla 								; msb of element count
.1180	28		plp				plp 								; CC if pointer array
.1181	b0 02		bcs $1185			bcs 	_CSAAIsData
.1183	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1185					_CSAAIsData:
.1185	a0 01		ldy #$01			ldy 	#1
.1187	91 20		sta ($20),y			sta 	(zTemp0),y
.1189	a5 20		lda $20				lda 	zTemp0 						; fix XA back up again
.118b	60		rts				rts
.118c					_CSARange:
.118c	4c 87 23	jmp $2387		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.118f					Command_Doke:
.118f	38		sec				sec
.1190	80 01		bra $1193			bra 	DPCommon
.1192					Command_Poke:
.1192	18		clc				clc
.1193					DPCommon:
.1193	08		php				php 								; CS if DOKE
.1194	20 b7 15	jsr $15b7			jsr 	EXPEvalInteger16 			; address
.1197	a5 0e		lda $0e				lda 	IFR0+IM0 					; push on stack
.1199	48		pha				pha
.119a	a5 0f		lda $0f				lda 	IFR0+IM1
.119c	48		pha				pha
.119d	20 11 25	jsr $2511			jsr 	ERRCheckComma 				; [dp]oke address,data
.11a0	20 b7 15	jsr $15b7			jsr 	EXPEvalInteger16
.11a3	68		pla				pla 								; get address back
.11a4	85 21		sta $21				sta 	zTemp0+1
.11a6	68		pla				pla
.11a7	85 20		sta $20				sta 	zTemp0
.11a9	a5 0e		lda $0e				lda 	IFR0+IM0
.11ab	92 20		sta ($20)			sta 	(zTemp0)
.11ad	28		plp				plp
.11ae	90 08		bcc $11b8			bcc 	_DPExit
.11b0	5a		phy				phy
.11b1	a5 0f		lda $0f				lda 	IFR0+IM1
.11b3	a0 01		ldy #$01			ldy 	#1
.11b5	91 20		sta ($20),y			sta 	(zTemp0),y
.11b7	7a		ply				ply
.11b8					_DPExit:
.11b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11b9					Command_Print:
.11b9					Command_IP_Main:
.11b9	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11ba					_CPLoop:
.11ba	08		php				php 								; save last action flag
.11bb	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next character
.11bd	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11bf	f0 3e		beq $11ff			beq 	_CPExit 					; without consuming
.11c1	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11c3	f0 3a		beq $11ff			beq 	_CPExit
.11c5	68		pla				pla 								; throw last action flag
.11c6	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; next character and bump
.11c8	c8		iny				iny
.11c9	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11cb	f0 2f		beq $11fc			beq 	_CPContinueWithSameLine
.11cd	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11cf	f0 26		beq $11f7			beq 	_CPTab
.11d1	88		dey				dey 								; undo the get.
.11d2	20 65 15	jsr $1565			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11d5	24 11		bit $11				bit 	IFR0+IExp 					; is it a number ?
.11d7	10 14		bpl $11ed			bpl 	_CPNumber
.11d9	5a		phy				phy
.11da	18		clc				clc 								; string address to YX
.11db	a5 0e		lda $0e				lda 	IFR0+IM0
.11dd	aa		tax				tax
.11de	a5 0f		lda $0f				lda 	IFR0+IM1
.11e0	a8		tay				tay
.11e1	e8		inx				inx 								; point to 1st character
.11e2	d0 01		bne $11e5			bne 	_CPNoCarry
.11e4	c8		iny				iny
.11e5					_CPNoCarry:
.11e5	b2 0e		lda ($0e)			lda 	(IFR0+IM0)					; length to A
.11e7	20 08 12	jsr $1208			jsr 	CPPrintAYX 					; print AYX
.11ea	7a		ply				ply
.11eb	80 cc		bra $11b9			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11ed					_CPNumber:
.11ed	5a		phy				phy
.11ee	20 ae 2c	jsr $2cae			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11f1	20 08 12	jsr $1208			jsr 	CPPrintAYX 					; print AYX
.11f4	7a		ply				ply
.11f5	80 c2		bra $11b9			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11f7					_CPTab:
.11f7	a9 09		lda #$09			lda 	#9 							; print TAB
.11f9	20 1b 12	jsr $121b			jsr 	CPPrintA
.11fc					_CPContinueWithSameLine:
.11fc	38		sec				sec 								; loop round with carry set, which
.11fd	80 bb		bra $11ba			bra 	_CPLoop 					; will inhibit final CR
.11ff					_CPExit:
.11ff	28		plp				plp 								; get last action flag
.1200	b0 05		bcs $1207			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1202	a9 0d		lda #$0d			lda 	#13 						; print new line
.1204	20 1b 12	jsr $121b			jsr 	CPPrintA
.1207					_CPExit2:
.1207	60		rts				rts
.1208					CPPrintAYX:
.1208	86 20		stx $20				stx 	zTemp0
.120a	84 21		sty $21				sty 	zTemp0+1
.120c	aa		tax				tax
.120d	f0 0b		beq $121a			beq 	_CPPrintExit
.120f	a0 00		ldy #$00			ldy 	#0
.1211					_CPPrintAYXLoop:
.1211	b1 20		lda ($20),y			lda 	(zTemp0),y
.1213	20 1b 12	jsr $121b			jsr 	CPPrintA
.1216	c8		iny				iny
.1217	ca		dex				dex
.1218	d0 f7		bne $1211			bne 	_CPPrintAYXLoop
.121a					_CPPrintExit:
.121a	60		rts				rts
.121b					CPPrintA:
.121b	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.121e					CommandLET:
.121e	20 2d 16	jsr $162d			jsr 	EXPTermR0 					; get term
.1221	90 6d		bcc $1290			bcc 	_CLError 					; must be a reference term.
.1223	a5 0e		lda $0e				lda 	IFR0+IM0 					; push address and type onto stack
.1225	48		pha				pha
.1226	a5 0f		lda $0f				lda 	IFR0+IM1
.1228	48		pha				pha
.1229	a5 11		lda $11				lda 	IFR0+IExp
.122b	48		pha				pha
.122c	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.122e	20 19 25	jsr $2519			jsr 	ERRCheckA
.1231	20 65 15	jsr $1565			jsr 	EXPEvaluateExpression 		; right hand side.
.1234	68		pla				pla 								; type of l-expr
.1235	45 11		eor $11				eor 	IFR0+IExp 					; check types match
.1237	30 5a		bmi $1293			bmi 	_CLType
.1239	fa		plx				plx 	 							; pop target address to zTemp0
.123a	86 21		stx $21				stx 	zTemp0+1
.123c	fa		plx				plx
.123d	86 20		stx $20				stx 	zTemp0
.123f	a5 11		lda $11				lda 	IFR0+IExp 					; string assignment
.1241	30 15		bmi $1258			bmi 	_CLStringAssign
.1243	5a		phy				phy
.1244	a0 03		ldy #$03			ldy 	#3
.1246	91 20		sta ($20),y			sta 	(zTemp0),y
.1248	88		dey				dey
.1249	a5 10		lda $10				lda 	IFR0+IM2
.124b	91 20		sta ($20),y			sta 	(zTemp0),y
.124d	88		dey				dey
.124e	a5 0f		lda $0f				lda 	IFR0+IM1
.1250	91 20		sta ($20),y			sta 	(zTemp0),y
.1252	a5 0e		lda $0e				lda 	IFR0+IM0
.1254	92 20		sta ($20)			sta 	(zTemp0)
.1256	7a		ply				ply
.1257	60		rts				rts
.1258					_CLStringAssign:
.1258	5a		phy				phy
.1259	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.125b	b1 20		lda ($20),y			lda 	(zTemp0),y
.125d	12 20		ora ($20)			ora 	(zTemp0)
.125f	f0 23		beq $1284			beq 	_CLConcreteString
.1261	b2 20		lda ($20)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1263	85 22		sta $22				sta 	zTemp1
.1265	b1 20		lda ($20),y			lda 	(zTemp0),y
.1267	85 23		sta $23				sta 	zTemp1+1
.1269	b2 22		lda ($22)			lda 	(zTemp1) 					; bytes available in the new slot
.126b	38		sec				sec 								; we want 3 for slot size, status, string size.
.126c	e9 03		sbc #$03			sbc 	#3
.126e	d2 0e		cmp ($0e)			cmp 	(IFR0) 						; compare against string size.
.1270	90 12		bcc $1284			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1272	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1274	1a		inc a				inc 	a
.1275	aa		tax				tax
.1276	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1278					_CLReplaceString:
.1278	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; copy new string into previous space.
.127a	c8		iny				iny
.127b	c8		iny				iny
.127c	91 22		sta ($22),y			sta 	(zTemp1),y
.127e	88		dey				dey
.127f	ca		dex				dex
.1280	d0 f6		bne $1278			bne 	_CLReplaceString
.1282	80 0a		bra $128e			bra 	_CLExit
.1284					_CLConcreteString:
.1284	20 8c 25	jsr $258c			jsr 	StringConcrete  			; concreted string in XA.
.1287	a0 01		ldy #$01			ldy 	#1 							; store the address
.1289	92 20		sta ($20)			sta 	(zTemp0)
.128b	8a		txa				txa
.128c	91 20		sta ($20),y			sta 	(zTemp0),y
.128e					_CLExit:
.128e	7a		ply				ply
.128f	60		rts				rts
.1290					_CLError:
.1290	4c a9 24	jmp $24a9		jmp	ErrorV_variable
.1293					_CLType:
.1293	4c a6 23	jmp $23a6		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1296					Command_LIST:
.1296	9c 06 05	stz $0506			stz 	CLFrom 						; default from
.1299	9c 07 05	stz $0507			stz 	CLFrom+1
.129c	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.129e	c9 99		cmp #$99			cmp 	#PR_COMMA
.12a0	f0 1d		beq $12bf			beq 	_CLToLine
.12a2	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12a4	f0 37		beq $12dd			beq 	_CLDefaultTo
.12a6	20 b7 15	jsr $15b7			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.12a9	a5 0e		lda $0e				lda 	IFR0+IM0
.12ab	8d 06 05	sta $0506			sta 	CLFrom
.12ae	8d 08 05	sta $0508			sta 	CLTo
.12b1	a5 0f		lda $0f				lda 	IFR0+IM1
.12b3	8d 07 05	sta $0507			sta 	CLFrom+1
.12b6	8d 09 05	sta $0509			sta 	CLTo+1
.12b9	b1 1e		lda ($1e),y			lda 	(codePtr),y
.12bb	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.12bd	f0 26		beq $12e5			beq 	_CLList
.12bf					_CLToLine:
.12bf	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.12c1	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12c3	f0 18		beq $12dd			beq 	_CLDefaultTo
.12c5	20 11 25	jsr $2511			jsr 	ERRCheckComma 				; sep comma
.12c8	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.12ca	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.12cc	f0 0f		beq $12dd			beq 	_CLDefaultTo
.12ce	20 b7 15	jsr $15b7			jsr 	EXPEvalInteger16 			; there's a To value.
.12d1	a5 0e		lda $0e				lda 	IFR0+IM0
.12d3	8d 08 05	sta $0508			sta 	CLTo
.12d6	a5 0f		lda $0f				lda 	IFR0+IM1
.12d8	8d 09 05	sta $0509			sta 	CLTo+1
.12db	80 08		bra $12e5			bra 	_CLList
.12dd					_CLDefaultTo:
.12dd	a9 ff		lda #$ff			lda 	#$FF
.12df	8d 08 05	sta $0508			sta 	CLTo
.12e2	8d 09 05	sta $0509			sta 	CLTo+1
.12e5					_CLList:
.12e5	ad 13 05	lda $0513			lda 	PGMBaseHigh 				; back to the program start
.12e8	85 1f		sta $1f				sta 	codePtr+1
.12ea	64 1e		stz $1e				stz 	codePtr
.12ec	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.12ee	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.12f0	20 0d 1c	jsr $1c0d			jsr 	TOKSetDetokeniseOutput
.12f3					_CLLoop:
.12f3	b2 1e		lda ($1e)			lda 	(codePtr) 					; finished
.12f5	f0 42		beq $1339			beq 	_CLExit
.12f7	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.12f9	20 3c 13	jsr $133c			jsr 	_CLCompareLine
.12fc	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.12fe	f0 2c		beq $132c			beq 	_CLNext
.1300	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1302	20 3c 13	jsr $133c			jsr 	_CLCompareLine
.1305	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.1307	f0 23		beq $132c			beq 	_CLNext
.1309	a0 02		ldy #$02			ldy 	#2 							; print line #
.130b	b1 1e		lda ($1e),y			lda 	(codePtr),y
.130d	aa		tax				tax
.130e	88		dey				dey
.130f	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1311	20 6a 26	jsr $266a			jsr 	WriteIntXA
.1314	a9 20		lda #$20			lda 	#32
.1316	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1319	a4 1f		ldy $1f				ldy 	codePtr+1 					; point YX to tokenised code/
.131b	a5 1e		lda $1e				lda 	codePtr
.131d	18		clc				clc
.131e	69 03		adc #$03			adc 	#3
.1320	aa		tax				tax
.1321	90 01		bcc $1324			bcc 	_CLNoCarry2
.1323	c8		iny				iny
.1324					_CLNoCarry2:
.1324	20 c8 1b	jsr $1bc8			jsr 	TOKDetokenise
.1327	a9 0d		lda #$0d			lda 	#13	 						; next line
.1329	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.132c					_CLNext:
.132c	18		clc				clc 								; advance to next line.
.132d	b2 1e		lda ($1e)			lda 	(codePtr)
.132f	65 1e		adc $1e				adc 	codePtr
.1331	85 1e		sta $1e				sta 	codePtr
.1333	90 02		bcc $1337			bcc 	_CLNoCarry
.1335	e6 1f		inc $1f				inc 	codePtr+1
.1337					_CLNoCarry:
.1337	80 ba		bra $12f3			bra 	_CLLoop
.1339					_CLExit:
.1339	4c 89 26	jmp $2689			jmp 	WarmStart
.133c					_CLCompareLine:
.133c	a0 01		ldy #$01			ldy 	#1
.133e	38		sec				sec
.133f	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1341	fd 06 05	sbc $0506,x			sbc 	CLFrom,x
.1344	85 20		sta $20				sta 	zTemp0
.1346	c8		iny				iny
.1347	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1349	fd 07 05	sbc $0507,x			sbc 	CLFrom+1,x
.134c	90 0a		bcc $1358			bcc 	_CLIsNegative
.134e	d0 05		bne $1355			bne 	_CLIsPositive
.1350	a5 20		lda $20				lda 	zTemp0
.1352	d0 01		bne $1355			bne 	_CLIsPositive
.1354	60		rts				rts
.1355					_CLIsPositive:
.1355	a9 01		lda #$01			lda 	#1
.1357	60		rts				rts
.1358					_CLIsNegative:
.1358	a9 ff		lda #$ff			lda 	#255
.135a	60		rts				rts
.0506					CLFrom:
>0506							.fill 	2
.0508					CLTo:
>0508							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.135b					Command_NEW:
.135b	20 b2 1d	jsr $1db2			jsr 	PGMNewProgram
.135e	20 23 10	jsr $1023			jsr 	Command_CLEAR
.1361	4c ca 13	jmp $13ca			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1364					Command_REM:
.1364					Command_REM2:
.1364	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; optional string parameter
.1366	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1368	d0 06		bne $1370			bne 	_CRExit
.136a	c8		iny				iny 								; skip over it, it's a comment.
.136b	98		tya				tya
.136c	38		sec				sec
.136d	71 1e		adc ($1e),y			adc 	(codePtr),y
.136f	a8		tay				tay
.1370					_CRExit:
.1370	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1371					Command_RUN:
.1371	20 23 10	jsr $1023			jsr 	Command_CLEAR 				; clear everything out.
.1374	ad 13 05	lda $0513			lda 	PGMBaseHigh 				; back to the program start
.1377	85 1f		sta $1f				sta 	codePtr+1
.1379	64 1e		stz $1e				stz 	codePtr
.137b	80 0b		bra $1388			bra 	RUNNewLine
.137d					RUNEndOfLine:
.137d	18		clc				clc 								; advance to next line.
.137e	b2 1e		lda ($1e)			lda 	(codePtr)
.1380	65 1e		adc $1e				adc 	codePtr
.1382	85 1e		sta $1e				sta 	codePtr
.1384	90 02		bcc $1388			bcc 	_RELNoCarry
.1386	e6 1f		inc $1f				inc 	codePtr+1
.1388					_RELNoCarry:
.1388					RUNNewLine:
.1388	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.138a	9a		txs				txs
.138b	b2 1e		lda ($1e)			lda 	(codePtr) 					; check off end of program
.138d	f0 3b		beq $13ca			beq 	Command_END
.138f	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1391	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1393	8d 1f 06	sta $061f			sta 	ERRLine
.1396	c8		iny				iny
.1397	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1399	8d 20 06	sta $0620			sta 	ERRLine+1
.139c	c8		iny				iny 								; offset into codePtr for start of line.
.139d					RUNNewCommand:
.139d	9c 1a 06	stz $061a			stz 	stringInitialised 			; reset string system.
.13a0	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token
.13a2	10 1a		bpl $13be			bpl		_RUNNotToken 				; probably an identifier
.13a4	c8		iny				iny 								; consume token
.13a5	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.13a7	f0 f4		beq $139d			beq 	RUNNewCommand
.13a9	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.13ab	b0 0e		bcs $13bb			bcs 	_RUNSyntax
.13ad	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.13af	90 0a		bcc $13bb			bcc 	_RUNSyntax
.13b1	0a		asl a				asl 	a 							; double into X.
.13b2	aa		tax				tax
.13b3	20 b8 13	jsr $13b8			jsr 	_RUNDispatchMain			; call the main dispatcher
.13b6	80 e5		bra $139d			bra 	RUNNewCommand
.13b8					_RUNDispatchMain:
.13b8	7c c8 1a	jmp ($1ac8,x)			jmp 	(VectorTable,x)
.13bb					_RUNSyntax:
.13bb	4c 76 23	jmp $2376		jmp	ErrorV_syntax
.13be					_RUNNotToken:
.13be	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.13c0	90 f9		bcc $13bb			bcc 	_RUNSyntax
.13c2	20 1e 12	jsr $121e			jsr 	CommandLET 					; assignment
.13c5	80 d6		bra $139d			bra 	RUNNewCommand 				; loop round.
.13c7					Command_Shift_Handler:
.13c7	4c b8 23	jmp $23b8		jmp	ErrorV_unimplemented
.13ca					Command_END:
.13ca	4c 89 26	jmp $2689			jmp 	WarmStart

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.13cd					Command_STOP:
.13cd	4c 1a 24	jmp $241a		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.13d0					Command_Sys:
.13d0	20 b7 15	jsr $15b7			jsr 	EXPEvalInteger16 			; execution address
.13d3	5a		phy				phy
.13d4	ad 67 06	lda $0667			lda 	('A'-'A')*4 + FastVariables ; load AXY
.13d7	ae c3 06	ldx $06c3			ldx 	('X'-'A')*4 + FastVariables
.13da	ac c7 06	ldy $06c7			ldy 	('Y'-'A')*4 + FastVariables
.13dd	20 e2 13	jsr $13e2			jsr 	_CSCallIFR0 				; call the code
.13e0	7a		ply				ply
.13e1	60		rts				rts
.13e2					_CSCallIFR0:
.13e2	6c 0e 00	jmp ($000e)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.13e5					NoExec01:
.13e5					NoExec02:
.13e5					NoExec03:
.13e5					NoExec04:
.13e5					NoExec05:
.13e5					NoExec06:
.13e5					NoExec07:
.13e5					NoExec08:
.13e5	4c 76 23	jmp $2376		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.13e8					EXPBinAdd:
.13e8	24 11		bit $11				bit 	IFR0+IExp
.13ea	30 6f		bmi $145b			bmi 	EXPConcatenate
.13ec	a2 12		ldx #$12			ldx 	#IFR1
.13ee	4c a7 28	jmp $28a7			jmp 	IFloatAdd
.13f1					EXPBinSub:
.13f1	24 11		bit $11				bit 	IFR0+IExp
.13f3	30 3f		bmi $1434			bmi 	EXPTypeError
.13f5	a2 12		ldx #$12			ldx 	#IFR1
.13f7	4c a0 28	jmp $28a0			jmp 	IFloatSubtract
.13fa					EXPBinMul:
.13fa	24 11		bit $11				bit 	IFR0+IExp
.13fc	30 36		bmi $1434			bmi 	EXPTypeError
.13fe	a2 12		ldx #$12			ldx 	#IFR1
.1400	4c 51 29	jmp $2951			jmp 	IFloatMultiply
.1403					EXPBinFDiv:
.1403	24 11		bit $11				bit 	IFR0+IExp
.1405	30 2d		bmi $1434			bmi 	EXPTypeError
.1407	a2 12		ldx #$12			ldx 	#IFR1
.1409	20 d4 2b	jsr $2bd4			jsr 	IFloatDivideFloat
.140c	b0 0f		bcs $141d			bcs 	EXPDZero
.140e	60		rts				rts
.140f					EXPBinIDiv:
.140f	24 11		bit $11				bit 	IFR0+IExp
.1411	30 21		bmi $1434			bmi 	EXPTypeError
.1413	a2 12		ldx #$12			ldx 	#IFR1
.1415	20 d4 2b	jsr $2bd4			jsr 	IFloatDivideFloat
.1418	b0 03		bcs $141d			bcs 	EXPDZero
.141a	4c b1 2b	jmp $2bb1			jmp 	IFloatIntegerR0
.141d					EXPDZero:
.141d	4c ef 23	jmp $23ef		jmp	ErrorV_divzero
.1420					EXPBinIMod:
.1420	24 11		bit $11				bit 	IFR0+IExp
.1422	30 10		bmi $1434			bmi 	EXPTypeError
.1424	a2 12		ldx #$12			ldx 	#IFR1
.1426	5a		phy				phy
.1427	20 e9 2a	jsr $2ae9			jsr 	IFPreProcessBitwise 		; set up everything.
.142a	d0 05		bne $1431			bne 	EXPDRange
.142c	20 22 2a	jsr $2a22			jsr 	IFloatModulusInteger
.142f	7a		ply				ply
.1430	60		rts				rts
.1431					EXPDRange:
.1431	4c 87 23	jmp $2387		jmp	ErrorV_range
.1434					EXPTypeError:
.1434	4c a6 23	jmp $23a6		jmp	ErrorV_type
.1437					EXPBinAnd:
.1437	24 11		bit $11				bit 	IFR0+IExp
.1439	30 f9		bmi $1434			bmi 	EXPTypeError
.143b	a2 12		ldx #$12			ldx 	#IFR1
.143d	20 a4 2a	jsr $2aa4			jsr 	IFloatBitwiseAnd
.1440	b0 ef		bcs $1431			bcs 	EXPDRange
.1442	60		rts				rts
.1443					EXPBinOr:
.1443	24 11		bit $11				bit 	IFR0+IExp
.1445	30 ed		bmi $1434			bmi 	EXPTypeError
.1447	a2 12		ldx #$12			ldx 	#IFR1
.1449	20 bb 2a	jsr $2abb			jsr 	IFloatBitwiseOr
.144c	b0 e3		bcs $1431			bcs 	EXPDRange
.144e	60		rts				rts
.144f					EXPBinXor:
.144f	24 11		bit $11				bit 	IFR0+IExp
.1451	30 e1		bmi $1434			bmi 	EXPTypeError
.1453	a2 12		ldx #$12			ldx 	#IFR1
.1455	20 d2 2a	jsr $2ad2			jsr 	IFloatBitwiseXor
.1458	b0 d7		bcs $1431			bcs 	EXPDRange
.145a	60		rts				rts
.145b					EXPConcatenate:
.145b	18		clc				clc
.145c	b2 0e		lda ($0e)			lda 	(IFR0) 	 					; work out total length
.145e	72 12		adc ($12)			adc 	(IFR1)
.1460	b0 2d		bcs $148f			bcs 	_EXPCError
.1462	a6 0e		ldx $0e				ldx 	IFR0 						; push R0 string on stack.
.1464	da		phx				phx
.1465	a6 0f		ldx $0f				ldx 	IFR0+1
.1467	da		phx				phx
.1468	20 ff 25	jsr $25ff			jsr 	StringTempAllocate 			; allocate string, set up return
.146b	a6 13		ldx $13				ldx 	IFR1+1 						; copy first string.
.146d	a5 12		lda $12				lda 	IFR1
.146f	20 78 14	jsr $1478			jsr 	_EXPCCopyXA
.1472	fa		plx				plx 								; copy second string
.1473	68		pla				pla
.1474	20 78 14	jsr $1478			jsr 	_EXPCCopyXA
.1477	60		rts				rts
.1478					_EXPCCopyXA:
.1478	86 21		stx $21				stx 	zTemp0+1 					; save address to zTemp0
.147a	85 20		sta $20				sta 	zTemp0
.147c	b2 20		lda ($20)			lda 	(zTemp0)					; length
.147e	f0 0e		beq $148e			beq 	_EXPCCExit 					; nothing.
.1480	aa		tax				tax 								; count
.1481	5a		phy				phy 								; start positioin
.1482	a0 01		ldy #$01			ldy 	#1
.1484					_EXPCCLoop:
.1484	b1 20		lda ($20),y			lda 	(zTemp0),y 					; write characters one at a time.
.1486	20 34 26	jsr $2634			jsr 	StringTempWrite
.1489	c8		iny				iny
.148a	ca		dex				dex
.148b	d0 f7		bne $1484			bne 	_EXPCCLoop
.148d	7a		ply				ply
.148e					_EXPCCExit:
.148e	60		rts				rts
.148f					_EXPCError:
.148f	4c 93 24	jmp $2493		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1492					EXPReturnTrue:
.1492	a2 0e		ldx #$0e			ldx 	#IFR0
.1494	a9 01		lda #$01			lda 	#1
.1496	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.1499	20 bc 2e	jsr $2ebc			jsr 	IFloatNegate
.149c	60		rts				rts
.149d					EXPReturnFalse:
.149d	a2 0e		ldx #$0e			ldx 	#IFR0
.149f	4c b1 2e	jmp $2eb1			jmp 	IFloatSetZero
.14a2					EXPCompareEqual:
.14a2	20 d8 14	jsr $14d8			jsr 	EXPCompareBaseCode
.14a5	c9 00		cmp #$00			cmp 	#0
.14a7	f0 e9		beq $1492			beq 	EXPReturnTrue
.14a9	80 f2		bra $149d			bra 	EXPReturnFalse
.14ab					EXPCompareLess:
.14ab	20 d8 14	jsr $14d8			jsr 	EXPCompareBaseCode
.14ae	c9 ff		cmp #$ff			cmp 	#$FF
.14b0	f0 e0		beq $1492			beq 	EXPReturnTrue
.14b2	80 e9		bra $149d			bra 	EXPReturnFalse
.14b4					EXPCompareGreater:
.14b4	20 d8 14	jsr $14d8			jsr 	EXPCompareBaseCode
.14b7	c9 01		cmp #$01			cmp 	#1
.14b9	f0 d7		beq $1492			beq 	EXPReturnTrue
.14bb	80 e0		bra $149d			bra 	EXPReturnFalse
.14bd					EXPCompareNotEqual:
.14bd	20 d8 14	jsr $14d8			jsr 	EXPCompareBaseCode
.14c0	c9 00		cmp #$00			cmp 	#0
.14c2	d0 ce		bne $1492			bne 	EXPReturnTrue
.14c4	80 d7		bra $149d			bra 	EXPReturnFalse
.14c6					EXPCompareLessEqual:
.14c6	20 d8 14	jsr $14d8			jsr 	EXPCompareBaseCode
.14c9	c9 01		cmp #$01			cmp 	#1
.14cb	d0 c5		bne $1492			bne 	EXPReturnTrue
.14cd	80 ce		bra $149d			bra 	EXPReturnFalse
.14cf					EXPCompareGreaterEqual:
.14cf	20 d8 14	jsr $14d8			jsr 	EXPCompareBaseCode
.14d2	c9 ff		cmp #$ff			cmp 	#$FF
.14d4	d0 bc		bne $1492			bne 	EXPReturnTrue
.14d6	80 c5		bra $149d			bra 	EXPReturnFalse
.14d8					EXPCompareBaseCode:
.14d8	24 11		bit $11				bit 	IFR0+IExp 					; string compare ?
.14da	30 10		bmi $14ec			bmi 	_EXCBCString
.14dc	a2 12		ldx #$12			ldx 	#IFR1						; float compare
.14de	20 7f 2b	jsr $2b7f			jsr 	IFloatCompare
.14e1	a5 0e		lda $0e				lda 	IFR0+IM0
.14e3	f0 06		beq $14eb			beq 	_EXCBCExit 					; return 0 if zero
.14e5	24 11		bit $11				bit 	IFR0+IExp 					; return 1 if +ve
.14e7	50 02		bvc $14eb			bvc 	_EXCBCExit
.14e9	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.14eb					_EXCBCExit:
.14eb	60		rts				rts
.14ec					_EXCBCString:
.14ec	5a		phy				phy
.14ed	b2 0e		lda ($0e)			lda 	(IFR0) 						; length of smaller of the two in X.
.14ef	d2 12		cmp ($12)			cmp 	(IFR1)
.14f1	90 02		bcc $14f5			bcc 	_EXCBCSmaller
.14f3	b2 12		lda ($12)			lda 	(IFR1)
.14f5					_EXCBCSmaller:
.14f5	aa		tax				tax
.14f6	f0 0d		beq $1505			beq 	_EXCBCMatches 				; if zero common length matches
.14f8	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.14fa					_EXCBCCheckSmallerMatches:
.14fa	c8		iny				iny 								; compare directly as far as common length
.14fb	38		sec				sec
.14fc	b1 12		lda ($12),y			lda 	(IFR1),y
.14fe	f1 0e		sbc ($0e),y			sbc 	(IFR0),y
.1500	d0 08		bne $150a			bne 	_EXCBCExit2
.1502	ca		dex				dex
.1503	d0 f5		bne $14fa			bne 	_EXCBCCheckSmallerMatches
.1505					_EXCBCMatches:
.1505	38		sec				sec
.1506	b2 12		lda ($12)			lda 	(IFR1) 						; common length matches. If same length equal
.1508	f2 0e		sbc ($0e)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.150a					_EXCBCExit2:
.150a	7a		ply				ply
.150b	c9 00		cmp #$00			cmp 	#0
.150d	f0 04		beq $1513			beq 	_EXCBCReturn
.150f	30 03		bmi $1514			bmi 	_EXCBCFF
.1511	a9 01		lda #$01			lda 	#1
.1513					_EXCBCReturn:
.1513	60		rts				rts
.1514					_EXCBCFF:
.1514	a9 ff		lda #$ff			lda 	#$FF
.1516	60		rts				rts
.1517					_EXCBCRange:
.1517	4c 87 23	jmp $2387		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.151a					EXPBinLeft:
.151a	a9 ff		lda #$ff			lda 	#$FF
.151c	8d 0a 05	sta $050a			sta 	EXPShiftLeftFlag
.151f	4c 25 15	jmp $1525			jmp 	EXPShiftCommon
.1522					EXPBinRight:
.1522	9c 0a 05	stz $050a			stz 	EXPShiftLeftFlag
.1525					EXPShiftCommon:
.1525	a5 11		lda $11				lda 	IFR0+IExp 					; both integers
.1527	05 15		ora $15				ora 	IFR1+IExp
.1529	29 7f		and #$7f			and 	#$7F
.152b	d0 35		bne $1562			bne 	_EXPSRange
.152d	a5 0e		lda $0e				lda 	IFR0+IM0					; check shift >= 32
.152f	29 e0		and #$e0			and 	#$E0
.1531	05 0f		ora $0f				ora 	IFR0+IM1
.1533	05 10		ora $10				ora 	IFR0+IM2
.1535	d0 25		bne $155c			bne 	_EXPSShiftZero 				; if so return zero
.1537	5a		phy				phy
.1538	a5 0e		lda $0e				lda 	IFR0+IM0 					; get shift
.153a	29 1f		and #$1f			and 	#$1F
.153c	f0 17		beq $1555			beq 	_EXPSExit 					; exit if zero
.153e	a8		tay				tay
.153f					_EXPSLoop:
.153f	a2 12		ldx #$12			ldx 	#IFR1
.1541	2c 0a 05	bit $050a			bit 	EXPShiftLeftFlag
.1544	30 05		bmi $154b			bmi 	_EXPSShiftLeft
.1546	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftRight
.1549	80 07		bra $1552			bra 	_EXPSContinue
.154b					_EXPSShiftLeft:
.154b	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.154e	24 10		bit $10				bit 	IFR0+IM2 					; too many shifts
.1550	30 10		bmi $1562			bmi 	_EXPSRange
.1552					_EXPSContinue:
.1552	88		dey				dey
.1553	d0 ea		bne $153f			bne 	_EXPSLoop
.1555					_EXPSExit:
.1555	a2 12		ldx #$12			ldx 	#IFR1
.1557	20 42 2e	jsr $2e42			jsr 	IFloatCopyFromRegister
.155a	7a		ply				ply
.155b	60		rts				rts
.155c					_EXPSShiftZero:
.155c	a2 0e		ldx #$0e			ldx 	#IFR0
.155e	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.1561	60		rts				rts
.1562					_EXPSRange:
.1562	4c 87 23	jmp $2387		jmp	ErrorV_range
.050a					EXPShiftLeftFlag:
>050a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1565					EXPEvaluateExpression:
.1565	a9 00		lda #$00			lda 	#0 							; current precedence
.1567					EXPEvaluateExpressionPrecedenceA:
.1567	48		pha				pha
.1568	20 e2 15	jsr $15e2			jsr 	EXPTermValueR0				; do first term.
.156b					_EELoop:
.156b	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.156d	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.156f	90 31		bcc $15a2			bcc 	_EEExit
.1571	aa		tax				tax 								; access the precedence of the operator.
.1572	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1573	dd 20 18	cmp $1820,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1576	b0 2b		bcs $15a3			bcs 	_EEExit2
.1578	48		pha				pha 								; save current precedence.
.1579	da		phx				phx 								; save operator
.157a	c8		iny				iny 								; consume operator
.157b	da		phx				phx
.157c	a2 0e		ldx #$0e			ldx 	#IFR0 						; push R0 on the stack
.157e	20 00 2e	jsr $2e00			jsr 	IFloatPushRx
.1581	fa		plx				plx
.1582	bd 20 18	lda $1820,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1585	20 67 15	jsr $1567			jsr 	EXPEvaluateExpressionPrecedenceA
.1588	a2 12		ldx #$12			ldx 	#IFR1 						; pop LHS to R1.
.158a	20 21 2e	jsr $2e21			jsr 	IFloatPullRx
.158d	fa		plx				plx 								; operator
.158e	a5 11		lda $11				lda 	IFR0+IExp 					; if check types match.
.1590	45 15		eor $15				eor 	IFR1+IExp
.1592	30 08		bmi $159c			bmi 	_EEType
.1594					_EETypeOkay:
.1594	8a		txa				txa
.1595	0a		asl a				asl 	a 							; double -> X
.1596	aa		tax				tax
.1597	20 9f 15	jsr $159f			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.159a	80 cf		bra $156b			bra 	_EELoop
.159c					_EEType:
.159c	4c a6 23	jmp $23a6		jmp	ErrorV_type
.159f					_EECallBinary:
.159f	7c c8 1a	jmp ($1ac8,x)			jmp 	(VectorTable,x)
.15a2					_EEExit:
.15a2	68		pla				pla 								; throw precedence
.15a3					_EEExit2:
.15a3	18		clc				clc
.15a4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.15a5					EXPEvalNumber:
.15a5	20 65 15	jsr $1565			jsr 	EXPEvaluateExpression
.15a8	24 11		bit $11				bit 	IFR0+IExp
.15aa	30 01		bmi $15ad			bmi 	EVUType
.15ac	60		rts				rts
.15ad					EVUType:
.15ad	4c a6 23	jmp $23a6		jmp	ErrorV_type
.15b0					EXPEvalInteger:
.15b0	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.15b3	20 b1 2b	jsr $2bb1			jsr 	IFloatIntegerR0
.15b6	60		rts				rts
.15b7					EXPEvalInteger16:
.15b7	20 b0 15	jsr $15b0			jsr 	EXPEvalInteger
.15ba	a5 10		lda $10				lda 	IFR0+IM2
.15bc	d0 21		bne $15df			bne 	EVURange
.15be	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15c0	a5 0e		lda $0e				lda 	IFR0+IM0
.15c2	60		rts				rts
.15c3					EXPEvalInteger8:
.15c3	20 b0 15	jsr $15b0			jsr 	EXPEvalInteger
.15c6	a5 10		lda $10				lda 	IFR0+IM2
.15c8	05 0f		ora $0f				ora 	IFR0+IM1
.15ca	d0 13		bne $15df			bne 	EVURange
.15cc	a5 0e		lda $0e				lda 	IFR0+IM0
.15ce	60		rts				rts
.15cf					EXPEvalString:
.15cf	20 65 15	jsr $1565			jsr 	EXPEvaluateExpression
.15d2	24 11		bit $11				bit 	IFR0+IExp
.15d4	10 d7		bpl $15ad			bpl 	EVUType
.15d6	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15d8	86 21		stx $21				stx 	zTemp0+1
.15da	a5 0e		lda $0e				lda 	IFR0+IM0
.15dc	85 20		sta $20				sta 	zTemp0
.15de	60		rts				rts
.15df					EVURange:
.15df	4c 87 23	jmp $2387		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.15e2					EXPTermValueR0:
.15e2	20 2d 16	jsr $162d			jsr 	EXPTermR0 					; get term
.15e5	90 45		bcc $162c			bcc 	_ETVNotReference 			; exit if value.
.15e7	5a		phy				phy
.15e8	a0 03		ldy #$03			ldy 	#3 							; get type
.15ea	b1 0e		lda ($0e),y			lda 	(IFR0),y
.15ec	30 14		bmi $1602			bmi 	_ETVDereferenceString
.15ee	85 11		sta $11				sta 	IFR0+IExp 					; dereference to R0
.15f0	88		dey				dey
.15f1	b1 0e		lda ($0e),y			lda 	(IFR0),y
.15f3	85 10		sta $10				sta 	IFR0+IM2
.15f5	88		dey				dey
.15f6	b1 0e		lda ($0e),y			lda 	(IFR0),y
.15f8	aa		tax				tax
.15f9	b2 0e		lda ($0e)			lda 	(IFR0)
.15fb	86 0f		stx $0f				stx 	IFR0+IM1
.15fd	85 0e		sta $0e				sta 	IFR0+IM0
.15ff	7a		ply				ply
.1600	18		clc				clc
.1601	60		rts				rts
.1602					_ETVDereferenceString:
.1602	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1604	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1606	12 0e		ora ($0e)			ora 	(IFR0)
.1608	f0 11		beq $161b			beq 	_ETVNull
.160a	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; load address of string to XA
.160c	aa		tax				tax
.160d	b2 0e		lda ($0e)			lda 	(IFR0)
.160f	18		clc				clc 								; add two so points to actual string.
.1610	69 02		adc #$02			adc 	#2
.1612	90 01		bcc $1615			bcc 	_EVDSNoCarry
.1614	e8		inx				inx
.1615					_EVDSNoCarry:
.1615	86 0f		stx $0f				stx 	IFR0+IM1 					; save in slots
.1617	85 0e		sta $0e				sta 	IFR0
.1619	80 08		bra $1623			bra 	_ETVFillExit 				; tidy up and exit.
.161b					_ETVNull:
.161b	a9 2b		lda #$2b			lda 	#_EVTNString & $FF
.161d	85 0e		sta $0e				sta 	IFR0+IM0
.161f	a9 16		lda #$16			lda 	#_EVTNString >> 8
.1621	85 0f		sta $0f				sta 	IFR0+IM1
.1623					_ETVFillExit:
.1623	64 10		stz $10				stz 	IFR0+IM2
.1625	a9 80		lda #$80			lda 	#$80
.1627	85 11		sta $11				sta 	IFR0+IExp
.1629	7a		ply				ply
.162a	60		rts				rts
.162b					_EVTNString:
>162b	00						.byte 	0
.162c					_ETVNotReference:
.162c	60		rts				rts
.162d					EXPTermR0:
.162d	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token/element
.162f	30 10		bmi $1641			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1631	c8		iny				iny 								; consume element
.1632	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1634	b0 08		bcs $163e			bcs 	_ETMIdentifier
.1636	20 65 16	jsr $1665			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1639	20 98 16	jsr $1698			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.163c	18		clc				clc 								; return value
.163d	60		rts				rts
.163e					_ETMIdentifier:
.163e	4c 48 28	jmp $2848			jmp 	VARCheckSimple 				; check simple variables A-Z
.1641					_ETMIsUnaryOrMinus:
.1641	c8		iny				iny 								; consume element
.1642	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1644	d0 0a		bne $1650			bne 	_ETMCheckUnary
.1646	20 e2 15	jsr $15e2			jsr 	EXPTermValueR0 				; get a term to negate
.1649	a2 0e		ldx #$0e			ldx 	#IFR0 						; and negate it
.164b	20 bc 2e	jsr $2ebc			jsr 	IFloatNegate
.164e	18		clc				clc
.164f	60		rts				rts
.1650					_ETMCheckUnary:
.1650	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1652	90 0e		bcc $1662			bcc 	_ETMUnarySyntax
.1654	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1656	b0 0a		bcs $1662			bcs 	_ETMUnarySyntax
.1658	0a		asl a				asl 	a
.1659	aa		tax				tax
.165a	20 5f 16	jsr $165f			jsr 	_ETMCallUnaryFunction
.165d	18		clc				clc
.165e	60		rts				rts
.165f					_ETMCallUnaryFunction:
.165f	7c c8 1a	jmp ($1ac8,x)			jmp 	(VectorTable,x)
.1662					_ETMUnarySyntax:
.1662	4c 76 23	jmp $2376		jmp	ErrorV_syntax
.1665					EXPExtractTokenisedInteger:
.1665	85 0e		sta $0e				sta 	IFR0+IM0 					; initial value in IM0
.1667	64 11		stz $11				stz 	IFR0+IExp
.1669	64 0f		stz $0f				stz 	IFR0+IM1
.166b	64 10		stz $10				stz 	IFR0+IM2
.166d					_ETMConstant:
.166d	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.166f	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1671	b0 24		bcs $1697			bcs 	_ETMCExit 					; no.
.1673	a6 10		ldx $10				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1675	a5 0f		lda $0f				lda 	IFR0+IM1
.1677	85 10		sta $10				sta 	IFR0+IM2
.1679	a5 0e		lda $0e				lda 	IFR0+IM0
.167b	85 0f		sta $0f				sta 	IFR0+IM1
.167d	64 0e		stz $0e				stz 	IFR0+IM0
.167f	8a		txa				txa
.1680	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1681	66 10		ror $10				ror 	IFR0+IM2
.1683	66 0f		ror $0f				ror 	IFR0+IM1
.1685	66 0e		ror $0e				ror 	IFR0+IM0
.1687	4a		lsr a				lsr 	a
.1688	66 10		ror $10				ror 	IFR0+IM2
.168a	66 0f		ror $0f				ror 	IFR0+IM1
.168c	66 0e		ror $0e				ror 	IFR0+IM0
.168e	a5 0e		lda $0e				lda 	IFR0+IM0 					; LSB in.
.1690	11 1e		ora ($1e),y			ora 	(codePtr),y
.1692	85 0e		sta $0e				sta 	IFR0+IM0
.1694	c8		iny				iny 								; consume, loop back
.1695	80 d6		bra $166d			bra 	_ETMConstant
.1697					_ETMCExit:
.1697	60		rts				rts
.1698					EXPCheckDecimalFollows:
.1698	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check for decimal
.169a	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.169c	d0 19		bne $16b7			bne 	_ETMCDExit
.169e	c8		iny				iny 								; consume token.
.169f	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get count
.16a1	5a		phy				phy									; save current position
.16a2	48		pha				pha 								; save count of chars.
.16a3	38		sec				sec 								; address into YX : y + codePtr+1
.16a4	98		tya				tya
.16a5	65 1e		adc $1e				adc 	codePtr
.16a7	aa		tax				tax
.16a8	a5 1f		lda $1f				lda 	codePtr+1
.16aa	69 00		adc #$00			adc 	#0
.16ac	a8		tay				tay
.16ad	68		pla				pla 								; get count.
.16ae	20 55 2d	jsr $2d55			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.16b1	7a		ply				ply 								; go to next token.
.16b2	98		tya				tya
.16b3	38		sec				sec
.16b4	71 1e		adc ($1e),y			adc 	(codePtr),y
.16b6	a8		tay				tay
.16b7					_ETMCDExit:
.16b7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.16b8					EXPUnaryAbs:
.16b8	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 					; number to R0
.16bb	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.16be	20 f5 2a	jsr $2af5			jsr 	IFloatAbsoluteR0
.16c1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.16c2					EXPUnaryAsc:
.16c2	20 cf 15	jsr $15cf			jsr 	EXPEvalString 					; string to R0, zTemp0
.16c5	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.16c8	b2 20		lda ($20)			lda 	(zTemp0) 						; length 0 ?
.16ca	f0 06		beq $16d2			beq 	_EXAZero 						; if so return 0
.16cc	5a		phy				phy 									; otherwise get first character
.16cd	a0 01		ldy #$01			ldy 	#1
.16cf	b1 20		lda ($20),y			lda 	(zTemp0),y
.16d1	7a		ply				ply
.16d2					_EXAZero:
.16d2	a2 0e		ldx #$0e			ldx 	#IFR0
.16d4	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.16d7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.16d8					EXPUnaryChr:
.16d8	20 c3 15	jsr $15c3			jsr 	EXPEvalInteger8 				; expr
.16db	48		pha				pha 									; push on stack
.16dc	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.16df	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.16e1	20 ff 25	jsr $25ff			jsr 	StringTempAllocate
.16e4	68		pla				pla
.16e5	20 34 26	jsr $2634			jsr 	StringTempWrite
.16e8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.16e9					EXPUnaryDec:
.16e9	20 cf 15	jsr $15cf			jsr 	EXPEvalString 					; string to R0, zTemp0
.16ec	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.16ef	5a		phy				phy
.16f0	a2 0e		ldx #$0e			ldx 	#IFR0 							; zero the result
.16f2	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.16f5	b2 20		lda ($20)			lda 	(zTemp0)						; read the length to X
.16f7	f0 3b		beq $1734			beq 	_EUDError 						; empty string
.16f9	aa		tax				tax
.16fa	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.16fc					_EUDLoop:
.16fc	b1 20		lda ($20),y			lda 	(zTemp0),y 						; get next
.16fe	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1700	90 02		bcc $1704			bcc 	_EUDNoCase
.1702	e9 20		sbc #$20			sbc 	#$20
.1704					_EUDNoCase:
.1704	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1706	90 2c		bcc $1734			bcc 	_EUDError
.1708	c9 3a		cmp #$3a			cmp 	#'9'+1
.170a	90 0a		bcc $1716			bcc 	_EUDOkay
.170c	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.170e	90 24		bcc $1734			bcc 	_EUDError
.1710	c9 47		cmp #$47			cmp 	#'F'+1
.1712	b0 20		bcs $1734			bcs 	_EUDError
.1714	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1716					_EUDOkay:
.1716	29 0f		and #$0f			and 	#15 							; make constant
.1718	da		phx				phx
.1719	48		pha				pha
.171a	a2 0e		ldx #$0e			ldx 	#IFR0 							; multiply R0 x 16
.171c	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.171f	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1722	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1725	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1728	68		pla				pla 									; pop constant and OR in
.1729	fa		plx				plx
.172a	05 0e		ora $0e				ora 	IFR0+IM0
.172c	85 0e		sta $0e				sta 	IFR0+IM0
.172e	c8		iny				iny 									; next
.172f	ca		dex				dex
.1730	d0 ca		bne $16fc			bne 	_EUDLoop
.1732	7a		ply				ply
.1733	60		rts				rts
.1734					_EUDError:
.1734	4c 98 23	jmp $2398		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1737					EXPUnaryInlineDec:
.1737	4c 76 23	jmp $2376		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.173a					EXPUnaryPeek:
.173a	20 b7 15	jsr $15b7			jsr 	EXPEvalInteger16 				; number to R0
.173d	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.1740	b2 0e		lda ($0e)			lda 	(IFR0)
.1742	a2 0e		ldx #$0e			ldx 	#IFR0
.1744	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.1747	60		rts				rts
.1748					EXPUnaryDeek:
.1748	20 b7 15	jsr $15b7			jsr 	EXPEvalInteger16 				; number to R0
.174b	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.174e	5a		phy				phy
.174f	a0 01		ldy #$01			ldy 	#1
.1751	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1753	7a		ply				ply
.1754	48		pha				pha
.1755	b2 0e		lda ($0e)			lda 	(IFR0)
.1757	a2 0e		ldx #$0e			ldx 	#IFR0
.1759	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.175c	68		pla				pla
.175d	85 0f		sta $0f				sta 	IFR0+IM1
.175f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1760					EXPUnaryNull:
.1760	20 e2 15	jsr $15e2			jsr 	EXPTermValueR0
.1763	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1764					EXPUnaryFrac:
.1764	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 					; number to R0
.1767	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.176a	20 5b 2b	jsr $2b5b			jsr 	IFloatFractionalR0
.176d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.176e					EXPUnaryInt:
.176e	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 					; number to R0
.1771	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.1774	20 b1 2b	jsr $2bb1			jsr 	IFloatIntegerR0
.1777	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1778					EXPUnaryLen:
.1778	20 cf 15	jsr $15cf			jsr 	EXPEvalString 					; string to R0, zTemp0
.177b	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.177e	b2 20		lda ($20)			lda 	(zTemp0)
.1780	a2 0e		ldx #$0e			ldx 	#IFR0
.1782	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.1785	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1786					EXPUnaryParenthesis:
.1786	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 					; number to R0
.1789	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.178c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.178d					EXPUnaryRnd:
.178d	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 				; number to R0
.1790	20 09 25	jsr $2509			jsr 	ERRCheckRParen 				; )
.1793	a2 0e		ldx #$0e			ldx 	#IFR0
.1795	20 ac 17	jsr $17ac			jsr 	EXPLoadInRandom
.1798	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.179a	85 11		sta $11				sta 	IFR0+IExp
.179c	60		rts				rts
.179d					ExpUnaryRand:
.179d	20 b0 15	jsr $15b0			jsr 	EXPEvalInteger 				; integer to R0
.17a0	20 09 25	jsr $2509			jsr 	ERRCheckRParen 				; )
.17a3	a2 12		ldx #$12			ldx 	#IFR1 						; random to R1
.17a5	20 ac 17	jsr $17ac			jsr 	EXPLoadInRandom
.17a8	20 22 2a	jsr $2a22			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.17ab	60		rts				rts
.17ac					EXPLoadInRandom:
.17ac	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.17af	20 c1 17	jsr $17c1			jsr 	EXPRandom32
.17b2	95 00		sta $00,x			sta 	IM0,x
.17b4	20 c1 17	jsr $17c1			jsr 	EXPRandom32
.17b7	95 01		sta $01,x			sta 	IM1,x
.17b9	20 c1 17	jsr $17c1			jsr 	EXPRandom32
.17bc	29 7f		and #$7f			and 	#$7F
.17be	95 02		sta $02,x			sta 	IM2,x
.17c0	60		rts				rts
.17c1					EXPRandom32:
.17c1	5a		phy				phy
.17c2	a0 08		ldy #$08			ldy 	#8
.17c4	ad 0b 05	lda $050b			lda 	EXPSeed+0
.17c7	0d 0c 05	ora $050c			ora 	EXPSeed+1
.17ca	0d 0d 05	ora $050d			ora 	EXPSeed+2
.17cd	0d 0e 05	ora $050e			ora 	EXPSeed+3
.17d0	d0 08		bne $17da			bne 	_EXPRNoReset
.17d2	ee 0b 05	inc $050b			inc 	EXPSeed+0
.17d5	a0 10		ldy #$10			ldy 	#16
.17d7	8c 0e 05	sty $050e			sty 	EXPSeed+3
.17da					_EXPRNoReset:
.17da	ad 0b 05	lda $050b			lda 	EXPSeed+0
.17dd					_EXPRLoop:
.17dd	0a		asl a				asl		a
.17de	2e 0c 05	rol $050c			rol 	EXPSeed+1
.17e1	2e 0d 05	rol $050d			rol 	EXPSeed+2
.17e4	2e 0e 05	rol $050e			rol 	EXPSeed+3
.17e7	90 02		bcc $17eb			bcc 	_EXPRNoEOR
.17e9	49 c5		eor #$c5			eor 	#$C5
.17eb					_EXPRNoEOR:
.17eb	88		dey				dey
.17ec	d0 ef		bne $17dd			bne 	_EXPRLoop
.17ee	8d 0b 05	sta $050b			sta 	EXPSeed+0
.17f1	7a		ply				ply
.17f2	60		rts				rts
.050b					EXPSeed:
>050b							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.17f3					EXPUnarySgn:
.17f3	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 					; number to R0
.17f6	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.17f9	a2 12		ldx #$12			ldx 	#IFR1 							; copy to R1
.17fb	20 53 2e	jsr $2e53			jsr 	IFloatCopyToRegister
.17fe	a2 0e		ldx #$0e			ldx 	#IFR0 							; R0 = 0
.1800	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.1803	a2 12		ldx #$12			ldx 	#IFR1
.1805	20 7f 2b	jsr $2b7f			jsr 	IFloatCompare 					; compare R1 vs 0.
.1808	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1809					EXPUnarySqr:
.1809	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 					; number to R0
.180c	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.180f	20 fd 2a	jsr $2afd			jsr 	IFloatSquareRootR0 				; square root.
.1812	b0 01		bcs $1815			bcs 	_EUSValue
.1814	60		rts				rts
.1815					_EUSValue:
.1815	4c 87 23	jmp $2387		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1818					EXPUnaryHex:
.1818	20 b0 15	jsr $15b0			jsr 	EXPEvalInteger 					; expr
.181b	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.181e	5a		phy				phy
.181f	a9 10		lda #$10			lda 	#16
.1821	20 52 2c	jsr $2c52			jsr 	IFloatIntegerToStringR0
.1824	80 0a		bra $1830			bra 	EUSMain
.1826					EXPUnaryStr:
.1826	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 					; expr
.1829	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.182c	5a		phy				phy
.182d	20 ae 2c	jsr $2cae			jsr 	IFloatFloatToStringR0 			; convert to string
.1830					EUSMain:
.1830	b0 18		bcs $184a			bcs 	_EUSError
.1832	86 20		stx $20				stx 	zTemp0 							; save string address
.1834	84 21		sty $21				sty 	zTemp0+1
.1836	48		pha				pha 									; save count
.1837	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1839	20 ff 25	jsr $25ff			jsr 	StringTempAllocate
.183c	fa		plx				plx 									; count in X
.183d	a0 00		ldy #$00			ldy 	#0
.183f					_EUSCopy:
.183f	b1 20		lda ($20),y			lda 	(zTemp0),y
.1841	c8		iny				iny
.1842	20 34 26	jsr $2634			jsr 	StringTempWrite
.1845	ca		dex				dex
.1846	d0 f7		bne $183f			bne	 	_EUSCopy
.1848	7a		ply				ply
.1849	60		rts				rts
.184a					_EUSError:
.184a	4c 87 23	jmp $2387		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.184d					EXPUnaryInlineString:
.184d	18		clc				clc 								; physical address -> IM0,1
.184e	98		tya				tya
.184f	65 1e		adc $1e				adc 	codePtr
.1851	85 0e		sta $0e				sta 	IFR0+IM0
.1853	a5 1f		lda $1f				lda 	codePtr+1
.1855	69 00		adc #$00			adc 	#0
.1857	85 0f		sta $0f				sta 	IFR0+IM1
.1859	64 10		stz $10				stz 	IFR0+IM2 					; fill in rest
.185b	a9 80		lda #$80			lda 	#$80
.185d	85 11		sta $11				sta 	IFR0+IExp
.185f	98		tya				tya	 								; skip over it.
.1860	38		sec				sec
.1861	71 1e		adc ($1e),y			adc 	(codePtr),y
.1863	a8		tay				tay
.1864	60		rts				rts
.1865					_EXPUISRange:
.1865	4c 87 23	jmp $2387		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1868					EXPUnaryLeft:
.1868	20 ae 18	jsr $18ae			jsr 	EXPCommonStart 					; <string>,
.186b	48		pha				pha 									; save string address on stack
.186c	da		phx				phx
.186d	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.186f	48		pha				pha
.1870	20 c3 15	jsr $15c3			jsr 	EXPEvalInteger8 				; characters to do
.1873	80 44		bra $18b9			bra 	EXPSubstringCommon
.1875					EXPUnaryRight:
.1875	20 ae 18	jsr $18ae			jsr 	EXPCommonStart 					; <string>,
.1878	48		pha				pha 									; save string address on stack
.1879	da		phx				phx
.187a	b2 0e		lda ($0e)			lda 	(IFR0) 							; the string length => stack.
.187c	48		pha				pha
.187d	20 c3 15	jsr $15c3			jsr 	EXPEvalInteger8 				; characters to do
.1880	85 20		sta $20				sta 	zTemp0 							; calculate length - required, start point.
.1882	68		pla				pla
.1883	38		sec				sec
.1884	e5 20		sbc $20				sbc 	zTemp0
.1886	b0 02		bcs $188a			bcs 	_EUROffLeft
.1888	a9 00		lda #$00			lda 	#0
.188a					_EUROffLeft:
.188a	48		pha				pha 									; start pos
.188b	a9 ff		lda #$ff			lda 	#255
.188d	80 2a		bra $18b9			bra 	EXPSubstringCommon
.188f					EXPUnaryMid:
.188f	20 ae 18	jsr $18ae			jsr 	EXPCommonStart 					; <string>,
.1892	48		pha				pha 									; save string address on stack
.1893	da		phx				phx
.1894	20 c3 15	jsr $15c3			jsr 	EXPEvalInteger8 				; characters start
.1897	f0 12		beq $18ab			beq 	_EUSError 						; 1 is left
.1899	3a		dec a				dec 	a 								; zero based.
.189a	48		pha				pha
.189b	b1 1e		lda ($1e),y			lda 	(codePtr),y 					; comma follows
.189d	c9 99		cmp #$99			cmp 	#PR_COMMA
.189f	f0 04		beq $18a5			beq 	_EUMLength 						; if so m is provided
.18a1	a9 ff		lda #$ff			lda 	#255 							; default m
.18a3	80 14		bra $18b9			bra 	EXPSubstringCommon
.18a5					_EUMLength:
.18a5	c8		iny				iny 									; consume comma
.18a6	20 c3 15	jsr $15c3			jsr 	EXPEvalInteger8 				; characters to do
.18a9	80 0e		bra $18b9			bra 	EXPSubstringCommon
.18ab					_EUSError:
.18ab	4c 98 23	jmp $2398		jmp	ErrorV_value
.18ae					EXPCommonStart:
.18ae	20 cf 15	jsr $15cf			jsr 	EXPEvalString
.18b1	20 11 25	jsr $2511			jsr 	ERRCheckComma
.18b4	a5 0e		lda $0e				lda 	IFR0+IM0
.18b6	a6 0f		ldx $0f				ldx 	IFR0+IM1
.18b8	60		rts				rts
.18b9					EXPSubstringCommon:
.18b9	85 22		sta $22				sta 	zTemp1 							; count to do in zTemp1.
.18bb	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; check right bracket.
.18be	68		pla				pla 									; start position
.18bf	85 23		sta $23				sta 	zTemp1+1 						; save in zTemp1+1
.18c1	fa		plx				plx 									; get string address to zTemp2.
.18c2	86 25		stx $25				stx 	zTemp2+1
.18c4	68		pla				pla
.18c5	85 24		sta $24				sta 	zTemp2
.18c7	38		sec				sec 									; length - start is the max count of chars
.18c8	b2 24		lda ($24)			lda 	(zTemp2)
.18ca	e5 23		sbc $23				sbc 	zTemp1+1
.18cc	c5 22		cmp $22				cmp 	zTemp1 							; if available < count
.18ce	b0 02		bcs $18d2			bcs 	_EXPSSNoTrim
.18d0	85 22		sta $22				sta 	zTemp1 							; update count with available
.18d2					_EXPSSNoTrim:
.18d2	a5 22		lda $22				lda 	zTemp1 							; chars required.
.18d4	20 ff 25	jsr $25ff			jsr 	StringTempAllocate 				; allocate memory for it.
.18d7	a5 22		lda $22				lda 	zTemp1 							; zero length string
.18d9	f0 15		beq $18f0			beq 	_EXPSSExit
.18db	a5 23		lda $23				lda 	zTemp1+1 						; if length >= start exit
.18dd	d2 24		cmp ($24)			cmp 	(zTemp2)
.18df	b0 0f		bcs $18f0			bcs 	_EXPSSExit
.18e1	5a		phy				phy
.18e2	a4 23		ldy $23				ldy 	zTemp1+1 						; start position
.18e4	c8		iny				iny 									; +1 for the length byte
.18e5					_EXPSSCopy:
.18e5	b1 24		lda ($24),y			lda 	(zTemp2),y
.18e7	20 34 26	jsr $2634			jsr 	StringTempWrite
.18ea	c8		iny				iny
.18eb	c6 22		dec $22				dec 	zTemp1
.18ed	d0 f6		bne $18e5			bne 	_EXPSSCopy
.18ef	7a		ply				ply
.18f0					_EXPSSExit:
.18f0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.18f1					EXPUnaryVal:
.18f1	20 cf 15	jsr $15cf			jsr 	EXPEvalString 					; string to R0, zTemp0
.18f4	20 09 25	jsr $2509			jsr 	ERRCheckRParen 					; )
.18f7	5a		phy				phy
.18f8	18		clc				clc
.18f9	a5 20		lda $20				lda		zTemp0 							; point XY to the text
.18fb	69 01		adc #$01			adc 	#1
.18fd	aa		tax				tax
.18fe	a5 21		lda $21				lda 	zTemp0+1
.1900	69 00		adc #$00			adc 	#0
.1902	a8		tay				tay
.1903	b2 20		lda ($20)			lda 	(zTemp0) 						; get length.
.1905	20 15 2d	jsr $2d15			jsr 	IFloatStringToFloatR0 			; do conversion
.1908	b0 02		bcs $190c			bcs 	_EUVError
.190a	7a		ply				ply
.190b	60		rts				rts
.190c					_EUVError:
.190c	4c 98 23	jmp $2398		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.190f					BinaryPrecedence:
>190f	02					.byte	 2	; $ef =
>1910	02					.byte	 2	; $f0 <>
>1911	02					.byte	 2	; $f1 <=
>1912	02					.byte	 2	; $f2 <
>1913	02					.byte	 2	; $f3 >=
>1914	02					.byte	 2	; $f4 >
>1915	01					.byte	 1	; $f5 XOR
>1916	01					.byte	 1	; $f6 OR
>1917	01					.byte	 1	; $f7 AND
>1918	04					.byte	 4	; $f8 DIV
>1919	04					.byte	 4	; $f9 MOD
>191a	04					.byte	 4	; $fa <<
>191b	04					.byte	 4	; $fb >>
>191c	04					.byte	 4	; $fc /
>191d	04					.byte	 4	; $fd *
>191e	03					.byte	 3	; $fe -
>191f	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1920					StructureOffsets:
>1920	01					.byte	1  	; $80 REPEAT
>1921	ff					.byte	255	; $81 UNTIL
>1922	01					.byte	1  	; $82 WHILE
>1923	ff					.byte	255	; $83 WEND
>1924	01					.byte	1  	; $84 IF
>1925	ff					.byte	255	; $85 ENDIF
>1926	01					.byte	1  	; $86 DO
>1927	ff					.byte	255	; $87 LOOP
>1928	01					.byte	1  	; $88 PROC
>1929	ff					.byte	255	; $89 ENDPROC
>192a	01					.byte	1  	; $8a FOR
>192b	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.192c					StandardTokens:
>192c	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1933	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1939	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>193f	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1944	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1947	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>194d	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1950	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1955	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>195a	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1962	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1966	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>196b	00					.byte	$00                                     	; $8c [[end]]
>196c	00					.byte	$00                                     	; $8d [[shift]]
>196d	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1972	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1977	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>197a	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>197f	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1983	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1989	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>198f	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1994	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1998	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>199c	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>19a1	01 2c					.byte	$01,$2c                                 	; $99 ,
>19a3	01 3b					.byte	$01,$3b                                 	; $9a ;
>19a5	01 3a					.byte	$01,$3a                                 	; $9b :
>19a7	01 27					.byte	$01,$27                                 	; $9c '
>19a9	01 29					.byte	$01,$29                                 	; $9d )
>19ab	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>19af	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>19b5	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>19b9	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>19bd	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>19c2	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>19c6	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>19cd	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>19d2	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>19d7	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>19dc	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>19e1	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>19e6	00					.byte	0											; $aa
>19e7	00					.byte	0											; $ab
>19e8	00					.byte	0											; $ac
>19e9	00					.byte	0											; $ad
>19ea	00					.byte	0											; $ae
>19eb	00					.byte	0											; $af
>19ec	00					.byte	0											; $b0
>19ed	00					.byte	0											; $b1
>19ee	00					.byte	0											; $b2
>19ef	00					.byte	0											; $b3
>19f0	00					.byte	0											; $b4
>19f1	00					.byte	0											; $b5
>19f2	00					.byte	0											; $b6
>19f3	00					.byte	0											; $b7
>19f4	00					.byte	0											; $b8
>19f5	00					.byte	0											; $b9
>19f6	00					.byte	0											; $ba
>19f7	00					.byte	0											; $bb
>19f8	00					.byte	0											; $bc
>19f9	00					.byte	0											; $bd
>19fa	00					.byte	0											; $be
>19fb	00					.byte	0											; $bf
>19fc	00					.byte	0											; $c0
>19fd	00					.byte	0											; $c1
>19fe	00					.byte	0											; $c2
>19ff	00					.byte	0											; $c3
>1a00	00					.byte	0											; $c4
>1a01	00					.byte	0											; $c5
>1a02	00					.byte	0											; $c6
>1a03	00					.byte	0											; $c7
>1a04	00					.byte	0											; $c8
>1a05	00					.byte	0											; $c9
>1a06	00					.byte	0											; $ca
>1a07	00					.byte	0											; $cb
>1a08	00					.byte	0											; $cc
>1a09	00					.byte	0											; $cd
>1a0a	00					.byte	0											; $ce
>1a0b	00					.byte	0											; $cf
>1a0c	00					.byte	0											; $d0
>1a0d	00					.byte	0											; $d1
>1a0e	00					.byte	0											; $d2
>1a0f	00					.byte	0											; $d3
>1a10	00					.byte	0											; $d4
>1a11	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1a17	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1a1d	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1a25	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1a2c	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1a32	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1a38	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1a3d	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1a42	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1a47	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1a4c	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1a51	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1a57	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1a5c	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1a64	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1a6b	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1a70	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1a75	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1a7b	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1a80	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1a86	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1a8b	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1a91	01 28					.byte	$01,$28                                 	; $eb (
>1a93	01 24					.byte	$01,$24                                 	; $ec $
>1a95	00					.byte	$00                                     	; $ed [[decimal]]
>1a96	00					.byte	$00                                     	; $ee [[string]]
>1a97	01 3d					.byte	$01,$3d                                 	; $ef =
>1a99	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1a9c	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1a9f	01 3c					.byte	$01,$3c                                 	; $f2 <
>1aa1	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1aa4	01 3e					.byte	$01,$3e                                 	; $f4 >
>1aa6	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1aaa	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1aad	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1ab1	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1ab5	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1ab9	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1abc	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1abf	01 2f					.byte	$01,$2f                                 	; $fc /
>1ac1	01 2a					.byte	$01,$2a                                 	; $fd *
>1ac3	01 2d					.byte	$01,$2d                                 	; $fe -
>1ac5	01 2b					.byte	$01,$2b                                 	; $ff +
>1ac7	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1ac8					VectorTable:
>1ac8	6a 22					.word	Command_REPEAT           ; $80 REPEAT
>1aca	73 22					.word	Command_UNTIL            ; $81 UNTIL
>1acc	4b 23					.word	Command_WHILE            ; $82 WHILE
>1ace	6a 23					.word	Command_WEND             ; $83 WEND
>1ad0	42 22					.word	IfCommand                ; $84 IF
>1ad2	69 22					.word	EndIf                    ; $85 ENDIF
>1ad4	df 20					.word	Command_DO               ; $86 DO
>1ad6	f7 20					.word	Command_LOOP             ; $87 LOOP
>1ad8	e5 13					.word	NoExec08                 ; $88 PROC
>1ada	d3 20					.word	Command_ENDPROC          ; $89 ENDPROC
>1adc	00 21					.word	Command_FOR              ; $8a FOR
>1ade	8d 21					.word	Command_NEXT             ; $8b NEXT
>1ae0	7d 13					.word	RUNEndOfLine             ; $8c [[END]]
>1ae2	c7 13					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1ae4	62 22					.word	ElseCode                 ; $8e ELSE
>1ae6	e5 13					.word	NoExec01                 ; $8f THEN
>1ae8	e5 13					.word	NoExec02                 ; $90 TO
>1aea	e5 13					.word	NoExec03                 ; $91 STEP
>1aec	1e 12					.word	CommandLET               ; $92 LET
>1aee	b9 11					.word	Command_Print            ; $93 PRINT
>1af0	86 26					.word	NotImplemented           ; $94 INPUT
>1af2	97 20					.word	Command_CALL             ; $95 CALL
>1af4	d0 13					.word	Command_Sys              ; $96 SYS
>1af6	64 13					.word	Command_REM              ; $97 REM
>1af8	e8 20					.word	Command_EXIT             ; $98 EXIT
>1afa	e5 13					.word	NoExec04                 ; $99 ,
>1afc	e5 13					.word	NoExec05                 ; $9a ;
>1afe	e5 13					.word	NoExec06                 ; $9b :
>1b00	64 13					.word	Command_REM2             ; $9c '
>1b02	e5 13					.word	NoExec07                 ; $9d )
>1b04	73 10					.word	CommandDIM               ; $9e DIM
>1b06	23 10					.word	Command_CLEAR            ; $9f CLEAR
>1b08	5b 13					.word	Command_NEW              ; $a0 NEW
>1b0a	71 13					.word	Command_RUN              ; $a1 RUN
>1b0c	cd 13					.word	Command_STOP             ; $a2 STOP
>1b0e	ca 13					.word	Command_END              ; $a3 END
>1b10	15 10					.word	Command_ASSERT           ; $a4 ASSERT
>1b12	96 12					.word	Command_LIST             ; $a5 LIST
>1b14	86 26					.word	NotImplemented           ; $a6 SAVE
>1b16	86 26					.word	NotImplemented           ; $a7 LOAD
>1b18	92 11					.word	Command_Poke             ; $a8 POKE
>1b1a	8f 11					.word	Command_Doke             ; $a9 DOKE
>1b1c	86 26					.word	NotImplemented           ; $aa
>1b1e	86 26					.word	NotImplemented           ; $ab
>1b20	86 26					.word	NotImplemented           ; $ac
>1b22	86 26					.word	NotImplemented           ; $ad
>1b24	86 26					.word	NotImplemented           ; $ae
>1b26	86 26					.word	NotImplemented           ; $af
>1b28	86 26					.word	NotImplemented           ; $b0
>1b2a	86 26					.word	NotImplemented           ; $b1
>1b2c	86 26					.word	NotImplemented           ; $b2
>1b2e	86 26					.word	NotImplemented           ; $b3
>1b30	86 26					.word	NotImplemented           ; $b4
>1b32	86 26					.word	NotImplemented           ; $b5
>1b34	86 26					.word	NotImplemented           ; $b6
>1b36	86 26					.word	NotImplemented           ; $b7
>1b38	86 26					.word	NotImplemented           ; $b8
>1b3a	86 26					.word	NotImplemented           ; $b9
>1b3c	86 26					.word	NotImplemented           ; $ba
>1b3e	86 26					.word	NotImplemented           ; $bb
>1b40	86 26					.word	NotImplemented           ; $bc
>1b42	86 26					.word	NotImplemented           ; $bd
>1b44	86 26					.word	NotImplemented           ; $be
>1b46	86 26					.word	NotImplemented           ; $bf
>1b48	86 26					.word	NotImplemented           ; $c0
>1b4a	86 26					.word	NotImplemented           ; $c1
>1b4c	86 26					.word	NotImplemented           ; $c2
>1b4e	86 26					.word	NotImplemented           ; $c3
>1b50	86 26					.word	NotImplemented           ; $c4
>1b52	86 26					.word	NotImplemented           ; $c5
>1b54	86 26					.word	NotImplemented           ; $c6
>1b56	86 26					.word	NotImplemented           ; $c7
>1b58	86 26					.word	NotImplemented           ; $c8
>1b5a	86 26					.word	NotImplemented           ; $c9
>1b5c	86 26					.word	NotImplemented           ; $ca
>1b5e	86 26					.word	NotImplemented           ; $cb
>1b60	86 26					.word	NotImplemented           ; $cc
>1b62	86 26					.word	NotImplemented           ; $cd
>1b64	86 26					.word	NotImplemented           ; $ce
>1b66	86 26					.word	NotImplemented           ; $cf
>1b68	86 26					.word	NotImplemented           ; $d0
>1b6a	86 26					.word	NotImplemented           ; $d1
>1b6c	86 26					.word	NotImplemented           ; $d2
>1b6e	86 26					.word	NotImplemented           ; $d3
>1b70	86 26					.word	NotImplemented           ; $d4
>1b72	48 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1b74	3a 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1b76	75 18					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1b78	68 18					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1b7a	8f 18					.word	EXPUnaryMid              ; $d9 MID$(
>1b7c	26 18					.word	EXPUnaryStr              ; $da STR$(
>1b7e	f1 18					.word	EXPUnaryVal              ; $db VAL(
>1b80	f3 17					.word	EXPUnarySgn              ; $dc SGN(
>1b82	b8 16					.word	EXPUnaryAbs              ; $dd ABS(
>1b84	78 17					.word	EXPUnaryLen              ; $de LEN(
>1b86	09 18					.word	EXPUnarySqr              ; $df SQR(
>1b88	d8 16					.word	EXPUnaryChr              ; $e0 CHR$(
>1b8a	c2 16					.word	EXPUnaryAsc              ; $e1 ASC(
>1b8c	86 26					.word	NotImplemented           ; $e2 INKEY$(
>1b8e	86 26					.word	NotImplemented           ; $e3 EVENT(
>1b90	86 26					.word	NotImplemented           ; $e4 TIME
>1b92	6e 17					.word	EXPUnaryInt              ; $e5 INT(
>1b94	64 17					.word	EXPUnaryFrac             ; $e6 FRAC(
>1b96	e9 16					.word	EXPUnaryDec              ; $e7 DEC(
>1b98	18 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1b9a	8d 17					.word	EXPUnaryRnd              ; $e9 RND(
>1b9c	9d 17					.word	ExpUnaryRand             ; $ea RAND(
>1b9e	86 17					.word	EXPUnaryParenthesis      ; $eb (
>1ba0	60 17					.word	EXPUnaryNull             ; $ec $
>1ba2	37 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1ba4	4d 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1ba6	a2 14					.word	EXPCompareEqual          ; $ef =
>1ba8	bd 14					.word	EXPCompareNotEqual       ; $f0 <>
>1baa	c6 14					.word	EXPCompareLessEqual      ; $f1 <=
>1bac	ab 14					.word	EXPCompareLess           ; $f2 <
>1bae	cf 14					.word	EXPCompareGreaterEqual   ; $f3 >=
>1bb0	b4 14					.word	EXPCompareGreater        ; $f4 >
>1bb2	4f 14					.word	EXPBinXor                ; $f5 XOR
>1bb4	43 14					.word	EXPBinOr                 ; $f6 OR
>1bb6	37 14					.word	EXPBinAnd                ; $f7 AND
>1bb8	0f 14					.word	EXPBinIDiv               ; $f8 DIV
>1bba	20 14					.word	EXPBinIMod               ; $f9 MOD
>1bbc	1a 15					.word	EXPBinLeft               ; $fa <<
>1bbe	22 15					.word	EXPBinRight              ; $fb >>
>1bc0	03 14					.word	EXPBinFDiv               ; $fc /
>1bc2	fa 13					.word	EXPBinMul                ; $fd *
>1bc4	f1 13					.word	EXPBinSub                ; $fe -
>1bc6	e8 13					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1bc8					TOKDetokenise:
.1bc8	86 24		stx $24				stx 	zTemp2 						; save tokenised code in zTemp2
.1bca	84 25		sty $25				sty 	zTemp2+1
.1bcc	9c 11 05	stz $0511			stz		TOKLastCharacter 			; clear last character
.1bcf					_TOKDLoop:
.1bcf	20 fe 1b	jsr $1bfe			jsr 	TOKDGet 					; get next
.1bd2	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1bd4	f0 26		beq $1bfc			beq 	_TOKDExit
.1bd6	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1bd8	f0 1d		beq $1bf7			beq 	_TOKDDataItem
.1bda	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1bdc	f0 19		beq $1bf7			beq 	_TOKDDataItem
.1bde	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1be0	10 05		bpl $1be7			bpl 	_TOKDNotToken
.1be2	20 c6 1c	jsr $1cc6			jsr 	TOKDToken 					; token to text.
.1be5	80 e8		bra $1bcf			bra 	_TOKDLoop
.1be7					_TOKDNotToken:
.1be7	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1be9	90 05		bcc $1bf0			bcc 	_TOKDNotIdentifier
.1beb	20 39 1c	jsr $1c39			jsr 	TOKDIdentifier
.1bee	80 df		bra $1bcf			bra 	_TOKDLoop
.1bf0					_TOKDNotIdentifier:
.1bf0	a0 0a		ldy #$0a			ldy 	#10
.1bf2	20 82 1c	jsr $1c82			jsr 	TOKDInteger
.1bf5	80 d8		bra $1bcf			bra 	_TOKDLoop
.1bf7					_TOKDDataItem:
.1bf7	20 14 1c	jsr $1c14			jsr 	TOKDDataItem
.1bfa	80 d3		bra $1bcf			bra 	_TOKDLoop
.1bfc					_TOKDExit:
.1bfc	18		clc				clc
.1bfd	60		rts				rts
.1bfe	b2 24		lda ($24)	TOKDGet:lda 	(zTemp2)
.1c00	e6 24		inc $24				inc 	zTemp2
.1c02	d0 02		bne $1c06			bne 	_TKDGExit
.1c04	e6 25		inc $25				inc 	zTemp2+1
.1c06					_TKDGExit:
.1c06	60		rts				rts
.1c07					TOKDOutput:
.1c07	8d 11 05	sta $0511			sta 	TOKLastCharacter
.1c0a	6c 0f 05	jmp ($050f)			jmp 	(TOKOutputMethod)
.1c0d					TOKSetDetokeniseOutput:
.1c0d	8e 0f 05	stx $050f			stx 	TOKOutputMethod
.1c10	8c 10 05	sty $0510			sty 	TOKOutputMethod+1
.1c13	60		rts				rts
.050f					TOKOutputMethod:
>050f							.fill 	2
.0511					TOKLastCharacter:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1c14					TOKDDataItem:
.1c14	a8		tay				tay 								; type in Y
.1c15	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1c17	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1c19	f0 02		beq $1c1d			beq 	_TOKDDIsString
.1c1b	a9 2e		lda #$2e			lda 	#'.'
.1c1d					_TOKDDIsString:
.1c1d	20 07 1c	jsr $1c07			jsr 	TOKDOutput 					; dump it
.1c20	20 fe 1b	jsr $1bfe			jsr 	TOKDGet 					; get length into X
.1c23	aa		tax				tax
.1c24					_TOKDDOutput:
.1c24	ca		dex				dex 								; are we complete
.1c25	30 08		bmi $1c2f			bmi 	_TOKDDEnd
.1c27	20 fe 1b	jsr $1bfe			jsr 	TOKDGet 					; get character and output it
.1c2a	20 07 1c	jsr $1c07			jsr 	TOKDOutput
.1c2d	80 f5		bra $1c24			bra 	_TOKDDOutput
.1c2f					_TOKDDEnd:
.1c2f	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1c31	d0 05		bne $1c38			bne 	_TOKDDNotString
.1c33	a9 22		lda #$22			lda 	#'"'
.1c35	20 07 1c	jsr $1c07			jsr 	TOKDOutput
.1c38					_TOKDDNotString:
.1c38	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1c39					TOKDIdentifier:
.1c39	a0 ff		ldy #$ff			ldy 	#$FF
.1c3b	8c 12 05	sty $0512			sty 	TOKDIFirstChar
.1c3e					_TOKDLoop:
.1c3e	a8		tay				tay 								; token in Y
.1c3f	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1c41	c0 64		cpy #$64			cpy 	#$64
.1c43	f0 11		beq $1c56			beq 	_TOKDIOutput
.1c45	a9 5f		lda #$5f			lda 	#'_'
.1c47	c0 65		cpy #$65			cpy 	#$65
.1c49	f0 0b		beq $1c56			beq 	_TOKDIOutput
.1c4b	98		tya				tya 								; handle a-z
.1c4c	18		clc				clc
.1c4d	69 21		adc #$21			adc	 	#$21
.1c4f	c0 5a		cpy #$5a			cpy 	#$5A
.1c51	90 03		bcc $1c56			bcc 	_TOKDIOutput
.1c53	38		sec				sec 								; handle 0-9
.1c54	e9 4b		sbc #$4b			sbc 	#$4B
.1c56					_TOKDIOutput:
.1c56	2c 12 05	bit $0512			bit 	TOKDIFirstChar
.1c59	10 08		bpl $1c63			bpl 	_TOKDINoSpacing
.1c5b	48		pha				pha
.1c5c	20 f8 1c	jsr $1cf8			jsr 	TOKDSpacing
.1c5f	9c 12 05	stz $0512			stz 	TOKDIFirstChar
.1c62	68		pla				pla
.1c63					_TOKDINoSpacing:
.1c63	20 07 1c	jsr $1c07			jsr 	TOKDOutput
.1c66	20 fe 1b	jsr $1bfe			jsr 	TOKDGet 					; get next token
.1c69	c9 7c		cmp #$7c			cmp 	#$7C
.1c6b	90 d1		bcc $1c3e			bcc 	_TOKDLoop
.1c6d	f0 12		beq $1c81			beq 	_TOKDIExit 					; it's a number, no tail.
.1c6f	4a		lsr a				lsr 	a 							; string ?
.1c70	90 07		bcc $1c79			bcc 	_TOKDICheckArray
.1c72	48		pha				pha
.1c73	a9 24		lda #$24			lda 	#"$"
.1c75	20 07 1c	jsr $1c07			jsr 	TOKDOutput
.1c78	68		pla				pla
.1c79					_TOKDICheckArray:
.1c79	4a		lsr a				lsr 	a 							; array ?
.1c7a	90 05		bcc $1c81			bcc 	_TOKDIExit
.1c7c	a9 28		lda #$28			lda 	#"("
.1c7e	20 07 1c	jsr $1c07			jsr 	TOKDOutput
.1c81					_TOKDIExit:
.1c81	60		rts				rts
.0512					TOKDIFirstChar:
>0512							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1c82					TOKDInteger:
.1c82	5a		phy				phy 								; save base
.1c83	a2 0e		ldx #$0e			ldx 	#IFR0 						; set into R0
.1c85	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.1c88					_TOKDILoop:
.1c88	b2 24		lda ($24)			lda 	(zTemp2) 					; followed by a 00-3F
.1c8a	c9 40		cmp #$40			cmp 	#$40
.1c8c	b0 1d		bcs $1cab			bcs 	_TOKDIHaveInteger
.1c8e	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 << 6
.1c90	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1c93	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1c96	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1c99	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1c9c	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1c9f	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1ca2	20 fe 1b	jsr $1bfe			jsr 	TOKDGet 					; OR byte in.
.1ca5	05 0e		ora $0e				ora 	IFR0+IM0
.1ca7	85 0e		sta $0e				sta 	IFR0+IM0
.1ca9	80 dd		bra $1c88			bra 	_TOKDILoop
.1cab					_TOKDIHaveInteger:
.1cab	7a		ply				ply 								; restore base
.1cac	98		tya				tya 								; base in A
.1cad	20 52 2c	jsr $2c52			jsr 	IFloatIntegerToStringR0
.1cb0	86 20		stx $20				stx 	zTemp0
.1cb2	84 21		sty $21				sty 	zTemp0+1
.1cb4	b2 20		lda ($20)			lda 	(zTemp0)
.1cb6	20 f8 1c	jsr $1cf8			jsr 	TOKDSpacing 				; check spacing okay.
.1cb9	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1cbb					_TOKDOutput:
.1cbb	b1 20		lda ($20),y			lda 	(zTemp0),y
.1cbd	20 07 1c	jsr $1c07			jsr 	TOKDOutput
.1cc0	c8		iny				iny
.1cc1	b1 20		lda ($20),y			lda 	(zTemp0),y
.1cc3	d0 f6		bne $1cbb			bne 	_TOKDOutput
.1cc5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1cc6					TOKDToken:
.1cc6	a2 2c		ldx #$2c			ldx 	#StandardTokens & $FF
.1cc8	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1cca					_TOKDSearch:
.1cca	86 20		stx $20				stx 	zTemp0 						; put table in zTemp0
.1ccc	84 21		sty $21				sty 	zTemp0+1
.1cce	aa		tax				tax 								; token ID in X.
.1ccf					_TOKDFind:
.1ccf	ca		dex				dex 								; reached the start
.1cd0	10 0d		bpl $1cdf			bpl 	_TOKDFound
.1cd2	38		sec				sec 								; go to next entry
.1cd3	b2 20		lda ($20)			lda 	(zTemp0)
.1cd5	65 20		adc $20				adc 	zTemp0
.1cd7	85 20		sta $20				sta 	zTemp0
.1cd9	90 f4		bcc $1ccf			bcc 	_TOKDFind
.1cdb	e6 21		inc $21				inc 	zTemp0+1
.1cdd	80 f0		bra $1ccf			bra 	_TOKDFind
.1cdf					_TOKDFound:
.1cdf	b2 20		lda ($20)			lda 	(zTemp0) 					; length to X
.1ce1	f0 14		beq $1cf7			beq 	_TOKDExit
.1ce3	aa		tax				tax
.1ce4	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1ce6	b1 20		lda ($20),y			lda 	(zTemp0),y 					; check spacing
.1ce8	20 f8 1c	jsr $1cf8			jsr 	TOKDSpacing
.1ceb					_TOKDOutput:
.1ceb	b1 20		lda ($20),y			lda 	(zTemp0),y
.1ced	20 52 20	jsr $2052			jsr 	TOKToLower
.1cf0	20 07 1c	jsr $1c07			jsr 	TOKDOutput
.1cf3	c8		iny				iny
.1cf4	ca		dex				dex
.1cf5	d0 f4		bne $1ceb			bne 	_TOKDOutput
.1cf7					_TOKDExit:
.1cf7	60		rts				rts
.1cf8					TOKDSpacing:
.1cf8	20 69 20	jsr $2069			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1cfb	90 0d		bcc $1d0a			bcc 	_TOKDSExit
.1cfd	ad 11 05	lda $0511			lda 	TOKLastCharacter			; and last character also alphanumeric
.1d00	20 69 20	jsr $2069			jsr 	TOKIsIdentifierElement
.1d03	90 05		bcc $1d0a			bcc 	_TOKDSExit
.1d05	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1d07	20 07 1c	jsr $1c07			jsr 	TOKDOutput
.1d0a					_TOKDSExit:
.1d0a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1d0b					PGMDeleteLine:
.1d0b	20 be 1d	jsr $1dbe			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d0e	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d10	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1d13	85 23		sta $23				sta 	zTemp1+1
.1d15					_PGMDLoop:
.1d15	b2 22		lda ($22)			lda 	(zTemp1) 					; finished, not found ?
.1d17	38		sec				sec
.1d18	f0 3a		beq $1d54			beq 	_PGMDExit
.1d1a	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1d1c	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d1e	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d21	d0 08		bne $1d2b			bne 	_PGMDNext
.1d23	c8		iny				iny
.1d24	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d26	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1d29	f0 0d		beq $1d38			beq 	_PGMDDelete
.1d2b					_PGMDNext:
.1d2b	18		clc				clc
.1d2c	b2 22		lda ($22)			lda 	(zTemp1)
.1d2e	65 22		adc $22				adc 	zTemp1
.1d30	85 22		sta $22				sta 	zTemp1
.1d32	90 e1		bcc $1d15			bcc 	_PGMDLoop
.1d34	e6 23		inc $23				inc 	zTemp1+1
.1d36	80 dd		bra $1d15			bra 	_PGMDLoop
.1d38					_PGMDDelete:
.1d38	b2 22		lda ($22)			lda 	(zTemp1) 					; offset to next in Y
.1d3a	a8		tay				tay
.1d3b					_PGMDCopy:
.1d3b	b1 22		lda ($22),y			lda 	(zTemp1),y 					; copy down.
.1d3d	92 22		sta ($22)			sta 	(zTemp1)
.1d3f	a5 22		lda $22				lda 	zTemp1 						; reached the end ?
.1d41	c5 20		cmp $20				cmp 	zTemp0
.1d43	d0 07		bne $1d4c			bne 	_PGMDNext2
.1d45	a5 23		lda $23				lda 	zTemp1+1
.1d47	c5 21		cmp $21				cmp 	zTemp0+1
.1d49	18		clc				clc
.1d4a	f0 08		beq $1d54			beq 	_PGMDExit
.1d4c					_PGMDNext2:
.1d4c	e6 22		inc $22				inc 	zTemp1 						; advance pointer.
.1d4e	d0 eb		bne $1d3b			bne 	_PGMDCopy
.1d50	e6 23		inc $23				inc 	zTemp1+1
.1d52	80 e7		bra $1d3b			bra 	_PGMDCopy
.1d54					_PGMDExit:
.1d54	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1d55					PGMInsertLine:
.1d55	20 be 1d	jsr $1dbe			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d58	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d5a	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1d5d	85 23		sta $23				sta 	zTemp1+1
.1d5f					_PGMILoop:
.1d5f	b2 22		lda ($22)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1d61	f0 1c		beq $1d7f			beq 	_PGMIInsert
.1d63	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1d65	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d67	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d6a	c8		iny				iny
.1d6b	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d6d	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1d70	b0 0d		bcs $1d7f			bcs 	_PGMIInsert 				; insert here.
.1d72	18		clc				clc
.1d73	b2 22		lda ($22)			lda 	(zTemp1)
.1d75	65 22		adc $22				adc 	zTemp1
.1d77	85 22		sta $22				sta 	zTemp1
.1d79	90 e4		bcc $1d5f			bcc 	_PGMILoop
.1d7b	e6 23		inc $23				inc 	zTemp1+1
.1d7d	80 e0		bra $1d5f			bra 	_PGMILoop
.1d7f					_PGMIInsert:
.1d7f	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1d82					_PGMIInsertLoop:
.1d82	b2 20		lda ($20)			lda 	(zTemp0)
.1d84	91 20		sta ($20),y			sta 	(zTemp0),y
.1d86	a5 22		lda $22				lda 	zTemp1 						; reached insert point
.1d88	c5 20		cmp $20				cmp 	zTemp0
.1d8a	d0 06		bne $1d92			bne 	_PGMINext
.1d8c	a5 23		lda $23				lda 	zTemp1+1
.1d8e	c5 21		cmp $21				cmp 	zTemp0+1
.1d90	f0 0a		beq $1d9c			beq 	_PGMIInserted
.1d92					_PGMINext:
.1d92	a5 20		lda $20				lda 	zTemp0
.1d94	d0 02		bne $1d98			bne 	_PGMINoBorrow
.1d96	c6 21		dec $21				dec 	zTemp0+1
.1d98					_PGMINoBorrow:
.1d98	c6 20		dec $20				dec 	zTemp0
.1d9a	80 e6		bra $1d82			bra 	_PGMIInsertLoop
.1d9c					_PGMIInserted:
.1d9c	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1d9e					_PGMICopyLoop:
.1d9e	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1da1	91 22		sta ($22),y			sta 	(zTemp1),y
.1da3	c8		iny				iny
.1da4	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1da7	d0 f5		bne $1d9e			bne 	_PGMICopyLoop
.1da9	18		clc				clc
.1daa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1dab					PGMSetBaseAddress:
.1dab	8e 13 05	stx $0513			stx 	PGMBaseHigh
.1dae	8c 14 05	sty $0514			sty 	PGMEndMemoryHigh
.1db1	60		rts				rts
.1db2					PGMNewProgram:
.1db2	64 20		stz $20				stz 	zTemp0						; copy base address to zTemp0
.1db4	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1db7	85 21		sta $21				sta 	zTemp0+1
.1db9	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1dbb	92 20		sta ($20)			sta 	(zTemp0)
.1dbd	60		rts				rts
.1dbe					PGMEndProgram:
.1dbe	64 20		stz $20				stz 	zTemp0 						; copy base address to zTemp0
.1dc0	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1dc3	85 21		sta $21				sta 	zTemp0+1
.1dc5					_PGMEPLoop:
.1dc5	b2 20		lda ($20)			lda 	(zTemp0)
.1dc7	f0 0b		beq $1dd4			beq 	_PGMEPExit
.1dc9	18		clc				clc
.1dca	65 20		adc $20				adc 	zTemp0
.1dcc	85 20		sta $20				sta 	zTemp0
.1dce	90 f5		bcc $1dc5			bcc 	_PGMEPLoop
.1dd0	e6 21		inc $21				inc 	zTemp0+1
.1dd2	80 f1		bra $1dc5			bra 	_PGMEPLoop
.1dd4					_PGMEPExit:
.1dd4	60		rts				rts
.0513					PGMBaseHigh:
>0513							.fill 	1
.0514					PGMEndMemoryHigh:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1dd5					TOKResetElement:
.1dd5	9c 15 05	stz $0515			stz 	TOKElement
.1dd8	60		rts				rts
.1dd9					TOKWriteElement:
.1dd9	da		phx				phx
.1dda	ae 15 05	ldx $0515			ldx 	TOKElement
.1ddd	9d 16 05	sta $0516,x			sta 	TOKElementText,x
.1de0	9e 17 05	stz $0517,x			stz 	TOKElementText+1,x
.1de3	fa		plx				plx
.1de4	ee 15 05	inc $0515			inc 	TOKElement
.1de7	60		rts				rts
.0515					TOKElement:
>0515							.fill 	1
.0516					TOKElementText:
>0516							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1de8					TOKTokeniseConstant:
.1de8	a5 0e		lda $0e				lda 	IFR0+IM0 					; check > 64
.1dea	48		pha				pha 								; save on stack
.1deb	29 c0		and #$c0			and 	#$C0
.1ded	05 0f		ora $0f				ora 	IFR0+IM1
.1def	05 10		ora $10				ora 	IFR0+IM2
.1df1	f0 10		beq $1e03			beq 	_TTCLess
.1df3	da		phx				phx
.1df4	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1df6					_TTCShiftRight:
.1df6	46 10		lsr $10				lsr 	IFR0+IM2
.1df8	66 0f		ror $0f				ror 	IFR0+IM1
.1dfa	66 0e		ror $0e				ror 	IFR0+IM0
.1dfc	ca		dex				dex
.1dfd	d0 f7		bne $1df6			bne 	_TTCShiftRight
.1dff	fa		plx				plx
.1e00	20 e8 1d	jsr $1de8			jsr 	TOKTokeniseConstant
.1e03					_TTCLess:
.1e03	68		pla				pla
.1e04	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1e06	20 a5 1e	jsr $1ea5			jsr 	TOKWriteA
.1e09	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1e0a					TOKTokeniseDecimals:
.1e0a	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext 					; consume the .
.1e0d	20 df 1f	jsr $1fdf			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e10	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1e12	20 a5 1e	jsr $1ea5			jsr 	TOKWriteA
.1e15	20 1a 1e	jsr $1e1a			jsr 	TOKOutputElementBuffer 		; then the buffer
.1e18	18		clc				clc
.1e19	60		rts				rts
.1e1a					TOKOutputElementBuffer:
.1e1a	ad 15 05	lda $0515			lda 	TOKElement 					; get count and write that
.1e1d	20 a5 1e	jsr $1ea5			jsr 	TOKWriteA
.1e20	a8		tay				tay 								; put in Y
.1e21	f0 0c		beq $1e2f			beq 	_TOEExit 					; exit if empty which is okay.
.1e23	a2 01		ldx #$01			ldx 	#1
.1e25					_TOELoop:
.1e25	bd 15 05	lda $0515,x			lda 	TOKElement,x
.1e28	20 a5 1e	jsr $1ea5			jsr 	TOKWriteA
.1e2b	e8		inx				inx
.1e2c	88		dey				dey
.1e2d	d0 f6		bne $1e25			bne 	_TOELoop
.1e2f					_TOEExit:
.1e2f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1e30					TOKTokenise:
.1e30	8c 16 06	sty $0616			sty 	TOKDataSource+1 			; save source routine pointer
.1e33	8e 15 06	stx $0615			stx 	TOKDataSource
.1e36	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1e38	8d 17 06	sta $0617			sta 	TOKIsFirstElement
.1e3b	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1e3d	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1e40	9c 01 04	stz $0401			stz 	TOKLineNumber
.1e43	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1e46					_TOKMainLoop:
.1e46	20 b1 1e	jsr $1eb1			jsr 	TOKGet 						; what follows.
.1e49	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1e4b	f0 4f		beq $1e9c			beq 	_TOKExit
.1e4d	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1e4f	d0 05		bne $1e56			bne 	_TOKElement
.1e51	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext
.1e54	80 f0		bra $1e46			bra 	_TOKMainLoop
.1e56					_TOKElement:
.1e56	20 5d 20	jsr $205d			jsr 	TOKIsDigit 					; is it 0..9
.1e59	90 0a		bcc $1e65			bcc 	_TOKNotDigit
.1e5b	20 b6 1f	jsr $1fb6			jsr 	TOKTokeniseInteger 			; get integer
.1e5e	b0 43		bcs $1ea3			bcs 	_TOKFail 					; did it fail ?
.1e60	9c 17 06	stz $0617			stz 	TOKIsFirstElement 			; clear first element flag
.1e63	80 e1		bra $1e46			bra 	_TOKMainLoop
.1e65					_TOKNotDigit:
.1e65	9c 17 06	stz $0617			stz 	TOKIsFirstElement 			; clear first element flag
.1e68	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1e6a	d0 07		bne $1e73			bne 	_TOKNotHex
.1e6c	20 fe 1e	jsr $1efe			jsr 	TOKTokeniseHexadecimal
.1e6f	b0 32		bcs $1ea3			bcs 	_TOKFail
.1e71	80 d3		bra $1e46			bra 	_TOKMainLoop
.1e73					_TOKNotHex:
.1e73	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1e75	d0 07		bne $1e7e			bne 	_TOKNotDecimal
.1e77	20 0a 1e	jsr $1e0a			jsr 	TOKTokeniseDecimals
.1e7a	b0 27		bcs $1ea3			bcs 	_TOKFail
.1e7c	80 c8		bra $1e46			bra 	_TOKMainLoop
.1e7e					_TOKNotDecimal:
.1e7e	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1e80	d0 07		bne $1e89			bne 	_TOKNotString
.1e82	20 24 20	jsr $2024			jsr 	TOKTokeniseString
.1e85	b0 1c		bcs $1ea3			bcs 	_TOKFail
.1e87	80 bd		bra $1e46			bra 	_TOKMainLoop
.1e89					_TOKNotString:
.1e89	20 7a 20	jsr $207a			jsr 	TOKIsAlpha 					; identifier ?
.1e8c	b0 07		bcs $1e95			bcs 	_TOKIdentifier
.1e8e	20 f3 1f	jsr $1ff3			jsr 	TOKTokenisePunctuation 		; punctuation
.1e91	b0 10		bcs $1ea3			bcs 	_TOKFail
.1e93	80 b1		bra $1e46			bra 	_TOKMainLoop
.1e95					_TOKIdentifier:
.1e95	20 38 1f	jsr $1f38			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1e98	b0 09		bcs $1ea3			bcs 	_TOKFail
.1e9a	80 aa		bra $1e46			bra 	_TOKMainLoop
.1e9c					_TOKExit:
.1e9c	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1e9e	20 a5 1e	jsr $1ea5			jsr 	TOKWriteA
.1ea1	18		clc				clc									; return with carry set.
.1ea2	60		rts				rts
.1ea3					_TOKFail:
.1ea3	38		sec				sec
.1ea4	60		rts				rts
.1ea5					TOKWriteA:
.1ea5	da		phx				phx
.1ea6	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1ea9	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1eac	fa		plx				plx
.1ead	ee 00 04	inc $0400			inc 	TOKLineSize
.1eb0	60		rts				rts
.1eb1					TOKGet:
.1eb1	18		clc				clc
.1eb2	6c 15 06	jmp ($0615)			jmp 	(TOKDataSource)
.1eb5					TOKGetNext:
.1eb5	38		sec				sec
.1eb6	6c 15 06	jmp ($0615)			jmp 	(TOKDataSource)
.0615					TOKDataSource:
>0615							.fill 	2
.0617					TOKIsFirstElement:
>0617							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1eb9					TOKFindToken:
.1eb9	a2 2c		ldx #$2c			ldx 	#StandardTokens & $FF 		; do this table
.1ebb	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1ebd	20 c8 1e	jsr $1ec8			jsr 	TOKFindTokenXY 				; find it, or not
.1ec0	90 04		bcc $1ec6			bcc 	_TOKFTFail
.1ec2	a2 00		ldx #$00			ldx 	#0
.1ec4	38		sec				sec
.1ec5	60		rts				rts
.1ec6					_TOKFTFail
.1ec6	18		clc				clc
.1ec7	60		rts				rts
.1ec8					TOKFindTokenXY:
.1ec8	86 20		stx $20				stx 	zTemp0 						; save token table address
.1eca	84 21		sty $21				sty 	zTemp0+1
.1ecc	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1ece	8d 18 06	sta $0618			sta 	TOKCurrent
.1ed1					_TOKFindLoop:
.1ed1	b2 20		lda ($20)			lda 	(zTemp0) 					; get token length from table
.1ed3	18		clc				clc 		 						; clear carry in case of fail
.1ed4	30 17		bmi $1eed			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1ed6	cd 15 05	cmp $0515			cmp 	TOKElement 					; compare against the element length
.1ed9	d0 13		bne $1eee			bne 	_TOKNext 					; different, try next.
.1edb	aa		tax				tax 								; number of chars to compare.
.1edc	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1ede					_TOKCompare:
.1ede	b1 20		lda ($20),y			lda 	(zTemp0),y 					; compare the characters
.1ee0	d9 15 05	cmp $0515,y			cmp 	TOKElementText-1,y
.1ee3	d0 09		bne $1eee			bne 	_TOKNext 					; different ? try next
.1ee5	c8		iny				iny 								; compare next two
.1ee6	ca		dex				dex
.1ee7	d0 f5		bne $1ede			bne 	_TOKCompare 				; until done X characters.
.1ee9	38		sec				sec
.1eea	ad 18 06	lda $0618			lda 	TOKCurrent 					; return current ID.
.1eed					_TOKExit:
.1eed	60		rts				rts
.1eee					_TOKNext:
.1eee	ee 18 06	inc $0618			inc 	TOKCurrent 					; increment token #
.1ef1	38		sec				sec 								; add length+1 to ptr
.1ef2	b2 20		lda ($20)			lda 	(zTemp0)
.1ef4	65 20		adc $20				adc 	zTemp0
.1ef6	85 20		sta $20				sta 	zTemp0
.1ef8	90 d7		bcc $1ed1			bcc 	_TOKFindLoop
.1efa	e6 21		inc $21				inc 	zTemp0+1
.1efc	80 d3		bra $1ed1			bra 	_TOKFindLoop
.0618					TOKCurrent:
>0618							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1efe					TOKTokeniseHexadecimal:
.1efe	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext 					; consume the $
.1f01	a2 0e		ldx #$0e			ldx 	#IFR0
.1f03	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero 				; set R0 = 0
.1f06					_TTHLoop:
.1f06	20 b1 1e	jsr $1eb1			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f09	20 87 20	jsr $2087			jsr 	TOKIsHexadecimal
.1f0c	90 20		bcc $1f2e			bcc 	_TTHDone
.1f0e	a2 0e		ldx #$0e			ldx 	#IFR0 						; shift R0 right 4
.1f10	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1f13	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1f16	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1f19	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.1f1c	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext
.1f1f	38		sec				sec 								; convert to decimal.
.1f20	e9 30		sbc #$30			sbc 	#48
.1f22	c9 0a		cmp #$0a			cmp 	#10
.1f24	90 02		bcc $1f28			bcc 	_TTHNotAlpha
.1f26	e9 07		sbc #$07			sbc 	#7
.1f28					_TTHNotAlpha:
.1f28	05 0e		ora $0e				ora 	IFR0+IM0 					; OR in
.1f2a	85 0e		sta $0e				sta 	IFR0+IM0
.1f2c	80 d8		bra $1f06			bra 	_TTHLoop
.1f2e					_TTHDone:
.1f2e	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1f30	20 a5 1e	jsr $1ea5			jsr 	TOKWriteA
.1f33	20 e8 1d	jsr $1de8			jsr 	TOKTokeniseConstant 		; write integer out.
.1f36	18		clc				clc
.1f37	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1f38					TOKTokeniseIdentifier:
.1f38	20 d5 1d	jsr $1dd5			jsr 	TOKResetElement 			; extract an identifier
.1f3b					_TOKGetIdentifier:
.1f3b	20 b1 1e	jsr $1eb1			jsr 	TOKGet
.1f3e	20 47 20	jsr $2047			jsr 	TOKToUpper
.1f41	20 69 20	jsr $2069			jsr 	TOKIsIdentifierElement
.1f44	90 08		bcc $1f4e			bcc 	_TOKEndIdent
.1f46	20 d9 1d	jsr $1dd9			jsr		TOKWriteElement
.1f49	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext
.1f4c	80 ed		bra $1f3b			bra 	_TOKGetIdentifier
.1f4e					_TOKEndIdent:
.1f4e	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1f50	d0 06		bne $1f58			bne 	_TOKNotString
.1f52	20 d9 1d	jsr $1dd9			jsr 	TOKWriteElement 			; add it
.1f55	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext 					; consume it
.1f58					_TOKNotString:
.1f58	20 b1 1e	jsr $1eb1			jsr 	TOKGet 						; finally check for (
.1f5b	c9 28		cmp #$28			cmp 	#"("
.1f5d	d0 06		bne $1f65			bne 	_TOKNoArray
.1f5f	20 d9 1d	jsr $1dd9			jsr 	TOKWriteElement 			; add it
.1f62	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext 					; consume it
.1f65					_TOKNoArray:
.1f65	20 b9 1e	jsr $1eb9			jsr 	TOKFindToken 				; find it
.1f68	90 05		bcc $1f6f			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1f6a	20 a5 1e	jsr $1ea5			jsr 	TOKWriteA
.1f6d	18		clc				clc
.1f6e	60		rts				rts
.1f6f					_TOKIsVariable:
.1f6f	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1f71					_TOKOutputBuffer:
.1f71	bd 16 05	lda $0516,x			lda 	TOKElementText,x 			; output it translated.
.1f74	20 9d 1f	jsr $1f9d			jsr 	TOKTranslateIdentifier
.1f77	20 a5 1e	jsr $1ea5			jsr 	TOKWriteA
.1f7a	e8		inx				inx
.1f7b	bd 16 05	lda $0516,x			lda 	TOKElementText,x
.1f7e	20 69 20	jsr $2069			jsr 	TOKIsIdentifierElement
.1f81	b0 ee		bcs $1f71			bcs 	_TOKOutputBuffer
.1f83	a8		tay				tay 								; last char in Y
.1f84	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1f86	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1f88	f0 0e		beq $1f98			beq 	_TOKIVExit
.1f8a	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1f8c	d0 04		bne $1f92			bne 	_TOKIVCheckArray 			; no, check for (
.1f8e	1a		inc a				inc 	a 							; token is $7D
.1f8f	bc 17 05	ldy $0517,x			ldy 	TOKElementText+1,x 			; get next one.
.1f92					_TOKIVCheckArray:
.1f92	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1f94	d0 02		bne $1f98			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1f96	1a		inc a				inc 	a
.1f97	1a		inc a				inc 	a
.1f98					_TOKIVExit:
.1f98	20 a5 1e	jsr $1ea5			jsr 	TOKWriteA 					; ending token
.1f9b	18		clc				clc
.1f9c	60		rts				rts
.1f9d					TOKTranslateIdentifier:
.1f9d	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1f9f	f0 0f		beq $1fb0			beq 	_TTI64
.1fa1	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1fa3	f0 0e		beq $1fb3			beq 	_TTI65
.1fa5	38		sec				sec
.1fa6	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1fa8	10 03		bpl $1fad			bpl 	_TTIExit
.1faa	18		clc				clc 								; map 09 onto 26-35
.1fab	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1fad					_TTIExit:
.1fad	09 40		ora #$40			ora 	#$40 						; correct range.
.1faf	60		rts				rts
.1fb0	a9 64		lda #$64	_TTI64:	lda 	#$64
.1fb2	60		rts				rts
.1fb3	a9 65		lda #$65	_TTI65:	lda 	#$65
.1fb5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1fb6					TOKTokeniseInteger:
.1fb6	20 df 1f	jsr $1fdf			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fb9	a2 16		ldx #$16			ldx 	#TOKElementText & $FF
.1fbb	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.1fbd	ad 15 05	lda $0515			lda		TOKElement
.1fc0	20 15 2d	jsr $2d15			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1fc3	ad 17 06	lda $0617			lda 	TOKIsFirstElement 			; first element ?
.1fc6	f0 12		beq $1fda			beq 	_TOKNotLineNumber
.1fc8	a5 10		lda $10				lda 	IFR0+IM2 					; check it's a 2 digit number
.1fca	d0 0c		bne $1fd8			bne 	_TOKBadLineNumeber
.1fcc	a5 0e		lda $0e				lda 	IFR0+IM0 					; copy it to the line number section.
.1fce	8d 01 04	sta $0401			sta 	TOKLineNumber
.1fd1	a5 0f		lda $0f				lda 	IFR0+IM1
.1fd3	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.1fd6	18		clc				clc
.1fd7	60		rts				rts
.1fd8					_TOKBadLineNumeber:
.1fd8	38		sec				sec
.1fd9	60		rts				rts
.1fda					_TOKNotLineNumber:
.1fda	20 e8 1d	jsr $1de8			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1fdd	18		clc				clc
.1fde	60		rts				rts
.1fdf					TOKExtractInteger:
.1fdf	20 d5 1d	jsr $1dd5			jsr 	TOKResetElement 			; restart
.1fe2					_TTILoop:
.1fe2	20 b1 1e	jsr $1eb1			jsr 	TOKGet 						; keep getting and copying while numeric.
.1fe5	20 5d 20	jsr $205d			jsr 	TOKIsDigit
.1fe8	90 08		bcc $1ff2			bcc 	_TOKEIExit
.1fea	20 d9 1d	jsr $1dd9			jsr 	TOKWriteElement
.1fed	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext
.1ff0	80 f0		bra $1fe2			bra 	_TTILoop
.1ff2					_TOKEIExit:
.1ff2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1ff3					TOKTokenisePunctuation:
.1ff3	20 d5 1d	jsr $1dd5			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1ff6	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext
.1ff9	20 d9 1d	jsr $1dd9			jsr 	TOKWriteElement
.1ffc	20 b1 1e	jsr $1eb1			jsr 	TOKGet 						; what follows ?
.1fff	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2001	f0 10		beq $2013			beq 	_TTPOne
.2003	20 71 20	jsr $2071			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2006	b0 0b		bcs $2013			bcs 	_TTPOne 					; these speed things up a bit.
.2008	20 d9 1d	jsr $1dd9			jsr 	TOKWriteElement 			; this is what we will search for.
.200b	20 b9 1e	jsr $1eb9			jsr 	TOKFindToken
.200e	b0 0a		bcs $201a			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2010	ce 15 05	dec $0515			dec 	TOKElement 					; make it a single character
.2013					_TTPOne:
.2013	20 b9 1e	jsr $1eb9			jsr 	TOKFindToken 				; look for one character punctuation
.2016	b0 07		bcs $201f			bcs 	_TTPOutputExit 				; we found it
.2018	38		sec				sec 								; not recognised.
.2019	60		rts				rts
.201a					_TTPConsumeExit:
.201a	48		pha				pha
.201b	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext 					; get the 2nd char out.
.201e	68		pla				pla
.201f					_TTPOutputExit:
.201f	20 a5 1e	jsr $1ea5			jsr  	TOKWriteA 					; write token out
.2022	18		clc				clc
.2023	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2024					TOKTokeniseString:
.2024	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext 					; consume the "
.2027	20 d5 1d	jsr $1dd5			jsr 	TOKResetElement 			; start getting the string
.202a					_TOKTSLoop:
.202a	20 b1 1e	jsr $1eb1			jsr 	TOKGet 						; check EOL
.202d	c9 00		cmp #$00			cmp 	#0
.202f	f0 0c		beq $203d			beq 	_TOKTSExit
.2031	20 b5 1e	jsr $1eb5			jsr 	TOKGetNext 					; get and consume
.2034	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2036	f0 05		beq $203d			beq 	_TOKTSExit
.2038	20 d9 1d	jsr $1dd9			jsr 	TOKWriteElement
.203b	80 ed		bra $202a			bra 	_TOKTSLoop
.203d					_TOKTSExit:
.203d	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.203f	20 a5 1e	jsr $1ea5			jsr 	TOKWriteA
.2042	20 1a 1e	jsr $1e1a			jsr 	TOKOutputElementBuffer
.2045	18		clc				clc
.2046	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2047					TOKToUpper:
.2047	c9 61		cmp #$61			cmp 	#"a"
.2049	90 06		bcc $2051			bcc 	_TTUNotLower
.204b	c9 7b		cmp #$7b			cmp 	#"z"+1
.204d	b0 02		bcs $2051			bcs 	_TTUNotLower
.204f	49 20		eor #$20			eor 	#$20
.2051					_TTUNotLower:
.2051	60		rts				rts
.2052					TOKToLower:
.2052	c9 41		cmp #$41			cmp 	#"A"
.2054	90 06		bcc $205c			bcc 	_TTUNotUpper
.2056	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2058	b0 02		bcs $205c			bcs 	_TTUNotUpper
.205a	49 20		eor #$20			eor 	#$20
.205c					_TTUNotUpper:
.205c	60		rts				rts
.205d					TOKIsDigit:
.205d	c9 30		cmp #$30			cmp 	#"0"
.205f	90 06		bcc $2067			bcc 	TOKFail
.2061	c9 3a		cmp #$3a			cmp 	#"9"+1
.2063	b0 02		bcs $2067			bcs 	TOKFail
.2065					TOKSucceed:
.2065	38		sec				sec
.2066	60		rts				rts
.2067					TOKFail:
.2067	18		clc				clc
.2068	60		rts				rts
.2069					TOKIsIdentifierElement:
.2069	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.206b	f0 f8		beq $2065			beq 	TOKSucceed
.206d	c9 5f		cmp #$5f			cmp 	#"_"
.206f	f0 f4		beq $2065			beq 	TOKSucceed 					; else fall through to alphanumeric
.2071					TOKIsAlphaNumeric:
.2071	20 7a 20	jsr $207a			jsr 	TOKIsAlpha
.2074	b0 ef		bcs $2065			bcs 	TOKSucceed
.2076	20 5d 20	jsr $205d			jsr 	TOKIsDigit
.2079	60		rts				rts
.207a					TOKIsAlpha:
.207a	20 47 20	jsr $2047			jsr 	TOKToUpper
.207d	c9 41		cmp #$41			cmp 	#"A"
.207f	90 e6		bcc $2067			bcc 	TOKFail
.2081	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2083	b0 e2		bcs $2067			bcs 	TOKFail
.2085	80 de		bra $2065			bra 	TOKSucceed
.2087					TOKIsHexadecimal:
.2087	20 5d 20	jsr $205d			jsr		TOKIsDigit
.208a	b0 d9		bcs $2065			bcs 	TOKSucceed
.208c	20 7a 20	jsr $207a			jsr 	TOKIsAlpha
.208f	90 d6		bcc $2067			bcc 	TOKFail
.2091	c9 47		cmp #$47			cmp 	#"F"+1
.2093	b0 d2		bcs $2067			bcs 	TOKFail
.2095	80 ce		bra $2065			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2097					Command_CALL:
.2097	a9 42		lda #$42			lda 	#STK_CALL
.2099	20 22 25	jsr $2522			jsr 	StackOpen
.209c	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.209e	29 c0		and #$c0			and 	#$C0
.20a0	c9 40		cmp #$40			cmp 	#$40
.20a2	d0 29		bne $20cd			bne 	_CCSyntax
.20a4	20 f2 27	jsr $27f2			jsr 	VARGetInfo 					; get the information
.20a7	20 09 25	jsr $2509			jsr 	ERRCheckRParen 				; check right bracket follows.
.20aa	20 a4 27	jsr $27a4			jsr 	VARFind 					; exists ?
.20ad	90 21		bcc $20d0			bcc 	_CCUnknown
.20af	86 21		stx $21				stx 	zTemp0+1 					; save target in XA
.20b1	85 20		sta $20				sta 	zTemp0
.20b3	20 56 25	jsr $2556			jsr 	STKSaveCodePosition 		; save return address on stack.
.20b6	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.20b8	b1 20		lda ($20),y			lda 	(zTemp0),y
.20ba	c9 ff		cmp #$ff			cmp 	#$FF
.20bc	d0 12		bne $20d0			bne 	_CCUnknown
.20be	88		dey				dey 								; get Y offset to stack
.20bf	b1 20		lda ($20),y			lda 	(zTemp0),y
.20c1	48		pha				pha
.20c2	88		dey				dey 								; get address
.20c3	b1 20		lda ($20),y			lda 	(zTemp0),y
.20c5	85 1f		sta $1f				sta 	codePtr+1
.20c7	b2 20		lda ($20)			lda 	(zTemp0)
.20c9	85 1e		sta $1e				sta 	codePtr
.20cb	7a		ply				ply 								; restore Y
.20cc	60		rts				rts
.20cd					_CCSyntax:
.20cd	4c 76 23	jmp $2376		jmp	ErrorV_syntax
.20d0					_CCUnknown:
.20d0	4c eb 24	jmp $24eb		jmp	ErrorV_unknown
.20d3					Command_ENDPROC:
.20d3	a9 42		lda #$42			lda 	#STK_CALL
.20d5	20 4e 25	jsr $254e			jsr 	StackCheckFrame
.20d8	20 68 25	jsr $2568			jsr 	STKLoadCodePosition 		; return
.20db	20 40 25	jsr $2540			jsr 	StackClose
.20de	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.20df					Command_DO:
.20df	a9 22		lda #$22			lda 	#STK_DO
.20e1	20 22 25	jsr $2522			jsr 	StackOpen
.20e4	20 56 25	jsr $2556			jsr 	STKSaveCodePosition 		; save loop position
.20e7	60		rts				rts
.20e8					Command_EXIT:
.20e8	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.20ea	20 4e 25	jsr $254e			jsr 	StackCheckFrame
.20ed	20 40 25	jsr $2540			jsr 	StackClose 					; close it
.20f0	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.20f2	aa		tax				tax
.20f3	20 88 22	jsr $2288			jsr 	ScanForward
.20f6	60		rts				rts
.20f7					Command_LOOP:
.20f7	a9 22		lda #$22			lda 	#STK_DO
.20f9	20 4e 25	jsr $254e			jsr 	StackCheckFrame
.20fc	20 68 25	jsr $2568			jsr 	STKLoadCodePosition 		; loop back
.20ff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2100					Command_FOR:
.2100	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2102	20 22 25	jsr $2522			jsr 	StackOpen
.2105	20 1e 12	jsr $121e			jsr 	CommandLET 					; do "I = 1" bit
.2108	5a		phy				phy 								; save variable address to +4,+5
.2109	a0 04		ldy #$04			ldy 	#4
.210b	a5 20		lda $20				lda 	zTemp0
.210d	91 28		sta ($28),y			sta 	(basicStack),y
.210f	c8		iny				iny
.2110	a5 21		lda $21				lda 	zTemp0+1
.2112	91 28		sta ($28),y			sta 	(basicStack),y
.2114	7a		ply				ply
.2115	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2117	20 19 25	jsr $2519			jsr 	ERRCheckA
.211a	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.211d	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.211f	a2 0e		ldx #$0e			ldx 	#IFR0
.2121	20 76 21	jsr $2176			jsr 	CFSaveR0X
.2124	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; STEP here ?
.2126	c9 91		cmp #$91			cmp 	#PR_STEP
.2128	d0 06		bne $2130			bne 	_CFStep1
.212a	c8		iny				iny 								; consume step
.212b	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 				; evaluate STEP
.212e	80 24		bra $2154			bra 	_CFWriteStep
.2130					_CFStep1:
.2130	a2 0e		ldx #$0e			ldx 	#IFR0 						; default R0, 1
.2132	a9 01		lda #$01			lda 	#1
.2134	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.2137	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2138	a0 04		ldy #$04			ldy 	#4 							; get variable address
.213a	b1 28		lda ($28),y			lda 	(basicStack),y
.213c	85 20		sta $20				sta 	zTemp0
.213e	c8		iny				iny
.213f	b1 28		lda ($28),y			lda 	(basicStack),y
.2141	85 21		sta $21				sta 	zTemp0+1
.2143	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2145	b1 20		lda ($20),y			lda 	(zTemp0),y
.2147	d0 0a		bne $2153			bne 	_CFNotOptimised
.2149	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.214b	b1 28		lda ($28),y			lda 	(basicStack),y
.214d	d0 04		bne $2153			bne 	_CFNotOptimised
.214f	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2151	85 11		sta $11				sta 	IFR0+IExp
.2153					_CFNotOptimised:
.2153	7a		ply				ply
.2154					_CFWriteStep:
.2154	a2 0e		ldx #$0e			ldx 	#IFR0 						; Write to additive.
.2156	a9 06		lda #$06			lda 	#6
.2158	20 76 21	jsr $2176			jsr 	CFSaveR0X
.215b	20 56 25	jsr $2556			jsr 	STKSaveCodePosition 		; save loop position
.215e	60		rts				rts
.215f					CFLoadR0X:
.215f	5a		phy				phy
.2160	a8		tay				tay
.2161	b1 28		lda ($28),y			lda 	(basicStack),y
.2163	95 00		sta $00,x			sta 	IM0,x
.2165	c8		iny				iny
.2166	b1 28		lda ($28),y			lda 	(basicStack),y
.2168	95 01		sta $01,x			sta 	IM1,x
.216a	c8		iny				iny
.216b	b1 28		lda ($28),y			lda 	(basicStack),y
.216d	95 02		sta $02,x			sta 	IM2,x
.216f	c8		iny				iny
.2170	b1 28		lda ($28),y			lda 	(basicStack),y
.2172	95 03		sta $03,x			sta 	IExp,x
.2174	7a		ply				ply
.2175	60		rts				rts
.2176					CFSaveR0X:
.2176	5a		phy				phy
.2177	a8		tay				tay
.2178	b5 00		lda $00,x			lda 	IM0,x
.217a	91 28		sta ($28),y			sta 	(basicStack),y
.217c	c8		iny				iny
.217d	b5 01		lda $01,x			lda 	IM1,x
.217f	91 28		sta ($28),y			sta 	(basicStack),y
.2181	c8		iny				iny
.2182	b5 02		lda $02,x			lda 	IM2,x
.2184	91 28		sta ($28),y			sta 	(basicStack),y
.2186	c8		iny				iny
.2187	b5 03		lda $03,x			lda 	IExp,x
.2189	91 28		sta ($28),y			sta 	(basicStack),y
.218b	7a		ply				ply
.218c	60		rts				rts
.218d					Command_NEXT:
.218d	a9 37		lda #$37			lda 	#STK_FOR
.218f	20 4e 25	jsr $254e			jsr 	StackCheckFrame
.2192	5a		phy				phy 								; check optimised loop
.2193	a0 09		ldy #$09			ldy 	#9
.2195	b1 28		lda ($28),y			lda 	(basicStack),y
.2197	7a		ply				ply
.2198	0a		asl a				asl 	a
.2199	b0 35		bcs $21d0			bcs 	_CNOptimised
.219b	20 07 22	jsr $2207			jsr 	_CNLoadValue 				; load index value to R0.
.219e	a2 12		ldx #$12			ldx 	#IFR1 						; load adding value to R1.
.21a0	a9 06		lda #$06			lda 	#6
.21a2	20 5f 21	jsr $215f			jsr 	CFLoadR0X
.21a5	20 a7 28	jsr $28a7			jsr 	IFloatAdd 					; add them together and write back.
.21a8	20 2a 22	jsr $222a			jsr 	_CNSaveValue
.21ab	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.21ad	a2 12		ldx #$12			ldx 	#IFR1
.21af	20 5f 21	jsr $215f			jsr 	CFLoadR0X
.21b2	20 7f 2b	jsr $2b7f			jsr 	IFloatCompare 				; compare terminal vs current
.21b5	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.21b7	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero
.21ba	f0 10		beq $21cc			beq 	_CNLoopBack
.21bc	a5 11		lda $11				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.21be	5a		phy				phy
.21bf	a0 09		ldy #$09			ldy 	#6+IExp
.21c1	51 28		eor ($28),y			eor 	(basicStack),y
.21c3	7a		ply				ply
.21c4	29 40		and #$40			and 	#IFSign
.21c6	f0 04		beq $21cc			beq 	_CNLoopBack
.21c8					_CNExitLoop:
.21c8	20 40 25	jsr $2540			jsr 	StackClose		 			; return
.21cb	60		rts				rts
.21cc					_CNLoopBack:
.21cc	20 68 25	jsr $2568			jsr 	STKLoadCodePosition 		; loop back
.21cf	60		rts				rts
.21d0					_CNOptimised:
.21d0	5a		phy				phy
.21d1	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.21d3	b1 28		lda ($28),y			lda 	(basicStack),y
.21d5	85 24		sta $24				sta 	zTemp2
.21d7	c8		iny				iny
.21d8	b1 28		lda ($28),y			lda 	(basicStack),y
.21da	85 25		sta $25				sta 	zTemp2+1
.21dc	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.21de					_CNIncrement:
.21de	c8		iny				iny
.21df	b1 24		lda ($24),y			lda 	(zTemp2),y
.21e1	1a		inc a				inc 	a
.21e2	91 24		sta ($24),y			sta 	(zTemp2),y
.21e4	f0 f8		beq $21de			beq 	_CNIncrement
.21e6	18		clc				clc 								; point zTemp0 to terminal value
.21e7	a5 28		lda $28				lda 	basicStack
.21e9	69 0a		adc #$0a			adc 	#10
.21eb	85 20		sta $20				sta 	zTemp0
.21ed	a5 29		lda $29				lda 	basicStack+1
.21ef	69 00		adc #$00			adc 	#0
.21f1	85 21		sta $21				sta 	zTemp0+1
.21f3	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.21f5	b2 24		lda ($24)			lda 	(zTemp2)
.21f7	d2 20		cmp ($20)			cmp 	(zTemp0)
.21f9	b1 24		lda ($24),y			lda 	(zTemp2),y
.21fb	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.21fd	c8		iny				iny
.21fe	b1 24		lda ($24),y			lda 	(zTemp2),y
.2200	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.2202	7a		ply				ply
.2203	b0 c3		bcs $21c8			bcs 	_CNExitLoop
.2205	80 c5		bra $21cc			bra 	_CNLoopBack
.2207					_CNLoadValue:
.2207	5a		phy				phy
.2208	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.220a	b1 28		lda ($28),y			lda 	(basicStack),y
.220c	85 24		sta $24				sta 	zTemp2
.220e	c8		iny				iny
.220f	b1 28		lda ($28),y			lda 	(basicStack),y
.2211	85 25		sta $25				sta 	zTemp2+1
.2213	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2215	b1 24		lda ($24),y			lda 	(zTemp2),y
.2217	85 0e		sta $0e				sta 	IFR0+IM0
.2219	c8		iny				iny
.221a	b1 24		lda ($24),y			lda 	(zTemp2),y
.221c	85 0f		sta $0f				sta 	IFR0+IM1
.221e	c8		iny				iny
.221f	b1 24		lda ($24),y			lda 	(zTemp2),y
.2221	85 10		sta $10				sta 	IFR0+IM2
.2223	c8		iny				iny
.2224	b1 24		lda ($24),y			lda 	(zTemp2),y
.2226	85 11		sta $11				sta 	IFR0+IExp
.2228	7a		ply				ply
.2229	60		rts				rts
.222a					_CNSaveValue:
.222a	5a		phy				phy
.222b	a0 00		ldy #$00			ldy 	#0
.222d	a5 0e		lda $0e				lda 	IFR0+IM0
.222f	91 24		sta ($24),y			sta 	(zTemp2),y
.2231	c8		iny				iny
.2232	a5 0f		lda $0f				lda 	IFR0+IM1
.2234	91 24		sta ($24),y			sta 	(zTemp2),y
.2236	c8		iny				iny
.2237	a5 10		lda $10				lda 	IFR0+IM2
.2239	91 24		sta ($24),y			sta 	(zTemp2),y
.223b	c8		iny				iny
.223c	a5 11		lda $11				lda 	IFR0+IExp
.223e	91 24		sta ($24),y			sta 	(zTemp2),y
.2240	7a		ply				ply
.2241	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2242					IfCommand:
.2242	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 				; Get the if test.
.2245	b1 1e		lda ($1e),y			lda 	(codePtr),y					; what follows ?
.2247	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2249	d0 0a		bne $2255			bne 	_IfStructured 				; we still support it.
.224b	c8		iny				iny 								; consume THEN
.224c	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero 			; is it zero
.224f	f0 01		beq $2252			beq 	_IfFail 					; if fail, go to next line
.2251	60		rts				rts 								; if THEN just continue
.2252					_IfFail:
.2252	4c 7d 13	jmp $137d			jmp 	RUNEndOfLine
.2255					_IfStructured:
.2255	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero 			; is it zero
.2258	d0 07		bne $2261			bne 	_IfExit 					; if not, then continue normally.
.225a	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.225c	a2 85		ldx #$85			ldx 	#PR_ENDIF
.225e	20 88 22	jsr $2288			jsr 	ScanForward 				; and run from there
.2261					_IfExit:
.2261	60		rts				rts
.2262					ElseCode:
.2262	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2264	aa		tax				tax 								; so just go to the structure exit
.2265	20 88 22	jsr $2288			jsr 	ScanForward
.2268	60		rts				rts
.2269					EndIf:
.2269	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.226a					Command_REPEAT:
.226a	a9 02		lda #$02			lda 	#STK_REPEAT
.226c	20 22 25	jsr $2522			jsr 	StackOpen
.226f	20 56 25	jsr $2556			jsr 	STKSaveCodePosition 		; save loop position
.2272	60		rts				rts
.2273					Command_UNTIL:
.2273	a9 02		lda #$02			lda 	#STK_REPEAT
.2275	20 4e 25	jsr $254e			jsr 	StackCheckFrame
.2278	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 				; work out the test
.227b	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero 			; check if zero
.227e	f0 04		beq $2284			beq 	_CULoopBack 				; if so keep looping
.2280	20 40 25	jsr $2540			jsr 	StackClose		 			; return
.2283	60		rts				rts
.2284					_CULoopBack:
.2284	20 68 25	jsr $2568			jsr 	STKLoadCodePosition 		; loop back
.2287	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2288					ScanForward:
.2288	85 20		sta $20				sta 	zTemp0 						; save scan options in zTemp0
.228a	86 21		stx $21				stx 	zTemp0+1
.228c	64 22		stz $22				stz 	zTemp1 						; clear structure count.
.228e					_ScanForwardLoop:
.228e	a5 22		lda $22				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2290	d0 0a		bne $229c			bne 	_ScanNoCheck
.2292	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; reached either target token.
.2294	c5 20		cmp $20				cmp 	zTemp0
.2296	f0 49		beq $22e1			beq 	_ScanExit
.2298	c5 21		cmp $21				cmp 	zTemp0+1
.229a	f0 45		beq $22e1			beq 	_ScanExit
.229c					_ScanNoCheck:
.229c	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get the token and consume it.
.229e	c8		iny				iny
.229f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.22a1	f0 37		beq $22da			beq		_ScanDataItem
.22a3	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.22a5	f0 33		beq $22da			beq 	_ScanDataItem
.22a7	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.22a9	f0 1b		beq $22c6			beq 	_ScanNextLine
.22ab	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.22ad	d0 01		bne $22b0			bne 	_ScanNoShift
.22af	c8		iny				iny
.22b0					_ScanNoShift:
.22b0	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.22b2	b0 da		bcs $228e			bcs 	_ScanForwardLoop
.22b4	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.22b6	90 d6		bcc $228e			bcc 	_ScanForwardLoop
.22b8	aa		tax				tax 								; access the table to get the adjustment.
.22b9	18		clc				clc
.22ba	a5 22		lda $22				lda 	zTemp1 						; add it to structure count.
.22bc	7d a0 18	adc $18a0,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.22bf	85 22		sta $22				sta 	zTemp1
.22c1	10 cb		bpl $228e			bpl		_ScanForwardLoop 			; error if -ve ?
.22c3	4c 02 24	jmp $2402		jmp	ErrorV_structure
.22c6					_ScanNextLine:
.22c6	18		clc				clc	 								; forward to next line.
.22c7	b2 1e		lda ($1e)			lda 	(codePtr)
.22c9	65 1e		adc $1e				adc 	codePtr
.22cb	85 1e		sta $1e				sta 	codePtr
.22cd	90 02		bcc $22d1			bcc 	_ScanNoCarry
.22cf	e6 1f		inc $1f				inc 	codePtr+1
.22d1					_ScanNoCarry:
.22d1	a0 03		ldy #$03			ldy 	#3
.22d3	b2 1e		lda ($1e)			lda 	(codePtr) 					; off end of program ?
.22d5	d0 b7		bne $228e			bne 	_ScanForwardLoop
.22d7	4c 02 24	jmp $2402		jmp	ErrorV_structure
.22da					_ScanDataItem:
.22da	98		tya				tya
.22db	38		sec				sec
.22dc	71 1e		adc ($1e),y			adc 	(codePtr),y
.22de	a8		tay				tay
.22df	80 ad		bra $228e			bra 	_ScanForwardLoop
.22e1					_ScanExit:
.22e1	c8		iny				iny 								; consume final token.
.22e2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.22e3					ScanProcedures:
.22e3	a5 1e		lda $1e				lda 	codePtr 					; push codePtr on the stack
.22e5	48		pha				pha
.22e6	a5 1f		lda $1f				lda 	codePtr+1
.22e8	48		pha				pha
.22e9	5a		phy				phy
.22ea	ad 13 05	lda $0513			lda 	PGMBaseHigh 				; back to the program start
.22ed	85 1f		sta $1f				sta 	codePtr+1
.22ef	64 1e		stz $1e				stz 	codePtr
.22f1					_SPLoop:
.22f1	b2 1e		lda ($1e)			lda 	(codePtr) 					; end of program
.22f3	f0 18		beq $230d			beq 	_SPExit
.22f5	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.22f7	b1 1e		lda ($1e),y			lda 	(codePtr),y
.22f9	c9 88		cmp #$88			cmp 	#PR_PROC
.22fb	d0 03		bne $2300			bne 	_SPNext
.22fd	20 15 23	jsr $2315			jsr 	_SPSetupRecord
.2300					_SPNext:
.2300	18		clc				clc 								; forward to next
.2301	b2 1e		lda ($1e)			lda 	(codePtr)
.2303	65 1e		adc $1e				adc 	codePtr
.2305	85 1e		sta $1e				sta 	codePtr
.2307	90 e8		bcc $22f1			bcc 	_SPLoop
.2309	e6 1f		inc $1f				inc 	codePtr+1
.230b	80 e4		bra $22f1			bra 	_SPLoop
.230d					_SPExit:
.230d	7a		ply				ply
.230e	68		pla				pla
.230f	85 1f		sta $1f				sta 	codePtr+1
.2311	68		pla				pla
.2312	85 1e		sta $1e				sta 	codePtr
.2314	60		rts				rts
.2315					_SPSetupRecord:
.2315	c8		iny				iny 								; check identifier follows
.2316	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2318	29 c0		and #$c0			and 	#$C0
.231a	c9 40		cmp #$40			cmp 	#$40
.231c	d0 27		bne $2345			bne 	_SPSyntax
.231e	20 f2 27	jsr $27f2			jsr 	VARGetInfo 					; get the information
.2321	20 09 25	jsr $2509			jsr 	ERRCheckRParen 				; check right bracket follows.
.2324	20 a4 27	jsr $27a4			jsr 	VARFind 					; already exists ?
.2327	b0 1f		bcs $2348			bcs 	_SPUsed 					; error !
.2329	20 50 27	jsr $2750			jsr 	VARCreate 					; create, XA points to the data.
.232c	85 20		sta $20				sta 	zTemp0
.232e	86 21		stx $21				stx 	zTemp0+1
.2330	5a		phy				phy 								; save Y pos on stack
.2331	a0 01		ldy #$01			ldy 	#1
.2333	a5 1e		lda $1e				lda 	codePtr 					; save codePtr/Y
.2335	92 20		sta ($20)			sta 	(zTemp0)
.2337	a5 1f		lda $1f				lda 	codePtr+1
.2339	91 20		sta ($20),y			sta 	(zTemp0),y
.233b	c8		iny				iny
.233c	68		pla				pla
.233d	91 20		sta ($20),y			sta 	(zTemp0),y
.233f	c8		iny				iny
.2340	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2342	91 20		sta ($20),y			sta 	(zTemp0),y
.2344	60		rts				rts
.2345					_SPSyntax:
.2345	4c 76 23	jmp $2376		jmp	ErrorV_syntax
.2348					_SPUsed:
.2348	4c cd 24	jmp $24cd		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.234b					Command_WHILE:
.234b	5a		phy				phy 								; save position of the test
.234c	20 a5 15	jsr $15a5			jsr 	EXPEvalNumber 				; work out the while test.
.234f	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero 			; check if zero
.2352	f0 0e		beq $2362			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2354	98		tya				tya 								; position *after* test.
.2355	7a		ply				ply 								; restore position before test, at WHILE
.2356	88		dey				dey 								; so we execute the WHILE command again.
.2357	48		pha				pha 								; push after test on the stack
.2358	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.235a	20 22 25	jsr $2522			jsr 	StackOpen
.235d	20 56 25	jsr $2556			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2360	7a		ply				ply 								; restore the position *after* the test
.2361	60		rts				rts
.2362					_WHExitLoop:
.2362	68		pla				pla 								; throw post loop position
.2363	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2365	aa		tax				tax
.2366	20 88 22	jsr $2288			jsr 	ScanForward
.2369	60		rts				rts
.236a					Command_WEND:
.236a	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.236c	20 4e 25	jsr $254e			jsr 	StackCheckFrame
.236f	20 68 25	jsr $2568			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2372	20 40 25	jsr $2540			jsr 	StackClose		 			; erase the frame
.2375	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2376					ErrorV_syntax:
.2376	20 41 26	jsr $2641		jsr	ErrorHandler
>2379	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2381	45 72 72 6f 72 00
.2387					ErrorV_range:
.2387	20 41 26	jsr $2641		jsr	ErrorHandler
>238a	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2392	52 61 6e 67 65 00
.2398					ErrorV_value:
.2398	20 41 26	jsr $2641		jsr	ErrorHandler
>239b	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>23a3	75 65 00
.23a6					ErrorV_type:
.23a6	20 41 26	jsr $2641		jsr	ErrorHandler
>23a9	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>23b1	73 6d 61 74 63 68 00
.23b8					ErrorV_unimplemented:
.23b8	20 41 26	jsr $2641		jsr	ErrorHandler
>23bb	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>23c3	6c 65 6d 65 6e 74 65 64 00
.23cc					ErrorV_assert:
.23cc	20 41 26	jsr $2641		jsr	ErrorHandler
>23cf	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>23d7	46 61 69 6c 00
.23dc					ErrorV_internal:
.23dc	20 41 26	jsr $2641		jsr	ErrorHandler
>23df	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>23e7	6c 20 45 72 72 6f 72 00
.23ef					ErrorV_divzero:
.23ef	20 41 26	jsr $2641		jsr	ErrorHandler
>23f2	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>23fa	42 79 20 5a 65 72 6f 00
.2402					ErrorV_structure:
.2402	20 41 26	jsr $2641		jsr	ErrorHandler
>2405	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>240d	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.241a					ErrorV_stop:
.241a	20 41 26	jsr $2641		jsr	ErrorHandler
>241d	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2425	20 53 74 6f 70 70 65 64 00
.242e					ErrorV_data:
.242e	20 41 26	jsr $2641		jsr	ErrorHandler
>2431	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2439	44 61 74 61 00
.243e					ErrorV_redefine:
.243e	20 41 26	jsr $2641		jsr	ErrorHandler
>2441	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2449	65 64 65 66 69 6e 65 64 00
.2452					ErrorV_index:
.2452	20 41 26	jsr $2641		jsr	ErrorHandler
>2455	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>245d	61 79 20 49 6e 64 65 78 00
.2466					ErrorV_memory:
.2466	20 41 26	jsr $2641		jsr	ErrorHandler
>2469	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2471	4d 65 6d 6f 72 79 00
.2478					ErrorV_uninitialised:
.2478	20 41 26	jsr $2641		jsr	ErrorHandler
>247b	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2483	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2493					ErrorV_string:
.2493	20 41 26	jsr $2641		jsr	ErrorHandler
>2496	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>249e	69 6e 67 20 4c 65 6e 67 74 68 00
.24a9					ErrorV_variable:
.24a9	20 41 26	jsr $2641		jsr	ErrorHandler
>24ac	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>24b4	65 20 4d 69 73 73 69 6e 67 00
.24be					ErrorV_stack:
.24be	20 41 26	jsr $2641		jsr	ErrorHandler
>24c1	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>24c9	75 6c 6c 00
.24cd					ErrorV_dupproc:
.24cd	20 41 26	jsr $2641		jsr	ErrorHandler
>24d0	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>24d8	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>24e8	65 64 00
.24eb					ErrorV_unknown:
.24eb	20 41 26	jsr $2641		jsr	ErrorHandler
>24ee	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>24f6	20 50 72 6f 63 65 64 75 72 65 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2501					ERRCheckLParen:
.2501	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2503	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2505	d0 18		bne $251f			bne 	ERRSyntaxError
.2507	c8		iny				iny
.2508	60		rts				rts
.2509					ERRCheckRParen:
.2509	b1 1e		lda ($1e),y			lda 	(codePtr),y
.250b	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.250d	d0 10		bne $251f			bne 	ERRSyntaxError
.250f	c8		iny				iny
.2510	60		rts				rts
.2511					ERRCheckComma:
.2511	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2513	c9 99		cmp #$99			cmp 	#PR_COMMA
.2515	d0 08		bne $251f			bne 	ERRSyntaxError
.2517	c8		iny				iny
.2518	60		rts				rts
.2519					ERRCheckA:
.2519	d1 1e		cmp ($1e),y			cmp 	(codePtr),y
.251b	d0 02		bne $251f			bne 	ERRSyntaxError
.251d	c8		iny				iny
.251e	60		rts				rts
.251f					ERRSyntaxError:
.251f	4c 76 23	jmp $2376		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2522					StackOpen:
.2522	48		pha				pha 								; save frame byte
.2523	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.2525	0a		asl a				asl 	a 							; claim twice this for storage
.2526	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2528	38		sec				sec 								; so basically subtracting from
.2529	65 28		adc $28				adc 	basicStack 	 				; basicStack
.252b	85 28		sta $28				sta 	basicStack
.252d	b0 0a		bcs $2539			bcs 	_SONoBorrow
>252f	db						.byte 	$DB
.2530	c6 29		dec $29				dec 	basicStack+1
.2532	a5 29		lda $29				lda 	basicStack+1 				; reached the bottom ?
.2534	cd 19 06	cmp $0619			cmp 	basicStackEnd
.2537	f0 04		beq $253d			beq 	_SOMemory
.2539					_SONoBorrow:
.2539	68		pla				pla 								; get marker back and write at TOS
.253a	92 28		sta ($28)			sta 	(basicStack)
.253c	60		rts				rts
.253d					_SOMemory:
.253d	4c be 24	jmp $24be		jmp	ErrorV_stack
.2540					StackClose:
.2540	b2 28		lda ($28)			lda 	(basicStack) 				; get TOS marker
.2542	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2544	0a		asl a				asl 	a 							; claim twice this.
.2545	65 28		adc $28				adc 	basicStack 					; add to the stack pointer.
.2547	85 28		sta $28				sta 	basicStack
.2549	90 02		bcc $254d			bcc 	_SCExit
.254b	e6 29		inc $29				inc 	basicStack+1
.254d					_SCExit:
.254d	60		rts				rts
.254e					StackCheckFrame:
.254e	d2 28		cmp ($28)			cmp		(basicStack) 				; check  frames match
.2550	d0 01		bne $2553			bne 	_SCFError 					; different, we have structures mixed up
.2552	60		rts				rts
.2553					_SCFError:
.2553	4c 02 24	jmp $2402		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2556					STKSaveCodePosition:
.2556	5a		phy				phy
.2557	98		tya				tya 								; save Y at offset 1.
.2558	a0 01		ldy #$01			ldy 	#1
.255a	91 28		sta ($28),y			sta 	(basicStack),y
.255c	a5 1e		lda $1e				lda 	codePtr 					; save code (low) at 2
.255e	c8		iny				iny
.255f	91 28		sta ($28),y			sta 	(basicStack),y
.2561	a5 1f		lda $1f				lda 	codePtr+1 					; save code (high) at 3
.2563	c8		iny				iny
.2564	91 28		sta ($28),y			sta 	(basicStack),y
.2566	7a		ply				ply
.2567	60		rts				rts
.2568					STKLoadCodePosition:
.2568	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.256a	b1 28		lda ($28),y			lda 	(basicStack),y
.256c	85 1f		sta $1f				sta 	codePtr+1
.256e	88		dey				dey
.256f	b1 28		lda ($28),y			lda 	(basicStack),y
.2571	85 1e		sta $1e				sta 	codePtr
.2573	88		dey				dey
.2574	b1 28		lda ($28),y			lda 	(basicStack),y 				; line offset to Y
.2576	a8		tay				tay
.2577	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2578					StackReset:
.2578	48		pha				pha 								; save top of memory
.2579	3a		dec a				dec 	a  							; end of stack = previous byte
.257a	85 29		sta $29				sta 	basicStack+1
.257c	a9 ff		lda #$ff			lda 	#$FF
.257e	85 28		sta $28				sta 	basicStack
.2580	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2582	92 28		sta ($28)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2584	68		pla				pla 								; allocate pages for stack.
.2585	38		sec				sec
.2586	e9 02		sbc #$02			sbc 	#STACKPAGES
.2588	8d 19 06	sta $0619			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.258b	60		rts				rts
.0028					basicStack:
>0028							.fill 	2
.0619					basicStackEnd:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.258c					StringConcrete:
.258c	5a		phy				phy 								; save position on stack
.258d	b2 0e		lda ($0e)			lda 	(IFR0) 						; get string length
.258f	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2591	b0 41		bcs $25d4			bcs 	_SALengthError
.2593	18		clc				clc 								; length of the new string
.2594	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2596	90 02		bcc $259a			bcc 	_SAHaveLength
.2598	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.259a					_SAHaveLength:
.259a	48		pha				pha 								; save length to be allocated for concreting.
.259b	38		sec				sec
.259c	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.259e	6d 1b 06	adc $061b			adc 	stringMemory
.25a1	8d 1b 06	sta $061b			sta 	stringMemory
.25a4	85 24		sta $24				sta 	zTemp2 						; update storage address
.25a6	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.25a8	6d 1c 06	adc $061c			adc 	stringMemory+1
.25ab	8d 1c 06	sta $061c			sta 	stringMemory+1
.25ae	85 25		sta $25				sta 	zTemp2+1
.25b0	68		pla				pla 								; save length allocated in +0
.25b1	92 24		sta ($24)			sta 	(zTemp2)
.25b3	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.25b5	a0 01		ldy #$01			ldy 	#1
.25b7	91 24		sta ($24),y			sta 	(zTemp2),y
.25b9					_SACopyNewString:
.25b9	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy length at +2
.25bb	a0 02		ldy #$02			ldy 	#2
.25bd	91 24		sta ($24),y			sta 	(zTemp2),y
.25bf	aa		tax				tax 								; bytes to copy
.25c0	f0 0c		beq $25ce			beq 	_SACopyExit
.25c2	a0 01		ldy #$01			ldy 	#1 							; first character from here
.25c4					_SACopyNSLoop:
.25c4	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; get character from here
.25c6	c8		iny				iny 								; write two on in string storage
.25c7	c8		iny				iny
.25c8	91 24		sta ($24),y			sta 	(zTemp2),y
.25ca	88		dey				dey
.25cb	ca		dex				dex									; until copied all the string lengths.
.25cc	d0 f6		bne $25c4			bne 	_SACopyNSLoop
.25ce					_SACopyExit:
.25ce	a6 25		ldx $25				ldx 	zTemp2+1 					; XA contain the concreted string.
.25d0	a5 24		lda $24				lda 	zTemp2
.25d2	7a		ply				ply
.25d3	60		rts				rts
.25d4					_SALengthError:
.25d4	4c 93 24	jmp $2493		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.25d7					StringSystemInitialise:
.25d7	3a		dec a				dec 	a 							; make last byte of previous page.
.25d8	8d 1c 06	sta $061c			sta 	stringMemory+1
.25db	85 21		sta $21				sta 	zTemp0+1
.25dd	a9 ff		lda #$ff			lda 	#$FF
.25df	8d 1b 06	sta $061b			sta 	stringMemory
.25e2	85 20		sta $20				sta 	zTemp0
.25e4	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.25e6	92 20		sta ($20)			sta 	(zTemp0)
.25e8	60		rts				rts
.25e9					StringSpaceInitialise:
.25e9	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.25eb	8d 1a 06	sta $061a			sta 	stringInitialised
.25ee	ad 1b 06	lda $061b			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.25f1	8d 1d 06	sta $061d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.25f4	ad 1c 06	lda $061c			lda 	stringMemory+1
.25f7	3a		dec a				dec 	a
.25f8	8d 1e 06	sta $061e			sta 	stringTempPointer+1
.25fb	20 66 10	jsr $1066			jsr 	ClearCheckMemory
.25fe	60		rts				rts
.25ff					StringTempAllocate:
.25ff	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2601	b0 2e		bcs $2631			bcs 	_STALength
.2603	2c 1a 06	bit $061a			bit 	stringInitialised 			; already initialised
.2606	30 05		bmi $260d			bmi 	_STAAllocate
.2608	48		pha				pha 								; save value to subtract.
.2609	20 e9 25	jsr $25e9			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.260c	68		pla				pla 								; restore it
.260d					_STAAllocate:
.260d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.260f	18		clc				clc  								; deliberate allows one more
.2610	6d 1d 06	adc $061d			adc 	stringTempPointer 			; subtract from temp pointer
.2613	8d 1d 06	sta $061d			sta 	stringTempPointer
.2616	85 0e		sta $0e				sta 	IFR0+IM0 					; address in mantissa too
.2618	85 2a		sta $2a				sta 	zsTemp 						; and zsTemp
.261a	ad 1e 06	lda $061e			lda 	stringTempPointer+1
.261d	69 ff		adc #$ff			adc 	#$FF
.261f	8d 1e 06	sta $061e			sta 	stringTempPointer+1
.2622	85 2b		sta $2b				sta 	zsTemp+1
.2624	85 0f		sta $0f				sta 	IFR0+IM1
.2626	64 10		stz $10				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2628	a9 80		lda #$80			lda 	#$80
.262a	85 11		sta $11				sta 	IFR0+IExp
.262c	a9 00		lda #$00			lda 	#0 							; clear the target string
.262e	92 2a		sta ($2a)			sta 	(zsTemp)
.2630	60		rts				rts
.2631					_STALength:
.2631	4c 93 24	jmp $2493		jmp	ErrorV_string
.2634					StringTempWrite:
.2634	5a		phy				phy
.2635	48		pha				pha
.2636	b2 2a		lda ($2a)			lda 	(zsTemp)
.2638	1a		inc a				inc 	a
.2639	92 2a		sta ($2a)			sta 	(zsTemp)
.263b	a8		tay				tay
.263c	68		pla				pla
.263d	91 2a		sta ($2a),y			sta 	(zsTemp),y
.263f	7a		ply				ply
.2640	60		rts				rts
.002a					zsTemp:
>002a							.fill 	2
.061a					stringInitialised:
>061a							.fill 	1
.061b					stringMemory:
>061b							.fill 	2
.061d					stringTempPointer:
>061d							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2641					ErrorHandler:
.2641	fa		plx				plx 								; get address of msg
.2642	7a		ply				ply
.2643	e8		inx				inx 								; bump past RTS
.2644	d0 01		bne $2647			bne 	_EHNoInc
.2646	c8		iny				iny
.2647					_EHNoInc:
.2647	20 dc ff	jsr $ffdc			jsr	 	OSWriteString 				; print it.
.264a	ad 1f 06	lda $061f			lda 	ERRLine 					; direct command ?
.264d	0d 20 06	ora $0620			ora 	ERRLine+1
.2650	f0 10		beq $2662			beq 	_EHNoNumber
.2652	a2 65		ldx #$65			ldx 	#_EHAtMsg & $FF
.2654	a0 26		ldy #$26			ldy 	#_EHAtMsg >> 8
.2656	20 df ff	jsr $ffdf			jsr 	OSWriteStringZ
.2659	ad 1f 06	lda $061f			lda 	ERRLine 					; line number -> XA
.265c	ae 20 06	ldx $0620			ldx 	ERRLine+1
.265f	20 6a 26	jsr $266a			jsr 	WriteIntXA
.2662					_EHNoNumber:
.2662	4c 93 26	jmp $2693			jmp 	WarmStartNewLine
.2665					_EHAtMsg:
>2665	20 61 74 20 00					.text 	" at ",0
.266a					WriteIntXA:
.266a	da		phx				phx
.266b	48		pha				pha
.266c	a2 0e		ldx #$0e			ldx 	#IFR0
.266e	20 00 2e	jsr $2e00			jsr 	IFloatPushRx
.2671	68		pla				pla
.2672	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.2675	68		pla				pla
.2676	85 0f		sta $0f				sta 	IFR0+IM1
.2678	a9 0a		lda #$0a			lda 	#10 						; decimal
.267a	20 52 2c	jsr $2c52			jsr 	IFloatIntegerToStringR0	 	; convert
.267d	20 df ff	jsr $ffdf			jsr 	OSWriteStringZ 				; print
.2680	a2 0e		ldx #$0e			ldx 	#IFR0
.2682	20 21 2e	jsr $2e21			jsr 	IFloatPullRx
.2685	60		rts				rts
.2686					NotImplemented:
.2686	4c b8 23	jmp $23b8		jmp	ErrorV_unimplemented
.061f					ERRLine:
>061f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2689					WarmStart:
.2689	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.268b	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.268e	a9 6b		lda #$6b			lda 	#"k"
.2690	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2693					WarmStartNewLine:
.2693	a9 0d		lda #$0d			lda 	#13
.2695	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2698					WarmStartNoPrompt:
.2698	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.269a	9a		txs				txs
.269b	20 d9 ff	jsr $ffd9			jsr 	OSEditNewLine 				; edit
.269e	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.26a0	f0 f1		beq $2693			beq 	WarmStartNewLine
.26a2	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.26a4	d0 f2		bne $2698			bne 	WarmStartNoPrompt
.26a6	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.26a9	e8		inx				inx 								; skip length byte to make it ASCIIZ
.26aa	d0 01		bne $26ad			bne 	_WSSkip
.26ac	c8		iny				iny
.26ad					_WSSkip:
.26ad	86 24		stx $24				stx 	zTemp2 						; save address
.26af	84 25		sty $25				sty 	zTemp2+1
.26b1	a2 db		ldx #$db			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.26b3	a0 26		ldy #$26			ldy 	#TOKGetCharacter >> 8
.26b5	38		sec				sec
.26b6	20 30 1e	jsr $1e30			jsr 	TOKTokenise
.26b9	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.26bc	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.26bf	d0 0b		bne $26cc			bne 	_WSLineEdit
.26c1	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.26c3	85 1e		sta $1e				sta 	codePtr
.26c5	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.26c7	85 1f		sta $1f				sta 	codePtr+1
.26c9	4c 88 13	jmp $1388			jmp 	RUNNewLine
.26cc					_WSLineEdit:
.26cc	20 0b 1d	jsr $1d0b			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.26cf	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.26d2	c9 04		cmp #$04			cmp 	#4
.26d4	f0 03		beq $26d9			beq 	_WSNoInsert
.26d6	20 55 1d	jsr $1d55			jsr 	PGMInsertLine				; if not, maybe insert
.26d9					_WSNoInsert:
.26d9	80 bd		bra $2698			bra 	WarmStartNoPrompt
.26db					TOKGetCharacter:
.26db	b2 24		lda ($24)			lda 	(zTemp2)
.26dd	90 06		bcc $26e5			bcc 	_GSNoIncrement
.26df	e6 24		inc $24				inc 	zTemp2
.26e1	d0 02		bne $26e5			bne 	_GSNoIncrement
.26e3	e6 25		inc $25				inc 	zTemp2+1
.26e5					_GSNoIncrement:
.26e5	c9 00		cmp #$00			cmp 	#0
.26e7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.26e8					VARArrayLookup:
.26e8	85 20		sta $20				sta 	zTemp0 						; save the array address pointer in zTemp0
.26ea	86 21		stx $21				stx 	zTemp0+1
.26ec	b2 20		lda ($20)			lda 	(zTemp0)
.26ee	48		pha				pha
.26ef	5a		phy				phy
.26f0	a0 01		ldy #$01			ldy 	#1
.26f2	b1 20		lda ($20),y			lda 	(zTemp0),y
.26f4	7a		ply				ply
.26f5	48		pha				pha
.26f6	20 b7 15	jsr $15b7			jsr 	EXPEvalInteger16 			; R0 now contains the index
.26f9	68		pla				pla 								; array address to zTemp0
.26fa	85 21		sta $21				sta 	zTemp0+1
.26fc	68		pla				pla
.26fd	85 20		sta $20				sta 	zTemp0
.26ff	5a		phy				phy 								; save codePtr position.
.2700	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2702	b1 20		lda ($20),y			lda 	(zTemp0),y
.2704	48		pha				pha 								; save bit 15 on stack.
.2705	29 7f		and #$7f			and 	#$7F
.2707	85 22		sta $22				sta 	zTemp1
.2709	a5 0e		lda $0e				lda 	IFR0+IM0 					; check range of index
.270b	d2 20		cmp ($20)			cmp 	(zTemp0)
.270d	a5 0f		lda $0f				lda 	IFR0+IM1
.270f	e5 22		sbc $22				sbc 	zTemp1
.2711	b0 3a		bcs $274d			bcs 	_VALIndex
.2713	a5 0f		lda $0f				lda 	IFR0+IM1  					; sanity check
.2715	c9 40		cmp #$40			cmp 	#$40
.2717	b0 34		bcs $274d			bcs 	_VALIndex
.2719	06 0e		asl $0e				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.271b	26 0f		rol $0f				rol 	IFR0+IM1
.271d	fa		plx				plx 								; get msb of size -> X
.271e	30 04		bmi $2724			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2720	06 0e		asl $0e				asl 	IFR0+IM0
.2722	26 0f		rol $0f				rol 	IFR0+IM1
.2724					_VARNotX4:
.2724	18		clc				clc 								; add the two for the size bytes
.2725	a5 0e		lda $0e				lda 	IFR0+IM0
.2727	69 02		adc #$02			adc 	#2
.2729	85 0e		sta $0e				sta 	IFR0+IM0
.272b	90 02		bcc $272f			bcc 	_VARNoCarry1
.272d	e6 0f		inc $0f				inc 	IFR0+IM1
.272f					_VARNoCarry1:
.272f	18		clc				clc 								; calculate the element address and push to stack.
.2730	a5 0e		lda $0e				lda 	IFR0+IM0
.2732	65 20		adc $20				adc 	zTemp0
.2734	48		pha				pha
.2735	a5 0f		lda $0f				lda 	IFR0+IM1
.2737	65 21		adc $21				adc 	zTemp0+1
.2739	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.273b	30 04		bmi $2741			bmi 	_VARHasSubLevel
.273d	aa		tax				tax 								; address in XA
.273e	68		pla				pla
.273f	7a		ply				ply 								; restore Y and exit
.2740	60		rts				rts
.2741					_VARHasSubLevel:
.2741	aa		tax				tax 								; get link address in XA
.2742	68		pla				pla
.2743	7a		ply				ply 								; restore code position.
.2744	48		pha				pha
.2745	20 11 25	jsr $2511			jsr 	ERRCheckComma 				; comma required.
.2748	68		pla				pla
.2749	20 e8 26	jsr $26e8			jsr 	VARArrayLookup 				; call it recursively
.274c	60		rts				rts
.274d					_VALIndex:
.274d	4c 52 24	jmp $2452		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2750					VARCreate:
.2750	5a		phy				phy
.2751	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2753	a2 00		ldx #$00			ldx 	#0
.2755	20 3d 10	jsr $103d			jsr 	AllocateMemory
.2758	85 22		sta $22				sta 	zTemp1 						; save new address in zTemp1
.275a	86 23		stx $23				stx 	zTemp1+1
.275c	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.275e	ad 23 06	lda $0623			lda 	VARHash
.2761	91 22		sta ($22),y			sta 	(zTemp1),y
.2763	c8		iny				iny 								; put address of name into +3,+4
.2764	ad 21 06	lda $0621			lda 	VARNameAddress
.2767	91 22		sta ($22),y			sta 	(zTemp1),y
.2769	c8		iny				iny
.276a	ad 22 06	lda $0622			lda 	VARNameAddress+1
.276d	91 22		sta ($22),y			sta 	(zTemp1),y
.276f	ad 24 06	lda $0624			lda 	VARType
.2772	29 01		and #$01			and 	#1
.2774	f0 06		beq $277c			beq 	_CVNotString
.2776	a0 08		ldy #$08			ldy 	#5+3
.2778	a9 80		lda #$80			lda 	#$80
.277a	91 22		sta ($22),y			sta 	(zTemp1),y
.277c					_CVNotString:
.277c	ad 45 06	lda $0645			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.277f	85 20		sta $20				sta 	zTemp0
.2781	ad 46 06	lda $0646			lda 	VARHashEntry+1
.2784	85 21		sta $21				sta 	zTemp0+1
.2786	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2788	b2 20		lda ($20)			lda 	(zTemp0)
.278a	92 22		sta ($22)			sta 	(zTemp1)
.278c	b1 20		lda ($20),y			lda 	(zTemp0),y
.278e	91 22		sta ($22),y			sta 	(zTemp1),y
.2790	a5 22		lda $22				lda 	zTemp1 						; address of the new record into head
.2792	92 20		sta ($20)			sta 	(zTemp0)
.2794	a5 23		lda $23				lda 	zTemp1+1
.2796	91 20		sta ($20),y			sta 	(zTemp0),y
.2798	a5 22		lda $22				lda 	zTemp1 						; new record to XA
.279a	a6 23		ldx $23				ldx 	zTemp1+1
.279c	18		clc				clc 								; add 5 to point to the data.
.279d	69 05		adc #$05			adc 	#5
.279f	90 01		bcc $27a2			bcc 	_VCNoCarry
.27a1	e8		inx				inx
.27a2					_VCNoCarry:
.27a2	7a		ply				ply
.27a3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.27a4					VARFind:
.27a4	5a		phy				phy
.27a5	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.27a7	b1 20		lda ($20),y			lda 	(zTemp0),y
.27a9	85 23		sta $23				sta 	zTemp1+1
.27ab	f0 1c		beq $27c9			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.27ad	b2 20		lda ($20)			lda 	(zTemp0)
.27af	85 22		sta $22				sta 	zTemp1
.27b1					_VFLoop:
.27b1	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.27b3	b1 22		lda ($22),y			lda 	(zTemp1),y
.27b5	cd 23 06	cmp $0623			cmp 	VARHash
.27b8	f0 12		beq $27cc			beq 	_VFHashesMatch 				; if so, check the name.
.27ba					_VFNext:
.27ba	b2 22		lda ($22)			lda 	(zTemp1) 					; next link to AX
.27bc	aa		tax				tax
.27bd	a0 01		ldy #$01			ldy 	#1
.27bf	b1 22		lda ($22),y			lda 	(zTemp1),y
.27c1	85 23		sta $23				sta 	zTemp1+1
.27c3	86 22		stx $22				stx 	zTemp1
.27c5	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.27c7	d0 e8		bne $27b1			bne 	_VFLoop
.27c9					_VFExitFail:
.27c9	7a		ply				ply
.27ca	18		clc				clc
.27cb	60		rts				rts
.27cc					_VFHashesMatch:
.27cc	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.27ce	b1 22		lda ($22),y			lda 	(zTemp1),y
.27d0	85 24		sta $24				sta 	zTemp2
.27d2	c8		iny				iny
.27d3	b1 22		lda ($22),y			lda 	(zTemp1),y
.27d5	85 25		sta $25				sta 	zTemp2+1
.27d7	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.27d9					_VFNameCompLoop:
.27d9	c8		iny				iny 								; char at a time
.27da	b9 25 06	lda $0625,y			lda 	VARBuffer,y
.27dd	d1 24		cmp ($24),y			cmp 	(zTemp2),y
.27df	d0 d9		bne $27ba			bne 	_VFNext						; next entry if different.
.27e1	c9 7c		cmp #$7c			cmp 	#$7C
.27e3	90 f4		bcc $27d9			bcc 	_VFNameCompLoop 			; until done the whole lot.
.27e5	18		clc				clc
.27e6	a5 22		lda $22				lda 	zTemp1
.27e8	a6 23		ldx $23				ldx 	zTemp1+1
.27ea	69 05		adc #$05			adc 	#5
.27ec	90 01		bcc $27ef			bcc 	_VFNNoCarry
.27ee	e8		inx				inx
.27ef					_VFNNoCarry:
.27ef	7a		ply				ply
.27f0	38		sec				sec
.27f1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.27f2					VARGetInfo:
.27f2	98		tya				tya 								; calculate the address of the identifier start.
.27f3	18		clc				clc
.27f4	65 1e		adc $1e				adc 	codePtr
.27f6	8d 21 06	sta $0621			sta 	VARNameAddress
.27f9	a5 1f		lda $1f				lda 	codePtr+1
.27fb	69 00		adc #$00			adc 	#0
.27fd	8d 22 06	sta $0622			sta 	VARNameAddress+1
.2800	9c 23 06	stz $0623			stz 	VARHash
.2803	a2 00		ldx #$00			ldx 	#0
.2805					_VARCopyName:
.2805	18		clc				clc 								; update the sum hash.
.2806	ad 23 06	lda $0623			lda 	VARHash
.2809	71 1e		adc ($1e),y			adc 	(codePtr),y
.280b	8d 23 06	sta $0623			sta 	VARHash
.280e	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get character and save it in buffer
.2810	c8		iny				iny
.2811	9d 25 06	sta $0625,x			sta 	VARBuffer,x
.2814	e8		inx				inx
.2815	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2817	90 ec		bcc $2805			bcc 	_VARCopyName
.2819	8d 24 06	sta $0624			sta 	VARType 					; save type byte
.281c	29 03		and #$03			and 	#3 							; type is 0-3
.281e	0a		asl a				asl 	a
.281f	0a		asl a				asl 	a
.2820	85 20		sta $20				sta 	zTemp0
.2822	ad 23 06	lda $0623			lda 	VARHash 					; force into range of hash entries per type.
.2825	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2827	65 20		adc $20				adc 	zTemp0 						; index of hash table
.2829	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.282a	69 47		adc #$47			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.282c	85 20		sta $20				sta 	zTemp0
.282e	8d 45 06	sta $0645			sta 	VARHashEntry
.2831	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2833	69 00		adc #$00			adc 	#0
.2835	85 21		sta $21				sta 	zTemp0+1
.2837	8d 46 06	sta $0646			sta 	VARHashEntry+1
.283a	60		rts				rts
.283b					VARClearHashTables:
.283b	a2 00		ldx #$00			ldx 	#0
.283d					_VCHRLoop:
.283d	a9 00		lda #$00			lda 	#0
.283f	9d 47 06	sta $0647,x			sta 	VARHashTables,x
.2842	e8		inx				inx
.2843	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2845	d0 f6		bne $283d			bne 	_VCHRLoop
.2847	60		rts				rts
.0621					VARNameAddress:
>0621							.fill 	2
.0623					VARHash:
>0623							.fill 	1
.0624					VARType:
>0624							.fill 	1
.0625					VARBuffer:
>0625							.fill 	32
.0645					VARHashEntry:
>0645							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0647					VARHashTables:
>0647							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2848					VARCheckSimple:
.2848	aa		tax				tax 								; save in X
.2849	b1 1e		lda ($1e),y			lda 	(codePtr),y
.284b	c9 7c		cmp #$7c			cmp 	#$7C
.284d	d0 15		bne $2864			bne 	_VCSComplex
.284f	c8		iny				iny 								; consume the second byte, the type.
.2850	8a		txa				txa  								; character (40-7F) x 4
.2851	0a		asl a				asl 	a
.2852	0a		asl a				asl  	a
.2853	18		clc				clc
.2854	69 67		adc #$67			adc 	#FastVariables & $FF
.2856	85 0e		sta $0e				sta 	IFR0+IM0
.2858	a9 06		lda #$06			lda 	#FastVariables >> 8
.285a	69 00		adc #$00			adc 	#0
.285c	85 0f		sta $0f				sta 	IFR0+IM1
.285e	64 10		stz $10				stz 	IFR0+IM2
.2860	64 11		stz $11				stz 	IFR0+IExp
.2862	38		sec				sec 								; it's a reference
.2863	60		rts				rts
.2864					_VCSComplex:
.2864	88		dey				dey	 								; extract information.
.2865	20 f2 27	jsr $27f2			jsr 	VARGetInfo
.2868	20 a4 27	jsr $27a4			jsr 	VARFind 					; search for variable
.286b	b0 0a		bcs $2877			bcs 	_VCSHaveVariable
.286d	ad 24 06	lda $0624			lda 	VARType 					; error if arrays, cannot autocreate
.2870	29 02		and #$02			and 	#2
.2872	d0 25		bne $2899			bne 	_VCNoCreate
.2874	20 50 27	jsr $2750			jsr 	VARCreate 					; create variable
.2877					_VCSHaveVariable:
.2877	48		pha				pha 								; save LSB on the stack
.2878	ad 24 06	lda $0624			lda 	VARType 					; get var type, and shift bit 1 into carry
.287b	6a		ror a				ror 	a
.287c	6a		ror a				ror 	a
.287d	68		pla				pla 								; restore LSB
.287e	90 08		bcc $2888			bcc 	_VCSNotArray 				; skip if not an array
.2880	20 e8 26	jsr $26e8			jsr 	VARArrayLookup 				; look for subscripts.
.2883	48		pha				pha 								; check )
.2884	20 09 25	jsr $2509			jsr 	ERRCheckRParen
.2887	68		pla				pla
.2888					_VCSNotArray:
.2888	86 0f		stx $0f				stx 	IFR0+IM1 					; save address
.288a	85 0e		sta $0e				sta 	IFR0+IM0
.288c	64 10		stz $10				stz 	IFR0+IM2 					; clear the unused byte.
.288e	ad 24 06	lda $0624			lda 	VARType 					; number/string bit into carry
.2891	6a		ror a				ror 	a
.2892	a9 00		lda #$00			lda 	#0
.2894	6a		ror a				ror 	a 							; now $00 or $80
.2895	85 11		sta $11				sta 	IFR0+IExp
.2897	38		sec				sec 								; it's a reference
.2898	60		rts				rts
.2899					_VCNoCreate:
.2899	4c 78 24	jmp $2478		jmp	ErrorV_uninitialised
.0667					FastVariables:
>0667							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.289c					IFInitialise:
.289c	9c d7 06	stz $06d7			stz 	IFStackIndex
.289f	60		rts				rts
.28a0					IFloatSubtract:
.28a0	da		phx				phx
.28a1	a2 0e		ldx #$0e			ldx 	#IFR0
.28a3	20 bc 2e	jsr $2ebc			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.28a6	fa		plx				plx
.28a7					IFloatAdd:
.28a7	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.28a9	05 11		ora $11				ora 	IFR0+IExp
.28ab	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.28ad	d0 4e		bne $28fd			bne 	_IFloatAddDecimals 			; decimal version.
.28af					_IFAddSubMantissa:
.28af	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.28b1	45 11		eor $11				eor 	IFR0+IExp
.28b3	29 40		and #$40			and 	#IFSign
.28b5	d0 21		bne $28d8			bne 	_IFloatSubMantissa
.28b7	18		clc				clc 								; do the actual addition
.28b8	a5 0e		lda $0e			lda 	IFR0+IM0
.28ba	75 00		adc $00,x		adc 		IM0,x
.28bc	85 0e		sta $0e			sta 	IFR0+IM0
.28be	a5 0f		lda $0f			lda 	IFR0+IM1
.28c0	75 01		adc $01,x		adc 		IM1,x
.28c2	85 0f		sta $0f			sta 	IFR0+IM1
.28c4	a5 10		lda $10			lda 	IFR0+IM2
.28c6	75 02		adc $02,x		adc 		IM2,x
.28c8	85 10		sta $10			sta 	IFR0+IM2
.28ca	10 29		bpl $28f5			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.28cc	a2 0e		ldx #$0e			ldx 	#IFR0						; shift R0 right, divide by 2
.28ce	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftRight
.28d1	20 0a 2f	jsr $2f0a			jsr 	IFloatIncExponent
.28d4	d0 1f		bne $28f5			bne 	_IFloatAddExit
.28d6	38		sec				sec 								; overflowed numerically.
.28d7	60		rts				rts
.28d8					_IFloatSubMantissa:
.28d8	38		sec				sec 								; do the subtraction R0-Rx
.28d9	a5 0e		lda $0e			lda 	IFR0+IM0
.28db	f5 00		sbc $00,x		sbc 		IM0,x
.28dd	85 0e		sta $0e			sta 	IFR0+IM0
.28df	a5 0f		lda $0f			lda 	IFR0+IM1
.28e1	f5 01		sbc $01,x		sbc 		IM1,x
.28e3	85 0f		sta $0f			sta 	IFR0+IM1
.28e5	a5 10		lda $10			lda 	IFR0+IM2
.28e7	f5 02		sbc $02,x		sbc 		IM2,x
.28e9	85 10		sta $10			sta 	IFR0+IM2
.28eb	b0 08		bcs $28f5			bcs 	_IFloatAddExit 				; no borrow so we are done.
.28ed	a2 0e		ldx #$0e			ldx 	#IFR0
.28ef	20 c4 2e	jsr $2ec4			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.28f2	20 bc 2e	jsr $2ebc			jsr 	IFloatNegate 				; negate
.28f5					_IFloatAddExit:
.28f5	18		clc				clc
.28f6	60		rts				rts
.28f7					_IFloatZeroAdd:
.28f7	fa		plx				plx 								; return this value in R0
.28f8	20 42 2e	jsr $2e42			jsr 	IFloatCopyFromRegister
.28fb	18		clc				clc
.28fc	60		rts				rts
.28fd					_IFloatAddDecimals:
.28fd	20 aa 2e	jsr $2eaa			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2900	f0 f3		beq $28f5			beq 	_IFloatAddExit
.2902	20 e8 2e	jsr $2ee8			jsr 	IFloatNormalise 			; normalise RX
.2905	da		phx				phx 								; normalise R0
.2906	a2 0e		ldx #$0e			ldx 	#IFR0
.2908	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero
.290b	f0 ea		beq $28f7			beq 	_IFloatZeroAdd
.290d	20 e8 2e	jsr $2ee8			jsr 	IFloatNormalise
.2910	fa		plx				plx
.2911	a5 11		lda $11				lda 	IFR0+IExp 					; get the exponent of R0
.2913	29 3f		and #$3f			and 	#IFXMask
.2915	38		sec				sec
.2916	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2918	85 0c		sta $0c				sta 	iTemp0
.291a	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.291c	29 3f		and #$3f			and 	#IFXMask
.291e	38		sec				sec
.291f	e9 20		sbc #$20			sbc 	#$20
.2921	c5 0c		cmp $0c				cmp 	iTemp0 						; get the larger adjusted
.2923	b0 02		bcs $2927			bcs 	_IFloatHaveLarger
.2925	a5 0c		lda $0c				lda 	iTemp0
.2927					_IFloatHaveLarger:
.2927	18		clc				clc 								; get the actual one back.
.2928	69 20		adc #$20			adc 	#$20 						; shift both to that.
.292a	20 37 29	jsr $2937			jsr 	_IFShiftXToA
.292d	da		phx				phx
.292e	a2 0e		ldx #$0e			ldx 	#IFR0
.2930	20 37 29	jsr $2937			jsr 	_IFShiftXToA
.2933	fa		plx				plx
.2934	4c af 28	jmp $28af			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2937					_IFShiftXToA:
.2937	8d cf 06	sta $06cf			sta 	IFTarget
.293a	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero 			; check adding zero ?
.293d	f0 11		beq $2950			beq 	_IFSXExit
.293f					_IFSXLoop:
.293f	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2941	29 3f		and #$3f			and 	#IFXMask
.2943	cd cf 06	cmp $06cf			cmp 	IFTarget
.2946	f0 08		beq $2950			beq 	_IFSXExit
.2948	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftRight
.294b	20 0a 2f	jsr $2f0a			jsr 	IFloatIncExponent
.294e	80 ef		bra $293f			bra 	_IFSXLoop
.2950					_IFSXExit:
.2950	60		rts				rts
.06cf					IFTarget:
>06cf							.fill 	1
.2951					IFloatMultiply:
.2951	8e cf 06	stx $06cf			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2954	20 0c 2a	jsr $2a0c			jsr 	IFCalculateNewSign
.2957	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2959	05 11		ora $11				ora 	IFR0+IExp
.295b	29 3f		and #$3f			and 	#IFXMask
.295d	15 01		ora $01,x			ora 	IM1,x
.295f	05 0f		ora $0f				ora 	IFR0+IM1
.2961	15 02		ora $02,x			ora 	IM2,x
.2963	05 10		ora $10				ora 	IFR0+IM2
.2965	d0 0a		bne $2971			bne 	_IFMStandard
.2967	20 8d 2e	jsr $2e8d			jsr 	IFloatMultiply8BitRx
.296a	ad d1 06	lda $06d1			lda 	IFNewSign
.296d	85 11		sta $11				sta 	IFR0+IExp
.296f	18		clc				clc
.2970	60		rts				rts
.2971					_IFMStandard:
.2971	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2973	20 03 2a	jsr $2a03			jsr 	IFMSignExtend
.2976	8d d0 06	sta $06d0			sta 	IFNewExponent
.2979	a5 11		lda $11				lda 	IFR0+IExp
.297b	20 03 2a	jsr $2a03			jsr 	IFMSignExtend
.297e	18		clc				clc
.297f	6d d0 06	adc $06d0			adc 	IFNewExponent
.2982	8d d0 06	sta $06d0			sta 	IFNewExponent
.2985	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2987	20 53 2e	jsr $2e53			jsr 	IFloatCopyToRegister
.298a	a2 0e		ldx #$0e			ldx 	#IFR0 						; zero R0 (the result)
.298c	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.298f					_IFMLoop:
.298f	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2991	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero
.2994	f0 3a		beq $29d0			beq 	_IFMExit
.2996	ae cf 06	ldx $06cf			ldx 	IFTarget 					; look at adder MSB
.2999	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.299b	10 03		bpl $29a0			bpl	 	_IFMTargetOkay
.299d	20 f4 29	jsr $29f4			jsr 	_IFMShiftAll
.29a0					_IFMTargetOkay:
.29a0	a5 1a		lda $1a				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.29a2	29 01		and #$01			and 	#1
.29a4	f0 16		beq $29bc			beq 	_IFMNoAdd
.29a6	ae cf 06	ldx $06cf			ldx 	IFTarget 					; add adder
.29a9	18		clc				clc
.29aa	a5 0e		lda $0e			lda 	IFR0+IM0
.29ac	75 00		adc $00,x		adc 		IM0,x
.29ae	85 0e		sta $0e			sta 	IFR0+IM0
.29b0	a5 0f		lda $0f			lda 	IFR0+IM1
.29b2	75 01		adc $01,x		adc 		IM1,x
.29b4	85 0f		sta $0f			sta 	IFR0+IM1
.29b6	a5 10		lda $10			lda 	IFR0+IM2
.29b8	75 02		adc $02,x		adc 		IM2,x
.29ba	85 10		sta $10			sta 	IFR0+IM2
.29bc					_IFMNoAdd:
.29bc	a5 10		lda $10				lda 	IFR0+IM2
.29be	10 03		bpl $29c3			bpl 	_IFMResultOkay
.29c0	20 f4 29	jsr $29f4			jsr 	_IFMShiftAll
.29c3					_IFMResultOkay:
.29c3	a2 1a		ldx #$1a			ldx 	#IFRTemp
.29c5	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftRight
.29c8	ae cf 06	ldx $06cf			ldx 	IFTarget
.29cb	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.29ce	80 bf		bra $298f			bra 	_IFMLoop
.29d0					_IFMExit:
.29d0	ad d0 06	lda $06d0			lda 	IFNewExponent 				; validate new exponent.
.29d3	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.29d5	90 0f		bcc $29e6			bcc 	_IFMOkay
.29d7	c9 e0		cmp #$e0			cmp 	#$E0
.29d9	b0 0b		bcs $29e6			bcs 	_IFMOkay
.29db	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.29dd	f0 13		beq $29f2			beq 	_IFMError
.29df	a2 0e		ldx #$0e			ldx 	#IFR0 						; return zero underflow
.29e1	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.29e4	18		clc				clc
.29e5	60		rts				rts
.29e6					_IFMOkay:
.29e6	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.29e8	0d d1 06	ora $06d1			ora 	IFNewSign
.29eb	85 11		sta $11				sta 	IFR0+IExp
.29ed	18		clc				clc
.29ee	60		rts				rts
.29ef	4c ff ff	jmp $ffff			jmp 	$FFFF
.29f2					_IFMError:
.29f2	38		sec				sec
.29f3	60		rts				rts
.29f4					_IFMShiftAll:
.29f4	a2 0e		ldx #$0e			ldx 	#IFR0
.29f6	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftRight
.29f9	ae cf 06	ldx $06cf			ldx 	IFTarget
.29fc	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftRight
.29ff	ee d0 06	inc $06d0			inc 	IFNewExponent
.2a02	60		rts				rts
.2a03					IFMSignExtend:
.2a03	29 3f		and #$3f			and 	#IFXMask
.2a05	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2a07	90 02		bcc $2a0b			bcc 	_IFMNoSXX
.2a09	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2a0b					_IFMNoSXX:
.2a0b	60		rts				rts
.2a0c					IFCalculateNewSign:
.2a0c	b5 03		lda $03,x			lda 	IExp,x
.2a0e	45 11		eor $11				eor 	IFR0+IExp
.2a10	29 40		and #$40			and 	#IFSign
.2a12	8d d1 06	sta $06d1			sta 	IFNewSign
.2a15	60		rts				rts
.06d0					IFNewExponent:
>06d0							.fill 	1
.06d1					IFNewSign:
>06d1							.fill 	1
.2a16					IFloatDivideInteger:
.2a16	20 2f 2a	jsr $2a2f			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2a19	b0 06		bcs $2a21			bcs 	_IFDIExit
.2a1b	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy result from register.
.2a1d	20 42 2e	jsr $2e42			jsr 	IFloatCopyFromRegister
.2a20	18		clc				clc
.2a21					_IFDIExit:
.2a21	60		rts				rts
.2a22					IFloatModulusInteger:
.2a22	20 2f 2a	jsr $2a2f			jsr 	IFloatDivideIntegerCommon
.2a25	b0 07		bcs $2a2e			bcs 	_IFMIExit
.2a27	ae cf 06	ldx $06cf			ldx 	IFTarget
.2a2a	20 42 2e	jsr $2e42			jsr 	IFloatCopyFromRegister
.2a2d	18		clc				clc
.2a2e					_IFMIExit:
.2a2e	60		rts				rts
.2a2f					IFloatDivideIntegerCommon:
.2a2f	8e cf 06	stx $06cf			stx 	IFTarget  					; this is s1, s0 = R0
.2a32	20 0c 2a	jsr $2a0c			jsr 	IFCalculateNewSign 			; calculate sign of result
.2a35	20 5d 2a	jsr $2a5d			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2a38	a2 0e		ldx #$0e			ldx 	#IFR0 						; check divide by zero
.2a3a	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero
.2a3d	f0 1c		beq $2a5b			beq 	_IFDIDivZero
.2a3f	ae cf 06	ldx $06cf			ldx 	IFTarget 					; zero Rx (S1)
.2a42	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.2a45	5a		phy				phy
.2a46	a0 18		ldy #$18			ldy 	#24
.2a48					_IFDILoop:
.2a48	20 6e 2a	jsr $2a6e			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2a4b	20 7a 2a	jsr $2a7a			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2a4e	88		dey				dey
.2a4f	d0 f7		bne $2a48			bne 	_IFDILoop 					; do it 24 times
.2a51	7a		ply				ply
.2a52	ad d1 06	lda $06d1			lda 	IFNewSign 					; set sign of result.
.2a55	29 40		and #$40			and 	#IFSign
.2a57	85 1d		sta $1d				sta 	IFRTemp+IExp
.2a59	18		clc				clc 								; is okay.
.2a5a	60		rts				rts
.2a5b					_IFDIDivZero:
.2a5b	38		sec				sec
.2a5c	60		rts				rts
.2a5d					IFDCopyRXToRTemp:
.2a5d	b5 00		lda $00,x			lda 	IM0,x
.2a5f	85 1a		sta $1a				sta 	IFRTemp+IM0
.2a61	b5 01		lda $01,x			lda 	IM1,x
.2a63	85 1b		sta $1b				sta 	IFRTemp+IM1
.2a65	b5 02		lda $02,x			lda 	IM2,x
.2a67	85 1c		sta $1c				sta 	IFRTemp+IM2
.2a69	b5 03		lda $03,x			lda 	IExp,x
.2a6b	85 1d		sta $1d				sta 	IFRTemp+IExp
.2a6d	60		rts				rts
.2a6e					IFDShiftSTempS1Left:
.2a6e	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2a70	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft
.2a73	ae cf 06	ldx $06cf			ldx 	IFTarget
.2a76	20 d9 2e	jsr $2ed9			jsr 	IFloatRotateLeft
.2a79	60		rts				rts
.2a7a					IFDTrySubtract:
.2a7a	ae cf 06	ldx $06cf			ldx 	IFTarget 					; s1 = Rx
.2a7d	38		sec				sec 								; subtract, saving the results on the stack.
.2a7e	b5 00		lda $00,x			lda 	IM0,x
.2a80	e5 0e		sbc $0e				sbc 	IFR0+IM0
.2a82	48		pha				pha
.2a83	b5 01		lda $01,x			lda 	IM1,x
.2a85	e5 0f		sbc $0f				sbc 	IFR0+IM1
.2a87	48		pha				pha
.2a88	b5 02		lda $02,x			lda 	IM2,x
.2a8a	e5 10		sbc $10				sbc 	IFR0+IM2
.2a8c	b0 03		bcs $2a91			bcs 	_IFDCanSubtract
.2a8e	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2a8f	68		pla				pla
.2a90	60		rts				rts
.2a91					_IFDCanSubtract:
.2a91	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2a93	68		pla				pla
.2a94	95 01		sta $01,x			sta 	IM1,x
.2a96	68		pla				pla
.2a97	95 00		sta $00,x			sta 	IM0,x
.2a99	e6 1a		inc $1a				inc 	IFRTemp+IM0 				; increment temp
.2a9b	d0 06		bne $2aa3			bne 	_IFDCSExit
.2a9d	e6 1b		inc $1b				inc 	IFRTemp+IM1
.2a9f	d0 02		bne $2aa3			bne 	_IFDCSExit
.2aa1	e6 1c		inc $1c				inc 	IFRTemp+IM2
.2aa3					_IFDCSExit:
.2aa3	60		rts				rts
.2aa4					IFloatBitwiseAnd:
.2aa4	5a		phy				phy
.2aa5	20 e9 2a	jsr $2ae9			jsr 	IFPreProcessBitwise 		; set up everything.
.2aa8	d0 0f		bne $2ab9			bne 	_IFBAExit
.2aaa					_IFBALoop:
.2aaa	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2aad	35 00		and $00,x			and 	IM0,x
.2aaf	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2ab2	e8		inx				inx
.2ab3	c8		iny				iny
.2ab4	c0 03		cpy #$03			cpy 	#3
.2ab6	d0 f2		bne $2aaa			bne 	_IFBALoop
.2ab8	18		clc				clc
.2ab9					_IFBAExit:
.2ab9	7a		ply				ply
.2aba	60		rts				rts
.2abb					IFloatBitwiseOr:
.2abb	5a		phy				phy
.2abc	20 e9 2a	jsr $2ae9			jsr 	IFPreProcessBitwise 		; set up everything.
.2abf	d0 0f		bne $2ad0			bne 	_IFBAExit
.2ac1					_IFBALoop:
.2ac1	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2ac4	15 00		ora $00,x			ora 	IM0,x
.2ac6	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2ac9	e8		inx				inx
.2aca	c8		iny				iny
.2acb	c0 03		cpy #$03			cpy 	#3
.2acd	d0 f2		bne $2ac1			bne 	_IFBALoop
.2acf	18		clc				clc
.2ad0					_IFBAExit:
.2ad0	7a		ply				ply
.2ad1	60		rts				rts
.2ad2					IFloatBitwiseXor:
.2ad2	5a		phy				phy
.2ad3	20 e9 2a	jsr $2ae9			jsr 	IFPreProcessBitwise 		; set up everything.
.2ad6	d0 0f		bne $2ae7			bne 	_IFBAExit
.2ad8					_IFBALoop:
.2ad8	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2adb	55 00		eor $00,x			eor 	IM0,x
.2add	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2ae0	e8		inx				inx
.2ae1	c8		iny				iny
.2ae2	c0 03		cpy #$03			cpy 	#3
.2ae4	d0 f2		bne $2ad8			bne 	_IFBALoop
.2ae6	18		clc				clc
.2ae7					_IFBAExit:
.2ae7	7a		ply				ply
.2ae8	60		rts				rts
.2ae9					IFPreProcessBitwise:
.2ae9	a0 00		ldy #$00			ldy 	#0 							; set index.
.2aeb	a5 11		lda $11				lda 	IFR0+IExp 					; OR exponents
.2aed	15 03		ora $03,x			ora 	IExp,x
.2aef	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2af1	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2af3	38		sec				sec 								; carry set just in cases.
.2af4	60		rts				rts
.2af5					IFloatAbsoluteR0:
.2af5	a5 11		lda $11				lda 	IFR0+IExp					; reset the sign bit.
.2af7	29 bf		and #$bf			and 	#IFSign ^ 255
.2af9	85 11		sta $11				sta 	IFR0+IExp
.2afb	18		clc				clc
.2afc	60		rts				rts
.2afd					IFloatSquareRootR0:
.2afd	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, return zero.
.2aff	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero
.2b02	a5 11		lda $11				lda	 	IFR0+IExp 					; if negative fail.
.2b04	29 40		and #$40			and 	#IFSign
.2b06	d0 2f		bne $2b37			bne 	_IFSRFail
.2b08	20 e8 2e	jsr $2ee8			jsr 	IFloatNormalise 			; it will work better !
.2b0b	a2 12		ldx #$12			ldx 	#IFR1 						; R1 contains original throughout
.2b0d	20 53 2e	jsr $2e53			jsr 	IFloatCopyToRegister
.2b10	a5 11		lda $11				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2b12	20 03 2a	jsr $2a03			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2b15	18		clc				clc
.2b16	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2b18	85 11		sta $11				sta 	IFR0+IExp
.2b1a	4a		lsr a				lsr 	a 							; which we can halve.
.2b1b	38		sec				sec 								; convert back
.2b1c	e9 17		sbc #$17			sbc 	#23
.2b1e	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2b20	85 11		sta $11				sta 	IFR0+IExp 					; to R0
.2b22	20 39 2b	jsr $2b39			jsr 	_IFSRNewton
.2b25	20 39 2b	jsr $2b39			jsr 	_IFSRNewton
.2b28	20 39 2b	jsr $2b39			jsr 	_IFSRNewton
.2b2b	20 39 2b	jsr $2b39			jsr 	_IFSRNewton
.2b2e	18		clc				clc
.2b2f	60		rts				rts
.2b30					_IFSRZero:
.2b30	a2 0e		ldx #$0e			ldx 	#IFR0
.2b32	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.2b35	18		clc				clc
.2b36	60		rts				rts
.2b37					_IFSRFail:
.2b37	38		sec				sec
.2b38	60		rts				rts
.2b39					_IFSRNewton:
.2b39	a2 12		ldx #$12			ldx 	#IFR1 						; push original value (R3) on the stack
.2b3b	20 00 2e	jsr $2e00			jsr 	IFloatPushRx
.2b3e	a2 0e		ldx #$0e			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2b40	20 00 2e	jsr $2e00			jsr 	IFloatPushRx
.2b43	a2 12		ldx #$12			ldx 	#IFR1 						; guess = original / guess
.2b45	20 d4 2b	jsr $2bd4			jsr 	IFloatDivideFloat
.2b48	a2 12		ldx #$12			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2b4a	20 21 2e	jsr $2e21			jsr 	IFloatPullRx
.2b4d	20 a7 28	jsr $28a7			jsr 	IFloatAdd 					; now guess + original/guess
.2b50	a2 0e		ldx #$0e			ldx 	#IFR0 						; divide by 2
.2b52	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftRight
.2b55	a2 12		ldx #$12			ldx 	#IFR1
.2b57	20 21 2e	jsr $2e21			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2b5a	60		rts				rts
.2b5b					IFloatFractionalR0:
.2b5b	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2b5d	29 3f		and #$3f			and 	#IFXMask
.2b5f	f0 17		beq $2b78			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2b61	20 f5 2a	jsr $2af5			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2b64	a2 0e		ldx #$0e			ldx 	#IFR0
.2b66	20 e8 2e	jsr $2ee8			jsr 	IFloatNormalise 			; normalise R0
.2b69	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy to RTemp
.2b6b	20 53 2e	jsr $2e53			jsr 	IFloatCopyToRegister
.2b6e	20 b1 2b	jsr $2bb1			jsr 	IFloatIntegerR0 			; take integer part of R0
.2b71	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; subtract
.2b73	20 a0 28	jsr $28a0			jsr 	IFloatSubtract
.2b76	80 05		bra $2b7d			bra 	_FIPExit
.2b78					_FIPZero:
.2b78	a2 0e		ldx #$0e			ldx 	#IFR0
.2b7a	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.2b7d					_FIPExit:
.2b7d	18		clc				clc
.2b7e	60		rts				rts
.2b7f					IFloatCompare:
.2b7f	20 a0 28	jsr $28a0			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2b82	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2b84	05 11		ora $11				ora 	IFR0+IExp
.2b86	a2 0e		ldx #$0e			ldx 	#IFR0 						; only using R0 from now on.
.2b88	29 3f		and #$3f			and 	#IFXMask
.2b8a	d0 19		bne $2ba5			bne 	_IFCNonInteger
.2b8c	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero 			; check if zero
.2b8f	f0 0f		beq $2ba0			beq 	_IFCZero
.2b91					_IFCReturnSign:
.2b91	a5 11		lda $11				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2b93	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2b95	48		pha				pha
.2b96	a9 01		lda #$01			lda 	#1
.2b98	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte 				; return to +1
.2b9b	68		pla				pla 								; sign bit back
.2b9c	85 11		sta $11				sta 	IFR0+IExp					; set that sign
.2b9e	18		clc				clc
.2b9f	60		rts				rts
.2ba0					_IFCZero:
.2ba0	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.2ba3	18		clc				clc
.2ba4	60		rts				rts
.2ba5					_IFCNonInteger:
.2ba5	a5 0e		lda $0e				lda 	IFR0+IM0
.2ba7	29 00		and #$00			and		#$00
.2ba9	05 0f		ora $0f				ora 	IFR0+IM1
.2bab	05 10		ora $10				ora 	IFR0+IM2
.2bad	f0 f1		beq $2ba0			beq 	_IFCZero 					; near enough !
.2baf	80 e0		bra $2b91			bra 	_IFCReturnSign 				; return the sign of the difference.
.2bb1					IFloatIntegerR0:
.2bb1	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2bb3	29 3f		and #$3f			and 	#IFXMask
.2bb5	f0 1b		beq $2bd2			beq 	_FIPExit 					; if so do nothing
.2bb7	a2 0e		ldx #$0e			ldx 	#IFR0
.2bb9	20 e8 2e	jsr $2ee8			jsr 	IFloatNormalise 			; normalise
.2bbc	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero 			; is it zero ?
.2bbf	f0 0e		beq $2bcf			beq 	_FIPZero 					; if so return zero.
.2bc1					_FIPShift:
.2bc1	a5 11		lda $11				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2bc3	29 20		and #$20			and 	#$20 						; still -ve
.2bc5	f0 0b		beq $2bd2			beq 	_FIPExit
.2bc7	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftRight 			; shift mantissa right
.2bca	20 0a 2f	jsr $2f0a			jsr 	IFloatIncExponent 			; bump exponent
.2bcd	80 f2		bra $2bc1			bra 	_FIPShift
.2bcf					_FIPZero:
.2bcf	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.2bd2					_FIPExit:
.2bd2	18		clc				clc
.2bd3	60		rts				rts
.2bd4					IFloatDivideFloat:
.2bd4	8e cf 06	stx $06cf			stx 	IFTarget  					; this is s1, s0 = R0
.2bd7	20 0c 2a	jsr $2a0c			jsr 	IFCalculateNewSign 			; calculate sign of result
.2bda	20 e8 2e	jsr $2ee8			jsr 	IFloatNormalise 			; normalise RX
.2bdd	a2 0e		ldx #$0e			ldx 	#IFR0 						; normalise R0
.2bdf	20 e8 2e	jsr $2ee8			jsr 	IFloatNormalise
.2be2	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero
.2be5	f0 56		beq $2c3d			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2be7	a5 11		lda $11				lda 	IFR0+IExp 					; calculate s0.exponent
.2be9	20 03 2a	jsr $2a03			jsr 	IFMSignExtend
.2bec	8d d0 06	sta $06d0			sta 	IFNewExponent
.2bef	ae cf 06	ldx $06cf			ldx 	IFTarget 					; calculate s1.exponent
.2bf2	b5 03		lda $03,x			lda 	IExp,x
.2bf4	20 03 2a	jsr $2a03			jsr 	IFMSignExtend
.2bf7	38		sec				sec
.2bf8	ed d0 06	sbc $06d0			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2bfb	38		sec				sec
.2bfc	e9 17		sbc #$17			sbc 	#23
.2bfe	8d d0 06	sta $06d0			sta 	IFNewExponent
.2c01	20 3f 2c	jsr $2c3f			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2c04	a5 1c		lda $1c				lda 	IFRTemp+IM2 				; result has overflowed ?
.2c06	10 08		bpl $2c10			bpl 	_IFDFNoShiftResult
.2c08	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; if so, fix it up.
.2c0a	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftRight
.2c0d	ee d0 06	inc $06d0			inc 	IFNewExponent
.2c10					_IFDFNoShiftResult:
.2c10	ad d0 06	lda $06d0			lda 	IFNewExponent 				; underflow/overflow check.
.2c13	30 06		bmi $2c1b			bmi 	_IFDFCheckUnderflow
.2c15	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2c17	b0 24		bcs $2c3d			bcs 	_IFDFDivZero
.2c19	80 11		bra $2c2c			bra		_IFDFExit
.2c1b					_IFDFCheckUnderflow:
.2c1b	ad d0 06	lda $06d0			lda 	IFNewExponent 				; shift into a legal exponent.
.2c1e	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2c20	b0 0a		bcs $2c2c			bcs 	_IFDFExit
.2c22	ee d0 06	inc $06d0			inc 	IFNewExponent
.2c25	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2c27	20 e0 2e	jsr $2ee0			jsr 	IFloatShiftRight
.2c2a	80 ef		bra $2c1b			bra 	_IFDFCheckUnderflow
.2c2c					_IFDFExit:
.2c2c	ad d0 06	lda $06d0			lda 	IFNewExponent 				; combine exponent and sign.
.2c2f	29 3f		and #$3f			and 	#IFXMask
.2c31	0d d1 06	ora $06d1			ora 	IFNewSign
.2c34	85 1d		sta $1d				sta 	IFRTemp+IExp
.2c36	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy RTemp to R0.
.2c38	20 42 2e	jsr $2e42			jsr 	IFloatCopyFromRegister
.2c3b	18		clc				clc
.2c3c	60		rts				rts
.2c3d					_IFDFDivZero:
.2c3d	38		sec				sec
.2c3e	60		rts				rts
.2c3f					IFloatDivideSupport:
.2c3f	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; zero RTemp
.2c41	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.2c44	5a		phy				phy 								; main division loop x 23
.2c45	a0 17		ldy #$17			ldy 	#23
.2c47					_IFDSLoop:
.2c47	20 7a 2a	jsr $2a7a			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2c4a	20 6e 2a	jsr $2a6e			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2c4d	88		dey				dey
.2c4e	d0 f7		bne $2c47			bne 	_IFDSLoop 					; do it 24 times
.2c50	7a		ply				ply
.2c51	60		rts				rts
.2c52					IFloatIntegerToStringR0:
.2c52	8d d2 06	sta $06d2			sta 	IFBase 						; save base to use.
.2c55	20 32 2f	jsr $2f32			jsr 	IFloatBufferReset			; empty buffer
.2c58	a5 11		lda $11				lda 	IFR0+IExp					; check integer
.2c5a	29 3f		and #$3f			and 	#IFXMask
.2c5c	d0 1e		bne $2c7c			bne 	_IFIFail
.2c5e	a2 0e		ldx #$0e			ldx 	#IFR0 						; skip - check if zero.
.2c60	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero
.2c63	f0 0e		beq $2c73			beq 	_IFINotNegative
.2c65	a5 11		lda $11				lda 	IFR0+IExp 					; is signed ?
.2c67	29 40		and #$40			and 	#IFSign
.2c69	f0 08		beq $2c73			beq 	_IFINotNegative
.2c6b	a9 2d		lda #$2d			lda 	#"-"						; output -
.2c6d	20 41 2f	jsr $2f41			jsr 	IFloatBufferWrite
.2c70	20 bc 2e	jsr $2ebc			jsr 	IFloatNegate 				; tidy up !
.2c73					_IFINotNegative:
.2c73	20 7e 2c	jsr $2c7e			jsr 	_IFIRecursiveConvert 		; start converting
.2c76	20 39 2f	jsr $2f39			jsr 	IFloatGetBufferAddress
.2c79	18		clc				clc
.2c7a	80 01		bra $2c7d			bra 	_IFIExit
.2c7c					_IFIFail:
.2c7c	38		sec				sec
.2c7d					_IFIExit:
.2c7d	60		rts				rts
.2c7e					_IFIRecursiveConvert:
.2c7e	a2 12		ldx #$12			ldx 	#IFR1
.2c80	20 53 2e	jsr $2e53			jsr 	IFloatCopyToRegister 		; R0->R1
.2c83	a2 0e		ldx #$0e			ldx 	#IFR0
.2c85	ad d2 06	lda $06d2			lda 	IFBase 						; Base -> R0
.2c88	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.2c8b	a2 12		ldx #$12			ldx 	#IFR1 						; R0 = R1 / R0
.2c8d	20 16 2a	jsr $2a16			jsr 	IFloatDivideInteger
.2c90	a2 0e		ldx #$0e			ldx 	#IFR0 						; if result <> 0
.2c92	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero
.2c95	f0 09		beq $2ca0			beq 	_IFIOutDigit
.2c97	a5 12		lda $12				lda 	IFR1+IM0 					; save remainder
.2c99	48		pha				pha
.2c9a	20 7e 2c	jsr $2c7e			jsr 	_IFIRecursiveConvert 		; convert the divider
.2c9d	68		pla				pla
.2c9e	85 12		sta $12				sta 	IFR1+IM0 					; restore remainder
.2ca0					_IFIOutDigit:
.2ca0	a5 12		lda $12				lda 	IFR1+IM0 					; get remainder.
.2ca2	c9 0a		cmp #$0a			cmp	 	#10
.2ca4	90 02		bcc $2ca8			bcc 	_IFINotHex
.2ca6	69 06		adc #$06			adc 	#6
.2ca8					_IFINotHex:
.2ca8	69 30		adc #$30			adc 	#48
.2caa	20 41 2f	jsr $2f41			jsr 	IFloatBufferWrite
.2cad	60		rts				rts
.06d2					IFBase:
>06d2							.fill 	1
.2cae					IFloatFloatToStringR0:
.2cae	a2 16		ldx #$16			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2cb0	20 00 2e	jsr $2e00			jsr 	IFloatPushRx
.2cb3	20 53 2e	jsr $2e53			jsr 	IFloatCopyToRegister
.2cb6	20 b1 2b	jsr $2bb1			jsr 	IFloatIntegerR0				; make R0 integer
.2cb9	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2cbb	20 52 2c	jsr $2c52			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2cbe	9c d3 06	stz $06d3			stz 	IFloatDecimalCount 			; zero the decimal count.
.2cc1	a5 19		lda $19				lda 	IFR2+IExp 					; is integer.
.2cc3	29 3f		and #$3f			and 	#IFXMask
.2cc5	f0 44		beq $2d0b			beq 	_IFFSExit
.2cc7					_IFloatFracLoop:
.2cc7	a2 16		ldx #$16			ldx 	#IFR2 						; R0 = fractional part of R2
.2cc9	20 42 2e	jsr $2e42			jsr 	IFloatCopyFromRegister
.2ccc	20 5b 2b	jsr $2b5b			jsr 	IFloatFractionalR0
.2ccf	20 e8 2e	jsr $2ee8			jsr 	IFloatNormalise
.2cd2	a2 16		ldx #$16			ldx 	#IFR2
.2cd4	20 53 2e	jsr $2e53			jsr 	IFloatCopyToRegister 		; copy to R2
.2cd7	a2 16		ldx #$16			ldx 	#IFR2 						; set R2 to 10
.2cd9	a9 0a		lda #$0a			lda 	#10
.2cdb	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.2cde	a2 16		ldx #$16			ldx 	#IFR2						; R0,R2 = R2 * 10
.2ce0	20 51 29	jsr $2951			jsr 	IFloatMultiply
.2ce3	a2 16		ldx #$16			ldx 	#IFR2
.2ce5	20 53 2e	jsr $2e53			jsr 	IFloatCopyToRegister
.2ce8	20 b1 2b	jsr $2bb1			jsr 	IFloatIntegerR0 			; get integer part of R0
.2ceb	ad d3 06	lda $06d3			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2cee	c9 03		cmp #$03			cmp 	#3
.2cf0	f0 16		beq $2d08			beq 	_IFFSExitStripZero
.2cf2	ad d3 06	lda $06d3			lda 	IFloatDecimalCount 			; written the DP yet ?
.2cf5	d0 05		bne $2cfc			bne 	_IFloatNotFirst
.2cf7	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2cf9	20 41 2f	jsr $2f41			jsr 	IFloatBufferWrite
.2cfc					_IFloatNotFirst:
.2cfc	ee d3 06	inc $06d3			inc 	IFloatDecimalCount
.2cff	a5 0e		lda $0e				lda 	IFR0+IM0 					; get digit
.2d01	09 30		ora #$30			ora 	#"0"						; ASCII
.2d03	20 41 2f	jsr $2f41			jsr 	IFloatBufferWrite 			; write to the buffer.
.2d06	80 bf		bra $2cc7			bra 	_IFloatFracLoop
.2d08					_IFFSExitStripZero:
.2d08	20 50 2f	jsr $2f50			jsr 	IFloatStripTrailingZeros
.2d0b					_IFFSExit:
.2d0b	a2 16		ldx #$16			ldx 	#IFR2 						; restore R2
.2d0d	20 21 2e	jsr $2e21			jsr 	IFloatPullRx
.2d10	20 39 2f	jsr $2f39			jsr 	IFloatGetBufferAddress
.2d13	18		clc				clc
.2d14	60		rts				rts
.06d3					IFloatDecimalCount:
>06d3							.fill 	1
.2d15					IFloatStringToFloatR0:
.2d15	8d d4 06	sta $06d4			sta 	IFCount 					; save it out.
.2d18	86 0c		stx $0c				stx 	iTemp0
.2d1a	84 0d		sty $0d				sty 	iTemp0+1
.2d1c	a2 0e		ldx #$0e			ldx 	#IFR0 						; reset the current value.
.2d1e	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.2d21	9c d5 06	stz $06d5			stz 	IFSignFlag 					; clear the sign flag
.2d24	20 b1 2d	jsr $2db1			jsr 	IFSTFGetNext 				; get first
.2d27	f0 1b		beq $2d44			beq 	_IFSTFFail 					; no character
.2d29	90 10		bcc $2d3b			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2d2b	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2d2d	d0 15		bne $2d44			bne 	_IFSTFFail
.2d2f	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2d31	8d d5 06	sta $06d5			sta 	IFSignFlag
.2d34					_IFSTFLoop:
.2d34	20 b1 2d	jsr $2db1			jsr 	IFSTFGetNext 				; get next
.2d37	b0 0b		bcs $2d44			bcs 	_IFSTFFail 					; bad character.
.2d39	f0 11		beq $2d4c			beq 	_IFSTFExit 					; end of data
.2d3b					_IFSTFHaveChar:
.2d3b	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2d3d	f0 08		beq $2d47			beq 	_IFSTFDecimal
.2d3f	20 d5 2d	jsr $2dd5			jsr 	IFSTFAddR0 					; add number in
.2d42	80 f0		bra $2d34			bra 	_IFSTFLoop 					; keep going until . or end.
.2d44					_IFSTFFail:
.2d44	38		sec				sec
.2d45	80 0d		bra $2d54			bra 	_IFSTFReturn
.2d47					_IFSTFDecimal:
.2d47	20 5c 2d	jsr $2d5c			jsr 	IFSTFDecimal 				; call the decimal places code.
.2d4a	b0 08		bcs $2d54			bcs 	_IFSTFReturn 				; error
.2d4c					_IFSTFExit:
.2d4c	a5 11		lda $11				lda 	IFR0+IExp 					; copy sign flag in.
.2d4e	0d d5 06	ora $06d5			ora 	IFSignFlag
.2d51	85 11		sta $11				sta 	IFR0+IExp
.2d53	18		clc				clc
.2d54					_IFSTFReturn:
.2d54	60		rts				rts
.2d55					IFloatAddDecimalToR0:
.2d55	8d d4 06	sta $06d4			sta 	IFCount 					; save it out.
.2d58	86 0c		stx $0c				stx 	iTemp0
.2d5a	84 0d		sty $0d				sty 	iTemp0+1
.2d5c					IFSTFDecimal:
.2d5c	a2 0e		ldx #$0e			ldx 	#IFR0 						; push integer part on stack
.2d5e	20 00 2e	jsr $2e00			jsr 	IFloatPushRx
.2d61	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2d63	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero
.2d66	9c d6 06	stz $06d6			stz 	IFDecimalPlaces
.2d69					_IFSTDLoop:
.2d69	20 b1 2d	jsr $2db1			jsr 	IFSTFGetNext 				; get next
.2d6c	b0 41		bcs $2daf			bcs 	_IFSTFFail2 				; bad character.
.2d6e	f0 11		beq $2d81			beq 	_IFSTFComplete 				; end of data, work out the result.
.2d70	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2d72	f0 39		beq $2dad			beq 	_IFSTFExit2
.2d74	20 d5 2d	jsr $2dd5			jsr 	IFSTFAddR0 					; add number in
.2d77	ee d6 06	inc $06d6			inc 	IFDecimalPlaces 			; count decimals
.2d7a	ad d6 06	lda $06d6			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2d7d	c9 03		cmp #$03			cmp 	#3
.2d7f	90 e8		bcc $2d69			bcc 	_IFSTDLoop
.2d81					_IFSTFComplete:
.2d81	ad d6 06	lda $06d6			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2d84	f0 27		beq $2dad			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2d86	3a		dec a				dec 	a 							; table indexed from 1.
.2d87	0a		asl a				asl 	a
.2d88	0a		asl a				asl 	a
.2d89	aa		tax				tax
.2d8a	bd ec 2d	lda $2dec,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2d8d	85 12		sta $12				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2d8f	bd ed 2d	lda $2ded,x			lda 	TableTen+1,x
.2d92	85 13		sta $13				sta  	IFR1+IM1
.2d94	bd ee 2d	lda $2dee,x			lda 	TableTen+2,x
.2d97	85 14		sta $14				sta  	IFR1+IM2
.2d99	bd ef 2d	lda $2def,x			lda 	TableTen+3,x
.2d9c	85 15		sta $15				sta  	IFR1+IExp
.2d9e	a2 12		ldx #$12			ldx 	#IFR1 						; multiply into result
.2da0	20 51 29	jsr $2951			jsr 	IFloatMultiply
.2da3	a2 12		ldx #$12			ldx 	#IFR1  						; pop and add the decimal.
.2da5	20 21 2e	jsr $2e21			jsr 	IFloatPullRx
.2da8	a2 12		ldx #$12			ldx 	#IFR1
.2daa	20 a7 28	jsr $28a7			jsr 	IFloatAdd
.2dad					_IFSTFExit2:
.2dad	18		clc				clc
.2dae	60		rts				rts
.2daf					_IFSTFFail2:
.2daf	38		sec				sec
.2db0	60		rts				rts
.2db1					IFSTFGetNext:
.2db1	ad d4 06	lda $06d4			lda 	IFCount  					; if count is zero, return with Z set.
.2db4	f0 19		beq $2dcf			beq 	_IFSTFReturnOk
.2db6	b2 0c		lda ($0c)			lda 	(iTemp0) 					; get next character
.2db8	e6 0c		inc $0c				inc 	iTemp0 						; point at next.
.2dba	d0 02		bne $2dbe			bne 	_IFSTFGNNoCarry
.2dbc	e6 0d		inc $0d				inc 	iTemp0+1
.2dbe					_IFSTFGNNoCarry:
.2dbe	ce d4 06	dec $06d4			dec 	IFCount 					; dec count.
.2dc1	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2dc3	f0 08		beq $2dcd			beq 	_IFSTFGOkay
.2dc5	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2dc7	90 08		bcc $2dd1			bcc 	_IFSTFGFail
.2dc9	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2dcb	b0 04		bcs $2dd1			bcs 	_IFSTFGFail
.2dcd					_IFSTFGOkay:
.2dcd	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2dcf					_IFSTFReturnOk:
.2dcf	18		clc				clc
.2dd0	60		rts				rts
.2dd1					_IFSTFGFail:
.2dd1	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2dd3	38		sec				sec
.2dd4	60		rts				rts
.2dd5					IFSTFAddR0:
.2dd5	29 0f		and #$0f			and 	#15 						; to int value
.2dd7	48		pha				pha 								; save it.
.2dd8	a9 0a		lda #$0a			lda 	#10
.2dda	a2 12		ldx #$12			ldx 	#IFR1
.2ddc	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.2ddf	20 51 29	jsr $2951			jsr 	IFloatMultiply
.2de2	68		pla				pla
.2de3	a2 12		ldx #$12			ldx 	#IFR1
.2de5	20 b3 2e	jsr $2eb3			jsr 	IFloatSetByte
.2de8	20 a7 28	jsr $28a7			jsr 	IFloatAdd
.2deb	60		rts				rts
.06d4					IFCount:
>06d4							.fill 	1
.06d5					IFSignFlag:
>06d5							.fill 	1
.06d6					IFDecimalPlaces:
>06d6							.fill 	1
.2dec					TableTen:
>2dec	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2df0	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2df4	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2df8	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2dfc	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2e00					IFloatPushRx:
.2e00	5a		phy				phy
.2e01	ac d7 06	ldy $06d7			ldy 	IFStackIndex
.2e04	b5 00		lda $00,x			lda 	IM0,x
.2e06	99 d8 06	sta $06d8,y			sta 	IFStack,y
.2e09	b5 01		lda $01,x			lda 	IM1,x
.2e0b	99 d9 06	sta $06d9,y			sta 	IFStack+1,y
.2e0e	b5 02		lda $02,x			lda 	IM2,x
.2e10	99 da 06	sta $06da,y			sta 	IFStack+2,y
.2e13	b5 03		lda $03,x			lda 	IExp,x
.2e15	99 db 06	sta $06db,y			sta 	IFStack+3,y
.2e18	c8		iny				iny
.2e19	c8		iny				iny
.2e1a	c8		iny				iny
.2e1b	c8		iny				iny
.2e1c	8c d7 06	sty $06d7			sty 	IFStackIndex
.2e1f	7a		ply				ply
.2e20	60		rts				rts
.2e21					IFloatPullRx:
.2e21	5a		phy				phy
.2e22	ac d7 06	ldy $06d7			ldy 	IFStackIndex
.2e25	88		dey				dey
.2e26	88		dey				dey
.2e27	88		dey				dey
.2e28	88		dey				dey
.2e29	b9 d8 06	lda $06d8,y			lda 	IFStack,y
.2e2c	95 00		sta $00,x			sta 	IM0,x
.2e2e	b9 d9 06	lda $06d9,y			lda 	IFStack+1,y
.2e31	95 01		sta $01,x			sta 	IM1,x
.2e33	b9 da 06	lda $06da,y			lda 	IFStack+2,y
.2e36	95 02		sta $02,x			sta 	IM2,x
.2e38	b9 db 06	lda $06db,y			lda 	IFStack+3,y
.2e3b	95 03		sta $03,x			sta 	IExp,x
.2e3d	8c d7 06	sty $06d7			sty 	IFStackIndex
.2e40	7a		ply				ply
.2e41	60		rts				rts
.06d7					IFStackIndex:
>06d7							.fill 	1
.06d8					IFStack:
>06d8							.fill 	16*4
.2e42					IFloatCopyFromRegister:
.2e42	b5 00		lda $00,x			lda 	0,x
.2e44	85 0e		sta $0e				sta 	IFR0
.2e46	b5 01		lda $01,x			lda 	1,x
.2e48	85 0f		sta $0f				sta 	IFR0+1
.2e4a	b5 02		lda $02,x			lda 	2,x
.2e4c	85 10		sta $10				sta 	IFR0+2
.2e4e	b5 03		lda $03,x			lda 	3,x
.2e50	85 11		sta $11				sta 	IFR0+3
.2e52	60		rts				rts
.2e53					IFloatCopyToRegister:
.2e53	a5 0e		lda $0e				lda 	IFR0
.2e55	95 00		sta $00,x			sta 	0,x
.2e57	a5 0f		lda $0f				lda 	IFR0+1
.2e59	95 01		sta $01,x			sta 	1,x
.2e5b	a5 10		lda $10				lda 	IFR0+2
.2e5d	95 02		sta $02,x			sta 	2,x
.2e5f	a5 11		lda $11				lda 	IFR0+3
.2e61	95 03		sta $03,x			sta 	3,x
.2e63	60		rts				rts
.2e64					IFloatLoadInline:
.2e64	68		pla				pla 								; pop address off to iTemp0
.2e65	85 0c		sta $0c				sta 	iTemp0
.2e67	68		pla				pla
.2e68	85 0d		sta $0d				sta 	iTemp0+1
.2e6a	a0 01		ldy #$01			ldy 	#1
.2e6c	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 0
.2e6e	95 00		sta $00,x			sta 	0,x
.2e70	c8		iny				iny
.2e71	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 1
.2e73	95 01		sta $01,x			sta 	1,x
.2e75	c8		iny				iny
.2e76	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 2
.2e78	95 02		sta $02,x			sta 	2,x
.2e7a	c8		iny				iny
.2e7b	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 3
.2e7d	95 03		sta $03,x			sta 	3,x
.2e7f	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2e80	a5 0c		lda $0c				lda 	iTemp0
.2e82	69 05		adc #$05			adc 	#5
.2e84	85 0c		sta $0c				sta 	iTemp0
.2e86	90 02		bcc $2e8a			bcc 	_IFLINoCarry
.2e88	e6 0d		inc $0d				inc 	iTemp0+1
.2e8a					_IFLINoCarry:
.2e8a	6c 0c 00	jmp ($000c)			jmp 	(iTemp0)					; effectively RTS
.2e8d					IFloatMultiply8BitRx:
.2e8d	5a		phy		        phy
.2e8e	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2e90	a4 0e		ldy $0e		        ldy     IFR0+IM0
.2e92	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2e93	85 0e		sta $0e		        sta     IFR0+IM0
.2e95	84 0f		sty $0f		        sty     IFR0+IM1
.2e97	a9 00		lda #$00	        lda     #0
.2e99	a0 08		ldy #$08	        ldy     #8
.2e9b					_IFMLoop:
.2e9b	90 03		bcc $2ea0	        bcc     _IFMNoAdd
.2e9d	18		clc		        clc
.2e9e	65 0f		adc $0f		        adc     IFR0+IM1
.2ea0					_IFMNoAdd:
.2ea0	6a		ror a		        ror     a
.2ea1	66 0e		ror $0e		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2ea3	88		dey		        dey
.2ea4	d0 f5		bne $2e9b	        bne     _IFMLoop
.2ea6	85 0f		sta $0f		        sta     IFR0+IM1                    ; write MSB out
.2ea8	7a		ply		        ply
.2ea9	60		rts		        rts
.2eaa					IFloatCheckZero:
.2eaa	b5 00		lda $00,x			lda 	IM0,x
.2eac	15 01		ora $01,x			ora 	IM1,x
.2eae	15 02		ora $02,x			ora 	IM2,x
.2eb0	60		rts				rts
.2eb1					IFloatSetZero:
.2eb1	a9 00		lda #$00			lda 	#0
.2eb3					IFloatSetByte:
.2eb3	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2eb5	74 01		stz $01,x			stz 	IM1,x
.2eb7	74 02		stz $02,x			stz 	IM2,x
.2eb9	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2ebb	60		rts				rts
.2ebc					IFloatNegate:
.2ebc	b5 03		lda $03,x			lda 	IExp,x
.2ebe	49 40		eor #$40			eor 	#IFSign
.2ec0	95 03		sta $03,x			sta 	IExp,x
.2ec2	18		clc				clc
.2ec3	60		rts				rts
.2ec4					IFloatMantissaNegate:
.2ec4	38		sec				sec
.2ec5	a9 00		lda #$00			lda 	#0
.2ec7	f5 00		sbc $00,x			sbc 	IM0,x
.2ec9	95 00		sta $00,x			sta 	IM0,x
.2ecb	a9 00		lda #$00			lda 	#0
.2ecd	f5 01		sbc $01,x			sbc 	IM1,x
.2ecf	95 01		sta $01,x			sta 	IM1,x
.2ed1	a9 00		lda #$00			lda 	#0
.2ed3	f5 02		sbc $02,x			sbc 	IM2,x
.2ed5	95 02		sta $02,x			sta 	IM2,x
.2ed7	60		rts				rts
.2ed8					IFloatShiftLeft:
.2ed8	18		clc				clc
.2ed9					IFloatRotateLeft:
.2ed9	36 00		rol $00,x			rol 	IM0,x
.2edb	36 01		rol $01,x			rol 	IM1,x
.2edd	36 02		rol $02,x			rol 	IM2,x
.2edf	60		rts				rts
.2ee0					IFloatShiftRight:
.2ee0	18		clc				clc
.2ee1					IFloatRotateRight:
.2ee1	76 02		ror $02,x			ror 	IM2,x
.2ee3	76 01		ror $01,x			ror 	IM1,x
.2ee5	76 00		ror $00,x			ror 	IM0,x
.2ee7	60		rts				rts
.2ee8					IFloatNormalise:
.2ee8	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero 			; is it zero
.2eeb	f0 18		beq $2f05			beq 	_IFNExitZero 				; if so exit
.2eed					_IFNLoop:
.2eed	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2eef	29 c0		and #$c0			and 	#$C0
.2ef1	c9 40		cmp #$40			cmp 	#$40
.2ef3	f0 13		beq $2f08			beq 	_IFNExitOkay 				; if so , then we are done.
.2ef5	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2ef7	29 3f		and #$3f			and 	#$3F
.2ef9	c9 20		cmp #$20			cmp 	#$20
.2efb	f0 0b		beq $2f08			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2efd	20 1e 2f	jsr $2f1e			jsr 	IFloatDecExponent
.2f00	20 d8 2e	jsr $2ed8			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2f03	80 e8		bra $2eed			bra 	_IFNLoop
.2f05					_IFNExitZero:
.2f05	20 b1 2e	jsr $2eb1			jsr 	IFloatSetZero 				; set the result to zero
.2f08					_IFNExitOkay:
.2f08	18		clc				clc  								; return with CC.
.2f09	60		rts				rts
.2f0a					IFloatIncExponent:
.2f0a	b5 03		lda $03,x			lda 	IExp,x
.2f0c	48		pha				pha
.2f0d	29 c0		and #$c0			and 	#$C0
.2f0f	8d 18 07	sta $0718			sta 	IFXTemp
.2f12	68		pla				pla
.2f13	1a		inc a				inc 	a
.2f14	29 3f		and #$3f			and 	#$3F
.2f16	48		pha				pha
.2f17	0d 18 07	ora $0718			ora 	IFXTemp
.2f1a	95 03		sta $03,x			sta 	IExp,x
.2f1c	68		pla				pla
.2f1d	60		rts				rts
.2f1e					IFloatDecExponent:
.2f1e	b5 03		lda $03,x			lda 	IExp,x
.2f20	48		pha				pha
.2f21	29 c0		and #$c0			and 	#$C0
.2f23	8d 18 07	sta $0718			sta 	IFXTemp
.2f26	68		pla				pla
.2f27	3a		dec a				dec 	a
.2f28	29 3f		and #$3f			and 	#$3F
.2f2a	48		pha				pha
.2f2b	0d 18 07	ora $0718			ora 	IFXTemp
.2f2e	95 03		sta $03,x			sta 	IExp,x
.2f30	68		pla				pla
.2f31	60		rts				rts
.0718					IFXTemp:
>0718							.fill 	1
.2f32					IFloatBufferReset:
.2f32	9c 19 07	stz $0719			stz 	IFBufferCount
.2f35	9c 1a 07	stz $071a			stz 	IFBuffer
.2f38	60		rts				rts
.2f39					IFloatGetBufferAddress:
.2f39	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.2f3b	a2 1a		ldx #$1a			ldx 	#(IFBuffer & $FF)
.2f3d	ad 19 07	lda $0719			lda 	IFBufferCount
.2f40	60		rts				rts
.2f41					IFloatBufferWrite:
.2f41	da		phx				phx
.2f42	ae 19 07	ldx $0719			ldx 	IFBufferCount
.2f45	9d 1a 07	sta $071a,x			sta 	IFBuffer,x
.2f48	9e 1b 07	stz $071b,x			stz 	IFBuffer+1,x
.2f4b	ee 19 07	inc $0719			inc 	IFBufferCount
.2f4e	fa		plx				plx
.2f4f	60		rts				rts
.2f50					IFloatStripTrailingZeros:
.2f50	ae 19 07	ldx $0719			ldx 	IFBufferCount
.2f53	bd 19 07	lda $0719,x			lda 	IFBuffer-1,x
.2f56	c9 30		cmp #$30			cmp		#"0"
.2f58	d0 0f		bne $2f69			bne 	_IFSTExit
.2f5a	bd 18 07	lda $0718,x			lda 	IFBuffer-2,x
.2f5d	c9 2e		cmp #$2e			cmp 	#"."
.2f5f	f0 08		beq $2f69			beq 	_IFSTExit
.2f61	ce 19 07	dec $0719			dec 	IFBufferCount
.2f64	9e 19 07	stz $0719,x			stz 	IFBuffer-1,x
.2f67	80 e7		bra $2f50			bra 	IFloatStripTrailingZeros
.2f69					_IFSTExit:
.2f69	60		rts				rts
.0719					IFBufferCount:
>0719							.fill 	1
.071a					IFBuffer:
>071a							.fill 	25
.2f6a					IFloatCheck:
.2f6a	a5 11		lda $11				lda 	IFR0+IExp					; force it negative
.2f6c	09 40		ora #$40			ora 	#IFSign
.2f6e	85 11		sta $11				sta 	IFR0+IExp
.2f70	20 a7 28	jsr $28a7			jsr 	IFloatAdd 					; add allowed to error.
.2f73	a2 0e		ldx #$0e			ldx 	#IFR0
.2f75	20 aa 2e	jsr $2eaa			jsr 	IFloatCheckZero 			; error if < 0
.2f78	f0 06		beq $2f80			beq 	_IFAOkay
.2f7a	a5 11		lda $11				lda 	IFR0+IExp
.2f7c	29 40		and #$40			and 	#IFSign
.2f7e	d0 01		bne $2f81			bne 	_IFAFail
.2f80					_IFAOkay:
.2f80	60		rts				rts
.2f81					_IFAFail:
.2f81	38		sec				sec
.2f82	68		pla				pla 								; get address - 2
.2f83	e9 02		sbc #$02			sbc 	#2
.2f85	aa		tax				tax
.2f86	68		pla				pla
.2f87	e9 00		sbc #$00			sbc 	#0
.2f89	a8		tay				tay
.2f8a	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2f8c					_IFAStop:
>2f8c	db						.byte 	$DB 						; display an error AA ADR ADR
.2f8d	80 fd		bra $2f8c			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
