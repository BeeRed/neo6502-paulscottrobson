
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Thu Jul  6 15:31:01 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorSize:
>0344							.fill 	2
.0346					sectorCount:
>0346							.fill 	2
.0348					currentSector:
>0348							.fill 	2
.034a					successFlag:
>034a							.fill 	1
.034b					sectorHeader:
.034b					shFirstNext:
>034b							.fill 	1
.034c					shContinue:
>034c							.fill 	1
.034d					shDataSize:
>034d							.fill 	2
.034f					shFileSize:
>034f							.fill 	2
>0351							.fill 	10
.035b					shNameLength:
>035b							.fill 	1
.035c					shNameText:
>035c							.fill 	15
.036b					shFileSizeCopy:
>036b							.fill 	2
.036d					notFirstSector:
>036d							.fill 	1
.036e					sectorCapacity:
>036e							.fill 	2
.0370					fileRemainingSize:
>0370							.fill 	2
.0372					bytesToWrite:
>0372							.fill 	2
>0374							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 26 22	jsr $2226			jsr 	PGMSetBaseAddress
.1007	20 cd 2e	jsr $2ecd			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.100f	4c 30 16	jmp $1630			jmp 	Command_RUN
.1012	4c 34 15	jmp $1534			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="P"					AM_ABSOLUTEI  	= 'P' 						; jmp (nnnn)   [only instance]
="Q"					AM_ABSOLUTEIX	= 'Q' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d0					AM_ZIND 	= ('P'|AM_ZPAGE) 				; lda (nn)
=$d1					AM_ZINDX	= ('Q'|AM_ZPAGE) 				; lda (nn,x)
=$d2					AM_ZINDY	= ('R'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f
=$8d90					PR_RENUMBER = $8d90

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.1015					Command_AssemblerStart:
.1015					_CALoop:
.1015	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.1017	c8		iny				iny 								; consume it.
.1018	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.101a	f0 15		beq $1031			beq 	_CALabel
.101c	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.101e	f0 30		beq $1050			beq 	_CAExit
.1020	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.1022	f0 f1		beq $1015			beq 	_CALoop
.1024	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; end of line.
.1026	f0 14		beq $103c			beq 	_CAEnd
.1028	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.102a	c9 40		cmp #$40			cmp 	#$40
.102c	f0 08		beq $1036			beq 	_CAOpcode
.102e	4c 6a 28	jmp $286a		jmp	ErrorV_syntax
.1031					_CALabel:
.1031	20 16 11	jsr $1116			jsr 	ASLabel 					; handle a label
.1034	80 df		bra $1015			bra 	_CALoop
.1036					_CAOpcode:
.1036	88		dey				dey 								; get it back
.1037	20 06 11	jsr $1106			jsr 	ASOpcode 					; assemble that opcode.
.103a	80 d9		bra $1015			bra 	_CALoop
.103c	18		clc		_CAEnd:	clc 								; next line
.103d	a0 03		ldy #$03			ldy 	#3 							; tokenised code position.
.103f	b2 18		lda ($18)			lda 	(codePtr)
.1041	65 18		adc $18				adc 	codePtr
.1043	85 18		sta $18				sta 	codePtr
.1045	90 02		bcc $1049			bcc 	_CANoCarry
.1047	e6 19		inc $19				inc 	codePtr+1
.1049					_CANoCarry:
.1049	b2 18		lda ($18)			lda 	(codePtr) 					; code present
.104b	d0 c8		bne $1015			bne 	_CALoop 					; go round again
.104d	4c a0 16	jmp $16a0			jmp 	Command_END 				; do END.
.1050					_CAExit:
.1050	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/calcopcode.asm

.1051					ASCalculateOpcodeHash:
.1051	20 79 10	jsr $1079			jsr 	_ASCGetCharacter 			; get first alphanumeric character 0-25 rep A-Z
.1054	20 86 10	jsr $1086			jsr 	_ASCProcess 				; go through the shift/multiply process
.1057	85 24		sta $24				sta 	zTemp0
.1059	20 79 10	jsr $1079			jsr 	_ASCGetCharacter 			; get second alphanumeric character
.105c	18		clc				clc
.105d	65 24		adc $24				adc 	zTemp0 						; add previous result.
.105f	2a		rol a				rol 	a 							; 8 bit rotate left
.1060	69 00		adc #$00			adc 	#0
.1062	49 a5		eor #$a5			eor 	#165 						; XOR with 165
.1064	20 86 10	jsr $1086			jsr 	_ASCProcess 				; and shift/multiply again.
.1067	85 24		sta $24				sta 	zTemp0
.1069	20 79 10	jsr $1079			jsr 	_ASCGetCharacter 			; get third character
.106c	18		clc				clc
.106d	65 24		adc $24				adc 	zTemp0 						; and add
.106f	48		pha				pha
.1070	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by
.1072	c9 7c		cmp #$7c			cmp 	#$7C 						; $7C which identifies end of identifier.
.1074	d0 1b		bne $1091			bne 	_ASCSyntax
.1076	c8		iny				iny
.1077	68		pla				pla 								; restore and exit
.1078	60		rts				rts
.1079					_ASCGetCharacter:
.1079	b1 18		lda ($18),y			lda 	(codePtr),y 				; get and consume character
.107b	c8		iny				iny
.107c	38		sec				sec
.107d	e9 40		sbc #$40			sbc 	#$40 						; shift $40 -> $00
.107f	30 10		bmi $1091			bmi 	_ASCSyntax 					; check range.
.1081	c9 1a		cmp #$1a			cmp 	#26
.1083	b0 0c		bcs $1091			bcs 	_ASCSyntax
.1085	60		rts				rts
.1086					_ASCProcess:
.1086	85 25		sta $25				sta 	zTemp0+1 					; multiply by 5
.1088	0a		asl a				asl 	a
.1089	0a		asl a				asl 	a
.108a	18		clc				clc
.108b	65 25		adc $25				adc 	zTemp0+1
.108d	18		clc				clc 								; add 68
.108e	69 44		adc #$44			adc 	#68
.1090	60		rts				rts
.1091					_ASCSyntax:
.1091	4c 6a 28	jmp $286a		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/findmode.asm

.1094					ASIdentifyAddressMode:
>1094	db						.byte 	$DB
.1095	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next ?
.1097	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ  		; EOL or : => implied
.1099	f0 17		beq $10b2			beq 	_ASImplied
.109b	c9 9b		cmp #$9b			cmp 	#PR_COLON
.109d	f0 13		beq $10b2			beq 	_ASImplied
.109f	c9 a4		cmp #$a4			cmp 	#PR_HASH 					; # then immediate
.10a1	f0 12		beq $10b5			beq 	_ASImmediate
.10a3	c9 eb		cmp #$eb			cmp 	#PR_LPAREN 					; if ( then indirection of some sort.
.10a5	f0 15		beq $10bc			beq 	_ASIndirect
.10a7	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; remaining choices are nnnn nnnn,x and nnnn,y
.10aa	20 e4 10	jsr $10e4			jsr 	ASCheckIndex 				; check index follows
.10ad	b0 02		bcs $10b1			bcs 	_ASIndexed 					; index found ? then it will return X Y
.10af	a9 41		lda #$41			lda 	#AM_ABSOLUTE 				; otherwise return A
.10b1					_ASIndexed:
.10b1	60		rts				rts
.10b2					_ASImplied:
.10b2	a9 49		lda #$49			lda 	#AM_IMPLIED 				; return implied mode
.10b4	60		rts				rts
.10b5					_ASImmediate:
.10b5	c8		iny				iny 								; consume #
.10b6	20 99 18	jsr $1899			jsr 	EXPEvalInteger8 			; 8 bit operand
.10b9	a9 a3		lda #$a3			lda 	#AM_IMMEDIATE
.10bb	60		rts				rts
.10bc					_ASIndirect:
.10bc	c8		iny				iny 								; consume the open bracket
.10bd	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; we do this because of jmp (xxxx) and (xxxx,x)
.10c0	20 e4 10	jsr $10e4			jsr 	ASCheckIndex 				; look for ,X
.10c3	b0 12		bcs $10d7			bcs 	_ASInternalIndirect 		; ,X or ,Y found.
.10c5	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 				; not found. Must be ) or ),Y
.10c8	20 e4 10	jsr $10e4			jsr 	ASCheckIndex
.10cb	90 07		bcc $10d4			bcc 	_ASIIndirect 				; if ,[XY] not found, then exit assuming (xxxx)
.10cd	c9 59		cmp #$59			cmp 	#"Y" 						; must be ,Y in this mode.
.10cf	d0 10		bne $10e1			bne 	ASCISyntax 					; if not error
.10d1	a9 d2		lda #$d2			lda 	#AM_ZINDY 					; return (nn),y
.10d3	60		rts				rts
.10d4					_ASIIndirect:
.10d4	a9 50		lda #$50			lda 	#AM_ABSOLUTEI 				; might be jmp (xxxx)
.10d6	60		rts				rts
.10d7					_ASInternalIndirect:
.10d7	c9 58		cmp #$58			cmp 	#"X"						; must have been X
.10d9	d0 06		bne $10e1			bne 	ASCISyntax 					; error if (nn,y) not allowed !
.10db	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 				; check complete e.g. (nnnn,x)
.10de	a9 51		lda #$51			lda 	#AM_ABSOLUTEIX 				; because it might be JMP (nnnn,x)
.10e0	60		rts				rts
.10e1					ASCISyntax:
.10e1	4c 6a 28	jmp $286a		jmp	ErrorV_syntax
.10e4					ASCheckIndex:
.10e4	b1 18		lda ($18),y			lda 	(codePtr),y 				; check comma ?
.10e6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e8	d0 18		bne $1102			bne 	_ASCIFail
.10ea	c8		iny				iny 								; consume comma
.10eb	b1 18		lda ($18),y			lda 	(codePtr),y
.10ed	c9 57		cmp #$57			cmp 	#'X'-'A'+$40 				; check if X or Y
.10ef	f0 04		beq $10f5			beq 	_ASCIFound
.10f1	c9 58		cmp #$58			cmp 	#'Y'-'A'+$40
.10f3	d0 ec		bne $10e1			bne 	ASCISyntax
.10f5					_ASCIFound:
.10f5	aa		tax				tax 								; save X or Y in X
.10f6	c8		iny				iny 								; consume
.10f7	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by end of identifier
.10f9	c8		iny				iny
.10fa	c9 7c		cmp #$7c			cmp 	#$7C
.10fc	d0 e3		bne $10e1			bne 	ASCISyntax
.10fe	8a		txa				txa 								; get X/Y back
.10ff	1a		inc a				inc 	a 							; convert to 'X' or 'Y' characters
.1100	38		sec				sec
.1101	60		rts				rts
.1102					_ASCIFail:
.1102	18		clc				clc
.1103	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/generate.asm

.1104					ASGenerateCode:
.1104	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/getmode.asm

.1105					ASGetModeForOpcode:
.1105	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/instruction.asm

.1106					ASOpcode:
.1106	20 51 10	jsr $1051			jsr 	ASCalculateOpcodeHash 		; calculate the opcode hash.
.1109	8d 03 05	sta $0503			sta 	ASCurrOpcode
.110c	20 94 10	jsr $1094			jsr 	ASIdentifyAddressMode 		; identify the address mode type.
.110f	8d 04 05	sta $0504			sta 	ASCurrMode
.1112	20 04 11	jsr $1104			jsr 	ASGenerateCode 				; search and generate appropriate code.
.1115	60		rts				rts
.0503					ASCurrOpcode:
>0503							.fill 	1
.0504					ASCurrMode:
>0504							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.1116					ASLabel:
.1116	20 03 19	jsr $1903			jsr 	EXPTermR0 					; get term
.1119	90 1b		bcc $1136			bcc 	_ALError 					; must be a reference term.
.111b	24 0b		bit $0b				bit 	IFR0+IExp	 				; string reference ?
.111d	30 17		bmi $1136			bmi 	_ALError
.111f	5a		phy				phy
.1120	ad b2 06	lda $06b2			lda 	('P'-'A')*4 + FastVariables	; copy P to variable
.1123	92 08		sta ($08)			sta 	(IFR0+IM0)
.1125	a0 01		ldy #$01			ldy 	#1
.1127	ad b3 06	lda $06b3			lda 	('P'-'A')*4 + FastVariables+1
.112a	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.112c	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.112e	c8		iny				iny
.112f	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.1131	c8		iny				iny
.1132	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.1134	7a		ply				ply
.1135	60		rts				rts
.1136					_ALError:
.1136	4c 6a 28	jmp $286a		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1139					Command_ASSERT:
.1139	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 				; get a number to assert
.113c	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.113e	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero
.1141	f0 01		beq $1144			beq 	_CAFail 					; if so, the assert fails.
.1143	60		rts				rts
.1144					_CAFail:
.1144	4c c0 28	jmp $28c0		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1147					Command_CLEAR:
.1147	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1149	c9 9b		cmp #$9b			cmp 	#PR_COLON
.114b	f0 14		beq $1161			beq 	_CLNoParam
.114d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.114f	f0 10		beq $1161			beq 	_CLNoParam
.1151	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; address for CLEAR
.1154	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1156	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1158	b0 0b		bcs $1165			bcs 	_CLMemory
.115a	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.115c	90 07		bcc $1165			bcc 	_CLMemory
.115e	8d 1d 05	sta $051d			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1161					_CLNoParam:
.1161	20 68 11	jsr $1168			jsr 	ClearCode
.1164	60		rts				rts
.1165					_CLMemory:
.1165	4c 5a 29	jmp $295a		jmp	ErrorV_memory
.1168					ClearCode:
.1168	20 39 22	jsr $2239			jsr 	PGMEndProgram 				; end program => zTemp0
.116b	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.116d	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.116f	1a		inc a				inc 	a
.1170	85 2b		sta $2b				sta 	freeMemory+1
.1172	20 6c 2e	jsr $2e6c			jsr 	VARClearHashTables
.1175	ad 1d 05	lda $051d			lda 	PGMEndMemoryHigh
.1178	20 b1 2a	jsr $2ab1			jsr 	StackReset 					; page passed on in A
.117b	20 10 2b	jsr $2b10			jsr 	StringSystemInitialise
.117e	20 d5 27	jsr $27d5			jsr 	ScanProcedures
.1181	20 02 16	jsr $1602			jsr 	Command_RESTORE
.1184	60		rts				rts
.1185					AllocateMemory:
.1185	5a		phy				phy 								; save Y
.1186	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.1188	5a		phy				phy
.1189	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.118b	5a		phy				phy
.118c	a8		tay				tay 								; count is now in XY
.118d					_AllocateLoop:
.118d	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.118f	d0 04		bne $1195			bne 	_AllocateOne
.1191	c0 00		cpy #$00			cpy 	#0
.1193	f0 15		beq $11aa			beq 	_AllocateExit
.1195					_AllocateOne:
.1195	a9 00		lda #$00			lda 	#0 							; zero byte
.1197	92 2a		sta ($2a)			sta 	(freeMemory)
.1199	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.119b	d0 05		bne $11a2			bne 	_AllocateSkipCarry
.119d	e6 2b		inc $2b				inc 	freeMemory+1
.119f	20 ae 11	jsr $11ae			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.11a2					_AllocateSkipCarry:
.11a2	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.11a4	d0 01		bne $11a7			bne 	_AllocateSkipBorrow
.11a6	ca		dex				dex
.11a7					_AllocateSkipBorrow:
.11a7	88		dey				dey
.11a8	80 e3		bra $118d			bra 	_AllocateLoop
.11aa					_AllocateExit:
.11aa	fa		plx				plx 								; restore address
.11ab	68		pla				pla
.11ac	7a		ply				ply 								; restore Y
.11ad	60		rts				rts
.11ae					ClearCheckMemory:
.11ae	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.11b0	1a		inc a				inc 	a 							; spacing 2 pages
.11b1	1a		inc a				inc 	a
.11b2	cd 25 06	cmp $0625			cmp 	stringMemory+1 				; problems if hit string memory
.11b5	b0 01		bcs $11b8			bcs  	_CCMError
.11b7	60		rts				rts
.11b8					_CCMError:
.11b8	4c 5a 29	jmp $295a		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.11bb					CommandDIM:
.11bb	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.11bd	29 c0		and #$c0			and 	#$C0
.11bf	c9 40		cmp #$40			cmp 	#$40
.11c1	d0 39		bne $11fc			bne 	_CDSyntax
.11c3	20 23 2e	jsr $2e23			jsr 	VARGetInfo 					; get information
.11c6	ad 33 06	lda $0633			lda 	VARType 					; check array.
.11c9	29 02		and #$02			and 	#2
.11cb	f0 2f		beq $11fc			beq 	_CDSyntax
.11cd	20 d5 2d	jsr $2dd5			jsr 	VARFind 					; does it already exist
.11d0	b0 2d		bcs $11ff			bcs 	_CDExists
.11d2	20 81 2d	jsr $2d81			jsr 	VARCreate 					; create it - returns data ptr in XA
.11d5	da		phx				phx 								; save target address
.11d6	48		pha				pha
.11d7	ad 33 06	lda $0633			lda 	VARType 					; type ID.
.11da	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.11dc	20 02 12	jsr $1202			jsr 	CreateArray 				; create array to XA
.11df	84 26		sty $26				sty 	zTemp1 						; save Y
.11e1	7a		ply				ply 								; restore target to zTemp0
.11e2	84 24		sty $24				sty 	zTemp0
.11e4	7a		ply				ply
.11e5	84 25		sty $25				sty 	zTemp0+1
.11e7	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.11e9	a0 01		ldy #$01			ldy 	#1
.11eb	8a		txa				txa
.11ec	91 24		sta ($24),y			sta 	(zTemp0),y
.11ee	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.11f0	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 				; check )
.11f3	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.11f5	c8		iny				iny
.11f6	c9 99		cmp #$99			cmp 	#PR_COMMA
.11f8	f0 c1		beq $11bb			beq 	CommandDIM
.11fa	88		dey				dey
.11fb	60		rts				rts
.11fc					_CDSyntax:
.11fc	4c 6a 28	jmp $286a		jmp	ErrorV_syntax
.11ff					_CDExists:
.11ff	4c 32 29	jmp $2932		jmp	ErrorV_redefine
.1202					CreateArray:
.1202	8d 05 05	sta $0505			sta 	CAType						; save type
.1205	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; get array dimension to R0
.1208	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.120a	c9 99		cmp #$99			cmp 	#PR_COMMA
.120c	f0 04		beq $1212			beq 	_CATwoDimensions
.120e	20 5e 12	jsr $125e			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.1211	60		rts				rts
.1212					_CATwoDimensions:
.1212	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.1214	8d 07 05	sta $0507			sta 	CADim1+1
.1217	a5 08		lda $08				lda 	IFR0+IM0
.1219	8d 06 05	sta $0506			sta 	CADim1+0
.121c	20 4b 2a	jsr $2a4b			jsr 	ERRCheckComma 				; check comma
.121f	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.1222	5a		phy				phy 								; save Y position
.1223	18		clc				clc 								; allocate the outer array of pointers.
.1224	ae 07 05	ldx $0507			ldx 	CADim1+1
.1227	ad 06 05	lda $0506			lda 	CADim1
.122a	20 9d 12	jsr $129d			jsr 	CSAAllocate 				; allocate the outer array
.122d	da		phx				phx									; save this address on the stack
.122e	48		pha				pha
.122f	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.1231	85 28		sta $28				sta 	zTemp2
.1233					_CACreateSubLoop:
.1233	38		sec				sec
.1234	20 5e 12	jsr $125e			jsr 	CreateSingleArray 			; create data array of required size.
.1237	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1239	91 28		sta ($28),y			sta 	(zTemp2),y
.123b	8a		txa				txa
.123c	c8		iny				iny
.123d	91 28		sta ($28),y			sta 	(zTemp2),y
.123f	18		clc				clc  								; next slot.
.1240	a5 28		lda $28				lda 	zTemp2
.1242	69 02		adc #$02			adc 	#2
.1244	85 28		sta $28				sta 	zTemp2
.1246	90 02		bcc $124a			bcc 	_CACNoCarry
.1248	e6 29		inc $29				inc 	zTemp2+1
.124a					_CACNoCarry:
.124a	ad 06 05	lda $0506			lda 	CADim1 						; use DIM1 as a counter
.124d	d0 03		bne $1252			bne 	_CACNoBorrow
.124f	ce 07 05	dec $0507			dec 	CADim1+1
.1252					_CACNoBorrow:
.1252	ce 06 05	dec $0506			dec 	CADim1
.1255	ad 07 05	lda $0507			lda 	CADim1+1 					; but do one more.
.1258	10 d9		bpl $1233			bpl 	_CACreateSubLoop
.125a	68		pla				pla
.125b	fa		plx				plx
.125c	7a		ply				ply
.125d	60		rts				rts
.125e					CreateSingleArray:
.125e	5a		phy				phy
.125f	38		sec				sec 								; allocate memory block all zeros.
.1260	a5 08		lda $08				lda 	IFR0+IM0
.1262	a6 09		ldx $09				ldx 	IFR0+IM1
.1264	20 9d 12	jsr $129d			jsr 	CSAAllocate
.1267	ac 05 05	ldy $0505			ldy 	CAType 						; if numbers, we don't need to initialise.
.126a	f0 2f		beq $129b			beq 	_CSANoInit
.126c	da		phx				phx 								; save address of new array
.126d	48		pha				pha
.126e	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.1270	86 25		stx $25				stx 	zTemp0+1
.1272	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1274	b1 24		lda ($24),y			lda 	(zTemp0),y
.1276	a8		tay				tay
.1277	b2 24		lda ($24)			lda 	(zTemp0)
.1279	aa		tax				tax
.127a					_CSAEraseString:
.127a	5a		phy				phy
.127b	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.127d	a9 80		lda #$80			lda 	#$80
.127f	91 24		sta ($24),y			sta 	(zTemp0),y
.1281	7a		ply				ply
.1282	18		clc				clc 								; add 4 to next slot.
.1283	a5 24		lda $24				lda 	zTemp0
.1285	69 04		adc #$04			adc 	#4
.1287	85 24		sta $24				sta 	zTemp0
.1289	90 02		bcc $128d			bcc 	_CSAENoCarry
.128b	e6 25		inc $25				inc 	zTemp0+1
.128d					_CSAENoCarry:
.128d	e0 00		cpx #$00			cpx 	#0
.128f	d0 01		bne $1292			bne 	_CSANoBorrow
.1291	88		dey				dey
.1292					_CSANoBorrow:
.1292	ca		dex				dex
.1293	d0 e5		bne $127a			bne 	_CSAEraseString
.1295	c0 00		cpy #$00			cpy 	#0
.1297	d0 e1		bne $127a			bne 	_CSAEraseString
.1299	68		pla				pla
.129a	fa		plx				plx
.129b					_CSANoInit:
.129b	7a		ply				ply
.129c	60		rts				rts
.129d					CSAAllocate:
.129d	08		php				php 								; save type flag.
.129e	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.129f	d0 01		bne $12a2			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.12a1	e8		inx				inx
.12a2					_CSAANoCarry:
.12a2	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.12a4	b0 2e		bcs $12d4			bcs 	_CSARange
.12a6	28		plp				plp 								; restore type flag
.12a7	08		php				php 								; save it back again.
.12a8	da		phx				phx 								; save size.
.12a9	48		pha				pha
.12aa	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.12ac	90 03		bcc $12b1			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.12ae	0a		asl a				asl 	a
.12af	26 25		rol $25				rol 	zTemp0+1
.12b1					_CSAATimes2:
.12b1	0a		asl a				asl 	a
.12b2	26 25		rol $25				rol 	zTemp0+1
.12b4	18		clc				clc
.12b5	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.12b7	90 02		bcc $12bb			bcc 	_CSAANoCarry2
.12b9	e6 25		inc $25				inc 	zTemp0+1
.12bb					_CSAANoCarry2:
.12bb	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.12bd	20 85 11	jsr $1185			jsr 	AllocateMemory 				; allocate memory to XA
.12c0	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.12c2	85 24		sta $24				sta 	zTemp0
.12c4	68		pla				pla  								; write element count to first 2 bytes
.12c5	92 24		sta ($24)			sta 	(zTemp0)
.12c7	68		pla				pla 								; msb of element count
.12c8	28		plp				plp 								; CC if pointer array
.12c9	b0 02		bcs $12cd			bcs 	_CSAAIsData
.12cb	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.12cd					_CSAAIsData:
.12cd	a0 01		ldy #$01			ldy 	#1
.12cf	91 24		sta ($24),y			sta 	(zTemp0),y
.12d1	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.12d3	60		rts				rts
.12d4					_CSARange:
.12d4	4c 7b 28	jmp $287b		jmp	ErrorV_range
.0505					CAType:
>0505							.fill 	1
.0506					CADim1:
>0506							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.12d7					Command_Doke:
.12d7	38		sec				sec
.12d8	80 01		bra $12db			bra 	DPCommon
.12da					Command_Poke:
.12da	18		clc				clc
.12db					DPCommon:
.12db	08		php				php 								; CS if DOKE
.12dc	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; address
.12df	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.12e1	48		pha				pha
.12e2	a5 09		lda $09				lda 	IFR0+IM1
.12e4	48		pha				pha
.12e5	20 4b 2a	jsr $2a4b			jsr 	ERRCheckComma 				; [dp]oke address,data
.12e8	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16
.12eb	68		pla				pla 								; get address back
.12ec	85 25		sta $25				sta 	zTemp0+1
.12ee	68		pla				pla
.12ef	85 24		sta $24				sta 	zTemp0
.12f1	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.12f3	92 24		sta ($24)			sta 	(zTemp0)
.12f5	28		plp				plp 								; done if CC
.12f6	90 08		bcc $1300			bcc 	_DPExit
.12f8	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.12f9	a5 09		lda $09				lda 	IFR0+IM1
.12fb	a0 01		ldy #$01			ldy 	#1
.12fd	91 24		sta ($24),y			sta 	(zTemp0),y
.12ff	7a		ply				ply
.1300					_DPExit:
.1300	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.1301					Command_GOTO:
.1301	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; get line number
.1304					GotoR0:
.1304	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.1307	85 19		sta $19				sta 	codePtr+1
.1309	64 18		stz $18				stz 	codePtr
.130b					_GOSearch:
.130b	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.130d	f0 1f		beq $132e			beq 	_GOError
.130f	a0 01		ldy #$01			ldy 	#1 							; found line #
.1311	b1 18		lda ($18),y			lda 	(codePtr),y
.1313	c5 08		cmp $08				cmp 	IFR0+IM0
.1315	d0 0a		bne $1321			bne 	_GONext
.1317	c8		iny				iny
.1318	b1 18		lda ($18),y			lda 	(codePtr),y
.131a	c5 09		cmp $09				cmp 	IFR0+IM1
.131c	d0 03		bne $1321			bne 	_GONext
.131e	4c 47 16	jmp $1647			jmp 	RUNNewLine
.1321					_GONext:
.1321	18		clc				clc 								; advance to next line.
.1322	b2 18		lda ($18)			lda 	(codePtr)
.1324	65 18		adc $18				adc 	codePtr
.1326	85 18		sta $18				sta 	codePtr
.1328	90 e1		bcc $130b			bcc 	_GOSearch
.132a	e6 19		inc $19				inc 	codePtr+1
.132c	80 dd		bra $130b			bra 	_GOSearch
.132e					_GOError:
.132e	4c ff 29	jmp $29ff		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1331					Command_Input:
.1331	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.1333	8d 08 05	sta $0508			sta 	InputFlag
.1336	80 03		bra $133b			bra 	Command_IP_Main
.1338					Command_Print:
.1338	9c 08 05	stz $0508			stz 	InputFlag
.133b					Command_IP_Main:
.133b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.133c					_CPLoop:
.133c	08		php				php 								; save "last action" flag
.133d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.133f	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1341	f0 48		beq $138b			beq 	_CPExit 					; without consuming
.1343	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1345	f0 44		beq $138b			beq 	_CPExit
.1347	68		pla				pla 								; throw last action flag
.1348	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and consume
.134a	c8		iny				iny
.134b	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon (syntax seperator)
.134d	f0 39		beq $1388			beq 	_CPContinueWithSameLine
.134f	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma (tab)
.1351	f0 30		beq $1383			beq 	_CPTab
.1353	88		dey				dey 								; undo the get.
.1354	2c 08 05	bit $0508			bit 	InputFlag 					; check for Input
.1357	10 0b		bpl $1364			bpl	 	_CPNotInput
.1359	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.135b	c9 40		cmp #$40			cmp 	#$40
.135d	d0 05		bne $1364			bne 	_CPNotInput
.135f	20 94 13	jsr $1394			jsr 	_CPInputCode 				; input code
.1362	80 d7		bra $133b			bra 	Command_IP_Main 			; and go round again.
.1364					_CPNotInput:
.1364	20 3b 18	jsr $183b			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1367	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1369	10 0e		bpl $1379			bpl 	_CPNumber
.136b	5a		phy				phy
.136c	18		clc				clc 								; string address to YX
.136d	a5 08		lda $08				lda 	IFR0+IM0
.136f	aa		tax				tax
.1370	a5 09		lda $09				lda 	IFR0+IM1
.1372	a8		tay				tay
.1373	20 c8 13	jsr $13c8			jsr 	CPPrintYX 					; print YX
.1376	7a		ply				ply
.1377	80 c2		bra $133b			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1379					_CPNumber:
.1379	5a		phy				phy
.137a	20 dd 32	jsr $32dd			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.137d	20 c8 13	jsr $13c8			jsr 	CPPrintYX 					; print string at YX
.1380	7a		ply				ply
.1381	80 b8		bra $133b			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1383					_CPTab:
.1383	a9 09		lda #$09			lda 	#9 							; print TAB
.1385	20 e0 13	jsr $13e0			jsr 	CPPrintA
.1388					_CPContinueWithSameLine:
.1388	38		sec				sec 								; loop round with carry set, which
.1389	80 b1		bra $133c			bra 	_CPLoop 					; will inhibit final CR
.138b					_CPExit:
.138b	28		plp				plp 								; get last action flag
.138c	b0 05		bcs $1393			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.138e	a9 0d		lda #$0d			lda 	#13 						; print new line
.1390	20 e0 13	jsr $13e0			jsr 	CPPrintA
.1393					_CPExit2:
.1393	60		rts				rts
.1394					_CPInputCode:
.1394	20 03 19	jsr $1903			jsr 	EXPTermR0 					; get the term, the thing being input to
.1397	5a		phy				phy 								; save position
.1398	20 dd 13	jsr $13dd			jsr 	CPInputA					; input a line to YX
.139b	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.139d	30 18		bmi $13b7			bmi 	_CPInputString
.139f	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.13a1	48		pha				pha
.13a2	a5 09		lda $09				lda 	IFR0+IM1
.13a4	48		pha				pha
.13a5	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.13a7	84 25		sty $25				sty 	zTemp0+1
.13a9	20 ed 1b	jsr $1bed			jsr 	VALConversionZTemp0
.13ac	68		pla				pla 								; do the assign.
.13ad	85 25		sta $25				sta 	zTemp0+1
.13af	68		pla				pla
.13b0	85 24		sta $24				sta 	zTemp0
.13b2	20 08 14	jsr $1408			jsr 	AssignNumber
.13b5	7a		ply				ply
.13b6	60		rts				rts
.13b7					_CPInputString:
.13b7	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.13b9	85 24		sta $24				sta 	zTemp0
.13bb	a5 09		lda $09				lda 	IFR0+IM1
.13bd	85 25		sta $25				sta 	zTemp0+1
.13bf	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.13c1	84 09		sty $09				sty 	IFR0+IM1
.13c3	20 1f 14	jsr $141f			jsr 	AssignString 				; assign the string
.13c6	7a		ply				ply 								; exit
.13c7	60		rts				rts
.13c8					CPPrintYX:
.13c8	86 24		stx $24				stx 	zTemp0
.13ca	84 25		sty $25				sty 	zTemp0+1
.13cc	b2 24		lda ($24)			lda 	(zTemp0)
.13ce	aa		tax				tax
.13cf	f0 0b		beq $13dc			beq 	_CPPrintExit
.13d1	a0 01		ldy #$01			ldy 	#1
.13d3					_CPPrintAYXLoop:
.13d3	b1 24		lda ($24),y			lda 	(zTemp0),y
.13d5	20 e0 13	jsr $13e0			jsr 	CPPrintA
.13d8	c8		iny				iny
.13d9	ca		dex				dex
.13da	d0 f7		bne $13d3			bne 	_CPPrintAYXLoop
.13dc					_CPPrintExit:
.13dc	60		rts				rts
.13dd					CPInputA:
.13dd	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.13e0					CPPrintA:
.13e0	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.0508					InputFlag:
>0508							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.13e3					CommandLET:
.13e3	20 03 19	jsr $1903			jsr 	EXPTermR0 					; get term
.13e6	90 6f		bcc $1457			bcc 	CLError 					; must be a reference term.
.13e8	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.13ea	48		pha				pha
.13eb	a5 09		lda $09				lda 	IFR0+IM1
.13ed	48		pha				pha
.13ee	a5 0b		lda $0b				lda 	IFR0+IExp
.13f0	48		pha				pha
.13f1	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.13f3	20 53 2a	jsr $2a53			jsr 	ERRCheckA
.13f6	20 3b 18	jsr $183b			jsr 	EXPEvaluateExpression 		; right hand side.
.13f9	68		pla				pla 								; restore type of l-expr
.13fa	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.13fc	30 5c		bmi $145a			bmi 	CLType
.13fe	fa		plx				plx 	 							; pop target address to zTemp0
.13ff	86 25		stx $25				stx 	zTemp0+1
.1401	fa		plx				plx
.1402	86 24		stx $24				stx 	zTemp0
.1404					AssignData:
.1404	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.1406	30 17		bmi $141f			bmi 	AssignString
.1408					AssignNumber:
.1408	5a		phy				phy
.1409	a0 03		ldy #$03			ldy 	#3
.140b	a5 0b		lda $0b				lda 	IFR0+IExp
.140d	91 24		sta ($24),y			sta 	(zTemp0),y
.140f	88		dey				dey
.1410	a5 0a		lda $0a				lda 	IFR0+IM2
.1412	91 24		sta ($24),y			sta 	(zTemp0),y
.1414	88		dey				dey
.1415	a5 09		lda $09				lda 	IFR0+IM1
.1417	91 24		sta ($24),y			sta 	(zTemp0),y
.1419	a5 08		lda $08				lda 	IFR0+IM0
.141b	92 24		sta ($24)			sta 	(zTemp0)
.141d	7a		ply				ply
.141e	60		rts				rts
.141f					AssignString:
.141f	5a		phy				phy
.1420	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1422	b1 24		lda ($24),y			lda 	(zTemp0),y
.1424	12 24		ora ($24)			ora 	(zTemp0)
.1426	f0 23		beq $144b			beq 	_CLConcreteString
.1428	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.142a	85 26		sta $26				sta 	zTemp1
.142c	b1 24		lda ($24),y			lda 	(zTemp0),y
.142e	85 27		sta $27				sta 	zTemp1+1
.1430	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.1432	38		sec				sec 								; we want 3 for slot size, status, string size.
.1433	e9 03		sbc #$03			sbc 	#3
.1435	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1437	90 12		bcc $144b			bcc 	_CLConcreteString 			; if it won't fit concrete the string again.
.1439	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte)
.143b	1a		inc a				inc 	a
.143c	aa		tax				tax
.143d	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.143f					_CLReplaceString:
.143f	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1441	c8		iny				iny
.1442	c8		iny				iny
.1443	91 26		sta ($26),y			sta 	(zTemp1),y
.1445	88		dey				dey
.1446	ca		dex				dex
.1447	d0 f6		bne $143f			bne 	_CLReplaceString
.1449	80 0a		bra $1455			bra 	_CLExit
.144b					_CLConcreteString:
.144b	20 c5 2a	jsr $2ac5			jsr 	StringConcrete  			; concreted string in XA.
.144e	a0 01		ldy #$01			ldy 	#1 							; store the address
.1450	92 24		sta ($24)			sta 	(zTemp0)
.1452	8a		txa				txa
.1453	91 24		sta ($24),y			sta 	(zTemp0),y
.1455					_CLExit:
.1455	7a		ply				ply
.1456	60		rts				rts
.1457					CLError:
.1457	4c 9d 29	jmp $299d		jmp	ErrorV_variable
.145a					CLType:
.145a	4c 9a 28	jmp $289a		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.145d					Command_LIST:
.145d	9c 09 05	stz $0509			stz 	CLFrom 						; default from
.1460	9c 0a 05	stz $050a			stz 	CLFrom+1
.1463	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1465	c9 99		cmp #$99			cmp 	#PR_COMMA
.1467	f0 1d		beq $1486			beq 	_CLToLine
.1469	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.146b	f0 37		beq $14a4			beq 	_CLDefaultTo
.146d	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1470	a5 08		lda $08				lda 	IFR0+IM0
.1472	8d 09 05	sta $0509			sta 	CLFrom
.1475	8d 0b 05	sta $050b			sta 	CLTo
.1478	a5 09		lda $09				lda 	IFR0+IM1
.147a	8d 0a 05	sta $050a			sta 	CLFrom+1
.147d	8d 0c 05	sta $050c			sta 	CLTo+1
.1480	b1 18		lda ($18),y			lda 	(codePtr),y
.1482	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1484	f0 26		beq $14ac			beq 	_CLList
.1486					_CLToLine:
.1486	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1488	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.148a	f0 18		beq $14a4			beq 	_CLDefaultTo
.148c	20 4b 2a	jsr $2a4b			jsr 	ERRCheckComma 				; sep comma
.148f	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1491	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1493	f0 0f		beq $14a4			beq 	_CLDefaultTo
.1495	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; there's a To value.
.1498	a5 08		lda $08				lda 	IFR0+IM0
.149a	8d 0b 05	sta $050b			sta 	CLTo
.149d	a5 09		lda $09				lda 	IFR0+IM1
.149f	8d 0c 05	sta $050c			sta 	CLTo+1
.14a2	80 08		bra $14ac			bra 	_CLList
.14a4					_CLDefaultTo:
.14a4	a9 ff		lda #$ff			lda 	#$FF
.14a6	8d 0b 05	sta $050b			sta 	CLTo
.14a9	8d 0c 05	sta $050c			sta 	CLTo+1
.14ac					_CLList:
.14ac	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.14af	85 19		sta $19				sta 	codePtr+1
.14b1	64 18		stz $18				stz 	codePtr
.14b3	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.14b5	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.14b7	20 7f 20	jsr $207f			jsr 	TOKSetDetokeniseOutput
.14ba					_CLLoop:
.14ba	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.14bc	f0 51		beq $150f			beq 	_CLExit
.14be	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.14c1	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.14c4	d0 4c		bne $1512			bne 	_CLBreak
.14c6	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.14c8	20 15 15	jsr $1515			jsr 	_CLCompareLine
.14cb	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.14cd	f0 33		beq $1502			beq 	_CLNext
.14cf	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.14d1	20 15 15	jsr $1515			jsr 	_CLCompareLine
.14d4	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.14d6	f0 2a		beq $1502			beq 	_CLNext
.14d8	a0 02		ldy #$02			ldy 	#2 							; print line #
.14da	b1 18		lda ($18),y			lda 	(codePtr),y
.14dc	aa		tax				tax
.14dd	88		dey				dey
.14de	b1 18		lda ($18),y			lda 	(codePtr),y
.14e0	20 9a 2c	jsr $2c9a			jsr 	WriteIntXA
.14e3					_CLSpacing:
.14e3	a9 20		lda #$20			lda 	#32
.14e5	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.14e8	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.14eb	e0 06		cpx #$06			cpx 	#6
.14ed	d0 f4		bne $14e3			bne 	_CLSpacing
.14ef	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.14f1	a5 18		lda $18				lda 	codePtr
.14f3	18		clc				clc
.14f4	69 03		adc #$03			adc 	#3
.14f6	aa		tax				tax
.14f7	90 01		bcc $14fa			bcc 	_CLNoCarry2
.14f9	c8		iny				iny
.14fa					_CLNoCarry2:
.14fa	20 24 20	jsr $2024			jsr 	TOKDetokenise
.14fd	a9 0d		lda #$0d			lda 	#13	 						; next line
.14ff	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1502					_CLNext:
.1502	18		clc				clc 								; advance to next line.
.1503	b2 18		lda ($18)			lda 	(codePtr)
.1505	65 18		adc $18				adc 	codePtr
.1507	85 18		sta $18				sta 	codePtr
.1509	90 02		bcc $150d			bcc 	_CLNoCarry
.150b	e6 19		inc $19				inc 	codePtr+1
.150d					_CLNoCarry:
.150d	80 ab		bra $14ba			bra 	_CLLoop
.150f					_CLExit:
.150f	4c b9 2c	jmp $2cb9			jmp 	WarmStart
.1512					_CLBreak:
.1512	4c f5 29	jmp $29f5		jmp	ErrorV_break
.1515					_CLCompareLine:
.1515	a0 01		ldy #$01			ldy 	#1
.1517	38		sec				sec
.1518	b1 18		lda ($18),y			lda 	(codePtr),y
.151a	fd 09 05	sbc $0509,x			sbc 	CLFrom,x
.151d	85 24		sta $24				sta 	zTemp0
.151f	c8		iny				iny
.1520	b1 18		lda ($18),y			lda 	(codePtr),y
.1522	fd 0a 05	sbc $050a,x			sbc 	CLFrom+1,x
.1525	90 0a		bcc $1531			bcc 	_CLIsNegative
.1527	d0 05		bne $152e			bne 	_CLIsPositive
.1529	a5 24		lda $24				lda 	zTemp0
.152b	d0 01		bne $152e			bne 	_CLIsPositive
.152d	60		rts				rts
.152e					_CLIsPositive:
.152e	a9 01		lda #$01			lda 	#1
.1530	60		rts				rts
.1531					_CLIsNegative:
.1531	a9 ff		lda #$ff			lda 	#255
.1533	60		rts				rts
.0509					CLFrom:
>0509							.fill 	2
.050b					CLTo:
>050b							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1534					Command_NEW:
.1534	20 2d 22	jsr $222d			jsr 	PGMNewProgram 				; Reset current program
.1537	20 68 11	jsr $1168			jsr 	ClearCode 					; Run CLR
.153a	4c a0 16	jmp $16a0			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.153d					Command_READ:
.153d	20 03 19	jsr $1903			jsr 	EXPTermR0 					; get term to R0
.1540	90 35		bcc $1577			bcc 	_CRSyntax 					; fail if not a reference.
.1542	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1544	48		pha				pha
.1545	a5 09		lda $09				lda 	IFR0+IM1
.1547	48		pha				pha
.1548	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.154a	48		pha				pha
.154b	20 14 16	jsr $1614			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.154e	ad 11 05	lda $0511			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1551	d0 27		bne $157a			bne 	_CRHaveData  				; forward for the next one.
.1553					_CRNextLine:
.1553	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1555	f0 1a		beq $1571			beq 	_CRNoData
.1557					_CRKeepSearching:
.1557	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1559	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.155b	20 7a 27	jsr $277a			jsr 	ScanForward
.155e	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1560	f0 18		beq $157a			beq 	_CRHaveData 				; found it
.1562	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1564	18		clc				clc 								; try the next line, keep going.
.1565	b2 18		lda ($18)			lda 	(codePtr)
.1567	65 18		adc $18				adc 	codePtr
.1569	85 18		sta $18				sta 	codePtr
.156b	90 e6		bcc $1553			bcc 	_CRNextLine
.156d	e6 19		inc $19				inc 	codePtr+1
.156f	80 e2		bra $1553			bra 	_CRNextLine
.1571					_CRNoData:
.1571	4c 22 29	jmp $2922		jmp	ErrorV_data
.1574					_CLType:
.1574	4c 9a 28	jmp $289a		jmp	ErrorV_type
.1577					_CRSyntax:
.1577	4c 6a 28	jmp $286a		jmp	ErrorV_syntax
.157a					_CRHaveData:
.157a	20 3b 18	jsr $183b			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.157d	68		pla				pla 								; type of l-expr
.157e	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1580	30 f2		bmi $1574			bmi 	_CLType
.1582	68		pla				pla 								; restore address
.1583	85 25		sta $25				sta 	zTemp0+1
.1585	68		pla				pla
.1586	85 24		sta $24				sta 	zTemp0
.1588	20 04 14	jsr $1404			jsr 	AssignData 					; write R0 there.
.158b	9c 11 05	stz $0511			stz 	dataInStatement 			; clear in data flag
.158e	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1590	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1592	d0 04		bne $1598			bne 	_CRSwapBack
.1594	c8		iny				iny 								; consume comma
.1595	ee 11 05	inc $0511			inc 	dataInStatement 			; set in data statement flag.
.1598					_CRSwapBack:
.1598	20 14 16	jsr $1614			jsr 	SwapCodeDataPointers		; swap them back.
.159b	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.159d	c8		iny				iny
.159e	c9 99		cmp #$99			cmp 	#PR_COMMA
.15a0	f0 9b		beq $153d			beq 	Command_READ 				; if so go round again.
.15a2	88		dey				dey 								; unpick get.
.15a3	60		rts				rts
.15a4					Command_DATA:
.15a4	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.15a6	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.15a8	20 7a 27	jsr $277a			jsr 	ScanForward
.15ab	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.15ad	d0 01		bne $15b0			bne 	_CDNotEOL
.15af	88		dey				dey
.15b0					_CDNotEOL:
.15b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.15b1					Command_REM:
.15b1					Command_REM2:
.15b1	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.15b3	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.15b5	d0 06		bne $15bd			bne 	_CRExit
.15b7	c8		iny				iny 								; skip over it, it's a comment.
.15b8	98		tya				tya
.15b9	38		sec				sec
.15ba	71 18		adc ($18),y			adc 	(codePtr),y
.15bc	a8		tay				tay
.15bd					_CRExit:
.15bd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.15be					Command_RENUMBER:
.15be	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.15c0	85 08		sta $08				sta 	IM0+IFR0
.15c2	a9 03		lda #$03			lda 	#1000 >> 8
.15c4	85 09		sta $09				sta 	IM1+IFR0
.15c6	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.15c8	c9 9b		cmp #$9b			cmp 	#PR_COLON
.15ca	f0 07		beq $15d3			beq 	_CRIsDefault
.15cc	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.15ce	f0 03		beq $15d3			beq 	_CRIsDefault
.15d0	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; get other start
.15d3					_CRIsDefault:
.15d3	5a		phy				phy
.15d4	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.15d6	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.15d9	85 25		sta $25				sta 	zTemp0+1
.15db					_CRRenumberLoop:
.15db	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.15dd	f0 21		beq $1600			beq 	_CRExit
.15df	18		clc				clc
.15e0	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.15e2	a5 08		lda $08				lda 	IFR0+IM0
.15e4	91 24		sta ($24),y			sta 	(zTemp0),y
.15e6	69 0a		adc #$0a			adc 	#10
.15e8	85 08		sta $08				sta 	IFR0+IM0
.15ea	c8		iny				iny
.15eb	a5 09		lda $09				lda 	IFR0+IM1
.15ed	91 24		sta ($24),y			sta 	(zTemp0),y
.15ef	69 00		adc #$00			adc 	#0
.15f1	85 09		sta $09				sta 	IFR0+IM1
.15f3	18		clc				clc 								; next line.
.15f4	b2 24		lda ($24)			lda 	(zTemp0)
.15f6	65 24		adc $24				adc 	zTemp0
.15f8	85 24		sta $24				sta 	zTemp0
.15fa	90 df		bcc $15db			bcc 	_CRRenumberLoop
.15fc	e6 25		inc $25				inc 	zTemp0+1
.15fe	80 db		bra $15db			bra 	_CRRenumberLoop
.1600					_CRExit:
.1600	7a		ply				ply
.1601	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1602					S
.1602					Command_RESTORE:
.1602	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.1605	8d 0e 05	sta $050e			sta 	dataPtr+1
.1608	9c 0d 05	stz $050d			stz 	dataPtr
.160b	a9 03		lda #$03			lda 	#3 							; position start of line
.160d	8d 0f 05	sta $050f			sta 	dataPos
.1610	9c 11 05	stz $0511			stz 	dataInStatement 			; not in statement
.1613	60		rts				rts
.1614					SwapCodeDataPointers:
.1614	ad 0d 05	lda $050d			lda 	dataPtr 					; swap LSB of code/data
.1617	a6 18		ldx $18				ldx 	codePtr
.1619	85 18		sta $18				sta 	codePtr
.161b	8e 0d 05	stx $050d			stx 	dataPtr
.161e	ad 0e 05	lda $050e			lda 	dataPtr+1 					; swap MSB of code/data
.1621	a6 19		ldx $19				ldx 	codePtr+1
.1623	85 19		sta $19				sta 	codePtr+1
.1625	8e 0e 05	stx $050e			stx 	dataPtr+1
.1628	ad 0f 05	lda $050f			lda 	dataPos 					; swap dataPos and Y
.162b	8c 0f 05	sty $050f			sty 	dataPos
.162e	a8		tay				tay
.162f	60		rts				rts
.050d					dataPtr:
>050d							.fill 	2
.050f					dataPos:
>050f							.fill 	2
.0511					dataInStatement:
>0511							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1630					Command_RUN:
.1630	20 68 11	jsr $1168			jsr 	ClearCode					; clear everything out.
.1633	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.1636	85 19		sta $19				sta 	codePtr+1
.1638	64 18		stz $18				stz 	codePtr
.163a	80 0b		bra $1647			bra 	RUNNewLine
.163c					RUNEndOfLine:
.163c	18		clc				clc 								; advance to next line.
.163d	b2 18		lda ($18)			lda 	(codePtr)
.163f	65 18		adc $18				adc 	codePtr
.1641	85 18		sta $18				sta 	codePtr
.1643	90 02		bcc $1647			bcc 	_RELNoCarry
.1645	e6 19		inc $19				inc 	codePtr+1
.1647					_RELNoCarry:
.1647					RUNNewLine:
.1647	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1649	9a		txs				txs
.164a	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.164c	f0 52		beq $16a0			beq 	Command_END
.164e	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1650	b1 18		lda ($18),y			lda 	(codePtr),y
.1652	8d 2e 06	sta $062e			sta 	ERRLine
.1655	c8		iny				iny
.1656	b1 18		lda ($18),y			lda 	(codePtr),y
.1658	8d 2f 06	sta $062f			sta 	ERRLine+1
.165b	c8		iny				iny 								; offset into codePtr for start of line.
.165c					RUNNewCommand:
.165c	9c 23 06	stz $0623			stz 	stringInitialised 			; reset string system flag.
.165f	ce 12 05	dec $0512			dec 	checkCounter				; don't do these checks ever command
.1662	d0 0a		bne $166e			bne 	_RNCNoCheck
.1664	5a		phy				phy 								; keyboard check.
.1665	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1668	7a		ply				ply
.1669	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.166c	d0 1e		bne $168c			bne 	_RUNBreak
.166e					_RNCNoCheck:
.166e	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1670	10 1d		bpl $168f			bpl		_RUNNotToken 				; probably an identifier
.1672	c8		iny				iny 								; consume token
.1673	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1675	f0 e5		beq $165c			beq 	RUNNewCommand
.1677	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1679	b0 0e		bcs $1689			bcs 	_RUNSyntax
.167b	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.167d	90 0a		bcc $1689			bcc 	_RUNSyntax
.167f	0a		asl a				asl 	a 							; double into X.
.1680	aa		tax				tax
.1681	20 86 16	jsr $1686			jsr 	_RUNDispatchMain			; call the main dispatcher
.1684	80 d6		bra $165c			bra 	RUNNewCommand
.1686					_RUNDispatchMain:
.1686	7c 02 1f	jmp ($1f02,x)			jmp 	(VectorTable,x)
.1689					_RUNSyntax:
.1689	4c 6a 28	jmp $286a		jmp	ErrorV_syntax
.168c					_RUNBreak:
.168c	4c f5 29	jmp $29f5		jmp	ErrorV_break
.168f					_RUNNotToken:
.168f	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error (numbers)
.1691	90 f6		bcc $1689			bcc 	_RUNSyntax
.1693	20 e3 13	jsr $13e3			jsr 	CommandLET 					; assignment
.1696	80 c4		bra $165c			bra 	RUNNewCommand 				; loop round.
.1698					Command_Shift_Handler:
.1698	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.169a	c8		iny				iny
.169b	0a		asl a				asl 	a 							; double into X
.169c	aa		tax				tax
.169d	7c 02 20	jmp ($2002,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.16a0					Command_END:
.16a0	4c b9 2c	jmp $2cb9			jmp 	WarmStart
.0512					checkCounter:
>0512							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.16a3					Command_STOP:
.16a3	4c 0e 29	jmp $290e		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.16a6					Command_Sys:
.16a6	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; execution address
.16a9	5a		phy				phy
.16aa	ad 76 06	lda $0676			lda 	('A'-'A')*4 + FastVariables ; load AXY
.16ad	ae d2 06	ldx $06d2			ldx 	('X'-'A')*4 + FastVariables
.16b0	ac d6 06	ldy $06d6			ldy 	('Y'-'A')*4 + FastVariables
.16b3	20 b8 16	jsr $16b8			jsr 	_CSCallIFR0 				; call the code
.16b6	7a		ply				ply
.16b7	60		rts				rts
.16b8					_CSCallIFR0:
.16b8	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.16bb					NoExec01:
.16bb					NoExec02:
.16bb					NoExec03:
.16bb					NoExec04:
.16bb					NoExec05:
.16bb					NoExec06:
.16bb					NoExec07:
.16bb					NoExec08:
.16bb	4c 6a 28	jmp $286a		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.16be					EXPBinAdd:
.16be	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.16c0	30 6f		bmi $1731			bmi 	EXPConcatenate
.16c2	a2 0c		ldx #$0c			ldx 	#IFR1
.16c4	4c d8 2e	jmp $2ed8			jmp 	IFloatAdd
.16c7					EXPBinSub:
.16c7	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.16c9	30 3f		bmi $170a			bmi 	EXPTypeError
.16cb	a2 0c		ldx #$0c			ldx 	#IFR1
.16cd	4c d1 2e	jmp $2ed1			jmp 	IFloatSubtract
.16d0					EXPBinMul:
.16d0	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.16d2	30 36		bmi $170a			bmi 	EXPTypeError
.16d4	a2 0c		ldx #$0c			ldx 	#IFR1
.16d6	4c 82 2f	jmp $2f82			jmp 	IFloatMultiply
.16d9					EXPBinFDiv:
.16d9	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.16db	30 2d		bmi $170a			bmi 	EXPTypeError
.16dd	a2 0c		ldx #$0c			ldx 	#IFR1
.16df	20 04 32	jsr $3204			jsr 	IFloatDivideFloat
.16e2	b0 0f		bcs $16f3			bcs 	EXPDZero
.16e4	60		rts				rts
.16e5					EXPBinIDiv:
.16e5	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.16e7	30 21		bmi $170a			bmi 	EXPTypeError
.16e9	a2 0c		ldx #$0c			ldx 	#IFR1
.16eb	20 04 32	jsr $3204			jsr 	IFloatDivideFloat
.16ee	b0 03		bcs $16f3			bcs 	EXPDZero
.16f0	4c e1 31	jmp $31e1			jmp 	IFloatIntegerR0
.16f3					EXPDZero:
.16f3	4c e3 28	jmp $28e3		jmp	ErrorV_divzero
.16f6					EXPBinIMod:
.16f6	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.16f8	30 10		bmi $170a			bmi 	EXPTypeError
.16fa	a2 0c		ldx #$0c			ldx 	#IFR1
.16fc	5a		phy				phy
.16fd	20 17 31	jsr $3117			jsr 	IFPreProcessBitwise 		; set up everything.
.1700	d0 05		bne $1707			bne 	EXPDRange
.1702	20 50 30	jsr $3050			jsr 	IFloatModulusInteger
.1705	7a		ply				ply
.1706	60		rts				rts
.1707					EXPDRange:
.1707	4c 7b 28	jmp $287b		jmp	ErrorV_range
.170a					EXPTypeError:
.170a	4c 9a 28	jmp $289a		jmp	ErrorV_type
.170d					EXPBinAnd:
.170d	24 0b		bit $0b				bit 	IFR0+IExp
.170f	30 f9		bmi $170a			bmi 	EXPTypeError
.1711	a2 0c		ldx #$0c			ldx 	#IFR1
.1713	20 d2 30	jsr $30d2			jsr 	IFloatBitwiseAnd
.1716	b0 ef		bcs $1707			bcs 	EXPDRange
.1718	60		rts				rts
.1719					EXPBinOr:
.1719	24 0b		bit $0b				bit 	IFR0+IExp
.171b	30 ed		bmi $170a			bmi 	EXPTypeError
.171d	a2 0c		ldx #$0c			ldx 	#IFR1
.171f	20 e9 30	jsr $30e9			jsr 	IFloatBitwiseOr
.1722	b0 e3		bcs $1707			bcs 	EXPDRange
.1724	60		rts				rts
.1725					EXPBinXor:
.1725	24 0b		bit $0b				bit 	IFR0+IExp
.1727	30 e1		bmi $170a			bmi 	EXPTypeError
.1729	a2 0c		ldx #$0c			ldx 	#IFR1
.172b	20 00 31	jsr $3100			jsr 	IFloatBitwiseXor
.172e	b0 d7		bcs $1707			bcs 	EXPDRange
.1730	60		rts				rts
.1731					EXPConcatenate:
.1731	18		clc				clc
.1732	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.1734	72 0c		adc ($0c)			adc 	(IFR1)
.1736	b0 2d		bcs $1765			bcs 	_EXPCError 					; far too long.
.1738	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.173a	da		phx				phx
.173b	a6 09		ldx $09				ldx 	IFR0+1
.173d	da		phx				phx
.173e	20 38 2b	jsr $2b38			jsr 	StringTempAllocate 			; allocate string, set up return
.1741	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.1743	a5 0c		lda $0c				lda 	IFR1
.1745	20 4e 17	jsr $174e			jsr 	_EXPCCopyXA
.1748	fa		plx				plx 								; copy second string
.1749	68		pla				pla
.174a	20 4e 17	jsr $174e			jsr 	_EXPCCopyXA
.174d	60		rts				rts
.174e					_EXPCCopyXA:
.174e	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.1750	85 24		sta $24				sta 	zTemp0
.1752	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.1754	f0 0e		beq $1764			beq 	_EXPCCExit 					; nothing in string
.1756	aa		tax				tax 								; count
.1757	5a		phy				phy 								; start position
.1758	a0 01		ldy #$01			ldy 	#1
.175a					_EXPCCLoop:
.175a	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.175c	20 6d 2b	jsr $2b6d			jsr 	StringTempWrite
.175f	c8		iny				iny
.1760	ca		dex				dex
.1761	d0 f7		bne $175a			bne 	_EXPCCLoop
.1763	7a		ply				ply
.1764					_EXPCCExit:
.1764	60		rts				rts
.1765					_EXPCError:
.1765	4c 87 29	jmp $2987		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1768					EXPReturnTrue:
.1768	a2 08		ldx #$08			ldx 	#IFR0
.176a	a9 01		lda #$01			lda 	#1
.176c	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.176f	20 eb 34	jsr $34eb			jsr 	IFloatNegate
.1772	60		rts				rts
.1773					EXPReturnFalse:
.1773	a2 08		ldx #$08			ldx 	#IFR0
.1775	4c e0 34	jmp $34e0			jmp 	IFloatSetZero
.1778					EXPCompareEqual:
.1778	20 ae 17	jsr $17ae			jsr 	EXPCompareBaseCode
.177b	c9 00		cmp #$00			cmp 	#0
.177d	f0 e9		beq $1768			beq 	EXPReturnTrue
.177f	80 f2		bra $1773			bra 	EXPReturnFalse
.1781					EXPCompareLess:
.1781	20 ae 17	jsr $17ae			jsr 	EXPCompareBaseCode
.1784	c9 ff		cmp #$ff			cmp 	#$FF
.1786	f0 e0		beq $1768			beq 	EXPReturnTrue
.1788	80 e9		bra $1773			bra 	EXPReturnFalse
.178a					EXPCompareGreater:
.178a	20 ae 17	jsr $17ae			jsr 	EXPCompareBaseCode
.178d	c9 01		cmp #$01			cmp 	#1
.178f	f0 d7		beq $1768			beq 	EXPReturnTrue
.1791	80 e0		bra $1773			bra 	EXPReturnFalse
.1793					EXPCompareNotEqual:
.1793	20 ae 17	jsr $17ae			jsr 	EXPCompareBaseCode
.1796	c9 00		cmp #$00			cmp 	#0
.1798	d0 ce		bne $1768			bne 	EXPReturnTrue
.179a	80 d7		bra $1773			bra 	EXPReturnFalse
.179c					EXPCompareLessEqual:
.179c	20 ae 17	jsr $17ae			jsr 	EXPCompareBaseCode
.179f	c9 01		cmp #$01			cmp 	#1
.17a1	d0 c5		bne $1768			bne 	EXPReturnTrue
.17a3	80 ce		bra $1773			bra 	EXPReturnFalse
.17a5					EXPCompareGreaterEqual:
.17a5	20 ae 17	jsr $17ae			jsr 	EXPCompareBaseCode
.17a8	c9 ff		cmp #$ff			cmp 	#$FF
.17aa	d0 bc		bne $1768			bne 	EXPReturnTrue
.17ac	80 c5		bra $1773			bra 	EXPReturnFalse
.17ae					EXPCompareBaseCode:
.17ae	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.17b0	30 10		bmi $17c2			bmi 	_EXCBCString
.17b2	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.17b4	20 af 31	jsr $31af			jsr 	IFloatCompare
.17b7	a5 08		lda $08				lda 	IFR0+IM0
.17b9	f0 06		beq $17c1			beq 	_EXCBCExit 					; return 0 if zero
.17bb	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.17bd	50 02		bvc $17c1			bvc 	_EXCBCExit
.17bf	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.17c1					_EXCBCExit:
.17c1	60		rts				rts
.17c2					_EXCBCString:
.17c2	5a		phy				phy
.17c3	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.17c5	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.17c7	90 02		bcc $17cb			bcc 	_EXCBCSmaller
.17c9	b2 0c		lda ($0c)			lda 	(IFR1)
.17cb					_EXCBCSmaller:
.17cb	aa		tax				tax
.17cc	f0 0d		beq $17db			beq 	_EXCBCMatches 				; if zero common length matches
.17ce	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.17d0					_EXCBCCheckSmallerMatches:
.17d0	c8		iny				iny 								; compare directly as far as common length
.17d1	38		sec				sec
.17d2	b1 0c		lda ($0c),y			lda 	(IFR1),y
.17d4	f1 08		sbc ($08),y			sbc 	(IFR0),y
.17d6	d0 08		bne $17e0			bne 	_EXCBCExit2
.17d8	ca		dex				dex
.17d9	d0 f5		bne $17d0			bne 	_EXCBCCheckSmallerMatches
.17db					_EXCBCMatches:
.17db	38		sec				sec
.17dc	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.17de	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.17e0					_EXCBCExit2:
.17e0	7a		ply				ply
.17e1	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.17e3	f0 04		beq $17e9			beq 	_EXCBCReturn
.17e5	30 03		bmi $17ea			bmi 	_EXCBCFF 					; return $FF if <
.17e7	a9 01		lda #$01			lda 	#1 							; return 1 if >
.17e9					_EXCBCReturn:
.17e9	60		rts				rts
.17ea					_EXCBCFF:
.17ea	a9 ff		lda #$ff			lda 	#$FF
.17ec	60		rts				rts
.17ed					_EXCBCRange:
.17ed	4c 7b 28	jmp $287b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.17f0					EXPBinLeft:
.17f0	a9 ff		lda #$ff			lda 	#$FF
.17f2	8d 13 05	sta $0513			sta 	EXPShiftLeftFlag
.17f5	4c fb 17	jmp $17fb			jmp 	EXPShiftCommon
.17f8					EXPBinRight:
.17f8	9c 13 05	stz $0513			stz 	EXPShiftLeftFlag
.17fb					EXPShiftCommon:
.17fb	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.17fd	05 0f		ora $0f				ora 	IFR1+IExp
.17ff	29 7f		and #$7f			and 	#$7F
.1801	d0 35		bne $1838			bne 	_EXPSRange
.1803	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1805	29 e0		and #$e0			and 	#$E0
.1807	05 09		ora $09				ora 	IFR0+IM1
.1809	05 0a		ora $0a				ora 	IFR0+IM2
.180b	d0 25		bne $1832			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.180d	5a		phy				phy
.180e	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.1810	29 1f		and #$1f			and 	#$1F
.1812	f0 17		beq $182b			beq 	_EXPSExit 					; exit if zero
.1814	a8		tay				tay
.1815					_EXPSLoop:
.1815	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.1817	2c 13 05	bit $0513			bit 	EXPShiftLeftFlag
.181a	30 05		bmi $1821			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.181c	20 0f 35	jsr $350f			jsr 	IFloatShiftRight
.181f	80 07		bra $1828			bra 	_EXPSContinue
.1821					_EXPSShiftLeft:
.1821	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.1824	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.1826	30 10		bmi $1838			bmi 	_EXPSRange
.1828					_EXPSContinue:
.1828	88		dey				dey 								; do it Y times
.1829	d0 ea		bne $1815			bne 	_EXPSLoop
.182b					_EXPSExit:
.182b	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.182d	20 71 34	jsr $3471			jsr 	IFloatCopyFromRegister
.1830	7a		ply				ply
.1831	60		rts				rts
.1832					_EXPSShiftZero:
.1832	a2 08		ldx #$08			ldx 	#IFR0
.1834	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.1837	60		rts				rts
.1838					_EXPSRange:
.1838	4c 7b 28	jmp $287b		jmp	ErrorV_range
.0513					EXPShiftLeftFlag:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.183b					EXPEvaluateExpression:
.183b	a9 00		lda #$00			lda 	#0 							; current precedence
.183d					EXPEvaluateExpressionPrecedenceA:
.183d	48		pha				pha
.183e	20 b8 18	jsr $18b8			jsr 	EXPTermValueR0				; do first term.
.1841					_EELoop:
.1841	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1843	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1845	90 31		bcc $1878			bcc 	_EEExit
.1847	aa		tax				tax 								; access the precedence of the operator.
.1848	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1849	dd 16 1c	cmp $1c16,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.184c	b0 2b		bcs $1879			bcs 	_EEExit2
.184e	48		pha				pha 								; save current precedence.
.184f	da		phx				phx 								; save operator
.1850	c8		iny				iny 								; consume operator
.1851	da		phx				phx
.1852	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.1854	20 2f 34	jsr $342f			jsr 	IFloatPushRx
.1857	fa		plx				plx
.1858	bd 16 1c	lda $1c16,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.185b	20 3d 18	jsr $183d			jsr 	EXPEvaluateExpressionPrecedenceA
.185e	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.1860	20 50 34	jsr $3450			jsr 	IFloatPullRx
.1863	fa		plx				plx 								; operator
.1864	a5 0b		lda $0b				lda 	IFR0+IExp 					; check if types match.
.1866	45 0f		eor $0f				eor 	IFR1+IExp
.1868	30 08		bmi $1872			bmi 	_EEType		 				; MSBs differ, error.
.186a					_EETypeOkay:
.186a	8a		txa				txa
.186b	0a		asl a				asl 	a 							; double -> X
.186c	aa		tax				tax
.186d	20 75 18	jsr $1875			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1870	80 cf		bra $1841			bra 	_EELoop
.1872					_EEType:
.1872	4c 9a 28	jmp $289a		jmp	ErrorV_type
.1875					_EECallBinary:
.1875	7c 02 1f	jmp ($1f02,x)			jmp 	(VectorTable,x)
.1878					_EEExit:
.1878	68		pla				pla 								; throw precedence
.1879					_EEExit2:
.1879	18		clc				clc
.187a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.187b					EXPEvalNumber:
.187b	20 3b 18	jsr $183b			jsr 	EXPEvaluateExpression 		; get a value
.187e	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1880	30 01		bmi $1883			bmi 	EVUType
.1882	60		rts				rts
.1883					EVUType:
.1883	4c 9a 28	jmp $289a		jmp	ErrorV_type
.1886					EXPEvalInteger:
.1886	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1889	20 e1 31	jsr $31e1			jsr 	IFloatIntegerR0
.188c	60		rts				rts
.188d					EXPEvalInteger16:
.188d	20 86 18	jsr $1886			jsr 	EXPEvalInteger 				; get integer
.1890	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1892	d0 21		bne $18b5			bne 	EVURange
.1894	a6 09		ldx $09				ldx 	IFR0+IM1
.1896	a5 08		lda $08				lda 	IFR0+IM0
.1898	60		rts				rts
.1899					EXPEvalInteger8:
.1899	20 86 18	jsr $1886			jsr 	EXPEvalInteger 				; get integer
.189c	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.189e	05 09		ora $09				ora 	IFR0+IM1
.18a0	d0 13		bne $18b5			bne 	EVURange
.18a2	a5 08		lda $08				lda 	IFR0+IM0
.18a4	60		rts				rts
.18a5					EXPEvalString:
.18a5	20 3b 18	jsr $183b			jsr 	EXPEvaluateExpression 		; get value
.18a8	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.18aa	10 d7		bpl $1883			bpl 	EVUType
.18ac	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.18ae	86 25		stx $25				stx 	zTemp0+1
.18b0	a5 08		lda $08				lda 	IFR0+IM0
.18b2	85 24		sta $24				sta 	zTemp0
.18b4	60		rts				rts
.18b5					EVURange:
.18b5	4c 7b 28	jmp $287b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.18b8					EXPTermValueR0:
.18b8	20 03 19	jsr $1903			jsr 	EXPTermR0 					; get term
.18bb	90 45		bcc $1902			bcc 	_ETVNotReference 			; exit if value.
.18bd	5a		phy				phy
.18be	a0 03		ldy #$03			ldy 	#3 							; get type
.18c0	b1 08		lda ($08),y			lda 	(IFR0),y
.18c2	30 14		bmi $18d8			bmi 	_ETVDereferenceString
.18c4	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.18c6	88		dey				dey 								; get byte 2
.18c7	b1 08		lda ($08),y			lda 	(IFR0),y
.18c9	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.18cb	88		dey				dey 								; get byte 1
.18cc	b1 08		lda ($08),y			lda 	(IFR0),y
.18ce	aa		tax				tax 								; save in X so we can overwrite it
.18cf	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.18d1	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.18d3	85 08		sta $08				sta 	IFR0+IM0
.18d5	7a		ply				ply
.18d6	18		clc				clc
.18d7	60		rts				rts
.18d8					_ETVDereferenceString:
.18d8	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.18da	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.18dc	12 08		ora ($08)			ora 	(IFR0)
.18de	f0 11		beq $18f1			beq 	_ETVNull 					; if so, return a fake NULL.
.18e0	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.18e2	aa		tax				tax
.18e3	b2 08		lda ($08)			lda 	(IFR0)
.18e5	18		clc				clc 								; add two so points to actual string.
.18e6	69 02		adc #$02			adc 	#2
.18e8	90 01		bcc $18eb			bcc 	_EVDSNoCarry
.18ea	e8		inx				inx
.18eb					_EVDSNoCarry:
.18eb	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.18ed	85 08		sta $08				sta 	IFR0
.18ef	80 08		bra $18f9			bra 	_ETVFillExit 				; tidy up and exit.
.18f1					_ETVNull:
.18f1	a9 01		lda #$01			lda 	#_EVTNString & $FF
.18f3	85 08		sta $08				sta 	IFR0+IM0
.18f5	a9 19		lda #$19			lda 	#_EVTNString >> 8
.18f7	85 09		sta $09				sta 	IFR0+IM1
.18f9					_ETVFillExit:
.18f9	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.18fb	a9 80		lda #$80			lda 	#$80 						; set type to string.
.18fd	85 0b		sta $0b				sta 	IFR0+IExp
.18ff	7a		ply				ply
.1900	60		rts				rts
.1901					_EVTNString:
>1901	00						.byte 	0
.1902					_ETVNotReference:
.1902	60		rts				rts
.1903					EXPTermR0:
.1903	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1905	30 10		bmi $1917			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1907	c8		iny				iny 								; consume element
.1908	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.190a	b0 08		bcs $1914			bcs 	_ETMIdentifier
.190c	20 42 19	jsr $1942			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.190f	20 75 19	jsr $1975			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1912	18		clc				clc 								; return value ok
.1913	60		rts				rts
.1914					_ETMIdentifier:
.1914	4c 79 2e	jmp $2e79			jmp 	VARCheckSimple 				; check variables, seperate module.
.1917					_ETMIsUnaryOrMinus:
.1917	c8		iny				iny 								; consume element
.1918	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.191a	d0 0e		bne $192a			bne 	_ETMCheckUnary
.191c	20 b8 18	jsr $18b8			jsr 	EXPTermValueR0 				; get a term to negate
.191f	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.1921	20 eb 34	jsr $34eb			jsr 	IFloatNegate
.1924	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.1926	30 17		bmi $193f			bmi 	_ETMUnaryType				; if so error.
.1928	18		clc				clc
.1929	60		rts				rts
.192a					_ETMCheckUnary:
.192a	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.192c	90 0e		bcc $193c			bcc 	_ETMUnarySyntax
.192e	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1930	b0 0a		bcs $193c			bcs 	_ETMUnarySyntax
.1932	0a		asl a				asl 	a 							; make it into an index => X
.1933	aa		tax				tax
.1934	20 39 19	jsr $1939			jsr 	_ETMCallUnaryFunction 		; call the function
.1937	18		clc				clc 								; and return it.
.1938	60		rts				rts
.1939					_ETMCallUnaryFunction:
.1939	7c 02 1f	jmp ($1f02,x)			jmp 	(VectorTable,x)
.193c					_ETMUnarySyntax:
.193c	4c 6a 28	jmp $286a		jmp	ErrorV_syntax
.193f					_ETMUnaryType:
.193f	4c 9a 28	jmp $289a		jmp	ErrorV_type
.1942					EXPExtractTokenisedInteger:
.1942	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.1944	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.1946	64 09		stz $09				stz 	IFR0+IM1
.1948	64 0a		stz $0a				stz 	IFR0+IM2
.194a					_ETMConstant:
.194a	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.194c	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.194e	b0 24		bcs $1974			bcs 	_ETMCExit 					; no, exit.
.1950	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1952	a5 09		lda $09				lda 	IFR0+IM1
.1954	85 0a		sta $0a				sta 	IFR0+IM2
.1956	a5 08		lda $08				lda 	IFR0+IM0
.1958	85 09		sta $09				sta 	IFR0+IM1
.195a	64 08		stz $08				stz 	IFR0+IM0
.195c	8a		txa				txa
.195d	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.195e	66 0a		ror $0a				ror 	IFR0+IM2
.1960	66 09		ror $09				ror 	IFR0+IM1
.1962	66 08		ror $08				ror 	IFR0+IM0
.1964	4a		lsr a				lsr 	a
.1965	66 0a		ror $0a				ror 	IFR0+IM2
.1967	66 09		ror $09				ror 	IFR0+IM1
.1969	66 08		ror $08				ror 	IFR0+IM0
.196b	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.196d	11 18		ora ($18),y			ora 	(codePtr),y
.196f	85 08		sta $08				sta 	IFR0+IM0
.1971	c8		iny				iny 								; consume, loop back
.1972	80 d6		bra $194a			bra 	_ETMConstant
.1974					_ETMCExit:
.1974	60		rts				rts
.1975					EXPCheckDecimalFollows:
.1975	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1977	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1979	d0 19		bne $1994			bne 	_ETMCDExit
.197b	c8		iny				iny 								; consume token.
.197c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.197e	5a		phy				phy									; save current position
.197f	48		pha				pha 								; save count of chars.
.1980	38		sec				sec 								; address into YX : y + codePtr+1
.1981	98		tya				tya
.1982	65 18		adc $18				adc 	codePtr
.1984	aa		tax				tax
.1985	a5 19		lda $19				lda 	codePtr+1
.1987	69 00		adc #$00			adc 	#0
.1989	a8		tay				tay
.198a	68		pla				pla 								; get count.
.198b	20 84 33	jsr $3384			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.198e	7a		ply				ply 								; go to next token.
.198f	98		tya				tya
.1990	38		sec				sec
.1991	71 18		adc ($18),y			adc 	(codePtr),y
.1993	a8		tay				tay
.1994					_ETMCDExit:
.1994	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1995					EXPUnaryAbs:
.1995	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 					; number to R0
.1998	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.199b	20 23 31	jsr $3123			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.199e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.199f					EXPUnaryNull:
.199f	20 b8 18	jsr $18b8			jsr 	EXPTermValueR0
.19a2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.19a3					EXPUnaryAsc:
.19a3	20 a5 18	jsr $18a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.19a6	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.19a9	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.19ab	f0 06		beq $19b3			beq 	_EXAZero 						; if so return 0
.19ad	5a		phy				phy 									; otherwise get first character
.19ae	a0 01		ldy #$01			ldy 	#1
.19b0	b1 24		lda ($24),y			lda 	(zTemp0),y
.19b2	7a		ply				ply
.19b3					_EXAZero:
.19b3	a2 08		ldx #$08			ldx 	#IFR0
.19b5	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.19b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.19b9					EXPUnaryChr:
.19b9	20 99 18	jsr $1899			jsr 	EXPEvalInteger8 				; expr
.19bc	48		pha				pha 									; push on stack
.19bd	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.19c0	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.19c2	20 38 2b	jsr $2b38			jsr 	StringTempAllocate
.19c5	68		pla				pla 									; get value back
.19c6	20 6d 2b	jsr $2b6d			jsr 	StringTempWrite 				; write to string.
.19c9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.19ca					EXPUnaryDec:
.19ca	20 a5 18	jsr $18a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.19cd	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.19d0	5a		phy				phy 									; save position.
.19d1	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.19d3	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.19d6	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.19d8	f0 3b		beq $1a15			beq 	_EUDError 						; empty string is not legit.
.19da	aa		tax				tax 									; count in X.
.19db	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.19dd					_EUDLoop:
.19dd	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.19df	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.19e1	90 02		bcc $19e5			bcc 	_EUDNoCase
.19e3	e9 20		sbc #$20			sbc 	#$20
.19e5					_EUDNoCase:
.19e5	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.19e7	90 2c		bcc $1a15			bcc 	_EUDError
.19e9	c9 3a		cmp #$3a			cmp 	#'9'+1
.19eb	90 0a		bcc $19f7			bcc 	_EUDOkay
.19ed	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.19ef	90 24		bcc $1a15			bcc 	_EUDError
.19f1	c9 47		cmp #$47			cmp 	#'F'+1
.19f3	b0 20		bcs $1a15			bcs 	_EUDError
.19f5	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.19f7					_EUDOkay:
.19f7	29 0f		and #$0f			and 	#15 							; make constant
.19f9	da		phx				phx
.19fa	48		pha				pha
.19fb	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.19fd	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.1a00	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.1a03	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.1a06	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.1a09	68		pla				pla 									; pop constant and OR in
.1a0a	fa		plx				plx
.1a0b	05 08		ora $08				ora 	IFR0+IM0
.1a0d	85 08		sta $08				sta 	IFR0+IM0
.1a0f	c8		iny				iny 									; next char
.1a10	ca		dex				dex 									; done all characters ?
.1a11	d0 ca		bne $19dd			bne 	_EUDLoop
.1a13	7a		ply				ply
.1a14	60		rts				rts
.1a15					_EUDError:
.1a15	4c 8c 28	jmp $288c		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1a18					EXPUnaryInlineDec:
.1a18	4c 6a 28	jmp $286a		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1a1b					EXPUnaryPeek:
.1a1b	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 				; number to R0
.1a1e	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1a21	b2 08		lda ($08)			lda 	(IFR0) 							; read byte and set it
.1a23	a2 08		ldx #$08			ldx 	#IFR0
.1a25	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.1a28	60		rts				rts
.1a29					EXPUnaryDeek:
.1a29	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 				; number to R0
.1a2c	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1a2f	5a		phy				phy 									; read MSB and push on stack
.1a30	a0 01		ldy #$01			ldy 	#1
.1a32	b1 08		lda ($08),y			lda 	(IFR0),y
.1a34	7a		ply				ply
.1a35	48		pha				pha
.1a36	b2 08		lda ($08)			lda 	(IFR0) 							; set LSB
.1a38	a2 08		ldx #$08			ldx 	#IFR0
.1a3a	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.1a3d	68		pla				pla 									; set MSB
.1a3e	85 09		sta $09				sta 	IFR0+IM1
.1a40	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1a41					EXPUnaryFrac:
.1a41	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 					; number to R0
.1a44	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1a47	20 8b 31	jsr $318b			jsr 	IFloatFractionalR0 				; get fractional bit.
.1a4a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1a4b					EXPUnaryInkey:
.1a4b	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1a4e	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1a50	20 38 2b	jsr $2b38			jsr 	StringTempAllocate
.1a53	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit with the empty string
.1a56	b0 06		bcs $1a5e			bcs 	_EUIExit
.1a58	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it and put it in first character
.1a5b	20 6d 2b	jsr $2b6d			jsr 	StringTempWrite
.1a5e					_EUIExit:
.1a5e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1a5f					EXPUnaryInt:
.1a5f	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 					; number to R0
.1a62	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; check for )
.1a65	20 e1 31	jsr $31e1			jsr 	IFloatIntegerR0 				; force to integer.
.1a68	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1a69					EXPUnaryLen:
.1a69	20 a5 18	jsr $18a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a6c	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1a6f	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.1a71	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1a73	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.1a76	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1a77					EXPUnaryParenthesis:
.1a77	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 					; number to R0
.1a7a	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1a7d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1a7e					EXPUnaryRnd:
.1a7e	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 				; number to R0
.1a81	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 				; )
.1a84	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1a86	20 9d 1a	jsr $1a9d			jsr 	EXPLoadInRandom
.1a89	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1a8b	85 0b		sta $0b				sta 	IFR0+IExp
.1a8d	60		rts				rts
.1a8e					ExpUnaryRand:
.1a8e	20 86 18	jsr $1886			jsr 	EXPEvalInteger 				; integer to R0
.1a91	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 				; )
.1a94	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1a96	20 9d 1a	jsr $1a9d			jsr 	EXPLoadInRandom
.1a99	20 50 30	jsr $3050			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1a9c	60		rts				rts
.1a9d					EXPLoadInRandom:
.1a9d	20 e0 34	jsr $34e0			jsr 	IFloatSetZero 				; zero it
.1aa0	20 b2 1a	jsr $1ab2			jsr 	EXPRandom32 				; do a 23 bit number.
.1aa3	95 00		sta $00,x			sta 	IM0,x
.1aa5	20 b2 1a	jsr $1ab2			jsr 	EXPRandom32
.1aa8	95 01		sta $01,x			sta 	IM1,x
.1aaa	20 b2 1a	jsr $1ab2			jsr 	EXPRandom32
.1aad	29 7f		and #$7f			and 	#$7F
.1aaf	95 02		sta $02,x			sta 	IM2,x
.1ab1	60		rts				rts
.1ab2					EXPRandom32:
.1ab2	5a		phy				phy
.1ab3	a0 08		ldy #$08			ldy 	#8
.1ab5	ad 14 05	lda $0514			lda 	EXPSeed+0
.1ab8	0d 15 05	ora $0515			ora 	EXPSeed+1
.1abb	0d 16 05	ora $0516			ora 	EXPSeed+2
.1abe	0d 17 05	ora $0517			ora 	EXPSeed+3
.1ac1	d0 08		bne $1acb			bne 	_EXPRNoReset
.1ac3	ee 14 05	inc $0514			inc 	EXPSeed+0
.1ac6	a0 10		ldy #$10			ldy 	#16
.1ac8	8c 17 05	sty $0517			sty 	EXPSeed+3
.1acb					_EXPRNoReset:
.1acb	ad 14 05	lda $0514			lda 	EXPSeed+0
.1ace					_EXPRLoop:
.1ace	0a		asl a				asl		a
.1acf	2e 15 05	rol $0515			rol 	EXPSeed+1
.1ad2	2e 16 05	rol $0516			rol 	EXPSeed+2
.1ad5	2e 17 05	rol $0517			rol 	EXPSeed+3
.1ad8	90 02		bcc $1adc			bcc 	_EXPRNoEOR
.1ada	49 c5		eor #$c5			eor 	#$C5
.1adc					_EXPRNoEOR:
.1adc	88		dey				dey
.1add	d0 ef		bne $1ace			bne 	_EXPRLoop
.1adf	8d 14 05	sta $0514			sta 	EXPSeed+0
.1ae2	7a		ply				ply
.1ae3	60		rts				rts
.0514					EXPSeed:
>0514							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1ae4					EXPUnarySgn:
.1ae4	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 					; number to R0
.1ae7	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1aea	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1aec	20 82 34	jsr $3482			jsr 	IFloatCopyToRegister
.1aef	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1af1	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.1af4	a2 0c		ldx #$0c			ldx 	#IFR1
.1af6	20 af 31	jsr $31af			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1af9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1afa					EXPUnarySqr:
.1afa	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 					; number to R0
.1afd	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1b00	20 2b 31	jsr $312b			jsr 	IFloatSquareRootR0 				; square root.
.1b03	b0 01		bcs $1b06			bcs 	_EUSValue 						; error check.
.1b05	60		rts				rts
.1b06					_EUSValue:
.1b06	4c 7b 28	jmp $287b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1b09					EXPUnaryHex:
.1b09	20 86 18	jsr $1886			jsr 	EXPEvalInteger 					; expr
.1b0c	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1b0f	5a		phy				phy
.1b10	a9 10		lda #$10			lda 	#16
.1b12	20 82 32	jsr $3282			jsr 	IFloatIntegerToStringR0
.1b15	80 0a		bra $1b21			bra 	EUSMain
.1b17					EXPUnaryStr:
.1b17	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 					; expr
.1b1a	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1b1d	5a		phy				phy
.1b1e	20 dd 32	jsr $32dd			jsr 	IFloatFloatToStringR0 			; convert to string
.1b21					EUSMain:
.1b21	b0 19		bcs $1b3c			bcs 	_EUSError
.1b23	86 24		stx $24				stx 	zTemp0 							; save string address
.1b25	84 25		sty $25				sty 	zTemp0+1
.1b27	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1b29	20 38 2b	jsr $2b38			jsr 	StringTempAllocate
.1b2c	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1b2e	aa		tax				tax 									; count in X
.1b2f	a0 01		ldy #$01			ldy 	#1
.1b31					_EUSCopy:
.1b31	b1 24		lda ($24),y			lda 	(zTemp0),y
.1b33	c8		iny				iny
.1b34	20 6d 2b	jsr $2b6d			jsr 	StringTempWrite
.1b37	ca		dex				dex
.1b38	d0 f7		bne $1b31			bne	 	_EUSCopy
.1b3a	7a		ply				ply
.1b3b	60		rts				rts
.1b3c					_EUSError:
.1b3c	4c 7b 28	jmp $287b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1b3f					EXPUnaryInlineString:
.1b3f	18		clc				clc 								; physical address -> IM0,1
.1b40	98		tya				tya 								; put the actual address in IM0
.1b41	65 18		adc $18				adc 	codePtr
.1b43	85 08		sta $08				sta 	IFR0+IM0
.1b45	a5 19		lda $19				lda 	codePtr+1
.1b47	69 00		adc #$00			adc 	#0
.1b49	85 09		sta $09				sta 	IFR0+IM1
.1b4b	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1b4d	a9 80		lda #$80			lda 	#$80
.1b4f	85 0b		sta $0b				sta 	IFR0+IExp
.1b51	98		tya				tya	 								; skip over it.
.1b52	38		sec				sec
.1b53	71 18		adc ($18),y			adc 	(codePtr),y
.1b55	a8		tay				tay
.1b56	60		rts				rts
.1b57					_EXPUISRange:
.1b57	4c 7b 28	jmp $287b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1b5a					EXPUnaryLeft:
.1b5a	20 a0 1b	jsr $1ba0			jsr 	EXPCommonStart 					; <string>,
.1b5d	48		pha				pha 									; save string address on stack
.1b5e	da		phx				phx
.1b5f	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1b61	48		pha				pha
.1b62	20 99 18	jsr $1899			jsr 	EXPEvalInteger8 				; characters to do
.1b65	80 44		bra $1bab			bra 	EXPSubstringCommon
.1b67					EXPUnaryRight:
.1b67	20 a0 1b	jsr $1ba0			jsr 	EXPCommonStart 					; <string>,
.1b6a	48		pha				pha 									; save string address on stack
.1b6b	da		phx				phx
.1b6c	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1b6e	48		pha				pha
.1b6f	20 99 18	jsr $1899			jsr 	EXPEvalInteger8 				; characters to do
.1b72	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1b74	68		pla				pla
.1b75	38		sec				sec
.1b76	e5 24		sbc $24				sbc 	zTemp0
.1b78	b0 02		bcs $1b7c			bcs 	_EUROffLeft
.1b7a	a9 00		lda #$00			lda 	#0
.1b7c					_EUROffLeft:
.1b7c	48		pha				pha 									; start pos
.1b7d	a9 ff		lda #$ff			lda 	#255
.1b7f	80 2a		bra $1bab			bra 	EXPSubstringCommon
.1b81					EXPUnaryMid:
.1b81	20 a0 1b	jsr $1ba0			jsr 	EXPCommonStart 					; <string>,
.1b84	48		pha				pha 									; save string address on stack
.1b85	da		phx				phx
.1b86	20 99 18	jsr $1899			jsr 	EXPEvalInteger8 				; characters start
.1b89	f0 12		beq $1b9d			beq 	_EUSError 						; 1 is left
.1b8b	3a		dec a				dec 	a 								; zero based.
.1b8c	48		pha				pha
.1b8d	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1b8f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1b91	f0 04		beq $1b97			beq 	_EUMLength 						; if so m is provided
.1b93	a9 ff		lda #$ff			lda 	#255 							; default m
.1b95	80 14		bra $1bab			bra 	EXPSubstringCommon
.1b97					_EUMLength:
.1b97	c8		iny				iny 									; consume comma
.1b98	20 99 18	jsr $1899			jsr 	EXPEvalInteger8 				; characters to do
.1b9b	80 0e		bra $1bab			bra 	EXPSubstringCommon
.1b9d					_EUSError:
.1b9d	4c 8c 28	jmp $288c		jmp	ErrorV_value
.1ba0					EXPCommonStart:
.1ba0	20 a5 18	jsr $18a5			jsr 	EXPEvalString
.1ba3	20 4b 2a	jsr $2a4b			jsr 	ERRCheckComma
.1ba6	a5 08		lda $08				lda 	IFR0+IM0
.1ba8	a6 09		ldx $09				ldx 	IFR0+IM1
.1baa	60		rts				rts
.1bab					EXPSubstringCommon:
.1bab	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1bad	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; check right bracket.
.1bb0	68		pla				pla 									; start position
.1bb1	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1bb3	fa		plx				plx 									; get string address to zTemp2.
.1bb4	86 29		stx $29				stx 	zTemp2+1
.1bb6	68		pla				pla
.1bb7	85 28		sta $28				sta 	zTemp2
.1bb9	38		sec				sec 									; length - start is the max count of chars
.1bba	b2 28		lda ($28)			lda 	(zTemp2)
.1bbc	e5 27		sbc $27				sbc 	zTemp1+1
.1bbe	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1bc0	b0 02		bcs $1bc4			bcs 	_EXPSSNoTrim
.1bc2	85 26		sta $26				sta 	zTemp1 							; update count with available
.1bc4					_EXPSSNoTrim:
.1bc4	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1bc6	20 38 2b	jsr $2b38			jsr 	StringTempAllocate 				; allocate memory for it.
.1bc9	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1bcb	f0 15		beq $1be2			beq 	_EXPSSExit
.1bcd	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1bcf	d2 28		cmp ($28)			cmp 	(zTemp2)
.1bd1	b0 0f		bcs $1be2			bcs 	_EXPSSExit
.1bd3	5a		phy				phy
.1bd4	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1bd6	c8		iny				iny 									; +1 for the length byte
.1bd7					_EXPSSCopy:
.1bd7	b1 28		lda ($28),y			lda 	(zTemp2),y
.1bd9	20 6d 2b	jsr $2b6d			jsr 	StringTempWrite
.1bdc	c8		iny				iny
.1bdd	c6 26		dec $26				dec 	zTemp1
.1bdf	d0 f6		bne $1bd7			bne 	_EXPSSCopy
.1be1	7a		ply				ply
.1be2					_EXPSSExit:
.1be2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1be3					EXPUnaryVal:
.1be3	20 a5 18	jsr $18a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.1be6	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 					; )
.1be9	20 ed 1b	jsr $1bed			jsr 	VALConversionZTemp0
.1bec	60		rts				rts
.1bed					VALConversionZTemp0:
.1bed	5a		phy				phy
.1bee	18		clc				clc
.1bef	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1bf1	69 01		adc #$01			adc 	#1
.1bf3	aa		tax				tax
.1bf4	a5 25		lda $25				lda 	zTemp0+1
.1bf6	69 00		adc #$00			adc 	#0
.1bf8	a8		tay				tay
.1bf9	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1bfb	20 44 33	jsr $3344			jsr 	IFloatStringToFloatR0 			; do conversion
.1bfe	b0 02		bcs $1c02			bcs 	_EUVError
.1c00	7a		ply				ply
.1c01	60		rts				rts
.1c02					_EUVError:
.1c02	4c 8c 28	jmp $288c		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1c05					AssemblerLookup:
>1c05	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,0,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,0,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,0,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,0,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,0,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,0,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,0,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,0,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,0,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,0,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,0,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,0,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,0,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,0,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,0,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,0
>1c0d	fb 1e 7c 00 4b 1e 7c 00 b8 1e 1e 00 41 1e 7c eb
>1c1d	b9 1e f9 00 41 1e 7c 00 7f 6a 00 00 7a 6a e1 eb
>1c2d	23 6a e1 00 7a 6a e1 00 97 6a 6a 00 7a 6a e1 eb
>1c3d	a6 6a 7d 00 7a 6a e1 00 38 62 00 00 00 62 0b eb
>1c4d	ec 62 0b 00 2e 62 0b 00 c3 62 62 00 00 62 0b eb
>1c5d	bf 62 04 00 00 62 0b 00 42 1d 00 00 3b 1d e7 eb
>1c6d	14 1d e7 00 2e 1d e7 00 d3 1d 1d 00 3b 1d e7 eb
>1c7d	ac 1d 2c 00 2e 1d e7 00 99 22 00 00 3a 22 39 f5
>1c8d	93 7a 54 00 3a 22 39 00 45 22 22 00 3a 22 39 f5
>1c9d	5e 22 66 00 3b 22 3b 00 19 01 18 00 19 01 18 f5
>1cad	c6 01 c5 00 19 01 18 00 55 01 01 00 19 01 18 f5
>1cbd	cc 01 61 00 19 01 18 00 f7 a8 00 00 f7 a8 7d f5
>1ccd	0f a8 92 0c f7 a8 7d 00 75 a8 a8 00 00 a8 7d f5
>1cdd	ba a8 03 31 00 a8 7d 00 f6 48 00 00 f6 48 f9 f5
>1ced	0e 48 dd 00 f6 48 f9 00 8f 48 48 00 00 48 f9 f5
>1cfd	a7 48 2b 00 00 48 f9 00

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1d05					BinaryPrecedence:
>1d05	02					.byte	 2	; $ef =
>1d06	02					.byte	 2	; $f0 <>
>1d07	02					.byte	 2	; $f1 <=
>1d08	02					.byte	 2	; $f2 <
>1d09	02					.byte	 2	; $f3 >=
>1d0a	02					.byte	 2	; $f4 >
>1d0b	01					.byte	 1	; $f5 XOR
>1d0c	01					.byte	 1	; $f6 OR
>1d0d	01					.byte	 1	; $f7 AND
>1d0e	04					.byte	 4	; $f8 DIV
>1d0f	04					.byte	 4	; $f9 MOD
>1d10	04					.byte	 4	; $fa <<
>1d11	04					.byte	 4	; $fb >>
>1d12	04					.byte	 4	; $fc /
>1d13	04					.byte	 4	; $fd *
>1d14	03					.byte	 3	; $fe -
>1d15	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1d16					StructureOffsets:
>1d16	01					.byte	1  	; $80 REPEAT
>1d17	ff					.byte	255	; $81 UNTIL
>1d18	01					.byte	1  	; $82 WHILE
>1d19	ff					.byte	255	; $83 WEND
>1d1a	01					.byte	1  	; $84 IF
>1d1b	ff					.byte	255	; $85 ENDIF
>1d1c	01					.byte	1  	; $86 DO
>1d1d	ff					.byte	255	; $87 LOOP
>1d1e	01					.byte	1  	; $88 PROC
>1d1f	ff					.byte	255	; $89 ENDPROC
>1d20	01					.byte	1  	; $8a FOR
>1d21	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1d22					StandardTokens:
>1d22	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1d29	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1d2f	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1d35	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1d3a	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1d3d	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1d43	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1d46	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1d4b	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1d50	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1d58	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1d5c	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1d61	00					.byte	$00                                     	; $8c [[end]]
>1d62	00					.byte	$00                                     	; $8d [[shift]]
>1d63	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1d68	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1d6d	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1d70	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1d75	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1d79	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1d7f	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1d85	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1d8a	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1d8e	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1d92	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1d97	01 2c					.byte	$01,$2c                                 	; $99 ,
>1d99	01 3b					.byte	$01,$3b                                 	; $9a ;
>1d9b	01 3a					.byte	$01,$3a                                 	; $9b :
>1d9d	01 27					.byte	$01,$27                                 	; $9c '
>1d9f	01 29					.byte	$01,$29                                 	; $9d )
>1da1	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1da6	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1dab	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1db0	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1db5	01 5b					.byte	$01,$5b                                 	; $a2 [
>1db7	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1db9	01 23					.byte	$01,$23                                 	; $a4 #
>1dbb	01 2e					.byte	$01,$2e                                 	; $a5 .
>1dbd	00					.byte	0											; $a6
>1dbe	00					.byte	0											; $a7
>1dbf	00					.byte	0											; $a8
>1dc0	00					.byte	0											; $a9
>1dc1	00					.byte	0											; $aa
>1dc2	00					.byte	0											; $ab
>1dc3	00					.byte	0											; $ac
>1dc4	00					.byte	0											; $ad
>1dc5	00					.byte	0											; $ae
>1dc6	00					.byte	0											; $af
>1dc7	00					.byte	0											; $b0
>1dc8	00					.byte	0											; $b1
>1dc9	00					.byte	0											; $b2
>1dca	00					.byte	0											; $b3
>1dcb	00					.byte	0											; $b4
>1dcc	00					.byte	0											; $b5
>1dcd	00					.byte	0											; $b6
>1dce	00					.byte	0											; $b7
>1dcf	00					.byte	0											; $b8
>1dd0	00					.byte	0											; $b9
>1dd1	00					.byte	0											; $ba
>1dd2	00					.byte	0											; $bb
>1dd3	00					.byte	0											; $bc
>1dd4	00					.byte	0											; $bd
>1dd5	00					.byte	0											; $be
>1dd6	00					.byte	0											; $bf
>1dd7	00					.byte	0											; $c0
>1dd8	00					.byte	0											; $c1
>1dd9	00					.byte	0											; $c2
>1dda	00					.byte	0											; $c3
>1ddb	00					.byte	0											; $c4
>1ddc	00					.byte	0											; $c5
>1ddd	00					.byte	0											; $c6
>1dde	00					.byte	0											; $c7
>1ddf	00					.byte	0											; $c8
>1de0	00					.byte	0											; $c9
>1de1	00					.byte	0											; $ca
>1de2	00					.byte	0											; $cb
>1de3	00					.byte	0											; $cc
>1de4	00					.byte	0											; $cd
>1de5	00					.byte	0											; $ce
>1de6	00					.byte	0											; $cf
>1de7	00					.byte	0											; $d0
>1de8	00					.byte	0											; $d1
>1de9	00					.byte	0											; $d2
>1dea	00					.byte	0											; $d3
>1deb	00					.byte	0											; $d4
>1dec	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1df2	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1df8	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1e00	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1e07	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1e0d	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1e13	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1e18	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1e1d	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1e22	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1e27	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1e2c	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1e32	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1e37	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1e3f	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1e46	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1e4b	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1e50	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1e56	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1e5b	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1e61	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1e66	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1e6c	01 28					.byte	$01,$28                                 	; $eb (
>1e6e	01 26					.byte	$01,$26                                 	; $ec &
>1e70	00					.byte	$00                                     	; $ed [[decimal]]
>1e71	00					.byte	$00                                     	; $ee [[string]]
>1e72	01 3d					.byte	$01,$3d                                 	; $ef =
>1e74	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1e77	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1e7a	01 3c					.byte	$01,$3c                                 	; $f2 <
>1e7c	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1e7f	01 3e					.byte	$01,$3e                                 	; $f4 >
>1e81	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1e85	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1e88	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1e8c	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1e90	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1e94	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1e97	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1e9a	01 2f					.byte	$01,$2f                                 	; $fc /
>1e9c	01 2a					.byte	$01,$2a                                 	; $fd *
>1e9e	01 2d					.byte	$01,$2d                                 	; $fe -
>1ea0	01 2b					.byte	$01,$2b                                 	; $ff +
>1ea2	ff					.byte	$FF
.1ea3					AlternateTokens:
>1ea3	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1ea9	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1ead	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1eb1	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1eb6	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1eba	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1ec1	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1ec6	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1ecb	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1ed0	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1ed6	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1edb	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1ee2	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1eea	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1eee	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>1ef2	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>1ef8	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8d90 renumber
>1f00	52
>1f01	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1f02					VectorTable:
>1f02	5a 27					.word	Command_REPEAT           ; $80 REPEAT
>1f04	63 27					.word	Command_UNTIL            ; $81 UNTIL
>1f06	3d 28					.word	Command_WHILE            ; $82 WHILE
>1f08	5e 28					.word	Command_WEND             ; $83 WEND
>1f0a	30 27					.word	IfCommand                ; $84 IF
>1f0c	59 27					.word	EndIf                    ; $85 ENDIF
>1f0e	b2 25					.word	Command_DO               ; $86 DO
>1f10	ca 25					.word	Command_LOOP             ; $87 LOOP
>1f12	bb 16					.word	NoExec08                 ; $88 PROC
>1f14	a6 25					.word	Command_ENDPROC          ; $89 ENDPROC
>1f16	d3 25					.word	Command_FOR              ; $8a FOR
>1f18	60 26					.word	Command_NEXT             ; $8b NEXT
>1f1a	3c 16					.word	RUNEndOfLine             ; $8c [[END]]
>1f1c	98 16					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1f1e	52 27					.word	ElseCode                 ; $8e ELSE
>1f20	bb 16					.word	NoExec01                 ; $8f THEN
>1f22	bb 16					.word	NoExec02                 ; $90 TO
>1f24	bb 16					.word	NoExec03                 ; $91 STEP
>1f26	e3 13					.word	CommandLET               ; $92 LET
>1f28	38 13					.word	Command_Print            ; $93 PRINT
>1f2a	31 13					.word	Command_Input            ; $94 INPUT
>1f2c	6a 25					.word	Command_CALL             ; $95 CALL
>1f2e	a6 16					.word	Command_Sys              ; $96 SYS
>1f30	b1 15					.word	Command_REM              ; $97 REM
>1f32	bb 25					.word	Command_EXIT             ; $98 EXIT
>1f34	bb 16					.word	NoExec04                 ; $99 ,
>1f36	bb 16					.word	NoExec05                 ; $9a ;
>1f38	bb 16					.word	NoExec06                 ; $9b :
>1f3a	b1 15					.word	Command_REM2             ; $9c '
>1f3c	bb 16					.word	NoExec07                 ; $9d )
>1f3e	da 12					.word	Command_Poke             ; $9e POKE
>1f40	d7 12					.word	Command_Doke             ; $9f DOKE
>1f42	3d 15					.word	Command_READ             ; $a0 READ
>1f44	a4 15					.word	Command_DATA             ; $a1 DATA
>1f46	15 10					.word	Command_AssemblerStart   ; $a2 [
>1f48	b6 2c					.word	NotImplemented           ; $a3 ]
>1f4a	b6 2c					.word	NotImplemented           ; $a4 #
>1f4c	b6 2c					.word	NotImplemented           ; $a5 .
>1f4e	b6 2c					.word	NotImplemented           ; $a6
>1f50	b6 2c					.word	NotImplemented           ; $a7
>1f52	b6 2c					.word	NotImplemented           ; $a8
>1f54	b6 2c					.word	NotImplemented           ; $a9
>1f56	b6 2c					.word	NotImplemented           ; $aa
>1f58	b6 2c					.word	NotImplemented           ; $ab
>1f5a	b6 2c					.word	NotImplemented           ; $ac
>1f5c	b6 2c					.word	NotImplemented           ; $ad
>1f5e	b6 2c					.word	NotImplemented           ; $ae
>1f60	b6 2c					.word	NotImplemented           ; $af
>1f62	b6 2c					.word	NotImplemented           ; $b0
>1f64	b6 2c					.word	NotImplemented           ; $b1
>1f66	b6 2c					.word	NotImplemented           ; $b2
>1f68	b6 2c					.word	NotImplemented           ; $b3
>1f6a	b6 2c					.word	NotImplemented           ; $b4
>1f6c	b6 2c					.word	NotImplemented           ; $b5
>1f6e	b6 2c					.word	NotImplemented           ; $b6
>1f70	b6 2c					.word	NotImplemented           ; $b7
>1f72	b6 2c					.word	NotImplemented           ; $b8
>1f74	b6 2c					.word	NotImplemented           ; $b9
>1f76	b6 2c					.word	NotImplemented           ; $ba
>1f78	b6 2c					.word	NotImplemented           ; $bb
>1f7a	b6 2c					.word	NotImplemented           ; $bc
>1f7c	b6 2c					.word	NotImplemented           ; $bd
>1f7e	b6 2c					.word	NotImplemented           ; $be
>1f80	b6 2c					.word	NotImplemented           ; $bf
>1f82	b6 2c					.word	NotImplemented           ; $c0
>1f84	b6 2c					.word	NotImplemented           ; $c1
>1f86	b6 2c					.word	NotImplemented           ; $c2
>1f88	b6 2c					.word	NotImplemented           ; $c3
>1f8a	b6 2c					.word	NotImplemented           ; $c4
>1f8c	b6 2c					.word	NotImplemented           ; $c5
>1f8e	b6 2c					.word	NotImplemented           ; $c6
>1f90	b6 2c					.word	NotImplemented           ; $c7
>1f92	b6 2c					.word	NotImplemented           ; $c8
>1f94	b6 2c					.word	NotImplemented           ; $c9
>1f96	b6 2c					.word	NotImplemented           ; $ca
>1f98	b6 2c					.word	NotImplemented           ; $cb
>1f9a	b6 2c					.word	NotImplemented           ; $cc
>1f9c	b6 2c					.word	NotImplemented           ; $cd
>1f9e	b6 2c					.word	NotImplemented           ; $ce
>1fa0	b6 2c					.word	NotImplemented           ; $cf
>1fa2	b6 2c					.word	NotImplemented           ; $d0
>1fa4	b6 2c					.word	NotImplemented           ; $d1
>1fa6	b6 2c					.word	NotImplemented           ; $d2
>1fa8	b6 2c					.word	NotImplemented           ; $d3
>1faa	b6 2c					.word	NotImplemented           ; $d4
>1fac	29 1a					.word	EXPUnaryDeek             ; $d5 DEEK(
>1fae	1b 1a					.word	EXPUnaryPeek             ; $d6 PEEK(
>1fb0	67 1b					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1fb2	5a 1b					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1fb4	81 1b					.word	EXPUnaryMid              ; $d9 MID$(
>1fb6	17 1b					.word	EXPUnaryStr              ; $da STR$(
>1fb8	e3 1b					.word	EXPUnaryVal              ; $db VAL(
>1fba	e4 1a					.word	EXPUnarySgn              ; $dc SGN(
>1fbc	95 19					.word	EXPUnaryAbs              ; $dd ABS(
>1fbe	69 1a					.word	EXPUnaryLen              ; $de LEN(
>1fc0	fa 1a					.word	EXPUnarySqr              ; $df SQR(
>1fc2	b9 19					.word	EXPUnaryChr              ; $e0 CHR$(
>1fc4	a3 19					.word	EXPUnaryAsc              ; $e1 ASC(
>1fc6	4b 1a					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1fc8	b6 2c					.word	NotImplemented           ; $e3 EVENT(
>1fca	b6 2c					.word	NotImplemented           ; $e4 TIME
>1fcc	5f 1a					.word	EXPUnaryInt              ; $e5 INT(
>1fce	41 1a					.word	EXPUnaryFrac             ; $e6 FRAC(
>1fd0	ca 19					.word	EXPUnaryDec              ; $e7 DEC(
>1fd2	09 1b					.word	EXPUnaryHex              ; $e8 HEX$(
>1fd4	7e 1a					.word	EXPUnaryRnd              ; $e9 RND(
>1fd6	8e 1a					.word	ExpUnaryRand             ; $ea RAND(
>1fd8	77 1a					.word	EXPUnaryParenthesis      ; $eb (
>1fda	9f 19					.word	EXPUnaryNull             ; $ec &
>1fdc	18 1a					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1fde	3f 1b					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1fe0	78 17					.word	EXPCompareEqual          ; $ef =
>1fe2	93 17					.word	EXPCompareNotEqual       ; $f0 <>
>1fe4	9c 17					.word	EXPCompareLessEqual      ; $f1 <=
>1fe6	81 17					.word	EXPCompareLess           ; $f2 <
>1fe8	a5 17					.word	EXPCompareGreaterEqual   ; $f3 >=
>1fea	8a 17					.word	EXPCompareGreater        ; $f4 >
>1fec	25 17					.word	EXPBinXor                ; $f5 XOR
>1fee	19 17					.word	EXPBinOr                 ; $f6 OR
>1ff0	0d 17					.word	EXPBinAnd                ; $f7 AND
>1ff2	e5 16					.word	EXPBinIDiv               ; $f8 DIV
>1ff4	f6 16					.word	EXPBinIMod               ; $f9 MOD
>1ff6	f0 17					.word	EXPBinLeft               ; $fa <<
>1ff8	f8 17					.word	EXPBinRight              ; $fb >>
>1ffa	d9 16					.word	EXPBinFDiv               ; $fc /
>1ffc	d0 16					.word	EXPBinMul                ; $fd *
>1ffe	c7 16					.word	EXPBinSub                ; $fe -
>2000	be 16					.word	EXPBinAdd                ; $ff +
.2002					AlternateVectorTable:
>2002	47 11					.word	Command_CLEAR            ; $8d80 CLEAR
>2004	34 15					.word	Command_NEW              ; $8d81 NEW
>2006	30 16					.word	Command_RUN              ; $8d82 RUN
>2008	a3 16					.word	Command_STOP             ; $8d83 STOP
>200a	a0 16					.word	Command_END              ; $8d84 END
>200c	39 11					.word	Command_ASSERT           ; $8d85 ASSERT
>200e	5d 14					.word	Command_LIST             ; $8d86 LIST
>2010	24 2c					.word	Command_SAVE             ; $8d87 SAVE
>2012	e3 2b					.word	Command_LOAD             ; $8d88 LOAD
>2014	16 27					.word	Command_GOSUB            ; $8d89 GOSUB
>2016	01 13					.word	Command_GOTO             ; $8d8a GOTO
>2018	24 27					.word	Command_RETURN           ; $8d8b RETURN
>201a	02 16					.word	Command_RESTORE          ; $8d8c RESTORE
>201c	bb 11					.word	CommandDIM               ; $8d8d DIM
>201e	7a 2b					.word	Command_DIR              ; $8d8e DIR
>2020	b7 2b					.word	Command_ERASE            ; $8d8f ERASE
>2022	be 15					.word	Command_RENUMBER         ; $8d90 RENUMBER

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.2024					TOKDetokenise:
.2024	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.2026	84 29		sty $29				sty 	zTemp2+1
.2028	9c 1a 05	stz $051a			stz		TOKLastCharacter 			; clear last character
.202b					_TOKDLoop:
.202b	20 70 20	jsr $2070			jsr 	TOKDGet 					; get next
.202e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.2030	f0 3c		beq $206e			beq 	_TOKDExit
.2032	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.2034	f0 33		beq $2069			beq 	_TOKDDataItem
.2036	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.2038	f0 2f		beq $2069			beq 	_TOKDDataItem
.203a	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.203c	f0 19		beq $2057			beq 	_TOKAmpersand
.203e	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.2040	10 05		bpl $2047			bpl 	_TOKDNotToken
.2042	20 36 21	jsr $2136			jsr 	TOKDToken 					; token to text.
.2045	80 e4		bra $202b			bra 	_TOKDLoop
.2047					_TOKDNotToken:
.2047	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.2049	90 05		bcc $2050			bcc 	_TOKDNotIdentifier
.204b	20 ad 20	jsr $20ad			jsr 	TOKDIdentifier
.204e	80 db		bra $202b			bra 	_TOKDLoop
.2050					_TOKDNotIdentifier:
.2050	a0 0a		ldy #$0a			ldy 	#10
.2052	20 f0 20	jsr $20f0			jsr 	TOKDInteger
.2055	80 d4		bra $202b			bra 	_TOKDLoop
.2057					_TOKAmpersand:
.2057	20 78 21	jsr $2178			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.205a	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.205c	20 79 20	jsr $2079			jsr 	TOKDOutput
.205f	20 70 20	jsr $2070			jsr 	TOKDGet 					; get first char of integer
.2062	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.2064	20 f0 20	jsr $20f0			jsr 	TOKDInteger
.2067	80 c2		bra $202b			bra 	_TOKDLoop
.2069					_TOKDDataItem:
.2069	20 86 20	jsr $2086			jsr 	TOKDDataItem
.206c	80 bd		bra $202b			bra 	_TOKDLoop
.206e					_TOKDExit:
.206e	18		clc				clc
.206f	60		rts				rts
.2070	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.2072	e6 28		inc $28				inc 	zTemp2
.2074	d0 02		bne $2078			bne 	_TKDGExit
.2076	e6 29		inc $29				inc 	zTemp2+1
.2078					_TKDGExit:
.2078	60		rts				rts
.2079					TOKDOutput:
.2079	8d 1a 05	sta $051a			sta 	TOKLastCharacter
.207c	6c 18 05	jmp ($0518)			jmp 	(TOKOutputMethod)
.207f					TOKSetDetokeniseOutput:
.207f	8e 18 05	stx $0518			stx 	TOKOutputMethod
.2082	8c 19 05	sty $0519			sty 	TOKOutputMethod+1
.2085	60		rts				rts
.0518					TOKOutputMethod:
>0518							.fill 	2
.051a					TOKLastCharacter:
>051a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.2086					TOKDDataItem:
.2086	a8		tay				tay 								; type in Y
.2087	a9 22		lda #$22			lda 	#'"'						; start with " or .
.2089	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.208b	f0 02		beq $208f			beq 	_TOKDDIsString
.208d	a9 2e		lda #$2e			lda 	#'.'
.208f					_TOKDDIsString:
.208f	20 79 20	jsr $2079			jsr 	TOKDOutput 					; dump it
.2092	20 70 20	jsr $2070			jsr 	TOKDGet 					; get length into X
.2095	aa		tax				tax
.2096					_TOKDDOutput:
.2096	ca		dex				dex 								; are we complete
.2097	e0 ff		cpx #$ff			cpx 	#255
.2099	f0 08		beq $20a3			beq 	_TOKDDEnd
.209b	20 70 20	jsr $2070			jsr 	TOKDGet 					; get character and output it
.209e	20 79 20	jsr $2079			jsr 	TOKDOutput
.20a1	80 f3		bra $2096			bra 	_TOKDDOutput
.20a3					_TOKDDEnd:
.20a3	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.20a5	d0 05		bne $20ac			bne 	_TOKDDNotString
.20a7	a9 22		lda #$22			lda 	#'"'
.20a9	20 79 20	jsr $2079			jsr 	TOKDOutput
.20ac					_TOKDDNotString:
.20ac	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.20ad					TOKDIdentifier:
.20ad	a0 ff		ldy #$ff			ldy 	#$FF
.20af	8c 1b 05	sty $051b			sty 	TOKDIFirstChar
.20b2					_TOKDLoop:
.20b2	a8		tay				tay 								; token in Y
.20b3	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.20b5	c0 64		cpy #$64			cpy 	#$64
.20b7	f0 0b		beq $20c4			beq 	_TOKDIOutput
.20b9	98		tya				tya 								; handle a-z
.20ba	18		clc				clc
.20bb	69 21		adc #$21			adc	 	#$21
.20bd	c0 5a		cpy #$5a			cpy 	#$5A
.20bf	90 03		bcc $20c4			bcc 	_TOKDIOutput
.20c1	38		sec				sec 								; handle 0-9
.20c2	e9 4b		sbc #$4b			sbc 	#$4B
.20c4					_TOKDIOutput:
.20c4	2c 1b 05	bit $051b			bit 	TOKDIFirstChar
.20c7	10 08		bpl $20d1			bpl 	_TOKDINoSpacing
.20c9	48		pha				pha
.20ca	20 73 21	jsr $2173			jsr 	TOKDSpacing
.20cd	9c 1b 05	stz $051b			stz 	TOKDIFirstChar
.20d0	68		pla				pla
.20d1					_TOKDINoSpacing:
.20d1	20 79 20	jsr $2079			jsr 	TOKDOutput
.20d4	20 70 20	jsr $2070			jsr 	TOKDGet 					; get next token
.20d7	c9 7c		cmp #$7c			cmp 	#$7C
.20d9	90 d7		bcc $20b2			bcc 	_TOKDLoop
.20db	f0 12		beq $20ef			beq 	_TOKDIExit 					; it's a number, no tail.
.20dd	4a		lsr a				lsr 	a 							; string ?
.20de	90 07		bcc $20e7			bcc 	_TOKDICheckArray
.20e0	48		pha				pha
.20e1	a9 24		lda #$24			lda 	#"$"
.20e3	20 79 20	jsr $2079			jsr 	TOKDOutput
.20e6	68		pla				pla
.20e7					_TOKDICheckArray:
.20e7	4a		lsr a				lsr 	a 							; array ?
.20e8	90 05		bcc $20ef			bcc 	_TOKDIExit
.20ea	a9 28		lda #$28			lda 	#"("
.20ec	20 79 20	jsr $2079			jsr 	TOKDOutput
.20ef					_TOKDIExit:
.20ef	60		rts				rts
.051b					TOKDIFirstChar:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.20f0					TOKDInteger:
.20f0	5a		phy				phy 								; save base
.20f1	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.20f3	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.20f6					_TOKDILoop:
.20f6	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F
.20f8	c9 40		cmp #$40			cmp 	#$40
.20fa	b0 1d		bcs $2119			bcs 	_TOKDIHaveInteger
.20fc	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.20fe	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.2101	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.2104	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.2107	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.210a	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.210d	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.2110	20 70 20	jsr $2070			jsr 	TOKDGet 					; OR byte in.
.2113	05 08		ora $08				ora 	IFR0+IM0
.2115	85 08		sta $08				sta 	IFR0+IM0
.2117	80 dd		bra $20f6			bra 	_TOKDILoop
.2119					_TOKDIHaveInteger:
.2119	7a		ply				ply 								; restore base
.211a	98		tya				tya 								; base in A
.211b	20 82 32	jsr $3282			jsr 	IFloatIntegerToStringR0
.211e	86 24		stx $24				stx 	zTemp0
.2120	84 25		sty $25				sty 	zTemp0+1
.2122	b2 24		lda ($24)			lda 	(zTemp0)
.2124	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.2126	b1 24		lda ($24),y			lda 	(zTemp0),y
.2128	20 73 21	jsr $2173			jsr 	TOKDSpacing 				; check spacing okay.
.212b					_TOKDOutput:
.212b	b1 24		lda ($24),y			lda 	(zTemp0),y
.212d	20 79 20	jsr $2079			jsr 	TOKDOutput
.2130	c8		iny				iny
.2131	b1 24		lda ($24),y			lda 	(zTemp0),y
.2133	d0 f6		bne $212b			bne 	_TOKDOutput
.2135	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.2136					TOKDToken:
.2136	a2 22		ldx #$22			ldx 	#StandardTokens & $FF 		; standard table
.2138	a0 1d		ldy #$1d			ldy 	#StandardTokens >> 8
.213a	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.213c	d0 07		bne $2145			bne 	_TOKDSearch
.213e	20 70 20	jsr $2070			jsr 	TOKDGet 					; get next
.2141	a2 a3		ldx #$a3			ldx 	#AlternateTokens & $FF 		; alt table
.2143	a0 1e		ldy #$1e			ldy 	#AlternateTokens >> 8
.2145					_TOKDSearch:
.2145	86 24		stx $24				stx 	zTemp0 						; put table in zTemp0
.2147	84 25		sty $25				sty 	zTemp0+1
.2149	aa		tax				tax 								; token ID in X.
.214a					_TOKDFind:
.214a	ca		dex				dex 								; reached the start
.214b	10 0d		bpl $215a			bpl 	_TOKDFound
.214d	38		sec				sec 								; go to next entry
.214e	b2 24		lda ($24)			lda 	(zTemp0)
.2150	65 24		adc $24				adc 	zTemp0
.2152	85 24		sta $24				sta 	zTemp0
.2154	90 f4		bcc $214a			bcc 	_TOKDFind
.2156	e6 25		inc $25				inc 	zTemp0+1
.2158	80 f0		bra $214a			bra 	_TOKDFind
.215a					_TOKDFound:
.215a	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X
.215c	f0 14		beq $2172			beq 	_TOKDExit
.215e	aa		tax				tax
.215f	a0 01		ldy #$01			ldy 	#1 							; output the token.
.2161	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.2163	20 73 21	jsr $2173			jsr 	TOKDSpacing
.2166					_TOKDOutput:
.2166	b1 24		lda ($24),y			lda 	(zTemp0),y
.2168	20 29 25	jsr $2529			jsr 	TOKToLower
.216b	20 79 20	jsr $2079			jsr 	TOKDOutput
.216e	c8		iny				iny
.216f	ca		dex				dex
.2170	d0 f4		bne $2166			bne 	_TOKDOutput
.2172					_TOKDExit:
.2172	60		rts				rts
.2173					TOKDSpacing:
.2173	20 40 25	jsr $2540			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.2176	90 0d		bcc $2185			bcc 	TOKDSExit
.2178					TOKDSpaceLastAlpha:
.2178	ad 1a 05	lda $051a			lda 	TOKLastCharacter			; and last character also alphanumeric
.217b	20 40 25	jsr $2540			jsr 	TOKIsIdentifierElement
.217e	90 05		bcc $2185			bcc 	TOKDSExit
.2180	a9 20		lda #$20			lda 	#" " 						; we need a space.
.2182	20 79 20	jsr $2079			jsr 	TOKDOutput
.2185					TOKDSExit:
.2185	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.2186					PGMDeleteLine:
.2186	20 39 22	jsr $2239			jsr 	PGMEndProgram 				; end of program into zTemp0
.2189	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.218b	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.218e	85 27		sta $27				sta 	zTemp1+1
.2190					_PGMDLoop:
.2190	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.2192	38		sec				sec
.2193	f0 3a		beq $21cf			beq 	_PGMDExit
.2195	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.2197	b1 26		lda ($26),y			lda 	(zTemp1),y
.2199	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.219c	d0 08		bne $21a6			bne 	_PGMDNext
.219e	c8		iny				iny
.219f	b1 26		lda ($26),y			lda 	(zTemp1),y
.21a1	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.21a4	f0 0d		beq $21b3			beq 	_PGMDDelete
.21a6					_PGMDNext:
.21a6	18		clc				clc
.21a7	b2 26		lda ($26)			lda 	(zTemp1)
.21a9	65 26		adc $26				adc 	zTemp1
.21ab	85 26		sta $26				sta 	zTemp1
.21ad	90 e1		bcc $2190			bcc 	_PGMDLoop
.21af	e6 27		inc $27				inc 	zTemp1+1
.21b1	80 dd		bra $2190			bra 	_PGMDLoop
.21b3					_PGMDDelete:
.21b3	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.21b5	a8		tay				tay
.21b6					_PGMDCopy:
.21b6	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.21b8	92 26		sta ($26)			sta 	(zTemp1)
.21ba	a5 26		lda $26				lda 	zTemp1 						; reached the end ?
.21bc	c5 24		cmp $24				cmp 	zTemp0
.21be	d0 07		bne $21c7			bne 	_PGMDNext2
.21c0	a5 27		lda $27				lda 	zTemp1+1
.21c2	c5 25		cmp $25				cmp 	zTemp0+1
.21c4	18		clc				clc
.21c5	f0 08		beq $21cf			beq 	_PGMDExit
.21c7					_PGMDNext2:
.21c7	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.21c9	d0 eb		bne $21b6			bne 	_PGMDCopy
.21cb	e6 27		inc $27				inc 	zTemp1+1
.21cd	80 e7		bra $21b6			bra 	_PGMDCopy
.21cf					_PGMDExit:
.21cf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.21d0					PGMInsertLine:
.21d0	20 39 22	jsr $2239			jsr 	PGMEndProgram 				; end of program into zTemp0
.21d3	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.21d5	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.21d8	85 27		sta $27				sta 	zTemp1+1
.21da					_PGMILoop:
.21da	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.21dc	f0 1c		beq $21fa			beq 	_PGMIInsert
.21de	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.21e0	b1 26		lda ($26),y			lda 	(zTemp1),y
.21e2	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.21e5	c8		iny				iny
.21e6	b1 26		lda ($26),y			lda 	(zTemp1),y
.21e8	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.21eb	b0 0d		bcs $21fa			bcs 	_PGMIInsert 				; insert here.
.21ed	18		clc				clc
.21ee	b2 26		lda ($26)			lda 	(zTemp1)
.21f0	65 26		adc $26				adc 	zTemp1
.21f2	85 26		sta $26				sta 	zTemp1
.21f4	90 e4		bcc $21da			bcc 	_PGMILoop
.21f6	e6 27		inc $27				inc 	zTemp1+1
.21f8	80 e0		bra $21da			bra 	_PGMILoop
.21fa					_PGMIInsert:
.21fa	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.21fd					_PGMIInsertLoop:
.21fd	b2 24		lda ($24)			lda 	(zTemp0)
.21ff	91 24		sta ($24),y			sta 	(zTemp0),y
.2201	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.2203	c5 24		cmp $24				cmp 	zTemp0
.2205	d0 06		bne $220d			bne 	_PGMINext
.2207	a5 27		lda $27				lda 	zTemp1+1
.2209	c5 25		cmp $25				cmp 	zTemp0+1
.220b	f0 0a		beq $2217			beq 	_PGMIInserted
.220d					_PGMINext:
.220d	a5 24		lda $24				lda 	zTemp0
.220f	d0 02		bne $2213			bne 	_PGMINoBorrow
.2211	c6 25		dec $25				dec 	zTemp0+1
.2213					_PGMINoBorrow:
.2213	c6 24		dec $24				dec 	zTemp0
.2215	80 e6		bra $21fd			bra 	_PGMIInsertLoop
.2217					_PGMIInserted:
.2217	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.2219					_PGMICopyLoop:
.2219	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.221c	91 26		sta ($26),y			sta 	(zTemp1),y
.221e	c8		iny				iny
.221f	cc 00 04	cpy $0400			cpy 	TOKLineSize
.2222	d0 f5		bne $2219			bne 	_PGMICopyLoop
.2224	18		clc				clc
.2225	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.2226					PGMSetBaseAddress:
.2226	8e 1c 05	stx $051c			stx 	PGMBaseHigh 				; use memory from here
.2229	8c 1d 05	sty $051d			sty 	PGMEndMemoryHigh 			; to here.
.222c	60		rts				rts
.222d					PGMNewProgram:
.222d	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.222f	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.2232	85 25		sta $25				sta 	zTemp0+1
.2234	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.2236	92 24		sta ($24)			sta 	(zTemp0)
.2238	60		rts				rts
.2239					PGMEndProgram:
.2239	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.223b	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.223e	85 25		sta $25				sta 	zTemp0+1
.2240					_PGMEPLoop:
.2240	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.2242	f0 0b		beq $224f			beq 	_PGMEPExit
.2244	18		clc				clc 								; no, advance to next
.2245	65 24		adc $24				adc 	zTemp0
.2247	85 24		sta $24				sta 	zTemp0
.2249	90 f5		bcc $2240			bcc 	_PGMEPLoop
.224b	e6 25		inc $25				inc 	zTemp0+1
.224d	80 f1		bra $2240			bra 	_PGMEPLoop
.224f					_PGMEPExit:
.224f	60		rts				rts
.051c					PGMBaseHigh:
>051c							.fill 	1
.051d					PGMEndMemoryHigh:
>051d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.2250					TOKResetElement:
.2250	9c 1e 05	stz $051e			stz 	TOKElement
.2253	60		rts				rts
.2254					TOKWriteElement:
.2254	da		phx				phx
.2255	ae 1e 05	ldx $051e			ldx 	TOKElement
.2258	9d 1f 05	sta $051f,x			sta 	TOKElementText,x
.225b	9e 20 05	stz $0520,x			stz 	TOKElementText+1,x
.225e	fa		plx				plx
.225f	ee 1e 05	inc $051e			inc 	TOKElement
.2262	60		rts				rts
.051e					TOKElement:
>051e							.fill 	1
.051f					TOKElementText:
>051f							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.2263					TOKTokeniseConstant:
.2263	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.2265	48		pha				pha 								; save on stack
.2266	29 c0		and #$c0			and 	#$C0
.2268	05 09		ora $09				ora 	IFR0+IM1
.226a	05 0a		ora $0a				ora 	IFR0+IM2
.226c	f0 10		beq $227e			beq 	_TTCLess
.226e	da		phx				phx
.226f	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.2271					_TTCShiftRight:
.2271	46 0a		lsr $0a				lsr 	IFR0+IM2
.2273	66 09		ror $09				ror 	IFR0+IM1
.2275	66 08		ror $08				ror 	IFR0+IM0
.2277	ca		dex				dex
.2278	d0 f7		bne $2271			bne 	_TTCShiftRight
.227a	fa		plx				plx
.227b	20 63 22	jsr $2263			jsr 	TOKTokeniseConstant
.227e					_TTCLess:
.227e	68		pla				pla
.227f	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.2281	20 21 23	jsr $2321			jsr 	TOKWriteA
.2284	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.2285					TOKTokeniseDecimals:
.2285	20 34 23	jsr $2334			jsr 	TOKGetNext 					; consume the .
.2288	20 ad 24	jsr $24ad			jsr 	TOKExtractInteger 			; pull an integer out as text.
.228b	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.228d	20 21 23	jsr $2321			jsr 	TOKWriteA
.2290	20 95 22	jsr $2295			jsr 	TOKOutputElementBuffer 		; then the buffer
.2293	18		clc				clc
.2294	60		rts				rts
.2295					TOKOutputElementBuffer:
.2295	ad 1e 05	lda $051e			lda 	TOKElement 					; get count and write that
.2298	20 21 23	jsr $2321			jsr 	TOKWriteA
.229b	a8		tay				tay 								; put in Y
.229c	f0 0c		beq $22aa			beq 	_TOEExit 					; exit if empty which is okay.
.229e	a2 01		ldx #$01			ldx 	#1
.22a0					_TOELoop:
.22a0	bd 1e 05	lda $051e,x			lda 	TOKElement,x
.22a3	20 21 23	jsr $2321			jsr 	TOKWriteA
.22a6	e8		inx				inx
.22a7	88		dey				dey
.22a8	d0 f6		bne $22a0			bne 	_TOELoop
.22aa					_TOEExit:
.22aa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.22ab					TOKTokenise:
.22ab	8c 1f 06	sty $061f			sty 	TOKDataSource+1 			; save source routine pointer
.22ae	8e 1e 06	stx $061e			stx 	TOKDataSource
.22b1	a9 01		lda #$01			lda 	#1 							; set first element flag.
.22b3	8d 20 06	sta $0620			sta 	TOKIsFirstElement
.22b6	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.22b8	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.22bb	9c 01 04	stz $0401			stz 	TOKLineNumber
.22be	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.22c1					_TOKMainLoop:
.22c1	20 30 23	jsr $2330			jsr 	TOKGet 						; what follows.
.22c4	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.22c6	f0 50		beq $2318			beq 	_TOKExit
.22c8	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.22ca	d0 05		bne $22d1			bne 	_TOKElement
.22cc	20 34 23	jsr $2334			jsr 	TOKGetNext
.22cf	80 f0		bra $22c1			bra 	_TOKMainLoop
.22d1					_TOKElement:
.22d1	20 34 25	jsr $2534			jsr 	TOKIsDigit 					; is it 0..9
.22d4	90 16		bcc $22ec			bcc 	_TOKNotDigit
.22d6	20 84 24	jsr $2484			jsr 	TOKTokeniseInteger 			; get integer
.22d9	b0 44		bcs $231f			bcs 	_TOKFail 					; did it fail ?
.22db	9c 20 06	stz $0620			stz 	TOKIsFirstElement 			; clear first element flag
.22de	20 30 23	jsr $2330			jsr 	TOKGet 						; what follows ?
.22e1	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.22e3	d0 dc		bne $22c1			bne 	_TOKMainLoop
.22e5	20 85 22	jsr $2285			jsr 	TOKTokeniseDecimals
.22e8	b0 35		bcs $231f			bcs 	_TOKFail
.22ea	80 d5		bra $22c1			bra 	_TOKMainLoop
.22ec					_TOKNotDigit:
.22ec	9c 20 06	stz $0620			stz 	TOKIsFirstElement 			; clear first element flag
.22ef	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.22f1	d0 07		bne $22fa			bne 	_TOKNotHex
.22f3	20 8a 23	jsr $238a			jsr 	TOKTokeniseHexadecimal
.22f6	b0 27		bcs $231f			bcs 	_TOKFail
.22f8	80 c7		bra $22c1			bra 	_TOKMainLoop
.22fa					_TOKNotHex:
.22fa	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.22fc	d0 07		bne $2305			bne 	_TOKNotString
.22fe	20 fb 24	jsr $24fb			jsr 	TOKTokeniseString
.2301	b0 1c		bcs $231f			bcs 	_TOKFail
.2303	80 bc		bra $22c1			bra 	_TOKMainLoop
.2305					_TOKNotString:
.2305	20 4d 25	jsr $254d			jsr 	TOKIsAlpha 					; identifier ?
.2308	b0 07		bcs $2311			bcs 	_TOKIdentifier
.230a	20 c1 24	jsr $24c1			jsr 	TOKTokenisePunctuation 		; punctuation
.230d	b0 10		bcs $231f			bcs 	_TOKFail
.230f	80 b0		bra $22c1			bra 	_TOKMainLoop
.2311					_TOKIdentifier:
.2311	20 c7 23	jsr $23c7			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2314	b0 09		bcs $231f			bcs 	_TOKFail
.2316	80 a9		bra $22c1			bra 	_TOKMainLoop
.2318					_TOKExit:
.2318	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.231a	20 21 23	jsr $2321			jsr 	TOKWriteA
.231d	18		clc				clc									; return with carry set.
.231e	60		rts				rts
.231f					_TOKFail:
.231f	38		sec				sec
.2320	60		rts				rts
.2321					TOKWriteA:
.2321	da		phx				phx
.2322	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2325	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2328	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.232b	fa		plx				plx
.232c	ee 00 04	inc $0400			inc 	TOKLineSize
.232f	60		rts				rts
.2330					TOKGet:
.2330	18		clc				clc
.2331	6c 1e 06	jmp ($061e)			jmp 	(TOKDataSource)
.2334					TOKGetNext:
.2334	38		sec				sec
.2335	6c 1e 06	jmp ($061e)			jmp 	(TOKDataSource)
.061e					TOKDataSource:
>061e							.fill 	2
.0620					TOKIsFirstElement:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2338					TOKFindToken:
.2338	a2 22		ldx #$22			ldx 	#StandardTokens & $FF 		; do this table
.233a	a0 1d		ldy #$1d			ldy 	#StandardTokens >> 8
.233c	20 54 23	jsr $2354			jsr 	TOKFindTokenXY 				; find it, or not
.233f	b0 0d		bcs $234e			bcs 	_TOKFound1
.2341	a2 a3		ldx #$a3			ldx 	#AlternateTokens & $FF 		; do the alternate table
.2343	a0 1e		ldy #$1e			ldy 	#AlternateTokens >> 8
.2345	20 54 23	jsr $2354			jsr 	TOKFindTokenXY 				; find it, or not
.2348	90 08		bcc $2352			bcc 	_TOKFTFail 					; not ....
.234a	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.234c	38		sec				sec
.234d	60		rts				rts
.234e					_TOKFound1:
.234e	a2 00		ldx #$00			ldx 	#0
.2350	38		sec				sec
.2351	60		rts				rts
.2352					_TOKFTFail
.2352	18		clc				clc
.2353	60		rts				rts
.2354					TOKFindTokenXY:
.2354	86 24		stx $24				stx 	zTemp0 						; save token table address
.2356	84 25		sty $25				sty 	zTemp0+1
.2358	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.235a	8d 21 06	sta $0621			sta 	TOKCurrent
.235d					_TOKFindLoop:
.235d	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.235f	18		clc				clc 		 						; clear carry in case of fail
.2360	30 17		bmi $2379			bmi 	_TOKExit 					; end of table, fail, so return CC.
.2362	cd 1e 05	cmp $051e			cmp 	TOKElement 					; compare against the element length
.2365	d0 13		bne $237a			bne 	_TOKNext 					; different, try next.
.2367	aa		tax				tax 								; number of chars to compare.
.2368	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.236a					_TOKCompare:
.236a	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.236c	d9 1e 05	cmp $051e,y			cmp 	TOKElementText-1,y
.236f	d0 09		bne $237a			bne 	_TOKNext 					; different ? try next
.2371	c8		iny				iny 								; compare next two
.2372	ca		dex				dex
.2373	d0 f5		bne $236a			bne 	_TOKCompare 				; until done X characters.
.2375	38		sec				sec
.2376	ad 21 06	lda $0621			lda 	TOKCurrent 					; return current ID.
.2379					_TOKExit:
.2379	60		rts				rts
.237a					_TOKNext:
.237a	ee 21 06	inc $0621			inc 	TOKCurrent 					; increment token #
.237d	38		sec				sec 								; add length+1 to ptr
.237e	b2 24		lda ($24)			lda 	(zTemp0)
.2380	65 24		adc $24				adc 	zTemp0
.2382	85 24		sta $24				sta 	zTemp0
.2384	90 d7		bcc $235d			bcc 	_TOKFindLoop
.2386	e6 25		inc $25				inc 	zTemp0+1
.2388	80 d3		bra $235d			bra 	_TOKFindLoop
.0621					TOKCurrent:
>0621							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.238a					TOKTokeniseHexadecimal:
.238a	20 34 23	jsr $2334			jsr 	TOKGetNext 					; consume the $
.238d	a2 08		ldx #$08			ldx 	#IFR0
.238f	20 e0 34	jsr $34e0			jsr 	IFloatSetZero 				; set R0 = 0
.2392					_TTHLoop:
.2392	20 30 23	jsr $2330			jsr 	TOKGet 						; keep getting and copying while numeric.
.2395	20 5a 25	jsr $255a			jsr 	TOKIsHexadecimal
.2398	90 23		bcc $23bd			bcc 	_TTHDone
.239a	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.239c	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.239f	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.23a2	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.23a5	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.23a8	20 34 23	jsr $2334			jsr 	TOKGetNext
.23ab	20 1e 25	jsr $251e			jsr 	TOKToUpper 					; make U/C
.23ae	38		sec				sec 								; convert to decimal.
.23af	e9 30		sbc #$30			sbc 	#48
.23b1	c9 0a		cmp #$0a			cmp 	#10
.23b3	90 02		bcc $23b7			bcc 	_TTHNotAlpha
.23b5	e9 07		sbc #$07			sbc 	#7
.23b7					_TTHNotAlpha:
.23b7	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.23b9	85 08		sta $08				sta 	IFR0+IM0
.23bb	80 d5		bra $2392			bra 	_TTHLoop
.23bd					_TTHDone:
.23bd	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.23bf	20 21 23	jsr $2321			jsr 	TOKWriteA
.23c2	20 63 22	jsr $2263			jsr 	TOKTokeniseConstant 		; write integer out.
.23c5	18		clc				clc
.23c6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.23c7					TOKTokeniseIdentifier:
.23c7	20 50 22	jsr $2250			jsr 	TOKResetElement 			; extract an identifier
.23ca					_TOKGetIdentifier:
.23ca	20 30 23	jsr $2330			jsr 	TOKGet
.23cd	20 1e 25	jsr $251e			jsr 	TOKToUpper
.23d0	20 40 25	jsr $2540			jsr 	TOKIsIdentifierElement
.23d3	90 08		bcc $23dd			bcc 	_TOKEndIdent
.23d5	20 54 22	jsr $2254			jsr		TOKWriteElement
.23d8	20 34 23	jsr $2334			jsr 	TOKGetNext
.23db	80 ed		bra $23ca			bra 	_TOKGetIdentifier
.23dd					_TOKEndIdent:
.23dd	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.23df	d0 06		bne $23e7			bne 	_TOKNotString
.23e1	20 54 22	jsr $2254			jsr 	TOKWriteElement 			; add it
.23e4	20 34 23	jsr $2334			jsr 	TOKGetNext 					; consume it
.23e7					_TOKNotString:
.23e7	20 30 23	jsr $2330			jsr 	TOKGet 						; finally check for (
.23ea	c9 28		cmp #$28			cmp 	#"("
.23ec	d0 06		bne $23f4			bne 	_TOKNoArray
.23ee	20 54 22	jsr $2254			jsr 	TOKWriteElement 			; add it
.23f1	20 34 23	jsr $2334			jsr 	TOKGetNext 					; consume it
.23f4					_TOKNoArray:
.23f4	20 38 23	jsr $2338			jsr 	TOKFindToken 				; find it
.23f7	90 18		bcc $2411			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.23f9	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.23fb	f0 0f		beq $240c			beq 	_TOKComment 				; yes, do comment code.
.23fd	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.23ff	d0 06		bne $2407			bne 	_TOKNoShift
.2401	48		pha				pha 								; write the shift.
.2402	8a		txa				txa
.2403	20 21 23	jsr $2321			jsr 	TOKWriteA
.2406	68		pla				pla
.2407					_TOKNoShift:
.2407	20 21 23	jsr $2321			jsr 	TOKWriteA 					; write the main token.
.240a	18		clc				clc
.240b	60		rts				rts
.240c					_TOKComment:
.240c	20 51 24	jsr $2451			jsr 	TOKDoComment
.240f	18		clc				clc
.2410	60		rts				rts
.2411					_TOKIsVariable:
.2411	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2413					_TOKOutputBuffer:
.2413	bd 1f 05	lda $051f,x			lda 	TOKElementText,x 			; output it translated.
.2416	20 3f 24	jsr $243f			jsr 	TOKTranslateIdentifier
.2419	20 21 23	jsr $2321			jsr 	TOKWriteA
.241c	e8		inx				inx
.241d	bd 1f 05	lda $051f,x			lda 	TOKElementText,x
.2420	20 40 25	jsr $2540			jsr 	TOKIsIdentifierElement
.2423	b0 ee		bcs $2413			bcs 	_TOKOutputBuffer
.2425	a8		tay				tay 								; last char in Y
.2426	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2428	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.242a	f0 0e		beq $243a			beq 	_TOKIVExit
.242c	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.242e	d0 04		bne $2434			bne 	_TOKIVCheckArray 			; no, check for (
.2430	1a		inc a				inc 	a 							; token is $7D
.2431	bc 20 05	ldy $0520,x			ldy 	TOKElementText+1,x 			; get next one.
.2434					_TOKIVCheckArray:
.2434	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2436	d0 02		bne $243a			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2438	1a		inc a				inc 	a
.2439	1a		inc a				inc 	a
.243a					_TOKIVExit:
.243a	20 21 23	jsr $2321			jsr 	TOKWriteA 					; ending token
.243d	18		clc				clc
.243e	60		rts				rts
.243f					TOKTranslateIdentifier:
.243f	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.2441	f0 0b		beq $244e			beq 	_TTI64
.2443	38		sec				sec
.2444	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2446	10 03		bpl $244b			bpl 	_TTIExit
.2448	18		clc				clc 								; map 09 onto 26-35
.2449	69 2b		adc #$2b			adc 	#"A"-"0"+26
.244b					_TTIExit:
.244b	09 40		ora #$40			ora 	#$40 						; correct range.
.244d	60		rts				rts
.244e	a9 64		lda #$64	_TTI64:	lda 	#$64
.2450	60		rts				rts
.2451					TOKDoComment:
.2451	20 21 23	jsr $2321			jsr 	TOKWriteA					; output the token.
.2454					_TOKSkipSpaces:
.2454	20 30 23	jsr $2330			jsr 	TOKGet 						; skip over spaces
.2457	c9 20		cmp #$20			cmp 	#' '
.2459	d0 05		bne $2460			bne 	_TOKEndSpaces
.245b	20 34 23	jsr $2334			jsr 	TOKGetNext
.245e	80 f4		bra $2454			bra 	_TOKSkipSpaces
.2460					_TOKEndSpaces:
.2460	48		pha				pha 								; save it
.2461	68		pla				pla
.2462	f0 04		beq $2468			beq 	_TOKDCExit 					; end of line.
.2464	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.2466	d0 01		bne $2469			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.2468					_TOKDCExit:
.2468	60		rts				rts
.2469					_TOKDCDoLine:
.2469	20 50 22	jsr $2250			jsr 	TOKResetElement 			; start getting the string
.246c					_TOKDCLoop:
.246c	20 30 23	jsr $2330			jsr 	TOKGet 						; check EOL
.246f	c9 00		cmp #$00			cmp 	#0
.2471	f0 08		beq $247b			beq 	_TOKDCEndComment
.2473	20 34 23	jsr $2334			jsr 	TOKGetNext 					; get and consume
.2476	20 54 22	jsr $2254			jsr 	TOKWriteElement
.2479	80 f1		bra $246c			bra 	_TOKDCLoop
.247b					_TOKDCEndComment:
.247b	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.247d	20 21 23	jsr $2321			jsr 	TOKWriteA
.2480	20 95 22	jsr $2295			jsr 	TOKOutputElementBuffer
.2483	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2484					TOKTokeniseInteger:
.2484	20 ad 24	jsr $24ad			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2487	a2 1f		ldx #$1f			ldx 	#TOKElementText & $FF
.2489	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.248b	ad 1e 05	lda $051e			lda		TOKElement
.248e	20 44 33	jsr $3344			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2491	ad 20 06	lda $0620			lda 	TOKIsFirstElement 			; first element ?
.2494	f0 12		beq $24a8			beq 	_TOKNotLineNumber
.2496	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.2498	d0 0c		bne $24a6			bne 	_TOKBadLineNumeber
.249a	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.249c	8d 01 04	sta $0401			sta 	TOKLineNumber
.249f	a5 09		lda $09				lda 	IFR0+IM1
.24a1	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.24a4	18		clc				clc
.24a5	60		rts				rts
.24a6					_TOKBadLineNumeber:
.24a6	38		sec				sec
.24a7	60		rts				rts
.24a8					_TOKNotLineNumber:
.24a8	20 63 22	jsr $2263			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.24ab	18		clc				clc
.24ac	60		rts				rts
.24ad					TOKExtractInteger:
.24ad	20 50 22	jsr $2250			jsr 	TOKResetElement 			; restart
.24b0					_TTILoop:
.24b0	20 30 23	jsr $2330			jsr 	TOKGet 						; keep getting and copying while numeric.
.24b3	20 34 25	jsr $2534			jsr 	TOKIsDigit
.24b6	90 08		bcc $24c0			bcc 	_TOKEIExit
.24b8	20 54 22	jsr $2254			jsr 	TOKWriteElement
.24bb	20 34 23	jsr $2334			jsr 	TOKGetNext
.24be	80 f0		bra $24b0			bra 	_TTILoop
.24c0					_TOKEIExit:
.24c0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.24c1					TOKTokenisePunctuation:
.24c1	20 50 22	jsr $2250			jsr 	TOKResetElement 			; copy first punctuation character into element.
.24c4	20 34 23	jsr $2334			jsr 	TOKGetNext
.24c7	20 54 22	jsr $2254			jsr 	TOKWriteElement
.24ca	20 30 23	jsr $2330			jsr 	TOKGet 						; what follows ?
.24cd	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.24cf	f0 10		beq $24e1			beq 	_TTPOne
.24d1	20 44 25	jsr $2544			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.24d4	b0 0b		bcs $24e1			bcs 	_TTPOne 					; these speed things up a bit.
.24d6	20 54 22	jsr $2254			jsr 	TOKWriteElement 			; this is what we will search for.
.24d9	20 38 23	jsr $2338			jsr 	TOKFindToken
.24dc	b0 0a		bcs $24e8			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.24de	ce 1e 05	dec $051e			dec 	TOKElement 					; make it a single character
.24e1					_TTPOne:
.24e1	20 38 23	jsr $2338			jsr 	TOKFindToken 				; look for one character punctuation
.24e4	b0 07		bcs $24ed			bcs 	_TTPOutputExit 				; we found it
.24e6	38		sec				sec 								; not recognised.
.24e7	60		rts				rts
.24e8					_TTPConsumeExit:
.24e8	48		pha				pha
.24e9	20 34 23	jsr $2334			jsr 	TOKGetNext 					; get the 2nd char out.
.24ec	68		pla				pla
.24ed					_TTPOutputExit:
.24ed	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.24ef	f0 05		beq $24f6			beq 	_TTPComment
.24f1	20 21 23	jsr $2321			jsr  	TOKWriteA 					; write token out
.24f4	18		clc				clc
.24f5	60		rts				rts
.24f6					_TTPComment:
.24f6	20 51 24	jsr $2451			jsr 	TOKDoComment
.24f9	18		clc				clc
.24fa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.24fb					TOKTokeniseString:
.24fb	20 34 23	jsr $2334			jsr 	TOKGetNext 					; consume the "
.24fe	20 50 22	jsr $2250			jsr 	TOKResetElement 			; start getting the string
.2501					_TOKTSLoop:
.2501	20 30 23	jsr $2330			jsr 	TOKGet 						; check EOL
.2504	c9 00		cmp #$00			cmp 	#0
.2506	f0 0c		beq $2514			beq 	_TOKTSExit
.2508	20 34 23	jsr $2334			jsr 	TOKGetNext 					; get and consume
.250b	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.250d	f0 05		beq $2514			beq 	_TOKTSExit
.250f	20 54 22	jsr $2254			jsr 	TOKWriteElement
.2512	80 ed		bra $2501			bra 	_TOKTSLoop
.2514					_TOKTSExit:
.2514	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2516	20 21 23	jsr $2321			jsr 	TOKWriteA
.2519	20 95 22	jsr $2295			jsr 	TOKOutputElementBuffer
.251c	18		clc				clc
.251d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.251e					TOKToUpper:
.251e	c9 61		cmp #$61			cmp 	#"a"
.2520	90 06		bcc $2528			bcc 	_TTUNotLower
.2522	c9 7b		cmp #$7b			cmp 	#"z"+1
.2524	b0 02		bcs $2528			bcs 	_TTUNotLower
.2526	49 20		eor #$20			eor 	#$20
.2528					_TTUNotLower:
.2528	60		rts				rts
.2529					TOKToLower:
.2529	c9 41		cmp #$41			cmp 	#"A"
.252b	90 06		bcc $2533			bcc 	_TTUNotUpper
.252d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.252f	b0 02		bcs $2533			bcs 	_TTUNotUpper
.2531	49 20		eor #$20			eor 	#$20
.2533					_TTUNotUpper:
.2533	60		rts				rts
.2534					TOKIsDigit:
.2534	c9 30		cmp #$30			cmp 	#"0"
.2536	90 06		bcc $253e			bcc 	TOKFail
.2538	c9 3a		cmp #$3a			cmp 	#"9"+1
.253a	b0 02		bcs $253e			bcs 	TOKFail
.253c					TOKSucceed:
.253c	38		sec				sec
.253d	60		rts				rts
.253e					TOKFail:
.253e	18		clc				clc
.253f	60		rts				rts
.2540					TOKIsIdentifierElement:
.2540	c9 5f		cmp #$5f			cmp 	#"_"
.2542	f0 f8		beq $253c			beq 	TOKSucceed 					; else fall through to alphanumeric
.2544					TOKIsAlphaNumeric:
.2544	20 4d 25	jsr $254d			jsr 	TOKIsAlpha
.2547	b0 f3		bcs $253c			bcs 	TOKSucceed
.2549	20 34 25	jsr $2534			jsr 	TOKIsDigit
.254c	60		rts				rts
.254d					TOKIsAlpha:
.254d	20 1e 25	jsr $251e			jsr 	TOKToUpper
.2550	c9 41		cmp #$41			cmp 	#"A"
.2552	90 ea		bcc $253e			bcc 	TOKFail
.2554	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2556	b0 e6		bcs $253e			bcs 	TOKFail
.2558	80 e2		bra $253c			bra 	TOKSucceed
.255a					TOKIsHexadecimal:
.255a	20 34 25	jsr $2534			jsr		TOKIsDigit
.255d	b0 dd		bcs $253c			bcs 	TOKSucceed
.255f	20 4d 25	jsr $254d			jsr 	TOKIsAlpha
.2562	90 da		bcc $253e			bcc 	TOKFail
.2564	c9 47		cmp #$47			cmp 	#"F"+1
.2566	b0 d6		bcs $253e			bcs 	TOKFail
.2568	80 d2		bra $253c			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.256a					Command_CALL:
.256a	a9 42		lda #$42			lda 	#STK_CALL
.256c	20 5c 2a	jsr $2a5c			jsr 	StackOpen
.256f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.2571	29 c0		and #$c0			and 	#$C0
.2573	c9 40		cmp #$40			cmp 	#$40
.2575	d0 29		bne $25a0			bne 	_CCSyntax
.2577	20 23 2e	jsr $2e23			jsr 	VARGetInfo 					; get the information
.257a	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 				; check right bracket follows.
.257d	20 d5 2d	jsr $2dd5			jsr 	VARFind 					; exists ?
.2580	90 21		bcc $25a3			bcc 	_CCUnknown
.2582	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.2584	85 24		sta $24				sta 	zTemp0
.2586	20 8f 2a	jsr $2a8f			jsr 	STKSaveCodePosition 		; save return address on stack.
.2589	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.258b	b1 24		lda ($24),y			lda 	(zTemp0),y
.258d	c9 ff		cmp #$ff			cmp 	#$FF
.258f	d0 12		bne $25a3			bne 	_CCUnknown
.2591	88		dey				dey 								; get Y offset to stack
.2592	b1 24		lda ($24),y			lda 	(zTemp0),y
.2594	48		pha				pha
.2595	88		dey				dey 								; get address
.2596	b1 24		lda ($24),y			lda 	(zTemp0),y
.2598	85 19		sta $19				sta 	codePtr+1
.259a	b2 24		lda ($24)			lda 	(zTemp0)
.259c	85 18		sta $18				sta 	codePtr
.259e	7a		ply				ply 								; restore Y
.259f	60		rts				rts
.25a0					_CCSyntax:
.25a0	4c 6a 28	jmp $286a		jmp	ErrorV_syntax
.25a3					_CCUnknown:
.25a3	4c df 29	jmp $29df		jmp	ErrorV_unknown
.25a6					Command_ENDPROC:
.25a6	a9 42		lda #$42			lda 	#STK_CALL
.25a8	20 87 2a	jsr $2a87			jsr 	StackCheckFrame
.25ab	20 a1 2a	jsr $2aa1			jsr 	STKLoadCodePosition 		; return
.25ae	20 79 2a	jsr $2a79			jsr 	StackClose
.25b1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.25b2					Command_DO:
.25b2	a9 22		lda #$22			lda 	#STK_DO
.25b4	20 5c 2a	jsr $2a5c			jsr 	StackOpen
.25b7	20 8f 2a	jsr $2a8f			jsr 	STKSaveCodePosition 		; save loop position
.25ba	60		rts				rts
.25bb					Command_EXIT:
.25bb	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.25bd	20 87 2a	jsr $2a87			jsr 	StackCheckFrame
.25c0	20 79 2a	jsr $2a79			jsr 	StackClose 					; close it
.25c3	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.25c5	aa		tax				tax
.25c6	20 7a 27	jsr $277a			jsr 	ScanForward
.25c9	60		rts				rts
.25ca					Command_LOOP:
.25ca	a9 22		lda #$22			lda 	#STK_DO
.25cc	20 87 2a	jsr $2a87			jsr 	StackCheckFrame
.25cf	20 a1 2a	jsr $2aa1			jsr 	STKLoadCodePosition 		; loop back
.25d2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.25d3					Command_FOR:
.25d3	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.25d5	20 5c 2a	jsr $2a5c			jsr 	StackOpen
.25d8	20 e3 13	jsr $13e3			jsr 	CommandLET 					; do "I = 1" bit
.25db	5a		phy				phy 								; save variable address to +4,+5
.25dc	a0 04		ldy #$04			ldy 	#4
.25de	a5 24		lda $24				lda 	zTemp0
.25e0	91 2c		sta ($2c),y			sta 	(basicStack),y
.25e2	c8		iny				iny
.25e3	a5 25		lda $25				lda 	zTemp0+1
.25e5	91 2c		sta ($2c),y			sta 	(basicStack),y
.25e7	7a		ply				ply
.25e8	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.25ea	20 53 2a	jsr $2a53			jsr 	ERRCheckA
.25ed	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.25f0	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.25f2	a2 08		ldx #$08			ldx 	#IFR0
.25f4	20 49 26	jsr $2649			jsr 	CFSaveR0X
.25f7	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.25f9	c9 91		cmp #$91			cmp 	#PR_STEP
.25fb	d0 06		bne $2603			bne 	_CFStep1
.25fd	c8		iny				iny 								; consume step
.25fe	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 				; evaluate STEP
.2601	80 24		bra $2627			bra 	_CFWriteStep
.2603					_CFStep1:
.2603	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2605	a9 01		lda #$01			lda 	#1
.2607	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.260a	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.260b	a0 04		ldy #$04			ldy 	#4 							; get variable address
.260d	b1 2c		lda ($2c),y			lda 	(basicStack),y
.260f	85 24		sta $24				sta 	zTemp0
.2611	c8		iny				iny
.2612	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2614	85 25		sta $25				sta 	zTemp0+1
.2616	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2618	b1 24		lda ($24),y			lda 	(zTemp0),y
.261a	d0 0a		bne $2626			bne 	_CFNotOptimised
.261c	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.261e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2620	d0 04		bne $2626			bne 	_CFNotOptimised
.2622	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2624	85 0b		sta $0b				sta 	IFR0+IExp
.2626					_CFNotOptimised:
.2626	7a		ply				ply
.2627					_CFWriteStep:
.2627	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2629	a9 06		lda #$06			lda 	#6
.262b	20 49 26	jsr $2649			jsr 	CFSaveR0X
.262e	20 8f 2a	jsr $2a8f			jsr 	STKSaveCodePosition 		; save loop position
.2631	60		rts				rts
.2632					CFLoadR0X:
.2632	5a		phy				phy
.2633	a8		tay				tay
.2634	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2636	95 00		sta $00,x			sta 	IM0,x
.2638	c8		iny				iny
.2639	b1 2c		lda ($2c),y			lda 	(basicStack),y
.263b	95 01		sta $01,x			sta 	IM1,x
.263d	c8		iny				iny
.263e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2640	95 02		sta $02,x			sta 	IM2,x
.2642	c8		iny				iny
.2643	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2645	95 03		sta $03,x			sta 	IExp,x
.2647	7a		ply				ply
.2648	60		rts				rts
.2649					CFSaveR0X:
.2649	5a		phy				phy
.264a	a8		tay				tay
.264b	b5 00		lda $00,x			lda 	IM0,x
.264d	91 2c		sta ($2c),y			sta 	(basicStack),y
.264f	c8		iny				iny
.2650	b5 01		lda $01,x			lda 	IM1,x
.2652	91 2c		sta ($2c),y			sta 	(basicStack),y
.2654	c8		iny				iny
.2655	b5 02		lda $02,x			lda 	IM2,x
.2657	91 2c		sta ($2c),y			sta 	(basicStack),y
.2659	c8		iny				iny
.265a	b5 03		lda $03,x			lda 	IExp,x
.265c	91 2c		sta ($2c),y			sta 	(basicStack),y
.265e	7a		ply				ply
.265f	60		rts				rts
.2660					Command_NEXT:
.2660	a9 37		lda #$37			lda 	#STK_FOR
.2662	20 87 2a	jsr $2a87			jsr 	StackCheckFrame
.2665	5a		phy				phy 								; check optimised loop
.2666	a0 09		ldy #$09			ldy 	#9
.2668	b1 2c		lda ($2c),y			lda 	(basicStack),y
.266a	7a		ply				ply
.266b	0a		asl a				asl 	a
.266c	b0 35		bcs $26a3			bcs 	_CNOptimised
.266e	20 db 26	jsr $26db			jsr 	_CNLoadValue 				; load index value to R0.
.2671	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2673	a9 06		lda #$06			lda 	#6
.2675	20 32 26	jsr $2632			jsr 	CFLoadR0X
.2678	20 d8 2e	jsr $2ed8			jsr 	IFloatAdd 					; add them together and write back.
.267b	20 fe 26	jsr $26fe			jsr 	_CNSaveValue
.267e	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2680	a2 0c		ldx #$0c			ldx 	#IFR1
.2682	20 32 26	jsr $2632			jsr 	CFLoadR0X
.2685	20 af 31	jsr $31af			jsr 	IFloatCompare 				; compare terminal vs current
.2688	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.268a	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero
.268d	f0 10		beq $269f			beq 	_CNLoopBack
.268f	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2691	5a		phy				phy
.2692	a0 09		ldy #$09			ldy 	#6+IExp
.2694	51 2c		eor ($2c),y			eor 	(basicStack),y
.2696	7a		ply				ply
.2697	29 40		and #$40			and 	#IFSign
.2699	f0 04		beq $269f			beq 	_CNLoopBack
.269b					_CNExitLoop:
.269b	20 79 2a	jsr $2a79			jsr 	StackClose		 			; return
.269e	60		rts				rts
.269f					_CNLoopBack:
.269f	20 a1 2a	jsr $2aa1			jsr 	STKLoadCodePosition 		; loop back
.26a2	60		rts				rts
.26a3					_CNOptimised:
.26a3	5a		phy				phy
.26a4	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.26a6	b1 2c		lda ($2c),y			lda 	(basicStack),y
.26a8	85 28		sta $28				sta 	zTemp2
.26aa	c8		iny				iny
.26ab	b1 2c		lda ($2c),y			lda 	(basicStack),y
.26ad	85 29		sta $29				sta 	zTemp2+1
.26af	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.26b1					_CNIncrement:
.26b1	c8		iny				iny
.26b2	b1 28		lda ($28),y			lda 	(zTemp2),y
.26b4	1a		inc a				inc 	a
.26b5	91 28		sta ($28),y			sta 	(zTemp2),y
.26b7	f0 f8		beq $26b1			beq 	_CNIncrement
.26b9	18		clc				clc 								; point zTemp0 to terminal value
.26ba	a5 2c		lda $2c				lda 	basicStack
.26bc	69 0a		adc #$0a			adc 	#10
.26be	85 24		sta $24				sta 	zTemp0
.26c0	a5 2d		lda $2d				lda 	basicStack+1
.26c2	69 00		adc #$00			adc 	#0
.26c4	85 25		sta $25				sta 	zTemp0+1
.26c6	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.26c8	18		clc				clc 								; borrow 1, we want > not >=
.26c9	b2 28		lda ($28)			lda 	(zTemp2)
.26cb	f2 24		sbc ($24)			sbc 	(zTemp0)
.26cd	b1 28		lda ($28),y			lda 	(zTemp2),y
.26cf	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.26d1	c8		iny				iny
.26d2	b1 28		lda ($28),y			lda 	(zTemp2),y
.26d4	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.26d6	7a		ply				ply
.26d7	b0 c2		bcs $269b			bcs 	_CNExitLoop
.26d9	80 c4		bra $269f			bra 	_CNLoopBack
.26db					_CNLoadValue:
.26db	5a		phy				phy
.26dc	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.26de	b1 2c		lda ($2c),y			lda 	(basicStack),y
.26e0	85 28		sta $28				sta 	zTemp2
.26e2	c8		iny				iny
.26e3	b1 2c		lda ($2c),y			lda 	(basicStack),y
.26e5	85 29		sta $29				sta 	zTemp2+1
.26e7	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.26e9	b1 28		lda ($28),y			lda 	(zTemp2),y
.26eb	85 08		sta $08				sta 	IFR0+IM0
.26ed	c8		iny				iny
.26ee	b1 28		lda ($28),y			lda 	(zTemp2),y
.26f0	85 09		sta $09				sta 	IFR0+IM1
.26f2	c8		iny				iny
.26f3	b1 28		lda ($28),y			lda 	(zTemp2),y
.26f5	85 0a		sta $0a				sta 	IFR0+IM2
.26f7	c8		iny				iny
.26f8	b1 28		lda ($28),y			lda 	(zTemp2),y
.26fa	85 0b		sta $0b				sta 	IFR0+IExp
.26fc	7a		ply				ply
.26fd	60		rts				rts
.26fe					_CNSaveValue:
.26fe	5a		phy				phy
.26ff	a0 00		ldy #$00			ldy 	#0
.2701	a5 08		lda $08				lda 	IFR0+IM0
.2703	91 28		sta ($28),y			sta 	(zTemp2),y
.2705	c8		iny				iny
.2706	a5 09		lda $09				lda 	IFR0+IM1
.2708	91 28		sta ($28),y			sta 	(zTemp2),y
.270a	c8		iny				iny
.270b	a5 0a		lda $0a				lda 	IFR0+IM2
.270d	91 28		sta ($28),y			sta 	(zTemp2),y
.270f	c8		iny				iny
.2710	a5 0b		lda $0b				lda 	IFR0+IExp
.2712	91 28		sta ($28),y			sta 	(zTemp2),y
.2714	7a		ply				ply
.2715	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2716					Command_GOSUB:
.2716	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; get line number
.2719	a9 52		lda #$52			lda 	#STK_GOSUB
.271b	20 5c 2a	jsr $2a5c			jsr 	StackOpen
.271e	20 8f 2a	jsr $2a8f			jsr 	STKSaveCodePosition 		; save return address on stack.
.2721	4c 04 13	jmp $1304			jmp 	GotoR0
.2724					Command_RETURN:
.2724	a9 52		lda #$52			lda 	#STK_GOSUB
.2726	20 87 2a	jsr $2a87			jsr 	StackCheckFrame
.2729	20 a1 2a	jsr $2aa1			jsr 	STKLoadCodePosition 		; return
.272c	20 79 2a	jsr $2a79			jsr 	StackClose
.272f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2730					IfCommand:
.2730	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 				; Get the if test.
.2733	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2735	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2737	d0 0c		bne $2745			bne 	_IfStructured 				; we still support it.
.2739	c8		iny				iny 								; consume THEN
.273a	a2 08		ldx #$08			ldx 	#IFR0
.273c	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero 			; is it zero
.273f	f0 01		beq $2742			beq 	_IfFail 					; if fail, go to next line
.2741	60		rts				rts 								; if THEN just continue
.2742					_IfFail:
.2742	4c 3c 16	jmp $163c			jmp 	RUNEndOfLine
.2745					_IfStructured:
.2745	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero 			; is it zero
.2748	d0 07		bne $2751			bne 	_IfExit 					; if not, then continue normally.
.274a	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.274c	a2 85		ldx #$85			ldx 	#PR_ENDIF
.274e	20 7a 27	jsr $277a			jsr 	ScanForward 				; and run from there
.2751					_IfExit:
.2751	60		rts				rts
.2752					ElseCode:
.2752	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2754	aa		tax				tax 								; so just go to the structure exit
.2755	20 7a 27	jsr $277a			jsr 	ScanForward
.2758	60		rts				rts
.2759					EndIf:
.2759	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.275a					Command_REPEAT:
.275a	a9 02		lda #$02			lda 	#STK_REPEAT
.275c	20 5c 2a	jsr $2a5c			jsr 	StackOpen
.275f	20 8f 2a	jsr $2a8f			jsr 	STKSaveCodePosition 		; save loop position
.2762	60		rts				rts
.2763					Command_UNTIL:
.2763	a9 02		lda #$02			lda 	#STK_REPEAT
.2765	20 87 2a	jsr $2a87			jsr 	StackCheckFrame
.2768	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 				; work out the test
.276b	a2 08		ldx #$08			ldx 	#IFR0
.276d	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero 			; check if zero
.2770	f0 04		beq $2776			beq 	_CULoopBack 				; if so keep looping
.2772	20 79 2a	jsr $2a79			jsr 	StackClose		 			; return
.2775	60		rts				rts
.2776					_CULoopBack:
.2776	20 a1 2a	jsr $2aa1			jsr 	STKLoadCodePosition 		; loop back
.2779	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.277a					ScanForward:
.277a	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.277c	86 25		stx $25				stx 	zTemp0+1
.277e	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.2780					_ScanForwardLoop:
.2780	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2782	d0 0a		bne $278e			bne 	_ScanNoCheck
.2784	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2786	c5 24		cmp $24				cmp 	zTemp0
.2788	f0 49		beq $27d3			beq 	_ScanExit
.278a	c5 25		cmp $25				cmp 	zTemp0+1
.278c	f0 45		beq $27d3			beq 	_ScanExit
.278e					_ScanNoCheck:
.278e	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2790	c8		iny				iny
.2791	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2793	f0 37		beq $27cc			beq		_ScanDataItem
.2795	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2797	f0 33		beq $27cc			beq 	_ScanDataItem
.2799	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.279b	f0 1b		beq $27b8			beq 	_ScanNextLine
.279d	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.279f	d0 01		bne $27a2			bne 	_ScanNoShift
.27a1	c8		iny				iny
.27a2					_ScanNoShift:
.27a2	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.27a4	b0 da		bcs $2780			bcs 	_ScanForwardLoop
.27a6	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.27a8	90 d6		bcc $2780			bcc 	_ScanForwardLoop
.27aa	aa		tax				tax 								; access the table to get the adjustment.
.27ab	18		clc				clc
.27ac	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.27ae	7d 96 1c	adc $1c96,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.27b1	85 26		sta $26				sta 	zTemp1
.27b3	10 cb		bpl $2780			bpl		_ScanForwardLoop 			; error if -ve ?
.27b5	4c f6 28	jmp $28f6		jmp	ErrorV_structure
.27b8					_ScanNextLine:
.27b8	18		clc				clc	 								; forward to next line.
.27b9	b2 18		lda ($18)			lda 	(codePtr)
.27bb	65 18		adc $18				adc 	codePtr
.27bd	85 18		sta $18				sta 	codePtr
.27bf	90 02		bcc $27c3			bcc 	_ScanNoCarry
.27c1	e6 19		inc $19				inc 	codePtr+1
.27c3					_ScanNoCarry:
.27c3	a0 03		ldy #$03			ldy 	#3
.27c5	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.27c7	d0 b7		bne $2780			bne 	_ScanForwardLoop
.27c9	4c f6 28	jmp $28f6		jmp	ErrorV_structure
.27cc					_ScanDataItem:
.27cc	98		tya				tya
.27cd	38		sec				sec
.27ce	71 18		adc ($18),y			adc 	(codePtr),y
.27d0	a8		tay				tay
.27d1	80 ad		bra $2780			bra 	_ScanForwardLoop
.27d3					_ScanExit:
.27d3	c8		iny				iny 								; consume final token.
.27d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.27d5					ScanProcedures:
.27d5	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.27d7	48		pha				pha
.27d8	a5 19		lda $19				lda 	codePtr+1
.27da	48		pha				pha
.27db	5a		phy				phy
.27dc	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.27df	85 19		sta $19				sta 	codePtr+1
.27e1	64 18		stz $18				stz 	codePtr
.27e3					_SPLoop:
.27e3	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.27e5	f0 18		beq $27ff			beq 	_SPExit
.27e7	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.27e9	b1 18		lda ($18),y			lda 	(codePtr),y
.27eb	c9 88		cmp #$88			cmp 	#PR_PROC
.27ed	d0 03		bne $27f2			bne 	_SPNext
.27ef	20 07 28	jsr $2807			jsr 	_SPSetupRecord
.27f2					_SPNext:
.27f2	18		clc				clc 								; forward to next
.27f3	b2 18		lda ($18)			lda 	(codePtr)
.27f5	65 18		adc $18				adc 	codePtr
.27f7	85 18		sta $18				sta 	codePtr
.27f9	90 e8		bcc $27e3			bcc 	_SPLoop
.27fb	e6 19		inc $19				inc 	codePtr+1
.27fd	80 e4		bra $27e3			bra 	_SPLoop
.27ff					_SPExit:
.27ff	7a		ply				ply
.2800	68		pla				pla
.2801	85 19		sta $19				sta 	codePtr+1
.2803	68		pla				pla
.2804	85 18		sta $18				sta 	codePtr
.2806	60		rts				rts
.2807					_SPSetupRecord:
.2807	c8		iny				iny 								; check identifier follows
.2808	b1 18		lda ($18),y			lda 	(codePtr),y
.280a	29 c0		and #$c0			and 	#$C0
.280c	c9 40		cmp #$40			cmp 	#$40
.280e	d0 27		bne $2837			bne 	_SPSyntax
.2810	20 23 2e	jsr $2e23			jsr 	VARGetInfo 					; get the information
.2813	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen 				; check right bracket follows.
.2816	20 d5 2d	jsr $2dd5			jsr 	VARFind 					; already exists ?
.2819	b0 1f		bcs $283a			bcs 	_SPUsed 					; error !
.281b	20 81 2d	jsr $2d81			jsr 	VARCreate 					; create, XA points to the data.
.281e	85 24		sta $24				sta 	zTemp0
.2820	86 25		stx $25				stx 	zTemp0+1
.2822	5a		phy				phy 								; save Y pos on stack
.2823	a0 01		ldy #$01			ldy 	#1
.2825	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2827	92 24		sta ($24)			sta 	(zTemp0)
.2829	a5 19		lda $19				lda 	codePtr+1
.282b	91 24		sta ($24),y			sta 	(zTemp0),y
.282d	c8		iny				iny
.282e	68		pla				pla
.282f	91 24		sta ($24),y			sta 	(zTemp0),y
.2831	c8		iny				iny
.2832	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2834	91 24		sta ($24),y			sta 	(zTemp0),y
.2836	60		rts				rts
.2837					_SPSyntax:
.2837	4c 6a 28	jmp $286a		jmp	ErrorV_syntax
.283a					_SPUsed:
.283a	4c c1 29	jmp $29c1		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.283d					Command_WHILE:
.283d	5a		phy				phy 								; save position of the test
.283e	20 7b 18	jsr $187b			jsr 	EXPEvalNumber 				; work out the while test.
.2841	a2 08		ldx #$08			ldx 	#IFR0
.2843	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero 			; check if zero
.2846	f0 0e		beq $2856			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2848	98		tya				tya 								; position *after* test.
.2849	7a		ply				ply 								; restore position before test, at WHILE
.284a	88		dey				dey 								; so we execute the WHILE command again.
.284b	48		pha				pha 								; push after test on the stack
.284c	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.284e	20 5c 2a	jsr $2a5c			jsr 	StackOpen
.2851	20 8f 2a	jsr $2a8f			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2854	7a		ply				ply 								; restore the position *after* the test
.2855	60		rts				rts
.2856					_WHExitLoop:
.2856	68		pla				pla 								; throw post loop position
.2857	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2859	aa		tax				tax
.285a	20 7a 27	jsr $277a			jsr 	ScanForward
.285d	60		rts				rts
.285e					Command_WEND:
.285e	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2860	20 87 2a	jsr $2a87			jsr 	StackCheckFrame
.2863	20 a1 2a	jsr $2aa1			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2866	20 79 2a	jsr $2a79			jsr 	StackClose		 			; erase the frame
.2869	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.286a					ErrorV_syntax:
.286a	20 71 2c	jsr $2c71		jsr	ErrorHandler
>286d	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2875	45 72 72 6f 72 00
.287b					ErrorV_range:
.287b	20 71 2c	jsr $2c71		jsr	ErrorHandler
>287e	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2886	52 61 6e 67 65 00
.288c					ErrorV_value:
.288c	20 71 2c	jsr $2c71		jsr	ErrorHandler
>288f	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2897	75 65 00
.289a					ErrorV_type:
.289a	20 71 2c	jsr $2c71		jsr	ErrorHandler
>289d	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>28a5	73 6d 61 74 63 68 00
.28ac					ErrorV_unimplemented:
.28ac	20 71 2c	jsr $2c71		jsr	ErrorHandler
>28af	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>28b7	6c 65 6d 65 6e 74 65 64 00
.28c0					ErrorV_assert:
.28c0	20 71 2c	jsr $2c71		jsr	ErrorHandler
>28c3	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>28cb	46 61 69 6c 00
.28d0					ErrorV_internal:
.28d0	20 71 2c	jsr $2c71		jsr	ErrorHandler
>28d3	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>28db	6c 20 45 72 72 6f 72 00
.28e3					ErrorV_divzero:
.28e3	20 71 2c	jsr $2c71		jsr	ErrorHandler
>28e6	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>28ee	42 79 20 5a 65 72 6f 00
.28f6					ErrorV_structure:
.28f6	20 71 2c	jsr $2c71		jsr	ErrorHandler
>28f9	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2901	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.290e					ErrorV_stop:
.290e	20 71 2c	jsr $2c71		jsr	ErrorHandler
>2911	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2919	20 53 74 6f 70 70 65 64 00
.2922					ErrorV_data:
.2922	20 71 2c	jsr $2c71		jsr	ErrorHandler
>2925	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>292d	44 61 74 61 00
.2932					ErrorV_redefine:
.2932	20 71 2c	jsr $2c71		jsr	ErrorHandler
>2935	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>293d	65 64 65 66 69 6e 65 64 00
.2946					ErrorV_index:
.2946	20 71 2c	jsr $2c71		jsr	ErrorHandler
>2949	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2951	61 79 20 49 6e 64 65 78 00
.295a					ErrorV_memory:
.295a	20 71 2c	jsr $2c71		jsr	ErrorHandler
>295d	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2965	4d 65 6d 6f 72 79 00
.296c					ErrorV_uninitialised:
.296c	20 71 2c	jsr $2c71		jsr	ErrorHandler
>296f	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2977	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2987					ErrorV_string:
.2987	20 71 2c	jsr $2c71		jsr	ErrorHandler
>298a	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2992	69 6e 67 20 4c 65 6e 67 74 68 00
.299d					ErrorV_variable:
.299d	20 71 2c	jsr $2c71		jsr	ErrorHandler
>29a0	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>29a8	65 20 4d 69 73 73 69 6e 67 00
.29b2					ErrorV_stack:
.29b2	20 71 2c	jsr $2c71		jsr	ErrorHandler
>29b5	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>29bd	75 6c 6c 00
.29c1					ErrorV_dupproc:
.29c1	20 71 2c	jsr $2c71		jsr	ErrorHandler
>29c4	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>29cc	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>29dc	65 64 00
.29df					ErrorV_unknown:
.29df	20 71 2c	jsr $2c71		jsr	ErrorHandler
>29e2	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>29ea	20 50 72 6f 63 65 64 75 72 65 00
.29f5					ErrorV_break:
.29f5	20 71 2c	jsr $2c71		jsr	ErrorHandler
>29f8	05 42 72 65 61 6b 00			.text	5,"Break",0
.29ff					ErrorV_line:
.29ff	20 71 2c	jsr $2c71		jsr	ErrorHandler
>2a02	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2a0a	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.2a17					ErrorV_fnf:
.2a17	20 71 2c	jsr $2c71		jsr	ErrorHandler
>2a1a	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>2a22	74 20 46 6f 75 6e 64 00
.2a2a					ErrorV_full:
.2a2a	20 71 2c	jsr $2c71		jsr	ErrorHandler
>2a2d	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>2a35	20 46 75 6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2a3b					ERRCheckLParen:
.2a3b	b1 18		lda ($18),y			lda 	(codePtr),y
.2a3d	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2a3f	d0 18		bne $2a59			bne 	ERRSyntaxError
.2a41	c8		iny				iny
.2a42	60		rts				rts
.2a43					ERRCheckRParen:
.2a43	b1 18		lda ($18),y			lda 	(codePtr),y
.2a45	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2a47	d0 10		bne $2a59			bne 	ERRSyntaxError
.2a49	c8		iny				iny
.2a4a	60		rts				rts
.2a4b					ERRCheckComma:
.2a4b	b1 18		lda ($18),y			lda 	(codePtr),y
.2a4d	c9 99		cmp #$99			cmp 	#PR_COMMA
.2a4f	d0 08		bne $2a59			bne 	ERRSyntaxError
.2a51	c8		iny				iny
.2a52	60		rts				rts
.2a53					ERRCheckA:
.2a53	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2a55	d0 02		bne $2a59			bne 	ERRSyntaxError
.2a57	c8		iny				iny
.2a58	60		rts				rts
.2a59					ERRSyntaxError:
.2a59	4c 6a 28	jmp $286a		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2a5c					StackOpen:
.2a5c	48		pha				pha 								; save frame byte
.2a5d	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.2a5f	0a		asl a				asl 	a 							; claim twice this for storage
.2a60	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2a62	38		sec				sec 								; so basically subtracting from
.2a63	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.2a65	85 2c		sta $2c				sta 	basicStack
.2a67	b0 09		bcs $2a72			bcs 	_SONoBorrow
.2a69	c6 2d		dec $2d				dec 	basicStack+1
.2a6b	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.2a6d	cd 22 06	cmp $0622			cmp 	basicStackEnd
.2a70	f0 04		beq $2a76			beq 	_SOMemory
.2a72					_SONoBorrow:
.2a72	68		pla				pla 								; get marker back and write at TOS
.2a73	92 2c		sta ($2c)			sta 	(basicStack)
.2a75	60		rts				rts
.2a76					_SOMemory:
.2a76	4c b2 29	jmp $29b2		jmp	ErrorV_stack
.2a79					StackClose:
.2a79	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2a7b	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2a7d	0a		asl a				asl 	a 							; claim twice this.
.2a7e	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.2a80	85 2c		sta $2c				sta 	basicStack
.2a82	90 02		bcc $2a86			bcc 	_SCExit
.2a84	e6 2d		inc $2d				inc 	basicStack+1
.2a86					_SCExit:
.2a86	60		rts				rts
.2a87					StackCheckFrame:
.2a87	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2a89	d0 01		bne $2a8c			bne 	_SCFError 					; different, we have structures mixed up
.2a8b	60		rts				rts
.2a8c					_SCFError:
.2a8c	4c f6 28	jmp $28f6		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2a8f					STKSaveCodePosition:
.2a8f	5a		phy				phy
.2a90	98		tya				tya 								; save Y at offset 1.
.2a91	a0 01		ldy #$01			ldy 	#1
.2a93	91 2c		sta ($2c),y			sta 	(basicStack),y
.2a95	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2a97	c8		iny				iny
.2a98	91 2c		sta ($2c),y			sta 	(basicStack),y
.2a9a	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2a9c	c8		iny				iny
.2a9d	91 2c		sta ($2c),y			sta 	(basicStack),y
.2a9f	7a		ply				ply
.2aa0	60		rts				rts
.2aa1					STKLoadCodePosition:
.2aa1	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2aa3	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2aa5	85 19		sta $19				sta 	codePtr+1
.2aa7	88		dey				dey
.2aa8	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2aaa	85 18		sta $18				sta 	codePtr
.2aac	88		dey				dey
.2aad	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.2aaf	a8		tay				tay
.2ab0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2ab1					StackReset:
.2ab1	48		pha				pha 								; save top of memory
.2ab2	3a		dec a				dec 	a  							; end of stack = previous byte
.2ab3	85 2d		sta $2d				sta 	basicStack+1
.2ab5	a9 ff		lda #$ff			lda 	#$FF
.2ab7	85 2c		sta $2c				sta 	basicStack
.2ab9	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2abb	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2abd	68		pla				pla 								; allocate pages for stack.
.2abe	38		sec				sec
.2abf	e9 02		sbc #$02			sbc 	#STACKPAGES
.2ac1	8d 22 06	sta $0622			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2ac4	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0622					basicStackEnd:
>0622							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2ac5					StringConcrete:
.2ac5	5a		phy				phy 								; save position on stack
.2ac6	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2ac8	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2aca	b0 41		bcs $2b0d			bcs 	_SALengthError
.2acc	18		clc				clc 								; length of the new string
.2acd	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2acf	90 02		bcc $2ad3			bcc 	_SAHaveLength
.2ad1	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2ad3					_SAHaveLength:
.2ad3	48		pha				pha 								; save length to be allocated for concreting.
.2ad4	38		sec				sec
.2ad5	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2ad7	6d 24 06	adc $0624			adc 	stringMemory
.2ada	8d 24 06	sta $0624			sta 	stringMemory
.2add	85 28		sta $28				sta 	zTemp2 						; update storage address
.2adf	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2ae1	6d 25 06	adc $0625			adc 	stringMemory+1
.2ae4	8d 25 06	sta $0625			sta 	stringMemory+1
.2ae7	85 29		sta $29				sta 	zTemp2+1
.2ae9	68		pla				pla 								; save length allocated in +0
.2aea	92 28		sta ($28)			sta 	(zTemp2)
.2aec	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2aee	a0 01		ldy #$01			ldy 	#1
.2af0	91 28		sta ($28),y			sta 	(zTemp2),y
.2af2					_SACopyNewString:
.2af2	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2af4	a0 02		ldy #$02			ldy 	#2
.2af6	91 28		sta ($28),y			sta 	(zTemp2),y
.2af8	aa		tax				tax 								; bytes to copy
.2af9	f0 0c		beq $2b07			beq 	_SACopyExit
.2afb	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2afd					_SACopyNSLoop:
.2afd	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2aff	c8		iny				iny 								; write two on in string storage
.2b00	c8		iny				iny
.2b01	91 28		sta ($28),y			sta 	(zTemp2),y
.2b03	88		dey				dey
.2b04	ca		dex				dex									; until copied all the string lengths.
.2b05	d0 f6		bne $2afd			bne 	_SACopyNSLoop
.2b07					_SACopyExit:
.2b07	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2b09	a5 28		lda $28				lda 	zTemp2
.2b0b	7a		ply				ply
.2b0c	60		rts				rts
.2b0d					_SALengthError:
.2b0d	4c 87 29	jmp $2987		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2b10					StringSystemInitialise:
.2b10	3a		dec a				dec 	a 							; make last byte of previous page.
.2b11	8d 25 06	sta $0625			sta 	stringMemory+1
.2b14	85 25		sta $25				sta 	zTemp0+1
.2b16	a9 ff		lda #$ff			lda 	#$FF
.2b18	8d 24 06	sta $0624			sta 	stringMemory
.2b1b	85 24		sta $24				sta 	zTemp0
.2b1d	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2b1f	92 24		sta ($24)			sta 	(zTemp0)
.2b21	60		rts				rts
.2b22					StringSpaceInitialise:
.2b22	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2b24	8d 23 06	sta $0623			sta 	stringInitialised
.2b27	ad 24 06	lda $0624			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2b2a	8d 26 06	sta $0626			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2b2d	ad 25 06	lda $0625			lda 	stringMemory+1
.2b30	3a		dec a				dec 	a
.2b31	8d 27 06	sta $0627			sta 	stringTempPointer+1
.2b34	20 ae 11	jsr $11ae			jsr 	ClearCheckMemory
.2b37	60		rts				rts
.2b38					StringTempAllocate:
.2b38	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2b3a	b0 2e		bcs $2b6a			bcs 	_STALength
.2b3c	2c 23 06	bit $0623			bit 	stringInitialised 			; already initialised
.2b3f	30 05		bmi $2b46			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.2b41	48		pha				pha 								; save value to subtract.
.2b42	20 22 2b	jsr $2b22			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2b45	68		pla				pla 								; restore it
.2b46					_STAAllocate:
.2b46	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2b48	18		clc				clc  								; deliberate allows one more
.2b49	6d 26 06	adc $0626			adc 	stringTempPointer 			; subtract from temp pointer
.2b4c	8d 26 06	sta $0626			sta 	stringTempPointer
.2b4f	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2b51	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2b53	ad 27 06	lda $0627			lda 	stringTempPointer+1
.2b56	69 ff		adc #$ff			adc 	#$FF
.2b58	8d 27 06	sta $0627			sta 	stringTempPointer+1
.2b5b	85 2f		sta $2f				sta 	zsTemp+1
.2b5d	85 09		sta $09				sta 	IFR0+IM1
.2b5f	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2b61	a9 80		lda #$80			lda 	#$80
.2b63	85 0b		sta $0b				sta 	IFR0+IExp
.2b65	a9 00		lda #$00			lda 	#0 							; clear the target string
.2b67	92 2e		sta ($2e)			sta 	(zsTemp)
.2b69	60		rts				rts
.2b6a					_STALength:
.2b6a	4c 87 29	jmp $2987		jmp	ErrorV_string
.2b6d					StringTempWrite:
.2b6d	5a		phy				phy
.2b6e	48		pha				pha
.2b6f	b2 2e		lda ($2e)			lda 	(zsTemp)
.2b71	1a		inc a				inc 	a
.2b72	92 2e		sta ($2e)			sta 	(zsTemp)
.2b74	a8		tay				tay
.2b75	68		pla				pla
.2b76	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2b78	7a		ply				ply
.2b79	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0623					stringInitialised:
>0623							.fill 	1
.0624					stringMemory:
>0624							.fill 	2
.0626					stringTempPointer:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2b7a					Command_DIR:
.2b7a	5a		phy				phy
.2b7b	38		sec				sec 								; reset read
.2b7c	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2b7f	18		clc		_CDLoop:clc
.2b80	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2b83	b0 27		bcs $2bac			bcs 	_CDExit 					; no more
.2b85	86 24		stx $24				stx 	zTemp0
.2b87	84 25		sty $25				sty 	zTemp0+1
.2b89	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2b8c					_CDPad:
.2b8c	a9 20		lda #$20			lda 	#32
.2b8e	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2b91	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2b94	e0 10		cpx #$10			cpx 	#16
.2b96	90 f4		bcc $2b8c			bcc 	_CDPad
.2b98	a0 11		ldy #$11			ldy 	#17
.2b9a	b1 24		lda ($24),y			lda 	(zTemp0),y
.2b9c	aa		tax				tax
.2b9d	88		dey				dey
.2b9e	b1 24		lda ($24),y			lda 	(zTemp0),y
.2ba0	20 9a 2c	jsr $2c9a			jsr 	WriteIntXA
.2ba3	a2 ae		ldx #$ae			ldx 	#_CDTail & $FF
.2ba5	a0 2b		ldy #$2b			ldy 	#_CDTail >> 8
.2ba7	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2baa	80 d3		bra $2b7f			bra 	_CDLoop
.2bac	7a		ply		_CDExit:ply
.2bad	60		rts				rts
.2bae					_CDTail:
>2bae	08						.byte 	_CDTail2-*-1
>2baf	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2bb7					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2bb7					Command_ERASE:
.2bb7	20 c9 2b	jsr $2bc9			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2bba	5a		phy				phy
.2bbb	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2bbd	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2bbf	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2bc2	7a		ply				ply
.2bc3	b0 01		bcs $2bc6			bcs 	_CEFail
.2bc5	60		rts				rts
.2bc6					_CEFail:
.2bc6	4c 17 2a	jmp $2a17		jmp	ErrorV_fnf
.2bc9					FileSetupBlock:
.2bc9	20 a5 18	jsr $18a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.2bcc	a5 24		lda $24				lda 	zTemp0 							; address to name
.2bce	8d 28 06	sta $0628			sta 	FSBBlock
.2bd1	a5 25		lda $25				lda 	zTemp0+1
.2bd3	8d 29 06	sta $0629			sta 	FSBBlock+1 						; zero the rest.
.2bd6	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2bd9	9c 2b 06	stz $062b			stz 	FSBBlock+3
.2bdc	9c 2c 06	stz $062c			stz 	FSBBlock+4
.2bdf	9c 2d 06	stz $062d			stz 	FSBBlock+5
.2be2	60		rts				rts
.0628					FSBBlock:
>0628							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2be3					Command_LOAD:
.2be3	20 c9 2b	jsr $2bc9			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2be6	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; set load address
.2be9	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2bec	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2bef	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2bf1	48		pha				pha
.2bf2	20 0f 2c	jsr $2c0f			jsr	 	FileCheckSecondParam
.2bf5	5a		phy				phy
.2bf6	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2bf8	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2bfa	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2bfd	7a		ply				ply
.2bfe	b0 0c		bcs $2c0c			bcs 	_CLFail
.2c00	68		pla				pla 								; load program
.2c01	c9 99		cmp #$99			cmp 	#PR_COMMA
.2c03	f0 06		beq $2c0b			beq 	_CLNoClear
.2c05	20 68 11	jsr $1168			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2c08	4c b9 2c	jmp $2cb9			jmp 	WarmStart 					; and warm start
.2c0b					_CLNoClear:
.2c0b	60		rts				rts
.2c0c					_CLFail:
.2c0c	4c 17 2a	jmp $2a17		jmp	ErrorV_fnf
.2c0f					FileCheckSecondParam:
.2c0f	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2c11	c9 99		cmp #$99			cmp 	#PR_COMMA
.2c13	d0 0e		bne $2c23			bne 	_FCSPExit
.2c15	c8		iny				iny 								; consume
.2c16	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; get address
.2c19	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2c1b	8d 2a 06	sta $062a			sta 	FSBBlock+2
.2c1e	a5 09		lda $09				lda 	IFR0+IM1
.2c20	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2c23					_FCSPExit:
.2c23	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2c24					Command_SAVE:
.2c24	20 c9 2b	jsr $2bc9			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2c27	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2c29	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2c2b	f0 22		beq $2c4f			beq 	_CLSaveBlock 				; save "Name",from,size
.2c2d	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; set load address
.2c30	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2c33	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2c36	20 39 22	jsr $2239			jsr		PGMEndProgram 				; end of program -> zTemp0
.2c39	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2c3b	d0 02		bne $2c3f			bne 	_CLNoCarry
.2c3d	e6 25		inc $25				inc 	zTemp0+1
.2c3f					_CLNoCarry:
.2c3f	a5 24		lda $24				lda 	zTemp0
.2c41	8d 2c 06	sta $062c			sta 	FSBBlock+4
.2c44	38		sec				sec
.2c45	a5 25		lda $25				lda 	zTemp0+1
.2c47	ed 2b 06	sbc $062b			sbc 	FSBBlock+3
.2c4a	8d 2d 06	sta $062d			sta 	FSBBlock+5
.2c4d	80 13		bra $2c62			bra 	_CSSave
.2c4f					_CLSaveBlock:
.2c4f	20 0f 2c	jsr $2c0f			jsr 	FileCheckSecondParam 		; the address to save from.
.2c52	20 4b 2a	jsr $2a4b			jsr 	ERRCheckComma
.2c55	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; get size
.2c58	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2c5a	8d 2c 06	sta $062c			sta 	FSBBlock+4
.2c5d	a5 09		lda $09				lda 	IFR0+IM1
.2c5f	8d 2d 06	sta $062d			sta 	FSBBlock+5
.2c62					_CSSave:
.2c62	5a		phy				phy
.2c63	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2c65	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2c67	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2c6a	7a		ply				ply
.2c6b	b0 01		bcs $2c6e			bcs 	_CSFail
.2c6d	60		rts				rts
.2c6e					_CSFail:
.2c6e	4c 2a 2a	jmp $2a2a		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2c71					ErrorHandler:
.2c71	fa		plx				plx 								; get address of msg
.2c72	7a		ply				ply
.2c73	e8		inx				inx 								; bump past RTS
.2c74	d0 01		bne $2c77			bne 	_EHNoInc
.2c76	c8		iny				iny
.2c77					_EHNoInc:
.2c77	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2c7a	ad 2e 06	lda $062e			lda 	ERRLine 					; direct command ?
.2c7d	0d 2f 06	ora $062f			ora 	ERRLine+1
.2c80	f0 10		beq $2c92			beq 	_EHNoNumber
.2c82	a2 95		ldx #$95			ldx 	#_EHAtMsg & $FF
.2c84	a0 2c		ldy #$2c			ldy 	#_EHAtMsg >> 8
.2c86	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2c89	ad 2e 06	lda $062e			lda 	ERRLine 					; line number -> XA
.2c8c	ae 2f 06	ldx $062f			ldx 	ERRLine+1
.2c8f	20 9a 2c	jsr $2c9a			jsr 	WriteIntXA
.2c92					_EHNoNumber:
.2c92	4c c3 2c	jmp $2cc3			jmp 	WarmStartNewLine
.2c95					_EHAtMsg:
>2c95	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2c9a					_EHAtMsg1:
.2c9a					WriteIntXA:
.2c9a	da		phx				phx
.2c9b	48		pha				pha
.2c9c	a2 08		ldx #$08			ldx 	#IFR0
.2c9e	20 2f 34	jsr $342f			jsr 	IFloatPushRx
.2ca1	68		pla				pla
.2ca2	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.2ca5	68		pla				pla
.2ca6	85 09		sta $09				sta 	IFR0+IM1
.2ca8	a9 0a		lda #$0a			lda 	#10 						; decimal
.2caa	20 82 32	jsr $3282			jsr 	IFloatIntegerToStringR0	 	; convert
.2cad	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2cb0	a2 08		ldx #$08			ldx 	#IFR0
.2cb2	20 50 34	jsr $3450			jsr 	IFloatPullRx
.2cb5	60		rts				rts
.2cb6					NotImplemented:
.2cb6	4c ac 28	jmp $28ac		jmp	ErrorV_unimplemented
.062e					ERRLine:
>062e							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2cb9					WarmStart:
.2cb9	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2cbb	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2cbe	a9 6b		lda #$6b			lda 	#"k"
.2cc0	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2cc3					WarmStartNewLine:
.2cc3	a9 0d		lda #$0d			lda 	#13
.2cc5	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2cc8					WarmStartNoPrompt:
.2cc8	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2cca	9a		txs				txs
.2ccb	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2cce	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2ccf	d0 01		bne $2cd2			bne 	_WSSkip
.2cd1	c8		iny				iny
.2cd2					_WSSkip:
.2cd2	86 28		stx $28				stx 	zTemp2 						; save address
.2cd4	84 29		sty $29				sty 	zTemp2+1
.2cd6	b2 28		lda ($28)			lda 	(zTemp2)
.2cd8	f0 ee		beq $2cc8			beq 	WarmStartNoPrompt 			; ignore empty line.
.2cda	a2 0c		ldx #$0c			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2cdc	a0 2d		ldy #$2d			ldy 	#TOKGetCharacter >> 8
.2cde	38		sec				sec
.2cdf	20 ab 22	jsr $22ab			jsr 	TOKTokenise
.2ce2	b0 25		bcs $2d09			bcs 	_WSSyntax
.2ce4	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2ce7	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2cea	d0 0b		bne $2cf7			bne 	_WSLineEdit
.2cec	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2cee	85 18		sta $18				sta 	codePtr
.2cf0	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2cf2	85 19		sta $19				sta 	codePtr+1
.2cf4	4c 47 16	jmp $1647			jmp 	RUNNewLine
.2cf7					_WSLineEdit:
.2cf7	20 86 21	jsr $2186			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2cfa	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2cfd	c9 04		cmp #$04			cmp 	#4
.2cff	f0 03		beq $2d04			beq 	_WSNoInsert
.2d01	20 d0 21	jsr $21d0			jsr 	PGMInsertLine				; if not, maybe insert
.2d04					_WSNoInsert:
.2d04	20 68 11	jsr $1168			jsr 	ClearCode 					; clear variables etc.
.2d07	80 bf		bra $2cc8			bra 	WarmStartNoPrompt
.2d09					_WSSyntax:
.2d09	4c 6a 28	jmp $286a		jmp	ErrorV_syntax
.2d0c					TOKGetCharacter:
.2d0c	b2 28		lda ($28)			lda 	(zTemp2)
.2d0e	90 06		bcc $2d16			bcc 	_GSNoIncrement
.2d10	e6 28		inc $28				inc 	zTemp2
.2d12	d0 02		bne $2d16			bne 	_GSNoIncrement
.2d14	e6 29		inc $29				inc 	zTemp2+1
.2d16					_GSNoIncrement:
.2d16	c9 00		cmp #$00			cmp 	#0
.2d18	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2d19					VARArrayLookup:
.2d19	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2d1b	86 25		stx $25				stx 	zTemp0+1
.2d1d	b2 24		lda ($24)			lda 	(zTemp0)
.2d1f	48		pha				pha
.2d20	5a		phy				phy
.2d21	a0 01		ldy #$01			ldy 	#1
.2d23	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d25	7a		ply				ply
.2d26	48		pha				pha
.2d27	20 8d 18	jsr $188d			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2d2a	68		pla				pla 								; array address to zTemp0
.2d2b	85 25		sta $25				sta 	zTemp0+1
.2d2d	68		pla				pla
.2d2e	85 24		sta $24				sta 	zTemp0
.2d30	5a		phy				phy 								; save codePtr position.
.2d31	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2d33	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d35	48		pha				pha 								; save bit 15 on stack.
.2d36	29 7f		and #$7f			and 	#$7F
.2d38	85 26		sta $26				sta 	zTemp1
.2d3a	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2d3c	d2 24		cmp ($24)			cmp 	(zTemp0)
.2d3e	a5 09		lda $09				lda 	IFR0+IM1
.2d40	e5 26		sbc $26				sbc 	zTemp1
.2d42	b0 3a		bcs $2d7e			bcs 	_VALIndex
.2d44	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2d46	c9 40		cmp #$40			cmp 	#$40
.2d48	b0 34		bcs $2d7e			bcs 	_VALIndex
.2d4a	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2d4c	26 09		rol $09				rol 	IFR0+IM1
.2d4e	fa		plx				plx 								; get msb of size -> X
.2d4f	30 04		bmi $2d55			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2d51	06 08		asl $08				asl 	IFR0+IM0
.2d53	26 09		rol $09				rol 	IFR0+IM1
.2d55					_VARNotX4:
.2d55	18		clc				clc 								; add the two for the size bytes
.2d56	a5 08		lda $08				lda 	IFR0+IM0
.2d58	69 02		adc #$02			adc 	#2
.2d5a	85 08		sta $08				sta 	IFR0+IM0
.2d5c	90 02		bcc $2d60			bcc 	_VARNoCarry1
.2d5e	e6 09		inc $09				inc 	IFR0+IM1
.2d60					_VARNoCarry1:
.2d60	18		clc				clc 								; calculate the element address and push to stack.
.2d61	a5 08		lda $08				lda 	IFR0+IM0
.2d63	65 24		adc $24				adc 	zTemp0
.2d65	48		pha				pha
.2d66	a5 09		lda $09				lda 	IFR0+IM1
.2d68	65 25		adc $25				adc 	zTemp0+1
.2d6a	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2d6c	30 04		bmi $2d72			bmi 	_VARHasSubLevel
.2d6e	aa		tax				tax 								; address in XA
.2d6f	68		pla				pla
.2d70	7a		ply				ply 								; restore Y and exit
.2d71	60		rts				rts
.2d72					_VARHasSubLevel:
.2d72	aa		tax				tax 								; get link address in XA
.2d73	68		pla				pla
.2d74	7a		ply				ply 								; restore code position.
.2d75	48		pha				pha
.2d76	20 4b 2a	jsr $2a4b			jsr 	ERRCheckComma 				; comma required.
.2d79	68		pla				pla
.2d7a	20 19 2d	jsr $2d19			jsr 	VARArrayLookup 				; call it recursively
.2d7d	60		rts				rts
.2d7e					_VALIndex:
.2d7e	4c 46 29	jmp $2946		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2d81					VARCreate:
.2d81	5a		phy				phy
.2d82	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2d84	a2 00		ldx #$00			ldx 	#0
.2d86	20 85 11	jsr $1185			jsr 	AllocateMemory
.2d89	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2d8b	86 27		stx $27				stx 	zTemp1+1
.2d8d	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2d8f	ad 32 06	lda $0632			lda 	VARHash
.2d92	91 26		sta ($26),y			sta 	(zTemp1),y
.2d94	c8		iny				iny 								; put address of name into +3,+4
.2d95	ad 30 06	lda $0630			lda 	VARNameAddress
.2d98	91 26		sta ($26),y			sta 	(zTemp1),y
.2d9a	c8		iny				iny
.2d9b	ad 31 06	lda $0631			lda 	VARNameAddress+1
.2d9e	91 26		sta ($26),y			sta 	(zTemp1),y
.2da0	ad 33 06	lda $0633			lda 	VARType
.2da3	29 01		and #$01			and 	#1
.2da5	f0 06		beq $2dad			beq 	_CVNotString
.2da7	a0 08		ldy #$08			ldy 	#5+3
.2da9	a9 80		lda #$80			lda 	#$80
.2dab	91 26		sta ($26),y			sta 	(zTemp1),y
.2dad					_CVNotString:
.2dad	ad 54 06	lda $0654			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2db0	85 24		sta $24				sta 	zTemp0
.2db2	ad 55 06	lda $0655			lda 	VARHashEntry+1
.2db5	85 25		sta $25				sta 	zTemp0+1
.2db7	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2db9	b2 24		lda ($24)			lda 	(zTemp0)
.2dbb	92 26		sta ($26)			sta 	(zTemp1)
.2dbd	b1 24		lda ($24),y			lda 	(zTemp0),y
.2dbf	91 26		sta ($26),y			sta 	(zTemp1),y
.2dc1	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2dc3	92 24		sta ($24)			sta 	(zTemp0)
.2dc5	a5 27		lda $27				lda 	zTemp1+1
.2dc7	91 24		sta ($24),y			sta 	(zTemp0),y
.2dc9	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2dcb	a6 27		ldx $27				ldx 	zTemp1+1
.2dcd	18		clc				clc 								; add 5 to point to the data.
.2dce	69 05		adc #$05			adc 	#5
.2dd0	90 01		bcc $2dd3			bcc 	_VCNoCarry
.2dd2	e8		inx				inx
.2dd3					_VCNoCarry:
.2dd3	7a		ply				ply
.2dd4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2dd5					VARFind:
.2dd5	5a		phy				phy
.2dd6	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2dd8	b1 24		lda ($24),y			lda 	(zTemp0),y
.2dda	85 27		sta $27				sta 	zTemp1+1
.2ddc	f0 1c		beq $2dfa			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2dde	b2 24		lda ($24)			lda 	(zTemp0)
.2de0	85 26		sta $26				sta 	zTemp1
.2de2					_VFLoop:
.2de2	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2de4	b1 26		lda ($26),y			lda 	(zTemp1),y
.2de6	cd 32 06	cmp $0632			cmp 	VARHash
.2de9	f0 12		beq $2dfd			beq 	_VFHashesMatch 				; if so, check the name.
.2deb					_VFNext:
.2deb	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2ded	aa		tax				tax
.2dee	a0 01		ldy #$01			ldy 	#1
.2df0	b1 26		lda ($26),y			lda 	(zTemp1),y
.2df2	85 27		sta $27				sta 	zTemp1+1
.2df4	86 26		stx $26				stx 	zTemp1
.2df6	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2df8	d0 e8		bne $2de2			bne 	_VFLoop
.2dfa					_VFExitFail:
.2dfa	7a		ply				ply
.2dfb	18		clc				clc
.2dfc	60		rts				rts
.2dfd					_VFHashesMatch:
.2dfd	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2dff	b1 26		lda ($26),y			lda 	(zTemp1),y
.2e01	85 28		sta $28				sta 	zTemp2
.2e03	c8		iny				iny
.2e04	b1 26		lda ($26),y			lda 	(zTemp1),y
.2e06	85 29		sta $29				sta 	zTemp2+1
.2e08	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2e0a					_VFNameCompLoop:
.2e0a	c8		iny				iny 								; char at a time
.2e0b	b9 34 06	lda $0634,y			lda 	VARBuffer,y
.2e0e	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2e10	d0 d9		bne $2deb			bne 	_VFNext						; next entry if different.
.2e12	c9 7c		cmp #$7c			cmp 	#$7C
.2e14	90 f4		bcc $2e0a			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2e16	18		clc				clc
.2e17	a5 26		lda $26				lda 	zTemp1
.2e19	a6 27		ldx $27				ldx 	zTemp1+1
.2e1b	69 05		adc #$05			adc 	#5
.2e1d	90 01		bcc $2e20			bcc 	_VFNNoCarry
.2e1f	e8		inx				inx
.2e20					_VFNNoCarry:
.2e20	7a		ply				ply
.2e21	38		sec				sec
.2e22	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2e23					VARGetInfo:
.2e23	98		tya				tya 								; calculate the address of the identifier start.
.2e24	18		clc				clc
.2e25	65 18		adc $18				adc 	codePtr
.2e27	8d 30 06	sta $0630			sta 	VARNameAddress
.2e2a	a5 19		lda $19				lda 	codePtr+1
.2e2c	69 00		adc #$00			adc 	#0
.2e2e	8d 31 06	sta $0631			sta 	VARNameAddress+1
.2e31	9c 32 06	stz $0632			stz 	VARHash
.2e34	a2 00		ldx #$00			ldx 	#0
.2e36					_VARCopyName:
.2e36	18		clc				clc 								; update the sum hash.
.2e37	ad 32 06	lda $0632			lda 	VARHash
.2e3a	71 18		adc ($18),y			adc 	(codePtr),y
.2e3c	8d 32 06	sta $0632			sta 	VARHash
.2e3f	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2e41	c8		iny				iny
.2e42	9d 34 06	sta $0634,x			sta 	VARBuffer,x
.2e45	e8		inx				inx
.2e46	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2e48	90 ec		bcc $2e36			bcc 	_VARCopyName
.2e4a	8d 33 06	sta $0633			sta 	VARType 					; save type byte
.2e4d	29 03		and #$03			and 	#3 							; type is 0-3
.2e4f	0a		asl a				asl 	a
.2e50	0a		asl a				asl 	a
.2e51	85 24		sta $24				sta 	zTemp0
.2e53	ad 32 06	lda $0632			lda 	VARHash 					; force into range of hash entries per type.
.2e56	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2e58	65 24		adc $24				adc 	zTemp0 						; index of hash table
.2e5a	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2e5b	69 56		adc #$56			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2e5d	85 24		sta $24				sta 	zTemp0
.2e5f	8d 54 06	sta $0654			sta 	VARHashEntry
.2e62	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2e64	69 00		adc #$00			adc 	#0
.2e66	85 25		sta $25				sta 	zTemp0+1
.2e68	8d 55 06	sta $0655			sta 	VARHashEntry+1
.2e6b	60		rts				rts
.2e6c					VARClearHashTables:
.2e6c	a2 00		ldx #$00			ldx 	#0
.2e6e					_VCHRLoop:
.2e6e	a9 00		lda #$00			lda 	#0
.2e70	9d 56 06	sta $0656,x			sta 	VARHashTables,x
.2e73	e8		inx				inx
.2e74	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2e76	d0 f6		bne $2e6e			bne 	_VCHRLoop
.2e78	60		rts				rts
.0630					VARNameAddress:
>0630							.fill 	2
.0632					VARHash:
>0632							.fill 	1
.0633					VARType:
>0633							.fill 	1
.0634					VARBuffer:
>0634							.fill 	32
.0654					VARHashEntry:
>0654							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0656					VARHashTables:
>0656							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2e79					VARCheckSimple:
.2e79	aa		tax				tax 								; save in X
.2e7a	b1 18		lda ($18),y			lda 	(codePtr),y
.2e7c	c9 7c		cmp #$7c			cmp 	#$7C
.2e7e	d0 15		bne $2e95			bne 	_VCSComplex
.2e80	c8		iny				iny 								; consume the second byte, the type.
.2e81	8a		txa				txa  								; character (40-7F) x 4
.2e82	0a		asl a				asl 	a
.2e83	0a		asl a				asl  	a
.2e84	18		clc				clc
.2e85	69 76		adc #$76			adc 	#FastVariables & $FF
.2e87	85 08		sta $08				sta 	IFR0+IM0
.2e89	a9 06		lda #$06			lda 	#FastVariables >> 8
.2e8b	69 00		adc #$00			adc 	#0
.2e8d	85 09		sta $09				sta 	IFR0+IM1
.2e8f	64 0a		stz $0a				stz 	IFR0+IM2
.2e91	64 0b		stz $0b				stz 	IFR0+IExp
.2e93	38		sec				sec 								; it's a reference
.2e94	60		rts				rts
.2e95					_VCSComplex:
.2e95	88		dey				dey	 								; extract information.
.2e96	20 23 2e	jsr $2e23			jsr 	VARGetInfo
.2e99	20 d5 2d	jsr $2dd5			jsr 	VARFind 					; search for variable
.2e9c	b0 0a		bcs $2ea8			bcs 	_VCSHaveVariable
.2e9e	ad 33 06	lda $0633			lda 	VARType 					; error if arrays, cannot autocreate
.2ea1	29 02		and #$02			and 	#2
.2ea3	d0 25		bne $2eca			bne 	_VCNoCreate
.2ea5	20 81 2d	jsr $2d81			jsr 	VARCreate 					; create variable
.2ea8					_VCSHaveVariable:
.2ea8	48		pha				pha 								; save LSB on the stack
.2ea9	ad 33 06	lda $0633			lda 	VARType 					; get var type, and shift bit 1 into carry
.2eac	6a		ror a				ror 	a
.2ead	6a		ror a				ror 	a
.2eae	68		pla				pla 								; restore LSB
.2eaf	90 08		bcc $2eb9			bcc 	_VCSNotArray 				; skip if not an array
.2eb1	20 19 2d	jsr $2d19			jsr 	VARArrayLookup 				; look for subscripts.
.2eb4	48		pha				pha 								; check )
.2eb5	20 43 2a	jsr $2a43			jsr 	ERRCheckRParen
.2eb8	68		pla				pla
.2eb9					_VCSNotArray:
.2eb9	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2ebb	85 08		sta $08				sta 	IFR0+IM0
.2ebd	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2ebf	ad 33 06	lda $0633			lda 	VARType 					; number/string bit into carry
.2ec2	6a		ror a				ror 	a
.2ec3	a9 00		lda #$00			lda 	#0
.2ec5	6a		ror a				ror 	a 							; now $00 or $80
.2ec6	85 0b		sta $0b				sta 	IFR0+IExp
.2ec8	38		sec				sec 								; it's a reference
.2ec9	60		rts				rts
.2eca					_VCNoCreate:
.2eca	4c 6c 29	jmp $296c		jmp	ErrorV_uninitialised
.0676					FastVariables:
>0676							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2ecd					IFInitialise:
.2ecd	9c e6 06	stz $06e6			stz 	IFStackIndex 				; reset the internal stack.
.2ed0	60		rts				rts
.2ed1					IFloatSubtract:
.2ed1	da		phx				phx
.2ed2	a2 08		ldx #$08			ldx 	#IFR0
.2ed4	20 eb 34	jsr $34eb			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2ed7	fa		plx				plx
.2ed8					IFloatAdd:
.2ed8	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2eda	05 0b		ora $0b				ora 	IFR0+IExp
.2edc	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2ede	d0 4e		bne $2f2e			bne 	_IFloatAddDecimals 			; floating point version.
.2ee0					_IFAddSubMantissa:
.2ee0	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2ee2	45 0b		eor $0b				eor 	IFR0+IExp
.2ee4	29 40		and #$40			and 	#IFSign
.2ee6	d0 21		bne $2f09			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2ee8	18		clc				clc 								; do the actual addition
.2ee9	a5 08		lda $08				lda 	IFR0+IM0
.2eeb	75 00		adc $00,x			adc 		IM0,x
.2eed	85 08		sta $08				sta 	IFR0+IM0
.2eef	a5 09		lda $09				lda 	IFR0+IM1
.2ef1	75 01		adc $01,x			adc 		IM1,x
.2ef3	85 09		sta $09				sta 	IFR0+IM1
.2ef5	a5 0a		lda $0a				lda 	IFR0+IM2
.2ef7	75 02		adc $02,x			adc 		IM2,x
.2ef9	85 0a		sta $0a				sta 	IFR0+IM2
.2efb	10 29		bpl $2f26			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2efd	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2eff	20 0f 35	jsr $350f			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2f02	20 39 35	jsr $3539			jsr 	IFloatIncExponent
.2f05	d0 1f		bne $2f26			bne 	_IFloatAddExit
.2f07	38		sec				sec 								; overflowed numerically.
.2f08	60		rts				rts
.2f09					_IFloatSubMantissa:
.2f09	38		sec				sec 								; do the subtraction R0-Rx
.2f0a	a5 08		lda $08				lda 	IFR0+IM0
.2f0c	f5 00		sbc $00,x			sbc 		IM0,x
.2f0e	85 08		sta $08				sta 	IFR0+IM0
.2f10	a5 09		lda $09				lda 	IFR0+IM1
.2f12	f5 01		sbc $01,x			sbc 		IM1,x
.2f14	85 09		sta $09				sta 	IFR0+IM1
.2f16	a5 0a		lda $0a				lda 	IFR0+IM2
.2f18	f5 02		sbc $02,x			sbc 		IM2,x
.2f1a	85 0a		sta $0a				sta 	IFR0+IM2
.2f1c	b0 08		bcs $2f26			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2f1e	a2 08		ldx #$08			ldx 	#IFR0
.2f20	20 f3 34	jsr $34f3			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2f23	20 eb 34	jsr $34eb			jsr 	IFloatNegate 				; negate the result using sign bit.
.2f26					_IFloatAddExit:
.2f26	18		clc				clc
.2f27	60		rts				rts
.2f28					_IFloatZeroAdd:
.2f28	fa		plx				plx 								; return this value in R0
.2f29	20 71 34	jsr $3471			jsr 	IFloatCopyFromRegister
.2f2c	18		clc				clc
.2f2d	60		rts				rts
.2f2e					_IFloatAddDecimals:
.2f2e	20 d9 34	jsr $34d9			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2f31	f0 f3		beq $2f26			beq 	_IFloatAddExit
.2f33	20 17 35	jsr $3517			jsr 	IFloatNormalise 			; normalise RX
.2f36	da		phx				phx 								; normalise R0
.2f37	a2 08		ldx #$08			ldx 	#IFR0
.2f39	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero
.2f3c	f0 ea		beq $2f28			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2f3e	20 17 35	jsr $3517			jsr 	IFloatNormalise
.2f41	fa		plx				plx
.2f42	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2f44	29 3f		and #$3f			and 	#IFXMask
.2f46	38		sec				sec
.2f47	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2f49	85 20		sta $20				sta 	iTemp0
.2f4b	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2f4d	29 3f		and #$3f			and 	#IFXMask
.2f4f	38		sec				sec
.2f50	e9 20		sbc #$20			sbc 	#$20
.2f52	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2f54	b0 02		bcs $2f58			bcs 	_IFloatHaveLarger
.2f56	a5 20		lda $20				lda 	iTemp0
.2f58					_IFloatHaveLarger:
.2f58	18		clc				clc 								; get the actual one back.
.2f59	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2f5b	20 68 2f	jsr $2f68			jsr 	_IFShiftXToA
.2f5e	da		phx				phx
.2f5f	a2 08		ldx #$08			ldx 	#IFR0
.2f61	20 68 2f	jsr $2f68			jsr 	_IFShiftXToA
.2f64	fa		plx				plx
.2f65	4c e0 2e	jmp $2ee0			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2f68					_IFShiftXToA:
.2f68	8d de 06	sta $06de			sta 	IFTarget
.2f6b	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero 			; check adding zero ?
.2f6e	f0 11		beq $2f81			beq 	_IFSXExit
.2f70					_IFSXLoop:
.2f70	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2f72	29 3f		and #$3f			and 	#IFXMask
.2f74	cd de 06	cmp $06de			cmp 	IFTarget
.2f77	f0 08		beq $2f81			beq 	_IFSXExit
.2f79	20 0f 35	jsr $350f			jsr 	IFloatShiftRight
.2f7c	20 39 35	jsr $3539			jsr 	IFloatIncExponent
.2f7f	80 ef		bra $2f70			bra 	_IFSXLoop
.2f81					_IFSXExit:
.2f81	60		rts				rts
.06de					IFTarget:
>06de							.fill 	1
.2f82					IFloatMultiply:
.2f82	8e de 06	stx $06de			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2f85	20 3a 30	jsr $303a			jsr 	IFCalculateNewSign
.2f88	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2f8a	05 0b		ora $0b				ora 	IFR0+IExp
.2f8c	29 3f		and #$3f			and 	#IFXMask
.2f8e	15 01		ora $01,x			ora 	IM1,x
.2f90	05 09		ora $09				ora 	IFR0+IM1
.2f92	15 02		ora $02,x			ora 	IM2,x
.2f94	05 0a		ora $0a				ora 	IFR0+IM2
.2f96	d0 0a		bne $2fa2			bne 	_IFMStandard
.2f98	20 bc 34	jsr $34bc			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2f9b	ad e0 06	lda $06e0			lda 	IFNewSign
.2f9e	85 0b		sta $0b				sta 	IFR0+IExp
.2fa0	18		clc				clc
.2fa1	60		rts				rts
.2fa2					_IFMStandard:
.2fa2	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2fa4	20 31 30	jsr $3031			jsr 	IFMSignExtend
.2fa7	8d df 06	sta $06df			sta 	IFNewExponent
.2faa	a5 0b		lda $0b				lda 	IFR0+IExp
.2fac	20 31 30	jsr $3031			jsr 	IFMSignExtend
.2faf	18		clc				clc
.2fb0	6d df 06	adc $06df			adc 	IFNewExponent
.2fb3	8d df 06	sta $06df			sta 	IFNewExponent
.2fb6	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2fb8	20 82 34	jsr $3482			jsr 	IFloatCopyToRegister
.2fbb	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2fbd	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.2fc0					_IFMLoop:
.2fc0	a2 14		ldx #$14			ldx 	#IFRTemp
.2fc2	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero
.2fc5	f0 3a		beq $3001			beq 	_IFMExit
.2fc7	ae de 06	ldx $06de			ldx 	IFTarget 					; look at adder MSB
.2fca	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2fcc	10 03		bpl $2fd1			bpl	 	_IFMTargetOkay
.2fce	20 22 30	jsr $3022			jsr 	_IFMShiftAll
.2fd1					_IFMTargetOkay:
.2fd1	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2fd3	29 01		and #$01			and 	#1
.2fd5	f0 16		beq $2fed			beq 	_IFMNoAdd
.2fd7	ae de 06	ldx $06de			ldx 	IFTarget 					; add adder
.2fda	18		clc				clc
.2fdb	a5 08		lda $08				lda 	IFR0+IM0
.2fdd	75 00		adc $00,x			adc 		IM0,x
.2fdf	85 08		sta $08				sta 	IFR0+IM0
.2fe1	a5 09		lda $09				lda 	IFR0+IM1
.2fe3	75 01		adc $01,x			adc 		IM1,x
.2fe5	85 09		sta $09				sta 	IFR0+IM1
.2fe7	a5 0a		lda $0a				lda 	IFR0+IM2
.2fe9	75 02		adc $02,x			adc 		IM2,x
.2feb	85 0a		sta $0a				sta 	IFR0+IM2
.2fed					_IFMNoAdd:
.2fed	a5 0a		lda $0a				lda 	IFR0+IM2
.2fef	10 03		bpl $2ff4			bpl 	_IFMResultOkay
.2ff1	20 22 30	jsr $3022			jsr 	_IFMShiftAll
.2ff4					_IFMResultOkay:
.2ff4	a2 14		ldx #$14			ldx 	#IFRTemp
.2ff6	20 0f 35	jsr $350f			jsr 	IFloatShiftRight
.2ff9	ae de 06	ldx $06de			ldx 	IFTarget
.2ffc	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.2fff	80 bf		bra $2fc0			bra 	_IFMLoop
.3001					_IFMExit:
.3001	ad df 06	lda $06df			lda 	IFNewExponent 				; validate new exponent.
.3004	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.3006	90 0f		bcc $3017			bcc 	_IFMOkay
.3008	c9 e0		cmp #$e0			cmp 	#$E0
.300a	b0 0b		bcs $3017			bcs 	_IFMOkay
.300c	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.300e	f0 10		beq $3020			beq 	_IFMError
.3010	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.3012	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.3015	18		clc				clc
.3016	60		rts				rts
.3017					_IFMOkay:
.3017	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.3019	0d e0 06	ora $06e0			ora 	IFNewSign
.301c	85 0b		sta $0b				sta 	IFR0+IExp
.301e	18		clc				clc
.301f	60		rts				rts
.3020					_IFMError:
.3020	38		sec				sec
.3021	60		rts				rts
.3022					_IFMShiftAll:
.3022	a2 08		ldx #$08			ldx 	#IFR0
.3024	20 0f 35	jsr $350f			jsr 	IFloatShiftRight
.3027	ae de 06	ldx $06de			ldx 	IFTarget
.302a	20 0f 35	jsr $350f			jsr 	IFloatShiftRight
.302d	ee df 06	inc $06df			inc 	IFNewExponent
.3030	60		rts				rts
.3031					IFMSignExtend:
.3031	29 3f		and #$3f			and 	#IFXMask
.3033	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.3035	90 02		bcc $3039			bcc 	_IFMNoSXX
.3037	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.3039					_IFMNoSXX:
.3039	60		rts				rts
.303a					IFCalculateNewSign:
.303a	b5 03		lda $03,x			lda 	IExp,x
.303c	45 0b		eor $0b				eor 	IFR0+IExp
.303e	29 40		and #$40			and 	#IFSign
.3040	8d e0 06	sta $06e0			sta 	IFNewSign
.3043	60		rts				rts
.06df					IFNewExponent:
>06df							.fill 	1
.06e0					IFNewSign:
>06e0							.fill 	1
.3044					IFloatDivideInteger:
.3044	20 5d 30	jsr $305d			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.3047	b0 06		bcs $304f			bcs 	_IFDIExit
.3049	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.304b	20 71 34	jsr $3471			jsr 	IFloatCopyFromRegister
.304e	18		clc				clc
.304f					_IFDIExit:
.304f	60		rts				rts
.3050					IFloatModulusInteger:
.3050	20 5d 30	jsr $305d			jsr 	IFloatDivideIntegerCommon
.3053	b0 07		bcs $305c			bcs 	_IFMIExit
.3055	ae de 06	ldx $06de			ldx 	IFTarget
.3058	20 71 34	jsr $3471			jsr 	IFloatCopyFromRegister
.305b	18		clc				clc
.305c					_IFMIExit:
.305c	60		rts				rts
.305d					IFloatDivideIntegerCommon:
.305d	8e de 06	stx $06de			stx 	IFTarget  					; this is s1, s0 = R0
.3060	20 3a 30	jsr $303a			jsr 	IFCalculateNewSign 			; calculate sign of result
.3063	20 8b 30	jsr $308b			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.3066	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.3068	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero
.306b	f0 1c		beq $3089			beq 	_IFDIDivZero
.306d	ae de 06	ldx $06de			ldx 	IFTarget 					; zero Rx (S1)
.3070	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.3073	5a		phy				phy
.3074	a0 18		ldy #$18			ldy 	#24
.3076					_IFDILoop:
.3076	20 9c 30	jsr $309c			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3079	20 a8 30	jsr $30a8			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.307c	88		dey				dey
.307d	d0 f7		bne $3076			bne 	_IFDILoop 					; do it 24 times
.307f	7a		ply				ply
.3080	ad e0 06	lda $06e0			lda 	IFNewSign 					; set sign of result.
.3083	29 40		and #$40			and 	#IFSign
.3085	85 17		sta $17				sta 	IFRTemp+IExp
.3087	18		clc				clc 								; is okay.
.3088	60		rts				rts
.3089					_IFDIDivZero:
.3089	38		sec				sec
.308a	60		rts				rts
.308b					IFDCopyRXToRTemp:
.308b	b5 00		lda $00,x			lda 	IM0,x
.308d	85 14		sta $14				sta 	IFRTemp+IM0
.308f	b5 01		lda $01,x			lda 	IM1,x
.3091	85 15		sta $15				sta 	IFRTemp+IM1
.3093	b5 02		lda $02,x			lda 	IM2,x
.3095	85 16		sta $16				sta 	IFRTemp+IM2
.3097	b5 03		lda $03,x			lda 	IExp,x
.3099	85 17		sta $17				sta 	IFRTemp+IExp
.309b	60		rts				rts
.309c					IFDShiftSTempS1Left:
.309c	a2 14		ldx #$14			ldx 	#IFRTemp
.309e	20 07 35	jsr $3507			jsr 	IFloatShiftLeft
.30a1	ae de 06	ldx $06de			ldx 	IFTarget
.30a4	20 08 35	jsr $3508			jsr 	IFloatRotateLeft
.30a7	60		rts				rts
.30a8					IFDTrySubtract:
.30a8	ae de 06	ldx $06de			ldx 	IFTarget 					; s1 = Rx
.30ab	38		sec				sec 								; subtract, saving the results on the stack.
.30ac	b5 00		lda $00,x			lda 	IM0,x
.30ae	e5 08		sbc $08				sbc 	IFR0+IM0
.30b0	48		pha				pha
.30b1	b5 01		lda $01,x			lda 	IM1,x
.30b3	e5 09		sbc $09				sbc 	IFR0+IM1
.30b5	48		pha				pha
.30b6	b5 02		lda $02,x			lda 	IM2,x
.30b8	e5 0a		sbc $0a				sbc 	IFR0+IM2
.30ba	b0 03		bcs $30bf			bcs 	_IFDCanSubtract
.30bc	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.30bd	68		pla				pla
.30be	60		rts				rts
.30bf					_IFDCanSubtract:
.30bf	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.30c1	68		pla				pla
.30c2	95 01		sta $01,x			sta 	IM1,x
.30c4	68		pla				pla
.30c5	95 00		sta $00,x			sta 	IM0,x
.30c7	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.30c9	d0 06		bne $30d1			bne 	_IFDCSExit
.30cb	e6 15		inc $15				inc 	IFRTemp+IM1
.30cd	d0 02		bne $30d1			bne 	_IFDCSExit
.30cf	e6 16		inc $16				inc 	IFRTemp+IM2
.30d1					_IFDCSExit:
.30d1	60		rts				rts
.30d2					IFloatBitwiseAnd:
.30d2	5a		phy				phy
.30d3	20 17 31	jsr $3117			jsr 	IFPreProcessBitwise 		; set up everything.
.30d6	d0 0f		bne $30e7			bne 	_IFBAExit
.30d8					_IFBALoop:
.30d8	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.30db	35 00		and $00,x			and 	IM0,x
.30dd	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.30e0	e8		inx				inx
.30e1	c8		iny				iny
.30e2	c0 03		cpy #$03			cpy 	#3
.30e4	d0 f2		bne $30d8			bne 	_IFBALoop
.30e6	18		clc				clc
.30e7					_IFBAExit:
.30e7	7a		ply				ply
.30e8	60		rts				rts
.30e9					IFloatBitwiseOr:
.30e9	5a		phy				phy
.30ea	20 17 31	jsr $3117			jsr 	IFPreProcessBitwise 		; set up everything.
.30ed	d0 0f		bne $30fe			bne 	_IFBAExit
.30ef					_IFBALoop:
.30ef	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.30f2	15 00		ora $00,x			ora 	IM0,x
.30f4	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.30f7	e8		inx				inx
.30f8	c8		iny				iny
.30f9	c0 03		cpy #$03			cpy 	#3
.30fb	d0 f2		bne $30ef			bne 	_IFBALoop
.30fd	18		clc				clc
.30fe					_IFBAExit:
.30fe	7a		ply				ply
.30ff	60		rts				rts
.3100					IFloatBitwiseXor:
.3100	5a		phy				phy
.3101	20 17 31	jsr $3117			jsr 	IFPreProcessBitwise 		; set up everything.
.3104	d0 0f		bne $3115			bne 	_IFBAExit
.3106					_IFBALoop:
.3106	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3109	55 00		eor $00,x			eor 	IM0,x
.310b	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.310e	e8		inx				inx
.310f	c8		iny				iny
.3110	c0 03		cpy #$03			cpy 	#3
.3112	d0 f2		bne $3106			bne 	_IFBALoop
.3114	18		clc				clc
.3115					_IFBAExit:
.3115	7a		ply				ply
.3116	60		rts				rts
.3117					IFPreProcessBitwise:
.3117	a0 00		ldy #$00			ldy 	#0 							; set index.
.3119	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.311b	15 03		ora $03,x			ora 	IExp,x
.311d	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.311f	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.3121	38		sec				sec 								; carry set just in cases.
.3122	60		rts				rts
.3123					IFloatAbsoluteR0:
.3123	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.3125	29 bf		and #$bf			and 	#IFSign ^ 255
.3127	85 0b		sta $0b				sta 	IFR0+IExp
.3129	18		clc				clc
.312a	60		rts				rts
.312b					IFloatSquareRootR0:
.312b	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.312d	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero
.3130	f0 2e		beq $3160			beq 	_IFSRZero
.3132	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.3134	29 40		and #$40			and 	#IFSign
.3136	d0 2f		bne $3167			bne 	_IFSRFail
.3138	20 17 35	jsr $3517			jsr 	IFloatNormalise 			; it will work better !
.313b	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.313d	20 82 34	jsr $3482			jsr 	IFloatCopyToRegister
.3140	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.3142	20 31 30	jsr $3031			jsr 	IFMSignExtend 				; sign extended version of the exponent
.3145	18		clc				clc
.3146	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.3148	85 0b		sta $0b				sta 	IFR0+IExp
.314a	4a		lsr a				lsr 	a 							; which we can halve.
.314b	38		sec				sec 								; convert back
.314c	e9 17		sbc #$17			sbc 	#23
.314e	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.3150	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.3152	20 69 31	jsr $3169			jsr 	_IFSRNewton
.3155	20 69 31	jsr $3169			jsr 	_IFSRNewton
.3158	20 69 31	jsr $3169			jsr 	_IFSRNewton
.315b	20 69 31	jsr $3169			jsr 	_IFSRNewton
.315e	18		clc				clc
.315f	60		rts				rts
.3160					_IFSRZero:
.3160	a2 08		ldx #$08			ldx 	#IFR0
.3162	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.3165	18		clc				clc
.3166	60		rts				rts
.3167					_IFSRFail:
.3167	38		sec				sec
.3168	60		rts				rts
.3169					_IFSRNewton:
.3169	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.316b	20 2f 34	jsr $342f			jsr 	IFloatPushRx
.316e	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.3170	20 2f 34	jsr $342f			jsr 	IFloatPushRx
.3173	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.3175	20 04 32	jsr $3204			jsr 	IFloatDivideFloat
.3178	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.317a	20 50 34	jsr $3450			jsr 	IFloatPullRx
.317d	20 d8 2e	jsr $2ed8			jsr 	IFloatAdd 					; now guess + original/guess
.3180	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.3182	20 0f 35	jsr $350f			jsr 	IFloatShiftRight
.3185	a2 0c		ldx #$0c			ldx 	#IFR1
.3187	20 50 34	jsr $3450			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.318a	60		rts				rts
.318b					IFloatFractionalR0:
.318b	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.318d	29 3f		and #$3f			and 	#IFXMask
.318f	f0 17		beq $31a8			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.3191	20 23 31	jsr $3123			jsr 	IFloatAbsoluteR0 			; absolute value R0
.3194	a2 08		ldx #$08			ldx 	#IFR0
.3196	20 17 35	jsr $3517			jsr 	IFloatNormalise 			; normalise R0
.3199	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.319b	20 82 34	jsr $3482			jsr 	IFloatCopyToRegister
.319e	20 e1 31	jsr $31e1			jsr 	IFloatIntegerR0 			; take integer part of R0
.31a1	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.31a3	20 d1 2e	jsr $2ed1			jsr 	IFloatSubtract
.31a6	80 05		bra $31ad			bra 	_FIPExit
.31a8					_FIPZero:
.31a8	a2 08		ldx #$08			ldx 	#IFR0
.31aa	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.31ad					_FIPExit:
.31ad	18		clc				clc
.31ae	60		rts				rts
.31af					IFloatCompare:
.31af	20 d1 2e	jsr $2ed1			jsr 	IFloatSubtract 				; subtract R0 from RX.
.31b2	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.31b4	05 0b		ora $0b				ora 	IFR0+IExp
.31b6	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.31b8	29 3f		and #$3f			and 	#IFXMask
.31ba	d0 19		bne $31d5			bne 	_IFCNonInteger
.31bc	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero 			; check if zero
.31bf	f0 0f		beq $31d0			beq 	_IFCZero
.31c1					_IFCReturnSign:
.31c1	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.31c3	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.31c5	48		pha				pha
.31c6	a9 01		lda #$01			lda 	#1
.31c8	20 e2 34	jsr $34e2			jsr 	IFloatSetByte 				; return to +1
.31cb	68		pla				pla 								; sign bit back
.31cc	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.31ce	18		clc				clc
.31cf	60		rts				rts
.31d0					_IFCZero:
.31d0	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.31d3	18		clc				clc
.31d4	60		rts				rts
.31d5					_IFCNonInteger:
.31d5	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.31d7	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.31d9	05 09		ora $09				ora 	IFR0+IM1
.31db	05 0a		ora $0a				ora 	IFR0+IM2
.31dd	f0 f1		beq $31d0			beq 	_IFCZero 					; near enough !
.31df	80 e0		bra $31c1			bra 	_IFCReturnSign 				; return the sign of the difference.
.31e1					IFloatIntegerR0:
.31e1	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.31e3	29 3f		and #$3f			and 	#IFXMask
.31e5	f0 1b		beq $3202			beq 	_FIPExit 					; if so do nothing
.31e7	a2 08		ldx #$08			ldx 	#IFR0
.31e9	20 17 35	jsr $3517			jsr 	IFloatNormalise 			; normalise
.31ec	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero 			; is it zero ?
.31ef	f0 0e		beq $31ff			beq 	_FIPZero 					; if so return zero.
.31f1					_FIPShift:
.31f1	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.31f3	29 20		and #$20			and 	#$20 						; still -ve
.31f5	f0 0b		beq $3202			beq 	_FIPExit
.31f7	20 0f 35	jsr $350f			jsr 	IFloatShiftRight 			; shift mantissa right
.31fa	20 39 35	jsr $3539			jsr 	IFloatIncExponent 			; bump exponent
.31fd	80 f2		bra $31f1			bra 	_FIPShift
.31ff					_FIPZero:
.31ff	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.3202					_FIPExit:
.3202	18		clc				clc
.3203	60		rts				rts
.3204					IFloatDivideFloat:
.3204	8e de 06	stx $06de			stx 	IFTarget  					; this is s1, s0 = R0
.3207	20 3a 30	jsr $303a			jsr 	IFCalculateNewSign 			; calculate sign of result
.320a	20 17 35	jsr $3517			jsr 	IFloatNormalise 			; normalise RX
.320d	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.320f	20 17 35	jsr $3517			jsr 	IFloatNormalise
.3212	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero
.3215	f0 56		beq $326d			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.3217	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.3219	20 31 30	jsr $3031			jsr 	IFMSignExtend
.321c	8d df 06	sta $06df			sta 	IFNewExponent
.321f	ae de 06	ldx $06de			ldx 	IFTarget 					; calculate s1.exponent
.3222	b5 03		lda $03,x			lda 	IExp,x
.3224	20 31 30	jsr $3031			jsr 	IFMSignExtend
.3227	38		sec				sec
.3228	ed df 06	sbc $06df			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.322b	38		sec				sec
.322c	e9 17		sbc #$17			sbc 	#23
.322e	8d df 06	sta $06df			sta 	IFNewExponent
.3231	20 6f 32	jsr $326f			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.3234	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.3236	10 08		bpl $3240			bpl 	_IFDFNoShiftResult
.3238	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.323a	20 0f 35	jsr $350f			jsr 	IFloatShiftRight
.323d	ee df 06	inc $06df			inc 	IFNewExponent
.3240					_IFDFNoShiftResult:
.3240	ad df 06	lda $06df			lda 	IFNewExponent 				; underflow/overflow check.
.3243	30 06		bmi $324b			bmi 	_IFDFCheckUnderflow
.3245	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.3247	b0 24		bcs $326d			bcs 	_IFDFDivZero
.3249	80 11		bra $325c			bra		_IFDFExit
.324b					_IFDFCheckUnderflow:
.324b	ad df 06	lda $06df			lda 	IFNewExponent 				; shift into a legal exponent.
.324e	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.3250	b0 0a		bcs $325c			bcs 	_IFDFExit
.3252	ee df 06	inc $06df			inc 	IFNewExponent
.3255	a2 14		ldx #$14			ldx 	#IFRTemp
.3257	20 0f 35	jsr $350f			jsr 	IFloatShiftRight
.325a	80 ef		bra $324b			bra 	_IFDFCheckUnderflow
.325c					_IFDFExit:
.325c	ad df 06	lda $06df			lda 	IFNewExponent 				; combine exponent and sign.
.325f	29 3f		and #$3f			and 	#IFXMask
.3261	0d e0 06	ora $06e0			ora 	IFNewSign
.3264	85 17		sta $17				sta 	IFRTemp+IExp
.3266	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.3268	20 71 34	jsr $3471			jsr 	IFloatCopyFromRegister
.326b	18		clc				clc
.326c	60		rts				rts
.326d					_IFDFDivZero:
.326d	38		sec				sec
.326e	60		rts				rts
.326f					IFloatDivideSupport:
.326f	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.3271	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.3274	5a		phy				phy 								; main division loop x 23
.3275	a0 17		ldy #$17			ldy 	#23
.3277					_IFDSLoop:
.3277	20 a8 30	jsr $30a8			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.327a	20 9c 30	jsr $309c			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.327d	88		dey				dey
.327e	d0 f7		bne $3277			bne 	_IFDSLoop 					; do it 24 times
.3280	7a		ply				ply
.3281	60		rts				rts
.3282					IFloatIntegerToStringR0:
.3282	8d e1 06	sta $06e1			sta 	IFBase 						; save base to use.
.3285	20 61 35	jsr $3561			jsr 	IFloatBufferReset			; empty buffer
.3288	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.328a	29 3f		and #$3f			and 	#IFXMask
.328c	d0 1d		bne $32ab			bne 	_IFIFail
.328e	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.3290	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero
.3293	f0 0e		beq $32a3			beq 	_IFINotNegative
.3295	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.3297	29 40		and #$40			and 	#IFSign
.3299	f0 08		beq $32a3			beq 	_IFINotNegative
.329b	a9 2d		lda #$2d			lda 	#"-"						; output -
.329d	20 70 35	jsr $3570			jsr 	IFloatBufferWrite
.32a0	20 eb 34	jsr $34eb			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.32a3					_IFINotNegative:
.32a3	20 ad 32	jsr $32ad			jsr 	_IFIRecursiveConvert 		; start converting
.32a6	20 68 35	jsr $3568			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.32a9	18		clc				clc
.32aa	60		rts				rts
.32ab					_IFIFail:
.32ab	38		sec				sec
.32ac	60		rts				rts
.32ad					_IFIRecursiveConvert:
.32ad	a2 0c		ldx #$0c			ldx 	#IFR1
.32af	20 82 34	jsr $3482			jsr 	IFloatCopyToRegister 		; R0->R1
.32b2	a2 08		ldx #$08			ldx 	#IFR0
.32b4	ad e1 06	lda $06e1			lda 	IFBase 						; Base -> R0
.32b7	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.32ba	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.32bc	20 44 30	jsr $3044			jsr 	IFloatDivideInteger
.32bf	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.32c1	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero
.32c4	f0 09		beq $32cf			beq 	_IFIOutDigit
.32c6	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.32c8	48		pha				pha
.32c9	20 ad 32	jsr $32ad			jsr 	_IFIRecursiveConvert 		; convert the divide result
.32cc	68		pla				pla
.32cd	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.32cf					_IFIOutDigit:
.32cf	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.32d1	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.32d3	90 02		bcc $32d7			bcc 	_IFINotHex
.32d5	69 06		adc #$06			adc 	#6
.32d7					_IFINotHex:
.32d7	69 30		adc #$30			adc 	#48
.32d9	20 70 35	jsr $3570			jsr 	IFloatBufferWrite 			; write character to buffer.
.32dc	60		rts				rts
.06e1					IFBase:
>06e1							.fill 	1
.32dd					IFloatFloatToStringR0:
.32dd	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.32df	20 2f 34	jsr $342f			jsr 	IFloatPushRx
.32e2	20 82 34	jsr $3482			jsr 	IFloatCopyToRegister
.32e5	20 e1 31	jsr $31e1			jsr 	IFloatIntegerR0				; make R0 integer
.32e8	a9 0a		lda #$0a			lda 	#10 						; base 10.
.32ea	20 82 32	jsr $3282			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.32ed	9c e2 06	stz $06e2			stz 	IFloatDecimalCount 			; zero the decimal count.
.32f0	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.32f2	29 3f		and #$3f			and 	#IFXMask
.32f4	f0 44		beq $333a			beq 	_IFFSExit
.32f6					_IFloatFracLoop:
.32f6	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.32f8	20 71 34	jsr $3471			jsr 	IFloatCopyFromRegister
.32fb	20 8b 31	jsr $318b			jsr 	IFloatFractionalR0
.32fe	20 17 35	jsr $3517			jsr 	IFloatNormalise
.3301	a2 10		ldx #$10			ldx 	#IFR2
.3303	20 82 34	jsr $3482			jsr 	IFloatCopyToRegister 		; copy to back R2
.3306	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.3308	a9 0a		lda #$0a			lda 	#10
.330a	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.330d	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.330f	20 82 2f	jsr $2f82			jsr 	IFloatMultiply
.3312	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.3314	20 82 34	jsr $3482			jsr 	IFloatCopyToRegister
.3317	20 e1 31	jsr $31e1			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.331a	ad e2 06	lda $06e2			lda 	IFloatDecimalCount 			; done 3 dp, no more
.331d	c9 03		cmp #$03			cmp 	#3
.331f	f0 16		beq $3337			beq 	_IFFSExitStripZero
.3321	ad e2 06	lda $06e2			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.3324	d0 05		bne $332b			bne 	_IFloatNotFirst
.3326	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3328	20 70 35	jsr $3570			jsr 	IFloatBufferWrite
.332b					_IFloatNotFirst:
.332b	ee e2 06	inc $06e2			inc 	IFloatDecimalCount
.332e	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.3330	09 30		ora #$30			ora 	#"0"						; ASCII
.3332	20 70 35	jsr $3570			jsr 	IFloatBufferWrite 			; write to the buffer.
.3335	80 bf		bra $32f6			bra 	_IFloatFracLoop
.3337					_IFFSExitStripZero:
.3337	20 7f 35	jsr $357f			jsr 	IFloatStripTrailingZeros
.333a					_IFFSExit:
.333a	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.333c	20 50 34	jsr $3450			jsr 	IFloatPullRx
.333f	20 68 35	jsr $3568			jsr 	IFloatGetBufferAddress
.3342	18		clc				clc
.3343	60		rts				rts
.06e2					IFloatDecimalCount:
>06e2							.fill 	1
.3344					IFloatStringToFloatR0:
.3344	8d e3 06	sta $06e3			sta 	IFCount 					; save length and positions out.
.3347	86 20		stx $20				stx 	iTemp0
.3349	84 21		sty $21				sty 	iTemp0+1
.334b	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.334d	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.3350	9c e4 06	stz $06e4			stz 	IFSignFlag 					; clear the sign flag
.3353	20 e0 33	jsr $33e0			jsr 	IFSTFGetNext 				; get first
.3356	f0 1b		beq $3373			beq 	_IFSTFFail 					; no character, fail.
.3358	90 10		bcc $336a			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.335a	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.335c	d0 15		bne $3373			bne 	_IFSTFFail
.335e	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.3360	8d e4 06	sta $06e4			sta 	IFSignFlag
.3363					_IFSTFLoop:
.3363	20 e0 33	jsr $33e0			jsr 	IFSTFGetNext 				; get next character
.3366	b0 0b		bcs $3373			bcs 	_IFSTFFail 					; bad character.
.3368	f0 11		beq $337b			beq 	_IFSTFExit 					; end of data
.336a					_IFSTFHaveChar:
.336a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.336c	f0 08		beq $3376			beq 	_IFSTFDecimal
.336e	20 04 34	jsr $3404			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.3371	80 f0		bra $3363			bra 	_IFSTFLoop 					; keep going until . or end.
.3373					_IFSTFFail:
.3373	38		sec				sec
.3374	80 0d		bra $3383			bra 	_IFSTFReturn
.3376					_IFSTFDecimal:
.3376	20 8b 33	jsr $338b			jsr 	IFSTFDecimal 				; call the decimal places code.
.3379	b0 08		bcs $3383			bcs 	_IFSTFReturn 				; error
.337b					_IFSTFExit:
.337b	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.337d	0d e4 06	ora $06e4			ora 	IFSignFlag
.3380	85 0b		sta $0b				sta 	IFR0+IExp
.3382	18		clc				clc
.3383					_IFSTFReturn:
.3383	60		rts				rts
.3384					IFloatAddDecimalToR0:
.3384	8d e3 06	sta $06e3			sta 	IFCount 					; save it out.
.3387	86 20		stx $20				stx 	iTemp0
.3389	84 21		sty $21				sty 	iTemp0+1
.338b					IFSTFDecimal:
.338b	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.338d	20 2f 34	jsr $342f			jsr 	IFloatPushRx
.3390	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.3392	20 e0 34	jsr $34e0			jsr 	IFloatSetZero
.3395	9c e5 06	stz $06e5			stz 	IFDecimalPlaces 			; zero DP.
.3398					_IFSTDLoop:
.3398	20 e0 33	jsr $33e0			jsr 	IFSTFGetNext 				; get next
.339b	b0 41		bcs $33de			bcs 	_IFSTFFail2 				; bad character.
.339d	f0 11		beq $33b0			beq 	_IFSTFComplete 				; end of data, work out the result.
.339f	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.33a1	f0 39		beq $33dc			beq 	_IFSTFExit2
.33a3	20 04 34	jsr $3404			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.33a6	ee e5 06	inc $06e5			inc 	IFDecimalPlaces 			; count decimals
.33a9	ad e5 06	lda $06e5			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.33ac	c9 03		cmp #$03			cmp 	#3
.33ae	90 e8		bcc $3398			bcc 	_IFSTDLoop
.33b0					_IFSTFComplete:
.33b0	ad e5 06	lda $06e5			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.33b3	f0 27		beq $33dc			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.33b5	3a		dec a				dec 	a 							; table indexed from 1.
.33b6	0a		asl a				asl 	a
.33b7	0a		asl a				asl 	a
.33b8	aa		tax				tax
.33b9	bd 1b 34	lda $341b,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.33bc	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.33be	bd 1c 34	lda $341c,x			lda 	TableTen+1,x
.33c1	85 0d		sta $0d				sta  	IFR1+IM1
.33c3	bd 1d 34	lda $341d,x			lda 	TableTen+2,x
.33c6	85 0e		sta $0e				sta  	IFR1+IM2
.33c8	bd 1e 34	lda $341e,x			lda 	TableTen+3,x
.33cb	85 0f		sta $0f				sta  	IFR1+IExp
.33cd	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.33cf	20 82 2f	jsr $2f82			jsr 	IFloatMultiply
.33d2	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.33d4	20 50 34	jsr $3450			jsr 	IFloatPullRx
.33d7	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.33d9	20 d8 2e	jsr $2ed8			jsr 	IFloatAdd
.33dc					_IFSTFExit2:
.33dc	18		clc				clc
.33dd	60		rts				rts
.33de					_IFSTFFail2:
.33de	38		sec				sec
.33df	60		rts				rts
.33e0					IFSTFGetNext:
.33e0	ad e3 06	lda $06e3			lda 	IFCount  					; if count is zero, return with Z set.
.33e3	f0 19		beq $33fe			beq 	_IFSTFReturnOk
.33e5	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.33e7	e6 20		inc $20				inc 	iTemp0 						; point at next.
.33e9	d0 02		bne $33ed			bne 	_IFSTFGNNoCarry
.33eb	e6 21		inc $21				inc 	iTemp0+1
.33ed					_IFSTFGNNoCarry:
.33ed	ce e3 06	dec $06e3			dec 	IFCount 					; dec count.
.33f0	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.33f2	f0 08		beq $33fc			beq 	_IFSTFGOkay
.33f4	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.33f6	90 08		bcc $3400			bcc 	_IFSTFGFail
.33f8	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.33fa	b0 04		bcs $3400			bcs 	_IFSTFGFail
.33fc					_IFSTFGOkay:
.33fc	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.33fe					_IFSTFReturnOk:
.33fe	18		clc				clc
.33ff	60		rts				rts
.3400					_IFSTFGFail:
.3400	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3402	38		sec				sec
.3403	60		rts				rts
.3404					IFSTFAddR0:
.3404	29 0f		and #$0f			and 	#15 						; to int value
.3406	48		pha				pha 								; save it.
.3407	a9 0a		lda #$0a			lda 	#10
.3409	a2 0c		ldx #$0c			ldx 	#IFR1
.340b	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.340e	20 82 2f	jsr $2f82			jsr 	IFloatMultiply
.3411	68		pla				pla
.3412	a2 0c		ldx #$0c			ldx 	#IFR1
.3414	20 e2 34	jsr $34e2			jsr 	IFloatSetByte
.3417	20 d8 2e	jsr $2ed8			jsr 	IFloatAdd
.341a	60		rts				rts
.06e3					IFCount:
>06e3							.fill 	1
.06e4					IFSignFlag:
>06e4							.fill 	1
.06e5					IFDecimalPlaces:
>06e5							.fill 	1
.341b					TableTen:
>341b	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>341f	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>3423	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3427	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>342b	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.342f					IFloatPushRx:
.342f	5a		phy				phy
.3430	ac e6 06	ldy $06e6			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.3433	b5 00		lda $00,x			lda 	IM0,x
.3435	99 e7 06	sta $06e7,y			sta 	IFStack,y
.3438	b5 01		lda $01,x			lda 	IM1,x
.343a	99 e8 06	sta $06e8,y			sta 	IFStack+1,y
.343d	b5 02		lda $02,x			lda 	IM2,x
.343f	99 e9 06	sta $06e9,y			sta 	IFStack+2,y
.3442	b5 03		lda $03,x			lda 	IExp,x
.3444	99 ea 06	sta $06ea,y			sta 	IFStack+3,y
.3447	c8		iny				iny
.3448	c8		iny				iny
.3449	c8		iny				iny
.344a	c8		iny				iny
.344b	8c e6 06	sty $06e6			sty 	IFStackIndex 				; update SP
.344e	7a		ply				ply
.344f	60		rts				rts
.3450					IFloatPullRx:
.3450	5a		phy				phy
.3451	ac e6 06	ldy $06e6			ldy 	IFStackIndex	 			; decrement SP
.3454	88		dey				dey
.3455	88		dey				dey
.3456	88		dey				dey
.3457	88		dey				dey
.3458	b9 e7 06	lda $06e7,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.345b	95 00		sta $00,x			sta 	IM0,x
.345d	b9 e8 06	lda $06e8,y			lda 	IFStack+1,y
.3460	95 01		sta $01,x			sta 	IM1,x
.3462	b9 e9 06	lda $06e9,y			lda 	IFStack+2,y
.3465	95 02		sta $02,x			sta 	IM2,x
.3467	b9 ea 06	lda $06ea,y			lda 	IFStack+3,y
.346a	95 03		sta $03,x			sta 	IExp,x
.346c	8c e6 06	sty $06e6			sty 	IFStackIndex 				; update SP
.346f	7a		ply				ply
.3470	60		rts				rts
.06e6					IFStackIndex:
>06e6							.fill 	1
.06e7					IFStack:
>06e7							.fill 	16*4
.3471					IFloatCopyFromRegister:
.3471	b5 00		lda $00,x			lda 	0,x
.3473	85 08		sta $08				sta 	IFR0
.3475	b5 01		lda $01,x			lda 	1,x
.3477	85 09		sta $09				sta 	IFR0+1
.3479	b5 02		lda $02,x			lda 	2,x
.347b	85 0a		sta $0a				sta 	IFR0+2
.347d	b5 03		lda $03,x			lda 	3,x
.347f	85 0b		sta $0b				sta 	IFR0+3
.3481	60		rts				rts
.3482					IFloatCopyToRegister:
.3482	a5 08		lda $08				lda 	IFR0
.3484	95 00		sta $00,x			sta 	0,x
.3486	a5 09		lda $09				lda 	IFR0+1
.3488	95 01		sta $01,x			sta 	1,x
.348a	a5 0a		lda $0a				lda 	IFR0+2
.348c	95 02		sta $02,x			sta 	2,x
.348e	a5 0b		lda $0b				lda 	IFR0+3
.3490	95 03		sta $03,x			sta 	3,x
.3492	60		rts				rts
.3493					IFloatLoadInline:
.3493	68		pla				pla 								; pop address off to iTemp0
.3494	85 20		sta $20				sta 	iTemp0
.3496	68		pla				pla
.3497	85 21		sta $21				sta 	iTemp0+1
.3499	a0 01		ldy #$01			ldy 	#1
.349b	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.349d	95 00		sta $00,x			sta 	0,x
.349f	c8		iny				iny
.34a0	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.34a2	95 01		sta $01,x			sta 	1,x
.34a4	c8		iny				iny
.34a5	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.34a7	95 02		sta $02,x			sta 	2,x
.34a9	c8		iny				iny
.34aa	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.34ac	95 03		sta $03,x			sta 	3,x
.34ae	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.34af	a5 20		lda $20				lda 	iTemp0
.34b1	69 05		adc #$05			adc 	#5
.34b3	85 20		sta $20				sta 	iTemp0
.34b5	90 02		bcc $34b9			bcc 	_IFLINoCarry
.34b7	e6 21		inc $21				inc 	iTemp0+1
.34b9					_IFLINoCarry:
.34b9	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.34bc					IFloatMultiply8BitRx:
.34bc	5a		phy		        phy
.34bd	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.34bf	a4 08		ldy $08		        ldy     IFR0+IM0
.34c1	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.34c2	85 08		sta $08		        sta     IFR0+IM0
.34c4	84 09		sty $09		        sty     IFR0+IM1
.34c6	a9 00		lda #$00	        lda     #0
.34c8	a0 08		ldy #$08	        ldy     #8
.34ca					_IFMLoop:
.34ca	90 03		bcc $34cf	        bcc     _IFMNoAdd
.34cc	18		clc		        clc
.34cd	65 09		adc $09		        adc     IFR0+IM1
.34cf					_IFMNoAdd:
.34cf	6a		ror a		        ror     a
.34d0	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.34d2	88		dey		        dey
.34d3	d0 f5		bne $34ca	        bne     _IFMLoop
.34d5	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.34d7	7a		ply		        ply
.34d8	60		rts		        rts
.34d9					IFloatCheckZero:
.34d9	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.34db	15 01		ora $01,x			ora 	IM1,x
.34dd	15 02		ora $02,x			ora 	IM2,x
.34df	60		rts				rts
.34e0					IFloatSetZero:
.34e0	a9 00		lda #$00			lda 	#0
.34e2					IFloatSetByte:
.34e2	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.34e4	74 01		stz $01,x			stz 	IM1,x
.34e6	74 02		stz $02,x			stz 	IM2,x
.34e8	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.34ea	60		rts				rts
.34eb					IFloatNegate:
.34eb	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.34ed	49 40		eor #$40			eor 	#IFSign
.34ef	95 03		sta $03,x			sta 	IExp,x
.34f1	18		clc				clc
.34f2	60		rts				rts
.34f3					IFloatMantissaNegate:
.34f3	38		sec				sec 								; when you want a real 2's complement negative value.
.34f4	a9 00		lda #$00			lda 	#0
.34f6	f5 00		sbc $00,x			sbc 	IM0,x
.34f8	95 00		sta $00,x			sta 	IM0,x
.34fa	a9 00		lda #$00			lda 	#0
.34fc	f5 01		sbc $01,x			sbc 	IM1,x
.34fe	95 01		sta $01,x			sta 	IM1,x
.3500	a9 00		lda #$00			lda 	#0
.3502	f5 02		sbc $02,x			sbc 	IM2,x
.3504	95 02		sta $02,x			sta 	IM2,x
.3506	60		rts				rts
.3507					IFloatShiftLeft:
.3507	18		clc				clc
.3508					IFloatRotateLeft:
.3508	36 00		rol $00,x			rol 	IM0,x
.350a	36 01		rol $01,x			rol 	IM1,x
.350c	36 02		rol $02,x			rol 	IM2,x
.350e	60		rts				rts
.350f					IFloatShiftRight:
.350f	18		clc				clc
.3510					IFloatRotateRight:
.3510	76 02		ror $02,x			ror 	IM2,x
.3512	76 01		ror $01,x			ror 	IM1,x
.3514	76 00		ror $00,x			ror 	IM0,x
.3516	60		rts				rts
.3517					IFloatNormalise:
.3517	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero 			; is it zero
.351a	f0 18		beq $3534			beq 	_IFNExitZero 				; if so exit
.351c					_IFNLoop:
.351c	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.351e	29 c0		and #$c0			and 	#$C0
.3520	c9 40		cmp #$40			cmp 	#$40
.3522	f0 13		beq $3537			beq 	_IFNExitOkay 				; if so , then we are done.
.3524	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3526	29 3f		and #$3f			and 	#$3F
.3528	c9 20		cmp #$20			cmp 	#$20
.352a	f0 0b		beq $3537			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.352c	20 4d 35	jsr $354d			jsr 	IFloatDecExponent
.352f	20 07 35	jsr $3507			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3532	80 e8		bra $351c			bra 	_IFNLoop
.3534					_IFNExitZero:
.3534	20 e0 34	jsr $34e0			jsr 	IFloatSetZero 				; set the result to zero
.3537					_IFNExitOkay:
.3537	18		clc				clc  								; return with CC.
.3538	60		rts				rts
.3539					IFloatIncExponent:
.3539	b5 03		lda $03,x			lda 	IExp,x
.353b	48		pha				pha
.353c	29 c0		and #$c0			and 	#$C0
.353e	8d 27 07	sta $0727			sta 	IFXTemp
.3541	68		pla				pla
.3542	1a		inc a				inc 	a
.3543	29 3f		and #$3f			and 	#$3F
.3545	48		pha				pha
.3546	0d 27 07	ora $0727			ora 	IFXTemp
.3549	95 03		sta $03,x			sta 	IExp,x
.354b	68		pla				pla
.354c	60		rts				rts
.354d					IFloatDecExponent:
.354d	b5 03		lda $03,x			lda 	IExp,x
.354f	48		pha				pha
.3550	29 c0		and #$c0			and 	#$C0
.3552	8d 27 07	sta $0727			sta 	IFXTemp
.3555	68		pla				pla
.3556	3a		dec a				dec 	a
.3557	29 3f		and #$3f			and 	#$3F
.3559	48		pha				pha
.355a	0d 27 07	ora $0727			ora 	IFXTemp
.355d	95 03		sta $03,x			sta 	IExp,x
.355f	68		pla				pla
.3560	60		rts				rts
.0727					IFXTemp:
>0727							.fill 	1
.3561					IFloatBufferReset:
.3561	9c 28 07	stz $0728			stz 	IFBufferCount
.3564	9c 29 07	stz $0729			stz 	IFBuffer
.3567	60		rts				rts
.3568					IFloatGetBufferAddress:
.3568	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.356a	a2 28		ldx #$28			ldx 	#(IFBufferCount & $FF)
.356c	ad 28 07	lda $0728			lda 	IFBufferCount
.356f	60		rts				rts
.3570					IFloatBufferWrite:
.3570	da		phx				phx
.3571	ae 28 07	ldx $0728			ldx 	IFBufferCount
.3574	9d 29 07	sta $0729,x			sta 	IFBuffer,x
.3577	9e 2a 07	stz $072a,x			stz 	IFBuffer+1,x
.357a	ee 28 07	inc $0728			inc 	IFBufferCount
.357d	fa		plx				plx
.357e	60		rts				rts
.357f					IFloatStripTrailingZeros:
.357f	ae 28 07	ldx $0728			ldx 	IFBufferCount
.3582	bd 28 07	lda $0728,x			lda 	IFBuffer-1,x
.3585	c9 30		cmp #$30			cmp		#"0"
.3587	d0 0f		bne $3598			bne 	_IFSTExit
.3589	bd 27 07	lda $0727,x			lda 	IFBuffer-2,x
.358c	c9 2e		cmp #$2e			cmp 	#"."
.358e	f0 08		beq $3598			beq 	_IFSTExit
.3590	ce 28 07	dec $0728			dec 	IFBufferCount
.3593	9e 28 07	stz $0728,x			stz 	IFBuffer-1,x
.3596	80 e7		bra $357f			bra 	IFloatStripTrailingZeros
.3598					_IFSTExit:
.3598	60		rts				rts
.0728					IFBufferCount:
>0728							.fill 	1
.0729					IFBuffer:
>0729							.fill 	25
.3599					IFloatCheckRange:
.3599	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.359b	09 40		ora #$40			ora 	#IFSign
.359d	85 0b		sta $0b				sta 	IFR0+IExp
.359f	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.35a1	20 d8 2e	jsr $2ed8			jsr 	IFloatAdd 					; add allowed to error.
.35a4	a2 08		ldx #$08			ldx 	#IFR0
.35a6	20 d9 34	jsr $34d9			jsr 	IFloatCheckZero 			; error if < 0
.35a9	f0 06		beq $35b1			beq 	_IFAOkay
.35ab	a5 0b		lda $0b				lda 	IFR0+IExp
.35ad	29 40		and #$40			and 	#IFSign
.35af	d0 01		bne $35b2			bne 	_IFAFail
.35b1					_IFAOkay:
.35b1	60		rts				rts
.35b2					_IFAFail:
.35b2	38		sec				sec
.35b3	68		pla				pla 								; get address - 2
.35b4	e9 02		sbc #$02			sbc 	#2
.35b6	aa		tax				tax
.35b7	68		pla				pla
.35b8	e9 00		sbc #$00			sbc 	#0
.35ba	a8		tay				tay
.35bb	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.35bd					_IFAStop:
>35bd	db						.byte 	$DB 						; display an error AA ADR ADR
.35be	80 fd		bra $35bd			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
