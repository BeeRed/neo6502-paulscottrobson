
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Thu Jul  6 18:11:17 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorSize:
>0344							.fill 	2
.0346					sectorCount:
>0346							.fill 	2
.0348					currentSector:
>0348							.fill 	2
.034a					successFlag:
>034a							.fill 	1
.034b					sectorHeader:
.034b					shFirstNext:
>034b							.fill 	1
.034c					shContinue:
>034c							.fill 	1
.034d					shDataSize:
>034d							.fill 	2
.034f					shFileSize:
>034f							.fill 	2
>0351							.fill 	10
.035b					shNameLength:
>035b							.fill 	1
.035c					shNameText:
>035c							.fill 	15
.036b					shFileSizeCopy:
>036b							.fill 	2
.036d					notFirstSector:
>036d							.fill 	1
.036e					sectorCapacity:
>036e							.fill 	2
.0370					fileRemainingSize:
>0370							.fill 	2
.0372					bytesToWrite:
>0372							.fill 	2
>0374							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 67 23	jsr $2367			jsr 	PGMSetBaseAddress
.1007	20 0e 30	jsr $300e			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.100f	4c 71 17	jmp $1771			jmp 	Command_RUN
.1012	4c 75 16	jmp $1675			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="R"					AM_RELATIVE 	= 'R' 						; bra nnnn
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="T"					AM_ABSOLUTEI  	= 'T' 						; jmp (nnnn)   [only instance]
="U"					AM_ABSOLUTEIX	= 'U' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d4					AM_ZIND 	= ('T'|AM_ZPAGE) 				; lda (nn)
=$d5					AM_ZINDX	= ('U'|AM_ZPAGE) 				; lda (nn,x)
=$d6					AM_ZINDY	= ('V'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f
=$8d90					PR_RENUMBER = $8d90

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.1015					Command_AssemblerStart:
.1015					_CALoop:
.1015	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.1017	c8		iny				iny 								; consume it.
.1018	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.101a	f0 15		beq $1031			beq 	_CALabel
.101c	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.101e	f0 3d		beq $105d			beq 	_CAExit
.1020	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.1022	f0 f1		beq $1015			beq 	_CALoop
.1024	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; end of line.
.1026	f0 14		beq $103c			beq 	_CAEnd
.1028	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.102a	c9 40		cmp #$40			cmp 	#$40
.102c	f0 08		beq $1036			beq 	_CAOpcode
.102e	4c ab 29	jmp $29ab		jmp	ErrorV_syntax
.1031					_CALabel:
.1031	20 57 12	jsr $1257			jsr 	ASLabel 					; handle a label
.1034	80 df		bra $1015			bra 	_CALoop
.1036					_CAOpcode:
.1036	88		dey				dey 								; get it back
.1037	20 80 11	jsr $1180			jsr 	ASOpcode 					; assemble that opcode.
.103a	80 d9		bra $1015			bra 	_CALoop
.103c	18		clc		_CAEnd:	clc 								; next line
.103d	b2 18		lda ($18)			lda 	(codePtr)
.103f	65 18		adc $18				adc 	codePtr
.1041	85 18		sta $18				sta 	codePtr
.1043	90 02		bcc $1047			bcc 	_CANoCarry
.1045	e6 19		inc $19				inc 	codePtr+1
.1047					_CANoCarry:
.1047	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1049	b1 18		lda ($18),y			lda 	(codePtr),y
.104b	8d 2f 06	sta $062f			sta 	ERRLine
.104e	c8		iny				iny
.104f	b1 18		lda ($18),y			lda 	(codePtr),y
.1051	8d 30 06	sta $0630			sta 	ERRLine+1
.1054	a0 03		ldy #$03			ldy 	#3 							; tokenised code position.
.1056	b2 18		lda ($18)			lda 	(codePtr) 					; code present
.1058	d0 bb		bne $1015			bne 	_CALoop 					; go round again
.105a	4c e1 17	jmp $17e1			jmp 	Command_END 				; do END.
.105d					_CAExit:
.105d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/calcopcode.asm

.105e					ASCalculateOpcodeHash:
.105e	20 86 10	jsr $1086			jsr 	_ASCGetCharacter 			; get first alphanumeric character 0-25 rep A-Z
.1061	20 93 10	jsr $1093			jsr 	_ASCProcess 				; go through the shift/multiply process
.1064	85 24		sta $24				sta 	zTemp0
.1066	20 86 10	jsr $1086			jsr 	_ASCGetCharacter 			; get second alphanumeric character
.1069	18		clc				clc
.106a	65 24		adc $24				adc 	zTemp0 						; add previous result.
.106c	2a		rol a				rol 	a 							; 8 bit rotate left
.106d	69 00		adc #$00			adc 	#0
.106f	49 a5		eor #$a5			eor 	#165 						; XOR with 165
.1071	20 93 10	jsr $1093			jsr 	_ASCProcess 				; and shift/multiply again.
.1074	85 24		sta $24				sta 	zTemp0
.1076	20 86 10	jsr $1086			jsr 	_ASCGetCharacter 			; get third character
.1079	18		clc				clc
.107a	65 24		adc $24				adc 	zTemp0 						; and add
.107c	48		pha				pha
.107d	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by
.107f	c9 7c		cmp #$7c			cmp 	#$7C 						; $7C which identifies end of identifier.
.1081	d0 1b		bne $109e			bne 	_ASCSyntax
.1083	c8		iny				iny
.1084	68		pla				pla 								; restore and exit
.1085	60		rts				rts
.1086					_ASCGetCharacter:
.1086	b1 18		lda ($18),y			lda 	(codePtr),y 				; get and consume character
.1088	c8		iny				iny
.1089	38		sec				sec
.108a	e9 40		sbc #$40			sbc 	#$40 						; shift $40 -> $00
.108c	30 10		bmi $109e			bmi 	_ASCSyntax 					; check range.
.108e	c9 1a		cmp #$1a			cmp 	#26
.1090	b0 0c		bcs $109e			bcs 	_ASCSyntax
.1092	60		rts				rts
.1093					_ASCProcess:
.1093	85 25		sta $25				sta 	zTemp0+1 					; multiply by 5
.1095	0a		asl a				asl 	a
.1096	0a		asl a				asl 	a
.1097	18		clc				clc
.1098	65 25		adc $25				adc 	zTemp0+1
.109a	18		clc				clc 								; add 68
.109b	69 44		adc #$44			adc 	#68
.109d	60		rts				rts
.109e					_ASCSyntax:
.109e	4c ab 29	jmp $29ab		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/generate.asm

.10a1					ASGenerateCode:
.10a1	5a		phy				phy
.10a2	a2 00		ldx #$00			ldx 	#0
.10a4					_ASGSearch:
.10a4	bd 46 1d	lda $1d46,x			lda 	AssemblerLookup,x 			; check table
.10a7	cd 04 05	cmp $0504			cmp 	ASCurrOpcode 				; do we have a match ?
.10aa	d0 0e		bne $10ba			bne 	_ASGNoMatch
.10ac	da		phx				phx 								; save X
.10ad	8a		txa				txa 								; get the address mode for this instruction
.10ae	8d 03 05	sta $0503			sta 	ASGOpcode
.10b1	20 1b 11	jsr $111b			jsr 	ASGetModeForOpcode 			; into A.
.10b4	20 c2 10	jsr $10c2			jsr 	ASGTryGenerate		 		; try to generate with mode A
.10b7	fa		plx				plx
.10b8	b0 06		bcs $10c0			bcs 	_ASGDone 					; successful :)
.10ba					_ASGNoMatch:
.10ba	e8		inx				inx 								; keep going.
.10bb	d0 e7		bne $10a4			bne 	_ASGSearch
.10bd	4c ab 29	jmp $29ab		jmp	ErrorV_syntax
.10c0					_ASGDone:
.10c0	7a		ply				ply
.10c1	60		rts				rts
.10c2					ASGTryGenerate:
.10c2	cd 05 05	cmp $0505			cmp 	ASCurrMode 					; do the modes match ?
.10c5	f0 26		beq $10ed			beq 	_ASGMatches 				; yes, we have a result.
.10c7	ae 05 05	ldx $0505			ldx 	ASCurrMode 					; get the instruction mode.
.10ca	e0 41		cpx #$41			cpx 	#AM_ABSOLUTE 				; is it an absolute we can try as ZP
.10cc	f0 12		beq $10e0			beq 	_ASGTryZero 				; this works because in the 65C02 all the
.10ce	e0 58		cpx #$58			cpx 	#AM_ABSOLUTEX 				; ZP equivalents are before the Absolutes
.10d0	f0 0e		beq $10e0			beq 	_ASGTryZero 				; numerically.
.10d2	e0 59		cpx #$59			cpx 	#AM_ABSOLUTEY
.10d4	f0 0a		beq $10e0			beq 	_ASGTryZero
.10d6	e0 54		cpx #$54			cpx 	#AM_ABSOLUTEI
.10d8	f0 06		beq $10e0			beq 	_ASGTryZero
.10da	e0 55		cpx #$55			cpx 	#AM_ABSOLUTEIX
.10dc	f0 02		beq $10e0			beq 	_ASGTryZero
.10de					_ASGFail:
.10de	18		clc				clc 								; give up.
.10df	60		rts				rts
.10e0					_ASGTryZero:
.10e0	29 7f		and #$7f			and 	#$7F 						; this is the ZP equivalent of A,AX,AY ?
.10e2	cd 05 05	cmp $0505			cmp 	ASCurrMode 					; does that match ?
.10e5	d0 f7		bne $10de			bne  	_ASGFail 					; no, this won't work.
.10e7	09 80		ora #$80			ora 	#$80 						; try with a ZP
.10e9	a6 09		ldx $09				ldx 	IFR0+IM1 					; check if this is okay for zero page.
.10eb	d0 f1		bne $10de			bne 	_ASGFail 					; cannot use as the value is too large (e.g. >256)
.10ed					_ASGMatches:
.10ed	48		pha				pha
.10ee	20 1e 12	jsr $121e			jsr 	ASAddress 					; address out.
.10f1	ad 03 05	lda $0503			lda 	ASGOpcode 					; write opcode
.10f4	20 ff 11	jsr $11ff			jsr 	ASWriteByte 				; write a byte
.10f7	68		pla				pla
.10f8	c9 49		cmp #$49			cmp 	#AM_IMPLIED 				; dispatch
.10fa	f0 12		beq $110e			beq 	_ASGExit
.10fc	c9 52		cmp #$52			cmp 	#AM_RELATIVE
.10fe	f0 1a		beq $111a			beq 	_ASGRelative
.1100	c9 00		cmp #$00			cmp 	#0
.1102	30 0f		bmi $1113			bmi 	_ASGZeroPage
.1104					_ASGAbsolute:
.1104	a5 09		lda $09				lda 	IFR0+IM1
.1106	20 ff 11	jsr $11ff			jsr 	ASWriteByte
.1109					_ASGWriteLSB:
.1109	a5 08		lda $08				lda 	IFR0+IM0
.110b	20 ff 11	jsr $11ff			jsr 	ASWriteByte
.110e					_ASGExit:
.110e	20 35 12	jsr $1235			jsr 	ASEndLine
.1111	38		sec				sec
.1112	60		rts				rts
.1113					_ASGZeroPage:
.1113	a5 09		lda $09				lda 	IFR0+IM1 					; check operand
.1115	f0 f2		beq $1109			beq 	_ASGWriteLSB
.1117	4c cd 29	jmp $29cd		jmp	ErrorV_value
.111a					_ASGRelative:
>111a	db						.byte 	$DB
.0503					ASGOpcode:
>0503							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/getmode.asm

.111b					ASGetModeForOpcode:
.111b	5a		phy				phy
.111c	a8		tay				tay 								; save in Y
.111d	a2 00		ldx #$00			ldx 	#0
.111f					_ASGSearch:
.111f	98		tya				tya 								; check if opcode matches
.1120	dd 65 11	cmp $1165,x			cmp 	ASGSpecialCases,x
.1123	f0 1b		beq $1140			beq 	_ASGIsSpecial
.1125	e8		inx				inx
.1126	e8		inx				inx
.1127	bd 65 11	lda $1165,x			lda 	ASGSpecialCases,x 			; check end of table ($F3 is an illegal 65C02 opcode)
.112a	c9 f3		cmp #$f3			cmp 	#$F3
.112c	d0 f1		bne $111f			bne 	_ASGSearch
.112e	98		tya				tya 								; only interested in lower 5 bits.
.112f	29 1f		and #$1f			and 	#$1F
.1131	a8		tay				tay
.1132	29 0f		and #$0f			and 	#$0F 						; lower 4 bits of the opcode
.1134	0a		asl a				asl 	a 							; index into ASG Table
.1135	aa		tax				tax
.1136	c0 10		cpy #$10			cpy 	#$10 						; was bit 5 set,  e.g. the MSB is odd
.1138	90 01		bcc $113b			bcc 	_ASGEven
.113a	e8		inx				inx 								; if so, take from second half.
.113b					_ASGEven:
.113b	bd 45 11	lda $1145,x			lda 	ASGTable,x 					; fetch the mode from the table
.113e	7a		ply				ply
.113f	60		rts				rts
.1140					_ASGIsSpecial:
.1140	bd 66 11	lda $1166,x			lda 	ASGSpecialCases+1,x 		; get special case for that mode.
.1143	7a		ply				ply
.1144	60		rts				rts
.1145					ASGTable:
>1145	a3 52						.byte 	AM_IMMEDIATE,AM_RELATIVE				; x0
>1147	d5 d6						.byte 	AM_ZINDX,AM_ZINDY 						; x1
>1149	a3 d4						.byte 	AM_IMMEDIATE,AM_ZIND 					; x2
>114b	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x3 (all NOP)
>114d	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x4
>114f	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x5
>1151	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x6
>1153	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; x7
>1155	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x8
>1157	a3 59						.byte 	AM_IMMEDIATE,AM_ABSOLUTEY				; x9
>1159	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xA
>115b	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xB
>115d	41 41						.byte 	AM_ABSOLUTE,AM_ABSOLUTE 				; xC
>115f	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xD
>1161	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xE
>1163	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; xF
.1165					ASGSpecialCases:
>1165	80 52						.byte	$80	,	AM_RELATIVE						;	BRA	rel
>1167	14 a3						.byte	$14	,	AM_IMMEDIATE					;	TRB	imm
>1169	96 d9						.byte	$96	,	AM_ZEROY						;	STX	nn,y
>116b	b6 d9						.byte	$B6	,	AM_ZEROY						;	LDX	nn,y
>116d	3c 58						.byte	$3C	,	AM_ABSOLUTEX					;	BIT	nnnn,x
>116f	6c 54						.byte	$6C	,	AM_ABSOLUTEI					;	JMP	(nnnn)
>1171	7c 55						.byte	$7C	,	AM_ABSOLUTEIX					;	JMP 	(nnnn,x)
>1173	bc 58						.byte	$BC	,	AM_ABSOLUTEX					;	LDY	nnnn,x
>1175	be 59						.byte	$BE	,	AM_ABSOLUTEY					;	LDX	nnnn,y
>1177	00 49						.byte	$00	,	AM_IMPLIED						;	BRK
>1179	20 41						.byte	$20	,	AM_ABSOLUTE						;	JSR	nnnn
>117b	40 49						.byte	$40	,	AM_IMPLIED						;	RTI
>117d	60 49						.byte	$60	,	AM_IMPLIED						;	RTS
>117f	f3						.byte 	$F3 									; (illegal opcode)

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/instruction.asm

.1180					ASOpcode:
.1180	20 5e 10	jsr $105e			jsr 	ASCalculateOpcodeHash 		; calculate the opcode hash.
.1183	8d 04 05	sta $0504			sta 	ASCurrOpcode
.1186	20 90 11	jsr $1190			jsr 	ASIdentifyAddressMode 		; identify the address mode type.
.1189	8d 05 05	sta $0505			sta 	ASCurrMode
.118c	20 a1 10	jsr $10a1			jsr 	ASGenerateCode 				; search and generate appropriate code.
.118f	60		rts				rts
.0504					ASCurrOpcode:
>0504							.fill 	1
.0505					ASCurrMode:
>0505							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/parsemode.asm

.1190					ASIdentifyAddressMode:
.1190	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next ?
.1192	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ  		; EOL or : => implied
.1194	f0 17		beq $11ad			beq 	_ASImplied
.1196	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1198	f0 13		beq $11ad			beq 	_ASImplied
.119a	c9 a4		cmp #$a4			cmp 	#PR_HASH 					; # then immediate
.119c	f0 12		beq $11b0			beq 	_ASImmediate
.119e	c9 eb		cmp #$eb			cmp 	#PR_LPAREN 					; if ( then indirection of some sort.
.11a0	f0 15		beq $11b7			beq 	_ASIndirect
.11a2	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; remaining choices are nnnn nnnn,x and nnnn,y
.11a5	20 df 11	jsr $11df			jsr 	ASCheckIndex 				; check index follows
.11a8	b0 02		bcs $11ac			bcs 	_ASIndexed 					; index found ? then it will return X Y
.11aa	a9 41		lda #$41			lda 	#AM_ABSOLUTE 				; otherwise return A
.11ac					_ASIndexed:
.11ac	60		rts				rts
.11ad					_ASImplied:
.11ad	a9 49		lda #$49			lda 	#AM_IMPLIED 				; return implied mode
.11af	60		rts				rts
.11b0					_ASImmediate:
.11b0	c8		iny				iny 								; consume #
.11b1	20 da 19	jsr $19da			jsr 	EXPEvalInteger8 			; 8 bit operand
.11b4	a9 a3		lda #$a3			lda 	#AM_IMMEDIATE
.11b6	60		rts				rts
.11b7					_ASIndirect:
.11b7	c8		iny				iny 								; consume the open bracket
.11b8	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; we do this because of jmp (xxxx) and (xxxx,x)
.11bb	20 df 11	jsr $11df			jsr 	ASCheckIndex 				; look for ,X
.11be	b0 12		bcs $11d2			bcs 	_ASInternalIndirect 		; ,X or ,Y found.
.11c0	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 				; not found. Must be ) or ),Y
.11c3	20 df 11	jsr $11df			jsr 	ASCheckIndex
.11c6	90 07		bcc $11cf			bcc 	_ASIIndirect 				; if ,[XY] not found, then exit assuming (xxxx)
.11c8	c9 59		cmp #$59			cmp 	#"Y" 						; must be ,Y in this mode.
.11ca	d0 10		bne $11dc			bne 	ASCISyntax 					; if not error
.11cc	a9 d6		lda #$d6			lda 	#AM_ZINDY 					; return (nn),y
.11ce	60		rts				rts
.11cf					_ASIIndirect:
.11cf	a9 54		lda #$54			lda 	#AM_ABSOLUTEI 				; might be jmp (xxxx)
.11d1	60		rts				rts
.11d2					_ASInternalIndirect:
.11d2	c9 58		cmp #$58			cmp 	#"X"						; must have been X
.11d4	d0 06		bne $11dc			bne 	ASCISyntax 					; error if (nn,y) not allowed !
.11d6	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 				; check complete e.g. (nnnn,x)
.11d9	a9 55		lda #$55			lda 	#AM_ABSOLUTEIX 				; because it might be JMP (nnnn,x)
.11db	60		rts				rts
.11dc					ASCISyntax:
.11dc	4c ab 29	jmp $29ab		jmp	ErrorV_syntax
.11df					ASCheckIndex:
.11df	b1 18		lda ($18),y			lda 	(codePtr),y 				; check comma ?
.11e1	c9 99		cmp #$99			cmp 	#PR_COMMA
.11e3	d0 18		bne $11fd			bne 	_ASCIFail
.11e5	c8		iny				iny 								; consume comma
.11e6	b1 18		lda ($18),y			lda 	(codePtr),y
.11e8	c9 57		cmp #$57			cmp 	#'X'-'A'+$40 				; check if X or Y
.11ea	f0 04		beq $11f0			beq 	_ASCIFound
.11ec	c9 58		cmp #$58			cmp 	#'Y'-'A'+$40
.11ee	d0 ec		bne $11dc			bne 	ASCISyntax
.11f0					_ASCIFound:
.11f0	aa		tax				tax 								; save X or Y in X
.11f1	c8		iny				iny 								; consume
.11f2	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by end of identifier
.11f4	c8		iny				iny
.11f5	c9 7c		cmp #$7c			cmp 	#$7C
.11f7	d0 e3		bne $11dc			bne 	ASCISyntax
.11f9	8a		txa				txa 								; get X/Y back
.11fa	1a		inc a				inc 	a 							; convert to 'X' or 'Y' characters
.11fb	38		sec				sec
.11fc	60		rts				rts
.11fd					_ASCIFail:
.11fd	18		clc				clc
.11fe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/write.asm

.11ff					ASWriteByte:
.11ff	ae b3 06	ldx $06b3			ldx 	('P'-'A')*4 + FastVariables + 0
.1202	86 24		stx $24				stx 	zTemp0
.1204	ae b4 06	ldx $06b4			ldx 	('P'-'A')*4 + FastVariables + 1
.1207	86 25		stx $25				stx 	zTemp0+1
.1209	92 24		sta ($24)			sta 	(zTemp0)
.120b	48		pha				pha
.120c	a9 20		lda #$20			lda 	#32
.120e	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1211	68		pla				pla
.1212	20 3b 12	jsr $123b			jsr 	ASPrintHex
.1215	ee b3 06	inc $06b3			inc 	('P'-'A')*4 + FastVariables + 0
.1218	d0 03		bne $121d			bne 	_ASWBNoCarry
.121a	ee b4 06	inc $06b4			inc 	('P'-'A')*4 + FastVariables + 1
.121d					_ASWBNoCarry:
.121d	60		rts				rts
.121e					ASAddress:
.121e	ad b4 06	lda $06b4			lda 	('P'-'A')*4 + FastVariables + 1
.1221	20 3b 12	jsr $123b			jsr 	ASPrintHex
.1224	ad b3 06	lda $06b3			lda 	('P'-'A')*4 + FastVariables + 0
.1227	20 3b 12	jsr $123b			jsr 	ASPrintHex
.122a	a9 20		lda #$20			lda 	#32
.122c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.122f	a9 3a		lda #$3a			lda 	#':'
.1231	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1234	60		rts				rts
.1235					ASEndLine:
.1235	a9 0d		lda #$0d			lda 	#13
.1237	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.123a	60		rts				rts
.123b					ASPrintHex:
.123b	48		pha				pha
.123c	4a		lsr a				lsr 	a
.123d	4a		lsr a				lsr 	a
.123e	4a		lsr a				lsr 	a
.123f	4a		lsr a				lsr 	a
.1240	20 44 12	jsr $1244			jsr 	_ASPrintNibble
.1243	68		pla				pla
.1244					_ASPrintNibble:
.1244	29 0f		and #$0f			and 	#15
.1246	c9 0a		cmp #$0a			cmp 	#10
.1248	90 02		bcc $124c			bcc 	_ASNotHex
.124a	69 06		adc #$06			adc 	#6
.124c					_ASNotHex:
.124c	69 30		adc #$30			adc 	#48
.124e	c9 40		cmp #$40			cmp 	#64
.1250	90 02		bcc $1254			bcc 	_ASNotChar
.1252	49 20		eor #$20			eor 	#32
.1254					_ASNotChar:
.1254	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.1257					ASLabel:
.1257	20 44 1a	jsr $1a44			jsr 	EXPTermR0 					; get term
.125a	90 1b		bcc $1277			bcc 	_ALError 					; must be a reference term.
.125c	24 0b		bit $0b				bit 	IFR0+IExp	 				; string reference ?
.125e	30 17		bmi $1277			bmi 	_ALError
.1260	5a		phy				phy
.1261	ad b3 06	lda $06b3			lda 	('P'-'A')*4 + FastVariables	; copy P to variable
.1264	92 08		sta ($08)			sta 	(IFR0+IM0)
.1266	a0 01		ldy #$01			ldy 	#1
.1268	ad b4 06	lda $06b4			lda 	('P'-'A')*4 + FastVariables+1
.126b	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.126d	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.126f	c8		iny				iny
.1270	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.1272	c8		iny				iny
.1273	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.1275	7a		ply				ply
.1276	60		rts				rts
.1277					_ALError:
.1277	4c ab 29	jmp $29ab		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.127a					Command_ASSERT:
.127a	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 				; get a number to assert
.127d	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.127f	20 1a 36	jsr $361a			jsr 	IFloatCheckZero
.1282	f0 01		beq $1285			beq 	_CAFail 					; if so, the assert fails.
.1284	60		rts				rts
.1285					_CAFail:
.1285	4c 01 2a	jmp $2a01		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1288					Command_CLEAR:
.1288	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.128a	c9 9b		cmp #$9b			cmp 	#PR_COLON
.128c	f0 14		beq $12a2			beq 	_CLNoParam
.128e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1290	f0 10		beq $12a2			beq 	_CLNoParam
.1292	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; address for CLEAR
.1295	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1297	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1299	b0 0b		bcs $12a6			bcs 	_CLMemory
.129b	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.129d	90 07		bcc $12a6			bcc 	_CLMemory
.129f	8d 1e 05	sta $051e			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.12a2					_CLNoParam:
.12a2	20 a9 12	jsr $12a9			jsr 	ClearCode
.12a5	60		rts				rts
.12a6					_CLMemory:
.12a6	4c 9b 2a	jmp $2a9b		jmp	ErrorV_memory
.12a9					ClearCode:
.12a9	20 7a 23	jsr $237a			jsr 	PGMEndProgram 				; end program => zTemp0
.12ac	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.12ae	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.12b0	1a		inc a				inc 	a
.12b1	85 2b		sta $2b				sta 	freeMemory+1
.12b3	20 ad 2f	jsr $2fad			jsr 	VARClearHashTables
.12b6	ad 1e 05	lda $051e			lda 	PGMEndMemoryHigh
.12b9	20 f2 2b	jsr $2bf2			jsr 	StackReset 					; page passed on in A
.12bc	20 51 2c	jsr $2c51			jsr 	StringSystemInitialise
.12bf	20 16 29	jsr $2916			jsr 	ScanProcedures
.12c2	20 43 17	jsr $1743			jsr 	Command_RESTORE
.12c5	60		rts				rts
.12c6					AllocateMemory:
.12c6	5a		phy				phy 								; save Y
.12c7	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.12c9	5a		phy				phy
.12ca	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.12cc	5a		phy				phy
.12cd	a8		tay				tay 								; count is now in XY
.12ce					_AllocateLoop:
.12ce	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.12d0	d0 04		bne $12d6			bne 	_AllocateOne
.12d2	c0 00		cpy #$00			cpy 	#0
.12d4	f0 15		beq $12eb			beq 	_AllocateExit
.12d6					_AllocateOne:
.12d6	a9 00		lda #$00			lda 	#0 							; zero byte
.12d8	92 2a		sta ($2a)			sta 	(freeMemory)
.12da	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.12dc	d0 05		bne $12e3			bne 	_AllocateSkipCarry
.12de	e6 2b		inc $2b				inc 	freeMemory+1
.12e0	20 ef 12	jsr $12ef			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.12e3					_AllocateSkipCarry:
.12e3	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.12e5	d0 01		bne $12e8			bne 	_AllocateSkipBorrow
.12e7	ca		dex				dex
.12e8					_AllocateSkipBorrow:
.12e8	88		dey				dey
.12e9	80 e3		bra $12ce			bra 	_AllocateLoop
.12eb					_AllocateExit:
.12eb	fa		plx				plx 								; restore address
.12ec	68		pla				pla
.12ed	7a		ply				ply 								; restore Y
.12ee	60		rts				rts
.12ef					ClearCheckMemory:
.12ef	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.12f1	1a		inc a				inc 	a 							; spacing 2 pages
.12f2	1a		inc a				inc 	a
.12f3	cd 26 06	cmp $0626			cmp 	stringMemory+1 				; problems if hit string memory
.12f6	b0 01		bcs $12f9			bcs  	_CCMError
.12f8	60		rts				rts
.12f9					_CCMError:
.12f9	4c 9b 2a	jmp $2a9b		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.12fc					CommandDIM:
.12fc	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.12fe	29 c0		and #$c0			and 	#$C0
.1300	c9 40		cmp #$40			cmp 	#$40
.1302	d0 39		bne $133d			bne 	_CDSyntax
.1304	20 64 2f	jsr $2f64			jsr 	VARGetInfo 					; get information
.1307	ad 34 06	lda $0634			lda 	VARType 					; check array.
.130a	29 02		and #$02			and 	#2
.130c	f0 2f		beq $133d			beq 	_CDSyntax
.130e	20 16 2f	jsr $2f16			jsr 	VARFind 					; does it already exist
.1311	b0 2d		bcs $1340			bcs 	_CDExists
.1313	20 c2 2e	jsr $2ec2			jsr 	VARCreate 					; create it - returns data ptr in XA
.1316	da		phx				phx 								; save target address
.1317	48		pha				pha
.1318	ad 34 06	lda $0634			lda 	VARType 					; type ID.
.131b	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.131d	20 43 13	jsr $1343			jsr 	CreateArray 				; create array to XA
.1320	84 26		sty $26				sty 	zTemp1 						; save Y
.1322	7a		ply				ply 								; restore target to zTemp0
.1323	84 24		sty $24				sty 	zTemp0
.1325	7a		ply				ply
.1326	84 25		sty $25				sty 	zTemp0+1
.1328	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.132a	a0 01		ldy #$01			ldy 	#1
.132c	8a		txa				txa
.132d	91 24		sta ($24),y			sta 	(zTemp0),y
.132f	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.1331	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 				; check )
.1334	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.1336	c8		iny				iny
.1337	c9 99		cmp #$99			cmp 	#PR_COMMA
.1339	f0 c1		beq $12fc			beq 	CommandDIM
.133b	88		dey				dey
.133c	60		rts				rts
.133d					_CDSyntax:
.133d	4c ab 29	jmp $29ab		jmp	ErrorV_syntax
.1340					_CDExists:
.1340	4c 73 2a	jmp $2a73		jmp	ErrorV_redefine
.1343					CreateArray:
.1343	8d 06 05	sta $0506			sta 	CAType						; save type
.1346	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; get array dimension to R0
.1349	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.134b	c9 99		cmp #$99			cmp 	#PR_COMMA
.134d	f0 04		beq $1353			beq 	_CATwoDimensions
.134f	20 9f 13	jsr $139f			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.1352	60		rts				rts
.1353					_CATwoDimensions:
.1353	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.1355	8d 08 05	sta $0508			sta 	CADim1+1
.1358	a5 08		lda $08				lda 	IFR0+IM0
.135a	8d 07 05	sta $0507			sta 	CADim1+0
.135d	20 8c 2b	jsr $2b8c			jsr 	ERRCheckComma 				; check comma
.1360	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.1363	5a		phy				phy 								; save Y position
.1364	18		clc				clc 								; allocate the outer array of pointers.
.1365	ae 08 05	ldx $0508			ldx 	CADim1+1
.1368	ad 07 05	lda $0507			lda 	CADim1
.136b	20 de 13	jsr $13de			jsr 	CSAAllocate 				; allocate the outer array
.136e	da		phx				phx									; save this address on the stack
.136f	48		pha				pha
.1370	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.1372	85 28		sta $28				sta 	zTemp2
.1374					_CACreateSubLoop:
.1374	38		sec				sec
.1375	20 9f 13	jsr $139f			jsr 	CreateSingleArray 			; create data array of required size.
.1378	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.137a	91 28		sta ($28),y			sta 	(zTemp2),y
.137c	8a		txa				txa
.137d	c8		iny				iny
.137e	91 28		sta ($28),y			sta 	(zTemp2),y
.1380	18		clc				clc  								; next slot.
.1381	a5 28		lda $28				lda 	zTemp2
.1383	69 02		adc #$02			adc 	#2
.1385	85 28		sta $28				sta 	zTemp2
.1387	90 02		bcc $138b			bcc 	_CACNoCarry
.1389	e6 29		inc $29				inc 	zTemp2+1
.138b					_CACNoCarry:
.138b	ad 07 05	lda $0507			lda 	CADim1 						; use DIM1 as a counter
.138e	d0 03		bne $1393			bne 	_CACNoBorrow
.1390	ce 08 05	dec $0508			dec 	CADim1+1
.1393					_CACNoBorrow:
.1393	ce 07 05	dec $0507			dec 	CADim1
.1396	ad 08 05	lda $0508			lda 	CADim1+1 					; but do one more.
.1399	10 d9		bpl $1374			bpl 	_CACreateSubLoop
.139b	68		pla				pla
.139c	fa		plx				plx
.139d	7a		ply				ply
.139e	60		rts				rts
.139f					CreateSingleArray:
.139f	5a		phy				phy
.13a0	38		sec				sec 								; allocate memory block all zeros.
.13a1	a5 08		lda $08				lda 	IFR0+IM0
.13a3	a6 09		ldx $09				ldx 	IFR0+IM1
.13a5	20 de 13	jsr $13de			jsr 	CSAAllocate
.13a8	ac 06 05	ldy $0506			ldy 	CAType 						; if numbers, we don't need to initialise.
.13ab	f0 2f		beq $13dc			beq 	_CSANoInit
.13ad	da		phx				phx 								; save address of new array
.13ae	48		pha				pha
.13af	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.13b1	86 25		stx $25				stx 	zTemp0+1
.13b3	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.13b5	b1 24		lda ($24),y			lda 	(zTemp0),y
.13b7	a8		tay				tay
.13b8	b2 24		lda ($24)			lda 	(zTemp0)
.13ba	aa		tax				tax
.13bb					_CSAEraseString:
.13bb	5a		phy				phy
.13bc	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.13be	a9 80		lda #$80			lda 	#$80
.13c0	91 24		sta ($24),y			sta 	(zTemp0),y
.13c2	7a		ply				ply
.13c3	18		clc				clc 								; add 4 to next slot.
.13c4	a5 24		lda $24				lda 	zTemp0
.13c6	69 04		adc #$04			adc 	#4
.13c8	85 24		sta $24				sta 	zTemp0
.13ca	90 02		bcc $13ce			bcc 	_CSAENoCarry
.13cc	e6 25		inc $25				inc 	zTemp0+1
.13ce					_CSAENoCarry:
.13ce	e0 00		cpx #$00			cpx 	#0
.13d0	d0 01		bne $13d3			bne 	_CSANoBorrow
.13d2	88		dey				dey
.13d3					_CSANoBorrow:
.13d3	ca		dex				dex
.13d4	d0 e5		bne $13bb			bne 	_CSAEraseString
.13d6	c0 00		cpy #$00			cpy 	#0
.13d8	d0 e1		bne $13bb			bne 	_CSAEraseString
.13da	68		pla				pla
.13db	fa		plx				plx
.13dc					_CSANoInit:
.13dc	7a		ply				ply
.13dd	60		rts				rts
.13de					CSAAllocate:
.13de	08		php				php 								; save type flag.
.13df	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.13e0	d0 01		bne $13e3			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.13e2	e8		inx				inx
.13e3					_CSAANoCarry:
.13e3	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.13e5	b0 2e		bcs $1415			bcs 	_CSARange
.13e7	28		plp				plp 								; restore type flag
.13e8	08		php				php 								; save it back again.
.13e9	da		phx				phx 								; save size.
.13ea	48		pha				pha
.13eb	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.13ed	90 03		bcc $13f2			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.13ef	0a		asl a				asl 	a
.13f0	26 25		rol $25				rol 	zTemp0+1
.13f2					_CSAATimes2:
.13f2	0a		asl a				asl 	a
.13f3	26 25		rol $25				rol 	zTemp0+1
.13f5	18		clc				clc
.13f6	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.13f8	90 02		bcc $13fc			bcc 	_CSAANoCarry2
.13fa	e6 25		inc $25				inc 	zTemp0+1
.13fc					_CSAANoCarry2:
.13fc	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.13fe	20 c6 12	jsr $12c6			jsr 	AllocateMemory 				; allocate memory to XA
.1401	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.1403	85 24		sta $24				sta 	zTemp0
.1405	68		pla				pla  								; write element count to first 2 bytes
.1406	92 24		sta ($24)			sta 	(zTemp0)
.1408	68		pla				pla 								; msb of element count
.1409	28		plp				plp 								; CC if pointer array
.140a	b0 02		bcs $140e			bcs 	_CSAAIsData
.140c	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.140e					_CSAAIsData:
.140e	a0 01		ldy #$01			ldy 	#1
.1410	91 24		sta ($24),y			sta 	(zTemp0),y
.1412	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.1414	60		rts				rts
.1415					_CSARange:
.1415	4c bc 29	jmp $29bc		jmp	ErrorV_range
.0506					CAType:
>0506							.fill 	1
.0507					CADim1:
>0507							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.1418					Command_Doke:
.1418	38		sec				sec
.1419	80 01		bra $141c			bra 	DPCommon
.141b					Command_Poke:
.141b	18		clc				clc
.141c					DPCommon:
.141c	08		php				php 								; CS if DOKE
.141d	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; address
.1420	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.1422	48		pha				pha
.1423	a5 09		lda $09				lda 	IFR0+IM1
.1425	48		pha				pha
.1426	20 8c 2b	jsr $2b8c			jsr 	ERRCheckComma 				; [dp]oke address,data
.1429	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16
.142c	68		pla				pla 								; get address back
.142d	85 25		sta $25				sta 	zTemp0+1
.142f	68		pla				pla
.1430	85 24		sta $24				sta 	zTemp0
.1432	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.1434	92 24		sta ($24)			sta 	(zTemp0)
.1436	28		plp				plp 								; done if CC
.1437	90 08		bcc $1441			bcc 	_DPExit
.1439	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.143a	a5 09		lda $09				lda 	IFR0+IM1
.143c	a0 01		ldy #$01			ldy 	#1
.143e	91 24		sta ($24),y			sta 	(zTemp0),y
.1440	7a		ply				ply
.1441					_DPExit:
.1441	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.1442					Command_GOTO:
.1442	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; get line number
.1445					GotoR0:
.1445	ad 1d 05	lda $051d			lda 	PGMBaseHigh 				; back to the program start
.1448	85 19		sta $19				sta 	codePtr+1
.144a	64 18		stz $18				stz 	codePtr
.144c					_GOSearch:
.144c	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.144e	f0 1f		beq $146f			beq 	_GOError
.1450	a0 01		ldy #$01			ldy 	#1 							; found line #
.1452	b1 18		lda ($18),y			lda 	(codePtr),y
.1454	c5 08		cmp $08				cmp 	IFR0+IM0
.1456	d0 0a		bne $1462			bne 	_GONext
.1458	c8		iny				iny
.1459	b1 18		lda ($18),y			lda 	(codePtr),y
.145b	c5 09		cmp $09				cmp 	IFR0+IM1
.145d	d0 03		bne $1462			bne 	_GONext
.145f	4c 88 17	jmp $1788			jmp 	RUNNewLine
.1462					_GONext:
.1462	18		clc				clc 								; advance to next line.
.1463	b2 18		lda ($18)			lda 	(codePtr)
.1465	65 18		adc $18				adc 	codePtr
.1467	85 18		sta $18				sta 	codePtr
.1469	90 e1		bcc $144c			bcc 	_GOSearch
.146b	e6 19		inc $19				inc 	codePtr+1
.146d	80 dd		bra $144c			bra 	_GOSearch
.146f					_GOError:
.146f	4c 40 2b	jmp $2b40		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1472					Command_Input:
.1472	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.1474	8d 09 05	sta $0509			sta 	InputFlag
.1477	80 03		bra $147c			bra 	Command_IP_Main
.1479					Command_Print:
.1479	9c 09 05	stz $0509			stz 	InputFlag
.147c					Command_IP_Main:
.147c	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.147d					_CPLoop:
.147d	08		php				php 								; save "last action" flag
.147e	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1480	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1482	f0 48		beq $14cc			beq 	_CPExit 					; without consuming
.1484	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1486	f0 44		beq $14cc			beq 	_CPExit
.1488	68		pla				pla 								; throw last action flag
.1489	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and consume
.148b	c8		iny				iny
.148c	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon (syntax seperator)
.148e	f0 39		beq $14c9			beq 	_CPContinueWithSameLine
.1490	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma (tab)
.1492	f0 30		beq $14c4			beq 	_CPTab
.1494	88		dey				dey 								; undo the get.
.1495	2c 09 05	bit $0509			bit 	InputFlag 					; check for Input
.1498	10 0b		bpl $14a5			bpl	 	_CPNotInput
.149a	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.149c	c9 40		cmp #$40			cmp 	#$40
.149e	d0 05		bne $14a5			bne 	_CPNotInput
.14a0	20 d5 14	jsr $14d5			jsr 	_CPInputCode 				; input code
.14a3	80 d7		bra $147c			bra 	Command_IP_Main 			; and go round again.
.14a5					_CPNotInput:
.14a5	20 7c 19	jsr $197c			jsr 	EXPEvaluateExpression 		; evaluate expression.
.14a8	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.14aa	10 0e		bpl $14ba			bpl 	_CPNumber
.14ac	5a		phy				phy
.14ad	18		clc				clc 								; string address to YX
.14ae	a5 08		lda $08				lda 	IFR0+IM0
.14b0	aa		tax				tax
.14b1	a5 09		lda $09				lda 	IFR0+IM1
.14b3	a8		tay				tay
.14b4	20 09 15	jsr $1509			jsr 	CPPrintYX 					; print YX
.14b7	7a		ply				ply
.14b8	80 c2		bra $147c			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.14ba					_CPNumber:
.14ba	5a		phy				phy
.14bb	20 1e 34	jsr $341e			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.14be	20 09 15	jsr $1509			jsr 	CPPrintYX 					; print string at YX
.14c1	7a		ply				ply
.14c2	80 b8		bra $147c			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.14c4					_CPTab:
.14c4	a9 09		lda #$09			lda 	#9 							; print TAB
.14c6	20 21 15	jsr $1521			jsr 	CPPrintA
.14c9					_CPContinueWithSameLine:
.14c9	38		sec				sec 								; loop round with carry set, which
.14ca	80 b1		bra $147d			bra 	_CPLoop 					; will inhibit final CR
.14cc					_CPExit:
.14cc	28		plp				plp 								; get last action flag
.14cd	b0 05		bcs $14d4			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.14cf	a9 0d		lda #$0d			lda 	#13 						; print new line
.14d1	20 21 15	jsr $1521			jsr 	CPPrintA
.14d4					_CPExit2:
.14d4	60		rts				rts
.14d5					_CPInputCode:
.14d5	20 44 1a	jsr $1a44			jsr 	EXPTermR0 					; get the term, the thing being input to
.14d8	5a		phy				phy 								; save position
.14d9	20 1e 15	jsr $151e			jsr 	CPInputA					; input a line to YX
.14dc	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.14de	30 18		bmi $14f8			bmi 	_CPInputString
.14e0	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.14e2	48		pha				pha
.14e3	a5 09		lda $09				lda 	IFR0+IM1
.14e5	48		pha				pha
.14e6	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.14e8	84 25		sty $25				sty 	zTemp0+1
.14ea	20 2e 1d	jsr $1d2e			jsr 	VALConversionZTemp0
.14ed	68		pla				pla 								; do the assign.
.14ee	85 25		sta $25				sta 	zTemp0+1
.14f0	68		pla				pla
.14f1	85 24		sta $24				sta 	zTemp0
.14f3	20 49 15	jsr $1549			jsr 	AssignNumber
.14f6	7a		ply				ply
.14f7	60		rts				rts
.14f8					_CPInputString:
.14f8	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.14fa	85 24		sta $24				sta 	zTemp0
.14fc	a5 09		lda $09				lda 	IFR0+IM1
.14fe	85 25		sta $25				sta 	zTemp0+1
.1500	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1502	84 09		sty $09				sty 	IFR0+IM1
.1504	20 60 15	jsr $1560			jsr 	AssignString 				; assign the string
.1507	7a		ply				ply 								; exit
.1508	60		rts				rts
.1509					CPPrintYX:
.1509	86 24		stx $24				stx 	zTemp0
.150b	84 25		sty $25				sty 	zTemp0+1
.150d	b2 24		lda ($24)			lda 	(zTemp0)
.150f	aa		tax				tax
.1510	f0 0b		beq $151d			beq 	_CPPrintExit
.1512	a0 01		ldy #$01			ldy 	#1
.1514					_CPPrintAYXLoop:
.1514	b1 24		lda ($24),y			lda 	(zTemp0),y
.1516	20 21 15	jsr $1521			jsr 	CPPrintA
.1519	c8		iny				iny
.151a	ca		dex				dex
.151b	d0 f7		bne $1514			bne 	_CPPrintAYXLoop
.151d					_CPPrintExit:
.151d	60		rts				rts
.151e					CPInputA:
.151e	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.1521					CPPrintA:
.1521	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.0509					InputFlag:
>0509							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1524					CommandLET:
.1524	20 44 1a	jsr $1a44			jsr 	EXPTermR0 					; get term
.1527	90 6f		bcc $1598			bcc 	CLError 					; must be a reference term.
.1529	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.152b	48		pha				pha
.152c	a5 09		lda $09				lda 	IFR0+IM1
.152e	48		pha				pha
.152f	a5 0b		lda $0b				lda 	IFR0+IExp
.1531	48		pha				pha
.1532	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1534	20 94 2b	jsr $2b94			jsr 	ERRCheckA
.1537	20 7c 19	jsr $197c			jsr 	EXPEvaluateExpression 		; right hand side.
.153a	68		pla				pla 								; restore type of l-expr
.153b	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.153d	30 5c		bmi $159b			bmi 	CLType
.153f	fa		plx				plx 	 							; pop target address to zTemp0
.1540	86 25		stx $25				stx 	zTemp0+1
.1542	fa		plx				plx
.1543	86 24		stx $24				stx 	zTemp0
.1545					AssignData:
.1545	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.1547	30 17		bmi $1560			bmi 	AssignString
.1549					AssignNumber:
.1549	5a		phy				phy
.154a	a0 03		ldy #$03			ldy 	#3
.154c	a5 0b		lda $0b				lda 	IFR0+IExp
.154e	91 24		sta ($24),y			sta 	(zTemp0),y
.1550	88		dey				dey
.1551	a5 0a		lda $0a				lda 	IFR0+IM2
.1553	91 24		sta ($24),y			sta 	(zTemp0),y
.1555	88		dey				dey
.1556	a5 09		lda $09				lda 	IFR0+IM1
.1558	91 24		sta ($24),y			sta 	(zTemp0),y
.155a	a5 08		lda $08				lda 	IFR0+IM0
.155c	92 24		sta ($24)			sta 	(zTemp0)
.155e	7a		ply				ply
.155f	60		rts				rts
.1560					AssignString:
.1560	5a		phy				phy
.1561	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1563	b1 24		lda ($24),y			lda 	(zTemp0),y
.1565	12 24		ora ($24)			ora 	(zTemp0)
.1567	f0 23		beq $158c			beq 	_CLConcreteString
.1569	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.156b	85 26		sta $26				sta 	zTemp1
.156d	b1 24		lda ($24),y			lda 	(zTemp0),y
.156f	85 27		sta $27				sta 	zTemp1+1
.1571	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.1573	38		sec				sec 								; we want 3 for slot size, status, string size.
.1574	e9 03		sbc #$03			sbc 	#3
.1576	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1578	90 12		bcc $158c			bcc 	_CLConcreteString 			; if it won't fit concrete the string again.
.157a	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte)
.157c	1a		inc a				inc 	a
.157d	aa		tax				tax
.157e	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1580					_CLReplaceString:
.1580	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1582	c8		iny				iny
.1583	c8		iny				iny
.1584	91 26		sta ($26),y			sta 	(zTemp1),y
.1586	88		dey				dey
.1587	ca		dex				dex
.1588	d0 f6		bne $1580			bne 	_CLReplaceString
.158a	80 0a		bra $1596			bra 	_CLExit
.158c					_CLConcreteString:
.158c	20 06 2c	jsr $2c06			jsr 	StringConcrete  			; concreted string in XA.
.158f	a0 01		ldy #$01			ldy 	#1 							; store the address
.1591	92 24		sta ($24)			sta 	(zTemp0)
.1593	8a		txa				txa
.1594	91 24		sta ($24),y			sta 	(zTemp0),y
.1596					_CLExit:
.1596	7a		ply				ply
.1597	60		rts				rts
.1598					CLError:
.1598	4c de 2a	jmp $2ade		jmp	ErrorV_variable
.159b					CLType:
.159b	4c db 29	jmp $29db		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.159e					Command_LIST:
.159e	9c 0a 05	stz $050a			stz 	CLFrom 						; default from
.15a1	9c 0b 05	stz $050b			stz 	CLFrom+1
.15a4	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.15a6	c9 99		cmp #$99			cmp 	#PR_COMMA
.15a8	f0 1d		beq $15c7			beq 	_CLToLine
.15aa	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.15ac	f0 37		beq $15e5			beq 	_CLDefaultTo
.15ae	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.15b1	a5 08		lda $08				lda 	IFR0+IM0
.15b3	8d 0a 05	sta $050a			sta 	CLFrom
.15b6	8d 0c 05	sta $050c			sta 	CLTo
.15b9	a5 09		lda $09				lda 	IFR0+IM1
.15bb	8d 0b 05	sta $050b			sta 	CLFrom+1
.15be	8d 0d 05	sta $050d			sta 	CLTo+1
.15c1	b1 18		lda ($18),y			lda 	(codePtr),y
.15c3	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.15c5	f0 26		beq $15ed			beq 	_CLList
.15c7					_CLToLine:
.15c7	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.15c9	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.15cb	f0 18		beq $15e5			beq 	_CLDefaultTo
.15cd	20 8c 2b	jsr $2b8c			jsr 	ERRCheckComma 				; sep comma
.15d0	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.15d2	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.15d4	f0 0f		beq $15e5			beq 	_CLDefaultTo
.15d6	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; there's a To value.
.15d9	a5 08		lda $08				lda 	IFR0+IM0
.15db	8d 0c 05	sta $050c			sta 	CLTo
.15de	a5 09		lda $09				lda 	IFR0+IM1
.15e0	8d 0d 05	sta $050d			sta 	CLTo+1
.15e3	80 08		bra $15ed			bra 	_CLList
.15e5					_CLDefaultTo:
.15e5	a9 ff		lda #$ff			lda 	#$FF
.15e7	8d 0c 05	sta $050c			sta 	CLTo
.15ea	8d 0d 05	sta $050d			sta 	CLTo+1
.15ed					_CLList:
.15ed	ad 1d 05	lda $051d			lda 	PGMBaseHigh 				; back to the program start
.15f0	85 19		sta $19				sta 	codePtr+1
.15f2	64 18		stz $18				stz 	codePtr
.15f4	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.15f6	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.15f8	20 c0 21	jsr $21c0			jsr 	TOKSetDetokeniseOutput
.15fb					_CLLoop:
.15fb	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.15fd	f0 51		beq $1650			beq 	_CLExit
.15ff	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1602	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1605	d0 4c		bne $1653			bne 	_CLBreak
.1607	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1609	20 56 16	jsr $1656			jsr 	_CLCompareLine
.160c	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.160e	f0 33		beq $1643			beq 	_CLNext
.1610	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1612	20 56 16	jsr $1656			jsr 	_CLCompareLine
.1615	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.1617	f0 2a		beq $1643			beq 	_CLNext
.1619	a0 02		ldy #$02			ldy 	#2 							; print line #
.161b	b1 18		lda ($18),y			lda 	(codePtr),y
.161d	aa		tax				tax
.161e	88		dey				dey
.161f	b1 18		lda ($18),y			lda 	(codePtr),y
.1621	20 db 2d	jsr $2ddb			jsr 	WriteIntXA
.1624					_CLSpacing:
.1624	a9 20		lda #$20			lda 	#32
.1626	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1629	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.162c	e0 06		cpx #$06			cpx 	#6
.162e	d0 f4		bne $1624			bne 	_CLSpacing
.1630	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.1632	a5 18		lda $18				lda 	codePtr
.1634	18		clc				clc
.1635	69 03		adc #$03			adc 	#3
.1637	aa		tax				tax
.1638	90 01		bcc $163b			bcc 	_CLNoCarry2
.163a	c8		iny				iny
.163b					_CLNoCarry2:
.163b	20 65 21	jsr $2165			jsr 	TOKDetokenise
.163e	a9 0d		lda #$0d			lda 	#13	 						; next line
.1640	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1643					_CLNext:
.1643	18		clc				clc 								; advance to next line.
.1644	b2 18		lda ($18)			lda 	(codePtr)
.1646	65 18		adc $18				adc 	codePtr
.1648	85 18		sta $18				sta 	codePtr
.164a	90 02		bcc $164e			bcc 	_CLNoCarry
.164c	e6 19		inc $19				inc 	codePtr+1
.164e					_CLNoCarry:
.164e	80 ab		bra $15fb			bra 	_CLLoop
.1650					_CLExit:
.1650	4c fa 2d	jmp $2dfa			jmp 	WarmStart
.1653					_CLBreak:
.1653	4c 36 2b	jmp $2b36		jmp	ErrorV_break
.1656					_CLCompareLine:
.1656	a0 01		ldy #$01			ldy 	#1
.1658	38		sec				sec
.1659	b1 18		lda ($18),y			lda 	(codePtr),y
.165b	fd 0a 05	sbc $050a,x			sbc 	CLFrom,x
.165e	85 24		sta $24				sta 	zTemp0
.1660	c8		iny				iny
.1661	b1 18		lda ($18),y			lda 	(codePtr),y
.1663	fd 0b 05	sbc $050b,x			sbc 	CLFrom+1,x
.1666	90 0a		bcc $1672			bcc 	_CLIsNegative
.1668	d0 05		bne $166f			bne 	_CLIsPositive
.166a	a5 24		lda $24				lda 	zTemp0
.166c	d0 01		bne $166f			bne 	_CLIsPositive
.166e	60		rts				rts
.166f					_CLIsPositive:
.166f	a9 01		lda #$01			lda 	#1
.1671	60		rts				rts
.1672					_CLIsNegative:
.1672	a9 ff		lda #$ff			lda 	#255
.1674	60		rts				rts
.050a					CLFrom:
>050a							.fill 	2
.050c					CLTo:
>050c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1675					Command_NEW:
.1675	20 6e 23	jsr $236e			jsr 	PGMNewProgram 				; Reset current program
.1678	20 a9 12	jsr $12a9			jsr 	ClearCode 					; Run CLR
.167b	4c e1 17	jmp $17e1			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.167e					Command_READ:
.167e	20 44 1a	jsr $1a44			jsr 	EXPTermR0 					; get term to R0
.1681	90 35		bcc $16b8			bcc 	_CRSyntax 					; fail if not a reference.
.1683	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1685	48		pha				pha
.1686	a5 09		lda $09				lda 	IFR0+IM1
.1688	48		pha				pha
.1689	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.168b	48		pha				pha
.168c	20 55 17	jsr $1755			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.168f	ad 12 05	lda $0512			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1692	d0 27		bne $16bb			bne 	_CRHaveData  				; forward for the next one.
.1694					_CRNextLine:
.1694	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1696	f0 1a		beq $16b2			beq 	_CRNoData
.1698					_CRKeepSearching:
.1698	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.169a	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.169c	20 bb 28	jsr $28bb			jsr 	ScanForward
.169f	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.16a1	f0 18		beq $16bb			beq 	_CRHaveData 				; found it
.16a3	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.16a5	18		clc				clc 								; try the next line, keep going.
.16a6	b2 18		lda ($18)			lda 	(codePtr)
.16a8	65 18		adc $18				adc 	codePtr
.16aa	85 18		sta $18				sta 	codePtr
.16ac	90 e6		bcc $1694			bcc 	_CRNextLine
.16ae	e6 19		inc $19				inc 	codePtr+1
.16b0	80 e2		bra $1694			bra 	_CRNextLine
.16b2					_CRNoData:
.16b2	4c 63 2a	jmp $2a63		jmp	ErrorV_data
.16b5					_CLType:
.16b5	4c db 29	jmp $29db		jmp	ErrorV_type
.16b8					_CRSyntax:
.16b8	4c ab 29	jmp $29ab		jmp	ErrorV_syntax
.16bb					_CRHaveData:
.16bb	20 7c 19	jsr $197c			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.16be	68		pla				pla 								; type of l-expr
.16bf	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.16c1	30 f2		bmi $16b5			bmi 	_CLType
.16c3	68		pla				pla 								; restore address
.16c4	85 25		sta $25				sta 	zTemp0+1
.16c6	68		pla				pla
.16c7	85 24		sta $24				sta 	zTemp0
.16c9	20 45 15	jsr $1545			jsr 	AssignData 					; write R0 there.
.16cc	9c 12 05	stz $0512			stz 	dataInStatement 			; clear in data flag
.16cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.16d1	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.16d3	d0 04		bne $16d9			bne 	_CRSwapBack
.16d5	c8		iny				iny 								; consume comma
.16d6	ee 12 05	inc $0512			inc 	dataInStatement 			; set in data statement flag.
.16d9					_CRSwapBack:
.16d9	20 55 17	jsr $1755			jsr 	SwapCodeDataPointers		; swap them back.
.16dc	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.16de	c8		iny				iny
.16df	c9 99		cmp #$99			cmp 	#PR_COMMA
.16e1	f0 9b		beq $167e			beq 	Command_READ 				; if so go round again.
.16e3	88		dey				dey 								; unpick get.
.16e4	60		rts				rts
.16e5					Command_DATA:
.16e5	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.16e7	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.16e9	20 bb 28	jsr $28bb			jsr 	ScanForward
.16ec	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.16ee	d0 01		bne $16f1			bne 	_CDNotEOL
.16f0	88		dey				dey
.16f1					_CDNotEOL:
.16f1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.16f2					Command_REM:
.16f2					Command_REM2:
.16f2	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.16f4	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.16f6	d0 06		bne $16fe			bne 	_CRExit
.16f8	c8		iny				iny 								; skip over it, it's a comment.
.16f9	98		tya				tya
.16fa	38		sec				sec
.16fb	71 18		adc ($18),y			adc 	(codePtr),y
.16fd	a8		tay				tay
.16fe					_CRExit:
.16fe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.16ff					Command_RENUMBER:
.16ff	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.1701	85 08		sta $08				sta 	IM0+IFR0
.1703	a9 03		lda #$03			lda 	#1000 >> 8
.1705	85 09		sta $09				sta 	IM1+IFR0
.1707	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1709	c9 9b		cmp #$9b			cmp 	#PR_COLON
.170b	f0 07		beq $1714			beq 	_CRIsDefault
.170d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.170f	f0 03		beq $1714			beq 	_CRIsDefault
.1711	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; get other start
.1714					_CRIsDefault:
.1714	5a		phy				phy
.1715	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.1717	ad 1d 05	lda $051d			lda 	PGMBaseHigh
.171a	85 25		sta $25				sta 	zTemp0+1
.171c					_CRRenumberLoop:
.171c	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.171e	f0 21		beq $1741			beq 	_CRExit
.1720	18		clc				clc
.1721	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.1723	a5 08		lda $08				lda 	IFR0+IM0
.1725	91 24		sta ($24),y			sta 	(zTemp0),y
.1727	69 0a		adc #$0a			adc 	#10
.1729	85 08		sta $08				sta 	IFR0+IM0
.172b	c8		iny				iny
.172c	a5 09		lda $09				lda 	IFR0+IM1
.172e	91 24		sta ($24),y			sta 	(zTemp0),y
.1730	69 00		adc #$00			adc 	#0
.1732	85 09		sta $09				sta 	IFR0+IM1
.1734	18		clc				clc 								; next line.
.1735	b2 24		lda ($24)			lda 	(zTemp0)
.1737	65 24		adc $24				adc 	zTemp0
.1739	85 24		sta $24				sta 	zTemp0
.173b	90 df		bcc $171c			bcc 	_CRRenumberLoop
.173d	e6 25		inc $25				inc 	zTemp0+1
.173f	80 db		bra $171c			bra 	_CRRenumberLoop
.1741					_CRExit:
.1741	7a		ply				ply
.1742	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1743					S
.1743					Command_RESTORE:
.1743	ad 1d 05	lda $051d			lda 	PGMBaseHigh 				; back to the program start
.1746	8d 0f 05	sta $050f			sta 	dataPtr+1
.1749	9c 0e 05	stz $050e			stz 	dataPtr
.174c	a9 03		lda #$03			lda 	#3 							; position start of line
.174e	8d 10 05	sta $0510			sta 	dataPos
.1751	9c 12 05	stz $0512			stz 	dataInStatement 			; not in statement
.1754	60		rts				rts
.1755					SwapCodeDataPointers:
.1755	ad 0e 05	lda $050e			lda 	dataPtr 					; swap LSB of code/data
.1758	a6 18		ldx $18				ldx 	codePtr
.175a	85 18		sta $18				sta 	codePtr
.175c	8e 0e 05	stx $050e			stx 	dataPtr
.175f	ad 0f 05	lda $050f			lda 	dataPtr+1 					; swap MSB of code/data
.1762	a6 19		ldx $19				ldx 	codePtr+1
.1764	85 19		sta $19				sta 	codePtr+1
.1766	8e 0f 05	stx $050f			stx 	dataPtr+1
.1769	ad 10 05	lda $0510			lda 	dataPos 					; swap dataPos and Y
.176c	8c 10 05	sty $0510			sty 	dataPos
.176f	a8		tay				tay
.1770	60		rts				rts
.050e					dataPtr:
>050e							.fill 	2
.0510					dataPos:
>0510							.fill 	2
.0512					dataInStatement:
>0512							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1771					Command_RUN:
.1771	20 a9 12	jsr $12a9			jsr 	ClearCode					; clear everything out.
.1774	ad 1d 05	lda $051d			lda 	PGMBaseHigh 				; back to the program start
.1777	85 19		sta $19				sta 	codePtr+1
.1779	64 18		stz $18				stz 	codePtr
.177b	80 0b		bra $1788			bra 	RUNNewLine
.177d					RUNEndOfLine:
.177d	18		clc				clc 								; advance to next line.
.177e	b2 18		lda ($18)			lda 	(codePtr)
.1780	65 18		adc $18				adc 	codePtr
.1782	85 18		sta $18				sta 	codePtr
.1784	90 02		bcc $1788			bcc 	_RELNoCarry
.1786	e6 19		inc $19				inc 	codePtr+1
.1788					_RELNoCarry:
.1788					RUNNewLine:
.1788	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.178a	9a		txs				txs
.178b	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.178d	f0 52		beq $17e1			beq 	Command_END
.178f	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1791	b1 18		lda ($18),y			lda 	(codePtr),y
.1793	8d 2f 06	sta $062f			sta 	ERRLine
.1796	c8		iny				iny
.1797	b1 18		lda ($18),y			lda 	(codePtr),y
.1799	8d 30 06	sta $0630			sta 	ERRLine+1
.179c	c8		iny				iny 								; offset into codePtr for start of line.
.179d					RUNNewCommand:
.179d	9c 24 06	stz $0624			stz 	stringInitialised 			; reset string system flag.
.17a0	ce 13 05	dec $0513			dec 	checkCounter				; don't do these checks ever command
.17a3	d0 0a		bne $17af			bne 	_RNCNoCheck
.17a5	5a		phy				phy 								; keyboard check.
.17a6	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.17a9	7a		ply				ply
.17aa	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.17ad	d0 1e		bne $17cd			bne 	_RUNBreak
.17af					_RNCNoCheck:
.17af	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.17b1	10 1d		bpl $17d0			bpl		_RUNNotToken 				; probably an identifier
.17b3	c8		iny				iny 								; consume token
.17b4	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.17b6	f0 e5		beq $179d			beq 	RUNNewCommand
.17b8	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.17ba	b0 0e		bcs $17ca			bcs 	_RUNSyntax
.17bc	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.17be	90 0a		bcc $17ca			bcc 	_RUNSyntax
.17c0	0a		asl a				asl 	a 							; double into X.
.17c1	aa		tax				tax
.17c2	20 c7 17	jsr $17c7			jsr 	_RUNDispatchMain			; call the main dispatcher
.17c5	80 d6		bra $179d			bra 	RUNNewCommand
.17c7					_RUNDispatchMain:
.17c7	7c 43 20	jmp ($2043,x)			jmp 	(VectorTable,x)
.17ca					_RUNSyntax:
.17ca	4c ab 29	jmp $29ab		jmp	ErrorV_syntax
.17cd					_RUNBreak:
.17cd	4c 36 2b	jmp $2b36		jmp	ErrorV_break
.17d0					_RUNNotToken:
.17d0	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error (numbers)
.17d2	90 f6		bcc $17ca			bcc 	_RUNSyntax
.17d4	20 24 15	jsr $1524			jsr 	CommandLET 					; assignment
.17d7	80 c4		bra $179d			bra 	RUNNewCommand 				; loop round.
.17d9					Command_Shift_Handler:
.17d9	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.17db	c8		iny				iny
.17dc	0a		asl a				asl 	a 							; double into X
.17dd	aa		tax				tax
.17de	7c 43 21	jmp ($2143,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.17e1					Command_END:
.17e1	4c fa 2d	jmp $2dfa			jmp 	WarmStart
.0513					checkCounter:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.17e4					Command_STOP:
.17e4	4c 4f 2a	jmp $2a4f		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.17e7					Command_Sys:
.17e7	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; execution address
.17ea	5a		phy				phy
.17eb	ad 77 06	lda $0677			lda 	('A'-'A')*4 + FastVariables ; load AXY
.17ee	ae d3 06	ldx $06d3			ldx 	('X'-'A')*4 + FastVariables
.17f1	ac d7 06	ldy $06d7			ldy 	('Y'-'A')*4 + FastVariables
.17f4	20 f9 17	jsr $17f9			jsr 	_CSCallIFR0 				; call the code
.17f7	7a		ply				ply
.17f8	60		rts				rts
.17f9					_CSCallIFR0:
.17f9	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.17fc					NoExec01:
.17fc					NoExec02:
.17fc					NoExec03:
.17fc					NoExec04:
.17fc					NoExec05:
.17fc					NoExec06:
.17fc					NoExec07:
.17fc					NoExec08:
.17fc	4c ab 29	jmp $29ab		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.17ff					EXPBinAdd:
.17ff	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1801	30 6f		bmi $1872			bmi 	EXPConcatenate
.1803	a2 0c		ldx #$0c			ldx 	#IFR1
.1805	4c 19 30	jmp $3019			jmp 	IFloatAdd
.1808					EXPBinSub:
.1808	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.180a	30 3f		bmi $184b			bmi 	EXPTypeError
.180c	a2 0c		ldx #$0c			ldx 	#IFR1
.180e	4c 12 30	jmp $3012			jmp 	IFloatSubtract
.1811					EXPBinMul:
.1811	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.1813	30 36		bmi $184b			bmi 	EXPTypeError
.1815	a2 0c		ldx #$0c			ldx 	#IFR1
.1817	4c c3 30	jmp $30c3			jmp 	IFloatMultiply
.181a					EXPBinFDiv:
.181a	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.181c	30 2d		bmi $184b			bmi 	EXPTypeError
.181e	a2 0c		ldx #$0c			ldx 	#IFR1
.1820	20 45 33	jsr $3345			jsr 	IFloatDivideFloat
.1823	b0 0f		bcs $1834			bcs 	EXPDZero
.1825	60		rts				rts
.1826					EXPBinIDiv:
.1826	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1828	30 21		bmi $184b			bmi 	EXPTypeError
.182a	a2 0c		ldx #$0c			ldx 	#IFR1
.182c	20 45 33	jsr $3345			jsr 	IFloatDivideFloat
.182f	b0 03		bcs $1834			bcs 	EXPDZero
.1831	4c 22 33	jmp $3322			jmp 	IFloatIntegerR0
.1834					EXPDZero:
.1834	4c 24 2a	jmp $2a24		jmp	ErrorV_divzero
.1837					EXPBinIMod:
.1837	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1839	30 10		bmi $184b			bmi 	EXPTypeError
.183b	a2 0c		ldx #$0c			ldx 	#IFR1
.183d	5a		phy				phy
.183e	20 58 32	jsr $3258			jsr 	IFPreProcessBitwise 		; set up everything.
.1841	d0 05		bne $1848			bne 	EXPDRange
.1843	20 91 31	jsr $3191			jsr 	IFloatModulusInteger
.1846	7a		ply				ply
.1847	60		rts				rts
.1848					EXPDRange:
.1848	4c bc 29	jmp $29bc		jmp	ErrorV_range
.184b					EXPTypeError:
.184b	4c db 29	jmp $29db		jmp	ErrorV_type
.184e					EXPBinAnd:
.184e	24 0b		bit $0b				bit 	IFR0+IExp
.1850	30 f9		bmi $184b			bmi 	EXPTypeError
.1852	a2 0c		ldx #$0c			ldx 	#IFR1
.1854	20 13 32	jsr $3213			jsr 	IFloatBitwiseAnd
.1857	b0 ef		bcs $1848			bcs 	EXPDRange
.1859	60		rts				rts
.185a					EXPBinOr:
.185a	24 0b		bit $0b				bit 	IFR0+IExp
.185c	30 ed		bmi $184b			bmi 	EXPTypeError
.185e	a2 0c		ldx #$0c			ldx 	#IFR1
.1860	20 2a 32	jsr $322a			jsr 	IFloatBitwiseOr
.1863	b0 e3		bcs $1848			bcs 	EXPDRange
.1865	60		rts				rts
.1866					EXPBinXor:
.1866	24 0b		bit $0b				bit 	IFR0+IExp
.1868	30 e1		bmi $184b			bmi 	EXPTypeError
.186a	a2 0c		ldx #$0c			ldx 	#IFR1
.186c	20 41 32	jsr $3241			jsr 	IFloatBitwiseXor
.186f	b0 d7		bcs $1848			bcs 	EXPDRange
.1871	60		rts				rts
.1872					EXPConcatenate:
.1872	18		clc				clc
.1873	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.1875	72 0c		adc ($0c)			adc 	(IFR1)
.1877	b0 2d		bcs $18a6			bcs 	_EXPCError 					; far too long.
.1879	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.187b	da		phx				phx
.187c	a6 09		ldx $09				ldx 	IFR0+1
.187e	da		phx				phx
.187f	20 79 2c	jsr $2c79			jsr 	StringTempAllocate 			; allocate string, set up return
.1882	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.1884	a5 0c		lda $0c				lda 	IFR1
.1886	20 8f 18	jsr $188f			jsr 	_EXPCCopyXA
.1889	fa		plx				plx 								; copy second string
.188a	68		pla				pla
.188b	20 8f 18	jsr $188f			jsr 	_EXPCCopyXA
.188e	60		rts				rts
.188f					_EXPCCopyXA:
.188f	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.1891	85 24		sta $24				sta 	zTemp0
.1893	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.1895	f0 0e		beq $18a5			beq 	_EXPCCExit 					; nothing in string
.1897	aa		tax				tax 								; count
.1898	5a		phy				phy 								; start position
.1899	a0 01		ldy #$01			ldy 	#1
.189b					_EXPCCLoop:
.189b	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.189d	20 ae 2c	jsr $2cae			jsr 	StringTempWrite
.18a0	c8		iny				iny
.18a1	ca		dex				dex
.18a2	d0 f7		bne $189b			bne 	_EXPCCLoop
.18a4	7a		ply				ply
.18a5					_EXPCCExit:
.18a5	60		rts				rts
.18a6					_EXPCError:
.18a6	4c c8 2a	jmp $2ac8		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.18a9					EXPReturnTrue:
.18a9	a2 08		ldx #$08			ldx 	#IFR0
.18ab	a9 01		lda #$01			lda 	#1
.18ad	20 23 36	jsr $3623			jsr 	IFloatSetByte
.18b0	20 2c 36	jsr $362c			jsr 	IFloatNegate
.18b3	60		rts				rts
.18b4					EXPReturnFalse:
.18b4	a2 08		ldx #$08			ldx 	#IFR0
.18b6	4c 21 36	jmp $3621			jmp 	IFloatSetZero
.18b9					EXPCompareEqual:
.18b9	20 ef 18	jsr $18ef			jsr 	EXPCompareBaseCode
.18bc	c9 00		cmp #$00			cmp 	#0
.18be	f0 e9		beq $18a9			beq 	EXPReturnTrue
.18c0	80 f2		bra $18b4			bra 	EXPReturnFalse
.18c2					EXPCompareLess:
.18c2	20 ef 18	jsr $18ef			jsr 	EXPCompareBaseCode
.18c5	c9 ff		cmp #$ff			cmp 	#$FF
.18c7	f0 e0		beq $18a9			beq 	EXPReturnTrue
.18c9	80 e9		bra $18b4			bra 	EXPReturnFalse
.18cb					EXPCompareGreater:
.18cb	20 ef 18	jsr $18ef			jsr 	EXPCompareBaseCode
.18ce	c9 01		cmp #$01			cmp 	#1
.18d0	f0 d7		beq $18a9			beq 	EXPReturnTrue
.18d2	80 e0		bra $18b4			bra 	EXPReturnFalse
.18d4					EXPCompareNotEqual:
.18d4	20 ef 18	jsr $18ef			jsr 	EXPCompareBaseCode
.18d7	c9 00		cmp #$00			cmp 	#0
.18d9	d0 ce		bne $18a9			bne 	EXPReturnTrue
.18db	80 d7		bra $18b4			bra 	EXPReturnFalse
.18dd					EXPCompareLessEqual:
.18dd	20 ef 18	jsr $18ef			jsr 	EXPCompareBaseCode
.18e0	c9 01		cmp #$01			cmp 	#1
.18e2	d0 c5		bne $18a9			bne 	EXPReturnTrue
.18e4	80 ce		bra $18b4			bra 	EXPReturnFalse
.18e6					EXPCompareGreaterEqual:
.18e6	20 ef 18	jsr $18ef			jsr 	EXPCompareBaseCode
.18e9	c9 ff		cmp #$ff			cmp 	#$FF
.18eb	d0 bc		bne $18a9			bne 	EXPReturnTrue
.18ed	80 c5		bra $18b4			bra 	EXPReturnFalse
.18ef					EXPCompareBaseCode:
.18ef	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.18f1	30 10		bmi $1903			bmi 	_EXCBCString
.18f3	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.18f5	20 f0 32	jsr $32f0			jsr 	IFloatCompare
.18f8	a5 08		lda $08				lda 	IFR0+IM0
.18fa	f0 06		beq $1902			beq 	_EXCBCExit 					; return 0 if zero
.18fc	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.18fe	50 02		bvc $1902			bvc 	_EXCBCExit
.1900	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1902					_EXCBCExit:
.1902	60		rts				rts
.1903					_EXCBCString:
.1903	5a		phy				phy
.1904	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1906	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1908	90 02		bcc $190c			bcc 	_EXCBCSmaller
.190a	b2 0c		lda ($0c)			lda 	(IFR1)
.190c					_EXCBCSmaller:
.190c	aa		tax				tax
.190d	f0 0d		beq $191c			beq 	_EXCBCMatches 				; if zero common length matches
.190f	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1911					_EXCBCCheckSmallerMatches:
.1911	c8		iny				iny 								; compare directly as far as common length
.1912	38		sec				sec
.1913	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1915	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1917	d0 08		bne $1921			bne 	_EXCBCExit2
.1919	ca		dex				dex
.191a	d0 f5		bne $1911			bne 	_EXCBCCheckSmallerMatches
.191c					_EXCBCMatches:
.191c	38		sec				sec
.191d	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.191f	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1921					_EXCBCExit2:
.1921	7a		ply				ply
.1922	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.1924	f0 04		beq $192a			beq 	_EXCBCReturn
.1926	30 03		bmi $192b			bmi 	_EXCBCFF 					; return $FF if <
.1928	a9 01		lda #$01			lda 	#1 							; return 1 if >
.192a					_EXCBCReturn:
.192a	60		rts				rts
.192b					_EXCBCFF:
.192b	a9 ff		lda #$ff			lda 	#$FF
.192d	60		rts				rts
.192e					_EXCBCRange:
.192e	4c bc 29	jmp $29bc		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1931					EXPBinLeft:
.1931	a9 ff		lda #$ff			lda 	#$FF
.1933	8d 14 05	sta $0514			sta 	EXPShiftLeftFlag
.1936	4c 3c 19	jmp $193c			jmp 	EXPShiftCommon
.1939					EXPBinRight:
.1939	9c 14 05	stz $0514			stz 	EXPShiftLeftFlag
.193c					EXPShiftCommon:
.193c	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.193e	05 0f		ora $0f				ora 	IFR1+IExp
.1940	29 7f		and #$7f			and 	#$7F
.1942	d0 35		bne $1979			bne 	_EXPSRange
.1944	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1946	29 e0		and #$e0			and 	#$E0
.1948	05 09		ora $09				ora 	IFR0+IM1
.194a	05 0a		ora $0a				ora 	IFR0+IM2
.194c	d0 25		bne $1973			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.194e	5a		phy				phy
.194f	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.1951	29 1f		and #$1f			and 	#$1F
.1953	f0 17		beq $196c			beq 	_EXPSExit 					; exit if zero
.1955	a8		tay				tay
.1956					_EXPSLoop:
.1956	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.1958	2c 14 05	bit $0514			bit 	EXPShiftLeftFlag
.195b	30 05		bmi $1962			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.195d	20 50 36	jsr $3650			jsr 	IFloatShiftRight
.1960	80 07		bra $1969			bra 	_EXPSContinue
.1962					_EXPSShiftLeft:
.1962	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.1965	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.1967	30 10		bmi $1979			bmi 	_EXPSRange
.1969					_EXPSContinue:
.1969	88		dey				dey 								; do it Y times
.196a	d0 ea		bne $1956			bne 	_EXPSLoop
.196c					_EXPSExit:
.196c	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.196e	20 b2 35	jsr $35b2			jsr 	IFloatCopyFromRegister
.1971	7a		ply				ply
.1972	60		rts				rts
.1973					_EXPSShiftZero:
.1973	a2 08		ldx #$08			ldx 	#IFR0
.1975	20 21 36	jsr $3621			jsr 	IFloatSetZero
.1978	60		rts				rts
.1979					_EXPSRange:
.1979	4c bc 29	jmp $29bc		jmp	ErrorV_range
.0514					EXPShiftLeftFlag:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.197c					EXPEvaluateExpression:
.197c	a9 00		lda #$00			lda 	#0 							; current precedence
.197e					EXPEvaluateExpressionPrecedenceA:
.197e	48		pha				pha
.197f	20 f9 19	jsr $19f9			jsr 	EXPTermValueR0				; do first term.
.1982					_EELoop:
.1982	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1984	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1986	90 31		bcc $19b9			bcc 	_EEExit
.1988	aa		tax				tax 								; access the precedence of the operator.
.1989	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.198a	dd 57 1d	cmp $1d57,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.198d	b0 2b		bcs $19ba			bcs 	_EEExit2
.198f	48		pha				pha 								; save current precedence.
.1990	da		phx				phx 								; save operator
.1991	c8		iny				iny 								; consume operator
.1992	da		phx				phx
.1993	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.1995	20 70 35	jsr $3570			jsr 	IFloatPushRx
.1998	fa		plx				plx
.1999	bd 57 1d	lda $1d57,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.199c	20 7e 19	jsr $197e			jsr 	EXPEvaluateExpressionPrecedenceA
.199f	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.19a1	20 91 35	jsr $3591			jsr 	IFloatPullRx
.19a4	fa		plx				plx 								; operator
.19a5	a5 0b		lda $0b				lda 	IFR0+IExp 					; check if types match.
.19a7	45 0f		eor $0f				eor 	IFR1+IExp
.19a9	30 08		bmi $19b3			bmi 	_EEType		 				; MSBs differ, error.
.19ab					_EETypeOkay:
.19ab	8a		txa				txa
.19ac	0a		asl a				asl 	a 							; double -> X
.19ad	aa		tax				tax
.19ae	20 b6 19	jsr $19b6			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.19b1	80 cf		bra $1982			bra 	_EELoop
.19b3					_EEType:
.19b3	4c db 29	jmp $29db		jmp	ErrorV_type
.19b6					_EECallBinary:
.19b6	7c 43 20	jmp ($2043,x)			jmp 	(VectorTable,x)
.19b9					_EEExit:
.19b9	68		pla				pla 								; throw precedence
.19ba					_EEExit2:
.19ba	18		clc				clc
.19bb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.19bc					EXPEvalNumber:
.19bc	20 7c 19	jsr $197c			jsr 	EXPEvaluateExpression 		; get a value
.19bf	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.19c1	30 01		bmi $19c4			bmi 	EVUType
.19c3	60		rts				rts
.19c4					EVUType:
.19c4	4c db 29	jmp $29db		jmp	ErrorV_type
.19c7					EXPEvalInteger:
.19c7	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.19ca	20 22 33	jsr $3322			jsr 	IFloatIntegerR0
.19cd	60		rts				rts
.19ce					EXPEvalInteger16:
.19ce	20 c7 19	jsr $19c7			jsr 	EXPEvalInteger 				; get integer
.19d1	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.19d3	d0 21		bne $19f6			bne 	EVURange
.19d5	a6 09		ldx $09				ldx 	IFR0+IM1
.19d7	a5 08		lda $08				lda 	IFR0+IM0
.19d9	60		rts				rts
.19da					EXPEvalInteger8:
.19da	20 c7 19	jsr $19c7			jsr 	EXPEvalInteger 				; get integer
.19dd	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.19df	05 09		ora $09				ora 	IFR0+IM1
.19e1	d0 13		bne $19f6			bne 	EVURange
.19e3	a5 08		lda $08				lda 	IFR0+IM0
.19e5	60		rts				rts
.19e6					EXPEvalString:
.19e6	20 7c 19	jsr $197c			jsr 	EXPEvaluateExpression 		; get value
.19e9	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.19eb	10 d7		bpl $19c4			bpl 	EVUType
.19ed	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.19ef	86 25		stx $25				stx 	zTemp0+1
.19f1	a5 08		lda $08				lda 	IFR0+IM0
.19f3	85 24		sta $24				sta 	zTemp0
.19f5	60		rts				rts
.19f6					EVURange:
.19f6	4c bc 29	jmp $29bc		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.19f9					EXPTermValueR0:
.19f9	20 44 1a	jsr $1a44			jsr 	EXPTermR0 					; get term
.19fc	90 45		bcc $1a43			bcc 	_ETVNotReference 			; exit if value.
.19fe	5a		phy				phy
.19ff	a0 03		ldy #$03			ldy 	#3 							; get type
.1a01	b1 08		lda ($08),y			lda 	(IFR0),y
.1a03	30 14		bmi $1a19			bmi 	_ETVDereferenceString
.1a05	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1a07	88		dey				dey 								; get byte 2
.1a08	b1 08		lda ($08),y			lda 	(IFR0),y
.1a0a	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1a0c	88		dey				dey 								; get byte 1
.1a0d	b1 08		lda ($08),y			lda 	(IFR0),y
.1a0f	aa		tax				tax 								; save in X so we can overwrite it
.1a10	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1a12	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1a14	85 08		sta $08				sta 	IFR0+IM0
.1a16	7a		ply				ply
.1a17	18		clc				clc
.1a18	60		rts				rts
.1a19					_ETVDereferenceString:
.1a19	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1a1b	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1a1d	12 08		ora ($08)			ora 	(IFR0)
.1a1f	f0 11		beq $1a32			beq 	_ETVNull 					; if so, return a fake NULL.
.1a21	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1a23	aa		tax				tax
.1a24	b2 08		lda ($08)			lda 	(IFR0)
.1a26	18		clc				clc 								; add two so points to actual string.
.1a27	69 02		adc #$02			adc 	#2
.1a29	90 01		bcc $1a2c			bcc 	_EVDSNoCarry
.1a2b	e8		inx				inx
.1a2c					_EVDSNoCarry:
.1a2c	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1a2e	85 08		sta $08				sta 	IFR0
.1a30	80 08		bra $1a3a			bra 	_ETVFillExit 				; tidy up and exit.
.1a32					_ETVNull:
.1a32	a9 42		lda #$42			lda 	#_EVTNString & $FF
.1a34	85 08		sta $08				sta 	IFR0+IM0
.1a36	a9 1a		lda #$1a			lda 	#_EVTNString >> 8
.1a38	85 09		sta $09				sta 	IFR0+IM1
.1a3a					_ETVFillExit:
.1a3a	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1a3c	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1a3e	85 0b		sta $0b				sta 	IFR0+IExp
.1a40	7a		ply				ply
.1a41	60		rts				rts
.1a42					_EVTNString:
>1a42	00						.byte 	0
.1a43					_ETVNotReference:
.1a43	60		rts				rts
.1a44					EXPTermR0:
.1a44	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1a46	30 10		bmi $1a58			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1a48	c8		iny				iny 								; consume element
.1a49	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1a4b	b0 08		bcs $1a55			bcs 	_ETMIdentifier
.1a4d	20 83 1a	jsr $1a83			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1a50	20 b6 1a	jsr $1ab6			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1a53	18		clc				clc 								; return value ok
.1a54	60		rts				rts
.1a55					_ETMIdentifier:
.1a55	4c ba 2f	jmp $2fba			jmp 	VARCheckSimple 				; check variables, seperate module.
.1a58					_ETMIsUnaryOrMinus:
.1a58	c8		iny				iny 								; consume element
.1a59	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1a5b	d0 0e		bne $1a6b			bne 	_ETMCheckUnary
.1a5d	20 f9 19	jsr $19f9			jsr 	EXPTermValueR0 				; get a term to negate
.1a60	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.1a62	20 2c 36	jsr $362c			jsr 	IFloatNegate
.1a65	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.1a67	30 17		bmi $1a80			bmi 	_ETMUnaryType				; if so error.
.1a69	18		clc				clc
.1a6a	60		rts				rts
.1a6b					_ETMCheckUnary:
.1a6b	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1a6d	90 0e		bcc $1a7d			bcc 	_ETMUnarySyntax
.1a6f	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1a71	b0 0a		bcs $1a7d			bcs 	_ETMUnarySyntax
.1a73	0a		asl a				asl 	a 							; make it into an index => X
.1a74	aa		tax				tax
.1a75	20 7a 1a	jsr $1a7a			jsr 	_ETMCallUnaryFunction 		; call the function
.1a78	18		clc				clc 								; and return it.
.1a79	60		rts				rts
.1a7a					_ETMCallUnaryFunction:
.1a7a	7c 43 20	jmp ($2043,x)			jmp 	(VectorTable,x)
.1a7d					_ETMUnarySyntax:
.1a7d	4c ab 29	jmp $29ab		jmp	ErrorV_syntax
.1a80					_ETMUnaryType:
.1a80	4c db 29	jmp $29db		jmp	ErrorV_type
.1a83					EXPExtractTokenisedInteger:
.1a83	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.1a85	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.1a87	64 09		stz $09				stz 	IFR0+IM1
.1a89	64 0a		stz $0a				stz 	IFR0+IM2
.1a8b					_ETMConstant:
.1a8b	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1a8d	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1a8f	b0 24		bcs $1ab5			bcs 	_ETMCExit 					; no, exit.
.1a91	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1a93	a5 09		lda $09				lda 	IFR0+IM1
.1a95	85 0a		sta $0a				sta 	IFR0+IM2
.1a97	a5 08		lda $08				lda 	IFR0+IM0
.1a99	85 09		sta $09				sta 	IFR0+IM1
.1a9b	64 08		stz $08				stz 	IFR0+IM0
.1a9d	8a		txa				txa
.1a9e	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1a9f	66 0a		ror $0a				ror 	IFR0+IM2
.1aa1	66 09		ror $09				ror 	IFR0+IM1
.1aa3	66 08		ror $08				ror 	IFR0+IM0
.1aa5	4a		lsr a				lsr 	a
.1aa6	66 0a		ror $0a				ror 	IFR0+IM2
.1aa8	66 09		ror $09				ror 	IFR0+IM1
.1aaa	66 08		ror $08				ror 	IFR0+IM0
.1aac	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1aae	11 18		ora ($18),y			ora 	(codePtr),y
.1ab0	85 08		sta $08				sta 	IFR0+IM0
.1ab2	c8		iny				iny 								; consume, loop back
.1ab3	80 d6		bra $1a8b			bra 	_ETMConstant
.1ab5					_ETMCExit:
.1ab5	60		rts				rts
.1ab6					EXPCheckDecimalFollows:
.1ab6	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1ab8	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1aba	d0 19		bne $1ad5			bne 	_ETMCDExit
.1abc	c8		iny				iny 								; consume token.
.1abd	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1abf	5a		phy				phy									; save current position
.1ac0	48		pha				pha 								; save count of chars.
.1ac1	38		sec				sec 								; address into YX : y + codePtr+1
.1ac2	98		tya				tya
.1ac3	65 18		adc $18				adc 	codePtr
.1ac5	aa		tax				tax
.1ac6	a5 19		lda $19				lda 	codePtr+1
.1ac8	69 00		adc #$00			adc 	#0
.1aca	a8		tay				tay
.1acb	68		pla				pla 								; get count.
.1acc	20 c5 34	jsr $34c5			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1acf	7a		ply				ply 								; go to next token.
.1ad0	98		tya				tya
.1ad1	38		sec				sec
.1ad2	71 18		adc ($18),y			adc 	(codePtr),y
.1ad4	a8		tay				tay
.1ad5					_ETMCDExit:
.1ad5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1ad6					EXPUnaryAbs:
.1ad6	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 					; number to R0
.1ad9	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1adc	20 64 32	jsr $3264			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1adf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.1ae0					EXPUnaryNull:
.1ae0	20 f9 19	jsr $19f9			jsr 	EXPTermValueR0
.1ae3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1ae4					EXPUnaryAsc:
.1ae4	20 e6 19	jsr $19e6			jsr 	EXPEvalString 					; string to R0, zTemp0
.1ae7	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1aea	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.1aec	f0 06		beq $1af4			beq 	_EXAZero 						; if so return 0
.1aee	5a		phy				phy 									; otherwise get first character
.1aef	a0 01		ldy #$01			ldy 	#1
.1af1	b1 24		lda ($24),y			lda 	(zTemp0),y
.1af3	7a		ply				ply
.1af4					_EXAZero:
.1af4	a2 08		ldx #$08			ldx 	#IFR0
.1af6	20 23 36	jsr $3623			jsr 	IFloatSetByte
.1af9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1afa					EXPUnaryChr:
.1afa	20 da 19	jsr $19da			jsr 	EXPEvalInteger8 				; expr
.1afd	48		pha				pha 									; push on stack
.1afe	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1b01	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1b03	20 79 2c	jsr $2c79			jsr 	StringTempAllocate
.1b06	68		pla				pla 									; get value back
.1b07	20 ae 2c	jsr $2cae			jsr 	StringTempWrite 				; write to string.
.1b0a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1b0b					EXPUnaryDec:
.1b0b	20 e6 19	jsr $19e6			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b0e	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1b11	5a		phy				phy 									; save position.
.1b12	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1b14	20 21 36	jsr $3621			jsr 	IFloatSetZero
.1b17	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.1b19	f0 3b		beq $1b56			beq 	_EUDError 						; empty string is not legit.
.1b1b	aa		tax				tax 									; count in X.
.1b1c	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1b1e					_EUDLoop:
.1b1e	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.1b20	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1b22	90 02		bcc $1b26			bcc 	_EUDNoCase
.1b24	e9 20		sbc #$20			sbc 	#$20
.1b26					_EUDNoCase:
.1b26	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1b28	90 2c		bcc $1b56			bcc 	_EUDError
.1b2a	c9 3a		cmp #$3a			cmp 	#'9'+1
.1b2c	90 0a		bcc $1b38			bcc 	_EUDOkay
.1b2e	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1b30	90 24		bcc $1b56			bcc 	_EUDError
.1b32	c9 47		cmp #$47			cmp 	#'F'+1
.1b34	b0 20		bcs $1b56			bcs 	_EUDError
.1b36	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1b38					_EUDOkay:
.1b38	29 0f		and #$0f			and 	#15 							; make constant
.1b3a	da		phx				phx
.1b3b	48		pha				pha
.1b3c	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1b3e	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.1b41	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.1b44	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.1b47	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.1b4a	68		pla				pla 									; pop constant and OR in
.1b4b	fa		plx				plx
.1b4c	05 08		ora $08				ora 	IFR0+IM0
.1b4e	85 08		sta $08				sta 	IFR0+IM0
.1b50	c8		iny				iny 									; next char
.1b51	ca		dex				dex 									; done all characters ?
.1b52	d0 ca		bne $1b1e			bne 	_EUDLoop
.1b54	7a		ply				ply
.1b55	60		rts				rts
.1b56					_EUDError:
.1b56	4c cd 29	jmp $29cd		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1b59					EXPUnaryInlineDec:
.1b59	4c ab 29	jmp $29ab		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1b5c					EXPUnaryPeek:
.1b5c	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 				; number to R0
.1b5f	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1b62	b2 08		lda ($08)			lda 	(IFR0) 							; read byte and set it
.1b64	a2 08		ldx #$08			ldx 	#IFR0
.1b66	20 23 36	jsr $3623			jsr 	IFloatSetByte
.1b69	60		rts				rts
.1b6a					EXPUnaryDeek:
.1b6a	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 				; number to R0
.1b6d	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1b70	5a		phy				phy 									; read MSB and push on stack
.1b71	a0 01		ldy #$01			ldy 	#1
.1b73	b1 08		lda ($08),y			lda 	(IFR0),y
.1b75	7a		ply				ply
.1b76	48		pha				pha
.1b77	b2 08		lda ($08)			lda 	(IFR0) 							; set LSB
.1b79	a2 08		ldx #$08			ldx 	#IFR0
.1b7b	20 23 36	jsr $3623			jsr 	IFloatSetByte
.1b7e	68		pla				pla 									; set MSB
.1b7f	85 09		sta $09				sta 	IFR0+IM1
.1b81	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1b82					EXPUnaryFrac:
.1b82	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 					; number to R0
.1b85	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1b88	20 cc 32	jsr $32cc			jsr 	IFloatFractionalR0 				; get fractional bit.
.1b8b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1b8c					EXPUnaryInkey:
.1b8c	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1b8f	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1b91	20 79 2c	jsr $2c79			jsr 	StringTempAllocate
.1b94	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit with the empty string
.1b97	b0 06		bcs $1b9f			bcs 	_EUIExit
.1b99	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it and put it in first character
.1b9c	20 ae 2c	jsr $2cae			jsr 	StringTempWrite
.1b9f					_EUIExit:
.1b9f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1ba0					EXPUnaryInt:
.1ba0	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 					; number to R0
.1ba3	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; check for )
.1ba6	20 22 33	jsr $3322			jsr 	IFloatIntegerR0 				; force to integer.
.1ba9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1baa					EXPUnaryLen:
.1baa	20 e6 19	jsr $19e6			jsr 	EXPEvalString 					; string to R0, zTemp0
.1bad	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1bb0	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.1bb2	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1bb4	20 23 36	jsr $3623			jsr 	IFloatSetByte
.1bb7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1bb8					EXPUnaryParenthesis:
.1bb8	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 					; number to R0
.1bbb	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1bbe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1bbf					EXPUnaryRnd:
.1bbf	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 				; number to R0
.1bc2	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 				; )
.1bc5	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1bc7	20 de 1b	jsr $1bde			jsr 	EXPLoadInRandom
.1bca	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1bcc	85 0b		sta $0b				sta 	IFR0+IExp
.1bce	60		rts				rts
.1bcf					ExpUnaryRand:
.1bcf	20 c7 19	jsr $19c7			jsr 	EXPEvalInteger 				; integer to R0
.1bd2	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 				; )
.1bd5	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1bd7	20 de 1b	jsr $1bde			jsr 	EXPLoadInRandom
.1bda	20 91 31	jsr $3191			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1bdd	60		rts				rts
.1bde					EXPLoadInRandom:
.1bde	20 21 36	jsr $3621			jsr 	IFloatSetZero 				; zero it
.1be1	20 f3 1b	jsr $1bf3			jsr 	EXPRandom32 				; do a 23 bit number.
.1be4	95 00		sta $00,x			sta 	IM0,x
.1be6	20 f3 1b	jsr $1bf3			jsr 	EXPRandom32
.1be9	95 01		sta $01,x			sta 	IM1,x
.1beb	20 f3 1b	jsr $1bf3			jsr 	EXPRandom32
.1bee	29 7f		and #$7f			and 	#$7F
.1bf0	95 02		sta $02,x			sta 	IM2,x
.1bf2	60		rts				rts
.1bf3					EXPRandom32:
.1bf3	5a		phy				phy
.1bf4	a0 08		ldy #$08			ldy 	#8
.1bf6	ad 15 05	lda $0515			lda 	EXPSeed+0
.1bf9	0d 16 05	ora $0516			ora 	EXPSeed+1
.1bfc	0d 17 05	ora $0517			ora 	EXPSeed+2
.1bff	0d 18 05	ora $0518			ora 	EXPSeed+3
.1c02	d0 08		bne $1c0c			bne 	_EXPRNoReset
.1c04	ee 15 05	inc $0515			inc 	EXPSeed+0
.1c07	a0 10		ldy #$10			ldy 	#16
.1c09	8c 18 05	sty $0518			sty 	EXPSeed+3
.1c0c					_EXPRNoReset:
.1c0c	ad 15 05	lda $0515			lda 	EXPSeed+0
.1c0f					_EXPRLoop:
.1c0f	0a		asl a				asl		a
.1c10	2e 16 05	rol $0516			rol 	EXPSeed+1
.1c13	2e 17 05	rol $0517			rol 	EXPSeed+2
.1c16	2e 18 05	rol $0518			rol 	EXPSeed+3
.1c19	90 02		bcc $1c1d			bcc 	_EXPRNoEOR
.1c1b	49 c5		eor #$c5			eor 	#$C5
.1c1d					_EXPRNoEOR:
.1c1d	88		dey				dey
.1c1e	d0 ef		bne $1c0f			bne 	_EXPRLoop
.1c20	8d 15 05	sta $0515			sta 	EXPSeed+0
.1c23	7a		ply				ply
.1c24	60		rts				rts
.0515					EXPSeed:
>0515							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1c25					EXPUnarySgn:
.1c25	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 					; number to R0
.1c28	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1c2b	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1c2d	20 c3 35	jsr $35c3			jsr 	IFloatCopyToRegister
.1c30	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1c32	20 21 36	jsr $3621			jsr 	IFloatSetZero
.1c35	a2 0c		ldx #$0c			ldx 	#IFR1
.1c37	20 f0 32	jsr $32f0			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1c3a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1c3b					EXPUnarySqr:
.1c3b	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 					; number to R0
.1c3e	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1c41	20 6c 32	jsr $326c			jsr 	IFloatSquareRootR0 				; square root.
.1c44	b0 01		bcs $1c47			bcs 	_EUSValue 						; error check.
.1c46	60		rts				rts
.1c47					_EUSValue:
.1c47	4c bc 29	jmp $29bc		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1c4a					EXPUnaryHex:
.1c4a	20 c7 19	jsr $19c7			jsr 	EXPEvalInteger 					; expr
.1c4d	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1c50	5a		phy				phy
.1c51	a9 10		lda #$10			lda 	#16
.1c53	20 c3 33	jsr $33c3			jsr 	IFloatIntegerToStringR0
.1c56	80 0a		bra $1c62			bra 	EUSMain
.1c58					EXPUnaryStr:
.1c58	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 					; expr
.1c5b	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1c5e	5a		phy				phy
.1c5f	20 1e 34	jsr $341e			jsr 	IFloatFloatToStringR0 			; convert to string
.1c62					EUSMain:
.1c62	b0 19		bcs $1c7d			bcs 	_EUSError
.1c64	86 24		stx $24				stx 	zTemp0 							; save string address
.1c66	84 25		sty $25				sty 	zTemp0+1
.1c68	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1c6a	20 79 2c	jsr $2c79			jsr 	StringTempAllocate
.1c6d	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1c6f	aa		tax				tax 									; count in X
.1c70	a0 01		ldy #$01			ldy 	#1
.1c72					_EUSCopy:
.1c72	b1 24		lda ($24),y			lda 	(zTemp0),y
.1c74	c8		iny				iny
.1c75	20 ae 2c	jsr $2cae			jsr 	StringTempWrite
.1c78	ca		dex				dex
.1c79	d0 f7		bne $1c72			bne	 	_EUSCopy
.1c7b	7a		ply				ply
.1c7c	60		rts				rts
.1c7d					_EUSError:
.1c7d	4c bc 29	jmp $29bc		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1c80					EXPUnaryInlineString:
.1c80	18		clc				clc 								; physical address -> IM0,1
.1c81	98		tya				tya 								; put the actual address in IM0
.1c82	65 18		adc $18				adc 	codePtr
.1c84	85 08		sta $08				sta 	IFR0+IM0
.1c86	a5 19		lda $19				lda 	codePtr+1
.1c88	69 00		adc #$00			adc 	#0
.1c8a	85 09		sta $09				sta 	IFR0+IM1
.1c8c	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1c8e	a9 80		lda #$80			lda 	#$80
.1c90	85 0b		sta $0b				sta 	IFR0+IExp
.1c92	98		tya				tya	 								; skip over it.
.1c93	38		sec				sec
.1c94	71 18		adc ($18),y			adc 	(codePtr),y
.1c96	a8		tay				tay
.1c97	60		rts				rts
.1c98					_EXPUISRange:
.1c98	4c bc 29	jmp $29bc		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1c9b					EXPUnaryLeft:
.1c9b	20 e1 1c	jsr $1ce1			jsr 	EXPCommonStart 					; <string>,
.1c9e	48		pha				pha 									; save string address on stack
.1c9f	da		phx				phx
.1ca0	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1ca2	48		pha				pha
.1ca3	20 da 19	jsr $19da			jsr 	EXPEvalInteger8 				; characters to do
.1ca6	80 44		bra $1cec			bra 	EXPSubstringCommon
.1ca8					EXPUnaryRight:
.1ca8	20 e1 1c	jsr $1ce1			jsr 	EXPCommonStart 					; <string>,
.1cab	48		pha				pha 									; save string address on stack
.1cac	da		phx				phx
.1cad	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1caf	48		pha				pha
.1cb0	20 da 19	jsr $19da			jsr 	EXPEvalInteger8 				; characters to do
.1cb3	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1cb5	68		pla				pla
.1cb6	38		sec				sec
.1cb7	e5 24		sbc $24				sbc 	zTemp0
.1cb9	b0 02		bcs $1cbd			bcs 	_EUROffLeft
.1cbb	a9 00		lda #$00			lda 	#0
.1cbd					_EUROffLeft:
.1cbd	48		pha				pha 									; start pos
.1cbe	a9 ff		lda #$ff			lda 	#255
.1cc0	80 2a		bra $1cec			bra 	EXPSubstringCommon
.1cc2					EXPUnaryMid:
.1cc2	20 e1 1c	jsr $1ce1			jsr 	EXPCommonStart 					; <string>,
.1cc5	48		pha				pha 									; save string address on stack
.1cc6	da		phx				phx
.1cc7	20 da 19	jsr $19da			jsr 	EXPEvalInteger8 				; characters start
.1cca	f0 12		beq $1cde			beq 	_EUSError 						; 1 is left
.1ccc	3a		dec a				dec 	a 								; zero based.
.1ccd	48		pha				pha
.1cce	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1cd0	c9 99		cmp #$99			cmp 	#PR_COMMA
.1cd2	f0 04		beq $1cd8			beq 	_EUMLength 						; if so m is provided
.1cd4	a9 ff		lda #$ff			lda 	#255 							; default m
.1cd6	80 14		bra $1cec			bra 	EXPSubstringCommon
.1cd8					_EUMLength:
.1cd8	c8		iny				iny 									; consume comma
.1cd9	20 da 19	jsr $19da			jsr 	EXPEvalInteger8 				; characters to do
.1cdc	80 0e		bra $1cec			bra 	EXPSubstringCommon
.1cde					_EUSError:
.1cde	4c cd 29	jmp $29cd		jmp	ErrorV_value
.1ce1					EXPCommonStart:
.1ce1	20 e6 19	jsr $19e6			jsr 	EXPEvalString
.1ce4	20 8c 2b	jsr $2b8c			jsr 	ERRCheckComma
.1ce7	a5 08		lda $08				lda 	IFR0+IM0
.1ce9	a6 09		ldx $09				ldx 	IFR0+IM1
.1ceb	60		rts				rts
.1cec					EXPSubstringCommon:
.1cec	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1cee	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; check right bracket.
.1cf1	68		pla				pla 									; start position
.1cf2	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1cf4	fa		plx				plx 									; get string address to zTemp2.
.1cf5	86 29		stx $29				stx 	zTemp2+1
.1cf7	68		pla				pla
.1cf8	85 28		sta $28				sta 	zTemp2
.1cfa	38		sec				sec 									; length - start is the max count of chars
.1cfb	b2 28		lda ($28)			lda 	(zTemp2)
.1cfd	e5 27		sbc $27				sbc 	zTemp1+1
.1cff	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1d01	b0 02		bcs $1d05			bcs 	_EXPSSNoTrim
.1d03	85 26		sta $26				sta 	zTemp1 							; update count with available
.1d05					_EXPSSNoTrim:
.1d05	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1d07	20 79 2c	jsr $2c79			jsr 	StringTempAllocate 				; allocate memory for it.
.1d0a	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1d0c	f0 15		beq $1d23			beq 	_EXPSSExit
.1d0e	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1d10	d2 28		cmp ($28)			cmp 	(zTemp2)
.1d12	b0 0f		bcs $1d23			bcs 	_EXPSSExit
.1d14	5a		phy				phy
.1d15	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1d17	c8		iny				iny 									; +1 for the length byte
.1d18					_EXPSSCopy:
.1d18	b1 28		lda ($28),y			lda 	(zTemp2),y
.1d1a	20 ae 2c	jsr $2cae			jsr 	StringTempWrite
.1d1d	c8		iny				iny
.1d1e	c6 26		dec $26				dec 	zTemp1
.1d20	d0 f6		bne $1d18			bne 	_EXPSSCopy
.1d22	7a		ply				ply
.1d23					_EXPSSExit:
.1d23	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1d24					EXPUnaryVal:
.1d24	20 e6 19	jsr $19e6			jsr 	EXPEvalString 					; string to R0, zTemp0
.1d27	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 					; )
.1d2a	20 2e 1d	jsr $1d2e			jsr 	VALConversionZTemp0
.1d2d	60		rts				rts
.1d2e					VALConversionZTemp0:
.1d2e	5a		phy				phy
.1d2f	18		clc				clc
.1d30	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1d32	69 01		adc #$01			adc 	#1
.1d34	aa		tax				tax
.1d35	a5 25		lda $25				lda 	zTemp0+1
.1d37	69 00		adc #$00			adc 	#0
.1d39	a8		tay				tay
.1d3a	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1d3c	20 85 34	jsr $3485			jsr 	IFloatStringToFloatR0 			; do conversion
.1d3f	b0 02		bcs $1d43			bcs 	_EUVError
.1d41	7a		ply				ply
.1d42	60		rts				rts
.1d43					_EUVError:
.1d43	4c cd 29	jmp $29cd		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1d46					AssemblerLookup:
>1d46	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,0,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,0,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,0,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,0,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,0,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,0,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,0,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,0,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,0,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,0,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,0,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,0,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,0,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,0,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,0,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,0
>1d4e	fb 1e 7c 00 4b 1e 7c 00 b8 1e 1e 00 41 1e 7c eb
>1d5e	b9 1e f9 00 41 1e 7c 00 7f 6a 00 00 7a 6a e1 eb
>1d6e	23 6a e1 00 7a 6a e1 00 97 6a 6a 00 7a 6a e1 eb
>1d7e	a6 6a 7d 00 7a 6a e1 00 38 62 00 00 00 62 0b eb
>1d8e	ec 62 0b 00 2e 62 0b 00 c3 62 62 00 00 62 0b eb
>1d9e	bf 62 04 00 00 62 0b 00 42 1d 00 00 3b 1d e7 eb
>1dae	14 1d e7 00 2e 1d e7 00 d3 1d 1d 00 3b 1d e7 eb
>1dbe	ac 1d 2c 00 2e 1d e7 00 99 22 00 00 3a 22 39 f5
>1dce	93 7a 54 00 3a 22 39 00 45 22 22 00 3a 22 39 f5
>1dde	5e 22 66 00 3b 22 3b 00 19 01 18 00 19 01 18 f5
>1dee	c6 01 c5 00 19 01 18 00 55 01 01 00 19 01 18 f5
>1dfe	cc 01 61 00 19 01 18 00 f7 a8 00 00 f7 a8 7d f5
>1e0e	0f a8 92 0c f7 a8 7d 00 75 a8 a8 00 00 a8 7d f5
>1e1e	ba a8 03 31 00 a8 7d 00 f6 48 00 00 f6 48 f9 f5
>1e2e	0e 48 dd 00 f6 48 f9 00 8f 48 48 00 00 48 f9 f5
>1e3e	a7 48 2b 00 00 48 f9 00

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1e46					BinaryPrecedence:
>1e46	02					.byte	 2	; $ef =
>1e47	02					.byte	 2	; $f0 <>
>1e48	02					.byte	 2	; $f1 <=
>1e49	02					.byte	 2	; $f2 <
>1e4a	02					.byte	 2	; $f3 >=
>1e4b	02					.byte	 2	; $f4 >
>1e4c	01					.byte	 1	; $f5 XOR
>1e4d	01					.byte	 1	; $f6 OR
>1e4e	01					.byte	 1	; $f7 AND
>1e4f	04					.byte	 4	; $f8 DIV
>1e50	04					.byte	 4	; $f9 MOD
>1e51	04					.byte	 4	; $fa <<
>1e52	04					.byte	 4	; $fb >>
>1e53	04					.byte	 4	; $fc /
>1e54	04					.byte	 4	; $fd *
>1e55	03					.byte	 3	; $fe -
>1e56	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1e57					StructureOffsets:
>1e57	01					.byte	1  	; $80 REPEAT
>1e58	ff					.byte	255	; $81 UNTIL
>1e59	01					.byte	1  	; $82 WHILE
>1e5a	ff					.byte	255	; $83 WEND
>1e5b	01					.byte	1  	; $84 IF
>1e5c	ff					.byte	255	; $85 ENDIF
>1e5d	01					.byte	1  	; $86 DO
>1e5e	ff					.byte	255	; $87 LOOP
>1e5f	01					.byte	1  	; $88 PROC
>1e60	ff					.byte	255	; $89 ENDPROC
>1e61	01					.byte	1  	; $8a FOR
>1e62	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1e63					StandardTokens:
>1e63	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1e6a	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1e70	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1e76	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1e7b	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1e7e	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1e84	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1e87	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1e8c	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1e91	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1e99	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1e9d	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1ea2	00					.byte	$00                                     	; $8c [[end]]
>1ea3	00					.byte	$00                                     	; $8d [[shift]]
>1ea4	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1ea9	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1eae	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1eb1	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1eb6	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1eba	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1ec0	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1ec6	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1ecb	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1ecf	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1ed3	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1ed8	01 2c					.byte	$01,$2c                                 	; $99 ,
>1eda	01 3b					.byte	$01,$3b                                 	; $9a ;
>1edc	01 3a					.byte	$01,$3a                                 	; $9b :
>1ede	01 27					.byte	$01,$27                                 	; $9c '
>1ee0	01 29					.byte	$01,$29                                 	; $9d )
>1ee2	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1ee7	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1eec	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1ef1	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1ef6	01 5b					.byte	$01,$5b                                 	; $a2 [
>1ef8	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1efa	01 23					.byte	$01,$23                                 	; $a4 #
>1efc	01 2e					.byte	$01,$2e                                 	; $a5 .
>1efe	00					.byte	0											; $a6
>1eff	00					.byte	0											; $a7
>1f00	00					.byte	0											; $a8
>1f01	00					.byte	0											; $a9
>1f02	00					.byte	0											; $aa
>1f03	00					.byte	0											; $ab
>1f04	00					.byte	0											; $ac
>1f05	00					.byte	0											; $ad
>1f06	00					.byte	0											; $ae
>1f07	00					.byte	0											; $af
>1f08	00					.byte	0											; $b0
>1f09	00					.byte	0											; $b1
>1f0a	00					.byte	0											; $b2
>1f0b	00					.byte	0											; $b3
>1f0c	00					.byte	0											; $b4
>1f0d	00					.byte	0											; $b5
>1f0e	00					.byte	0											; $b6
>1f0f	00					.byte	0											; $b7
>1f10	00					.byte	0											; $b8
>1f11	00					.byte	0											; $b9
>1f12	00					.byte	0											; $ba
>1f13	00					.byte	0											; $bb
>1f14	00					.byte	0											; $bc
>1f15	00					.byte	0											; $bd
>1f16	00					.byte	0											; $be
>1f17	00					.byte	0											; $bf
>1f18	00					.byte	0											; $c0
>1f19	00					.byte	0											; $c1
>1f1a	00					.byte	0											; $c2
>1f1b	00					.byte	0											; $c3
>1f1c	00					.byte	0											; $c4
>1f1d	00					.byte	0											; $c5
>1f1e	00					.byte	0											; $c6
>1f1f	00					.byte	0											; $c7
>1f20	00					.byte	0											; $c8
>1f21	00					.byte	0											; $c9
>1f22	00					.byte	0											; $ca
>1f23	00					.byte	0											; $cb
>1f24	00					.byte	0											; $cc
>1f25	00					.byte	0											; $cd
>1f26	00					.byte	0											; $ce
>1f27	00					.byte	0											; $cf
>1f28	00					.byte	0											; $d0
>1f29	00					.byte	0											; $d1
>1f2a	00					.byte	0											; $d2
>1f2b	00					.byte	0											; $d3
>1f2c	00					.byte	0											; $d4
>1f2d	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1f33	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1f39	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1f41	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1f48	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1f4e	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1f54	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1f59	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1f5e	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1f63	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1f68	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1f6d	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1f73	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1f78	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1f80	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1f87	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1f8c	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1f91	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1f97	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1f9c	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1fa2	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1fa7	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1fad	01 28					.byte	$01,$28                                 	; $eb (
>1faf	01 26					.byte	$01,$26                                 	; $ec &
>1fb1	00					.byte	$00                                     	; $ed [[decimal]]
>1fb2	00					.byte	$00                                     	; $ee [[string]]
>1fb3	01 3d					.byte	$01,$3d                                 	; $ef =
>1fb5	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1fb8	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1fbb	01 3c					.byte	$01,$3c                                 	; $f2 <
>1fbd	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1fc0	01 3e					.byte	$01,$3e                                 	; $f4 >
>1fc2	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1fc6	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1fc9	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1fcd	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1fd1	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1fd5	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1fd8	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1fdb	01 2f					.byte	$01,$2f                                 	; $fc /
>1fdd	01 2a					.byte	$01,$2a                                 	; $fd *
>1fdf	01 2d					.byte	$01,$2d                                 	; $fe -
>1fe1	01 2b					.byte	$01,$2b                                 	; $ff +
>1fe3	ff					.byte	$FF
.1fe4					AlternateTokens:
>1fe4	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1fea	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1fee	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1ff2	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1ff7	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1ffb	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>2002	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>2007	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>200c	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>2011	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>2017	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>201c	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>2023	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>202b	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>202f	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>2033	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>2039	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8d90 renumber
>2041	52
>2042	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.2043					VectorTable:
>2043	9b 28					.word	Command_REPEAT           ; $80 REPEAT
>2045	a4 28					.word	Command_UNTIL            ; $81 UNTIL
>2047	7e 29					.word	Command_WHILE            ; $82 WHILE
>2049	9f 29					.word	Command_WEND             ; $83 WEND
>204b	71 28					.word	IfCommand                ; $84 IF
>204d	9a 28					.word	EndIf                    ; $85 ENDIF
>204f	f3 26					.word	Command_DO               ; $86 DO
>2051	0b 27					.word	Command_LOOP             ; $87 LOOP
>2053	fc 17					.word	NoExec08                 ; $88 PROC
>2055	e7 26					.word	Command_ENDPROC          ; $89 ENDPROC
>2057	14 27					.word	Command_FOR              ; $8a FOR
>2059	a1 27					.word	Command_NEXT             ; $8b NEXT
>205b	7d 17					.word	RUNEndOfLine             ; $8c [[END]]
>205d	d9 17					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>205f	93 28					.word	ElseCode                 ; $8e ELSE
>2061	fc 17					.word	NoExec01                 ; $8f THEN
>2063	fc 17					.word	NoExec02                 ; $90 TO
>2065	fc 17					.word	NoExec03                 ; $91 STEP
>2067	24 15					.word	CommandLET               ; $92 LET
>2069	79 14					.word	Command_Print            ; $93 PRINT
>206b	72 14					.word	Command_Input            ; $94 INPUT
>206d	ab 26					.word	Command_CALL             ; $95 CALL
>206f	e7 17					.word	Command_Sys              ; $96 SYS
>2071	f2 16					.word	Command_REM              ; $97 REM
>2073	fc 26					.word	Command_EXIT             ; $98 EXIT
>2075	fc 17					.word	NoExec04                 ; $99 ,
>2077	fc 17					.word	NoExec05                 ; $9a ;
>2079	fc 17					.word	NoExec06                 ; $9b :
>207b	f2 16					.word	Command_REM2             ; $9c '
>207d	fc 17					.word	NoExec07                 ; $9d )
>207f	1b 14					.word	Command_Poke             ; $9e POKE
>2081	18 14					.word	Command_Doke             ; $9f DOKE
>2083	7e 16					.word	Command_READ             ; $a0 READ
>2085	e5 16					.word	Command_DATA             ; $a1 DATA
>2087	15 10					.word	Command_AssemblerStart   ; $a2 [
>2089	f7 2d					.word	NotImplemented           ; $a3 ]
>208b	f7 2d					.word	NotImplemented           ; $a4 #
>208d	f7 2d					.word	NotImplemented           ; $a5 .
>208f	f7 2d					.word	NotImplemented           ; $a6
>2091	f7 2d					.word	NotImplemented           ; $a7
>2093	f7 2d					.word	NotImplemented           ; $a8
>2095	f7 2d					.word	NotImplemented           ; $a9
>2097	f7 2d					.word	NotImplemented           ; $aa
>2099	f7 2d					.word	NotImplemented           ; $ab
>209b	f7 2d					.word	NotImplemented           ; $ac
>209d	f7 2d					.word	NotImplemented           ; $ad
>209f	f7 2d					.word	NotImplemented           ; $ae
>20a1	f7 2d					.word	NotImplemented           ; $af
>20a3	f7 2d					.word	NotImplemented           ; $b0
>20a5	f7 2d					.word	NotImplemented           ; $b1
>20a7	f7 2d					.word	NotImplemented           ; $b2
>20a9	f7 2d					.word	NotImplemented           ; $b3
>20ab	f7 2d					.word	NotImplemented           ; $b4
>20ad	f7 2d					.word	NotImplemented           ; $b5
>20af	f7 2d					.word	NotImplemented           ; $b6
>20b1	f7 2d					.word	NotImplemented           ; $b7
>20b3	f7 2d					.word	NotImplemented           ; $b8
>20b5	f7 2d					.word	NotImplemented           ; $b9
>20b7	f7 2d					.word	NotImplemented           ; $ba
>20b9	f7 2d					.word	NotImplemented           ; $bb
>20bb	f7 2d					.word	NotImplemented           ; $bc
>20bd	f7 2d					.word	NotImplemented           ; $bd
>20bf	f7 2d					.word	NotImplemented           ; $be
>20c1	f7 2d					.word	NotImplemented           ; $bf
>20c3	f7 2d					.word	NotImplemented           ; $c0
>20c5	f7 2d					.word	NotImplemented           ; $c1
>20c7	f7 2d					.word	NotImplemented           ; $c2
>20c9	f7 2d					.word	NotImplemented           ; $c3
>20cb	f7 2d					.word	NotImplemented           ; $c4
>20cd	f7 2d					.word	NotImplemented           ; $c5
>20cf	f7 2d					.word	NotImplemented           ; $c6
>20d1	f7 2d					.word	NotImplemented           ; $c7
>20d3	f7 2d					.word	NotImplemented           ; $c8
>20d5	f7 2d					.word	NotImplemented           ; $c9
>20d7	f7 2d					.word	NotImplemented           ; $ca
>20d9	f7 2d					.word	NotImplemented           ; $cb
>20db	f7 2d					.word	NotImplemented           ; $cc
>20dd	f7 2d					.word	NotImplemented           ; $cd
>20df	f7 2d					.word	NotImplemented           ; $ce
>20e1	f7 2d					.word	NotImplemented           ; $cf
>20e3	f7 2d					.word	NotImplemented           ; $d0
>20e5	f7 2d					.word	NotImplemented           ; $d1
>20e7	f7 2d					.word	NotImplemented           ; $d2
>20e9	f7 2d					.word	NotImplemented           ; $d3
>20eb	f7 2d					.word	NotImplemented           ; $d4
>20ed	6a 1b					.word	EXPUnaryDeek             ; $d5 DEEK(
>20ef	5c 1b					.word	EXPUnaryPeek             ; $d6 PEEK(
>20f1	a8 1c					.word	EXPUnaryRight            ; $d7 RIGHT$(
>20f3	9b 1c					.word	EXPUnaryLeft             ; $d8 LEFT$(
>20f5	c2 1c					.word	EXPUnaryMid              ; $d9 MID$(
>20f7	58 1c					.word	EXPUnaryStr              ; $da STR$(
>20f9	24 1d					.word	EXPUnaryVal              ; $db VAL(
>20fb	25 1c					.word	EXPUnarySgn              ; $dc SGN(
>20fd	d6 1a					.word	EXPUnaryAbs              ; $dd ABS(
>20ff	aa 1b					.word	EXPUnaryLen              ; $de LEN(
>2101	3b 1c					.word	EXPUnarySqr              ; $df SQR(
>2103	fa 1a					.word	EXPUnaryChr              ; $e0 CHR$(
>2105	e4 1a					.word	EXPUnaryAsc              ; $e1 ASC(
>2107	8c 1b					.word	EXPUnaryInkey            ; $e2 INKEY$(
>2109	f7 2d					.word	NotImplemented           ; $e3 EVENT(
>210b	f7 2d					.word	NotImplemented           ; $e4 TIME
>210d	a0 1b					.word	EXPUnaryInt              ; $e5 INT(
>210f	82 1b					.word	EXPUnaryFrac             ; $e6 FRAC(
>2111	0b 1b					.word	EXPUnaryDec              ; $e7 DEC(
>2113	4a 1c					.word	EXPUnaryHex              ; $e8 HEX$(
>2115	bf 1b					.word	EXPUnaryRnd              ; $e9 RND(
>2117	cf 1b					.word	ExpUnaryRand             ; $ea RAND(
>2119	b8 1b					.word	EXPUnaryParenthesis      ; $eb (
>211b	e0 1a					.word	EXPUnaryNull             ; $ec &
>211d	59 1b					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>211f	80 1c					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>2121	b9 18					.word	EXPCompareEqual          ; $ef =
>2123	d4 18					.word	EXPCompareNotEqual       ; $f0 <>
>2125	dd 18					.word	EXPCompareLessEqual      ; $f1 <=
>2127	c2 18					.word	EXPCompareLess           ; $f2 <
>2129	e6 18					.word	EXPCompareGreaterEqual   ; $f3 >=
>212b	cb 18					.word	EXPCompareGreater        ; $f4 >
>212d	66 18					.word	EXPBinXor                ; $f5 XOR
>212f	5a 18					.word	EXPBinOr                 ; $f6 OR
>2131	4e 18					.word	EXPBinAnd                ; $f7 AND
>2133	26 18					.word	EXPBinIDiv               ; $f8 DIV
>2135	37 18					.word	EXPBinIMod               ; $f9 MOD
>2137	31 19					.word	EXPBinLeft               ; $fa <<
>2139	39 19					.word	EXPBinRight              ; $fb >>
>213b	1a 18					.word	EXPBinFDiv               ; $fc /
>213d	11 18					.word	EXPBinMul                ; $fd *
>213f	08 18					.word	EXPBinSub                ; $fe -
>2141	ff 17					.word	EXPBinAdd                ; $ff +
.2143					AlternateVectorTable:
>2143	88 12					.word	Command_CLEAR            ; $8d80 CLEAR
>2145	75 16					.word	Command_NEW              ; $8d81 NEW
>2147	71 17					.word	Command_RUN              ; $8d82 RUN
>2149	e4 17					.word	Command_STOP             ; $8d83 STOP
>214b	e1 17					.word	Command_END              ; $8d84 END
>214d	7a 12					.word	Command_ASSERT           ; $8d85 ASSERT
>214f	9e 15					.word	Command_LIST             ; $8d86 LIST
>2151	65 2d					.word	Command_SAVE             ; $8d87 SAVE
>2153	24 2d					.word	Command_LOAD             ; $8d88 LOAD
>2155	57 28					.word	Command_GOSUB            ; $8d89 GOSUB
>2157	42 14					.word	Command_GOTO             ; $8d8a GOTO
>2159	65 28					.word	Command_RETURN           ; $8d8b RETURN
>215b	43 17					.word	Command_RESTORE          ; $8d8c RESTORE
>215d	fc 12					.word	CommandDIM               ; $8d8d DIM
>215f	bb 2c					.word	Command_DIR              ; $8d8e DIR
>2161	f8 2c					.word	Command_ERASE            ; $8d8f ERASE
>2163	ff 16					.word	Command_RENUMBER         ; $8d90 RENUMBER

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.2165					TOKDetokenise:
.2165	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.2167	84 29		sty $29				sty 	zTemp2+1
.2169	9c 1b 05	stz $051b			stz		TOKLastCharacter 			; clear last character
.216c					_TOKDLoop:
.216c	20 b1 21	jsr $21b1			jsr 	TOKDGet 					; get next
.216f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.2171	f0 3c		beq $21af			beq 	_TOKDExit
.2173	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.2175	f0 33		beq $21aa			beq 	_TOKDDataItem
.2177	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.2179	f0 2f		beq $21aa			beq 	_TOKDDataItem
.217b	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.217d	f0 19		beq $2198			beq 	_TOKAmpersand
.217f	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.2181	10 05		bpl $2188			bpl 	_TOKDNotToken
.2183	20 77 22	jsr $2277			jsr 	TOKDToken 					; token to text.
.2186	80 e4		bra $216c			bra 	_TOKDLoop
.2188					_TOKDNotToken:
.2188	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.218a	90 05		bcc $2191			bcc 	_TOKDNotIdentifier
.218c	20 ee 21	jsr $21ee			jsr 	TOKDIdentifier
.218f	80 db		bra $216c			bra 	_TOKDLoop
.2191					_TOKDNotIdentifier:
.2191	a0 0a		ldy #$0a			ldy 	#10
.2193	20 31 22	jsr $2231			jsr 	TOKDInteger
.2196	80 d4		bra $216c			bra 	_TOKDLoop
.2198					_TOKAmpersand:
.2198	20 b9 22	jsr $22b9			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.219b	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.219d	20 ba 21	jsr $21ba			jsr 	TOKDOutput
.21a0	20 b1 21	jsr $21b1			jsr 	TOKDGet 					; get first char of integer
.21a3	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.21a5	20 31 22	jsr $2231			jsr 	TOKDInteger
.21a8	80 c2		bra $216c			bra 	_TOKDLoop
.21aa					_TOKDDataItem:
.21aa	20 c7 21	jsr $21c7			jsr 	TOKDDataItem
.21ad	80 bd		bra $216c			bra 	_TOKDLoop
.21af					_TOKDExit:
.21af	18		clc				clc
.21b0	60		rts				rts
.21b1	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.21b3	e6 28		inc $28				inc 	zTemp2
.21b5	d0 02		bne $21b9			bne 	_TKDGExit
.21b7	e6 29		inc $29				inc 	zTemp2+1
.21b9					_TKDGExit:
.21b9	60		rts				rts
.21ba					TOKDOutput:
.21ba	8d 1b 05	sta $051b			sta 	TOKLastCharacter
.21bd	6c 19 05	jmp ($0519)			jmp 	(TOKOutputMethod)
.21c0					TOKSetDetokeniseOutput:
.21c0	8e 19 05	stx $0519			stx 	TOKOutputMethod
.21c3	8c 1a 05	sty $051a			sty 	TOKOutputMethod+1
.21c6	60		rts				rts
.0519					TOKOutputMethod:
>0519							.fill 	2
.051b					TOKLastCharacter:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.21c7					TOKDDataItem:
.21c7	a8		tay				tay 								; type in Y
.21c8	a9 22		lda #$22			lda 	#'"'						; start with " or .
.21ca	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.21cc	f0 02		beq $21d0			beq 	_TOKDDIsString
.21ce	a9 2e		lda #$2e			lda 	#'.'
.21d0					_TOKDDIsString:
.21d0	20 ba 21	jsr $21ba			jsr 	TOKDOutput 					; dump it
.21d3	20 b1 21	jsr $21b1			jsr 	TOKDGet 					; get length into X
.21d6	aa		tax				tax
.21d7					_TOKDDOutput:
.21d7	ca		dex				dex 								; are we complete
.21d8	e0 ff		cpx #$ff			cpx 	#255
.21da	f0 08		beq $21e4			beq 	_TOKDDEnd
.21dc	20 b1 21	jsr $21b1			jsr 	TOKDGet 					; get character and output it
.21df	20 ba 21	jsr $21ba			jsr 	TOKDOutput
.21e2	80 f3		bra $21d7			bra 	_TOKDDOutput
.21e4					_TOKDDEnd:
.21e4	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.21e6	d0 05		bne $21ed			bne 	_TOKDDNotString
.21e8	a9 22		lda #$22			lda 	#'"'
.21ea	20 ba 21	jsr $21ba			jsr 	TOKDOutput
.21ed					_TOKDDNotString:
.21ed	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.21ee					TOKDIdentifier:
.21ee	a0 ff		ldy #$ff			ldy 	#$FF
.21f0	8c 1c 05	sty $051c			sty 	TOKDIFirstChar
.21f3					_TOKDLoop:
.21f3	a8		tay				tay 								; token in Y
.21f4	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.21f6	c0 64		cpy #$64			cpy 	#$64
.21f8	f0 0b		beq $2205			beq 	_TOKDIOutput
.21fa	98		tya				tya 								; handle a-z
.21fb	18		clc				clc
.21fc	69 21		adc #$21			adc	 	#$21
.21fe	c0 5a		cpy #$5a			cpy 	#$5A
.2200	90 03		bcc $2205			bcc 	_TOKDIOutput
.2202	38		sec				sec 								; handle 0-9
.2203	e9 4b		sbc #$4b			sbc 	#$4B
.2205					_TOKDIOutput:
.2205	2c 1c 05	bit $051c			bit 	TOKDIFirstChar
.2208	10 08		bpl $2212			bpl 	_TOKDINoSpacing
.220a	48		pha				pha
.220b	20 b4 22	jsr $22b4			jsr 	TOKDSpacing
.220e	9c 1c 05	stz $051c			stz 	TOKDIFirstChar
.2211	68		pla				pla
.2212					_TOKDINoSpacing:
.2212	20 ba 21	jsr $21ba			jsr 	TOKDOutput
.2215	20 b1 21	jsr $21b1			jsr 	TOKDGet 					; get next token
.2218	c9 7c		cmp #$7c			cmp 	#$7C
.221a	90 d7		bcc $21f3			bcc 	_TOKDLoop
.221c	f0 12		beq $2230			beq 	_TOKDIExit 					; it's a number, no tail.
.221e	4a		lsr a				lsr 	a 							; string ?
.221f	90 07		bcc $2228			bcc 	_TOKDICheckArray
.2221	48		pha				pha
.2222	a9 24		lda #$24			lda 	#"$"
.2224	20 ba 21	jsr $21ba			jsr 	TOKDOutput
.2227	68		pla				pla
.2228					_TOKDICheckArray:
.2228	4a		lsr a				lsr 	a 							; array ?
.2229	90 05		bcc $2230			bcc 	_TOKDIExit
.222b	a9 28		lda #$28			lda 	#"("
.222d	20 ba 21	jsr $21ba			jsr 	TOKDOutput
.2230					_TOKDIExit:
.2230	60		rts				rts
.051c					TOKDIFirstChar:
>051c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.2231					TOKDInteger:
.2231	5a		phy				phy 								; save base
.2232	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.2234	20 23 36	jsr $3623			jsr 	IFloatSetByte
.2237					_TOKDILoop:
.2237	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F
.2239	c9 40		cmp #$40			cmp 	#$40
.223b	b0 1d		bcs $225a			bcs 	_TOKDIHaveInteger
.223d	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.223f	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.2242	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.2245	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.2248	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.224b	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.224e	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.2251	20 b1 21	jsr $21b1			jsr 	TOKDGet 					; OR byte in.
.2254	05 08		ora $08				ora 	IFR0+IM0
.2256	85 08		sta $08				sta 	IFR0+IM0
.2258	80 dd		bra $2237			bra 	_TOKDILoop
.225a					_TOKDIHaveInteger:
.225a	7a		ply				ply 								; restore base
.225b	98		tya				tya 								; base in A
.225c	20 c3 33	jsr $33c3			jsr 	IFloatIntegerToStringR0
.225f	86 24		stx $24				stx 	zTemp0
.2261	84 25		sty $25				sty 	zTemp0+1
.2263	b2 24		lda ($24)			lda 	(zTemp0)
.2265	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.2267	b1 24		lda ($24),y			lda 	(zTemp0),y
.2269	20 b4 22	jsr $22b4			jsr 	TOKDSpacing 				; check spacing okay.
.226c					_TOKDOutput:
.226c	b1 24		lda ($24),y			lda 	(zTemp0),y
.226e	20 ba 21	jsr $21ba			jsr 	TOKDOutput
.2271	c8		iny				iny
.2272	b1 24		lda ($24),y			lda 	(zTemp0),y
.2274	d0 f6		bne $226c			bne 	_TOKDOutput
.2276	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.2277					TOKDToken:
.2277	a2 63		ldx #$63			ldx 	#StandardTokens & $FF 		; standard table
.2279	a0 1e		ldy #$1e			ldy 	#StandardTokens >> 8
.227b	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.227d	d0 07		bne $2286			bne 	_TOKDSearch
.227f	20 b1 21	jsr $21b1			jsr 	TOKDGet 					; get next
.2282	a2 e4		ldx #$e4			ldx 	#AlternateTokens & $FF 		; alt table
.2284	a0 1f		ldy #$1f			ldy 	#AlternateTokens >> 8
.2286					_TOKDSearch:
.2286	86 24		stx $24				stx 	zTemp0 						; put table in zTemp0
.2288	84 25		sty $25				sty 	zTemp0+1
.228a	aa		tax				tax 								; token ID in X.
.228b					_TOKDFind:
.228b	ca		dex				dex 								; reached the start
.228c	10 0d		bpl $229b			bpl 	_TOKDFound
.228e	38		sec				sec 								; go to next entry
.228f	b2 24		lda ($24)			lda 	(zTemp0)
.2291	65 24		adc $24				adc 	zTemp0
.2293	85 24		sta $24				sta 	zTemp0
.2295	90 f4		bcc $228b			bcc 	_TOKDFind
.2297	e6 25		inc $25				inc 	zTemp0+1
.2299	80 f0		bra $228b			bra 	_TOKDFind
.229b					_TOKDFound:
.229b	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X
.229d	f0 14		beq $22b3			beq 	_TOKDExit
.229f	aa		tax				tax
.22a0	a0 01		ldy #$01			ldy 	#1 							; output the token.
.22a2	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.22a4	20 b4 22	jsr $22b4			jsr 	TOKDSpacing
.22a7					_TOKDOutput:
.22a7	b1 24		lda ($24),y			lda 	(zTemp0),y
.22a9	20 6a 26	jsr $266a			jsr 	TOKToLower
.22ac	20 ba 21	jsr $21ba			jsr 	TOKDOutput
.22af	c8		iny				iny
.22b0	ca		dex				dex
.22b1	d0 f4		bne $22a7			bne 	_TOKDOutput
.22b3					_TOKDExit:
.22b3	60		rts				rts
.22b4					TOKDSpacing:
.22b4	20 81 26	jsr $2681			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.22b7	90 0d		bcc $22c6			bcc 	TOKDSExit
.22b9					TOKDSpaceLastAlpha:
.22b9	ad 1b 05	lda $051b			lda 	TOKLastCharacter			; and last character also alphanumeric
.22bc	20 81 26	jsr $2681			jsr 	TOKIsIdentifierElement
.22bf	90 05		bcc $22c6			bcc 	TOKDSExit
.22c1	a9 20		lda #$20			lda 	#" " 						; we need a space.
.22c3	20 ba 21	jsr $21ba			jsr 	TOKDOutput
.22c6					TOKDSExit:
.22c6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.22c7					PGMDeleteLine:
.22c7	20 7a 23	jsr $237a			jsr 	PGMEndProgram 				; end of program into zTemp0
.22ca	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.22cc	ad 1d 05	lda $051d			lda 	PGMBaseHigh
.22cf	85 27		sta $27				sta 	zTemp1+1
.22d1					_PGMDLoop:
.22d1	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.22d3	38		sec				sec
.22d4	f0 3a		beq $2310			beq 	_PGMDExit
.22d6	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.22d8	b1 26		lda ($26),y			lda 	(zTemp1),y
.22da	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.22dd	d0 08		bne $22e7			bne 	_PGMDNext
.22df	c8		iny				iny
.22e0	b1 26		lda ($26),y			lda 	(zTemp1),y
.22e2	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.22e5	f0 0d		beq $22f4			beq 	_PGMDDelete
.22e7					_PGMDNext:
.22e7	18		clc				clc
.22e8	b2 26		lda ($26)			lda 	(zTemp1)
.22ea	65 26		adc $26				adc 	zTemp1
.22ec	85 26		sta $26				sta 	zTemp1
.22ee	90 e1		bcc $22d1			bcc 	_PGMDLoop
.22f0	e6 27		inc $27				inc 	zTemp1+1
.22f2	80 dd		bra $22d1			bra 	_PGMDLoop
.22f4					_PGMDDelete:
.22f4	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.22f6	a8		tay				tay
.22f7					_PGMDCopy:
.22f7	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.22f9	92 26		sta ($26)			sta 	(zTemp1)
.22fb	a5 26		lda $26				lda 	zTemp1 						; reached the end ?
.22fd	c5 24		cmp $24				cmp 	zTemp0
.22ff	d0 07		bne $2308			bne 	_PGMDNext2
.2301	a5 27		lda $27				lda 	zTemp1+1
.2303	c5 25		cmp $25				cmp 	zTemp0+1
.2305	18		clc				clc
.2306	f0 08		beq $2310			beq 	_PGMDExit
.2308					_PGMDNext2:
.2308	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.230a	d0 eb		bne $22f7			bne 	_PGMDCopy
.230c	e6 27		inc $27				inc 	zTemp1+1
.230e	80 e7		bra $22f7			bra 	_PGMDCopy
.2310					_PGMDExit:
.2310	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.2311					PGMInsertLine:
.2311	20 7a 23	jsr $237a			jsr 	PGMEndProgram 				; end of program into zTemp0
.2314	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2316	ad 1d 05	lda $051d			lda 	PGMBaseHigh
.2319	85 27		sta $27				sta 	zTemp1+1
.231b					_PGMILoop:
.231b	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.231d	f0 1c		beq $233b			beq 	_PGMIInsert
.231f	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.2321	b1 26		lda ($26),y			lda 	(zTemp1),y
.2323	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2326	c8		iny				iny
.2327	b1 26		lda ($26),y			lda 	(zTemp1),y
.2329	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.232c	b0 0d		bcs $233b			bcs 	_PGMIInsert 				; insert here.
.232e	18		clc				clc
.232f	b2 26		lda ($26)			lda 	(zTemp1)
.2331	65 26		adc $26				adc 	zTemp1
.2333	85 26		sta $26				sta 	zTemp1
.2335	90 e4		bcc $231b			bcc 	_PGMILoop
.2337	e6 27		inc $27				inc 	zTemp1+1
.2339	80 e0		bra $231b			bra 	_PGMILoop
.233b					_PGMIInsert:
.233b	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.233e					_PGMIInsertLoop:
.233e	b2 24		lda ($24)			lda 	(zTemp0)
.2340	91 24		sta ($24),y			sta 	(zTemp0),y
.2342	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.2344	c5 24		cmp $24				cmp 	zTemp0
.2346	d0 06		bne $234e			bne 	_PGMINext
.2348	a5 27		lda $27				lda 	zTemp1+1
.234a	c5 25		cmp $25				cmp 	zTemp0+1
.234c	f0 0a		beq $2358			beq 	_PGMIInserted
.234e					_PGMINext:
.234e	a5 24		lda $24				lda 	zTemp0
.2350	d0 02		bne $2354			bne 	_PGMINoBorrow
.2352	c6 25		dec $25				dec 	zTemp0+1
.2354					_PGMINoBorrow:
.2354	c6 24		dec $24				dec 	zTemp0
.2356	80 e6		bra $233e			bra 	_PGMIInsertLoop
.2358					_PGMIInserted:
.2358	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.235a					_PGMICopyLoop:
.235a	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.235d	91 26		sta ($26),y			sta 	(zTemp1),y
.235f	c8		iny				iny
.2360	cc 00 04	cpy $0400			cpy 	TOKLineSize
.2363	d0 f5		bne $235a			bne 	_PGMICopyLoop
.2365	18		clc				clc
.2366	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.2367					PGMSetBaseAddress:
.2367	8e 1d 05	stx $051d			stx 	PGMBaseHigh 				; use memory from here
.236a	8c 1e 05	sty $051e			sty 	PGMEndMemoryHigh 			; to here.
.236d	60		rts				rts
.236e					PGMNewProgram:
.236e	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.2370	ad 1d 05	lda $051d			lda 	PGMBaseHigh
.2373	85 25		sta $25				sta 	zTemp0+1
.2375	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.2377	92 24		sta ($24)			sta 	(zTemp0)
.2379	60		rts				rts
.237a					PGMEndProgram:
.237a	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.237c	ad 1d 05	lda $051d			lda 	PGMBaseHigh
.237f	85 25		sta $25				sta 	zTemp0+1
.2381					_PGMEPLoop:
.2381	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.2383	f0 0b		beq $2390			beq 	_PGMEPExit
.2385	18		clc				clc 								; no, advance to next
.2386	65 24		adc $24				adc 	zTemp0
.2388	85 24		sta $24				sta 	zTemp0
.238a	90 f5		bcc $2381			bcc 	_PGMEPLoop
.238c	e6 25		inc $25				inc 	zTemp0+1
.238e	80 f1		bra $2381			bra 	_PGMEPLoop
.2390					_PGMEPExit:
.2390	60		rts				rts
.051d					PGMBaseHigh:
>051d							.fill 	1
.051e					PGMEndMemoryHigh:
>051e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.2391					TOKResetElement:
.2391	9c 1f 05	stz $051f			stz 	TOKElement
.2394	60		rts				rts
.2395					TOKWriteElement:
.2395	da		phx				phx
.2396	ae 1f 05	ldx $051f			ldx 	TOKElement
.2399	9d 20 05	sta $0520,x			sta 	TOKElementText,x
.239c	9e 21 05	stz $0521,x			stz 	TOKElementText+1,x
.239f	fa		plx				plx
.23a0	ee 1f 05	inc $051f			inc 	TOKElement
.23a3	60		rts				rts
.051f					TOKElement:
>051f							.fill 	1
.0520					TOKElementText:
>0520							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.23a4					TOKTokeniseConstant:
.23a4	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.23a6	48		pha				pha 								; save on stack
.23a7	29 c0		and #$c0			and 	#$C0
.23a9	05 09		ora $09				ora 	IFR0+IM1
.23ab	05 0a		ora $0a				ora 	IFR0+IM2
.23ad	f0 10		beq $23bf			beq 	_TTCLess
.23af	da		phx				phx
.23b0	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.23b2					_TTCShiftRight:
.23b2	46 0a		lsr $0a				lsr 	IFR0+IM2
.23b4	66 09		ror $09				ror 	IFR0+IM1
.23b6	66 08		ror $08				ror 	IFR0+IM0
.23b8	ca		dex				dex
.23b9	d0 f7		bne $23b2			bne 	_TTCShiftRight
.23bb	fa		plx				plx
.23bc	20 a4 23	jsr $23a4			jsr 	TOKTokeniseConstant
.23bf					_TTCLess:
.23bf	68		pla				pla
.23c0	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.23c2	20 62 24	jsr $2462			jsr 	TOKWriteA
.23c5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.23c6					TOKTokeniseDecimals:
.23c6	20 75 24	jsr $2475			jsr 	TOKGetNext 					; consume the .
.23c9	20 ee 25	jsr $25ee			jsr 	TOKExtractInteger 			; pull an integer out as text.
.23cc	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.23ce	20 62 24	jsr $2462			jsr 	TOKWriteA
.23d1	20 d6 23	jsr $23d6			jsr 	TOKOutputElementBuffer 		; then the buffer
.23d4	18		clc				clc
.23d5	60		rts				rts
.23d6					TOKOutputElementBuffer:
.23d6	ad 1f 05	lda $051f			lda 	TOKElement 					; get count and write that
.23d9	20 62 24	jsr $2462			jsr 	TOKWriteA
.23dc	a8		tay				tay 								; put in Y
.23dd	f0 0c		beq $23eb			beq 	_TOEExit 					; exit if empty which is okay.
.23df	a2 01		ldx #$01			ldx 	#1
.23e1					_TOELoop:
.23e1	bd 1f 05	lda $051f,x			lda 	TOKElement,x
.23e4	20 62 24	jsr $2462			jsr 	TOKWriteA
.23e7	e8		inx				inx
.23e8	88		dey				dey
.23e9	d0 f6		bne $23e1			bne 	_TOELoop
.23eb					_TOEExit:
.23eb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.23ec					TOKTokenise:
.23ec	8c 20 06	sty $0620			sty 	TOKDataSource+1 			; save source routine pointer
.23ef	8e 1f 06	stx $061f			stx 	TOKDataSource
.23f2	a9 01		lda #$01			lda 	#1 							; set first element flag.
.23f4	8d 21 06	sta $0621			sta 	TOKIsFirstElement
.23f7	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.23f9	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.23fc	9c 01 04	stz $0401			stz 	TOKLineNumber
.23ff	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2402					_TOKMainLoop:
.2402	20 71 24	jsr $2471			jsr 	TOKGet 						; what follows.
.2405	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.2407	f0 50		beq $2459			beq 	_TOKExit
.2409	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.240b	d0 05		bne $2412			bne 	_TOKElement
.240d	20 75 24	jsr $2475			jsr 	TOKGetNext
.2410	80 f0		bra $2402			bra 	_TOKMainLoop
.2412					_TOKElement:
.2412	20 75 26	jsr $2675			jsr 	TOKIsDigit 					; is it 0..9
.2415	90 16		bcc $242d			bcc 	_TOKNotDigit
.2417	20 c5 25	jsr $25c5			jsr 	TOKTokeniseInteger 			; get integer
.241a	b0 44		bcs $2460			bcs 	_TOKFail 					; did it fail ?
.241c	9c 21 06	stz $0621			stz 	TOKIsFirstElement 			; clear first element flag
.241f	20 71 24	jsr $2471			jsr 	TOKGet 						; what follows ?
.2422	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2424	d0 dc		bne $2402			bne 	_TOKMainLoop
.2426	20 c6 23	jsr $23c6			jsr 	TOKTokeniseDecimals
.2429	b0 35		bcs $2460			bcs 	_TOKFail
.242b	80 d5		bra $2402			bra 	_TOKMainLoop
.242d					_TOKNotDigit:
.242d	9c 21 06	stz $0621			stz 	TOKIsFirstElement 			; clear first element flag
.2430	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.2432	d0 07		bne $243b			bne 	_TOKNotHex
.2434	20 cb 24	jsr $24cb			jsr 	TOKTokeniseHexadecimal
.2437	b0 27		bcs $2460			bcs 	_TOKFail
.2439	80 c7		bra $2402			bra 	_TOKMainLoop
.243b					_TOKNotHex:
.243b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.243d	d0 07		bne $2446			bne 	_TOKNotString
.243f	20 3c 26	jsr $263c			jsr 	TOKTokeniseString
.2442	b0 1c		bcs $2460			bcs 	_TOKFail
.2444	80 bc		bra $2402			bra 	_TOKMainLoop
.2446					_TOKNotString:
.2446	20 8e 26	jsr $268e			jsr 	TOKIsAlpha 					; identifier ?
.2449	b0 07		bcs $2452			bcs 	_TOKIdentifier
.244b	20 02 26	jsr $2602			jsr 	TOKTokenisePunctuation 		; punctuation
.244e	b0 10		bcs $2460			bcs 	_TOKFail
.2450	80 b0		bra $2402			bra 	_TOKMainLoop
.2452					_TOKIdentifier:
.2452	20 08 25	jsr $2508			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2455	b0 09		bcs $2460			bcs 	_TOKFail
.2457	80 a9		bra $2402			bra 	_TOKMainLoop
.2459					_TOKExit:
.2459	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.245b	20 62 24	jsr $2462			jsr 	TOKWriteA
.245e	18		clc				clc									; return with carry set.
.245f	60		rts				rts
.2460					_TOKFail:
.2460	38		sec				sec
.2461	60		rts				rts
.2462					TOKWriteA:
.2462	da		phx				phx
.2463	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2466	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2469	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.246c	fa		plx				plx
.246d	ee 00 04	inc $0400			inc 	TOKLineSize
.2470	60		rts				rts
.2471					TOKGet:
.2471	18		clc				clc
.2472	6c 1f 06	jmp ($061f)			jmp 	(TOKDataSource)
.2475					TOKGetNext:
.2475	38		sec				sec
.2476	6c 1f 06	jmp ($061f)			jmp 	(TOKDataSource)
.061f					TOKDataSource:
>061f							.fill 	2
.0621					TOKIsFirstElement:
>0621							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2479					TOKFindToken:
.2479	a2 63		ldx #$63			ldx 	#StandardTokens & $FF 		; do this table
.247b	a0 1e		ldy #$1e			ldy 	#StandardTokens >> 8
.247d	20 95 24	jsr $2495			jsr 	TOKFindTokenXY 				; find it, or not
.2480	b0 0d		bcs $248f			bcs 	_TOKFound1
.2482	a2 e4		ldx #$e4			ldx 	#AlternateTokens & $FF 		; do the alternate table
.2484	a0 1f		ldy #$1f			ldy 	#AlternateTokens >> 8
.2486	20 95 24	jsr $2495			jsr 	TOKFindTokenXY 				; find it, or not
.2489	90 08		bcc $2493			bcc 	_TOKFTFail 					; not ....
.248b	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.248d	38		sec				sec
.248e	60		rts				rts
.248f					_TOKFound1:
.248f	a2 00		ldx #$00			ldx 	#0
.2491	38		sec				sec
.2492	60		rts				rts
.2493					_TOKFTFail
.2493	18		clc				clc
.2494	60		rts				rts
.2495					TOKFindTokenXY:
.2495	86 24		stx $24				stx 	zTemp0 						; save token table address
.2497	84 25		sty $25				sty 	zTemp0+1
.2499	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.249b	8d 22 06	sta $0622			sta 	TOKCurrent
.249e					_TOKFindLoop:
.249e	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.24a0	18		clc				clc 		 						; clear carry in case of fail
.24a1	30 17		bmi $24ba			bmi 	_TOKExit 					; end of table, fail, so return CC.
.24a3	cd 1f 05	cmp $051f			cmp 	TOKElement 					; compare against the element length
.24a6	d0 13		bne $24bb			bne 	_TOKNext 					; different, try next.
.24a8	aa		tax				tax 								; number of chars to compare.
.24a9	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.24ab					_TOKCompare:
.24ab	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.24ad	d9 1f 05	cmp $051f,y			cmp 	TOKElementText-1,y
.24b0	d0 09		bne $24bb			bne 	_TOKNext 					; different ? try next
.24b2	c8		iny				iny 								; compare next two
.24b3	ca		dex				dex
.24b4	d0 f5		bne $24ab			bne 	_TOKCompare 				; until done X characters.
.24b6	38		sec				sec
.24b7	ad 22 06	lda $0622			lda 	TOKCurrent 					; return current ID.
.24ba					_TOKExit:
.24ba	60		rts				rts
.24bb					_TOKNext:
.24bb	ee 22 06	inc $0622			inc 	TOKCurrent 					; increment token #
.24be	38		sec				sec 								; add length+1 to ptr
.24bf	b2 24		lda ($24)			lda 	(zTemp0)
.24c1	65 24		adc $24				adc 	zTemp0
.24c3	85 24		sta $24				sta 	zTemp0
.24c5	90 d7		bcc $249e			bcc 	_TOKFindLoop
.24c7	e6 25		inc $25				inc 	zTemp0+1
.24c9	80 d3		bra $249e			bra 	_TOKFindLoop
.0622					TOKCurrent:
>0622							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.24cb					TOKTokeniseHexadecimal:
.24cb	20 75 24	jsr $2475			jsr 	TOKGetNext 					; consume the $
.24ce	a2 08		ldx #$08			ldx 	#IFR0
.24d0	20 21 36	jsr $3621			jsr 	IFloatSetZero 				; set R0 = 0
.24d3					_TTHLoop:
.24d3	20 71 24	jsr $2471			jsr 	TOKGet 						; keep getting and copying while numeric.
.24d6	20 9b 26	jsr $269b			jsr 	TOKIsHexadecimal
.24d9	90 23		bcc $24fe			bcc 	_TTHDone
.24db	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.24dd	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.24e0	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.24e3	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.24e6	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.24e9	20 75 24	jsr $2475			jsr 	TOKGetNext
.24ec	20 5f 26	jsr $265f			jsr 	TOKToUpper 					; make U/C
.24ef	38		sec				sec 								; convert to decimal.
.24f0	e9 30		sbc #$30			sbc 	#48
.24f2	c9 0a		cmp #$0a			cmp 	#10
.24f4	90 02		bcc $24f8			bcc 	_TTHNotAlpha
.24f6	e9 07		sbc #$07			sbc 	#7
.24f8					_TTHNotAlpha:
.24f8	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.24fa	85 08		sta $08				sta 	IFR0+IM0
.24fc	80 d5		bra $24d3			bra 	_TTHLoop
.24fe					_TTHDone:
.24fe	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.2500	20 62 24	jsr $2462			jsr 	TOKWriteA
.2503	20 a4 23	jsr $23a4			jsr 	TOKTokeniseConstant 		; write integer out.
.2506	18		clc				clc
.2507	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2508					TOKTokeniseIdentifier:
.2508	20 91 23	jsr $2391			jsr 	TOKResetElement 			; extract an identifier
.250b					_TOKGetIdentifier:
.250b	20 71 24	jsr $2471			jsr 	TOKGet
.250e	20 5f 26	jsr $265f			jsr 	TOKToUpper
.2511	20 81 26	jsr $2681			jsr 	TOKIsIdentifierElement
.2514	90 08		bcc $251e			bcc 	_TOKEndIdent
.2516	20 95 23	jsr $2395			jsr		TOKWriteElement
.2519	20 75 24	jsr $2475			jsr 	TOKGetNext
.251c	80 ed		bra $250b			bra 	_TOKGetIdentifier
.251e					_TOKEndIdent:
.251e	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.2520	d0 06		bne $2528			bne 	_TOKNotString
.2522	20 95 23	jsr $2395			jsr 	TOKWriteElement 			; add it
.2525	20 75 24	jsr $2475			jsr 	TOKGetNext 					; consume it
.2528					_TOKNotString:
.2528	20 71 24	jsr $2471			jsr 	TOKGet 						; finally check for (
.252b	c9 28		cmp #$28			cmp 	#"("
.252d	d0 06		bne $2535			bne 	_TOKNoArray
.252f	20 95 23	jsr $2395			jsr 	TOKWriteElement 			; add it
.2532	20 75 24	jsr $2475			jsr 	TOKGetNext 					; consume it
.2535					_TOKNoArray:
.2535	20 79 24	jsr $2479			jsr 	TOKFindToken 				; find it
.2538	90 18		bcc $2552			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.253a	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.253c	f0 0f		beq $254d			beq 	_TOKComment 				; yes, do comment code.
.253e	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.2540	d0 06		bne $2548			bne 	_TOKNoShift
.2542	48		pha				pha 								; write the shift.
.2543	8a		txa				txa
.2544	20 62 24	jsr $2462			jsr 	TOKWriteA
.2547	68		pla				pla
.2548					_TOKNoShift:
.2548	20 62 24	jsr $2462			jsr 	TOKWriteA 					; write the main token.
.254b	18		clc				clc
.254c	60		rts				rts
.254d					_TOKComment:
.254d	20 92 25	jsr $2592			jsr 	TOKDoComment
.2550	18		clc				clc
.2551	60		rts				rts
.2552					_TOKIsVariable:
.2552	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2554					_TOKOutputBuffer:
.2554	bd 20 05	lda $0520,x			lda 	TOKElementText,x 			; output it translated.
.2557	20 80 25	jsr $2580			jsr 	TOKTranslateIdentifier
.255a	20 62 24	jsr $2462			jsr 	TOKWriteA
.255d	e8		inx				inx
.255e	bd 20 05	lda $0520,x			lda 	TOKElementText,x
.2561	20 81 26	jsr $2681			jsr 	TOKIsIdentifierElement
.2564	b0 ee		bcs $2554			bcs 	_TOKOutputBuffer
.2566	a8		tay				tay 								; last char in Y
.2567	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2569	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.256b	f0 0e		beq $257b			beq 	_TOKIVExit
.256d	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.256f	d0 04		bne $2575			bne 	_TOKIVCheckArray 			; no, check for (
.2571	1a		inc a				inc 	a 							; token is $7D
.2572	bc 21 05	ldy $0521,x			ldy 	TOKElementText+1,x 			; get next one.
.2575					_TOKIVCheckArray:
.2575	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2577	d0 02		bne $257b			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2579	1a		inc a				inc 	a
.257a	1a		inc a				inc 	a
.257b					_TOKIVExit:
.257b	20 62 24	jsr $2462			jsr 	TOKWriteA 					; ending token
.257e	18		clc				clc
.257f	60		rts				rts
.2580					TOKTranslateIdentifier:
.2580	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.2582	f0 0b		beq $258f			beq 	_TTI64
.2584	38		sec				sec
.2585	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2587	10 03		bpl $258c			bpl 	_TTIExit
.2589	18		clc				clc 								; map 09 onto 26-35
.258a	69 2b		adc #$2b			adc 	#"A"-"0"+26
.258c					_TTIExit:
.258c	09 40		ora #$40			ora 	#$40 						; correct range.
.258e	60		rts				rts
.258f	a9 64		lda #$64	_TTI64:	lda 	#$64
.2591	60		rts				rts
.2592					TOKDoComment:
.2592	20 62 24	jsr $2462			jsr 	TOKWriteA					; output the token.
.2595					_TOKSkipSpaces:
.2595	20 71 24	jsr $2471			jsr 	TOKGet 						; skip over spaces
.2598	c9 20		cmp #$20			cmp 	#' '
.259a	d0 05		bne $25a1			bne 	_TOKEndSpaces
.259c	20 75 24	jsr $2475			jsr 	TOKGetNext
.259f	80 f4		bra $2595			bra 	_TOKSkipSpaces
.25a1					_TOKEndSpaces:
.25a1	48		pha				pha 								; save it
.25a2	68		pla				pla
.25a3	f0 04		beq $25a9			beq 	_TOKDCExit 					; end of line.
.25a5	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.25a7	d0 01		bne $25aa			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.25a9					_TOKDCExit:
.25a9	60		rts				rts
.25aa					_TOKDCDoLine:
.25aa	20 91 23	jsr $2391			jsr 	TOKResetElement 			; start getting the string
.25ad					_TOKDCLoop:
.25ad	20 71 24	jsr $2471			jsr 	TOKGet 						; check EOL
.25b0	c9 00		cmp #$00			cmp 	#0
.25b2	f0 08		beq $25bc			beq 	_TOKDCEndComment
.25b4	20 75 24	jsr $2475			jsr 	TOKGetNext 					; get and consume
.25b7	20 95 23	jsr $2395			jsr 	TOKWriteElement
.25ba	80 f1		bra $25ad			bra 	_TOKDCLoop
.25bc					_TOKDCEndComment:
.25bc	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.25be	20 62 24	jsr $2462			jsr 	TOKWriteA
.25c1	20 d6 23	jsr $23d6			jsr 	TOKOutputElementBuffer
.25c4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.25c5					TOKTokeniseInteger:
.25c5	20 ee 25	jsr $25ee			jsr 	TOKExtractInteger 			; pull an integer out as text.
.25c8	a2 20		ldx #$20			ldx 	#TOKElementText & $FF
.25ca	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.25cc	ad 1f 05	lda $051f			lda		TOKElement
.25cf	20 85 34	jsr $3485			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.25d2	ad 21 06	lda $0621			lda 	TOKIsFirstElement 			; first element ?
.25d5	f0 12		beq $25e9			beq 	_TOKNotLineNumber
.25d7	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.25d9	d0 0c		bne $25e7			bne 	_TOKBadLineNumeber
.25db	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.25dd	8d 01 04	sta $0401			sta 	TOKLineNumber
.25e0	a5 09		lda $09				lda 	IFR0+IM1
.25e2	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.25e5	18		clc				clc
.25e6	60		rts				rts
.25e7					_TOKBadLineNumeber:
.25e7	38		sec				sec
.25e8	60		rts				rts
.25e9					_TOKNotLineNumber:
.25e9	20 a4 23	jsr $23a4			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.25ec	18		clc				clc
.25ed	60		rts				rts
.25ee					TOKExtractInteger:
.25ee	20 91 23	jsr $2391			jsr 	TOKResetElement 			; restart
.25f1					_TTILoop:
.25f1	20 71 24	jsr $2471			jsr 	TOKGet 						; keep getting and copying while numeric.
.25f4	20 75 26	jsr $2675			jsr 	TOKIsDigit
.25f7	90 08		bcc $2601			bcc 	_TOKEIExit
.25f9	20 95 23	jsr $2395			jsr 	TOKWriteElement
.25fc	20 75 24	jsr $2475			jsr 	TOKGetNext
.25ff	80 f0		bra $25f1			bra 	_TTILoop
.2601					_TOKEIExit:
.2601	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2602					TOKTokenisePunctuation:
.2602	20 91 23	jsr $2391			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2605	20 75 24	jsr $2475			jsr 	TOKGetNext
.2608	20 95 23	jsr $2395			jsr 	TOKWriteElement
.260b	20 71 24	jsr $2471			jsr 	TOKGet 						; what follows ?
.260e	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2610	f0 10		beq $2622			beq 	_TTPOne
.2612	20 85 26	jsr $2685			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2615	b0 0b		bcs $2622			bcs 	_TTPOne 					; these speed things up a bit.
.2617	20 95 23	jsr $2395			jsr 	TOKWriteElement 			; this is what we will search for.
.261a	20 79 24	jsr $2479			jsr 	TOKFindToken
.261d	b0 0a		bcs $2629			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.261f	ce 1f 05	dec $051f			dec 	TOKElement 					; make it a single character
.2622					_TTPOne:
.2622	20 79 24	jsr $2479			jsr 	TOKFindToken 				; look for one character punctuation
.2625	b0 07		bcs $262e			bcs 	_TTPOutputExit 				; we found it
.2627	38		sec				sec 								; not recognised.
.2628	60		rts				rts
.2629					_TTPConsumeExit:
.2629	48		pha				pha
.262a	20 75 24	jsr $2475			jsr 	TOKGetNext 					; get the 2nd char out.
.262d	68		pla				pla
.262e					_TTPOutputExit:
.262e	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.2630	f0 05		beq $2637			beq 	_TTPComment
.2632	20 62 24	jsr $2462			jsr  	TOKWriteA 					; write token out
.2635	18		clc				clc
.2636	60		rts				rts
.2637					_TTPComment:
.2637	20 92 25	jsr $2592			jsr 	TOKDoComment
.263a	18		clc				clc
.263b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.263c					TOKTokeniseString:
.263c	20 75 24	jsr $2475			jsr 	TOKGetNext 					; consume the "
.263f	20 91 23	jsr $2391			jsr 	TOKResetElement 			; start getting the string
.2642					_TOKTSLoop:
.2642	20 71 24	jsr $2471			jsr 	TOKGet 						; check EOL
.2645	c9 00		cmp #$00			cmp 	#0
.2647	f0 0c		beq $2655			beq 	_TOKTSExit
.2649	20 75 24	jsr $2475			jsr 	TOKGetNext 					; get and consume
.264c	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.264e	f0 05		beq $2655			beq 	_TOKTSExit
.2650	20 95 23	jsr $2395			jsr 	TOKWriteElement
.2653	80 ed		bra $2642			bra 	_TOKTSLoop
.2655					_TOKTSExit:
.2655	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2657	20 62 24	jsr $2462			jsr 	TOKWriteA
.265a	20 d6 23	jsr $23d6			jsr 	TOKOutputElementBuffer
.265d	18		clc				clc
.265e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.265f					TOKToUpper:
.265f	c9 61		cmp #$61			cmp 	#"a"
.2661	90 06		bcc $2669			bcc 	_TTUNotLower
.2663	c9 7b		cmp #$7b			cmp 	#"z"+1
.2665	b0 02		bcs $2669			bcs 	_TTUNotLower
.2667	49 20		eor #$20			eor 	#$20
.2669					_TTUNotLower:
.2669	60		rts				rts
.266a					TOKToLower:
.266a	c9 41		cmp #$41			cmp 	#"A"
.266c	90 06		bcc $2674			bcc 	_TTUNotUpper
.266e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2670	b0 02		bcs $2674			bcs 	_TTUNotUpper
.2672	49 20		eor #$20			eor 	#$20
.2674					_TTUNotUpper:
.2674	60		rts				rts
.2675					TOKIsDigit:
.2675	c9 30		cmp #$30			cmp 	#"0"
.2677	90 06		bcc $267f			bcc 	TOKFail
.2679	c9 3a		cmp #$3a			cmp 	#"9"+1
.267b	b0 02		bcs $267f			bcs 	TOKFail
.267d					TOKSucceed:
.267d	38		sec				sec
.267e	60		rts				rts
.267f					TOKFail:
.267f	18		clc				clc
.2680	60		rts				rts
.2681					TOKIsIdentifierElement:
.2681	c9 5f		cmp #$5f			cmp 	#"_"
.2683	f0 f8		beq $267d			beq 	TOKSucceed 					; else fall through to alphanumeric
.2685					TOKIsAlphaNumeric:
.2685	20 8e 26	jsr $268e			jsr 	TOKIsAlpha
.2688	b0 f3		bcs $267d			bcs 	TOKSucceed
.268a	20 75 26	jsr $2675			jsr 	TOKIsDigit
.268d	60		rts				rts
.268e					TOKIsAlpha:
.268e	20 5f 26	jsr $265f			jsr 	TOKToUpper
.2691	c9 41		cmp #$41			cmp 	#"A"
.2693	90 ea		bcc $267f			bcc 	TOKFail
.2695	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2697	b0 e6		bcs $267f			bcs 	TOKFail
.2699	80 e2		bra $267d			bra 	TOKSucceed
.269b					TOKIsHexadecimal:
.269b	20 75 26	jsr $2675			jsr		TOKIsDigit
.269e	b0 dd		bcs $267d			bcs 	TOKSucceed
.26a0	20 8e 26	jsr $268e			jsr 	TOKIsAlpha
.26a3	90 da		bcc $267f			bcc 	TOKFail
.26a5	c9 47		cmp #$47			cmp 	#"F"+1
.26a7	b0 d6		bcs $267f			bcs 	TOKFail
.26a9	80 d2		bra $267d			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.26ab					Command_CALL:
.26ab	a9 42		lda #$42			lda 	#STK_CALL
.26ad	20 9d 2b	jsr $2b9d			jsr 	StackOpen
.26b0	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.26b2	29 c0		and #$c0			and 	#$C0
.26b4	c9 40		cmp #$40			cmp 	#$40
.26b6	d0 29		bne $26e1			bne 	_CCSyntax
.26b8	20 64 2f	jsr $2f64			jsr 	VARGetInfo 					; get the information
.26bb	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 				; check right bracket follows.
.26be	20 16 2f	jsr $2f16			jsr 	VARFind 					; exists ?
.26c1	90 21		bcc $26e4			bcc 	_CCUnknown
.26c3	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.26c5	85 24		sta $24				sta 	zTemp0
.26c7	20 d0 2b	jsr $2bd0			jsr 	STKSaveCodePosition 		; save return address on stack.
.26ca	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.26cc	b1 24		lda ($24),y			lda 	(zTemp0),y
.26ce	c9 ff		cmp #$ff			cmp 	#$FF
.26d0	d0 12		bne $26e4			bne 	_CCUnknown
.26d2	88		dey				dey 								; get Y offset to stack
.26d3	b1 24		lda ($24),y			lda 	(zTemp0),y
.26d5	48		pha				pha
.26d6	88		dey				dey 								; get address
.26d7	b1 24		lda ($24),y			lda 	(zTemp0),y
.26d9	85 19		sta $19				sta 	codePtr+1
.26db	b2 24		lda ($24)			lda 	(zTemp0)
.26dd	85 18		sta $18				sta 	codePtr
.26df	7a		ply				ply 								; restore Y
.26e0	60		rts				rts
.26e1					_CCSyntax:
.26e1	4c ab 29	jmp $29ab		jmp	ErrorV_syntax
.26e4					_CCUnknown:
.26e4	4c 20 2b	jmp $2b20		jmp	ErrorV_unknown
.26e7					Command_ENDPROC:
.26e7	a9 42		lda #$42			lda 	#STK_CALL
.26e9	20 c8 2b	jsr $2bc8			jsr 	StackCheckFrame
.26ec	20 e2 2b	jsr $2be2			jsr 	STKLoadCodePosition 		; return
.26ef	20 ba 2b	jsr $2bba			jsr 	StackClose
.26f2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.26f3					Command_DO:
.26f3	a9 22		lda #$22			lda 	#STK_DO
.26f5	20 9d 2b	jsr $2b9d			jsr 	StackOpen
.26f8	20 d0 2b	jsr $2bd0			jsr 	STKSaveCodePosition 		; save loop position
.26fb	60		rts				rts
.26fc					Command_EXIT:
.26fc	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.26fe	20 c8 2b	jsr $2bc8			jsr 	StackCheckFrame
.2701	20 ba 2b	jsr $2bba			jsr 	StackClose 					; close it
.2704	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2706	aa		tax				tax
.2707	20 bb 28	jsr $28bb			jsr 	ScanForward
.270a	60		rts				rts
.270b					Command_LOOP:
.270b	a9 22		lda #$22			lda 	#STK_DO
.270d	20 c8 2b	jsr $2bc8			jsr 	StackCheckFrame
.2710	20 e2 2b	jsr $2be2			jsr 	STKLoadCodePosition 		; loop back
.2713	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2714					Command_FOR:
.2714	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2716	20 9d 2b	jsr $2b9d			jsr 	StackOpen
.2719	20 24 15	jsr $1524			jsr 	CommandLET 					; do "I = 1" bit
.271c	5a		phy				phy 								; save variable address to +4,+5
.271d	a0 04		ldy #$04			ldy 	#4
.271f	a5 24		lda $24				lda 	zTemp0
.2721	91 2c		sta ($2c),y			sta 	(basicStack),y
.2723	c8		iny				iny
.2724	a5 25		lda $25				lda 	zTemp0+1
.2726	91 2c		sta ($2c),y			sta 	(basicStack),y
.2728	7a		ply				ply
.2729	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.272b	20 94 2b	jsr $2b94			jsr 	ERRCheckA
.272e	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2731	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2733	a2 08		ldx #$08			ldx 	#IFR0
.2735	20 8a 27	jsr $278a			jsr 	CFSaveR0X
.2738	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.273a	c9 91		cmp #$91			cmp 	#PR_STEP
.273c	d0 06		bne $2744			bne 	_CFStep1
.273e	c8		iny				iny 								; consume step
.273f	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 				; evaluate STEP
.2742	80 24		bra $2768			bra 	_CFWriteStep
.2744					_CFStep1:
.2744	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2746	a9 01		lda #$01			lda 	#1
.2748	20 23 36	jsr $3623			jsr 	IFloatSetByte
.274b	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.274c	a0 04		ldy #$04			ldy 	#4 							; get variable address
.274e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2750	85 24		sta $24				sta 	zTemp0
.2752	c8		iny				iny
.2753	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2755	85 25		sta $25				sta 	zTemp0+1
.2757	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2759	b1 24		lda ($24),y			lda 	(zTemp0),y
.275b	d0 0a		bne $2767			bne 	_CFNotOptimised
.275d	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.275f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2761	d0 04		bne $2767			bne 	_CFNotOptimised
.2763	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2765	85 0b		sta $0b				sta 	IFR0+IExp
.2767					_CFNotOptimised:
.2767	7a		ply				ply
.2768					_CFWriteStep:
.2768	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.276a	a9 06		lda #$06			lda 	#6
.276c	20 8a 27	jsr $278a			jsr 	CFSaveR0X
.276f	20 d0 2b	jsr $2bd0			jsr 	STKSaveCodePosition 		; save loop position
.2772	60		rts				rts
.2773					CFLoadR0X:
.2773	5a		phy				phy
.2774	a8		tay				tay
.2775	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2777	95 00		sta $00,x			sta 	IM0,x
.2779	c8		iny				iny
.277a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.277c	95 01		sta $01,x			sta 	IM1,x
.277e	c8		iny				iny
.277f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2781	95 02		sta $02,x			sta 	IM2,x
.2783	c8		iny				iny
.2784	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2786	95 03		sta $03,x			sta 	IExp,x
.2788	7a		ply				ply
.2789	60		rts				rts
.278a					CFSaveR0X:
.278a	5a		phy				phy
.278b	a8		tay				tay
.278c	b5 00		lda $00,x			lda 	IM0,x
.278e	91 2c		sta ($2c),y			sta 	(basicStack),y
.2790	c8		iny				iny
.2791	b5 01		lda $01,x			lda 	IM1,x
.2793	91 2c		sta ($2c),y			sta 	(basicStack),y
.2795	c8		iny				iny
.2796	b5 02		lda $02,x			lda 	IM2,x
.2798	91 2c		sta ($2c),y			sta 	(basicStack),y
.279a	c8		iny				iny
.279b	b5 03		lda $03,x			lda 	IExp,x
.279d	91 2c		sta ($2c),y			sta 	(basicStack),y
.279f	7a		ply				ply
.27a0	60		rts				rts
.27a1					Command_NEXT:
.27a1	a9 37		lda #$37			lda 	#STK_FOR
.27a3	20 c8 2b	jsr $2bc8			jsr 	StackCheckFrame
.27a6	5a		phy				phy 								; check optimised loop
.27a7	a0 09		ldy #$09			ldy 	#9
.27a9	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27ab	7a		ply				ply
.27ac	0a		asl a				asl 	a
.27ad	b0 35		bcs $27e4			bcs 	_CNOptimised
.27af	20 1c 28	jsr $281c			jsr 	_CNLoadValue 				; load index value to R0.
.27b2	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.27b4	a9 06		lda #$06			lda 	#6
.27b6	20 73 27	jsr $2773			jsr 	CFLoadR0X
.27b9	20 19 30	jsr $3019			jsr 	IFloatAdd 					; add them together and write back.
.27bc	20 3f 28	jsr $283f			jsr 	_CNSaveValue
.27bf	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.27c1	a2 0c		ldx #$0c			ldx 	#IFR1
.27c3	20 73 27	jsr $2773			jsr 	CFLoadR0X
.27c6	20 f0 32	jsr $32f0			jsr 	IFloatCompare 				; compare terminal vs current
.27c9	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.27cb	20 1a 36	jsr $361a			jsr 	IFloatCheckZero
.27ce	f0 10		beq $27e0			beq 	_CNLoopBack
.27d0	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.27d2	5a		phy				phy
.27d3	a0 09		ldy #$09			ldy 	#6+IExp
.27d5	51 2c		eor ($2c),y			eor 	(basicStack),y
.27d7	7a		ply				ply
.27d8	29 40		and #$40			and 	#IFSign
.27da	f0 04		beq $27e0			beq 	_CNLoopBack
.27dc					_CNExitLoop:
.27dc	20 ba 2b	jsr $2bba			jsr 	StackClose		 			; return
.27df	60		rts				rts
.27e0					_CNLoopBack:
.27e0	20 e2 2b	jsr $2be2			jsr 	STKLoadCodePosition 		; loop back
.27e3	60		rts				rts
.27e4					_CNOptimised:
.27e4	5a		phy				phy
.27e5	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.27e7	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27e9	85 28		sta $28				sta 	zTemp2
.27eb	c8		iny				iny
.27ec	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27ee	85 29		sta $29				sta 	zTemp2+1
.27f0	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.27f2					_CNIncrement:
.27f2	c8		iny				iny
.27f3	b1 28		lda ($28),y			lda 	(zTemp2),y
.27f5	1a		inc a				inc 	a
.27f6	91 28		sta ($28),y			sta 	(zTemp2),y
.27f8	f0 f8		beq $27f2			beq 	_CNIncrement
.27fa	18		clc				clc 								; point zTemp0 to terminal value
.27fb	a5 2c		lda $2c				lda 	basicStack
.27fd	69 0a		adc #$0a			adc 	#10
.27ff	85 24		sta $24				sta 	zTemp0
.2801	a5 2d		lda $2d				lda 	basicStack+1
.2803	69 00		adc #$00			adc 	#0
.2805	85 25		sta $25				sta 	zTemp0+1
.2807	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2809	18		clc				clc 								; borrow 1, we want > not >=
.280a	b2 28		lda ($28)			lda 	(zTemp2)
.280c	f2 24		sbc ($24)			sbc 	(zTemp0)
.280e	b1 28		lda ($28),y			lda 	(zTemp2),y
.2810	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.2812	c8		iny				iny
.2813	b1 28		lda ($28),y			lda 	(zTemp2),y
.2815	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.2817	7a		ply				ply
.2818	b0 c2		bcs $27dc			bcs 	_CNExitLoop
.281a	80 c4		bra $27e0			bra 	_CNLoopBack
.281c					_CNLoadValue:
.281c	5a		phy				phy
.281d	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.281f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2821	85 28		sta $28				sta 	zTemp2
.2823	c8		iny				iny
.2824	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2826	85 29		sta $29				sta 	zTemp2+1
.2828	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.282a	b1 28		lda ($28),y			lda 	(zTemp2),y
.282c	85 08		sta $08				sta 	IFR0+IM0
.282e	c8		iny				iny
.282f	b1 28		lda ($28),y			lda 	(zTemp2),y
.2831	85 09		sta $09				sta 	IFR0+IM1
.2833	c8		iny				iny
.2834	b1 28		lda ($28),y			lda 	(zTemp2),y
.2836	85 0a		sta $0a				sta 	IFR0+IM2
.2838	c8		iny				iny
.2839	b1 28		lda ($28),y			lda 	(zTemp2),y
.283b	85 0b		sta $0b				sta 	IFR0+IExp
.283d	7a		ply				ply
.283e	60		rts				rts
.283f					_CNSaveValue:
.283f	5a		phy				phy
.2840	a0 00		ldy #$00			ldy 	#0
.2842	a5 08		lda $08				lda 	IFR0+IM0
.2844	91 28		sta ($28),y			sta 	(zTemp2),y
.2846	c8		iny				iny
.2847	a5 09		lda $09				lda 	IFR0+IM1
.2849	91 28		sta ($28),y			sta 	(zTemp2),y
.284b	c8		iny				iny
.284c	a5 0a		lda $0a				lda 	IFR0+IM2
.284e	91 28		sta ($28),y			sta 	(zTemp2),y
.2850	c8		iny				iny
.2851	a5 0b		lda $0b				lda 	IFR0+IExp
.2853	91 28		sta ($28),y			sta 	(zTemp2),y
.2855	7a		ply				ply
.2856	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2857					Command_GOSUB:
.2857	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; get line number
.285a	a9 52		lda #$52			lda 	#STK_GOSUB
.285c	20 9d 2b	jsr $2b9d			jsr 	StackOpen
.285f	20 d0 2b	jsr $2bd0			jsr 	STKSaveCodePosition 		; save return address on stack.
.2862	4c 45 14	jmp $1445			jmp 	GotoR0
.2865					Command_RETURN:
.2865	a9 52		lda #$52			lda 	#STK_GOSUB
.2867	20 c8 2b	jsr $2bc8			jsr 	StackCheckFrame
.286a	20 e2 2b	jsr $2be2			jsr 	STKLoadCodePosition 		; return
.286d	20 ba 2b	jsr $2bba			jsr 	StackClose
.2870	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2871					IfCommand:
.2871	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 				; Get the if test.
.2874	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2876	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2878	d0 0c		bne $2886			bne 	_IfStructured 				; we still support it.
.287a	c8		iny				iny 								; consume THEN
.287b	a2 08		ldx #$08			ldx 	#IFR0
.287d	20 1a 36	jsr $361a			jsr 	IFloatCheckZero 			; is it zero
.2880	f0 01		beq $2883			beq 	_IfFail 					; if fail, go to next line
.2882	60		rts				rts 								; if THEN just continue
.2883					_IfFail:
.2883	4c 7d 17	jmp $177d			jmp 	RUNEndOfLine
.2886					_IfStructured:
.2886	20 1a 36	jsr $361a			jsr 	IFloatCheckZero 			; is it zero
.2889	d0 07		bne $2892			bne 	_IfExit 					; if not, then continue normally.
.288b	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.288d	a2 85		ldx #$85			ldx 	#PR_ENDIF
.288f	20 bb 28	jsr $28bb			jsr 	ScanForward 				; and run from there
.2892					_IfExit:
.2892	60		rts				rts
.2893					ElseCode:
.2893	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2895	aa		tax				tax 								; so just go to the structure exit
.2896	20 bb 28	jsr $28bb			jsr 	ScanForward
.2899	60		rts				rts
.289a					EndIf:
.289a	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.289b					Command_REPEAT:
.289b	a9 02		lda #$02			lda 	#STK_REPEAT
.289d	20 9d 2b	jsr $2b9d			jsr 	StackOpen
.28a0	20 d0 2b	jsr $2bd0			jsr 	STKSaveCodePosition 		; save loop position
.28a3	60		rts				rts
.28a4					Command_UNTIL:
.28a4	a9 02		lda #$02			lda 	#STK_REPEAT
.28a6	20 c8 2b	jsr $2bc8			jsr 	StackCheckFrame
.28a9	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 				; work out the test
.28ac	a2 08		ldx #$08			ldx 	#IFR0
.28ae	20 1a 36	jsr $361a			jsr 	IFloatCheckZero 			; check if zero
.28b1	f0 04		beq $28b7			beq 	_CULoopBack 				; if so keep looping
.28b3	20 ba 2b	jsr $2bba			jsr 	StackClose		 			; return
.28b6	60		rts				rts
.28b7					_CULoopBack:
.28b7	20 e2 2b	jsr $2be2			jsr 	STKLoadCodePosition 		; loop back
.28ba	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.28bb					ScanForward:
.28bb	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.28bd	86 25		stx $25				stx 	zTemp0+1
.28bf	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.28c1					_ScanForwardLoop:
.28c1	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.28c3	d0 0a		bne $28cf			bne 	_ScanNoCheck
.28c5	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.28c7	c5 24		cmp $24				cmp 	zTemp0
.28c9	f0 49		beq $2914			beq 	_ScanExit
.28cb	c5 25		cmp $25				cmp 	zTemp0+1
.28cd	f0 45		beq $2914			beq 	_ScanExit
.28cf					_ScanNoCheck:
.28cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.28d1	c8		iny				iny
.28d2	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.28d4	f0 37		beq $290d			beq		_ScanDataItem
.28d6	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.28d8	f0 33		beq $290d			beq 	_ScanDataItem
.28da	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.28dc	f0 1b		beq $28f9			beq 	_ScanNextLine
.28de	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.28e0	d0 01		bne $28e3			bne 	_ScanNoShift
.28e2	c8		iny				iny
.28e3					_ScanNoShift:
.28e3	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.28e5	b0 da		bcs $28c1			bcs 	_ScanForwardLoop
.28e7	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.28e9	90 d6		bcc $28c1			bcc 	_ScanForwardLoop
.28eb	aa		tax				tax 								; access the table to get the adjustment.
.28ec	18		clc				clc
.28ed	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.28ef	7d d7 1d	adc $1dd7,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.28f2	85 26		sta $26				sta 	zTemp1
.28f4	10 cb		bpl $28c1			bpl		_ScanForwardLoop 			; error if -ve ?
.28f6	4c 37 2a	jmp $2a37		jmp	ErrorV_structure
.28f9					_ScanNextLine:
.28f9	18		clc				clc	 								; forward to next line.
.28fa	b2 18		lda ($18)			lda 	(codePtr)
.28fc	65 18		adc $18				adc 	codePtr
.28fe	85 18		sta $18				sta 	codePtr
.2900	90 02		bcc $2904			bcc 	_ScanNoCarry
.2902	e6 19		inc $19				inc 	codePtr+1
.2904					_ScanNoCarry:
.2904	a0 03		ldy #$03			ldy 	#3
.2906	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2908	d0 b7		bne $28c1			bne 	_ScanForwardLoop
.290a	4c 37 2a	jmp $2a37		jmp	ErrorV_structure
.290d					_ScanDataItem:
.290d	98		tya				tya
.290e	38		sec				sec
.290f	71 18		adc ($18),y			adc 	(codePtr),y
.2911	a8		tay				tay
.2912	80 ad		bra $28c1			bra 	_ScanForwardLoop
.2914					_ScanExit:
.2914	c8		iny				iny 								; consume final token.
.2915	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2916					ScanProcedures:
.2916	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.2918	48		pha				pha
.2919	a5 19		lda $19				lda 	codePtr+1
.291b	48		pha				pha
.291c	5a		phy				phy
.291d	ad 1d 05	lda $051d			lda 	PGMBaseHigh 				; back to the program start
.2920	85 19		sta $19				sta 	codePtr+1
.2922	64 18		stz $18				stz 	codePtr
.2924					_SPLoop:
.2924	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2926	f0 18		beq $2940			beq 	_SPExit
.2928	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.292a	b1 18		lda ($18),y			lda 	(codePtr),y
.292c	c9 88		cmp #$88			cmp 	#PR_PROC
.292e	d0 03		bne $2933			bne 	_SPNext
.2930	20 48 29	jsr $2948			jsr 	_SPSetupRecord
.2933					_SPNext:
.2933	18		clc				clc 								; forward to next
.2934	b2 18		lda ($18)			lda 	(codePtr)
.2936	65 18		adc $18				adc 	codePtr
.2938	85 18		sta $18				sta 	codePtr
.293a	90 e8		bcc $2924			bcc 	_SPLoop
.293c	e6 19		inc $19				inc 	codePtr+1
.293e	80 e4		bra $2924			bra 	_SPLoop
.2940					_SPExit:
.2940	7a		ply				ply
.2941	68		pla				pla
.2942	85 19		sta $19				sta 	codePtr+1
.2944	68		pla				pla
.2945	85 18		sta $18				sta 	codePtr
.2947	60		rts				rts
.2948					_SPSetupRecord:
.2948	c8		iny				iny 								; check identifier follows
.2949	b1 18		lda ($18),y			lda 	(codePtr),y
.294b	29 c0		and #$c0			and 	#$C0
.294d	c9 40		cmp #$40			cmp 	#$40
.294f	d0 27		bne $2978			bne 	_SPSyntax
.2951	20 64 2f	jsr $2f64			jsr 	VARGetInfo 					; get the information
.2954	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen 				; check right bracket follows.
.2957	20 16 2f	jsr $2f16			jsr 	VARFind 					; already exists ?
.295a	b0 1f		bcs $297b			bcs 	_SPUsed 					; error !
.295c	20 c2 2e	jsr $2ec2			jsr 	VARCreate 					; create, XA points to the data.
.295f	85 24		sta $24				sta 	zTemp0
.2961	86 25		stx $25				stx 	zTemp0+1
.2963	5a		phy				phy 								; save Y pos on stack
.2964	a0 01		ldy #$01			ldy 	#1
.2966	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2968	92 24		sta ($24)			sta 	(zTemp0)
.296a	a5 19		lda $19				lda 	codePtr+1
.296c	91 24		sta ($24),y			sta 	(zTemp0),y
.296e	c8		iny				iny
.296f	68		pla				pla
.2970	91 24		sta ($24),y			sta 	(zTemp0),y
.2972	c8		iny				iny
.2973	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2975	91 24		sta ($24),y			sta 	(zTemp0),y
.2977	60		rts				rts
.2978					_SPSyntax:
.2978	4c ab 29	jmp $29ab		jmp	ErrorV_syntax
.297b					_SPUsed:
.297b	4c 02 2b	jmp $2b02		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.297e					Command_WHILE:
.297e	5a		phy				phy 								; save position of the test
.297f	20 bc 19	jsr $19bc			jsr 	EXPEvalNumber 				; work out the while test.
.2982	a2 08		ldx #$08			ldx 	#IFR0
.2984	20 1a 36	jsr $361a			jsr 	IFloatCheckZero 			; check if zero
.2987	f0 0e		beq $2997			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2989	98		tya				tya 								; position *after* test.
.298a	7a		ply				ply 								; restore position before test, at WHILE
.298b	88		dey				dey 								; so we execute the WHILE command again.
.298c	48		pha				pha 								; push after test on the stack
.298d	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.298f	20 9d 2b	jsr $2b9d			jsr 	StackOpen
.2992	20 d0 2b	jsr $2bd0			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2995	7a		ply				ply 								; restore the position *after* the test
.2996	60		rts				rts
.2997					_WHExitLoop:
.2997	68		pla				pla 								; throw post loop position
.2998	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.299a	aa		tax				tax
.299b	20 bb 28	jsr $28bb			jsr 	ScanForward
.299e	60		rts				rts
.299f					Command_WEND:
.299f	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.29a1	20 c8 2b	jsr $2bc8			jsr 	StackCheckFrame
.29a4	20 e2 2b	jsr $2be2			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.29a7	20 ba 2b	jsr $2bba			jsr 	StackClose		 			; erase the frame
.29aa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.29ab					ErrorV_syntax:
.29ab	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>29ae	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>29b6	45 72 72 6f 72 00
.29bc					ErrorV_range:
.29bc	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>29bf	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>29c7	52 61 6e 67 65 00
.29cd					ErrorV_value:
.29cd	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>29d0	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>29d8	75 65 00
.29db					ErrorV_type:
.29db	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>29de	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>29e6	73 6d 61 74 63 68 00
.29ed					ErrorV_unimplemented:
.29ed	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>29f0	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>29f8	6c 65 6d 65 6e 74 65 64 00
.2a01					ErrorV_assert:
.2a01	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2a04	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2a0c	46 61 69 6c 00
.2a11					ErrorV_internal:
.2a11	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2a14	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2a1c	6c 20 45 72 72 6f 72 00
.2a24					ErrorV_divzero:
.2a24	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2a27	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2a2f	42 79 20 5a 65 72 6f 00
.2a37					ErrorV_structure:
.2a37	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2a3a	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2a42	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2a4f					ErrorV_stop:
.2a4f	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2a52	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2a5a	20 53 74 6f 70 70 65 64 00
.2a63					ErrorV_data:
.2a63	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2a66	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2a6e	44 61 74 61 00
.2a73					ErrorV_redefine:
.2a73	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2a76	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2a7e	65 64 65 66 69 6e 65 64 00
.2a87					ErrorV_index:
.2a87	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2a8a	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2a92	61 79 20 49 6e 64 65 78 00
.2a9b					ErrorV_memory:
.2a9b	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2a9e	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2aa6	4d 65 6d 6f 72 79 00
.2aad					ErrorV_uninitialised:
.2aad	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2ab0	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2ab8	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2ac8					ErrorV_string:
.2ac8	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2acb	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2ad3	69 6e 67 20 4c 65 6e 67 74 68 00
.2ade					ErrorV_variable:
.2ade	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2ae1	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2ae9	65 20 4d 69 73 73 69 6e 67 00
.2af3					ErrorV_stack:
.2af3	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2af6	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2afe	75 6c 6c 00
.2b02					ErrorV_dupproc:
.2b02	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2b05	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2b0d	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2b1d	65 64 00
.2b20					ErrorV_unknown:
.2b20	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2b23	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2b2b	20 50 72 6f 63 65 64 75 72 65 00
.2b36					ErrorV_break:
.2b36	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2b39	05 42 72 65 61 6b 00			.text	5,"Break",0
.2b40					ErrorV_line:
.2b40	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2b43	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2b4b	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.2b58					ErrorV_fnf:
.2b58	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2b5b	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>2b63	74 20 46 6f 75 6e 64 00
.2b6b					ErrorV_full:
.2b6b	20 b2 2d	jsr $2db2		jsr	ErrorHandler
>2b6e	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>2b76	20 46 75 6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2b7c					ERRCheckLParen:
.2b7c	b1 18		lda ($18),y			lda 	(codePtr),y
.2b7e	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2b80	d0 18		bne $2b9a			bne 	ERRSyntaxError
.2b82	c8		iny				iny
.2b83	60		rts				rts
.2b84					ERRCheckRParen:
.2b84	b1 18		lda ($18),y			lda 	(codePtr),y
.2b86	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2b88	d0 10		bne $2b9a			bne 	ERRSyntaxError
.2b8a	c8		iny				iny
.2b8b	60		rts				rts
.2b8c					ERRCheckComma:
.2b8c	b1 18		lda ($18),y			lda 	(codePtr),y
.2b8e	c9 99		cmp #$99			cmp 	#PR_COMMA
.2b90	d0 08		bne $2b9a			bne 	ERRSyntaxError
.2b92	c8		iny				iny
.2b93	60		rts				rts
.2b94					ERRCheckA:
.2b94	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2b96	d0 02		bne $2b9a			bne 	ERRSyntaxError
.2b98	c8		iny				iny
.2b99	60		rts				rts
.2b9a					ERRSyntaxError:
.2b9a	4c ab 29	jmp $29ab		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2b9d					StackOpen:
.2b9d	48		pha				pha 								; save frame byte
.2b9e	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.2ba0	0a		asl a				asl 	a 							; claim twice this for storage
.2ba1	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2ba3	38		sec				sec 								; so basically subtracting from
.2ba4	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.2ba6	85 2c		sta $2c				sta 	basicStack
.2ba8	b0 09		bcs $2bb3			bcs 	_SONoBorrow
.2baa	c6 2d		dec $2d				dec 	basicStack+1
.2bac	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.2bae	cd 23 06	cmp $0623			cmp 	basicStackEnd
.2bb1	f0 04		beq $2bb7			beq 	_SOMemory
.2bb3					_SONoBorrow:
.2bb3	68		pla				pla 								; get marker back and write at TOS
.2bb4	92 2c		sta ($2c)			sta 	(basicStack)
.2bb6	60		rts				rts
.2bb7					_SOMemory:
.2bb7	4c f3 2a	jmp $2af3		jmp	ErrorV_stack
.2bba					StackClose:
.2bba	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2bbc	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2bbe	0a		asl a				asl 	a 							; claim twice this.
.2bbf	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.2bc1	85 2c		sta $2c				sta 	basicStack
.2bc3	90 02		bcc $2bc7			bcc 	_SCExit
.2bc5	e6 2d		inc $2d				inc 	basicStack+1
.2bc7					_SCExit:
.2bc7	60		rts				rts
.2bc8					StackCheckFrame:
.2bc8	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2bca	d0 01		bne $2bcd			bne 	_SCFError 					; different, we have structures mixed up
.2bcc	60		rts				rts
.2bcd					_SCFError:
.2bcd	4c 37 2a	jmp $2a37		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2bd0					STKSaveCodePosition:
.2bd0	5a		phy				phy
.2bd1	98		tya				tya 								; save Y at offset 1.
.2bd2	a0 01		ldy #$01			ldy 	#1
.2bd4	91 2c		sta ($2c),y			sta 	(basicStack),y
.2bd6	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2bd8	c8		iny				iny
.2bd9	91 2c		sta ($2c),y			sta 	(basicStack),y
.2bdb	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2bdd	c8		iny				iny
.2bde	91 2c		sta ($2c),y			sta 	(basicStack),y
.2be0	7a		ply				ply
.2be1	60		rts				rts
.2be2					STKLoadCodePosition:
.2be2	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2be4	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2be6	85 19		sta $19				sta 	codePtr+1
.2be8	88		dey				dey
.2be9	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2beb	85 18		sta $18				sta 	codePtr
.2bed	88		dey				dey
.2bee	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.2bf0	a8		tay				tay
.2bf1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2bf2					StackReset:
.2bf2	48		pha				pha 								; save top of memory
.2bf3	3a		dec a				dec 	a  							; end of stack = previous byte
.2bf4	85 2d		sta $2d				sta 	basicStack+1
.2bf6	a9 ff		lda #$ff			lda 	#$FF
.2bf8	85 2c		sta $2c				sta 	basicStack
.2bfa	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2bfc	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2bfe	68		pla				pla 								; allocate pages for stack.
.2bff	38		sec				sec
.2c00	e9 02		sbc #$02			sbc 	#STACKPAGES
.2c02	8d 23 06	sta $0623			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2c05	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0623					basicStackEnd:
>0623							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2c06					StringConcrete:
.2c06	5a		phy				phy 								; save position on stack
.2c07	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2c09	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2c0b	b0 41		bcs $2c4e			bcs 	_SALengthError
.2c0d	18		clc				clc 								; length of the new string
.2c0e	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2c10	90 02		bcc $2c14			bcc 	_SAHaveLength
.2c12	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2c14					_SAHaveLength:
.2c14	48		pha				pha 								; save length to be allocated for concreting.
.2c15	38		sec				sec
.2c16	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2c18	6d 25 06	adc $0625			adc 	stringMemory
.2c1b	8d 25 06	sta $0625			sta 	stringMemory
.2c1e	85 28		sta $28				sta 	zTemp2 						; update storage address
.2c20	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2c22	6d 26 06	adc $0626			adc 	stringMemory+1
.2c25	8d 26 06	sta $0626			sta 	stringMemory+1
.2c28	85 29		sta $29				sta 	zTemp2+1
.2c2a	68		pla				pla 								; save length allocated in +0
.2c2b	92 28		sta ($28)			sta 	(zTemp2)
.2c2d	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2c2f	a0 01		ldy #$01			ldy 	#1
.2c31	91 28		sta ($28),y			sta 	(zTemp2),y
.2c33					_SACopyNewString:
.2c33	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2c35	a0 02		ldy #$02			ldy 	#2
.2c37	91 28		sta ($28),y			sta 	(zTemp2),y
.2c39	aa		tax				tax 								; bytes to copy
.2c3a	f0 0c		beq $2c48			beq 	_SACopyExit
.2c3c	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2c3e					_SACopyNSLoop:
.2c3e	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2c40	c8		iny				iny 								; write two on in string storage
.2c41	c8		iny				iny
.2c42	91 28		sta ($28),y			sta 	(zTemp2),y
.2c44	88		dey				dey
.2c45	ca		dex				dex									; until copied all the string lengths.
.2c46	d0 f6		bne $2c3e			bne 	_SACopyNSLoop
.2c48					_SACopyExit:
.2c48	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2c4a	a5 28		lda $28				lda 	zTemp2
.2c4c	7a		ply				ply
.2c4d	60		rts				rts
.2c4e					_SALengthError:
.2c4e	4c c8 2a	jmp $2ac8		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2c51					StringSystemInitialise:
.2c51	3a		dec a				dec 	a 							; make last byte of previous page.
.2c52	8d 26 06	sta $0626			sta 	stringMemory+1
.2c55	85 25		sta $25				sta 	zTemp0+1
.2c57	a9 ff		lda #$ff			lda 	#$FF
.2c59	8d 25 06	sta $0625			sta 	stringMemory
.2c5c	85 24		sta $24				sta 	zTemp0
.2c5e	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2c60	92 24		sta ($24)			sta 	(zTemp0)
.2c62	60		rts				rts
.2c63					StringSpaceInitialise:
.2c63	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2c65	8d 24 06	sta $0624			sta 	stringInitialised
.2c68	ad 25 06	lda $0625			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2c6b	8d 27 06	sta $0627			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2c6e	ad 26 06	lda $0626			lda 	stringMemory+1
.2c71	3a		dec a				dec 	a
.2c72	8d 28 06	sta $0628			sta 	stringTempPointer+1
.2c75	20 ef 12	jsr $12ef			jsr 	ClearCheckMemory
.2c78	60		rts				rts
.2c79					StringTempAllocate:
.2c79	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2c7b	b0 2e		bcs $2cab			bcs 	_STALength
.2c7d	2c 24 06	bit $0624			bit 	stringInitialised 			; already initialised
.2c80	30 05		bmi $2c87			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.2c82	48		pha				pha 								; save value to subtract.
.2c83	20 63 2c	jsr $2c63			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2c86	68		pla				pla 								; restore it
.2c87					_STAAllocate:
.2c87	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2c89	18		clc				clc  								; deliberate allows one more
.2c8a	6d 27 06	adc $0627			adc 	stringTempPointer 			; subtract from temp pointer
.2c8d	8d 27 06	sta $0627			sta 	stringTempPointer
.2c90	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2c92	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2c94	ad 28 06	lda $0628			lda 	stringTempPointer+1
.2c97	69 ff		adc #$ff			adc 	#$FF
.2c99	8d 28 06	sta $0628			sta 	stringTempPointer+1
.2c9c	85 2f		sta $2f				sta 	zsTemp+1
.2c9e	85 09		sta $09				sta 	IFR0+IM1
.2ca0	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2ca2	a9 80		lda #$80			lda 	#$80
.2ca4	85 0b		sta $0b				sta 	IFR0+IExp
.2ca6	a9 00		lda #$00			lda 	#0 							; clear the target string
.2ca8	92 2e		sta ($2e)			sta 	(zsTemp)
.2caa	60		rts				rts
.2cab					_STALength:
.2cab	4c c8 2a	jmp $2ac8		jmp	ErrorV_string
.2cae					StringTempWrite:
.2cae	5a		phy				phy
.2caf	48		pha				pha
.2cb0	b2 2e		lda ($2e)			lda 	(zsTemp)
.2cb2	1a		inc a				inc 	a
.2cb3	92 2e		sta ($2e)			sta 	(zsTemp)
.2cb5	a8		tay				tay
.2cb6	68		pla				pla
.2cb7	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2cb9	7a		ply				ply
.2cba	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0624					stringInitialised:
>0624							.fill 	1
.0625					stringMemory:
>0625							.fill 	2
.0627					stringTempPointer:
>0627							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2cbb					Command_DIR:
.2cbb	5a		phy				phy
.2cbc	38		sec				sec 								; reset read
.2cbd	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2cc0	18		clc		_CDLoop:clc
.2cc1	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2cc4	b0 27		bcs $2ced			bcs 	_CDExit 					; no more
.2cc6	86 24		stx $24				stx 	zTemp0
.2cc8	84 25		sty $25				sty 	zTemp0+1
.2cca	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2ccd					_CDPad:
.2ccd	a9 20		lda #$20			lda 	#32
.2ccf	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2cd2	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2cd5	e0 10		cpx #$10			cpx 	#16
.2cd7	90 f4		bcc $2ccd			bcc 	_CDPad
.2cd9	a0 11		ldy #$11			ldy 	#17
.2cdb	b1 24		lda ($24),y			lda 	(zTemp0),y
.2cdd	aa		tax				tax
.2cde	88		dey				dey
.2cdf	b1 24		lda ($24),y			lda 	(zTemp0),y
.2ce1	20 db 2d	jsr $2ddb			jsr 	WriteIntXA
.2ce4	a2 ef		ldx #$ef			ldx 	#_CDTail & $FF
.2ce6	a0 2c		ldy #$2c			ldy 	#_CDTail >> 8
.2ce8	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2ceb	80 d3		bra $2cc0			bra 	_CDLoop
.2ced	7a		ply		_CDExit:ply
.2cee	60		rts				rts
.2cef					_CDTail:
>2cef	08						.byte 	_CDTail2-*-1
>2cf0	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2cf8					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2cf8					Command_ERASE:
.2cf8	20 0a 2d	jsr $2d0a			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2cfb	5a		phy				phy
.2cfc	a2 29		ldx #$29			ldx 	#FSBBlock & $FF
.2cfe	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2d00	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2d03	7a		ply				ply
.2d04	b0 01		bcs $2d07			bcs 	_CEFail
.2d06	60		rts				rts
.2d07					_CEFail:
.2d07	4c 58 2b	jmp $2b58		jmp	ErrorV_fnf
.2d0a					FileSetupBlock:
.2d0a	20 e6 19	jsr $19e6			jsr 	EXPEvalString 					; string to R0, zTemp0
.2d0d	a5 24		lda $24				lda 	zTemp0 							; address to name
.2d0f	8d 29 06	sta $0629			sta 	FSBBlock
.2d12	a5 25		lda $25				lda 	zTemp0+1
.2d14	8d 2a 06	sta $062a			sta 	FSBBlock+1 						; zero the rest.
.2d17	9c 2b 06	stz $062b			stz 	FSBBlock+2
.2d1a	9c 2c 06	stz $062c			stz 	FSBBlock+3
.2d1d	9c 2d 06	stz $062d			stz 	FSBBlock+4
.2d20	9c 2e 06	stz $062e			stz 	FSBBlock+5
.2d23	60		rts				rts
.0629					FSBBlock:
>0629							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2d24					Command_LOAD:
.2d24	20 0a 2d	jsr $2d0a			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2d27	ad 1d 05	lda $051d			lda 	PGMBaseHigh 				; set load address
.2d2a	8d 2c 06	sta $062c			sta 	FSBBlock+3
.2d2d	9c 2b 06	stz $062b			stz 	FSBBlock+2
.2d30	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2d32	48		pha				pha
.2d33	20 50 2d	jsr $2d50			jsr	 	FileCheckSecondParam
.2d36	5a		phy				phy
.2d37	a2 29		ldx #$29			ldx 	#FSBBlock & $FF
.2d39	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2d3b	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2d3e	7a		ply				ply
.2d3f	b0 0c		bcs $2d4d			bcs 	_CLFail
.2d41	68		pla				pla 								; load program
.2d42	c9 99		cmp #$99			cmp 	#PR_COMMA
.2d44	f0 06		beq $2d4c			beq 	_CLNoClear
.2d46	20 a9 12	jsr $12a9			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2d49	4c fa 2d	jmp $2dfa			jmp 	WarmStart 					; and warm start
.2d4c					_CLNoClear:
.2d4c	60		rts				rts
.2d4d					_CLFail:
.2d4d	4c 58 2b	jmp $2b58		jmp	ErrorV_fnf
.2d50					FileCheckSecondParam:
.2d50	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2d52	c9 99		cmp #$99			cmp 	#PR_COMMA
.2d54	d0 0e		bne $2d64			bne 	_FCSPExit
.2d56	c8		iny				iny 								; consume
.2d57	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; get address
.2d5a	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2d5c	8d 2b 06	sta $062b			sta 	FSBBlock+2
.2d5f	a5 09		lda $09				lda 	IFR0+IM1
.2d61	8d 2c 06	sta $062c			sta 	FSBBlock+3
.2d64					_FCSPExit:
.2d64	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2d65					Command_SAVE:
.2d65	20 0a 2d	jsr $2d0a			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2d68	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2d6a	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2d6c	f0 22		beq $2d90			beq 	_CLSaveBlock 				; save "Name",from,size
.2d6e	ad 1d 05	lda $051d			lda 	PGMBaseHigh 				; set load address
.2d71	8d 2c 06	sta $062c			sta 	FSBBlock+3
.2d74	9c 2b 06	stz $062b			stz 	FSBBlock+2
.2d77	20 7a 23	jsr $237a			jsr		PGMEndProgram 				; end of program -> zTemp0
.2d7a	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2d7c	d0 02		bne $2d80			bne 	_CLNoCarry
.2d7e	e6 25		inc $25				inc 	zTemp0+1
.2d80					_CLNoCarry:
.2d80	a5 24		lda $24				lda 	zTemp0
.2d82	8d 2d 06	sta $062d			sta 	FSBBlock+4
.2d85	38		sec				sec
.2d86	a5 25		lda $25				lda 	zTemp0+1
.2d88	ed 2c 06	sbc $062c			sbc 	FSBBlock+3
.2d8b	8d 2e 06	sta $062e			sta 	FSBBlock+5
.2d8e	80 13		bra $2da3			bra 	_CSSave
.2d90					_CLSaveBlock:
.2d90	20 50 2d	jsr $2d50			jsr 	FileCheckSecondParam 		; the address to save from.
.2d93	20 8c 2b	jsr $2b8c			jsr 	ERRCheckComma
.2d96	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; get size
.2d99	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2d9b	8d 2d 06	sta $062d			sta 	FSBBlock+4
.2d9e	a5 09		lda $09				lda 	IFR0+IM1
.2da0	8d 2e 06	sta $062e			sta 	FSBBlock+5
.2da3					_CSSave:
.2da3	5a		phy				phy
.2da4	a2 29		ldx #$29			ldx 	#FSBBlock & $FF
.2da6	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2da8	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2dab	7a		ply				ply
.2dac	b0 01		bcs $2daf			bcs 	_CSFail
.2dae	60		rts				rts
.2daf					_CSFail:
.2daf	4c 6b 2b	jmp $2b6b		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2db2					ErrorHandler:
.2db2	fa		plx				plx 								; get address of msg
.2db3	7a		ply				ply
.2db4	e8		inx				inx 								; bump past RTS
.2db5	d0 01		bne $2db8			bne 	_EHNoInc
.2db7	c8		iny				iny
.2db8					_EHNoInc:
.2db8	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2dbb	ad 2f 06	lda $062f			lda 	ERRLine 					; direct command ?
.2dbe	0d 30 06	ora $0630			ora 	ERRLine+1
.2dc1	f0 10		beq $2dd3			beq 	_EHNoNumber
.2dc3	a2 d6		ldx #$d6			ldx 	#_EHAtMsg & $FF
.2dc5	a0 2d		ldy #$2d			ldy 	#_EHAtMsg >> 8
.2dc7	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2dca	ad 2f 06	lda $062f			lda 	ERRLine 					; line number -> XA
.2dcd	ae 30 06	ldx $0630			ldx 	ERRLine+1
.2dd0	20 db 2d	jsr $2ddb			jsr 	WriteIntXA
.2dd3					_EHNoNumber:
.2dd3	4c 04 2e	jmp $2e04			jmp 	WarmStartNewLine
.2dd6					_EHAtMsg:
>2dd6	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2ddb					_EHAtMsg1:
.2ddb					WriteIntXA:
.2ddb	da		phx				phx
.2ddc	48		pha				pha
.2ddd	a2 08		ldx #$08			ldx 	#IFR0
.2ddf	20 70 35	jsr $3570			jsr 	IFloatPushRx
.2de2	68		pla				pla
.2de3	20 23 36	jsr $3623			jsr 	IFloatSetByte
.2de6	68		pla				pla
.2de7	85 09		sta $09				sta 	IFR0+IM1
.2de9	a9 0a		lda #$0a			lda 	#10 						; decimal
.2deb	20 c3 33	jsr $33c3			jsr 	IFloatIntegerToStringR0	 	; convert
.2dee	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2df1	a2 08		ldx #$08			ldx 	#IFR0
.2df3	20 91 35	jsr $3591			jsr 	IFloatPullRx
.2df6	60		rts				rts
.2df7					NotImplemented:
.2df7	4c ed 29	jmp $29ed		jmp	ErrorV_unimplemented
.062f					ERRLine:
>062f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2dfa					WarmStart:
.2dfa	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2dfc	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2dff	a9 6b		lda #$6b			lda 	#"k"
.2e01	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2e04					WarmStartNewLine:
.2e04	a9 0d		lda #$0d			lda 	#13
.2e06	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2e09					WarmStartNoPrompt:
.2e09	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2e0b	9a		txs				txs
.2e0c	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2e0f	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2e10	d0 01		bne $2e13			bne 	_WSSkip
.2e12	c8		iny				iny
.2e13					_WSSkip:
.2e13	86 28		stx $28				stx 	zTemp2 						; save address
.2e15	84 29		sty $29				sty 	zTemp2+1
.2e17	b2 28		lda ($28)			lda 	(zTemp2)
.2e19	f0 ee		beq $2e09			beq 	WarmStartNoPrompt 			; ignore empty line.
.2e1b	a2 4d		ldx #$4d			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2e1d	a0 2e		ldy #$2e			ldy 	#TOKGetCharacter >> 8
.2e1f	38		sec				sec
.2e20	20 ec 23	jsr $23ec			jsr 	TOKTokenise
.2e23	b0 25		bcs $2e4a			bcs 	_WSSyntax
.2e25	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2e28	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2e2b	d0 0b		bne $2e38			bne 	_WSLineEdit
.2e2d	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2e2f	85 18		sta $18				sta 	codePtr
.2e31	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2e33	85 19		sta $19				sta 	codePtr+1
.2e35	4c 88 17	jmp $1788			jmp 	RUNNewLine
.2e38					_WSLineEdit:
.2e38	20 c7 22	jsr $22c7			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2e3b	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2e3e	c9 04		cmp #$04			cmp 	#4
.2e40	f0 03		beq $2e45			beq 	_WSNoInsert
.2e42	20 11 23	jsr $2311			jsr 	PGMInsertLine				; if not, maybe insert
.2e45					_WSNoInsert:
.2e45	20 a9 12	jsr $12a9			jsr 	ClearCode 					; clear variables etc.
.2e48	80 bf		bra $2e09			bra 	WarmStartNoPrompt
.2e4a					_WSSyntax:
.2e4a	4c ab 29	jmp $29ab		jmp	ErrorV_syntax
.2e4d					TOKGetCharacter:
.2e4d	b2 28		lda ($28)			lda 	(zTemp2)
.2e4f	90 06		bcc $2e57			bcc 	_GSNoIncrement
.2e51	e6 28		inc $28				inc 	zTemp2
.2e53	d0 02		bne $2e57			bne 	_GSNoIncrement
.2e55	e6 29		inc $29				inc 	zTemp2+1
.2e57					_GSNoIncrement:
.2e57	c9 00		cmp #$00			cmp 	#0
.2e59	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2e5a					VARArrayLookup:
.2e5a	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2e5c	86 25		stx $25				stx 	zTemp0+1
.2e5e	b2 24		lda ($24)			lda 	(zTemp0)
.2e60	48		pha				pha
.2e61	5a		phy				phy
.2e62	a0 01		ldy #$01			ldy 	#1
.2e64	b1 24		lda ($24),y			lda 	(zTemp0),y
.2e66	7a		ply				ply
.2e67	48		pha				pha
.2e68	20 ce 19	jsr $19ce			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2e6b	68		pla				pla 								; array address to zTemp0
.2e6c	85 25		sta $25				sta 	zTemp0+1
.2e6e	68		pla				pla
.2e6f	85 24		sta $24				sta 	zTemp0
.2e71	5a		phy				phy 								; save codePtr position.
.2e72	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2e74	b1 24		lda ($24),y			lda 	(zTemp0),y
.2e76	48		pha				pha 								; save bit 15 on stack.
.2e77	29 7f		and #$7f			and 	#$7F
.2e79	85 26		sta $26				sta 	zTemp1
.2e7b	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2e7d	d2 24		cmp ($24)			cmp 	(zTemp0)
.2e7f	a5 09		lda $09				lda 	IFR0+IM1
.2e81	e5 26		sbc $26				sbc 	zTemp1
.2e83	b0 3a		bcs $2ebf			bcs 	_VALIndex
.2e85	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2e87	c9 40		cmp #$40			cmp 	#$40
.2e89	b0 34		bcs $2ebf			bcs 	_VALIndex
.2e8b	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2e8d	26 09		rol $09				rol 	IFR0+IM1
.2e8f	fa		plx				plx 								; get msb of size -> X
.2e90	30 04		bmi $2e96			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2e92	06 08		asl $08				asl 	IFR0+IM0
.2e94	26 09		rol $09				rol 	IFR0+IM1
.2e96					_VARNotX4:
.2e96	18		clc				clc 								; add the two for the size bytes
.2e97	a5 08		lda $08				lda 	IFR0+IM0
.2e99	69 02		adc #$02			adc 	#2
.2e9b	85 08		sta $08				sta 	IFR0+IM0
.2e9d	90 02		bcc $2ea1			bcc 	_VARNoCarry1
.2e9f	e6 09		inc $09				inc 	IFR0+IM1
.2ea1					_VARNoCarry1:
.2ea1	18		clc				clc 								; calculate the element address and push to stack.
.2ea2	a5 08		lda $08				lda 	IFR0+IM0
.2ea4	65 24		adc $24				adc 	zTemp0
.2ea6	48		pha				pha
.2ea7	a5 09		lda $09				lda 	IFR0+IM1
.2ea9	65 25		adc $25				adc 	zTemp0+1
.2eab	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2ead	30 04		bmi $2eb3			bmi 	_VARHasSubLevel
.2eaf	aa		tax				tax 								; address in XA
.2eb0	68		pla				pla
.2eb1	7a		ply				ply 								; restore Y and exit
.2eb2	60		rts				rts
.2eb3					_VARHasSubLevel:
.2eb3	aa		tax				tax 								; get link address in XA
.2eb4	68		pla				pla
.2eb5	7a		ply				ply 								; restore code position.
.2eb6	48		pha				pha
.2eb7	20 8c 2b	jsr $2b8c			jsr 	ERRCheckComma 				; comma required.
.2eba	68		pla				pla
.2ebb	20 5a 2e	jsr $2e5a			jsr 	VARArrayLookup 				; call it recursively
.2ebe	60		rts				rts
.2ebf					_VALIndex:
.2ebf	4c 87 2a	jmp $2a87		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2ec2					VARCreate:
.2ec2	5a		phy				phy
.2ec3	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2ec5	a2 00		ldx #$00			ldx 	#0
.2ec7	20 c6 12	jsr $12c6			jsr 	AllocateMemory
.2eca	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2ecc	86 27		stx $27				stx 	zTemp1+1
.2ece	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2ed0	ad 33 06	lda $0633			lda 	VARHash
.2ed3	91 26		sta ($26),y			sta 	(zTemp1),y
.2ed5	c8		iny				iny 								; put address of name into +3,+4
.2ed6	ad 31 06	lda $0631			lda 	VARNameAddress
.2ed9	91 26		sta ($26),y			sta 	(zTemp1),y
.2edb	c8		iny				iny
.2edc	ad 32 06	lda $0632			lda 	VARNameAddress+1
.2edf	91 26		sta ($26),y			sta 	(zTemp1),y
.2ee1	ad 34 06	lda $0634			lda 	VARType
.2ee4	29 01		and #$01			and 	#1
.2ee6	f0 06		beq $2eee			beq 	_CVNotString
.2ee8	a0 08		ldy #$08			ldy 	#5+3
.2eea	a9 80		lda #$80			lda 	#$80
.2eec	91 26		sta ($26),y			sta 	(zTemp1),y
.2eee					_CVNotString:
.2eee	ad 55 06	lda $0655			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2ef1	85 24		sta $24				sta 	zTemp0
.2ef3	ad 56 06	lda $0656			lda 	VARHashEntry+1
.2ef6	85 25		sta $25				sta 	zTemp0+1
.2ef8	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2efa	b2 24		lda ($24)			lda 	(zTemp0)
.2efc	92 26		sta ($26)			sta 	(zTemp1)
.2efe	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f00	91 26		sta ($26),y			sta 	(zTemp1),y
.2f02	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2f04	92 24		sta ($24)			sta 	(zTemp0)
.2f06	a5 27		lda $27				lda 	zTemp1+1
.2f08	91 24		sta ($24),y			sta 	(zTemp0),y
.2f0a	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2f0c	a6 27		ldx $27				ldx 	zTemp1+1
.2f0e	18		clc				clc 								; add 5 to point to the data.
.2f0f	69 05		adc #$05			adc 	#5
.2f11	90 01		bcc $2f14			bcc 	_VCNoCarry
.2f13	e8		inx				inx
.2f14					_VCNoCarry:
.2f14	7a		ply				ply
.2f15	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2f16					VARFind:
.2f16	5a		phy				phy
.2f17	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2f19	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f1b	85 27		sta $27				sta 	zTemp1+1
.2f1d	f0 1c		beq $2f3b			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2f1f	b2 24		lda ($24)			lda 	(zTemp0)
.2f21	85 26		sta $26				sta 	zTemp1
.2f23					_VFLoop:
.2f23	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2f25	b1 26		lda ($26),y			lda 	(zTemp1),y
.2f27	cd 33 06	cmp $0633			cmp 	VARHash
.2f2a	f0 12		beq $2f3e			beq 	_VFHashesMatch 				; if so, check the name.
.2f2c					_VFNext:
.2f2c	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2f2e	aa		tax				tax
.2f2f	a0 01		ldy #$01			ldy 	#1
.2f31	b1 26		lda ($26),y			lda 	(zTemp1),y
.2f33	85 27		sta $27				sta 	zTemp1+1
.2f35	86 26		stx $26				stx 	zTemp1
.2f37	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2f39	d0 e8		bne $2f23			bne 	_VFLoop
.2f3b					_VFExitFail:
.2f3b	7a		ply				ply
.2f3c	18		clc				clc
.2f3d	60		rts				rts
.2f3e					_VFHashesMatch:
.2f3e	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2f40	b1 26		lda ($26),y			lda 	(zTemp1),y
.2f42	85 28		sta $28				sta 	zTemp2
.2f44	c8		iny				iny
.2f45	b1 26		lda ($26),y			lda 	(zTemp1),y
.2f47	85 29		sta $29				sta 	zTemp2+1
.2f49	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2f4b					_VFNameCompLoop:
.2f4b	c8		iny				iny 								; char at a time
.2f4c	b9 35 06	lda $0635,y			lda 	VARBuffer,y
.2f4f	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2f51	d0 d9		bne $2f2c			bne 	_VFNext						; next entry if different.
.2f53	c9 7c		cmp #$7c			cmp 	#$7C
.2f55	90 f4		bcc $2f4b			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2f57	18		clc				clc
.2f58	a5 26		lda $26				lda 	zTemp1
.2f5a	a6 27		ldx $27				ldx 	zTemp1+1
.2f5c	69 05		adc #$05			adc 	#5
.2f5e	90 01		bcc $2f61			bcc 	_VFNNoCarry
.2f60	e8		inx				inx
.2f61					_VFNNoCarry:
.2f61	7a		ply				ply
.2f62	38		sec				sec
.2f63	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2f64					VARGetInfo:
.2f64	98		tya				tya 								; calculate the address of the identifier start.
.2f65	18		clc				clc
.2f66	65 18		adc $18				adc 	codePtr
.2f68	8d 31 06	sta $0631			sta 	VARNameAddress
.2f6b	a5 19		lda $19				lda 	codePtr+1
.2f6d	69 00		adc #$00			adc 	#0
.2f6f	8d 32 06	sta $0632			sta 	VARNameAddress+1
.2f72	9c 33 06	stz $0633			stz 	VARHash
.2f75	a2 00		ldx #$00			ldx 	#0
.2f77					_VARCopyName:
.2f77	18		clc				clc 								; update the sum hash.
.2f78	ad 33 06	lda $0633			lda 	VARHash
.2f7b	71 18		adc ($18),y			adc 	(codePtr),y
.2f7d	8d 33 06	sta $0633			sta 	VARHash
.2f80	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2f82	c8		iny				iny
.2f83	9d 35 06	sta $0635,x			sta 	VARBuffer,x
.2f86	e8		inx				inx
.2f87	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2f89	90 ec		bcc $2f77			bcc 	_VARCopyName
.2f8b	8d 34 06	sta $0634			sta 	VARType 					; save type byte
.2f8e	29 03		and #$03			and 	#3 							; type is 0-3
.2f90	0a		asl a				asl 	a
.2f91	0a		asl a				asl 	a
.2f92	85 24		sta $24				sta 	zTemp0
.2f94	ad 33 06	lda $0633			lda 	VARHash 					; force into range of hash entries per type.
.2f97	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2f99	65 24		adc $24				adc 	zTemp0 						; index of hash table
.2f9b	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2f9c	69 57		adc #$57			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2f9e	85 24		sta $24				sta 	zTemp0
.2fa0	8d 55 06	sta $0655			sta 	VARHashEntry
.2fa3	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2fa5	69 00		adc #$00			adc 	#0
.2fa7	85 25		sta $25				sta 	zTemp0+1
.2fa9	8d 56 06	sta $0656			sta 	VARHashEntry+1
.2fac	60		rts				rts
.2fad					VARClearHashTables:
.2fad	a2 00		ldx #$00			ldx 	#0
.2faf					_VCHRLoop:
.2faf	a9 00		lda #$00			lda 	#0
.2fb1	9d 57 06	sta $0657,x			sta 	VARHashTables,x
.2fb4	e8		inx				inx
.2fb5	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2fb7	d0 f6		bne $2faf			bne 	_VCHRLoop
.2fb9	60		rts				rts
.0631					VARNameAddress:
>0631							.fill 	2
.0633					VARHash:
>0633							.fill 	1
.0634					VARType:
>0634							.fill 	1
.0635					VARBuffer:
>0635							.fill 	32
.0655					VARHashEntry:
>0655							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0657					VARHashTables:
>0657							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2fba					VARCheckSimple:
.2fba	aa		tax				tax 								; save in X
.2fbb	b1 18		lda ($18),y			lda 	(codePtr),y
.2fbd	c9 7c		cmp #$7c			cmp 	#$7C
.2fbf	d0 15		bne $2fd6			bne 	_VCSComplex
.2fc1	c8		iny				iny 								; consume the second byte, the type.
.2fc2	8a		txa				txa  								; character (40-7F) x 4
.2fc3	0a		asl a				asl 	a
.2fc4	0a		asl a				asl  	a
.2fc5	18		clc				clc
.2fc6	69 77		adc #$77			adc 	#FastVariables & $FF
.2fc8	85 08		sta $08				sta 	IFR0+IM0
.2fca	a9 06		lda #$06			lda 	#FastVariables >> 8
.2fcc	69 00		adc #$00			adc 	#0
.2fce	85 09		sta $09				sta 	IFR0+IM1
.2fd0	64 0a		stz $0a				stz 	IFR0+IM2
.2fd2	64 0b		stz $0b				stz 	IFR0+IExp
.2fd4	38		sec				sec 								; it's a reference
.2fd5	60		rts				rts
.2fd6					_VCSComplex:
.2fd6	88		dey				dey	 								; extract information.
.2fd7	20 64 2f	jsr $2f64			jsr 	VARGetInfo
.2fda	20 16 2f	jsr $2f16			jsr 	VARFind 					; search for variable
.2fdd	b0 0a		bcs $2fe9			bcs 	_VCSHaveVariable
.2fdf	ad 34 06	lda $0634			lda 	VARType 					; error if arrays, cannot autocreate
.2fe2	29 02		and #$02			and 	#2
.2fe4	d0 25		bne $300b			bne 	_VCNoCreate
.2fe6	20 c2 2e	jsr $2ec2			jsr 	VARCreate 					; create variable
.2fe9					_VCSHaveVariable:
.2fe9	48		pha				pha 								; save LSB on the stack
.2fea	ad 34 06	lda $0634			lda 	VARType 					; get var type, and shift bit 1 into carry
.2fed	6a		ror a				ror 	a
.2fee	6a		ror a				ror 	a
.2fef	68		pla				pla 								; restore LSB
.2ff0	90 08		bcc $2ffa			bcc 	_VCSNotArray 				; skip if not an array
.2ff2	20 5a 2e	jsr $2e5a			jsr 	VARArrayLookup 				; look for subscripts.
.2ff5	48		pha				pha 								; check )
.2ff6	20 84 2b	jsr $2b84			jsr 	ERRCheckRParen
.2ff9	68		pla				pla
.2ffa					_VCSNotArray:
.2ffa	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2ffc	85 08		sta $08				sta 	IFR0+IM0
.2ffe	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.3000	ad 34 06	lda $0634			lda 	VARType 					; number/string bit into carry
.3003	6a		ror a				ror 	a
.3004	a9 00		lda #$00			lda 	#0
.3006	6a		ror a				ror 	a 							; now $00 or $80
.3007	85 0b		sta $0b				sta 	IFR0+IExp
.3009	38		sec				sec 								; it's a reference
.300a	60		rts				rts
.300b					_VCNoCreate:
.300b	4c ad 2a	jmp $2aad		jmp	ErrorV_uninitialised
.0677					FastVariables:
>0677							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.300e					IFInitialise:
.300e	9c e7 06	stz $06e7			stz 	IFStackIndex 				; reset the internal stack.
.3011	60		rts				rts
.3012					IFloatSubtract:
.3012	da		phx				phx
.3013	a2 08		ldx #$08			ldx 	#IFR0
.3015	20 2c 36	jsr $362c			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.3018	fa		plx				plx
.3019					IFloatAdd:
.3019	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.301b	05 0b		ora $0b				ora 	IFR0+IExp
.301d	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.301f	d0 4e		bne $306f			bne 	_IFloatAddDecimals 			; floating point version.
.3021					_IFAddSubMantissa:
.3021	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.3023	45 0b		eor $0b				eor 	IFR0+IExp
.3025	29 40		and #$40			and 	#IFSign
.3027	d0 21		bne $304a			bne 	_IFloatSubMantissa			; if so, we do a subtract
.3029	18		clc				clc 								; do the actual addition
.302a	a5 08		lda $08				lda 	IFR0+IM0
.302c	75 00		adc $00,x			adc 		IM0,x
.302e	85 08		sta $08				sta 	IFR0+IM0
.3030	a5 09		lda $09				lda 	IFR0+IM1
.3032	75 01		adc $01,x			adc 		IM1,x
.3034	85 09		sta $09				sta 	IFR0+IM1
.3036	a5 0a		lda $0a				lda 	IFR0+IM2
.3038	75 02		adc $02,x			adc 		IM2,x
.303a	85 0a		sta $0a				sta 	IFR0+IM2
.303c	10 29		bpl $3067			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.303e	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.3040	20 50 36	jsr $3650			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.3043	20 7a 36	jsr $367a			jsr 	IFloatIncExponent
.3046	d0 1f		bne $3067			bne 	_IFloatAddExit
.3048	38		sec				sec 								; overflowed numerically.
.3049	60		rts				rts
.304a					_IFloatSubMantissa:
.304a	38		sec				sec 								; do the subtraction R0-Rx
.304b	a5 08		lda $08				lda 	IFR0+IM0
.304d	f5 00		sbc $00,x			sbc 		IM0,x
.304f	85 08		sta $08				sta 	IFR0+IM0
.3051	a5 09		lda $09				lda 	IFR0+IM1
.3053	f5 01		sbc $01,x			sbc 		IM1,x
.3055	85 09		sta $09				sta 	IFR0+IM1
.3057	a5 0a		lda $0a				lda 	IFR0+IM2
.3059	f5 02		sbc $02,x			sbc 		IM2,x
.305b	85 0a		sta $0a				sta 	IFR0+IM2
.305d	b0 08		bcs $3067			bcs 	_IFloatAddExit 				; no borrow so we are done.
.305f	a2 08		ldx #$08			ldx 	#IFR0
.3061	20 34 36	jsr $3634			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.3064	20 2c 36	jsr $362c			jsr 	IFloatNegate 				; negate the result using sign bit.
.3067					_IFloatAddExit:
.3067	18		clc				clc
.3068	60		rts				rts
.3069					_IFloatZeroAdd:
.3069	fa		plx				plx 								; return this value in R0
.306a	20 b2 35	jsr $35b2			jsr 	IFloatCopyFromRegister
.306d	18		clc				clc
.306e	60		rts				rts
.306f					_IFloatAddDecimals:
.306f	20 1a 36	jsr $361a			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.3072	f0 f3		beq $3067			beq 	_IFloatAddExit
.3074	20 58 36	jsr $3658			jsr 	IFloatNormalise 			; normalise RX
.3077	da		phx				phx 								; normalise R0
.3078	a2 08		ldx #$08			ldx 	#IFR0
.307a	20 1a 36	jsr $361a			jsr 	IFloatCheckZero
.307d	f0 ea		beq $3069			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.307f	20 58 36	jsr $3658			jsr 	IFloatNormalise
.3082	fa		plx				plx
.3083	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.3085	29 3f		and #$3f			and 	#IFXMask
.3087	38		sec				sec
.3088	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.308a	85 20		sta $20				sta 	iTemp0
.308c	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.308e	29 3f		and #$3f			and 	#IFXMask
.3090	38		sec				sec
.3091	e9 20		sbc #$20			sbc 	#$20
.3093	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.3095	b0 02		bcs $3099			bcs 	_IFloatHaveLarger
.3097	a5 20		lda $20				lda 	iTemp0
.3099					_IFloatHaveLarger:
.3099	18		clc				clc 								; get the actual one back.
.309a	69 20		adc #$20			adc 	#$20 						; shift both to that.
.309c	20 a9 30	jsr $30a9			jsr 	_IFShiftXToA
.309f	da		phx				phx
.30a0	a2 08		ldx #$08			ldx 	#IFR0
.30a2	20 a9 30	jsr $30a9			jsr 	_IFShiftXToA
.30a5	fa		plx				plx
.30a6	4c 21 30	jmp $3021			jmp 	_IFAddSubMantissa 			; do the adding bit.
.30a9					_IFShiftXToA:
.30a9	8d df 06	sta $06df			sta 	IFTarget
.30ac	20 1a 36	jsr $361a			jsr 	IFloatCheckZero 			; check adding zero ?
.30af	f0 11		beq $30c2			beq 	_IFSXExit
.30b1					_IFSXLoop:
.30b1	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.30b3	29 3f		and #$3f			and 	#IFXMask
.30b5	cd df 06	cmp $06df			cmp 	IFTarget
.30b8	f0 08		beq $30c2			beq 	_IFSXExit
.30ba	20 50 36	jsr $3650			jsr 	IFloatShiftRight
.30bd	20 7a 36	jsr $367a			jsr 	IFloatIncExponent
.30c0	80 ef		bra $30b1			bra 	_IFSXLoop
.30c2					_IFSXExit:
.30c2	60		rts				rts
.06df					IFTarget:
>06df							.fill 	1
.30c3					IFloatMultiply:
.30c3	8e df 06	stx $06df			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.30c6	20 7b 31	jsr $317b			jsr 	IFCalculateNewSign
.30c9	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.30cb	05 0b		ora $0b				ora 	IFR0+IExp
.30cd	29 3f		and #$3f			and 	#IFXMask
.30cf	15 01		ora $01,x			ora 	IM1,x
.30d1	05 09		ora $09				ora 	IFR0+IM1
.30d3	15 02		ora $02,x			ora 	IM2,x
.30d5	05 0a		ora $0a				ora 	IFR0+IM2
.30d7	d0 0a		bne $30e3			bne 	_IFMStandard
.30d9	20 fd 35	jsr $35fd			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.30dc	ad e1 06	lda $06e1			lda 	IFNewSign
.30df	85 0b		sta $0b				sta 	IFR0+IExp
.30e1	18		clc				clc
.30e2	60		rts				rts
.30e3					_IFMStandard:
.30e3	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.30e5	20 72 31	jsr $3172			jsr 	IFMSignExtend
.30e8	8d e0 06	sta $06e0			sta 	IFNewExponent
.30eb	a5 0b		lda $0b				lda 	IFR0+IExp
.30ed	20 72 31	jsr $3172			jsr 	IFMSignExtend
.30f0	18		clc				clc
.30f1	6d e0 06	adc $06e0			adc 	IFNewExponent
.30f4	8d e0 06	sta $06e0			sta 	IFNewExponent
.30f7	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.30f9	20 c3 35	jsr $35c3			jsr 	IFloatCopyToRegister
.30fc	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.30fe	20 21 36	jsr $3621			jsr 	IFloatSetZero
.3101					_IFMLoop:
.3101	a2 14		ldx #$14			ldx 	#IFRTemp
.3103	20 1a 36	jsr $361a			jsr 	IFloatCheckZero
.3106	f0 3a		beq $3142			beq 	_IFMExit
.3108	ae df 06	ldx $06df			ldx 	IFTarget 					; look at adder MSB
.310b	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.310d	10 03		bpl $3112			bpl	 	_IFMTargetOkay
.310f	20 63 31	jsr $3163			jsr 	_IFMShiftAll
.3112					_IFMTargetOkay:
.3112	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.3114	29 01		and #$01			and 	#1
.3116	f0 16		beq $312e			beq 	_IFMNoAdd
.3118	ae df 06	ldx $06df			ldx 	IFTarget 					; add adder
.311b	18		clc				clc
.311c	a5 08		lda $08				lda 	IFR0+IM0
.311e	75 00		adc $00,x			adc 		IM0,x
.3120	85 08		sta $08				sta 	IFR0+IM0
.3122	a5 09		lda $09				lda 	IFR0+IM1
.3124	75 01		adc $01,x			adc 		IM1,x
.3126	85 09		sta $09				sta 	IFR0+IM1
.3128	a5 0a		lda $0a				lda 	IFR0+IM2
.312a	75 02		adc $02,x			adc 		IM2,x
.312c	85 0a		sta $0a				sta 	IFR0+IM2
.312e					_IFMNoAdd:
.312e	a5 0a		lda $0a				lda 	IFR0+IM2
.3130	10 03		bpl $3135			bpl 	_IFMResultOkay
.3132	20 63 31	jsr $3163			jsr 	_IFMShiftAll
.3135					_IFMResultOkay:
.3135	a2 14		ldx #$14			ldx 	#IFRTemp
.3137	20 50 36	jsr $3650			jsr 	IFloatShiftRight
.313a	ae df 06	ldx $06df			ldx 	IFTarget
.313d	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.3140	80 bf		bra $3101			bra 	_IFMLoop
.3142					_IFMExit:
.3142	ad e0 06	lda $06e0			lda 	IFNewExponent 				; validate new exponent.
.3145	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.3147	90 0f		bcc $3158			bcc 	_IFMOkay
.3149	c9 e0		cmp #$e0			cmp 	#$E0
.314b	b0 0b		bcs $3158			bcs 	_IFMOkay
.314d	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.314f	f0 10		beq $3161			beq 	_IFMError
.3151	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.3153	20 21 36	jsr $3621			jsr 	IFloatSetZero
.3156	18		clc				clc
.3157	60		rts				rts
.3158					_IFMOkay:
.3158	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.315a	0d e1 06	ora $06e1			ora 	IFNewSign
.315d	85 0b		sta $0b				sta 	IFR0+IExp
.315f	18		clc				clc
.3160	60		rts				rts
.3161					_IFMError:
.3161	38		sec				sec
.3162	60		rts				rts
.3163					_IFMShiftAll:
.3163	a2 08		ldx #$08			ldx 	#IFR0
.3165	20 50 36	jsr $3650			jsr 	IFloatShiftRight
.3168	ae df 06	ldx $06df			ldx 	IFTarget
.316b	20 50 36	jsr $3650			jsr 	IFloatShiftRight
.316e	ee e0 06	inc $06e0			inc 	IFNewExponent
.3171	60		rts				rts
.3172					IFMSignExtend:
.3172	29 3f		and #$3f			and 	#IFXMask
.3174	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.3176	90 02		bcc $317a			bcc 	_IFMNoSXX
.3178	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.317a					_IFMNoSXX:
.317a	60		rts				rts
.317b					IFCalculateNewSign:
.317b	b5 03		lda $03,x			lda 	IExp,x
.317d	45 0b		eor $0b				eor 	IFR0+IExp
.317f	29 40		and #$40			and 	#IFSign
.3181	8d e1 06	sta $06e1			sta 	IFNewSign
.3184	60		rts				rts
.06e0					IFNewExponent:
>06e0							.fill 	1
.06e1					IFNewSign:
>06e1							.fill 	1
.3185					IFloatDivideInteger:
.3185	20 9e 31	jsr $319e			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.3188	b0 06		bcs $3190			bcs 	_IFDIExit
.318a	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.318c	20 b2 35	jsr $35b2			jsr 	IFloatCopyFromRegister
.318f	18		clc				clc
.3190					_IFDIExit:
.3190	60		rts				rts
.3191					IFloatModulusInteger:
.3191	20 9e 31	jsr $319e			jsr 	IFloatDivideIntegerCommon
.3194	b0 07		bcs $319d			bcs 	_IFMIExit
.3196	ae df 06	ldx $06df			ldx 	IFTarget
.3199	20 b2 35	jsr $35b2			jsr 	IFloatCopyFromRegister
.319c	18		clc				clc
.319d					_IFMIExit:
.319d	60		rts				rts
.319e					IFloatDivideIntegerCommon:
.319e	8e df 06	stx $06df			stx 	IFTarget  					; this is s1, s0 = R0
.31a1	20 7b 31	jsr $317b			jsr 	IFCalculateNewSign 			; calculate sign of result
.31a4	20 cc 31	jsr $31cc			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.31a7	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.31a9	20 1a 36	jsr $361a			jsr 	IFloatCheckZero
.31ac	f0 1c		beq $31ca			beq 	_IFDIDivZero
.31ae	ae df 06	ldx $06df			ldx 	IFTarget 					; zero Rx (S1)
.31b1	20 21 36	jsr $3621			jsr 	IFloatSetZero
.31b4	5a		phy				phy
.31b5	a0 18		ldy #$18			ldy 	#24
.31b7					_IFDILoop:
.31b7	20 dd 31	jsr $31dd			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.31ba	20 e9 31	jsr $31e9			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.31bd	88		dey				dey
.31be	d0 f7		bne $31b7			bne 	_IFDILoop 					; do it 24 times
.31c0	7a		ply				ply
.31c1	ad e1 06	lda $06e1			lda 	IFNewSign 					; set sign of result.
.31c4	29 40		and #$40			and 	#IFSign
.31c6	85 17		sta $17				sta 	IFRTemp+IExp
.31c8	18		clc				clc 								; is okay.
.31c9	60		rts				rts
.31ca					_IFDIDivZero:
.31ca	38		sec				sec
.31cb	60		rts				rts
.31cc					IFDCopyRXToRTemp:
.31cc	b5 00		lda $00,x			lda 	IM0,x
.31ce	85 14		sta $14				sta 	IFRTemp+IM0
.31d0	b5 01		lda $01,x			lda 	IM1,x
.31d2	85 15		sta $15				sta 	IFRTemp+IM1
.31d4	b5 02		lda $02,x			lda 	IM2,x
.31d6	85 16		sta $16				sta 	IFRTemp+IM2
.31d8	b5 03		lda $03,x			lda 	IExp,x
.31da	85 17		sta $17				sta 	IFRTemp+IExp
.31dc	60		rts				rts
.31dd					IFDShiftSTempS1Left:
.31dd	a2 14		ldx #$14			ldx 	#IFRTemp
.31df	20 48 36	jsr $3648			jsr 	IFloatShiftLeft
.31e2	ae df 06	ldx $06df			ldx 	IFTarget
.31e5	20 49 36	jsr $3649			jsr 	IFloatRotateLeft
.31e8	60		rts				rts
.31e9					IFDTrySubtract:
.31e9	ae df 06	ldx $06df			ldx 	IFTarget 					; s1 = Rx
.31ec	38		sec				sec 								; subtract, saving the results on the stack.
.31ed	b5 00		lda $00,x			lda 	IM0,x
.31ef	e5 08		sbc $08				sbc 	IFR0+IM0
.31f1	48		pha				pha
.31f2	b5 01		lda $01,x			lda 	IM1,x
.31f4	e5 09		sbc $09				sbc 	IFR0+IM1
.31f6	48		pha				pha
.31f7	b5 02		lda $02,x			lda 	IM2,x
.31f9	e5 0a		sbc $0a				sbc 	IFR0+IM2
.31fb	b0 03		bcs $3200			bcs 	_IFDCanSubtract
.31fd	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.31fe	68		pla				pla
.31ff	60		rts				rts
.3200					_IFDCanSubtract:
.3200	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.3202	68		pla				pla
.3203	95 01		sta $01,x			sta 	IM1,x
.3205	68		pla				pla
.3206	95 00		sta $00,x			sta 	IM0,x
.3208	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.320a	d0 06		bne $3212			bne 	_IFDCSExit
.320c	e6 15		inc $15				inc 	IFRTemp+IM1
.320e	d0 02		bne $3212			bne 	_IFDCSExit
.3210	e6 16		inc $16				inc 	IFRTemp+IM2
.3212					_IFDCSExit:
.3212	60		rts				rts
.3213					IFloatBitwiseAnd:
.3213	5a		phy				phy
.3214	20 58 32	jsr $3258			jsr 	IFPreProcessBitwise 		; set up everything.
.3217	d0 0f		bne $3228			bne 	_IFBAExit
.3219					_IFBALoop:
.3219	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.321c	35 00		and $00,x			and 	IM0,x
.321e	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3221	e8		inx				inx
.3222	c8		iny				iny
.3223	c0 03		cpy #$03			cpy 	#3
.3225	d0 f2		bne $3219			bne 	_IFBALoop
.3227	18		clc				clc
.3228					_IFBAExit:
.3228	7a		ply				ply
.3229	60		rts				rts
.322a					IFloatBitwiseOr:
.322a	5a		phy				phy
.322b	20 58 32	jsr $3258			jsr 	IFPreProcessBitwise 		; set up everything.
.322e	d0 0f		bne $323f			bne 	_IFBAExit
.3230					_IFBALoop:
.3230	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3233	15 00		ora $00,x			ora 	IM0,x
.3235	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3238	e8		inx				inx
.3239	c8		iny				iny
.323a	c0 03		cpy #$03			cpy 	#3
.323c	d0 f2		bne $3230			bne 	_IFBALoop
.323e	18		clc				clc
.323f					_IFBAExit:
.323f	7a		ply				ply
.3240	60		rts				rts
.3241					IFloatBitwiseXor:
.3241	5a		phy				phy
.3242	20 58 32	jsr $3258			jsr 	IFPreProcessBitwise 		; set up everything.
.3245	d0 0f		bne $3256			bne 	_IFBAExit
.3247					_IFBALoop:
.3247	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.324a	55 00		eor $00,x			eor 	IM0,x
.324c	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.324f	e8		inx				inx
.3250	c8		iny				iny
.3251	c0 03		cpy #$03			cpy 	#3
.3253	d0 f2		bne $3247			bne 	_IFBALoop
.3255	18		clc				clc
.3256					_IFBAExit:
.3256	7a		ply				ply
.3257	60		rts				rts
.3258					IFPreProcessBitwise:
.3258	a0 00		ldy #$00			ldy 	#0 							; set index.
.325a	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.325c	15 03		ora $03,x			ora 	IExp,x
.325e	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.3260	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.3262	38		sec				sec 								; carry set just in cases.
.3263	60		rts				rts
.3264					IFloatAbsoluteR0:
.3264	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.3266	29 bf		and #$bf			and 	#IFSign ^ 255
.3268	85 0b		sta $0b				sta 	IFR0+IExp
.326a	18		clc				clc
.326b	60		rts				rts
.326c					IFloatSquareRootR0:
.326c	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.326e	20 1a 36	jsr $361a			jsr 	IFloatCheckZero
.3271	f0 2e		beq $32a1			beq 	_IFSRZero
.3273	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.3275	29 40		and #$40			and 	#IFSign
.3277	d0 2f		bne $32a8			bne 	_IFSRFail
.3279	20 58 36	jsr $3658			jsr 	IFloatNormalise 			; it will work better !
.327c	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.327e	20 c3 35	jsr $35c3			jsr 	IFloatCopyToRegister
.3281	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.3283	20 72 31	jsr $3172			jsr 	IFMSignExtend 				; sign extended version of the exponent
.3286	18		clc				clc
.3287	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.3289	85 0b		sta $0b				sta 	IFR0+IExp
.328b	4a		lsr a				lsr 	a 							; which we can halve.
.328c	38		sec				sec 								; convert back
.328d	e9 17		sbc #$17			sbc 	#23
.328f	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.3291	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.3293	20 aa 32	jsr $32aa			jsr 	_IFSRNewton
.3296	20 aa 32	jsr $32aa			jsr 	_IFSRNewton
.3299	20 aa 32	jsr $32aa			jsr 	_IFSRNewton
.329c	20 aa 32	jsr $32aa			jsr 	_IFSRNewton
.329f	18		clc				clc
.32a0	60		rts				rts
.32a1					_IFSRZero:
.32a1	a2 08		ldx #$08			ldx 	#IFR0
.32a3	20 21 36	jsr $3621			jsr 	IFloatSetZero
.32a6	18		clc				clc
.32a7	60		rts				rts
.32a8					_IFSRFail:
.32a8	38		sec				sec
.32a9	60		rts				rts
.32aa					_IFSRNewton:
.32aa	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.32ac	20 70 35	jsr $3570			jsr 	IFloatPushRx
.32af	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.32b1	20 70 35	jsr $3570			jsr 	IFloatPushRx
.32b4	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.32b6	20 45 33	jsr $3345			jsr 	IFloatDivideFloat
.32b9	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.32bb	20 91 35	jsr $3591			jsr 	IFloatPullRx
.32be	20 19 30	jsr $3019			jsr 	IFloatAdd 					; now guess + original/guess
.32c1	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.32c3	20 50 36	jsr $3650			jsr 	IFloatShiftRight
.32c6	a2 0c		ldx #$0c			ldx 	#IFR1
.32c8	20 91 35	jsr $3591			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.32cb	60		rts				rts
.32cc					IFloatFractionalR0:
.32cc	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.32ce	29 3f		and #$3f			and 	#IFXMask
.32d0	f0 17		beq $32e9			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.32d2	20 64 32	jsr $3264			jsr 	IFloatAbsoluteR0 			; absolute value R0
.32d5	a2 08		ldx #$08			ldx 	#IFR0
.32d7	20 58 36	jsr $3658			jsr 	IFloatNormalise 			; normalise R0
.32da	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.32dc	20 c3 35	jsr $35c3			jsr 	IFloatCopyToRegister
.32df	20 22 33	jsr $3322			jsr 	IFloatIntegerR0 			; take integer part of R0
.32e2	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.32e4	20 12 30	jsr $3012			jsr 	IFloatSubtract
.32e7	80 05		bra $32ee			bra 	_FIPExit
.32e9					_FIPZero:
.32e9	a2 08		ldx #$08			ldx 	#IFR0
.32eb	20 21 36	jsr $3621			jsr 	IFloatSetZero
.32ee					_FIPExit:
.32ee	18		clc				clc
.32ef	60		rts				rts
.32f0					IFloatCompare:
.32f0	20 12 30	jsr $3012			jsr 	IFloatSubtract 				; subtract R0 from RX.
.32f3	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.32f5	05 0b		ora $0b				ora 	IFR0+IExp
.32f7	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.32f9	29 3f		and #$3f			and 	#IFXMask
.32fb	d0 19		bne $3316			bne 	_IFCNonInteger
.32fd	20 1a 36	jsr $361a			jsr 	IFloatCheckZero 			; check if zero
.3300	f0 0f		beq $3311			beq 	_IFCZero
.3302					_IFCReturnSign:
.3302	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.3304	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.3306	48		pha				pha
.3307	a9 01		lda #$01			lda 	#1
.3309	20 23 36	jsr $3623			jsr 	IFloatSetByte 				; return to +1
.330c	68		pla				pla 								; sign bit back
.330d	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.330f	18		clc				clc
.3310	60		rts				rts
.3311					_IFCZero:
.3311	20 21 36	jsr $3621			jsr 	IFloatSetZero
.3314	18		clc				clc
.3315	60		rts				rts
.3316					_IFCNonInteger:
.3316	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.3318	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.331a	05 09		ora $09				ora 	IFR0+IM1
.331c	05 0a		ora $0a				ora 	IFR0+IM2
.331e	f0 f1		beq $3311			beq 	_IFCZero 					; near enough !
.3320	80 e0		bra $3302			bra 	_IFCReturnSign 				; return the sign of the difference.
.3322					IFloatIntegerR0:
.3322	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.3324	29 3f		and #$3f			and 	#IFXMask
.3326	f0 1b		beq $3343			beq 	_FIPExit 					; if so do nothing
.3328	a2 08		ldx #$08			ldx 	#IFR0
.332a	20 58 36	jsr $3658			jsr 	IFloatNormalise 			; normalise
.332d	20 1a 36	jsr $361a			jsr 	IFloatCheckZero 			; is it zero ?
.3330	f0 0e		beq $3340			beq 	_FIPZero 					; if so return zero.
.3332					_FIPShift:
.3332	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.3334	29 20		and #$20			and 	#$20 						; still -ve
.3336	f0 0b		beq $3343			beq 	_FIPExit
.3338	20 50 36	jsr $3650			jsr 	IFloatShiftRight 			; shift mantissa right
.333b	20 7a 36	jsr $367a			jsr 	IFloatIncExponent 			; bump exponent
.333e	80 f2		bra $3332			bra 	_FIPShift
.3340					_FIPZero:
.3340	20 21 36	jsr $3621			jsr 	IFloatSetZero
.3343					_FIPExit:
.3343	18		clc				clc
.3344	60		rts				rts
.3345					IFloatDivideFloat:
.3345	8e df 06	stx $06df			stx 	IFTarget  					; this is s1, s0 = R0
.3348	20 7b 31	jsr $317b			jsr 	IFCalculateNewSign 			; calculate sign of result
.334b	20 58 36	jsr $3658			jsr 	IFloatNormalise 			; normalise RX
.334e	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.3350	20 58 36	jsr $3658			jsr 	IFloatNormalise
.3353	20 1a 36	jsr $361a			jsr 	IFloatCheckZero
.3356	f0 56		beq $33ae			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.3358	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.335a	20 72 31	jsr $3172			jsr 	IFMSignExtend
.335d	8d e0 06	sta $06e0			sta 	IFNewExponent
.3360	ae df 06	ldx $06df			ldx 	IFTarget 					; calculate s1.exponent
.3363	b5 03		lda $03,x			lda 	IExp,x
.3365	20 72 31	jsr $3172			jsr 	IFMSignExtend
.3368	38		sec				sec
.3369	ed e0 06	sbc $06e0			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.336c	38		sec				sec
.336d	e9 17		sbc #$17			sbc 	#23
.336f	8d e0 06	sta $06e0			sta 	IFNewExponent
.3372	20 b0 33	jsr $33b0			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.3375	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.3377	10 08		bpl $3381			bpl 	_IFDFNoShiftResult
.3379	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.337b	20 50 36	jsr $3650			jsr 	IFloatShiftRight
.337e	ee e0 06	inc $06e0			inc 	IFNewExponent
.3381					_IFDFNoShiftResult:
.3381	ad e0 06	lda $06e0			lda 	IFNewExponent 				; underflow/overflow check.
.3384	30 06		bmi $338c			bmi 	_IFDFCheckUnderflow
.3386	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.3388	b0 24		bcs $33ae			bcs 	_IFDFDivZero
.338a	80 11		bra $339d			bra		_IFDFExit
.338c					_IFDFCheckUnderflow:
.338c	ad e0 06	lda $06e0			lda 	IFNewExponent 				; shift into a legal exponent.
.338f	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.3391	b0 0a		bcs $339d			bcs 	_IFDFExit
.3393	ee e0 06	inc $06e0			inc 	IFNewExponent
.3396	a2 14		ldx #$14			ldx 	#IFRTemp
.3398	20 50 36	jsr $3650			jsr 	IFloatShiftRight
.339b	80 ef		bra $338c			bra 	_IFDFCheckUnderflow
.339d					_IFDFExit:
.339d	ad e0 06	lda $06e0			lda 	IFNewExponent 				; combine exponent and sign.
.33a0	29 3f		and #$3f			and 	#IFXMask
.33a2	0d e1 06	ora $06e1			ora 	IFNewSign
.33a5	85 17		sta $17				sta 	IFRTemp+IExp
.33a7	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.33a9	20 b2 35	jsr $35b2			jsr 	IFloatCopyFromRegister
.33ac	18		clc				clc
.33ad	60		rts				rts
.33ae					_IFDFDivZero:
.33ae	38		sec				sec
.33af	60		rts				rts
.33b0					IFloatDivideSupport:
.33b0	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.33b2	20 21 36	jsr $3621			jsr 	IFloatSetZero
.33b5	5a		phy				phy 								; main division loop x 23
.33b6	a0 17		ldy #$17			ldy 	#23
.33b8					_IFDSLoop:
.33b8	20 e9 31	jsr $31e9			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.33bb	20 dd 31	jsr $31dd			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.33be	88		dey				dey
.33bf	d0 f7		bne $33b8			bne 	_IFDSLoop 					; do it 24 times
.33c1	7a		ply				ply
.33c2	60		rts				rts
.33c3					IFloatIntegerToStringR0:
.33c3	8d e2 06	sta $06e2			sta 	IFBase 						; save base to use.
.33c6	20 a2 36	jsr $36a2			jsr 	IFloatBufferReset			; empty buffer
.33c9	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.33cb	29 3f		and #$3f			and 	#IFXMask
.33cd	d0 1d		bne $33ec			bne 	_IFIFail
.33cf	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.33d1	20 1a 36	jsr $361a			jsr 	IFloatCheckZero
.33d4	f0 0e		beq $33e4			beq 	_IFINotNegative
.33d6	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.33d8	29 40		and #$40			and 	#IFSign
.33da	f0 08		beq $33e4			beq 	_IFINotNegative
.33dc	a9 2d		lda #$2d			lda 	#"-"						; output -
.33de	20 b1 36	jsr $36b1			jsr 	IFloatBufferWrite
.33e1	20 2c 36	jsr $362c			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.33e4					_IFINotNegative:
.33e4	20 ee 33	jsr $33ee			jsr 	_IFIRecursiveConvert 		; start converting
.33e7	20 a9 36	jsr $36a9			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.33ea	18		clc				clc
.33eb	60		rts				rts
.33ec					_IFIFail:
.33ec	38		sec				sec
.33ed	60		rts				rts
.33ee					_IFIRecursiveConvert:
.33ee	a2 0c		ldx #$0c			ldx 	#IFR1
.33f0	20 c3 35	jsr $35c3			jsr 	IFloatCopyToRegister 		; R0->R1
.33f3	a2 08		ldx #$08			ldx 	#IFR0
.33f5	ad e2 06	lda $06e2			lda 	IFBase 						; Base -> R0
.33f8	20 23 36	jsr $3623			jsr 	IFloatSetByte
.33fb	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.33fd	20 85 31	jsr $3185			jsr 	IFloatDivideInteger
.3400	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.3402	20 1a 36	jsr $361a			jsr 	IFloatCheckZero
.3405	f0 09		beq $3410			beq 	_IFIOutDigit
.3407	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.3409	48		pha				pha
.340a	20 ee 33	jsr $33ee			jsr 	_IFIRecursiveConvert 		; convert the divide result
.340d	68		pla				pla
.340e	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.3410					_IFIOutDigit:
.3410	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.3412	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.3414	90 02		bcc $3418			bcc 	_IFINotHex
.3416	69 06		adc #$06			adc 	#6
.3418					_IFINotHex:
.3418	69 30		adc #$30			adc 	#48
.341a	20 b1 36	jsr $36b1			jsr 	IFloatBufferWrite 			; write character to buffer.
.341d	60		rts				rts
.06e2					IFBase:
>06e2							.fill 	1
.341e					IFloatFloatToStringR0:
.341e	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.3420	20 70 35	jsr $3570			jsr 	IFloatPushRx
.3423	20 c3 35	jsr $35c3			jsr 	IFloatCopyToRegister
.3426	20 22 33	jsr $3322			jsr 	IFloatIntegerR0				; make R0 integer
.3429	a9 0a		lda #$0a			lda 	#10 						; base 10.
.342b	20 c3 33	jsr $33c3			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.342e	9c e3 06	stz $06e3			stz 	IFloatDecimalCount 			; zero the decimal count.
.3431	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.3433	29 3f		and #$3f			and 	#IFXMask
.3435	f0 44		beq $347b			beq 	_IFFSExit
.3437					_IFloatFracLoop:
.3437	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.3439	20 b2 35	jsr $35b2			jsr 	IFloatCopyFromRegister
.343c	20 cc 32	jsr $32cc			jsr 	IFloatFractionalR0
.343f	20 58 36	jsr $3658			jsr 	IFloatNormalise
.3442	a2 10		ldx #$10			ldx 	#IFR2
.3444	20 c3 35	jsr $35c3			jsr 	IFloatCopyToRegister 		; copy to back R2
.3447	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.3449	a9 0a		lda #$0a			lda 	#10
.344b	20 23 36	jsr $3623			jsr 	IFloatSetByte
.344e	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.3450	20 c3 30	jsr $30c3			jsr 	IFloatMultiply
.3453	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.3455	20 c3 35	jsr $35c3			jsr 	IFloatCopyToRegister
.3458	20 22 33	jsr $3322			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.345b	ad e3 06	lda $06e3			lda 	IFloatDecimalCount 			; done 3 dp, no more
.345e	c9 03		cmp #$03			cmp 	#3
.3460	f0 16		beq $3478			beq 	_IFFSExitStripZero
.3462	ad e3 06	lda $06e3			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.3465	d0 05		bne $346c			bne 	_IFloatNotFirst
.3467	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3469	20 b1 36	jsr $36b1			jsr 	IFloatBufferWrite
.346c					_IFloatNotFirst:
.346c	ee e3 06	inc $06e3			inc 	IFloatDecimalCount
.346f	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.3471	09 30		ora #$30			ora 	#"0"						; ASCII
.3473	20 b1 36	jsr $36b1			jsr 	IFloatBufferWrite 			; write to the buffer.
.3476	80 bf		bra $3437			bra 	_IFloatFracLoop
.3478					_IFFSExitStripZero:
.3478	20 c0 36	jsr $36c0			jsr 	IFloatStripTrailingZeros
.347b					_IFFSExit:
.347b	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.347d	20 91 35	jsr $3591			jsr 	IFloatPullRx
.3480	20 a9 36	jsr $36a9			jsr 	IFloatGetBufferAddress
.3483	18		clc				clc
.3484	60		rts				rts
.06e3					IFloatDecimalCount:
>06e3							.fill 	1
.3485					IFloatStringToFloatR0:
.3485	8d e4 06	sta $06e4			sta 	IFCount 					; save length and positions out.
.3488	86 20		stx $20				stx 	iTemp0
.348a	84 21		sty $21				sty 	iTemp0+1
.348c	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.348e	20 21 36	jsr $3621			jsr 	IFloatSetZero
.3491	9c e5 06	stz $06e5			stz 	IFSignFlag 					; clear the sign flag
.3494	20 21 35	jsr $3521			jsr 	IFSTFGetNext 				; get first
.3497	f0 1b		beq $34b4			beq 	_IFSTFFail 					; no character, fail.
.3499	90 10		bcc $34ab			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.349b	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.349d	d0 15		bne $34b4			bne 	_IFSTFFail
.349f	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.34a1	8d e5 06	sta $06e5			sta 	IFSignFlag
.34a4					_IFSTFLoop:
.34a4	20 21 35	jsr $3521			jsr 	IFSTFGetNext 				; get next character
.34a7	b0 0b		bcs $34b4			bcs 	_IFSTFFail 					; bad character.
.34a9	f0 11		beq $34bc			beq 	_IFSTFExit 					; end of data
.34ab					_IFSTFHaveChar:
.34ab	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.34ad	f0 08		beq $34b7			beq 	_IFSTFDecimal
.34af	20 45 35	jsr $3545			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.34b2	80 f0		bra $34a4			bra 	_IFSTFLoop 					; keep going until . or end.
.34b4					_IFSTFFail:
.34b4	38		sec				sec
.34b5	80 0d		bra $34c4			bra 	_IFSTFReturn
.34b7					_IFSTFDecimal:
.34b7	20 cc 34	jsr $34cc			jsr 	IFSTFDecimal 				; call the decimal places code.
.34ba	b0 08		bcs $34c4			bcs 	_IFSTFReturn 				; error
.34bc					_IFSTFExit:
.34bc	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.34be	0d e5 06	ora $06e5			ora 	IFSignFlag
.34c1	85 0b		sta $0b				sta 	IFR0+IExp
.34c3	18		clc				clc
.34c4					_IFSTFReturn:
.34c4	60		rts				rts
.34c5					IFloatAddDecimalToR0:
.34c5	8d e4 06	sta $06e4			sta 	IFCount 					; save it out.
.34c8	86 20		stx $20				stx 	iTemp0
.34ca	84 21		sty $21				sty 	iTemp0+1
.34cc					IFSTFDecimal:
.34cc	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.34ce	20 70 35	jsr $3570			jsr 	IFloatPushRx
.34d1	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.34d3	20 21 36	jsr $3621			jsr 	IFloatSetZero
.34d6	9c e6 06	stz $06e6			stz 	IFDecimalPlaces 			; zero DP.
.34d9					_IFSTDLoop:
.34d9	20 21 35	jsr $3521			jsr 	IFSTFGetNext 				; get next
.34dc	b0 41		bcs $351f			bcs 	_IFSTFFail2 				; bad character.
.34de	f0 11		beq $34f1			beq 	_IFSTFComplete 				; end of data, work out the result.
.34e0	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.34e2	f0 39		beq $351d			beq 	_IFSTFExit2
.34e4	20 45 35	jsr $3545			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.34e7	ee e6 06	inc $06e6			inc 	IFDecimalPlaces 			; count decimals
.34ea	ad e6 06	lda $06e6			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.34ed	c9 03		cmp #$03			cmp 	#3
.34ef	90 e8		bcc $34d9			bcc 	_IFSTDLoop
.34f1					_IFSTFComplete:
.34f1	ad e6 06	lda $06e6			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.34f4	f0 27		beq $351d			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.34f6	3a		dec a				dec 	a 							; table indexed from 1.
.34f7	0a		asl a				asl 	a
.34f8	0a		asl a				asl 	a
.34f9	aa		tax				tax
.34fa	bd 5c 35	lda $355c,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.34fd	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.34ff	bd 5d 35	lda $355d,x			lda 	TableTen+1,x
.3502	85 0d		sta $0d				sta  	IFR1+IM1
.3504	bd 5e 35	lda $355e,x			lda 	TableTen+2,x
.3507	85 0e		sta $0e				sta  	IFR1+IM2
.3509	bd 5f 35	lda $355f,x			lda 	TableTen+3,x
.350c	85 0f		sta $0f				sta  	IFR1+IExp
.350e	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.3510	20 c3 30	jsr $30c3			jsr 	IFloatMultiply
.3513	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.3515	20 91 35	jsr $3591			jsr 	IFloatPullRx
.3518	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.351a	20 19 30	jsr $3019			jsr 	IFloatAdd
.351d					_IFSTFExit2:
.351d	18		clc				clc
.351e	60		rts				rts
.351f					_IFSTFFail2:
.351f	38		sec				sec
.3520	60		rts				rts
.3521					IFSTFGetNext:
.3521	ad e4 06	lda $06e4			lda 	IFCount  					; if count is zero, return with Z set.
.3524	f0 19		beq $353f			beq 	_IFSTFReturnOk
.3526	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3528	e6 20		inc $20				inc 	iTemp0 						; point at next.
.352a	d0 02		bne $352e			bne 	_IFSTFGNNoCarry
.352c	e6 21		inc $21				inc 	iTemp0+1
.352e					_IFSTFGNNoCarry:
.352e	ce e4 06	dec $06e4			dec 	IFCount 					; dec count.
.3531	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.3533	f0 08		beq $353d			beq 	_IFSTFGOkay
.3535	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3537	90 08		bcc $3541			bcc 	_IFSTFGFail
.3539	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.353b	b0 04		bcs $3541			bcs 	_IFSTFGFail
.353d					_IFSTFGOkay:
.353d	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.353f					_IFSTFReturnOk:
.353f	18		clc				clc
.3540	60		rts				rts
.3541					_IFSTFGFail:
.3541	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3543	38		sec				sec
.3544	60		rts				rts
.3545					IFSTFAddR0:
.3545	29 0f		and #$0f			and 	#15 						; to int value
.3547	48		pha				pha 								; save it.
.3548	a9 0a		lda #$0a			lda 	#10
.354a	a2 0c		ldx #$0c			ldx 	#IFR1
.354c	20 23 36	jsr $3623			jsr 	IFloatSetByte
.354f	20 c3 30	jsr $30c3			jsr 	IFloatMultiply
.3552	68		pla				pla
.3553	a2 0c		ldx #$0c			ldx 	#IFR1
.3555	20 23 36	jsr $3623			jsr 	IFloatSetByte
.3558	20 19 30	jsr $3019			jsr 	IFloatAdd
.355b	60		rts				rts
.06e4					IFCount:
>06e4							.fill 	1
.06e5					IFSignFlag:
>06e5							.fill 	1
.06e6					IFDecimalPlaces:
>06e6							.fill 	1
.355c					TableTen:
>355c	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3560	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>3564	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3568	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>356c	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.3570					IFloatPushRx:
.3570	5a		phy				phy
.3571	ac e7 06	ldy $06e7			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.3574	b5 00		lda $00,x			lda 	IM0,x
.3576	99 e8 06	sta $06e8,y			sta 	IFStack,y
.3579	b5 01		lda $01,x			lda 	IM1,x
.357b	99 e9 06	sta $06e9,y			sta 	IFStack+1,y
.357e	b5 02		lda $02,x			lda 	IM2,x
.3580	99 ea 06	sta $06ea,y			sta 	IFStack+2,y
.3583	b5 03		lda $03,x			lda 	IExp,x
.3585	99 eb 06	sta $06eb,y			sta 	IFStack+3,y
.3588	c8		iny				iny
.3589	c8		iny				iny
.358a	c8		iny				iny
.358b	c8		iny				iny
.358c	8c e7 06	sty $06e7			sty 	IFStackIndex 				; update SP
.358f	7a		ply				ply
.3590	60		rts				rts
.3591					IFloatPullRx:
.3591	5a		phy				phy
.3592	ac e7 06	ldy $06e7			ldy 	IFStackIndex	 			; decrement SP
.3595	88		dey				dey
.3596	88		dey				dey
.3597	88		dey				dey
.3598	88		dey				dey
.3599	b9 e8 06	lda $06e8,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.359c	95 00		sta $00,x			sta 	IM0,x
.359e	b9 e9 06	lda $06e9,y			lda 	IFStack+1,y
.35a1	95 01		sta $01,x			sta 	IM1,x
.35a3	b9 ea 06	lda $06ea,y			lda 	IFStack+2,y
.35a6	95 02		sta $02,x			sta 	IM2,x
.35a8	b9 eb 06	lda $06eb,y			lda 	IFStack+3,y
.35ab	95 03		sta $03,x			sta 	IExp,x
.35ad	8c e7 06	sty $06e7			sty 	IFStackIndex 				; update SP
.35b0	7a		ply				ply
.35b1	60		rts				rts
.06e7					IFStackIndex:
>06e7							.fill 	1
.06e8					IFStack:
>06e8							.fill 	16*4
.35b2					IFloatCopyFromRegister:
.35b2	b5 00		lda $00,x			lda 	0,x
.35b4	85 08		sta $08				sta 	IFR0
.35b6	b5 01		lda $01,x			lda 	1,x
.35b8	85 09		sta $09				sta 	IFR0+1
.35ba	b5 02		lda $02,x			lda 	2,x
.35bc	85 0a		sta $0a				sta 	IFR0+2
.35be	b5 03		lda $03,x			lda 	3,x
.35c0	85 0b		sta $0b				sta 	IFR0+3
.35c2	60		rts				rts
.35c3					IFloatCopyToRegister:
.35c3	a5 08		lda $08				lda 	IFR0
.35c5	95 00		sta $00,x			sta 	0,x
.35c7	a5 09		lda $09				lda 	IFR0+1
.35c9	95 01		sta $01,x			sta 	1,x
.35cb	a5 0a		lda $0a				lda 	IFR0+2
.35cd	95 02		sta $02,x			sta 	2,x
.35cf	a5 0b		lda $0b				lda 	IFR0+3
.35d1	95 03		sta $03,x			sta 	3,x
.35d3	60		rts				rts
.35d4					IFloatLoadInline:
.35d4	68		pla				pla 								; pop address off to iTemp0
.35d5	85 20		sta $20				sta 	iTemp0
.35d7	68		pla				pla
.35d8	85 21		sta $21				sta 	iTemp0+1
.35da	a0 01		ldy #$01			ldy 	#1
.35dc	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.35de	95 00		sta $00,x			sta 	0,x
.35e0	c8		iny				iny
.35e1	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.35e3	95 01		sta $01,x			sta 	1,x
.35e5	c8		iny				iny
.35e6	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.35e8	95 02		sta $02,x			sta 	2,x
.35ea	c8		iny				iny
.35eb	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.35ed	95 03		sta $03,x			sta 	3,x
.35ef	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.35f0	a5 20		lda $20				lda 	iTemp0
.35f2	69 05		adc #$05			adc 	#5
.35f4	85 20		sta $20				sta 	iTemp0
.35f6	90 02		bcc $35fa			bcc 	_IFLINoCarry
.35f8	e6 21		inc $21				inc 	iTemp0+1
.35fa					_IFLINoCarry:
.35fa	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.35fd					IFloatMultiply8BitRx:
.35fd	5a		phy		        phy
.35fe	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3600	a4 08		ldy $08		        ldy     IFR0+IM0
.3602	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.3603	85 08		sta $08		        sta     IFR0+IM0
.3605	84 09		sty $09		        sty     IFR0+IM1
.3607	a9 00		lda #$00	        lda     #0
.3609	a0 08		ldy #$08	        ldy     #8
.360b					_IFMLoop:
.360b	90 03		bcc $3610	        bcc     _IFMNoAdd
.360d	18		clc		        clc
.360e	65 09		adc $09		        adc     IFR0+IM1
.3610					_IFMNoAdd:
.3610	6a		ror a		        ror     a
.3611	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.3613	88		dey		        dey
.3614	d0 f5		bne $360b	        bne     _IFMLoop
.3616	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3618	7a		ply		        ply
.3619	60		rts		        rts
.361a					IFloatCheckZero:
.361a	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.361c	15 01		ora $01,x			ora 	IM1,x
.361e	15 02		ora $02,x			ora 	IM2,x
.3620	60		rts				rts
.3621					IFloatSetZero:
.3621	a9 00		lda #$00			lda 	#0
.3623					IFloatSetByte:
.3623	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3625	74 01		stz $01,x			stz 	IM1,x
.3627	74 02		stz $02,x			stz 	IM2,x
.3629	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.362b	60		rts				rts
.362c					IFloatNegate:
.362c	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.362e	49 40		eor #$40			eor 	#IFSign
.3630	95 03		sta $03,x			sta 	IExp,x
.3632	18		clc				clc
.3633	60		rts				rts
.3634					IFloatMantissaNegate:
.3634	38		sec				sec 								; when you want a real 2's complement negative value.
.3635	a9 00		lda #$00			lda 	#0
.3637	f5 00		sbc $00,x			sbc 	IM0,x
.3639	95 00		sta $00,x			sta 	IM0,x
.363b	a9 00		lda #$00			lda 	#0
.363d	f5 01		sbc $01,x			sbc 	IM1,x
.363f	95 01		sta $01,x			sta 	IM1,x
.3641	a9 00		lda #$00			lda 	#0
.3643	f5 02		sbc $02,x			sbc 	IM2,x
.3645	95 02		sta $02,x			sta 	IM2,x
.3647	60		rts				rts
.3648					IFloatShiftLeft:
.3648	18		clc				clc
.3649					IFloatRotateLeft:
.3649	36 00		rol $00,x			rol 	IM0,x
.364b	36 01		rol $01,x			rol 	IM1,x
.364d	36 02		rol $02,x			rol 	IM2,x
.364f	60		rts				rts
.3650					IFloatShiftRight:
.3650	18		clc				clc
.3651					IFloatRotateRight:
.3651	76 02		ror $02,x			ror 	IM2,x
.3653	76 01		ror $01,x			ror 	IM1,x
.3655	76 00		ror $00,x			ror 	IM0,x
.3657	60		rts				rts
.3658					IFloatNormalise:
.3658	20 1a 36	jsr $361a			jsr 	IFloatCheckZero 			; is it zero
.365b	f0 18		beq $3675			beq 	_IFNExitZero 				; if so exit
.365d					_IFNLoop:
.365d	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.365f	29 c0		and #$c0			and 	#$C0
.3661	c9 40		cmp #$40			cmp 	#$40
.3663	f0 13		beq $3678			beq 	_IFNExitOkay 				; if so , then we are done.
.3665	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3667	29 3f		and #$3f			and 	#$3F
.3669	c9 20		cmp #$20			cmp 	#$20
.366b	f0 0b		beq $3678			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.366d	20 8e 36	jsr $368e			jsr 	IFloatDecExponent
.3670	20 48 36	jsr $3648			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3673	80 e8		bra $365d			bra 	_IFNLoop
.3675					_IFNExitZero:
.3675	20 21 36	jsr $3621			jsr 	IFloatSetZero 				; set the result to zero
.3678					_IFNExitOkay:
.3678	18		clc				clc  								; return with CC.
.3679	60		rts				rts
.367a					IFloatIncExponent:
.367a	b5 03		lda $03,x			lda 	IExp,x
.367c	48		pha				pha
.367d	29 c0		and #$c0			and 	#$C0
.367f	8d 28 07	sta $0728			sta 	IFXTemp
.3682	68		pla				pla
.3683	1a		inc a				inc 	a
.3684	29 3f		and #$3f			and 	#$3F
.3686	48		pha				pha
.3687	0d 28 07	ora $0728			ora 	IFXTemp
.368a	95 03		sta $03,x			sta 	IExp,x
.368c	68		pla				pla
.368d	60		rts				rts
.368e					IFloatDecExponent:
.368e	b5 03		lda $03,x			lda 	IExp,x
.3690	48		pha				pha
.3691	29 c0		and #$c0			and 	#$C0
.3693	8d 28 07	sta $0728			sta 	IFXTemp
.3696	68		pla				pla
.3697	3a		dec a				dec 	a
.3698	29 3f		and #$3f			and 	#$3F
.369a	48		pha				pha
.369b	0d 28 07	ora $0728			ora 	IFXTemp
.369e	95 03		sta $03,x			sta 	IExp,x
.36a0	68		pla				pla
.36a1	60		rts				rts
.0728					IFXTemp:
>0728							.fill 	1
.36a2					IFloatBufferReset:
.36a2	9c 29 07	stz $0729			stz 	IFBufferCount
.36a5	9c 2a 07	stz $072a			stz 	IFBuffer
.36a8	60		rts				rts
.36a9					IFloatGetBufferAddress:
.36a9	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.36ab	a2 29		ldx #$29			ldx 	#(IFBufferCount & $FF)
.36ad	ad 29 07	lda $0729			lda 	IFBufferCount
.36b0	60		rts				rts
.36b1					IFloatBufferWrite:
.36b1	da		phx				phx
.36b2	ae 29 07	ldx $0729			ldx 	IFBufferCount
.36b5	9d 2a 07	sta $072a,x			sta 	IFBuffer,x
.36b8	9e 2b 07	stz $072b,x			stz 	IFBuffer+1,x
.36bb	ee 29 07	inc $0729			inc 	IFBufferCount
.36be	fa		plx				plx
.36bf	60		rts				rts
.36c0					IFloatStripTrailingZeros:
.36c0	ae 29 07	ldx $0729			ldx 	IFBufferCount
.36c3	bd 29 07	lda $0729,x			lda 	IFBuffer-1,x
.36c6	c9 30		cmp #$30			cmp		#"0"
.36c8	d0 0f		bne $36d9			bne 	_IFSTExit
.36ca	bd 28 07	lda $0728,x			lda 	IFBuffer-2,x
.36cd	c9 2e		cmp #$2e			cmp 	#"."
.36cf	f0 08		beq $36d9			beq 	_IFSTExit
.36d1	ce 29 07	dec $0729			dec 	IFBufferCount
.36d4	9e 29 07	stz $0729,x			stz 	IFBuffer-1,x
.36d7	80 e7		bra $36c0			bra 	IFloatStripTrailingZeros
.36d9					_IFSTExit:
.36d9	60		rts				rts
.0729					IFBufferCount:
>0729							.fill 	1
.072a					IFBuffer:
>072a							.fill 	25
.36da					IFloatCheckRange:
.36da	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.36dc	09 40		ora #$40			ora 	#IFSign
.36de	85 0b		sta $0b				sta 	IFR0+IExp
.36e0	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.36e2	20 19 30	jsr $3019			jsr 	IFloatAdd 					; add allowed to error.
.36e5	a2 08		ldx #$08			ldx 	#IFR0
.36e7	20 1a 36	jsr $361a			jsr 	IFloatCheckZero 			; error if < 0
.36ea	f0 06		beq $36f2			beq 	_IFAOkay
.36ec	a5 0b		lda $0b				lda 	IFR0+IExp
.36ee	29 40		and #$40			and 	#IFSign
.36f0	d0 01		bne $36f3			bne 	_IFAFail
.36f2					_IFAOkay:
.36f2	60		rts				rts
.36f3					_IFAFail:
.36f3	38		sec				sec
.36f4	68		pla				pla 								; get address - 2
.36f5	e9 02		sbc #$02			sbc 	#2
.36f7	aa		tax				tax
.36f8	68		pla				pla
.36f9	e9 00		sbc #$00			sbc 	#0
.36fb	a8		tay				tay
.36fc	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.36fe					_IFAStop:
>36fe	db						.byte 	$DB 						; display an error AA ADR ADR
.36ff	80 fd		bra $36fe			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
