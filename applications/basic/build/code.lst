
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Wed Jul  5 20:42:24 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorSize:
>0344							.fill 	2
.0346					sectorCount:
>0346							.fill 	2
.0348					currentSector:
>0348							.fill 	2
.034a					successFlag:
>034a							.fill 	1
.034b					sectorHeader:
.034b					shFirstNext:
>034b							.fill 	1
.034c					shContinue:
>034c							.fill 	1
.034d					shDataSize:
>034d							.fill 	2
.034f					shFileSize:
>034f							.fill 	2
>0351							.fill 	10
.035b					shNameLength:
>035b							.fill 	1
.035c					shNameText:
>035c							.fill 	15
.036b					shFileSizeCopy:
>036b							.fill 	2
.036d					notFirstSector:
>036d							.fill 	1
.036e					sectorCapacity:
>036e							.fill 	2
.0370					fileRemainingSize:
>0370							.fill 	2
.0372					bytesToWrite:
>0372							.fill 	2
>0374							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 6d 21	jsr $216d			jsr 	PGMSetBaseAddress
.1007	20 14 2e	jsr $2e14			jsr 	IFInitialise 				; setup math library
.100a	4c 7b 14	jmp $147b			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="I"					AM_ABSOLUTEIX	= 'I' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d0					AM_IND 		= ('P'|AM_ZPAGE) 				; lda (nn)
=$d1					AM_INDX		= ('Q'|AM_ZPAGE) 				; lda (nn,x)
=$d2					AM_INDY		= ('R'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f
=$8d90					PR_RENUMBER = $8d90

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.100d					Command_AssemblerStart:
.100d					_CALoop:
.100d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.100f	c8		iny				iny 								; consume it.
.1010	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.1012	f0 15		beq $1029			beq 	_CALabel
.1014	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.1016	f0 30		beq $1048			beq 	_CAExit
.1018	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.101a	f0 f1		beq $100d			beq 	_CALoop
.101c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; end of line.
.101e	f0 14		beq $1034			beq 	_CAEnd
.1020	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.1022	c9 40		cmp #$40			cmp 	#$40
.1024	f0 08		beq $102e			beq 	_CAOpcode
.1026	4c b1 27	jmp $27b1		jmp	ErrorV_syntax
.1029					_CALabel:
.1029	20 5d 10	jsr $105d			jsr 	ASLabel 					; handle a label
.102c	80 df		bra $100d			bra 	_CALoop
.102e					_CAOpcode:
.102e	88		dey				dey 								; get it back
.102f	20 4c 10	jsr $104c			jsr 	ASOpcode 					; assemble that opcode.
.1032	80 d9		bra $100d			bra 	_CALoop
.1034	18		clc		_CAEnd:	clc 								; next line
.1035	a0 03		ldy #$03			ldy 	#3 							; tokenised code position.
.1037	b2 18		lda ($18)			lda 	(codePtr)
.1039	65 18		adc $18				adc 	codePtr
.103b	85 18		sta $18				sta 	codePtr
.103d	90 02		bcc $1041			bcc 	_CANoCarry
.103f	e6 19		inc $19				inc 	codePtr+1
.1041					_CANoCarry:
.1041	b2 18		lda ($18)			lda 	(codePtr) 					; code present
.1043	d0 c8		bne $100d			bne 	_CALoop 					; go round again
.1045	4c e7 15	jmp $15e7			jmp 	Command_END 				; do END.
.1048					_CAExit:
.1048	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/calcopcode.asm

.1049					ASCalculateOpcodeHash:
.1049	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/findmode.asm

.104a					ASIdentifyAddressMode:
.104a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/generate.asm

.104b					ASGenerateCode:
.104b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/instruction.asm

.104c					ASOpcode:
>104c	db						.byte 	$DB
.104d	20 49 10	jsr $1049			jsr 	ASCalculateOpcodeHash 		; calculate the opcode hash.
.1050	8d 03 05	sta $0503			sta 	ASCurrOpcode
.1053	20 4a 10	jsr $104a			jsr 	ASIdentifyAddressMode 		; identify the address mode type.
.1056	8d 04 05	sta $0504			sta 	ASCurrMode
.1059	20 4b 10	jsr $104b			jsr 	ASGenerateCode 				; search and generate appropriate code.
.105c	60		rts				rts
.0503					ASCurrOpcode:
>0503							.fill 	1
.0504					ASCurrMode:
>0504							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.105d					ASLabel:
.105d	20 4a 18	jsr $184a			jsr 	EXPTermR0 					; get term
.1060	90 1b		bcc $107d			bcc 	_ALError 					; must be a reference term.
.1062	24 0b		bit $0b				bit 	IFR0+IExp	 				; string reference ?
.1064	30 17		bmi $107d			bmi 	_ALError
.1066	5a		phy				phy
.1067	ad b2 06	lda $06b2			lda 	('P'-'A')*4 + FastVariables	; copy P to variable
.106a	92 08		sta ($08)			sta 	(IFR0+IM0)
.106c	a0 01		ldy #$01			ldy 	#1
.106e	ad b3 06	lda $06b3			lda 	('P'-'A')*4 + FastVariables+1
.1071	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.1073	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.1075	c8		iny				iny
.1076	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.1078	c8		iny				iny
.1079	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.107b	7a		ply				ply
.107c	60		rts				rts
.107d					_ALError:
.107d	4c b1 27	jmp $27b1		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1080					Command_ASSERT:
.1080	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 				; get a number to assert
.1083	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1085	20 20 34	jsr $3420			jsr 	IFloatCheckZero
.1088	f0 01		beq $108b			beq 	_CAFail 					; if so, the assert fails.
.108a	60		rts				rts
.108b					_CAFail:
.108b	4c 07 28	jmp $2807		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.108e					Command_CLEAR:
.108e	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1090	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1092	f0 14		beq $10a8			beq 	_CLNoParam
.1094	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1096	f0 10		beq $10a8			beq 	_CLNoParam
.1098	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; address for CLEAR
.109b	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.109d	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.109f	b0 0b		bcs $10ac			bcs 	_CLMemory
.10a1	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.10a3	90 07		bcc $10ac			bcc 	_CLMemory
.10a5	8d 1d 05	sta $051d			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.10a8					_CLNoParam:
.10a8	20 af 10	jsr $10af			jsr 	ClearCode
.10ab	60		rts				rts
.10ac					_CLMemory:
.10ac	4c a1 28	jmp $28a1		jmp	ErrorV_memory
.10af					ClearCode:
.10af	20 80 21	jsr $2180			jsr 	PGMEndProgram 				; end program => zTemp0
.10b2	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.10b4	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.10b6	1a		inc a				inc 	a
.10b7	85 2b		sta $2b				sta 	freeMemory+1
.10b9	20 b3 2d	jsr $2db3			jsr 	VARClearHashTables
.10bc	ad 1d 05	lda $051d			lda 	PGMEndMemoryHigh
.10bf	20 f8 29	jsr $29f8			jsr 	StackReset 					; page passed on in A
.10c2	20 57 2a	jsr $2a57			jsr 	StringSystemInitialise
.10c5	20 1c 27	jsr $271c			jsr 	ScanProcedures
.10c8	20 49 15	jsr $1549			jsr 	Command_RESTORE
.10cb	60		rts				rts
.10cc					AllocateMemory:
.10cc	5a		phy				phy 								; save Y
.10cd	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.10cf	5a		phy				phy
.10d0	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.10d2	5a		phy				phy
.10d3	a8		tay				tay 								; count is now in XY
.10d4					_AllocateLoop:
.10d4	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.10d6	d0 04		bne $10dc			bne 	_AllocateOne
.10d8	c0 00		cpy #$00			cpy 	#0
.10da	f0 15		beq $10f1			beq 	_AllocateExit
.10dc					_AllocateOne:
.10dc	a9 00		lda #$00			lda 	#0 							; zero byte
.10de	92 2a		sta ($2a)			sta 	(freeMemory)
.10e0	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.10e2	d0 05		bne $10e9			bne 	_AllocateSkipCarry
.10e4	e6 2b		inc $2b				inc 	freeMemory+1
.10e6	20 f5 10	jsr $10f5			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.10e9					_AllocateSkipCarry:
.10e9	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.10eb	d0 01		bne $10ee			bne 	_AllocateSkipBorrow
.10ed	ca		dex				dex
.10ee					_AllocateSkipBorrow:
.10ee	88		dey				dey
.10ef	80 e3		bra $10d4			bra 	_AllocateLoop
.10f1					_AllocateExit:
.10f1	fa		plx				plx 								; restore address
.10f2	68		pla				pla
.10f3	7a		ply				ply 								; restore Y
.10f4	60		rts				rts
.10f5					ClearCheckMemory:
.10f5	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.10f7	1a		inc a				inc 	a 							; spacing 2 pages
.10f8	1a		inc a				inc 	a
.10f9	cd 25 06	cmp $0625			cmp 	stringMemory+1 				; problems if hit string memory
.10fc	b0 01		bcs $10ff			bcs  	_CCMError
.10fe	60		rts				rts
.10ff					_CCMError:
.10ff	4c a1 28	jmp $28a1		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1102					CommandDIM:
.1102	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1104	29 c0		and #$c0			and 	#$C0
.1106	c9 40		cmp #$40			cmp 	#$40
.1108	d0 39		bne $1143			bne 	_CDSyntax
.110a	20 6a 2d	jsr $2d6a			jsr 	VARGetInfo 					; get information
.110d	ad 33 06	lda $0633			lda 	VARType 					; check array.
.1110	29 02		and #$02			and 	#2
.1112	f0 2f		beq $1143			beq 	_CDSyntax
.1114	20 1c 2d	jsr $2d1c			jsr 	VARFind 					; does it already exist
.1117	b0 2d		bcs $1146			bcs 	_CDExists
.1119	20 c8 2c	jsr $2cc8			jsr 	VARCreate 					; create it - returns data ptr in XA
.111c	da		phx				phx 								; save target address
.111d	48		pha				pha
.111e	ad 33 06	lda $0633			lda 	VARType 					; type ID.
.1121	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1123	20 49 11	jsr $1149			jsr 	CreateArray 				; create array to XA
.1126	84 26		sty $26				sty 	zTemp1 						; save Y
.1128	7a		ply				ply 								; restore target to zTemp0
.1129	84 24		sty $24				sty 	zTemp0
.112b	7a		ply				ply
.112c	84 25		sty $25				sty 	zTemp0+1
.112e	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.1130	a0 01		ldy #$01			ldy 	#1
.1132	8a		txa				txa
.1133	91 24		sta ($24),y			sta 	(zTemp0),y
.1135	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.1137	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 				; check )
.113a	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.113c	c8		iny				iny
.113d	c9 99		cmp #$99			cmp 	#PR_COMMA
.113f	f0 c1		beq $1102			beq 	CommandDIM
.1141	88		dey				dey
.1142	60		rts				rts
.1143					_CDSyntax:
.1143	4c b1 27	jmp $27b1		jmp	ErrorV_syntax
.1146					_CDExists:
.1146	4c 79 28	jmp $2879		jmp	ErrorV_redefine
.1149					CreateArray:
.1149	8d 05 05	sta $0505			sta 	CAType						; save type
.114c	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; get array dimension to R0
.114f	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.1151	c9 99		cmp #$99			cmp 	#PR_COMMA
.1153	f0 04		beq $1159			beq 	_CATwoDimensions
.1155	20 a5 11	jsr $11a5			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.1158	60		rts				rts
.1159					_CATwoDimensions:
.1159	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.115b	8d 07 05	sta $0507			sta 	CADim1+1
.115e	a5 08		lda $08				lda 	IFR0+IM0
.1160	8d 06 05	sta $0506			sta 	CADim1+0
.1163	20 92 29	jsr $2992			jsr 	ERRCheckComma 				; check comma
.1166	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.1169	5a		phy				phy 								; save Y position
.116a	18		clc				clc 								; allocate the outer array of pointers.
.116b	ae 07 05	ldx $0507			ldx 	CADim1+1
.116e	ad 06 05	lda $0506			lda 	CADim1
.1171	20 e4 11	jsr $11e4			jsr 	CSAAllocate 				; allocate the outer array
.1174	da		phx				phx									; save this address on the stack
.1175	48		pha				pha
.1176	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.1178	85 28		sta $28				sta 	zTemp2
.117a					_CACreateSubLoop:
.117a	38		sec				sec
.117b	20 a5 11	jsr $11a5			jsr 	CreateSingleArray 			; create data array of required size.
.117e	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1180	91 28		sta ($28),y			sta 	(zTemp2),y
.1182	8a		txa				txa
.1183	c8		iny				iny
.1184	91 28		sta ($28),y			sta 	(zTemp2),y
.1186	18		clc				clc  								; next slot.
.1187	a5 28		lda $28				lda 	zTemp2
.1189	69 02		adc #$02			adc 	#2
.118b	85 28		sta $28				sta 	zTemp2
.118d	90 02		bcc $1191			bcc 	_CACNoCarry
.118f	e6 29		inc $29				inc 	zTemp2+1
.1191					_CACNoCarry:
.1191	ad 06 05	lda $0506			lda 	CADim1 						; use DIM1 as a counter
.1194	d0 03		bne $1199			bne 	_CACNoBorrow
.1196	ce 07 05	dec $0507			dec 	CADim1+1
.1199					_CACNoBorrow:
.1199	ce 06 05	dec $0506			dec 	CADim1
.119c	ad 07 05	lda $0507			lda 	CADim1+1 					; but do one more.
.119f	10 d9		bpl $117a			bpl 	_CACreateSubLoop
.11a1	68		pla				pla
.11a2	fa		plx				plx
.11a3	7a		ply				ply
.11a4	60		rts				rts
.11a5					CreateSingleArray:
.11a5	5a		phy				phy
.11a6	38		sec				sec 								; allocate memory block all zeros.
.11a7	a5 08		lda $08				lda 	IFR0+IM0
.11a9	a6 09		ldx $09				ldx 	IFR0+IM1
.11ab	20 e4 11	jsr $11e4			jsr 	CSAAllocate
.11ae	ac 05 05	ldy $0505			ldy 	CAType 						; if numbers, we don't need to initialise.
.11b1	f0 2f		beq $11e2			beq 	_CSANoInit
.11b3	da		phx				phx 								; save address of new array
.11b4	48		pha				pha
.11b5	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.11b7	86 25		stx $25				stx 	zTemp0+1
.11b9	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.11bb	b1 24		lda ($24),y			lda 	(zTemp0),y
.11bd	a8		tay				tay
.11be	b2 24		lda ($24)			lda 	(zTemp0)
.11c0	aa		tax				tax
.11c1					_CSAEraseString:
.11c1	5a		phy				phy
.11c2	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.11c4	a9 80		lda #$80			lda 	#$80
.11c6	91 24		sta ($24),y			sta 	(zTemp0),y
.11c8	7a		ply				ply
.11c9	18		clc				clc 								; add 4 to next slot.
.11ca	a5 24		lda $24				lda 	zTemp0
.11cc	69 04		adc #$04			adc 	#4
.11ce	85 24		sta $24				sta 	zTemp0
.11d0	90 02		bcc $11d4			bcc 	_CSAENoCarry
.11d2	e6 25		inc $25				inc 	zTemp0+1
.11d4					_CSAENoCarry:
.11d4	e0 00		cpx #$00			cpx 	#0
.11d6	d0 01		bne $11d9			bne 	_CSANoBorrow
.11d8	88		dey				dey
.11d9					_CSANoBorrow:
.11d9	ca		dex				dex
.11da	d0 e5		bne $11c1			bne 	_CSAEraseString
.11dc	c0 00		cpy #$00			cpy 	#0
.11de	d0 e1		bne $11c1			bne 	_CSAEraseString
.11e0	68		pla				pla
.11e1	fa		plx				plx
.11e2					_CSANoInit:
.11e2	7a		ply				ply
.11e3	60		rts				rts
.11e4					CSAAllocate:
.11e4	08		php				php 								; save type flag.
.11e5	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.11e6	d0 01		bne $11e9			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.11e8	e8		inx				inx
.11e9					_CSAANoCarry:
.11e9	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.11eb	b0 2e		bcs $121b			bcs 	_CSARange
.11ed	28		plp				plp 								; restore type flag
.11ee	08		php				php 								; save it back again.
.11ef	da		phx				phx 								; save size.
.11f0	48		pha				pha
.11f1	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.11f3	90 03		bcc $11f8			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.11f5	0a		asl a				asl 	a
.11f6	26 25		rol $25				rol 	zTemp0+1
.11f8					_CSAATimes2:
.11f8	0a		asl a				asl 	a
.11f9	26 25		rol $25				rol 	zTemp0+1
.11fb	18		clc				clc
.11fc	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.11fe	90 02		bcc $1202			bcc 	_CSAANoCarry2
.1200	e6 25		inc $25				inc 	zTemp0+1
.1202					_CSAANoCarry2:
.1202	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.1204	20 cc 10	jsr $10cc			jsr 	AllocateMemory 				; allocate memory to XA
.1207	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.1209	85 24		sta $24				sta 	zTemp0
.120b	68		pla				pla  								; write element count to first 2 bytes
.120c	92 24		sta ($24)			sta 	(zTemp0)
.120e	68		pla				pla 								; msb of element count
.120f	28		plp				plp 								; CC if pointer array
.1210	b0 02		bcs $1214			bcs 	_CSAAIsData
.1212	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1214					_CSAAIsData:
.1214	a0 01		ldy #$01			ldy 	#1
.1216	91 24		sta ($24),y			sta 	(zTemp0),y
.1218	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.121a	60		rts				rts
.121b					_CSARange:
.121b	4c c2 27	jmp $27c2		jmp	ErrorV_range
.0505					CAType:
>0505							.fill 	1
.0506					CADim1:
>0506							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.121e					Command_Doke:
.121e	38		sec				sec
.121f	80 01		bra $1222			bra 	DPCommon
.1221					Command_Poke:
.1221	18		clc				clc
.1222					DPCommon:
.1222	08		php				php 								; CS if DOKE
.1223	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; address
.1226	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.1228	48		pha				pha
.1229	a5 09		lda $09				lda 	IFR0+IM1
.122b	48		pha				pha
.122c	20 92 29	jsr $2992			jsr 	ERRCheckComma 				; [dp]oke address,data
.122f	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16
.1232	68		pla				pla 								; get address back
.1233	85 25		sta $25				sta 	zTemp0+1
.1235	68		pla				pla
.1236	85 24		sta $24				sta 	zTemp0
.1238	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.123a	92 24		sta ($24)			sta 	(zTemp0)
.123c	28		plp				plp 								; done if CC
.123d	90 08		bcc $1247			bcc 	_DPExit
.123f	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.1240	a5 09		lda $09				lda 	IFR0+IM1
.1242	a0 01		ldy #$01			ldy 	#1
.1244	91 24		sta ($24),y			sta 	(zTemp0),y
.1246	7a		ply				ply
.1247					_DPExit:
.1247	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.1248					Command_GOTO:
.1248	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; get line number
.124b					GotoR0:
.124b	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.124e	85 19		sta $19				sta 	codePtr+1
.1250	64 18		stz $18				stz 	codePtr
.1252					_GOSearch:
.1252	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.1254	f0 1f		beq $1275			beq 	_GOError
.1256	a0 01		ldy #$01			ldy 	#1 							; found line #
.1258	b1 18		lda ($18),y			lda 	(codePtr),y
.125a	c5 08		cmp $08				cmp 	IFR0+IM0
.125c	d0 0a		bne $1268			bne 	_GONext
.125e	c8		iny				iny
.125f	b1 18		lda ($18),y			lda 	(codePtr),y
.1261	c5 09		cmp $09				cmp 	IFR0+IM1
.1263	d0 03		bne $1268			bne 	_GONext
.1265	4c 8e 15	jmp $158e			jmp 	RUNNewLine
.1268					_GONext:
.1268	18		clc				clc 								; advance to next line.
.1269	b2 18		lda ($18)			lda 	(codePtr)
.126b	65 18		adc $18				adc 	codePtr
.126d	85 18		sta $18				sta 	codePtr
.126f	90 e1		bcc $1252			bcc 	_GOSearch
.1271	e6 19		inc $19				inc 	codePtr+1
.1273	80 dd		bra $1252			bra 	_GOSearch
.1275					_GOError:
.1275	4c 46 29	jmp $2946		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1278					Command_Input:
.1278	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.127a	8d 08 05	sta $0508			sta 	InputFlag
.127d	80 03		bra $1282			bra 	Command_IP_Main
.127f					Command_Print:
.127f	9c 08 05	stz $0508			stz 	InputFlag
.1282					Command_IP_Main:
.1282	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1283					_CPLoop:
.1283	08		php				php 								; save "last action" flag
.1284	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1286	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1288	f0 48		beq $12d2			beq 	_CPExit 					; without consuming
.128a	c9 9b		cmp #$9b			cmp 	#PR_COLON
.128c	f0 44		beq $12d2			beq 	_CPExit
.128e	68		pla				pla 								; throw last action flag
.128f	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and consume
.1291	c8		iny				iny
.1292	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon (syntax seperator)
.1294	f0 39		beq $12cf			beq 	_CPContinueWithSameLine
.1296	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma (tab)
.1298	f0 30		beq $12ca			beq 	_CPTab
.129a	88		dey				dey 								; undo the get.
.129b	2c 08 05	bit $0508			bit 	InputFlag 					; check for Input
.129e	10 0b		bpl $12ab			bpl	 	_CPNotInput
.12a0	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.12a2	c9 40		cmp #$40			cmp 	#$40
.12a4	d0 05		bne $12ab			bne 	_CPNotInput
.12a6	20 db 12	jsr $12db			jsr 	_CPInputCode 				; input code
.12a9	80 d7		bra $1282			bra 	Command_IP_Main 			; and go round again.
.12ab					_CPNotInput:
.12ab	20 82 17	jsr $1782			jsr 	EXPEvaluateExpression 		; evaluate expression.
.12ae	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.12b0	10 0e		bpl $12c0			bpl 	_CPNumber
.12b2	5a		phy				phy
.12b3	18		clc				clc 								; string address to YX
.12b4	a5 08		lda $08				lda 	IFR0+IM0
.12b6	aa		tax				tax
.12b7	a5 09		lda $09				lda 	IFR0+IM1
.12b9	a8		tay				tay
.12ba	20 0f 13	jsr $130f			jsr 	CPPrintYX 					; print YX
.12bd	7a		ply				ply
.12be	80 c2		bra $1282			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.12c0					_CPNumber:
.12c0	5a		phy				phy
.12c1	20 24 32	jsr $3224			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.12c4	20 0f 13	jsr $130f			jsr 	CPPrintYX 					; print string at YX
.12c7	7a		ply				ply
.12c8	80 b8		bra $1282			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.12ca					_CPTab:
.12ca	a9 09		lda #$09			lda 	#9 							; print TAB
.12cc	20 27 13	jsr $1327			jsr 	CPPrintA
.12cf					_CPContinueWithSameLine:
.12cf	38		sec				sec 								; loop round with carry set, which
.12d0	80 b1		bra $1283			bra 	_CPLoop 					; will inhibit final CR
.12d2					_CPExit:
.12d2	28		plp				plp 								; get last action flag
.12d3	b0 05		bcs $12da			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.12d5	a9 0d		lda #$0d			lda 	#13 						; print new line
.12d7	20 27 13	jsr $1327			jsr 	CPPrintA
.12da					_CPExit2:
.12da	60		rts				rts
.12db					_CPInputCode:
.12db	20 4a 18	jsr $184a			jsr 	EXPTermR0 					; get the term, the thing being input to
.12de	5a		phy				phy 								; save position
.12df	20 24 13	jsr $1324			jsr 	CPInputA					; input a line to YX
.12e2	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.12e4	30 18		bmi $12fe			bmi 	_CPInputString
.12e6	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.12e8	48		pha				pha
.12e9	a5 09		lda $09				lda 	IFR0+IM1
.12eb	48		pha				pha
.12ec	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.12ee	84 25		sty $25				sty 	zTemp0+1
.12f0	20 34 1b	jsr $1b34			jsr 	VALConversionZTemp0
.12f3	68		pla				pla 								; do the assign.
.12f4	85 25		sta $25				sta 	zTemp0+1
.12f6	68		pla				pla
.12f7	85 24		sta $24				sta 	zTemp0
.12f9	20 4f 13	jsr $134f			jsr 	AssignNumber
.12fc	7a		ply				ply
.12fd	60		rts				rts
.12fe					_CPInputString:
.12fe	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1300	85 24		sta $24				sta 	zTemp0
.1302	a5 09		lda $09				lda 	IFR0+IM1
.1304	85 25		sta $25				sta 	zTemp0+1
.1306	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1308	84 09		sty $09				sty 	IFR0+IM1
.130a	20 66 13	jsr $1366			jsr 	AssignString 				; assign the string
.130d	7a		ply				ply 								; exit
.130e	60		rts				rts
.130f					CPPrintYX:
.130f	86 24		stx $24				stx 	zTemp0
.1311	84 25		sty $25				sty 	zTemp0+1
.1313	b2 24		lda ($24)			lda 	(zTemp0)
.1315	aa		tax				tax
.1316	f0 0b		beq $1323			beq 	_CPPrintExit
.1318	a0 01		ldy #$01			ldy 	#1
.131a					_CPPrintAYXLoop:
.131a	b1 24		lda ($24),y			lda 	(zTemp0),y
.131c	20 27 13	jsr $1327			jsr 	CPPrintA
.131f	c8		iny				iny
.1320	ca		dex				dex
.1321	d0 f7		bne $131a			bne 	_CPPrintAYXLoop
.1323					_CPPrintExit:
.1323	60		rts				rts
.1324					CPInputA:
.1324	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.1327					CPPrintA:
.1327	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.0508					InputFlag:
>0508							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.132a					CommandLET:
.132a	20 4a 18	jsr $184a			jsr 	EXPTermR0 					; get term
.132d	90 6f		bcc $139e			bcc 	CLError 					; must be a reference term.
.132f	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.1331	48		pha				pha
.1332	a5 09		lda $09				lda 	IFR0+IM1
.1334	48		pha				pha
.1335	a5 0b		lda $0b				lda 	IFR0+IExp
.1337	48		pha				pha
.1338	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.133a	20 9a 29	jsr $299a			jsr 	ERRCheckA
.133d	20 82 17	jsr $1782			jsr 	EXPEvaluateExpression 		; right hand side.
.1340	68		pla				pla 								; type of l-expr
.1341	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1343	30 5c		bmi $13a1			bmi 	CLType
.1345	fa		plx				plx 	 							; pop target address to zTemp0
.1346	86 25		stx $25				stx 	zTemp0+1
.1348	fa		plx				plx
.1349	86 24		stx $24				stx 	zTemp0
.134b					AssignData:
.134b	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.134d	30 17		bmi $1366			bmi 	AssignString
.134f					AssignNumber:
.134f	5a		phy				phy
.1350	a0 03		ldy #$03			ldy 	#3
.1352	a5 0b		lda $0b				lda 	IFR0+IExp
.1354	91 24		sta ($24),y			sta 	(zTemp0),y
.1356	88		dey				dey
.1357	a5 0a		lda $0a				lda 	IFR0+IM2
.1359	91 24		sta ($24),y			sta 	(zTemp0),y
.135b	88		dey				dey
.135c	a5 09		lda $09				lda 	IFR0+IM1
.135e	91 24		sta ($24),y			sta 	(zTemp0),y
.1360	a5 08		lda $08				lda 	IFR0+IM0
.1362	92 24		sta ($24)			sta 	(zTemp0)
.1364	7a		ply				ply
.1365	60		rts				rts
.1366					AssignString:
.1366	5a		phy				phy
.1367	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1369	b1 24		lda ($24),y			lda 	(zTemp0),y
.136b	12 24		ora ($24)			ora 	(zTemp0)
.136d	f0 23		beq $1392			beq 	_CLConcreteString
.136f	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1371	85 26		sta $26				sta 	zTemp1
.1373	b1 24		lda ($24),y			lda 	(zTemp0),y
.1375	85 27		sta $27				sta 	zTemp1+1
.1377	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.1379	38		sec				sec 								; we want 3 for slot size, status, string size.
.137a	e9 03		sbc #$03			sbc 	#3
.137c	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.137e	90 12		bcc $1392			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1380	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1382	1a		inc a				inc 	a
.1383	aa		tax				tax
.1384	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1386					_CLReplaceString:
.1386	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1388	c8		iny				iny
.1389	c8		iny				iny
.138a	91 26		sta ($26),y			sta 	(zTemp1),y
.138c	88		dey				dey
.138d	ca		dex				dex
.138e	d0 f6		bne $1386			bne 	_CLReplaceString
.1390	80 0a		bra $139c			bra 	_CLExit
.1392					_CLConcreteString:
.1392	20 0c 2a	jsr $2a0c			jsr 	StringConcrete  			; concreted string in XA.
.1395	a0 01		ldy #$01			ldy 	#1 							; store the address
.1397	92 24		sta ($24)			sta 	(zTemp0)
.1399	8a		txa				txa
.139a	91 24		sta ($24),y			sta 	(zTemp0),y
.139c					_CLExit:
.139c	7a		ply				ply
.139d	60		rts				rts
.139e					CLError:
.139e	4c e4 28	jmp $28e4		jmp	ErrorV_variable
.13a1					CLType:
.13a1	4c e1 27	jmp $27e1		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.13a4					Command_LIST:
.13a4	9c 09 05	stz $0509			stz 	CLFrom 						; default from
.13a7	9c 0a 05	stz $050a			stz 	CLFrom+1
.13aa	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.13ac	c9 99		cmp #$99			cmp 	#PR_COMMA
.13ae	f0 1d		beq $13cd			beq 	_CLToLine
.13b0	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.13b2	f0 37		beq $13eb			beq 	_CLDefaultTo
.13b4	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.13b7	a5 08		lda $08				lda 	IFR0+IM0
.13b9	8d 09 05	sta $0509			sta 	CLFrom
.13bc	8d 0b 05	sta $050b			sta 	CLTo
.13bf	a5 09		lda $09				lda 	IFR0+IM1
.13c1	8d 0a 05	sta $050a			sta 	CLFrom+1
.13c4	8d 0c 05	sta $050c			sta 	CLTo+1
.13c7	b1 18		lda ($18),y			lda 	(codePtr),y
.13c9	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.13cb	f0 26		beq $13f3			beq 	_CLList
.13cd					_CLToLine:
.13cd	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.13cf	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.13d1	f0 18		beq $13eb			beq 	_CLDefaultTo
.13d3	20 92 29	jsr $2992			jsr 	ERRCheckComma 				; sep comma
.13d6	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.13d8	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.13da	f0 0f		beq $13eb			beq 	_CLDefaultTo
.13dc	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; there's a To value.
.13df	a5 08		lda $08				lda 	IFR0+IM0
.13e1	8d 0b 05	sta $050b			sta 	CLTo
.13e4	a5 09		lda $09				lda 	IFR0+IM1
.13e6	8d 0c 05	sta $050c			sta 	CLTo+1
.13e9	80 08		bra $13f3			bra 	_CLList
.13eb					_CLDefaultTo:
.13eb	a9 ff		lda #$ff			lda 	#$FF
.13ed	8d 0b 05	sta $050b			sta 	CLTo
.13f0	8d 0c 05	sta $050c			sta 	CLTo+1
.13f3					_CLList:
.13f3	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.13f6	85 19		sta $19				sta 	codePtr+1
.13f8	64 18		stz $18				stz 	codePtr
.13fa	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.13fc	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.13fe	20 c6 1f	jsr $1fc6			jsr 	TOKSetDetokeniseOutput
.1401					_CLLoop:
.1401	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1403	f0 51		beq $1456			beq 	_CLExit
.1405	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1408	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.140b	d0 4c		bne $1459			bne 	_CLBreak
.140d	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.140f	20 5c 14	jsr $145c			jsr 	_CLCompareLine
.1412	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1414	f0 33		beq $1449			beq 	_CLNext
.1416	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1418	20 5c 14	jsr $145c			jsr 	_CLCompareLine
.141b	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.141d	f0 2a		beq $1449			beq 	_CLNext
.141f	a0 02		ldy #$02			ldy 	#2 							; print line #
.1421	b1 18		lda ($18),y			lda 	(codePtr),y
.1423	aa		tax				tax
.1424	88		dey				dey
.1425	b1 18		lda ($18),y			lda 	(codePtr),y
.1427	20 e1 2b	jsr $2be1			jsr 	WriteIntXA
.142a					_CLSpacing:
.142a	a9 20		lda #$20			lda 	#32
.142c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.142f	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.1432	e0 06		cpx #$06			cpx 	#6
.1434	d0 f4		bne $142a			bne 	_CLSpacing
.1436	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.1438	a5 18		lda $18				lda 	codePtr
.143a	18		clc				clc
.143b	69 03		adc #$03			adc 	#3
.143d	aa		tax				tax
.143e	90 01		bcc $1441			bcc 	_CLNoCarry2
.1440	c8		iny				iny
.1441					_CLNoCarry2:
.1441	20 6b 1f	jsr $1f6b			jsr 	TOKDetokenise
.1444	a9 0d		lda #$0d			lda 	#13	 						; next line
.1446	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1449					_CLNext:
.1449	18		clc				clc 								; advance to next line.
.144a	b2 18		lda ($18)			lda 	(codePtr)
.144c	65 18		adc $18				adc 	codePtr
.144e	85 18		sta $18				sta 	codePtr
.1450	90 02		bcc $1454			bcc 	_CLNoCarry
.1452	e6 19		inc $19				inc 	codePtr+1
.1454					_CLNoCarry:
.1454	80 ab		bra $1401			bra 	_CLLoop
.1456					_CLExit:
.1456	4c 00 2c	jmp $2c00			jmp 	WarmStart
.1459					_CLBreak:
.1459	4c 3c 29	jmp $293c		jmp	ErrorV_break
.145c					_CLCompareLine:
.145c	a0 01		ldy #$01			ldy 	#1
.145e	38		sec				sec
.145f	b1 18		lda ($18),y			lda 	(codePtr),y
.1461	fd 09 05	sbc $0509,x			sbc 	CLFrom,x
.1464	85 24		sta $24				sta 	zTemp0
.1466	c8		iny				iny
.1467	b1 18		lda ($18),y			lda 	(codePtr),y
.1469	fd 0a 05	sbc $050a,x			sbc 	CLFrom+1,x
.146c	90 0a		bcc $1478			bcc 	_CLIsNegative
.146e	d0 05		bne $1475			bne 	_CLIsPositive
.1470	a5 24		lda $24				lda 	zTemp0
.1472	d0 01		bne $1475			bne 	_CLIsPositive
.1474	60		rts				rts
.1475					_CLIsPositive:
.1475	a9 01		lda #$01			lda 	#1
.1477	60		rts				rts
.1478					_CLIsNegative:
.1478	a9 ff		lda #$ff			lda 	#255
.147a	60		rts				rts
.0509					CLFrom:
>0509							.fill 	2
.050b					CLTo:
>050b							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.147b					Command_NEW:
.147b	20 74 21	jsr $2174			jsr 	PGMNewProgram 				; Reset current program
.147e	20 af 10	jsr $10af			jsr 	ClearCode 					; Run CLR
.1481	4c e7 15	jmp $15e7			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1484					Command_READ:
.1484	20 4a 18	jsr $184a			jsr 	EXPTermR0 					; get term to R0
.1487	90 35		bcc $14be			bcc 	_CRSyntax 					; fail if not a reference.
.1489	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.148b	48		pha				pha
.148c	a5 09		lda $09				lda 	IFR0+IM1
.148e	48		pha				pha
.148f	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1491	48		pha				pha
.1492	20 5b 15	jsr $155b			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1495	ad 11 05	lda $0511			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1498	d0 27		bne $14c1			bne 	_CRHaveData  				; forward for the next one.
.149a					_CRNextLine:
.149a	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.149c	f0 1a		beq $14b8			beq 	_CRNoData
.149e					_CRKeepSearching:
.149e	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.14a0	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.14a2	20 c1 26	jsr $26c1			jsr 	ScanForward
.14a5	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.14a7	f0 18		beq $14c1			beq 	_CRHaveData 				; found it
.14a9	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.14ab	18		clc				clc 								; try the next line, keep going.
.14ac	b2 18		lda ($18)			lda 	(codePtr)
.14ae	65 18		adc $18				adc 	codePtr
.14b0	85 18		sta $18				sta 	codePtr
.14b2	90 e6		bcc $149a			bcc 	_CRNextLine
.14b4	e6 19		inc $19				inc 	codePtr+1
.14b6	80 e2		bra $149a			bra 	_CRNextLine
.14b8					_CRNoData:
.14b8	4c 69 28	jmp $2869		jmp	ErrorV_data
.14bb					_CLType:
.14bb	4c e1 27	jmp $27e1		jmp	ErrorV_type
.14be					_CRSyntax:
.14be	4c b1 27	jmp $27b1		jmp	ErrorV_syntax
.14c1					_CRHaveData:
.14c1	20 82 17	jsr $1782			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.14c4	68		pla				pla 								; type of l-expr
.14c5	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.14c7	30 f2		bmi $14bb			bmi 	_CLType
.14c9	68		pla				pla 								; restore address
.14ca	85 25		sta $25				sta 	zTemp0+1
.14cc	68		pla				pla
.14cd	85 24		sta $24				sta 	zTemp0
.14cf	20 4b 13	jsr $134b			jsr 	AssignData 					; write R0 there.
.14d2	9c 11 05	stz $0511			stz 	dataInStatement 			; clear in data flag
.14d5	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.14d7	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.14d9	d0 04		bne $14df			bne 	_CRSwapBack
.14db	c8		iny				iny 								; consume comma
.14dc	ee 11 05	inc $0511			inc 	dataInStatement 			; set in data statement flag.
.14df					_CRSwapBack:
.14df	20 5b 15	jsr $155b			jsr 	SwapCodeDataPointers		; swap them back.
.14e2	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.14e4	c8		iny				iny
.14e5	c9 99		cmp #$99			cmp 	#PR_COMMA
.14e7	f0 9b		beq $1484			beq 	Command_READ 				; if so go round again.
.14e9	88		dey				dey 								; unpick get.
.14ea	60		rts				rts
.14eb					Command_DATA:
.14eb	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.14ed	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.14ef	20 c1 26	jsr $26c1			jsr 	ScanForward
.14f2	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.14f4	d0 01		bne $14f7			bne 	_CDNotEOL
.14f6	88		dey				dey
.14f7					_CDNotEOL:
.14f7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.14f8					Command_REM:
.14f8					Command_REM2:
.14f8	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.14fa	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.14fc	d0 06		bne $1504			bne 	_CRExit
.14fe	c8		iny				iny 								; skip over it, it's a comment.
.14ff	98		tya				tya
.1500	38		sec				sec
.1501	71 18		adc ($18),y			adc 	(codePtr),y
.1503	a8		tay				tay
.1504					_CRExit:
.1504	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.1505					Command_RENUMBER:
.1505	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.1507	85 08		sta $08				sta 	IM0+IFR0
.1509	a9 03		lda #$03			lda 	#1000 >> 8
.150b	85 09		sta $09				sta 	IM1+IFR0
.150d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.150f	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1511	f0 07		beq $151a			beq 	_CRIsDefault
.1513	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1515	f0 03		beq $151a			beq 	_CRIsDefault
.1517	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; get other start
.151a					_CRIsDefault:
.151a	5a		phy				phy
.151b	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.151d	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.1520	85 25		sta $25				sta 	zTemp0+1
.1522					_CRRenumberLoop:
.1522	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.1524	f0 21		beq $1547			beq 	_CRExit
.1526	18		clc				clc
.1527	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.1529	a5 08		lda $08				lda 	IFR0+IM0
.152b	91 24		sta ($24),y			sta 	(zTemp0),y
.152d	69 0a		adc #$0a			adc 	#10
.152f	85 08		sta $08				sta 	IFR0+IM0
.1531	c8		iny				iny
.1532	a5 09		lda $09				lda 	IFR0+IM1
.1534	91 24		sta ($24),y			sta 	(zTemp0),y
.1536	69 00		adc #$00			adc 	#0
.1538	85 09		sta $09				sta 	IFR0+IM1
.153a	18		clc				clc 								; next line.
.153b	b2 24		lda ($24)			lda 	(zTemp0)
.153d	65 24		adc $24				adc 	zTemp0
.153f	85 24		sta $24				sta 	zTemp0
.1541	90 df		bcc $1522			bcc 	_CRRenumberLoop
.1543	e6 25		inc $25				inc 	zTemp0+1
.1545	80 db		bra $1522			bra 	_CRRenumberLoop
.1547					_CRExit:
.1547	7a		ply				ply
.1548	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1549					S
.1549					Command_RESTORE:
.1549	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.154c	8d 0e 05	sta $050e			sta 	dataPtr+1
.154f	9c 0d 05	stz $050d			stz 	dataPtr
.1552	a9 03		lda #$03			lda 	#3 							; position start of line
.1554	8d 0f 05	sta $050f			sta 	dataPos
.1557	9c 11 05	stz $0511			stz 	dataInStatement 			; not in statement
.155a	60		rts				rts
.155b					SwapCodeDataPointers:
.155b	ad 0d 05	lda $050d			lda 	dataPtr 					; swap LSB of code/data
.155e	a6 18		ldx $18				ldx 	codePtr
.1560	85 18		sta $18				sta 	codePtr
.1562	8e 0d 05	stx $050d			stx 	dataPtr
.1565	ad 0e 05	lda $050e			lda 	dataPtr+1 					; swap MSB of code/data
.1568	a6 19		ldx $19				ldx 	codePtr+1
.156a	85 19		sta $19				sta 	codePtr+1
.156c	8e 0e 05	stx $050e			stx 	dataPtr+1
.156f	ad 0f 05	lda $050f			lda 	dataPos 					; swap dataPos and Y
.1572	8c 0f 05	sty $050f			sty 	dataPos
.1575	a8		tay				tay
.1576	60		rts				rts
.050d					dataPtr:
>050d							.fill 	2
.050f					dataPos:
>050f							.fill 	2
.0511					dataInStatement:
>0511							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1577					Command_RUN:
.1577	20 af 10	jsr $10af			jsr 	ClearCode					; clear everything out.
.157a	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.157d	85 19		sta $19				sta 	codePtr+1
.157f	64 18		stz $18				stz 	codePtr
.1581	80 0b		bra $158e			bra 	RUNNewLine
.1583					RUNEndOfLine:
.1583	18		clc				clc 								; advance to next line.
.1584	b2 18		lda ($18)			lda 	(codePtr)
.1586	65 18		adc $18				adc 	codePtr
.1588	85 18		sta $18				sta 	codePtr
.158a	90 02		bcc $158e			bcc 	_RELNoCarry
.158c	e6 19		inc $19				inc 	codePtr+1
.158e					_RELNoCarry:
.158e					RUNNewLine:
.158e	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1590	9a		txs				txs
.1591	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.1593	f0 52		beq $15e7			beq 	Command_END
.1595	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1597	b1 18		lda ($18),y			lda 	(codePtr),y
.1599	8d 2e 06	sta $062e			sta 	ERRLine
.159c	c8		iny				iny
.159d	b1 18		lda ($18),y			lda 	(codePtr),y
.159f	8d 2f 06	sta $062f			sta 	ERRLine+1
.15a2	c8		iny				iny 								; offset into codePtr for start of line.
.15a3					RUNNewCommand:
.15a3	9c 23 06	stz $0623			stz 	stringInitialised 			; reset string system flag.
.15a6	ce 12 05	dec $0512			dec 	checkCounter				; don't do these checks ever command
.15a9	d0 0a		bne $15b5			bne 	_RNCNoCheck
.15ab	5a		phy				phy 								; keyboard check.
.15ac	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.15af	7a		ply				ply
.15b0	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.15b3	d0 1e		bne $15d3			bne 	_RUNBreak
.15b5					_RNCNoCheck:
.15b5	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.15b7	10 1d		bpl $15d6			bpl		_RUNNotToken 				; probably an identifier
.15b9	c8		iny				iny 								; consume token
.15ba	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.15bc	f0 e5		beq $15a3			beq 	RUNNewCommand
.15be	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.15c0	b0 0e		bcs $15d0			bcs 	_RUNSyntax
.15c2	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.15c4	90 0a		bcc $15d0			bcc 	_RUNSyntax
.15c6	0a		asl a				asl 	a 							; double into X.
.15c7	aa		tax				tax
.15c8	20 cd 15	jsr $15cd			jsr 	_RUNDispatchMain			; call the main dispatcher
.15cb	80 d6		bra $15a3			bra 	RUNNewCommand
.15cd					_RUNDispatchMain:
.15cd	7c 49 1e	jmp ($1e49,x)			jmp 	(VectorTable,x)
.15d0					_RUNSyntax:
.15d0	4c b1 27	jmp $27b1		jmp	ErrorV_syntax
.15d3					_RUNBreak:
.15d3	4c 3c 29	jmp $293c		jmp	ErrorV_break
.15d6					_RUNNotToken:
.15d6	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error (numbers)
.15d8	90 f6		bcc $15d0			bcc 	_RUNSyntax
.15da	20 2a 13	jsr $132a			jsr 	CommandLET 					; assignment
.15dd	80 c4		bra $15a3			bra 	RUNNewCommand 				; loop round.
.15df					Command_Shift_Handler:
.15df	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.15e1	c8		iny				iny
.15e2	0a		asl a				asl 	a 							; double into X
.15e3	aa		tax				tax
.15e4	7c 49 1f	jmp ($1f49,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.15e7					Command_END:
.15e7	4c 00 2c	jmp $2c00			jmp 	WarmStart
.0512					checkCounter:
>0512							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.15ea					Command_STOP:
.15ea	4c 55 28	jmp $2855		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.15ed					Command_Sys:
.15ed	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; execution address
.15f0	5a		phy				phy
.15f1	ad 76 06	lda $0676			lda 	('A'-'A')*4 + FastVariables ; load AXY
.15f4	ae d2 06	ldx $06d2			ldx 	('X'-'A')*4 + FastVariables
.15f7	ac d6 06	ldy $06d6			ldy 	('Y'-'A')*4 + FastVariables
.15fa	20 ff 15	jsr $15ff			jsr 	_CSCallIFR0 				; call the code
.15fd	7a		ply				ply
.15fe	60		rts				rts
.15ff					_CSCallIFR0:
.15ff	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1602					NoExec01:
.1602					NoExec02:
.1602					NoExec03:
.1602					NoExec04:
.1602					NoExec05:
.1602					NoExec06:
.1602					NoExec07:
.1602					NoExec08:
.1602	4c b1 27	jmp $27b1		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1605					EXPBinAdd:
.1605	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1607	30 6f		bmi $1678			bmi 	EXPConcatenate
.1609	a2 0c		ldx #$0c			ldx 	#IFR1
.160b	4c 1f 2e	jmp $2e1f			jmp 	IFloatAdd
.160e					EXPBinSub:
.160e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1610	30 3f		bmi $1651			bmi 	EXPTypeError
.1612	a2 0c		ldx #$0c			ldx 	#IFR1
.1614	4c 18 2e	jmp $2e18			jmp 	IFloatSubtract
.1617					EXPBinMul:
.1617	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.1619	30 36		bmi $1651			bmi 	EXPTypeError
.161b	a2 0c		ldx #$0c			ldx 	#IFR1
.161d	4c c9 2e	jmp $2ec9			jmp 	IFloatMultiply
.1620					EXPBinFDiv:
.1620	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1622	30 2d		bmi $1651			bmi 	EXPTypeError
.1624	a2 0c		ldx #$0c			ldx 	#IFR1
.1626	20 4b 31	jsr $314b			jsr 	IFloatDivideFloat
.1629	b0 0f		bcs $163a			bcs 	EXPDZero
.162b	60		rts				rts
.162c					EXPBinIDiv:
.162c	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.162e	30 21		bmi $1651			bmi 	EXPTypeError
.1630	a2 0c		ldx #$0c			ldx 	#IFR1
.1632	20 4b 31	jsr $314b			jsr 	IFloatDivideFloat
.1635	b0 03		bcs $163a			bcs 	EXPDZero
.1637	4c 28 31	jmp $3128			jmp 	IFloatIntegerR0
.163a					EXPDZero:
.163a	4c 2a 28	jmp $282a		jmp	ErrorV_divzero
.163d					EXPBinIMod:
.163d	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.163f	30 10		bmi $1651			bmi 	EXPTypeError
.1641	a2 0c		ldx #$0c			ldx 	#IFR1
.1643	5a		phy				phy
.1644	20 5e 30	jsr $305e			jsr 	IFPreProcessBitwise 		; set up everything.
.1647	d0 05		bne $164e			bne 	EXPDRange
.1649	20 97 2f	jsr $2f97			jsr 	IFloatModulusInteger
.164c	7a		ply				ply
.164d	60		rts				rts
.164e					EXPDRange:
.164e	4c c2 27	jmp $27c2		jmp	ErrorV_range
.1651					EXPTypeError:
.1651	4c e1 27	jmp $27e1		jmp	ErrorV_type
.1654					EXPBinAnd:
.1654	24 0b		bit $0b				bit 	IFR0+IExp
.1656	30 f9		bmi $1651			bmi 	EXPTypeError
.1658	a2 0c		ldx #$0c			ldx 	#IFR1
.165a	20 19 30	jsr $3019			jsr 	IFloatBitwiseAnd
.165d	b0 ef		bcs $164e			bcs 	EXPDRange
.165f	60		rts				rts
.1660					EXPBinOr:
.1660	24 0b		bit $0b				bit 	IFR0+IExp
.1662	30 ed		bmi $1651			bmi 	EXPTypeError
.1664	a2 0c		ldx #$0c			ldx 	#IFR1
.1666	20 30 30	jsr $3030			jsr 	IFloatBitwiseOr
.1669	b0 e3		bcs $164e			bcs 	EXPDRange
.166b	60		rts				rts
.166c					EXPBinXor:
.166c	24 0b		bit $0b				bit 	IFR0+IExp
.166e	30 e1		bmi $1651			bmi 	EXPTypeError
.1670	a2 0c		ldx #$0c			ldx 	#IFR1
.1672	20 47 30	jsr $3047			jsr 	IFloatBitwiseXor
.1675	b0 d7		bcs $164e			bcs 	EXPDRange
.1677	60		rts				rts
.1678					EXPConcatenate:
.1678	18		clc				clc
.1679	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.167b	72 0c		adc ($0c)			adc 	(IFR1)
.167d	b0 2d		bcs $16ac			bcs 	_EXPCError 					; far too long.
.167f	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.1681	da		phx				phx
.1682	a6 09		ldx $09				ldx 	IFR0+1
.1684	da		phx				phx
.1685	20 7f 2a	jsr $2a7f			jsr 	StringTempAllocate 			; allocate string, set up return
.1688	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.168a	a5 0c		lda $0c				lda 	IFR1
.168c	20 95 16	jsr $1695			jsr 	_EXPCCopyXA
.168f	fa		plx				plx 								; copy second string
.1690	68		pla				pla
.1691	20 95 16	jsr $1695			jsr 	_EXPCCopyXA
.1694	60		rts				rts
.1695					_EXPCCopyXA:
.1695	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.1697	85 24		sta $24				sta 	zTemp0
.1699	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.169b	f0 0e		beq $16ab			beq 	_EXPCCExit 					; nothing in string
.169d	aa		tax				tax 								; count
.169e	5a		phy				phy 								; start position
.169f	a0 01		ldy #$01			ldy 	#1
.16a1					_EXPCCLoop:
.16a1	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.16a3	20 b4 2a	jsr $2ab4			jsr 	StringTempWrite
.16a6	c8		iny				iny
.16a7	ca		dex				dex
.16a8	d0 f7		bne $16a1			bne 	_EXPCCLoop
.16aa	7a		ply				ply
.16ab					_EXPCCExit:
.16ab	60		rts				rts
.16ac					_EXPCError:
.16ac	4c ce 28	jmp $28ce		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.16af					EXPReturnTrue:
.16af	a2 08		ldx #$08			ldx 	#IFR0
.16b1	a9 01		lda #$01			lda 	#1
.16b3	20 29 34	jsr $3429			jsr 	IFloatSetByte
.16b6	20 32 34	jsr $3432			jsr 	IFloatNegate
.16b9	60		rts				rts
.16ba					EXPReturnFalse:
.16ba	a2 08		ldx #$08			ldx 	#IFR0
.16bc	4c 27 34	jmp $3427			jmp 	IFloatSetZero
.16bf					EXPCompareEqual:
.16bf	20 f5 16	jsr $16f5			jsr 	EXPCompareBaseCode
.16c2	c9 00		cmp #$00			cmp 	#0
.16c4	f0 e9		beq $16af			beq 	EXPReturnTrue
.16c6	80 f2		bra $16ba			bra 	EXPReturnFalse
.16c8					EXPCompareLess:
.16c8	20 f5 16	jsr $16f5			jsr 	EXPCompareBaseCode
.16cb	c9 ff		cmp #$ff			cmp 	#$FF
.16cd	f0 e0		beq $16af			beq 	EXPReturnTrue
.16cf	80 e9		bra $16ba			bra 	EXPReturnFalse
.16d1					EXPCompareGreater:
.16d1	20 f5 16	jsr $16f5			jsr 	EXPCompareBaseCode
.16d4	c9 01		cmp #$01			cmp 	#1
.16d6	f0 d7		beq $16af			beq 	EXPReturnTrue
.16d8	80 e0		bra $16ba			bra 	EXPReturnFalse
.16da					EXPCompareNotEqual:
.16da	20 f5 16	jsr $16f5			jsr 	EXPCompareBaseCode
.16dd	c9 00		cmp #$00			cmp 	#0
.16df	d0 ce		bne $16af			bne 	EXPReturnTrue
.16e1	80 d7		bra $16ba			bra 	EXPReturnFalse
.16e3					EXPCompareLessEqual:
.16e3	20 f5 16	jsr $16f5			jsr 	EXPCompareBaseCode
.16e6	c9 01		cmp #$01			cmp 	#1
.16e8	d0 c5		bne $16af			bne 	EXPReturnTrue
.16ea	80 ce		bra $16ba			bra 	EXPReturnFalse
.16ec					EXPCompareGreaterEqual:
.16ec	20 f5 16	jsr $16f5			jsr 	EXPCompareBaseCode
.16ef	c9 ff		cmp #$ff			cmp 	#$FF
.16f1	d0 bc		bne $16af			bne 	EXPReturnTrue
.16f3	80 c5		bra $16ba			bra 	EXPReturnFalse
.16f5					EXPCompareBaseCode:
.16f5	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.16f7	30 10		bmi $1709			bmi 	_EXCBCString
.16f9	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.16fb	20 f6 30	jsr $30f6			jsr 	IFloatCompare
.16fe	a5 08		lda $08				lda 	IFR0+IM0
.1700	f0 06		beq $1708			beq 	_EXCBCExit 					; return 0 if zero
.1702	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1704	50 02		bvc $1708			bvc 	_EXCBCExit
.1706	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1708					_EXCBCExit:
.1708	60		rts				rts
.1709					_EXCBCString:
.1709	5a		phy				phy
.170a	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.170c	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.170e	90 02		bcc $1712			bcc 	_EXCBCSmaller
.1710	b2 0c		lda ($0c)			lda 	(IFR1)
.1712					_EXCBCSmaller:
.1712	aa		tax				tax
.1713	f0 0d		beq $1722			beq 	_EXCBCMatches 				; if zero common length matches
.1715	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1717					_EXCBCCheckSmallerMatches:
.1717	c8		iny				iny 								; compare directly as far as common length
.1718	38		sec				sec
.1719	b1 0c		lda ($0c),y			lda 	(IFR1),y
.171b	f1 08		sbc ($08),y			sbc 	(IFR0),y
.171d	d0 08		bne $1727			bne 	_EXCBCExit2
.171f	ca		dex				dex
.1720	d0 f5		bne $1717			bne 	_EXCBCCheckSmallerMatches
.1722					_EXCBCMatches:
.1722	38		sec				sec
.1723	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1725	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1727					_EXCBCExit2:
.1727	7a		ply				ply
.1728	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.172a	f0 04		beq $1730			beq 	_EXCBCReturn
.172c	30 03		bmi $1731			bmi 	_EXCBCFF 					; return $FF if <
.172e	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1730					_EXCBCReturn:
.1730	60		rts				rts
.1731					_EXCBCFF:
.1731	a9 ff		lda #$ff			lda 	#$FF
.1733	60		rts				rts
.1734					_EXCBCRange:
.1734	4c c2 27	jmp $27c2		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1737					EXPBinLeft:
.1737	a9 ff		lda #$ff			lda 	#$FF
.1739	8d 13 05	sta $0513			sta 	EXPShiftLeftFlag
.173c	4c 42 17	jmp $1742			jmp 	EXPShiftCommon
.173f					EXPBinRight:
.173f	9c 13 05	stz $0513			stz 	EXPShiftLeftFlag
.1742					EXPShiftCommon:
.1742	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1744	05 0f		ora $0f				ora 	IFR1+IExp
.1746	29 7f		and #$7f			and 	#$7F
.1748	d0 35		bne $177f			bne 	_EXPSRange
.174a	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.174c	29 e0		and #$e0			and 	#$E0
.174e	05 09		ora $09				ora 	IFR0+IM1
.1750	05 0a		ora $0a				ora 	IFR0+IM2
.1752	d0 25		bne $1779			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.1754	5a		phy				phy
.1755	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.1757	29 1f		and #$1f			and 	#$1F
.1759	f0 17		beq $1772			beq 	_EXPSExit 					; exit if zero
.175b	a8		tay				tay
.175c					_EXPSLoop:
.175c	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.175e	2c 13 05	bit $0513			bit 	EXPShiftLeftFlag
.1761	30 05		bmi $1768			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.1763	20 56 34	jsr $3456			jsr 	IFloatShiftRight
.1766	80 07		bra $176f			bra 	_EXPSContinue
.1768					_EXPSShiftLeft:
.1768	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.176b	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.176d	30 10		bmi $177f			bmi 	_EXPSRange
.176f					_EXPSContinue:
.176f	88		dey				dey 								; do it Y times
.1770	d0 ea		bne $175c			bne 	_EXPSLoop
.1772					_EXPSExit:
.1772	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.1774	20 b8 33	jsr $33b8			jsr 	IFloatCopyFromRegister
.1777	7a		ply				ply
.1778	60		rts				rts
.1779					_EXPSShiftZero:
.1779	a2 08		ldx #$08			ldx 	#IFR0
.177b	20 27 34	jsr $3427			jsr 	IFloatSetZero
.177e	60		rts				rts
.177f					_EXPSRange:
.177f	4c c2 27	jmp $27c2		jmp	ErrorV_range
.0513					EXPShiftLeftFlag:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1782					EXPEvaluateExpression:
.1782	a9 00		lda #$00			lda 	#0 							; current precedence
.1784					EXPEvaluateExpressionPrecedenceA:
.1784	48		pha				pha
.1785	20 ff 17	jsr $17ff			jsr 	EXPTermValueR0				; do first term.
.1788					_EELoop:
.1788	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.178a	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.178c	90 31		bcc $17bf			bcc 	_EEExit
.178e	aa		tax				tax 								; access the precedence of the operator.
.178f	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1790	dd 5d 1b	cmp $1b5d,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1793	b0 2b		bcs $17c0			bcs 	_EEExit2
.1795	48		pha				pha 								; save current precedence.
.1796	da		phx				phx 								; save operator
.1797	c8		iny				iny 								; consume operator
.1798	da		phx				phx
.1799	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.179b	20 76 33	jsr $3376			jsr 	IFloatPushRx
.179e	fa		plx				plx
.179f	bd 5d 1b	lda $1b5d,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.17a2	20 84 17	jsr $1784			jsr 	EXPEvaluateExpressionPrecedenceA
.17a5	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.17a7	20 97 33	jsr $3397			jsr 	IFloatPullRx
.17aa	fa		plx				plx 								; operator
.17ab	a5 0b		lda $0b				lda 	IFR0+IExp 					; check if types match.
.17ad	45 0f		eor $0f				eor 	IFR1+IExp
.17af	30 08		bmi $17b9			bmi 	_EEType		 				; MSBs differ, error.
.17b1					_EETypeOkay:
.17b1	8a		txa				txa
.17b2	0a		asl a				asl 	a 							; double -> X
.17b3	aa		tax				tax
.17b4	20 bc 17	jsr $17bc			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.17b7	80 cf		bra $1788			bra 	_EELoop
.17b9					_EEType:
.17b9	4c e1 27	jmp $27e1		jmp	ErrorV_type
.17bc					_EECallBinary:
.17bc	7c 49 1e	jmp ($1e49,x)			jmp 	(VectorTable,x)
.17bf					_EEExit:
.17bf	68		pla				pla 								; throw precedence
.17c0					_EEExit2:
.17c0	18		clc				clc
.17c1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.17c2					EXPEvalNumber:
.17c2	20 82 17	jsr $1782			jsr 	EXPEvaluateExpression 		; get a value
.17c5	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.17c7	30 01		bmi $17ca			bmi 	EVUType
.17c9	60		rts				rts
.17ca					EVUType:
.17ca	4c e1 27	jmp $27e1		jmp	ErrorV_type
.17cd					EXPEvalInteger:
.17cd	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.17d0	20 28 31	jsr $3128			jsr 	IFloatIntegerR0
.17d3	60		rts				rts
.17d4					EXPEvalInteger16:
.17d4	20 cd 17	jsr $17cd			jsr 	EXPEvalInteger 				; get integer
.17d7	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.17d9	d0 21		bne $17fc			bne 	EVURange
.17db	a6 09		ldx $09				ldx 	IFR0+IM1
.17dd	a5 08		lda $08				lda 	IFR0+IM0
.17df	60		rts				rts
.17e0					EXPEvalInteger8:
.17e0	20 cd 17	jsr $17cd			jsr 	EXPEvalInteger 				; get integer
.17e3	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.17e5	05 09		ora $09				ora 	IFR0+IM1
.17e7	d0 13		bne $17fc			bne 	EVURange
.17e9	a5 08		lda $08				lda 	IFR0+IM0
.17eb	60		rts				rts
.17ec					EXPEvalString:
.17ec	20 82 17	jsr $1782			jsr 	EXPEvaluateExpression 		; get value
.17ef	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.17f1	10 d7		bpl $17ca			bpl 	EVUType
.17f3	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.17f5	86 25		stx $25				stx 	zTemp0+1
.17f7	a5 08		lda $08				lda 	IFR0+IM0
.17f9	85 24		sta $24				sta 	zTemp0
.17fb	60		rts				rts
.17fc					EVURange:
.17fc	4c c2 27	jmp $27c2		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.17ff					EXPTermValueR0:
.17ff	20 4a 18	jsr $184a			jsr 	EXPTermR0 					; get term
.1802	90 45		bcc $1849			bcc 	_ETVNotReference 			; exit if value.
.1804	5a		phy				phy
.1805	a0 03		ldy #$03			ldy 	#3 							; get type
.1807	b1 08		lda ($08),y			lda 	(IFR0),y
.1809	30 14		bmi $181f			bmi 	_ETVDereferenceString
.180b	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.180d	88		dey				dey 								; get byte 2
.180e	b1 08		lda ($08),y			lda 	(IFR0),y
.1810	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1812	88		dey				dey 								; get byte 1
.1813	b1 08		lda ($08),y			lda 	(IFR0),y
.1815	aa		tax				tax 								; save in X so we can overwrite it
.1816	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1818	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.181a	85 08		sta $08				sta 	IFR0+IM0
.181c	7a		ply				ply
.181d	18		clc				clc
.181e	60		rts				rts
.181f					_ETVDereferenceString:
.181f	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1821	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1823	12 08		ora ($08)			ora 	(IFR0)
.1825	f0 11		beq $1838			beq 	_ETVNull 					; if so, return a fake NULL.
.1827	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1829	aa		tax				tax
.182a	b2 08		lda ($08)			lda 	(IFR0)
.182c	18		clc				clc 								; add two so points to actual string.
.182d	69 02		adc #$02			adc 	#2
.182f	90 01		bcc $1832			bcc 	_EVDSNoCarry
.1831	e8		inx				inx
.1832					_EVDSNoCarry:
.1832	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1834	85 08		sta $08				sta 	IFR0
.1836	80 08		bra $1840			bra 	_ETVFillExit 				; tidy up and exit.
.1838					_ETVNull:
.1838	a9 48		lda #$48			lda 	#_EVTNString & $FF
.183a	85 08		sta $08				sta 	IFR0+IM0
.183c	a9 18		lda #$18			lda 	#_EVTNString >> 8
.183e	85 09		sta $09				sta 	IFR0+IM1
.1840					_ETVFillExit:
.1840	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1842	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1844	85 0b		sta $0b				sta 	IFR0+IExp
.1846	7a		ply				ply
.1847	60		rts				rts
.1848					_EVTNString:
>1848	00						.byte 	0
.1849					_ETVNotReference:
.1849	60		rts				rts
.184a					EXPTermR0:
.184a	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.184c	30 10		bmi $185e			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.184e	c8		iny				iny 								; consume element
.184f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1851	b0 08		bcs $185b			bcs 	_ETMIdentifier
.1853	20 89 18	jsr $1889			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1856	20 bc 18	jsr $18bc			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1859	18		clc				clc 								; return value ok
.185a	60		rts				rts
.185b					_ETMIdentifier:
.185b	4c c0 2d	jmp $2dc0			jmp 	VARCheckSimple 				; check variables, seperate module.
.185e					_ETMIsUnaryOrMinus:
.185e	c8		iny				iny 								; consume element
.185f	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1861	d0 0e		bne $1871			bne 	_ETMCheckUnary
.1863	20 ff 17	jsr $17ff			jsr 	EXPTermValueR0 				; get a term to negate
.1866	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.1868	20 32 34	jsr $3432			jsr 	IFloatNegate
.186b	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.186d	30 17		bmi $1886			bmi 	_ETMUnaryType				; if so error.
.186f	18		clc				clc
.1870	60		rts				rts
.1871					_ETMCheckUnary:
.1871	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1873	90 0e		bcc $1883			bcc 	_ETMUnarySyntax
.1875	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1877	b0 0a		bcs $1883			bcs 	_ETMUnarySyntax
.1879	0a		asl a				asl 	a 							; make it into an index => X
.187a	aa		tax				tax
.187b	20 80 18	jsr $1880			jsr 	_ETMCallUnaryFunction 		; call the function
.187e	18		clc				clc 								; and return it.
.187f	60		rts				rts
.1880					_ETMCallUnaryFunction:
.1880	7c 49 1e	jmp ($1e49,x)			jmp 	(VectorTable,x)
.1883					_ETMUnarySyntax:
.1883	4c b1 27	jmp $27b1		jmp	ErrorV_syntax
.1886					_ETMUnaryType:
.1886	4c e1 27	jmp $27e1		jmp	ErrorV_type
.1889					EXPExtractTokenisedInteger:
.1889	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.188b	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.188d	64 09		stz $09				stz 	IFR0+IM1
.188f	64 0a		stz $0a				stz 	IFR0+IM2
.1891					_ETMConstant:
.1891	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1893	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1895	b0 24		bcs $18bb			bcs 	_ETMCExit 					; no, exit.
.1897	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1899	a5 09		lda $09				lda 	IFR0+IM1
.189b	85 0a		sta $0a				sta 	IFR0+IM2
.189d	a5 08		lda $08				lda 	IFR0+IM0
.189f	85 09		sta $09				sta 	IFR0+IM1
.18a1	64 08		stz $08				stz 	IFR0+IM0
.18a3	8a		txa				txa
.18a4	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.18a5	66 0a		ror $0a				ror 	IFR0+IM2
.18a7	66 09		ror $09				ror 	IFR0+IM1
.18a9	66 08		ror $08				ror 	IFR0+IM0
.18ab	4a		lsr a				lsr 	a
.18ac	66 0a		ror $0a				ror 	IFR0+IM2
.18ae	66 09		ror $09				ror 	IFR0+IM1
.18b0	66 08		ror $08				ror 	IFR0+IM0
.18b2	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.18b4	11 18		ora ($18),y			ora 	(codePtr),y
.18b6	85 08		sta $08				sta 	IFR0+IM0
.18b8	c8		iny				iny 								; consume, loop back
.18b9	80 d6		bra $1891			bra 	_ETMConstant
.18bb					_ETMCExit:
.18bb	60		rts				rts
.18bc					EXPCheckDecimalFollows:
.18bc	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.18be	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.18c0	d0 19		bne $18db			bne 	_ETMCDExit
.18c2	c8		iny				iny 								; consume token.
.18c3	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.18c5	5a		phy				phy									; save current position
.18c6	48		pha				pha 								; save count of chars.
.18c7	38		sec				sec 								; address into YX : y + codePtr+1
.18c8	98		tya				tya
.18c9	65 18		adc $18				adc 	codePtr
.18cb	aa		tax				tax
.18cc	a5 19		lda $19				lda 	codePtr+1
.18ce	69 00		adc #$00			adc 	#0
.18d0	a8		tay				tay
.18d1	68		pla				pla 								; get count.
.18d2	20 cb 32	jsr $32cb			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.18d5	7a		ply				ply 								; go to next token.
.18d6	98		tya				tya
.18d7	38		sec				sec
.18d8	71 18		adc ($18),y			adc 	(codePtr),y
.18da	a8		tay				tay
.18db					_ETMCDExit:
.18db	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.18dc					EXPUnaryAbs:
.18dc	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 					; number to R0
.18df	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.18e2	20 6a 30	jsr $306a			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.18e5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.18e6					EXPUnaryNull:
.18e6	20 ff 17	jsr $17ff			jsr 	EXPTermValueR0
.18e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.18ea					EXPUnaryAsc:
.18ea	20 ec 17	jsr $17ec			jsr 	EXPEvalString 					; string to R0, zTemp0
.18ed	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.18f0	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.18f2	f0 06		beq $18fa			beq 	_EXAZero 						; if so return 0
.18f4	5a		phy				phy 									; otherwise get first character
.18f5	a0 01		ldy #$01			ldy 	#1
.18f7	b1 24		lda ($24),y			lda 	(zTemp0),y
.18f9	7a		ply				ply
.18fa					_EXAZero:
.18fa	a2 08		ldx #$08			ldx 	#IFR0
.18fc	20 29 34	jsr $3429			jsr 	IFloatSetByte
.18ff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1900					EXPUnaryChr:
.1900	20 e0 17	jsr $17e0			jsr 	EXPEvalInteger8 				; expr
.1903	48		pha				pha 									; push on stack
.1904	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.1907	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1909	20 7f 2a	jsr $2a7f			jsr 	StringTempAllocate
.190c	68		pla				pla 									; get value back
.190d	20 b4 2a	jsr $2ab4			jsr 	StringTempWrite 				; write to string.
.1910	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1911					EXPUnaryDec:
.1911	20 ec 17	jsr $17ec			jsr 	EXPEvalString 					; string to R0, zTemp0
.1914	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.1917	5a		phy				phy 									; save position.
.1918	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.191a	20 27 34	jsr $3427			jsr 	IFloatSetZero
.191d	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.191f	f0 3b		beq $195c			beq 	_EUDError 						; empty string is not legit.
.1921	aa		tax				tax 									; count in X.
.1922	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1924					_EUDLoop:
.1924	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.1926	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1928	90 02		bcc $192c			bcc 	_EUDNoCase
.192a	e9 20		sbc #$20			sbc 	#$20
.192c					_EUDNoCase:
.192c	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.192e	90 2c		bcc $195c			bcc 	_EUDError
.1930	c9 3a		cmp #$3a			cmp 	#'9'+1
.1932	90 0a		bcc $193e			bcc 	_EUDOkay
.1934	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1936	90 24		bcc $195c			bcc 	_EUDError
.1938	c9 47		cmp #$47			cmp 	#'F'+1
.193a	b0 20		bcs $195c			bcs 	_EUDError
.193c	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.193e					_EUDOkay:
.193e	29 0f		and #$0f			and 	#15 							; make constant
.1940	da		phx				phx
.1941	48		pha				pha
.1942	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1944	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.1947	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.194a	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.194d	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.1950	68		pla				pla 									; pop constant and OR in
.1951	fa		plx				plx
.1952	05 08		ora $08				ora 	IFR0+IM0
.1954	85 08		sta $08				sta 	IFR0+IM0
.1956	c8		iny				iny 									; next char
.1957	ca		dex				dex 									; done all characters ?
.1958	d0 ca		bne $1924			bne 	_EUDLoop
.195a	7a		ply				ply
.195b	60		rts				rts
.195c					_EUDError:
.195c	4c d3 27	jmp $27d3		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.195f					EXPUnaryInlineDec:
.195f	4c b1 27	jmp $27b1		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1962					EXPUnaryPeek:
.1962	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 				; number to R0
.1965	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.1968	b2 08		lda ($08)			lda 	(IFR0)
.196a	a2 08		ldx #$08			ldx 	#IFR0
.196c	20 29 34	jsr $3429			jsr 	IFloatSetByte
.196f	60		rts				rts
.1970					EXPUnaryDeek:
.1970	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 				; number to R0
.1973	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.1976	5a		phy				phy
.1977	a0 01		ldy #$01			ldy 	#1
.1979	b1 08		lda ($08),y			lda 	(IFR0),y
.197b	7a		ply				ply
.197c	48		pha				pha
.197d	b2 08		lda ($08)			lda 	(IFR0)
.197f	a2 08		ldx #$08			ldx 	#IFR0
.1981	20 29 34	jsr $3429			jsr 	IFloatSetByte
.1984	68		pla				pla
.1985	85 09		sta $09				sta 	IFR0+IM1
.1987	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1988					EXPUnaryFrac:
.1988	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 					; number to R0
.198b	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.198e	20 d2 30	jsr $30d2			jsr 	IFloatFractionalR0 				; get fractional bit.
.1991	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1992					EXPUnaryInkey:
.1992	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.1995	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1997	20 7f 2a	jsr $2a7f			jsr 	StringTempAllocate
.199a	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit
.199d	b0 06		bcs $19a5			bcs 	_EUIExit
.199f	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it.
.19a2	20 b4 2a	jsr $2ab4			jsr 	StringTempWrite
.19a5					_EUIExit:
.19a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.19a6					EXPUnaryInt:
.19a6	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 					; number to R0
.19a9	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; check for )
.19ac	20 28 31	jsr $3128			jsr 	IFloatIntegerR0 				; force to integer.
.19af	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.19b0					EXPUnaryLen:
.19b0	20 ec 17	jsr $17ec			jsr 	EXPEvalString 					; string to R0, zTemp0
.19b3	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.19b6	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.19b8	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.19ba	20 29 34	jsr $3429			jsr 	IFloatSetByte
.19bd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.19be					EXPUnaryParenthesis:
.19be	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 					; number to R0
.19c1	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.19c4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.19c5					EXPUnaryRnd:
.19c5	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 				; number to R0
.19c8	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 				; )
.19cb	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.19cd	20 e4 19	jsr $19e4			jsr 	EXPLoadInRandom
.19d0	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.19d2	85 0b		sta $0b				sta 	IFR0+IExp
.19d4	60		rts				rts
.19d5					ExpUnaryRand:
.19d5	20 cd 17	jsr $17cd			jsr 	EXPEvalInteger 				; integer to R0
.19d8	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 				; )
.19db	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.19dd	20 e4 19	jsr $19e4			jsr 	EXPLoadInRandom
.19e0	20 97 2f	jsr $2f97			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.19e3	60		rts				rts
.19e4					EXPLoadInRandom:
.19e4	20 27 34	jsr $3427			jsr 	IFloatSetZero 				; zero it
.19e7	20 f9 19	jsr $19f9			jsr 	EXPRandom32 				; do a 23 bit number.
.19ea	95 00		sta $00,x			sta 	IM0,x
.19ec	20 f9 19	jsr $19f9			jsr 	EXPRandom32
.19ef	95 01		sta $01,x			sta 	IM1,x
.19f1	20 f9 19	jsr $19f9			jsr 	EXPRandom32
.19f4	29 7f		and #$7f			and 	#$7F
.19f6	95 02		sta $02,x			sta 	IM2,x
.19f8	60		rts				rts
.19f9					EXPRandom32:
.19f9	5a		phy				phy
.19fa	a0 08		ldy #$08			ldy 	#8
.19fc	ad 14 05	lda $0514			lda 	EXPSeed+0
.19ff	0d 15 05	ora $0515			ora 	EXPSeed+1
.1a02	0d 16 05	ora $0516			ora 	EXPSeed+2
.1a05	0d 17 05	ora $0517			ora 	EXPSeed+3
.1a08	d0 08		bne $1a12			bne 	_EXPRNoReset
.1a0a	ee 14 05	inc $0514			inc 	EXPSeed+0
.1a0d	a0 10		ldy #$10			ldy 	#16
.1a0f	8c 17 05	sty $0517			sty 	EXPSeed+3
.1a12					_EXPRNoReset:
.1a12	ad 14 05	lda $0514			lda 	EXPSeed+0
.1a15					_EXPRLoop:
.1a15	0a		asl a				asl		a
.1a16	2e 15 05	rol $0515			rol 	EXPSeed+1
.1a19	2e 16 05	rol $0516			rol 	EXPSeed+2
.1a1c	2e 17 05	rol $0517			rol 	EXPSeed+3
.1a1f	90 02		bcc $1a23			bcc 	_EXPRNoEOR
.1a21	49 c5		eor #$c5			eor 	#$C5
.1a23					_EXPRNoEOR:
.1a23	88		dey				dey
.1a24	d0 ef		bne $1a15			bne 	_EXPRLoop
.1a26	8d 14 05	sta $0514			sta 	EXPSeed+0
.1a29	7a		ply				ply
.1a2a	60		rts				rts
.0514					EXPSeed:
>0514							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1a2b					EXPUnarySgn:
.1a2b	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 					; number to R0
.1a2e	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.1a31	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1a33	20 c9 33	jsr $33c9			jsr 	IFloatCopyToRegister
.1a36	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1a38	20 27 34	jsr $3427			jsr 	IFloatSetZero
.1a3b	a2 0c		ldx #$0c			ldx 	#IFR1
.1a3d	20 f6 30	jsr $30f6			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1a40	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1a41					EXPUnarySqr:
.1a41	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 					; number to R0
.1a44	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.1a47	20 72 30	jsr $3072			jsr 	IFloatSquareRootR0 				; square root.
.1a4a	b0 01		bcs $1a4d			bcs 	_EUSValue 						; error check.
.1a4c	60		rts				rts
.1a4d					_EUSValue:
.1a4d	4c c2 27	jmp $27c2		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1a50					EXPUnaryHex:
.1a50	20 cd 17	jsr $17cd			jsr 	EXPEvalInteger 					; expr
.1a53	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.1a56	5a		phy				phy
.1a57	a9 10		lda #$10			lda 	#16
.1a59	20 c9 31	jsr $31c9			jsr 	IFloatIntegerToStringR0
.1a5c	80 0a		bra $1a68			bra 	EUSMain
.1a5e					EXPUnaryStr:
.1a5e	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 					; expr
.1a61	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.1a64	5a		phy				phy
.1a65	20 24 32	jsr $3224			jsr 	IFloatFloatToStringR0 			; convert to string
.1a68					EUSMain:
.1a68	b0 19		bcs $1a83			bcs 	_EUSError
.1a6a	86 24		stx $24				stx 	zTemp0 							; save string address
.1a6c	84 25		sty $25				sty 	zTemp0+1
.1a6e	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1a70	20 7f 2a	jsr $2a7f			jsr 	StringTempAllocate
.1a73	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1a75	aa		tax				tax 									; count in X
.1a76	a0 01		ldy #$01			ldy 	#1
.1a78					_EUSCopy:
.1a78	b1 24		lda ($24),y			lda 	(zTemp0),y
.1a7a	c8		iny				iny
.1a7b	20 b4 2a	jsr $2ab4			jsr 	StringTempWrite
.1a7e	ca		dex				dex
.1a7f	d0 f7		bne $1a78			bne	 	_EUSCopy
.1a81	7a		ply				ply
.1a82	60		rts				rts
.1a83					_EUSError:
.1a83	4c c2 27	jmp $27c2		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1a86					EXPUnaryInlineString:
.1a86	18		clc				clc 								; physical address -> IM0,1
.1a87	98		tya				tya 								; put the actual address in IM0
.1a88	65 18		adc $18				adc 	codePtr
.1a8a	85 08		sta $08				sta 	IFR0+IM0
.1a8c	a5 19		lda $19				lda 	codePtr+1
.1a8e	69 00		adc #$00			adc 	#0
.1a90	85 09		sta $09				sta 	IFR0+IM1
.1a92	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1a94	a9 80		lda #$80			lda 	#$80
.1a96	85 0b		sta $0b				sta 	IFR0+IExp
.1a98	98		tya				tya	 								; skip over it.
.1a99	38		sec				sec
.1a9a	71 18		adc ($18),y			adc 	(codePtr),y
.1a9c	a8		tay				tay
.1a9d	60		rts				rts
.1a9e					_EXPUISRange:
.1a9e	4c c2 27	jmp $27c2		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1aa1					EXPUnaryLeft:
.1aa1	20 e7 1a	jsr $1ae7			jsr 	EXPCommonStart 					; <string>,
.1aa4	48		pha				pha 									; save string address on stack
.1aa5	da		phx				phx
.1aa6	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1aa8	48		pha				pha
.1aa9	20 e0 17	jsr $17e0			jsr 	EXPEvalInteger8 				; characters to do
.1aac	80 44		bra $1af2			bra 	EXPSubstringCommon
.1aae					EXPUnaryRight:
.1aae	20 e7 1a	jsr $1ae7			jsr 	EXPCommonStart 					; <string>,
.1ab1	48		pha				pha 									; save string address on stack
.1ab2	da		phx				phx
.1ab3	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1ab5	48		pha				pha
.1ab6	20 e0 17	jsr $17e0			jsr 	EXPEvalInteger8 				; characters to do
.1ab9	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1abb	68		pla				pla
.1abc	38		sec				sec
.1abd	e5 24		sbc $24				sbc 	zTemp0
.1abf	b0 02		bcs $1ac3			bcs 	_EUROffLeft
.1ac1	a9 00		lda #$00			lda 	#0
.1ac3					_EUROffLeft:
.1ac3	48		pha				pha 									; start pos
.1ac4	a9 ff		lda #$ff			lda 	#255
.1ac6	80 2a		bra $1af2			bra 	EXPSubstringCommon
.1ac8					EXPUnaryMid:
.1ac8	20 e7 1a	jsr $1ae7			jsr 	EXPCommonStart 					; <string>,
.1acb	48		pha				pha 									; save string address on stack
.1acc	da		phx				phx
.1acd	20 e0 17	jsr $17e0			jsr 	EXPEvalInteger8 				; characters start
.1ad0	f0 12		beq $1ae4			beq 	_EUSError 						; 1 is left
.1ad2	3a		dec a				dec 	a 								; zero based.
.1ad3	48		pha				pha
.1ad4	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1ad6	c9 99		cmp #$99			cmp 	#PR_COMMA
.1ad8	f0 04		beq $1ade			beq 	_EUMLength 						; if so m is provided
.1ada	a9 ff		lda #$ff			lda 	#255 							; default m
.1adc	80 14		bra $1af2			bra 	EXPSubstringCommon
.1ade					_EUMLength:
.1ade	c8		iny				iny 									; consume comma
.1adf	20 e0 17	jsr $17e0			jsr 	EXPEvalInteger8 				; characters to do
.1ae2	80 0e		bra $1af2			bra 	EXPSubstringCommon
.1ae4					_EUSError:
.1ae4	4c d3 27	jmp $27d3		jmp	ErrorV_value
.1ae7					EXPCommonStart:
.1ae7	20 ec 17	jsr $17ec			jsr 	EXPEvalString
.1aea	20 92 29	jsr $2992			jsr 	ERRCheckComma
.1aed	a5 08		lda $08				lda 	IFR0+IM0
.1aef	a6 09		ldx $09				ldx 	IFR0+IM1
.1af1	60		rts				rts
.1af2					EXPSubstringCommon:
.1af2	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1af4	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; check right bracket.
.1af7	68		pla				pla 									; start position
.1af8	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1afa	fa		plx				plx 									; get string address to zTemp2.
.1afb	86 29		stx $29				stx 	zTemp2+1
.1afd	68		pla				pla
.1afe	85 28		sta $28				sta 	zTemp2
.1b00	38		sec				sec 									; length - start is the max count of chars
.1b01	b2 28		lda ($28)			lda 	(zTemp2)
.1b03	e5 27		sbc $27				sbc 	zTemp1+1
.1b05	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1b07	b0 02		bcs $1b0b			bcs 	_EXPSSNoTrim
.1b09	85 26		sta $26				sta 	zTemp1 							; update count with available
.1b0b					_EXPSSNoTrim:
.1b0b	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1b0d	20 7f 2a	jsr $2a7f			jsr 	StringTempAllocate 				; allocate memory for it.
.1b10	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1b12	f0 15		beq $1b29			beq 	_EXPSSExit
.1b14	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1b16	d2 28		cmp ($28)			cmp 	(zTemp2)
.1b18	b0 0f		bcs $1b29			bcs 	_EXPSSExit
.1b1a	5a		phy				phy
.1b1b	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1b1d	c8		iny				iny 									; +1 for the length byte
.1b1e					_EXPSSCopy:
.1b1e	b1 28		lda ($28),y			lda 	(zTemp2),y
.1b20	20 b4 2a	jsr $2ab4			jsr 	StringTempWrite
.1b23	c8		iny				iny
.1b24	c6 26		dec $26				dec 	zTemp1
.1b26	d0 f6		bne $1b1e			bne 	_EXPSSCopy
.1b28	7a		ply				ply
.1b29					_EXPSSExit:
.1b29	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1b2a					EXPUnaryVal:
.1b2a	20 ec 17	jsr $17ec			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b2d	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 					; )
.1b30	20 34 1b	jsr $1b34			jsr 	VALConversionZTemp0
.1b33	60		rts				rts
.1b34					VALConversionZTemp0:
.1b34	5a		phy				phy
.1b35	18		clc				clc
.1b36	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1b38	69 01		adc #$01			adc 	#1
.1b3a	aa		tax				tax
.1b3b	a5 25		lda $25				lda 	zTemp0+1
.1b3d	69 00		adc #$00			adc 	#0
.1b3f	a8		tay				tay
.1b40	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1b42	20 8b 32	jsr $328b			jsr 	IFloatStringToFloatR0 			; do conversion
.1b45	b0 02		bcs $1b49			bcs 	_EUVError
.1b47	7a		ply				ply
.1b48	60		rts				rts
.1b49					_EUVError:
.1b49	4c d3 27	jmp $27d3		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1b4c					AssemblerLookup:
>1b4c	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,74,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,74,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,74,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,74,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,74,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,74,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,74,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,74,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,75,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,75,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,75,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,75,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,75,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,75,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,75,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,75
>1b54	fb 1e 7c 00 4b 1e 7c 4a b8 1e 1e 00 41 1e 7c eb
>1b64	b9 1e f9 00 41 1e 7c 4a 7f 6a 00 00 7a 6a e1 eb
>1b74	23 6a e1 00 7a 6a e1 4a 97 6a 6a 00 7a 6a e1 eb
>1b84	a6 6a 7d 00 7a 6a e1 4a 38 62 00 00 00 62 0b eb
>1b94	ec 62 0b 00 2e 62 0b 4a c3 62 62 00 00 62 0b eb
>1ba4	bf 62 04 00 00 62 0b 4a 42 1d 00 00 3b 1d e7 eb
>1bb4	14 1d e7 00 2e 1d e7 4a d3 1d 1d 00 3b 1d e7 eb
>1bc4	ac 1d 2c 00 2e 1d e7 4a 99 22 00 00 3a 22 39 f5
>1bd4	93 7a 54 00 3a 22 39 4b 45 22 22 00 3a 22 39 f5
>1be4	5e 22 66 00 3b 22 3b 4b 19 01 18 00 19 01 18 f5
>1bf4	c6 01 c5 00 19 01 18 4b 55 01 01 00 19 01 18 f5
>1c04	cc 01 61 00 19 01 18 4b f7 a8 00 00 f7 a8 7d f5
>1c14	0f a8 92 0c f7 a8 7d 4b 75 a8 a8 00 00 a8 7d f5
>1c24	ba a8 03 31 00 a8 7d 4b f6 48 00 00 f6 48 f9 f5
>1c34	0e 48 dd 00 f6 48 f9 4b 8f 48 48 00 00 48 f9 f5
>1c44	a7 48 2b 00 00 48 f9 4b

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1c4c					BinaryPrecedence:
>1c4c	02					.byte	 2	; $ef =
>1c4d	02					.byte	 2	; $f0 <>
>1c4e	02					.byte	 2	; $f1 <=
>1c4f	02					.byte	 2	; $f2 <
>1c50	02					.byte	 2	; $f3 >=
>1c51	02					.byte	 2	; $f4 >
>1c52	01					.byte	 1	; $f5 XOR
>1c53	01					.byte	 1	; $f6 OR
>1c54	01					.byte	 1	; $f7 AND
>1c55	04					.byte	 4	; $f8 DIV
>1c56	04					.byte	 4	; $f9 MOD
>1c57	04					.byte	 4	; $fa <<
>1c58	04					.byte	 4	; $fb >>
>1c59	04					.byte	 4	; $fc /
>1c5a	04					.byte	 4	; $fd *
>1c5b	03					.byte	 3	; $fe -
>1c5c	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1c5d					StructureOffsets:
>1c5d	01					.byte	1  	; $80 REPEAT
>1c5e	ff					.byte	255	; $81 UNTIL
>1c5f	01					.byte	1  	; $82 WHILE
>1c60	ff					.byte	255	; $83 WEND
>1c61	01					.byte	1  	; $84 IF
>1c62	ff					.byte	255	; $85 ENDIF
>1c63	01					.byte	1  	; $86 DO
>1c64	ff					.byte	255	; $87 LOOP
>1c65	01					.byte	1  	; $88 PROC
>1c66	ff					.byte	255	; $89 ENDPROC
>1c67	01					.byte	1  	; $8a FOR
>1c68	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1c69					StandardTokens:
>1c69	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1c70	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1c76	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1c7c	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1c81	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1c84	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1c8a	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1c8d	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1c92	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1c97	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1c9f	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1ca3	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1ca8	00					.byte	$00                                     	; $8c [[end]]
>1ca9	00					.byte	$00                                     	; $8d [[shift]]
>1caa	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1caf	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1cb4	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1cb7	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1cbc	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1cc0	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1cc6	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1ccc	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1cd1	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1cd5	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1cd9	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1cde	01 2c					.byte	$01,$2c                                 	; $99 ,
>1ce0	01 3b					.byte	$01,$3b                                 	; $9a ;
>1ce2	01 3a					.byte	$01,$3a                                 	; $9b :
>1ce4	01 27					.byte	$01,$27                                 	; $9c '
>1ce6	01 29					.byte	$01,$29                                 	; $9d )
>1ce8	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1ced	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1cf2	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1cf7	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1cfc	01 5b					.byte	$01,$5b                                 	; $a2 [
>1cfe	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1d00	01 23					.byte	$01,$23                                 	; $a4 #
>1d02	01 2e					.byte	$01,$2e                                 	; $a5 .
>1d04	00					.byte	0											; $a6
>1d05	00					.byte	0											; $a7
>1d06	00					.byte	0											; $a8
>1d07	00					.byte	0											; $a9
>1d08	00					.byte	0											; $aa
>1d09	00					.byte	0											; $ab
>1d0a	00					.byte	0											; $ac
>1d0b	00					.byte	0											; $ad
>1d0c	00					.byte	0											; $ae
>1d0d	00					.byte	0											; $af
>1d0e	00					.byte	0											; $b0
>1d0f	00					.byte	0											; $b1
>1d10	00					.byte	0											; $b2
>1d11	00					.byte	0											; $b3
>1d12	00					.byte	0											; $b4
>1d13	00					.byte	0											; $b5
>1d14	00					.byte	0											; $b6
>1d15	00					.byte	0											; $b7
>1d16	00					.byte	0											; $b8
>1d17	00					.byte	0											; $b9
>1d18	00					.byte	0											; $ba
>1d19	00					.byte	0											; $bb
>1d1a	00					.byte	0											; $bc
>1d1b	00					.byte	0											; $bd
>1d1c	00					.byte	0											; $be
>1d1d	00					.byte	0											; $bf
>1d1e	00					.byte	0											; $c0
>1d1f	00					.byte	0											; $c1
>1d20	00					.byte	0											; $c2
>1d21	00					.byte	0											; $c3
>1d22	00					.byte	0											; $c4
>1d23	00					.byte	0											; $c5
>1d24	00					.byte	0											; $c6
>1d25	00					.byte	0											; $c7
>1d26	00					.byte	0											; $c8
>1d27	00					.byte	0											; $c9
>1d28	00					.byte	0											; $ca
>1d29	00					.byte	0											; $cb
>1d2a	00					.byte	0											; $cc
>1d2b	00					.byte	0											; $cd
>1d2c	00					.byte	0											; $ce
>1d2d	00					.byte	0											; $cf
>1d2e	00					.byte	0											; $d0
>1d2f	00					.byte	0											; $d1
>1d30	00					.byte	0											; $d2
>1d31	00					.byte	0											; $d3
>1d32	00					.byte	0											; $d4
>1d33	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1d39	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1d3f	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1d47	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1d4e	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1d54	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1d5a	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1d5f	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1d64	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1d69	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1d6e	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1d73	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1d79	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1d7e	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1d86	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1d8d	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1d92	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1d97	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1d9d	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1da2	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1da8	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1dad	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1db3	01 28					.byte	$01,$28                                 	; $eb (
>1db5	01 26					.byte	$01,$26                                 	; $ec &
>1db7	00					.byte	$00                                     	; $ed [[decimal]]
>1db8	00					.byte	$00                                     	; $ee [[string]]
>1db9	01 3d					.byte	$01,$3d                                 	; $ef =
>1dbb	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1dbe	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1dc1	01 3c					.byte	$01,$3c                                 	; $f2 <
>1dc3	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1dc6	01 3e					.byte	$01,$3e                                 	; $f4 >
>1dc8	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1dcc	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1dcf	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1dd3	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1dd7	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1ddb	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1dde	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1de1	01 2f					.byte	$01,$2f                                 	; $fc /
>1de3	01 2a					.byte	$01,$2a                                 	; $fd *
>1de5	01 2d					.byte	$01,$2d                                 	; $fe -
>1de7	01 2b					.byte	$01,$2b                                 	; $ff +
>1de9	ff					.byte	$FF
.1dea					AlternateTokens:
>1dea	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1df0	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1df4	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1df8	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1dfd	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1e01	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1e08	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1e0d	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1e12	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1e17	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1e1d	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1e22	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1e29	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1e31	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1e35	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>1e39	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>1e3f	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8d90 renumber
>1e47	52
>1e48	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1e49					VectorTable:
>1e49	a1 26					.word	Command_REPEAT           ; $80 REPEAT
>1e4b	aa 26					.word	Command_UNTIL            ; $81 UNTIL
>1e4d	84 27					.word	Command_WHILE            ; $82 WHILE
>1e4f	a5 27					.word	Command_WEND             ; $83 WEND
>1e51	77 26					.word	IfCommand                ; $84 IF
>1e53	a0 26					.word	EndIf                    ; $85 ENDIF
>1e55	f9 24					.word	Command_DO               ; $86 DO
>1e57	11 25					.word	Command_LOOP             ; $87 LOOP
>1e59	02 16					.word	NoExec08                 ; $88 PROC
>1e5b	ed 24					.word	Command_ENDPROC          ; $89 ENDPROC
>1e5d	1a 25					.word	Command_FOR              ; $8a FOR
>1e5f	a7 25					.word	Command_NEXT             ; $8b NEXT
>1e61	83 15					.word	RUNEndOfLine             ; $8c [[END]]
>1e63	df 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1e65	99 26					.word	ElseCode                 ; $8e ELSE
>1e67	02 16					.word	NoExec01                 ; $8f THEN
>1e69	02 16					.word	NoExec02                 ; $90 TO
>1e6b	02 16					.word	NoExec03                 ; $91 STEP
>1e6d	2a 13					.word	CommandLET               ; $92 LET
>1e6f	7f 12					.word	Command_Print            ; $93 PRINT
>1e71	78 12					.word	Command_Input            ; $94 INPUT
>1e73	b1 24					.word	Command_CALL             ; $95 CALL
>1e75	ed 15					.word	Command_Sys              ; $96 SYS
>1e77	f8 14					.word	Command_REM              ; $97 REM
>1e79	02 25					.word	Command_EXIT             ; $98 EXIT
>1e7b	02 16					.word	NoExec04                 ; $99 ,
>1e7d	02 16					.word	NoExec05                 ; $9a ;
>1e7f	02 16					.word	NoExec06                 ; $9b :
>1e81	f8 14					.word	Command_REM2             ; $9c '
>1e83	02 16					.word	NoExec07                 ; $9d )
>1e85	21 12					.word	Command_Poke             ; $9e POKE
>1e87	1e 12					.word	Command_Doke             ; $9f DOKE
>1e89	84 14					.word	Command_READ             ; $a0 READ
>1e8b	eb 14					.word	Command_DATA             ; $a1 DATA
>1e8d	0d 10					.word	Command_AssemblerStart   ; $a2 [
>1e8f	fd 2b					.word	NotImplemented           ; $a3 ]
>1e91	fd 2b					.word	NotImplemented           ; $a4 #
>1e93	fd 2b					.word	NotImplemented           ; $a5 .
>1e95	fd 2b					.word	NotImplemented           ; $a6
>1e97	fd 2b					.word	NotImplemented           ; $a7
>1e99	fd 2b					.word	NotImplemented           ; $a8
>1e9b	fd 2b					.word	NotImplemented           ; $a9
>1e9d	fd 2b					.word	NotImplemented           ; $aa
>1e9f	fd 2b					.word	NotImplemented           ; $ab
>1ea1	fd 2b					.word	NotImplemented           ; $ac
>1ea3	fd 2b					.word	NotImplemented           ; $ad
>1ea5	fd 2b					.word	NotImplemented           ; $ae
>1ea7	fd 2b					.word	NotImplemented           ; $af
>1ea9	fd 2b					.word	NotImplemented           ; $b0
>1eab	fd 2b					.word	NotImplemented           ; $b1
>1ead	fd 2b					.word	NotImplemented           ; $b2
>1eaf	fd 2b					.word	NotImplemented           ; $b3
>1eb1	fd 2b					.word	NotImplemented           ; $b4
>1eb3	fd 2b					.word	NotImplemented           ; $b5
>1eb5	fd 2b					.word	NotImplemented           ; $b6
>1eb7	fd 2b					.word	NotImplemented           ; $b7
>1eb9	fd 2b					.word	NotImplemented           ; $b8
>1ebb	fd 2b					.word	NotImplemented           ; $b9
>1ebd	fd 2b					.word	NotImplemented           ; $ba
>1ebf	fd 2b					.word	NotImplemented           ; $bb
>1ec1	fd 2b					.word	NotImplemented           ; $bc
>1ec3	fd 2b					.word	NotImplemented           ; $bd
>1ec5	fd 2b					.word	NotImplemented           ; $be
>1ec7	fd 2b					.word	NotImplemented           ; $bf
>1ec9	fd 2b					.word	NotImplemented           ; $c0
>1ecb	fd 2b					.word	NotImplemented           ; $c1
>1ecd	fd 2b					.word	NotImplemented           ; $c2
>1ecf	fd 2b					.word	NotImplemented           ; $c3
>1ed1	fd 2b					.word	NotImplemented           ; $c4
>1ed3	fd 2b					.word	NotImplemented           ; $c5
>1ed5	fd 2b					.word	NotImplemented           ; $c6
>1ed7	fd 2b					.word	NotImplemented           ; $c7
>1ed9	fd 2b					.word	NotImplemented           ; $c8
>1edb	fd 2b					.word	NotImplemented           ; $c9
>1edd	fd 2b					.word	NotImplemented           ; $ca
>1edf	fd 2b					.word	NotImplemented           ; $cb
>1ee1	fd 2b					.word	NotImplemented           ; $cc
>1ee3	fd 2b					.word	NotImplemented           ; $cd
>1ee5	fd 2b					.word	NotImplemented           ; $ce
>1ee7	fd 2b					.word	NotImplemented           ; $cf
>1ee9	fd 2b					.word	NotImplemented           ; $d0
>1eeb	fd 2b					.word	NotImplemented           ; $d1
>1eed	fd 2b					.word	NotImplemented           ; $d2
>1eef	fd 2b					.word	NotImplemented           ; $d3
>1ef1	fd 2b					.word	NotImplemented           ; $d4
>1ef3	70 19					.word	EXPUnaryDeek             ; $d5 DEEK(
>1ef5	62 19					.word	EXPUnaryPeek             ; $d6 PEEK(
>1ef7	ae 1a					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1ef9	a1 1a					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1efb	c8 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1efd	5e 1a					.word	EXPUnaryStr              ; $da STR$(
>1eff	2a 1b					.word	EXPUnaryVal              ; $db VAL(
>1f01	2b 1a					.word	EXPUnarySgn              ; $dc SGN(
>1f03	dc 18					.word	EXPUnaryAbs              ; $dd ABS(
>1f05	b0 19					.word	EXPUnaryLen              ; $de LEN(
>1f07	41 1a					.word	EXPUnarySqr              ; $df SQR(
>1f09	00 19					.word	EXPUnaryChr              ; $e0 CHR$(
>1f0b	ea 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1f0d	92 19					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1f0f	fd 2b					.word	NotImplemented           ; $e3 EVENT(
>1f11	fd 2b					.word	NotImplemented           ; $e4 TIME
>1f13	a6 19					.word	EXPUnaryInt              ; $e5 INT(
>1f15	88 19					.word	EXPUnaryFrac             ; $e6 FRAC(
>1f17	11 19					.word	EXPUnaryDec              ; $e7 DEC(
>1f19	50 1a					.word	EXPUnaryHex              ; $e8 HEX$(
>1f1b	c5 19					.word	EXPUnaryRnd              ; $e9 RND(
>1f1d	d5 19					.word	ExpUnaryRand             ; $ea RAND(
>1f1f	be 19					.word	EXPUnaryParenthesis      ; $eb (
>1f21	e6 18					.word	EXPUnaryNull             ; $ec &
>1f23	5f 19					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1f25	86 1a					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1f27	bf 16					.word	EXPCompareEqual          ; $ef =
>1f29	da 16					.word	EXPCompareNotEqual       ; $f0 <>
>1f2b	e3 16					.word	EXPCompareLessEqual      ; $f1 <=
>1f2d	c8 16					.word	EXPCompareLess           ; $f2 <
>1f2f	ec 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1f31	d1 16					.word	EXPCompareGreater        ; $f4 >
>1f33	6c 16					.word	EXPBinXor                ; $f5 XOR
>1f35	60 16					.word	EXPBinOr                 ; $f6 OR
>1f37	54 16					.word	EXPBinAnd                ; $f7 AND
>1f39	2c 16					.word	EXPBinIDiv               ; $f8 DIV
>1f3b	3d 16					.word	EXPBinIMod               ; $f9 MOD
>1f3d	37 17					.word	EXPBinLeft               ; $fa <<
>1f3f	3f 17					.word	EXPBinRight              ; $fb >>
>1f41	20 16					.word	EXPBinFDiv               ; $fc /
>1f43	17 16					.word	EXPBinMul                ; $fd *
>1f45	0e 16					.word	EXPBinSub                ; $fe -
>1f47	05 16					.word	EXPBinAdd                ; $ff +
.1f49					AlternateVectorTable:
>1f49	8e 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1f4b	7b 14					.word	Command_NEW              ; $8d81 NEW
>1f4d	77 15					.word	Command_RUN              ; $8d82 RUN
>1f4f	ea 15					.word	Command_STOP             ; $8d83 STOP
>1f51	e7 15					.word	Command_END              ; $8d84 END
>1f53	80 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1f55	a4 13					.word	Command_LIST             ; $8d86 LIST
>1f57	6b 2b					.word	Command_SAVE             ; $8d87 SAVE
>1f59	2a 2b					.word	Command_LOAD             ; $8d88 LOAD
>1f5b	5d 26					.word	Command_GOSUB            ; $8d89 GOSUB
>1f5d	48 12					.word	Command_GOTO             ; $8d8a GOTO
>1f5f	6b 26					.word	Command_RETURN           ; $8d8b RETURN
>1f61	49 15					.word	Command_RESTORE          ; $8d8c RESTORE
>1f63	02 11					.word	CommandDIM               ; $8d8d DIM
>1f65	c1 2a					.word	Command_DIR              ; $8d8e DIR
>1f67	fe 2a					.word	Command_ERASE            ; $8d8f ERASE
>1f69	05 15					.word	Command_RENUMBER         ; $8d90 RENUMBER

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1f6b					TOKDetokenise:
.1f6b	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.1f6d	84 29		sty $29				sty 	zTemp2+1
.1f6f	9c 1a 05	stz $051a			stz		TOKLastCharacter 			; clear last character
.1f72					_TOKDLoop:
.1f72	20 b7 1f	jsr $1fb7			jsr 	TOKDGet 					; get next
.1f75	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1f77	f0 3c		beq $1fb5			beq 	_TOKDExit
.1f79	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1f7b	f0 33		beq $1fb0			beq 	_TOKDDataItem
.1f7d	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1f7f	f0 2f		beq $1fb0			beq 	_TOKDDataItem
.1f81	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.1f83	f0 19		beq $1f9e			beq 	_TOKAmpersand
.1f85	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1f87	10 05		bpl $1f8e			bpl 	_TOKDNotToken
.1f89	20 7d 20	jsr $207d			jsr 	TOKDToken 					; token to text.
.1f8c	80 e4		bra $1f72			bra 	_TOKDLoop
.1f8e					_TOKDNotToken:
.1f8e	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1f90	90 05		bcc $1f97			bcc 	_TOKDNotIdentifier
.1f92	20 f4 1f	jsr $1ff4			jsr 	TOKDIdentifier
.1f95	80 db		bra $1f72			bra 	_TOKDLoop
.1f97					_TOKDNotIdentifier:
.1f97	a0 0a		ldy #$0a			ldy 	#10
.1f99	20 37 20	jsr $2037			jsr 	TOKDInteger
.1f9c	80 d4		bra $1f72			bra 	_TOKDLoop
.1f9e					_TOKAmpersand:
.1f9e	20 bf 20	jsr $20bf			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.1fa1	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.1fa3	20 c0 1f	jsr $1fc0			jsr 	TOKDOutput
.1fa6	20 b7 1f	jsr $1fb7			jsr 	TOKDGet 					; get first char of integer
.1fa9	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.1fab	20 37 20	jsr $2037			jsr 	TOKDInteger
.1fae	80 c2		bra $1f72			bra 	_TOKDLoop
.1fb0					_TOKDDataItem:
.1fb0	20 cd 1f	jsr $1fcd			jsr 	TOKDDataItem
.1fb3	80 bd		bra $1f72			bra 	_TOKDLoop
.1fb5					_TOKDExit:
.1fb5	18		clc				clc
.1fb6	60		rts				rts
.1fb7	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.1fb9	e6 28		inc $28				inc 	zTemp2
.1fbb	d0 02		bne $1fbf			bne 	_TKDGExit
.1fbd	e6 29		inc $29				inc 	zTemp2+1
.1fbf					_TKDGExit:
.1fbf	60		rts				rts
.1fc0					TOKDOutput:
.1fc0	8d 1a 05	sta $051a			sta 	TOKLastCharacter
.1fc3	6c 18 05	jmp ($0518)			jmp 	(TOKOutputMethod)
.1fc6					TOKSetDetokeniseOutput:
.1fc6	8e 18 05	stx $0518			stx 	TOKOutputMethod
.1fc9	8c 19 05	sty $0519			sty 	TOKOutputMethod+1
.1fcc	60		rts				rts
.0518					TOKOutputMethod:
>0518							.fill 	2
.051a					TOKLastCharacter:
>051a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1fcd					TOKDDataItem:
.1fcd	a8		tay				tay 								; type in Y
.1fce	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1fd0	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1fd2	f0 02		beq $1fd6			beq 	_TOKDDIsString
.1fd4	a9 2e		lda #$2e			lda 	#'.'
.1fd6					_TOKDDIsString:
.1fd6	20 c0 1f	jsr $1fc0			jsr 	TOKDOutput 					; dump it
.1fd9	20 b7 1f	jsr $1fb7			jsr 	TOKDGet 					; get length into X
.1fdc	aa		tax				tax
.1fdd					_TOKDDOutput:
.1fdd	ca		dex				dex 								; are we complete
.1fde	e0 ff		cpx #$ff			cpx 	#255
.1fe0	f0 08		beq $1fea			beq 	_TOKDDEnd
.1fe2	20 b7 1f	jsr $1fb7			jsr 	TOKDGet 					; get character and output it
.1fe5	20 c0 1f	jsr $1fc0			jsr 	TOKDOutput
.1fe8	80 f3		bra $1fdd			bra 	_TOKDDOutput
.1fea					_TOKDDEnd:
.1fea	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1fec	d0 05		bne $1ff3			bne 	_TOKDDNotString
.1fee	a9 22		lda #$22			lda 	#'"'
.1ff0	20 c0 1f	jsr $1fc0			jsr 	TOKDOutput
.1ff3					_TOKDDNotString:
.1ff3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1ff4					TOKDIdentifier:
.1ff4	a0 ff		ldy #$ff			ldy 	#$FF
.1ff6	8c 1b 05	sty $051b			sty 	TOKDIFirstChar
.1ff9					_TOKDLoop:
.1ff9	a8		tay				tay 								; token in Y
.1ffa	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.1ffc	c0 64		cpy #$64			cpy 	#$64
.1ffe	f0 0b		beq $200b			beq 	_TOKDIOutput
.2000	98		tya				tya 								; handle a-z
.2001	18		clc				clc
.2002	69 21		adc #$21			adc	 	#$21
.2004	c0 5a		cpy #$5a			cpy 	#$5A
.2006	90 03		bcc $200b			bcc 	_TOKDIOutput
.2008	38		sec				sec 								; handle 0-9
.2009	e9 4b		sbc #$4b			sbc 	#$4B
.200b					_TOKDIOutput:
.200b	2c 1b 05	bit $051b			bit 	TOKDIFirstChar
.200e	10 08		bpl $2018			bpl 	_TOKDINoSpacing
.2010	48		pha				pha
.2011	20 ba 20	jsr $20ba			jsr 	TOKDSpacing
.2014	9c 1b 05	stz $051b			stz 	TOKDIFirstChar
.2017	68		pla				pla
.2018					_TOKDINoSpacing:
.2018	20 c0 1f	jsr $1fc0			jsr 	TOKDOutput
.201b	20 b7 1f	jsr $1fb7			jsr 	TOKDGet 					; get next token
.201e	c9 7c		cmp #$7c			cmp 	#$7C
.2020	90 d7		bcc $1ff9			bcc 	_TOKDLoop
.2022	f0 12		beq $2036			beq 	_TOKDIExit 					; it's a number, no tail.
.2024	4a		lsr a				lsr 	a 							; string ?
.2025	90 07		bcc $202e			bcc 	_TOKDICheckArray
.2027	48		pha				pha
.2028	a9 24		lda #$24			lda 	#"$"
.202a	20 c0 1f	jsr $1fc0			jsr 	TOKDOutput
.202d	68		pla				pla
.202e					_TOKDICheckArray:
.202e	4a		lsr a				lsr 	a 							; array ?
.202f	90 05		bcc $2036			bcc 	_TOKDIExit
.2031	a9 28		lda #$28			lda 	#"("
.2033	20 c0 1f	jsr $1fc0			jsr 	TOKDOutput
.2036					_TOKDIExit:
.2036	60		rts				rts
.051b					TOKDIFirstChar:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.2037					TOKDInteger:
.2037	5a		phy				phy 								; save base
.2038	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.203a	20 29 34	jsr $3429			jsr 	IFloatSetByte
.203d					_TOKDILoop:
.203d	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F
.203f	c9 40		cmp #$40			cmp 	#$40
.2041	b0 1d		bcs $2060			bcs 	_TOKDIHaveInteger
.2043	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.2045	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.2048	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.204b	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.204e	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.2051	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.2054	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.2057	20 b7 1f	jsr $1fb7			jsr 	TOKDGet 					; OR byte in.
.205a	05 08		ora $08				ora 	IFR0+IM0
.205c	85 08		sta $08				sta 	IFR0+IM0
.205e	80 dd		bra $203d			bra 	_TOKDILoop
.2060					_TOKDIHaveInteger:
.2060	7a		ply				ply 								; restore base
.2061	98		tya				tya 								; base in A
.2062	20 c9 31	jsr $31c9			jsr 	IFloatIntegerToStringR0
.2065	86 24		stx $24				stx 	zTemp0
.2067	84 25		sty $25				sty 	zTemp0+1
.2069	b2 24		lda ($24)			lda 	(zTemp0)
.206b	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.206d	b1 24		lda ($24),y			lda 	(zTemp0),y
.206f	20 ba 20	jsr $20ba			jsr 	TOKDSpacing 				; check spacing okay.
.2072					_TOKDOutput:
.2072	b1 24		lda ($24),y			lda 	(zTemp0),y
.2074	20 c0 1f	jsr $1fc0			jsr 	TOKDOutput
.2077	c8		iny				iny
.2078	b1 24		lda ($24),y			lda 	(zTemp0),y
.207a	d0 f6		bne $2072			bne 	_TOKDOutput
.207c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.207d					TOKDToken:
.207d	a2 69		ldx #$69			ldx 	#StandardTokens & $FF 		; standard table
.207f	a0 1c		ldy #$1c			ldy 	#StandardTokens >> 8
.2081	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.2083	d0 07		bne $208c			bne 	_TOKDSearch
.2085	20 b7 1f	jsr $1fb7			jsr 	TOKDGet 					; get next
.2088	a2 ea		ldx #$ea			ldx 	#AlternateTokens & $FF 		; alt table
.208a	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.208c					_TOKDSearch:
.208c	86 24		stx $24				stx 	zTemp0 						; put table in zTemp0
.208e	84 25		sty $25				sty 	zTemp0+1
.2090	aa		tax				tax 								; token ID in X.
.2091					_TOKDFind:
.2091	ca		dex				dex 								; reached the start
.2092	10 0d		bpl $20a1			bpl 	_TOKDFound
.2094	38		sec				sec 								; go to next entry
.2095	b2 24		lda ($24)			lda 	(zTemp0)
.2097	65 24		adc $24				adc 	zTemp0
.2099	85 24		sta $24				sta 	zTemp0
.209b	90 f4		bcc $2091			bcc 	_TOKDFind
.209d	e6 25		inc $25				inc 	zTemp0+1
.209f	80 f0		bra $2091			bra 	_TOKDFind
.20a1					_TOKDFound:
.20a1	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X
.20a3	f0 14		beq $20b9			beq 	_TOKDExit
.20a5	aa		tax				tax
.20a6	a0 01		ldy #$01			ldy 	#1 							; output the token.
.20a8	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.20aa	20 ba 20	jsr $20ba			jsr 	TOKDSpacing
.20ad					_TOKDOutput:
.20ad	b1 24		lda ($24),y			lda 	(zTemp0),y
.20af	20 70 24	jsr $2470			jsr 	TOKToLower
.20b2	20 c0 1f	jsr $1fc0			jsr 	TOKDOutput
.20b5	c8		iny				iny
.20b6	ca		dex				dex
.20b7	d0 f4		bne $20ad			bne 	_TOKDOutput
.20b9					_TOKDExit:
.20b9	60		rts				rts
.20ba					TOKDSpacing:
.20ba	20 87 24	jsr $2487			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.20bd	90 0d		bcc $20cc			bcc 	TOKDSExit
.20bf					TOKDSpaceLastAlpha:
.20bf	ad 1a 05	lda $051a			lda 	TOKLastCharacter			; and last character also alphanumeric
.20c2	20 87 24	jsr $2487			jsr 	TOKIsIdentifierElement
.20c5	90 05		bcc $20cc			bcc 	TOKDSExit
.20c7	a9 20		lda #$20			lda 	#" " 						; we need a space.
.20c9	20 c0 1f	jsr $1fc0			jsr 	TOKDOutput
.20cc					TOKDSExit:
.20cc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.20cd					PGMDeleteLine:
.20cd	20 80 21	jsr $2180			jsr 	PGMEndProgram 				; end of program into zTemp0
.20d0	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.20d2	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.20d5	85 27		sta $27				sta 	zTemp1+1
.20d7					_PGMDLoop:
.20d7	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.20d9	38		sec				sec
.20da	f0 3a		beq $2116			beq 	_PGMDExit
.20dc	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.20de	b1 26		lda ($26),y			lda 	(zTemp1),y
.20e0	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.20e3	d0 08		bne $20ed			bne 	_PGMDNext
.20e5	c8		iny				iny
.20e6	b1 26		lda ($26),y			lda 	(zTemp1),y
.20e8	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.20eb	f0 0d		beq $20fa			beq 	_PGMDDelete
.20ed					_PGMDNext:
.20ed	18		clc				clc
.20ee	b2 26		lda ($26)			lda 	(zTemp1)
.20f0	65 26		adc $26				adc 	zTemp1
.20f2	85 26		sta $26				sta 	zTemp1
.20f4	90 e1		bcc $20d7			bcc 	_PGMDLoop
.20f6	e6 27		inc $27				inc 	zTemp1+1
.20f8	80 dd		bra $20d7			bra 	_PGMDLoop
.20fa					_PGMDDelete:
.20fa	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.20fc	a8		tay				tay
.20fd					_PGMDCopy:
.20fd	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.20ff	92 26		sta ($26)			sta 	(zTemp1)
.2101	a5 26		lda $26				lda 	zTemp1 						; reached the end ?
.2103	c5 24		cmp $24				cmp 	zTemp0
.2105	d0 07		bne $210e			bne 	_PGMDNext2
.2107	a5 27		lda $27				lda 	zTemp1+1
.2109	c5 25		cmp $25				cmp 	zTemp0+1
.210b	18		clc				clc
.210c	f0 08		beq $2116			beq 	_PGMDExit
.210e					_PGMDNext2:
.210e	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.2110	d0 eb		bne $20fd			bne 	_PGMDCopy
.2112	e6 27		inc $27				inc 	zTemp1+1
.2114	80 e7		bra $20fd			bra 	_PGMDCopy
.2116					_PGMDExit:
.2116	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.2117					PGMInsertLine:
.2117	20 80 21	jsr $2180			jsr 	PGMEndProgram 				; end of program into zTemp0
.211a	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.211c	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.211f	85 27		sta $27				sta 	zTemp1+1
.2121					_PGMILoop:
.2121	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.2123	f0 1c		beq $2141			beq 	_PGMIInsert
.2125	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.2127	b1 26		lda ($26),y			lda 	(zTemp1),y
.2129	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.212c	c8		iny				iny
.212d	b1 26		lda ($26),y			lda 	(zTemp1),y
.212f	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.2132	b0 0d		bcs $2141			bcs 	_PGMIInsert 				; insert here.
.2134	18		clc				clc
.2135	b2 26		lda ($26)			lda 	(zTemp1)
.2137	65 26		adc $26				adc 	zTemp1
.2139	85 26		sta $26				sta 	zTemp1
.213b	90 e4		bcc $2121			bcc 	_PGMILoop
.213d	e6 27		inc $27				inc 	zTemp1+1
.213f	80 e0		bra $2121			bra 	_PGMILoop
.2141					_PGMIInsert:
.2141	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.2144					_PGMIInsertLoop:
.2144	b2 24		lda ($24)			lda 	(zTemp0)
.2146	91 24		sta ($24),y			sta 	(zTemp0),y
.2148	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.214a	c5 24		cmp $24				cmp 	zTemp0
.214c	d0 06		bne $2154			bne 	_PGMINext
.214e	a5 27		lda $27				lda 	zTemp1+1
.2150	c5 25		cmp $25				cmp 	zTemp0+1
.2152	f0 0a		beq $215e			beq 	_PGMIInserted
.2154					_PGMINext:
.2154	a5 24		lda $24				lda 	zTemp0
.2156	d0 02		bne $215a			bne 	_PGMINoBorrow
.2158	c6 25		dec $25				dec 	zTemp0+1
.215a					_PGMINoBorrow:
.215a	c6 24		dec $24				dec 	zTemp0
.215c	80 e6		bra $2144			bra 	_PGMIInsertLoop
.215e					_PGMIInserted:
.215e	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.2160					_PGMICopyLoop:
.2160	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.2163	91 26		sta ($26),y			sta 	(zTemp1),y
.2165	c8		iny				iny
.2166	cc 00 04	cpy $0400			cpy 	TOKLineSize
.2169	d0 f5		bne $2160			bne 	_PGMICopyLoop
.216b	18		clc				clc
.216c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.216d					PGMSetBaseAddress:
.216d	8e 1c 05	stx $051c			stx 	PGMBaseHigh 				; use memory from here
.2170	8c 1d 05	sty $051d			sty 	PGMEndMemoryHigh 			; to here.
.2173	60		rts				rts
.2174					PGMNewProgram:
.2174	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.2176	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.2179	85 25		sta $25				sta 	zTemp0+1
.217b	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.217d	92 24		sta ($24)			sta 	(zTemp0)
.217f	60		rts				rts
.2180					PGMEndProgram:
.2180	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.2182	ad 1c 05	lda $051c			lda 	PGMBaseHigh
.2185	85 25		sta $25				sta 	zTemp0+1
.2187					_PGMEPLoop:
.2187	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.2189	f0 0b		beq $2196			beq 	_PGMEPExit
.218b	18		clc				clc 								; no, advance to next
.218c	65 24		adc $24				adc 	zTemp0
.218e	85 24		sta $24				sta 	zTemp0
.2190	90 f5		bcc $2187			bcc 	_PGMEPLoop
.2192	e6 25		inc $25				inc 	zTemp0+1
.2194	80 f1		bra $2187			bra 	_PGMEPLoop
.2196					_PGMEPExit:
.2196	60		rts				rts
.051c					PGMBaseHigh:
>051c							.fill 	1
.051d					PGMEndMemoryHigh:
>051d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.2197					TOKResetElement:
.2197	9c 1e 05	stz $051e			stz 	TOKElement
.219a	60		rts				rts
.219b					TOKWriteElement:
.219b	da		phx				phx
.219c	ae 1e 05	ldx $051e			ldx 	TOKElement
.219f	9d 1f 05	sta $051f,x			sta 	TOKElementText,x
.21a2	9e 20 05	stz $0520,x			stz 	TOKElementText+1,x
.21a5	fa		plx				plx
.21a6	ee 1e 05	inc $051e			inc 	TOKElement
.21a9	60		rts				rts
.051e					TOKElement:
>051e							.fill 	1
.051f					TOKElementText:
>051f							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.21aa					TOKTokeniseConstant:
.21aa	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.21ac	48		pha				pha 								; save on stack
.21ad	29 c0		and #$c0			and 	#$C0
.21af	05 09		ora $09				ora 	IFR0+IM1
.21b1	05 0a		ora $0a				ora 	IFR0+IM2
.21b3	f0 10		beq $21c5			beq 	_TTCLess
.21b5	da		phx				phx
.21b6	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.21b8					_TTCShiftRight:
.21b8	46 0a		lsr $0a				lsr 	IFR0+IM2
.21ba	66 09		ror $09				ror 	IFR0+IM1
.21bc	66 08		ror $08				ror 	IFR0+IM0
.21be	ca		dex				dex
.21bf	d0 f7		bne $21b8			bne 	_TTCShiftRight
.21c1	fa		plx				plx
.21c2	20 aa 21	jsr $21aa			jsr 	TOKTokeniseConstant
.21c5					_TTCLess:
.21c5	68		pla				pla
.21c6	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.21c8	20 68 22	jsr $2268			jsr 	TOKWriteA
.21cb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.21cc					TOKTokeniseDecimals:
.21cc	20 7b 22	jsr $227b			jsr 	TOKGetNext 					; consume the .
.21cf	20 f4 23	jsr $23f4			jsr 	TOKExtractInteger 			; pull an integer out as text.
.21d2	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.21d4	20 68 22	jsr $2268			jsr 	TOKWriteA
.21d7	20 dc 21	jsr $21dc			jsr 	TOKOutputElementBuffer 		; then the buffer
.21da	18		clc				clc
.21db	60		rts				rts
.21dc					TOKOutputElementBuffer:
.21dc	ad 1e 05	lda $051e			lda 	TOKElement 					; get count and write that
.21df	20 68 22	jsr $2268			jsr 	TOKWriteA
.21e2	a8		tay				tay 								; put in Y
.21e3	f0 0c		beq $21f1			beq 	_TOEExit 					; exit if empty which is okay.
.21e5	a2 01		ldx #$01			ldx 	#1
.21e7					_TOELoop:
.21e7	bd 1e 05	lda $051e,x			lda 	TOKElement,x
.21ea	20 68 22	jsr $2268			jsr 	TOKWriteA
.21ed	e8		inx				inx
.21ee	88		dey				dey
.21ef	d0 f6		bne $21e7			bne 	_TOELoop
.21f1					_TOEExit:
.21f1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.21f2					TOKTokenise:
.21f2	8c 1f 06	sty $061f			sty 	TOKDataSource+1 			; save source routine pointer
.21f5	8e 1e 06	stx $061e			stx 	TOKDataSource
.21f8	a9 01		lda #$01			lda 	#1 							; set first element flag.
.21fa	8d 20 06	sta $0620			sta 	TOKIsFirstElement
.21fd	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.21ff	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.2202	9c 01 04	stz $0401			stz 	TOKLineNumber
.2205	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2208					_TOKMainLoop:
.2208	20 77 22	jsr $2277			jsr 	TOKGet 						; what follows.
.220b	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.220d	f0 50		beq $225f			beq 	_TOKExit
.220f	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.2211	d0 05		bne $2218			bne 	_TOKElement
.2213	20 7b 22	jsr $227b			jsr 	TOKGetNext
.2216	80 f0		bra $2208			bra 	_TOKMainLoop
.2218					_TOKElement:
.2218	20 7b 24	jsr $247b			jsr 	TOKIsDigit 					; is it 0..9
.221b	90 16		bcc $2233			bcc 	_TOKNotDigit
.221d	20 cb 23	jsr $23cb			jsr 	TOKTokeniseInteger 			; get integer
.2220	b0 44		bcs $2266			bcs 	_TOKFail 					; did it fail ?
.2222	9c 20 06	stz $0620			stz 	TOKIsFirstElement 			; clear first element flag
.2225	20 77 22	jsr $2277			jsr 	TOKGet 						; what follows ?
.2228	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.222a	d0 dc		bne $2208			bne 	_TOKMainLoop
.222c	20 cc 21	jsr $21cc			jsr 	TOKTokeniseDecimals
.222f	b0 35		bcs $2266			bcs 	_TOKFail
.2231	80 d5		bra $2208			bra 	_TOKMainLoop
.2233					_TOKNotDigit:
.2233	9c 20 06	stz $0620			stz 	TOKIsFirstElement 			; clear first element flag
.2236	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.2238	d0 07		bne $2241			bne 	_TOKNotHex
.223a	20 d1 22	jsr $22d1			jsr 	TOKTokeniseHexadecimal
.223d	b0 27		bcs $2266			bcs 	_TOKFail
.223f	80 c7		bra $2208			bra 	_TOKMainLoop
.2241					_TOKNotHex:
.2241	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.2243	d0 07		bne $224c			bne 	_TOKNotString
.2245	20 42 24	jsr $2442			jsr 	TOKTokeniseString
.2248	b0 1c		bcs $2266			bcs 	_TOKFail
.224a	80 bc		bra $2208			bra 	_TOKMainLoop
.224c					_TOKNotString:
.224c	20 94 24	jsr $2494			jsr 	TOKIsAlpha 					; identifier ?
.224f	b0 07		bcs $2258			bcs 	_TOKIdentifier
.2251	20 08 24	jsr $2408			jsr 	TOKTokenisePunctuation 		; punctuation
.2254	b0 10		bcs $2266			bcs 	_TOKFail
.2256	80 b0		bra $2208			bra 	_TOKMainLoop
.2258					_TOKIdentifier:
.2258	20 0e 23	jsr $230e			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.225b	b0 09		bcs $2266			bcs 	_TOKFail
.225d	80 a9		bra $2208			bra 	_TOKMainLoop
.225f					_TOKExit:
.225f	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.2261	20 68 22	jsr $2268			jsr 	TOKWriteA
.2264	18		clc				clc									; return with carry set.
.2265	60		rts				rts
.2266					_TOKFail:
.2266	38		sec				sec
.2267	60		rts				rts
.2268					TOKWriteA:
.2268	da		phx				phx
.2269	ae 00 04	ldx $0400			ldx 	TOKLineSize
.226c	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.226f	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.2272	fa		plx				plx
.2273	ee 00 04	inc $0400			inc 	TOKLineSize
.2276	60		rts				rts
.2277					TOKGet:
.2277	18		clc				clc
.2278	6c 1e 06	jmp ($061e)			jmp 	(TOKDataSource)
.227b					TOKGetNext:
.227b	38		sec				sec
.227c	6c 1e 06	jmp ($061e)			jmp 	(TOKDataSource)
.061e					TOKDataSource:
>061e							.fill 	2
.0620					TOKIsFirstElement:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.227f					TOKFindToken:
.227f	a2 69		ldx #$69			ldx 	#StandardTokens & $FF 		; do this table
.2281	a0 1c		ldy #$1c			ldy 	#StandardTokens >> 8
.2283	20 9b 22	jsr $229b			jsr 	TOKFindTokenXY 				; find it, or not
.2286	b0 0d		bcs $2295			bcs 	_TOKFound1
.2288	a2 ea		ldx #$ea			ldx 	#AlternateTokens & $FF 		; do the alternate table
.228a	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.228c	20 9b 22	jsr $229b			jsr 	TOKFindTokenXY 				; find it, or not
.228f	90 08		bcc $2299			bcc 	_TOKFTFail 					; not ....
.2291	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.2293	38		sec				sec
.2294	60		rts				rts
.2295					_TOKFound1:
.2295	a2 00		ldx #$00			ldx 	#0
.2297	38		sec				sec
.2298	60		rts				rts
.2299					_TOKFTFail
.2299	18		clc				clc
.229a	60		rts				rts
.229b					TOKFindTokenXY:
.229b	86 24		stx $24				stx 	zTemp0 						; save token table address
.229d	84 25		sty $25				sty 	zTemp0+1
.229f	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.22a1	8d 21 06	sta $0621			sta 	TOKCurrent
.22a4					_TOKFindLoop:
.22a4	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.22a6	18		clc				clc 		 						; clear carry in case of fail
.22a7	30 17		bmi $22c0			bmi 	_TOKExit 					; end of table, fail, so return CC.
.22a9	cd 1e 05	cmp $051e			cmp 	TOKElement 					; compare against the element length
.22ac	d0 13		bne $22c1			bne 	_TOKNext 					; different, try next.
.22ae	aa		tax				tax 								; number of chars to compare.
.22af	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.22b1					_TOKCompare:
.22b1	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.22b3	d9 1e 05	cmp $051e,y			cmp 	TOKElementText-1,y
.22b6	d0 09		bne $22c1			bne 	_TOKNext 					; different ? try next
.22b8	c8		iny				iny 								; compare next two
.22b9	ca		dex				dex
.22ba	d0 f5		bne $22b1			bne 	_TOKCompare 				; until done X characters.
.22bc	38		sec				sec
.22bd	ad 21 06	lda $0621			lda 	TOKCurrent 					; return current ID.
.22c0					_TOKExit:
.22c0	60		rts				rts
.22c1					_TOKNext:
.22c1	ee 21 06	inc $0621			inc 	TOKCurrent 					; increment token #
.22c4	38		sec				sec 								; add length+1 to ptr
.22c5	b2 24		lda ($24)			lda 	(zTemp0)
.22c7	65 24		adc $24				adc 	zTemp0
.22c9	85 24		sta $24				sta 	zTemp0
.22cb	90 d7		bcc $22a4			bcc 	_TOKFindLoop
.22cd	e6 25		inc $25				inc 	zTemp0+1
.22cf	80 d3		bra $22a4			bra 	_TOKFindLoop
.0621					TOKCurrent:
>0621							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.22d1					TOKTokeniseHexadecimal:
.22d1	20 7b 22	jsr $227b			jsr 	TOKGetNext 					; consume the $
.22d4	a2 08		ldx #$08			ldx 	#IFR0
.22d6	20 27 34	jsr $3427			jsr 	IFloatSetZero 				; set R0 = 0
.22d9					_TTHLoop:
.22d9	20 77 22	jsr $2277			jsr 	TOKGet 						; keep getting and copying while numeric.
.22dc	20 a1 24	jsr $24a1			jsr 	TOKIsHexadecimal
.22df	90 23		bcc $2304			bcc 	_TTHDone
.22e1	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.22e3	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.22e6	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.22e9	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.22ec	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.22ef	20 7b 22	jsr $227b			jsr 	TOKGetNext
.22f2	20 65 24	jsr $2465			jsr 	TOKToUpper 					; make U/C
.22f5	38		sec				sec 								; convert to decimal.
.22f6	e9 30		sbc #$30			sbc 	#48
.22f8	c9 0a		cmp #$0a			cmp 	#10
.22fa	90 02		bcc $22fe			bcc 	_TTHNotAlpha
.22fc	e9 07		sbc #$07			sbc 	#7
.22fe					_TTHNotAlpha:
.22fe	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2300	85 08		sta $08				sta 	IFR0+IM0
.2302	80 d5		bra $22d9			bra 	_TTHLoop
.2304					_TTHDone:
.2304	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.2306	20 68 22	jsr $2268			jsr 	TOKWriteA
.2309	20 aa 21	jsr $21aa			jsr 	TOKTokeniseConstant 		; write integer out.
.230c	18		clc				clc
.230d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.230e					TOKTokeniseIdentifier:
.230e	20 97 21	jsr $2197			jsr 	TOKResetElement 			; extract an identifier
.2311					_TOKGetIdentifier:
.2311	20 77 22	jsr $2277			jsr 	TOKGet
.2314	20 65 24	jsr $2465			jsr 	TOKToUpper
.2317	20 87 24	jsr $2487			jsr 	TOKIsIdentifierElement
.231a	90 08		bcc $2324			bcc 	_TOKEndIdent
.231c	20 9b 21	jsr $219b			jsr		TOKWriteElement
.231f	20 7b 22	jsr $227b			jsr 	TOKGetNext
.2322	80 ed		bra $2311			bra 	_TOKGetIdentifier
.2324					_TOKEndIdent:
.2324	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.2326	d0 06		bne $232e			bne 	_TOKNotString
.2328	20 9b 21	jsr $219b			jsr 	TOKWriteElement 			; add it
.232b	20 7b 22	jsr $227b			jsr 	TOKGetNext 					; consume it
.232e					_TOKNotString:
.232e	20 77 22	jsr $2277			jsr 	TOKGet 						; finally check for (
.2331	c9 28		cmp #$28			cmp 	#"("
.2333	d0 06		bne $233b			bne 	_TOKNoArray
.2335	20 9b 21	jsr $219b			jsr 	TOKWriteElement 			; add it
.2338	20 7b 22	jsr $227b			jsr 	TOKGetNext 					; consume it
.233b					_TOKNoArray:
.233b	20 7f 22	jsr $227f			jsr 	TOKFindToken 				; find it
.233e	90 18		bcc $2358			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2340	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2342	f0 0f		beq $2353			beq 	_TOKComment 				; yes, do comment code.
.2344	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.2346	d0 06		bne $234e			bne 	_TOKNoShift
.2348	48		pha				pha 								; write the shift.
.2349	8a		txa				txa
.234a	20 68 22	jsr $2268			jsr 	TOKWriteA
.234d	68		pla				pla
.234e					_TOKNoShift:
.234e	20 68 22	jsr $2268			jsr 	TOKWriteA 					; write the main token.
.2351	18		clc				clc
.2352	60		rts				rts
.2353					_TOKComment:
.2353	20 98 23	jsr $2398			jsr 	TOKDoComment
.2356	18		clc				clc
.2357	60		rts				rts
.2358					_TOKIsVariable:
.2358	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.235a					_TOKOutputBuffer:
.235a	bd 1f 05	lda $051f,x			lda 	TOKElementText,x 			; output it translated.
.235d	20 86 23	jsr $2386			jsr 	TOKTranslateIdentifier
.2360	20 68 22	jsr $2268			jsr 	TOKWriteA
.2363	e8		inx				inx
.2364	bd 1f 05	lda $051f,x			lda 	TOKElementText,x
.2367	20 87 24	jsr $2487			jsr 	TOKIsIdentifierElement
.236a	b0 ee		bcs $235a			bcs 	_TOKOutputBuffer
.236c	a8		tay				tay 								; last char in Y
.236d	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.236f	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2371	f0 0e		beq $2381			beq 	_TOKIVExit
.2373	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2375	d0 04		bne $237b			bne 	_TOKIVCheckArray 			; no, check for (
.2377	1a		inc a				inc 	a 							; token is $7D
.2378	bc 20 05	ldy $0520,x			ldy 	TOKElementText+1,x 			; get next one.
.237b					_TOKIVCheckArray:
.237b	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.237d	d0 02		bne $2381			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.237f	1a		inc a				inc 	a
.2380	1a		inc a				inc 	a
.2381					_TOKIVExit:
.2381	20 68 22	jsr $2268			jsr 	TOKWriteA 					; ending token
.2384	18		clc				clc
.2385	60		rts				rts
.2386					TOKTranslateIdentifier:
.2386	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.2388	f0 0b		beq $2395			beq 	_TTI64
.238a	38		sec				sec
.238b	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.238d	10 03		bpl $2392			bpl 	_TTIExit
.238f	18		clc				clc 								; map 09 onto 26-35
.2390	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2392					_TTIExit:
.2392	09 40		ora #$40			ora 	#$40 						; correct range.
.2394	60		rts				rts
.2395	a9 64		lda #$64	_TTI64:	lda 	#$64
.2397	60		rts				rts
.2398					TOKDoComment:
.2398	20 68 22	jsr $2268			jsr 	TOKWriteA					; output the token.
.239b					_TOKSkipSpaces:
.239b	20 77 22	jsr $2277			jsr 	TOKGet 						; skip over spaces
.239e	c9 20		cmp #$20			cmp 	#' '
.23a0	d0 05		bne $23a7			bne 	_TOKEndSpaces
.23a2	20 7b 22	jsr $227b			jsr 	TOKGetNext
.23a5	80 f4		bra $239b			bra 	_TOKSkipSpaces
.23a7					_TOKEndSpaces:
.23a7	48		pha				pha 								; save it
.23a8	68		pla				pla
.23a9	f0 04		beq $23af			beq 	_TOKDCExit 					; end of line.
.23ab	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.23ad	d0 01		bne $23b0			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.23af					_TOKDCExit:
.23af	60		rts				rts
.23b0					_TOKDCDoLine:
.23b0	20 97 21	jsr $2197			jsr 	TOKResetElement 			; start getting the string
.23b3					_TOKDCLoop:
.23b3	20 77 22	jsr $2277			jsr 	TOKGet 						; check EOL
.23b6	c9 00		cmp #$00			cmp 	#0
.23b8	f0 08		beq $23c2			beq 	_TOKDCEndComment
.23ba	20 7b 22	jsr $227b			jsr 	TOKGetNext 					; get and consume
.23bd	20 9b 21	jsr $219b			jsr 	TOKWriteElement
.23c0	80 f1		bra $23b3			bra 	_TOKDCLoop
.23c2					_TOKDCEndComment:
.23c2	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.23c4	20 68 22	jsr $2268			jsr 	TOKWriteA
.23c7	20 dc 21	jsr $21dc			jsr 	TOKOutputElementBuffer
.23ca	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.23cb					TOKTokeniseInteger:
.23cb	20 f4 23	jsr $23f4			jsr 	TOKExtractInteger 			; pull an integer out as text.
.23ce	a2 1f		ldx #$1f			ldx 	#TOKElementText & $FF
.23d0	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.23d2	ad 1e 05	lda $051e			lda		TOKElement
.23d5	20 8b 32	jsr $328b			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.23d8	ad 20 06	lda $0620			lda 	TOKIsFirstElement 			; first element ?
.23db	f0 12		beq $23ef			beq 	_TOKNotLineNumber
.23dd	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.23df	d0 0c		bne $23ed			bne 	_TOKBadLineNumeber
.23e1	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.23e3	8d 01 04	sta $0401			sta 	TOKLineNumber
.23e6	a5 09		lda $09				lda 	IFR0+IM1
.23e8	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.23eb	18		clc				clc
.23ec	60		rts				rts
.23ed					_TOKBadLineNumeber:
.23ed	38		sec				sec
.23ee	60		rts				rts
.23ef					_TOKNotLineNumber:
.23ef	20 aa 21	jsr $21aa			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.23f2	18		clc				clc
.23f3	60		rts				rts
.23f4					TOKExtractInteger:
.23f4	20 97 21	jsr $2197			jsr 	TOKResetElement 			; restart
.23f7					_TTILoop:
.23f7	20 77 22	jsr $2277			jsr 	TOKGet 						; keep getting and copying while numeric.
.23fa	20 7b 24	jsr $247b			jsr 	TOKIsDigit
.23fd	90 08		bcc $2407			bcc 	_TOKEIExit
.23ff	20 9b 21	jsr $219b			jsr 	TOKWriteElement
.2402	20 7b 22	jsr $227b			jsr 	TOKGetNext
.2405	80 f0		bra $23f7			bra 	_TTILoop
.2407					_TOKEIExit:
.2407	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2408					TOKTokenisePunctuation:
.2408	20 97 21	jsr $2197			jsr 	TOKResetElement 			; copy first punctuation character into element.
.240b	20 7b 22	jsr $227b			jsr 	TOKGetNext
.240e	20 9b 21	jsr $219b			jsr 	TOKWriteElement
.2411	20 77 22	jsr $2277			jsr 	TOKGet 						; what follows ?
.2414	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2416	f0 10		beq $2428			beq 	_TTPOne
.2418	20 8b 24	jsr $248b			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.241b	b0 0b		bcs $2428			bcs 	_TTPOne 					; these speed things up a bit.
.241d	20 9b 21	jsr $219b			jsr 	TOKWriteElement 			; this is what we will search for.
.2420	20 7f 22	jsr $227f			jsr 	TOKFindToken
.2423	b0 0a		bcs $242f			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2425	ce 1e 05	dec $051e			dec 	TOKElement 					; make it a single character
.2428					_TTPOne:
.2428	20 7f 22	jsr $227f			jsr 	TOKFindToken 				; look for one character punctuation
.242b	b0 07		bcs $2434			bcs 	_TTPOutputExit 				; we found it
.242d	38		sec				sec 								; not recognised.
.242e	60		rts				rts
.242f					_TTPConsumeExit:
.242f	48		pha				pha
.2430	20 7b 22	jsr $227b			jsr 	TOKGetNext 					; get the 2nd char out.
.2433	68		pla				pla
.2434					_TTPOutputExit:
.2434	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.2436	f0 05		beq $243d			beq 	_TTPComment
.2438	20 68 22	jsr $2268			jsr  	TOKWriteA 					; write token out
.243b	18		clc				clc
.243c	60		rts				rts
.243d					_TTPComment:
.243d	20 98 23	jsr $2398			jsr 	TOKDoComment
.2440	18		clc				clc
.2441	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2442					TOKTokeniseString:
.2442	20 7b 22	jsr $227b			jsr 	TOKGetNext 					; consume the "
.2445	20 97 21	jsr $2197			jsr 	TOKResetElement 			; start getting the string
.2448					_TOKTSLoop:
.2448	20 77 22	jsr $2277			jsr 	TOKGet 						; check EOL
.244b	c9 00		cmp #$00			cmp 	#0
.244d	f0 0c		beq $245b			beq 	_TOKTSExit
.244f	20 7b 22	jsr $227b			jsr 	TOKGetNext 					; get and consume
.2452	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2454	f0 05		beq $245b			beq 	_TOKTSExit
.2456	20 9b 21	jsr $219b			jsr 	TOKWriteElement
.2459	80 ed		bra $2448			bra 	_TOKTSLoop
.245b					_TOKTSExit:
.245b	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.245d	20 68 22	jsr $2268			jsr 	TOKWriteA
.2460	20 dc 21	jsr $21dc			jsr 	TOKOutputElementBuffer
.2463	18		clc				clc
.2464	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2465					TOKToUpper:
.2465	c9 61		cmp #$61			cmp 	#"a"
.2467	90 06		bcc $246f			bcc 	_TTUNotLower
.2469	c9 7b		cmp #$7b			cmp 	#"z"+1
.246b	b0 02		bcs $246f			bcs 	_TTUNotLower
.246d	49 20		eor #$20			eor 	#$20
.246f					_TTUNotLower:
.246f	60		rts				rts
.2470					TOKToLower:
.2470	c9 41		cmp #$41			cmp 	#"A"
.2472	90 06		bcc $247a			bcc 	_TTUNotUpper
.2474	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2476	b0 02		bcs $247a			bcs 	_TTUNotUpper
.2478	49 20		eor #$20			eor 	#$20
.247a					_TTUNotUpper:
.247a	60		rts				rts
.247b					TOKIsDigit:
.247b	c9 30		cmp #$30			cmp 	#"0"
.247d	90 06		bcc $2485			bcc 	TOKFail
.247f	c9 3a		cmp #$3a			cmp 	#"9"+1
.2481	b0 02		bcs $2485			bcs 	TOKFail
.2483					TOKSucceed:
.2483	38		sec				sec
.2484	60		rts				rts
.2485					TOKFail:
.2485	18		clc				clc
.2486	60		rts				rts
.2487					TOKIsIdentifierElement:
.2487	c9 5f		cmp #$5f			cmp 	#"_"
.2489	f0 f8		beq $2483			beq 	TOKSucceed 					; else fall through to alphanumeric
.248b					TOKIsAlphaNumeric:
.248b	20 94 24	jsr $2494			jsr 	TOKIsAlpha
.248e	b0 f3		bcs $2483			bcs 	TOKSucceed
.2490	20 7b 24	jsr $247b			jsr 	TOKIsDigit
.2493	60		rts				rts
.2494					TOKIsAlpha:
.2494	20 65 24	jsr $2465			jsr 	TOKToUpper
.2497	c9 41		cmp #$41			cmp 	#"A"
.2499	90 ea		bcc $2485			bcc 	TOKFail
.249b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.249d	b0 e6		bcs $2485			bcs 	TOKFail
.249f	80 e2		bra $2483			bra 	TOKSucceed
.24a1					TOKIsHexadecimal:
.24a1	20 7b 24	jsr $247b			jsr		TOKIsDigit
.24a4	b0 dd		bcs $2483			bcs 	TOKSucceed
.24a6	20 94 24	jsr $2494			jsr 	TOKIsAlpha
.24a9	90 da		bcc $2485			bcc 	TOKFail
.24ab	c9 47		cmp #$47			cmp 	#"F"+1
.24ad	b0 d6		bcs $2485			bcs 	TOKFail
.24af	80 d2		bra $2483			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.24b1					Command_CALL:
.24b1	a9 42		lda #$42			lda 	#STK_CALL
.24b3	20 a3 29	jsr $29a3			jsr 	StackOpen
.24b6	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.24b8	29 c0		and #$c0			and 	#$C0
.24ba	c9 40		cmp #$40			cmp 	#$40
.24bc	d0 29		bne $24e7			bne 	_CCSyntax
.24be	20 6a 2d	jsr $2d6a			jsr 	VARGetInfo 					; get the information
.24c1	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 				; check right bracket follows.
.24c4	20 1c 2d	jsr $2d1c			jsr 	VARFind 					; exists ?
.24c7	90 21		bcc $24ea			bcc 	_CCUnknown
.24c9	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.24cb	85 24		sta $24				sta 	zTemp0
.24cd	20 d6 29	jsr $29d6			jsr 	STKSaveCodePosition 		; save return address on stack.
.24d0	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.24d2	b1 24		lda ($24),y			lda 	(zTemp0),y
.24d4	c9 ff		cmp #$ff			cmp 	#$FF
.24d6	d0 12		bne $24ea			bne 	_CCUnknown
.24d8	88		dey				dey 								; get Y offset to stack
.24d9	b1 24		lda ($24),y			lda 	(zTemp0),y
.24db	48		pha				pha
.24dc	88		dey				dey 								; get address
.24dd	b1 24		lda ($24),y			lda 	(zTemp0),y
.24df	85 19		sta $19				sta 	codePtr+1
.24e1	b2 24		lda ($24)			lda 	(zTemp0)
.24e3	85 18		sta $18				sta 	codePtr
.24e5	7a		ply				ply 								; restore Y
.24e6	60		rts				rts
.24e7					_CCSyntax:
.24e7	4c b1 27	jmp $27b1		jmp	ErrorV_syntax
.24ea					_CCUnknown:
.24ea	4c 26 29	jmp $2926		jmp	ErrorV_unknown
.24ed					Command_ENDPROC:
.24ed	a9 42		lda #$42			lda 	#STK_CALL
.24ef	20 ce 29	jsr $29ce			jsr 	StackCheckFrame
.24f2	20 e8 29	jsr $29e8			jsr 	STKLoadCodePosition 		; return
.24f5	20 c0 29	jsr $29c0			jsr 	StackClose
.24f8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.24f9					Command_DO:
.24f9	a9 22		lda #$22			lda 	#STK_DO
.24fb	20 a3 29	jsr $29a3			jsr 	StackOpen
.24fe	20 d6 29	jsr $29d6			jsr 	STKSaveCodePosition 		; save loop position
.2501	60		rts				rts
.2502					Command_EXIT:
.2502	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2504	20 ce 29	jsr $29ce			jsr 	StackCheckFrame
.2507	20 c0 29	jsr $29c0			jsr 	StackClose 					; close it
.250a	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.250c	aa		tax				tax
.250d	20 c1 26	jsr $26c1			jsr 	ScanForward
.2510	60		rts				rts
.2511					Command_LOOP:
.2511	a9 22		lda #$22			lda 	#STK_DO
.2513	20 ce 29	jsr $29ce			jsr 	StackCheckFrame
.2516	20 e8 29	jsr $29e8			jsr 	STKLoadCodePosition 		; loop back
.2519	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.251a					Command_FOR:
.251a	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.251c	20 a3 29	jsr $29a3			jsr 	StackOpen
.251f	20 2a 13	jsr $132a			jsr 	CommandLET 					; do "I = 1" bit
.2522	5a		phy				phy 								; save variable address to +4,+5
.2523	a0 04		ldy #$04			ldy 	#4
.2525	a5 24		lda $24				lda 	zTemp0
.2527	91 2c		sta ($2c),y			sta 	(basicStack),y
.2529	c8		iny				iny
.252a	a5 25		lda $25				lda 	zTemp0+1
.252c	91 2c		sta ($2c),y			sta 	(basicStack),y
.252e	7a		ply				ply
.252f	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2531	20 9a 29	jsr $299a			jsr 	ERRCheckA
.2534	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2537	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2539	a2 08		ldx #$08			ldx 	#IFR0
.253b	20 90 25	jsr $2590			jsr 	CFSaveR0X
.253e	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2540	c9 91		cmp #$91			cmp 	#PR_STEP
.2542	d0 06		bne $254a			bne 	_CFStep1
.2544	c8		iny				iny 								; consume step
.2545	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 				; evaluate STEP
.2548	80 24		bra $256e			bra 	_CFWriteStep
.254a					_CFStep1:
.254a	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.254c	a9 01		lda #$01			lda 	#1
.254e	20 29 34	jsr $3429			jsr 	IFloatSetByte
.2551	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2552	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2554	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2556	85 24		sta $24				sta 	zTemp0
.2558	c8		iny				iny
.2559	b1 2c		lda ($2c),y			lda 	(basicStack),y
.255b	85 25		sta $25				sta 	zTemp0+1
.255d	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.255f	b1 24		lda ($24),y			lda 	(zTemp0),y
.2561	d0 0a		bne $256d			bne 	_CFNotOptimised
.2563	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2565	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2567	d0 04		bne $256d			bne 	_CFNotOptimised
.2569	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.256b	85 0b		sta $0b				sta 	IFR0+IExp
.256d					_CFNotOptimised:
.256d	7a		ply				ply
.256e					_CFWriteStep:
.256e	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2570	a9 06		lda #$06			lda 	#6
.2572	20 90 25	jsr $2590			jsr 	CFSaveR0X
.2575	20 d6 29	jsr $29d6			jsr 	STKSaveCodePosition 		; save loop position
.2578	60		rts				rts
.2579					CFLoadR0X:
.2579	5a		phy				phy
.257a	a8		tay				tay
.257b	b1 2c		lda ($2c),y			lda 	(basicStack),y
.257d	95 00		sta $00,x			sta 	IM0,x
.257f	c8		iny				iny
.2580	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2582	95 01		sta $01,x			sta 	IM1,x
.2584	c8		iny				iny
.2585	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2587	95 02		sta $02,x			sta 	IM2,x
.2589	c8		iny				iny
.258a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.258c	95 03		sta $03,x			sta 	IExp,x
.258e	7a		ply				ply
.258f	60		rts				rts
.2590					CFSaveR0X:
.2590	5a		phy				phy
.2591	a8		tay				tay
.2592	b5 00		lda $00,x			lda 	IM0,x
.2594	91 2c		sta ($2c),y			sta 	(basicStack),y
.2596	c8		iny				iny
.2597	b5 01		lda $01,x			lda 	IM1,x
.2599	91 2c		sta ($2c),y			sta 	(basicStack),y
.259b	c8		iny				iny
.259c	b5 02		lda $02,x			lda 	IM2,x
.259e	91 2c		sta ($2c),y			sta 	(basicStack),y
.25a0	c8		iny				iny
.25a1	b5 03		lda $03,x			lda 	IExp,x
.25a3	91 2c		sta ($2c),y			sta 	(basicStack),y
.25a5	7a		ply				ply
.25a6	60		rts				rts
.25a7					Command_NEXT:
.25a7	a9 37		lda #$37			lda 	#STK_FOR
.25a9	20 ce 29	jsr $29ce			jsr 	StackCheckFrame
.25ac	5a		phy				phy 								; check optimised loop
.25ad	a0 09		ldy #$09			ldy 	#9
.25af	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25b1	7a		ply				ply
.25b2	0a		asl a				asl 	a
.25b3	b0 35		bcs $25ea			bcs 	_CNOptimised
.25b5	20 22 26	jsr $2622			jsr 	_CNLoadValue 				; load index value to R0.
.25b8	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.25ba	a9 06		lda #$06			lda 	#6
.25bc	20 79 25	jsr $2579			jsr 	CFLoadR0X
.25bf	20 1f 2e	jsr $2e1f			jsr 	IFloatAdd 					; add them together and write back.
.25c2	20 45 26	jsr $2645			jsr 	_CNSaveValue
.25c5	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.25c7	a2 0c		ldx #$0c			ldx 	#IFR1
.25c9	20 79 25	jsr $2579			jsr 	CFLoadR0X
.25cc	20 f6 30	jsr $30f6			jsr 	IFloatCompare 				; compare terminal vs current
.25cf	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.25d1	20 20 34	jsr $3420			jsr 	IFloatCheckZero
.25d4	f0 10		beq $25e6			beq 	_CNLoopBack
.25d6	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.25d8	5a		phy				phy
.25d9	a0 09		ldy #$09			ldy 	#6+IExp
.25db	51 2c		eor ($2c),y			eor 	(basicStack),y
.25dd	7a		ply				ply
.25de	29 40		and #$40			and 	#IFSign
.25e0	f0 04		beq $25e6			beq 	_CNLoopBack
.25e2					_CNExitLoop:
.25e2	20 c0 29	jsr $29c0			jsr 	StackClose		 			; return
.25e5	60		rts				rts
.25e6					_CNLoopBack:
.25e6	20 e8 29	jsr $29e8			jsr 	STKLoadCodePosition 		; loop back
.25e9	60		rts				rts
.25ea					_CNOptimised:
.25ea	5a		phy				phy
.25eb	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.25ed	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25ef	85 28		sta $28				sta 	zTemp2
.25f1	c8		iny				iny
.25f2	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25f4	85 29		sta $29				sta 	zTemp2+1
.25f6	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.25f8					_CNIncrement:
.25f8	c8		iny				iny
.25f9	b1 28		lda ($28),y			lda 	(zTemp2),y
.25fb	1a		inc a				inc 	a
.25fc	91 28		sta ($28),y			sta 	(zTemp2),y
.25fe	f0 f8		beq $25f8			beq 	_CNIncrement
.2600	18		clc				clc 								; point zTemp0 to terminal value
.2601	a5 2c		lda $2c				lda 	basicStack
.2603	69 0a		adc #$0a			adc 	#10
.2605	85 24		sta $24				sta 	zTemp0
.2607	a5 2d		lda $2d				lda 	basicStack+1
.2609	69 00		adc #$00			adc 	#0
.260b	85 25		sta $25				sta 	zTemp0+1
.260d	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.260f	18		clc				clc 								; borrow 1, we want > not >=
.2610	b2 28		lda ($28)			lda 	(zTemp2)
.2612	f2 24		sbc ($24)			sbc 	(zTemp0)
.2614	b1 28		lda ($28),y			lda 	(zTemp2),y
.2616	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.2618	c8		iny				iny
.2619	b1 28		lda ($28),y			lda 	(zTemp2),y
.261b	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.261d	7a		ply				ply
.261e	b0 c2		bcs $25e2			bcs 	_CNExitLoop
.2620	80 c4		bra $25e6			bra 	_CNLoopBack
.2622					_CNLoadValue:
.2622	5a		phy				phy
.2623	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2625	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2627	85 28		sta $28				sta 	zTemp2
.2629	c8		iny				iny
.262a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.262c	85 29		sta $29				sta 	zTemp2+1
.262e	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2630	b1 28		lda ($28),y			lda 	(zTemp2),y
.2632	85 08		sta $08				sta 	IFR0+IM0
.2634	c8		iny				iny
.2635	b1 28		lda ($28),y			lda 	(zTemp2),y
.2637	85 09		sta $09				sta 	IFR0+IM1
.2639	c8		iny				iny
.263a	b1 28		lda ($28),y			lda 	(zTemp2),y
.263c	85 0a		sta $0a				sta 	IFR0+IM2
.263e	c8		iny				iny
.263f	b1 28		lda ($28),y			lda 	(zTemp2),y
.2641	85 0b		sta $0b				sta 	IFR0+IExp
.2643	7a		ply				ply
.2644	60		rts				rts
.2645					_CNSaveValue:
.2645	5a		phy				phy
.2646	a0 00		ldy #$00			ldy 	#0
.2648	a5 08		lda $08				lda 	IFR0+IM0
.264a	91 28		sta ($28),y			sta 	(zTemp2),y
.264c	c8		iny				iny
.264d	a5 09		lda $09				lda 	IFR0+IM1
.264f	91 28		sta ($28),y			sta 	(zTemp2),y
.2651	c8		iny				iny
.2652	a5 0a		lda $0a				lda 	IFR0+IM2
.2654	91 28		sta ($28),y			sta 	(zTemp2),y
.2656	c8		iny				iny
.2657	a5 0b		lda $0b				lda 	IFR0+IExp
.2659	91 28		sta ($28),y			sta 	(zTemp2),y
.265b	7a		ply				ply
.265c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.265d					Command_GOSUB:
.265d	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; get line number
.2660	a9 52		lda #$52			lda 	#STK_GOSUB
.2662	20 a3 29	jsr $29a3			jsr 	StackOpen
.2665	20 d6 29	jsr $29d6			jsr 	STKSaveCodePosition 		; save return address on stack.
.2668	4c 4b 12	jmp $124b			jmp 	GotoR0
.266b					Command_RETURN:
.266b	a9 52		lda #$52			lda 	#STK_GOSUB
.266d	20 ce 29	jsr $29ce			jsr 	StackCheckFrame
.2670	20 e8 29	jsr $29e8			jsr 	STKLoadCodePosition 		; return
.2673	20 c0 29	jsr $29c0			jsr 	StackClose
.2676	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2677					IfCommand:
.2677	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 				; Get the if test.
.267a	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.267c	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.267e	d0 0c		bne $268c			bne 	_IfStructured 				; we still support it.
.2680	c8		iny				iny 								; consume THEN
.2681	a2 08		ldx #$08			ldx 	#IFR0
.2683	20 20 34	jsr $3420			jsr 	IFloatCheckZero 			; is it zero
.2686	f0 01		beq $2689			beq 	_IfFail 					; if fail, go to next line
.2688	60		rts				rts 								; if THEN just continue
.2689					_IfFail:
.2689	4c 83 15	jmp $1583			jmp 	RUNEndOfLine
.268c					_IfStructured:
.268c	20 20 34	jsr $3420			jsr 	IFloatCheckZero 			; is it zero
.268f	d0 07		bne $2698			bne 	_IfExit 					; if not, then continue normally.
.2691	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2693	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2695	20 c1 26	jsr $26c1			jsr 	ScanForward 				; and run from there
.2698					_IfExit:
.2698	60		rts				rts
.2699					ElseCode:
.2699	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.269b	aa		tax				tax 								; so just go to the structure exit
.269c	20 c1 26	jsr $26c1			jsr 	ScanForward
.269f	60		rts				rts
.26a0					EndIf:
.26a0	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.26a1					Command_REPEAT:
.26a1	a9 02		lda #$02			lda 	#STK_REPEAT
.26a3	20 a3 29	jsr $29a3			jsr 	StackOpen
.26a6	20 d6 29	jsr $29d6			jsr 	STKSaveCodePosition 		; save loop position
.26a9	60		rts				rts
.26aa					Command_UNTIL:
.26aa	a9 02		lda #$02			lda 	#STK_REPEAT
.26ac	20 ce 29	jsr $29ce			jsr 	StackCheckFrame
.26af	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 				; work out the test
.26b2	a2 08		ldx #$08			ldx 	#IFR0
.26b4	20 20 34	jsr $3420			jsr 	IFloatCheckZero 			; check if zero
.26b7	f0 04		beq $26bd			beq 	_CULoopBack 				; if so keep looping
.26b9	20 c0 29	jsr $29c0			jsr 	StackClose		 			; return
.26bc	60		rts				rts
.26bd					_CULoopBack:
.26bd	20 e8 29	jsr $29e8			jsr 	STKLoadCodePosition 		; loop back
.26c0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.26c1					ScanForward:
.26c1	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.26c3	86 25		stx $25				stx 	zTemp0+1
.26c5	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.26c7					_ScanForwardLoop:
.26c7	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.26c9	d0 0a		bne $26d5			bne 	_ScanNoCheck
.26cb	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.26cd	c5 24		cmp $24				cmp 	zTemp0
.26cf	f0 49		beq $271a			beq 	_ScanExit
.26d1	c5 25		cmp $25				cmp 	zTemp0+1
.26d3	f0 45		beq $271a			beq 	_ScanExit
.26d5					_ScanNoCheck:
.26d5	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.26d7	c8		iny				iny
.26d8	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.26da	f0 37		beq $2713			beq		_ScanDataItem
.26dc	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.26de	f0 33		beq $2713			beq 	_ScanDataItem
.26e0	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.26e2	f0 1b		beq $26ff			beq 	_ScanNextLine
.26e4	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.26e6	d0 01		bne $26e9			bne 	_ScanNoShift
.26e8	c8		iny				iny
.26e9					_ScanNoShift:
.26e9	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.26eb	b0 da		bcs $26c7			bcs 	_ScanForwardLoop
.26ed	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.26ef	90 d6		bcc $26c7			bcc 	_ScanForwardLoop
.26f1	aa		tax				tax 								; access the table to get the adjustment.
.26f2	18		clc				clc
.26f3	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.26f5	7d dd 1b	adc $1bdd,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.26f8	85 26		sta $26				sta 	zTemp1
.26fa	10 cb		bpl $26c7			bpl		_ScanForwardLoop 			; error if -ve ?
.26fc	4c 3d 28	jmp $283d		jmp	ErrorV_structure
.26ff					_ScanNextLine:
.26ff	18		clc				clc	 								; forward to next line.
.2700	b2 18		lda ($18)			lda 	(codePtr)
.2702	65 18		adc $18				adc 	codePtr
.2704	85 18		sta $18				sta 	codePtr
.2706	90 02		bcc $270a			bcc 	_ScanNoCarry
.2708	e6 19		inc $19				inc 	codePtr+1
.270a					_ScanNoCarry:
.270a	a0 03		ldy #$03			ldy 	#3
.270c	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.270e	d0 b7		bne $26c7			bne 	_ScanForwardLoop
.2710	4c 3d 28	jmp $283d		jmp	ErrorV_structure
.2713					_ScanDataItem:
.2713	98		tya				tya
.2714	38		sec				sec
.2715	71 18		adc ($18),y			adc 	(codePtr),y
.2717	a8		tay				tay
.2718	80 ad		bra $26c7			bra 	_ScanForwardLoop
.271a					_ScanExit:
.271a	c8		iny				iny 								; consume final token.
.271b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.271c					ScanProcedures:
.271c	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.271e	48		pha				pha
.271f	a5 19		lda $19				lda 	codePtr+1
.2721	48		pha				pha
.2722	5a		phy				phy
.2723	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; back to the program start
.2726	85 19		sta $19				sta 	codePtr+1
.2728	64 18		stz $18				stz 	codePtr
.272a					_SPLoop:
.272a	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.272c	f0 18		beq $2746			beq 	_SPExit
.272e	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2730	b1 18		lda ($18),y			lda 	(codePtr),y
.2732	c9 88		cmp #$88			cmp 	#PR_PROC
.2734	d0 03		bne $2739			bne 	_SPNext
.2736	20 4e 27	jsr $274e			jsr 	_SPSetupRecord
.2739					_SPNext:
.2739	18		clc				clc 								; forward to next
.273a	b2 18		lda ($18)			lda 	(codePtr)
.273c	65 18		adc $18				adc 	codePtr
.273e	85 18		sta $18				sta 	codePtr
.2740	90 e8		bcc $272a			bcc 	_SPLoop
.2742	e6 19		inc $19				inc 	codePtr+1
.2744	80 e4		bra $272a			bra 	_SPLoop
.2746					_SPExit:
.2746	7a		ply				ply
.2747	68		pla				pla
.2748	85 19		sta $19				sta 	codePtr+1
.274a	68		pla				pla
.274b	85 18		sta $18				sta 	codePtr
.274d	60		rts				rts
.274e					_SPSetupRecord:
.274e	c8		iny				iny 								; check identifier follows
.274f	b1 18		lda ($18),y			lda 	(codePtr),y
.2751	29 c0		and #$c0			and 	#$C0
.2753	c9 40		cmp #$40			cmp 	#$40
.2755	d0 27		bne $277e			bne 	_SPSyntax
.2757	20 6a 2d	jsr $2d6a			jsr 	VARGetInfo 					; get the information
.275a	20 8a 29	jsr $298a			jsr 	ERRCheckRParen 				; check right bracket follows.
.275d	20 1c 2d	jsr $2d1c			jsr 	VARFind 					; already exists ?
.2760	b0 1f		bcs $2781			bcs 	_SPUsed 					; error !
.2762	20 c8 2c	jsr $2cc8			jsr 	VARCreate 					; create, XA points to the data.
.2765	85 24		sta $24				sta 	zTemp0
.2767	86 25		stx $25				stx 	zTemp0+1
.2769	5a		phy				phy 								; save Y pos on stack
.276a	a0 01		ldy #$01			ldy 	#1
.276c	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.276e	92 24		sta ($24)			sta 	(zTemp0)
.2770	a5 19		lda $19				lda 	codePtr+1
.2772	91 24		sta ($24),y			sta 	(zTemp0),y
.2774	c8		iny				iny
.2775	68		pla				pla
.2776	91 24		sta ($24),y			sta 	(zTemp0),y
.2778	c8		iny				iny
.2779	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.277b	91 24		sta ($24),y			sta 	(zTemp0),y
.277d	60		rts				rts
.277e					_SPSyntax:
.277e	4c b1 27	jmp $27b1		jmp	ErrorV_syntax
.2781					_SPUsed:
.2781	4c 08 29	jmp $2908		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2784					Command_WHILE:
.2784	5a		phy				phy 								; save position of the test
.2785	20 c2 17	jsr $17c2			jsr 	EXPEvalNumber 				; work out the while test.
.2788	a2 08		ldx #$08			ldx 	#IFR0
.278a	20 20 34	jsr $3420			jsr 	IFloatCheckZero 			; check if zero
.278d	f0 0e		beq $279d			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.278f	98		tya				tya 								; position *after* test.
.2790	7a		ply				ply 								; restore position before test, at WHILE
.2791	88		dey				dey 								; so we execute the WHILE command again.
.2792	48		pha				pha 								; push after test on the stack
.2793	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2795	20 a3 29	jsr $29a3			jsr 	StackOpen
.2798	20 d6 29	jsr $29d6			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.279b	7a		ply				ply 								; restore the position *after* the test
.279c	60		rts				rts
.279d					_WHExitLoop:
.279d	68		pla				pla 								; throw post loop position
.279e	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.27a0	aa		tax				tax
.27a1	20 c1 26	jsr $26c1			jsr 	ScanForward
.27a4	60		rts				rts
.27a5					Command_WEND:
.27a5	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.27a7	20 ce 29	jsr $29ce			jsr 	StackCheckFrame
.27aa	20 e8 29	jsr $29e8			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.27ad	20 c0 29	jsr $29c0			jsr 	StackClose		 			; erase the frame
.27b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.27b1					ErrorV_syntax:
.27b1	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>27b4	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>27bc	45 72 72 6f 72 00
.27c2					ErrorV_range:
.27c2	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>27c5	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>27cd	52 61 6e 67 65 00
.27d3					ErrorV_value:
.27d3	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>27d6	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>27de	75 65 00
.27e1					ErrorV_type:
.27e1	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>27e4	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>27ec	73 6d 61 74 63 68 00
.27f3					ErrorV_unimplemented:
.27f3	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>27f6	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>27fe	6c 65 6d 65 6e 74 65 64 00
.2807					ErrorV_assert:
.2807	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>280a	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2812	46 61 69 6c 00
.2817					ErrorV_internal:
.2817	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>281a	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2822	6c 20 45 72 72 6f 72 00
.282a					ErrorV_divzero:
.282a	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>282d	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2835	42 79 20 5a 65 72 6f 00
.283d					ErrorV_structure:
.283d	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>2840	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2848	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2855					ErrorV_stop:
.2855	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>2858	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2860	20 53 74 6f 70 70 65 64 00
.2869					ErrorV_data:
.2869	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>286c	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2874	44 61 74 61 00
.2879					ErrorV_redefine:
.2879	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>287c	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2884	65 64 65 66 69 6e 65 64 00
.288d					ErrorV_index:
.288d	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>2890	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2898	61 79 20 49 6e 64 65 78 00
.28a1					ErrorV_memory:
.28a1	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>28a4	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>28ac	4d 65 6d 6f 72 79 00
.28b3					ErrorV_uninitialised:
.28b3	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>28b6	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>28be	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.28ce					ErrorV_string:
.28ce	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>28d1	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>28d9	69 6e 67 20 4c 65 6e 67 74 68 00
.28e4					ErrorV_variable:
.28e4	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>28e7	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>28ef	65 20 4d 69 73 73 69 6e 67 00
.28f9					ErrorV_stack:
.28f9	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>28fc	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2904	75 6c 6c 00
.2908					ErrorV_dupproc:
.2908	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>290b	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2913	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2923	65 64 00
.2926					ErrorV_unknown:
.2926	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>2929	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2931	20 50 72 6f 63 65 64 75 72 65 00
.293c					ErrorV_break:
.293c	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>293f	05 42 72 65 61 6b 00			.text	5,"Break",0
.2946					ErrorV_line:
.2946	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>2949	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2951	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.295e					ErrorV_fnf:
.295e	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>2961	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>2969	74 20 46 6f 75 6e 64 00
.2971					ErrorV_full:
.2971	20 b8 2b	jsr $2bb8		jsr	ErrorHandler
>2974	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>297c	20 46 75 6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2982					ERRCheckLParen:
.2982	b1 18		lda ($18),y			lda 	(codePtr),y
.2984	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2986	d0 18		bne $29a0			bne 	ERRSyntaxError
.2988	c8		iny				iny
.2989	60		rts				rts
.298a					ERRCheckRParen:
.298a	b1 18		lda ($18),y			lda 	(codePtr),y
.298c	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.298e	d0 10		bne $29a0			bne 	ERRSyntaxError
.2990	c8		iny				iny
.2991	60		rts				rts
.2992					ERRCheckComma:
.2992	b1 18		lda ($18),y			lda 	(codePtr),y
.2994	c9 99		cmp #$99			cmp 	#PR_COMMA
.2996	d0 08		bne $29a0			bne 	ERRSyntaxError
.2998	c8		iny				iny
.2999	60		rts				rts
.299a					ERRCheckA:
.299a	d1 18		cmp ($18),y			cmp 	(codePtr),y
.299c	d0 02		bne $29a0			bne 	ERRSyntaxError
.299e	c8		iny				iny
.299f	60		rts				rts
.29a0					ERRSyntaxError:
.29a0	4c b1 27	jmp $27b1		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.29a3					StackOpen:
.29a3	48		pha				pha 								; save frame byte
.29a4	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.29a6	0a		asl a				asl 	a 							; claim twice this for storage
.29a7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.29a9	38		sec				sec 								; so basically subtracting from
.29aa	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.29ac	85 2c		sta $2c				sta 	basicStack
.29ae	b0 09		bcs $29b9			bcs 	_SONoBorrow
.29b0	c6 2d		dec $2d				dec 	basicStack+1
.29b2	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.29b4	cd 22 06	cmp $0622			cmp 	basicStackEnd
.29b7	f0 04		beq $29bd			beq 	_SOMemory
.29b9					_SONoBorrow:
.29b9	68		pla				pla 								; get marker back and write at TOS
.29ba	92 2c		sta ($2c)			sta 	(basicStack)
.29bc	60		rts				rts
.29bd					_SOMemory:
.29bd	4c f9 28	jmp $28f9		jmp	ErrorV_stack
.29c0					StackClose:
.29c0	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.29c2	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.29c4	0a		asl a				asl 	a 							; claim twice this.
.29c5	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.29c7	85 2c		sta $2c				sta 	basicStack
.29c9	90 02		bcc $29cd			bcc 	_SCExit
.29cb	e6 2d		inc $2d				inc 	basicStack+1
.29cd					_SCExit:
.29cd	60		rts				rts
.29ce					StackCheckFrame:
.29ce	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.29d0	d0 01		bne $29d3			bne 	_SCFError 					; different, we have structures mixed up
.29d2	60		rts				rts
.29d3					_SCFError:
.29d3	4c 3d 28	jmp $283d		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.29d6					STKSaveCodePosition:
.29d6	5a		phy				phy
.29d7	98		tya				tya 								; save Y at offset 1.
.29d8	a0 01		ldy #$01			ldy 	#1
.29da	91 2c		sta ($2c),y			sta 	(basicStack),y
.29dc	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.29de	c8		iny				iny
.29df	91 2c		sta ($2c),y			sta 	(basicStack),y
.29e1	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.29e3	c8		iny				iny
.29e4	91 2c		sta ($2c),y			sta 	(basicStack),y
.29e6	7a		ply				ply
.29e7	60		rts				rts
.29e8					STKLoadCodePosition:
.29e8	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.29ea	b1 2c		lda ($2c),y			lda 	(basicStack),y
.29ec	85 19		sta $19				sta 	codePtr+1
.29ee	88		dey				dey
.29ef	b1 2c		lda ($2c),y			lda 	(basicStack),y
.29f1	85 18		sta $18				sta 	codePtr
.29f3	88		dey				dey
.29f4	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.29f6	a8		tay				tay
.29f7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.29f8					StackReset:
.29f8	48		pha				pha 								; save top of memory
.29f9	3a		dec a				dec 	a  							; end of stack = previous byte
.29fa	85 2d		sta $2d				sta 	basicStack+1
.29fc	a9 ff		lda #$ff			lda 	#$FF
.29fe	85 2c		sta $2c				sta 	basicStack
.2a00	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2a02	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2a04	68		pla				pla 								; allocate pages for stack.
.2a05	38		sec				sec
.2a06	e9 02		sbc #$02			sbc 	#STACKPAGES
.2a08	8d 22 06	sta $0622			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2a0b	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0622					basicStackEnd:
>0622							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2a0c					StringConcrete:
.2a0c	5a		phy				phy 								; save position on stack
.2a0d	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2a0f	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2a11	b0 41		bcs $2a54			bcs 	_SALengthError
.2a13	18		clc				clc 								; length of the new string
.2a14	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2a16	90 02		bcc $2a1a			bcc 	_SAHaveLength
.2a18	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2a1a					_SAHaveLength:
.2a1a	48		pha				pha 								; save length to be allocated for concreting.
.2a1b	38		sec				sec
.2a1c	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2a1e	6d 24 06	adc $0624			adc 	stringMemory
.2a21	8d 24 06	sta $0624			sta 	stringMemory
.2a24	85 28		sta $28				sta 	zTemp2 						; update storage address
.2a26	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2a28	6d 25 06	adc $0625			adc 	stringMemory+1
.2a2b	8d 25 06	sta $0625			sta 	stringMemory+1
.2a2e	85 29		sta $29				sta 	zTemp2+1
.2a30	68		pla				pla 								; save length allocated in +0
.2a31	92 28		sta ($28)			sta 	(zTemp2)
.2a33	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2a35	a0 01		ldy #$01			ldy 	#1
.2a37	91 28		sta ($28),y			sta 	(zTemp2),y
.2a39					_SACopyNewString:
.2a39	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2a3b	a0 02		ldy #$02			ldy 	#2
.2a3d	91 28		sta ($28),y			sta 	(zTemp2),y
.2a3f	aa		tax				tax 								; bytes to copy
.2a40	f0 0c		beq $2a4e			beq 	_SACopyExit
.2a42	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2a44					_SACopyNSLoop:
.2a44	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2a46	c8		iny				iny 								; write two on in string storage
.2a47	c8		iny				iny
.2a48	91 28		sta ($28),y			sta 	(zTemp2),y
.2a4a	88		dey				dey
.2a4b	ca		dex				dex									; until copied all the string lengths.
.2a4c	d0 f6		bne $2a44			bne 	_SACopyNSLoop
.2a4e					_SACopyExit:
.2a4e	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2a50	a5 28		lda $28				lda 	zTemp2
.2a52	7a		ply				ply
.2a53	60		rts				rts
.2a54					_SALengthError:
.2a54	4c ce 28	jmp $28ce		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2a57					StringSystemInitialise:
.2a57	3a		dec a				dec 	a 							; make last byte of previous page.
.2a58	8d 25 06	sta $0625			sta 	stringMemory+1
.2a5b	85 25		sta $25				sta 	zTemp0+1
.2a5d	a9 ff		lda #$ff			lda 	#$FF
.2a5f	8d 24 06	sta $0624			sta 	stringMemory
.2a62	85 24		sta $24				sta 	zTemp0
.2a64	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2a66	92 24		sta ($24)			sta 	(zTemp0)
.2a68	60		rts				rts
.2a69					StringSpaceInitialise:
.2a69	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2a6b	8d 23 06	sta $0623			sta 	stringInitialised
.2a6e	ad 24 06	lda $0624			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2a71	8d 26 06	sta $0626			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2a74	ad 25 06	lda $0625			lda 	stringMemory+1
.2a77	3a		dec a				dec 	a
.2a78	8d 27 06	sta $0627			sta 	stringTempPointer+1
.2a7b	20 f5 10	jsr $10f5			jsr 	ClearCheckMemory
.2a7e	60		rts				rts
.2a7f					StringTempAllocate:
.2a7f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2a81	b0 2e		bcs $2ab1			bcs 	_STALength
.2a83	2c 23 06	bit $0623			bit 	stringInitialised 			; already initialised
.2a86	30 05		bmi $2a8d			bmi 	_STAAllocate
.2a88	48		pha				pha 								; save value to subtract.
.2a89	20 69 2a	jsr $2a69			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2a8c	68		pla				pla 								; restore it
.2a8d					_STAAllocate:
.2a8d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2a8f	18		clc				clc  								; deliberate allows one more
.2a90	6d 26 06	adc $0626			adc 	stringTempPointer 			; subtract from temp pointer
.2a93	8d 26 06	sta $0626			sta 	stringTempPointer
.2a96	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2a98	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2a9a	ad 27 06	lda $0627			lda 	stringTempPointer+1
.2a9d	69 ff		adc #$ff			adc 	#$FF
.2a9f	8d 27 06	sta $0627			sta 	stringTempPointer+1
.2aa2	85 2f		sta $2f				sta 	zsTemp+1
.2aa4	85 09		sta $09				sta 	IFR0+IM1
.2aa6	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2aa8	a9 80		lda #$80			lda 	#$80
.2aaa	85 0b		sta $0b				sta 	IFR0+IExp
.2aac	a9 00		lda #$00			lda 	#0 							; clear the target string
.2aae	92 2e		sta ($2e)			sta 	(zsTemp)
.2ab0	60		rts				rts
.2ab1					_STALength:
.2ab1	4c ce 28	jmp $28ce		jmp	ErrorV_string
.2ab4					StringTempWrite:
.2ab4	5a		phy				phy
.2ab5	48		pha				pha
.2ab6	b2 2e		lda ($2e)			lda 	(zsTemp)
.2ab8	1a		inc a				inc 	a
.2ab9	92 2e		sta ($2e)			sta 	(zsTemp)
.2abb	a8		tay				tay
.2abc	68		pla				pla
.2abd	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2abf	7a		ply				ply
.2ac0	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0623					stringInitialised:
>0623							.fill 	1
.0624					stringMemory:
>0624							.fill 	2
.0626					stringTempPointer:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2ac1					Command_DIR:
.2ac1	5a		phy				phy
.2ac2	38		sec				sec 								; reset read
.2ac3	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2ac6	18		clc		_CDLoop:clc
.2ac7	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2aca	b0 27		bcs $2af3			bcs 	_CDExit 					; no more
.2acc	86 24		stx $24				stx 	zTemp0
.2ace	84 25		sty $25				sty 	zTemp0+1
.2ad0	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2ad3					_CDPad:
.2ad3	a9 20		lda #$20			lda 	#32
.2ad5	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2ad8	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2adb	e0 10		cpx #$10			cpx 	#16
.2add	90 f4		bcc $2ad3			bcc 	_CDPad
.2adf	a0 11		ldy #$11			ldy 	#17
.2ae1	b1 24		lda ($24),y			lda 	(zTemp0),y
.2ae3	aa		tax				tax
.2ae4	88		dey				dey
.2ae5	b1 24		lda ($24),y			lda 	(zTemp0),y
.2ae7	20 e1 2b	jsr $2be1			jsr 	WriteIntXA
.2aea	a2 f5		ldx #$f5			ldx 	#_CDTail & $FF
.2aec	a0 2a		ldy #$2a			ldy 	#_CDTail >> 8
.2aee	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2af1	80 d3		bra $2ac6			bra 	_CDLoop
.2af3	7a		ply		_CDExit:ply
.2af4	60		rts				rts
.2af5					_CDTail:
>2af5	08						.byte 	_CDTail2-*-1
>2af6	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2afe					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2afe					Command_ERASE:
.2afe	20 10 2b	jsr $2b10			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2b01	5a		phy				phy
.2b02	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2b04	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2b06	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2b09	7a		ply				ply
.2b0a	b0 01		bcs $2b0d			bcs 	_CEFail
.2b0c	60		rts				rts
.2b0d					_CEFail:
.2b0d	4c 5e 29	jmp $295e		jmp	ErrorV_fnf
.2b10					FileSetupBlock:
.2b10	20 ec 17	jsr $17ec			jsr 	EXPEvalString 					; string to R0, zTemp0
.2b13	a5 24		lda $24				lda 	zTemp0 							; address to name
.2b15	8d 28 06	sta $0628			sta 	FSBBlock
.2b18	a5 25		lda $25				lda 	zTemp0+1
.2b1a	8d 29 06	sta $0629			sta 	FSBBlock+1 						; zero the rest.
.2b1d	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2b20	9c 2b 06	stz $062b			stz 	FSBBlock+3
.2b23	9c 2c 06	stz $062c			stz 	FSBBlock+4
.2b26	9c 2d 06	stz $062d			stz 	FSBBlock+5
.2b29	60		rts				rts
.0628					FSBBlock:
>0628							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2b2a					Command_LOAD:
.2b2a	20 10 2b	jsr $2b10			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2b2d	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; set load address
.2b30	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2b33	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2b36	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2b38	48		pha				pha
.2b39	20 56 2b	jsr $2b56			jsr	 	FileCheckSecondParam
.2b3c	5a		phy				phy
.2b3d	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2b3f	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2b41	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2b44	7a		ply				ply
.2b45	b0 0c		bcs $2b53			bcs 	_CLFail
.2b47	68		pla				pla 								; load program
.2b48	c9 99		cmp #$99			cmp 	#PR_COMMA
.2b4a	f0 06		beq $2b52			beq 	_CLNoClear
.2b4c	20 af 10	jsr $10af			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2b4f	4c 00 2c	jmp $2c00			jmp 	WarmStart 					; and warm start
.2b52					_CLNoClear:
.2b52	60		rts				rts
.2b53					_CLFail:
.2b53	4c 5e 29	jmp $295e		jmp	ErrorV_fnf
.2b56					FileCheckSecondParam:
.2b56	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2b58	c9 99		cmp #$99			cmp 	#PR_COMMA
.2b5a	d0 0e		bne $2b6a			bne 	_FCSPExit
.2b5c	c8		iny				iny 								; consume
.2b5d	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; get address
.2b60	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2b62	8d 2a 06	sta $062a			sta 	FSBBlock+2
.2b65	a5 09		lda $09				lda 	IFR0+IM1
.2b67	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2b6a					_FCSPExit:
.2b6a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2b6b					Command_SAVE:
.2b6b	20 10 2b	jsr $2b10			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2b6e	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2b70	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2b72	f0 22		beq $2b96			beq 	_CLSaveBlock 				; save "Name",from,size
.2b74	ad 1c 05	lda $051c			lda 	PGMBaseHigh 				; set load address
.2b77	8d 2b 06	sta $062b			sta 	FSBBlock+3
.2b7a	9c 2a 06	stz $062a			stz 	FSBBlock+2
.2b7d	20 80 21	jsr $2180			jsr		PGMEndProgram 				; end of program -> zTemp0
.2b80	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2b82	d0 02		bne $2b86			bne 	_CLNoCarry
.2b84	e6 25		inc $25				inc 	zTemp0+1
.2b86					_CLNoCarry:
.2b86	a5 24		lda $24				lda 	zTemp0
.2b88	8d 2c 06	sta $062c			sta 	FSBBlock+4
.2b8b	38		sec				sec
.2b8c	a5 25		lda $25				lda 	zTemp0+1
.2b8e	ed 2b 06	sbc $062b			sbc 	FSBBlock+3
.2b91	8d 2d 06	sta $062d			sta 	FSBBlock+5
.2b94	80 13		bra $2ba9			bra 	_CSSave
.2b96					_CLSaveBlock:
.2b96	20 56 2b	jsr $2b56			jsr 	FileCheckSecondParam 		; the address to save from.
.2b99	20 92 29	jsr $2992			jsr 	ERRCheckComma
.2b9c	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; get size
.2b9f	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2ba1	8d 2c 06	sta $062c			sta 	FSBBlock+4
.2ba4	a5 09		lda $09				lda 	IFR0+IM1
.2ba6	8d 2d 06	sta $062d			sta 	FSBBlock+5
.2ba9					_CSSave:
.2ba9	5a		phy				phy
.2baa	a2 28		ldx #$28			ldx 	#FSBBlock & $FF
.2bac	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2bae	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2bb1	7a		ply				ply
.2bb2	b0 01		bcs $2bb5			bcs 	_CSFail
.2bb4	60		rts				rts
.2bb5					_CSFail:
.2bb5	4c 71 29	jmp $2971		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2bb8					ErrorHandler:
.2bb8	fa		plx				plx 								; get address of msg
.2bb9	7a		ply				ply
.2bba	e8		inx				inx 								; bump past RTS
.2bbb	d0 01		bne $2bbe			bne 	_EHNoInc
.2bbd	c8		iny				iny
.2bbe					_EHNoInc:
.2bbe	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2bc1	ad 2e 06	lda $062e			lda 	ERRLine 					; direct command ?
.2bc4	0d 2f 06	ora $062f			ora 	ERRLine+1
.2bc7	f0 10		beq $2bd9			beq 	_EHNoNumber
.2bc9	a2 dc		ldx #$dc			ldx 	#_EHAtMsg & $FF
.2bcb	a0 2b		ldy #$2b			ldy 	#_EHAtMsg >> 8
.2bcd	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2bd0	ad 2e 06	lda $062e			lda 	ERRLine 					; line number -> XA
.2bd3	ae 2f 06	ldx $062f			ldx 	ERRLine+1
.2bd6	20 e1 2b	jsr $2be1			jsr 	WriteIntXA
.2bd9					_EHNoNumber:
.2bd9	4c 0a 2c	jmp $2c0a			jmp 	WarmStartNewLine
.2bdc					_EHAtMsg:
>2bdc	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2be1					_EHAtMsg1:
.2be1					WriteIntXA:
.2be1	da		phx				phx
.2be2	48		pha				pha
.2be3	a2 08		ldx #$08			ldx 	#IFR0
.2be5	20 76 33	jsr $3376			jsr 	IFloatPushRx
.2be8	68		pla				pla
.2be9	20 29 34	jsr $3429			jsr 	IFloatSetByte
.2bec	68		pla				pla
.2bed	85 09		sta $09				sta 	IFR0+IM1
.2bef	a9 0a		lda #$0a			lda 	#10 						; decimal
.2bf1	20 c9 31	jsr $31c9			jsr 	IFloatIntegerToStringR0	 	; convert
.2bf4	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2bf7	a2 08		ldx #$08			ldx 	#IFR0
.2bf9	20 97 33	jsr $3397			jsr 	IFloatPullRx
.2bfc	60		rts				rts
.2bfd					NotImplemented:
.2bfd	4c f3 27	jmp $27f3		jmp	ErrorV_unimplemented
.062e					ERRLine:
>062e							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2c00					WarmStart:
.2c00	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2c02	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2c05	a9 6b		lda #$6b			lda 	#"k"
.2c07	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2c0a					WarmStartNewLine:
.2c0a	a9 0d		lda #$0d			lda 	#13
.2c0c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2c0f					WarmStartNoPrompt:
.2c0f	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2c11	9a		txs				txs
.2c12	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2c15	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2c16	d0 01		bne $2c19			bne 	_WSSkip
.2c18	c8		iny				iny
.2c19					_WSSkip:
.2c19	86 28		stx $28				stx 	zTemp2 						; save address
.2c1b	84 29		sty $29				sty 	zTemp2+1
.2c1d	b2 28		lda ($28)			lda 	(zTemp2)
.2c1f	f0 ee		beq $2c0f			beq 	WarmStartNoPrompt 			; ignore empty line.
.2c21	a2 53		ldx #$53			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2c23	a0 2c		ldy #$2c			ldy 	#TOKGetCharacter >> 8
.2c25	38		sec				sec
.2c26	20 f2 21	jsr $21f2			jsr 	TOKTokenise
.2c29	b0 25		bcs $2c50			bcs 	_WSSyntax
.2c2b	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2c2e	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2c31	d0 0b		bne $2c3e			bne 	_WSLineEdit
.2c33	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2c35	85 18		sta $18				sta 	codePtr
.2c37	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2c39	85 19		sta $19				sta 	codePtr+1
.2c3b	4c 8e 15	jmp $158e			jmp 	RUNNewLine
.2c3e					_WSLineEdit:
.2c3e	20 cd 20	jsr $20cd			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2c41	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2c44	c9 04		cmp #$04			cmp 	#4
.2c46	f0 03		beq $2c4b			beq 	_WSNoInsert
.2c48	20 17 21	jsr $2117			jsr 	PGMInsertLine				; if not, maybe insert
.2c4b					_WSNoInsert:
.2c4b	20 af 10	jsr $10af			jsr 	ClearCode 					; clear variables etc.
.2c4e	80 bf		bra $2c0f			bra 	WarmStartNoPrompt
.2c50					_WSSyntax:
.2c50	4c b1 27	jmp $27b1		jmp	ErrorV_syntax
.2c53					TOKGetCharacter:
.2c53	b2 28		lda ($28)			lda 	(zTemp2)
.2c55	90 06		bcc $2c5d			bcc 	_GSNoIncrement
.2c57	e6 28		inc $28				inc 	zTemp2
.2c59	d0 02		bne $2c5d			bne 	_GSNoIncrement
.2c5b	e6 29		inc $29				inc 	zTemp2+1
.2c5d					_GSNoIncrement:
.2c5d	c9 00		cmp #$00			cmp 	#0
.2c5f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2c60					VARArrayLookup:
.2c60	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2c62	86 25		stx $25				stx 	zTemp0+1
.2c64	b2 24		lda ($24)			lda 	(zTemp0)
.2c66	48		pha				pha
.2c67	5a		phy				phy
.2c68	a0 01		ldy #$01			ldy 	#1
.2c6a	b1 24		lda ($24),y			lda 	(zTemp0),y
.2c6c	7a		ply				ply
.2c6d	48		pha				pha
.2c6e	20 d4 17	jsr $17d4			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2c71	68		pla				pla 								; array address to zTemp0
.2c72	85 25		sta $25				sta 	zTemp0+1
.2c74	68		pla				pla
.2c75	85 24		sta $24				sta 	zTemp0
.2c77	5a		phy				phy 								; save codePtr position.
.2c78	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2c7a	b1 24		lda ($24),y			lda 	(zTemp0),y
.2c7c	48		pha				pha 								; save bit 15 on stack.
.2c7d	29 7f		and #$7f			and 	#$7F
.2c7f	85 26		sta $26				sta 	zTemp1
.2c81	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2c83	d2 24		cmp ($24)			cmp 	(zTemp0)
.2c85	a5 09		lda $09				lda 	IFR0+IM1
.2c87	e5 26		sbc $26				sbc 	zTemp1
.2c89	b0 3a		bcs $2cc5			bcs 	_VALIndex
.2c8b	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2c8d	c9 40		cmp #$40			cmp 	#$40
.2c8f	b0 34		bcs $2cc5			bcs 	_VALIndex
.2c91	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2c93	26 09		rol $09				rol 	IFR0+IM1
.2c95	fa		plx				plx 								; get msb of size -> X
.2c96	30 04		bmi $2c9c			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2c98	06 08		asl $08				asl 	IFR0+IM0
.2c9a	26 09		rol $09				rol 	IFR0+IM1
.2c9c					_VARNotX4:
.2c9c	18		clc				clc 								; add the two for the size bytes
.2c9d	a5 08		lda $08				lda 	IFR0+IM0
.2c9f	69 02		adc #$02			adc 	#2
.2ca1	85 08		sta $08				sta 	IFR0+IM0
.2ca3	90 02		bcc $2ca7			bcc 	_VARNoCarry1
.2ca5	e6 09		inc $09				inc 	IFR0+IM1
.2ca7					_VARNoCarry1:
.2ca7	18		clc				clc 								; calculate the element address and push to stack.
.2ca8	a5 08		lda $08				lda 	IFR0+IM0
.2caa	65 24		adc $24				adc 	zTemp0
.2cac	48		pha				pha
.2cad	a5 09		lda $09				lda 	IFR0+IM1
.2caf	65 25		adc $25				adc 	zTemp0+1
.2cb1	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2cb3	30 04		bmi $2cb9			bmi 	_VARHasSubLevel
.2cb5	aa		tax				tax 								; address in XA
.2cb6	68		pla				pla
.2cb7	7a		ply				ply 								; restore Y and exit
.2cb8	60		rts				rts
.2cb9					_VARHasSubLevel:
.2cb9	aa		tax				tax 								; get link address in XA
.2cba	68		pla				pla
.2cbb	7a		ply				ply 								; restore code position.
.2cbc	48		pha				pha
.2cbd	20 92 29	jsr $2992			jsr 	ERRCheckComma 				; comma required.
.2cc0	68		pla				pla
.2cc1	20 60 2c	jsr $2c60			jsr 	VARArrayLookup 				; call it recursively
.2cc4	60		rts				rts
.2cc5					_VALIndex:
.2cc5	4c 8d 28	jmp $288d		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2cc8					VARCreate:
.2cc8	5a		phy				phy
.2cc9	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2ccb	a2 00		ldx #$00			ldx 	#0
.2ccd	20 cc 10	jsr $10cc			jsr 	AllocateMemory
.2cd0	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2cd2	86 27		stx $27				stx 	zTemp1+1
.2cd4	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2cd6	ad 32 06	lda $0632			lda 	VARHash
.2cd9	91 26		sta ($26),y			sta 	(zTemp1),y
.2cdb	c8		iny				iny 								; put address of name into +3,+4
.2cdc	ad 30 06	lda $0630			lda 	VARNameAddress
.2cdf	91 26		sta ($26),y			sta 	(zTemp1),y
.2ce1	c8		iny				iny
.2ce2	ad 31 06	lda $0631			lda 	VARNameAddress+1
.2ce5	91 26		sta ($26),y			sta 	(zTemp1),y
.2ce7	ad 33 06	lda $0633			lda 	VARType
.2cea	29 01		and #$01			and 	#1
.2cec	f0 06		beq $2cf4			beq 	_CVNotString
.2cee	a0 08		ldy #$08			ldy 	#5+3
.2cf0	a9 80		lda #$80			lda 	#$80
.2cf2	91 26		sta ($26),y			sta 	(zTemp1),y
.2cf4					_CVNotString:
.2cf4	ad 54 06	lda $0654			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2cf7	85 24		sta $24				sta 	zTemp0
.2cf9	ad 55 06	lda $0655			lda 	VARHashEntry+1
.2cfc	85 25		sta $25				sta 	zTemp0+1
.2cfe	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2d00	b2 24		lda ($24)			lda 	(zTemp0)
.2d02	92 26		sta ($26)			sta 	(zTemp1)
.2d04	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d06	91 26		sta ($26),y			sta 	(zTemp1),y
.2d08	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2d0a	92 24		sta ($24)			sta 	(zTemp0)
.2d0c	a5 27		lda $27				lda 	zTemp1+1
.2d0e	91 24		sta ($24),y			sta 	(zTemp0),y
.2d10	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2d12	a6 27		ldx $27				ldx 	zTemp1+1
.2d14	18		clc				clc 								; add 5 to point to the data.
.2d15	69 05		adc #$05			adc 	#5
.2d17	90 01		bcc $2d1a			bcc 	_VCNoCarry
.2d19	e8		inx				inx
.2d1a					_VCNoCarry:
.2d1a	7a		ply				ply
.2d1b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2d1c					VARFind:
.2d1c	5a		phy				phy
.2d1d	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2d1f	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d21	85 27		sta $27				sta 	zTemp1+1
.2d23	f0 1c		beq $2d41			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2d25	b2 24		lda ($24)			lda 	(zTemp0)
.2d27	85 26		sta $26				sta 	zTemp1
.2d29					_VFLoop:
.2d29	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2d2b	b1 26		lda ($26),y			lda 	(zTemp1),y
.2d2d	cd 32 06	cmp $0632			cmp 	VARHash
.2d30	f0 12		beq $2d44			beq 	_VFHashesMatch 				; if so, check the name.
.2d32					_VFNext:
.2d32	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2d34	aa		tax				tax
.2d35	a0 01		ldy #$01			ldy 	#1
.2d37	b1 26		lda ($26),y			lda 	(zTemp1),y
.2d39	85 27		sta $27				sta 	zTemp1+1
.2d3b	86 26		stx $26				stx 	zTemp1
.2d3d	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2d3f	d0 e8		bne $2d29			bne 	_VFLoop
.2d41					_VFExitFail:
.2d41	7a		ply				ply
.2d42	18		clc				clc
.2d43	60		rts				rts
.2d44					_VFHashesMatch:
.2d44	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2d46	b1 26		lda ($26),y			lda 	(zTemp1),y
.2d48	85 28		sta $28				sta 	zTemp2
.2d4a	c8		iny				iny
.2d4b	b1 26		lda ($26),y			lda 	(zTemp1),y
.2d4d	85 29		sta $29				sta 	zTemp2+1
.2d4f	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2d51					_VFNameCompLoop:
.2d51	c8		iny				iny 								; char at a time
.2d52	b9 34 06	lda $0634,y			lda 	VARBuffer,y
.2d55	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2d57	d0 d9		bne $2d32			bne 	_VFNext						; next entry if different.
.2d59	c9 7c		cmp #$7c			cmp 	#$7C
.2d5b	90 f4		bcc $2d51			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2d5d	18		clc				clc
.2d5e	a5 26		lda $26				lda 	zTemp1
.2d60	a6 27		ldx $27				ldx 	zTemp1+1
.2d62	69 05		adc #$05			adc 	#5
.2d64	90 01		bcc $2d67			bcc 	_VFNNoCarry
.2d66	e8		inx				inx
.2d67					_VFNNoCarry:
.2d67	7a		ply				ply
.2d68	38		sec				sec
.2d69	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2d6a					VARGetInfo:
.2d6a	98		tya				tya 								; calculate the address of the identifier start.
.2d6b	18		clc				clc
.2d6c	65 18		adc $18				adc 	codePtr
.2d6e	8d 30 06	sta $0630			sta 	VARNameAddress
.2d71	a5 19		lda $19				lda 	codePtr+1
.2d73	69 00		adc #$00			adc 	#0
.2d75	8d 31 06	sta $0631			sta 	VARNameAddress+1
.2d78	9c 32 06	stz $0632			stz 	VARHash
.2d7b	a2 00		ldx #$00			ldx 	#0
.2d7d					_VARCopyName:
.2d7d	18		clc				clc 								; update the sum hash.
.2d7e	ad 32 06	lda $0632			lda 	VARHash
.2d81	71 18		adc ($18),y			adc 	(codePtr),y
.2d83	8d 32 06	sta $0632			sta 	VARHash
.2d86	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2d88	c8		iny				iny
.2d89	9d 34 06	sta $0634,x			sta 	VARBuffer,x
.2d8c	e8		inx				inx
.2d8d	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2d8f	90 ec		bcc $2d7d			bcc 	_VARCopyName
.2d91	8d 33 06	sta $0633			sta 	VARType 					; save type byte
.2d94	29 03		and #$03			and 	#3 							; type is 0-3
.2d96	0a		asl a				asl 	a
.2d97	0a		asl a				asl 	a
.2d98	85 24		sta $24				sta 	zTemp0
.2d9a	ad 32 06	lda $0632			lda 	VARHash 					; force into range of hash entries per type.
.2d9d	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2d9f	65 24		adc $24				adc 	zTemp0 						; index of hash table
.2da1	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2da2	69 56		adc #$56			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2da4	85 24		sta $24				sta 	zTemp0
.2da6	8d 54 06	sta $0654			sta 	VARHashEntry
.2da9	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2dab	69 00		adc #$00			adc 	#0
.2dad	85 25		sta $25				sta 	zTemp0+1
.2daf	8d 55 06	sta $0655			sta 	VARHashEntry+1
.2db2	60		rts				rts
.2db3					VARClearHashTables:
.2db3	a2 00		ldx #$00			ldx 	#0
.2db5					_VCHRLoop:
.2db5	a9 00		lda #$00			lda 	#0
.2db7	9d 56 06	sta $0656,x			sta 	VARHashTables,x
.2dba	e8		inx				inx
.2dbb	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2dbd	d0 f6		bne $2db5			bne 	_VCHRLoop
.2dbf	60		rts				rts
.0630					VARNameAddress:
>0630							.fill 	2
.0632					VARHash:
>0632							.fill 	1
.0633					VARType:
>0633							.fill 	1
.0634					VARBuffer:
>0634							.fill 	32
.0654					VARHashEntry:
>0654							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0656					VARHashTables:
>0656							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2dc0					VARCheckSimple:
.2dc0	aa		tax				tax 								; save in X
.2dc1	b1 18		lda ($18),y			lda 	(codePtr),y
.2dc3	c9 7c		cmp #$7c			cmp 	#$7C
.2dc5	d0 15		bne $2ddc			bne 	_VCSComplex
.2dc7	c8		iny				iny 								; consume the second byte, the type.
.2dc8	8a		txa				txa  								; character (40-7F) x 4
.2dc9	0a		asl a				asl 	a
.2dca	0a		asl a				asl  	a
.2dcb	18		clc				clc
.2dcc	69 76		adc #$76			adc 	#FastVariables & $FF
.2dce	85 08		sta $08				sta 	IFR0+IM0
.2dd0	a9 06		lda #$06			lda 	#FastVariables >> 8
.2dd2	69 00		adc #$00			adc 	#0
.2dd4	85 09		sta $09				sta 	IFR0+IM1
.2dd6	64 0a		stz $0a				stz 	IFR0+IM2
.2dd8	64 0b		stz $0b				stz 	IFR0+IExp
.2dda	38		sec				sec 								; it's a reference
.2ddb	60		rts				rts
.2ddc					_VCSComplex:
.2ddc	88		dey				dey	 								; extract information.
.2ddd	20 6a 2d	jsr $2d6a			jsr 	VARGetInfo
.2de0	20 1c 2d	jsr $2d1c			jsr 	VARFind 					; search for variable
.2de3	b0 0a		bcs $2def			bcs 	_VCSHaveVariable
.2de5	ad 33 06	lda $0633			lda 	VARType 					; error if arrays, cannot autocreate
.2de8	29 02		and #$02			and 	#2
.2dea	d0 25		bne $2e11			bne 	_VCNoCreate
.2dec	20 c8 2c	jsr $2cc8			jsr 	VARCreate 					; create variable
.2def					_VCSHaveVariable:
.2def	48		pha				pha 								; save LSB on the stack
.2df0	ad 33 06	lda $0633			lda 	VARType 					; get var type, and shift bit 1 into carry
.2df3	6a		ror a				ror 	a
.2df4	6a		ror a				ror 	a
.2df5	68		pla				pla 								; restore LSB
.2df6	90 08		bcc $2e00			bcc 	_VCSNotArray 				; skip if not an array
.2df8	20 60 2c	jsr $2c60			jsr 	VARArrayLookup 				; look for subscripts.
.2dfb	48		pha				pha 								; check )
.2dfc	20 8a 29	jsr $298a			jsr 	ERRCheckRParen
.2dff	68		pla				pla
.2e00					_VCSNotArray:
.2e00	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2e02	85 08		sta $08				sta 	IFR0+IM0
.2e04	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2e06	ad 33 06	lda $0633			lda 	VARType 					; number/string bit into carry
.2e09	6a		ror a				ror 	a
.2e0a	a9 00		lda #$00			lda 	#0
.2e0c	6a		ror a				ror 	a 							; now $00 or $80
.2e0d	85 0b		sta $0b				sta 	IFR0+IExp
.2e0f	38		sec				sec 								; it's a reference
.2e10	60		rts				rts
.2e11					_VCNoCreate:
.2e11	4c b3 28	jmp $28b3		jmp	ErrorV_uninitialised
.0676					FastVariables:
>0676							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2e14					IFInitialise:
.2e14	9c e6 06	stz $06e6			stz 	IFStackIndex 				; reset the internal stack.
.2e17	60		rts				rts
.2e18					IFloatSubtract:
.2e18	da		phx				phx
.2e19	a2 08		ldx #$08			ldx 	#IFR0
.2e1b	20 32 34	jsr $3432			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2e1e	fa		plx				plx
.2e1f					IFloatAdd:
.2e1f	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2e21	05 0b		ora $0b				ora 	IFR0+IExp
.2e23	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2e25	d0 4e		bne $2e75			bne 	_IFloatAddDecimals 			; floating point version.
.2e27					_IFAddSubMantissa:
.2e27	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2e29	45 0b		eor $0b				eor 	IFR0+IExp
.2e2b	29 40		and #$40			and 	#IFSign
.2e2d	d0 21		bne $2e50			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2e2f	18		clc				clc 								; do the actual addition
.2e30	a5 08		lda $08				lda 	IFR0+IM0
.2e32	75 00		adc $00,x			adc 		IM0,x
.2e34	85 08		sta $08				sta 	IFR0+IM0
.2e36	a5 09		lda $09				lda 	IFR0+IM1
.2e38	75 01		adc $01,x			adc 		IM1,x
.2e3a	85 09		sta $09				sta 	IFR0+IM1
.2e3c	a5 0a		lda $0a				lda 	IFR0+IM2
.2e3e	75 02		adc $02,x			adc 		IM2,x
.2e40	85 0a		sta $0a				sta 	IFR0+IM2
.2e42	10 29		bpl $2e6d			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2e44	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2e46	20 56 34	jsr $3456			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2e49	20 80 34	jsr $3480			jsr 	IFloatIncExponent
.2e4c	d0 1f		bne $2e6d			bne 	_IFloatAddExit
.2e4e	38		sec				sec 								; overflowed numerically.
.2e4f	60		rts				rts
.2e50					_IFloatSubMantissa:
.2e50	38		sec				sec 								; do the subtraction R0-Rx
.2e51	a5 08		lda $08				lda 	IFR0+IM0
.2e53	f5 00		sbc $00,x			sbc 		IM0,x
.2e55	85 08		sta $08				sta 	IFR0+IM0
.2e57	a5 09		lda $09				lda 	IFR0+IM1
.2e59	f5 01		sbc $01,x			sbc 		IM1,x
.2e5b	85 09		sta $09				sta 	IFR0+IM1
.2e5d	a5 0a		lda $0a				lda 	IFR0+IM2
.2e5f	f5 02		sbc $02,x			sbc 		IM2,x
.2e61	85 0a		sta $0a				sta 	IFR0+IM2
.2e63	b0 08		bcs $2e6d			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2e65	a2 08		ldx #$08			ldx 	#IFR0
.2e67	20 3a 34	jsr $343a			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2e6a	20 32 34	jsr $3432			jsr 	IFloatNegate 				; negate the result using sign bit.
.2e6d					_IFloatAddExit:
.2e6d	18		clc				clc
.2e6e	60		rts				rts
.2e6f					_IFloatZeroAdd:
.2e6f	fa		plx				plx 								; return this value in R0
.2e70	20 b8 33	jsr $33b8			jsr 	IFloatCopyFromRegister
.2e73	18		clc				clc
.2e74	60		rts				rts
.2e75					_IFloatAddDecimals:
.2e75	20 20 34	jsr $3420			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2e78	f0 f3		beq $2e6d			beq 	_IFloatAddExit
.2e7a	20 5e 34	jsr $345e			jsr 	IFloatNormalise 			; normalise RX
.2e7d	da		phx				phx 								; normalise R0
.2e7e	a2 08		ldx #$08			ldx 	#IFR0
.2e80	20 20 34	jsr $3420			jsr 	IFloatCheckZero
.2e83	f0 ea		beq $2e6f			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2e85	20 5e 34	jsr $345e			jsr 	IFloatNormalise
.2e88	fa		plx				plx
.2e89	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2e8b	29 3f		and #$3f			and 	#IFXMask
.2e8d	38		sec				sec
.2e8e	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2e90	85 20		sta $20				sta 	iTemp0
.2e92	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2e94	29 3f		and #$3f			and 	#IFXMask
.2e96	38		sec				sec
.2e97	e9 20		sbc #$20			sbc 	#$20
.2e99	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2e9b	b0 02		bcs $2e9f			bcs 	_IFloatHaveLarger
.2e9d	a5 20		lda $20				lda 	iTemp0
.2e9f					_IFloatHaveLarger:
.2e9f	18		clc				clc 								; get the actual one back.
.2ea0	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2ea2	20 af 2e	jsr $2eaf			jsr 	_IFShiftXToA
.2ea5	da		phx				phx
.2ea6	a2 08		ldx #$08			ldx 	#IFR0
.2ea8	20 af 2e	jsr $2eaf			jsr 	_IFShiftXToA
.2eab	fa		plx				plx
.2eac	4c 27 2e	jmp $2e27			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2eaf					_IFShiftXToA:
.2eaf	8d de 06	sta $06de			sta 	IFTarget
.2eb2	20 20 34	jsr $3420			jsr 	IFloatCheckZero 			; check adding zero ?
.2eb5	f0 11		beq $2ec8			beq 	_IFSXExit
.2eb7					_IFSXLoop:
.2eb7	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2eb9	29 3f		and #$3f			and 	#IFXMask
.2ebb	cd de 06	cmp $06de			cmp 	IFTarget
.2ebe	f0 08		beq $2ec8			beq 	_IFSXExit
.2ec0	20 56 34	jsr $3456			jsr 	IFloatShiftRight
.2ec3	20 80 34	jsr $3480			jsr 	IFloatIncExponent
.2ec6	80 ef		bra $2eb7			bra 	_IFSXLoop
.2ec8					_IFSXExit:
.2ec8	60		rts				rts
.06de					IFTarget:
>06de							.fill 	1
.2ec9					IFloatMultiply:
.2ec9	8e de 06	stx $06de			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2ecc	20 81 2f	jsr $2f81			jsr 	IFCalculateNewSign
.2ecf	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2ed1	05 0b		ora $0b				ora 	IFR0+IExp
.2ed3	29 3f		and #$3f			and 	#IFXMask
.2ed5	15 01		ora $01,x			ora 	IM1,x
.2ed7	05 09		ora $09				ora 	IFR0+IM1
.2ed9	15 02		ora $02,x			ora 	IM2,x
.2edb	05 0a		ora $0a				ora 	IFR0+IM2
.2edd	d0 0a		bne $2ee9			bne 	_IFMStandard
.2edf	20 03 34	jsr $3403			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2ee2	ad e0 06	lda $06e0			lda 	IFNewSign
.2ee5	85 0b		sta $0b				sta 	IFR0+IExp
.2ee7	18		clc				clc
.2ee8	60		rts				rts
.2ee9					_IFMStandard:
.2ee9	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2eeb	20 78 2f	jsr $2f78			jsr 	IFMSignExtend
.2eee	8d df 06	sta $06df			sta 	IFNewExponent
.2ef1	a5 0b		lda $0b				lda 	IFR0+IExp
.2ef3	20 78 2f	jsr $2f78			jsr 	IFMSignExtend
.2ef6	18		clc				clc
.2ef7	6d df 06	adc $06df			adc 	IFNewExponent
.2efa	8d df 06	sta $06df			sta 	IFNewExponent
.2efd	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2eff	20 c9 33	jsr $33c9			jsr 	IFloatCopyToRegister
.2f02	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2f04	20 27 34	jsr $3427			jsr 	IFloatSetZero
.2f07					_IFMLoop:
.2f07	a2 14		ldx #$14			ldx 	#IFRTemp
.2f09	20 20 34	jsr $3420			jsr 	IFloatCheckZero
.2f0c	f0 3a		beq $2f48			beq 	_IFMExit
.2f0e	ae de 06	ldx $06de			ldx 	IFTarget 					; look at adder MSB
.2f11	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2f13	10 03		bpl $2f18			bpl	 	_IFMTargetOkay
.2f15	20 69 2f	jsr $2f69			jsr 	_IFMShiftAll
.2f18					_IFMTargetOkay:
.2f18	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2f1a	29 01		and #$01			and 	#1
.2f1c	f0 16		beq $2f34			beq 	_IFMNoAdd
.2f1e	ae de 06	ldx $06de			ldx 	IFTarget 					; add adder
.2f21	18		clc				clc
.2f22	a5 08		lda $08				lda 	IFR0+IM0
.2f24	75 00		adc $00,x			adc 		IM0,x
.2f26	85 08		sta $08				sta 	IFR0+IM0
.2f28	a5 09		lda $09				lda 	IFR0+IM1
.2f2a	75 01		adc $01,x			adc 		IM1,x
.2f2c	85 09		sta $09				sta 	IFR0+IM1
.2f2e	a5 0a		lda $0a				lda 	IFR0+IM2
.2f30	75 02		adc $02,x			adc 		IM2,x
.2f32	85 0a		sta $0a				sta 	IFR0+IM2
.2f34					_IFMNoAdd:
.2f34	a5 0a		lda $0a				lda 	IFR0+IM2
.2f36	10 03		bpl $2f3b			bpl 	_IFMResultOkay
.2f38	20 69 2f	jsr $2f69			jsr 	_IFMShiftAll
.2f3b					_IFMResultOkay:
.2f3b	a2 14		ldx #$14			ldx 	#IFRTemp
.2f3d	20 56 34	jsr $3456			jsr 	IFloatShiftRight
.2f40	ae de 06	ldx $06de			ldx 	IFTarget
.2f43	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.2f46	80 bf		bra $2f07			bra 	_IFMLoop
.2f48					_IFMExit:
.2f48	ad df 06	lda $06df			lda 	IFNewExponent 				; validate new exponent.
.2f4b	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2f4d	90 0f		bcc $2f5e			bcc 	_IFMOkay
.2f4f	c9 e0		cmp #$e0			cmp 	#$E0
.2f51	b0 0b		bcs $2f5e			bcs 	_IFMOkay
.2f53	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2f55	f0 10		beq $2f67			beq 	_IFMError
.2f57	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2f59	20 27 34	jsr $3427			jsr 	IFloatSetZero
.2f5c	18		clc				clc
.2f5d	60		rts				rts
.2f5e					_IFMOkay:
.2f5e	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2f60	0d e0 06	ora $06e0			ora 	IFNewSign
.2f63	85 0b		sta $0b				sta 	IFR0+IExp
.2f65	18		clc				clc
.2f66	60		rts				rts
.2f67					_IFMError:
.2f67	38		sec				sec
.2f68	60		rts				rts
.2f69					_IFMShiftAll:
.2f69	a2 08		ldx #$08			ldx 	#IFR0
.2f6b	20 56 34	jsr $3456			jsr 	IFloatShiftRight
.2f6e	ae de 06	ldx $06de			ldx 	IFTarget
.2f71	20 56 34	jsr $3456			jsr 	IFloatShiftRight
.2f74	ee df 06	inc $06df			inc 	IFNewExponent
.2f77	60		rts				rts
.2f78					IFMSignExtend:
.2f78	29 3f		and #$3f			and 	#IFXMask
.2f7a	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2f7c	90 02		bcc $2f80			bcc 	_IFMNoSXX
.2f7e	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2f80					_IFMNoSXX:
.2f80	60		rts				rts
.2f81					IFCalculateNewSign:
.2f81	b5 03		lda $03,x			lda 	IExp,x
.2f83	45 0b		eor $0b				eor 	IFR0+IExp
.2f85	29 40		and #$40			and 	#IFSign
.2f87	8d e0 06	sta $06e0			sta 	IFNewSign
.2f8a	60		rts				rts
.06df					IFNewExponent:
>06df							.fill 	1
.06e0					IFNewSign:
>06e0							.fill 	1
.2f8b					IFloatDivideInteger:
.2f8b	20 a4 2f	jsr $2fa4			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2f8e	b0 06		bcs $2f96			bcs 	_IFDIExit
.2f90	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2f92	20 b8 33	jsr $33b8			jsr 	IFloatCopyFromRegister
.2f95	18		clc				clc
.2f96					_IFDIExit:
.2f96	60		rts				rts
.2f97					IFloatModulusInteger:
.2f97	20 a4 2f	jsr $2fa4			jsr 	IFloatDivideIntegerCommon
.2f9a	b0 07		bcs $2fa3			bcs 	_IFMIExit
.2f9c	ae de 06	ldx $06de			ldx 	IFTarget
.2f9f	20 b8 33	jsr $33b8			jsr 	IFloatCopyFromRegister
.2fa2	18		clc				clc
.2fa3					_IFMIExit:
.2fa3	60		rts				rts
.2fa4					IFloatDivideIntegerCommon:
.2fa4	8e de 06	stx $06de			stx 	IFTarget  					; this is s1, s0 = R0
.2fa7	20 81 2f	jsr $2f81			jsr 	IFCalculateNewSign 			; calculate sign of result
.2faa	20 d2 2f	jsr $2fd2			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2fad	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2faf	20 20 34	jsr $3420			jsr 	IFloatCheckZero
.2fb2	f0 1c		beq $2fd0			beq 	_IFDIDivZero
.2fb4	ae de 06	ldx $06de			ldx 	IFTarget 					; zero Rx (S1)
.2fb7	20 27 34	jsr $3427			jsr 	IFloatSetZero
.2fba	5a		phy				phy
.2fbb	a0 18		ldy #$18			ldy 	#24
.2fbd					_IFDILoop:
.2fbd	20 e3 2f	jsr $2fe3			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2fc0	20 ef 2f	jsr $2fef			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2fc3	88		dey				dey
.2fc4	d0 f7		bne $2fbd			bne 	_IFDILoop 					; do it 24 times
.2fc6	7a		ply				ply
.2fc7	ad e0 06	lda $06e0			lda 	IFNewSign 					; set sign of result.
.2fca	29 40		and #$40			and 	#IFSign
.2fcc	85 17		sta $17				sta 	IFRTemp+IExp
.2fce	18		clc				clc 								; is okay.
.2fcf	60		rts				rts
.2fd0					_IFDIDivZero:
.2fd0	38		sec				sec
.2fd1	60		rts				rts
.2fd2					IFDCopyRXToRTemp:
.2fd2	b5 00		lda $00,x			lda 	IM0,x
.2fd4	85 14		sta $14				sta 	IFRTemp+IM0
.2fd6	b5 01		lda $01,x			lda 	IM1,x
.2fd8	85 15		sta $15				sta 	IFRTemp+IM1
.2fda	b5 02		lda $02,x			lda 	IM2,x
.2fdc	85 16		sta $16				sta 	IFRTemp+IM2
.2fde	b5 03		lda $03,x			lda 	IExp,x
.2fe0	85 17		sta $17				sta 	IFRTemp+IExp
.2fe2	60		rts				rts
.2fe3					IFDShiftSTempS1Left:
.2fe3	a2 14		ldx #$14			ldx 	#IFRTemp
.2fe5	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft
.2fe8	ae de 06	ldx $06de			ldx 	IFTarget
.2feb	20 4f 34	jsr $344f			jsr 	IFloatRotateLeft
.2fee	60		rts				rts
.2fef					IFDTrySubtract:
.2fef	ae de 06	ldx $06de			ldx 	IFTarget 					; s1 = Rx
.2ff2	38		sec				sec 								; subtract, saving the results on the stack.
.2ff3	b5 00		lda $00,x			lda 	IM0,x
.2ff5	e5 08		sbc $08				sbc 	IFR0+IM0
.2ff7	48		pha				pha
.2ff8	b5 01		lda $01,x			lda 	IM1,x
.2ffa	e5 09		sbc $09				sbc 	IFR0+IM1
.2ffc	48		pha				pha
.2ffd	b5 02		lda $02,x			lda 	IM2,x
.2fff	e5 0a		sbc $0a				sbc 	IFR0+IM2
.3001	b0 03		bcs $3006			bcs 	_IFDCanSubtract
.3003	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.3004	68		pla				pla
.3005	60		rts				rts
.3006					_IFDCanSubtract:
.3006	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.3008	68		pla				pla
.3009	95 01		sta $01,x			sta 	IM1,x
.300b	68		pla				pla
.300c	95 00		sta $00,x			sta 	IM0,x
.300e	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.3010	d0 06		bne $3018			bne 	_IFDCSExit
.3012	e6 15		inc $15				inc 	IFRTemp+IM1
.3014	d0 02		bne $3018			bne 	_IFDCSExit
.3016	e6 16		inc $16				inc 	IFRTemp+IM2
.3018					_IFDCSExit:
.3018	60		rts				rts
.3019					IFloatBitwiseAnd:
.3019	5a		phy				phy
.301a	20 5e 30	jsr $305e			jsr 	IFPreProcessBitwise 		; set up everything.
.301d	d0 0f		bne $302e			bne 	_IFBAExit
.301f					_IFBALoop:
.301f	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3022	35 00		and $00,x			and 	IM0,x
.3024	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3027	e8		inx				inx
.3028	c8		iny				iny
.3029	c0 03		cpy #$03			cpy 	#3
.302b	d0 f2		bne $301f			bne 	_IFBALoop
.302d	18		clc				clc
.302e					_IFBAExit:
.302e	7a		ply				ply
.302f	60		rts				rts
.3030					IFloatBitwiseOr:
.3030	5a		phy				phy
.3031	20 5e 30	jsr $305e			jsr 	IFPreProcessBitwise 		; set up everything.
.3034	d0 0f		bne $3045			bne 	_IFBAExit
.3036					_IFBALoop:
.3036	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3039	15 00		ora $00,x			ora 	IM0,x
.303b	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.303e	e8		inx				inx
.303f	c8		iny				iny
.3040	c0 03		cpy #$03			cpy 	#3
.3042	d0 f2		bne $3036			bne 	_IFBALoop
.3044	18		clc				clc
.3045					_IFBAExit:
.3045	7a		ply				ply
.3046	60		rts				rts
.3047					IFloatBitwiseXor:
.3047	5a		phy				phy
.3048	20 5e 30	jsr $305e			jsr 	IFPreProcessBitwise 		; set up everything.
.304b	d0 0f		bne $305c			bne 	_IFBAExit
.304d					_IFBALoop:
.304d	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3050	55 00		eor $00,x			eor 	IM0,x
.3052	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3055	e8		inx				inx
.3056	c8		iny				iny
.3057	c0 03		cpy #$03			cpy 	#3
.3059	d0 f2		bne $304d			bne 	_IFBALoop
.305b	18		clc				clc
.305c					_IFBAExit:
.305c	7a		ply				ply
.305d	60		rts				rts
.305e					IFPreProcessBitwise:
.305e	a0 00		ldy #$00			ldy 	#0 							; set index.
.3060	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.3062	15 03		ora $03,x			ora 	IExp,x
.3064	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.3066	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.3068	38		sec				sec 								; carry set just in cases.
.3069	60		rts				rts
.306a					IFloatAbsoluteR0:
.306a	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.306c	29 bf		and #$bf			and 	#IFSign ^ 255
.306e	85 0b		sta $0b				sta 	IFR0+IExp
.3070	18		clc				clc
.3071	60		rts				rts
.3072					IFloatSquareRootR0:
.3072	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.3074	20 20 34	jsr $3420			jsr 	IFloatCheckZero
.3077	f0 2e		beq $30a7			beq 	_IFSRZero
.3079	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.307b	29 40		and #$40			and 	#IFSign
.307d	d0 2f		bne $30ae			bne 	_IFSRFail
.307f	20 5e 34	jsr $345e			jsr 	IFloatNormalise 			; it will work better !
.3082	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.3084	20 c9 33	jsr $33c9			jsr 	IFloatCopyToRegister
.3087	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.3089	20 78 2f	jsr $2f78			jsr 	IFMSignExtend 				; sign extended version of the exponent
.308c	18		clc				clc
.308d	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.308f	85 0b		sta $0b				sta 	IFR0+IExp
.3091	4a		lsr a				lsr 	a 							; which we can halve.
.3092	38		sec				sec 								; convert back
.3093	e9 17		sbc #$17			sbc 	#23
.3095	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.3097	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.3099	20 b0 30	jsr $30b0			jsr 	_IFSRNewton
.309c	20 b0 30	jsr $30b0			jsr 	_IFSRNewton
.309f	20 b0 30	jsr $30b0			jsr 	_IFSRNewton
.30a2	20 b0 30	jsr $30b0			jsr 	_IFSRNewton
.30a5	18		clc				clc
.30a6	60		rts				rts
.30a7					_IFSRZero:
.30a7	a2 08		ldx #$08			ldx 	#IFR0
.30a9	20 27 34	jsr $3427			jsr 	IFloatSetZero
.30ac	18		clc				clc
.30ad	60		rts				rts
.30ae					_IFSRFail:
.30ae	38		sec				sec
.30af	60		rts				rts
.30b0					_IFSRNewton:
.30b0	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.30b2	20 76 33	jsr $3376			jsr 	IFloatPushRx
.30b5	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.30b7	20 76 33	jsr $3376			jsr 	IFloatPushRx
.30ba	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.30bc	20 4b 31	jsr $314b			jsr 	IFloatDivideFloat
.30bf	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.30c1	20 97 33	jsr $3397			jsr 	IFloatPullRx
.30c4	20 1f 2e	jsr $2e1f			jsr 	IFloatAdd 					; now guess + original/guess
.30c7	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.30c9	20 56 34	jsr $3456			jsr 	IFloatShiftRight
.30cc	a2 0c		ldx #$0c			ldx 	#IFR1
.30ce	20 97 33	jsr $3397			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.30d1	60		rts				rts
.30d2					IFloatFractionalR0:
.30d2	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.30d4	29 3f		and #$3f			and 	#IFXMask
.30d6	f0 17		beq $30ef			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.30d8	20 6a 30	jsr $306a			jsr 	IFloatAbsoluteR0 			; absolute value R0
.30db	a2 08		ldx #$08			ldx 	#IFR0
.30dd	20 5e 34	jsr $345e			jsr 	IFloatNormalise 			; normalise R0
.30e0	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.30e2	20 c9 33	jsr $33c9			jsr 	IFloatCopyToRegister
.30e5	20 28 31	jsr $3128			jsr 	IFloatIntegerR0 			; take integer part of R0
.30e8	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.30ea	20 18 2e	jsr $2e18			jsr 	IFloatSubtract
.30ed	80 05		bra $30f4			bra 	_FIPExit
.30ef					_FIPZero:
.30ef	a2 08		ldx #$08			ldx 	#IFR0
.30f1	20 27 34	jsr $3427			jsr 	IFloatSetZero
.30f4					_FIPExit:
.30f4	18		clc				clc
.30f5	60		rts				rts
.30f6					IFloatCompare:
.30f6	20 18 2e	jsr $2e18			jsr 	IFloatSubtract 				; subtract R0 from RX.
.30f9	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.30fb	05 0b		ora $0b				ora 	IFR0+IExp
.30fd	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.30ff	29 3f		and #$3f			and 	#IFXMask
.3101	d0 19		bne $311c			bne 	_IFCNonInteger
.3103	20 20 34	jsr $3420			jsr 	IFloatCheckZero 			; check if zero
.3106	f0 0f		beq $3117			beq 	_IFCZero
.3108					_IFCReturnSign:
.3108	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.310a	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.310c	48		pha				pha
.310d	a9 01		lda #$01			lda 	#1
.310f	20 29 34	jsr $3429			jsr 	IFloatSetByte 				; return to +1
.3112	68		pla				pla 								; sign bit back
.3113	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.3115	18		clc				clc
.3116	60		rts				rts
.3117					_IFCZero:
.3117	20 27 34	jsr $3427			jsr 	IFloatSetZero
.311a	18		clc				clc
.311b	60		rts				rts
.311c					_IFCNonInteger:
.311c	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.311e	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.3120	05 09		ora $09				ora 	IFR0+IM1
.3122	05 0a		ora $0a				ora 	IFR0+IM2
.3124	f0 f1		beq $3117			beq 	_IFCZero 					; near enough !
.3126	80 e0		bra $3108			bra 	_IFCReturnSign 				; return the sign of the difference.
.3128					IFloatIntegerR0:
.3128	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.312a	29 3f		and #$3f			and 	#IFXMask
.312c	f0 1b		beq $3149			beq 	_FIPExit 					; if so do nothing
.312e	a2 08		ldx #$08			ldx 	#IFR0
.3130	20 5e 34	jsr $345e			jsr 	IFloatNormalise 			; normalise
.3133	20 20 34	jsr $3420			jsr 	IFloatCheckZero 			; is it zero ?
.3136	f0 0e		beq $3146			beq 	_FIPZero 					; if so return zero.
.3138					_FIPShift:
.3138	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.313a	29 20		and #$20			and 	#$20 						; still -ve
.313c	f0 0b		beq $3149			beq 	_FIPExit
.313e	20 56 34	jsr $3456			jsr 	IFloatShiftRight 			; shift mantissa right
.3141	20 80 34	jsr $3480			jsr 	IFloatIncExponent 			; bump exponent
.3144	80 f2		bra $3138			bra 	_FIPShift
.3146					_FIPZero:
.3146	20 27 34	jsr $3427			jsr 	IFloatSetZero
.3149					_FIPExit:
.3149	18		clc				clc
.314a	60		rts				rts
.314b					IFloatDivideFloat:
.314b	8e de 06	stx $06de			stx 	IFTarget  					; this is s1, s0 = R0
.314e	20 81 2f	jsr $2f81			jsr 	IFCalculateNewSign 			; calculate sign of result
.3151	20 5e 34	jsr $345e			jsr 	IFloatNormalise 			; normalise RX
.3154	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.3156	20 5e 34	jsr $345e			jsr 	IFloatNormalise
.3159	20 20 34	jsr $3420			jsr 	IFloatCheckZero
.315c	f0 56		beq $31b4			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.315e	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.3160	20 78 2f	jsr $2f78			jsr 	IFMSignExtend
.3163	8d df 06	sta $06df			sta 	IFNewExponent
.3166	ae de 06	ldx $06de			ldx 	IFTarget 					; calculate s1.exponent
.3169	b5 03		lda $03,x			lda 	IExp,x
.316b	20 78 2f	jsr $2f78			jsr 	IFMSignExtend
.316e	38		sec				sec
.316f	ed df 06	sbc $06df			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.3172	38		sec				sec
.3173	e9 17		sbc #$17			sbc 	#23
.3175	8d df 06	sta $06df			sta 	IFNewExponent
.3178	20 b6 31	jsr $31b6			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.317b	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.317d	10 08		bpl $3187			bpl 	_IFDFNoShiftResult
.317f	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.3181	20 56 34	jsr $3456			jsr 	IFloatShiftRight
.3184	ee df 06	inc $06df			inc 	IFNewExponent
.3187					_IFDFNoShiftResult:
.3187	ad df 06	lda $06df			lda 	IFNewExponent 				; underflow/overflow check.
.318a	30 06		bmi $3192			bmi 	_IFDFCheckUnderflow
.318c	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.318e	b0 24		bcs $31b4			bcs 	_IFDFDivZero
.3190	80 11		bra $31a3			bra		_IFDFExit
.3192					_IFDFCheckUnderflow:
.3192	ad df 06	lda $06df			lda 	IFNewExponent 				; shift into a legal exponent.
.3195	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.3197	b0 0a		bcs $31a3			bcs 	_IFDFExit
.3199	ee df 06	inc $06df			inc 	IFNewExponent
.319c	a2 14		ldx #$14			ldx 	#IFRTemp
.319e	20 56 34	jsr $3456			jsr 	IFloatShiftRight
.31a1	80 ef		bra $3192			bra 	_IFDFCheckUnderflow
.31a3					_IFDFExit:
.31a3	ad df 06	lda $06df			lda 	IFNewExponent 				; combine exponent and sign.
.31a6	29 3f		and #$3f			and 	#IFXMask
.31a8	0d e0 06	ora $06e0			ora 	IFNewSign
.31ab	85 17		sta $17				sta 	IFRTemp+IExp
.31ad	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.31af	20 b8 33	jsr $33b8			jsr 	IFloatCopyFromRegister
.31b2	18		clc				clc
.31b3	60		rts				rts
.31b4					_IFDFDivZero:
.31b4	38		sec				sec
.31b5	60		rts				rts
.31b6					IFloatDivideSupport:
.31b6	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.31b8	20 27 34	jsr $3427			jsr 	IFloatSetZero
.31bb	5a		phy				phy 								; main division loop x 23
.31bc	a0 17		ldy #$17			ldy 	#23
.31be					_IFDSLoop:
.31be	20 ef 2f	jsr $2fef			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.31c1	20 e3 2f	jsr $2fe3			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.31c4	88		dey				dey
.31c5	d0 f7		bne $31be			bne 	_IFDSLoop 					; do it 24 times
.31c7	7a		ply				ply
.31c8	60		rts				rts
.31c9					IFloatIntegerToStringR0:
.31c9	8d e1 06	sta $06e1			sta 	IFBase 						; save base to use.
.31cc	20 a8 34	jsr $34a8			jsr 	IFloatBufferReset			; empty buffer
.31cf	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.31d1	29 3f		and #$3f			and 	#IFXMask
.31d3	d0 1d		bne $31f2			bne 	_IFIFail
.31d5	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.31d7	20 20 34	jsr $3420			jsr 	IFloatCheckZero
.31da	f0 0e		beq $31ea			beq 	_IFINotNegative
.31dc	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.31de	29 40		and #$40			and 	#IFSign
.31e0	f0 08		beq $31ea			beq 	_IFINotNegative
.31e2	a9 2d		lda #$2d			lda 	#"-"						; output -
.31e4	20 b7 34	jsr $34b7			jsr 	IFloatBufferWrite
.31e7	20 32 34	jsr $3432			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.31ea					_IFINotNegative:
.31ea	20 f4 31	jsr $31f4			jsr 	_IFIRecursiveConvert 		; start converting
.31ed	20 af 34	jsr $34af			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.31f0	18		clc				clc
.31f1	60		rts				rts
.31f2					_IFIFail:
.31f2	38		sec				sec
.31f3	60		rts				rts
.31f4					_IFIRecursiveConvert:
.31f4	a2 0c		ldx #$0c			ldx 	#IFR1
.31f6	20 c9 33	jsr $33c9			jsr 	IFloatCopyToRegister 		; R0->R1
.31f9	a2 08		ldx #$08			ldx 	#IFR0
.31fb	ad e1 06	lda $06e1			lda 	IFBase 						; Base -> R0
.31fe	20 29 34	jsr $3429			jsr 	IFloatSetByte
.3201	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.3203	20 8b 2f	jsr $2f8b			jsr 	IFloatDivideInteger
.3206	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.3208	20 20 34	jsr $3420			jsr 	IFloatCheckZero
.320b	f0 09		beq $3216			beq 	_IFIOutDigit
.320d	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.320f	48		pha				pha
.3210	20 f4 31	jsr $31f4			jsr 	_IFIRecursiveConvert 		; convert the divide result
.3213	68		pla				pla
.3214	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.3216					_IFIOutDigit:
.3216	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.3218	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.321a	90 02		bcc $321e			bcc 	_IFINotHex
.321c	69 06		adc #$06			adc 	#6
.321e					_IFINotHex:
.321e	69 30		adc #$30			adc 	#48
.3220	20 b7 34	jsr $34b7			jsr 	IFloatBufferWrite 			; write character to buffer.
.3223	60		rts				rts
.06e1					IFBase:
>06e1							.fill 	1
.3224					IFloatFloatToStringR0:
.3224	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.3226	20 76 33	jsr $3376			jsr 	IFloatPushRx
.3229	20 c9 33	jsr $33c9			jsr 	IFloatCopyToRegister
.322c	20 28 31	jsr $3128			jsr 	IFloatIntegerR0				; make R0 integer
.322f	a9 0a		lda #$0a			lda 	#10 						; base 10.
.3231	20 c9 31	jsr $31c9			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.3234	9c e2 06	stz $06e2			stz 	IFloatDecimalCount 			; zero the decimal count.
.3237	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.3239	29 3f		and #$3f			and 	#IFXMask
.323b	f0 44		beq $3281			beq 	_IFFSExit
.323d					_IFloatFracLoop:
.323d	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.323f	20 b8 33	jsr $33b8			jsr 	IFloatCopyFromRegister
.3242	20 d2 30	jsr $30d2			jsr 	IFloatFractionalR0
.3245	20 5e 34	jsr $345e			jsr 	IFloatNormalise
.3248	a2 10		ldx #$10			ldx 	#IFR2
.324a	20 c9 33	jsr $33c9			jsr 	IFloatCopyToRegister 		; copy to back R2
.324d	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.324f	a9 0a		lda #$0a			lda 	#10
.3251	20 29 34	jsr $3429			jsr 	IFloatSetByte
.3254	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.3256	20 c9 2e	jsr $2ec9			jsr 	IFloatMultiply
.3259	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.325b	20 c9 33	jsr $33c9			jsr 	IFloatCopyToRegister
.325e	20 28 31	jsr $3128			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.3261	ad e2 06	lda $06e2			lda 	IFloatDecimalCount 			; done 3 dp, no more
.3264	c9 03		cmp #$03			cmp 	#3
.3266	f0 16		beq $327e			beq 	_IFFSExitStripZero
.3268	ad e2 06	lda $06e2			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.326b	d0 05		bne $3272			bne 	_IFloatNotFirst
.326d	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.326f	20 b7 34	jsr $34b7			jsr 	IFloatBufferWrite
.3272					_IFloatNotFirst:
.3272	ee e2 06	inc $06e2			inc 	IFloatDecimalCount
.3275	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.3277	09 30		ora #$30			ora 	#"0"						; ASCII
.3279	20 b7 34	jsr $34b7			jsr 	IFloatBufferWrite 			; write to the buffer.
.327c	80 bf		bra $323d			bra 	_IFloatFracLoop
.327e					_IFFSExitStripZero:
.327e	20 c6 34	jsr $34c6			jsr 	IFloatStripTrailingZeros
.3281					_IFFSExit:
.3281	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.3283	20 97 33	jsr $3397			jsr 	IFloatPullRx
.3286	20 af 34	jsr $34af			jsr 	IFloatGetBufferAddress
.3289	18		clc				clc
.328a	60		rts				rts
.06e2					IFloatDecimalCount:
>06e2							.fill 	1
.328b					IFloatStringToFloatR0:
.328b	8d e3 06	sta $06e3			sta 	IFCount 					; save length and positions out.
.328e	86 20		stx $20				stx 	iTemp0
.3290	84 21		sty $21				sty 	iTemp0+1
.3292	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.3294	20 27 34	jsr $3427			jsr 	IFloatSetZero
.3297	9c e4 06	stz $06e4			stz 	IFSignFlag 					; clear the sign flag
.329a	20 27 33	jsr $3327			jsr 	IFSTFGetNext 				; get first
.329d	f0 1b		beq $32ba			beq 	_IFSTFFail 					; no character, fail.
.329f	90 10		bcc $32b1			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.32a1	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.32a3	d0 15		bne $32ba			bne 	_IFSTFFail
.32a5	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.32a7	8d e4 06	sta $06e4			sta 	IFSignFlag
.32aa					_IFSTFLoop:
.32aa	20 27 33	jsr $3327			jsr 	IFSTFGetNext 				; get next character
.32ad	b0 0b		bcs $32ba			bcs 	_IFSTFFail 					; bad character.
.32af	f0 11		beq $32c2			beq 	_IFSTFExit 					; end of data
.32b1					_IFSTFHaveChar:
.32b1	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.32b3	f0 08		beq $32bd			beq 	_IFSTFDecimal
.32b5	20 4b 33	jsr $334b			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.32b8	80 f0		bra $32aa			bra 	_IFSTFLoop 					; keep going until . or end.
.32ba					_IFSTFFail:
.32ba	38		sec				sec
.32bb	80 0d		bra $32ca			bra 	_IFSTFReturn
.32bd					_IFSTFDecimal:
.32bd	20 d2 32	jsr $32d2			jsr 	IFSTFDecimal 				; call the decimal places code.
.32c0	b0 08		bcs $32ca			bcs 	_IFSTFReturn 				; error
.32c2					_IFSTFExit:
.32c2	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.32c4	0d e4 06	ora $06e4			ora 	IFSignFlag
.32c7	85 0b		sta $0b				sta 	IFR0+IExp
.32c9	18		clc				clc
.32ca					_IFSTFReturn:
.32ca	60		rts				rts
.32cb					IFloatAddDecimalToR0:
.32cb	8d e3 06	sta $06e3			sta 	IFCount 					; save it out.
.32ce	86 20		stx $20				stx 	iTemp0
.32d0	84 21		sty $21				sty 	iTemp0+1
.32d2					IFSTFDecimal:
.32d2	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.32d4	20 76 33	jsr $3376			jsr 	IFloatPushRx
.32d7	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.32d9	20 27 34	jsr $3427			jsr 	IFloatSetZero
.32dc	9c e5 06	stz $06e5			stz 	IFDecimalPlaces 			; zero DP.
.32df					_IFSTDLoop:
.32df	20 27 33	jsr $3327			jsr 	IFSTFGetNext 				; get next
.32e2	b0 41		bcs $3325			bcs 	_IFSTFFail2 				; bad character.
.32e4	f0 11		beq $32f7			beq 	_IFSTFComplete 				; end of data, work out the result.
.32e6	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.32e8	f0 39		beq $3323			beq 	_IFSTFExit2
.32ea	20 4b 33	jsr $334b			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.32ed	ee e5 06	inc $06e5			inc 	IFDecimalPlaces 			; count decimals
.32f0	ad e5 06	lda $06e5			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.32f3	c9 03		cmp #$03			cmp 	#3
.32f5	90 e8		bcc $32df			bcc 	_IFSTDLoop
.32f7					_IFSTFComplete:
.32f7	ad e5 06	lda $06e5			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.32fa	f0 27		beq $3323			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.32fc	3a		dec a				dec 	a 							; table indexed from 1.
.32fd	0a		asl a				asl 	a
.32fe	0a		asl a				asl 	a
.32ff	aa		tax				tax
.3300	bd 62 33	lda $3362,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.3303	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.3305	bd 63 33	lda $3363,x			lda 	TableTen+1,x
.3308	85 0d		sta $0d				sta  	IFR1+IM1
.330a	bd 64 33	lda $3364,x			lda 	TableTen+2,x
.330d	85 0e		sta $0e				sta  	IFR1+IM2
.330f	bd 65 33	lda $3365,x			lda 	TableTen+3,x
.3312	85 0f		sta $0f				sta  	IFR1+IExp
.3314	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.3316	20 c9 2e	jsr $2ec9			jsr 	IFloatMultiply
.3319	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.331b	20 97 33	jsr $3397			jsr 	IFloatPullRx
.331e	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.3320	20 1f 2e	jsr $2e1f			jsr 	IFloatAdd
.3323					_IFSTFExit2:
.3323	18		clc				clc
.3324	60		rts				rts
.3325					_IFSTFFail2:
.3325	38		sec				sec
.3326	60		rts				rts
.3327					IFSTFGetNext:
.3327	ad e3 06	lda $06e3			lda 	IFCount  					; if count is zero, return with Z set.
.332a	f0 19		beq $3345			beq 	_IFSTFReturnOk
.332c	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.332e	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3330	d0 02		bne $3334			bne 	_IFSTFGNNoCarry
.3332	e6 21		inc $21				inc 	iTemp0+1
.3334					_IFSTFGNNoCarry:
.3334	ce e3 06	dec $06e3			dec 	IFCount 					; dec count.
.3337	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.3339	f0 08		beq $3343			beq 	_IFSTFGOkay
.333b	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.333d	90 08		bcc $3347			bcc 	_IFSTFGFail
.333f	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3341	b0 04		bcs $3347			bcs 	_IFSTFGFail
.3343					_IFSTFGOkay:
.3343	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3345					_IFSTFReturnOk:
.3345	18		clc				clc
.3346	60		rts				rts
.3347					_IFSTFGFail:
.3347	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3349	38		sec				sec
.334a	60		rts				rts
.334b					IFSTFAddR0:
.334b	29 0f		and #$0f			and 	#15 						; to int value
.334d	48		pha				pha 								; save it.
.334e	a9 0a		lda #$0a			lda 	#10
.3350	a2 0c		ldx #$0c			ldx 	#IFR1
.3352	20 29 34	jsr $3429			jsr 	IFloatSetByte
.3355	20 c9 2e	jsr $2ec9			jsr 	IFloatMultiply
.3358	68		pla				pla
.3359	a2 0c		ldx #$0c			ldx 	#IFR1
.335b	20 29 34	jsr $3429			jsr 	IFloatSetByte
.335e	20 1f 2e	jsr $2e1f			jsr 	IFloatAdd
.3361	60		rts				rts
.06e3					IFCount:
>06e3							.fill 	1
.06e4					IFSignFlag:
>06e4							.fill 	1
.06e5					IFDecimalPlaces:
>06e5							.fill 	1
.3362					TableTen:
>3362	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3366	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>336a	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>336e	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3372	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.3376					IFloatPushRx:
.3376	5a		phy				phy
.3377	ac e6 06	ldy $06e6			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.337a	b5 00		lda $00,x			lda 	IM0,x
.337c	99 e7 06	sta $06e7,y			sta 	IFStack,y
.337f	b5 01		lda $01,x			lda 	IM1,x
.3381	99 e8 06	sta $06e8,y			sta 	IFStack+1,y
.3384	b5 02		lda $02,x			lda 	IM2,x
.3386	99 e9 06	sta $06e9,y			sta 	IFStack+2,y
.3389	b5 03		lda $03,x			lda 	IExp,x
.338b	99 ea 06	sta $06ea,y			sta 	IFStack+3,y
.338e	c8		iny				iny
.338f	c8		iny				iny
.3390	c8		iny				iny
.3391	c8		iny				iny
.3392	8c e6 06	sty $06e6			sty 	IFStackIndex 				; update SP
.3395	7a		ply				ply
.3396	60		rts				rts
.3397					IFloatPullRx:
.3397	5a		phy				phy
.3398	ac e6 06	ldy $06e6			ldy 	IFStackIndex	 			; decrement SP
.339b	88		dey				dey
.339c	88		dey				dey
.339d	88		dey				dey
.339e	88		dey				dey
.339f	b9 e7 06	lda $06e7,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.33a2	95 00		sta $00,x			sta 	IM0,x
.33a4	b9 e8 06	lda $06e8,y			lda 	IFStack+1,y
.33a7	95 01		sta $01,x			sta 	IM1,x
.33a9	b9 e9 06	lda $06e9,y			lda 	IFStack+2,y
.33ac	95 02		sta $02,x			sta 	IM2,x
.33ae	b9 ea 06	lda $06ea,y			lda 	IFStack+3,y
.33b1	95 03		sta $03,x			sta 	IExp,x
.33b3	8c e6 06	sty $06e6			sty 	IFStackIndex 				; update SP
.33b6	7a		ply				ply
.33b7	60		rts				rts
.06e6					IFStackIndex:
>06e6							.fill 	1
.06e7					IFStack:
>06e7							.fill 	16*4
.33b8					IFloatCopyFromRegister:
.33b8	b5 00		lda $00,x			lda 	0,x
.33ba	85 08		sta $08				sta 	IFR0
.33bc	b5 01		lda $01,x			lda 	1,x
.33be	85 09		sta $09				sta 	IFR0+1
.33c0	b5 02		lda $02,x			lda 	2,x
.33c2	85 0a		sta $0a				sta 	IFR0+2
.33c4	b5 03		lda $03,x			lda 	3,x
.33c6	85 0b		sta $0b				sta 	IFR0+3
.33c8	60		rts				rts
.33c9					IFloatCopyToRegister:
.33c9	a5 08		lda $08				lda 	IFR0
.33cb	95 00		sta $00,x			sta 	0,x
.33cd	a5 09		lda $09				lda 	IFR0+1
.33cf	95 01		sta $01,x			sta 	1,x
.33d1	a5 0a		lda $0a				lda 	IFR0+2
.33d3	95 02		sta $02,x			sta 	2,x
.33d5	a5 0b		lda $0b				lda 	IFR0+3
.33d7	95 03		sta $03,x			sta 	3,x
.33d9	60		rts				rts
.33da					IFloatLoadInline:
.33da	68		pla				pla 								; pop address off to iTemp0
.33db	85 20		sta $20				sta 	iTemp0
.33dd	68		pla				pla
.33de	85 21		sta $21				sta 	iTemp0+1
.33e0	a0 01		ldy #$01			ldy 	#1
.33e2	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.33e4	95 00		sta $00,x			sta 	0,x
.33e6	c8		iny				iny
.33e7	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.33e9	95 01		sta $01,x			sta 	1,x
.33eb	c8		iny				iny
.33ec	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.33ee	95 02		sta $02,x			sta 	2,x
.33f0	c8		iny				iny
.33f1	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.33f3	95 03		sta $03,x			sta 	3,x
.33f5	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.33f6	a5 20		lda $20				lda 	iTemp0
.33f8	69 05		adc #$05			adc 	#5
.33fa	85 20		sta $20				sta 	iTemp0
.33fc	90 02		bcc $3400			bcc 	_IFLINoCarry
.33fe	e6 21		inc $21				inc 	iTemp0+1
.3400					_IFLINoCarry:
.3400	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3403					IFloatMultiply8BitRx:
.3403	5a		phy		        phy
.3404	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3406	a4 08		ldy $08		        ldy     IFR0+IM0
.3408	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.3409	85 08		sta $08		        sta     IFR0+IM0
.340b	84 09		sty $09		        sty     IFR0+IM1
.340d	a9 00		lda #$00	        lda     #0
.340f	a0 08		ldy #$08	        ldy     #8
.3411					_IFMLoop:
.3411	90 03		bcc $3416	        bcc     _IFMNoAdd
.3413	18		clc		        clc
.3414	65 09		adc $09		        adc     IFR0+IM1
.3416					_IFMNoAdd:
.3416	6a		ror a		        ror     a
.3417	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.3419	88		dey		        dey
.341a	d0 f5		bne $3411	        bne     _IFMLoop
.341c	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.341e	7a		ply		        ply
.341f	60		rts		        rts
.3420					IFloatCheckZero:
.3420	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.3422	15 01		ora $01,x			ora 	IM1,x
.3424	15 02		ora $02,x			ora 	IM2,x
.3426	60		rts				rts
.3427					IFloatSetZero:
.3427	a9 00		lda #$00			lda 	#0
.3429					IFloatSetByte:
.3429	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.342b	74 01		stz $01,x			stz 	IM1,x
.342d	74 02		stz $02,x			stz 	IM2,x
.342f	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3431	60		rts				rts
.3432					IFloatNegate:
.3432	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3434	49 40		eor #$40			eor 	#IFSign
.3436	95 03		sta $03,x			sta 	IExp,x
.3438	18		clc				clc
.3439	60		rts				rts
.343a					IFloatMantissaNegate:
.343a	38		sec				sec 								; when you want a real 2's complement negative value.
.343b	a9 00		lda #$00			lda 	#0
.343d	f5 00		sbc $00,x			sbc 	IM0,x
.343f	95 00		sta $00,x			sta 	IM0,x
.3441	a9 00		lda #$00			lda 	#0
.3443	f5 01		sbc $01,x			sbc 	IM1,x
.3445	95 01		sta $01,x			sta 	IM1,x
.3447	a9 00		lda #$00			lda 	#0
.3449	f5 02		sbc $02,x			sbc 	IM2,x
.344b	95 02		sta $02,x			sta 	IM2,x
.344d	60		rts				rts
.344e					IFloatShiftLeft:
.344e	18		clc				clc
.344f					IFloatRotateLeft:
.344f	36 00		rol $00,x			rol 	IM0,x
.3451	36 01		rol $01,x			rol 	IM1,x
.3453	36 02		rol $02,x			rol 	IM2,x
.3455	60		rts				rts
.3456					IFloatShiftRight:
.3456	18		clc				clc
.3457					IFloatRotateRight:
.3457	76 02		ror $02,x			ror 	IM2,x
.3459	76 01		ror $01,x			ror 	IM1,x
.345b	76 00		ror $00,x			ror 	IM0,x
.345d	60		rts				rts
.345e					IFloatNormalise:
.345e	20 20 34	jsr $3420			jsr 	IFloatCheckZero 			; is it zero
.3461	f0 18		beq $347b			beq 	_IFNExitZero 				; if so exit
.3463					_IFNLoop:
.3463	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3465	29 c0		and #$c0			and 	#$C0
.3467	c9 40		cmp #$40			cmp 	#$40
.3469	f0 13		beq $347e			beq 	_IFNExitOkay 				; if so , then we are done.
.346b	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.346d	29 3f		and #$3f			and 	#$3F
.346f	c9 20		cmp #$20			cmp 	#$20
.3471	f0 0b		beq $347e			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3473	20 94 34	jsr $3494			jsr 	IFloatDecExponent
.3476	20 4e 34	jsr $344e			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3479	80 e8		bra $3463			bra 	_IFNLoop
.347b					_IFNExitZero:
.347b	20 27 34	jsr $3427			jsr 	IFloatSetZero 				; set the result to zero
.347e					_IFNExitOkay:
.347e	18		clc				clc  								; return with CC.
.347f	60		rts				rts
.3480					IFloatIncExponent:
.3480	b5 03		lda $03,x			lda 	IExp,x
.3482	48		pha				pha
.3483	29 c0		and #$c0			and 	#$C0
.3485	8d 27 07	sta $0727			sta 	IFXTemp
.3488	68		pla				pla
.3489	1a		inc a				inc 	a
.348a	29 3f		and #$3f			and 	#$3F
.348c	48		pha				pha
.348d	0d 27 07	ora $0727			ora 	IFXTemp
.3490	95 03		sta $03,x			sta 	IExp,x
.3492	68		pla				pla
.3493	60		rts				rts
.3494					IFloatDecExponent:
.3494	b5 03		lda $03,x			lda 	IExp,x
.3496	48		pha				pha
.3497	29 c0		and #$c0			and 	#$C0
.3499	8d 27 07	sta $0727			sta 	IFXTemp
.349c	68		pla				pla
.349d	3a		dec a				dec 	a
.349e	29 3f		and #$3f			and 	#$3F
.34a0	48		pha				pha
.34a1	0d 27 07	ora $0727			ora 	IFXTemp
.34a4	95 03		sta $03,x			sta 	IExp,x
.34a6	68		pla				pla
.34a7	60		rts				rts
.0727					IFXTemp:
>0727							.fill 	1
.34a8					IFloatBufferReset:
.34a8	9c 28 07	stz $0728			stz 	IFBufferCount
.34ab	9c 29 07	stz $0729			stz 	IFBuffer
.34ae	60		rts				rts
.34af					IFloatGetBufferAddress:
.34af	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.34b1	a2 28		ldx #$28			ldx 	#(IFBufferCount & $FF)
.34b3	ad 28 07	lda $0728			lda 	IFBufferCount
.34b6	60		rts				rts
.34b7					IFloatBufferWrite:
.34b7	da		phx				phx
.34b8	ae 28 07	ldx $0728			ldx 	IFBufferCount
.34bb	9d 29 07	sta $0729,x			sta 	IFBuffer,x
.34be	9e 2a 07	stz $072a,x			stz 	IFBuffer+1,x
.34c1	ee 28 07	inc $0728			inc 	IFBufferCount
.34c4	fa		plx				plx
.34c5	60		rts				rts
.34c6					IFloatStripTrailingZeros:
.34c6	ae 28 07	ldx $0728			ldx 	IFBufferCount
.34c9	bd 28 07	lda $0728,x			lda 	IFBuffer-1,x
.34cc	c9 30		cmp #$30			cmp		#"0"
.34ce	d0 0f		bne $34df			bne 	_IFSTExit
.34d0	bd 27 07	lda $0727,x			lda 	IFBuffer-2,x
.34d3	c9 2e		cmp #$2e			cmp 	#"."
.34d5	f0 08		beq $34df			beq 	_IFSTExit
.34d7	ce 28 07	dec $0728			dec 	IFBufferCount
.34da	9e 28 07	stz $0728,x			stz 	IFBuffer-1,x
.34dd	80 e7		bra $34c6			bra 	IFloatStripTrailingZeros
.34df					_IFSTExit:
.34df	60		rts				rts
.0728					IFBufferCount:
>0728							.fill 	1
.0729					IFBuffer:
>0729							.fill 	25
.34e0					IFloatCheckRange:
.34e0	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.34e2	09 40		ora #$40			ora 	#IFSign
.34e4	85 0b		sta $0b				sta 	IFR0+IExp
.34e6	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.34e8	20 1f 2e	jsr $2e1f			jsr 	IFloatAdd 					; add allowed to error.
.34eb	a2 08		ldx #$08			ldx 	#IFR0
.34ed	20 20 34	jsr $3420			jsr 	IFloatCheckZero 			; error if < 0
.34f0	f0 06		beq $34f8			beq 	_IFAOkay
.34f2	a5 0b		lda $0b				lda 	IFR0+IExp
.34f4	29 40		and #$40			and 	#IFSign
.34f6	d0 01		bne $34f9			bne 	_IFAFail
.34f8					_IFAOkay:
.34f8	60		rts				rts
.34f9					_IFAFail:
.34f9	38		sec				sec
.34fa	68		pla				pla 								; get address - 2
.34fb	e9 02		sbc #$02			sbc 	#2
.34fd	aa		tax				tax
.34fe	68		pla				pla
.34ff	e9 00		sbc #$00			sbc 	#0
.3501	a8		tay				tay
.3502	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3504					_IFAStop:
>3504	db						.byte 	$DB 						; display an error AA ADR ADR
.3505	80 fd		bra $3504			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
