
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Sat Jun  3 06:30:40 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=$6000					startMemory = $6000
=$a000					endMemory = $A000
=2					stackPages = 2

;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe5					OSGetScreenSize          = $ffe5 ; Get size of screen to XY
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeyboardWithCursor = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1)
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadDevice             = $fff4 ; Read device X to A
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#startMemory >> 8
.1002	a0 a0		ldy #$a0			ldy 	#endMemory >> 8
.1004	20 6a 1c	jsr $1c6a			jsr 	PGMSetBaseAddress
.1007	20 5b 25	jsr $255b			jsr 	IFInitialise
.100a	4c 77 12	jmp $1277			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 8a 14	jsr $148a			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 73 21	jmp $2173		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 7d 1c	jsr $1c7d			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 fa 24	jsr $24fa			jsr 	VARClearHashTables
.1028	ad 47 03	lda $0347			lda 	PGMEndMemoryHigh
.102b	20 de 22	jsr $22de			jsr 	StackReset
.102e	20 3d 23	jsr $233d			jsr 	StringSystemInitialise
.1031	60		rts				rts
.1032					AllocateMemory:
.1032	5a		phy				phy 								; save Y
.1033	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.1035	5a		phy				phy
.1036	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1038	5a		phy				phy
.1039	a8		tay				tay 								; count is now in XY
.103a					_AllocateLoop:
.103a	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103c	d0 04		bne $1042			bne 	_AllocateOne
.103e	c0 00		cpy #$00			cpy 	#0
.1040	f0 15		beq $1057			beq 	_AllocateExit
.1042					_AllocateOne:
.1042	a9 00		lda #$00			lda 	#0 							; zero byte
.1044	92 24		sta ($24)			sta 	(freeMemory)
.1046	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1048	d0 05		bne $104f			bne 	_AllocateSkipCarry
.104a	e6 25		inc $25				inc 	freeMemory+1
.104c	20 5b 10	jsr $105b			jsr 	ClearCheckMemory
.104f					_AllocateSkipCarry:
.104f	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1051	d0 01		bne $1054			bne 	_AllocateSkipBorrow
.1053	ca		dex				dex
.1054					_AllocateSkipBorrow:
.1054	88		dey				dey
.1055	80 e3		bra $103a			bra 	_AllocateLoop
.1057					_AllocateExit:
.1057	fa		plx				plx 								; restore address
.1058	68		pla				pla
.1059	7a		ply				ply 								; restore Y
.105a	60		rts				rts
.105b					ClearCheckMemory:
.105b	a5 25		lda $25				lda 	freeMemory+1
.105d	1a		inc a				inc 	a
.105e	1a		inc a				inc 	a
.105f	cd 4f 04	cmp $044f			cmp 	stringMemory+1
.1062	b0 01		bcs $1065			bcs  	_CCMError
.1064	60		rts				rts
.1065					_CCMError:
.1065	4c 05 22	jmp $2205		jmp	ErrorV_memory
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1068					CommandDIM:
.1068	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check identifier follows.
.106a	29 c0		and #$c0			and 	#$C0
.106c	c9 40		cmp #$40			cmp 	#$40
.106e	d0 39		bne $10a9			bne 	_CDSyntax
.1070	20 b1 24	jsr $24b1			jsr 	VARGetInfo 					; get information
.1073	ad 55 04	lda $0455			lda 	VARType 					; check array.
.1076	29 02		and #$02			and 	#2
.1078	f0 2f		beq $10a9			beq 	_CDSyntax
.107a	20 63 24	jsr $2463			jsr 	VARFind 					; does it already exist
.107d	b0 2d		bcs $10ac			bcs 	_CDExists
.107f	20 0f 24	jsr $240f			jsr 	VARCreate 					; create it - returns data ptr in XA
.1082	da		phx				phx 								; save target address
.1083	48		pha				pha
.1084	ad 55 04	lda $0455			lda 	VARType 					; type ID.
.1087	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1089	20 af 10	jsr $10af			jsr 	CreateArray 				; create array to XA
.108c	84 20		sty $20				sty 	zTemp1 						; save Y
.108e	7a		ply				ply 								; restore target to zTemp0
.108f	84 1e		sty $1e				sty 	zTemp0
.1091	7a		ply				ply
.1092	84 1f		sty $1f				sty 	zTemp0+1
.1094	92 1e		sta ($1e)			sta 	(zTemp0) 					; save new array
.1096	a0 01		ldy #$01			ldy 	#1
.1098	8a		txa				txa
.1099	91 1e		sta ($1e),y			sta 	(zTemp0),y
.109b	a4 20		ldy $20				ldy 	zTemp1 						; restore zTemp1
.109d	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 				; check )
.10a0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10a2	c8		iny				iny
.10a3	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a5	f0 c1		beq $1068			beq 	CommandDIM
.10a7	88		dey				dey
.10a8	60		rts				rts
.10a9					_CDSyntax:
.10a9	4c 22 21	jmp $2122		jmp	ErrorV_syntax
.10ac					_CDExists:
.10ac	4c df 21	jmp $21df		jmp	ErrorV_redefine
.10af					CreateArray:
.10af	8d 3a 03	sta $033a			sta 	CAType						; save type
.10b2	20 9c 14	jsr $149c			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10b5	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10b7	c9 99		cmp #$99			cmp 	#PR_COMMA
.10b9	f0 04		beq $10bf			beq 	_CATwoDimensions
.10bb	20 0b 11	jsr $110b			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10be	60		rts				rts
.10bf					_CATwoDimensions:
.10bf	a5 0d		lda $0d				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10c1	8d 3c 03	sta $033c			sta 	CADim1+1
.10c4	a5 0c		lda $0c				lda 	IFR0+IM0
.10c6	8d 3b 03	sta $033b			sta 	CADim1+0
.10c9	20 77 22	jsr $2277			jsr 	ERRCheckComma 				; check comma
.10cc	20 9c 14	jsr $149c			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10cf	5a		phy				phy 								; save Y position
.10d0	18		clc				clc 								; allocate the outer array of pointers.
.10d1	ae 3c 03	ldx $033c			ldx 	CADim1+1
.10d4	ad 3b 03	lda $033b			lda 	CADim1
.10d7	20 4a 11	jsr $114a			jsr 	CSAAllocate 				; allocate the outer array
.10da	da		phx				phx									; save this address on the stack
.10db	48		pha				pha
.10dc	86 23		stx $23				stx 	zTemp2+1					; and in zTemp2
.10de	85 22		sta $22				sta 	zTemp2
.10e0					_CACreateSubLoop:
.10e0	38		sec				sec
.10e1	20 0b 11	jsr $110b			jsr 	CreateSingleArray 			; create data array of required size.
.10e4	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10e6	91 22		sta ($22),y			sta 	(zTemp2),y
.10e8	8a		txa				txa
.10e9	c8		iny				iny
.10ea	91 22		sta ($22),y			sta 	(zTemp2),y
.10ec	18		clc				clc  								; next slot.
.10ed	a5 22		lda $22				lda 	zTemp2
.10ef	69 02		adc #$02			adc 	#2
.10f1	85 22		sta $22				sta 	zTemp2
.10f3	90 02		bcc $10f7			bcc 	_CACNoCarry
.10f5	e6 23		inc $23				inc 	zTemp2+1
.10f7					_CACNoCarry:
.10f7	ad 3b 03	lda $033b			lda 	CADim1 						; use DIM1 as a counter
.10fa	d0 03		bne $10ff			bne 	_CACNoBorrow
.10fc	ce 3c 03	dec $033c			dec 	CADim1+1
.10ff					_CACNoBorrow:
.10ff	ce 3b 03	dec $033b			dec 	CADim1
.1102	ad 3c 03	lda $033c			lda 	CADim1+1 					; but do one more.
.1105	10 d9		bpl $10e0			bpl 	_CACreateSubLoop
.1107	68		pla				pla
.1108	fa		plx				plx
.1109	7a		ply				ply
.110a	60		rts				rts
.110b					CreateSingleArray:
.110b	5a		phy				phy
.110c	38		sec				sec 								; allocate memory block all zeros.
.110d	a5 0c		lda $0c				lda 	IFR0+IM0
.110f	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1111	20 4a 11	jsr $114a			jsr 	CSAAllocate
.1114	ac 3a 03	ldy $033a			ldy 	CAType 						; if numbers, we don't need to initialise.
.1117	f0 2f		beq $1148			beq 	_CSANoInit
.1119	da		phx				phx 								; save address of new array
.111a	48		pha				pha
.111b	85 1e		sta $1e				sta 	zTemp0 						; address in zTemp0
.111d	86 1f		stx $1f				stx 	zTemp0+1
.111f	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1121	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1123	a8		tay				tay
.1124	b2 1e		lda ($1e)			lda 	(zTemp0)
.1126	aa		tax				tax
.1127					_CSAEraseString:
.1127	5a		phy				phy
.1128	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.112a	a9 80		lda #$80			lda 	#$80
.112c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.112e	7a		ply				ply
.112f	18		clc				clc 								; add 4 to next slot.
.1130	a5 1e		lda $1e				lda 	zTemp0
.1132	69 04		adc #$04			adc 	#4
.1134	85 1e		sta $1e				sta 	zTemp0
.1136	90 02		bcc $113a			bcc 	_CSAENoCarry
.1138	e6 1f		inc $1f				inc 	zTemp0+1
.113a					_CSAENoCarry:
.113a	e0 00		cpx #$00			cpx 	#0
.113c	d0 01		bne $113f			bne 	_CSANoBorrow
.113e	88		dey				dey
.113f					_CSANoBorrow:
.113f	ca		dex				dex
.1140	d0 e5		bne $1127			bne 	_CSAEraseString
.1142	c0 00		cpy #$00			cpy 	#0
.1144	d0 e1		bne $1127			bne 	_CSAEraseString
.1146	68		pla				pla
.1147	fa		plx				plx
.1148					_CSANoInit:
.1148	7a		ply				ply
.1149	60		rts				rts
.114a					CSAAllocate:
.114a	08		php				php 								; save type flag.
.114b	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.114c	d0 01		bne $114f			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.114e	e8		inx				inx
.114f					_CSAANoCarry:
.114f	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1151	b0 2e		bcs $1181			bcs 	_CSARange
.1153	28		plp				plp 								; restore type flag
.1154	08		php				php 								; save it back again.
.1155	da		phx				phx 								; save size.
.1156	48		pha				pha
.1157	86 1f		stx $1f				stx  	zTemp0+1 					; now in ztemp0+1:X
.1159	90 03		bcc $115e			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.115b	0a		asl a				asl 	a
.115c	26 1f		rol $1f				rol 	zTemp0+1
.115e					_CSAATimes2:
.115e	0a		asl a				asl 	a
.115f	26 1f		rol $1f				rol 	zTemp0+1
.1161	18		clc				clc
.1162	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1164	90 02		bcc $1168			bcc 	_CSAANoCarry2
.1166	e6 1f		inc $1f				inc 	zTemp0+1
.1168					_CSAANoCarry2:
.1168	a6 1f		ldx $1f				ldx 	zTemp0+1 					; XA is the bytes required.
.116a	20 32 10	jsr $1032			jsr 	AllocateMemory 				; allocate memory to XA
.116d	86 1f		stx $1f				stx 	zTemp0+1 					; save pointers
.116f	85 1e		sta $1e				sta 	zTemp0
.1171	68		pla				pla  								; write element count to first 2 bytes
.1172	92 1e		sta ($1e)			sta 	(zTemp0)
.1174	68		pla				pla 								; msb of element count
.1175	28		plp				plp 								; CC if pointer array
.1176	b0 02		bcs $117a			bcs 	_CSAAIsData
.1178	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.117a					_CSAAIsData:
.117a	a0 01		ldy #$01			ldy 	#1
.117c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.117e	a5 1e		lda $1e				lda 	zTemp0 						; fix XA back up again
.1180	60		rts				rts
.1181					_CSARange:
.1181	4c 32 21	jmp $2132		jmp	ErrorV_range
.033a					CAType:
>033a							.fill 	1
.033b					CADim1:
>033b							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1184					Command_Print:
.1184					Command_IP_Main:
.1184	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1185					_CPLoop:
.1185	08		php				php 								; save last action flag
.1186	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1188	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.118a	f0 3e		beq $11ca			beq 	_CPExit 					; without consuming
.118c	c9 9b		cmp #$9b			cmp 	#PR_COLON
.118e	f0 3a		beq $11ca			beq 	_CPExit
.1190	68		pla				pla 								; throw last action flag
.1191	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1193	c8		iny				iny
.1194	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1196	f0 2f		beq $11c7			beq 	_CPContinueWithSameLine
.1198	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.119a	f0 26		beq $11c2			beq 	_CPTab
.119c	88		dey				dey 								; undo the get.
.119d	20 4a 14	jsr $144a			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11a0	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.11a2	10 14		bpl $11b8			bpl 	_CPNumber
.11a4	5a		phy				phy
.11a5	18		clc				clc 								; string address to YX
.11a6	a5 0c		lda $0c				lda 	IFR0+IM0
.11a8	aa		tax				tax
.11a9	a5 0d		lda $0d				lda 	IFR0+IM1
.11ab	a8		tay				tay
.11ac	e8		inx				inx 								; point to 1st character
.11ad	d0 01		bne $11b0			bne 	_CPNoCarry
.11af	c8		iny				iny
.11b0					_CPNoCarry:
.11b0	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.11b2	20 d3 11	jsr $11d3			jsr 	CPPrintAYX 					; print AYX
.11b5	7a		ply				ply
.11b6	80 cc		bra $1184			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11b8					_CPNumber:
.11b8	5a		phy				phy
.11b9	20 6d 29	jsr $296d			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11bc	20 d3 11	jsr $11d3			jsr 	CPPrintAYX 					; print AYX
.11bf	7a		ply				ply
.11c0	80 c2		bra $1184			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11c2					_CPTab:
.11c2	a9 09		lda #$09			lda 	#9 							; print TAB
.11c4	20 e6 11	jsr $11e6			jsr 	CPPrintA
.11c7					_CPContinueWithSameLine:
.11c7	38		sec				sec 								; loop round with carry set, which
.11c8	80 bb		bra $1185			bra 	_CPLoop 					; will inhibit final CR
.11ca					_CPExit:
.11ca	28		plp				plp 								; get last action flag
.11cb	b0 05		bcs $11d2			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11cd	a9 0d		lda #$0d			lda 	#13 						; print new line
.11cf	20 e6 11	jsr $11e6			jsr 	CPPrintA
.11d2					_CPExit2:
.11d2	60		rts				rts
.11d3					CPPrintAYX:
.11d3	86 1e		stx $1e				stx 	zTemp0
.11d5	84 1f		sty $1f				sty 	zTemp0+1
.11d7	aa		tax				tax
.11d8	f0 0b		beq $11e5			beq 	_CPPrintExit
.11da	a0 00		ldy #$00			ldy 	#0
.11dc					_CPPrintAYXLoop:
.11dc	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.11de	20 e6 11	jsr $11e6			jsr 	CPPrintA
.11e1	c8		iny				iny
.11e2	ca		dex				dex
.11e3	d0 f7		bne $11dc			bne 	_CPPrintAYXLoop
.11e5					_CPPrintExit:
.11e5	60		rts				rts
.11e6					CPPrintA:
.11e6	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.11e9					CommandLET:
.11e9	20 12 15	jsr $1512			jsr 	EXPTermR0 					; get term
.11ec	90 6d		bcc $125b			bcc 	_CLError 					; must be a reference term.
.11ee	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.11f0	48		pha				pha
.11f1	a5 0d		lda $0d				lda 	IFR0+IM1
.11f3	48		pha				pha
.11f4	a5 0f		lda $0f				lda 	IFR0+IExp
.11f6	48		pha				pha
.11f7	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.11f9	20 7f 22	jsr $227f			jsr 	ERRCheckA
.11fc	20 4a 14	jsr $144a			jsr 	EXPEvaluateExpression 		; right hand side.
.11ff	68		pla				pla 								; type of l-expr
.1200	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.1202	30 5a		bmi $125e			bmi 	_CLType
.1204	fa		plx				plx 	 							; pop target address to zTemp0
.1205	86 1f		stx $1f				stx 	zTemp0+1
.1207	fa		plx				plx
.1208	86 1e		stx $1e				stx 	zTemp0
.120a	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.120c	30 15		bmi $1223			bmi 	_CLStringAssign
.120e	5a		phy				phy
.120f	a0 03		ldy #$03			ldy 	#3
.1211	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1213	88		dey				dey
.1214	a5 0e		lda $0e				lda 	IFR0+IM2
.1216	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1218	88		dey				dey
.1219	a5 0d		lda $0d				lda 	IFR0+IM1
.121b	91 1e		sta ($1e),y			sta 	(zTemp0),y
.121d	a5 0c		lda $0c				lda 	IFR0+IM0
.121f	92 1e		sta ($1e)			sta 	(zTemp0)
.1221	7a		ply				ply
.1222	60		rts				rts
.1223					_CLStringAssign:
.1223	5a		phy				phy
.1224	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1226	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1228	12 1e		ora ($1e)			ora 	(zTemp0)
.122a	f0 23		beq $124f			beq 	_CLConcreteString
.122c	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.122e	85 20		sta $20				sta 	zTemp1
.1230	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1232	85 21		sta $21				sta 	zTemp1+1
.1234	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.1236	38		sec				sec 								; we want 3 for slot size, status, string size.
.1237	e9 03		sbc #$03			sbc 	#3
.1239	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.123b	90 12		bcc $124f			bcc 	_CLConcreteString 			; if so, concrete the string again.
.123d	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.123f	1a		inc a				inc 	a
.1240	aa		tax				tax
.1241	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1243					_CLReplaceString:
.1243	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.1245	c8		iny				iny
.1246	c8		iny				iny
.1247	91 20		sta ($20),y			sta 	(zTemp1),y
.1249	88		dey				dey
.124a	ca		dex				dex
.124b	d0 f6		bne $1243			bne 	_CLReplaceString
.124d	80 0a		bra $1259			bra 	_CLExit
.124f					_CLConcreteString:
.124f	20 f2 22	jsr $22f2			jsr 	StringConcrete  			; concreted string in XA.
.1252	a0 01		ldy #$01			ldy 	#1 							; store the address
.1254	92 1e		sta ($1e)			sta 	(zTemp0)
.1256	8a		txa				txa
.1257	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1259					_CLExit:
.1259	7a		ply				ply
.125a	60		rts				rts
.125b					_CLError:
.125b	4c 45 22	jmp $2245		jmp	ErrorV_variable
.125e					_CLType:
.125e	4c 4f 21	jmp $214f		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1261					Command_NEW:
.1261	20 71 1c	jsr $1c71			jsr 	PGMNewProgram
.1264	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1267	4c c4 12	jmp $12c4			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.126a					Command_REM:
.126a					Command_REM2:
.126a	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.126c	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.126e	d0 06		bne $1276			bne 	_CRExit
.1270	c8		iny				iny 								; skip over it, it's a comment.
.1271	98		tya				tya
.1272	38		sec				sec
.1273	71 1c		adc ($1c),y			adc 	(codePtr),y
.1275	a8		tay				tay
.1276					_CRExit:
.1276	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1277					Command_RUN:
.1277	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.127a	ad 46 03	lda $0346			lda 	PGMBaseHigh 				; back to the program start
.127d	85 1d		sta $1d				sta 	codePtr+1
.127f	64 1c		stz $1c				stz 	codePtr
.1281	80 0b		bra $128e			bra 	RUNNewLine
.1283					RUNEndOfLine:
.1283	18		clc				clc 								; advance to next line.
.1284	b2 1c		lda ($1c)			lda 	(codePtr)
.1286	65 1c		adc $1c				adc 	codePtr
.1288	85 1c		sta $1c				sta 	codePtr
.128a	90 02		bcc $128e			bcc 	_RELNoCarry
.128c	e6 1d		inc $1d				inc 	codePtr+1
.128e					_RELNoCarry:
.128e					RUNNewLine:
.128e	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1290	9a		txs				txs
.1291	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.1293	f0 2f		beq $12c4			beq 	Command_END
.1295	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.1297					RUNNewCommand:
.1297	9c 4d 04	stz $044d			stz 	stringInitialised 			; reset string system.
.129a	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.129c	10 1a		bpl $12b8			bpl		_RUNNotToken 				; probably an identifier
.129e	c8		iny				iny 								; consume token
.129f	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.12a1	f0 f4		beq $1297			beq 	RUNNewCommand
.12a3	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.12a5	b0 0e		bcs $12b5			bcs 	_RUNSyntax
.12a7	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.12a9	90 0a		bcc $12b5			bcc 	_RUNSyntax
.12ab	0a		asl a				asl 	a 							; double into X.
.12ac	aa		tax				tax
.12ad	20 b2 12	jsr $12b2			jsr 	_RUNDispatchMain			; call the main dispatcher
.12b0	80 e5		bra $1297			bra 	RUNNewCommand
.12b2					_RUNDispatchMain:
.12b2	7c 87 19	jmp ($1987,x)			jmp 	(VectorTable,x)
.12b5					_RUNSyntax:
.12b5	4c 22 21	jmp $2122		jmp	ErrorV_syntax
.12b8					_RUNNotToken:
.12b8	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.12ba	90 f9		bcc $12b5			bcc 	_RUNSyntax
.12bc	20 e9 11	jsr $11e9			jsr 	CommandLET 					; assignment
.12bf	80 d6		bra $1297			bra 	RUNNewCommand 				; loop round.
.12c1					Command_Shift_Handler:
.12c1	4c 60 21	jmp $2160		jmp	ErrorV_unimplemented
.12c4					Command_END:
.12c4	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.12c7					Command_STOP:
.12c7	4c bd 21	jmp $21bd		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.12ca					NoExec01:
.12ca					NoExec02:
.12ca					NoExec03:
.12ca					NoExec04:
.12ca					NoExec05:
.12ca					NoExec06:
.12ca					NoExec07:
.12ca					NoExec08:
.12ca	4c 22 21	jmp $2122		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.12cd					EXPBinAdd:
.12cd	24 0f		bit $0f				bit 	IFR0+IExp
.12cf	30 6f		bmi $1340			bmi 	EXPConcatenate
.12d1	a2 10		ldx #$10			ldx 	#IFR1
.12d3	4c 66 25	jmp $2566			jmp 	IFloatAdd
.12d6					EXPBinSub:
.12d6	24 0f		bit $0f				bit 	IFR0+IExp
.12d8	30 3f		bmi $1319			bmi 	EXPTypeError
.12da	a2 10		ldx #$10			ldx 	#IFR1
.12dc	4c 5f 25	jmp $255f			jmp 	IFloatSubtract
.12df					EXPBinMul:
.12df	24 0f		bit $0f				bit 	IFR0+IExp
.12e1	30 36		bmi $1319			bmi 	EXPTypeError
.12e3	a2 10		ldx #$10			ldx 	#IFR1
.12e5	4c 10 26	jmp $2610			jmp 	IFloatMultiply
.12e8					EXPBinFDiv:
.12e8	24 0f		bit $0f				bit 	IFR0+IExp
.12ea	30 2d		bmi $1319			bmi 	EXPTypeError
.12ec	a2 10		ldx #$10			ldx 	#IFR1
.12ee	20 93 28	jsr $2893			jsr 	IFloatDivideFloat
.12f1	b0 0f		bcs $1302			bcs 	EXPDZero
.12f3	60		rts				rts
.12f4					EXPBinIDiv:
.12f4	24 0f		bit $0f				bit 	IFR0+IExp
.12f6	30 21		bmi $1319			bmi 	EXPTypeError
.12f8	a2 10		ldx #$10			ldx 	#IFR1
.12fa	20 93 28	jsr $2893			jsr 	IFloatDivideFloat
.12fd	b0 03		bcs $1302			bcs 	EXPDZero
.12ff	4c 70 28	jmp $2870			jmp 	IFloatIntegerR0
.1302					EXPDZero:
.1302	4c 94 21	jmp $2194		jmp	ErrorV_divzero
.1305					EXPBinIMod:
.1305	24 0f		bit $0f				bit 	IFR0+IExp
.1307	30 10		bmi $1319			bmi 	EXPTypeError
.1309	a2 10		ldx #$10			ldx 	#IFR1
.130b	5a		phy				phy
.130c	20 a8 27	jsr $27a8			jsr 	IFPreProcessBitwise 		; set up everything.
.130f	d0 05		bne $1316			bne 	EXPDRange
.1311	20 e1 26	jsr $26e1			jsr 	IFloatModulusInteger
.1314	7a		ply				ply
.1315	60		rts				rts
.1316					EXPDRange:
.1316	4c 32 21	jmp $2132		jmp	ErrorV_range
.1319					EXPTypeError:
.1319	4c 4f 21	jmp $214f		jmp	ErrorV_type
.131c					EXPBinAnd:
.131c	24 0f		bit $0f				bit 	IFR0+IExp
.131e	30 f9		bmi $1319			bmi 	EXPTypeError
.1320	a2 10		ldx #$10			ldx 	#IFR1
.1322	20 63 27	jsr $2763			jsr 	IFloatBitwiseAnd
.1325	b0 ef		bcs $1316			bcs 	EXPDRange
.1327	60		rts				rts
.1328					EXPBinOr:
.1328	24 0f		bit $0f				bit 	IFR0+IExp
.132a	30 ed		bmi $1319			bmi 	EXPTypeError
.132c	a2 10		ldx #$10			ldx 	#IFR1
.132e	20 7a 27	jsr $277a			jsr 	IFloatBitwiseOr
.1331	b0 e3		bcs $1316			bcs 	EXPDRange
.1333	60		rts				rts
.1334					EXPBinXor:
.1334	24 0f		bit $0f				bit 	IFR0+IExp
.1336	30 e1		bmi $1319			bmi 	EXPTypeError
.1338	a2 10		ldx #$10			ldx 	#IFR1
.133a	20 91 27	jsr $2791			jsr 	IFloatBitwiseXor
.133d	b0 d7		bcs $1316			bcs 	EXPDRange
.133f	60		rts				rts
.1340					EXPConcatenate:
.1340	18		clc				clc
.1341	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1343	72 10		adc ($10)			adc 	(IFR1)
.1345	b0 2d		bcs $1374			bcs 	_EXPCError
.1347	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.1349	da		phx				phx
.134a	a6 0d		ldx $0d				ldx 	IFR0+1
.134c	da		phx				phx
.134d	20 65 23	jsr $2365			jsr 	StringTempAllocate 			; allocate string, set up return
.1350	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1352	a5 10		lda $10				lda 	IFR1
.1354	20 5d 13	jsr $135d			jsr 	_EXPCCopyXA
.1357	fa		plx				plx 								; copy second string
.1358	68		pla				pla
.1359	20 5d 13	jsr $135d			jsr 	_EXPCCopyXA
.135c	60		rts				rts
.135d					_EXPCCopyXA:
.135d	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.135f	85 1e		sta $1e				sta 	zTemp0
.1361	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.1363	f0 0e		beq $1373			beq 	_EXPCCExit 					; nothing.
.1365	aa		tax				tax 								; count
.1366	5a		phy				phy 								; start positioin
.1367	a0 01		ldy #$01			ldy 	#1
.1369					_EXPCCLoop:
.1369	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.136b	20 9a 23	jsr $239a			jsr 	StringTempWrite
.136e	c8		iny				iny
.136f	ca		dex				dex
.1370	d0 f7		bne $1369			bne 	_EXPCCLoop
.1372	7a		ply				ply
.1373					_EXPCCExit:
.1373	60		rts				rts
.1374					_EXPCError:
.1374	4c 30 22	jmp $2230		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1377					EXPReturnTrue:
.1377	a2 0c		ldx #$0c			ldx 	#IFR0
.1379	a9 01		lda #$01			lda 	#1
.137b	20 72 2b	jsr $2b72			jsr 	IFloatSetByte
.137e	20 7b 2b	jsr $2b7b			jsr 	IFloatNegate
.1381	60		rts				rts
.1382					EXPReturnFalse:
.1382	a2 0c		ldx #$0c			ldx 	#IFR0
.1384	4c 70 2b	jmp $2b70			jmp 	IFloatSetZero
.1387					EXPCompareEqual:
.1387	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.138a	c9 00		cmp #$00			cmp 	#0
.138c	f0 e9		beq $1377			beq 	EXPReturnTrue
.138e	80 f2		bra $1382			bra 	EXPReturnFalse
.1390					EXPCompareLess:
.1390	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.1393	c9 ff		cmp #$ff			cmp 	#$FF
.1395	f0 e0		beq $1377			beq 	EXPReturnTrue
.1397	80 e9		bra $1382			bra 	EXPReturnFalse
.1399					EXPCompareGreater:
.1399	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.139c	c9 01		cmp #$01			cmp 	#1
.139e	f0 d7		beq $1377			beq 	EXPReturnTrue
.13a0	80 e0		bra $1382			bra 	EXPReturnFalse
.13a2					EXPCompareNotEqual:
.13a2	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.13a5	c9 00		cmp #$00			cmp 	#0
.13a7	d0 ce		bne $1377			bne 	EXPReturnTrue
.13a9	80 d7		bra $1382			bra 	EXPReturnFalse
.13ab					EXPCompareLessEqual:
.13ab	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.13ae	c9 01		cmp #$01			cmp 	#1
.13b0	d0 c5		bne $1377			bne 	EXPReturnTrue
.13b2	80 ce		bra $1382			bra 	EXPReturnFalse
.13b4					EXPCompareGreaterEqual:
.13b4	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.13b7	c9 ff		cmp #$ff			cmp 	#$FF
.13b9	d0 bc		bne $1377			bne 	EXPReturnTrue
.13bb	80 c5		bra $1382			bra 	EXPReturnFalse
.13bd					EXPCompareBaseCode:
.13bd	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.13bf	30 10		bmi $13d1			bmi 	_EXCBCString
.13c1	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.13c3	20 3e 28	jsr $283e			jsr 	IFloatCompare
.13c6	a5 0c		lda $0c				lda 	IFR0+IM0
.13c8	f0 06		beq $13d0			beq 	_EXCBCExit 					; return 0 if zero
.13ca	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.13cc	50 02		bvc $13d0			bvc 	_EXCBCExit
.13ce	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.13d0					_EXCBCExit:
.13d0	60		rts				rts
.13d1					_EXCBCString:
.13d1	5a		phy				phy
.13d2	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.13d4	d2 10		cmp ($10)			cmp 	(IFR1)
.13d6	90 02		bcc $13da			bcc 	_EXCBCSmaller
.13d8	b2 10		lda ($10)			lda 	(IFR1)
.13da					_EXCBCSmaller:
.13da	aa		tax				tax
.13db	f0 0d		beq $13ea			beq 	_EXCBCMatches 				; if zero common length matches
.13dd	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.13df					_EXCBCCheckSmallerMatches:
.13df	c8		iny				iny 								; compare directly as far as common length
.13e0	38		sec				sec
.13e1	b1 10		lda ($10),y			lda 	(IFR1),y
.13e3	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.13e5	d0 08		bne $13ef			bne 	_EXCBCExit2
.13e7	ca		dex				dex
.13e8	d0 f5		bne $13df			bne 	_EXCBCCheckSmallerMatches
.13ea					_EXCBCMatches:
.13ea	38		sec				sec
.13eb	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.13ed	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.13ef					_EXCBCExit2:
.13ef	7a		ply				ply
.13f0	c9 00		cmp #$00			cmp 	#0
.13f2	f0 04		beq $13f8			beq 	_EXCBCReturn
.13f4	30 03		bmi $13f9			bmi 	_EXCBCFF
.13f6	a9 01		lda #$01			lda 	#1
.13f8					_EXCBCReturn:
.13f8	60		rts				rts
.13f9					_EXCBCFF:
.13f9	a9 ff		lda #$ff			lda 	#$FF
.13fb	60		rts				rts
.13fc					_EXCBCRange:
.13fc	4c 32 21	jmp $2132		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.13ff					EXPBinLeft:
.13ff	a9 ff		lda #$ff			lda 	#$FF
.1401	8d 3d 03	sta $033d			sta 	EXPShiftLeftFlag
.1404	4c 0a 14	jmp $140a			jmp 	EXPShiftCommon
.1407					EXPBinRight:
.1407	9c 3d 03	stz $033d			stz 	EXPShiftLeftFlag
.140a					EXPShiftCommon:
.140a	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.140c	05 13		ora $13				ora 	IFR1+IExp
.140e	29 7f		and #$7f			and 	#$7F
.1410	d0 35		bne $1447			bne 	_EXPSRange
.1412	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1414	29 e0		and #$e0			and 	#$E0
.1416	05 0d		ora $0d				ora 	IFR0+IM1
.1418	05 0e		ora $0e				ora 	IFR0+IM2
.141a	d0 25		bne $1441			bne 	_EXPSShiftZero 				; if so return zero
.141c	5a		phy				phy
.141d	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.141f	29 1f		and #$1f			and 	#$1F
.1421	f0 17		beq $143a			beq 	_EXPSExit 					; exit if zero
.1423	a8		tay				tay
.1424					_EXPSLoop:
.1424	a2 10		ldx #$10			ldx 	#IFR1
.1426	2c 3d 03	bit $033d			bit 	EXPShiftLeftFlag
.1429	30 05		bmi $1430			bmi 	_EXPSShiftLeft
.142b	20 9f 2b	jsr $2b9f			jsr 	IFloatShiftRight
.142e	80 07		bra $1437			bra 	_EXPSContinue
.1430					_EXPSShiftLeft:
.1430	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1433	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1435	30 10		bmi $1447			bmi 	_EXPSRange
.1437					_EXPSContinue:
.1437	88		dey				dey
.1438	d0 ea		bne $1424			bne 	_EXPSLoop
.143a					_EXPSExit:
.143a	a2 10		ldx #$10			ldx 	#IFR1
.143c	20 01 2b	jsr $2b01			jsr 	IFloatCopyFromRegister
.143f	7a		ply				ply
.1440	60		rts				rts
.1441					_EXPSShiftZero:
.1441	a2 0c		ldx #$0c			ldx 	#IFR0
.1443	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.1446	60		rts				rts
.1447					_EXPSRange:
.1447	4c 32 21	jmp $2132		jmp	ErrorV_range
.033d					EXPShiftLeftFlag:
>033d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.144a					EXPEvaluateExpression:
.144a	a9 00		lda #$00			lda 	#0 							; current precedence
.144c					EXPEvaluateExpressionPrecedenceA:
.144c	48		pha				pha
.144d	20 c7 14	jsr $14c7			jsr 	EXPTermValueR0				; do first term.
.1450					_EELoop:
.1450	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1452	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1454	90 31		bcc $1487			bcc 	_EEExit
.1456	aa		tax				tax 								; access the precedence of the operator.
.1457	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1458	dd df 16	cmp $16df,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.145b	b0 2b		bcs $1488			bcs 	_EEExit2
.145d	48		pha				pha 								; save current precedence.
.145e	da		phx				phx 								; save operator
.145f	c8		iny				iny 								; consume operator
.1460	da		phx				phx
.1461	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.1463	20 bf 2a	jsr $2abf			jsr 	IFloatPushRx
.1466	fa		plx				plx
.1467	bd df 16	lda $16df,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.146a	20 4c 14	jsr $144c			jsr 	EXPEvaluateExpressionPrecedenceA
.146d	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.146f	20 e0 2a	jsr $2ae0			jsr 	IFloatPullRx
.1472	fa		plx				plx 								; operator
.1473	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.1475	45 13		eor $13				eor 	IFR1+IExp
.1477	30 08		bmi $1481			bmi 	_EEType
.1479					_EETypeOkay:
.1479	8a		txa				txa
.147a	0a		asl a				asl 	a 							; double -> X
.147b	aa		tax				tax
.147c	20 84 14	jsr $1484			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.147f	80 cf		bra $1450			bra 	_EELoop
.1481					_EEType:
.1481	4c 4f 21	jmp $214f		jmp	ErrorV_type
.1484					_EECallBinary:
.1484	7c 87 19	jmp ($1987,x)			jmp 	(VectorTable,x)
.1487					_EEExit:
.1487	68		pla				pla 								; throw precedence
.1488					_EEExit2:
.1488	18		clc				clc
.1489	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.148a					EXPEvalNumber:
.148a	20 4a 14	jsr $144a			jsr 	EXPEvaluateExpression
.148d	24 0f		bit $0f				bit 	IFR0+IExp
.148f	30 01		bmi $1492			bmi 	EVUType
.1491	60		rts				rts
.1492					EVUType:
.1492	4c 4f 21	jmp $214f		jmp	ErrorV_type
.1495					EXPEvalInteger:
.1495	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1498	20 70 28	jsr $2870			jsr 	IFloatIntegerR0
.149b	60		rts				rts
.149c					EXPEvalInteger16:
.149c	20 95 14	jsr $1495			jsr 	EXPEvalInteger
.149f	a5 0e		lda $0e				lda 	IFR0+IM2
.14a1	d0 21		bne $14c4			bne 	EVURange
.14a3	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14a5	a5 0c		lda $0c				lda 	IFR0+IM0
.14a7	60		rts				rts
.14a8					EXPEvalInteger8:
.14a8	20 95 14	jsr $1495			jsr 	EXPEvalInteger
.14ab	a5 0e		lda $0e				lda 	IFR0+IM2
.14ad	05 0d		ora $0d				ora 	IFR0+IM1
.14af	d0 13		bne $14c4			bne 	EVURange
.14b1	a5 0c		lda $0c				lda 	IFR0+IM0
.14b3	60		rts				rts
.14b4					EXPEvalString:
.14b4	20 4a 14	jsr $144a			jsr 	EXPEvaluateExpression
.14b7	24 0f		bit $0f				bit 	IFR0+IExp
.14b9	10 d7		bpl $1492			bpl 	EVUType
.14bb	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14bd	86 1f		stx $1f				stx 	zTemp0+1
.14bf	a5 0c		lda $0c				lda 	IFR0+IM0
.14c1	85 1e		sta $1e				sta 	zTemp0
.14c3	60		rts				rts
.14c4					EVURange:
.14c4	4c 32 21	jmp $2132		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.14c7					EXPTermValueR0:
.14c7	20 12 15	jsr $1512			jsr 	EXPTermR0 					; get term
.14ca	90 45		bcc $1511			bcc 	_ETVNotReference 			; exit if value.
.14cc	5a		phy				phy
.14cd	a0 03		ldy #$03			ldy 	#3 							; get type
.14cf	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14d1	30 14		bmi $14e7			bmi 	_ETVDereferenceString
.14d3	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.14d5	88		dey				dey
.14d6	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14d8	85 0e		sta $0e				sta 	IFR0+IM2
.14da	88		dey				dey
.14db	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14dd	aa		tax				tax
.14de	b2 0c		lda ($0c)			lda 	(IFR0)
.14e0	86 0d		stx $0d				stx 	IFR0+IM1
.14e2	85 0c		sta $0c				sta 	IFR0+IM0
.14e4	7a		ply				ply
.14e5	18		clc				clc
.14e6	60		rts				rts
.14e7					_ETVDereferenceString:
.14e7	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.14e9	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14eb	12 0c		ora ($0c)			ora 	(IFR0)
.14ed	f0 11		beq $1500			beq 	_ETVNull
.14ef	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.14f1	aa		tax				tax
.14f2	b2 0c		lda ($0c)			lda 	(IFR0)
.14f4	18		clc				clc 								; add two so points to actual string.
.14f5	69 02		adc #$02			adc 	#2
.14f7	90 01		bcc $14fa			bcc 	_EVDSNoCarry
.14f9	e8		inx				inx
.14fa					_EVDSNoCarry:
.14fa	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.14fc	85 0c		sta $0c				sta 	IFR0
.14fe	80 08		bra $1508			bra 	_ETVFillExit 				; tidy up and exit.
.1500					_ETVNull:
.1500	a9 10		lda #$10			lda 	#_EVTNString & $FF
.1502	85 0c		sta $0c				sta 	IFR0+IM0
.1504	a9 15		lda #$15			lda 	#_EVTNString >> 8
.1506	85 0d		sta $0d				sta 	IFR0+IM1
.1508					_ETVFillExit:
.1508	64 0e		stz $0e				stz 	IFR0+IM2
.150a	a9 80		lda #$80			lda 	#$80
.150c	85 0f		sta $0f				sta 	IFR0+IExp
.150e	7a		ply				ply
.150f	60		rts				rts
.1510					_EVTNString:
>1510	00						.byte 	0
.1511					_ETVNotReference:
.1511	60		rts				rts
.1512					EXPTermR0:
.1512	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.1514	30 10		bmi $1526			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1516	c8		iny				iny 								; consume element
.1517	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1519	b0 08		bcs $1523			bcs 	_ETMIdentifier
.151b	20 4a 15	jsr $154a			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.151e	20 7d 15	jsr $157d			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1521	18		clc				clc 								; return value
.1522	60		rts				rts
.1523					_ETMIdentifier:
.1523	4c 07 25	jmp $2507			jmp 	VARCheckSimple 				; check simple variables A-Z
.1526					_ETMIsUnaryOrMinus:
.1526	c8		iny				iny 								; consume element
.1527	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1529	d0 0a		bne $1535			bne 	_ETMCheckUnary
.152b	20 c7 14	jsr $14c7			jsr 	EXPTermValueR0 				; get a term to negate
.152e	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1530	20 7b 2b	jsr $2b7b			jsr 	IFloatNegate
.1533	18		clc				clc
.1534	60		rts				rts
.1535					_ETMCheckUnary:
.1535	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1537	90 0e		bcc $1547			bcc 	_ETMUnarySyntax
.1539	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.153b	b0 0a		bcs $1547			bcs 	_ETMUnarySyntax
.153d	0a		asl a				asl 	a
.153e	aa		tax				tax
.153f	20 44 15	jsr $1544			jsr 	_ETMCallUnaryFunction
.1542	18		clc				clc
.1543	60		rts				rts
.1544					_ETMCallUnaryFunction:
.1544	7c 87 19	jmp ($1987,x)			jmp 	(VectorTable,x)
.1547					_ETMUnarySyntax:
.1547	4c 22 21	jmp $2122		jmp	ErrorV_syntax
.154a					EXPExtractTokenisedInteger:
.154a	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.154c	64 0f		stz $0f				stz 	IFR0+IExp
.154e	64 0d		stz $0d				stz 	IFR0+IM1
.1550	64 0e		stz $0e				stz 	IFR0+IM2
.1552					_ETMConstant:
.1552	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1554	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1556	b0 24		bcs $157c			bcs 	_ETMCExit 					; no.
.1558	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.155a	a5 0d		lda $0d				lda 	IFR0+IM1
.155c	85 0e		sta $0e				sta 	IFR0+IM2
.155e	a5 0c		lda $0c				lda 	IFR0+IM0
.1560	85 0d		sta $0d				sta 	IFR0+IM1
.1562	64 0c		stz $0c				stz 	IFR0+IM0
.1564	8a		txa				txa
.1565	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1566	66 0e		ror $0e				ror 	IFR0+IM2
.1568	66 0d		ror $0d				ror 	IFR0+IM1
.156a	66 0c		ror $0c				ror 	IFR0+IM0
.156c	4a		lsr a				lsr 	a
.156d	66 0e		ror $0e				ror 	IFR0+IM2
.156f	66 0d		ror $0d				ror 	IFR0+IM1
.1571	66 0c		ror $0c				ror 	IFR0+IM0
.1573	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.1575	11 1c		ora ($1c),y			ora 	(codePtr),y
.1577	85 0c		sta $0c				sta 	IFR0+IM0
.1579	c8		iny				iny 								; consume, loop back
.157a	80 d6		bra $1552			bra 	_ETMConstant
.157c					_ETMCExit:
.157c	60		rts				rts
.157d					EXPCheckDecimalFollows:
.157d	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.157f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1581	d0 19		bne $159c			bne 	_ETMCDExit
.1583	c8		iny				iny 								; consume token.
.1584	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.1586	5a		phy				phy									; save current position
.1587	48		pha				pha 								; save count of chars.
.1588	38		sec				sec 								; address into YX : y + codePtr+1
.1589	98		tya				tya
.158a	65 1c		adc $1c				adc 	codePtr
.158c	aa		tax				tax
.158d	a5 1d		lda $1d				lda 	codePtr+1
.158f	69 00		adc #$00			adc 	#0
.1591	a8		tay				tay
.1592	68		pla				pla 								; get count.
.1593	20 14 2a	jsr $2a14			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1596	7a		ply				ply 								; go to next token.
.1597	98		tya				tya
.1598	38		sec				sec
.1599	71 1c		adc ($1c),y			adc 	(codePtr),y
.159b	a8		tay				tay
.159c					_ETMCDExit:
.159c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.159d					EXPUnaryAbs:
.159d	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.15a0	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.15a3	20 b4 27	jsr $27b4			jsr 	IFloatAbsoluteR0
.15a6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.15a7					EXPUnaryAsc:
.15a7	20 b4 14	jsr $14b4			jsr 	EXPEvalString 					; string to R0, zTemp0
.15aa	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.15ad	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.15af	f0 06		beq $15b7			beq 	_EXAZero 						; if so return 0
.15b1	5a		phy				phy 									; otherwise get first character
.15b2	a0 01		ldy #$01			ldy 	#1
.15b4	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15b6	7a		ply				ply
.15b7					_EXAZero:
.15b7	a2 0c		ldx #$0c			ldx 	#IFR0
.15b9	20 72 2b	jsr $2b72			jsr 	IFloatSetByte
.15bc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.15bd					EXPUnaryChr:
.15bd	20 a8 14	jsr $14a8			jsr 	EXPEvalInteger8 				; expr
.15c0	48		pha				pha 									; push on stack
.15c1	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.15c4	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.15c6	20 65 23	jsr $2365			jsr 	StringTempAllocate
.15c9	68		pla				pla
.15ca	20 9a 23	jsr $239a			jsr 	StringTempWrite
.15cd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.15ce					EXPUnaryDec:
.15ce	20 b4 14	jsr $14b4			jsr 	EXPEvalString 					; string to R0, zTemp0
.15d1	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.15d4	5a		phy				phy
.15d5	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.15d7	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.15da	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.15dc	f0 3b		beq $1619			beq 	_EUDError 						; empty string
.15de	aa		tax				tax
.15df	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.15e1					_EUDLoop:
.15e1	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.15e3	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.15e5	90 02		bcc $15e9			bcc 	_EUDNoCase
.15e7	e9 20		sbc #$20			sbc 	#$20
.15e9					_EUDNoCase:
.15e9	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.15eb	90 2c		bcc $1619			bcc 	_EUDError
.15ed	c9 3a		cmp #$3a			cmp 	#'9'+1
.15ef	90 0a		bcc $15fb			bcc 	_EUDOkay
.15f1	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.15f3	90 24		bcc $1619			bcc 	_EUDError
.15f5	c9 47		cmp #$47			cmp 	#'F'+1
.15f7	b0 20		bcs $1619			bcs 	_EUDError
.15f9	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.15fb					_EUDOkay:
.15fb	29 0f		and #$0f			and 	#15 							; make constant
.15fd	da		phx				phx
.15fe	48		pha				pha
.15ff	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1601	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1604	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1607	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.160a	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.160d	68		pla				pla 									; pop constant and OR in
.160e	fa		plx				plx
.160f	05 0c		ora $0c				ora 	IFR0+IM0
.1611	85 0c		sta $0c				sta 	IFR0+IM0
.1613	c8		iny				iny 									; next
.1614	ca		dex				dex
.1615	d0 ca		bne $15e1			bne 	_EUDLoop
.1617	7a		ply				ply
.1618	60		rts				rts
.1619					_EUDError:
.1619	4c 42 21	jmp $2142		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.161c					EXPUnaryInlineDec:
.161c	4c 22 21	jmp $2122		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.161f					EXPUnaryNull:
.161f	20 c7 14	jsr $14c7			jsr 	EXPTermValueR0
.1622	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1623					EXPUnaryFrac:
.1623	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.1626	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.1629	20 1a 28	jsr $281a			jsr 	IFloatFractionalR0
.162c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.162d					EXPUnaryInt:
.162d	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.1630	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.1633	20 70 28	jsr $2870			jsr 	IFloatIntegerR0
.1636	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1637					EXPUnaryLen:
.1637	20 b4 14	jsr $14b4			jsr 	EXPEvalString 					; string to R0, zTemp0
.163a	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.163d	b2 1e		lda ($1e)			lda 	(zTemp0)
.163f	a2 0c		ldx #$0c			ldx 	#IFR0
.1641	20 72 2b	jsr $2b72			jsr 	IFloatSetByte
.1644	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1645					EXPUnaryParenthesis:
.1645	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.1648	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.164b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.164c					EXPUnaryRnd:
.164c	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; number to R0
.164f	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 				; )
.1652	a2 0c		ldx #$0c			ldx 	#IFR0
.1654	20 6b 16	jsr $166b			jsr 	EXPLoadInRandom
.1657	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1659	85 0f		sta $0f				sta 	IFR0+IExp
.165b	60		rts				rts
.165c					ExpUnaryRand:
.165c	20 95 14	jsr $1495			jsr 	EXPEvalInteger 				; integer to R0
.165f	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 				; )
.1662	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.1664	20 6b 16	jsr $166b			jsr 	EXPLoadInRandom
.1667	20 e1 26	jsr $26e1			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.166a	60		rts				rts
.166b					EXPLoadInRandom:
.166b	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.166e	20 80 16	jsr $1680			jsr 	EXPRandom32
.1671	95 00		sta $00,x			sta 	IM0,x
.1673	20 80 16	jsr $1680			jsr 	EXPRandom32
.1676	95 01		sta $01,x			sta 	IM1,x
.1678	20 80 16	jsr $1680			jsr 	EXPRandom32
.167b	29 7f		and #$7f			and 	#$7F
.167d	95 02		sta $02,x			sta 	IM2,x
.167f	60		rts				rts
.1680					EXPRandom32:
.1680	5a		phy				phy
.1681	a0 08		ldy #$08			ldy 	#8
.1683	ad 3e 03	lda $033e			lda 	EXPSeed+0
.1686	0d 3f 03	ora $033f			ora 	EXPSeed+1
.1689	0d 40 03	ora $0340			ora 	EXPSeed+2
.168c	0d 41 03	ora $0341			ora 	EXPSeed+3
.168f	d0 08		bne $1699			bne 	_EXPRNoReset
.1691	ee 3e 03	inc $033e			inc 	EXPSeed+0
.1694	a0 10		ldy #$10			ldy 	#16
.1696	8c 41 03	sty $0341			sty 	EXPSeed+3
.1699					_EXPRNoReset:
.1699	ad 3e 03	lda $033e			lda 	EXPSeed+0
.169c					_EXPRLoop:
.169c	0a		asl a				asl		a
.169d	2e 3f 03	rol $033f			rol 	EXPSeed+1
.16a0	2e 40 03	rol $0340			rol 	EXPSeed+2
.16a3	2e 41 03	rol $0341			rol 	EXPSeed+3
.16a6	90 02		bcc $16aa			bcc 	_EXPRNoEOR
.16a8	49 c5		eor #$c5			eor 	#$C5
.16aa					_EXPRNoEOR:
.16aa	88		dey				dey
.16ab	d0 ef		bne $169c			bne 	_EXPRLoop
.16ad	8d 3e 03	sta $033e			sta 	EXPSeed+0
.16b0	7a		ply				ply
.16b1	60		rts				rts
.033e					EXPSeed:
>033e							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.16b2					EXPUnarySgn:
.16b2	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.16b5	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.16b8	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.16ba	20 12 2b	jsr $2b12			jsr 	IFloatCopyToRegister
.16bd	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.16bf	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.16c2	a2 10		ldx #$10			ldx 	#IFR1
.16c4	20 3e 28	jsr $283e			jsr 	IFloatCompare 					; compare R1 vs 0.
.16c7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.16c8					EXPUnarySqr:
.16c8	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.16cb	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.16ce	20 bc 27	jsr $27bc			jsr 	IFloatSquareRootR0 				; square root.
.16d1	b0 01		bcs $16d4			bcs 	_EUSValue
.16d3	60		rts				rts
.16d4					_EUSValue:
.16d4	4c 32 21	jmp $2132		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.16d7					EXPUnaryHex:
.16d7	20 95 14	jsr $1495			jsr 	EXPEvalInteger 					; expr
.16da	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.16dd	5a		phy				phy
.16de	a9 10		lda #$10			lda 	#16
.16e0	20 11 29	jsr $2911			jsr 	IFloatIntegerToStringR0
.16e3	80 0a		bra $16ef			bra 	EUSMain
.16e5					EXPUnaryStr:
.16e5	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; expr
.16e8	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.16eb	5a		phy				phy
.16ec	20 6d 29	jsr $296d			jsr 	IFloatFloatToStringR0 			; convert to string
.16ef					EUSMain:
.16ef	b0 18		bcs $1709			bcs 	_EUSError
.16f1	86 1e		stx $1e				stx 	zTemp0 							; save string address
.16f3	84 1f		sty $1f				sty 	zTemp0+1
.16f5	48		pha				pha 									; save count
.16f6	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.16f8	20 65 23	jsr $2365			jsr 	StringTempAllocate
.16fb	fa		plx				plx 									; count in X
.16fc	a0 00		ldy #$00			ldy 	#0
.16fe					_EUSCopy:
.16fe	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1700	c8		iny				iny
.1701	20 9a 23	jsr $239a			jsr 	StringTempWrite
.1704	ca		dex				dex
.1705	d0 f7		bne $16fe			bne	 	_EUSCopy
.1707	7a		ply				ply
.1708	60		rts				rts
.1709					_EUSError:
.1709	4c 32 21	jmp $2132		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.170c					EXPUnaryInlineString:
.170c	18		clc				clc 								; physical address -> IM0,1
.170d	98		tya				tya
.170e	65 1c		adc $1c				adc 	codePtr
.1710	85 0c		sta $0c				sta 	IFR0+IM0
.1712	a5 1d		lda $1d				lda 	codePtr+1
.1714	69 00		adc #$00			adc 	#0
.1716	85 0d		sta $0d				sta 	IFR0+IM1
.1718	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.171a	a9 80		lda #$80			lda 	#$80
.171c	85 0f		sta $0f				sta 	IFR0+IExp
.171e	98		tya				tya	 								; skip over it.
.171f	38		sec				sec
.1720	71 1c		adc ($1c),y			adc 	(codePtr),y
.1722	a8		tay				tay
.1723	60		rts				rts
.1724					_EXPUISRange:
.1724	4c 32 21	jmp $2132		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1727					EXPUnaryLeft:
.1727	20 6d 17	jsr $176d			jsr 	EXPCommonStart 					; <string>,
.172a	48		pha				pha 									; save string address on stack
.172b	da		phx				phx
.172c	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.172e	48		pha				pha
.172f	20 a8 14	jsr $14a8			jsr 	EXPEvalInteger8 				; characters to do
.1732	80 44		bra $1778			bra 	EXPSubstringCommon
.1734					EXPUnaryRight:
.1734	20 6d 17	jsr $176d			jsr 	EXPCommonStart 					; <string>,
.1737	48		pha				pha 									; save string address on stack
.1738	da		phx				phx
.1739	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.173b	48		pha				pha
.173c	20 a8 14	jsr $14a8			jsr 	EXPEvalInteger8 				; characters to do
.173f	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.1741	68		pla				pla
.1742	38		sec				sec
.1743	e5 1e		sbc $1e				sbc 	zTemp0
.1745	b0 02		bcs $1749			bcs 	_EUROffLeft
.1747	a9 00		lda #$00			lda 	#0
.1749					_EUROffLeft:
.1749	48		pha				pha 									; start pos
.174a	a9 ff		lda #$ff			lda 	#255
.174c	80 2a		bra $1778			bra 	EXPSubstringCommon
.174e					EXPUnaryMid:
.174e	20 6d 17	jsr $176d			jsr 	EXPCommonStart 					; <string>,
.1751	48		pha				pha 									; save string address on stack
.1752	da		phx				phx
.1753	20 a8 14	jsr $14a8			jsr 	EXPEvalInteger8 				; characters start
.1756	f0 12		beq $176a			beq 	_EUSError 						; 1 is left
.1758	3a		dec a				dec 	a 								; zero based.
.1759	48		pha				pha
.175a	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.175c	c9 99		cmp #$99			cmp 	#PR_COMMA
.175e	f0 04		beq $1764			beq 	_EUMLength 						; if so m is provided
.1760	a9 ff		lda #$ff			lda 	#255 							; default m
.1762	80 14		bra $1778			bra 	EXPSubstringCommon
.1764					_EUMLength:
.1764	c8		iny				iny 									; consume comma
.1765	20 a8 14	jsr $14a8			jsr 	EXPEvalInteger8 				; characters to do
.1768	80 0e		bra $1778			bra 	EXPSubstringCommon
.176a					_EUSError:
.176a	4c 42 21	jmp $2142		jmp	ErrorV_value
.176d					EXPCommonStart:
.176d	20 b4 14	jsr $14b4			jsr 	EXPEvalString
.1770	20 77 22	jsr $2277			jsr 	ERRCheckComma
.1773	a5 0c		lda $0c				lda 	IFR0+IM0
.1775	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1777	60		rts				rts
.1778					EXPSubstringCommon:
.1778	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.177a	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; check right bracket.
.177d	68		pla				pla 									; start position
.177e	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.1780	fa		plx				plx 									; get string address to zTemp2.
.1781	86 23		stx $23				stx 	zTemp2+1
.1783	68		pla				pla
.1784	85 22		sta $22				sta 	zTemp2
.1786	38		sec				sec 									; length - start is the max count of chars
.1787	b2 22		lda ($22)			lda 	(zTemp2)
.1789	e5 21		sbc $21				sbc 	zTemp1+1
.178b	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.178d	b0 02		bcs $1791			bcs 	_EXPSSNoTrim
.178f	85 20		sta $20				sta 	zTemp1 							; update count with available
.1791					_EXPSSNoTrim:
.1791	a5 20		lda $20				lda 	zTemp1 							; chars required.
.1793	20 65 23	jsr $2365			jsr 	StringTempAllocate 				; allocate memory for it.
.1796	a5 20		lda $20				lda 	zTemp1 							; zero length string
.1798	f0 15		beq $17af			beq 	_EXPSSExit
.179a	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.179c	d2 22		cmp ($22)			cmp 	(zTemp2)
.179e	b0 0f		bcs $17af			bcs 	_EXPSSExit
.17a0	5a		phy				phy
.17a1	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.17a3	c8		iny				iny 									; +1 for the length byte
.17a4					_EXPSSCopy:
.17a4	b1 22		lda ($22),y			lda 	(zTemp2),y
.17a6	20 9a 23	jsr $239a			jsr 	StringTempWrite
.17a9	c8		iny				iny
.17aa	c6 20		dec $20				dec 	zTemp1
.17ac	d0 f6		bne $17a4			bne 	_EXPSSCopy
.17ae	7a		ply				ply
.17af					_EXPSSExit:
.17af	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.17b0					EXPUnaryVal:
.17b0	20 b4 14	jsr $14b4			jsr 	EXPEvalString 					; string to R0, zTemp0
.17b3	20 6f 22	jsr $226f			jsr 	ERRCheckRParen 					; )
.17b6	5a		phy				phy
.17b7	18		clc				clc
.17b8	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.17ba	69 01		adc #$01			adc 	#1
.17bc	aa		tax				tax
.17bd	a5 1f		lda $1f				lda 	zTemp0+1
.17bf	69 00		adc #$00			adc 	#0
.17c1	a8		tay				tay
.17c2	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.17c4	20 d4 29	jsr $29d4			jsr 	IFloatStringToFloatR0 			; do conversion
.17c7	b0 02		bcs $17cb			bcs 	_EUVError
.17c9	7a		ply				ply
.17ca	60		rts				rts
.17cb					_EUVError:
.17cb	4c 42 21	jmp $2142		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.17ce					BinaryPrecedence:
>17ce	02					.byte	 2	; $ef =
>17cf	02					.byte	 2	; $f0 <>
>17d0	02					.byte	 2	; $f1 <=
>17d1	02					.byte	 2	; $f2 <
>17d2	02					.byte	 2	; $f3 >=
>17d3	02					.byte	 2	; $f4 >
>17d4	01					.byte	 1	; $f5 XOR
>17d5	01					.byte	 1	; $f6 OR
>17d6	01					.byte	 1	; $f7 AND
>17d7	04					.byte	 4	; $f8 DIV
>17d8	04					.byte	 4	; $f9 MOD
>17d9	04					.byte	 4	; $fa <<
>17da	04					.byte	 4	; $fb >>
>17db	04					.byte	 4	; $fc /
>17dc	04					.byte	 4	; $fd *
>17dd	03					.byte	 3	; $fe -
>17de	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.17df					StructureOffsets:
>17df	01					.byte	1  	; $80 REPEAT
>17e0	ff					.byte	255	; $81 UNTIL
>17e1	01					.byte	1  	; $82 WHILE
>17e2	ff					.byte	255	; $83 WEND
>17e3	01					.byte	1  	; $84 IF
>17e4	ff					.byte	255	; $85 ENDIF
>17e5	01					.byte	1  	; $86 DO
>17e6	ff					.byte	255	; $87 LOOP
>17e7	01					.byte	1  	; $88 PROC
>17e8	ff					.byte	255	; $89 ENDPROC
>17e9	01					.byte	1  	; $8a FOR
>17ea	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.17eb					StandardTokens:
>17eb	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>17f2	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>17f8	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>17fe	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1803	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1806	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>180c	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>180f	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1814	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1819	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1821	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1825	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>182a	00					.byte	$00                                     	; $8c [[end]]
>182b	00					.byte	$00                                     	; $8d [[shift]]
>182c	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1831	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1836	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1839	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>183e	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1842	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1848	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>184e	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1853	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1857	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>185b	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1860	01 2c					.byte	$01,$2c                                 	; $99 ,
>1862	01 3b					.byte	$01,$3b                                 	; $9a ;
>1864	01 3a					.byte	$01,$3a                                 	; $9b :
>1866	01 27					.byte	$01,$27                                 	; $9c '
>1868	01 29					.byte	$01,$29                                 	; $9d )
>186a	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>186e	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1874	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1878	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>187c	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1881	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1885	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>188c	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1891	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1896	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>189b	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>18a0	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>18a5	00					.byte	0											; $aa
>18a6	00					.byte	0											; $ab
>18a7	00					.byte	0											; $ac
>18a8	00					.byte	0											; $ad
>18a9	00					.byte	0											; $ae
>18aa	00					.byte	0											; $af
>18ab	00					.byte	0											; $b0
>18ac	00					.byte	0											; $b1
>18ad	00					.byte	0											; $b2
>18ae	00					.byte	0											; $b3
>18af	00					.byte	0											; $b4
>18b0	00					.byte	0											; $b5
>18b1	00					.byte	0											; $b6
>18b2	00					.byte	0											; $b7
>18b3	00					.byte	0											; $b8
>18b4	00					.byte	0											; $b9
>18b5	00					.byte	0											; $ba
>18b6	00					.byte	0											; $bb
>18b7	00					.byte	0											; $bc
>18b8	00					.byte	0											; $bd
>18b9	00					.byte	0											; $be
>18ba	00					.byte	0											; $bf
>18bb	00					.byte	0											; $c0
>18bc	00					.byte	0											; $c1
>18bd	00					.byte	0											; $c2
>18be	00					.byte	0											; $c3
>18bf	00					.byte	0											; $c4
>18c0	00					.byte	0											; $c5
>18c1	00					.byte	0											; $c6
>18c2	00					.byte	0											; $c7
>18c3	00					.byte	0											; $c8
>18c4	00					.byte	0											; $c9
>18c5	00					.byte	0											; $ca
>18c6	00					.byte	0											; $cb
>18c7	00					.byte	0											; $cc
>18c8	00					.byte	0											; $cd
>18c9	00					.byte	0											; $ce
>18ca	00					.byte	0											; $cf
>18cb	00					.byte	0											; $d0
>18cc	00					.byte	0											; $d1
>18cd	00					.byte	0											; $d2
>18ce	00					.byte	0											; $d3
>18cf	00					.byte	0											; $d4
>18d0	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>18d6	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>18dc	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>18e4	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>18eb	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>18f1	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>18f7	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>18fc	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1901	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1906	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>190b	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1910	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1916	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>191b	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1923	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>192a	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>192f	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1934	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>193a	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>193f	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1945	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>194a	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1950	01 28					.byte	$01,$28                                 	; $eb (
>1952	01 24					.byte	$01,$24                                 	; $ec $
>1954	00					.byte	$00                                     	; $ed [[decimal]]
>1955	00					.byte	$00                                     	; $ee [[string]]
>1956	01 3d					.byte	$01,$3d                                 	; $ef =
>1958	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>195b	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>195e	01 3c					.byte	$01,$3c                                 	; $f2 <
>1960	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1963	01 3e					.byte	$01,$3e                                 	; $f4 >
>1965	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1969	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>196c	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1970	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1974	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1978	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>197b	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>197e	01 2f					.byte	$01,$2f                                 	; $fc /
>1980	01 2a					.byte	$01,$2a                                 	; $fd *
>1982	01 2d					.byte	$01,$2d                                 	; $fe -
>1984	01 2b					.byte	$01,$2b                                 	; $ff +
>1986	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1987					VectorTable:
>1987	7e 20					.word	Command_REPEAT           ; $80 REPEAT
>1989	87 20					.word	Command_UNTIL            ; $81 UNTIL
>198b	f7 20					.word	Command_WHILE            ; $82 WHILE
>198d	16 21					.word	Command_WEND             ; $83 WEND
>198f	56 20					.word	IfCommand                ; $84 IF
>1991	7d 20					.word	EndIf                    ; $85 ENDIF
>1993	50 1f					.word	Command_DO               ; $86 DO
>1995	68 1f					.word	Command_LOOP             ; $87 LOOP
>1997	ca 12					.word	NoExec08                 ; $88 PROC
>1999	4e 2c					.word	NotImplemented           ; $89 ENDPROC
>199b	71 1f					.word	Command_FOR              ; $8a FOR
>199d	e1 1f					.word	Command_NEXT             ; $8b NEXT
>199f	83 12					.word	RUNEndOfLine             ; $8c [[END]]
>19a1	c1 12					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>19a3	76 20					.word	ElseCode                 ; $8e ELSE
>19a5	ca 12					.word	NoExec01                 ; $8f THEN
>19a7	ca 12					.word	NoExec02                 ; $90 TO
>19a9	ca 12					.word	NoExec03                 ; $91 STEP
>19ab	e9 11					.word	CommandLET               ; $92 LET
>19ad	84 11					.word	Command_Print            ; $93 PRINT
>19af	4e 2c					.word	NotImplemented           ; $94 INPUT
>19b1	4e 2c					.word	NotImplemented           ; $95 CALL
>19b3	4e 2c					.word	NotImplemented           ; $96 SYS
>19b5	6a 12					.word	Command_REM              ; $97 REM
>19b7	59 1f					.word	Command_EXIT             ; $98 EXIT
>19b9	ca 12					.word	NoExec04                 ; $99 ,
>19bb	ca 12					.word	NoExec05                 ; $9a ;
>19bd	ca 12					.word	NoExec06                 ; $9b :
>19bf	6a 12					.word	Command_REM2             ; $9c '
>19c1	ca 12					.word	NoExec07                 ; $9d )
>19c3	68 10					.word	CommandDIM               ; $9e DIM
>19c5	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>19c7	61 12					.word	Command_NEW              ; $a0 NEW
>19c9	77 12					.word	Command_RUN              ; $a1 RUN
>19cb	c7 12					.word	Command_STOP             ; $a2 STOP
>19cd	c4 12					.word	Command_END              ; $a3 END
>19cf	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>19d1	4e 2c					.word	NotImplemented           ; $a5 LIST
>19d3	4e 2c					.word	NotImplemented           ; $a6 SAVE
>19d5	4e 2c					.word	NotImplemented           ; $a7 LOAD
>19d7	4e 2c					.word	NotImplemented           ; $a8 POKE
>19d9	4e 2c					.word	NotImplemented           ; $a9 DOKE
>19db	4e 2c					.word	NotImplemented           ; $aa
>19dd	4e 2c					.word	NotImplemented           ; $ab
>19df	4e 2c					.word	NotImplemented           ; $ac
>19e1	4e 2c					.word	NotImplemented           ; $ad
>19e3	4e 2c					.word	NotImplemented           ; $ae
>19e5	4e 2c					.word	NotImplemented           ; $af
>19e7	4e 2c					.word	NotImplemented           ; $b0
>19e9	4e 2c					.word	NotImplemented           ; $b1
>19eb	4e 2c					.word	NotImplemented           ; $b2
>19ed	4e 2c					.word	NotImplemented           ; $b3
>19ef	4e 2c					.word	NotImplemented           ; $b4
>19f1	4e 2c					.word	NotImplemented           ; $b5
>19f3	4e 2c					.word	NotImplemented           ; $b6
>19f5	4e 2c					.word	NotImplemented           ; $b7
>19f7	4e 2c					.word	NotImplemented           ; $b8
>19f9	4e 2c					.word	NotImplemented           ; $b9
>19fb	4e 2c					.word	NotImplemented           ; $ba
>19fd	4e 2c					.word	NotImplemented           ; $bb
>19ff	4e 2c					.word	NotImplemented           ; $bc
>1a01	4e 2c					.word	NotImplemented           ; $bd
>1a03	4e 2c					.word	NotImplemented           ; $be
>1a05	4e 2c					.word	NotImplemented           ; $bf
>1a07	4e 2c					.word	NotImplemented           ; $c0
>1a09	4e 2c					.word	NotImplemented           ; $c1
>1a0b	4e 2c					.word	NotImplemented           ; $c2
>1a0d	4e 2c					.word	NotImplemented           ; $c3
>1a0f	4e 2c					.word	NotImplemented           ; $c4
>1a11	4e 2c					.word	NotImplemented           ; $c5
>1a13	4e 2c					.word	NotImplemented           ; $c6
>1a15	4e 2c					.word	NotImplemented           ; $c7
>1a17	4e 2c					.word	NotImplemented           ; $c8
>1a19	4e 2c					.word	NotImplemented           ; $c9
>1a1b	4e 2c					.word	NotImplemented           ; $ca
>1a1d	4e 2c					.word	NotImplemented           ; $cb
>1a1f	4e 2c					.word	NotImplemented           ; $cc
>1a21	4e 2c					.word	NotImplemented           ; $cd
>1a23	4e 2c					.word	NotImplemented           ; $ce
>1a25	4e 2c					.word	NotImplemented           ; $cf
>1a27	4e 2c					.word	NotImplemented           ; $d0
>1a29	4e 2c					.word	NotImplemented           ; $d1
>1a2b	4e 2c					.word	NotImplemented           ; $d2
>1a2d	4e 2c					.word	NotImplemented           ; $d3
>1a2f	4e 2c					.word	NotImplemented           ; $d4
>1a31	4e 2c					.word	NotImplemented           ; $d5 DEEK(
>1a33	4e 2c					.word	NotImplemented           ; $d6 PEEK(
>1a35	34 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1a37	27 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1a39	4e 17					.word	EXPUnaryMid              ; $d9 MID$(
>1a3b	e5 16					.word	EXPUnaryStr              ; $da STR$(
>1a3d	b0 17					.word	EXPUnaryVal              ; $db VAL(
>1a3f	b2 16					.word	EXPUnarySgn              ; $dc SGN(
>1a41	9d 15					.word	EXPUnaryAbs              ; $dd ABS(
>1a43	37 16					.word	EXPUnaryLen              ; $de LEN(
>1a45	c8 16					.word	EXPUnarySqr              ; $df SQR(
>1a47	bd 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1a49	a7 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1a4b	4e 2c					.word	NotImplemented           ; $e2 INKEY$(
>1a4d	4e 2c					.word	NotImplemented           ; $e3 EVENT(
>1a4f	4e 2c					.word	NotImplemented           ; $e4 TIME
>1a51	2d 16					.word	EXPUnaryInt              ; $e5 INT(
>1a53	23 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1a55	ce 15					.word	EXPUnaryDec              ; $e7 DEC(
>1a57	d7 16					.word	EXPUnaryHex              ; $e8 HEX$(
>1a59	4c 16					.word	EXPUnaryRnd              ; $e9 RND(
>1a5b	5c 16					.word	ExpUnaryRand             ; $ea RAND(
>1a5d	45 16					.word	EXPUnaryParenthesis      ; $eb (
>1a5f	1f 16					.word	EXPUnaryNull             ; $ec $
>1a61	1c 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1a63	0c 17					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1a65	87 13					.word	EXPCompareEqual          ; $ef =
>1a67	a2 13					.word	EXPCompareNotEqual       ; $f0 <>
>1a69	ab 13					.word	EXPCompareLessEqual      ; $f1 <=
>1a6b	90 13					.word	EXPCompareLess           ; $f2 <
>1a6d	b4 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1a6f	99 13					.word	EXPCompareGreater        ; $f4 >
>1a71	34 13					.word	EXPBinXor                ; $f5 XOR
>1a73	28 13					.word	EXPBinOr                 ; $f6 OR
>1a75	1c 13					.word	EXPBinAnd                ; $f7 AND
>1a77	f4 12					.word	EXPBinIDiv               ; $f8 DIV
>1a79	05 13					.word	EXPBinIMod               ; $f9 MOD
>1a7b	ff 13					.word	EXPBinLeft               ; $fa <<
>1a7d	07 14					.word	EXPBinRight              ; $fb >>
>1a7f	e8 12					.word	EXPBinFDiv               ; $fc /
>1a81	df 12					.word	EXPBinMul                ; $fd *
>1a83	d6 12					.word	EXPBinSub                ; $fe -
>1a85	cd 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1a87					TOKDetokenise:
.1a87	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1a89	84 23		sty $23				sty 	zTemp2+1
.1a8b	9c 44 03	stz $0344			stz		TOKLastCharacter 			; clear last character
.1a8e					_TOKDLoop:
.1a8e	20 bd 1a	jsr $1abd			jsr 	TOKDGet 					; get next
.1a91	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1a93	f0 26		beq $1abb			beq 	_TOKDExit
.1a95	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1a97	f0 1d		beq $1ab6			beq 	_TOKDDataItem
.1a99	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1a9b	f0 19		beq $1ab6			beq 	_TOKDDataItem
.1a9d	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1a9f	10 05		bpl $1aa6			bpl 	_TOKDNotToken
.1aa1	20 85 1b	jsr $1b85			jsr 	TOKDToken 					; token to text.
.1aa4	80 e8		bra $1a8e			bra 	_TOKDLoop
.1aa6					_TOKDNotToken:
.1aa6	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1aa8	90 05		bcc $1aaf			bcc 	_TOKDNotIdentifier
.1aaa	20 f8 1a	jsr $1af8			jsr 	TOKDIdentifier
.1aad	80 df		bra $1a8e			bra 	_TOKDLoop
.1aaf					_TOKDNotIdentifier:
.1aaf	a0 0a		ldy #$0a			ldy 	#10
.1ab1	20 41 1b	jsr $1b41			jsr 	TOKDInteger
.1ab4	80 d8		bra $1a8e			bra 	_TOKDLoop
.1ab6					_TOKDDataItem:
.1ab6	20 d3 1a	jsr $1ad3			jsr 	TOKDDataItem
.1ab9	80 d3		bra $1a8e			bra 	_TOKDLoop
.1abb					_TOKDExit:
.1abb	18		clc				clc
.1abc	60		rts				rts
.1abd	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1abf	e6 22		inc $22				inc 	zTemp2
.1ac1	d0 02		bne $1ac5			bne 	_TKDGExit
.1ac3	e6 23		inc $23				inc 	zTemp2+1
.1ac5					_TKDGExit:
.1ac5	60		rts				rts
.1ac6					TOKDOutput:
.1ac6	8d 44 03	sta $0344			sta 	TOKLastCharacter
.1ac9	6c 42 03	jmp ($0342)			jmp 	(TOKOutputMethod)
.1acc					TOKSetDetokeniseOutput:
.1acc	8e 42 03	stx $0342			stx 	TOKOutputMethod
.1acf	8c 43 03	sty $0343			sty 	TOKOutputMethod+1
.1ad2	60		rts				rts
.0342					TOKOutputMethod:
>0342							.fill 	2
.0344					TOKLastCharacter:
>0344							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1ad3					TOKDDataItem:
.1ad3	a8		tay				tay 								; type in Y
.1ad4	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1ad6	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1ad8	f0 02		beq $1adc			beq 	_TOKDDIsString
.1ada	a9 2e		lda #$2e			lda 	#'.'
.1adc					_TOKDDIsString:
.1adc	20 c6 1a	jsr $1ac6			jsr 	TOKDOutput 					; dump it
.1adf	20 bd 1a	jsr $1abd			jsr 	TOKDGet 					; get length into X
.1ae2	aa		tax				tax
.1ae3					_TOKDDOutput:
.1ae3	ca		dex				dex 								; are we complete
.1ae4	30 08		bmi $1aee			bmi 	_TOKDDEnd
.1ae6	20 bd 1a	jsr $1abd			jsr 	TOKDGet 					; get character and output it
.1ae9	20 c6 1a	jsr $1ac6			jsr 	TOKDOutput
.1aec	80 f5		bra $1ae3			bra 	_TOKDDOutput
.1aee					_TOKDDEnd:
.1aee	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1af0	d0 05		bne $1af7			bne 	_TOKDDNotString
.1af2	a9 22		lda #$22			lda 	#'"'
.1af4	20 c6 1a	jsr $1ac6			jsr 	TOKDOutput
.1af7					_TOKDDNotString:
.1af7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1af8					TOKDIdentifier:
.1af8	a0 ff		ldy #$ff			ldy 	#$FF
.1afa	8c 45 03	sty $0345			sty 	TOKDIFirstChar
.1afd					_TOKDLoop:
.1afd	a8		tay				tay 								; token in Y
.1afe	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1b00	c0 64		cpy #$64			cpy 	#$64
.1b02	f0 11		beq $1b15			beq 	_TOKDIOutput
.1b04	a9 5f		lda #$5f			lda 	#'_'
.1b06	c0 65		cpy #$65			cpy 	#$65
.1b08	f0 0b		beq $1b15			beq 	_TOKDIOutput
.1b0a	98		tya				tya 								; handle a-z
.1b0b	18		clc				clc
.1b0c	69 21		adc #$21			adc	 	#$21
.1b0e	c0 5a		cpy #$5a			cpy 	#$5A
.1b10	90 03		bcc $1b15			bcc 	_TOKDIOutput
.1b12	38		sec				sec 								; handle 0-9
.1b13	e9 4b		sbc #$4b			sbc 	#$4B
.1b15					_TOKDIOutput:
.1b15	2c 45 03	bit $0345			bit 	TOKDIFirstChar
.1b18	10 08		bpl $1b22			bpl 	_TOKDINoSpacing
.1b1a	48		pha				pha
.1b1b	20 b7 1b	jsr $1bb7			jsr 	TOKDSpacing
.1b1e	9c 45 03	stz $0345			stz 	TOKDIFirstChar
.1b21	68		pla				pla
.1b22					_TOKDINoSpacing:
.1b22	20 c6 1a	jsr $1ac6			jsr 	TOKDOutput
.1b25	20 bd 1a	jsr $1abd			jsr 	TOKDGet 					; get next token
.1b28	c9 7c		cmp #$7c			cmp 	#$7C
.1b2a	90 d1		bcc $1afd			bcc 	_TOKDLoop
.1b2c	f0 12		beq $1b40			beq 	_TOKDIExit 					; it's a number, no tail.
.1b2e	4a		lsr a				lsr 	a 							; string ?
.1b2f	90 07		bcc $1b38			bcc 	_TOKDICheckArray
.1b31	48		pha				pha
.1b32	a9 24		lda #$24			lda 	#"$"
.1b34	20 c6 1a	jsr $1ac6			jsr 	TOKDOutput
.1b37	68		pla				pla
.1b38					_TOKDICheckArray:
.1b38	4a		lsr a				lsr 	a 							; array ?
.1b39	90 05		bcc $1b40			bcc 	_TOKDIExit
.1b3b	a9 28		lda #$28			lda 	#"("
.1b3d	20 c6 1a	jsr $1ac6			jsr 	TOKDOutput
.1b40					_TOKDIExit:
.1b40	60		rts				rts
.0345					TOKDIFirstChar:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1b41					TOKDInteger:
.1b41	5a		phy				phy 								; save base
.1b42	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1b44	20 72 2b	jsr $2b72			jsr 	IFloatSetByte
.1b47					_TOKDILoop:
.1b47	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1b49	c9 40		cmp #$40			cmp 	#$40
.1b4b	b0 1d		bcs $1b6a			bcs 	_TOKDIHaveInteger
.1b4d	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1b4f	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1b52	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1b55	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1b58	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1b5b	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1b5e	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1b61	20 bd 1a	jsr $1abd			jsr 	TOKDGet 					; OR byte in.
.1b64	05 0c		ora $0c				ora 	IFR0+IM0
.1b66	85 0c		sta $0c				sta 	IFR0+IM0
.1b68	80 dd		bra $1b47			bra 	_TOKDILoop
.1b6a					_TOKDIHaveInteger:
.1b6a	7a		ply				ply 								; restore base
.1b6b	98		tya				tya 								; base in A
.1b6c	20 11 29	jsr $2911			jsr 	IFloatIntegerToStringR0
.1b6f	86 1e		stx $1e				stx 	zTemp0
.1b71	84 1f		sty $1f				sty 	zTemp0+1
.1b73	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b75	20 b7 1b	jsr $1bb7			jsr 	TOKDSpacing 				; check spacing okay.
.1b78	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1b7a					_TOKDOutput:
.1b7a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b7c	20 c6 1a	jsr $1ac6			jsr 	TOKDOutput
.1b7f	c8		iny				iny
.1b80	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b82	d0 f6		bne $1b7a			bne 	_TOKDOutput
.1b84	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1b85					TOKDToken:
.1b85	a2 eb		ldx #$eb			ldx 	#StandardTokens & $FF
.1b87	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1b89					_TOKDSearch:
.1b89	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1b8b	84 1f		sty $1f				sty 	zTemp0+1
.1b8d	aa		tax				tax 								; token ID in X.
.1b8e					_TOKDFind:
.1b8e	ca		dex				dex 								; reached the start
.1b8f	10 0d		bpl $1b9e			bpl 	_TOKDFound
.1b91	38		sec				sec 								; go to next entry
.1b92	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b94	65 1e		adc $1e				adc 	zTemp0
.1b96	85 1e		sta $1e				sta 	zTemp0
.1b98	90 f4		bcc $1b8e			bcc 	_TOKDFind
.1b9a	e6 1f		inc $1f				inc 	zTemp0+1
.1b9c	80 f0		bra $1b8e			bra 	_TOKDFind
.1b9e					_TOKDFound:
.1b9e	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1ba0	f0 14		beq $1bb6			beq 	_TOKDExit
.1ba2	aa		tax				tax
.1ba3	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1ba5	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1ba7	20 b7 1b	jsr $1bb7			jsr 	TOKDSpacing
.1baa					_TOKDOutput:
.1baa	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1bac	20 0b 1f	jsr $1f0b			jsr 	TOKToLower
.1baf	20 c6 1a	jsr $1ac6			jsr 	TOKDOutput
.1bb2	c8		iny				iny
.1bb3	ca		dex				dex
.1bb4	d0 f4		bne $1baa			bne 	_TOKDOutput
.1bb6					_TOKDExit:
.1bb6	60		rts				rts
.1bb7					TOKDSpacing:
.1bb7	20 22 1f	jsr $1f22			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1bba	90 0d		bcc $1bc9			bcc 	_TOKDSExit
.1bbc	ad 44 03	lda $0344			lda 	TOKLastCharacter			; and last character also alphanumeric
.1bbf	20 22 1f	jsr $1f22			jsr 	TOKIsIdentifierElement
.1bc2	90 05		bcc $1bc9			bcc 	_TOKDSExit
.1bc4	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1bc6	20 c6 1a	jsr $1ac6			jsr 	TOKDOutput
.1bc9					_TOKDSExit:
.1bc9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1bca					PGMDeleteLine:
.1bca	20 7d 1c	jsr $1c7d			jsr 	PGMEndProgram 				; end of program into zTemp0
.1bcd	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1bcf	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1bd2	85 21		sta $21				sta 	zTemp1+1
.1bd4					_PGMDLoop:
.1bd4	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1bd6	38		sec				sec
.1bd7	f0 3a		beq $1c13			beq 	_PGMDExit
.1bd9	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1bdb	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bdd	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1be0	d0 08		bne $1bea			bne 	_PGMDNext
.1be2	c8		iny				iny
.1be3	b1 20		lda ($20),y			lda 	(zTemp1),y
.1be5	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1be8	f0 0d		beq $1bf7			beq 	_PGMDDelete
.1bea					_PGMDNext:
.1bea	18		clc				clc
.1beb	b2 20		lda ($20)			lda 	(zTemp1)
.1bed	65 20		adc $20				adc 	zTemp1
.1bef	85 20		sta $20				sta 	zTemp1
.1bf1	90 e1		bcc $1bd4			bcc 	_PGMDLoop
.1bf3	e6 21		inc $21				inc 	zTemp1+1
.1bf5	80 dd		bra $1bd4			bra 	_PGMDLoop
.1bf7					_PGMDDelete:
.1bf7	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1bf9	a8		tay				tay
.1bfa					_PGMDCopy:
.1bfa	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1bfc	92 20		sta ($20)			sta 	(zTemp1)
.1bfe	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1c00	c5 1e		cmp $1e				cmp 	zTemp0
.1c02	d0 07		bne $1c0b			bne 	_PGMDNext2
.1c04	a5 21		lda $21				lda 	zTemp1+1
.1c06	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c08	18		clc				clc
.1c09	f0 08		beq $1c13			beq 	_PGMDExit
.1c0b					_PGMDNext2:
.1c0b	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1c0d	d0 eb		bne $1bfa			bne 	_PGMDCopy
.1c0f	e6 21		inc $21				inc 	zTemp1+1
.1c11	80 e7		bra $1bfa			bra 	_PGMDCopy
.1c13					_PGMDExit:
.1c13	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1c14					PGMInsertLine:
.1c14	20 7d 1c	jsr $1c7d			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c17	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c19	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c1c	85 21		sta $21				sta 	zTemp1+1
.1c1e					_PGMILoop:
.1c1e	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c20	f0 1c		beq $1c3e			beq 	_PGMIInsert
.1c22	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c24	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c26	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c29	c8		iny				iny
.1c2a	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c2c	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1c2f	b0 0d		bcs $1c3e			bcs 	_PGMIInsert 				; insert here.
.1c31	18		clc				clc
.1c32	b2 20		lda ($20)			lda 	(zTemp1)
.1c34	65 20		adc $20				adc 	zTemp1
.1c36	85 20		sta $20				sta 	zTemp1
.1c38	90 e4		bcc $1c1e			bcc 	_PGMILoop
.1c3a	e6 21		inc $21				inc 	zTemp1+1
.1c3c	80 e0		bra $1c1e			bra 	_PGMILoop
.1c3e					_PGMIInsert:
.1c3e	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1c41					_PGMIInsertLoop:
.1c41	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c43	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1c45	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1c47	c5 1e		cmp $1e				cmp 	zTemp0
.1c49	d0 06		bne $1c51			bne 	_PGMINext
.1c4b	a5 21		lda $21				lda 	zTemp1+1
.1c4d	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c4f	f0 0a		beq $1c5b			beq 	_PGMIInserted
.1c51					_PGMINext:
.1c51	a5 1e		lda $1e				lda 	zTemp0
.1c53	d0 02		bne $1c57			bne 	_PGMINoBorrow
.1c55	c6 1f		dec $1f				dec 	zTemp0+1
.1c57					_PGMINoBorrow:
.1c57	c6 1e		dec $1e				dec 	zTemp0
.1c59	80 e6		bra $1c41			bra 	_PGMIInsertLoop
.1c5b					_PGMIInserted:
.1c5b	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1c5d					_PGMICopyLoop:
.1c5d	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1c60	91 20		sta ($20),y			sta 	(zTemp1),y
.1c62	c8		iny				iny
.1c63	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1c66	d0 f5		bne $1c5d			bne 	_PGMICopyLoop
.1c68	18		clc				clc
.1c69	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1c6a					PGMSetBaseAddress:
.1c6a	8e 46 03	stx $0346			stx 	PGMBaseHigh
.1c6d	8c 47 03	sty $0347			sty 	PGMEndMemoryHigh
.1c70	60		rts				rts
.1c71					PGMNewProgram:
.1c71	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1c73	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c76	85 1f		sta $1f				sta 	zTemp0+1
.1c78	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1c7a	92 1e		sta ($1e)			sta 	(zTemp0)
.1c7c	60		rts				rts
.1c7d					PGMEndProgram:
.1c7d	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1c7f	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c82	85 1f		sta $1f				sta 	zTemp0+1
.1c84					_PGMEPLoop:
.1c84	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c86	f0 0b		beq $1c93			beq 	_PGMEPExit
.1c88	18		clc				clc
.1c89	65 1e		adc $1e				adc 	zTemp0
.1c8b	85 1e		sta $1e				sta 	zTemp0
.1c8d	90 f5		bcc $1c84			bcc 	_PGMEPLoop
.1c8f	e6 1f		inc $1f				inc 	zTemp0+1
.1c91	80 f1		bra $1c84			bra 	_PGMEPLoop
.1c93					_PGMEPExit:
.1c93	60		rts				rts
.0346					PGMBaseHigh:
>0346							.fill 	1
.0347					PGMEndMemoryHigh:
>0347							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1c94					TOKResetElement:
.1c94	9c 48 03	stz $0348			stz 	TOKElement
.1c97	60		rts				rts
.1c98					TOKWriteElement:
.1c98	da		phx				phx
.1c99	ae 48 03	ldx $0348			ldx 	TOKElement
.1c9c	9d 49 03	sta $0349,x			sta 	TOKElementText,x
.1c9f	9e 4a 03	stz $034a,x			stz 	TOKElementText+1,x
.1ca2	fa		plx				plx
.1ca3	ee 48 03	inc $0348			inc 	TOKElement
.1ca6	60		rts				rts
.0348					TOKElement:
>0348							.fill 	1
.0349					TOKElementText:
>0349							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1ca7					TOKTokeniseConstant:
.1ca7	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1ca9	48		pha				pha 								; save on stack
.1caa	29 c0		and #$c0			and 	#$C0
.1cac	05 0d		ora $0d				ora 	IFR0+IM1
.1cae	05 0e		ora $0e				ora 	IFR0+IM2
.1cb0	f0 10		beq $1cc2			beq 	_TTCLess
.1cb2	da		phx				phx
.1cb3	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1cb5					_TTCShiftRight:
.1cb5	46 0e		lsr $0e				lsr 	IFR0+IM2
.1cb7	66 0d		ror $0d				ror 	IFR0+IM1
.1cb9	66 0c		ror $0c				ror 	IFR0+IM0
.1cbb	ca		dex				dex
.1cbc	d0 f7		bne $1cb5			bne 	_TTCShiftRight
.1cbe	fa		plx				plx
.1cbf	20 a7 1c	jsr $1ca7			jsr 	TOKTokeniseConstant
.1cc2					_TTCLess:
.1cc2	68		pla				pla
.1cc3	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1cc5	20 5e 1d	jsr $1d5e			jsr 	TOKWriteA
.1cc8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1cc9					TOKTokeniseDecimals:
.1cc9	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext 					; consume the .
.1ccc	20 98 1e	jsr $1e98			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1ccf	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1cd1	20 5e 1d	jsr $1d5e			jsr 	TOKWriteA
.1cd4	20 d9 1c	jsr $1cd9			jsr 	TOKOutputElementBuffer 		; then the buffer
.1cd7	18		clc				clc
.1cd8	60		rts				rts
.1cd9					TOKOutputElementBuffer:
.1cd9	ad 48 03	lda $0348			lda 	TOKElement 					; get count and write that
.1cdc	20 5e 1d	jsr $1d5e			jsr 	TOKWriteA
.1cdf	a8		tay				tay 								; put in Y
.1ce0	f0 0c		beq $1cee			beq 	_TOEExit 					; exit if empty which is okay.
.1ce2	a2 01		ldx #$01			ldx 	#1
.1ce4					_TOELoop:
.1ce4	bd 48 03	lda $0348,x			lda 	TOKElement,x
.1ce7	20 5e 1d	jsr $1d5e			jsr 	TOKWriteA
.1cea	e8		inx				inx
.1ceb	88		dey				dey
.1cec	d0 f6		bne $1ce4			bne 	_TOELoop
.1cee					_TOEExit:
.1cee	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1cef					TOKTokenise:
.1cef	8c 49 04	sty $0449			sty 	TOKDataSource+1 			; save source routine pointer
.1cf2	8e 48 04	stx $0448			stx 	TOKDataSource
.1cf5	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1cf7	8d 4a 04	sta $044a			sta 	TOKIsFirstElement
.1cfa	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1cfc	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1cff					_TOKMainLoop:
.1cff	20 6a 1d	jsr $1d6a			jsr 	TOKGet 						; what follows.
.1d02	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1d04	f0 4f		beq $1d55			beq 	_TOKExit
.1d06	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1d08	d0 05		bne $1d0f			bne 	_TOKElement
.1d0a	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext
.1d0d	80 f0		bra $1cff			bra 	_TOKMainLoop
.1d0f					_TOKElement:
.1d0f	20 16 1f	jsr $1f16			jsr 	TOKIsDigit 					; is it 0..9
.1d12	90 0a		bcc $1d1e			bcc 	_TOKNotDigit
.1d14	20 6f 1e	jsr $1e6f			jsr 	TOKTokeniseInteger 			; get integer
.1d17	b0 43		bcs $1d5c			bcs 	_TOKFail 					; did it fail ?
.1d19	9c 4a 04	stz $044a			stz 	TOKIsFirstElement 			; clear first element flag
.1d1c	80 e1		bra $1cff			bra 	_TOKMainLoop
.1d1e					_TOKNotDigit:
.1d1e	9c 4a 04	stz $044a			stz 	TOKIsFirstElement 			; clear first element flag
.1d21	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d23	d0 07		bne $1d2c			bne 	_TOKNotHex
.1d25	20 b7 1d	jsr $1db7			jsr 	TOKTokeniseHexadecimal
.1d28	b0 32		bcs $1d5c			bcs 	_TOKFail
.1d2a	80 d3		bra $1cff			bra 	_TOKMainLoop
.1d2c					_TOKNotHex:
.1d2c	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1d2e	d0 07		bne $1d37			bne 	_TOKNotDecimal
.1d30	20 c9 1c	jsr $1cc9			jsr 	TOKTokeniseDecimals
.1d33	b0 27		bcs $1d5c			bcs 	_TOKFail
.1d35	80 c8		bra $1cff			bra 	_TOKMainLoop
.1d37					_TOKNotDecimal:
.1d37	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1d39	d0 07		bne $1d42			bne 	_TOKNotString
.1d3b	20 dd 1e	jsr $1edd			jsr 	TOKTokeniseString
.1d3e	b0 1c		bcs $1d5c			bcs 	_TOKFail
.1d40	80 bd		bra $1cff			bra 	_TOKMainLoop
.1d42					_TOKNotString:
.1d42	20 33 1f	jsr $1f33			jsr 	TOKIsAlpha 					; identifier ?
.1d45	b0 07		bcs $1d4e			bcs 	_TOKIdentifier
.1d47	20 ac 1e	jsr $1eac			jsr 	TOKTokenisePunctuation 		; punctuation
.1d4a	b0 10		bcs $1d5c			bcs 	_TOKFail
.1d4c	80 b1		bra $1cff			bra 	_TOKMainLoop
.1d4e					_TOKIdentifier:
.1d4e	20 f1 1d	jsr $1df1			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1d51	b0 09		bcs $1d5c			bcs 	_TOKFail
.1d53	80 aa		bra $1cff			bra 	_TOKMainLoop
.1d55					_TOKExit:
.1d55	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1d57	20 5e 1d	jsr $1d5e			jsr 	TOKWriteA
.1d5a	18		clc				clc									; return with carry set.
.1d5b	60		rts				rts
.1d5c					_TOKFail:
.1d5c	38		sec				sec
.1d5d	60		rts				rts
.1d5e					TOKWriteA:
.1d5e	da		phx				phx
.1d5f	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1d62	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1d65	fa		plx				plx
.1d66	ee 37 02	inc $0237			inc 	TOKLineSize
.1d69	60		rts				rts
.1d6a					TOKGet:
.1d6a	18		clc				clc
.1d6b	6c 48 04	jmp ($0448)			jmp 	(TOKDataSource)
.1d6e					TOKGetNext:
.1d6e	38		sec				sec
.1d6f	6c 48 04	jmp ($0448)			jmp 	(TOKDataSource)
.0448					TOKDataSource:
>0448							.fill 	2
.044a					TOKIsFirstElement:
>044a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1d72					TOKFindToken:
.1d72	a2 eb		ldx #$eb			ldx 	#StandardTokens & $FF 		; do this table
.1d74	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1d76	20 81 1d	jsr $1d81			jsr 	TOKFindTokenXY 				; find it, or not
.1d79	90 04		bcc $1d7f			bcc 	_TOKFTFail
.1d7b	a2 00		ldx #$00			ldx 	#0
.1d7d	38		sec				sec
.1d7e	60		rts				rts
.1d7f					_TOKFTFail
.1d7f	18		clc				clc
.1d80	60		rts				rts
.1d81					TOKFindTokenXY:
.1d81	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1d83	84 1f		sty $1f				sty 	zTemp0+1
.1d85	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1d87	8d 4b 04	sta $044b			sta 	TOKCurrent
.1d8a					_TOKFindLoop:
.1d8a	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1d8c	18		clc				clc 		 						; clear carry in case of fail
.1d8d	30 17		bmi $1da6			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1d8f	cd 48 03	cmp $0348			cmp 	TOKElement 					; compare against the element length
.1d92	d0 13		bne $1da7			bne 	_TOKNext 					; different, try next.
.1d94	aa		tax				tax 								; number of chars to compare.
.1d95	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1d97					_TOKCompare:
.1d97	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1d99	d9 48 03	cmp $0348,y			cmp 	TOKElementText-1,y
.1d9c	d0 09		bne $1da7			bne 	_TOKNext 					; different ? try next
.1d9e	c8		iny				iny 								; compare next two
.1d9f	ca		dex				dex
.1da0	d0 f5		bne $1d97			bne 	_TOKCompare 				; until done X characters.
.1da2	38		sec				sec
.1da3	ad 4b 04	lda $044b			lda 	TOKCurrent 					; return current ID.
.1da6					_TOKExit:
.1da6	60		rts				rts
.1da7					_TOKNext:
.1da7	ee 4b 04	inc $044b			inc 	TOKCurrent 					; increment token #
.1daa	38		sec				sec 								; add length+1 to ptr
.1dab	b2 1e		lda ($1e)			lda 	(zTemp0)
.1dad	65 1e		adc $1e				adc 	zTemp0
.1daf	85 1e		sta $1e				sta 	zTemp0
.1db1	90 d7		bcc $1d8a			bcc 	_TOKFindLoop
.1db3	e6 1f		inc $1f				inc 	zTemp0+1
.1db5	80 d3		bra $1d8a			bra 	_TOKFindLoop
.044b					TOKCurrent:
>044b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1db7					TOKTokeniseHexadecimal:
.1db7	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext 					; consume the $
.1dba	a2 0c		ldx #$0c			ldx 	#IFR0
.1dbc	20 70 2b	jsr $2b70			jsr 	IFloatSetZero 				; set R0 = 0
.1dbf					_TTHLoop:
.1dbf	20 6a 1d	jsr $1d6a			jsr 	TOKGet 						; keep getting and copying while numeric.
.1dc2	20 40 1f	jsr $1f40			jsr 	TOKIsHexadecimal
.1dc5	90 20		bcc $1de7			bcc 	_TTHDone
.1dc7	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1dc9	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1dcc	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1dcf	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1dd2	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.1dd5	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext
.1dd8	38		sec				sec 								; convert to decimal.
.1dd9	e9 30		sbc #$30			sbc 	#48
.1ddb	c9 0a		cmp #$0a			cmp 	#10
.1ddd	90 02		bcc $1de1			bcc 	_TTHNotAlpha
.1ddf	e9 07		sbc #$07			sbc 	#7
.1de1					_TTHNotAlpha:
.1de1	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1de3	85 0c		sta $0c				sta 	IFR0+IM0
.1de5	80 d8		bra $1dbf			bra 	_TTHLoop
.1de7					_TTHDone:
.1de7	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1de9	20 5e 1d	jsr $1d5e			jsr 	TOKWriteA
.1dec	20 a7 1c	jsr $1ca7			jsr 	TOKTokeniseConstant 		; write integer out.
.1def	18		clc				clc
.1df0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1df1					TOKTokeniseIdentifier:
.1df1	20 94 1c	jsr $1c94			jsr 	TOKResetElement 			; extract an identifier
.1df4					_TOKGetIdentifier:
.1df4	20 6a 1d	jsr $1d6a			jsr 	TOKGet
.1df7	20 00 1f	jsr $1f00			jsr 	TOKToUpper
.1dfa	20 22 1f	jsr $1f22			jsr 	TOKIsIdentifierElement
.1dfd	90 08		bcc $1e07			bcc 	_TOKEndIdent
.1dff	20 98 1c	jsr $1c98			jsr		TOKWriteElement
.1e02	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext
.1e05	80 ed		bra $1df4			bra 	_TOKGetIdentifier
.1e07					_TOKEndIdent:
.1e07	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1e09	d0 06		bne $1e11			bne 	_TOKNotString
.1e0b	20 98 1c	jsr $1c98			jsr 	TOKWriteElement 			; add it
.1e0e	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext 					; consume it
.1e11					_TOKNotString:
.1e11	20 6a 1d	jsr $1d6a			jsr 	TOKGet 						; finally check for (
.1e14	c9 28		cmp #$28			cmp 	#"("
.1e16	d0 06		bne $1e1e			bne 	_TOKNoArray
.1e18	20 98 1c	jsr $1c98			jsr 	TOKWriteElement 			; add it
.1e1b	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext 					; consume it
.1e1e					_TOKNoArray:
.1e1e	20 72 1d	jsr $1d72			jsr 	TOKFindToken 				; find it
.1e21	90 05		bcc $1e28			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e23	20 5e 1d	jsr $1d5e			jsr 	TOKWriteA
.1e26	18		clc				clc
.1e27	60		rts				rts
.1e28					_TOKIsVariable:
.1e28	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1e2a					_TOKOutputBuffer:
.1e2a	bd 49 03	lda $0349,x			lda 	TOKElementText,x 			; output it translated.
.1e2d	20 56 1e	jsr $1e56			jsr 	TOKTranslateIdentifier
.1e30	20 5e 1d	jsr $1d5e			jsr 	TOKWriteA
.1e33	e8		inx				inx
.1e34	bd 49 03	lda $0349,x			lda 	TOKElementText,x
.1e37	20 22 1f	jsr $1f22			jsr 	TOKIsIdentifierElement
.1e3a	b0 ee		bcs $1e2a			bcs 	_TOKOutputBuffer
.1e3c	a8		tay				tay 								; last char in Y
.1e3d	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1e3f	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1e41	f0 0e		beq $1e51			beq 	_TOKIVExit
.1e43	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1e45	d0 04		bne $1e4b			bne 	_TOKIVCheckArray 			; no, check for (
.1e47	1a		inc a				inc 	a 							; token is $7D
.1e48	bc 4a 03	ldy $034a,x			ldy 	TOKElementText+1,x 			; get next one.
.1e4b					_TOKIVCheckArray:
.1e4b	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1e4d	d0 02		bne $1e51			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1e4f	1a		inc a				inc 	a
.1e50	1a		inc a				inc 	a
.1e51					_TOKIVExit:
.1e51	20 5e 1d	jsr $1d5e			jsr 	TOKWriteA 					; ending token
.1e54	18		clc				clc
.1e55	60		rts				rts
.1e56					TOKTranslateIdentifier:
.1e56	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1e58	f0 0f		beq $1e69			beq 	_TTI64
.1e5a	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1e5c	f0 0e		beq $1e6c			beq 	_TTI65
.1e5e	38		sec				sec
.1e5f	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1e61	10 03		bpl $1e66			bpl 	_TTIExit
.1e63	18		clc				clc 								; map 09 onto 26-35
.1e64	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1e66					_TTIExit:
.1e66	09 40		ora #$40			ora 	#$40 						; correct range.
.1e68	60		rts				rts
.1e69	a9 64		lda #$64	_TTI64:	lda 	#$64
.1e6b	60		rts				rts
.1e6c	a9 65		lda #$65	_TTI65:	lda 	#$65
.1e6e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1e6f					TOKTokeniseInteger:
.1e6f	20 98 1e	jsr $1e98			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e72	a2 49		ldx #$49			ldx 	#TOKElementText & $FF
.1e74	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1e76	ad 48 03	lda $0348			lda		TOKElement
.1e79	20 d4 29	jsr $29d4			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1e7c	ad 4a 04	lda $044a			lda 	TOKIsFirstElement 			; first element ?
.1e7f	f0 12		beq $1e93			beq 	_TOKNotLineNumber
.1e81	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1e83	d0 0c		bne $1e91			bne 	_TOKBadLineNumeber
.1e85	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1e87	8d 38 02	sta $0238			sta 	TOKLineNumber
.1e8a	a5 0d		lda $0d				lda 	IFR0+IM1
.1e8c	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1e8f	18		clc				clc
.1e90	60		rts				rts
.1e91					_TOKBadLineNumeber:
.1e91	38		sec				sec
.1e92	60		rts				rts
.1e93					_TOKNotLineNumber:
.1e93	20 a7 1c	jsr $1ca7			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1e96	18		clc				clc
.1e97	60		rts				rts
.1e98					TOKExtractInteger:
.1e98	20 94 1c	jsr $1c94			jsr 	TOKResetElement 			; restart
.1e9b					_TTILoop:
.1e9b	20 6a 1d	jsr $1d6a			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e9e	20 16 1f	jsr $1f16			jsr 	TOKIsDigit
.1ea1	90 08		bcc $1eab			bcc 	_TOKEIExit
.1ea3	20 98 1c	jsr $1c98			jsr 	TOKWriteElement
.1ea6	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext
.1ea9	80 f0		bra $1e9b			bra 	_TTILoop
.1eab					_TOKEIExit:
.1eab	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1eac					TOKTokenisePunctuation:
.1eac	20 94 1c	jsr $1c94			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1eaf	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext
.1eb2	20 98 1c	jsr $1c98			jsr 	TOKWriteElement
.1eb5	20 6a 1d	jsr $1d6a			jsr 	TOKGet 						; what follows ?
.1eb8	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1eba	f0 10		beq $1ecc			beq 	_TTPOne
.1ebc	20 2a 1f	jsr $1f2a			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1ebf	b0 0b		bcs $1ecc			bcs 	_TTPOne 					; these speed things up a bit.
.1ec1	20 98 1c	jsr $1c98			jsr 	TOKWriteElement 			; this is what we will search for.
.1ec4	20 72 1d	jsr $1d72			jsr 	TOKFindToken
.1ec7	b0 0a		bcs $1ed3			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1ec9	ce 48 03	dec $0348			dec 	TOKElement 					; make it a single character
.1ecc					_TTPOne:
.1ecc	20 72 1d	jsr $1d72			jsr 	TOKFindToken 				; look for one character punctuation
.1ecf	b0 07		bcs $1ed8			bcs 	_TTPOutputExit 				; we found it
.1ed1	38		sec				sec 								; not recognised.
.1ed2	60		rts				rts
.1ed3					_TTPConsumeExit:
.1ed3	48		pha				pha
.1ed4	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext 					; get the 2nd char out.
.1ed7	68		pla				pla
.1ed8					_TTPOutputExit:
.1ed8	20 5e 1d	jsr $1d5e			jsr  	TOKWriteA 					; write token out
.1edb	18		clc				clc
.1edc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1edd					TOKTokeniseString:
.1edd	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext 					; consume the "
.1ee0	20 94 1c	jsr $1c94			jsr 	TOKResetElement 			; start getting the string
.1ee3					_TOKTSLoop:
.1ee3	20 6a 1d	jsr $1d6a			jsr 	TOKGet 						; check EOL
.1ee6	c9 00		cmp #$00			cmp 	#0
.1ee8	f0 0c		beq $1ef6			beq 	_TOKTSExit
.1eea	20 6e 1d	jsr $1d6e			jsr 	TOKGetNext 					; get and consume
.1eed	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1eef	f0 05		beq $1ef6			beq 	_TOKTSExit
.1ef1	20 98 1c	jsr $1c98			jsr 	TOKWriteElement
.1ef4	80 ed		bra $1ee3			bra 	_TOKTSLoop
.1ef6					_TOKTSExit:
.1ef6	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1ef8	20 5e 1d	jsr $1d5e			jsr 	TOKWriteA
.1efb	20 d9 1c	jsr $1cd9			jsr 	TOKOutputElementBuffer
.1efe	18		clc				clc
.1eff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1f00					TOKToUpper:
.1f00	c9 61		cmp #$61			cmp 	#"a"
.1f02	90 06		bcc $1f0a			bcc 	_TTUNotLower
.1f04	c9 7b		cmp #$7b			cmp 	#"z"+1
.1f06	b0 02		bcs $1f0a			bcs 	_TTUNotLower
.1f08	49 20		eor #$20			eor 	#$20
.1f0a					_TTUNotLower:
.1f0a	60		rts				rts
.1f0b					TOKToLower:
.1f0b	c9 41		cmp #$41			cmp 	#"A"
.1f0d	90 06		bcc $1f15			bcc 	_TTUNotUpper
.1f0f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f11	b0 02		bcs $1f15			bcs 	_TTUNotUpper
.1f13	49 20		eor #$20			eor 	#$20
.1f15					_TTUNotUpper:
.1f15	60		rts				rts
.1f16					TOKIsDigit:
.1f16	c9 30		cmp #$30			cmp 	#"0"
.1f18	90 06		bcc $1f20			bcc 	TOKFail
.1f1a	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f1c	b0 02		bcs $1f20			bcs 	TOKFail
.1f1e					TOKSucceed:
.1f1e	38		sec				sec
.1f1f	60		rts				rts
.1f20					TOKFail:
.1f20	18		clc				clc
.1f21	60		rts				rts
.1f22					TOKIsIdentifierElement:
.1f22	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f24	f0 f8		beq $1f1e			beq 	TOKSucceed
.1f26	c9 5f		cmp #$5f			cmp 	#"_"
.1f28	f0 f4		beq $1f1e			beq 	TOKSucceed 					; else fall through to alphanumeric
.1f2a					TOKIsAlphaNumeric:
.1f2a	20 33 1f	jsr $1f33			jsr 	TOKIsAlpha
.1f2d	b0 ef		bcs $1f1e			bcs 	TOKSucceed
.1f2f	20 16 1f	jsr $1f16			jsr 	TOKIsDigit
.1f32	60		rts				rts
.1f33					TOKIsAlpha:
.1f33	20 00 1f	jsr $1f00			jsr 	TOKToUpper
.1f36	c9 41		cmp #$41			cmp 	#"A"
.1f38	90 e6		bcc $1f20			bcc 	TOKFail
.1f3a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f3c	b0 e2		bcs $1f20			bcs 	TOKFail
.1f3e	80 de		bra $1f1e			bra 	TOKSucceed
.1f40					TOKIsHexadecimal:
.1f40	20 16 1f	jsr $1f16			jsr		TOKIsDigit
.1f43	b0 d9		bcs $1f1e			bcs 	TOKSucceed
.1f45	20 33 1f	jsr $1f33			jsr 	TOKIsAlpha
.1f48	90 d6		bcc $1f20			bcc 	TOKFail
.1f4a	c9 47		cmp #$47			cmp 	#"F"+1
.1f4c	b0 d2		bcs $1f20			bcs 	TOKFail
.1f4e	80 ce		bra $1f1e			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.1f50					Command_DO:
.1f50	a9 22		lda #$22			lda 	#STK_DO
.1f52	20 88 22	jsr $2288			jsr 	StackOpen
.1f55	20 bc 22	jsr $22bc			jsr 	STKSaveCodePosition 		; save loop position
.1f58	60		rts				rts
.1f59					Command_EXIT:
.1f59	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.1f5b	20 b4 22	jsr $22b4			jsr 	StackCheckFrame
.1f5e	20 a6 22	jsr $22a6			jsr 	StackClose 					; close it
.1f61	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.1f63	aa		tax				tax
.1f64	20 9c 20	jsr $209c			jsr 	ScanForward
.1f67	60		rts				rts
.1f68					Command_LOOP:
.1f68	a9 22		lda #$22			lda 	#STK_DO
.1f6a	20 b4 22	jsr $22b4			jsr 	StackCheckFrame
.1f6d	20 ce 22	jsr $22ce			jsr 	STKLoadCodePosition 		; loop back
.1f70	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.1f71					Command_FOR:
.1f71	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.1f73	20 88 22	jsr $2288			jsr 	StackOpen
.1f76	20 e9 11	jsr $11e9			jsr 	CommandLET 					; do "I = 1" bit
.1f79	5a		phy				phy 								; save variable address to +4,+5
.1f7a	a0 04		ldy #$04			ldy 	#4
.1f7c	a5 1e		lda $1e				lda 	zTemp0
.1f7e	91 26		sta ($26),y			sta 	(basicStack),y
.1f80	c8		iny				iny
.1f81	a5 1f		lda $1f				lda 	zTemp0+1
.1f83	91 26		sta ($26),y			sta 	(basicStack),y
.1f85	7a		ply				ply
.1f86	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.1f88	20 7f 22	jsr $227f			jsr 	ERRCheckA
.1f8b	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.1f8e	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.1f90	a2 0c		ldx #$0c			ldx 	#IFR0
.1f92	20 ca 1f	jsr $1fca			jsr 	CFSaveR0X
.1f95	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; STEP here ?
.1f97	c9 91		cmp #$91			cmp 	#PR_STEP
.1f99	d0 06		bne $1fa1			bne 	_CFStep1
.1f9b	c8		iny				iny 								; consume step
.1f9c	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; evaluate STEP
.1f9f	80 07		bra $1fa8			bra 	_CFWriteStep
.1fa1					_CFStep1:
.1fa1	a2 0c		ldx #$0c			ldx 	#IFR0 						; default R0, 1
.1fa3	a9 01		lda #$01			lda 	#1
.1fa5	20 72 2b	jsr $2b72			jsr 	IFloatSetByte
.1fa8					_CFWriteStep:
.1fa8	a2 0c		ldx #$0c			ldx 	#IFR0 						; Write to additive.
.1faa	a9 06		lda #$06			lda 	#6
.1fac	20 ca 1f	jsr $1fca			jsr 	CFSaveR0X
.1faf	20 bc 22	jsr $22bc			jsr 	STKSaveCodePosition 		; save loop position
.1fb2	60		rts				rts
.1fb3					CFLoadR0X:
.1fb3	5a		phy				phy
.1fb4	a8		tay				tay
.1fb5	b1 26		lda ($26),y			lda 	(basicStack),y
.1fb7	95 00		sta $00,x			sta 	IM0,x
.1fb9	c8		iny				iny
.1fba	b1 26		lda ($26),y			lda 	(basicStack),y
.1fbc	95 01		sta $01,x			sta 	IM1,x
.1fbe	c8		iny				iny
.1fbf	b1 26		lda ($26),y			lda 	(basicStack),y
.1fc1	95 02		sta $02,x			sta 	IM2,x
.1fc3	c8		iny				iny
.1fc4	b1 26		lda ($26),y			lda 	(basicStack),y
.1fc6	95 03		sta $03,x			sta 	IExp,x
.1fc8	7a		ply				ply
.1fc9	60		rts				rts
.1fca					CFSaveR0X:
.1fca	5a		phy				phy
.1fcb	a8		tay				tay
.1fcc	b5 00		lda $00,x			lda 	IM0,x
.1fce	91 26		sta ($26),y			sta 	(basicStack),y
.1fd0	c8		iny				iny
.1fd1	b5 01		lda $01,x			lda 	IM1,x
.1fd3	91 26		sta ($26),y			sta 	(basicStack),y
.1fd5	c8		iny				iny
.1fd6	b5 02		lda $02,x			lda 	IM2,x
.1fd8	91 26		sta ($26),y			sta 	(basicStack),y
.1fda	c8		iny				iny
.1fdb	b5 03		lda $03,x			lda 	IExp,x
.1fdd	91 26		sta ($26),y			sta 	(basicStack),y
.1fdf	7a		ply				ply
.1fe0	60		rts				rts
.1fe1					Command_NEXT:
.1fe1	a9 37		lda #$37			lda 	#STK_FOR
.1fe3	20 b4 22	jsr $22b4			jsr 	StackCheckFrame
.1fe6	20 1b 20	jsr $201b			jsr 	_CNLoadValue 				; load index value to R0.
.1fe9	a2 10		ldx #$10			ldx 	#IFR1 						; load adding value to R1.
.1feb	a9 06		lda #$06			lda 	#6
.1fed	20 b3 1f	jsr $1fb3			jsr 	CFLoadR0X
.1ff0	20 66 25	jsr $2566			jsr 	IFloatAdd 					; add them together and write back.
.1ff3	20 3e 20	jsr $203e			jsr 	_CNSaveValue
.1ff6	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.1ff8	a2 10		ldx #$10			ldx 	#IFR1
.1ffa	20 b3 1f	jsr $1fb3			jsr 	CFLoadR0X
.1ffd	20 3e 28	jsr $283e			jsr 	IFloatCompare 				; compare terminal vs current
.2000	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2002	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero
.2005	f0 10		beq $2017			beq 	_CNLoopBack
.2007	a5 0f		lda $0f				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2009	5a		phy				phy
.200a	a0 09		ldy #$09			ldy 	#6+IExp
.200c	51 26		eor ($26),y			eor 	(basicStack),y
.200e	7a		ply				ply
.200f	29 40		and #$40			and 	#IFSign
.2011	f0 04		beq $2017			beq 	_CNLoopBack
.2013	20 a6 22	jsr $22a6			jsr 	StackClose		 			; return
.2016	60		rts				rts
.2017					_CNLoopBack:
.2017	20 ce 22	jsr $22ce			jsr 	STKLoadCodePosition 		; loop back
.201a	60		rts				rts
.201b					_CNLoadValue:
.201b	5a		phy				phy
.201c	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.201e	b1 26		lda ($26),y			lda 	(basicStack),y
.2020	85 22		sta $22				sta 	zTemp2
.2022	c8		iny				iny
.2023	b1 26		lda ($26),y			lda 	(basicStack),y
.2025	85 23		sta $23				sta 	zTemp2+1
.2027	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2029	b1 22		lda ($22),y			lda 	(zTemp2),y
.202b	85 0c		sta $0c				sta 	IFR0+IM0
.202d	c8		iny				iny
.202e	b1 22		lda ($22),y			lda 	(zTemp2),y
.2030	85 0d		sta $0d				sta 	IFR0+IM1
.2032	c8		iny				iny
.2033	b1 22		lda ($22),y			lda 	(zTemp2),y
.2035	85 0e		sta $0e				sta 	IFR0+IM2
.2037	c8		iny				iny
.2038	b1 22		lda ($22),y			lda 	(zTemp2),y
.203a	85 0f		sta $0f				sta 	IFR0+IExp
.203c	7a		ply				ply
.203d	60		rts				rts
.203e					_CNSaveValue:
.203e	5a		phy				phy
.203f	a0 00		ldy #$00			ldy 	#0
.2041	a5 0c		lda $0c				lda 	IFR0+IM0
.2043	91 22		sta ($22),y			sta 	(zTemp2),y
.2045	c8		iny				iny
.2046	a5 0d		lda $0d				lda 	IFR0+IM1
.2048	91 22		sta ($22),y			sta 	(zTemp2),y
.204a	c8		iny				iny
.204b	a5 0e		lda $0e				lda 	IFR0+IM2
.204d	91 22		sta ($22),y			sta 	(zTemp2),y
.204f	c8		iny				iny
.2050	a5 0f		lda $0f				lda 	IFR0+IExp
.2052	91 22		sta ($22),y			sta 	(zTemp2),y
.2054	7a		ply				ply
.2055	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2056					IfCommand:
.2056	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; Get the if test.
.2059	b1 1c		lda ($1c),y			lda 	(codePtr),y					; what follows ?
.205b	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.205d	d0 0a		bne $2069			bne 	_IfStructured 				; we still support it.
.205f	c8		iny				iny 								; consume THEN
.2060	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero 			; is it zero
.2063	f0 01		beq $2066			beq 	_IfFail 					; if fail, go to next line
.2065	60		rts				rts 								; if THEN just continue
.2066					_IfFail:
.2066	4c 83 12	jmp $1283			jmp 	RUNEndOfLine
.2069					_IfStructured:
.2069	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero 			; is it zero
.206c	d0 07		bne $2075			bne 	_IfExit 					; if not, then continue normally.
.206e	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2070	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2072	20 9c 20	jsr $209c			jsr 	ScanForward 				; and run from there
.2075					_IfExit:
.2075	60		rts				rts
.2076					ElseCode:
.2076	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2078	aa		tax				tax 								; so just go to the structure exit
.2079	20 9c 20	jsr $209c			jsr 	ScanForward
.207c	60		rts				rts
.207d					EndIf:
.207d	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.207e					Command_REPEAT:
.207e	a9 02		lda #$02			lda 	#STK_REPEAT
.2080	20 88 22	jsr $2288			jsr 	StackOpen
.2083	20 bc 22	jsr $22bc			jsr 	STKSaveCodePosition 		; save loop position
.2086	60		rts				rts
.2087					Command_UNTIL:
.2087	a9 02		lda #$02			lda 	#STK_REPEAT
.2089	20 b4 22	jsr $22b4			jsr 	StackCheckFrame
.208c	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; work out the test
.208f	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero 			; check if zero
.2092	f0 04		beq $2098			beq 	_CULoopBack 				; if so keep looping
.2094	20 a6 22	jsr $22a6			jsr 	StackClose		 			; return
.2097	60		rts				rts
.2098					_CULoopBack:
.2098	20 ce 22	jsr $22ce			jsr 	STKLoadCodePosition 		; loop back
.209b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scan.asm

.209c					ScanForward:
.209c	85 1e		sta $1e				sta 	zTemp0 						; save scan options in zTemp0
.209e	86 1f		stx $1f				stx 	zTemp0+1
.20a0	64 20		stz $20				stz 	zTemp1 						; clear structure count.
.20a2					_ScanForwardLoop:
.20a2	a5 20		lda $20				lda 	zTemp1 						; if structure count non zero, don't check for end.
.20a4	d0 0a		bne $20b0			bne 	_ScanNoCheck
.20a6	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; reached either target token.
.20a8	c5 1e		cmp $1e				cmp 	zTemp0
.20aa	f0 49		beq $20f5			beq 	_ScanExit
.20ac	c5 1f		cmp $1f				cmp 	zTemp0+1
.20ae	f0 45		beq $20f5			beq 	_ScanExit
.20b0					_ScanNoCheck:
.20b0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get the token and consume it.
.20b2	c8		iny				iny
.20b3	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.20b5	f0 37		beq $20ee			beq		_ScanDataItem
.20b7	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.20b9	f0 33		beq $20ee			beq 	_ScanDataItem
.20bb	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.20bd	f0 1b		beq $20da			beq 	_ScanNextLine
.20bf	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.20c1	d0 01		bne $20c4			bne 	_ScanNoShift
.20c3	c8		iny				iny
.20c4					_ScanNoShift:
.20c4	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.20c6	b0 da		bcs $20a2			bcs 	_ScanForwardLoop
.20c8	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.20ca	90 d6		bcc $20a2			bcc 	_ScanForwardLoop
.20cc	aa		tax				tax 								; access the table to get the adjustment.
.20cd	18		clc				clc
.20ce	a5 20		lda $20				lda 	zTemp1 						; add it to structure count.
.20d0	7d 5f 17	adc $175f,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.20d3	85 20		sta $20				sta 	zTemp1
.20d5	10 cb		bpl $20a2			bpl		_ScanForwardLoop 			; error if -ve ?
.20d7	4c a6 21	jmp $21a6		jmp	ErrorV_structure
.20da					_ScanNextLine:
.20da	18		clc				clc	 								; forward to next line.
.20db	b2 1c		lda ($1c)			lda 	(codePtr)
.20dd	65 1c		adc $1c				adc 	codePtr
.20df	85 1c		sta $1c				sta 	codePtr
.20e1	90 02		bcc $20e5			bcc 	_ScanNoCarry
.20e3	e6 1d		inc $1d				inc 	codePtr+1
.20e5					_ScanNoCarry:
.20e5	a0 03		ldy #$03			ldy 	#3
.20e7	b2 1c		lda ($1c)			lda 	(codePtr) 					; off end of program ?
.20e9	d0 b7		bne $20a2			bne 	_ScanForwardLoop
.20eb	4c a6 21	jmp $21a6		jmp	ErrorV_structure
.20ee					_ScanDataItem:
.20ee	98		tya				tya
.20ef	38		sec				sec
.20f0	71 1c		adc ($1c),y			adc 	(codePtr),y
.20f2	a8		tay				tay
.20f3	80 ad		bra $20a2			bra 	_ScanForwardLoop
.20f5					_ScanExit:
.20f5	c8		iny				iny 								; consume final token.
.20f6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.20f7					Command_WHILE:
.20f7	5a		phy				phy 								; save position of the test
.20f8	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; work out the while test.
.20fb	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero 			; check if zero
.20fe	f0 0e		beq $210e			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2100	98		tya				tya 								; position *after* test.
.2101	7a		ply				ply 								; restore position before test, at WHILE
.2102	88		dey				dey 								; so we execute the WHILE command again.
.2103	48		pha				pha 								; push after test on the stack
.2104	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2106	20 88 22	jsr $2288			jsr 	StackOpen
.2109	20 bc 22	jsr $22bc			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.210c	7a		ply				ply 								; restore the position *after* the test
.210d	60		rts				rts
.210e					_WHExitLoop:
.210e	68		pla				pla 								; throw post loop position
.210f	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2111	aa		tax				tax
.2112	20 9c 20	jsr $209c			jsr 	ScanForward
.2115	60		rts				rts
.2116					Command_WEND:
.2116	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2118	20 b4 22	jsr $22b4			jsr 	StackCheckFrame
.211b	20 ce 22	jsr $22ce			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.211e	20 a6 22	jsr $22a6			jsr 	StackClose		 			; erase the frame
.2121	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2122					ErrorV_syntax:
.2122	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2125	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>212d	72 72 6f 72 00
.2132					ErrorV_range:
.2132	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2135	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>213d	61 6e 67 65 00
.2142					ErrorV_value:
.2142	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2145	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>214d	65 00
.214f					ErrorV_type:
.214f	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2152	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>215a	6d 61 74 63 68 00
.2160					ErrorV_unimplemented:
.2160	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2163	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>216b	65 6d 65 6e 74 65 64 00
.2173					ErrorV_assert:
.2173	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2176	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>217e	61 69 6c 00
.2182					ErrorV_internal:
.2182	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2185	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>218d	20 45 72 72 6f 72 00
.2194					ErrorV_divzero:
.2194	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2197	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>219f	79 20 5a 65 72 6f 00
.21a6					ErrorV_structure:
.21a6	20 52 2c	jsr $2c52		jsr	ErrorHandler
>21a9	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>21b1	65 20 49 6d 62 61 6c 61 6e 63 65 00
.21bd					ErrorV_stop:
.21bd	20 52 2c	jsr $2c52		jsr	ErrorHandler
>21c0	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>21c8	53 74 6f 70 70 65 64 00
.21d0					ErrorV_data:
.21d0	20 52 2c	jsr $2c52		jsr	ErrorHandler
>21d3	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>21db	61 74 61 00
.21df					ErrorV_redefine:
.21df	20 52 2c	jsr $2c52		jsr	ErrorHandler
>21e2	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>21ea	64 65 66 69 6e 65 64 00
.21f2					ErrorV_index:
.21f2	20 52 2c	jsr $2c52		jsr	ErrorHandler
>21f5	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>21fd	79 20 49 6e 64 65 78 00
.2205					ErrorV_memory:
.2205	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2208	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>2210	65 6d 6f 72 79 00
.2216					ErrorV_uninitialised:
.2216	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2219	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>2221	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2230					ErrorV_string:
.2230	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2233	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>223b	6e 67 20 4c 65 6e 67 74 68 00
.2245					ErrorV_variable:
.2245	20 52 2c	jsr $2c52		jsr	ErrorHandler
>2248	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>2250	20 4d 69 73 73 69 6e 67 00
.2259					ErrorV_stack:
.2259	20 52 2c	jsr $2c52		jsr	ErrorHandler
>225c	53 74 61 63 6b 20 46 75			.text	"Stack Full",0
>2264	6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2267					ERRCheckLParen:
.2267	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2269	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.226b	d0 18		bne $2285			bne 	ERRSyntaxError
.226d	c8		iny				iny
.226e	60		rts				rts
.226f					ERRCheckRParen:
.226f	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2271	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2273	d0 10		bne $2285			bne 	ERRSyntaxError
.2275	c8		iny				iny
.2276	60		rts				rts
.2277					ERRCheckComma:
.2277	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2279	c9 99		cmp #$99			cmp 	#PR_COMMA
.227b	d0 08		bne $2285			bne 	ERRSyntaxError
.227d	c8		iny				iny
.227e	60		rts				rts
.227f					ERRCheckA:
.227f	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.2281	d0 02		bne $2285			bne 	ERRSyntaxError
.2283	c8		iny				iny
.2284	60		rts				rts
.2285					ERRSyntaxError:
.2285	4c 22 21	jmp $2122		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2288					StackOpen:
.2288	48		pha				pha 								; save frame byte
.2289	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.228b	0a		asl a				asl 	a 							; claim twice this for storage
.228c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.228e	38		sec				sec 								; so basically subtracting from
.228f	65 26		adc $26				adc 	basicStack 	 				; basicStack
.2291	85 26		sta $26				sta 	basicStack
.2293	b0 0a		bcs $229f			bcs 	_SONoBorrow
>2295	db						.byte 	$DB
.2296	c6 27		dec $27				dec 	basicStack+1
.2298	a5 27		lda $27				lda 	basicStack+1 				; reached the bottom ?
.229a	cd 4c 04	cmp $044c			cmp 	basicStackEnd
.229d	f0 04		beq $22a3			beq 	_SOMemory
.229f					_SONoBorrow:
.229f	68		pla				pla 								; get marker back and write at TOS
.22a0	92 26		sta ($26)			sta 	(basicStack)
.22a2	60		rts				rts
.22a3					_SOMemory:
.22a3	4c 59 22	jmp $2259		jmp	ErrorV_stack
.22a6					StackClose:
.22a6	b2 26		lda ($26)			lda 	(basicStack) 				; get TOS marker
.22a8	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.22aa	0a		asl a				asl 	a 							; claim twice this.
.22ab	65 26		adc $26				adc 	basicStack 					; add to the stack pointer.
.22ad	85 26		sta $26				sta 	basicStack
.22af	90 02		bcc $22b3			bcc 	_SCExit
.22b1	e6 27		inc $27				inc 	basicStack+1
.22b3					_SCExit:
.22b3	60		rts				rts
.22b4					StackCheckFrame:
.22b4	d2 26		cmp ($26)			cmp		(basicStack) 				; check  frames match
.22b6	d0 01		bne $22b9			bne 	_SCFError 					; different, we have structures mixed up
.22b8	60		rts				rts
.22b9					_SCFError:
.22b9	4c a6 21	jmp $21a6		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.22bc					STKSaveCodePosition:
.22bc	5a		phy				phy
.22bd	98		tya				tya 								; save Y at offset 1.
.22be	a0 01		ldy #$01			ldy 	#1
.22c0	91 26		sta ($26),y			sta 	(basicStack),y
.22c2	a5 1c		lda $1c				lda 	codePtr 					; save code (low) at 2
.22c4	c8		iny				iny
.22c5	91 26		sta ($26),y			sta 	(basicStack),y
.22c7	a5 1d		lda $1d				lda 	codePtr+1 					; save code (high) at 3
.22c9	c8		iny				iny
.22ca	91 26		sta ($26),y			sta 	(basicStack),y
.22cc	7a		ply				ply
.22cd	60		rts				rts
.22ce					STKLoadCodePosition:
.22ce	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.22d0	b1 26		lda ($26),y			lda 	(basicStack),y
.22d2	85 1d		sta $1d				sta 	codePtr+1
.22d4	88		dey				dey
.22d5	b1 26		lda ($26),y			lda 	(basicStack),y
.22d7	85 1c		sta $1c				sta 	codePtr
.22d9	88		dey				dey
.22da	b1 26		lda ($26),y			lda 	(basicStack),y 				; line offset to Y
.22dc	a8		tay				tay
.22dd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.22de					StackReset:
.22de	48		pha				pha 								; save top of memory
.22df	3a		dec a				dec 	a  							; end of stack = previous byte
.22e0	85 27		sta $27				sta 	basicStack+1
.22e2	a9 ff		lda #$ff			lda 	#$FF
.22e4	85 26		sta $26				sta 	basicStack
.22e6	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.22e8	92 26		sta ($26)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.22ea	68		pla				pla 								; allocate pages for stack.
.22eb	38		sec				sec
.22ec	e9 02		sbc #$02			sbc 	#stackPages
.22ee	8d 4c 04	sta $044c			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.22f1	60		rts				rts
.0026					basicStack:
>0026							.fill 	2
.044c					basicStackEnd:
>044c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.22f2					StringConcrete:
.22f2	5a		phy				phy 								; save position on stack
.22f3	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.22f5	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.22f7	b0 41		bcs $233a			bcs 	_SALengthError
.22f9	18		clc				clc 								; length of the new string
.22fa	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.22fc	90 02		bcc $2300			bcc 	_SAHaveLength
.22fe	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2300					_SAHaveLength:
.2300	48		pha				pha 								; save length to be allocated for concreting.
.2301	38		sec				sec
.2302	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2304	6d 4e 04	adc $044e			adc 	stringMemory
.2307	8d 4e 04	sta $044e			sta 	stringMemory
.230a	85 22		sta $22				sta 	zTemp2 						; update storage address
.230c	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.230e	6d 4f 04	adc $044f			adc 	stringMemory+1
.2311	8d 4f 04	sta $044f			sta 	stringMemory+1
.2314	85 23		sta $23				sta 	zTemp2+1
.2316	68		pla				pla 								; save length allocated in +0
.2317	92 22		sta ($22)			sta 	(zTemp2)
.2319	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.231b	a0 01		ldy #$01			ldy 	#1
.231d	91 22		sta ($22),y			sta 	(zTemp2),y
.231f					_SACopyNewString:
.231f	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.2321	a0 02		ldy #$02			ldy 	#2
.2323	91 22		sta ($22),y			sta 	(zTemp2),y
.2325	aa		tax				tax 								; bytes to copy
.2326	f0 0c		beq $2334			beq 	_SACopyExit
.2328	a0 01		ldy #$01			ldy 	#1 							; first character from here
.232a					_SACopyNSLoop:
.232a	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.232c	c8		iny				iny 								; write two on in string storage
.232d	c8		iny				iny
.232e	91 22		sta ($22),y			sta 	(zTemp2),y
.2330	88		dey				dey
.2331	ca		dex				dex									; until copied all the string lengths.
.2332	d0 f6		bne $232a			bne 	_SACopyNSLoop
.2334					_SACopyExit:
.2334	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.2336	a5 22		lda $22				lda 	zTemp2
.2338	7a		ply				ply
.2339	60		rts				rts
.233a					_SALengthError:
.233a	4c 30 22	jmp $2230		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.233d					StringSystemInitialise:
.233d	3a		dec a				dec 	a 							; make last byte of previous page.
.233e	8d 4f 04	sta $044f			sta 	stringMemory+1
.2341	85 1f		sta $1f				sta 	zTemp0+1
.2343	a9 ff		lda #$ff			lda 	#$FF
.2345	8d 4e 04	sta $044e			sta 	stringMemory
.2348	85 1e		sta $1e				sta 	zTemp0
.234a	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.234c	92 1e		sta ($1e)			sta 	(zTemp0)
.234e	60		rts				rts
.234f					StringSpaceInitialise:
.234f	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2351	8d 4d 04	sta $044d			sta 	stringInitialised
.2354	ad 4e 04	lda $044e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2357	8d 50 04	sta $0450			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.235a	ad 4f 04	lda $044f			lda 	stringMemory+1
.235d	3a		dec a				dec 	a
.235e	8d 51 04	sta $0451			sta 	stringTempPointer+1
.2361	20 5b 10	jsr $105b			jsr 	ClearCheckMemory
.2364	60		rts				rts
.2365					StringTempAllocate:
.2365	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2367	b0 2e		bcs $2397			bcs 	_STALength
.2369	2c 4d 04	bit $044d			bit 	stringInitialised 			; already initialised
.236c	30 05		bmi $2373			bmi 	_STAAllocate
.236e	48		pha				pha 								; save value to subtract.
.236f	20 4f 23	jsr $234f			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2372	68		pla				pla 								; restore it
.2373					_STAAllocate:
.2373	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2375	18		clc				clc  								; deliberate allows one more
.2376	6d 50 04	adc $0450			adc 	stringTempPointer 			; subtract from temp pointer
.2379	8d 50 04	sta $0450			sta 	stringTempPointer
.237c	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.237e	85 28		sta $28				sta 	zsTemp 						; and zsTemp
.2380	ad 51 04	lda $0451			lda 	stringTempPointer+1
.2383	69 ff		adc #$ff			adc 	#$FF
.2385	8d 51 04	sta $0451			sta 	stringTempPointer+1
.2388	85 29		sta $29				sta 	zsTemp+1
.238a	85 0d		sta $0d				sta 	IFR0+IM1
.238c	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.238e	a9 80		lda #$80			lda 	#$80
.2390	85 0f		sta $0f				sta 	IFR0+IExp
.2392	a9 00		lda #$00			lda 	#0 							; clear the target string
.2394	92 28		sta ($28)			sta 	(zsTemp)
.2396	60		rts				rts
.2397					_STALength:
.2397	4c 30 22	jmp $2230		jmp	ErrorV_string
.239a					StringTempWrite:
.239a	5a		phy				phy
.239b	48		pha				pha
.239c	b2 28		lda ($28)			lda 	(zsTemp)
.239e	1a		inc a				inc 	a
.239f	92 28		sta ($28)			sta 	(zsTemp)
.23a1	a8		tay				tay
.23a2	68		pla				pla
.23a3	91 28		sta ($28),y			sta 	(zsTemp),y
.23a5	7a		ply				ply
.23a6	60		rts				rts
.0028					zsTemp:
>0028							.fill 	2
.044d					stringInitialised:
>044d							.fill 	1
.044e					stringMemory:
>044e							.fill 	2
.0450					stringTempPointer:
>0450							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.23a7					VARArrayLookup:
.23a7	85 1e		sta $1e				sta 	zTemp0 						; save the array address pointer in zTemp0
.23a9	86 1f		stx $1f				stx 	zTemp0+1
.23ab	b2 1e		lda ($1e)			lda 	(zTemp0)
.23ad	48		pha				pha
.23ae	5a		phy				phy
.23af	a0 01		ldy #$01			ldy 	#1
.23b1	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.23b3	7a		ply				ply
.23b4	48		pha				pha
.23b5	20 9c 14	jsr $149c			jsr 	EXPEvalInteger16 			; R0 now contains the index
.23b8	68		pla				pla 								; array address to zTemp0
.23b9	85 1f		sta $1f				sta 	zTemp0+1
.23bb	68		pla				pla
.23bc	85 1e		sta $1e				sta 	zTemp0
.23be	5a		phy				phy 								; save codePtr position.
.23bf	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.23c1	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.23c3	48		pha				pha 								; save bit 15 on stack.
.23c4	29 7f		and #$7f			and 	#$7F
.23c6	85 20		sta $20				sta 	zTemp1
.23c8	a5 0c		lda $0c				lda 	IFR0+IM0 					; check range of index
.23ca	d2 1e		cmp ($1e)			cmp 	(zTemp0)
.23cc	a5 0d		lda $0d				lda 	IFR0+IM1
.23ce	e5 20		sbc $20				sbc 	zTemp1
.23d0	b0 3a		bcs $240c			bcs 	_VALIndex
.23d2	a5 0d		lda $0d				lda 	IFR0+IM1  					; sanity check
.23d4	c9 40		cmp #$40			cmp 	#$40
.23d6	b0 34		bcs $240c			bcs 	_VALIndex
.23d8	06 0c		asl $0c				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.23da	26 0d		rol $0d				rol 	IFR0+IM1
.23dc	fa		plx				plx 								; get msb of size -> X
.23dd	30 04		bmi $23e3			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.23df	06 0c		asl $0c				asl 	IFR0+IM0
.23e1	26 0d		rol $0d				rol 	IFR0+IM1
.23e3					_VARNotX4:
.23e3	18		clc				clc 								; add the two for the size bytes
.23e4	a5 0c		lda $0c				lda 	IFR0+IM0
.23e6	69 02		adc #$02			adc 	#2
.23e8	85 0c		sta $0c				sta 	IFR0+IM0
.23ea	90 02		bcc $23ee			bcc 	_VARNoCarry1
.23ec	e6 0d		inc $0d				inc 	IFR0+IM1
.23ee					_VARNoCarry1:
.23ee	18		clc				clc 								; calculate the element address and push to stack.
.23ef	a5 0c		lda $0c				lda 	IFR0+IM0
.23f1	65 1e		adc $1e				adc 	zTemp0
.23f3	48		pha				pha
.23f4	a5 0d		lda $0d				lda 	IFR0+IM1
.23f6	65 1f		adc $1f				adc 	zTemp0+1
.23f8	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.23fa	30 04		bmi $2400			bmi 	_VARHasSubLevel
.23fc	aa		tax				tax 								; address in XA
.23fd	68		pla				pla
.23fe	7a		ply				ply 								; restore Y and exit
.23ff	60		rts				rts
.2400					_VARHasSubLevel:
.2400	aa		tax				tax 								; get link address in XA
.2401	68		pla				pla
.2402	7a		ply				ply 								; restore code position.
.2403	48		pha				pha
.2404	20 77 22	jsr $2277			jsr 	ERRCheckComma 				; comma required.
.2407	68		pla				pla
.2408	20 a7 23	jsr $23a7			jsr 	VARArrayLookup 				; call it recursively
.240b	60		rts				rts
.240c					_VALIndex:
.240c	4c f2 21	jmp $21f2		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.240f					VARCreate:
.240f	5a		phy				phy
.2410	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2412	a2 00		ldx #$00			ldx 	#0
.2414	20 32 10	jsr $1032			jsr 	AllocateMemory
.2417	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.2419	86 21		stx $21				stx 	zTemp1+1
.241b	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.241d	ad 54 04	lda $0454			lda 	VARHash
.2420	91 20		sta ($20),y			sta 	(zTemp1),y
.2422	c8		iny				iny 								; put address of name into +3,+4
.2423	ad 52 04	lda $0452			lda 	VARNameAddress
.2426	91 20		sta ($20),y			sta 	(zTemp1),y
.2428	c8		iny				iny
.2429	ad 53 04	lda $0453			lda 	VARNameAddress+1
.242c	91 20		sta ($20),y			sta 	(zTemp1),y
.242e	ad 55 04	lda $0455			lda 	VARType
.2431	29 01		and #$01			and 	#1
.2433	f0 06		beq $243b			beq 	_CVNotString
.2435	a0 08		ldy #$08			ldy 	#5+3
.2437	a9 80		lda #$80			lda 	#$80
.2439	91 20		sta ($20),y			sta 	(zTemp1),y
.243b					_CVNotString:
.243b	ad 76 04	lda $0476			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.243e	85 1e		sta $1e				sta 	zTemp0
.2440	ad 77 04	lda $0477			lda 	VARHashEntry+1
.2443	85 1f		sta $1f				sta 	zTemp0+1
.2445	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2447	b2 1e		lda ($1e)			lda 	(zTemp0)
.2449	92 20		sta ($20)			sta 	(zTemp1)
.244b	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.244d	91 20		sta ($20),y			sta 	(zTemp1),y
.244f	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.2451	92 1e		sta ($1e)			sta 	(zTemp0)
.2453	a5 21		lda $21				lda 	zTemp1+1
.2455	91 1e		sta ($1e),y			sta 	(zTemp0),y
.2457	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.2459	a6 21		ldx $21				ldx 	zTemp1+1
.245b	18		clc				clc 								; add 5 to point to the data.
.245c	69 05		adc #$05			adc 	#5
.245e	90 01		bcc $2461			bcc 	_VCNoCarry
.2460	e8		inx				inx
.2461					_VCNoCarry:
.2461	7a		ply				ply
.2462	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2463					VARFind:
.2463	5a		phy				phy
.2464	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2466	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2468	85 21		sta $21				sta 	zTemp1+1
.246a	f0 1c		beq $2488			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.246c	b2 1e		lda ($1e)			lda 	(zTemp0)
.246e	85 20		sta $20				sta 	zTemp1
.2470					_VFLoop:
.2470	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2472	b1 20		lda ($20),y			lda 	(zTemp1),y
.2474	cd 54 04	cmp $0454			cmp 	VARHash
.2477	f0 12		beq $248b			beq 	_VFHashesMatch 				; if so, check the name.
.2479					_VFNext:
.2479	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.247b	aa		tax				tax
.247c	a0 01		ldy #$01			ldy 	#1
.247e	b1 20		lda ($20),y			lda 	(zTemp1),y
.2480	85 21		sta $21				sta 	zTemp1+1
.2482	86 20		stx $20				stx 	zTemp1
.2484	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2486	d0 e8		bne $2470			bne 	_VFLoop
.2488					_VFExitFail:
.2488	7a		ply				ply
.2489	18		clc				clc
.248a	60		rts				rts
.248b					_VFHashesMatch:
.248b	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.248d	b1 20		lda ($20),y			lda 	(zTemp1),y
.248f	85 22		sta $22				sta 	zTemp2
.2491	c8		iny				iny
.2492	b1 20		lda ($20),y			lda 	(zTemp1),y
.2494	85 23		sta $23				sta 	zTemp2+1
.2496	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2498					_VFNameCompLoop:
.2498	c8		iny				iny 								; char at a time
.2499	b9 56 04	lda $0456,y			lda 	VARBuffer,y
.249c	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.249e	d0 d9		bne $2479			bne 	_VFNext						; next entry if different.
.24a0	c9 7c		cmp #$7c			cmp 	#$7C
.24a2	90 f4		bcc $2498			bcc 	_VFNameCompLoop 			; until done the whole lot.
.24a4	18		clc				clc
.24a5	a5 20		lda $20				lda 	zTemp1
.24a7	a6 21		ldx $21				ldx 	zTemp1+1
.24a9	69 05		adc #$05			adc 	#5
.24ab	90 01		bcc $24ae			bcc 	_VFNNoCarry
.24ad	e8		inx				inx
.24ae					_VFNNoCarry:
.24ae	7a		ply				ply
.24af	38		sec				sec
.24b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.24b1					VARGetInfo:
.24b1	98		tya				tya 								; calculate the address of the identifier start.
.24b2	18		clc				clc
.24b3	65 1c		adc $1c				adc 	codePtr
.24b5	8d 52 04	sta $0452			sta 	VARNameAddress
.24b8	a5 1d		lda $1d				lda 	codePtr+1
.24ba	69 00		adc #$00			adc 	#0
.24bc	8d 53 04	sta $0453			sta 	VARNameAddress+1
.24bf	9c 54 04	stz $0454			stz 	VARHash
.24c2	a2 00		ldx #$00			ldx 	#0
.24c4					_VARCopyName:
.24c4	18		clc				clc 								; update the sum hash.
.24c5	ad 54 04	lda $0454			lda 	VARHash
.24c8	71 1c		adc ($1c),y			adc 	(codePtr),y
.24ca	8d 54 04	sta $0454			sta 	VARHash
.24cd	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.24cf	c8		iny				iny
.24d0	9d 56 04	sta $0456,x			sta 	VARBuffer,x
.24d3	e8		inx				inx
.24d4	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.24d6	90 ec		bcc $24c4			bcc 	_VARCopyName
.24d8	8d 55 04	sta $0455			sta 	VARType 					; save type byte
.24db	29 03		and #$03			and 	#3 							; type is 0-3
.24dd	0a		asl a				asl 	a
.24de	0a		asl a				asl 	a
.24df	85 1e		sta $1e				sta 	zTemp0
.24e1	ad 54 04	lda $0454			lda 	VARHash 					; force into range of hash entries per type.
.24e4	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.24e6	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.24e8	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.24e9	69 78		adc #$78			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.24eb	85 1e		sta $1e				sta 	zTemp0
.24ed	8d 76 04	sta $0476			sta 	VARHashEntry
.24f0	a9 04		lda #$04			lda 	#VARHashTables >> 8
.24f2	69 00		adc #$00			adc 	#0
.24f4	85 1f		sta $1f				sta 	zTemp0+1
.24f6	8d 77 04	sta $0477			sta 	VARHashEntry+1
.24f9	60		rts				rts
.24fa					VARClearHashTables:
.24fa	a2 00		ldx #$00			ldx 	#0
.24fc					_VCHRLoop:
.24fc	a9 00		lda #$00			lda 	#0
.24fe	9d 78 04	sta $0478,x			sta 	VARHashTables,x
.2501	e8		inx				inx
.2502	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2504	d0 f6		bne $24fc			bne 	_VCHRLoop
.2506	60		rts				rts
.0452					VARNameAddress:
>0452							.fill 	2
.0454					VARHash:
>0454							.fill 	1
.0455					VARType:
>0455							.fill 	1
.0456					VARBuffer:
>0456							.fill 	32
.0476					VARHashEntry:
>0476							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0478					VARHashTables:
>0478							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2507					VARCheckSimple:
.2507	aa		tax				tax 								; save in X
.2508	b1 1c		lda ($1c),y			lda 	(codePtr),y
.250a	c9 7c		cmp #$7c			cmp 	#$7C
.250c	d0 15		bne $2523			bne 	_VCSComplex
.250e	c8		iny				iny 								; consume the second byte, the type.
.250f	8a		txa				txa  								; character (40-7F) x 4
.2510	0a		asl a				asl 	a
.2511	0a		asl a				asl  	a
.2512	18		clc				clc
.2513	69 98		adc #$98			adc 	#FastVariables & $FF
.2515	85 0c		sta $0c				sta 	IFR0+IM0
.2517	a9 04		lda #$04			lda 	#FastVariables >> 8
.2519	69 00		adc #$00			adc 	#0
.251b	85 0d		sta $0d				sta 	IFR0+IM1
.251d	64 0e		stz $0e				stz 	IFR0+IM2
.251f	64 0f		stz $0f				stz 	IFR0+IExp
.2521	38		sec				sec 								; it's a reference
.2522	60		rts				rts
.2523					_VCSComplex:
.2523	88		dey				dey	 								; extract information.
.2524	20 b1 24	jsr $24b1			jsr 	VARGetInfo
.2527	20 63 24	jsr $2463			jsr 	VARFind 					; search for variable
.252a	b0 0a		bcs $2536			bcs 	_VCSHaveVariable
.252c	ad 55 04	lda $0455			lda 	VARType 					; error if arrays, cannot autocreate
.252f	29 02		and #$02			and 	#2
.2531	d0 25		bne $2558			bne 	_VCNoCreate
.2533	20 0f 24	jsr $240f			jsr 	VARCreate 					; create variable
.2536					_VCSHaveVariable:
.2536	48		pha				pha 								; save LSB on the stack
.2537	ad 55 04	lda $0455			lda 	VARType 					; get var type, and shift bit 1 into carry
.253a	6a		ror a				ror 	a
.253b	6a		ror a				ror 	a
.253c	68		pla				pla 								; restore LSB
.253d	90 08		bcc $2547			bcc 	_VCSNotArray 				; skip if not an array
.253f	20 a7 23	jsr $23a7			jsr 	VARArrayLookup 				; look for subscripts.
.2542	48		pha				pha 								; check )
.2543	20 6f 22	jsr $226f			jsr 	ERRCheckRParen
.2546	68		pla				pla
.2547					_VCSNotArray:
.2547	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.2549	85 0c		sta $0c				sta 	IFR0+IM0
.254b	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.254d	ad 55 04	lda $0455			lda 	VARType 					; number/string bit into carry
.2550	6a		ror a				ror 	a
.2551	a9 00		lda #$00			lda 	#0
.2553	6a		ror a				ror 	a 							; now $00 or $80
.2554	85 0f		sta $0f				sta 	IFR0+IExp
.2556	38		sec				sec 								; it's a reference
.2557	60		rts				rts
.2558					_VCNoCreate:
.2558	4c 16 22	jmp $2216		jmp	ErrorV_uninitialised
.0498					FastVariables:
>0498							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.255b					IFInitialise:
.255b	9c 08 05	stz $0508			stz 	IFStackIndex
.255e	60		rts				rts
.255f					IFloatSubtract:
.255f	da		phx				phx
.2560	a2 0c		ldx #$0c			ldx 	#IFR0
.2562	20 7b 2b	jsr $2b7b			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2565	fa		plx				plx
.2566					IFloatAdd:
.2566	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2568	05 0f		ora $0f				ora 	IFR0+IExp
.256a	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.256c	d0 4e		bne $25bc			bne 	_IFloatAddDecimals 			; decimal version.
.256e					_IFAddSubMantissa:
.256e	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2570	45 0f		eor $0f				eor 	IFR0+IExp
.2572	29 40		and #$40			and 	#IFSign
.2574	d0 21		bne $2597			bne 	_IFloatSubMantissa
.2576	18		clc				clc 								; do the actual addition
.2577	a5 0c		lda $0c			lda 	IFR0+IM0
.2579	75 00		adc $00,x		adc 		IM0,x
.257b	85 0c		sta $0c			sta 	IFR0+IM0
.257d	a5 0d		lda $0d			lda 	IFR0+IM1
.257f	75 01		adc $01,x		adc 		IM1,x
.2581	85 0d		sta $0d			sta 	IFR0+IM1
.2583	a5 0e		lda $0e			lda 	IFR0+IM2
.2585	75 02		adc $02,x		adc 		IM2,x
.2587	85 0e		sta $0e			sta 	IFR0+IM2
.2589	10 29		bpl $25b4			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.258b	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.258d	20 9f 2b	jsr $2b9f			jsr 	IFloatShiftRight
.2590	20 c9 2b	jsr $2bc9			jsr 	IFloatIncExponent
.2593	d0 1f		bne $25b4			bne 	_IFloatAddExit
.2595	38		sec				sec 								; overflowed numerically.
.2596	60		rts				rts
.2597					_IFloatSubMantissa:
.2597	38		sec				sec 								; do the subtraction R0-Rx
.2598	a5 0c		lda $0c			lda 	IFR0+IM0
.259a	f5 00		sbc $00,x		sbc 		IM0,x
.259c	85 0c		sta $0c			sta 	IFR0+IM0
.259e	a5 0d		lda $0d			lda 	IFR0+IM1
.25a0	f5 01		sbc $01,x		sbc 		IM1,x
.25a2	85 0d		sta $0d			sta 	IFR0+IM1
.25a4	a5 0e		lda $0e			lda 	IFR0+IM2
.25a6	f5 02		sbc $02,x		sbc 		IM2,x
.25a8	85 0e		sta $0e			sta 	IFR0+IM2
.25aa	b0 08		bcs $25b4			bcs 	_IFloatAddExit 				; no borrow so we are done.
.25ac	a2 0c		ldx #$0c			ldx 	#IFR0
.25ae	20 83 2b	jsr $2b83			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.25b1	20 7b 2b	jsr $2b7b			jsr 	IFloatNegate 				; negate
.25b4					_IFloatAddExit:
.25b4	18		clc				clc
.25b5	60		rts				rts
.25b6					_IFloatZeroAdd:
.25b6	fa		plx				plx 								; return this value in R0
.25b7	20 01 2b	jsr $2b01			jsr 	IFloatCopyFromRegister
.25ba	18		clc				clc
.25bb	60		rts				rts
.25bc					_IFloatAddDecimals:
.25bc	20 69 2b	jsr $2b69			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.25bf	f0 f3		beq $25b4			beq 	_IFloatAddExit
.25c1	20 a7 2b	jsr $2ba7			jsr 	IFloatNormalise 			; normalise RX
.25c4	da		phx				phx 								; normalise R0
.25c5	a2 0c		ldx #$0c			ldx 	#IFR0
.25c7	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero
.25ca	f0 ea		beq $25b6			beq 	_IFloatZeroAdd
.25cc	20 a7 2b	jsr $2ba7			jsr 	IFloatNormalise
.25cf	fa		plx				plx
.25d0	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.25d2	29 3f		and #$3f			and 	#IFXMask
.25d4	38		sec				sec
.25d5	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.25d7	85 0a		sta $0a				sta 	iTemp0
.25d9	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.25db	29 3f		and #$3f			and 	#IFXMask
.25dd	38		sec				sec
.25de	e9 20		sbc #$20			sbc 	#$20
.25e0	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.25e2	b0 02		bcs $25e6			bcs 	_IFloatHaveLarger
.25e4	a5 0a		lda $0a				lda 	iTemp0
.25e6					_IFloatHaveLarger:
.25e6	18		clc				clc 								; get the actual one back.
.25e7	69 20		adc #$20			adc 	#$20 						; shift both to that.
.25e9	20 f6 25	jsr $25f6			jsr 	_IFShiftXToA
.25ec	da		phx				phx
.25ed	a2 0c		ldx #$0c			ldx 	#IFR0
.25ef	20 f6 25	jsr $25f6			jsr 	_IFShiftXToA
.25f2	fa		plx				plx
.25f3	4c 6e 25	jmp $256e			jmp 	_IFAddSubMantissa 			; do the adding bit.
.25f6					_IFShiftXToA:
.25f6	8d 00 05	sta $0500			sta 	IFTarget
.25f9	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero 			; check adding zero ?
.25fc	f0 11		beq $260f			beq 	_IFSXExit
.25fe					_IFSXLoop:
.25fe	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2600	29 3f		and #$3f			and 	#IFXMask
.2602	cd 00 05	cmp $0500			cmp 	IFTarget
.2605	f0 08		beq $260f			beq 	_IFSXExit
.2607	20 9f 2b	jsr $2b9f			jsr 	IFloatShiftRight
.260a	20 c9 2b	jsr $2bc9			jsr 	IFloatIncExponent
.260d	80 ef		bra $25fe			bra 	_IFSXLoop
.260f					_IFSXExit:
.260f	60		rts				rts
.0500					IFTarget:
>0500							.fill 	1
.2610					IFloatMultiply:
.2610	8e 00 05	stx $0500			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2613	20 cb 26	jsr $26cb			jsr 	IFCalculateNewSign
.2616	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2618	05 0f		ora $0f				ora 	IFR0+IExp
.261a	29 3f		and #$3f			and 	#IFXMask
.261c	15 01		ora $01,x			ora 	IM1,x
.261e	05 0d		ora $0d				ora 	IFR0+IM1
.2620	15 02		ora $02,x			ora 	IM2,x
.2622	05 0e		ora $0e				ora 	IFR0+IM2
.2624	d0 0a		bne $2630			bne 	_IFMStandard
.2626	20 4c 2b	jsr $2b4c			jsr 	IFloatMultiply8BitRx
.2629	ad 02 05	lda $0502			lda 	IFNewSign
.262c	85 0f		sta $0f				sta 	IFR0+IExp
.262e	18		clc				clc
.262f	60		rts				rts
.2630					_IFMStandard:
.2630	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2632	20 c2 26	jsr $26c2			jsr 	IFMSignExtend
.2635	8d 01 05	sta $0501			sta 	IFNewExponent
.2638	a5 0f		lda $0f				lda 	IFR0+IExp
.263a	20 c2 26	jsr $26c2			jsr 	IFMSignExtend
.263d	18		clc				clc
.263e	6d 01 05	adc $0501			adc 	IFNewExponent
.2641	8d 01 05	sta $0501			sta 	IFNewExponent
.2644	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2646	20 12 2b	jsr $2b12			jsr 	IFloatCopyToRegister
.2649	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.264b	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.264e					_IFMLoop:
.264e	a2 18		ldx #$18			ldx 	#IFRTemp
.2650	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero
.2653	f0 3a		beq $268f			beq 	_IFMExit
.2655	ae 00 05	ldx $0500			ldx 	IFTarget 					; look at adder MSB
.2658	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.265a	10 03		bpl $265f			bpl	 	_IFMTargetOkay
.265c	20 b3 26	jsr $26b3			jsr 	_IFMShiftAll
.265f					_IFMTargetOkay:
.265f	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2661	29 01		and #$01			and 	#1
.2663	f0 16		beq $267b			beq 	_IFMNoAdd
.2665	ae 00 05	ldx $0500			ldx 	IFTarget 					; add adder
.2668	18		clc				clc
.2669	a5 0c		lda $0c			lda 	IFR0+IM0
.266b	75 00		adc $00,x		adc 		IM0,x
.266d	85 0c		sta $0c			sta 	IFR0+IM0
.266f	a5 0d		lda $0d			lda 	IFR0+IM1
.2671	75 01		adc $01,x		adc 		IM1,x
.2673	85 0d		sta $0d			sta 	IFR0+IM1
.2675	a5 0e		lda $0e			lda 	IFR0+IM2
.2677	75 02		adc $02,x		adc 		IM2,x
.2679	85 0e		sta $0e			sta 	IFR0+IM2
.267b					_IFMNoAdd:
.267b	a5 0e		lda $0e				lda 	IFR0+IM2
.267d	10 03		bpl $2682			bpl 	_IFMResultOkay
.267f	20 b3 26	jsr $26b3			jsr 	_IFMShiftAll
.2682					_IFMResultOkay:
.2682	a2 18		ldx #$18			ldx 	#IFRTemp
.2684	20 9f 2b	jsr $2b9f			jsr 	IFloatShiftRight
.2687	ae 00 05	ldx $0500			ldx 	IFTarget
.268a	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.268d	80 bf		bra $264e			bra 	_IFMLoop
.268f					_IFMExit:
.268f	ad 01 05	lda $0501			lda 	IFNewExponent 				; validate new exponent.
.2692	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2694	90 0f		bcc $26a5			bcc 	_IFMOkay
.2696	c9 e0		cmp #$e0			cmp 	#$E0
.2698	b0 0b		bcs $26a5			bcs 	_IFMOkay
.269a	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.269c	f0 13		beq $26b1			beq 	_IFMError
.269e	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.26a0	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.26a3	18		clc				clc
.26a4	60		rts				rts
.26a5					_IFMOkay:
.26a5	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.26a7	0d 02 05	ora $0502			ora 	IFNewSign
.26aa	85 0f		sta $0f				sta 	IFR0+IExp
.26ac	18		clc				clc
.26ad	60		rts				rts
.26ae	4c ff ff	jmp $ffff			jmp 	$FFFF
.26b1					_IFMError:
.26b1	38		sec				sec
.26b2	60		rts				rts
.26b3					_IFMShiftAll:
.26b3	a2 0c		ldx #$0c			ldx 	#IFR0
.26b5	20 9f 2b	jsr $2b9f			jsr 	IFloatShiftRight
.26b8	ae 00 05	ldx $0500			ldx 	IFTarget
.26bb	20 9f 2b	jsr $2b9f			jsr 	IFloatShiftRight
.26be	ee 01 05	inc $0501			inc 	IFNewExponent
.26c1	60		rts				rts
.26c2					IFMSignExtend:
.26c2	29 3f		and #$3f			and 	#IFXMask
.26c4	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.26c6	90 02		bcc $26ca			bcc 	_IFMNoSXX
.26c8	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.26ca					_IFMNoSXX:
.26ca	60		rts				rts
.26cb					IFCalculateNewSign:
.26cb	b5 03		lda $03,x			lda 	IExp,x
.26cd	45 0f		eor $0f				eor 	IFR0+IExp
.26cf	29 40		and #$40			and 	#IFSign
.26d1	8d 02 05	sta $0502			sta 	IFNewSign
.26d4	60		rts				rts
.0501					IFNewExponent:
>0501							.fill 	1
.0502					IFNewSign:
>0502							.fill 	1
.26d5					IFloatDivideInteger:
.26d5	20 ee 26	jsr $26ee			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.26d8	b0 06		bcs $26e0			bcs 	_IFDIExit
.26da	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.26dc	20 01 2b	jsr $2b01			jsr 	IFloatCopyFromRegister
.26df	18		clc				clc
.26e0					_IFDIExit:
.26e0	60		rts				rts
.26e1					IFloatModulusInteger:
.26e1	20 ee 26	jsr $26ee			jsr 	IFloatDivideIntegerCommon
.26e4	b0 07		bcs $26ed			bcs 	_IFMIExit
.26e6	ae 00 05	ldx $0500			ldx 	IFTarget
.26e9	20 01 2b	jsr $2b01			jsr 	IFloatCopyFromRegister
.26ec	18		clc				clc
.26ed					_IFMIExit:
.26ed	60		rts				rts
.26ee					IFloatDivideIntegerCommon:
.26ee	8e 00 05	stx $0500			stx 	IFTarget  					; this is s1, s0 = R0
.26f1	20 cb 26	jsr $26cb			jsr 	IFCalculateNewSign 			; calculate sign of result
.26f4	20 1c 27	jsr $271c			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.26f7	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.26f9	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero
.26fc	f0 1c		beq $271a			beq 	_IFDIDivZero
.26fe	ae 00 05	ldx $0500			ldx 	IFTarget 					; zero Rx (S1)
.2701	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.2704	5a		phy				phy
.2705	a0 18		ldy #$18			ldy 	#24
.2707					_IFDILoop:
.2707	20 2d 27	jsr $272d			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.270a	20 39 27	jsr $2739			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.270d	88		dey				dey
.270e	d0 f7		bne $2707			bne 	_IFDILoop 					; do it 24 times
.2710	7a		ply				ply
.2711	ad 02 05	lda $0502			lda 	IFNewSign 					; set sign of result.
.2714	29 40		and #$40			and 	#IFSign
.2716	85 1b		sta $1b				sta 	IFRTemp+IExp
.2718	18		clc				clc 								; is okay.
.2719	60		rts				rts
.271a					_IFDIDivZero:
.271a	38		sec				sec
.271b	60		rts				rts
.271c					IFDCopyRXToRTemp:
.271c	b5 00		lda $00,x			lda 	IM0,x
.271e	85 18		sta $18				sta 	IFRTemp+IM0
.2720	b5 01		lda $01,x			lda 	IM1,x
.2722	85 19		sta $19				sta 	IFRTemp+IM1
.2724	b5 02		lda $02,x			lda 	IM2,x
.2726	85 1a		sta $1a				sta 	IFRTemp+IM2
.2728	b5 03		lda $03,x			lda 	IExp,x
.272a	85 1b		sta $1b				sta 	IFRTemp+IExp
.272c	60		rts				rts
.272d					IFDShiftSTempS1Left:
.272d	a2 18		ldx #$18			ldx 	#IFRTemp
.272f	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft
.2732	ae 00 05	ldx $0500			ldx 	IFTarget
.2735	20 98 2b	jsr $2b98			jsr 	IFloatRotateLeft
.2738	60		rts				rts
.2739					IFDTrySubtract:
.2739	ae 00 05	ldx $0500			ldx 	IFTarget 					; s1 = Rx
.273c	38		sec				sec 								; subtract, saving the results on the stack.
.273d	b5 00		lda $00,x			lda 	IM0,x
.273f	e5 0c		sbc $0c				sbc 	IFR0+IM0
.2741	48		pha				pha
.2742	b5 01		lda $01,x			lda 	IM1,x
.2744	e5 0d		sbc $0d				sbc 	IFR0+IM1
.2746	48		pha				pha
.2747	b5 02		lda $02,x			lda 	IM2,x
.2749	e5 0e		sbc $0e				sbc 	IFR0+IM2
.274b	b0 03		bcs $2750			bcs 	_IFDCanSubtract
.274d	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.274e	68		pla				pla
.274f	60		rts				rts
.2750					_IFDCanSubtract:
.2750	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2752	68		pla				pla
.2753	95 01		sta $01,x			sta 	IM1,x
.2755	68		pla				pla
.2756	95 00		sta $00,x			sta 	IM0,x
.2758	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.275a	d0 06		bne $2762			bne 	_IFDCSExit
.275c	e6 19		inc $19				inc 	IFRTemp+IM1
.275e	d0 02		bne $2762			bne 	_IFDCSExit
.2760	e6 1a		inc $1a				inc 	IFRTemp+IM2
.2762					_IFDCSExit:
.2762	60		rts				rts
.2763					IFloatBitwiseAnd:
.2763	5a		phy				phy
.2764	20 a8 27	jsr $27a8			jsr 	IFPreProcessBitwise 		; set up everything.
.2767	d0 0f		bne $2778			bne 	_IFBAExit
.2769					_IFBALoop:
.2769	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.276c	35 00		and $00,x			and 	IM0,x
.276e	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2771	e8		inx				inx
.2772	c8		iny				iny
.2773	c0 03		cpy #$03			cpy 	#3
.2775	d0 f2		bne $2769			bne 	_IFBALoop
.2777	18		clc				clc
.2778					_IFBAExit:
.2778	7a		ply				ply
.2779	60		rts				rts
.277a					IFloatBitwiseOr:
.277a	5a		phy				phy
.277b	20 a8 27	jsr $27a8			jsr 	IFPreProcessBitwise 		; set up everything.
.277e	d0 0f		bne $278f			bne 	_IFBAExit
.2780					_IFBALoop:
.2780	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2783	15 00		ora $00,x			ora 	IM0,x
.2785	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2788	e8		inx				inx
.2789	c8		iny				iny
.278a	c0 03		cpy #$03			cpy 	#3
.278c	d0 f2		bne $2780			bne 	_IFBALoop
.278e	18		clc				clc
.278f					_IFBAExit:
.278f	7a		ply				ply
.2790	60		rts				rts
.2791					IFloatBitwiseXor:
.2791	5a		phy				phy
.2792	20 a8 27	jsr $27a8			jsr 	IFPreProcessBitwise 		; set up everything.
.2795	d0 0f		bne $27a6			bne 	_IFBAExit
.2797					_IFBALoop:
.2797	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.279a	55 00		eor $00,x			eor 	IM0,x
.279c	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.279f	e8		inx				inx
.27a0	c8		iny				iny
.27a1	c0 03		cpy #$03			cpy 	#3
.27a3	d0 f2		bne $2797			bne 	_IFBALoop
.27a5	18		clc				clc
.27a6					_IFBAExit:
.27a6	7a		ply				ply
.27a7	60		rts				rts
.27a8					IFPreProcessBitwise:
.27a8	a0 00		ldy #$00			ldy 	#0 							; set index.
.27aa	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.27ac	15 03		ora $03,x			ora 	IExp,x
.27ae	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.27b0	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.27b2	38		sec				sec 								; carry set just in cases.
.27b3	60		rts				rts
.27b4					IFloatAbsoluteR0:
.27b4	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.27b6	29 bf		and #$bf			and 	#IFSign ^ 255
.27b8	85 0f		sta $0f				sta 	IFR0+IExp
.27ba	18		clc				clc
.27bb	60		rts				rts
.27bc					IFloatSquareRootR0:
.27bc	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.27be	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero
.27c1	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.27c3	29 40		and #$40			and 	#IFSign
.27c5	d0 2f		bne $27f6			bne 	_IFSRFail
.27c7	20 a7 2b	jsr $2ba7			jsr 	IFloatNormalise 			; it will work better !
.27ca	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.27cc	20 12 2b	jsr $2b12			jsr 	IFloatCopyToRegister
.27cf	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.27d1	20 c2 26	jsr $26c2			jsr 	IFMSignExtend 				; sign extended version of the exponent
.27d4	18		clc				clc
.27d5	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.27d7	85 0f		sta $0f				sta 	IFR0+IExp
.27d9	4a		lsr a				lsr 	a 							; which we can halve.
.27da	38		sec				sec 								; convert back
.27db	e9 17		sbc #$17			sbc 	#23
.27dd	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.27df	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.27e1	20 f8 27	jsr $27f8			jsr 	_IFSRNewton
.27e4	20 f8 27	jsr $27f8			jsr 	_IFSRNewton
.27e7	20 f8 27	jsr $27f8			jsr 	_IFSRNewton
.27ea	20 f8 27	jsr $27f8			jsr 	_IFSRNewton
.27ed	18		clc				clc
.27ee	60		rts				rts
.27ef					_IFSRZero:
.27ef	a2 0c		ldx #$0c			ldx 	#IFR0
.27f1	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.27f4	18		clc				clc
.27f5	60		rts				rts
.27f6					_IFSRFail:
.27f6	38		sec				sec
.27f7	60		rts				rts
.27f8					_IFSRNewton:
.27f8	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.27fa	20 bf 2a	jsr $2abf			jsr 	IFloatPushRx
.27fd	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.27ff	20 bf 2a	jsr $2abf			jsr 	IFloatPushRx
.2802	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.2804	20 93 28	jsr $2893			jsr 	IFloatDivideFloat
.2807	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2809	20 e0 2a	jsr $2ae0			jsr 	IFloatPullRx
.280c	20 66 25	jsr $2566			jsr 	IFloatAdd 					; now guess + original/guess
.280f	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.2811	20 9f 2b	jsr $2b9f			jsr 	IFloatShiftRight
.2814	a2 10		ldx #$10			ldx 	#IFR1
.2816	20 e0 2a	jsr $2ae0			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2819	60		rts				rts
.281a					IFloatFractionalR0:
.281a	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.281c	29 3f		and #$3f			and 	#IFXMask
.281e	f0 17		beq $2837			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2820	20 b4 27	jsr $27b4			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2823	a2 0c		ldx #$0c			ldx 	#IFR0
.2825	20 a7 2b	jsr $2ba7			jsr 	IFloatNormalise 			; normalise R0
.2828	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.282a	20 12 2b	jsr $2b12			jsr 	IFloatCopyToRegister
.282d	20 70 28	jsr $2870			jsr 	IFloatIntegerR0 			; take integer part of R0
.2830	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.2832	20 5f 25	jsr $255f			jsr 	IFloatSubtract
.2835	80 05		bra $283c			bra 	_FIPExit
.2837					_FIPZero:
.2837	a2 0c		ldx #$0c			ldx 	#IFR0
.2839	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.283c					_FIPExit:
.283c	18		clc				clc
.283d	60		rts				rts
.283e					IFloatCompare:
.283e	20 5f 25	jsr $255f			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2841	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2843	05 0f		ora $0f				ora 	IFR0+IExp
.2845	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.2847	29 3f		and #$3f			and 	#IFXMask
.2849	d0 19		bne $2864			bne 	_IFCNonInteger
.284b	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero 			; check if zero
.284e	f0 0f		beq $285f			beq 	_IFCZero
.2850					_IFCReturnSign:
.2850	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2852	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2854	48		pha				pha
.2855	a9 01		lda #$01			lda 	#1
.2857	20 72 2b	jsr $2b72			jsr 	IFloatSetByte 				; return to +1
.285a	68		pla				pla 								; sign bit back
.285b	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.285d	18		clc				clc
.285e	60		rts				rts
.285f					_IFCZero:
.285f	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.2862	18		clc				clc
.2863	60		rts				rts
.2864					_IFCNonInteger:
.2864	a5 0c		lda $0c				lda 	IFR0+IM0
.2866	29 00		and #$00			and		#$00
.2868	05 0d		ora $0d				ora 	IFR0+IM1
.286a	05 0e		ora $0e				ora 	IFR0+IM2
.286c	f0 f1		beq $285f			beq 	_IFCZero 					; near enough !
.286e	80 e0		bra $2850			bra 	_IFCReturnSign 				; return the sign of the difference.
.2870					IFloatIntegerR0:
.2870	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2872	29 3f		and #$3f			and 	#IFXMask
.2874	f0 1b		beq $2891			beq 	_FIPExit 					; if so do nothing
.2876	a2 0c		ldx #$0c			ldx 	#IFR0
.2878	20 a7 2b	jsr $2ba7			jsr 	IFloatNormalise 			; normalise
.287b	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero 			; is it zero ?
.287e	f0 0e		beq $288e			beq 	_FIPZero 					; if so return zero.
.2880					_FIPShift:
.2880	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2882	29 20		and #$20			and 	#$20 						; still -ve
.2884	f0 0b		beq $2891			beq 	_FIPExit
.2886	20 9f 2b	jsr $2b9f			jsr 	IFloatShiftRight 			; shift mantissa right
.2889	20 c9 2b	jsr $2bc9			jsr 	IFloatIncExponent 			; bump exponent
.288c	80 f2		bra $2880			bra 	_FIPShift
.288e					_FIPZero:
.288e	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.2891					_FIPExit:
.2891	18		clc				clc
.2892	60		rts				rts
.2893					IFloatDivideFloat:
.2893	8e 00 05	stx $0500			stx 	IFTarget  					; this is s1, s0 = R0
.2896	20 cb 26	jsr $26cb			jsr 	IFCalculateNewSign 			; calculate sign of result
.2899	20 a7 2b	jsr $2ba7			jsr 	IFloatNormalise 			; normalise RX
.289c	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.289e	20 a7 2b	jsr $2ba7			jsr 	IFloatNormalise
.28a1	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero
.28a4	f0 56		beq $28fc			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.28a6	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.28a8	20 c2 26	jsr $26c2			jsr 	IFMSignExtend
.28ab	8d 01 05	sta $0501			sta 	IFNewExponent
.28ae	ae 00 05	ldx $0500			ldx 	IFTarget 					; calculate s1.exponent
.28b1	b5 03		lda $03,x			lda 	IExp,x
.28b3	20 c2 26	jsr $26c2			jsr 	IFMSignExtend
.28b6	38		sec				sec
.28b7	ed 01 05	sbc $0501			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.28ba	38		sec				sec
.28bb	e9 17		sbc #$17			sbc 	#23
.28bd	8d 01 05	sta $0501			sta 	IFNewExponent
.28c0	20 fe 28	jsr $28fe			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.28c3	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.28c5	10 08		bpl $28cf			bpl 	_IFDFNoShiftResult
.28c7	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.28c9	20 9f 2b	jsr $2b9f			jsr 	IFloatShiftRight
.28cc	ee 01 05	inc $0501			inc 	IFNewExponent
.28cf					_IFDFNoShiftResult:
.28cf	ad 01 05	lda $0501			lda 	IFNewExponent 				; underflow/overflow check.
.28d2	30 06		bmi $28da			bmi 	_IFDFCheckUnderflow
.28d4	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.28d6	b0 24		bcs $28fc			bcs 	_IFDFDivZero
.28d8	80 11		bra $28eb			bra		_IFDFExit
.28da					_IFDFCheckUnderflow:
.28da	ad 01 05	lda $0501			lda 	IFNewExponent 				; shift into a legal exponent.
.28dd	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.28df	b0 0a		bcs $28eb			bcs 	_IFDFExit
.28e1	ee 01 05	inc $0501			inc 	IFNewExponent
.28e4	a2 18		ldx #$18			ldx 	#IFRTemp
.28e6	20 9f 2b	jsr $2b9f			jsr 	IFloatShiftRight
.28e9	80 ef		bra $28da			bra 	_IFDFCheckUnderflow
.28eb					_IFDFExit:
.28eb	ad 01 05	lda $0501			lda 	IFNewExponent 				; combine exponent and sign.
.28ee	29 3f		and #$3f			and 	#IFXMask
.28f0	0d 02 05	ora $0502			ora 	IFNewSign
.28f3	85 1b		sta $1b				sta 	IFRTemp+IExp
.28f5	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.28f7	20 01 2b	jsr $2b01			jsr 	IFloatCopyFromRegister
.28fa	18		clc				clc
.28fb	60		rts				rts
.28fc					_IFDFDivZero:
.28fc	38		sec				sec
.28fd	60		rts				rts
.28fe					IFloatDivideSupport:
.28fe	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.2900	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.2903	5a		phy				phy 								; main division loop x 23
.2904	a0 17		ldy #$17			ldy 	#23
.2906					_IFDSLoop:
.2906	20 39 27	jsr $2739			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2909	20 2d 27	jsr $272d			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.290c	88		dey				dey
.290d	d0 f7		bne $2906			bne 	_IFDSLoop 					; do it 24 times
.290f	7a		ply				ply
.2910	60		rts				rts
.2911					IFloatIntegerToStringR0:
.2911	8d 03 05	sta $0503			sta 	IFBase 						; save base to use.
.2914	20 f1 2b	jsr $2bf1			jsr 	IFloatBufferReset			; empty buffer
.2917	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.2919	29 3f		and #$3f			and 	#IFXMask
.291b	d0 1e		bne $293b			bne 	_IFIFail
.291d	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.291f	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero
.2922	f0 0e		beq $2932			beq 	_IFINotNegative
.2924	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.2926	29 40		and #$40			and 	#IFSign
.2928	f0 08		beq $2932			beq 	_IFINotNegative
.292a	a9 2d		lda #$2d			lda 	#"-"						; output -
.292c	20 00 2c	jsr $2c00			jsr 	IFloatBufferWrite
.292f	20 7b 2b	jsr $2b7b			jsr 	IFloatNegate 				; tidy up !
.2932					_IFINotNegative:
.2932	20 3d 29	jsr $293d			jsr 	_IFIRecursiveConvert 		; start converting
.2935	20 f8 2b	jsr $2bf8			jsr 	IFloatGetBufferAddress
.2938	18		clc				clc
.2939	80 01		bra $293c			bra 	_IFIExit
.293b					_IFIFail:
.293b	38		sec				sec
.293c					_IFIExit:
.293c	60		rts				rts
.293d					_IFIRecursiveConvert:
.293d	a2 10		ldx #$10			ldx 	#IFR1
.293f	20 12 2b	jsr $2b12			jsr 	IFloatCopyToRegister 		; R0->R1
.2942	a2 0c		ldx #$0c			ldx 	#IFR0
.2944	ad 03 05	lda $0503			lda 	IFBase 						; Base -> R0
.2947	20 72 2b	jsr $2b72			jsr 	IFloatSetByte
.294a	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.294c	20 d5 26	jsr $26d5			jsr 	IFloatDivideInteger
.294f	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.2951	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero
.2954	f0 09		beq $295f			beq 	_IFIOutDigit
.2956	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.2958	48		pha				pha
.2959	20 3d 29	jsr $293d			jsr 	_IFIRecursiveConvert 		; convert the divider
.295c	68		pla				pla
.295d	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.295f					_IFIOutDigit:
.295f	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.2961	c9 0a		cmp #$0a			cmp	 	#10
.2963	90 02		bcc $2967			bcc 	_IFINotHex
.2965	69 06		adc #$06			adc 	#6
.2967					_IFINotHex:
.2967	69 30		adc #$30			adc 	#48
.2969	20 00 2c	jsr $2c00			jsr 	IFloatBufferWrite
.296c	60		rts				rts
.0503					IFBase:
>0503							.fill 	1
.296d					IFloatFloatToStringR0:
.296d	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.296f	20 bf 2a	jsr $2abf			jsr 	IFloatPushRx
.2972	20 12 2b	jsr $2b12			jsr 	IFloatCopyToRegister
.2975	20 70 28	jsr $2870			jsr 	IFloatIntegerR0				; make R0 integer
.2978	a9 0a		lda #$0a			lda 	#10 						; base 10.
.297a	20 11 29	jsr $2911			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.297d	9c 04 05	stz $0504			stz 	IFloatDecimalCount 			; zero the decimal count.
.2980	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.2982	29 3f		and #$3f			and 	#IFXMask
.2984	f0 44		beq $29ca			beq 	_IFFSExit
.2986					_IFloatFracLoop:
.2986	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.2988	20 01 2b	jsr $2b01			jsr 	IFloatCopyFromRegister
.298b	20 1a 28	jsr $281a			jsr 	IFloatFractionalR0
.298e	20 a7 2b	jsr $2ba7			jsr 	IFloatNormalise
.2991	a2 14		ldx #$14			ldx 	#IFR2
.2993	20 12 2b	jsr $2b12			jsr 	IFloatCopyToRegister 		; copy to R2
.2996	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.2998	a9 0a		lda #$0a			lda 	#10
.299a	20 72 2b	jsr $2b72			jsr 	IFloatSetByte
.299d	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.299f	20 10 26	jsr $2610			jsr 	IFloatMultiply
.29a2	a2 14		ldx #$14			ldx 	#IFR2
.29a4	20 12 2b	jsr $2b12			jsr 	IFloatCopyToRegister
.29a7	20 70 28	jsr $2870			jsr 	IFloatIntegerR0 			; get integer part of R0
.29aa	ad 04 05	lda $0504			lda 	IFloatDecimalCount 			; done 5 dp, no more
.29ad	c9 03		cmp #$03			cmp 	#3
.29af	f0 16		beq $29c7			beq 	_IFFSExitStripZero
.29b1	ad 04 05	lda $0504			lda 	IFloatDecimalCount 			; written the DP yet ?
.29b4	d0 05		bne $29bb			bne 	_IFloatNotFirst
.29b6	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.29b8	20 00 2c	jsr $2c00			jsr 	IFloatBufferWrite
.29bb					_IFloatNotFirst:
.29bb	ee 04 05	inc $0504			inc 	IFloatDecimalCount
.29be	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.29c0	09 30		ora #$30			ora 	#"0"						; ASCII
.29c2	20 00 2c	jsr $2c00			jsr 	IFloatBufferWrite 			; write to the buffer.
.29c5	80 bf		bra $2986			bra 	_IFloatFracLoop
.29c7					_IFFSExitStripZero:
.29c7	20 0f 2c	jsr $2c0f			jsr 	IFloatStripTrailingZeros
.29ca					_IFFSExit:
.29ca	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.29cc	20 e0 2a	jsr $2ae0			jsr 	IFloatPullRx
.29cf	20 f8 2b	jsr $2bf8			jsr 	IFloatGetBufferAddress
.29d2	18		clc				clc
.29d3	60		rts				rts
.0504					IFloatDecimalCount:
>0504							.fill 	1
.29d4					IFloatStringToFloatR0:
.29d4	8d 05 05	sta $0505			sta 	IFCount 					; save it out.
.29d7	86 0a		stx $0a				stx 	iTemp0
.29d9	84 0b		sty $0b				sty 	iTemp0+1
.29db	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.29dd	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.29e0	9c 06 05	stz $0506			stz 	IFSignFlag 					; clear the sign flag
.29e3	20 70 2a	jsr $2a70			jsr 	IFSTFGetNext 				; get first
.29e6	f0 1b		beq $2a03			beq 	_IFSTFFail 					; no character
.29e8	90 10		bcc $29fa			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.29ea	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.29ec	d0 15		bne $2a03			bne 	_IFSTFFail
.29ee	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.29f0	8d 06 05	sta $0506			sta 	IFSignFlag
.29f3					_IFSTFLoop:
.29f3	20 70 2a	jsr $2a70			jsr 	IFSTFGetNext 				; get next
.29f6	b0 0b		bcs $2a03			bcs 	_IFSTFFail 					; bad character.
.29f8	f0 11		beq $2a0b			beq 	_IFSTFExit 					; end of data
.29fa					_IFSTFHaveChar:
.29fa	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.29fc	f0 08		beq $2a06			beq 	_IFSTFDecimal
.29fe	20 94 2a	jsr $2a94			jsr 	IFSTFAddR0 					; add number in
.2a01	80 f0		bra $29f3			bra 	_IFSTFLoop 					; keep going until . or end.
.2a03					_IFSTFFail:
.2a03	38		sec				sec
.2a04	80 0d		bra $2a13			bra 	_IFSTFReturn
.2a06					_IFSTFDecimal:
.2a06	20 1b 2a	jsr $2a1b			jsr 	IFSTFDecimal 				; call the decimal places code.
.2a09	b0 08		bcs $2a13			bcs 	_IFSTFReturn 				; error
.2a0b					_IFSTFExit:
.2a0b	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2a0d	0d 06 05	ora $0506			ora 	IFSignFlag
.2a10	85 0f		sta $0f				sta 	IFR0+IExp
.2a12	18		clc				clc
.2a13					_IFSTFReturn:
.2a13	60		rts				rts
.2a14					IFloatAddDecimalToR0:
.2a14	8d 05 05	sta $0505			sta 	IFCount 					; save it out.
.2a17	86 0a		stx $0a				stx 	iTemp0
.2a19	84 0b		sty $0b				sty 	iTemp0+1
.2a1b					IFSTFDecimal:
.2a1b	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2a1d	20 bf 2a	jsr $2abf			jsr 	IFloatPushRx
.2a20	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2a22	20 70 2b	jsr $2b70			jsr 	IFloatSetZero
.2a25	9c 07 05	stz $0507			stz 	IFDecimalPlaces
.2a28					_IFSTDLoop:
.2a28	20 70 2a	jsr $2a70			jsr 	IFSTFGetNext 				; get next
.2a2b	b0 41		bcs $2a6e			bcs 	_IFSTFFail2 				; bad character.
.2a2d	f0 11		beq $2a40			beq 	_IFSTFComplete 				; end of data, work out the result.
.2a2f	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2a31	f0 39		beq $2a6c			beq 	_IFSTFExit2
.2a33	20 94 2a	jsr $2a94			jsr 	IFSTFAddR0 					; add number in
.2a36	ee 07 05	inc $0507			inc 	IFDecimalPlaces 			; count decimals
.2a39	ad 07 05	lda $0507			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2a3c	c9 03		cmp #$03			cmp 	#3
.2a3e	90 e8		bcc $2a28			bcc 	_IFSTDLoop
.2a40					_IFSTFComplete:
.2a40	ad 07 05	lda $0507			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2a43	f0 27		beq $2a6c			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2a45	3a		dec a				dec 	a 							; table indexed from 1.
.2a46	0a		asl a				asl 	a
.2a47	0a		asl a				asl 	a
.2a48	aa		tax				tax
.2a49	bd ab 2a	lda $2aab,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2a4c	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2a4e	bd ac 2a	lda $2aac,x			lda 	TableTen+1,x
.2a51	85 11		sta $11				sta  	IFR1+IM1
.2a53	bd ad 2a	lda $2aad,x			lda 	TableTen+2,x
.2a56	85 12		sta $12				sta  	IFR1+IM2
.2a58	bd ae 2a	lda $2aae,x			lda 	TableTen+3,x
.2a5b	85 13		sta $13				sta  	IFR1+IExp
.2a5d	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2a5f	20 10 26	jsr $2610			jsr 	IFloatMultiply
.2a62	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.2a64	20 e0 2a	jsr $2ae0			jsr 	IFloatPullRx
.2a67	a2 10		ldx #$10			ldx 	#IFR1
.2a69	20 66 25	jsr $2566			jsr 	IFloatAdd
.2a6c					_IFSTFExit2:
.2a6c	18		clc				clc
.2a6d	60		rts				rts
.2a6e					_IFSTFFail2:
.2a6e	38		sec				sec
.2a6f	60		rts				rts
.2a70					IFSTFGetNext:
.2a70	ad 05 05	lda $0505			lda 	IFCount  					; if count is zero, return with Z set.
.2a73	f0 19		beq $2a8e			beq 	_IFSTFReturnOk
.2a75	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2a77	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2a79	d0 02		bne $2a7d			bne 	_IFSTFGNNoCarry
.2a7b	e6 0b		inc $0b				inc 	iTemp0+1
.2a7d					_IFSTFGNNoCarry:
.2a7d	ce 05 05	dec $0505			dec 	IFCount 					; dec count.
.2a80	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2a82	f0 08		beq $2a8c			beq 	_IFSTFGOkay
.2a84	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2a86	90 08		bcc $2a90			bcc 	_IFSTFGFail
.2a88	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2a8a	b0 04		bcs $2a90			bcs 	_IFSTFGFail
.2a8c					_IFSTFGOkay:
.2a8c	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2a8e					_IFSTFReturnOk:
.2a8e	18		clc				clc
.2a8f	60		rts				rts
.2a90					_IFSTFGFail:
.2a90	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2a92	38		sec				sec
.2a93	60		rts				rts
.2a94					IFSTFAddR0:
.2a94	29 0f		and #$0f			and 	#15 						; to int value
.2a96	48		pha				pha 								; save it.
.2a97	a9 0a		lda #$0a			lda 	#10
.2a99	a2 10		ldx #$10			ldx 	#IFR1
.2a9b	20 72 2b	jsr $2b72			jsr 	IFloatSetByte
.2a9e	20 10 26	jsr $2610			jsr 	IFloatMultiply
.2aa1	68		pla				pla
.2aa2	a2 10		ldx #$10			ldx 	#IFR1
.2aa4	20 72 2b	jsr $2b72			jsr 	IFloatSetByte
.2aa7	20 66 25	jsr $2566			jsr 	IFloatAdd
.2aaa	60		rts				rts
.0505					IFCount:
>0505							.fill 	1
.0506					IFSignFlag:
>0506							.fill 	1
.0507					IFDecimalPlaces:
>0507							.fill 	1
.2aab					TableTen:
>2aab	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2aaf	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2ab3	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2ab7	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2abb	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2abf					IFloatPushRx:
.2abf	5a		phy				phy
.2ac0	ac 08 05	ldy $0508			ldy 	IFStackIndex
.2ac3	b5 00		lda $00,x			lda 	IM0,x
.2ac5	99 09 05	sta $0509,y			sta 	IFStack,y
.2ac8	b5 01		lda $01,x			lda 	IM1,x
.2aca	99 0a 05	sta $050a,y			sta 	IFStack+1,y
.2acd	b5 02		lda $02,x			lda 	IM2,x
.2acf	99 0b 05	sta $050b,y			sta 	IFStack+2,y
.2ad2	b5 03		lda $03,x			lda 	IExp,x
.2ad4	99 0c 05	sta $050c,y			sta 	IFStack+3,y
.2ad7	c8		iny				iny
.2ad8	c8		iny				iny
.2ad9	c8		iny				iny
.2ada	c8		iny				iny
.2adb	8c 08 05	sty $0508			sty 	IFStackIndex
.2ade	7a		ply				ply
.2adf	60		rts				rts
.2ae0					IFloatPullRx:
.2ae0	5a		phy				phy
.2ae1	ac 08 05	ldy $0508			ldy 	IFStackIndex
.2ae4	88		dey				dey
.2ae5	88		dey				dey
.2ae6	88		dey				dey
.2ae7	88		dey				dey
.2ae8	b9 09 05	lda $0509,y			lda 	IFStack,y
.2aeb	95 00		sta $00,x			sta 	IM0,x
.2aed	b9 0a 05	lda $050a,y			lda 	IFStack+1,y
.2af0	95 01		sta $01,x			sta 	IM1,x
.2af2	b9 0b 05	lda $050b,y			lda 	IFStack+2,y
.2af5	95 02		sta $02,x			sta 	IM2,x
.2af7	b9 0c 05	lda $050c,y			lda 	IFStack+3,y
.2afa	95 03		sta $03,x			sta 	IExp,x
.2afc	8c 08 05	sty $0508			sty 	IFStackIndex
.2aff	7a		ply				ply
.2b00	60		rts				rts
.0508					IFStackIndex:
>0508							.fill 	1
.0509					IFStack:
>0509							.fill 	16*4
.2b01					IFloatCopyFromRegister:
.2b01	b5 00		lda $00,x			lda 	0,x
.2b03	85 0c		sta $0c				sta 	IFR0
.2b05	b5 01		lda $01,x			lda 	1,x
.2b07	85 0d		sta $0d				sta 	IFR0+1
.2b09	b5 02		lda $02,x			lda 	2,x
.2b0b	85 0e		sta $0e				sta 	IFR0+2
.2b0d	b5 03		lda $03,x			lda 	3,x
.2b0f	85 0f		sta $0f				sta 	IFR0+3
.2b11	60		rts				rts
.2b12					IFloatCopyToRegister:
.2b12	a5 0c		lda $0c				lda 	IFR0
.2b14	95 00		sta $00,x			sta 	0,x
.2b16	a5 0d		lda $0d				lda 	IFR0+1
.2b18	95 01		sta $01,x			sta 	1,x
.2b1a	a5 0e		lda $0e				lda 	IFR0+2
.2b1c	95 02		sta $02,x			sta 	2,x
.2b1e	a5 0f		lda $0f				lda 	IFR0+3
.2b20	95 03		sta $03,x			sta 	3,x
.2b22	60		rts				rts
.2b23					IFloatLoadInline:
.2b23	68		pla				pla 								; pop address off to iTemp0
.2b24	85 0a		sta $0a				sta 	iTemp0
.2b26	68		pla				pla
.2b27	85 0b		sta $0b				sta 	iTemp0+1
.2b29	a0 01		ldy #$01			ldy 	#1
.2b2b	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2b2d	95 00		sta $00,x			sta 	0,x
.2b2f	c8		iny				iny
.2b30	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.2b32	95 01		sta $01,x			sta 	1,x
.2b34	c8		iny				iny
.2b35	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2b37	95 02		sta $02,x			sta 	2,x
.2b39	c8		iny				iny
.2b3a	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2b3c	95 03		sta $03,x			sta 	3,x
.2b3e	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2b3f	a5 0a		lda $0a				lda 	iTemp0
.2b41	69 05		adc #$05			adc 	#5
.2b43	85 0a		sta $0a				sta 	iTemp0
.2b45	90 02		bcc $2b49			bcc 	_IFLINoCarry
.2b47	e6 0b		inc $0b				inc 	iTemp0+1
.2b49					_IFLINoCarry:
.2b49	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2b4c					IFloatMultiply8BitRx:
.2b4c	5a		phy		        phy
.2b4d	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2b4f	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2b51	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2b52	85 0c		sta $0c		        sta     IFR0+IM0
.2b54	84 0d		sty $0d		        sty     IFR0+IM1
.2b56	a9 00		lda #$00	        lda     #0
.2b58	a0 08		ldy #$08	        ldy     #8
.2b5a					_IFMLoop:
.2b5a	90 03		bcc $2b5f	        bcc     _IFMNoAdd
.2b5c	18		clc		        clc
.2b5d	65 0d		adc $0d		        adc     IFR0+IM1
.2b5f					_IFMNoAdd:
.2b5f	6a		ror a		        ror     a
.2b60	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2b62	88		dey		        dey
.2b63	d0 f5		bne $2b5a	        bne     _IFMLoop
.2b65	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2b67	7a		ply		        ply
.2b68	60		rts		        rts
.2b69					IFloatCheckZero:
.2b69	b5 00		lda $00,x			lda 	IM0,x
.2b6b	15 01		ora $01,x			ora 	IM1,x
.2b6d	15 02		ora $02,x			ora 	IM2,x
.2b6f	60		rts				rts
.2b70					IFloatSetZero:
.2b70	a9 00		lda #$00			lda 	#0
.2b72					IFloatSetByte:
.2b72	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2b74	74 01		stz $01,x			stz 	IM1,x
.2b76	74 02		stz $02,x			stz 	IM2,x
.2b78	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2b7a	60		rts				rts
.2b7b					IFloatNegate:
.2b7b	b5 03		lda $03,x			lda 	IExp,x
.2b7d	49 40		eor #$40			eor 	#IFSign
.2b7f	95 03		sta $03,x			sta 	IExp,x
.2b81	18		clc				clc
.2b82	60		rts				rts
.2b83					IFloatMantissaNegate:
.2b83	38		sec				sec
.2b84	a9 00		lda #$00			lda 	#0
.2b86	f5 00		sbc $00,x			sbc 	IM0,x
.2b88	95 00		sta $00,x			sta 	IM0,x
.2b8a	a9 00		lda #$00			lda 	#0
.2b8c	f5 01		sbc $01,x			sbc 	IM1,x
.2b8e	95 01		sta $01,x			sta 	IM1,x
.2b90	a9 00		lda #$00			lda 	#0
.2b92	f5 02		sbc $02,x			sbc 	IM2,x
.2b94	95 02		sta $02,x			sta 	IM2,x
.2b96	60		rts				rts
.2b97					IFloatShiftLeft:
.2b97	18		clc				clc
.2b98					IFloatRotateLeft:
.2b98	36 00		rol $00,x			rol 	IM0,x
.2b9a	36 01		rol $01,x			rol 	IM1,x
.2b9c	36 02		rol $02,x			rol 	IM2,x
.2b9e	60		rts				rts
.2b9f					IFloatShiftRight:
.2b9f	18		clc				clc
.2ba0					IFloatRotateRight:
.2ba0	76 02		ror $02,x			ror 	IM2,x
.2ba2	76 01		ror $01,x			ror 	IM1,x
.2ba4	76 00		ror $00,x			ror 	IM0,x
.2ba6	60		rts				rts
.2ba7					IFloatNormalise:
.2ba7	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero 			; is it zero
.2baa	f0 18		beq $2bc4			beq 	_IFNExitZero 				; if so exit
.2bac					_IFNLoop:
.2bac	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2bae	29 c0		and #$c0			and 	#$C0
.2bb0	c9 40		cmp #$40			cmp 	#$40
.2bb2	f0 13		beq $2bc7			beq 	_IFNExitOkay 				; if so , then we are done.
.2bb4	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2bb6	29 3f		and #$3f			and 	#$3F
.2bb8	c9 20		cmp #$20			cmp 	#$20
.2bba	f0 0b		beq $2bc7			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2bbc	20 dd 2b	jsr $2bdd			jsr 	IFloatDecExponent
.2bbf	20 97 2b	jsr $2b97			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2bc2	80 e8		bra $2bac			bra 	_IFNLoop
.2bc4					_IFNExitZero:
.2bc4	20 70 2b	jsr $2b70			jsr 	IFloatSetZero 				; set the result to zero
.2bc7					_IFNExitOkay:
.2bc7	18		clc				clc  								; return with CC.
.2bc8	60		rts				rts
.2bc9					IFloatIncExponent:
.2bc9	b5 03		lda $03,x			lda 	IExp,x
.2bcb	48		pha				pha
.2bcc	29 c0		and #$c0			and 	#$C0
.2bce	8d 49 05	sta $0549			sta 	IFXTemp
.2bd1	68		pla				pla
.2bd2	1a		inc a				inc 	a
.2bd3	29 3f		and #$3f			and 	#$3F
.2bd5	48		pha				pha
.2bd6	0d 49 05	ora $0549			ora 	IFXTemp
.2bd9	95 03		sta $03,x			sta 	IExp,x
.2bdb	68		pla				pla
.2bdc	60		rts				rts
.2bdd					IFloatDecExponent:
.2bdd	b5 03		lda $03,x			lda 	IExp,x
.2bdf	48		pha				pha
.2be0	29 c0		and #$c0			and 	#$C0
.2be2	8d 49 05	sta $0549			sta 	IFXTemp
.2be5	68		pla				pla
.2be6	3a		dec a				dec 	a
.2be7	29 3f		and #$3f			and 	#$3F
.2be9	48		pha				pha
.2bea	0d 49 05	ora $0549			ora 	IFXTemp
.2bed	95 03		sta $03,x			sta 	IExp,x
.2bef	68		pla				pla
.2bf0	60		rts				rts
.0549					IFXTemp:
>0549							.fill 	1
.2bf1					IFloatBufferReset:
.2bf1	9c 4a 05	stz $054a			stz 	IFBufferCount
.2bf4	9c 4b 05	stz $054b			stz 	IFBuffer
.2bf7	60		rts				rts
.2bf8					IFloatGetBufferAddress:
.2bf8	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.2bfa	a2 4b		ldx #$4b			ldx 	#(IFBuffer & $FF)
.2bfc	ad 4a 05	lda $054a			lda 	IFBufferCount
.2bff	60		rts				rts
.2c00					IFloatBufferWrite:
.2c00	da		phx				phx
.2c01	ae 4a 05	ldx $054a			ldx 	IFBufferCount
.2c04	9d 4b 05	sta $054b,x			sta 	IFBuffer,x
.2c07	9e 4c 05	stz $054c,x			stz 	IFBuffer+1,x
.2c0a	ee 4a 05	inc $054a			inc 	IFBufferCount
.2c0d	fa		plx				plx
.2c0e	60		rts				rts
.2c0f					IFloatStripTrailingZeros:
.2c0f	ae 4a 05	ldx $054a			ldx 	IFBufferCount
.2c12	bd 4a 05	lda $054a,x			lda 	IFBuffer-1,x
.2c15	c9 30		cmp #$30			cmp		#"0"
.2c17	d0 0f		bne $2c28			bne 	_IFSTExit
.2c19	bd 49 05	lda $0549,x			lda 	IFBuffer-2,x
.2c1c	c9 2e		cmp #$2e			cmp 	#"."
.2c1e	f0 08		beq $2c28			beq 	_IFSTExit
.2c20	ce 4a 05	dec $054a			dec 	IFBufferCount
.2c23	9e 4a 05	stz $054a,x			stz 	IFBuffer-1,x
.2c26	80 e7		bra $2c0f			bra 	IFloatStripTrailingZeros
.2c28					_IFSTExit:
.2c28	60		rts				rts
.054a					IFBufferCount:
>054a							.fill 	1
.054b					IFBuffer:
>054b							.fill 	25
.2c29					IFloatCheck:
.2c29	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2c2b	09 40		ora #$40			ora 	#IFSign
.2c2d	85 0f		sta $0f				sta 	IFR0+IExp
.2c2f	20 66 25	jsr $2566			jsr 	IFloatAdd 					; add allowed to error.
.2c32	a2 0c		ldx #$0c			ldx 	#IFR0
.2c34	20 69 2b	jsr $2b69			jsr 	IFloatCheckZero 			; error if < 0
.2c37	f0 06		beq $2c3f			beq 	_IFAOkay
.2c39	a5 0f		lda $0f				lda 	IFR0+IExp
.2c3b	29 40		and #$40			and 	#IFSign
.2c3d	d0 01		bne $2c40			bne 	_IFAFail
.2c3f					_IFAOkay:
.2c3f	60		rts				rts
.2c40					_IFAFail:
.2c40	38		sec				sec
.2c41	68		pla				pla 								; get address - 2
.2c42	e9 02		sbc #$02			sbc 	#2
.2c44	aa		tax				tax
.2c45	68		pla				pla
.2c46	e9 00		sbc #$00			sbc 	#0
.2c48	a8		tay				tay
.2c49	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2c4b					_IFAStop:
>2c4b	db						.byte 	$DB 						; display an error AA ADR ADR
.2c4c	80 fd		bra $2c4b			bra 	_IFAStop

;******  Return to file: basic.asm

.2c4e					NotImplemented:
.2c4e	a9 ff		lda #$ff			lda 	#$FF
.2c50	80 04		bra $2c56			bra 	EnterDbg
.2c52					ErrorHandler:
.2c52	fa		plx				plx
.2c53	7a		ply				ply
.2c54	a9 ee		lda #$ee			lda 	#$EE
.2c56					EnterDbg:
>2c56	db						.byte 	$DB
.2c57	4c 56 2c	jmp $2c56			jmp 	EnterDbg

;******  End of listing
