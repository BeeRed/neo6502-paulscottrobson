
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3C00" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Sat Jul 22 15:54:57 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3c00					BASICCODE=$3C00
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/zramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0022					fsBlock:
>0022							.fill 	2

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 3c		ldx #$3c			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 22 24	jsr $2422			jsr 	PGMSetBaseAddress
.1007	20 3f 31	jsr $313f			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.100f	4c 23 18	jmp $1823			jmp 	Command_RUN
.1012	4c 27 17	jmp $1727			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="R"					AM_RELATIVE 	= 'R' 						; bra nnnn
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="T"					AM_ABSOLUTEI  	= 'T' 						; jmp (nnnn)   [only instance]
="U"					AM_ABSOLUTEIX	= 'U' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d4					AM_ZIND 	= ('T'|AM_ZPAGE) 				; lda (nn)
=$d5					AM_ZINDX	= ('U'|AM_ZPAGE) 				; lda (nn,x)
=$d6					AM_ZINDY	= ('V'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_THEN = $88
=$89					PR_PROC = $89
=$8a					PR_ENDPROC = $8a
=$8b					PR_FOR = $8b
=$8c					PR_STRUCTURE_LAST = $8c
=$8c					PR_NEXT = $8c
=$8d					PR_STANDARD_FIRST = $8d
=$8d					PR_LSQLSQENDRSQRSQ = $8d
=$8e					PR_LSQLSQSHIFTRSQRSQ = $8e
=$8f					PR_ELSE = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_PERIOD = $a5
=$a6					PR_STANDARD_LAST = $a6
=$a6					PR_RSQLSQ = $a6
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8e80					PR_CLEAR = $8e80
=$8e81					PR_NEW = $8e81
=$8e82					PR_RUN = $8e82
=$8e83					PR_STOP = $8e83
=$8e84					PR_END = $8e84
=$8e85					PR_ASSERT = $8e85
=$8e86					PR_LIST = $8e86
=$8e87					PR_SAVE = $8e87
=$8e88					PR_LOAD = $8e88
=$8e89					PR_GOSUB = $8e89
=$8e8a					PR_GOTO = $8e8a
=$8e8b					PR_RETURN = $8e8b
=$8e8c					PR_RESTORE = $8e8c
=$8e8d					PR_DIM = $8e8d
=$8e8e					PR_DIR = $8e8e
=$8e8f					PR_ERASE = $8e8f
=$8e90					PR_RENUMBER = $8e90
=$8e91					PR_OPT = $8e91

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0a00					TOKLineSize:
>0a00							.fill 	1
.0a01					TOKLineNumber:
>0a01							.fill 	2
.0a03					TOKBuffer:
>0a03							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.1015					Command_AssemblerStart:
.1015					_CALoop:
.1015	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.1017	c8		iny				iny 								; consume it.
.1018	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.101a	f0 19		beq $1035			beq 	_CALabel
.101c	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.101e	f0 41		beq $1061			beq 	_CAExit
.1020	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.1022	f0 f1		beq $1015			beq 	_CALoop
.1024	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; end of line.
.1026	f0 18		beq $1040			beq 	_CAEnd
.1028	c9 f7		cmp #$f7			cmp 	#PR_AND	 					; AND is an opcode *and* a keyword
.102a	f0 0e		beq $103a			beq 	_CAOpcode
.102c	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.102e	c9 40		cmp #$40			cmp 	#$40
.1030	f0 08		beq $103a			beq 	_CAOpcode
.1032	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.1035					_CALabel:
.1035	20 bf 12	jsr $12bf			jsr 	ASLabel 					; handle a label
.1038	80 db		bra $1015			bra 	_CALoop
.103a					_CAOpcode:
.103a	88		dey				dey 								; get it back
.103b	20 d6 11	jsr $11d6			jsr 	ASOpcode 					; assemble that opcode.
.103e	80 d5		bra $1015			bra 	_CALoop
.1040	18		clc		_CAEnd:	clc 								; next line
.1041	b2 18		lda ($18)			lda 	(codePtr)
.1043	65 18		adc $18				adc 	codePtr
.1045	85 18		sta $18				sta 	codePtr
.1047	90 02		bcc $104b			bcc 	_CANoCarry
.1049	e6 19		inc $19				inc 	codePtr+1
.104b					_CANoCarry:
.104b	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.104d	b1 18		lda ($18),y			lda 	(codePtr),y
.104f	8d 31 0c	sta $0c31			sta 	ERRLine
.1052	c8		iny				iny
.1053	b1 18		lda ($18),y			lda 	(codePtr),y
.1055	8d 32 0c	sta $0c32			sta 	ERRLine+1
.1058	a0 03		ldy #$03			ldy 	#3 							; tokenised code position.
.105a	b2 18		lda ($18)			lda 	(codePtr) 					; code present
.105c	d0 b7		bne $1015			bne 	_CALoop 					; go round again
.105e	4c 93 18	jmp $1893			jmp 	Command_END 				; do END.
.1061					_CAExit:
.1061	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/calcopcode.asm

.1062					ASCalculateOpcodeHash:
.1062	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for AND token.
.1064	c9 f7		cmp #$f7			cmp 	#PR_AND
.1066	f0 28		beq $1090			beq 	_ASCOAnd
.1068	20 94 10	jsr $1094			jsr 	_ASCGetCharacter 			; get first alphanumeric character 0-25 rep A-Z
.106b	20 a1 10	jsr $10a1			jsr 	_ASCProcess 				; go through the shift/multiply process
.106e	85 24		sta $24				sta 	zTemp0
.1070	20 94 10	jsr $1094			jsr 	_ASCGetCharacter 			; get second alphanumeric character
.1073	18		clc				clc
.1074	65 24		adc $24				adc 	zTemp0 						; add previous result.
.1076	2a		rol a				rol 	a 							; 8 bit rotate left
.1077	69 00		adc #$00			adc 	#0
.1079	49 a5		eor #$a5			eor 	#165 						; XOR with 165
.107b	20 a1 10	jsr $10a1			jsr 	_ASCProcess 				; and shift/multiply again.
.107e	85 24		sta $24				sta 	zTemp0
.1080	20 94 10	jsr $1094			jsr 	_ASCGetCharacter 			; get third character
.1083	18		clc				clc
.1084	65 24		adc $24				adc 	zTemp0 						; and add
.1086	48		pha				pha
.1087	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by
.1089	c9 7c		cmp #$7c			cmp 	#$7C 						; $7C which identifies end of identifier.
.108b	d0 1f		bne $10ac			bne 	_ASCSyntax
.108d	c8		iny				iny
.108e	68		pla				pla 								; restore and exit
.108f	60		rts				rts
.1090					_ASCOAnd:
.1090	c8		iny				iny 								; consume the token.
.1091	a9 6a		lda #$6a			lda 	#106 						; the hash value for "AND"
.1093	60		rts				rts
.1094					_ASCGetCharacter:
.1094	b1 18		lda ($18),y			lda 	(codePtr),y 				; get and consume character
.1096	c8		iny				iny
.1097	38		sec				sec
.1098	e9 40		sbc #$40			sbc 	#$40 						; shift $40 -> $00
.109a	30 10		bmi $10ac			bmi 	_ASCSyntax 					; check range.
.109c	c9 1a		cmp #$1a			cmp 	#26
.109e	b0 0c		bcs $10ac			bcs 	_ASCSyntax
.10a0	60		rts				rts
.10a1					_ASCProcess:
.10a1	85 25		sta $25				sta 	zTemp0+1 					; multiply by 5
.10a3	0a		asl a				asl 	a
.10a4	0a		asl a				asl 	a
.10a5	18		clc				clc
.10a6	65 25		adc $25				adc 	zTemp0+1
.10a8	18		clc				clc 								; add 68
.10a9	69 44		adc #$44			adc 	#68
.10ab	60		rts				rts
.10ac					_ASCSyntax:
.10ac	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/generate.asm

.10af					ASGenerateCode:
.10af	5a		phy				phy
.10b0	a2 00		ldx #$00			ldx 	#0
.10b2					_ASGSearch:
.10b2	bd f8 1d	lda $1df8,x			lda 	AssemblerLookup,x 			; check table
.10b5	cd 04 0b	cmp $0b04			cmp 	ASCurrOpcode 				; do we have a match ?
.10b8	d0 0e		bne $10c8			bne 	_ASGNoMatch
.10ba	da		phx				phx 								; save X
.10bb	8a		txa				txa 								; get the address mode for this instruction
.10bc	8d 03 0b	sta $0b03			sta 	ASGOpcode
.10bf	20 71 11	jsr $1171			jsr 	ASGetModeForOpcode 			; into A.
.10c2	20 d0 10	jsr $10d0			jsr 	ASGTryGenerate		 		; try to generate with mode A
.10c5	fa		plx				plx
.10c6	b0 06		bcs $10ce			bcs 	_ASGDone 					; successful :)
.10c8					_ASGNoMatch:
.10c8	e8		inx				inx 								; keep going.
.10c9	d0 e7		bne $10b2			bne 	_ASGSearch
.10cb	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.10ce					_ASGDone:
.10ce	7a		ply				ply
.10cf	60		rts				rts
.10d0					ASGTryGenerate:
.10d0	c9 52		cmp #$52			cmp 	#AM_RELATIVE 				; is it relative (will identify as absolute)
.10d2	f0 58		beq $112c			beq 	_ASGRelative
.10d4	cd 05 0b	cmp $0b05			cmp 	ASCurrMode 					; do the modes match ?
.10d7	f0 26		beq $10ff			beq 	_ASGMatches 				; yes, we have a result.
.10d9	ae 05 0b	ldx $0b05			ldx 	ASCurrMode 					; get the instruction mode.
.10dc	e0 41		cpx #$41			cpx 	#AM_ABSOLUTE 				; is it an absolute we can try as ZP
.10de	f0 12		beq $10f2			beq 	_ASGTryZero 				; this works because in the 65C02 all the
.10e0	e0 58		cpx #$58			cpx 	#AM_ABSOLUTEX 				; ZP equivalents are before the Absolutes
.10e2	f0 0e		beq $10f2			beq 	_ASGTryZero 				; numerically.
.10e4	e0 59		cpx #$59			cpx 	#AM_ABSOLUTEY
.10e6	f0 0a		beq $10f2			beq 	_ASGTryZero
.10e8	e0 54		cpx #$54			cpx 	#AM_ABSOLUTEI
.10ea	f0 06		beq $10f2			beq 	_ASGTryZero
.10ec	e0 55		cpx #$55			cpx 	#AM_ABSOLUTEIX
.10ee	f0 02		beq $10f2			beq 	_ASGTryZero
.10f0					_ASGFail:
.10f0	18		clc				clc 								; give up.
.10f1	60		rts				rts
.10f2					_ASGTryZero:
.10f2	29 7f		and #$7f			and 	#$7F 						; this is the ZP equivalent of A,AX,AY ?
.10f4	cd 05 0b	cmp $0b05			cmp 	ASCurrMode 					; does that match ?
.10f7	d0 f7		bne $10f0			bne  	_ASGFail 					; no, this won't work.
.10f9	09 80		ora #$80			ora 	#$80 						; try with a ZP
.10fb	a6 09		ldx $09				ldx 	IFR0+IM1 					; check if this is okay for zero page.
.10fd	d0 f1		bne $10f0			bne 	_ASGFail 					; cannot use as the value is too large (e.g. >256)
.10ff					_ASGMatches:
.10ff	48		pha				pha
.1100	20 7a 12	jsr $127a			jsr 	ASAddress 					; address out.
.1103	ad 03 0b	lda $0b03			lda 	ASGOpcode 					; write opcode
.1106	20 55 12	jsr $1255			jsr 	ASWriteByte 				; write a byte
.1109	68		pla				pla
.110a	c9 49		cmp #$49			cmp 	#AM_IMPLIED 				; dispatch
.110c	f0 0e		beq $111c			beq 	_ASGExit
.110e	c9 00		cmp #$00			cmp 	#0
.1110	30 0f		bmi $1121			bmi 	_ASGZeroPage
.1112					_ASGAbsolute:
.1112	a5 08		lda $08				lda 	IFR0+IM0
.1114	20 55 12	jsr $1255			jsr 	ASWriteByte
.1117	a5 09		lda $09				lda 	IFR0+IM1
.1119					_ASGWExit:
.1119	20 55 12	jsr $1255			jsr 	ASWriteByte
.111c					_ASGExit:
.111c	20 97 12	jsr $1297			jsr 	ASEndLine
.111f	38		sec				sec
.1120	60		rts				rts
.1121					_ASGZeroPage:
.1121	a5 09		lda $09				lda 	IFR0+IM1 					; check operand
.1123	f0 03		beq $1128			beq 	_ASGWriteLSB
.1125	4c a3 2a	jmp $2aa3		jmp	ErrorV_value
.1128					_ASGWriteLSB:
.1128	a5 08		lda $08				lda 	IFR0+IM0
.112a	80 ed		bra $1119			bra 	_ASGWExit
.112c					_ASGRelative:
.112c	48		pha				pha
.112d	20 7a 12	jsr $127a			jsr 	ASAddress 					; address out.
.1130	ad 03 0b	lda $0b03			lda 	ASGOpcode 					; write opcode
.1133	20 55 12	jsr $1255			jsr 	ASWriteByte 				; write a byte
.1136	68		pla				pla
.1137	ad 05 0b	lda $0b05			lda 	ASCurrMode 					; check absolute.
.113a	c9 41		cmp #$41			cmp 	#AM_ABSOLUTE
.113c	f0 03		beq $1141			beq 	_ASGCalcCheck
.113e	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.1141					_ASGCalcCheck:
.1141	ad 06 0b	lda $0b06			lda 	ASMOption 					; if pass bit set, just write junk
.1144	29 02		and #$02			and 	#2
.1146	aa		tax				tax
.1147	f0 1c		beq $1165			beq 	_ASGRout
.1149	18		clc				clc 								; calculate offset, borrowing one.
.114a	a5 08		lda $08				lda 	IFR0+IM0
.114c	ed b5 0c	sbc $0cb5			sbc 	('P'-'A')*4 + FastVariables + 0
.114f	aa		tax				tax
.1150	a5 09		lda $09				lda 	IFR0+IM1
.1152	ed b6 0c	sbc $0cb6			sbc 	('P'-'A')*4 + FastVariables + 1
.1155	85 24		sta $24				sta 	zTemp0 						; save MSB temporarily
.1157	e0 00		cpx #$00			cpx 	#0 							; if X is -ve A needs to be $FF so inc so it needs to be $00
.1159	10 01		bpl $115c			bpl 	_ASGForward
.115b	1a		inc a				inc 	a
.115c					_ASGForward:
.115c	c9 00		cmp #$00			cmp 	#0
.115e	d0 0e		bne $116e			bne 	_ASGRange
.1160	8a		txa				txa 								; MSB and LSB need to be the same sign.
.1161	45 24		eor $24				eor 	zTemp0
.1163	30 09		bmi $116e			bmi 	_ASGRange
.1165					_ASGRout:
.1165	8a		txa				txa
.1166	20 55 12	jsr $1255			jsr 	ASWriteByte 				; write the relative branch
.1169	20 97 12	jsr $1297			jsr 	ASEndLine
.116c	38		sec				sec
.116d	60		rts				rts
.116e					_ASGRange:
.116e	4c 92 2a	jmp $2a92		jmp	ErrorV_range
.0b03					ASGOpcode:
>0b03							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/getmode.asm

.1171					ASGetModeForOpcode:
.1171	5a		phy				phy
.1172	a8		tay				tay 								; save in Y
.1173	a2 00		ldx #$00			ldx 	#0
.1175					_ASGSearch:
.1175	98		tya				tya 								; check if opcode matches
.1176	dd bb 11	cmp $11bb,x			cmp 	ASGSpecialCases,x
.1179	f0 1b		beq $1196			beq 	_ASGIsSpecial
.117b	e8		inx				inx
.117c	e8		inx				inx
.117d	bd bb 11	lda $11bb,x			lda 	ASGSpecialCases,x 			; check end of table ($F3 is an illegal 65C02 opcode)
.1180	c9 f3		cmp #$f3			cmp 	#$F3
.1182	d0 f1		bne $1175			bne 	_ASGSearch
.1184	98		tya				tya 								; only interested in lower 5 bits.
.1185	29 1f		and #$1f			and 	#$1F
.1187	a8		tay				tay
.1188	29 0f		and #$0f			and 	#$0F 						; lower 4 bits of the opcode
.118a	0a		asl a				asl 	a 							; index into ASG Table
.118b	aa		tax				tax
.118c	c0 10		cpy #$10			cpy 	#$10 						; was bit 5 set,  e.g. the MSB is odd
.118e	90 01		bcc $1191			bcc 	_ASGEven
.1190	e8		inx				inx 								; if so, take from second half.
.1191					_ASGEven:
.1191	bd 9b 11	lda $119b,x			lda 	ASGTable,x 					; fetch the mode from the table
.1194	7a		ply				ply
.1195	60		rts				rts
.1196					_ASGIsSpecial:
.1196	bd bc 11	lda $11bc,x			lda 	ASGSpecialCases+1,x 		; get special case for that mode.
.1199	7a		ply				ply
.119a	60		rts				rts
.119b					ASGTable:
>119b	a3 52						.byte 	AM_IMMEDIATE,AM_RELATIVE				; x0
>119d	d5 d6						.byte 	AM_ZINDX,AM_ZINDY 						; x1
>119f	a3 d4						.byte 	AM_IMMEDIATE,AM_ZIND 					; x2
>11a1	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x3 (all NOP)
>11a3	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x4
>11a5	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x5
>11a7	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x6
>11a9	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; x7
>11ab	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x8
>11ad	a3 59						.byte 	AM_IMMEDIATE,AM_ABSOLUTEY				; x9
>11af	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xA
>11b1	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xB
>11b3	41 41						.byte 	AM_ABSOLUTE,AM_ABSOLUTE 				; xC
>11b5	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xD
>11b7	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xE
>11b9	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; xF
.11bb					ASGSpecialCases:
>11bb	80 52						.byte	$80	,	AM_RELATIVE						;	BRA	rel
>11bd	14 c1						.byte	$14	,	AM_ZERO							;	TRB	nn
>11bf	96 d9						.byte	$96	,	AM_ZEROY						;	STX	nn,y
>11c1	b6 d9						.byte	$B6	,	AM_ZEROY						;	LDX	nn,y
>11c3	3c 58						.byte	$3C	,	AM_ABSOLUTEX					;	BIT	nnnn,x
>11c5	6c 54						.byte	$6C	,	AM_ABSOLUTEI					;	JMP	(nnnn)
>11c7	7c 55						.byte	$7C	,	AM_ABSOLUTEIX					;	JMP 	(nnnn,x)
>11c9	bc 58						.byte	$BC	,	AM_ABSOLUTEX					;	LDY	nnnn,x
>11cb	be 59						.byte	$BE	,	AM_ABSOLUTEY					;	LDX	nnnn,y
>11cd	00 49						.byte	$00	,	AM_IMPLIED						;	BRK
>11cf	20 41						.byte	$20	,	AM_ABSOLUTE						;	JSR	nnnn
>11d1	40 49						.byte	$40	,	AM_IMPLIED						;	RTI
>11d3	60 49						.byte	$60	,	AM_IMPLIED						;	RTS
>11d5	f3						.byte 	$F3 									; (illegal opcode)

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/instruction.asm

.11d6					ASOpcode:
.11d6	20 62 10	jsr $1062			jsr 	ASCalculateOpcodeHash 		; calculate the opcode hash.
.11d9	8d 04 0b	sta $0b04			sta 	ASCurrOpcode
.11dc	20 e6 11	jsr $11e6			jsr 	ASIdentifyAddressMode 		; identify the address mode type.
.11df	8d 05 0b	sta $0b05			sta 	ASCurrMode
.11e2	20 af 10	jsr $10af			jsr 	ASGenerateCode 				; search and generate appropriate code.
.11e5	60		rts				rts
.0b04					ASCurrOpcode:
>0b04							.fill 	1
.0b05					ASCurrMode:
>0b05							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/parsemode.asm

.11e6					ASIdentifyAddressMode:
.11e6	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next ?
.11e8	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ  		; EOL or : => implied
.11ea	f0 17		beq $1203			beq 	_ASImplied
.11ec	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11ee	f0 13		beq $1203			beq 	_ASImplied
.11f0	c9 a4		cmp #$a4			cmp 	#PR_HASH 					; # then immediate
.11f2	f0 12		beq $1206			beq 	_ASImmediate
.11f4	c9 eb		cmp #$eb			cmp 	#PR_LPAREN 					; if ( then indirection of some sort.
.11f6	f0 15		beq $120d			beq 	_ASIndirect
.11f8	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; remaining choices are nnnn nnnn,x and nnnn,y
.11fb	20 35 12	jsr $1235			jsr 	ASCheckIndex 				; check index follows
.11fe	b0 02		bcs $1202			bcs 	_ASIndexed 					; index found ? then it will return X Y
.1200	a9 41		lda #$41			lda 	#AM_ABSOLUTE 				; otherwise return A
.1202					_ASIndexed:
.1202	60		rts				rts
.1203					_ASImplied:
.1203	a9 49		lda #$49			lda 	#AM_IMPLIED 				; return implied mode
.1205	60		rts				rts
.1206					_ASImmediate:
.1206	c8		iny				iny 								; consume #
.1207	20 8c 1a	jsr $1a8c			jsr 	EXPEvalInteger8 			; 8 bit operand
.120a	a9 a3		lda #$a3			lda 	#AM_IMMEDIATE
.120c	60		rts				rts
.120d					_ASIndirect:
.120d	c8		iny				iny 								; consume the open bracket
.120e	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; we do this because of jmp (xxxx) and (xxxx,x)
.1211	20 35 12	jsr $1235			jsr 	ASCheckIndex 				; look for ,X
.1214	b0 12		bcs $1228			bcs 	_ASInternalIndirect 		; ,X or ,Y found.
.1216	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 				; not found. Must be ) or ),Y
.1219	20 35 12	jsr $1235			jsr 	ASCheckIndex
.121c	90 07		bcc $1225			bcc 	_ASIIndirect 				; if ,[XY] not found, then exit assuming (xxxx)
.121e	c9 59		cmp #$59			cmp 	#"Y" 						; must be ,Y in this mode.
.1220	d0 10		bne $1232			bne 	ASCISyntax 					; if not error
.1222	a9 d6		lda #$d6			lda 	#AM_ZINDY 					; return (nn),y
.1224	60		rts				rts
.1225					_ASIIndirect:
.1225	a9 54		lda #$54			lda 	#AM_ABSOLUTEI 				; might be jmp (xxxx)
.1227	60		rts				rts
.1228					_ASInternalIndirect:
.1228	c9 58		cmp #$58			cmp 	#"X"						; must have been X
.122a	d0 06		bne $1232			bne 	ASCISyntax 					; error if (nn,y) not allowed !
.122c	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 				; check complete e.g. (nnnn,x)
.122f	a9 55		lda #$55			lda 	#AM_ABSOLUTEIX 				; because it might be JMP (nnnn,x)
.1231	60		rts				rts
.1232					ASCISyntax:
.1232	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.1235					ASCheckIndex:
.1235	b1 18		lda ($18),y			lda 	(codePtr),y 				; check comma ?
.1237	c9 99		cmp #$99			cmp 	#PR_COMMA
.1239	d0 18		bne $1253			bne 	_ASCIFail
.123b	c8		iny				iny 								; consume comma
.123c	b1 18		lda ($18),y			lda 	(codePtr),y
.123e	c9 57		cmp #$57			cmp 	#'X'-'A'+$40 				; check if X or Y
.1240	f0 04		beq $1246			beq 	_ASCIFound
.1242	c9 58		cmp #$58			cmp 	#'Y'-'A'+$40
.1244	d0 ec		bne $1232			bne 	ASCISyntax
.1246					_ASCIFound:
.1246	aa		tax				tax 								; save X or Y in X
.1247	c8		iny				iny 								; consume
.1248	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by end of identifier
.124a	c8		iny				iny
.124b	c9 7c		cmp #$7c			cmp 	#$7C
.124d	d0 e3		bne $1232			bne 	ASCISyntax
.124f	8a		txa				txa 								; get X/Y back
.1250	1a		inc a				inc 	a 							; convert to 'X' or 'Y' characters
.1251	38		sec				sec
.1252	60		rts				rts
.1253					_ASCIFail:
.1253	18		clc				clc
.1254	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/write.asm

.1255					ASWriteByte:
.1255	ae b5 0c	ldx $0cb5			ldx 	('P'-'A')*4 + FastVariables + 0
.1258	86 24		stx $24				stx 	zTemp0
.125a	ae b6 0c	ldx $0cb6			ldx 	('P'-'A')*4 + FastVariables + 1
.125d	86 25		stx $25				stx 	zTemp0+1
.125f	92 24		sta ($24)			sta 	(zTemp0)
.1261	aa		tax				tax
.1262	ad 06 0b	lda $0b06			lda 	ASMOption
.1265	4a		lsr a				lsr 	a
.1266	90 09		bcc $1271			bcc 	_ASWBNoEcho
.1268	a9 20		lda #$20			lda 	#32
.126a	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.126d	8a		txa				txa
.126e	20 a3 12	jsr $12a3			jsr 	ASPrintHex
.1271					_ASWBNoEcho:
.1271	ee b5 0c	inc $0cb5			inc 	('P'-'A')*4 + FastVariables + 0
.1274	d0 03		bne $1279			bne 	_ASWBNoCarry
.1276	ee b6 0c	inc $0cb6			inc 	('P'-'A')*4 + FastVariables + 1
.1279					_ASWBNoCarry:
.1279	60		rts				rts
.127a					ASAddress:
.127a	ad 06 0b	lda $0b06			lda 	ASMOption
.127d	4a		lsr a				lsr 	a
.127e	90 16		bcc $1296			bcc 	_ASAExit
.1280	ad b6 0c	lda $0cb6			lda 	('P'-'A')*4 + FastVariables + 1
.1283	20 a3 12	jsr $12a3			jsr 	ASPrintHex
.1286	ad b5 0c	lda $0cb5			lda 	('P'-'A')*4 + FastVariables + 0
.1289	20 a3 12	jsr $12a3			jsr 	ASPrintHex
.128c	a9 20		lda #$20			lda 	#32
.128e	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1291	a9 3a		lda #$3a			lda 	#':'
.1293	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1296					_ASAExit:
.1296	60		rts				rts
.1297					ASEndLine:
.1297	ad 06 0b	lda $0b06			lda 	ASMOption
.129a	4a		lsr a				lsr 	a
.129b	90 05		bcc $12a2			bcc 	_ASEExit
.129d	a9 0d		lda #$0d			lda 	#13
.129f	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.12a2					_ASEExit:
.12a2	60		rts				rts
.12a3					ASPrintHex:
.12a3	48		pha				pha
.12a4	4a		lsr a				lsr 	a
.12a5	4a		lsr a				lsr 	a
.12a6	4a		lsr a				lsr 	a
.12a7	4a		lsr a				lsr 	a
.12a8	20 ac 12	jsr $12ac			jsr 	_ASPrintNibble
.12ab	68		pla				pla
.12ac					_ASPrintNibble:
.12ac	29 0f		and #$0f			and 	#15
.12ae	c9 0a		cmp #$0a			cmp 	#10
.12b0	90 02		bcc $12b4			bcc 	_ASNotHex
.12b2	69 06		adc #$06			adc 	#6
.12b4					_ASNotHex:
.12b4	69 30		adc #$30			adc 	#48
.12b6	c9 40		cmp #$40			cmp 	#64
.12b8	90 02		bcc $12bc			bcc 	_ASNotChar
.12ba	49 20		eor #$20			eor 	#32
.12bc					_ASNotChar:
.12bc	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.12bf					ASLabel:
.12bf	20 f6 1a	jsr $1af6			jsr 	EXPTermR0 					; get term
.12c2	90 38		bcc $12fc			bcc 	_ALError 					; must be a reference term.
.12c4	24 0b		bit $0b				bit 	IFR0+IExp	 				; string reference ?
.12c6	30 34		bmi $12fc			bmi 	_ALError
.12c8	ad 06 0b	lda $0b06			lda 	ASMOption 					; on pass 2 (e.g. OPT bit 1 is set)
.12cb	29 02		and #$02			and 	#2
.12cd	f0 16		beq $12e5			beq 	_ASLNoCheck
.12cf	5a		phy				phy 								; if the variable changes there's an error.
.12d0	b2 08		lda ($08)			lda 	(IFR0+IM0)
.12d2	f0 05		beq $12d9			beq 	_ASLOk1						; (providing not changed from zero)
.12d4	cd b5 0c	cmp $0cb5			cmp 	('P'-'A')*4 + FastVariables
.12d7	d0 26		bne $12ff			bne 	_ALChanged
.12d9					_ASLOk1:
.12d9	a0 01		ldy #$01			ldy 	#1
.12db	b1 08		lda ($08),y			lda 	(IFR0+IM0),y
.12dd	f0 05		beq $12e4			beq 	_ASLOk2
.12df	cd b6 0c	cmp $0cb6			cmp 	('P'-'A')*4 + FastVariables+1
.12e2	d0 1b		bne $12ff			bne 	_ALChanged
.12e4					_ASLOk2:
.12e4	7a		ply				ply
.12e5					_ASLNoCheck:
.12e5	5a		phy				phy
.12e6	ad b5 0c	lda $0cb5			lda 	('P'-'A')*4 + FastVariables	; copy P to variable
.12e9	92 08		sta ($08)			sta 	(IFR0+IM0)
.12eb	a0 01		ldy #$01			ldy 	#1
.12ed	ad b6 0c	lda $0cb6			lda 	('P'-'A')*4 + FastVariables+1
.12f0	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12f2	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.12f4	c8		iny				iny
.12f5	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12f7	c8		iny				iny
.12f8	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12fa	7a		ply				ply
.12fb	60		rts				rts
.12fc					_ALError:
.12fc	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.12ff					_ALChanged:
.12ff	4c 52 2c	jmp $2c52		jmp	ErrorV_align

;******  Return to file: include.files


;******  Processing file: src/assembler/opt.asm

.1302					Command_OPT:
.1302	20 8c 1a	jsr $1a8c			jsr 	EXPEvalInteger8
.1305	8d 06 0b	sta $0b06			sta 	ASMOption
.1308	60		rts				rts
.0b06					ASMOption:
>0b06							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1309					Command_ASSERT:
.1309	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 				; get a number to assert
.130c	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.130e	20 4b 37	jsr $374b			jsr 	IFloatCheckZero
.1311	f0 01		beq $1314			beq 	_CAFail 					; if so, the assert fails.
.1313	60		rts				rts
.1314					_CAFail:
.1314	4c d7 2a	jmp $2ad7		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1317					Command_CLEAR:
.1317	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1319	c9 9b		cmp #$9b			cmp 	#PR_COLON
.131b	f0 14		beq $1331			beq 	_CLNoParam
.131d	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ
.131f	f0 10		beq $1331			beq 	_CLNoParam
.1321	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; address for CLEAR
.1324	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1326	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1328	b0 0b		bcs $1335			bcs 	_CLMemory
.132a	c9 3d		cmp #$3d			cmp 	#(BASICCODE >> 8)+1 		; too low
.132c	90 07		bcc $1335			bcc 	_CLMemory
.132e	8d 20 0b	sta $0b20			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1331					_CLNoParam:
.1331	20 38 13	jsr $1338			jsr 	ClearCode
.1334	60		rts				rts
.1335					_CLMemory:
.1335	4c 71 2b	jmp $2b71		jmp	ErrorV_memory
.1338					ClearCode:
.1338	20 35 24	jsr $2435			jsr 	PGMEndProgram 				; end program => zTemp0
.133b	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.133d	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.133f	1a		inc a				inc 	a
.1340	85 2b		sta $2b				sta 	freeMemory+1
.1342	20 de 30	jsr $30de			jsr 	VARClearHashTables
.1345	ad 20 0b	lda $0b20			lda 	PGMEndMemoryHigh
.1348	20 da 2c	jsr $2cda			jsr 	StackReset 					; page passed on in A
.134b	20 39 2d	jsr $2d39			jsr 	StringSystemInitialise
.134e	20 ec 29	jsr $29ec			jsr 	ScanProcedures
.1351	20 f5 17	jsr $17f5			jsr 	Command_RESTORE
.1354	60		rts				rts
.1355					AllocateMemory:
.1355	5a		phy				phy 								; save Y
.1356	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.1358	5a		phy				phy
.1359	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.135b	5a		phy				phy
.135c	a8		tay				tay 								; count is now in XY
.135d					_AllocateLoop:
.135d	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.135f	d0 04		bne $1365			bne 	_AllocateOne
.1361	c0 00		cpy #$00			cpy 	#0
.1363	f0 15		beq $137a			beq 	_AllocateExit
.1365					_AllocateOne:
.1365	a9 00		lda #$00			lda 	#0 							; zero byte
.1367	92 2a		sta ($2a)			sta 	(freeMemory)
.1369	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.136b	d0 05		bne $1372			bne 	_AllocateSkipCarry
.136d	e6 2b		inc $2b				inc 	freeMemory+1
.136f	20 7e 13	jsr $137e			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.1372					_AllocateSkipCarry:
.1372	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1374	d0 01		bne $1377			bne 	_AllocateSkipBorrow
.1376	ca		dex				dex
.1377					_AllocateSkipBorrow:
.1377	88		dey				dey
.1378	80 e3		bra $135d			bra 	_AllocateLoop
.137a					_AllocateExit:
.137a	fa		plx				plx 								; restore address
.137b	68		pla				pla
.137c	7a		ply				ply 								; restore Y
.137d	60		rts				rts
.137e					ClearCheckMemory:
.137e	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.1380	1a		inc a				inc 	a 							; spacing 2 pages
.1381	1a		inc a				inc 	a
.1382	cd 28 0c	cmp $0c28			cmp 	stringMemory+1 				; problems if hit string memory
.1385	b0 01		bcs $1388			bcs  	_CCMError
.1387	60		rts				rts
.1388					_CCMError:
.1388	4c 71 2b	jmp $2b71		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.138b					CommandDIM:
.138b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.138d	29 c0		and #$c0			and 	#$C0
.138f	c9 40		cmp #$40			cmp 	#$40
.1391	d0 39		bne $13cc			bne 	_CDSyntax 					; no syntax error
.1393	20 95 30	jsr $3095			jsr 	VARGetInfo 					; get information
.1396	ad 36 0c	lda $0c36			lda 	VARType 					; check array.
.1399	29 02		and #$02			and 	#2
.139b	f0 2f		beq $13cc			beq 	_CDSyntax
.139d	20 47 30	jsr $3047			jsr 	VARFind 					; does it already exist. that's an error
.13a0	b0 2d		bcs $13cf			bcs 	_CDExists
.13a2	20 f3 2f	jsr $2ff3			jsr 	VARCreate 					; create it - returns data ptr in XA
.13a5	da		phx				phx 								; save target address
.13a6	48		pha				pha
.13a7	ad 36 0c	lda $0c36			lda 	VARType 					; type ID.
.13aa	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.13ac	20 d2 13	jsr $13d2			jsr 	CreateArray 				; create array to XA
.13af	84 26		sty $26				sty 	zTemp1 						; save Y
.13b1	7a		ply				ply 								; restore target to zTemp0
.13b2	84 24		sty $24				sty 	zTemp0
.13b4	7a		ply				ply
.13b5	84 25		sty $25				sty 	zTemp0+1
.13b7	92 24		sta ($24)			sta 	(zTemp0) 					; save new array pointer.
.13b9	a0 01		ldy #$01			ldy 	#1
.13bb	8a		txa				txa
.13bc	91 24		sta ($24),y			sta 	(zTemp0),y
.13be	a4 26		ldy $26				ldy 	zTemp1 						; restore Y
.13c0	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 				; check )
.13c3	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.13c5	c8		iny				iny 								; dim a(4),b(6)
.13c6	c9 99		cmp #$99			cmp 	#PR_COMMA
.13c8	f0 c1		beq $138b			beq 	CommandDIM
.13ca	88		dey				dey
.13cb	60		rts				rts
.13cc					_CDSyntax:
.13cc	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.13cf					_CDExists:
.13cf	4c 49 2b	jmp $2b49		jmp	ErrorV_redefine
.13d2					CreateArray:
.13d2	8d 07 0b	sta $0b07			sta 	CAType						; save type
.13d5	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; get array dimension to R0
.13d8	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.13da	c9 99		cmp #$99			cmp 	#PR_COMMA
.13dc	f0 04		beq $13e2			beq 	_CATwoDimensions
.13de	20 2e 14	jsr $142e			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.13e1	60		rts				rts
.13e2					_CATwoDimensions:
.13e2	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.13e4	8d 09 0b	sta $0b09			sta 	CADim1+1
.13e7	a5 08		lda $08				lda 	IFR0+IM0
.13e9	8d 08 0b	sta $0b08			sta 	CADim1+0
.13ec	20 74 2c	jsr $2c74			jsr 	ERRCheckComma 				; check comma
.13ef	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.13f2	5a		phy				phy 								; save Y position
.13f3	18		clc				clc 								; allocate the outer array of pointers.
.13f4	ae 09 0b	ldx $0b09			ldx 	CADim1+1
.13f7	ad 08 0b	lda $0b08			lda 	CADim1
.13fa	20 6d 14	jsr $146d			jsr 	CSAAllocate 				; allocate the outer array
.13fd	da		phx				phx									; save this address on the stack
.13fe	48		pha				pha
.13ff	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.1401	85 28		sta $28				sta 	zTemp2
.1403					_CACreateSubLoop:
.1403	38		sec				sec
.1404	20 2e 14	jsr $142e			jsr 	CreateSingleArray 			; create data array of required size.
.1407	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1409	91 28		sta ($28),y			sta 	(zTemp2),y
.140b	8a		txa				txa
.140c	c8		iny				iny
.140d	91 28		sta ($28),y			sta 	(zTemp2),y
.140f	18		clc				clc  								; next slot.
.1410	a5 28		lda $28				lda 	zTemp2
.1412	69 02		adc #$02			adc 	#2
.1414	85 28		sta $28				sta 	zTemp2
.1416	90 02		bcc $141a			bcc 	_CACNoCarry
.1418	e6 29		inc $29				inc 	zTemp2+1
.141a					_CACNoCarry:
.141a	ad 08 0b	lda $0b08			lda 	CADim1 						; use DIM1 as a counter
.141d	d0 03		bne $1422			bne 	_CACNoBorrow
.141f	ce 09 0b	dec $0b09			dec 	CADim1+1
.1422					_CACNoBorrow:
.1422	ce 08 0b	dec $0b08			dec 	CADim1
.1425	ad 09 0b	lda $0b09			lda 	CADim1+1 					; but do one more.
.1428	10 d9		bpl $1403			bpl 	_CACreateSubLoop
.142a	68		pla				pla
.142b	fa		plx				plx
.142c	7a		ply				ply
.142d	60		rts				rts
.142e					CreateSingleArray:
.142e	5a		phy				phy
.142f	38		sec				sec 								; allocate memory block all zeros.
.1430	a5 08		lda $08				lda 	IFR0+IM0
.1432	a6 09		ldx $09				ldx 	IFR0+IM1
.1434	20 6d 14	jsr $146d			jsr 	CSAAllocate
.1437	ac 07 0b	ldy $0b07			ldy 	CAType 						; if numbers, we don't need to initialise.
.143a	f0 2f		beq $146b			beq 	_CSANoInit
.143c	da		phx				phx 								; save address of new array
.143d	48		pha				pha
.143e	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.1440	86 25		stx $25				stx 	zTemp0+1
.1442	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1444	b1 24		lda ($24),y			lda 	(zTemp0),y
.1446	a8		tay				tay
.1447	b2 24		lda ($24)			lda 	(zTemp0)
.1449	aa		tax				tax
.144a					_CSAEraseString:
.144a	5a		phy				phy
.144b	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.144d	a9 80		lda #$80			lda 	#$80
.144f	91 24		sta ($24),y			sta 	(zTemp0),y
.1451	7a		ply				ply
.1452	18		clc				clc 								; add 4 to next slot.
.1453	a5 24		lda $24				lda 	zTemp0
.1455	69 04		adc #$04			adc 	#4
.1457	85 24		sta $24				sta 	zTemp0
.1459	90 02		bcc $145d			bcc 	_CSAENoCarry
.145b	e6 25		inc $25				inc 	zTemp0+1
.145d					_CSAENoCarry:
.145d	e0 00		cpx #$00			cpx 	#0
.145f	d0 01		bne $1462			bne 	_CSANoBorrow
.1461	88		dey				dey
.1462					_CSANoBorrow:
.1462	ca		dex				dex
.1463	d0 e5		bne $144a			bne 	_CSAEraseString
.1465	c0 00		cpy #$00			cpy 	#0
.1467	d0 e1		bne $144a			bne 	_CSAEraseString
.1469	68		pla				pla
.146a	fa		plx				plx
.146b					_CSANoInit:
.146b	7a		ply				ply
.146c	60		rts				rts
.146d					CSAAllocate:
.146d	08		php				php 								; save type flag.
.146e	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.146f	d0 01		bne $1472			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1471	e8		inx				inx
.1472					_CSAANoCarry:
.1472	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1474	b0 2e		bcs $14a4			bcs 	_CSARange
.1476	28		plp				plp 								; restore type flag
.1477	08		php				php 								; save it back again.
.1478	da		phx				phx 								; save size.
.1479	48		pha				pha
.147a	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.147c	90 03		bcc $1481			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.147e	0a		asl a				asl 	a
.147f	26 25		rol $25				rol 	zTemp0+1
.1481					_CSAATimes2:
.1481	0a		asl a				asl 	a
.1482	26 25		rol $25				rol 	zTemp0+1
.1484	18		clc				clc
.1485	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1487	90 02		bcc $148b			bcc 	_CSAANoCarry2
.1489	e6 25		inc $25				inc 	zTemp0+1
.148b					_CSAANoCarry2:
.148b	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.148d	20 55 13	jsr $1355			jsr 	AllocateMemory 				; allocate memory to XA
.1490	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.1492	85 24		sta $24				sta 	zTemp0
.1494	68		pla				pla  								; write element count to first 2 bytes
.1495	92 24		sta ($24)			sta 	(zTemp0)
.1497	68		pla				pla 								; msb of element count
.1498	28		plp				plp 								; CC if pointer array
.1499	b0 02		bcs $149d			bcs 	_CSAAIsData
.149b	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.149d					_CSAAIsData:
.149d	a0 01		ldy #$01			ldy 	#1
.149f	91 24		sta ($24),y			sta 	(zTemp0),y
.14a1	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.14a3	60		rts				rts
.14a4					_CSARange:
.14a4	4c 92 2a	jmp $2a92		jmp	ErrorV_range
.0b07					CAType:
>0b07							.fill 	1
.0b08					CADim1:
>0b08							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.14a7					Command_Doke:
.14a7	38		sec				sec
.14a8	80 01		bra $14ab			bra 	DPCommon
.14aa					Command_Poke:
.14aa	18		clc				clc
.14ab					DPCommon:
.14ab	08		php				php 								; CS if DOKE
.14ac	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; address
.14af	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.14b1	48		pha				pha
.14b2	a5 09		lda $09				lda 	IFR0+IM1
.14b4	48		pha				pha
.14b5	20 74 2c	jsr $2c74			jsr 	ERRCheckComma 				; [dp]oke address,data
.14b8	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16
.14bb	68		pla				pla 								; get address back
.14bc	85 25		sta $25				sta 	zTemp0+1
.14be	68		pla				pla
.14bf	85 24		sta $24				sta 	zTemp0
.14c1	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.14c3	92 24		sta ($24)			sta 	(zTemp0)
.14c5	28		plp				plp 								; done if CC
.14c6	90 08		bcc $14d0			bcc 	_DPExit
.14c8	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.14c9	a5 09		lda $09				lda 	IFR0+IM1
.14cb	a0 01		ldy #$01			ldy 	#1
.14cd	91 24		sta ($24),y			sta 	(zTemp0),y
.14cf	7a		ply				ply
.14d0					_DPExit:
.14d0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.14d1					Command_GOTO:
.14d1	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; get line number
.14d4					GotoR0:
.14d4	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh 				; back to the program start
.14d7	85 19		sta $19				sta 	codePtr+1
.14d9	64 18		stz $18				stz 	codePtr
.14db					_GOSearch:
.14db	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.14dd	f0 1f		beq $14fe			beq 	_GOError
.14df	a0 01		ldy #$01			ldy 	#1 							; found line #
.14e1	b1 18		lda ($18),y			lda 	(codePtr),y
.14e3	c5 08		cmp $08				cmp 	IFR0+IM0
.14e5	d0 0a		bne $14f1			bne 	_GONext
.14e7	c8		iny				iny
.14e8	b1 18		lda ($18),y			lda 	(codePtr),y
.14ea	c5 09		cmp $09				cmp 	IFR0+IM1
.14ec	d0 03		bne $14f1			bne 	_GONext
.14ee	4c 3a 18	jmp $183a			jmp 	RUNNewLine
.14f1					_GONext:
.14f1	18		clc				clc 								; advance to next line.
.14f2	b2 18		lda ($18)			lda 	(codePtr)
.14f4	65 18		adc $18				adc 	codePtr
.14f6	85 18		sta $18				sta 	codePtr
.14f8	90 e1		bcc $14db			bcc 	_GOSearch
.14fa	e6 19		inc $19				inc 	codePtr+1
.14fc	80 dd		bra $14db			bra 	_GOSearch
.14fe					_GOError:
.14fe	4c 16 2c	jmp $2c16		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1501					Command_Input:
.1501	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.1503	8d 0a 0b	sta $0b0a			sta 	InputFlag
.1506	80 03		bra $150b			bra 	Command_IP_Main
.1508					Command_Print:
.1508	9c 0a 0b	stz $0b0a			stz 	InputFlag
.150b					Command_IP_Main:
.150b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.150c					_CPLoop:
.150c	08		php				php 								; save "last action" flag
.150d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.150f	c9 8d		cmp #$8d			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1511	f0 48		beq $155b			beq 	_CPExit 					; without consuming
.1513	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1515	f0 44		beq $155b			beq 	_CPExit
.1517	68		pla				pla 								; throw last action flag
.1518	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and consume
.151a	c8		iny				iny
.151b	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon (syntax seperator)
.151d	f0 39		beq $1558			beq 	_CPContinueWithSameLine
.151f	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma (tab)
.1521	f0 30		beq $1553			beq 	_CPTab
.1523	88		dey				dey 								; undo the get.
.1524	2c 0a 0b	bit $0b0a			bit 	InputFlag 					; check for Input
.1527	10 0b		bpl $1534			bpl	 	_CPNotInput
.1529	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.152b	c9 40		cmp #$40			cmp 	#$40
.152d	d0 05		bne $1534			bne 	_CPNotInput
.152f	20 64 15	jsr $1564			jsr 	_CPInputCode 				; input code
.1532	80 d7		bra $150b			bra 	Command_IP_Main 			; and go round again.
.1534					_CPNotInput:
.1534	20 2e 1a	jsr $1a2e			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1537	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1539	10 0e		bpl $1549			bpl 	_CPNumber
.153b	5a		phy				phy
.153c	18		clc				clc 								; string address to YX
.153d	a5 08		lda $08				lda 	IFR0+IM0
.153f	aa		tax				tax
.1540	a5 09		lda $09				lda 	IFR0+IM1
.1542	a8		tay				tay
.1543	20 98 15	jsr $1598			jsr 	CPPrintYX 					; print YX
.1546	7a		ply				ply
.1547	80 c2		bra $150b			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1549					_CPNumber:
.1549	5a		phy				phy
.154a	20 4f 35	jsr $354f			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.154d	20 98 15	jsr $1598			jsr 	CPPrintYX 					; print string at YX
.1550	7a		ply				ply
.1551	80 b8		bra $150b			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1553					_CPTab:
.1553	a9 09		lda #$09			lda 	#9 							; print TAB
.1555	20 b0 15	jsr $15b0			jsr 	CPPrintA
.1558					_CPContinueWithSameLine:
.1558	38		sec				sec 								; loop round with carry set, which
.1559	80 b1		bra $150c			bra 	_CPLoop 					; will inhibit final CR
.155b					_CPExit:
.155b	28		plp				plp 								; get last action flag
.155c	b0 05		bcs $1563			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.155e	a9 0d		lda #$0d			lda 	#13 						; print new line
.1560	20 b0 15	jsr $15b0			jsr 	CPPrintA
.1563					_CPExit2:
.1563	60		rts				rts
.1564					_CPInputCode:
.1564	20 f6 1a	jsr $1af6			jsr 	EXPTermR0 					; get the term, the thing being input to
.1567	5a		phy				phy 								; save position
.1568	20 ad 15	jsr $15ad			jsr 	CPInputA					; input a line to YX
.156b	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.156d	30 18		bmi $1587			bmi 	_CPInputString
.156f	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1571	48		pha				pha
.1572	a5 09		lda $09				lda 	IFR0+IM1
.1574	48		pha				pha
.1575	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.1577	84 25		sty $25				sty 	zTemp0+1
.1579	20 e0 1d	jsr $1de0			jsr 	VALConversionZTemp0
.157c	68		pla				pla 								; do the assign.
.157d	85 25		sta $25				sta 	zTemp0+1
.157f	68		pla				pla
.1580	85 24		sta $24				sta 	zTemp0
.1582	20 d8 15	jsr $15d8			jsr 	AssignNumber
.1585	7a		ply				ply
.1586	60		rts				rts
.1587					_CPInputString:
.1587	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1589	85 24		sta $24				sta 	zTemp0
.158b	a5 09		lda $09				lda 	IFR0+IM1
.158d	85 25		sta $25				sta 	zTemp0+1
.158f	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1591	84 09		sty $09				sty 	IFR0+IM1
.1593	20 ef 15	jsr $15ef			jsr 	AssignString 				; assign the string
.1596	7a		ply				ply 								; exit
.1597	60		rts				rts
.1598					CPPrintYX:
.1598	86 24		stx $24				stx 	zTemp0
.159a	84 25		sty $25				sty 	zTemp0+1
.159c	b2 24		lda ($24)			lda 	(zTemp0)
.159e	aa		tax				tax
.159f	f0 0b		beq $15ac			beq 	_CPPrintExit
.15a1	a0 01		ldy #$01			ldy 	#1
.15a3					_CPPrintAYXLoop:
.15a3	b1 24		lda ($24),y			lda 	(zTemp0),y
.15a5	20 b0 15	jsr $15b0			jsr 	CPPrintA
.15a8	c8		iny				iny
.15a9	ca		dex				dex
.15aa	d0 f7		bne $15a3			bne 	_CPPrintAYXLoop
.15ac					_CPPrintExit:
.15ac	60		rts				rts
.15ad					CPInputA:
.15ad	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.15b0					CPPrintA:
.15b0	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.0b0a					InputFlag:
>0b0a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.15b3					CommandLET:
.15b3	20 f6 1a	jsr $1af6			jsr 	EXPTermR0 					; get term
.15b6	90 6f		bcc $1627			bcc 	CLError 					; must be a reference term.
.15b8	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.15ba	48		pha				pha
.15bb	a5 09		lda $09				lda 	IFR0+IM1
.15bd	48		pha				pha
.15be	a5 0b		lda $0b				lda 	IFR0+IExp
.15c0	48		pha				pha
.15c1	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.15c3	20 7c 2c	jsr $2c7c			jsr 	ERRCheckA
.15c6	20 2e 1a	jsr $1a2e			jsr 	EXPEvaluateExpression 		; right hand side.
.15c9	68		pla				pla 								; restore type of l-expr
.15ca	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.15cc	30 5c		bmi $162a			bmi 	CLType
.15ce	fa		plx				plx 	 							; pop target address to zTemp0
.15cf	86 25		stx $25				stx 	zTemp0+1
.15d1	fa		plx				plx
.15d2	86 24		stx $24				stx 	zTemp0
.15d4					AssignData:
.15d4	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.15d6	30 17		bmi $15ef			bmi 	AssignString
.15d8					AssignNumber:
.15d8	5a		phy				phy
.15d9	a0 03		ldy #$03			ldy 	#3
.15db	a5 0b		lda $0b				lda 	IFR0+IExp
.15dd	91 24		sta ($24),y			sta 	(zTemp0),y
.15df	88		dey				dey
.15e0	a5 0a		lda $0a				lda 	IFR0+IM2
.15e2	91 24		sta ($24),y			sta 	(zTemp0),y
.15e4	88		dey				dey
.15e5	a5 09		lda $09				lda 	IFR0+IM1
.15e7	91 24		sta ($24),y			sta 	(zTemp0),y
.15e9	a5 08		lda $08				lda 	IFR0+IM0
.15eb	92 24		sta ($24)			sta 	(zTemp0)
.15ed	7a		ply				ply
.15ee	60		rts				rts
.15ef					AssignString:
.15ef	5a		phy				phy
.15f0	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.15f2	b1 24		lda ($24),y			lda 	(zTemp0),y
.15f4	12 24		ora ($24)			ora 	(zTemp0)
.15f6	f0 23		beq $161b			beq 	_CLConcreteString
.15f8	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.15fa	85 26		sta $26				sta 	zTemp1
.15fc	b1 24		lda ($24),y			lda 	(zTemp0),y
.15fe	85 27		sta $27				sta 	zTemp1+1
.1600	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.1602	38		sec				sec 								; we want 3 for slot size, status, string size.
.1603	e9 03		sbc #$03			sbc 	#3
.1605	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1607	90 12		bcc $161b			bcc 	_CLConcreteString 			; if it won't fit concrete the string again.
.1609	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte)
.160b	1a		inc a				inc 	a
.160c	aa		tax				tax
.160d	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.160f					_CLReplaceString:
.160f	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1611	c8		iny				iny
.1612	c8		iny				iny
.1613	91 26		sta ($26),y			sta 	(zTemp1),y
.1615	88		dey				dey
.1616	ca		dex				dex
.1617	d0 f6		bne $160f			bne 	_CLReplaceString
.1619	80 0a		bra $1625			bra 	_CLExit
.161b					_CLConcreteString:
.161b	20 ee 2c	jsr $2cee			jsr 	StringConcrete  			; concreted string in XA.
.161e	a0 01		ldy #$01			ldy 	#1 							; store the address
.1620	92 24		sta ($24)			sta 	(zTemp0)
.1622	8a		txa				txa
.1623	91 24		sta ($24),y			sta 	(zTemp0),y
.1625					_CLExit:
.1625	7a		ply				ply
.1626	60		rts				rts
.1627					CLError:
.1627	4c b4 2b	jmp $2bb4		jmp	ErrorV_variable
.162a					CLType:
.162a	4c b1 2a	jmp $2ab1		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.162d					Command_LIST:
.162d	a9 06		lda #$06			lda 	#6 							; set default spacing.
.162f	8d 0f 0b	sta $0b0f			sta 	CLIndent
.1632	9c 0b 0b	stz $0b0b			stz 	CLFrom 						; default from
.1635	9c 0c 0b	stz $0b0c			stz 	CLFrom+1
.1638	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.163a	c9 99		cmp #$99			cmp 	#PR_COMMA
.163c	f0 1d		beq $165b			beq 	_CLToLine
.163e	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1640	f0 37		beq $1679			beq 	_CLDefaultTo
.1642	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1645	a5 08		lda $08				lda 	IFR0+IM0
.1647	8d 0b 0b	sta $0b0b			sta 	CLFrom
.164a	8d 0d 0b	sta $0b0d			sta 	CLTo
.164d	a5 09		lda $09				lda 	IFR0+IM1
.164f	8d 0c 0b	sta $0b0c			sta 	CLFrom+1
.1652	8d 0e 0b	sta $0b0e			sta 	CLTo+1
.1655	b1 18		lda ($18),y			lda 	(codePtr),y
.1657	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1659	f0 26		beq $1681			beq 	_CLList
.165b					_CLToLine:
.165b	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.165d	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.165f	f0 18		beq $1679			beq 	_CLDefaultTo
.1661	20 74 2c	jsr $2c74			jsr 	ERRCheckComma 				; sep comma
.1664	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1666	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ
.1668	f0 0f		beq $1679			beq 	_CLDefaultTo
.166a	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; there's a To value.
.166d	a5 08		lda $08				lda 	IFR0+IM0
.166f	8d 0d 0b	sta $0b0d			sta 	CLTo
.1672	a5 09		lda $09				lda 	IFR0+IM1
.1674	8d 0e 0b	sta $0b0e			sta 	CLTo+1
.1677	80 08		bra $1681			bra 	_CLList
.1679					_CLDefaultTo:
.1679	a9 ff		lda #$ff			lda 	#$FF
.167b	8d 0d 0b	sta $0b0d			sta 	CLTo
.167e	8d 0e 0b	sta $0b0e			sta 	CLTo+1
.1681					_CLList:
.1681	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh 				; back to the program start
.1684	85 19		sta $19				sta 	codePtr+1
.1686	64 18		stz $18				stz 	codePtr
.1688	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.168a	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.168c	20 7b 22	jsr $227b			jsr 	TOKSetDetokeniseOutput
.168f					_CLLoop:
.168f	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1691	f0 6f		beq $1702			beq 	_CLExit
.1693	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1696	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1699	d0 6a		bne $1705			bne 	_CLBreak
.169b	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.169d	20 08 17	jsr $1708			jsr 	_CLCompareLine
.16a0	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.16a2	f0 51		beq $16f5			beq 	_CLNext
.16a4	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.16a6	20 08 17	jsr $1708			jsr 	_CLCompareLine
.16a9	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.16ab	f0 48		beq $16f5			beq 	_CLNext
.16ad	a0 02		ldy #$02			ldy 	#2 							; print line #
.16af	b1 18		lda ($18),y			lda 	(codePtr),y
.16b1	aa		tax				tax
.16b2	88		dey				dey
.16b3	b1 18		lda ($18),y			lda 	(codePtr),y
.16b5	20 0c 2f	jsr $2f0c			jsr 	WriteIntXA
.16b8	20 56 29	jsr $2956			jsr 	GetIndent
.16bb	48		pha				pha
.16bc	10 0d		bpl $16cb			bpl 	_CLSpacing 					; skip if +ve
.16be	18		clc				clc 								; move backwards
.16bf	6d 0f 0b	adc $0b0f			adc 	CLIndent
.16c2	c9 06		cmp #$06			cmp 	#6 							; no further than this
.16c4	b0 02		bcs $16c8			bcs 	_CLSaveIndent
.16c6	a9 06		lda #$06			lda 	#6
.16c8					_CLSaveIndent:
.16c8	8d 0f 0b	sta $0b0f			sta 	CLIndent 					; update the indent.
.16cb					_CLSpacing:
.16cb	a9 20		lda #$20			lda 	#32
.16cd	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.16d0	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.16d3	ec 0f 0b	cpx $0b0f			cpx 	CLIndent
.16d6	d0 f3		bne $16cb			bne 	_CLSpacing
.16d8	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.16da	a5 18		lda $18				lda 	codePtr
.16dc	18		clc				clc
.16dd	69 03		adc #$03			adc 	#3
.16df	aa		tax				tax
.16e0	90 01		bcc $16e3			bcc 	_CLNoCarry2
.16e2	c8		iny				iny
.16e3					_CLNoCarry2:
.16e3	20 20 22	jsr $2220			jsr 	TOKDetokenise
.16e6	a9 0d		lda #$0d			lda 	#13	 						; next line
.16e8	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.16eb	68		pla				pla 								; get indent up
.16ec	30 07		bmi $16f5			bmi 	_CLNext 				 	; if +ve add to indent
.16ee	18		clc				clc
.16ef	6d 0f 0b	adc $0b0f			adc 	CLIndent
.16f2	8d 0f 0b	sta $0b0f			sta 	CLIndent
.16f5					_CLNext:
.16f5	18		clc				clc 								; advance to next line.
.16f6	b2 18		lda ($18)			lda 	(codePtr)
.16f8	65 18		adc $18				adc 	codePtr
.16fa	85 18		sta $18				sta 	codePtr
.16fc	90 02		bcc $1700			bcc 	_CLNoCarry
.16fe	e6 19		inc $19				inc 	codePtr+1
.1700					_CLNoCarry:
.1700	80 8d		bra $168f			bra 	_CLLoop
.1702					_CLExit:
.1702	4c 2b 2f	jmp $2f2b			jmp 	WarmStart
.1705					_CLBreak:
.1705	4c 0c 2c	jmp $2c0c		jmp	ErrorV_break
.1708					_CLCompareLine:
.1708	a0 01		ldy #$01			ldy 	#1
.170a	38		sec				sec
.170b	b1 18		lda ($18),y			lda 	(codePtr),y
.170d	fd 0b 0b	sbc $0b0b,x			sbc 	CLFrom,x
.1710	85 24		sta $24				sta 	zTemp0
.1712	c8		iny				iny
.1713	b1 18		lda ($18),y			lda 	(codePtr),y
.1715	fd 0c 0b	sbc $0b0c,x			sbc 	CLFrom+1,x
.1718	90 0a		bcc $1724			bcc 	_CLIsNegative
.171a	d0 05		bne $1721			bne 	_CLIsPositive
.171c	a5 24		lda $24				lda 	zTemp0
.171e	d0 01		bne $1721			bne 	_CLIsPositive
.1720	60		rts				rts
.1721					_CLIsPositive:
.1721	a9 01		lda #$01			lda 	#1
.1723	60		rts				rts
.1724					_CLIsNegative:
.1724	a9 ff		lda #$ff			lda 	#255
.1726	60		rts				rts
.0b0b					CLFrom:
>0b0b							.fill 	2
.0b0d					CLTo:
>0b0d							.fill 	2
.0b0f					CLIndent:
>0b0f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1727					Command_NEW:
.1727	20 29 24	jsr $2429			jsr 	PGMNewProgram 				; Reset current program
.172a	20 38 13	jsr $1338			jsr 	ClearCode 					; Run CLR
.172d	4c 93 18	jmp $1893			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1730					Command_READ:
.1730	20 f6 1a	jsr $1af6			jsr 	EXPTermR0 					; get term to R0
.1733	90 35		bcc $176a			bcc 	_CRSyntax 					; fail if not a reference.
.1735	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1737	48		pha				pha
.1738	a5 09		lda $09				lda 	IFR0+IM1
.173a	48		pha				pha
.173b	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.173d	48		pha				pha
.173e	20 07 18	jsr $1807			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1741	ad 14 0b	lda $0b14			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1744	d0 27		bne $176d			bne 	_CRHaveData  				; forward for the next one.
.1746					_CRNextLine:
.1746	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1748	f0 1a		beq $1764			beq 	_CRNoData
.174a					_CRKeepSearching:
.174a	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.174c	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQENDRSQRSQ
.174e	20 89 29	jsr $2989			jsr 	ScanForward
.1751	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1753	f0 18		beq $176d			beq 	_CRHaveData 				; found it
.1755	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1757	18		clc				clc 								; try the next line, keep going.
.1758	b2 18		lda ($18)			lda 	(codePtr)
.175a	65 18		adc $18				adc 	codePtr
.175c	85 18		sta $18				sta 	codePtr
.175e	90 e6		bcc $1746			bcc 	_CRNextLine
.1760	e6 19		inc $19				inc 	codePtr+1
.1762	80 e2		bra $1746			bra 	_CRNextLine
.1764					_CRNoData:
.1764	4c 39 2b	jmp $2b39		jmp	ErrorV_data
.1767					_CLType:
.1767	4c b1 2a	jmp $2ab1		jmp	ErrorV_type
.176a					_CRSyntax:
.176a	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.176d					_CRHaveData:
.176d	20 2e 1a	jsr $1a2e			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1770	68		pla				pla 								; type of l-expr
.1771	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1773	30 f2		bmi $1767			bmi 	_CLType
.1775	68		pla				pla 								; restore address
.1776	85 25		sta $25				sta 	zTemp0+1
.1778	68		pla				pla
.1779	85 24		sta $24				sta 	zTemp0
.177b	20 d4 15	jsr $15d4			jsr 	AssignData 					; write R0 there.
.177e	9c 14 0b	stz $0b14			stz 	dataInStatement 			; clear in data flag
.1781	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1783	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1785	d0 04		bne $178b			bne 	_CRSwapBack
.1787	c8		iny				iny 								; consume comma
.1788	ee 14 0b	inc $0b14			inc 	dataInStatement 			; set in data statement flag.
.178b					_CRSwapBack:
.178b	20 07 18	jsr $1807			jsr 	SwapCodeDataPointers		; swap them back.
.178e	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1790	c8		iny				iny
.1791	c9 99		cmp #$99			cmp 	#PR_COMMA
.1793	f0 9b		beq $1730			beq 	Command_READ 				; if so go round again.
.1795	88		dey				dey 								; unpick get.
.1796	60		rts				rts
.1797					Command_DATA:
.1797	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1799	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQENDRSQRSQ
.179b	20 89 29	jsr $2989			jsr 	ScanForward
.179e	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.17a0	d0 01		bne $17a3			bne 	_CDNotEOL
.17a2	88		dey				dey
.17a3					_CDNotEOL:
.17a3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.17a4					Command_REM:
.17a4					Command_REM2:
.17a4	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.17a6	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.17a8	d0 06		bne $17b0			bne 	_CRExit
.17aa	c8		iny				iny 								; skip over it, it's a comment.
.17ab	98		tya				tya
.17ac	38		sec				sec
.17ad	71 18		adc ($18),y			adc 	(codePtr),y
.17af	a8		tay				tay
.17b0					_CRExit:
.17b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.17b1					Command_RENUMBER:
.17b1	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.17b3	85 08		sta $08				sta 	IM0+IFR0
.17b5	a9 03		lda #$03			lda 	#1000 >> 8
.17b7	85 09		sta $09				sta 	IM1+IFR0
.17b9	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17bb	c9 9b		cmp #$9b			cmp 	#PR_COLON
.17bd	f0 07		beq $17c6			beq 	_CRIsDefault
.17bf	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ
.17c1	f0 03		beq $17c6			beq 	_CRIsDefault
.17c3	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; get other start
.17c6					_CRIsDefault:
.17c6	5a		phy				phy
.17c7	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.17c9	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh
.17cc	85 25		sta $25				sta 	zTemp0+1
.17ce					_CRRenumberLoop:
.17ce	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.17d0	f0 21		beq $17f3			beq 	_CRExit
.17d2	18		clc				clc
.17d3	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.17d5	a5 08		lda $08				lda 	IFR0+IM0
.17d7	91 24		sta ($24),y			sta 	(zTemp0),y
.17d9	69 0a		adc #$0a			adc 	#10
.17db	85 08		sta $08				sta 	IFR0+IM0
.17dd	c8		iny				iny
.17de	a5 09		lda $09				lda 	IFR0+IM1
.17e0	91 24		sta ($24),y			sta 	(zTemp0),y
.17e2	69 00		adc #$00			adc 	#0
.17e4	85 09		sta $09				sta 	IFR0+IM1
.17e6	18		clc				clc 								; next line.
.17e7	b2 24		lda ($24)			lda 	(zTemp0)
.17e9	65 24		adc $24				adc 	zTemp0
.17eb	85 24		sta $24				sta 	zTemp0
.17ed	90 df		bcc $17ce			bcc 	_CRRenumberLoop
.17ef	e6 25		inc $25				inc 	zTemp0+1
.17f1	80 db		bra $17ce			bra 	_CRRenumberLoop
.17f3					_CRExit:
.17f3	7a		ply				ply
.17f4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.17f5					S
.17f5					Command_RESTORE:
.17f5	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh 				; back to the program start
.17f8	8d 11 0b	sta $0b11			sta 	dataPtr+1
.17fb	9c 10 0b	stz $0b10			stz 	dataPtr
.17fe	a9 03		lda #$03			lda 	#3 							; position start of line
.1800	8d 12 0b	sta $0b12			sta 	dataPos
.1803	9c 14 0b	stz $0b14			stz 	dataInStatement 			; not in statement
.1806	60		rts				rts
.1807					SwapCodeDataPointers:
.1807	ad 10 0b	lda $0b10			lda 	dataPtr 					; swap LSB of code/data
.180a	a6 18		ldx $18				ldx 	codePtr
.180c	85 18		sta $18				sta 	codePtr
.180e	8e 10 0b	stx $0b10			stx 	dataPtr
.1811	ad 11 0b	lda $0b11			lda 	dataPtr+1 					; swap MSB of code/data
.1814	a6 19		ldx $19				ldx 	codePtr+1
.1816	85 19		sta $19				sta 	codePtr+1
.1818	8e 11 0b	stx $0b11			stx 	dataPtr+1
.181b	ad 12 0b	lda $0b12			lda 	dataPos 					; swap dataPos and Y
.181e	8c 12 0b	sty $0b12			sty 	dataPos
.1821	a8		tay				tay
.1822	60		rts				rts
.0b10					dataPtr:
>0b10							.fill 	2
.0b12					dataPos:
>0b12							.fill 	2
.0b14					dataInStatement:
>0b14							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1823					Command_RUN:
.1823	20 38 13	jsr $1338			jsr 	ClearCode					; clear everything out.
.1826	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh 				; back to the program start
.1829	85 19		sta $19				sta 	codePtr+1
.182b	64 18		stz $18				stz 	codePtr
.182d	80 0b		bra $183a			bra 	RUNNewLine
.182f					RUNEndOfLine:
.182f	18		clc				clc 								; advance to next line.
.1830	b2 18		lda ($18)			lda 	(codePtr)
.1832	65 18		adc $18				adc 	codePtr
.1834	85 18		sta $18				sta 	codePtr
.1836	90 02		bcc $183a			bcc 	_RELNoCarry
.1838	e6 19		inc $19				inc 	codePtr+1
.183a					_RELNoCarry:
.183a					RUNNewLine:
.183a	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.183c	9a		txs				txs
.183d	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.183f	f0 52		beq $1893			beq 	Command_END
.1841	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1843	b1 18		lda ($18),y			lda 	(codePtr),y
.1845	8d 31 0c	sta $0c31			sta 	ERRLine
.1848	c8		iny				iny
.1849	b1 18		lda ($18),y			lda 	(codePtr),y
.184b	8d 32 0c	sta $0c32			sta 	ERRLine+1
.184e	c8		iny				iny 								; offset into codePtr for start of line.
.184f					RUNNewCommand:
.184f	9c 26 0c	stz $0c26			stz 	stringInitialised 			; reset string system flag.
.1852	ce 15 0b	dec $0b15			dec 	checkCounter				; don't do these checks ever command
.1855	d0 0a		bne $1861			bne 	_RNCNoCheck
.1857	5a		phy				phy 								; keyboard check.
.1858	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.185b	7a		ply				ply
.185c	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.185f	d0 1e		bne $187f			bne 	_RUNBreak
.1861					_RNCNoCheck:
.1861	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1863	10 1d		bpl $1882			bpl		_RUNNotToken 				; probably an identifier
.1865	c8		iny				iny 								; consume token
.1866	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1868	f0 e5		beq $184f			beq 	RUNNewCommand
.186a	c9 a7		cmp #$a7			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.186c	b0 0e		bcs $187c			bcs 	_RUNSyntax
.186e	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1870	90 0a		bcc $187c			bcc 	_RUNSyntax
.1872	0a		asl a				asl 	a 							; double into X.
.1873	aa		tax				tax
.1874	20 79 18	jsr $1879			jsr 	_RUNDispatchMain			; call the main dispatcher
.1877	80 d6		bra $184f			bra 	RUNNewCommand
.1879					_RUNDispatchMain:
.1879	7c fc 20	jmp ($20fc,x)			jmp 	(VectorTable,x)
.187c					_RUNSyntax:
.187c	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.187f					_RUNBreak:
.187f	4c 0c 2c	jmp $2c0c		jmp	ErrorV_break
.1882					_RUNNotToken:
.1882	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error (numbers)
.1884	90 f6		bcc $187c			bcc 	_RUNSyntax
.1886	20 b3 15	jsr $15b3			jsr 	CommandLET 					; assignment
.1889	80 c4		bra $184f			bra 	RUNNewCommand 				; loop round.
.188b					Command_Shift_Handler:
.188b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.188d	c8		iny				iny
.188e	0a		asl a				asl 	a 							; double into X
.188f	aa		tax				tax
.1890	7c fc 21	jmp ($21fc,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1893					Command_END:
.1893	4c 2b 2f	jmp $2f2b			jmp 	WarmStart
.0b15					checkCounter:
>0b15							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1896					Command_STOP:
.1896	4c 25 2b	jmp $2b25		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1899					Command_Sys:
.1899	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; execution address
.189c	5a		phy				phy
.189d	ad 79 0c	lda $0c79			lda 	('A'-'A')*4 + FastVariables ; load AXY
.18a0	ae d5 0c	ldx $0cd5			ldx 	('X'-'A')*4 + FastVariables
.18a3	ac d9 0c	ldy $0cd9			ldy 	('Y'-'A')*4 + FastVariables
.18a6	20 ab 18	jsr $18ab			jsr 	_CSCallIFR0 				; call the code
.18a9	7a		ply				ply
.18aa	60		rts				rts
.18ab					_CSCallIFR0:
.18ab	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.18ae					NoExec01:
.18ae					NoExec02:
.18ae					NoExec03:
.18ae					NoExec04:
.18ae					NoExec05:
.18ae					NoExec06:
.18ae					NoExec07:
.18ae					NoExec08:
.18ae	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.18b1					EXPBinAdd:
.18b1	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.18b3	30 6f		bmi $1924			bmi 	EXPConcatenate
.18b5	a2 0c		ldx #$0c			ldx 	#IFR1
.18b7	4c 4a 31	jmp $314a			jmp 	IFloatAdd
.18ba					EXPBinSub:
.18ba	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18bc	30 3f		bmi $18fd			bmi 	EXPTypeError
.18be	a2 0c		ldx #$0c			ldx 	#IFR1
.18c0	4c 43 31	jmp $3143			jmp 	IFloatSubtract
.18c3					EXPBinMul:
.18c3	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.18c5	30 36		bmi $18fd			bmi 	EXPTypeError
.18c7	a2 0c		ldx #$0c			ldx 	#IFR1
.18c9	4c f4 31	jmp $31f4			jmp 	IFloatMultiply
.18cc					EXPBinFDiv:
.18cc	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18ce	30 2d		bmi $18fd			bmi 	EXPTypeError
.18d0	a2 0c		ldx #$0c			ldx 	#IFR1
.18d2	20 76 34	jsr $3476			jsr 	IFloatDivideFloat
.18d5	b0 0f		bcs $18e6			bcs 	EXPDZero
.18d7	60		rts				rts
.18d8					EXPBinIDiv:
.18d8	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18da	30 21		bmi $18fd			bmi 	EXPTypeError
.18dc	a2 0c		ldx #$0c			ldx 	#IFR1
.18de	20 76 34	jsr $3476			jsr 	IFloatDivideFloat
.18e1	b0 03		bcs $18e6			bcs 	EXPDZero
.18e3	4c 53 34	jmp $3453			jmp 	IFloatIntegerR0
.18e6					EXPDZero:
.18e6	4c fa 2a	jmp $2afa		jmp	ErrorV_divzero
.18e9					EXPBinIMod:
.18e9	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.18eb	30 10		bmi $18fd			bmi 	EXPTypeError
.18ed	a2 0c		ldx #$0c			ldx 	#IFR1
.18ef	5a		phy				phy
.18f0	20 89 33	jsr $3389			jsr 	IFPreProcessBitwise 		; set up everything.
.18f3	d0 05		bne $18fa			bne 	EXPDRange
.18f5	20 c2 32	jsr $32c2			jsr 	IFloatModulusInteger
.18f8	7a		ply				ply
.18f9	60		rts				rts
.18fa					EXPDRange:
.18fa	4c 92 2a	jmp $2a92		jmp	ErrorV_range
.18fd					EXPTypeError:
.18fd	4c b1 2a	jmp $2ab1		jmp	ErrorV_type
.1900					EXPBinAnd:
.1900	24 0b		bit $0b				bit 	IFR0+IExp
.1902	30 f9		bmi $18fd			bmi 	EXPTypeError
.1904	a2 0c		ldx #$0c			ldx 	#IFR1
.1906	20 44 33	jsr $3344			jsr 	IFloatBitwiseAnd
.1909	b0 ef		bcs $18fa			bcs 	EXPDRange
.190b	60		rts				rts
.190c					EXPBinOr:
.190c	24 0b		bit $0b				bit 	IFR0+IExp
.190e	30 ed		bmi $18fd			bmi 	EXPTypeError
.1910	a2 0c		ldx #$0c			ldx 	#IFR1
.1912	20 5b 33	jsr $335b			jsr 	IFloatBitwiseOr
.1915	b0 e3		bcs $18fa			bcs 	EXPDRange
.1917	60		rts				rts
.1918					EXPBinXor:
.1918	24 0b		bit $0b				bit 	IFR0+IExp
.191a	30 e1		bmi $18fd			bmi 	EXPTypeError
.191c	a2 0c		ldx #$0c			ldx 	#IFR1
.191e	20 72 33	jsr $3372			jsr 	IFloatBitwiseXor
.1921	b0 d7		bcs $18fa			bcs 	EXPDRange
.1923	60		rts				rts
.1924					EXPConcatenate:
.1924	18		clc				clc
.1925	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.1927	72 0c		adc ($0c)			adc 	(IFR1)
.1929	b0 2d		bcs $1958			bcs 	_EXPCError 					; far too long.
.192b	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.192d	da		phx				phx
.192e	a6 09		ldx $09				ldx 	IFR0+1
.1930	da		phx				phx
.1931	20 61 2d	jsr $2d61			jsr 	StringTempAllocate 			; allocate string, set up return
.1934	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.1936	a5 0c		lda $0c				lda 	IFR1
.1938	20 41 19	jsr $1941			jsr 	_EXPCCopyXA
.193b	fa		plx				plx 								; copy second string
.193c	68		pla				pla
.193d	20 41 19	jsr $1941			jsr 	_EXPCCopyXA
.1940	60		rts				rts
.1941					_EXPCCopyXA:
.1941	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.1943	85 24		sta $24				sta 	zTemp0
.1945	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.1947	f0 0e		beq $1957			beq 	_EXPCCExit 					; nothing in string
.1949	aa		tax				tax 								; count
.194a	5a		phy				phy 								; start position
.194b	a0 01		ldy #$01			ldy 	#1
.194d					_EXPCCLoop:
.194d	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.194f	20 96 2d	jsr $2d96			jsr 	StringTempWrite
.1952	c8		iny				iny
.1953	ca		dex				dex
.1954	d0 f7		bne $194d			bne 	_EXPCCLoop
.1956	7a		ply				ply
.1957					_EXPCCExit:
.1957	60		rts				rts
.1958					_EXPCError:
.1958	4c 9e 2b	jmp $2b9e		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.195b					EXPReturnTrue:
.195b	a2 08		ldx #$08			ldx 	#IFR0
.195d	a9 01		lda #$01			lda 	#1
.195f	20 54 37	jsr $3754			jsr 	IFloatSetByte
.1962	20 5d 37	jsr $375d			jsr 	IFloatNegate
.1965	60		rts				rts
.1966					EXPReturnFalse:
.1966	a2 08		ldx #$08			ldx 	#IFR0
.1968	4c 52 37	jmp $3752			jmp 	IFloatSetZero
.196b					EXPCompareEqual:
.196b	20 a1 19	jsr $19a1			jsr 	EXPCompareBaseCode
.196e	c9 00		cmp #$00			cmp 	#0
.1970	f0 e9		beq $195b			beq 	EXPReturnTrue
.1972	80 f2		bra $1966			bra 	EXPReturnFalse
.1974					EXPCompareLess:
.1974	20 a1 19	jsr $19a1			jsr 	EXPCompareBaseCode
.1977	c9 ff		cmp #$ff			cmp 	#$FF
.1979	f0 e0		beq $195b			beq 	EXPReturnTrue
.197b	80 e9		bra $1966			bra 	EXPReturnFalse
.197d					EXPCompareGreater:
.197d	20 a1 19	jsr $19a1			jsr 	EXPCompareBaseCode
.1980	c9 01		cmp #$01			cmp 	#1
.1982	f0 d7		beq $195b			beq 	EXPReturnTrue
.1984	80 e0		bra $1966			bra 	EXPReturnFalse
.1986					EXPCompareNotEqual:
.1986	20 a1 19	jsr $19a1			jsr 	EXPCompareBaseCode
.1989	c9 00		cmp #$00			cmp 	#0
.198b	d0 ce		bne $195b			bne 	EXPReturnTrue
.198d	80 d7		bra $1966			bra 	EXPReturnFalse
.198f					EXPCompareLessEqual:
.198f	20 a1 19	jsr $19a1			jsr 	EXPCompareBaseCode
.1992	c9 01		cmp #$01			cmp 	#1
.1994	d0 c5		bne $195b			bne 	EXPReturnTrue
.1996	80 ce		bra $1966			bra 	EXPReturnFalse
.1998					EXPCompareGreaterEqual:
.1998	20 a1 19	jsr $19a1			jsr 	EXPCompareBaseCode
.199b	c9 ff		cmp #$ff			cmp 	#$FF
.199d	d0 bc		bne $195b			bne 	EXPReturnTrue
.199f	80 c5		bra $1966			bra 	EXPReturnFalse
.19a1					EXPCompareBaseCode:
.19a1	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.19a3	30 10		bmi $19b5			bmi 	_EXCBCString
.19a5	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.19a7	20 21 34	jsr $3421			jsr 	IFloatCompare
.19aa	a5 08		lda $08				lda 	IFR0+IM0
.19ac	f0 06		beq $19b4			beq 	_EXCBCExit 					; return 0 if zero
.19ae	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.19b0	50 02		bvc $19b4			bvc 	_EXCBCExit
.19b2	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.19b4					_EXCBCExit:
.19b4	60		rts				rts
.19b5					_EXCBCString:
.19b5	5a		phy				phy
.19b6	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.19b8	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.19ba	90 02		bcc $19be			bcc 	_EXCBCSmaller
.19bc	b2 0c		lda ($0c)			lda 	(IFR1)
.19be					_EXCBCSmaller:
.19be	aa		tax				tax
.19bf	f0 0d		beq $19ce			beq 	_EXCBCMatches 				; if zero common length matches
.19c1	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.19c3					_EXCBCCheckSmallerMatches:
.19c3	c8		iny				iny 								; compare directly as far as common length
.19c4	38		sec				sec
.19c5	b1 0c		lda ($0c),y			lda 	(IFR1),y
.19c7	f1 08		sbc ($08),y			sbc 	(IFR0),y
.19c9	d0 08		bne $19d3			bne 	_EXCBCExit2
.19cb	ca		dex				dex
.19cc	d0 f5		bne $19c3			bne 	_EXCBCCheckSmallerMatches
.19ce					_EXCBCMatches:
.19ce	38		sec				sec
.19cf	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.19d1	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.19d3					_EXCBCExit2:
.19d3	7a		ply				ply
.19d4	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.19d6	f0 04		beq $19dc			beq 	_EXCBCReturn
.19d8	30 03		bmi $19dd			bmi 	_EXCBCFF 					; return $FF if <
.19da	a9 01		lda #$01			lda 	#1 							; return 1 if >
.19dc					_EXCBCReturn:
.19dc	60		rts				rts
.19dd					_EXCBCFF:
.19dd	a9 ff		lda #$ff			lda 	#$FF
.19df	60		rts				rts
.19e0					_EXCBCRange:
.19e0	4c 92 2a	jmp $2a92		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.19e3					EXPBinLeft:
.19e3	a9 ff		lda #$ff			lda 	#$FF
.19e5	8d 16 0b	sta $0b16			sta 	EXPShiftLeftFlag
.19e8	4c ee 19	jmp $19ee			jmp 	EXPShiftCommon
.19eb					EXPBinRight:
.19eb	9c 16 0b	stz $0b16			stz 	EXPShiftLeftFlag
.19ee					EXPShiftCommon:
.19ee	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.19f0	05 0f		ora $0f				ora 	IFR1+IExp
.19f2	29 7f		and #$7f			and 	#$7F
.19f4	d0 35		bne $1a2b			bne 	_EXPSRange
.19f6	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.19f8	29 e0		and #$e0			and 	#$E0
.19fa	05 09		ora $09				ora 	IFR0+IM1
.19fc	05 0a		ora $0a				ora 	IFR0+IM2
.19fe	d0 25		bne $1a25			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.1a00	5a		phy				phy
.1a01	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.1a03	29 1f		and #$1f			and 	#$1F
.1a05	f0 17		beq $1a1e			beq 	_EXPSExit 					; exit if zero
.1a07	a8		tay				tay
.1a08					_EXPSLoop:
.1a08	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.1a0a	2c 16 0b	bit $0b16			bit 	EXPShiftLeftFlag
.1a0d	30 05		bmi $1a14			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.1a0f	20 81 37	jsr $3781			jsr 	IFloatShiftRight
.1a12	80 07		bra $1a1b			bra 	_EXPSContinue
.1a14					_EXPSShiftLeft:
.1a14	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.1a17	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.1a19	30 10		bmi $1a2b			bmi 	_EXPSRange
.1a1b					_EXPSContinue:
.1a1b	88		dey				dey 								; do it Y times
.1a1c	d0 ea		bne $1a08			bne 	_EXPSLoop
.1a1e					_EXPSExit:
.1a1e	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.1a20	20 e3 36	jsr $36e3			jsr 	IFloatCopyFromRegister
.1a23	7a		ply				ply
.1a24	60		rts				rts
.1a25					_EXPSShiftZero:
.1a25	a2 08		ldx #$08			ldx 	#IFR0
.1a27	20 52 37	jsr $3752			jsr 	IFloatSetZero
.1a2a	60		rts				rts
.1a2b					_EXPSRange:
.1a2b	4c 92 2a	jmp $2a92		jmp	ErrorV_range
.0b16					EXPShiftLeftFlag:
>0b16							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1a2e					EXPEvaluateExpression:
.1a2e	a9 00		lda #$00			lda 	#0 							; current precedence
.1a30					EXPEvaluateExpressionPrecedenceA:
.1a30	48		pha				pha
.1a31	20 ab 1a	jsr $1aab			jsr 	EXPTermValueR0				; do first term.
.1a34					_EELoop:
.1a34	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1a36	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1a38	90 31		bcc $1a6b			bcc 	_EEExit
.1a3a	aa		tax				tax 								; access the precedence of the operator.
.1a3b	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1a3c	dd 09 1e	cmp $1e09,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1a3f	b0 2b		bcs $1a6c			bcs 	_EEExit2
.1a41	48		pha				pha 								; save current precedence.
.1a42	da		phx				phx 								; save operator
.1a43	c8		iny				iny 								; consume operator
.1a44	da		phx				phx
.1a45	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.1a47	20 a1 36	jsr $36a1			jsr 	IFloatPushRx
.1a4a	fa		plx				plx
.1a4b	bd 09 1e	lda $1e09,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1a4e	20 30 1a	jsr $1a30			jsr 	EXPEvaluateExpressionPrecedenceA
.1a51	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.1a53	20 c2 36	jsr $36c2			jsr 	IFloatPullRx
.1a56	fa		plx				plx 								; operator
.1a57	a5 0b		lda $0b				lda 	IFR0+IExp 					; check if types match.
.1a59	45 0f		eor $0f				eor 	IFR1+IExp
.1a5b	30 08		bmi $1a65			bmi 	_EEType		 				; MSBs differ, error.
.1a5d					_EETypeOkay:
.1a5d	8a		txa				txa
.1a5e	0a		asl a				asl 	a 							; double -> X
.1a5f	aa		tax				tax
.1a60	20 68 1a	jsr $1a68			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1a63	80 cf		bra $1a34			bra 	_EELoop
.1a65					_EEType:
.1a65	4c b1 2a	jmp $2ab1		jmp	ErrorV_type
.1a68					_EECallBinary:
.1a68	7c fc 20	jmp ($20fc,x)			jmp 	(VectorTable,x)
.1a6b					_EEExit:
.1a6b	68		pla				pla 								; throw precedence
.1a6c					_EEExit2:
.1a6c	18		clc				clc
.1a6d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1a6e					EXPEvalNumber:
.1a6e	20 2e 1a	jsr $1a2e			jsr 	EXPEvaluateExpression 		; get a value
.1a71	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1a73	30 01		bmi $1a76			bmi 	EVUType
.1a75	60		rts				rts
.1a76					EVUType:
.1a76	4c b1 2a	jmp $2ab1		jmp	ErrorV_type
.1a79					EXPEvalInteger:
.1a79	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1a7c	20 53 34	jsr $3453			jsr 	IFloatIntegerR0
.1a7f	60		rts				rts
.1a80					EXPEvalInteger16:
.1a80	20 79 1a	jsr $1a79			jsr 	EXPEvalInteger 				; get integer
.1a83	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1a85	d0 21		bne $1aa8			bne 	EVURange
.1a87	a6 09		ldx $09				ldx 	IFR0+IM1
.1a89	a5 08		lda $08				lda 	IFR0+IM0
.1a8b	60		rts				rts
.1a8c					EXPEvalInteger8:
.1a8c	20 79 1a	jsr $1a79			jsr 	EXPEvalInteger 				; get integer
.1a8f	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1a91	05 09		ora $09				ora 	IFR0+IM1
.1a93	d0 13		bne $1aa8			bne 	EVURange
.1a95	a5 08		lda $08				lda 	IFR0+IM0
.1a97	60		rts				rts
.1a98					EXPEvalString:
.1a98	20 2e 1a	jsr $1a2e			jsr 	EXPEvaluateExpression 		; get value
.1a9b	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1a9d	10 d7		bpl $1a76			bpl 	EVUType
.1a9f	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1aa1	86 25		stx $25				stx 	zTemp0+1
.1aa3	a5 08		lda $08				lda 	IFR0+IM0
.1aa5	85 24		sta $24				sta 	zTemp0
.1aa7	60		rts				rts
.1aa8					EVURange:
.1aa8	4c 92 2a	jmp $2a92		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1aab					EXPTermValueR0:
.1aab	20 f6 1a	jsr $1af6			jsr 	EXPTermR0 					; get term
.1aae	90 45		bcc $1af5			bcc 	_ETVNotReference 			; exit if value.
.1ab0	5a		phy				phy
.1ab1	a0 03		ldy #$03			ldy 	#3 							; get type
.1ab3	b1 08		lda ($08),y			lda 	(IFR0),y
.1ab5	30 14		bmi $1acb			bmi 	_ETVDereferenceString
.1ab7	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1ab9	88		dey				dey 								; get byte 2
.1aba	b1 08		lda ($08),y			lda 	(IFR0),y
.1abc	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1abe	88		dey				dey 								; get byte 1
.1abf	b1 08		lda ($08),y			lda 	(IFR0),y
.1ac1	aa		tax				tax 								; save in X so we can overwrite it
.1ac2	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1ac4	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1ac6	85 08		sta $08				sta 	IFR0+IM0
.1ac8	7a		ply				ply
.1ac9	18		clc				clc
.1aca	60		rts				rts
.1acb					_ETVDereferenceString:
.1acb	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1acd	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1acf	12 08		ora ($08)			ora 	(IFR0)
.1ad1	f0 11		beq $1ae4			beq 	_ETVNull 					; if so, return a fake NULL.
.1ad3	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1ad5	aa		tax				tax
.1ad6	b2 08		lda ($08)			lda 	(IFR0)
.1ad8	18		clc				clc 								; add two so points to actual string.
.1ad9	69 02		adc #$02			adc 	#2
.1adb	90 01		bcc $1ade			bcc 	_EVDSNoCarry
.1add	e8		inx				inx
.1ade					_EVDSNoCarry:
.1ade	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1ae0	85 08		sta $08				sta 	IFR0
.1ae2	80 08		bra $1aec			bra 	_ETVFillExit 				; tidy up and exit.
.1ae4					_ETVNull:
.1ae4	a9 f4		lda #$f4			lda 	#_EVTNString & $FF
.1ae6	85 08		sta $08				sta 	IFR0+IM0
.1ae8	a9 1a		lda #$1a			lda 	#_EVTNString >> 8
.1aea	85 09		sta $09				sta 	IFR0+IM1
.1aec					_ETVFillExit:
.1aec	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1aee	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1af0	85 0b		sta $0b				sta 	IFR0+IExp
.1af2	7a		ply				ply
.1af3	60		rts				rts
.1af4					_EVTNString:
>1af4	00						.byte 	0
.1af5					_ETVNotReference:
.1af5	60		rts				rts
.1af6					EXPTermR0:
.1af6	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1af8	30 10		bmi $1b0a			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1afa	c8		iny				iny 								; consume element
.1afb	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1afd	b0 08		bcs $1b07			bcs 	_ETMIdentifier
.1aff	20 35 1b	jsr $1b35			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1b02	20 68 1b	jsr $1b68			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1b05	18		clc				clc 								; return value ok
.1b06	60		rts				rts
.1b07					_ETMIdentifier:
.1b07	4c eb 30	jmp $30eb			jmp 	VARCheckSimple 				; check variables, seperate module.
.1b0a					_ETMIsUnaryOrMinus:
.1b0a	c8		iny				iny 								; consume element
.1b0b	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1b0d	d0 0e		bne $1b1d			bne 	_ETMCheckUnary
.1b0f	20 ab 1a	jsr $1aab			jsr 	EXPTermValueR0 				; get a term to negate
.1b12	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.1b14	20 5d 37	jsr $375d			jsr 	IFloatNegate
.1b17	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.1b19	30 17		bmi $1b32			bmi 	_ETMUnaryType				; if so error.
.1b1b	18		clc				clc
.1b1c	60		rts				rts
.1b1d					_ETMCheckUnary:
.1b1d	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1b1f	90 0e		bcc $1b2f			bcc 	_ETMUnarySyntax
.1b21	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1b23	b0 0a		bcs $1b2f			bcs 	_ETMUnarySyntax
.1b25	0a		asl a				asl 	a 							; make it into an index => X
.1b26	aa		tax				tax
.1b27	20 2c 1b	jsr $1b2c			jsr 	_ETMCallUnaryFunction 		; call the function
.1b2a	18		clc				clc 								; and return it.
.1b2b	60		rts				rts
.1b2c					_ETMCallUnaryFunction:
.1b2c	7c fc 20	jmp ($20fc,x)			jmp 	(VectorTable,x)
.1b2f					_ETMUnarySyntax:
.1b2f	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.1b32					_ETMUnaryType:
.1b32	4c b1 2a	jmp $2ab1		jmp	ErrorV_type
.1b35					EXPExtractTokenisedInteger:
.1b35	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.1b37	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.1b39	64 09		stz $09				stz 	IFR0+IM1
.1b3b	64 0a		stz $0a				stz 	IFR0+IM2
.1b3d					_ETMConstant:
.1b3d	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1b3f	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1b41	b0 24		bcs $1b67			bcs 	_ETMCExit 					; no, exit.
.1b43	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1b45	a5 09		lda $09				lda 	IFR0+IM1
.1b47	85 0a		sta $0a				sta 	IFR0+IM2
.1b49	a5 08		lda $08				lda 	IFR0+IM0
.1b4b	85 09		sta $09				sta 	IFR0+IM1
.1b4d	64 08		stz $08				stz 	IFR0+IM0
.1b4f	8a		txa				txa
.1b50	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1b51	66 0a		ror $0a				ror 	IFR0+IM2
.1b53	66 09		ror $09				ror 	IFR0+IM1
.1b55	66 08		ror $08				ror 	IFR0+IM0
.1b57	4a		lsr a				lsr 	a
.1b58	66 0a		ror $0a				ror 	IFR0+IM2
.1b5a	66 09		ror $09				ror 	IFR0+IM1
.1b5c	66 08		ror $08				ror 	IFR0+IM0
.1b5e	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1b60	11 18		ora ($18),y			ora 	(codePtr),y
.1b62	85 08		sta $08				sta 	IFR0+IM0
.1b64	c8		iny				iny 								; consume, loop back
.1b65	80 d6		bra $1b3d			bra 	_ETMConstant
.1b67					_ETMCExit:
.1b67	60		rts				rts
.1b68					EXPCheckDecimalFollows:
.1b68	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1b6a	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1b6c	d0 19		bne $1b87			bne 	_ETMCDExit
.1b6e	c8		iny				iny 								; consume token.
.1b6f	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1b71	5a		phy				phy									; save current position
.1b72	48		pha				pha 								; save count of chars.
.1b73	38		sec				sec 								; address into YX : y + codePtr+1
.1b74	98		tya				tya
.1b75	65 18		adc $18				adc 	codePtr
.1b77	aa		tax				tax
.1b78	a5 19		lda $19				lda 	codePtr+1
.1b7a	69 00		adc #$00			adc 	#0
.1b7c	a8		tay				tay
.1b7d	68		pla				pla 								; get count.
.1b7e	20 f6 35	jsr $35f6			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1b81	7a		ply				ply 								; go to next token.
.1b82	98		tya				tya
.1b83	38		sec				sec
.1b84	71 18		adc ($18),y			adc 	(codePtr),y
.1b86	a8		tay				tay
.1b87					_ETMCDExit:
.1b87	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1b88					EXPUnaryAbs:
.1b88	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 					; number to R0
.1b8b	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1b8e	20 95 33	jsr $3395			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1b91	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.1b92					EXPUnaryNull:
.1b92	20 ab 1a	jsr $1aab			jsr 	EXPTermValueR0
.1b95	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1b96					EXPUnaryAsc:
.1b96	20 98 1a	jsr $1a98			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b99	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1b9c	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.1b9e	f0 06		beq $1ba6			beq 	_EXAZero 						; if so return 0
.1ba0	5a		phy				phy 									; otherwise get first character
.1ba1	a0 01		ldy #$01			ldy 	#1
.1ba3	b1 24		lda ($24),y			lda 	(zTemp0),y
.1ba5	7a		ply				ply
.1ba6					_EXAZero:
.1ba6	a2 08		ldx #$08			ldx 	#IFR0
.1ba8	20 54 37	jsr $3754			jsr 	IFloatSetByte
.1bab	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1bac					EXPUnaryChr:
.1bac	20 8c 1a	jsr $1a8c			jsr 	EXPEvalInteger8 				; expr
.1baf	48		pha				pha 									; push on stack
.1bb0	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1bb3	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1bb5	20 61 2d	jsr $2d61			jsr 	StringTempAllocate
.1bb8	68		pla				pla 									; get value back
.1bb9	20 96 2d	jsr $2d96			jsr 	StringTempWrite 				; write to string.
.1bbc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1bbd					EXPUnaryDec:
.1bbd	20 98 1a	jsr $1a98			jsr 	EXPEvalString 					; string to R0, zTemp0
.1bc0	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1bc3	5a		phy				phy 									; save position.
.1bc4	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1bc6	20 52 37	jsr $3752			jsr 	IFloatSetZero
.1bc9	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.1bcb	f0 3b		beq $1c08			beq 	_EUDError 						; empty string is not legit.
.1bcd	aa		tax				tax 									; count in X.
.1bce	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1bd0					_EUDLoop:
.1bd0	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.1bd2	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1bd4	90 02		bcc $1bd8			bcc 	_EUDNoCase
.1bd6	e9 20		sbc #$20			sbc 	#$20
.1bd8					_EUDNoCase:
.1bd8	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1bda	90 2c		bcc $1c08			bcc 	_EUDError
.1bdc	c9 3a		cmp #$3a			cmp 	#'9'+1
.1bde	90 0a		bcc $1bea			bcc 	_EUDOkay
.1be0	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1be2	90 24		bcc $1c08			bcc 	_EUDError
.1be4	c9 47		cmp #$47			cmp 	#'F'+1
.1be6	b0 20		bcs $1c08			bcs 	_EUDError
.1be8	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1bea					_EUDOkay:
.1bea	29 0f		and #$0f			and 	#15 							; make constant
.1bec	da		phx				phx
.1bed	48		pha				pha
.1bee	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1bf0	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.1bf3	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.1bf6	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.1bf9	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.1bfc	68		pla				pla 									; pop constant and OR in
.1bfd	fa		plx				plx
.1bfe	05 08		ora $08				ora 	IFR0+IM0
.1c00	85 08		sta $08				sta 	IFR0+IM0
.1c02	c8		iny				iny 									; next char
.1c03	ca		dex				dex 									; done all characters ?
.1c04	d0 ca		bne $1bd0			bne 	_EUDLoop
.1c06	7a		ply				ply
.1c07	60		rts				rts
.1c08					_EUDError:
.1c08	4c a3 2a	jmp $2aa3		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1c0b					EXPUnaryInlineDec:
.1c0b	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1c0e					EXPUnaryPeek:
.1c0e	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 				; number to R0
.1c11	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1c14	b2 08		lda ($08)			lda 	(IFR0) 							; read byte and set it
.1c16	a2 08		ldx #$08			ldx 	#IFR0
.1c18	20 54 37	jsr $3754			jsr 	IFloatSetByte
.1c1b	60		rts				rts
.1c1c					EXPUnaryDeek:
.1c1c	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 				; number to R0
.1c1f	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1c22	5a		phy				phy 									; read MSB and push on stack
.1c23	a0 01		ldy #$01			ldy 	#1
.1c25	b1 08		lda ($08),y			lda 	(IFR0),y
.1c27	7a		ply				ply
.1c28	48		pha				pha
.1c29	b2 08		lda ($08)			lda 	(IFR0) 							; set LSB
.1c2b	a2 08		ldx #$08			ldx 	#IFR0
.1c2d	20 54 37	jsr $3754			jsr 	IFloatSetByte
.1c30	68		pla				pla 									; set MSB
.1c31	85 09		sta $09				sta 	IFR0+IM1
.1c33	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1c34					EXPUnaryFrac:
.1c34	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 					; number to R0
.1c37	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1c3a	20 fd 33	jsr $33fd			jsr 	IFloatFractionalR0 				; get fractional bit.
.1c3d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1c3e					EXPUnaryInkey:
.1c3e	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1c41	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1c43	20 61 2d	jsr $2d61			jsr 	StringTempAllocate
.1c46	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit with the empty string
.1c49	b0 06		bcs $1c51			bcs 	_EUIExit
.1c4b	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it and put it in first character
.1c4e	20 96 2d	jsr $2d96			jsr 	StringTempWrite
.1c51					_EUIExit:
.1c51	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1c52					EXPUnaryInt:
.1c52	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 					; number to R0
.1c55	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; check for )
.1c58	20 53 34	jsr $3453			jsr 	IFloatIntegerR0 				; force to integer.
.1c5b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1c5c					EXPUnaryLen:
.1c5c	20 98 1a	jsr $1a98			jsr 	EXPEvalString 					; string to R0, zTemp0
.1c5f	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1c62	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.1c64	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1c66	20 54 37	jsr $3754			jsr 	IFloatSetByte
.1c69	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1c6a					EXPUnaryParenthesis:
.1c6a	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 					; number to R0
.1c6d	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1c70	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1c71					EXPUnaryRnd:
.1c71	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 				; number to R0
.1c74	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 				; )
.1c77	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1c79	20 90 1c	jsr $1c90			jsr 	EXPLoadInRandom
.1c7c	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1c7e	85 0b		sta $0b				sta 	IFR0+IExp
.1c80	60		rts				rts
.1c81					ExpUnaryRand:
.1c81	20 79 1a	jsr $1a79			jsr 	EXPEvalInteger 				; integer to R0
.1c84	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 				; )
.1c87	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1c89	20 90 1c	jsr $1c90			jsr 	EXPLoadInRandom
.1c8c	20 c2 32	jsr $32c2			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1c8f	60		rts				rts
.1c90					EXPLoadInRandom:
.1c90	20 52 37	jsr $3752			jsr 	IFloatSetZero 				; zero it
.1c93	20 a5 1c	jsr $1ca5			jsr 	EXPRandom32 				; do a 23 bit number.
.1c96	95 00		sta $00,x			sta 	IM0,x
.1c98	20 a5 1c	jsr $1ca5			jsr 	EXPRandom32
.1c9b	95 01		sta $01,x			sta 	IM1,x
.1c9d	20 a5 1c	jsr $1ca5			jsr 	EXPRandom32
.1ca0	29 7f		and #$7f			and 	#$7F
.1ca2	95 02		sta $02,x			sta 	IM2,x
.1ca4	60		rts				rts
.1ca5					EXPRandom32:
.1ca5	5a		phy				phy
.1ca6	a0 08		ldy #$08			ldy 	#8
.1ca8	ad 17 0b	lda $0b17			lda 	EXPSeed+0
.1cab	0d 18 0b	ora $0b18			ora 	EXPSeed+1
.1cae	0d 19 0b	ora $0b19			ora 	EXPSeed+2
.1cb1	0d 1a 0b	ora $0b1a			ora 	EXPSeed+3
.1cb4	d0 08		bne $1cbe			bne 	_EXPRNoReset
.1cb6	ee 17 0b	inc $0b17			inc 	EXPSeed+0
.1cb9	a0 10		ldy #$10			ldy 	#16
.1cbb	8c 1a 0b	sty $0b1a			sty 	EXPSeed+3
.1cbe					_EXPRNoReset:
.1cbe	ad 17 0b	lda $0b17			lda 	EXPSeed+0
.1cc1					_EXPRLoop:
.1cc1	0a		asl a				asl		a
.1cc2	2e 18 0b	rol $0b18			rol 	EXPSeed+1
.1cc5	2e 19 0b	rol $0b19			rol 	EXPSeed+2
.1cc8	2e 1a 0b	rol $0b1a			rol 	EXPSeed+3
.1ccb	90 02		bcc $1ccf			bcc 	_EXPRNoEOR
.1ccd	49 c5		eor #$c5			eor 	#$C5
.1ccf					_EXPRNoEOR:
.1ccf	88		dey				dey
.1cd0	d0 ef		bne $1cc1			bne 	_EXPRLoop
.1cd2	8d 17 0b	sta $0b17			sta 	EXPSeed+0
.1cd5	7a		ply				ply
.1cd6	60		rts				rts
.0b17					EXPSeed:
>0b17							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1cd7					EXPUnarySgn:
.1cd7	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 					; number to R0
.1cda	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1cdd	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1cdf	20 f4 36	jsr $36f4			jsr 	IFloatCopyToRegister
.1ce2	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1ce4	20 52 37	jsr $3752			jsr 	IFloatSetZero
.1ce7	a2 0c		ldx #$0c			ldx 	#IFR1
.1ce9	20 21 34	jsr $3421			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1cec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1ced					EXPUnarySqr:
.1ced	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 					; number to R0
.1cf0	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1cf3	20 9d 33	jsr $339d			jsr 	IFloatSquareRootR0 				; square root.
.1cf6	b0 01		bcs $1cf9			bcs 	_EUSValue 						; error check.
.1cf8	60		rts				rts
.1cf9					_EUSValue:
.1cf9	4c 92 2a	jmp $2a92		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1cfc					EXPUnaryHex:
.1cfc	20 79 1a	jsr $1a79			jsr 	EXPEvalInteger 					; expr
.1cff	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1d02	5a		phy				phy
.1d03	a9 10		lda #$10			lda 	#16
.1d05	20 f4 34	jsr $34f4			jsr 	IFloatIntegerToStringR0
.1d08	80 0a		bra $1d14			bra 	EUSMain
.1d0a					EXPUnaryStr:
.1d0a	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 					; expr
.1d0d	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1d10	5a		phy				phy
.1d11	20 4f 35	jsr $354f			jsr 	IFloatFloatToStringR0 			; convert to string
.1d14					EUSMain:
.1d14	b0 19		bcs $1d2f			bcs 	_EUSError
.1d16	86 24		stx $24				stx 	zTemp0 							; save string address
.1d18	84 25		sty $25				sty 	zTemp0+1
.1d1a	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1d1c	20 61 2d	jsr $2d61			jsr 	StringTempAllocate
.1d1f	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1d21	aa		tax				tax 									; count in X
.1d22	a0 01		ldy #$01			ldy 	#1
.1d24					_EUSCopy:
.1d24	b1 24		lda ($24),y			lda 	(zTemp0),y
.1d26	c8		iny				iny
.1d27	20 96 2d	jsr $2d96			jsr 	StringTempWrite
.1d2a	ca		dex				dex
.1d2b	d0 f7		bne $1d24			bne	 	_EUSCopy
.1d2d	7a		ply				ply
.1d2e	60		rts				rts
.1d2f					_EUSError:
.1d2f	4c 92 2a	jmp $2a92		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1d32					EXPUnaryInlineString:
.1d32	18		clc				clc 								; physical address -> IM0,1
.1d33	98		tya				tya 								; put the actual address in IM0
.1d34	65 18		adc $18				adc 	codePtr
.1d36	85 08		sta $08				sta 	IFR0+IM0
.1d38	a5 19		lda $19				lda 	codePtr+1
.1d3a	69 00		adc #$00			adc 	#0
.1d3c	85 09		sta $09				sta 	IFR0+IM1
.1d3e	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1d40	a9 80		lda #$80			lda 	#$80
.1d42	85 0b		sta $0b				sta 	IFR0+IExp
.1d44	98		tya				tya	 								; skip over it.
.1d45	38		sec				sec
.1d46	71 18		adc ($18),y			adc 	(codePtr),y
.1d48	a8		tay				tay
.1d49	60		rts				rts
.1d4a					_EXPUISRange:
.1d4a	4c 92 2a	jmp $2a92		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1d4d					EXPUnaryLeft:
.1d4d	20 93 1d	jsr $1d93			jsr 	EXPCommonStart 					; <string>,
.1d50	48		pha				pha 									; save string address on stack
.1d51	da		phx				phx
.1d52	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1d54	48		pha				pha
.1d55	20 8c 1a	jsr $1a8c			jsr 	EXPEvalInteger8 				; characters to do
.1d58	80 44		bra $1d9e			bra 	EXPSubstringCommon
.1d5a					EXPUnaryRight:
.1d5a	20 93 1d	jsr $1d93			jsr 	EXPCommonStart 					; <string>,
.1d5d	48		pha				pha 									; save string address on stack
.1d5e	da		phx				phx
.1d5f	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1d61	48		pha				pha
.1d62	20 8c 1a	jsr $1a8c			jsr 	EXPEvalInteger8 				; characters to do
.1d65	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1d67	68		pla				pla
.1d68	38		sec				sec
.1d69	e5 24		sbc $24				sbc 	zTemp0
.1d6b	b0 02		bcs $1d6f			bcs 	_EUROffLeft 					; check not past start
.1d6d	a9 00		lda #$00			lda 	#0
.1d6f					_EUROffLeft:
.1d6f	48		pha				pha 									; start pos
.1d70	a9 ff		lda #$ff			lda 	#255		 					; length
.1d72	80 2a		bra $1d9e			bra 	EXPSubstringCommon
.1d74					EXPUnaryMid:
.1d74	20 93 1d	jsr $1d93			jsr 	EXPCommonStart 					; <string>,
.1d77	48		pha				pha 									; save string address on stack
.1d78	da		phx				phx
.1d79	20 8c 1a	jsr $1a8c			jsr 	EXPEvalInteger8 				; characters start
.1d7c	f0 12		beq $1d90			beq 	_EUSError 						; 1 is left
.1d7e	3a		dec a				dec 	a 								; zero based.
.1d7f	48		pha				pha
.1d80	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1d82	c9 99		cmp #$99			cmp 	#PR_COMMA
.1d84	f0 04		beq $1d8a			beq 	_EUMLength 						; if so m is provided
.1d86	a9 ff		lda #$ff			lda 	#255 							; default m
.1d88	80 14		bra $1d9e			bra 	EXPSubstringCommon
.1d8a					_EUMLength:
.1d8a	c8		iny				iny 									; consume comma
.1d8b	20 8c 1a	jsr $1a8c			jsr 	EXPEvalInteger8 				; characters to do
.1d8e	80 0e		bra $1d9e			bra 	EXPSubstringCommon
.1d90					_EUSError:
.1d90	4c a3 2a	jmp $2aa3		jmp	ErrorV_value
.1d93					EXPCommonStart:
.1d93	20 98 1a	jsr $1a98			jsr 	EXPEvalString
.1d96	20 74 2c	jsr $2c74			jsr 	ERRCheckComma
.1d99	a5 08		lda $08				lda 	IFR0+IM0
.1d9b	a6 09		ldx $09				ldx 	IFR0+IM1
.1d9d	60		rts				rts
.1d9e					EXPSubstringCommon:
.1d9e	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1da0	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; check right bracket.
.1da3	68		pla				pla 									; start position
.1da4	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1da6	fa		plx				plx 									; get string address to zTemp2.
.1da7	86 29		stx $29				stx 	zTemp2+1
.1da9	68		pla				pla
.1daa	85 28		sta $28				sta 	zTemp2
.1dac	38		sec				sec 									; length - start is the max count of chars
.1dad	b2 28		lda ($28)			lda 	(zTemp2)
.1daf	e5 27		sbc $27				sbc 	zTemp1+1
.1db1	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1db3	b0 02		bcs $1db7			bcs 	_EXPSSNoTrim
.1db5	85 26		sta $26				sta 	zTemp1 							; update count with available
.1db7					_EXPSSNoTrim:
.1db7	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1db9	20 61 2d	jsr $2d61			jsr 	StringTempAllocate 				; allocate memory for it.
.1dbc	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1dbe	f0 15		beq $1dd5			beq 	_EXPSSExit
.1dc0	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1dc2	d2 28		cmp ($28)			cmp 	(zTemp2)
.1dc4	b0 0f		bcs $1dd5			bcs 	_EXPSSExit
.1dc6	5a		phy				phy
.1dc7	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1dc9	c8		iny				iny 									; +1 for the length byte
.1dca					_EXPSSCopy:
.1dca	b1 28		lda ($28),y			lda 	(zTemp2),y
.1dcc	20 96 2d	jsr $2d96			jsr 	StringTempWrite
.1dcf	c8		iny				iny
.1dd0	c6 26		dec $26				dec 	zTemp1
.1dd2	d0 f6		bne $1dca			bne 	_EXPSSCopy
.1dd4	7a		ply				ply
.1dd5					_EXPSSExit:
.1dd5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1dd6					EXPUnaryVal:
.1dd6	20 98 1a	jsr $1a98			jsr 	EXPEvalString 					; string to R0, zTemp0
.1dd9	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 					; )
.1ddc	20 e0 1d	jsr $1de0			jsr 	VALConversionZTemp0
.1ddf	60		rts				rts
.1de0					VALConversionZTemp0:
.1de0	5a		phy				phy
.1de1	18		clc				clc
.1de2	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1de4	69 01		adc #$01			adc 	#1
.1de6	aa		tax				tax
.1de7	a5 25		lda $25				lda 	zTemp0+1
.1de9	69 00		adc #$00			adc 	#0
.1deb	a8		tay				tay
.1dec	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1dee	20 b6 35	jsr $35b6			jsr 	IFloatStringToFloatR0 			; do conversion
.1df1	b0 02		bcs $1df5			bcs 	_EUVError
.1df3	7a		ply				ply
.1df4	60		rts				rts
.1df5					_EUVError:
.1df5	4c a3 2a	jmp $2aa3		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1df8					AssemblerLookup:
>1df8	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,0,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,0,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,0,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,0,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,0,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,0,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,0,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,0,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,0,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,0,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,0,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,0,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,0,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,0,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,0,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,0
>1e00	fb 1e 7c 00 4b 1e 7c 00 b8 1e 1e 00 41 1e 7c eb
>1e10	b9 1e f9 00 41 1e 7c 00 7f 6a 00 00 7a 6a e1 eb
>1e20	23 6a e1 00 7a 6a e1 00 97 6a 6a 00 7a 6a e1 eb
>1e30	a6 6a 7d 00 7a 6a e1 00 38 62 00 00 00 62 0b eb
>1e40	ec 62 0b 00 2e 62 0b 00 c3 62 62 00 00 62 0b eb
>1e50	bf 62 04 00 00 62 0b 00 42 1d 00 00 3b 1d e7 eb
>1e60	14 1d e7 00 2e 1d e7 00 d3 1d 1d 00 3b 1d e7 eb
>1e70	ac 1d 2c 00 2e 1d e7 00 99 22 00 00 3a 22 39 f5
>1e80	93 7a 54 00 3a 22 39 00 45 22 22 00 3a 22 39 f5
>1e90	5e 22 66 00 3b 22 3b 00 19 01 18 00 19 01 18 f5
>1ea0	c6 01 c5 00 19 01 18 00 55 01 01 00 19 01 18 f5
>1eb0	cc 01 61 00 19 01 18 00 f7 a8 00 00 f7 a8 7d f5
>1ec0	0f a8 92 0c f7 a8 7d 00 75 a8 a8 00 00 a8 7d f5
>1ed0	ba a8 03 31 00 a8 7d 00 f6 48 00 00 f6 48 f9 f5
>1ee0	0e 48 dd 00 f6 48 f9 00 8f 48 48 00 00 48 f9 f5
>1ef0	a7 48 2b 00 00 48 f9 00

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1ef8					BinaryPrecedence:
>1ef8	02					.byte	 2	; $ef =
>1ef9	02					.byte	 2	; $f0 <>
>1efa	02					.byte	 2	; $f1 <=
>1efb	02					.byte	 2	; $f2 <
>1efc	02					.byte	 2	; $f3 >=
>1efd	02					.byte	 2	; $f4 >
>1efe	01					.byte	 1	; $f5 XOR
>1eff	01					.byte	 1	; $f6 OR
>1f00	01					.byte	 1	; $f7 AND
>1f01	04					.byte	 4	; $f8 DIV
>1f02	04					.byte	 4	; $f9 MOD
>1f03	04					.byte	 4	; $fa <<
>1f04	04					.byte	 4	; $fb >>
>1f05	04					.byte	 4	; $fc /
>1f06	04					.byte	 4	; $fd *
>1f07	03					.byte	 3	; $fe -
>1f08	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1f09					StructureOffsets:
>1f09	01					.byte	1  	; $80 REPEAT
>1f0a	ff					.byte	255	; $81 UNTIL
>1f0b	01					.byte	1  	; $82 WHILE
>1f0c	ff					.byte	255	; $83 WEND
>1f0d	01					.byte	1  	; $84 IF
>1f0e	ff					.byte	255	; $85 ENDIF
>1f0f	01					.byte	1  	; $86 DO
>1f10	ff					.byte	255	; $87 LOOP
>1f11	ff					.byte	255	; $88 THEN
>1f12	01					.byte	1  	; $89 PROC
>1f13	ff					.byte	255	; $8a ENDPROC
>1f14	01					.byte	1  	; $8b FOR
>1f15	ff					.byte	255	; $8c NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1f16					StandardTokens:
>1f16	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1f1d	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1f23	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1f29	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1f2e	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1f31	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1f37	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1f3a	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1f3f	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $88 then
>1f44	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $89 proc
>1f49	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $8a endproc
>1f51	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8b for
>1f55	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8c next
>1f5a	00					.byte	$00                                     	; $8d [[end]]
>1f5b	00					.byte	$00                                     	; $8e [[shift]]
>1f5c	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8f else
>1f61	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1f64	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1f69	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1f6d	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1f73	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1f79	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1f7e	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1f82	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1f86	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1f8b	01 2c					.byte	$01,$2c                                 	; $99 ,
>1f8d	01 3b					.byte	$01,$3b                                 	; $9a ;
>1f8f	01 3a					.byte	$01,$3a                                 	; $9b :
>1f91	01 27					.byte	$01,$27                                 	; $9c '
>1f93	01 29					.byte	$01,$29                                 	; $9d )
>1f95	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1f9a	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1f9f	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1fa4	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1fa9	01 5b					.byte	$01,$5b                                 	; $a2 [
>1fab	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1fad	01 23					.byte	$01,$23                                 	; $a4 #
>1faf	01 2e					.byte	$01,$2e                                 	; $a5 .
>1fb1	02 5d 5b				.byte	$02,$5d,$5b                             	; $a6 ][
>1fb4	00					.byte	0											; $a7
>1fb5	00					.byte	0											; $a8
>1fb6	00					.byte	0											; $a9
>1fb7	00					.byte	0											; $aa
>1fb8	00					.byte	0											; $ab
>1fb9	00					.byte	0											; $ac
>1fba	00					.byte	0											; $ad
>1fbb	00					.byte	0											; $ae
>1fbc	00					.byte	0											; $af
>1fbd	00					.byte	0											; $b0
>1fbe	00					.byte	0											; $b1
>1fbf	00					.byte	0											; $b2
>1fc0	00					.byte	0											; $b3
>1fc1	00					.byte	0											; $b4
>1fc2	00					.byte	0											; $b5
>1fc3	00					.byte	0											; $b6
>1fc4	00					.byte	0											; $b7
>1fc5	00					.byte	0											; $b8
>1fc6	00					.byte	0											; $b9
>1fc7	00					.byte	0											; $ba
>1fc8	00					.byte	0											; $bb
>1fc9	00					.byte	0											; $bc
>1fca	00					.byte	0											; $bd
>1fcb	00					.byte	0											; $be
>1fcc	00					.byte	0											; $bf
>1fcd	00					.byte	0											; $c0
>1fce	00					.byte	0											; $c1
>1fcf	00					.byte	0											; $c2
>1fd0	00					.byte	0											; $c3
>1fd1	00					.byte	0											; $c4
>1fd2	00					.byte	0											; $c5
>1fd3	00					.byte	0											; $c6
>1fd4	00					.byte	0											; $c7
>1fd5	00					.byte	0											; $c8
>1fd6	00					.byte	0											; $c9
>1fd7	00					.byte	0											; $ca
>1fd8	00					.byte	0											; $cb
>1fd9	00					.byte	0											; $cc
>1fda	00					.byte	0											; $cd
>1fdb	00					.byte	0											; $ce
>1fdc	00					.byte	0											; $cf
>1fdd	00					.byte	0											; $d0
>1fde	00					.byte	0											; $d1
>1fdf	00					.byte	0											; $d2
>1fe0	00					.byte	0											; $d3
>1fe1	00					.byte	0											; $d4
>1fe2	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1fe8	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1fee	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1ff6	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1ffd	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>2003	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>2009	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>200e	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>2013	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>2018	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>201d	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>2022	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>2028	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>202d	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>2035	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>203c	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>2041	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>2046	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>204c	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>2051	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>2057	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>205c	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>2062	01 28					.byte	$01,$28                                 	; $eb (
>2064	01 26					.byte	$01,$26                                 	; $ec &
>2066	00					.byte	$00                                     	; $ed [[decimal]]
>2067	00					.byte	$00                                     	; $ee [[string]]
>2068	01 3d					.byte	$01,$3d                                 	; $ef =
>206a	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>206d	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>2070	01 3c					.byte	$01,$3c                                 	; $f2 <
>2072	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>2075	01 3e					.byte	$01,$3e                                 	; $f4 >
>2077	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>207b	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>207e	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>2082	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>2086	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>208a	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>208d	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>2090	01 2f					.byte	$01,$2f                                 	; $fc /
>2092	01 2a					.byte	$01,$2a                                 	; $fd *
>2094	01 2d					.byte	$01,$2d                                 	; $fe -
>2096	01 2b					.byte	$01,$2b                                 	; $ff +
>2098	ff					.byte	$FF
.2099					AlternateTokens:
>2099	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8e80 clear
>209f	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8e81 new
>20a3	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8e82 run
>20a7	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8e83 stop
>20ac	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8e84 end
>20b0	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8e85 assert
>20b7	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8e86 list
>20bc	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8e87 save
>20c1	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8e88 load
>20c6	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8e89 gosub
>20cc	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8e8a goto
>20d1	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8e8b return
>20d8	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8e8c restore
>20e0	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8e8d dim
>20e4	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8e8e dir
>20e8	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8e8f erase
>20ee	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8e90 renumber
>20f6	52
>20f7	03 4f 50 54				.byte	$03,$4f,$50,$54                         	; $8e91 opt
>20fb	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.20fc					VectorTable:
>20fc	69 29					.word	Command_REPEAT           ; $80 REPEAT
>20fe	72 29					.word	Command_UNTIL            ; $81 UNTIL
>2100	54 2a					.word	Command_WHILE            ; $82 WHILE
>2102	75 2a					.word	Command_WEND             ; $83 WEND
>2104	2c 29					.word	IfCommand                ; $84 IF
>2106	55 29					.word	EndIf                    ; $85 ENDIF
>2108	ae 27					.word	Command_DO               ; $86 DO
>210a	c6 27					.word	Command_LOOP             ; $87 LOOP
>210c	ae 18					.word	NoExec01                 ; $88 THEN
>210e	ae 18					.word	NoExec08                 ; $89 PROC
>2110	a2 27					.word	Command_ENDPROC          ; $8a ENDPROC
>2112	cf 27					.word	Command_FOR              ; $8b FOR
>2114	5c 28					.word	Command_NEXT             ; $8c NEXT
>2116	2f 18					.word	RUNEndOfLine             ; $8d [[END]]
>2118	8b 18					.word	Command_Shift_Handler    ; $8e [[SHIFT]]
>211a	4e 29					.word	ElseCode                 ; $8f ELSE
>211c	ae 18					.word	NoExec02                 ; $90 TO
>211e	ae 18					.word	NoExec03                 ; $91 STEP
>2120	b3 15					.word	CommandLET               ; $92 LET
>2122	08 15					.word	Command_Print            ; $93 PRINT
>2124	01 15					.word	Command_Input            ; $94 INPUT
>2126	66 27					.word	Command_CALL             ; $95 CALL
>2128	99 18					.word	Command_Sys              ; $96 SYS
>212a	a4 17					.word	Command_REM              ; $97 REM
>212c	b7 27					.word	Command_EXIT             ; $98 EXIT
>212e	ae 18					.word	NoExec04                 ; $99 ,
>2130	ae 18					.word	NoExec05                 ; $9a ;
>2132	ae 18					.word	NoExec06                 ; $9b :
>2134	a4 17					.word	Command_REM2             ; $9c '
>2136	ae 18					.word	NoExec07                 ; $9d )
>2138	aa 14					.word	Command_Poke             ; $9e POKE
>213a	a7 14					.word	Command_Doke             ; $9f DOKE
>213c	30 17					.word	Command_READ             ; $a0 READ
>213e	97 17					.word	Command_DATA             ; $a1 DATA
>2140	15 10					.word	Command_AssemblerStart   ; $a2 [
>2142	28 2f					.word	NotImplemented           ; $a3 ]
>2144	28 2f					.word	NotImplemented           ; $a4 #
>2146	28 2f					.word	NotImplemented           ; $a5 .
>2148	a3 2d					.word	Command_ABoot            ; $a6 ][
>214a	28 2f					.word	NotImplemented           ; $a7
>214c	28 2f					.word	NotImplemented           ; $a8
>214e	28 2f					.word	NotImplemented           ; $a9
>2150	28 2f					.word	NotImplemented           ; $aa
>2152	28 2f					.word	NotImplemented           ; $ab
>2154	28 2f					.word	NotImplemented           ; $ac
>2156	28 2f					.word	NotImplemented           ; $ad
>2158	28 2f					.word	NotImplemented           ; $ae
>215a	28 2f					.word	NotImplemented           ; $af
>215c	28 2f					.word	NotImplemented           ; $b0
>215e	28 2f					.word	NotImplemented           ; $b1
>2160	28 2f					.word	NotImplemented           ; $b2
>2162	28 2f					.word	NotImplemented           ; $b3
>2164	28 2f					.word	NotImplemented           ; $b4
>2166	28 2f					.word	NotImplemented           ; $b5
>2168	28 2f					.word	NotImplemented           ; $b6
>216a	28 2f					.word	NotImplemented           ; $b7
>216c	28 2f					.word	NotImplemented           ; $b8
>216e	28 2f					.word	NotImplemented           ; $b9
>2170	28 2f					.word	NotImplemented           ; $ba
>2172	28 2f					.word	NotImplemented           ; $bb
>2174	28 2f					.word	NotImplemented           ; $bc
>2176	28 2f					.word	NotImplemented           ; $bd
>2178	28 2f					.word	NotImplemented           ; $be
>217a	28 2f					.word	NotImplemented           ; $bf
>217c	28 2f					.word	NotImplemented           ; $c0
>217e	28 2f					.word	NotImplemented           ; $c1
>2180	28 2f					.word	NotImplemented           ; $c2
>2182	28 2f					.word	NotImplemented           ; $c3
>2184	28 2f					.word	NotImplemented           ; $c4
>2186	28 2f					.word	NotImplemented           ; $c5
>2188	28 2f					.word	NotImplemented           ; $c6
>218a	28 2f					.word	NotImplemented           ; $c7
>218c	28 2f					.word	NotImplemented           ; $c8
>218e	28 2f					.word	NotImplemented           ; $c9
>2190	28 2f					.word	NotImplemented           ; $ca
>2192	28 2f					.word	NotImplemented           ; $cb
>2194	28 2f					.word	NotImplemented           ; $cc
>2196	28 2f					.word	NotImplemented           ; $cd
>2198	28 2f					.word	NotImplemented           ; $ce
>219a	28 2f					.word	NotImplemented           ; $cf
>219c	28 2f					.word	NotImplemented           ; $d0
>219e	28 2f					.word	NotImplemented           ; $d1
>21a0	28 2f					.word	NotImplemented           ; $d2
>21a2	28 2f					.word	NotImplemented           ; $d3
>21a4	28 2f					.word	NotImplemented           ; $d4
>21a6	1c 1c					.word	EXPUnaryDeek             ; $d5 DEEK(
>21a8	0e 1c					.word	EXPUnaryPeek             ; $d6 PEEK(
>21aa	5a 1d					.word	EXPUnaryRight            ; $d7 RIGHT$(
>21ac	4d 1d					.word	EXPUnaryLeft             ; $d8 LEFT$(
>21ae	74 1d					.word	EXPUnaryMid              ; $d9 MID$(
>21b0	0a 1d					.word	EXPUnaryStr              ; $da STR$(
>21b2	d6 1d					.word	EXPUnaryVal              ; $db VAL(
>21b4	d7 1c					.word	EXPUnarySgn              ; $dc SGN(
>21b6	88 1b					.word	EXPUnaryAbs              ; $dd ABS(
>21b8	5c 1c					.word	EXPUnaryLen              ; $de LEN(
>21ba	ed 1c					.word	EXPUnarySqr              ; $df SQR(
>21bc	ac 1b					.word	EXPUnaryChr              ; $e0 CHR$(
>21be	96 1b					.word	EXPUnaryAsc              ; $e1 ASC(
>21c0	3e 1c					.word	EXPUnaryInkey            ; $e2 INKEY$(
>21c2	28 2f					.word	NotImplemented           ; $e3 EVENT(
>21c4	28 2f					.word	NotImplemented           ; $e4 TIME
>21c6	52 1c					.word	EXPUnaryInt              ; $e5 INT(
>21c8	34 1c					.word	EXPUnaryFrac             ; $e6 FRAC(
>21ca	bd 1b					.word	EXPUnaryDec              ; $e7 DEC(
>21cc	fc 1c					.word	EXPUnaryHex              ; $e8 HEX$(
>21ce	71 1c					.word	EXPUnaryRnd              ; $e9 RND(
>21d0	81 1c					.word	ExpUnaryRand             ; $ea RAND(
>21d2	6a 1c					.word	EXPUnaryParenthesis      ; $eb (
>21d4	92 1b					.word	EXPUnaryNull             ; $ec &
>21d6	0b 1c					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>21d8	32 1d					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>21da	6b 19					.word	EXPCompareEqual          ; $ef =
>21dc	86 19					.word	EXPCompareNotEqual       ; $f0 <>
>21de	8f 19					.word	EXPCompareLessEqual      ; $f1 <=
>21e0	74 19					.word	EXPCompareLess           ; $f2 <
>21e2	98 19					.word	EXPCompareGreaterEqual   ; $f3 >=
>21e4	7d 19					.word	EXPCompareGreater        ; $f4 >
>21e6	18 19					.word	EXPBinXor                ; $f5 XOR
>21e8	0c 19					.word	EXPBinOr                 ; $f6 OR
>21ea	00 19					.word	EXPBinAnd                ; $f7 AND
>21ec	d8 18					.word	EXPBinIDiv               ; $f8 DIV
>21ee	e9 18					.word	EXPBinIMod               ; $f9 MOD
>21f0	e3 19					.word	EXPBinLeft               ; $fa <<
>21f2	eb 19					.word	EXPBinRight              ; $fb >>
>21f4	cc 18					.word	EXPBinFDiv               ; $fc /
>21f6	c3 18					.word	EXPBinMul                ; $fd *
>21f8	ba 18					.word	EXPBinSub                ; $fe -
>21fa	b1 18					.word	EXPBinAdd                ; $ff +
.21fc					AlternateVectorTable:
>21fc	17 13					.word	Command_CLEAR            ; $8e80 CLEAR
>21fe	27 17					.word	Command_NEW              ; $8e81 NEW
>2200	23 18					.word	Command_RUN              ; $8e82 RUN
>2202	96 18					.word	Command_STOP             ; $8e83 STOP
>2204	93 18					.word	Command_END              ; $8e84 END
>2206	09 13					.word	Command_ASSERT           ; $8e85 ASSERT
>2208	2d 16					.word	Command_LIST             ; $8e86 LIST
>220a	96 2e					.word	Command_SAVE             ; $8e87 SAVE
>220c	55 2e					.word	Command_LOAD             ; $8e88 LOAD
>220e	12 29					.word	Command_GOSUB            ; $8e89 GOSUB
>2210	d1 14					.word	Command_GOTO             ; $8e8a GOTO
>2212	20 29					.word	Command_RETURN           ; $8e8b RETURN
>2214	f5 17					.word	Command_RESTORE          ; $8e8c RESTORE
>2216	8b 13					.word	CommandDIM               ; $8e8d DIM
>2218	ec 2d					.word	Command_DIR              ; $8e8e DIR
>221a	29 2e					.word	Command_ERASE            ; $8e8f ERASE
>221c	b1 17					.word	Command_RENUMBER         ; $8e90 RENUMBER
>221e	02 13					.word	Command_OPT              ; $8e91 OPT

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.2220					TOKDetokenise:
.2220	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.2222	84 29		sty $29				sty 	zTemp2+1
.2224	9c 1d 0b	stz $0b1d			stz		TOKLastCharacter 			; clear last character
.2227					_TOKDLoop:
.2227	20 6c 22	jsr $226c			jsr 	TOKDGet 					; get next
.222a	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line, exit.
.222c	f0 3c		beq $226a			beq 	_TOKDExit
.222e	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string or decimal places modifier
.2230	f0 33		beq $2265			beq 	_TOKDDataItem
.2232	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.2234	f0 2f		beq $2265			beq 	_TOKDDataItem
.2236	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.2238	f0 19		beq $2253			beq 	_TOKAmpersand
.223a	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.223c	10 05		bpl $2243			bpl 	_TOKDNotToken
.223e	20 32 23	jsr $2332			jsr 	TOKDToken 					; token to text.
.2241	80 e4		bra $2227			bra 	_TOKDLoop
.2243					_TOKDNotToken:
.2243	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.2245	90 05		bcc $224c			bcc 	_TOKDNotIdentifier
.2247	20 a9 22	jsr $22a9			jsr 	TOKDIdentifier
.224a	80 db		bra $2227			bra 	_TOKDLoop
.224c					_TOKDNotIdentifier:
.224c	a0 0a		ldy #$0a			ldy 	#10
.224e	20 ec 22	jsr $22ec			jsr 	TOKDInteger
.2251	80 d4		bra $2227			bra 	_TOKDLoop
.2253					_TOKAmpersand:
.2253	20 74 23	jsr $2374			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.2256	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.2258	20 75 22	jsr $2275			jsr 	TOKDOutput
.225b	20 6c 22	jsr $226c			jsr 	TOKDGet 					; get first char of integer
.225e	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.2260	20 ec 22	jsr $22ec			jsr 	TOKDInteger
.2263	80 c2		bra $2227			bra 	_TOKDLoop
.2265					_TOKDDataItem:
.2265	20 82 22	jsr $2282			jsr 	TOKDDataItem
.2268	80 bd		bra $2227			bra 	_TOKDLoop
.226a					_TOKDExit:
.226a	18		clc				clc
.226b	60		rts				rts
.226c	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.226e	e6 28		inc $28				inc 	zTemp2
.2270	d0 02		bne $2274			bne 	_TKDGExit
.2272	e6 29		inc $29				inc 	zTemp2+1
.2274					_TKDGExit:
.2274	60		rts				rts
.2275					TOKDOutput:
.2275	8d 1d 0b	sta $0b1d			sta 	TOKLastCharacter 			; save last character
.2278	6c 1b 0b	jmp ($0b1b)			jmp 	(TOKOutputMethod) 			; call output handler
.227b					TOKSetDetokeniseOutput:
.227b	8e 1b 0b	stx $0b1b			stx 	TOKOutputMethod
.227e	8c 1c 0b	sty $0b1c			sty 	TOKOutputMethod+1
.2281	60		rts				rts
.0b1b					TOKOutputMethod:
>0b1b							.fill 	2
.0b1d					TOKLastCharacter:
>0b1d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.2282					TOKDDataItem:
.2282	a8		tay				tay 								; type in Y
.2283	a9 22		lda #$22			lda 	#'"'						; start with " or . depending on type.
.2285	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.2287	f0 02		beq $228b			beq 	_TOKDDIsString
.2289	a9 2e		lda #$2e			lda 	#'.'
.228b					_TOKDDIsString:
.228b	20 75 22	jsr $2275			jsr 	TOKDOutput 					; dump it
.228e	20 6c 22	jsr $226c			jsr 	TOKDGet 					; get length into X
.2291	aa		tax				tax
.2292					_TOKDDOutput:
.2292	ca		dex				dex 								; output all the data.
.2293	e0 ff		cpx #$ff			cpx 	#255
.2295	f0 08		beq $229f			beq 	_TOKDDEnd
.2297	20 6c 22	jsr $226c			jsr 	TOKDGet 					; get character and output it
.229a	20 75 22	jsr $2275			jsr 	TOKDOutput
.229d	80 f3		bra $2292			bra 	_TOKDDOutput
.229f					_TOKDDEnd:
.229f	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.22a1	d0 05		bne $22a8			bne 	_TOKDDNotString
.22a3	a9 22		lda #$22			lda 	#'"'
.22a5	20 75 22	jsr $2275			jsr 	TOKDOutput
.22a8					_TOKDDNotString:
.22a8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.22a9					TOKDIdentifier:
.22a9	a0 ff		ldy #$ff			ldy 	#$FF 						; flag set on first character only.
.22ab	8c 1e 0b	sty $0b1e			sty 	TOKDIFirstChar
.22ae					_TOKDLoop:
.22ae	a8		tay				tay 								; token in Y, now coner it to ASCII
.22af	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.22b1	c0 64		cpy #$64			cpy 	#$64
.22b3	f0 0b		beq $22c0			beq 	_TOKDIOutput
.22b5	98		tya				tya 								; handle a-z
.22b6	18		clc				clc
.22b7	69 21		adc #$21			adc	 	#$21
.22b9	c0 5a		cpy #$5a			cpy 	#$5A
.22bb	90 03		bcc $22c0			bcc 	_TOKDIOutput
.22bd	38		sec				sec 								; handle 0-9
.22be	e9 4b		sbc #$4b			sbc 	#$4B
.22c0					_TOKDIOutput:
.22c0	2c 1e 0b	bit $0b1e			bit 	TOKDIFirstChar 				; check spacing if first character
.22c3	10 08		bpl $22cd			bpl 	_TOKDINoSpacing
.22c5	48		pha				pha
.22c6	20 6f 23	jsr $236f			jsr 	TOKDSpacing
.22c9	9c 1e 0b	stz $0b1e			stz 	TOKDIFirstChar
.22cc	68		pla				pla
.22cd					_TOKDINoSpacing:
.22cd	20 75 22	jsr $2275			jsr 	TOKDOutput
.22d0	20 6c 22	jsr $226c			jsr 	TOKDGet 					; get next token
.22d3	c9 7c		cmp #$7c			cmp 	#$7C 						; 7C..7F are end markers
.22d5	90 d7		bcc $22ae			bcc 	_TOKDLoop
.22d7	f0 12		beq $22eb			beq 	_TOKDIExit 					; it's a number, no tail.
.22d9	4a		lsr a				lsr 	a 							; string ?
.22da	90 07		bcc $22e3			bcc 	_TOKDICheckArray
.22dc	48		pha				pha
.22dd	a9 24		lda #$24			lda 	#"$"
.22df	20 75 22	jsr $2275			jsr 	TOKDOutput
.22e2	68		pla				pla
.22e3					_TOKDICheckArray:
.22e3	4a		lsr a				lsr 	a 							; array ?
.22e4	90 05		bcc $22eb			bcc 	_TOKDIExit
.22e6	a9 28		lda #$28			lda 	#"("
.22e8	20 75 22	jsr $2275			jsr 	TOKDOutput
.22eb					_TOKDIExit:
.22eb	60		rts				rts
.0b1e					TOKDIFirstChar:
>0b1e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.22ec					TOKDInteger:
.22ec	5a		phy				phy 								; save base on stack
.22ed	a2 08		ldx #$08			ldx 	#IFR0 						; set first byte of integer into into R0
.22ef	20 54 37	jsr $3754			jsr 	IFloatSetByte
.22f2					_TOKDILoop:
.22f2	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F, extract the whole integer out.
.22f4	c9 40		cmp #$40			cmp 	#$40
.22f6	b0 1d		bcs $2315			bcs 	_TOKDIHaveInteger
.22f8	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.22fa	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.22fd	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.2300	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.2303	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.2306	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.2309	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.230c	20 6c 22	jsr $226c			jsr 	TOKDGet 					; OR byte in.
.230f	05 08		ora $08				ora 	IFR0+IM0
.2311	85 08		sta $08				sta 	IFR0+IM0
.2313	80 dd		bra $22f2			bra 	_TOKDILoop
.2315					_TOKDIHaveInteger:
.2315	7a		ply				ply 								; restore base
.2316	98		tya				tya 								; base in A
.2317	20 f4 34	jsr $34f4			jsr 	IFloatIntegerToStringR0 	; make it a string
.231a	86 24		stx $24				stx 	zTemp0 						; output that string.
.231c	84 25		sty $25				sty 	zTemp0+1
.231e	b2 24		lda ($24)			lda 	(zTemp0)
.2320	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.2322	b1 24		lda ($24),y			lda 	(zTemp0),y
.2324	20 6f 23	jsr $236f			jsr 	TOKDSpacing 				; check spacing okay.
.2327					_TOKDOutput:
.2327	b1 24		lda ($24),y			lda 	(zTemp0),y
.2329	20 75 22	jsr $2275			jsr 	TOKDOutput
.232c	c8		iny				iny
.232d	b1 24		lda ($24),y			lda 	(zTemp0),y
.232f	d0 f6		bne $2327			bne 	_TOKDOutput
.2331	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.2332					TOKDToken:
.2332	a2 16		ldx #$16			ldx 	#StandardTokens & $FF 		; standard table
.2334	a0 1f		ldy #$1f			ldy 	#StandardTokens >> 8
.2336	c9 8e		cmp #$8e			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.2338	d0 07		bne $2341			bne 	_TOKDSearch
.233a	20 6c 22	jsr $226c			jsr 	TOKDGet 					; get next
.233d	a2 99		ldx #$99			ldx 	#AlternateTokens & $FF 		; alt table address
.233f	a0 20		ldy #$20			ldy 	#AlternateTokens >> 8
.2341					_TOKDSearch:
.2341	86 24		stx $24				stx 	zTemp0 						; save table in zTemp0
.2343	84 25		sty $25				sty 	zTemp0+1
.2345	aa		tax				tax 								; token ID in X.
.2346					_TOKDFind:
.2346	ca		dex				dex 								; reached the token position
.2347	10 0d		bpl $2356			bpl 	_TOKDFound
.2349	38		sec				sec 								; go to next entry in token table
.234a	b2 24		lda ($24)			lda 	(zTemp0)
.234c	65 24		adc $24				adc 	zTemp0
.234e	85 24		sta $24				sta 	zTemp0
.2350	90 f4		bcc $2346			bcc 	_TOKDFind
.2352	e6 25		inc $25				inc 	zTemp0+1
.2354	80 f0		bra $2346			bra 	_TOKDFind
.2356					_TOKDFound:
.2356	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X.
.2358	f0 14		beq $236e			beq 	_TOKDExit 					; not a token with text.
.235a	aa		tax				tax
.235b	a0 01		ldy #$01			ldy 	#1 							; output the token.
.235d	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.235f	20 6f 23	jsr $236f			jsr 	TOKDSpacing 				; do we need space before this.
.2362					_TOKDOutput:
.2362	b1 24		lda ($24),y			lda 	(zTemp0),y 					; output them in lower case
.2364	20 25 27	jsr $2725			jsr 	TOKToLower
.2367	20 75 22	jsr $2275			jsr 	TOKDOutput
.236a	c8		iny				iny
.236b	ca		dex				dex
.236c	d0 f4		bne $2362			bne 	_TOKDOutput
.236e					_TOKDExit:
.236e	60		rts				rts
.236f					TOKDSpacing:
.236f	20 3c 27	jsr $273c			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.2372	90 0d		bcc $2381			bcc 	TOKDSExit
.2374					TOKDSpaceLastAlpha:
.2374	ad 1d 0b	lda $0b1d			lda 	TOKLastCharacter			; and last character also alphanumeric
.2377	20 3c 27	jsr $273c			jsr 	TOKIsIdentifierElement
.237a	90 05		bcc $2381			bcc 	TOKDSExit
.237c	a9 20		lda #$20			lda 	#" " 						; we need a space.
.237e	20 75 22	jsr $2275			jsr 	TOKDOutput
.2381					TOKDSExit:
.2381	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.2382					PGMDeleteLine:
.2382	20 35 24	jsr $2435			jsr 	PGMEndProgram 				; end of program into zTemp0
.2385	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2387	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh
.238a	85 27		sta $27				sta 	zTemp1+1
.238c					_PGMDLoop:
.238c	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.238e	38		sec				sec
.238f	f0 3a		beq $23cb			beq 	_PGMDExit
.2391	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.2393	b1 26		lda ($26),y			lda 	(zTemp1),y 					; compare LSB
.2395	cd 01 0a	cmp $0a01			cmp 	TOKLineNumber
.2398	d0 08		bne $23a2			bne 	_PGMDNext
.239a	c8		iny				iny 								; compare MSB
.239b	b1 26		lda ($26),y			lda 	(zTemp1),y
.239d	cd 02 0a	cmp $0a02			cmp 	TOKLineNumber+1
.23a0	f0 0d		beq $23af			beq 	_PGMDDelete
.23a2					_PGMDNext:
.23a2	18		clc				clc
.23a3	b2 26		lda ($26)			lda 	(zTemp1)
.23a5	65 26		adc $26				adc 	zTemp1
.23a7	85 26		sta $26				sta 	zTemp1
.23a9	90 e1		bcc $238c			bcc 	_PGMDLoop
.23ab	e6 27		inc $27				inc 	zTemp1+1
.23ad	80 dd		bra $238c			bra 	_PGMDLoop
.23af					_PGMDDelete:
.23af	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.23b1	a8		tay				tay
.23b2					_PGMDCopy:
.23b2	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.23b4	92 26		sta ($26)			sta 	(zTemp1)
.23b6	a5 26		lda $26				lda 	zTemp1 						; reached the end in zTemp0
.23b8	c5 24		cmp $24				cmp 	zTemp0
.23ba	d0 07		bne $23c3			bne 	_PGMDNext2
.23bc	a5 27		lda $27				lda 	zTemp1+1
.23be	c5 25		cmp $25				cmp 	zTemp0+1
.23c0	18		clc				clc
.23c1	f0 08		beq $23cb			beq 	_PGMDExit 					; then exit.
.23c3					_PGMDNext2:
.23c3	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.23c5	d0 eb		bne $23b2			bne 	_PGMDCopy
.23c7	e6 27		inc $27				inc 	zTemp1+1
.23c9	80 e7		bra $23b2			bra 	_PGMDCopy
.23cb					_PGMDExit:
.23cb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.23cc					PGMInsertLine:
.23cc	20 35 24	jsr $2435			jsr 	PGMEndProgram 				; end of program into zTemp0
.23cf	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.23d1	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh
.23d4	85 27		sta $27				sta 	zTemp1+1
.23d6					_PGMILoop:
.23d6	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.23d8	f0 1c		beq $23f6			beq 	_PGMIInsert
.23da	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.23dc	b1 26		lda ($26),y			lda 	(zTemp1),y
.23de	cd 01 0a	cmp $0a01			cmp 	TOKLineNumber
.23e1	c8		iny				iny
.23e2	b1 26		lda ($26),y			lda 	(zTemp1),y
.23e4	ed 02 0a	sbc $0a02			sbc 	TOKLineNumber+1
.23e7	b0 0d		bcs $23f6			bcs 	_PGMIInsert 				; insert here.
.23e9	18		clc				clc
.23ea	b2 26		lda ($26)			lda 	(zTemp1)
.23ec	65 26		adc $26				adc 	zTemp1
.23ee	85 26		sta $26				sta 	zTemp1
.23f0	90 e4		bcc $23d6			bcc 	_PGMILoop
.23f2	e6 27		inc $27				inc 	zTemp1+1
.23f4	80 e0		bra $23d6			bra 	_PGMILoop
.23f6					_PGMIInsert:
.23f6	ac 00 0a	ldy $0a00			ldy 	TOKLineSize 				; space required is length in token buffer.
.23f9					_PGMIInsertLoop:
.23f9	b2 24		lda ($24)			lda 	(zTemp0) 					; shift byte up.
.23fb	91 24		sta ($24),y			sta 	(zTemp0),y
.23fd	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.23ff	c5 24		cmp $24				cmp 	zTemp0
.2401	d0 06		bne $2409			bne 	_PGMINext
.2403	a5 27		lda $27				lda 	zTemp1+1
.2405	c5 25		cmp $25				cmp 	zTemp0+1
.2407	f0 0a		beq $2413			beq 	_PGMIInserted
.2409					_PGMINext:
.2409	a5 24		lda $24				lda 	zTemp0
.240b	d0 02		bne $240f			bne 	_PGMINoBorrow
.240d	c6 25		dec $25				dec 	zTemp0+1
.240f					_PGMINoBorrow:
.240f	c6 24		dec $24				dec 	zTemp0
.2411	80 e6		bra $23f9			bra 	_PGMIInsertLoop 			; do previous byte.
.2413					_PGMIInserted:
.2413	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.2415					_PGMICopyLoop:
.2415	b9 00 0a	lda $0a00,y			lda 	TOKLineSize,y
.2418	91 26		sta ($26),y			sta 	(zTemp1),y
.241a	c8		iny				iny
.241b	cc 00 0a	cpy $0a00			cpy 	TOKLineSize
.241e	d0 f5		bne $2415			bne 	_PGMICopyLoop
.2420	18		clc				clc
.2421	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.2422					PGMSetBaseAddress:
.2422	8e 1f 0b	stx $0b1f			stx 	PGMBaseHigh 				; use memory from here
.2425	8c 20 0b	sty $0b20			sty 	PGMEndMemoryHigh 			; to here.
.2428	60		rts				rts
.2429					PGMNewProgram:
.2429	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.242b	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh
.242e	85 25		sta $25				sta 	zTemp0+1
.2430	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.2432	92 24		sta ($24)			sta 	(zTemp0)
.2434	60		rts				rts
.2435					PGMEndProgram:
.2435	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.2437	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh
.243a	85 25		sta $25				sta 	zTemp0+1
.243c					_PGMEPLoop:
.243c	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.243e	f0 0b		beq $244b			beq 	_PGMEPExit
.2440	18		clc				clc 								; no, advance to next
.2441	65 24		adc $24				adc 	zTemp0
.2443	85 24		sta $24				sta 	zTemp0
.2445	90 f5		bcc $243c			bcc 	_PGMEPLoop
.2447	e6 25		inc $25				inc 	zTemp0+1
.2449	80 f1		bra $243c			bra 	_PGMEPLoop
.244b					_PGMEPExit:
.244b	60		rts				rts
.0b1f					PGMBaseHigh:
>0b1f							.fill 	1
.0b20					PGMEndMemoryHigh:
>0b20							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.244c					TOKResetElement:
.244c	9c 21 0b	stz $0b21			stz 	TOKElement
.244f	60		rts				rts
.2450					TOKWriteElement:
.2450	da		phx				phx
.2451	ae 21 0b	ldx $0b21			ldx 	TOKElement
.2454	9d 22 0b	sta $0b22,x			sta 	TOKElementText,x
.2457	9e 23 0b	stz $0b23,x			stz 	TOKElementText+1,x
.245a	fa		plx				plx
.245b	ee 21 0b	inc $0b21			inc 	TOKElement
.245e	60		rts				rts
.0b21					TOKElement:
>0b21							.fill 	1
.0b22					TOKElementText:
>0b22							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.245f					TOKTokeniseConstant:
.245f	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.2461	48		pha				pha 								; save LSB on stack
.2462	29 c0		and #$c0			and 	#$C0
.2464	05 09		ora $09				ora 	IFR0+IM1
.2466	05 0a		ora $0a				ora 	IFR0+IM2
.2468	f0 10		beq $247a			beq 	_TTCLess
.246a	da		phx				phx
.246b	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.246d					_TTCShiftRight:
.246d	46 0a		lsr $0a				lsr 	IFR0+IM2
.246f	66 09		ror $09				ror 	IFR0+IM1
.2471	66 08		ror $08				ror 	IFR0+IM0
.2473	ca		dex				dex
.2474	d0 f7		bne $246d			bne 	_TTCShiftRight
.2476	fa		plx				plx
.2477	20 5f 24	jsr $245f			jsr 	TOKTokeniseConstant
.247a					_TTCLess:
.247a	68		pla				pla
.247b	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.247d	20 1d 25	jsr $251d			jsr 	TOKWriteA
.2480	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.2481					TOKTokeniseDecimals:
.2481	20 30 25	jsr $2530			jsr 	TOKGetNext 					; consume the .
.2484	20 a9 26	jsr $26a9			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2487	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.2489	20 1d 25	jsr $251d			jsr 	TOKWriteA
.248c	20 91 24	jsr $2491			jsr 	TOKOutputElementBuffer 		; then the buffer
.248f	18		clc				clc
.2490	60		rts				rts
.2491					TOKOutputElementBuffer:
.2491	ad 21 0b	lda $0b21			lda 	TOKElement 					; get count and write that
.2494	20 1d 25	jsr $251d			jsr 	TOKWriteA
.2497	a8		tay				tay 								; put in Y
.2498	f0 0c		beq $24a6			beq 	_TOEExit 					; exit if empty which is okay.
.249a	a2 01		ldx #$01			ldx 	#1
.249c					_TOELoop:
.249c	bd 21 0b	lda $0b21,x			lda 	TOKElement,x
.249f	20 1d 25	jsr $251d			jsr 	TOKWriteA
.24a2	e8		inx				inx
.24a3	88		dey				dey
.24a4	d0 f6		bne $249c			bne 	_TOELoop
.24a6					_TOEExit:
.24a6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.24a7					TOKTokenise:
.24a7	8c 22 0c	sty $0c22			sty 	TOKDataSource+1 			; save source routine pointer
.24aa	8e 21 0c	stx $0c21			stx 	TOKDataSource
.24ad	a9 01		lda #$01			lda 	#1 							; set first element flag.
.24af	8d 23 0c	sta $0c23			sta 	TOKIsFirstElement
.24b2	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.24b4	8d 00 0a	sta $0a00			sta 	TOKLineSize 				; line length itself and the line numbers.
.24b7	9c 01 0a	stz $0a01			stz 	TOKLineNumber
.24ba	9c 02 0a	stz $0a02			stz 	TOKLineNumber+1
.24bd					_TOKMainLoop:
.24bd	20 2c 25	jsr $252c			jsr 	TOKGet 						; what follows ?
.24c0	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.24c2	f0 50		beq $2514			beq 	_TOKExit
.24c4	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.24c6	d0 05		bne $24cd			bne 	_TOKElement
.24c8	20 30 25	jsr $2530			jsr 	TOKGetNext
.24cb	80 f0		bra $24bd			bra 	_TOKMainLoop
.24cd					_TOKElement:
.24cd	20 30 27	jsr $2730			jsr 	TOKIsDigit 					; is it 0..9
.24d0	90 16		bcc $24e8			bcc 	_TOKNotDigit
.24d2	20 80 26	jsr $2680			jsr 	TOKTokeniseInteger 			; get integer
.24d5	b0 44		bcs $251b			bcs 	_TOKFail 					; did it fail ?
.24d7	9c 23 0c	stz $0c23			stz 	TOKIsFirstElement 			; clear first element flag
.24da	20 2c 25	jsr $252c			jsr 	TOKGet 						; what follows ?
.24dd	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.24df	d0 dc		bne $24bd			bne 	_TOKMainLoop
.24e1	20 81 24	jsr $2481			jsr 	TOKTokeniseDecimals
.24e4	b0 35		bcs $251b			bcs 	_TOKFail
.24e6	80 d5		bra $24bd			bra 	_TOKMainLoop
.24e8					_TOKNotDigit:
.24e8	9c 23 0c	stz $0c23			stz 	TOKIsFirstElement 			; clear first element flag
.24eb	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.24ed	d0 07		bne $24f6			bne 	_TOKNotHex
.24ef	20 86 25	jsr $2586			jsr 	TOKTokeniseHexadecimal
.24f2	b0 27		bcs $251b			bcs 	_TOKFail
.24f4	80 c7		bra $24bd			bra 	_TOKMainLoop
.24f6					_TOKNotHex:
.24f6	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.24f8	d0 07		bne $2501			bne 	_TOKNotString
.24fa	20 f7 26	jsr $26f7			jsr 	TOKTokeniseString
.24fd	b0 1c		bcs $251b			bcs 	_TOKFail
.24ff	80 bc		bra $24bd			bra 	_TOKMainLoop
.2501					_TOKNotString:
.2501	20 49 27	jsr $2749			jsr 	TOKIsAlpha 					; identifier ?
.2504	b0 07		bcs $250d			bcs 	_TOKIdentifier
.2506	20 bd 26	jsr $26bd			jsr 	TOKTokenisePunctuation 		; punctuation
.2509	b0 10		bcs $251b			bcs 	_TOKFail
.250b	80 b0		bra $24bd			bra 	_TOKMainLoop
.250d					_TOKIdentifier:
.250d	20 c3 25	jsr $25c3			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2510	b0 09		bcs $251b			bcs 	_TOKFail
.2512	80 a9		bra $24bd			bra 	_TOKMainLoop
.2514					_TOKExit:
.2514	a9 8d		lda #$8d			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.2516	20 1d 25	jsr $251d			jsr 	TOKWriteA
.2519	18		clc				clc									; return with carry set.
.251a	60		rts				rts
.251b					_TOKFail:
.251b	38		sec				sec
.251c	60		rts				rts
.251d					TOKWriteA:
.251d	da		phx				phx
.251e	ae 00 0a	ldx $0a00			ldx 	TOKLineSize
.2521	9d 00 0a	sta $0a00,x			sta 	TOKLineSize,x
.2524	9e 01 0a	stz $0a01,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.2527	fa		plx				plx
.2528	ee 00 0a	inc $0a00			inc 	TOKLineSize
.252b	60		rts				rts
.252c					TOKGet:
.252c	18		clc				clc
.252d	6c 21 0c	jmp ($0c21)			jmp 	(TOKDataSource)
.2530					TOKGetNext:
.2530	38		sec				sec
.2531	6c 21 0c	jmp ($0c21)			jmp 	(TOKDataSource)
.0c21					TOKDataSource:
>0c21							.fill 	2
.0c23					TOKIsFirstElement:
>0c23							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2534					TOKFindToken:
.2534	a2 16		ldx #$16			ldx 	#StandardTokens & $FF 		; do this table
.2536	a0 1f		ldy #$1f			ldy 	#StandardTokens >> 8
.2538	20 50 25	jsr $2550			jsr 	TOKFindTokenXY 				; find it, or not
.253b	b0 0d		bcs $254a			bcs 	_TOKFound1
.253d	a2 99		ldx #$99			ldx 	#AlternateTokens & $FF 		; do the alternate table
.253f	a0 20		ldy #$20			ldy 	#AlternateTokens >> 8
.2541	20 50 25	jsr $2550			jsr 	TOKFindTokenXY 				; find it, or not
.2544	90 08		bcc $254e			bcc 	_TOKFTFail 					; not ....
.2546	a2 8e		ldx #$8e			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shift token
.2548	38		sec				sec
.2549	60		rts				rts
.254a					_TOKFound1:
.254a	a2 00		ldx #$00			ldx 	#0 							; come here for unshifted (e.g. X = 0)
.254c	38		sec				sec
.254d	60		rts				rts
.254e					_TOKFTFail:
.254e	18		clc				clc
.254f	60		rts				rts
.2550					TOKFindTokenXY:
.2550	86 24		stx $24				stx 	zTemp0 						; save token table address
.2552	84 25		sty $25				sty 	zTemp0+1
.2554	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.2556	8d 24 0c	sta $0c24			sta 	TOKCurrent
.2559					_TOKFindLoop:
.2559	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.255b	18		clc				clc 		 						; clear carry in case of fail
.255c	30 17		bmi $2575			bmi 	_TOKExit 					; end of table, fail, so return CC.
.255e	cd 21 0b	cmp $0b21			cmp 	TOKElement 					; compare against the element length
.2561	d0 13		bne $2576			bne 	_TOKNext 					; different, try next.
.2563	aa		tax				tax 								; number of chars to compare.
.2564	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.2566					_TOKCompare:
.2566	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.2568	d9 21 0b	cmp $0b21,y			cmp 	TOKElementText-1,y
.256b	d0 09		bne $2576			bne 	_TOKNext 					; different ? try next
.256d	c8		iny				iny 								; compare next two
.256e	ca		dex				dex
.256f	d0 f5		bne $2566			bne 	_TOKCompare 				; until done X characters.
.2571	38		sec				sec
.2572	ad 24 0c	lda $0c24			lda 	TOKCurrent 					; return current ID.
.2575					_TOKExit:
.2575	60		rts				rts
.2576					_TOKNext:
.2576	ee 24 0c	inc $0c24			inc 	TOKCurrent 					; increment token #
.2579	38		sec				sec 								; add length+1 to ptr
.257a	b2 24		lda ($24)			lda 	(zTemp0)
.257c	65 24		adc $24				adc 	zTemp0
.257e	85 24		sta $24				sta 	zTemp0
.2580	90 d7		bcc $2559			bcc 	_TOKFindLoop
.2582	e6 25		inc $25				inc 	zTemp0+1
.2584	80 d3		bra $2559			bra 	_TOKFindLoop
.0c24					TOKCurrent:
>0c24							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.2586					TOKTokeniseHexadecimal:
.2586	20 30 25	jsr $2530			jsr 	TOKGetNext 					; consume the $
.2589	a2 08		ldx #$08			ldx 	#IFR0
.258b	20 52 37	jsr $3752			jsr 	IFloatSetZero 				; set R0 = 0
.258e					_TTHLoop:
.258e	20 2c 25	jsr $252c			jsr 	TOKGet 						; keep getting and copying while numeric.
.2591	20 56 27	jsr $2756			jsr 	TOKIsHexadecimal
.2594	90 23		bcc $25b9			bcc 	_TTHDone
.2596	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.2598	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.259b	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.259e	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.25a1	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.25a4	20 30 25	jsr $2530			jsr 	TOKGetNext
.25a7	20 1a 27	jsr $271a			jsr 	TOKToUpper 					; make U/C
.25aa	38		sec				sec 								; convert to decimal.
.25ab	e9 30		sbc #$30			sbc 	#48
.25ad	c9 0a		cmp #$0a			cmp 	#10
.25af	90 02		bcc $25b3			bcc 	_TTHNotAlpha
.25b1	e9 07		sbc #$07			sbc 	#7
.25b3					_TTHNotAlpha:
.25b3	05 08		ora $08				ora 	IFR0+IM0 					; OR into R0
.25b5	85 08		sta $08				sta 	IFR0+IM0
.25b7	80 d5		bra $258e			bra 	_TTHLoop
.25b9					_TTHDone:
.25b9	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.25bb	20 1d 25	jsr $251d			jsr 	TOKWriteA
.25be	20 5f 24	jsr $245f			jsr 	TOKTokeniseConstant 		; write integer out.
.25c1	18		clc				clc
.25c2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.25c3					TOKTokeniseIdentifier:
.25c3	20 4c 24	jsr $244c			jsr 	TOKResetElement 			; extract an identifier
.25c6					_TOKGetIdentifier:
.25c6	20 2c 25	jsr $252c			jsr 	TOKGet 						; get identifier character as capital
.25c9	20 1a 27	jsr $271a			jsr 	TOKToUpper
.25cc	20 3c 27	jsr $273c			jsr 	TOKIsIdentifierElement 		; exit if complete
.25cf	90 08		bcc $25d9			bcc 	_TOKEndIdent
.25d1	20 50 24	jsr $2450			jsr		TOKWriteElement 			; add to element buffer
.25d4	20 30 25	jsr $2530			jsr 	TOKGetNext
.25d7	80 ed		bra $25c6			bra 	_TOKGetIdentifier
.25d9					_TOKEndIdent:
.25d9	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.25db	d0 06		bne $25e3			bne 	_TOKNotString
.25dd	20 50 24	jsr $2450			jsr 	TOKWriteElement 			; add it
.25e0	20 30 25	jsr $2530			jsr 	TOKGetNext 					; consume it
.25e3					_TOKNotString:
.25e3	20 2c 25	jsr $252c			jsr 	TOKGet 						; finally check for (
.25e6	c9 28		cmp #$28			cmp 	#"("
.25e8	d0 06		bne $25f0			bne 	_TOKNoArray
.25ea	20 50 24	jsr $2450			jsr 	TOKWriteElement 			; add it
.25ed	20 30 25	jsr $2530			jsr 	TOKGetNext 					; consume it
.25f0					_TOKNoArray:
.25f0	20 34 25	jsr $2534			jsr 	TOKFindToken 				; find it
.25f3	90 18		bcc $260d			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.25f5	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.25f7	f0 0f		beq $2608			beq 	_TOKComment 				; yes, do comment code.
.25f9	e0 8e		cpx #$8e			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.25fb	d0 06		bne $2603			bne 	_TOKNoShift
.25fd	48		pha				pha 								; write the shift.
.25fe	8a		txa				txa
.25ff	20 1d 25	jsr $251d			jsr 	TOKWriteA
.2602	68		pla				pla
.2603					_TOKNoShift:
.2603	20 1d 25	jsr $251d			jsr 	TOKWriteA 					; write the main token.
.2606	18		clc				clc
.2607	60		rts				rts
.2608					_TOKComment:
.2608	20 4d 26	jsr $264d			jsr 	TOKDoComment 				; comments are special case.
.260b	18		clc				clc
.260c	60		rts				rts
.260d					_TOKIsVariable:
.260d	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.260f					_TOKOutputBuffer:
.260f	bd 22 0b	lda $0b22,x			lda 	TOKElementText,x 			; output it translated.
.2612	20 3b 26	jsr $263b			jsr 	TOKTranslateIdentifier
.2615	20 1d 25	jsr $251d			jsr 	TOKWriteA
.2618	e8		inx				inx
.2619	bd 22 0b	lda $0b22,x			lda 	TOKElementText,x
.261c	20 3c 27	jsr $273c			jsr 	TOKIsIdentifierElement
.261f	b0 ee		bcs $260f			bcs 	_TOKOutputBuffer
.2621	a8		tay				tay 								; last char in Y
.2622	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2624	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2626	f0 0e		beq $2636			beq 	_TOKIVExit
.2628	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.262a	d0 04		bne $2630			bne 	_TOKIVCheckArray 			; no, check for (
.262c	1a		inc a				inc 	a 							; token is $7D
.262d	bc 23 0b	ldy $0b23,x			ldy 	TOKElementText+1,x 			; get next one.
.2630					_TOKIVCheckArray:
.2630	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2632	d0 02		bne $2636			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2634	1a		inc a				inc 	a
.2635	1a		inc a				inc 	a
.2636					_TOKIVExit:
.2636	20 1d 25	jsr $251d			jsr 	TOKWriteA 					; ending token
.2639	18		clc				clc
.263a	60		rts				rts
.263b					TOKTranslateIdentifier:
.263b	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.263d	f0 0b		beq $264a			beq 	_TTI64
.263f	38		sec				sec
.2640	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2642	10 03		bpl $2647			bpl 	_TTIExit
.2644	18		clc				clc 								; map 09 onto 26-35
.2645	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2647					_TTIExit:
.2647	09 40		ora #$40			ora 	#$40 						; correct range.
.2649	60		rts				rts
.264a	a9 64		lda #$64	_TTI64:	lda 	#$64
.264c	60		rts				rts
.264d					TOKDoComment:
.264d	20 1d 25	jsr $251d			jsr 	TOKWriteA					; output the token.
.2650					_TOKSkipSpaces:
.2650	20 2c 25	jsr $252c			jsr 	TOKGet 						; skip over spaces
.2653	c9 20		cmp #$20			cmp 	#' '
.2655	d0 05		bne $265c			bne 	_TOKEndSpaces
.2657	20 30 25	jsr $2530			jsr 	TOKGetNext
.265a	80 f4		bra $2650			bra 	_TOKSkipSpaces
.265c					_TOKEndSpaces:
.265c	48		pha				pha 								; save it
.265d	68		pla				pla
.265e	f0 04		beq $2664			beq 	_TOKDCExit 					; end of line.
.2660	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark , we should be okay.
.2662	d0 01		bne $2665			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.2664					_TOKDCExit:
.2664	60		rts				rts
.2665					_TOKDCDoLine:
.2665	20 4c 24	jsr $244c			jsr 	TOKResetElement 			; start getting the string
.2668					_TOKDCLoop:
.2668	20 2c 25	jsr $252c			jsr 	TOKGet 						; check EOL
.266b	c9 00		cmp #$00			cmp 	#0
.266d	f0 08		beq $2677			beq 	_TOKDCEndComment
.266f	20 30 25	jsr $2530			jsr 	TOKGetNext 					; get and consume
.2672	20 50 24	jsr $2450			jsr 	TOKWriteElement
.2675	80 f1		bra $2668			bra 	_TOKDCLoop
.2677					_TOKDCEndComment:
.2677	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ 		; output as string.
.2679	20 1d 25	jsr $251d			jsr 	TOKWriteA
.267c	20 91 24	jsr $2491			jsr 	TOKOutputElementBuffer
.267f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2680					TOKTokeniseInteger:
.2680	20 a9 26	jsr $26a9			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2683	a2 22		ldx #$22			ldx 	#TOKElementText & $FF 		; get length/address
.2685	a0 0b		ldy #$0b			ldy 	#TOKElementText >> 8
.2687	ad 21 0b	lda $0b21			lda		TOKElement
.268a	20 b6 35	jsr $35b6			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.268d	ad 23 0c	lda $0c23			lda 	TOKIsFirstElement 			; first element ?
.2690	f0 12		beq $26a4			beq 	_TOKNotLineNumber
.2692	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.2694	d0 0c		bne $26a2			bne 	_TOKBadLineNumeber
.2696	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2698	8d 01 0a	sta $0a01			sta 	TOKLineNumber
.269b	a5 09		lda $09				lda 	IFR0+IM1
.269d	8d 02 0a	sta $0a02			sta 	TOKLineNumber+1
.26a0	18		clc				clc
.26a1	60		rts				rts
.26a2					_TOKBadLineNumeber:
.26a2	38		sec				sec
.26a3	60		rts				rts
.26a4					_TOKNotLineNumber:
.26a4	20 5f 24	jsr $245f			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.26a7	18		clc				clc
.26a8	60		rts				rts
.26a9					TOKExtractInteger:
.26a9	20 4c 24	jsr $244c			jsr 	TOKResetElement 			; restart
.26ac					_TTILoop:
.26ac	20 2c 25	jsr $252c			jsr 	TOKGet 						; keep getting and copying while numeric.
.26af	20 30 27	jsr $2730			jsr 	TOKIsDigit
.26b2	90 08		bcc $26bc			bcc 	_TOKEIExit
.26b4	20 50 24	jsr $2450			jsr 	TOKWriteElement
.26b7	20 30 25	jsr $2530			jsr 	TOKGetNext
.26ba	80 f0		bra $26ac			bra 	_TTILoop
.26bc					_TOKEIExit:
.26bc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.26bd					TOKTokenisePunctuation:
.26bd	20 4c 24	jsr $244c			jsr 	TOKResetElement 			; copy first punctuation character into element.
.26c0	20 30 25	jsr $2530			jsr 	TOKGetNext
.26c3	20 50 24	jsr $2450			jsr 	TOKWriteElement
.26c6	20 2c 25	jsr $252c			jsr 	TOKGet 						; what follows ?
.26c9	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character.
.26cb	f0 10		beq $26dd			beq 	_TTPOne
.26cd	20 40 27	jsr $2740			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.26d0	b0 0b		bcs $26dd			bcs 	_TTPOne 					; these speed things up a bit.
.26d2	20 50 24	jsr $2450			jsr 	TOKWriteElement 			; this is what we will search for.
.26d5	20 34 25	jsr $2534			jsr 	TOKFindToken
.26d8	b0 0a		bcs $26e4			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.26da	ce 21 0b	dec $0b21			dec 	TOKElement 					; make it a single character
.26dd					_TTPOne:
.26dd	20 34 25	jsr $2534			jsr 	TOKFindToken 				; look for one character punctuation
.26e0	b0 07		bcs $26e9			bcs 	_TTPOutputExit 				; we found it
.26e2	38		sec				sec 								; not recognised.
.26e3	60		rts				rts
.26e4					_TTPConsumeExit:
.26e4	48		pha				pha
.26e5	20 30 25	jsr $2530			jsr 	TOKGetNext 					; get the 2nd char out.
.26e8	68		pla				pla
.26e9					_TTPOutputExit:
.26e9	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.26eb	f0 05		beq $26f2			beq 	_TTPComment
.26ed	20 1d 25	jsr $251d			jsr  	TOKWriteA 					; write token out
.26f0	18		clc				clc
.26f1	60		rts				rts
.26f2					_TTPComment:
.26f2	20 4d 26	jsr $264d			jsr 	TOKDoComment
.26f5	18		clc				clc
.26f6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.26f7					TOKTokeniseString:
.26f7	20 30 25	jsr $2530			jsr 	TOKGetNext 					; consume the "
.26fa	20 4c 24	jsr $244c			jsr 	TOKResetElement 			; start getting the string
.26fd					_TOKTSLoop:
.26fd	20 2c 25	jsr $252c			jsr 	TOKGet 						; check EOL
.2700	c9 00		cmp #$00			cmp 	#0
.2702	f0 0c		beq $2710			beq 	_TOKTSExit
.2704	20 30 25	jsr $2530			jsr 	TOKGetNext 					; get and consume
.2707	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2709	f0 05		beq $2710			beq 	_TOKTSExit
.270b	20 50 24	jsr $2450			jsr 	TOKWriteElement
.270e	80 ed		bra $26fd			bra 	_TOKTSLoop
.2710					_TOKTSExit:
.2710	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ		; token for [[string]]
.2712	20 1d 25	jsr $251d			jsr 	TOKWriteA
.2715	20 91 24	jsr $2491			jsr 	TOKOutputElementBuffer 		; output collected data.
.2718	18		clc				clc
.2719	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.271a					TOKToUpper:
.271a	c9 61		cmp #$61			cmp 	#"a"
.271c	90 06		bcc $2724			bcc 	_TTUNotLower
.271e	c9 7b		cmp #$7b			cmp 	#"z"+1
.2720	b0 02		bcs $2724			bcs 	_TTUNotLower
.2722	49 20		eor #$20			eor 	#$20
.2724					_TTUNotLower:
.2724	60		rts				rts
.2725					TOKToLower:
.2725	c9 41		cmp #$41			cmp 	#"A"
.2727	90 06		bcc $272f			bcc 	_TTUNotUpper
.2729	c9 5b		cmp #$5b			cmp 	#"Z"+1
.272b	b0 02		bcs $272f			bcs 	_TTUNotUpper
.272d	49 20		eor #$20			eor 	#$20
.272f					_TTUNotUpper:
.272f	60		rts				rts
.2730					TOKIsDigit:
.2730	c9 30		cmp #$30			cmp 	#"0"
.2732	90 06		bcc $273a			bcc 	TOKFail
.2734	c9 3a		cmp #$3a			cmp 	#"9"+1
.2736	b0 02		bcs $273a			bcs 	TOKFail
.2738					TOKSucceed:
.2738	38		sec				sec
.2739	60		rts				rts
.273a					TOKFail:
.273a	18		clc				clc
.273b	60		rts				rts
.273c					TOKIsIdentifierElement:
.273c	c9 5f		cmp #$5f			cmp 	#"_"
.273e	f0 f8		beq $2738			beq 	TOKSucceed 					; else fall through to alphanumeric
.2740					TOKIsAlphaNumeric:
.2740	20 49 27	jsr $2749			jsr 	TOKIsAlpha
.2743	b0 f3		bcs $2738			bcs 	TOKSucceed
.2745	20 30 27	jsr $2730			jsr 	TOKIsDigit
.2748	60		rts				rts
.2749					TOKIsAlpha:
.2749	20 1a 27	jsr $271a			jsr 	TOKToUpper
.274c	c9 41		cmp #$41			cmp 	#"A"
.274e	90 ea		bcc $273a			bcc 	TOKFail
.2750	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2752	b0 e6		bcs $273a			bcs 	TOKFail
.2754	80 e2		bra $2738			bra 	TOKSucceed
.2756					TOKIsHexadecimal:
.2756	20 30 27	jsr $2730			jsr		TOKIsDigit
.2759	b0 dd		bcs $2738			bcs 	TOKSucceed
.275b	20 49 27	jsr $2749			jsr 	TOKIsAlpha
.275e	90 da		bcc $273a			bcc 	TOKFail
.2760	c9 47		cmp #$47			cmp 	#"F"+1
.2762	b0 d6		bcs $273a			bcs 	TOKFail
.2764	80 d2		bra $2738			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2766					Command_CALL:
.2766	a9 42		lda #$42			lda 	#STK_CALL
.2768	20 85 2c	jsr $2c85			jsr 	StackOpen
.276b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.276d	29 c0		and #$c0			and 	#$C0
.276f	c9 40		cmp #$40			cmp 	#$40
.2771	d0 29		bne $279c			bne 	_CCSyntax
.2773	20 95 30	jsr $3095			jsr 	VARGetInfo 					; get the information
.2776	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 				; check right bracket follows.
.2779	20 47 30	jsr $3047			jsr 	VARFind 					; exists ?
.277c	90 21		bcc $279f			bcc 	_CCUnknown
.277e	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.2780	85 24		sta $24				sta 	zTemp0
.2782	20 b8 2c	jsr $2cb8			jsr 	STKSaveCodePosition 		; save return address on stack.
.2785	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2787	b1 24		lda ($24),y			lda 	(zTemp0),y
.2789	c9 ff		cmp #$ff			cmp 	#$FF
.278b	d0 12		bne $279f			bne 	_CCUnknown
.278d	88		dey				dey 								; get Y offset to stack
.278e	b1 24		lda ($24),y			lda 	(zTemp0),y
.2790	48		pha				pha
.2791	88		dey				dey 								; get address
.2792	b1 24		lda ($24),y			lda 	(zTemp0),y
.2794	85 19		sta $19				sta 	codePtr+1
.2796	b2 24		lda ($24)			lda 	(zTemp0)
.2798	85 18		sta $18				sta 	codePtr
.279a	7a		ply				ply 								; restore Y
.279b	60		rts				rts
.279c					_CCSyntax:
.279c	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.279f					_CCUnknown:
.279f	4c f6 2b	jmp $2bf6		jmp	ErrorV_unknown
.27a2					Command_ENDPROC:
.27a2	a9 42		lda #$42			lda 	#STK_CALL
.27a4	20 b0 2c	jsr $2cb0			jsr 	StackCheckFrame
.27a7	20 ca 2c	jsr $2cca			jsr 	STKLoadCodePosition 		; return
.27aa	20 a2 2c	jsr $2ca2			jsr 	StackClose
.27ad	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.27ae					Command_DO:
.27ae	a9 22		lda #$22			lda 	#STK_DO
.27b0	20 85 2c	jsr $2c85			jsr 	StackOpen
.27b3	20 b8 2c	jsr $2cb8			jsr 	STKSaveCodePosition 		; save loop position
.27b6	60		rts				rts
.27b7					Command_EXIT:
.27b7	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.27b9	20 b0 2c	jsr $2cb0			jsr 	StackCheckFrame
.27bc	20 a2 2c	jsr $2ca2			jsr 	StackClose 					; close it
.27bf	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.27c1	aa		tax				tax
.27c2	20 89 29	jsr $2989			jsr 	ScanForward
.27c5	60		rts				rts
.27c6					Command_LOOP:
.27c6	a9 22		lda #$22			lda 	#STK_DO
.27c8	20 b0 2c	jsr $2cb0			jsr 	StackCheckFrame
.27cb	20 ca 2c	jsr $2cca			jsr 	STKLoadCodePosition 		; loop back
.27ce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.27cf					Command_FOR:
.27cf	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.27d1	20 85 2c	jsr $2c85			jsr 	StackOpen
.27d4	20 b3 15	jsr $15b3			jsr 	CommandLET 					; do "I = 1" bit
.27d7	5a		phy				phy 								; save variable address to +4,+5
.27d8	a0 04		ldy #$04			ldy 	#4
.27da	a5 24		lda $24				lda 	zTemp0
.27dc	91 2c		sta ($2c),y			sta 	(basicStack),y
.27de	c8		iny				iny
.27df	a5 25		lda $25				lda 	zTemp0+1
.27e1	91 2c		sta ($2c),y			sta 	(basicStack),y
.27e3	7a		ply				ply
.27e4	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.27e6	20 7c 2c	jsr $2c7c			jsr 	ERRCheckA
.27e9	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.27ec	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.27ee	a2 08		ldx #$08			ldx 	#IFR0
.27f0	20 45 28	jsr $2845			jsr 	CFSaveR0X
.27f3	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.27f5	c9 91		cmp #$91			cmp 	#PR_STEP
.27f7	d0 06		bne $27ff			bne 	_CFStep1
.27f9	c8		iny				iny 								; consume step
.27fa	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 				; evaluate STEP
.27fd	80 24		bra $2823			bra 	_CFWriteStep
.27ff					_CFStep1:
.27ff	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2801	a9 01		lda #$01			lda 	#1
.2803	20 54 37	jsr $3754			jsr 	IFloatSetByte
.2806	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2807	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2809	b1 2c		lda ($2c),y			lda 	(basicStack),y
.280b	85 24		sta $24				sta 	zTemp0
.280d	c8		iny				iny
.280e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2810	85 25		sta $25				sta 	zTemp0+1
.2812	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2814	b1 24		lda ($24),y			lda 	(zTemp0),y
.2816	d0 0a		bne $2822			bne 	_CFNotOptimised
.2818	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.281a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.281c	d0 04		bne $2822			bne 	_CFNotOptimised
.281e	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2820	85 0b		sta $0b				sta 	IFR0+IExp
.2822					_CFNotOptimised:
.2822	7a		ply				ply
.2823					_CFWriteStep:
.2823	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2825	a9 06		lda #$06			lda 	#6
.2827	20 45 28	jsr $2845			jsr 	CFSaveR0X
.282a	20 b8 2c	jsr $2cb8			jsr 	STKSaveCodePosition 		; save loop position
.282d	60		rts				rts
.282e					CFLoadR0X:
.282e	5a		phy				phy
.282f	a8		tay				tay
.2830	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2832	95 00		sta $00,x			sta 	IM0,x
.2834	c8		iny				iny
.2835	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2837	95 01		sta $01,x			sta 	IM1,x
.2839	c8		iny				iny
.283a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.283c	95 02		sta $02,x			sta 	IM2,x
.283e	c8		iny				iny
.283f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2841	95 03		sta $03,x			sta 	IExp,x
.2843	7a		ply				ply
.2844	60		rts				rts
.2845					CFSaveR0X:
.2845	5a		phy				phy
.2846	a8		tay				tay
.2847	b5 00		lda $00,x			lda 	IM0,x
.2849	91 2c		sta ($2c),y			sta 	(basicStack),y
.284b	c8		iny				iny
.284c	b5 01		lda $01,x			lda 	IM1,x
.284e	91 2c		sta ($2c),y			sta 	(basicStack),y
.2850	c8		iny				iny
.2851	b5 02		lda $02,x			lda 	IM2,x
.2853	91 2c		sta ($2c),y			sta 	(basicStack),y
.2855	c8		iny				iny
.2856	b5 03		lda $03,x			lda 	IExp,x
.2858	91 2c		sta ($2c),y			sta 	(basicStack),y
.285a	7a		ply				ply
.285b	60		rts				rts
.285c					Command_NEXT:
.285c	a9 37		lda #$37			lda 	#STK_FOR
.285e	20 b0 2c	jsr $2cb0			jsr 	StackCheckFrame
.2861	5a		phy				phy 								; check optimised loop
.2862	a0 09		ldy #$09			ldy 	#9
.2864	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2866	7a		ply				ply
.2867	0a		asl a				asl 	a
.2868	b0 35		bcs $289f			bcs 	_CNOptimised
.286a	20 d7 28	jsr $28d7			jsr 	_CNLoadValue 				; load index value to R0.
.286d	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.286f	a9 06		lda #$06			lda 	#6
.2871	20 2e 28	jsr $282e			jsr 	CFLoadR0X
.2874	20 4a 31	jsr $314a			jsr 	IFloatAdd 					; add them together and write back.
.2877	20 fa 28	jsr $28fa			jsr 	_CNSaveValue
.287a	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.287c	a2 0c		ldx #$0c			ldx 	#IFR1
.287e	20 2e 28	jsr $282e			jsr 	CFLoadR0X
.2881	20 21 34	jsr $3421			jsr 	IFloatCompare 				; compare terminal vs current
.2884	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2886	20 4b 37	jsr $374b			jsr 	IFloatCheckZero
.2889	f0 10		beq $289b			beq 	_CNLoopBack
.288b	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.288d	5a		phy				phy
.288e	a0 09		ldy #$09			ldy 	#6+IExp
.2890	51 2c		eor ($2c),y			eor 	(basicStack),y
.2892	7a		ply				ply
.2893	29 40		and #$40			and 	#IFSign
.2895	f0 04		beq $289b			beq 	_CNLoopBack
.2897					_CNExitLoop:
.2897	20 a2 2c	jsr $2ca2			jsr 	StackClose		 			; return
.289a	60		rts				rts
.289b					_CNLoopBack:
.289b	20 ca 2c	jsr $2cca			jsr 	STKLoadCodePosition 		; loop back
.289e	60		rts				rts
.289f					_CNOptimised:
.289f	5a		phy				phy
.28a0	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.28a2	b1 2c		lda ($2c),y			lda 	(basicStack),y
.28a4	85 28		sta $28				sta 	zTemp2
.28a6	c8		iny				iny
.28a7	b1 2c		lda ($2c),y			lda 	(basicStack),y
.28a9	85 29		sta $29				sta 	zTemp2+1
.28ab	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.28ad					_CNIncrement:
.28ad	c8		iny				iny
.28ae	b1 28		lda ($28),y			lda 	(zTemp2),y
.28b0	1a		inc a				inc 	a
.28b1	91 28		sta ($28),y			sta 	(zTemp2),y
.28b3	f0 f8		beq $28ad			beq 	_CNIncrement
.28b5	18		clc				clc 								; point zTemp0 to terminal value
.28b6	a5 2c		lda $2c				lda 	basicStack
.28b8	69 0a		adc #$0a			adc 	#10
.28ba	85 24		sta $24				sta 	zTemp0
.28bc	a5 2d		lda $2d				lda 	basicStack+1
.28be	69 00		adc #$00			adc 	#0
.28c0	85 25		sta $25				sta 	zTemp0+1
.28c2	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.28c4	18		clc				clc 								; borrow 1, we want > not >=
.28c5	b2 28		lda ($28)			lda 	(zTemp2)
.28c7	f2 24		sbc ($24)			sbc 	(zTemp0)
.28c9	b1 28		lda ($28),y			lda 	(zTemp2),y
.28cb	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.28cd	c8		iny				iny
.28ce	b1 28		lda ($28),y			lda 	(zTemp2),y
.28d0	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.28d2	7a		ply				ply
.28d3	b0 c2		bcs $2897			bcs 	_CNExitLoop
.28d5	80 c4		bra $289b			bra 	_CNLoopBack
.28d7					_CNLoadValue:
.28d7	5a		phy				phy
.28d8	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.28da	b1 2c		lda ($2c),y			lda 	(basicStack),y
.28dc	85 28		sta $28				sta 	zTemp2
.28de	c8		iny				iny
.28df	b1 2c		lda ($2c),y			lda 	(basicStack),y
.28e1	85 29		sta $29				sta 	zTemp2+1
.28e3	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.28e5	b1 28		lda ($28),y			lda 	(zTemp2),y
.28e7	85 08		sta $08				sta 	IFR0+IM0
.28e9	c8		iny				iny
.28ea	b1 28		lda ($28),y			lda 	(zTemp2),y
.28ec	85 09		sta $09				sta 	IFR0+IM1
.28ee	c8		iny				iny
.28ef	b1 28		lda ($28),y			lda 	(zTemp2),y
.28f1	85 0a		sta $0a				sta 	IFR0+IM2
.28f3	c8		iny				iny
.28f4	b1 28		lda ($28),y			lda 	(zTemp2),y
.28f6	85 0b		sta $0b				sta 	IFR0+IExp
.28f8	7a		ply				ply
.28f9	60		rts				rts
.28fa					_CNSaveValue:
.28fa	5a		phy				phy
.28fb	a0 00		ldy #$00			ldy 	#0
.28fd	a5 08		lda $08				lda 	IFR0+IM0
.28ff	91 28		sta ($28),y			sta 	(zTemp2),y
.2901	c8		iny				iny
.2902	a5 09		lda $09				lda 	IFR0+IM1
.2904	91 28		sta ($28),y			sta 	(zTemp2),y
.2906	c8		iny				iny
.2907	a5 0a		lda $0a				lda 	IFR0+IM2
.2909	91 28		sta ($28),y			sta 	(zTemp2),y
.290b	c8		iny				iny
.290c	a5 0b		lda $0b				lda 	IFR0+IExp
.290e	91 28		sta ($28),y			sta 	(zTemp2),y
.2910	7a		ply				ply
.2911	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2912					Command_GOSUB:
.2912	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; get line number
.2915	a9 52		lda #$52			lda 	#STK_GOSUB
.2917	20 85 2c	jsr $2c85			jsr 	StackOpen
.291a	20 b8 2c	jsr $2cb8			jsr 	STKSaveCodePosition 		; save return address on stack.
.291d	4c d4 14	jmp $14d4			jmp 	GotoR0
.2920					Command_RETURN:
.2920	a9 52		lda #$52			lda 	#STK_GOSUB
.2922	20 b0 2c	jsr $2cb0			jsr 	StackCheckFrame
.2925	20 ca 2c	jsr $2cca			jsr 	STKLoadCodePosition 		; return
.2928	20 a2 2c	jsr $2ca2			jsr 	StackClose
.292b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.292c					IfCommand:
.292c	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 				; Get the if test.
.292f	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2931	c9 88		cmp #$88			cmp 	#PR_THEN  					; could be THEN <stuff>
.2933	d0 0c		bne $2941			bne 	_IfStructured 				; we still support it.
.2935	c8		iny				iny 								; consume THEN
.2936	a2 08		ldx #$08			ldx 	#IFR0
.2938	20 4b 37	jsr $374b			jsr 	IFloatCheckZero 			; is it zero
.293b	f0 01		beq $293e			beq 	_IfFail 					; if fail, go to next line
.293d	60		rts				rts 								; if THEN just continue
.293e					_IfFail:
.293e	4c 2f 18	jmp $182f			jmp 	RUNEndOfLine
.2941					_IfStructured:
.2941	20 4b 37	jsr $374b			jsr 	IFloatCheckZero 			; is it zero
.2944	d0 07		bne $294d			bne 	_IfExit 					; if not, then continue normally.
.2946	a9 8f		lda #$8f			lda 	#PR_ELSE 					; look for else/endif
.2948	a2 85		ldx #$85			ldx 	#PR_ENDIF
.294a	20 89 29	jsr $2989			jsr 	ScanForward 				; and run from there
.294d					_IfExit:
.294d	60		rts				rts
.294e					ElseCode:
.294e	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2950	aa		tax				tax 								; so just go to the structure exit
.2951	20 89 29	jsr $2989			jsr 	ScanForward
.2954	60		rts				rts
.2955					EndIf:
.2955	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/indent.asm

.2956					GetIndent:
.2956	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.2958	a0 03		ldy #$03			ldy 	#3
.295a					_GILoop:
.295a	b1 18		lda ($18),y			lda 	(codePtr),y 				; end of line ?
.295c	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ
.295e	f0 05		beq $2965			beq 	_GIExit
.2960	20 a7 29	jsr $29a7			jsr 	SkipOneInstruction
.2963	80 f5		bra $295a			bra 	_GILoop
.2965					_GIExit:
.2965	a5 26		lda $26				lda 	zTemp1
.2967	0a		asl a				asl 	a
.2968	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2969					Command_REPEAT:
.2969	a9 02		lda #$02			lda 	#STK_REPEAT
.296b	20 85 2c	jsr $2c85			jsr 	StackOpen
.296e	20 b8 2c	jsr $2cb8			jsr 	STKSaveCodePosition 		; save loop position
.2971	60		rts				rts
.2972					Command_UNTIL:
.2972	a9 02		lda #$02			lda 	#STK_REPEAT 				; check REPEAT
.2974	20 b0 2c	jsr $2cb0			jsr 	StackCheckFrame
.2977	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 				; work out the test
.297a	a2 08		ldx #$08			ldx 	#IFR0
.297c	20 4b 37	jsr $374b			jsr 	IFloatCheckZero 			; check if zero
.297f	f0 04		beq $2985			beq 	_CULoopBack 				; if so keep looping
.2981	20 a2 2c	jsr $2ca2			jsr 	StackClose		 			; return
.2984	60		rts				rts
.2985					_CULoopBack:
.2985	20 ca 2c	jsr $2cca			jsr 	STKLoadCodePosition 		; loop back
.2988	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2989					ScanForward:
.2989	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.298b					ScanForwardMain:
.298b	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.298d	86 25		stx $25				stx 	zTemp0+1
.298f					_ScanLoop:
.298f	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2991	d0 0a		bne $299d			bne 	_ScanNoCheck
.2993	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2995	c5 24		cmp $24				cmp 	zTemp0
.2997	f0 0c		beq $29a5			beq 	_ScanExit
.2999	c5 25		cmp $25				cmp 	zTemp0+1
.299b	f0 08		beq $29a5			beq 	_ScanExit
.299d					_ScanNoCheck:
.299d	20 a7 29	jsr $29a7			jsr 	SkipOneInstruction
.29a0	90 ed		bcc $298f			bcc 	_ScanLoop
.29a2	4c 0d 2b	jmp $2b0d		jmp	ErrorV_structure
.29a5					_ScanExit:
.29a5	c8		iny				iny 								; consume final token.
.29a6	60		rts				rts
.29a7					SkipOneInstruction:
.29a7	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.29a9	c8		iny				iny
.29aa	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.29ac	f0 35		beq $29e3			beq		_ScanDataItem
.29ae	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.29b0	f0 31		beq $29e3			beq 	_ScanDataItem
.29b2	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.29b4	f0 1a		beq $29d0			beq 	_ScanNextLine
.29b6	c9 8e		cmp #$8e			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.29b8	d0 01		bne $29bb			bne 	_ScanNoShift
.29ba	c8		iny				iny
.29bb					_ScanNoShift:
.29bb	c9 8d		cmp #$8d			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.29bd	b0 2b		bcs $29ea			bcs 	_SOIExit
.29bf	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.29c1	90 27		bcc $29ea			bcc 	_SOIExit
.29c3	aa		tax				tax 								; access the table to get the adjustment.
.29c4	18		clc				clc
.29c5	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.29c7	7d 89 1e	adc $1e89,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.29ca	85 26		sta $26				sta 	zTemp1
.29cc	10 1c		bpl $29ea			bpl		_SOIExit 		 			; error if -ve ?
.29ce	38		sec				sec
.29cf	60		rts				rts
.29d0					_ScanNextLine:
.29d0	18		clc				clc	 								; forward to next line.
.29d1	b2 18		lda ($18)			lda 	(codePtr)
.29d3	65 18		adc $18				adc 	codePtr
.29d5	85 18		sta $18				sta 	codePtr
.29d7	90 02		bcc $29db			bcc 	_ScanNoCarry
.29d9	e6 19		inc $19				inc 	codePtr+1
.29db					_ScanNoCarry:
.29db	a0 03		ldy #$03			ldy 	#3
.29dd	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.29df	d0 09		bne $29ea			bne 	_SOIExit
.29e1	38		sec				sec 								; failed.
.29e2	60		rts				rts
.29e3					_ScanDataItem:
.29e3	98		tya				tya
.29e4	38		sec				sec
.29e5	71 18		adc ($18),y			adc 	(codePtr),y
.29e7	a8		tay				tay
.29e8	80 00		bra $29ea			bra 	_SOIExit
.29ea					_SOIExit:
.29ea	18		clc				clc
.29eb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.29ec					ScanProcedures:
.29ec	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.29ee	48		pha				pha
.29ef	a5 19		lda $19				lda 	codePtr+1
.29f1	48		pha				pha
.29f2	5a		phy				phy
.29f3	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh 				; back to the program start
.29f6	85 19		sta $19				sta 	codePtr+1
.29f8	64 18		stz $18				stz 	codePtr
.29fa					_SPLoop:
.29fa	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.29fc	f0 18		beq $2a16			beq 	_SPExit
.29fe	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2a00	b1 18		lda ($18),y			lda 	(codePtr),y
.2a02	c9 89		cmp #$89			cmp 	#PR_PROC
.2a04	d0 03		bne $2a09			bne 	_SPNext
.2a06	20 1e 2a	jsr $2a1e			jsr 	_SPSetupRecord
.2a09					_SPNext:
.2a09	18		clc				clc 								; forward to next
.2a0a	b2 18		lda ($18)			lda 	(codePtr)
.2a0c	65 18		adc $18				adc 	codePtr
.2a0e	85 18		sta $18				sta 	codePtr
.2a10	90 e8		bcc $29fa			bcc 	_SPLoop
.2a12	e6 19		inc $19				inc 	codePtr+1
.2a14	80 e4		bra $29fa			bra 	_SPLoop
.2a16					_SPExit:
.2a16	7a		ply				ply
.2a17	68		pla				pla
.2a18	85 19		sta $19				sta 	codePtr+1
.2a1a	68		pla				pla
.2a1b	85 18		sta $18				sta 	codePtr
.2a1d	60		rts				rts
.2a1e					_SPSetupRecord:
.2a1e	c8		iny				iny 								; check identifier follows
.2a1f	b1 18		lda ($18),y			lda 	(codePtr),y
.2a21	29 c0		and #$c0			and 	#$C0
.2a23	c9 40		cmp #$40			cmp 	#$40
.2a25	d0 27		bne $2a4e			bne 	_SPSyntax
.2a27	20 95 30	jsr $3095			jsr 	VARGetInfo 					; get the information
.2a2a	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen 				; check right bracket follows.
.2a2d	20 47 30	jsr $3047			jsr 	VARFind 					; already exists ?
.2a30	b0 1f		bcs $2a51			bcs 	_SPUsed 					; error !
.2a32	20 f3 2f	jsr $2ff3			jsr 	VARCreate 					; create, XA points to the data.
.2a35	85 24		sta $24				sta 	zTemp0
.2a37	86 25		stx $25				stx 	zTemp0+1
.2a39	5a		phy				phy 								; save Y pos on stack
.2a3a	a0 01		ldy #$01			ldy 	#1
.2a3c	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2a3e	92 24		sta ($24)			sta 	(zTemp0)
.2a40	a5 19		lda $19				lda 	codePtr+1
.2a42	91 24		sta ($24),y			sta 	(zTemp0),y
.2a44	c8		iny				iny
.2a45	68		pla				pla
.2a46	91 24		sta ($24),y			sta 	(zTemp0),y
.2a48	c8		iny				iny
.2a49	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2a4b	91 24		sta ($24),y			sta 	(zTemp0),y
.2a4d	60		rts				rts
.2a4e					_SPSyntax:
.2a4e	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.2a51					_SPUsed:
.2a51	4c d8 2b	jmp $2bd8		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2a54					Command_WHILE:
.2a54	5a		phy				phy 								; save position of the test
.2a55	20 6e 1a	jsr $1a6e			jsr 	EXPEvalNumber 				; work out the while test.
.2a58	a2 08		ldx #$08			ldx 	#IFR0
.2a5a	20 4b 37	jsr $374b			jsr 	IFloatCheckZero 			; check if zero
.2a5d	f0 0e		beq $2a6d			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2a5f	98		tya				tya 								; position *after* test.
.2a60	7a		ply				ply 								; restore position before test, at WHILE
.2a61	88		dey				dey 								; so we execute the WHILE command again.
.2a62	48		pha				pha 								; push after test on the stack
.2a63	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2a65	20 85 2c	jsr $2c85			jsr 	StackOpen
.2a68	20 b8 2c	jsr $2cb8			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2a6b	7a		ply				ply 								; restore the position *after* the test
.2a6c	60		rts				rts
.2a6d					_WHExitLoop:
.2a6d	68		pla				pla 								; throw post loop position
.2a6e	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2a70	aa		tax				tax
.2a71	20 89 29	jsr $2989			jsr 	ScanForward
.2a74	60		rts				rts
.2a75					Command_WEND:
.2a75	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2a77	20 b0 2c	jsr $2cb0			jsr 	StackCheckFrame
.2a7a	20 ca 2c	jsr $2cca			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2a7d	20 a2 2c	jsr $2ca2			jsr 	StackClose		 			; erase the frame
.2a80	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2a81					ErrorV_syntax:
.2a81	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2a84	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2a8c	45 72 72 6f 72 00
.2a92					ErrorV_range:
.2a92	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2a95	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2a9d	52 61 6e 67 65 00
.2aa3					ErrorV_value:
.2aa3	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2aa6	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2aae	75 65 00
.2ab1					ErrorV_type:
.2ab1	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2ab4	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2abc	73 6d 61 74 63 68 00
.2ac3					ErrorV_unimplemented:
.2ac3	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2ac6	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2ace	6c 65 6d 65 6e 74 65 64 00
.2ad7					ErrorV_assert:
.2ad7	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2ada	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2ae2	46 61 69 6c 00
.2ae7					ErrorV_internal:
.2ae7	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2aea	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2af2	6c 20 45 72 72 6f 72 00
.2afa					ErrorV_divzero:
.2afa	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2afd	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2b05	42 79 20 5a 65 72 6f 00
.2b0d					ErrorV_structure:
.2b0d	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2b10	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2b18	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2b25					ErrorV_stop:
.2b25	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2b28	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2b30	20 53 74 6f 70 70 65 64 00
.2b39					ErrorV_data:
.2b39	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2b3c	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2b44	44 61 74 61 00
.2b49					ErrorV_redefine:
.2b49	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2b4c	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2b54	65 64 65 66 69 6e 65 64 00
.2b5d					ErrorV_index:
.2b5d	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2b60	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2b68	61 79 20 49 6e 64 65 78 00
.2b71					ErrorV_memory:
.2b71	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2b74	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2b7c	4d 65 6d 6f 72 79 00
.2b83					ErrorV_uninitialised:
.2b83	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2b86	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2b8e	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2b9e					ErrorV_string:
.2b9e	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2ba1	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2ba9	69 6e 67 20 4c 65 6e 67 74 68 00
.2bb4					ErrorV_variable:
.2bb4	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2bb7	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2bbf	65 20 4d 69 73 73 69 6e 67 00
.2bc9					ErrorV_stack:
.2bc9	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2bcc	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2bd4	75 6c 6c 00
.2bd8					ErrorV_dupproc:
.2bd8	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2bdb	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2be3	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2bf3	65 64 00
.2bf6					ErrorV_unknown:
.2bf6	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2bf9	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2c01	20 50 72 6f 63 65 64 75 72 65 00
.2c0c					ErrorV_break:
.2c0c	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2c0f	05 42 72 65 61 6b 00			.text	5,"Break",0
.2c16					ErrorV_line:
.2c16	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2c19	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2c21	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.2c2e					ErrorV_fnf:
.2c2e	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2c31	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>2c39	74 20 46 6f 75 6e 64 00
.2c41					ErrorV_full:
.2c41	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2c44	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>2c4c	20 46 75 6c 6c 00
.2c52					ErrorV_align:
.2c52	20 e3 2e	jsr $2ee3		jsr	ErrorHandler
>2c55	0d 4c 61 62 65 6c 20 43			.text	13,"Label Changed",0
>2c5d	68 61 6e 67 65 64 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2c64					ERRCheckLParen:
.2c64	b1 18		lda ($18),y			lda 	(codePtr),y
.2c66	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2c68	d0 18		bne $2c82			bne 	ERRSyntaxError
.2c6a	c8		iny				iny
.2c6b	60		rts				rts
.2c6c					ERRCheckRParen:
.2c6c	b1 18		lda ($18),y			lda 	(codePtr),y
.2c6e	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2c70	d0 10		bne $2c82			bne 	ERRSyntaxError
.2c72	c8		iny				iny
.2c73	60		rts				rts
.2c74					ERRCheckComma:
.2c74	b1 18		lda ($18),y			lda 	(codePtr),y
.2c76	c9 99		cmp #$99			cmp 	#PR_COMMA
.2c78	d0 08		bne $2c82			bne 	ERRSyntaxError
.2c7a	c8		iny				iny
.2c7b	60		rts				rts
.2c7c					ERRCheckA:
.2c7c	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2c7e	d0 02		bne $2c82			bne 	ERRSyntaxError
.2c80	c8		iny				iny
.2c81	60		rts				rts
.2c82					ERRSyntaxError:
.2c82	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2c85					StackOpen:
.2c85	48		pha				pha 								; save frame byte
.2c86	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.2c88	0a		asl a				asl 	a 							; claim twice this for storage
.2c89	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2c8b	38		sec				sec 								; so basically subtracting from
.2c8c	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.2c8e	85 2c		sta $2c				sta 	basicStack
.2c90	b0 09		bcs $2c9b			bcs 	_SONoBorrow
.2c92	c6 2d		dec $2d				dec 	basicStack+1
.2c94	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.2c96	cd 25 0c	cmp $0c25			cmp 	basicStackEnd
.2c99	f0 04		beq $2c9f			beq 	_SOMemory
.2c9b					_SONoBorrow:
.2c9b	68		pla				pla 								; get marker back and write at TOS
.2c9c	92 2c		sta ($2c)			sta 	(basicStack)
.2c9e	60		rts				rts
.2c9f					_SOMemory:
.2c9f	4c c9 2b	jmp $2bc9		jmp	ErrorV_stack
.2ca2					StackClose:
.2ca2	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2ca4	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2ca6	0a		asl a				asl 	a 							; claim twice this.
.2ca7	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.2ca9	85 2c		sta $2c				sta 	basicStack
.2cab	90 02		bcc $2caf			bcc 	_SCExit
.2cad	e6 2d		inc $2d				inc 	basicStack+1
.2caf					_SCExit:
.2caf	60		rts				rts
.2cb0					StackCheckFrame:
.2cb0	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2cb2	d0 01		bne $2cb5			bne 	_SCFError 					; different, we have structures mixed up
.2cb4	60		rts				rts
.2cb5					_SCFError:
.2cb5	4c 0d 2b	jmp $2b0d		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2cb8					STKSaveCodePosition:
.2cb8	5a		phy				phy
.2cb9	98		tya				tya 								; save Y at offset 1.
.2cba	a0 01		ldy #$01			ldy 	#1
.2cbc	91 2c		sta ($2c),y			sta 	(basicStack),y
.2cbe	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2cc0	c8		iny				iny
.2cc1	91 2c		sta ($2c),y			sta 	(basicStack),y
.2cc3	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2cc5	c8		iny				iny
.2cc6	91 2c		sta ($2c),y			sta 	(basicStack),y
.2cc8	7a		ply				ply
.2cc9	60		rts				rts
.2cca					STKLoadCodePosition:
.2cca	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2ccc	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2cce	85 19		sta $19				sta 	codePtr+1
.2cd0	88		dey				dey
.2cd1	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2cd3	85 18		sta $18				sta 	codePtr
.2cd5	88		dey				dey
.2cd6	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.2cd8	a8		tay				tay
.2cd9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2cda					StackReset:
.2cda	48		pha				pha 								; save top of memory
.2cdb	3a		dec a				dec 	a  							; end of stack = previous byte
.2cdc	85 2d		sta $2d				sta 	basicStack+1
.2cde	a9 ff		lda #$ff			lda 	#$FF
.2ce0	85 2c		sta $2c				sta 	basicStack
.2ce2	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2ce4	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2ce6	68		pla				pla 								; allocate pages for stack.
.2ce7	38		sec				sec
.2ce8	e9 02		sbc #$02			sbc 	#STACKPAGES
.2cea	8d 25 0c	sta $0c25			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2ced	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0c25					basicStackEnd:
>0c25							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2cee					StringConcrete:
.2cee	5a		phy				phy 								; save position on stack
.2cef	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2cf1	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2cf3	b0 41		bcs $2d36			bcs 	_SALengthError
.2cf5	18		clc				clc 								; length of the new string
.2cf6	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2cf8	90 02		bcc $2cfc			bcc 	_SAHaveLength
.2cfa	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2cfc					_SAHaveLength:
.2cfc	48		pha				pha 								; save length to be allocated for concreting.
.2cfd	38		sec				sec
.2cfe	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2d00	6d 27 0c	adc $0c27			adc 	stringMemory
.2d03	8d 27 0c	sta $0c27			sta 	stringMemory
.2d06	85 28		sta $28				sta 	zTemp2 						; update storage address
.2d08	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2d0a	6d 28 0c	adc $0c28			adc 	stringMemory+1
.2d0d	8d 28 0c	sta $0c28			sta 	stringMemory+1
.2d10	85 29		sta $29				sta 	zTemp2+1
.2d12	68		pla				pla 								; save length allocated in +0
.2d13	92 28		sta ($28)			sta 	(zTemp2)
.2d15	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2d17	a0 01		ldy #$01			ldy 	#1
.2d19	91 28		sta ($28),y			sta 	(zTemp2),y
.2d1b					_SACopyNewString:
.2d1b	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2d1d	a0 02		ldy #$02			ldy 	#2
.2d1f	91 28		sta ($28),y			sta 	(zTemp2),y
.2d21	aa		tax				tax 								; bytes to copy
.2d22	f0 0c		beq $2d30			beq 	_SACopyExit
.2d24	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2d26					_SACopyNSLoop:
.2d26	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2d28	c8		iny				iny 								; write two on in string storage
.2d29	c8		iny				iny
.2d2a	91 28		sta ($28),y			sta 	(zTemp2),y
.2d2c	88		dey				dey
.2d2d	ca		dex				dex									; until copied all the string lengths.
.2d2e	d0 f6		bne $2d26			bne 	_SACopyNSLoop
.2d30					_SACopyExit:
.2d30	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2d32	a5 28		lda $28				lda 	zTemp2
.2d34	7a		ply				ply
.2d35	60		rts				rts
.2d36					_SALengthError:
.2d36	4c 9e 2b	jmp $2b9e		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2d39					StringSystemInitialise:
.2d39	3a		dec a				dec 	a 							; make last byte of previous page.
.2d3a	8d 28 0c	sta $0c28			sta 	stringMemory+1
.2d3d	85 25		sta $25				sta 	zTemp0+1
.2d3f	a9 ff		lda #$ff			lda 	#$FF
.2d41	8d 27 0c	sta $0c27			sta 	stringMemory
.2d44	85 24		sta $24				sta 	zTemp0
.2d46	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2d48	92 24		sta ($24)			sta 	(zTemp0)
.2d4a	60		rts				rts
.2d4b					StringSpaceInitialise:
.2d4b	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2d4d	8d 26 0c	sta $0c26			sta 	stringInitialised
.2d50	ad 27 0c	lda $0c27			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2d53	8d 29 0c	sta $0c29			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2d56	ad 28 0c	lda $0c28			lda 	stringMemory+1
.2d59	3a		dec a				dec 	a
.2d5a	8d 2a 0c	sta $0c2a			sta 	stringTempPointer+1
.2d5d	20 7e 13	jsr $137e			jsr 	ClearCheckMemory
.2d60	60		rts				rts
.2d61					StringTempAllocate:
.2d61	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2d63	b0 2e		bcs $2d93			bcs 	_STALength
.2d65	2c 26 0c	bit $0c26			bit 	stringInitialised 			; already initialised
.2d68	30 05		bmi $2d6f			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.2d6a	48		pha				pha 								; save value to subtract.
.2d6b	20 4b 2d	jsr $2d4b			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2d6e	68		pla				pla 								; restore it
.2d6f					_STAAllocate:
.2d6f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2d71	18		clc				clc  								; deliberate allows one more
.2d72	6d 29 0c	adc $0c29			adc 	stringTempPointer 			; subtract from temp pointer
.2d75	8d 29 0c	sta $0c29			sta 	stringTempPointer
.2d78	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2d7a	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2d7c	ad 2a 0c	lda $0c2a			lda 	stringTempPointer+1
.2d7f	69 ff		adc #$ff			adc 	#$FF
.2d81	8d 2a 0c	sta $0c2a			sta 	stringTempPointer+1
.2d84	85 2f		sta $2f				sta 	zsTemp+1
.2d86	85 09		sta $09				sta 	IFR0+IM1
.2d88	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2d8a	a9 80		lda #$80			lda 	#$80
.2d8c	85 0b		sta $0b				sta 	IFR0+IExp
.2d8e	a9 00		lda #$00			lda 	#0 							; clear the target string
.2d90	92 2e		sta ($2e)			sta 	(zsTemp)
.2d92	60		rts				rts
.2d93					_STALength:
.2d93	4c 9e 2b	jmp $2b9e		jmp	ErrorV_string
.2d96					StringTempWrite:
.2d96	5a		phy				phy
.2d97	48		pha				pha
.2d98	b2 2e		lda ($2e)			lda 	(zsTemp)
.2d9a	1a		inc a				inc 	a
.2d9b	92 2e		sta ($2e)			sta 	(zsTemp)
.2d9d	a8		tay				tay
.2d9e	68		pla				pla
.2d9f	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2da1	7a		ply				ply
.2da2	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0c26					stringInitialised:
>0c26							.fill 	1
.0c27					stringMemory:
>0c27							.fill 	2
.0c29					stringTempPointer:
>0c29							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/bootapple.asm

.2da3					Command_ABoot:
.2da3	a9 e2		lda #$e2			lda 	#_A2ROMName & $FF 			; set file address
.2da5	8d 2b 0c	sta $0c2b			sta 	FSBBlock+0
.2da8	a9 2d		lda #$2d			lda 	#_A2ROMName >> 8
.2daa	8d 2c 0c	sta $0c2c			sta 	FSBBlock+1
.2dad	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh 				; set load address
.2db0	8d 2e 0c	sta $0c2e			sta 	FSBBlock+3
.2db3	9c 2d 0c	stz $0c2d			stz 	FSBBlock+2
.2db6	9c 2f 0c	stz $0c2f			stz 	FSBBlock+4
.2db9	9c 30 0c	stz $0c30			stz 	FSBBlock+5
.2dbc	a2 2b		ldx #$2b			ldx 	#FSBBlock & $FF 			; read the file.
.2dbe	a0 0c		ldy #$0c			ldy 	#FSBBlock >> 8
.2dc0	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2dc3	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh 				; copy to ROM area (may not work for BASIC in ROM ?)
.2dc6	85 25		sta $25				sta 	zTemp0+1
.2dc8	a9 d0		lda #$d0			lda 	#$D0
.2dca	85 27		sta $27				sta 	zTemp1+1
.2dcc	64 24		stz $24				stz 	zTemp0
.2dce	64 26		stz $26				stz 	zTemp1
.2dd0	a0 00		ldy #$00			ldy 	#0
.2dd2					_CACopyROM:
.2dd2	b1 24		lda ($24),y			lda 	(zTemp0),y
.2dd4	91 26		sta ($26),y			sta 	(zTemp1),y
.2dd6	c8		iny				iny
.2dd7	d0 f9		bne $2dd2			bne 	_CACopyROM
.2dd9	e6 25		inc $25				inc 	zTemp0+1
.2ddb	e6 27		inc $27				inc 	zTemp1+1
.2ddd	d0 f3		bne $2dd2			bne 	_CACopyROM
.2ddf	6c fc ff	jmp ($fffc)			jmp 	($FFFC)
.2de2					_A2ROMName:
>2de2	09 61 70 70 6c 65 2e 72				.text 	_A2RNEnd-*-1,"apple.rom"
>2dea	6f 6d
.2dec					_A2RNEnd:

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2dec					Command_DIR:
.2dec	5a		phy				phy
.2ded	38		sec				sec 								; reset read
.2dee	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2df1	18		clc		_CDLoop:clc
.2df2	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2df5	b0 27		bcs $2e1e			bcs 	_CDExit 					; no more
.2df7	86 24		stx $24				stx 	zTemp0
.2df9	84 25		sty $25				sty 	zTemp0+1
.2dfb	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2dfe					_CDPad:
.2dfe	a9 20		lda #$20			lda 	#32
.2e00	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2e03	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2e06	e0 10		cpx #$10			cpx 	#16
.2e08	90 f4		bcc $2dfe			bcc 	_CDPad
.2e0a	a0 11		ldy #$11			ldy 	#17
.2e0c	b1 24		lda ($24),y			lda 	(zTemp0),y
.2e0e	aa		tax				tax
.2e0f	88		dey				dey
.2e10	b1 24		lda ($24),y			lda 	(zTemp0),y
.2e12	20 0c 2f	jsr $2f0c			jsr 	WriteIntXA
.2e15	a2 20		ldx #$20			ldx 	#_CDTail & $FF
.2e17	a0 2e		ldy #$2e			ldy 	#_CDTail >> 8
.2e19	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2e1c	80 d3		bra $2df1			bra 	_CDLoop
.2e1e	7a		ply		_CDExit:ply
.2e1f	60		rts				rts
.2e20					_CDTail:
>2e20	08						.byte 	_CDTail2-*-1
>2e21	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2e29					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2e29					Command_ERASE:
.2e29	20 3b 2e	jsr $2e3b			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2e2c	5a		phy				phy
.2e2d	a2 2b		ldx #$2b			ldx 	#FSBBlock & $FF
.2e2f	a0 0c		ldy #$0c			ldy 	#FSBBlock >> 8
.2e31	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2e34	7a		ply				ply
.2e35	b0 01		bcs $2e38			bcs 	_CEFail
.2e37	60		rts				rts
.2e38					_CEFail:
.2e38	4c 2e 2c	jmp $2c2e		jmp	ErrorV_fnf
.2e3b					FileSetupBlock:
.2e3b	20 98 1a	jsr $1a98			jsr 	EXPEvalString 					; string to R0, zTemp0
.2e3e	a5 24		lda $24				lda 	zTemp0 							; address to name
.2e40	8d 2b 0c	sta $0c2b			sta 	FSBBlock
.2e43	a5 25		lda $25				lda 	zTemp0+1
.2e45	8d 2c 0c	sta $0c2c			sta 	FSBBlock+1 						; zero the rest.
.2e48	9c 2d 0c	stz $0c2d			stz 	FSBBlock+2
.2e4b	9c 2e 0c	stz $0c2e			stz 	FSBBlock+3
.2e4e	9c 2f 0c	stz $0c2f			stz 	FSBBlock+4
.2e51	9c 30 0c	stz $0c30			stz 	FSBBlock+5
.2e54	60		rts				rts
.0c2b					FSBBlock:
>0c2b							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2e55					Command_LOAD:
.2e55	20 3b 2e	jsr $2e3b			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2e58	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh 				; set load address
.2e5b	8d 2e 0c	sta $0c2e			sta 	FSBBlock+3
.2e5e	9c 2d 0c	stz $0c2d			stz 	FSBBlock+2
.2e61	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2e63	48		pha				pha
.2e64	20 81 2e	jsr $2e81			jsr	 	FileCheckSecondParam
.2e67	5a		phy				phy
.2e68	a2 2b		ldx #$2b			ldx 	#FSBBlock & $FF
.2e6a	a0 0c		ldy #$0c			ldy 	#FSBBlock >> 8
.2e6c	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2e6f	7a		ply				ply
.2e70	b0 0c		bcs $2e7e			bcs 	_CLFail
.2e72	68		pla				pla 								; load program
.2e73	c9 99		cmp #$99			cmp 	#PR_COMMA
.2e75	f0 06		beq $2e7d			beq 	_CLNoClear
.2e77	20 38 13	jsr $1338			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2e7a	4c 2b 2f	jmp $2f2b			jmp 	WarmStart 					; and warm start
.2e7d					_CLNoClear:
.2e7d	60		rts				rts
.2e7e					_CLFail:
.2e7e	4c 2e 2c	jmp $2c2e		jmp	ErrorV_fnf
.2e81					FileCheckSecondParam:
.2e81	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2e83	c9 99		cmp #$99			cmp 	#PR_COMMA
.2e85	d0 0e		bne $2e95			bne 	_FCSPExit
.2e87	c8		iny				iny 								; consume
.2e88	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; get address
.2e8b	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2e8d	8d 2d 0c	sta $0c2d			sta 	FSBBlock+2
.2e90	a5 09		lda $09				lda 	IFR0+IM1
.2e92	8d 2e 0c	sta $0c2e			sta 	FSBBlock+3
.2e95					_FCSPExit:
.2e95	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2e96					Command_SAVE:
.2e96	20 3b 2e	jsr $2e3b			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2e99	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2e9b	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2e9d	f0 22		beq $2ec1			beq 	_CLSaveBlock 				; save "Name",from,size
.2e9f	ad 1f 0b	lda $0b1f			lda 	PGMBaseHigh 				; set load address
.2ea2	8d 2e 0c	sta $0c2e			sta 	FSBBlock+3
.2ea5	9c 2d 0c	stz $0c2d			stz 	FSBBlock+2
.2ea8	20 35 24	jsr $2435			jsr		PGMEndProgram 				; end of program -> zTemp0
.2eab	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2ead	d0 02		bne $2eb1			bne 	_CLNoCarry
.2eaf	e6 25		inc $25				inc 	zTemp0+1
.2eb1					_CLNoCarry:
.2eb1	a5 24		lda $24				lda 	zTemp0
.2eb3	8d 2f 0c	sta $0c2f			sta 	FSBBlock+4
.2eb6	38		sec				sec
.2eb7	a5 25		lda $25				lda 	zTemp0+1
.2eb9	ed 2e 0c	sbc $0c2e			sbc 	FSBBlock+3
.2ebc	8d 30 0c	sta $0c30			sta 	FSBBlock+5
.2ebf	80 13		bra $2ed4			bra 	_CSSave
.2ec1					_CLSaveBlock:
.2ec1	20 81 2e	jsr $2e81			jsr 	FileCheckSecondParam 		; the address to save from.
.2ec4	20 74 2c	jsr $2c74			jsr 	ERRCheckComma
.2ec7	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; get size
.2eca	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2ecc	8d 2f 0c	sta $0c2f			sta 	FSBBlock+4
.2ecf	a5 09		lda $09				lda 	IFR0+IM1
.2ed1	8d 30 0c	sta $0c30			sta 	FSBBlock+5
.2ed4					_CSSave:
.2ed4	5a		phy				phy
.2ed5	a2 2b		ldx #$2b			ldx 	#FSBBlock & $FF
.2ed7	a0 0c		ldy #$0c			ldy 	#FSBBlock >> 8
.2ed9	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2edc	7a		ply				ply
.2edd	b0 01		bcs $2ee0			bcs 	_CSFail
.2edf	60		rts				rts
.2ee0					_CSFail:
.2ee0	4c 41 2c	jmp $2c41		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2ee3					ErrorHandler:
.2ee3	fa		plx				plx 								; get address of msg
.2ee4	7a		ply				ply
.2ee5	e8		inx				inx 								; bump past RTS
.2ee6	d0 01		bne $2ee9			bne 	_EHNoInc
.2ee8	c8		iny				iny
.2ee9					_EHNoInc:
.2ee9	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2eec	ad 31 0c	lda $0c31			lda 	ERRLine 					; direct command ?
.2eef	0d 32 0c	ora $0c32			ora 	ERRLine+1 					; (e.g. no line number)
.2ef2	f0 10		beq $2f04			beq 	_EHNoNumber
.2ef4	a2 07		ldx #$07			ldx 	#_EHAtMsg & $FF 			; print ' at '
.2ef6	a0 2f		ldy #$2f			ldy 	#_EHAtMsg >> 8
.2ef8	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2efb	ad 31 0c	lda $0c31			lda 	ERRLine 					; line number -> XA
.2efe	ae 32 0c	ldx $0c32			ldx 	ERRLine+1
.2f01	20 0c 2f	jsr $2f0c			jsr 	WriteIntXA
.2f04					_EHNoNumber:
.2f04	4c 35 2f	jmp $2f35			jmp 	WarmStartNewLine 			; no OK or anything.
.2f07					_EHAtMsg:
>2f07	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2f0c					_EHAtMsg1:
.2f0c					WriteIntXA:
.2f0c	da		phx				phx
.2f0d	48		pha				pha
.2f0e	a2 08		ldx #$08			ldx 	#IFR0 						; copy into R0
.2f10	20 a1 36	jsr $36a1			jsr 	IFloatPushRx
.2f13	68		pla				pla
.2f14	20 54 37	jsr $3754			jsr 	IFloatSetByte
.2f17	68		pla				pla
.2f18	85 09		sta $09				sta 	IFR0+IM1
.2f1a	a9 0a		lda #$0a			lda 	#10 						; convert to decimal
.2f1c	20 f4 34	jsr $34f4			jsr 	IFloatIntegerToStringR0	 	; c
.2f1f	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2f22	a2 08		ldx #$08			ldx 	#IFR0
.2f24	20 c2 36	jsr $36c2			jsr 	IFloatPullRx
.2f27	60		rts				rts
.2f28					NotImplemented:
.2f28	4c c3 2a	jmp $2ac3		jmp	ErrorV_unimplemented
.0c31					ERRLine:
>0c31							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2f2b					WarmStart:
.2f2b	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2f2d	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2f30	a9 6b		lda #$6b			lda 	#"k"
.2f32	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2f35					WarmStartNewLine:
.2f35	a9 0d		lda #$0d			lda 	#13
.2f37	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2f3a					WarmStartNoPrompt:
.2f3a	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2f3c	9a		txs				txs
.2f3d	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2f40	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2f41	d0 01		bne $2f44			bne 	_WSSkip
.2f43	c8		iny				iny
.2f44					_WSSkip:
.2f44	86 28		stx $28				stx 	zTemp2 						; save address for tokeniser getter.
.2f46	84 29		sty $29				sty 	zTemp2+1
.2f48	b2 28		lda ($28)			lda 	(zTemp2) 					; see if it's an empty line.
.2f4a	f0 ee		beq $2f3a			beq 	WarmStartNoPrompt 			; if so ignore empty line.
.2f4c	a2 7e		ldx #$7e			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2f4e	a0 2f		ldy #$2f			ldy 	#TOKGetCharacter >> 8
.2f50	38		sec				sec
.2f51	20 a7 24	jsr $24a7			jsr 	TOKTokenise
.2f54	b0 25		bcs $2f7b			bcs 	_WSSyntax 					; error in tokenising.
.2f56	ad 01 0a	lda $0a01			lda 	TOKLineNumber 				; if line number zero
.2f59	0d 02 0a	ora $0a02			ora 	TOKLineNumber+1
.2f5c	d0 0b		bne $2f69			bne 	_WSLineEdit 				; it's an editing command
.2f5e	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2f60	85 18		sta $18				sta 	codePtr
.2f62	a9 0a		lda #$0a			lda 	#TOKLineSize >> 8
.2f64	85 19		sta $19				sta 	codePtr+1
.2f66	4c 3a 18	jmp $183a			jmp 	RUNNewLine
.2f69					_WSLineEdit:
.2f69	20 82 23	jsr $2382			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2f6c	ad 00 0a	lda $0a00			lda 	TOKLineSize 				; check line is empty.
.2f6f	c9 04		cmp #$04			cmp 	#4
.2f71	f0 03		beq $2f76			beq 	_WSNoInsert
.2f73	20 cc 23	jsr $23cc			jsr 	PGMInsertLine				; if not, maybe insert
.2f76					_WSNoInsert:
.2f76	20 38 13	jsr $1338			jsr 	ClearCode 					; clear variables etc.
.2f79	80 bf		bra $2f3a			bra 	WarmStartNoPrompt
.2f7b					_WSSyntax:
.2f7b	4c 81 2a	jmp $2a81		jmp	ErrorV_syntax
.2f7e					TOKGetCharacter:
.2f7e	b2 28		lda ($28)			lda 	(zTemp2)
.2f80	90 06		bcc $2f88			bcc 	_GSNoIncrement
.2f82	e6 28		inc $28				inc 	zTemp2
.2f84	d0 02		bne $2f88			bne 	_GSNoIncrement
.2f86	e6 29		inc $29				inc 	zTemp2+1
.2f88					_GSNoIncrement:
.2f88	c9 00		cmp #$00			cmp 	#0
.2f8a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2f8b					VARArrayLookup:
.2f8b	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2f8d	86 25		stx $25				stx 	zTemp0+1
.2f8f	b2 24		lda ($24)			lda 	(zTemp0)
.2f91	48		pha				pha
.2f92	5a		phy				phy
.2f93	a0 01		ldy #$01			ldy 	#1
.2f95	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f97	7a		ply				ply
.2f98	48		pha				pha
.2f99	20 80 1a	jsr $1a80			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2f9c	68		pla				pla 								; array address to zTemp0
.2f9d	85 25		sta $25				sta 	zTemp0+1
.2f9f	68		pla				pla
.2fa0	85 24		sta $24				sta 	zTemp0
.2fa2	5a		phy				phy 								; save codePtr position.
.2fa3	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2fa5	b1 24		lda ($24),y			lda 	(zTemp0),y
.2fa7	48		pha				pha 								; save bit 15 on stack.
.2fa8	29 7f		and #$7f			and 	#$7F
.2faa	85 26		sta $26				sta 	zTemp1
.2fac	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2fae	d2 24		cmp ($24)			cmp 	(zTemp0)
.2fb0	a5 09		lda $09				lda 	IFR0+IM1
.2fb2	e5 26		sbc $26				sbc 	zTemp1
.2fb4	b0 3a		bcs $2ff0			bcs 	_VALIndex
.2fb6	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2fb8	c9 40		cmp #$40			cmp 	#$40
.2fba	b0 34		bcs $2ff0			bcs 	_VALIndex
.2fbc	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2fbe	26 09		rol $09				rol 	IFR0+IM1
.2fc0	fa		plx				plx 								; get msb of size -> X
.2fc1	30 04		bmi $2fc7			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2fc3	06 08		asl $08				asl 	IFR0+IM0
.2fc5	26 09		rol $09				rol 	IFR0+IM1
.2fc7					_VARNotX4:
.2fc7	18		clc				clc 								; add the two for the size bytes
.2fc8	a5 08		lda $08				lda 	IFR0+IM0
.2fca	69 02		adc #$02			adc 	#2
.2fcc	85 08		sta $08				sta 	IFR0+IM0
.2fce	90 02		bcc $2fd2			bcc 	_VARNoCarry1
.2fd0	e6 09		inc $09				inc 	IFR0+IM1
.2fd2					_VARNoCarry1:
.2fd2	18		clc				clc 								; calculate the element address and push to stack.
.2fd3	a5 08		lda $08				lda 	IFR0+IM0
.2fd5	65 24		adc $24				adc 	zTemp0
.2fd7	48		pha				pha
.2fd8	a5 09		lda $09				lda 	IFR0+IM1
.2fda	65 25		adc $25				adc 	zTemp0+1
.2fdc	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2fde	30 04		bmi $2fe4			bmi 	_VARHasSubLevel
.2fe0	aa		tax				tax 								; address in XA
.2fe1	68		pla				pla
.2fe2	7a		ply				ply 								; restore Y and exit
.2fe3	60		rts				rts
.2fe4					_VARHasSubLevel:
.2fe4	aa		tax				tax 								; get link address in XA
.2fe5	68		pla				pla
.2fe6	7a		ply				ply 								; restore code position.
.2fe7	48		pha				pha
.2fe8	20 74 2c	jsr $2c74			jsr 	ERRCheckComma 				; comma required.
.2feb	68		pla				pla
.2fec	20 8b 2f	jsr $2f8b			jsr 	VARArrayLookup 				; call it recursively
.2fef	60		rts				rts
.2ff0					_VALIndex:
.2ff0	4c 5d 2b	jmp $2b5d		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2ff3					VARCreate:
.2ff3	5a		phy				phy
.2ff4	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space (size of variable record)
.2ff6	a2 00		ldx #$00			ldx 	#0
.2ff8	20 55 13	jsr $1355			jsr 	AllocateMemory
.2ffb	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2ffd	86 27		stx $27				stx 	zTemp1+1
.2fff	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.3001	ad 35 0c	lda $0c35			lda 	VARHash
.3004	91 26		sta ($26),y			sta 	(zTemp1),y
.3006	c8		iny				iny 								; put address of name into +3,+4
.3007	ad 33 0c	lda $0c33			lda 	VARNameAddress
.300a	91 26		sta ($26),y			sta 	(zTemp1),y
.300c	c8		iny				iny
.300d	ad 34 0c	lda $0c34			lda 	VARNameAddress+1
.3010	91 26		sta ($26),y			sta 	(zTemp1),y
.3012	ad 36 0c	lda $0c36			lda 	VARType
.3015	29 01		and #$01			and 	#1
.3017	f0 06		beq $301f			beq 	_CVNotString
.3019	a0 08		ldy #$08			ldy 	#5+3
.301b	a9 80		lda #$80			lda 	#$80
.301d	91 26		sta ($26),y			sta 	(zTemp1),y
.301f					_CVNotString:
.301f	ad 57 0c	lda $0c57			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.3022	85 24		sta $24				sta 	zTemp0
.3024	ad 58 0c	lda $0c58			lda 	VARHashEntry+1
.3027	85 25		sta $25				sta 	zTemp0+1
.3029	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.302b	b2 24		lda ($24)			lda 	(zTemp0)
.302d	92 26		sta ($26)			sta 	(zTemp1)
.302f	b1 24		lda ($24),y			lda 	(zTemp0),y
.3031	91 26		sta ($26),y			sta 	(zTemp1),y
.3033	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.3035	92 24		sta ($24)			sta 	(zTemp0)
.3037	a5 27		lda $27				lda 	zTemp1+1
.3039	91 24		sta ($24),y			sta 	(zTemp0),y
.303b	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.303d	a6 27		ldx $27				ldx 	zTemp1+1
.303f	18		clc				clc 								; add 5 to point to the data.
.3040	69 05		adc #$05			adc 	#5
.3042	90 01		bcc $3045			bcc 	_VCNoCarry
.3044	e8		inx				inx
.3045					_VCNoCarry:
.3045	7a		ply				ply
.3046	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.3047					VARFind:
.3047	5a		phy				phy
.3048	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.304a	b1 24		lda ($24),y			lda 	(zTemp0),y
.304c	85 27		sta $27				sta 	zTemp1+1
.304e	f0 1c		beq $306c			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.3050	b2 24		lda ($24)			lda 	(zTemp0) 					; complete the link.
.3052	85 26		sta $26				sta 	zTemp1
.3054					_VFLoop:
.3054	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.3056	b1 26		lda ($26),y			lda 	(zTemp1),y
.3058	cd 35 0c	cmp $0c35			cmp 	VARHash
.305b	f0 12		beq $306f			beq 	_VFHashesMatch 				; if so, check the name.
.305d					_VFNext:
.305d	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.305f	aa		tax				tax
.3060	a0 01		ldy #$01			ldy 	#1
.3062	b1 26		lda ($26),y			lda 	(zTemp1),y
.3064	85 27		sta $27				sta 	zTemp1+1
.3066	86 26		stx $26				stx 	zTemp1
.3068	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.306a	d0 e8		bne $3054			bne 	_VFLoop
.306c					_VFExitFail:
.306c	7a		ply				ply
.306d	18		clc				clc
.306e	60		rts				rts
.306f					_VFHashesMatch:
.306f	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.3071	b1 26		lda ($26),y			lda 	(zTemp1),y
.3073	85 28		sta $28				sta 	zTemp2
.3075	c8		iny				iny
.3076	b1 26		lda ($26),y			lda 	(zTemp1),y
.3078	85 29		sta $29				sta 	zTemp2+1
.307a	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.307c					_VFNameCompLoop:
.307c	c8		iny				iny 								; char at a time
.307d	b9 37 0c	lda $0c37,y			lda 	VARBuffer,y
.3080	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.3082	d0 d9		bne $305d			bne 	_VFNext						; next entry if different.
.3084	c9 7c		cmp #$7c			cmp 	#$7C
.3086	90 f4		bcc $307c			bcc 	_VFNameCompLoop 			; until done the whole lot.
.3088	18		clc				clc 								; +5 is the offset of the actual data
.3089	a5 26		lda $26				lda 	zTemp1 						; word:link byte:hash word:name pointer
.308b	a6 27		ldx $27				ldx 	zTemp1+1
.308d	69 05		adc #$05			adc 	#5
.308f	90 01		bcc $3092			bcc 	_VFNNoCarry
.3091	e8		inx				inx
.3092					_VFNNoCarry:
.3092	7a		ply				ply
.3093	38		sec				sec
.3094	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.3095					VARGetInfo:
.3095	98		tya				tya 								; calculate the address of the identifier start.
.3096	18		clc				clc  								; (add Y to codePtr)
.3097	65 18		adc $18				adc 	codePtr
.3099	8d 33 0c	sta $0c33			sta 	VARNameAddress 				; save in VARName Address
.309c	a5 19		lda $19				lda 	codePtr+1
.309e	69 00		adc #$00			adc 	#0
.30a0	8d 34 0c	sta $0c34			sta 	VARNameAddress+1
.30a3	9c 35 0c	stz $0c35			stz 	VARHash
.30a6	a2 00		ldx #$00			ldx 	#0
.30a8					_VARCopyName:
.30a8	18		clc				clc 								; update the sum hash.
.30a9	ad 35 0c	lda $0c35			lda 	VARHash
.30ac	71 18		adc ($18),y			adc 	(codePtr),y
.30ae	8d 35 0c	sta $0c35			sta 	VARHash
.30b1	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.30b3	c8		iny				iny
.30b4	9d 37 0c	sta $0c37,x			sta 	VARBuffer,x
.30b7	e8		inx				inx
.30b8	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.30ba	90 ec		bcc $30a8			bcc 	_VARCopyName
.30bc	8d 36 0c	sta $0c36			sta 	VARType 					; save type byte
.30bf	29 03		and #$03			and 	#3 							; type is 0-3
.30c1	0a		asl a				asl 	a
.30c2	0a		asl a				asl 	a
.30c3	85 24		sta $24				sta 	zTemp0
.30c5	ad 35 0c	lda $0c35			lda 	VARHash 					; force hash into range of hash entries per type.
.30c8	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.30ca	65 24		adc $24				adc 	zTemp0 						; index of hash table
.30cc	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.30cd	69 59		adc #$59			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.30cf	85 24		sta $24				sta 	zTemp0
.30d1	8d 57 0c	sta $0c57			sta 	VARHashEntry
.30d4	a9 0c		lda #$0c			lda 	#VARHashTables >> 8
.30d6	69 00		adc #$00			adc 	#0
.30d8	85 25		sta $25				sta 	zTemp0+1
.30da	8d 58 0c	sta $0c58			sta 	VARHashEntry+1
.30dd	60		rts				rts
.30de					VARClearHashTables:
.30de	a2 00		ldx #$00			ldx 	#0
.30e0					_VCHRLoop:
.30e0	a9 00		lda #$00			lda 	#0
.30e2	9d 59 0c	sta $0c59,x			sta 	VARHashTables,x
.30e5	e8		inx				inx
.30e6	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.30e8	d0 f6		bne $30e0			bne 	_VCHRLoop
.30ea	60		rts				rts
.0c33					VARNameAddress:
>0c33							.fill 	2
.0c35					VARHash:
>0c35							.fill 	1
.0c36					VARType:
>0c36							.fill 	1
.0c37					VARBuffer:
>0c37							.fill 	32
.0c57					VARHashEntry:
>0c57							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0c59					VARHashTables:
>0c59							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.30eb					VARCheckSimple:
.30eb	aa		tax				tax 								; save first character in X
.30ec	b1 18		lda ($18),y			lda 	(codePtr),y 				; is type numeric variable.
.30ee	c9 7c		cmp #$7c			cmp 	#$7C 		 				; no it's a complex variable
.30f0	d0 15		bne $3107			bne 	_VCSComplex
.30f2	c8		iny				iny 								; consume the second byte, the type.
.30f3	8a		txa				txa  								; character (40-7F) x 4
.30f4	0a		asl a				asl 	a
.30f5	0a		asl a				asl  	a
.30f6	18		clc				clc 								; add to the base of 'fast variables'
.30f7	69 79		adc #$79			adc 	#FastVariables & $FF
.30f9	85 08		sta $08				sta 	IFR0+IM0
.30fb	a9 0c		lda #$0c			lda 	#FastVariables >> 8
.30fd	69 00		adc #$00			adc 	#0
.30ff	85 09		sta $09				sta 	IFR0+IM1
.3101	64 0a		stz $0a				stz 	IFR0+IM2
.3103	64 0b		stz $0b				stz 	IFR0+IExp
.3105	38		sec				sec 								; it's a reference
.3106	60		rts				rts
.3107					_VCSComplex:
.3107	88		dey				dey	 								; extract information.
.3108	20 95 30	jsr $3095			jsr 	VARGetInfo
.310b	20 47 30	jsr $3047			jsr 	VARFind 					; search for variable
.310e	b0 0a		bcs $311a			bcs 	_VCSHaveVariable			; it already exists.
.3110	ad 36 0c	lda $0c36			lda 	VARType 					; error if arrays, cannot autocreate
.3113	29 02		and #$02			and 	#2
.3115	d0 25		bne $313c			bne 	_VCNoCreate
.3117	20 f3 2f	jsr $2ff3			jsr 	VARCreate 					; create variable
.311a					_VCSHaveVariable:
.311a	48		pha				pha 								; save LSB on the stack
.311b	ad 36 0c	lda $0c36			lda 	VARType 					; get var type, and shift bit 1 into carry
.311e	6a		ror a				ror 	a
.311f	6a		ror a				ror 	a
.3120	68		pla				pla 								; restore LSB
.3121	90 08		bcc $312b			bcc 	_VCSNotArray 				; skip if not an array
.3123	20 8b 2f	jsr $2f8b			jsr 	VARArrayLookup 				; look for subscripts.
.3126	48		pha				pha 								; check )
.3127	20 6c 2c	jsr $2c6c			jsr 	ERRCheckRParen
.312a	68		pla				pla
.312b					_VCSNotArray:
.312b	86 09		stx $09				stx 	IFR0+IM1 					; save address
.312d	85 08		sta $08				sta 	IFR0+IM0
.312f	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.3131	ad 36 0c	lda $0c36			lda 	VARType 					; number/string bit into carry
.3134	6a		ror a				ror 	a
.3135	a9 00		lda #$00			lda 	#0
.3137	6a		ror a				ror 	a 							; now $00 or $80
.3138	85 0b		sta $0b				sta 	IFR0+IExp
.313a	38		sec				sec 								; it's a reference
.313b	60		rts				rts
.313c					_VCNoCreate:
.313c	4c 83 2b	jmp $2b83		jmp	ErrorV_uninitialised
.0c79					FastVariables:
>0c79							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.313f					IFInitialise:
.313f	9c e9 0c	stz $0ce9			stz 	IFStackIndex 				; reset the internal stack.
.3142	60		rts				rts
.3143					IFloatSubtract:
.3143	da		phx				phx
.3144	a2 08		ldx #$08			ldx 	#IFR0
.3146	20 5d 37	jsr $375d			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.3149	fa		plx				plx
.314a					IFloatAdd:
.314a	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.314c	05 0b		ora $0b				ora 	IFR0+IExp
.314e	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.3150	d0 4e		bne $31a0			bne 	_IFloatAddDecimals 			; floating point version.
.3152					_IFAddSubMantissa:
.3152	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.3154	45 0b		eor $0b				eor 	IFR0+IExp
.3156	29 40		and #$40			and 	#IFSign
.3158	d0 21		bne $317b			bne 	_IFloatSubMantissa			; if so, we do a subtract
.315a	18		clc				clc 								; do the actual addition
.315b	a5 08		lda $08				lda 	IFR0+IM0
.315d	75 00		adc $00,x			adc 		IM0,x
.315f	85 08		sta $08				sta 	IFR0+IM0
.3161	a5 09		lda $09				lda 	IFR0+IM1
.3163	75 01		adc $01,x			adc 		IM1,x
.3165	85 09		sta $09				sta 	IFR0+IM1
.3167	a5 0a		lda $0a				lda 	IFR0+IM2
.3169	75 02		adc $02,x			adc 		IM2,x
.316b	85 0a		sta $0a				sta 	IFR0+IM2
.316d	10 29		bpl $3198			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.316f	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.3171	20 81 37	jsr $3781			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.3174	20 ab 37	jsr $37ab			jsr 	IFloatIncExponent
.3177	d0 1f		bne $3198			bne 	_IFloatAddExit
.3179	38		sec				sec 								; overflowed numerically.
.317a	60		rts				rts
.317b					_IFloatSubMantissa:
.317b	38		sec				sec 								; do the subtraction R0-Rx
.317c	a5 08		lda $08				lda 	IFR0+IM0
.317e	f5 00		sbc $00,x			sbc 		IM0,x
.3180	85 08		sta $08				sta 	IFR0+IM0
.3182	a5 09		lda $09				lda 	IFR0+IM1
.3184	f5 01		sbc $01,x			sbc 		IM1,x
.3186	85 09		sta $09				sta 	IFR0+IM1
.3188	a5 0a		lda $0a				lda 	IFR0+IM2
.318a	f5 02		sbc $02,x			sbc 		IM2,x
.318c	85 0a		sta $0a				sta 	IFR0+IM2
.318e	b0 08		bcs $3198			bcs 	_IFloatAddExit 				; no borrow so we are done.
.3190	a2 08		ldx #$08			ldx 	#IFR0
.3192	20 65 37	jsr $3765			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.3195	20 5d 37	jsr $375d			jsr 	IFloatNegate 				; negate the result using sign bit.
.3198					_IFloatAddExit:
.3198	18		clc				clc
.3199	60		rts				rts
.319a					_IFloatZeroAdd:
.319a	fa		plx				plx 								; return this value in R0
.319b	20 e3 36	jsr $36e3			jsr 	IFloatCopyFromRegister
.319e	18		clc				clc
.319f	60		rts				rts
.31a0					_IFloatAddDecimals:
.31a0	20 4b 37	jsr $374b			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.31a3	f0 f3		beq $3198			beq 	_IFloatAddExit
.31a5	20 89 37	jsr $3789			jsr 	IFloatNormalise 			; normalise RX
.31a8	da		phx				phx 								; normalise R0
.31a9	a2 08		ldx #$08			ldx 	#IFR0
.31ab	20 4b 37	jsr $374b			jsr 	IFloatCheckZero
.31ae	f0 ea		beq $319a			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.31b0	20 89 37	jsr $3789			jsr 	IFloatNormalise
.31b3	fa		plx				plx
.31b4	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.31b6	29 3f		and #$3f			and 	#IFXMask
.31b8	38		sec				sec
.31b9	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.31bb	85 20		sta $20				sta 	iTemp0
.31bd	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.31bf	29 3f		and #$3f			and 	#IFXMask
.31c1	38		sec				sec
.31c2	e9 20		sbc #$20			sbc 	#$20
.31c4	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.31c6	b0 02		bcs $31ca			bcs 	_IFloatHaveLarger
.31c8	a5 20		lda $20				lda 	iTemp0
.31ca					_IFloatHaveLarger:
.31ca	18		clc				clc 								; get the actual one back.
.31cb	69 20		adc #$20			adc 	#$20 						; shift both to that.
.31cd	20 da 31	jsr $31da			jsr 	_IFShiftXToA
.31d0	da		phx				phx
.31d1	a2 08		ldx #$08			ldx 	#IFR0
.31d3	20 da 31	jsr $31da			jsr 	_IFShiftXToA
.31d6	fa		plx				plx
.31d7	4c 52 31	jmp $3152			jmp 	_IFAddSubMantissa 			; do the adding bit.
.31da					_IFShiftXToA:
.31da	8d e1 0c	sta $0ce1			sta 	IFTarget
.31dd	20 4b 37	jsr $374b			jsr 	IFloatCheckZero 			; check adding zero ?
.31e0	f0 11		beq $31f3			beq 	_IFSXExit
.31e2					_IFSXLoop:
.31e2	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.31e4	29 3f		and #$3f			and 	#IFXMask
.31e6	cd e1 0c	cmp $0ce1			cmp 	IFTarget
.31e9	f0 08		beq $31f3			beq 	_IFSXExit
.31eb	20 81 37	jsr $3781			jsr 	IFloatShiftRight
.31ee	20 ab 37	jsr $37ab			jsr 	IFloatIncExponent
.31f1	80 ef		bra $31e2			bra 	_IFSXLoop
.31f3					_IFSXExit:
.31f3	60		rts				rts
.0ce1					IFTarget:
>0ce1							.fill 	1
.31f4					IFloatMultiply:
.31f4	8e e1 0c	stx $0ce1			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.31f7	20 ac 32	jsr $32ac			jsr 	IFCalculateNewSign
.31fa	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.31fc	05 0b		ora $0b				ora 	IFR0+IExp
.31fe	29 3f		and #$3f			and 	#IFXMask
.3200	15 01		ora $01,x			ora 	IM1,x
.3202	05 09		ora $09				ora 	IFR0+IM1
.3204	15 02		ora $02,x			ora 	IM2,x
.3206	05 0a		ora $0a				ora 	IFR0+IM2
.3208	d0 0a		bne $3214			bne 	_IFMStandard
.320a	20 2e 37	jsr $372e			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.320d	ad e3 0c	lda $0ce3			lda 	IFNewSign
.3210	85 0b		sta $0b				sta 	IFR0+IExp
.3212	18		clc				clc
.3213	60		rts				rts
.3214					_IFMStandard:
.3214	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.3216	20 a3 32	jsr $32a3			jsr 	IFMSignExtend
.3219	8d e2 0c	sta $0ce2			sta 	IFNewExponent
.321c	a5 0b		lda $0b				lda 	IFR0+IExp
.321e	20 a3 32	jsr $32a3			jsr 	IFMSignExtend
.3221	18		clc				clc
.3222	6d e2 0c	adc $0ce2			adc 	IFNewExponent
.3225	8d e2 0c	sta $0ce2			sta 	IFNewExponent
.3228	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.322a	20 f4 36	jsr $36f4			jsr 	IFloatCopyToRegister
.322d	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.322f	20 52 37	jsr $3752			jsr 	IFloatSetZero
.3232					_IFMLoop:
.3232	a2 14		ldx #$14			ldx 	#IFRTemp
.3234	20 4b 37	jsr $374b			jsr 	IFloatCheckZero
.3237	f0 3a		beq $3273			beq 	_IFMExit
.3239	ae e1 0c	ldx $0ce1			ldx 	IFTarget 					; look at adder MSB
.323c	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.323e	10 03		bpl $3243			bpl	 	_IFMTargetOkay
.3240	20 94 32	jsr $3294			jsr 	_IFMShiftAll
.3243					_IFMTargetOkay:
.3243	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.3245	29 01		and #$01			and 	#1
.3247	f0 16		beq $325f			beq 	_IFMNoAdd
.3249	ae e1 0c	ldx $0ce1			ldx 	IFTarget 					; add adder
.324c	18		clc				clc
.324d	a5 08		lda $08				lda 	IFR0+IM0
.324f	75 00		adc $00,x			adc 		IM0,x
.3251	85 08		sta $08				sta 	IFR0+IM0
.3253	a5 09		lda $09				lda 	IFR0+IM1
.3255	75 01		adc $01,x			adc 		IM1,x
.3257	85 09		sta $09				sta 	IFR0+IM1
.3259	a5 0a		lda $0a				lda 	IFR0+IM2
.325b	75 02		adc $02,x			adc 		IM2,x
.325d	85 0a		sta $0a				sta 	IFR0+IM2
.325f					_IFMNoAdd:
.325f	a5 0a		lda $0a				lda 	IFR0+IM2
.3261	10 03		bpl $3266			bpl 	_IFMResultOkay
.3263	20 94 32	jsr $3294			jsr 	_IFMShiftAll
.3266					_IFMResultOkay:
.3266	a2 14		ldx #$14			ldx 	#IFRTemp
.3268	20 81 37	jsr $3781			jsr 	IFloatShiftRight
.326b	ae e1 0c	ldx $0ce1			ldx 	IFTarget
.326e	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.3271	80 bf		bra $3232			bra 	_IFMLoop
.3273					_IFMExit:
.3273	ad e2 0c	lda $0ce2			lda 	IFNewExponent 				; validate new exponent.
.3276	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.3278	90 0f		bcc $3289			bcc 	_IFMOkay
.327a	c9 e0		cmp #$e0			cmp 	#$E0
.327c	b0 0b		bcs $3289			bcs 	_IFMOkay
.327e	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.3280	f0 10		beq $3292			beq 	_IFMError
.3282	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.3284	20 52 37	jsr $3752			jsr 	IFloatSetZero
.3287	18		clc				clc
.3288	60		rts				rts
.3289					_IFMOkay:
.3289	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.328b	0d e3 0c	ora $0ce3			ora 	IFNewSign
.328e	85 0b		sta $0b				sta 	IFR0+IExp
.3290	18		clc				clc
.3291	60		rts				rts
.3292					_IFMError:
.3292	38		sec				sec
.3293	60		rts				rts
.3294					_IFMShiftAll:
.3294	a2 08		ldx #$08			ldx 	#IFR0
.3296	20 81 37	jsr $3781			jsr 	IFloatShiftRight
.3299	ae e1 0c	ldx $0ce1			ldx 	IFTarget
.329c	20 81 37	jsr $3781			jsr 	IFloatShiftRight
.329f	ee e2 0c	inc $0ce2			inc 	IFNewExponent
.32a2	60		rts				rts
.32a3					IFMSignExtend:
.32a3	29 3f		and #$3f			and 	#IFXMask
.32a5	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.32a7	90 02		bcc $32ab			bcc 	_IFMNoSXX
.32a9	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.32ab					_IFMNoSXX:
.32ab	60		rts				rts
.32ac					IFCalculateNewSign:
.32ac	b5 03		lda $03,x			lda 	IExp,x
.32ae	45 0b		eor $0b				eor 	IFR0+IExp
.32b0	29 40		and #$40			and 	#IFSign
.32b2	8d e3 0c	sta $0ce3			sta 	IFNewSign
.32b5	60		rts				rts
.0ce2					IFNewExponent:
>0ce2							.fill 	1
.0ce3					IFNewSign:
>0ce3							.fill 	1
.32b6					IFloatDivideInteger:
.32b6	20 cf 32	jsr $32cf			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.32b9	b0 06		bcs $32c1			bcs 	_IFDIExit
.32bb	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.32bd	20 e3 36	jsr $36e3			jsr 	IFloatCopyFromRegister
.32c0	18		clc				clc
.32c1					_IFDIExit:
.32c1	60		rts				rts
.32c2					IFloatModulusInteger:
.32c2	20 cf 32	jsr $32cf			jsr 	IFloatDivideIntegerCommon
.32c5	b0 07		bcs $32ce			bcs 	_IFMIExit
.32c7	ae e1 0c	ldx $0ce1			ldx 	IFTarget
.32ca	20 e3 36	jsr $36e3			jsr 	IFloatCopyFromRegister
.32cd	18		clc				clc
.32ce					_IFMIExit:
.32ce	60		rts				rts
.32cf					IFloatDivideIntegerCommon:
.32cf	8e e1 0c	stx $0ce1			stx 	IFTarget  					; this is s1, s0 = R0
.32d2	20 ac 32	jsr $32ac			jsr 	IFCalculateNewSign 			; calculate sign of result
.32d5	20 fd 32	jsr $32fd			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.32d8	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.32da	20 4b 37	jsr $374b			jsr 	IFloatCheckZero
.32dd	f0 1c		beq $32fb			beq 	_IFDIDivZero
.32df	ae e1 0c	ldx $0ce1			ldx 	IFTarget 					; zero Rx (S1)
.32e2	20 52 37	jsr $3752			jsr 	IFloatSetZero
.32e5	5a		phy				phy
.32e6	a0 18		ldy #$18			ldy 	#24
.32e8					_IFDILoop:
.32e8	20 0e 33	jsr $330e			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.32eb	20 1a 33	jsr $331a			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.32ee	88		dey				dey
.32ef	d0 f7		bne $32e8			bne 	_IFDILoop 					; do it 24 times
.32f1	7a		ply				ply
.32f2	ad e3 0c	lda $0ce3			lda 	IFNewSign 					; set sign of result.
.32f5	29 40		and #$40			and 	#IFSign
.32f7	85 17		sta $17				sta 	IFRTemp+IExp
.32f9	18		clc				clc 								; is okay.
.32fa	60		rts				rts
.32fb					_IFDIDivZero:
.32fb	38		sec				sec
.32fc	60		rts				rts
.32fd					IFDCopyRXToRTemp:
.32fd	b5 00		lda $00,x			lda 	IM0,x
.32ff	85 14		sta $14				sta 	IFRTemp+IM0
.3301	b5 01		lda $01,x			lda 	IM1,x
.3303	85 15		sta $15				sta 	IFRTemp+IM1
.3305	b5 02		lda $02,x			lda 	IM2,x
.3307	85 16		sta $16				sta 	IFRTemp+IM2
.3309	b5 03		lda $03,x			lda 	IExp,x
.330b	85 17		sta $17				sta 	IFRTemp+IExp
.330d	60		rts				rts
.330e					IFDShiftSTempS1Left:
.330e	a2 14		ldx #$14			ldx 	#IFRTemp
.3310	20 79 37	jsr $3779			jsr 	IFloatShiftLeft
.3313	ae e1 0c	ldx $0ce1			ldx 	IFTarget
.3316	20 7a 37	jsr $377a			jsr 	IFloatRotateLeft
.3319	60		rts				rts
.331a					IFDTrySubtract:
.331a	ae e1 0c	ldx $0ce1			ldx 	IFTarget 					; s1 = Rx
.331d	38		sec				sec 								; subtract, saving the results on the stack.
.331e	b5 00		lda $00,x			lda 	IM0,x
.3320	e5 08		sbc $08				sbc 	IFR0+IM0
.3322	48		pha				pha
.3323	b5 01		lda $01,x			lda 	IM1,x
.3325	e5 09		sbc $09				sbc 	IFR0+IM1
.3327	48		pha				pha
.3328	b5 02		lda $02,x			lda 	IM2,x
.332a	e5 0a		sbc $0a				sbc 	IFR0+IM2
.332c	b0 03		bcs $3331			bcs 	_IFDCanSubtract
.332e	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.332f	68		pla				pla
.3330	60		rts				rts
.3331					_IFDCanSubtract:
.3331	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.3333	68		pla				pla
.3334	95 01		sta $01,x			sta 	IM1,x
.3336	68		pla				pla
.3337	95 00		sta $00,x			sta 	IM0,x
.3339	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.333b	d0 06		bne $3343			bne 	_IFDCSExit
.333d	e6 15		inc $15				inc 	IFRTemp+IM1
.333f	d0 02		bne $3343			bne 	_IFDCSExit
.3341	e6 16		inc $16				inc 	IFRTemp+IM2
.3343					_IFDCSExit:
.3343	60		rts				rts
.3344					IFloatBitwiseAnd:
.3344	5a		phy				phy
.3345	20 89 33	jsr $3389			jsr 	IFPreProcessBitwise 		; set up everything.
.3348	d0 0f		bne $3359			bne 	_IFBAExit
.334a					_IFBALoop:
.334a	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.334d	35 00		and $00,x			and 	IM0,x
.334f	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3352	e8		inx				inx
.3353	c8		iny				iny
.3354	c0 03		cpy #$03			cpy 	#3
.3356	d0 f2		bne $334a			bne 	_IFBALoop
.3358	18		clc				clc
.3359					_IFBAExit:
.3359	7a		ply				ply
.335a	60		rts				rts
.335b					IFloatBitwiseOr:
.335b	5a		phy				phy
.335c	20 89 33	jsr $3389			jsr 	IFPreProcessBitwise 		; set up everything.
.335f	d0 0f		bne $3370			bne 	_IFBAExit
.3361					_IFBALoop:
.3361	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3364	15 00		ora $00,x			ora 	IM0,x
.3366	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3369	e8		inx				inx
.336a	c8		iny				iny
.336b	c0 03		cpy #$03			cpy 	#3
.336d	d0 f2		bne $3361			bne 	_IFBALoop
.336f	18		clc				clc
.3370					_IFBAExit:
.3370	7a		ply				ply
.3371	60		rts				rts
.3372					IFloatBitwiseXor:
.3372	5a		phy				phy
.3373	20 89 33	jsr $3389			jsr 	IFPreProcessBitwise 		; set up everything.
.3376	d0 0f		bne $3387			bne 	_IFBAExit
.3378					_IFBALoop:
.3378	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.337b	55 00		eor $00,x			eor 	IM0,x
.337d	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3380	e8		inx				inx
.3381	c8		iny				iny
.3382	c0 03		cpy #$03			cpy 	#3
.3384	d0 f2		bne $3378			bne 	_IFBALoop
.3386	18		clc				clc
.3387					_IFBAExit:
.3387	7a		ply				ply
.3388	60		rts				rts
.3389					IFPreProcessBitwise:
.3389	a0 00		ldy #$00			ldy 	#0 							; set index.
.338b	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.338d	15 03		ora $03,x			ora 	IExp,x
.338f	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.3391	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.3393	38		sec				sec 								; carry set just in cases.
.3394	60		rts				rts
.3395					IFloatAbsoluteR0:
.3395	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.3397	29 bf		and #$bf			and 	#IFSign ^ 255
.3399	85 0b		sta $0b				sta 	IFR0+IExp
.339b	18		clc				clc
.339c	60		rts				rts
.339d					IFloatSquareRootR0:
.339d	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.339f	20 4b 37	jsr $374b			jsr 	IFloatCheckZero
.33a2	f0 2e		beq $33d2			beq 	_IFSRZero
.33a4	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.33a6	29 40		and #$40			and 	#IFSign
.33a8	d0 2f		bne $33d9			bne 	_IFSRFail
.33aa	20 89 37	jsr $3789			jsr 	IFloatNormalise 			; it will work better !
.33ad	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.33af	20 f4 36	jsr $36f4			jsr 	IFloatCopyToRegister
.33b2	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.33b4	20 a3 32	jsr $32a3			jsr 	IFMSignExtend 				; sign extended version of the exponent
.33b7	18		clc				clc
.33b8	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.33ba	85 0b		sta $0b				sta 	IFR0+IExp
.33bc	4a		lsr a				lsr 	a 							; which we can halve.
.33bd	38		sec				sec 								; convert back
.33be	e9 17		sbc #$17			sbc 	#23
.33c0	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.33c2	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.33c4	20 db 33	jsr $33db			jsr 	_IFSRNewton
.33c7	20 db 33	jsr $33db			jsr 	_IFSRNewton
.33ca	20 db 33	jsr $33db			jsr 	_IFSRNewton
.33cd	20 db 33	jsr $33db			jsr 	_IFSRNewton
.33d0	18		clc				clc
.33d1	60		rts				rts
.33d2					_IFSRZero:
.33d2	a2 08		ldx #$08			ldx 	#IFR0
.33d4	20 52 37	jsr $3752			jsr 	IFloatSetZero
.33d7	18		clc				clc
.33d8	60		rts				rts
.33d9					_IFSRFail:
.33d9	38		sec				sec
.33da	60		rts				rts
.33db					_IFSRNewton:
.33db	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.33dd	20 a1 36	jsr $36a1			jsr 	IFloatPushRx
.33e0	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.33e2	20 a1 36	jsr $36a1			jsr 	IFloatPushRx
.33e5	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.33e7	20 76 34	jsr $3476			jsr 	IFloatDivideFloat
.33ea	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.33ec	20 c2 36	jsr $36c2			jsr 	IFloatPullRx
.33ef	20 4a 31	jsr $314a			jsr 	IFloatAdd 					; now guess + original/guess
.33f2	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.33f4	20 81 37	jsr $3781			jsr 	IFloatShiftRight
.33f7	a2 0c		ldx #$0c			ldx 	#IFR1
.33f9	20 c2 36	jsr $36c2			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.33fc	60		rts				rts
.33fd					IFloatFractionalR0:
.33fd	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.33ff	29 3f		and #$3f			and 	#IFXMask
.3401	f0 17		beq $341a			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.3403	20 95 33	jsr $3395			jsr 	IFloatAbsoluteR0 			; absolute value R0
.3406	a2 08		ldx #$08			ldx 	#IFR0
.3408	20 89 37	jsr $3789			jsr 	IFloatNormalise 			; normalise R0
.340b	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.340d	20 f4 36	jsr $36f4			jsr 	IFloatCopyToRegister
.3410	20 53 34	jsr $3453			jsr 	IFloatIntegerR0 			; take integer part of R0
.3413	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.3415	20 43 31	jsr $3143			jsr 	IFloatSubtract
.3418	80 05		bra $341f			bra 	_FIPExit
.341a					_FIPZero:
.341a	a2 08		ldx #$08			ldx 	#IFR0
.341c	20 52 37	jsr $3752			jsr 	IFloatSetZero
.341f					_FIPExit:
.341f	18		clc				clc
.3420	60		rts				rts
.3421					IFloatCompare:
.3421	20 43 31	jsr $3143			jsr 	IFloatSubtract 				; subtract R0 from RX.
.3424	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.3426	05 0b		ora $0b				ora 	IFR0+IExp
.3428	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.342a	29 3f		and #$3f			and 	#IFXMask
.342c	d0 19		bne $3447			bne 	_IFCNonInteger
.342e	20 4b 37	jsr $374b			jsr 	IFloatCheckZero 			; check if zero
.3431	f0 0f		beq $3442			beq 	_IFCZero
.3433					_IFCReturnSign:
.3433	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.3435	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.3437	48		pha				pha
.3438	a9 01		lda #$01			lda 	#1
.343a	20 54 37	jsr $3754			jsr 	IFloatSetByte 				; return to +1
.343d	68		pla				pla 								; sign bit back
.343e	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.3440	18		clc				clc
.3441	60		rts				rts
.3442					_IFCZero:
.3442	20 52 37	jsr $3752			jsr 	IFloatSetZero
.3445	18		clc				clc
.3446	60		rts				rts
.3447					_IFCNonInteger:
.3447	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.3449	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.344b	05 09		ora $09				ora 	IFR0+IM1
.344d	05 0a		ora $0a				ora 	IFR0+IM2
.344f	f0 f1		beq $3442			beq 	_IFCZero 					; near enough !
.3451	80 e0		bra $3433			bra 	_IFCReturnSign 				; return the sign of the difference.
.3453					IFloatIntegerR0:
.3453	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.3455	29 3f		and #$3f			and 	#IFXMask
.3457	f0 1b		beq $3474			beq 	_FIPExit 					; if so do nothing
.3459	a2 08		ldx #$08			ldx 	#IFR0
.345b	20 89 37	jsr $3789			jsr 	IFloatNormalise 			; normalise
.345e	20 4b 37	jsr $374b			jsr 	IFloatCheckZero 			; is it zero ?
.3461	f0 0e		beq $3471			beq 	_FIPZero 					; if so return zero.
.3463					_FIPShift:
.3463	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.3465	29 20		and #$20			and 	#$20 						; still -ve
.3467	f0 0b		beq $3474			beq 	_FIPExit
.3469	20 81 37	jsr $3781			jsr 	IFloatShiftRight 			; shift mantissa right
.346c	20 ab 37	jsr $37ab			jsr 	IFloatIncExponent 			; bump exponent
.346f	80 f2		bra $3463			bra 	_FIPShift
.3471					_FIPZero:
.3471	20 52 37	jsr $3752			jsr 	IFloatSetZero
.3474					_FIPExit:
.3474	18		clc				clc
.3475	60		rts				rts
.3476					IFloatDivideFloat:
.3476	8e e1 0c	stx $0ce1			stx 	IFTarget  					; this is s1, s0 = R0
.3479	20 ac 32	jsr $32ac			jsr 	IFCalculateNewSign 			; calculate sign of result
.347c	20 89 37	jsr $3789			jsr 	IFloatNormalise 			; normalise RX
.347f	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.3481	20 89 37	jsr $3789			jsr 	IFloatNormalise
.3484	20 4b 37	jsr $374b			jsr 	IFloatCheckZero
.3487	f0 56		beq $34df			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.3489	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.348b	20 a3 32	jsr $32a3			jsr 	IFMSignExtend
.348e	8d e2 0c	sta $0ce2			sta 	IFNewExponent
.3491	ae e1 0c	ldx $0ce1			ldx 	IFTarget 					; calculate s1.exponent
.3494	b5 03		lda $03,x			lda 	IExp,x
.3496	20 a3 32	jsr $32a3			jsr 	IFMSignExtend
.3499	38		sec				sec
.349a	ed e2 0c	sbc $0ce2			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.349d	38		sec				sec
.349e	e9 17		sbc #$17			sbc 	#23
.34a0	8d e2 0c	sta $0ce2			sta 	IFNewExponent
.34a3	20 e1 34	jsr $34e1			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.34a6	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.34a8	10 08		bpl $34b2			bpl 	_IFDFNoShiftResult
.34aa	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.34ac	20 81 37	jsr $3781			jsr 	IFloatShiftRight
.34af	ee e2 0c	inc $0ce2			inc 	IFNewExponent
.34b2					_IFDFNoShiftResult:
.34b2	ad e2 0c	lda $0ce2			lda 	IFNewExponent 				; underflow/overflow check.
.34b5	30 06		bmi $34bd			bmi 	_IFDFCheckUnderflow
.34b7	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.34b9	b0 24		bcs $34df			bcs 	_IFDFDivZero
.34bb	80 11		bra $34ce			bra		_IFDFExit
.34bd					_IFDFCheckUnderflow:
.34bd	ad e2 0c	lda $0ce2			lda 	IFNewExponent 				; shift into a legal exponent.
.34c0	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.34c2	b0 0a		bcs $34ce			bcs 	_IFDFExit
.34c4	ee e2 0c	inc $0ce2			inc 	IFNewExponent
.34c7	a2 14		ldx #$14			ldx 	#IFRTemp
.34c9	20 81 37	jsr $3781			jsr 	IFloatShiftRight
.34cc	80 ef		bra $34bd			bra 	_IFDFCheckUnderflow
.34ce					_IFDFExit:
.34ce	ad e2 0c	lda $0ce2			lda 	IFNewExponent 				; combine exponent and sign.
.34d1	29 3f		and #$3f			and 	#IFXMask
.34d3	0d e3 0c	ora $0ce3			ora 	IFNewSign
.34d6	85 17		sta $17				sta 	IFRTemp+IExp
.34d8	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.34da	20 e3 36	jsr $36e3			jsr 	IFloatCopyFromRegister
.34dd	18		clc				clc
.34de	60		rts				rts
.34df					_IFDFDivZero:
.34df	38		sec				sec
.34e0	60		rts				rts
.34e1					IFloatDivideSupport:
.34e1	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.34e3	20 52 37	jsr $3752			jsr 	IFloatSetZero
.34e6	5a		phy				phy 								; main division loop x 23
.34e7	a0 17		ldy #$17			ldy 	#23
.34e9					_IFDSLoop:
.34e9	20 1a 33	jsr $331a			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.34ec	20 0e 33	jsr $330e			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.34ef	88		dey				dey
.34f0	d0 f7		bne $34e9			bne 	_IFDSLoop 					; do it 24 times
.34f2	7a		ply				ply
.34f3	60		rts				rts
.34f4					IFloatIntegerToStringR0:
.34f4	8d e4 0c	sta $0ce4			sta 	IFBase 						; save base to use.
.34f7	20 d3 37	jsr $37d3			jsr 	IFloatBufferReset			; empty buffer
.34fa	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.34fc	29 3f		and #$3f			and 	#IFXMask
.34fe	d0 1d		bne $351d			bne 	_IFIFail
.3500	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.3502	20 4b 37	jsr $374b			jsr 	IFloatCheckZero
.3505	f0 0e		beq $3515			beq 	_IFINotNegative
.3507	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.3509	29 40		and #$40			and 	#IFSign
.350b	f0 08		beq $3515			beq 	_IFINotNegative
.350d	a9 2d		lda #$2d			lda 	#"-"						; output -
.350f	20 e2 37	jsr $37e2			jsr 	IFloatBufferWrite
.3512	20 5d 37	jsr $375d			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.3515					_IFINotNegative:
.3515	20 1f 35	jsr $351f			jsr 	_IFIRecursiveConvert 		; start converting
.3518	20 da 37	jsr $37da			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.351b	18		clc				clc
.351c	60		rts				rts
.351d					_IFIFail:
.351d	38		sec				sec
.351e	60		rts				rts
.351f					_IFIRecursiveConvert:
.351f	a2 0c		ldx #$0c			ldx 	#IFR1
.3521	20 f4 36	jsr $36f4			jsr 	IFloatCopyToRegister 		; R0->R1
.3524	a2 08		ldx #$08			ldx 	#IFR0
.3526	ad e4 0c	lda $0ce4			lda 	IFBase 						; Base -> R0
.3529	20 54 37	jsr $3754			jsr 	IFloatSetByte
.352c	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.352e	20 b6 32	jsr $32b6			jsr 	IFloatDivideInteger
.3531	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.3533	20 4b 37	jsr $374b			jsr 	IFloatCheckZero
.3536	f0 09		beq $3541			beq 	_IFIOutDigit
.3538	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.353a	48		pha				pha
.353b	20 1f 35	jsr $351f			jsr 	_IFIRecursiveConvert 		; convert the divide result
.353e	68		pla				pla
.353f	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.3541					_IFIOutDigit:
.3541	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.3543	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.3545	90 02		bcc $3549			bcc 	_IFINotHex
.3547	69 06		adc #$06			adc 	#6
.3549					_IFINotHex:
.3549	69 30		adc #$30			adc 	#48
.354b	20 e2 37	jsr $37e2			jsr 	IFloatBufferWrite 			; write character to buffer.
.354e	60		rts				rts
.0ce4					IFBase:
>0ce4							.fill 	1
.354f					IFloatFloatToStringR0:
.354f	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.3551	20 a1 36	jsr $36a1			jsr 	IFloatPushRx
.3554	20 f4 36	jsr $36f4			jsr 	IFloatCopyToRegister
.3557	20 53 34	jsr $3453			jsr 	IFloatIntegerR0				; make R0 integer
.355a	a9 0a		lda #$0a			lda 	#10 						; base 10.
.355c	20 f4 34	jsr $34f4			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.355f	9c e5 0c	stz $0ce5			stz 	IFloatDecimalCount 			; zero the decimal count.
.3562	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.3564	29 3f		and #$3f			and 	#IFXMask
.3566	f0 44		beq $35ac			beq 	_IFFSExit
.3568					_IFloatFracLoop:
.3568	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.356a	20 e3 36	jsr $36e3			jsr 	IFloatCopyFromRegister
.356d	20 fd 33	jsr $33fd			jsr 	IFloatFractionalR0
.3570	20 89 37	jsr $3789			jsr 	IFloatNormalise
.3573	a2 10		ldx #$10			ldx 	#IFR2
.3575	20 f4 36	jsr $36f4			jsr 	IFloatCopyToRegister 		; copy to back R2
.3578	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.357a	a9 0a		lda #$0a			lda 	#10
.357c	20 54 37	jsr $3754			jsr 	IFloatSetByte
.357f	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.3581	20 f4 31	jsr $31f4			jsr 	IFloatMultiply
.3584	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.3586	20 f4 36	jsr $36f4			jsr 	IFloatCopyToRegister
.3589	20 53 34	jsr $3453			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.358c	ad e5 0c	lda $0ce5			lda 	IFloatDecimalCount 			; done 3 dp, no more
.358f	c9 03		cmp #$03			cmp 	#3
.3591	f0 16		beq $35a9			beq 	_IFFSExitStripZero
.3593	ad e5 0c	lda $0ce5			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.3596	d0 05		bne $359d			bne 	_IFloatNotFirst
.3598	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.359a	20 e2 37	jsr $37e2			jsr 	IFloatBufferWrite
.359d					_IFloatNotFirst:
.359d	ee e5 0c	inc $0ce5			inc 	IFloatDecimalCount
.35a0	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.35a2	09 30		ora #$30			ora 	#"0"						; ASCII
.35a4	20 e2 37	jsr $37e2			jsr 	IFloatBufferWrite 			; write to the buffer.
.35a7	80 bf		bra $3568			bra 	_IFloatFracLoop
.35a9					_IFFSExitStripZero:
.35a9	20 f1 37	jsr $37f1			jsr 	IFloatStripTrailingZeros
.35ac					_IFFSExit:
.35ac	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.35ae	20 c2 36	jsr $36c2			jsr 	IFloatPullRx
.35b1	20 da 37	jsr $37da			jsr 	IFloatGetBufferAddress
.35b4	18		clc				clc
.35b5	60		rts				rts
.0ce5					IFloatDecimalCount:
>0ce5							.fill 	1
.35b6					IFloatStringToFloatR0:
.35b6	8d e6 0c	sta $0ce6			sta 	IFCount 					; save length and positions out.
.35b9	86 20		stx $20				stx 	iTemp0
.35bb	84 21		sty $21				sty 	iTemp0+1
.35bd	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.35bf	20 52 37	jsr $3752			jsr 	IFloatSetZero
.35c2	9c e7 0c	stz $0ce7			stz 	IFSignFlag 					; clear the sign flag
.35c5	20 52 36	jsr $3652			jsr 	IFSTFGetNext 				; get first
.35c8	f0 1b		beq $35e5			beq 	_IFSTFFail 					; no character, fail.
.35ca	90 10		bcc $35dc			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.35cc	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.35ce	d0 15		bne $35e5			bne 	_IFSTFFail
.35d0	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.35d2	8d e7 0c	sta $0ce7			sta 	IFSignFlag
.35d5					_IFSTFLoop:
.35d5	20 52 36	jsr $3652			jsr 	IFSTFGetNext 				; get next character
.35d8	b0 0b		bcs $35e5			bcs 	_IFSTFFail 					; bad character.
.35da	f0 11		beq $35ed			beq 	_IFSTFExit 					; end of data
.35dc					_IFSTFHaveChar:
.35dc	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.35de	f0 08		beq $35e8			beq 	_IFSTFDecimal
.35e0	20 76 36	jsr $3676			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.35e3	80 f0		bra $35d5			bra 	_IFSTFLoop 					; keep going until . or end.
.35e5					_IFSTFFail:
.35e5	38		sec				sec
.35e6	80 0d		bra $35f5			bra 	_IFSTFReturn
.35e8					_IFSTFDecimal:
.35e8	20 fd 35	jsr $35fd			jsr 	IFSTFDecimal 				; call the decimal places code.
.35eb	b0 08		bcs $35f5			bcs 	_IFSTFReturn 				; error
.35ed					_IFSTFExit:
.35ed	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.35ef	0d e7 0c	ora $0ce7			ora 	IFSignFlag
.35f2	85 0b		sta $0b				sta 	IFR0+IExp
.35f4	18		clc				clc
.35f5					_IFSTFReturn:
.35f5	60		rts				rts
.35f6					IFloatAddDecimalToR0:
.35f6	8d e6 0c	sta $0ce6			sta 	IFCount 					; save it out.
.35f9	86 20		stx $20				stx 	iTemp0
.35fb	84 21		sty $21				sty 	iTemp0+1
.35fd					IFSTFDecimal:
.35fd	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.35ff	20 a1 36	jsr $36a1			jsr 	IFloatPushRx
.3602	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.3604	20 52 37	jsr $3752			jsr 	IFloatSetZero
.3607	9c e8 0c	stz $0ce8			stz 	IFDecimalPlaces 			; zero DP.
.360a					_IFSTDLoop:
.360a	20 52 36	jsr $3652			jsr 	IFSTFGetNext 				; get next
.360d	b0 41		bcs $3650			bcs 	_IFSTFFail2 				; bad character.
.360f	f0 11		beq $3622			beq 	_IFSTFComplete 				; end of data, work out the result.
.3611	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.3613	f0 39		beq $364e			beq 	_IFSTFExit2
.3615	20 76 36	jsr $3676			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.3618	ee e8 0c	inc $0ce8			inc 	IFDecimalPlaces 			; count decimals
.361b	ad e8 0c	lda $0ce8			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.361e	c9 03		cmp #$03			cmp 	#3
.3620	90 e8		bcc $360a			bcc 	_IFSTDLoop
.3622					_IFSTFComplete:
.3622	ad e8 0c	lda $0ce8			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.3625	f0 27		beq $364e			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.3627	3a		dec a				dec 	a 							; table indexed from 1.
.3628	0a		asl a				asl 	a
.3629	0a		asl a				asl 	a
.362a	aa		tax				tax
.362b	bd 8d 36	lda $368d,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.362e	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.3630	bd 8e 36	lda $368e,x			lda 	TableTen+1,x
.3633	85 0d		sta $0d				sta  	IFR1+IM1
.3635	bd 8f 36	lda $368f,x			lda 	TableTen+2,x
.3638	85 0e		sta $0e				sta  	IFR1+IM2
.363a	bd 90 36	lda $3690,x			lda 	TableTen+3,x
.363d	85 0f		sta $0f				sta  	IFR1+IExp
.363f	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.3641	20 f4 31	jsr $31f4			jsr 	IFloatMultiply
.3644	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.3646	20 c2 36	jsr $36c2			jsr 	IFloatPullRx
.3649	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.364b	20 4a 31	jsr $314a			jsr 	IFloatAdd
.364e					_IFSTFExit2:
.364e	18		clc				clc
.364f	60		rts				rts
.3650					_IFSTFFail2:
.3650	38		sec				sec
.3651	60		rts				rts
.3652					IFSTFGetNext:
.3652	ad e6 0c	lda $0ce6			lda 	IFCount  					; if count is zero, return with Z set.
.3655	f0 19		beq $3670			beq 	_IFSTFReturnOk
.3657	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3659	e6 20		inc $20				inc 	iTemp0 						; point at next.
.365b	d0 02		bne $365f			bne 	_IFSTFGNNoCarry
.365d	e6 21		inc $21				inc 	iTemp0+1
.365f					_IFSTFGNNoCarry:
.365f	ce e6 0c	dec $0ce6			dec 	IFCount 					; dec count.
.3662	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.3664	f0 08		beq $366e			beq 	_IFSTFGOkay
.3666	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3668	90 08		bcc $3672			bcc 	_IFSTFGFail
.366a	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.366c	b0 04		bcs $3672			bcs 	_IFSTFGFail
.366e					_IFSTFGOkay:
.366e	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3670					_IFSTFReturnOk:
.3670	18		clc				clc
.3671	60		rts				rts
.3672					_IFSTFGFail:
.3672	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3674	38		sec				sec
.3675	60		rts				rts
.3676					IFSTFAddR0:
.3676	29 0f		and #$0f			and 	#15 						; to int value
.3678	48		pha				pha 								; save it.
.3679	a9 0a		lda #$0a			lda 	#10
.367b	a2 0c		ldx #$0c			ldx 	#IFR1
.367d	20 54 37	jsr $3754			jsr 	IFloatSetByte
.3680	20 f4 31	jsr $31f4			jsr 	IFloatMultiply
.3683	68		pla				pla
.3684	a2 0c		ldx #$0c			ldx 	#IFR1
.3686	20 54 37	jsr $3754			jsr 	IFloatSetByte
.3689	20 4a 31	jsr $314a			jsr 	IFloatAdd
.368c	60		rts				rts
.0ce6					IFCount:
>0ce6							.fill 	1
.0ce7					IFSignFlag:
>0ce7							.fill 	1
.0ce8					IFDecimalPlaces:
>0ce8							.fill 	1
.368d					TableTen:
>368d	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3691	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>3695	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3699	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>369d	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.36a1					IFloatPushRx:
.36a1	5a		phy				phy
.36a2	ac e9 0c	ldy $0ce9			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.36a5	b5 00		lda $00,x			lda 	IM0,x
.36a7	99 ea 0c	sta $0cea,y			sta 	IFStack,y
.36aa	b5 01		lda $01,x			lda 	IM1,x
.36ac	99 eb 0c	sta $0ceb,y			sta 	IFStack+1,y
.36af	b5 02		lda $02,x			lda 	IM2,x
.36b1	99 ec 0c	sta $0cec,y			sta 	IFStack+2,y
.36b4	b5 03		lda $03,x			lda 	IExp,x
.36b6	99 ed 0c	sta $0ced,y			sta 	IFStack+3,y
.36b9	c8		iny				iny
.36ba	c8		iny				iny
.36bb	c8		iny				iny
.36bc	c8		iny				iny
.36bd	8c e9 0c	sty $0ce9			sty 	IFStackIndex 				; update SP
.36c0	7a		ply				ply
.36c1	60		rts				rts
.36c2					IFloatPullRx:
.36c2	5a		phy				phy
.36c3	ac e9 0c	ldy $0ce9			ldy 	IFStackIndex	 			; decrement SP
.36c6	88		dey				dey
.36c7	88		dey				dey
.36c8	88		dey				dey
.36c9	88		dey				dey
.36ca	b9 ea 0c	lda $0cea,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.36cd	95 00		sta $00,x			sta 	IM0,x
.36cf	b9 eb 0c	lda $0ceb,y			lda 	IFStack+1,y
.36d2	95 01		sta $01,x			sta 	IM1,x
.36d4	b9 ec 0c	lda $0cec,y			lda 	IFStack+2,y
.36d7	95 02		sta $02,x			sta 	IM2,x
.36d9	b9 ed 0c	lda $0ced,y			lda 	IFStack+3,y
.36dc	95 03		sta $03,x			sta 	IExp,x
.36de	8c e9 0c	sty $0ce9			sty 	IFStackIndex 				; update SP
.36e1	7a		ply				ply
.36e2	60		rts				rts
.0ce9					IFStackIndex:
>0ce9							.fill 	1
.0cea					IFStack:
>0cea							.fill 	16*4
.36e3					IFloatCopyFromRegister:
.36e3	b5 00		lda $00,x			lda 	0,x
.36e5	85 08		sta $08				sta 	IFR0
.36e7	b5 01		lda $01,x			lda 	1,x
.36e9	85 09		sta $09				sta 	IFR0+1
.36eb	b5 02		lda $02,x			lda 	2,x
.36ed	85 0a		sta $0a				sta 	IFR0+2
.36ef	b5 03		lda $03,x			lda 	3,x
.36f1	85 0b		sta $0b				sta 	IFR0+3
.36f3	60		rts				rts
.36f4					IFloatCopyToRegister:
.36f4	a5 08		lda $08				lda 	IFR0
.36f6	95 00		sta $00,x			sta 	0,x
.36f8	a5 09		lda $09				lda 	IFR0+1
.36fa	95 01		sta $01,x			sta 	1,x
.36fc	a5 0a		lda $0a				lda 	IFR0+2
.36fe	95 02		sta $02,x			sta 	2,x
.3700	a5 0b		lda $0b				lda 	IFR0+3
.3702	95 03		sta $03,x			sta 	3,x
.3704	60		rts				rts
.3705					IFloatLoadInline:
.3705	68		pla				pla 								; pop address off to iTemp0
.3706	85 20		sta $20				sta 	iTemp0
.3708	68		pla				pla
.3709	85 21		sta $21				sta 	iTemp0+1
.370b	a0 01		ldy #$01			ldy 	#1
.370d	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.370f	95 00		sta $00,x			sta 	0,x
.3711	c8		iny				iny
.3712	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.3714	95 01		sta $01,x			sta 	1,x
.3716	c8		iny				iny
.3717	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.3719	95 02		sta $02,x			sta 	2,x
.371b	c8		iny				iny
.371c	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.371e	95 03		sta $03,x			sta 	3,x
.3720	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.3721	a5 20		lda $20				lda 	iTemp0
.3723	69 05		adc #$05			adc 	#5
.3725	85 20		sta $20				sta 	iTemp0
.3727	90 02		bcc $372b			bcc 	_IFLINoCarry
.3729	e6 21		inc $21				inc 	iTemp0+1
.372b					_IFLINoCarry:
.372b	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.372e					IFloatMultiply8BitRx:
.372e	5a		phy		        phy
.372f	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3731	a4 08		ldy $08		        ldy     IFR0+IM0
.3733	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.3734	85 08		sta $08		        sta     IFR0+IM0
.3736	84 09		sty $09		        sty     IFR0+IM1
.3738	a9 00		lda #$00	        lda     #0
.373a	a0 08		ldy #$08	        ldy     #8
.373c					_IFMLoop:
.373c	90 03		bcc $3741	        bcc     _IFMNoAdd
.373e	18		clc		        clc
.373f	65 09		adc $09		        adc     IFR0+IM1
.3741					_IFMNoAdd:
.3741	6a		ror a		        ror     a
.3742	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.3744	88		dey		        dey
.3745	d0 f5		bne $373c	        bne     _IFMLoop
.3747	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3749	7a		ply		        ply
.374a	60		rts		        rts
.374b					IFloatCheckZero:
.374b	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.374d	15 01		ora $01,x			ora 	IM1,x
.374f	15 02		ora $02,x			ora 	IM2,x
.3751	60		rts				rts
.3752					IFloatSetZero:
.3752	a9 00		lda #$00			lda 	#0
.3754					IFloatSetByte:
.3754	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3756	74 01		stz $01,x			stz 	IM1,x
.3758	74 02		stz $02,x			stz 	IM2,x
.375a	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.375c	60		rts				rts
.375d					IFloatNegate:
.375d	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.375f	49 40		eor #$40			eor 	#IFSign
.3761	95 03		sta $03,x			sta 	IExp,x
.3763	18		clc				clc
.3764	60		rts				rts
.3765					IFloatMantissaNegate:
.3765	38		sec				sec 								; when you want a real 2's complement negative value.
.3766	a9 00		lda #$00			lda 	#0
.3768	f5 00		sbc $00,x			sbc 	IM0,x
.376a	95 00		sta $00,x			sta 	IM0,x
.376c	a9 00		lda #$00			lda 	#0
.376e	f5 01		sbc $01,x			sbc 	IM1,x
.3770	95 01		sta $01,x			sta 	IM1,x
.3772	a9 00		lda #$00			lda 	#0
.3774	f5 02		sbc $02,x			sbc 	IM2,x
.3776	95 02		sta $02,x			sta 	IM2,x
.3778	60		rts				rts
.3779					IFloatShiftLeft:
.3779	18		clc				clc
.377a					IFloatRotateLeft:
.377a	36 00		rol $00,x			rol 	IM0,x
.377c	36 01		rol $01,x			rol 	IM1,x
.377e	36 02		rol $02,x			rol 	IM2,x
.3780	60		rts				rts
.3781					IFloatShiftRight:
.3781	18		clc				clc
.3782					IFloatRotateRight:
.3782	76 02		ror $02,x			ror 	IM2,x
.3784	76 01		ror $01,x			ror 	IM1,x
.3786	76 00		ror $00,x			ror 	IM0,x
.3788	60		rts				rts
.3789					IFloatNormalise:
.3789	20 4b 37	jsr $374b			jsr 	IFloatCheckZero 			; is it zero
.378c	f0 18		beq $37a6			beq 	_IFNExitZero 				; if so exit
.378e					_IFNLoop:
.378e	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3790	29 c0		and #$c0			and 	#$C0
.3792	c9 40		cmp #$40			cmp 	#$40
.3794	f0 13		beq $37a9			beq 	_IFNExitOkay 				; if so , then we are done.
.3796	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3798	29 3f		and #$3f			and 	#$3F
.379a	c9 20		cmp #$20			cmp 	#$20
.379c	f0 0b		beq $37a9			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.379e	20 bf 37	jsr $37bf			jsr 	IFloatDecExponent
.37a1	20 79 37	jsr $3779			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.37a4	80 e8		bra $378e			bra 	_IFNLoop
.37a6					_IFNExitZero:
.37a6	20 52 37	jsr $3752			jsr 	IFloatSetZero 				; set the result to zero
.37a9					_IFNExitOkay:
.37a9	18		clc				clc  								; return with CC.
.37aa	60		rts				rts
.37ab					IFloatIncExponent:
.37ab	b5 03		lda $03,x			lda 	IExp,x
.37ad	48		pha				pha
.37ae	29 c0		and #$c0			and 	#$C0
.37b0	8d 2a 0d	sta $0d2a			sta 	IFXTemp
.37b3	68		pla				pla
.37b4	1a		inc a				inc 	a
.37b5	29 3f		and #$3f			and 	#$3F
.37b7	48		pha				pha
.37b8	0d 2a 0d	ora $0d2a			ora 	IFXTemp
.37bb	95 03		sta $03,x			sta 	IExp,x
.37bd	68		pla				pla
.37be	60		rts				rts
.37bf					IFloatDecExponent:
.37bf	b5 03		lda $03,x			lda 	IExp,x
.37c1	48		pha				pha
.37c2	29 c0		and #$c0			and 	#$C0
.37c4	8d 2a 0d	sta $0d2a			sta 	IFXTemp
.37c7	68		pla				pla
.37c8	3a		dec a				dec 	a
.37c9	29 3f		and #$3f			and 	#$3F
.37cb	48		pha				pha
.37cc	0d 2a 0d	ora $0d2a			ora 	IFXTemp
.37cf	95 03		sta $03,x			sta 	IExp,x
.37d1	68		pla				pla
.37d2	60		rts				rts
.0d2a					IFXTemp:
>0d2a							.fill 	1
.37d3					IFloatBufferReset:
.37d3	9c 2b 0d	stz $0d2b			stz 	IFBufferCount
.37d6	9c 2c 0d	stz $0d2c			stz 	IFBuffer
.37d9	60		rts				rts
.37da					IFloatGetBufferAddress:
.37da	a0 0d		ldy #$0d			ldy 	#(IFBufferCount >> 8)
.37dc	a2 2b		ldx #$2b			ldx 	#(IFBufferCount & $FF)
.37de	ad 2b 0d	lda $0d2b			lda 	IFBufferCount
.37e1	60		rts				rts
.37e2					IFloatBufferWrite:
.37e2	da		phx				phx
.37e3	ae 2b 0d	ldx $0d2b			ldx 	IFBufferCount
.37e6	9d 2c 0d	sta $0d2c,x			sta 	IFBuffer,x
.37e9	9e 2d 0d	stz $0d2d,x			stz 	IFBuffer+1,x
.37ec	ee 2b 0d	inc $0d2b			inc 	IFBufferCount
.37ef	fa		plx				plx
.37f0	60		rts				rts
.37f1					IFloatStripTrailingZeros:
.37f1	ae 2b 0d	ldx $0d2b			ldx 	IFBufferCount
.37f4	bd 2b 0d	lda $0d2b,x			lda 	IFBuffer-1,x
.37f7	c9 30		cmp #$30			cmp		#"0"
.37f9	d0 0f		bne $380a			bne 	_IFSTExit
.37fb	bd 2a 0d	lda $0d2a,x			lda 	IFBuffer-2,x
.37fe	c9 2e		cmp #$2e			cmp 	#"."
.3800	f0 08		beq $380a			beq 	_IFSTExit
.3802	ce 2b 0d	dec $0d2b			dec 	IFBufferCount
.3805	9e 2b 0d	stz $0d2b,x			stz 	IFBuffer-1,x
.3808	80 e7		bra $37f1			bra 	IFloatStripTrailingZeros
.380a					_IFSTExit:
.380a	60		rts				rts
.0d2b					IFBufferCount:
>0d2b							.fill 	1
.0d2c					IFBuffer:
>0d2c							.fill 	25
.380b					IFloatCheckRange:
.380b	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.380d	09 40		ora #$40			ora 	#IFSign
.380f	85 0b		sta $0b				sta 	IFR0+IExp
.3811	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.3813	20 4a 31	jsr $314a			jsr 	IFloatAdd 					; add allowed to error.
.3816	a2 08		ldx #$08			ldx 	#IFR0
.3818	20 4b 37	jsr $374b			jsr 	IFloatCheckZero 			; error if < 0
.381b	f0 06		beq $3823			beq 	_IFAOkay
.381d	a5 0b		lda $0b				lda 	IFR0+IExp
.381f	29 40		and #$40			and 	#IFSign
.3821	d0 01		bne $3824			bne 	_IFAFail
.3823					_IFAOkay:
.3823	60		rts				rts
.3824					_IFAFail:
.3824	38		sec				sec
.3825	68		pla				pla 								; get address - 2
.3826	e9 02		sbc #$02			sbc 	#2
.3828	aa		tax				tax
.3829	68		pla				pla
.382a	e9 00		sbc #$00			sbc 	#0
.382c	a8		tay				tay
.382d	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.382f					_IFAStop:
>382f	db						.byte 	$DB 						; display an error AA ADR ADR
.3830	80 fd		bra $382f			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
