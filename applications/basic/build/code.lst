
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$6000" -D "ENDMEMORY=\$B000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Tue Jun  6 09:00:05 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$6000					BASICCODE=$6000
=$b000					ENDMEMORY=$B000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					rTemp1:
>000a							.fill 	2
.000c					iTemp0:
>000c							.fill 	2
.000e					IFR0:
>000e							.fill 	4
.0012					IFR1:
>0012							.fill 	4
.0016					IFR2:
>0016							.fill 	4
.001a					IFRTemp:
>001a							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSRKOriginal:
>0237							.fill 	1
=192					OSTextBufferSize = 192
.0238					OSXEdit:
>0238							.fill 	1
.0239					OSYEdit:
>0239							.fill 	1
.023a					OSEditWidth:
>023a							.fill 	1
.023b					OSEditPos:
>023b							.fill 	1
.023c					OSEditScroll:
>023c							.fill 	1
.023d					OSEditLength:
>023d							.fill 	1
.023e					OSEditBuffer:
>023e							.fill 	OSTextBufferSize+1
>02ff							.fill 	32
>031f							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd9					OSEditLine               = $ffd9 ; Edit line, return completion in A, line in YX
=$ffdc					OSEditNewLine            = $ffdc ; Edit line, start clear.
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSWriteStringZ           = $ffe2 ; Write ASCIIZ string YX to screen
=$ffe5					OSGetScreenSize          = $ffe5 ; Get size of screen to XY
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 b0		ldy #$b0			ldy 	#ENDMEMORY >> 8
.1004	20 a6 1d	jsr $1da6			jsr 	PGMSetBaseAddress
.1007	20 97 28	jsr $2897			jsr 	IFInitialise 				; setup math library
.100a	4c 6c 13	jmp $136c			jmp 	Command_RUN
.100d	4c 56 13	jmp $1356			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001e					codePtr:
>001e							.fill 	2
.0020					zTemp0:
>0020							.fill 	2
.0022					zTemp1:
>0022							.fill 	2
.0024					zTemp2:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1010					Command_ASSERT:
.1010	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber
.1013	a2 0e		ldx #$0e			ldx 	#IFR0
.1015	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero
.1018	f0 01		beq $101b			beq 	_CAFail
.101a	60		rts				rts
.101b					_CAFail:
.101b	4c c7 23	jmp $23c7		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101e					Command_CLEAR:
.101e	20 b9 1d	jsr $1db9			jsr 	PGMEndProgram 				; end program => zTemp0
.1021	64 26		stz $26				stz 	freeMemory 					; start on next free page
.1023	a5 21		lda $21				lda 	zTemp0+1
.1025	1a		inc a				inc 	a
.1026	85 27		sta $27				sta 	freeMemory+1
.1028	20 36 28	jsr $2836			jsr 	VARClearHashTables
.102b	ad 14 05	lda $0514			lda 	PGMEndMemoryHigh
.102e	20 73 25	jsr $2573			jsr 	StackReset
.1031	20 d2 25	jsr $25d2			jsr 	StringSystemInitialise
.1034	20 de 22	jsr $22de			jsr 	ScanProcedures
.1037	60		rts				rts
.1038					AllocateMemory:
.1038	5a		phy				phy 								; save Y
.1039	a4 26		ldy $26				ldy 	freeMemory 					; save addr.low
.103b	5a		phy				phy
.103c	a4 27		ldy $27				ldy 	freeMemory+1 				; save addr.high
.103e	5a		phy				phy
.103f	a8		tay				tay 								; count is now in XY
.1040					_AllocateLoop:
.1040	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1042	d0 04		bne $1048			bne 	_AllocateOne
.1044	c0 00		cpy #$00			cpy 	#0
.1046	f0 15		beq $105d			beq 	_AllocateExit
.1048					_AllocateOne:
.1048	a9 00		lda #$00			lda 	#0 							; zero byte
.104a	92 26		sta ($26)			sta 	(freeMemory)
.104c	e6 26		inc $26				inc 	freeMemory 					; bump pointer
.104e	d0 05		bne $1055			bne 	_AllocateSkipCarry
.1050	e6 27		inc $27				inc 	freeMemory+1
.1052	20 61 10	jsr $1061			jsr 	ClearCheckMemory
.1055					_AllocateSkipCarry:
.1055	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1057	d0 01		bne $105a			bne 	_AllocateSkipBorrow
.1059	ca		dex				dex
.105a					_AllocateSkipBorrow:
.105a	88		dey				dey
.105b	80 e3		bra $1040			bra 	_AllocateLoop
.105d					_AllocateExit:
.105d	fa		plx				plx 								; restore address
.105e	68		pla				pla
.105f	7a		ply				ply 								; restore Y
.1060	60		rts				rts
.1061					ClearCheckMemory:
.1061	a5 27		lda $27				lda 	freeMemory+1
.1063	1a		inc a				inc 	a
.1064	1a		inc a				inc 	a
.1065	cd 1c 06	cmp $061c			cmp 	stringMemory+1
.1068	b0 01		bcs $106b			bcs  	_CCMError
.106a	60		rts				rts
.106b					_CCMError:
.106b	4c 61 24	jmp $2461		jmp	ErrorV_memory
.0026					freeMemory:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.106e					CommandDIM:
.106e	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.1070	29 c0		and #$c0			and 	#$C0
.1072	c9 40		cmp #$40			cmp 	#$40
.1074	d0 39		bne $10af			bne 	_CDSyntax
.1076	20 ed 27	jsr $27ed			jsr 	VARGetInfo 					; get information
.1079	ad 24 06	lda $0624			lda 	VARType 					; check array.
.107c	29 02		and #$02			and 	#2
.107e	f0 2f		beq $10af			beq 	_CDSyntax
.1080	20 9f 27	jsr $279f			jsr 	VARFind 					; does it already exist
.1083	b0 2d		bcs $10b2			bcs 	_CDExists
.1085	20 4b 27	jsr $274b			jsr 	VARCreate 					; create it - returns data ptr in XA
.1088	da		phx				phx 								; save target address
.1089	48		pha				pha
.108a	ad 24 06	lda $0624			lda 	VARType 					; type ID.
.108d	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.108f	20 b5 10	jsr $10b5			jsr 	CreateArray 				; create array to XA
.1092	84 22		sty $22				sty 	zTemp1 						; save Y
.1094	7a		ply				ply 								; restore target to zTemp0
.1095	84 20		sty $20				sty 	zTemp0
.1097	7a		ply				ply
.1098	84 21		sty $21				sty 	zTemp0+1
.109a	92 20		sta ($20)			sta 	(zTemp0) 					; save new array
.109c	a0 01		ldy #$01			ldy 	#1
.109e	8a		txa				txa
.109f	91 20		sta ($20),y			sta 	(zTemp0),y
.10a1	a4 22		ldy $22				ldy 	zTemp1 						; restore zTemp1
.10a3	20 04 25	jsr $2504			jsr 	ERRCheckRParen 				; check )
.10a6	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10a8	c8		iny				iny
.10a9	c9 99		cmp #$99			cmp 	#PR_COMMA
.10ab	f0 c1		beq $106e			beq 	CommandDIM
.10ad	88		dey				dey
.10ae	60		rts				rts
.10af					_CDSyntax:
.10af	4c 71 23	jmp $2371		jmp	ErrorV_syntax
.10b2					_CDExists:
.10b2	4c 39 24	jmp $2439		jmp	ErrorV_redefine
.10b5					CreateArray:
.10b5	8d 03 05	sta $0503			sta 	CAType						; save type
.10b8	20 b2 15	jsr $15b2			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10bb	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10bd	c9 99		cmp #$99			cmp 	#PR_COMMA
.10bf	f0 04		beq $10c5			beq 	_CATwoDimensions
.10c1	20 11 11	jsr $1111			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10c4	60		rts				rts
.10c5					_CATwoDimensions:
.10c5	a5 0f		lda $0f				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10c7	8d 05 05	sta $0505			sta 	CADim1+1
.10ca	a5 0e		lda $0e				lda 	IFR0+IM0
.10cc	8d 04 05	sta $0504			sta 	CADim1+0
.10cf	20 0c 25	jsr $250c			jsr 	ERRCheckComma 				; check comma
.10d2	20 b2 15	jsr $15b2			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10d5	5a		phy				phy 								; save Y position
.10d6	18		clc				clc 								; allocate the outer array of pointers.
.10d7	ae 05 05	ldx $0505			ldx 	CADim1+1
.10da	ad 04 05	lda $0504			lda 	CADim1
.10dd	20 50 11	jsr $1150			jsr 	CSAAllocate 				; allocate the outer array
.10e0	da		phx				phx									; save this address on the stack
.10e1	48		pha				pha
.10e2	86 25		stx $25				stx 	zTemp2+1					; and in zTemp2
.10e4	85 24		sta $24				sta 	zTemp2
.10e6					_CACreateSubLoop:
.10e6	38		sec				sec
.10e7	20 11 11	jsr $1111			jsr 	CreateSingleArray 			; create data array of required size.
.10ea	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10ec	91 24		sta ($24),y			sta 	(zTemp2),y
.10ee	8a		txa				txa
.10ef	c8		iny				iny
.10f0	91 24		sta ($24),y			sta 	(zTemp2),y
.10f2	18		clc				clc  								; next slot.
.10f3	a5 24		lda $24				lda 	zTemp2
.10f5	69 02		adc #$02			adc 	#2
.10f7	85 24		sta $24				sta 	zTemp2
.10f9	90 02		bcc $10fd			bcc 	_CACNoCarry
.10fb	e6 25		inc $25				inc 	zTemp2+1
.10fd					_CACNoCarry:
.10fd	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1100	d0 03		bne $1105			bne 	_CACNoBorrow
.1102	ce 05 05	dec $0505			dec 	CADim1+1
.1105					_CACNoBorrow:
.1105	ce 04 05	dec $0504			dec 	CADim1
.1108	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.110b	10 d9		bpl $10e6			bpl 	_CACreateSubLoop
.110d	68		pla				pla
.110e	fa		plx				plx
.110f	7a		ply				ply
.1110	60		rts				rts
.1111					CreateSingleArray:
.1111	5a		phy				phy
.1112	38		sec				sec 								; allocate memory block all zeros.
.1113	a5 0e		lda $0e				lda 	IFR0+IM0
.1115	a6 0f		ldx $0f				ldx 	IFR0+IM1
.1117	20 50 11	jsr $1150			jsr 	CSAAllocate
.111a	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.111d	f0 2f		beq $114e			beq 	_CSANoInit
.111f	da		phx				phx 								; save address of new array
.1120	48		pha				pha
.1121	85 20		sta $20				sta 	zTemp0 						; address in zTemp0
.1123	86 21		stx $21				stx 	zTemp0+1
.1125	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1127	b1 20		lda ($20),y			lda 	(zTemp0),y
.1129	a8		tay				tay
.112a	b2 20		lda ($20)			lda 	(zTemp0)
.112c	aa		tax				tax
.112d					_CSAEraseString:
.112d	5a		phy				phy
.112e	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1130	a9 80		lda #$80			lda 	#$80
.1132	91 20		sta ($20),y			sta 	(zTemp0),y
.1134	7a		ply				ply
.1135	18		clc				clc 								; add 4 to next slot.
.1136	a5 20		lda $20				lda 	zTemp0
.1138	69 04		adc #$04			adc 	#4
.113a	85 20		sta $20				sta 	zTemp0
.113c	90 02		bcc $1140			bcc 	_CSAENoCarry
.113e	e6 21		inc $21				inc 	zTemp0+1
.1140					_CSAENoCarry:
.1140	e0 00		cpx #$00			cpx 	#0
.1142	d0 01		bne $1145			bne 	_CSANoBorrow
.1144	88		dey				dey
.1145					_CSANoBorrow:
.1145	ca		dex				dex
.1146	d0 e5		bne $112d			bne 	_CSAEraseString
.1148	c0 00		cpy #$00			cpy 	#0
.114a	d0 e1		bne $112d			bne 	_CSAEraseString
.114c	68		pla				pla
.114d	fa		plx				plx
.114e					_CSANoInit:
.114e	7a		ply				ply
.114f	60		rts				rts
.1150					CSAAllocate:
.1150	08		php				php 								; save type flag.
.1151	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1152	d0 01		bne $1155			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1154	e8		inx				inx
.1155					_CSAANoCarry:
.1155	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1157	b0 2e		bcs $1187			bcs 	_CSARange
.1159	28		plp				plp 								; restore type flag
.115a	08		php				php 								; save it back again.
.115b	da		phx				phx 								; save size.
.115c	48		pha				pha
.115d	86 21		stx $21				stx  	zTemp0+1 					; now in ztemp0+1:X
.115f	90 03		bcc $1164			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1161	0a		asl a				asl 	a
.1162	26 21		rol $21				rol 	zTemp0+1
.1164					_CSAATimes2:
.1164	0a		asl a				asl 	a
.1165	26 21		rol $21				rol 	zTemp0+1
.1167	18		clc				clc
.1168	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.116a	90 02		bcc $116e			bcc 	_CSAANoCarry2
.116c	e6 21		inc $21				inc 	zTemp0+1
.116e					_CSAANoCarry2:
.116e	a6 21		ldx $21				ldx 	zTemp0+1 					; XA is the bytes required.
.1170	20 38 10	jsr $1038			jsr 	AllocateMemory 				; allocate memory to XA
.1173	86 21		stx $21				stx 	zTemp0+1 					; save pointers
.1175	85 20		sta $20				sta 	zTemp0
.1177	68		pla				pla  								; write element count to first 2 bytes
.1178	92 20		sta ($20)			sta 	(zTemp0)
.117a	68		pla				pla 								; msb of element count
.117b	28		plp				plp 								; CC if pointer array
.117c	b0 02		bcs $1180			bcs 	_CSAAIsData
.117e	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1180					_CSAAIsData:
.1180	a0 01		ldy #$01			ldy 	#1
.1182	91 20		sta ($20),y			sta 	(zTemp0),y
.1184	a5 20		lda $20				lda 	zTemp0 						; fix XA back up again
.1186	60		rts				rts
.1187					_CSARange:
.1187	4c 82 23	jmp $2382		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.118a					Command_Doke:
.118a	38		sec				sec
.118b	80 01		bra $118e			bra 	DPCommon
.118d					Command_Poke:
.118d	18		clc				clc
.118e					DPCommon:
.118e	08		php				php 								; CS if DOKE
.118f	20 b2 15	jsr $15b2			jsr 	EXPEvalInteger16 			; address
.1192	a5 0e		lda $0e				lda 	IFR0+IM0 					; push on stack
.1194	48		pha				pha
.1195	a5 0f		lda $0f				lda 	IFR0+IM1
.1197	48		pha				pha
.1198	20 0c 25	jsr $250c			jsr 	ERRCheckComma 				; [dp]oke address,data
.119b	20 b2 15	jsr $15b2			jsr 	EXPEvalInteger16
.119e	68		pla				pla 								; get address back
.119f	85 21		sta $21				sta 	zTemp0+1
.11a1	68		pla				pla
.11a2	85 20		sta $20				sta 	zTemp0
.11a4	a5 0e		lda $0e				lda 	IFR0+IM0
.11a6	92 20		sta ($20)			sta 	(zTemp0)
.11a8	28		plp				plp
.11a9	90 08		bcc $11b3			bcc 	_DPExit
.11ab	5a		phy				phy
.11ac	a5 0f		lda $0f				lda 	IFR0+IM1
.11ae	a0 01		ldy #$01			ldy 	#1
.11b0	91 20		sta ($20),y			sta 	(zTemp0),y
.11b2	7a		ply				ply
.11b3					_DPExit:
.11b3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11b4					Command_Print:
.11b4					Command_IP_Main:
.11b4	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11b5					_CPLoop:
.11b5	08		php				php 								; save last action flag
.11b6	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next character
.11b8	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11ba	f0 3e		beq $11fa			beq 	_CPExit 					; without consuming
.11bc	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11be	f0 3a		beq $11fa			beq 	_CPExit
.11c0	68		pla				pla 								; throw last action flag
.11c1	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; next character and bump
.11c3	c8		iny				iny
.11c4	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11c6	f0 2f		beq $11f7			beq 	_CPContinueWithSameLine
.11c8	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11ca	f0 26		beq $11f2			beq 	_CPTab
.11cc	88		dey				dey 								; undo the get.
.11cd	20 60 15	jsr $1560			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11d0	24 11		bit $11				bit 	IFR0+IExp 					; is it a number ?
.11d2	10 14		bpl $11e8			bpl 	_CPNumber
.11d4	5a		phy				phy
.11d5	18		clc				clc 								; string address to YX
.11d6	a5 0e		lda $0e				lda 	IFR0+IM0
.11d8	aa		tax				tax
.11d9	a5 0f		lda $0f				lda 	IFR0+IM1
.11db	a8		tay				tay
.11dc	e8		inx				inx 								; point to 1st character
.11dd	d0 01		bne $11e0			bne 	_CPNoCarry
.11df	c8		iny				iny
.11e0					_CPNoCarry:
.11e0	b2 0e		lda ($0e)			lda 	(IFR0+IM0)					; length to A
.11e2	20 03 12	jsr $1203			jsr 	CPPrintAYX 					; print AYX
.11e5	7a		ply				ply
.11e6	80 cc		bra $11b4			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11e8					_CPNumber:
.11e8	5a		phy				phy
.11e9	20 a9 2c	jsr $2ca9			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11ec	20 03 12	jsr $1203			jsr 	CPPrintAYX 					; print AYX
.11ef	7a		ply				ply
.11f0	80 c2		bra $11b4			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11f2					_CPTab:
.11f2	a9 09		lda #$09			lda 	#9 							; print TAB
.11f4	20 16 12	jsr $1216			jsr 	CPPrintA
.11f7					_CPContinueWithSameLine:
.11f7	38		sec				sec 								; loop round with carry set, which
.11f8	80 bb		bra $11b5			bra 	_CPLoop 					; will inhibit final CR
.11fa					_CPExit:
.11fa	28		plp				plp 								; get last action flag
.11fb	b0 05		bcs $1202			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11fd	a9 0d		lda #$0d			lda 	#13 						; print new line
.11ff	20 16 12	jsr $1216			jsr 	CPPrintA
.1202					_CPExit2:
.1202	60		rts				rts
.1203					CPPrintAYX:
.1203	86 20		stx $20				stx 	zTemp0
.1205	84 21		sty $21				sty 	zTemp0+1
.1207	aa		tax				tax
.1208	f0 0b		beq $1215			beq 	_CPPrintExit
.120a	a0 00		ldy #$00			ldy 	#0
.120c					_CPPrintAYXLoop:
.120c	b1 20		lda ($20),y			lda 	(zTemp0),y
.120e	20 16 12	jsr $1216			jsr 	CPPrintA
.1211	c8		iny				iny
.1212	ca		dex				dex
.1213	d0 f7		bne $120c			bne 	_CPPrintAYXLoop
.1215					_CPPrintExit:
.1215	60		rts				rts
.1216					CPPrintA:
.1216	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1219					CommandLET:
.1219	20 28 16	jsr $1628			jsr 	EXPTermR0 					; get term
.121c	90 6d		bcc $128b			bcc 	_CLError 					; must be a reference term.
.121e	a5 0e		lda $0e				lda 	IFR0+IM0 					; push address and type onto stack
.1220	48		pha				pha
.1221	a5 0f		lda $0f				lda 	IFR0+IM1
.1223	48		pha				pha
.1224	a5 11		lda $11				lda 	IFR0+IExp
.1226	48		pha				pha
.1227	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1229	20 14 25	jsr $2514			jsr 	ERRCheckA
.122c	20 60 15	jsr $1560			jsr 	EXPEvaluateExpression 		; right hand side.
.122f	68		pla				pla 								; type of l-expr
.1230	45 11		eor $11				eor 	IFR0+IExp 					; check types match
.1232	30 5a		bmi $128e			bmi 	_CLType
.1234	fa		plx				plx 	 							; pop target address to zTemp0
.1235	86 21		stx $21				stx 	zTemp0+1
.1237	fa		plx				plx
.1238	86 20		stx $20				stx 	zTemp0
.123a	a5 11		lda $11				lda 	IFR0+IExp 					; string assignment
.123c	30 15		bmi $1253			bmi 	_CLStringAssign
.123e	5a		phy				phy
.123f	a0 03		ldy #$03			ldy 	#3
.1241	91 20		sta ($20),y			sta 	(zTemp0),y
.1243	88		dey				dey
.1244	a5 10		lda $10				lda 	IFR0+IM2
.1246	91 20		sta ($20),y			sta 	(zTemp0),y
.1248	88		dey				dey
.1249	a5 0f		lda $0f				lda 	IFR0+IM1
.124b	91 20		sta ($20),y			sta 	(zTemp0),y
.124d	a5 0e		lda $0e				lda 	IFR0+IM0
.124f	92 20		sta ($20)			sta 	(zTemp0)
.1251	7a		ply				ply
.1252	60		rts				rts
.1253					_CLStringAssign:
.1253	5a		phy				phy
.1254	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1256	b1 20		lda ($20),y			lda 	(zTemp0),y
.1258	12 20		ora ($20)			ora 	(zTemp0)
.125a	f0 23		beq $127f			beq 	_CLConcreteString
.125c	b2 20		lda ($20)			lda 	(zTemp0) 					; copy address of string to zTemp1
.125e	85 22		sta $22				sta 	zTemp1
.1260	b1 20		lda ($20),y			lda 	(zTemp0),y
.1262	85 23		sta $23				sta 	zTemp1+1
.1264	b2 22		lda ($22)			lda 	(zTemp1) 					; bytes available in the new slot
.1266	38		sec				sec 								; we want 3 for slot size, status, string size.
.1267	e9 03		sbc #$03			sbc 	#3
.1269	d2 0e		cmp ($0e)			cmp 	(IFR0) 						; compare against string size.
.126b	90 12		bcc $127f			bcc 	_CLConcreteString 			; if so, concrete the string again.
.126d	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.126f	1a		inc a				inc 	a
.1270	aa		tax				tax
.1271	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1273					_CLReplaceString:
.1273	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; copy new string into previous space.
.1275	c8		iny				iny
.1276	c8		iny				iny
.1277	91 22		sta ($22),y			sta 	(zTemp1),y
.1279	88		dey				dey
.127a	ca		dex				dex
.127b	d0 f6		bne $1273			bne 	_CLReplaceString
.127d	80 0a		bra $1289			bra 	_CLExit
.127f					_CLConcreteString:
.127f	20 87 25	jsr $2587			jsr 	StringConcrete  			; concreted string in XA.
.1282	a0 01		ldy #$01			ldy 	#1 							; store the address
.1284	92 20		sta ($20)			sta 	(zTemp0)
.1286	8a		txa				txa
.1287	91 20		sta ($20),y			sta 	(zTemp0),y
.1289					_CLExit:
.1289	7a		ply				ply
.128a	60		rts				rts
.128b					_CLError:
.128b	4c a4 24	jmp $24a4		jmp	ErrorV_variable
.128e					_CLType:
.128e	4c a1 23	jmp $23a1		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1291					Command_LIST:
.1291	9c 06 05	stz $0506			stz 	CLFrom 						; default from
.1294	9c 07 05	stz $0507			stz 	CLFrom+1
.1297	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1299	c9 99		cmp #$99			cmp 	#PR_COMMA
.129b	f0 1d		beq $12ba			beq 	_CLToLine
.129d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.129f	f0 37		beq $12d8			beq 	_CLDefaultTo
.12a1	20 b2 15	jsr $15b2			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.12a4	a5 0e		lda $0e				lda 	IFR0+IM0
.12a6	8d 06 05	sta $0506			sta 	CLFrom
.12a9	8d 08 05	sta $0508			sta 	CLTo
.12ac	a5 0f		lda $0f				lda 	IFR0+IM1
.12ae	8d 07 05	sta $0507			sta 	CLFrom+1
.12b1	8d 09 05	sta $0509			sta 	CLTo+1
.12b4	b1 1e		lda ($1e),y			lda 	(codePtr),y
.12b6	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.12b8	f0 26		beq $12e0			beq 	_CLList
.12ba					_CLToLine:
.12ba	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.12bc	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12be	f0 18		beq $12d8			beq 	_CLDefaultTo
.12c0	20 0c 25	jsr $250c			jsr 	ERRCheckComma 				; sep comma
.12c3	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.12c5	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.12c7	f0 0f		beq $12d8			beq 	_CLDefaultTo
.12c9	20 b2 15	jsr $15b2			jsr 	EXPEvalInteger16 			; there's a To value.
.12cc	a5 0e		lda $0e				lda 	IFR0+IM0
.12ce	8d 08 05	sta $0508			sta 	CLTo
.12d1	a5 0f		lda $0f				lda 	IFR0+IM1
.12d3	8d 09 05	sta $0509			sta 	CLTo+1
.12d6	80 08		bra $12e0			bra 	_CLList
.12d8					_CLDefaultTo:
.12d8	a9 ff		lda #$ff			lda 	#$FF
.12da	8d 08 05	sta $0508			sta 	CLTo
.12dd	8d 09 05	sta $0509			sta 	CLTo+1
.12e0					_CLList:
.12e0	ad 13 05	lda $0513			lda 	PGMBaseHigh 				; back to the program start
.12e3	85 1f		sta $1f				sta 	codePtr+1
.12e5	64 1e		stz $1e				stz 	codePtr
.12e7	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.12e9	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.12eb	20 08 1c	jsr $1c08			jsr 	TOKSetDetokeniseOutput
.12ee					_CLLoop:
.12ee	b2 1e		lda ($1e)			lda 	(codePtr) 					; finished
.12f0	f0 42		beq $1334			beq 	_CLExit
.12f2	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.12f4	20 37 13	jsr $1337			jsr 	_CLCompareLine
.12f7	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.12f9	f0 2c		beq $1327			beq 	_CLNext
.12fb	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.12fd	20 37 13	jsr $1337			jsr 	_CLCompareLine
.1300	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.1302	f0 23		beq $1327			beq 	_CLNext
.1304	a0 02		ldy #$02			ldy 	#2 							; print line #
.1306	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1308	aa		tax				tax
.1309	88		dey				dey
.130a	b1 1e		lda ($1e),y			lda 	(codePtr),y
.130c	20 65 26	jsr $2665			jsr 	WriteIntXA
.130f	a9 20		lda #$20			lda 	#32
.1311	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1314	a4 1f		ldy $1f				ldy 	codePtr+1 					; point YX to tokenised code/
.1316	a5 1e		lda $1e				lda 	codePtr
.1318	18		clc				clc
.1319	69 03		adc #$03			adc 	#3
.131b	aa		tax				tax
.131c	90 01		bcc $131f			bcc 	_CLNoCarry2
.131e	c8		iny				iny
.131f					_CLNoCarry2:
.131f	20 c3 1b	jsr $1bc3			jsr 	TOKDetokenise
.1322	a9 0d		lda #$0d			lda 	#13	 						; next line
.1324	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1327					_CLNext:
.1327	18		clc				clc 								; advance to next line.
.1328	b2 1e		lda ($1e)			lda 	(codePtr)
.132a	65 1e		adc $1e				adc 	codePtr
.132c	85 1e		sta $1e				sta 	codePtr
.132e	90 02		bcc $1332			bcc 	_CLNoCarry
.1330	e6 1f		inc $1f				inc 	codePtr+1
.1332					_CLNoCarry:
.1332	80 ba		bra $12ee			bra 	_CLLoop
.1334					_CLExit:
.1334	4c 84 26	jmp $2684			jmp 	WarmStart
.1337					_CLCompareLine:
.1337	a0 01		ldy #$01			ldy 	#1
.1339	38		sec				sec
.133a	b1 1e		lda ($1e),y			lda 	(codePtr),y
.133c	fd 06 05	sbc $0506,x			sbc 	CLFrom,x
.133f	85 20		sta $20				sta 	zTemp0
.1341	c8		iny				iny
.1342	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1344	fd 07 05	sbc $0507,x			sbc 	CLFrom+1,x
.1347	90 0a		bcc $1353			bcc 	_CLIsNegative
.1349	d0 05		bne $1350			bne 	_CLIsPositive
.134b	a5 20		lda $20				lda 	zTemp0
.134d	d0 01		bne $1350			bne 	_CLIsPositive
.134f	60		rts				rts
.1350					_CLIsPositive:
.1350	a9 01		lda #$01			lda 	#1
.1352	60		rts				rts
.1353					_CLIsNegative:
.1353	a9 ff		lda #$ff			lda 	#255
.1355	60		rts				rts
.0506					CLFrom:
>0506							.fill 	2
.0508					CLTo:
>0508							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1356					Command_NEW:
.1356	20 ad 1d	jsr $1dad			jsr 	PGMNewProgram
.1359	20 1e 10	jsr $101e			jsr 	Command_CLEAR
.135c	4c c5 13	jmp $13c5			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.135f					Command_REM:
.135f					Command_REM2:
.135f	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; optional string parameter
.1361	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1363	d0 06		bne $136b			bne 	_CRExit
.1365	c8		iny				iny 								; skip over it, it's a comment.
.1366	98		tya				tya
.1367	38		sec				sec
.1368	71 1e		adc ($1e),y			adc 	(codePtr),y
.136a	a8		tay				tay
.136b					_CRExit:
.136b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.136c					Command_RUN:
.136c	20 1e 10	jsr $101e			jsr 	Command_CLEAR 				; clear everything out.
.136f	ad 13 05	lda $0513			lda 	PGMBaseHigh 				; back to the program start
.1372	85 1f		sta $1f				sta 	codePtr+1
.1374	64 1e		stz $1e				stz 	codePtr
.1376	80 0b		bra $1383			bra 	RUNNewLine
.1378					RUNEndOfLine:
.1378	18		clc				clc 								; advance to next line.
.1379	b2 1e		lda ($1e)			lda 	(codePtr)
.137b	65 1e		adc $1e				adc 	codePtr
.137d	85 1e		sta $1e				sta 	codePtr
.137f	90 02		bcc $1383			bcc 	_RELNoCarry
.1381	e6 1f		inc $1f				inc 	codePtr+1
.1383					_RELNoCarry:
.1383					RUNNewLine:
.1383	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1385	9a		txs				txs
.1386	b2 1e		lda ($1e)			lda 	(codePtr) 					; check off end of program
.1388	f0 3b		beq $13c5			beq 	Command_END
.138a	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.138c	b1 1e		lda ($1e),y			lda 	(codePtr),y
.138e	8d 1f 06	sta $061f			sta 	ERRLine
.1391	c8		iny				iny
.1392	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1394	8d 20 06	sta $0620			sta 	ERRLine+1
.1397	c8		iny				iny 								; offset into codePtr for start of line.
.1398					RUNNewCommand:
.1398	9c 1a 06	stz $061a			stz 	stringInitialised 			; reset string system.
.139b	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token
.139d	10 1a		bpl $13b9			bpl		_RUNNotToken 				; probably an identifier
.139f	c8		iny				iny 								; consume token
.13a0	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.13a2	f0 f4		beq $1398			beq 	RUNNewCommand
.13a4	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.13a6	b0 0e		bcs $13b6			bcs 	_RUNSyntax
.13a8	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.13aa	90 0a		bcc $13b6			bcc 	_RUNSyntax
.13ac	0a		asl a				asl 	a 							; double into X.
.13ad	aa		tax				tax
.13ae	20 b3 13	jsr $13b3			jsr 	_RUNDispatchMain			; call the main dispatcher
.13b1	80 e5		bra $1398			bra 	RUNNewCommand
.13b3					_RUNDispatchMain:
.13b3	7c c3 1a	jmp ($1ac3,x)			jmp 	(VectorTable,x)
.13b6					_RUNSyntax:
.13b6	4c 71 23	jmp $2371		jmp	ErrorV_syntax
.13b9					_RUNNotToken:
.13b9	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.13bb	90 f9		bcc $13b6			bcc 	_RUNSyntax
.13bd	20 19 12	jsr $1219			jsr 	CommandLET 					; assignment
.13c0	80 d6		bra $1398			bra 	RUNNewCommand 				; loop round.
.13c2					Command_Shift_Handler:
.13c2	4c b3 23	jmp $23b3		jmp	ErrorV_unimplemented
.13c5					Command_END:
.13c5	4c 84 26	jmp $2684			jmp 	WarmStart

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.13c8					Command_STOP:
.13c8	4c 15 24	jmp $2415		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.13cb					Command_Sys:
.13cb	20 b2 15	jsr $15b2			jsr 	EXPEvalInteger16 			; execution address
.13ce	5a		phy				phy
.13cf	ad 67 06	lda $0667			lda 	('A'-'A')*4 + FastVariables ; load AXY
.13d2	ae c3 06	ldx $06c3			ldx 	('X'-'A')*4 + FastVariables
.13d5	ac c7 06	ldy $06c7			ldy 	('Y'-'A')*4 + FastVariables
.13d8	20 dd 13	jsr $13dd			jsr 	_CSCallIFR0 				; call the code
.13db	7a		ply				ply
.13dc	60		rts				rts
.13dd					_CSCallIFR0:
.13dd	6c 0e 00	jmp ($000e)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.13e0					NoExec01:
.13e0					NoExec02:
.13e0					NoExec03:
.13e0					NoExec04:
.13e0					NoExec05:
.13e0					NoExec06:
.13e0					NoExec07:
.13e0					NoExec08:
.13e0	4c 71 23	jmp $2371		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.13e3					EXPBinAdd:
.13e3	24 11		bit $11				bit 	IFR0+IExp
.13e5	30 6f		bmi $1456			bmi 	EXPConcatenate
.13e7	a2 12		ldx #$12			ldx 	#IFR1
.13e9	4c a2 28	jmp $28a2			jmp 	IFloatAdd
.13ec					EXPBinSub:
.13ec	24 11		bit $11				bit 	IFR0+IExp
.13ee	30 3f		bmi $142f			bmi 	EXPTypeError
.13f0	a2 12		ldx #$12			ldx 	#IFR1
.13f2	4c 9b 28	jmp $289b			jmp 	IFloatSubtract
.13f5					EXPBinMul:
.13f5	24 11		bit $11				bit 	IFR0+IExp
.13f7	30 36		bmi $142f			bmi 	EXPTypeError
.13f9	a2 12		ldx #$12			ldx 	#IFR1
.13fb	4c 4c 29	jmp $294c			jmp 	IFloatMultiply
.13fe					EXPBinFDiv:
.13fe	24 11		bit $11				bit 	IFR0+IExp
.1400	30 2d		bmi $142f			bmi 	EXPTypeError
.1402	a2 12		ldx #$12			ldx 	#IFR1
.1404	20 cf 2b	jsr $2bcf			jsr 	IFloatDivideFloat
.1407	b0 0f		bcs $1418			bcs 	EXPDZero
.1409	60		rts				rts
.140a					EXPBinIDiv:
.140a	24 11		bit $11				bit 	IFR0+IExp
.140c	30 21		bmi $142f			bmi 	EXPTypeError
.140e	a2 12		ldx #$12			ldx 	#IFR1
.1410	20 cf 2b	jsr $2bcf			jsr 	IFloatDivideFloat
.1413	b0 03		bcs $1418			bcs 	EXPDZero
.1415	4c ac 2b	jmp $2bac			jmp 	IFloatIntegerR0
.1418					EXPDZero:
.1418	4c ea 23	jmp $23ea		jmp	ErrorV_divzero
.141b					EXPBinIMod:
.141b	24 11		bit $11				bit 	IFR0+IExp
.141d	30 10		bmi $142f			bmi 	EXPTypeError
.141f	a2 12		ldx #$12			ldx 	#IFR1
.1421	5a		phy				phy
.1422	20 e4 2a	jsr $2ae4			jsr 	IFPreProcessBitwise 		; set up everything.
.1425	d0 05		bne $142c			bne 	EXPDRange
.1427	20 1d 2a	jsr $2a1d			jsr 	IFloatModulusInteger
.142a	7a		ply				ply
.142b	60		rts				rts
.142c					EXPDRange:
.142c	4c 82 23	jmp $2382		jmp	ErrorV_range
.142f					EXPTypeError:
.142f	4c a1 23	jmp $23a1		jmp	ErrorV_type
.1432					EXPBinAnd:
.1432	24 11		bit $11				bit 	IFR0+IExp
.1434	30 f9		bmi $142f			bmi 	EXPTypeError
.1436	a2 12		ldx #$12			ldx 	#IFR1
.1438	20 9f 2a	jsr $2a9f			jsr 	IFloatBitwiseAnd
.143b	b0 ef		bcs $142c			bcs 	EXPDRange
.143d	60		rts				rts
.143e					EXPBinOr:
.143e	24 11		bit $11				bit 	IFR0+IExp
.1440	30 ed		bmi $142f			bmi 	EXPTypeError
.1442	a2 12		ldx #$12			ldx 	#IFR1
.1444	20 b6 2a	jsr $2ab6			jsr 	IFloatBitwiseOr
.1447	b0 e3		bcs $142c			bcs 	EXPDRange
.1449	60		rts				rts
.144a					EXPBinXor:
.144a	24 11		bit $11				bit 	IFR0+IExp
.144c	30 e1		bmi $142f			bmi 	EXPTypeError
.144e	a2 12		ldx #$12			ldx 	#IFR1
.1450	20 cd 2a	jsr $2acd			jsr 	IFloatBitwiseXor
.1453	b0 d7		bcs $142c			bcs 	EXPDRange
.1455	60		rts				rts
.1456					EXPConcatenate:
.1456	18		clc				clc
.1457	b2 0e		lda ($0e)			lda 	(IFR0) 	 					; work out total length
.1459	72 12		adc ($12)			adc 	(IFR1)
.145b	b0 2d		bcs $148a			bcs 	_EXPCError
.145d	a6 0e		ldx $0e				ldx 	IFR0 						; push R0 string on stack.
.145f	da		phx				phx
.1460	a6 0f		ldx $0f				ldx 	IFR0+1
.1462	da		phx				phx
.1463	20 fa 25	jsr $25fa			jsr 	StringTempAllocate 			; allocate string, set up return
.1466	a6 13		ldx $13				ldx 	IFR1+1 						; copy first string.
.1468	a5 12		lda $12				lda 	IFR1
.146a	20 73 14	jsr $1473			jsr 	_EXPCCopyXA
.146d	fa		plx				plx 								; copy second string
.146e	68		pla				pla
.146f	20 73 14	jsr $1473			jsr 	_EXPCCopyXA
.1472	60		rts				rts
.1473					_EXPCCopyXA:
.1473	86 21		stx $21				stx 	zTemp0+1 					; save address to zTemp0
.1475	85 20		sta $20				sta 	zTemp0
.1477	b2 20		lda ($20)			lda 	(zTemp0)					; length
.1479	f0 0e		beq $1489			beq 	_EXPCCExit 					; nothing.
.147b	aa		tax				tax 								; count
.147c	5a		phy				phy 								; start positioin
.147d	a0 01		ldy #$01			ldy 	#1
.147f					_EXPCCLoop:
.147f	b1 20		lda ($20),y			lda 	(zTemp0),y 					; write characters one at a time.
.1481	20 2f 26	jsr $262f			jsr 	StringTempWrite
.1484	c8		iny				iny
.1485	ca		dex				dex
.1486	d0 f7		bne $147f			bne 	_EXPCCLoop
.1488	7a		ply				ply
.1489					_EXPCCExit:
.1489	60		rts				rts
.148a					_EXPCError:
.148a	4c 8e 24	jmp $248e		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.148d					EXPReturnTrue:
.148d	a2 0e		ldx #$0e			ldx 	#IFR0
.148f	a9 01		lda #$01			lda 	#1
.1491	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.1494	20 b7 2e	jsr $2eb7			jsr 	IFloatNegate
.1497	60		rts				rts
.1498					EXPReturnFalse:
.1498	a2 0e		ldx #$0e			ldx 	#IFR0
.149a	4c ac 2e	jmp $2eac			jmp 	IFloatSetZero
.149d					EXPCompareEqual:
.149d	20 d3 14	jsr $14d3			jsr 	EXPCompareBaseCode
.14a0	c9 00		cmp #$00			cmp 	#0
.14a2	f0 e9		beq $148d			beq 	EXPReturnTrue
.14a4	80 f2		bra $1498			bra 	EXPReturnFalse
.14a6					EXPCompareLess:
.14a6	20 d3 14	jsr $14d3			jsr 	EXPCompareBaseCode
.14a9	c9 ff		cmp #$ff			cmp 	#$FF
.14ab	f0 e0		beq $148d			beq 	EXPReturnTrue
.14ad	80 e9		bra $1498			bra 	EXPReturnFalse
.14af					EXPCompareGreater:
.14af	20 d3 14	jsr $14d3			jsr 	EXPCompareBaseCode
.14b2	c9 01		cmp #$01			cmp 	#1
.14b4	f0 d7		beq $148d			beq 	EXPReturnTrue
.14b6	80 e0		bra $1498			bra 	EXPReturnFalse
.14b8					EXPCompareNotEqual:
.14b8	20 d3 14	jsr $14d3			jsr 	EXPCompareBaseCode
.14bb	c9 00		cmp #$00			cmp 	#0
.14bd	d0 ce		bne $148d			bne 	EXPReturnTrue
.14bf	80 d7		bra $1498			bra 	EXPReturnFalse
.14c1					EXPCompareLessEqual:
.14c1	20 d3 14	jsr $14d3			jsr 	EXPCompareBaseCode
.14c4	c9 01		cmp #$01			cmp 	#1
.14c6	d0 c5		bne $148d			bne 	EXPReturnTrue
.14c8	80 ce		bra $1498			bra 	EXPReturnFalse
.14ca					EXPCompareGreaterEqual:
.14ca	20 d3 14	jsr $14d3			jsr 	EXPCompareBaseCode
.14cd	c9 ff		cmp #$ff			cmp 	#$FF
.14cf	d0 bc		bne $148d			bne 	EXPReturnTrue
.14d1	80 c5		bra $1498			bra 	EXPReturnFalse
.14d3					EXPCompareBaseCode:
.14d3	24 11		bit $11				bit 	IFR0+IExp 					; string compare ?
.14d5	30 10		bmi $14e7			bmi 	_EXCBCString
.14d7	a2 12		ldx #$12			ldx 	#IFR1						; float compare
.14d9	20 7a 2b	jsr $2b7a			jsr 	IFloatCompare
.14dc	a5 0e		lda $0e				lda 	IFR0+IM0
.14de	f0 06		beq $14e6			beq 	_EXCBCExit 					; return 0 if zero
.14e0	24 11		bit $11				bit 	IFR0+IExp 					; return 1 if +ve
.14e2	50 02		bvc $14e6			bvc 	_EXCBCExit
.14e4	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.14e6					_EXCBCExit:
.14e6	60		rts				rts
.14e7					_EXCBCString:
.14e7	5a		phy				phy
.14e8	b2 0e		lda ($0e)			lda 	(IFR0) 						; length of smaller of the two in X.
.14ea	d2 12		cmp ($12)			cmp 	(IFR1)
.14ec	90 02		bcc $14f0			bcc 	_EXCBCSmaller
.14ee	b2 12		lda ($12)			lda 	(IFR1)
.14f0					_EXCBCSmaller:
.14f0	aa		tax				tax
.14f1	f0 0d		beq $1500			beq 	_EXCBCMatches 				; if zero common length matches
.14f3	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.14f5					_EXCBCCheckSmallerMatches:
.14f5	c8		iny				iny 								; compare directly as far as common length
.14f6	38		sec				sec
.14f7	b1 12		lda ($12),y			lda 	(IFR1),y
.14f9	f1 0e		sbc ($0e),y			sbc 	(IFR0),y
.14fb	d0 08		bne $1505			bne 	_EXCBCExit2
.14fd	ca		dex				dex
.14fe	d0 f5		bne $14f5			bne 	_EXCBCCheckSmallerMatches
.1500					_EXCBCMatches:
.1500	38		sec				sec
.1501	b2 12		lda ($12)			lda 	(IFR1) 						; common length matches. If same length equal
.1503	f2 0e		sbc ($0e)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1505					_EXCBCExit2:
.1505	7a		ply				ply
.1506	c9 00		cmp #$00			cmp 	#0
.1508	f0 04		beq $150e			beq 	_EXCBCReturn
.150a	30 03		bmi $150f			bmi 	_EXCBCFF
.150c	a9 01		lda #$01			lda 	#1
.150e					_EXCBCReturn:
.150e	60		rts				rts
.150f					_EXCBCFF:
.150f	a9 ff		lda #$ff			lda 	#$FF
.1511	60		rts				rts
.1512					_EXCBCRange:
.1512	4c 82 23	jmp $2382		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1515					EXPBinLeft:
.1515	a9 ff		lda #$ff			lda 	#$FF
.1517	8d 0a 05	sta $050a			sta 	EXPShiftLeftFlag
.151a	4c 20 15	jmp $1520			jmp 	EXPShiftCommon
.151d					EXPBinRight:
.151d	9c 0a 05	stz $050a			stz 	EXPShiftLeftFlag
.1520					EXPShiftCommon:
.1520	a5 11		lda $11				lda 	IFR0+IExp 					; both integers
.1522	05 15		ora $15				ora 	IFR1+IExp
.1524	29 7f		and #$7f			and 	#$7F
.1526	d0 35		bne $155d			bne 	_EXPSRange
.1528	a5 0e		lda $0e				lda 	IFR0+IM0					; check shift >= 32
.152a	29 e0		and #$e0			and 	#$E0
.152c	05 0f		ora $0f				ora 	IFR0+IM1
.152e	05 10		ora $10				ora 	IFR0+IM2
.1530	d0 25		bne $1557			bne 	_EXPSShiftZero 				; if so return zero
.1532	5a		phy				phy
.1533	a5 0e		lda $0e				lda 	IFR0+IM0 					; get shift
.1535	29 1f		and #$1f			and 	#$1F
.1537	f0 17		beq $1550			beq 	_EXPSExit 					; exit if zero
.1539	a8		tay				tay
.153a					_EXPSLoop:
.153a	a2 12		ldx #$12			ldx 	#IFR1
.153c	2c 0a 05	bit $050a			bit 	EXPShiftLeftFlag
.153f	30 05		bmi $1546			bmi 	_EXPSShiftLeft
.1541	20 db 2e	jsr $2edb			jsr 	IFloatShiftRight
.1544	80 07		bra $154d			bra 	_EXPSContinue
.1546					_EXPSShiftLeft:
.1546	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1549	24 10		bit $10				bit 	IFR0+IM2 					; too many shifts
.154b	30 10		bmi $155d			bmi 	_EXPSRange
.154d					_EXPSContinue:
.154d	88		dey				dey
.154e	d0 ea		bne $153a			bne 	_EXPSLoop
.1550					_EXPSExit:
.1550	a2 12		ldx #$12			ldx 	#IFR1
.1552	20 3d 2e	jsr $2e3d			jsr 	IFloatCopyFromRegister
.1555	7a		ply				ply
.1556	60		rts				rts
.1557					_EXPSShiftZero:
.1557	a2 0e		ldx #$0e			ldx 	#IFR0
.1559	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.155c	60		rts				rts
.155d					_EXPSRange:
.155d	4c 82 23	jmp $2382		jmp	ErrorV_range
.050a					EXPShiftLeftFlag:
>050a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1560					EXPEvaluateExpression:
.1560	a9 00		lda #$00			lda 	#0 							; current precedence
.1562					EXPEvaluateExpressionPrecedenceA:
.1562	48		pha				pha
.1563	20 dd 15	jsr $15dd			jsr 	EXPTermValueR0				; do first term.
.1566					_EELoop:
.1566	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1568	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.156a	90 31		bcc $159d			bcc 	_EEExit
.156c	aa		tax				tax 								; access the precedence of the operator.
.156d	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.156e	dd 1b 18	cmp $181b,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1571	b0 2b		bcs $159e			bcs 	_EEExit2
.1573	48		pha				pha 								; save current precedence.
.1574	da		phx				phx 								; save operator
.1575	c8		iny				iny 								; consume operator
.1576	da		phx				phx
.1577	a2 0e		ldx #$0e			ldx 	#IFR0 						; push R0 on the stack
.1579	20 fb 2d	jsr $2dfb			jsr 	IFloatPushRx
.157c	fa		plx				plx
.157d	bd 1b 18	lda $181b,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1580	20 62 15	jsr $1562			jsr 	EXPEvaluateExpressionPrecedenceA
.1583	a2 12		ldx #$12			ldx 	#IFR1 						; pop LHS to R1.
.1585	20 1c 2e	jsr $2e1c			jsr 	IFloatPullRx
.1588	fa		plx				plx 								; operator
.1589	a5 11		lda $11				lda 	IFR0+IExp 					; if check types match.
.158b	45 15		eor $15				eor 	IFR1+IExp
.158d	30 08		bmi $1597			bmi 	_EEType
.158f					_EETypeOkay:
.158f	8a		txa				txa
.1590	0a		asl a				asl 	a 							; double -> X
.1591	aa		tax				tax
.1592	20 9a 15	jsr $159a			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1595	80 cf		bra $1566			bra 	_EELoop
.1597					_EEType:
.1597	4c a1 23	jmp $23a1		jmp	ErrorV_type
.159a					_EECallBinary:
.159a	7c c3 1a	jmp ($1ac3,x)			jmp 	(VectorTable,x)
.159d					_EEExit:
.159d	68		pla				pla 								; throw precedence
.159e					_EEExit2:
.159e	18		clc				clc
.159f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.15a0					EXPEvalNumber:
.15a0	20 60 15	jsr $1560			jsr 	EXPEvaluateExpression
.15a3	24 11		bit $11				bit 	IFR0+IExp
.15a5	30 01		bmi $15a8			bmi 	EVUType
.15a7	60		rts				rts
.15a8					EVUType:
.15a8	4c a1 23	jmp $23a1		jmp	ErrorV_type
.15ab					EXPEvalInteger:
.15ab	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.15ae	20 ac 2b	jsr $2bac			jsr 	IFloatIntegerR0
.15b1	60		rts				rts
.15b2					EXPEvalInteger16:
.15b2	20 ab 15	jsr $15ab			jsr 	EXPEvalInteger
.15b5	a5 10		lda $10				lda 	IFR0+IM2
.15b7	d0 21		bne $15da			bne 	EVURange
.15b9	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15bb	a5 0e		lda $0e				lda 	IFR0+IM0
.15bd	60		rts				rts
.15be					EXPEvalInteger8:
.15be	20 ab 15	jsr $15ab			jsr 	EXPEvalInteger
.15c1	a5 10		lda $10				lda 	IFR0+IM2
.15c3	05 0f		ora $0f				ora 	IFR0+IM1
.15c5	d0 13		bne $15da			bne 	EVURange
.15c7	a5 0e		lda $0e				lda 	IFR0+IM0
.15c9	60		rts				rts
.15ca					EXPEvalString:
.15ca	20 60 15	jsr $1560			jsr 	EXPEvaluateExpression
.15cd	24 11		bit $11				bit 	IFR0+IExp
.15cf	10 d7		bpl $15a8			bpl 	EVUType
.15d1	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15d3	86 21		stx $21				stx 	zTemp0+1
.15d5	a5 0e		lda $0e				lda 	IFR0+IM0
.15d7	85 20		sta $20				sta 	zTemp0
.15d9	60		rts				rts
.15da					EVURange:
.15da	4c 82 23	jmp $2382		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.15dd					EXPTermValueR0:
.15dd	20 28 16	jsr $1628			jsr 	EXPTermR0 					; get term
.15e0	90 45		bcc $1627			bcc 	_ETVNotReference 			; exit if value.
.15e2	5a		phy				phy
.15e3	a0 03		ldy #$03			ldy 	#3 							; get type
.15e5	b1 0e		lda ($0e),y			lda 	(IFR0),y
.15e7	30 14		bmi $15fd			bmi 	_ETVDereferenceString
.15e9	85 11		sta $11				sta 	IFR0+IExp 					; dereference to R0
.15eb	88		dey				dey
.15ec	b1 0e		lda ($0e),y			lda 	(IFR0),y
.15ee	85 10		sta $10				sta 	IFR0+IM2
.15f0	88		dey				dey
.15f1	b1 0e		lda ($0e),y			lda 	(IFR0),y
.15f3	aa		tax				tax
.15f4	b2 0e		lda ($0e)			lda 	(IFR0)
.15f6	86 0f		stx $0f				stx 	IFR0+IM1
.15f8	85 0e		sta $0e				sta 	IFR0+IM0
.15fa	7a		ply				ply
.15fb	18		clc				clc
.15fc	60		rts				rts
.15fd					_ETVDereferenceString:
.15fd	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.15ff	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1601	12 0e		ora ($0e)			ora 	(IFR0)
.1603	f0 11		beq $1616			beq 	_ETVNull
.1605	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; load address of string to XA
.1607	aa		tax				tax
.1608	b2 0e		lda ($0e)			lda 	(IFR0)
.160a	18		clc				clc 								; add two so points to actual string.
.160b	69 02		adc #$02			adc 	#2
.160d	90 01		bcc $1610			bcc 	_EVDSNoCarry
.160f	e8		inx				inx
.1610					_EVDSNoCarry:
.1610	86 0f		stx $0f				stx 	IFR0+IM1 					; save in slots
.1612	85 0e		sta $0e				sta 	IFR0
.1614	80 08		bra $161e			bra 	_ETVFillExit 				; tidy up and exit.
.1616					_ETVNull:
.1616	a9 26		lda #$26			lda 	#_EVTNString & $FF
.1618	85 0e		sta $0e				sta 	IFR0+IM0
.161a	a9 16		lda #$16			lda 	#_EVTNString >> 8
.161c	85 0f		sta $0f				sta 	IFR0+IM1
.161e					_ETVFillExit:
.161e	64 10		stz $10				stz 	IFR0+IM2
.1620	a9 80		lda #$80			lda 	#$80
.1622	85 11		sta $11				sta 	IFR0+IExp
.1624	7a		ply				ply
.1625	60		rts				rts
.1626					_EVTNString:
>1626	00						.byte 	0
.1627					_ETVNotReference:
.1627	60		rts				rts
.1628					EXPTermR0:
.1628	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token/element
.162a	30 10		bmi $163c			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.162c	c8		iny				iny 								; consume element
.162d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.162f	b0 08		bcs $1639			bcs 	_ETMIdentifier
.1631	20 60 16	jsr $1660			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1634	20 93 16	jsr $1693			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1637	18		clc				clc 								; return value
.1638	60		rts				rts
.1639					_ETMIdentifier:
.1639	4c 43 28	jmp $2843			jmp 	VARCheckSimple 				; check simple variables A-Z
.163c					_ETMIsUnaryOrMinus:
.163c	c8		iny				iny 								; consume element
.163d	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.163f	d0 0a		bne $164b			bne 	_ETMCheckUnary
.1641	20 dd 15	jsr $15dd			jsr 	EXPTermValueR0 				; get a term to negate
.1644	a2 0e		ldx #$0e			ldx 	#IFR0 						; and negate it
.1646	20 b7 2e	jsr $2eb7			jsr 	IFloatNegate
.1649	18		clc				clc
.164a	60		rts				rts
.164b					_ETMCheckUnary:
.164b	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.164d	90 0e		bcc $165d			bcc 	_ETMUnarySyntax
.164f	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1651	b0 0a		bcs $165d			bcs 	_ETMUnarySyntax
.1653	0a		asl a				asl 	a
.1654	aa		tax				tax
.1655	20 5a 16	jsr $165a			jsr 	_ETMCallUnaryFunction
.1658	18		clc				clc
.1659	60		rts				rts
.165a					_ETMCallUnaryFunction:
.165a	7c c3 1a	jmp ($1ac3,x)			jmp 	(VectorTable,x)
.165d					_ETMUnarySyntax:
.165d	4c 71 23	jmp $2371		jmp	ErrorV_syntax
.1660					EXPExtractTokenisedInteger:
.1660	85 0e		sta $0e				sta 	IFR0+IM0 					; initial value in IM0
.1662	64 11		stz $11				stz 	IFR0+IExp
.1664	64 0f		stz $0f				stz 	IFR0+IM1
.1666	64 10		stz $10				stz 	IFR0+IM2
.1668					_ETMConstant:
.1668	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.166a	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.166c	b0 24		bcs $1692			bcs 	_ETMCExit 					; no.
.166e	a6 10		ldx $10				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1670	a5 0f		lda $0f				lda 	IFR0+IM1
.1672	85 10		sta $10				sta 	IFR0+IM2
.1674	a5 0e		lda $0e				lda 	IFR0+IM0
.1676	85 0f		sta $0f				sta 	IFR0+IM1
.1678	64 0e		stz $0e				stz 	IFR0+IM0
.167a	8a		txa				txa
.167b	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.167c	66 10		ror $10				ror 	IFR0+IM2
.167e	66 0f		ror $0f				ror 	IFR0+IM1
.1680	66 0e		ror $0e				ror 	IFR0+IM0
.1682	4a		lsr a				lsr 	a
.1683	66 10		ror $10				ror 	IFR0+IM2
.1685	66 0f		ror $0f				ror 	IFR0+IM1
.1687	66 0e		ror $0e				ror 	IFR0+IM0
.1689	a5 0e		lda $0e				lda 	IFR0+IM0 					; LSB in.
.168b	11 1e		ora ($1e),y			ora 	(codePtr),y
.168d	85 0e		sta $0e				sta 	IFR0+IM0
.168f	c8		iny				iny 								; consume, loop back
.1690	80 d6		bra $1668			bra 	_ETMConstant
.1692					_ETMCExit:
.1692	60		rts				rts
.1693					EXPCheckDecimalFollows:
.1693	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check for decimal
.1695	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1697	d0 19		bne $16b2			bne 	_ETMCDExit
.1699	c8		iny				iny 								; consume token.
.169a	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get count
.169c	5a		phy				phy									; save current position
.169d	48		pha				pha 								; save count of chars.
.169e	38		sec				sec 								; address into YX : y + codePtr+1
.169f	98		tya				tya
.16a0	65 1e		adc $1e				adc 	codePtr
.16a2	aa		tax				tax
.16a3	a5 1f		lda $1f				lda 	codePtr+1
.16a5	69 00		adc #$00			adc 	#0
.16a7	a8		tay				tay
.16a8	68		pla				pla 								; get count.
.16a9	20 50 2d	jsr $2d50			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.16ac	7a		ply				ply 								; go to next token.
.16ad	98		tya				tya
.16ae	38		sec				sec
.16af	71 1e		adc ($1e),y			adc 	(codePtr),y
.16b1	a8		tay				tay
.16b2					_ETMCDExit:
.16b2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.16b3					EXPUnaryAbs:
.16b3	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 					; number to R0
.16b6	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.16b9	20 f0 2a	jsr $2af0			jsr 	IFloatAbsoluteR0
.16bc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.16bd					EXPUnaryAsc:
.16bd	20 ca 15	jsr $15ca			jsr 	EXPEvalString 					; string to R0, zTemp0
.16c0	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.16c3	b2 20		lda ($20)			lda 	(zTemp0) 						; length 0 ?
.16c5	f0 06		beq $16cd			beq 	_EXAZero 						; if so return 0
.16c7	5a		phy				phy 									; otherwise get first character
.16c8	a0 01		ldy #$01			ldy 	#1
.16ca	b1 20		lda ($20),y			lda 	(zTemp0),y
.16cc	7a		ply				ply
.16cd					_EXAZero:
.16cd	a2 0e		ldx #$0e			ldx 	#IFR0
.16cf	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.16d2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.16d3					EXPUnaryChr:
.16d3	20 be 15	jsr $15be			jsr 	EXPEvalInteger8 				; expr
.16d6	48		pha				pha 									; push on stack
.16d7	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.16da	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.16dc	20 fa 25	jsr $25fa			jsr 	StringTempAllocate
.16df	68		pla				pla
.16e0	20 2f 26	jsr $262f			jsr 	StringTempWrite
.16e3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.16e4					EXPUnaryDec:
.16e4	20 ca 15	jsr $15ca			jsr 	EXPEvalString 					; string to R0, zTemp0
.16e7	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.16ea	5a		phy				phy
.16eb	a2 0e		ldx #$0e			ldx 	#IFR0 							; zero the result
.16ed	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.16f0	b2 20		lda ($20)			lda 	(zTemp0)						; read the length to X
.16f2	f0 3b		beq $172f			beq 	_EUDError 						; empty string
.16f4	aa		tax				tax
.16f5	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.16f7					_EUDLoop:
.16f7	b1 20		lda ($20),y			lda 	(zTemp0),y 						; get next
.16f9	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.16fb	90 02		bcc $16ff			bcc 	_EUDNoCase
.16fd	e9 20		sbc #$20			sbc 	#$20
.16ff					_EUDNoCase:
.16ff	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1701	90 2c		bcc $172f			bcc 	_EUDError
.1703	c9 3a		cmp #$3a			cmp 	#'9'+1
.1705	90 0a		bcc $1711			bcc 	_EUDOkay
.1707	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1709	90 24		bcc $172f			bcc 	_EUDError
.170b	c9 47		cmp #$47			cmp 	#'F'+1
.170d	b0 20		bcs $172f			bcs 	_EUDError
.170f	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1711					_EUDOkay:
.1711	29 0f		and #$0f			and 	#15 							; make constant
.1713	da		phx				phx
.1714	48		pha				pha
.1715	a2 0e		ldx #$0e			ldx 	#IFR0 							; multiply R0 x 16
.1717	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.171a	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.171d	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1720	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1723	68		pla				pla 									; pop constant and OR in
.1724	fa		plx				plx
.1725	05 0e		ora $0e				ora 	IFR0+IM0
.1727	85 0e		sta $0e				sta 	IFR0+IM0
.1729	c8		iny				iny 									; next
.172a	ca		dex				dex
.172b	d0 ca		bne $16f7			bne 	_EUDLoop
.172d	7a		ply				ply
.172e	60		rts				rts
.172f					_EUDError:
.172f	4c 93 23	jmp $2393		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1732					EXPUnaryInlineDec:
.1732	4c 71 23	jmp $2371		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1735					EXPUnaryPeek:
.1735	20 b2 15	jsr $15b2			jsr 	EXPEvalInteger16 				; number to R0
.1738	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.173b	b2 0e		lda ($0e)			lda 	(IFR0)
.173d	a2 0e		ldx #$0e			ldx 	#IFR0
.173f	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.1742	60		rts				rts
.1743					EXPUnaryDeek:
.1743	20 b2 15	jsr $15b2			jsr 	EXPEvalInteger16 				; number to R0
.1746	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.1749	5a		phy				phy
.174a	a0 01		ldy #$01			ldy 	#1
.174c	b1 0e		lda ($0e),y			lda 	(IFR0),y
.174e	7a		ply				ply
.174f	48		pha				pha
.1750	b2 0e		lda ($0e)			lda 	(IFR0)
.1752	a2 0e		ldx #$0e			ldx 	#IFR0
.1754	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.1757	68		pla				pla
.1758	85 0f		sta $0f				sta 	IFR0+IM1
.175a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.175b					EXPUnaryNull:
.175b	20 dd 15	jsr $15dd			jsr 	EXPTermValueR0
.175e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.175f					EXPUnaryFrac:
.175f	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 					; number to R0
.1762	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.1765	20 56 2b	jsr $2b56			jsr 	IFloatFractionalR0
.1768	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1769					EXPUnaryInt:
.1769	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 					; number to R0
.176c	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.176f	20 ac 2b	jsr $2bac			jsr 	IFloatIntegerR0
.1772	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1773					EXPUnaryLen:
.1773	20 ca 15	jsr $15ca			jsr 	EXPEvalString 					; string to R0, zTemp0
.1776	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.1779	b2 20		lda ($20)			lda 	(zTemp0)
.177b	a2 0e		ldx #$0e			ldx 	#IFR0
.177d	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.1780	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1781					EXPUnaryParenthesis:
.1781	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 					; number to R0
.1784	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.1787	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1788					EXPUnaryRnd:
.1788	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 				; number to R0
.178b	20 04 25	jsr $2504			jsr 	ERRCheckRParen 				; )
.178e	a2 0e		ldx #$0e			ldx 	#IFR0
.1790	20 a7 17	jsr $17a7			jsr 	EXPLoadInRandom
.1793	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1795	85 11		sta $11				sta 	IFR0+IExp
.1797	60		rts				rts
.1798					ExpUnaryRand:
.1798	20 ab 15	jsr $15ab			jsr 	EXPEvalInteger 				; integer to R0
.179b	20 04 25	jsr $2504			jsr 	ERRCheckRParen 				; )
.179e	a2 12		ldx #$12			ldx 	#IFR1 						; random to R1
.17a0	20 a7 17	jsr $17a7			jsr 	EXPLoadInRandom
.17a3	20 1d 2a	jsr $2a1d			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.17a6	60		rts				rts
.17a7					EXPLoadInRandom:
.17a7	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.17aa	20 bc 17	jsr $17bc			jsr 	EXPRandom32
.17ad	95 00		sta $00,x			sta 	IM0,x
.17af	20 bc 17	jsr $17bc			jsr 	EXPRandom32
.17b2	95 01		sta $01,x			sta 	IM1,x
.17b4	20 bc 17	jsr $17bc			jsr 	EXPRandom32
.17b7	29 7f		and #$7f			and 	#$7F
.17b9	95 02		sta $02,x			sta 	IM2,x
.17bb	60		rts				rts
.17bc					EXPRandom32:
.17bc	5a		phy				phy
.17bd	a0 08		ldy #$08			ldy 	#8
.17bf	ad 0b 05	lda $050b			lda 	EXPSeed+0
.17c2	0d 0c 05	ora $050c			ora 	EXPSeed+1
.17c5	0d 0d 05	ora $050d			ora 	EXPSeed+2
.17c8	0d 0e 05	ora $050e			ora 	EXPSeed+3
.17cb	d0 08		bne $17d5			bne 	_EXPRNoReset
.17cd	ee 0b 05	inc $050b			inc 	EXPSeed+0
.17d0	a0 10		ldy #$10			ldy 	#16
.17d2	8c 0e 05	sty $050e			sty 	EXPSeed+3
.17d5					_EXPRNoReset:
.17d5	ad 0b 05	lda $050b			lda 	EXPSeed+0
.17d8					_EXPRLoop:
.17d8	0a		asl a				asl		a
.17d9	2e 0c 05	rol $050c			rol 	EXPSeed+1
.17dc	2e 0d 05	rol $050d			rol 	EXPSeed+2
.17df	2e 0e 05	rol $050e			rol 	EXPSeed+3
.17e2	90 02		bcc $17e6			bcc 	_EXPRNoEOR
.17e4	49 c5		eor #$c5			eor 	#$C5
.17e6					_EXPRNoEOR:
.17e6	88		dey				dey
.17e7	d0 ef		bne $17d8			bne 	_EXPRLoop
.17e9	8d 0b 05	sta $050b			sta 	EXPSeed+0
.17ec	7a		ply				ply
.17ed	60		rts				rts
.050b					EXPSeed:
>050b							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.17ee					EXPUnarySgn:
.17ee	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 					; number to R0
.17f1	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.17f4	a2 12		ldx #$12			ldx 	#IFR1 							; copy to R1
.17f6	20 4e 2e	jsr $2e4e			jsr 	IFloatCopyToRegister
.17f9	a2 0e		ldx #$0e			ldx 	#IFR0 							; R0 = 0
.17fb	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.17fe	a2 12		ldx #$12			ldx 	#IFR1
.1800	20 7a 2b	jsr $2b7a			jsr 	IFloatCompare 					; compare R1 vs 0.
.1803	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1804					EXPUnarySqr:
.1804	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 					; number to R0
.1807	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.180a	20 f8 2a	jsr $2af8			jsr 	IFloatSquareRootR0 				; square root.
.180d	b0 01		bcs $1810			bcs 	_EUSValue
.180f	60		rts				rts
.1810					_EUSValue:
.1810	4c 82 23	jmp $2382		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1813					EXPUnaryHex:
.1813	20 ab 15	jsr $15ab			jsr 	EXPEvalInteger 					; expr
.1816	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.1819	5a		phy				phy
.181a	a9 10		lda #$10			lda 	#16
.181c	20 4d 2c	jsr $2c4d			jsr 	IFloatIntegerToStringR0
.181f	80 0a		bra $182b			bra 	EUSMain
.1821					EXPUnaryStr:
.1821	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 					; expr
.1824	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.1827	5a		phy				phy
.1828	20 a9 2c	jsr $2ca9			jsr 	IFloatFloatToStringR0 			; convert to string
.182b					EUSMain:
.182b	b0 18		bcs $1845			bcs 	_EUSError
.182d	86 20		stx $20				stx 	zTemp0 							; save string address
.182f	84 21		sty $21				sty 	zTemp0+1
.1831	48		pha				pha 									; save count
.1832	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1834	20 fa 25	jsr $25fa			jsr 	StringTempAllocate
.1837	fa		plx				plx 									; count in X
.1838	a0 00		ldy #$00			ldy 	#0
.183a					_EUSCopy:
.183a	b1 20		lda ($20),y			lda 	(zTemp0),y
.183c	c8		iny				iny
.183d	20 2f 26	jsr $262f			jsr 	StringTempWrite
.1840	ca		dex				dex
.1841	d0 f7		bne $183a			bne	 	_EUSCopy
.1843	7a		ply				ply
.1844	60		rts				rts
.1845					_EUSError:
.1845	4c 82 23	jmp $2382		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1848					EXPUnaryInlineString:
.1848	18		clc				clc 								; physical address -> IM0,1
.1849	98		tya				tya
.184a	65 1e		adc $1e				adc 	codePtr
.184c	85 0e		sta $0e				sta 	IFR0+IM0
.184e	a5 1f		lda $1f				lda 	codePtr+1
.1850	69 00		adc #$00			adc 	#0
.1852	85 0f		sta $0f				sta 	IFR0+IM1
.1854	64 10		stz $10				stz 	IFR0+IM2 					; fill in rest
.1856	a9 80		lda #$80			lda 	#$80
.1858	85 11		sta $11				sta 	IFR0+IExp
.185a	98		tya				tya	 								; skip over it.
.185b	38		sec				sec
.185c	71 1e		adc ($1e),y			adc 	(codePtr),y
.185e	a8		tay				tay
.185f	60		rts				rts
.1860					_EXPUISRange:
.1860	4c 82 23	jmp $2382		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1863					EXPUnaryLeft:
.1863	20 a9 18	jsr $18a9			jsr 	EXPCommonStart 					; <string>,
.1866	48		pha				pha 									; save string address on stack
.1867	da		phx				phx
.1868	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.186a	48		pha				pha
.186b	20 be 15	jsr $15be			jsr 	EXPEvalInteger8 				; characters to do
.186e	80 44		bra $18b4			bra 	EXPSubstringCommon
.1870					EXPUnaryRight:
.1870	20 a9 18	jsr $18a9			jsr 	EXPCommonStart 					; <string>,
.1873	48		pha				pha 									; save string address on stack
.1874	da		phx				phx
.1875	b2 0e		lda ($0e)			lda 	(IFR0) 							; the string length => stack.
.1877	48		pha				pha
.1878	20 be 15	jsr $15be			jsr 	EXPEvalInteger8 				; characters to do
.187b	85 20		sta $20				sta 	zTemp0 							; calculate length - required, start point.
.187d	68		pla				pla
.187e	38		sec				sec
.187f	e5 20		sbc $20				sbc 	zTemp0
.1881	b0 02		bcs $1885			bcs 	_EUROffLeft
.1883	a9 00		lda #$00			lda 	#0
.1885					_EUROffLeft:
.1885	48		pha				pha 									; start pos
.1886	a9 ff		lda #$ff			lda 	#255
.1888	80 2a		bra $18b4			bra 	EXPSubstringCommon
.188a					EXPUnaryMid:
.188a	20 a9 18	jsr $18a9			jsr 	EXPCommonStart 					; <string>,
.188d	48		pha				pha 									; save string address on stack
.188e	da		phx				phx
.188f	20 be 15	jsr $15be			jsr 	EXPEvalInteger8 				; characters start
.1892	f0 12		beq $18a6			beq 	_EUSError 						; 1 is left
.1894	3a		dec a				dec 	a 								; zero based.
.1895	48		pha				pha
.1896	b1 1e		lda ($1e),y			lda 	(codePtr),y 					; comma follows
.1898	c9 99		cmp #$99			cmp 	#PR_COMMA
.189a	f0 04		beq $18a0			beq 	_EUMLength 						; if so m is provided
.189c	a9 ff		lda #$ff			lda 	#255 							; default m
.189e	80 14		bra $18b4			bra 	EXPSubstringCommon
.18a0					_EUMLength:
.18a0	c8		iny				iny 									; consume comma
.18a1	20 be 15	jsr $15be			jsr 	EXPEvalInteger8 				; characters to do
.18a4	80 0e		bra $18b4			bra 	EXPSubstringCommon
.18a6					_EUSError:
.18a6	4c 93 23	jmp $2393		jmp	ErrorV_value
.18a9					EXPCommonStart:
.18a9	20 ca 15	jsr $15ca			jsr 	EXPEvalString
.18ac	20 0c 25	jsr $250c			jsr 	ERRCheckComma
.18af	a5 0e		lda $0e				lda 	IFR0+IM0
.18b1	a6 0f		ldx $0f				ldx 	IFR0+IM1
.18b3	60		rts				rts
.18b4					EXPSubstringCommon:
.18b4	85 22		sta $22				sta 	zTemp1 							; count to do in zTemp1.
.18b6	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; check right bracket.
.18b9	68		pla				pla 									; start position
.18ba	85 23		sta $23				sta 	zTemp1+1 						; save in zTemp1+1
.18bc	fa		plx				plx 									; get string address to zTemp2.
.18bd	86 25		stx $25				stx 	zTemp2+1
.18bf	68		pla				pla
.18c0	85 24		sta $24				sta 	zTemp2
.18c2	38		sec				sec 									; length - start is the max count of chars
.18c3	b2 24		lda ($24)			lda 	(zTemp2)
.18c5	e5 23		sbc $23				sbc 	zTemp1+1
.18c7	c5 22		cmp $22				cmp 	zTemp1 							; if available < count
.18c9	b0 02		bcs $18cd			bcs 	_EXPSSNoTrim
.18cb	85 22		sta $22				sta 	zTemp1 							; update count with available
.18cd					_EXPSSNoTrim:
.18cd	a5 22		lda $22				lda 	zTemp1 							; chars required.
.18cf	20 fa 25	jsr $25fa			jsr 	StringTempAllocate 				; allocate memory for it.
.18d2	a5 22		lda $22				lda 	zTemp1 							; zero length string
.18d4	f0 15		beq $18eb			beq 	_EXPSSExit
.18d6	a5 23		lda $23				lda 	zTemp1+1 						; if length >= start exit
.18d8	d2 24		cmp ($24)			cmp 	(zTemp2)
.18da	b0 0f		bcs $18eb			bcs 	_EXPSSExit
.18dc	5a		phy				phy
.18dd	a4 23		ldy $23				ldy 	zTemp1+1 						; start position
.18df	c8		iny				iny 									; +1 for the length byte
.18e0					_EXPSSCopy:
.18e0	b1 24		lda ($24),y			lda 	(zTemp2),y
.18e2	20 2f 26	jsr $262f			jsr 	StringTempWrite
.18e5	c8		iny				iny
.18e6	c6 22		dec $22				dec 	zTemp1
.18e8	d0 f6		bne $18e0			bne 	_EXPSSCopy
.18ea	7a		ply				ply
.18eb					_EXPSSExit:
.18eb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.18ec					EXPUnaryVal:
.18ec	20 ca 15	jsr $15ca			jsr 	EXPEvalString 					; string to R0, zTemp0
.18ef	20 04 25	jsr $2504			jsr 	ERRCheckRParen 					; )
.18f2	5a		phy				phy
.18f3	18		clc				clc
.18f4	a5 20		lda $20				lda		zTemp0 							; point XY to the text
.18f6	69 01		adc #$01			adc 	#1
.18f8	aa		tax				tax
.18f9	a5 21		lda $21				lda 	zTemp0+1
.18fb	69 00		adc #$00			adc 	#0
.18fd	a8		tay				tay
.18fe	b2 20		lda ($20)			lda 	(zTemp0) 						; get length.
.1900	20 10 2d	jsr $2d10			jsr 	IFloatStringToFloatR0 			; do conversion
.1903	b0 02		bcs $1907			bcs 	_EUVError
.1905	7a		ply				ply
.1906	60		rts				rts
.1907					_EUVError:
.1907	4c 93 23	jmp $2393		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.190a					BinaryPrecedence:
>190a	02					.byte	 2	; $ef =
>190b	02					.byte	 2	; $f0 <>
>190c	02					.byte	 2	; $f1 <=
>190d	02					.byte	 2	; $f2 <
>190e	02					.byte	 2	; $f3 >=
>190f	02					.byte	 2	; $f4 >
>1910	01					.byte	 1	; $f5 XOR
>1911	01					.byte	 1	; $f6 OR
>1912	01					.byte	 1	; $f7 AND
>1913	04					.byte	 4	; $f8 DIV
>1914	04					.byte	 4	; $f9 MOD
>1915	04					.byte	 4	; $fa <<
>1916	04					.byte	 4	; $fb >>
>1917	04					.byte	 4	; $fc /
>1918	04					.byte	 4	; $fd *
>1919	03					.byte	 3	; $fe -
>191a	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.191b					StructureOffsets:
>191b	01					.byte	1  	; $80 REPEAT
>191c	ff					.byte	255	; $81 UNTIL
>191d	01					.byte	1  	; $82 WHILE
>191e	ff					.byte	255	; $83 WEND
>191f	01					.byte	1  	; $84 IF
>1920	ff					.byte	255	; $85 ENDIF
>1921	01					.byte	1  	; $86 DO
>1922	ff					.byte	255	; $87 LOOP
>1923	01					.byte	1  	; $88 PROC
>1924	ff					.byte	255	; $89 ENDPROC
>1925	01					.byte	1  	; $8a FOR
>1926	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1927					StandardTokens:
>1927	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>192e	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1934	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>193a	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>193f	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1942	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1948	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>194b	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1950	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1955	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>195d	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1961	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1966	00					.byte	$00                                     	; $8c [[end]]
>1967	00					.byte	$00                                     	; $8d [[shift]]
>1968	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>196d	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1972	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1975	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>197a	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>197e	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1984	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>198a	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>198f	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1993	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1997	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>199c	01 2c					.byte	$01,$2c                                 	; $99 ,
>199e	01 3b					.byte	$01,$3b                                 	; $9a ;
>19a0	01 3a					.byte	$01,$3a                                 	; $9b :
>19a2	01 27					.byte	$01,$27                                 	; $9c '
>19a4	01 29					.byte	$01,$29                                 	; $9d )
>19a6	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>19aa	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>19b0	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>19b4	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>19b8	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>19bd	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>19c1	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>19c8	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>19cd	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>19d2	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>19d7	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>19dc	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>19e1	00					.byte	0											; $aa
>19e2	00					.byte	0											; $ab
>19e3	00					.byte	0											; $ac
>19e4	00					.byte	0											; $ad
>19e5	00					.byte	0											; $ae
>19e6	00					.byte	0											; $af
>19e7	00					.byte	0											; $b0
>19e8	00					.byte	0											; $b1
>19e9	00					.byte	0											; $b2
>19ea	00					.byte	0											; $b3
>19eb	00					.byte	0											; $b4
>19ec	00					.byte	0											; $b5
>19ed	00					.byte	0											; $b6
>19ee	00					.byte	0											; $b7
>19ef	00					.byte	0											; $b8
>19f0	00					.byte	0											; $b9
>19f1	00					.byte	0											; $ba
>19f2	00					.byte	0											; $bb
>19f3	00					.byte	0											; $bc
>19f4	00					.byte	0											; $bd
>19f5	00					.byte	0											; $be
>19f6	00					.byte	0											; $bf
>19f7	00					.byte	0											; $c0
>19f8	00					.byte	0											; $c1
>19f9	00					.byte	0											; $c2
>19fa	00					.byte	0											; $c3
>19fb	00					.byte	0											; $c4
>19fc	00					.byte	0											; $c5
>19fd	00					.byte	0											; $c6
>19fe	00					.byte	0											; $c7
>19ff	00					.byte	0											; $c8
>1a00	00					.byte	0											; $c9
>1a01	00					.byte	0											; $ca
>1a02	00					.byte	0											; $cb
>1a03	00					.byte	0											; $cc
>1a04	00					.byte	0											; $cd
>1a05	00					.byte	0											; $ce
>1a06	00					.byte	0											; $cf
>1a07	00					.byte	0											; $d0
>1a08	00					.byte	0											; $d1
>1a09	00					.byte	0											; $d2
>1a0a	00					.byte	0											; $d3
>1a0b	00					.byte	0											; $d4
>1a0c	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1a12	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1a18	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1a20	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1a27	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1a2d	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1a33	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1a38	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1a3d	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1a42	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1a47	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1a4c	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1a52	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1a57	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1a5f	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1a66	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1a6b	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1a70	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1a76	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1a7b	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1a81	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1a86	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1a8c	01 28					.byte	$01,$28                                 	; $eb (
>1a8e	01 24					.byte	$01,$24                                 	; $ec $
>1a90	00					.byte	$00                                     	; $ed [[decimal]]
>1a91	00					.byte	$00                                     	; $ee [[string]]
>1a92	01 3d					.byte	$01,$3d                                 	; $ef =
>1a94	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1a97	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1a9a	01 3c					.byte	$01,$3c                                 	; $f2 <
>1a9c	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1a9f	01 3e					.byte	$01,$3e                                 	; $f4 >
>1aa1	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1aa5	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1aa8	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1aac	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1ab0	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1ab4	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1ab7	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1aba	01 2f					.byte	$01,$2f                                 	; $fc /
>1abc	01 2a					.byte	$01,$2a                                 	; $fd *
>1abe	01 2d					.byte	$01,$2d                                 	; $fe -
>1ac0	01 2b					.byte	$01,$2b                                 	; $ff +
>1ac2	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1ac3					VectorTable:
>1ac3	65 22					.word	Command_REPEAT           ; $80 REPEAT
>1ac5	6e 22					.word	Command_UNTIL            ; $81 UNTIL
>1ac7	46 23					.word	Command_WHILE            ; $82 WHILE
>1ac9	65 23					.word	Command_WEND             ; $83 WEND
>1acb	3d 22					.word	IfCommand                ; $84 IF
>1acd	64 22					.word	EndIf                    ; $85 ENDIF
>1acf	da 20					.word	Command_DO               ; $86 DO
>1ad1	f2 20					.word	Command_LOOP             ; $87 LOOP
>1ad3	e0 13					.word	NoExec08                 ; $88 PROC
>1ad5	ce 20					.word	Command_ENDPROC          ; $89 ENDPROC
>1ad7	fb 20					.word	Command_FOR              ; $8a FOR
>1ad9	88 21					.word	Command_NEXT             ; $8b NEXT
>1adb	78 13					.word	RUNEndOfLine             ; $8c [[END]]
>1add	c2 13					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1adf	5d 22					.word	ElseCode                 ; $8e ELSE
>1ae1	e0 13					.word	NoExec01                 ; $8f THEN
>1ae3	e0 13					.word	NoExec02                 ; $90 TO
>1ae5	e0 13					.word	NoExec03                 ; $91 STEP
>1ae7	19 12					.word	CommandLET               ; $92 LET
>1ae9	b4 11					.word	Command_Print            ; $93 PRINT
>1aeb	81 26					.word	NotImplemented           ; $94 INPUT
>1aed	92 20					.word	Command_CALL             ; $95 CALL
>1aef	cb 13					.word	Command_Sys              ; $96 SYS
>1af1	5f 13					.word	Command_REM              ; $97 REM
>1af3	e3 20					.word	Command_EXIT             ; $98 EXIT
>1af5	e0 13					.word	NoExec04                 ; $99 ,
>1af7	e0 13					.word	NoExec05                 ; $9a ;
>1af9	e0 13					.word	NoExec06                 ; $9b :
>1afb	5f 13					.word	Command_REM2             ; $9c '
>1afd	e0 13					.word	NoExec07                 ; $9d )
>1aff	6e 10					.word	CommandDIM               ; $9e DIM
>1b01	1e 10					.word	Command_CLEAR            ; $9f CLEAR
>1b03	56 13					.word	Command_NEW              ; $a0 NEW
>1b05	6c 13					.word	Command_RUN              ; $a1 RUN
>1b07	c8 13					.word	Command_STOP             ; $a2 STOP
>1b09	c5 13					.word	Command_END              ; $a3 END
>1b0b	10 10					.word	Command_ASSERT           ; $a4 ASSERT
>1b0d	91 12					.word	Command_LIST             ; $a5 LIST
>1b0f	81 26					.word	NotImplemented           ; $a6 SAVE
>1b11	81 26					.word	NotImplemented           ; $a7 LOAD
>1b13	8d 11					.word	Command_Poke             ; $a8 POKE
>1b15	8a 11					.word	Command_Doke             ; $a9 DOKE
>1b17	81 26					.word	NotImplemented           ; $aa
>1b19	81 26					.word	NotImplemented           ; $ab
>1b1b	81 26					.word	NotImplemented           ; $ac
>1b1d	81 26					.word	NotImplemented           ; $ad
>1b1f	81 26					.word	NotImplemented           ; $ae
>1b21	81 26					.word	NotImplemented           ; $af
>1b23	81 26					.word	NotImplemented           ; $b0
>1b25	81 26					.word	NotImplemented           ; $b1
>1b27	81 26					.word	NotImplemented           ; $b2
>1b29	81 26					.word	NotImplemented           ; $b3
>1b2b	81 26					.word	NotImplemented           ; $b4
>1b2d	81 26					.word	NotImplemented           ; $b5
>1b2f	81 26					.word	NotImplemented           ; $b6
>1b31	81 26					.word	NotImplemented           ; $b7
>1b33	81 26					.word	NotImplemented           ; $b8
>1b35	81 26					.word	NotImplemented           ; $b9
>1b37	81 26					.word	NotImplemented           ; $ba
>1b39	81 26					.word	NotImplemented           ; $bb
>1b3b	81 26					.word	NotImplemented           ; $bc
>1b3d	81 26					.word	NotImplemented           ; $bd
>1b3f	81 26					.word	NotImplemented           ; $be
>1b41	81 26					.word	NotImplemented           ; $bf
>1b43	81 26					.word	NotImplemented           ; $c0
>1b45	81 26					.word	NotImplemented           ; $c1
>1b47	81 26					.word	NotImplemented           ; $c2
>1b49	81 26					.word	NotImplemented           ; $c3
>1b4b	81 26					.word	NotImplemented           ; $c4
>1b4d	81 26					.word	NotImplemented           ; $c5
>1b4f	81 26					.word	NotImplemented           ; $c6
>1b51	81 26					.word	NotImplemented           ; $c7
>1b53	81 26					.word	NotImplemented           ; $c8
>1b55	81 26					.word	NotImplemented           ; $c9
>1b57	81 26					.word	NotImplemented           ; $ca
>1b59	81 26					.word	NotImplemented           ; $cb
>1b5b	81 26					.word	NotImplemented           ; $cc
>1b5d	81 26					.word	NotImplemented           ; $cd
>1b5f	81 26					.word	NotImplemented           ; $ce
>1b61	81 26					.word	NotImplemented           ; $cf
>1b63	81 26					.word	NotImplemented           ; $d0
>1b65	81 26					.word	NotImplemented           ; $d1
>1b67	81 26					.word	NotImplemented           ; $d2
>1b69	81 26					.word	NotImplemented           ; $d3
>1b6b	81 26					.word	NotImplemented           ; $d4
>1b6d	43 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1b6f	35 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1b71	70 18					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1b73	63 18					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1b75	8a 18					.word	EXPUnaryMid              ; $d9 MID$(
>1b77	21 18					.word	EXPUnaryStr              ; $da STR$(
>1b79	ec 18					.word	EXPUnaryVal              ; $db VAL(
>1b7b	ee 17					.word	EXPUnarySgn              ; $dc SGN(
>1b7d	b3 16					.word	EXPUnaryAbs              ; $dd ABS(
>1b7f	73 17					.word	EXPUnaryLen              ; $de LEN(
>1b81	04 18					.word	EXPUnarySqr              ; $df SQR(
>1b83	d3 16					.word	EXPUnaryChr              ; $e0 CHR$(
>1b85	bd 16					.word	EXPUnaryAsc              ; $e1 ASC(
>1b87	81 26					.word	NotImplemented           ; $e2 INKEY$(
>1b89	81 26					.word	NotImplemented           ; $e3 EVENT(
>1b8b	81 26					.word	NotImplemented           ; $e4 TIME
>1b8d	69 17					.word	EXPUnaryInt              ; $e5 INT(
>1b8f	5f 17					.word	EXPUnaryFrac             ; $e6 FRAC(
>1b91	e4 16					.word	EXPUnaryDec              ; $e7 DEC(
>1b93	13 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1b95	88 17					.word	EXPUnaryRnd              ; $e9 RND(
>1b97	98 17					.word	ExpUnaryRand             ; $ea RAND(
>1b99	81 17					.word	EXPUnaryParenthesis      ; $eb (
>1b9b	5b 17					.word	EXPUnaryNull             ; $ec $
>1b9d	32 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1b9f	48 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1ba1	9d 14					.word	EXPCompareEqual          ; $ef =
>1ba3	b8 14					.word	EXPCompareNotEqual       ; $f0 <>
>1ba5	c1 14					.word	EXPCompareLessEqual      ; $f1 <=
>1ba7	a6 14					.word	EXPCompareLess           ; $f2 <
>1ba9	ca 14					.word	EXPCompareGreaterEqual   ; $f3 >=
>1bab	af 14					.word	EXPCompareGreater        ; $f4 >
>1bad	4a 14					.word	EXPBinXor                ; $f5 XOR
>1baf	3e 14					.word	EXPBinOr                 ; $f6 OR
>1bb1	32 14					.word	EXPBinAnd                ; $f7 AND
>1bb3	0a 14					.word	EXPBinIDiv               ; $f8 DIV
>1bb5	1b 14					.word	EXPBinIMod               ; $f9 MOD
>1bb7	15 15					.word	EXPBinLeft               ; $fa <<
>1bb9	1d 15					.word	EXPBinRight              ; $fb >>
>1bbb	fe 13					.word	EXPBinFDiv               ; $fc /
>1bbd	f5 13					.word	EXPBinMul                ; $fd *
>1bbf	ec 13					.word	EXPBinSub                ; $fe -
>1bc1	e3 13					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1bc3					TOKDetokenise:
.1bc3	86 24		stx $24				stx 	zTemp2 						; save tokenised code in zTemp2
.1bc5	84 25		sty $25				sty 	zTemp2+1
.1bc7	9c 11 05	stz $0511			stz		TOKLastCharacter 			; clear last character
.1bca					_TOKDLoop:
.1bca	20 f9 1b	jsr $1bf9			jsr 	TOKDGet 					; get next
.1bcd	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1bcf	f0 26		beq $1bf7			beq 	_TOKDExit
.1bd1	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1bd3	f0 1d		beq $1bf2			beq 	_TOKDDataItem
.1bd5	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1bd7	f0 19		beq $1bf2			beq 	_TOKDDataItem
.1bd9	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1bdb	10 05		bpl $1be2			bpl 	_TOKDNotToken
.1bdd	20 c1 1c	jsr $1cc1			jsr 	TOKDToken 					; token to text.
.1be0	80 e8		bra $1bca			bra 	_TOKDLoop
.1be2					_TOKDNotToken:
.1be2	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1be4	90 05		bcc $1beb			bcc 	_TOKDNotIdentifier
.1be6	20 34 1c	jsr $1c34			jsr 	TOKDIdentifier
.1be9	80 df		bra $1bca			bra 	_TOKDLoop
.1beb					_TOKDNotIdentifier:
.1beb	a0 0a		ldy #$0a			ldy 	#10
.1bed	20 7d 1c	jsr $1c7d			jsr 	TOKDInteger
.1bf0	80 d8		bra $1bca			bra 	_TOKDLoop
.1bf2					_TOKDDataItem:
.1bf2	20 0f 1c	jsr $1c0f			jsr 	TOKDDataItem
.1bf5	80 d3		bra $1bca			bra 	_TOKDLoop
.1bf7					_TOKDExit:
.1bf7	18		clc				clc
.1bf8	60		rts				rts
.1bf9	b2 24		lda ($24)	TOKDGet:lda 	(zTemp2)
.1bfb	e6 24		inc $24				inc 	zTemp2
.1bfd	d0 02		bne $1c01			bne 	_TKDGExit
.1bff	e6 25		inc $25				inc 	zTemp2+1
.1c01					_TKDGExit:
.1c01	60		rts				rts
.1c02					TOKDOutput:
.1c02	8d 11 05	sta $0511			sta 	TOKLastCharacter
.1c05	6c 0f 05	jmp ($050f)			jmp 	(TOKOutputMethod)
.1c08					TOKSetDetokeniseOutput:
.1c08	8e 0f 05	stx $050f			stx 	TOKOutputMethod
.1c0b	8c 10 05	sty $0510			sty 	TOKOutputMethod+1
.1c0e	60		rts				rts
.050f					TOKOutputMethod:
>050f							.fill 	2
.0511					TOKLastCharacter:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1c0f					TOKDDataItem:
.1c0f	a8		tay				tay 								; type in Y
.1c10	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1c12	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1c14	f0 02		beq $1c18			beq 	_TOKDDIsString
.1c16	a9 2e		lda #$2e			lda 	#'.'
.1c18					_TOKDDIsString:
.1c18	20 02 1c	jsr $1c02			jsr 	TOKDOutput 					; dump it
.1c1b	20 f9 1b	jsr $1bf9			jsr 	TOKDGet 					; get length into X
.1c1e	aa		tax				tax
.1c1f					_TOKDDOutput:
.1c1f	ca		dex				dex 								; are we complete
.1c20	30 08		bmi $1c2a			bmi 	_TOKDDEnd
.1c22	20 f9 1b	jsr $1bf9			jsr 	TOKDGet 					; get character and output it
.1c25	20 02 1c	jsr $1c02			jsr 	TOKDOutput
.1c28	80 f5		bra $1c1f			bra 	_TOKDDOutput
.1c2a					_TOKDDEnd:
.1c2a	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1c2c	d0 05		bne $1c33			bne 	_TOKDDNotString
.1c2e	a9 22		lda #$22			lda 	#'"'
.1c30	20 02 1c	jsr $1c02			jsr 	TOKDOutput
.1c33					_TOKDDNotString:
.1c33	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1c34					TOKDIdentifier:
.1c34	a0 ff		ldy #$ff			ldy 	#$FF
.1c36	8c 12 05	sty $0512			sty 	TOKDIFirstChar
.1c39					_TOKDLoop:
.1c39	a8		tay				tay 								; token in Y
.1c3a	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1c3c	c0 64		cpy #$64			cpy 	#$64
.1c3e	f0 11		beq $1c51			beq 	_TOKDIOutput
.1c40	a9 5f		lda #$5f			lda 	#'_'
.1c42	c0 65		cpy #$65			cpy 	#$65
.1c44	f0 0b		beq $1c51			beq 	_TOKDIOutput
.1c46	98		tya				tya 								; handle a-z
.1c47	18		clc				clc
.1c48	69 21		adc #$21			adc	 	#$21
.1c4a	c0 5a		cpy #$5a			cpy 	#$5A
.1c4c	90 03		bcc $1c51			bcc 	_TOKDIOutput
.1c4e	38		sec				sec 								; handle 0-9
.1c4f	e9 4b		sbc #$4b			sbc 	#$4B
.1c51					_TOKDIOutput:
.1c51	2c 12 05	bit $0512			bit 	TOKDIFirstChar
.1c54	10 08		bpl $1c5e			bpl 	_TOKDINoSpacing
.1c56	48		pha				pha
.1c57	20 f3 1c	jsr $1cf3			jsr 	TOKDSpacing
.1c5a	9c 12 05	stz $0512			stz 	TOKDIFirstChar
.1c5d	68		pla				pla
.1c5e					_TOKDINoSpacing:
.1c5e	20 02 1c	jsr $1c02			jsr 	TOKDOutput
.1c61	20 f9 1b	jsr $1bf9			jsr 	TOKDGet 					; get next token
.1c64	c9 7c		cmp #$7c			cmp 	#$7C
.1c66	90 d1		bcc $1c39			bcc 	_TOKDLoop
.1c68	f0 12		beq $1c7c			beq 	_TOKDIExit 					; it's a number, no tail.
.1c6a	4a		lsr a				lsr 	a 							; string ?
.1c6b	90 07		bcc $1c74			bcc 	_TOKDICheckArray
.1c6d	48		pha				pha
.1c6e	a9 24		lda #$24			lda 	#"$"
.1c70	20 02 1c	jsr $1c02			jsr 	TOKDOutput
.1c73	68		pla				pla
.1c74					_TOKDICheckArray:
.1c74	4a		lsr a				lsr 	a 							; array ?
.1c75	90 05		bcc $1c7c			bcc 	_TOKDIExit
.1c77	a9 28		lda #$28			lda 	#"("
.1c79	20 02 1c	jsr $1c02			jsr 	TOKDOutput
.1c7c					_TOKDIExit:
.1c7c	60		rts				rts
.0512					TOKDIFirstChar:
>0512							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1c7d					TOKDInteger:
.1c7d	5a		phy				phy 								; save base
.1c7e	a2 0e		ldx #$0e			ldx 	#IFR0 						; set into R0
.1c80	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.1c83					_TOKDILoop:
.1c83	b2 24		lda ($24)			lda 	(zTemp2) 					; followed by a 00-3F
.1c85	c9 40		cmp #$40			cmp 	#$40
.1c87	b0 1d		bcs $1ca6			bcs 	_TOKDIHaveInteger
.1c89	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 << 6
.1c8b	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1c8e	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1c91	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1c94	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1c97	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1c9a	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1c9d	20 f9 1b	jsr $1bf9			jsr 	TOKDGet 					; OR byte in.
.1ca0	05 0e		ora $0e				ora 	IFR0+IM0
.1ca2	85 0e		sta $0e				sta 	IFR0+IM0
.1ca4	80 dd		bra $1c83			bra 	_TOKDILoop
.1ca6					_TOKDIHaveInteger:
.1ca6	7a		ply				ply 								; restore base
.1ca7	98		tya				tya 								; base in A
.1ca8	20 4d 2c	jsr $2c4d			jsr 	IFloatIntegerToStringR0
.1cab	86 20		stx $20				stx 	zTemp0
.1cad	84 21		sty $21				sty 	zTemp0+1
.1caf	b2 20		lda ($20)			lda 	(zTemp0)
.1cb1	20 f3 1c	jsr $1cf3			jsr 	TOKDSpacing 				; check spacing okay.
.1cb4	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1cb6					_TOKDOutput:
.1cb6	b1 20		lda ($20),y			lda 	(zTemp0),y
.1cb8	20 02 1c	jsr $1c02			jsr 	TOKDOutput
.1cbb	c8		iny				iny
.1cbc	b1 20		lda ($20),y			lda 	(zTemp0),y
.1cbe	d0 f6		bne $1cb6			bne 	_TOKDOutput
.1cc0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1cc1					TOKDToken:
.1cc1	a2 27		ldx #$27			ldx 	#StandardTokens & $FF
.1cc3	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1cc5					_TOKDSearch:
.1cc5	86 20		stx $20				stx 	zTemp0 						; put table in zTemp0
.1cc7	84 21		sty $21				sty 	zTemp0+1
.1cc9	aa		tax				tax 								; token ID in X.
.1cca					_TOKDFind:
.1cca	ca		dex				dex 								; reached the start
.1ccb	10 0d		bpl $1cda			bpl 	_TOKDFound
.1ccd	38		sec				sec 								; go to next entry
.1cce	b2 20		lda ($20)			lda 	(zTemp0)
.1cd0	65 20		adc $20				adc 	zTemp0
.1cd2	85 20		sta $20				sta 	zTemp0
.1cd4	90 f4		bcc $1cca			bcc 	_TOKDFind
.1cd6	e6 21		inc $21				inc 	zTemp0+1
.1cd8	80 f0		bra $1cca			bra 	_TOKDFind
.1cda					_TOKDFound:
.1cda	b2 20		lda ($20)			lda 	(zTemp0) 					; length to X
.1cdc	f0 14		beq $1cf2			beq 	_TOKDExit
.1cde	aa		tax				tax
.1cdf	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1ce1	b1 20		lda ($20),y			lda 	(zTemp0),y 					; check spacing
.1ce3	20 f3 1c	jsr $1cf3			jsr 	TOKDSpacing
.1ce6					_TOKDOutput:
.1ce6	b1 20		lda ($20),y			lda 	(zTemp0),y
.1ce8	20 4d 20	jsr $204d			jsr 	TOKToLower
.1ceb	20 02 1c	jsr $1c02			jsr 	TOKDOutput
.1cee	c8		iny				iny
.1cef	ca		dex				dex
.1cf0	d0 f4		bne $1ce6			bne 	_TOKDOutput
.1cf2					_TOKDExit:
.1cf2	60		rts				rts
.1cf3					TOKDSpacing:
.1cf3	20 64 20	jsr $2064			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1cf6	90 0d		bcc $1d05			bcc 	_TOKDSExit
.1cf8	ad 11 05	lda $0511			lda 	TOKLastCharacter			; and last character also alphanumeric
.1cfb	20 64 20	jsr $2064			jsr 	TOKIsIdentifierElement
.1cfe	90 05		bcc $1d05			bcc 	_TOKDSExit
.1d00	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1d02	20 02 1c	jsr $1c02			jsr 	TOKDOutput
.1d05					_TOKDSExit:
.1d05	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1d06					PGMDeleteLine:
.1d06	20 b9 1d	jsr $1db9			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d09	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d0b	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1d0e	85 23		sta $23				sta 	zTemp1+1
.1d10					_PGMDLoop:
.1d10	b2 22		lda ($22)			lda 	(zTemp1) 					; finished, not found ?
.1d12	38		sec				sec
.1d13	f0 3a		beq $1d4f			beq 	_PGMDExit
.1d15	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1d17	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d19	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d1c	d0 08		bne $1d26			bne 	_PGMDNext
.1d1e	c8		iny				iny
.1d1f	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d21	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1d24	f0 0d		beq $1d33			beq 	_PGMDDelete
.1d26					_PGMDNext:
.1d26	18		clc				clc
.1d27	b2 22		lda ($22)			lda 	(zTemp1)
.1d29	65 22		adc $22				adc 	zTemp1
.1d2b	85 22		sta $22				sta 	zTemp1
.1d2d	90 e1		bcc $1d10			bcc 	_PGMDLoop
.1d2f	e6 23		inc $23				inc 	zTemp1+1
.1d31	80 dd		bra $1d10			bra 	_PGMDLoop
.1d33					_PGMDDelete:
.1d33	b2 22		lda ($22)			lda 	(zTemp1) 					; offset to next in Y
.1d35	a8		tay				tay
.1d36					_PGMDCopy:
.1d36	b1 22		lda ($22),y			lda 	(zTemp1),y 					; copy down.
.1d38	92 22		sta ($22)			sta 	(zTemp1)
.1d3a	a5 22		lda $22				lda 	zTemp1 						; reached the end ?
.1d3c	c5 20		cmp $20				cmp 	zTemp0
.1d3e	d0 07		bne $1d47			bne 	_PGMDNext2
.1d40	a5 23		lda $23				lda 	zTemp1+1
.1d42	c5 21		cmp $21				cmp 	zTemp0+1
.1d44	18		clc				clc
.1d45	f0 08		beq $1d4f			beq 	_PGMDExit
.1d47					_PGMDNext2:
.1d47	e6 22		inc $22				inc 	zTemp1 						; advance pointer.
.1d49	d0 eb		bne $1d36			bne 	_PGMDCopy
.1d4b	e6 23		inc $23				inc 	zTemp1+1
.1d4d	80 e7		bra $1d36			bra 	_PGMDCopy
.1d4f					_PGMDExit:
.1d4f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1d50					PGMInsertLine:
.1d50	20 b9 1d	jsr $1db9			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d53	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d55	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1d58	85 23		sta $23				sta 	zTemp1+1
.1d5a					_PGMILoop:
.1d5a	b2 22		lda ($22)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1d5c	f0 1c		beq $1d7a			beq 	_PGMIInsert
.1d5e	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1d60	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d62	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d65	c8		iny				iny
.1d66	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d68	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1d6b	b0 0d		bcs $1d7a			bcs 	_PGMIInsert 				; insert here.
.1d6d	18		clc				clc
.1d6e	b2 22		lda ($22)			lda 	(zTemp1)
.1d70	65 22		adc $22				adc 	zTemp1
.1d72	85 22		sta $22				sta 	zTemp1
.1d74	90 e4		bcc $1d5a			bcc 	_PGMILoop
.1d76	e6 23		inc $23				inc 	zTemp1+1
.1d78	80 e0		bra $1d5a			bra 	_PGMILoop
.1d7a					_PGMIInsert:
.1d7a	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1d7d					_PGMIInsertLoop:
.1d7d	b2 20		lda ($20)			lda 	(zTemp0)
.1d7f	91 20		sta ($20),y			sta 	(zTemp0),y
.1d81	a5 22		lda $22				lda 	zTemp1 						; reached insert point
.1d83	c5 20		cmp $20				cmp 	zTemp0
.1d85	d0 06		bne $1d8d			bne 	_PGMINext
.1d87	a5 23		lda $23				lda 	zTemp1+1
.1d89	c5 21		cmp $21				cmp 	zTemp0+1
.1d8b	f0 0a		beq $1d97			beq 	_PGMIInserted
.1d8d					_PGMINext:
.1d8d	a5 20		lda $20				lda 	zTemp0
.1d8f	d0 02		bne $1d93			bne 	_PGMINoBorrow
.1d91	c6 21		dec $21				dec 	zTemp0+1
.1d93					_PGMINoBorrow:
.1d93	c6 20		dec $20				dec 	zTemp0
.1d95	80 e6		bra $1d7d			bra 	_PGMIInsertLoop
.1d97					_PGMIInserted:
.1d97	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1d99					_PGMICopyLoop:
.1d99	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1d9c	91 22		sta ($22),y			sta 	(zTemp1),y
.1d9e	c8		iny				iny
.1d9f	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1da2	d0 f5		bne $1d99			bne 	_PGMICopyLoop
.1da4	18		clc				clc
.1da5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1da6					PGMSetBaseAddress:
.1da6	8e 13 05	stx $0513			stx 	PGMBaseHigh
.1da9	8c 14 05	sty $0514			sty 	PGMEndMemoryHigh
.1dac	60		rts				rts
.1dad					PGMNewProgram:
.1dad	64 20		stz $20				stz 	zTemp0						; copy base address to zTemp0
.1daf	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1db2	85 21		sta $21				sta 	zTemp0+1
.1db4	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1db6	92 20		sta ($20)			sta 	(zTemp0)
.1db8	60		rts				rts
.1db9					PGMEndProgram:
.1db9	64 20		stz $20				stz 	zTemp0 						; copy base address to zTemp0
.1dbb	ad 13 05	lda $0513			lda 	PGMBaseHigh
.1dbe	85 21		sta $21				sta 	zTemp0+1
.1dc0					_PGMEPLoop:
.1dc0	b2 20		lda ($20)			lda 	(zTemp0)
.1dc2	f0 0b		beq $1dcf			beq 	_PGMEPExit
.1dc4	18		clc				clc
.1dc5	65 20		adc $20				adc 	zTemp0
.1dc7	85 20		sta $20				sta 	zTemp0
.1dc9	90 f5		bcc $1dc0			bcc 	_PGMEPLoop
.1dcb	e6 21		inc $21				inc 	zTemp0+1
.1dcd	80 f1		bra $1dc0			bra 	_PGMEPLoop
.1dcf					_PGMEPExit:
.1dcf	60		rts				rts
.0513					PGMBaseHigh:
>0513							.fill 	1
.0514					PGMEndMemoryHigh:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1dd0					TOKResetElement:
.1dd0	9c 15 05	stz $0515			stz 	TOKElement
.1dd3	60		rts				rts
.1dd4					TOKWriteElement:
.1dd4	da		phx				phx
.1dd5	ae 15 05	ldx $0515			ldx 	TOKElement
.1dd8	9d 16 05	sta $0516,x			sta 	TOKElementText,x
.1ddb	9e 17 05	stz $0517,x			stz 	TOKElementText+1,x
.1dde	fa		plx				plx
.1ddf	ee 15 05	inc $0515			inc 	TOKElement
.1de2	60		rts				rts
.0515					TOKElement:
>0515							.fill 	1
.0516					TOKElementText:
>0516							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1de3					TOKTokeniseConstant:
.1de3	a5 0e		lda $0e				lda 	IFR0+IM0 					; check > 64
.1de5	48		pha				pha 								; save on stack
.1de6	29 c0		and #$c0			and 	#$C0
.1de8	05 0f		ora $0f				ora 	IFR0+IM1
.1dea	05 10		ora $10				ora 	IFR0+IM2
.1dec	f0 10		beq $1dfe			beq 	_TTCLess
.1dee	da		phx				phx
.1def	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1df1					_TTCShiftRight:
.1df1	46 10		lsr $10				lsr 	IFR0+IM2
.1df3	66 0f		ror $0f				ror 	IFR0+IM1
.1df5	66 0e		ror $0e				ror 	IFR0+IM0
.1df7	ca		dex				dex
.1df8	d0 f7		bne $1df1			bne 	_TTCShiftRight
.1dfa	fa		plx				plx
.1dfb	20 e3 1d	jsr $1de3			jsr 	TOKTokeniseConstant
.1dfe					_TTCLess:
.1dfe	68		pla				pla
.1dff	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1e01	20 a0 1e	jsr $1ea0			jsr 	TOKWriteA
.1e04	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1e05					TOKTokeniseDecimals:
.1e05	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext 					; consume the .
.1e08	20 da 1f	jsr $1fda			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e0b	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1e0d	20 a0 1e	jsr $1ea0			jsr 	TOKWriteA
.1e10	20 15 1e	jsr $1e15			jsr 	TOKOutputElementBuffer 		; then the buffer
.1e13	18		clc				clc
.1e14	60		rts				rts
.1e15					TOKOutputElementBuffer:
.1e15	ad 15 05	lda $0515			lda 	TOKElement 					; get count and write that
.1e18	20 a0 1e	jsr $1ea0			jsr 	TOKWriteA
.1e1b	a8		tay				tay 								; put in Y
.1e1c	f0 0c		beq $1e2a			beq 	_TOEExit 					; exit if empty which is okay.
.1e1e	a2 01		ldx #$01			ldx 	#1
.1e20					_TOELoop:
.1e20	bd 15 05	lda $0515,x			lda 	TOKElement,x
.1e23	20 a0 1e	jsr $1ea0			jsr 	TOKWriteA
.1e26	e8		inx				inx
.1e27	88		dey				dey
.1e28	d0 f6		bne $1e20			bne 	_TOELoop
.1e2a					_TOEExit:
.1e2a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1e2b					TOKTokenise:
.1e2b	8c 16 06	sty $0616			sty 	TOKDataSource+1 			; save source routine pointer
.1e2e	8e 15 06	stx $0615			stx 	TOKDataSource
.1e31	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1e33	8d 17 06	sta $0617			sta 	TOKIsFirstElement
.1e36	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1e38	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1e3b	9c 01 04	stz $0401			stz 	TOKLineNumber
.1e3e	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1e41					_TOKMainLoop:
.1e41	20 ac 1e	jsr $1eac			jsr 	TOKGet 						; what follows.
.1e44	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1e46	f0 4f		beq $1e97			beq 	_TOKExit
.1e48	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1e4a	d0 05		bne $1e51			bne 	_TOKElement
.1e4c	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext
.1e4f	80 f0		bra $1e41			bra 	_TOKMainLoop
.1e51					_TOKElement:
.1e51	20 58 20	jsr $2058			jsr 	TOKIsDigit 					; is it 0..9
.1e54	90 0a		bcc $1e60			bcc 	_TOKNotDigit
.1e56	20 b1 1f	jsr $1fb1			jsr 	TOKTokeniseInteger 			; get integer
.1e59	b0 43		bcs $1e9e			bcs 	_TOKFail 					; did it fail ?
.1e5b	9c 17 06	stz $0617			stz 	TOKIsFirstElement 			; clear first element flag
.1e5e	80 e1		bra $1e41			bra 	_TOKMainLoop
.1e60					_TOKNotDigit:
.1e60	9c 17 06	stz $0617			stz 	TOKIsFirstElement 			; clear first element flag
.1e63	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1e65	d0 07		bne $1e6e			bne 	_TOKNotHex
.1e67	20 f9 1e	jsr $1ef9			jsr 	TOKTokeniseHexadecimal
.1e6a	b0 32		bcs $1e9e			bcs 	_TOKFail
.1e6c	80 d3		bra $1e41			bra 	_TOKMainLoop
.1e6e					_TOKNotHex:
.1e6e	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1e70	d0 07		bne $1e79			bne 	_TOKNotDecimal
.1e72	20 05 1e	jsr $1e05			jsr 	TOKTokeniseDecimals
.1e75	b0 27		bcs $1e9e			bcs 	_TOKFail
.1e77	80 c8		bra $1e41			bra 	_TOKMainLoop
.1e79					_TOKNotDecimal:
.1e79	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1e7b	d0 07		bne $1e84			bne 	_TOKNotString
.1e7d	20 1f 20	jsr $201f			jsr 	TOKTokeniseString
.1e80	b0 1c		bcs $1e9e			bcs 	_TOKFail
.1e82	80 bd		bra $1e41			bra 	_TOKMainLoop
.1e84					_TOKNotString:
.1e84	20 75 20	jsr $2075			jsr 	TOKIsAlpha 					; identifier ?
.1e87	b0 07		bcs $1e90			bcs 	_TOKIdentifier
.1e89	20 ee 1f	jsr $1fee			jsr 	TOKTokenisePunctuation 		; punctuation
.1e8c	b0 10		bcs $1e9e			bcs 	_TOKFail
.1e8e	80 b1		bra $1e41			bra 	_TOKMainLoop
.1e90					_TOKIdentifier:
.1e90	20 33 1f	jsr $1f33			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1e93	b0 09		bcs $1e9e			bcs 	_TOKFail
.1e95	80 aa		bra $1e41			bra 	_TOKMainLoop
.1e97					_TOKExit:
.1e97	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1e99	20 a0 1e	jsr $1ea0			jsr 	TOKWriteA
.1e9c	18		clc				clc									; return with carry set.
.1e9d	60		rts				rts
.1e9e					_TOKFail:
.1e9e	38		sec				sec
.1e9f	60		rts				rts
.1ea0					TOKWriteA:
.1ea0	da		phx				phx
.1ea1	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1ea4	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1ea7	fa		plx				plx
.1ea8	ee 00 04	inc $0400			inc 	TOKLineSize
.1eab	60		rts				rts
.1eac					TOKGet:
.1eac	18		clc				clc
.1ead	6c 15 06	jmp ($0615)			jmp 	(TOKDataSource)
.1eb0					TOKGetNext:
.1eb0	38		sec				sec
.1eb1	6c 15 06	jmp ($0615)			jmp 	(TOKDataSource)
.0615					TOKDataSource:
>0615							.fill 	2
.0617					TOKIsFirstElement:
>0617							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1eb4					TOKFindToken:
.1eb4	a2 27		ldx #$27			ldx 	#StandardTokens & $FF 		; do this table
.1eb6	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1eb8	20 c3 1e	jsr $1ec3			jsr 	TOKFindTokenXY 				; find it, or not
.1ebb	90 04		bcc $1ec1			bcc 	_TOKFTFail
.1ebd	a2 00		ldx #$00			ldx 	#0
.1ebf	38		sec				sec
.1ec0	60		rts				rts
.1ec1					_TOKFTFail
.1ec1	18		clc				clc
.1ec2	60		rts				rts
.1ec3					TOKFindTokenXY:
.1ec3	86 20		stx $20				stx 	zTemp0 						; save token table address
.1ec5	84 21		sty $21				sty 	zTemp0+1
.1ec7	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1ec9	8d 18 06	sta $0618			sta 	TOKCurrent
.1ecc					_TOKFindLoop:
.1ecc	b2 20		lda ($20)			lda 	(zTemp0) 					; get token length from table
.1ece	18		clc				clc 		 						; clear carry in case of fail
.1ecf	30 17		bmi $1ee8			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1ed1	cd 15 05	cmp $0515			cmp 	TOKElement 					; compare against the element length
.1ed4	d0 13		bne $1ee9			bne 	_TOKNext 					; different, try next.
.1ed6	aa		tax				tax 								; number of chars to compare.
.1ed7	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1ed9					_TOKCompare:
.1ed9	b1 20		lda ($20),y			lda 	(zTemp0),y 					; compare the characters
.1edb	d9 15 05	cmp $0515,y			cmp 	TOKElementText-1,y
.1ede	d0 09		bne $1ee9			bne 	_TOKNext 					; different ? try next
.1ee0	c8		iny				iny 								; compare next two
.1ee1	ca		dex				dex
.1ee2	d0 f5		bne $1ed9			bne 	_TOKCompare 				; until done X characters.
.1ee4	38		sec				sec
.1ee5	ad 18 06	lda $0618			lda 	TOKCurrent 					; return current ID.
.1ee8					_TOKExit:
.1ee8	60		rts				rts
.1ee9					_TOKNext:
.1ee9	ee 18 06	inc $0618			inc 	TOKCurrent 					; increment token #
.1eec	38		sec				sec 								; add length+1 to ptr
.1eed	b2 20		lda ($20)			lda 	(zTemp0)
.1eef	65 20		adc $20				adc 	zTemp0
.1ef1	85 20		sta $20				sta 	zTemp0
.1ef3	90 d7		bcc $1ecc			bcc 	_TOKFindLoop
.1ef5	e6 21		inc $21				inc 	zTemp0+1
.1ef7	80 d3		bra $1ecc			bra 	_TOKFindLoop
.0618					TOKCurrent:
>0618							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1ef9					TOKTokeniseHexadecimal:
.1ef9	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext 					; consume the $
.1efc	a2 0e		ldx #$0e			ldx 	#IFR0
.1efe	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero 				; set R0 = 0
.1f01					_TTHLoop:
.1f01	20 ac 1e	jsr $1eac			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f04	20 82 20	jsr $2082			jsr 	TOKIsHexadecimal
.1f07	90 20		bcc $1f29			bcc 	_TTHDone
.1f09	a2 0e		ldx #$0e			ldx 	#IFR0 						; shift R0 right 4
.1f0b	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1f0e	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1f11	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1f14	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.1f17	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext
.1f1a	38		sec				sec 								; convert to decimal.
.1f1b	e9 30		sbc #$30			sbc 	#48
.1f1d	c9 0a		cmp #$0a			cmp 	#10
.1f1f	90 02		bcc $1f23			bcc 	_TTHNotAlpha
.1f21	e9 07		sbc #$07			sbc 	#7
.1f23					_TTHNotAlpha:
.1f23	05 0e		ora $0e				ora 	IFR0+IM0 					; OR in
.1f25	85 0e		sta $0e				sta 	IFR0+IM0
.1f27	80 d8		bra $1f01			bra 	_TTHLoop
.1f29					_TTHDone:
.1f29	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1f2b	20 a0 1e	jsr $1ea0			jsr 	TOKWriteA
.1f2e	20 e3 1d	jsr $1de3			jsr 	TOKTokeniseConstant 		; write integer out.
.1f31	18		clc				clc
.1f32	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1f33					TOKTokeniseIdentifier:
.1f33	20 d0 1d	jsr $1dd0			jsr 	TOKResetElement 			; extract an identifier
.1f36					_TOKGetIdentifier:
.1f36	20 ac 1e	jsr $1eac			jsr 	TOKGet
.1f39	20 42 20	jsr $2042			jsr 	TOKToUpper
.1f3c	20 64 20	jsr $2064			jsr 	TOKIsIdentifierElement
.1f3f	90 08		bcc $1f49			bcc 	_TOKEndIdent
.1f41	20 d4 1d	jsr $1dd4			jsr		TOKWriteElement
.1f44	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext
.1f47	80 ed		bra $1f36			bra 	_TOKGetIdentifier
.1f49					_TOKEndIdent:
.1f49	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1f4b	d0 06		bne $1f53			bne 	_TOKNotString
.1f4d	20 d4 1d	jsr $1dd4			jsr 	TOKWriteElement 			; add it
.1f50	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext 					; consume it
.1f53					_TOKNotString:
.1f53	20 ac 1e	jsr $1eac			jsr 	TOKGet 						; finally check for (
.1f56	c9 28		cmp #$28			cmp 	#"("
.1f58	d0 06		bne $1f60			bne 	_TOKNoArray
.1f5a	20 d4 1d	jsr $1dd4			jsr 	TOKWriteElement 			; add it
.1f5d	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext 					; consume it
.1f60					_TOKNoArray:
.1f60	20 b4 1e	jsr $1eb4			jsr 	TOKFindToken 				; find it
.1f63	90 05		bcc $1f6a			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1f65	20 a0 1e	jsr $1ea0			jsr 	TOKWriteA
.1f68	18		clc				clc
.1f69	60		rts				rts
.1f6a					_TOKIsVariable:
.1f6a	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1f6c					_TOKOutputBuffer:
.1f6c	bd 16 05	lda $0516,x			lda 	TOKElementText,x 			; output it translated.
.1f6f	20 98 1f	jsr $1f98			jsr 	TOKTranslateIdentifier
.1f72	20 a0 1e	jsr $1ea0			jsr 	TOKWriteA
.1f75	e8		inx				inx
.1f76	bd 16 05	lda $0516,x			lda 	TOKElementText,x
.1f79	20 64 20	jsr $2064			jsr 	TOKIsIdentifierElement
.1f7c	b0 ee		bcs $1f6c			bcs 	_TOKOutputBuffer
.1f7e	a8		tay				tay 								; last char in Y
.1f7f	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1f81	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1f83	f0 0e		beq $1f93			beq 	_TOKIVExit
.1f85	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1f87	d0 04		bne $1f8d			bne 	_TOKIVCheckArray 			; no, check for (
.1f89	1a		inc a				inc 	a 							; token is $7D
.1f8a	bc 17 05	ldy $0517,x			ldy 	TOKElementText+1,x 			; get next one.
.1f8d					_TOKIVCheckArray:
.1f8d	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1f8f	d0 02		bne $1f93			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1f91	1a		inc a				inc 	a
.1f92	1a		inc a				inc 	a
.1f93					_TOKIVExit:
.1f93	20 a0 1e	jsr $1ea0			jsr 	TOKWriteA 					; ending token
.1f96	18		clc				clc
.1f97	60		rts				rts
.1f98					TOKTranslateIdentifier:
.1f98	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1f9a	f0 0f		beq $1fab			beq 	_TTI64
.1f9c	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1f9e	f0 0e		beq $1fae			beq 	_TTI65
.1fa0	38		sec				sec
.1fa1	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1fa3	10 03		bpl $1fa8			bpl 	_TTIExit
.1fa5	18		clc				clc 								; map 09 onto 26-35
.1fa6	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1fa8					_TTIExit:
.1fa8	09 40		ora #$40			ora 	#$40 						; correct range.
.1faa	60		rts				rts
.1fab	a9 64		lda #$64	_TTI64:	lda 	#$64
.1fad	60		rts				rts
.1fae	a9 65		lda #$65	_TTI65:	lda 	#$65
.1fb0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1fb1					TOKTokeniseInteger:
.1fb1	20 da 1f	jsr $1fda			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fb4	a2 16		ldx #$16			ldx 	#TOKElementText & $FF
.1fb6	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.1fb8	ad 15 05	lda $0515			lda		TOKElement
.1fbb	20 10 2d	jsr $2d10			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1fbe	ad 17 06	lda $0617			lda 	TOKIsFirstElement 			; first element ?
.1fc1	f0 12		beq $1fd5			beq 	_TOKNotLineNumber
.1fc3	a5 10		lda $10				lda 	IFR0+IM2 					; check it's a 2 digit number
.1fc5	d0 0c		bne $1fd3			bne 	_TOKBadLineNumeber
.1fc7	a5 0e		lda $0e				lda 	IFR0+IM0 					; copy it to the line number section.
.1fc9	8d 01 04	sta $0401			sta 	TOKLineNumber
.1fcc	a5 0f		lda $0f				lda 	IFR0+IM1
.1fce	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.1fd1	18		clc				clc
.1fd2	60		rts				rts
.1fd3					_TOKBadLineNumeber:
.1fd3	38		sec				sec
.1fd4	60		rts				rts
.1fd5					_TOKNotLineNumber:
.1fd5	20 e3 1d	jsr $1de3			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1fd8	18		clc				clc
.1fd9	60		rts				rts
.1fda					TOKExtractInteger:
.1fda	20 d0 1d	jsr $1dd0			jsr 	TOKResetElement 			; restart
.1fdd					_TTILoop:
.1fdd	20 ac 1e	jsr $1eac			jsr 	TOKGet 						; keep getting and copying while numeric.
.1fe0	20 58 20	jsr $2058			jsr 	TOKIsDigit
.1fe3	90 08		bcc $1fed			bcc 	_TOKEIExit
.1fe5	20 d4 1d	jsr $1dd4			jsr 	TOKWriteElement
.1fe8	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext
.1feb	80 f0		bra $1fdd			bra 	_TTILoop
.1fed					_TOKEIExit:
.1fed	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1fee					TOKTokenisePunctuation:
.1fee	20 d0 1d	jsr $1dd0			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1ff1	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext
.1ff4	20 d4 1d	jsr $1dd4			jsr 	TOKWriteElement
.1ff7	20 ac 1e	jsr $1eac			jsr 	TOKGet 						; what follows ?
.1ffa	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1ffc	f0 10		beq $200e			beq 	_TTPOne
.1ffe	20 6c 20	jsr $206c			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2001	b0 0b		bcs $200e			bcs 	_TTPOne 					; these speed things up a bit.
.2003	20 d4 1d	jsr $1dd4			jsr 	TOKWriteElement 			; this is what we will search for.
.2006	20 b4 1e	jsr $1eb4			jsr 	TOKFindToken
.2009	b0 0a		bcs $2015			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.200b	ce 15 05	dec $0515			dec 	TOKElement 					; make it a single character
.200e					_TTPOne:
.200e	20 b4 1e	jsr $1eb4			jsr 	TOKFindToken 				; look for one character punctuation
.2011	b0 07		bcs $201a			bcs 	_TTPOutputExit 				; we found it
.2013	38		sec				sec 								; not recognised.
.2014	60		rts				rts
.2015					_TTPConsumeExit:
.2015	48		pha				pha
.2016	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext 					; get the 2nd char out.
.2019	68		pla				pla
.201a					_TTPOutputExit:
.201a	20 a0 1e	jsr $1ea0			jsr  	TOKWriteA 					; write token out
.201d	18		clc				clc
.201e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.201f					TOKTokeniseString:
.201f	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext 					; consume the "
.2022	20 d0 1d	jsr $1dd0			jsr 	TOKResetElement 			; start getting the string
.2025					_TOKTSLoop:
.2025	20 ac 1e	jsr $1eac			jsr 	TOKGet 						; check EOL
.2028	c9 00		cmp #$00			cmp 	#0
.202a	f0 0c		beq $2038			beq 	_TOKTSExit
.202c	20 b0 1e	jsr $1eb0			jsr 	TOKGetNext 					; get and consume
.202f	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2031	f0 05		beq $2038			beq 	_TOKTSExit
.2033	20 d4 1d	jsr $1dd4			jsr 	TOKWriteElement
.2036	80 ed		bra $2025			bra 	_TOKTSLoop
.2038					_TOKTSExit:
.2038	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.203a	20 a0 1e	jsr $1ea0			jsr 	TOKWriteA
.203d	20 15 1e	jsr $1e15			jsr 	TOKOutputElementBuffer
.2040	18		clc				clc
.2041	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2042					TOKToUpper:
.2042	c9 61		cmp #$61			cmp 	#"a"
.2044	90 06		bcc $204c			bcc 	_TTUNotLower
.2046	c9 7b		cmp #$7b			cmp 	#"z"+1
.2048	b0 02		bcs $204c			bcs 	_TTUNotLower
.204a	49 20		eor #$20			eor 	#$20
.204c					_TTUNotLower:
.204c	60		rts				rts
.204d					TOKToLower:
.204d	c9 41		cmp #$41			cmp 	#"A"
.204f	90 06		bcc $2057			bcc 	_TTUNotUpper
.2051	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2053	b0 02		bcs $2057			bcs 	_TTUNotUpper
.2055	49 20		eor #$20			eor 	#$20
.2057					_TTUNotUpper:
.2057	60		rts				rts
.2058					TOKIsDigit:
.2058	c9 30		cmp #$30			cmp 	#"0"
.205a	90 06		bcc $2062			bcc 	TOKFail
.205c	c9 3a		cmp #$3a			cmp 	#"9"+1
.205e	b0 02		bcs $2062			bcs 	TOKFail
.2060					TOKSucceed:
.2060	38		sec				sec
.2061	60		rts				rts
.2062					TOKFail:
.2062	18		clc				clc
.2063	60		rts				rts
.2064					TOKIsIdentifierElement:
.2064	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.2066	f0 f8		beq $2060			beq 	TOKSucceed
.2068	c9 5f		cmp #$5f			cmp 	#"_"
.206a	f0 f4		beq $2060			beq 	TOKSucceed 					; else fall through to alphanumeric
.206c					TOKIsAlphaNumeric:
.206c	20 75 20	jsr $2075			jsr 	TOKIsAlpha
.206f	b0 ef		bcs $2060			bcs 	TOKSucceed
.2071	20 58 20	jsr $2058			jsr 	TOKIsDigit
.2074	60		rts				rts
.2075					TOKIsAlpha:
.2075	20 42 20	jsr $2042			jsr 	TOKToUpper
.2078	c9 41		cmp #$41			cmp 	#"A"
.207a	90 e6		bcc $2062			bcc 	TOKFail
.207c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.207e	b0 e2		bcs $2062			bcs 	TOKFail
.2080	80 de		bra $2060			bra 	TOKSucceed
.2082					TOKIsHexadecimal:
.2082	20 58 20	jsr $2058			jsr		TOKIsDigit
.2085	b0 d9		bcs $2060			bcs 	TOKSucceed
.2087	20 75 20	jsr $2075			jsr 	TOKIsAlpha
.208a	90 d6		bcc $2062			bcc 	TOKFail
.208c	c9 47		cmp #$47			cmp 	#"F"+1
.208e	b0 d2		bcs $2062			bcs 	TOKFail
.2090	80 ce		bra $2060			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2092					Command_CALL:
.2092	a9 42		lda #$42			lda 	#STK_CALL
.2094	20 1d 25	jsr $251d			jsr 	StackOpen
.2097	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.2099	29 c0		and #$c0			and 	#$C0
.209b	c9 40		cmp #$40			cmp 	#$40
.209d	d0 29		bne $20c8			bne 	_CCSyntax
.209f	20 ed 27	jsr $27ed			jsr 	VARGetInfo 					; get the information
.20a2	20 04 25	jsr $2504			jsr 	ERRCheckRParen 				; check right bracket follows.
.20a5	20 9f 27	jsr $279f			jsr 	VARFind 					; exists ?
.20a8	90 21		bcc $20cb			bcc 	_CCUnknown
.20aa	86 21		stx $21				stx 	zTemp0+1 					; save target in XA
.20ac	85 20		sta $20				sta 	zTemp0
.20ae	20 51 25	jsr $2551			jsr 	STKSaveCodePosition 		; save return address on stack.
.20b1	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.20b3	b1 20		lda ($20),y			lda 	(zTemp0),y
.20b5	c9 ff		cmp #$ff			cmp 	#$FF
.20b7	d0 12		bne $20cb			bne 	_CCUnknown
.20b9	88		dey				dey 								; get Y offset to stack
.20ba	b1 20		lda ($20),y			lda 	(zTemp0),y
.20bc	48		pha				pha
.20bd	88		dey				dey 								; get address
.20be	b1 20		lda ($20),y			lda 	(zTemp0),y
.20c0	85 1f		sta $1f				sta 	codePtr+1
.20c2	b2 20		lda ($20)			lda 	(zTemp0)
.20c4	85 1e		sta $1e				sta 	codePtr
.20c6	7a		ply				ply 								; restore Y
.20c7	60		rts				rts
.20c8					_CCSyntax:
.20c8	4c 71 23	jmp $2371		jmp	ErrorV_syntax
.20cb					_CCUnknown:
.20cb	4c e6 24	jmp $24e6		jmp	ErrorV_unknown
.20ce					Command_ENDPROC:
.20ce	a9 42		lda #$42			lda 	#STK_CALL
.20d0	20 49 25	jsr $2549			jsr 	StackCheckFrame
.20d3	20 63 25	jsr $2563			jsr 	STKLoadCodePosition 		; return
.20d6	20 3b 25	jsr $253b			jsr 	StackClose
.20d9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.20da					Command_DO:
.20da	a9 22		lda #$22			lda 	#STK_DO
.20dc	20 1d 25	jsr $251d			jsr 	StackOpen
.20df	20 51 25	jsr $2551			jsr 	STKSaveCodePosition 		; save loop position
.20e2	60		rts				rts
.20e3					Command_EXIT:
.20e3	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.20e5	20 49 25	jsr $2549			jsr 	StackCheckFrame
.20e8	20 3b 25	jsr $253b			jsr 	StackClose 					; close it
.20eb	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.20ed	aa		tax				tax
.20ee	20 83 22	jsr $2283			jsr 	ScanForward
.20f1	60		rts				rts
.20f2					Command_LOOP:
.20f2	a9 22		lda #$22			lda 	#STK_DO
.20f4	20 49 25	jsr $2549			jsr 	StackCheckFrame
.20f7	20 63 25	jsr $2563			jsr 	STKLoadCodePosition 		; loop back
.20fa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.20fb					Command_FOR:
.20fb	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.20fd	20 1d 25	jsr $251d			jsr 	StackOpen
.2100	20 19 12	jsr $1219			jsr 	CommandLET 					; do "I = 1" bit
.2103	5a		phy				phy 								; save variable address to +4,+5
.2104	a0 04		ldy #$04			ldy 	#4
.2106	a5 20		lda $20				lda 	zTemp0
.2108	91 28		sta ($28),y			sta 	(basicStack),y
.210a	c8		iny				iny
.210b	a5 21		lda $21				lda 	zTemp0+1
.210d	91 28		sta ($28),y			sta 	(basicStack),y
.210f	7a		ply				ply
.2110	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2112	20 14 25	jsr $2514			jsr 	ERRCheckA
.2115	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2118	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.211a	a2 0e		ldx #$0e			ldx 	#IFR0
.211c	20 71 21	jsr $2171			jsr 	CFSaveR0X
.211f	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; STEP here ?
.2121	c9 91		cmp #$91			cmp 	#PR_STEP
.2123	d0 06		bne $212b			bne 	_CFStep1
.2125	c8		iny				iny 								; consume step
.2126	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 				; evaluate STEP
.2129	80 24		bra $214f			bra 	_CFWriteStep
.212b					_CFStep1:
.212b	a2 0e		ldx #$0e			ldx 	#IFR0 						; default R0, 1
.212d	a9 01		lda #$01			lda 	#1
.212f	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.2132	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2133	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2135	b1 28		lda ($28),y			lda 	(basicStack),y
.2137	85 20		sta $20				sta 	zTemp0
.2139	c8		iny				iny
.213a	b1 28		lda ($28),y			lda 	(basicStack),y
.213c	85 21		sta $21				sta 	zTemp0+1
.213e	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2140	b1 20		lda ($20),y			lda 	(zTemp0),y
.2142	d0 0a		bne $214e			bne 	_CFNotOptimised
.2144	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2146	b1 28		lda ($28),y			lda 	(basicStack),y
.2148	d0 04		bne $214e			bne 	_CFNotOptimised
.214a	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.214c	85 11		sta $11				sta 	IFR0+IExp
.214e					_CFNotOptimised:
.214e	7a		ply				ply
.214f					_CFWriteStep:
.214f	a2 0e		ldx #$0e			ldx 	#IFR0 						; Write to additive.
.2151	a9 06		lda #$06			lda 	#6
.2153	20 71 21	jsr $2171			jsr 	CFSaveR0X
.2156	20 51 25	jsr $2551			jsr 	STKSaveCodePosition 		; save loop position
.2159	60		rts				rts
.215a					CFLoadR0X:
.215a	5a		phy				phy
.215b	a8		tay				tay
.215c	b1 28		lda ($28),y			lda 	(basicStack),y
.215e	95 00		sta $00,x			sta 	IM0,x
.2160	c8		iny				iny
.2161	b1 28		lda ($28),y			lda 	(basicStack),y
.2163	95 01		sta $01,x			sta 	IM1,x
.2165	c8		iny				iny
.2166	b1 28		lda ($28),y			lda 	(basicStack),y
.2168	95 02		sta $02,x			sta 	IM2,x
.216a	c8		iny				iny
.216b	b1 28		lda ($28),y			lda 	(basicStack),y
.216d	95 03		sta $03,x			sta 	IExp,x
.216f	7a		ply				ply
.2170	60		rts				rts
.2171					CFSaveR0X:
.2171	5a		phy				phy
.2172	a8		tay				tay
.2173	b5 00		lda $00,x			lda 	IM0,x
.2175	91 28		sta ($28),y			sta 	(basicStack),y
.2177	c8		iny				iny
.2178	b5 01		lda $01,x			lda 	IM1,x
.217a	91 28		sta ($28),y			sta 	(basicStack),y
.217c	c8		iny				iny
.217d	b5 02		lda $02,x			lda 	IM2,x
.217f	91 28		sta ($28),y			sta 	(basicStack),y
.2181	c8		iny				iny
.2182	b5 03		lda $03,x			lda 	IExp,x
.2184	91 28		sta ($28),y			sta 	(basicStack),y
.2186	7a		ply				ply
.2187	60		rts				rts
.2188					Command_NEXT:
.2188	a9 37		lda #$37			lda 	#STK_FOR
.218a	20 49 25	jsr $2549			jsr 	StackCheckFrame
.218d	5a		phy				phy 								; check optimised loop
.218e	a0 09		ldy #$09			ldy 	#9
.2190	b1 28		lda ($28),y			lda 	(basicStack),y
.2192	7a		ply				ply
.2193	0a		asl a				asl 	a
.2194	b0 35		bcs $21cb			bcs 	_CNOptimised
.2196	20 02 22	jsr $2202			jsr 	_CNLoadValue 				; load index value to R0.
.2199	a2 12		ldx #$12			ldx 	#IFR1 						; load adding value to R1.
.219b	a9 06		lda #$06			lda 	#6
.219d	20 5a 21	jsr $215a			jsr 	CFLoadR0X
.21a0	20 a2 28	jsr $28a2			jsr 	IFloatAdd 					; add them together and write back.
.21a3	20 25 22	jsr $2225			jsr 	_CNSaveValue
.21a6	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.21a8	a2 12		ldx #$12			ldx 	#IFR1
.21aa	20 5a 21	jsr $215a			jsr 	CFLoadR0X
.21ad	20 7a 2b	jsr $2b7a			jsr 	IFloatCompare 				; compare terminal vs current
.21b0	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.21b2	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero
.21b5	f0 10		beq $21c7			beq 	_CNLoopBack
.21b7	a5 11		lda $11				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.21b9	5a		phy				phy
.21ba	a0 09		ldy #$09			ldy 	#6+IExp
.21bc	51 28		eor ($28),y			eor 	(basicStack),y
.21be	7a		ply				ply
.21bf	29 40		and #$40			and 	#IFSign
.21c1	f0 04		beq $21c7			beq 	_CNLoopBack
.21c3					_CNExitLoop:
.21c3	20 3b 25	jsr $253b			jsr 	StackClose		 			; return
.21c6	60		rts				rts
.21c7					_CNLoopBack:
.21c7	20 63 25	jsr $2563			jsr 	STKLoadCodePosition 		; loop back
.21ca	60		rts				rts
.21cb					_CNOptimised:
.21cb	5a		phy				phy
.21cc	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.21ce	b1 28		lda ($28),y			lda 	(basicStack),y
.21d0	85 24		sta $24				sta 	zTemp2
.21d2	c8		iny				iny
.21d3	b1 28		lda ($28),y			lda 	(basicStack),y
.21d5	85 25		sta $25				sta 	zTemp2+1
.21d7	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.21d9					_CNIncrement:
.21d9	c8		iny				iny
.21da	b1 24		lda ($24),y			lda 	(zTemp2),y
.21dc	1a		inc a				inc 	a
.21dd	91 24		sta ($24),y			sta 	(zTemp2),y
.21df	f0 f8		beq $21d9			beq 	_CNIncrement
.21e1	18		clc				clc 								; point zTemp0 to terminal value
.21e2	a5 28		lda $28				lda 	basicStack
.21e4	69 0a		adc #$0a			adc 	#10
.21e6	85 20		sta $20				sta 	zTemp0
.21e8	a5 29		lda $29				lda 	basicStack+1
.21ea	69 00		adc #$00			adc 	#0
.21ec	85 21		sta $21				sta 	zTemp0+1
.21ee	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.21f0	b2 24		lda ($24)			lda 	(zTemp2)
.21f2	d2 20		cmp ($20)			cmp 	(zTemp0)
.21f4	b1 24		lda ($24),y			lda 	(zTemp2),y
.21f6	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.21f8	c8		iny				iny
.21f9	b1 24		lda ($24),y			lda 	(zTemp2),y
.21fb	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.21fd	7a		ply				ply
.21fe	b0 c3		bcs $21c3			bcs 	_CNExitLoop
.2200	80 c5		bra $21c7			bra 	_CNLoopBack
.2202					_CNLoadValue:
.2202	5a		phy				phy
.2203	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2205	b1 28		lda ($28),y			lda 	(basicStack),y
.2207	85 24		sta $24				sta 	zTemp2
.2209	c8		iny				iny
.220a	b1 28		lda ($28),y			lda 	(basicStack),y
.220c	85 25		sta $25				sta 	zTemp2+1
.220e	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2210	b1 24		lda ($24),y			lda 	(zTemp2),y
.2212	85 0e		sta $0e				sta 	IFR0+IM0
.2214	c8		iny				iny
.2215	b1 24		lda ($24),y			lda 	(zTemp2),y
.2217	85 0f		sta $0f				sta 	IFR0+IM1
.2219	c8		iny				iny
.221a	b1 24		lda ($24),y			lda 	(zTemp2),y
.221c	85 10		sta $10				sta 	IFR0+IM2
.221e	c8		iny				iny
.221f	b1 24		lda ($24),y			lda 	(zTemp2),y
.2221	85 11		sta $11				sta 	IFR0+IExp
.2223	7a		ply				ply
.2224	60		rts				rts
.2225					_CNSaveValue:
.2225	5a		phy				phy
.2226	a0 00		ldy #$00			ldy 	#0
.2228	a5 0e		lda $0e				lda 	IFR0+IM0
.222a	91 24		sta ($24),y			sta 	(zTemp2),y
.222c	c8		iny				iny
.222d	a5 0f		lda $0f				lda 	IFR0+IM1
.222f	91 24		sta ($24),y			sta 	(zTemp2),y
.2231	c8		iny				iny
.2232	a5 10		lda $10				lda 	IFR0+IM2
.2234	91 24		sta ($24),y			sta 	(zTemp2),y
.2236	c8		iny				iny
.2237	a5 11		lda $11				lda 	IFR0+IExp
.2239	91 24		sta ($24),y			sta 	(zTemp2),y
.223b	7a		ply				ply
.223c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.223d					IfCommand:
.223d	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 				; Get the if test.
.2240	b1 1e		lda ($1e),y			lda 	(codePtr),y					; what follows ?
.2242	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2244	d0 0a		bne $2250			bne 	_IfStructured 				; we still support it.
.2246	c8		iny				iny 								; consume THEN
.2247	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero 			; is it zero
.224a	f0 01		beq $224d			beq 	_IfFail 					; if fail, go to next line
.224c	60		rts				rts 								; if THEN just continue
.224d					_IfFail:
.224d	4c 78 13	jmp $1378			jmp 	RUNEndOfLine
.2250					_IfStructured:
.2250	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero 			; is it zero
.2253	d0 07		bne $225c			bne 	_IfExit 					; if not, then continue normally.
.2255	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2257	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2259	20 83 22	jsr $2283			jsr 	ScanForward 				; and run from there
.225c					_IfExit:
.225c	60		rts				rts
.225d					ElseCode:
.225d	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.225f	aa		tax				tax 								; so just go to the structure exit
.2260	20 83 22	jsr $2283			jsr 	ScanForward
.2263	60		rts				rts
.2264					EndIf:
.2264	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2265					Command_REPEAT:
.2265	a9 02		lda #$02			lda 	#STK_REPEAT
.2267	20 1d 25	jsr $251d			jsr 	StackOpen
.226a	20 51 25	jsr $2551			jsr 	STKSaveCodePosition 		; save loop position
.226d	60		rts				rts
.226e					Command_UNTIL:
.226e	a9 02		lda #$02			lda 	#STK_REPEAT
.2270	20 49 25	jsr $2549			jsr 	StackCheckFrame
.2273	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 				; work out the test
.2276	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero 			; check if zero
.2279	f0 04		beq $227f			beq 	_CULoopBack 				; if so keep looping
.227b	20 3b 25	jsr $253b			jsr 	StackClose		 			; return
.227e	60		rts				rts
.227f					_CULoopBack:
.227f	20 63 25	jsr $2563			jsr 	STKLoadCodePosition 		; loop back
.2282	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2283					ScanForward:
.2283	85 20		sta $20				sta 	zTemp0 						; save scan options in zTemp0
.2285	86 21		stx $21				stx 	zTemp0+1
.2287	64 22		stz $22				stz 	zTemp1 						; clear structure count.
.2289					_ScanForwardLoop:
.2289	a5 22		lda $22				lda 	zTemp1 						; if structure count non zero, don't check for end.
.228b	d0 0a		bne $2297			bne 	_ScanNoCheck
.228d	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; reached either target token.
.228f	c5 20		cmp $20				cmp 	zTemp0
.2291	f0 49		beq $22dc			beq 	_ScanExit
.2293	c5 21		cmp $21				cmp 	zTemp0+1
.2295	f0 45		beq $22dc			beq 	_ScanExit
.2297					_ScanNoCheck:
.2297	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get the token and consume it.
.2299	c8		iny				iny
.229a	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.229c	f0 37		beq $22d5			beq		_ScanDataItem
.229e	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.22a0	f0 33		beq $22d5			beq 	_ScanDataItem
.22a2	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.22a4	f0 1b		beq $22c1			beq 	_ScanNextLine
.22a6	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.22a8	d0 01		bne $22ab			bne 	_ScanNoShift
.22aa	c8		iny				iny
.22ab					_ScanNoShift:
.22ab	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.22ad	b0 da		bcs $2289			bcs 	_ScanForwardLoop
.22af	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.22b1	90 d6		bcc $2289			bcc 	_ScanForwardLoop
.22b3	aa		tax				tax 								; access the table to get the adjustment.
.22b4	18		clc				clc
.22b5	a5 22		lda $22				lda 	zTemp1 						; add it to structure count.
.22b7	7d 9b 18	adc $189b,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.22ba	85 22		sta $22				sta 	zTemp1
.22bc	10 cb		bpl $2289			bpl		_ScanForwardLoop 			; error if -ve ?
.22be	4c fd 23	jmp $23fd		jmp	ErrorV_structure
.22c1					_ScanNextLine:
.22c1	18		clc				clc	 								; forward to next line.
.22c2	b2 1e		lda ($1e)			lda 	(codePtr)
.22c4	65 1e		adc $1e				adc 	codePtr
.22c6	85 1e		sta $1e				sta 	codePtr
.22c8	90 02		bcc $22cc			bcc 	_ScanNoCarry
.22ca	e6 1f		inc $1f				inc 	codePtr+1
.22cc					_ScanNoCarry:
.22cc	a0 03		ldy #$03			ldy 	#3
.22ce	b2 1e		lda ($1e)			lda 	(codePtr) 					; off end of program ?
.22d0	d0 b7		bne $2289			bne 	_ScanForwardLoop
.22d2	4c fd 23	jmp $23fd		jmp	ErrorV_structure
.22d5					_ScanDataItem:
.22d5	98		tya				tya
.22d6	38		sec				sec
.22d7	71 1e		adc ($1e),y			adc 	(codePtr),y
.22d9	a8		tay				tay
.22da	80 ad		bra $2289			bra 	_ScanForwardLoop
.22dc					_ScanExit:
.22dc	c8		iny				iny 								; consume final token.
.22dd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.22de					ScanProcedures:
.22de	a5 1e		lda $1e				lda 	codePtr 					; push codePtr on the stack
.22e0	48		pha				pha
.22e1	a5 1f		lda $1f				lda 	codePtr+1
.22e3	48		pha				pha
.22e4	5a		phy				phy
.22e5	ad 13 05	lda $0513			lda 	PGMBaseHigh 				; back to the program start
.22e8	85 1f		sta $1f				sta 	codePtr+1
.22ea	64 1e		stz $1e				stz 	codePtr
.22ec					_SPLoop:
.22ec	b2 1e		lda ($1e)			lda 	(codePtr) 					; end of program
.22ee	f0 18		beq $2308			beq 	_SPExit
.22f0	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.22f2	b1 1e		lda ($1e),y			lda 	(codePtr),y
.22f4	c9 88		cmp #$88			cmp 	#PR_PROC
.22f6	d0 03		bne $22fb			bne 	_SPNext
.22f8	20 10 23	jsr $2310			jsr 	_SPSetupRecord
.22fb					_SPNext:
.22fb	18		clc				clc 								; forward to next
.22fc	b2 1e		lda ($1e)			lda 	(codePtr)
.22fe	65 1e		adc $1e				adc 	codePtr
.2300	85 1e		sta $1e				sta 	codePtr
.2302	90 e8		bcc $22ec			bcc 	_SPLoop
.2304	e6 1f		inc $1f				inc 	codePtr+1
.2306	80 e4		bra $22ec			bra 	_SPLoop
.2308					_SPExit:
.2308	7a		ply				ply
.2309	68		pla				pla
.230a	85 1f		sta $1f				sta 	codePtr+1
.230c	68		pla				pla
.230d	85 1e		sta $1e				sta 	codePtr
.230f	60		rts				rts
.2310					_SPSetupRecord:
.2310	c8		iny				iny 								; check identifier follows
.2311	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2313	29 c0		and #$c0			and 	#$C0
.2315	c9 40		cmp #$40			cmp 	#$40
.2317	d0 27		bne $2340			bne 	_SPSyntax
.2319	20 ed 27	jsr $27ed			jsr 	VARGetInfo 					; get the information
.231c	20 04 25	jsr $2504			jsr 	ERRCheckRParen 				; check right bracket follows.
.231f	20 9f 27	jsr $279f			jsr 	VARFind 					; already exists ?
.2322	b0 1f		bcs $2343			bcs 	_SPUsed 					; error !
.2324	20 4b 27	jsr $274b			jsr 	VARCreate 					; create, XA points to the data.
.2327	85 20		sta $20				sta 	zTemp0
.2329	86 21		stx $21				stx 	zTemp0+1
.232b	5a		phy				phy 								; save Y pos on stack
.232c	a0 01		ldy #$01			ldy 	#1
.232e	a5 1e		lda $1e				lda 	codePtr 					; save codePtr/Y
.2330	92 20		sta ($20)			sta 	(zTemp0)
.2332	a5 1f		lda $1f				lda 	codePtr+1
.2334	91 20		sta ($20),y			sta 	(zTemp0),y
.2336	c8		iny				iny
.2337	68		pla				pla
.2338	91 20		sta ($20),y			sta 	(zTemp0),y
.233a	c8		iny				iny
.233b	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.233d	91 20		sta ($20),y			sta 	(zTemp0),y
.233f	60		rts				rts
.2340					_SPSyntax:
.2340	4c 71 23	jmp $2371		jmp	ErrorV_syntax
.2343					_SPUsed:
.2343	4c c8 24	jmp $24c8		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2346					Command_WHILE:
.2346	5a		phy				phy 								; save position of the test
.2347	20 a0 15	jsr $15a0			jsr 	EXPEvalNumber 				; work out the while test.
.234a	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero 			; check if zero
.234d	f0 0e		beq $235d			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.234f	98		tya				tya 								; position *after* test.
.2350	7a		ply				ply 								; restore position before test, at WHILE
.2351	88		dey				dey 								; so we execute the WHILE command again.
.2352	48		pha				pha 								; push after test on the stack
.2353	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2355	20 1d 25	jsr $251d			jsr 	StackOpen
.2358	20 51 25	jsr $2551			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.235b	7a		ply				ply 								; restore the position *after* the test
.235c	60		rts				rts
.235d					_WHExitLoop:
.235d	68		pla				pla 								; throw post loop position
.235e	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2360	aa		tax				tax
.2361	20 83 22	jsr $2283			jsr 	ScanForward
.2364	60		rts				rts
.2365					Command_WEND:
.2365	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2367	20 49 25	jsr $2549			jsr 	StackCheckFrame
.236a	20 63 25	jsr $2563			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.236d	20 3b 25	jsr $253b			jsr 	StackClose		 			; erase the frame
.2370	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2371					ErrorV_syntax:
.2371	20 3c 26	jsr $263c		jsr	ErrorHandler
>2374	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>237c	45 72 72 6f 72 00
.2382					ErrorV_range:
.2382	20 3c 26	jsr $263c		jsr	ErrorHandler
>2385	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>238d	52 61 6e 67 65 00
.2393					ErrorV_value:
.2393	20 3c 26	jsr $263c		jsr	ErrorHandler
>2396	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>239e	75 65 00
.23a1					ErrorV_type:
.23a1	20 3c 26	jsr $263c		jsr	ErrorHandler
>23a4	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>23ac	73 6d 61 74 63 68 00
.23b3					ErrorV_unimplemented:
.23b3	20 3c 26	jsr $263c		jsr	ErrorHandler
>23b6	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>23be	6c 65 6d 65 6e 74 65 64 00
.23c7					ErrorV_assert:
.23c7	20 3c 26	jsr $263c		jsr	ErrorHandler
>23ca	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>23d2	46 61 69 6c 00
.23d7					ErrorV_internal:
.23d7	20 3c 26	jsr $263c		jsr	ErrorHandler
>23da	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>23e2	6c 20 45 72 72 6f 72 00
.23ea					ErrorV_divzero:
.23ea	20 3c 26	jsr $263c		jsr	ErrorHandler
>23ed	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>23f5	42 79 20 5a 65 72 6f 00
.23fd					ErrorV_structure:
.23fd	20 3c 26	jsr $263c		jsr	ErrorHandler
>2400	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2408	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2415					ErrorV_stop:
.2415	20 3c 26	jsr $263c		jsr	ErrorHandler
>2418	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2420	20 53 74 6f 70 70 65 64 00
.2429					ErrorV_data:
.2429	20 3c 26	jsr $263c		jsr	ErrorHandler
>242c	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2434	44 61 74 61 00
.2439					ErrorV_redefine:
.2439	20 3c 26	jsr $263c		jsr	ErrorHandler
>243c	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2444	65 64 65 66 69 6e 65 64 00
.244d					ErrorV_index:
.244d	20 3c 26	jsr $263c		jsr	ErrorHandler
>2450	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2458	61 79 20 49 6e 64 65 78 00
.2461					ErrorV_memory:
.2461	20 3c 26	jsr $263c		jsr	ErrorHandler
>2464	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>246c	4d 65 6d 6f 72 79 00
.2473					ErrorV_uninitialised:
.2473	20 3c 26	jsr $263c		jsr	ErrorHandler
>2476	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>247e	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.248e					ErrorV_string:
.248e	20 3c 26	jsr $263c		jsr	ErrorHandler
>2491	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2499	69 6e 67 20 4c 65 6e 67 74 68 00
.24a4					ErrorV_variable:
.24a4	20 3c 26	jsr $263c		jsr	ErrorHandler
>24a7	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>24af	65 20 4d 69 73 73 69 6e 67 00
.24b9					ErrorV_stack:
.24b9	20 3c 26	jsr $263c		jsr	ErrorHandler
>24bc	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>24c4	75 6c 6c 00
.24c8					ErrorV_dupproc:
.24c8	20 3c 26	jsr $263c		jsr	ErrorHandler
>24cb	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>24d3	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>24e3	65 64 00
.24e6					ErrorV_unknown:
.24e6	20 3c 26	jsr $263c		jsr	ErrorHandler
>24e9	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>24f1	20 50 72 6f 63 65 64 75 72 65 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.24fc					ERRCheckLParen:
.24fc	b1 1e		lda ($1e),y			lda 	(codePtr),y
.24fe	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2500	d0 18		bne $251a			bne 	ERRSyntaxError
.2502	c8		iny				iny
.2503	60		rts				rts
.2504					ERRCheckRParen:
.2504	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2506	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2508	d0 10		bne $251a			bne 	ERRSyntaxError
.250a	c8		iny				iny
.250b	60		rts				rts
.250c					ERRCheckComma:
.250c	b1 1e		lda ($1e),y			lda 	(codePtr),y
.250e	c9 99		cmp #$99			cmp 	#PR_COMMA
.2510	d0 08		bne $251a			bne 	ERRSyntaxError
.2512	c8		iny				iny
.2513	60		rts				rts
.2514					ERRCheckA:
.2514	d1 1e		cmp ($1e),y			cmp 	(codePtr),y
.2516	d0 02		bne $251a			bne 	ERRSyntaxError
.2518	c8		iny				iny
.2519	60		rts				rts
.251a					ERRSyntaxError:
.251a	4c 71 23	jmp $2371		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.251d					StackOpen:
.251d	48		pha				pha 								; save frame byte
.251e	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.2520	0a		asl a				asl 	a 							; claim twice this for storage
.2521	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2523	38		sec				sec 								; so basically subtracting from
.2524	65 28		adc $28				adc 	basicStack 	 				; basicStack
.2526	85 28		sta $28				sta 	basicStack
.2528	b0 0a		bcs $2534			bcs 	_SONoBorrow
>252a	db						.byte 	$DB
.252b	c6 29		dec $29				dec 	basicStack+1
.252d	a5 29		lda $29				lda 	basicStack+1 				; reached the bottom ?
.252f	cd 19 06	cmp $0619			cmp 	basicStackEnd
.2532	f0 04		beq $2538			beq 	_SOMemory
.2534					_SONoBorrow:
.2534	68		pla				pla 								; get marker back and write at TOS
.2535	92 28		sta ($28)			sta 	(basicStack)
.2537	60		rts				rts
.2538					_SOMemory:
.2538	4c b9 24	jmp $24b9		jmp	ErrorV_stack
.253b					StackClose:
.253b	b2 28		lda ($28)			lda 	(basicStack) 				; get TOS marker
.253d	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.253f	0a		asl a				asl 	a 							; claim twice this.
.2540	65 28		adc $28				adc 	basicStack 					; add to the stack pointer.
.2542	85 28		sta $28				sta 	basicStack
.2544	90 02		bcc $2548			bcc 	_SCExit
.2546	e6 29		inc $29				inc 	basicStack+1
.2548					_SCExit:
.2548	60		rts				rts
.2549					StackCheckFrame:
.2549	d2 28		cmp ($28)			cmp		(basicStack) 				; check  frames match
.254b	d0 01		bne $254e			bne 	_SCFError 					; different, we have structures mixed up
.254d	60		rts				rts
.254e					_SCFError:
.254e	4c fd 23	jmp $23fd		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2551					STKSaveCodePosition:
.2551	5a		phy				phy
.2552	98		tya				tya 								; save Y at offset 1.
.2553	a0 01		ldy #$01			ldy 	#1
.2555	91 28		sta ($28),y			sta 	(basicStack),y
.2557	a5 1e		lda $1e				lda 	codePtr 					; save code (low) at 2
.2559	c8		iny				iny
.255a	91 28		sta ($28),y			sta 	(basicStack),y
.255c	a5 1f		lda $1f				lda 	codePtr+1 					; save code (high) at 3
.255e	c8		iny				iny
.255f	91 28		sta ($28),y			sta 	(basicStack),y
.2561	7a		ply				ply
.2562	60		rts				rts
.2563					STKLoadCodePosition:
.2563	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2565	b1 28		lda ($28),y			lda 	(basicStack),y
.2567	85 1f		sta $1f				sta 	codePtr+1
.2569	88		dey				dey
.256a	b1 28		lda ($28),y			lda 	(basicStack),y
.256c	85 1e		sta $1e				sta 	codePtr
.256e	88		dey				dey
.256f	b1 28		lda ($28),y			lda 	(basicStack),y 				; line offset to Y
.2571	a8		tay				tay
.2572	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2573					StackReset:
.2573	48		pha				pha 								; save top of memory
.2574	3a		dec a				dec 	a  							; end of stack = previous byte
.2575	85 29		sta $29				sta 	basicStack+1
.2577	a9 ff		lda #$ff			lda 	#$FF
.2579	85 28		sta $28				sta 	basicStack
.257b	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.257d	92 28		sta ($28)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.257f	68		pla				pla 								; allocate pages for stack.
.2580	38		sec				sec
.2581	e9 02		sbc #$02			sbc 	#STACKPAGES
.2583	8d 19 06	sta $0619			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2586	60		rts				rts
.0028					basicStack:
>0028							.fill 	2
.0619					basicStackEnd:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2587					StringConcrete:
.2587	5a		phy				phy 								; save position on stack
.2588	b2 0e		lda ($0e)			lda 	(IFR0) 						; get string length
.258a	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.258c	b0 41		bcs $25cf			bcs 	_SALengthError
.258e	18		clc				clc 								; length of the new string
.258f	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2591	90 02		bcc $2595			bcc 	_SAHaveLength
.2593	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2595					_SAHaveLength:
.2595	48		pha				pha 								; save length to be allocated for concreting.
.2596	38		sec				sec
.2597	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2599	6d 1b 06	adc $061b			adc 	stringMemory
.259c	8d 1b 06	sta $061b			sta 	stringMemory
.259f	85 24		sta $24				sta 	zTemp2 						; update storage address
.25a1	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.25a3	6d 1c 06	adc $061c			adc 	stringMemory+1
.25a6	8d 1c 06	sta $061c			sta 	stringMemory+1
.25a9	85 25		sta $25				sta 	zTemp2+1
.25ab	68		pla				pla 								; save length allocated in +0
.25ac	92 24		sta ($24)			sta 	(zTemp2)
.25ae	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.25b0	a0 01		ldy #$01			ldy 	#1
.25b2	91 24		sta ($24),y			sta 	(zTemp2),y
.25b4					_SACopyNewString:
.25b4	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy length at +2
.25b6	a0 02		ldy #$02			ldy 	#2
.25b8	91 24		sta ($24),y			sta 	(zTemp2),y
.25ba	aa		tax				tax 								; bytes to copy
.25bb	f0 0c		beq $25c9			beq 	_SACopyExit
.25bd	a0 01		ldy #$01			ldy 	#1 							; first character from here
.25bf					_SACopyNSLoop:
.25bf	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; get character from here
.25c1	c8		iny				iny 								; write two on in string storage
.25c2	c8		iny				iny
.25c3	91 24		sta ($24),y			sta 	(zTemp2),y
.25c5	88		dey				dey
.25c6	ca		dex				dex									; until copied all the string lengths.
.25c7	d0 f6		bne $25bf			bne 	_SACopyNSLoop
.25c9					_SACopyExit:
.25c9	a6 25		ldx $25				ldx 	zTemp2+1 					; XA contain the concreted string.
.25cb	a5 24		lda $24				lda 	zTemp2
.25cd	7a		ply				ply
.25ce	60		rts				rts
.25cf					_SALengthError:
.25cf	4c 8e 24	jmp $248e		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.25d2					StringSystemInitialise:
.25d2	3a		dec a				dec 	a 							; make last byte of previous page.
.25d3	8d 1c 06	sta $061c			sta 	stringMemory+1
.25d6	85 21		sta $21				sta 	zTemp0+1
.25d8	a9 ff		lda #$ff			lda 	#$FF
.25da	8d 1b 06	sta $061b			sta 	stringMemory
.25dd	85 20		sta $20				sta 	zTemp0
.25df	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.25e1	92 20		sta ($20)			sta 	(zTemp0)
.25e3	60		rts				rts
.25e4					StringSpaceInitialise:
.25e4	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.25e6	8d 1a 06	sta $061a			sta 	stringInitialised
.25e9	ad 1b 06	lda $061b			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.25ec	8d 1d 06	sta $061d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.25ef	ad 1c 06	lda $061c			lda 	stringMemory+1
.25f2	3a		dec a				dec 	a
.25f3	8d 1e 06	sta $061e			sta 	stringTempPointer+1
.25f6	20 61 10	jsr $1061			jsr 	ClearCheckMemory
.25f9	60		rts				rts
.25fa					StringTempAllocate:
.25fa	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.25fc	b0 2e		bcs $262c			bcs 	_STALength
.25fe	2c 1a 06	bit $061a			bit 	stringInitialised 			; already initialised
.2601	30 05		bmi $2608			bmi 	_STAAllocate
.2603	48		pha				pha 								; save value to subtract.
.2604	20 e4 25	jsr $25e4			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2607	68		pla				pla 								; restore it
.2608					_STAAllocate:
.2608	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.260a	18		clc				clc  								; deliberate allows one more
.260b	6d 1d 06	adc $061d			adc 	stringTempPointer 			; subtract from temp pointer
.260e	8d 1d 06	sta $061d			sta 	stringTempPointer
.2611	85 0e		sta $0e				sta 	IFR0+IM0 					; address in mantissa too
.2613	85 2a		sta $2a				sta 	zsTemp 						; and zsTemp
.2615	ad 1e 06	lda $061e			lda 	stringTempPointer+1
.2618	69 ff		adc #$ff			adc 	#$FF
.261a	8d 1e 06	sta $061e			sta 	stringTempPointer+1
.261d	85 2b		sta $2b				sta 	zsTemp+1
.261f	85 0f		sta $0f				sta 	IFR0+IM1
.2621	64 10		stz $10				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2623	a9 80		lda #$80			lda 	#$80
.2625	85 11		sta $11				sta 	IFR0+IExp
.2627	a9 00		lda #$00			lda 	#0 							; clear the target string
.2629	92 2a		sta ($2a)			sta 	(zsTemp)
.262b	60		rts				rts
.262c					_STALength:
.262c	4c 8e 24	jmp $248e		jmp	ErrorV_string
.262f					StringTempWrite:
.262f	5a		phy				phy
.2630	48		pha				pha
.2631	b2 2a		lda ($2a)			lda 	(zsTemp)
.2633	1a		inc a				inc 	a
.2634	92 2a		sta ($2a)			sta 	(zsTemp)
.2636	a8		tay				tay
.2637	68		pla				pla
.2638	91 2a		sta ($2a),y			sta 	(zsTemp),y
.263a	7a		ply				ply
.263b	60		rts				rts
.002a					zsTemp:
>002a							.fill 	2
.061a					stringInitialised:
>061a							.fill 	1
.061b					stringMemory:
>061b							.fill 	2
.061d					stringTempPointer:
>061d							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.263c					ErrorHandler:
.263c	fa		plx				plx 								; get address of msg
.263d	7a		ply				ply
.263e	e8		inx				inx 								; bump past RTS
.263f	d0 01		bne $2642			bne 	_EHNoInc
.2641	c8		iny				iny
.2642					_EHNoInc:
.2642	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2645	ad 1f 06	lda $061f			lda 	ERRLine 					; direct command ?
.2648	0d 20 06	ora $0620			ora 	ERRLine+1
.264b	f0 10		beq $265d			beq 	_EHNoNumber
.264d	a2 60		ldx #$60			ldx 	#_EHAtMsg & $FF
.264f	a0 26		ldy #$26			ldy 	#_EHAtMsg >> 8
.2651	20 e2 ff	jsr $ffe2			jsr 	OSWriteStringZ
.2654	ad 1f 06	lda $061f			lda 	ERRLine 					; line number -> XA
.2657	ae 20 06	ldx $0620			ldx 	ERRLine+1
.265a	20 65 26	jsr $2665			jsr 	WriteIntXA
.265d					_EHNoNumber:
.265d	4c 8e 26	jmp $268e			jmp 	WarmStartNewLine
.2660					_EHAtMsg:
>2660	20 61 74 20 00					.text 	" at ",0
.2665					WriteIntXA:
.2665	da		phx				phx
.2666	48		pha				pha
.2667	a2 0e		ldx #$0e			ldx 	#IFR0
.2669	20 fb 2d	jsr $2dfb			jsr 	IFloatPushRx
.266c	68		pla				pla
.266d	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.2670	68		pla				pla
.2671	85 0f		sta $0f				sta 	IFR0+IM1
.2673	a9 0a		lda #$0a			lda 	#10 						; decimal
.2675	20 4d 2c	jsr $2c4d			jsr 	IFloatIntegerToStringR0	 	; convert
.2678	20 e2 ff	jsr $ffe2			jsr 	OSWriteStringZ 				; print
.267b	a2 0e		ldx #$0e			ldx 	#IFR0
.267d	20 1c 2e	jsr $2e1c			jsr 	IFloatPullRx
.2680	60		rts				rts
.2681					NotImplemented:
.2681	4c b3 23	jmp $23b3		jmp	ErrorV_unimplemented
.061f					ERRLine:
>061f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2684					WarmStart:
.2684	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2686	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2689	a9 6b		lda #$6b			lda 	#"k"
.268b	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.268e					WarmStartNewLine:
.268e	a9 0d		lda #$0d			lda 	#13
.2690	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2693					WarmStartNoPrompt:
.2693	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2695	9a		txs				txs
.2696	20 dc ff	jsr $ffdc			jsr 	OSEditNewLine 				; edit
.2699	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.269b	f0 f1		beq $268e			beq 	WarmStartNewLine
.269d	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.269f	d0 f2		bne $2693			bne 	WarmStartNoPrompt
.26a1	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.26a4	e8		inx				inx 								; skip length byte to make it ASCIIZ
.26a5	d0 01		bne $26a8			bne 	_WSSkip
.26a7	c8		iny				iny
.26a8					_WSSkip:
.26a8	86 24		stx $24				stx 	zTemp2 						; save address
.26aa	84 25		sty $25				sty 	zTemp2+1
.26ac	a2 d6		ldx #$d6			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.26ae	a0 26		ldy #$26			ldy 	#TOKGetCharacter >> 8
.26b0	38		sec				sec
.26b1	20 2b 1e	jsr $1e2b			jsr 	TOKTokenise
.26b4	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.26b7	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.26ba	d0 0b		bne $26c7			bne 	_WSLineEdit
.26bc	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.26be	85 1e		sta $1e				sta 	codePtr
.26c0	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.26c2	85 1f		sta $1f				sta 	codePtr+1
.26c4	4c 83 13	jmp $1383			jmp 	RUNNewLine
.26c7					_WSLineEdit:
.26c7	20 06 1d	jsr $1d06			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.26ca	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.26cd	c9 04		cmp #$04			cmp 	#4
.26cf	f0 03		beq $26d4			beq 	_WSNoInsert
.26d1	20 50 1d	jsr $1d50			jsr 	PGMInsertLine				; if not, maybe insert
.26d4					_WSNoInsert:
.26d4	80 bd		bra $2693			bra 	WarmStartNoPrompt
.26d6					TOKGetCharacter:
.26d6	b2 24		lda ($24)			lda 	(zTemp2)
.26d8	90 06		bcc $26e0			bcc 	_GSNoIncrement
.26da	e6 24		inc $24				inc 	zTemp2
.26dc	d0 02		bne $26e0			bne 	_GSNoIncrement
.26de	e6 25		inc $25				inc 	zTemp2+1
.26e0					_GSNoIncrement:
.26e0	c9 00		cmp #$00			cmp 	#0
.26e2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.26e3					VARArrayLookup:
.26e3	85 20		sta $20				sta 	zTemp0 						; save the array address pointer in zTemp0
.26e5	86 21		stx $21				stx 	zTemp0+1
.26e7	b2 20		lda ($20)			lda 	(zTemp0)
.26e9	48		pha				pha
.26ea	5a		phy				phy
.26eb	a0 01		ldy #$01			ldy 	#1
.26ed	b1 20		lda ($20),y			lda 	(zTemp0),y
.26ef	7a		ply				ply
.26f0	48		pha				pha
.26f1	20 b2 15	jsr $15b2			jsr 	EXPEvalInteger16 			; R0 now contains the index
.26f4	68		pla				pla 								; array address to zTemp0
.26f5	85 21		sta $21				sta 	zTemp0+1
.26f7	68		pla				pla
.26f8	85 20		sta $20				sta 	zTemp0
.26fa	5a		phy				phy 								; save codePtr position.
.26fb	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.26fd	b1 20		lda ($20),y			lda 	(zTemp0),y
.26ff	48		pha				pha 								; save bit 15 on stack.
.2700	29 7f		and #$7f			and 	#$7F
.2702	85 22		sta $22				sta 	zTemp1
.2704	a5 0e		lda $0e				lda 	IFR0+IM0 					; check range of index
.2706	d2 20		cmp ($20)			cmp 	(zTemp0)
.2708	a5 0f		lda $0f				lda 	IFR0+IM1
.270a	e5 22		sbc $22				sbc 	zTemp1
.270c	b0 3a		bcs $2748			bcs 	_VALIndex
.270e	a5 0f		lda $0f				lda 	IFR0+IM1  					; sanity check
.2710	c9 40		cmp #$40			cmp 	#$40
.2712	b0 34		bcs $2748			bcs 	_VALIndex
.2714	06 0e		asl $0e				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2716	26 0f		rol $0f				rol 	IFR0+IM1
.2718	fa		plx				plx 								; get msb of size -> X
.2719	30 04		bmi $271f			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.271b	06 0e		asl $0e				asl 	IFR0+IM0
.271d	26 0f		rol $0f				rol 	IFR0+IM1
.271f					_VARNotX4:
.271f	18		clc				clc 								; add the two for the size bytes
.2720	a5 0e		lda $0e				lda 	IFR0+IM0
.2722	69 02		adc #$02			adc 	#2
.2724	85 0e		sta $0e				sta 	IFR0+IM0
.2726	90 02		bcc $272a			bcc 	_VARNoCarry1
.2728	e6 0f		inc $0f				inc 	IFR0+IM1
.272a					_VARNoCarry1:
.272a	18		clc				clc 								; calculate the element address and push to stack.
.272b	a5 0e		lda $0e				lda 	IFR0+IM0
.272d	65 20		adc $20				adc 	zTemp0
.272f	48		pha				pha
.2730	a5 0f		lda $0f				lda 	IFR0+IM1
.2732	65 21		adc $21				adc 	zTemp0+1
.2734	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2736	30 04		bmi $273c			bmi 	_VARHasSubLevel
.2738	aa		tax				tax 								; address in XA
.2739	68		pla				pla
.273a	7a		ply				ply 								; restore Y and exit
.273b	60		rts				rts
.273c					_VARHasSubLevel:
.273c	aa		tax				tax 								; get link address in XA
.273d	68		pla				pla
.273e	7a		ply				ply 								; restore code position.
.273f	48		pha				pha
.2740	20 0c 25	jsr $250c			jsr 	ERRCheckComma 				; comma required.
.2743	68		pla				pla
.2744	20 e3 26	jsr $26e3			jsr 	VARArrayLookup 				; call it recursively
.2747	60		rts				rts
.2748					_VALIndex:
.2748	4c 4d 24	jmp $244d		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.274b					VARCreate:
.274b	5a		phy				phy
.274c	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.274e	a2 00		ldx #$00			ldx 	#0
.2750	20 38 10	jsr $1038			jsr 	AllocateMemory
.2753	85 22		sta $22				sta 	zTemp1 						; save new address in zTemp1
.2755	86 23		stx $23				stx 	zTemp1+1
.2757	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2759	ad 23 06	lda $0623			lda 	VARHash
.275c	91 22		sta ($22),y			sta 	(zTemp1),y
.275e	c8		iny				iny 								; put address of name into +3,+4
.275f	ad 21 06	lda $0621			lda 	VARNameAddress
.2762	91 22		sta ($22),y			sta 	(zTemp1),y
.2764	c8		iny				iny
.2765	ad 22 06	lda $0622			lda 	VARNameAddress+1
.2768	91 22		sta ($22),y			sta 	(zTemp1),y
.276a	ad 24 06	lda $0624			lda 	VARType
.276d	29 01		and #$01			and 	#1
.276f	f0 06		beq $2777			beq 	_CVNotString
.2771	a0 08		ldy #$08			ldy 	#5+3
.2773	a9 80		lda #$80			lda 	#$80
.2775	91 22		sta ($22),y			sta 	(zTemp1),y
.2777					_CVNotString:
.2777	ad 45 06	lda $0645			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.277a	85 20		sta $20				sta 	zTemp0
.277c	ad 46 06	lda $0646			lda 	VARHashEntry+1
.277f	85 21		sta $21				sta 	zTemp0+1
.2781	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2783	b2 20		lda ($20)			lda 	(zTemp0)
.2785	92 22		sta ($22)			sta 	(zTemp1)
.2787	b1 20		lda ($20),y			lda 	(zTemp0),y
.2789	91 22		sta ($22),y			sta 	(zTemp1),y
.278b	a5 22		lda $22				lda 	zTemp1 						; address of the new record into head
.278d	92 20		sta ($20)			sta 	(zTemp0)
.278f	a5 23		lda $23				lda 	zTemp1+1
.2791	91 20		sta ($20),y			sta 	(zTemp0),y
.2793	a5 22		lda $22				lda 	zTemp1 						; new record to XA
.2795	a6 23		ldx $23				ldx 	zTemp1+1
.2797	18		clc				clc 								; add 5 to point to the data.
.2798	69 05		adc #$05			adc 	#5
.279a	90 01		bcc $279d			bcc 	_VCNoCarry
.279c	e8		inx				inx
.279d					_VCNoCarry:
.279d	7a		ply				ply
.279e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.279f					VARFind:
.279f	5a		phy				phy
.27a0	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.27a2	b1 20		lda ($20),y			lda 	(zTemp0),y
.27a4	85 23		sta $23				sta 	zTemp1+1
.27a6	f0 1c		beq $27c4			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.27a8	b2 20		lda ($20)			lda 	(zTemp0)
.27aa	85 22		sta $22				sta 	zTemp1
.27ac					_VFLoop:
.27ac	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.27ae	b1 22		lda ($22),y			lda 	(zTemp1),y
.27b0	cd 23 06	cmp $0623			cmp 	VARHash
.27b3	f0 12		beq $27c7			beq 	_VFHashesMatch 				; if so, check the name.
.27b5					_VFNext:
.27b5	b2 22		lda ($22)			lda 	(zTemp1) 					; next link to AX
.27b7	aa		tax				tax
.27b8	a0 01		ldy #$01			ldy 	#1
.27ba	b1 22		lda ($22),y			lda 	(zTemp1),y
.27bc	85 23		sta $23				sta 	zTemp1+1
.27be	86 22		stx $22				stx 	zTemp1
.27c0	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.27c2	d0 e8		bne $27ac			bne 	_VFLoop
.27c4					_VFExitFail:
.27c4	7a		ply				ply
.27c5	18		clc				clc
.27c6	60		rts				rts
.27c7					_VFHashesMatch:
.27c7	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.27c9	b1 22		lda ($22),y			lda 	(zTemp1),y
.27cb	85 24		sta $24				sta 	zTemp2
.27cd	c8		iny				iny
.27ce	b1 22		lda ($22),y			lda 	(zTemp1),y
.27d0	85 25		sta $25				sta 	zTemp2+1
.27d2	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.27d4					_VFNameCompLoop:
.27d4	c8		iny				iny 								; char at a time
.27d5	b9 25 06	lda $0625,y			lda 	VARBuffer,y
.27d8	d1 24		cmp ($24),y			cmp 	(zTemp2),y
.27da	d0 d9		bne $27b5			bne 	_VFNext						; next entry if different.
.27dc	c9 7c		cmp #$7c			cmp 	#$7C
.27de	90 f4		bcc $27d4			bcc 	_VFNameCompLoop 			; until done the whole lot.
.27e0	18		clc				clc
.27e1	a5 22		lda $22				lda 	zTemp1
.27e3	a6 23		ldx $23				ldx 	zTemp1+1
.27e5	69 05		adc #$05			adc 	#5
.27e7	90 01		bcc $27ea			bcc 	_VFNNoCarry
.27e9	e8		inx				inx
.27ea					_VFNNoCarry:
.27ea	7a		ply				ply
.27eb	38		sec				sec
.27ec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.27ed					VARGetInfo:
.27ed	98		tya				tya 								; calculate the address of the identifier start.
.27ee	18		clc				clc
.27ef	65 1e		adc $1e				adc 	codePtr
.27f1	8d 21 06	sta $0621			sta 	VARNameAddress
.27f4	a5 1f		lda $1f				lda 	codePtr+1
.27f6	69 00		adc #$00			adc 	#0
.27f8	8d 22 06	sta $0622			sta 	VARNameAddress+1
.27fb	9c 23 06	stz $0623			stz 	VARHash
.27fe	a2 00		ldx #$00			ldx 	#0
.2800					_VARCopyName:
.2800	18		clc				clc 								; update the sum hash.
.2801	ad 23 06	lda $0623			lda 	VARHash
.2804	71 1e		adc ($1e),y			adc 	(codePtr),y
.2806	8d 23 06	sta $0623			sta 	VARHash
.2809	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get character and save it in buffer
.280b	c8		iny				iny
.280c	9d 25 06	sta $0625,x			sta 	VARBuffer,x
.280f	e8		inx				inx
.2810	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2812	90 ec		bcc $2800			bcc 	_VARCopyName
.2814	8d 24 06	sta $0624			sta 	VARType 					; save type byte
.2817	29 03		and #$03			and 	#3 							; type is 0-3
.2819	0a		asl a				asl 	a
.281a	0a		asl a				asl 	a
.281b	85 20		sta $20				sta 	zTemp0
.281d	ad 23 06	lda $0623			lda 	VARHash 					; force into range of hash entries per type.
.2820	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2822	65 20		adc $20				adc 	zTemp0 						; index of hash table
.2824	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2825	69 47		adc #$47			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2827	85 20		sta $20				sta 	zTemp0
.2829	8d 45 06	sta $0645			sta 	VARHashEntry
.282c	a9 06		lda #$06			lda 	#VARHashTables >> 8
.282e	69 00		adc #$00			adc 	#0
.2830	85 21		sta $21				sta 	zTemp0+1
.2832	8d 46 06	sta $0646			sta 	VARHashEntry+1
.2835	60		rts				rts
.2836					VARClearHashTables:
.2836	a2 00		ldx #$00			ldx 	#0
.2838					_VCHRLoop:
.2838	a9 00		lda #$00			lda 	#0
.283a	9d 47 06	sta $0647,x			sta 	VARHashTables,x
.283d	e8		inx				inx
.283e	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2840	d0 f6		bne $2838			bne 	_VCHRLoop
.2842	60		rts				rts
.0621					VARNameAddress:
>0621							.fill 	2
.0623					VARHash:
>0623							.fill 	1
.0624					VARType:
>0624							.fill 	1
.0625					VARBuffer:
>0625							.fill 	32
.0645					VARHashEntry:
>0645							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0647					VARHashTables:
>0647							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2843					VARCheckSimple:
.2843	aa		tax				tax 								; save in X
.2844	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2846	c9 7c		cmp #$7c			cmp 	#$7C
.2848	d0 15		bne $285f			bne 	_VCSComplex
.284a	c8		iny				iny 								; consume the second byte, the type.
.284b	8a		txa				txa  								; character (40-7F) x 4
.284c	0a		asl a				asl 	a
.284d	0a		asl a				asl  	a
.284e	18		clc				clc
.284f	69 67		adc #$67			adc 	#FastVariables & $FF
.2851	85 0e		sta $0e				sta 	IFR0+IM0
.2853	a9 06		lda #$06			lda 	#FastVariables >> 8
.2855	69 00		adc #$00			adc 	#0
.2857	85 0f		sta $0f				sta 	IFR0+IM1
.2859	64 10		stz $10				stz 	IFR0+IM2
.285b	64 11		stz $11				stz 	IFR0+IExp
.285d	38		sec				sec 								; it's a reference
.285e	60		rts				rts
.285f					_VCSComplex:
.285f	88		dey				dey	 								; extract information.
.2860	20 ed 27	jsr $27ed			jsr 	VARGetInfo
.2863	20 9f 27	jsr $279f			jsr 	VARFind 					; search for variable
.2866	b0 0a		bcs $2872			bcs 	_VCSHaveVariable
.2868	ad 24 06	lda $0624			lda 	VARType 					; error if arrays, cannot autocreate
.286b	29 02		and #$02			and 	#2
.286d	d0 25		bne $2894			bne 	_VCNoCreate
.286f	20 4b 27	jsr $274b			jsr 	VARCreate 					; create variable
.2872					_VCSHaveVariable:
.2872	48		pha				pha 								; save LSB on the stack
.2873	ad 24 06	lda $0624			lda 	VARType 					; get var type, and shift bit 1 into carry
.2876	6a		ror a				ror 	a
.2877	6a		ror a				ror 	a
.2878	68		pla				pla 								; restore LSB
.2879	90 08		bcc $2883			bcc 	_VCSNotArray 				; skip if not an array
.287b	20 e3 26	jsr $26e3			jsr 	VARArrayLookup 				; look for subscripts.
.287e	48		pha				pha 								; check )
.287f	20 04 25	jsr $2504			jsr 	ERRCheckRParen
.2882	68		pla				pla
.2883					_VCSNotArray:
.2883	86 0f		stx $0f				stx 	IFR0+IM1 					; save address
.2885	85 0e		sta $0e				sta 	IFR0+IM0
.2887	64 10		stz $10				stz 	IFR0+IM2 					; clear the unused byte.
.2889	ad 24 06	lda $0624			lda 	VARType 					; number/string bit into carry
.288c	6a		ror a				ror 	a
.288d	a9 00		lda #$00			lda 	#0
.288f	6a		ror a				ror 	a 							; now $00 or $80
.2890	85 11		sta $11				sta 	IFR0+IExp
.2892	38		sec				sec 								; it's a reference
.2893	60		rts				rts
.2894					_VCNoCreate:
.2894	4c 73 24	jmp $2473		jmp	ErrorV_uninitialised
.0667					FastVariables:
>0667							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.2897					IFInitialise:
.2897	9c d7 06	stz $06d7			stz 	IFStackIndex
.289a	60		rts				rts
.289b					IFloatSubtract:
.289b	da		phx				phx
.289c	a2 0e		ldx #$0e			ldx 	#IFR0
.289e	20 b7 2e	jsr $2eb7			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.28a1	fa		plx				plx
.28a2					IFloatAdd:
.28a2	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.28a4	05 11		ora $11				ora 	IFR0+IExp
.28a6	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.28a8	d0 4e		bne $28f8			bne 	_IFloatAddDecimals 			; decimal version.
.28aa					_IFAddSubMantissa:
.28aa	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.28ac	45 11		eor $11				eor 	IFR0+IExp
.28ae	29 40		and #$40			and 	#IFSign
.28b0	d0 21		bne $28d3			bne 	_IFloatSubMantissa
.28b2	18		clc				clc 								; do the actual addition
.28b3	a5 0e		lda $0e			lda 	IFR0+IM0
.28b5	75 00		adc $00,x		adc 		IM0,x
.28b7	85 0e		sta $0e			sta 	IFR0+IM0
.28b9	a5 0f		lda $0f			lda 	IFR0+IM1
.28bb	75 01		adc $01,x		adc 		IM1,x
.28bd	85 0f		sta $0f			sta 	IFR0+IM1
.28bf	a5 10		lda $10			lda 	IFR0+IM2
.28c1	75 02		adc $02,x		adc 		IM2,x
.28c3	85 10		sta $10			sta 	IFR0+IM2
.28c5	10 29		bpl $28f0			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.28c7	a2 0e		ldx #$0e			ldx 	#IFR0						; shift R0 right, divide by 2
.28c9	20 db 2e	jsr $2edb			jsr 	IFloatShiftRight
.28cc	20 05 2f	jsr $2f05			jsr 	IFloatIncExponent
.28cf	d0 1f		bne $28f0			bne 	_IFloatAddExit
.28d1	38		sec				sec 								; overflowed numerically.
.28d2	60		rts				rts
.28d3					_IFloatSubMantissa:
.28d3	38		sec				sec 								; do the subtraction R0-Rx
.28d4	a5 0e		lda $0e			lda 	IFR0+IM0
.28d6	f5 00		sbc $00,x		sbc 		IM0,x
.28d8	85 0e		sta $0e			sta 	IFR0+IM0
.28da	a5 0f		lda $0f			lda 	IFR0+IM1
.28dc	f5 01		sbc $01,x		sbc 		IM1,x
.28de	85 0f		sta $0f			sta 	IFR0+IM1
.28e0	a5 10		lda $10			lda 	IFR0+IM2
.28e2	f5 02		sbc $02,x		sbc 		IM2,x
.28e4	85 10		sta $10			sta 	IFR0+IM2
.28e6	b0 08		bcs $28f0			bcs 	_IFloatAddExit 				; no borrow so we are done.
.28e8	a2 0e		ldx #$0e			ldx 	#IFR0
.28ea	20 bf 2e	jsr $2ebf			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.28ed	20 b7 2e	jsr $2eb7			jsr 	IFloatNegate 				; negate
.28f0					_IFloatAddExit:
.28f0	18		clc				clc
.28f1	60		rts				rts
.28f2					_IFloatZeroAdd:
.28f2	fa		plx				plx 								; return this value in R0
.28f3	20 3d 2e	jsr $2e3d			jsr 	IFloatCopyFromRegister
.28f6	18		clc				clc
.28f7	60		rts				rts
.28f8					_IFloatAddDecimals:
.28f8	20 a5 2e	jsr $2ea5			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.28fb	f0 f3		beq $28f0			beq 	_IFloatAddExit
.28fd	20 e3 2e	jsr $2ee3			jsr 	IFloatNormalise 			; normalise RX
.2900	da		phx				phx 								; normalise R0
.2901	a2 0e		ldx #$0e			ldx 	#IFR0
.2903	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero
.2906	f0 ea		beq $28f2			beq 	_IFloatZeroAdd
.2908	20 e3 2e	jsr $2ee3			jsr 	IFloatNormalise
.290b	fa		plx				plx
.290c	a5 11		lda $11				lda 	IFR0+IExp 					; get the exponent of R0
.290e	29 3f		and #$3f			and 	#IFXMask
.2910	38		sec				sec
.2911	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2913	85 0c		sta $0c				sta 	iTemp0
.2915	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2917	29 3f		and #$3f			and 	#IFXMask
.2919	38		sec				sec
.291a	e9 20		sbc #$20			sbc 	#$20
.291c	c5 0c		cmp $0c				cmp 	iTemp0 						; get the larger adjusted
.291e	b0 02		bcs $2922			bcs 	_IFloatHaveLarger
.2920	a5 0c		lda $0c				lda 	iTemp0
.2922					_IFloatHaveLarger:
.2922	18		clc				clc 								; get the actual one back.
.2923	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2925	20 32 29	jsr $2932			jsr 	_IFShiftXToA
.2928	da		phx				phx
.2929	a2 0e		ldx #$0e			ldx 	#IFR0
.292b	20 32 29	jsr $2932			jsr 	_IFShiftXToA
.292e	fa		plx				plx
.292f	4c aa 28	jmp $28aa			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2932					_IFShiftXToA:
.2932	8d cf 06	sta $06cf			sta 	IFTarget
.2935	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero 			; check adding zero ?
.2938	f0 11		beq $294b			beq 	_IFSXExit
.293a					_IFSXLoop:
.293a	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.293c	29 3f		and #$3f			and 	#IFXMask
.293e	cd cf 06	cmp $06cf			cmp 	IFTarget
.2941	f0 08		beq $294b			beq 	_IFSXExit
.2943	20 db 2e	jsr $2edb			jsr 	IFloatShiftRight
.2946	20 05 2f	jsr $2f05			jsr 	IFloatIncExponent
.2949	80 ef		bra $293a			bra 	_IFSXLoop
.294b					_IFSXExit:
.294b	60		rts				rts
.06cf					IFTarget:
>06cf							.fill 	1
.294c					IFloatMultiply:
.294c	8e cf 06	stx $06cf			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.294f	20 07 2a	jsr $2a07			jsr 	IFCalculateNewSign
.2952	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2954	05 11		ora $11				ora 	IFR0+IExp
.2956	29 3f		and #$3f			and 	#IFXMask
.2958	15 01		ora $01,x			ora 	IM1,x
.295a	05 0f		ora $0f				ora 	IFR0+IM1
.295c	15 02		ora $02,x			ora 	IM2,x
.295e	05 10		ora $10				ora 	IFR0+IM2
.2960	d0 0a		bne $296c			bne 	_IFMStandard
.2962	20 88 2e	jsr $2e88			jsr 	IFloatMultiply8BitRx
.2965	ad d1 06	lda $06d1			lda 	IFNewSign
.2968	85 11		sta $11				sta 	IFR0+IExp
.296a	18		clc				clc
.296b	60		rts				rts
.296c					_IFMStandard:
.296c	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.296e	20 fe 29	jsr $29fe			jsr 	IFMSignExtend
.2971	8d d0 06	sta $06d0			sta 	IFNewExponent
.2974	a5 11		lda $11				lda 	IFR0+IExp
.2976	20 fe 29	jsr $29fe			jsr 	IFMSignExtend
.2979	18		clc				clc
.297a	6d d0 06	adc $06d0			adc 	IFNewExponent
.297d	8d d0 06	sta $06d0			sta 	IFNewExponent
.2980	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2982	20 4e 2e	jsr $2e4e			jsr 	IFloatCopyToRegister
.2985	a2 0e		ldx #$0e			ldx 	#IFR0 						; zero R0 (the result)
.2987	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.298a					_IFMLoop:
.298a	a2 1a		ldx #$1a			ldx 	#IFRTemp
.298c	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero
.298f	f0 3a		beq $29cb			beq 	_IFMExit
.2991	ae cf 06	ldx $06cf			ldx 	IFTarget 					; look at adder MSB
.2994	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2996	10 03		bpl $299b			bpl	 	_IFMTargetOkay
.2998	20 ef 29	jsr $29ef			jsr 	_IFMShiftAll
.299b					_IFMTargetOkay:
.299b	a5 1a		lda $1a				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.299d	29 01		and #$01			and 	#1
.299f	f0 16		beq $29b7			beq 	_IFMNoAdd
.29a1	ae cf 06	ldx $06cf			ldx 	IFTarget 					; add adder
.29a4	18		clc				clc
.29a5	a5 0e		lda $0e			lda 	IFR0+IM0
.29a7	75 00		adc $00,x		adc 		IM0,x
.29a9	85 0e		sta $0e			sta 	IFR0+IM0
.29ab	a5 0f		lda $0f			lda 	IFR0+IM1
.29ad	75 01		adc $01,x		adc 		IM1,x
.29af	85 0f		sta $0f			sta 	IFR0+IM1
.29b1	a5 10		lda $10			lda 	IFR0+IM2
.29b3	75 02		adc $02,x		adc 		IM2,x
.29b5	85 10		sta $10			sta 	IFR0+IM2
.29b7					_IFMNoAdd:
.29b7	a5 10		lda $10				lda 	IFR0+IM2
.29b9	10 03		bpl $29be			bpl 	_IFMResultOkay
.29bb	20 ef 29	jsr $29ef			jsr 	_IFMShiftAll
.29be					_IFMResultOkay:
.29be	a2 1a		ldx #$1a			ldx 	#IFRTemp
.29c0	20 db 2e	jsr $2edb			jsr 	IFloatShiftRight
.29c3	ae cf 06	ldx $06cf			ldx 	IFTarget
.29c6	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.29c9	80 bf		bra $298a			bra 	_IFMLoop
.29cb					_IFMExit:
.29cb	ad d0 06	lda $06d0			lda 	IFNewExponent 				; validate new exponent.
.29ce	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.29d0	90 0f		bcc $29e1			bcc 	_IFMOkay
.29d2	c9 e0		cmp #$e0			cmp 	#$E0
.29d4	b0 0b		bcs $29e1			bcs 	_IFMOkay
.29d6	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.29d8	f0 13		beq $29ed			beq 	_IFMError
.29da	a2 0e		ldx #$0e			ldx 	#IFR0 						; return zero underflow
.29dc	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.29df	18		clc				clc
.29e0	60		rts				rts
.29e1					_IFMOkay:
.29e1	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.29e3	0d d1 06	ora $06d1			ora 	IFNewSign
.29e6	85 11		sta $11				sta 	IFR0+IExp
.29e8	18		clc				clc
.29e9	60		rts				rts
.29ea	4c ff ff	jmp $ffff			jmp 	$FFFF
.29ed					_IFMError:
.29ed	38		sec				sec
.29ee	60		rts				rts
.29ef					_IFMShiftAll:
.29ef	a2 0e		ldx #$0e			ldx 	#IFR0
.29f1	20 db 2e	jsr $2edb			jsr 	IFloatShiftRight
.29f4	ae cf 06	ldx $06cf			ldx 	IFTarget
.29f7	20 db 2e	jsr $2edb			jsr 	IFloatShiftRight
.29fa	ee d0 06	inc $06d0			inc 	IFNewExponent
.29fd	60		rts				rts
.29fe					IFMSignExtend:
.29fe	29 3f		and #$3f			and 	#IFXMask
.2a00	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2a02	90 02		bcc $2a06			bcc 	_IFMNoSXX
.2a04	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2a06					_IFMNoSXX:
.2a06	60		rts				rts
.2a07					IFCalculateNewSign:
.2a07	b5 03		lda $03,x			lda 	IExp,x
.2a09	45 11		eor $11				eor 	IFR0+IExp
.2a0b	29 40		and #$40			and 	#IFSign
.2a0d	8d d1 06	sta $06d1			sta 	IFNewSign
.2a10	60		rts				rts
.06d0					IFNewExponent:
>06d0							.fill 	1
.06d1					IFNewSign:
>06d1							.fill 	1
.2a11					IFloatDivideInteger:
.2a11	20 2a 2a	jsr $2a2a			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2a14	b0 06		bcs $2a1c			bcs 	_IFDIExit
.2a16	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy result from register.
.2a18	20 3d 2e	jsr $2e3d			jsr 	IFloatCopyFromRegister
.2a1b	18		clc				clc
.2a1c					_IFDIExit:
.2a1c	60		rts				rts
.2a1d					IFloatModulusInteger:
.2a1d	20 2a 2a	jsr $2a2a			jsr 	IFloatDivideIntegerCommon
.2a20	b0 07		bcs $2a29			bcs 	_IFMIExit
.2a22	ae cf 06	ldx $06cf			ldx 	IFTarget
.2a25	20 3d 2e	jsr $2e3d			jsr 	IFloatCopyFromRegister
.2a28	18		clc				clc
.2a29					_IFMIExit:
.2a29	60		rts				rts
.2a2a					IFloatDivideIntegerCommon:
.2a2a	8e cf 06	stx $06cf			stx 	IFTarget  					; this is s1, s0 = R0
.2a2d	20 07 2a	jsr $2a07			jsr 	IFCalculateNewSign 			; calculate sign of result
.2a30	20 58 2a	jsr $2a58			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2a33	a2 0e		ldx #$0e			ldx 	#IFR0 						; check divide by zero
.2a35	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero
.2a38	f0 1c		beq $2a56			beq 	_IFDIDivZero
.2a3a	ae cf 06	ldx $06cf			ldx 	IFTarget 					; zero Rx (S1)
.2a3d	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.2a40	5a		phy				phy
.2a41	a0 18		ldy #$18			ldy 	#24
.2a43					_IFDILoop:
.2a43	20 69 2a	jsr $2a69			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2a46	20 75 2a	jsr $2a75			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2a49	88		dey				dey
.2a4a	d0 f7		bne $2a43			bne 	_IFDILoop 					; do it 24 times
.2a4c	7a		ply				ply
.2a4d	ad d1 06	lda $06d1			lda 	IFNewSign 					; set sign of result.
.2a50	29 40		and #$40			and 	#IFSign
.2a52	85 1d		sta $1d				sta 	IFRTemp+IExp
.2a54	18		clc				clc 								; is okay.
.2a55	60		rts				rts
.2a56					_IFDIDivZero:
.2a56	38		sec				sec
.2a57	60		rts				rts
.2a58					IFDCopyRXToRTemp:
.2a58	b5 00		lda $00,x			lda 	IM0,x
.2a5a	85 1a		sta $1a				sta 	IFRTemp+IM0
.2a5c	b5 01		lda $01,x			lda 	IM1,x
.2a5e	85 1b		sta $1b				sta 	IFRTemp+IM1
.2a60	b5 02		lda $02,x			lda 	IM2,x
.2a62	85 1c		sta $1c				sta 	IFRTemp+IM2
.2a64	b5 03		lda $03,x			lda 	IExp,x
.2a66	85 1d		sta $1d				sta 	IFRTemp+IExp
.2a68	60		rts				rts
.2a69					IFDShiftSTempS1Left:
.2a69	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2a6b	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft
.2a6e	ae cf 06	ldx $06cf			ldx 	IFTarget
.2a71	20 d4 2e	jsr $2ed4			jsr 	IFloatRotateLeft
.2a74	60		rts				rts
.2a75					IFDTrySubtract:
.2a75	ae cf 06	ldx $06cf			ldx 	IFTarget 					; s1 = Rx
.2a78	38		sec				sec 								; subtract, saving the results on the stack.
.2a79	b5 00		lda $00,x			lda 	IM0,x
.2a7b	e5 0e		sbc $0e				sbc 	IFR0+IM0
.2a7d	48		pha				pha
.2a7e	b5 01		lda $01,x			lda 	IM1,x
.2a80	e5 0f		sbc $0f				sbc 	IFR0+IM1
.2a82	48		pha				pha
.2a83	b5 02		lda $02,x			lda 	IM2,x
.2a85	e5 10		sbc $10				sbc 	IFR0+IM2
.2a87	b0 03		bcs $2a8c			bcs 	_IFDCanSubtract
.2a89	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2a8a	68		pla				pla
.2a8b	60		rts				rts
.2a8c					_IFDCanSubtract:
.2a8c	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2a8e	68		pla				pla
.2a8f	95 01		sta $01,x			sta 	IM1,x
.2a91	68		pla				pla
.2a92	95 00		sta $00,x			sta 	IM0,x
.2a94	e6 1a		inc $1a				inc 	IFRTemp+IM0 				; increment temp
.2a96	d0 06		bne $2a9e			bne 	_IFDCSExit
.2a98	e6 1b		inc $1b				inc 	IFRTemp+IM1
.2a9a	d0 02		bne $2a9e			bne 	_IFDCSExit
.2a9c	e6 1c		inc $1c				inc 	IFRTemp+IM2
.2a9e					_IFDCSExit:
.2a9e	60		rts				rts
.2a9f					IFloatBitwiseAnd:
.2a9f	5a		phy				phy
.2aa0	20 e4 2a	jsr $2ae4			jsr 	IFPreProcessBitwise 		; set up everything.
.2aa3	d0 0f		bne $2ab4			bne 	_IFBAExit
.2aa5					_IFBALoop:
.2aa5	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2aa8	35 00		and $00,x			and 	IM0,x
.2aaa	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2aad	e8		inx				inx
.2aae	c8		iny				iny
.2aaf	c0 03		cpy #$03			cpy 	#3
.2ab1	d0 f2		bne $2aa5			bne 	_IFBALoop
.2ab3	18		clc				clc
.2ab4					_IFBAExit:
.2ab4	7a		ply				ply
.2ab5	60		rts				rts
.2ab6					IFloatBitwiseOr:
.2ab6	5a		phy				phy
.2ab7	20 e4 2a	jsr $2ae4			jsr 	IFPreProcessBitwise 		; set up everything.
.2aba	d0 0f		bne $2acb			bne 	_IFBAExit
.2abc					_IFBALoop:
.2abc	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2abf	15 00		ora $00,x			ora 	IM0,x
.2ac1	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2ac4	e8		inx				inx
.2ac5	c8		iny				iny
.2ac6	c0 03		cpy #$03			cpy 	#3
.2ac8	d0 f2		bne $2abc			bne 	_IFBALoop
.2aca	18		clc				clc
.2acb					_IFBAExit:
.2acb	7a		ply				ply
.2acc	60		rts				rts
.2acd					IFloatBitwiseXor:
.2acd	5a		phy				phy
.2ace	20 e4 2a	jsr $2ae4			jsr 	IFPreProcessBitwise 		; set up everything.
.2ad1	d0 0f		bne $2ae2			bne 	_IFBAExit
.2ad3					_IFBALoop:
.2ad3	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2ad6	55 00		eor $00,x			eor 	IM0,x
.2ad8	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2adb	e8		inx				inx
.2adc	c8		iny				iny
.2add	c0 03		cpy #$03			cpy 	#3
.2adf	d0 f2		bne $2ad3			bne 	_IFBALoop
.2ae1	18		clc				clc
.2ae2					_IFBAExit:
.2ae2	7a		ply				ply
.2ae3	60		rts				rts
.2ae4					IFPreProcessBitwise:
.2ae4	a0 00		ldy #$00			ldy 	#0 							; set index.
.2ae6	a5 11		lda $11				lda 	IFR0+IExp 					; OR exponents
.2ae8	15 03		ora $03,x			ora 	IExp,x
.2aea	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2aec	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2aee	38		sec				sec 								; carry set just in cases.
.2aef	60		rts				rts
.2af0					IFloatAbsoluteR0:
.2af0	a5 11		lda $11				lda 	IFR0+IExp					; reset the sign bit.
.2af2	29 bf		and #$bf			and 	#IFSign ^ 255
.2af4	85 11		sta $11				sta 	IFR0+IExp
.2af6	18		clc				clc
.2af7	60		rts				rts
.2af8					IFloatSquareRootR0:
.2af8	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, return zero.
.2afa	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero
.2afd	a5 11		lda $11				lda	 	IFR0+IExp 					; if negative fail.
.2aff	29 40		and #$40			and 	#IFSign
.2b01	d0 2f		bne $2b32			bne 	_IFSRFail
.2b03	20 e3 2e	jsr $2ee3			jsr 	IFloatNormalise 			; it will work better !
.2b06	a2 12		ldx #$12			ldx 	#IFR1 						; R1 contains original throughout
.2b08	20 4e 2e	jsr $2e4e			jsr 	IFloatCopyToRegister
.2b0b	a5 11		lda $11				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2b0d	20 fe 29	jsr $29fe			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2b10	18		clc				clc
.2b11	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2b13	85 11		sta $11				sta 	IFR0+IExp
.2b15	4a		lsr a				lsr 	a 							; which we can halve.
.2b16	38		sec				sec 								; convert back
.2b17	e9 17		sbc #$17			sbc 	#23
.2b19	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2b1b	85 11		sta $11				sta 	IFR0+IExp 					; to R0
.2b1d	20 34 2b	jsr $2b34			jsr 	_IFSRNewton
.2b20	20 34 2b	jsr $2b34			jsr 	_IFSRNewton
.2b23	20 34 2b	jsr $2b34			jsr 	_IFSRNewton
.2b26	20 34 2b	jsr $2b34			jsr 	_IFSRNewton
.2b29	18		clc				clc
.2b2a	60		rts				rts
.2b2b					_IFSRZero:
.2b2b	a2 0e		ldx #$0e			ldx 	#IFR0
.2b2d	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.2b30	18		clc				clc
.2b31	60		rts				rts
.2b32					_IFSRFail:
.2b32	38		sec				sec
.2b33	60		rts				rts
.2b34					_IFSRNewton:
.2b34	a2 12		ldx #$12			ldx 	#IFR1 						; push original value (R3) on the stack
.2b36	20 fb 2d	jsr $2dfb			jsr 	IFloatPushRx
.2b39	a2 0e		ldx #$0e			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2b3b	20 fb 2d	jsr $2dfb			jsr 	IFloatPushRx
.2b3e	a2 12		ldx #$12			ldx 	#IFR1 						; guess = original / guess
.2b40	20 cf 2b	jsr $2bcf			jsr 	IFloatDivideFloat
.2b43	a2 12		ldx #$12			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2b45	20 1c 2e	jsr $2e1c			jsr 	IFloatPullRx
.2b48	20 a2 28	jsr $28a2			jsr 	IFloatAdd 					; now guess + original/guess
.2b4b	a2 0e		ldx #$0e			ldx 	#IFR0 						; divide by 2
.2b4d	20 db 2e	jsr $2edb			jsr 	IFloatShiftRight
.2b50	a2 12		ldx #$12			ldx 	#IFR1
.2b52	20 1c 2e	jsr $2e1c			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2b55	60		rts				rts
.2b56					IFloatFractionalR0:
.2b56	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2b58	29 3f		and #$3f			and 	#IFXMask
.2b5a	f0 17		beq $2b73			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2b5c	20 f0 2a	jsr $2af0			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2b5f	a2 0e		ldx #$0e			ldx 	#IFR0
.2b61	20 e3 2e	jsr $2ee3			jsr 	IFloatNormalise 			; normalise R0
.2b64	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy to RTemp
.2b66	20 4e 2e	jsr $2e4e			jsr 	IFloatCopyToRegister
.2b69	20 ac 2b	jsr $2bac			jsr 	IFloatIntegerR0 			; take integer part of R0
.2b6c	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; subtract
.2b6e	20 9b 28	jsr $289b			jsr 	IFloatSubtract
.2b71	80 05		bra $2b78			bra 	_FIPExit
.2b73					_FIPZero:
.2b73	a2 0e		ldx #$0e			ldx 	#IFR0
.2b75	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.2b78					_FIPExit:
.2b78	18		clc				clc
.2b79	60		rts				rts
.2b7a					IFloatCompare:
.2b7a	20 9b 28	jsr $289b			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2b7d	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2b7f	05 11		ora $11				ora 	IFR0+IExp
.2b81	a2 0e		ldx #$0e			ldx 	#IFR0 						; only using R0 from now on.
.2b83	29 3f		and #$3f			and 	#IFXMask
.2b85	d0 19		bne $2ba0			bne 	_IFCNonInteger
.2b87	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero 			; check if zero
.2b8a	f0 0f		beq $2b9b			beq 	_IFCZero
.2b8c					_IFCReturnSign:
.2b8c	a5 11		lda $11				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2b8e	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2b90	48		pha				pha
.2b91	a9 01		lda #$01			lda 	#1
.2b93	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte 				; return to +1
.2b96	68		pla				pla 								; sign bit back
.2b97	85 11		sta $11				sta 	IFR0+IExp					; set that sign
.2b99	18		clc				clc
.2b9a	60		rts				rts
.2b9b					_IFCZero:
.2b9b	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.2b9e	18		clc				clc
.2b9f	60		rts				rts
.2ba0					_IFCNonInteger:
.2ba0	a5 0e		lda $0e				lda 	IFR0+IM0
.2ba2	29 00		and #$00			and		#$00
.2ba4	05 0f		ora $0f				ora 	IFR0+IM1
.2ba6	05 10		ora $10				ora 	IFR0+IM2
.2ba8	f0 f1		beq $2b9b			beq 	_IFCZero 					; near enough !
.2baa	80 e0		bra $2b8c			bra 	_IFCReturnSign 				; return the sign of the difference.
.2bac					IFloatIntegerR0:
.2bac	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2bae	29 3f		and #$3f			and 	#IFXMask
.2bb0	f0 1b		beq $2bcd			beq 	_FIPExit 					; if so do nothing
.2bb2	a2 0e		ldx #$0e			ldx 	#IFR0
.2bb4	20 e3 2e	jsr $2ee3			jsr 	IFloatNormalise 			; normalise
.2bb7	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero 			; is it zero ?
.2bba	f0 0e		beq $2bca			beq 	_FIPZero 					; if so return zero.
.2bbc					_FIPShift:
.2bbc	a5 11		lda $11				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2bbe	29 20		and #$20			and 	#$20 						; still -ve
.2bc0	f0 0b		beq $2bcd			beq 	_FIPExit
.2bc2	20 db 2e	jsr $2edb			jsr 	IFloatShiftRight 			; shift mantissa right
.2bc5	20 05 2f	jsr $2f05			jsr 	IFloatIncExponent 			; bump exponent
.2bc8	80 f2		bra $2bbc			bra 	_FIPShift
.2bca					_FIPZero:
.2bca	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.2bcd					_FIPExit:
.2bcd	18		clc				clc
.2bce	60		rts				rts
.2bcf					IFloatDivideFloat:
.2bcf	8e cf 06	stx $06cf			stx 	IFTarget  					; this is s1, s0 = R0
.2bd2	20 07 2a	jsr $2a07			jsr 	IFCalculateNewSign 			; calculate sign of result
.2bd5	20 e3 2e	jsr $2ee3			jsr 	IFloatNormalise 			; normalise RX
.2bd8	a2 0e		ldx #$0e			ldx 	#IFR0 						; normalise R0
.2bda	20 e3 2e	jsr $2ee3			jsr 	IFloatNormalise
.2bdd	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero
.2be0	f0 56		beq $2c38			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2be2	a5 11		lda $11				lda 	IFR0+IExp 					; calculate s0.exponent
.2be4	20 fe 29	jsr $29fe			jsr 	IFMSignExtend
.2be7	8d d0 06	sta $06d0			sta 	IFNewExponent
.2bea	ae cf 06	ldx $06cf			ldx 	IFTarget 					; calculate s1.exponent
.2bed	b5 03		lda $03,x			lda 	IExp,x
.2bef	20 fe 29	jsr $29fe			jsr 	IFMSignExtend
.2bf2	38		sec				sec
.2bf3	ed d0 06	sbc $06d0			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2bf6	38		sec				sec
.2bf7	e9 17		sbc #$17			sbc 	#23
.2bf9	8d d0 06	sta $06d0			sta 	IFNewExponent
.2bfc	20 3a 2c	jsr $2c3a			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2bff	a5 1c		lda $1c				lda 	IFRTemp+IM2 				; result has overflowed ?
.2c01	10 08		bpl $2c0b			bpl 	_IFDFNoShiftResult
.2c03	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; if so, fix it up.
.2c05	20 db 2e	jsr $2edb			jsr 	IFloatShiftRight
.2c08	ee d0 06	inc $06d0			inc 	IFNewExponent
.2c0b					_IFDFNoShiftResult:
.2c0b	ad d0 06	lda $06d0			lda 	IFNewExponent 				; underflow/overflow check.
.2c0e	30 06		bmi $2c16			bmi 	_IFDFCheckUnderflow
.2c10	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2c12	b0 24		bcs $2c38			bcs 	_IFDFDivZero
.2c14	80 11		bra $2c27			bra		_IFDFExit
.2c16					_IFDFCheckUnderflow:
.2c16	ad d0 06	lda $06d0			lda 	IFNewExponent 				; shift into a legal exponent.
.2c19	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2c1b	b0 0a		bcs $2c27			bcs 	_IFDFExit
.2c1d	ee d0 06	inc $06d0			inc 	IFNewExponent
.2c20	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2c22	20 db 2e	jsr $2edb			jsr 	IFloatShiftRight
.2c25	80 ef		bra $2c16			bra 	_IFDFCheckUnderflow
.2c27					_IFDFExit:
.2c27	ad d0 06	lda $06d0			lda 	IFNewExponent 				; combine exponent and sign.
.2c2a	29 3f		and #$3f			and 	#IFXMask
.2c2c	0d d1 06	ora $06d1			ora 	IFNewSign
.2c2f	85 1d		sta $1d				sta 	IFRTemp+IExp
.2c31	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy RTemp to R0.
.2c33	20 3d 2e	jsr $2e3d			jsr 	IFloatCopyFromRegister
.2c36	18		clc				clc
.2c37	60		rts				rts
.2c38					_IFDFDivZero:
.2c38	38		sec				sec
.2c39	60		rts				rts
.2c3a					IFloatDivideSupport:
.2c3a	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; zero RTemp
.2c3c	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.2c3f	5a		phy				phy 								; main division loop x 23
.2c40	a0 17		ldy #$17			ldy 	#23
.2c42					_IFDSLoop:
.2c42	20 75 2a	jsr $2a75			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2c45	20 69 2a	jsr $2a69			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2c48	88		dey				dey
.2c49	d0 f7		bne $2c42			bne 	_IFDSLoop 					; do it 24 times
.2c4b	7a		ply				ply
.2c4c	60		rts				rts
.2c4d					IFloatIntegerToStringR0:
.2c4d	8d d2 06	sta $06d2			sta 	IFBase 						; save base to use.
.2c50	20 2d 2f	jsr $2f2d			jsr 	IFloatBufferReset			; empty buffer
.2c53	a5 11		lda $11				lda 	IFR0+IExp					; check integer
.2c55	29 3f		and #$3f			and 	#IFXMask
.2c57	d0 1e		bne $2c77			bne 	_IFIFail
.2c59	a2 0e		ldx #$0e			ldx 	#IFR0 						; skip - check if zero.
.2c5b	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero
.2c5e	f0 0e		beq $2c6e			beq 	_IFINotNegative
.2c60	a5 11		lda $11				lda 	IFR0+IExp 					; is signed ?
.2c62	29 40		and #$40			and 	#IFSign
.2c64	f0 08		beq $2c6e			beq 	_IFINotNegative
.2c66	a9 2d		lda #$2d			lda 	#"-"						; output -
.2c68	20 3c 2f	jsr $2f3c			jsr 	IFloatBufferWrite
.2c6b	20 b7 2e	jsr $2eb7			jsr 	IFloatNegate 				; tidy up !
.2c6e					_IFINotNegative:
.2c6e	20 79 2c	jsr $2c79			jsr 	_IFIRecursiveConvert 		; start converting
.2c71	20 34 2f	jsr $2f34			jsr 	IFloatGetBufferAddress
.2c74	18		clc				clc
.2c75	80 01		bra $2c78			bra 	_IFIExit
.2c77					_IFIFail:
.2c77	38		sec				sec
.2c78					_IFIExit:
.2c78	60		rts				rts
.2c79					_IFIRecursiveConvert:
.2c79	a2 12		ldx #$12			ldx 	#IFR1
.2c7b	20 4e 2e	jsr $2e4e			jsr 	IFloatCopyToRegister 		; R0->R1
.2c7e	a2 0e		ldx #$0e			ldx 	#IFR0
.2c80	ad d2 06	lda $06d2			lda 	IFBase 						; Base -> R0
.2c83	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.2c86	a2 12		ldx #$12			ldx 	#IFR1 						; R0 = R1 / R0
.2c88	20 11 2a	jsr $2a11			jsr 	IFloatDivideInteger
.2c8b	a2 0e		ldx #$0e			ldx 	#IFR0 						; if result <> 0
.2c8d	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero
.2c90	f0 09		beq $2c9b			beq 	_IFIOutDigit
.2c92	a5 12		lda $12				lda 	IFR1+IM0 					; save remainder
.2c94	48		pha				pha
.2c95	20 79 2c	jsr $2c79			jsr 	_IFIRecursiveConvert 		; convert the divider
.2c98	68		pla				pla
.2c99	85 12		sta $12				sta 	IFR1+IM0 					; restore remainder
.2c9b					_IFIOutDigit:
.2c9b	a5 12		lda $12				lda 	IFR1+IM0 					; get remainder.
.2c9d	c9 0a		cmp #$0a			cmp	 	#10
.2c9f	90 02		bcc $2ca3			bcc 	_IFINotHex
.2ca1	69 06		adc #$06			adc 	#6
.2ca3					_IFINotHex:
.2ca3	69 30		adc #$30			adc 	#48
.2ca5	20 3c 2f	jsr $2f3c			jsr 	IFloatBufferWrite
.2ca8	60		rts				rts
.06d2					IFBase:
>06d2							.fill 	1
.2ca9					IFloatFloatToStringR0:
.2ca9	a2 16		ldx #$16			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2cab	20 fb 2d	jsr $2dfb			jsr 	IFloatPushRx
.2cae	20 4e 2e	jsr $2e4e			jsr 	IFloatCopyToRegister
.2cb1	20 ac 2b	jsr $2bac			jsr 	IFloatIntegerR0				; make R0 integer
.2cb4	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2cb6	20 4d 2c	jsr $2c4d			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2cb9	9c d3 06	stz $06d3			stz 	IFloatDecimalCount 			; zero the decimal count.
.2cbc	a5 19		lda $19				lda 	IFR2+IExp 					; is integer.
.2cbe	29 3f		and #$3f			and 	#IFXMask
.2cc0	f0 44		beq $2d06			beq 	_IFFSExit
.2cc2					_IFloatFracLoop:
.2cc2	a2 16		ldx #$16			ldx 	#IFR2 						; R0 = fractional part of R2
.2cc4	20 3d 2e	jsr $2e3d			jsr 	IFloatCopyFromRegister
.2cc7	20 56 2b	jsr $2b56			jsr 	IFloatFractionalR0
.2cca	20 e3 2e	jsr $2ee3			jsr 	IFloatNormalise
.2ccd	a2 16		ldx #$16			ldx 	#IFR2
.2ccf	20 4e 2e	jsr $2e4e			jsr 	IFloatCopyToRegister 		; copy to R2
.2cd2	a2 16		ldx #$16			ldx 	#IFR2 						; set R2 to 10
.2cd4	a9 0a		lda #$0a			lda 	#10
.2cd6	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.2cd9	a2 16		ldx #$16			ldx 	#IFR2						; R0,R2 = R2 * 10
.2cdb	20 4c 29	jsr $294c			jsr 	IFloatMultiply
.2cde	a2 16		ldx #$16			ldx 	#IFR2
.2ce0	20 4e 2e	jsr $2e4e			jsr 	IFloatCopyToRegister
.2ce3	20 ac 2b	jsr $2bac			jsr 	IFloatIntegerR0 			; get integer part of R0
.2ce6	ad d3 06	lda $06d3			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2ce9	c9 03		cmp #$03			cmp 	#3
.2ceb	f0 16		beq $2d03			beq 	_IFFSExitStripZero
.2ced	ad d3 06	lda $06d3			lda 	IFloatDecimalCount 			; written the DP yet ?
.2cf0	d0 05		bne $2cf7			bne 	_IFloatNotFirst
.2cf2	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2cf4	20 3c 2f	jsr $2f3c			jsr 	IFloatBufferWrite
.2cf7					_IFloatNotFirst:
.2cf7	ee d3 06	inc $06d3			inc 	IFloatDecimalCount
.2cfa	a5 0e		lda $0e				lda 	IFR0+IM0 					; get digit
.2cfc	09 30		ora #$30			ora 	#"0"						; ASCII
.2cfe	20 3c 2f	jsr $2f3c			jsr 	IFloatBufferWrite 			; write to the buffer.
.2d01	80 bf		bra $2cc2			bra 	_IFloatFracLoop
.2d03					_IFFSExitStripZero:
.2d03	20 4b 2f	jsr $2f4b			jsr 	IFloatStripTrailingZeros
.2d06					_IFFSExit:
.2d06	a2 16		ldx #$16			ldx 	#IFR2 						; restore R2
.2d08	20 1c 2e	jsr $2e1c			jsr 	IFloatPullRx
.2d0b	20 34 2f	jsr $2f34			jsr 	IFloatGetBufferAddress
.2d0e	18		clc				clc
.2d0f	60		rts				rts
.06d3					IFloatDecimalCount:
>06d3							.fill 	1
.2d10					IFloatStringToFloatR0:
.2d10	8d d4 06	sta $06d4			sta 	IFCount 					; save it out.
.2d13	86 0c		stx $0c				stx 	iTemp0
.2d15	84 0d		sty $0d				sty 	iTemp0+1
.2d17	a2 0e		ldx #$0e			ldx 	#IFR0 						; reset the current value.
.2d19	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.2d1c	9c d5 06	stz $06d5			stz 	IFSignFlag 					; clear the sign flag
.2d1f	20 ac 2d	jsr $2dac			jsr 	IFSTFGetNext 				; get first
.2d22	f0 1b		beq $2d3f			beq 	_IFSTFFail 					; no character
.2d24	90 10		bcc $2d36			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2d26	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2d28	d0 15		bne $2d3f			bne 	_IFSTFFail
.2d2a	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2d2c	8d d5 06	sta $06d5			sta 	IFSignFlag
.2d2f					_IFSTFLoop:
.2d2f	20 ac 2d	jsr $2dac			jsr 	IFSTFGetNext 				; get next
.2d32	b0 0b		bcs $2d3f			bcs 	_IFSTFFail 					; bad character.
.2d34	f0 11		beq $2d47			beq 	_IFSTFExit 					; end of data
.2d36					_IFSTFHaveChar:
.2d36	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2d38	f0 08		beq $2d42			beq 	_IFSTFDecimal
.2d3a	20 d0 2d	jsr $2dd0			jsr 	IFSTFAddR0 					; add number in
.2d3d	80 f0		bra $2d2f			bra 	_IFSTFLoop 					; keep going until . or end.
.2d3f					_IFSTFFail:
.2d3f	38		sec				sec
.2d40	80 0d		bra $2d4f			bra 	_IFSTFReturn
.2d42					_IFSTFDecimal:
.2d42	20 57 2d	jsr $2d57			jsr 	IFSTFDecimal 				; call the decimal places code.
.2d45	b0 08		bcs $2d4f			bcs 	_IFSTFReturn 				; error
.2d47					_IFSTFExit:
.2d47	a5 11		lda $11				lda 	IFR0+IExp 					; copy sign flag in.
.2d49	0d d5 06	ora $06d5			ora 	IFSignFlag
.2d4c	85 11		sta $11				sta 	IFR0+IExp
.2d4e	18		clc				clc
.2d4f					_IFSTFReturn:
.2d4f	60		rts				rts
.2d50					IFloatAddDecimalToR0:
.2d50	8d d4 06	sta $06d4			sta 	IFCount 					; save it out.
.2d53	86 0c		stx $0c				stx 	iTemp0
.2d55	84 0d		sty $0d				sty 	iTemp0+1
.2d57					IFSTFDecimal:
.2d57	a2 0e		ldx #$0e			ldx 	#IFR0 						; push integer part on stack
.2d59	20 fb 2d	jsr $2dfb			jsr 	IFloatPushRx
.2d5c	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2d5e	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero
.2d61	9c d6 06	stz $06d6			stz 	IFDecimalPlaces
.2d64					_IFSTDLoop:
.2d64	20 ac 2d	jsr $2dac			jsr 	IFSTFGetNext 				; get next
.2d67	b0 41		bcs $2daa			bcs 	_IFSTFFail2 				; bad character.
.2d69	f0 11		beq $2d7c			beq 	_IFSTFComplete 				; end of data, work out the result.
.2d6b	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2d6d	f0 39		beq $2da8			beq 	_IFSTFExit2
.2d6f	20 d0 2d	jsr $2dd0			jsr 	IFSTFAddR0 					; add number in
.2d72	ee d6 06	inc $06d6			inc 	IFDecimalPlaces 			; count decimals
.2d75	ad d6 06	lda $06d6			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2d78	c9 03		cmp #$03			cmp 	#3
.2d7a	90 e8		bcc $2d64			bcc 	_IFSTDLoop
.2d7c					_IFSTFComplete:
.2d7c	ad d6 06	lda $06d6			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2d7f	f0 27		beq $2da8			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2d81	3a		dec a				dec 	a 							; table indexed from 1.
.2d82	0a		asl a				asl 	a
.2d83	0a		asl a				asl 	a
.2d84	aa		tax				tax
.2d85	bd e7 2d	lda $2de7,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2d88	85 12		sta $12				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2d8a	bd e8 2d	lda $2de8,x			lda 	TableTen+1,x
.2d8d	85 13		sta $13				sta  	IFR1+IM1
.2d8f	bd e9 2d	lda $2de9,x			lda 	TableTen+2,x
.2d92	85 14		sta $14				sta  	IFR1+IM2
.2d94	bd ea 2d	lda $2dea,x			lda 	TableTen+3,x
.2d97	85 15		sta $15				sta  	IFR1+IExp
.2d99	a2 12		ldx #$12			ldx 	#IFR1 						; multiply into result
.2d9b	20 4c 29	jsr $294c			jsr 	IFloatMultiply
.2d9e	a2 12		ldx #$12			ldx 	#IFR1  						; pop and add the decimal.
.2da0	20 1c 2e	jsr $2e1c			jsr 	IFloatPullRx
.2da3	a2 12		ldx #$12			ldx 	#IFR1
.2da5	20 a2 28	jsr $28a2			jsr 	IFloatAdd
.2da8					_IFSTFExit2:
.2da8	18		clc				clc
.2da9	60		rts				rts
.2daa					_IFSTFFail2:
.2daa	38		sec				sec
.2dab	60		rts				rts
.2dac					IFSTFGetNext:
.2dac	ad d4 06	lda $06d4			lda 	IFCount  					; if count is zero, return with Z set.
.2daf	f0 19		beq $2dca			beq 	_IFSTFReturnOk
.2db1	b2 0c		lda ($0c)			lda 	(iTemp0) 					; get next character
.2db3	e6 0c		inc $0c				inc 	iTemp0 						; point at next.
.2db5	d0 02		bne $2db9			bne 	_IFSTFGNNoCarry
.2db7	e6 0d		inc $0d				inc 	iTemp0+1
.2db9					_IFSTFGNNoCarry:
.2db9	ce d4 06	dec $06d4			dec 	IFCount 					; dec count.
.2dbc	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2dbe	f0 08		beq $2dc8			beq 	_IFSTFGOkay
.2dc0	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2dc2	90 08		bcc $2dcc			bcc 	_IFSTFGFail
.2dc4	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2dc6	b0 04		bcs $2dcc			bcs 	_IFSTFGFail
.2dc8					_IFSTFGOkay:
.2dc8	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2dca					_IFSTFReturnOk:
.2dca	18		clc				clc
.2dcb	60		rts				rts
.2dcc					_IFSTFGFail:
.2dcc	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2dce	38		sec				sec
.2dcf	60		rts				rts
.2dd0					IFSTFAddR0:
.2dd0	29 0f		and #$0f			and 	#15 						; to int value
.2dd2	48		pha				pha 								; save it.
.2dd3	a9 0a		lda #$0a			lda 	#10
.2dd5	a2 12		ldx #$12			ldx 	#IFR1
.2dd7	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.2dda	20 4c 29	jsr $294c			jsr 	IFloatMultiply
.2ddd	68		pla				pla
.2dde	a2 12		ldx #$12			ldx 	#IFR1
.2de0	20 ae 2e	jsr $2eae			jsr 	IFloatSetByte
.2de3	20 a2 28	jsr $28a2			jsr 	IFloatAdd
.2de6	60		rts				rts
.06d4					IFCount:
>06d4							.fill 	1
.06d5					IFSignFlag:
>06d5							.fill 	1
.06d6					IFDecimalPlaces:
>06d6							.fill 	1
.2de7					TableTen:
>2de7	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2deb	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2def	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2df3	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2df7	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2dfb					IFloatPushRx:
.2dfb	5a		phy				phy
.2dfc	ac d7 06	ldy $06d7			ldy 	IFStackIndex
.2dff	b5 00		lda $00,x			lda 	IM0,x
.2e01	99 d8 06	sta $06d8,y			sta 	IFStack,y
.2e04	b5 01		lda $01,x			lda 	IM1,x
.2e06	99 d9 06	sta $06d9,y			sta 	IFStack+1,y
.2e09	b5 02		lda $02,x			lda 	IM2,x
.2e0b	99 da 06	sta $06da,y			sta 	IFStack+2,y
.2e0e	b5 03		lda $03,x			lda 	IExp,x
.2e10	99 db 06	sta $06db,y			sta 	IFStack+3,y
.2e13	c8		iny				iny
.2e14	c8		iny				iny
.2e15	c8		iny				iny
.2e16	c8		iny				iny
.2e17	8c d7 06	sty $06d7			sty 	IFStackIndex
.2e1a	7a		ply				ply
.2e1b	60		rts				rts
.2e1c					IFloatPullRx:
.2e1c	5a		phy				phy
.2e1d	ac d7 06	ldy $06d7			ldy 	IFStackIndex
.2e20	88		dey				dey
.2e21	88		dey				dey
.2e22	88		dey				dey
.2e23	88		dey				dey
.2e24	b9 d8 06	lda $06d8,y			lda 	IFStack,y
.2e27	95 00		sta $00,x			sta 	IM0,x
.2e29	b9 d9 06	lda $06d9,y			lda 	IFStack+1,y
.2e2c	95 01		sta $01,x			sta 	IM1,x
.2e2e	b9 da 06	lda $06da,y			lda 	IFStack+2,y
.2e31	95 02		sta $02,x			sta 	IM2,x
.2e33	b9 db 06	lda $06db,y			lda 	IFStack+3,y
.2e36	95 03		sta $03,x			sta 	IExp,x
.2e38	8c d7 06	sty $06d7			sty 	IFStackIndex
.2e3b	7a		ply				ply
.2e3c	60		rts				rts
.06d7					IFStackIndex:
>06d7							.fill 	1
.06d8					IFStack:
>06d8							.fill 	16*4
.2e3d					IFloatCopyFromRegister:
.2e3d	b5 00		lda $00,x			lda 	0,x
.2e3f	85 0e		sta $0e				sta 	IFR0
.2e41	b5 01		lda $01,x			lda 	1,x
.2e43	85 0f		sta $0f				sta 	IFR0+1
.2e45	b5 02		lda $02,x			lda 	2,x
.2e47	85 10		sta $10				sta 	IFR0+2
.2e49	b5 03		lda $03,x			lda 	3,x
.2e4b	85 11		sta $11				sta 	IFR0+3
.2e4d	60		rts				rts
.2e4e					IFloatCopyToRegister:
.2e4e	a5 0e		lda $0e				lda 	IFR0
.2e50	95 00		sta $00,x			sta 	0,x
.2e52	a5 0f		lda $0f				lda 	IFR0+1
.2e54	95 01		sta $01,x			sta 	1,x
.2e56	a5 10		lda $10				lda 	IFR0+2
.2e58	95 02		sta $02,x			sta 	2,x
.2e5a	a5 11		lda $11				lda 	IFR0+3
.2e5c	95 03		sta $03,x			sta 	3,x
.2e5e	60		rts				rts
.2e5f					IFloatLoadInline:
.2e5f	68		pla				pla 								; pop address off to iTemp0
.2e60	85 0c		sta $0c				sta 	iTemp0
.2e62	68		pla				pla
.2e63	85 0d		sta $0d				sta 	iTemp0+1
.2e65	a0 01		ldy #$01			ldy 	#1
.2e67	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 0
.2e69	95 00		sta $00,x			sta 	0,x
.2e6b	c8		iny				iny
.2e6c	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 1
.2e6e	95 01		sta $01,x			sta 	1,x
.2e70	c8		iny				iny
.2e71	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 2
.2e73	95 02		sta $02,x			sta 	2,x
.2e75	c8		iny				iny
.2e76	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 3
.2e78	95 03		sta $03,x			sta 	3,x
.2e7a	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2e7b	a5 0c		lda $0c				lda 	iTemp0
.2e7d	69 05		adc #$05			adc 	#5
.2e7f	85 0c		sta $0c				sta 	iTemp0
.2e81	90 02		bcc $2e85			bcc 	_IFLINoCarry
.2e83	e6 0d		inc $0d				inc 	iTemp0+1
.2e85					_IFLINoCarry:
.2e85	6c 0c 00	jmp ($000c)			jmp 	(iTemp0)					; effectively RTS
.2e88					IFloatMultiply8BitRx:
.2e88	5a		phy		        phy
.2e89	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2e8b	a4 0e		ldy $0e		        ldy     IFR0+IM0
.2e8d	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2e8e	85 0e		sta $0e		        sta     IFR0+IM0
.2e90	84 0f		sty $0f		        sty     IFR0+IM1
.2e92	a9 00		lda #$00	        lda     #0
.2e94	a0 08		ldy #$08	        ldy     #8
.2e96					_IFMLoop:
.2e96	90 03		bcc $2e9b	        bcc     _IFMNoAdd
.2e98	18		clc		        clc
.2e99	65 0f		adc $0f		        adc     IFR0+IM1
.2e9b					_IFMNoAdd:
.2e9b	6a		ror a		        ror     a
.2e9c	66 0e		ror $0e		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2e9e	88		dey		        dey
.2e9f	d0 f5		bne $2e96	        bne     _IFMLoop
.2ea1	85 0f		sta $0f		        sta     IFR0+IM1                    ; write MSB out
.2ea3	7a		ply		        ply
.2ea4	60		rts		        rts
.2ea5					IFloatCheckZero:
.2ea5	b5 00		lda $00,x			lda 	IM0,x
.2ea7	15 01		ora $01,x			ora 	IM1,x
.2ea9	15 02		ora $02,x			ora 	IM2,x
.2eab	60		rts				rts
.2eac					IFloatSetZero:
.2eac	a9 00		lda #$00			lda 	#0
.2eae					IFloatSetByte:
.2eae	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2eb0	74 01		stz $01,x			stz 	IM1,x
.2eb2	74 02		stz $02,x			stz 	IM2,x
.2eb4	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2eb6	60		rts				rts
.2eb7					IFloatNegate:
.2eb7	b5 03		lda $03,x			lda 	IExp,x
.2eb9	49 40		eor #$40			eor 	#IFSign
.2ebb	95 03		sta $03,x			sta 	IExp,x
.2ebd	18		clc				clc
.2ebe	60		rts				rts
.2ebf					IFloatMantissaNegate:
.2ebf	38		sec				sec
.2ec0	a9 00		lda #$00			lda 	#0
.2ec2	f5 00		sbc $00,x			sbc 	IM0,x
.2ec4	95 00		sta $00,x			sta 	IM0,x
.2ec6	a9 00		lda #$00			lda 	#0
.2ec8	f5 01		sbc $01,x			sbc 	IM1,x
.2eca	95 01		sta $01,x			sta 	IM1,x
.2ecc	a9 00		lda #$00			lda 	#0
.2ece	f5 02		sbc $02,x			sbc 	IM2,x
.2ed0	95 02		sta $02,x			sta 	IM2,x
.2ed2	60		rts				rts
.2ed3					IFloatShiftLeft:
.2ed3	18		clc				clc
.2ed4					IFloatRotateLeft:
.2ed4	36 00		rol $00,x			rol 	IM0,x
.2ed6	36 01		rol $01,x			rol 	IM1,x
.2ed8	36 02		rol $02,x			rol 	IM2,x
.2eda	60		rts				rts
.2edb					IFloatShiftRight:
.2edb	18		clc				clc
.2edc					IFloatRotateRight:
.2edc	76 02		ror $02,x			ror 	IM2,x
.2ede	76 01		ror $01,x			ror 	IM1,x
.2ee0	76 00		ror $00,x			ror 	IM0,x
.2ee2	60		rts				rts
.2ee3					IFloatNormalise:
.2ee3	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero 			; is it zero
.2ee6	f0 18		beq $2f00			beq 	_IFNExitZero 				; if so exit
.2ee8					_IFNLoop:
.2ee8	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2eea	29 c0		and #$c0			and 	#$C0
.2eec	c9 40		cmp #$40			cmp 	#$40
.2eee	f0 13		beq $2f03			beq 	_IFNExitOkay 				; if so , then we are done.
.2ef0	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2ef2	29 3f		and #$3f			and 	#$3F
.2ef4	c9 20		cmp #$20			cmp 	#$20
.2ef6	f0 0b		beq $2f03			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2ef8	20 19 2f	jsr $2f19			jsr 	IFloatDecExponent
.2efb	20 d3 2e	jsr $2ed3			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2efe	80 e8		bra $2ee8			bra 	_IFNLoop
.2f00					_IFNExitZero:
.2f00	20 ac 2e	jsr $2eac			jsr 	IFloatSetZero 				; set the result to zero
.2f03					_IFNExitOkay:
.2f03	18		clc				clc  								; return with CC.
.2f04	60		rts				rts
.2f05					IFloatIncExponent:
.2f05	b5 03		lda $03,x			lda 	IExp,x
.2f07	48		pha				pha
.2f08	29 c0		and #$c0			and 	#$C0
.2f0a	8d 18 07	sta $0718			sta 	IFXTemp
.2f0d	68		pla				pla
.2f0e	1a		inc a				inc 	a
.2f0f	29 3f		and #$3f			and 	#$3F
.2f11	48		pha				pha
.2f12	0d 18 07	ora $0718			ora 	IFXTemp
.2f15	95 03		sta $03,x			sta 	IExp,x
.2f17	68		pla				pla
.2f18	60		rts				rts
.2f19					IFloatDecExponent:
.2f19	b5 03		lda $03,x			lda 	IExp,x
.2f1b	48		pha				pha
.2f1c	29 c0		and #$c0			and 	#$C0
.2f1e	8d 18 07	sta $0718			sta 	IFXTemp
.2f21	68		pla				pla
.2f22	3a		dec a				dec 	a
.2f23	29 3f		and #$3f			and 	#$3F
.2f25	48		pha				pha
.2f26	0d 18 07	ora $0718			ora 	IFXTemp
.2f29	95 03		sta $03,x			sta 	IExp,x
.2f2b	68		pla				pla
.2f2c	60		rts				rts
.0718					IFXTemp:
>0718							.fill 	1
.2f2d					IFloatBufferReset:
.2f2d	9c 19 07	stz $0719			stz 	IFBufferCount
.2f30	9c 1a 07	stz $071a			stz 	IFBuffer
.2f33	60		rts				rts
.2f34					IFloatGetBufferAddress:
.2f34	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.2f36	a2 1a		ldx #$1a			ldx 	#(IFBuffer & $FF)
.2f38	ad 19 07	lda $0719			lda 	IFBufferCount
.2f3b	60		rts				rts
.2f3c					IFloatBufferWrite:
.2f3c	da		phx				phx
.2f3d	ae 19 07	ldx $0719			ldx 	IFBufferCount
.2f40	9d 1a 07	sta $071a,x			sta 	IFBuffer,x
.2f43	9e 1b 07	stz $071b,x			stz 	IFBuffer+1,x
.2f46	ee 19 07	inc $0719			inc 	IFBufferCount
.2f49	fa		plx				plx
.2f4a	60		rts				rts
.2f4b					IFloatStripTrailingZeros:
.2f4b	ae 19 07	ldx $0719			ldx 	IFBufferCount
.2f4e	bd 19 07	lda $0719,x			lda 	IFBuffer-1,x
.2f51	c9 30		cmp #$30			cmp		#"0"
.2f53	d0 0f		bne $2f64			bne 	_IFSTExit
.2f55	bd 18 07	lda $0718,x			lda 	IFBuffer-2,x
.2f58	c9 2e		cmp #$2e			cmp 	#"."
.2f5a	f0 08		beq $2f64			beq 	_IFSTExit
.2f5c	ce 19 07	dec $0719			dec 	IFBufferCount
.2f5f	9e 19 07	stz $0719,x			stz 	IFBuffer-1,x
.2f62	80 e7		bra $2f4b			bra 	IFloatStripTrailingZeros
.2f64					_IFSTExit:
.2f64	60		rts				rts
.0719					IFBufferCount:
>0719							.fill 	1
.071a					IFBuffer:
>071a							.fill 	25
.2f65					IFloatCheck:
.2f65	a5 11		lda $11				lda 	IFR0+IExp					; force it negative
.2f67	09 40		ora #$40			ora 	#IFSign
.2f69	85 11		sta $11				sta 	IFR0+IExp
.2f6b	20 a2 28	jsr $28a2			jsr 	IFloatAdd 					; add allowed to error.
.2f6e	a2 0e		ldx #$0e			ldx 	#IFR0
.2f70	20 a5 2e	jsr $2ea5			jsr 	IFloatCheckZero 			; error if < 0
.2f73	f0 06		beq $2f7b			beq 	_IFAOkay
.2f75	a5 11		lda $11				lda 	IFR0+IExp
.2f77	29 40		and #$40			and 	#IFSign
.2f79	d0 01		bne $2f7c			bne 	_IFAFail
.2f7b					_IFAOkay:
.2f7b	60		rts				rts
.2f7c					_IFAFail:
.2f7c	38		sec				sec
.2f7d	68		pla				pla 								; get address - 2
.2f7e	e9 02		sbc #$02			sbc 	#2
.2f80	aa		tax				tax
.2f81	68		pla				pla
.2f82	e9 00		sbc #$00			sbc 	#0
.2f84	a8		tay				tay
.2f85	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2f87					_IFAStop:
>2f87	db						.byte 	$DB 						; display an error AA ADR ADR
.2f88	80 fd		bra $2f87			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
