
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Mon Jul  3 17:12:39 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
=192					OSTextBufferSize = 192
.025d					OSEditWidth:
>025d							.fill 	1
.025e					OSEditLength:
>025e							.fill 	1
.025f					OSEditBuffer:
>025f							.fill 	OSTextBufferSize+1
>0320							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0340					sectorSize:
>0340							.fill 	2
.0342					sectorCount:
>0342							.fill 	2
.0344					currentSector:
>0344							.fill 	2
.0346					successFlag:
>0346							.fill 	1
.0347					sectorHeader:
.0347					shFirstNext:
>0347							.fill 	1
.0348					shContinue:
>0348							.fill 	1
.0349					shDataSize:
>0349							.fill 	2
.034b					shFileSize:
>034b							.fill 	2
>034d							.fill 	10
.0357					shNameLength:
>0357							.fill 	1
.0358					shNameText:
>0358							.fill 	15
.0367					shFileSizeCopy:
>0367							.fill 	2
.0369					notFirstSector:
>0369							.fill 	1
.036a					sectorCapacity:
>036a							.fill 	2
.036c					fileRemainingSize:
>036c							.fill 	2
.036e					bytesToWrite:
>036e							.fill 	2
>0370							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffcd					OSReadDirectory          = $ffcd ; Read file directory.
=$ffd0					OSDeleteFile             = $ffd0 ; Delete file
=$ffd3					OSReadFile               = $ffd3 ; Read file into memory
=$ffd6					OSWriteFile              = $ffd6 ; Write file from memory
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 ab 20	jsr $20ab			jsr 	PGMSetBaseAddress
.1007	20 e2 2c	jsr $2ce2			jsr 	IFInitialise 				; setup math library
.100a	4c 08 14	jmp $1408			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="I"					AM_ABSOLUTEIX	= 'I' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d0					AM_IND 		= ('P'|AM_ZPAGE) 				; lda (nn)
=$d1					AM_INDX		= ('Q'|AM_ZPAGE) 				; lda (nn,x)
=$d2					AM_INDY		= ('R'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; get a number to assert
.1010	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1012	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail 					; if so, the assert fails.
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 45 27	jmp $2745		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.101d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.101f	f0 14		beq $1035			beq 	_CLNoParam
.1021	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1023	f0 10		beq $1035			beq 	_CLNoParam
.1025	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; address for CLEAR
.1028	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102a	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102c	b0 0b		bcs $1039			bcs 	_CLMemory
.102e	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1030	90 07		bcc $1039			bcc 	_CLMemory
.1032	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1035					_CLNoParam:
.1035	20 3c 10	jsr $103c			jsr 	ClearCode
.1038	60		rts				rts
.1039					_CLMemory:
.1039	4c df 27	jmp $27df		jmp	ErrorV_memory
.103c					ClearCode:
.103c	20 be 20	jsr $20be			jsr 	PGMEndProgram 				; end program => zTemp0
.103f	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.1041	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.1043	1a		inc a				inc 	a
.1044	85 2b		sta $2b				sta 	freeMemory+1
.1046	20 81 2c	jsr $2c81			jsr 	VARClearHashTables
.1049	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.104c	20 25 29	jsr $2925			jsr 	StackReset 					; page passed on in A
.104f	20 84 29	jsr $2984			jsr 	StringSystemInitialise
.1052	20 5a 26	jsr $265a			jsr 	ScanProcedures
.1055	20 92 14	jsr $1492			jsr 	Command_RESTORE
.1058	60		rts				rts
.1059					AllocateMemory:
.1059	5a		phy				phy 								; save Y
.105a	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.105c	5a		phy				phy
.105d	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.105f	5a		phy				phy
.1060	a8		tay				tay 								; count is now in XY
.1061					_AllocateLoop:
.1061	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1063	d0 04		bne $1069			bne 	_AllocateOne
.1065	c0 00		cpy #$00			cpy 	#0
.1067	f0 15		beq $107e			beq 	_AllocateExit
.1069					_AllocateOne:
.1069	a9 00		lda #$00			lda 	#0 							; zero byte
.106b	92 2a		sta ($2a)			sta 	(freeMemory)
.106d	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.106f	d0 05		bne $1076			bne 	_AllocateSkipCarry
.1071	e6 2b		inc $2b				inc 	freeMemory+1
.1073	20 82 10	jsr $1082			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.1076					_AllocateSkipCarry:
.1076	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1078	d0 01		bne $107b			bne 	_AllocateSkipBorrow
.107a	ca		dex				dex
.107b					_AllocateSkipBorrow:
.107b	88		dey				dey
.107c	80 e3		bra $1061			bra 	_AllocateLoop
.107e					_AllocateExit:
.107e	fa		plx				plx 								; restore address
.107f	68		pla				pla
.1080	7a		ply				ply 								; restore Y
.1081	60		rts				rts
.1082					ClearCheckMemory:
.1082	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.1084	1a		inc a				inc 	a 							; spacing 2 pages
.1085	1a		inc a				inc 	a
.1086	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.1089	b0 01		bcs $108c			bcs  	_CCMError
.108b	60		rts				rts
.108c					_CCMError:
.108c	4c df 27	jmp $27df		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.108f					CommandDIM:
.108f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1091	29 c0		and #$c0			and 	#$C0
.1093	c9 40		cmp #$40			cmp 	#$40
.1095	d0 39		bne $10d0			bne 	_CDSyntax
.1097	20 38 2c	jsr $2c38			jsr 	VARGetInfo 					; get information
.109a	ad 31 06	lda $0631			lda 	VARType 					; check array.
.109d	29 02		and #$02			and 	#2
.109f	f0 2f		beq $10d0			beq 	_CDSyntax
.10a1	20 ea 2b	jsr $2bea			jsr 	VARFind 					; does it already exist
.10a4	b0 2d		bcs $10d3			bcs 	_CDExists
.10a6	20 96 2b	jsr $2b96			jsr 	VARCreate 					; create it - returns data ptr in XA
.10a9	da		phx				phx 								; save target address
.10aa	48		pha				pha
.10ab	ad 31 06	lda $0631			lda 	VARType 					; type ID.
.10ae	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b0	20 d6 10	jsr $10d6			jsr 	CreateArray 				; create array to XA
.10b3	84 26		sty $26				sty 	zTemp1 						; save Y
.10b5	7a		ply				ply 								; restore target to zTemp0
.10b6	84 24		sty $24				sty 	zTemp0
.10b8	7a		ply				ply
.10b9	84 25		sty $25				sty 	zTemp0+1
.10bb	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.10bd	a0 01		ldy #$01			ldy 	#1
.10bf	8a		txa				txa
.10c0	91 24		sta ($24),y			sta 	(zTemp0),y
.10c2	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.10c4	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 				; check )
.10c7	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10c9	c8		iny				iny
.10ca	c9 99		cmp #$99			cmp 	#PR_COMMA
.10cc	f0 c1		beq $108f			beq 	CommandDIM
.10ce	88		dey				dey
.10cf	60		rts				rts
.10d0					_CDSyntax:
.10d0	4c ef 26	jmp $26ef		jmp	ErrorV_syntax
.10d3					_CDExists:
.10d3	4c b7 27	jmp $27b7		jmp	ErrorV_redefine
.10d6					CreateArray:
.10d6	8d 03 05	sta $0503			sta 	CAType						; save type
.10d9	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10dc	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10de	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e0	f0 04		beq $10e6			beq 	_CATwoDimensions
.10e2	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e5	60		rts				rts
.10e6					_CATwoDimensions:
.10e6	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10e8	8d 05 05	sta $0505			sta 	CADim1+1
.10eb	a5 08		lda $08				lda 	IFR0+IM0
.10ed	8d 04 05	sta $0504			sta 	CADim1+0
.10f0	20 bf 28	jsr $28bf			jsr 	ERRCheckComma 				; check comma
.10f3	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f6	5a		phy				phy 								; save Y position
.10f7	18		clc				clc 								; allocate the outer array of pointers.
.10f8	ae 05 05	ldx $0505			ldx 	CADim1+1
.10fb	ad 04 05	lda $0504			lda 	CADim1
.10fe	20 71 11	jsr $1171			jsr 	CSAAllocate 				; allocate the outer array
.1101	da		phx				phx									; save this address on the stack
.1102	48		pha				pha
.1103	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.1105	85 28		sta $28				sta 	zTemp2
.1107					_CACreateSubLoop:
.1107	38		sec				sec
.1108	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create data array of required size.
.110b	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.110d	91 28		sta ($28),y			sta 	(zTemp2),y
.110f	8a		txa				txa
.1110	c8		iny				iny
.1111	91 28		sta ($28),y			sta 	(zTemp2),y
.1113	18		clc				clc  								; next slot.
.1114	a5 28		lda $28				lda 	zTemp2
.1116	69 02		adc #$02			adc 	#2
.1118	85 28		sta $28				sta 	zTemp2
.111a	90 02		bcc $111e			bcc 	_CACNoCarry
.111c	e6 29		inc $29				inc 	zTemp2+1
.111e					_CACNoCarry:
.111e	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1121	d0 03		bne $1126			bne 	_CACNoBorrow
.1123	ce 05 05	dec $0505			dec 	CADim1+1
.1126					_CACNoBorrow:
.1126	ce 04 05	dec $0504			dec 	CADim1
.1129	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.112c	10 d9		bpl $1107			bpl 	_CACreateSubLoop
.112e	68		pla				pla
.112f	fa		plx				plx
.1130	7a		ply				ply
.1131	60		rts				rts
.1132					CreateSingleArray:
.1132	5a		phy				phy
.1133	38		sec				sec 								; allocate memory block all zeros.
.1134	a5 08		lda $08				lda 	IFR0+IM0
.1136	a6 09		ldx $09				ldx 	IFR0+IM1
.1138	20 71 11	jsr $1171			jsr 	CSAAllocate
.113b	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.113e	f0 2f		beq $116f			beq 	_CSANoInit
.1140	da		phx				phx 								; save address of new array
.1141	48		pha				pha
.1142	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.1144	86 25		stx $25				stx 	zTemp0+1
.1146	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1148	b1 24		lda ($24),y			lda 	(zTemp0),y
.114a	a8		tay				tay
.114b	b2 24		lda ($24)			lda 	(zTemp0)
.114d	aa		tax				tax
.114e					_CSAEraseString:
.114e	5a		phy				phy
.114f	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1151	a9 80		lda #$80			lda 	#$80
.1153	91 24		sta ($24),y			sta 	(zTemp0),y
.1155	7a		ply				ply
.1156	18		clc				clc 								; add 4 to next slot.
.1157	a5 24		lda $24				lda 	zTemp0
.1159	69 04		adc #$04			adc 	#4
.115b	85 24		sta $24				sta 	zTemp0
.115d	90 02		bcc $1161			bcc 	_CSAENoCarry
.115f	e6 25		inc $25				inc 	zTemp0+1
.1161					_CSAENoCarry:
.1161	e0 00		cpx #$00			cpx 	#0
.1163	d0 01		bne $1166			bne 	_CSANoBorrow
.1165	88		dey				dey
.1166					_CSANoBorrow:
.1166	ca		dex				dex
.1167	d0 e5		bne $114e			bne 	_CSAEraseString
.1169	c0 00		cpy #$00			cpy 	#0
.116b	d0 e1		bne $114e			bne 	_CSAEraseString
.116d	68		pla				pla
.116e	fa		plx				plx
.116f					_CSANoInit:
.116f	7a		ply				ply
.1170	60		rts				rts
.1171					CSAAllocate:
.1171	08		php				php 								; save type flag.
.1172	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1173	d0 01		bne $1176			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1175	e8		inx				inx
.1176					_CSAANoCarry:
.1176	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1178	b0 2e		bcs $11a8			bcs 	_CSARange
.117a	28		plp				plp 								; restore type flag
.117b	08		php				php 								; save it back again.
.117c	da		phx				phx 								; save size.
.117d	48		pha				pha
.117e	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.1180	90 03		bcc $1185			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1182	0a		asl a				asl 	a
.1183	26 25		rol $25				rol 	zTemp0+1
.1185					_CSAATimes2:
.1185	0a		asl a				asl 	a
.1186	26 25		rol $25				rol 	zTemp0+1
.1188	18		clc				clc
.1189	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.118b	90 02		bcc $118f			bcc 	_CSAANoCarry2
.118d	e6 25		inc $25				inc 	zTemp0+1
.118f					_CSAANoCarry2:
.118f	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.1191	20 59 10	jsr $1059			jsr 	AllocateMemory 				; allocate memory to XA
.1194	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.1196	85 24		sta $24				sta 	zTemp0
.1198	68		pla				pla  								; write element count to first 2 bytes
.1199	92 24		sta ($24)			sta 	(zTemp0)
.119b	68		pla				pla 								; msb of element count
.119c	28		plp				plp 								; CC if pointer array
.119d	b0 02		bcs $11a1			bcs 	_CSAAIsData
.119f	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a1					_CSAAIsData:
.11a1	a0 01		ldy #$01			ldy 	#1
.11a3	91 24		sta ($24),y			sta 	(zTemp0),y
.11a5	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.11a7	60		rts				rts
.11a8					_CSARange:
.11a8	4c 00 27	jmp $2700		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11ab					Command_Doke:
.11ab	38		sec				sec
.11ac	80 01		bra $11af			bra 	DPCommon
.11ae					Command_Poke:
.11ae	18		clc				clc
.11af					DPCommon:
.11af	08		php				php 								; CS if DOKE
.11b0	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; address
.11b3	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b5	48		pha				pha
.11b6	a5 09		lda $09				lda 	IFR0+IM1
.11b8	48		pha				pha
.11b9	20 bf 28	jsr $28bf			jsr 	ERRCheckComma 				; [dp]oke address,data
.11bc	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16
.11bf	68		pla				pla 								; get address back
.11c0	85 25		sta $25				sta 	zTemp0+1
.11c2	68		pla				pla
.11c3	85 24		sta $24				sta 	zTemp0
.11c5	a5 08		lda $08				lda 	IFR0+IM0
.11c7	92 24		sta ($24)			sta 	(zTemp0)
.11c9	28		plp				plp
.11ca	90 08		bcc $11d4			bcc 	_DPExit
.11cc	5a		phy				phy
.11cd	a5 09		lda $09				lda 	IFR0+IM1
.11cf	a0 01		ldy #$01			ldy 	#1
.11d1	91 24		sta ($24),y			sta 	(zTemp0),y
.11d3	7a		ply				ply
.11d4					_DPExit:
.11d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11d5					Command_GOTO:
.11d5	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get line number
.11d8					GotoR0:
.11d8	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11db	85 19		sta $19				sta 	codePtr+1
.11dd	64 18		stz $18				stz 	codePtr
.11df					_GOSearch:
.11df	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e1	f0 1f		beq $1202			beq 	_GOError
.11e3	a0 01		ldy #$01			ldy 	#1 							; found line #
.11e5	b1 18		lda ($18),y			lda 	(codePtr),y
.11e7	c5 08		cmp $08				cmp 	IFR0+IM0
.11e9	d0 0a		bne $11f5			bne 	_GONext
.11eb	c8		iny				iny
.11ec	b1 18		lda ($18),y			lda 	(codePtr),y
.11ee	c5 09		cmp $09				cmp 	IFR0+IM1
.11f0	d0 03		bne $11f5			bne 	_GONext
.11f2	4c d7 14	jmp $14d7			jmp 	RUNNewLine
.11f5					_GONext:
.11f5	18		clc				clc 								; advance to next line.
.11f6	b2 18		lda ($18)			lda 	(codePtr)
.11f8	65 18		adc $18				adc 	codePtr
.11fa	85 18		sta $18				sta 	codePtr
.11fc	90 e1		bcc $11df			bcc 	_GOSearch
.11fe	e6 19		inc $19				inc 	codePtr+1
.1200	80 dd		bra $11df			bra 	_GOSearch
.1202					_GOError:
.1202	4c 84 28	jmp $2884		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1205					Command_Input:
.1205	a9 ff		lda #$ff			lda 	#$FF
.1207	8d 06 05	sta $0506			sta 	InputFlag
.120a	80 03		bra $120f			bra 	Command_IP_Main
.120c					Command_Print:
.120c	9c 06 05	stz $0506			stz 	InputFlag
.120f					Command_IP_Main:
.120f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1210					_CPLoop:
.1210	08		php				php 								; save last action flag
.1211	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1213	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1215	f0 48		beq $125f			beq 	_CPExit 					; without consuming
.1217	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1219	f0 44		beq $125f			beq 	_CPExit
.121b	68		pla				pla 								; throw last action flag
.121c	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.121e	c8		iny				iny
.121f	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1221	f0 39		beq $125c			beq 	_CPContinueWithSameLine
.1223	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1225	f0 30		beq $1257			beq 	_CPTab
.1227	88		dey				dey 								; undo the get.
.1228	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.122b	10 0b		bpl $1238			bpl	 	_CPNotInput
.122d	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.122f	c9 40		cmp #$40			cmp 	#$40
.1231	d0 05		bne $1238			bne 	_CPNotInput
.1233	20 68 12	jsr $1268			jsr 	_CPInputCode 				; input code
.1236	80 d7		bra $120f			bra 	Command_IP_Main 			; and go round again.
.1238					_CPNotInput:
.1238	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; evaluate expression.
.123b	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.123d	10 0e		bpl $124d			bpl 	_CPNumber
.123f	5a		phy				phy
.1240	18		clc				clc 								; string address to YX
.1241	a5 08		lda $08				lda 	IFR0+IM0
.1243	aa		tax				tax
.1244	a5 09		lda $09				lda 	IFR0+IM1
.1246	a8		tay				tay
.1247	20 9c 12	jsr $129c			jsr 	CPPrintYX 					; print YX
.124a	7a		ply				ply
.124b	80 c2		bra $120f			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.124d					_CPNumber:
.124d	5a		phy				phy
.124e	20 f2 30	jsr $30f2			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1251	20 9c 12	jsr $129c			jsr 	CPPrintYX 					; print string at YX
.1254	7a		ply				ply
.1255	80 b8		bra $120f			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1257					_CPTab:
.1257	a9 09		lda #$09			lda 	#9 							; print TAB
.1259	20 b4 12	jsr $12b4			jsr 	CPPrintA
.125c					_CPContinueWithSameLine:
.125c	38		sec				sec 								; loop round with carry set, which
.125d	80 b1		bra $1210			bra 	_CPLoop 					; will inhibit final CR
.125f					_CPExit:
.125f	28		plp				plp 								; get last action flag
.1260	b0 05		bcs $1267			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1262	a9 0d		lda #$0d			lda 	#13 						; print new line
.1264	20 b4 12	jsr $12b4			jsr 	CPPrintA
.1267					_CPExit2:
.1267	60		rts				rts
.1268					_CPInputCode:
.1268	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get the term.
.126b	5a		phy				phy 								; save position
.126c	20 b1 12	jsr $12b1			jsr 	CPInputA					; input a line to YX
.126f	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1271	30 18		bmi $128b			bmi 	_CPInputString
.1273	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1275	48		pha				pha
.1276	a5 09		lda $09				lda 	IFR0+IM1
.1278	48		pha				pha
.1279	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.127b	84 25		sty $25				sty 	zTemp0+1
.127d	20 7d 1a	jsr $1a7d			jsr 	VALConversionZTemp0
.1280	68		pla				pla 								; do the assign.
.1281	85 25		sta $25				sta 	zTemp0+1
.1283	68		pla				pla
.1284	85 24		sta $24				sta 	zTemp0
.1286	20 dc 12	jsr $12dc			jsr 	AssignNumber
.1289	7a		ply				ply
.128a	60		rts				rts
.128b					_CPInputString:
.128b	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.128d	85 24		sta $24				sta 	zTemp0
.128f	a5 09		lda $09				lda 	IFR0+IM1
.1291	85 25		sta $25				sta 	zTemp0+1
.1293	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1295	84 09		sty $09				sty 	IFR0+IM1
.1297	20 f3 12	jsr $12f3			jsr 	AssignString 				; assign the string
.129a	7a		ply				ply 								; exit
.129b	60		rts				rts
.129c					CPPrintYX:
.129c	86 24		stx $24				stx 	zTemp0
.129e	84 25		sty $25				sty 	zTemp0+1
.12a0	b2 24		lda ($24)			lda 	(zTemp0)
.12a2	aa		tax				tax
.12a3	f0 0b		beq $12b0			beq 	_CPPrintExit
.12a5	a0 01		ldy #$01			ldy 	#1
.12a7					_CPPrintAYXLoop:
.12a7	b1 24		lda ($24),y			lda 	(zTemp0),y
.12a9	20 b4 12	jsr $12b4			jsr 	CPPrintA
.12ac	c8		iny				iny
.12ad	ca		dex				dex
.12ae	d0 f7		bne $12a7			bne 	_CPPrintAYXLoop
.12b0					_CPPrintExit:
.12b0	60		rts				rts
.12b1					CPInputA:
.12b1	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.12b4					CPPrintA:
.12b4	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12b7					CommandLET:
.12b7	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term
.12ba	90 6f		bcc $132b			bcc 	CLError 					; must be a reference term.
.12bc	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12be	48		pha				pha
.12bf	a5 09		lda $09				lda 	IFR0+IM1
.12c1	48		pha				pha
.12c2	a5 0b		lda $0b				lda 	IFR0+IExp
.12c4	48		pha				pha
.12c5	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12c7	20 c7 28	jsr $28c7			jsr 	ERRCheckA
.12ca	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; right hand side.
.12cd	68		pla				pla 								; type of l-expr
.12ce	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d0	30 5c		bmi $132e			bmi 	CLType
.12d2	fa		plx				plx 	 							; pop target address to zTemp0
.12d3	86 25		stx $25				stx 	zTemp0+1
.12d5	fa		plx				plx
.12d6	86 24		stx $24				stx 	zTemp0
.12d8					AssignData:
.12d8	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12da	30 17		bmi $12f3			bmi 	AssignString
.12dc					AssignNumber:
.12dc	5a		phy				phy
.12dd	a0 03		ldy #$03			ldy 	#3
.12df	a5 0b		lda $0b				lda 	IFR0+IExp
.12e1	91 24		sta ($24),y			sta 	(zTemp0),y
.12e3	88		dey				dey
.12e4	a5 0a		lda $0a				lda 	IFR0+IM2
.12e6	91 24		sta ($24),y			sta 	(zTemp0),y
.12e8	88		dey				dey
.12e9	a5 09		lda $09				lda 	IFR0+IM1
.12eb	91 24		sta ($24),y			sta 	(zTemp0),y
.12ed	a5 08		lda $08				lda 	IFR0+IM0
.12ef	92 24		sta ($24)			sta 	(zTemp0)
.12f1	7a		ply				ply
.12f2	60		rts				rts
.12f3					AssignString:
.12f3	5a		phy				phy
.12f4	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12f6	b1 24		lda ($24),y			lda 	(zTemp0),y
.12f8	12 24		ora ($24)			ora 	(zTemp0)
.12fa	f0 23		beq $131f			beq 	_CLConcreteString
.12fc	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12fe	85 26		sta $26				sta 	zTemp1
.1300	b1 24		lda ($24),y			lda 	(zTemp0),y
.1302	85 27		sta $27				sta 	zTemp1+1
.1304	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.1306	38		sec				sec 								; we want 3 for slot size, status, string size.
.1307	e9 03		sbc #$03			sbc 	#3
.1309	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.130b	90 12		bcc $131f			bcc 	_CLConcreteString 			; if so, concrete the string again.
.130d	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.130f	1a		inc a				inc 	a
.1310	aa		tax				tax
.1311	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1313					_CLReplaceString:
.1313	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1315	c8		iny				iny
.1316	c8		iny				iny
.1317	91 26		sta ($26),y			sta 	(zTemp1),y
.1319	88		dey				dey
.131a	ca		dex				dex
.131b	d0 f6		bne $1313			bne 	_CLReplaceString
.131d	80 0a		bra $1329			bra 	_CLExit
.131f					_CLConcreteString:
.131f	20 39 29	jsr $2939			jsr 	StringConcrete  			; concreted string in XA.
.1322	a0 01		ldy #$01			ldy 	#1 							; store the address
.1324	92 24		sta ($24)			sta 	(zTemp0)
.1326	8a		txa				txa
.1327	91 24		sta ($24),y			sta 	(zTemp0),y
.1329					_CLExit:
.1329	7a		ply				ply
.132a	60		rts				rts
.132b					CLError:
.132b	4c 22 28	jmp $2822		jmp	ErrorV_variable
.132e					CLType:
.132e	4c 1f 27	jmp $271f		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1331					Command_LIST:
.1331	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1334	9c 08 05	stz $0508			stz 	CLFrom+1
.1337	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1339	c9 99		cmp #$99			cmp 	#PR_COMMA
.133b	f0 1d		beq $135a			beq 	_CLToLine
.133d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.133f	f0 37		beq $1378			beq 	_CLDefaultTo
.1341	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1344	a5 08		lda $08				lda 	IFR0+IM0
.1346	8d 07 05	sta $0507			sta 	CLFrom
.1349	8d 09 05	sta $0509			sta 	CLTo
.134c	a5 09		lda $09				lda 	IFR0+IM1
.134e	8d 08 05	sta $0508			sta 	CLFrom+1
.1351	8d 0a 05	sta $050a			sta 	CLTo+1
.1354	b1 18		lda ($18),y			lda 	(codePtr),y
.1356	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1358	f0 26		beq $1380			beq 	_CLList
.135a					_CLToLine:
.135a	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.135c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.135e	f0 18		beq $1378			beq 	_CLDefaultTo
.1360	20 bf 28	jsr $28bf			jsr 	ERRCheckComma 				; sep comma
.1363	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1365	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1367	f0 0f		beq $1378			beq 	_CLDefaultTo
.1369	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; there's a To value.
.136c	a5 08		lda $08				lda 	IFR0+IM0
.136e	8d 09 05	sta $0509			sta 	CLTo
.1371	a5 09		lda $09				lda 	IFR0+IM1
.1373	8d 0a 05	sta $050a			sta 	CLTo+1
.1376	80 08		bra $1380			bra 	_CLList
.1378					_CLDefaultTo:
.1378	a9 ff		lda #$ff			lda 	#$FF
.137a	8d 09 05	sta $0509			sta 	CLTo
.137d	8d 0a 05	sta $050a			sta 	CLTo+1
.1380					_CLList:
.1380	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1383	85 19		sta $19				sta 	codePtr+1
.1385	64 18		stz $18				stz 	codePtr
.1387	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1389	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.138b	20 04 1f	jsr $1f04			jsr 	TOKSetDetokeniseOutput
.138e					_CLLoop:
.138e	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1390	f0 51		beq $13e3			beq 	_CLExit
.1392	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1395	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1398	d0 4c		bne $13e6			bne 	_CLBreak
.139a	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.139c	20 e9 13	jsr $13e9			jsr 	_CLCompareLine
.139f	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a1	f0 33		beq $13d6			beq 	_CLNext
.13a3	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13a5	20 e9 13	jsr $13e9			jsr 	_CLCompareLine
.13a8	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13aa	f0 2a		beq $13d6			beq 	_CLNext
.13ac	a0 02		ldy #$02			ldy 	#2 							; print line #
.13ae	b1 18		lda ($18),y			lda 	(codePtr),y
.13b0	aa		tax				tax
.13b1	88		dey				dey
.13b2	b1 18		lda ($18),y			lda 	(codePtr),y
.13b4	20 af 2a	jsr $2aaf			jsr 	WriteIntXA
.13b7					_CLSpacing:
.13b7	a9 20		lda #$20			lda 	#32
.13b9	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.13bc	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.13bf	e0 06		cpx #$06			cpx 	#6
.13c1	d0 f4		bne $13b7			bne 	_CLSpacing
.13c3	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13c5	a5 18		lda $18				lda 	codePtr
.13c7	18		clc				clc
.13c8	69 03		adc #$03			adc 	#3
.13ca	aa		tax				tax
.13cb	90 01		bcc $13ce			bcc 	_CLNoCarry2
.13cd	c8		iny				iny
.13ce					_CLNoCarry2:
.13ce	20 a9 1e	jsr $1ea9			jsr 	TOKDetokenise
.13d1	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d3	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.13d6					_CLNext:
.13d6	18		clc				clc 								; advance to next line.
.13d7	b2 18		lda ($18)			lda 	(codePtr)
.13d9	65 18		adc $18				adc 	codePtr
.13db	85 18		sta $18				sta 	codePtr
.13dd	90 02		bcc $13e1			bcc 	_CLNoCarry
.13df	e6 19		inc $19				inc 	codePtr+1
.13e1					_CLNoCarry:
.13e1	80 ab		bra $138e			bra 	_CLLoop
.13e3					_CLExit:
.13e3	4c ce 2a	jmp $2ace			jmp 	WarmStart
.13e6					_CLBreak:
.13e6	4c 7a 28	jmp $287a		jmp	ErrorV_break
.13e9					_CLCompareLine:
.13e9	a0 01		ldy #$01			ldy 	#1
.13eb	38		sec				sec
.13ec	b1 18		lda ($18),y			lda 	(codePtr),y
.13ee	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f1	85 24		sta $24				sta 	zTemp0
.13f3	c8		iny				iny
.13f4	b1 18		lda ($18),y			lda 	(codePtr),y
.13f6	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13f9	90 0a		bcc $1405			bcc 	_CLIsNegative
.13fb	d0 05		bne $1402			bne 	_CLIsPositive
.13fd	a5 24		lda $24				lda 	zTemp0
.13ff	d0 01		bne $1402			bne 	_CLIsPositive
.1401	60		rts				rts
.1402					_CLIsPositive:
.1402	a9 01		lda #$01			lda 	#1
.1404	60		rts				rts
.1405					_CLIsNegative:
.1405	a9 ff		lda #$ff			lda 	#255
.1407	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1408					Command_NEW:
.1408	20 b2 20	jsr $20b2			jsr 	PGMNewProgram 				; Reset current program
.140b	20 3c 10	jsr $103c			jsr 	ClearCode 					; Run CLR
.140e	4c 30 15	jmp $1530			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1411					Command_READ:
.1411	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term to R0
.1414	90 35		bcc $144b			bcc 	_CRSyntax 					; fail if not a reference.
.1416	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1418	48		pha				pha
.1419	a5 09		lda $09				lda 	IFR0+IM1
.141b	48		pha				pha
.141c	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.141e	48		pha				pha
.141f	20 a4 14	jsr $14a4			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1422	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1425	d0 27		bne $144e			bne 	_CRHaveData  				; forward for the next one.
.1427					_CRNextLine:
.1427	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1429	f0 1a		beq $1445			beq 	_CRNoData
.142b					_CRKeepSearching:
.142b	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.142d	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.142f	20 ff 25	jsr $25ff			jsr 	ScanForward
.1432	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1434	f0 18		beq $144e			beq 	_CRHaveData 				; found it
.1436	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1438	18		clc				clc 								; try the next line, keep going.
.1439	b2 18		lda ($18)			lda 	(codePtr)
.143b	65 18		adc $18				adc 	codePtr
.143d	85 18		sta $18				sta 	codePtr
.143f	90 e6		bcc $1427			bcc 	_CRNextLine
.1441	e6 19		inc $19				inc 	codePtr+1
.1443	80 e2		bra $1427			bra 	_CRNextLine
.1445					_CRNoData:
.1445	4c a7 27	jmp $27a7		jmp	ErrorV_data
.1448					_CLType:
.1448	4c 1f 27	jmp $271f		jmp	ErrorV_type
.144b					_CRSyntax:
.144b	4c ef 26	jmp $26ef		jmp	ErrorV_syntax
.144e					_CRHaveData:
.144e	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1451	68		pla				pla 								; type of l-expr
.1452	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1454	30 f2		bmi $1448			bmi 	_CLType
.1456	68		pla				pla 								; restore address
.1457	85 25		sta $25				sta 	zTemp0+1
.1459	68		pla				pla
.145a	85 24		sta $24				sta 	zTemp0
.145c	20 d8 12	jsr $12d8			jsr 	AssignData 					; write R0 there.
.145f	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1462	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1464	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1466	d0 04		bne $146c			bne 	_CRSwapBack
.1468	c8		iny				iny 								; consume comma
.1469	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.146c					_CRSwapBack:
.146c	20 a4 14	jsr $14a4			jsr 	SwapCodeDataPointers		; swap them back.
.146f	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1471	c8		iny				iny
.1472	c9 99		cmp #$99			cmp 	#PR_COMMA
.1474	f0 9b		beq $1411			beq 	Command_READ 				; if so go round again.
.1476	88		dey				dey 								; unpick get.
.1477	60		rts				rts
.1478					Command_DATA:
.1478	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.147a	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.147c	20 ff 25	jsr $25ff			jsr 	ScanForward
.147f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1481	d0 01		bne $1484			bne 	_CDNotEOL
.1483	88		dey				dey
.1484					_CDNotEOL:
.1484	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1485					Command_REM:
.1485					Command_REM2:
.1485	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1487	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1489	d0 06		bne $1491			bne 	_CRExit
.148b	c8		iny				iny 								; skip over it, it's a comment.
.148c	98		tya				tya
.148d	38		sec				sec
.148e	71 18		adc ($18),y			adc 	(codePtr),y
.1490	a8		tay				tay
.1491					_CRExit:
.1491	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1492					S
.1492					Command_RESTORE:
.1492	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1495	8d 0c 05	sta $050c			sta 	dataPtr+1
.1498	9c 0b 05	stz $050b			stz 	dataPtr
.149b	a9 03		lda #$03			lda 	#3 							; position start of line
.149d	8d 0d 05	sta $050d			sta 	dataPos
.14a0	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14a3	60		rts				rts
.14a4					SwapCodeDataPointers:
.14a4	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14a7	a6 18		ldx $18				ldx 	codePtr
.14a9	85 18		sta $18				sta 	codePtr
.14ab	8e 0b 05	stx $050b			stx 	dataPtr
.14ae	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14b1	a6 19		ldx $19				ldx 	codePtr+1
.14b3	85 19		sta $19				sta 	codePtr+1
.14b5	8e 0c 05	stx $050c			stx 	dataPtr+1
.14b8	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14bb	8c 0d 05	sty $050d			sty 	dataPos
.14be	a8		tay				tay
.14bf	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c0					Command_RUN:
.14c0	20 3c 10	jsr $103c			jsr 	ClearCode					; clear everything out.
.14c3	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14c6	85 19		sta $19				sta 	codePtr+1
.14c8	64 18		stz $18				stz 	codePtr
.14ca	80 0b		bra $14d7			bra 	RUNNewLine
.14cc					RUNEndOfLine:
.14cc	18		clc				clc 								; advance to next line.
.14cd	b2 18		lda ($18)			lda 	(codePtr)
.14cf	65 18		adc $18				adc 	codePtr
.14d1	85 18		sta $18				sta 	codePtr
.14d3	90 02		bcc $14d7			bcc 	_RELNoCarry
.14d5	e6 19		inc $19				inc 	codePtr+1
.14d7					_RELNoCarry:
.14d7					RUNNewLine:
.14d7	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14d9	9a		txs				txs
.14da	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14dc	f0 52		beq $1530			beq 	Command_END
.14de	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e0	b1 18		lda ($18),y			lda 	(codePtr),y
.14e2	8d 2c 06	sta $062c			sta 	ERRLine
.14e5	c8		iny				iny
.14e6	b1 18		lda ($18),y			lda 	(codePtr),y
.14e8	8d 2d 06	sta $062d			sta 	ERRLine+1
.14eb	c8		iny				iny 								; offset into codePtr for start of line.
.14ec					RUNNewCommand:
.14ec	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14ef	ce 10 05	dec $0510			dec 	checkCounter
.14f2	d0 0a		bne $14fe			bne 	_RNCNoCheck
.14f4	5a		phy				phy 								; keyboard check.
.14f5	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.14f8	7a		ply				ply
.14f9	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.14fc	d0 1e		bne $151c			bne 	_RUNBreak
.14fe					_RNCNoCheck:
.14fe	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1500	10 1d		bpl $151f			bpl		_RUNNotToken 				; probably an identifier
.1502	c8		iny				iny 								; consume token
.1503	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1505	f0 e5		beq $14ec			beq 	RUNNewCommand
.1507	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1509	b0 0e		bcs $1519			bcs 	_RUNSyntax
.150b	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.150d	90 0a		bcc $1519			bcc 	_RUNSyntax
.150f	0a		asl a				asl 	a 							; double into X.
.1510	aa		tax				tax
.1511	20 16 15	jsr $1516			jsr 	_RUNDispatchMain			; call the main dispatcher
.1514	80 d6		bra $14ec			bra 	RUNNewCommand
.1516					_RUNDispatchMain:
.1516	7c 89 1d	jmp ($1d89,x)			jmp 	(VectorTable,x)
.1519					_RUNSyntax:
.1519	4c ef 26	jmp $26ef		jmp	ErrorV_syntax
.151c					_RUNBreak:
.151c	4c 7a 28	jmp $287a		jmp	ErrorV_break
.151f					_RUNNotToken:
.151f	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1521	90 f6		bcc $1519			bcc 	_RUNSyntax
.1523	20 b7 12	jsr $12b7			jsr 	CommandLET 					; assignment
.1526	80 c4		bra $14ec			bra 	RUNNewCommand 				; loop round.
.1528					Command_Shift_Handler:
.1528	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.152a	c8		iny				iny
.152b	0a		asl a				asl 	a 							; double into X
.152c	aa		tax				tax
.152d	7c 89 1e	jmp ($1e89,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1530					Command_END:
.1530	4c ce 2a	jmp $2ace			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1533					Command_STOP:
.1533	4c 93 27	jmp $2793		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1536					Command_Sys:
.1536	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; execution address
.1539	5a		phy				phy
.153a	ad 74 06	lda $0674			lda 	('A'-'A')*4 + FastVariables ; load AXY
.153d	ae d0 06	ldx $06d0			ldx 	('X'-'A')*4 + FastVariables
.1540	ac d4 06	ldy $06d4			ldy 	('Y'-'A')*4 + FastVariables
.1543	20 48 15	jsr $1548			jsr 	_CSCallIFR0 				; call the code
.1546	7a		ply				ply
.1547	60		rts				rts
.1548					_CSCallIFR0:
.1548	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.154b					NoExec01:
.154b					NoExec02:
.154b					NoExec03:
.154b					NoExec04:
.154b					NoExec05:
.154b					NoExec06:
.154b					NoExec07:
.154b					NoExec08:
.154b	4c ef 26	jmp $26ef		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.154e					EXPBinAdd:
.154e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1550	30 6f		bmi $15c1			bmi 	EXPConcatenate
.1552	a2 0c		ldx #$0c			ldx 	#IFR1
.1554	4c ed 2c	jmp $2ced			jmp 	IFloatAdd
.1557					EXPBinSub:
.1557	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1559	30 3f		bmi $159a			bmi 	EXPTypeError
.155b	a2 0c		ldx #$0c			ldx 	#IFR1
.155d	4c e6 2c	jmp $2ce6			jmp 	IFloatSubtract
.1560					EXPBinMul:
.1560	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.1562	30 36		bmi $159a			bmi 	EXPTypeError
.1564	a2 0c		ldx #$0c			ldx 	#IFR1
.1566	4c 97 2d	jmp $2d97			jmp 	IFloatMultiply
.1569					EXPBinFDiv:
.1569	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.156b	30 2d		bmi $159a			bmi 	EXPTypeError
.156d	a2 0c		ldx #$0c			ldx 	#IFR1
.156f	20 19 30	jsr $3019			jsr 	IFloatDivideFloat
.1572	b0 0f		bcs $1583			bcs 	EXPDZero
.1574	60		rts				rts
.1575					EXPBinIDiv:
.1575	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1577	30 21		bmi $159a			bmi 	EXPTypeError
.1579	a2 0c		ldx #$0c			ldx 	#IFR1
.157b	20 19 30	jsr $3019			jsr 	IFloatDivideFloat
.157e	b0 03		bcs $1583			bcs 	EXPDZero
.1580	4c f6 2f	jmp $2ff6			jmp 	IFloatIntegerR0
.1583					EXPDZero:
.1583	4c 68 27	jmp $2768		jmp	ErrorV_divzero
.1586					EXPBinIMod:
.1586	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1588	30 10		bmi $159a			bmi 	EXPTypeError
.158a	a2 0c		ldx #$0c			ldx 	#IFR1
.158c	5a		phy				phy
.158d	20 2c 2f	jsr $2f2c			jsr 	IFPreProcessBitwise 		; set up everything.
.1590	d0 05		bne $1597			bne 	EXPDRange
.1592	20 65 2e	jsr $2e65			jsr 	IFloatModulusInteger
.1595	7a		ply				ply
.1596	60		rts				rts
.1597					EXPDRange:
.1597	4c 00 27	jmp $2700		jmp	ErrorV_range
.159a					EXPTypeError:
.159a	4c 1f 27	jmp $271f		jmp	ErrorV_type
.159d					EXPBinAnd:
.159d	24 0b		bit $0b				bit 	IFR0+IExp
.159f	30 f9		bmi $159a			bmi 	EXPTypeError
.15a1	a2 0c		ldx #$0c			ldx 	#IFR1
.15a3	20 e7 2e	jsr $2ee7			jsr 	IFloatBitwiseAnd
.15a6	b0 ef		bcs $1597			bcs 	EXPDRange
.15a8	60		rts				rts
.15a9					EXPBinOr:
.15a9	24 0b		bit $0b				bit 	IFR0+IExp
.15ab	30 ed		bmi $159a			bmi 	EXPTypeError
.15ad	a2 0c		ldx #$0c			ldx 	#IFR1
.15af	20 fe 2e	jsr $2efe			jsr 	IFloatBitwiseOr
.15b2	b0 e3		bcs $1597			bcs 	EXPDRange
.15b4	60		rts				rts
.15b5					EXPBinXor:
.15b5	24 0b		bit $0b				bit 	IFR0+IExp
.15b7	30 e1		bmi $159a			bmi 	EXPTypeError
.15b9	a2 0c		ldx #$0c			ldx 	#IFR1
.15bb	20 15 2f	jsr $2f15			jsr 	IFloatBitwiseXor
.15be	b0 d7		bcs $1597			bcs 	EXPDRange
.15c0	60		rts				rts
.15c1					EXPConcatenate:
.15c1	18		clc				clc
.15c2	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15c4	72 0c		adc ($0c)			adc 	(IFR1)
.15c6	b0 2d		bcs $15f5			bcs 	_EXPCError 					; far too long.
.15c8	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15ca	da		phx				phx
.15cb	a6 09		ldx $09				ldx 	IFR0+1
.15cd	da		phx				phx
.15ce	20 ac 29	jsr $29ac			jsr 	StringTempAllocate 			; allocate string, set up return
.15d1	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15d3	a5 0c		lda $0c				lda 	IFR1
.15d5	20 de 15	jsr $15de			jsr 	_EXPCCopyXA
.15d8	fa		plx				plx 								; copy second string
.15d9	68		pla				pla
.15da	20 de 15	jsr $15de			jsr 	_EXPCCopyXA
.15dd	60		rts				rts
.15de					_EXPCCopyXA:
.15de	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.15e0	85 24		sta $24				sta 	zTemp0
.15e2	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.15e4	f0 0e		beq $15f4			beq 	_EXPCCExit 					; nothing in string
.15e6	aa		tax				tax 								; count
.15e7	5a		phy				phy 								; start position
.15e8	a0 01		ldy #$01			ldy 	#1
.15ea					_EXPCCLoop:
.15ea	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.15ec	20 e1 29	jsr $29e1			jsr 	StringTempWrite
.15ef	c8		iny				iny
.15f0	ca		dex				dex
.15f1	d0 f7		bne $15ea			bne 	_EXPCCLoop
.15f3	7a		ply				ply
.15f4					_EXPCCExit:
.15f4	60		rts				rts
.15f5					_EXPCError:
.15f5	4c 0c 28	jmp $280c		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15f8					EXPReturnTrue:
.15f8	a2 08		ldx #$08			ldx 	#IFR0
.15fa	a9 01		lda #$01			lda 	#1
.15fc	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.15ff	20 00 33	jsr $3300			jsr 	IFloatNegate
.1602	60		rts				rts
.1603					EXPReturnFalse:
.1603	a2 08		ldx #$08			ldx 	#IFR0
.1605	4c f5 32	jmp $32f5			jmp 	IFloatSetZero
.1608					EXPCompareEqual:
.1608	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.160b	c9 00		cmp #$00			cmp 	#0
.160d	f0 e9		beq $15f8			beq 	EXPReturnTrue
.160f	80 f2		bra $1603			bra 	EXPReturnFalse
.1611					EXPCompareLess:
.1611	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1614	c9 ff		cmp #$ff			cmp 	#$FF
.1616	f0 e0		beq $15f8			beq 	EXPReturnTrue
.1618	80 e9		bra $1603			bra 	EXPReturnFalse
.161a					EXPCompareGreater:
.161a	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.161d	c9 01		cmp #$01			cmp 	#1
.161f	f0 d7		beq $15f8			beq 	EXPReturnTrue
.1621	80 e0		bra $1603			bra 	EXPReturnFalse
.1623					EXPCompareNotEqual:
.1623	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1626	c9 00		cmp #$00			cmp 	#0
.1628	d0 ce		bne $15f8			bne 	EXPReturnTrue
.162a	80 d7		bra $1603			bra 	EXPReturnFalse
.162c					EXPCompareLessEqual:
.162c	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.162f	c9 01		cmp #$01			cmp 	#1
.1631	d0 c5		bne $15f8			bne 	EXPReturnTrue
.1633	80 ce		bra $1603			bra 	EXPReturnFalse
.1635					EXPCompareGreaterEqual:
.1635	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1638	c9 ff		cmp #$ff			cmp 	#$FF
.163a	d0 bc		bne $15f8			bne 	EXPReturnTrue
.163c	80 c5		bra $1603			bra 	EXPReturnFalse
.163e					EXPCompareBaseCode:
.163e	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1640	30 10		bmi $1652			bmi 	_EXCBCString
.1642	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1644	20 c4 2f	jsr $2fc4			jsr 	IFloatCompare
.1647	a5 08		lda $08				lda 	IFR0+IM0
.1649	f0 06		beq $1651			beq 	_EXCBCExit 					; return 0 if zero
.164b	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.164d	50 02		bvc $1651			bvc 	_EXCBCExit
.164f	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1651					_EXCBCExit:
.1651	60		rts				rts
.1652					_EXCBCString:
.1652	5a		phy				phy
.1653	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1655	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1657	90 02		bcc $165b			bcc 	_EXCBCSmaller
.1659	b2 0c		lda ($0c)			lda 	(IFR1)
.165b					_EXCBCSmaller:
.165b	aa		tax				tax
.165c	f0 0d		beq $166b			beq 	_EXCBCMatches 				; if zero common length matches
.165e	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1660					_EXCBCCheckSmallerMatches:
.1660	c8		iny				iny 								; compare directly as far as common length
.1661	38		sec				sec
.1662	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1664	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1666	d0 08		bne $1670			bne 	_EXCBCExit2
.1668	ca		dex				dex
.1669	d0 f5		bne $1660			bne 	_EXCBCCheckSmallerMatches
.166b					_EXCBCMatches:
.166b	38		sec				sec
.166c	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.166e	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1670					_EXCBCExit2:
.1670	7a		ply				ply
.1671	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.1673	f0 04		beq $1679			beq 	_EXCBCReturn
.1675	30 03		bmi $167a			bmi 	_EXCBCFF 					; return $FF if <
.1677	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1679					_EXCBCReturn:
.1679	60		rts				rts
.167a					_EXCBCFF:
.167a	a9 ff		lda #$ff			lda 	#$FF
.167c	60		rts				rts
.167d					_EXCBCRange:
.167d	4c 00 27	jmp $2700		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1680					EXPBinLeft:
.1680	a9 ff		lda #$ff			lda 	#$FF
.1682	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.1685	4c 8b 16	jmp $168b			jmp 	EXPShiftCommon
.1688					EXPBinRight:
.1688	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.168b					EXPShiftCommon:
.168b	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.168d	05 0f		ora $0f				ora 	IFR1+IExp
.168f	29 7f		and #$7f			and 	#$7F
.1691	d0 35		bne $16c8			bne 	_EXPSRange
.1693	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1695	29 e0		and #$e0			and 	#$E0
.1697	05 09		ora $09				ora 	IFR0+IM1
.1699	05 0a		ora $0a				ora 	IFR0+IM2
.169b	d0 25		bne $16c2			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.169d	5a		phy				phy
.169e	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16a0	29 1f		and #$1f			and 	#$1F
.16a2	f0 17		beq $16bb			beq 	_EXPSExit 					; exit if zero
.16a4	a8		tay				tay
.16a5					_EXPSLoop:
.16a5	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16a7	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16aa	30 05		bmi $16b1			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16ac	20 24 33	jsr $3324			jsr 	IFloatShiftRight
.16af	80 07		bra $16b8			bra 	_EXPSContinue
.16b1					_EXPSShiftLeft:
.16b1	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.16b4	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16b6	30 10		bmi $16c8			bmi 	_EXPSRange
.16b8					_EXPSContinue:
.16b8	88		dey				dey 								; do it Y times
.16b9	d0 ea		bne $16a5			bne 	_EXPSLoop
.16bb					_EXPSExit:
.16bb	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16bd	20 86 32	jsr $3286			jsr 	IFloatCopyFromRegister
.16c0	7a		ply				ply
.16c1	60		rts				rts
.16c2					_EXPSShiftZero:
.16c2	a2 08		ldx #$08			ldx 	#IFR0
.16c4	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.16c7	60		rts				rts
.16c8					_EXPSRange:
.16c8	4c 00 27	jmp $2700		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16cb					EXPEvaluateExpression:
.16cb	a9 00		lda #$00			lda 	#0 							; current precedence
.16cd					EXPEvaluateExpressionPrecedenceA:
.16cd	48		pha				pha
.16ce	20 48 17	jsr $1748			jsr 	EXPTermValueR0				; do first term.
.16d1					_EELoop:
.16d1	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16d3	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16d5	90 31		bcc $1708			bcc 	_EEExit
.16d7	aa		tax				tax 								; access the precedence of the operator.
.16d8	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16d9	dd a6 1a	cmp $1aa6,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16dc	b0 2b		bcs $1709			bcs 	_EEExit2
.16de	48		pha				pha 								; save current precedence.
.16df	da		phx				phx 								; save operator
.16e0	c8		iny				iny 								; consume operator
.16e1	da		phx				phx
.16e2	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16e4	20 44 32	jsr $3244			jsr 	IFloatPushRx
.16e7	fa		plx				plx
.16e8	bd a6 1a	lda $1aa6,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16eb	20 cd 16	jsr $16cd			jsr 	EXPEvaluateExpressionPrecedenceA
.16ee	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16f0	20 65 32	jsr $3265			jsr 	IFloatPullRx
.16f3	fa		plx				plx 								; operator
.16f4	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16f6	45 0f		eor $0f				eor 	IFR1+IExp
.16f8	30 08		bmi $1702			bmi 	_EEType
.16fa					_EETypeOkay:
.16fa	8a		txa				txa
.16fb	0a		asl a				asl 	a 							; double -> X
.16fc	aa		tax				tax
.16fd	20 05 17	jsr $1705			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1700	80 cf		bra $16d1			bra 	_EELoop
.1702					_EEType:
.1702	4c 1f 27	jmp $271f		jmp	ErrorV_type
.1705					_EECallBinary:
.1705	7c 89 1d	jmp ($1d89,x)			jmp 	(VectorTable,x)
.1708					_EEExit:
.1708	68		pla				pla 								; throw precedence
.1709					_EEExit2:
.1709	18		clc				clc
.170a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.170b					EXPEvalNumber:
.170b	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; get a value
.170e	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1710	30 01		bmi $1713			bmi 	EVUType
.1712	60		rts				rts
.1713					EVUType:
.1713	4c 1f 27	jmp $271f		jmp	ErrorV_type
.1716					EXPEvalInteger:
.1716	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1719	20 f6 2f	jsr $2ff6			jsr 	IFloatIntegerR0
.171c	60		rts				rts
.171d					EXPEvalInteger16:
.171d	20 16 17	jsr $1716			jsr 	EXPEvalInteger 				; get integer
.1720	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1722	d0 21		bne $1745			bne 	EVURange
.1724	a6 09		ldx $09				ldx 	IFR0+IM1
.1726	a5 08		lda $08				lda 	IFR0+IM0
.1728	60		rts				rts
.1729					EXPEvalInteger8:
.1729	20 16 17	jsr $1716			jsr 	EXPEvalInteger 				; get integer
.172c	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.172e	05 09		ora $09				ora 	IFR0+IM1
.1730	d0 13		bne $1745			bne 	EVURange
.1732	a5 08		lda $08				lda 	IFR0+IM0
.1734	60		rts				rts
.1735					EXPEvalString:
.1735	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; get value
.1738	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.173a	10 d7		bpl $1713			bpl 	EVUType
.173c	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.173e	86 25		stx $25				stx 	zTemp0+1
.1740	a5 08		lda $08				lda 	IFR0+IM0
.1742	85 24		sta $24				sta 	zTemp0
.1744	60		rts				rts
.1745					EVURange:
.1745	4c 00 27	jmp $2700		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1748					EXPTermValueR0:
.1748	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term
.174b	90 45		bcc $1792			bcc 	_ETVNotReference 			; exit if value.
.174d	5a		phy				phy
.174e	a0 03		ldy #$03			ldy 	#3 							; get type
.1750	b1 08		lda ($08),y			lda 	(IFR0),y
.1752	30 14		bmi $1768			bmi 	_ETVDereferenceString
.1754	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1756	88		dey				dey 								; get byte 2
.1757	b1 08		lda ($08),y			lda 	(IFR0),y
.1759	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.175b	88		dey				dey 								; get byte 1
.175c	b1 08		lda ($08),y			lda 	(IFR0),y
.175e	aa		tax				tax 								; save in X so we can overwrite it
.175f	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1761	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1763	85 08		sta $08				sta 	IFR0+IM0
.1765	7a		ply				ply
.1766	18		clc				clc
.1767	60		rts				rts
.1768					_ETVDereferenceString:
.1768	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.176a	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.176c	12 08		ora ($08)			ora 	(IFR0)
.176e	f0 11		beq $1781			beq 	_ETVNull 					; if so, return a fake NULL.
.1770	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1772	aa		tax				tax
.1773	b2 08		lda ($08)			lda 	(IFR0)
.1775	18		clc				clc 								; add two so points to actual string.
.1776	69 02		adc #$02			adc 	#2
.1778	90 01		bcc $177b			bcc 	_EVDSNoCarry
.177a	e8		inx				inx
.177b					_EVDSNoCarry:
.177b	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.177d	85 08		sta $08				sta 	IFR0
.177f	80 08		bra $1789			bra 	_ETVFillExit 				; tidy up and exit.
.1781					_ETVNull:
.1781	a9 91		lda #$91			lda 	#_EVTNString & $FF
.1783	85 08		sta $08				sta 	IFR0+IM0
.1785	a9 17		lda #$17			lda 	#_EVTNString >> 8
.1787	85 09		sta $09				sta 	IFR0+IM1
.1789					_ETVFillExit:
.1789	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.178b	a9 80		lda #$80			lda 	#$80 						; set type to string.
.178d	85 0b		sta $0b				sta 	IFR0+IExp
.178f	7a		ply				ply
.1790	60		rts				rts
.1791					_EVTNString:
>1791	00						.byte 	0
.1792					_ETVNotReference:
.1792	60		rts				rts
.1793					EXPTermR0:
.1793	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1795	30 10		bmi $17a7			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1797	c8		iny				iny 								; consume element
.1798	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.179a	b0 08		bcs $17a4			bcs 	_ETMIdentifier
.179c	20 d2 17	jsr $17d2			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.179f	20 05 18	jsr $1805			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17a2	18		clc				clc 								; return value ok
.17a3	60		rts				rts
.17a4					_ETMIdentifier:
.17a4	4c 8e 2c	jmp $2c8e			jmp 	VARCheckSimple 				; check variables, seperate module.
.17a7					_ETMIsUnaryOrMinus:
.17a7	c8		iny				iny 								; consume element
.17a8	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17aa	d0 0e		bne $17ba			bne 	_ETMCheckUnary
.17ac	20 48 17	jsr $1748			jsr 	EXPTermValueR0 				; get a term to negate
.17af	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17b1	20 00 33	jsr $3300			jsr 	IFloatNegate
.17b4	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17b6	30 17		bmi $17cf			bmi 	_ETMUnaryType				; if so error.
.17b8	18		clc				clc
.17b9	60		rts				rts
.17ba					_ETMCheckUnary:
.17ba	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17bc	90 0e		bcc $17cc			bcc 	_ETMUnarySyntax
.17be	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17c0	b0 0a		bcs $17cc			bcs 	_ETMUnarySyntax
.17c2	0a		asl a				asl 	a 							; make it into an index => X
.17c3	aa		tax				tax
.17c4	20 c9 17	jsr $17c9			jsr 	_ETMCallUnaryFunction 		; call the function
.17c7	18		clc				clc 								; and return it.
.17c8	60		rts				rts
.17c9					_ETMCallUnaryFunction:
.17c9	7c 89 1d	jmp ($1d89,x)			jmp 	(VectorTable,x)
.17cc					_ETMUnarySyntax:
.17cc	4c ef 26	jmp $26ef		jmp	ErrorV_syntax
.17cf					_ETMUnaryType:
.17cf	4c 1f 27	jmp $271f		jmp	ErrorV_type
.17d2					EXPExtractTokenisedInteger:
.17d2	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17d4	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17d6	64 09		stz $09				stz 	IFR0+IM1
.17d8	64 0a		stz $0a				stz 	IFR0+IM2
.17da					_ETMConstant:
.17da	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17dc	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17de	b0 24		bcs $1804			bcs 	_ETMCExit 					; no, exit.
.17e0	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17e2	a5 09		lda $09				lda 	IFR0+IM1
.17e4	85 0a		sta $0a				sta 	IFR0+IM2
.17e6	a5 08		lda $08				lda 	IFR0+IM0
.17e8	85 09		sta $09				sta 	IFR0+IM1
.17ea	64 08		stz $08				stz 	IFR0+IM0
.17ec	8a		txa				txa
.17ed	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17ee	66 0a		ror $0a				ror 	IFR0+IM2
.17f0	66 09		ror $09				ror 	IFR0+IM1
.17f2	66 08		ror $08				ror 	IFR0+IM0
.17f4	4a		lsr a				lsr 	a
.17f5	66 0a		ror $0a				ror 	IFR0+IM2
.17f7	66 09		ror $09				ror 	IFR0+IM1
.17f9	66 08		ror $08				ror 	IFR0+IM0
.17fb	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17fd	11 18		ora ($18),y			ora 	(codePtr),y
.17ff	85 08		sta $08				sta 	IFR0+IM0
.1801	c8		iny				iny 								; consume, loop back
.1802	80 d6		bra $17da			bra 	_ETMConstant
.1804					_ETMCExit:
.1804	60		rts				rts
.1805					EXPCheckDecimalFollows:
.1805	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1807	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1809	d0 19		bne $1824			bne 	_ETMCDExit
.180b	c8		iny				iny 								; consume token.
.180c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.180e	5a		phy				phy									; save current position
.180f	48		pha				pha 								; save count of chars.
.1810	38		sec				sec 								; address into YX : y + codePtr+1
.1811	98		tya				tya
.1812	65 18		adc $18				adc 	codePtr
.1814	aa		tax				tax
.1815	a5 19		lda $19				lda 	codePtr+1
.1817	69 00		adc #$00			adc 	#0
.1819	a8		tay				tay
.181a	68		pla				pla 								; get count.
.181b	20 99 31	jsr $3199			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.181e	7a		ply				ply 								; go to next token.
.181f	98		tya				tya
.1820	38		sec				sec
.1821	71 18		adc ($18),y			adc 	(codePtr),y
.1823	a8		tay				tay
.1824					_ETMCDExit:
.1824	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1825					EXPUnaryAbs:
.1825	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.1828	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.182b	20 38 2f	jsr $2f38			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.182e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.182f					EXPUnaryNull:
.182f	20 48 17	jsr $1748			jsr 	EXPTermValueR0
.1832	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1833					EXPUnaryAsc:
.1833	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.1836	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.1839	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.183b	f0 06		beq $1843			beq 	_EXAZero 						; if so return 0
.183d	5a		phy				phy 									; otherwise get first character
.183e	a0 01		ldy #$01			ldy 	#1
.1840	b1 24		lda ($24),y			lda 	(zTemp0),y
.1842	7a		ply				ply
.1843					_EXAZero:
.1843	a2 08		ldx #$08			ldx 	#IFR0
.1845	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.1848	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1849					EXPUnaryChr:
.1849	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; expr
.184c	48		pha				pha 									; push on stack
.184d	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.1850	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1852	20 ac 29	jsr $29ac			jsr 	StringTempAllocate
.1855	68		pla				pla 									; get value back
.1856	20 e1 29	jsr $29e1			jsr 	StringTempWrite 				; write to string.
.1859	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.185a					EXPUnaryDec:
.185a	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.185d	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.1860	5a		phy				phy 									; save position.
.1861	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1863	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.1866	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.1868	f0 3b		beq $18a5			beq 	_EUDError 						; empty string is not legit.
.186a	aa		tax				tax 									; count in X.
.186b	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.186d					_EUDLoop:
.186d	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.186f	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1871	90 02		bcc $1875			bcc 	_EUDNoCase
.1873	e9 20		sbc #$20			sbc 	#$20
.1875					_EUDNoCase:
.1875	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1877	90 2c		bcc $18a5			bcc 	_EUDError
.1879	c9 3a		cmp #$3a			cmp 	#'9'+1
.187b	90 0a		bcc $1887			bcc 	_EUDOkay
.187d	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.187f	90 24		bcc $18a5			bcc 	_EUDError
.1881	c9 47		cmp #$47			cmp 	#'F'+1
.1883	b0 20		bcs $18a5			bcs 	_EUDError
.1885	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1887					_EUDOkay:
.1887	29 0f		and #$0f			and 	#15 							; make constant
.1889	da		phx				phx
.188a	48		pha				pha
.188b	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.188d	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.1890	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.1893	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.1896	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.1899	68		pla				pla 									; pop constant and OR in
.189a	fa		plx				plx
.189b	05 08		ora $08				ora 	IFR0+IM0
.189d	85 08		sta $08				sta 	IFR0+IM0
.189f	c8		iny				iny 									; next char
.18a0	ca		dex				dex 									; done all characters ?
.18a1	d0 ca		bne $186d			bne 	_EUDLoop
.18a3	7a		ply				ply
.18a4	60		rts				rts
.18a5					_EUDError:
.18a5	4c 11 27	jmp $2711		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.18a8					EXPUnaryInlineDec:
.18a8	4c ef 26	jmp $26ef		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18ab					EXPUnaryPeek:
.18ab	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 				; number to R0
.18ae	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.18b1	b2 08		lda ($08)			lda 	(IFR0)
.18b3	a2 08		ldx #$08			ldx 	#IFR0
.18b5	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.18b8	60		rts				rts
.18b9					EXPUnaryDeek:
.18b9	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 				; number to R0
.18bc	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.18bf	5a		phy				phy
.18c0	a0 01		ldy #$01			ldy 	#1
.18c2	b1 08		lda ($08),y			lda 	(IFR0),y
.18c4	7a		ply				ply
.18c5	48		pha				pha
.18c6	b2 08		lda ($08)			lda 	(IFR0)
.18c8	a2 08		ldx #$08			ldx 	#IFR0
.18ca	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.18cd	68		pla				pla
.18ce	85 09		sta $09				sta 	IFR0+IM1
.18d0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18d1					EXPUnaryFrac:
.18d1	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.18d4	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.18d7	20 a0 2f	jsr $2fa0			jsr 	IFloatFractionalR0 				; get fractional bit.
.18da	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18db					EXPUnaryInkey:
.18db	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.18de	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18e0	20 ac 29	jsr $29ac			jsr 	StringTempAllocate
.18e3	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit
.18e6	b0 06		bcs $18ee			bcs 	_EUIExit
.18e8	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it.
.18eb	20 e1 29	jsr $29e1			jsr 	StringTempWrite
.18ee					_EUIExit:
.18ee	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18ef					EXPUnaryInt:
.18ef	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.18f2	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; check for )
.18f5	20 f6 2f	jsr $2ff6			jsr 	IFloatIntegerR0 				; force to integer.
.18f8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18f9					EXPUnaryLen:
.18f9	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.18fc	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.18ff	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.1901	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1903	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.1906	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1907					EXPUnaryParenthesis:
.1907	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.190a	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.190d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.190e					EXPUnaryRnd:
.190e	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; number to R0
.1911	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 				; )
.1914	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1916	20 2d 19	jsr $192d			jsr 	EXPLoadInRandom
.1919	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.191b	85 0b		sta $0b				sta 	IFR0+IExp
.191d	60		rts				rts
.191e					ExpUnaryRand:
.191e	20 16 17	jsr $1716			jsr 	EXPEvalInteger 				; integer to R0
.1921	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 				; )
.1924	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1926	20 2d 19	jsr $192d			jsr 	EXPLoadInRandom
.1929	20 65 2e	jsr $2e65			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.192c	60		rts				rts
.192d					EXPLoadInRandom:
.192d	20 f5 32	jsr $32f5			jsr 	IFloatSetZero 				; zero it
.1930	20 42 19	jsr $1942			jsr 	EXPRandom32 				; do a 23 bit number.
.1933	95 00		sta $00,x			sta 	IM0,x
.1935	20 42 19	jsr $1942			jsr 	EXPRandom32
.1938	95 01		sta $01,x			sta 	IM1,x
.193a	20 42 19	jsr $1942			jsr 	EXPRandom32
.193d	29 7f		and #$7f			and 	#$7F
.193f	95 02		sta $02,x			sta 	IM2,x
.1941	60		rts				rts
.1942					EXPRandom32:
.1942	5a		phy				phy
.1943	a0 08		ldy #$08			ldy 	#8
.1945	ad 12 05	lda $0512			lda 	EXPSeed+0
.1948	0d 13 05	ora $0513			ora 	EXPSeed+1
.194b	0d 14 05	ora $0514			ora 	EXPSeed+2
.194e	0d 15 05	ora $0515			ora 	EXPSeed+3
.1951	d0 08		bne $195b			bne 	_EXPRNoReset
.1953	ee 12 05	inc $0512			inc 	EXPSeed+0
.1956	a0 10		ldy #$10			ldy 	#16
.1958	8c 15 05	sty $0515			sty 	EXPSeed+3
.195b					_EXPRNoReset:
.195b	ad 12 05	lda $0512			lda 	EXPSeed+0
.195e					_EXPRLoop:
.195e	0a		asl a				asl		a
.195f	2e 13 05	rol $0513			rol 	EXPSeed+1
.1962	2e 14 05	rol $0514			rol 	EXPSeed+2
.1965	2e 15 05	rol $0515			rol 	EXPSeed+3
.1968	90 02		bcc $196c			bcc 	_EXPRNoEOR
.196a	49 c5		eor #$c5			eor 	#$C5
.196c					_EXPRNoEOR:
.196c	88		dey				dey
.196d	d0 ef		bne $195e			bne 	_EXPRLoop
.196f	8d 12 05	sta $0512			sta 	EXPSeed+0
.1972	7a		ply				ply
.1973	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1974					EXPUnarySgn:
.1974	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.1977	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.197a	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.197c	20 97 32	jsr $3297			jsr 	IFloatCopyToRegister
.197f	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1981	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.1984	a2 0c		ldx #$0c			ldx 	#IFR1
.1986	20 c4 2f	jsr $2fc4			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1989	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.198a					EXPUnarySqr:
.198a	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.198d	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.1990	20 40 2f	jsr $2f40			jsr 	IFloatSquareRootR0 				; square root.
.1993	b0 01		bcs $1996			bcs 	_EUSValue 						; error check.
.1995	60		rts				rts
.1996					_EUSValue:
.1996	4c 00 27	jmp $2700		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1999					EXPUnaryHex:
.1999	20 16 17	jsr $1716			jsr 	EXPEvalInteger 					; expr
.199c	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.199f	5a		phy				phy
.19a0	a9 10		lda #$10			lda 	#16
.19a2	20 97 30	jsr $3097			jsr 	IFloatIntegerToStringR0
.19a5	80 0a		bra $19b1			bra 	EUSMain
.19a7					EXPUnaryStr:
.19a7	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; expr
.19aa	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.19ad	5a		phy				phy
.19ae	20 f2 30	jsr $30f2			jsr 	IFloatFloatToStringR0 			; convert to string
.19b1					EUSMain:
.19b1	b0 19		bcs $19cc			bcs 	_EUSError
.19b3	86 24		stx $24				stx 	zTemp0 							; save string address
.19b5	84 25		sty $25				sty 	zTemp0+1
.19b7	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19b9	20 ac 29	jsr $29ac			jsr 	StringTempAllocate
.19bc	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.19be	aa		tax				tax 									; count in X
.19bf	a0 01		ldy #$01			ldy 	#1
.19c1					_EUSCopy:
.19c1	b1 24		lda ($24),y			lda 	(zTemp0),y
.19c3	c8		iny				iny
.19c4	20 e1 29	jsr $29e1			jsr 	StringTempWrite
.19c7	ca		dex				dex
.19c8	d0 f7		bne $19c1			bne	 	_EUSCopy
.19ca	7a		ply				ply
.19cb	60		rts				rts
.19cc					_EUSError:
.19cc	4c 00 27	jmp $2700		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19cf					EXPUnaryInlineString:
.19cf	18		clc				clc 								; physical address -> IM0,1
.19d0	98		tya				tya 								; put the actual address in IM0
.19d1	65 18		adc $18				adc 	codePtr
.19d3	85 08		sta $08				sta 	IFR0+IM0
.19d5	a5 19		lda $19				lda 	codePtr+1
.19d7	69 00		adc #$00			adc 	#0
.19d9	85 09		sta $09				sta 	IFR0+IM1
.19db	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19dd	a9 80		lda #$80			lda 	#$80
.19df	85 0b		sta $0b				sta 	IFR0+IExp
.19e1	98		tya				tya	 								; skip over it.
.19e2	38		sec				sec
.19e3	71 18		adc ($18),y			adc 	(codePtr),y
.19e5	a8		tay				tay
.19e6	60		rts				rts
.19e7					_EXPUISRange:
.19e7	4c 00 27	jmp $2700		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19ea					EXPUnaryLeft:
.19ea	20 30 1a	jsr $1a30			jsr 	EXPCommonStart 					; <string>,
.19ed	48		pha				pha 									; save string address on stack
.19ee	da		phx				phx
.19ef	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19f1	48		pha				pha
.19f2	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.19f5	80 44		bra $1a3b			bra 	EXPSubstringCommon
.19f7					EXPUnaryRight:
.19f7	20 30 1a	jsr $1a30			jsr 	EXPCommonStart 					; <string>,
.19fa	48		pha				pha 									; save string address on stack
.19fb	da		phx				phx
.19fc	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19fe	48		pha				pha
.19ff	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.1a02	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1a04	68		pla				pla
.1a05	38		sec				sec
.1a06	e5 24		sbc $24				sbc 	zTemp0
.1a08	b0 02		bcs $1a0c			bcs 	_EUROffLeft
.1a0a	a9 00		lda #$00			lda 	#0
.1a0c					_EUROffLeft:
.1a0c	48		pha				pha 									; start pos
.1a0d	a9 ff		lda #$ff			lda 	#255
.1a0f	80 2a		bra $1a3b			bra 	EXPSubstringCommon
.1a11					EXPUnaryMid:
.1a11	20 30 1a	jsr $1a30			jsr 	EXPCommonStart 					; <string>,
.1a14	48		pha				pha 									; save string address on stack
.1a15	da		phx				phx
.1a16	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters start
.1a19	f0 12		beq $1a2d			beq 	_EUSError 						; 1 is left
.1a1b	3a		dec a				dec 	a 								; zero based.
.1a1c	48		pha				pha
.1a1d	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a1f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a21	f0 04		beq $1a27			beq 	_EUMLength 						; if so m is provided
.1a23	a9 ff		lda #$ff			lda 	#255 							; default m
.1a25	80 14		bra $1a3b			bra 	EXPSubstringCommon
.1a27					_EUMLength:
.1a27	c8		iny				iny 									; consume comma
.1a28	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.1a2b	80 0e		bra $1a3b			bra 	EXPSubstringCommon
.1a2d					_EUSError:
.1a2d	4c 11 27	jmp $2711		jmp	ErrorV_value
.1a30					EXPCommonStart:
.1a30	20 35 17	jsr $1735			jsr 	EXPEvalString
.1a33	20 bf 28	jsr $28bf			jsr 	ERRCheckComma
.1a36	a5 08		lda $08				lda 	IFR0+IM0
.1a38	a6 09		ldx $09				ldx 	IFR0+IM1
.1a3a	60		rts				rts
.1a3b					EXPSubstringCommon:
.1a3b	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1a3d	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; check right bracket.
.1a40	68		pla				pla 									; start position
.1a41	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1a43	fa		plx				plx 									; get string address to zTemp2.
.1a44	86 29		stx $29				stx 	zTemp2+1
.1a46	68		pla				pla
.1a47	85 28		sta $28				sta 	zTemp2
.1a49	38		sec				sec 									; length - start is the max count of chars
.1a4a	b2 28		lda ($28)			lda 	(zTemp2)
.1a4c	e5 27		sbc $27				sbc 	zTemp1+1
.1a4e	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1a50	b0 02		bcs $1a54			bcs 	_EXPSSNoTrim
.1a52	85 26		sta $26				sta 	zTemp1 							; update count with available
.1a54					_EXPSSNoTrim:
.1a54	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1a56	20 ac 29	jsr $29ac			jsr 	StringTempAllocate 				; allocate memory for it.
.1a59	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1a5b	f0 15		beq $1a72			beq 	_EXPSSExit
.1a5d	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1a5f	d2 28		cmp ($28)			cmp 	(zTemp2)
.1a61	b0 0f		bcs $1a72			bcs 	_EXPSSExit
.1a63	5a		phy				phy
.1a64	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1a66	c8		iny				iny 									; +1 for the length byte
.1a67					_EXPSSCopy:
.1a67	b1 28		lda ($28),y			lda 	(zTemp2),y
.1a69	20 e1 29	jsr $29e1			jsr 	StringTempWrite
.1a6c	c8		iny				iny
.1a6d	c6 26		dec $26				dec 	zTemp1
.1a6f	d0 f6		bne $1a67			bne 	_EXPSSCopy
.1a71	7a		ply				ply
.1a72					_EXPSSExit:
.1a72	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a73					EXPUnaryVal:
.1a73	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a76	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 					; )
.1a79	20 7d 1a	jsr $1a7d			jsr 	VALConversionZTemp0
.1a7c	60		rts				rts
.1a7d					VALConversionZTemp0:
.1a7d	5a		phy				phy
.1a7e	18		clc				clc
.1a7f	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1a81	69 01		adc #$01			adc 	#1
.1a83	aa		tax				tax
.1a84	a5 25		lda $25				lda 	zTemp0+1
.1a86	69 00		adc #$00			adc 	#0
.1a88	a8		tay				tay
.1a89	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1a8b	20 59 31	jsr $3159			jsr 	IFloatStringToFloatR0 			; do conversion
.1a8e	b0 02		bcs $1a92			bcs 	_EUVError
.1a90	7a		ply				ply
.1a91	60		rts				rts
.1a92					_EUVError:
.1a92	4c 11 27	jmp $2711		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1a95					AssemblerLookup:
>1a95	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,74,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,74,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,74,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,74,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,74,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,74,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,74,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,74,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,75,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,75,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,75,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,75,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,75,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,75,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,75,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,75
>1a9d	fb 1e 7c 00 4b 1e 7c 4a b8 1e 1e 00 41 1e 7c eb
>1aad	b9 1e f9 00 41 1e 7c 4a 7f 6a 00 00 7a 6a e1 eb
>1abd	23 6a e1 00 7a 6a e1 4a 97 6a 6a 00 7a 6a e1 eb
>1acd	a6 6a 7d 00 7a 6a e1 4a 38 62 00 00 00 62 0b eb
>1add	ec 62 0b 00 2e 62 0b 4a c3 62 62 00 00 62 0b eb
>1aed	bf 62 04 00 00 62 0b 4a 42 1d 00 00 3b 1d e7 eb
>1afd	14 1d e7 00 2e 1d e7 4a d3 1d 1d 00 3b 1d e7 eb
>1b0d	ac 1d 2c 00 2e 1d e7 4a 99 22 00 00 3a 22 39 f5
>1b1d	93 7a 54 00 3a 22 39 4b 45 22 22 00 3a 22 39 f5
>1b2d	5e 22 66 00 3b 22 3b 4b 19 01 18 00 19 01 18 f5
>1b3d	c6 01 c5 00 19 01 18 4b 55 01 01 00 19 01 18 f5
>1b4d	cc 01 61 00 19 01 18 4b f7 a8 00 00 f7 a8 7d f5
>1b5d	0f a8 92 0c f7 a8 7d 4b 75 a8 a8 00 00 a8 7d f5
>1b6d	ba a8 03 31 00 a8 7d 4b f6 48 00 00 f6 48 f9 f5
>1b7d	0e 48 dd 00 f6 48 f9 4b 8f 48 48 00 00 48 f9 f5
>1b8d	a7 48 2b 00 00 48 f9 4b

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1b95					BinaryPrecedence:
>1b95	02					.byte	 2	; $ef =
>1b96	02					.byte	 2	; $f0 <>
>1b97	02					.byte	 2	; $f1 <=
>1b98	02					.byte	 2	; $f2 <
>1b99	02					.byte	 2	; $f3 >=
>1b9a	02					.byte	 2	; $f4 >
>1b9b	01					.byte	 1	; $f5 XOR
>1b9c	01					.byte	 1	; $f6 OR
>1b9d	01					.byte	 1	; $f7 AND
>1b9e	04					.byte	 4	; $f8 DIV
>1b9f	04					.byte	 4	; $f9 MOD
>1ba0	04					.byte	 4	; $fa <<
>1ba1	04					.byte	 4	; $fb >>
>1ba2	04					.byte	 4	; $fc /
>1ba3	04					.byte	 4	; $fd *
>1ba4	03					.byte	 3	; $fe -
>1ba5	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1ba6					StructureOffsets:
>1ba6	01					.byte	1  	; $80 REPEAT
>1ba7	ff					.byte	255	; $81 UNTIL
>1ba8	01					.byte	1  	; $82 WHILE
>1ba9	ff					.byte	255	; $83 WEND
>1baa	01					.byte	1  	; $84 IF
>1bab	ff					.byte	255	; $85 ENDIF
>1bac	01					.byte	1  	; $86 DO
>1bad	ff					.byte	255	; $87 LOOP
>1bae	01					.byte	1  	; $88 PROC
>1baf	ff					.byte	255	; $89 ENDPROC
>1bb0	01					.byte	1  	; $8a FOR
>1bb1	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1bb2					StandardTokens:
>1bb2	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1bb9	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1bbf	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1bc5	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1bca	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1bcd	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1bd3	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1bd6	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1bdb	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1be0	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1be8	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1bec	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1bf1	00					.byte	$00                                     	; $8c [[end]]
>1bf2	00					.byte	$00                                     	; $8d [[shift]]
>1bf3	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1bf8	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1bfd	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1c00	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1c05	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1c09	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1c0f	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1c15	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1c1a	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1c1e	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1c22	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1c27	01 2c					.byte	$01,$2c                                 	; $99 ,
>1c29	01 3b					.byte	$01,$3b                                 	; $9a ;
>1c2b	01 3a					.byte	$01,$3a                                 	; $9b :
>1c2d	01 27					.byte	$01,$27                                 	; $9c '
>1c2f	01 29					.byte	$01,$29                                 	; $9d )
>1c31	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1c36	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1c3b	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1c40	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1c45	01 5b					.byte	$01,$5b                                 	; $a2 [
>1c47	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1c49	01 23					.byte	$01,$23                                 	; $a4 #
>1c4b	01 2e					.byte	$01,$2e                                 	; $a5 .
>1c4d	00					.byte	0											; $a6
>1c4e	00					.byte	0											; $a7
>1c4f	00					.byte	0											; $a8
>1c50	00					.byte	0											; $a9
>1c51	00					.byte	0											; $aa
>1c52	00					.byte	0											; $ab
>1c53	00					.byte	0											; $ac
>1c54	00					.byte	0											; $ad
>1c55	00					.byte	0											; $ae
>1c56	00					.byte	0											; $af
>1c57	00					.byte	0											; $b0
>1c58	00					.byte	0											; $b1
>1c59	00					.byte	0											; $b2
>1c5a	00					.byte	0											; $b3
>1c5b	00					.byte	0											; $b4
>1c5c	00					.byte	0											; $b5
>1c5d	00					.byte	0											; $b6
>1c5e	00					.byte	0											; $b7
>1c5f	00					.byte	0											; $b8
>1c60	00					.byte	0											; $b9
>1c61	00					.byte	0											; $ba
>1c62	00					.byte	0											; $bb
>1c63	00					.byte	0											; $bc
>1c64	00					.byte	0											; $bd
>1c65	00					.byte	0											; $be
>1c66	00					.byte	0											; $bf
>1c67	00					.byte	0											; $c0
>1c68	00					.byte	0											; $c1
>1c69	00					.byte	0											; $c2
>1c6a	00					.byte	0											; $c3
>1c6b	00					.byte	0											; $c4
>1c6c	00					.byte	0											; $c5
>1c6d	00					.byte	0											; $c6
>1c6e	00					.byte	0											; $c7
>1c6f	00					.byte	0											; $c8
>1c70	00					.byte	0											; $c9
>1c71	00					.byte	0											; $ca
>1c72	00					.byte	0											; $cb
>1c73	00					.byte	0											; $cc
>1c74	00					.byte	0											; $cd
>1c75	00					.byte	0											; $ce
>1c76	00					.byte	0											; $cf
>1c77	00					.byte	0											; $d0
>1c78	00					.byte	0											; $d1
>1c79	00					.byte	0											; $d2
>1c7a	00					.byte	0											; $d3
>1c7b	00					.byte	0											; $d4
>1c7c	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1c82	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1c88	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1c90	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1c97	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1c9d	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ca3	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1ca8	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1cad	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1cb2	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1cb7	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1cbc	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1cc2	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1cc7	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1ccf	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1cd6	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1cdb	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1ce0	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1ce6	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1ceb	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1cf1	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1cf6	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1cfc	01 28					.byte	$01,$28                                 	; $eb (
>1cfe	01 26					.byte	$01,$26                                 	; $ec &
>1d00	00					.byte	$00                                     	; $ed [[decimal]]
>1d01	00					.byte	$00                                     	; $ee [[string]]
>1d02	01 3d					.byte	$01,$3d                                 	; $ef =
>1d04	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1d07	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1d0a	01 3c					.byte	$01,$3c                                 	; $f2 <
>1d0c	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1d0f	01 3e					.byte	$01,$3e                                 	; $f4 >
>1d11	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1d15	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1d18	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1d1c	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1d20	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1d24	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1d27	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1d2a	01 2f					.byte	$01,$2f                                 	; $fc /
>1d2c	01 2a					.byte	$01,$2a                                 	; $fd *
>1d2e	01 2d					.byte	$01,$2d                                 	; $fe -
>1d30	01 2b					.byte	$01,$2b                                 	; $ff +
>1d32	ff					.byte	$FF
.1d33					AlternateTokens:
>1d33	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1d39	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1d3d	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1d41	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1d46	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1d4a	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1d51	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1d56	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1d5b	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1d60	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1d66	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1d6b	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1d72	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1d7a	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1d7e	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>1d82	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>1d88	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1d89					VectorTable:
>1d89	df 25					.word	Command_REPEAT           ; $80 REPEAT
>1d8b	e8 25					.word	Command_UNTIL            ; $81 UNTIL
>1d8d	c2 26					.word	Command_WHILE            ; $82 WHILE
>1d8f	e3 26					.word	Command_WEND             ; $83 WEND
>1d91	b5 25					.word	IfCommand                ; $84 IF
>1d93	de 25					.word	EndIf                    ; $85 ENDIF
>1d95	37 24					.word	Command_DO               ; $86 DO
>1d97	4f 24					.word	Command_LOOP             ; $87 LOOP
>1d99	4b 15					.word	NoExec08                 ; $88 PROC
>1d9b	2b 24					.word	Command_ENDPROC          ; $89 ENDPROC
>1d9d	58 24					.word	Command_FOR              ; $8a FOR
>1d9f	e5 24					.word	Command_NEXT             ; $8b NEXT
>1da1	cc 14					.word	RUNEndOfLine             ; $8c [[END]]
>1da3	28 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1da5	d7 25					.word	ElseCode                 ; $8e ELSE
>1da7	4b 15					.word	NoExec01                 ; $8f THEN
>1da9	4b 15					.word	NoExec02                 ; $90 TO
>1dab	4b 15					.word	NoExec03                 ; $91 STEP
>1dad	b7 12					.word	CommandLET               ; $92 LET
>1daf	0c 12					.word	Command_Print            ; $93 PRINT
>1db1	05 12					.word	Command_Input            ; $94 INPUT
>1db3	ef 23					.word	Command_CALL             ; $95 CALL
>1db5	36 15					.word	Command_Sys              ; $96 SYS
>1db7	85 14					.word	Command_REM              ; $97 REM
>1db9	40 24					.word	Command_EXIT             ; $98 EXIT
>1dbb	4b 15					.word	NoExec04                 ; $99 ,
>1dbd	4b 15					.word	NoExec05                 ; $9a ;
>1dbf	4b 15					.word	NoExec06                 ; $9b :
>1dc1	85 14					.word	Command_REM2             ; $9c '
>1dc3	4b 15					.word	NoExec07                 ; $9d )
>1dc5	ae 11					.word	Command_Poke             ; $9e POKE
>1dc7	ab 11					.word	Command_Doke             ; $9f DOKE
>1dc9	11 14					.word	Command_READ             ; $a0 READ
>1dcb	78 14					.word	Command_DATA             ; $a1 DATA
>1dcd	cb 2a					.word	NotImplemented           ; $a2 [
>1dcf	cb 2a					.word	NotImplemented           ; $a3 ]
>1dd1	cb 2a					.word	NotImplemented           ; $a4 #
>1dd3	cb 2a					.word	NotImplemented           ; $a5 .
>1dd5	cb 2a					.word	NotImplemented           ; $a6
>1dd7	cb 2a					.word	NotImplemented           ; $a7
>1dd9	cb 2a					.word	NotImplemented           ; $a8
>1ddb	cb 2a					.word	NotImplemented           ; $a9
>1ddd	cb 2a					.word	NotImplemented           ; $aa
>1ddf	cb 2a					.word	NotImplemented           ; $ab
>1de1	cb 2a					.word	NotImplemented           ; $ac
>1de3	cb 2a					.word	NotImplemented           ; $ad
>1de5	cb 2a					.word	NotImplemented           ; $ae
>1de7	cb 2a					.word	NotImplemented           ; $af
>1de9	cb 2a					.word	NotImplemented           ; $b0
>1deb	cb 2a					.word	NotImplemented           ; $b1
>1ded	cb 2a					.word	NotImplemented           ; $b2
>1def	cb 2a					.word	NotImplemented           ; $b3
>1df1	cb 2a					.word	NotImplemented           ; $b4
>1df3	cb 2a					.word	NotImplemented           ; $b5
>1df5	cb 2a					.word	NotImplemented           ; $b6
>1df7	cb 2a					.word	NotImplemented           ; $b7
>1df9	cb 2a					.word	NotImplemented           ; $b8
>1dfb	cb 2a					.word	NotImplemented           ; $b9
>1dfd	cb 2a					.word	NotImplemented           ; $ba
>1dff	cb 2a					.word	NotImplemented           ; $bb
>1e01	cb 2a					.word	NotImplemented           ; $bc
>1e03	cb 2a					.word	NotImplemented           ; $bd
>1e05	cb 2a					.word	NotImplemented           ; $be
>1e07	cb 2a					.word	NotImplemented           ; $bf
>1e09	cb 2a					.word	NotImplemented           ; $c0
>1e0b	cb 2a					.word	NotImplemented           ; $c1
>1e0d	cb 2a					.word	NotImplemented           ; $c2
>1e0f	cb 2a					.word	NotImplemented           ; $c3
>1e11	cb 2a					.word	NotImplemented           ; $c4
>1e13	cb 2a					.word	NotImplemented           ; $c5
>1e15	cb 2a					.word	NotImplemented           ; $c6
>1e17	cb 2a					.word	NotImplemented           ; $c7
>1e19	cb 2a					.word	NotImplemented           ; $c8
>1e1b	cb 2a					.word	NotImplemented           ; $c9
>1e1d	cb 2a					.word	NotImplemented           ; $ca
>1e1f	cb 2a					.word	NotImplemented           ; $cb
>1e21	cb 2a					.word	NotImplemented           ; $cc
>1e23	cb 2a					.word	NotImplemented           ; $cd
>1e25	cb 2a					.word	NotImplemented           ; $ce
>1e27	cb 2a					.word	NotImplemented           ; $cf
>1e29	cb 2a					.word	NotImplemented           ; $d0
>1e2b	cb 2a					.word	NotImplemented           ; $d1
>1e2d	cb 2a					.word	NotImplemented           ; $d2
>1e2f	cb 2a					.word	NotImplemented           ; $d3
>1e31	cb 2a					.word	NotImplemented           ; $d4
>1e33	b9 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1e35	ab 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1e37	f7 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1e39	ea 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1e3b	11 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1e3d	a7 19					.word	EXPUnaryStr              ; $da STR$(
>1e3f	73 1a					.word	EXPUnaryVal              ; $db VAL(
>1e41	74 19					.word	EXPUnarySgn              ; $dc SGN(
>1e43	25 18					.word	EXPUnaryAbs              ; $dd ABS(
>1e45	f9 18					.word	EXPUnaryLen              ; $de LEN(
>1e47	8a 19					.word	EXPUnarySqr              ; $df SQR(
>1e49	49 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1e4b	33 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1e4d	db 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1e4f	cb 2a					.word	NotImplemented           ; $e3 EVENT(
>1e51	cb 2a					.word	NotImplemented           ; $e4 TIME
>1e53	ef 18					.word	EXPUnaryInt              ; $e5 INT(
>1e55	d1 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1e57	5a 18					.word	EXPUnaryDec              ; $e7 DEC(
>1e59	99 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1e5b	0e 19					.word	EXPUnaryRnd              ; $e9 RND(
>1e5d	1e 19					.word	ExpUnaryRand             ; $ea RAND(
>1e5f	07 19					.word	EXPUnaryParenthesis      ; $eb (
>1e61	2f 18					.word	EXPUnaryNull             ; $ec &
>1e63	a8 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1e65	cf 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1e67	08 16					.word	EXPCompareEqual          ; $ef =
>1e69	23 16					.word	EXPCompareNotEqual       ; $f0 <>
>1e6b	2c 16					.word	EXPCompareLessEqual      ; $f1 <=
>1e6d	11 16					.word	EXPCompareLess           ; $f2 <
>1e6f	35 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1e71	1a 16					.word	EXPCompareGreater        ; $f4 >
>1e73	b5 15					.word	EXPBinXor                ; $f5 XOR
>1e75	a9 15					.word	EXPBinOr                 ; $f6 OR
>1e77	9d 15					.word	EXPBinAnd                ; $f7 AND
>1e79	75 15					.word	EXPBinIDiv               ; $f8 DIV
>1e7b	86 15					.word	EXPBinIMod               ; $f9 MOD
>1e7d	80 16					.word	EXPBinLeft               ; $fa <<
>1e7f	88 16					.word	EXPBinRight              ; $fb >>
>1e81	69 15					.word	EXPBinFDiv               ; $fc /
>1e83	60 15					.word	EXPBinMul                ; $fd *
>1e85	57 15					.word	EXPBinSub                ; $fe -
>1e87	4e 15					.word	EXPBinAdd                ; $ff +
.1e89					AlternateVectorTable:
>1e89	1b 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1e8b	08 14					.word	Command_NEW              ; $8d81 NEW
>1e8d	c0 14					.word	Command_RUN              ; $8d82 RUN
>1e8f	33 15					.word	Command_STOP             ; $8d83 STOP
>1e91	30 15					.word	Command_END              ; $8d84 END
>1e93	0d 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1e95	31 13					.word	Command_LIST             ; $8d86 LIST
>1e97	cb 2a					.word	NotImplemented           ; $8d87 SAVE
>1e99	45 2a					.word	Command_LOAD             ; $8d88 LOAD
>1e9b	9b 25					.word	Command_GOSUB            ; $8d89 GOSUB
>1e9d	d5 11					.word	Command_GOTO             ; $8d8a GOTO
>1e9f	a9 25					.word	Command_RETURN           ; $8d8b RETURN
>1ea1	92 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1ea3	8f 10					.word	CommandDIM               ; $8d8d DIM
>1ea5	ee 29					.word	Command_DIR              ; $8d8e DIR
>1ea7	19 2a					.word	Command_ERASE            ; $8d8f ERASE

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1ea9					TOKDetokenise:
.1ea9	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.1eab	84 29		sty $29				sty 	zTemp2+1
.1ead	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1eb0					_TOKDLoop:
.1eb0	20 f5 1e	jsr $1ef5			jsr 	TOKDGet 					; get next
.1eb3	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1eb5	f0 3c		beq $1ef3			beq 	_TOKDExit
.1eb7	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1eb9	f0 33		beq $1eee			beq 	_TOKDDataItem
.1ebb	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1ebd	f0 2f		beq $1eee			beq 	_TOKDDataItem
.1ebf	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.1ec1	f0 19		beq $1edc			beq 	_TOKAmpersand
.1ec3	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1ec5	10 05		bpl $1ecc			bpl 	_TOKDNotToken
.1ec7	20 bb 1f	jsr $1fbb			jsr 	TOKDToken 					; token to text.
.1eca	80 e4		bra $1eb0			bra 	_TOKDLoop
.1ecc					_TOKDNotToken:
.1ecc	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1ece	90 05		bcc $1ed5			bcc 	_TOKDNotIdentifier
.1ed0	20 32 1f	jsr $1f32			jsr 	TOKDIdentifier
.1ed3	80 db		bra $1eb0			bra 	_TOKDLoop
.1ed5					_TOKDNotIdentifier:
.1ed5	a0 0a		ldy #$0a			ldy 	#10
.1ed7	20 75 1f	jsr $1f75			jsr 	TOKDInteger
.1eda	80 d4		bra $1eb0			bra 	_TOKDLoop
.1edc					_TOKAmpersand:
.1edc	20 fd 1f	jsr $1ffd			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.1edf	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.1ee1	20 fe 1e	jsr $1efe			jsr 	TOKDOutput
.1ee4	20 f5 1e	jsr $1ef5			jsr 	TOKDGet 					; get first char of integer
.1ee7	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.1ee9	20 75 1f	jsr $1f75			jsr 	TOKDInteger
.1eec	80 c2		bra $1eb0			bra 	_TOKDLoop
.1eee					_TOKDDataItem:
.1eee	20 0b 1f	jsr $1f0b			jsr 	TOKDDataItem
.1ef1	80 bd		bra $1eb0			bra 	_TOKDLoop
.1ef3					_TOKDExit:
.1ef3	18		clc				clc
.1ef4	60		rts				rts
.1ef5	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.1ef7	e6 28		inc $28				inc 	zTemp2
.1ef9	d0 02		bne $1efd			bne 	_TKDGExit
.1efb	e6 29		inc $29				inc 	zTemp2+1
.1efd					_TKDGExit:
.1efd	60		rts				rts
.1efe					TOKDOutput:
.1efe	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1f01	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1f04					TOKSetDetokeniseOutput:
.1f04	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1f07	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1f0a	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1f0b					TOKDDataItem:
.1f0b	a8		tay				tay 								; type in Y
.1f0c	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1f0e	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1f10	f0 02		beq $1f14			beq 	_TOKDDIsString
.1f12	a9 2e		lda #$2e			lda 	#'.'
.1f14					_TOKDDIsString:
.1f14	20 fe 1e	jsr $1efe			jsr 	TOKDOutput 					; dump it
.1f17	20 f5 1e	jsr $1ef5			jsr 	TOKDGet 					; get length into X
.1f1a	aa		tax				tax
.1f1b					_TOKDDOutput:
.1f1b	ca		dex				dex 								; are we complete
.1f1c	e0 ff		cpx #$ff			cpx 	#255
.1f1e	f0 08		beq $1f28			beq 	_TOKDDEnd
.1f20	20 f5 1e	jsr $1ef5			jsr 	TOKDGet 					; get character and output it
.1f23	20 fe 1e	jsr $1efe			jsr 	TOKDOutput
.1f26	80 f3		bra $1f1b			bra 	_TOKDDOutput
.1f28					_TOKDDEnd:
.1f28	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1f2a	d0 05		bne $1f31			bne 	_TOKDDNotString
.1f2c	a9 22		lda #$22			lda 	#'"'
.1f2e	20 fe 1e	jsr $1efe			jsr 	TOKDOutput
.1f31					_TOKDDNotString:
.1f31	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1f32					TOKDIdentifier:
.1f32	a0 ff		ldy #$ff			ldy 	#$FF
.1f34	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1f37					_TOKDLoop:
.1f37	a8		tay				tay 								; token in Y
.1f38	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.1f3a	c0 64		cpy #$64			cpy 	#$64
.1f3c	f0 0b		beq $1f49			beq 	_TOKDIOutput
.1f3e	98		tya				tya 								; handle a-z
.1f3f	18		clc				clc
.1f40	69 21		adc #$21			adc	 	#$21
.1f42	c0 5a		cpy #$5a			cpy 	#$5A
.1f44	90 03		bcc $1f49			bcc 	_TOKDIOutput
.1f46	38		sec				sec 								; handle 0-9
.1f47	e9 4b		sbc #$4b			sbc 	#$4B
.1f49					_TOKDIOutput:
.1f49	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1f4c	10 08		bpl $1f56			bpl 	_TOKDINoSpacing
.1f4e	48		pha				pha
.1f4f	20 f8 1f	jsr $1ff8			jsr 	TOKDSpacing
.1f52	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1f55	68		pla				pla
.1f56					_TOKDINoSpacing:
.1f56	20 fe 1e	jsr $1efe			jsr 	TOKDOutput
.1f59	20 f5 1e	jsr $1ef5			jsr 	TOKDGet 					; get next token
.1f5c	c9 7c		cmp #$7c			cmp 	#$7C
.1f5e	90 d7		bcc $1f37			bcc 	_TOKDLoop
.1f60	f0 12		beq $1f74			beq 	_TOKDIExit 					; it's a number, no tail.
.1f62	4a		lsr a				lsr 	a 							; string ?
.1f63	90 07		bcc $1f6c			bcc 	_TOKDICheckArray
.1f65	48		pha				pha
.1f66	a9 24		lda #$24			lda 	#"$"
.1f68	20 fe 1e	jsr $1efe			jsr 	TOKDOutput
.1f6b	68		pla				pla
.1f6c					_TOKDICheckArray:
.1f6c	4a		lsr a				lsr 	a 							; array ?
.1f6d	90 05		bcc $1f74			bcc 	_TOKDIExit
.1f6f	a9 28		lda #$28			lda 	#"("
.1f71	20 fe 1e	jsr $1efe			jsr 	TOKDOutput
.1f74					_TOKDIExit:
.1f74	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1f75					TOKDInteger:
.1f75	5a		phy				phy 								; save base
.1f76	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1f78	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.1f7b					_TOKDILoop:
.1f7b	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F
.1f7d	c9 40		cmp #$40			cmp 	#$40
.1f7f	b0 1d		bcs $1f9e			bcs 	_TOKDIHaveInteger
.1f81	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1f83	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.1f86	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.1f89	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.1f8c	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.1f8f	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.1f92	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.1f95	20 f5 1e	jsr $1ef5			jsr 	TOKDGet 					; OR byte in.
.1f98	05 08		ora $08				ora 	IFR0+IM0
.1f9a	85 08		sta $08				sta 	IFR0+IM0
.1f9c	80 dd		bra $1f7b			bra 	_TOKDILoop
.1f9e					_TOKDIHaveInteger:
.1f9e	7a		ply				ply 								; restore base
.1f9f	98		tya				tya 								; base in A
.1fa0	20 97 30	jsr $3097			jsr 	IFloatIntegerToStringR0
.1fa3	86 24		stx $24				stx 	zTemp0
.1fa5	84 25		sty $25				sty 	zTemp0+1
.1fa7	b2 24		lda ($24)			lda 	(zTemp0)
.1fa9	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.1fab	b1 24		lda ($24),y			lda 	(zTemp0),y
.1fad	20 f8 1f	jsr $1ff8			jsr 	TOKDSpacing 				; check spacing okay.
.1fb0					_TOKDOutput:
.1fb0	b1 24		lda ($24),y			lda 	(zTemp0),y
.1fb2	20 fe 1e	jsr $1efe			jsr 	TOKDOutput
.1fb5	c8		iny				iny
.1fb6	b1 24		lda ($24),y			lda 	(zTemp0),y
.1fb8	d0 f6		bne $1fb0			bne 	_TOKDOutput
.1fba	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1fbb					TOKDToken:
.1fbb	a2 b2		ldx #$b2			ldx 	#StandardTokens & $FF 		; standard table
.1fbd	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.1fbf	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.1fc1	d0 07		bne $1fca			bne 	_TOKDSearch
.1fc3	20 f5 1e	jsr $1ef5			jsr 	TOKDGet 					; get next
.1fc6	a2 33		ldx #$33			ldx 	#AlternateTokens & $FF 		; alt table
.1fc8	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.1fca					_TOKDSearch:
.1fca	86 24		stx $24				stx 	zTemp0 						; put table in zTemp0
.1fcc	84 25		sty $25				sty 	zTemp0+1
.1fce	aa		tax				tax 								; token ID in X.
.1fcf					_TOKDFind:
.1fcf	ca		dex				dex 								; reached the start
.1fd0	10 0d		bpl $1fdf			bpl 	_TOKDFound
.1fd2	38		sec				sec 								; go to next entry
.1fd3	b2 24		lda ($24)			lda 	(zTemp0)
.1fd5	65 24		adc $24				adc 	zTemp0
.1fd7	85 24		sta $24				sta 	zTemp0
.1fd9	90 f4		bcc $1fcf			bcc 	_TOKDFind
.1fdb	e6 25		inc $25				inc 	zTemp0+1
.1fdd	80 f0		bra $1fcf			bra 	_TOKDFind
.1fdf					_TOKDFound:
.1fdf	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X
.1fe1	f0 14		beq $1ff7			beq 	_TOKDExit
.1fe3	aa		tax				tax
.1fe4	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1fe6	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.1fe8	20 f8 1f	jsr $1ff8			jsr 	TOKDSpacing
.1feb					_TOKDOutput:
.1feb	b1 24		lda ($24),y			lda 	(zTemp0),y
.1fed	20 ae 23	jsr $23ae			jsr 	TOKToLower
.1ff0	20 fe 1e	jsr $1efe			jsr 	TOKDOutput
.1ff3	c8		iny				iny
.1ff4	ca		dex				dex
.1ff5	d0 f4		bne $1feb			bne 	_TOKDOutput
.1ff7					_TOKDExit:
.1ff7	60		rts				rts
.1ff8					TOKDSpacing:
.1ff8	20 c5 23	jsr $23c5			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1ffb	90 0d		bcc $200a			bcc 	TOKDSExit
.1ffd					TOKDSpaceLastAlpha:
.1ffd	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.2000	20 c5 23	jsr $23c5			jsr 	TOKIsIdentifierElement
.2003	90 05		bcc $200a			bcc 	TOKDSExit
.2005	a9 20		lda #$20			lda 	#" " 						; we need a space.
.2007	20 fe 1e	jsr $1efe			jsr 	TOKDOutput
.200a					TOKDSExit:
.200a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.200b					PGMDeleteLine:
.200b	20 be 20	jsr $20be			jsr 	PGMEndProgram 				; end of program into zTemp0
.200e	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2010	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.2013	85 27		sta $27				sta 	zTemp1+1
.2015					_PGMDLoop:
.2015	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.2017	38		sec				sec
.2018	f0 3a		beq $2054			beq 	_PGMDExit
.201a	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.201c	b1 26		lda ($26),y			lda 	(zTemp1),y
.201e	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2021	d0 08		bne $202b			bne 	_PGMDNext
.2023	c8		iny				iny
.2024	b1 26		lda ($26),y			lda 	(zTemp1),y
.2026	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.2029	f0 0d		beq $2038			beq 	_PGMDDelete
.202b					_PGMDNext:
.202b	18		clc				clc
.202c	b2 26		lda ($26)			lda 	(zTemp1)
.202e	65 26		adc $26				adc 	zTemp1
.2030	85 26		sta $26				sta 	zTemp1
.2032	90 e1		bcc $2015			bcc 	_PGMDLoop
.2034	e6 27		inc $27				inc 	zTemp1+1
.2036	80 dd		bra $2015			bra 	_PGMDLoop
.2038					_PGMDDelete:
.2038	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.203a	a8		tay				tay
.203b					_PGMDCopy:
.203b	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.203d	92 26		sta ($26)			sta 	(zTemp1)
.203f	a5 26		lda $26				lda 	zTemp1 						; reached the end ?
.2041	c5 24		cmp $24				cmp 	zTemp0
.2043	d0 07		bne $204c			bne 	_PGMDNext2
.2045	a5 27		lda $27				lda 	zTemp1+1
.2047	c5 25		cmp $25				cmp 	zTemp0+1
.2049	18		clc				clc
.204a	f0 08		beq $2054			beq 	_PGMDExit
.204c					_PGMDNext2:
.204c	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.204e	d0 eb		bne $203b			bne 	_PGMDCopy
.2050	e6 27		inc $27				inc 	zTemp1+1
.2052	80 e7		bra $203b			bra 	_PGMDCopy
.2054					_PGMDExit:
.2054	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.2055					PGMInsertLine:
.2055	20 be 20	jsr $20be			jsr 	PGMEndProgram 				; end of program into zTemp0
.2058	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.205a	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.205d	85 27		sta $27				sta 	zTemp1+1
.205f					_PGMILoop:
.205f	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.2061	f0 1c		beq $207f			beq 	_PGMIInsert
.2063	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.2065	b1 26		lda ($26),y			lda 	(zTemp1),y
.2067	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.206a	c8		iny				iny
.206b	b1 26		lda ($26),y			lda 	(zTemp1),y
.206d	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.2070	b0 0d		bcs $207f			bcs 	_PGMIInsert 				; insert here.
.2072	18		clc				clc
.2073	b2 26		lda ($26)			lda 	(zTemp1)
.2075	65 26		adc $26				adc 	zTemp1
.2077	85 26		sta $26				sta 	zTemp1
.2079	90 e4		bcc $205f			bcc 	_PGMILoop
.207b	e6 27		inc $27				inc 	zTemp1+1
.207d	80 e0		bra $205f			bra 	_PGMILoop
.207f					_PGMIInsert:
.207f	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.2082					_PGMIInsertLoop:
.2082	b2 24		lda ($24)			lda 	(zTemp0)
.2084	91 24		sta ($24),y			sta 	(zTemp0),y
.2086	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.2088	c5 24		cmp $24				cmp 	zTemp0
.208a	d0 06		bne $2092			bne 	_PGMINext
.208c	a5 27		lda $27				lda 	zTemp1+1
.208e	c5 25		cmp $25				cmp 	zTemp0+1
.2090	f0 0a		beq $209c			beq 	_PGMIInserted
.2092					_PGMINext:
.2092	a5 24		lda $24				lda 	zTemp0
.2094	d0 02		bne $2098			bne 	_PGMINoBorrow
.2096	c6 25		dec $25				dec 	zTemp0+1
.2098					_PGMINoBorrow:
.2098	c6 24		dec $24				dec 	zTemp0
.209a	80 e6		bra $2082			bra 	_PGMIInsertLoop
.209c					_PGMIInserted:
.209c	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.209e					_PGMICopyLoop:
.209e	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.20a1	91 26		sta ($26),y			sta 	(zTemp1),y
.20a3	c8		iny				iny
.20a4	cc 00 04	cpy $0400			cpy 	TOKLineSize
.20a7	d0 f5		bne $209e			bne 	_PGMICopyLoop
.20a9	18		clc				clc
.20aa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.20ab					PGMSetBaseAddress:
.20ab	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.20ae	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.20b1	60		rts				rts
.20b2					PGMNewProgram:
.20b2	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.20b4	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.20b7	85 25		sta $25				sta 	zTemp0+1
.20b9	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.20bb	92 24		sta ($24)			sta 	(zTemp0)
.20bd	60		rts				rts
.20be					PGMEndProgram:
.20be	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.20c0	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.20c3	85 25		sta $25				sta 	zTemp0+1
.20c5					_PGMEPLoop:
.20c5	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.20c7	f0 0b		beq $20d4			beq 	_PGMEPExit
.20c9	18		clc				clc 								; no, advance to next
.20ca	65 24		adc $24				adc 	zTemp0
.20cc	85 24		sta $24				sta 	zTemp0
.20ce	90 f5		bcc $20c5			bcc 	_PGMEPLoop
.20d0	e6 25		inc $25				inc 	zTemp0+1
.20d2	80 f1		bra $20c5			bra 	_PGMEPLoop
.20d4					_PGMEPExit:
.20d4	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.20d5					TOKResetElement:
.20d5	9c 1c 05	stz $051c			stz 	TOKElement
.20d8	60		rts				rts
.20d9					TOKWriteElement:
.20d9	da		phx				phx
.20da	ae 1c 05	ldx $051c			ldx 	TOKElement
.20dd	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.20e0	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.20e3	fa		plx				plx
.20e4	ee 1c 05	inc $051c			inc 	TOKElement
.20e7	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.20e8					TOKTokeniseConstant:
.20e8	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.20ea	48		pha				pha 								; save on stack
.20eb	29 c0		and #$c0			and 	#$C0
.20ed	05 09		ora $09				ora 	IFR0+IM1
.20ef	05 0a		ora $0a				ora 	IFR0+IM2
.20f1	f0 10		beq $2103			beq 	_TTCLess
.20f3	da		phx				phx
.20f4	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.20f6					_TTCShiftRight:
.20f6	46 0a		lsr $0a				lsr 	IFR0+IM2
.20f8	66 09		ror $09				ror 	IFR0+IM1
.20fa	66 08		ror $08				ror 	IFR0+IM0
.20fc	ca		dex				dex
.20fd	d0 f7		bne $20f6			bne 	_TTCShiftRight
.20ff	fa		plx				plx
.2100	20 e8 20	jsr $20e8			jsr 	TOKTokeniseConstant
.2103					_TTCLess:
.2103	68		pla				pla
.2104	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.2106	20 a6 21	jsr $21a6			jsr 	TOKWriteA
.2109	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.210a					TOKTokeniseDecimals:
.210a	20 b9 21	jsr $21b9			jsr 	TOKGetNext 					; consume the .
.210d	20 32 23	jsr $2332			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2110	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.2112	20 a6 21	jsr $21a6			jsr 	TOKWriteA
.2115	20 1a 21	jsr $211a			jsr 	TOKOutputElementBuffer 		; then the buffer
.2118	18		clc				clc
.2119	60		rts				rts
.211a					TOKOutputElementBuffer:
.211a	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.211d	20 a6 21	jsr $21a6			jsr 	TOKWriteA
.2120	a8		tay				tay 								; put in Y
.2121	f0 0c		beq $212f			beq 	_TOEExit 					; exit if empty which is okay.
.2123	a2 01		ldx #$01			ldx 	#1
.2125					_TOELoop:
.2125	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.2128	20 a6 21	jsr $21a6			jsr 	TOKWriteA
.212b	e8		inx				inx
.212c	88		dey				dey
.212d	d0 f6		bne $2125			bne 	_TOELoop
.212f					_TOEExit:
.212f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.2130					TOKTokenise:
.2130	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.2133	8e 1c 06	stx $061c			stx 	TOKDataSource
.2136	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2138	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.213b	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.213d	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.2140	9c 01 04	stz $0401			stz 	TOKLineNumber
.2143	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2146					_TOKMainLoop:
.2146	20 b5 21	jsr $21b5			jsr 	TOKGet 						; what follows.
.2149	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.214b	f0 50		beq $219d			beq 	_TOKExit
.214d	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.214f	d0 05		bne $2156			bne 	_TOKElement
.2151	20 b9 21	jsr $21b9			jsr 	TOKGetNext
.2154	80 f0		bra $2146			bra 	_TOKMainLoop
.2156					_TOKElement:
.2156	20 b9 23	jsr $23b9			jsr 	TOKIsDigit 					; is it 0..9
.2159	90 16		bcc $2171			bcc 	_TOKNotDigit
.215b	20 09 23	jsr $2309			jsr 	TOKTokeniseInteger 			; get integer
.215e	b0 44		bcs $21a4			bcs 	_TOKFail 					; did it fail ?
.2160	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2163	20 b5 21	jsr $21b5			jsr 	TOKGet 						; what follows ?
.2166	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2168	d0 dc		bne $2146			bne 	_TOKMainLoop
.216a	20 0a 21	jsr $210a			jsr 	TOKTokeniseDecimals
.216d	b0 35		bcs $21a4			bcs 	_TOKFail
.216f	80 d5		bra $2146			bra 	_TOKMainLoop
.2171					_TOKNotDigit:
.2171	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2174	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.2176	d0 07		bne $217f			bne 	_TOKNotHex
.2178	20 0f 22	jsr $220f			jsr 	TOKTokeniseHexadecimal
.217b	b0 27		bcs $21a4			bcs 	_TOKFail
.217d	80 c7		bra $2146			bra 	_TOKMainLoop
.217f					_TOKNotHex:
.217f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.2181	d0 07		bne $218a			bne 	_TOKNotString
.2183	20 80 23	jsr $2380			jsr 	TOKTokeniseString
.2186	b0 1c		bcs $21a4			bcs 	_TOKFail
.2188	80 bc		bra $2146			bra 	_TOKMainLoop
.218a					_TOKNotString:
.218a	20 d2 23	jsr $23d2			jsr 	TOKIsAlpha 					; identifier ?
.218d	b0 07		bcs $2196			bcs 	_TOKIdentifier
.218f	20 46 23	jsr $2346			jsr 	TOKTokenisePunctuation 		; punctuation
.2192	b0 10		bcs $21a4			bcs 	_TOKFail
.2194	80 b0		bra $2146			bra 	_TOKMainLoop
.2196					_TOKIdentifier:
.2196	20 4c 22	jsr $224c			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2199	b0 09		bcs $21a4			bcs 	_TOKFail
.219b	80 a9		bra $2146			bra 	_TOKMainLoop
.219d					_TOKExit:
.219d	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.219f	20 a6 21	jsr $21a6			jsr 	TOKWriteA
.21a2	18		clc				clc									; return with carry set.
.21a3	60		rts				rts
.21a4					_TOKFail:
.21a4	38		sec				sec
.21a5	60		rts				rts
.21a6					TOKWriteA:
.21a6	da		phx				phx
.21a7	ae 00 04	ldx $0400			ldx 	TOKLineSize
.21aa	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.21ad	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.21b0	fa		plx				plx
.21b1	ee 00 04	inc $0400			inc 	TOKLineSize
.21b4	60		rts				rts
.21b5					TOKGet:
.21b5	18		clc				clc
.21b6	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.21b9					TOKGetNext:
.21b9	38		sec				sec
.21ba	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.21bd					TOKFindToken:
.21bd	a2 b2		ldx #$b2			ldx 	#StandardTokens & $FF 		; do this table
.21bf	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.21c1	20 d9 21	jsr $21d9			jsr 	TOKFindTokenXY 				; find it, or not
.21c4	b0 0d		bcs $21d3			bcs 	_TOKFound1
.21c6	a2 33		ldx #$33			ldx 	#AlternateTokens & $FF 		; do the alternate table
.21c8	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.21ca	20 d9 21	jsr $21d9			jsr 	TOKFindTokenXY 				; find it, or not
.21cd	90 08		bcc $21d7			bcc 	_TOKFTFail 					; not ....
.21cf	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.21d1	38		sec				sec
.21d2	60		rts				rts
.21d3					_TOKFound1:
.21d3	a2 00		ldx #$00			ldx 	#0
.21d5	38		sec				sec
.21d6	60		rts				rts
.21d7					_TOKFTFail
.21d7	18		clc				clc
.21d8	60		rts				rts
.21d9					TOKFindTokenXY:
.21d9	86 24		stx $24				stx 	zTemp0 						; save token table address
.21db	84 25		sty $25				sty 	zTemp0+1
.21dd	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.21df	8d 1f 06	sta $061f			sta 	TOKCurrent
.21e2					_TOKFindLoop:
.21e2	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.21e4	18		clc				clc 		 						; clear carry in case of fail
.21e5	30 17		bmi $21fe			bmi 	_TOKExit 					; end of table, fail, so return CC.
.21e7	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.21ea	d0 13		bne $21ff			bne 	_TOKNext 					; different, try next.
.21ec	aa		tax				tax 								; number of chars to compare.
.21ed	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.21ef					_TOKCompare:
.21ef	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.21f1	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.21f4	d0 09		bne $21ff			bne 	_TOKNext 					; different ? try next
.21f6	c8		iny				iny 								; compare next two
.21f7	ca		dex				dex
.21f8	d0 f5		bne $21ef			bne 	_TOKCompare 				; until done X characters.
.21fa	38		sec				sec
.21fb	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.21fe					_TOKExit:
.21fe	60		rts				rts
.21ff					_TOKNext:
.21ff	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.2202	38		sec				sec 								; add length+1 to ptr
.2203	b2 24		lda ($24)			lda 	(zTemp0)
.2205	65 24		adc $24				adc 	zTemp0
.2207	85 24		sta $24				sta 	zTemp0
.2209	90 d7		bcc $21e2			bcc 	_TOKFindLoop
.220b	e6 25		inc $25				inc 	zTemp0+1
.220d	80 d3		bra $21e2			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.220f					TOKTokeniseHexadecimal:
.220f	20 b9 21	jsr $21b9			jsr 	TOKGetNext 					; consume the $
.2212	a2 08		ldx #$08			ldx 	#IFR0
.2214	20 f5 32	jsr $32f5			jsr 	IFloatSetZero 				; set R0 = 0
.2217					_TTHLoop:
.2217	20 b5 21	jsr $21b5			jsr 	TOKGet 						; keep getting and copying while numeric.
.221a	20 df 23	jsr $23df			jsr 	TOKIsHexadecimal
.221d	90 23		bcc $2242			bcc 	_TTHDone
.221f	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.2221	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.2224	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.2227	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.222a	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.222d	20 b9 21	jsr $21b9			jsr 	TOKGetNext
.2230	20 a3 23	jsr $23a3			jsr 	TOKToUpper 					; make U/C
.2233	38		sec				sec 								; convert to decimal.
.2234	e9 30		sbc #$30			sbc 	#48
.2236	c9 0a		cmp #$0a			cmp 	#10
.2238	90 02		bcc $223c			bcc 	_TTHNotAlpha
.223a	e9 07		sbc #$07			sbc 	#7
.223c					_TTHNotAlpha:
.223c	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.223e	85 08		sta $08				sta 	IFR0+IM0
.2240	80 d5		bra $2217			bra 	_TTHLoop
.2242					_TTHDone:
.2242	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.2244	20 a6 21	jsr $21a6			jsr 	TOKWriteA
.2247	20 e8 20	jsr $20e8			jsr 	TOKTokeniseConstant 		; write integer out.
.224a	18		clc				clc
.224b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.224c					TOKTokeniseIdentifier:
.224c	20 d5 20	jsr $20d5			jsr 	TOKResetElement 			; extract an identifier
.224f					_TOKGetIdentifier:
.224f	20 b5 21	jsr $21b5			jsr 	TOKGet
.2252	20 a3 23	jsr $23a3			jsr 	TOKToUpper
.2255	20 c5 23	jsr $23c5			jsr 	TOKIsIdentifierElement
.2258	90 08		bcc $2262			bcc 	_TOKEndIdent
.225a	20 d9 20	jsr $20d9			jsr		TOKWriteElement
.225d	20 b9 21	jsr $21b9			jsr 	TOKGetNext
.2260	80 ed		bra $224f			bra 	_TOKGetIdentifier
.2262					_TOKEndIdent:
.2262	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.2264	d0 06		bne $226c			bne 	_TOKNotString
.2266	20 d9 20	jsr $20d9			jsr 	TOKWriteElement 			; add it
.2269	20 b9 21	jsr $21b9			jsr 	TOKGetNext 					; consume it
.226c					_TOKNotString:
.226c	20 b5 21	jsr $21b5			jsr 	TOKGet 						; finally check for (
.226f	c9 28		cmp #$28			cmp 	#"("
.2271	d0 06		bne $2279			bne 	_TOKNoArray
.2273	20 d9 20	jsr $20d9			jsr 	TOKWriteElement 			; add it
.2276	20 b9 21	jsr $21b9			jsr 	TOKGetNext 					; consume it
.2279					_TOKNoArray:
.2279	20 bd 21	jsr $21bd			jsr 	TOKFindToken 				; find it
.227c	90 18		bcc $2296			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.227e	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2280	f0 0f		beq $2291			beq 	_TOKComment 				; yes, do comment code.
.2282	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.2284	d0 06		bne $228c			bne 	_TOKNoShift
.2286	48		pha				pha 								; write the shift.
.2287	8a		txa				txa
.2288	20 a6 21	jsr $21a6			jsr 	TOKWriteA
.228b	68		pla				pla
.228c					_TOKNoShift:
.228c	20 a6 21	jsr $21a6			jsr 	TOKWriteA 					; write the main token.
.228f	18		clc				clc
.2290	60		rts				rts
.2291					_TOKComment:
.2291	20 d6 22	jsr $22d6			jsr 	TOKDoComment
.2294	18		clc				clc
.2295	60		rts				rts
.2296					_TOKIsVariable:
.2296	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2298					_TOKOutputBuffer:
.2298	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.229b	20 c4 22	jsr $22c4			jsr 	TOKTranslateIdentifier
.229e	20 a6 21	jsr $21a6			jsr 	TOKWriteA
.22a1	e8		inx				inx
.22a2	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.22a5	20 c5 23	jsr $23c5			jsr 	TOKIsIdentifierElement
.22a8	b0 ee		bcs $2298			bcs 	_TOKOutputBuffer
.22aa	a8		tay				tay 								; last char in Y
.22ab	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.22ad	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.22af	f0 0e		beq $22bf			beq 	_TOKIVExit
.22b1	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.22b3	d0 04		bne $22b9			bne 	_TOKIVCheckArray 			; no, check for (
.22b5	1a		inc a				inc 	a 							; token is $7D
.22b6	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.22b9					_TOKIVCheckArray:
.22b9	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.22bb	d0 02		bne $22bf			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.22bd	1a		inc a				inc 	a
.22be	1a		inc a				inc 	a
.22bf					_TOKIVExit:
.22bf	20 a6 21	jsr $21a6			jsr 	TOKWriteA 					; ending token
.22c2	18		clc				clc
.22c3	60		rts				rts
.22c4					TOKTranslateIdentifier:
.22c4	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.22c6	f0 0b		beq $22d3			beq 	_TTI64
.22c8	38		sec				sec
.22c9	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.22cb	10 03		bpl $22d0			bpl 	_TTIExit
.22cd	18		clc				clc 								; map 09 onto 26-35
.22ce	69 2b		adc #$2b			adc 	#"A"-"0"+26
.22d0					_TTIExit:
.22d0	09 40		ora #$40			ora 	#$40 						; correct range.
.22d2	60		rts				rts
.22d3	a9 64		lda #$64	_TTI64:	lda 	#$64
.22d5	60		rts				rts
.22d6					TOKDoComment:
.22d6	20 a6 21	jsr $21a6			jsr 	TOKWriteA					; output the token.
.22d9					_TOKSkipSpaces:
.22d9	20 b5 21	jsr $21b5			jsr 	TOKGet 						; skip over spaces
.22dc	c9 20		cmp #$20			cmp 	#' '
.22de	d0 05		bne $22e5			bne 	_TOKEndSpaces
.22e0	20 b9 21	jsr $21b9			jsr 	TOKGetNext
.22e3	80 f4		bra $22d9			bra 	_TOKSkipSpaces
.22e5					_TOKEndSpaces:
.22e5	48		pha				pha 								; save it
.22e6	68		pla				pla
.22e7	f0 04		beq $22ed			beq 	_TOKDCExit 					; end of line.
.22e9	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.22eb	d0 01		bne $22ee			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.22ed					_TOKDCExit:
.22ed	60		rts				rts
.22ee					_TOKDCDoLine:
.22ee	20 d5 20	jsr $20d5			jsr 	TOKResetElement 			; start getting the string
.22f1					_TOKDCLoop:
.22f1	20 b5 21	jsr $21b5			jsr 	TOKGet 						; check EOL
.22f4	c9 00		cmp #$00			cmp 	#0
.22f6	f0 08		beq $2300			beq 	_TOKDCEndComment
.22f8	20 b9 21	jsr $21b9			jsr 	TOKGetNext 					; get and consume
.22fb	20 d9 20	jsr $20d9			jsr 	TOKWriteElement
.22fe	80 f1		bra $22f1			bra 	_TOKDCLoop
.2300					_TOKDCEndComment:
.2300	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2302	20 a6 21	jsr $21a6			jsr 	TOKWriteA
.2305	20 1a 21	jsr $211a			jsr 	TOKOutputElementBuffer
.2308	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2309					TOKTokeniseInteger:
.2309	20 32 23	jsr $2332			jsr 	TOKExtractInteger 			; pull an integer out as text.
.230c	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.230e	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2310	ad 1c 05	lda $051c			lda		TOKElement
.2313	20 59 31	jsr $3159			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2316	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.2319	f0 12		beq $232d			beq 	_TOKNotLineNumber
.231b	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.231d	d0 0c		bne $232b			bne 	_TOKBadLineNumeber
.231f	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2321	8d 01 04	sta $0401			sta 	TOKLineNumber
.2324	a5 09		lda $09				lda 	IFR0+IM1
.2326	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2329	18		clc				clc
.232a	60		rts				rts
.232b					_TOKBadLineNumeber:
.232b	38		sec				sec
.232c	60		rts				rts
.232d					_TOKNotLineNumber:
.232d	20 e8 20	jsr $20e8			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2330	18		clc				clc
.2331	60		rts				rts
.2332					TOKExtractInteger:
.2332	20 d5 20	jsr $20d5			jsr 	TOKResetElement 			; restart
.2335					_TTILoop:
.2335	20 b5 21	jsr $21b5			jsr 	TOKGet 						; keep getting and copying while numeric.
.2338	20 b9 23	jsr $23b9			jsr 	TOKIsDigit
.233b	90 08		bcc $2345			bcc 	_TOKEIExit
.233d	20 d9 20	jsr $20d9			jsr 	TOKWriteElement
.2340	20 b9 21	jsr $21b9			jsr 	TOKGetNext
.2343	80 f0		bra $2335			bra 	_TTILoop
.2345					_TOKEIExit:
.2345	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2346					TOKTokenisePunctuation:
.2346	20 d5 20	jsr $20d5			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2349	20 b9 21	jsr $21b9			jsr 	TOKGetNext
.234c	20 d9 20	jsr $20d9			jsr 	TOKWriteElement
.234f	20 b5 21	jsr $21b5			jsr 	TOKGet 						; what follows ?
.2352	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2354	f0 10		beq $2366			beq 	_TTPOne
.2356	20 c9 23	jsr $23c9			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2359	b0 0b		bcs $2366			bcs 	_TTPOne 					; these speed things up a bit.
.235b	20 d9 20	jsr $20d9			jsr 	TOKWriteElement 			; this is what we will search for.
.235e	20 bd 21	jsr $21bd			jsr 	TOKFindToken
.2361	b0 0a		bcs $236d			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2363	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.2366					_TTPOne:
.2366	20 bd 21	jsr $21bd			jsr 	TOKFindToken 				; look for one character punctuation
.2369	b0 07		bcs $2372			bcs 	_TTPOutputExit 				; we found it
.236b	38		sec				sec 								; not recognised.
.236c	60		rts				rts
.236d					_TTPConsumeExit:
.236d	48		pha				pha
.236e	20 b9 21	jsr $21b9			jsr 	TOKGetNext 					; get the 2nd char out.
.2371	68		pla				pla
.2372					_TTPOutputExit:
.2372	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.2374	f0 05		beq $237b			beq 	_TTPComment
.2376	20 a6 21	jsr $21a6			jsr  	TOKWriteA 					; write token out
.2379	18		clc				clc
.237a	60		rts				rts
.237b					_TTPComment:
.237b	20 d6 22	jsr $22d6			jsr 	TOKDoComment
.237e	18		clc				clc
.237f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2380					TOKTokeniseString:
.2380	20 b9 21	jsr $21b9			jsr 	TOKGetNext 					; consume the "
.2383	20 d5 20	jsr $20d5			jsr 	TOKResetElement 			; start getting the string
.2386					_TOKTSLoop:
.2386	20 b5 21	jsr $21b5			jsr 	TOKGet 						; check EOL
.2389	c9 00		cmp #$00			cmp 	#0
.238b	f0 0c		beq $2399			beq 	_TOKTSExit
.238d	20 b9 21	jsr $21b9			jsr 	TOKGetNext 					; get and consume
.2390	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2392	f0 05		beq $2399			beq 	_TOKTSExit
.2394	20 d9 20	jsr $20d9			jsr 	TOKWriteElement
.2397	80 ed		bra $2386			bra 	_TOKTSLoop
.2399					_TOKTSExit:
.2399	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.239b	20 a6 21	jsr $21a6			jsr 	TOKWriteA
.239e	20 1a 21	jsr $211a			jsr 	TOKOutputElementBuffer
.23a1	18		clc				clc
.23a2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.23a3					TOKToUpper:
.23a3	c9 61		cmp #$61			cmp 	#"a"
.23a5	90 06		bcc $23ad			bcc 	_TTUNotLower
.23a7	c9 7b		cmp #$7b			cmp 	#"z"+1
.23a9	b0 02		bcs $23ad			bcs 	_TTUNotLower
.23ab	49 20		eor #$20			eor 	#$20
.23ad					_TTUNotLower:
.23ad	60		rts				rts
.23ae					TOKToLower:
.23ae	c9 41		cmp #$41			cmp 	#"A"
.23b0	90 06		bcc $23b8			bcc 	_TTUNotUpper
.23b2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.23b4	b0 02		bcs $23b8			bcs 	_TTUNotUpper
.23b6	49 20		eor #$20			eor 	#$20
.23b8					_TTUNotUpper:
.23b8	60		rts				rts
.23b9					TOKIsDigit:
.23b9	c9 30		cmp #$30			cmp 	#"0"
.23bb	90 06		bcc $23c3			bcc 	TOKFail
.23bd	c9 3a		cmp #$3a			cmp 	#"9"+1
.23bf	b0 02		bcs $23c3			bcs 	TOKFail
.23c1					TOKSucceed:
.23c1	38		sec				sec
.23c2	60		rts				rts
.23c3					TOKFail:
.23c3	18		clc				clc
.23c4	60		rts				rts
.23c5					TOKIsIdentifierElement:
.23c5	c9 5f		cmp #$5f			cmp 	#"_"
.23c7	f0 f8		beq $23c1			beq 	TOKSucceed 					; else fall through to alphanumeric
.23c9					TOKIsAlphaNumeric:
.23c9	20 d2 23	jsr $23d2			jsr 	TOKIsAlpha
.23cc	b0 f3		bcs $23c1			bcs 	TOKSucceed
.23ce	20 b9 23	jsr $23b9			jsr 	TOKIsDigit
.23d1	60		rts				rts
.23d2					TOKIsAlpha:
.23d2	20 a3 23	jsr $23a3			jsr 	TOKToUpper
.23d5	c9 41		cmp #$41			cmp 	#"A"
.23d7	90 ea		bcc $23c3			bcc 	TOKFail
.23d9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.23db	b0 e6		bcs $23c3			bcs 	TOKFail
.23dd	80 e2		bra $23c1			bra 	TOKSucceed
.23df					TOKIsHexadecimal:
.23df	20 b9 23	jsr $23b9			jsr		TOKIsDigit
.23e2	b0 dd		bcs $23c1			bcs 	TOKSucceed
.23e4	20 d2 23	jsr $23d2			jsr 	TOKIsAlpha
.23e7	90 da		bcc $23c3			bcc 	TOKFail
.23e9	c9 47		cmp #$47			cmp 	#"F"+1
.23eb	b0 d6		bcs $23c3			bcs 	TOKFail
.23ed	80 d2		bra $23c1			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.23ef					Command_CALL:
.23ef	a9 42		lda #$42			lda 	#STK_CALL
.23f1	20 d0 28	jsr $28d0			jsr 	StackOpen
.23f4	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.23f6	29 c0		and #$c0			and 	#$C0
.23f8	c9 40		cmp #$40			cmp 	#$40
.23fa	d0 29		bne $2425			bne 	_CCSyntax
.23fc	20 38 2c	jsr $2c38			jsr 	VARGetInfo 					; get the information
.23ff	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 				; check right bracket follows.
.2402	20 ea 2b	jsr $2bea			jsr 	VARFind 					; exists ?
.2405	90 21		bcc $2428			bcc 	_CCUnknown
.2407	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.2409	85 24		sta $24				sta 	zTemp0
.240b	20 03 29	jsr $2903			jsr 	STKSaveCodePosition 		; save return address on stack.
.240e	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2410	b1 24		lda ($24),y			lda 	(zTemp0),y
.2412	c9 ff		cmp #$ff			cmp 	#$FF
.2414	d0 12		bne $2428			bne 	_CCUnknown
.2416	88		dey				dey 								; get Y offset to stack
.2417	b1 24		lda ($24),y			lda 	(zTemp0),y
.2419	48		pha				pha
.241a	88		dey				dey 								; get address
.241b	b1 24		lda ($24),y			lda 	(zTemp0),y
.241d	85 19		sta $19				sta 	codePtr+1
.241f	b2 24		lda ($24)			lda 	(zTemp0)
.2421	85 18		sta $18				sta 	codePtr
.2423	7a		ply				ply 								; restore Y
.2424	60		rts				rts
.2425					_CCSyntax:
.2425	4c ef 26	jmp $26ef		jmp	ErrorV_syntax
.2428					_CCUnknown:
.2428	4c 64 28	jmp $2864		jmp	ErrorV_unknown
.242b					Command_ENDPROC:
.242b	a9 42		lda #$42			lda 	#STK_CALL
.242d	20 fb 28	jsr $28fb			jsr 	StackCheckFrame
.2430	20 15 29	jsr $2915			jsr 	STKLoadCodePosition 		; return
.2433	20 ed 28	jsr $28ed			jsr 	StackClose
.2436	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2437					Command_DO:
.2437	a9 22		lda #$22			lda 	#STK_DO
.2439	20 d0 28	jsr $28d0			jsr 	StackOpen
.243c	20 03 29	jsr $2903			jsr 	STKSaveCodePosition 		; save loop position
.243f	60		rts				rts
.2440					Command_EXIT:
.2440	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2442	20 fb 28	jsr $28fb			jsr 	StackCheckFrame
.2445	20 ed 28	jsr $28ed			jsr 	StackClose 					; close it
.2448	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.244a	aa		tax				tax
.244b	20 ff 25	jsr $25ff			jsr 	ScanForward
.244e	60		rts				rts
.244f					Command_LOOP:
.244f	a9 22		lda #$22			lda 	#STK_DO
.2451	20 fb 28	jsr $28fb			jsr 	StackCheckFrame
.2454	20 15 29	jsr $2915			jsr 	STKLoadCodePosition 		; loop back
.2457	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2458					Command_FOR:
.2458	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.245a	20 d0 28	jsr $28d0			jsr 	StackOpen
.245d	20 b7 12	jsr $12b7			jsr 	CommandLET 					; do "I = 1" bit
.2460	5a		phy				phy 								; save variable address to +4,+5
.2461	a0 04		ldy #$04			ldy 	#4
.2463	a5 24		lda $24				lda 	zTemp0
.2465	91 2c		sta ($2c),y			sta 	(basicStack),y
.2467	c8		iny				iny
.2468	a5 25		lda $25				lda 	zTemp0+1
.246a	91 2c		sta ($2c),y			sta 	(basicStack),y
.246c	7a		ply				ply
.246d	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.246f	20 c7 28	jsr $28c7			jsr 	ERRCheckA
.2472	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2475	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2477	a2 08		ldx #$08			ldx 	#IFR0
.2479	20 ce 24	jsr $24ce			jsr 	CFSaveR0X
.247c	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.247e	c9 91		cmp #$91			cmp 	#PR_STEP
.2480	d0 06		bne $2488			bne 	_CFStep1
.2482	c8		iny				iny 								; consume step
.2483	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; evaluate STEP
.2486	80 24		bra $24ac			bra 	_CFWriteStep
.2488					_CFStep1:
.2488	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.248a	a9 01		lda #$01			lda 	#1
.248c	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.248f	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2490	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2492	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2494	85 24		sta $24				sta 	zTemp0
.2496	c8		iny				iny
.2497	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2499	85 25		sta $25				sta 	zTemp0+1
.249b	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.249d	b1 24		lda ($24),y			lda 	(zTemp0),y
.249f	d0 0a		bne $24ab			bne 	_CFNotOptimised
.24a1	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.24a3	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24a5	d0 04		bne $24ab			bne 	_CFNotOptimised
.24a7	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.24a9	85 0b		sta $0b				sta 	IFR0+IExp
.24ab					_CFNotOptimised:
.24ab	7a		ply				ply
.24ac					_CFWriteStep:
.24ac	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.24ae	a9 06		lda #$06			lda 	#6
.24b0	20 ce 24	jsr $24ce			jsr 	CFSaveR0X
.24b3	20 03 29	jsr $2903			jsr 	STKSaveCodePosition 		; save loop position
.24b6	60		rts				rts
.24b7					CFLoadR0X:
.24b7	5a		phy				phy
.24b8	a8		tay				tay
.24b9	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24bb	95 00		sta $00,x			sta 	IM0,x
.24bd	c8		iny				iny
.24be	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24c0	95 01		sta $01,x			sta 	IM1,x
.24c2	c8		iny				iny
.24c3	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24c5	95 02		sta $02,x			sta 	IM2,x
.24c7	c8		iny				iny
.24c8	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24ca	95 03		sta $03,x			sta 	IExp,x
.24cc	7a		ply				ply
.24cd	60		rts				rts
.24ce					CFSaveR0X:
.24ce	5a		phy				phy
.24cf	a8		tay				tay
.24d0	b5 00		lda $00,x			lda 	IM0,x
.24d2	91 2c		sta ($2c),y			sta 	(basicStack),y
.24d4	c8		iny				iny
.24d5	b5 01		lda $01,x			lda 	IM1,x
.24d7	91 2c		sta ($2c),y			sta 	(basicStack),y
.24d9	c8		iny				iny
.24da	b5 02		lda $02,x			lda 	IM2,x
.24dc	91 2c		sta ($2c),y			sta 	(basicStack),y
.24de	c8		iny				iny
.24df	b5 03		lda $03,x			lda 	IExp,x
.24e1	91 2c		sta ($2c),y			sta 	(basicStack),y
.24e3	7a		ply				ply
.24e4	60		rts				rts
.24e5					Command_NEXT:
.24e5	a9 37		lda #$37			lda 	#STK_FOR
.24e7	20 fb 28	jsr $28fb			jsr 	StackCheckFrame
.24ea	5a		phy				phy 								; check optimised loop
.24eb	a0 09		ldy #$09			ldy 	#9
.24ed	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24ef	7a		ply				ply
.24f0	0a		asl a				asl 	a
.24f1	b0 35		bcs $2528			bcs 	_CNOptimised
.24f3	20 60 25	jsr $2560			jsr 	_CNLoadValue 				; load index value to R0.
.24f6	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.24f8	a9 06		lda #$06			lda 	#6
.24fa	20 b7 24	jsr $24b7			jsr 	CFLoadR0X
.24fd	20 ed 2c	jsr $2ced			jsr 	IFloatAdd 					; add them together and write back.
.2500	20 83 25	jsr $2583			jsr 	_CNSaveValue
.2503	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2505	a2 0c		ldx #$0c			ldx 	#IFR1
.2507	20 b7 24	jsr $24b7			jsr 	CFLoadR0X
.250a	20 c4 2f	jsr $2fc4			jsr 	IFloatCompare 				; compare terminal vs current
.250d	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.250f	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero
.2512	f0 10		beq $2524			beq 	_CNLoopBack
.2514	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2516	5a		phy				phy
.2517	a0 09		ldy #$09			ldy 	#6+IExp
.2519	51 2c		eor ($2c),y			eor 	(basicStack),y
.251b	7a		ply				ply
.251c	29 40		and #$40			and 	#IFSign
.251e	f0 04		beq $2524			beq 	_CNLoopBack
.2520					_CNExitLoop:
.2520	20 ed 28	jsr $28ed			jsr 	StackClose		 			; return
.2523	60		rts				rts
.2524					_CNLoopBack:
.2524	20 15 29	jsr $2915			jsr 	STKLoadCodePosition 		; loop back
.2527	60		rts				rts
.2528					_CNOptimised:
.2528	5a		phy				phy
.2529	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.252b	b1 2c		lda ($2c),y			lda 	(basicStack),y
.252d	85 28		sta $28				sta 	zTemp2
.252f	c8		iny				iny
.2530	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2532	85 29		sta $29				sta 	zTemp2+1
.2534	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2536					_CNIncrement:
.2536	c8		iny				iny
.2537	b1 28		lda ($28),y			lda 	(zTemp2),y
.2539	1a		inc a				inc 	a
.253a	91 28		sta ($28),y			sta 	(zTemp2),y
.253c	f0 f8		beq $2536			beq 	_CNIncrement
.253e	18		clc				clc 								; point zTemp0 to terminal value
.253f	a5 2c		lda $2c				lda 	basicStack
.2541	69 0a		adc #$0a			adc 	#10
.2543	85 24		sta $24				sta 	zTemp0
.2545	a5 2d		lda $2d				lda 	basicStack+1
.2547	69 00		adc #$00			adc 	#0
.2549	85 25		sta $25				sta 	zTemp0+1
.254b	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.254d	18		clc				clc 								; borrow 1, we want > not >=
.254e	b2 28		lda ($28)			lda 	(zTemp2)
.2550	f2 24		sbc ($24)			sbc 	(zTemp0)
.2552	b1 28		lda ($28),y			lda 	(zTemp2),y
.2554	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.2556	c8		iny				iny
.2557	b1 28		lda ($28),y			lda 	(zTemp2),y
.2559	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.255b	7a		ply				ply
.255c	b0 c2		bcs $2520			bcs 	_CNExitLoop
.255e	80 c4		bra $2524			bra 	_CNLoopBack
.2560					_CNLoadValue:
.2560	5a		phy				phy
.2561	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2563	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2565	85 28		sta $28				sta 	zTemp2
.2567	c8		iny				iny
.2568	b1 2c		lda ($2c),y			lda 	(basicStack),y
.256a	85 29		sta $29				sta 	zTemp2+1
.256c	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.256e	b1 28		lda ($28),y			lda 	(zTemp2),y
.2570	85 08		sta $08				sta 	IFR0+IM0
.2572	c8		iny				iny
.2573	b1 28		lda ($28),y			lda 	(zTemp2),y
.2575	85 09		sta $09				sta 	IFR0+IM1
.2577	c8		iny				iny
.2578	b1 28		lda ($28),y			lda 	(zTemp2),y
.257a	85 0a		sta $0a				sta 	IFR0+IM2
.257c	c8		iny				iny
.257d	b1 28		lda ($28),y			lda 	(zTemp2),y
.257f	85 0b		sta $0b				sta 	IFR0+IExp
.2581	7a		ply				ply
.2582	60		rts				rts
.2583					_CNSaveValue:
.2583	5a		phy				phy
.2584	a0 00		ldy #$00			ldy 	#0
.2586	a5 08		lda $08				lda 	IFR0+IM0
.2588	91 28		sta ($28),y			sta 	(zTemp2),y
.258a	c8		iny				iny
.258b	a5 09		lda $09				lda 	IFR0+IM1
.258d	91 28		sta ($28),y			sta 	(zTemp2),y
.258f	c8		iny				iny
.2590	a5 0a		lda $0a				lda 	IFR0+IM2
.2592	91 28		sta ($28),y			sta 	(zTemp2),y
.2594	c8		iny				iny
.2595	a5 0b		lda $0b				lda 	IFR0+IExp
.2597	91 28		sta ($28),y			sta 	(zTemp2),y
.2599	7a		ply				ply
.259a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.259b					Command_GOSUB:
.259b	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get line number
.259e	a9 52		lda #$52			lda 	#STK_GOSUB
.25a0	20 d0 28	jsr $28d0			jsr 	StackOpen
.25a3	20 03 29	jsr $2903			jsr 	STKSaveCodePosition 		; save return address on stack.
.25a6	4c d8 11	jmp $11d8			jmp 	GotoR0
.25a9					Command_RETURN:
.25a9	a9 52		lda #$52			lda 	#STK_GOSUB
.25ab	20 fb 28	jsr $28fb			jsr 	StackCheckFrame
.25ae	20 15 29	jsr $2915			jsr 	STKLoadCodePosition 		; return
.25b1	20 ed 28	jsr $28ed			jsr 	StackClose
.25b4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.25b5					IfCommand:
.25b5	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; Get the if test.
.25b8	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.25ba	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.25bc	d0 0c		bne $25ca			bne 	_IfStructured 				; we still support it.
.25be	c8		iny				iny 								; consume THEN
.25bf	a2 08		ldx #$08			ldx 	#IFR0
.25c1	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero 			; is it zero
.25c4	f0 01		beq $25c7			beq 	_IfFail 					; if fail, go to next line
.25c6	60		rts				rts 								; if THEN just continue
.25c7					_IfFail:
.25c7	4c cc 14	jmp $14cc			jmp 	RUNEndOfLine
.25ca					_IfStructured:
.25ca	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero 			; is it zero
.25cd	d0 07		bne $25d6			bne 	_IfExit 					; if not, then continue normally.
.25cf	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.25d1	a2 85		ldx #$85			ldx 	#PR_ENDIF
.25d3	20 ff 25	jsr $25ff			jsr 	ScanForward 				; and run from there
.25d6					_IfExit:
.25d6	60		rts				rts
.25d7					ElseCode:
.25d7	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.25d9	aa		tax				tax 								; so just go to the structure exit
.25da	20 ff 25	jsr $25ff			jsr 	ScanForward
.25dd	60		rts				rts
.25de					EndIf:
.25de	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.25df					Command_REPEAT:
.25df	a9 02		lda #$02			lda 	#STK_REPEAT
.25e1	20 d0 28	jsr $28d0			jsr 	StackOpen
.25e4	20 03 29	jsr $2903			jsr 	STKSaveCodePosition 		; save loop position
.25e7	60		rts				rts
.25e8					Command_UNTIL:
.25e8	a9 02		lda #$02			lda 	#STK_REPEAT
.25ea	20 fb 28	jsr $28fb			jsr 	StackCheckFrame
.25ed	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; work out the test
.25f0	a2 08		ldx #$08			ldx 	#IFR0
.25f2	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero 			; check if zero
.25f5	f0 04		beq $25fb			beq 	_CULoopBack 				; if so keep looping
.25f7	20 ed 28	jsr $28ed			jsr 	StackClose		 			; return
.25fa	60		rts				rts
.25fb					_CULoopBack:
.25fb	20 15 29	jsr $2915			jsr 	STKLoadCodePosition 		; loop back
.25fe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.25ff					ScanForward:
.25ff	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.2601	86 25		stx $25				stx 	zTemp0+1
.2603	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.2605					_ScanForwardLoop:
.2605	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2607	d0 0a		bne $2613			bne 	_ScanNoCheck
.2609	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.260b	c5 24		cmp $24				cmp 	zTemp0
.260d	f0 49		beq $2658			beq 	_ScanExit
.260f	c5 25		cmp $25				cmp 	zTemp0+1
.2611	f0 45		beq $2658			beq 	_ScanExit
.2613					_ScanNoCheck:
.2613	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2615	c8		iny				iny
.2616	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2618	f0 37		beq $2651			beq		_ScanDataItem
.261a	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.261c	f0 33		beq $2651			beq 	_ScanDataItem
.261e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2620	f0 1b		beq $263d			beq 	_ScanNextLine
.2622	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2624	d0 01		bne $2627			bne 	_ScanNoShift
.2626	c8		iny				iny
.2627					_ScanNoShift:
.2627	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2629	b0 da		bcs $2605			bcs 	_ScanForwardLoop
.262b	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.262d	90 d6		bcc $2605			bcc 	_ScanForwardLoop
.262f	aa		tax				tax 								; access the table to get the adjustment.
.2630	18		clc				clc
.2631	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.2633	7d 26 1b	adc $1b26,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2636	85 26		sta $26				sta 	zTemp1
.2638	10 cb		bpl $2605			bpl		_ScanForwardLoop 			; error if -ve ?
.263a	4c 7b 27	jmp $277b		jmp	ErrorV_structure
.263d					_ScanNextLine:
.263d	18		clc				clc	 								; forward to next line.
.263e	b2 18		lda ($18)			lda 	(codePtr)
.2640	65 18		adc $18				adc 	codePtr
.2642	85 18		sta $18				sta 	codePtr
.2644	90 02		bcc $2648			bcc 	_ScanNoCarry
.2646	e6 19		inc $19				inc 	codePtr+1
.2648					_ScanNoCarry:
.2648	a0 03		ldy #$03			ldy 	#3
.264a	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.264c	d0 b7		bne $2605			bne 	_ScanForwardLoop
.264e	4c 7b 27	jmp $277b		jmp	ErrorV_structure
.2651					_ScanDataItem:
.2651	98		tya				tya
.2652	38		sec				sec
.2653	71 18		adc ($18),y			adc 	(codePtr),y
.2655	a8		tay				tay
.2656	80 ad		bra $2605			bra 	_ScanForwardLoop
.2658					_ScanExit:
.2658	c8		iny				iny 								; consume final token.
.2659	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.265a					ScanProcedures:
.265a	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.265c	48		pha				pha
.265d	a5 19		lda $19				lda 	codePtr+1
.265f	48		pha				pha
.2660	5a		phy				phy
.2661	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.2664	85 19		sta $19				sta 	codePtr+1
.2666	64 18		stz $18				stz 	codePtr
.2668					_SPLoop:
.2668	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.266a	f0 18		beq $2684			beq 	_SPExit
.266c	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.266e	b1 18		lda ($18),y			lda 	(codePtr),y
.2670	c9 88		cmp #$88			cmp 	#PR_PROC
.2672	d0 03		bne $2677			bne 	_SPNext
.2674	20 8c 26	jsr $268c			jsr 	_SPSetupRecord
.2677					_SPNext:
.2677	18		clc				clc 								; forward to next
.2678	b2 18		lda ($18)			lda 	(codePtr)
.267a	65 18		adc $18				adc 	codePtr
.267c	85 18		sta $18				sta 	codePtr
.267e	90 e8		bcc $2668			bcc 	_SPLoop
.2680	e6 19		inc $19				inc 	codePtr+1
.2682	80 e4		bra $2668			bra 	_SPLoop
.2684					_SPExit:
.2684	7a		ply				ply
.2685	68		pla				pla
.2686	85 19		sta $19				sta 	codePtr+1
.2688	68		pla				pla
.2689	85 18		sta $18				sta 	codePtr
.268b	60		rts				rts
.268c					_SPSetupRecord:
.268c	c8		iny				iny 								; check identifier follows
.268d	b1 18		lda ($18),y			lda 	(codePtr),y
.268f	29 c0		and #$c0			and 	#$C0
.2691	c9 40		cmp #$40			cmp 	#$40
.2693	d0 27		bne $26bc			bne 	_SPSyntax
.2695	20 38 2c	jsr $2c38			jsr 	VARGetInfo 					; get the information
.2698	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen 				; check right bracket follows.
.269b	20 ea 2b	jsr $2bea			jsr 	VARFind 					; already exists ?
.269e	b0 1f		bcs $26bf			bcs 	_SPUsed 					; error !
.26a0	20 96 2b	jsr $2b96			jsr 	VARCreate 					; create, XA points to the data.
.26a3	85 24		sta $24				sta 	zTemp0
.26a5	86 25		stx $25				stx 	zTemp0+1
.26a7	5a		phy				phy 								; save Y pos on stack
.26a8	a0 01		ldy #$01			ldy 	#1
.26aa	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.26ac	92 24		sta ($24)			sta 	(zTemp0)
.26ae	a5 19		lda $19				lda 	codePtr+1
.26b0	91 24		sta ($24),y			sta 	(zTemp0),y
.26b2	c8		iny				iny
.26b3	68		pla				pla
.26b4	91 24		sta ($24),y			sta 	(zTemp0),y
.26b6	c8		iny				iny
.26b7	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.26b9	91 24		sta ($24),y			sta 	(zTemp0),y
.26bb	60		rts				rts
.26bc					_SPSyntax:
.26bc	4c ef 26	jmp $26ef		jmp	ErrorV_syntax
.26bf					_SPUsed:
.26bf	4c 46 28	jmp $2846		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.26c2					Command_WHILE:
.26c2	5a		phy				phy 								; save position of the test
.26c3	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; work out the while test.
.26c6	a2 08		ldx #$08			ldx 	#IFR0
.26c8	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero 			; check if zero
.26cb	f0 0e		beq $26db			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.26cd	98		tya				tya 								; position *after* test.
.26ce	7a		ply				ply 								; restore position before test, at WHILE
.26cf	88		dey				dey 								; so we execute the WHILE command again.
.26d0	48		pha				pha 								; push after test on the stack
.26d1	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.26d3	20 d0 28	jsr $28d0			jsr 	StackOpen
.26d6	20 03 29	jsr $2903			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.26d9	7a		ply				ply 								; restore the position *after* the test
.26da	60		rts				rts
.26db					_WHExitLoop:
.26db	68		pla				pla 								; throw post loop position
.26dc	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.26de	aa		tax				tax
.26df	20 ff 25	jsr $25ff			jsr 	ScanForward
.26e2	60		rts				rts
.26e3					Command_WEND:
.26e3	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.26e5	20 fb 28	jsr $28fb			jsr 	StackCheckFrame
.26e8	20 15 29	jsr $2915			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.26eb	20 ed 28	jsr $28ed			jsr 	StackClose		 			; erase the frame
.26ee	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.26ef					ErrorV_syntax:
.26ef	20 86 2a	jsr $2a86		jsr	ErrorHandler
>26f2	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>26fa	45 72 72 6f 72 00
.2700					ErrorV_range:
.2700	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2703	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>270b	52 61 6e 67 65 00
.2711					ErrorV_value:
.2711	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2714	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>271c	75 65 00
.271f					ErrorV_type:
.271f	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2722	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>272a	73 6d 61 74 63 68 00
.2731					ErrorV_unimplemented:
.2731	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2734	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>273c	6c 65 6d 65 6e 74 65 64 00
.2745					ErrorV_assert:
.2745	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2748	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2750	46 61 69 6c 00
.2755					ErrorV_internal:
.2755	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2758	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2760	6c 20 45 72 72 6f 72 00
.2768					ErrorV_divzero:
.2768	20 86 2a	jsr $2a86		jsr	ErrorHandler
>276b	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2773	42 79 20 5a 65 72 6f 00
.277b					ErrorV_structure:
.277b	20 86 2a	jsr $2a86		jsr	ErrorHandler
>277e	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2786	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2793					ErrorV_stop:
.2793	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2796	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>279e	20 53 74 6f 70 70 65 64 00
.27a7					ErrorV_data:
.27a7	20 86 2a	jsr $2a86		jsr	ErrorHandler
>27aa	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>27b2	44 61 74 61 00
.27b7					ErrorV_redefine:
.27b7	20 86 2a	jsr $2a86		jsr	ErrorHandler
>27ba	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>27c2	65 64 65 66 69 6e 65 64 00
.27cb					ErrorV_index:
.27cb	20 86 2a	jsr $2a86		jsr	ErrorHandler
>27ce	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>27d6	61 79 20 49 6e 64 65 78 00
.27df					ErrorV_memory:
.27df	20 86 2a	jsr $2a86		jsr	ErrorHandler
>27e2	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>27ea	4d 65 6d 6f 72 79 00
.27f1					ErrorV_uninitialised:
.27f1	20 86 2a	jsr $2a86		jsr	ErrorHandler
>27f4	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>27fc	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.280c					ErrorV_string:
.280c	20 86 2a	jsr $2a86		jsr	ErrorHandler
>280f	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2817	69 6e 67 20 4c 65 6e 67 74 68 00
.2822					ErrorV_variable:
.2822	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2825	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>282d	65 20 4d 69 73 73 69 6e 67 00
.2837					ErrorV_stack:
.2837	20 86 2a	jsr $2a86		jsr	ErrorHandler
>283a	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2842	75 6c 6c 00
.2846					ErrorV_dupproc:
.2846	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2849	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2851	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2861	65 64 00
.2864					ErrorV_unknown:
.2864	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2867	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>286f	20 50 72 6f 63 65 64 75 72 65 00
.287a					ErrorV_break:
.287a	20 86 2a	jsr $2a86		jsr	ErrorHandler
>287d	05 42 72 65 61 6b 00			.text	5,"Break",0
.2884					ErrorV_line:
.2884	20 86 2a	jsr $2a86		jsr	ErrorHandler
>2887	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>288f	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.289c					ErrorV_fnf:
.289c	20 86 2a	jsr $2a86		jsr	ErrorHandler
>289f	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>28a7	74 20 46 6f 75 6e 64 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.28af					ERRCheckLParen:
.28af	b1 18		lda ($18),y			lda 	(codePtr),y
.28b1	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.28b3	d0 18		bne $28cd			bne 	ERRSyntaxError
.28b5	c8		iny				iny
.28b6	60		rts				rts
.28b7					ERRCheckRParen:
.28b7	b1 18		lda ($18),y			lda 	(codePtr),y
.28b9	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.28bb	d0 10		bne $28cd			bne 	ERRSyntaxError
.28bd	c8		iny				iny
.28be	60		rts				rts
.28bf					ERRCheckComma:
.28bf	b1 18		lda ($18),y			lda 	(codePtr),y
.28c1	c9 99		cmp #$99			cmp 	#PR_COMMA
.28c3	d0 08		bne $28cd			bne 	ERRSyntaxError
.28c5	c8		iny				iny
.28c6	60		rts				rts
.28c7					ERRCheckA:
.28c7	d1 18		cmp ($18),y			cmp 	(codePtr),y
.28c9	d0 02		bne $28cd			bne 	ERRSyntaxError
.28cb	c8		iny				iny
.28cc	60		rts				rts
.28cd					ERRSyntaxError:
.28cd	4c ef 26	jmp $26ef		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.28d0					StackOpen:
.28d0	48		pha				pha 								; save frame byte
.28d1	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.28d3	0a		asl a				asl 	a 							; claim twice this for storage
.28d4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.28d6	38		sec				sec 								; so basically subtracting from
.28d7	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.28d9	85 2c		sta $2c				sta 	basicStack
.28db	b0 09		bcs $28e6			bcs 	_SONoBorrow
.28dd	c6 2d		dec $2d				dec 	basicStack+1
.28df	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.28e1	cd 20 06	cmp $0620			cmp 	basicStackEnd
.28e4	f0 04		beq $28ea			beq 	_SOMemory
.28e6					_SONoBorrow:
.28e6	68		pla				pla 								; get marker back and write at TOS
.28e7	92 2c		sta ($2c)			sta 	(basicStack)
.28e9	60		rts				rts
.28ea					_SOMemory:
.28ea	4c 37 28	jmp $2837		jmp	ErrorV_stack
.28ed					StackClose:
.28ed	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.28ef	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.28f1	0a		asl a				asl 	a 							; claim twice this.
.28f2	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.28f4	85 2c		sta $2c				sta 	basicStack
.28f6	90 02		bcc $28fa			bcc 	_SCExit
.28f8	e6 2d		inc $2d				inc 	basicStack+1
.28fa					_SCExit:
.28fa	60		rts				rts
.28fb					StackCheckFrame:
.28fb	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.28fd	d0 01		bne $2900			bne 	_SCFError 					; different, we have structures mixed up
.28ff	60		rts				rts
.2900					_SCFError:
.2900	4c 7b 27	jmp $277b		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2903					STKSaveCodePosition:
.2903	5a		phy				phy
.2904	98		tya				tya 								; save Y at offset 1.
.2905	a0 01		ldy #$01			ldy 	#1
.2907	91 2c		sta ($2c),y			sta 	(basicStack),y
.2909	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.290b	c8		iny				iny
.290c	91 2c		sta ($2c),y			sta 	(basicStack),y
.290e	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2910	c8		iny				iny
.2911	91 2c		sta ($2c),y			sta 	(basicStack),y
.2913	7a		ply				ply
.2914	60		rts				rts
.2915					STKLoadCodePosition:
.2915	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2917	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2919	85 19		sta $19				sta 	codePtr+1
.291b	88		dey				dey
.291c	b1 2c		lda ($2c),y			lda 	(basicStack),y
.291e	85 18		sta $18				sta 	codePtr
.2920	88		dey				dey
.2921	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.2923	a8		tay				tay
.2924	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2925					StackReset:
.2925	48		pha				pha 								; save top of memory
.2926	3a		dec a				dec 	a  							; end of stack = previous byte
.2927	85 2d		sta $2d				sta 	basicStack+1
.2929	a9 ff		lda #$ff			lda 	#$FF
.292b	85 2c		sta $2c				sta 	basicStack
.292d	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.292f	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2931	68		pla				pla 								; allocate pages for stack.
.2932	38		sec				sec
.2933	e9 02		sbc #$02			sbc 	#STACKPAGES
.2935	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2938	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2939					StringConcrete:
.2939	5a		phy				phy 								; save position on stack
.293a	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.293c	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.293e	b0 41		bcs $2981			bcs 	_SALengthError
.2940	18		clc				clc 								; length of the new string
.2941	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2943	90 02		bcc $2947			bcc 	_SAHaveLength
.2945	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2947					_SAHaveLength:
.2947	48		pha				pha 								; save length to be allocated for concreting.
.2948	38		sec				sec
.2949	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.294b	6d 22 06	adc $0622			adc 	stringMemory
.294e	8d 22 06	sta $0622			sta 	stringMemory
.2951	85 28		sta $28				sta 	zTemp2 						; update storage address
.2953	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2955	6d 23 06	adc $0623			adc 	stringMemory+1
.2958	8d 23 06	sta $0623			sta 	stringMemory+1
.295b	85 29		sta $29				sta 	zTemp2+1
.295d	68		pla				pla 								; save length allocated in +0
.295e	92 28		sta ($28)			sta 	(zTemp2)
.2960	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2962	a0 01		ldy #$01			ldy 	#1
.2964	91 28		sta ($28),y			sta 	(zTemp2),y
.2966					_SACopyNewString:
.2966	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2968	a0 02		ldy #$02			ldy 	#2
.296a	91 28		sta ($28),y			sta 	(zTemp2),y
.296c	aa		tax				tax 								; bytes to copy
.296d	f0 0c		beq $297b			beq 	_SACopyExit
.296f	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2971					_SACopyNSLoop:
.2971	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2973	c8		iny				iny 								; write two on in string storage
.2974	c8		iny				iny
.2975	91 28		sta ($28),y			sta 	(zTemp2),y
.2977	88		dey				dey
.2978	ca		dex				dex									; until copied all the string lengths.
.2979	d0 f6		bne $2971			bne 	_SACopyNSLoop
.297b					_SACopyExit:
.297b	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.297d	a5 28		lda $28				lda 	zTemp2
.297f	7a		ply				ply
.2980	60		rts				rts
.2981					_SALengthError:
.2981	4c 0c 28	jmp $280c		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2984					StringSystemInitialise:
.2984	3a		dec a				dec 	a 							; make last byte of previous page.
.2985	8d 23 06	sta $0623			sta 	stringMemory+1
.2988	85 25		sta $25				sta 	zTemp0+1
.298a	a9 ff		lda #$ff			lda 	#$FF
.298c	8d 22 06	sta $0622			sta 	stringMemory
.298f	85 24		sta $24				sta 	zTemp0
.2991	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2993	92 24		sta ($24)			sta 	(zTemp0)
.2995	60		rts				rts
.2996					StringSpaceInitialise:
.2996	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2998	8d 21 06	sta $0621			sta 	stringInitialised
.299b	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.299e	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.29a1	ad 23 06	lda $0623			lda 	stringMemory+1
.29a4	3a		dec a				dec 	a
.29a5	8d 25 06	sta $0625			sta 	stringTempPointer+1
.29a8	20 82 10	jsr $1082			jsr 	ClearCheckMemory
.29ab	60		rts				rts
.29ac					StringTempAllocate:
.29ac	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.29ae	b0 2e		bcs $29de			bcs 	_STALength
.29b0	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.29b3	30 05		bmi $29ba			bmi 	_STAAllocate
.29b5	48		pha				pha 								; save value to subtract.
.29b6	20 96 29	jsr $2996			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.29b9	68		pla				pla 								; restore it
.29ba					_STAAllocate:
.29ba	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.29bc	18		clc				clc  								; deliberate allows one more
.29bd	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.29c0	8d 24 06	sta $0624			sta 	stringTempPointer
.29c3	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.29c5	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.29c7	ad 25 06	lda $0625			lda 	stringTempPointer+1
.29ca	69 ff		adc #$ff			adc 	#$FF
.29cc	8d 25 06	sta $0625			sta 	stringTempPointer+1
.29cf	85 2f		sta $2f				sta 	zsTemp+1
.29d1	85 09		sta $09				sta 	IFR0+IM1
.29d3	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.29d5	a9 80		lda #$80			lda 	#$80
.29d7	85 0b		sta $0b				sta 	IFR0+IExp
.29d9	a9 00		lda #$00			lda 	#0 							; clear the target string
.29db	92 2e		sta ($2e)			sta 	(zsTemp)
.29dd	60		rts				rts
.29de					_STALength:
.29de	4c 0c 28	jmp $280c		jmp	ErrorV_string
.29e1					StringTempWrite:
.29e1	5a		phy				phy
.29e2	48		pha				pha
.29e3	b2 2e		lda ($2e)			lda 	(zsTemp)
.29e5	1a		inc a				inc 	a
.29e6	92 2e		sta ($2e)			sta 	(zsTemp)
.29e8	a8		tay				tay
.29e9	68		pla				pla
.29ea	91 2e		sta ($2e),y			sta 	(zsTemp),y
.29ec	7a		ply				ply
.29ed	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.29ee					Command_DIR:
.29ee	5a		phy				phy
.29ef	38		sec				sec 								; reset read
.29f0	20 cd ff	jsr $ffcd			jsr 	OSReadDirectory
.29f3	18		clc		_CDLoop:clc
.29f4	20 cd ff	jsr $ffcd			jsr 	OSReadDirectory 			; read next
.29f7	b0 1e		bcs $2a17			bcs 	_CDExit 					; no more
.29f9	86 24		stx $24				stx 	zTemp0
.29fb	84 25		sty $25				sty 	zTemp0+1
.29fd	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2a00	a9 20		lda #$20			lda 	#32
.2a02	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2a05	a0 11		ldy #$11			ldy 	#17
.2a07	b1 24		lda ($24),y			lda 	(zTemp0),y
.2a09	aa		tax				tax
.2a0a	88		dey				dey
.2a0b	b1 24		lda ($24),y			lda 	(zTemp0),y
.2a0d	20 af 2a	jsr $2aaf			jsr 	WriteIntXA
.2a10	a9 0d		lda #$0d			lda 	#13
.2a12	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2a15	80 dc		bra $29f3			bra 	_CDLoop
.2a17	7a		ply		_CDExit:ply
.2a18	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2a19					Command_ERASE:
.2a19	20 2b 2a	jsr $2a2b			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2a1c	5a		phy				phy
.2a1d	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2a1f	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2a21	20 d0 ff	jsr $ffd0			jsr 	OSDeleteFile
.2a24	7a		ply				ply
.2a25	b0 01		bcs $2a28			bcs 	_CEFail
.2a27	60		rts				rts
.2a28					_CEFail:
.2a28	4c 9c 28	jmp $289c		jmp	ErrorV_fnf
.2a2b					FileSetupBlock:
.2a2b	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.2a2e	a5 24		lda $24				lda 	zTemp0 							; address to name
.2a30	8d 26 06	sta $0626			sta 	FSBBlock
.2a33	a5 25		lda $25				lda 	zTemp0+1
.2a35	8d 27 06	sta $0627			sta 	FSBBlock+1 						; zero the rest.
.2a38	9c 28 06	stz $0628			stz 	FSBBlock+2
.2a3b	9c 29 06	stz $0629			stz 	FSBBlock+3
.2a3e	9c 2a 06	stz $062a			stz 	FSBBlock+4
.2a41	9c 2b 06	stz $062b			stz 	FSBBlock+5
.2a44	60		rts				rts
.0626					FSBBlock:
>0626							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2a45					Command_LOAD:
.2a45	20 2b 2a	jsr $2a2b			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2a48	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; set load address
.2a4b	8d 29 06	sta $0629			sta 	FSBBlock+3
.2a4e	9c 28 06	stz $0628			stz 	FSBBlock+2
.2a51	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2a53	48		pha				pha
.2a54	20 71 2a	jsr $2a71			jsr	 	FileCheckSecondParam
.2a57	5a		phy				phy
.2a58	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2a5a	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2a5c	20 d3 ff	jsr $ffd3			jsr 	OSReadFile
.2a5f	7a		ply				ply
.2a60	b0 0c		bcs $2a6e			bcs 	_CLFail
.2a62	68		pla				pla 								; load program
.2a63	c9 99		cmp #$99			cmp 	#PR_COMMA
.2a65	f0 06		beq $2a6d			beq 	_CLNoClear
.2a67	20 3c 10	jsr $103c			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2a6a	4c ce 2a	jmp $2ace			jmp 	WarmStart 					; and warm start
.2a6d					_CLNoClear:
.2a6d	60		rts				rts
.2a6e					_CLFail:
.2a6e	4c 9c 28	jmp $289c		jmp	ErrorV_fnf
.2a71					FileCheckSecondParam:
.2a71	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2a73	c9 99		cmp #$99			cmp 	#PR_COMMA
.2a75	d0 0e		bne $2a85			bne 	_FCSPExit
.2a77	c8		iny				iny 								; consume
.2a78	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get address
.2a7b	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2a7d	8d 28 06	sta $0628			sta 	FSBBlock+2
.2a80	a5 09		lda $09				lda 	IFR0+IM1
.2a82	8d 29 06	sta $0629			sta 	FSBBlock+3
.2a85					_FCSPExit:
.2a85	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2a86					ErrorHandler:
.2a86	fa		plx				plx 								; get address of msg
.2a87	7a		ply				ply
.2a88	e8		inx				inx 								; bump past RTS
.2a89	d0 01		bne $2a8c			bne 	_EHNoInc
.2a8b	c8		iny				iny
.2a8c					_EHNoInc:
.2a8c	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2a8f	ad 2c 06	lda $062c			lda 	ERRLine 					; direct command ?
.2a92	0d 2d 06	ora $062d			ora 	ERRLine+1
.2a95	f0 10		beq $2aa7			beq 	_EHNoNumber
.2a97	a2 aa		ldx #$aa			ldx 	#_EHAtMsg & $FF
.2a99	a0 2a		ldy #$2a			ldy 	#_EHAtMsg >> 8
.2a9b	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2a9e	ad 2c 06	lda $062c			lda 	ERRLine 					; line number -> XA
.2aa1	ae 2d 06	ldx $062d			ldx 	ERRLine+1
.2aa4	20 af 2a	jsr $2aaf			jsr 	WriteIntXA
.2aa7					_EHNoNumber:
.2aa7	4c d8 2a	jmp $2ad8			jmp 	WarmStartNewLine
.2aaa					_EHAtMsg:
>2aaa	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2aaf					_EHAtMsg1:
.2aaf					WriteIntXA:
.2aaf	da		phx				phx
.2ab0	48		pha				pha
.2ab1	a2 08		ldx #$08			ldx 	#IFR0
.2ab3	20 44 32	jsr $3244			jsr 	IFloatPushRx
.2ab6	68		pla				pla
.2ab7	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.2aba	68		pla				pla
.2abb	85 09		sta $09				sta 	IFR0+IM1
.2abd	a9 0a		lda #$0a			lda 	#10 						; decimal
.2abf	20 97 30	jsr $3097			jsr 	IFloatIntegerToStringR0	 	; convert
.2ac2	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2ac5	a2 08		ldx #$08			ldx 	#IFR0
.2ac7	20 65 32	jsr $3265			jsr 	IFloatPullRx
.2aca	60		rts				rts
.2acb					NotImplemented:
.2acb	4c 31 27	jmp $2731		jmp	ErrorV_unimplemented
.062c					ERRLine:
>062c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2ace					WarmStart:
.2ace	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2ad0	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2ad3	a9 6b		lda #$6b			lda 	#"k"
.2ad5	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2ad8					WarmStartNewLine:
.2ad8	a9 0d		lda #$0d			lda 	#13
.2ada	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2add					WarmStartNoPrompt:
.2add	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2adf	9a		txs				txs
.2ae0	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2ae3	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2ae4	d0 01		bne $2ae7			bne 	_WSSkip
.2ae6	c8		iny				iny
.2ae7					_WSSkip:
.2ae7	86 28		stx $28				stx 	zTemp2 						; save address
.2ae9	84 29		sty $29				sty 	zTemp2+1
.2aeb	b2 28		lda ($28)			lda 	(zTemp2)
.2aed	f0 ee		beq $2add			beq 	WarmStartNoPrompt 			; ignore empty line.
.2aef	a2 21		ldx #$21			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2af1	a0 2b		ldy #$2b			ldy 	#TOKGetCharacter >> 8
.2af3	38		sec				sec
.2af4	20 30 21	jsr $2130			jsr 	TOKTokenise
.2af7	b0 25		bcs $2b1e			bcs 	_WSSyntax
.2af9	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2afc	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2aff	d0 0b		bne $2b0c			bne 	_WSLineEdit
.2b01	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2b03	85 18		sta $18				sta 	codePtr
.2b05	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2b07	85 19		sta $19				sta 	codePtr+1
.2b09	4c d7 14	jmp $14d7			jmp 	RUNNewLine
.2b0c					_WSLineEdit:
.2b0c	20 0b 20	jsr $200b			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2b0f	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2b12	c9 04		cmp #$04			cmp 	#4
.2b14	f0 03		beq $2b19			beq 	_WSNoInsert
.2b16	20 55 20	jsr $2055			jsr 	PGMInsertLine				; if not, maybe insert
.2b19					_WSNoInsert:
.2b19	20 3c 10	jsr $103c			jsr 	ClearCode 					; clear variables etc.
.2b1c	80 bf		bra $2add			bra 	WarmStartNoPrompt
.2b1e					_WSSyntax:
.2b1e	4c ef 26	jmp $26ef		jmp	ErrorV_syntax
.2b21					TOKGetCharacter:
.2b21	b2 28		lda ($28)			lda 	(zTemp2)
.2b23	90 06		bcc $2b2b			bcc 	_GSNoIncrement
.2b25	e6 28		inc $28				inc 	zTemp2
.2b27	d0 02		bne $2b2b			bne 	_GSNoIncrement
.2b29	e6 29		inc $29				inc 	zTemp2+1
.2b2b					_GSNoIncrement:
.2b2b	c9 00		cmp #$00			cmp 	#0
.2b2d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2b2e					VARArrayLookup:
.2b2e	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2b30	86 25		stx $25				stx 	zTemp0+1
.2b32	b2 24		lda ($24)			lda 	(zTemp0)
.2b34	48		pha				pha
.2b35	5a		phy				phy
.2b36	a0 01		ldy #$01			ldy 	#1
.2b38	b1 24		lda ($24),y			lda 	(zTemp0),y
.2b3a	7a		ply				ply
.2b3b	48		pha				pha
.2b3c	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2b3f	68		pla				pla 								; array address to zTemp0
.2b40	85 25		sta $25				sta 	zTemp0+1
.2b42	68		pla				pla
.2b43	85 24		sta $24				sta 	zTemp0
.2b45	5a		phy				phy 								; save codePtr position.
.2b46	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2b48	b1 24		lda ($24),y			lda 	(zTemp0),y
.2b4a	48		pha				pha 								; save bit 15 on stack.
.2b4b	29 7f		and #$7f			and 	#$7F
.2b4d	85 26		sta $26				sta 	zTemp1
.2b4f	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2b51	d2 24		cmp ($24)			cmp 	(zTemp0)
.2b53	a5 09		lda $09				lda 	IFR0+IM1
.2b55	e5 26		sbc $26				sbc 	zTemp1
.2b57	b0 3a		bcs $2b93			bcs 	_VALIndex
.2b59	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2b5b	c9 40		cmp #$40			cmp 	#$40
.2b5d	b0 34		bcs $2b93			bcs 	_VALIndex
.2b5f	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2b61	26 09		rol $09				rol 	IFR0+IM1
.2b63	fa		plx				plx 								; get msb of size -> X
.2b64	30 04		bmi $2b6a			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2b66	06 08		asl $08				asl 	IFR0+IM0
.2b68	26 09		rol $09				rol 	IFR0+IM1
.2b6a					_VARNotX4:
.2b6a	18		clc				clc 								; add the two for the size bytes
.2b6b	a5 08		lda $08				lda 	IFR0+IM0
.2b6d	69 02		adc #$02			adc 	#2
.2b6f	85 08		sta $08				sta 	IFR0+IM0
.2b71	90 02		bcc $2b75			bcc 	_VARNoCarry1
.2b73	e6 09		inc $09				inc 	IFR0+IM1
.2b75					_VARNoCarry1:
.2b75	18		clc				clc 								; calculate the element address and push to stack.
.2b76	a5 08		lda $08				lda 	IFR0+IM0
.2b78	65 24		adc $24				adc 	zTemp0
.2b7a	48		pha				pha
.2b7b	a5 09		lda $09				lda 	IFR0+IM1
.2b7d	65 25		adc $25				adc 	zTemp0+1
.2b7f	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2b81	30 04		bmi $2b87			bmi 	_VARHasSubLevel
.2b83	aa		tax				tax 								; address in XA
.2b84	68		pla				pla
.2b85	7a		ply				ply 								; restore Y and exit
.2b86	60		rts				rts
.2b87					_VARHasSubLevel:
.2b87	aa		tax				tax 								; get link address in XA
.2b88	68		pla				pla
.2b89	7a		ply				ply 								; restore code position.
.2b8a	48		pha				pha
.2b8b	20 bf 28	jsr $28bf			jsr 	ERRCheckComma 				; comma required.
.2b8e	68		pla				pla
.2b8f	20 2e 2b	jsr $2b2e			jsr 	VARArrayLookup 				; call it recursively
.2b92	60		rts				rts
.2b93					_VALIndex:
.2b93	4c cb 27	jmp $27cb		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2b96					VARCreate:
.2b96	5a		phy				phy
.2b97	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2b99	a2 00		ldx #$00			ldx 	#0
.2b9b	20 59 10	jsr $1059			jsr 	AllocateMemory
.2b9e	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2ba0	86 27		stx $27				stx 	zTemp1+1
.2ba2	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2ba4	ad 30 06	lda $0630			lda 	VARHash
.2ba7	91 26		sta ($26),y			sta 	(zTemp1),y
.2ba9	c8		iny				iny 								; put address of name into +3,+4
.2baa	ad 2e 06	lda $062e			lda 	VARNameAddress
.2bad	91 26		sta ($26),y			sta 	(zTemp1),y
.2baf	c8		iny				iny
.2bb0	ad 2f 06	lda $062f			lda 	VARNameAddress+1
.2bb3	91 26		sta ($26),y			sta 	(zTemp1),y
.2bb5	ad 31 06	lda $0631			lda 	VARType
.2bb8	29 01		and #$01			and 	#1
.2bba	f0 06		beq $2bc2			beq 	_CVNotString
.2bbc	a0 08		ldy #$08			ldy 	#5+3
.2bbe	a9 80		lda #$80			lda 	#$80
.2bc0	91 26		sta ($26),y			sta 	(zTemp1),y
.2bc2					_CVNotString:
.2bc2	ad 52 06	lda $0652			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2bc5	85 24		sta $24				sta 	zTemp0
.2bc7	ad 53 06	lda $0653			lda 	VARHashEntry+1
.2bca	85 25		sta $25				sta 	zTemp0+1
.2bcc	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2bce	b2 24		lda ($24)			lda 	(zTemp0)
.2bd0	92 26		sta ($26)			sta 	(zTemp1)
.2bd2	b1 24		lda ($24),y			lda 	(zTemp0),y
.2bd4	91 26		sta ($26),y			sta 	(zTemp1),y
.2bd6	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2bd8	92 24		sta ($24)			sta 	(zTemp0)
.2bda	a5 27		lda $27				lda 	zTemp1+1
.2bdc	91 24		sta ($24),y			sta 	(zTemp0),y
.2bde	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2be0	a6 27		ldx $27				ldx 	zTemp1+1
.2be2	18		clc				clc 								; add 5 to point to the data.
.2be3	69 05		adc #$05			adc 	#5
.2be5	90 01		bcc $2be8			bcc 	_VCNoCarry
.2be7	e8		inx				inx
.2be8					_VCNoCarry:
.2be8	7a		ply				ply
.2be9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2bea					VARFind:
.2bea	5a		phy				phy
.2beb	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2bed	b1 24		lda ($24),y			lda 	(zTemp0),y
.2bef	85 27		sta $27				sta 	zTemp1+1
.2bf1	f0 1c		beq $2c0f			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2bf3	b2 24		lda ($24)			lda 	(zTemp0)
.2bf5	85 26		sta $26				sta 	zTemp1
.2bf7					_VFLoop:
.2bf7	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2bf9	b1 26		lda ($26),y			lda 	(zTemp1),y
.2bfb	cd 30 06	cmp $0630			cmp 	VARHash
.2bfe	f0 12		beq $2c12			beq 	_VFHashesMatch 				; if so, check the name.
.2c00					_VFNext:
.2c00	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2c02	aa		tax				tax
.2c03	a0 01		ldy #$01			ldy 	#1
.2c05	b1 26		lda ($26),y			lda 	(zTemp1),y
.2c07	85 27		sta $27				sta 	zTemp1+1
.2c09	86 26		stx $26				stx 	zTemp1
.2c0b	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2c0d	d0 e8		bne $2bf7			bne 	_VFLoop
.2c0f					_VFExitFail:
.2c0f	7a		ply				ply
.2c10	18		clc				clc
.2c11	60		rts				rts
.2c12					_VFHashesMatch:
.2c12	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2c14	b1 26		lda ($26),y			lda 	(zTemp1),y
.2c16	85 28		sta $28				sta 	zTemp2
.2c18	c8		iny				iny
.2c19	b1 26		lda ($26),y			lda 	(zTemp1),y
.2c1b	85 29		sta $29				sta 	zTemp2+1
.2c1d	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2c1f					_VFNameCompLoop:
.2c1f	c8		iny				iny 								; char at a time
.2c20	b9 32 06	lda $0632,y			lda 	VARBuffer,y
.2c23	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2c25	d0 d9		bne $2c00			bne 	_VFNext						; next entry if different.
.2c27	c9 7c		cmp #$7c			cmp 	#$7C
.2c29	90 f4		bcc $2c1f			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2c2b	18		clc				clc
.2c2c	a5 26		lda $26				lda 	zTemp1
.2c2e	a6 27		ldx $27				ldx 	zTemp1+1
.2c30	69 05		adc #$05			adc 	#5
.2c32	90 01		bcc $2c35			bcc 	_VFNNoCarry
.2c34	e8		inx				inx
.2c35					_VFNNoCarry:
.2c35	7a		ply				ply
.2c36	38		sec				sec
.2c37	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2c38					VARGetInfo:
.2c38	98		tya				tya 								; calculate the address of the identifier start.
.2c39	18		clc				clc
.2c3a	65 18		adc $18				adc 	codePtr
.2c3c	8d 2e 06	sta $062e			sta 	VARNameAddress
.2c3f	a5 19		lda $19				lda 	codePtr+1
.2c41	69 00		adc #$00			adc 	#0
.2c43	8d 2f 06	sta $062f			sta 	VARNameAddress+1
.2c46	9c 30 06	stz $0630			stz 	VARHash
.2c49	a2 00		ldx #$00			ldx 	#0
.2c4b					_VARCopyName:
.2c4b	18		clc				clc 								; update the sum hash.
.2c4c	ad 30 06	lda $0630			lda 	VARHash
.2c4f	71 18		adc ($18),y			adc 	(codePtr),y
.2c51	8d 30 06	sta $0630			sta 	VARHash
.2c54	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2c56	c8		iny				iny
.2c57	9d 32 06	sta $0632,x			sta 	VARBuffer,x
.2c5a	e8		inx				inx
.2c5b	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2c5d	90 ec		bcc $2c4b			bcc 	_VARCopyName
.2c5f	8d 31 06	sta $0631			sta 	VARType 					; save type byte
.2c62	29 03		and #$03			and 	#3 							; type is 0-3
.2c64	0a		asl a				asl 	a
.2c65	0a		asl a				asl 	a
.2c66	85 24		sta $24				sta 	zTemp0
.2c68	ad 30 06	lda $0630			lda 	VARHash 					; force into range of hash entries per type.
.2c6b	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2c6d	65 24		adc $24				adc 	zTemp0 						; index of hash table
.2c6f	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2c70	69 54		adc #$54			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2c72	85 24		sta $24				sta 	zTemp0
.2c74	8d 52 06	sta $0652			sta 	VARHashEntry
.2c77	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2c79	69 00		adc #$00			adc 	#0
.2c7b	85 25		sta $25				sta 	zTemp0+1
.2c7d	8d 53 06	sta $0653			sta 	VARHashEntry+1
.2c80	60		rts				rts
.2c81					VARClearHashTables:
.2c81	a2 00		ldx #$00			ldx 	#0
.2c83					_VCHRLoop:
.2c83	a9 00		lda #$00			lda 	#0
.2c85	9d 54 06	sta $0654,x			sta 	VARHashTables,x
.2c88	e8		inx				inx
.2c89	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2c8b	d0 f6		bne $2c83			bne 	_VCHRLoop
.2c8d	60		rts				rts
.062e					VARNameAddress:
>062e							.fill 	2
.0630					VARHash:
>0630							.fill 	1
.0631					VARType:
>0631							.fill 	1
.0632					VARBuffer:
>0632							.fill 	32
.0652					VARHashEntry:
>0652							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0654					VARHashTables:
>0654							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2c8e					VARCheckSimple:
.2c8e	aa		tax				tax 								; save in X
.2c8f	b1 18		lda ($18),y			lda 	(codePtr),y
.2c91	c9 7c		cmp #$7c			cmp 	#$7C
.2c93	d0 15		bne $2caa			bne 	_VCSComplex
.2c95	c8		iny				iny 								; consume the second byte, the type.
.2c96	8a		txa				txa  								; character (40-7F) x 4
.2c97	0a		asl a				asl 	a
.2c98	0a		asl a				asl  	a
.2c99	18		clc				clc
.2c9a	69 74		adc #$74			adc 	#FastVariables & $FF
.2c9c	85 08		sta $08				sta 	IFR0+IM0
.2c9e	a9 06		lda #$06			lda 	#FastVariables >> 8
.2ca0	69 00		adc #$00			adc 	#0
.2ca2	85 09		sta $09				sta 	IFR0+IM1
.2ca4	64 0a		stz $0a				stz 	IFR0+IM2
.2ca6	64 0b		stz $0b				stz 	IFR0+IExp
.2ca8	38		sec				sec 								; it's a reference
.2ca9	60		rts				rts
.2caa					_VCSComplex:
.2caa	88		dey				dey	 								; extract information.
.2cab	20 38 2c	jsr $2c38			jsr 	VARGetInfo
.2cae	20 ea 2b	jsr $2bea			jsr 	VARFind 					; search for variable
.2cb1	b0 0a		bcs $2cbd			bcs 	_VCSHaveVariable
.2cb3	ad 31 06	lda $0631			lda 	VARType 					; error if arrays, cannot autocreate
.2cb6	29 02		and #$02			and 	#2
.2cb8	d0 25		bne $2cdf			bne 	_VCNoCreate
.2cba	20 96 2b	jsr $2b96			jsr 	VARCreate 					; create variable
.2cbd					_VCSHaveVariable:
.2cbd	48		pha				pha 								; save LSB on the stack
.2cbe	ad 31 06	lda $0631			lda 	VARType 					; get var type, and shift bit 1 into carry
.2cc1	6a		ror a				ror 	a
.2cc2	6a		ror a				ror 	a
.2cc3	68		pla				pla 								; restore LSB
.2cc4	90 08		bcc $2cce			bcc 	_VCSNotArray 				; skip if not an array
.2cc6	20 2e 2b	jsr $2b2e			jsr 	VARArrayLookup 				; look for subscripts.
.2cc9	48		pha				pha 								; check )
.2cca	20 b7 28	jsr $28b7			jsr 	ERRCheckRParen
.2ccd	68		pla				pla
.2cce					_VCSNotArray:
.2cce	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2cd0	85 08		sta $08				sta 	IFR0+IM0
.2cd2	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2cd4	ad 31 06	lda $0631			lda 	VARType 					; number/string bit into carry
.2cd7	6a		ror a				ror 	a
.2cd8	a9 00		lda #$00			lda 	#0
.2cda	6a		ror a				ror 	a 							; now $00 or $80
.2cdb	85 0b		sta $0b				sta 	IFR0+IExp
.2cdd	38		sec				sec 								; it's a reference
.2cde	60		rts				rts
.2cdf					_VCNoCreate:
.2cdf	4c f1 27	jmp $27f1		jmp	ErrorV_uninitialised
.0674					FastVariables:
>0674							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2ce2					IFInitialise:
.2ce2	9c e4 06	stz $06e4			stz 	IFStackIndex 				; reset the internal stack.
.2ce5	60		rts				rts
.2ce6					IFloatSubtract:
.2ce6	da		phx				phx
.2ce7	a2 08		ldx #$08			ldx 	#IFR0
.2ce9	20 00 33	jsr $3300			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2cec	fa		plx				plx
.2ced					IFloatAdd:
.2ced	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2cef	05 0b		ora $0b				ora 	IFR0+IExp
.2cf1	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2cf3	d0 4e		bne $2d43			bne 	_IFloatAddDecimals 			; floating point version.
.2cf5					_IFAddSubMantissa:
.2cf5	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2cf7	45 0b		eor $0b				eor 	IFR0+IExp
.2cf9	29 40		and #$40			and 	#IFSign
.2cfb	d0 21		bne $2d1e			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2cfd	18		clc				clc 								; do the actual addition
.2cfe	a5 08		lda $08				lda 	IFR0+IM0
.2d00	75 00		adc $00,x			adc 		IM0,x
.2d02	85 08		sta $08				sta 	IFR0+IM0
.2d04	a5 09		lda $09				lda 	IFR0+IM1
.2d06	75 01		adc $01,x			adc 		IM1,x
.2d08	85 09		sta $09				sta 	IFR0+IM1
.2d0a	a5 0a		lda $0a				lda 	IFR0+IM2
.2d0c	75 02		adc $02,x			adc 		IM2,x
.2d0e	85 0a		sta $0a				sta 	IFR0+IM2
.2d10	10 29		bpl $2d3b			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2d12	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2d14	20 24 33	jsr $3324			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2d17	20 4e 33	jsr $334e			jsr 	IFloatIncExponent
.2d1a	d0 1f		bne $2d3b			bne 	_IFloatAddExit
.2d1c	38		sec				sec 								; overflowed numerically.
.2d1d	60		rts				rts
.2d1e					_IFloatSubMantissa:
.2d1e	38		sec				sec 								; do the subtraction R0-Rx
.2d1f	a5 08		lda $08				lda 	IFR0+IM0
.2d21	f5 00		sbc $00,x			sbc 		IM0,x
.2d23	85 08		sta $08				sta 	IFR0+IM0
.2d25	a5 09		lda $09				lda 	IFR0+IM1
.2d27	f5 01		sbc $01,x			sbc 		IM1,x
.2d29	85 09		sta $09				sta 	IFR0+IM1
.2d2b	a5 0a		lda $0a				lda 	IFR0+IM2
.2d2d	f5 02		sbc $02,x			sbc 		IM2,x
.2d2f	85 0a		sta $0a				sta 	IFR0+IM2
.2d31	b0 08		bcs $2d3b			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2d33	a2 08		ldx #$08			ldx 	#IFR0
.2d35	20 08 33	jsr $3308			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2d38	20 00 33	jsr $3300			jsr 	IFloatNegate 				; negate the result using sign bit.
.2d3b					_IFloatAddExit:
.2d3b	18		clc				clc
.2d3c	60		rts				rts
.2d3d					_IFloatZeroAdd:
.2d3d	fa		plx				plx 								; return this value in R0
.2d3e	20 86 32	jsr $3286			jsr 	IFloatCopyFromRegister
.2d41	18		clc				clc
.2d42	60		rts				rts
.2d43					_IFloatAddDecimals:
.2d43	20 ee 32	jsr $32ee			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2d46	f0 f3		beq $2d3b			beq 	_IFloatAddExit
.2d48	20 2c 33	jsr $332c			jsr 	IFloatNormalise 			; normalise RX
.2d4b	da		phx				phx 								; normalise R0
.2d4c	a2 08		ldx #$08			ldx 	#IFR0
.2d4e	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero
.2d51	f0 ea		beq $2d3d			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2d53	20 2c 33	jsr $332c			jsr 	IFloatNormalise
.2d56	fa		plx				plx
.2d57	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2d59	29 3f		and #$3f			and 	#IFXMask
.2d5b	38		sec				sec
.2d5c	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2d5e	85 20		sta $20				sta 	iTemp0
.2d60	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2d62	29 3f		and #$3f			and 	#IFXMask
.2d64	38		sec				sec
.2d65	e9 20		sbc #$20			sbc 	#$20
.2d67	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2d69	b0 02		bcs $2d6d			bcs 	_IFloatHaveLarger
.2d6b	a5 20		lda $20				lda 	iTemp0
.2d6d					_IFloatHaveLarger:
.2d6d	18		clc				clc 								; get the actual one back.
.2d6e	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2d70	20 7d 2d	jsr $2d7d			jsr 	_IFShiftXToA
.2d73	da		phx				phx
.2d74	a2 08		ldx #$08			ldx 	#IFR0
.2d76	20 7d 2d	jsr $2d7d			jsr 	_IFShiftXToA
.2d79	fa		plx				plx
.2d7a	4c f5 2c	jmp $2cf5			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2d7d					_IFShiftXToA:
.2d7d	8d dc 06	sta $06dc			sta 	IFTarget
.2d80	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero 			; check adding zero ?
.2d83	f0 11		beq $2d96			beq 	_IFSXExit
.2d85					_IFSXLoop:
.2d85	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2d87	29 3f		and #$3f			and 	#IFXMask
.2d89	cd dc 06	cmp $06dc			cmp 	IFTarget
.2d8c	f0 08		beq $2d96			beq 	_IFSXExit
.2d8e	20 24 33	jsr $3324			jsr 	IFloatShiftRight
.2d91	20 4e 33	jsr $334e			jsr 	IFloatIncExponent
.2d94	80 ef		bra $2d85			bra 	_IFSXLoop
.2d96					_IFSXExit:
.2d96	60		rts				rts
.06dc					IFTarget:
>06dc							.fill 	1
.2d97					IFloatMultiply:
.2d97	8e dc 06	stx $06dc			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2d9a	20 4f 2e	jsr $2e4f			jsr 	IFCalculateNewSign
.2d9d	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2d9f	05 0b		ora $0b				ora 	IFR0+IExp
.2da1	29 3f		and #$3f			and 	#IFXMask
.2da3	15 01		ora $01,x			ora 	IM1,x
.2da5	05 09		ora $09				ora 	IFR0+IM1
.2da7	15 02		ora $02,x			ora 	IM2,x
.2da9	05 0a		ora $0a				ora 	IFR0+IM2
.2dab	d0 0a		bne $2db7			bne 	_IFMStandard
.2dad	20 d1 32	jsr $32d1			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2db0	ad de 06	lda $06de			lda 	IFNewSign
.2db3	85 0b		sta $0b				sta 	IFR0+IExp
.2db5	18		clc				clc
.2db6	60		rts				rts
.2db7					_IFMStandard:
.2db7	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2db9	20 46 2e	jsr $2e46			jsr 	IFMSignExtend
.2dbc	8d dd 06	sta $06dd			sta 	IFNewExponent
.2dbf	a5 0b		lda $0b				lda 	IFR0+IExp
.2dc1	20 46 2e	jsr $2e46			jsr 	IFMSignExtend
.2dc4	18		clc				clc
.2dc5	6d dd 06	adc $06dd			adc 	IFNewExponent
.2dc8	8d dd 06	sta $06dd			sta 	IFNewExponent
.2dcb	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2dcd	20 97 32	jsr $3297			jsr 	IFloatCopyToRegister
.2dd0	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2dd2	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.2dd5					_IFMLoop:
.2dd5	a2 14		ldx #$14			ldx 	#IFRTemp
.2dd7	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero
.2dda	f0 3a		beq $2e16			beq 	_IFMExit
.2ddc	ae dc 06	ldx $06dc			ldx 	IFTarget 					; look at adder MSB
.2ddf	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2de1	10 03		bpl $2de6			bpl	 	_IFMTargetOkay
.2de3	20 37 2e	jsr $2e37			jsr 	_IFMShiftAll
.2de6					_IFMTargetOkay:
.2de6	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2de8	29 01		and #$01			and 	#1
.2dea	f0 16		beq $2e02			beq 	_IFMNoAdd
.2dec	ae dc 06	ldx $06dc			ldx 	IFTarget 					; add adder
.2def	18		clc				clc
.2df0	a5 08		lda $08				lda 	IFR0+IM0
.2df2	75 00		adc $00,x			adc 		IM0,x
.2df4	85 08		sta $08				sta 	IFR0+IM0
.2df6	a5 09		lda $09				lda 	IFR0+IM1
.2df8	75 01		adc $01,x			adc 		IM1,x
.2dfa	85 09		sta $09				sta 	IFR0+IM1
.2dfc	a5 0a		lda $0a				lda 	IFR0+IM2
.2dfe	75 02		adc $02,x			adc 		IM2,x
.2e00	85 0a		sta $0a				sta 	IFR0+IM2
.2e02					_IFMNoAdd:
.2e02	a5 0a		lda $0a				lda 	IFR0+IM2
.2e04	10 03		bpl $2e09			bpl 	_IFMResultOkay
.2e06	20 37 2e	jsr $2e37			jsr 	_IFMShiftAll
.2e09					_IFMResultOkay:
.2e09	a2 14		ldx #$14			ldx 	#IFRTemp
.2e0b	20 24 33	jsr $3324			jsr 	IFloatShiftRight
.2e0e	ae dc 06	ldx $06dc			ldx 	IFTarget
.2e11	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.2e14	80 bf		bra $2dd5			bra 	_IFMLoop
.2e16					_IFMExit:
.2e16	ad dd 06	lda $06dd			lda 	IFNewExponent 				; validate new exponent.
.2e19	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2e1b	90 0f		bcc $2e2c			bcc 	_IFMOkay
.2e1d	c9 e0		cmp #$e0			cmp 	#$E0
.2e1f	b0 0b		bcs $2e2c			bcs 	_IFMOkay
.2e21	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2e23	f0 10		beq $2e35			beq 	_IFMError
.2e25	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2e27	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.2e2a	18		clc				clc
.2e2b	60		rts				rts
.2e2c					_IFMOkay:
.2e2c	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2e2e	0d de 06	ora $06de			ora 	IFNewSign
.2e31	85 0b		sta $0b				sta 	IFR0+IExp
.2e33	18		clc				clc
.2e34	60		rts				rts
.2e35					_IFMError:
.2e35	38		sec				sec
.2e36	60		rts				rts
.2e37					_IFMShiftAll:
.2e37	a2 08		ldx #$08			ldx 	#IFR0
.2e39	20 24 33	jsr $3324			jsr 	IFloatShiftRight
.2e3c	ae dc 06	ldx $06dc			ldx 	IFTarget
.2e3f	20 24 33	jsr $3324			jsr 	IFloatShiftRight
.2e42	ee dd 06	inc $06dd			inc 	IFNewExponent
.2e45	60		rts				rts
.2e46					IFMSignExtend:
.2e46	29 3f		and #$3f			and 	#IFXMask
.2e48	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2e4a	90 02		bcc $2e4e			bcc 	_IFMNoSXX
.2e4c	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2e4e					_IFMNoSXX:
.2e4e	60		rts				rts
.2e4f					IFCalculateNewSign:
.2e4f	b5 03		lda $03,x			lda 	IExp,x
.2e51	45 0b		eor $0b				eor 	IFR0+IExp
.2e53	29 40		and #$40			and 	#IFSign
.2e55	8d de 06	sta $06de			sta 	IFNewSign
.2e58	60		rts				rts
.06dd					IFNewExponent:
>06dd							.fill 	1
.06de					IFNewSign:
>06de							.fill 	1
.2e59					IFloatDivideInteger:
.2e59	20 72 2e	jsr $2e72			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2e5c	b0 06		bcs $2e64			bcs 	_IFDIExit
.2e5e	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2e60	20 86 32	jsr $3286			jsr 	IFloatCopyFromRegister
.2e63	18		clc				clc
.2e64					_IFDIExit:
.2e64	60		rts				rts
.2e65					IFloatModulusInteger:
.2e65	20 72 2e	jsr $2e72			jsr 	IFloatDivideIntegerCommon
.2e68	b0 07		bcs $2e71			bcs 	_IFMIExit
.2e6a	ae dc 06	ldx $06dc			ldx 	IFTarget
.2e6d	20 86 32	jsr $3286			jsr 	IFloatCopyFromRegister
.2e70	18		clc				clc
.2e71					_IFMIExit:
.2e71	60		rts				rts
.2e72					IFloatDivideIntegerCommon:
.2e72	8e dc 06	stx $06dc			stx 	IFTarget  					; this is s1, s0 = R0
.2e75	20 4f 2e	jsr $2e4f			jsr 	IFCalculateNewSign 			; calculate sign of result
.2e78	20 a0 2e	jsr $2ea0			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2e7b	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2e7d	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero
.2e80	f0 1c		beq $2e9e			beq 	_IFDIDivZero
.2e82	ae dc 06	ldx $06dc			ldx 	IFTarget 					; zero Rx (S1)
.2e85	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.2e88	5a		phy				phy
.2e89	a0 18		ldy #$18			ldy 	#24
.2e8b					_IFDILoop:
.2e8b	20 b1 2e	jsr $2eb1			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2e8e	20 bd 2e	jsr $2ebd			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2e91	88		dey				dey
.2e92	d0 f7		bne $2e8b			bne 	_IFDILoop 					; do it 24 times
.2e94	7a		ply				ply
.2e95	ad de 06	lda $06de			lda 	IFNewSign 					; set sign of result.
.2e98	29 40		and #$40			and 	#IFSign
.2e9a	85 17		sta $17				sta 	IFRTemp+IExp
.2e9c	18		clc				clc 								; is okay.
.2e9d	60		rts				rts
.2e9e					_IFDIDivZero:
.2e9e	38		sec				sec
.2e9f	60		rts				rts
.2ea0					IFDCopyRXToRTemp:
.2ea0	b5 00		lda $00,x			lda 	IM0,x
.2ea2	85 14		sta $14				sta 	IFRTemp+IM0
.2ea4	b5 01		lda $01,x			lda 	IM1,x
.2ea6	85 15		sta $15				sta 	IFRTemp+IM1
.2ea8	b5 02		lda $02,x			lda 	IM2,x
.2eaa	85 16		sta $16				sta 	IFRTemp+IM2
.2eac	b5 03		lda $03,x			lda 	IExp,x
.2eae	85 17		sta $17				sta 	IFRTemp+IExp
.2eb0	60		rts				rts
.2eb1					IFDShiftSTempS1Left:
.2eb1	a2 14		ldx #$14			ldx 	#IFRTemp
.2eb3	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft
.2eb6	ae dc 06	ldx $06dc			ldx 	IFTarget
.2eb9	20 1d 33	jsr $331d			jsr 	IFloatRotateLeft
.2ebc	60		rts				rts
.2ebd					IFDTrySubtract:
.2ebd	ae dc 06	ldx $06dc			ldx 	IFTarget 					; s1 = Rx
.2ec0	38		sec				sec 								; subtract, saving the results on the stack.
.2ec1	b5 00		lda $00,x			lda 	IM0,x
.2ec3	e5 08		sbc $08				sbc 	IFR0+IM0
.2ec5	48		pha				pha
.2ec6	b5 01		lda $01,x			lda 	IM1,x
.2ec8	e5 09		sbc $09				sbc 	IFR0+IM1
.2eca	48		pha				pha
.2ecb	b5 02		lda $02,x			lda 	IM2,x
.2ecd	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2ecf	b0 03		bcs $2ed4			bcs 	_IFDCanSubtract
.2ed1	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2ed2	68		pla				pla
.2ed3	60		rts				rts
.2ed4					_IFDCanSubtract:
.2ed4	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2ed6	68		pla				pla
.2ed7	95 01		sta $01,x			sta 	IM1,x
.2ed9	68		pla				pla
.2eda	95 00		sta $00,x			sta 	IM0,x
.2edc	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2ede	d0 06		bne $2ee6			bne 	_IFDCSExit
.2ee0	e6 15		inc $15				inc 	IFRTemp+IM1
.2ee2	d0 02		bne $2ee6			bne 	_IFDCSExit
.2ee4	e6 16		inc $16				inc 	IFRTemp+IM2
.2ee6					_IFDCSExit:
.2ee6	60		rts				rts
.2ee7					IFloatBitwiseAnd:
.2ee7	5a		phy				phy
.2ee8	20 2c 2f	jsr $2f2c			jsr 	IFPreProcessBitwise 		; set up everything.
.2eeb	d0 0f		bne $2efc			bne 	_IFBAExit
.2eed					_IFBALoop:
.2eed	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2ef0	35 00		and $00,x			and 	IM0,x
.2ef2	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2ef5	e8		inx				inx
.2ef6	c8		iny				iny
.2ef7	c0 03		cpy #$03			cpy 	#3
.2ef9	d0 f2		bne $2eed			bne 	_IFBALoop
.2efb	18		clc				clc
.2efc					_IFBAExit:
.2efc	7a		ply				ply
.2efd	60		rts				rts
.2efe					IFloatBitwiseOr:
.2efe	5a		phy				phy
.2eff	20 2c 2f	jsr $2f2c			jsr 	IFPreProcessBitwise 		; set up everything.
.2f02	d0 0f		bne $2f13			bne 	_IFBAExit
.2f04					_IFBALoop:
.2f04	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2f07	15 00		ora $00,x			ora 	IM0,x
.2f09	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2f0c	e8		inx				inx
.2f0d	c8		iny				iny
.2f0e	c0 03		cpy #$03			cpy 	#3
.2f10	d0 f2		bne $2f04			bne 	_IFBALoop
.2f12	18		clc				clc
.2f13					_IFBAExit:
.2f13	7a		ply				ply
.2f14	60		rts				rts
.2f15					IFloatBitwiseXor:
.2f15	5a		phy				phy
.2f16	20 2c 2f	jsr $2f2c			jsr 	IFPreProcessBitwise 		; set up everything.
.2f19	d0 0f		bne $2f2a			bne 	_IFBAExit
.2f1b					_IFBALoop:
.2f1b	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2f1e	55 00		eor $00,x			eor 	IM0,x
.2f20	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2f23	e8		inx				inx
.2f24	c8		iny				iny
.2f25	c0 03		cpy #$03			cpy 	#3
.2f27	d0 f2		bne $2f1b			bne 	_IFBALoop
.2f29	18		clc				clc
.2f2a					_IFBAExit:
.2f2a	7a		ply				ply
.2f2b	60		rts				rts
.2f2c					IFPreProcessBitwise:
.2f2c	a0 00		ldy #$00			ldy 	#0 							; set index.
.2f2e	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2f30	15 03		ora $03,x			ora 	IExp,x
.2f32	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2f34	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2f36	38		sec				sec 								; carry set just in cases.
.2f37	60		rts				rts
.2f38					IFloatAbsoluteR0:
.2f38	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2f3a	29 bf		and #$bf			and 	#IFSign ^ 255
.2f3c	85 0b		sta $0b				sta 	IFR0+IExp
.2f3e	18		clc				clc
.2f3f	60		rts				rts
.2f40					IFloatSquareRootR0:
.2f40	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2f42	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero
.2f45	f0 2e		beq $2f75			beq 	_IFSRZero
.2f47	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2f49	29 40		and #$40			and 	#IFSign
.2f4b	d0 2f		bne $2f7c			bne 	_IFSRFail
.2f4d	20 2c 33	jsr $332c			jsr 	IFloatNormalise 			; it will work better !
.2f50	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2f52	20 97 32	jsr $3297			jsr 	IFloatCopyToRegister
.2f55	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2f57	20 46 2e	jsr $2e46			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2f5a	18		clc				clc
.2f5b	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2f5d	85 0b		sta $0b				sta 	IFR0+IExp
.2f5f	4a		lsr a				lsr 	a 							; which we can halve.
.2f60	38		sec				sec 								; convert back
.2f61	e9 17		sbc #$17			sbc 	#23
.2f63	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2f65	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2f67	20 7e 2f	jsr $2f7e			jsr 	_IFSRNewton
.2f6a	20 7e 2f	jsr $2f7e			jsr 	_IFSRNewton
.2f6d	20 7e 2f	jsr $2f7e			jsr 	_IFSRNewton
.2f70	20 7e 2f	jsr $2f7e			jsr 	_IFSRNewton
.2f73	18		clc				clc
.2f74	60		rts				rts
.2f75					_IFSRZero:
.2f75	a2 08		ldx #$08			ldx 	#IFR0
.2f77	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.2f7a	18		clc				clc
.2f7b	60		rts				rts
.2f7c					_IFSRFail:
.2f7c	38		sec				sec
.2f7d	60		rts				rts
.2f7e					_IFSRNewton:
.2f7e	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2f80	20 44 32	jsr $3244			jsr 	IFloatPushRx
.2f83	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2f85	20 44 32	jsr $3244			jsr 	IFloatPushRx
.2f88	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2f8a	20 19 30	jsr $3019			jsr 	IFloatDivideFloat
.2f8d	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2f8f	20 65 32	jsr $3265			jsr 	IFloatPullRx
.2f92	20 ed 2c	jsr $2ced			jsr 	IFloatAdd 					; now guess + original/guess
.2f95	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2f97	20 24 33	jsr $3324			jsr 	IFloatShiftRight
.2f9a	a2 0c		ldx #$0c			ldx 	#IFR1
.2f9c	20 65 32	jsr $3265			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2f9f	60		rts				rts
.2fa0					IFloatFractionalR0:
.2fa0	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2fa2	29 3f		and #$3f			and 	#IFXMask
.2fa4	f0 17		beq $2fbd			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2fa6	20 38 2f	jsr $2f38			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2fa9	a2 08		ldx #$08			ldx 	#IFR0
.2fab	20 2c 33	jsr $332c			jsr 	IFloatNormalise 			; normalise R0
.2fae	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2fb0	20 97 32	jsr $3297			jsr 	IFloatCopyToRegister
.2fb3	20 f6 2f	jsr $2ff6			jsr 	IFloatIntegerR0 			; take integer part of R0
.2fb6	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2fb8	20 e6 2c	jsr $2ce6			jsr 	IFloatSubtract
.2fbb	80 05		bra $2fc2			bra 	_FIPExit
.2fbd					_FIPZero:
.2fbd	a2 08		ldx #$08			ldx 	#IFR0
.2fbf	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.2fc2					_FIPExit:
.2fc2	18		clc				clc
.2fc3	60		rts				rts
.2fc4					IFloatCompare:
.2fc4	20 e6 2c	jsr $2ce6			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2fc7	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2fc9	05 0b		ora $0b				ora 	IFR0+IExp
.2fcb	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2fcd	29 3f		and #$3f			and 	#IFXMask
.2fcf	d0 19		bne $2fea			bne 	_IFCNonInteger
.2fd1	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero 			; check if zero
.2fd4	f0 0f		beq $2fe5			beq 	_IFCZero
.2fd6					_IFCReturnSign:
.2fd6	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2fd8	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2fda	48		pha				pha
.2fdb	a9 01		lda #$01			lda 	#1
.2fdd	20 f7 32	jsr $32f7			jsr 	IFloatSetByte 				; return to +1
.2fe0	68		pla				pla 								; sign bit back
.2fe1	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2fe3	18		clc				clc
.2fe4	60		rts				rts
.2fe5					_IFCZero:
.2fe5	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.2fe8	18		clc				clc
.2fe9	60		rts				rts
.2fea					_IFCNonInteger:
.2fea	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2fec	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2fee	05 09		ora $09				ora 	IFR0+IM1
.2ff0	05 0a		ora $0a				ora 	IFR0+IM2
.2ff2	f0 f1		beq $2fe5			beq 	_IFCZero 					; near enough !
.2ff4	80 e0		bra $2fd6			bra 	_IFCReturnSign 				; return the sign of the difference.
.2ff6					IFloatIntegerR0:
.2ff6	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2ff8	29 3f		and #$3f			and 	#IFXMask
.2ffa	f0 1b		beq $3017			beq 	_FIPExit 					; if so do nothing
.2ffc	a2 08		ldx #$08			ldx 	#IFR0
.2ffe	20 2c 33	jsr $332c			jsr 	IFloatNormalise 			; normalise
.3001	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero 			; is it zero ?
.3004	f0 0e		beq $3014			beq 	_FIPZero 					; if so return zero.
.3006					_FIPShift:
.3006	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.3008	29 20		and #$20			and 	#$20 						; still -ve
.300a	f0 0b		beq $3017			beq 	_FIPExit
.300c	20 24 33	jsr $3324			jsr 	IFloatShiftRight 			; shift mantissa right
.300f	20 4e 33	jsr $334e			jsr 	IFloatIncExponent 			; bump exponent
.3012	80 f2		bra $3006			bra 	_FIPShift
.3014					_FIPZero:
.3014	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.3017					_FIPExit:
.3017	18		clc				clc
.3018	60		rts				rts
.3019					IFloatDivideFloat:
.3019	8e dc 06	stx $06dc			stx 	IFTarget  					; this is s1, s0 = R0
.301c	20 4f 2e	jsr $2e4f			jsr 	IFCalculateNewSign 			; calculate sign of result
.301f	20 2c 33	jsr $332c			jsr 	IFloatNormalise 			; normalise RX
.3022	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.3024	20 2c 33	jsr $332c			jsr 	IFloatNormalise
.3027	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero
.302a	f0 56		beq $3082			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.302c	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.302e	20 46 2e	jsr $2e46			jsr 	IFMSignExtend
.3031	8d dd 06	sta $06dd			sta 	IFNewExponent
.3034	ae dc 06	ldx $06dc			ldx 	IFTarget 					; calculate s1.exponent
.3037	b5 03		lda $03,x			lda 	IExp,x
.3039	20 46 2e	jsr $2e46			jsr 	IFMSignExtend
.303c	38		sec				sec
.303d	ed dd 06	sbc $06dd			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.3040	38		sec				sec
.3041	e9 17		sbc #$17			sbc 	#23
.3043	8d dd 06	sta $06dd			sta 	IFNewExponent
.3046	20 84 30	jsr $3084			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.3049	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.304b	10 08		bpl $3055			bpl 	_IFDFNoShiftResult
.304d	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.304f	20 24 33	jsr $3324			jsr 	IFloatShiftRight
.3052	ee dd 06	inc $06dd			inc 	IFNewExponent
.3055					_IFDFNoShiftResult:
.3055	ad dd 06	lda $06dd			lda 	IFNewExponent 				; underflow/overflow check.
.3058	30 06		bmi $3060			bmi 	_IFDFCheckUnderflow
.305a	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.305c	b0 24		bcs $3082			bcs 	_IFDFDivZero
.305e	80 11		bra $3071			bra		_IFDFExit
.3060					_IFDFCheckUnderflow:
.3060	ad dd 06	lda $06dd			lda 	IFNewExponent 				; shift into a legal exponent.
.3063	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.3065	b0 0a		bcs $3071			bcs 	_IFDFExit
.3067	ee dd 06	inc $06dd			inc 	IFNewExponent
.306a	a2 14		ldx #$14			ldx 	#IFRTemp
.306c	20 24 33	jsr $3324			jsr 	IFloatShiftRight
.306f	80 ef		bra $3060			bra 	_IFDFCheckUnderflow
.3071					_IFDFExit:
.3071	ad dd 06	lda $06dd			lda 	IFNewExponent 				; combine exponent and sign.
.3074	29 3f		and #$3f			and 	#IFXMask
.3076	0d de 06	ora $06de			ora 	IFNewSign
.3079	85 17		sta $17				sta 	IFRTemp+IExp
.307b	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.307d	20 86 32	jsr $3286			jsr 	IFloatCopyFromRegister
.3080	18		clc				clc
.3081	60		rts				rts
.3082					_IFDFDivZero:
.3082	38		sec				sec
.3083	60		rts				rts
.3084					IFloatDivideSupport:
.3084	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.3086	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.3089	5a		phy				phy 								; main division loop x 23
.308a	a0 17		ldy #$17			ldy 	#23
.308c					_IFDSLoop:
.308c	20 bd 2e	jsr $2ebd			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.308f	20 b1 2e	jsr $2eb1			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3092	88		dey				dey
.3093	d0 f7		bne $308c			bne 	_IFDSLoop 					; do it 24 times
.3095	7a		ply				ply
.3096	60		rts				rts
.3097					IFloatIntegerToStringR0:
.3097	8d df 06	sta $06df			sta 	IFBase 						; save base to use.
.309a	20 76 33	jsr $3376			jsr 	IFloatBufferReset			; empty buffer
.309d	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.309f	29 3f		and #$3f			and 	#IFXMask
.30a1	d0 1d		bne $30c0			bne 	_IFIFail
.30a3	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.30a5	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero
.30a8	f0 0e		beq $30b8			beq 	_IFINotNegative
.30aa	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.30ac	29 40		and #$40			and 	#IFSign
.30ae	f0 08		beq $30b8			beq 	_IFINotNegative
.30b0	a9 2d		lda #$2d			lda 	#"-"						; output -
.30b2	20 85 33	jsr $3385			jsr 	IFloatBufferWrite
.30b5	20 00 33	jsr $3300			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.30b8					_IFINotNegative:
.30b8	20 c2 30	jsr $30c2			jsr 	_IFIRecursiveConvert 		; start converting
.30bb	20 7d 33	jsr $337d			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.30be	18		clc				clc
.30bf	60		rts				rts
.30c0					_IFIFail:
.30c0	38		sec				sec
.30c1	60		rts				rts
.30c2					_IFIRecursiveConvert:
.30c2	a2 0c		ldx #$0c			ldx 	#IFR1
.30c4	20 97 32	jsr $3297			jsr 	IFloatCopyToRegister 		; R0->R1
.30c7	a2 08		ldx #$08			ldx 	#IFR0
.30c9	ad df 06	lda $06df			lda 	IFBase 						; Base -> R0
.30cc	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.30cf	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.30d1	20 59 2e	jsr $2e59			jsr 	IFloatDivideInteger
.30d4	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.30d6	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero
.30d9	f0 09		beq $30e4			beq 	_IFIOutDigit
.30db	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.30dd	48		pha				pha
.30de	20 c2 30	jsr $30c2			jsr 	_IFIRecursiveConvert 		; convert the divide result
.30e1	68		pla				pla
.30e2	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.30e4					_IFIOutDigit:
.30e4	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.30e6	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.30e8	90 02		bcc $30ec			bcc 	_IFINotHex
.30ea	69 06		adc #$06			adc 	#6
.30ec					_IFINotHex:
.30ec	69 30		adc #$30			adc 	#48
.30ee	20 85 33	jsr $3385			jsr 	IFloatBufferWrite 			; write character to buffer.
.30f1	60		rts				rts
.06df					IFBase:
>06df							.fill 	1
.30f2					IFloatFloatToStringR0:
.30f2	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.30f4	20 44 32	jsr $3244			jsr 	IFloatPushRx
.30f7	20 97 32	jsr $3297			jsr 	IFloatCopyToRegister
.30fa	20 f6 2f	jsr $2ff6			jsr 	IFloatIntegerR0				; make R0 integer
.30fd	a9 0a		lda #$0a			lda 	#10 						; base 10.
.30ff	20 97 30	jsr $3097			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.3102	9c e0 06	stz $06e0			stz 	IFloatDecimalCount 			; zero the decimal count.
.3105	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.3107	29 3f		and #$3f			and 	#IFXMask
.3109	f0 44		beq $314f			beq 	_IFFSExit
.310b					_IFloatFracLoop:
.310b	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.310d	20 86 32	jsr $3286			jsr 	IFloatCopyFromRegister
.3110	20 a0 2f	jsr $2fa0			jsr 	IFloatFractionalR0
.3113	20 2c 33	jsr $332c			jsr 	IFloatNormalise
.3116	a2 10		ldx #$10			ldx 	#IFR2
.3118	20 97 32	jsr $3297			jsr 	IFloatCopyToRegister 		; copy to back R2
.311b	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.311d	a9 0a		lda #$0a			lda 	#10
.311f	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.3122	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.3124	20 97 2d	jsr $2d97			jsr 	IFloatMultiply
.3127	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.3129	20 97 32	jsr $3297			jsr 	IFloatCopyToRegister
.312c	20 f6 2f	jsr $2ff6			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.312f	ad e0 06	lda $06e0			lda 	IFloatDecimalCount 			; done 3 dp, no more
.3132	c9 03		cmp #$03			cmp 	#3
.3134	f0 16		beq $314c			beq 	_IFFSExitStripZero
.3136	ad e0 06	lda $06e0			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.3139	d0 05		bne $3140			bne 	_IFloatNotFirst
.313b	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.313d	20 85 33	jsr $3385			jsr 	IFloatBufferWrite
.3140					_IFloatNotFirst:
.3140	ee e0 06	inc $06e0			inc 	IFloatDecimalCount
.3143	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.3145	09 30		ora #$30			ora 	#"0"						; ASCII
.3147	20 85 33	jsr $3385			jsr 	IFloatBufferWrite 			; write to the buffer.
.314a	80 bf		bra $310b			bra 	_IFloatFracLoop
.314c					_IFFSExitStripZero:
.314c	20 94 33	jsr $3394			jsr 	IFloatStripTrailingZeros
.314f					_IFFSExit:
.314f	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.3151	20 65 32	jsr $3265			jsr 	IFloatPullRx
.3154	20 7d 33	jsr $337d			jsr 	IFloatGetBufferAddress
.3157	18		clc				clc
.3158	60		rts				rts
.06e0					IFloatDecimalCount:
>06e0							.fill 	1
.3159					IFloatStringToFloatR0:
.3159	8d e1 06	sta $06e1			sta 	IFCount 					; save length and positions out.
.315c	86 20		stx $20				stx 	iTemp0
.315e	84 21		sty $21				sty 	iTemp0+1
.3160	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.3162	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.3165	9c e2 06	stz $06e2			stz 	IFSignFlag 					; clear the sign flag
.3168	20 f5 31	jsr $31f5			jsr 	IFSTFGetNext 				; get first
.316b	f0 1b		beq $3188			beq 	_IFSTFFail 					; no character, fail.
.316d	90 10		bcc $317f			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.316f	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.3171	d0 15		bne $3188			bne 	_IFSTFFail
.3173	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.3175	8d e2 06	sta $06e2			sta 	IFSignFlag
.3178					_IFSTFLoop:
.3178	20 f5 31	jsr $31f5			jsr 	IFSTFGetNext 				; get next character
.317b	b0 0b		bcs $3188			bcs 	_IFSTFFail 					; bad character.
.317d	f0 11		beq $3190			beq 	_IFSTFExit 					; end of data
.317f					_IFSTFHaveChar:
.317f	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.3181	f0 08		beq $318b			beq 	_IFSTFDecimal
.3183	20 19 32	jsr $3219			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.3186	80 f0		bra $3178			bra 	_IFSTFLoop 					; keep going until . or end.
.3188					_IFSTFFail:
.3188	38		sec				sec
.3189	80 0d		bra $3198			bra 	_IFSTFReturn
.318b					_IFSTFDecimal:
.318b	20 a0 31	jsr $31a0			jsr 	IFSTFDecimal 				; call the decimal places code.
.318e	b0 08		bcs $3198			bcs 	_IFSTFReturn 				; error
.3190					_IFSTFExit:
.3190	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.3192	0d e2 06	ora $06e2			ora 	IFSignFlag
.3195	85 0b		sta $0b				sta 	IFR0+IExp
.3197	18		clc				clc
.3198					_IFSTFReturn:
.3198	60		rts				rts
.3199					IFloatAddDecimalToR0:
.3199	8d e1 06	sta $06e1			sta 	IFCount 					; save it out.
.319c	86 20		stx $20				stx 	iTemp0
.319e	84 21		sty $21				sty 	iTemp0+1
.31a0					IFSTFDecimal:
.31a0	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.31a2	20 44 32	jsr $3244			jsr 	IFloatPushRx
.31a5	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.31a7	20 f5 32	jsr $32f5			jsr 	IFloatSetZero
.31aa	9c e3 06	stz $06e3			stz 	IFDecimalPlaces 			; zero DP.
.31ad					_IFSTDLoop:
.31ad	20 f5 31	jsr $31f5			jsr 	IFSTFGetNext 				; get next
.31b0	b0 41		bcs $31f3			bcs 	_IFSTFFail2 				; bad character.
.31b2	f0 11		beq $31c5			beq 	_IFSTFComplete 				; end of data, work out the result.
.31b4	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.31b6	f0 39		beq $31f1			beq 	_IFSTFExit2
.31b8	20 19 32	jsr $3219			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.31bb	ee e3 06	inc $06e3			inc 	IFDecimalPlaces 			; count decimals
.31be	ad e3 06	lda $06e3			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.31c1	c9 03		cmp #$03			cmp 	#3
.31c3	90 e8		bcc $31ad			bcc 	_IFSTDLoop
.31c5					_IFSTFComplete:
.31c5	ad e3 06	lda $06e3			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.31c8	f0 27		beq $31f1			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.31ca	3a		dec a				dec 	a 							; table indexed from 1.
.31cb	0a		asl a				asl 	a
.31cc	0a		asl a				asl 	a
.31cd	aa		tax				tax
.31ce	bd 30 32	lda $3230,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.31d1	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.31d3	bd 31 32	lda $3231,x			lda 	TableTen+1,x
.31d6	85 0d		sta $0d				sta  	IFR1+IM1
.31d8	bd 32 32	lda $3232,x			lda 	TableTen+2,x
.31db	85 0e		sta $0e				sta  	IFR1+IM2
.31dd	bd 33 32	lda $3233,x			lda 	TableTen+3,x
.31e0	85 0f		sta $0f				sta  	IFR1+IExp
.31e2	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.31e4	20 97 2d	jsr $2d97			jsr 	IFloatMultiply
.31e7	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.31e9	20 65 32	jsr $3265			jsr 	IFloatPullRx
.31ec	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.31ee	20 ed 2c	jsr $2ced			jsr 	IFloatAdd
.31f1					_IFSTFExit2:
.31f1	18		clc				clc
.31f2	60		rts				rts
.31f3					_IFSTFFail2:
.31f3	38		sec				sec
.31f4	60		rts				rts
.31f5					IFSTFGetNext:
.31f5	ad e1 06	lda $06e1			lda 	IFCount  					; if count is zero, return with Z set.
.31f8	f0 19		beq $3213			beq 	_IFSTFReturnOk
.31fa	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.31fc	e6 20		inc $20				inc 	iTemp0 						; point at next.
.31fe	d0 02		bne $3202			bne 	_IFSTFGNNoCarry
.3200	e6 21		inc $21				inc 	iTemp0+1
.3202					_IFSTFGNNoCarry:
.3202	ce e1 06	dec $06e1			dec 	IFCount 					; dec count.
.3205	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.3207	f0 08		beq $3211			beq 	_IFSTFGOkay
.3209	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.320b	90 08		bcc $3215			bcc 	_IFSTFGFail
.320d	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.320f	b0 04		bcs $3215			bcs 	_IFSTFGFail
.3211					_IFSTFGOkay:
.3211	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3213					_IFSTFReturnOk:
.3213	18		clc				clc
.3214	60		rts				rts
.3215					_IFSTFGFail:
.3215	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3217	38		sec				sec
.3218	60		rts				rts
.3219					IFSTFAddR0:
.3219	29 0f		and #$0f			and 	#15 						; to int value
.321b	48		pha				pha 								; save it.
.321c	a9 0a		lda #$0a			lda 	#10
.321e	a2 0c		ldx #$0c			ldx 	#IFR1
.3220	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.3223	20 97 2d	jsr $2d97			jsr 	IFloatMultiply
.3226	68		pla				pla
.3227	a2 0c		ldx #$0c			ldx 	#IFR1
.3229	20 f7 32	jsr $32f7			jsr 	IFloatSetByte
.322c	20 ed 2c	jsr $2ced			jsr 	IFloatAdd
.322f	60		rts				rts
.06e1					IFCount:
>06e1							.fill 	1
.06e2					IFSignFlag:
>06e2							.fill 	1
.06e3					IFDecimalPlaces:
>06e3							.fill 	1
.3230					TableTen:
>3230	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3234	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>3238	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>323c	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3240	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.3244					IFloatPushRx:
.3244	5a		phy				phy
.3245	ac e4 06	ldy $06e4			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.3248	b5 00		lda $00,x			lda 	IM0,x
.324a	99 e5 06	sta $06e5,y			sta 	IFStack,y
.324d	b5 01		lda $01,x			lda 	IM1,x
.324f	99 e6 06	sta $06e6,y			sta 	IFStack+1,y
.3252	b5 02		lda $02,x			lda 	IM2,x
.3254	99 e7 06	sta $06e7,y			sta 	IFStack+2,y
.3257	b5 03		lda $03,x			lda 	IExp,x
.3259	99 e8 06	sta $06e8,y			sta 	IFStack+3,y
.325c	c8		iny				iny
.325d	c8		iny				iny
.325e	c8		iny				iny
.325f	c8		iny				iny
.3260	8c e4 06	sty $06e4			sty 	IFStackIndex 				; update SP
.3263	7a		ply				ply
.3264	60		rts				rts
.3265					IFloatPullRx:
.3265	5a		phy				phy
.3266	ac e4 06	ldy $06e4			ldy 	IFStackIndex	 			; decrement SP
.3269	88		dey				dey
.326a	88		dey				dey
.326b	88		dey				dey
.326c	88		dey				dey
.326d	b9 e5 06	lda $06e5,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.3270	95 00		sta $00,x			sta 	IM0,x
.3272	b9 e6 06	lda $06e6,y			lda 	IFStack+1,y
.3275	95 01		sta $01,x			sta 	IM1,x
.3277	b9 e7 06	lda $06e7,y			lda 	IFStack+2,y
.327a	95 02		sta $02,x			sta 	IM2,x
.327c	b9 e8 06	lda $06e8,y			lda 	IFStack+3,y
.327f	95 03		sta $03,x			sta 	IExp,x
.3281	8c e4 06	sty $06e4			sty 	IFStackIndex 				; update SP
.3284	7a		ply				ply
.3285	60		rts				rts
.06e4					IFStackIndex:
>06e4							.fill 	1
.06e5					IFStack:
>06e5							.fill 	16*4
.3286					IFloatCopyFromRegister:
.3286	b5 00		lda $00,x			lda 	0,x
.3288	85 08		sta $08				sta 	IFR0
.328a	b5 01		lda $01,x			lda 	1,x
.328c	85 09		sta $09				sta 	IFR0+1
.328e	b5 02		lda $02,x			lda 	2,x
.3290	85 0a		sta $0a				sta 	IFR0+2
.3292	b5 03		lda $03,x			lda 	3,x
.3294	85 0b		sta $0b				sta 	IFR0+3
.3296	60		rts				rts
.3297					IFloatCopyToRegister:
.3297	a5 08		lda $08				lda 	IFR0
.3299	95 00		sta $00,x			sta 	0,x
.329b	a5 09		lda $09				lda 	IFR0+1
.329d	95 01		sta $01,x			sta 	1,x
.329f	a5 0a		lda $0a				lda 	IFR0+2
.32a1	95 02		sta $02,x			sta 	2,x
.32a3	a5 0b		lda $0b				lda 	IFR0+3
.32a5	95 03		sta $03,x			sta 	3,x
.32a7	60		rts				rts
.32a8					IFloatLoadInline:
.32a8	68		pla				pla 								; pop address off to iTemp0
.32a9	85 20		sta $20				sta 	iTemp0
.32ab	68		pla				pla
.32ac	85 21		sta $21				sta 	iTemp0+1
.32ae	a0 01		ldy #$01			ldy 	#1
.32b0	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.32b2	95 00		sta $00,x			sta 	0,x
.32b4	c8		iny				iny
.32b5	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.32b7	95 01		sta $01,x			sta 	1,x
.32b9	c8		iny				iny
.32ba	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.32bc	95 02		sta $02,x			sta 	2,x
.32be	c8		iny				iny
.32bf	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.32c1	95 03		sta $03,x			sta 	3,x
.32c3	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.32c4	a5 20		lda $20				lda 	iTemp0
.32c6	69 05		adc #$05			adc 	#5
.32c8	85 20		sta $20				sta 	iTemp0
.32ca	90 02		bcc $32ce			bcc 	_IFLINoCarry
.32cc	e6 21		inc $21				inc 	iTemp0+1
.32ce					_IFLINoCarry:
.32ce	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.32d1					IFloatMultiply8BitRx:
.32d1	5a		phy		        phy
.32d2	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.32d4	a4 08		ldy $08		        ldy     IFR0+IM0
.32d6	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.32d7	85 08		sta $08		        sta     IFR0+IM0
.32d9	84 09		sty $09		        sty     IFR0+IM1
.32db	a9 00		lda #$00	        lda     #0
.32dd	a0 08		ldy #$08	        ldy     #8
.32df					_IFMLoop:
.32df	90 03		bcc $32e4	        bcc     _IFMNoAdd
.32e1	18		clc		        clc
.32e2	65 09		adc $09		        adc     IFR0+IM1
.32e4					_IFMNoAdd:
.32e4	6a		ror a		        ror     a
.32e5	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.32e7	88		dey		        dey
.32e8	d0 f5		bne $32df	        bne     _IFMLoop
.32ea	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.32ec	7a		ply		        ply
.32ed	60		rts		        rts
.32ee					IFloatCheckZero:
.32ee	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.32f0	15 01		ora $01,x			ora 	IM1,x
.32f2	15 02		ora $02,x			ora 	IM2,x
.32f4	60		rts				rts
.32f5					IFloatSetZero:
.32f5	a9 00		lda #$00			lda 	#0
.32f7					IFloatSetByte:
.32f7	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.32f9	74 01		stz $01,x			stz 	IM1,x
.32fb	74 02		stz $02,x			stz 	IM2,x
.32fd	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.32ff	60		rts				rts
.3300					IFloatNegate:
.3300	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3302	49 40		eor #$40			eor 	#IFSign
.3304	95 03		sta $03,x			sta 	IExp,x
.3306	18		clc				clc
.3307	60		rts				rts
.3308					IFloatMantissaNegate:
.3308	38		sec				sec 								; when you want a real 2's complement negative value.
.3309	a9 00		lda #$00			lda 	#0
.330b	f5 00		sbc $00,x			sbc 	IM0,x
.330d	95 00		sta $00,x			sta 	IM0,x
.330f	a9 00		lda #$00			lda 	#0
.3311	f5 01		sbc $01,x			sbc 	IM1,x
.3313	95 01		sta $01,x			sta 	IM1,x
.3315	a9 00		lda #$00			lda 	#0
.3317	f5 02		sbc $02,x			sbc 	IM2,x
.3319	95 02		sta $02,x			sta 	IM2,x
.331b	60		rts				rts
.331c					IFloatShiftLeft:
.331c	18		clc				clc
.331d					IFloatRotateLeft:
.331d	36 00		rol $00,x			rol 	IM0,x
.331f	36 01		rol $01,x			rol 	IM1,x
.3321	36 02		rol $02,x			rol 	IM2,x
.3323	60		rts				rts
.3324					IFloatShiftRight:
.3324	18		clc				clc
.3325					IFloatRotateRight:
.3325	76 02		ror $02,x			ror 	IM2,x
.3327	76 01		ror $01,x			ror 	IM1,x
.3329	76 00		ror $00,x			ror 	IM0,x
.332b	60		rts				rts
.332c					IFloatNormalise:
.332c	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero 			; is it zero
.332f	f0 18		beq $3349			beq 	_IFNExitZero 				; if so exit
.3331					_IFNLoop:
.3331	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3333	29 c0		and #$c0			and 	#$C0
.3335	c9 40		cmp #$40			cmp 	#$40
.3337	f0 13		beq $334c			beq 	_IFNExitOkay 				; if so , then we are done.
.3339	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.333b	29 3f		and #$3f			and 	#$3F
.333d	c9 20		cmp #$20			cmp 	#$20
.333f	f0 0b		beq $334c			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3341	20 62 33	jsr $3362			jsr 	IFloatDecExponent
.3344	20 1c 33	jsr $331c			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3347	80 e8		bra $3331			bra 	_IFNLoop
.3349					_IFNExitZero:
.3349	20 f5 32	jsr $32f5			jsr 	IFloatSetZero 				; set the result to zero
.334c					_IFNExitOkay:
.334c	18		clc				clc  								; return with CC.
.334d	60		rts				rts
.334e					IFloatIncExponent:
.334e	b5 03		lda $03,x			lda 	IExp,x
.3350	48		pha				pha
.3351	29 c0		and #$c0			and 	#$C0
.3353	8d 25 07	sta $0725			sta 	IFXTemp
.3356	68		pla				pla
.3357	1a		inc a				inc 	a
.3358	29 3f		and #$3f			and 	#$3F
.335a	48		pha				pha
.335b	0d 25 07	ora $0725			ora 	IFXTemp
.335e	95 03		sta $03,x			sta 	IExp,x
.3360	68		pla				pla
.3361	60		rts				rts
.3362					IFloatDecExponent:
.3362	b5 03		lda $03,x			lda 	IExp,x
.3364	48		pha				pha
.3365	29 c0		and #$c0			and 	#$C0
.3367	8d 25 07	sta $0725			sta 	IFXTemp
.336a	68		pla				pla
.336b	3a		dec a				dec 	a
.336c	29 3f		and #$3f			and 	#$3F
.336e	48		pha				pha
.336f	0d 25 07	ora $0725			ora 	IFXTemp
.3372	95 03		sta $03,x			sta 	IExp,x
.3374	68		pla				pla
.3375	60		rts				rts
.0725					IFXTemp:
>0725							.fill 	1
.3376					IFloatBufferReset:
.3376	9c 26 07	stz $0726			stz 	IFBufferCount
.3379	9c 27 07	stz $0727			stz 	IFBuffer
.337c	60		rts				rts
.337d					IFloatGetBufferAddress:
.337d	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.337f	a2 26		ldx #$26			ldx 	#(IFBufferCount & $FF)
.3381	ad 26 07	lda $0726			lda 	IFBufferCount
.3384	60		rts				rts
.3385					IFloatBufferWrite:
.3385	da		phx				phx
.3386	ae 26 07	ldx $0726			ldx 	IFBufferCount
.3389	9d 27 07	sta $0727,x			sta 	IFBuffer,x
.338c	9e 28 07	stz $0728,x			stz 	IFBuffer+1,x
.338f	ee 26 07	inc $0726			inc 	IFBufferCount
.3392	fa		plx				plx
.3393	60		rts				rts
.3394					IFloatStripTrailingZeros:
.3394	ae 26 07	ldx $0726			ldx 	IFBufferCount
.3397	bd 26 07	lda $0726,x			lda 	IFBuffer-1,x
.339a	c9 30		cmp #$30			cmp		#"0"
.339c	d0 0f		bne $33ad			bne 	_IFSTExit
.339e	bd 25 07	lda $0725,x			lda 	IFBuffer-2,x
.33a1	c9 2e		cmp #$2e			cmp 	#"."
.33a3	f0 08		beq $33ad			beq 	_IFSTExit
.33a5	ce 26 07	dec $0726			dec 	IFBufferCount
.33a8	9e 26 07	stz $0726,x			stz 	IFBuffer-1,x
.33ab	80 e7		bra $3394			bra 	IFloatStripTrailingZeros
.33ad					_IFSTExit:
.33ad	60		rts				rts
.0726					IFBufferCount:
>0726							.fill 	1
.0727					IFBuffer:
>0727							.fill 	25
.33ae					IFloatCheckRange:
.33ae	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.33b0	09 40		ora #$40			ora 	#IFSign
.33b2	85 0b		sta $0b				sta 	IFR0+IExp
.33b4	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.33b6	20 ed 2c	jsr $2ced			jsr 	IFloatAdd 					; add allowed to error.
.33b9	a2 08		ldx #$08			ldx 	#IFR0
.33bb	20 ee 32	jsr $32ee			jsr 	IFloatCheckZero 			; error if < 0
.33be	f0 06		beq $33c6			beq 	_IFAOkay
.33c0	a5 0b		lda $0b				lda 	IFR0+IExp
.33c2	29 40		and #$40			and 	#IFSign
.33c4	d0 01		bne $33c7			bne 	_IFAFail
.33c6					_IFAOkay:
.33c6	60		rts				rts
.33c7					_IFAFail:
.33c7	38		sec				sec
.33c8	68		pla				pla 								; get address - 2
.33c9	e9 02		sbc #$02			sbc 	#2
.33cb	aa		tax				tax
.33cc	68		pla				pla
.33cd	e9 00		sbc #$00			sbc 	#0
.33cf	a8		tay				tay
.33d0	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.33d2					_IFAStop:
>33d2	db						.byte 	$DB 						; display an error AA ADR ADR
.33d3	80 fd		bra $33d2			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
