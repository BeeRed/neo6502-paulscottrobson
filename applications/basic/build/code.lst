
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$6000" -D "ENDMEMORY=\$B000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Wed Jun  7 02:30:26 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$6000					BASICCODE=$6000
=$b000					ENDMEMORY=$B000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 b0		ldy #$b0			ldy 	#ENDMEMORY >> 8
.1004	20 33 1e	jsr $1e33			jsr 	PGMSetBaseAddress
.1007	20 2e 29	jsr $292e			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c cf 13	jmp $13cf			jmp 	Command_RUN
.1012	4c b9 13	jmp $13b9			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 15 16	jsr $1615			jsr 	EXPEvalNumber
.1018	a2 08		ldx #$08			ldx 	#IFR0
.101a	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c 54 24	jmp $2454		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	20 46 1e	jsr $1e46			jsr 	PGMEndProgram 				; end program => zTemp0
.1026	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1028	a5 23		lda $23				lda 	zTemp0+1
.102a	1a		inc a				inc 	a
.102b	85 29		sta $29				sta 	freeMemory+1
.102d	20 cd 28	jsr $28cd			jsr 	VARClearHashTables
.1030	ad 16 05	lda $0516			lda 	PGMEndMemoryHigh
.1033	20 0a 26	jsr $260a			jsr 	StackReset
.1036	20 69 26	jsr $2669			jsr 	StringSystemInitialise
.1039	20 6b 23	jsr $236b			jsr 	ScanProcedures
.103c	60		rts				rts
.103d					AllocateMemory:
.103d	5a		phy				phy 								; save Y
.103e	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low
.1040	5a		phy				phy
.1041	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.1043	5a		phy				phy
.1044	a8		tay				tay 								; count is now in XY
.1045					_AllocateLoop:
.1045	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1047	d0 04		bne $104d			bne 	_AllocateOne
.1049	c0 00		cpy #$00			cpy 	#0
.104b	f0 15		beq $1062			beq 	_AllocateExit
.104d					_AllocateOne:
.104d	a9 00		lda #$00			lda 	#0 							; zero byte
.104f	92 28		sta ($28)			sta 	(freeMemory)
.1051	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.1053	d0 05		bne $105a			bne 	_AllocateSkipCarry
.1055	e6 29		inc $29				inc 	freeMemory+1
.1057	20 66 10	jsr $1066			jsr 	ClearCheckMemory
.105a					_AllocateSkipCarry:
.105a	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.105c	d0 01		bne $105f			bne 	_AllocateSkipBorrow
.105e	ca		dex				dex
.105f					_AllocateSkipBorrow:
.105f	88		dey				dey
.1060	80 e3		bra $1045			bra 	_AllocateLoop
.1062					_AllocateExit:
.1062	fa		plx				plx 								; restore address
.1063	68		pla				pla
.1064	7a		ply				ply 								; restore Y
.1065	60		rts				rts
.1066					ClearCheckMemory:
.1066	a5 29		lda $29				lda 	freeMemory+1
.1068	1a		inc a				inc 	a
.1069	1a		inc a				inc 	a
.106a	cd 1e 06	cmp $061e			cmp 	stringMemory+1
.106d	b0 01		bcs $1070			bcs  	_CCMError
.106f	60		rts				rts
.1070					_CCMError:
.1070	4c ee 24	jmp $24ee		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1073					CommandDIM:
.1073	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1075	29 c0		and #$c0			and 	#$C0
.1077	c9 40		cmp #$40			cmp 	#$40
.1079	d0 39		bne $10b4			bne 	_CDSyntax
.107b	20 84 28	jsr $2884			jsr 	VARGetInfo 					; get information
.107e	ad 26 06	lda $0626			lda 	VARType 					; check array.
.1081	29 02		and #$02			and 	#2
.1083	f0 2f		beq $10b4			beq 	_CDSyntax
.1085	20 36 28	jsr $2836			jsr 	VARFind 					; does it already exist
.1088	b0 2d		bcs $10b7			bcs 	_CDExists
.108a	20 e2 27	jsr $27e2			jsr 	VARCreate 					; create it - returns data ptr in XA
.108d	da		phx				phx 								; save target address
.108e	48		pha				pha
.108f	ad 26 06	lda $0626			lda 	VARType 					; type ID.
.1092	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1094	20 ba 10	jsr $10ba			jsr 	CreateArray 				; create array to XA
.1097	84 24		sty $24				sty 	zTemp1 						; save Y
.1099	7a		ply				ply 								; restore target to zTemp0
.109a	84 22		sty $22				sty 	zTemp0
.109c	7a		ply				ply
.109d	84 23		sty $23				sty 	zTemp0+1
.109f	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10a1	a0 01		ldy #$01			ldy 	#1
.10a3	8a		txa				txa
.10a4	91 22		sta ($22),y			sta 	(zTemp0),y
.10a6	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10a8	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 				; check )
.10ab	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10ad	c8		iny				iny
.10ae	c9 99		cmp #$99			cmp 	#PR_COMMA
.10b0	f0 c1		beq $1073			beq 	CommandDIM
.10b2	88		dey				dey
.10b3	60		rts				rts
.10b4					_CDSyntax:
.10b4	4c fe 23	jmp $23fe		jmp	ErrorV_syntax
.10b7					_CDExists:
.10b7	4c c6 24	jmp $24c6		jmp	ErrorV_redefine
.10ba					CreateArray:
.10ba	8d 03 05	sta $0503			sta 	CAType						; save type
.10bd	20 27 16	jsr $1627			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10c0	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10c2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10c4	f0 04		beq $10ca			beq 	_CATwoDimensions
.10c6	20 16 11	jsr $1116			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10c9	60		rts				rts
.10ca					_CATwoDimensions:
.10ca	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10cc	8d 05 05	sta $0505			sta 	CADim1+1
.10cf	a5 08		lda $08				lda 	IFR0+IM0
.10d1	8d 04 05	sta $0504			sta 	CADim1+0
.10d4	20 a3 25	jsr $25a3			jsr 	ERRCheckComma 				; check comma
.10d7	20 27 16	jsr $1627			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10da	5a		phy				phy 								; save Y position
.10db	18		clc				clc 								; allocate the outer array of pointers.
.10dc	ae 05 05	ldx $0505			ldx 	CADim1+1
.10df	ad 04 05	lda $0504			lda 	CADim1
.10e2	20 55 11	jsr $1155			jsr 	CSAAllocate 				; allocate the outer array
.10e5	da		phx				phx									; save this address on the stack
.10e6	48		pha				pha
.10e7	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.10e9	85 26		sta $26				sta 	zTemp2
.10eb					_CACreateSubLoop:
.10eb	38		sec				sec
.10ec	20 16 11	jsr $1116			jsr 	CreateSingleArray 			; create data array of required size.
.10ef	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10f1	91 26		sta ($26),y			sta 	(zTemp2),y
.10f3	8a		txa				txa
.10f4	c8		iny				iny
.10f5	91 26		sta ($26),y			sta 	(zTemp2),y
.10f7	18		clc				clc  								; next slot.
.10f8	a5 26		lda $26				lda 	zTemp2
.10fa	69 02		adc #$02			adc 	#2
.10fc	85 26		sta $26				sta 	zTemp2
.10fe	90 02		bcc $1102			bcc 	_CACNoCarry
.1100	e6 27		inc $27				inc 	zTemp2+1
.1102					_CACNoCarry:
.1102	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1105	d0 03		bne $110a			bne 	_CACNoBorrow
.1107	ce 05 05	dec $0505			dec 	CADim1+1
.110a					_CACNoBorrow:
.110a	ce 04 05	dec $0504			dec 	CADim1
.110d	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1110	10 d9		bpl $10eb			bpl 	_CACreateSubLoop
.1112	68		pla				pla
.1113	fa		plx				plx
.1114	7a		ply				ply
.1115	60		rts				rts
.1116					CreateSingleArray:
.1116	5a		phy				phy
.1117	38		sec				sec 								; allocate memory block all zeros.
.1118	a5 08		lda $08				lda 	IFR0+IM0
.111a	a6 09		ldx $09				ldx 	IFR0+IM1
.111c	20 55 11	jsr $1155			jsr 	CSAAllocate
.111f	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1122	f0 2f		beq $1153			beq 	_CSANoInit
.1124	da		phx				phx 								; save address of new array
.1125	48		pha				pha
.1126	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1128	86 23		stx $23				stx 	zTemp0+1
.112a	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.112c	b1 22		lda ($22),y			lda 	(zTemp0),y
.112e	a8		tay				tay
.112f	b2 22		lda ($22)			lda 	(zTemp0)
.1131	aa		tax				tax
.1132					_CSAEraseString:
.1132	5a		phy				phy
.1133	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1135	a9 80		lda #$80			lda 	#$80
.1137	91 22		sta ($22),y			sta 	(zTemp0),y
.1139	7a		ply				ply
.113a	18		clc				clc 								; add 4 to next slot.
.113b	a5 22		lda $22				lda 	zTemp0
.113d	69 04		adc #$04			adc 	#4
.113f	85 22		sta $22				sta 	zTemp0
.1141	90 02		bcc $1145			bcc 	_CSAENoCarry
.1143	e6 23		inc $23				inc 	zTemp0+1
.1145					_CSAENoCarry:
.1145	e0 00		cpx #$00			cpx 	#0
.1147	d0 01		bne $114a			bne 	_CSANoBorrow
.1149	88		dey				dey
.114a					_CSANoBorrow:
.114a	ca		dex				dex
.114b	d0 e5		bne $1132			bne 	_CSAEraseString
.114d	c0 00		cpy #$00			cpy 	#0
.114f	d0 e1		bne $1132			bne 	_CSAEraseString
.1151	68		pla				pla
.1152	fa		plx				plx
.1153					_CSANoInit:
.1153	7a		ply				ply
.1154	60		rts				rts
.1155					CSAAllocate:
.1155	08		php				php 								; save type flag.
.1156	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1157	d0 01		bne $115a			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1159	e8		inx				inx
.115a					_CSAANoCarry:
.115a	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.115c	b0 2e		bcs $118c			bcs 	_CSARange
.115e	28		plp				plp 								; restore type flag
.115f	08		php				php 								; save it back again.
.1160	da		phx				phx 								; save size.
.1161	48		pha				pha
.1162	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1164	90 03		bcc $1169			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1166	0a		asl a				asl 	a
.1167	26 23		rol $23				rol 	zTemp0+1
.1169					_CSAATimes2:
.1169	0a		asl a				asl 	a
.116a	26 23		rol $23				rol 	zTemp0+1
.116c	18		clc				clc
.116d	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.116f	90 02		bcc $1173			bcc 	_CSAANoCarry2
.1171	e6 23		inc $23				inc 	zTemp0+1
.1173					_CSAANoCarry2:
.1173	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1175	20 3d 10	jsr $103d			jsr 	AllocateMemory 				; allocate memory to XA
.1178	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.117a	85 22		sta $22				sta 	zTemp0
.117c	68		pla				pla  								; write element count to first 2 bytes
.117d	92 22		sta ($22)			sta 	(zTemp0)
.117f	68		pla				pla 								; msb of element count
.1180	28		plp				plp 								; CC if pointer array
.1181	b0 02		bcs $1185			bcs 	_CSAAIsData
.1183	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1185					_CSAAIsData:
.1185	a0 01		ldy #$01			ldy 	#1
.1187	91 22		sta ($22),y			sta 	(zTemp0),y
.1189	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.118b	60		rts				rts
.118c					_CSARange:
.118c	4c 0f 24	jmp $240f		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.118f					Command_Doke:
.118f	38		sec				sec
.1190	80 01		bra $1193			bra 	DPCommon
.1192					Command_Poke:
.1192	18		clc				clc
.1193					DPCommon:
.1193	08		php				php 								; CS if DOKE
.1194	20 27 16	jsr $1627			jsr 	EXPEvalInteger16 			; address
.1197	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.1199	48		pha				pha
.119a	a5 09		lda $09				lda 	IFR0+IM1
.119c	48		pha				pha
.119d	20 a3 25	jsr $25a3			jsr 	ERRCheckComma 				; [dp]oke address,data
.11a0	20 27 16	jsr $1627			jsr 	EXPEvalInteger16
.11a3	68		pla				pla 								; get address back
.11a4	85 23		sta $23				sta 	zTemp0+1
.11a6	68		pla				pla
.11a7	85 22		sta $22				sta 	zTemp0
.11a9	a5 08		lda $08				lda 	IFR0+IM0
.11ab	92 22		sta ($22)			sta 	(zTemp0)
.11ad	28		plp				plp
.11ae	90 08		bcc $11b8			bcc 	_DPExit
.11b0	5a		phy				phy
.11b1	a5 09		lda $09				lda 	IFR0+IM1
.11b3	a0 01		ldy #$01			ldy 	#1
.11b5	91 22		sta ($22),y			sta 	(zTemp0),y
.11b7	7a		ply				ply
.11b8					_DPExit:
.11b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11b9					Command_Input:
.11b9	a9 ff		lda #$ff			lda 	#$FF
.11bb	8d 06 05	sta $0506			sta 	InputFlag
.11be	80 03		bra $11c3			bra 	Command_IP_Main
.11c0					Command_Print:
.11c0	9c 06 05	stz $0506			stz 	InputFlag
.11c3					Command_IP_Main:
.11c3	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11c4					_CPLoop:
.11c4	08		php				php 								; save last action flag
.11c5	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.11c7	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11c9	f0 4e		beq $1219			beq 	_CPExit 					; without consuming
.11cb	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11cd	f0 4a		beq $1219			beq 	_CPExit
.11cf	68		pla				pla 								; throw last action flag
.11d0	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.11d2	c8		iny				iny
.11d3	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11d5	f0 3f		beq $1216			beq 	_CPContinueWithSameLine
.11d7	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11d9	f0 36		beq $1211			beq 	_CPTab
.11db	88		dey				dey 								; undo the get.
.11dc	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.11df	10 0b		bpl $11ec			bpl	 	_CPNotInput
.11e1	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.11e3	c9 40		cmp #$40			cmp 	#$40
.11e5	d0 05		bne $11ec			bne 	_CPNotInput
.11e7	20 22 12	jsr $1222			jsr 	_CPInputCode 				; input code
.11ea	80 d7		bra $11c3			bra 	Command_IP_Main 			; and go round again.
.11ec					_CPNotInput:
.11ec	20 d5 15	jsr $15d5			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11ef	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.11f1	10 14		bpl $1207			bpl 	_CPNumber
.11f3	5a		phy				phy
.11f4	18		clc				clc 								; string address to YX
.11f5	a5 08		lda $08				lda 	IFR0+IM0
.11f7	aa		tax				tax
.11f8	a5 09		lda $09				lda 	IFR0+IM1
.11fa	a8		tay				tay
.11fb	e8		inx				inx 								; point to 1st character
.11fc	d0 01		bne $11ff			bne 	_CPNoCarry
.11fe	c8		iny				iny
.11ff					_CPNoCarry:
.11ff	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.1201	20 56 12	jsr $1256			jsr 	CPPrintAYX 					; print AYX
.1204	7a		ply				ply
.1205	80 bc		bra $11c3			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1207					_CPNumber:
.1207	5a		phy				phy
.1208	20 40 2d	jsr $2d40			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.120b	20 56 12	jsr $1256			jsr 	CPPrintAYX 					; print AYX
.120e	7a		ply				ply
.120f	80 b2		bra $11c3			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1211					_CPTab:
.1211	a9 09		lda #$09			lda 	#9 							; print TAB
.1213	20 6c 12	jsr $126c			jsr 	CPPrintA
.1216					_CPContinueWithSameLine:
.1216	38		sec				sec 								; loop round with carry set, which
.1217	80 ab		bra $11c4			bra 	_CPLoop 					; will inhibit final CR
.1219					_CPExit:
.1219	28		plp				plp 								; get last action flag
.121a	b0 05		bcs $1221			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.121c	a9 0d		lda #$0d			lda 	#13 						; print new line
.121e	20 6c 12	jsr $126c			jsr 	CPPrintA
.1221					_CPExit2:
.1221	60		rts				rts
.1222					_CPInputCode:
.1222	20 9d 16	jsr $169d			jsr 	EXPTermR0 					; get the term.
.1225	5a		phy				phy 								; save position
.1226	20 69 12	jsr $1269			jsr 	CPInputA					; input a line to YX
.1229	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.122b	30 18		bmi $1245			bmi 	_CPInputString
.122d	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.122f	48		pha				pha
.1230	a5 09		lda $09				lda 	IFR0+IM1
.1232	48		pha				pha
.1233	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1235	84 23		sty $23				sty 	zTemp0+1
.1237	20 7f 19	jsr $197f			jsr 	VALConversionZTemp0
.123a	68		pla				pla 								; do the assign.
.123b	85 23		sta $23				sta 	zTemp0+1
.123d	68		pla				pla
.123e	85 22		sta $22				sta 	zTemp0
.1240	20 94 12	jsr $1294			jsr 	AssignNumber
.1243	7a		ply				ply
.1244	60		rts				rts
.1245					_CPInputString:
.1245	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1247	85 22		sta $22				sta 	zTemp0
.1249	a5 09		lda $09				lda 	IFR0+IM1
.124b	85 23		sta $23				sta 	zTemp0+1
.124d	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.124f	84 09		sty $09				sty 	IFR0+IM1
.1251	20 ab 12	jsr $12ab			jsr 	AssignString 				; assign the string
.1254	7a		ply				ply 								; exit
.1255	60		rts				rts
.1256					CPPrintAYX:
.1256	86 22		stx $22				stx 	zTemp0
.1258	84 23		sty $23				sty 	zTemp0+1
.125a	aa		tax				tax
.125b	f0 0b		beq $1268			beq 	_CPPrintExit
.125d	a0 00		ldy #$00			ldy 	#0
.125f					_CPPrintAYXLoop:
.125f	b1 22		lda ($22),y			lda 	(zTemp0),y
.1261	20 6c 12	jsr $126c			jsr 	CPPrintA
.1264	c8		iny				iny
.1265	ca		dex				dex
.1266	d0 f7		bne $125f			bne 	_CPPrintAYXLoop
.1268					_CPPrintExit:
.1268	60		rts				rts
.1269					CPInputA:
.1269	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.126c					CPPrintA:
.126c	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.126f					CommandLET:
.126f	20 9d 16	jsr $169d			jsr 	EXPTermR0 					; get term
.1272	90 6f		bcc $12e3			bcc 	CLError 					; must be a reference term.
.1274	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.1276	48		pha				pha
.1277	a5 09		lda $09				lda 	IFR0+IM1
.1279	48		pha				pha
.127a	a5 0b		lda $0b				lda 	IFR0+IExp
.127c	48		pha				pha
.127d	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.127f	20 ab 25	jsr $25ab			jsr 	ERRCheckA
.1282	20 d5 15	jsr $15d5			jsr 	EXPEvaluateExpression 		; right hand side.
.1285	68		pla				pla 								; type of l-expr
.1286	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1288	30 5c		bmi $12e6			bmi 	CLType
.128a	fa		plx				plx 	 							; pop target address to zTemp0
.128b	86 23		stx $23				stx 	zTemp0+1
.128d	fa		plx				plx
.128e	86 22		stx $22				stx 	zTemp0
.1290					AssignData:
.1290	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.1292	30 17		bmi $12ab			bmi 	AssignString
.1294					AssignNumber:
.1294	5a		phy				phy
.1295	a0 03		ldy #$03			ldy 	#3
.1297	a5 0b		lda $0b				lda 	IFR0+IExp
.1299	91 22		sta ($22),y			sta 	(zTemp0),y
.129b	88		dey				dey
.129c	a5 0a		lda $0a				lda 	IFR0+IM2
.129e	91 22		sta ($22),y			sta 	(zTemp0),y
.12a0	88		dey				dey
.12a1	a5 09		lda $09				lda 	IFR0+IM1
.12a3	91 22		sta ($22),y			sta 	(zTemp0),y
.12a5	a5 08		lda $08				lda 	IFR0+IM0
.12a7	92 22		sta ($22)			sta 	(zTemp0)
.12a9	7a		ply				ply
.12aa	60		rts				rts
.12ab					AssignString:
.12ab	5a		phy				phy
.12ac	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12ae	b1 22		lda ($22),y			lda 	(zTemp0),y
.12b0	12 22		ora ($22)			ora 	(zTemp0)
.12b2	f0 23		beq $12d7			beq 	_CLConcreteString
.12b4	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12b6	85 24		sta $24				sta 	zTemp1
.12b8	b1 22		lda ($22),y			lda 	(zTemp0),y
.12ba	85 25		sta $25				sta 	zTemp1+1
.12bc	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.12be	38		sec				sec 								; we want 3 for slot size, status, string size.
.12bf	e9 03		sbc #$03			sbc 	#3
.12c1	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.12c3	90 12		bcc $12d7			bcc 	_CLConcreteString 			; if so, concrete the string again.
.12c5	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.12c7	1a		inc a				inc 	a
.12c8	aa		tax				tax
.12c9	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.12cb					_CLReplaceString:
.12cb	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.12cd	c8		iny				iny
.12ce	c8		iny				iny
.12cf	91 24		sta ($24),y			sta 	(zTemp1),y
.12d1	88		dey				dey
.12d2	ca		dex				dex
.12d3	d0 f6		bne $12cb			bne 	_CLReplaceString
.12d5	80 0a		bra $12e1			bra 	_CLExit
.12d7					_CLConcreteString:
.12d7	20 1e 26	jsr $261e			jsr 	StringConcrete  			; concreted string in XA.
.12da	a0 01		ldy #$01			ldy 	#1 							; store the address
.12dc	92 22		sta ($22)			sta 	(zTemp0)
.12de	8a		txa				txa
.12df	91 22		sta ($22),y			sta 	(zTemp0),y
.12e1					_CLExit:
.12e1	7a		ply				ply
.12e2	60		rts				rts
.12e3					CLError:
.12e3	4c 31 25	jmp $2531		jmp	ErrorV_variable
.12e6					CLType:
.12e6	4c 2e 24	jmp $242e		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.12e9					Command_LIST:
.12e9	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.12ec	9c 08 05	stz $0508			stz 	CLFrom+1
.12ef	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.12f1	c9 99		cmp #$99			cmp 	#PR_COMMA
.12f3	f0 1d		beq $1312			beq 	_CLToLine
.12f5	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12f7	f0 37		beq $1330			beq 	_CLDefaultTo
.12f9	20 27 16	jsr $1627			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.12fc	a5 08		lda $08				lda 	IFR0+IM0
.12fe	8d 07 05	sta $0507			sta 	CLFrom
.1301	8d 09 05	sta $0509			sta 	CLTo
.1304	a5 09		lda $09				lda 	IFR0+IM1
.1306	8d 08 05	sta $0508			sta 	CLFrom+1
.1309	8d 0a 05	sta $050a			sta 	CLTo+1
.130c	b1 18		lda ($18),y			lda 	(codePtr),y
.130e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1310	f0 26		beq $1338			beq 	_CLList
.1312					_CLToLine:
.1312	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1314	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1316	f0 18		beq $1330			beq 	_CLDefaultTo
.1318	20 a3 25	jsr $25a3			jsr 	ERRCheckComma 				; sep comma
.131b	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.131d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.131f	f0 0f		beq $1330			beq 	_CLDefaultTo
.1321	20 27 16	jsr $1627			jsr 	EXPEvalInteger16 			; there's a To value.
.1324	a5 08		lda $08				lda 	IFR0+IM0
.1326	8d 09 05	sta $0509			sta 	CLTo
.1329	a5 09		lda $09				lda 	IFR0+IM1
.132b	8d 0a 05	sta $050a			sta 	CLTo+1
.132e	80 08		bra $1338			bra 	_CLList
.1330					_CLDefaultTo:
.1330	a9 ff		lda #$ff			lda 	#$FF
.1332	8d 09 05	sta $0509			sta 	CLTo
.1335	8d 0a 05	sta $050a			sta 	CLTo+1
.1338					_CLList:
.1338	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.133b	85 19		sta $19				sta 	codePtr+1
.133d	64 18		stz $18				stz 	codePtr
.133f	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1341	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1343	20 95 1c	jsr $1c95			jsr 	TOKSetDetokeniseOutput
.1346					_CLLoop:
.1346	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1348	f0 4a		beq $1394			beq 	_CLExit
.134a	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.134d	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1350	d0 45		bne $1397			bne 	_CLBreak
.1352	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1354	20 9a 13	jsr $139a			jsr 	_CLCompareLine
.1357	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1359	f0 2c		beq $1387			beq 	_CLNext
.135b	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.135d	20 9a 13	jsr $139a			jsr 	_CLCompareLine
.1360	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.1362	f0 23		beq $1387			beq 	_CLNext
.1364	a0 02		ldy #$02			ldy 	#2 							; print line #
.1366	b1 18		lda ($18),y			lda 	(codePtr),y
.1368	aa		tax				tax
.1369	88		dey				dey
.136a	b1 18		lda ($18),y			lda 	(codePtr),y
.136c	20 fc 26	jsr $26fc			jsr 	WriteIntXA
.136f	a9 20		lda #$20			lda 	#32
.1371	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1374	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.1376	a5 18		lda $18				lda 	codePtr
.1378	18		clc				clc
.1379	69 03		adc #$03			adc 	#3
.137b	aa		tax				tax
.137c	90 01		bcc $137f			bcc 	_CLNoCarry2
.137e	c8		iny				iny
.137f					_CLNoCarry2:
.137f	20 50 1c	jsr $1c50			jsr 	TOKDetokenise
.1382	a9 0d		lda #$0d			lda 	#13	 						; next line
.1384	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1387					_CLNext:
.1387	18		clc				clc 								; advance to next line.
.1388	b2 18		lda ($18)			lda 	(codePtr)
.138a	65 18		adc $18				adc 	codePtr
.138c	85 18		sta $18				sta 	codePtr
.138e	90 02		bcc $1392			bcc 	_CLNoCarry
.1390	e6 19		inc $19				inc 	codePtr+1
.1392					_CLNoCarry:
.1392	80 b2		bra $1346			bra 	_CLLoop
.1394					_CLExit:
.1394	4c 1b 27	jmp $271b			jmp 	WarmStart
.1397					_CLBreak:
.1397	4c 89 25	jmp $2589		jmp	ErrorV_break
.139a					_CLCompareLine:
.139a	a0 01		ldy #$01			ldy 	#1
.139c	38		sec				sec
.139d	b1 18		lda ($18),y			lda 	(codePtr),y
.139f	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13a2	85 22		sta $22				sta 	zTemp0
.13a4	c8		iny				iny
.13a5	b1 18		lda ($18),y			lda 	(codePtr),y
.13a7	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13aa	90 0a		bcc $13b6			bcc 	_CLIsNegative
.13ac	d0 05		bne $13b3			bne 	_CLIsPositive
.13ae	a5 22		lda $22				lda 	zTemp0
.13b0	d0 01		bne $13b3			bne 	_CLIsPositive
.13b2	60		rts				rts
.13b3					_CLIsPositive:
.13b3	a9 01		lda #$01			lda 	#1
.13b5	60		rts				rts
.13b6					_CLIsNegative:
.13b6	a9 ff		lda #$ff			lda 	#255
.13b8	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.13b9					Command_NEW:
.13b9	20 3a 1e	jsr $1e3a			jsr 	PGMNewProgram
.13bc	20 23 10	jsr $1023			jsr 	Command_CLEAR
.13bf	4c 3a 14	jmp $143a			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.13c2					Command_REM:
.13c2					Command_REM2:
.13c2	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.13c4	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.13c6	d0 06		bne $13ce			bne 	_CRExit
.13c8	c8		iny				iny 								; skip over it, it's a comment.
.13c9	98		tya				tya
.13ca	38		sec				sec
.13cb	71 18		adc ($18),y			adc 	(codePtr),y
.13cd	a8		tay				tay
.13ce					_CRExit:
.13ce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.13cf					Command_RUN:
.13cf	20 23 10	jsr $1023			jsr 	Command_CLEAR 				; clear everything out.
.13d2	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.13d5	85 19		sta $19				sta 	codePtr+1
.13d7	64 18		stz $18				stz 	codePtr
.13d9	80 0b		bra $13e6			bra 	RUNNewLine
.13db					RUNEndOfLine:
.13db	18		clc				clc 								; advance to next line.
.13dc	b2 18		lda ($18)			lda 	(codePtr)
.13de	65 18		adc $18				adc 	codePtr
.13e0	85 18		sta $18				sta 	codePtr
.13e2	90 02		bcc $13e6			bcc 	_RELNoCarry
.13e4	e6 19		inc $19				inc 	codePtr+1
.13e6					_RELNoCarry:
.13e6					RUNNewLine:
.13e6	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.13e8	9a		txs				txs
.13e9	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.13eb	f0 4d		beq $143a			beq 	Command_END
.13ed	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.13ef	b1 18		lda ($18),y			lda 	(codePtr),y
.13f1	8d 21 06	sta $0621			sta 	ERRLine
.13f4	c8		iny				iny
.13f5	b1 18		lda ($18),y			lda 	(codePtr),y
.13f7	8d 22 06	sta $0622			sta 	ERRLine+1
.13fa	c8		iny				iny 								; offset into codePtr for start of line.
.13fb					RUNNewCommand:
.13fb	9c 1c 06	stz $061c			stz 	stringInitialised 			; reset string system.
.13fe	ce 0b 05	dec $050b			dec 	checkCounter
.1401	d0 0a		bne $140d			bne 	_RNCNoCheck
.1403	5a		phy				phy 								; keyboard check.
.1404	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1407	7a		ply				ply
.1408	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.140b	d0 1e		bne $142b			bne 	_RUNBreak
.140d					_RNCNoCheck:
.140d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.140f	10 1d		bpl $142e			bpl		_RUNNotToken 				; probably an identifier
.1411	c8		iny				iny 								; consume token
.1412	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1414	f0 e5		beq $13fb			beq 	RUNNewCommand
.1416	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1418	b0 0e		bcs $1428			bcs 	_RUNSyntax
.141a	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.141c	90 0a		bcc $1428			bcc 	_RUNSyntax
.141e	0a		asl a				asl 	a 							; double into X.
.141f	aa		tax				tax
.1420	20 25 14	jsr $1425			jsr 	_RUNDispatchMain			; call the main dispatcher
.1423	80 d6		bra $13fb			bra 	RUNNewCommand
.1425					_RUNDispatchMain:
.1425	7c 50 1b	jmp ($1b50,x)			jmp 	(VectorTable,x)
.1428					_RUNSyntax:
.1428	4c fe 23	jmp $23fe		jmp	ErrorV_syntax
.142b					_RUNBreak:
.142b	4c 89 25	jmp $2589		jmp	ErrorV_break
.142e					_RUNNotToken:
.142e	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1430	90 f6		bcc $1428			bcc 	_RUNSyntax
.1432	20 6f 12	jsr $126f			jsr 	CommandLET 					; assignment
.1435	80 c4		bra $13fb			bra 	RUNNewCommand 				; loop round.
.1437					Command_Shift_Handler:
.1437	4c 40 24	jmp $2440		jmp	ErrorV_unimplemented
.143a					Command_END:
.143a	4c 1b 27	jmp $271b			jmp 	WarmStart
.050b					checkCounter:
>050b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.143d					Command_STOP:
.143d	4c a2 24	jmp $24a2		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1440					Command_Sys:
.1440	20 27 16	jsr $1627			jsr 	EXPEvalInteger16 			; execution address
.1443	5a		phy				phy
.1444	ad 69 06	lda $0669			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1447	ae c5 06	ldx $06c5			ldx 	('X'-'A')*4 + FastVariables
.144a	ac c9 06	ldy $06c9			ldy 	('Y'-'A')*4 + FastVariables
.144d	20 52 14	jsr $1452			jsr 	_CSCallIFR0 				; call the code
.1450	7a		ply				ply
.1451	60		rts				rts
.1452					_CSCallIFR0:
.1452	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1455					NoExec01:
.1455					NoExec02:
.1455					NoExec03:
.1455					NoExec04:
.1455					NoExec05:
.1455					NoExec06:
.1455					NoExec07:
.1455					NoExec08:
.1455	4c fe 23	jmp $23fe		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1458					EXPBinAdd:
.1458	24 0b		bit $0b				bit 	IFR0+IExp
.145a	30 6f		bmi $14cb			bmi 	EXPConcatenate
.145c	a2 0c		ldx #$0c			ldx 	#IFR1
.145e	4c 39 29	jmp $2939			jmp 	IFloatAdd
.1461					EXPBinSub:
.1461	24 0b		bit $0b				bit 	IFR0+IExp
.1463	30 3f		bmi $14a4			bmi 	EXPTypeError
.1465	a2 0c		ldx #$0c			ldx 	#IFR1
.1467	4c 32 29	jmp $2932			jmp 	IFloatSubtract
.146a					EXPBinMul:
.146a	24 0b		bit $0b				bit 	IFR0+IExp
.146c	30 36		bmi $14a4			bmi 	EXPTypeError
.146e	a2 0c		ldx #$0c			ldx 	#IFR1
.1470	4c e3 29	jmp $29e3			jmp 	IFloatMultiply
.1473					EXPBinFDiv:
.1473	24 0b		bit $0b				bit 	IFR0+IExp
.1475	30 2d		bmi $14a4			bmi 	EXPTypeError
.1477	a2 0c		ldx #$0c			ldx 	#IFR1
.1479	20 66 2c	jsr $2c66			jsr 	IFloatDivideFloat
.147c	b0 0f		bcs $148d			bcs 	EXPDZero
.147e	60		rts				rts
.147f					EXPBinIDiv:
.147f	24 0b		bit $0b				bit 	IFR0+IExp
.1481	30 21		bmi $14a4			bmi 	EXPTypeError
.1483	a2 0c		ldx #$0c			ldx 	#IFR1
.1485	20 66 2c	jsr $2c66			jsr 	IFloatDivideFloat
.1488	b0 03		bcs $148d			bcs 	EXPDZero
.148a	4c 43 2c	jmp $2c43			jmp 	IFloatIntegerR0
.148d					EXPDZero:
.148d	4c 77 24	jmp $2477		jmp	ErrorV_divzero
.1490					EXPBinIMod:
.1490	24 0b		bit $0b				bit 	IFR0+IExp
.1492	30 10		bmi $14a4			bmi 	EXPTypeError
.1494	a2 0c		ldx #$0c			ldx 	#IFR1
.1496	5a		phy				phy
.1497	20 7b 2b	jsr $2b7b			jsr 	IFPreProcessBitwise 		; set up everything.
.149a	d0 05		bne $14a1			bne 	EXPDRange
.149c	20 b4 2a	jsr $2ab4			jsr 	IFloatModulusInteger
.149f	7a		ply				ply
.14a0	60		rts				rts
.14a1					EXPDRange:
.14a1	4c 0f 24	jmp $240f		jmp	ErrorV_range
.14a4					EXPTypeError:
.14a4	4c 2e 24	jmp $242e		jmp	ErrorV_type
.14a7					EXPBinAnd:
.14a7	24 0b		bit $0b				bit 	IFR0+IExp
.14a9	30 f9		bmi $14a4			bmi 	EXPTypeError
.14ab	a2 0c		ldx #$0c			ldx 	#IFR1
.14ad	20 36 2b	jsr $2b36			jsr 	IFloatBitwiseAnd
.14b0	b0 ef		bcs $14a1			bcs 	EXPDRange
.14b2	60		rts				rts
.14b3					EXPBinOr:
.14b3	24 0b		bit $0b				bit 	IFR0+IExp
.14b5	30 ed		bmi $14a4			bmi 	EXPTypeError
.14b7	a2 0c		ldx #$0c			ldx 	#IFR1
.14b9	20 4d 2b	jsr $2b4d			jsr 	IFloatBitwiseOr
.14bc	b0 e3		bcs $14a1			bcs 	EXPDRange
.14be	60		rts				rts
.14bf					EXPBinXor:
.14bf	24 0b		bit $0b				bit 	IFR0+IExp
.14c1	30 e1		bmi $14a4			bmi 	EXPTypeError
.14c3	a2 0c		ldx #$0c			ldx 	#IFR1
.14c5	20 64 2b	jsr $2b64			jsr 	IFloatBitwiseXor
.14c8	b0 d7		bcs $14a1			bcs 	EXPDRange
.14ca	60		rts				rts
.14cb					EXPConcatenate:
.14cb	18		clc				clc
.14cc	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.14ce	72 0c		adc ($0c)			adc 	(IFR1)
.14d0	b0 2d		bcs $14ff			bcs 	_EXPCError
.14d2	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.14d4	da		phx				phx
.14d5	a6 09		ldx $09				ldx 	IFR0+1
.14d7	da		phx				phx
.14d8	20 91 26	jsr $2691			jsr 	StringTempAllocate 			; allocate string, set up return
.14db	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.14dd	a5 0c		lda $0c				lda 	IFR1
.14df	20 e8 14	jsr $14e8			jsr 	_EXPCCopyXA
.14e2	fa		plx				plx 								; copy second string
.14e3	68		pla				pla
.14e4	20 e8 14	jsr $14e8			jsr 	_EXPCCopyXA
.14e7	60		rts				rts
.14e8					_EXPCCopyXA:
.14e8	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.14ea	85 22		sta $22				sta 	zTemp0
.14ec	b2 22		lda ($22)			lda 	(zTemp0)					; length
.14ee	f0 0e		beq $14fe			beq 	_EXPCCExit 					; nothing.
.14f0	aa		tax				tax 								; count
.14f1	5a		phy				phy 								; start positioin
.14f2	a0 01		ldy #$01			ldy 	#1
.14f4					_EXPCCLoop:
.14f4	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.14f6	20 c6 26	jsr $26c6			jsr 	StringTempWrite
.14f9	c8		iny				iny
.14fa	ca		dex				dex
.14fb	d0 f7		bne $14f4			bne 	_EXPCCLoop
.14fd	7a		ply				ply
.14fe					_EXPCCExit:
.14fe	60		rts				rts
.14ff					_EXPCError:
.14ff	4c 1b 25	jmp $251b		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1502					EXPReturnTrue:
.1502	a2 08		ldx #$08			ldx 	#IFR0
.1504	a9 01		lda #$01			lda 	#1
.1506	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.1509	20 4e 2f	jsr $2f4e			jsr 	IFloatNegate
.150c	60		rts				rts
.150d					EXPReturnFalse:
.150d	a2 08		ldx #$08			ldx 	#IFR0
.150f	4c 43 2f	jmp $2f43			jmp 	IFloatSetZero
.1512					EXPCompareEqual:
.1512	20 48 15	jsr $1548			jsr 	EXPCompareBaseCode
.1515	c9 00		cmp #$00			cmp 	#0
.1517	f0 e9		beq $1502			beq 	EXPReturnTrue
.1519	80 f2		bra $150d			bra 	EXPReturnFalse
.151b					EXPCompareLess:
.151b	20 48 15	jsr $1548			jsr 	EXPCompareBaseCode
.151e	c9 ff		cmp #$ff			cmp 	#$FF
.1520	f0 e0		beq $1502			beq 	EXPReturnTrue
.1522	80 e9		bra $150d			bra 	EXPReturnFalse
.1524					EXPCompareGreater:
.1524	20 48 15	jsr $1548			jsr 	EXPCompareBaseCode
.1527	c9 01		cmp #$01			cmp 	#1
.1529	f0 d7		beq $1502			beq 	EXPReturnTrue
.152b	80 e0		bra $150d			bra 	EXPReturnFalse
.152d					EXPCompareNotEqual:
.152d	20 48 15	jsr $1548			jsr 	EXPCompareBaseCode
.1530	c9 00		cmp #$00			cmp 	#0
.1532	d0 ce		bne $1502			bne 	EXPReturnTrue
.1534	80 d7		bra $150d			bra 	EXPReturnFalse
.1536					EXPCompareLessEqual:
.1536	20 48 15	jsr $1548			jsr 	EXPCompareBaseCode
.1539	c9 01		cmp #$01			cmp 	#1
.153b	d0 c5		bne $1502			bne 	EXPReturnTrue
.153d	80 ce		bra $150d			bra 	EXPReturnFalse
.153f					EXPCompareGreaterEqual:
.153f	20 48 15	jsr $1548			jsr 	EXPCompareBaseCode
.1542	c9 ff		cmp #$ff			cmp 	#$FF
.1544	d0 bc		bne $1502			bne 	EXPReturnTrue
.1546	80 c5		bra $150d			bra 	EXPReturnFalse
.1548					EXPCompareBaseCode:
.1548	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.154a	30 10		bmi $155c			bmi 	_EXCBCString
.154c	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.154e	20 11 2c	jsr $2c11			jsr 	IFloatCompare
.1551	a5 08		lda $08				lda 	IFR0+IM0
.1553	f0 06		beq $155b			beq 	_EXCBCExit 					; return 0 if zero
.1555	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1557	50 02		bvc $155b			bvc 	_EXCBCExit
.1559	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.155b					_EXCBCExit:
.155b	60		rts				rts
.155c					_EXCBCString:
.155c	5a		phy				phy
.155d	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.155f	d2 0c		cmp ($0c)			cmp 	(IFR1)
.1561	90 02		bcc $1565			bcc 	_EXCBCSmaller
.1563	b2 0c		lda ($0c)			lda 	(IFR1)
.1565					_EXCBCSmaller:
.1565	aa		tax				tax
.1566	f0 0d		beq $1575			beq 	_EXCBCMatches 				; if zero common length matches
.1568	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.156a					_EXCBCCheckSmallerMatches:
.156a	c8		iny				iny 								; compare directly as far as common length
.156b	38		sec				sec
.156c	b1 0c		lda ($0c),y			lda 	(IFR1),y
.156e	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1570	d0 08		bne $157a			bne 	_EXCBCExit2
.1572	ca		dex				dex
.1573	d0 f5		bne $156a			bne 	_EXCBCCheckSmallerMatches
.1575					_EXCBCMatches:
.1575	38		sec				sec
.1576	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1578	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.157a					_EXCBCExit2:
.157a	7a		ply				ply
.157b	c9 00		cmp #$00			cmp 	#0
.157d	f0 04		beq $1583			beq 	_EXCBCReturn
.157f	30 03		bmi $1584			bmi 	_EXCBCFF
.1581	a9 01		lda #$01			lda 	#1
.1583					_EXCBCReturn:
.1583	60		rts				rts
.1584					_EXCBCFF:
.1584	a9 ff		lda #$ff			lda 	#$FF
.1586	60		rts				rts
.1587					_EXCBCRange:
.1587	4c 0f 24	jmp $240f		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.158a					EXPBinLeft:
.158a	a9 ff		lda #$ff			lda 	#$FF
.158c	8d 0c 05	sta $050c			sta 	EXPShiftLeftFlag
.158f	4c 95 15	jmp $1595			jmp 	EXPShiftCommon
.1592					EXPBinRight:
.1592	9c 0c 05	stz $050c			stz 	EXPShiftLeftFlag
.1595					EXPShiftCommon:
.1595	a5 0b		lda $0b				lda 	IFR0+IExp 					; both integers
.1597	05 0f		ora $0f				ora 	IFR1+IExp
.1599	29 7f		and #$7f			and 	#$7F
.159b	d0 35		bne $15d2			bne 	_EXPSRange
.159d	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.159f	29 e0		and #$e0			and 	#$E0
.15a1	05 09		ora $09				ora 	IFR0+IM1
.15a3	05 0a		ora $0a				ora 	IFR0+IM2
.15a5	d0 25		bne $15cc			bne 	_EXPSShiftZero 				; if so return zero
.15a7	5a		phy				phy
.15a8	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.15aa	29 1f		and #$1f			and 	#$1F
.15ac	f0 17		beq $15c5			beq 	_EXPSExit 					; exit if zero
.15ae	a8		tay				tay
.15af					_EXPSLoop:
.15af	a2 0c		ldx #$0c			ldx 	#IFR1
.15b1	2c 0c 05	bit $050c			bit 	EXPShiftLeftFlag
.15b4	30 05		bmi $15bb			bmi 	_EXPSShiftLeft
.15b6	20 72 2f	jsr $2f72			jsr 	IFloatShiftRight
.15b9	80 07		bra $15c2			bra 	_EXPSContinue
.15bb					_EXPSShiftLeft:
.15bb	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.15be	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts
.15c0	30 10		bmi $15d2			bmi 	_EXPSRange
.15c2					_EXPSContinue:
.15c2	88		dey				dey
.15c3	d0 ea		bne $15af			bne 	_EXPSLoop
.15c5					_EXPSExit:
.15c5	a2 0c		ldx #$0c			ldx 	#IFR1
.15c7	20 d4 2e	jsr $2ed4			jsr 	IFloatCopyFromRegister
.15ca	7a		ply				ply
.15cb	60		rts				rts
.15cc					_EXPSShiftZero:
.15cc	a2 08		ldx #$08			ldx 	#IFR0
.15ce	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.15d1	60		rts				rts
.15d2					_EXPSRange:
.15d2	4c 0f 24	jmp $240f		jmp	ErrorV_range
.050c					EXPShiftLeftFlag:
>050c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.15d5					EXPEvaluateExpression:
.15d5	a9 00		lda #$00			lda 	#0 							; current precedence
.15d7					EXPEvaluateExpressionPrecedenceA:
.15d7	48		pha				pha
.15d8	20 52 16	jsr $1652			jsr 	EXPTermValueR0				; do first term.
.15db					_EELoop:
.15db	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.15dd	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.15df	90 31		bcc $1612			bcc 	_EEExit
.15e1	aa		tax				tax 								; access the precedence of the operator.
.15e2	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.15e3	dd a8 18	cmp $18a8,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.15e6	b0 2b		bcs $1613			bcs 	_EEExit2
.15e8	48		pha				pha 								; save current precedence.
.15e9	da		phx				phx 								; save operator
.15ea	c8		iny				iny 								; consume operator
.15eb	da		phx				phx
.15ec	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.15ee	20 92 2e	jsr $2e92			jsr 	IFloatPushRx
.15f1	fa		plx				plx
.15f2	bd a8 18	lda $18a8,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.15f5	20 d7 15	jsr $15d7			jsr 	EXPEvaluateExpressionPrecedenceA
.15f8	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.15fa	20 b3 2e	jsr $2eb3			jsr 	IFloatPullRx
.15fd	fa		plx				plx 								; operator
.15fe	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.1600	45 0f		eor $0f				eor 	IFR1+IExp
.1602	30 08		bmi $160c			bmi 	_EEType
.1604					_EETypeOkay:
.1604	8a		txa				txa
.1605	0a		asl a				asl 	a 							; double -> X
.1606	aa		tax				tax
.1607	20 0f 16	jsr $160f			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.160a	80 cf		bra $15db			bra 	_EELoop
.160c					_EEType:
.160c	4c 2e 24	jmp $242e		jmp	ErrorV_type
.160f					_EECallBinary:
.160f	7c 50 1b	jmp ($1b50,x)			jmp 	(VectorTable,x)
.1612					_EEExit:
.1612	68		pla				pla 								; throw precedence
.1613					_EEExit2:
.1613	18		clc				clc
.1614	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1615					EXPEvalNumber:
.1615	20 d5 15	jsr $15d5			jsr 	EXPEvaluateExpression
.1618	24 0b		bit $0b				bit 	IFR0+IExp
.161a	30 01		bmi $161d			bmi 	EVUType
.161c	60		rts				rts
.161d					EVUType:
.161d	4c 2e 24	jmp $242e		jmp	ErrorV_type
.1620					EXPEvalInteger:
.1620	20 15 16	jsr $1615			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1623	20 43 2c	jsr $2c43			jsr 	IFloatIntegerR0
.1626	60		rts				rts
.1627					EXPEvalInteger16:
.1627	20 20 16	jsr $1620			jsr 	EXPEvalInteger
.162a	a5 0a		lda $0a				lda 	IFR0+IM2
.162c	d0 21		bne $164f			bne 	EVURange
.162e	a6 09		ldx $09				ldx 	IFR0+IM1
.1630	a5 08		lda $08				lda 	IFR0+IM0
.1632	60		rts				rts
.1633					EXPEvalInteger8:
.1633	20 20 16	jsr $1620			jsr 	EXPEvalInteger
.1636	a5 0a		lda $0a				lda 	IFR0+IM2
.1638	05 09		ora $09				ora 	IFR0+IM1
.163a	d0 13		bne $164f			bne 	EVURange
.163c	a5 08		lda $08				lda 	IFR0+IM0
.163e	60		rts				rts
.163f					EXPEvalString:
.163f	20 d5 15	jsr $15d5			jsr 	EXPEvaluateExpression
.1642	24 0b		bit $0b				bit 	IFR0+IExp
.1644	10 d7		bpl $161d			bpl 	EVUType
.1646	a6 09		ldx $09				ldx 	IFR0+IM1
.1648	86 23		stx $23				stx 	zTemp0+1
.164a	a5 08		lda $08				lda 	IFR0+IM0
.164c	85 22		sta $22				sta 	zTemp0
.164e	60		rts				rts
.164f					EVURange:
.164f	4c 0f 24	jmp $240f		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1652					EXPTermValueR0:
.1652	20 9d 16	jsr $169d			jsr 	EXPTermR0 					; get term
.1655	90 45		bcc $169c			bcc 	_ETVNotReference 			; exit if value.
.1657	5a		phy				phy
.1658	a0 03		ldy #$03			ldy 	#3 							; get type
.165a	b1 08		lda ($08),y			lda 	(IFR0),y
.165c	30 14		bmi $1672			bmi 	_ETVDereferenceString
.165e	85 0b		sta $0b				sta 	IFR0+IExp 					; dereference to R0
.1660	88		dey				dey
.1661	b1 08		lda ($08),y			lda 	(IFR0),y
.1663	85 0a		sta $0a				sta 	IFR0+IM2
.1665	88		dey				dey
.1666	b1 08		lda ($08),y			lda 	(IFR0),y
.1668	aa		tax				tax
.1669	b2 08		lda ($08)			lda 	(IFR0)
.166b	86 09		stx $09				stx 	IFR0+IM1
.166d	85 08		sta $08				sta 	IFR0+IM0
.166f	7a		ply				ply
.1670	18		clc				clc
.1671	60		rts				rts
.1672					_ETVDereferenceString:
.1672	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1674	b1 08		lda ($08),y			lda 	(IFR0),y
.1676	12 08		ora ($08)			ora 	(IFR0)
.1678	f0 11		beq $168b			beq 	_ETVNull
.167a	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.167c	aa		tax				tax
.167d	b2 08		lda ($08)			lda 	(IFR0)
.167f	18		clc				clc 								; add two so points to actual string.
.1680	69 02		adc #$02			adc 	#2
.1682	90 01		bcc $1685			bcc 	_EVDSNoCarry
.1684	e8		inx				inx
.1685					_EVDSNoCarry:
.1685	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1687	85 08		sta $08				sta 	IFR0
.1689	80 08		bra $1693			bra 	_ETVFillExit 				; tidy up and exit.
.168b					_ETVNull:
.168b	a9 9b		lda #$9b			lda 	#_EVTNString & $FF
.168d	85 08		sta $08				sta 	IFR0+IM0
.168f	a9 16		lda #$16			lda 	#_EVTNString >> 8
.1691	85 09		sta $09				sta 	IFR0+IM1
.1693					_ETVFillExit:
.1693	64 0a		stz $0a				stz 	IFR0+IM2
.1695	a9 80		lda #$80			lda 	#$80
.1697	85 0b		sta $0b				sta 	IFR0+IExp
.1699	7a		ply				ply
.169a	60		rts				rts
.169b					_EVTNString:
>169b	00						.byte 	0
.169c					_ETVNotReference:
.169c	60		rts				rts
.169d					EXPTermR0:
.169d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.169f	30 10		bmi $16b1			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.16a1	c8		iny				iny 								; consume element
.16a2	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.16a4	b0 08		bcs $16ae			bcs 	_ETMIdentifier
.16a6	20 d5 16	jsr $16d5			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.16a9	20 08 17	jsr $1708			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.16ac	18		clc				clc 								; return value
.16ad	60		rts				rts
.16ae					_ETMIdentifier:
.16ae	4c da 28	jmp $28da			jmp 	VARCheckSimple 				; check simple variables A-Z
.16b1					_ETMIsUnaryOrMinus:
.16b1	c8		iny				iny 								; consume element
.16b2	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.16b4	d0 0a		bne $16c0			bne 	_ETMCheckUnary
.16b6	20 52 16	jsr $1652			jsr 	EXPTermValueR0 				; get a term to negate
.16b9	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.16bb	20 4e 2f	jsr $2f4e			jsr 	IFloatNegate
.16be	18		clc				clc
.16bf	60		rts				rts
.16c0					_ETMCheckUnary:
.16c0	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.16c2	90 0e		bcc $16d2			bcc 	_ETMUnarySyntax
.16c4	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.16c6	b0 0a		bcs $16d2			bcs 	_ETMUnarySyntax
.16c8	0a		asl a				asl 	a
.16c9	aa		tax				tax
.16ca	20 cf 16	jsr $16cf			jsr 	_ETMCallUnaryFunction
.16cd	18		clc				clc
.16ce	60		rts				rts
.16cf					_ETMCallUnaryFunction:
.16cf	7c 50 1b	jmp ($1b50,x)			jmp 	(VectorTable,x)
.16d2					_ETMUnarySyntax:
.16d2	4c fe 23	jmp $23fe		jmp	ErrorV_syntax
.16d5					EXPExtractTokenisedInteger:
.16d5	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.16d7	64 0b		stz $0b				stz 	IFR0+IExp
.16d9	64 09		stz $09				stz 	IFR0+IM1
.16db	64 0a		stz $0a				stz 	IFR0+IM2
.16dd					_ETMConstant:
.16dd	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.16df	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.16e1	b0 24		bcs $1707			bcs 	_ETMCExit 					; no.
.16e3	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.16e5	a5 09		lda $09				lda 	IFR0+IM1
.16e7	85 0a		sta $0a				sta 	IFR0+IM2
.16e9	a5 08		lda $08				lda 	IFR0+IM0
.16eb	85 09		sta $09				sta 	IFR0+IM1
.16ed	64 08		stz $08				stz 	IFR0+IM0
.16ef	8a		txa				txa
.16f0	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.16f1	66 0a		ror $0a				ror 	IFR0+IM2
.16f3	66 09		ror $09				ror 	IFR0+IM1
.16f5	66 08		ror $08				ror 	IFR0+IM0
.16f7	4a		lsr a				lsr 	a
.16f8	66 0a		ror $0a				ror 	IFR0+IM2
.16fa	66 09		ror $09				ror 	IFR0+IM1
.16fc	66 08		ror $08				ror 	IFR0+IM0
.16fe	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1700	11 18		ora ($18),y			ora 	(codePtr),y
.1702	85 08		sta $08				sta 	IFR0+IM0
.1704	c8		iny				iny 								; consume, loop back
.1705	80 d6		bra $16dd			bra 	_ETMConstant
.1707					_ETMCExit:
.1707	60		rts				rts
.1708					EXPCheckDecimalFollows:
.1708	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.170a	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.170c	d0 19		bne $1727			bne 	_ETMCDExit
.170e	c8		iny				iny 								; consume token.
.170f	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1711	5a		phy				phy									; save current position
.1712	48		pha				pha 								; save count of chars.
.1713	38		sec				sec 								; address into YX : y + codePtr+1
.1714	98		tya				tya
.1715	65 18		adc $18				adc 	codePtr
.1717	aa		tax				tax
.1718	a5 19		lda $19				lda 	codePtr+1
.171a	69 00		adc #$00			adc 	#0
.171c	a8		tay				tay
.171d	68		pla				pla 								; get count.
.171e	20 e7 2d	jsr $2de7			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1721	7a		ply				ply 								; go to next token.
.1722	98		tya				tya
.1723	38		sec				sec
.1724	71 18		adc ($18),y			adc 	(codePtr),y
.1726	a8		tay				tay
.1727					_ETMCDExit:
.1727	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1728					EXPUnaryAbs:
.1728	20 15 16	jsr $1615			jsr 	EXPEvalNumber 					; number to R0
.172b	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.172e	20 87 2b	jsr $2b87			jsr 	IFloatAbsoluteR0
.1731	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1732					EXPUnaryAsc:
.1732	20 3f 16	jsr $163f			jsr 	EXPEvalString 					; string to R0, zTemp0
.1735	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.1738	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.173a	f0 06		beq $1742			beq 	_EXAZero 						; if so return 0
.173c	5a		phy				phy 									; otherwise get first character
.173d	a0 01		ldy #$01			ldy 	#1
.173f	b1 22		lda ($22),y			lda 	(zTemp0),y
.1741	7a		ply				ply
.1742					_EXAZero:
.1742	a2 08		ldx #$08			ldx 	#IFR0
.1744	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.1747	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1748					EXPUnaryChr:
.1748	20 33 16	jsr $1633			jsr 	EXPEvalInteger8 				; expr
.174b	48		pha				pha 									; push on stack
.174c	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.174f	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1751	20 91 26	jsr $2691			jsr 	StringTempAllocate
.1754	68		pla				pla
.1755	20 c6 26	jsr $26c6			jsr 	StringTempWrite
.1758	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1759					EXPUnaryDec:
.1759	20 3f 16	jsr $163f			jsr 	EXPEvalString 					; string to R0, zTemp0
.175c	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.175f	5a		phy				phy
.1760	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1762	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.1765	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1767	f0 3b		beq $17a4			beq 	_EUDError 						; empty string
.1769	aa		tax				tax
.176a	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.176c					_EUDLoop:
.176c	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next
.176e	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1770	90 02		bcc $1774			bcc 	_EUDNoCase
.1772	e9 20		sbc #$20			sbc 	#$20
.1774					_EUDNoCase:
.1774	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1776	90 2c		bcc $17a4			bcc 	_EUDError
.1778	c9 3a		cmp #$3a			cmp 	#'9'+1
.177a	90 0a		bcc $1786			bcc 	_EUDOkay
.177c	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.177e	90 24		bcc $17a4			bcc 	_EUDError
.1780	c9 47		cmp #$47			cmp 	#'F'+1
.1782	b0 20		bcs $17a4			bcs 	_EUDError
.1784	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1786					_EUDOkay:
.1786	29 0f		and #$0f			and 	#15 							; make constant
.1788	da		phx				phx
.1789	48		pha				pha
.178a	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.178c	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.178f	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1792	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1795	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1798	68		pla				pla 									; pop constant and OR in
.1799	fa		plx				plx
.179a	05 08		ora $08				ora 	IFR0+IM0
.179c	85 08		sta $08				sta 	IFR0+IM0
.179e	c8		iny				iny 									; next
.179f	ca		dex				dex
.17a0	d0 ca		bne $176c			bne 	_EUDLoop
.17a2	7a		ply				ply
.17a3	60		rts				rts
.17a4					_EUDError:
.17a4	4c 20 24	jmp $2420		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.17a7					EXPUnaryInlineDec:
.17a7	4c fe 23	jmp $23fe		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.17aa					EXPUnaryPeek:
.17aa	20 27 16	jsr $1627			jsr 	EXPEvalInteger16 				; number to R0
.17ad	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.17b0	b2 08		lda ($08)			lda 	(IFR0)
.17b2	a2 08		ldx #$08			ldx 	#IFR0
.17b4	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.17b7	60		rts				rts
.17b8					EXPUnaryDeek:
.17b8	20 27 16	jsr $1627			jsr 	EXPEvalInteger16 				; number to R0
.17bb	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.17be	5a		phy				phy
.17bf	a0 01		ldy #$01			ldy 	#1
.17c1	b1 08		lda ($08),y			lda 	(IFR0),y
.17c3	7a		ply				ply
.17c4	48		pha				pha
.17c5	b2 08		lda ($08)			lda 	(IFR0)
.17c7	a2 08		ldx #$08			ldx 	#IFR0
.17c9	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.17cc	68		pla				pla
.17cd	85 09		sta $09				sta 	IFR0+IM1
.17cf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.17d0					EXPUnaryNull:
.17d0	20 52 16	jsr $1652			jsr 	EXPTermValueR0
.17d3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.17d4					EXPUnaryFrac:
.17d4	20 15 16	jsr $1615			jsr 	EXPEvalNumber 					; number to R0
.17d7	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.17da	20 ed 2b	jsr $2bed			jsr 	IFloatFractionalR0
.17dd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.17de					EXPUnaryInkey:
.17de	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.17e1	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.17e3	20 91 26	jsr $2691			jsr 	StringTempAllocate
.17e6	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.17e9	b0 06		bcs $17f1			bcs 	_EUIExit
.17eb	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.17ee	20 c6 26	jsr $26c6			jsr 	StringTempWrite
.17f1					_EUIExit:
.17f1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.17f2					EXPUnaryInt:
.17f2	20 15 16	jsr $1615			jsr 	EXPEvalNumber 					; number to R0
.17f5	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.17f8	20 43 2c	jsr $2c43			jsr 	IFloatIntegerR0
.17fb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.17fc					EXPUnaryLen:
.17fc	20 3f 16	jsr $163f			jsr 	EXPEvalString 					; string to R0, zTemp0
.17ff	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.1802	b2 22		lda ($22)			lda 	(zTemp0)
.1804	a2 08		ldx #$08			ldx 	#IFR0
.1806	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.1809	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.180a					EXPUnaryParenthesis:
.180a	20 15 16	jsr $1615			jsr 	EXPEvalNumber 					; number to R0
.180d	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.1810	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1811					EXPUnaryRnd:
.1811	20 15 16	jsr $1615			jsr 	EXPEvalNumber 				; number to R0
.1814	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 				; )
.1817	a2 08		ldx #$08			ldx 	#IFR0
.1819	20 30 18	jsr $1830			jsr 	EXPLoadInRandom
.181c	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.181e	85 0b		sta $0b				sta 	IFR0+IExp
.1820	60		rts				rts
.1821					ExpUnaryRand:
.1821	20 20 16	jsr $1620			jsr 	EXPEvalInteger 				; integer to R0
.1824	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 				; )
.1827	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1829	20 30 18	jsr $1830			jsr 	EXPLoadInRandom
.182c	20 b4 2a	jsr $2ab4			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.182f	60		rts				rts
.1830					EXPLoadInRandom:
.1830	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.1833	20 45 18	jsr $1845			jsr 	EXPRandom32
.1836	95 00		sta $00,x			sta 	IM0,x
.1838	20 45 18	jsr $1845			jsr 	EXPRandom32
.183b	95 01		sta $01,x			sta 	IM1,x
.183d	20 45 18	jsr $1845			jsr 	EXPRandom32
.1840	29 7f		and #$7f			and 	#$7F
.1842	95 02		sta $02,x			sta 	IM2,x
.1844	60		rts				rts
.1845					EXPRandom32:
.1845	5a		phy				phy
.1846	a0 08		ldy #$08			ldy 	#8
.1848	ad 0d 05	lda $050d			lda 	EXPSeed+0
.184b	0d 0e 05	ora $050e			ora 	EXPSeed+1
.184e	0d 0f 05	ora $050f			ora 	EXPSeed+2
.1851	0d 10 05	ora $0510			ora 	EXPSeed+3
.1854	d0 08		bne $185e			bne 	_EXPRNoReset
.1856	ee 0d 05	inc $050d			inc 	EXPSeed+0
.1859	a0 10		ldy #$10			ldy 	#16
.185b	8c 10 05	sty $0510			sty 	EXPSeed+3
.185e					_EXPRNoReset:
.185e	ad 0d 05	lda $050d			lda 	EXPSeed+0
.1861					_EXPRLoop:
.1861	0a		asl a				asl		a
.1862	2e 0e 05	rol $050e			rol 	EXPSeed+1
.1865	2e 0f 05	rol $050f			rol 	EXPSeed+2
.1868	2e 10 05	rol $0510			rol 	EXPSeed+3
.186b	90 02		bcc $186f			bcc 	_EXPRNoEOR
.186d	49 c5		eor #$c5			eor 	#$C5
.186f					_EXPRNoEOR:
.186f	88		dey				dey
.1870	d0 ef		bne $1861			bne 	_EXPRLoop
.1872	8d 0d 05	sta $050d			sta 	EXPSeed+0
.1875	7a		ply				ply
.1876	60		rts				rts
.050d					EXPSeed:
>050d							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1877					EXPUnarySgn:
.1877	20 15 16	jsr $1615			jsr 	EXPEvalNumber 					; number to R0
.187a	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.187d	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.187f	20 e5 2e	jsr $2ee5			jsr 	IFloatCopyToRegister
.1882	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1884	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.1887	a2 0c		ldx #$0c			ldx 	#IFR1
.1889	20 11 2c	jsr $2c11			jsr 	IFloatCompare 					; compare R1 vs 0.
.188c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.188d					EXPUnarySqr:
.188d	20 15 16	jsr $1615			jsr 	EXPEvalNumber 					; number to R0
.1890	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.1893	20 8f 2b	jsr $2b8f			jsr 	IFloatSquareRootR0 				; square root.
.1896	b0 01		bcs $1899			bcs 	_EUSValue
.1898	60		rts				rts
.1899					_EUSValue:
.1899	4c 0f 24	jmp $240f		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.189c					EXPUnaryHex:
.189c	20 20 16	jsr $1620			jsr 	EXPEvalInteger 					; expr
.189f	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.18a2	5a		phy				phy
.18a3	a9 10		lda #$10			lda 	#16
.18a5	20 e4 2c	jsr $2ce4			jsr 	IFloatIntegerToStringR0
.18a8	80 0a		bra $18b4			bra 	EUSMain
.18aa					EXPUnaryStr:
.18aa	20 15 16	jsr $1615			jsr 	EXPEvalNumber 					; expr
.18ad	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.18b0	5a		phy				phy
.18b1	20 40 2d	jsr $2d40			jsr 	IFloatFloatToStringR0 			; convert to string
.18b4					EUSMain:
.18b4	b0 18		bcs $18ce			bcs 	_EUSError
.18b6	86 22		stx $22				stx 	zTemp0 							; save string address
.18b8	84 23		sty $23				sty 	zTemp0+1
.18ba	48		pha				pha 									; save count
.18bb	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.18bd	20 91 26	jsr $2691			jsr 	StringTempAllocate
.18c0	fa		plx				plx 									; count in X
.18c1	a0 00		ldy #$00			ldy 	#0
.18c3					_EUSCopy:
.18c3	b1 22		lda ($22),y			lda 	(zTemp0),y
.18c5	c8		iny				iny
.18c6	20 c6 26	jsr $26c6			jsr 	StringTempWrite
.18c9	ca		dex				dex
.18ca	d0 f7		bne $18c3			bne	 	_EUSCopy
.18cc	7a		ply				ply
.18cd	60		rts				rts
.18ce					_EUSError:
.18ce	4c 0f 24	jmp $240f		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.18d1					EXPUnaryInlineString:
.18d1	18		clc				clc 								; physical address -> IM0,1
.18d2	98		tya				tya
.18d3	65 18		adc $18				adc 	codePtr
.18d5	85 08		sta $08				sta 	IFR0+IM0
.18d7	a5 19		lda $19				lda 	codePtr+1
.18d9	69 00		adc #$00			adc 	#0
.18db	85 09		sta $09				sta 	IFR0+IM1
.18dd	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in rest
.18df	a9 80		lda #$80			lda 	#$80
.18e1	85 0b		sta $0b				sta 	IFR0+IExp
.18e3	98		tya				tya	 								; skip over it.
.18e4	38		sec				sec
.18e5	71 18		adc ($18),y			adc 	(codePtr),y
.18e7	a8		tay				tay
.18e8	60		rts				rts
.18e9					_EXPUISRange:
.18e9	4c 0f 24	jmp $240f		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.18ec					EXPUnaryLeft:
.18ec	20 32 19	jsr $1932			jsr 	EXPCommonStart 					; <string>,
.18ef	48		pha				pha 									; save string address on stack
.18f0	da		phx				phx
.18f1	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.18f3	48		pha				pha
.18f4	20 33 16	jsr $1633			jsr 	EXPEvalInteger8 				; characters to do
.18f7	80 44		bra $193d			bra 	EXPSubstringCommon
.18f9					EXPUnaryRight:
.18f9	20 32 19	jsr $1932			jsr 	EXPCommonStart 					; <string>,
.18fc	48		pha				pha 									; save string address on stack
.18fd	da		phx				phx
.18fe	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1900	48		pha				pha
.1901	20 33 16	jsr $1633			jsr 	EXPEvalInteger8 				; characters to do
.1904	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.1906	68		pla				pla
.1907	38		sec				sec
.1908	e5 22		sbc $22				sbc 	zTemp0
.190a	b0 02		bcs $190e			bcs 	_EUROffLeft
.190c	a9 00		lda #$00			lda 	#0
.190e					_EUROffLeft:
.190e	48		pha				pha 									; start pos
.190f	a9 ff		lda #$ff			lda 	#255
.1911	80 2a		bra $193d			bra 	EXPSubstringCommon
.1913					EXPUnaryMid:
.1913	20 32 19	jsr $1932			jsr 	EXPCommonStart 					; <string>,
.1916	48		pha				pha 									; save string address on stack
.1917	da		phx				phx
.1918	20 33 16	jsr $1633			jsr 	EXPEvalInteger8 				; characters start
.191b	f0 12		beq $192f			beq 	_EUSError 						; 1 is left
.191d	3a		dec a				dec 	a 								; zero based.
.191e	48		pha				pha
.191f	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1921	c9 99		cmp #$99			cmp 	#PR_COMMA
.1923	f0 04		beq $1929			beq 	_EUMLength 						; if so m is provided
.1925	a9 ff		lda #$ff			lda 	#255 							; default m
.1927	80 14		bra $193d			bra 	EXPSubstringCommon
.1929					_EUMLength:
.1929	c8		iny				iny 									; consume comma
.192a	20 33 16	jsr $1633			jsr 	EXPEvalInteger8 				; characters to do
.192d	80 0e		bra $193d			bra 	EXPSubstringCommon
.192f					_EUSError:
.192f	4c 20 24	jmp $2420		jmp	ErrorV_value
.1932					EXPCommonStart:
.1932	20 3f 16	jsr $163f			jsr 	EXPEvalString
.1935	20 a3 25	jsr $25a3			jsr 	ERRCheckComma
.1938	a5 08		lda $08				lda 	IFR0+IM0
.193a	a6 09		ldx $09				ldx 	IFR0+IM1
.193c	60		rts				rts
.193d					EXPSubstringCommon:
.193d	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.193f	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; check right bracket.
.1942	68		pla				pla 									; start position
.1943	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1945	fa		plx				plx 									; get string address to zTemp2.
.1946	86 27		stx $27				stx 	zTemp2+1
.1948	68		pla				pla
.1949	85 26		sta $26				sta 	zTemp2
.194b	38		sec				sec 									; length - start is the max count of chars
.194c	b2 26		lda ($26)			lda 	(zTemp2)
.194e	e5 25		sbc $25				sbc 	zTemp1+1
.1950	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1952	b0 02		bcs $1956			bcs 	_EXPSSNoTrim
.1954	85 24		sta $24				sta 	zTemp1 							; update count with available
.1956					_EXPSSNoTrim:
.1956	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1958	20 91 26	jsr $2691			jsr 	StringTempAllocate 				; allocate memory for it.
.195b	a5 24		lda $24				lda 	zTemp1 							; zero length string
.195d	f0 15		beq $1974			beq 	_EXPSSExit
.195f	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1961	d2 26		cmp ($26)			cmp 	(zTemp2)
.1963	b0 0f		bcs $1974			bcs 	_EXPSSExit
.1965	5a		phy				phy
.1966	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1968	c8		iny				iny 									; +1 for the length byte
.1969					_EXPSSCopy:
.1969	b1 26		lda ($26),y			lda 	(zTemp2),y
.196b	20 c6 26	jsr $26c6			jsr 	StringTempWrite
.196e	c8		iny				iny
.196f	c6 24		dec $24				dec 	zTemp1
.1971	d0 f6		bne $1969			bne 	_EXPSSCopy
.1973	7a		ply				ply
.1974					_EXPSSExit:
.1974	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1975					EXPUnaryVal:
.1975	20 3f 16	jsr $163f			jsr 	EXPEvalString 					; string to R0, zTemp0
.1978	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 					; )
.197b	20 7f 19	jsr $197f			jsr 	VALConversionZTemp0
.197e	60		rts				rts
.197f					VALConversionZTemp0:
.197f	5a		phy				phy
.1980	18		clc				clc
.1981	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1983	69 01		adc #$01			adc 	#1
.1985	aa		tax				tax
.1986	a5 23		lda $23				lda 	zTemp0+1
.1988	69 00		adc #$00			adc 	#0
.198a	a8		tay				tay
.198b	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.198d	20 a7 2d	jsr $2da7			jsr 	IFloatStringToFloatR0 			; do conversion
.1990	b0 02		bcs $1994			bcs 	_EUVError
.1992	7a		ply				ply
.1993	60		rts				rts
.1994					_EUVError:
.1994	4c 20 24	jmp $2420		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1997					BinaryPrecedence:
>1997	02					.byte	 2	; $ef =
>1998	02					.byte	 2	; $f0 <>
>1999	02					.byte	 2	; $f1 <=
>199a	02					.byte	 2	; $f2 <
>199b	02					.byte	 2	; $f3 >=
>199c	02					.byte	 2	; $f4 >
>199d	01					.byte	 1	; $f5 XOR
>199e	01					.byte	 1	; $f6 OR
>199f	01					.byte	 1	; $f7 AND
>19a0	04					.byte	 4	; $f8 DIV
>19a1	04					.byte	 4	; $f9 MOD
>19a2	04					.byte	 4	; $fa <<
>19a3	04					.byte	 4	; $fb >>
>19a4	04					.byte	 4	; $fc /
>19a5	04					.byte	 4	; $fd *
>19a6	03					.byte	 3	; $fe -
>19a7	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.19a8					StructureOffsets:
>19a8	01					.byte	1  	; $80 REPEAT
>19a9	ff					.byte	255	; $81 UNTIL
>19aa	01					.byte	1  	; $82 WHILE
>19ab	ff					.byte	255	; $83 WEND
>19ac	01					.byte	1  	; $84 IF
>19ad	ff					.byte	255	; $85 ENDIF
>19ae	01					.byte	1  	; $86 DO
>19af	ff					.byte	255	; $87 LOOP
>19b0	01					.byte	1  	; $88 PROC
>19b1	ff					.byte	255	; $89 ENDPROC
>19b2	01					.byte	1  	; $8a FOR
>19b3	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.19b4					StandardTokens:
>19b4	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>19bb	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>19c1	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>19c7	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>19cc	02 49 46				.byte	$02,$49,$46                             	; $84 if
>19cf	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>19d5	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>19d8	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>19dd	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>19e2	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>19ea	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>19ee	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>19f3	00					.byte	$00                                     	; $8c [[end]]
>19f4	00					.byte	$00                                     	; $8d [[shift]]
>19f5	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>19fa	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>19ff	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1a02	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1a07	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1a0b	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1a11	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1a17	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1a1c	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1a20	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1a24	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1a29	01 2c					.byte	$01,$2c                                 	; $99 ,
>1a2b	01 3b					.byte	$01,$3b                                 	; $9a ;
>1a2d	01 3a					.byte	$01,$3a                                 	; $9b :
>1a2f	01 27					.byte	$01,$27                                 	; $9c '
>1a31	01 29					.byte	$01,$29                                 	; $9d )
>1a33	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1a37	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1a3d	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1a41	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1a45	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1a4a	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1a4e	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1a55	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1a5a	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1a5f	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1a64	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1a69	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1a6e	00					.byte	0											; $aa
>1a6f	00					.byte	0											; $ab
>1a70	00					.byte	0											; $ac
>1a71	00					.byte	0											; $ad
>1a72	00					.byte	0											; $ae
>1a73	00					.byte	0											; $af
>1a74	00					.byte	0											; $b0
>1a75	00					.byte	0											; $b1
>1a76	00					.byte	0											; $b2
>1a77	00					.byte	0											; $b3
>1a78	00					.byte	0											; $b4
>1a79	00					.byte	0											; $b5
>1a7a	00					.byte	0											; $b6
>1a7b	00					.byte	0											; $b7
>1a7c	00					.byte	0											; $b8
>1a7d	00					.byte	0											; $b9
>1a7e	00					.byte	0											; $ba
>1a7f	00					.byte	0											; $bb
>1a80	00					.byte	0											; $bc
>1a81	00					.byte	0											; $bd
>1a82	00					.byte	0											; $be
>1a83	00					.byte	0											; $bf
>1a84	00					.byte	0											; $c0
>1a85	00					.byte	0											; $c1
>1a86	00					.byte	0											; $c2
>1a87	00					.byte	0											; $c3
>1a88	00					.byte	0											; $c4
>1a89	00					.byte	0											; $c5
>1a8a	00					.byte	0											; $c6
>1a8b	00					.byte	0											; $c7
>1a8c	00					.byte	0											; $c8
>1a8d	00					.byte	0											; $c9
>1a8e	00					.byte	0											; $ca
>1a8f	00					.byte	0											; $cb
>1a90	00					.byte	0											; $cc
>1a91	00					.byte	0											; $cd
>1a92	00					.byte	0											; $ce
>1a93	00					.byte	0											; $cf
>1a94	00					.byte	0											; $d0
>1a95	00					.byte	0											; $d1
>1a96	00					.byte	0											; $d2
>1a97	00					.byte	0											; $d3
>1a98	00					.byte	0											; $d4
>1a99	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1a9f	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1aa5	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1aad	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1ab4	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1aba	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ac0	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1ac5	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1aca	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1acf	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1ad4	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1ad9	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1adf	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1ae4	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1aec	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1af3	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1af8	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1afd	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1b03	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1b08	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1b0e	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1b13	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1b19	01 28					.byte	$01,$28                                 	; $eb (
>1b1b	01 24					.byte	$01,$24                                 	; $ec $
>1b1d	00					.byte	$00                                     	; $ed [[decimal]]
>1b1e	00					.byte	$00                                     	; $ee [[string]]
>1b1f	01 3d					.byte	$01,$3d                                 	; $ef =
>1b21	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1b24	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1b27	01 3c					.byte	$01,$3c                                 	; $f2 <
>1b29	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1b2c	01 3e					.byte	$01,$3e                                 	; $f4 >
>1b2e	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1b32	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1b35	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1b39	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1b3d	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1b41	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1b44	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1b47	01 2f					.byte	$01,$2f                                 	; $fc /
>1b49	01 2a					.byte	$01,$2a                                 	; $fd *
>1b4b	01 2d					.byte	$01,$2d                                 	; $fe -
>1b4d	01 2b					.byte	$01,$2b                                 	; $ff +
>1b4f	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1b50					VectorTable:
>1b50	f2 22					.word	Command_REPEAT           ; $80 REPEAT
>1b52	fb 22					.word	Command_UNTIL            ; $81 UNTIL
>1b54	d3 23					.word	Command_WHILE            ; $82 WHILE
>1b56	f2 23					.word	Command_WEND             ; $83 WEND
>1b58	ca 22					.word	IfCommand                ; $84 IF
>1b5a	f1 22					.word	EndIf                    ; $85 ENDIF
>1b5c	67 21					.word	Command_DO               ; $86 DO
>1b5e	7f 21					.word	Command_LOOP             ; $87 LOOP
>1b60	55 14					.word	NoExec08                 ; $88 PROC
>1b62	5b 21					.word	Command_ENDPROC          ; $89 ENDPROC
>1b64	88 21					.word	Command_FOR              ; $8a FOR
>1b66	15 22					.word	Command_NEXT             ; $8b NEXT
>1b68	db 13					.word	RUNEndOfLine             ; $8c [[END]]
>1b6a	37 14					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1b6c	ea 22					.word	ElseCode                 ; $8e ELSE
>1b6e	55 14					.word	NoExec01                 ; $8f THEN
>1b70	55 14					.word	NoExec02                 ; $90 TO
>1b72	55 14					.word	NoExec03                 ; $91 STEP
>1b74	6f 12					.word	CommandLET               ; $92 LET
>1b76	c0 11					.word	Command_Print            ; $93 PRINT
>1b78	b9 11					.word	Command_Input            ; $94 INPUT
>1b7a	1f 21					.word	Command_CALL             ; $95 CALL
>1b7c	40 14					.word	Command_Sys              ; $96 SYS
>1b7e	c2 13					.word	Command_REM              ; $97 REM
>1b80	70 21					.word	Command_EXIT             ; $98 EXIT
>1b82	55 14					.word	NoExec04                 ; $99 ,
>1b84	55 14					.word	NoExec05                 ; $9a ;
>1b86	55 14					.word	NoExec06                 ; $9b :
>1b88	c2 13					.word	Command_REM2             ; $9c '
>1b8a	55 14					.word	NoExec07                 ; $9d )
>1b8c	73 10					.word	CommandDIM               ; $9e DIM
>1b8e	23 10					.word	Command_CLEAR            ; $9f CLEAR
>1b90	b9 13					.word	Command_NEW              ; $a0 NEW
>1b92	cf 13					.word	Command_RUN              ; $a1 RUN
>1b94	3d 14					.word	Command_STOP             ; $a2 STOP
>1b96	3a 14					.word	Command_END              ; $a3 END
>1b98	15 10					.word	Command_ASSERT           ; $a4 ASSERT
>1b9a	e9 12					.word	Command_LIST             ; $a5 LIST
>1b9c	18 27					.word	NotImplemented           ; $a6 SAVE
>1b9e	18 27					.word	NotImplemented           ; $a7 LOAD
>1ba0	92 11					.word	Command_Poke             ; $a8 POKE
>1ba2	8f 11					.word	Command_Doke             ; $a9 DOKE
>1ba4	18 27					.word	NotImplemented           ; $aa
>1ba6	18 27					.word	NotImplemented           ; $ab
>1ba8	18 27					.word	NotImplemented           ; $ac
>1baa	18 27					.word	NotImplemented           ; $ad
>1bac	18 27					.word	NotImplemented           ; $ae
>1bae	18 27					.word	NotImplemented           ; $af
>1bb0	18 27					.word	NotImplemented           ; $b0
>1bb2	18 27					.word	NotImplemented           ; $b1
>1bb4	18 27					.word	NotImplemented           ; $b2
>1bb6	18 27					.word	NotImplemented           ; $b3
>1bb8	18 27					.word	NotImplemented           ; $b4
>1bba	18 27					.word	NotImplemented           ; $b5
>1bbc	18 27					.word	NotImplemented           ; $b6
>1bbe	18 27					.word	NotImplemented           ; $b7
>1bc0	18 27					.word	NotImplemented           ; $b8
>1bc2	18 27					.word	NotImplemented           ; $b9
>1bc4	18 27					.word	NotImplemented           ; $ba
>1bc6	18 27					.word	NotImplemented           ; $bb
>1bc8	18 27					.word	NotImplemented           ; $bc
>1bca	18 27					.word	NotImplemented           ; $bd
>1bcc	18 27					.word	NotImplemented           ; $be
>1bce	18 27					.word	NotImplemented           ; $bf
>1bd0	18 27					.word	NotImplemented           ; $c0
>1bd2	18 27					.word	NotImplemented           ; $c1
>1bd4	18 27					.word	NotImplemented           ; $c2
>1bd6	18 27					.word	NotImplemented           ; $c3
>1bd8	18 27					.word	NotImplemented           ; $c4
>1bda	18 27					.word	NotImplemented           ; $c5
>1bdc	18 27					.word	NotImplemented           ; $c6
>1bde	18 27					.word	NotImplemented           ; $c7
>1be0	18 27					.word	NotImplemented           ; $c8
>1be2	18 27					.word	NotImplemented           ; $c9
>1be4	18 27					.word	NotImplemented           ; $ca
>1be6	18 27					.word	NotImplemented           ; $cb
>1be8	18 27					.word	NotImplemented           ; $cc
>1bea	18 27					.word	NotImplemented           ; $cd
>1bec	18 27					.word	NotImplemented           ; $ce
>1bee	18 27					.word	NotImplemented           ; $cf
>1bf0	18 27					.word	NotImplemented           ; $d0
>1bf2	18 27					.word	NotImplemented           ; $d1
>1bf4	18 27					.word	NotImplemented           ; $d2
>1bf6	18 27					.word	NotImplemented           ; $d3
>1bf8	18 27					.word	NotImplemented           ; $d4
>1bfa	b8 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1bfc	aa 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1bfe	f9 18					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1c00	ec 18					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1c02	13 19					.word	EXPUnaryMid              ; $d9 MID$(
>1c04	aa 18					.word	EXPUnaryStr              ; $da STR$(
>1c06	75 19					.word	EXPUnaryVal              ; $db VAL(
>1c08	77 18					.word	EXPUnarySgn              ; $dc SGN(
>1c0a	28 17					.word	EXPUnaryAbs              ; $dd ABS(
>1c0c	fc 17					.word	EXPUnaryLen              ; $de LEN(
>1c0e	8d 18					.word	EXPUnarySqr              ; $df SQR(
>1c10	48 17					.word	EXPUnaryChr              ; $e0 CHR$(
>1c12	32 17					.word	EXPUnaryAsc              ; $e1 ASC(
>1c14	de 17					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1c16	18 27					.word	NotImplemented           ; $e3 EVENT(
>1c18	18 27					.word	NotImplemented           ; $e4 TIME
>1c1a	f2 17					.word	EXPUnaryInt              ; $e5 INT(
>1c1c	d4 17					.word	EXPUnaryFrac             ; $e6 FRAC(
>1c1e	59 17					.word	EXPUnaryDec              ; $e7 DEC(
>1c20	9c 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1c22	11 18					.word	EXPUnaryRnd              ; $e9 RND(
>1c24	21 18					.word	ExpUnaryRand             ; $ea RAND(
>1c26	0a 18					.word	EXPUnaryParenthesis      ; $eb (
>1c28	d0 17					.word	EXPUnaryNull             ; $ec $
>1c2a	a7 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1c2c	d1 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1c2e	12 15					.word	EXPCompareEqual          ; $ef =
>1c30	2d 15					.word	EXPCompareNotEqual       ; $f0 <>
>1c32	36 15					.word	EXPCompareLessEqual      ; $f1 <=
>1c34	1b 15					.word	EXPCompareLess           ; $f2 <
>1c36	3f 15					.word	EXPCompareGreaterEqual   ; $f3 >=
>1c38	24 15					.word	EXPCompareGreater        ; $f4 >
>1c3a	bf 14					.word	EXPBinXor                ; $f5 XOR
>1c3c	b3 14					.word	EXPBinOr                 ; $f6 OR
>1c3e	a7 14					.word	EXPBinAnd                ; $f7 AND
>1c40	7f 14					.word	EXPBinIDiv               ; $f8 DIV
>1c42	90 14					.word	EXPBinIMod               ; $f9 MOD
>1c44	8a 15					.word	EXPBinLeft               ; $fa <<
>1c46	92 15					.word	EXPBinRight              ; $fb >>
>1c48	73 14					.word	EXPBinFDiv               ; $fc /
>1c4a	6a 14					.word	EXPBinMul                ; $fd *
>1c4c	61 14					.word	EXPBinSub                ; $fe -
>1c4e	58 14					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1c50					TOKDetokenise:
.1c50	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1c52	84 27		sty $27				sty 	zTemp2+1
.1c54	9c 13 05	stz $0513			stz		TOKLastCharacter 			; clear last character
.1c57					_TOKDLoop:
.1c57	20 86 1c	jsr $1c86			jsr 	TOKDGet 					; get next
.1c5a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1c5c	f0 26		beq $1c84			beq 	_TOKDExit
.1c5e	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1c60	f0 1d		beq $1c7f			beq 	_TOKDDataItem
.1c62	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1c64	f0 19		beq $1c7f			beq 	_TOKDDataItem
.1c66	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1c68	10 05		bpl $1c6f			bpl 	_TOKDNotToken
.1c6a	20 4e 1d	jsr $1d4e			jsr 	TOKDToken 					; token to text.
.1c6d	80 e8		bra $1c57			bra 	_TOKDLoop
.1c6f					_TOKDNotToken:
.1c6f	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1c71	90 05		bcc $1c78			bcc 	_TOKDNotIdentifier
.1c73	20 c1 1c	jsr $1cc1			jsr 	TOKDIdentifier
.1c76	80 df		bra $1c57			bra 	_TOKDLoop
.1c78					_TOKDNotIdentifier:
.1c78	a0 0a		ldy #$0a			ldy 	#10
.1c7a	20 0a 1d	jsr $1d0a			jsr 	TOKDInteger
.1c7d	80 d8		bra $1c57			bra 	_TOKDLoop
.1c7f					_TOKDDataItem:
.1c7f	20 9c 1c	jsr $1c9c			jsr 	TOKDDataItem
.1c82	80 d3		bra $1c57			bra 	_TOKDLoop
.1c84					_TOKDExit:
.1c84	18		clc				clc
.1c85	60		rts				rts
.1c86	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1c88	e6 26		inc $26				inc 	zTemp2
.1c8a	d0 02		bne $1c8e			bne 	_TKDGExit
.1c8c	e6 27		inc $27				inc 	zTemp2+1
.1c8e					_TKDGExit:
.1c8e	60		rts				rts
.1c8f					TOKDOutput:
.1c8f	8d 13 05	sta $0513			sta 	TOKLastCharacter
.1c92	6c 11 05	jmp ($0511)			jmp 	(TOKOutputMethod)
.1c95					TOKSetDetokeniseOutput:
.1c95	8e 11 05	stx $0511			stx 	TOKOutputMethod
.1c98	8c 12 05	sty $0512			sty 	TOKOutputMethod+1
.1c9b	60		rts				rts
.0511					TOKOutputMethod:
>0511							.fill 	2
.0513					TOKLastCharacter:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1c9c					TOKDDataItem:
.1c9c	a8		tay				tay 								; type in Y
.1c9d	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1c9f	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1ca1	f0 02		beq $1ca5			beq 	_TOKDDIsString
.1ca3	a9 2e		lda #$2e			lda 	#'.'
.1ca5					_TOKDDIsString:
.1ca5	20 8f 1c	jsr $1c8f			jsr 	TOKDOutput 					; dump it
.1ca8	20 86 1c	jsr $1c86			jsr 	TOKDGet 					; get length into X
.1cab	aa		tax				tax
.1cac					_TOKDDOutput:
.1cac	ca		dex				dex 								; are we complete
.1cad	30 08		bmi $1cb7			bmi 	_TOKDDEnd
.1caf	20 86 1c	jsr $1c86			jsr 	TOKDGet 					; get character and output it
.1cb2	20 8f 1c	jsr $1c8f			jsr 	TOKDOutput
.1cb5	80 f5		bra $1cac			bra 	_TOKDDOutput
.1cb7					_TOKDDEnd:
.1cb7	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1cb9	d0 05		bne $1cc0			bne 	_TOKDDNotString
.1cbb	a9 22		lda #$22			lda 	#'"'
.1cbd	20 8f 1c	jsr $1c8f			jsr 	TOKDOutput
.1cc0					_TOKDDNotString:
.1cc0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1cc1					TOKDIdentifier:
.1cc1	a0 ff		ldy #$ff			ldy 	#$FF
.1cc3	8c 14 05	sty $0514			sty 	TOKDIFirstChar
.1cc6					_TOKDLoop:
.1cc6	a8		tay				tay 								; token in Y
.1cc7	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1cc9	c0 64		cpy #$64			cpy 	#$64
.1ccb	f0 11		beq $1cde			beq 	_TOKDIOutput
.1ccd	a9 5f		lda #$5f			lda 	#'_'
.1ccf	c0 65		cpy #$65			cpy 	#$65
.1cd1	f0 0b		beq $1cde			beq 	_TOKDIOutput
.1cd3	98		tya				tya 								; handle a-z
.1cd4	18		clc				clc
.1cd5	69 21		adc #$21			adc	 	#$21
.1cd7	c0 5a		cpy #$5a			cpy 	#$5A
.1cd9	90 03		bcc $1cde			bcc 	_TOKDIOutput
.1cdb	38		sec				sec 								; handle 0-9
.1cdc	e9 4b		sbc #$4b			sbc 	#$4B
.1cde					_TOKDIOutput:
.1cde	2c 14 05	bit $0514			bit 	TOKDIFirstChar
.1ce1	10 08		bpl $1ceb			bpl 	_TOKDINoSpacing
.1ce3	48		pha				pha
.1ce4	20 80 1d	jsr $1d80			jsr 	TOKDSpacing
.1ce7	9c 14 05	stz $0514			stz 	TOKDIFirstChar
.1cea	68		pla				pla
.1ceb					_TOKDINoSpacing:
.1ceb	20 8f 1c	jsr $1c8f			jsr 	TOKDOutput
.1cee	20 86 1c	jsr $1c86			jsr 	TOKDGet 					; get next token
.1cf1	c9 7c		cmp #$7c			cmp 	#$7C
.1cf3	90 d1		bcc $1cc6			bcc 	_TOKDLoop
.1cf5	f0 12		beq $1d09			beq 	_TOKDIExit 					; it's a number, no tail.
.1cf7	4a		lsr a				lsr 	a 							; string ?
.1cf8	90 07		bcc $1d01			bcc 	_TOKDICheckArray
.1cfa	48		pha				pha
.1cfb	a9 24		lda #$24			lda 	#"$"
.1cfd	20 8f 1c	jsr $1c8f			jsr 	TOKDOutput
.1d00	68		pla				pla
.1d01					_TOKDICheckArray:
.1d01	4a		lsr a				lsr 	a 							; array ?
.1d02	90 05		bcc $1d09			bcc 	_TOKDIExit
.1d04	a9 28		lda #$28			lda 	#"("
.1d06	20 8f 1c	jsr $1c8f			jsr 	TOKDOutput
.1d09					_TOKDIExit:
.1d09	60		rts				rts
.0514					TOKDIFirstChar:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1d0a					TOKDInteger:
.1d0a	5a		phy				phy 								; save base
.1d0b	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1d0d	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.1d10					_TOKDILoop:
.1d10	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1d12	c9 40		cmp #$40			cmp 	#$40
.1d14	b0 1d		bcs $1d33			bcs 	_TOKDIHaveInteger
.1d16	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1d18	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1d1b	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1d1e	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1d21	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1d24	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1d27	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1d2a	20 86 1c	jsr $1c86			jsr 	TOKDGet 					; OR byte in.
.1d2d	05 08		ora $08				ora 	IFR0+IM0
.1d2f	85 08		sta $08				sta 	IFR0+IM0
.1d31	80 dd		bra $1d10			bra 	_TOKDILoop
.1d33					_TOKDIHaveInteger:
.1d33	7a		ply				ply 								; restore base
.1d34	98		tya				tya 								; base in A
.1d35	20 e4 2c	jsr $2ce4			jsr 	IFloatIntegerToStringR0
.1d38	86 22		stx $22				stx 	zTemp0
.1d3a	84 23		sty $23				sty 	zTemp0+1
.1d3c	b2 22		lda ($22)			lda 	(zTemp0)
.1d3e	20 80 1d	jsr $1d80			jsr 	TOKDSpacing 				; check spacing okay.
.1d41	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1d43					_TOKDOutput:
.1d43	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d45	20 8f 1c	jsr $1c8f			jsr 	TOKDOutput
.1d48	c8		iny				iny
.1d49	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d4b	d0 f6		bne $1d43			bne 	_TOKDOutput
.1d4d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1d4e					TOKDToken:
.1d4e	a2 b4		ldx #$b4			ldx 	#StandardTokens & $FF
.1d50	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1d52					_TOKDSearch:
.1d52	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1d54	84 23		sty $23				sty 	zTemp0+1
.1d56	aa		tax				tax 								; token ID in X.
.1d57					_TOKDFind:
.1d57	ca		dex				dex 								; reached the start
.1d58	10 0d		bpl $1d67			bpl 	_TOKDFound
.1d5a	38		sec				sec 								; go to next entry
.1d5b	b2 22		lda ($22)			lda 	(zTemp0)
.1d5d	65 22		adc $22				adc 	zTemp0
.1d5f	85 22		sta $22				sta 	zTemp0
.1d61	90 f4		bcc $1d57			bcc 	_TOKDFind
.1d63	e6 23		inc $23				inc 	zTemp0+1
.1d65	80 f0		bra $1d57			bra 	_TOKDFind
.1d67					_TOKDFound:
.1d67	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1d69	f0 14		beq $1d7f			beq 	_TOKDExit
.1d6b	aa		tax				tax
.1d6c	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1d6e	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1d70	20 80 1d	jsr $1d80			jsr 	TOKDSpacing
.1d73					_TOKDOutput:
.1d73	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d75	20 da 20	jsr $20da			jsr 	TOKToLower
.1d78	20 8f 1c	jsr $1c8f			jsr 	TOKDOutput
.1d7b	c8		iny				iny
.1d7c	ca		dex				dex
.1d7d	d0 f4		bne $1d73			bne 	_TOKDOutput
.1d7f					_TOKDExit:
.1d7f	60		rts				rts
.1d80					TOKDSpacing:
.1d80	20 f1 20	jsr $20f1			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1d83	90 0d		bcc $1d92			bcc 	_TOKDSExit
.1d85	ad 13 05	lda $0513			lda 	TOKLastCharacter			; and last character also alphanumeric
.1d88	20 f1 20	jsr $20f1			jsr 	TOKIsIdentifierElement
.1d8b	90 05		bcc $1d92			bcc 	_TOKDSExit
.1d8d	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1d8f	20 8f 1c	jsr $1c8f			jsr 	TOKDOutput
.1d92					_TOKDSExit:
.1d92	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1d93					PGMDeleteLine:
.1d93	20 46 1e	jsr $1e46			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d96	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1d98	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1d9b	85 25		sta $25				sta 	zTemp1+1
.1d9d					_PGMDLoop:
.1d9d	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1d9f	38		sec				sec
.1da0	f0 3a		beq $1ddc			beq 	_PGMDExit
.1da2	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1da4	b1 24		lda ($24),y			lda 	(zTemp1),y
.1da6	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1da9	d0 08		bne $1db3			bne 	_PGMDNext
.1dab	c8		iny				iny
.1dac	b1 24		lda ($24),y			lda 	(zTemp1),y
.1dae	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1db1	f0 0d		beq $1dc0			beq 	_PGMDDelete
.1db3					_PGMDNext:
.1db3	18		clc				clc
.1db4	b2 24		lda ($24)			lda 	(zTemp1)
.1db6	65 24		adc $24				adc 	zTemp1
.1db8	85 24		sta $24				sta 	zTemp1
.1dba	90 e1		bcc $1d9d			bcc 	_PGMDLoop
.1dbc	e6 25		inc $25				inc 	zTemp1+1
.1dbe	80 dd		bra $1d9d			bra 	_PGMDLoop
.1dc0					_PGMDDelete:
.1dc0	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1dc2	a8		tay				tay
.1dc3					_PGMDCopy:
.1dc3	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1dc5	92 24		sta ($24)			sta 	(zTemp1)
.1dc7	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1dc9	c5 22		cmp $22				cmp 	zTemp0
.1dcb	d0 07		bne $1dd4			bne 	_PGMDNext2
.1dcd	a5 25		lda $25				lda 	zTemp1+1
.1dcf	c5 23		cmp $23				cmp 	zTemp0+1
.1dd1	18		clc				clc
.1dd2	f0 08		beq $1ddc			beq 	_PGMDExit
.1dd4					_PGMDNext2:
.1dd4	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1dd6	d0 eb		bne $1dc3			bne 	_PGMDCopy
.1dd8	e6 25		inc $25				inc 	zTemp1+1
.1dda	80 e7		bra $1dc3			bra 	_PGMDCopy
.1ddc					_PGMDExit:
.1ddc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1ddd					PGMInsertLine:
.1ddd	20 46 1e	jsr $1e46			jsr 	PGMEndProgram 				; end of program into zTemp0
.1de0	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1de2	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1de5	85 25		sta $25				sta 	zTemp1+1
.1de7					_PGMILoop:
.1de7	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1de9	f0 1c		beq $1e07			beq 	_PGMIInsert
.1deb	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1ded	b1 24		lda ($24),y			lda 	(zTemp1),y
.1def	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1df2	c8		iny				iny
.1df3	b1 24		lda ($24),y			lda 	(zTemp1),y
.1df5	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1df8	b0 0d		bcs $1e07			bcs 	_PGMIInsert 				; insert here.
.1dfa	18		clc				clc
.1dfb	b2 24		lda ($24)			lda 	(zTemp1)
.1dfd	65 24		adc $24				adc 	zTemp1
.1dff	85 24		sta $24				sta 	zTemp1
.1e01	90 e4		bcc $1de7			bcc 	_PGMILoop
.1e03	e6 25		inc $25				inc 	zTemp1+1
.1e05	80 e0		bra $1de7			bra 	_PGMILoop
.1e07					_PGMIInsert:
.1e07	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1e0a					_PGMIInsertLoop:
.1e0a	b2 22		lda ($22)			lda 	(zTemp0)
.1e0c	91 22		sta ($22),y			sta 	(zTemp0),y
.1e0e	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1e10	c5 22		cmp $22				cmp 	zTemp0
.1e12	d0 06		bne $1e1a			bne 	_PGMINext
.1e14	a5 25		lda $25				lda 	zTemp1+1
.1e16	c5 23		cmp $23				cmp 	zTemp0+1
.1e18	f0 0a		beq $1e24			beq 	_PGMIInserted
.1e1a					_PGMINext:
.1e1a	a5 22		lda $22				lda 	zTemp0
.1e1c	d0 02		bne $1e20			bne 	_PGMINoBorrow
.1e1e	c6 23		dec $23				dec 	zTemp0+1
.1e20					_PGMINoBorrow:
.1e20	c6 22		dec $22				dec 	zTemp0
.1e22	80 e6		bra $1e0a			bra 	_PGMIInsertLoop
.1e24					_PGMIInserted:
.1e24	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1e26					_PGMICopyLoop:
.1e26	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1e29	91 24		sta ($24),y			sta 	(zTemp1),y
.1e2b	c8		iny				iny
.1e2c	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1e2f	d0 f5		bne $1e26			bne 	_PGMICopyLoop
.1e31	18		clc				clc
.1e32	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1e33					PGMSetBaseAddress:
.1e33	8e 15 05	stx $0515			stx 	PGMBaseHigh
.1e36	8c 16 05	sty $0516			sty 	PGMEndMemoryHigh
.1e39	60		rts				rts
.1e3a					PGMNewProgram:
.1e3a	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1e3c	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1e3f	85 23		sta $23				sta 	zTemp0+1
.1e41	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1e43	92 22		sta ($22)			sta 	(zTemp0)
.1e45	60		rts				rts
.1e46					PGMEndProgram:
.1e46	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1e48	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1e4b	85 23		sta $23				sta 	zTemp0+1
.1e4d					_PGMEPLoop:
.1e4d	b2 22		lda ($22)			lda 	(zTemp0)
.1e4f	f0 0b		beq $1e5c			beq 	_PGMEPExit
.1e51	18		clc				clc
.1e52	65 22		adc $22				adc 	zTemp0
.1e54	85 22		sta $22				sta 	zTemp0
.1e56	90 f5		bcc $1e4d			bcc 	_PGMEPLoop
.1e58	e6 23		inc $23				inc 	zTemp0+1
.1e5a	80 f1		bra $1e4d			bra 	_PGMEPLoop
.1e5c					_PGMEPExit:
.1e5c	60		rts				rts
.0515					PGMBaseHigh:
>0515							.fill 	1
.0516					PGMEndMemoryHigh:
>0516							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1e5d					TOKResetElement:
.1e5d	9c 17 05	stz $0517			stz 	TOKElement
.1e60	60		rts				rts
.1e61					TOKWriteElement:
.1e61	da		phx				phx
.1e62	ae 17 05	ldx $0517			ldx 	TOKElement
.1e65	9d 18 05	sta $0518,x			sta 	TOKElementText,x
.1e68	9e 19 05	stz $0519,x			stz 	TOKElementText+1,x
.1e6b	fa		plx				plx
.1e6c	ee 17 05	inc $0517			inc 	TOKElement
.1e6f	60		rts				rts
.0517					TOKElement:
>0517							.fill 	1
.0518					TOKElementText:
>0518							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1e70					TOKTokeniseConstant:
.1e70	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1e72	48		pha				pha 								; save on stack
.1e73	29 c0		and #$c0			and 	#$C0
.1e75	05 09		ora $09				ora 	IFR0+IM1
.1e77	05 0a		ora $0a				ora 	IFR0+IM2
.1e79	f0 10		beq $1e8b			beq 	_TTCLess
.1e7b	da		phx				phx
.1e7c	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1e7e					_TTCShiftRight:
.1e7e	46 0a		lsr $0a				lsr 	IFR0+IM2
.1e80	66 09		ror $09				ror 	IFR0+IM1
.1e82	66 08		ror $08				ror 	IFR0+IM0
.1e84	ca		dex				dex
.1e85	d0 f7		bne $1e7e			bne 	_TTCShiftRight
.1e87	fa		plx				plx
.1e88	20 70 1e	jsr $1e70			jsr 	TOKTokeniseConstant
.1e8b					_TTCLess:
.1e8b	68		pla				pla
.1e8c	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1e8e	20 2d 1f	jsr $1f2d			jsr 	TOKWriteA
.1e91	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1e92					TOKTokeniseDecimals:
.1e92	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext 					; consume the .
.1e95	20 67 20	jsr $2067			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e98	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1e9a	20 2d 1f	jsr $1f2d			jsr 	TOKWriteA
.1e9d	20 a2 1e	jsr $1ea2			jsr 	TOKOutputElementBuffer 		; then the buffer
.1ea0	18		clc				clc
.1ea1	60		rts				rts
.1ea2					TOKOutputElementBuffer:
.1ea2	ad 17 05	lda $0517			lda 	TOKElement 					; get count and write that
.1ea5	20 2d 1f	jsr $1f2d			jsr 	TOKWriteA
.1ea8	a8		tay				tay 								; put in Y
.1ea9	f0 0c		beq $1eb7			beq 	_TOEExit 					; exit if empty which is okay.
.1eab	a2 01		ldx #$01			ldx 	#1
.1ead					_TOELoop:
.1ead	bd 17 05	lda $0517,x			lda 	TOKElement,x
.1eb0	20 2d 1f	jsr $1f2d			jsr 	TOKWriteA
.1eb3	e8		inx				inx
.1eb4	88		dey				dey
.1eb5	d0 f6		bne $1ead			bne 	_TOELoop
.1eb7					_TOEExit:
.1eb7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1eb8					TOKTokenise:
.1eb8	8c 18 06	sty $0618			sty 	TOKDataSource+1 			; save source routine pointer
.1ebb	8e 17 06	stx $0617			stx 	TOKDataSource
.1ebe	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1ec0	8d 19 06	sta $0619			sta 	TOKIsFirstElement
.1ec3	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1ec5	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1ec8	9c 01 04	stz $0401			stz 	TOKLineNumber
.1ecb	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1ece					_TOKMainLoop:
.1ece	20 39 1f	jsr $1f39			jsr 	TOKGet 						; what follows.
.1ed1	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1ed3	f0 4f		beq $1f24			beq 	_TOKExit
.1ed5	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1ed7	d0 05		bne $1ede			bne 	_TOKElement
.1ed9	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext
.1edc	80 f0		bra $1ece			bra 	_TOKMainLoop
.1ede					_TOKElement:
.1ede	20 e5 20	jsr $20e5			jsr 	TOKIsDigit 					; is it 0..9
.1ee1	90 0a		bcc $1eed			bcc 	_TOKNotDigit
.1ee3	20 3e 20	jsr $203e			jsr 	TOKTokeniseInteger 			; get integer
.1ee6	b0 43		bcs $1f2b			bcs 	_TOKFail 					; did it fail ?
.1ee8	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.1eeb	80 e1		bra $1ece			bra 	_TOKMainLoop
.1eed					_TOKNotDigit:
.1eed	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.1ef0	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1ef2	d0 07		bne $1efb			bne 	_TOKNotHex
.1ef4	20 86 1f	jsr $1f86			jsr 	TOKTokeniseHexadecimal
.1ef7	b0 32		bcs $1f2b			bcs 	_TOKFail
.1ef9	80 d3		bra $1ece			bra 	_TOKMainLoop
.1efb					_TOKNotHex:
.1efb	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1efd	d0 07		bne $1f06			bne 	_TOKNotDecimal
.1eff	20 92 1e	jsr $1e92			jsr 	TOKTokeniseDecimals
.1f02	b0 27		bcs $1f2b			bcs 	_TOKFail
.1f04	80 c8		bra $1ece			bra 	_TOKMainLoop
.1f06					_TOKNotDecimal:
.1f06	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1f08	d0 07		bne $1f11			bne 	_TOKNotString
.1f0a	20 ac 20	jsr $20ac			jsr 	TOKTokeniseString
.1f0d	b0 1c		bcs $1f2b			bcs 	_TOKFail
.1f0f	80 bd		bra $1ece			bra 	_TOKMainLoop
.1f11					_TOKNotString:
.1f11	20 02 21	jsr $2102			jsr 	TOKIsAlpha 					; identifier ?
.1f14	b0 07		bcs $1f1d			bcs 	_TOKIdentifier
.1f16	20 7b 20	jsr $207b			jsr 	TOKTokenisePunctuation 		; punctuation
.1f19	b0 10		bcs $1f2b			bcs 	_TOKFail
.1f1b	80 b1		bra $1ece			bra 	_TOKMainLoop
.1f1d					_TOKIdentifier:
.1f1d	20 c0 1f	jsr $1fc0			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1f20	b0 09		bcs $1f2b			bcs 	_TOKFail
.1f22	80 aa		bra $1ece			bra 	_TOKMainLoop
.1f24					_TOKExit:
.1f24	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1f26	20 2d 1f	jsr $1f2d			jsr 	TOKWriteA
.1f29	18		clc				clc									; return with carry set.
.1f2a	60		rts				rts
.1f2b					_TOKFail:
.1f2b	38		sec				sec
.1f2c	60		rts				rts
.1f2d					TOKWriteA:
.1f2d	da		phx				phx
.1f2e	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1f31	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1f34	fa		plx				plx
.1f35	ee 00 04	inc $0400			inc 	TOKLineSize
.1f38	60		rts				rts
.1f39					TOKGet:
.1f39	18		clc				clc
.1f3a	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.1f3d					TOKGetNext:
.1f3d	38		sec				sec
.1f3e	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.0617					TOKDataSource:
>0617							.fill 	2
.0619					TOKIsFirstElement:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1f41					TOKFindToken:
.1f41	a2 b4		ldx #$b4			ldx 	#StandardTokens & $FF 		; do this table
.1f43	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1f45	20 50 1f	jsr $1f50			jsr 	TOKFindTokenXY 				; find it, or not
.1f48	90 04		bcc $1f4e			bcc 	_TOKFTFail
.1f4a	a2 00		ldx #$00			ldx 	#0
.1f4c	38		sec				sec
.1f4d	60		rts				rts
.1f4e					_TOKFTFail
.1f4e	18		clc				clc
.1f4f	60		rts				rts
.1f50					TOKFindTokenXY:
.1f50	86 22		stx $22				stx 	zTemp0 						; save token table address
.1f52	84 23		sty $23				sty 	zTemp0+1
.1f54	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1f56	8d 1a 06	sta $061a			sta 	TOKCurrent
.1f59					_TOKFindLoop:
.1f59	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.1f5b	18		clc				clc 		 						; clear carry in case of fail
.1f5c	30 17		bmi $1f75			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1f5e	cd 17 05	cmp $0517			cmp 	TOKElement 					; compare against the element length
.1f61	d0 13		bne $1f76			bne 	_TOKNext 					; different, try next.
.1f63	aa		tax				tax 								; number of chars to compare.
.1f64	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1f66					_TOKCompare:
.1f66	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.1f68	d9 17 05	cmp $0517,y			cmp 	TOKElementText-1,y
.1f6b	d0 09		bne $1f76			bne 	_TOKNext 					; different ? try next
.1f6d	c8		iny				iny 								; compare next two
.1f6e	ca		dex				dex
.1f6f	d0 f5		bne $1f66			bne 	_TOKCompare 				; until done X characters.
.1f71	38		sec				sec
.1f72	ad 1a 06	lda $061a			lda 	TOKCurrent 					; return current ID.
.1f75					_TOKExit:
.1f75	60		rts				rts
.1f76					_TOKNext:
.1f76	ee 1a 06	inc $061a			inc 	TOKCurrent 					; increment token #
.1f79	38		sec				sec 								; add length+1 to ptr
.1f7a	b2 22		lda ($22)			lda 	(zTemp0)
.1f7c	65 22		adc $22				adc 	zTemp0
.1f7e	85 22		sta $22				sta 	zTemp0
.1f80	90 d7		bcc $1f59			bcc 	_TOKFindLoop
.1f82	e6 23		inc $23				inc 	zTemp0+1
.1f84	80 d3		bra $1f59			bra 	_TOKFindLoop
.061a					TOKCurrent:
>061a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1f86					TOKTokeniseHexadecimal:
.1f86	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext 					; consume the $
.1f89	a2 08		ldx #$08			ldx 	#IFR0
.1f8b	20 43 2f	jsr $2f43			jsr 	IFloatSetZero 				; set R0 = 0
.1f8e					_TTHLoop:
.1f8e	20 39 1f	jsr $1f39			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f91	20 0f 21	jsr $210f			jsr 	TOKIsHexadecimal
.1f94	90 20		bcc $1fb6			bcc 	_TTHDone
.1f96	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.1f98	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1f9b	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1f9e	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1fa1	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.1fa4	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext
.1fa7	38		sec				sec 								; convert to decimal.
.1fa8	e9 30		sbc #$30			sbc 	#48
.1faa	c9 0a		cmp #$0a			cmp 	#10
.1fac	90 02		bcc $1fb0			bcc 	_TTHNotAlpha
.1fae	e9 07		sbc #$07			sbc 	#7
.1fb0					_TTHNotAlpha:
.1fb0	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.1fb2	85 08		sta $08				sta 	IFR0+IM0
.1fb4	80 d8		bra $1f8e			bra 	_TTHLoop
.1fb6					_TTHDone:
.1fb6	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1fb8	20 2d 1f	jsr $1f2d			jsr 	TOKWriteA
.1fbb	20 70 1e	jsr $1e70			jsr 	TOKTokeniseConstant 		; write integer out.
.1fbe	18		clc				clc
.1fbf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1fc0					TOKTokeniseIdentifier:
.1fc0	20 5d 1e	jsr $1e5d			jsr 	TOKResetElement 			; extract an identifier
.1fc3					_TOKGetIdentifier:
.1fc3	20 39 1f	jsr $1f39			jsr 	TOKGet
.1fc6	20 cf 20	jsr $20cf			jsr 	TOKToUpper
.1fc9	20 f1 20	jsr $20f1			jsr 	TOKIsIdentifierElement
.1fcc	90 08		bcc $1fd6			bcc 	_TOKEndIdent
.1fce	20 61 1e	jsr $1e61			jsr		TOKWriteElement
.1fd1	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext
.1fd4	80 ed		bra $1fc3			bra 	_TOKGetIdentifier
.1fd6					_TOKEndIdent:
.1fd6	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1fd8	d0 06		bne $1fe0			bne 	_TOKNotString
.1fda	20 61 1e	jsr $1e61			jsr 	TOKWriteElement 			; add it
.1fdd	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext 					; consume it
.1fe0					_TOKNotString:
.1fe0	20 39 1f	jsr $1f39			jsr 	TOKGet 						; finally check for (
.1fe3	c9 28		cmp #$28			cmp 	#"("
.1fe5	d0 06		bne $1fed			bne 	_TOKNoArray
.1fe7	20 61 1e	jsr $1e61			jsr 	TOKWriteElement 			; add it
.1fea	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext 					; consume it
.1fed					_TOKNoArray:
.1fed	20 41 1f	jsr $1f41			jsr 	TOKFindToken 				; find it
.1ff0	90 05		bcc $1ff7			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1ff2	20 2d 1f	jsr $1f2d			jsr 	TOKWriteA
.1ff5	18		clc				clc
.1ff6	60		rts				rts
.1ff7					_TOKIsVariable:
.1ff7	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1ff9					_TOKOutputBuffer:
.1ff9	bd 18 05	lda $0518,x			lda 	TOKElementText,x 			; output it translated.
.1ffc	20 25 20	jsr $2025			jsr 	TOKTranslateIdentifier
.1fff	20 2d 1f	jsr $1f2d			jsr 	TOKWriteA
.2002	e8		inx				inx
.2003	bd 18 05	lda $0518,x			lda 	TOKElementText,x
.2006	20 f1 20	jsr $20f1			jsr 	TOKIsIdentifierElement
.2009	b0 ee		bcs $1ff9			bcs 	_TOKOutputBuffer
.200b	a8		tay				tay 								; last char in Y
.200c	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.200e	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2010	f0 0e		beq $2020			beq 	_TOKIVExit
.2012	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2014	d0 04		bne $201a			bne 	_TOKIVCheckArray 			; no, check for (
.2016	1a		inc a				inc 	a 							; token is $7D
.2017	bc 19 05	ldy $0519,x			ldy 	TOKElementText+1,x 			; get next one.
.201a					_TOKIVCheckArray:
.201a	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.201c	d0 02		bne $2020			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.201e	1a		inc a				inc 	a
.201f	1a		inc a				inc 	a
.2020					_TOKIVExit:
.2020	20 2d 1f	jsr $1f2d			jsr 	TOKWriteA 					; ending token
.2023	18		clc				clc
.2024	60		rts				rts
.2025					TOKTranslateIdentifier:
.2025	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.2027	f0 0f		beq $2038			beq 	_TTI64
.2029	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.202b	f0 0e		beq $203b			beq 	_TTI65
.202d	38		sec				sec
.202e	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2030	10 03		bpl $2035			bpl 	_TTIExit
.2032	18		clc				clc 								; map 09 onto 26-35
.2033	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2035					_TTIExit:
.2035	09 40		ora #$40			ora 	#$40 						; correct range.
.2037	60		rts				rts
.2038	a9 64		lda #$64	_TTI64:	lda 	#$64
.203a	60		rts				rts
.203b	a9 65		lda #$65	_TTI65:	lda 	#$65
.203d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.203e					TOKTokeniseInteger:
.203e	20 67 20	jsr $2067			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2041	a2 18		ldx #$18			ldx 	#TOKElementText & $FF
.2043	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2045	ad 17 05	lda $0517			lda		TOKElement
.2048	20 a7 2d	jsr $2da7			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.204b	ad 19 06	lda $0619			lda 	TOKIsFirstElement 			; first element ?
.204e	f0 12		beq $2062			beq 	_TOKNotLineNumber
.2050	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.2052	d0 0c		bne $2060			bne 	_TOKBadLineNumeber
.2054	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2056	8d 01 04	sta $0401			sta 	TOKLineNumber
.2059	a5 09		lda $09				lda 	IFR0+IM1
.205b	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.205e	18		clc				clc
.205f	60		rts				rts
.2060					_TOKBadLineNumeber:
.2060	38		sec				sec
.2061	60		rts				rts
.2062					_TOKNotLineNumber:
.2062	20 70 1e	jsr $1e70			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2065	18		clc				clc
.2066	60		rts				rts
.2067					TOKExtractInteger:
.2067	20 5d 1e	jsr $1e5d			jsr 	TOKResetElement 			; restart
.206a					_TTILoop:
.206a	20 39 1f	jsr $1f39			jsr 	TOKGet 						; keep getting and copying while numeric.
.206d	20 e5 20	jsr $20e5			jsr 	TOKIsDigit
.2070	90 08		bcc $207a			bcc 	_TOKEIExit
.2072	20 61 1e	jsr $1e61			jsr 	TOKWriteElement
.2075	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext
.2078	80 f0		bra $206a			bra 	_TTILoop
.207a					_TOKEIExit:
.207a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.207b					TOKTokenisePunctuation:
.207b	20 5d 1e	jsr $1e5d			jsr 	TOKResetElement 			; copy first punctuation character into element.
.207e	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext
.2081	20 61 1e	jsr $1e61			jsr 	TOKWriteElement
.2084	20 39 1f	jsr $1f39			jsr 	TOKGet 						; what follows ?
.2087	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2089	f0 10		beq $209b			beq 	_TTPOne
.208b	20 f9 20	jsr $20f9			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.208e	b0 0b		bcs $209b			bcs 	_TTPOne 					; these speed things up a bit.
.2090	20 61 1e	jsr $1e61			jsr 	TOKWriteElement 			; this is what we will search for.
.2093	20 41 1f	jsr $1f41			jsr 	TOKFindToken
.2096	b0 0a		bcs $20a2			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2098	ce 17 05	dec $0517			dec 	TOKElement 					; make it a single character
.209b					_TTPOne:
.209b	20 41 1f	jsr $1f41			jsr 	TOKFindToken 				; look for one character punctuation
.209e	b0 07		bcs $20a7			bcs 	_TTPOutputExit 				; we found it
.20a0	38		sec				sec 								; not recognised.
.20a1	60		rts				rts
.20a2					_TTPConsumeExit:
.20a2	48		pha				pha
.20a3	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext 					; get the 2nd char out.
.20a6	68		pla				pla
.20a7					_TTPOutputExit:
.20a7	20 2d 1f	jsr $1f2d			jsr  	TOKWriteA 					; write token out
.20aa	18		clc				clc
.20ab	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.20ac					TOKTokeniseString:
.20ac	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext 					; consume the "
.20af	20 5d 1e	jsr $1e5d			jsr 	TOKResetElement 			; start getting the string
.20b2					_TOKTSLoop:
.20b2	20 39 1f	jsr $1f39			jsr 	TOKGet 						; check EOL
.20b5	c9 00		cmp #$00			cmp 	#0
.20b7	f0 0c		beq $20c5			beq 	_TOKTSExit
.20b9	20 3d 1f	jsr $1f3d			jsr 	TOKGetNext 					; get and consume
.20bc	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.20be	f0 05		beq $20c5			beq 	_TOKTSExit
.20c0	20 61 1e	jsr $1e61			jsr 	TOKWriteElement
.20c3	80 ed		bra $20b2			bra 	_TOKTSLoop
.20c5					_TOKTSExit:
.20c5	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.20c7	20 2d 1f	jsr $1f2d			jsr 	TOKWriteA
.20ca	20 a2 1e	jsr $1ea2			jsr 	TOKOutputElementBuffer
.20cd	18		clc				clc
.20ce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.20cf					TOKToUpper:
.20cf	c9 61		cmp #$61			cmp 	#"a"
.20d1	90 06		bcc $20d9			bcc 	_TTUNotLower
.20d3	c9 7b		cmp #$7b			cmp 	#"z"+1
.20d5	b0 02		bcs $20d9			bcs 	_TTUNotLower
.20d7	49 20		eor #$20			eor 	#$20
.20d9					_TTUNotLower:
.20d9	60		rts				rts
.20da					TOKToLower:
.20da	c9 41		cmp #$41			cmp 	#"A"
.20dc	90 06		bcc $20e4			bcc 	_TTUNotUpper
.20de	c9 5b		cmp #$5b			cmp 	#"Z"+1
.20e0	b0 02		bcs $20e4			bcs 	_TTUNotUpper
.20e2	49 20		eor #$20			eor 	#$20
.20e4					_TTUNotUpper:
.20e4	60		rts				rts
.20e5					TOKIsDigit:
.20e5	c9 30		cmp #$30			cmp 	#"0"
.20e7	90 06		bcc $20ef			bcc 	TOKFail
.20e9	c9 3a		cmp #$3a			cmp 	#"9"+1
.20eb	b0 02		bcs $20ef			bcs 	TOKFail
.20ed					TOKSucceed:
.20ed	38		sec				sec
.20ee	60		rts				rts
.20ef					TOKFail:
.20ef	18		clc				clc
.20f0	60		rts				rts
.20f1					TOKIsIdentifierElement:
.20f1	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.20f3	f0 f8		beq $20ed			beq 	TOKSucceed
.20f5	c9 5f		cmp #$5f			cmp 	#"_"
.20f7	f0 f4		beq $20ed			beq 	TOKSucceed 					; else fall through to alphanumeric
.20f9					TOKIsAlphaNumeric:
.20f9	20 02 21	jsr $2102			jsr 	TOKIsAlpha
.20fc	b0 ef		bcs $20ed			bcs 	TOKSucceed
.20fe	20 e5 20	jsr $20e5			jsr 	TOKIsDigit
.2101	60		rts				rts
.2102					TOKIsAlpha:
.2102	20 cf 20	jsr $20cf			jsr 	TOKToUpper
.2105	c9 41		cmp #$41			cmp 	#"A"
.2107	90 e6		bcc $20ef			bcc 	TOKFail
.2109	c9 5b		cmp #$5b			cmp 	#"Z"+1
.210b	b0 e2		bcs $20ef			bcs 	TOKFail
.210d	80 de		bra $20ed			bra 	TOKSucceed
.210f					TOKIsHexadecimal:
.210f	20 e5 20	jsr $20e5			jsr		TOKIsDigit
.2112	b0 d9		bcs $20ed			bcs 	TOKSucceed
.2114	20 02 21	jsr $2102			jsr 	TOKIsAlpha
.2117	90 d6		bcc $20ef			bcc 	TOKFail
.2119	c9 47		cmp #$47			cmp 	#"F"+1
.211b	b0 d2		bcs $20ef			bcs 	TOKFail
.211d	80 ce		bra $20ed			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.211f					Command_CALL:
.211f	a9 42		lda #$42			lda 	#STK_CALL
.2121	20 b4 25	jsr $25b4			jsr 	StackOpen
.2124	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.2126	29 c0		and #$c0			and 	#$C0
.2128	c9 40		cmp #$40			cmp 	#$40
.212a	d0 29		bne $2155			bne 	_CCSyntax
.212c	20 84 28	jsr $2884			jsr 	VARGetInfo 					; get the information
.212f	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 				; check right bracket follows.
.2132	20 36 28	jsr $2836			jsr 	VARFind 					; exists ?
.2135	90 21		bcc $2158			bcc 	_CCUnknown
.2137	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.2139	85 22		sta $22				sta 	zTemp0
.213b	20 e8 25	jsr $25e8			jsr 	STKSaveCodePosition 		; save return address on stack.
.213e	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2140	b1 22		lda ($22),y			lda 	(zTemp0),y
.2142	c9 ff		cmp #$ff			cmp 	#$FF
.2144	d0 12		bne $2158			bne 	_CCUnknown
.2146	88		dey				dey 								; get Y offset to stack
.2147	b1 22		lda ($22),y			lda 	(zTemp0),y
.2149	48		pha				pha
.214a	88		dey				dey 								; get address
.214b	b1 22		lda ($22),y			lda 	(zTemp0),y
.214d	85 19		sta $19				sta 	codePtr+1
.214f	b2 22		lda ($22)			lda 	(zTemp0)
.2151	85 18		sta $18				sta 	codePtr
.2153	7a		ply				ply 								; restore Y
.2154	60		rts				rts
.2155					_CCSyntax:
.2155	4c fe 23	jmp $23fe		jmp	ErrorV_syntax
.2158					_CCUnknown:
.2158	4c 73 25	jmp $2573		jmp	ErrorV_unknown
.215b					Command_ENDPROC:
.215b	a9 42		lda #$42			lda 	#STK_CALL
.215d	20 e0 25	jsr $25e0			jsr 	StackCheckFrame
.2160	20 fa 25	jsr $25fa			jsr 	STKLoadCodePosition 		; return
.2163	20 d2 25	jsr $25d2			jsr 	StackClose
.2166	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2167					Command_DO:
.2167	a9 22		lda #$22			lda 	#STK_DO
.2169	20 b4 25	jsr $25b4			jsr 	StackOpen
.216c	20 e8 25	jsr $25e8			jsr 	STKSaveCodePosition 		; save loop position
.216f	60		rts				rts
.2170					Command_EXIT:
.2170	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2172	20 e0 25	jsr $25e0			jsr 	StackCheckFrame
.2175	20 d2 25	jsr $25d2			jsr 	StackClose 					; close it
.2178	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.217a	aa		tax				tax
.217b	20 10 23	jsr $2310			jsr 	ScanForward
.217e	60		rts				rts
.217f					Command_LOOP:
.217f	a9 22		lda #$22			lda 	#STK_DO
.2181	20 e0 25	jsr $25e0			jsr 	StackCheckFrame
.2184	20 fa 25	jsr $25fa			jsr 	STKLoadCodePosition 		; loop back
.2187	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2188					Command_FOR:
.2188	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.218a	20 b4 25	jsr $25b4			jsr 	StackOpen
.218d	20 6f 12	jsr $126f			jsr 	CommandLET 					; do "I = 1" bit
.2190	5a		phy				phy 								; save variable address to +4,+5
.2191	a0 04		ldy #$04			ldy 	#4
.2193	a5 22		lda $22				lda 	zTemp0
.2195	91 2a		sta ($2a),y			sta 	(basicStack),y
.2197	c8		iny				iny
.2198	a5 23		lda $23				lda 	zTemp0+1
.219a	91 2a		sta ($2a),y			sta 	(basicStack),y
.219c	7a		ply				ply
.219d	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.219f	20 ab 25	jsr $25ab			jsr 	ERRCheckA
.21a2	20 15 16	jsr $1615			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.21a5	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.21a7	a2 08		ldx #$08			ldx 	#IFR0
.21a9	20 fe 21	jsr $21fe			jsr 	CFSaveR0X
.21ac	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.21ae	c9 91		cmp #$91			cmp 	#PR_STEP
.21b0	d0 06		bne $21b8			bne 	_CFStep1
.21b2	c8		iny				iny 								; consume step
.21b3	20 15 16	jsr $1615			jsr 	EXPEvalNumber 				; evaluate STEP
.21b6	80 24		bra $21dc			bra 	_CFWriteStep
.21b8					_CFStep1:
.21b8	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.21ba	a9 01		lda #$01			lda 	#1
.21bc	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.21bf	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.21c0	a0 04		ldy #$04			ldy 	#4 							; get variable address
.21c2	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21c4	85 22		sta $22				sta 	zTemp0
.21c6	c8		iny				iny
.21c7	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21c9	85 23		sta $23				sta 	zTemp0+1
.21cb	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.21cd	b1 22		lda ($22),y			lda 	(zTemp0),y
.21cf	d0 0a		bne $21db			bne 	_CFNotOptimised
.21d1	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.21d3	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21d5	d0 04		bne $21db			bne 	_CFNotOptimised
.21d7	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.21d9	85 0b		sta $0b				sta 	IFR0+IExp
.21db					_CFNotOptimised:
.21db	7a		ply				ply
.21dc					_CFWriteStep:
.21dc	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.21de	a9 06		lda #$06			lda 	#6
.21e0	20 fe 21	jsr $21fe			jsr 	CFSaveR0X
.21e3	20 e8 25	jsr $25e8			jsr 	STKSaveCodePosition 		; save loop position
.21e6	60		rts				rts
.21e7					CFLoadR0X:
.21e7	5a		phy				phy
.21e8	a8		tay				tay
.21e9	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21eb	95 00		sta $00,x			sta 	IM0,x
.21ed	c8		iny				iny
.21ee	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21f0	95 01		sta $01,x			sta 	IM1,x
.21f2	c8		iny				iny
.21f3	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21f5	95 02		sta $02,x			sta 	IM2,x
.21f7	c8		iny				iny
.21f8	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21fa	95 03		sta $03,x			sta 	IExp,x
.21fc	7a		ply				ply
.21fd	60		rts				rts
.21fe					CFSaveR0X:
.21fe	5a		phy				phy
.21ff	a8		tay				tay
.2200	b5 00		lda $00,x			lda 	IM0,x
.2202	91 2a		sta ($2a),y			sta 	(basicStack),y
.2204	c8		iny				iny
.2205	b5 01		lda $01,x			lda 	IM1,x
.2207	91 2a		sta ($2a),y			sta 	(basicStack),y
.2209	c8		iny				iny
.220a	b5 02		lda $02,x			lda 	IM2,x
.220c	91 2a		sta ($2a),y			sta 	(basicStack),y
.220e	c8		iny				iny
.220f	b5 03		lda $03,x			lda 	IExp,x
.2211	91 2a		sta ($2a),y			sta 	(basicStack),y
.2213	7a		ply				ply
.2214	60		rts				rts
.2215					Command_NEXT:
.2215	a9 37		lda #$37			lda 	#STK_FOR
.2217	20 e0 25	jsr $25e0			jsr 	StackCheckFrame
.221a	5a		phy				phy 								; check optimised loop
.221b	a0 09		ldy #$09			ldy 	#9
.221d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.221f	7a		ply				ply
.2220	0a		asl a				asl 	a
.2221	b0 35		bcs $2258			bcs 	_CNOptimised
.2223	20 8f 22	jsr $228f			jsr 	_CNLoadValue 				; load index value to R0.
.2226	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2228	a9 06		lda #$06			lda 	#6
.222a	20 e7 21	jsr $21e7			jsr 	CFLoadR0X
.222d	20 39 29	jsr $2939			jsr 	IFloatAdd 					; add them together and write back.
.2230	20 b2 22	jsr $22b2			jsr 	_CNSaveValue
.2233	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2235	a2 0c		ldx #$0c			ldx 	#IFR1
.2237	20 e7 21	jsr $21e7			jsr 	CFLoadR0X
.223a	20 11 2c	jsr $2c11			jsr 	IFloatCompare 				; compare terminal vs current
.223d	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.223f	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero
.2242	f0 10		beq $2254			beq 	_CNLoopBack
.2244	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2246	5a		phy				phy
.2247	a0 09		ldy #$09			ldy 	#6+IExp
.2249	51 2a		eor ($2a),y			eor 	(basicStack),y
.224b	7a		ply				ply
.224c	29 40		and #$40			and 	#IFSign
.224e	f0 04		beq $2254			beq 	_CNLoopBack
.2250					_CNExitLoop:
.2250	20 d2 25	jsr $25d2			jsr 	StackClose		 			; return
.2253	60		rts				rts
.2254					_CNLoopBack:
.2254	20 fa 25	jsr $25fa			jsr 	STKLoadCodePosition 		; loop back
.2257	60		rts				rts
.2258					_CNOptimised:
.2258	5a		phy				phy
.2259	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.225b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.225d	85 26		sta $26				sta 	zTemp2
.225f	c8		iny				iny
.2260	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2262	85 27		sta $27				sta 	zTemp2+1
.2264	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2266					_CNIncrement:
.2266	c8		iny				iny
.2267	b1 26		lda ($26),y			lda 	(zTemp2),y
.2269	1a		inc a				inc 	a
.226a	91 26		sta ($26),y			sta 	(zTemp2),y
.226c	f0 f8		beq $2266			beq 	_CNIncrement
.226e	18		clc				clc 								; point zTemp0 to terminal value
.226f	a5 2a		lda $2a				lda 	basicStack
.2271	69 0a		adc #$0a			adc 	#10
.2273	85 22		sta $22				sta 	zTemp0
.2275	a5 2b		lda $2b				lda 	basicStack+1
.2277	69 00		adc #$00			adc 	#0
.2279	85 23		sta $23				sta 	zTemp0+1
.227b	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.227d	b2 26		lda ($26)			lda 	(zTemp2)
.227f	d2 22		cmp ($22)			cmp 	(zTemp0)
.2281	b1 26		lda ($26),y			lda 	(zTemp2),y
.2283	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2285	c8		iny				iny
.2286	b1 26		lda ($26),y			lda 	(zTemp2),y
.2288	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.228a	7a		ply				ply
.228b	b0 c3		bcs $2250			bcs 	_CNExitLoop
.228d	80 c5		bra $2254			bra 	_CNLoopBack
.228f					_CNLoadValue:
.228f	5a		phy				phy
.2290	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2292	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2294	85 26		sta $26				sta 	zTemp2
.2296	c8		iny				iny
.2297	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2299	85 27		sta $27				sta 	zTemp2+1
.229b	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.229d	b1 26		lda ($26),y			lda 	(zTemp2),y
.229f	85 08		sta $08				sta 	IFR0+IM0
.22a1	c8		iny				iny
.22a2	b1 26		lda ($26),y			lda 	(zTemp2),y
.22a4	85 09		sta $09				sta 	IFR0+IM1
.22a6	c8		iny				iny
.22a7	b1 26		lda ($26),y			lda 	(zTemp2),y
.22a9	85 0a		sta $0a				sta 	IFR0+IM2
.22ab	c8		iny				iny
.22ac	b1 26		lda ($26),y			lda 	(zTemp2),y
.22ae	85 0b		sta $0b				sta 	IFR0+IExp
.22b0	7a		ply				ply
.22b1	60		rts				rts
.22b2					_CNSaveValue:
.22b2	5a		phy				phy
.22b3	a0 00		ldy #$00			ldy 	#0
.22b5	a5 08		lda $08				lda 	IFR0+IM0
.22b7	91 26		sta ($26),y			sta 	(zTemp2),y
.22b9	c8		iny				iny
.22ba	a5 09		lda $09				lda 	IFR0+IM1
.22bc	91 26		sta ($26),y			sta 	(zTemp2),y
.22be	c8		iny				iny
.22bf	a5 0a		lda $0a				lda 	IFR0+IM2
.22c1	91 26		sta ($26),y			sta 	(zTemp2),y
.22c3	c8		iny				iny
.22c4	a5 0b		lda $0b				lda 	IFR0+IExp
.22c6	91 26		sta ($26),y			sta 	(zTemp2),y
.22c8	7a		ply				ply
.22c9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.22ca					IfCommand:
.22ca	20 15 16	jsr $1615			jsr 	EXPEvalNumber 				; Get the if test.
.22cd	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.22cf	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.22d1	d0 0a		bne $22dd			bne 	_IfStructured 				; we still support it.
.22d3	c8		iny				iny 								; consume THEN
.22d4	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero 			; is it zero
.22d7	f0 01		beq $22da			beq 	_IfFail 					; if fail, go to next line
.22d9	60		rts				rts 								; if THEN just continue
.22da					_IfFail:
.22da	4c db 13	jmp $13db			jmp 	RUNEndOfLine
.22dd					_IfStructured:
.22dd	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero 			; is it zero
.22e0	d0 07		bne $22e9			bne 	_IfExit 					; if not, then continue normally.
.22e2	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.22e4	a2 85		ldx #$85			ldx 	#PR_ENDIF
.22e6	20 10 23	jsr $2310			jsr 	ScanForward 				; and run from there
.22e9					_IfExit:
.22e9	60		rts				rts
.22ea					ElseCode:
.22ea	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.22ec	aa		tax				tax 								; so just go to the structure exit
.22ed	20 10 23	jsr $2310			jsr 	ScanForward
.22f0	60		rts				rts
.22f1					EndIf:
.22f1	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.22f2					Command_REPEAT:
.22f2	a9 02		lda #$02			lda 	#STK_REPEAT
.22f4	20 b4 25	jsr $25b4			jsr 	StackOpen
.22f7	20 e8 25	jsr $25e8			jsr 	STKSaveCodePosition 		; save loop position
.22fa	60		rts				rts
.22fb					Command_UNTIL:
.22fb	a9 02		lda #$02			lda 	#STK_REPEAT
.22fd	20 e0 25	jsr $25e0			jsr 	StackCheckFrame
.2300	20 15 16	jsr $1615			jsr 	EXPEvalNumber 				; work out the test
.2303	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero 			; check if zero
.2306	f0 04		beq $230c			beq 	_CULoopBack 				; if so keep looping
.2308	20 d2 25	jsr $25d2			jsr 	StackClose		 			; return
.230b	60		rts				rts
.230c					_CULoopBack:
.230c	20 fa 25	jsr $25fa			jsr 	STKLoadCodePosition 		; loop back
.230f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2310					ScanForward:
.2310	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.2312	86 23		stx $23				stx 	zTemp0+1
.2314	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.2316					_ScanForwardLoop:
.2316	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2318	d0 0a		bne $2324			bne 	_ScanNoCheck
.231a	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.231c	c5 22		cmp $22				cmp 	zTemp0
.231e	f0 49		beq $2369			beq 	_ScanExit
.2320	c5 23		cmp $23				cmp 	zTemp0+1
.2322	f0 45		beq $2369			beq 	_ScanExit
.2324					_ScanNoCheck:
.2324	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2326	c8		iny				iny
.2327	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2329	f0 37		beq $2362			beq		_ScanDataItem
.232b	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.232d	f0 33		beq $2362			beq 	_ScanDataItem
.232f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2331	f0 1b		beq $234e			beq 	_ScanNextLine
.2333	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2335	d0 01		bne $2338			bne 	_ScanNoShift
.2337	c8		iny				iny
.2338					_ScanNoShift:
.2338	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.233a	b0 da		bcs $2316			bcs 	_ScanForwardLoop
.233c	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.233e	90 d6		bcc $2316			bcc 	_ScanForwardLoop
.2340	aa		tax				tax 								; access the table to get the adjustment.
.2341	18		clc				clc
.2342	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.2344	7d 28 19	adc $1928,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2347	85 24		sta $24				sta 	zTemp1
.2349	10 cb		bpl $2316			bpl		_ScanForwardLoop 			; error if -ve ?
.234b	4c 8a 24	jmp $248a		jmp	ErrorV_structure
.234e					_ScanNextLine:
.234e	18		clc				clc	 								; forward to next line.
.234f	b2 18		lda ($18)			lda 	(codePtr)
.2351	65 18		adc $18				adc 	codePtr
.2353	85 18		sta $18				sta 	codePtr
.2355	90 02		bcc $2359			bcc 	_ScanNoCarry
.2357	e6 19		inc $19				inc 	codePtr+1
.2359					_ScanNoCarry:
.2359	a0 03		ldy #$03			ldy 	#3
.235b	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.235d	d0 b7		bne $2316			bne 	_ScanForwardLoop
.235f	4c 8a 24	jmp $248a		jmp	ErrorV_structure
.2362					_ScanDataItem:
.2362	98		tya				tya
.2363	38		sec				sec
.2364	71 18		adc ($18),y			adc 	(codePtr),y
.2366	a8		tay				tay
.2367	80 ad		bra $2316			bra 	_ScanForwardLoop
.2369					_ScanExit:
.2369	c8		iny				iny 								; consume final token.
.236a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.236b					ScanProcedures:
.236b	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.236d	48		pha				pha
.236e	a5 19		lda $19				lda 	codePtr+1
.2370	48		pha				pha
.2371	5a		phy				phy
.2372	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.2375	85 19		sta $19				sta 	codePtr+1
.2377	64 18		stz $18				stz 	codePtr
.2379					_SPLoop:
.2379	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.237b	f0 18		beq $2395			beq 	_SPExit
.237d	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.237f	b1 18		lda ($18),y			lda 	(codePtr),y
.2381	c9 88		cmp #$88			cmp 	#PR_PROC
.2383	d0 03		bne $2388			bne 	_SPNext
.2385	20 9d 23	jsr $239d			jsr 	_SPSetupRecord
.2388					_SPNext:
.2388	18		clc				clc 								; forward to next
.2389	b2 18		lda ($18)			lda 	(codePtr)
.238b	65 18		adc $18				adc 	codePtr
.238d	85 18		sta $18				sta 	codePtr
.238f	90 e8		bcc $2379			bcc 	_SPLoop
.2391	e6 19		inc $19				inc 	codePtr+1
.2393	80 e4		bra $2379			bra 	_SPLoop
.2395					_SPExit:
.2395	7a		ply				ply
.2396	68		pla				pla
.2397	85 19		sta $19				sta 	codePtr+1
.2399	68		pla				pla
.239a	85 18		sta $18				sta 	codePtr
.239c	60		rts				rts
.239d					_SPSetupRecord:
.239d	c8		iny				iny 								; check identifier follows
.239e	b1 18		lda ($18),y			lda 	(codePtr),y
.23a0	29 c0		and #$c0			and 	#$C0
.23a2	c9 40		cmp #$40			cmp 	#$40
.23a4	d0 27		bne $23cd			bne 	_SPSyntax
.23a6	20 84 28	jsr $2884			jsr 	VARGetInfo 					; get the information
.23a9	20 9b 25	jsr $259b			jsr 	ERRCheckRParen 				; check right bracket follows.
.23ac	20 36 28	jsr $2836			jsr 	VARFind 					; already exists ?
.23af	b0 1f		bcs $23d0			bcs 	_SPUsed 					; error !
.23b1	20 e2 27	jsr $27e2			jsr 	VARCreate 					; create, XA points to the data.
.23b4	85 22		sta $22				sta 	zTemp0
.23b6	86 23		stx $23				stx 	zTemp0+1
.23b8	5a		phy				phy 								; save Y pos on stack
.23b9	a0 01		ldy #$01			ldy 	#1
.23bb	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.23bd	92 22		sta ($22)			sta 	(zTemp0)
.23bf	a5 19		lda $19				lda 	codePtr+1
.23c1	91 22		sta ($22),y			sta 	(zTemp0),y
.23c3	c8		iny				iny
.23c4	68		pla				pla
.23c5	91 22		sta ($22),y			sta 	(zTemp0),y
.23c7	c8		iny				iny
.23c8	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.23ca	91 22		sta ($22),y			sta 	(zTemp0),y
.23cc	60		rts				rts
.23cd					_SPSyntax:
.23cd	4c fe 23	jmp $23fe		jmp	ErrorV_syntax
.23d0					_SPUsed:
.23d0	4c 55 25	jmp $2555		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.23d3					Command_WHILE:
.23d3	5a		phy				phy 								; save position of the test
.23d4	20 15 16	jsr $1615			jsr 	EXPEvalNumber 				; work out the while test.
.23d7	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero 			; check if zero
.23da	f0 0e		beq $23ea			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.23dc	98		tya				tya 								; position *after* test.
.23dd	7a		ply				ply 								; restore position before test, at WHILE
.23de	88		dey				dey 								; so we execute the WHILE command again.
.23df	48		pha				pha 								; push after test on the stack
.23e0	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.23e2	20 b4 25	jsr $25b4			jsr 	StackOpen
.23e5	20 e8 25	jsr $25e8			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.23e8	7a		ply				ply 								; restore the position *after* the test
.23e9	60		rts				rts
.23ea					_WHExitLoop:
.23ea	68		pla				pla 								; throw post loop position
.23eb	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.23ed	aa		tax				tax
.23ee	20 10 23	jsr $2310			jsr 	ScanForward
.23f1	60		rts				rts
.23f2					Command_WEND:
.23f2	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.23f4	20 e0 25	jsr $25e0			jsr 	StackCheckFrame
.23f7	20 fa 25	jsr $25fa			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.23fa	20 d2 25	jsr $25d2			jsr 	StackClose		 			; erase the frame
.23fd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.23fe					ErrorV_syntax:
.23fe	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2401	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2409	45 72 72 6f 72 00
.240f					ErrorV_range:
.240f	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2412	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>241a	52 61 6e 67 65 00
.2420					ErrorV_value:
.2420	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2423	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>242b	75 65 00
.242e					ErrorV_type:
.242e	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2431	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2439	73 6d 61 74 63 68 00
.2440					ErrorV_unimplemented:
.2440	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2443	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>244b	6c 65 6d 65 6e 74 65 64 00
.2454					ErrorV_assert:
.2454	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2457	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>245f	46 61 69 6c 00
.2464					ErrorV_internal:
.2464	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2467	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>246f	6c 20 45 72 72 6f 72 00
.2477					ErrorV_divzero:
.2477	20 d3 26	jsr $26d3		jsr	ErrorHandler
>247a	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2482	42 79 20 5a 65 72 6f 00
.248a					ErrorV_structure:
.248a	20 d3 26	jsr $26d3		jsr	ErrorHandler
>248d	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2495	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.24a2					ErrorV_stop:
.24a2	20 d3 26	jsr $26d3		jsr	ErrorHandler
>24a5	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>24ad	20 53 74 6f 70 70 65 64 00
.24b6					ErrorV_data:
.24b6	20 d3 26	jsr $26d3		jsr	ErrorHandler
>24b9	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>24c1	44 61 74 61 00
.24c6					ErrorV_redefine:
.24c6	20 d3 26	jsr $26d3		jsr	ErrorHandler
>24c9	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>24d1	65 64 65 66 69 6e 65 64 00
.24da					ErrorV_index:
.24da	20 d3 26	jsr $26d3		jsr	ErrorHandler
>24dd	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>24e5	61 79 20 49 6e 64 65 78 00
.24ee					ErrorV_memory:
.24ee	20 d3 26	jsr $26d3		jsr	ErrorHandler
>24f1	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>24f9	4d 65 6d 6f 72 79 00
.2500					ErrorV_uninitialised:
.2500	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2503	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>250b	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.251b					ErrorV_string:
.251b	20 d3 26	jsr $26d3		jsr	ErrorHandler
>251e	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2526	69 6e 67 20 4c 65 6e 67 74 68 00
.2531					ErrorV_variable:
.2531	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2534	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>253c	65 20 4d 69 73 73 69 6e 67 00
.2546					ErrorV_stack:
.2546	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2549	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2551	75 6c 6c 00
.2555					ErrorV_dupproc:
.2555	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2558	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2560	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2570	65 64 00
.2573					ErrorV_unknown:
.2573	20 d3 26	jsr $26d3		jsr	ErrorHandler
>2576	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>257e	20 50 72 6f 63 65 64 75 72 65 00
.2589					ErrorV_break:
.2589	20 d3 26	jsr $26d3		jsr	ErrorHandler
>258c	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2593					ERRCheckLParen:
.2593	b1 18		lda ($18),y			lda 	(codePtr),y
.2595	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2597	d0 18		bne $25b1			bne 	ERRSyntaxError
.2599	c8		iny				iny
.259a	60		rts				rts
.259b					ERRCheckRParen:
.259b	b1 18		lda ($18),y			lda 	(codePtr),y
.259d	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.259f	d0 10		bne $25b1			bne 	ERRSyntaxError
.25a1	c8		iny				iny
.25a2	60		rts				rts
.25a3					ERRCheckComma:
.25a3	b1 18		lda ($18),y			lda 	(codePtr),y
.25a5	c9 99		cmp #$99			cmp 	#PR_COMMA
.25a7	d0 08		bne $25b1			bne 	ERRSyntaxError
.25a9	c8		iny				iny
.25aa	60		rts				rts
.25ab					ERRCheckA:
.25ab	d1 18		cmp ($18),y			cmp 	(codePtr),y
.25ad	d0 02		bne $25b1			bne 	ERRSyntaxError
.25af	c8		iny				iny
.25b0	60		rts				rts
.25b1					ERRSyntaxError:
.25b1	4c fe 23	jmp $23fe		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.25b4					StackOpen:
.25b4	48		pha				pha 								; save frame byte
.25b5	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.25b7	0a		asl a				asl 	a 							; claim twice this for storage
.25b8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.25ba	38		sec				sec 								; so basically subtracting from
.25bb	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.25bd	85 2a		sta $2a				sta 	basicStack
.25bf	b0 0a		bcs $25cb			bcs 	_SONoBorrow
>25c1	db						.byte 	$DB
.25c2	c6 2b		dec $2b				dec 	basicStack+1
.25c4	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.25c6	cd 1b 06	cmp $061b			cmp 	basicStackEnd
.25c9	f0 04		beq $25cf			beq 	_SOMemory
.25cb					_SONoBorrow:
.25cb	68		pla				pla 								; get marker back and write at TOS
.25cc	92 2a		sta ($2a)			sta 	(basicStack)
.25ce	60		rts				rts
.25cf					_SOMemory:
.25cf	4c 46 25	jmp $2546		jmp	ErrorV_stack
.25d2					StackClose:
.25d2	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.25d4	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.25d6	0a		asl a				asl 	a 							; claim twice this.
.25d7	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.25d9	85 2a		sta $2a				sta 	basicStack
.25db	90 02		bcc $25df			bcc 	_SCExit
.25dd	e6 2b		inc $2b				inc 	basicStack+1
.25df					_SCExit:
.25df	60		rts				rts
.25e0					StackCheckFrame:
.25e0	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.25e2	d0 01		bne $25e5			bne 	_SCFError 					; different, we have structures mixed up
.25e4	60		rts				rts
.25e5					_SCFError:
.25e5	4c 8a 24	jmp $248a		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.25e8					STKSaveCodePosition:
.25e8	5a		phy				phy
.25e9	98		tya				tya 								; save Y at offset 1.
.25ea	a0 01		ldy #$01			ldy 	#1
.25ec	91 2a		sta ($2a),y			sta 	(basicStack),y
.25ee	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.25f0	c8		iny				iny
.25f1	91 2a		sta ($2a),y			sta 	(basicStack),y
.25f3	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.25f5	c8		iny				iny
.25f6	91 2a		sta ($2a),y			sta 	(basicStack),y
.25f8	7a		ply				ply
.25f9	60		rts				rts
.25fa					STKLoadCodePosition:
.25fa	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.25fc	b1 2a		lda ($2a),y			lda 	(basicStack),y
.25fe	85 19		sta $19				sta 	codePtr+1
.2600	88		dey				dey
.2601	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2603	85 18		sta $18				sta 	codePtr
.2605	88		dey				dey
.2606	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.2608	a8		tay				tay
.2609	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.260a					StackReset:
.260a	48		pha				pha 								; save top of memory
.260b	3a		dec a				dec 	a  							; end of stack = previous byte
.260c	85 2b		sta $2b				sta 	basicStack+1
.260e	a9 ff		lda #$ff			lda 	#$FF
.2610	85 2a		sta $2a				sta 	basicStack
.2612	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2614	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2616	68		pla				pla 								; allocate pages for stack.
.2617	38		sec				sec
.2618	e9 02		sbc #$02			sbc 	#STACKPAGES
.261a	8d 1b 06	sta $061b			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.261d	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.061b					basicStackEnd:
>061b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.261e					StringConcrete:
.261e	5a		phy				phy 								; save position on stack
.261f	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2621	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2623	b0 41		bcs $2666			bcs 	_SALengthError
.2625	18		clc				clc 								; length of the new string
.2626	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2628	90 02		bcc $262c			bcc 	_SAHaveLength
.262a	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.262c					_SAHaveLength:
.262c	48		pha				pha 								; save length to be allocated for concreting.
.262d	38		sec				sec
.262e	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2630	6d 1d 06	adc $061d			adc 	stringMemory
.2633	8d 1d 06	sta $061d			sta 	stringMemory
.2636	85 26		sta $26				sta 	zTemp2 						; update storage address
.2638	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.263a	6d 1e 06	adc $061e			adc 	stringMemory+1
.263d	8d 1e 06	sta $061e			sta 	stringMemory+1
.2640	85 27		sta $27				sta 	zTemp2+1
.2642	68		pla				pla 								; save length allocated in +0
.2643	92 26		sta ($26)			sta 	(zTemp2)
.2645	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2647	a0 01		ldy #$01			ldy 	#1
.2649	91 26		sta ($26),y			sta 	(zTemp2),y
.264b					_SACopyNewString:
.264b	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.264d	a0 02		ldy #$02			ldy 	#2
.264f	91 26		sta ($26),y			sta 	(zTemp2),y
.2651	aa		tax				tax 								; bytes to copy
.2652	f0 0c		beq $2660			beq 	_SACopyExit
.2654	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2656					_SACopyNSLoop:
.2656	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2658	c8		iny				iny 								; write two on in string storage
.2659	c8		iny				iny
.265a	91 26		sta ($26),y			sta 	(zTemp2),y
.265c	88		dey				dey
.265d	ca		dex				dex									; until copied all the string lengths.
.265e	d0 f6		bne $2656			bne 	_SACopyNSLoop
.2660					_SACopyExit:
.2660	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.2662	a5 26		lda $26				lda 	zTemp2
.2664	7a		ply				ply
.2665	60		rts				rts
.2666					_SALengthError:
.2666	4c 1b 25	jmp $251b		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2669					StringSystemInitialise:
.2669	3a		dec a				dec 	a 							; make last byte of previous page.
.266a	8d 1e 06	sta $061e			sta 	stringMemory+1
.266d	85 23		sta $23				sta 	zTemp0+1
.266f	a9 ff		lda #$ff			lda 	#$FF
.2671	8d 1d 06	sta $061d			sta 	stringMemory
.2674	85 22		sta $22				sta 	zTemp0
.2676	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2678	92 22		sta ($22)			sta 	(zTemp0)
.267a	60		rts				rts
.267b					StringSpaceInitialise:
.267b	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.267d	8d 1c 06	sta $061c			sta 	stringInitialised
.2680	ad 1d 06	lda $061d			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2683	8d 1f 06	sta $061f			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2686	ad 1e 06	lda $061e			lda 	stringMemory+1
.2689	3a		dec a				dec 	a
.268a	8d 20 06	sta $0620			sta 	stringTempPointer+1
.268d	20 66 10	jsr $1066			jsr 	ClearCheckMemory
.2690	60		rts				rts
.2691					StringTempAllocate:
.2691	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2693	b0 2e		bcs $26c3			bcs 	_STALength
.2695	2c 1c 06	bit $061c			bit 	stringInitialised 			; already initialised
.2698	30 05		bmi $269f			bmi 	_STAAllocate
.269a	48		pha				pha 								; save value to subtract.
.269b	20 7b 26	jsr $267b			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.269e	68		pla				pla 								; restore it
.269f					_STAAllocate:
.269f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.26a1	18		clc				clc  								; deliberate allows one more
.26a2	6d 1f 06	adc $061f			adc 	stringTempPointer 			; subtract from temp pointer
.26a5	8d 1f 06	sta $061f			sta 	stringTempPointer
.26a8	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.26aa	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.26ac	ad 20 06	lda $0620			lda 	stringTempPointer+1
.26af	69 ff		adc #$ff			adc 	#$FF
.26b1	8d 20 06	sta $0620			sta 	stringTempPointer+1
.26b4	85 2d		sta $2d				sta 	zsTemp+1
.26b6	85 09		sta $09				sta 	IFR0+IM1
.26b8	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.26ba	a9 80		lda #$80			lda 	#$80
.26bc	85 0b		sta $0b				sta 	IFR0+IExp
.26be	a9 00		lda #$00			lda 	#0 							; clear the target string
.26c0	92 2c		sta ($2c)			sta 	(zsTemp)
.26c2	60		rts				rts
.26c3					_STALength:
.26c3	4c 1b 25	jmp $251b		jmp	ErrorV_string
.26c6					StringTempWrite:
.26c6	5a		phy				phy
.26c7	48		pha				pha
.26c8	b2 2c		lda ($2c)			lda 	(zsTemp)
.26ca	1a		inc a				inc 	a
.26cb	92 2c		sta ($2c)			sta 	(zsTemp)
.26cd	a8		tay				tay
.26ce	68		pla				pla
.26cf	91 2c		sta ($2c),y			sta 	(zsTemp),y
.26d1	7a		ply				ply
.26d2	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.061c					stringInitialised:
>061c							.fill 	1
.061d					stringMemory:
>061d							.fill 	2
.061f					stringTempPointer:
>061f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.26d3					ErrorHandler:
.26d3	fa		plx				plx 								; get address of msg
.26d4	7a		ply				ply
.26d5	e8		inx				inx 								; bump past RTS
.26d6	d0 01		bne $26d9			bne 	_EHNoInc
.26d8	c8		iny				iny
.26d9					_EHNoInc:
.26d9	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.26dc	ad 21 06	lda $0621			lda 	ERRLine 					; direct command ?
.26df	0d 22 06	ora $0622			ora 	ERRLine+1
.26e2	f0 10		beq $26f4			beq 	_EHNoNumber
.26e4	a2 f7		ldx #$f7			ldx 	#_EHAtMsg & $FF
.26e6	a0 26		ldy #$26			ldy 	#_EHAtMsg >> 8
.26e8	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.26eb	ad 21 06	lda $0621			lda 	ERRLine 					; line number -> XA
.26ee	ae 22 06	ldx $0622			ldx 	ERRLine+1
.26f1	20 fc 26	jsr $26fc			jsr 	WriteIntXA
.26f4					_EHNoNumber:
.26f4	4c 25 27	jmp $2725			jmp 	WarmStartNewLine
.26f7					_EHAtMsg:
>26f7	20 61 74 20 00					.text 	" at ",0
.26fc					WriteIntXA:
.26fc	da		phx				phx
.26fd	48		pha				pha
.26fe	a2 08		ldx #$08			ldx 	#IFR0
.2700	20 92 2e	jsr $2e92			jsr 	IFloatPushRx
.2703	68		pla				pla
.2704	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.2707	68		pla				pla
.2708	85 09		sta $09				sta 	IFR0+IM1
.270a	a9 0a		lda #$0a			lda 	#10 						; decimal
.270c	20 e4 2c	jsr $2ce4			jsr 	IFloatIntegerToStringR0	 	; convert
.270f	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.2712	a2 08		ldx #$08			ldx 	#IFR0
.2714	20 b3 2e	jsr $2eb3			jsr 	IFloatPullRx
.2717	60		rts				rts
.2718					NotImplemented:
.2718	4c 40 24	jmp $2440		jmp	ErrorV_unimplemented
.0621					ERRLine:
>0621							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.271b					WarmStart:
.271b	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.271d	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2720	a9 6b		lda #$6b			lda 	#"k"
.2722	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2725					WarmStartNewLine:
.2725	a9 0d		lda #$0d			lda 	#13
.2727	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.272a					WarmStartNoPrompt:
.272a	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.272c	9a		txs				txs
.272d	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.2730	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.2732	f0 f1		beq $2725			beq 	WarmStartNewLine
.2734	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.2736	d0 f2		bne $272a			bne 	WarmStartNoPrompt
.2738	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.273b	e8		inx				inx 								; skip length byte to make it ASCIIZ
.273c	d0 01		bne $273f			bne 	_WSSkip
.273e	c8		iny				iny
.273f					_WSSkip:
.273f	86 26		stx $26				stx 	zTemp2 						; save address
.2741	84 27		sty $27				sty 	zTemp2+1
.2743	a2 6d		ldx #$6d			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2745	a0 27		ldy #$27			ldy 	#TOKGetCharacter >> 8
.2747	38		sec				sec
.2748	20 b8 1e	jsr $1eb8			jsr 	TOKTokenise
.274b	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.274e	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2751	d0 0b		bne $275e			bne 	_WSLineEdit
.2753	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2755	85 18		sta $18				sta 	codePtr
.2757	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2759	85 19		sta $19				sta 	codePtr+1
.275b	4c e6 13	jmp $13e6			jmp 	RUNNewLine
.275e					_WSLineEdit:
.275e	20 93 1d	jsr $1d93			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2761	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2764	c9 04		cmp #$04			cmp 	#4
.2766	f0 03		beq $276b			beq 	_WSNoInsert
.2768	20 dd 1d	jsr $1ddd			jsr 	PGMInsertLine				; if not, maybe insert
.276b					_WSNoInsert:
.276b	80 bd		bra $272a			bra 	WarmStartNoPrompt
.276d					TOKGetCharacter:
.276d	b2 26		lda ($26)			lda 	(zTemp2)
.276f	90 06		bcc $2777			bcc 	_GSNoIncrement
.2771	e6 26		inc $26				inc 	zTemp2
.2773	d0 02		bne $2777			bne 	_GSNoIncrement
.2775	e6 27		inc $27				inc 	zTemp2+1
.2777					_GSNoIncrement:
.2777	c9 00		cmp #$00			cmp 	#0
.2779	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.277a					VARArrayLookup:
.277a	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.277c	86 23		stx $23				stx 	zTemp0+1
.277e	b2 22		lda ($22)			lda 	(zTemp0)
.2780	48		pha				pha
.2781	5a		phy				phy
.2782	a0 01		ldy #$01			ldy 	#1
.2784	b1 22		lda ($22),y			lda 	(zTemp0),y
.2786	7a		ply				ply
.2787	48		pha				pha
.2788	20 27 16	jsr $1627			jsr 	EXPEvalInteger16 			; R0 now contains the index
.278b	68		pla				pla 								; array address to zTemp0
.278c	85 23		sta $23				sta 	zTemp0+1
.278e	68		pla				pla
.278f	85 22		sta $22				sta 	zTemp0
.2791	5a		phy				phy 								; save codePtr position.
.2792	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2794	b1 22		lda ($22),y			lda 	(zTemp0),y
.2796	48		pha				pha 								; save bit 15 on stack.
.2797	29 7f		and #$7f			and 	#$7F
.2799	85 24		sta $24				sta 	zTemp1
.279b	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.279d	d2 22		cmp ($22)			cmp 	(zTemp0)
.279f	a5 09		lda $09				lda 	IFR0+IM1
.27a1	e5 24		sbc $24				sbc 	zTemp1
.27a3	b0 3a		bcs $27df			bcs 	_VALIndex
.27a5	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.27a7	c9 40		cmp #$40			cmp 	#$40
.27a9	b0 34		bcs $27df			bcs 	_VALIndex
.27ab	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.27ad	26 09		rol $09				rol 	IFR0+IM1
.27af	fa		plx				plx 								; get msb of size -> X
.27b0	30 04		bmi $27b6			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.27b2	06 08		asl $08				asl 	IFR0+IM0
.27b4	26 09		rol $09				rol 	IFR0+IM1
.27b6					_VARNotX4:
.27b6	18		clc				clc 								; add the two for the size bytes
.27b7	a5 08		lda $08				lda 	IFR0+IM0
.27b9	69 02		adc #$02			adc 	#2
.27bb	85 08		sta $08				sta 	IFR0+IM0
.27bd	90 02		bcc $27c1			bcc 	_VARNoCarry1
.27bf	e6 09		inc $09				inc 	IFR0+IM1
.27c1					_VARNoCarry1:
.27c1	18		clc				clc 								; calculate the element address and push to stack.
.27c2	a5 08		lda $08				lda 	IFR0+IM0
.27c4	65 22		adc $22				adc 	zTemp0
.27c6	48		pha				pha
.27c7	a5 09		lda $09				lda 	IFR0+IM1
.27c9	65 23		adc $23				adc 	zTemp0+1
.27cb	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.27cd	30 04		bmi $27d3			bmi 	_VARHasSubLevel
.27cf	aa		tax				tax 								; address in XA
.27d0	68		pla				pla
.27d1	7a		ply				ply 								; restore Y and exit
.27d2	60		rts				rts
.27d3					_VARHasSubLevel:
.27d3	aa		tax				tax 								; get link address in XA
.27d4	68		pla				pla
.27d5	7a		ply				ply 								; restore code position.
.27d6	48		pha				pha
.27d7	20 a3 25	jsr $25a3			jsr 	ERRCheckComma 				; comma required.
.27da	68		pla				pla
.27db	20 7a 27	jsr $277a			jsr 	VARArrayLookup 				; call it recursively
.27de	60		rts				rts
.27df					_VALIndex:
.27df	4c da 24	jmp $24da		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.27e2					VARCreate:
.27e2	5a		phy				phy
.27e3	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.27e5	a2 00		ldx #$00			ldx 	#0
.27e7	20 3d 10	jsr $103d			jsr 	AllocateMemory
.27ea	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.27ec	86 25		stx $25				stx 	zTemp1+1
.27ee	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.27f0	ad 25 06	lda $0625			lda 	VARHash
.27f3	91 24		sta ($24),y			sta 	(zTemp1),y
.27f5	c8		iny				iny 								; put address of name into +3,+4
.27f6	ad 23 06	lda $0623			lda 	VARNameAddress
.27f9	91 24		sta ($24),y			sta 	(zTemp1),y
.27fb	c8		iny				iny
.27fc	ad 24 06	lda $0624			lda 	VARNameAddress+1
.27ff	91 24		sta ($24),y			sta 	(zTemp1),y
.2801	ad 26 06	lda $0626			lda 	VARType
.2804	29 01		and #$01			and 	#1
.2806	f0 06		beq $280e			beq 	_CVNotString
.2808	a0 08		ldy #$08			ldy 	#5+3
.280a	a9 80		lda #$80			lda 	#$80
.280c	91 24		sta ($24),y			sta 	(zTemp1),y
.280e					_CVNotString:
.280e	ad 47 06	lda $0647			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2811	85 22		sta $22				sta 	zTemp0
.2813	ad 48 06	lda $0648			lda 	VARHashEntry+1
.2816	85 23		sta $23				sta 	zTemp0+1
.2818	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.281a	b2 22		lda ($22)			lda 	(zTemp0)
.281c	92 24		sta ($24)			sta 	(zTemp1)
.281e	b1 22		lda ($22),y			lda 	(zTemp0),y
.2820	91 24		sta ($24),y			sta 	(zTemp1),y
.2822	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2824	92 22		sta ($22)			sta 	(zTemp0)
.2826	a5 25		lda $25				lda 	zTemp1+1
.2828	91 22		sta ($22),y			sta 	(zTemp0),y
.282a	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.282c	a6 25		ldx $25				ldx 	zTemp1+1
.282e	18		clc				clc 								; add 5 to point to the data.
.282f	69 05		adc #$05			adc 	#5
.2831	90 01		bcc $2834			bcc 	_VCNoCarry
.2833	e8		inx				inx
.2834					_VCNoCarry:
.2834	7a		ply				ply
.2835	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2836					VARFind:
.2836	5a		phy				phy
.2837	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2839	b1 22		lda ($22),y			lda 	(zTemp0),y
.283b	85 25		sta $25				sta 	zTemp1+1
.283d	f0 1c		beq $285b			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.283f	b2 22		lda ($22)			lda 	(zTemp0)
.2841	85 24		sta $24				sta 	zTemp1
.2843					_VFLoop:
.2843	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2845	b1 24		lda ($24),y			lda 	(zTemp1),y
.2847	cd 25 06	cmp $0625			cmp 	VARHash
.284a	f0 12		beq $285e			beq 	_VFHashesMatch 				; if so, check the name.
.284c					_VFNext:
.284c	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.284e	aa		tax				tax
.284f	a0 01		ldy #$01			ldy 	#1
.2851	b1 24		lda ($24),y			lda 	(zTemp1),y
.2853	85 25		sta $25				sta 	zTemp1+1
.2855	86 24		stx $24				stx 	zTemp1
.2857	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2859	d0 e8		bne $2843			bne 	_VFLoop
.285b					_VFExitFail:
.285b	7a		ply				ply
.285c	18		clc				clc
.285d	60		rts				rts
.285e					_VFHashesMatch:
.285e	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2860	b1 24		lda ($24),y			lda 	(zTemp1),y
.2862	85 26		sta $26				sta 	zTemp2
.2864	c8		iny				iny
.2865	b1 24		lda ($24),y			lda 	(zTemp1),y
.2867	85 27		sta $27				sta 	zTemp2+1
.2869	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.286b					_VFNameCompLoop:
.286b	c8		iny				iny 								; char at a time
.286c	b9 27 06	lda $0627,y			lda 	VARBuffer,y
.286f	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2871	d0 d9		bne $284c			bne 	_VFNext						; next entry if different.
.2873	c9 7c		cmp #$7c			cmp 	#$7C
.2875	90 f4		bcc $286b			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2877	18		clc				clc
.2878	a5 24		lda $24				lda 	zTemp1
.287a	a6 25		ldx $25				ldx 	zTemp1+1
.287c	69 05		adc #$05			adc 	#5
.287e	90 01		bcc $2881			bcc 	_VFNNoCarry
.2880	e8		inx				inx
.2881					_VFNNoCarry:
.2881	7a		ply				ply
.2882	38		sec				sec
.2883	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2884					VARGetInfo:
.2884	98		tya				tya 								; calculate the address of the identifier start.
.2885	18		clc				clc
.2886	65 18		adc $18				adc 	codePtr
.2888	8d 23 06	sta $0623			sta 	VARNameAddress
.288b	a5 19		lda $19				lda 	codePtr+1
.288d	69 00		adc #$00			adc 	#0
.288f	8d 24 06	sta $0624			sta 	VARNameAddress+1
.2892	9c 25 06	stz $0625			stz 	VARHash
.2895	a2 00		ldx #$00			ldx 	#0
.2897					_VARCopyName:
.2897	18		clc				clc 								; update the sum hash.
.2898	ad 25 06	lda $0625			lda 	VARHash
.289b	71 18		adc ($18),y			adc 	(codePtr),y
.289d	8d 25 06	sta $0625			sta 	VARHash
.28a0	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.28a2	c8		iny				iny
.28a3	9d 27 06	sta $0627,x			sta 	VARBuffer,x
.28a6	e8		inx				inx
.28a7	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.28a9	90 ec		bcc $2897			bcc 	_VARCopyName
.28ab	8d 26 06	sta $0626			sta 	VARType 					; save type byte
.28ae	29 03		and #$03			and 	#3 							; type is 0-3
.28b0	0a		asl a				asl 	a
.28b1	0a		asl a				asl 	a
.28b2	85 22		sta $22				sta 	zTemp0
.28b4	ad 25 06	lda $0625			lda 	VARHash 					; force into range of hash entries per type.
.28b7	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.28b9	65 22		adc $22				adc 	zTemp0 						; index of hash table
.28bb	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.28bc	69 49		adc #$49			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.28be	85 22		sta $22				sta 	zTemp0
.28c0	8d 47 06	sta $0647			sta 	VARHashEntry
.28c3	a9 06		lda #$06			lda 	#VARHashTables >> 8
.28c5	69 00		adc #$00			adc 	#0
.28c7	85 23		sta $23				sta 	zTemp0+1
.28c9	8d 48 06	sta $0648			sta 	VARHashEntry+1
.28cc	60		rts				rts
.28cd					VARClearHashTables:
.28cd	a2 00		ldx #$00			ldx 	#0
.28cf					_VCHRLoop:
.28cf	a9 00		lda #$00			lda 	#0
.28d1	9d 49 06	sta $0649,x			sta 	VARHashTables,x
.28d4	e8		inx				inx
.28d5	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.28d7	d0 f6		bne $28cf			bne 	_VCHRLoop
.28d9	60		rts				rts
.0623					VARNameAddress:
>0623							.fill 	2
.0625					VARHash:
>0625							.fill 	1
.0626					VARType:
>0626							.fill 	1
.0627					VARBuffer:
>0627							.fill 	32
.0647					VARHashEntry:
>0647							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0649					VARHashTables:
>0649							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.28da					VARCheckSimple:
.28da	aa		tax				tax 								; save in X
.28db	b1 18		lda ($18),y			lda 	(codePtr),y
.28dd	c9 7c		cmp #$7c			cmp 	#$7C
.28df	d0 15		bne $28f6			bne 	_VCSComplex
.28e1	c8		iny				iny 								; consume the second byte, the type.
.28e2	8a		txa				txa  								; character (40-7F) x 4
.28e3	0a		asl a				asl 	a
.28e4	0a		asl a				asl  	a
.28e5	18		clc				clc
.28e6	69 69		adc #$69			adc 	#FastVariables & $FF
.28e8	85 08		sta $08				sta 	IFR0+IM0
.28ea	a9 06		lda #$06			lda 	#FastVariables >> 8
.28ec	69 00		adc #$00			adc 	#0
.28ee	85 09		sta $09				sta 	IFR0+IM1
.28f0	64 0a		stz $0a				stz 	IFR0+IM2
.28f2	64 0b		stz $0b				stz 	IFR0+IExp
.28f4	38		sec				sec 								; it's a reference
.28f5	60		rts				rts
.28f6					_VCSComplex:
.28f6	88		dey				dey	 								; extract information.
.28f7	20 84 28	jsr $2884			jsr 	VARGetInfo
.28fa	20 36 28	jsr $2836			jsr 	VARFind 					; search for variable
.28fd	b0 0a		bcs $2909			bcs 	_VCSHaveVariable
.28ff	ad 26 06	lda $0626			lda 	VARType 					; error if arrays, cannot autocreate
.2902	29 02		and #$02			and 	#2
.2904	d0 25		bne $292b			bne 	_VCNoCreate
.2906	20 e2 27	jsr $27e2			jsr 	VARCreate 					; create variable
.2909					_VCSHaveVariable:
.2909	48		pha				pha 								; save LSB on the stack
.290a	ad 26 06	lda $0626			lda 	VARType 					; get var type, and shift bit 1 into carry
.290d	6a		ror a				ror 	a
.290e	6a		ror a				ror 	a
.290f	68		pla				pla 								; restore LSB
.2910	90 08		bcc $291a			bcc 	_VCSNotArray 				; skip if not an array
.2912	20 7a 27	jsr $277a			jsr 	VARArrayLookup 				; look for subscripts.
.2915	48		pha				pha 								; check )
.2916	20 9b 25	jsr $259b			jsr 	ERRCheckRParen
.2919	68		pla				pla
.291a					_VCSNotArray:
.291a	86 09		stx $09				stx 	IFR0+IM1 					; save address
.291c	85 08		sta $08				sta 	IFR0+IM0
.291e	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2920	ad 26 06	lda $0626			lda 	VARType 					; number/string bit into carry
.2923	6a		ror a				ror 	a
.2924	a9 00		lda #$00			lda 	#0
.2926	6a		ror a				ror 	a 							; now $00 or $80
.2927	85 0b		sta $0b				sta 	IFR0+IExp
.2929	38		sec				sec 								; it's a reference
.292a	60		rts				rts
.292b					_VCNoCreate:
.292b	4c 00 25	jmp $2500		jmp	ErrorV_uninitialised
.0669					FastVariables:
>0669							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.292e					IFInitialise:
.292e	9c d9 06	stz $06d9			stz 	IFStackIndex
.2931	60		rts				rts
.2932					IFloatSubtract:
.2932	da		phx				phx
.2933	a2 08		ldx #$08			ldx 	#IFR0
.2935	20 4e 2f	jsr $2f4e			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2938	fa		plx				plx
.2939					IFloatAdd:
.2939	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.293b	05 0b		ora $0b				ora 	IFR0+IExp
.293d	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.293f	d0 4e		bne $298f			bne 	_IFloatAddDecimals 			; decimal version.
.2941					_IFAddSubMantissa:
.2941	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2943	45 0b		eor $0b				eor 	IFR0+IExp
.2945	29 40		and #$40			and 	#IFSign
.2947	d0 21		bne $296a			bne 	_IFloatSubMantissa
.2949	18		clc				clc 								; do the actual addition
.294a	a5 08		lda $08			lda 	IFR0+IM0
.294c	75 00		adc $00,x		adc 		IM0,x
.294e	85 08		sta $08			sta 	IFR0+IM0
.2950	a5 09		lda $09			lda 	IFR0+IM1
.2952	75 01		adc $01,x		adc 		IM1,x
.2954	85 09		sta $09			sta 	IFR0+IM1
.2956	a5 0a		lda $0a			lda 	IFR0+IM2
.2958	75 02		adc $02,x		adc 		IM2,x
.295a	85 0a		sta $0a			sta 	IFR0+IM2
.295c	10 29		bpl $2987			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.295e	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2960	20 72 2f	jsr $2f72			jsr 	IFloatShiftRight
.2963	20 9c 2f	jsr $2f9c			jsr 	IFloatIncExponent
.2966	d0 1f		bne $2987			bne 	_IFloatAddExit
.2968	38		sec				sec 								; overflowed numerically.
.2969	60		rts				rts
.296a					_IFloatSubMantissa:
.296a	38		sec				sec 								; do the subtraction R0-Rx
.296b	a5 08		lda $08			lda 	IFR0+IM0
.296d	f5 00		sbc $00,x		sbc 		IM0,x
.296f	85 08		sta $08			sta 	IFR0+IM0
.2971	a5 09		lda $09			lda 	IFR0+IM1
.2973	f5 01		sbc $01,x		sbc 		IM1,x
.2975	85 09		sta $09			sta 	IFR0+IM1
.2977	a5 0a		lda $0a			lda 	IFR0+IM2
.2979	f5 02		sbc $02,x		sbc 		IM2,x
.297b	85 0a		sta $0a			sta 	IFR0+IM2
.297d	b0 08		bcs $2987			bcs 	_IFloatAddExit 				; no borrow so we are done.
.297f	a2 08		ldx #$08			ldx 	#IFR0
.2981	20 56 2f	jsr $2f56			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2984	20 4e 2f	jsr $2f4e			jsr 	IFloatNegate 				; negate
.2987					_IFloatAddExit:
.2987	18		clc				clc
.2988	60		rts				rts
.2989					_IFloatZeroAdd:
.2989	fa		plx				plx 								; return this value in R0
.298a	20 d4 2e	jsr $2ed4			jsr 	IFloatCopyFromRegister
.298d	18		clc				clc
.298e	60		rts				rts
.298f					_IFloatAddDecimals:
.298f	20 3c 2f	jsr $2f3c			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2992	f0 f3		beq $2987			beq 	_IFloatAddExit
.2994	20 7a 2f	jsr $2f7a			jsr 	IFloatNormalise 			; normalise RX
.2997	da		phx				phx 								; normalise R0
.2998	a2 08		ldx #$08			ldx 	#IFR0
.299a	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero
.299d	f0 ea		beq $2989			beq 	_IFloatZeroAdd
.299f	20 7a 2f	jsr $2f7a			jsr 	IFloatNormalise
.29a2	fa		plx				plx
.29a3	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.29a5	29 3f		and #$3f			and 	#IFXMask
.29a7	38		sec				sec
.29a8	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.29aa	85 20		sta $20				sta 	iTemp0
.29ac	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.29ae	29 3f		and #$3f			and 	#IFXMask
.29b0	38		sec				sec
.29b1	e9 20		sbc #$20			sbc 	#$20
.29b3	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.29b5	b0 02		bcs $29b9			bcs 	_IFloatHaveLarger
.29b7	a5 20		lda $20				lda 	iTemp0
.29b9					_IFloatHaveLarger:
.29b9	18		clc				clc 								; get the actual one back.
.29ba	69 20		adc #$20			adc 	#$20 						; shift both to that.
.29bc	20 c9 29	jsr $29c9			jsr 	_IFShiftXToA
.29bf	da		phx				phx
.29c0	a2 08		ldx #$08			ldx 	#IFR0
.29c2	20 c9 29	jsr $29c9			jsr 	_IFShiftXToA
.29c5	fa		plx				plx
.29c6	4c 41 29	jmp $2941			jmp 	_IFAddSubMantissa 			; do the adding bit.
.29c9					_IFShiftXToA:
.29c9	8d d1 06	sta $06d1			sta 	IFTarget
.29cc	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero 			; check adding zero ?
.29cf	f0 11		beq $29e2			beq 	_IFSXExit
.29d1					_IFSXLoop:
.29d1	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.29d3	29 3f		and #$3f			and 	#IFXMask
.29d5	cd d1 06	cmp $06d1			cmp 	IFTarget
.29d8	f0 08		beq $29e2			beq 	_IFSXExit
.29da	20 72 2f	jsr $2f72			jsr 	IFloatShiftRight
.29dd	20 9c 2f	jsr $2f9c			jsr 	IFloatIncExponent
.29e0	80 ef		bra $29d1			bra 	_IFSXLoop
.29e2					_IFSXExit:
.29e2	60		rts				rts
.06d1					IFTarget:
>06d1							.fill 	1
.29e3					IFloatMultiply:
.29e3	8e d1 06	stx $06d1			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.29e6	20 9e 2a	jsr $2a9e			jsr 	IFCalculateNewSign
.29e9	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.29eb	05 0b		ora $0b				ora 	IFR0+IExp
.29ed	29 3f		and #$3f			and 	#IFXMask
.29ef	15 01		ora $01,x			ora 	IM1,x
.29f1	05 09		ora $09				ora 	IFR0+IM1
.29f3	15 02		ora $02,x			ora 	IM2,x
.29f5	05 0a		ora $0a				ora 	IFR0+IM2
.29f7	d0 0a		bne $2a03			bne 	_IFMStandard
.29f9	20 1f 2f	jsr $2f1f			jsr 	IFloatMultiply8BitRx
.29fc	ad d3 06	lda $06d3			lda 	IFNewSign
.29ff	85 0b		sta $0b				sta 	IFR0+IExp
.2a01	18		clc				clc
.2a02	60		rts				rts
.2a03					_IFMStandard:
.2a03	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2a05	20 95 2a	jsr $2a95			jsr 	IFMSignExtend
.2a08	8d d2 06	sta $06d2			sta 	IFNewExponent
.2a0b	a5 0b		lda $0b				lda 	IFR0+IExp
.2a0d	20 95 2a	jsr $2a95			jsr 	IFMSignExtend
.2a10	18		clc				clc
.2a11	6d d2 06	adc $06d2			adc 	IFNewExponent
.2a14	8d d2 06	sta $06d2			sta 	IFNewExponent
.2a17	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2a19	20 e5 2e	jsr $2ee5			jsr 	IFloatCopyToRegister
.2a1c	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2a1e	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.2a21					_IFMLoop:
.2a21	a2 14		ldx #$14			ldx 	#IFRTemp
.2a23	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero
.2a26	f0 3a		beq $2a62			beq 	_IFMExit
.2a28	ae d1 06	ldx $06d1			ldx 	IFTarget 					; look at adder MSB
.2a2b	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2a2d	10 03		bpl $2a32			bpl	 	_IFMTargetOkay
.2a2f	20 86 2a	jsr $2a86			jsr 	_IFMShiftAll
.2a32					_IFMTargetOkay:
.2a32	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2a34	29 01		and #$01			and 	#1
.2a36	f0 16		beq $2a4e			beq 	_IFMNoAdd
.2a38	ae d1 06	ldx $06d1			ldx 	IFTarget 					; add adder
.2a3b	18		clc				clc
.2a3c	a5 08		lda $08			lda 	IFR0+IM0
.2a3e	75 00		adc $00,x		adc 		IM0,x
.2a40	85 08		sta $08			sta 	IFR0+IM0
.2a42	a5 09		lda $09			lda 	IFR0+IM1
.2a44	75 01		adc $01,x		adc 		IM1,x
.2a46	85 09		sta $09			sta 	IFR0+IM1
.2a48	a5 0a		lda $0a			lda 	IFR0+IM2
.2a4a	75 02		adc $02,x		adc 		IM2,x
.2a4c	85 0a		sta $0a			sta 	IFR0+IM2
.2a4e					_IFMNoAdd:
.2a4e	a5 0a		lda $0a				lda 	IFR0+IM2
.2a50	10 03		bpl $2a55			bpl 	_IFMResultOkay
.2a52	20 86 2a	jsr $2a86			jsr 	_IFMShiftAll
.2a55					_IFMResultOkay:
.2a55	a2 14		ldx #$14			ldx 	#IFRTemp
.2a57	20 72 2f	jsr $2f72			jsr 	IFloatShiftRight
.2a5a	ae d1 06	ldx $06d1			ldx 	IFTarget
.2a5d	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.2a60	80 bf		bra $2a21			bra 	_IFMLoop
.2a62					_IFMExit:
.2a62	ad d2 06	lda $06d2			lda 	IFNewExponent 				; validate new exponent.
.2a65	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2a67	90 0f		bcc $2a78			bcc 	_IFMOkay
.2a69	c9 e0		cmp #$e0			cmp 	#$E0
.2a6b	b0 0b		bcs $2a78			bcs 	_IFMOkay
.2a6d	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2a6f	f0 13		beq $2a84			beq 	_IFMError
.2a71	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2a73	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.2a76	18		clc				clc
.2a77	60		rts				rts
.2a78					_IFMOkay:
.2a78	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2a7a	0d d3 06	ora $06d3			ora 	IFNewSign
.2a7d	85 0b		sta $0b				sta 	IFR0+IExp
.2a7f	18		clc				clc
.2a80	60		rts				rts
.2a81	4c ff ff	jmp $ffff			jmp 	$FFFF
.2a84					_IFMError:
.2a84	38		sec				sec
.2a85	60		rts				rts
.2a86					_IFMShiftAll:
.2a86	a2 08		ldx #$08			ldx 	#IFR0
.2a88	20 72 2f	jsr $2f72			jsr 	IFloatShiftRight
.2a8b	ae d1 06	ldx $06d1			ldx 	IFTarget
.2a8e	20 72 2f	jsr $2f72			jsr 	IFloatShiftRight
.2a91	ee d2 06	inc $06d2			inc 	IFNewExponent
.2a94	60		rts				rts
.2a95					IFMSignExtend:
.2a95	29 3f		and #$3f			and 	#IFXMask
.2a97	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2a99	90 02		bcc $2a9d			bcc 	_IFMNoSXX
.2a9b	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2a9d					_IFMNoSXX:
.2a9d	60		rts				rts
.2a9e					IFCalculateNewSign:
.2a9e	b5 03		lda $03,x			lda 	IExp,x
.2aa0	45 0b		eor $0b				eor 	IFR0+IExp
.2aa2	29 40		and #$40			and 	#IFSign
.2aa4	8d d3 06	sta $06d3			sta 	IFNewSign
.2aa7	60		rts				rts
.06d2					IFNewExponent:
>06d2							.fill 	1
.06d3					IFNewSign:
>06d3							.fill 	1
.2aa8					IFloatDivideInteger:
.2aa8	20 c1 2a	jsr $2ac1			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2aab	b0 06		bcs $2ab3			bcs 	_IFDIExit
.2aad	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2aaf	20 d4 2e	jsr $2ed4			jsr 	IFloatCopyFromRegister
.2ab2	18		clc				clc
.2ab3					_IFDIExit:
.2ab3	60		rts				rts
.2ab4					IFloatModulusInteger:
.2ab4	20 c1 2a	jsr $2ac1			jsr 	IFloatDivideIntegerCommon
.2ab7	b0 07		bcs $2ac0			bcs 	_IFMIExit
.2ab9	ae d1 06	ldx $06d1			ldx 	IFTarget
.2abc	20 d4 2e	jsr $2ed4			jsr 	IFloatCopyFromRegister
.2abf	18		clc				clc
.2ac0					_IFMIExit:
.2ac0	60		rts				rts
.2ac1					IFloatDivideIntegerCommon:
.2ac1	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.2ac4	20 9e 2a	jsr $2a9e			jsr 	IFCalculateNewSign 			; calculate sign of result
.2ac7	20 ef 2a	jsr $2aef			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2aca	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2acc	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero
.2acf	f0 1c		beq $2aed			beq 	_IFDIDivZero
.2ad1	ae d1 06	ldx $06d1			ldx 	IFTarget 					; zero Rx (S1)
.2ad4	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.2ad7	5a		phy				phy
.2ad8	a0 18		ldy #$18			ldy 	#24
.2ada					_IFDILoop:
.2ada	20 00 2b	jsr $2b00			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2add	20 0c 2b	jsr $2b0c			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2ae0	88		dey				dey
.2ae1	d0 f7		bne $2ada			bne 	_IFDILoop 					; do it 24 times
.2ae3	7a		ply				ply
.2ae4	ad d3 06	lda $06d3			lda 	IFNewSign 					; set sign of result.
.2ae7	29 40		and #$40			and 	#IFSign
.2ae9	85 17		sta $17				sta 	IFRTemp+IExp
.2aeb	18		clc				clc 								; is okay.
.2aec	60		rts				rts
.2aed					_IFDIDivZero:
.2aed	38		sec				sec
.2aee	60		rts				rts
.2aef					IFDCopyRXToRTemp:
.2aef	b5 00		lda $00,x			lda 	IM0,x
.2af1	85 14		sta $14				sta 	IFRTemp+IM0
.2af3	b5 01		lda $01,x			lda 	IM1,x
.2af5	85 15		sta $15				sta 	IFRTemp+IM1
.2af7	b5 02		lda $02,x			lda 	IM2,x
.2af9	85 16		sta $16				sta 	IFRTemp+IM2
.2afb	b5 03		lda $03,x			lda 	IExp,x
.2afd	85 17		sta $17				sta 	IFRTemp+IExp
.2aff	60		rts				rts
.2b00					IFDShiftSTempS1Left:
.2b00	a2 14		ldx #$14			ldx 	#IFRTemp
.2b02	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft
.2b05	ae d1 06	ldx $06d1			ldx 	IFTarget
.2b08	20 6b 2f	jsr $2f6b			jsr 	IFloatRotateLeft
.2b0b	60		rts				rts
.2b0c					IFDTrySubtract:
.2b0c	ae d1 06	ldx $06d1			ldx 	IFTarget 					; s1 = Rx
.2b0f	38		sec				sec 								; subtract, saving the results on the stack.
.2b10	b5 00		lda $00,x			lda 	IM0,x
.2b12	e5 08		sbc $08				sbc 	IFR0+IM0
.2b14	48		pha				pha
.2b15	b5 01		lda $01,x			lda 	IM1,x
.2b17	e5 09		sbc $09				sbc 	IFR0+IM1
.2b19	48		pha				pha
.2b1a	b5 02		lda $02,x			lda 	IM2,x
.2b1c	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2b1e	b0 03		bcs $2b23			bcs 	_IFDCanSubtract
.2b20	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2b21	68		pla				pla
.2b22	60		rts				rts
.2b23					_IFDCanSubtract:
.2b23	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2b25	68		pla				pla
.2b26	95 01		sta $01,x			sta 	IM1,x
.2b28	68		pla				pla
.2b29	95 00		sta $00,x			sta 	IM0,x
.2b2b	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2b2d	d0 06		bne $2b35			bne 	_IFDCSExit
.2b2f	e6 15		inc $15				inc 	IFRTemp+IM1
.2b31	d0 02		bne $2b35			bne 	_IFDCSExit
.2b33	e6 16		inc $16				inc 	IFRTemp+IM2
.2b35					_IFDCSExit:
.2b35	60		rts				rts
.2b36					IFloatBitwiseAnd:
.2b36	5a		phy				phy
.2b37	20 7b 2b	jsr $2b7b			jsr 	IFPreProcessBitwise 		; set up everything.
.2b3a	d0 0f		bne $2b4b			bne 	_IFBAExit
.2b3c					_IFBALoop:
.2b3c	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2b3f	35 00		and $00,x			and 	IM0,x
.2b41	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2b44	e8		inx				inx
.2b45	c8		iny				iny
.2b46	c0 03		cpy #$03			cpy 	#3
.2b48	d0 f2		bne $2b3c			bne 	_IFBALoop
.2b4a	18		clc				clc
.2b4b					_IFBAExit:
.2b4b	7a		ply				ply
.2b4c	60		rts				rts
.2b4d					IFloatBitwiseOr:
.2b4d	5a		phy				phy
.2b4e	20 7b 2b	jsr $2b7b			jsr 	IFPreProcessBitwise 		; set up everything.
.2b51	d0 0f		bne $2b62			bne 	_IFBAExit
.2b53					_IFBALoop:
.2b53	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2b56	15 00		ora $00,x			ora 	IM0,x
.2b58	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2b5b	e8		inx				inx
.2b5c	c8		iny				iny
.2b5d	c0 03		cpy #$03			cpy 	#3
.2b5f	d0 f2		bne $2b53			bne 	_IFBALoop
.2b61	18		clc				clc
.2b62					_IFBAExit:
.2b62	7a		ply				ply
.2b63	60		rts				rts
.2b64					IFloatBitwiseXor:
.2b64	5a		phy				phy
.2b65	20 7b 2b	jsr $2b7b			jsr 	IFPreProcessBitwise 		; set up everything.
.2b68	d0 0f		bne $2b79			bne 	_IFBAExit
.2b6a					_IFBALoop:
.2b6a	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2b6d	55 00		eor $00,x			eor 	IM0,x
.2b6f	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2b72	e8		inx				inx
.2b73	c8		iny				iny
.2b74	c0 03		cpy #$03			cpy 	#3
.2b76	d0 f2		bne $2b6a			bne 	_IFBALoop
.2b78	18		clc				clc
.2b79					_IFBAExit:
.2b79	7a		ply				ply
.2b7a	60		rts				rts
.2b7b					IFPreProcessBitwise:
.2b7b	a0 00		ldy #$00			ldy 	#0 							; set index.
.2b7d	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2b7f	15 03		ora $03,x			ora 	IExp,x
.2b81	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2b83	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2b85	38		sec				sec 								; carry set just in cases.
.2b86	60		rts				rts
.2b87					IFloatAbsoluteR0:
.2b87	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2b89	29 bf		and #$bf			and 	#IFSign ^ 255
.2b8b	85 0b		sta $0b				sta 	IFR0+IExp
.2b8d	18		clc				clc
.2b8e	60		rts				rts
.2b8f					IFloatSquareRootR0:
.2b8f	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2b91	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero
.2b94	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2b96	29 40		and #$40			and 	#IFSign
.2b98	d0 2f		bne $2bc9			bne 	_IFSRFail
.2b9a	20 7a 2f	jsr $2f7a			jsr 	IFloatNormalise 			; it will work better !
.2b9d	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2b9f	20 e5 2e	jsr $2ee5			jsr 	IFloatCopyToRegister
.2ba2	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2ba4	20 95 2a	jsr $2a95			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2ba7	18		clc				clc
.2ba8	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2baa	85 0b		sta $0b				sta 	IFR0+IExp
.2bac	4a		lsr a				lsr 	a 							; which we can halve.
.2bad	38		sec				sec 								; convert back
.2bae	e9 17		sbc #$17			sbc 	#23
.2bb0	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2bb2	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2bb4	20 cb 2b	jsr $2bcb			jsr 	_IFSRNewton
.2bb7	20 cb 2b	jsr $2bcb			jsr 	_IFSRNewton
.2bba	20 cb 2b	jsr $2bcb			jsr 	_IFSRNewton
.2bbd	20 cb 2b	jsr $2bcb			jsr 	_IFSRNewton
.2bc0	18		clc				clc
.2bc1	60		rts				rts
.2bc2					_IFSRZero:
.2bc2	a2 08		ldx #$08			ldx 	#IFR0
.2bc4	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.2bc7	18		clc				clc
.2bc8	60		rts				rts
.2bc9					_IFSRFail:
.2bc9	38		sec				sec
.2bca	60		rts				rts
.2bcb					_IFSRNewton:
.2bcb	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2bcd	20 92 2e	jsr $2e92			jsr 	IFloatPushRx
.2bd0	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2bd2	20 92 2e	jsr $2e92			jsr 	IFloatPushRx
.2bd5	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2bd7	20 66 2c	jsr $2c66			jsr 	IFloatDivideFloat
.2bda	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2bdc	20 b3 2e	jsr $2eb3			jsr 	IFloatPullRx
.2bdf	20 39 29	jsr $2939			jsr 	IFloatAdd 					; now guess + original/guess
.2be2	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2be4	20 72 2f	jsr $2f72			jsr 	IFloatShiftRight
.2be7	a2 0c		ldx #$0c			ldx 	#IFR1
.2be9	20 b3 2e	jsr $2eb3			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2bec	60		rts				rts
.2bed					IFloatFractionalR0:
.2bed	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2bef	29 3f		and #$3f			and 	#IFXMask
.2bf1	f0 17		beq $2c0a			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2bf3	20 87 2b	jsr $2b87			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2bf6	a2 08		ldx #$08			ldx 	#IFR0
.2bf8	20 7a 2f	jsr $2f7a			jsr 	IFloatNormalise 			; normalise R0
.2bfb	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2bfd	20 e5 2e	jsr $2ee5			jsr 	IFloatCopyToRegister
.2c00	20 43 2c	jsr $2c43			jsr 	IFloatIntegerR0 			; take integer part of R0
.2c03	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2c05	20 32 29	jsr $2932			jsr 	IFloatSubtract
.2c08	80 05		bra $2c0f			bra 	_FIPExit
.2c0a					_FIPZero:
.2c0a	a2 08		ldx #$08			ldx 	#IFR0
.2c0c	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.2c0f					_FIPExit:
.2c0f	18		clc				clc
.2c10	60		rts				rts
.2c11					IFloatCompare:
.2c11	20 32 29	jsr $2932			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2c14	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2c16	05 0b		ora $0b				ora 	IFR0+IExp
.2c18	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2c1a	29 3f		and #$3f			and 	#IFXMask
.2c1c	d0 19		bne $2c37			bne 	_IFCNonInteger
.2c1e	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero 			; check if zero
.2c21	f0 0f		beq $2c32			beq 	_IFCZero
.2c23					_IFCReturnSign:
.2c23	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2c25	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2c27	48		pha				pha
.2c28	a9 01		lda #$01			lda 	#1
.2c2a	20 45 2f	jsr $2f45			jsr 	IFloatSetByte 				; return to +1
.2c2d	68		pla				pla 								; sign bit back
.2c2e	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2c30	18		clc				clc
.2c31	60		rts				rts
.2c32					_IFCZero:
.2c32	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.2c35	18		clc				clc
.2c36	60		rts				rts
.2c37					_IFCNonInteger:
.2c37	a5 08		lda $08				lda 	IFR0+IM0
.2c39	29 00		and #$00			and		#$00
.2c3b	05 09		ora $09				ora 	IFR0+IM1
.2c3d	05 0a		ora $0a				ora 	IFR0+IM2
.2c3f	f0 f1		beq $2c32			beq 	_IFCZero 					; near enough !
.2c41	80 e0		bra $2c23			bra 	_IFCReturnSign 				; return the sign of the difference.
.2c43					IFloatIntegerR0:
.2c43	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2c45	29 3f		and #$3f			and 	#IFXMask
.2c47	f0 1b		beq $2c64			beq 	_FIPExit 					; if so do nothing
.2c49	a2 08		ldx #$08			ldx 	#IFR0
.2c4b	20 7a 2f	jsr $2f7a			jsr 	IFloatNormalise 			; normalise
.2c4e	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero 			; is it zero ?
.2c51	f0 0e		beq $2c61			beq 	_FIPZero 					; if so return zero.
.2c53					_FIPShift:
.2c53	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2c55	29 20		and #$20			and 	#$20 						; still -ve
.2c57	f0 0b		beq $2c64			beq 	_FIPExit
.2c59	20 72 2f	jsr $2f72			jsr 	IFloatShiftRight 			; shift mantissa right
.2c5c	20 9c 2f	jsr $2f9c			jsr 	IFloatIncExponent 			; bump exponent
.2c5f	80 f2		bra $2c53			bra 	_FIPShift
.2c61					_FIPZero:
.2c61	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.2c64					_FIPExit:
.2c64	18		clc				clc
.2c65	60		rts				rts
.2c66					IFloatDivideFloat:
.2c66	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.2c69	20 9e 2a	jsr $2a9e			jsr 	IFCalculateNewSign 			; calculate sign of result
.2c6c	20 7a 2f	jsr $2f7a			jsr 	IFloatNormalise 			; normalise RX
.2c6f	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2c71	20 7a 2f	jsr $2f7a			jsr 	IFloatNormalise
.2c74	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero
.2c77	f0 56		beq $2ccf			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2c79	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2c7b	20 95 2a	jsr $2a95			jsr 	IFMSignExtend
.2c7e	8d d2 06	sta $06d2			sta 	IFNewExponent
.2c81	ae d1 06	ldx $06d1			ldx 	IFTarget 					; calculate s1.exponent
.2c84	b5 03		lda $03,x			lda 	IExp,x
.2c86	20 95 2a	jsr $2a95			jsr 	IFMSignExtend
.2c89	38		sec				sec
.2c8a	ed d2 06	sbc $06d2			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2c8d	38		sec				sec
.2c8e	e9 17		sbc #$17			sbc 	#23
.2c90	8d d2 06	sta $06d2			sta 	IFNewExponent
.2c93	20 d1 2c	jsr $2cd1			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2c96	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2c98	10 08		bpl $2ca2			bpl 	_IFDFNoShiftResult
.2c9a	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2c9c	20 72 2f	jsr $2f72			jsr 	IFloatShiftRight
.2c9f	ee d2 06	inc $06d2			inc 	IFNewExponent
.2ca2					_IFDFNoShiftResult:
.2ca2	ad d2 06	lda $06d2			lda 	IFNewExponent 				; underflow/overflow check.
.2ca5	30 06		bmi $2cad			bmi 	_IFDFCheckUnderflow
.2ca7	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2ca9	b0 24		bcs $2ccf			bcs 	_IFDFDivZero
.2cab	80 11		bra $2cbe			bra		_IFDFExit
.2cad					_IFDFCheckUnderflow:
.2cad	ad d2 06	lda $06d2			lda 	IFNewExponent 				; shift into a legal exponent.
.2cb0	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2cb2	b0 0a		bcs $2cbe			bcs 	_IFDFExit
.2cb4	ee d2 06	inc $06d2			inc 	IFNewExponent
.2cb7	a2 14		ldx #$14			ldx 	#IFRTemp
.2cb9	20 72 2f	jsr $2f72			jsr 	IFloatShiftRight
.2cbc	80 ef		bra $2cad			bra 	_IFDFCheckUnderflow
.2cbe					_IFDFExit:
.2cbe	ad d2 06	lda $06d2			lda 	IFNewExponent 				; combine exponent and sign.
.2cc1	29 3f		and #$3f			and 	#IFXMask
.2cc3	0d d3 06	ora $06d3			ora 	IFNewSign
.2cc6	85 17		sta $17				sta 	IFRTemp+IExp
.2cc8	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2cca	20 d4 2e	jsr $2ed4			jsr 	IFloatCopyFromRegister
.2ccd	18		clc				clc
.2cce	60		rts				rts
.2ccf					_IFDFDivZero:
.2ccf	38		sec				sec
.2cd0	60		rts				rts
.2cd1					IFloatDivideSupport:
.2cd1	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2cd3	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.2cd6	5a		phy				phy 								; main division loop x 23
.2cd7	a0 17		ldy #$17			ldy 	#23
.2cd9					_IFDSLoop:
.2cd9	20 0c 2b	jsr $2b0c			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2cdc	20 00 2b	jsr $2b00			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2cdf	88		dey				dey
.2ce0	d0 f7		bne $2cd9			bne 	_IFDSLoop 					; do it 24 times
.2ce2	7a		ply				ply
.2ce3	60		rts				rts
.2ce4					IFloatIntegerToStringR0:
.2ce4	8d d4 06	sta $06d4			sta 	IFBase 						; save base to use.
.2ce7	20 c4 2f	jsr $2fc4			jsr 	IFloatBufferReset			; empty buffer
.2cea	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer
.2cec	29 3f		and #$3f			and 	#IFXMask
.2cee	d0 1e		bne $2d0e			bne 	_IFIFail
.2cf0	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2cf2	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero
.2cf5	f0 0e		beq $2d05			beq 	_IFINotNegative
.2cf7	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2cf9	29 40		and #$40			and 	#IFSign
.2cfb	f0 08		beq $2d05			beq 	_IFINotNegative
.2cfd	a9 2d		lda #$2d			lda 	#"-"						; output -
.2cff	20 d3 2f	jsr $2fd3			jsr 	IFloatBufferWrite
.2d02	20 4e 2f	jsr $2f4e			jsr 	IFloatNegate 				; tidy up !
.2d05					_IFINotNegative:
.2d05	20 10 2d	jsr $2d10			jsr 	_IFIRecursiveConvert 		; start converting
.2d08	20 cb 2f	jsr $2fcb			jsr 	IFloatGetBufferAddress
.2d0b	18		clc				clc
.2d0c	80 01		bra $2d0f			bra 	_IFIExit
.2d0e					_IFIFail:
.2d0e	38		sec				sec
.2d0f					_IFIExit:
.2d0f	60		rts				rts
.2d10					_IFIRecursiveConvert:
.2d10	a2 0c		ldx #$0c			ldx 	#IFR1
.2d12	20 e5 2e	jsr $2ee5			jsr 	IFloatCopyToRegister 		; R0->R1
.2d15	a2 08		ldx #$08			ldx 	#IFR0
.2d17	ad d4 06	lda $06d4			lda 	IFBase 						; Base -> R0
.2d1a	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.2d1d	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2d1f	20 a8 2a	jsr $2aa8			jsr 	IFloatDivideInteger
.2d22	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2d24	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero
.2d27	f0 09		beq $2d32			beq 	_IFIOutDigit
.2d29	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder
.2d2b	48		pha				pha
.2d2c	20 10 2d	jsr $2d10			jsr 	_IFIRecursiveConvert 		; convert the divider
.2d2f	68		pla				pla
.2d30	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2d32					_IFIOutDigit:
.2d32	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2d34	c9 0a		cmp #$0a			cmp	 	#10
.2d36	90 02		bcc $2d3a			bcc 	_IFINotHex
.2d38	69 06		adc #$06			adc 	#6
.2d3a					_IFINotHex:
.2d3a	69 30		adc #$30			adc 	#48
.2d3c	20 d3 2f	jsr $2fd3			jsr 	IFloatBufferWrite
.2d3f	60		rts				rts
.06d4					IFBase:
>06d4							.fill 	1
.2d40					IFloatFloatToStringR0:
.2d40	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2d42	20 92 2e	jsr $2e92			jsr 	IFloatPushRx
.2d45	20 e5 2e	jsr $2ee5			jsr 	IFloatCopyToRegister
.2d48	20 43 2c	jsr $2c43			jsr 	IFloatIntegerR0				; make R0 integer
.2d4b	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2d4d	20 e4 2c	jsr $2ce4			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2d50	9c d5 06	stz $06d5			stz 	IFloatDecimalCount 			; zero the decimal count.
.2d53	a5 13		lda $13				lda 	IFR2+IExp 					; is integer.
.2d55	29 3f		and #$3f			and 	#IFXMask
.2d57	f0 44		beq $2d9d			beq 	_IFFSExit
.2d59					_IFloatFracLoop:
.2d59	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2d5b	20 d4 2e	jsr $2ed4			jsr 	IFloatCopyFromRegister
.2d5e	20 ed 2b	jsr $2bed			jsr 	IFloatFractionalR0
.2d61	20 7a 2f	jsr $2f7a			jsr 	IFloatNormalise
.2d64	a2 10		ldx #$10			ldx 	#IFR2
.2d66	20 e5 2e	jsr $2ee5			jsr 	IFloatCopyToRegister 		; copy to R2
.2d69	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2d6b	a9 0a		lda #$0a			lda 	#10
.2d6d	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.2d70	a2 10		ldx #$10			ldx 	#IFR2						; R0,R2 = R2 * 10
.2d72	20 e3 29	jsr $29e3			jsr 	IFloatMultiply
.2d75	a2 10		ldx #$10			ldx 	#IFR2
.2d77	20 e5 2e	jsr $2ee5			jsr 	IFloatCopyToRegister
.2d7a	20 43 2c	jsr $2c43			jsr 	IFloatIntegerR0 			; get integer part of R0
.2d7d	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2d80	c9 03		cmp #$03			cmp 	#3
.2d82	f0 16		beq $2d9a			beq 	_IFFSExitStripZero
.2d84	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; written the DP yet ?
.2d87	d0 05		bne $2d8e			bne 	_IFloatNotFirst
.2d89	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2d8b	20 d3 2f	jsr $2fd3			jsr 	IFloatBufferWrite
.2d8e					_IFloatNotFirst:
.2d8e	ee d5 06	inc $06d5			inc 	IFloatDecimalCount
.2d91	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2d93	09 30		ora #$30			ora 	#"0"						; ASCII
.2d95	20 d3 2f	jsr $2fd3			jsr 	IFloatBufferWrite 			; write to the buffer.
.2d98	80 bf		bra $2d59			bra 	_IFloatFracLoop
.2d9a					_IFFSExitStripZero:
.2d9a	20 e2 2f	jsr $2fe2			jsr 	IFloatStripTrailingZeros
.2d9d					_IFFSExit:
.2d9d	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2d9f	20 b3 2e	jsr $2eb3			jsr 	IFloatPullRx
.2da2	20 cb 2f	jsr $2fcb			jsr 	IFloatGetBufferAddress
.2da5	18		clc				clc
.2da6	60		rts				rts
.06d5					IFloatDecimalCount:
>06d5							.fill 	1
.2da7					IFloatStringToFloatR0:
.2da7	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.2daa	86 20		stx $20				stx 	iTemp0
.2dac	84 21		sty $21				sty 	iTemp0+1
.2dae	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2db0	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.2db3	9c d7 06	stz $06d7			stz 	IFSignFlag 					; clear the sign flag
.2db6	20 43 2e	jsr $2e43			jsr 	IFSTFGetNext 				; get first
.2db9	f0 1b		beq $2dd6			beq 	_IFSTFFail 					; no character
.2dbb	90 10		bcc $2dcd			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2dbd	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2dbf	d0 15		bne $2dd6			bne 	_IFSTFFail
.2dc1	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2dc3	8d d7 06	sta $06d7			sta 	IFSignFlag
.2dc6					_IFSTFLoop:
.2dc6	20 43 2e	jsr $2e43			jsr 	IFSTFGetNext 				; get next
.2dc9	b0 0b		bcs $2dd6			bcs 	_IFSTFFail 					; bad character.
.2dcb	f0 11		beq $2dde			beq 	_IFSTFExit 					; end of data
.2dcd					_IFSTFHaveChar:
.2dcd	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2dcf	f0 08		beq $2dd9			beq 	_IFSTFDecimal
.2dd1	20 67 2e	jsr $2e67			jsr 	IFSTFAddR0 					; add number in
.2dd4	80 f0		bra $2dc6			bra 	_IFSTFLoop 					; keep going until . or end.
.2dd6					_IFSTFFail:
.2dd6	38		sec				sec
.2dd7	80 0d		bra $2de6			bra 	_IFSTFReturn
.2dd9					_IFSTFDecimal:
.2dd9	20 ee 2d	jsr $2dee			jsr 	IFSTFDecimal 				; call the decimal places code.
.2ddc	b0 08		bcs $2de6			bcs 	_IFSTFReturn 				; error
.2dde					_IFSTFExit:
.2dde	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2de0	0d d7 06	ora $06d7			ora 	IFSignFlag
.2de3	85 0b		sta $0b				sta 	IFR0+IExp
.2de5	18		clc				clc
.2de6					_IFSTFReturn:
.2de6	60		rts				rts
.2de7					IFloatAddDecimalToR0:
.2de7	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.2dea	86 20		stx $20				stx 	iTemp0
.2dec	84 21		sty $21				sty 	iTemp0+1
.2dee					IFSTFDecimal:
.2dee	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2df0	20 92 2e	jsr $2e92			jsr 	IFloatPushRx
.2df3	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2df5	20 43 2f	jsr $2f43			jsr 	IFloatSetZero
.2df8	9c d8 06	stz $06d8			stz 	IFDecimalPlaces
.2dfb					_IFSTDLoop:
.2dfb	20 43 2e	jsr $2e43			jsr 	IFSTFGetNext 				; get next
.2dfe	b0 41		bcs $2e41			bcs 	_IFSTFFail2 				; bad character.
.2e00	f0 11		beq $2e13			beq 	_IFSTFComplete 				; end of data, work out the result.
.2e02	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2e04	f0 39		beq $2e3f			beq 	_IFSTFExit2
.2e06	20 67 2e	jsr $2e67			jsr 	IFSTFAddR0 					; add number in
.2e09	ee d8 06	inc $06d8			inc 	IFDecimalPlaces 			; count decimals
.2e0c	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2e0f	c9 03		cmp #$03			cmp 	#3
.2e11	90 e8		bcc $2dfb			bcc 	_IFSTDLoop
.2e13					_IFSTFComplete:
.2e13	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2e16	f0 27		beq $2e3f			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2e18	3a		dec a				dec 	a 							; table indexed from 1.
.2e19	0a		asl a				asl 	a
.2e1a	0a		asl a				asl 	a
.2e1b	aa		tax				tax
.2e1c	bd 7e 2e	lda $2e7e,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2e1f	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2e21	bd 7f 2e	lda $2e7f,x			lda 	TableTen+1,x
.2e24	85 0d		sta $0d				sta  	IFR1+IM1
.2e26	bd 80 2e	lda $2e80,x			lda 	TableTen+2,x
.2e29	85 0e		sta $0e				sta  	IFR1+IM2
.2e2b	bd 81 2e	lda $2e81,x			lda 	TableTen+3,x
.2e2e	85 0f		sta $0f				sta  	IFR1+IExp
.2e30	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2e32	20 e3 29	jsr $29e3			jsr 	IFloatMultiply
.2e35	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop and add the decimal.
.2e37	20 b3 2e	jsr $2eb3			jsr 	IFloatPullRx
.2e3a	a2 0c		ldx #$0c			ldx 	#IFR1
.2e3c	20 39 29	jsr $2939			jsr 	IFloatAdd
.2e3f					_IFSTFExit2:
.2e3f	18		clc				clc
.2e40	60		rts				rts
.2e41					_IFSTFFail2:
.2e41	38		sec				sec
.2e42	60		rts				rts
.2e43					IFSTFGetNext:
.2e43	ad d6 06	lda $06d6			lda 	IFCount  					; if count is zero, return with Z set.
.2e46	f0 19		beq $2e61			beq 	_IFSTFReturnOk
.2e48	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.2e4a	e6 20		inc $20				inc 	iTemp0 						; point at next.
.2e4c	d0 02		bne $2e50			bne 	_IFSTFGNNoCarry
.2e4e	e6 21		inc $21				inc 	iTemp0+1
.2e50					_IFSTFGNNoCarry:
.2e50	ce d6 06	dec $06d6			dec 	IFCount 					; dec count.
.2e53	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2e55	f0 08		beq $2e5f			beq 	_IFSTFGOkay
.2e57	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2e59	90 08		bcc $2e63			bcc 	_IFSTFGFail
.2e5b	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2e5d	b0 04		bcs $2e63			bcs 	_IFSTFGFail
.2e5f					_IFSTFGOkay:
.2e5f	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2e61					_IFSTFReturnOk:
.2e61	18		clc				clc
.2e62	60		rts				rts
.2e63					_IFSTFGFail:
.2e63	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2e65	38		sec				sec
.2e66	60		rts				rts
.2e67					IFSTFAddR0:
.2e67	29 0f		and #$0f			and 	#15 						; to int value
.2e69	48		pha				pha 								; save it.
.2e6a	a9 0a		lda #$0a			lda 	#10
.2e6c	a2 0c		ldx #$0c			ldx 	#IFR1
.2e6e	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.2e71	20 e3 29	jsr $29e3			jsr 	IFloatMultiply
.2e74	68		pla				pla
.2e75	a2 0c		ldx #$0c			ldx 	#IFR1
.2e77	20 45 2f	jsr $2f45			jsr 	IFloatSetByte
.2e7a	20 39 29	jsr $2939			jsr 	IFloatAdd
.2e7d	60		rts				rts
.06d6					IFCount:
>06d6							.fill 	1
.06d7					IFSignFlag:
>06d7							.fill 	1
.06d8					IFDecimalPlaces:
>06d8							.fill 	1
.2e7e					TableTen:
>2e7e	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2e82	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2e86	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2e8a	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2e8e	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2e92					IFloatPushRx:
.2e92	5a		phy				phy
.2e93	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.2e96	b5 00		lda $00,x			lda 	IM0,x
.2e98	99 da 06	sta $06da,y			sta 	IFStack,y
.2e9b	b5 01		lda $01,x			lda 	IM1,x
.2e9d	99 db 06	sta $06db,y			sta 	IFStack+1,y
.2ea0	b5 02		lda $02,x			lda 	IM2,x
.2ea2	99 dc 06	sta $06dc,y			sta 	IFStack+2,y
.2ea5	b5 03		lda $03,x			lda 	IExp,x
.2ea7	99 dd 06	sta $06dd,y			sta 	IFStack+3,y
.2eaa	c8		iny				iny
.2eab	c8		iny				iny
.2eac	c8		iny				iny
.2ead	c8		iny				iny
.2eae	8c d9 06	sty $06d9			sty 	IFStackIndex
.2eb1	7a		ply				ply
.2eb2	60		rts				rts
.2eb3					IFloatPullRx:
.2eb3	5a		phy				phy
.2eb4	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.2eb7	88		dey				dey
.2eb8	88		dey				dey
.2eb9	88		dey				dey
.2eba	88		dey				dey
.2ebb	b9 da 06	lda $06da,y			lda 	IFStack,y
.2ebe	95 00		sta $00,x			sta 	IM0,x
.2ec0	b9 db 06	lda $06db,y			lda 	IFStack+1,y
.2ec3	95 01		sta $01,x			sta 	IM1,x
.2ec5	b9 dc 06	lda $06dc,y			lda 	IFStack+2,y
.2ec8	95 02		sta $02,x			sta 	IM2,x
.2eca	b9 dd 06	lda $06dd,y			lda 	IFStack+3,y
.2ecd	95 03		sta $03,x			sta 	IExp,x
.2ecf	8c d9 06	sty $06d9			sty 	IFStackIndex
.2ed2	7a		ply				ply
.2ed3	60		rts				rts
.06d9					IFStackIndex:
>06d9							.fill 	1
.06da					IFStack:
>06da							.fill 	16*4
.2ed4					IFloatCopyFromRegister:
.2ed4	b5 00		lda $00,x			lda 	0,x
.2ed6	85 08		sta $08				sta 	IFR0
.2ed8	b5 01		lda $01,x			lda 	1,x
.2eda	85 09		sta $09				sta 	IFR0+1
.2edc	b5 02		lda $02,x			lda 	2,x
.2ede	85 0a		sta $0a				sta 	IFR0+2
.2ee0	b5 03		lda $03,x			lda 	3,x
.2ee2	85 0b		sta $0b				sta 	IFR0+3
.2ee4	60		rts				rts
.2ee5					IFloatCopyToRegister:
.2ee5	a5 08		lda $08				lda 	IFR0
.2ee7	95 00		sta $00,x			sta 	0,x
.2ee9	a5 09		lda $09				lda 	IFR0+1
.2eeb	95 01		sta $01,x			sta 	1,x
.2eed	a5 0a		lda $0a				lda 	IFR0+2
.2eef	95 02		sta $02,x			sta 	2,x
.2ef1	a5 0b		lda $0b				lda 	IFR0+3
.2ef3	95 03		sta $03,x			sta 	3,x
.2ef5	60		rts				rts
.2ef6					IFloatLoadInline:
.2ef6	68		pla				pla 								; pop address off to iTemp0
.2ef7	85 20		sta $20				sta 	iTemp0
.2ef9	68		pla				pla
.2efa	85 21		sta $21				sta 	iTemp0+1
.2efc	a0 01		ldy #$01			ldy 	#1
.2efe	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.2f00	95 00		sta $00,x			sta 	0,x
.2f02	c8		iny				iny
.2f03	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.2f05	95 01		sta $01,x			sta 	1,x
.2f07	c8		iny				iny
.2f08	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.2f0a	95 02		sta $02,x			sta 	2,x
.2f0c	c8		iny				iny
.2f0d	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.2f0f	95 03		sta $03,x			sta 	3,x
.2f11	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2f12	a5 20		lda $20				lda 	iTemp0
.2f14	69 05		adc #$05			adc 	#5
.2f16	85 20		sta $20				sta 	iTemp0
.2f18	90 02		bcc $2f1c			bcc 	_IFLINoCarry
.2f1a	e6 21		inc $21				inc 	iTemp0+1
.2f1c					_IFLINoCarry:
.2f1c	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.2f1f					IFloatMultiply8BitRx:
.2f1f	5a		phy		        phy
.2f20	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2f22	a4 08		ldy $08		        ldy     IFR0+IM0
.2f24	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2f25	85 08		sta $08		        sta     IFR0+IM0
.2f27	84 09		sty $09		        sty     IFR0+IM1
.2f29	a9 00		lda #$00	        lda     #0
.2f2b	a0 08		ldy #$08	        ldy     #8
.2f2d					_IFMLoop:
.2f2d	90 03		bcc $2f32	        bcc     _IFMNoAdd
.2f2f	18		clc		        clc
.2f30	65 09		adc $09		        adc     IFR0+IM1
.2f32					_IFMNoAdd:
.2f32	6a		ror a		        ror     a
.2f33	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2f35	88		dey		        dey
.2f36	d0 f5		bne $2f2d	        bne     _IFMLoop
.2f38	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.2f3a	7a		ply		        ply
.2f3b	60		rts		        rts
.2f3c					IFloatCheckZero:
.2f3c	b5 00		lda $00,x			lda 	IM0,x
.2f3e	15 01		ora $01,x			ora 	IM1,x
.2f40	15 02		ora $02,x			ora 	IM2,x
.2f42	60		rts				rts
.2f43					IFloatSetZero:
.2f43	a9 00		lda #$00			lda 	#0
.2f45					IFloatSetByte:
.2f45	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2f47	74 01		stz $01,x			stz 	IM1,x
.2f49	74 02		stz $02,x			stz 	IM2,x
.2f4b	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2f4d	60		rts				rts
.2f4e					IFloatNegate:
.2f4e	b5 03		lda $03,x			lda 	IExp,x
.2f50	49 40		eor #$40			eor 	#IFSign
.2f52	95 03		sta $03,x			sta 	IExp,x
.2f54	18		clc				clc
.2f55	60		rts				rts
.2f56					IFloatMantissaNegate:
.2f56	38		sec				sec
.2f57	a9 00		lda #$00			lda 	#0
.2f59	f5 00		sbc $00,x			sbc 	IM0,x
.2f5b	95 00		sta $00,x			sta 	IM0,x
.2f5d	a9 00		lda #$00			lda 	#0
.2f5f	f5 01		sbc $01,x			sbc 	IM1,x
.2f61	95 01		sta $01,x			sta 	IM1,x
.2f63	a9 00		lda #$00			lda 	#0
.2f65	f5 02		sbc $02,x			sbc 	IM2,x
.2f67	95 02		sta $02,x			sta 	IM2,x
.2f69	60		rts				rts
.2f6a					IFloatShiftLeft:
.2f6a	18		clc				clc
.2f6b					IFloatRotateLeft:
.2f6b	36 00		rol $00,x			rol 	IM0,x
.2f6d	36 01		rol $01,x			rol 	IM1,x
.2f6f	36 02		rol $02,x			rol 	IM2,x
.2f71	60		rts				rts
.2f72					IFloatShiftRight:
.2f72	18		clc				clc
.2f73					IFloatRotateRight:
.2f73	76 02		ror $02,x			ror 	IM2,x
.2f75	76 01		ror $01,x			ror 	IM1,x
.2f77	76 00		ror $00,x			ror 	IM0,x
.2f79	60		rts				rts
.2f7a					IFloatNormalise:
.2f7a	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero 			; is it zero
.2f7d	f0 18		beq $2f97			beq 	_IFNExitZero 				; if so exit
.2f7f					_IFNLoop:
.2f7f	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2f81	29 c0		and #$c0			and 	#$C0
.2f83	c9 40		cmp #$40			cmp 	#$40
.2f85	f0 13		beq $2f9a			beq 	_IFNExitOkay 				; if so , then we are done.
.2f87	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2f89	29 3f		and #$3f			and 	#$3F
.2f8b	c9 20		cmp #$20			cmp 	#$20
.2f8d	f0 0b		beq $2f9a			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2f8f	20 b0 2f	jsr $2fb0			jsr 	IFloatDecExponent
.2f92	20 6a 2f	jsr $2f6a			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2f95	80 e8		bra $2f7f			bra 	_IFNLoop
.2f97					_IFNExitZero:
.2f97	20 43 2f	jsr $2f43			jsr 	IFloatSetZero 				; set the result to zero
.2f9a					_IFNExitOkay:
.2f9a	18		clc				clc  								; return with CC.
.2f9b	60		rts				rts
.2f9c					IFloatIncExponent:
.2f9c	b5 03		lda $03,x			lda 	IExp,x
.2f9e	48		pha				pha
.2f9f	29 c0		and #$c0			and 	#$C0
.2fa1	8d 1a 07	sta $071a			sta 	IFXTemp
.2fa4	68		pla				pla
.2fa5	1a		inc a				inc 	a
.2fa6	29 3f		and #$3f			and 	#$3F
.2fa8	48		pha				pha
.2fa9	0d 1a 07	ora $071a			ora 	IFXTemp
.2fac	95 03		sta $03,x			sta 	IExp,x
.2fae	68		pla				pla
.2faf	60		rts				rts
.2fb0					IFloatDecExponent:
.2fb0	b5 03		lda $03,x			lda 	IExp,x
.2fb2	48		pha				pha
.2fb3	29 c0		and #$c0			and 	#$C0
.2fb5	8d 1a 07	sta $071a			sta 	IFXTemp
.2fb8	68		pla				pla
.2fb9	3a		dec a				dec 	a
.2fba	29 3f		and #$3f			and 	#$3F
.2fbc	48		pha				pha
.2fbd	0d 1a 07	ora $071a			ora 	IFXTemp
.2fc0	95 03		sta $03,x			sta 	IExp,x
.2fc2	68		pla				pla
.2fc3	60		rts				rts
.071a					IFXTemp:
>071a							.fill 	1
.2fc4					IFloatBufferReset:
.2fc4	9c 1b 07	stz $071b			stz 	IFBufferCount
.2fc7	9c 1c 07	stz $071c			stz 	IFBuffer
.2fca	60		rts				rts
.2fcb					IFloatGetBufferAddress:
.2fcb	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.2fcd	a2 1c		ldx #$1c			ldx 	#(IFBuffer & $FF)
.2fcf	ad 1b 07	lda $071b			lda 	IFBufferCount
.2fd2	60		rts				rts
.2fd3					IFloatBufferWrite:
.2fd3	da		phx				phx
.2fd4	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.2fd7	9d 1c 07	sta $071c,x			sta 	IFBuffer,x
.2fda	9e 1d 07	stz $071d,x			stz 	IFBuffer+1,x
.2fdd	ee 1b 07	inc $071b			inc 	IFBufferCount
.2fe0	fa		plx				plx
.2fe1	60		rts				rts
.2fe2					IFloatStripTrailingZeros:
.2fe2	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.2fe5	bd 1b 07	lda $071b,x			lda 	IFBuffer-1,x
.2fe8	c9 30		cmp #$30			cmp		#"0"
.2fea	d0 0f		bne $2ffb			bne 	_IFSTExit
.2fec	bd 1a 07	lda $071a,x			lda 	IFBuffer-2,x
.2fef	c9 2e		cmp #$2e			cmp 	#"."
.2ff1	f0 08		beq $2ffb			beq 	_IFSTExit
.2ff3	ce 1b 07	dec $071b			dec 	IFBufferCount
.2ff6	9e 1b 07	stz $071b,x			stz 	IFBuffer-1,x
.2ff9	80 e7		bra $2fe2			bra 	IFloatStripTrailingZeros
.2ffb					_IFSTExit:
.2ffb	60		rts				rts
.071b					IFBufferCount:
>071b							.fill 	1
.071c					IFBuffer:
>071c							.fill 	25
.2ffc					IFloatCheck:
.2ffc	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative
.2ffe	09 40		ora #$40			ora 	#IFSign
.3000	85 0b		sta $0b				sta 	IFR0+IExp
.3002	20 39 29	jsr $2939			jsr 	IFloatAdd 					; add allowed to error.
.3005	a2 08		ldx #$08			ldx 	#IFR0
.3007	20 3c 2f	jsr $2f3c			jsr 	IFloatCheckZero 			; error if < 0
.300a	f0 06		beq $3012			beq 	_IFAOkay
.300c	a5 0b		lda $0b				lda 	IFR0+IExp
.300e	29 40		and #$40			and 	#IFSign
.3010	d0 01		bne $3013			bne 	_IFAFail
.3012					_IFAOkay:
.3012	60		rts				rts
.3013					_IFAFail:
.3013	38		sec				sec
.3014	68		pla				pla 								; get address - 2
.3015	e9 02		sbc #$02			sbc 	#2
.3017	aa		tax				tax
.3018	68		pla				pla
.3019	e9 00		sbc #$00			sbc 	#0
.301b	a8		tay				tay
.301c	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.301e					_IFAStop:
>301e	db						.byte 	$DB 						; display an error AA ADR ADR
.301f	80 fd		bra $301e			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
