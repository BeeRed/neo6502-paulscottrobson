
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Fri Jul  7 14:41:20 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorSize:
>0344							.fill 	2
.0346					sectorCount:
>0346							.fill 	2
.0348					currentSector:
>0348							.fill 	2
.034a					successFlag:
>034a							.fill 	1
.034b					sectorHeader:
.034b					shFirstNext:
>034b							.fill 	1
.034c					shContinue:
>034c							.fill 	1
.034d					shDataSize:
>034d							.fill 	2
.034f					shFileSize:
>034f							.fill 	2
>0351							.fill 	10
.035b					shNameLength:
>035b							.fill 	1
.035c					shNameText:
>035c							.fill 	15
.036b					shFileSizeCopy:
>036b							.fill 	2
.036d					notFirstSector:
>036d							.fill 	1
.036e					sectorCapacity:
>036e							.fill 	2
.0370					fileRemainingSize:
>0370							.fill 	2
.0372					bytesToWrite:
>0372							.fill 	2
>0374							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 a6 23	jsr $23a6			jsr 	PGMSetBaseAddress
.1007	20 5f 30	jsr $305f			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.100f	4c aa 17	jmp $17aa			jmp 	Command_RUN
.1012	4c ae 16	jmp $16ae			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="R"					AM_RELATIVE 	= 'R' 						; bra nnnn
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="T"					AM_ABSOLUTEI  	= 'T' 						; jmp (nnnn)   [only instance]
="U"					AM_ABSOLUTEIX	= 'U' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d4					AM_ZIND 	= ('T'|AM_ZPAGE) 				; lda (nn)
=$d5					AM_ZINDX	= ('U'|AM_ZPAGE) 				; lda (nn,x)
=$d6					AM_ZINDY	= ('V'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f
=$8d90					PR_RENUMBER = $8d90
=$8d91					PR_OPT = $8d91

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.1015					Command_AssemblerStart:
.1015					_CALoop:
.1015	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.1017	c8		iny				iny 								; consume it.
.1018	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.101a	f0 15		beq $1031			beq 	_CALabel
.101c	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.101e	f0 3d		beq $105d			beq 	_CAExit
.1020	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.1022	f0 f1		beq $1015			beq 	_CALoop
.1024	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; end of line.
.1026	f0 14		beq $103c			beq 	_CAEnd
.1028	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.102a	c9 40		cmp #$40			cmp 	#$40
.102c	f0 08		beq $1036			beq 	_CAOpcode
.102e	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.1031					_CALabel:
.1031	20 69 12	jsr $1269			jsr 	ASLabel 					; handle a label
.1034	80 df		bra $1015			bra 	_CALoop
.1036					_CAOpcode:
.1036	88		dey				dey 								; get it back
.1037	20 80 11	jsr $1180			jsr 	ASOpcode 					; assemble that opcode.
.103a	80 d9		bra $1015			bra 	_CALoop
.103c	18		clc		_CAEnd:	clc 								; next line
.103d	b2 18		lda ($18)			lda 	(codePtr)
.103f	65 18		adc $18				adc 	codePtr
.1041	85 18		sta $18				sta 	codePtr
.1043	90 02		bcc $1047			bcc 	_CANoCarry
.1045	e6 19		inc $19				inc 	codePtr+1
.1047					_CANoCarry:
.1047	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1049	b1 18		lda ($18),y			lda 	(codePtr),y
.104b	8d 30 06	sta $0630			sta 	ERRLine
.104e	c8		iny				iny
.104f	b1 18		lda ($18),y			lda 	(codePtr),y
.1051	8d 31 06	sta $0631			sta 	ERRLine+1
.1054	a0 03		ldy #$03			ldy 	#3 							; tokenised code position.
.1056	b2 18		lda ($18)			lda 	(codePtr) 					; code present
.1058	d0 bb		bne $1015			bne 	_CALoop 					; go round again
.105a	4c 1a 18	jmp $181a			jmp 	Command_END 				; do END.
.105d					_CAExit:
.105d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/calcopcode.asm

.105e					ASCalculateOpcodeHash:
.105e	20 86 10	jsr $1086			jsr 	_ASCGetCharacter 			; get first alphanumeric character 0-25 rep A-Z
.1061	20 93 10	jsr $1093			jsr 	_ASCProcess 				; go through the shift/multiply process
.1064	85 24		sta $24				sta 	zTemp0
.1066	20 86 10	jsr $1086			jsr 	_ASCGetCharacter 			; get second alphanumeric character
.1069	18		clc				clc
.106a	65 24		adc $24				adc 	zTemp0 						; add previous result.
.106c	2a		rol a				rol 	a 							; 8 bit rotate left
.106d	69 00		adc #$00			adc 	#0
.106f	49 a5		eor #$a5			eor 	#165 						; XOR with 165
.1071	20 93 10	jsr $1093			jsr 	_ASCProcess 				; and shift/multiply again.
.1074	85 24		sta $24				sta 	zTemp0
.1076	20 86 10	jsr $1086			jsr 	_ASCGetCharacter 			; get third character
.1079	18		clc				clc
.107a	65 24		adc $24				adc 	zTemp0 						; and add
.107c	48		pha				pha
.107d	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by
.107f	c9 7c		cmp #$7c			cmp 	#$7C 						; $7C which identifies end of identifier.
.1081	d0 1b		bne $109e			bne 	_ASCSyntax
.1083	c8		iny				iny
.1084	68		pla				pla 								; restore and exit
.1085	60		rts				rts
.1086					_ASCGetCharacter:
.1086	b1 18		lda ($18),y			lda 	(codePtr),y 				; get and consume character
.1088	c8		iny				iny
.1089	38		sec				sec
.108a	e9 40		sbc #$40			sbc 	#$40 						; shift $40 -> $00
.108c	30 10		bmi $109e			bmi 	_ASCSyntax 					; check range.
.108e	c9 1a		cmp #$1a			cmp 	#26
.1090	b0 0c		bcs $109e			bcs 	_ASCSyntax
.1092	60		rts				rts
.1093					_ASCProcess:
.1093	85 25		sta $25				sta 	zTemp0+1 					; multiply by 5
.1095	0a		asl a				asl 	a
.1096	0a		asl a				asl 	a
.1097	18		clc				clc
.1098	65 25		adc $25				adc 	zTemp0+1
.109a	18		clc				clc 								; add 68
.109b	69 44		adc #$44			adc 	#68
.109d	60		rts				rts
.109e					_ASCSyntax:
.109e	4c ea 29	jmp $29ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/generate.asm

.10a1					ASGenerateCode:
.10a1	5a		phy				phy
.10a2	a2 00		ldx #$00			ldx 	#0
.10a4					_ASGSearch:
.10a4	bd 7f 1d	lda $1d7f,x			lda 	AssemblerLookup,x 			; check table
.10a7	cd 04 05	cmp $0504			cmp 	ASCurrOpcode 				; do we have a match ?
.10aa	d0 0e		bne $10ba			bne 	_ASGNoMatch
.10ac	da		phx				phx 								; save X
.10ad	8a		txa				txa 								; get the address mode for this instruction
.10ae	8d 03 05	sta $0503			sta 	ASGOpcode
.10b1	20 1b 11	jsr $111b			jsr 	ASGetModeForOpcode 			; into A.
.10b4	20 c2 10	jsr $10c2			jsr 	ASGTryGenerate		 		; try to generate with mode A
.10b7	fa		plx				plx
.10b8	b0 06		bcs $10c0			bcs 	_ASGDone 					; successful :)
.10ba					_ASGNoMatch:
.10ba	e8		inx				inx 								; keep going.
.10bb	d0 e7		bne $10a4			bne 	_ASGSearch
.10bd	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.10c0					_ASGDone:
.10c0	7a		ply				ply
.10c1	60		rts				rts
.10c2					ASGTryGenerate:
.10c2	cd 05 05	cmp $0505			cmp 	ASCurrMode 					; do the modes match ?
.10c5	f0 26		beq $10ed			beq 	_ASGMatches 				; yes, we have a result.
.10c7	ae 05 05	ldx $0505			ldx 	ASCurrMode 					; get the instruction mode.
.10ca	e0 41		cpx #$41			cpx 	#AM_ABSOLUTE 				; is it an absolute we can try as ZP
.10cc	f0 12		beq $10e0			beq 	_ASGTryZero 				; this works because in the 65C02 all the
.10ce	e0 58		cpx #$58			cpx 	#AM_ABSOLUTEX 				; ZP equivalents are before the Absolutes
.10d0	f0 0e		beq $10e0			beq 	_ASGTryZero 				; numerically.
.10d2	e0 59		cpx #$59			cpx 	#AM_ABSOLUTEY
.10d4	f0 0a		beq $10e0			beq 	_ASGTryZero
.10d6	e0 54		cpx #$54			cpx 	#AM_ABSOLUTEI
.10d8	f0 06		beq $10e0			beq 	_ASGTryZero
.10da	e0 55		cpx #$55			cpx 	#AM_ABSOLUTEIX
.10dc	f0 02		beq $10e0			beq 	_ASGTryZero
.10de					_ASGFail:
.10de	18		clc				clc 								; give up.
.10df	60		rts				rts
.10e0					_ASGTryZero:
.10e0	29 7f		and #$7f			and 	#$7F 						; this is the ZP equivalent of A,AX,AY ?
.10e2	cd 05 05	cmp $0505			cmp 	ASCurrMode 					; does that match ?
.10e5	d0 f7		bne $10de			bne  	_ASGFail 					; no, this won't work.
.10e7	09 80		ora #$80			ora 	#$80 						; try with a ZP
.10e9	a6 09		ldx $09				ldx 	IFR0+IM1 					; check if this is okay for zero page.
.10eb	d0 f1		bne $10de			bne 	_ASGFail 					; cannot use as the value is too large (e.g. >256)
.10ed					_ASGMatches:
.10ed	48		pha				pha
.10ee	20 24 12	jsr $1224			jsr 	ASAddress 					; address out.
.10f1	ad 03 05	lda $0503			lda 	ASGOpcode 					; write opcode
.10f4	20 ff 11	jsr $11ff			jsr 	ASWriteByte 				; write a byte
.10f7	68		pla				pla
.10f8	c9 49		cmp #$49			cmp 	#AM_IMPLIED 				; dispatch
.10fa	f0 12		beq $110e			beq 	_ASGExit
.10fc	c9 52		cmp #$52			cmp 	#AM_RELATIVE
.10fe	f0 1a		beq $111a			beq 	_ASGRelative
.1100	c9 00		cmp #$00			cmp 	#0
.1102	30 0f		bmi $1113			bmi 	_ASGZeroPage
.1104					_ASGAbsolute:
.1104	a5 09		lda $09				lda 	IFR0+IM1
.1106	20 ff 11	jsr $11ff			jsr 	ASWriteByte
.1109					_ASGWriteLSB:
.1109	a5 08		lda $08				lda 	IFR0+IM0
.110b	20 ff 11	jsr $11ff			jsr 	ASWriteByte
.110e					_ASGExit:
.110e	20 41 12	jsr $1241			jsr 	ASEndLine
.1111	38		sec				sec
.1112	60		rts				rts
.1113					_ASGZeroPage:
.1113	a5 09		lda $09				lda 	IFR0+IM1 					; check operand
.1115	f0 f2		beq $1109			beq 	_ASGWriteLSB
.1117	4c 0c 2a	jmp $2a0c		jmp	ErrorV_value
.111a					_ASGRelative:
>111a	db						.byte 	$DB
.0503					ASGOpcode:
>0503							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/getmode.asm

.111b					ASGetModeForOpcode:
.111b	5a		phy				phy
.111c	a8		tay				tay 								; save in Y
.111d	a2 00		ldx #$00			ldx 	#0
.111f					_ASGSearch:
.111f	98		tya				tya 								; check if opcode matches
.1120	dd 65 11	cmp $1165,x			cmp 	ASGSpecialCases,x
.1123	f0 1b		beq $1140			beq 	_ASGIsSpecial
.1125	e8		inx				inx
.1126	e8		inx				inx
.1127	bd 65 11	lda $1165,x			lda 	ASGSpecialCases,x 			; check end of table ($F3 is an illegal 65C02 opcode)
.112a	c9 f3		cmp #$f3			cmp 	#$F3
.112c	d0 f1		bne $111f			bne 	_ASGSearch
.112e	98		tya				tya 								; only interested in lower 5 bits.
.112f	29 1f		and #$1f			and 	#$1F
.1131	a8		tay				tay
.1132	29 0f		and #$0f			and 	#$0F 						; lower 4 bits of the opcode
.1134	0a		asl a				asl 	a 							; index into ASG Table
.1135	aa		tax				tax
.1136	c0 10		cpy #$10			cpy 	#$10 						; was bit 5 set,  e.g. the MSB is odd
.1138	90 01		bcc $113b			bcc 	_ASGEven
.113a	e8		inx				inx 								; if so, take from second half.
.113b					_ASGEven:
.113b	bd 45 11	lda $1145,x			lda 	ASGTable,x 					; fetch the mode from the table
.113e	7a		ply				ply
.113f	60		rts				rts
.1140					_ASGIsSpecial:
.1140	bd 66 11	lda $1166,x			lda 	ASGSpecialCases+1,x 		; get special case for that mode.
.1143	7a		ply				ply
.1144	60		rts				rts
.1145					ASGTable:
>1145	a3 52						.byte 	AM_IMMEDIATE,AM_RELATIVE				; x0
>1147	d5 d6						.byte 	AM_ZINDX,AM_ZINDY 						; x1
>1149	a3 d4						.byte 	AM_IMMEDIATE,AM_ZIND 					; x2
>114b	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x3 (all NOP)
>114d	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x4
>114f	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x5
>1151	c1 d8						.byte 	AM_ZERO,AM_ZEROX 						; x6
>1153	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; x7
>1155	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; x8
>1157	a3 59						.byte 	AM_IMMEDIATE,AM_ABSOLUTEY				; x9
>1159	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xA
>115b	49 49						.byte 	AM_IMPLIED,AM_IMPLIED 					; xB
>115d	41 41						.byte 	AM_ABSOLUTE,AM_ABSOLUTE 				; xC
>115f	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xD
>1161	41 58						.byte 	AM_ABSOLUTE,AM_ABSOLUTEX 				; xE
>1163	c1 c1						.byte 	AM_ZERO,AM_ZERO 						; xF
.1165					ASGSpecialCases:
>1165	80 52						.byte	$80	,	AM_RELATIVE						;	BRA	rel
>1167	14 a3						.byte	$14	,	AM_IMMEDIATE					;	TRB	imm
>1169	96 d9						.byte	$96	,	AM_ZEROY						;	STX	nn,y
>116b	b6 d9						.byte	$B6	,	AM_ZEROY						;	LDX	nn,y
>116d	3c 58						.byte	$3C	,	AM_ABSOLUTEX					;	BIT	nnnn,x
>116f	6c 54						.byte	$6C	,	AM_ABSOLUTEI					;	JMP	(nnnn)
>1171	7c 55						.byte	$7C	,	AM_ABSOLUTEIX					;	JMP 	(nnnn,x)
>1173	bc 58						.byte	$BC	,	AM_ABSOLUTEX					;	LDY	nnnn,x
>1175	be 59						.byte	$BE	,	AM_ABSOLUTEY					;	LDX	nnnn,y
>1177	00 49						.byte	$00	,	AM_IMPLIED						;	BRK
>1179	20 41						.byte	$20	,	AM_ABSOLUTE						;	JSR	nnnn
>117b	40 49						.byte	$40	,	AM_IMPLIED						;	RTI
>117d	60 49						.byte	$60	,	AM_IMPLIED						;	RTS
>117f	f3						.byte 	$F3 									; (illegal opcode)

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/instruction.asm

.1180					ASOpcode:
.1180	20 5e 10	jsr $105e			jsr 	ASCalculateOpcodeHash 		; calculate the opcode hash.
.1183	8d 04 05	sta $0504			sta 	ASCurrOpcode
.1186	20 90 11	jsr $1190			jsr 	ASIdentifyAddressMode 		; identify the address mode type.
.1189	8d 05 05	sta $0505			sta 	ASCurrMode
.118c	20 a1 10	jsr $10a1			jsr 	ASGenerateCode 				; search and generate appropriate code.
.118f	60		rts				rts
.0504					ASCurrOpcode:
>0504							.fill 	1
.0505					ASCurrMode:
>0505							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/parsemode.asm

.1190					ASIdentifyAddressMode:
.1190	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next ?
.1192	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ  		; EOL or : => implied
.1194	f0 17		beq $11ad			beq 	_ASImplied
.1196	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1198	f0 13		beq $11ad			beq 	_ASImplied
.119a	c9 a4		cmp #$a4			cmp 	#PR_HASH 					; # then immediate
.119c	f0 12		beq $11b0			beq 	_ASImmediate
.119e	c9 eb		cmp #$eb			cmp 	#PR_LPAREN 					; if ( then indirection of some sort.
.11a0	f0 15		beq $11b7			beq 	_ASIndirect
.11a2	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; remaining choices are nnnn nnnn,x and nnnn,y
.11a5	20 df 11	jsr $11df			jsr 	ASCheckIndex 				; check index follows
.11a8	b0 02		bcs $11ac			bcs 	_ASIndexed 					; index found ? then it will return X Y
.11aa	a9 41		lda #$41			lda 	#AM_ABSOLUTE 				; otherwise return A
.11ac					_ASIndexed:
.11ac	60		rts				rts
.11ad					_ASImplied:
.11ad	a9 49		lda #$49			lda 	#AM_IMPLIED 				; return implied mode
.11af	60		rts				rts
.11b0					_ASImmediate:
.11b0	c8		iny				iny 								; consume #
.11b1	20 13 1a	jsr $1a13			jsr 	EXPEvalInteger8 			; 8 bit operand
.11b4	a9 a3		lda #$a3			lda 	#AM_IMMEDIATE
.11b6	60		rts				rts
.11b7					_ASIndirect:
.11b7	c8		iny				iny 								; consume the open bracket
.11b8	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; we do this because of jmp (xxxx) and (xxxx,x)
.11bb	20 df 11	jsr $11df			jsr 	ASCheckIndex 				; look for ,X
.11be	b0 12		bcs $11d2			bcs 	_ASInternalIndirect 		; ,X or ,Y found.
.11c0	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 				; not found. Must be ) or ),Y
.11c3	20 df 11	jsr $11df			jsr 	ASCheckIndex
.11c6	90 07		bcc $11cf			bcc 	_ASIIndirect 				; if ,[XY] not found, then exit assuming (xxxx)
.11c8	c9 59		cmp #$59			cmp 	#"Y" 						; must be ,Y in this mode.
.11ca	d0 10		bne $11dc			bne 	ASCISyntax 					; if not error
.11cc	a9 d6		lda #$d6			lda 	#AM_ZINDY 					; return (nn),y
.11ce	60		rts				rts
.11cf					_ASIIndirect:
.11cf	a9 54		lda #$54			lda 	#AM_ABSOLUTEI 				; might be jmp (xxxx)
.11d1	60		rts				rts
.11d2					_ASInternalIndirect:
.11d2	c9 58		cmp #$58			cmp 	#"X"						; must have been X
.11d4	d0 06		bne $11dc			bne 	ASCISyntax 					; error if (nn,y) not allowed !
.11d6	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 				; check complete e.g. (nnnn,x)
.11d9	a9 55		lda #$55			lda 	#AM_ABSOLUTEIX 				; because it might be JMP (nnnn,x)
.11db	60		rts				rts
.11dc					ASCISyntax:
.11dc	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.11df					ASCheckIndex:
.11df	b1 18		lda ($18),y			lda 	(codePtr),y 				; check comma ?
.11e1	c9 99		cmp #$99			cmp 	#PR_COMMA
.11e3	d0 18		bne $11fd			bne 	_ASCIFail
.11e5	c8		iny				iny 								; consume comma
.11e6	b1 18		lda ($18),y			lda 	(codePtr),y
.11e8	c9 57		cmp #$57			cmp 	#'X'-'A'+$40 				; check if X or Y
.11ea	f0 04		beq $11f0			beq 	_ASCIFound
.11ec	c9 58		cmp #$58			cmp 	#'Y'-'A'+$40
.11ee	d0 ec		bne $11dc			bne 	ASCISyntax
.11f0					_ASCIFound:
.11f0	aa		tax				tax 								; save X or Y in X
.11f1	c8		iny				iny 								; consume
.11f2	b1 18		lda ($18),y			lda 	(codePtr),y 				; check followed by end of identifier
.11f4	c8		iny				iny
.11f5	c9 7c		cmp #$7c			cmp 	#$7C
.11f7	d0 e3		bne $11dc			bne 	ASCISyntax
.11f9	8a		txa				txa 								; get X/Y back
.11fa	1a		inc a				inc 	a 							; convert to 'X' or 'Y' characters
.11fb	38		sec				sec
.11fc	60		rts				rts
.11fd					_ASCIFail:
.11fd	18		clc				clc
.11fe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/instruction/write.asm

.11ff					ASWriteByte:
.11ff	ae b4 06	ldx $06b4			ldx 	('P'-'A')*4 + FastVariables + 0
.1202	86 24		stx $24				stx 	zTemp0
.1204	ae b5 06	ldx $06b5			ldx 	('P'-'A')*4 + FastVariables + 1
.1207	86 25		stx $25				stx 	zTemp0+1
.1209	92 24		sta ($24)			sta 	(zTemp0)
.120b	aa		tax				tax
.120c	ad 06 05	lda $0506			lda 	ASMOption
.120f	4a		lsr a				lsr 	a
.1210	90 09		bcc $121b			bcc 	_ASWBNoEcho
.1212	a9 20		lda #$20			lda 	#32
.1214	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1217	8a		txa				txa
.1218	20 4d 12	jsr $124d			jsr 	ASPrintHex
.121b					_ASWBNoEcho:
.121b	ee b4 06	inc $06b4			inc 	('P'-'A')*4 + FastVariables + 0
.121e	d0 03		bne $1223			bne 	_ASWBNoCarry
.1220	ee b5 06	inc $06b5			inc 	('P'-'A')*4 + FastVariables + 1
.1223					_ASWBNoCarry:
.1223	60		rts				rts
.1224					ASAddress:
.1224	ad 06 05	lda $0506			lda 	ASMOption
.1227	4a		lsr a				lsr 	a
.1228	90 16		bcc $1240			bcc 	_ASAExit
.122a	ad b5 06	lda $06b5			lda 	('P'-'A')*4 + FastVariables + 1
.122d	20 4d 12	jsr $124d			jsr 	ASPrintHex
.1230	ad b4 06	lda $06b4			lda 	('P'-'A')*4 + FastVariables + 0
.1233	20 4d 12	jsr $124d			jsr 	ASPrintHex
.1236	a9 20		lda #$20			lda 	#32
.1238	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.123b	a9 3a		lda #$3a			lda 	#':'
.123d	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1240					_ASAExit:
.1240	60		rts				rts
.1241					ASEndLine:
.1241	ad 06 05	lda $0506			lda 	ASMOption
.1244	4a		lsr a				lsr 	a
.1245	90 05		bcc $124c			bcc 	_ASEExit
.1247	a9 0d		lda #$0d			lda 	#13
.1249	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.124c					_ASEExit:
.124c	60		rts				rts
.124d					ASPrintHex:
.124d	48		pha				pha
.124e	4a		lsr a				lsr 	a
.124f	4a		lsr a				lsr 	a
.1250	4a		lsr a				lsr 	a
.1251	4a		lsr a				lsr 	a
.1252	20 56 12	jsr $1256			jsr 	_ASPrintNibble
.1255	68		pla				pla
.1256					_ASPrintNibble:
.1256	29 0f		and #$0f			and 	#15
.1258	c9 0a		cmp #$0a			cmp 	#10
.125a	90 02		bcc $125e			bcc 	_ASNotHex
.125c	69 06		adc #$06			adc 	#6
.125e					_ASNotHex:
.125e	69 30		adc #$30			adc 	#48
.1260	c9 40		cmp #$40			cmp 	#64
.1262	90 02		bcc $1266			bcc 	_ASNotChar
.1264	49 20		eor #$20			eor 	#32
.1266					_ASNotChar:
.1266	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.1269					ASLabel:
.1269	20 7d 1a	jsr $1a7d			jsr 	EXPTermR0 					; get term
.126c	90 38		bcc $12a6			bcc 	_ALError 					; must be a reference term.
.126e	24 0b		bit $0b				bit 	IFR0+IExp	 				; string reference ?
.1270	30 34		bmi $12a6			bmi 	_ALError
.1272	ad 06 05	lda $0506			lda 	ASMOption 					; on pass 2 (e.g. OPT bit 1 is set)
.1275	29 02		and #$02			and 	#2
.1277	f0 16		beq $128f			beq 	_ASLNoCheck
.1279	5a		phy				phy 								; if the variable changes there's an error.
.127a	b2 08		lda ($08)			lda 	(IFR0+IM0)
.127c	f0 05		beq $1283			beq 	_ASLOk1						; (providing not changed from zero)
.127e	cd b4 06	cmp $06b4			cmp 	('P'-'A')*4 + FastVariables
.1281	d0 26		bne $12a9			bne 	_ALChanged
.1283					_ASLOk1:
.1283	a0 01		ldy #$01			ldy 	#1
.1285	b1 08		lda ($08),y			lda 	(IFR0+IM0),y
.1287	f0 05		beq $128e			beq 	_ASLOk2
.1289	cd b5 06	cmp $06b5			cmp 	('P'-'A')*4 + FastVariables+1
.128c	d0 1b		bne $12a9			bne 	_ALChanged
.128e					_ASLOk2:
.128e	7a		ply				ply
.128f					_ASLNoCheck:
.128f	5a		phy				phy
.1290	ad b4 06	lda $06b4			lda 	('P'-'A')*4 + FastVariables	; copy P to variable
.1293	92 08		sta ($08)			sta 	(IFR0+IM0)
.1295	a0 01		ldy #$01			ldy 	#1
.1297	ad b5 06	lda $06b5			lda 	('P'-'A')*4 + FastVariables+1
.129a	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.129c	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.129e	c8		iny				iny
.129f	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12a1	c8		iny				iny
.12a2	91 08		sta ($08),y			sta 	(IFR0+IM0),y
.12a4	7a		ply				ply
.12a5	60		rts				rts
.12a6					_ALError:
.12a6	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.12a9					_ALChanged:
.12a9	4c bb 2b	jmp $2bbb		jmp	ErrorV_align

;******  Return to file: include.files


;******  Processing file: src/assembler/opt.asm

.12ac					Command_OPT:
.12ac	20 13 1a	jsr $1a13			jsr 	EXPEvalInteger8
.12af	8d 06 05	sta $0506			sta 	ASMOption
.12b2	60		rts				rts
.0506					ASMOption:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.12b3					Command_ASSERT:
.12b3	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 				; get a number to assert
.12b6	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.12b8	20 6b 36	jsr $366b			jsr 	IFloatCheckZero
.12bb	f0 01		beq $12be			beq 	_CAFail 					; if so, the assert fails.
.12bd	60		rts				rts
.12be					_CAFail:
.12be	4c 40 2a	jmp $2a40		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.12c1					Command_CLEAR:
.12c1	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.12c3	c9 9b		cmp #$9b			cmp 	#PR_COLON
.12c5	f0 14		beq $12db			beq 	_CLNoParam
.12c7	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.12c9	f0 10		beq $12db			beq 	_CLNoParam
.12cb	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; address for CLEAR
.12ce	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.12d0	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.12d2	b0 0b		bcs $12df			bcs 	_CLMemory
.12d4	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.12d6	90 07		bcc $12df			bcc 	_CLMemory
.12d8	8d 1f 05	sta $051f			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.12db					_CLNoParam:
.12db	20 e2 12	jsr $12e2			jsr 	ClearCode
.12de	60		rts				rts
.12df					_CLMemory:
.12df	4c da 2a	jmp $2ada		jmp	ErrorV_memory
.12e2					ClearCode:
.12e2	20 b9 23	jsr $23b9			jsr 	PGMEndProgram 				; end program => zTemp0
.12e5	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.12e7	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.12e9	1a		inc a				inc 	a
.12ea	85 2b		sta $2b				sta 	freeMemory+1
.12ec	20 fe 2f	jsr $2ffe			jsr 	VARClearHashTables
.12ef	ad 1f 05	lda $051f			lda 	PGMEndMemoryHigh
.12f2	20 43 2c	jsr $2c43			jsr 	StackReset 					; page passed on in A
.12f5	20 a2 2c	jsr $2ca2			jsr 	StringSystemInitialise
.12f8	20 55 29	jsr $2955			jsr 	ScanProcedures
.12fb	20 7c 17	jsr $177c			jsr 	Command_RESTORE
.12fe	60		rts				rts
.12ff					AllocateMemory:
.12ff	5a		phy				phy 								; save Y
.1300	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.1302	5a		phy				phy
.1303	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.1305	5a		phy				phy
.1306	a8		tay				tay 								; count is now in XY
.1307					_AllocateLoop:
.1307	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1309	d0 04		bne $130f			bne 	_AllocateOne
.130b	c0 00		cpy #$00			cpy 	#0
.130d	f0 15		beq $1324			beq 	_AllocateExit
.130f					_AllocateOne:
.130f	a9 00		lda #$00			lda 	#0 							; zero byte
.1311	92 2a		sta ($2a)			sta 	(freeMemory)
.1313	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.1315	d0 05		bne $131c			bne 	_AllocateSkipCarry
.1317	e6 2b		inc $2b				inc 	freeMemory+1
.1319	20 28 13	jsr $1328			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.131c					_AllocateSkipCarry:
.131c	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.131e	d0 01		bne $1321			bne 	_AllocateSkipBorrow
.1320	ca		dex				dex
.1321					_AllocateSkipBorrow:
.1321	88		dey				dey
.1322	80 e3		bra $1307			bra 	_AllocateLoop
.1324					_AllocateExit:
.1324	fa		plx				plx 								; restore address
.1325	68		pla				pla
.1326	7a		ply				ply 								; restore Y
.1327	60		rts				rts
.1328					ClearCheckMemory:
.1328	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.132a	1a		inc a				inc 	a 							; spacing 2 pages
.132b	1a		inc a				inc 	a
.132c	cd 27 06	cmp $0627			cmp 	stringMemory+1 				; problems if hit string memory
.132f	b0 01		bcs $1332			bcs  	_CCMError
.1331	60		rts				rts
.1332					_CCMError:
.1332	4c da 2a	jmp $2ada		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1335					CommandDIM:
.1335	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1337	29 c0		and #$c0			and 	#$C0
.1339	c9 40		cmp #$40			cmp 	#$40
.133b	d0 39		bne $1376			bne 	_CDSyntax
.133d	20 b5 2f	jsr $2fb5			jsr 	VARGetInfo 					; get information
.1340	ad 35 06	lda $0635			lda 	VARType 					; check array.
.1343	29 02		and #$02			and 	#2
.1345	f0 2f		beq $1376			beq 	_CDSyntax
.1347	20 67 2f	jsr $2f67			jsr 	VARFind 					; does it already exist
.134a	b0 2d		bcs $1379			bcs 	_CDExists
.134c	20 13 2f	jsr $2f13			jsr 	VARCreate 					; create it - returns data ptr in XA
.134f	da		phx				phx 								; save target address
.1350	48		pha				pha
.1351	ad 35 06	lda $0635			lda 	VARType 					; type ID.
.1354	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1356	20 7c 13	jsr $137c			jsr 	CreateArray 				; create array to XA
.1359	84 26		sty $26				sty 	zTemp1 						; save Y
.135b	7a		ply				ply 								; restore target to zTemp0
.135c	84 24		sty $24				sty 	zTemp0
.135e	7a		ply				ply
.135f	84 25		sty $25				sty 	zTemp0+1
.1361	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.1363	a0 01		ldy #$01			ldy 	#1
.1365	8a		txa				txa
.1366	91 24		sta ($24),y			sta 	(zTemp0),y
.1368	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.136a	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 				; check )
.136d	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.136f	c8		iny				iny
.1370	c9 99		cmp #$99			cmp 	#PR_COMMA
.1372	f0 c1		beq $1335			beq 	CommandDIM
.1374	88		dey				dey
.1375	60		rts				rts
.1376					_CDSyntax:
.1376	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.1379					_CDExists:
.1379	4c b2 2a	jmp $2ab2		jmp	ErrorV_redefine
.137c					CreateArray:
.137c	8d 07 05	sta $0507			sta 	CAType						; save type
.137f	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; get array dimension to R0
.1382	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.1384	c9 99		cmp #$99			cmp 	#PR_COMMA
.1386	f0 04		beq $138c			beq 	_CATwoDimensions
.1388	20 d8 13	jsr $13d8			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.138b	60		rts				rts
.138c					_CATwoDimensions:
.138c	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.138e	8d 09 05	sta $0509			sta 	CADim1+1
.1391	a5 08		lda $08				lda 	IFR0+IM0
.1393	8d 08 05	sta $0508			sta 	CADim1+0
.1396	20 dd 2b	jsr $2bdd			jsr 	ERRCheckComma 				; check comma
.1399	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.139c	5a		phy				phy 								; save Y position
.139d	18		clc				clc 								; allocate the outer array of pointers.
.139e	ae 09 05	ldx $0509			ldx 	CADim1+1
.13a1	ad 08 05	lda $0508			lda 	CADim1
.13a4	20 17 14	jsr $1417			jsr 	CSAAllocate 				; allocate the outer array
.13a7	da		phx				phx									; save this address on the stack
.13a8	48		pha				pha
.13a9	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.13ab	85 28		sta $28				sta 	zTemp2
.13ad					_CACreateSubLoop:
.13ad	38		sec				sec
.13ae	20 d8 13	jsr $13d8			jsr 	CreateSingleArray 			; create data array of required size.
.13b1	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.13b3	91 28		sta ($28),y			sta 	(zTemp2),y
.13b5	8a		txa				txa
.13b6	c8		iny				iny
.13b7	91 28		sta ($28),y			sta 	(zTemp2),y
.13b9	18		clc				clc  								; next slot.
.13ba	a5 28		lda $28				lda 	zTemp2
.13bc	69 02		adc #$02			adc 	#2
.13be	85 28		sta $28				sta 	zTemp2
.13c0	90 02		bcc $13c4			bcc 	_CACNoCarry
.13c2	e6 29		inc $29				inc 	zTemp2+1
.13c4					_CACNoCarry:
.13c4	ad 08 05	lda $0508			lda 	CADim1 						; use DIM1 as a counter
.13c7	d0 03		bne $13cc			bne 	_CACNoBorrow
.13c9	ce 09 05	dec $0509			dec 	CADim1+1
.13cc					_CACNoBorrow:
.13cc	ce 08 05	dec $0508			dec 	CADim1
.13cf	ad 09 05	lda $0509			lda 	CADim1+1 					; but do one more.
.13d2	10 d9		bpl $13ad			bpl 	_CACreateSubLoop
.13d4	68		pla				pla
.13d5	fa		plx				plx
.13d6	7a		ply				ply
.13d7	60		rts				rts
.13d8					CreateSingleArray:
.13d8	5a		phy				phy
.13d9	38		sec				sec 								; allocate memory block all zeros.
.13da	a5 08		lda $08				lda 	IFR0+IM0
.13dc	a6 09		ldx $09				ldx 	IFR0+IM1
.13de	20 17 14	jsr $1417			jsr 	CSAAllocate
.13e1	ac 07 05	ldy $0507			ldy 	CAType 						; if numbers, we don't need to initialise.
.13e4	f0 2f		beq $1415			beq 	_CSANoInit
.13e6	da		phx				phx 								; save address of new array
.13e7	48		pha				pha
.13e8	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.13ea	86 25		stx $25				stx 	zTemp0+1
.13ec	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.13ee	b1 24		lda ($24),y			lda 	(zTemp0),y
.13f0	a8		tay				tay
.13f1	b2 24		lda ($24)			lda 	(zTemp0)
.13f3	aa		tax				tax
.13f4					_CSAEraseString:
.13f4	5a		phy				phy
.13f5	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.13f7	a9 80		lda #$80			lda 	#$80
.13f9	91 24		sta ($24),y			sta 	(zTemp0),y
.13fb	7a		ply				ply
.13fc	18		clc				clc 								; add 4 to next slot.
.13fd	a5 24		lda $24				lda 	zTemp0
.13ff	69 04		adc #$04			adc 	#4
.1401	85 24		sta $24				sta 	zTemp0
.1403	90 02		bcc $1407			bcc 	_CSAENoCarry
.1405	e6 25		inc $25				inc 	zTemp0+1
.1407					_CSAENoCarry:
.1407	e0 00		cpx #$00			cpx 	#0
.1409	d0 01		bne $140c			bne 	_CSANoBorrow
.140b	88		dey				dey
.140c					_CSANoBorrow:
.140c	ca		dex				dex
.140d	d0 e5		bne $13f4			bne 	_CSAEraseString
.140f	c0 00		cpy #$00			cpy 	#0
.1411	d0 e1		bne $13f4			bne 	_CSAEraseString
.1413	68		pla				pla
.1414	fa		plx				plx
.1415					_CSANoInit:
.1415	7a		ply				ply
.1416	60		rts				rts
.1417					CSAAllocate:
.1417	08		php				php 								; save type flag.
.1418	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1419	d0 01		bne $141c			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.141b	e8		inx				inx
.141c					_CSAANoCarry:
.141c	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.141e	b0 2e		bcs $144e			bcs 	_CSARange
.1420	28		plp				plp 								; restore type flag
.1421	08		php				php 								; save it back again.
.1422	da		phx				phx 								; save size.
.1423	48		pha				pha
.1424	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.1426	90 03		bcc $142b			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1428	0a		asl a				asl 	a
.1429	26 25		rol $25				rol 	zTemp0+1
.142b					_CSAATimes2:
.142b	0a		asl a				asl 	a
.142c	26 25		rol $25				rol 	zTemp0+1
.142e	18		clc				clc
.142f	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1431	90 02		bcc $1435			bcc 	_CSAANoCarry2
.1433	e6 25		inc $25				inc 	zTemp0+1
.1435					_CSAANoCarry2:
.1435	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.1437	20 ff 12	jsr $12ff			jsr 	AllocateMemory 				; allocate memory to XA
.143a	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.143c	85 24		sta $24				sta 	zTemp0
.143e	68		pla				pla  								; write element count to first 2 bytes
.143f	92 24		sta ($24)			sta 	(zTemp0)
.1441	68		pla				pla 								; msb of element count
.1442	28		plp				plp 								; CC if pointer array
.1443	b0 02		bcs $1447			bcs 	_CSAAIsData
.1445	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1447					_CSAAIsData:
.1447	a0 01		ldy #$01			ldy 	#1
.1449	91 24		sta ($24),y			sta 	(zTemp0),y
.144b	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.144d	60		rts				rts
.144e					_CSARange:
.144e	4c fb 29	jmp $29fb		jmp	ErrorV_range
.0507					CAType:
>0507							.fill 	1
.0508					CADim1:
>0508							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.1451					Command_Doke:
.1451	38		sec				sec
.1452	80 01		bra $1455			bra 	DPCommon
.1454					Command_Poke:
.1454	18		clc				clc
.1455					DPCommon:
.1455	08		php				php 								; CS if DOKE
.1456	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; address
.1459	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.145b	48		pha				pha
.145c	a5 09		lda $09				lda 	IFR0+IM1
.145e	48		pha				pha
.145f	20 dd 2b	jsr $2bdd			jsr 	ERRCheckComma 				; [dp]oke address,data
.1462	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16
.1465	68		pla				pla 								; get address back
.1466	85 25		sta $25				sta 	zTemp0+1
.1468	68		pla				pla
.1469	85 24		sta $24				sta 	zTemp0
.146b	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.146d	92 24		sta ($24)			sta 	(zTemp0)
.146f	28		plp				plp 								; done if CC
.1470	90 08		bcc $147a			bcc 	_DPExit
.1472	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.1473	a5 09		lda $09				lda 	IFR0+IM1
.1475	a0 01		ldy #$01			ldy 	#1
.1477	91 24		sta ($24),y			sta 	(zTemp0),y
.1479	7a		ply				ply
.147a					_DPExit:
.147a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.147b					Command_GOTO:
.147b	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; get line number
.147e					GotoR0:
.147e	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.1481	85 19		sta $19				sta 	codePtr+1
.1483	64 18		stz $18				stz 	codePtr
.1485					_GOSearch:
.1485	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.1487	f0 1f		beq $14a8			beq 	_GOError
.1489	a0 01		ldy #$01			ldy 	#1 							; found line #
.148b	b1 18		lda ($18),y			lda 	(codePtr),y
.148d	c5 08		cmp $08				cmp 	IFR0+IM0
.148f	d0 0a		bne $149b			bne 	_GONext
.1491	c8		iny				iny
.1492	b1 18		lda ($18),y			lda 	(codePtr),y
.1494	c5 09		cmp $09				cmp 	IFR0+IM1
.1496	d0 03		bne $149b			bne 	_GONext
.1498	4c c1 17	jmp $17c1			jmp 	RUNNewLine
.149b					_GONext:
.149b	18		clc				clc 								; advance to next line.
.149c	b2 18		lda ($18)			lda 	(codePtr)
.149e	65 18		adc $18				adc 	codePtr
.14a0	85 18		sta $18				sta 	codePtr
.14a2	90 e1		bcc $1485			bcc 	_GOSearch
.14a4	e6 19		inc $19				inc 	codePtr+1
.14a6	80 dd		bra $1485			bra 	_GOSearch
.14a8					_GOError:
.14a8	4c 7f 2b	jmp $2b7f		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.14ab					Command_Input:
.14ab	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.14ad	8d 0a 05	sta $050a			sta 	InputFlag
.14b0	80 03		bra $14b5			bra 	Command_IP_Main
.14b2					Command_Print:
.14b2	9c 0a 05	stz $050a			stz 	InputFlag
.14b5					Command_IP_Main:
.14b5	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.14b6					_CPLoop:
.14b6	08		php				php 								; save "last action" flag
.14b7	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.14b9	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.14bb	f0 48		beq $1505			beq 	_CPExit 					; without consuming
.14bd	c9 9b		cmp #$9b			cmp 	#PR_COLON
.14bf	f0 44		beq $1505			beq 	_CPExit
.14c1	68		pla				pla 								; throw last action flag
.14c2	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and consume
.14c4	c8		iny				iny
.14c5	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon (syntax seperator)
.14c7	f0 39		beq $1502			beq 	_CPContinueWithSameLine
.14c9	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma (tab)
.14cb	f0 30		beq $14fd			beq 	_CPTab
.14cd	88		dey				dey 								; undo the get.
.14ce	2c 0a 05	bit $050a			bit 	InputFlag 					; check for Input
.14d1	10 0b		bpl $14de			bpl	 	_CPNotInput
.14d3	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.14d5	c9 40		cmp #$40			cmp 	#$40
.14d7	d0 05		bne $14de			bne 	_CPNotInput
.14d9	20 0e 15	jsr $150e			jsr 	_CPInputCode 				; input code
.14dc	80 d7		bra $14b5			bra 	Command_IP_Main 			; and go round again.
.14de					_CPNotInput:
.14de	20 b5 19	jsr $19b5			jsr 	EXPEvaluateExpression 		; evaluate expression.
.14e1	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.14e3	10 0e		bpl $14f3			bpl 	_CPNumber
.14e5	5a		phy				phy
.14e6	18		clc				clc 								; string address to YX
.14e7	a5 08		lda $08				lda 	IFR0+IM0
.14e9	aa		tax				tax
.14ea	a5 09		lda $09				lda 	IFR0+IM1
.14ec	a8		tay				tay
.14ed	20 42 15	jsr $1542			jsr 	CPPrintYX 					; print YX
.14f0	7a		ply				ply
.14f1	80 c2		bra $14b5			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.14f3					_CPNumber:
.14f3	5a		phy				phy
.14f4	20 6f 34	jsr $346f			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.14f7	20 42 15	jsr $1542			jsr 	CPPrintYX 					; print string at YX
.14fa	7a		ply				ply
.14fb	80 b8		bra $14b5			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.14fd					_CPTab:
.14fd	a9 09		lda #$09			lda 	#9 							; print TAB
.14ff	20 5a 15	jsr $155a			jsr 	CPPrintA
.1502					_CPContinueWithSameLine:
.1502	38		sec				sec 								; loop round with carry set, which
.1503	80 b1		bra $14b6			bra 	_CPLoop 					; will inhibit final CR
.1505					_CPExit:
.1505	28		plp				plp 								; get last action flag
.1506	b0 05		bcs $150d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1508	a9 0d		lda #$0d			lda 	#13 						; print new line
.150a	20 5a 15	jsr $155a			jsr 	CPPrintA
.150d					_CPExit2:
.150d	60		rts				rts
.150e					_CPInputCode:
.150e	20 7d 1a	jsr $1a7d			jsr 	EXPTermR0 					; get the term, the thing being input to
.1511	5a		phy				phy 								; save position
.1512	20 57 15	jsr $1557			jsr 	CPInputA					; input a line to YX
.1515	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1517	30 18		bmi $1531			bmi 	_CPInputString
.1519	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.151b	48		pha				pha
.151c	a5 09		lda $09				lda 	IFR0+IM1
.151e	48		pha				pha
.151f	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.1521	84 25		sty $25				sty 	zTemp0+1
.1523	20 67 1d	jsr $1d67			jsr 	VALConversionZTemp0
.1526	68		pla				pla 								; do the assign.
.1527	85 25		sta $25				sta 	zTemp0+1
.1529	68		pla				pla
.152a	85 24		sta $24				sta 	zTemp0
.152c	20 82 15	jsr $1582			jsr 	AssignNumber
.152f	7a		ply				ply
.1530	60		rts				rts
.1531					_CPInputString:
.1531	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1533	85 24		sta $24				sta 	zTemp0
.1535	a5 09		lda $09				lda 	IFR0+IM1
.1537	85 25		sta $25				sta 	zTemp0+1
.1539	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.153b	84 09		sty $09				sty 	IFR0+IM1
.153d	20 99 15	jsr $1599			jsr 	AssignString 				; assign the string
.1540	7a		ply				ply 								; exit
.1541	60		rts				rts
.1542					CPPrintYX:
.1542	86 24		stx $24				stx 	zTemp0
.1544	84 25		sty $25				sty 	zTemp0+1
.1546	b2 24		lda ($24)			lda 	(zTemp0)
.1548	aa		tax				tax
.1549	f0 0b		beq $1556			beq 	_CPPrintExit
.154b	a0 01		ldy #$01			ldy 	#1
.154d					_CPPrintAYXLoop:
.154d	b1 24		lda ($24),y			lda 	(zTemp0),y
.154f	20 5a 15	jsr $155a			jsr 	CPPrintA
.1552	c8		iny				iny
.1553	ca		dex				dex
.1554	d0 f7		bne $154d			bne 	_CPPrintAYXLoop
.1556					_CPPrintExit:
.1556	60		rts				rts
.1557					CPInputA:
.1557	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.155a					CPPrintA:
.155a	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.050a					InputFlag:
>050a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.155d					CommandLET:
.155d	20 7d 1a	jsr $1a7d			jsr 	EXPTermR0 					; get term
.1560	90 6f		bcc $15d1			bcc 	CLError 					; must be a reference term.
.1562	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.1564	48		pha				pha
.1565	a5 09		lda $09				lda 	IFR0+IM1
.1567	48		pha				pha
.1568	a5 0b		lda $0b				lda 	IFR0+IExp
.156a	48		pha				pha
.156b	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.156d	20 e5 2b	jsr $2be5			jsr 	ERRCheckA
.1570	20 b5 19	jsr $19b5			jsr 	EXPEvaluateExpression 		; right hand side.
.1573	68		pla				pla 								; restore type of l-expr
.1574	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1576	30 5c		bmi $15d4			bmi 	CLType
.1578	fa		plx				plx 	 							; pop target address to zTemp0
.1579	86 25		stx $25				stx 	zTemp0+1
.157b	fa		plx				plx
.157c	86 24		stx $24				stx 	zTemp0
.157e					AssignData:
.157e	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.1580	30 17		bmi $1599			bmi 	AssignString
.1582					AssignNumber:
.1582	5a		phy				phy
.1583	a0 03		ldy #$03			ldy 	#3
.1585	a5 0b		lda $0b				lda 	IFR0+IExp
.1587	91 24		sta ($24),y			sta 	(zTemp0),y
.1589	88		dey				dey
.158a	a5 0a		lda $0a				lda 	IFR0+IM2
.158c	91 24		sta ($24),y			sta 	(zTemp0),y
.158e	88		dey				dey
.158f	a5 09		lda $09				lda 	IFR0+IM1
.1591	91 24		sta ($24),y			sta 	(zTemp0),y
.1593	a5 08		lda $08				lda 	IFR0+IM0
.1595	92 24		sta ($24)			sta 	(zTemp0)
.1597	7a		ply				ply
.1598	60		rts				rts
.1599					AssignString:
.1599	5a		phy				phy
.159a	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.159c	b1 24		lda ($24),y			lda 	(zTemp0),y
.159e	12 24		ora ($24)			ora 	(zTemp0)
.15a0	f0 23		beq $15c5			beq 	_CLConcreteString
.15a2	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.15a4	85 26		sta $26				sta 	zTemp1
.15a6	b1 24		lda ($24),y			lda 	(zTemp0),y
.15a8	85 27		sta $27				sta 	zTemp1+1
.15aa	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.15ac	38		sec				sec 								; we want 3 for slot size, status, string size.
.15ad	e9 03		sbc #$03			sbc 	#3
.15af	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.15b1	90 12		bcc $15c5			bcc 	_CLConcreteString 			; if it won't fit concrete the string again.
.15b3	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte)
.15b5	1a		inc a				inc 	a
.15b6	aa		tax				tax
.15b7	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.15b9					_CLReplaceString:
.15b9	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.15bb	c8		iny				iny
.15bc	c8		iny				iny
.15bd	91 26		sta ($26),y			sta 	(zTemp1),y
.15bf	88		dey				dey
.15c0	ca		dex				dex
.15c1	d0 f6		bne $15b9			bne 	_CLReplaceString
.15c3	80 0a		bra $15cf			bra 	_CLExit
.15c5					_CLConcreteString:
.15c5	20 57 2c	jsr $2c57			jsr 	StringConcrete  			; concreted string in XA.
.15c8	a0 01		ldy #$01			ldy 	#1 							; store the address
.15ca	92 24		sta ($24)			sta 	(zTemp0)
.15cc	8a		txa				txa
.15cd	91 24		sta ($24),y			sta 	(zTemp0),y
.15cf					_CLExit:
.15cf	7a		ply				ply
.15d0	60		rts				rts
.15d1					CLError:
.15d1	4c 1d 2b	jmp $2b1d		jmp	ErrorV_variable
.15d4					CLType:
.15d4	4c 1a 2a	jmp $2a1a		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.15d7					Command_LIST:
.15d7	9c 0b 05	stz $050b			stz 	CLFrom 						; default from
.15da	9c 0c 05	stz $050c			stz 	CLFrom+1
.15dd	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.15df	c9 99		cmp #$99			cmp 	#PR_COMMA
.15e1	f0 1d		beq $1600			beq 	_CLToLine
.15e3	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.15e5	f0 37		beq $161e			beq 	_CLDefaultTo
.15e7	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.15ea	a5 08		lda $08				lda 	IFR0+IM0
.15ec	8d 0b 05	sta $050b			sta 	CLFrom
.15ef	8d 0d 05	sta $050d			sta 	CLTo
.15f2	a5 09		lda $09				lda 	IFR0+IM1
.15f4	8d 0c 05	sta $050c			sta 	CLFrom+1
.15f7	8d 0e 05	sta $050e			sta 	CLTo+1
.15fa	b1 18		lda ($18),y			lda 	(codePtr),y
.15fc	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.15fe	f0 26		beq $1626			beq 	_CLList
.1600					_CLToLine:
.1600	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1602	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1604	f0 18		beq $161e			beq 	_CLDefaultTo
.1606	20 dd 2b	jsr $2bdd			jsr 	ERRCheckComma 				; sep comma
.1609	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.160b	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.160d	f0 0f		beq $161e			beq 	_CLDefaultTo
.160f	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; there's a To value.
.1612	a5 08		lda $08				lda 	IFR0+IM0
.1614	8d 0d 05	sta $050d			sta 	CLTo
.1617	a5 09		lda $09				lda 	IFR0+IM1
.1619	8d 0e 05	sta $050e			sta 	CLTo+1
.161c	80 08		bra $1626			bra 	_CLList
.161e					_CLDefaultTo:
.161e	a9 ff		lda #$ff			lda 	#$FF
.1620	8d 0d 05	sta $050d			sta 	CLTo
.1623	8d 0e 05	sta $050e			sta 	CLTo+1
.1626					_CLList:
.1626	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.1629	85 19		sta $19				sta 	codePtr+1
.162b	64 18		stz $18				stz 	codePtr
.162d	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.162f	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1631	20 ff 21	jsr $21ff			jsr 	TOKSetDetokeniseOutput
.1634					_CLLoop:
.1634	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1636	f0 51		beq $1689			beq 	_CLExit
.1638	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.163b	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.163e	d0 4c		bne $168c			bne 	_CLBreak
.1640	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.1642	20 8f 16	jsr $168f			jsr 	_CLCompareLine
.1645	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1647	f0 33		beq $167c			beq 	_CLNext
.1649	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.164b	20 8f 16	jsr $168f			jsr 	_CLCompareLine
.164e	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.1650	f0 2a		beq $167c			beq 	_CLNext
.1652	a0 02		ldy #$02			ldy 	#2 							; print line #
.1654	b1 18		lda ($18),y			lda 	(codePtr),y
.1656	aa		tax				tax
.1657	88		dey				dey
.1658	b1 18		lda ($18),y			lda 	(codePtr),y
.165a	20 2c 2e	jsr $2e2c			jsr 	WriteIntXA
.165d					_CLSpacing:
.165d	a9 20		lda #$20			lda 	#32
.165f	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.1662	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.1665	e0 06		cpx #$06			cpx 	#6
.1667	d0 f4		bne $165d			bne 	_CLSpacing
.1669	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.166b	a5 18		lda $18				lda 	codePtr
.166d	18		clc				clc
.166e	69 03		adc #$03			adc 	#3
.1670	aa		tax				tax
.1671	90 01		bcc $1674			bcc 	_CLNoCarry2
.1673	c8		iny				iny
.1674					_CLNoCarry2:
.1674	20 a4 21	jsr $21a4			jsr 	TOKDetokenise
.1677	a9 0d		lda #$0d			lda 	#13	 						; next line
.1679	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.167c					_CLNext:
.167c	18		clc				clc 								; advance to next line.
.167d	b2 18		lda ($18)			lda 	(codePtr)
.167f	65 18		adc $18				adc 	codePtr
.1681	85 18		sta $18				sta 	codePtr
.1683	90 02		bcc $1687			bcc 	_CLNoCarry
.1685	e6 19		inc $19				inc 	codePtr+1
.1687					_CLNoCarry:
.1687	80 ab		bra $1634			bra 	_CLLoop
.1689					_CLExit:
.1689	4c 4b 2e	jmp $2e4b			jmp 	WarmStart
.168c					_CLBreak:
.168c	4c 75 2b	jmp $2b75		jmp	ErrorV_break
.168f					_CLCompareLine:
.168f	a0 01		ldy #$01			ldy 	#1
.1691	38		sec				sec
.1692	b1 18		lda ($18),y			lda 	(codePtr),y
.1694	fd 0b 05	sbc $050b,x			sbc 	CLFrom,x
.1697	85 24		sta $24				sta 	zTemp0
.1699	c8		iny				iny
.169a	b1 18		lda ($18),y			lda 	(codePtr),y
.169c	fd 0c 05	sbc $050c,x			sbc 	CLFrom+1,x
.169f	90 0a		bcc $16ab			bcc 	_CLIsNegative
.16a1	d0 05		bne $16a8			bne 	_CLIsPositive
.16a3	a5 24		lda $24				lda 	zTemp0
.16a5	d0 01		bne $16a8			bne 	_CLIsPositive
.16a7	60		rts				rts
.16a8					_CLIsPositive:
.16a8	a9 01		lda #$01			lda 	#1
.16aa	60		rts				rts
.16ab					_CLIsNegative:
.16ab	a9 ff		lda #$ff			lda 	#255
.16ad	60		rts				rts
.050b					CLFrom:
>050b							.fill 	2
.050d					CLTo:
>050d							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.16ae					Command_NEW:
.16ae	20 ad 23	jsr $23ad			jsr 	PGMNewProgram 				; Reset current program
.16b1	20 e2 12	jsr $12e2			jsr 	ClearCode 					; Run CLR
.16b4	4c 1a 18	jmp $181a			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.16b7					Command_READ:
.16b7	20 7d 1a	jsr $1a7d			jsr 	EXPTermR0 					; get term to R0
.16ba	90 35		bcc $16f1			bcc 	_CRSyntax 					; fail if not a reference.
.16bc	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.16be	48		pha				pha
.16bf	a5 09		lda $09				lda 	IFR0+IM1
.16c1	48		pha				pha
.16c2	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.16c4	48		pha				pha
.16c5	20 8e 17	jsr $178e			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.16c8	ad 13 05	lda $0513			lda 	dataInStatement 			; if in a data statement, we don't need to search
.16cb	d0 27		bne $16f4			bne 	_CRHaveData  				; forward for the next one.
.16cd					_CRNextLine:
.16cd	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.16cf	f0 1a		beq $16eb			beq 	_CRNoData
.16d1					_CRKeepSearching:
.16d1	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.16d3	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.16d5	20 fa 28	jsr $28fa			jsr 	ScanForward
.16d8	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.16da	f0 18		beq $16f4			beq 	_CRHaveData 				; found it
.16dc	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.16de	18		clc				clc 								; try the next line, keep going.
.16df	b2 18		lda ($18)			lda 	(codePtr)
.16e1	65 18		adc $18				adc 	codePtr
.16e3	85 18		sta $18				sta 	codePtr
.16e5	90 e6		bcc $16cd			bcc 	_CRNextLine
.16e7	e6 19		inc $19				inc 	codePtr+1
.16e9	80 e2		bra $16cd			bra 	_CRNextLine
.16eb					_CRNoData:
.16eb	4c a2 2a	jmp $2aa2		jmp	ErrorV_data
.16ee					_CLType:
.16ee	4c 1a 2a	jmp $2a1a		jmp	ErrorV_type
.16f1					_CRSyntax:
.16f1	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.16f4					_CRHaveData:
.16f4	20 b5 19	jsr $19b5			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.16f7	68		pla				pla 								; type of l-expr
.16f8	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.16fa	30 f2		bmi $16ee			bmi 	_CLType
.16fc	68		pla				pla 								; restore address
.16fd	85 25		sta $25				sta 	zTemp0+1
.16ff	68		pla				pla
.1700	85 24		sta $24				sta 	zTemp0
.1702	20 7e 15	jsr $157e			jsr 	AssignData 					; write R0 there.
.1705	9c 13 05	stz $0513			stz 	dataInStatement 			; clear in data flag
.1708	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.170a	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.170c	d0 04		bne $1712			bne 	_CRSwapBack
.170e	c8		iny				iny 								; consume comma
.170f	ee 13 05	inc $0513			inc 	dataInStatement 			; set in data statement flag.
.1712					_CRSwapBack:
.1712	20 8e 17	jsr $178e			jsr 	SwapCodeDataPointers		; swap them back.
.1715	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1717	c8		iny				iny
.1718	c9 99		cmp #$99			cmp 	#PR_COMMA
.171a	f0 9b		beq $16b7			beq 	Command_READ 				; if so go round again.
.171c	88		dey				dey 								; unpick get.
.171d	60		rts				rts
.171e					Command_DATA:
.171e	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1720	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1722	20 fa 28	jsr $28fa			jsr 	ScanForward
.1725	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1727	d0 01		bne $172a			bne 	_CDNotEOL
.1729	88		dey				dey
.172a					_CDNotEOL:
.172a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.172b					Command_REM:
.172b					Command_REM2:
.172b	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.172d	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.172f	d0 06		bne $1737			bne 	_CRExit
.1731	c8		iny				iny 								; skip over it, it's a comment.
.1732	98		tya				tya
.1733	38		sec				sec
.1734	71 18		adc ($18),y			adc 	(codePtr),y
.1736	a8		tay				tay
.1737					_CRExit:
.1737	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.1738					Command_RENUMBER:
.1738	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.173a	85 08		sta $08				sta 	IM0+IFR0
.173c	a9 03		lda #$03			lda 	#1000 >> 8
.173e	85 09		sta $09				sta 	IM1+IFR0
.1740	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1742	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1744	f0 07		beq $174d			beq 	_CRIsDefault
.1746	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1748	f0 03		beq $174d			beq 	_CRIsDefault
.174a	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; get other start
.174d					_CRIsDefault:
.174d	5a		phy				phy
.174e	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.1750	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.1753	85 25		sta $25				sta 	zTemp0+1
.1755					_CRRenumberLoop:
.1755	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.1757	f0 21		beq $177a			beq 	_CRExit
.1759	18		clc				clc
.175a	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.175c	a5 08		lda $08				lda 	IFR0+IM0
.175e	91 24		sta ($24),y			sta 	(zTemp0),y
.1760	69 0a		adc #$0a			adc 	#10
.1762	85 08		sta $08				sta 	IFR0+IM0
.1764	c8		iny				iny
.1765	a5 09		lda $09				lda 	IFR0+IM1
.1767	91 24		sta ($24),y			sta 	(zTemp0),y
.1769	69 00		adc #$00			adc 	#0
.176b	85 09		sta $09				sta 	IFR0+IM1
.176d	18		clc				clc 								; next line.
.176e	b2 24		lda ($24)			lda 	(zTemp0)
.1770	65 24		adc $24				adc 	zTemp0
.1772	85 24		sta $24				sta 	zTemp0
.1774	90 df		bcc $1755			bcc 	_CRRenumberLoop
.1776	e6 25		inc $25				inc 	zTemp0+1
.1778	80 db		bra $1755			bra 	_CRRenumberLoop
.177a					_CRExit:
.177a	7a		ply				ply
.177b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.177c					S
.177c					Command_RESTORE:
.177c	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.177f	8d 10 05	sta $0510			sta 	dataPtr+1
.1782	9c 0f 05	stz $050f			stz 	dataPtr
.1785	a9 03		lda #$03			lda 	#3 							; position start of line
.1787	8d 11 05	sta $0511			sta 	dataPos
.178a	9c 13 05	stz $0513			stz 	dataInStatement 			; not in statement
.178d	60		rts				rts
.178e					SwapCodeDataPointers:
.178e	ad 0f 05	lda $050f			lda 	dataPtr 					; swap LSB of code/data
.1791	a6 18		ldx $18				ldx 	codePtr
.1793	85 18		sta $18				sta 	codePtr
.1795	8e 0f 05	stx $050f			stx 	dataPtr
.1798	ad 10 05	lda $0510			lda 	dataPtr+1 					; swap MSB of code/data
.179b	a6 19		ldx $19				ldx 	codePtr+1
.179d	85 19		sta $19				sta 	codePtr+1
.179f	8e 10 05	stx $0510			stx 	dataPtr+1
.17a2	ad 11 05	lda $0511			lda 	dataPos 					; swap dataPos and Y
.17a5	8c 11 05	sty $0511			sty 	dataPos
.17a8	a8		tay				tay
.17a9	60		rts				rts
.050f					dataPtr:
>050f							.fill 	2
.0511					dataPos:
>0511							.fill 	2
.0513					dataInStatement:
>0513							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.17aa					Command_RUN:
.17aa	20 e2 12	jsr $12e2			jsr 	ClearCode					; clear everything out.
.17ad	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.17b0	85 19		sta $19				sta 	codePtr+1
.17b2	64 18		stz $18				stz 	codePtr
.17b4	80 0b		bra $17c1			bra 	RUNNewLine
.17b6					RUNEndOfLine:
.17b6	18		clc				clc 								; advance to next line.
.17b7	b2 18		lda ($18)			lda 	(codePtr)
.17b9	65 18		adc $18				adc 	codePtr
.17bb	85 18		sta $18				sta 	codePtr
.17bd	90 02		bcc $17c1			bcc 	_RELNoCarry
.17bf	e6 19		inc $19				inc 	codePtr+1
.17c1					_RELNoCarry:
.17c1					RUNNewLine:
.17c1	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.17c3	9a		txs				txs
.17c4	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.17c6	f0 52		beq $181a			beq 	Command_END
.17c8	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.17ca	b1 18		lda ($18),y			lda 	(codePtr),y
.17cc	8d 30 06	sta $0630			sta 	ERRLine
.17cf	c8		iny				iny
.17d0	b1 18		lda ($18),y			lda 	(codePtr),y
.17d2	8d 31 06	sta $0631			sta 	ERRLine+1
.17d5	c8		iny				iny 								; offset into codePtr for start of line.
.17d6					RUNNewCommand:
.17d6	9c 25 06	stz $0625			stz 	stringInitialised 			; reset string system flag.
.17d9	ce 14 05	dec $0514			dec 	checkCounter				; don't do these checks ever command
.17dc	d0 0a		bne $17e8			bne 	_RNCNoCheck
.17de	5a		phy				phy 								; keyboard check.
.17df	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.17e2	7a		ply				ply
.17e3	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.17e6	d0 1e		bne $1806			bne 	_RUNBreak
.17e8					_RNCNoCheck:
.17e8	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.17ea	10 1d		bpl $1809			bpl		_RUNNotToken 				; probably an identifier
.17ec	c8		iny				iny 								; consume token
.17ed	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.17ef	f0 e5		beq $17d6			beq 	RUNNewCommand
.17f1	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.17f3	b0 0e		bcs $1803			bcs 	_RUNSyntax
.17f5	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.17f7	90 0a		bcc $1803			bcc 	_RUNSyntax
.17f9	0a		asl a				asl 	a 							; double into X.
.17fa	aa		tax				tax
.17fb	20 00 18	jsr $1800			jsr 	_RUNDispatchMain			; call the main dispatcher
.17fe	80 d6		bra $17d6			bra 	RUNNewCommand
.1800					_RUNDispatchMain:
.1800	7c 80 20	jmp ($2080,x)			jmp 	(VectorTable,x)
.1803					_RUNSyntax:
.1803	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.1806					_RUNBreak:
.1806	4c 75 2b	jmp $2b75		jmp	ErrorV_break
.1809					_RUNNotToken:
.1809	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error (numbers)
.180b	90 f6		bcc $1803			bcc 	_RUNSyntax
.180d	20 5d 15	jsr $155d			jsr 	CommandLET 					; assignment
.1810	80 c4		bra $17d6			bra 	RUNNewCommand 				; loop round.
.1812					Command_Shift_Handler:
.1812	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.1814	c8		iny				iny
.1815	0a		asl a				asl 	a 							; double into X
.1816	aa		tax				tax
.1817	7c 80 21	jmp ($2180,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.181a					Command_END:
.181a	4c 4b 2e	jmp $2e4b			jmp 	WarmStart
.0514					checkCounter:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.181d					Command_STOP:
.181d	4c 8e 2a	jmp $2a8e		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1820					Command_Sys:
.1820	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; execution address
.1823	5a		phy				phy
.1824	ad 78 06	lda $0678			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1827	ae d4 06	ldx $06d4			ldx 	('X'-'A')*4 + FastVariables
.182a	ac d8 06	ldy $06d8			ldy 	('Y'-'A')*4 + FastVariables
.182d	20 32 18	jsr $1832			jsr 	_CSCallIFR0 				; call the code
.1830	7a		ply				ply
.1831	60		rts				rts
.1832					_CSCallIFR0:
.1832	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1835					NoExec01:
.1835					NoExec02:
.1835					NoExec03:
.1835					NoExec04:
.1835					NoExec05:
.1835					NoExec06:
.1835					NoExec07:
.1835					NoExec08:
.1835	4c ea 29	jmp $29ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1838					EXPBinAdd:
.1838	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.183a	30 6f		bmi $18ab			bmi 	EXPConcatenate
.183c	a2 0c		ldx #$0c			ldx 	#IFR1
.183e	4c 6a 30	jmp $306a			jmp 	IFloatAdd
.1841					EXPBinSub:
.1841	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1843	30 3f		bmi $1884			bmi 	EXPTypeError
.1845	a2 0c		ldx #$0c			ldx 	#IFR1
.1847	4c 63 30	jmp $3063			jmp 	IFloatSubtract
.184a					EXPBinMul:
.184a	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.184c	30 36		bmi $1884			bmi 	EXPTypeError
.184e	a2 0c		ldx #$0c			ldx 	#IFR1
.1850	4c 14 31	jmp $3114			jmp 	IFloatMultiply
.1853					EXPBinFDiv:
.1853	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1855	30 2d		bmi $1884			bmi 	EXPTypeError
.1857	a2 0c		ldx #$0c			ldx 	#IFR1
.1859	20 96 33	jsr $3396			jsr 	IFloatDivideFloat
.185c	b0 0f		bcs $186d			bcs 	EXPDZero
.185e	60		rts				rts
.185f					EXPBinIDiv:
.185f	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1861	30 21		bmi $1884			bmi 	EXPTypeError
.1863	a2 0c		ldx #$0c			ldx 	#IFR1
.1865	20 96 33	jsr $3396			jsr 	IFloatDivideFloat
.1868	b0 03		bcs $186d			bcs 	EXPDZero
.186a	4c 73 33	jmp $3373			jmp 	IFloatIntegerR0
.186d					EXPDZero:
.186d	4c 63 2a	jmp $2a63		jmp	ErrorV_divzero
.1870					EXPBinIMod:
.1870	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1872	30 10		bmi $1884			bmi 	EXPTypeError
.1874	a2 0c		ldx #$0c			ldx 	#IFR1
.1876	5a		phy				phy
.1877	20 a9 32	jsr $32a9			jsr 	IFPreProcessBitwise 		; set up everything.
.187a	d0 05		bne $1881			bne 	EXPDRange
.187c	20 e2 31	jsr $31e2			jsr 	IFloatModulusInteger
.187f	7a		ply				ply
.1880	60		rts				rts
.1881					EXPDRange:
.1881	4c fb 29	jmp $29fb		jmp	ErrorV_range
.1884					EXPTypeError:
.1884	4c 1a 2a	jmp $2a1a		jmp	ErrorV_type
.1887					EXPBinAnd:
.1887	24 0b		bit $0b				bit 	IFR0+IExp
.1889	30 f9		bmi $1884			bmi 	EXPTypeError
.188b	a2 0c		ldx #$0c			ldx 	#IFR1
.188d	20 64 32	jsr $3264			jsr 	IFloatBitwiseAnd
.1890	b0 ef		bcs $1881			bcs 	EXPDRange
.1892	60		rts				rts
.1893					EXPBinOr:
.1893	24 0b		bit $0b				bit 	IFR0+IExp
.1895	30 ed		bmi $1884			bmi 	EXPTypeError
.1897	a2 0c		ldx #$0c			ldx 	#IFR1
.1899	20 7b 32	jsr $327b			jsr 	IFloatBitwiseOr
.189c	b0 e3		bcs $1881			bcs 	EXPDRange
.189e	60		rts				rts
.189f					EXPBinXor:
.189f	24 0b		bit $0b				bit 	IFR0+IExp
.18a1	30 e1		bmi $1884			bmi 	EXPTypeError
.18a3	a2 0c		ldx #$0c			ldx 	#IFR1
.18a5	20 92 32	jsr $3292			jsr 	IFloatBitwiseXor
.18a8	b0 d7		bcs $1881			bcs 	EXPDRange
.18aa	60		rts				rts
.18ab					EXPConcatenate:
.18ab	18		clc				clc
.18ac	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.18ae	72 0c		adc ($0c)			adc 	(IFR1)
.18b0	b0 2d		bcs $18df			bcs 	_EXPCError 					; far too long.
.18b2	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.18b4	da		phx				phx
.18b5	a6 09		ldx $09				ldx 	IFR0+1
.18b7	da		phx				phx
.18b8	20 ca 2c	jsr $2cca			jsr 	StringTempAllocate 			; allocate string, set up return
.18bb	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.18bd	a5 0c		lda $0c				lda 	IFR1
.18bf	20 c8 18	jsr $18c8			jsr 	_EXPCCopyXA
.18c2	fa		plx				plx 								; copy second string
.18c3	68		pla				pla
.18c4	20 c8 18	jsr $18c8			jsr 	_EXPCCopyXA
.18c7	60		rts				rts
.18c8					_EXPCCopyXA:
.18c8	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.18ca	85 24		sta $24				sta 	zTemp0
.18cc	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.18ce	f0 0e		beq $18de			beq 	_EXPCCExit 					; nothing in string
.18d0	aa		tax				tax 								; count
.18d1	5a		phy				phy 								; start position
.18d2	a0 01		ldy #$01			ldy 	#1
.18d4					_EXPCCLoop:
.18d4	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.18d6	20 ff 2c	jsr $2cff			jsr 	StringTempWrite
.18d9	c8		iny				iny
.18da	ca		dex				dex
.18db	d0 f7		bne $18d4			bne 	_EXPCCLoop
.18dd	7a		ply				ply
.18de					_EXPCCExit:
.18de	60		rts				rts
.18df					_EXPCError:
.18df	4c 07 2b	jmp $2b07		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.18e2					EXPReturnTrue:
.18e2	a2 08		ldx #$08			ldx 	#IFR0
.18e4	a9 01		lda #$01			lda 	#1
.18e6	20 74 36	jsr $3674			jsr 	IFloatSetByte
.18e9	20 7d 36	jsr $367d			jsr 	IFloatNegate
.18ec	60		rts				rts
.18ed					EXPReturnFalse:
.18ed	a2 08		ldx #$08			ldx 	#IFR0
.18ef	4c 72 36	jmp $3672			jmp 	IFloatSetZero
.18f2					EXPCompareEqual:
.18f2	20 28 19	jsr $1928			jsr 	EXPCompareBaseCode
.18f5	c9 00		cmp #$00			cmp 	#0
.18f7	f0 e9		beq $18e2			beq 	EXPReturnTrue
.18f9	80 f2		bra $18ed			bra 	EXPReturnFalse
.18fb					EXPCompareLess:
.18fb	20 28 19	jsr $1928			jsr 	EXPCompareBaseCode
.18fe	c9 ff		cmp #$ff			cmp 	#$FF
.1900	f0 e0		beq $18e2			beq 	EXPReturnTrue
.1902	80 e9		bra $18ed			bra 	EXPReturnFalse
.1904					EXPCompareGreater:
.1904	20 28 19	jsr $1928			jsr 	EXPCompareBaseCode
.1907	c9 01		cmp #$01			cmp 	#1
.1909	f0 d7		beq $18e2			beq 	EXPReturnTrue
.190b	80 e0		bra $18ed			bra 	EXPReturnFalse
.190d					EXPCompareNotEqual:
.190d	20 28 19	jsr $1928			jsr 	EXPCompareBaseCode
.1910	c9 00		cmp #$00			cmp 	#0
.1912	d0 ce		bne $18e2			bne 	EXPReturnTrue
.1914	80 d7		bra $18ed			bra 	EXPReturnFalse
.1916					EXPCompareLessEqual:
.1916	20 28 19	jsr $1928			jsr 	EXPCompareBaseCode
.1919	c9 01		cmp #$01			cmp 	#1
.191b	d0 c5		bne $18e2			bne 	EXPReturnTrue
.191d	80 ce		bra $18ed			bra 	EXPReturnFalse
.191f					EXPCompareGreaterEqual:
.191f	20 28 19	jsr $1928			jsr 	EXPCompareBaseCode
.1922	c9 ff		cmp #$ff			cmp 	#$FF
.1924	d0 bc		bne $18e2			bne 	EXPReturnTrue
.1926	80 c5		bra $18ed			bra 	EXPReturnFalse
.1928					EXPCompareBaseCode:
.1928	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.192a	30 10		bmi $193c			bmi 	_EXCBCString
.192c	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.192e	20 41 33	jsr $3341			jsr 	IFloatCompare
.1931	a5 08		lda $08				lda 	IFR0+IM0
.1933	f0 06		beq $193b			beq 	_EXCBCExit 					; return 0 if zero
.1935	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1937	50 02		bvc $193b			bvc 	_EXCBCExit
.1939	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.193b					_EXCBCExit:
.193b	60		rts				rts
.193c					_EXCBCString:
.193c	5a		phy				phy
.193d	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.193f	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1941	90 02		bcc $1945			bcc 	_EXCBCSmaller
.1943	b2 0c		lda ($0c)			lda 	(IFR1)
.1945					_EXCBCSmaller:
.1945	aa		tax				tax
.1946	f0 0d		beq $1955			beq 	_EXCBCMatches 				; if zero common length matches
.1948	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.194a					_EXCBCCheckSmallerMatches:
.194a	c8		iny				iny 								; compare directly as far as common length
.194b	38		sec				sec
.194c	b1 0c		lda ($0c),y			lda 	(IFR1),y
.194e	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1950	d0 08		bne $195a			bne 	_EXCBCExit2
.1952	ca		dex				dex
.1953	d0 f5		bne $194a			bne 	_EXCBCCheckSmallerMatches
.1955					_EXCBCMatches:
.1955	38		sec				sec
.1956	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1958	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.195a					_EXCBCExit2:
.195a	7a		ply				ply
.195b	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.195d	f0 04		beq $1963			beq 	_EXCBCReturn
.195f	30 03		bmi $1964			bmi 	_EXCBCFF 					; return $FF if <
.1961	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1963					_EXCBCReturn:
.1963	60		rts				rts
.1964					_EXCBCFF:
.1964	a9 ff		lda #$ff			lda 	#$FF
.1966	60		rts				rts
.1967					_EXCBCRange:
.1967	4c fb 29	jmp $29fb		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.196a					EXPBinLeft:
.196a	a9 ff		lda #$ff			lda 	#$FF
.196c	8d 15 05	sta $0515			sta 	EXPShiftLeftFlag
.196f	4c 75 19	jmp $1975			jmp 	EXPShiftCommon
.1972					EXPBinRight:
.1972	9c 15 05	stz $0515			stz 	EXPShiftLeftFlag
.1975					EXPShiftCommon:
.1975	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1977	05 0f		ora $0f				ora 	IFR1+IExp
.1979	29 7f		and #$7f			and 	#$7F
.197b	d0 35		bne $19b2			bne 	_EXPSRange
.197d	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.197f	29 e0		and #$e0			and 	#$E0
.1981	05 09		ora $09				ora 	IFR0+IM1
.1983	05 0a		ora $0a				ora 	IFR0+IM2
.1985	d0 25		bne $19ac			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.1987	5a		phy				phy
.1988	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.198a	29 1f		and #$1f			and 	#$1F
.198c	f0 17		beq $19a5			beq 	_EXPSExit 					; exit if zero
.198e	a8		tay				tay
.198f					_EXPSLoop:
.198f	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.1991	2c 15 05	bit $0515			bit 	EXPShiftLeftFlag
.1994	30 05		bmi $199b			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.1996	20 a1 36	jsr $36a1			jsr 	IFloatShiftRight
.1999	80 07		bra $19a2			bra 	_EXPSContinue
.199b					_EXPSShiftLeft:
.199b	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.199e	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.19a0	30 10		bmi $19b2			bmi 	_EXPSRange
.19a2					_EXPSContinue:
.19a2	88		dey				dey 								; do it Y times
.19a3	d0 ea		bne $198f			bne 	_EXPSLoop
.19a5					_EXPSExit:
.19a5	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.19a7	20 03 36	jsr $3603			jsr 	IFloatCopyFromRegister
.19aa	7a		ply				ply
.19ab	60		rts				rts
.19ac					_EXPSShiftZero:
.19ac	a2 08		ldx #$08			ldx 	#IFR0
.19ae	20 72 36	jsr $3672			jsr 	IFloatSetZero
.19b1	60		rts				rts
.19b2					_EXPSRange:
.19b2	4c fb 29	jmp $29fb		jmp	ErrorV_range
.0515					EXPShiftLeftFlag:
>0515							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.19b5					EXPEvaluateExpression:
.19b5	a9 00		lda #$00			lda 	#0 							; current precedence
.19b7					EXPEvaluateExpressionPrecedenceA:
.19b7	48		pha				pha
.19b8	20 32 1a	jsr $1a32			jsr 	EXPTermValueR0				; do first term.
.19bb					_EELoop:
.19bb	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.19bd	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.19bf	90 31		bcc $19f2			bcc 	_EEExit
.19c1	aa		tax				tax 								; access the precedence of the operator.
.19c2	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.19c3	dd 90 1d	cmp $1d90,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.19c6	b0 2b		bcs $19f3			bcs 	_EEExit2
.19c8	48		pha				pha 								; save current precedence.
.19c9	da		phx				phx 								; save operator
.19ca	c8		iny				iny 								; consume operator
.19cb	da		phx				phx
.19cc	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.19ce	20 c1 35	jsr $35c1			jsr 	IFloatPushRx
.19d1	fa		plx				plx
.19d2	bd 90 1d	lda $1d90,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.19d5	20 b7 19	jsr $19b7			jsr 	EXPEvaluateExpressionPrecedenceA
.19d8	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.19da	20 e2 35	jsr $35e2			jsr 	IFloatPullRx
.19dd	fa		plx				plx 								; operator
.19de	a5 0b		lda $0b				lda 	IFR0+IExp 					; check if types match.
.19e0	45 0f		eor $0f				eor 	IFR1+IExp
.19e2	30 08		bmi $19ec			bmi 	_EEType		 				; MSBs differ, error.
.19e4					_EETypeOkay:
.19e4	8a		txa				txa
.19e5	0a		asl a				asl 	a 							; double -> X
.19e6	aa		tax				tax
.19e7	20 ef 19	jsr $19ef			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.19ea	80 cf		bra $19bb			bra 	_EELoop
.19ec					_EEType:
.19ec	4c 1a 2a	jmp $2a1a		jmp	ErrorV_type
.19ef					_EECallBinary:
.19ef	7c 80 20	jmp ($2080,x)			jmp 	(VectorTable,x)
.19f2					_EEExit:
.19f2	68		pla				pla 								; throw precedence
.19f3					_EEExit2:
.19f3	18		clc				clc
.19f4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.19f5					EXPEvalNumber:
.19f5	20 b5 19	jsr $19b5			jsr 	EXPEvaluateExpression 		; get a value
.19f8	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.19fa	30 01		bmi $19fd			bmi 	EVUType
.19fc	60		rts				rts
.19fd					EVUType:
.19fd	4c 1a 2a	jmp $2a1a		jmp	ErrorV_type
.1a00					EXPEvalInteger:
.1a00	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1a03	20 73 33	jsr $3373			jsr 	IFloatIntegerR0
.1a06	60		rts				rts
.1a07					EXPEvalInteger16:
.1a07	20 00 1a	jsr $1a00			jsr 	EXPEvalInteger 				; get integer
.1a0a	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1a0c	d0 21		bne $1a2f			bne 	EVURange
.1a0e	a6 09		ldx $09				ldx 	IFR0+IM1
.1a10	a5 08		lda $08				lda 	IFR0+IM0
.1a12	60		rts				rts
.1a13					EXPEvalInteger8:
.1a13	20 00 1a	jsr $1a00			jsr 	EXPEvalInteger 				; get integer
.1a16	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1a18	05 09		ora $09				ora 	IFR0+IM1
.1a1a	d0 13		bne $1a2f			bne 	EVURange
.1a1c	a5 08		lda $08				lda 	IFR0+IM0
.1a1e	60		rts				rts
.1a1f					EXPEvalString:
.1a1f	20 b5 19	jsr $19b5			jsr 	EXPEvaluateExpression 		; get value
.1a22	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1a24	10 d7		bpl $19fd			bpl 	EVUType
.1a26	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1a28	86 25		stx $25				stx 	zTemp0+1
.1a2a	a5 08		lda $08				lda 	IFR0+IM0
.1a2c	85 24		sta $24				sta 	zTemp0
.1a2e	60		rts				rts
.1a2f					EVURange:
.1a2f	4c fb 29	jmp $29fb		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1a32					EXPTermValueR0:
.1a32	20 7d 1a	jsr $1a7d			jsr 	EXPTermR0 					; get term
.1a35	90 45		bcc $1a7c			bcc 	_ETVNotReference 			; exit if value.
.1a37	5a		phy				phy
.1a38	a0 03		ldy #$03			ldy 	#3 							; get type
.1a3a	b1 08		lda ($08),y			lda 	(IFR0),y
.1a3c	30 14		bmi $1a52			bmi 	_ETVDereferenceString
.1a3e	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1a40	88		dey				dey 								; get byte 2
.1a41	b1 08		lda ($08),y			lda 	(IFR0),y
.1a43	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1a45	88		dey				dey 								; get byte 1
.1a46	b1 08		lda ($08),y			lda 	(IFR0),y
.1a48	aa		tax				tax 								; save in X so we can overwrite it
.1a49	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1a4b	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1a4d	85 08		sta $08				sta 	IFR0+IM0
.1a4f	7a		ply				ply
.1a50	18		clc				clc
.1a51	60		rts				rts
.1a52					_ETVDereferenceString:
.1a52	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1a54	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1a56	12 08		ora ($08)			ora 	(IFR0)
.1a58	f0 11		beq $1a6b			beq 	_ETVNull 					; if so, return a fake NULL.
.1a5a	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1a5c	aa		tax				tax
.1a5d	b2 08		lda ($08)			lda 	(IFR0)
.1a5f	18		clc				clc 								; add two so points to actual string.
.1a60	69 02		adc #$02			adc 	#2
.1a62	90 01		bcc $1a65			bcc 	_EVDSNoCarry
.1a64	e8		inx				inx
.1a65					_EVDSNoCarry:
.1a65	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1a67	85 08		sta $08				sta 	IFR0
.1a69	80 08		bra $1a73			bra 	_ETVFillExit 				; tidy up and exit.
.1a6b					_ETVNull:
.1a6b	a9 7b		lda #$7b			lda 	#_EVTNString & $FF
.1a6d	85 08		sta $08				sta 	IFR0+IM0
.1a6f	a9 1a		lda #$1a			lda 	#_EVTNString >> 8
.1a71	85 09		sta $09				sta 	IFR0+IM1
.1a73					_ETVFillExit:
.1a73	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1a75	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1a77	85 0b		sta $0b				sta 	IFR0+IExp
.1a79	7a		ply				ply
.1a7a	60		rts				rts
.1a7b					_EVTNString:
>1a7b	00						.byte 	0
.1a7c					_ETVNotReference:
.1a7c	60		rts				rts
.1a7d					EXPTermR0:
.1a7d	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1a7f	30 10		bmi $1a91			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1a81	c8		iny				iny 								; consume element
.1a82	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1a84	b0 08		bcs $1a8e			bcs 	_ETMIdentifier
.1a86	20 bc 1a	jsr $1abc			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1a89	20 ef 1a	jsr $1aef			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1a8c	18		clc				clc 								; return value ok
.1a8d	60		rts				rts
.1a8e					_ETMIdentifier:
.1a8e	4c 0b 30	jmp $300b			jmp 	VARCheckSimple 				; check variables, seperate module.
.1a91					_ETMIsUnaryOrMinus:
.1a91	c8		iny				iny 								; consume element
.1a92	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1a94	d0 0e		bne $1aa4			bne 	_ETMCheckUnary
.1a96	20 32 1a	jsr $1a32			jsr 	EXPTermValueR0 				; get a term to negate
.1a99	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.1a9b	20 7d 36	jsr $367d			jsr 	IFloatNegate
.1a9e	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.1aa0	30 17		bmi $1ab9			bmi 	_ETMUnaryType				; if so error.
.1aa2	18		clc				clc
.1aa3	60		rts				rts
.1aa4					_ETMCheckUnary:
.1aa4	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1aa6	90 0e		bcc $1ab6			bcc 	_ETMUnarySyntax
.1aa8	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1aaa	b0 0a		bcs $1ab6			bcs 	_ETMUnarySyntax
.1aac	0a		asl a				asl 	a 							; make it into an index => X
.1aad	aa		tax				tax
.1aae	20 b3 1a	jsr $1ab3			jsr 	_ETMCallUnaryFunction 		; call the function
.1ab1	18		clc				clc 								; and return it.
.1ab2	60		rts				rts
.1ab3					_ETMCallUnaryFunction:
.1ab3	7c 80 20	jmp ($2080,x)			jmp 	(VectorTable,x)
.1ab6					_ETMUnarySyntax:
.1ab6	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.1ab9					_ETMUnaryType:
.1ab9	4c 1a 2a	jmp $2a1a		jmp	ErrorV_type
.1abc					EXPExtractTokenisedInteger:
.1abc	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.1abe	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.1ac0	64 09		stz $09				stz 	IFR0+IM1
.1ac2	64 0a		stz $0a				stz 	IFR0+IM2
.1ac4					_ETMConstant:
.1ac4	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1ac6	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1ac8	b0 24		bcs $1aee			bcs 	_ETMCExit 					; no, exit.
.1aca	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1acc	a5 09		lda $09				lda 	IFR0+IM1
.1ace	85 0a		sta $0a				sta 	IFR0+IM2
.1ad0	a5 08		lda $08				lda 	IFR0+IM0
.1ad2	85 09		sta $09				sta 	IFR0+IM1
.1ad4	64 08		stz $08				stz 	IFR0+IM0
.1ad6	8a		txa				txa
.1ad7	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1ad8	66 0a		ror $0a				ror 	IFR0+IM2
.1ada	66 09		ror $09				ror 	IFR0+IM1
.1adc	66 08		ror $08				ror 	IFR0+IM0
.1ade	4a		lsr a				lsr 	a
.1adf	66 0a		ror $0a				ror 	IFR0+IM2
.1ae1	66 09		ror $09				ror 	IFR0+IM1
.1ae3	66 08		ror $08				ror 	IFR0+IM0
.1ae5	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1ae7	11 18		ora ($18),y			ora 	(codePtr),y
.1ae9	85 08		sta $08				sta 	IFR0+IM0
.1aeb	c8		iny				iny 								; consume, loop back
.1aec	80 d6		bra $1ac4			bra 	_ETMConstant
.1aee					_ETMCExit:
.1aee	60		rts				rts
.1aef					EXPCheckDecimalFollows:
.1aef	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1af1	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1af3	d0 19		bne $1b0e			bne 	_ETMCDExit
.1af5	c8		iny				iny 								; consume token.
.1af6	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1af8	5a		phy				phy									; save current position
.1af9	48		pha				pha 								; save count of chars.
.1afa	38		sec				sec 								; address into YX : y + codePtr+1
.1afb	98		tya				tya
.1afc	65 18		adc $18				adc 	codePtr
.1afe	aa		tax				tax
.1aff	a5 19		lda $19				lda 	codePtr+1
.1b01	69 00		adc #$00			adc 	#0
.1b03	a8		tay				tay
.1b04	68		pla				pla 								; get count.
.1b05	20 16 35	jsr $3516			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1b08	7a		ply				ply 								; go to next token.
.1b09	98		tya				tya
.1b0a	38		sec				sec
.1b0b	71 18		adc ($18),y			adc 	(codePtr),y
.1b0d	a8		tay				tay
.1b0e					_ETMCDExit:
.1b0e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1b0f					EXPUnaryAbs:
.1b0f	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 					; number to R0
.1b12	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1b15	20 b5 32	jsr $32b5			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1b18	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.1b19					EXPUnaryNull:
.1b19	20 32 1a	jsr $1a32			jsr 	EXPTermValueR0
.1b1c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1b1d					EXPUnaryAsc:
.1b1d	20 1f 1a	jsr $1a1f			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b20	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1b23	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.1b25	f0 06		beq $1b2d			beq 	_EXAZero 						; if so return 0
.1b27	5a		phy				phy 									; otherwise get first character
.1b28	a0 01		ldy #$01			ldy 	#1
.1b2a	b1 24		lda ($24),y			lda 	(zTemp0),y
.1b2c	7a		ply				ply
.1b2d					_EXAZero:
.1b2d	a2 08		ldx #$08			ldx 	#IFR0
.1b2f	20 74 36	jsr $3674			jsr 	IFloatSetByte
.1b32	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1b33					EXPUnaryChr:
.1b33	20 13 1a	jsr $1a13			jsr 	EXPEvalInteger8 				; expr
.1b36	48		pha				pha 									; push on stack
.1b37	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1b3a	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1b3c	20 ca 2c	jsr $2cca			jsr 	StringTempAllocate
.1b3f	68		pla				pla 									; get value back
.1b40	20 ff 2c	jsr $2cff			jsr 	StringTempWrite 				; write to string.
.1b43	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1b44					EXPUnaryDec:
.1b44	20 1f 1a	jsr $1a1f			jsr 	EXPEvalString 					; string to R0, zTemp0
.1b47	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1b4a	5a		phy				phy 									; save position.
.1b4b	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1b4d	20 72 36	jsr $3672			jsr 	IFloatSetZero
.1b50	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.1b52	f0 3b		beq $1b8f			beq 	_EUDError 						; empty string is not legit.
.1b54	aa		tax				tax 									; count in X.
.1b55	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1b57					_EUDLoop:
.1b57	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.1b59	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1b5b	90 02		bcc $1b5f			bcc 	_EUDNoCase
.1b5d	e9 20		sbc #$20			sbc 	#$20
.1b5f					_EUDNoCase:
.1b5f	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1b61	90 2c		bcc $1b8f			bcc 	_EUDError
.1b63	c9 3a		cmp #$3a			cmp 	#'9'+1
.1b65	90 0a		bcc $1b71			bcc 	_EUDOkay
.1b67	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1b69	90 24		bcc $1b8f			bcc 	_EUDError
.1b6b	c9 47		cmp #$47			cmp 	#'F'+1
.1b6d	b0 20		bcs $1b8f			bcs 	_EUDError
.1b6f	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1b71					_EUDOkay:
.1b71	29 0f		and #$0f			and 	#15 							; make constant
.1b73	da		phx				phx
.1b74	48		pha				pha
.1b75	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1b77	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.1b7a	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.1b7d	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.1b80	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.1b83	68		pla				pla 									; pop constant and OR in
.1b84	fa		plx				plx
.1b85	05 08		ora $08				ora 	IFR0+IM0
.1b87	85 08		sta $08				sta 	IFR0+IM0
.1b89	c8		iny				iny 									; next char
.1b8a	ca		dex				dex 									; done all characters ?
.1b8b	d0 ca		bne $1b57			bne 	_EUDLoop
.1b8d	7a		ply				ply
.1b8e	60		rts				rts
.1b8f					_EUDError:
.1b8f	4c 0c 2a	jmp $2a0c		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1b92					EXPUnaryInlineDec:
.1b92	4c ea 29	jmp $29ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1b95					EXPUnaryPeek:
.1b95	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 				; number to R0
.1b98	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1b9b	b2 08		lda ($08)			lda 	(IFR0) 							; read byte and set it
.1b9d	a2 08		ldx #$08			ldx 	#IFR0
.1b9f	20 74 36	jsr $3674			jsr 	IFloatSetByte
.1ba2	60		rts				rts
.1ba3					EXPUnaryDeek:
.1ba3	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 				; number to R0
.1ba6	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1ba9	5a		phy				phy 									; read MSB and push on stack
.1baa	a0 01		ldy #$01			ldy 	#1
.1bac	b1 08		lda ($08),y			lda 	(IFR0),y
.1bae	7a		ply				ply
.1baf	48		pha				pha
.1bb0	b2 08		lda ($08)			lda 	(IFR0) 							; set LSB
.1bb2	a2 08		ldx #$08			ldx 	#IFR0
.1bb4	20 74 36	jsr $3674			jsr 	IFloatSetByte
.1bb7	68		pla				pla 									; set MSB
.1bb8	85 09		sta $09				sta 	IFR0+IM1
.1bba	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1bbb					EXPUnaryFrac:
.1bbb	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 					; number to R0
.1bbe	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1bc1	20 1d 33	jsr $331d			jsr 	IFloatFractionalR0 				; get fractional bit.
.1bc4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1bc5					EXPUnaryInkey:
.1bc5	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1bc8	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1bca	20 ca 2c	jsr $2cca			jsr 	StringTempAllocate
.1bcd	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit with the empty string
.1bd0	b0 06		bcs $1bd8			bcs 	_EUIExit
.1bd2	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it and put it in first character
.1bd5	20 ff 2c	jsr $2cff			jsr 	StringTempWrite
.1bd8					_EUIExit:
.1bd8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1bd9					EXPUnaryInt:
.1bd9	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 					; number to R0
.1bdc	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; check for )
.1bdf	20 73 33	jsr $3373			jsr 	IFloatIntegerR0 				; force to integer.
.1be2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1be3					EXPUnaryLen:
.1be3	20 1f 1a	jsr $1a1f			jsr 	EXPEvalString 					; string to R0, zTemp0
.1be6	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1be9	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.1beb	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1bed	20 74 36	jsr $3674			jsr 	IFloatSetByte
.1bf0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1bf1					EXPUnaryParenthesis:
.1bf1	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 					; number to R0
.1bf4	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1bf7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1bf8					EXPUnaryRnd:
.1bf8	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 				; number to R0
.1bfb	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 				; )
.1bfe	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1c00	20 17 1c	jsr $1c17			jsr 	EXPLoadInRandom
.1c03	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1c05	85 0b		sta $0b				sta 	IFR0+IExp
.1c07	60		rts				rts
.1c08					ExpUnaryRand:
.1c08	20 00 1a	jsr $1a00			jsr 	EXPEvalInteger 				; integer to R0
.1c0b	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 				; )
.1c0e	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1c10	20 17 1c	jsr $1c17			jsr 	EXPLoadInRandom
.1c13	20 e2 31	jsr $31e2			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1c16	60		rts				rts
.1c17					EXPLoadInRandom:
.1c17	20 72 36	jsr $3672			jsr 	IFloatSetZero 				; zero it
.1c1a	20 2c 1c	jsr $1c2c			jsr 	EXPRandom32 				; do a 23 bit number.
.1c1d	95 00		sta $00,x			sta 	IM0,x
.1c1f	20 2c 1c	jsr $1c2c			jsr 	EXPRandom32
.1c22	95 01		sta $01,x			sta 	IM1,x
.1c24	20 2c 1c	jsr $1c2c			jsr 	EXPRandom32
.1c27	29 7f		and #$7f			and 	#$7F
.1c29	95 02		sta $02,x			sta 	IM2,x
.1c2b	60		rts				rts
.1c2c					EXPRandom32:
.1c2c	5a		phy				phy
.1c2d	a0 08		ldy #$08			ldy 	#8
.1c2f	ad 16 05	lda $0516			lda 	EXPSeed+0
.1c32	0d 17 05	ora $0517			ora 	EXPSeed+1
.1c35	0d 18 05	ora $0518			ora 	EXPSeed+2
.1c38	0d 19 05	ora $0519			ora 	EXPSeed+3
.1c3b	d0 08		bne $1c45			bne 	_EXPRNoReset
.1c3d	ee 16 05	inc $0516			inc 	EXPSeed+0
.1c40	a0 10		ldy #$10			ldy 	#16
.1c42	8c 19 05	sty $0519			sty 	EXPSeed+3
.1c45					_EXPRNoReset:
.1c45	ad 16 05	lda $0516			lda 	EXPSeed+0
.1c48					_EXPRLoop:
.1c48	0a		asl a				asl		a
.1c49	2e 17 05	rol $0517			rol 	EXPSeed+1
.1c4c	2e 18 05	rol $0518			rol 	EXPSeed+2
.1c4f	2e 19 05	rol $0519			rol 	EXPSeed+3
.1c52	90 02		bcc $1c56			bcc 	_EXPRNoEOR
.1c54	49 c5		eor #$c5			eor 	#$C5
.1c56					_EXPRNoEOR:
.1c56	88		dey				dey
.1c57	d0 ef		bne $1c48			bne 	_EXPRLoop
.1c59	8d 16 05	sta $0516			sta 	EXPSeed+0
.1c5c	7a		ply				ply
.1c5d	60		rts				rts
.0516					EXPSeed:
>0516							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1c5e					EXPUnarySgn:
.1c5e	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 					; number to R0
.1c61	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1c64	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1c66	20 14 36	jsr $3614			jsr 	IFloatCopyToRegister
.1c69	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1c6b	20 72 36	jsr $3672			jsr 	IFloatSetZero
.1c6e	a2 0c		ldx #$0c			ldx 	#IFR1
.1c70	20 41 33	jsr $3341			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1c73	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1c74					EXPUnarySqr:
.1c74	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 					; number to R0
.1c77	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1c7a	20 bd 32	jsr $32bd			jsr 	IFloatSquareRootR0 				; square root.
.1c7d	b0 01		bcs $1c80			bcs 	_EUSValue 						; error check.
.1c7f	60		rts				rts
.1c80					_EUSValue:
.1c80	4c fb 29	jmp $29fb		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1c83					EXPUnaryHex:
.1c83	20 00 1a	jsr $1a00			jsr 	EXPEvalInteger 					; expr
.1c86	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1c89	5a		phy				phy
.1c8a	a9 10		lda #$10			lda 	#16
.1c8c	20 14 34	jsr $3414			jsr 	IFloatIntegerToStringR0
.1c8f	80 0a		bra $1c9b			bra 	EUSMain
.1c91					EXPUnaryStr:
.1c91	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 					; expr
.1c94	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1c97	5a		phy				phy
.1c98	20 6f 34	jsr $346f			jsr 	IFloatFloatToStringR0 			; convert to string
.1c9b					EUSMain:
.1c9b	b0 19		bcs $1cb6			bcs 	_EUSError
.1c9d	86 24		stx $24				stx 	zTemp0 							; save string address
.1c9f	84 25		sty $25				sty 	zTemp0+1
.1ca1	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1ca3	20 ca 2c	jsr $2cca			jsr 	StringTempAllocate
.1ca6	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1ca8	aa		tax				tax 									; count in X
.1ca9	a0 01		ldy #$01			ldy 	#1
.1cab					_EUSCopy:
.1cab	b1 24		lda ($24),y			lda 	(zTemp0),y
.1cad	c8		iny				iny
.1cae	20 ff 2c	jsr $2cff			jsr 	StringTempWrite
.1cb1	ca		dex				dex
.1cb2	d0 f7		bne $1cab			bne	 	_EUSCopy
.1cb4	7a		ply				ply
.1cb5	60		rts				rts
.1cb6					_EUSError:
.1cb6	4c fb 29	jmp $29fb		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1cb9					EXPUnaryInlineString:
.1cb9	18		clc				clc 								; physical address -> IM0,1
.1cba	98		tya				tya 								; put the actual address in IM0
.1cbb	65 18		adc $18				adc 	codePtr
.1cbd	85 08		sta $08				sta 	IFR0+IM0
.1cbf	a5 19		lda $19				lda 	codePtr+1
.1cc1	69 00		adc #$00			adc 	#0
.1cc3	85 09		sta $09				sta 	IFR0+IM1
.1cc5	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1cc7	a9 80		lda #$80			lda 	#$80
.1cc9	85 0b		sta $0b				sta 	IFR0+IExp
.1ccb	98		tya				tya	 								; skip over it.
.1ccc	38		sec				sec
.1ccd	71 18		adc ($18),y			adc 	(codePtr),y
.1ccf	a8		tay				tay
.1cd0	60		rts				rts
.1cd1					_EXPUISRange:
.1cd1	4c fb 29	jmp $29fb		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1cd4					EXPUnaryLeft:
.1cd4	20 1a 1d	jsr $1d1a			jsr 	EXPCommonStart 					; <string>,
.1cd7	48		pha				pha 									; save string address on stack
.1cd8	da		phx				phx
.1cd9	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1cdb	48		pha				pha
.1cdc	20 13 1a	jsr $1a13			jsr 	EXPEvalInteger8 				; characters to do
.1cdf	80 44		bra $1d25			bra 	EXPSubstringCommon
.1ce1					EXPUnaryRight:
.1ce1	20 1a 1d	jsr $1d1a			jsr 	EXPCommonStart 					; <string>,
.1ce4	48		pha				pha 									; save string address on stack
.1ce5	da		phx				phx
.1ce6	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1ce8	48		pha				pha
.1ce9	20 13 1a	jsr $1a13			jsr 	EXPEvalInteger8 				; characters to do
.1cec	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1cee	68		pla				pla
.1cef	38		sec				sec
.1cf0	e5 24		sbc $24				sbc 	zTemp0
.1cf2	b0 02		bcs $1cf6			bcs 	_EUROffLeft
.1cf4	a9 00		lda #$00			lda 	#0
.1cf6					_EUROffLeft:
.1cf6	48		pha				pha 									; start pos
.1cf7	a9 ff		lda #$ff			lda 	#255
.1cf9	80 2a		bra $1d25			bra 	EXPSubstringCommon
.1cfb					EXPUnaryMid:
.1cfb	20 1a 1d	jsr $1d1a			jsr 	EXPCommonStart 					; <string>,
.1cfe	48		pha				pha 									; save string address on stack
.1cff	da		phx				phx
.1d00	20 13 1a	jsr $1a13			jsr 	EXPEvalInteger8 				; characters start
.1d03	f0 12		beq $1d17			beq 	_EUSError 						; 1 is left
.1d05	3a		dec a				dec 	a 								; zero based.
.1d06	48		pha				pha
.1d07	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1d09	c9 99		cmp #$99			cmp 	#PR_COMMA
.1d0b	f0 04		beq $1d11			beq 	_EUMLength 						; if so m is provided
.1d0d	a9 ff		lda #$ff			lda 	#255 							; default m
.1d0f	80 14		bra $1d25			bra 	EXPSubstringCommon
.1d11					_EUMLength:
.1d11	c8		iny				iny 									; consume comma
.1d12	20 13 1a	jsr $1a13			jsr 	EXPEvalInteger8 				; characters to do
.1d15	80 0e		bra $1d25			bra 	EXPSubstringCommon
.1d17					_EUSError:
.1d17	4c 0c 2a	jmp $2a0c		jmp	ErrorV_value
.1d1a					EXPCommonStart:
.1d1a	20 1f 1a	jsr $1a1f			jsr 	EXPEvalString
.1d1d	20 dd 2b	jsr $2bdd			jsr 	ERRCheckComma
.1d20	a5 08		lda $08				lda 	IFR0+IM0
.1d22	a6 09		ldx $09				ldx 	IFR0+IM1
.1d24	60		rts				rts
.1d25					EXPSubstringCommon:
.1d25	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1d27	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; check right bracket.
.1d2a	68		pla				pla 									; start position
.1d2b	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1d2d	fa		plx				plx 									; get string address to zTemp2.
.1d2e	86 29		stx $29				stx 	zTemp2+1
.1d30	68		pla				pla
.1d31	85 28		sta $28				sta 	zTemp2
.1d33	38		sec				sec 									; length - start is the max count of chars
.1d34	b2 28		lda ($28)			lda 	(zTemp2)
.1d36	e5 27		sbc $27				sbc 	zTemp1+1
.1d38	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1d3a	b0 02		bcs $1d3e			bcs 	_EXPSSNoTrim
.1d3c	85 26		sta $26				sta 	zTemp1 							; update count with available
.1d3e					_EXPSSNoTrim:
.1d3e	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1d40	20 ca 2c	jsr $2cca			jsr 	StringTempAllocate 				; allocate memory for it.
.1d43	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1d45	f0 15		beq $1d5c			beq 	_EXPSSExit
.1d47	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1d49	d2 28		cmp ($28)			cmp 	(zTemp2)
.1d4b	b0 0f		bcs $1d5c			bcs 	_EXPSSExit
.1d4d	5a		phy				phy
.1d4e	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1d50	c8		iny				iny 									; +1 for the length byte
.1d51					_EXPSSCopy:
.1d51	b1 28		lda ($28),y			lda 	(zTemp2),y
.1d53	20 ff 2c	jsr $2cff			jsr 	StringTempWrite
.1d56	c8		iny				iny
.1d57	c6 26		dec $26				dec 	zTemp1
.1d59	d0 f6		bne $1d51			bne 	_EXPSSCopy
.1d5b	7a		ply				ply
.1d5c					_EXPSSExit:
.1d5c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1d5d					EXPUnaryVal:
.1d5d	20 1f 1a	jsr $1a1f			jsr 	EXPEvalString 					; string to R0, zTemp0
.1d60	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 					; )
.1d63	20 67 1d	jsr $1d67			jsr 	VALConversionZTemp0
.1d66	60		rts				rts
.1d67					VALConversionZTemp0:
.1d67	5a		phy				phy
.1d68	18		clc				clc
.1d69	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1d6b	69 01		adc #$01			adc 	#1
.1d6d	aa		tax				tax
.1d6e	a5 25		lda $25				lda 	zTemp0+1
.1d70	69 00		adc #$00			adc 	#0
.1d72	a8		tay				tay
.1d73	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1d75	20 d6 34	jsr $34d6			jsr 	IFloatStringToFloatR0 			; do conversion
.1d78	b0 02		bcs $1d7c			bcs 	_EUVError
.1d7a	7a		ply				ply
.1d7b	60		rts				rts
.1d7c					_EUVError:
.1d7c	4c 0c 2a	jmp $2a0c		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1d7f					AssemblerLookup:
>1d7f	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,0,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,0,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,0,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,0,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,0,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,0,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,0,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,0,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,0,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,0,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,0,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,0,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,0,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,0,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,0,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,0
>1d87	fb 1e 7c 00 4b 1e 7c 00 b8 1e 1e 00 41 1e 7c eb
>1d97	b9 1e f9 00 41 1e 7c 00 7f 6a 00 00 7a 6a e1 eb
>1da7	23 6a e1 00 7a 6a e1 00 97 6a 6a 00 7a 6a e1 eb
>1db7	a6 6a 7d 00 7a 6a e1 00 38 62 00 00 00 62 0b eb
>1dc7	ec 62 0b 00 2e 62 0b 00 c3 62 62 00 00 62 0b eb
>1dd7	bf 62 04 00 00 62 0b 00 42 1d 00 00 3b 1d e7 eb
>1de7	14 1d e7 00 2e 1d e7 00 d3 1d 1d 00 3b 1d e7 eb
>1df7	ac 1d 2c 00 2e 1d e7 00 99 22 00 00 3a 22 39 f5
>1e07	93 7a 54 00 3a 22 39 00 45 22 22 00 3a 22 39 f5
>1e17	5e 22 66 00 3b 22 3b 00 19 01 18 00 19 01 18 f5
>1e27	c6 01 c5 00 19 01 18 00 55 01 01 00 19 01 18 f5
>1e37	cc 01 61 00 19 01 18 00 f7 a8 00 00 f7 a8 7d f5
>1e47	0f a8 92 0c f7 a8 7d 00 75 a8 a8 00 00 a8 7d f5
>1e57	ba a8 03 31 00 a8 7d 00 f6 48 00 00 f6 48 f9 f5
>1e67	0e 48 dd 00 f6 48 f9 00 8f 48 48 00 00 48 f9 f5
>1e77	a7 48 2b 00 00 48 f9 00

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1e7f					BinaryPrecedence:
>1e7f	02					.byte	 2	; $ef =
>1e80	02					.byte	 2	; $f0 <>
>1e81	02					.byte	 2	; $f1 <=
>1e82	02					.byte	 2	; $f2 <
>1e83	02					.byte	 2	; $f3 >=
>1e84	02					.byte	 2	; $f4 >
>1e85	01					.byte	 1	; $f5 XOR
>1e86	01					.byte	 1	; $f6 OR
>1e87	01					.byte	 1	; $f7 AND
>1e88	04					.byte	 4	; $f8 DIV
>1e89	04					.byte	 4	; $f9 MOD
>1e8a	04					.byte	 4	; $fa <<
>1e8b	04					.byte	 4	; $fb >>
>1e8c	04					.byte	 4	; $fc /
>1e8d	04					.byte	 4	; $fd *
>1e8e	03					.byte	 3	; $fe -
>1e8f	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1e90					StructureOffsets:
>1e90	01					.byte	1  	; $80 REPEAT
>1e91	ff					.byte	255	; $81 UNTIL
>1e92	01					.byte	1  	; $82 WHILE
>1e93	ff					.byte	255	; $83 WEND
>1e94	01					.byte	1  	; $84 IF
>1e95	ff					.byte	255	; $85 ENDIF
>1e96	01					.byte	1  	; $86 DO
>1e97	ff					.byte	255	; $87 LOOP
>1e98	01					.byte	1  	; $88 PROC
>1e99	ff					.byte	255	; $89 ENDPROC
>1e9a	01					.byte	1  	; $8a FOR
>1e9b	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1e9c					StandardTokens:
>1e9c	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1ea3	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1ea9	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1eaf	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1eb4	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1eb7	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1ebd	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1ec0	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1ec5	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1eca	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1ed2	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1ed6	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1edb	00					.byte	$00                                     	; $8c [[end]]
>1edc	00					.byte	$00                                     	; $8d [[shift]]
>1edd	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1ee2	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1ee7	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1eea	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1eef	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1ef3	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1ef9	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1eff	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1f04	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1f08	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1f0c	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1f11	01 2c					.byte	$01,$2c                                 	; $99 ,
>1f13	01 3b					.byte	$01,$3b                                 	; $9a ;
>1f15	01 3a					.byte	$01,$3a                                 	; $9b :
>1f17	01 27					.byte	$01,$27                                 	; $9c '
>1f19	01 29					.byte	$01,$29                                 	; $9d )
>1f1b	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1f20	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1f25	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1f2a	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1f2f	01 5b					.byte	$01,$5b                                 	; $a2 [
>1f31	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1f33	01 23					.byte	$01,$23                                 	; $a4 #
>1f35	01 2e					.byte	$01,$2e                                 	; $a5 .
>1f37	00					.byte	0											; $a6
>1f38	00					.byte	0											; $a7
>1f39	00					.byte	0											; $a8
>1f3a	00					.byte	0											; $a9
>1f3b	00					.byte	0											; $aa
>1f3c	00					.byte	0											; $ab
>1f3d	00					.byte	0											; $ac
>1f3e	00					.byte	0											; $ad
>1f3f	00					.byte	0											; $ae
>1f40	00					.byte	0											; $af
>1f41	00					.byte	0											; $b0
>1f42	00					.byte	0											; $b1
>1f43	00					.byte	0											; $b2
>1f44	00					.byte	0											; $b3
>1f45	00					.byte	0											; $b4
>1f46	00					.byte	0											; $b5
>1f47	00					.byte	0											; $b6
>1f48	00					.byte	0											; $b7
>1f49	00					.byte	0											; $b8
>1f4a	00					.byte	0											; $b9
>1f4b	00					.byte	0											; $ba
>1f4c	00					.byte	0											; $bb
>1f4d	00					.byte	0											; $bc
>1f4e	00					.byte	0											; $bd
>1f4f	00					.byte	0											; $be
>1f50	00					.byte	0											; $bf
>1f51	00					.byte	0											; $c0
>1f52	00					.byte	0											; $c1
>1f53	00					.byte	0											; $c2
>1f54	00					.byte	0											; $c3
>1f55	00					.byte	0											; $c4
>1f56	00					.byte	0											; $c5
>1f57	00					.byte	0											; $c6
>1f58	00					.byte	0											; $c7
>1f59	00					.byte	0											; $c8
>1f5a	00					.byte	0											; $c9
>1f5b	00					.byte	0											; $ca
>1f5c	00					.byte	0											; $cb
>1f5d	00					.byte	0											; $cc
>1f5e	00					.byte	0											; $cd
>1f5f	00					.byte	0											; $ce
>1f60	00					.byte	0											; $cf
>1f61	00					.byte	0											; $d0
>1f62	00					.byte	0											; $d1
>1f63	00					.byte	0											; $d2
>1f64	00					.byte	0											; $d3
>1f65	00					.byte	0											; $d4
>1f66	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1f6c	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1f72	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1f7a	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1f81	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1f87	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1f8d	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1f92	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1f97	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1f9c	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1fa1	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1fa6	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1fac	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1fb1	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1fb9	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1fc0	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1fc5	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1fca	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1fd0	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1fd5	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1fdb	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1fe0	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1fe6	01 28					.byte	$01,$28                                 	; $eb (
>1fe8	01 26					.byte	$01,$26                                 	; $ec &
>1fea	00					.byte	$00                                     	; $ed [[decimal]]
>1feb	00					.byte	$00                                     	; $ee [[string]]
>1fec	01 3d					.byte	$01,$3d                                 	; $ef =
>1fee	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1ff1	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1ff4	01 3c					.byte	$01,$3c                                 	; $f2 <
>1ff6	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1ff9	01 3e					.byte	$01,$3e                                 	; $f4 >
>1ffb	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1fff	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>2002	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>2006	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>200a	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>200e	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>2011	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>2014	01 2f					.byte	$01,$2f                                 	; $fc /
>2016	01 2a					.byte	$01,$2a                                 	; $fd *
>2018	01 2d					.byte	$01,$2d                                 	; $fe -
>201a	01 2b					.byte	$01,$2b                                 	; $ff +
>201c	ff					.byte	$FF
.201d					AlternateTokens:
>201d	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>2023	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>2027	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>202b	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>2030	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>2034	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>203b	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>2040	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>2045	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>204a	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>2050	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>2055	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>205c	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>2064	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>2068	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>206c	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>2072	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8d90 renumber
>207a	52
>207b	03 4f 50 54				.byte	$03,$4f,$50,$54                         	; $8d91 opt
>207f	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.2080					VectorTable:
>2080	da 28					.word	Command_REPEAT           ; $80 REPEAT
>2082	e3 28					.word	Command_UNTIL            ; $81 UNTIL
>2084	bd 29					.word	Command_WHILE            ; $82 WHILE
>2086	de 29					.word	Command_WEND             ; $83 WEND
>2088	b0 28					.word	IfCommand                ; $84 IF
>208a	d9 28					.word	EndIf                    ; $85 ENDIF
>208c	32 27					.word	Command_DO               ; $86 DO
>208e	4a 27					.word	Command_LOOP             ; $87 LOOP
>2090	35 18					.word	NoExec08                 ; $88 PROC
>2092	26 27					.word	Command_ENDPROC          ; $89 ENDPROC
>2094	53 27					.word	Command_FOR              ; $8a FOR
>2096	e0 27					.word	Command_NEXT             ; $8b NEXT
>2098	b6 17					.word	RUNEndOfLine             ; $8c [[END]]
>209a	12 18					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>209c	d2 28					.word	ElseCode                 ; $8e ELSE
>209e	35 18					.word	NoExec01                 ; $8f THEN
>20a0	35 18					.word	NoExec02                 ; $90 TO
>20a2	35 18					.word	NoExec03                 ; $91 STEP
>20a4	5d 15					.word	CommandLET               ; $92 LET
>20a6	b2 14					.word	Command_Print            ; $93 PRINT
>20a8	ab 14					.word	Command_Input            ; $94 INPUT
>20aa	ea 26					.word	Command_CALL             ; $95 CALL
>20ac	20 18					.word	Command_Sys              ; $96 SYS
>20ae	2b 17					.word	Command_REM              ; $97 REM
>20b0	3b 27					.word	Command_EXIT             ; $98 EXIT
>20b2	35 18					.word	NoExec04                 ; $99 ,
>20b4	35 18					.word	NoExec05                 ; $9a ;
>20b6	35 18					.word	NoExec06                 ; $9b :
>20b8	2b 17					.word	Command_REM2             ; $9c '
>20ba	35 18					.word	NoExec07                 ; $9d )
>20bc	54 14					.word	Command_Poke             ; $9e POKE
>20be	51 14					.word	Command_Doke             ; $9f DOKE
>20c0	b7 16					.word	Command_READ             ; $a0 READ
>20c2	1e 17					.word	Command_DATA             ; $a1 DATA
>20c4	15 10					.word	Command_AssemblerStart   ; $a2 [
>20c6	48 2e					.word	NotImplemented           ; $a3 ]
>20c8	48 2e					.word	NotImplemented           ; $a4 #
>20ca	48 2e					.word	NotImplemented           ; $a5 .
>20cc	48 2e					.word	NotImplemented           ; $a6
>20ce	48 2e					.word	NotImplemented           ; $a7
>20d0	48 2e					.word	NotImplemented           ; $a8
>20d2	48 2e					.word	NotImplemented           ; $a9
>20d4	48 2e					.word	NotImplemented           ; $aa
>20d6	48 2e					.word	NotImplemented           ; $ab
>20d8	48 2e					.word	NotImplemented           ; $ac
>20da	48 2e					.word	NotImplemented           ; $ad
>20dc	48 2e					.word	NotImplemented           ; $ae
>20de	48 2e					.word	NotImplemented           ; $af
>20e0	48 2e					.word	NotImplemented           ; $b0
>20e2	48 2e					.word	NotImplemented           ; $b1
>20e4	48 2e					.word	NotImplemented           ; $b2
>20e6	48 2e					.word	NotImplemented           ; $b3
>20e8	48 2e					.word	NotImplemented           ; $b4
>20ea	48 2e					.word	NotImplemented           ; $b5
>20ec	48 2e					.word	NotImplemented           ; $b6
>20ee	48 2e					.word	NotImplemented           ; $b7
>20f0	48 2e					.word	NotImplemented           ; $b8
>20f2	48 2e					.word	NotImplemented           ; $b9
>20f4	48 2e					.word	NotImplemented           ; $ba
>20f6	48 2e					.word	NotImplemented           ; $bb
>20f8	48 2e					.word	NotImplemented           ; $bc
>20fa	48 2e					.word	NotImplemented           ; $bd
>20fc	48 2e					.word	NotImplemented           ; $be
>20fe	48 2e					.word	NotImplemented           ; $bf
>2100	48 2e					.word	NotImplemented           ; $c0
>2102	48 2e					.word	NotImplemented           ; $c1
>2104	48 2e					.word	NotImplemented           ; $c2
>2106	48 2e					.word	NotImplemented           ; $c3
>2108	48 2e					.word	NotImplemented           ; $c4
>210a	48 2e					.word	NotImplemented           ; $c5
>210c	48 2e					.word	NotImplemented           ; $c6
>210e	48 2e					.word	NotImplemented           ; $c7
>2110	48 2e					.word	NotImplemented           ; $c8
>2112	48 2e					.word	NotImplemented           ; $c9
>2114	48 2e					.word	NotImplemented           ; $ca
>2116	48 2e					.word	NotImplemented           ; $cb
>2118	48 2e					.word	NotImplemented           ; $cc
>211a	48 2e					.word	NotImplemented           ; $cd
>211c	48 2e					.word	NotImplemented           ; $ce
>211e	48 2e					.word	NotImplemented           ; $cf
>2120	48 2e					.word	NotImplemented           ; $d0
>2122	48 2e					.word	NotImplemented           ; $d1
>2124	48 2e					.word	NotImplemented           ; $d2
>2126	48 2e					.word	NotImplemented           ; $d3
>2128	48 2e					.word	NotImplemented           ; $d4
>212a	a3 1b					.word	EXPUnaryDeek             ; $d5 DEEK(
>212c	95 1b					.word	EXPUnaryPeek             ; $d6 PEEK(
>212e	e1 1c					.word	EXPUnaryRight            ; $d7 RIGHT$(
>2130	d4 1c					.word	EXPUnaryLeft             ; $d8 LEFT$(
>2132	fb 1c					.word	EXPUnaryMid              ; $d9 MID$(
>2134	91 1c					.word	EXPUnaryStr              ; $da STR$(
>2136	5d 1d					.word	EXPUnaryVal              ; $db VAL(
>2138	5e 1c					.word	EXPUnarySgn              ; $dc SGN(
>213a	0f 1b					.word	EXPUnaryAbs              ; $dd ABS(
>213c	e3 1b					.word	EXPUnaryLen              ; $de LEN(
>213e	74 1c					.word	EXPUnarySqr              ; $df SQR(
>2140	33 1b					.word	EXPUnaryChr              ; $e0 CHR$(
>2142	1d 1b					.word	EXPUnaryAsc              ; $e1 ASC(
>2144	c5 1b					.word	EXPUnaryInkey            ; $e2 INKEY$(
>2146	48 2e					.word	NotImplemented           ; $e3 EVENT(
>2148	48 2e					.word	NotImplemented           ; $e4 TIME
>214a	d9 1b					.word	EXPUnaryInt              ; $e5 INT(
>214c	bb 1b					.word	EXPUnaryFrac             ; $e6 FRAC(
>214e	44 1b					.word	EXPUnaryDec              ; $e7 DEC(
>2150	83 1c					.word	EXPUnaryHex              ; $e8 HEX$(
>2152	f8 1b					.word	EXPUnaryRnd              ; $e9 RND(
>2154	08 1c					.word	ExpUnaryRand             ; $ea RAND(
>2156	f1 1b					.word	EXPUnaryParenthesis      ; $eb (
>2158	19 1b					.word	EXPUnaryNull             ; $ec &
>215a	92 1b					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>215c	b9 1c					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>215e	f2 18					.word	EXPCompareEqual          ; $ef =
>2160	0d 19					.word	EXPCompareNotEqual       ; $f0 <>
>2162	16 19					.word	EXPCompareLessEqual      ; $f1 <=
>2164	fb 18					.word	EXPCompareLess           ; $f2 <
>2166	1f 19					.word	EXPCompareGreaterEqual   ; $f3 >=
>2168	04 19					.word	EXPCompareGreater        ; $f4 >
>216a	9f 18					.word	EXPBinXor                ; $f5 XOR
>216c	93 18					.word	EXPBinOr                 ; $f6 OR
>216e	87 18					.word	EXPBinAnd                ; $f7 AND
>2170	5f 18					.word	EXPBinIDiv               ; $f8 DIV
>2172	70 18					.word	EXPBinIMod               ; $f9 MOD
>2174	6a 19					.word	EXPBinLeft               ; $fa <<
>2176	72 19					.word	EXPBinRight              ; $fb >>
>2178	53 18					.word	EXPBinFDiv               ; $fc /
>217a	4a 18					.word	EXPBinMul                ; $fd *
>217c	41 18					.word	EXPBinSub                ; $fe -
>217e	38 18					.word	EXPBinAdd                ; $ff +
.2180					AlternateVectorTable:
>2180	c1 12					.word	Command_CLEAR            ; $8d80 CLEAR
>2182	ae 16					.word	Command_NEW              ; $8d81 NEW
>2184	aa 17					.word	Command_RUN              ; $8d82 RUN
>2186	1d 18					.word	Command_STOP             ; $8d83 STOP
>2188	1a 18					.word	Command_END              ; $8d84 END
>218a	b3 12					.word	Command_ASSERT           ; $8d85 ASSERT
>218c	d7 15					.word	Command_LIST             ; $8d86 LIST
>218e	b6 2d					.word	Command_SAVE             ; $8d87 SAVE
>2190	75 2d					.word	Command_LOAD             ; $8d88 LOAD
>2192	96 28					.word	Command_GOSUB            ; $8d89 GOSUB
>2194	7b 14					.word	Command_GOTO             ; $8d8a GOTO
>2196	a4 28					.word	Command_RETURN           ; $8d8b RETURN
>2198	7c 17					.word	Command_RESTORE          ; $8d8c RESTORE
>219a	35 13					.word	CommandDIM               ; $8d8d DIM
>219c	0c 2d					.word	Command_DIR              ; $8d8e DIR
>219e	49 2d					.word	Command_ERASE            ; $8d8f ERASE
>21a0	38 17					.word	Command_RENUMBER         ; $8d90 RENUMBER
>21a2	ac 12					.word	Command_OPT              ; $8d91 OPT

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.21a4					TOKDetokenise:
.21a4	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.21a6	84 29		sty $29				sty 	zTemp2+1
.21a8	9c 1c 05	stz $051c			stz		TOKLastCharacter 			; clear last character
.21ab					_TOKDLoop:
.21ab	20 f0 21	jsr $21f0			jsr 	TOKDGet 					; get next
.21ae	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line, exit.
.21b0	f0 3c		beq $21ee			beq 	_TOKDExit
.21b2	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string or decimal places modifier
.21b4	f0 33		beq $21e9			beq 	_TOKDDataItem
.21b6	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.21b8	f0 2f		beq $21e9			beq 	_TOKDDataItem
.21ba	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.21bc	f0 19		beq $21d7			beq 	_TOKAmpersand
.21be	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.21c0	10 05		bpl $21c7			bpl 	_TOKDNotToken
.21c2	20 b6 22	jsr $22b6			jsr 	TOKDToken 					; token to text.
.21c5	80 e4		bra $21ab			bra 	_TOKDLoop
.21c7					_TOKDNotToken:
.21c7	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.21c9	90 05		bcc $21d0			bcc 	_TOKDNotIdentifier
.21cb	20 2d 22	jsr $222d			jsr 	TOKDIdentifier
.21ce	80 db		bra $21ab			bra 	_TOKDLoop
.21d0					_TOKDNotIdentifier:
.21d0	a0 0a		ldy #$0a			ldy 	#10
.21d2	20 70 22	jsr $2270			jsr 	TOKDInteger
.21d5	80 d4		bra $21ab			bra 	_TOKDLoop
.21d7					_TOKAmpersand:
.21d7	20 f8 22	jsr $22f8			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.21da	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.21dc	20 f9 21	jsr $21f9			jsr 	TOKDOutput
.21df	20 f0 21	jsr $21f0			jsr 	TOKDGet 					; get first char of integer
.21e2	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.21e4	20 70 22	jsr $2270			jsr 	TOKDInteger
.21e7	80 c2		bra $21ab			bra 	_TOKDLoop
.21e9					_TOKDDataItem:
.21e9	20 06 22	jsr $2206			jsr 	TOKDDataItem
.21ec	80 bd		bra $21ab			bra 	_TOKDLoop
.21ee					_TOKDExit:
.21ee	18		clc				clc
.21ef	60		rts				rts
.21f0	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.21f2	e6 28		inc $28				inc 	zTemp2
.21f4	d0 02		bne $21f8			bne 	_TKDGExit
.21f6	e6 29		inc $29				inc 	zTemp2+1
.21f8					_TKDGExit:
.21f8	60		rts				rts
.21f9					TOKDOutput:
.21f9	8d 1c 05	sta $051c			sta 	TOKLastCharacter 			; save last character
.21fc	6c 1a 05	jmp ($051a)			jmp 	(TOKOutputMethod) 			; call output handler
.21ff					TOKSetDetokeniseOutput:
.21ff	8e 1a 05	stx $051a			stx 	TOKOutputMethod
.2202	8c 1b 05	sty $051b			sty 	TOKOutputMethod+1
.2205	60		rts				rts
.051a					TOKOutputMethod:
>051a							.fill 	2
.051c					TOKLastCharacter:
>051c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.2206					TOKDDataItem:
.2206	a8		tay				tay 								; type in Y
.2207	a9 22		lda #$22			lda 	#'"'						; start with " or . depending on type.
.2209	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.220b	f0 02		beq $220f			beq 	_TOKDDIsString
.220d	a9 2e		lda #$2e			lda 	#'.'
.220f					_TOKDDIsString:
.220f	20 f9 21	jsr $21f9			jsr 	TOKDOutput 					; dump it
.2212	20 f0 21	jsr $21f0			jsr 	TOKDGet 					; get length into X
.2215	aa		tax				tax
.2216					_TOKDDOutput:
.2216	ca		dex				dex 								; output all the data.
.2217	e0 ff		cpx #$ff			cpx 	#255
.2219	f0 08		beq $2223			beq 	_TOKDDEnd
.221b	20 f0 21	jsr $21f0			jsr 	TOKDGet 					; get character and output it
.221e	20 f9 21	jsr $21f9			jsr 	TOKDOutput
.2221	80 f3		bra $2216			bra 	_TOKDDOutput
.2223					_TOKDDEnd:
.2223	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.2225	d0 05		bne $222c			bne 	_TOKDDNotString
.2227	a9 22		lda #$22			lda 	#'"'
.2229	20 f9 21	jsr $21f9			jsr 	TOKDOutput
.222c					_TOKDDNotString:
.222c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.222d					TOKDIdentifier:
.222d	a0 ff		ldy #$ff			ldy 	#$FF 						; flag set on first character only.
.222f	8c 1d 05	sty $051d			sty 	TOKDIFirstChar
.2232					_TOKDLoop:
.2232	a8		tay				tay 								; token in Y, now coner it to ASCII
.2233	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.2235	c0 64		cpy #$64			cpy 	#$64
.2237	f0 0b		beq $2244			beq 	_TOKDIOutput
.2239	98		tya				tya 								; handle a-z
.223a	18		clc				clc
.223b	69 21		adc #$21			adc	 	#$21
.223d	c0 5a		cpy #$5a			cpy 	#$5A
.223f	90 03		bcc $2244			bcc 	_TOKDIOutput
.2241	38		sec				sec 								; handle 0-9
.2242	e9 4b		sbc #$4b			sbc 	#$4B
.2244					_TOKDIOutput:
.2244	2c 1d 05	bit $051d			bit 	TOKDIFirstChar 				; check spacing if first character
.2247	10 08		bpl $2251			bpl 	_TOKDINoSpacing
.2249	48		pha				pha
.224a	20 f3 22	jsr $22f3			jsr 	TOKDSpacing
.224d	9c 1d 05	stz $051d			stz 	TOKDIFirstChar
.2250	68		pla				pla
.2251					_TOKDINoSpacing:
.2251	20 f9 21	jsr $21f9			jsr 	TOKDOutput
.2254	20 f0 21	jsr $21f0			jsr 	TOKDGet 					; get next token
.2257	c9 7c		cmp #$7c			cmp 	#$7C 						; 7C..7F are end markers
.2259	90 d7		bcc $2232			bcc 	_TOKDLoop
.225b	f0 12		beq $226f			beq 	_TOKDIExit 					; it's a number, no tail.
.225d	4a		lsr a				lsr 	a 							; string ?
.225e	90 07		bcc $2267			bcc 	_TOKDICheckArray
.2260	48		pha				pha
.2261	a9 24		lda #$24			lda 	#"$"
.2263	20 f9 21	jsr $21f9			jsr 	TOKDOutput
.2266	68		pla				pla
.2267					_TOKDICheckArray:
.2267	4a		lsr a				lsr 	a 							; array ?
.2268	90 05		bcc $226f			bcc 	_TOKDIExit
.226a	a9 28		lda #$28			lda 	#"("
.226c	20 f9 21	jsr $21f9			jsr 	TOKDOutput
.226f					_TOKDIExit:
.226f	60		rts				rts
.051d					TOKDIFirstChar:
>051d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.2270					TOKDInteger:
.2270	5a		phy				phy 								; save base on stack
.2271	a2 08		ldx #$08			ldx 	#IFR0 						; set first byte of integer into into R0
.2273	20 74 36	jsr $3674			jsr 	IFloatSetByte
.2276					_TOKDILoop:
.2276	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F, extract the whole integer out.
.2278	c9 40		cmp #$40			cmp 	#$40
.227a	b0 1d		bcs $2299			bcs 	_TOKDIHaveInteger
.227c	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.227e	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.2281	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.2284	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.2287	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.228a	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.228d	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.2290	20 f0 21	jsr $21f0			jsr 	TOKDGet 					; OR byte in.
.2293	05 08		ora $08				ora 	IFR0+IM0
.2295	85 08		sta $08				sta 	IFR0+IM0
.2297	80 dd		bra $2276			bra 	_TOKDILoop
.2299					_TOKDIHaveInteger:
.2299	7a		ply				ply 								; restore base
.229a	98		tya				tya 								; base in A
.229b	20 14 34	jsr $3414			jsr 	IFloatIntegerToStringR0 	; make it a string
.229e	86 24		stx $24				stx 	zTemp0 						; output that string.
.22a0	84 25		sty $25				sty 	zTemp0+1
.22a2	b2 24		lda ($24)			lda 	(zTemp0)
.22a4	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.22a6	b1 24		lda ($24),y			lda 	(zTemp0),y
.22a8	20 f3 22	jsr $22f3			jsr 	TOKDSpacing 				; check spacing okay.
.22ab					_TOKDOutput:
.22ab	b1 24		lda ($24),y			lda 	(zTemp0),y
.22ad	20 f9 21	jsr $21f9			jsr 	TOKDOutput
.22b0	c8		iny				iny
.22b1	b1 24		lda ($24),y			lda 	(zTemp0),y
.22b3	d0 f6		bne $22ab			bne 	_TOKDOutput
.22b5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.22b6					TOKDToken:
.22b6	a2 9c		ldx #$9c			ldx 	#StandardTokens & $FF 		; standard table
.22b8	a0 1e		ldy #$1e			ldy 	#StandardTokens >> 8
.22ba	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.22bc	d0 07		bne $22c5			bne 	_TOKDSearch
.22be	20 f0 21	jsr $21f0			jsr 	TOKDGet 					; get next
.22c1	a2 1d		ldx #$1d			ldx 	#AlternateTokens & $FF 		; alt table address
.22c3	a0 20		ldy #$20			ldy 	#AlternateTokens >> 8
.22c5					_TOKDSearch:
.22c5	86 24		stx $24				stx 	zTemp0 						; save table in zTemp0
.22c7	84 25		sty $25				sty 	zTemp0+1
.22c9	aa		tax				tax 								; token ID in X.
.22ca					_TOKDFind:
.22ca	ca		dex				dex 								; reached the token position
.22cb	10 0d		bpl $22da			bpl 	_TOKDFound
.22cd	38		sec				sec 								; go to next entry in token table
.22ce	b2 24		lda ($24)			lda 	(zTemp0)
.22d0	65 24		adc $24				adc 	zTemp0
.22d2	85 24		sta $24				sta 	zTemp0
.22d4	90 f4		bcc $22ca			bcc 	_TOKDFind
.22d6	e6 25		inc $25				inc 	zTemp0+1
.22d8	80 f0		bra $22ca			bra 	_TOKDFind
.22da					_TOKDFound:
.22da	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X.
.22dc	f0 14		beq $22f2			beq 	_TOKDExit 					; not a token with text.
.22de	aa		tax				tax
.22df	a0 01		ldy #$01			ldy 	#1 							; output the token.
.22e1	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.22e3	20 f3 22	jsr $22f3			jsr 	TOKDSpacing 				; do we need space before this.
.22e6					_TOKDOutput:
.22e6	b1 24		lda ($24),y			lda 	(zTemp0),y 					; output them in lower case
.22e8	20 a9 26	jsr $26a9			jsr 	TOKToLower
.22eb	20 f9 21	jsr $21f9			jsr 	TOKDOutput
.22ee	c8		iny				iny
.22ef	ca		dex				dex
.22f0	d0 f4		bne $22e6			bne 	_TOKDOutput
.22f2					_TOKDExit:
.22f2	60		rts				rts
.22f3					TOKDSpacing:
.22f3	20 c0 26	jsr $26c0			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.22f6	90 0d		bcc $2305			bcc 	TOKDSExit
.22f8					TOKDSpaceLastAlpha:
.22f8	ad 1c 05	lda $051c			lda 	TOKLastCharacter			; and last character also alphanumeric
.22fb	20 c0 26	jsr $26c0			jsr 	TOKIsIdentifierElement
.22fe	90 05		bcc $2305			bcc 	TOKDSExit
.2300	a9 20		lda #$20			lda 	#" " 						; we need a space.
.2302	20 f9 21	jsr $21f9			jsr 	TOKDOutput
.2305					TOKDSExit:
.2305	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.2306					PGMDeleteLine:
.2306	20 b9 23	jsr $23b9			jsr 	PGMEndProgram 				; end of program into zTemp0
.2309	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.230b	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.230e	85 27		sta $27				sta 	zTemp1+1
.2310					_PGMDLoop:
.2310	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.2312	38		sec				sec
.2313	f0 3a		beq $234f			beq 	_PGMDExit
.2315	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.2317	b1 26		lda ($26),y			lda 	(zTemp1),y 					; compare LSB
.2319	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.231c	d0 08		bne $2326			bne 	_PGMDNext
.231e	c8		iny				iny 								; compare MSB
.231f	b1 26		lda ($26),y			lda 	(zTemp1),y
.2321	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.2324	f0 0d		beq $2333			beq 	_PGMDDelete
.2326					_PGMDNext:
.2326	18		clc				clc
.2327	b2 26		lda ($26)			lda 	(zTemp1)
.2329	65 26		adc $26				adc 	zTemp1
.232b	85 26		sta $26				sta 	zTemp1
.232d	90 e1		bcc $2310			bcc 	_PGMDLoop
.232f	e6 27		inc $27				inc 	zTemp1+1
.2331	80 dd		bra $2310			bra 	_PGMDLoop
.2333					_PGMDDelete:
.2333	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.2335	a8		tay				tay
.2336					_PGMDCopy:
.2336	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.2338	92 26		sta ($26)			sta 	(zTemp1)
.233a	a5 26		lda $26				lda 	zTemp1 						; reached the end in zTemp0
.233c	c5 24		cmp $24				cmp 	zTemp0
.233e	d0 07		bne $2347			bne 	_PGMDNext2
.2340	a5 27		lda $27				lda 	zTemp1+1
.2342	c5 25		cmp $25				cmp 	zTemp0+1
.2344	18		clc				clc
.2345	f0 08		beq $234f			beq 	_PGMDExit 					; then exit.
.2347					_PGMDNext2:
.2347	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.2349	d0 eb		bne $2336			bne 	_PGMDCopy
.234b	e6 27		inc $27				inc 	zTemp1+1
.234d	80 e7		bra $2336			bra 	_PGMDCopy
.234f					_PGMDExit:
.234f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.2350					PGMInsertLine:
.2350	20 b9 23	jsr $23b9			jsr 	PGMEndProgram 				; end of program into zTemp0
.2353	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2355	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.2358	85 27		sta $27				sta 	zTemp1+1
.235a					_PGMILoop:
.235a	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.235c	f0 1c		beq $237a			beq 	_PGMIInsert
.235e	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.2360	b1 26		lda ($26),y			lda 	(zTemp1),y
.2362	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2365	c8		iny				iny
.2366	b1 26		lda ($26),y			lda 	(zTemp1),y
.2368	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.236b	b0 0d		bcs $237a			bcs 	_PGMIInsert 				; insert here.
.236d	18		clc				clc
.236e	b2 26		lda ($26)			lda 	(zTemp1)
.2370	65 26		adc $26				adc 	zTemp1
.2372	85 26		sta $26				sta 	zTemp1
.2374	90 e4		bcc $235a			bcc 	_PGMILoop
.2376	e6 27		inc $27				inc 	zTemp1+1
.2378	80 e0		bra $235a			bra 	_PGMILoop
.237a					_PGMIInsert:
.237a	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required is length in token buffer.
.237d					_PGMIInsertLoop:
.237d	b2 24		lda ($24)			lda 	(zTemp0) 					; shift byte up.
.237f	91 24		sta ($24),y			sta 	(zTemp0),y
.2381	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.2383	c5 24		cmp $24				cmp 	zTemp0
.2385	d0 06		bne $238d			bne 	_PGMINext
.2387	a5 27		lda $27				lda 	zTemp1+1
.2389	c5 25		cmp $25				cmp 	zTemp0+1
.238b	f0 0a		beq $2397			beq 	_PGMIInserted
.238d					_PGMINext:
.238d	a5 24		lda $24				lda 	zTemp0
.238f	d0 02		bne $2393			bne 	_PGMINoBorrow
.2391	c6 25		dec $25				dec 	zTemp0+1
.2393					_PGMINoBorrow:
.2393	c6 24		dec $24				dec 	zTemp0
.2395	80 e6		bra $237d			bra 	_PGMIInsertLoop 			; do previous byte.
.2397					_PGMIInserted:
.2397	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.2399					_PGMICopyLoop:
.2399	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.239c	91 26		sta ($26),y			sta 	(zTemp1),y
.239e	c8		iny				iny
.239f	cc 00 04	cpy $0400			cpy 	TOKLineSize
.23a2	d0 f5		bne $2399			bne 	_PGMICopyLoop
.23a4	18		clc				clc
.23a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.23a6					PGMSetBaseAddress:
.23a6	8e 1e 05	stx $051e			stx 	PGMBaseHigh 				; use memory from here
.23a9	8c 1f 05	sty $051f			sty 	PGMEndMemoryHigh 			; to here.
.23ac	60		rts				rts
.23ad					PGMNewProgram:
.23ad	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.23af	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.23b2	85 25		sta $25				sta 	zTemp0+1
.23b4	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.23b6	92 24		sta ($24)			sta 	(zTemp0)
.23b8	60		rts				rts
.23b9					PGMEndProgram:
.23b9	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.23bb	ad 1e 05	lda $051e			lda 	PGMBaseHigh
.23be	85 25		sta $25				sta 	zTemp0+1
.23c0					_PGMEPLoop:
.23c0	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.23c2	f0 0b		beq $23cf			beq 	_PGMEPExit
.23c4	18		clc				clc 								; no, advance to next
.23c5	65 24		adc $24				adc 	zTemp0
.23c7	85 24		sta $24				sta 	zTemp0
.23c9	90 f5		bcc $23c0			bcc 	_PGMEPLoop
.23cb	e6 25		inc $25				inc 	zTemp0+1
.23cd	80 f1		bra $23c0			bra 	_PGMEPLoop
.23cf					_PGMEPExit:
.23cf	60		rts				rts
.051e					PGMBaseHigh:
>051e							.fill 	1
.051f					PGMEndMemoryHigh:
>051f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.23d0					TOKResetElement:
.23d0	9c 20 05	stz $0520			stz 	TOKElement
.23d3	60		rts				rts
.23d4					TOKWriteElement:
.23d4	da		phx				phx
.23d5	ae 20 05	ldx $0520			ldx 	TOKElement
.23d8	9d 21 05	sta $0521,x			sta 	TOKElementText,x
.23db	9e 22 05	stz $0522,x			stz 	TOKElementText+1,x
.23de	fa		plx				plx
.23df	ee 20 05	inc $0520			inc 	TOKElement
.23e2	60		rts				rts
.0520					TOKElement:
>0520							.fill 	1
.0521					TOKElementText:
>0521							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.23e3					TOKTokeniseConstant:
.23e3	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.23e5	48		pha				pha 								; save on stack
.23e6	29 c0		and #$c0			and 	#$C0
.23e8	05 09		ora $09				ora 	IFR0+IM1
.23ea	05 0a		ora $0a				ora 	IFR0+IM2
.23ec	f0 10		beq $23fe			beq 	_TTCLess
.23ee	da		phx				phx
.23ef	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.23f1					_TTCShiftRight:
.23f1	46 0a		lsr $0a				lsr 	IFR0+IM2
.23f3	66 09		ror $09				ror 	IFR0+IM1
.23f5	66 08		ror $08				ror 	IFR0+IM0
.23f7	ca		dex				dex
.23f8	d0 f7		bne $23f1			bne 	_TTCShiftRight
.23fa	fa		plx				plx
.23fb	20 e3 23	jsr $23e3			jsr 	TOKTokeniseConstant
.23fe					_TTCLess:
.23fe	68		pla				pla
.23ff	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.2401	20 a1 24	jsr $24a1			jsr 	TOKWriteA
.2404	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.2405					TOKTokeniseDecimals:
.2405	20 b4 24	jsr $24b4			jsr 	TOKGetNext 					; consume the .
.2408	20 2d 26	jsr $262d			jsr 	TOKExtractInteger 			; pull an integer out as text.
.240b	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.240d	20 a1 24	jsr $24a1			jsr 	TOKWriteA
.2410	20 15 24	jsr $2415			jsr 	TOKOutputElementBuffer 		; then the buffer
.2413	18		clc				clc
.2414	60		rts				rts
.2415					TOKOutputElementBuffer:
.2415	ad 20 05	lda $0520			lda 	TOKElement 					; get count and write that
.2418	20 a1 24	jsr $24a1			jsr 	TOKWriteA
.241b	a8		tay				tay 								; put in Y
.241c	f0 0c		beq $242a			beq 	_TOEExit 					; exit if empty which is okay.
.241e	a2 01		ldx #$01			ldx 	#1
.2420					_TOELoop:
.2420	bd 20 05	lda $0520,x			lda 	TOKElement,x
.2423	20 a1 24	jsr $24a1			jsr 	TOKWriteA
.2426	e8		inx				inx
.2427	88		dey				dey
.2428	d0 f6		bne $2420			bne 	_TOELoop
.242a					_TOEExit:
.242a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.242b					TOKTokenise:
.242b	8c 21 06	sty $0621			sty 	TOKDataSource+1 			; save source routine pointer
.242e	8e 20 06	stx $0620			stx 	TOKDataSource
.2431	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2433	8d 22 06	sta $0622			sta 	TOKIsFirstElement
.2436	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.2438	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.243b	9c 01 04	stz $0401			stz 	TOKLineNumber
.243e	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2441					_TOKMainLoop:
.2441	20 b0 24	jsr $24b0			jsr 	TOKGet 						; what follows.
.2444	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.2446	f0 50		beq $2498			beq 	_TOKExit
.2448	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.244a	d0 05		bne $2451			bne 	_TOKElement
.244c	20 b4 24	jsr $24b4			jsr 	TOKGetNext
.244f	80 f0		bra $2441			bra 	_TOKMainLoop
.2451					_TOKElement:
.2451	20 b4 26	jsr $26b4			jsr 	TOKIsDigit 					; is it 0..9
.2454	90 16		bcc $246c			bcc 	_TOKNotDigit
.2456	20 04 26	jsr $2604			jsr 	TOKTokeniseInteger 			; get integer
.2459	b0 44		bcs $249f			bcs 	_TOKFail 					; did it fail ?
.245b	9c 22 06	stz $0622			stz 	TOKIsFirstElement 			; clear first element flag
.245e	20 b0 24	jsr $24b0			jsr 	TOKGet 						; what follows ?
.2461	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2463	d0 dc		bne $2441			bne 	_TOKMainLoop
.2465	20 05 24	jsr $2405			jsr 	TOKTokeniseDecimals
.2468	b0 35		bcs $249f			bcs 	_TOKFail
.246a	80 d5		bra $2441			bra 	_TOKMainLoop
.246c					_TOKNotDigit:
.246c	9c 22 06	stz $0622			stz 	TOKIsFirstElement 			; clear first element flag
.246f	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.2471	d0 07		bne $247a			bne 	_TOKNotHex
.2473	20 0a 25	jsr $250a			jsr 	TOKTokeniseHexadecimal
.2476	b0 27		bcs $249f			bcs 	_TOKFail
.2478	80 c7		bra $2441			bra 	_TOKMainLoop
.247a					_TOKNotHex:
.247a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.247c	d0 07		bne $2485			bne 	_TOKNotString
.247e	20 7b 26	jsr $267b			jsr 	TOKTokeniseString
.2481	b0 1c		bcs $249f			bcs 	_TOKFail
.2483	80 bc		bra $2441			bra 	_TOKMainLoop
.2485					_TOKNotString:
.2485	20 cd 26	jsr $26cd			jsr 	TOKIsAlpha 					; identifier ?
.2488	b0 07		bcs $2491			bcs 	_TOKIdentifier
.248a	20 41 26	jsr $2641			jsr 	TOKTokenisePunctuation 		; punctuation
.248d	b0 10		bcs $249f			bcs 	_TOKFail
.248f	80 b0		bra $2441			bra 	_TOKMainLoop
.2491					_TOKIdentifier:
.2491	20 47 25	jsr $2547			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2494	b0 09		bcs $249f			bcs 	_TOKFail
.2496	80 a9		bra $2441			bra 	_TOKMainLoop
.2498					_TOKExit:
.2498	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.249a	20 a1 24	jsr $24a1			jsr 	TOKWriteA
.249d	18		clc				clc									; return with carry set.
.249e	60		rts				rts
.249f					_TOKFail:
.249f	38		sec				sec
.24a0	60		rts				rts
.24a1					TOKWriteA:
.24a1	da		phx				phx
.24a2	ae 00 04	ldx $0400			ldx 	TOKLineSize
.24a5	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.24a8	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.24ab	fa		plx				plx
.24ac	ee 00 04	inc $0400			inc 	TOKLineSize
.24af	60		rts				rts
.24b0					TOKGet:
.24b0	18		clc				clc
.24b1	6c 20 06	jmp ($0620)			jmp 	(TOKDataSource)
.24b4					TOKGetNext:
.24b4	38		sec				sec
.24b5	6c 20 06	jmp ($0620)			jmp 	(TOKDataSource)
.0620					TOKDataSource:
>0620							.fill 	2
.0622					TOKIsFirstElement:
>0622							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.24b8					TOKFindToken:
.24b8	a2 9c		ldx #$9c			ldx 	#StandardTokens & $FF 		; do this table
.24ba	a0 1e		ldy #$1e			ldy 	#StandardTokens >> 8
.24bc	20 d4 24	jsr $24d4			jsr 	TOKFindTokenXY 				; find it, or not
.24bf	b0 0d		bcs $24ce			bcs 	_TOKFound1
.24c1	a2 1d		ldx #$1d			ldx 	#AlternateTokens & $FF 		; do the alternate table
.24c3	a0 20		ldy #$20			ldy 	#AlternateTokens >> 8
.24c5	20 d4 24	jsr $24d4			jsr 	TOKFindTokenXY 				; find it, or not
.24c8	90 08		bcc $24d2			bcc 	_TOKFTFail 					; not ....
.24ca	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.24cc	38		sec				sec
.24cd	60		rts				rts
.24ce					_TOKFound1:
.24ce	a2 00		ldx #$00			ldx 	#0
.24d0	38		sec				sec
.24d1	60		rts				rts
.24d2					_TOKFTFail
.24d2	18		clc				clc
.24d3	60		rts				rts
.24d4					TOKFindTokenXY:
.24d4	86 24		stx $24				stx 	zTemp0 						; save token table address
.24d6	84 25		sty $25				sty 	zTemp0+1
.24d8	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.24da	8d 23 06	sta $0623			sta 	TOKCurrent
.24dd					_TOKFindLoop:
.24dd	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.24df	18		clc				clc 		 						; clear carry in case of fail
.24e0	30 17		bmi $24f9			bmi 	_TOKExit 					; end of table, fail, so return CC.
.24e2	cd 20 05	cmp $0520			cmp 	TOKElement 					; compare against the element length
.24e5	d0 13		bne $24fa			bne 	_TOKNext 					; different, try next.
.24e7	aa		tax				tax 								; number of chars to compare.
.24e8	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.24ea					_TOKCompare:
.24ea	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.24ec	d9 20 05	cmp $0520,y			cmp 	TOKElementText-1,y
.24ef	d0 09		bne $24fa			bne 	_TOKNext 					; different ? try next
.24f1	c8		iny				iny 								; compare next two
.24f2	ca		dex				dex
.24f3	d0 f5		bne $24ea			bne 	_TOKCompare 				; until done X characters.
.24f5	38		sec				sec
.24f6	ad 23 06	lda $0623			lda 	TOKCurrent 					; return current ID.
.24f9					_TOKExit:
.24f9	60		rts				rts
.24fa					_TOKNext:
.24fa	ee 23 06	inc $0623			inc 	TOKCurrent 					; increment token #
.24fd	38		sec				sec 								; add length+1 to ptr
.24fe	b2 24		lda ($24)			lda 	(zTemp0)
.2500	65 24		adc $24				adc 	zTemp0
.2502	85 24		sta $24				sta 	zTemp0
.2504	90 d7		bcc $24dd			bcc 	_TOKFindLoop
.2506	e6 25		inc $25				inc 	zTemp0+1
.2508	80 d3		bra $24dd			bra 	_TOKFindLoop
.0623					TOKCurrent:
>0623							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.250a					TOKTokeniseHexadecimal:
.250a	20 b4 24	jsr $24b4			jsr 	TOKGetNext 					; consume the $
.250d	a2 08		ldx #$08			ldx 	#IFR0
.250f	20 72 36	jsr $3672			jsr 	IFloatSetZero 				; set R0 = 0
.2512					_TTHLoop:
.2512	20 b0 24	jsr $24b0			jsr 	TOKGet 						; keep getting and copying while numeric.
.2515	20 da 26	jsr $26da			jsr 	TOKIsHexadecimal
.2518	90 23		bcc $253d			bcc 	_TTHDone
.251a	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.251c	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.251f	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.2522	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.2525	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.2528	20 b4 24	jsr $24b4			jsr 	TOKGetNext
.252b	20 9e 26	jsr $269e			jsr 	TOKToUpper 					; make U/C
.252e	38		sec				sec 								; convert to decimal.
.252f	e9 30		sbc #$30			sbc 	#48
.2531	c9 0a		cmp #$0a			cmp 	#10
.2533	90 02		bcc $2537			bcc 	_TTHNotAlpha
.2535	e9 07		sbc #$07			sbc 	#7
.2537					_TTHNotAlpha:
.2537	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2539	85 08		sta $08				sta 	IFR0+IM0
.253b	80 d5		bra $2512			bra 	_TTHLoop
.253d					_TTHDone:
.253d	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.253f	20 a1 24	jsr $24a1			jsr 	TOKWriteA
.2542	20 e3 23	jsr $23e3			jsr 	TOKTokeniseConstant 		; write integer out.
.2545	18		clc				clc
.2546	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2547					TOKTokeniseIdentifier:
.2547	20 d0 23	jsr $23d0			jsr 	TOKResetElement 			; extract an identifier
.254a					_TOKGetIdentifier:
.254a	20 b0 24	jsr $24b0			jsr 	TOKGet
.254d	20 9e 26	jsr $269e			jsr 	TOKToUpper
.2550	20 c0 26	jsr $26c0			jsr 	TOKIsIdentifierElement
.2553	90 08		bcc $255d			bcc 	_TOKEndIdent
.2555	20 d4 23	jsr $23d4			jsr		TOKWriteElement
.2558	20 b4 24	jsr $24b4			jsr 	TOKGetNext
.255b	80 ed		bra $254a			bra 	_TOKGetIdentifier
.255d					_TOKEndIdent:
.255d	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.255f	d0 06		bne $2567			bne 	_TOKNotString
.2561	20 d4 23	jsr $23d4			jsr 	TOKWriteElement 			; add it
.2564	20 b4 24	jsr $24b4			jsr 	TOKGetNext 					; consume it
.2567					_TOKNotString:
.2567	20 b0 24	jsr $24b0			jsr 	TOKGet 						; finally check for (
.256a	c9 28		cmp #$28			cmp 	#"("
.256c	d0 06		bne $2574			bne 	_TOKNoArray
.256e	20 d4 23	jsr $23d4			jsr 	TOKWriteElement 			; add it
.2571	20 b4 24	jsr $24b4			jsr 	TOKGetNext 					; consume it
.2574					_TOKNoArray:
.2574	20 b8 24	jsr $24b8			jsr 	TOKFindToken 				; find it
.2577	90 18		bcc $2591			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2579	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.257b	f0 0f		beq $258c			beq 	_TOKComment 				; yes, do comment code.
.257d	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.257f	d0 06		bne $2587			bne 	_TOKNoShift
.2581	48		pha				pha 								; write the shift.
.2582	8a		txa				txa
.2583	20 a1 24	jsr $24a1			jsr 	TOKWriteA
.2586	68		pla				pla
.2587					_TOKNoShift:
.2587	20 a1 24	jsr $24a1			jsr 	TOKWriteA 					; write the main token.
.258a	18		clc				clc
.258b	60		rts				rts
.258c					_TOKComment:
.258c	20 d1 25	jsr $25d1			jsr 	TOKDoComment
.258f	18		clc				clc
.2590	60		rts				rts
.2591					_TOKIsVariable:
.2591	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2593					_TOKOutputBuffer:
.2593	bd 21 05	lda $0521,x			lda 	TOKElementText,x 			; output it translated.
.2596	20 bf 25	jsr $25bf			jsr 	TOKTranslateIdentifier
.2599	20 a1 24	jsr $24a1			jsr 	TOKWriteA
.259c	e8		inx				inx
.259d	bd 21 05	lda $0521,x			lda 	TOKElementText,x
.25a0	20 c0 26	jsr $26c0			jsr 	TOKIsIdentifierElement
.25a3	b0 ee		bcs $2593			bcs 	_TOKOutputBuffer
.25a5	a8		tay				tay 								; last char in Y
.25a6	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.25a8	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.25aa	f0 0e		beq $25ba			beq 	_TOKIVExit
.25ac	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.25ae	d0 04		bne $25b4			bne 	_TOKIVCheckArray 			; no, check for (
.25b0	1a		inc a				inc 	a 							; token is $7D
.25b1	bc 22 05	ldy $0522,x			ldy 	TOKElementText+1,x 			; get next one.
.25b4					_TOKIVCheckArray:
.25b4	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.25b6	d0 02		bne $25ba			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.25b8	1a		inc a				inc 	a
.25b9	1a		inc a				inc 	a
.25ba					_TOKIVExit:
.25ba	20 a1 24	jsr $24a1			jsr 	TOKWriteA 					; ending token
.25bd	18		clc				clc
.25be	60		rts				rts
.25bf					TOKTranslateIdentifier:
.25bf	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.25c1	f0 0b		beq $25ce			beq 	_TTI64
.25c3	38		sec				sec
.25c4	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.25c6	10 03		bpl $25cb			bpl 	_TTIExit
.25c8	18		clc				clc 								; map 09 onto 26-35
.25c9	69 2b		adc #$2b			adc 	#"A"-"0"+26
.25cb					_TTIExit:
.25cb	09 40		ora #$40			ora 	#$40 						; correct range.
.25cd	60		rts				rts
.25ce	a9 64		lda #$64	_TTI64:	lda 	#$64
.25d0	60		rts				rts
.25d1					TOKDoComment:
.25d1	20 a1 24	jsr $24a1			jsr 	TOKWriteA					; output the token.
.25d4					_TOKSkipSpaces:
.25d4	20 b0 24	jsr $24b0			jsr 	TOKGet 						; skip over spaces
.25d7	c9 20		cmp #$20			cmp 	#' '
.25d9	d0 05		bne $25e0			bne 	_TOKEndSpaces
.25db	20 b4 24	jsr $24b4			jsr 	TOKGetNext
.25de	80 f4		bra $25d4			bra 	_TOKSkipSpaces
.25e0					_TOKEndSpaces:
.25e0	48		pha				pha 								; save it
.25e1	68		pla				pla
.25e2	f0 04		beq $25e8			beq 	_TOKDCExit 					; end of line.
.25e4	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.25e6	d0 01		bne $25e9			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.25e8					_TOKDCExit:
.25e8	60		rts				rts
.25e9					_TOKDCDoLine:
.25e9	20 d0 23	jsr $23d0			jsr 	TOKResetElement 			; start getting the string
.25ec					_TOKDCLoop:
.25ec	20 b0 24	jsr $24b0			jsr 	TOKGet 						; check EOL
.25ef	c9 00		cmp #$00			cmp 	#0
.25f1	f0 08		beq $25fb			beq 	_TOKDCEndComment
.25f3	20 b4 24	jsr $24b4			jsr 	TOKGetNext 					; get and consume
.25f6	20 d4 23	jsr $23d4			jsr 	TOKWriteElement
.25f9	80 f1		bra $25ec			bra 	_TOKDCLoop
.25fb					_TOKDCEndComment:
.25fb	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.25fd	20 a1 24	jsr $24a1			jsr 	TOKWriteA
.2600	20 15 24	jsr $2415			jsr 	TOKOutputElementBuffer
.2603	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2604					TOKTokeniseInteger:
.2604	20 2d 26	jsr $262d			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2607	a2 21		ldx #$21			ldx 	#TOKElementText & $FF
.2609	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.260b	ad 20 05	lda $0520			lda		TOKElement
.260e	20 d6 34	jsr $34d6			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2611	ad 22 06	lda $0622			lda 	TOKIsFirstElement 			; first element ?
.2614	f0 12		beq $2628			beq 	_TOKNotLineNumber
.2616	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.2618	d0 0c		bne $2626			bne 	_TOKBadLineNumeber
.261a	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.261c	8d 01 04	sta $0401			sta 	TOKLineNumber
.261f	a5 09		lda $09				lda 	IFR0+IM1
.2621	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2624	18		clc				clc
.2625	60		rts				rts
.2626					_TOKBadLineNumeber:
.2626	38		sec				sec
.2627	60		rts				rts
.2628					_TOKNotLineNumber:
.2628	20 e3 23	jsr $23e3			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.262b	18		clc				clc
.262c	60		rts				rts
.262d					TOKExtractInteger:
.262d	20 d0 23	jsr $23d0			jsr 	TOKResetElement 			; restart
.2630					_TTILoop:
.2630	20 b0 24	jsr $24b0			jsr 	TOKGet 						; keep getting and copying while numeric.
.2633	20 b4 26	jsr $26b4			jsr 	TOKIsDigit
.2636	90 08		bcc $2640			bcc 	_TOKEIExit
.2638	20 d4 23	jsr $23d4			jsr 	TOKWriteElement
.263b	20 b4 24	jsr $24b4			jsr 	TOKGetNext
.263e	80 f0		bra $2630			bra 	_TTILoop
.2640					_TOKEIExit:
.2640	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2641					TOKTokenisePunctuation:
.2641	20 d0 23	jsr $23d0			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2644	20 b4 24	jsr $24b4			jsr 	TOKGetNext
.2647	20 d4 23	jsr $23d4			jsr 	TOKWriteElement
.264a	20 b0 24	jsr $24b0			jsr 	TOKGet 						; what follows ?
.264d	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.264f	f0 10		beq $2661			beq 	_TTPOne
.2651	20 c4 26	jsr $26c4			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2654	b0 0b		bcs $2661			bcs 	_TTPOne 					; these speed things up a bit.
.2656	20 d4 23	jsr $23d4			jsr 	TOKWriteElement 			; this is what we will search for.
.2659	20 b8 24	jsr $24b8			jsr 	TOKFindToken
.265c	b0 0a		bcs $2668			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.265e	ce 20 05	dec $0520			dec 	TOKElement 					; make it a single character
.2661					_TTPOne:
.2661	20 b8 24	jsr $24b8			jsr 	TOKFindToken 				; look for one character punctuation
.2664	b0 07		bcs $266d			bcs 	_TTPOutputExit 				; we found it
.2666	38		sec				sec 								; not recognised.
.2667	60		rts				rts
.2668					_TTPConsumeExit:
.2668	48		pha				pha
.2669	20 b4 24	jsr $24b4			jsr 	TOKGetNext 					; get the 2nd char out.
.266c	68		pla				pla
.266d					_TTPOutputExit:
.266d	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.266f	f0 05		beq $2676			beq 	_TTPComment
.2671	20 a1 24	jsr $24a1			jsr  	TOKWriteA 					; write token out
.2674	18		clc				clc
.2675	60		rts				rts
.2676					_TTPComment:
.2676	20 d1 25	jsr $25d1			jsr 	TOKDoComment
.2679	18		clc				clc
.267a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.267b					TOKTokeniseString:
.267b	20 b4 24	jsr $24b4			jsr 	TOKGetNext 					; consume the "
.267e	20 d0 23	jsr $23d0			jsr 	TOKResetElement 			; start getting the string
.2681					_TOKTSLoop:
.2681	20 b0 24	jsr $24b0			jsr 	TOKGet 						; check EOL
.2684	c9 00		cmp #$00			cmp 	#0
.2686	f0 0c		beq $2694			beq 	_TOKTSExit
.2688	20 b4 24	jsr $24b4			jsr 	TOKGetNext 					; get and consume
.268b	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.268d	f0 05		beq $2694			beq 	_TOKTSExit
.268f	20 d4 23	jsr $23d4			jsr 	TOKWriteElement
.2692	80 ed		bra $2681			bra 	_TOKTSLoop
.2694					_TOKTSExit:
.2694	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2696	20 a1 24	jsr $24a1			jsr 	TOKWriteA
.2699	20 15 24	jsr $2415			jsr 	TOKOutputElementBuffer
.269c	18		clc				clc
.269d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.269e					TOKToUpper:
.269e	c9 61		cmp #$61			cmp 	#"a"
.26a0	90 06		bcc $26a8			bcc 	_TTUNotLower
.26a2	c9 7b		cmp #$7b			cmp 	#"z"+1
.26a4	b0 02		bcs $26a8			bcs 	_TTUNotLower
.26a6	49 20		eor #$20			eor 	#$20
.26a8					_TTUNotLower:
.26a8	60		rts				rts
.26a9					TOKToLower:
.26a9	c9 41		cmp #$41			cmp 	#"A"
.26ab	90 06		bcc $26b3			bcc 	_TTUNotUpper
.26ad	c9 5b		cmp #$5b			cmp 	#"Z"+1
.26af	b0 02		bcs $26b3			bcs 	_TTUNotUpper
.26b1	49 20		eor #$20			eor 	#$20
.26b3					_TTUNotUpper:
.26b3	60		rts				rts
.26b4					TOKIsDigit:
.26b4	c9 30		cmp #$30			cmp 	#"0"
.26b6	90 06		bcc $26be			bcc 	TOKFail
.26b8	c9 3a		cmp #$3a			cmp 	#"9"+1
.26ba	b0 02		bcs $26be			bcs 	TOKFail
.26bc					TOKSucceed:
.26bc	38		sec				sec
.26bd	60		rts				rts
.26be					TOKFail:
.26be	18		clc				clc
.26bf	60		rts				rts
.26c0					TOKIsIdentifierElement:
.26c0	c9 5f		cmp #$5f			cmp 	#"_"
.26c2	f0 f8		beq $26bc			beq 	TOKSucceed 					; else fall through to alphanumeric
.26c4					TOKIsAlphaNumeric:
.26c4	20 cd 26	jsr $26cd			jsr 	TOKIsAlpha
.26c7	b0 f3		bcs $26bc			bcs 	TOKSucceed
.26c9	20 b4 26	jsr $26b4			jsr 	TOKIsDigit
.26cc	60		rts				rts
.26cd					TOKIsAlpha:
.26cd	20 9e 26	jsr $269e			jsr 	TOKToUpper
.26d0	c9 41		cmp #$41			cmp 	#"A"
.26d2	90 ea		bcc $26be			bcc 	TOKFail
.26d4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.26d6	b0 e6		bcs $26be			bcs 	TOKFail
.26d8	80 e2		bra $26bc			bra 	TOKSucceed
.26da					TOKIsHexadecimal:
.26da	20 b4 26	jsr $26b4			jsr		TOKIsDigit
.26dd	b0 dd		bcs $26bc			bcs 	TOKSucceed
.26df	20 cd 26	jsr $26cd			jsr 	TOKIsAlpha
.26e2	90 da		bcc $26be			bcc 	TOKFail
.26e4	c9 47		cmp #$47			cmp 	#"F"+1
.26e6	b0 d6		bcs $26be			bcs 	TOKFail
.26e8	80 d2		bra $26bc			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.26ea					Command_CALL:
.26ea	a9 42		lda #$42			lda 	#STK_CALL
.26ec	20 ee 2b	jsr $2bee			jsr 	StackOpen
.26ef	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.26f1	29 c0		and #$c0			and 	#$C0
.26f3	c9 40		cmp #$40			cmp 	#$40
.26f5	d0 29		bne $2720			bne 	_CCSyntax
.26f7	20 b5 2f	jsr $2fb5			jsr 	VARGetInfo 					; get the information
.26fa	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 				; check right bracket follows.
.26fd	20 67 2f	jsr $2f67			jsr 	VARFind 					; exists ?
.2700	90 21		bcc $2723			bcc 	_CCUnknown
.2702	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.2704	85 24		sta $24				sta 	zTemp0
.2706	20 21 2c	jsr $2c21			jsr 	STKSaveCodePosition 		; save return address on stack.
.2709	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.270b	b1 24		lda ($24),y			lda 	(zTemp0),y
.270d	c9 ff		cmp #$ff			cmp 	#$FF
.270f	d0 12		bne $2723			bne 	_CCUnknown
.2711	88		dey				dey 								; get Y offset to stack
.2712	b1 24		lda ($24),y			lda 	(zTemp0),y
.2714	48		pha				pha
.2715	88		dey				dey 								; get address
.2716	b1 24		lda ($24),y			lda 	(zTemp0),y
.2718	85 19		sta $19				sta 	codePtr+1
.271a	b2 24		lda ($24)			lda 	(zTemp0)
.271c	85 18		sta $18				sta 	codePtr
.271e	7a		ply				ply 								; restore Y
.271f	60		rts				rts
.2720					_CCSyntax:
.2720	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.2723					_CCUnknown:
.2723	4c 5f 2b	jmp $2b5f		jmp	ErrorV_unknown
.2726					Command_ENDPROC:
.2726	a9 42		lda #$42			lda 	#STK_CALL
.2728	20 19 2c	jsr $2c19			jsr 	StackCheckFrame
.272b	20 33 2c	jsr $2c33			jsr 	STKLoadCodePosition 		; return
.272e	20 0b 2c	jsr $2c0b			jsr 	StackClose
.2731	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2732					Command_DO:
.2732	a9 22		lda #$22			lda 	#STK_DO
.2734	20 ee 2b	jsr $2bee			jsr 	StackOpen
.2737	20 21 2c	jsr $2c21			jsr 	STKSaveCodePosition 		; save loop position
.273a	60		rts				rts
.273b					Command_EXIT:
.273b	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.273d	20 19 2c	jsr $2c19			jsr 	StackCheckFrame
.2740	20 0b 2c	jsr $2c0b			jsr 	StackClose 					; close it
.2743	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2745	aa		tax				tax
.2746	20 fa 28	jsr $28fa			jsr 	ScanForward
.2749	60		rts				rts
.274a					Command_LOOP:
.274a	a9 22		lda #$22			lda 	#STK_DO
.274c	20 19 2c	jsr $2c19			jsr 	StackCheckFrame
.274f	20 33 2c	jsr $2c33			jsr 	STKLoadCodePosition 		; loop back
.2752	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2753					Command_FOR:
.2753	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2755	20 ee 2b	jsr $2bee			jsr 	StackOpen
.2758	20 5d 15	jsr $155d			jsr 	CommandLET 					; do "I = 1" bit
.275b	5a		phy				phy 								; save variable address to +4,+5
.275c	a0 04		ldy #$04			ldy 	#4
.275e	a5 24		lda $24				lda 	zTemp0
.2760	91 2c		sta ($2c),y			sta 	(basicStack),y
.2762	c8		iny				iny
.2763	a5 25		lda $25				lda 	zTemp0+1
.2765	91 2c		sta ($2c),y			sta 	(basicStack),y
.2767	7a		ply				ply
.2768	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.276a	20 e5 2b	jsr $2be5			jsr 	ERRCheckA
.276d	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2770	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2772	a2 08		ldx #$08			ldx 	#IFR0
.2774	20 c9 27	jsr $27c9			jsr 	CFSaveR0X
.2777	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2779	c9 91		cmp #$91			cmp 	#PR_STEP
.277b	d0 06		bne $2783			bne 	_CFStep1
.277d	c8		iny				iny 								; consume step
.277e	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 				; evaluate STEP
.2781	80 24		bra $27a7			bra 	_CFWriteStep
.2783					_CFStep1:
.2783	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2785	a9 01		lda #$01			lda 	#1
.2787	20 74 36	jsr $3674			jsr 	IFloatSetByte
.278a	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.278b	a0 04		ldy #$04			ldy 	#4 							; get variable address
.278d	b1 2c		lda ($2c),y			lda 	(basicStack),y
.278f	85 24		sta $24				sta 	zTemp0
.2791	c8		iny				iny
.2792	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2794	85 25		sta $25				sta 	zTemp0+1
.2796	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2798	b1 24		lda ($24),y			lda 	(zTemp0),y
.279a	d0 0a		bne $27a6			bne 	_CFNotOptimised
.279c	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.279e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27a0	d0 04		bne $27a6			bne 	_CFNotOptimised
.27a2	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.27a4	85 0b		sta $0b				sta 	IFR0+IExp
.27a6					_CFNotOptimised:
.27a6	7a		ply				ply
.27a7					_CFWriteStep:
.27a7	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.27a9	a9 06		lda #$06			lda 	#6
.27ab	20 c9 27	jsr $27c9			jsr 	CFSaveR0X
.27ae	20 21 2c	jsr $2c21			jsr 	STKSaveCodePosition 		; save loop position
.27b1	60		rts				rts
.27b2					CFLoadR0X:
.27b2	5a		phy				phy
.27b3	a8		tay				tay
.27b4	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27b6	95 00		sta $00,x			sta 	IM0,x
.27b8	c8		iny				iny
.27b9	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27bb	95 01		sta $01,x			sta 	IM1,x
.27bd	c8		iny				iny
.27be	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27c0	95 02		sta $02,x			sta 	IM2,x
.27c2	c8		iny				iny
.27c3	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27c5	95 03		sta $03,x			sta 	IExp,x
.27c7	7a		ply				ply
.27c8	60		rts				rts
.27c9					CFSaveR0X:
.27c9	5a		phy				phy
.27ca	a8		tay				tay
.27cb	b5 00		lda $00,x			lda 	IM0,x
.27cd	91 2c		sta ($2c),y			sta 	(basicStack),y
.27cf	c8		iny				iny
.27d0	b5 01		lda $01,x			lda 	IM1,x
.27d2	91 2c		sta ($2c),y			sta 	(basicStack),y
.27d4	c8		iny				iny
.27d5	b5 02		lda $02,x			lda 	IM2,x
.27d7	91 2c		sta ($2c),y			sta 	(basicStack),y
.27d9	c8		iny				iny
.27da	b5 03		lda $03,x			lda 	IExp,x
.27dc	91 2c		sta ($2c),y			sta 	(basicStack),y
.27de	7a		ply				ply
.27df	60		rts				rts
.27e0					Command_NEXT:
.27e0	a9 37		lda #$37			lda 	#STK_FOR
.27e2	20 19 2c	jsr $2c19			jsr 	StackCheckFrame
.27e5	5a		phy				phy 								; check optimised loop
.27e6	a0 09		ldy #$09			ldy 	#9
.27e8	b1 2c		lda ($2c),y			lda 	(basicStack),y
.27ea	7a		ply				ply
.27eb	0a		asl a				asl 	a
.27ec	b0 35		bcs $2823			bcs 	_CNOptimised
.27ee	20 5b 28	jsr $285b			jsr 	_CNLoadValue 				; load index value to R0.
.27f1	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.27f3	a9 06		lda #$06			lda 	#6
.27f5	20 b2 27	jsr $27b2			jsr 	CFLoadR0X
.27f8	20 6a 30	jsr $306a			jsr 	IFloatAdd 					; add them together and write back.
.27fb	20 7e 28	jsr $287e			jsr 	_CNSaveValue
.27fe	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2800	a2 0c		ldx #$0c			ldx 	#IFR1
.2802	20 b2 27	jsr $27b2			jsr 	CFLoadR0X
.2805	20 41 33	jsr $3341			jsr 	IFloatCompare 				; compare terminal vs current
.2808	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.280a	20 6b 36	jsr $366b			jsr 	IFloatCheckZero
.280d	f0 10		beq $281f			beq 	_CNLoopBack
.280f	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2811	5a		phy				phy
.2812	a0 09		ldy #$09			ldy 	#6+IExp
.2814	51 2c		eor ($2c),y			eor 	(basicStack),y
.2816	7a		ply				ply
.2817	29 40		and #$40			and 	#IFSign
.2819	f0 04		beq $281f			beq 	_CNLoopBack
.281b					_CNExitLoop:
.281b	20 0b 2c	jsr $2c0b			jsr 	StackClose		 			; return
.281e	60		rts				rts
.281f					_CNLoopBack:
.281f	20 33 2c	jsr $2c33			jsr 	STKLoadCodePosition 		; loop back
.2822	60		rts				rts
.2823					_CNOptimised:
.2823	5a		phy				phy
.2824	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2826	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2828	85 28		sta $28				sta 	zTemp2
.282a	c8		iny				iny
.282b	b1 2c		lda ($2c),y			lda 	(basicStack),y
.282d	85 29		sta $29				sta 	zTemp2+1
.282f	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2831					_CNIncrement:
.2831	c8		iny				iny
.2832	b1 28		lda ($28),y			lda 	(zTemp2),y
.2834	1a		inc a				inc 	a
.2835	91 28		sta ($28),y			sta 	(zTemp2),y
.2837	f0 f8		beq $2831			beq 	_CNIncrement
.2839	18		clc				clc 								; point zTemp0 to terminal value
.283a	a5 2c		lda $2c				lda 	basicStack
.283c	69 0a		adc #$0a			adc 	#10
.283e	85 24		sta $24				sta 	zTemp0
.2840	a5 2d		lda $2d				lda 	basicStack+1
.2842	69 00		adc #$00			adc 	#0
.2844	85 25		sta $25				sta 	zTemp0+1
.2846	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2848	18		clc				clc 								; borrow 1, we want > not >=
.2849	b2 28		lda ($28)			lda 	(zTemp2)
.284b	f2 24		sbc ($24)			sbc 	(zTemp0)
.284d	b1 28		lda ($28),y			lda 	(zTemp2),y
.284f	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.2851	c8		iny				iny
.2852	b1 28		lda ($28),y			lda 	(zTemp2),y
.2854	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.2856	7a		ply				ply
.2857	b0 c2		bcs $281b			bcs 	_CNExitLoop
.2859	80 c4		bra $281f			bra 	_CNLoopBack
.285b					_CNLoadValue:
.285b	5a		phy				phy
.285c	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.285e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2860	85 28		sta $28				sta 	zTemp2
.2862	c8		iny				iny
.2863	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2865	85 29		sta $29				sta 	zTemp2+1
.2867	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2869	b1 28		lda ($28),y			lda 	(zTemp2),y
.286b	85 08		sta $08				sta 	IFR0+IM0
.286d	c8		iny				iny
.286e	b1 28		lda ($28),y			lda 	(zTemp2),y
.2870	85 09		sta $09				sta 	IFR0+IM1
.2872	c8		iny				iny
.2873	b1 28		lda ($28),y			lda 	(zTemp2),y
.2875	85 0a		sta $0a				sta 	IFR0+IM2
.2877	c8		iny				iny
.2878	b1 28		lda ($28),y			lda 	(zTemp2),y
.287a	85 0b		sta $0b				sta 	IFR0+IExp
.287c	7a		ply				ply
.287d	60		rts				rts
.287e					_CNSaveValue:
.287e	5a		phy				phy
.287f	a0 00		ldy #$00			ldy 	#0
.2881	a5 08		lda $08				lda 	IFR0+IM0
.2883	91 28		sta ($28),y			sta 	(zTemp2),y
.2885	c8		iny				iny
.2886	a5 09		lda $09				lda 	IFR0+IM1
.2888	91 28		sta ($28),y			sta 	(zTemp2),y
.288a	c8		iny				iny
.288b	a5 0a		lda $0a				lda 	IFR0+IM2
.288d	91 28		sta ($28),y			sta 	(zTemp2),y
.288f	c8		iny				iny
.2890	a5 0b		lda $0b				lda 	IFR0+IExp
.2892	91 28		sta ($28),y			sta 	(zTemp2),y
.2894	7a		ply				ply
.2895	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2896					Command_GOSUB:
.2896	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; get line number
.2899	a9 52		lda #$52			lda 	#STK_GOSUB
.289b	20 ee 2b	jsr $2bee			jsr 	StackOpen
.289e	20 21 2c	jsr $2c21			jsr 	STKSaveCodePosition 		; save return address on stack.
.28a1	4c 7e 14	jmp $147e			jmp 	GotoR0
.28a4					Command_RETURN:
.28a4	a9 52		lda #$52			lda 	#STK_GOSUB
.28a6	20 19 2c	jsr $2c19			jsr 	StackCheckFrame
.28a9	20 33 2c	jsr $2c33			jsr 	STKLoadCodePosition 		; return
.28ac	20 0b 2c	jsr $2c0b			jsr 	StackClose
.28af	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.28b0					IfCommand:
.28b0	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 				; Get the if test.
.28b3	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.28b5	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.28b7	d0 0c		bne $28c5			bne 	_IfStructured 				; we still support it.
.28b9	c8		iny				iny 								; consume THEN
.28ba	a2 08		ldx #$08			ldx 	#IFR0
.28bc	20 6b 36	jsr $366b			jsr 	IFloatCheckZero 			; is it zero
.28bf	f0 01		beq $28c2			beq 	_IfFail 					; if fail, go to next line
.28c1	60		rts				rts 								; if THEN just continue
.28c2					_IfFail:
.28c2	4c b6 17	jmp $17b6			jmp 	RUNEndOfLine
.28c5					_IfStructured:
.28c5	20 6b 36	jsr $366b			jsr 	IFloatCheckZero 			; is it zero
.28c8	d0 07		bne $28d1			bne 	_IfExit 					; if not, then continue normally.
.28ca	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.28cc	a2 85		ldx #$85			ldx 	#PR_ENDIF
.28ce	20 fa 28	jsr $28fa			jsr 	ScanForward 				; and run from there
.28d1					_IfExit:
.28d1	60		rts				rts
.28d2					ElseCode:
.28d2	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.28d4	aa		tax				tax 								; so just go to the structure exit
.28d5	20 fa 28	jsr $28fa			jsr 	ScanForward
.28d8	60		rts				rts
.28d9					EndIf:
.28d9	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.28da					Command_REPEAT:
.28da	a9 02		lda #$02			lda 	#STK_REPEAT
.28dc	20 ee 2b	jsr $2bee			jsr 	StackOpen
.28df	20 21 2c	jsr $2c21			jsr 	STKSaveCodePosition 		; save loop position
.28e2	60		rts				rts
.28e3					Command_UNTIL:
.28e3	a9 02		lda #$02			lda 	#STK_REPEAT
.28e5	20 19 2c	jsr $2c19			jsr 	StackCheckFrame
.28e8	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 				; work out the test
.28eb	a2 08		ldx #$08			ldx 	#IFR0
.28ed	20 6b 36	jsr $366b			jsr 	IFloatCheckZero 			; check if zero
.28f0	f0 04		beq $28f6			beq 	_CULoopBack 				; if so keep looping
.28f2	20 0b 2c	jsr $2c0b			jsr 	StackClose		 			; return
.28f5	60		rts				rts
.28f6					_CULoopBack:
.28f6	20 33 2c	jsr $2c33			jsr 	STKLoadCodePosition 		; loop back
.28f9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.28fa					ScanForward:
.28fa	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.28fc	86 25		stx $25				stx 	zTemp0+1
.28fe	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.2900					_ScanForwardLoop:
.2900	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2902	d0 0a		bne $290e			bne 	_ScanNoCheck
.2904	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2906	c5 24		cmp $24				cmp 	zTemp0
.2908	f0 49		beq $2953			beq 	_ScanExit
.290a	c5 25		cmp $25				cmp 	zTemp0+1
.290c	f0 45		beq $2953			beq 	_ScanExit
.290e					_ScanNoCheck:
.290e	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2910	c8		iny				iny
.2911	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2913	f0 37		beq $294c			beq		_ScanDataItem
.2915	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2917	f0 33		beq $294c			beq 	_ScanDataItem
.2919	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.291b	f0 1b		beq $2938			beq 	_ScanNextLine
.291d	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.291f	d0 01		bne $2922			bne 	_ScanNoShift
.2921	c8		iny				iny
.2922					_ScanNoShift:
.2922	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2924	b0 da		bcs $2900			bcs 	_ScanForwardLoop
.2926	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2928	90 d6		bcc $2900			bcc 	_ScanForwardLoop
.292a	aa		tax				tax 								; access the table to get the adjustment.
.292b	18		clc				clc
.292c	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.292e	7d 10 1e	adc $1e10,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2931	85 26		sta $26				sta 	zTemp1
.2933	10 cb		bpl $2900			bpl		_ScanForwardLoop 			; error if -ve ?
.2935	4c 76 2a	jmp $2a76		jmp	ErrorV_structure
.2938					_ScanNextLine:
.2938	18		clc				clc	 								; forward to next line.
.2939	b2 18		lda ($18)			lda 	(codePtr)
.293b	65 18		adc $18				adc 	codePtr
.293d	85 18		sta $18				sta 	codePtr
.293f	90 02		bcc $2943			bcc 	_ScanNoCarry
.2941	e6 19		inc $19				inc 	codePtr+1
.2943					_ScanNoCarry:
.2943	a0 03		ldy #$03			ldy 	#3
.2945	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2947	d0 b7		bne $2900			bne 	_ScanForwardLoop
.2949	4c 76 2a	jmp $2a76		jmp	ErrorV_structure
.294c					_ScanDataItem:
.294c	98		tya				tya
.294d	38		sec				sec
.294e	71 18		adc ($18),y			adc 	(codePtr),y
.2950	a8		tay				tay
.2951	80 ad		bra $2900			bra 	_ScanForwardLoop
.2953					_ScanExit:
.2953	c8		iny				iny 								; consume final token.
.2954	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2955					ScanProcedures:
.2955	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.2957	48		pha				pha
.2958	a5 19		lda $19				lda 	codePtr+1
.295a	48		pha				pha
.295b	5a		phy				phy
.295c	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; back to the program start
.295f	85 19		sta $19				sta 	codePtr+1
.2961	64 18		stz $18				stz 	codePtr
.2963					_SPLoop:
.2963	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2965	f0 18		beq $297f			beq 	_SPExit
.2967	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2969	b1 18		lda ($18),y			lda 	(codePtr),y
.296b	c9 88		cmp #$88			cmp 	#PR_PROC
.296d	d0 03		bne $2972			bne 	_SPNext
.296f	20 87 29	jsr $2987			jsr 	_SPSetupRecord
.2972					_SPNext:
.2972	18		clc				clc 								; forward to next
.2973	b2 18		lda ($18)			lda 	(codePtr)
.2975	65 18		adc $18				adc 	codePtr
.2977	85 18		sta $18				sta 	codePtr
.2979	90 e8		bcc $2963			bcc 	_SPLoop
.297b	e6 19		inc $19				inc 	codePtr+1
.297d	80 e4		bra $2963			bra 	_SPLoop
.297f					_SPExit:
.297f	7a		ply				ply
.2980	68		pla				pla
.2981	85 19		sta $19				sta 	codePtr+1
.2983	68		pla				pla
.2984	85 18		sta $18				sta 	codePtr
.2986	60		rts				rts
.2987					_SPSetupRecord:
.2987	c8		iny				iny 								; check identifier follows
.2988	b1 18		lda ($18),y			lda 	(codePtr),y
.298a	29 c0		and #$c0			and 	#$C0
.298c	c9 40		cmp #$40			cmp 	#$40
.298e	d0 27		bne $29b7			bne 	_SPSyntax
.2990	20 b5 2f	jsr $2fb5			jsr 	VARGetInfo 					; get the information
.2993	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen 				; check right bracket follows.
.2996	20 67 2f	jsr $2f67			jsr 	VARFind 					; already exists ?
.2999	b0 1f		bcs $29ba			bcs 	_SPUsed 					; error !
.299b	20 13 2f	jsr $2f13			jsr 	VARCreate 					; create, XA points to the data.
.299e	85 24		sta $24				sta 	zTemp0
.29a0	86 25		stx $25				stx 	zTemp0+1
.29a2	5a		phy				phy 								; save Y pos on stack
.29a3	a0 01		ldy #$01			ldy 	#1
.29a5	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.29a7	92 24		sta ($24)			sta 	(zTemp0)
.29a9	a5 19		lda $19				lda 	codePtr+1
.29ab	91 24		sta ($24),y			sta 	(zTemp0),y
.29ad	c8		iny				iny
.29ae	68		pla				pla
.29af	91 24		sta ($24),y			sta 	(zTemp0),y
.29b1	c8		iny				iny
.29b2	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.29b4	91 24		sta ($24),y			sta 	(zTemp0),y
.29b6	60		rts				rts
.29b7					_SPSyntax:
.29b7	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.29ba					_SPUsed:
.29ba	4c 41 2b	jmp $2b41		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.29bd					Command_WHILE:
.29bd	5a		phy				phy 								; save position of the test
.29be	20 f5 19	jsr $19f5			jsr 	EXPEvalNumber 				; work out the while test.
.29c1	a2 08		ldx #$08			ldx 	#IFR0
.29c3	20 6b 36	jsr $366b			jsr 	IFloatCheckZero 			; check if zero
.29c6	f0 0e		beq $29d6			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.29c8	98		tya				tya 								; position *after* test.
.29c9	7a		ply				ply 								; restore position before test, at WHILE
.29ca	88		dey				dey 								; so we execute the WHILE command again.
.29cb	48		pha				pha 								; push after test on the stack
.29cc	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.29ce	20 ee 2b	jsr $2bee			jsr 	StackOpen
.29d1	20 21 2c	jsr $2c21			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.29d4	7a		ply				ply 								; restore the position *after* the test
.29d5	60		rts				rts
.29d6					_WHExitLoop:
.29d6	68		pla				pla 								; throw post loop position
.29d7	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.29d9	aa		tax				tax
.29da	20 fa 28	jsr $28fa			jsr 	ScanForward
.29dd	60		rts				rts
.29de					Command_WEND:
.29de	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.29e0	20 19 2c	jsr $2c19			jsr 	StackCheckFrame
.29e3	20 33 2c	jsr $2c33			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.29e6	20 0b 2c	jsr $2c0b			jsr 	StackClose		 			; erase the frame
.29e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.29ea					ErrorV_syntax:
.29ea	20 03 2e	jsr $2e03		jsr	ErrorHandler
>29ed	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>29f5	45 72 72 6f 72 00
.29fb					ErrorV_range:
.29fb	20 03 2e	jsr $2e03		jsr	ErrorHandler
>29fe	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2a06	52 61 6e 67 65 00
.2a0c					ErrorV_value:
.2a0c	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2a0f	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2a17	75 65 00
.2a1a					ErrorV_type:
.2a1a	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2a1d	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2a25	73 6d 61 74 63 68 00
.2a2c					ErrorV_unimplemented:
.2a2c	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2a2f	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2a37	6c 65 6d 65 6e 74 65 64 00
.2a40					ErrorV_assert:
.2a40	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2a43	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2a4b	46 61 69 6c 00
.2a50					ErrorV_internal:
.2a50	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2a53	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2a5b	6c 20 45 72 72 6f 72 00
.2a63					ErrorV_divzero:
.2a63	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2a66	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2a6e	42 79 20 5a 65 72 6f 00
.2a76					ErrorV_structure:
.2a76	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2a79	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2a81	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2a8e					ErrorV_stop:
.2a8e	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2a91	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2a99	20 53 74 6f 70 70 65 64 00
.2aa2					ErrorV_data:
.2aa2	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2aa5	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2aad	44 61 74 61 00
.2ab2					ErrorV_redefine:
.2ab2	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2ab5	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2abd	65 64 65 66 69 6e 65 64 00
.2ac6					ErrorV_index:
.2ac6	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2ac9	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2ad1	61 79 20 49 6e 64 65 78 00
.2ada					ErrorV_memory:
.2ada	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2add	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2ae5	4d 65 6d 6f 72 79 00
.2aec					ErrorV_uninitialised:
.2aec	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2aef	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2af7	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2b07					ErrorV_string:
.2b07	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2b0a	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2b12	69 6e 67 20 4c 65 6e 67 74 68 00
.2b1d					ErrorV_variable:
.2b1d	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2b20	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2b28	65 20 4d 69 73 73 69 6e 67 00
.2b32					ErrorV_stack:
.2b32	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2b35	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2b3d	75 6c 6c 00
.2b41					ErrorV_dupproc:
.2b41	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2b44	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2b4c	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2b5c	65 64 00
.2b5f					ErrorV_unknown:
.2b5f	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2b62	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2b6a	20 50 72 6f 63 65 64 75 72 65 00
.2b75					ErrorV_break:
.2b75	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2b78	05 42 72 65 61 6b 00			.text	5,"Break",0
.2b7f					ErrorV_line:
.2b7f	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2b82	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2b8a	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.2b97					ErrorV_fnf:
.2b97	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2b9a	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>2ba2	74 20 46 6f 75 6e 64 00
.2baa					ErrorV_full:
.2baa	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2bad	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>2bb5	20 46 75 6c 6c 00
.2bbb					ErrorV_align:
.2bbb	20 03 2e	jsr $2e03		jsr	ErrorHandler
>2bbe	0d 4c 61 62 65 6c 20 43			.text	13,"Label Changed",0
>2bc6	68 61 6e 67 65 64 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2bcd					ERRCheckLParen:
.2bcd	b1 18		lda ($18),y			lda 	(codePtr),y
.2bcf	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2bd1	d0 18		bne $2beb			bne 	ERRSyntaxError
.2bd3	c8		iny				iny
.2bd4	60		rts				rts
.2bd5					ERRCheckRParen:
.2bd5	b1 18		lda ($18),y			lda 	(codePtr),y
.2bd7	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2bd9	d0 10		bne $2beb			bne 	ERRSyntaxError
.2bdb	c8		iny				iny
.2bdc	60		rts				rts
.2bdd					ERRCheckComma:
.2bdd	b1 18		lda ($18),y			lda 	(codePtr),y
.2bdf	c9 99		cmp #$99			cmp 	#PR_COMMA
.2be1	d0 08		bne $2beb			bne 	ERRSyntaxError
.2be3	c8		iny				iny
.2be4	60		rts				rts
.2be5					ERRCheckA:
.2be5	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2be7	d0 02		bne $2beb			bne 	ERRSyntaxError
.2be9	c8		iny				iny
.2bea	60		rts				rts
.2beb					ERRSyntaxError:
.2beb	4c ea 29	jmp $29ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2bee					StackOpen:
.2bee	48		pha				pha 								; save frame byte
.2bef	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.2bf1	0a		asl a				asl 	a 							; claim twice this for storage
.2bf2	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2bf4	38		sec				sec 								; so basically subtracting from
.2bf5	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.2bf7	85 2c		sta $2c				sta 	basicStack
.2bf9	b0 09		bcs $2c04			bcs 	_SONoBorrow
.2bfb	c6 2d		dec $2d				dec 	basicStack+1
.2bfd	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.2bff	cd 24 06	cmp $0624			cmp 	basicStackEnd
.2c02	f0 04		beq $2c08			beq 	_SOMemory
.2c04					_SONoBorrow:
.2c04	68		pla				pla 								; get marker back and write at TOS
.2c05	92 2c		sta ($2c)			sta 	(basicStack)
.2c07	60		rts				rts
.2c08					_SOMemory:
.2c08	4c 32 2b	jmp $2b32		jmp	ErrorV_stack
.2c0b					StackClose:
.2c0b	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2c0d	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2c0f	0a		asl a				asl 	a 							; claim twice this.
.2c10	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.2c12	85 2c		sta $2c				sta 	basicStack
.2c14	90 02		bcc $2c18			bcc 	_SCExit
.2c16	e6 2d		inc $2d				inc 	basicStack+1
.2c18					_SCExit:
.2c18	60		rts				rts
.2c19					StackCheckFrame:
.2c19	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2c1b	d0 01		bne $2c1e			bne 	_SCFError 					; different, we have structures mixed up
.2c1d	60		rts				rts
.2c1e					_SCFError:
.2c1e	4c 76 2a	jmp $2a76		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2c21					STKSaveCodePosition:
.2c21	5a		phy				phy
.2c22	98		tya				tya 								; save Y at offset 1.
.2c23	a0 01		ldy #$01			ldy 	#1
.2c25	91 2c		sta ($2c),y			sta 	(basicStack),y
.2c27	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2c29	c8		iny				iny
.2c2a	91 2c		sta ($2c),y			sta 	(basicStack),y
.2c2c	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2c2e	c8		iny				iny
.2c2f	91 2c		sta ($2c),y			sta 	(basicStack),y
.2c31	7a		ply				ply
.2c32	60		rts				rts
.2c33					STKLoadCodePosition:
.2c33	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2c35	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2c37	85 19		sta $19				sta 	codePtr+1
.2c39	88		dey				dey
.2c3a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2c3c	85 18		sta $18				sta 	codePtr
.2c3e	88		dey				dey
.2c3f	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.2c41	a8		tay				tay
.2c42	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2c43					StackReset:
.2c43	48		pha				pha 								; save top of memory
.2c44	3a		dec a				dec 	a  							; end of stack = previous byte
.2c45	85 2d		sta $2d				sta 	basicStack+1
.2c47	a9 ff		lda #$ff			lda 	#$FF
.2c49	85 2c		sta $2c				sta 	basicStack
.2c4b	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2c4d	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2c4f	68		pla				pla 								; allocate pages for stack.
.2c50	38		sec				sec
.2c51	e9 02		sbc #$02			sbc 	#STACKPAGES
.2c53	8d 24 06	sta $0624			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2c56	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0624					basicStackEnd:
>0624							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2c57					StringConcrete:
.2c57	5a		phy				phy 								; save position on stack
.2c58	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2c5a	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2c5c	b0 41		bcs $2c9f			bcs 	_SALengthError
.2c5e	18		clc				clc 								; length of the new string
.2c5f	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2c61	90 02		bcc $2c65			bcc 	_SAHaveLength
.2c63	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2c65					_SAHaveLength:
.2c65	48		pha				pha 								; save length to be allocated for concreting.
.2c66	38		sec				sec
.2c67	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2c69	6d 26 06	adc $0626			adc 	stringMemory
.2c6c	8d 26 06	sta $0626			sta 	stringMemory
.2c6f	85 28		sta $28				sta 	zTemp2 						; update storage address
.2c71	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2c73	6d 27 06	adc $0627			adc 	stringMemory+1
.2c76	8d 27 06	sta $0627			sta 	stringMemory+1
.2c79	85 29		sta $29				sta 	zTemp2+1
.2c7b	68		pla				pla 								; save length allocated in +0
.2c7c	92 28		sta ($28)			sta 	(zTemp2)
.2c7e	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2c80	a0 01		ldy #$01			ldy 	#1
.2c82	91 28		sta ($28),y			sta 	(zTemp2),y
.2c84					_SACopyNewString:
.2c84	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2c86	a0 02		ldy #$02			ldy 	#2
.2c88	91 28		sta ($28),y			sta 	(zTemp2),y
.2c8a	aa		tax				tax 								; bytes to copy
.2c8b	f0 0c		beq $2c99			beq 	_SACopyExit
.2c8d	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2c8f					_SACopyNSLoop:
.2c8f	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2c91	c8		iny				iny 								; write two on in string storage
.2c92	c8		iny				iny
.2c93	91 28		sta ($28),y			sta 	(zTemp2),y
.2c95	88		dey				dey
.2c96	ca		dex				dex									; until copied all the string lengths.
.2c97	d0 f6		bne $2c8f			bne 	_SACopyNSLoop
.2c99					_SACopyExit:
.2c99	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2c9b	a5 28		lda $28				lda 	zTemp2
.2c9d	7a		ply				ply
.2c9e	60		rts				rts
.2c9f					_SALengthError:
.2c9f	4c 07 2b	jmp $2b07		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2ca2					StringSystemInitialise:
.2ca2	3a		dec a				dec 	a 							; make last byte of previous page.
.2ca3	8d 27 06	sta $0627			sta 	stringMemory+1
.2ca6	85 25		sta $25				sta 	zTemp0+1
.2ca8	a9 ff		lda #$ff			lda 	#$FF
.2caa	8d 26 06	sta $0626			sta 	stringMemory
.2cad	85 24		sta $24				sta 	zTemp0
.2caf	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2cb1	92 24		sta ($24)			sta 	(zTemp0)
.2cb3	60		rts				rts
.2cb4					StringSpaceInitialise:
.2cb4	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2cb6	8d 25 06	sta $0625			sta 	stringInitialised
.2cb9	ad 26 06	lda $0626			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2cbc	8d 28 06	sta $0628			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2cbf	ad 27 06	lda $0627			lda 	stringMemory+1
.2cc2	3a		dec a				dec 	a
.2cc3	8d 29 06	sta $0629			sta 	stringTempPointer+1
.2cc6	20 28 13	jsr $1328			jsr 	ClearCheckMemory
.2cc9	60		rts				rts
.2cca					StringTempAllocate:
.2cca	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2ccc	b0 2e		bcs $2cfc			bcs 	_STALength
.2cce	2c 25 06	bit $0625			bit 	stringInitialised 			; already initialised
.2cd1	30 05		bmi $2cd8			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.2cd3	48		pha				pha 								; save value to subtract.
.2cd4	20 b4 2c	jsr $2cb4			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2cd7	68		pla				pla 								; restore it
.2cd8					_STAAllocate:
.2cd8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2cda	18		clc				clc  								; deliberate allows one more
.2cdb	6d 28 06	adc $0628			adc 	stringTempPointer 			; subtract from temp pointer
.2cde	8d 28 06	sta $0628			sta 	stringTempPointer
.2ce1	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2ce3	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2ce5	ad 29 06	lda $0629			lda 	stringTempPointer+1
.2ce8	69 ff		adc #$ff			adc 	#$FF
.2cea	8d 29 06	sta $0629			sta 	stringTempPointer+1
.2ced	85 2f		sta $2f				sta 	zsTemp+1
.2cef	85 09		sta $09				sta 	IFR0+IM1
.2cf1	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2cf3	a9 80		lda #$80			lda 	#$80
.2cf5	85 0b		sta $0b				sta 	IFR0+IExp
.2cf7	a9 00		lda #$00			lda 	#0 							; clear the target string
.2cf9	92 2e		sta ($2e)			sta 	(zsTemp)
.2cfb	60		rts				rts
.2cfc					_STALength:
.2cfc	4c 07 2b	jmp $2b07		jmp	ErrorV_string
.2cff					StringTempWrite:
.2cff	5a		phy				phy
.2d00	48		pha				pha
.2d01	b2 2e		lda ($2e)			lda 	(zsTemp)
.2d03	1a		inc a				inc 	a
.2d04	92 2e		sta ($2e)			sta 	(zsTemp)
.2d06	a8		tay				tay
.2d07	68		pla				pla
.2d08	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2d0a	7a		ply				ply
.2d0b	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0625					stringInitialised:
>0625							.fill 	1
.0626					stringMemory:
>0626							.fill 	2
.0628					stringTempPointer:
>0628							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2d0c					Command_DIR:
.2d0c	5a		phy				phy
.2d0d	38		sec				sec 								; reset read
.2d0e	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2d11	18		clc		_CDLoop:clc
.2d12	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2d15	b0 27		bcs $2d3e			bcs 	_CDExit 					; no more
.2d17	86 24		stx $24				stx 	zTemp0
.2d19	84 25		sty $25				sty 	zTemp0+1
.2d1b	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2d1e					_CDPad:
.2d1e	a9 20		lda #$20			lda 	#32
.2d20	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2d23	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2d26	e0 10		cpx #$10			cpx 	#16
.2d28	90 f4		bcc $2d1e			bcc 	_CDPad
.2d2a	a0 11		ldy #$11			ldy 	#17
.2d2c	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d2e	aa		tax				tax
.2d2f	88		dey				dey
.2d30	b1 24		lda ($24),y			lda 	(zTemp0),y
.2d32	20 2c 2e	jsr $2e2c			jsr 	WriteIntXA
.2d35	a2 40		ldx #$40			ldx 	#_CDTail & $FF
.2d37	a0 2d		ldy #$2d			ldy 	#_CDTail >> 8
.2d39	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2d3c	80 d3		bra $2d11			bra 	_CDLoop
.2d3e	7a		ply		_CDExit:ply
.2d3f	60		rts				rts
.2d40					_CDTail:
>2d40	08						.byte 	_CDTail2-*-1
>2d41	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2d49					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2d49					Command_ERASE:
.2d49	20 5b 2d	jsr $2d5b			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2d4c	5a		phy				phy
.2d4d	a2 2a		ldx #$2a			ldx 	#FSBBlock & $FF
.2d4f	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2d51	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2d54	7a		ply				ply
.2d55	b0 01		bcs $2d58			bcs 	_CEFail
.2d57	60		rts				rts
.2d58					_CEFail:
.2d58	4c 97 2b	jmp $2b97		jmp	ErrorV_fnf
.2d5b					FileSetupBlock:
.2d5b	20 1f 1a	jsr $1a1f			jsr 	EXPEvalString 					; string to R0, zTemp0
.2d5e	a5 24		lda $24				lda 	zTemp0 							; address to name
.2d60	8d 2a 06	sta $062a			sta 	FSBBlock
.2d63	a5 25		lda $25				lda 	zTemp0+1
.2d65	8d 2b 06	sta $062b			sta 	FSBBlock+1 						; zero the rest.
.2d68	9c 2c 06	stz $062c			stz 	FSBBlock+2
.2d6b	9c 2d 06	stz $062d			stz 	FSBBlock+3
.2d6e	9c 2e 06	stz $062e			stz 	FSBBlock+4
.2d71	9c 2f 06	stz $062f			stz 	FSBBlock+5
.2d74	60		rts				rts
.062a					FSBBlock:
>062a							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2d75					Command_LOAD:
.2d75	20 5b 2d	jsr $2d5b			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2d78	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; set load address
.2d7b	8d 2d 06	sta $062d			sta 	FSBBlock+3
.2d7e	9c 2c 06	stz $062c			stz 	FSBBlock+2
.2d81	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2d83	48		pha				pha
.2d84	20 a1 2d	jsr $2da1			jsr	 	FileCheckSecondParam
.2d87	5a		phy				phy
.2d88	a2 2a		ldx #$2a			ldx 	#FSBBlock & $FF
.2d8a	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2d8c	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2d8f	7a		ply				ply
.2d90	b0 0c		bcs $2d9e			bcs 	_CLFail
.2d92	68		pla				pla 								; load program
.2d93	c9 99		cmp #$99			cmp 	#PR_COMMA
.2d95	f0 06		beq $2d9d			beq 	_CLNoClear
.2d97	20 e2 12	jsr $12e2			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2d9a	4c 4b 2e	jmp $2e4b			jmp 	WarmStart 					; and warm start
.2d9d					_CLNoClear:
.2d9d	60		rts				rts
.2d9e					_CLFail:
.2d9e	4c 97 2b	jmp $2b97		jmp	ErrorV_fnf
.2da1					FileCheckSecondParam:
.2da1	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2da3	c9 99		cmp #$99			cmp 	#PR_COMMA
.2da5	d0 0e		bne $2db5			bne 	_FCSPExit
.2da7	c8		iny				iny 								; consume
.2da8	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; get address
.2dab	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2dad	8d 2c 06	sta $062c			sta 	FSBBlock+2
.2db0	a5 09		lda $09				lda 	IFR0+IM1
.2db2	8d 2d 06	sta $062d			sta 	FSBBlock+3
.2db5					_FCSPExit:
.2db5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2db6					Command_SAVE:
.2db6	20 5b 2d	jsr $2d5b			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2db9	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2dbb	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2dbd	f0 22		beq $2de1			beq 	_CLSaveBlock 				; save "Name",from,size
.2dbf	ad 1e 05	lda $051e			lda 	PGMBaseHigh 				; set load address
.2dc2	8d 2d 06	sta $062d			sta 	FSBBlock+3
.2dc5	9c 2c 06	stz $062c			stz 	FSBBlock+2
.2dc8	20 b9 23	jsr $23b9			jsr		PGMEndProgram 				; end of program -> zTemp0
.2dcb	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2dcd	d0 02		bne $2dd1			bne 	_CLNoCarry
.2dcf	e6 25		inc $25				inc 	zTemp0+1
.2dd1					_CLNoCarry:
.2dd1	a5 24		lda $24				lda 	zTemp0
.2dd3	8d 2e 06	sta $062e			sta 	FSBBlock+4
.2dd6	38		sec				sec
.2dd7	a5 25		lda $25				lda 	zTemp0+1
.2dd9	ed 2d 06	sbc $062d			sbc 	FSBBlock+3
.2ddc	8d 2f 06	sta $062f			sta 	FSBBlock+5
.2ddf	80 13		bra $2df4			bra 	_CSSave
.2de1					_CLSaveBlock:
.2de1	20 a1 2d	jsr $2da1			jsr 	FileCheckSecondParam 		; the address to save from.
.2de4	20 dd 2b	jsr $2bdd			jsr 	ERRCheckComma
.2de7	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; get size
.2dea	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2dec	8d 2e 06	sta $062e			sta 	FSBBlock+4
.2def	a5 09		lda $09				lda 	IFR0+IM1
.2df1	8d 2f 06	sta $062f			sta 	FSBBlock+5
.2df4					_CSSave:
.2df4	5a		phy				phy
.2df5	a2 2a		ldx #$2a			ldx 	#FSBBlock & $FF
.2df7	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2df9	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2dfc	7a		ply				ply
.2dfd	b0 01		bcs $2e00			bcs 	_CSFail
.2dff	60		rts				rts
.2e00					_CSFail:
.2e00	4c aa 2b	jmp $2baa		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2e03					ErrorHandler:
.2e03	fa		plx				plx 								; get address of msg
.2e04	7a		ply				ply
.2e05	e8		inx				inx 								; bump past RTS
.2e06	d0 01		bne $2e09			bne 	_EHNoInc
.2e08	c8		iny				iny
.2e09					_EHNoInc:
.2e09	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2e0c	ad 30 06	lda $0630			lda 	ERRLine 					; direct command ?
.2e0f	0d 31 06	ora $0631			ora 	ERRLine+1
.2e12	f0 10		beq $2e24			beq 	_EHNoNumber
.2e14	a2 27		ldx #$27			ldx 	#_EHAtMsg & $FF
.2e16	a0 2e		ldy #$2e			ldy 	#_EHAtMsg >> 8
.2e18	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2e1b	ad 30 06	lda $0630			lda 	ERRLine 					; line number -> XA
.2e1e	ae 31 06	ldx $0631			ldx 	ERRLine+1
.2e21	20 2c 2e	jsr $2e2c			jsr 	WriteIntXA
.2e24					_EHNoNumber:
.2e24	4c 55 2e	jmp $2e55			jmp 	WarmStartNewLine
.2e27					_EHAtMsg:
>2e27	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2e2c					_EHAtMsg1:
.2e2c					WriteIntXA:
.2e2c	da		phx				phx
.2e2d	48		pha				pha
.2e2e	a2 08		ldx #$08			ldx 	#IFR0
.2e30	20 c1 35	jsr $35c1			jsr 	IFloatPushRx
.2e33	68		pla				pla
.2e34	20 74 36	jsr $3674			jsr 	IFloatSetByte
.2e37	68		pla				pla
.2e38	85 09		sta $09				sta 	IFR0+IM1
.2e3a	a9 0a		lda #$0a			lda 	#10 						; decimal
.2e3c	20 14 34	jsr $3414			jsr 	IFloatIntegerToStringR0	 	; convert
.2e3f	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2e42	a2 08		ldx #$08			ldx 	#IFR0
.2e44	20 e2 35	jsr $35e2			jsr 	IFloatPullRx
.2e47	60		rts				rts
.2e48					NotImplemented:
.2e48	4c 2c 2a	jmp $2a2c		jmp	ErrorV_unimplemented
.0630					ERRLine:
>0630							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2e4b					WarmStart:
.2e4b	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2e4d	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2e50	a9 6b		lda #$6b			lda 	#"k"
.2e52	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2e55					WarmStartNewLine:
.2e55	a9 0d		lda #$0d			lda 	#13
.2e57	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2e5a					WarmStartNoPrompt:
.2e5a	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2e5c	9a		txs				txs
.2e5d	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2e60	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2e61	d0 01		bne $2e64			bne 	_WSSkip
.2e63	c8		iny				iny
.2e64					_WSSkip:
.2e64	86 28		stx $28				stx 	zTemp2 						; save address
.2e66	84 29		sty $29				sty 	zTemp2+1
.2e68	b2 28		lda ($28)			lda 	(zTemp2)
.2e6a	f0 ee		beq $2e5a			beq 	WarmStartNoPrompt 			; ignore empty line.
.2e6c	a2 9e		ldx #$9e			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2e6e	a0 2e		ldy #$2e			ldy 	#TOKGetCharacter >> 8
.2e70	38		sec				sec
.2e71	20 2b 24	jsr $242b			jsr 	TOKTokenise
.2e74	b0 25		bcs $2e9b			bcs 	_WSSyntax
.2e76	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2e79	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2e7c	d0 0b		bne $2e89			bne 	_WSLineEdit
.2e7e	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2e80	85 18		sta $18				sta 	codePtr
.2e82	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2e84	85 19		sta $19				sta 	codePtr+1
.2e86	4c c1 17	jmp $17c1			jmp 	RUNNewLine
.2e89					_WSLineEdit:
.2e89	20 06 23	jsr $2306			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2e8c	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2e8f	c9 04		cmp #$04			cmp 	#4
.2e91	f0 03		beq $2e96			beq 	_WSNoInsert
.2e93	20 50 23	jsr $2350			jsr 	PGMInsertLine				; if not, maybe insert
.2e96					_WSNoInsert:
.2e96	20 e2 12	jsr $12e2			jsr 	ClearCode 					; clear variables etc.
.2e99	80 bf		bra $2e5a			bra 	WarmStartNoPrompt
.2e9b					_WSSyntax:
.2e9b	4c ea 29	jmp $29ea		jmp	ErrorV_syntax
.2e9e					TOKGetCharacter:
.2e9e	b2 28		lda ($28)			lda 	(zTemp2)
.2ea0	90 06		bcc $2ea8			bcc 	_GSNoIncrement
.2ea2	e6 28		inc $28				inc 	zTemp2
.2ea4	d0 02		bne $2ea8			bne 	_GSNoIncrement
.2ea6	e6 29		inc $29				inc 	zTemp2+1
.2ea8					_GSNoIncrement:
.2ea8	c9 00		cmp #$00			cmp 	#0
.2eaa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2eab					VARArrayLookup:
.2eab	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2ead	86 25		stx $25				stx 	zTemp0+1
.2eaf	b2 24		lda ($24)			lda 	(zTemp0)
.2eb1	48		pha				pha
.2eb2	5a		phy				phy
.2eb3	a0 01		ldy #$01			ldy 	#1
.2eb5	b1 24		lda ($24),y			lda 	(zTemp0),y
.2eb7	7a		ply				ply
.2eb8	48		pha				pha
.2eb9	20 07 1a	jsr $1a07			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2ebc	68		pla				pla 								; array address to zTemp0
.2ebd	85 25		sta $25				sta 	zTemp0+1
.2ebf	68		pla				pla
.2ec0	85 24		sta $24				sta 	zTemp0
.2ec2	5a		phy				phy 								; save codePtr position.
.2ec3	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2ec5	b1 24		lda ($24),y			lda 	(zTemp0),y
.2ec7	48		pha				pha 								; save bit 15 on stack.
.2ec8	29 7f		and #$7f			and 	#$7F
.2eca	85 26		sta $26				sta 	zTemp1
.2ecc	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2ece	d2 24		cmp ($24)			cmp 	(zTemp0)
.2ed0	a5 09		lda $09				lda 	IFR0+IM1
.2ed2	e5 26		sbc $26				sbc 	zTemp1
.2ed4	b0 3a		bcs $2f10			bcs 	_VALIndex
.2ed6	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2ed8	c9 40		cmp #$40			cmp 	#$40
.2eda	b0 34		bcs $2f10			bcs 	_VALIndex
.2edc	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2ede	26 09		rol $09				rol 	IFR0+IM1
.2ee0	fa		plx				plx 								; get msb of size -> X
.2ee1	30 04		bmi $2ee7			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2ee3	06 08		asl $08				asl 	IFR0+IM0
.2ee5	26 09		rol $09				rol 	IFR0+IM1
.2ee7					_VARNotX4:
.2ee7	18		clc				clc 								; add the two for the size bytes
.2ee8	a5 08		lda $08				lda 	IFR0+IM0
.2eea	69 02		adc #$02			adc 	#2
.2eec	85 08		sta $08				sta 	IFR0+IM0
.2eee	90 02		bcc $2ef2			bcc 	_VARNoCarry1
.2ef0	e6 09		inc $09				inc 	IFR0+IM1
.2ef2					_VARNoCarry1:
.2ef2	18		clc				clc 								; calculate the element address and push to stack.
.2ef3	a5 08		lda $08				lda 	IFR0+IM0
.2ef5	65 24		adc $24				adc 	zTemp0
.2ef7	48		pha				pha
.2ef8	a5 09		lda $09				lda 	IFR0+IM1
.2efa	65 25		adc $25				adc 	zTemp0+1
.2efc	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2efe	30 04		bmi $2f04			bmi 	_VARHasSubLevel
.2f00	aa		tax				tax 								; address in XA
.2f01	68		pla				pla
.2f02	7a		ply				ply 								; restore Y and exit
.2f03	60		rts				rts
.2f04					_VARHasSubLevel:
.2f04	aa		tax				tax 								; get link address in XA
.2f05	68		pla				pla
.2f06	7a		ply				ply 								; restore code position.
.2f07	48		pha				pha
.2f08	20 dd 2b	jsr $2bdd			jsr 	ERRCheckComma 				; comma required.
.2f0b	68		pla				pla
.2f0c	20 ab 2e	jsr $2eab			jsr 	VARArrayLookup 				; call it recursively
.2f0f	60		rts				rts
.2f10					_VALIndex:
.2f10	4c c6 2a	jmp $2ac6		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2f13					VARCreate:
.2f13	5a		phy				phy
.2f14	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2f16	a2 00		ldx #$00			ldx 	#0
.2f18	20 ff 12	jsr $12ff			jsr 	AllocateMemory
.2f1b	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2f1d	86 27		stx $27				stx 	zTemp1+1
.2f1f	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2f21	ad 34 06	lda $0634			lda 	VARHash
.2f24	91 26		sta ($26),y			sta 	(zTemp1),y
.2f26	c8		iny				iny 								; put address of name into +3,+4
.2f27	ad 32 06	lda $0632			lda 	VARNameAddress
.2f2a	91 26		sta ($26),y			sta 	(zTemp1),y
.2f2c	c8		iny				iny
.2f2d	ad 33 06	lda $0633			lda 	VARNameAddress+1
.2f30	91 26		sta ($26),y			sta 	(zTemp1),y
.2f32	ad 35 06	lda $0635			lda 	VARType
.2f35	29 01		and #$01			and 	#1
.2f37	f0 06		beq $2f3f			beq 	_CVNotString
.2f39	a0 08		ldy #$08			ldy 	#5+3
.2f3b	a9 80		lda #$80			lda 	#$80
.2f3d	91 26		sta ($26),y			sta 	(zTemp1),y
.2f3f					_CVNotString:
.2f3f	ad 56 06	lda $0656			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2f42	85 24		sta $24				sta 	zTemp0
.2f44	ad 57 06	lda $0657			lda 	VARHashEntry+1
.2f47	85 25		sta $25				sta 	zTemp0+1
.2f49	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2f4b	b2 24		lda ($24)			lda 	(zTemp0)
.2f4d	92 26		sta ($26)			sta 	(zTemp1)
.2f4f	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f51	91 26		sta ($26),y			sta 	(zTemp1),y
.2f53	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2f55	92 24		sta ($24)			sta 	(zTemp0)
.2f57	a5 27		lda $27				lda 	zTemp1+1
.2f59	91 24		sta ($24),y			sta 	(zTemp0),y
.2f5b	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2f5d	a6 27		ldx $27				ldx 	zTemp1+1
.2f5f	18		clc				clc 								; add 5 to point to the data.
.2f60	69 05		adc #$05			adc 	#5
.2f62	90 01		bcc $2f65			bcc 	_VCNoCarry
.2f64	e8		inx				inx
.2f65					_VCNoCarry:
.2f65	7a		ply				ply
.2f66	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2f67					VARFind:
.2f67	5a		phy				phy
.2f68	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2f6a	b1 24		lda ($24),y			lda 	(zTemp0),y
.2f6c	85 27		sta $27				sta 	zTemp1+1
.2f6e	f0 1c		beq $2f8c			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2f70	b2 24		lda ($24)			lda 	(zTemp0)
.2f72	85 26		sta $26				sta 	zTemp1
.2f74					_VFLoop:
.2f74	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2f76	b1 26		lda ($26),y			lda 	(zTemp1),y
.2f78	cd 34 06	cmp $0634			cmp 	VARHash
.2f7b	f0 12		beq $2f8f			beq 	_VFHashesMatch 				; if so, check the name.
.2f7d					_VFNext:
.2f7d	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2f7f	aa		tax				tax
.2f80	a0 01		ldy #$01			ldy 	#1
.2f82	b1 26		lda ($26),y			lda 	(zTemp1),y
.2f84	85 27		sta $27				sta 	zTemp1+1
.2f86	86 26		stx $26				stx 	zTemp1
.2f88	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2f8a	d0 e8		bne $2f74			bne 	_VFLoop
.2f8c					_VFExitFail:
.2f8c	7a		ply				ply
.2f8d	18		clc				clc
.2f8e	60		rts				rts
.2f8f					_VFHashesMatch:
.2f8f	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2f91	b1 26		lda ($26),y			lda 	(zTemp1),y
.2f93	85 28		sta $28				sta 	zTemp2
.2f95	c8		iny				iny
.2f96	b1 26		lda ($26),y			lda 	(zTemp1),y
.2f98	85 29		sta $29				sta 	zTemp2+1
.2f9a	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2f9c					_VFNameCompLoop:
.2f9c	c8		iny				iny 								; char at a time
.2f9d	b9 36 06	lda $0636,y			lda 	VARBuffer,y
.2fa0	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2fa2	d0 d9		bne $2f7d			bne 	_VFNext						; next entry if different.
.2fa4	c9 7c		cmp #$7c			cmp 	#$7C
.2fa6	90 f4		bcc $2f9c			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2fa8	18		clc				clc
.2fa9	a5 26		lda $26				lda 	zTemp1
.2fab	a6 27		ldx $27				ldx 	zTemp1+1
.2fad	69 05		adc #$05			adc 	#5
.2faf	90 01		bcc $2fb2			bcc 	_VFNNoCarry
.2fb1	e8		inx				inx
.2fb2					_VFNNoCarry:
.2fb2	7a		ply				ply
.2fb3	38		sec				sec
.2fb4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2fb5					VARGetInfo:
.2fb5	98		tya				tya 								; calculate the address of the identifier start.
.2fb6	18		clc				clc
.2fb7	65 18		adc $18				adc 	codePtr
.2fb9	8d 32 06	sta $0632			sta 	VARNameAddress
.2fbc	a5 19		lda $19				lda 	codePtr+1
.2fbe	69 00		adc #$00			adc 	#0
.2fc0	8d 33 06	sta $0633			sta 	VARNameAddress+1
.2fc3	9c 34 06	stz $0634			stz 	VARHash
.2fc6	a2 00		ldx #$00			ldx 	#0
.2fc8					_VARCopyName:
.2fc8	18		clc				clc 								; update the sum hash.
.2fc9	ad 34 06	lda $0634			lda 	VARHash
.2fcc	71 18		adc ($18),y			adc 	(codePtr),y
.2fce	8d 34 06	sta $0634			sta 	VARHash
.2fd1	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2fd3	c8		iny				iny
.2fd4	9d 36 06	sta $0636,x			sta 	VARBuffer,x
.2fd7	e8		inx				inx
.2fd8	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2fda	90 ec		bcc $2fc8			bcc 	_VARCopyName
.2fdc	8d 35 06	sta $0635			sta 	VARType 					; save type byte
.2fdf	29 03		and #$03			and 	#3 							; type is 0-3
.2fe1	0a		asl a				asl 	a
.2fe2	0a		asl a				asl 	a
.2fe3	85 24		sta $24				sta 	zTemp0
.2fe5	ad 34 06	lda $0634			lda 	VARHash 					; force into range of hash entries per type.
.2fe8	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2fea	65 24		adc $24				adc 	zTemp0 						; index of hash table
.2fec	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2fed	69 58		adc #$58			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2fef	85 24		sta $24				sta 	zTemp0
.2ff1	8d 56 06	sta $0656			sta 	VARHashEntry
.2ff4	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2ff6	69 00		adc #$00			adc 	#0
.2ff8	85 25		sta $25				sta 	zTemp0+1
.2ffa	8d 57 06	sta $0657			sta 	VARHashEntry+1
.2ffd	60		rts				rts
.2ffe					VARClearHashTables:
.2ffe	a2 00		ldx #$00			ldx 	#0
.3000					_VCHRLoop:
.3000	a9 00		lda #$00			lda 	#0
.3002	9d 58 06	sta $0658,x			sta 	VARHashTables,x
.3005	e8		inx				inx
.3006	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.3008	d0 f6		bne $3000			bne 	_VCHRLoop
.300a	60		rts				rts
.0632					VARNameAddress:
>0632							.fill 	2
.0634					VARHash:
>0634							.fill 	1
.0635					VARType:
>0635							.fill 	1
.0636					VARBuffer:
>0636							.fill 	32
.0656					VARHashEntry:
>0656							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0658					VARHashTables:
>0658							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.300b					VARCheckSimple:
.300b	aa		tax				tax 								; save in X
.300c	b1 18		lda ($18),y			lda 	(codePtr),y
.300e	c9 7c		cmp #$7c			cmp 	#$7C
.3010	d0 15		bne $3027			bne 	_VCSComplex
.3012	c8		iny				iny 								; consume the second byte, the type.
.3013	8a		txa				txa  								; character (40-7F) x 4
.3014	0a		asl a				asl 	a
.3015	0a		asl a				asl  	a
.3016	18		clc				clc
.3017	69 78		adc #$78			adc 	#FastVariables & $FF
.3019	85 08		sta $08				sta 	IFR0+IM0
.301b	a9 06		lda #$06			lda 	#FastVariables >> 8
.301d	69 00		adc #$00			adc 	#0
.301f	85 09		sta $09				sta 	IFR0+IM1
.3021	64 0a		stz $0a				stz 	IFR0+IM2
.3023	64 0b		stz $0b				stz 	IFR0+IExp
.3025	38		sec				sec 								; it's a reference
.3026	60		rts				rts
.3027					_VCSComplex:
.3027	88		dey				dey	 								; extract information.
.3028	20 b5 2f	jsr $2fb5			jsr 	VARGetInfo
.302b	20 67 2f	jsr $2f67			jsr 	VARFind 					; search for variable
.302e	b0 0a		bcs $303a			bcs 	_VCSHaveVariable
.3030	ad 35 06	lda $0635			lda 	VARType 					; error if arrays, cannot autocreate
.3033	29 02		and #$02			and 	#2
.3035	d0 25		bne $305c			bne 	_VCNoCreate
.3037	20 13 2f	jsr $2f13			jsr 	VARCreate 					; create variable
.303a					_VCSHaveVariable:
.303a	48		pha				pha 								; save LSB on the stack
.303b	ad 35 06	lda $0635			lda 	VARType 					; get var type, and shift bit 1 into carry
.303e	6a		ror a				ror 	a
.303f	6a		ror a				ror 	a
.3040	68		pla				pla 								; restore LSB
.3041	90 08		bcc $304b			bcc 	_VCSNotArray 				; skip if not an array
.3043	20 ab 2e	jsr $2eab			jsr 	VARArrayLookup 				; look for subscripts.
.3046	48		pha				pha 								; check )
.3047	20 d5 2b	jsr $2bd5			jsr 	ERRCheckRParen
.304a	68		pla				pla
.304b					_VCSNotArray:
.304b	86 09		stx $09				stx 	IFR0+IM1 					; save address
.304d	85 08		sta $08				sta 	IFR0+IM0
.304f	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.3051	ad 35 06	lda $0635			lda 	VARType 					; number/string bit into carry
.3054	6a		ror a				ror 	a
.3055	a9 00		lda #$00			lda 	#0
.3057	6a		ror a				ror 	a 							; now $00 or $80
.3058	85 0b		sta $0b				sta 	IFR0+IExp
.305a	38		sec				sec 								; it's a reference
.305b	60		rts				rts
.305c					_VCNoCreate:
.305c	4c ec 2a	jmp $2aec		jmp	ErrorV_uninitialised
.0678					FastVariables:
>0678							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.305f					IFInitialise:
.305f	9c e8 06	stz $06e8			stz 	IFStackIndex 				; reset the internal stack.
.3062	60		rts				rts
.3063					IFloatSubtract:
.3063	da		phx				phx
.3064	a2 08		ldx #$08			ldx 	#IFR0
.3066	20 7d 36	jsr $367d			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.3069	fa		plx				plx
.306a					IFloatAdd:
.306a	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.306c	05 0b		ora $0b				ora 	IFR0+IExp
.306e	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.3070	d0 4e		bne $30c0			bne 	_IFloatAddDecimals 			; floating point version.
.3072					_IFAddSubMantissa:
.3072	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.3074	45 0b		eor $0b				eor 	IFR0+IExp
.3076	29 40		and #$40			and 	#IFSign
.3078	d0 21		bne $309b			bne 	_IFloatSubMantissa			; if so, we do a subtract
.307a	18		clc				clc 								; do the actual addition
.307b	a5 08		lda $08				lda 	IFR0+IM0
.307d	75 00		adc $00,x			adc 		IM0,x
.307f	85 08		sta $08				sta 	IFR0+IM0
.3081	a5 09		lda $09				lda 	IFR0+IM1
.3083	75 01		adc $01,x			adc 		IM1,x
.3085	85 09		sta $09				sta 	IFR0+IM1
.3087	a5 0a		lda $0a				lda 	IFR0+IM2
.3089	75 02		adc $02,x			adc 		IM2,x
.308b	85 0a		sta $0a				sta 	IFR0+IM2
.308d	10 29		bpl $30b8			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.308f	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.3091	20 a1 36	jsr $36a1			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.3094	20 cb 36	jsr $36cb			jsr 	IFloatIncExponent
.3097	d0 1f		bne $30b8			bne 	_IFloatAddExit
.3099	38		sec				sec 								; overflowed numerically.
.309a	60		rts				rts
.309b					_IFloatSubMantissa:
.309b	38		sec				sec 								; do the subtraction R0-Rx
.309c	a5 08		lda $08				lda 	IFR0+IM0
.309e	f5 00		sbc $00,x			sbc 		IM0,x
.30a0	85 08		sta $08				sta 	IFR0+IM0
.30a2	a5 09		lda $09				lda 	IFR0+IM1
.30a4	f5 01		sbc $01,x			sbc 		IM1,x
.30a6	85 09		sta $09				sta 	IFR0+IM1
.30a8	a5 0a		lda $0a				lda 	IFR0+IM2
.30aa	f5 02		sbc $02,x			sbc 		IM2,x
.30ac	85 0a		sta $0a				sta 	IFR0+IM2
.30ae	b0 08		bcs $30b8			bcs 	_IFloatAddExit 				; no borrow so we are done.
.30b0	a2 08		ldx #$08			ldx 	#IFR0
.30b2	20 85 36	jsr $3685			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.30b5	20 7d 36	jsr $367d			jsr 	IFloatNegate 				; negate the result using sign bit.
.30b8					_IFloatAddExit:
.30b8	18		clc				clc
.30b9	60		rts				rts
.30ba					_IFloatZeroAdd:
.30ba	fa		plx				plx 								; return this value in R0
.30bb	20 03 36	jsr $3603			jsr 	IFloatCopyFromRegister
.30be	18		clc				clc
.30bf	60		rts				rts
.30c0					_IFloatAddDecimals:
.30c0	20 6b 36	jsr $366b			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.30c3	f0 f3		beq $30b8			beq 	_IFloatAddExit
.30c5	20 a9 36	jsr $36a9			jsr 	IFloatNormalise 			; normalise RX
.30c8	da		phx				phx 								; normalise R0
.30c9	a2 08		ldx #$08			ldx 	#IFR0
.30cb	20 6b 36	jsr $366b			jsr 	IFloatCheckZero
.30ce	f0 ea		beq $30ba			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.30d0	20 a9 36	jsr $36a9			jsr 	IFloatNormalise
.30d3	fa		plx				plx
.30d4	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.30d6	29 3f		and #$3f			and 	#IFXMask
.30d8	38		sec				sec
.30d9	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.30db	85 20		sta $20				sta 	iTemp0
.30dd	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.30df	29 3f		and #$3f			and 	#IFXMask
.30e1	38		sec				sec
.30e2	e9 20		sbc #$20			sbc 	#$20
.30e4	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.30e6	b0 02		bcs $30ea			bcs 	_IFloatHaveLarger
.30e8	a5 20		lda $20				lda 	iTemp0
.30ea					_IFloatHaveLarger:
.30ea	18		clc				clc 								; get the actual one back.
.30eb	69 20		adc #$20			adc 	#$20 						; shift both to that.
.30ed	20 fa 30	jsr $30fa			jsr 	_IFShiftXToA
.30f0	da		phx				phx
.30f1	a2 08		ldx #$08			ldx 	#IFR0
.30f3	20 fa 30	jsr $30fa			jsr 	_IFShiftXToA
.30f6	fa		plx				plx
.30f7	4c 72 30	jmp $3072			jmp 	_IFAddSubMantissa 			; do the adding bit.
.30fa					_IFShiftXToA:
.30fa	8d e0 06	sta $06e0			sta 	IFTarget
.30fd	20 6b 36	jsr $366b			jsr 	IFloatCheckZero 			; check adding zero ?
.3100	f0 11		beq $3113			beq 	_IFSXExit
.3102					_IFSXLoop:
.3102	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.3104	29 3f		and #$3f			and 	#IFXMask
.3106	cd e0 06	cmp $06e0			cmp 	IFTarget
.3109	f0 08		beq $3113			beq 	_IFSXExit
.310b	20 a1 36	jsr $36a1			jsr 	IFloatShiftRight
.310e	20 cb 36	jsr $36cb			jsr 	IFloatIncExponent
.3111	80 ef		bra $3102			bra 	_IFSXLoop
.3113					_IFSXExit:
.3113	60		rts				rts
.06e0					IFTarget:
>06e0							.fill 	1
.3114					IFloatMultiply:
.3114	8e e0 06	stx $06e0			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.3117	20 cc 31	jsr $31cc			jsr 	IFCalculateNewSign
.311a	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.311c	05 0b		ora $0b				ora 	IFR0+IExp
.311e	29 3f		and #$3f			and 	#IFXMask
.3120	15 01		ora $01,x			ora 	IM1,x
.3122	05 09		ora $09				ora 	IFR0+IM1
.3124	15 02		ora $02,x			ora 	IM2,x
.3126	05 0a		ora $0a				ora 	IFR0+IM2
.3128	d0 0a		bne $3134			bne 	_IFMStandard
.312a	20 4e 36	jsr $364e			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.312d	ad e2 06	lda $06e2			lda 	IFNewSign
.3130	85 0b		sta $0b				sta 	IFR0+IExp
.3132	18		clc				clc
.3133	60		rts				rts
.3134					_IFMStandard:
.3134	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.3136	20 c3 31	jsr $31c3			jsr 	IFMSignExtend
.3139	8d e1 06	sta $06e1			sta 	IFNewExponent
.313c	a5 0b		lda $0b				lda 	IFR0+IExp
.313e	20 c3 31	jsr $31c3			jsr 	IFMSignExtend
.3141	18		clc				clc
.3142	6d e1 06	adc $06e1			adc 	IFNewExponent
.3145	8d e1 06	sta $06e1			sta 	IFNewExponent
.3148	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.314a	20 14 36	jsr $3614			jsr 	IFloatCopyToRegister
.314d	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.314f	20 72 36	jsr $3672			jsr 	IFloatSetZero
.3152					_IFMLoop:
.3152	a2 14		ldx #$14			ldx 	#IFRTemp
.3154	20 6b 36	jsr $366b			jsr 	IFloatCheckZero
.3157	f0 3a		beq $3193			beq 	_IFMExit
.3159	ae e0 06	ldx $06e0			ldx 	IFTarget 					; look at adder MSB
.315c	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.315e	10 03		bpl $3163			bpl	 	_IFMTargetOkay
.3160	20 b4 31	jsr $31b4			jsr 	_IFMShiftAll
.3163					_IFMTargetOkay:
.3163	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.3165	29 01		and #$01			and 	#1
.3167	f0 16		beq $317f			beq 	_IFMNoAdd
.3169	ae e0 06	ldx $06e0			ldx 	IFTarget 					; add adder
.316c	18		clc				clc
.316d	a5 08		lda $08				lda 	IFR0+IM0
.316f	75 00		adc $00,x			adc 		IM0,x
.3171	85 08		sta $08				sta 	IFR0+IM0
.3173	a5 09		lda $09				lda 	IFR0+IM1
.3175	75 01		adc $01,x			adc 		IM1,x
.3177	85 09		sta $09				sta 	IFR0+IM1
.3179	a5 0a		lda $0a				lda 	IFR0+IM2
.317b	75 02		adc $02,x			adc 		IM2,x
.317d	85 0a		sta $0a				sta 	IFR0+IM2
.317f					_IFMNoAdd:
.317f	a5 0a		lda $0a				lda 	IFR0+IM2
.3181	10 03		bpl $3186			bpl 	_IFMResultOkay
.3183	20 b4 31	jsr $31b4			jsr 	_IFMShiftAll
.3186					_IFMResultOkay:
.3186	a2 14		ldx #$14			ldx 	#IFRTemp
.3188	20 a1 36	jsr $36a1			jsr 	IFloatShiftRight
.318b	ae e0 06	ldx $06e0			ldx 	IFTarget
.318e	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.3191	80 bf		bra $3152			bra 	_IFMLoop
.3193					_IFMExit:
.3193	ad e1 06	lda $06e1			lda 	IFNewExponent 				; validate new exponent.
.3196	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.3198	90 0f		bcc $31a9			bcc 	_IFMOkay
.319a	c9 e0		cmp #$e0			cmp 	#$E0
.319c	b0 0b		bcs $31a9			bcs 	_IFMOkay
.319e	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.31a0	f0 10		beq $31b2			beq 	_IFMError
.31a2	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.31a4	20 72 36	jsr $3672			jsr 	IFloatSetZero
.31a7	18		clc				clc
.31a8	60		rts				rts
.31a9					_IFMOkay:
.31a9	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.31ab	0d e2 06	ora $06e2			ora 	IFNewSign
.31ae	85 0b		sta $0b				sta 	IFR0+IExp
.31b0	18		clc				clc
.31b1	60		rts				rts
.31b2					_IFMError:
.31b2	38		sec				sec
.31b3	60		rts				rts
.31b4					_IFMShiftAll:
.31b4	a2 08		ldx #$08			ldx 	#IFR0
.31b6	20 a1 36	jsr $36a1			jsr 	IFloatShiftRight
.31b9	ae e0 06	ldx $06e0			ldx 	IFTarget
.31bc	20 a1 36	jsr $36a1			jsr 	IFloatShiftRight
.31bf	ee e1 06	inc $06e1			inc 	IFNewExponent
.31c2	60		rts				rts
.31c3					IFMSignExtend:
.31c3	29 3f		and #$3f			and 	#IFXMask
.31c5	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.31c7	90 02		bcc $31cb			bcc 	_IFMNoSXX
.31c9	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.31cb					_IFMNoSXX:
.31cb	60		rts				rts
.31cc					IFCalculateNewSign:
.31cc	b5 03		lda $03,x			lda 	IExp,x
.31ce	45 0b		eor $0b				eor 	IFR0+IExp
.31d0	29 40		and #$40			and 	#IFSign
.31d2	8d e2 06	sta $06e2			sta 	IFNewSign
.31d5	60		rts				rts
.06e1					IFNewExponent:
>06e1							.fill 	1
.06e2					IFNewSign:
>06e2							.fill 	1
.31d6					IFloatDivideInteger:
.31d6	20 ef 31	jsr $31ef			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.31d9	b0 06		bcs $31e1			bcs 	_IFDIExit
.31db	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.31dd	20 03 36	jsr $3603			jsr 	IFloatCopyFromRegister
.31e0	18		clc				clc
.31e1					_IFDIExit:
.31e1	60		rts				rts
.31e2					IFloatModulusInteger:
.31e2	20 ef 31	jsr $31ef			jsr 	IFloatDivideIntegerCommon
.31e5	b0 07		bcs $31ee			bcs 	_IFMIExit
.31e7	ae e0 06	ldx $06e0			ldx 	IFTarget
.31ea	20 03 36	jsr $3603			jsr 	IFloatCopyFromRegister
.31ed	18		clc				clc
.31ee					_IFMIExit:
.31ee	60		rts				rts
.31ef					IFloatDivideIntegerCommon:
.31ef	8e e0 06	stx $06e0			stx 	IFTarget  					; this is s1, s0 = R0
.31f2	20 cc 31	jsr $31cc			jsr 	IFCalculateNewSign 			; calculate sign of result
.31f5	20 1d 32	jsr $321d			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.31f8	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.31fa	20 6b 36	jsr $366b			jsr 	IFloatCheckZero
.31fd	f0 1c		beq $321b			beq 	_IFDIDivZero
.31ff	ae e0 06	ldx $06e0			ldx 	IFTarget 					; zero Rx (S1)
.3202	20 72 36	jsr $3672			jsr 	IFloatSetZero
.3205	5a		phy				phy
.3206	a0 18		ldy #$18			ldy 	#24
.3208					_IFDILoop:
.3208	20 2e 32	jsr $322e			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.320b	20 3a 32	jsr $323a			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.320e	88		dey				dey
.320f	d0 f7		bne $3208			bne 	_IFDILoop 					; do it 24 times
.3211	7a		ply				ply
.3212	ad e2 06	lda $06e2			lda 	IFNewSign 					; set sign of result.
.3215	29 40		and #$40			and 	#IFSign
.3217	85 17		sta $17				sta 	IFRTemp+IExp
.3219	18		clc				clc 								; is okay.
.321a	60		rts				rts
.321b					_IFDIDivZero:
.321b	38		sec				sec
.321c	60		rts				rts
.321d					IFDCopyRXToRTemp:
.321d	b5 00		lda $00,x			lda 	IM0,x
.321f	85 14		sta $14				sta 	IFRTemp+IM0
.3221	b5 01		lda $01,x			lda 	IM1,x
.3223	85 15		sta $15				sta 	IFRTemp+IM1
.3225	b5 02		lda $02,x			lda 	IM2,x
.3227	85 16		sta $16				sta 	IFRTemp+IM2
.3229	b5 03		lda $03,x			lda 	IExp,x
.322b	85 17		sta $17				sta 	IFRTemp+IExp
.322d	60		rts				rts
.322e					IFDShiftSTempS1Left:
.322e	a2 14		ldx #$14			ldx 	#IFRTemp
.3230	20 99 36	jsr $3699			jsr 	IFloatShiftLeft
.3233	ae e0 06	ldx $06e0			ldx 	IFTarget
.3236	20 9a 36	jsr $369a			jsr 	IFloatRotateLeft
.3239	60		rts				rts
.323a					IFDTrySubtract:
.323a	ae e0 06	ldx $06e0			ldx 	IFTarget 					; s1 = Rx
.323d	38		sec				sec 								; subtract, saving the results on the stack.
.323e	b5 00		lda $00,x			lda 	IM0,x
.3240	e5 08		sbc $08				sbc 	IFR0+IM0
.3242	48		pha				pha
.3243	b5 01		lda $01,x			lda 	IM1,x
.3245	e5 09		sbc $09				sbc 	IFR0+IM1
.3247	48		pha				pha
.3248	b5 02		lda $02,x			lda 	IM2,x
.324a	e5 0a		sbc $0a				sbc 	IFR0+IM2
.324c	b0 03		bcs $3251			bcs 	_IFDCanSubtract
.324e	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.324f	68		pla				pla
.3250	60		rts				rts
.3251					_IFDCanSubtract:
.3251	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.3253	68		pla				pla
.3254	95 01		sta $01,x			sta 	IM1,x
.3256	68		pla				pla
.3257	95 00		sta $00,x			sta 	IM0,x
.3259	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.325b	d0 06		bne $3263			bne 	_IFDCSExit
.325d	e6 15		inc $15				inc 	IFRTemp+IM1
.325f	d0 02		bne $3263			bne 	_IFDCSExit
.3261	e6 16		inc $16				inc 	IFRTemp+IM2
.3263					_IFDCSExit:
.3263	60		rts				rts
.3264					IFloatBitwiseAnd:
.3264	5a		phy				phy
.3265	20 a9 32	jsr $32a9			jsr 	IFPreProcessBitwise 		; set up everything.
.3268	d0 0f		bne $3279			bne 	_IFBAExit
.326a					_IFBALoop:
.326a	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.326d	35 00		and $00,x			and 	IM0,x
.326f	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3272	e8		inx				inx
.3273	c8		iny				iny
.3274	c0 03		cpy #$03			cpy 	#3
.3276	d0 f2		bne $326a			bne 	_IFBALoop
.3278	18		clc				clc
.3279					_IFBAExit:
.3279	7a		ply				ply
.327a	60		rts				rts
.327b					IFloatBitwiseOr:
.327b	5a		phy				phy
.327c	20 a9 32	jsr $32a9			jsr 	IFPreProcessBitwise 		; set up everything.
.327f	d0 0f		bne $3290			bne 	_IFBAExit
.3281					_IFBALoop:
.3281	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3284	15 00		ora $00,x			ora 	IM0,x
.3286	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3289	e8		inx				inx
.328a	c8		iny				iny
.328b	c0 03		cpy #$03			cpy 	#3
.328d	d0 f2		bne $3281			bne 	_IFBALoop
.328f	18		clc				clc
.3290					_IFBAExit:
.3290	7a		ply				ply
.3291	60		rts				rts
.3292					IFloatBitwiseXor:
.3292	5a		phy				phy
.3293	20 a9 32	jsr $32a9			jsr 	IFPreProcessBitwise 		; set up everything.
.3296	d0 0f		bne $32a7			bne 	_IFBAExit
.3298					_IFBALoop:
.3298	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.329b	55 00		eor $00,x			eor 	IM0,x
.329d	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.32a0	e8		inx				inx
.32a1	c8		iny				iny
.32a2	c0 03		cpy #$03			cpy 	#3
.32a4	d0 f2		bne $3298			bne 	_IFBALoop
.32a6	18		clc				clc
.32a7					_IFBAExit:
.32a7	7a		ply				ply
.32a8	60		rts				rts
.32a9					IFPreProcessBitwise:
.32a9	a0 00		ldy #$00			ldy 	#0 							; set index.
.32ab	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.32ad	15 03		ora $03,x			ora 	IExp,x
.32af	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.32b1	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.32b3	38		sec				sec 								; carry set just in cases.
.32b4	60		rts				rts
.32b5					IFloatAbsoluteR0:
.32b5	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.32b7	29 bf		and #$bf			and 	#IFSign ^ 255
.32b9	85 0b		sta $0b				sta 	IFR0+IExp
.32bb	18		clc				clc
.32bc	60		rts				rts
.32bd					IFloatSquareRootR0:
.32bd	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.32bf	20 6b 36	jsr $366b			jsr 	IFloatCheckZero
.32c2	f0 2e		beq $32f2			beq 	_IFSRZero
.32c4	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.32c6	29 40		and #$40			and 	#IFSign
.32c8	d0 2f		bne $32f9			bne 	_IFSRFail
.32ca	20 a9 36	jsr $36a9			jsr 	IFloatNormalise 			; it will work better !
.32cd	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.32cf	20 14 36	jsr $3614			jsr 	IFloatCopyToRegister
.32d2	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.32d4	20 c3 31	jsr $31c3			jsr 	IFMSignExtend 				; sign extended version of the exponent
.32d7	18		clc				clc
.32d8	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.32da	85 0b		sta $0b				sta 	IFR0+IExp
.32dc	4a		lsr a				lsr 	a 							; which we can halve.
.32dd	38		sec				sec 								; convert back
.32de	e9 17		sbc #$17			sbc 	#23
.32e0	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.32e2	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.32e4	20 fb 32	jsr $32fb			jsr 	_IFSRNewton
.32e7	20 fb 32	jsr $32fb			jsr 	_IFSRNewton
.32ea	20 fb 32	jsr $32fb			jsr 	_IFSRNewton
.32ed	20 fb 32	jsr $32fb			jsr 	_IFSRNewton
.32f0	18		clc				clc
.32f1	60		rts				rts
.32f2					_IFSRZero:
.32f2	a2 08		ldx #$08			ldx 	#IFR0
.32f4	20 72 36	jsr $3672			jsr 	IFloatSetZero
.32f7	18		clc				clc
.32f8	60		rts				rts
.32f9					_IFSRFail:
.32f9	38		sec				sec
.32fa	60		rts				rts
.32fb					_IFSRNewton:
.32fb	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.32fd	20 c1 35	jsr $35c1			jsr 	IFloatPushRx
.3300	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.3302	20 c1 35	jsr $35c1			jsr 	IFloatPushRx
.3305	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.3307	20 96 33	jsr $3396			jsr 	IFloatDivideFloat
.330a	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.330c	20 e2 35	jsr $35e2			jsr 	IFloatPullRx
.330f	20 6a 30	jsr $306a			jsr 	IFloatAdd 					; now guess + original/guess
.3312	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.3314	20 a1 36	jsr $36a1			jsr 	IFloatShiftRight
.3317	a2 0c		ldx #$0c			ldx 	#IFR1
.3319	20 e2 35	jsr $35e2			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.331c	60		rts				rts
.331d					IFloatFractionalR0:
.331d	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.331f	29 3f		and #$3f			and 	#IFXMask
.3321	f0 17		beq $333a			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.3323	20 b5 32	jsr $32b5			jsr 	IFloatAbsoluteR0 			; absolute value R0
.3326	a2 08		ldx #$08			ldx 	#IFR0
.3328	20 a9 36	jsr $36a9			jsr 	IFloatNormalise 			; normalise R0
.332b	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.332d	20 14 36	jsr $3614			jsr 	IFloatCopyToRegister
.3330	20 73 33	jsr $3373			jsr 	IFloatIntegerR0 			; take integer part of R0
.3333	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.3335	20 63 30	jsr $3063			jsr 	IFloatSubtract
.3338	80 05		bra $333f			bra 	_FIPExit
.333a					_FIPZero:
.333a	a2 08		ldx #$08			ldx 	#IFR0
.333c	20 72 36	jsr $3672			jsr 	IFloatSetZero
.333f					_FIPExit:
.333f	18		clc				clc
.3340	60		rts				rts
.3341					IFloatCompare:
.3341	20 63 30	jsr $3063			jsr 	IFloatSubtract 				; subtract R0 from RX.
.3344	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.3346	05 0b		ora $0b				ora 	IFR0+IExp
.3348	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.334a	29 3f		and #$3f			and 	#IFXMask
.334c	d0 19		bne $3367			bne 	_IFCNonInteger
.334e	20 6b 36	jsr $366b			jsr 	IFloatCheckZero 			; check if zero
.3351	f0 0f		beq $3362			beq 	_IFCZero
.3353					_IFCReturnSign:
.3353	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.3355	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.3357	48		pha				pha
.3358	a9 01		lda #$01			lda 	#1
.335a	20 74 36	jsr $3674			jsr 	IFloatSetByte 				; return to +1
.335d	68		pla				pla 								; sign bit back
.335e	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.3360	18		clc				clc
.3361	60		rts				rts
.3362					_IFCZero:
.3362	20 72 36	jsr $3672			jsr 	IFloatSetZero
.3365	18		clc				clc
.3366	60		rts				rts
.3367					_IFCNonInteger:
.3367	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.3369	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.336b	05 09		ora $09				ora 	IFR0+IM1
.336d	05 0a		ora $0a				ora 	IFR0+IM2
.336f	f0 f1		beq $3362			beq 	_IFCZero 					; near enough !
.3371	80 e0		bra $3353			bra 	_IFCReturnSign 				; return the sign of the difference.
.3373					IFloatIntegerR0:
.3373	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.3375	29 3f		and #$3f			and 	#IFXMask
.3377	f0 1b		beq $3394			beq 	_FIPExit 					; if so do nothing
.3379	a2 08		ldx #$08			ldx 	#IFR0
.337b	20 a9 36	jsr $36a9			jsr 	IFloatNormalise 			; normalise
.337e	20 6b 36	jsr $366b			jsr 	IFloatCheckZero 			; is it zero ?
.3381	f0 0e		beq $3391			beq 	_FIPZero 					; if so return zero.
.3383					_FIPShift:
.3383	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.3385	29 20		and #$20			and 	#$20 						; still -ve
.3387	f0 0b		beq $3394			beq 	_FIPExit
.3389	20 a1 36	jsr $36a1			jsr 	IFloatShiftRight 			; shift mantissa right
.338c	20 cb 36	jsr $36cb			jsr 	IFloatIncExponent 			; bump exponent
.338f	80 f2		bra $3383			bra 	_FIPShift
.3391					_FIPZero:
.3391	20 72 36	jsr $3672			jsr 	IFloatSetZero
.3394					_FIPExit:
.3394	18		clc				clc
.3395	60		rts				rts
.3396					IFloatDivideFloat:
.3396	8e e0 06	stx $06e0			stx 	IFTarget  					; this is s1, s0 = R0
.3399	20 cc 31	jsr $31cc			jsr 	IFCalculateNewSign 			; calculate sign of result
.339c	20 a9 36	jsr $36a9			jsr 	IFloatNormalise 			; normalise RX
.339f	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.33a1	20 a9 36	jsr $36a9			jsr 	IFloatNormalise
.33a4	20 6b 36	jsr $366b			jsr 	IFloatCheckZero
.33a7	f0 56		beq $33ff			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.33a9	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.33ab	20 c3 31	jsr $31c3			jsr 	IFMSignExtend
.33ae	8d e1 06	sta $06e1			sta 	IFNewExponent
.33b1	ae e0 06	ldx $06e0			ldx 	IFTarget 					; calculate s1.exponent
.33b4	b5 03		lda $03,x			lda 	IExp,x
.33b6	20 c3 31	jsr $31c3			jsr 	IFMSignExtend
.33b9	38		sec				sec
.33ba	ed e1 06	sbc $06e1			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.33bd	38		sec				sec
.33be	e9 17		sbc #$17			sbc 	#23
.33c0	8d e1 06	sta $06e1			sta 	IFNewExponent
.33c3	20 01 34	jsr $3401			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.33c6	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.33c8	10 08		bpl $33d2			bpl 	_IFDFNoShiftResult
.33ca	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.33cc	20 a1 36	jsr $36a1			jsr 	IFloatShiftRight
.33cf	ee e1 06	inc $06e1			inc 	IFNewExponent
.33d2					_IFDFNoShiftResult:
.33d2	ad e1 06	lda $06e1			lda 	IFNewExponent 				; underflow/overflow check.
.33d5	30 06		bmi $33dd			bmi 	_IFDFCheckUnderflow
.33d7	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.33d9	b0 24		bcs $33ff			bcs 	_IFDFDivZero
.33db	80 11		bra $33ee			bra		_IFDFExit
.33dd					_IFDFCheckUnderflow:
.33dd	ad e1 06	lda $06e1			lda 	IFNewExponent 				; shift into a legal exponent.
.33e0	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.33e2	b0 0a		bcs $33ee			bcs 	_IFDFExit
.33e4	ee e1 06	inc $06e1			inc 	IFNewExponent
.33e7	a2 14		ldx #$14			ldx 	#IFRTemp
.33e9	20 a1 36	jsr $36a1			jsr 	IFloatShiftRight
.33ec	80 ef		bra $33dd			bra 	_IFDFCheckUnderflow
.33ee					_IFDFExit:
.33ee	ad e1 06	lda $06e1			lda 	IFNewExponent 				; combine exponent and sign.
.33f1	29 3f		and #$3f			and 	#IFXMask
.33f3	0d e2 06	ora $06e2			ora 	IFNewSign
.33f6	85 17		sta $17				sta 	IFRTemp+IExp
.33f8	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.33fa	20 03 36	jsr $3603			jsr 	IFloatCopyFromRegister
.33fd	18		clc				clc
.33fe	60		rts				rts
.33ff					_IFDFDivZero:
.33ff	38		sec				sec
.3400	60		rts				rts
.3401					IFloatDivideSupport:
.3401	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.3403	20 72 36	jsr $3672			jsr 	IFloatSetZero
.3406	5a		phy				phy 								; main division loop x 23
.3407	a0 17		ldy #$17			ldy 	#23
.3409					_IFDSLoop:
.3409	20 3a 32	jsr $323a			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.340c	20 2e 32	jsr $322e			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.340f	88		dey				dey
.3410	d0 f7		bne $3409			bne 	_IFDSLoop 					; do it 24 times
.3412	7a		ply				ply
.3413	60		rts				rts
.3414					IFloatIntegerToStringR0:
.3414	8d e3 06	sta $06e3			sta 	IFBase 						; save base to use.
.3417	20 f3 36	jsr $36f3			jsr 	IFloatBufferReset			; empty buffer
.341a	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.341c	29 3f		and #$3f			and 	#IFXMask
.341e	d0 1d		bne $343d			bne 	_IFIFail
.3420	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.3422	20 6b 36	jsr $366b			jsr 	IFloatCheckZero
.3425	f0 0e		beq $3435			beq 	_IFINotNegative
.3427	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.3429	29 40		and #$40			and 	#IFSign
.342b	f0 08		beq $3435			beq 	_IFINotNegative
.342d	a9 2d		lda #$2d			lda 	#"-"						; output -
.342f	20 02 37	jsr $3702			jsr 	IFloatBufferWrite
.3432	20 7d 36	jsr $367d			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.3435					_IFINotNegative:
.3435	20 3f 34	jsr $343f			jsr 	_IFIRecursiveConvert 		; start converting
.3438	20 fa 36	jsr $36fa			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.343b	18		clc				clc
.343c	60		rts				rts
.343d					_IFIFail:
.343d	38		sec				sec
.343e	60		rts				rts
.343f					_IFIRecursiveConvert:
.343f	a2 0c		ldx #$0c			ldx 	#IFR1
.3441	20 14 36	jsr $3614			jsr 	IFloatCopyToRegister 		; R0->R1
.3444	a2 08		ldx #$08			ldx 	#IFR0
.3446	ad e3 06	lda $06e3			lda 	IFBase 						; Base -> R0
.3449	20 74 36	jsr $3674			jsr 	IFloatSetByte
.344c	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.344e	20 d6 31	jsr $31d6			jsr 	IFloatDivideInteger
.3451	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.3453	20 6b 36	jsr $366b			jsr 	IFloatCheckZero
.3456	f0 09		beq $3461			beq 	_IFIOutDigit
.3458	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.345a	48		pha				pha
.345b	20 3f 34	jsr $343f			jsr 	_IFIRecursiveConvert 		; convert the divide result
.345e	68		pla				pla
.345f	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.3461					_IFIOutDigit:
.3461	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.3463	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.3465	90 02		bcc $3469			bcc 	_IFINotHex
.3467	69 06		adc #$06			adc 	#6
.3469					_IFINotHex:
.3469	69 30		adc #$30			adc 	#48
.346b	20 02 37	jsr $3702			jsr 	IFloatBufferWrite 			; write character to buffer.
.346e	60		rts				rts
.06e3					IFBase:
>06e3							.fill 	1
.346f					IFloatFloatToStringR0:
.346f	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.3471	20 c1 35	jsr $35c1			jsr 	IFloatPushRx
.3474	20 14 36	jsr $3614			jsr 	IFloatCopyToRegister
.3477	20 73 33	jsr $3373			jsr 	IFloatIntegerR0				; make R0 integer
.347a	a9 0a		lda #$0a			lda 	#10 						; base 10.
.347c	20 14 34	jsr $3414			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.347f	9c e4 06	stz $06e4			stz 	IFloatDecimalCount 			; zero the decimal count.
.3482	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.3484	29 3f		and #$3f			and 	#IFXMask
.3486	f0 44		beq $34cc			beq 	_IFFSExit
.3488					_IFloatFracLoop:
.3488	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.348a	20 03 36	jsr $3603			jsr 	IFloatCopyFromRegister
.348d	20 1d 33	jsr $331d			jsr 	IFloatFractionalR0
.3490	20 a9 36	jsr $36a9			jsr 	IFloatNormalise
.3493	a2 10		ldx #$10			ldx 	#IFR2
.3495	20 14 36	jsr $3614			jsr 	IFloatCopyToRegister 		; copy to back R2
.3498	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.349a	a9 0a		lda #$0a			lda 	#10
.349c	20 74 36	jsr $3674			jsr 	IFloatSetByte
.349f	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.34a1	20 14 31	jsr $3114			jsr 	IFloatMultiply
.34a4	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.34a6	20 14 36	jsr $3614			jsr 	IFloatCopyToRegister
.34a9	20 73 33	jsr $3373			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.34ac	ad e4 06	lda $06e4			lda 	IFloatDecimalCount 			; done 3 dp, no more
.34af	c9 03		cmp #$03			cmp 	#3
.34b1	f0 16		beq $34c9			beq 	_IFFSExitStripZero
.34b3	ad e4 06	lda $06e4			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.34b6	d0 05		bne $34bd			bne 	_IFloatNotFirst
.34b8	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.34ba	20 02 37	jsr $3702			jsr 	IFloatBufferWrite
.34bd					_IFloatNotFirst:
.34bd	ee e4 06	inc $06e4			inc 	IFloatDecimalCount
.34c0	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.34c2	09 30		ora #$30			ora 	#"0"						; ASCII
.34c4	20 02 37	jsr $3702			jsr 	IFloatBufferWrite 			; write to the buffer.
.34c7	80 bf		bra $3488			bra 	_IFloatFracLoop
.34c9					_IFFSExitStripZero:
.34c9	20 11 37	jsr $3711			jsr 	IFloatStripTrailingZeros
.34cc					_IFFSExit:
.34cc	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.34ce	20 e2 35	jsr $35e2			jsr 	IFloatPullRx
.34d1	20 fa 36	jsr $36fa			jsr 	IFloatGetBufferAddress
.34d4	18		clc				clc
.34d5	60		rts				rts
.06e4					IFloatDecimalCount:
>06e4							.fill 	1
.34d6					IFloatStringToFloatR0:
.34d6	8d e5 06	sta $06e5			sta 	IFCount 					; save length and positions out.
.34d9	86 20		stx $20				stx 	iTemp0
.34db	84 21		sty $21				sty 	iTemp0+1
.34dd	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.34df	20 72 36	jsr $3672			jsr 	IFloatSetZero
.34e2	9c e6 06	stz $06e6			stz 	IFSignFlag 					; clear the sign flag
.34e5	20 72 35	jsr $3572			jsr 	IFSTFGetNext 				; get first
.34e8	f0 1b		beq $3505			beq 	_IFSTFFail 					; no character, fail.
.34ea	90 10		bcc $34fc			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.34ec	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.34ee	d0 15		bne $3505			bne 	_IFSTFFail
.34f0	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.34f2	8d e6 06	sta $06e6			sta 	IFSignFlag
.34f5					_IFSTFLoop:
.34f5	20 72 35	jsr $3572			jsr 	IFSTFGetNext 				; get next character
.34f8	b0 0b		bcs $3505			bcs 	_IFSTFFail 					; bad character.
.34fa	f0 11		beq $350d			beq 	_IFSTFExit 					; end of data
.34fc					_IFSTFHaveChar:
.34fc	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.34fe	f0 08		beq $3508			beq 	_IFSTFDecimal
.3500	20 96 35	jsr $3596			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.3503	80 f0		bra $34f5			bra 	_IFSTFLoop 					; keep going until . or end.
.3505					_IFSTFFail:
.3505	38		sec				sec
.3506	80 0d		bra $3515			bra 	_IFSTFReturn
.3508					_IFSTFDecimal:
.3508	20 1d 35	jsr $351d			jsr 	IFSTFDecimal 				; call the decimal places code.
.350b	b0 08		bcs $3515			bcs 	_IFSTFReturn 				; error
.350d					_IFSTFExit:
.350d	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.350f	0d e6 06	ora $06e6			ora 	IFSignFlag
.3512	85 0b		sta $0b				sta 	IFR0+IExp
.3514	18		clc				clc
.3515					_IFSTFReturn:
.3515	60		rts				rts
.3516					IFloatAddDecimalToR0:
.3516	8d e5 06	sta $06e5			sta 	IFCount 					; save it out.
.3519	86 20		stx $20				stx 	iTemp0
.351b	84 21		sty $21				sty 	iTemp0+1
.351d					IFSTFDecimal:
.351d	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.351f	20 c1 35	jsr $35c1			jsr 	IFloatPushRx
.3522	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.3524	20 72 36	jsr $3672			jsr 	IFloatSetZero
.3527	9c e7 06	stz $06e7			stz 	IFDecimalPlaces 			; zero DP.
.352a					_IFSTDLoop:
.352a	20 72 35	jsr $3572			jsr 	IFSTFGetNext 				; get next
.352d	b0 41		bcs $3570			bcs 	_IFSTFFail2 				; bad character.
.352f	f0 11		beq $3542			beq 	_IFSTFComplete 				; end of data, work out the result.
.3531	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.3533	f0 39		beq $356e			beq 	_IFSTFExit2
.3535	20 96 35	jsr $3596			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.3538	ee e7 06	inc $06e7			inc 	IFDecimalPlaces 			; count decimals
.353b	ad e7 06	lda $06e7			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.353e	c9 03		cmp #$03			cmp 	#3
.3540	90 e8		bcc $352a			bcc 	_IFSTDLoop
.3542					_IFSTFComplete:
.3542	ad e7 06	lda $06e7			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.3545	f0 27		beq $356e			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.3547	3a		dec a				dec 	a 							; table indexed from 1.
.3548	0a		asl a				asl 	a
.3549	0a		asl a				asl 	a
.354a	aa		tax				tax
.354b	bd ad 35	lda $35ad,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.354e	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.3550	bd ae 35	lda $35ae,x			lda 	TableTen+1,x
.3553	85 0d		sta $0d				sta  	IFR1+IM1
.3555	bd af 35	lda $35af,x			lda 	TableTen+2,x
.3558	85 0e		sta $0e				sta  	IFR1+IM2
.355a	bd b0 35	lda $35b0,x			lda 	TableTen+3,x
.355d	85 0f		sta $0f				sta  	IFR1+IExp
.355f	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.3561	20 14 31	jsr $3114			jsr 	IFloatMultiply
.3564	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.3566	20 e2 35	jsr $35e2			jsr 	IFloatPullRx
.3569	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.356b	20 6a 30	jsr $306a			jsr 	IFloatAdd
.356e					_IFSTFExit2:
.356e	18		clc				clc
.356f	60		rts				rts
.3570					_IFSTFFail2:
.3570	38		sec				sec
.3571	60		rts				rts
.3572					IFSTFGetNext:
.3572	ad e5 06	lda $06e5			lda 	IFCount  					; if count is zero, return with Z set.
.3575	f0 19		beq $3590			beq 	_IFSTFReturnOk
.3577	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3579	e6 20		inc $20				inc 	iTemp0 						; point at next.
.357b	d0 02		bne $357f			bne 	_IFSTFGNNoCarry
.357d	e6 21		inc $21				inc 	iTemp0+1
.357f					_IFSTFGNNoCarry:
.357f	ce e5 06	dec $06e5			dec 	IFCount 					; dec count.
.3582	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.3584	f0 08		beq $358e			beq 	_IFSTFGOkay
.3586	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3588	90 08		bcc $3592			bcc 	_IFSTFGFail
.358a	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.358c	b0 04		bcs $3592			bcs 	_IFSTFGFail
.358e					_IFSTFGOkay:
.358e	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3590					_IFSTFReturnOk:
.3590	18		clc				clc
.3591	60		rts				rts
.3592					_IFSTFGFail:
.3592	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3594	38		sec				sec
.3595	60		rts				rts
.3596					IFSTFAddR0:
.3596	29 0f		and #$0f			and 	#15 						; to int value
.3598	48		pha				pha 								; save it.
.3599	a9 0a		lda #$0a			lda 	#10
.359b	a2 0c		ldx #$0c			ldx 	#IFR1
.359d	20 74 36	jsr $3674			jsr 	IFloatSetByte
.35a0	20 14 31	jsr $3114			jsr 	IFloatMultiply
.35a3	68		pla				pla
.35a4	a2 0c		ldx #$0c			ldx 	#IFR1
.35a6	20 74 36	jsr $3674			jsr 	IFloatSetByte
.35a9	20 6a 30	jsr $306a			jsr 	IFloatAdd
.35ac	60		rts				rts
.06e5					IFCount:
>06e5							.fill 	1
.06e6					IFSignFlag:
>06e6							.fill 	1
.06e7					IFDecimalPlaces:
>06e7							.fill 	1
.35ad					TableTen:
>35ad	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>35b1	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>35b5	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>35b9	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>35bd	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.35c1					IFloatPushRx:
.35c1	5a		phy				phy
.35c2	ac e8 06	ldy $06e8			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.35c5	b5 00		lda $00,x			lda 	IM0,x
.35c7	99 e9 06	sta $06e9,y			sta 	IFStack,y
.35ca	b5 01		lda $01,x			lda 	IM1,x
.35cc	99 ea 06	sta $06ea,y			sta 	IFStack+1,y
.35cf	b5 02		lda $02,x			lda 	IM2,x
.35d1	99 eb 06	sta $06eb,y			sta 	IFStack+2,y
.35d4	b5 03		lda $03,x			lda 	IExp,x
.35d6	99 ec 06	sta $06ec,y			sta 	IFStack+3,y
.35d9	c8		iny				iny
.35da	c8		iny				iny
.35db	c8		iny				iny
.35dc	c8		iny				iny
.35dd	8c e8 06	sty $06e8			sty 	IFStackIndex 				; update SP
.35e0	7a		ply				ply
.35e1	60		rts				rts
.35e2					IFloatPullRx:
.35e2	5a		phy				phy
.35e3	ac e8 06	ldy $06e8			ldy 	IFStackIndex	 			; decrement SP
.35e6	88		dey				dey
.35e7	88		dey				dey
.35e8	88		dey				dey
.35e9	88		dey				dey
.35ea	b9 e9 06	lda $06e9,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.35ed	95 00		sta $00,x			sta 	IM0,x
.35ef	b9 ea 06	lda $06ea,y			lda 	IFStack+1,y
.35f2	95 01		sta $01,x			sta 	IM1,x
.35f4	b9 eb 06	lda $06eb,y			lda 	IFStack+2,y
.35f7	95 02		sta $02,x			sta 	IM2,x
.35f9	b9 ec 06	lda $06ec,y			lda 	IFStack+3,y
.35fc	95 03		sta $03,x			sta 	IExp,x
.35fe	8c e8 06	sty $06e8			sty 	IFStackIndex 				; update SP
.3601	7a		ply				ply
.3602	60		rts				rts
.06e8					IFStackIndex:
>06e8							.fill 	1
.06e9					IFStack:
>06e9							.fill 	16*4
.3603					IFloatCopyFromRegister:
.3603	b5 00		lda $00,x			lda 	0,x
.3605	85 08		sta $08				sta 	IFR0
.3607	b5 01		lda $01,x			lda 	1,x
.3609	85 09		sta $09				sta 	IFR0+1
.360b	b5 02		lda $02,x			lda 	2,x
.360d	85 0a		sta $0a				sta 	IFR0+2
.360f	b5 03		lda $03,x			lda 	3,x
.3611	85 0b		sta $0b				sta 	IFR0+3
.3613	60		rts				rts
.3614					IFloatCopyToRegister:
.3614	a5 08		lda $08				lda 	IFR0
.3616	95 00		sta $00,x			sta 	0,x
.3618	a5 09		lda $09				lda 	IFR0+1
.361a	95 01		sta $01,x			sta 	1,x
.361c	a5 0a		lda $0a				lda 	IFR0+2
.361e	95 02		sta $02,x			sta 	2,x
.3620	a5 0b		lda $0b				lda 	IFR0+3
.3622	95 03		sta $03,x			sta 	3,x
.3624	60		rts				rts
.3625					IFloatLoadInline:
.3625	68		pla				pla 								; pop address off to iTemp0
.3626	85 20		sta $20				sta 	iTemp0
.3628	68		pla				pla
.3629	85 21		sta $21				sta 	iTemp0+1
.362b	a0 01		ldy #$01			ldy 	#1
.362d	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.362f	95 00		sta $00,x			sta 	0,x
.3631	c8		iny				iny
.3632	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.3634	95 01		sta $01,x			sta 	1,x
.3636	c8		iny				iny
.3637	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.3639	95 02		sta $02,x			sta 	2,x
.363b	c8		iny				iny
.363c	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.363e	95 03		sta $03,x			sta 	3,x
.3640	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.3641	a5 20		lda $20				lda 	iTemp0
.3643	69 05		adc #$05			adc 	#5
.3645	85 20		sta $20				sta 	iTemp0
.3647	90 02		bcc $364b			bcc 	_IFLINoCarry
.3649	e6 21		inc $21				inc 	iTemp0+1
.364b					_IFLINoCarry:
.364b	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.364e					IFloatMultiply8BitRx:
.364e	5a		phy		        phy
.364f	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3651	a4 08		ldy $08		        ldy     IFR0+IM0
.3653	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.3654	85 08		sta $08		        sta     IFR0+IM0
.3656	84 09		sty $09		        sty     IFR0+IM1
.3658	a9 00		lda #$00	        lda     #0
.365a	a0 08		ldy #$08	        ldy     #8
.365c					_IFMLoop:
.365c	90 03		bcc $3661	        bcc     _IFMNoAdd
.365e	18		clc		        clc
.365f	65 09		adc $09		        adc     IFR0+IM1
.3661					_IFMNoAdd:
.3661	6a		ror a		        ror     a
.3662	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.3664	88		dey		        dey
.3665	d0 f5		bne $365c	        bne     _IFMLoop
.3667	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3669	7a		ply		        ply
.366a	60		rts		        rts
.366b					IFloatCheckZero:
.366b	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.366d	15 01		ora $01,x			ora 	IM1,x
.366f	15 02		ora $02,x			ora 	IM2,x
.3671	60		rts				rts
.3672					IFloatSetZero:
.3672	a9 00		lda #$00			lda 	#0
.3674					IFloatSetByte:
.3674	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3676	74 01		stz $01,x			stz 	IM1,x
.3678	74 02		stz $02,x			stz 	IM2,x
.367a	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.367c	60		rts				rts
.367d					IFloatNegate:
.367d	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.367f	49 40		eor #$40			eor 	#IFSign
.3681	95 03		sta $03,x			sta 	IExp,x
.3683	18		clc				clc
.3684	60		rts				rts
.3685					IFloatMantissaNegate:
.3685	38		sec				sec 								; when you want a real 2's complement negative value.
.3686	a9 00		lda #$00			lda 	#0
.3688	f5 00		sbc $00,x			sbc 	IM0,x
.368a	95 00		sta $00,x			sta 	IM0,x
.368c	a9 00		lda #$00			lda 	#0
.368e	f5 01		sbc $01,x			sbc 	IM1,x
.3690	95 01		sta $01,x			sta 	IM1,x
.3692	a9 00		lda #$00			lda 	#0
.3694	f5 02		sbc $02,x			sbc 	IM2,x
.3696	95 02		sta $02,x			sta 	IM2,x
.3698	60		rts				rts
.3699					IFloatShiftLeft:
.3699	18		clc				clc
.369a					IFloatRotateLeft:
.369a	36 00		rol $00,x			rol 	IM0,x
.369c	36 01		rol $01,x			rol 	IM1,x
.369e	36 02		rol $02,x			rol 	IM2,x
.36a0	60		rts				rts
.36a1					IFloatShiftRight:
.36a1	18		clc				clc
.36a2					IFloatRotateRight:
.36a2	76 02		ror $02,x			ror 	IM2,x
.36a4	76 01		ror $01,x			ror 	IM1,x
.36a6	76 00		ror $00,x			ror 	IM0,x
.36a8	60		rts				rts
.36a9					IFloatNormalise:
.36a9	20 6b 36	jsr $366b			jsr 	IFloatCheckZero 			; is it zero
.36ac	f0 18		beq $36c6			beq 	_IFNExitZero 				; if so exit
.36ae					_IFNLoop:
.36ae	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.36b0	29 c0		and #$c0			and 	#$C0
.36b2	c9 40		cmp #$40			cmp 	#$40
.36b4	f0 13		beq $36c9			beq 	_IFNExitOkay 				; if so , then we are done.
.36b6	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.36b8	29 3f		and #$3f			and 	#$3F
.36ba	c9 20		cmp #$20			cmp 	#$20
.36bc	f0 0b		beq $36c9			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.36be	20 df 36	jsr $36df			jsr 	IFloatDecExponent
.36c1	20 99 36	jsr $3699			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.36c4	80 e8		bra $36ae			bra 	_IFNLoop
.36c6					_IFNExitZero:
.36c6	20 72 36	jsr $3672			jsr 	IFloatSetZero 				; set the result to zero
.36c9					_IFNExitOkay:
.36c9	18		clc				clc  								; return with CC.
.36ca	60		rts				rts
.36cb					IFloatIncExponent:
.36cb	b5 03		lda $03,x			lda 	IExp,x
.36cd	48		pha				pha
.36ce	29 c0		and #$c0			and 	#$C0
.36d0	8d 29 07	sta $0729			sta 	IFXTemp
.36d3	68		pla				pla
.36d4	1a		inc a				inc 	a
.36d5	29 3f		and #$3f			and 	#$3F
.36d7	48		pha				pha
.36d8	0d 29 07	ora $0729			ora 	IFXTemp
.36db	95 03		sta $03,x			sta 	IExp,x
.36dd	68		pla				pla
.36de	60		rts				rts
.36df					IFloatDecExponent:
.36df	b5 03		lda $03,x			lda 	IExp,x
.36e1	48		pha				pha
.36e2	29 c0		and #$c0			and 	#$C0
.36e4	8d 29 07	sta $0729			sta 	IFXTemp
.36e7	68		pla				pla
.36e8	3a		dec a				dec 	a
.36e9	29 3f		and #$3f			and 	#$3F
.36eb	48		pha				pha
.36ec	0d 29 07	ora $0729			ora 	IFXTemp
.36ef	95 03		sta $03,x			sta 	IExp,x
.36f1	68		pla				pla
.36f2	60		rts				rts
.0729					IFXTemp:
>0729							.fill 	1
.36f3					IFloatBufferReset:
.36f3	9c 2a 07	stz $072a			stz 	IFBufferCount
.36f6	9c 2b 07	stz $072b			stz 	IFBuffer
.36f9	60		rts				rts
.36fa					IFloatGetBufferAddress:
.36fa	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.36fc	a2 2a		ldx #$2a			ldx 	#(IFBufferCount & $FF)
.36fe	ad 2a 07	lda $072a			lda 	IFBufferCount
.3701	60		rts				rts
.3702					IFloatBufferWrite:
.3702	da		phx				phx
.3703	ae 2a 07	ldx $072a			ldx 	IFBufferCount
.3706	9d 2b 07	sta $072b,x			sta 	IFBuffer,x
.3709	9e 2c 07	stz $072c,x			stz 	IFBuffer+1,x
.370c	ee 2a 07	inc $072a			inc 	IFBufferCount
.370f	fa		plx				plx
.3710	60		rts				rts
.3711					IFloatStripTrailingZeros:
.3711	ae 2a 07	ldx $072a			ldx 	IFBufferCount
.3714	bd 2a 07	lda $072a,x			lda 	IFBuffer-1,x
.3717	c9 30		cmp #$30			cmp		#"0"
.3719	d0 0f		bne $372a			bne 	_IFSTExit
.371b	bd 29 07	lda $0729,x			lda 	IFBuffer-2,x
.371e	c9 2e		cmp #$2e			cmp 	#"."
.3720	f0 08		beq $372a			beq 	_IFSTExit
.3722	ce 2a 07	dec $072a			dec 	IFBufferCount
.3725	9e 2a 07	stz $072a,x			stz 	IFBuffer-1,x
.3728	80 e7		bra $3711			bra 	IFloatStripTrailingZeros
.372a					_IFSTExit:
.372a	60		rts				rts
.072a					IFBufferCount:
>072a							.fill 	1
.072b					IFBuffer:
>072b							.fill 	25
.372b					IFloatCheckRange:
.372b	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.372d	09 40		ora #$40			ora 	#IFSign
.372f	85 0b		sta $0b				sta 	IFR0+IExp
.3731	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.3733	20 6a 30	jsr $306a			jsr 	IFloatAdd 					; add allowed to error.
.3736	a2 08		ldx #$08			ldx 	#IFR0
.3738	20 6b 36	jsr $366b			jsr 	IFloatCheckZero 			; error if < 0
.373b	f0 06		beq $3743			beq 	_IFAOkay
.373d	a5 0b		lda $0b				lda 	IFR0+IExp
.373f	29 40		and #$40			and 	#IFSign
.3741	d0 01		bne $3744			bne 	_IFAFail
.3743					_IFAOkay:
.3743	60		rts				rts
.3744					_IFAFail:
.3744	38		sec				sec
.3745	68		pla				pla 								; get address - 2
.3746	e9 02		sbc #$02			sbc 	#2
.3748	aa		tax				tax
.3749	68		pla				pla
.374a	e9 00		sbc #$00			sbc 	#0
.374c	a8		tay				tay
.374d	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.374f					_IFAStop:
>374f	db						.byte 	$DB 						; display an error AA ADR ADR
.3750	80 fd		bra $374f			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
