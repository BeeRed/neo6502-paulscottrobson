
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$6000" -D "ENDMEMORY=\$B000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Wed Jun  7 02:09:40 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$6000					BASICCODE=$6000
=$b000					ENDMEMORY=$B000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					rTemp1:
>000a							.fill 	2
.000c					iTemp0:
>000c							.fill 	2
.000e					IFR0:
>000e							.fill 	4
.0012					IFR1:
>0012							.fill 	4
.0016					IFR2:
>0016							.fill 	4
.001a					IFRTemp:
>001a							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 b0		ldy #$b0			ldy 	#ENDMEMORY >> 8
.1004	20 e9 1d	jsr $1de9			jsr 	PGMSetBaseAddress
.1007	20 e4 28	jsr $28e4			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c 89 13	jmp $1389			jmp 	Command_RUN
.1012	4c 73 13	jmp $1373			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001e					codePtr:
>001e							.fill 	2
.0020					zTemp0:
>0020							.fill 	2
.0022					zTemp1:
>0022							.fill 	2
.0024					zTemp2:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber
.1018	a2 0e		ldx #$0e			ldx 	#IFR0
.101a	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c 0a 24	jmp $240a		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	20 fc 1d	jsr $1dfc			jsr 	PGMEndProgram 				; end program => zTemp0
.1026	64 26		stz $26				stz 	freeMemory 					; start on next free page
.1028	a5 21		lda $21				lda 	zTemp0+1
.102a	1a		inc a				inc 	a
.102b	85 27		sta $27				sta 	freeMemory+1
.102d	20 83 28	jsr $2883			jsr 	VARClearHashTables
.1030	ad 16 05	lda $0516			lda 	PGMEndMemoryHigh
.1033	20 c0 25	jsr $25c0			jsr 	StackReset
.1036	20 1f 26	jsr $261f			jsr 	StringSystemInitialise
.1039	20 21 23	jsr $2321			jsr 	ScanProcedures
.103c	60		rts				rts
.103d					AllocateMemory:
.103d	5a		phy				phy 								; save Y
.103e	a4 26		ldy $26				ldy 	freeMemory 					; save addr.low
.1040	5a		phy				phy
.1041	a4 27		ldy $27				ldy 	freeMemory+1 				; save addr.high
.1043	5a		phy				phy
.1044	a8		tay				tay 								; count is now in XY
.1045					_AllocateLoop:
.1045	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1047	d0 04		bne $104d			bne 	_AllocateOne
.1049	c0 00		cpy #$00			cpy 	#0
.104b	f0 15		beq $1062			beq 	_AllocateExit
.104d					_AllocateOne:
.104d	a9 00		lda #$00			lda 	#0 							; zero byte
.104f	92 26		sta ($26)			sta 	(freeMemory)
.1051	e6 26		inc $26				inc 	freeMemory 					; bump pointer
.1053	d0 05		bne $105a			bne 	_AllocateSkipCarry
.1055	e6 27		inc $27				inc 	freeMemory+1
.1057	20 66 10	jsr $1066			jsr 	ClearCheckMemory
.105a					_AllocateSkipCarry:
.105a	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.105c	d0 01		bne $105f			bne 	_AllocateSkipBorrow
.105e	ca		dex				dex
.105f					_AllocateSkipBorrow:
.105f	88		dey				dey
.1060	80 e3		bra $1045			bra 	_AllocateLoop
.1062					_AllocateExit:
.1062	fa		plx				plx 								; restore address
.1063	68		pla				pla
.1064	7a		ply				ply 								; restore Y
.1065	60		rts				rts
.1066					ClearCheckMemory:
.1066	a5 27		lda $27				lda 	freeMemory+1
.1068	1a		inc a				inc 	a
.1069	1a		inc a				inc 	a
.106a	cd 1e 06	cmp $061e			cmp 	stringMemory+1
.106d	b0 01		bcs $1070			bcs  	_CCMError
.106f	60		rts				rts
.1070					_CCMError:
.1070	4c a4 24	jmp $24a4		jmp	ErrorV_memory
.0026					freeMemory:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1073					CommandDIM:
.1073	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.1075	29 c0		and #$c0			and 	#$C0
.1077	c9 40		cmp #$40			cmp 	#$40
.1079	d0 39		bne $10b4			bne 	_CDSyntax
.107b	20 3a 28	jsr $283a			jsr 	VARGetInfo 					; get information
.107e	ad 26 06	lda $0626			lda 	VARType 					; check array.
.1081	29 02		and #$02			and 	#2
.1083	f0 2f		beq $10b4			beq 	_CDSyntax
.1085	20 ec 27	jsr $27ec			jsr 	VARFind 					; does it already exist
.1088	b0 2d		bcs $10b7			bcs 	_CDExists
.108a	20 98 27	jsr $2798			jsr 	VARCreate 					; create it - returns data ptr in XA
.108d	da		phx				phx 								; save target address
.108e	48		pha				pha
.108f	ad 26 06	lda $0626			lda 	VARType 					; type ID.
.1092	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1094	20 ba 10	jsr $10ba			jsr 	CreateArray 				; create array to XA
.1097	84 22		sty $22				sty 	zTemp1 						; save Y
.1099	7a		ply				ply 								; restore target to zTemp0
.109a	84 20		sty $20				sty 	zTemp0
.109c	7a		ply				ply
.109d	84 21		sty $21				sty 	zTemp0+1
.109f	92 20		sta ($20)			sta 	(zTemp0) 					; save new array
.10a1	a0 01		ldy #$01			ldy 	#1
.10a3	8a		txa				txa
.10a4	91 20		sta ($20),y			sta 	(zTemp0),y
.10a6	a4 22		ldy $22				ldy 	zTemp1 						; restore zTemp1
.10a8	20 51 25	jsr $2551			jsr 	ERRCheckRParen 				; check )
.10ab	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10ad	c8		iny				iny
.10ae	c9 99		cmp #$99			cmp 	#PR_COMMA
.10b0	f0 c1		beq $1073			beq 	CommandDIM
.10b2	88		dey				dey
.10b3	60		rts				rts
.10b4					_CDSyntax:
.10b4	4c b4 23	jmp $23b4		jmp	ErrorV_syntax
.10b7					_CDExists:
.10b7	4c 7c 24	jmp $247c		jmp	ErrorV_redefine
.10ba					CreateArray:
.10ba	8d 03 05	sta $0503			sta 	CAType						; save type
.10bd	20 e1 15	jsr $15e1			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10c0	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10c2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10c4	f0 04		beq $10ca			beq 	_CATwoDimensions
.10c6	20 16 11	jsr $1116			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10c9	60		rts				rts
.10ca					_CATwoDimensions:
.10ca	a5 0f		lda $0f				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10cc	8d 05 05	sta $0505			sta 	CADim1+1
.10cf	a5 0e		lda $0e				lda 	IFR0+IM0
.10d1	8d 04 05	sta $0504			sta 	CADim1+0
.10d4	20 59 25	jsr $2559			jsr 	ERRCheckComma 				; check comma
.10d7	20 e1 15	jsr $15e1			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10da	5a		phy				phy 								; save Y position
.10db	18		clc				clc 								; allocate the outer array of pointers.
.10dc	ae 05 05	ldx $0505			ldx 	CADim1+1
.10df	ad 04 05	lda $0504			lda 	CADim1
.10e2	20 55 11	jsr $1155			jsr 	CSAAllocate 				; allocate the outer array
.10e5	da		phx				phx									; save this address on the stack
.10e6	48		pha				pha
.10e7	86 25		stx $25				stx 	zTemp2+1					; and in zTemp2
.10e9	85 24		sta $24				sta 	zTemp2
.10eb					_CACreateSubLoop:
.10eb	38		sec				sec
.10ec	20 16 11	jsr $1116			jsr 	CreateSingleArray 			; create data array of required size.
.10ef	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10f1	91 24		sta ($24),y			sta 	(zTemp2),y
.10f3	8a		txa				txa
.10f4	c8		iny				iny
.10f5	91 24		sta ($24),y			sta 	(zTemp2),y
.10f7	18		clc				clc  								; next slot.
.10f8	a5 24		lda $24				lda 	zTemp2
.10fa	69 02		adc #$02			adc 	#2
.10fc	85 24		sta $24				sta 	zTemp2
.10fe	90 02		bcc $1102			bcc 	_CACNoCarry
.1100	e6 25		inc $25				inc 	zTemp2+1
.1102					_CACNoCarry:
.1102	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1105	d0 03		bne $110a			bne 	_CACNoBorrow
.1107	ce 05 05	dec $0505			dec 	CADim1+1
.110a					_CACNoBorrow:
.110a	ce 04 05	dec $0504			dec 	CADim1
.110d	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1110	10 d9		bpl $10eb			bpl 	_CACreateSubLoop
.1112	68		pla				pla
.1113	fa		plx				plx
.1114	7a		ply				ply
.1115	60		rts				rts
.1116					CreateSingleArray:
.1116	5a		phy				phy
.1117	38		sec				sec 								; allocate memory block all zeros.
.1118	a5 0e		lda $0e				lda 	IFR0+IM0
.111a	a6 0f		ldx $0f				ldx 	IFR0+IM1
.111c	20 55 11	jsr $1155			jsr 	CSAAllocate
.111f	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1122	f0 2f		beq $1153			beq 	_CSANoInit
.1124	da		phx				phx 								; save address of new array
.1125	48		pha				pha
.1126	85 20		sta $20				sta 	zTemp0 						; address in zTemp0
.1128	86 21		stx $21				stx 	zTemp0+1
.112a	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.112c	b1 20		lda ($20),y			lda 	(zTemp0),y
.112e	a8		tay				tay
.112f	b2 20		lda ($20)			lda 	(zTemp0)
.1131	aa		tax				tax
.1132					_CSAEraseString:
.1132	5a		phy				phy
.1133	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1135	a9 80		lda #$80			lda 	#$80
.1137	91 20		sta ($20),y			sta 	(zTemp0),y
.1139	7a		ply				ply
.113a	18		clc				clc 								; add 4 to next slot.
.113b	a5 20		lda $20				lda 	zTemp0
.113d	69 04		adc #$04			adc 	#4
.113f	85 20		sta $20				sta 	zTemp0
.1141	90 02		bcc $1145			bcc 	_CSAENoCarry
.1143	e6 21		inc $21				inc 	zTemp0+1
.1145					_CSAENoCarry:
.1145	e0 00		cpx #$00			cpx 	#0
.1147	d0 01		bne $114a			bne 	_CSANoBorrow
.1149	88		dey				dey
.114a					_CSANoBorrow:
.114a	ca		dex				dex
.114b	d0 e5		bne $1132			bne 	_CSAEraseString
.114d	c0 00		cpy #$00			cpy 	#0
.114f	d0 e1		bne $1132			bne 	_CSAEraseString
.1151	68		pla				pla
.1152	fa		plx				plx
.1153					_CSANoInit:
.1153	7a		ply				ply
.1154	60		rts				rts
.1155					CSAAllocate:
.1155	08		php				php 								; save type flag.
.1156	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1157	d0 01		bne $115a			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1159	e8		inx				inx
.115a					_CSAANoCarry:
.115a	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.115c	b0 2e		bcs $118c			bcs 	_CSARange
.115e	28		plp				plp 								; restore type flag
.115f	08		php				php 								; save it back again.
.1160	da		phx				phx 								; save size.
.1161	48		pha				pha
.1162	86 21		stx $21				stx  	zTemp0+1 					; now in ztemp0+1:X
.1164	90 03		bcc $1169			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1166	0a		asl a				asl 	a
.1167	26 21		rol $21				rol 	zTemp0+1
.1169					_CSAATimes2:
.1169	0a		asl a				asl 	a
.116a	26 21		rol $21				rol 	zTemp0+1
.116c	18		clc				clc
.116d	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.116f	90 02		bcc $1173			bcc 	_CSAANoCarry2
.1171	e6 21		inc $21				inc 	zTemp0+1
.1173					_CSAANoCarry2:
.1173	a6 21		ldx $21				ldx 	zTemp0+1 					; XA is the bytes required.
.1175	20 3d 10	jsr $103d			jsr 	AllocateMemory 				; allocate memory to XA
.1178	86 21		stx $21				stx 	zTemp0+1 					; save pointers
.117a	85 20		sta $20				sta 	zTemp0
.117c	68		pla				pla  								; write element count to first 2 bytes
.117d	92 20		sta ($20)			sta 	(zTemp0)
.117f	68		pla				pla 								; msb of element count
.1180	28		plp				plp 								; CC if pointer array
.1181	b0 02		bcs $1185			bcs 	_CSAAIsData
.1183	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.1185					_CSAAIsData:
.1185	a0 01		ldy #$01			ldy 	#1
.1187	91 20		sta ($20),y			sta 	(zTemp0),y
.1189	a5 20		lda $20				lda 	zTemp0 						; fix XA back up again
.118b	60		rts				rts
.118c					_CSARange:
.118c	4c c5 23	jmp $23c5		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.118f					Command_Doke:
.118f	38		sec				sec
.1190	80 01		bra $1193			bra 	DPCommon
.1192					Command_Poke:
.1192	18		clc				clc
.1193					DPCommon:
.1193	08		php				php 								; CS if DOKE
.1194	20 e1 15	jsr $15e1			jsr 	EXPEvalInteger16 			; address
.1197	a5 0e		lda $0e				lda 	IFR0+IM0 					; push on stack
.1199	48		pha				pha
.119a	a5 0f		lda $0f				lda 	IFR0+IM1
.119c	48		pha				pha
.119d	20 59 25	jsr $2559			jsr 	ERRCheckComma 				; [dp]oke address,data
.11a0	20 e1 15	jsr $15e1			jsr 	EXPEvalInteger16
.11a3	68		pla				pla 								; get address back
.11a4	85 21		sta $21				sta 	zTemp0+1
.11a6	68		pla				pla
.11a7	85 20		sta $20				sta 	zTemp0
.11a9	a5 0e		lda $0e				lda 	IFR0+IM0
.11ab	92 20		sta ($20)			sta 	(zTemp0)
.11ad	28		plp				plp
.11ae	90 08		bcc $11b8			bcc 	_DPExit
.11b0	5a		phy				phy
.11b1	a5 0f		lda $0f				lda 	IFR0+IM1
.11b3	a0 01		ldy #$01			ldy 	#1
.11b5	91 20		sta ($20),y			sta 	(zTemp0),y
.11b7	7a		ply				ply
.11b8					_DPExit:
.11b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11b9					Command_Input:
.11b9	a9 ff		lda #$ff			lda 	#$FF
.11bb	8d 06 05	sta $0506			sta 	InputFlag
.11be	80 03		bra $11c3			bra 	Command_IP_Main
.11c0					Command_Print:
.11c0	9c 06 05	stz $0506			stz 	InputFlag
.11c3					Command_IP_Main:
.11c3	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11c4					_CPLoop:
.11c4	08		php				php 								; save last action flag
.11c5	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next character
.11c7	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11c9	f0 3e		beq $1209			beq 	_CPExit 					; without consuming
.11cb	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11cd	f0 3a		beq $1209			beq 	_CPExit
.11cf	68		pla				pla 								; throw last action flag
.11d0	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; next character and bump
.11d2	c8		iny				iny
.11d3	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11d5	f0 2f		beq $1206			beq 	_CPContinueWithSameLine
.11d7	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11d9	f0 26		beq $1201			beq 	_CPTab
.11db	88		dey				dey 								; undo the get.
.11dc	20 8f 15	jsr $158f			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11df	24 11		bit $11				bit 	IFR0+IExp 					; is it a number ?
.11e1	10 14		bpl $11f7			bpl 	_CPNumber
.11e3	5a		phy				phy
.11e4	18		clc				clc 								; string address to YX
.11e5	a5 0e		lda $0e				lda 	IFR0+IM0
.11e7	aa		tax				tax
.11e8	a5 0f		lda $0f				lda 	IFR0+IM1
.11ea	a8		tay				tay
.11eb	e8		inx				inx 								; point to 1st character
.11ec	d0 01		bne $11ef			bne 	_CPNoCarry
.11ee	c8		iny				iny
.11ef					_CPNoCarry:
.11ef	b2 0e		lda ($0e)			lda 	(IFR0+IM0)					; length to A
.11f1	20 12 12	jsr $1212			jsr 	CPPrintAYX 					; print AYX
.11f4	7a		ply				ply
.11f5	80 cc		bra $11c3			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11f7					_CPNumber:
.11f7	5a		phy				phy
.11f8	20 f6 2c	jsr $2cf6			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11fb	20 12 12	jsr $1212			jsr 	CPPrintAYX 					; print AYX
.11fe	7a		ply				ply
.11ff	80 c2		bra $11c3			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1201					_CPTab:
.1201	a9 09		lda #$09			lda 	#9 							; print TAB
.1203	20 28 12	jsr $1228			jsr 	CPPrintA
.1206					_CPContinueWithSameLine:
.1206	38		sec				sec 								; loop round with carry set, which
.1207	80 bb		bra $11c4			bra 	_CPLoop 					; will inhibit final CR
.1209					_CPExit:
.1209	28		plp				plp 								; get last action flag
.120a	b0 05		bcs $1211			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.120c	a9 0d		lda #$0d			lda 	#13 						; print new line
.120e	20 28 12	jsr $1228			jsr 	CPPrintA
.1211					_CPExit2:
.1211	60		rts				rts
.1212					CPPrintAYX:
.1212	86 20		stx $20				stx 	zTemp0
.1214	84 21		sty $21				sty 	zTemp0+1
.1216	aa		tax				tax
.1217	f0 0b		beq $1224			beq 	_CPPrintExit
.1219	a0 00		ldy #$00			ldy 	#0
.121b					_CPPrintAYXLoop:
.121b	b1 20		lda ($20),y			lda 	(zTemp0),y
.121d	20 28 12	jsr $1228			jsr 	CPPrintA
.1220	c8		iny				iny
.1221	ca		dex				dex
.1222	d0 f7		bne $121b			bne 	_CPPrintAYXLoop
.1224					_CPPrintExit:
.1224	60		rts				rts
.1225					CPInputA:
.1225	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.1228					CPPrintA:
.1228	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.122b					CommandLET:
.122b	20 57 16	jsr $1657			jsr 	EXPTermR0 					; get term
.122e	90 6d		bcc $129d			bcc 	CLError 					; must be a reference term.
.1230	a5 0e		lda $0e				lda 	IFR0+IM0 					; push address and type onto stack
.1232	48		pha				pha
.1233	a5 0f		lda $0f				lda 	IFR0+IM1
.1235	48		pha				pha
.1236	a5 11		lda $11				lda 	IFR0+IExp
.1238	48		pha				pha
.1239	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.123b	20 61 25	jsr $2561			jsr 	ERRCheckA
.123e	20 8f 15	jsr $158f			jsr 	EXPEvaluateExpression 		; right hand side.
.1241	68		pla				pla 								; type of l-expr
.1242	45 11		eor $11				eor 	IFR0+IExp 					; check types match
.1244	30 5a		bmi $12a0			bmi 	CLType
.1246	fa		plx				plx 	 							; pop target address to zTemp0
.1247	86 21		stx $21				stx 	zTemp0+1
.1249	fa		plx				plx
.124a	86 20		stx $20				stx 	zTemp0
.124c					AssignData:
.124c	a5 11		lda $11				lda 	IFR0+IExp 					; string assignment
.124e	30 15		bmi $1265			bmi 	_CLStringAssign
.1250	5a		phy				phy
.1251	a0 03		ldy #$03			ldy 	#3
.1253	91 20		sta ($20),y			sta 	(zTemp0),y
.1255	88		dey				dey
.1256	a5 10		lda $10				lda 	IFR0+IM2
.1258	91 20		sta ($20),y			sta 	(zTemp0),y
.125a	88		dey				dey
.125b	a5 0f		lda $0f				lda 	IFR0+IM1
.125d	91 20		sta ($20),y			sta 	(zTemp0),y
.125f	a5 0e		lda $0e				lda 	IFR0+IM0
.1261	92 20		sta ($20)			sta 	(zTemp0)
.1263	7a		ply				ply
.1264	60		rts				rts
.1265					_CLStringAssign:
.1265	5a		phy				phy
.1266	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1268	b1 20		lda ($20),y			lda 	(zTemp0),y
.126a	12 20		ora ($20)			ora 	(zTemp0)
.126c	f0 23		beq $1291			beq 	_CLConcreteString
.126e	b2 20		lda ($20)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1270	85 22		sta $22				sta 	zTemp1
.1272	b1 20		lda ($20),y			lda 	(zTemp0),y
.1274	85 23		sta $23				sta 	zTemp1+1
.1276	b2 22		lda ($22)			lda 	(zTemp1) 					; bytes available in the new slot
.1278	38		sec				sec 								; we want 3 for slot size, status, string size.
.1279	e9 03		sbc #$03			sbc 	#3
.127b	d2 0e		cmp ($0e)			cmp 	(IFR0) 						; compare against string size.
.127d	90 12		bcc $1291			bcc 	_CLConcreteString 			; if so, concrete the string again.
.127f	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1281	1a		inc a				inc 	a
.1282	aa		tax				tax
.1283	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1285					_CLReplaceString:
.1285	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; copy new string into previous space.
.1287	c8		iny				iny
.1288	c8		iny				iny
.1289	91 22		sta ($22),y			sta 	(zTemp1),y
.128b	88		dey				dey
.128c	ca		dex				dex
.128d	d0 f6		bne $1285			bne 	_CLReplaceString
.128f	80 0a		bra $129b			bra 	_CLExit
.1291					_CLConcreteString:
.1291	20 d4 25	jsr $25d4			jsr 	StringConcrete  			; concreted string in XA.
.1294	a0 01		ldy #$01			ldy 	#1 							; store the address
.1296	92 20		sta ($20)			sta 	(zTemp0)
.1298	8a		txa				txa
.1299	91 20		sta ($20),y			sta 	(zTemp0),y
.129b					_CLExit:
.129b	7a		ply				ply
.129c	60		rts				rts
.129d					CLError:
.129d	4c e7 24	jmp $24e7		jmp	ErrorV_variable
.12a0					CLType:
.12a0	4c e4 23	jmp $23e4		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.12a3					Command_LIST:
.12a3	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.12a6	9c 08 05	stz $0508			stz 	CLFrom+1
.12a9	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.12ab	c9 99		cmp #$99			cmp 	#PR_COMMA
.12ad	f0 1d		beq $12cc			beq 	_CLToLine
.12af	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12b1	f0 37		beq $12ea			beq 	_CLDefaultTo
.12b3	20 e1 15	jsr $15e1			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.12b6	a5 0e		lda $0e				lda 	IFR0+IM0
.12b8	8d 07 05	sta $0507			sta 	CLFrom
.12bb	8d 09 05	sta $0509			sta 	CLTo
.12be	a5 0f		lda $0f				lda 	IFR0+IM1
.12c0	8d 08 05	sta $0508			sta 	CLFrom+1
.12c3	8d 0a 05	sta $050a			sta 	CLTo+1
.12c6	b1 1e		lda ($1e),y			lda 	(codePtr),y
.12c8	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.12ca	f0 26		beq $12f2			beq 	_CLList
.12cc					_CLToLine:
.12cc	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.12ce	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.12d0	f0 18		beq $12ea			beq 	_CLDefaultTo
.12d2	20 59 25	jsr $2559			jsr 	ERRCheckComma 				; sep comma
.12d5	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.12d7	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.12d9	f0 0f		beq $12ea			beq 	_CLDefaultTo
.12db	20 e1 15	jsr $15e1			jsr 	EXPEvalInteger16 			; there's a To value.
.12de	a5 0e		lda $0e				lda 	IFR0+IM0
.12e0	8d 09 05	sta $0509			sta 	CLTo
.12e3	a5 0f		lda $0f				lda 	IFR0+IM1
.12e5	8d 0a 05	sta $050a			sta 	CLTo+1
.12e8	80 08		bra $12f2			bra 	_CLList
.12ea					_CLDefaultTo:
.12ea	a9 ff		lda #$ff			lda 	#$FF
.12ec	8d 09 05	sta $0509			sta 	CLTo
.12ef	8d 0a 05	sta $050a			sta 	CLTo+1
.12f2					_CLList:
.12f2	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.12f5	85 1f		sta $1f				sta 	codePtr+1
.12f7	64 1e		stz $1e				stz 	codePtr
.12f9	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.12fb	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.12fd	20 4b 1c	jsr $1c4b			jsr 	TOKSetDetokeniseOutput
.1300					_CLLoop:
.1300	b2 1e		lda ($1e)			lda 	(codePtr) 					; finished
.1302	f0 4a		beq $134e			beq 	_CLExit
.1304	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1307	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.130a	d0 45		bne $1351			bne 	_CLBreak
.130c	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.130e	20 54 13	jsr $1354			jsr 	_CLCompareLine
.1311	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1313	f0 2c		beq $1341			beq 	_CLNext
.1315	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1317	20 54 13	jsr $1354			jsr 	_CLCompareLine
.131a	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.131c	f0 23		beq $1341			beq 	_CLNext
.131e	a0 02		ldy #$02			ldy 	#2 							; print line #
.1320	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1322	aa		tax				tax
.1323	88		dey				dey
.1324	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1326	20 b2 26	jsr $26b2			jsr 	WriteIntXA
.1329	a9 20		lda #$20			lda 	#32
.132b	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.132e	a4 1f		ldy $1f				ldy 	codePtr+1 					; point YX to tokenised code/
.1330	a5 1e		lda $1e				lda 	codePtr
.1332	18		clc				clc
.1333	69 03		adc #$03			adc 	#3
.1335	aa		tax				tax
.1336	90 01		bcc $1339			bcc 	_CLNoCarry2
.1338	c8		iny				iny
.1339					_CLNoCarry2:
.1339	20 06 1c	jsr $1c06			jsr 	TOKDetokenise
.133c	a9 0d		lda #$0d			lda 	#13	 						; next line
.133e	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.1341					_CLNext:
.1341	18		clc				clc 								; advance to next line.
.1342	b2 1e		lda ($1e)			lda 	(codePtr)
.1344	65 1e		adc $1e				adc 	codePtr
.1346	85 1e		sta $1e				sta 	codePtr
.1348	90 02		bcc $134c			bcc 	_CLNoCarry
.134a	e6 1f		inc $1f				inc 	codePtr+1
.134c					_CLNoCarry:
.134c	80 b2		bra $1300			bra 	_CLLoop
.134e					_CLExit:
.134e	4c d1 26	jmp $26d1			jmp 	WarmStart
.1351					_CLBreak:
.1351	4c 3f 25	jmp $253f		jmp	ErrorV_break
.1354					_CLCompareLine:
.1354	a0 01		ldy #$01			ldy 	#1
.1356	38		sec				sec
.1357	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1359	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.135c	85 20		sta $20				sta 	zTemp0
.135e	c8		iny				iny
.135f	b1 1e		lda ($1e),y			lda 	(codePtr),y
.1361	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.1364	90 0a		bcc $1370			bcc 	_CLIsNegative
.1366	d0 05		bne $136d			bne 	_CLIsPositive
.1368	a5 20		lda $20				lda 	zTemp0
.136a	d0 01		bne $136d			bne 	_CLIsPositive
.136c	60		rts				rts
.136d					_CLIsPositive:
.136d	a9 01		lda #$01			lda 	#1
.136f	60		rts				rts
.1370					_CLIsNegative:
.1370	a9 ff		lda #$ff			lda 	#255
.1372	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1373					Command_NEW:
.1373	20 f0 1d	jsr $1df0			jsr 	PGMNewProgram
.1376	20 23 10	jsr $1023			jsr 	Command_CLEAR
.1379	4c f4 13	jmp $13f4			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.137c					Command_REM:
.137c					Command_REM2:
.137c	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; optional string parameter
.137e	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1380	d0 06		bne $1388			bne 	_CRExit
.1382	c8		iny				iny 								; skip over it, it's a comment.
.1383	98		tya				tya
.1384	38		sec				sec
.1385	71 1e		adc ($1e),y			adc 	(codePtr),y
.1387	a8		tay				tay
.1388					_CRExit:
.1388	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1389					Command_RUN:
.1389	20 23 10	jsr $1023			jsr 	Command_CLEAR 				; clear everything out.
.138c	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.138f	85 1f		sta $1f				sta 	codePtr+1
.1391	64 1e		stz $1e				stz 	codePtr
.1393	80 0b		bra $13a0			bra 	RUNNewLine
.1395					RUNEndOfLine:
.1395	18		clc				clc 								; advance to next line.
.1396	b2 1e		lda ($1e)			lda 	(codePtr)
.1398	65 1e		adc $1e				adc 	codePtr
.139a	85 1e		sta $1e				sta 	codePtr
.139c	90 02		bcc $13a0			bcc 	_RELNoCarry
.139e	e6 1f		inc $1f				inc 	codePtr+1
.13a0					_RELNoCarry:
.13a0					RUNNewLine:
.13a0	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.13a2	9a		txs				txs
.13a3	b2 1e		lda ($1e)			lda 	(codePtr) 					; check off end of program
.13a5	f0 4d		beq $13f4			beq 	Command_END
.13a7	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.13a9	b1 1e		lda ($1e),y			lda 	(codePtr),y
.13ab	8d 21 06	sta $0621			sta 	ERRLine
.13ae	c8		iny				iny
.13af	b1 1e		lda ($1e),y			lda 	(codePtr),y
.13b1	8d 22 06	sta $0622			sta 	ERRLine+1
.13b4	c8		iny				iny 								; offset into codePtr for start of line.
.13b5					RUNNewCommand:
.13b5	9c 1c 06	stz $061c			stz 	stringInitialised 			; reset string system.
.13b8	ce 0b 05	dec $050b			dec 	checkCounter
.13bb	d0 0a		bne $13c7			bne 	_RNCNoCheck
.13bd	5a		phy				phy 								; keyboard check.
.13be	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.13c1	7a		ply				ply
.13c2	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.13c5	d0 1e		bne $13e5			bne 	_RUNBreak
.13c7					_RNCNoCheck:
.13c7	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token
.13c9	10 1d		bpl $13e8			bpl		_RUNNotToken 				; probably an identifier
.13cb	c8		iny				iny 								; consume token
.13cc	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.13ce	f0 e5		beq $13b5			beq 	RUNNewCommand
.13d0	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.13d2	b0 0e		bcs $13e2			bcs 	_RUNSyntax
.13d4	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.13d6	90 0a		bcc $13e2			bcc 	_RUNSyntax
.13d8	0a		asl a				asl 	a 							; double into X.
.13d9	aa		tax				tax
.13da	20 df 13	jsr $13df			jsr 	_RUNDispatchMain			; call the main dispatcher
.13dd	80 d6		bra $13b5			bra 	RUNNewCommand
.13df					_RUNDispatchMain:
.13df	7c 06 1b	jmp ($1b06,x)			jmp 	(VectorTable,x)
.13e2					_RUNSyntax:
.13e2	4c b4 23	jmp $23b4		jmp	ErrorV_syntax
.13e5					_RUNBreak:
.13e5	4c 3f 25	jmp $253f		jmp	ErrorV_break
.13e8					_RUNNotToken:
.13e8	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.13ea	90 f6		bcc $13e2			bcc 	_RUNSyntax
.13ec	20 2b 12	jsr $122b			jsr 	CommandLET 					; assignment
.13ef	80 c4		bra $13b5			bra 	RUNNewCommand 				; loop round.
.13f1					Command_Shift_Handler:
.13f1	4c f6 23	jmp $23f6		jmp	ErrorV_unimplemented
.13f4					Command_END:
.13f4	4c d1 26	jmp $26d1			jmp 	WarmStart
.050b					checkCounter:
>050b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.13f7					Command_STOP:
.13f7	4c 58 24	jmp $2458		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.13fa					Command_Sys:
.13fa	20 e1 15	jsr $15e1			jsr 	EXPEvalInteger16 			; execution address
.13fd	5a		phy				phy
.13fe	ad 69 06	lda $0669			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1401	ae c5 06	ldx $06c5			ldx 	('X'-'A')*4 + FastVariables
.1404	ac c9 06	ldy $06c9			ldy 	('Y'-'A')*4 + FastVariables
.1407	20 0c 14	jsr $140c			jsr 	_CSCallIFR0 				; call the code
.140a	7a		ply				ply
.140b	60		rts				rts
.140c					_CSCallIFR0:
.140c	6c 0e 00	jmp ($000e)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.140f					NoExec01:
.140f					NoExec02:
.140f					NoExec03:
.140f					NoExec04:
.140f					NoExec05:
.140f					NoExec06:
.140f					NoExec07:
.140f					NoExec08:
.140f	4c b4 23	jmp $23b4		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1412					EXPBinAdd:
.1412	24 11		bit $11				bit 	IFR0+IExp
.1414	30 6f		bmi $1485			bmi 	EXPConcatenate
.1416	a2 12		ldx #$12			ldx 	#IFR1
.1418	4c ef 28	jmp $28ef			jmp 	IFloatAdd
.141b					EXPBinSub:
.141b	24 11		bit $11				bit 	IFR0+IExp
.141d	30 3f		bmi $145e			bmi 	EXPTypeError
.141f	a2 12		ldx #$12			ldx 	#IFR1
.1421	4c e8 28	jmp $28e8			jmp 	IFloatSubtract
.1424					EXPBinMul:
.1424	24 11		bit $11				bit 	IFR0+IExp
.1426	30 36		bmi $145e			bmi 	EXPTypeError
.1428	a2 12		ldx #$12			ldx 	#IFR1
.142a	4c 99 29	jmp $2999			jmp 	IFloatMultiply
.142d					EXPBinFDiv:
.142d	24 11		bit $11				bit 	IFR0+IExp
.142f	30 2d		bmi $145e			bmi 	EXPTypeError
.1431	a2 12		ldx #$12			ldx 	#IFR1
.1433	20 1c 2c	jsr $2c1c			jsr 	IFloatDivideFloat
.1436	b0 0f		bcs $1447			bcs 	EXPDZero
.1438	60		rts				rts
.1439					EXPBinIDiv:
.1439	24 11		bit $11				bit 	IFR0+IExp
.143b	30 21		bmi $145e			bmi 	EXPTypeError
.143d	a2 12		ldx #$12			ldx 	#IFR1
.143f	20 1c 2c	jsr $2c1c			jsr 	IFloatDivideFloat
.1442	b0 03		bcs $1447			bcs 	EXPDZero
.1444	4c f9 2b	jmp $2bf9			jmp 	IFloatIntegerR0
.1447					EXPDZero:
.1447	4c 2d 24	jmp $242d		jmp	ErrorV_divzero
.144a					EXPBinIMod:
.144a	24 11		bit $11				bit 	IFR0+IExp
.144c	30 10		bmi $145e			bmi 	EXPTypeError
.144e	a2 12		ldx #$12			ldx 	#IFR1
.1450	5a		phy				phy
.1451	20 31 2b	jsr $2b31			jsr 	IFPreProcessBitwise 		; set up everything.
.1454	d0 05		bne $145b			bne 	EXPDRange
.1456	20 6a 2a	jsr $2a6a			jsr 	IFloatModulusInteger
.1459	7a		ply				ply
.145a	60		rts				rts
.145b					EXPDRange:
.145b	4c c5 23	jmp $23c5		jmp	ErrorV_range
.145e					EXPTypeError:
.145e	4c e4 23	jmp $23e4		jmp	ErrorV_type
.1461					EXPBinAnd:
.1461	24 11		bit $11				bit 	IFR0+IExp
.1463	30 f9		bmi $145e			bmi 	EXPTypeError
.1465	a2 12		ldx #$12			ldx 	#IFR1
.1467	20 ec 2a	jsr $2aec			jsr 	IFloatBitwiseAnd
.146a	b0 ef		bcs $145b			bcs 	EXPDRange
.146c	60		rts				rts
.146d					EXPBinOr:
.146d	24 11		bit $11				bit 	IFR0+IExp
.146f	30 ed		bmi $145e			bmi 	EXPTypeError
.1471	a2 12		ldx #$12			ldx 	#IFR1
.1473	20 03 2b	jsr $2b03			jsr 	IFloatBitwiseOr
.1476	b0 e3		bcs $145b			bcs 	EXPDRange
.1478	60		rts				rts
.1479					EXPBinXor:
.1479	24 11		bit $11				bit 	IFR0+IExp
.147b	30 e1		bmi $145e			bmi 	EXPTypeError
.147d	a2 12		ldx #$12			ldx 	#IFR1
.147f	20 1a 2b	jsr $2b1a			jsr 	IFloatBitwiseXor
.1482	b0 d7		bcs $145b			bcs 	EXPDRange
.1484	60		rts				rts
.1485					EXPConcatenate:
.1485	18		clc				clc
.1486	b2 0e		lda ($0e)			lda 	(IFR0) 	 					; work out total length
.1488	72 12		adc ($12)			adc 	(IFR1)
.148a	b0 2d		bcs $14b9			bcs 	_EXPCError
.148c	a6 0e		ldx $0e				ldx 	IFR0 						; push R0 string on stack.
.148e	da		phx				phx
.148f	a6 0f		ldx $0f				ldx 	IFR0+1
.1491	da		phx				phx
.1492	20 47 26	jsr $2647			jsr 	StringTempAllocate 			; allocate string, set up return
.1495	a6 13		ldx $13				ldx 	IFR1+1 						; copy first string.
.1497	a5 12		lda $12				lda 	IFR1
.1499	20 a2 14	jsr $14a2			jsr 	_EXPCCopyXA
.149c	fa		plx				plx 								; copy second string
.149d	68		pla				pla
.149e	20 a2 14	jsr $14a2			jsr 	_EXPCCopyXA
.14a1	60		rts				rts
.14a2					_EXPCCopyXA:
.14a2	86 21		stx $21				stx 	zTemp0+1 					; save address to zTemp0
.14a4	85 20		sta $20				sta 	zTemp0
.14a6	b2 20		lda ($20)			lda 	(zTemp0)					; length
.14a8	f0 0e		beq $14b8			beq 	_EXPCCExit 					; nothing.
.14aa	aa		tax				tax 								; count
.14ab	5a		phy				phy 								; start positioin
.14ac	a0 01		ldy #$01			ldy 	#1
.14ae					_EXPCCLoop:
.14ae	b1 20		lda ($20),y			lda 	(zTemp0),y 					; write characters one at a time.
.14b0	20 7c 26	jsr $267c			jsr 	StringTempWrite
.14b3	c8		iny				iny
.14b4	ca		dex				dex
.14b5	d0 f7		bne $14ae			bne 	_EXPCCLoop
.14b7	7a		ply				ply
.14b8					_EXPCCExit:
.14b8	60		rts				rts
.14b9					_EXPCError:
.14b9	4c d1 24	jmp $24d1		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.14bc					EXPReturnTrue:
.14bc	a2 0e		ldx #$0e			ldx 	#IFR0
.14be	a9 01		lda #$01			lda 	#1
.14c0	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.14c3	20 04 2f	jsr $2f04			jsr 	IFloatNegate
.14c6	60		rts				rts
.14c7					EXPReturnFalse:
.14c7	a2 0e		ldx #$0e			ldx 	#IFR0
.14c9	4c f9 2e	jmp $2ef9			jmp 	IFloatSetZero
.14cc					EXPCompareEqual:
.14cc	20 02 15	jsr $1502			jsr 	EXPCompareBaseCode
.14cf	c9 00		cmp #$00			cmp 	#0
.14d1	f0 e9		beq $14bc			beq 	EXPReturnTrue
.14d3	80 f2		bra $14c7			bra 	EXPReturnFalse
.14d5					EXPCompareLess:
.14d5	20 02 15	jsr $1502			jsr 	EXPCompareBaseCode
.14d8	c9 ff		cmp #$ff			cmp 	#$FF
.14da	f0 e0		beq $14bc			beq 	EXPReturnTrue
.14dc	80 e9		bra $14c7			bra 	EXPReturnFalse
.14de					EXPCompareGreater:
.14de	20 02 15	jsr $1502			jsr 	EXPCompareBaseCode
.14e1	c9 01		cmp #$01			cmp 	#1
.14e3	f0 d7		beq $14bc			beq 	EXPReturnTrue
.14e5	80 e0		bra $14c7			bra 	EXPReturnFalse
.14e7					EXPCompareNotEqual:
.14e7	20 02 15	jsr $1502			jsr 	EXPCompareBaseCode
.14ea	c9 00		cmp #$00			cmp 	#0
.14ec	d0 ce		bne $14bc			bne 	EXPReturnTrue
.14ee	80 d7		bra $14c7			bra 	EXPReturnFalse
.14f0					EXPCompareLessEqual:
.14f0	20 02 15	jsr $1502			jsr 	EXPCompareBaseCode
.14f3	c9 01		cmp #$01			cmp 	#1
.14f5	d0 c5		bne $14bc			bne 	EXPReturnTrue
.14f7	80 ce		bra $14c7			bra 	EXPReturnFalse
.14f9					EXPCompareGreaterEqual:
.14f9	20 02 15	jsr $1502			jsr 	EXPCompareBaseCode
.14fc	c9 ff		cmp #$ff			cmp 	#$FF
.14fe	d0 bc		bne $14bc			bne 	EXPReturnTrue
.1500	80 c5		bra $14c7			bra 	EXPReturnFalse
.1502					EXPCompareBaseCode:
.1502	24 11		bit $11				bit 	IFR0+IExp 					; string compare ?
.1504	30 10		bmi $1516			bmi 	_EXCBCString
.1506	a2 12		ldx #$12			ldx 	#IFR1						; float compare
.1508	20 c7 2b	jsr $2bc7			jsr 	IFloatCompare
.150b	a5 0e		lda $0e				lda 	IFR0+IM0
.150d	f0 06		beq $1515			beq 	_EXCBCExit 					; return 0 if zero
.150f	24 11		bit $11				bit 	IFR0+IExp 					; return 1 if +ve
.1511	50 02		bvc $1515			bvc 	_EXCBCExit
.1513	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1515					_EXCBCExit:
.1515	60		rts				rts
.1516					_EXCBCString:
.1516	5a		phy				phy
.1517	b2 0e		lda ($0e)			lda 	(IFR0) 						; length of smaller of the two in X.
.1519	d2 12		cmp ($12)			cmp 	(IFR1)
.151b	90 02		bcc $151f			bcc 	_EXCBCSmaller
.151d	b2 12		lda ($12)			lda 	(IFR1)
.151f					_EXCBCSmaller:
.151f	aa		tax				tax
.1520	f0 0d		beq $152f			beq 	_EXCBCMatches 				; if zero common length matches
.1522	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1524					_EXCBCCheckSmallerMatches:
.1524	c8		iny				iny 								; compare directly as far as common length
.1525	38		sec				sec
.1526	b1 12		lda ($12),y			lda 	(IFR1),y
.1528	f1 0e		sbc ($0e),y			sbc 	(IFR0),y
.152a	d0 08		bne $1534			bne 	_EXCBCExit2
.152c	ca		dex				dex
.152d	d0 f5		bne $1524			bne 	_EXCBCCheckSmallerMatches
.152f					_EXCBCMatches:
.152f	38		sec				sec
.1530	b2 12		lda ($12)			lda 	(IFR1) 						; common length matches. If same length equal
.1532	f2 0e		sbc ($0e)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1534					_EXCBCExit2:
.1534	7a		ply				ply
.1535	c9 00		cmp #$00			cmp 	#0
.1537	f0 04		beq $153d			beq 	_EXCBCReturn
.1539	30 03		bmi $153e			bmi 	_EXCBCFF
.153b	a9 01		lda #$01			lda 	#1
.153d					_EXCBCReturn:
.153d	60		rts				rts
.153e					_EXCBCFF:
.153e	a9 ff		lda #$ff			lda 	#$FF
.1540	60		rts				rts
.1541					_EXCBCRange:
.1541	4c c5 23	jmp $23c5		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1544					EXPBinLeft:
.1544	a9 ff		lda #$ff			lda 	#$FF
.1546	8d 0c 05	sta $050c			sta 	EXPShiftLeftFlag
.1549	4c 4f 15	jmp $154f			jmp 	EXPShiftCommon
.154c					EXPBinRight:
.154c	9c 0c 05	stz $050c			stz 	EXPShiftLeftFlag
.154f					EXPShiftCommon:
.154f	a5 11		lda $11				lda 	IFR0+IExp 					; both integers
.1551	05 15		ora $15				ora 	IFR1+IExp
.1553	29 7f		and #$7f			and 	#$7F
.1555	d0 35		bne $158c			bne 	_EXPSRange
.1557	a5 0e		lda $0e				lda 	IFR0+IM0					; check shift >= 32
.1559	29 e0		and #$e0			and 	#$E0
.155b	05 0f		ora $0f				ora 	IFR0+IM1
.155d	05 10		ora $10				ora 	IFR0+IM2
.155f	d0 25		bne $1586			bne 	_EXPSShiftZero 				; if so return zero
.1561	5a		phy				phy
.1562	a5 0e		lda $0e				lda 	IFR0+IM0 					; get shift
.1564	29 1f		and #$1f			and 	#$1F
.1566	f0 17		beq $157f			beq 	_EXPSExit 					; exit if zero
.1568	a8		tay				tay
.1569					_EXPSLoop:
.1569	a2 12		ldx #$12			ldx 	#IFR1
.156b	2c 0c 05	bit $050c			bit 	EXPShiftLeftFlag
.156e	30 05		bmi $1575			bmi 	_EXPSShiftLeft
.1570	20 28 2f	jsr $2f28			jsr 	IFloatShiftRight
.1573	80 07		bra $157c			bra 	_EXPSContinue
.1575					_EXPSShiftLeft:
.1575	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1578	24 10		bit $10				bit 	IFR0+IM2 					; too many shifts
.157a	30 10		bmi $158c			bmi 	_EXPSRange
.157c					_EXPSContinue:
.157c	88		dey				dey
.157d	d0 ea		bne $1569			bne 	_EXPSLoop
.157f					_EXPSExit:
.157f	a2 12		ldx #$12			ldx 	#IFR1
.1581	20 8a 2e	jsr $2e8a			jsr 	IFloatCopyFromRegister
.1584	7a		ply				ply
.1585	60		rts				rts
.1586					_EXPSShiftZero:
.1586	a2 0e		ldx #$0e			ldx 	#IFR0
.1588	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.158b	60		rts				rts
.158c					_EXPSRange:
.158c	4c c5 23	jmp $23c5		jmp	ErrorV_range
.050c					EXPShiftLeftFlag:
>050c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.158f					EXPEvaluateExpression:
.158f	a9 00		lda #$00			lda 	#0 							; current precedence
.1591					EXPEvaluateExpressionPrecedenceA:
.1591	48		pha				pha
.1592	20 0c 16	jsr $160c			jsr 	EXPTermValueR0				; do first term.
.1595					_EELoop:
.1595	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1597	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1599	90 31		bcc $15cc			bcc 	_EEExit
.159b	aa		tax				tax 								; access the precedence of the operator.
.159c	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.159d	dd 5e 18	cmp $185e,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.15a0	b0 2b		bcs $15cd			bcs 	_EEExit2
.15a2	48		pha				pha 								; save current precedence.
.15a3	da		phx				phx 								; save operator
.15a4	c8		iny				iny 								; consume operator
.15a5	da		phx				phx
.15a6	a2 0e		ldx #$0e			ldx 	#IFR0 						; push R0 on the stack
.15a8	20 48 2e	jsr $2e48			jsr 	IFloatPushRx
.15ab	fa		plx				plx
.15ac	bd 5e 18	lda $185e,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.15af	20 91 15	jsr $1591			jsr 	EXPEvaluateExpressionPrecedenceA
.15b2	a2 12		ldx #$12			ldx 	#IFR1 						; pop LHS to R1.
.15b4	20 69 2e	jsr $2e69			jsr 	IFloatPullRx
.15b7	fa		plx				plx 								; operator
.15b8	a5 11		lda $11				lda 	IFR0+IExp 					; if check types match.
.15ba	45 15		eor $15				eor 	IFR1+IExp
.15bc	30 08		bmi $15c6			bmi 	_EEType
.15be					_EETypeOkay:
.15be	8a		txa				txa
.15bf	0a		asl a				asl 	a 							; double -> X
.15c0	aa		tax				tax
.15c1	20 c9 15	jsr $15c9			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.15c4	80 cf		bra $1595			bra 	_EELoop
.15c6					_EEType:
.15c6	4c e4 23	jmp $23e4		jmp	ErrorV_type
.15c9					_EECallBinary:
.15c9	7c 06 1b	jmp ($1b06,x)			jmp 	(VectorTable,x)
.15cc					_EEExit:
.15cc	68		pla				pla 								; throw precedence
.15cd					_EEExit2:
.15cd	18		clc				clc
.15ce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.15cf					EXPEvalNumber:
.15cf	20 8f 15	jsr $158f			jsr 	EXPEvaluateExpression
.15d2	24 11		bit $11				bit 	IFR0+IExp
.15d4	30 01		bmi $15d7			bmi 	EVUType
.15d6	60		rts				rts
.15d7					EVUType:
.15d7	4c e4 23	jmp $23e4		jmp	ErrorV_type
.15da					EXPEvalInteger:
.15da	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.15dd	20 f9 2b	jsr $2bf9			jsr 	IFloatIntegerR0
.15e0	60		rts				rts
.15e1					EXPEvalInteger16:
.15e1	20 da 15	jsr $15da			jsr 	EXPEvalInteger
.15e4	a5 10		lda $10				lda 	IFR0+IM2
.15e6	d0 21		bne $1609			bne 	EVURange
.15e8	a6 0f		ldx $0f				ldx 	IFR0+IM1
.15ea	a5 0e		lda $0e				lda 	IFR0+IM0
.15ec	60		rts				rts
.15ed					EXPEvalInteger8:
.15ed	20 da 15	jsr $15da			jsr 	EXPEvalInteger
.15f0	a5 10		lda $10				lda 	IFR0+IM2
.15f2	05 0f		ora $0f				ora 	IFR0+IM1
.15f4	d0 13		bne $1609			bne 	EVURange
.15f6	a5 0e		lda $0e				lda 	IFR0+IM0
.15f8	60		rts				rts
.15f9					EXPEvalString:
.15f9	20 8f 15	jsr $158f			jsr 	EXPEvaluateExpression
.15fc	24 11		bit $11				bit 	IFR0+IExp
.15fe	10 d7		bpl $15d7			bpl 	EVUType
.1600	a6 0f		ldx $0f				ldx 	IFR0+IM1
.1602	86 21		stx $21				stx 	zTemp0+1
.1604	a5 0e		lda $0e				lda 	IFR0+IM0
.1606	85 20		sta $20				sta 	zTemp0
.1608	60		rts				rts
.1609					EVURange:
.1609	4c c5 23	jmp $23c5		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.160c					EXPTermValueR0:
.160c	20 57 16	jsr $1657			jsr 	EXPTermR0 					; get term
.160f	90 45		bcc $1656			bcc 	_ETVNotReference 			; exit if value.
.1611	5a		phy				phy
.1612	a0 03		ldy #$03			ldy 	#3 							; get type
.1614	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1616	30 14		bmi $162c			bmi 	_ETVDereferenceString
.1618	85 11		sta $11				sta 	IFR0+IExp 					; dereference to R0
.161a	88		dey				dey
.161b	b1 0e		lda ($0e),y			lda 	(IFR0),y
.161d	85 10		sta $10				sta 	IFR0+IM2
.161f	88		dey				dey
.1620	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1622	aa		tax				tax
.1623	b2 0e		lda ($0e)			lda 	(IFR0)
.1625	86 0f		stx $0f				stx 	IFR0+IM1
.1627	85 0e		sta $0e				sta 	IFR0+IM0
.1629	7a		ply				ply
.162a	18		clc				clc
.162b	60		rts				rts
.162c					_ETVDereferenceString:
.162c	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.162e	b1 0e		lda ($0e),y			lda 	(IFR0),y
.1630	12 0e		ora ($0e)			ora 	(IFR0)
.1632	f0 11		beq $1645			beq 	_ETVNull
.1634	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; load address of string to XA
.1636	aa		tax				tax
.1637	b2 0e		lda ($0e)			lda 	(IFR0)
.1639	18		clc				clc 								; add two so points to actual string.
.163a	69 02		adc #$02			adc 	#2
.163c	90 01		bcc $163f			bcc 	_EVDSNoCarry
.163e	e8		inx				inx
.163f					_EVDSNoCarry:
.163f	86 0f		stx $0f				stx 	IFR0+IM1 					; save in slots
.1641	85 0e		sta $0e				sta 	IFR0
.1643	80 08		bra $164d			bra 	_ETVFillExit 				; tidy up and exit.
.1645					_ETVNull:
.1645	a9 55		lda #$55			lda 	#_EVTNString & $FF
.1647	85 0e		sta $0e				sta 	IFR0+IM0
.1649	a9 16		lda #$16			lda 	#_EVTNString >> 8
.164b	85 0f		sta $0f				sta 	IFR0+IM1
.164d					_ETVFillExit:
.164d	64 10		stz $10				stz 	IFR0+IM2
.164f	a9 80		lda #$80			lda 	#$80
.1651	85 11		sta $11				sta 	IFR0+IExp
.1653	7a		ply				ply
.1654	60		rts				rts
.1655					_EVTNString:
>1655	00						.byte 	0
.1656					_ETVNotReference:
.1656	60		rts				rts
.1657					EXPTermR0:
.1657	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token/element
.1659	30 10		bmi $166b			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.165b	c8		iny				iny 								; consume element
.165c	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.165e	b0 08		bcs $1668			bcs 	_ETMIdentifier
.1660	20 8f 16	jsr $168f			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1663	20 c2 16	jsr $16c2			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1666	18		clc				clc 								; return value
.1667	60		rts				rts
.1668					_ETMIdentifier:
.1668	4c 90 28	jmp $2890			jmp 	VARCheckSimple 				; check simple variables A-Z
.166b					_ETMIsUnaryOrMinus:
.166b	c8		iny				iny 								; consume element
.166c	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.166e	d0 0a		bne $167a			bne 	_ETMCheckUnary
.1670	20 0c 16	jsr $160c			jsr 	EXPTermValueR0 				; get a term to negate
.1673	a2 0e		ldx #$0e			ldx 	#IFR0 						; and negate it
.1675	20 04 2f	jsr $2f04			jsr 	IFloatNegate
.1678	18		clc				clc
.1679	60		rts				rts
.167a					_ETMCheckUnary:
.167a	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.167c	90 0e		bcc $168c			bcc 	_ETMUnarySyntax
.167e	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1680	b0 0a		bcs $168c			bcs 	_ETMUnarySyntax
.1682	0a		asl a				asl 	a
.1683	aa		tax				tax
.1684	20 89 16	jsr $1689			jsr 	_ETMCallUnaryFunction
.1687	18		clc				clc
.1688	60		rts				rts
.1689					_ETMCallUnaryFunction:
.1689	7c 06 1b	jmp ($1b06,x)			jmp 	(VectorTable,x)
.168c					_ETMUnarySyntax:
.168c	4c b4 23	jmp $23b4		jmp	ErrorV_syntax
.168f					EXPExtractTokenisedInteger:
.168f	85 0e		sta $0e				sta 	IFR0+IM0 					; initial value in IM0
.1691	64 11		stz $11				stz 	IFR0+IExp
.1693	64 0f		stz $0f				stz 	IFR0+IM1
.1695	64 10		stz $10				stz 	IFR0+IM2
.1697					_ETMConstant:
.1697	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.1699	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.169b	b0 24		bcs $16c1			bcs 	_ETMCExit 					; no.
.169d	a6 10		ldx $10				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.169f	a5 0f		lda $0f				lda 	IFR0+IM1
.16a1	85 10		sta $10				sta 	IFR0+IM2
.16a3	a5 0e		lda $0e				lda 	IFR0+IM0
.16a5	85 0f		sta $0f				sta 	IFR0+IM1
.16a7	64 0e		stz $0e				stz 	IFR0+IM0
.16a9	8a		txa				txa
.16aa	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.16ab	66 10		ror $10				ror 	IFR0+IM2
.16ad	66 0f		ror $0f				ror 	IFR0+IM1
.16af	66 0e		ror $0e				ror 	IFR0+IM0
.16b1	4a		lsr a				lsr 	a
.16b2	66 10		ror $10				ror 	IFR0+IM2
.16b4	66 0f		ror $0f				ror 	IFR0+IM1
.16b6	66 0e		ror $0e				ror 	IFR0+IM0
.16b8	a5 0e		lda $0e				lda 	IFR0+IM0 					; LSB in.
.16ba	11 1e		ora ($1e),y			ora 	(codePtr),y
.16bc	85 0e		sta $0e				sta 	IFR0+IM0
.16be	c8		iny				iny 								; consume, loop back
.16bf	80 d6		bra $1697			bra 	_ETMConstant
.16c1					_ETMCExit:
.16c1	60		rts				rts
.16c2					EXPCheckDecimalFollows:
.16c2	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check for decimal
.16c4	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.16c6	d0 19		bne $16e1			bne 	_ETMCDExit
.16c8	c8		iny				iny 								; consume token.
.16c9	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get count
.16cb	5a		phy				phy									; save current position
.16cc	48		pha				pha 								; save count of chars.
.16cd	38		sec				sec 								; address into YX : y + codePtr+1
.16ce	98		tya				tya
.16cf	65 1e		adc $1e				adc 	codePtr
.16d1	aa		tax				tax
.16d2	a5 1f		lda $1f				lda 	codePtr+1
.16d4	69 00		adc #$00			adc 	#0
.16d6	a8		tay				tay
.16d7	68		pla				pla 								; get count.
.16d8	20 9d 2d	jsr $2d9d			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.16db	7a		ply				ply 								; go to next token.
.16dc	98		tya				tya
.16dd	38		sec				sec
.16de	71 1e		adc ($1e),y			adc 	(codePtr),y
.16e0	a8		tay				tay
.16e1					_ETMCDExit:
.16e1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.16e2					EXPUnaryAbs:
.16e2	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 					; number to R0
.16e5	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.16e8	20 3d 2b	jsr $2b3d			jsr 	IFloatAbsoluteR0
.16eb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.16ec					EXPUnaryAsc:
.16ec	20 f9 15	jsr $15f9			jsr 	EXPEvalString 					; string to R0, zTemp0
.16ef	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.16f2	b2 20		lda ($20)			lda 	(zTemp0) 						; length 0 ?
.16f4	f0 06		beq $16fc			beq 	_EXAZero 						; if so return 0
.16f6	5a		phy				phy 									; otherwise get first character
.16f7	a0 01		ldy #$01			ldy 	#1
.16f9	b1 20		lda ($20),y			lda 	(zTemp0),y
.16fb	7a		ply				ply
.16fc					_EXAZero:
.16fc	a2 0e		ldx #$0e			ldx 	#IFR0
.16fe	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.1701	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1702					EXPUnaryChr:
.1702	20 ed 15	jsr $15ed			jsr 	EXPEvalInteger8 				; expr
.1705	48		pha				pha 									; push on stack
.1706	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.1709	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.170b	20 47 26	jsr $2647			jsr 	StringTempAllocate
.170e	68		pla				pla
.170f	20 7c 26	jsr $267c			jsr 	StringTempWrite
.1712	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1713					EXPUnaryDec:
.1713	20 f9 15	jsr $15f9			jsr 	EXPEvalString 					; string to R0, zTemp0
.1716	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.1719	5a		phy				phy
.171a	a2 0e		ldx #$0e			ldx 	#IFR0 							; zero the result
.171c	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.171f	b2 20		lda ($20)			lda 	(zTemp0)						; read the length to X
.1721	f0 3b		beq $175e			beq 	_EUDError 						; empty string
.1723	aa		tax				tax
.1724	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1726					_EUDLoop:
.1726	b1 20		lda ($20),y			lda 	(zTemp0),y 						; get next
.1728	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.172a	90 02		bcc $172e			bcc 	_EUDNoCase
.172c	e9 20		sbc #$20			sbc 	#$20
.172e					_EUDNoCase:
.172e	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1730	90 2c		bcc $175e			bcc 	_EUDError
.1732	c9 3a		cmp #$3a			cmp 	#'9'+1
.1734	90 0a		bcc $1740			bcc 	_EUDOkay
.1736	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1738	90 24		bcc $175e			bcc 	_EUDError
.173a	c9 47		cmp #$47			cmp 	#'F'+1
.173c	b0 20		bcs $175e			bcs 	_EUDError
.173e	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1740					_EUDOkay:
.1740	29 0f		and #$0f			and 	#15 							; make constant
.1742	da		phx				phx
.1743	48		pha				pha
.1744	a2 0e		ldx #$0e			ldx 	#IFR0 							; multiply R0 x 16
.1746	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1749	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.174c	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.174f	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1752	68		pla				pla 									; pop constant and OR in
.1753	fa		plx				plx
.1754	05 0e		ora $0e				ora 	IFR0+IM0
.1756	85 0e		sta $0e				sta 	IFR0+IM0
.1758	c8		iny				iny 									; next
.1759	ca		dex				dex
.175a	d0 ca		bne $1726			bne 	_EUDLoop
.175c	7a		ply				ply
.175d	60		rts				rts
.175e					_EUDError:
.175e	4c d6 23	jmp $23d6		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1761					EXPUnaryInlineDec:
.1761	4c b4 23	jmp $23b4		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1764					EXPUnaryPeek:
.1764	20 e1 15	jsr $15e1			jsr 	EXPEvalInteger16 				; number to R0
.1767	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.176a	b2 0e		lda ($0e)			lda 	(IFR0)
.176c	a2 0e		ldx #$0e			ldx 	#IFR0
.176e	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.1771	60		rts				rts
.1772					EXPUnaryDeek:
.1772	20 e1 15	jsr $15e1			jsr 	EXPEvalInteger16 				; number to R0
.1775	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.1778	5a		phy				phy
.1779	a0 01		ldy #$01			ldy 	#1
.177b	b1 0e		lda ($0e),y			lda 	(IFR0),y
.177d	7a		ply				ply
.177e	48		pha				pha
.177f	b2 0e		lda ($0e)			lda 	(IFR0)
.1781	a2 0e		ldx #$0e			ldx 	#IFR0
.1783	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.1786	68		pla				pla
.1787	85 0f		sta $0f				sta 	IFR0+IM1
.1789	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.178a					EXPUnaryNull:
.178a	20 0c 16	jsr $160c			jsr 	EXPTermValueR0
.178d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.178e					EXPUnaryFrac:
.178e	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 					; number to R0
.1791	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.1794	20 a3 2b	jsr $2ba3			jsr 	IFloatFractionalR0
.1797	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1798					EXPUnaryInkey:
.1798	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.179b	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.179d	20 47 26	jsr $2647			jsr 	StringTempAllocate
.17a0	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.17a3	b0 06		bcs $17ab			bcs 	_EUIExit
.17a5	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.17a8	20 7c 26	jsr $267c			jsr 	StringTempWrite
.17ab					_EUIExit:
.17ab	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.17ac					EXPUnaryInt:
.17ac	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 					; number to R0
.17af	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.17b2	20 f9 2b	jsr $2bf9			jsr 	IFloatIntegerR0
.17b5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.17b6					EXPUnaryLen:
.17b6	20 f9 15	jsr $15f9			jsr 	EXPEvalString 					; string to R0, zTemp0
.17b9	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.17bc	b2 20		lda ($20)			lda 	(zTemp0)
.17be	a2 0e		ldx #$0e			ldx 	#IFR0
.17c0	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.17c3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.17c4					EXPUnaryParenthesis:
.17c4	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 					; number to R0
.17c7	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.17ca	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.17cb					EXPUnaryRnd:
.17cb	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 				; number to R0
.17ce	20 51 25	jsr $2551			jsr 	ERRCheckRParen 				; )
.17d1	a2 0e		ldx #$0e			ldx 	#IFR0
.17d3	20 ea 17	jsr $17ea			jsr 	EXPLoadInRandom
.17d6	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.17d8	85 11		sta $11				sta 	IFR0+IExp
.17da	60		rts				rts
.17db					ExpUnaryRand:
.17db	20 da 15	jsr $15da			jsr 	EXPEvalInteger 				; integer to R0
.17de	20 51 25	jsr $2551			jsr 	ERRCheckRParen 				; )
.17e1	a2 12		ldx #$12			ldx 	#IFR1 						; random to R1
.17e3	20 ea 17	jsr $17ea			jsr 	EXPLoadInRandom
.17e6	20 6a 2a	jsr $2a6a			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.17e9	60		rts				rts
.17ea					EXPLoadInRandom:
.17ea	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.17ed	20 ff 17	jsr $17ff			jsr 	EXPRandom32
.17f0	95 00		sta $00,x			sta 	IM0,x
.17f2	20 ff 17	jsr $17ff			jsr 	EXPRandom32
.17f5	95 01		sta $01,x			sta 	IM1,x
.17f7	20 ff 17	jsr $17ff			jsr 	EXPRandom32
.17fa	29 7f		and #$7f			and 	#$7F
.17fc	95 02		sta $02,x			sta 	IM2,x
.17fe	60		rts				rts
.17ff					EXPRandom32:
.17ff	5a		phy				phy
.1800	a0 08		ldy #$08			ldy 	#8
.1802	ad 0d 05	lda $050d			lda 	EXPSeed+0
.1805	0d 0e 05	ora $050e			ora 	EXPSeed+1
.1808	0d 0f 05	ora $050f			ora 	EXPSeed+2
.180b	0d 10 05	ora $0510			ora 	EXPSeed+3
.180e	d0 08		bne $1818			bne 	_EXPRNoReset
.1810	ee 0d 05	inc $050d			inc 	EXPSeed+0
.1813	a0 10		ldy #$10			ldy 	#16
.1815	8c 10 05	sty $0510			sty 	EXPSeed+3
.1818					_EXPRNoReset:
.1818	ad 0d 05	lda $050d			lda 	EXPSeed+0
.181b					_EXPRLoop:
.181b	0a		asl a				asl		a
.181c	2e 0e 05	rol $050e			rol 	EXPSeed+1
.181f	2e 0f 05	rol $050f			rol 	EXPSeed+2
.1822	2e 10 05	rol $0510			rol 	EXPSeed+3
.1825	90 02		bcc $1829			bcc 	_EXPRNoEOR
.1827	49 c5		eor #$c5			eor 	#$C5
.1829					_EXPRNoEOR:
.1829	88		dey				dey
.182a	d0 ef		bne $181b			bne 	_EXPRLoop
.182c	8d 0d 05	sta $050d			sta 	EXPSeed+0
.182f	7a		ply				ply
.1830	60		rts				rts
.050d					EXPSeed:
>050d							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1831					EXPUnarySgn:
.1831	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 					; number to R0
.1834	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.1837	a2 12		ldx #$12			ldx 	#IFR1 							; copy to R1
.1839	20 9b 2e	jsr $2e9b			jsr 	IFloatCopyToRegister
.183c	a2 0e		ldx #$0e			ldx 	#IFR0 							; R0 = 0
.183e	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.1841	a2 12		ldx #$12			ldx 	#IFR1
.1843	20 c7 2b	jsr $2bc7			jsr 	IFloatCompare 					; compare R1 vs 0.
.1846	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1847					EXPUnarySqr:
.1847	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 					; number to R0
.184a	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.184d	20 45 2b	jsr $2b45			jsr 	IFloatSquareRootR0 				; square root.
.1850	b0 01		bcs $1853			bcs 	_EUSValue
.1852	60		rts				rts
.1853					_EUSValue:
.1853	4c c5 23	jmp $23c5		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1856					EXPUnaryHex:
.1856	20 da 15	jsr $15da			jsr 	EXPEvalInteger 					; expr
.1859	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.185c	5a		phy				phy
.185d	a9 10		lda #$10			lda 	#16
.185f	20 9a 2c	jsr $2c9a			jsr 	IFloatIntegerToStringR0
.1862	80 0a		bra $186e			bra 	EUSMain
.1864					EXPUnaryStr:
.1864	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 					; expr
.1867	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.186a	5a		phy				phy
.186b	20 f6 2c	jsr $2cf6			jsr 	IFloatFloatToStringR0 			; convert to string
.186e					EUSMain:
.186e	b0 18		bcs $1888			bcs 	_EUSError
.1870	86 20		stx $20				stx 	zTemp0 							; save string address
.1872	84 21		sty $21				sty 	zTemp0+1
.1874	48		pha				pha 									; save count
.1875	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1877	20 47 26	jsr $2647			jsr 	StringTempAllocate
.187a	fa		plx				plx 									; count in X
.187b	a0 00		ldy #$00			ldy 	#0
.187d					_EUSCopy:
.187d	b1 20		lda ($20),y			lda 	(zTemp0),y
.187f	c8		iny				iny
.1880	20 7c 26	jsr $267c			jsr 	StringTempWrite
.1883	ca		dex				dex
.1884	d0 f7		bne $187d			bne	 	_EUSCopy
.1886	7a		ply				ply
.1887	60		rts				rts
.1888					_EUSError:
.1888	4c c5 23	jmp $23c5		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.188b					EXPUnaryInlineString:
.188b	18		clc				clc 								; physical address -> IM0,1
.188c	98		tya				tya
.188d	65 1e		adc $1e				adc 	codePtr
.188f	85 0e		sta $0e				sta 	IFR0+IM0
.1891	a5 1f		lda $1f				lda 	codePtr+1
.1893	69 00		adc #$00			adc 	#0
.1895	85 0f		sta $0f				sta 	IFR0+IM1
.1897	64 10		stz $10				stz 	IFR0+IM2 					; fill in rest
.1899	a9 80		lda #$80			lda 	#$80
.189b	85 11		sta $11				sta 	IFR0+IExp
.189d	98		tya				tya	 								; skip over it.
.189e	38		sec				sec
.189f	71 1e		adc ($1e),y			adc 	(codePtr),y
.18a1	a8		tay				tay
.18a2	60		rts				rts
.18a3					_EXPUISRange:
.18a3	4c c5 23	jmp $23c5		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.18a6					EXPUnaryLeft:
.18a6	20 ec 18	jsr $18ec			jsr 	EXPCommonStart 					; <string>,
.18a9	48		pha				pha 									; save string address on stack
.18aa	da		phx				phx
.18ab	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.18ad	48		pha				pha
.18ae	20 ed 15	jsr $15ed			jsr 	EXPEvalInteger8 				; characters to do
.18b1	80 44		bra $18f7			bra 	EXPSubstringCommon
.18b3					EXPUnaryRight:
.18b3	20 ec 18	jsr $18ec			jsr 	EXPCommonStart 					; <string>,
.18b6	48		pha				pha 									; save string address on stack
.18b7	da		phx				phx
.18b8	b2 0e		lda ($0e)			lda 	(IFR0) 							; the string length => stack.
.18ba	48		pha				pha
.18bb	20 ed 15	jsr $15ed			jsr 	EXPEvalInteger8 				; characters to do
.18be	85 20		sta $20				sta 	zTemp0 							; calculate length - required, start point.
.18c0	68		pla				pla
.18c1	38		sec				sec
.18c2	e5 20		sbc $20				sbc 	zTemp0
.18c4	b0 02		bcs $18c8			bcs 	_EUROffLeft
.18c6	a9 00		lda #$00			lda 	#0
.18c8					_EUROffLeft:
.18c8	48		pha				pha 									; start pos
.18c9	a9 ff		lda #$ff			lda 	#255
.18cb	80 2a		bra $18f7			bra 	EXPSubstringCommon
.18cd					EXPUnaryMid:
.18cd	20 ec 18	jsr $18ec			jsr 	EXPCommonStart 					; <string>,
.18d0	48		pha				pha 									; save string address on stack
.18d1	da		phx				phx
.18d2	20 ed 15	jsr $15ed			jsr 	EXPEvalInteger8 				; characters start
.18d5	f0 12		beq $18e9			beq 	_EUSError 						; 1 is left
.18d7	3a		dec a				dec 	a 								; zero based.
.18d8	48		pha				pha
.18d9	b1 1e		lda ($1e),y			lda 	(codePtr),y 					; comma follows
.18db	c9 99		cmp #$99			cmp 	#PR_COMMA
.18dd	f0 04		beq $18e3			beq 	_EUMLength 						; if so m is provided
.18df	a9 ff		lda #$ff			lda 	#255 							; default m
.18e1	80 14		bra $18f7			bra 	EXPSubstringCommon
.18e3					_EUMLength:
.18e3	c8		iny				iny 									; consume comma
.18e4	20 ed 15	jsr $15ed			jsr 	EXPEvalInteger8 				; characters to do
.18e7	80 0e		bra $18f7			bra 	EXPSubstringCommon
.18e9					_EUSError:
.18e9	4c d6 23	jmp $23d6		jmp	ErrorV_value
.18ec					EXPCommonStart:
.18ec	20 f9 15	jsr $15f9			jsr 	EXPEvalString
.18ef	20 59 25	jsr $2559			jsr 	ERRCheckComma
.18f2	a5 0e		lda $0e				lda 	IFR0+IM0
.18f4	a6 0f		ldx $0f				ldx 	IFR0+IM1
.18f6	60		rts				rts
.18f7					EXPSubstringCommon:
.18f7	85 22		sta $22				sta 	zTemp1 							; count to do in zTemp1.
.18f9	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; check right bracket.
.18fc	68		pla				pla 									; start position
.18fd	85 23		sta $23				sta 	zTemp1+1 						; save in zTemp1+1
.18ff	fa		plx				plx 									; get string address to zTemp2.
.1900	86 25		stx $25				stx 	zTemp2+1
.1902	68		pla				pla
.1903	85 24		sta $24				sta 	zTemp2
.1905	38		sec				sec 									; length - start is the max count of chars
.1906	b2 24		lda ($24)			lda 	(zTemp2)
.1908	e5 23		sbc $23				sbc 	zTemp1+1
.190a	c5 22		cmp $22				cmp 	zTemp1 							; if available < count
.190c	b0 02		bcs $1910			bcs 	_EXPSSNoTrim
.190e	85 22		sta $22				sta 	zTemp1 							; update count with available
.1910					_EXPSSNoTrim:
.1910	a5 22		lda $22				lda 	zTemp1 							; chars required.
.1912	20 47 26	jsr $2647			jsr 	StringTempAllocate 				; allocate memory for it.
.1915	a5 22		lda $22				lda 	zTemp1 							; zero length string
.1917	f0 15		beq $192e			beq 	_EXPSSExit
.1919	a5 23		lda $23				lda 	zTemp1+1 						; if length >= start exit
.191b	d2 24		cmp ($24)			cmp 	(zTemp2)
.191d	b0 0f		bcs $192e			bcs 	_EXPSSExit
.191f	5a		phy				phy
.1920	a4 23		ldy $23				ldy 	zTemp1+1 						; start position
.1922	c8		iny				iny 									; +1 for the length byte
.1923					_EXPSSCopy:
.1923	b1 24		lda ($24),y			lda 	(zTemp2),y
.1925	20 7c 26	jsr $267c			jsr 	StringTempWrite
.1928	c8		iny				iny
.1929	c6 22		dec $22				dec 	zTemp1
.192b	d0 f6		bne $1923			bne 	_EXPSSCopy
.192d	7a		ply				ply
.192e					_EXPSSExit:
.192e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.192f					EXPUnaryVal:
.192f	20 f9 15	jsr $15f9			jsr 	EXPEvalString 					; string to R0, zTemp0
.1932	20 51 25	jsr $2551			jsr 	ERRCheckRParen 					; )
.1935	5a		phy				phy
.1936	18		clc				clc
.1937	a5 20		lda $20				lda		zTemp0 							; point XY to the text
.1939	69 01		adc #$01			adc 	#1
.193b	aa		tax				tax
.193c	a5 21		lda $21				lda 	zTemp0+1
.193e	69 00		adc #$00			adc 	#0
.1940	a8		tay				tay
.1941	b2 20		lda ($20)			lda 	(zTemp0) 						; get length.
.1943	20 5d 2d	jsr $2d5d			jsr 	IFloatStringToFloatR0 			; do conversion
.1946	b0 02		bcs $194a			bcs 	_EUVError
.1948	7a		ply				ply
.1949	60		rts				rts
.194a					_EUVError:
.194a	4c d6 23	jmp $23d6		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.194d					BinaryPrecedence:
>194d	02					.byte	 2	; $ef =
>194e	02					.byte	 2	; $f0 <>
>194f	02					.byte	 2	; $f1 <=
>1950	02					.byte	 2	; $f2 <
>1951	02					.byte	 2	; $f3 >=
>1952	02					.byte	 2	; $f4 >
>1953	01					.byte	 1	; $f5 XOR
>1954	01					.byte	 1	; $f6 OR
>1955	01					.byte	 1	; $f7 AND
>1956	04					.byte	 4	; $f8 DIV
>1957	04					.byte	 4	; $f9 MOD
>1958	04					.byte	 4	; $fa <<
>1959	04					.byte	 4	; $fb >>
>195a	04					.byte	 4	; $fc /
>195b	04					.byte	 4	; $fd *
>195c	03					.byte	 3	; $fe -
>195d	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.195e					StructureOffsets:
>195e	01					.byte	1  	; $80 REPEAT
>195f	ff					.byte	255	; $81 UNTIL
>1960	01					.byte	1  	; $82 WHILE
>1961	ff					.byte	255	; $83 WEND
>1962	01					.byte	1  	; $84 IF
>1963	ff					.byte	255	; $85 ENDIF
>1964	01					.byte	1  	; $86 DO
>1965	ff					.byte	255	; $87 LOOP
>1966	01					.byte	1  	; $88 PROC
>1967	ff					.byte	255	; $89 ENDPROC
>1968	01					.byte	1  	; $8a FOR
>1969	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.196a					StandardTokens:
>196a	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1971	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1977	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>197d	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1982	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1985	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>198b	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>198e	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1993	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1998	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>19a0	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>19a4	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>19a9	00					.byte	$00                                     	; $8c [[end]]
>19aa	00					.byte	$00                                     	; $8d [[shift]]
>19ab	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>19b0	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>19b5	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>19b8	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>19bd	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>19c1	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>19c7	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>19cd	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>19d2	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>19d6	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>19da	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>19df	01 2c					.byte	$01,$2c                                 	; $99 ,
>19e1	01 3b					.byte	$01,$3b                                 	; $9a ;
>19e3	01 3a					.byte	$01,$3a                                 	; $9b :
>19e5	01 27					.byte	$01,$27                                 	; $9c '
>19e7	01 29					.byte	$01,$29                                 	; $9d )
>19e9	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>19ed	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>19f3	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>19f7	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>19fb	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1a00	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1a04	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1a0b	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1a10	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1a15	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1a1a	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1a1f	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1a24	00					.byte	0											; $aa
>1a25	00					.byte	0											; $ab
>1a26	00					.byte	0											; $ac
>1a27	00					.byte	0											; $ad
>1a28	00					.byte	0											; $ae
>1a29	00					.byte	0											; $af
>1a2a	00					.byte	0											; $b0
>1a2b	00					.byte	0											; $b1
>1a2c	00					.byte	0											; $b2
>1a2d	00					.byte	0											; $b3
>1a2e	00					.byte	0											; $b4
>1a2f	00					.byte	0											; $b5
>1a30	00					.byte	0											; $b6
>1a31	00					.byte	0											; $b7
>1a32	00					.byte	0											; $b8
>1a33	00					.byte	0											; $b9
>1a34	00					.byte	0											; $ba
>1a35	00					.byte	0											; $bb
>1a36	00					.byte	0											; $bc
>1a37	00					.byte	0											; $bd
>1a38	00					.byte	0											; $be
>1a39	00					.byte	0											; $bf
>1a3a	00					.byte	0											; $c0
>1a3b	00					.byte	0											; $c1
>1a3c	00					.byte	0											; $c2
>1a3d	00					.byte	0											; $c3
>1a3e	00					.byte	0											; $c4
>1a3f	00					.byte	0											; $c5
>1a40	00					.byte	0											; $c6
>1a41	00					.byte	0											; $c7
>1a42	00					.byte	0											; $c8
>1a43	00					.byte	0											; $c9
>1a44	00					.byte	0											; $ca
>1a45	00					.byte	0											; $cb
>1a46	00					.byte	0											; $cc
>1a47	00					.byte	0											; $cd
>1a48	00					.byte	0											; $ce
>1a49	00					.byte	0											; $cf
>1a4a	00					.byte	0											; $d0
>1a4b	00					.byte	0											; $d1
>1a4c	00					.byte	0											; $d2
>1a4d	00					.byte	0											; $d3
>1a4e	00					.byte	0											; $d4
>1a4f	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1a55	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1a5b	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1a63	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1a6a	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1a70	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1a76	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1a7b	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1a80	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1a85	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1a8a	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1a8f	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1a95	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1a9a	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1aa2	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1aa9	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1aae	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1ab3	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1ab9	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1abe	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1ac4	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1ac9	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1acf	01 28					.byte	$01,$28                                 	; $eb (
>1ad1	01 24					.byte	$01,$24                                 	; $ec $
>1ad3	00					.byte	$00                                     	; $ed [[decimal]]
>1ad4	00					.byte	$00                                     	; $ee [[string]]
>1ad5	01 3d					.byte	$01,$3d                                 	; $ef =
>1ad7	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1ada	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1add	01 3c					.byte	$01,$3c                                 	; $f2 <
>1adf	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1ae2	01 3e					.byte	$01,$3e                                 	; $f4 >
>1ae4	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1ae8	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1aeb	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1aef	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1af3	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1af7	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1afa	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1afd	01 2f					.byte	$01,$2f                                 	; $fc /
>1aff	01 2a					.byte	$01,$2a                                 	; $fd *
>1b01	01 2d					.byte	$01,$2d                                 	; $fe -
>1b03	01 2b					.byte	$01,$2b                                 	; $ff +
>1b05	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1b06					VectorTable:
>1b06	a8 22					.word	Command_REPEAT           ; $80 REPEAT
>1b08	b1 22					.word	Command_UNTIL            ; $81 UNTIL
>1b0a	89 23					.word	Command_WHILE            ; $82 WHILE
>1b0c	a8 23					.word	Command_WEND             ; $83 WEND
>1b0e	80 22					.word	IfCommand                ; $84 IF
>1b10	a7 22					.word	EndIf                    ; $85 ENDIF
>1b12	1d 21					.word	Command_DO               ; $86 DO
>1b14	35 21					.word	Command_LOOP             ; $87 LOOP
>1b16	0f 14					.word	NoExec08                 ; $88 PROC
>1b18	11 21					.word	Command_ENDPROC          ; $89 ENDPROC
>1b1a	3e 21					.word	Command_FOR              ; $8a FOR
>1b1c	cb 21					.word	Command_NEXT             ; $8b NEXT
>1b1e	95 13					.word	RUNEndOfLine             ; $8c [[END]]
>1b20	f1 13					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1b22	a0 22					.word	ElseCode                 ; $8e ELSE
>1b24	0f 14					.word	NoExec01                 ; $8f THEN
>1b26	0f 14					.word	NoExec02                 ; $90 TO
>1b28	0f 14					.word	NoExec03                 ; $91 STEP
>1b2a	2b 12					.word	CommandLET               ; $92 LET
>1b2c	c0 11					.word	Command_Print            ; $93 PRINT
>1b2e	b9 11					.word	Command_Input            ; $94 INPUT
>1b30	d5 20					.word	Command_CALL             ; $95 CALL
>1b32	fa 13					.word	Command_Sys              ; $96 SYS
>1b34	7c 13					.word	Command_REM              ; $97 REM
>1b36	26 21					.word	Command_EXIT             ; $98 EXIT
>1b38	0f 14					.word	NoExec04                 ; $99 ,
>1b3a	0f 14					.word	NoExec05                 ; $9a ;
>1b3c	0f 14					.word	NoExec06                 ; $9b :
>1b3e	7c 13					.word	Command_REM2             ; $9c '
>1b40	0f 14					.word	NoExec07                 ; $9d )
>1b42	73 10					.word	CommandDIM               ; $9e DIM
>1b44	23 10					.word	Command_CLEAR            ; $9f CLEAR
>1b46	73 13					.word	Command_NEW              ; $a0 NEW
>1b48	89 13					.word	Command_RUN              ; $a1 RUN
>1b4a	f7 13					.word	Command_STOP             ; $a2 STOP
>1b4c	f4 13					.word	Command_END              ; $a3 END
>1b4e	15 10					.word	Command_ASSERT           ; $a4 ASSERT
>1b50	a3 12					.word	Command_LIST             ; $a5 LIST
>1b52	ce 26					.word	NotImplemented           ; $a6 SAVE
>1b54	ce 26					.word	NotImplemented           ; $a7 LOAD
>1b56	92 11					.word	Command_Poke             ; $a8 POKE
>1b58	8f 11					.word	Command_Doke             ; $a9 DOKE
>1b5a	ce 26					.word	NotImplemented           ; $aa
>1b5c	ce 26					.word	NotImplemented           ; $ab
>1b5e	ce 26					.word	NotImplemented           ; $ac
>1b60	ce 26					.word	NotImplemented           ; $ad
>1b62	ce 26					.word	NotImplemented           ; $ae
>1b64	ce 26					.word	NotImplemented           ; $af
>1b66	ce 26					.word	NotImplemented           ; $b0
>1b68	ce 26					.word	NotImplemented           ; $b1
>1b6a	ce 26					.word	NotImplemented           ; $b2
>1b6c	ce 26					.word	NotImplemented           ; $b3
>1b6e	ce 26					.word	NotImplemented           ; $b4
>1b70	ce 26					.word	NotImplemented           ; $b5
>1b72	ce 26					.word	NotImplemented           ; $b6
>1b74	ce 26					.word	NotImplemented           ; $b7
>1b76	ce 26					.word	NotImplemented           ; $b8
>1b78	ce 26					.word	NotImplemented           ; $b9
>1b7a	ce 26					.word	NotImplemented           ; $ba
>1b7c	ce 26					.word	NotImplemented           ; $bb
>1b7e	ce 26					.word	NotImplemented           ; $bc
>1b80	ce 26					.word	NotImplemented           ; $bd
>1b82	ce 26					.word	NotImplemented           ; $be
>1b84	ce 26					.word	NotImplemented           ; $bf
>1b86	ce 26					.word	NotImplemented           ; $c0
>1b88	ce 26					.word	NotImplemented           ; $c1
>1b8a	ce 26					.word	NotImplemented           ; $c2
>1b8c	ce 26					.word	NotImplemented           ; $c3
>1b8e	ce 26					.word	NotImplemented           ; $c4
>1b90	ce 26					.word	NotImplemented           ; $c5
>1b92	ce 26					.word	NotImplemented           ; $c6
>1b94	ce 26					.word	NotImplemented           ; $c7
>1b96	ce 26					.word	NotImplemented           ; $c8
>1b98	ce 26					.word	NotImplemented           ; $c9
>1b9a	ce 26					.word	NotImplemented           ; $ca
>1b9c	ce 26					.word	NotImplemented           ; $cb
>1b9e	ce 26					.word	NotImplemented           ; $cc
>1ba0	ce 26					.word	NotImplemented           ; $cd
>1ba2	ce 26					.word	NotImplemented           ; $ce
>1ba4	ce 26					.word	NotImplemented           ; $cf
>1ba6	ce 26					.word	NotImplemented           ; $d0
>1ba8	ce 26					.word	NotImplemented           ; $d1
>1baa	ce 26					.word	NotImplemented           ; $d2
>1bac	ce 26					.word	NotImplemented           ; $d3
>1bae	ce 26					.word	NotImplemented           ; $d4
>1bb0	72 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1bb2	64 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1bb4	b3 18					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1bb6	a6 18					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1bb8	cd 18					.word	EXPUnaryMid              ; $d9 MID$(
>1bba	64 18					.word	EXPUnaryStr              ; $da STR$(
>1bbc	2f 19					.word	EXPUnaryVal              ; $db VAL(
>1bbe	31 18					.word	EXPUnarySgn              ; $dc SGN(
>1bc0	e2 16					.word	EXPUnaryAbs              ; $dd ABS(
>1bc2	b6 17					.word	EXPUnaryLen              ; $de LEN(
>1bc4	47 18					.word	EXPUnarySqr              ; $df SQR(
>1bc6	02 17					.word	EXPUnaryChr              ; $e0 CHR$(
>1bc8	ec 16					.word	EXPUnaryAsc              ; $e1 ASC(
>1bca	98 17					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1bcc	ce 26					.word	NotImplemented           ; $e3 EVENT(
>1bce	ce 26					.word	NotImplemented           ; $e4 TIME
>1bd0	ac 17					.word	EXPUnaryInt              ; $e5 INT(
>1bd2	8e 17					.word	EXPUnaryFrac             ; $e6 FRAC(
>1bd4	13 17					.word	EXPUnaryDec              ; $e7 DEC(
>1bd6	56 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1bd8	cb 17					.word	EXPUnaryRnd              ; $e9 RND(
>1bda	db 17					.word	ExpUnaryRand             ; $ea RAND(
>1bdc	c4 17					.word	EXPUnaryParenthesis      ; $eb (
>1bde	8a 17					.word	EXPUnaryNull             ; $ec $
>1be0	61 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1be2	8b 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1be4	cc 14					.word	EXPCompareEqual          ; $ef =
>1be6	e7 14					.word	EXPCompareNotEqual       ; $f0 <>
>1be8	f0 14					.word	EXPCompareLessEqual      ; $f1 <=
>1bea	d5 14					.word	EXPCompareLess           ; $f2 <
>1bec	f9 14					.word	EXPCompareGreaterEqual   ; $f3 >=
>1bee	de 14					.word	EXPCompareGreater        ; $f4 >
>1bf0	79 14					.word	EXPBinXor                ; $f5 XOR
>1bf2	6d 14					.word	EXPBinOr                 ; $f6 OR
>1bf4	61 14					.word	EXPBinAnd                ; $f7 AND
>1bf6	39 14					.word	EXPBinIDiv               ; $f8 DIV
>1bf8	4a 14					.word	EXPBinIMod               ; $f9 MOD
>1bfa	44 15					.word	EXPBinLeft               ; $fa <<
>1bfc	4c 15					.word	EXPBinRight              ; $fb >>
>1bfe	2d 14					.word	EXPBinFDiv               ; $fc /
>1c00	24 14					.word	EXPBinMul                ; $fd *
>1c02	1b 14					.word	EXPBinSub                ; $fe -
>1c04	12 14					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1c06					TOKDetokenise:
.1c06	86 24		stx $24				stx 	zTemp2 						; save tokenised code in zTemp2
.1c08	84 25		sty $25				sty 	zTemp2+1
.1c0a	9c 13 05	stz $0513			stz		TOKLastCharacter 			; clear last character
.1c0d					_TOKDLoop:
.1c0d	20 3c 1c	jsr $1c3c			jsr 	TOKDGet 					; get next
.1c10	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1c12	f0 26		beq $1c3a			beq 	_TOKDExit
.1c14	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1c16	f0 1d		beq $1c35			beq 	_TOKDDataItem
.1c18	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1c1a	f0 19		beq $1c35			beq 	_TOKDDataItem
.1c1c	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1c1e	10 05		bpl $1c25			bpl 	_TOKDNotToken
.1c20	20 04 1d	jsr $1d04			jsr 	TOKDToken 					; token to text.
.1c23	80 e8		bra $1c0d			bra 	_TOKDLoop
.1c25					_TOKDNotToken:
.1c25	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1c27	90 05		bcc $1c2e			bcc 	_TOKDNotIdentifier
.1c29	20 77 1c	jsr $1c77			jsr 	TOKDIdentifier
.1c2c	80 df		bra $1c0d			bra 	_TOKDLoop
.1c2e					_TOKDNotIdentifier:
.1c2e	a0 0a		ldy #$0a			ldy 	#10
.1c30	20 c0 1c	jsr $1cc0			jsr 	TOKDInteger
.1c33	80 d8		bra $1c0d			bra 	_TOKDLoop
.1c35					_TOKDDataItem:
.1c35	20 52 1c	jsr $1c52			jsr 	TOKDDataItem
.1c38	80 d3		bra $1c0d			bra 	_TOKDLoop
.1c3a					_TOKDExit:
.1c3a	18		clc				clc
.1c3b	60		rts				rts
.1c3c	b2 24		lda ($24)	TOKDGet:lda 	(zTemp2)
.1c3e	e6 24		inc $24				inc 	zTemp2
.1c40	d0 02		bne $1c44			bne 	_TKDGExit
.1c42	e6 25		inc $25				inc 	zTemp2+1
.1c44					_TKDGExit:
.1c44	60		rts				rts
.1c45					TOKDOutput:
.1c45	8d 13 05	sta $0513			sta 	TOKLastCharacter
.1c48	6c 11 05	jmp ($0511)			jmp 	(TOKOutputMethod)
.1c4b					TOKSetDetokeniseOutput:
.1c4b	8e 11 05	stx $0511			stx 	TOKOutputMethod
.1c4e	8c 12 05	sty $0512			sty 	TOKOutputMethod+1
.1c51	60		rts				rts
.0511					TOKOutputMethod:
>0511							.fill 	2
.0513					TOKLastCharacter:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1c52					TOKDDataItem:
.1c52	a8		tay				tay 								; type in Y
.1c53	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1c55	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1c57	f0 02		beq $1c5b			beq 	_TOKDDIsString
.1c59	a9 2e		lda #$2e			lda 	#'.'
.1c5b					_TOKDDIsString:
.1c5b	20 45 1c	jsr $1c45			jsr 	TOKDOutput 					; dump it
.1c5e	20 3c 1c	jsr $1c3c			jsr 	TOKDGet 					; get length into X
.1c61	aa		tax				tax
.1c62					_TOKDDOutput:
.1c62	ca		dex				dex 								; are we complete
.1c63	30 08		bmi $1c6d			bmi 	_TOKDDEnd
.1c65	20 3c 1c	jsr $1c3c			jsr 	TOKDGet 					; get character and output it
.1c68	20 45 1c	jsr $1c45			jsr 	TOKDOutput
.1c6b	80 f5		bra $1c62			bra 	_TOKDDOutput
.1c6d					_TOKDDEnd:
.1c6d	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1c6f	d0 05		bne $1c76			bne 	_TOKDDNotString
.1c71	a9 22		lda #$22			lda 	#'"'
.1c73	20 45 1c	jsr $1c45			jsr 	TOKDOutput
.1c76					_TOKDDNotString:
.1c76	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1c77					TOKDIdentifier:
.1c77	a0 ff		ldy #$ff			ldy 	#$FF
.1c79	8c 14 05	sty $0514			sty 	TOKDIFirstChar
.1c7c					_TOKDLoop:
.1c7c	a8		tay				tay 								; token in Y
.1c7d	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1c7f	c0 64		cpy #$64			cpy 	#$64
.1c81	f0 11		beq $1c94			beq 	_TOKDIOutput
.1c83	a9 5f		lda #$5f			lda 	#'_'
.1c85	c0 65		cpy #$65			cpy 	#$65
.1c87	f0 0b		beq $1c94			beq 	_TOKDIOutput
.1c89	98		tya				tya 								; handle a-z
.1c8a	18		clc				clc
.1c8b	69 21		adc #$21			adc	 	#$21
.1c8d	c0 5a		cpy #$5a			cpy 	#$5A
.1c8f	90 03		bcc $1c94			bcc 	_TOKDIOutput
.1c91	38		sec				sec 								; handle 0-9
.1c92	e9 4b		sbc #$4b			sbc 	#$4B
.1c94					_TOKDIOutput:
.1c94	2c 14 05	bit $0514			bit 	TOKDIFirstChar
.1c97	10 08		bpl $1ca1			bpl 	_TOKDINoSpacing
.1c99	48		pha				pha
.1c9a	20 36 1d	jsr $1d36			jsr 	TOKDSpacing
.1c9d	9c 14 05	stz $0514			stz 	TOKDIFirstChar
.1ca0	68		pla				pla
.1ca1					_TOKDINoSpacing:
.1ca1	20 45 1c	jsr $1c45			jsr 	TOKDOutput
.1ca4	20 3c 1c	jsr $1c3c			jsr 	TOKDGet 					; get next token
.1ca7	c9 7c		cmp #$7c			cmp 	#$7C
.1ca9	90 d1		bcc $1c7c			bcc 	_TOKDLoop
.1cab	f0 12		beq $1cbf			beq 	_TOKDIExit 					; it's a number, no tail.
.1cad	4a		lsr a				lsr 	a 							; string ?
.1cae	90 07		bcc $1cb7			bcc 	_TOKDICheckArray
.1cb0	48		pha				pha
.1cb1	a9 24		lda #$24			lda 	#"$"
.1cb3	20 45 1c	jsr $1c45			jsr 	TOKDOutput
.1cb6	68		pla				pla
.1cb7					_TOKDICheckArray:
.1cb7	4a		lsr a				lsr 	a 							; array ?
.1cb8	90 05		bcc $1cbf			bcc 	_TOKDIExit
.1cba	a9 28		lda #$28			lda 	#"("
.1cbc	20 45 1c	jsr $1c45			jsr 	TOKDOutput
.1cbf					_TOKDIExit:
.1cbf	60		rts				rts
.0514					TOKDIFirstChar:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1cc0					TOKDInteger:
.1cc0	5a		phy				phy 								; save base
.1cc1	a2 0e		ldx #$0e			ldx 	#IFR0 						; set into R0
.1cc3	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.1cc6					_TOKDILoop:
.1cc6	b2 24		lda ($24)			lda 	(zTemp2) 					; followed by a 00-3F
.1cc8	c9 40		cmp #$40			cmp 	#$40
.1cca	b0 1d		bcs $1ce9			bcs 	_TOKDIHaveInteger
.1ccc	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 << 6
.1cce	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1cd1	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1cd4	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1cd7	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1cda	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1cdd	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1ce0	20 3c 1c	jsr $1c3c			jsr 	TOKDGet 					; OR byte in.
.1ce3	05 0e		ora $0e				ora 	IFR0+IM0
.1ce5	85 0e		sta $0e				sta 	IFR0+IM0
.1ce7	80 dd		bra $1cc6			bra 	_TOKDILoop
.1ce9					_TOKDIHaveInteger:
.1ce9	7a		ply				ply 								; restore base
.1cea	98		tya				tya 								; base in A
.1ceb	20 9a 2c	jsr $2c9a			jsr 	IFloatIntegerToStringR0
.1cee	86 20		stx $20				stx 	zTemp0
.1cf0	84 21		sty $21				sty 	zTemp0+1
.1cf2	b2 20		lda ($20)			lda 	(zTemp0)
.1cf4	20 36 1d	jsr $1d36			jsr 	TOKDSpacing 				; check spacing okay.
.1cf7	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1cf9					_TOKDOutput:
.1cf9	b1 20		lda ($20),y			lda 	(zTemp0),y
.1cfb	20 45 1c	jsr $1c45			jsr 	TOKDOutput
.1cfe	c8		iny				iny
.1cff	b1 20		lda ($20),y			lda 	(zTemp0),y
.1d01	d0 f6		bne $1cf9			bne 	_TOKDOutput
.1d03	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1d04					TOKDToken:
.1d04	a2 6a		ldx #$6a			ldx 	#StandardTokens & $FF
.1d06	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1d08					_TOKDSearch:
.1d08	86 20		stx $20				stx 	zTemp0 						; put table in zTemp0
.1d0a	84 21		sty $21				sty 	zTemp0+1
.1d0c	aa		tax				tax 								; token ID in X.
.1d0d					_TOKDFind:
.1d0d	ca		dex				dex 								; reached the start
.1d0e	10 0d		bpl $1d1d			bpl 	_TOKDFound
.1d10	38		sec				sec 								; go to next entry
.1d11	b2 20		lda ($20)			lda 	(zTemp0)
.1d13	65 20		adc $20				adc 	zTemp0
.1d15	85 20		sta $20				sta 	zTemp0
.1d17	90 f4		bcc $1d0d			bcc 	_TOKDFind
.1d19	e6 21		inc $21				inc 	zTemp0+1
.1d1b	80 f0		bra $1d0d			bra 	_TOKDFind
.1d1d					_TOKDFound:
.1d1d	b2 20		lda ($20)			lda 	(zTemp0) 					; length to X
.1d1f	f0 14		beq $1d35			beq 	_TOKDExit
.1d21	aa		tax				tax
.1d22	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1d24	b1 20		lda ($20),y			lda 	(zTemp0),y 					; check spacing
.1d26	20 36 1d	jsr $1d36			jsr 	TOKDSpacing
.1d29					_TOKDOutput:
.1d29	b1 20		lda ($20),y			lda 	(zTemp0),y
.1d2b	20 90 20	jsr $2090			jsr 	TOKToLower
.1d2e	20 45 1c	jsr $1c45			jsr 	TOKDOutput
.1d31	c8		iny				iny
.1d32	ca		dex				dex
.1d33	d0 f4		bne $1d29			bne 	_TOKDOutput
.1d35					_TOKDExit:
.1d35	60		rts				rts
.1d36					TOKDSpacing:
.1d36	20 a7 20	jsr $20a7			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1d39	90 0d		bcc $1d48			bcc 	_TOKDSExit
.1d3b	ad 13 05	lda $0513			lda 	TOKLastCharacter			; and last character also alphanumeric
.1d3e	20 a7 20	jsr $20a7			jsr 	TOKIsIdentifierElement
.1d41	90 05		bcc $1d48			bcc 	_TOKDSExit
.1d43	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1d45	20 45 1c	jsr $1c45			jsr 	TOKDOutput
.1d48					_TOKDSExit:
.1d48	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1d49					PGMDeleteLine:
.1d49	20 fc 1d	jsr $1dfc			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d4c	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d4e	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1d51	85 23		sta $23				sta 	zTemp1+1
.1d53					_PGMDLoop:
.1d53	b2 22		lda ($22)			lda 	(zTemp1) 					; finished, not found ?
.1d55	38		sec				sec
.1d56	f0 3a		beq $1d92			beq 	_PGMDExit
.1d58	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1d5a	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d5c	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1d5f	d0 08		bne $1d69			bne 	_PGMDNext
.1d61	c8		iny				iny
.1d62	b1 22		lda ($22),y			lda 	(zTemp1),y
.1d64	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1d67	f0 0d		beq $1d76			beq 	_PGMDDelete
.1d69					_PGMDNext:
.1d69	18		clc				clc
.1d6a	b2 22		lda ($22)			lda 	(zTemp1)
.1d6c	65 22		adc $22				adc 	zTemp1
.1d6e	85 22		sta $22				sta 	zTemp1
.1d70	90 e1		bcc $1d53			bcc 	_PGMDLoop
.1d72	e6 23		inc $23				inc 	zTemp1+1
.1d74	80 dd		bra $1d53			bra 	_PGMDLoop
.1d76					_PGMDDelete:
.1d76	b2 22		lda ($22)			lda 	(zTemp1) 					; offset to next in Y
.1d78	a8		tay				tay
.1d79					_PGMDCopy:
.1d79	b1 22		lda ($22),y			lda 	(zTemp1),y 					; copy down.
.1d7b	92 22		sta ($22)			sta 	(zTemp1)
.1d7d	a5 22		lda $22				lda 	zTemp1 						; reached the end ?
.1d7f	c5 20		cmp $20				cmp 	zTemp0
.1d81	d0 07		bne $1d8a			bne 	_PGMDNext2
.1d83	a5 23		lda $23				lda 	zTemp1+1
.1d85	c5 21		cmp $21				cmp 	zTemp0+1
.1d87	18		clc				clc
.1d88	f0 08		beq $1d92			beq 	_PGMDExit
.1d8a					_PGMDNext2:
.1d8a	e6 22		inc $22				inc 	zTemp1 						; advance pointer.
.1d8c	d0 eb		bne $1d79			bne 	_PGMDCopy
.1d8e	e6 23		inc $23				inc 	zTemp1+1
.1d90	80 e7		bra $1d79			bra 	_PGMDCopy
.1d92					_PGMDExit:
.1d92	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1d93					PGMInsertLine:
.1d93	20 fc 1d	jsr $1dfc			jsr 	PGMEndProgram 				; end of program into zTemp0
.1d96	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.1d98	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1d9b	85 23		sta $23				sta 	zTemp1+1
.1d9d					_PGMILoop:
.1d9d	b2 22		lda ($22)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1d9f	f0 1c		beq $1dbd			beq 	_PGMIInsert
.1da1	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1da3	b1 22		lda ($22),y			lda 	(zTemp1),y
.1da5	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1da8	c8		iny				iny
.1da9	b1 22		lda ($22),y			lda 	(zTemp1),y
.1dab	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1dae	b0 0d		bcs $1dbd			bcs 	_PGMIInsert 				; insert here.
.1db0	18		clc				clc
.1db1	b2 22		lda ($22)			lda 	(zTemp1)
.1db3	65 22		adc $22				adc 	zTemp1
.1db5	85 22		sta $22				sta 	zTemp1
.1db7	90 e4		bcc $1d9d			bcc 	_PGMILoop
.1db9	e6 23		inc $23				inc 	zTemp1+1
.1dbb	80 e0		bra $1d9d			bra 	_PGMILoop
.1dbd					_PGMIInsert:
.1dbd	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1dc0					_PGMIInsertLoop:
.1dc0	b2 20		lda ($20)			lda 	(zTemp0)
.1dc2	91 20		sta ($20),y			sta 	(zTemp0),y
.1dc4	a5 22		lda $22				lda 	zTemp1 						; reached insert point
.1dc6	c5 20		cmp $20				cmp 	zTemp0
.1dc8	d0 06		bne $1dd0			bne 	_PGMINext
.1dca	a5 23		lda $23				lda 	zTemp1+1
.1dcc	c5 21		cmp $21				cmp 	zTemp0+1
.1dce	f0 0a		beq $1dda			beq 	_PGMIInserted
.1dd0					_PGMINext:
.1dd0	a5 20		lda $20				lda 	zTemp0
.1dd2	d0 02		bne $1dd6			bne 	_PGMINoBorrow
.1dd4	c6 21		dec $21				dec 	zTemp0+1
.1dd6					_PGMINoBorrow:
.1dd6	c6 20		dec $20				dec 	zTemp0
.1dd8	80 e6		bra $1dc0			bra 	_PGMIInsertLoop
.1dda					_PGMIInserted:
.1dda	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1ddc					_PGMICopyLoop:
.1ddc	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1ddf	91 22		sta ($22),y			sta 	(zTemp1),y
.1de1	c8		iny				iny
.1de2	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1de5	d0 f5		bne $1ddc			bne 	_PGMICopyLoop
.1de7	18		clc				clc
.1de8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1de9					PGMSetBaseAddress:
.1de9	8e 15 05	stx $0515			stx 	PGMBaseHigh
.1dec	8c 16 05	sty $0516			sty 	PGMEndMemoryHigh
.1def	60		rts				rts
.1df0					PGMNewProgram:
.1df0	64 20		stz $20				stz 	zTemp0						; copy base address to zTemp0
.1df2	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1df5	85 21		sta $21				sta 	zTemp0+1
.1df7	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1df9	92 20		sta ($20)			sta 	(zTemp0)
.1dfb	60		rts				rts
.1dfc					PGMEndProgram:
.1dfc	64 20		stz $20				stz 	zTemp0 						; copy base address to zTemp0
.1dfe	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1e01	85 21		sta $21				sta 	zTemp0+1
.1e03					_PGMEPLoop:
.1e03	b2 20		lda ($20)			lda 	(zTemp0)
.1e05	f0 0b		beq $1e12			beq 	_PGMEPExit
.1e07	18		clc				clc
.1e08	65 20		adc $20				adc 	zTemp0
.1e0a	85 20		sta $20				sta 	zTemp0
.1e0c	90 f5		bcc $1e03			bcc 	_PGMEPLoop
.1e0e	e6 21		inc $21				inc 	zTemp0+1
.1e10	80 f1		bra $1e03			bra 	_PGMEPLoop
.1e12					_PGMEPExit:
.1e12	60		rts				rts
.0515					PGMBaseHigh:
>0515							.fill 	1
.0516					PGMEndMemoryHigh:
>0516							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1e13					TOKResetElement:
.1e13	9c 17 05	stz $0517			stz 	TOKElement
.1e16	60		rts				rts
.1e17					TOKWriteElement:
.1e17	da		phx				phx
.1e18	ae 17 05	ldx $0517			ldx 	TOKElement
.1e1b	9d 18 05	sta $0518,x			sta 	TOKElementText,x
.1e1e	9e 19 05	stz $0519,x			stz 	TOKElementText+1,x
.1e21	fa		plx				plx
.1e22	ee 17 05	inc $0517			inc 	TOKElement
.1e25	60		rts				rts
.0517					TOKElement:
>0517							.fill 	1
.0518					TOKElementText:
>0518							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1e26					TOKTokeniseConstant:
.1e26	a5 0e		lda $0e				lda 	IFR0+IM0 					; check > 64
.1e28	48		pha				pha 								; save on stack
.1e29	29 c0		and #$c0			and 	#$C0
.1e2b	05 0f		ora $0f				ora 	IFR0+IM1
.1e2d	05 10		ora $10				ora 	IFR0+IM2
.1e2f	f0 10		beq $1e41			beq 	_TTCLess
.1e31	da		phx				phx
.1e32	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1e34					_TTCShiftRight:
.1e34	46 10		lsr $10				lsr 	IFR0+IM2
.1e36	66 0f		ror $0f				ror 	IFR0+IM1
.1e38	66 0e		ror $0e				ror 	IFR0+IM0
.1e3a	ca		dex				dex
.1e3b	d0 f7		bne $1e34			bne 	_TTCShiftRight
.1e3d	fa		plx				plx
.1e3e	20 26 1e	jsr $1e26			jsr 	TOKTokeniseConstant
.1e41					_TTCLess:
.1e41	68		pla				pla
.1e42	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1e44	20 e3 1e	jsr $1ee3			jsr 	TOKWriteA
.1e47	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1e48					TOKTokeniseDecimals:
.1e48	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext 					; consume the .
.1e4b	20 1d 20	jsr $201d			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e4e	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1e50	20 e3 1e	jsr $1ee3			jsr 	TOKWriteA
.1e53	20 58 1e	jsr $1e58			jsr 	TOKOutputElementBuffer 		; then the buffer
.1e56	18		clc				clc
.1e57	60		rts				rts
.1e58					TOKOutputElementBuffer:
.1e58	ad 17 05	lda $0517			lda 	TOKElement 					; get count and write that
.1e5b	20 e3 1e	jsr $1ee3			jsr 	TOKWriteA
.1e5e	a8		tay				tay 								; put in Y
.1e5f	f0 0c		beq $1e6d			beq 	_TOEExit 					; exit if empty which is okay.
.1e61	a2 01		ldx #$01			ldx 	#1
.1e63					_TOELoop:
.1e63	bd 17 05	lda $0517,x			lda 	TOKElement,x
.1e66	20 e3 1e	jsr $1ee3			jsr 	TOKWriteA
.1e69	e8		inx				inx
.1e6a	88		dey				dey
.1e6b	d0 f6		bne $1e63			bne 	_TOELoop
.1e6d					_TOEExit:
.1e6d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1e6e					TOKTokenise:
.1e6e	8c 18 06	sty $0618			sty 	TOKDataSource+1 			; save source routine pointer
.1e71	8e 17 06	stx $0617			stx 	TOKDataSource
.1e74	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1e76	8d 19 06	sta $0619			sta 	TOKIsFirstElement
.1e79	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1e7b	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1e7e	9c 01 04	stz $0401			stz 	TOKLineNumber
.1e81	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1e84					_TOKMainLoop:
.1e84	20 ef 1e	jsr $1eef			jsr 	TOKGet 						; what follows.
.1e87	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1e89	f0 4f		beq $1eda			beq 	_TOKExit
.1e8b	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1e8d	d0 05		bne $1e94			bne 	_TOKElement
.1e8f	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext
.1e92	80 f0		bra $1e84			bra 	_TOKMainLoop
.1e94					_TOKElement:
.1e94	20 9b 20	jsr $209b			jsr 	TOKIsDigit 					; is it 0..9
.1e97	90 0a		bcc $1ea3			bcc 	_TOKNotDigit
.1e99	20 f4 1f	jsr $1ff4			jsr 	TOKTokeniseInteger 			; get integer
.1e9c	b0 43		bcs $1ee1			bcs 	_TOKFail 					; did it fail ?
.1e9e	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.1ea1	80 e1		bra $1e84			bra 	_TOKMainLoop
.1ea3					_TOKNotDigit:
.1ea3	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.1ea6	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1ea8	d0 07		bne $1eb1			bne 	_TOKNotHex
.1eaa	20 3c 1f	jsr $1f3c			jsr 	TOKTokeniseHexadecimal
.1ead	b0 32		bcs $1ee1			bcs 	_TOKFail
.1eaf	80 d3		bra $1e84			bra 	_TOKMainLoop
.1eb1					_TOKNotHex:
.1eb1	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1eb3	d0 07		bne $1ebc			bne 	_TOKNotDecimal
.1eb5	20 48 1e	jsr $1e48			jsr 	TOKTokeniseDecimals
.1eb8	b0 27		bcs $1ee1			bcs 	_TOKFail
.1eba	80 c8		bra $1e84			bra 	_TOKMainLoop
.1ebc					_TOKNotDecimal:
.1ebc	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1ebe	d0 07		bne $1ec7			bne 	_TOKNotString
.1ec0	20 62 20	jsr $2062			jsr 	TOKTokeniseString
.1ec3	b0 1c		bcs $1ee1			bcs 	_TOKFail
.1ec5	80 bd		bra $1e84			bra 	_TOKMainLoop
.1ec7					_TOKNotString:
.1ec7	20 b8 20	jsr $20b8			jsr 	TOKIsAlpha 					; identifier ?
.1eca	b0 07		bcs $1ed3			bcs 	_TOKIdentifier
.1ecc	20 31 20	jsr $2031			jsr 	TOKTokenisePunctuation 		; punctuation
.1ecf	b0 10		bcs $1ee1			bcs 	_TOKFail
.1ed1	80 b1		bra $1e84			bra 	_TOKMainLoop
.1ed3					_TOKIdentifier:
.1ed3	20 76 1f	jsr $1f76			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1ed6	b0 09		bcs $1ee1			bcs 	_TOKFail
.1ed8	80 aa		bra $1e84			bra 	_TOKMainLoop
.1eda					_TOKExit:
.1eda	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1edc	20 e3 1e	jsr $1ee3			jsr 	TOKWriteA
.1edf	18		clc				clc									; return with carry set.
.1ee0	60		rts				rts
.1ee1					_TOKFail:
.1ee1	38		sec				sec
.1ee2	60		rts				rts
.1ee3					TOKWriteA:
.1ee3	da		phx				phx
.1ee4	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1ee7	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1eea	fa		plx				plx
.1eeb	ee 00 04	inc $0400			inc 	TOKLineSize
.1eee	60		rts				rts
.1eef					TOKGet:
.1eef	18		clc				clc
.1ef0	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.1ef3					TOKGetNext:
.1ef3	38		sec				sec
.1ef4	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.0617					TOKDataSource:
>0617							.fill 	2
.0619					TOKIsFirstElement:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1ef7					TOKFindToken:
.1ef7	a2 6a		ldx #$6a			ldx 	#StandardTokens & $FF 		; do this table
.1ef9	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1efb	20 06 1f	jsr $1f06			jsr 	TOKFindTokenXY 				; find it, or not
.1efe	90 04		bcc $1f04			bcc 	_TOKFTFail
.1f00	a2 00		ldx #$00			ldx 	#0
.1f02	38		sec				sec
.1f03	60		rts				rts
.1f04					_TOKFTFail
.1f04	18		clc				clc
.1f05	60		rts				rts
.1f06					TOKFindTokenXY:
.1f06	86 20		stx $20				stx 	zTemp0 						; save token table address
.1f08	84 21		sty $21				sty 	zTemp0+1
.1f0a	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1f0c	8d 1a 06	sta $061a			sta 	TOKCurrent
.1f0f					_TOKFindLoop:
.1f0f	b2 20		lda ($20)			lda 	(zTemp0) 					; get token length from table
.1f11	18		clc				clc 		 						; clear carry in case of fail
.1f12	30 17		bmi $1f2b			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1f14	cd 17 05	cmp $0517			cmp 	TOKElement 					; compare against the element length
.1f17	d0 13		bne $1f2c			bne 	_TOKNext 					; different, try next.
.1f19	aa		tax				tax 								; number of chars to compare.
.1f1a	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1f1c					_TOKCompare:
.1f1c	b1 20		lda ($20),y			lda 	(zTemp0),y 					; compare the characters
.1f1e	d9 17 05	cmp $0517,y			cmp 	TOKElementText-1,y
.1f21	d0 09		bne $1f2c			bne 	_TOKNext 					; different ? try next
.1f23	c8		iny				iny 								; compare next two
.1f24	ca		dex				dex
.1f25	d0 f5		bne $1f1c			bne 	_TOKCompare 				; until done X characters.
.1f27	38		sec				sec
.1f28	ad 1a 06	lda $061a			lda 	TOKCurrent 					; return current ID.
.1f2b					_TOKExit:
.1f2b	60		rts				rts
.1f2c					_TOKNext:
.1f2c	ee 1a 06	inc $061a			inc 	TOKCurrent 					; increment token #
.1f2f	38		sec				sec 								; add length+1 to ptr
.1f30	b2 20		lda ($20)			lda 	(zTemp0)
.1f32	65 20		adc $20				adc 	zTemp0
.1f34	85 20		sta $20				sta 	zTemp0
.1f36	90 d7		bcc $1f0f			bcc 	_TOKFindLoop
.1f38	e6 21		inc $21				inc 	zTemp0+1
.1f3a	80 d3		bra $1f0f			bra 	_TOKFindLoop
.061a					TOKCurrent:
>061a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1f3c					TOKTokeniseHexadecimal:
.1f3c	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext 					; consume the $
.1f3f	a2 0e		ldx #$0e			ldx 	#IFR0
.1f41	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero 				; set R0 = 0
.1f44					_TTHLoop:
.1f44	20 ef 1e	jsr $1eef			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f47	20 c5 20	jsr $20c5			jsr 	TOKIsHexadecimal
.1f4a	90 20		bcc $1f6c			bcc 	_TTHDone
.1f4c	a2 0e		ldx #$0e			ldx 	#IFR0 						; shift R0 right 4
.1f4e	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1f51	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1f54	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1f57	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.1f5a	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext
.1f5d	38		sec				sec 								; convert to decimal.
.1f5e	e9 30		sbc #$30			sbc 	#48
.1f60	c9 0a		cmp #$0a			cmp 	#10
.1f62	90 02		bcc $1f66			bcc 	_TTHNotAlpha
.1f64	e9 07		sbc #$07			sbc 	#7
.1f66					_TTHNotAlpha:
.1f66	05 0e		ora $0e				ora 	IFR0+IM0 					; OR in
.1f68	85 0e		sta $0e				sta 	IFR0+IM0
.1f6a	80 d8		bra $1f44			bra 	_TTHLoop
.1f6c					_TTHDone:
.1f6c	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1f6e	20 e3 1e	jsr $1ee3			jsr 	TOKWriteA
.1f71	20 26 1e	jsr $1e26			jsr 	TOKTokeniseConstant 		; write integer out.
.1f74	18		clc				clc
.1f75	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1f76					TOKTokeniseIdentifier:
.1f76	20 13 1e	jsr $1e13			jsr 	TOKResetElement 			; extract an identifier
.1f79					_TOKGetIdentifier:
.1f79	20 ef 1e	jsr $1eef			jsr 	TOKGet
.1f7c	20 85 20	jsr $2085			jsr 	TOKToUpper
.1f7f	20 a7 20	jsr $20a7			jsr 	TOKIsIdentifierElement
.1f82	90 08		bcc $1f8c			bcc 	_TOKEndIdent
.1f84	20 17 1e	jsr $1e17			jsr		TOKWriteElement
.1f87	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext
.1f8a	80 ed		bra $1f79			bra 	_TOKGetIdentifier
.1f8c					_TOKEndIdent:
.1f8c	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1f8e	d0 06		bne $1f96			bne 	_TOKNotString
.1f90	20 17 1e	jsr $1e17			jsr 	TOKWriteElement 			; add it
.1f93	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext 					; consume it
.1f96					_TOKNotString:
.1f96	20 ef 1e	jsr $1eef			jsr 	TOKGet 						; finally check for (
.1f99	c9 28		cmp #$28			cmp 	#"("
.1f9b	d0 06		bne $1fa3			bne 	_TOKNoArray
.1f9d	20 17 1e	jsr $1e17			jsr 	TOKWriteElement 			; add it
.1fa0	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext 					; consume it
.1fa3					_TOKNoArray:
.1fa3	20 f7 1e	jsr $1ef7			jsr 	TOKFindToken 				; find it
.1fa6	90 05		bcc $1fad			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1fa8	20 e3 1e	jsr $1ee3			jsr 	TOKWriteA
.1fab	18		clc				clc
.1fac	60		rts				rts
.1fad					_TOKIsVariable:
.1fad	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1faf					_TOKOutputBuffer:
.1faf	bd 18 05	lda $0518,x			lda 	TOKElementText,x 			; output it translated.
.1fb2	20 db 1f	jsr $1fdb			jsr 	TOKTranslateIdentifier
.1fb5	20 e3 1e	jsr $1ee3			jsr 	TOKWriteA
.1fb8	e8		inx				inx
.1fb9	bd 18 05	lda $0518,x			lda 	TOKElementText,x
.1fbc	20 a7 20	jsr $20a7			jsr 	TOKIsIdentifierElement
.1fbf	b0 ee		bcs $1faf			bcs 	_TOKOutputBuffer
.1fc1	a8		tay				tay 								; last char in Y
.1fc2	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1fc4	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1fc6	f0 0e		beq $1fd6			beq 	_TOKIVExit
.1fc8	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1fca	d0 04		bne $1fd0			bne 	_TOKIVCheckArray 			; no, check for (
.1fcc	1a		inc a				inc 	a 							; token is $7D
.1fcd	bc 19 05	ldy $0519,x			ldy 	TOKElementText+1,x 			; get next one.
.1fd0					_TOKIVCheckArray:
.1fd0	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1fd2	d0 02		bne $1fd6			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1fd4	1a		inc a				inc 	a
.1fd5	1a		inc a				inc 	a
.1fd6					_TOKIVExit:
.1fd6	20 e3 1e	jsr $1ee3			jsr 	TOKWriteA 					; ending token
.1fd9	18		clc				clc
.1fda	60		rts				rts
.1fdb					TOKTranslateIdentifier:
.1fdb	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1fdd	f0 0f		beq $1fee			beq 	_TTI64
.1fdf	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1fe1	f0 0e		beq $1ff1			beq 	_TTI65
.1fe3	38		sec				sec
.1fe4	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1fe6	10 03		bpl $1feb			bpl 	_TTIExit
.1fe8	18		clc				clc 								; map 09 onto 26-35
.1fe9	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1feb					_TTIExit:
.1feb	09 40		ora #$40			ora 	#$40 						; correct range.
.1fed	60		rts				rts
.1fee	a9 64		lda #$64	_TTI64:	lda 	#$64
.1ff0	60		rts				rts
.1ff1	a9 65		lda #$65	_TTI65:	lda 	#$65
.1ff3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1ff4					TOKTokeniseInteger:
.1ff4	20 1d 20	jsr $201d			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1ff7	a2 18		ldx #$18			ldx 	#TOKElementText & $FF
.1ff9	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.1ffb	ad 17 05	lda $0517			lda		TOKElement
.1ffe	20 5d 2d	jsr $2d5d			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2001	ad 19 06	lda $0619			lda 	TOKIsFirstElement 			; first element ?
.2004	f0 12		beq $2018			beq 	_TOKNotLineNumber
.2006	a5 10		lda $10				lda 	IFR0+IM2 					; check it's a 2 digit number
.2008	d0 0c		bne $2016			bne 	_TOKBadLineNumeber
.200a	a5 0e		lda $0e				lda 	IFR0+IM0 					; copy it to the line number section.
.200c	8d 01 04	sta $0401			sta 	TOKLineNumber
.200f	a5 0f		lda $0f				lda 	IFR0+IM1
.2011	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2014	18		clc				clc
.2015	60		rts				rts
.2016					_TOKBadLineNumeber:
.2016	38		sec				sec
.2017	60		rts				rts
.2018					_TOKNotLineNumber:
.2018	20 26 1e	jsr $1e26			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.201b	18		clc				clc
.201c	60		rts				rts
.201d					TOKExtractInteger:
.201d	20 13 1e	jsr $1e13			jsr 	TOKResetElement 			; restart
.2020					_TTILoop:
.2020	20 ef 1e	jsr $1eef			jsr 	TOKGet 						; keep getting and copying while numeric.
.2023	20 9b 20	jsr $209b			jsr 	TOKIsDigit
.2026	90 08		bcc $2030			bcc 	_TOKEIExit
.2028	20 17 1e	jsr $1e17			jsr 	TOKWriteElement
.202b	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext
.202e	80 f0		bra $2020			bra 	_TTILoop
.2030					_TOKEIExit:
.2030	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2031					TOKTokenisePunctuation:
.2031	20 13 1e	jsr $1e13			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2034	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext
.2037	20 17 1e	jsr $1e17			jsr 	TOKWriteElement
.203a	20 ef 1e	jsr $1eef			jsr 	TOKGet 						; what follows ?
.203d	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.203f	f0 10		beq $2051			beq 	_TTPOne
.2041	20 af 20	jsr $20af			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2044	b0 0b		bcs $2051			bcs 	_TTPOne 					; these speed things up a bit.
.2046	20 17 1e	jsr $1e17			jsr 	TOKWriteElement 			; this is what we will search for.
.2049	20 f7 1e	jsr $1ef7			jsr 	TOKFindToken
.204c	b0 0a		bcs $2058			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.204e	ce 17 05	dec $0517			dec 	TOKElement 					; make it a single character
.2051					_TTPOne:
.2051	20 f7 1e	jsr $1ef7			jsr 	TOKFindToken 				; look for one character punctuation
.2054	b0 07		bcs $205d			bcs 	_TTPOutputExit 				; we found it
.2056	38		sec				sec 								; not recognised.
.2057	60		rts				rts
.2058					_TTPConsumeExit:
.2058	48		pha				pha
.2059	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext 					; get the 2nd char out.
.205c	68		pla				pla
.205d					_TTPOutputExit:
.205d	20 e3 1e	jsr $1ee3			jsr  	TOKWriteA 					; write token out
.2060	18		clc				clc
.2061	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2062					TOKTokeniseString:
.2062	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext 					; consume the "
.2065	20 13 1e	jsr $1e13			jsr 	TOKResetElement 			; start getting the string
.2068					_TOKTSLoop:
.2068	20 ef 1e	jsr $1eef			jsr 	TOKGet 						; check EOL
.206b	c9 00		cmp #$00			cmp 	#0
.206d	f0 0c		beq $207b			beq 	_TOKTSExit
.206f	20 f3 1e	jsr $1ef3			jsr 	TOKGetNext 					; get and consume
.2072	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2074	f0 05		beq $207b			beq 	_TOKTSExit
.2076	20 17 1e	jsr $1e17			jsr 	TOKWriteElement
.2079	80 ed		bra $2068			bra 	_TOKTSLoop
.207b					_TOKTSExit:
.207b	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.207d	20 e3 1e	jsr $1ee3			jsr 	TOKWriteA
.2080	20 58 1e	jsr $1e58			jsr 	TOKOutputElementBuffer
.2083	18		clc				clc
.2084	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2085					TOKToUpper:
.2085	c9 61		cmp #$61			cmp 	#"a"
.2087	90 06		bcc $208f			bcc 	_TTUNotLower
.2089	c9 7b		cmp #$7b			cmp 	#"z"+1
.208b	b0 02		bcs $208f			bcs 	_TTUNotLower
.208d	49 20		eor #$20			eor 	#$20
.208f					_TTUNotLower:
.208f	60		rts				rts
.2090					TOKToLower:
.2090	c9 41		cmp #$41			cmp 	#"A"
.2092	90 06		bcc $209a			bcc 	_TTUNotUpper
.2094	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2096	b0 02		bcs $209a			bcs 	_TTUNotUpper
.2098	49 20		eor #$20			eor 	#$20
.209a					_TTUNotUpper:
.209a	60		rts				rts
.209b					TOKIsDigit:
.209b	c9 30		cmp #$30			cmp 	#"0"
.209d	90 06		bcc $20a5			bcc 	TOKFail
.209f	c9 3a		cmp #$3a			cmp 	#"9"+1
.20a1	b0 02		bcs $20a5			bcs 	TOKFail
.20a3					TOKSucceed:
.20a3	38		sec				sec
.20a4	60		rts				rts
.20a5					TOKFail:
.20a5	18		clc				clc
.20a6	60		rts				rts
.20a7					TOKIsIdentifierElement:
.20a7	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.20a9	f0 f8		beq $20a3			beq 	TOKSucceed
.20ab	c9 5f		cmp #$5f			cmp 	#"_"
.20ad	f0 f4		beq $20a3			beq 	TOKSucceed 					; else fall through to alphanumeric
.20af					TOKIsAlphaNumeric:
.20af	20 b8 20	jsr $20b8			jsr 	TOKIsAlpha
.20b2	b0 ef		bcs $20a3			bcs 	TOKSucceed
.20b4	20 9b 20	jsr $209b			jsr 	TOKIsDigit
.20b7	60		rts				rts
.20b8					TOKIsAlpha:
.20b8	20 85 20	jsr $2085			jsr 	TOKToUpper
.20bb	c9 41		cmp #$41			cmp 	#"A"
.20bd	90 e6		bcc $20a5			bcc 	TOKFail
.20bf	c9 5b		cmp #$5b			cmp 	#"Z"+1
.20c1	b0 e2		bcs $20a5			bcs 	TOKFail
.20c3	80 de		bra $20a3			bra 	TOKSucceed
.20c5					TOKIsHexadecimal:
.20c5	20 9b 20	jsr $209b			jsr		TOKIsDigit
.20c8	b0 d9		bcs $20a3			bcs 	TOKSucceed
.20ca	20 b8 20	jsr $20b8			jsr 	TOKIsAlpha
.20cd	90 d6		bcc $20a5			bcc 	TOKFail
.20cf	c9 47		cmp #$47			cmp 	#"F"+1
.20d1	b0 d2		bcs $20a5			bcs 	TOKFail
.20d3	80 ce		bra $20a3			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.20d5					Command_CALL:
.20d5	a9 42		lda #$42			lda 	#STK_CALL
.20d7	20 6a 25	jsr $256a			jsr 	StackOpen
.20da	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.20dc	29 c0		and #$c0			and 	#$C0
.20de	c9 40		cmp #$40			cmp 	#$40
.20e0	d0 29		bne $210b			bne 	_CCSyntax
.20e2	20 3a 28	jsr $283a			jsr 	VARGetInfo 					; get the information
.20e5	20 51 25	jsr $2551			jsr 	ERRCheckRParen 				; check right bracket follows.
.20e8	20 ec 27	jsr $27ec			jsr 	VARFind 					; exists ?
.20eb	90 21		bcc $210e			bcc 	_CCUnknown
.20ed	86 21		stx $21				stx 	zTemp0+1 					; save target in XA
.20ef	85 20		sta $20				sta 	zTemp0
.20f1	20 9e 25	jsr $259e			jsr 	STKSaveCodePosition 		; save return address on stack.
.20f4	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.20f6	b1 20		lda ($20),y			lda 	(zTemp0),y
.20f8	c9 ff		cmp #$ff			cmp 	#$FF
.20fa	d0 12		bne $210e			bne 	_CCUnknown
.20fc	88		dey				dey 								; get Y offset to stack
.20fd	b1 20		lda ($20),y			lda 	(zTemp0),y
.20ff	48		pha				pha
.2100	88		dey				dey 								; get address
.2101	b1 20		lda ($20),y			lda 	(zTemp0),y
.2103	85 1f		sta $1f				sta 	codePtr+1
.2105	b2 20		lda ($20)			lda 	(zTemp0)
.2107	85 1e		sta $1e				sta 	codePtr
.2109	7a		ply				ply 								; restore Y
.210a	60		rts				rts
.210b					_CCSyntax:
.210b	4c b4 23	jmp $23b4		jmp	ErrorV_syntax
.210e					_CCUnknown:
.210e	4c 29 25	jmp $2529		jmp	ErrorV_unknown
.2111					Command_ENDPROC:
.2111	a9 42		lda #$42			lda 	#STK_CALL
.2113	20 96 25	jsr $2596			jsr 	StackCheckFrame
.2116	20 b0 25	jsr $25b0			jsr 	STKLoadCodePosition 		; return
.2119	20 88 25	jsr $2588			jsr 	StackClose
.211c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.211d					Command_DO:
.211d	a9 22		lda #$22			lda 	#STK_DO
.211f	20 6a 25	jsr $256a			jsr 	StackOpen
.2122	20 9e 25	jsr $259e			jsr 	STKSaveCodePosition 		; save loop position
.2125	60		rts				rts
.2126					Command_EXIT:
.2126	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2128	20 96 25	jsr $2596			jsr 	StackCheckFrame
.212b	20 88 25	jsr $2588			jsr 	StackClose 					; close it
.212e	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2130	aa		tax				tax
.2131	20 c6 22	jsr $22c6			jsr 	ScanForward
.2134	60		rts				rts
.2135					Command_LOOP:
.2135	a9 22		lda #$22			lda 	#STK_DO
.2137	20 96 25	jsr $2596			jsr 	StackCheckFrame
.213a	20 b0 25	jsr $25b0			jsr 	STKLoadCodePosition 		; loop back
.213d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.213e					Command_FOR:
.213e	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2140	20 6a 25	jsr $256a			jsr 	StackOpen
.2143	20 2b 12	jsr $122b			jsr 	CommandLET 					; do "I = 1" bit
.2146	5a		phy				phy 								; save variable address to +4,+5
.2147	a0 04		ldy #$04			ldy 	#4
.2149	a5 20		lda $20				lda 	zTemp0
.214b	91 28		sta ($28),y			sta 	(basicStack),y
.214d	c8		iny				iny
.214e	a5 21		lda $21				lda 	zTemp0+1
.2150	91 28		sta ($28),y			sta 	(basicStack),y
.2152	7a		ply				ply
.2153	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2155	20 61 25	jsr $2561			jsr 	ERRCheckA
.2158	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.215b	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.215d	a2 0e		ldx #$0e			ldx 	#IFR0
.215f	20 b4 21	jsr $21b4			jsr 	CFSaveR0X
.2162	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; STEP here ?
.2164	c9 91		cmp #$91			cmp 	#PR_STEP
.2166	d0 06		bne $216e			bne 	_CFStep1
.2168	c8		iny				iny 								; consume step
.2169	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 				; evaluate STEP
.216c	80 24		bra $2192			bra 	_CFWriteStep
.216e					_CFStep1:
.216e	a2 0e		ldx #$0e			ldx 	#IFR0 						; default R0, 1
.2170	a9 01		lda #$01			lda 	#1
.2172	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.2175	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2176	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2178	b1 28		lda ($28),y			lda 	(basicStack),y
.217a	85 20		sta $20				sta 	zTemp0
.217c	c8		iny				iny
.217d	b1 28		lda ($28),y			lda 	(basicStack),y
.217f	85 21		sta $21				sta 	zTemp0+1
.2181	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2183	b1 20		lda ($20),y			lda 	(zTemp0),y
.2185	d0 0a		bne $2191			bne 	_CFNotOptimised
.2187	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2189	b1 28		lda ($28),y			lda 	(basicStack),y
.218b	d0 04		bne $2191			bne 	_CFNotOptimised
.218d	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.218f	85 11		sta $11				sta 	IFR0+IExp
.2191					_CFNotOptimised:
.2191	7a		ply				ply
.2192					_CFWriteStep:
.2192	a2 0e		ldx #$0e			ldx 	#IFR0 						; Write to additive.
.2194	a9 06		lda #$06			lda 	#6
.2196	20 b4 21	jsr $21b4			jsr 	CFSaveR0X
.2199	20 9e 25	jsr $259e			jsr 	STKSaveCodePosition 		; save loop position
.219c	60		rts				rts
.219d					CFLoadR0X:
.219d	5a		phy				phy
.219e	a8		tay				tay
.219f	b1 28		lda ($28),y			lda 	(basicStack),y
.21a1	95 00		sta $00,x			sta 	IM0,x
.21a3	c8		iny				iny
.21a4	b1 28		lda ($28),y			lda 	(basicStack),y
.21a6	95 01		sta $01,x			sta 	IM1,x
.21a8	c8		iny				iny
.21a9	b1 28		lda ($28),y			lda 	(basicStack),y
.21ab	95 02		sta $02,x			sta 	IM2,x
.21ad	c8		iny				iny
.21ae	b1 28		lda ($28),y			lda 	(basicStack),y
.21b0	95 03		sta $03,x			sta 	IExp,x
.21b2	7a		ply				ply
.21b3	60		rts				rts
.21b4					CFSaveR0X:
.21b4	5a		phy				phy
.21b5	a8		tay				tay
.21b6	b5 00		lda $00,x			lda 	IM0,x
.21b8	91 28		sta ($28),y			sta 	(basicStack),y
.21ba	c8		iny				iny
.21bb	b5 01		lda $01,x			lda 	IM1,x
.21bd	91 28		sta ($28),y			sta 	(basicStack),y
.21bf	c8		iny				iny
.21c0	b5 02		lda $02,x			lda 	IM2,x
.21c2	91 28		sta ($28),y			sta 	(basicStack),y
.21c4	c8		iny				iny
.21c5	b5 03		lda $03,x			lda 	IExp,x
.21c7	91 28		sta ($28),y			sta 	(basicStack),y
.21c9	7a		ply				ply
.21ca	60		rts				rts
.21cb					Command_NEXT:
.21cb	a9 37		lda #$37			lda 	#STK_FOR
.21cd	20 96 25	jsr $2596			jsr 	StackCheckFrame
.21d0	5a		phy				phy 								; check optimised loop
.21d1	a0 09		ldy #$09			ldy 	#9
.21d3	b1 28		lda ($28),y			lda 	(basicStack),y
.21d5	7a		ply				ply
.21d6	0a		asl a				asl 	a
.21d7	b0 35		bcs $220e			bcs 	_CNOptimised
.21d9	20 45 22	jsr $2245			jsr 	_CNLoadValue 				; load index value to R0.
.21dc	a2 12		ldx #$12			ldx 	#IFR1 						; load adding value to R1.
.21de	a9 06		lda #$06			lda 	#6
.21e0	20 9d 21	jsr $219d			jsr 	CFLoadR0X
.21e3	20 ef 28	jsr $28ef			jsr 	IFloatAdd 					; add them together and write back.
.21e6	20 68 22	jsr $2268			jsr 	_CNSaveValue
.21e9	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.21eb	a2 12		ldx #$12			ldx 	#IFR1
.21ed	20 9d 21	jsr $219d			jsr 	CFLoadR0X
.21f0	20 c7 2b	jsr $2bc7			jsr 	IFloatCompare 				; compare terminal vs current
.21f3	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.21f5	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero
.21f8	f0 10		beq $220a			beq 	_CNLoopBack
.21fa	a5 11		lda $11				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.21fc	5a		phy				phy
.21fd	a0 09		ldy #$09			ldy 	#6+IExp
.21ff	51 28		eor ($28),y			eor 	(basicStack),y
.2201	7a		ply				ply
.2202	29 40		and #$40			and 	#IFSign
.2204	f0 04		beq $220a			beq 	_CNLoopBack
.2206					_CNExitLoop:
.2206	20 88 25	jsr $2588			jsr 	StackClose		 			; return
.2209	60		rts				rts
.220a					_CNLoopBack:
.220a	20 b0 25	jsr $25b0			jsr 	STKLoadCodePosition 		; loop back
.220d	60		rts				rts
.220e					_CNOptimised:
.220e	5a		phy				phy
.220f	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2211	b1 28		lda ($28),y			lda 	(basicStack),y
.2213	85 24		sta $24				sta 	zTemp2
.2215	c8		iny				iny
.2216	b1 28		lda ($28),y			lda 	(basicStack),y
.2218	85 25		sta $25				sta 	zTemp2+1
.221a	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.221c					_CNIncrement:
.221c	c8		iny				iny
.221d	b1 24		lda ($24),y			lda 	(zTemp2),y
.221f	1a		inc a				inc 	a
.2220	91 24		sta ($24),y			sta 	(zTemp2),y
.2222	f0 f8		beq $221c			beq 	_CNIncrement
.2224	18		clc				clc 								; point zTemp0 to terminal value
.2225	a5 28		lda $28				lda 	basicStack
.2227	69 0a		adc #$0a			adc 	#10
.2229	85 20		sta $20				sta 	zTemp0
.222b	a5 29		lda $29				lda 	basicStack+1
.222d	69 00		adc #$00			adc 	#0
.222f	85 21		sta $21				sta 	zTemp0+1
.2231	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2233	b2 24		lda ($24)			lda 	(zTemp2)
.2235	d2 20		cmp ($20)			cmp 	(zTemp0)
.2237	b1 24		lda ($24),y			lda 	(zTemp2),y
.2239	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.223b	c8		iny				iny
.223c	b1 24		lda ($24),y			lda 	(zTemp2),y
.223e	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.2240	7a		ply				ply
.2241	b0 c3		bcs $2206			bcs 	_CNExitLoop
.2243	80 c5		bra $220a			bra 	_CNLoopBack
.2245					_CNLoadValue:
.2245	5a		phy				phy
.2246	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2248	b1 28		lda ($28),y			lda 	(basicStack),y
.224a	85 24		sta $24				sta 	zTemp2
.224c	c8		iny				iny
.224d	b1 28		lda ($28),y			lda 	(basicStack),y
.224f	85 25		sta $25				sta 	zTemp2+1
.2251	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2253	b1 24		lda ($24),y			lda 	(zTemp2),y
.2255	85 0e		sta $0e				sta 	IFR0+IM0
.2257	c8		iny				iny
.2258	b1 24		lda ($24),y			lda 	(zTemp2),y
.225a	85 0f		sta $0f				sta 	IFR0+IM1
.225c	c8		iny				iny
.225d	b1 24		lda ($24),y			lda 	(zTemp2),y
.225f	85 10		sta $10				sta 	IFR0+IM2
.2261	c8		iny				iny
.2262	b1 24		lda ($24),y			lda 	(zTemp2),y
.2264	85 11		sta $11				sta 	IFR0+IExp
.2266	7a		ply				ply
.2267	60		rts				rts
.2268					_CNSaveValue:
.2268	5a		phy				phy
.2269	a0 00		ldy #$00			ldy 	#0
.226b	a5 0e		lda $0e				lda 	IFR0+IM0
.226d	91 24		sta ($24),y			sta 	(zTemp2),y
.226f	c8		iny				iny
.2270	a5 0f		lda $0f				lda 	IFR0+IM1
.2272	91 24		sta ($24),y			sta 	(zTemp2),y
.2274	c8		iny				iny
.2275	a5 10		lda $10				lda 	IFR0+IM2
.2277	91 24		sta ($24),y			sta 	(zTemp2),y
.2279	c8		iny				iny
.227a	a5 11		lda $11				lda 	IFR0+IExp
.227c	91 24		sta ($24),y			sta 	(zTemp2),y
.227e	7a		ply				ply
.227f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2280					IfCommand:
.2280	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 				; Get the if test.
.2283	b1 1e		lda ($1e),y			lda 	(codePtr),y					; what follows ?
.2285	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2287	d0 0a		bne $2293			bne 	_IfStructured 				; we still support it.
.2289	c8		iny				iny 								; consume THEN
.228a	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero 			; is it zero
.228d	f0 01		beq $2290			beq 	_IfFail 					; if fail, go to next line
.228f	60		rts				rts 								; if THEN just continue
.2290					_IfFail:
.2290	4c 95 13	jmp $1395			jmp 	RUNEndOfLine
.2293					_IfStructured:
.2293	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero 			; is it zero
.2296	d0 07		bne $229f			bne 	_IfExit 					; if not, then continue normally.
.2298	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.229a	a2 85		ldx #$85			ldx 	#PR_ENDIF
.229c	20 c6 22	jsr $22c6			jsr 	ScanForward 				; and run from there
.229f					_IfExit:
.229f	60		rts				rts
.22a0					ElseCode:
.22a0	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.22a2	aa		tax				tax 								; so just go to the structure exit
.22a3	20 c6 22	jsr $22c6			jsr 	ScanForward
.22a6	60		rts				rts
.22a7					EndIf:
.22a7	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.22a8					Command_REPEAT:
.22a8	a9 02		lda #$02			lda 	#STK_REPEAT
.22aa	20 6a 25	jsr $256a			jsr 	StackOpen
.22ad	20 9e 25	jsr $259e			jsr 	STKSaveCodePosition 		; save loop position
.22b0	60		rts				rts
.22b1					Command_UNTIL:
.22b1	a9 02		lda #$02			lda 	#STK_REPEAT
.22b3	20 96 25	jsr $2596			jsr 	StackCheckFrame
.22b6	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 				; work out the test
.22b9	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero 			; check if zero
.22bc	f0 04		beq $22c2			beq 	_CULoopBack 				; if so keep looping
.22be	20 88 25	jsr $2588			jsr 	StackClose		 			; return
.22c1	60		rts				rts
.22c2					_CULoopBack:
.22c2	20 b0 25	jsr $25b0			jsr 	STKLoadCodePosition 		; loop back
.22c5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.22c6					ScanForward:
.22c6	85 20		sta $20				sta 	zTemp0 						; save scan options in zTemp0
.22c8	86 21		stx $21				stx 	zTemp0+1
.22ca	64 22		stz $22				stz 	zTemp1 						; clear structure count.
.22cc					_ScanForwardLoop:
.22cc	a5 22		lda $22				lda 	zTemp1 						; if structure count non zero, don't check for end.
.22ce	d0 0a		bne $22da			bne 	_ScanNoCheck
.22d0	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; reached either target token.
.22d2	c5 20		cmp $20				cmp 	zTemp0
.22d4	f0 49		beq $231f			beq 	_ScanExit
.22d6	c5 21		cmp $21				cmp 	zTemp0+1
.22d8	f0 45		beq $231f			beq 	_ScanExit
.22da					_ScanNoCheck:
.22da	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get the token and consume it.
.22dc	c8		iny				iny
.22dd	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.22df	f0 37		beq $2318			beq		_ScanDataItem
.22e1	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.22e3	f0 33		beq $2318			beq 	_ScanDataItem
.22e5	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.22e7	f0 1b		beq $2304			beq 	_ScanNextLine
.22e9	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.22eb	d0 01		bne $22ee			bne 	_ScanNoShift
.22ed	c8		iny				iny
.22ee					_ScanNoShift:
.22ee	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.22f0	b0 da		bcs $22cc			bcs 	_ScanForwardLoop
.22f2	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.22f4	90 d6		bcc $22cc			bcc 	_ScanForwardLoop
.22f6	aa		tax				tax 								; access the table to get the adjustment.
.22f7	18		clc				clc
.22f8	a5 22		lda $22				lda 	zTemp1 						; add it to structure count.
.22fa	7d de 18	adc $18de,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.22fd	85 22		sta $22				sta 	zTemp1
.22ff	10 cb		bpl $22cc			bpl		_ScanForwardLoop 			; error if -ve ?
.2301	4c 40 24	jmp $2440		jmp	ErrorV_structure
.2304					_ScanNextLine:
.2304	18		clc				clc	 								; forward to next line.
.2305	b2 1e		lda ($1e)			lda 	(codePtr)
.2307	65 1e		adc $1e				adc 	codePtr
.2309	85 1e		sta $1e				sta 	codePtr
.230b	90 02		bcc $230f			bcc 	_ScanNoCarry
.230d	e6 1f		inc $1f				inc 	codePtr+1
.230f					_ScanNoCarry:
.230f	a0 03		ldy #$03			ldy 	#3
.2311	b2 1e		lda ($1e)			lda 	(codePtr) 					; off end of program ?
.2313	d0 b7		bne $22cc			bne 	_ScanForwardLoop
.2315	4c 40 24	jmp $2440		jmp	ErrorV_structure
.2318					_ScanDataItem:
.2318	98		tya				tya
.2319	38		sec				sec
.231a	71 1e		adc ($1e),y			adc 	(codePtr),y
.231c	a8		tay				tay
.231d	80 ad		bra $22cc			bra 	_ScanForwardLoop
.231f					_ScanExit:
.231f	c8		iny				iny 								; consume final token.
.2320	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2321					ScanProcedures:
.2321	a5 1e		lda $1e				lda 	codePtr 					; push codePtr on the stack
.2323	48		pha				pha
.2324	a5 1f		lda $1f				lda 	codePtr+1
.2326	48		pha				pha
.2327	5a		phy				phy
.2328	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.232b	85 1f		sta $1f				sta 	codePtr+1
.232d	64 1e		stz $1e				stz 	codePtr
.232f					_SPLoop:
.232f	b2 1e		lda ($1e)			lda 	(codePtr) 					; end of program
.2331	f0 18		beq $234b			beq 	_SPExit
.2333	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2335	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2337	c9 88		cmp #$88			cmp 	#PR_PROC
.2339	d0 03		bne $233e			bne 	_SPNext
.233b	20 53 23	jsr $2353			jsr 	_SPSetupRecord
.233e					_SPNext:
.233e	18		clc				clc 								; forward to next
.233f	b2 1e		lda ($1e)			lda 	(codePtr)
.2341	65 1e		adc $1e				adc 	codePtr
.2343	85 1e		sta $1e				sta 	codePtr
.2345	90 e8		bcc $232f			bcc 	_SPLoop
.2347	e6 1f		inc $1f				inc 	codePtr+1
.2349	80 e4		bra $232f			bra 	_SPLoop
.234b					_SPExit:
.234b	7a		ply				ply
.234c	68		pla				pla
.234d	85 1f		sta $1f				sta 	codePtr+1
.234f	68		pla				pla
.2350	85 1e		sta $1e				sta 	codePtr
.2352	60		rts				rts
.2353					_SPSetupRecord:
.2353	c8		iny				iny 								; check identifier follows
.2354	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2356	29 c0		and #$c0			and 	#$C0
.2358	c9 40		cmp #$40			cmp 	#$40
.235a	d0 27		bne $2383			bne 	_SPSyntax
.235c	20 3a 28	jsr $283a			jsr 	VARGetInfo 					; get the information
.235f	20 51 25	jsr $2551			jsr 	ERRCheckRParen 				; check right bracket follows.
.2362	20 ec 27	jsr $27ec			jsr 	VARFind 					; already exists ?
.2365	b0 1f		bcs $2386			bcs 	_SPUsed 					; error !
.2367	20 98 27	jsr $2798			jsr 	VARCreate 					; create, XA points to the data.
.236a	85 20		sta $20				sta 	zTemp0
.236c	86 21		stx $21				stx 	zTemp0+1
.236e	5a		phy				phy 								; save Y pos on stack
.236f	a0 01		ldy #$01			ldy 	#1
.2371	a5 1e		lda $1e				lda 	codePtr 					; save codePtr/Y
.2373	92 20		sta ($20)			sta 	(zTemp0)
.2375	a5 1f		lda $1f				lda 	codePtr+1
.2377	91 20		sta ($20),y			sta 	(zTemp0),y
.2379	c8		iny				iny
.237a	68		pla				pla
.237b	91 20		sta ($20),y			sta 	(zTemp0),y
.237d	c8		iny				iny
.237e	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2380	91 20		sta ($20),y			sta 	(zTemp0),y
.2382	60		rts				rts
.2383					_SPSyntax:
.2383	4c b4 23	jmp $23b4		jmp	ErrorV_syntax
.2386					_SPUsed:
.2386	4c 0b 25	jmp $250b		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2389					Command_WHILE:
.2389	5a		phy				phy 								; save position of the test
.238a	20 cf 15	jsr $15cf			jsr 	EXPEvalNumber 				; work out the while test.
.238d	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero 			; check if zero
.2390	f0 0e		beq $23a0			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2392	98		tya				tya 								; position *after* test.
.2393	7a		ply				ply 								; restore position before test, at WHILE
.2394	88		dey				dey 								; so we execute the WHILE command again.
.2395	48		pha				pha 								; push after test on the stack
.2396	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2398	20 6a 25	jsr $256a			jsr 	StackOpen
.239b	20 9e 25	jsr $259e			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.239e	7a		ply				ply 								; restore the position *after* the test
.239f	60		rts				rts
.23a0					_WHExitLoop:
.23a0	68		pla				pla 								; throw post loop position
.23a1	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.23a3	aa		tax				tax
.23a4	20 c6 22	jsr $22c6			jsr 	ScanForward
.23a7	60		rts				rts
.23a8					Command_WEND:
.23a8	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.23aa	20 96 25	jsr $2596			jsr 	StackCheckFrame
.23ad	20 b0 25	jsr $25b0			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.23b0	20 88 25	jsr $2588			jsr 	StackClose		 			; erase the frame
.23b3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.23b4					ErrorV_syntax:
.23b4	20 89 26	jsr $2689		jsr	ErrorHandler
>23b7	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>23bf	45 72 72 6f 72 00
.23c5					ErrorV_range:
.23c5	20 89 26	jsr $2689		jsr	ErrorHandler
>23c8	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>23d0	52 61 6e 67 65 00
.23d6					ErrorV_value:
.23d6	20 89 26	jsr $2689		jsr	ErrorHandler
>23d9	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>23e1	75 65 00
.23e4					ErrorV_type:
.23e4	20 89 26	jsr $2689		jsr	ErrorHandler
>23e7	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>23ef	73 6d 61 74 63 68 00
.23f6					ErrorV_unimplemented:
.23f6	20 89 26	jsr $2689		jsr	ErrorHandler
>23f9	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2401	6c 65 6d 65 6e 74 65 64 00
.240a					ErrorV_assert:
.240a	20 89 26	jsr $2689		jsr	ErrorHandler
>240d	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2415	46 61 69 6c 00
.241a					ErrorV_internal:
.241a	20 89 26	jsr $2689		jsr	ErrorHandler
>241d	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2425	6c 20 45 72 72 6f 72 00
.242d					ErrorV_divzero:
.242d	20 89 26	jsr $2689		jsr	ErrorHandler
>2430	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2438	42 79 20 5a 65 72 6f 00
.2440					ErrorV_structure:
.2440	20 89 26	jsr $2689		jsr	ErrorHandler
>2443	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>244b	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2458					ErrorV_stop:
.2458	20 89 26	jsr $2689		jsr	ErrorHandler
>245b	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2463	20 53 74 6f 70 70 65 64 00
.246c					ErrorV_data:
.246c	20 89 26	jsr $2689		jsr	ErrorHandler
>246f	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2477	44 61 74 61 00
.247c					ErrorV_redefine:
.247c	20 89 26	jsr $2689		jsr	ErrorHandler
>247f	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2487	65 64 65 66 69 6e 65 64 00
.2490					ErrorV_index:
.2490	20 89 26	jsr $2689		jsr	ErrorHandler
>2493	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>249b	61 79 20 49 6e 64 65 78 00
.24a4					ErrorV_memory:
.24a4	20 89 26	jsr $2689		jsr	ErrorHandler
>24a7	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>24af	4d 65 6d 6f 72 79 00
.24b6					ErrorV_uninitialised:
.24b6	20 89 26	jsr $2689		jsr	ErrorHandler
>24b9	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>24c1	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.24d1					ErrorV_string:
.24d1	20 89 26	jsr $2689		jsr	ErrorHandler
>24d4	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>24dc	69 6e 67 20 4c 65 6e 67 74 68 00
.24e7					ErrorV_variable:
.24e7	20 89 26	jsr $2689		jsr	ErrorHandler
>24ea	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>24f2	65 20 4d 69 73 73 69 6e 67 00
.24fc					ErrorV_stack:
.24fc	20 89 26	jsr $2689		jsr	ErrorHandler
>24ff	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2507	75 6c 6c 00
.250b					ErrorV_dupproc:
.250b	20 89 26	jsr $2689		jsr	ErrorHandler
>250e	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2516	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2526	65 64 00
.2529					ErrorV_unknown:
.2529	20 89 26	jsr $2689		jsr	ErrorHandler
>252c	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2534	20 50 72 6f 63 65 64 75 72 65 00
.253f					ErrorV_break:
.253f	20 89 26	jsr $2689		jsr	ErrorHandler
>2542	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2549					ERRCheckLParen:
.2549	b1 1e		lda ($1e),y			lda 	(codePtr),y
.254b	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.254d	d0 18		bne $2567			bne 	ERRSyntaxError
.254f	c8		iny				iny
.2550	60		rts				rts
.2551					ERRCheckRParen:
.2551	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2553	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2555	d0 10		bne $2567			bne 	ERRSyntaxError
.2557	c8		iny				iny
.2558	60		rts				rts
.2559					ERRCheckComma:
.2559	b1 1e		lda ($1e),y			lda 	(codePtr),y
.255b	c9 99		cmp #$99			cmp 	#PR_COMMA
.255d	d0 08		bne $2567			bne 	ERRSyntaxError
.255f	c8		iny				iny
.2560	60		rts				rts
.2561					ERRCheckA:
.2561	d1 1e		cmp ($1e),y			cmp 	(codePtr),y
.2563	d0 02		bne $2567			bne 	ERRSyntaxError
.2565	c8		iny				iny
.2566	60		rts				rts
.2567					ERRSyntaxError:
.2567	4c b4 23	jmp $23b4		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.256a					StackOpen:
.256a	48		pha				pha 								; save frame byte
.256b	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.256d	0a		asl a				asl 	a 							; claim twice this for storage
.256e	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2570	38		sec				sec 								; so basically subtracting from
.2571	65 28		adc $28				adc 	basicStack 	 				; basicStack
.2573	85 28		sta $28				sta 	basicStack
.2575	b0 0a		bcs $2581			bcs 	_SONoBorrow
>2577	db						.byte 	$DB
.2578	c6 29		dec $29				dec 	basicStack+1
.257a	a5 29		lda $29				lda 	basicStack+1 				; reached the bottom ?
.257c	cd 1b 06	cmp $061b			cmp 	basicStackEnd
.257f	f0 04		beq $2585			beq 	_SOMemory
.2581					_SONoBorrow:
.2581	68		pla				pla 								; get marker back and write at TOS
.2582	92 28		sta ($28)			sta 	(basicStack)
.2584	60		rts				rts
.2585					_SOMemory:
.2585	4c fc 24	jmp $24fc		jmp	ErrorV_stack
.2588					StackClose:
.2588	b2 28		lda ($28)			lda 	(basicStack) 				; get TOS marker
.258a	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.258c	0a		asl a				asl 	a 							; claim twice this.
.258d	65 28		adc $28				adc 	basicStack 					; add to the stack pointer.
.258f	85 28		sta $28				sta 	basicStack
.2591	90 02		bcc $2595			bcc 	_SCExit
.2593	e6 29		inc $29				inc 	basicStack+1
.2595					_SCExit:
.2595	60		rts				rts
.2596					StackCheckFrame:
.2596	d2 28		cmp ($28)			cmp		(basicStack) 				; check  frames match
.2598	d0 01		bne $259b			bne 	_SCFError 					; different, we have structures mixed up
.259a	60		rts				rts
.259b					_SCFError:
.259b	4c 40 24	jmp $2440		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.259e					STKSaveCodePosition:
.259e	5a		phy				phy
.259f	98		tya				tya 								; save Y at offset 1.
.25a0	a0 01		ldy #$01			ldy 	#1
.25a2	91 28		sta ($28),y			sta 	(basicStack),y
.25a4	a5 1e		lda $1e				lda 	codePtr 					; save code (low) at 2
.25a6	c8		iny				iny
.25a7	91 28		sta ($28),y			sta 	(basicStack),y
.25a9	a5 1f		lda $1f				lda 	codePtr+1 					; save code (high) at 3
.25ab	c8		iny				iny
.25ac	91 28		sta ($28),y			sta 	(basicStack),y
.25ae	7a		ply				ply
.25af	60		rts				rts
.25b0					STKLoadCodePosition:
.25b0	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.25b2	b1 28		lda ($28),y			lda 	(basicStack),y
.25b4	85 1f		sta $1f				sta 	codePtr+1
.25b6	88		dey				dey
.25b7	b1 28		lda ($28),y			lda 	(basicStack),y
.25b9	85 1e		sta $1e				sta 	codePtr
.25bb	88		dey				dey
.25bc	b1 28		lda ($28),y			lda 	(basicStack),y 				; line offset to Y
.25be	a8		tay				tay
.25bf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.25c0					StackReset:
.25c0	48		pha				pha 								; save top of memory
.25c1	3a		dec a				dec 	a  							; end of stack = previous byte
.25c2	85 29		sta $29				sta 	basicStack+1
.25c4	a9 ff		lda #$ff			lda 	#$FF
.25c6	85 28		sta $28				sta 	basicStack
.25c8	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.25ca	92 28		sta ($28)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.25cc	68		pla				pla 								; allocate pages for stack.
.25cd	38		sec				sec
.25ce	e9 02		sbc #$02			sbc 	#STACKPAGES
.25d0	8d 1b 06	sta $061b			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.25d3	60		rts				rts
.0028					basicStack:
>0028							.fill 	2
.061b					basicStackEnd:
>061b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.25d4					StringConcrete:
.25d4	5a		phy				phy 								; save position on stack
.25d5	b2 0e		lda ($0e)			lda 	(IFR0) 						; get string length
.25d7	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.25d9	b0 41		bcs $261c			bcs 	_SALengthError
.25db	18		clc				clc 								; length of the new string
.25dc	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.25de	90 02		bcc $25e2			bcc 	_SAHaveLength
.25e0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.25e2					_SAHaveLength:
.25e2	48		pha				pha 								; save length to be allocated for concreting.
.25e3	38		sec				sec
.25e4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.25e6	6d 1d 06	adc $061d			adc 	stringMemory
.25e9	8d 1d 06	sta $061d			sta 	stringMemory
.25ec	85 24		sta $24				sta 	zTemp2 						; update storage address
.25ee	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.25f0	6d 1e 06	adc $061e			adc 	stringMemory+1
.25f3	8d 1e 06	sta $061e			sta 	stringMemory+1
.25f6	85 25		sta $25				sta 	zTemp2+1
.25f8	68		pla				pla 								; save length allocated in +0
.25f9	92 24		sta ($24)			sta 	(zTemp2)
.25fb	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.25fd	a0 01		ldy #$01			ldy 	#1
.25ff	91 24		sta ($24),y			sta 	(zTemp2),y
.2601					_SACopyNewString:
.2601	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy length at +2
.2603	a0 02		ldy #$02			ldy 	#2
.2605	91 24		sta ($24),y			sta 	(zTemp2),y
.2607	aa		tax				tax 								; bytes to copy
.2608	f0 0c		beq $2616			beq 	_SACopyExit
.260a	a0 01		ldy #$01			ldy 	#1 							; first character from here
.260c					_SACopyNSLoop:
.260c	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; get character from here
.260e	c8		iny				iny 								; write two on in string storage
.260f	c8		iny				iny
.2610	91 24		sta ($24),y			sta 	(zTemp2),y
.2612	88		dey				dey
.2613	ca		dex				dex									; until copied all the string lengths.
.2614	d0 f6		bne $260c			bne 	_SACopyNSLoop
.2616					_SACopyExit:
.2616	a6 25		ldx $25				ldx 	zTemp2+1 					; XA contain the concreted string.
.2618	a5 24		lda $24				lda 	zTemp2
.261a	7a		ply				ply
.261b	60		rts				rts
.261c					_SALengthError:
.261c	4c d1 24	jmp $24d1		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.261f					StringSystemInitialise:
.261f	3a		dec a				dec 	a 							; make last byte of previous page.
.2620	8d 1e 06	sta $061e			sta 	stringMemory+1
.2623	85 21		sta $21				sta 	zTemp0+1
.2625	a9 ff		lda #$ff			lda 	#$FF
.2627	8d 1d 06	sta $061d			sta 	stringMemory
.262a	85 20		sta $20				sta 	zTemp0
.262c	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.262e	92 20		sta ($20)			sta 	(zTemp0)
.2630	60		rts				rts
.2631					StringSpaceInitialise:
.2631	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2633	8d 1c 06	sta $061c			sta 	stringInitialised
.2636	ad 1d 06	lda $061d			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2639	8d 1f 06	sta $061f			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.263c	ad 1e 06	lda $061e			lda 	stringMemory+1
.263f	3a		dec a				dec 	a
.2640	8d 20 06	sta $0620			sta 	stringTempPointer+1
.2643	20 66 10	jsr $1066			jsr 	ClearCheckMemory
.2646	60		rts				rts
.2647					StringTempAllocate:
.2647	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2649	b0 2e		bcs $2679			bcs 	_STALength
.264b	2c 1c 06	bit $061c			bit 	stringInitialised 			; already initialised
.264e	30 05		bmi $2655			bmi 	_STAAllocate
.2650	48		pha				pha 								; save value to subtract.
.2651	20 31 26	jsr $2631			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2654	68		pla				pla 								; restore it
.2655					_STAAllocate:
.2655	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2657	18		clc				clc  								; deliberate allows one more
.2658	6d 1f 06	adc $061f			adc 	stringTempPointer 			; subtract from temp pointer
.265b	8d 1f 06	sta $061f			sta 	stringTempPointer
.265e	85 0e		sta $0e				sta 	IFR0+IM0 					; address in mantissa too
.2660	85 2a		sta $2a				sta 	zsTemp 						; and zsTemp
.2662	ad 20 06	lda $0620			lda 	stringTempPointer+1
.2665	69 ff		adc #$ff			adc 	#$FF
.2667	8d 20 06	sta $0620			sta 	stringTempPointer+1
.266a	85 2b		sta $2b				sta 	zsTemp+1
.266c	85 0f		sta $0f				sta 	IFR0+IM1
.266e	64 10		stz $10				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2670	a9 80		lda #$80			lda 	#$80
.2672	85 11		sta $11				sta 	IFR0+IExp
.2674	a9 00		lda #$00			lda 	#0 							; clear the target string
.2676	92 2a		sta ($2a)			sta 	(zsTemp)
.2678	60		rts				rts
.2679					_STALength:
.2679	4c d1 24	jmp $24d1		jmp	ErrorV_string
.267c					StringTempWrite:
.267c	5a		phy				phy
.267d	48		pha				pha
.267e	b2 2a		lda ($2a)			lda 	(zsTemp)
.2680	1a		inc a				inc 	a
.2681	92 2a		sta ($2a)			sta 	(zsTemp)
.2683	a8		tay				tay
.2684	68		pla				pla
.2685	91 2a		sta ($2a),y			sta 	(zsTemp),y
.2687	7a		ply				ply
.2688	60		rts				rts
.002a					zsTemp:
>002a							.fill 	2
.061c					stringInitialised:
>061c							.fill 	1
.061d					stringMemory:
>061d							.fill 	2
.061f					stringTempPointer:
>061f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2689					ErrorHandler:
.2689	fa		plx				plx 								; get address of msg
.268a	7a		ply				ply
.268b	e8		inx				inx 								; bump past RTS
.268c	d0 01		bne $268f			bne 	_EHNoInc
.268e	c8		iny				iny
.268f					_EHNoInc:
.268f	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.2692	ad 21 06	lda $0621			lda 	ERRLine 					; direct command ?
.2695	0d 22 06	ora $0622			ora 	ERRLine+1
.2698	f0 10		beq $26aa			beq 	_EHNoNumber
.269a	a2 ad		ldx #$ad			ldx 	#_EHAtMsg & $FF
.269c	a0 26		ldy #$26			ldy 	#_EHAtMsg >> 8
.269e	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.26a1	ad 21 06	lda $0621			lda 	ERRLine 					; line number -> XA
.26a4	ae 22 06	ldx $0622			ldx 	ERRLine+1
.26a7	20 b2 26	jsr $26b2			jsr 	WriteIntXA
.26aa					_EHNoNumber:
.26aa	4c db 26	jmp $26db			jmp 	WarmStartNewLine
.26ad					_EHAtMsg:
>26ad	20 61 74 20 00					.text 	" at ",0
.26b2					WriteIntXA:
.26b2	da		phx				phx
.26b3	48		pha				pha
.26b4	a2 0e		ldx #$0e			ldx 	#IFR0
.26b6	20 48 2e	jsr $2e48			jsr 	IFloatPushRx
.26b9	68		pla				pla
.26ba	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.26bd	68		pla				pla
.26be	85 0f		sta $0f				sta 	IFR0+IM1
.26c0	a9 0a		lda #$0a			lda 	#10 						; decimal
.26c2	20 9a 2c	jsr $2c9a			jsr 	IFloatIntegerToStringR0	 	; convert
.26c5	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.26c8	a2 0e		ldx #$0e			ldx 	#IFR0
.26ca	20 69 2e	jsr $2e69			jsr 	IFloatPullRx
.26cd	60		rts				rts
.26ce					NotImplemented:
.26ce	4c f6 23	jmp $23f6		jmp	ErrorV_unimplemented
.0621					ERRLine:
>0621							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.26d1					WarmStart:
.26d1	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.26d3	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.26d6	a9 6b		lda #$6b			lda 	#"k"
.26d8	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.26db					WarmStartNewLine:
.26db	a9 0d		lda #$0d			lda 	#13
.26dd	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.26e0					WarmStartNoPrompt:
.26e0	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.26e2	9a		txs				txs
.26e3	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.26e6	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.26e8	f0 f1		beq $26db			beq 	WarmStartNewLine
.26ea	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.26ec	d0 f2		bne $26e0			bne 	WarmStartNoPrompt
.26ee	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.26f1	e8		inx				inx 								; skip length byte to make it ASCIIZ
.26f2	d0 01		bne $26f5			bne 	_WSSkip
.26f4	c8		iny				iny
.26f5					_WSSkip:
.26f5	86 24		stx $24				stx 	zTemp2 						; save address
.26f7	84 25		sty $25				sty 	zTemp2+1
.26f9	a2 23		ldx #$23			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.26fb	a0 27		ldy #$27			ldy 	#TOKGetCharacter >> 8
.26fd	38		sec				sec
.26fe	20 6e 1e	jsr $1e6e			jsr 	TOKTokenise
.2701	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2704	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2707	d0 0b		bne $2714			bne 	_WSLineEdit
.2709	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.270b	85 1e		sta $1e				sta 	codePtr
.270d	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.270f	85 1f		sta $1f				sta 	codePtr+1
.2711	4c a0 13	jmp $13a0			jmp 	RUNNewLine
.2714					_WSLineEdit:
.2714	20 49 1d	jsr $1d49			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2717	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.271a	c9 04		cmp #$04			cmp 	#4
.271c	f0 03		beq $2721			beq 	_WSNoInsert
.271e	20 93 1d	jsr $1d93			jsr 	PGMInsertLine				; if not, maybe insert
.2721					_WSNoInsert:
.2721	80 bd		bra $26e0			bra 	WarmStartNoPrompt
.2723					TOKGetCharacter:
.2723	b2 24		lda ($24)			lda 	(zTemp2)
.2725	90 06		bcc $272d			bcc 	_GSNoIncrement
.2727	e6 24		inc $24				inc 	zTemp2
.2729	d0 02		bne $272d			bne 	_GSNoIncrement
.272b	e6 25		inc $25				inc 	zTemp2+1
.272d					_GSNoIncrement:
.272d	c9 00		cmp #$00			cmp 	#0
.272f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2730					VARArrayLookup:
.2730	85 20		sta $20				sta 	zTemp0 						; save the array address pointer in zTemp0
.2732	86 21		stx $21				stx 	zTemp0+1
.2734	b2 20		lda ($20)			lda 	(zTemp0)
.2736	48		pha				pha
.2737	5a		phy				phy
.2738	a0 01		ldy #$01			ldy 	#1
.273a	b1 20		lda ($20),y			lda 	(zTemp0),y
.273c	7a		ply				ply
.273d	48		pha				pha
.273e	20 e1 15	jsr $15e1			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2741	68		pla				pla 								; array address to zTemp0
.2742	85 21		sta $21				sta 	zTemp0+1
.2744	68		pla				pla
.2745	85 20		sta $20				sta 	zTemp0
.2747	5a		phy				phy 								; save codePtr position.
.2748	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.274a	b1 20		lda ($20),y			lda 	(zTemp0),y
.274c	48		pha				pha 								; save bit 15 on stack.
.274d	29 7f		and #$7f			and 	#$7F
.274f	85 22		sta $22				sta 	zTemp1
.2751	a5 0e		lda $0e				lda 	IFR0+IM0 					; check range of index
.2753	d2 20		cmp ($20)			cmp 	(zTemp0)
.2755	a5 0f		lda $0f				lda 	IFR0+IM1
.2757	e5 22		sbc $22				sbc 	zTemp1
.2759	b0 3a		bcs $2795			bcs 	_VALIndex
.275b	a5 0f		lda $0f				lda 	IFR0+IM1  					; sanity check
.275d	c9 40		cmp #$40			cmp 	#$40
.275f	b0 34		bcs $2795			bcs 	_VALIndex
.2761	06 0e		asl $0e				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2763	26 0f		rol $0f				rol 	IFR0+IM1
.2765	fa		plx				plx 								; get msb of size -> X
.2766	30 04		bmi $276c			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2768	06 0e		asl $0e				asl 	IFR0+IM0
.276a	26 0f		rol $0f				rol 	IFR0+IM1
.276c					_VARNotX4:
.276c	18		clc				clc 								; add the two for the size bytes
.276d	a5 0e		lda $0e				lda 	IFR0+IM0
.276f	69 02		adc #$02			adc 	#2
.2771	85 0e		sta $0e				sta 	IFR0+IM0
.2773	90 02		bcc $2777			bcc 	_VARNoCarry1
.2775	e6 0f		inc $0f				inc 	IFR0+IM1
.2777					_VARNoCarry1:
.2777	18		clc				clc 								; calculate the element address and push to stack.
.2778	a5 0e		lda $0e				lda 	IFR0+IM0
.277a	65 20		adc $20				adc 	zTemp0
.277c	48		pha				pha
.277d	a5 0f		lda $0f				lda 	IFR0+IM1
.277f	65 21		adc $21				adc 	zTemp0+1
.2781	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2783	30 04		bmi $2789			bmi 	_VARHasSubLevel
.2785	aa		tax				tax 								; address in XA
.2786	68		pla				pla
.2787	7a		ply				ply 								; restore Y and exit
.2788	60		rts				rts
.2789					_VARHasSubLevel:
.2789	aa		tax				tax 								; get link address in XA
.278a	68		pla				pla
.278b	7a		ply				ply 								; restore code position.
.278c	48		pha				pha
.278d	20 59 25	jsr $2559			jsr 	ERRCheckComma 				; comma required.
.2790	68		pla				pla
.2791	20 30 27	jsr $2730			jsr 	VARArrayLookup 				; call it recursively
.2794	60		rts				rts
.2795					_VALIndex:
.2795	4c 90 24	jmp $2490		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2798					VARCreate:
.2798	5a		phy				phy
.2799	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.279b	a2 00		ldx #$00			ldx 	#0
.279d	20 3d 10	jsr $103d			jsr 	AllocateMemory
.27a0	85 22		sta $22				sta 	zTemp1 						; save new address in zTemp1
.27a2	86 23		stx $23				stx 	zTemp1+1
.27a4	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.27a6	ad 25 06	lda $0625			lda 	VARHash
.27a9	91 22		sta ($22),y			sta 	(zTemp1),y
.27ab	c8		iny				iny 								; put address of name into +3,+4
.27ac	ad 23 06	lda $0623			lda 	VARNameAddress
.27af	91 22		sta ($22),y			sta 	(zTemp1),y
.27b1	c8		iny				iny
.27b2	ad 24 06	lda $0624			lda 	VARNameAddress+1
.27b5	91 22		sta ($22),y			sta 	(zTemp1),y
.27b7	ad 26 06	lda $0626			lda 	VARType
.27ba	29 01		and #$01			and 	#1
.27bc	f0 06		beq $27c4			beq 	_CVNotString
.27be	a0 08		ldy #$08			ldy 	#5+3
.27c0	a9 80		lda #$80			lda 	#$80
.27c2	91 22		sta ($22),y			sta 	(zTemp1),y
.27c4					_CVNotString:
.27c4	ad 47 06	lda $0647			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.27c7	85 20		sta $20				sta 	zTemp0
.27c9	ad 48 06	lda $0648			lda 	VARHashEntry+1
.27cc	85 21		sta $21				sta 	zTemp0+1
.27ce	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.27d0	b2 20		lda ($20)			lda 	(zTemp0)
.27d2	92 22		sta ($22)			sta 	(zTemp1)
.27d4	b1 20		lda ($20),y			lda 	(zTemp0),y
.27d6	91 22		sta ($22),y			sta 	(zTemp1),y
.27d8	a5 22		lda $22				lda 	zTemp1 						; address of the new record into head
.27da	92 20		sta ($20)			sta 	(zTemp0)
.27dc	a5 23		lda $23				lda 	zTemp1+1
.27de	91 20		sta ($20),y			sta 	(zTemp0),y
.27e0	a5 22		lda $22				lda 	zTemp1 						; new record to XA
.27e2	a6 23		ldx $23				ldx 	zTemp1+1
.27e4	18		clc				clc 								; add 5 to point to the data.
.27e5	69 05		adc #$05			adc 	#5
.27e7	90 01		bcc $27ea			bcc 	_VCNoCarry
.27e9	e8		inx				inx
.27ea					_VCNoCarry:
.27ea	7a		ply				ply
.27eb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.27ec					VARFind:
.27ec	5a		phy				phy
.27ed	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.27ef	b1 20		lda ($20),y			lda 	(zTemp0),y
.27f1	85 23		sta $23				sta 	zTemp1+1
.27f3	f0 1c		beq $2811			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.27f5	b2 20		lda ($20)			lda 	(zTemp0)
.27f7	85 22		sta $22				sta 	zTemp1
.27f9					_VFLoop:
.27f9	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.27fb	b1 22		lda ($22),y			lda 	(zTemp1),y
.27fd	cd 25 06	cmp $0625			cmp 	VARHash
.2800	f0 12		beq $2814			beq 	_VFHashesMatch 				; if so, check the name.
.2802					_VFNext:
.2802	b2 22		lda ($22)			lda 	(zTemp1) 					; next link to AX
.2804	aa		tax				tax
.2805	a0 01		ldy #$01			ldy 	#1
.2807	b1 22		lda ($22),y			lda 	(zTemp1),y
.2809	85 23		sta $23				sta 	zTemp1+1
.280b	86 22		stx $22				stx 	zTemp1
.280d	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.280f	d0 e8		bne $27f9			bne 	_VFLoop
.2811					_VFExitFail:
.2811	7a		ply				ply
.2812	18		clc				clc
.2813	60		rts				rts
.2814					_VFHashesMatch:
.2814	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2816	b1 22		lda ($22),y			lda 	(zTemp1),y
.2818	85 24		sta $24				sta 	zTemp2
.281a	c8		iny				iny
.281b	b1 22		lda ($22),y			lda 	(zTemp1),y
.281d	85 25		sta $25				sta 	zTemp2+1
.281f	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2821					_VFNameCompLoop:
.2821	c8		iny				iny 								; char at a time
.2822	b9 27 06	lda $0627,y			lda 	VARBuffer,y
.2825	d1 24		cmp ($24),y			cmp 	(zTemp2),y
.2827	d0 d9		bne $2802			bne 	_VFNext						; next entry if different.
.2829	c9 7c		cmp #$7c			cmp 	#$7C
.282b	90 f4		bcc $2821			bcc 	_VFNameCompLoop 			; until done the whole lot.
.282d	18		clc				clc
.282e	a5 22		lda $22				lda 	zTemp1
.2830	a6 23		ldx $23				ldx 	zTemp1+1
.2832	69 05		adc #$05			adc 	#5
.2834	90 01		bcc $2837			bcc 	_VFNNoCarry
.2836	e8		inx				inx
.2837					_VFNNoCarry:
.2837	7a		ply				ply
.2838	38		sec				sec
.2839	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.283a					VARGetInfo:
.283a	98		tya				tya 								; calculate the address of the identifier start.
.283b	18		clc				clc
.283c	65 1e		adc $1e				adc 	codePtr
.283e	8d 23 06	sta $0623			sta 	VARNameAddress
.2841	a5 1f		lda $1f				lda 	codePtr+1
.2843	69 00		adc #$00			adc 	#0
.2845	8d 24 06	sta $0624			sta 	VARNameAddress+1
.2848	9c 25 06	stz $0625			stz 	VARHash
.284b	a2 00		ldx #$00			ldx 	#0
.284d					_VARCopyName:
.284d	18		clc				clc 								; update the sum hash.
.284e	ad 25 06	lda $0625			lda 	VARHash
.2851	71 1e		adc ($1e),y			adc 	(codePtr),y
.2853	8d 25 06	sta $0625			sta 	VARHash
.2856	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get character and save it in buffer
.2858	c8		iny				iny
.2859	9d 27 06	sta $0627,x			sta 	VARBuffer,x
.285c	e8		inx				inx
.285d	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.285f	90 ec		bcc $284d			bcc 	_VARCopyName
.2861	8d 26 06	sta $0626			sta 	VARType 					; save type byte
.2864	29 03		and #$03			and 	#3 							; type is 0-3
.2866	0a		asl a				asl 	a
.2867	0a		asl a				asl 	a
.2868	85 20		sta $20				sta 	zTemp0
.286a	ad 25 06	lda $0625			lda 	VARHash 					; force into range of hash entries per type.
.286d	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.286f	65 20		adc $20				adc 	zTemp0 						; index of hash table
.2871	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2872	69 49		adc #$49			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2874	85 20		sta $20				sta 	zTemp0
.2876	8d 47 06	sta $0647			sta 	VARHashEntry
.2879	a9 06		lda #$06			lda 	#VARHashTables >> 8
.287b	69 00		adc #$00			adc 	#0
.287d	85 21		sta $21				sta 	zTemp0+1
.287f	8d 48 06	sta $0648			sta 	VARHashEntry+1
.2882	60		rts				rts
.2883					VARClearHashTables:
.2883	a2 00		ldx #$00			ldx 	#0
.2885					_VCHRLoop:
.2885	a9 00		lda #$00			lda 	#0
.2887	9d 49 06	sta $0649,x			sta 	VARHashTables,x
.288a	e8		inx				inx
.288b	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.288d	d0 f6		bne $2885			bne 	_VCHRLoop
.288f	60		rts				rts
.0623					VARNameAddress:
>0623							.fill 	2
.0625					VARHash:
>0625							.fill 	1
.0626					VARType:
>0626							.fill 	1
.0627					VARBuffer:
>0627							.fill 	32
.0647					VARHashEntry:
>0647							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0649					VARHashTables:
>0649							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2890					VARCheckSimple:
.2890	aa		tax				tax 								; save in X
.2891	b1 1e		lda ($1e),y			lda 	(codePtr),y
.2893	c9 7c		cmp #$7c			cmp 	#$7C
.2895	d0 15		bne $28ac			bne 	_VCSComplex
.2897	c8		iny				iny 								; consume the second byte, the type.
.2898	8a		txa				txa  								; character (40-7F) x 4
.2899	0a		asl a				asl 	a
.289a	0a		asl a				asl  	a
.289b	18		clc				clc
.289c	69 69		adc #$69			adc 	#FastVariables & $FF
.289e	85 0e		sta $0e				sta 	IFR0+IM0
.28a0	a9 06		lda #$06			lda 	#FastVariables >> 8
.28a2	69 00		adc #$00			adc 	#0
.28a4	85 0f		sta $0f				sta 	IFR0+IM1
.28a6	64 10		stz $10				stz 	IFR0+IM2
.28a8	64 11		stz $11				stz 	IFR0+IExp
.28aa	38		sec				sec 								; it's a reference
.28ab	60		rts				rts
.28ac					_VCSComplex:
.28ac	88		dey				dey	 								; extract information.
.28ad	20 3a 28	jsr $283a			jsr 	VARGetInfo
.28b0	20 ec 27	jsr $27ec			jsr 	VARFind 					; search for variable
.28b3	b0 0a		bcs $28bf			bcs 	_VCSHaveVariable
.28b5	ad 26 06	lda $0626			lda 	VARType 					; error if arrays, cannot autocreate
.28b8	29 02		and #$02			and 	#2
.28ba	d0 25		bne $28e1			bne 	_VCNoCreate
.28bc	20 98 27	jsr $2798			jsr 	VARCreate 					; create variable
.28bf					_VCSHaveVariable:
.28bf	48		pha				pha 								; save LSB on the stack
.28c0	ad 26 06	lda $0626			lda 	VARType 					; get var type, and shift bit 1 into carry
.28c3	6a		ror a				ror 	a
.28c4	6a		ror a				ror 	a
.28c5	68		pla				pla 								; restore LSB
.28c6	90 08		bcc $28d0			bcc 	_VCSNotArray 				; skip if not an array
.28c8	20 30 27	jsr $2730			jsr 	VARArrayLookup 				; look for subscripts.
.28cb	48		pha				pha 								; check )
.28cc	20 51 25	jsr $2551			jsr 	ERRCheckRParen
.28cf	68		pla				pla
.28d0					_VCSNotArray:
.28d0	86 0f		stx $0f				stx 	IFR0+IM1 					; save address
.28d2	85 0e		sta $0e				sta 	IFR0+IM0
.28d4	64 10		stz $10				stz 	IFR0+IM2 					; clear the unused byte.
.28d6	ad 26 06	lda $0626			lda 	VARType 					; number/string bit into carry
.28d9	6a		ror a				ror 	a
.28da	a9 00		lda #$00			lda 	#0
.28dc	6a		ror a				ror 	a 							; now $00 or $80
.28dd	85 11		sta $11				sta 	IFR0+IExp
.28df	38		sec				sec 								; it's a reference
.28e0	60		rts				rts
.28e1					_VCNoCreate:
.28e1	4c b6 24	jmp $24b6		jmp	ErrorV_uninitialised
.0669					FastVariables:
>0669							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.28e4					IFInitialise:
.28e4	9c d9 06	stz $06d9			stz 	IFStackIndex
.28e7	60		rts				rts
.28e8					IFloatSubtract:
.28e8	da		phx				phx
.28e9	a2 0e		ldx #$0e			ldx 	#IFR0
.28eb	20 04 2f	jsr $2f04			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.28ee	fa		plx				plx
.28ef					IFloatAdd:
.28ef	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.28f1	05 11		ora $11				ora 	IFR0+IExp
.28f3	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.28f5	d0 4e		bne $2945			bne 	_IFloatAddDecimals 			; decimal version.
.28f7					_IFAddSubMantissa:
.28f7	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.28f9	45 11		eor $11				eor 	IFR0+IExp
.28fb	29 40		and #$40			and 	#IFSign
.28fd	d0 21		bne $2920			bne 	_IFloatSubMantissa
.28ff	18		clc				clc 								; do the actual addition
.2900	a5 0e		lda $0e			lda 	IFR0+IM0
.2902	75 00		adc $00,x		adc 		IM0,x
.2904	85 0e		sta $0e			sta 	IFR0+IM0
.2906	a5 0f		lda $0f			lda 	IFR0+IM1
.2908	75 01		adc $01,x		adc 		IM1,x
.290a	85 0f		sta $0f			sta 	IFR0+IM1
.290c	a5 10		lda $10			lda 	IFR0+IM2
.290e	75 02		adc $02,x		adc 		IM2,x
.2910	85 10		sta $10			sta 	IFR0+IM2
.2912	10 29		bpl $293d			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2914	a2 0e		ldx #$0e			ldx 	#IFR0						; shift R0 right, divide by 2
.2916	20 28 2f	jsr $2f28			jsr 	IFloatShiftRight
.2919	20 52 2f	jsr $2f52			jsr 	IFloatIncExponent
.291c	d0 1f		bne $293d			bne 	_IFloatAddExit
.291e	38		sec				sec 								; overflowed numerically.
.291f	60		rts				rts
.2920					_IFloatSubMantissa:
.2920	38		sec				sec 								; do the subtraction R0-Rx
.2921	a5 0e		lda $0e			lda 	IFR0+IM0
.2923	f5 00		sbc $00,x		sbc 		IM0,x
.2925	85 0e		sta $0e			sta 	IFR0+IM0
.2927	a5 0f		lda $0f			lda 	IFR0+IM1
.2929	f5 01		sbc $01,x		sbc 		IM1,x
.292b	85 0f		sta $0f			sta 	IFR0+IM1
.292d	a5 10		lda $10			lda 	IFR0+IM2
.292f	f5 02		sbc $02,x		sbc 		IM2,x
.2931	85 10		sta $10			sta 	IFR0+IM2
.2933	b0 08		bcs $293d			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2935	a2 0e		ldx #$0e			ldx 	#IFR0
.2937	20 0c 2f	jsr $2f0c			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.293a	20 04 2f	jsr $2f04			jsr 	IFloatNegate 				; negate
.293d					_IFloatAddExit:
.293d	18		clc				clc
.293e	60		rts				rts
.293f					_IFloatZeroAdd:
.293f	fa		plx				plx 								; return this value in R0
.2940	20 8a 2e	jsr $2e8a			jsr 	IFloatCopyFromRegister
.2943	18		clc				clc
.2944	60		rts				rts
.2945					_IFloatAddDecimals:
.2945	20 f2 2e	jsr $2ef2			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2948	f0 f3		beq $293d			beq 	_IFloatAddExit
.294a	20 30 2f	jsr $2f30			jsr 	IFloatNormalise 			; normalise RX
.294d	da		phx				phx 								; normalise R0
.294e	a2 0e		ldx #$0e			ldx 	#IFR0
.2950	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero
.2953	f0 ea		beq $293f			beq 	_IFloatZeroAdd
.2955	20 30 2f	jsr $2f30			jsr 	IFloatNormalise
.2958	fa		plx				plx
.2959	a5 11		lda $11				lda 	IFR0+IExp 					; get the exponent of R0
.295b	29 3f		and #$3f			and 	#IFXMask
.295d	38		sec				sec
.295e	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2960	85 0c		sta $0c				sta 	iTemp0
.2962	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2964	29 3f		and #$3f			and 	#IFXMask
.2966	38		sec				sec
.2967	e9 20		sbc #$20			sbc 	#$20
.2969	c5 0c		cmp $0c				cmp 	iTemp0 						; get the larger adjusted
.296b	b0 02		bcs $296f			bcs 	_IFloatHaveLarger
.296d	a5 0c		lda $0c				lda 	iTemp0
.296f					_IFloatHaveLarger:
.296f	18		clc				clc 								; get the actual one back.
.2970	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2972	20 7f 29	jsr $297f			jsr 	_IFShiftXToA
.2975	da		phx				phx
.2976	a2 0e		ldx #$0e			ldx 	#IFR0
.2978	20 7f 29	jsr $297f			jsr 	_IFShiftXToA
.297b	fa		plx				plx
.297c	4c f7 28	jmp $28f7			jmp 	_IFAddSubMantissa 			; do the adding bit.
.297f					_IFShiftXToA:
.297f	8d d1 06	sta $06d1			sta 	IFTarget
.2982	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero 			; check adding zero ?
.2985	f0 11		beq $2998			beq 	_IFSXExit
.2987					_IFSXLoop:
.2987	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2989	29 3f		and #$3f			and 	#IFXMask
.298b	cd d1 06	cmp $06d1			cmp 	IFTarget
.298e	f0 08		beq $2998			beq 	_IFSXExit
.2990	20 28 2f	jsr $2f28			jsr 	IFloatShiftRight
.2993	20 52 2f	jsr $2f52			jsr 	IFloatIncExponent
.2996	80 ef		bra $2987			bra 	_IFSXLoop
.2998					_IFSXExit:
.2998	60		rts				rts
.06d1					IFTarget:
>06d1							.fill 	1
.2999					IFloatMultiply:
.2999	8e d1 06	stx $06d1			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.299c	20 54 2a	jsr $2a54			jsr 	IFCalculateNewSign
.299f	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.29a1	05 11		ora $11				ora 	IFR0+IExp
.29a3	29 3f		and #$3f			and 	#IFXMask
.29a5	15 01		ora $01,x			ora 	IM1,x
.29a7	05 0f		ora $0f				ora 	IFR0+IM1
.29a9	15 02		ora $02,x			ora 	IM2,x
.29ab	05 10		ora $10				ora 	IFR0+IM2
.29ad	d0 0a		bne $29b9			bne 	_IFMStandard
.29af	20 d5 2e	jsr $2ed5			jsr 	IFloatMultiply8BitRx
.29b2	ad d3 06	lda $06d3			lda 	IFNewSign
.29b5	85 11		sta $11				sta 	IFR0+IExp
.29b7	18		clc				clc
.29b8	60		rts				rts
.29b9					_IFMStandard:
.29b9	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.29bb	20 4b 2a	jsr $2a4b			jsr 	IFMSignExtend
.29be	8d d2 06	sta $06d2			sta 	IFNewExponent
.29c1	a5 11		lda $11				lda 	IFR0+IExp
.29c3	20 4b 2a	jsr $2a4b			jsr 	IFMSignExtend
.29c6	18		clc				clc
.29c7	6d d2 06	adc $06d2			adc 	IFNewExponent
.29ca	8d d2 06	sta $06d2			sta 	IFNewExponent
.29cd	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.29cf	20 9b 2e	jsr $2e9b			jsr 	IFloatCopyToRegister
.29d2	a2 0e		ldx #$0e			ldx 	#IFR0 						; zero R0 (the result)
.29d4	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.29d7					_IFMLoop:
.29d7	a2 1a		ldx #$1a			ldx 	#IFRTemp
.29d9	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero
.29dc	f0 3a		beq $2a18			beq 	_IFMExit
.29de	ae d1 06	ldx $06d1			ldx 	IFTarget 					; look at adder MSB
.29e1	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.29e3	10 03		bpl $29e8			bpl	 	_IFMTargetOkay
.29e5	20 3c 2a	jsr $2a3c			jsr 	_IFMShiftAll
.29e8					_IFMTargetOkay:
.29e8	a5 1a		lda $1a				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.29ea	29 01		and #$01			and 	#1
.29ec	f0 16		beq $2a04			beq 	_IFMNoAdd
.29ee	ae d1 06	ldx $06d1			ldx 	IFTarget 					; add adder
.29f1	18		clc				clc
.29f2	a5 0e		lda $0e			lda 	IFR0+IM0
.29f4	75 00		adc $00,x		adc 		IM0,x
.29f6	85 0e		sta $0e			sta 	IFR0+IM0
.29f8	a5 0f		lda $0f			lda 	IFR0+IM1
.29fa	75 01		adc $01,x		adc 		IM1,x
.29fc	85 0f		sta $0f			sta 	IFR0+IM1
.29fe	a5 10		lda $10			lda 	IFR0+IM2
.2a00	75 02		adc $02,x		adc 		IM2,x
.2a02	85 10		sta $10			sta 	IFR0+IM2
.2a04					_IFMNoAdd:
.2a04	a5 10		lda $10				lda 	IFR0+IM2
.2a06	10 03		bpl $2a0b			bpl 	_IFMResultOkay
.2a08	20 3c 2a	jsr $2a3c			jsr 	_IFMShiftAll
.2a0b					_IFMResultOkay:
.2a0b	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2a0d	20 28 2f	jsr $2f28			jsr 	IFloatShiftRight
.2a10	ae d1 06	ldx $06d1			ldx 	IFTarget
.2a13	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.2a16	80 bf		bra $29d7			bra 	_IFMLoop
.2a18					_IFMExit:
.2a18	ad d2 06	lda $06d2			lda 	IFNewExponent 				; validate new exponent.
.2a1b	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2a1d	90 0f		bcc $2a2e			bcc 	_IFMOkay
.2a1f	c9 e0		cmp #$e0			cmp 	#$E0
.2a21	b0 0b		bcs $2a2e			bcs 	_IFMOkay
.2a23	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2a25	f0 13		beq $2a3a			beq 	_IFMError
.2a27	a2 0e		ldx #$0e			ldx 	#IFR0 						; return zero underflow
.2a29	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.2a2c	18		clc				clc
.2a2d	60		rts				rts
.2a2e					_IFMOkay:
.2a2e	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2a30	0d d3 06	ora $06d3			ora 	IFNewSign
.2a33	85 11		sta $11				sta 	IFR0+IExp
.2a35	18		clc				clc
.2a36	60		rts				rts
.2a37	4c ff ff	jmp $ffff			jmp 	$FFFF
.2a3a					_IFMError:
.2a3a	38		sec				sec
.2a3b	60		rts				rts
.2a3c					_IFMShiftAll:
.2a3c	a2 0e		ldx #$0e			ldx 	#IFR0
.2a3e	20 28 2f	jsr $2f28			jsr 	IFloatShiftRight
.2a41	ae d1 06	ldx $06d1			ldx 	IFTarget
.2a44	20 28 2f	jsr $2f28			jsr 	IFloatShiftRight
.2a47	ee d2 06	inc $06d2			inc 	IFNewExponent
.2a4a	60		rts				rts
.2a4b					IFMSignExtend:
.2a4b	29 3f		and #$3f			and 	#IFXMask
.2a4d	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2a4f	90 02		bcc $2a53			bcc 	_IFMNoSXX
.2a51	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2a53					_IFMNoSXX:
.2a53	60		rts				rts
.2a54					IFCalculateNewSign:
.2a54	b5 03		lda $03,x			lda 	IExp,x
.2a56	45 11		eor $11				eor 	IFR0+IExp
.2a58	29 40		and #$40			and 	#IFSign
.2a5a	8d d3 06	sta $06d3			sta 	IFNewSign
.2a5d	60		rts				rts
.06d2					IFNewExponent:
>06d2							.fill 	1
.06d3					IFNewSign:
>06d3							.fill 	1
.2a5e					IFloatDivideInteger:
.2a5e	20 77 2a	jsr $2a77			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2a61	b0 06		bcs $2a69			bcs 	_IFDIExit
.2a63	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy result from register.
.2a65	20 8a 2e	jsr $2e8a			jsr 	IFloatCopyFromRegister
.2a68	18		clc				clc
.2a69					_IFDIExit:
.2a69	60		rts				rts
.2a6a					IFloatModulusInteger:
.2a6a	20 77 2a	jsr $2a77			jsr 	IFloatDivideIntegerCommon
.2a6d	b0 07		bcs $2a76			bcs 	_IFMIExit
.2a6f	ae d1 06	ldx $06d1			ldx 	IFTarget
.2a72	20 8a 2e	jsr $2e8a			jsr 	IFloatCopyFromRegister
.2a75	18		clc				clc
.2a76					_IFMIExit:
.2a76	60		rts				rts
.2a77					IFloatDivideIntegerCommon:
.2a77	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.2a7a	20 54 2a	jsr $2a54			jsr 	IFCalculateNewSign 			; calculate sign of result
.2a7d	20 a5 2a	jsr $2aa5			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2a80	a2 0e		ldx #$0e			ldx 	#IFR0 						; check divide by zero
.2a82	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero
.2a85	f0 1c		beq $2aa3			beq 	_IFDIDivZero
.2a87	ae d1 06	ldx $06d1			ldx 	IFTarget 					; zero Rx (S1)
.2a8a	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.2a8d	5a		phy				phy
.2a8e	a0 18		ldy #$18			ldy 	#24
.2a90					_IFDILoop:
.2a90	20 b6 2a	jsr $2ab6			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2a93	20 c2 2a	jsr $2ac2			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2a96	88		dey				dey
.2a97	d0 f7		bne $2a90			bne 	_IFDILoop 					; do it 24 times
.2a99	7a		ply				ply
.2a9a	ad d3 06	lda $06d3			lda 	IFNewSign 					; set sign of result.
.2a9d	29 40		and #$40			and 	#IFSign
.2a9f	85 1d		sta $1d				sta 	IFRTemp+IExp
.2aa1	18		clc				clc 								; is okay.
.2aa2	60		rts				rts
.2aa3					_IFDIDivZero:
.2aa3	38		sec				sec
.2aa4	60		rts				rts
.2aa5					IFDCopyRXToRTemp:
.2aa5	b5 00		lda $00,x			lda 	IM0,x
.2aa7	85 1a		sta $1a				sta 	IFRTemp+IM0
.2aa9	b5 01		lda $01,x			lda 	IM1,x
.2aab	85 1b		sta $1b				sta 	IFRTemp+IM1
.2aad	b5 02		lda $02,x			lda 	IM2,x
.2aaf	85 1c		sta $1c				sta 	IFRTemp+IM2
.2ab1	b5 03		lda $03,x			lda 	IExp,x
.2ab3	85 1d		sta $1d				sta 	IFRTemp+IExp
.2ab5	60		rts				rts
.2ab6					IFDShiftSTempS1Left:
.2ab6	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2ab8	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft
.2abb	ae d1 06	ldx $06d1			ldx 	IFTarget
.2abe	20 21 2f	jsr $2f21			jsr 	IFloatRotateLeft
.2ac1	60		rts				rts
.2ac2					IFDTrySubtract:
.2ac2	ae d1 06	ldx $06d1			ldx 	IFTarget 					; s1 = Rx
.2ac5	38		sec				sec 								; subtract, saving the results on the stack.
.2ac6	b5 00		lda $00,x			lda 	IM0,x
.2ac8	e5 0e		sbc $0e				sbc 	IFR0+IM0
.2aca	48		pha				pha
.2acb	b5 01		lda $01,x			lda 	IM1,x
.2acd	e5 0f		sbc $0f				sbc 	IFR0+IM1
.2acf	48		pha				pha
.2ad0	b5 02		lda $02,x			lda 	IM2,x
.2ad2	e5 10		sbc $10				sbc 	IFR0+IM2
.2ad4	b0 03		bcs $2ad9			bcs 	_IFDCanSubtract
.2ad6	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2ad7	68		pla				pla
.2ad8	60		rts				rts
.2ad9					_IFDCanSubtract:
.2ad9	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2adb	68		pla				pla
.2adc	95 01		sta $01,x			sta 	IM1,x
.2ade	68		pla				pla
.2adf	95 00		sta $00,x			sta 	IM0,x
.2ae1	e6 1a		inc $1a				inc 	IFRTemp+IM0 				; increment temp
.2ae3	d0 06		bne $2aeb			bne 	_IFDCSExit
.2ae5	e6 1b		inc $1b				inc 	IFRTemp+IM1
.2ae7	d0 02		bne $2aeb			bne 	_IFDCSExit
.2ae9	e6 1c		inc $1c				inc 	IFRTemp+IM2
.2aeb					_IFDCSExit:
.2aeb	60		rts				rts
.2aec					IFloatBitwiseAnd:
.2aec	5a		phy				phy
.2aed	20 31 2b	jsr $2b31			jsr 	IFPreProcessBitwise 		; set up everything.
.2af0	d0 0f		bne $2b01			bne 	_IFBAExit
.2af2					_IFBALoop:
.2af2	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2af5	35 00		and $00,x			and 	IM0,x
.2af7	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2afa	e8		inx				inx
.2afb	c8		iny				iny
.2afc	c0 03		cpy #$03			cpy 	#3
.2afe	d0 f2		bne $2af2			bne 	_IFBALoop
.2b00	18		clc				clc
.2b01					_IFBAExit:
.2b01	7a		ply				ply
.2b02	60		rts				rts
.2b03					IFloatBitwiseOr:
.2b03	5a		phy				phy
.2b04	20 31 2b	jsr $2b31			jsr 	IFPreProcessBitwise 		; set up everything.
.2b07	d0 0f		bne $2b18			bne 	_IFBAExit
.2b09					_IFBALoop:
.2b09	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2b0c	15 00		ora $00,x			ora 	IM0,x
.2b0e	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2b11	e8		inx				inx
.2b12	c8		iny				iny
.2b13	c0 03		cpy #$03			cpy 	#3
.2b15	d0 f2		bne $2b09			bne 	_IFBALoop
.2b17	18		clc				clc
.2b18					_IFBAExit:
.2b18	7a		ply				ply
.2b19	60		rts				rts
.2b1a					IFloatBitwiseXor:
.2b1a	5a		phy				phy
.2b1b	20 31 2b	jsr $2b31			jsr 	IFPreProcessBitwise 		; set up everything.
.2b1e	d0 0f		bne $2b2f			bne 	_IFBAExit
.2b20					_IFBALoop:
.2b20	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.2b23	55 00		eor $00,x			eor 	IM0,x
.2b25	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.2b28	e8		inx				inx
.2b29	c8		iny				iny
.2b2a	c0 03		cpy #$03			cpy 	#3
.2b2c	d0 f2		bne $2b20			bne 	_IFBALoop
.2b2e	18		clc				clc
.2b2f					_IFBAExit:
.2b2f	7a		ply				ply
.2b30	60		rts				rts
.2b31					IFPreProcessBitwise:
.2b31	a0 00		ldy #$00			ldy 	#0 							; set index.
.2b33	a5 11		lda $11				lda 	IFR0+IExp 					; OR exponents
.2b35	15 03		ora $03,x			ora 	IExp,x
.2b37	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2b39	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2b3b	38		sec				sec 								; carry set just in cases.
.2b3c	60		rts				rts
.2b3d					IFloatAbsoluteR0:
.2b3d	a5 11		lda $11				lda 	IFR0+IExp					; reset the sign bit.
.2b3f	29 bf		and #$bf			and 	#IFSign ^ 255
.2b41	85 11		sta $11				sta 	IFR0+IExp
.2b43	18		clc				clc
.2b44	60		rts				rts
.2b45					IFloatSquareRootR0:
.2b45	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, return zero.
.2b47	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero
.2b4a	a5 11		lda $11				lda	 	IFR0+IExp 					; if negative fail.
.2b4c	29 40		and #$40			and 	#IFSign
.2b4e	d0 2f		bne $2b7f			bne 	_IFSRFail
.2b50	20 30 2f	jsr $2f30			jsr 	IFloatNormalise 			; it will work better !
.2b53	a2 12		ldx #$12			ldx 	#IFR1 						; R1 contains original throughout
.2b55	20 9b 2e	jsr $2e9b			jsr 	IFloatCopyToRegister
.2b58	a5 11		lda $11				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2b5a	20 4b 2a	jsr $2a4b			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2b5d	18		clc				clc
.2b5e	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2b60	85 11		sta $11				sta 	IFR0+IExp
.2b62	4a		lsr a				lsr 	a 							; which we can halve.
.2b63	38		sec				sec 								; convert back
.2b64	e9 17		sbc #$17			sbc 	#23
.2b66	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2b68	85 11		sta $11				sta 	IFR0+IExp 					; to R0
.2b6a	20 81 2b	jsr $2b81			jsr 	_IFSRNewton
.2b6d	20 81 2b	jsr $2b81			jsr 	_IFSRNewton
.2b70	20 81 2b	jsr $2b81			jsr 	_IFSRNewton
.2b73	20 81 2b	jsr $2b81			jsr 	_IFSRNewton
.2b76	18		clc				clc
.2b77	60		rts				rts
.2b78					_IFSRZero:
.2b78	a2 0e		ldx #$0e			ldx 	#IFR0
.2b7a	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.2b7d	18		clc				clc
.2b7e	60		rts				rts
.2b7f					_IFSRFail:
.2b7f	38		sec				sec
.2b80	60		rts				rts
.2b81					_IFSRNewton:
.2b81	a2 12		ldx #$12			ldx 	#IFR1 						; push original value (R3) on the stack
.2b83	20 48 2e	jsr $2e48			jsr 	IFloatPushRx
.2b86	a2 0e		ldx #$0e			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2b88	20 48 2e	jsr $2e48			jsr 	IFloatPushRx
.2b8b	a2 12		ldx #$12			ldx 	#IFR1 						; guess = original / guess
.2b8d	20 1c 2c	jsr $2c1c			jsr 	IFloatDivideFloat
.2b90	a2 12		ldx #$12			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2b92	20 69 2e	jsr $2e69			jsr 	IFloatPullRx
.2b95	20 ef 28	jsr $28ef			jsr 	IFloatAdd 					; now guess + original/guess
.2b98	a2 0e		ldx #$0e			ldx 	#IFR0 						; divide by 2
.2b9a	20 28 2f	jsr $2f28			jsr 	IFloatShiftRight
.2b9d	a2 12		ldx #$12			ldx 	#IFR1
.2b9f	20 69 2e	jsr $2e69			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2ba2	60		rts				rts
.2ba3					IFloatFractionalR0:
.2ba3	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2ba5	29 3f		and #$3f			and 	#IFXMask
.2ba7	f0 17		beq $2bc0			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2ba9	20 3d 2b	jsr $2b3d			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2bac	a2 0e		ldx #$0e			ldx 	#IFR0
.2bae	20 30 2f	jsr $2f30			jsr 	IFloatNormalise 			; normalise R0
.2bb1	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy to RTemp
.2bb3	20 9b 2e	jsr $2e9b			jsr 	IFloatCopyToRegister
.2bb6	20 f9 2b	jsr $2bf9			jsr 	IFloatIntegerR0 			; take integer part of R0
.2bb9	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; subtract
.2bbb	20 e8 28	jsr $28e8			jsr 	IFloatSubtract
.2bbe	80 05		bra $2bc5			bra 	_FIPExit
.2bc0					_FIPZero:
.2bc0	a2 0e		ldx #$0e			ldx 	#IFR0
.2bc2	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.2bc5					_FIPExit:
.2bc5	18		clc				clc
.2bc6	60		rts				rts
.2bc7					IFloatCompare:
.2bc7	20 e8 28	jsr $28e8			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2bca	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2bcc	05 11		ora $11				ora 	IFR0+IExp
.2bce	a2 0e		ldx #$0e			ldx 	#IFR0 						; only using R0 from now on.
.2bd0	29 3f		and #$3f			and 	#IFXMask
.2bd2	d0 19		bne $2bed			bne 	_IFCNonInteger
.2bd4	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero 			; check if zero
.2bd7	f0 0f		beq $2be8			beq 	_IFCZero
.2bd9					_IFCReturnSign:
.2bd9	a5 11		lda $11				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2bdb	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2bdd	48		pha				pha
.2bde	a9 01		lda #$01			lda 	#1
.2be0	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte 				; return to +1
.2be3	68		pla				pla 								; sign bit back
.2be4	85 11		sta $11				sta 	IFR0+IExp					; set that sign
.2be6	18		clc				clc
.2be7	60		rts				rts
.2be8					_IFCZero:
.2be8	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.2beb	18		clc				clc
.2bec	60		rts				rts
.2bed					_IFCNonInteger:
.2bed	a5 0e		lda $0e				lda 	IFR0+IM0
.2bef	29 00		and #$00			and		#$00
.2bf1	05 0f		ora $0f				ora 	IFR0+IM1
.2bf3	05 10		ora $10				ora 	IFR0+IM2
.2bf5	f0 f1		beq $2be8			beq 	_IFCZero 					; near enough !
.2bf7	80 e0		bra $2bd9			bra 	_IFCReturnSign 				; return the sign of the difference.
.2bf9					IFloatIntegerR0:
.2bf9	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.2bfb	29 3f		and #$3f			and 	#IFXMask
.2bfd	f0 1b		beq $2c1a			beq 	_FIPExit 					; if so do nothing
.2bff	a2 0e		ldx #$0e			ldx 	#IFR0
.2c01	20 30 2f	jsr $2f30			jsr 	IFloatNormalise 			; normalise
.2c04	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero 			; is it zero ?
.2c07	f0 0e		beq $2c17			beq 	_FIPZero 					; if so return zero.
.2c09					_FIPShift:
.2c09	a5 11		lda $11				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2c0b	29 20		and #$20			and 	#$20 						; still -ve
.2c0d	f0 0b		beq $2c1a			beq 	_FIPExit
.2c0f	20 28 2f	jsr $2f28			jsr 	IFloatShiftRight 			; shift mantissa right
.2c12	20 52 2f	jsr $2f52			jsr 	IFloatIncExponent 			; bump exponent
.2c15	80 f2		bra $2c09			bra 	_FIPShift
.2c17					_FIPZero:
.2c17	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.2c1a					_FIPExit:
.2c1a	18		clc				clc
.2c1b	60		rts				rts
.2c1c					IFloatDivideFloat:
.2c1c	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.2c1f	20 54 2a	jsr $2a54			jsr 	IFCalculateNewSign 			; calculate sign of result
.2c22	20 30 2f	jsr $2f30			jsr 	IFloatNormalise 			; normalise RX
.2c25	a2 0e		ldx #$0e			ldx 	#IFR0 						; normalise R0
.2c27	20 30 2f	jsr $2f30			jsr 	IFloatNormalise
.2c2a	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero
.2c2d	f0 56		beq $2c85			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2c2f	a5 11		lda $11				lda 	IFR0+IExp 					; calculate s0.exponent
.2c31	20 4b 2a	jsr $2a4b			jsr 	IFMSignExtend
.2c34	8d d2 06	sta $06d2			sta 	IFNewExponent
.2c37	ae d1 06	ldx $06d1			ldx 	IFTarget 					; calculate s1.exponent
.2c3a	b5 03		lda $03,x			lda 	IExp,x
.2c3c	20 4b 2a	jsr $2a4b			jsr 	IFMSignExtend
.2c3f	38		sec				sec
.2c40	ed d2 06	sbc $06d2			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2c43	38		sec				sec
.2c44	e9 17		sbc #$17			sbc 	#23
.2c46	8d d2 06	sta $06d2			sta 	IFNewExponent
.2c49	20 87 2c	jsr $2c87			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2c4c	a5 1c		lda $1c				lda 	IFRTemp+IM2 				; result has overflowed ?
.2c4e	10 08		bpl $2c58			bpl 	_IFDFNoShiftResult
.2c50	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; if so, fix it up.
.2c52	20 28 2f	jsr $2f28			jsr 	IFloatShiftRight
.2c55	ee d2 06	inc $06d2			inc 	IFNewExponent
.2c58					_IFDFNoShiftResult:
.2c58	ad d2 06	lda $06d2			lda 	IFNewExponent 				; underflow/overflow check.
.2c5b	30 06		bmi $2c63			bmi 	_IFDFCheckUnderflow
.2c5d	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2c5f	b0 24		bcs $2c85			bcs 	_IFDFDivZero
.2c61	80 11		bra $2c74			bra		_IFDFExit
.2c63					_IFDFCheckUnderflow:
.2c63	ad d2 06	lda $06d2			lda 	IFNewExponent 				; shift into a legal exponent.
.2c66	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2c68	b0 0a		bcs $2c74			bcs 	_IFDFExit
.2c6a	ee d2 06	inc $06d2			inc 	IFNewExponent
.2c6d	a2 1a		ldx #$1a			ldx 	#IFRTemp
.2c6f	20 28 2f	jsr $2f28			jsr 	IFloatShiftRight
.2c72	80 ef		bra $2c63			bra 	_IFDFCheckUnderflow
.2c74					_IFDFExit:
.2c74	ad d2 06	lda $06d2			lda 	IFNewExponent 				; combine exponent and sign.
.2c77	29 3f		and #$3f			and 	#IFXMask
.2c79	0d d3 06	ora $06d3			ora 	IFNewSign
.2c7c	85 1d		sta $1d				sta 	IFRTemp+IExp
.2c7e	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy RTemp to R0.
.2c80	20 8a 2e	jsr $2e8a			jsr 	IFloatCopyFromRegister
.2c83	18		clc				clc
.2c84	60		rts				rts
.2c85					_IFDFDivZero:
.2c85	38		sec				sec
.2c86	60		rts				rts
.2c87					IFloatDivideSupport:
.2c87	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; zero RTemp
.2c89	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.2c8c	5a		phy				phy 								; main division loop x 23
.2c8d	a0 17		ldy #$17			ldy 	#23
.2c8f					_IFDSLoop:
.2c8f	20 c2 2a	jsr $2ac2			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2c92	20 b6 2a	jsr $2ab6			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2c95	88		dey				dey
.2c96	d0 f7		bne $2c8f			bne 	_IFDSLoop 					; do it 24 times
.2c98	7a		ply				ply
.2c99	60		rts				rts
.2c9a					IFloatIntegerToStringR0:
.2c9a	8d d4 06	sta $06d4			sta 	IFBase 						; save base to use.
.2c9d	20 7a 2f	jsr $2f7a			jsr 	IFloatBufferReset			; empty buffer
.2ca0	a5 11		lda $11				lda 	IFR0+IExp					; check integer
.2ca2	29 3f		and #$3f			and 	#IFXMask
.2ca4	d0 1e		bne $2cc4			bne 	_IFIFail
.2ca6	a2 0e		ldx #$0e			ldx 	#IFR0 						; skip - check if zero.
.2ca8	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero
.2cab	f0 0e		beq $2cbb			beq 	_IFINotNegative
.2cad	a5 11		lda $11				lda 	IFR0+IExp 					; is signed ?
.2caf	29 40		and #$40			and 	#IFSign
.2cb1	f0 08		beq $2cbb			beq 	_IFINotNegative
.2cb3	a9 2d		lda #$2d			lda 	#"-"						; output -
.2cb5	20 89 2f	jsr $2f89			jsr 	IFloatBufferWrite
.2cb8	20 04 2f	jsr $2f04			jsr 	IFloatNegate 				; tidy up !
.2cbb					_IFINotNegative:
.2cbb	20 c6 2c	jsr $2cc6			jsr 	_IFIRecursiveConvert 		; start converting
.2cbe	20 81 2f	jsr $2f81			jsr 	IFloatGetBufferAddress
.2cc1	18		clc				clc
.2cc2	80 01		bra $2cc5			bra 	_IFIExit
.2cc4					_IFIFail:
.2cc4	38		sec				sec
.2cc5					_IFIExit:
.2cc5	60		rts				rts
.2cc6					_IFIRecursiveConvert:
.2cc6	a2 12		ldx #$12			ldx 	#IFR1
.2cc8	20 9b 2e	jsr $2e9b			jsr 	IFloatCopyToRegister 		; R0->R1
.2ccb	a2 0e		ldx #$0e			ldx 	#IFR0
.2ccd	ad d4 06	lda $06d4			lda 	IFBase 						; Base -> R0
.2cd0	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.2cd3	a2 12		ldx #$12			ldx 	#IFR1 						; R0 = R1 / R0
.2cd5	20 5e 2a	jsr $2a5e			jsr 	IFloatDivideInteger
.2cd8	a2 0e		ldx #$0e			ldx 	#IFR0 						; if result <> 0
.2cda	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero
.2cdd	f0 09		beq $2ce8			beq 	_IFIOutDigit
.2cdf	a5 12		lda $12				lda 	IFR1+IM0 					; save remainder
.2ce1	48		pha				pha
.2ce2	20 c6 2c	jsr $2cc6			jsr 	_IFIRecursiveConvert 		; convert the divider
.2ce5	68		pla				pla
.2ce6	85 12		sta $12				sta 	IFR1+IM0 					; restore remainder
.2ce8					_IFIOutDigit:
.2ce8	a5 12		lda $12				lda 	IFR1+IM0 					; get remainder.
.2cea	c9 0a		cmp #$0a			cmp	 	#10
.2cec	90 02		bcc $2cf0			bcc 	_IFINotHex
.2cee	69 06		adc #$06			adc 	#6
.2cf0					_IFINotHex:
.2cf0	69 30		adc #$30			adc 	#48
.2cf2	20 89 2f	jsr $2f89			jsr 	IFloatBufferWrite
.2cf5	60		rts				rts
.06d4					IFBase:
>06d4							.fill 	1
.2cf6					IFloatFloatToStringR0:
.2cf6	a2 16		ldx #$16			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2cf8	20 48 2e	jsr $2e48			jsr 	IFloatPushRx
.2cfb	20 9b 2e	jsr $2e9b			jsr 	IFloatCopyToRegister
.2cfe	20 f9 2b	jsr $2bf9			jsr 	IFloatIntegerR0				; make R0 integer
.2d01	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2d03	20 9a 2c	jsr $2c9a			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2d06	9c d5 06	stz $06d5			stz 	IFloatDecimalCount 			; zero the decimal count.
.2d09	a5 19		lda $19				lda 	IFR2+IExp 					; is integer.
.2d0b	29 3f		and #$3f			and 	#IFXMask
.2d0d	f0 44		beq $2d53			beq 	_IFFSExit
.2d0f					_IFloatFracLoop:
.2d0f	a2 16		ldx #$16			ldx 	#IFR2 						; R0 = fractional part of R2
.2d11	20 8a 2e	jsr $2e8a			jsr 	IFloatCopyFromRegister
.2d14	20 a3 2b	jsr $2ba3			jsr 	IFloatFractionalR0
.2d17	20 30 2f	jsr $2f30			jsr 	IFloatNormalise
.2d1a	a2 16		ldx #$16			ldx 	#IFR2
.2d1c	20 9b 2e	jsr $2e9b			jsr 	IFloatCopyToRegister 		; copy to R2
.2d1f	a2 16		ldx #$16			ldx 	#IFR2 						; set R2 to 10
.2d21	a9 0a		lda #$0a			lda 	#10
.2d23	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.2d26	a2 16		ldx #$16			ldx 	#IFR2						; R0,R2 = R2 * 10
.2d28	20 99 29	jsr $2999			jsr 	IFloatMultiply
.2d2b	a2 16		ldx #$16			ldx 	#IFR2
.2d2d	20 9b 2e	jsr $2e9b			jsr 	IFloatCopyToRegister
.2d30	20 f9 2b	jsr $2bf9			jsr 	IFloatIntegerR0 			; get integer part of R0
.2d33	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2d36	c9 03		cmp #$03			cmp 	#3
.2d38	f0 16		beq $2d50			beq 	_IFFSExitStripZero
.2d3a	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; written the DP yet ?
.2d3d	d0 05		bne $2d44			bne 	_IFloatNotFirst
.2d3f	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2d41	20 89 2f	jsr $2f89			jsr 	IFloatBufferWrite
.2d44					_IFloatNotFirst:
.2d44	ee d5 06	inc $06d5			inc 	IFloatDecimalCount
.2d47	a5 0e		lda $0e				lda 	IFR0+IM0 					; get digit
.2d49	09 30		ora #$30			ora 	#"0"						; ASCII
.2d4b	20 89 2f	jsr $2f89			jsr 	IFloatBufferWrite 			; write to the buffer.
.2d4e	80 bf		bra $2d0f			bra 	_IFloatFracLoop
.2d50					_IFFSExitStripZero:
.2d50	20 98 2f	jsr $2f98			jsr 	IFloatStripTrailingZeros
.2d53					_IFFSExit:
.2d53	a2 16		ldx #$16			ldx 	#IFR2 						; restore R2
.2d55	20 69 2e	jsr $2e69			jsr 	IFloatPullRx
.2d58	20 81 2f	jsr $2f81			jsr 	IFloatGetBufferAddress
.2d5b	18		clc				clc
.2d5c	60		rts				rts
.06d5					IFloatDecimalCount:
>06d5							.fill 	1
.2d5d					IFloatStringToFloatR0:
.2d5d	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.2d60	86 0c		stx $0c				stx 	iTemp0
.2d62	84 0d		sty $0d				sty 	iTemp0+1
.2d64	a2 0e		ldx #$0e			ldx 	#IFR0 						; reset the current value.
.2d66	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.2d69	9c d7 06	stz $06d7			stz 	IFSignFlag 					; clear the sign flag
.2d6c	20 f9 2d	jsr $2df9			jsr 	IFSTFGetNext 				; get first
.2d6f	f0 1b		beq $2d8c			beq 	_IFSTFFail 					; no character
.2d71	90 10		bcc $2d83			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2d73	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2d75	d0 15		bne $2d8c			bne 	_IFSTFFail
.2d77	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2d79	8d d7 06	sta $06d7			sta 	IFSignFlag
.2d7c					_IFSTFLoop:
.2d7c	20 f9 2d	jsr $2df9			jsr 	IFSTFGetNext 				; get next
.2d7f	b0 0b		bcs $2d8c			bcs 	_IFSTFFail 					; bad character.
.2d81	f0 11		beq $2d94			beq 	_IFSTFExit 					; end of data
.2d83					_IFSTFHaveChar:
.2d83	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2d85	f0 08		beq $2d8f			beq 	_IFSTFDecimal
.2d87	20 1d 2e	jsr $2e1d			jsr 	IFSTFAddR0 					; add number in
.2d8a	80 f0		bra $2d7c			bra 	_IFSTFLoop 					; keep going until . or end.
.2d8c					_IFSTFFail:
.2d8c	38		sec				sec
.2d8d	80 0d		bra $2d9c			bra 	_IFSTFReturn
.2d8f					_IFSTFDecimal:
.2d8f	20 a4 2d	jsr $2da4			jsr 	IFSTFDecimal 				; call the decimal places code.
.2d92	b0 08		bcs $2d9c			bcs 	_IFSTFReturn 				; error
.2d94					_IFSTFExit:
.2d94	a5 11		lda $11				lda 	IFR0+IExp 					; copy sign flag in.
.2d96	0d d7 06	ora $06d7			ora 	IFSignFlag
.2d99	85 11		sta $11				sta 	IFR0+IExp
.2d9b	18		clc				clc
.2d9c					_IFSTFReturn:
.2d9c	60		rts				rts
.2d9d					IFloatAddDecimalToR0:
.2d9d	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.2da0	86 0c		stx $0c				stx 	iTemp0
.2da2	84 0d		sty $0d				sty 	iTemp0+1
.2da4					IFSTFDecimal:
.2da4	a2 0e		ldx #$0e			ldx 	#IFR0 						; push integer part on stack
.2da6	20 48 2e	jsr $2e48			jsr 	IFloatPushRx
.2da9	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2dab	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero
.2dae	9c d8 06	stz $06d8			stz 	IFDecimalPlaces
.2db1					_IFSTDLoop:
.2db1	20 f9 2d	jsr $2df9			jsr 	IFSTFGetNext 				; get next
.2db4	b0 41		bcs $2df7			bcs 	_IFSTFFail2 				; bad character.
.2db6	f0 11		beq $2dc9			beq 	_IFSTFComplete 				; end of data, work out the result.
.2db8	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2dba	f0 39		beq $2df5			beq 	_IFSTFExit2
.2dbc	20 1d 2e	jsr $2e1d			jsr 	IFSTFAddR0 					; add number in
.2dbf	ee d8 06	inc $06d8			inc 	IFDecimalPlaces 			; count decimals
.2dc2	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2dc5	c9 03		cmp #$03			cmp 	#3
.2dc7	90 e8		bcc $2db1			bcc 	_IFSTDLoop
.2dc9					_IFSTFComplete:
.2dc9	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2dcc	f0 27		beq $2df5			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2dce	3a		dec a				dec 	a 							; table indexed from 1.
.2dcf	0a		asl a				asl 	a
.2dd0	0a		asl a				asl 	a
.2dd1	aa		tax				tax
.2dd2	bd 34 2e	lda $2e34,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2dd5	85 12		sta $12				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2dd7	bd 35 2e	lda $2e35,x			lda 	TableTen+1,x
.2dda	85 13		sta $13				sta  	IFR1+IM1
.2ddc	bd 36 2e	lda $2e36,x			lda 	TableTen+2,x
.2ddf	85 14		sta $14				sta  	IFR1+IM2
.2de1	bd 37 2e	lda $2e37,x			lda 	TableTen+3,x
.2de4	85 15		sta $15				sta  	IFR1+IExp
.2de6	a2 12		ldx #$12			ldx 	#IFR1 						; multiply into result
.2de8	20 99 29	jsr $2999			jsr 	IFloatMultiply
.2deb	a2 12		ldx #$12			ldx 	#IFR1  						; pop and add the decimal.
.2ded	20 69 2e	jsr $2e69			jsr 	IFloatPullRx
.2df0	a2 12		ldx #$12			ldx 	#IFR1
.2df2	20 ef 28	jsr $28ef			jsr 	IFloatAdd
.2df5					_IFSTFExit2:
.2df5	18		clc				clc
.2df6	60		rts				rts
.2df7					_IFSTFFail2:
.2df7	38		sec				sec
.2df8	60		rts				rts
.2df9					IFSTFGetNext:
.2df9	ad d6 06	lda $06d6			lda 	IFCount  					; if count is zero, return with Z set.
.2dfc	f0 19		beq $2e17			beq 	_IFSTFReturnOk
.2dfe	b2 0c		lda ($0c)			lda 	(iTemp0) 					; get next character
.2e00	e6 0c		inc $0c				inc 	iTemp0 						; point at next.
.2e02	d0 02		bne $2e06			bne 	_IFSTFGNNoCarry
.2e04	e6 0d		inc $0d				inc 	iTemp0+1
.2e06					_IFSTFGNNoCarry:
.2e06	ce d6 06	dec $06d6			dec 	IFCount 					; dec count.
.2e09	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2e0b	f0 08		beq $2e15			beq 	_IFSTFGOkay
.2e0d	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2e0f	90 08		bcc $2e19			bcc 	_IFSTFGFail
.2e11	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2e13	b0 04		bcs $2e19			bcs 	_IFSTFGFail
.2e15					_IFSTFGOkay:
.2e15	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2e17					_IFSTFReturnOk:
.2e17	18		clc				clc
.2e18	60		rts				rts
.2e19					_IFSTFGFail:
.2e19	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2e1b	38		sec				sec
.2e1c	60		rts				rts
.2e1d					IFSTFAddR0:
.2e1d	29 0f		and #$0f			and 	#15 						; to int value
.2e1f	48		pha				pha 								; save it.
.2e20	a9 0a		lda #$0a			lda 	#10
.2e22	a2 12		ldx #$12			ldx 	#IFR1
.2e24	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.2e27	20 99 29	jsr $2999			jsr 	IFloatMultiply
.2e2a	68		pla				pla
.2e2b	a2 12		ldx #$12			ldx 	#IFR1
.2e2d	20 fb 2e	jsr $2efb			jsr 	IFloatSetByte
.2e30	20 ef 28	jsr $28ef			jsr 	IFloatAdd
.2e33	60		rts				rts
.06d6					IFCount:
>06d6							.fill 	1
.06d7					IFSignFlag:
>06d7							.fill 	1
.06d8					IFDecimalPlaces:
>06d8							.fill 	1
.2e34					TableTen:
>2e34	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2e38	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2e3c	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2e40	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2e44	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2e48					IFloatPushRx:
.2e48	5a		phy				phy
.2e49	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.2e4c	b5 00		lda $00,x			lda 	IM0,x
.2e4e	99 da 06	sta $06da,y			sta 	IFStack,y
.2e51	b5 01		lda $01,x			lda 	IM1,x
.2e53	99 db 06	sta $06db,y			sta 	IFStack+1,y
.2e56	b5 02		lda $02,x			lda 	IM2,x
.2e58	99 dc 06	sta $06dc,y			sta 	IFStack+2,y
.2e5b	b5 03		lda $03,x			lda 	IExp,x
.2e5d	99 dd 06	sta $06dd,y			sta 	IFStack+3,y
.2e60	c8		iny				iny
.2e61	c8		iny				iny
.2e62	c8		iny				iny
.2e63	c8		iny				iny
.2e64	8c d9 06	sty $06d9			sty 	IFStackIndex
.2e67	7a		ply				ply
.2e68	60		rts				rts
.2e69					IFloatPullRx:
.2e69	5a		phy				phy
.2e6a	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.2e6d	88		dey				dey
.2e6e	88		dey				dey
.2e6f	88		dey				dey
.2e70	88		dey				dey
.2e71	b9 da 06	lda $06da,y			lda 	IFStack,y
.2e74	95 00		sta $00,x			sta 	IM0,x
.2e76	b9 db 06	lda $06db,y			lda 	IFStack+1,y
.2e79	95 01		sta $01,x			sta 	IM1,x
.2e7b	b9 dc 06	lda $06dc,y			lda 	IFStack+2,y
.2e7e	95 02		sta $02,x			sta 	IM2,x
.2e80	b9 dd 06	lda $06dd,y			lda 	IFStack+3,y
.2e83	95 03		sta $03,x			sta 	IExp,x
.2e85	8c d9 06	sty $06d9			sty 	IFStackIndex
.2e88	7a		ply				ply
.2e89	60		rts				rts
.06d9					IFStackIndex:
>06d9							.fill 	1
.06da					IFStack:
>06da							.fill 	16*4
.2e8a					IFloatCopyFromRegister:
.2e8a	b5 00		lda $00,x			lda 	0,x
.2e8c	85 0e		sta $0e				sta 	IFR0
.2e8e	b5 01		lda $01,x			lda 	1,x
.2e90	85 0f		sta $0f				sta 	IFR0+1
.2e92	b5 02		lda $02,x			lda 	2,x
.2e94	85 10		sta $10				sta 	IFR0+2
.2e96	b5 03		lda $03,x			lda 	3,x
.2e98	85 11		sta $11				sta 	IFR0+3
.2e9a	60		rts				rts
.2e9b					IFloatCopyToRegister:
.2e9b	a5 0e		lda $0e				lda 	IFR0
.2e9d	95 00		sta $00,x			sta 	0,x
.2e9f	a5 0f		lda $0f				lda 	IFR0+1
.2ea1	95 01		sta $01,x			sta 	1,x
.2ea3	a5 10		lda $10				lda 	IFR0+2
.2ea5	95 02		sta $02,x			sta 	2,x
.2ea7	a5 11		lda $11				lda 	IFR0+3
.2ea9	95 03		sta $03,x			sta 	3,x
.2eab	60		rts				rts
.2eac					IFloatLoadInline:
.2eac	68		pla				pla 								; pop address off to iTemp0
.2ead	85 0c		sta $0c				sta 	iTemp0
.2eaf	68		pla				pla
.2eb0	85 0d		sta $0d				sta 	iTemp0+1
.2eb2	a0 01		ldy #$01			ldy 	#1
.2eb4	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 0
.2eb6	95 00		sta $00,x			sta 	0,x
.2eb8	c8		iny				iny
.2eb9	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 1
.2ebb	95 01		sta $01,x			sta 	1,x
.2ebd	c8		iny				iny
.2ebe	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 2
.2ec0	95 02		sta $02,x			sta 	2,x
.2ec2	c8		iny				iny
.2ec3	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 3
.2ec5	95 03		sta $03,x			sta 	3,x
.2ec7	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2ec8	a5 0c		lda $0c				lda 	iTemp0
.2eca	69 05		adc #$05			adc 	#5
.2ecc	85 0c		sta $0c				sta 	iTemp0
.2ece	90 02		bcc $2ed2			bcc 	_IFLINoCarry
.2ed0	e6 0d		inc $0d				inc 	iTemp0+1
.2ed2					_IFLINoCarry:
.2ed2	6c 0c 00	jmp ($000c)			jmp 	(iTemp0)					; effectively RTS
.2ed5					IFloatMultiply8BitRx:
.2ed5	5a		phy		        phy
.2ed6	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2ed8	a4 0e		ldy $0e		        ldy     IFR0+IM0
.2eda	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2edb	85 0e		sta $0e		        sta     IFR0+IM0
.2edd	84 0f		sty $0f		        sty     IFR0+IM1
.2edf	a9 00		lda #$00	        lda     #0
.2ee1	a0 08		ldy #$08	        ldy     #8
.2ee3					_IFMLoop:
.2ee3	90 03		bcc $2ee8	        bcc     _IFMNoAdd
.2ee5	18		clc		        clc
.2ee6	65 0f		adc $0f		        adc     IFR0+IM1
.2ee8					_IFMNoAdd:
.2ee8	6a		ror a		        ror     a
.2ee9	66 0e		ror $0e		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2eeb	88		dey		        dey
.2eec	d0 f5		bne $2ee3	        bne     _IFMLoop
.2eee	85 0f		sta $0f		        sta     IFR0+IM1                    ; write MSB out
.2ef0	7a		ply		        ply
.2ef1	60		rts		        rts
.2ef2					IFloatCheckZero:
.2ef2	b5 00		lda $00,x			lda 	IM0,x
.2ef4	15 01		ora $01,x			ora 	IM1,x
.2ef6	15 02		ora $02,x			ora 	IM2,x
.2ef8	60		rts				rts
.2ef9					IFloatSetZero:
.2ef9	a9 00		lda #$00			lda 	#0
.2efb					IFloatSetByte:
.2efb	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2efd	74 01		stz $01,x			stz 	IM1,x
.2eff	74 02		stz $02,x			stz 	IM2,x
.2f01	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2f03	60		rts				rts
.2f04					IFloatNegate:
.2f04	b5 03		lda $03,x			lda 	IExp,x
.2f06	49 40		eor #$40			eor 	#IFSign
.2f08	95 03		sta $03,x			sta 	IExp,x
.2f0a	18		clc				clc
.2f0b	60		rts				rts
.2f0c					IFloatMantissaNegate:
.2f0c	38		sec				sec
.2f0d	a9 00		lda #$00			lda 	#0
.2f0f	f5 00		sbc $00,x			sbc 	IM0,x
.2f11	95 00		sta $00,x			sta 	IM0,x
.2f13	a9 00		lda #$00			lda 	#0
.2f15	f5 01		sbc $01,x			sbc 	IM1,x
.2f17	95 01		sta $01,x			sta 	IM1,x
.2f19	a9 00		lda #$00			lda 	#0
.2f1b	f5 02		sbc $02,x			sbc 	IM2,x
.2f1d	95 02		sta $02,x			sta 	IM2,x
.2f1f	60		rts				rts
.2f20					IFloatShiftLeft:
.2f20	18		clc				clc
.2f21					IFloatRotateLeft:
.2f21	36 00		rol $00,x			rol 	IM0,x
.2f23	36 01		rol $01,x			rol 	IM1,x
.2f25	36 02		rol $02,x			rol 	IM2,x
.2f27	60		rts				rts
.2f28					IFloatShiftRight:
.2f28	18		clc				clc
.2f29					IFloatRotateRight:
.2f29	76 02		ror $02,x			ror 	IM2,x
.2f2b	76 01		ror $01,x			ror 	IM1,x
.2f2d	76 00		ror $00,x			ror 	IM0,x
.2f2f	60		rts				rts
.2f30					IFloatNormalise:
.2f30	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero 			; is it zero
.2f33	f0 18		beq $2f4d			beq 	_IFNExitZero 				; if so exit
.2f35					_IFNLoop:
.2f35	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2f37	29 c0		and #$c0			and 	#$C0
.2f39	c9 40		cmp #$40			cmp 	#$40
.2f3b	f0 13		beq $2f50			beq 	_IFNExitOkay 				; if so , then we are done.
.2f3d	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2f3f	29 3f		and #$3f			and 	#$3F
.2f41	c9 20		cmp #$20			cmp 	#$20
.2f43	f0 0b		beq $2f50			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2f45	20 66 2f	jsr $2f66			jsr 	IFloatDecExponent
.2f48	20 20 2f	jsr $2f20			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2f4b	80 e8		bra $2f35			bra 	_IFNLoop
.2f4d					_IFNExitZero:
.2f4d	20 f9 2e	jsr $2ef9			jsr 	IFloatSetZero 				; set the result to zero
.2f50					_IFNExitOkay:
.2f50	18		clc				clc  								; return with CC.
.2f51	60		rts				rts
.2f52					IFloatIncExponent:
.2f52	b5 03		lda $03,x			lda 	IExp,x
.2f54	48		pha				pha
.2f55	29 c0		and #$c0			and 	#$C0
.2f57	8d 1a 07	sta $071a			sta 	IFXTemp
.2f5a	68		pla				pla
.2f5b	1a		inc a				inc 	a
.2f5c	29 3f		and #$3f			and 	#$3F
.2f5e	48		pha				pha
.2f5f	0d 1a 07	ora $071a			ora 	IFXTemp
.2f62	95 03		sta $03,x			sta 	IExp,x
.2f64	68		pla				pla
.2f65	60		rts				rts
.2f66					IFloatDecExponent:
.2f66	b5 03		lda $03,x			lda 	IExp,x
.2f68	48		pha				pha
.2f69	29 c0		and #$c0			and 	#$C0
.2f6b	8d 1a 07	sta $071a			sta 	IFXTemp
.2f6e	68		pla				pla
.2f6f	3a		dec a				dec 	a
.2f70	29 3f		and #$3f			and 	#$3F
.2f72	48		pha				pha
.2f73	0d 1a 07	ora $071a			ora 	IFXTemp
.2f76	95 03		sta $03,x			sta 	IExp,x
.2f78	68		pla				pla
.2f79	60		rts				rts
.071a					IFXTemp:
>071a							.fill 	1
.2f7a					IFloatBufferReset:
.2f7a	9c 1b 07	stz $071b			stz 	IFBufferCount
.2f7d	9c 1c 07	stz $071c			stz 	IFBuffer
.2f80	60		rts				rts
.2f81					IFloatGetBufferAddress:
.2f81	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.2f83	a2 1c		ldx #$1c			ldx 	#(IFBuffer & $FF)
.2f85	ad 1b 07	lda $071b			lda 	IFBufferCount
.2f88	60		rts				rts
.2f89					IFloatBufferWrite:
.2f89	da		phx				phx
.2f8a	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.2f8d	9d 1c 07	sta $071c,x			sta 	IFBuffer,x
.2f90	9e 1d 07	stz $071d,x			stz 	IFBuffer+1,x
.2f93	ee 1b 07	inc $071b			inc 	IFBufferCount
.2f96	fa		plx				plx
.2f97	60		rts				rts
.2f98					IFloatStripTrailingZeros:
.2f98	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.2f9b	bd 1b 07	lda $071b,x			lda 	IFBuffer-1,x
.2f9e	c9 30		cmp #$30			cmp		#"0"
.2fa0	d0 0f		bne $2fb1			bne 	_IFSTExit
.2fa2	bd 1a 07	lda $071a,x			lda 	IFBuffer-2,x
.2fa5	c9 2e		cmp #$2e			cmp 	#"."
.2fa7	f0 08		beq $2fb1			beq 	_IFSTExit
.2fa9	ce 1b 07	dec $071b			dec 	IFBufferCount
.2fac	9e 1b 07	stz $071b,x			stz 	IFBuffer-1,x
.2faf	80 e7		bra $2f98			bra 	IFloatStripTrailingZeros
.2fb1					_IFSTExit:
.2fb1	60		rts				rts
.071b					IFBufferCount:
>071b							.fill 	1
.071c					IFBuffer:
>071c							.fill 	25
.2fb2					IFloatCheck:
.2fb2	a5 11		lda $11				lda 	IFR0+IExp					; force it negative
.2fb4	09 40		ora #$40			ora 	#IFSign
.2fb6	85 11		sta $11				sta 	IFR0+IExp
.2fb8	20 ef 28	jsr $28ef			jsr 	IFloatAdd 					; add allowed to error.
.2fbb	a2 0e		ldx #$0e			ldx 	#IFR0
.2fbd	20 f2 2e	jsr $2ef2			jsr 	IFloatCheckZero 			; error if < 0
.2fc0	f0 06		beq $2fc8			beq 	_IFAOkay
.2fc2	a5 11		lda $11				lda 	IFR0+IExp
.2fc4	29 40		and #$40			and 	#IFSign
.2fc6	d0 01		bne $2fc9			bne 	_IFAFail
.2fc8					_IFAOkay:
.2fc8	60		rts				rts
.2fc9					_IFAFail:
.2fc9	38		sec				sec
.2fca	68		pla				pla 								; get address - 2
.2fcb	e9 02		sbc #$02			sbc 	#2
.2fcd	aa		tax				tax
.2fce	68		pla				pla
.2fcf	e9 00		sbc #$00			sbc 	#0
.2fd1	a8		tay				tay
.2fd2	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2fd4					_IFAStop:
>2fd4	db						.byte 	$DB 						; display an error AA ADR ADR
.2fd5	80 fd		bra $2fd4			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
