
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Fri Jun  2 07:48:52 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 5a 1c	jsr $1c5a			jsr 	PGMSetBaseAddress
.1007	20 5e 24	jsr $245e			jsr 	IFInitialise
.100a	4c 67 12	jmp $1267			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 7a 14	jsr $147a			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 7e 20	jmp $207e		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 6d 1c	jsr $1c6d			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 fd 23	jsr $23fd			jsr 	VARClearHashTables
.1028	ad 47 03	lda $0347			lda 	PGMEndMemoryHigh
.102b	20 e7 21	jsr $21e7			jsr 	StackReset
.102e	20 43 22	jsr $2243			jsr 	StringSystemInitialise
.1031	60		rts				rts
.1032					AllocateMemory:
.1032	5a		phy				phy 								; save Y
.1033	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.1035	5a		phy				phy
.1036	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1038	5a		phy				phy
.1039	a8		tay				tay 								; count is now in XY
.103a					_AllocateLoop:
.103a	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103c	d0 04		bne $1042			bne 	_AllocateOne
.103e	c0 00		cpy #$00			cpy 	#0
.1040	f0 12		beq $1054			beq 	_AllocateExit
.1042					_AllocateOne:
.1042	a9 00		lda #$00			lda 	#0 							; zero byte
.1044	92 24		sta ($24)			sta 	(freeMemory)
.1046	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1048	d0 02		bne $104c			bne 	_AllocateSkipCarry
.104a	e6 25		inc $25				inc 	freeMemory+1
.104c					_AllocateSkipCarry:
.104c	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.104e	d0 01		bne $1051			bne 	_AllocateSkipBorrow
.1050	ca		dex				dex
.1051					_AllocateSkipBorrow:
.1051	88		dey				dey
.1052	80 e6		bra $103a			bra 	_AllocateLoop
.1054					_AllocateExit:
.1054	fa		plx				plx 								; restore address
.1055	68		pla				pla
.1056	7a		ply				ply 								; restore Y
.1057	60		rts				rts
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1058					CommandDIM:
.1058	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check identifier follows.
.105a	29 c0		and #$c0			and 	#$C0
.105c	c9 40		cmp #$40			cmp 	#$40
.105e	d0 39		bne $1099			bne 	_CDSyntax
.1060	20 b4 23	jsr $23b4			jsr 	VARGetInfo 					; get information
.1063	ad 54 04	lda $0454			lda 	VARType 					; check array.
.1066	29 02		and #$02			and 	#2
.1068	f0 2f		beq $1099			beq 	_CDSyntax
.106a	20 66 23	jsr $2366			jsr 	VARFind 					; does it already exist
.106d	b0 2d		bcs $109c			bcs 	_CDExists
.106f	20 12 23	jsr $2312			jsr 	VARCreate 					; create it - returns data ptr in XA
.1072	da		phx				phx 								; save target address
.1073	48		pha				pha
.1074	ad 54 04	lda $0454			lda 	VARType 					; type ID.
.1077	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1079	20 9f 10	jsr $109f			jsr 	CreateArray 				; create array to XA
.107c	84 20		sty $20				sty 	zTemp1 						; save Y
.107e	7a		ply				ply 								; restore target to zTemp0
.107f	84 1e		sty $1e				sty 	zTemp0
.1081	7a		ply				ply
.1082	84 1f		sty $1f				sty 	zTemp0+1
.1084	92 1e		sta ($1e)			sta 	(zTemp0) 					; save new array
.1086	a0 01		ldy #$01			ldy 	#1
.1088	8a		txa				txa
.1089	91 1e		sta ($1e),y			sta 	(zTemp0),y
.108b	a4 20		ldy $20				ldy 	zTemp1 						; restore zTemp1
.108d	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 				; check )
.1090	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.1092	c8		iny				iny
.1093	c9 99		cmp #$99			cmp 	#PR_COMMA
.1095	f0 c1		beq $1058			beq 	CommandDIM
.1097	88		dey				dey
.1098	60		rts				rts
.1099					_CDSyntax:
.1099	4c 2d 20	jmp $202d		jmp	ErrorV_syntax
.109c					_CDExists:
.109c	4c ea 20	jmp $20ea		jmp	ErrorV_redefine
.109f					CreateArray:
.109f	8d 3a 03	sta $033a			sta 	CAType						; save type
.10a2	20 8c 14	jsr $148c			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10a5	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10a7	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a9	f0 04		beq $10af			beq 	_CATwoDimensions
.10ab	20 fb 10	jsr $10fb			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ae	60		rts				rts
.10af					_CATwoDimensions:
.10af	a5 0d		lda $0d				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10b1	8d 3c 03	sta $033c			sta 	CADim1+1
.10b4	a5 0c		lda $0c				lda 	IFR0+IM0
.10b6	8d 3b 03	sta $033b			sta 	CADim1+0
.10b9	20 74 21	jsr $2174			jsr 	ERRCheckComma 				; check comma
.10bc	20 8c 14	jsr $148c			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10bf	5a		phy				phy 								; save Y position
.10c0	18		clc				clc 								; allocate the outer array of pointers.
.10c1	ae 3c 03	ldx $033c			ldx 	CADim1+1
.10c4	ad 3b 03	lda $033b			lda 	CADim1
.10c7	20 3a 11	jsr $113a			jsr 	CSAAllocate 				; allocate the outer array
.10ca	da		phx				phx									; save this address on the stack
.10cb	48		pha				pha
.10cc	86 23		stx $23				stx 	zTemp2+1					; and in zTemp2
.10ce	85 22		sta $22				sta 	zTemp2
.10d0					_CACreateSubLoop:
.10d0	38		sec				sec
.10d1	20 fb 10	jsr $10fb			jsr 	CreateSingleArray 			; create data array of required size.
.10d4	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10d6	91 22		sta ($22),y			sta 	(zTemp2),y
.10d8	8a		txa				txa
.10d9	c8		iny				iny
.10da	91 22		sta ($22),y			sta 	(zTemp2),y
.10dc	18		clc				clc  								; next slot.
.10dd	a5 22		lda $22				lda 	zTemp2
.10df	69 02		adc #$02			adc 	#2
.10e1	85 22		sta $22				sta 	zTemp2
.10e3	90 02		bcc $10e7			bcc 	_CACNoCarry
.10e5	e6 23		inc $23				inc 	zTemp2+1
.10e7					_CACNoCarry:
.10e7	ad 3b 03	lda $033b			lda 	CADim1 						; use DIM1 as a counter
.10ea	d0 03		bne $10ef			bne 	_CACNoBorrow
.10ec	ce 3c 03	dec $033c			dec 	CADim1+1
.10ef					_CACNoBorrow:
.10ef	ce 3b 03	dec $033b			dec 	CADim1
.10f2	ad 3c 03	lda $033c			lda 	CADim1+1 					; but do one more.
.10f5	10 d9		bpl $10d0			bpl 	_CACreateSubLoop
.10f7	68		pla				pla
.10f8	fa		plx				plx
.10f9	7a		ply				ply
.10fa	60		rts				rts
.10fb					CreateSingleArray:
.10fb	5a		phy				phy
.10fc	38		sec				sec 								; allocate memory block all zeros.
.10fd	a5 0c		lda $0c				lda 	IFR0+IM0
.10ff	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1101	20 3a 11	jsr $113a			jsr 	CSAAllocate
.1104	ac 3a 03	ldy $033a			ldy 	CAType 						; if numbers, we don't need to initialise.
.1107	f0 2f		beq $1138			beq 	_CSANoInit
.1109	da		phx				phx 								; save address of new array
.110a	48		pha				pha
.110b	85 1e		sta $1e				sta 	zTemp0 						; address in zTemp0
.110d	86 1f		stx $1f				stx 	zTemp0+1
.110f	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1111	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1113	a8		tay				tay
.1114	b2 1e		lda ($1e)			lda 	(zTemp0)
.1116	aa		tax				tax
.1117					_CSAEraseString:
.1117	5a		phy				phy
.1118	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.111a	a9 80		lda #$80			lda 	#$80
.111c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.111e	7a		ply				ply
.111f	18		clc				clc 								; add 4 to next slot.
.1120	a5 1e		lda $1e				lda 	zTemp0
.1122	69 04		adc #$04			adc 	#4
.1124	85 1e		sta $1e				sta 	zTemp0
.1126	90 02		bcc $112a			bcc 	_CSAENoCarry
.1128	e6 1f		inc $1f				inc 	zTemp0+1
.112a					_CSAENoCarry:
.112a	e0 00		cpx #$00			cpx 	#0
.112c	d0 01		bne $112f			bne 	_CSANoBorrow
.112e	88		dey				dey
.112f					_CSANoBorrow:
.112f	ca		dex				dex
.1130	d0 e5		bne $1117			bne 	_CSAEraseString
.1132	c0 00		cpy #$00			cpy 	#0
.1134	d0 e1		bne $1117			bne 	_CSAEraseString
.1136	68		pla				pla
.1137	fa		plx				plx
.1138					_CSANoInit:
.1138	7a		ply				ply
.1139	60		rts				rts
.113a					CSAAllocate:
.113a	08		php				php 								; save type flag.
.113b	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.113c	d0 01		bne $113f			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.113e	e8		inx				inx
.113f					_CSAANoCarry:
.113f	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1141	b0 2e		bcs $1171			bcs 	_CSARange
.1143	28		plp				plp 								; restore type flag
.1144	08		php				php 								; save it back again.
.1145	da		phx				phx 								; save size.
.1146	48		pha				pha
.1147	86 1f		stx $1f				stx  	zTemp0+1 					; now in ztemp0+1:X
.1149	90 03		bcc $114e			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.114b	0a		asl a				asl 	a
.114c	26 1f		rol $1f				rol 	zTemp0+1
.114e					_CSAATimes2:
.114e	0a		asl a				asl 	a
.114f	26 1f		rol $1f				rol 	zTemp0+1
.1151	18		clc				clc
.1152	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1154	90 02		bcc $1158			bcc 	_CSAANoCarry2
.1156	e6 1f		inc $1f				inc 	zTemp0+1
.1158					_CSAANoCarry2:
.1158	a6 1f		ldx $1f				ldx 	zTemp0+1 					; XA is the bytes required.
.115a	20 32 10	jsr $1032			jsr 	AllocateMemory 				; allocate memory to XA
.115d	86 1f		stx $1f				stx 	zTemp0+1 					; save pointers
.115f	85 1e		sta $1e				sta 	zTemp0
.1161	68		pla				pla  								; write element count to first 2 bytes
.1162	92 1e		sta ($1e)			sta 	(zTemp0)
.1164	68		pla				pla 								; msb of element count
.1165	28		plp				plp 								; CC if pointer array
.1166	b0 02		bcs $116a			bcs 	_CSAAIsData
.1168	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.116a					_CSAAIsData:
.116a	a0 01		ldy #$01			ldy 	#1
.116c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.116e	a5 1e		lda $1e				lda 	zTemp0 						; fix XA back up again
.1170	60		rts				rts
.1171					_CSARange:
.1171	4c 3d 20	jmp $203d		jmp	ErrorV_range
.033a					CAType:
>033a							.fill 	1
.033b					CADim1:
>033b							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1174					Command_Print:
.1174					Command_IP_Main:
.1174	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1175					_CPLoop:
.1175	08		php				php 								; save last action flag
.1176	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1178	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.117a	f0 3e		beq $11ba			beq 	_CPExit 					; without consuming
.117c	c9 9b		cmp #$9b			cmp 	#PR_COLON
.117e	f0 3a		beq $11ba			beq 	_CPExit
.1180	68		pla				pla 								; throw last action flag
.1181	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1183	c8		iny				iny
.1184	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1186	f0 2f		beq $11b7			beq 	_CPContinueWithSameLine
.1188	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.118a	f0 26		beq $11b2			beq 	_CPTab
.118c	88		dey				dey 								; undo the get.
.118d	20 3a 14	jsr $143a			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1190	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1192	10 14		bpl $11a8			bpl 	_CPNumber
.1194	5a		phy				phy
.1195	18		clc				clc 								; string address to YX
.1196	a5 0c		lda $0c				lda 	IFR0+IM0
.1198	aa		tax				tax
.1199	a5 0d		lda $0d				lda 	IFR0+IM1
.119b	a8		tay				tay
.119c	e8		inx				inx 								; point to 1st character
.119d	d0 01		bne $11a0			bne 	_CPNoCarry
.119f	c8		iny				iny
.11a0					_CPNoCarry:
.11a0	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.11a2	20 c3 11	jsr $11c3			jsr 	CPPrintAYX 					; print AYX
.11a5	7a		ply				ply
.11a6	80 cc		bra $1174			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11a8					_CPNumber:
.11a8	5a		phy				phy
.11a9	20 70 28	jsr $2870			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11ac	20 c3 11	jsr $11c3			jsr 	CPPrintAYX 					; print AYX
.11af	7a		ply				ply
.11b0	80 c2		bra $1174			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11b2					_CPTab:
.11b2	a9 09		lda #$09			lda 	#9 							; print TAB
.11b4	20 d6 11	jsr $11d6			jsr 	CPPrintA
.11b7					_CPContinueWithSameLine:
.11b7	38		sec				sec 								; loop round with carry set, which
.11b8	80 bb		bra $1175			bra 	_CPLoop 					; will inhibit final CR
.11ba					_CPExit:
.11ba	28		plp				plp 								; get last action flag
.11bb	b0 05		bcs $11c2			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11bd	a9 0d		lda #$0d			lda 	#13 						; print new line
.11bf	20 d6 11	jsr $11d6			jsr 	CPPrintA
.11c2					_CPExit2:
.11c2	60		rts				rts
.11c3					CPPrintAYX:
.11c3	86 1e		stx $1e				stx 	zTemp0
.11c5	84 1f		sty $1f				sty 	zTemp0+1
.11c7	aa		tax				tax
.11c8	f0 0b		beq $11d5			beq 	_CPPrintExit
.11ca	a0 00		ldy #$00			ldy 	#0
.11cc					_CPPrintAYXLoop:
.11cc	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.11ce	20 d6 11	jsr $11d6			jsr 	CPPrintA
.11d1	c8		iny				iny
.11d2	ca		dex				dex
.11d3	d0 f7		bne $11cc			bne 	_CPPrintAYXLoop
.11d5					_CPPrintExit:
.11d5	60		rts				rts
.11d6					CPPrintA:
.11d6	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.11d9					CommandLET:
.11d9	20 02 15	jsr $1502			jsr 	EXPTermR0 					; get term
.11dc	90 6d		bcc $124b			bcc 	_CLError 					; must be a reference term.
.11de	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.11e0	48		pha				pha
.11e1	a5 0d		lda $0d				lda 	IFR0+IM1
.11e3	48		pha				pha
.11e4	a5 0f		lda $0f				lda 	IFR0+IExp
.11e6	48		pha				pha
.11e7	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.11e9	20 7c 21	jsr $217c			jsr 	ERRCheckA
.11ec	20 3a 14	jsr $143a			jsr 	EXPEvaluateExpression 		; right hand side.
.11ef	68		pla				pla 								; type of l-expr
.11f0	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.11f2	30 5a		bmi $124e			bmi 	_CLType
.11f4	fa		plx				plx 	 							; pop target address to zTemp0
.11f5	86 1f		stx $1f				stx 	zTemp0+1
.11f7	fa		plx				plx
.11f8	86 1e		stx $1e				stx 	zTemp0
.11fa	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.11fc	30 15		bmi $1213			bmi 	_CLStringAssign
.11fe	5a		phy				phy
.11ff	a0 03		ldy #$03			ldy 	#3
.1201	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1203	88		dey				dey
.1204	a5 0e		lda $0e				lda 	IFR0+IM2
.1206	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1208	88		dey				dey
.1209	a5 0d		lda $0d				lda 	IFR0+IM1
.120b	91 1e		sta ($1e),y			sta 	(zTemp0),y
.120d	a5 0c		lda $0c				lda 	IFR0+IM0
.120f	92 1e		sta ($1e)			sta 	(zTemp0)
.1211	7a		ply				ply
.1212	60		rts				rts
.1213					_CLStringAssign:
.1213	5a		phy				phy
.1214	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1216	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1218	12 1e		ora ($1e)			ora 	(zTemp0)
.121a	f0 23		beq $123f			beq 	_CLConcreteString
.121c	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.121e	85 20		sta $20				sta 	zTemp1
.1220	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1222	85 21		sta $21				sta 	zTemp1+1
.1224	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.1226	38		sec				sec 								; we want 3 for slot size, status, string size.
.1227	e9 03		sbc #$03			sbc 	#3
.1229	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.122b	90 12		bcc $123f			bcc 	_CLConcreteString 			; if so, concrete the string again.
.122d	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.122f	1a		inc a				inc 	a
.1230	aa		tax				tax
.1231	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1233					_CLReplaceString:
.1233	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.1235	c8		iny				iny
.1236	c8		iny				iny
.1237	91 20		sta ($20),y			sta 	(zTemp1),y
.1239	88		dey				dey
.123a	ca		dex				dex
.123b	d0 f6		bne $1233			bne 	_CLReplaceString
.123d	80 0a		bra $1249			bra 	_CLExit
.123f					_CLConcreteString:
.123f	20 f8 21	jsr $21f8			jsr 	StringConcrete  			; concreted string in XA.
.1242	a0 01		ldy #$01			ldy 	#1 							; store the address
.1244	92 1e		sta ($1e)			sta 	(zTemp0)
.1246	8a		txa				txa
.1247	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1249					_CLExit:
.1249	7a		ply				ply
.124a	60		rts				rts
.124b					_CLError:
.124b	4c 50 21	jmp $2150		jmp	ErrorV_variable
.124e					_CLType:
.124e	4c 5a 20	jmp $205a		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1251					Command_NEW:
.1251	20 61 1c	jsr $1c61			jsr 	PGMNewProgram
.1254	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1257	4c b4 12	jmp $12b4			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.125a					Command_REM:
.125a					Command_REM2:
.125a	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.125c	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.125e	d0 06		bne $1266			bne 	_CRExit
.1260	c8		iny				iny 								; skip over it, it's a comment.
.1261	98		tya				tya
.1262	38		sec				sec
.1263	71 1c		adc ($1c),y			adc 	(codePtr),y
.1265	a8		tay				tay
.1266					_CRExit:
.1266	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1267					Command_RUN:
.1267	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.126a	ad 46 03	lda $0346			lda 	PGMBaseHigh 				; back to the program start
.126d	85 1d		sta $1d				sta 	codePtr+1
.126f	64 1c		stz $1c				stz 	codePtr
.1271	80 0b		bra $127e			bra 	RUNNewLine
.1273					RUNEndOfLine:
.1273	18		clc				clc 								; advance to next line.
.1274	b2 1c		lda ($1c)			lda 	(codePtr)
.1276	65 1c		adc $1c				adc 	codePtr
.1278	85 1c		sta $1c				sta 	codePtr
.127a	90 02		bcc $127e			bcc 	_RELNoCarry
.127c	e6 1d		inc $1d				inc 	codePtr+1
.127e					_RELNoCarry:
.127e					RUNNewLine:
.127e	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1280	9a		txs				txs
.1281	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.1283	f0 2f		beq $12b4			beq 	Command_END
.1285	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.1287					RUNNewCommand:
.1287	9c 4c 04	stz $044c			stz 	stringInitialised 			; reset string system.
.128a	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.128c	10 1a		bpl $12a8			bpl		_RUNNotToken 				; probably an identifier
.128e	c8		iny				iny 								; consume token
.128f	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1291	f0 f4		beq $1287			beq 	RUNNewCommand
.1293	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1295	b0 0e		bcs $12a5			bcs 	_RUNSyntax
.1297	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1299	90 0a		bcc $12a5			bcc 	_RUNSyntax
.129b	0a		asl a				asl 	a 							; double into X.
.129c	aa		tax				tax
.129d	20 a2 12	jsr $12a2			jsr 	_RUNDispatchMain			; call the main dispatcher
.12a0	80 e5		bra $1287			bra 	RUNNewCommand
.12a2					_RUNDispatchMain:
.12a2	7c 77 19	jmp ($1977,x)			jmp 	(VectorTable,x)
.12a5					_RUNSyntax:
.12a5	4c 2d 20	jmp $202d		jmp	ErrorV_syntax
.12a8					_RUNNotToken:
.12a8	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.12aa	90 f9		bcc $12a5			bcc 	_RUNSyntax
.12ac	20 d9 11	jsr $11d9			jsr 	CommandLET 					; assignment
.12af	80 d6		bra $1287			bra 	RUNNewCommand 				; loop round.
.12b1					Command_Shift_Handler:
.12b1	4c 6b 20	jmp $206b		jmp	ErrorV_unimplemented
.12b4					Command_END:
.12b4	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.12b7					Command_STOP:
.12b7	4c c8 20	jmp $20c8		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.12ba					NoExec01:
.12ba					NoExec02:
.12ba					NoExec03:
.12ba					NoExec04:
.12ba					NoExec05:
.12ba					NoExec06:
.12ba					NoExec07:
.12ba					NoExec08:
.12ba	4c 2d 20	jmp $202d		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.12bd					EXPBinAdd:
.12bd	24 0f		bit $0f				bit 	IFR0+IExp
.12bf	30 6f		bmi $1330			bmi 	EXPConcatenate
.12c1	a2 10		ldx #$10			ldx 	#IFR1
.12c3	4c 69 24	jmp $2469			jmp 	IFloatAdd
.12c6					EXPBinSub:
.12c6	24 0f		bit $0f				bit 	IFR0+IExp
.12c8	30 3f		bmi $1309			bmi 	EXPTypeError
.12ca	a2 10		ldx #$10			ldx 	#IFR1
.12cc	4c 62 24	jmp $2462			jmp 	IFloatSubtract
.12cf					EXPBinMul:
.12cf	24 0f		bit $0f				bit 	IFR0+IExp
.12d1	30 36		bmi $1309			bmi 	EXPTypeError
.12d3	a2 10		ldx #$10			ldx 	#IFR1
.12d5	4c 13 25	jmp $2513			jmp 	IFloatMultiply
.12d8					EXPBinFDiv:
.12d8	24 0f		bit $0f				bit 	IFR0+IExp
.12da	30 2d		bmi $1309			bmi 	EXPTypeError
.12dc	a2 10		ldx #$10			ldx 	#IFR1
.12de	20 96 27	jsr $2796			jsr 	IFloatDivideFloat
.12e1	b0 0f		bcs $12f2			bcs 	EXPDZero
.12e3	60		rts				rts
.12e4					EXPBinIDiv:
.12e4	24 0f		bit $0f				bit 	IFR0+IExp
.12e6	30 21		bmi $1309			bmi 	EXPTypeError
.12e8	a2 10		ldx #$10			ldx 	#IFR1
.12ea	20 96 27	jsr $2796			jsr 	IFloatDivideFloat
.12ed	b0 03		bcs $12f2			bcs 	EXPDZero
.12ef	4c 73 27	jmp $2773			jmp 	IFloatIntegerR0
.12f2					EXPDZero:
.12f2	4c 9f 20	jmp $209f		jmp	ErrorV_divzero
.12f5					EXPBinIMod:
.12f5	24 0f		bit $0f				bit 	IFR0+IExp
.12f7	30 10		bmi $1309			bmi 	EXPTypeError
.12f9	a2 10		ldx #$10			ldx 	#IFR1
.12fb	5a		phy				phy
.12fc	20 ab 26	jsr $26ab			jsr 	IFPreProcessBitwise 		; set up everything.
.12ff	d0 05		bne $1306			bne 	EXPDRange
.1301	20 e4 25	jsr $25e4			jsr 	IFloatModulusInteger
.1304	7a		ply				ply
.1305	60		rts				rts
.1306					EXPDRange:
.1306	4c 3d 20	jmp $203d		jmp	ErrorV_range
.1309					EXPTypeError:
.1309	4c 5a 20	jmp $205a		jmp	ErrorV_type
.130c					EXPBinAnd:
.130c	24 0f		bit $0f				bit 	IFR0+IExp
.130e	30 f9		bmi $1309			bmi 	EXPTypeError
.1310	a2 10		ldx #$10			ldx 	#IFR1
.1312	20 66 26	jsr $2666			jsr 	IFloatBitwiseAnd
.1315	b0 ef		bcs $1306			bcs 	EXPDRange
.1317	60		rts				rts
.1318					EXPBinOr:
.1318	24 0f		bit $0f				bit 	IFR0+IExp
.131a	30 ed		bmi $1309			bmi 	EXPTypeError
.131c	a2 10		ldx #$10			ldx 	#IFR1
.131e	20 7d 26	jsr $267d			jsr 	IFloatBitwiseOr
.1321	b0 e3		bcs $1306			bcs 	EXPDRange
.1323	60		rts				rts
.1324					EXPBinXor:
.1324	24 0f		bit $0f				bit 	IFR0+IExp
.1326	30 e1		bmi $1309			bmi 	EXPTypeError
.1328	a2 10		ldx #$10			ldx 	#IFR1
.132a	20 94 26	jsr $2694			jsr 	IFloatBitwiseXor
.132d	b0 d7		bcs $1306			bcs 	EXPDRange
.132f	60		rts				rts
.1330					EXPConcatenate:
.1330	18		clc				clc
.1331	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1333	72 10		adc ($10)			adc 	(IFR1)
.1335	b0 2d		bcs $1364			bcs 	_EXPCError
.1337	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.1339	da		phx				phx
.133a	a6 0d		ldx $0d				ldx 	IFR0+1
.133c	da		phx				phx
.133d	20 68 22	jsr $2268			jsr 	StringTempAllocate 			; allocate string, set up return
.1340	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1342	a5 10		lda $10				lda 	IFR1
.1344	20 4d 13	jsr $134d			jsr 	_EXPCCopyXA
.1347	fa		plx				plx 								; copy second string
.1348	68		pla				pla
.1349	20 4d 13	jsr $134d			jsr 	_EXPCCopyXA
.134c	60		rts				rts
.134d					_EXPCCopyXA:
.134d	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.134f	85 1e		sta $1e				sta 	zTemp0
.1351	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.1353	f0 0e		beq $1363			beq 	_EXPCCExit 					; nothing.
.1355	aa		tax				tax 								; count
.1356	5a		phy				phy 								; start positioin
.1357	a0 01		ldy #$01			ldy 	#1
.1359					_EXPCCLoop:
.1359	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.135b	20 9d 22	jsr $229d			jsr 	StringTempWrite
.135e	c8		iny				iny
.135f	ca		dex				dex
.1360	d0 f7		bne $1359			bne 	_EXPCCLoop
.1362	7a		ply				ply
.1363					_EXPCCExit:
.1363	60		rts				rts
.1364					_EXPCError:
.1364	4c 3b 21	jmp $213b		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1367					EXPReturnTrue:
.1367	a2 0c		ldx #$0c			ldx 	#IFR0
.1369	a9 01		lda #$01			lda 	#1
.136b	20 75 2a	jsr $2a75			jsr 	IFloatSetByte
.136e	20 7e 2a	jsr $2a7e			jsr 	IFloatNegate
.1371	60		rts				rts
.1372					EXPReturnFalse:
.1372	a2 0c		ldx #$0c			ldx 	#IFR0
.1374	4c 73 2a	jmp $2a73			jmp 	IFloatSetZero
.1377					EXPCompareEqual:
.1377	20 ad 13	jsr $13ad			jsr 	EXPCompareBaseCode
.137a	c9 00		cmp #$00			cmp 	#0
.137c	f0 e9		beq $1367			beq 	EXPReturnTrue
.137e	80 f2		bra $1372			bra 	EXPReturnFalse
.1380					EXPCompareLess:
.1380	20 ad 13	jsr $13ad			jsr 	EXPCompareBaseCode
.1383	c9 ff		cmp #$ff			cmp 	#$FF
.1385	f0 e0		beq $1367			beq 	EXPReturnTrue
.1387	80 e9		bra $1372			bra 	EXPReturnFalse
.1389					EXPCompareGreater:
.1389	20 ad 13	jsr $13ad			jsr 	EXPCompareBaseCode
.138c	c9 01		cmp #$01			cmp 	#1
.138e	f0 d7		beq $1367			beq 	EXPReturnTrue
.1390	80 e0		bra $1372			bra 	EXPReturnFalse
.1392					EXPCompareNotEqual:
.1392	20 ad 13	jsr $13ad			jsr 	EXPCompareBaseCode
.1395	c9 00		cmp #$00			cmp 	#0
.1397	d0 ce		bne $1367			bne 	EXPReturnTrue
.1399	80 d7		bra $1372			bra 	EXPReturnFalse
.139b					EXPCompareLessEqual:
.139b	20 ad 13	jsr $13ad			jsr 	EXPCompareBaseCode
.139e	c9 01		cmp #$01			cmp 	#1
.13a0	d0 c5		bne $1367			bne 	EXPReturnTrue
.13a2	80 ce		bra $1372			bra 	EXPReturnFalse
.13a4					EXPCompareGreaterEqual:
.13a4	20 ad 13	jsr $13ad			jsr 	EXPCompareBaseCode
.13a7	c9 ff		cmp #$ff			cmp 	#$FF
.13a9	d0 bc		bne $1367			bne 	EXPReturnTrue
.13ab	80 c5		bra $1372			bra 	EXPReturnFalse
.13ad					EXPCompareBaseCode:
.13ad	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.13af	30 10		bmi $13c1			bmi 	_EXCBCString
.13b1	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.13b3	20 41 27	jsr $2741			jsr 	IFloatCompare
.13b6	a5 0c		lda $0c				lda 	IFR0+IM0
.13b8	f0 06		beq $13c0			beq 	_EXCBCExit 					; return 0 if zero
.13ba	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.13bc	50 02		bvc $13c0			bvc 	_EXCBCExit
.13be	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.13c0					_EXCBCExit:
.13c0	60		rts				rts
.13c1					_EXCBCString:
.13c1	5a		phy				phy
.13c2	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.13c4	d2 10		cmp ($10)			cmp 	(IFR1)
.13c6	90 02		bcc $13ca			bcc 	_EXCBCSmaller
.13c8	b2 10		lda ($10)			lda 	(IFR1)
.13ca					_EXCBCSmaller:
.13ca	aa		tax				tax
.13cb	f0 0d		beq $13da			beq 	_EXCBCMatches 				; if zero common length matches
.13cd	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.13cf					_EXCBCCheckSmallerMatches:
.13cf	c8		iny				iny 								; compare directly as far as common length
.13d0	38		sec				sec
.13d1	b1 10		lda ($10),y			lda 	(IFR1),y
.13d3	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.13d5	d0 08		bne $13df			bne 	_EXCBCExit2
.13d7	ca		dex				dex
.13d8	d0 f5		bne $13cf			bne 	_EXCBCCheckSmallerMatches
.13da					_EXCBCMatches:
.13da	38		sec				sec
.13db	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.13dd	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.13df					_EXCBCExit2:
.13df	7a		ply				ply
.13e0	c9 00		cmp #$00			cmp 	#0
.13e2	f0 04		beq $13e8			beq 	_EXCBCReturn
.13e4	30 03		bmi $13e9			bmi 	_EXCBCFF
.13e6	a9 01		lda #$01			lda 	#1
.13e8					_EXCBCReturn:
.13e8	60		rts				rts
.13e9					_EXCBCFF:
.13e9	a9 ff		lda #$ff			lda 	#$FF
.13eb	60		rts				rts
.13ec					_EXCBCRange:
.13ec	4c 3d 20	jmp $203d		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.13ef					EXPBinLeft:
.13ef	a9 ff		lda #$ff			lda 	#$FF
.13f1	8d 3d 03	sta $033d			sta 	EXPShiftLeftFlag
.13f4	4c fa 13	jmp $13fa			jmp 	EXPShiftCommon
.13f7					EXPBinRight:
.13f7	9c 3d 03	stz $033d			stz 	EXPShiftLeftFlag
.13fa					EXPShiftCommon:
.13fa	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.13fc	05 13		ora $13				ora 	IFR1+IExp
.13fe	29 7f		and #$7f			and 	#$7F
.1400	d0 35		bne $1437			bne 	_EXPSRange
.1402	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1404	29 e0		and #$e0			and 	#$E0
.1406	05 0d		ora $0d				ora 	IFR0+IM1
.1408	05 0e		ora $0e				ora 	IFR0+IM2
.140a	d0 25		bne $1431			bne 	_EXPSShiftZero 				; if so return zero
.140c	5a		phy				phy
.140d	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.140f	29 1f		and #$1f			and 	#$1F
.1411	f0 17		beq $142a			beq 	_EXPSExit 					; exit if zero
.1413	a8		tay				tay
.1414					_EXPSLoop:
.1414	a2 10		ldx #$10			ldx 	#IFR1
.1416	2c 3d 03	bit $033d			bit 	EXPShiftLeftFlag
.1419	30 05		bmi $1420			bmi 	_EXPSShiftLeft
.141b	20 a2 2a	jsr $2aa2			jsr 	IFloatShiftRight
.141e	80 07		bra $1427			bra 	_EXPSContinue
.1420					_EXPSShiftLeft:
.1420	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1423	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1425	30 10		bmi $1437			bmi 	_EXPSRange
.1427					_EXPSContinue:
.1427	88		dey				dey
.1428	d0 ea		bne $1414			bne 	_EXPSLoop
.142a					_EXPSExit:
.142a	a2 10		ldx #$10			ldx 	#IFR1
.142c	20 04 2a	jsr $2a04			jsr 	IFloatCopyFromRegister
.142f	7a		ply				ply
.1430	60		rts				rts
.1431					_EXPSShiftZero:
.1431	a2 0c		ldx #$0c			ldx 	#IFR0
.1433	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.1436	60		rts				rts
.1437					_EXPSRange:
.1437	4c 3d 20	jmp $203d		jmp	ErrorV_range
.033d					EXPShiftLeftFlag:
>033d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.143a					EXPEvaluateExpression:
.143a	a9 00		lda #$00			lda 	#0 							; current precedence
.143c					EXPEvaluateExpressionPrecedenceA:
.143c	48		pha				pha
.143d	20 b7 14	jsr $14b7			jsr 	EXPTermValueR0				; do first term.
.1440					_EELoop:
.1440	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1442	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1444	90 31		bcc $1477			bcc 	_EEExit
.1446	aa		tax				tax 								; access the precedence of the operator.
.1447	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1448	dd cf 16	cmp $16cf,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.144b	b0 2b		bcs $1478			bcs 	_EEExit2
.144d	48		pha				pha 								; save current precedence.
.144e	da		phx				phx 								; save operator
.144f	c8		iny				iny 								; consume operator
.1450	da		phx				phx
.1451	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.1453	20 c2 29	jsr $29c2			jsr 	IFloatPushRx
.1456	fa		plx				plx
.1457	bd cf 16	lda $16cf,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.145a	20 3c 14	jsr $143c			jsr 	EXPEvaluateExpressionPrecedenceA
.145d	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.145f	20 e3 29	jsr $29e3			jsr 	IFloatPullRx
.1462	fa		plx				plx 								; operator
.1463	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.1465	45 13		eor $13				eor 	IFR1+IExp
.1467	30 08		bmi $1471			bmi 	_EEType
.1469					_EETypeOkay:
.1469	8a		txa				txa
.146a	0a		asl a				asl 	a 							; double -> X
.146b	aa		tax				tax
.146c	20 74 14	jsr $1474			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.146f	80 cf		bra $1440			bra 	_EELoop
.1471					_EEType:
.1471	4c 5a 20	jmp $205a		jmp	ErrorV_type
.1474					_EECallBinary:
.1474	7c 77 19	jmp ($1977,x)			jmp 	(VectorTable,x)
.1477					_EEExit:
.1477	68		pla				pla 								; throw precedence
.1478					_EEExit2:
.1478	18		clc				clc
.1479	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.147a					EXPEvalNumber:
.147a	20 3a 14	jsr $143a			jsr 	EXPEvaluateExpression
.147d	24 0f		bit $0f				bit 	IFR0+IExp
.147f	30 01		bmi $1482			bmi 	EVUType
.1481	60		rts				rts
.1482					EVUType:
.1482	4c 5a 20	jmp $205a		jmp	ErrorV_type
.1485					EXPEvalInteger:
.1485	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1488	20 73 27	jsr $2773			jsr 	IFloatIntegerR0
.148b	60		rts				rts
.148c					EXPEvalInteger16:
.148c	20 85 14	jsr $1485			jsr 	EXPEvalInteger
.148f	a5 0e		lda $0e				lda 	IFR0+IM2
.1491	d0 21		bne $14b4			bne 	EVURange
.1493	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1495	a5 0c		lda $0c				lda 	IFR0+IM0
.1497	60		rts				rts
.1498					EXPEvalInteger8:
.1498	20 85 14	jsr $1485			jsr 	EXPEvalInteger
.149b	a5 0e		lda $0e				lda 	IFR0+IM2
.149d	05 0d		ora $0d				ora 	IFR0+IM1
.149f	d0 13		bne $14b4			bne 	EVURange
.14a1	a5 0c		lda $0c				lda 	IFR0+IM0
.14a3	60		rts				rts
.14a4					EXPEvalString:
.14a4	20 3a 14	jsr $143a			jsr 	EXPEvaluateExpression
.14a7	24 0f		bit $0f				bit 	IFR0+IExp
.14a9	10 d7		bpl $1482			bpl 	EVUType
.14ab	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14ad	86 1f		stx $1f				stx 	zTemp0+1
.14af	a5 0c		lda $0c				lda 	IFR0+IM0
.14b1	85 1e		sta $1e				sta 	zTemp0
.14b3	60		rts				rts
.14b4					EVURange:
.14b4	4c 3d 20	jmp $203d		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.14b7					EXPTermValueR0:
.14b7	20 02 15	jsr $1502			jsr 	EXPTermR0 					; get term
.14ba	90 45		bcc $1501			bcc 	_ETVNotReference 			; exit if value.
.14bc	5a		phy				phy
.14bd	a0 03		ldy #$03			ldy 	#3 							; get type
.14bf	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14c1	30 14		bmi $14d7			bmi 	_ETVDereferenceString
.14c3	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.14c5	88		dey				dey
.14c6	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14c8	85 0e		sta $0e				sta 	IFR0+IM2
.14ca	88		dey				dey
.14cb	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14cd	aa		tax				tax
.14ce	b2 0c		lda ($0c)			lda 	(IFR0)
.14d0	86 0d		stx $0d				stx 	IFR0+IM1
.14d2	85 0c		sta $0c				sta 	IFR0+IM0
.14d4	7a		ply				ply
.14d5	18		clc				clc
.14d6	60		rts				rts
.14d7					_ETVDereferenceString:
.14d7	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.14d9	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14db	12 0c		ora ($0c)			ora 	(IFR0)
.14dd	f0 11		beq $14f0			beq 	_ETVNull
.14df	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.14e1	aa		tax				tax
.14e2	b2 0c		lda ($0c)			lda 	(IFR0)
.14e4	18		clc				clc 								; add two so points to actual string.
.14e5	69 02		adc #$02			adc 	#2
.14e7	90 01		bcc $14ea			bcc 	_EVDSNoCarry
.14e9	e8		inx				inx
.14ea					_EVDSNoCarry:
.14ea	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.14ec	85 0c		sta $0c				sta 	IFR0
.14ee	80 08		bra $14f8			bra 	_ETVFillExit 				; tidy up and exit.
.14f0					_ETVNull:
.14f0	a9 00		lda #$00			lda 	#_EVTNString & $FF
.14f2	85 0c		sta $0c				sta 	IFR0+IM0
.14f4	a9 15		lda #$15			lda 	#_EVTNString >> 8
.14f6	85 0d		sta $0d				sta 	IFR0+IM1
.14f8					_ETVFillExit:
.14f8	64 0e		stz $0e				stz 	IFR0+IM2
.14fa	a9 80		lda #$80			lda 	#$80
.14fc	85 0f		sta $0f				sta 	IFR0+IExp
.14fe	7a		ply				ply
.14ff	60		rts				rts
.1500					_EVTNString:
>1500	00						.byte 	0
.1501					_ETVNotReference:
.1501	60		rts				rts
.1502					EXPTermR0:
.1502	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.1504	30 10		bmi $1516			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1506	c8		iny				iny 								; consume element
.1507	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1509	b0 08		bcs $1513			bcs 	_ETMIdentifier
.150b	20 3a 15	jsr $153a			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.150e	20 6d 15	jsr $156d			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1511	18		clc				clc 								; return value
.1512	60		rts				rts
.1513					_ETMIdentifier:
.1513	4c 0a 24	jmp $240a			jmp 	VARCheckSimple 				; check simple variables A-Z
.1516					_ETMIsUnaryOrMinus:
.1516	c8		iny				iny 								; consume element
.1517	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1519	d0 0a		bne $1525			bne 	_ETMCheckUnary
.151b	20 b7 14	jsr $14b7			jsr 	EXPTermValueR0 				; get a term to negate
.151e	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1520	20 7e 2a	jsr $2a7e			jsr 	IFloatNegate
.1523	18		clc				clc
.1524	60		rts				rts
.1525					_ETMCheckUnary:
.1525	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1527	90 0e		bcc $1537			bcc 	_ETMUnarySyntax
.1529	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.152b	b0 0a		bcs $1537			bcs 	_ETMUnarySyntax
.152d	0a		asl a				asl 	a
.152e	aa		tax				tax
.152f	20 34 15	jsr $1534			jsr 	_ETMCallUnaryFunction
.1532	18		clc				clc
.1533	60		rts				rts
.1534					_ETMCallUnaryFunction:
.1534	7c 77 19	jmp ($1977,x)			jmp 	(VectorTable,x)
.1537					_ETMUnarySyntax:
.1537	4c 2d 20	jmp $202d		jmp	ErrorV_syntax
.153a					EXPExtractTokenisedInteger:
.153a	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.153c	64 0f		stz $0f				stz 	IFR0+IExp
.153e	64 0d		stz $0d				stz 	IFR0+IM1
.1540	64 0e		stz $0e				stz 	IFR0+IM2
.1542					_ETMConstant:
.1542	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1544	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1546	b0 24		bcs $156c			bcs 	_ETMCExit 					; no.
.1548	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.154a	a5 0d		lda $0d				lda 	IFR0+IM1
.154c	85 0e		sta $0e				sta 	IFR0+IM2
.154e	a5 0c		lda $0c				lda 	IFR0+IM0
.1550	85 0d		sta $0d				sta 	IFR0+IM1
.1552	64 0c		stz $0c				stz 	IFR0+IM0
.1554	8a		txa				txa
.1555	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1556	66 0e		ror $0e				ror 	IFR0+IM2
.1558	66 0d		ror $0d				ror 	IFR0+IM1
.155a	66 0c		ror $0c				ror 	IFR0+IM0
.155c	4a		lsr a				lsr 	a
.155d	66 0e		ror $0e				ror 	IFR0+IM2
.155f	66 0d		ror $0d				ror 	IFR0+IM1
.1561	66 0c		ror $0c				ror 	IFR0+IM0
.1563	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.1565	11 1c		ora ($1c),y			ora 	(codePtr),y
.1567	85 0c		sta $0c				sta 	IFR0+IM0
.1569	c8		iny				iny 								; consume, loop back
.156a	80 d6		bra $1542			bra 	_ETMConstant
.156c					_ETMCExit:
.156c	60		rts				rts
.156d					EXPCheckDecimalFollows:
.156d	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.156f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1571	d0 19		bne $158c			bne 	_ETMCDExit
.1573	c8		iny				iny 								; consume token.
.1574	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.1576	5a		phy				phy									; save current position
.1577	48		pha				pha 								; save count of chars.
.1578	38		sec				sec 								; address into YX : y + codePtr+1
.1579	98		tya				tya
.157a	65 1c		adc $1c				adc 	codePtr
.157c	aa		tax				tax
.157d	a5 1d		lda $1d				lda 	codePtr+1
.157f	69 00		adc #$00			adc 	#0
.1581	a8		tay				tay
.1582	68		pla				pla 								; get count.
.1583	20 17 29	jsr $2917			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1586	7a		ply				ply 								; go to next token.
.1587	98		tya				tya
.1588	38		sec				sec
.1589	71 1c		adc ($1c),y			adc 	(codePtr),y
.158b	a8		tay				tay
.158c					_ETMCDExit:
.158c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.158d					EXPUnaryAbs:
.158d	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 					; number to R0
.1590	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.1593	20 b7 26	jsr $26b7			jsr 	IFloatAbsoluteR0
.1596	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1597					EXPUnaryAsc:
.1597	20 a4 14	jsr $14a4			jsr 	EXPEvalString 					; string to R0, zTemp0
.159a	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.159d	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.159f	f0 06		beq $15a7			beq 	_EXAZero 						; if so return 0
.15a1	5a		phy				phy 									; otherwise get first character
.15a2	a0 01		ldy #$01			ldy 	#1
.15a4	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15a6	7a		ply				ply
.15a7					_EXAZero:
.15a7	a2 0c		ldx #$0c			ldx 	#IFR0
.15a9	20 75 2a	jsr $2a75			jsr 	IFloatSetByte
.15ac	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.15ad					EXPUnaryChr:
.15ad	20 98 14	jsr $1498			jsr 	EXPEvalInteger8 				; expr
.15b0	48		pha				pha 									; push on stack
.15b1	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.15b4	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.15b6	20 68 22	jsr $2268			jsr 	StringTempAllocate
.15b9	68		pla				pla
.15ba	20 9d 22	jsr $229d			jsr 	StringTempWrite
.15bd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.15be					EXPUnaryDec:
.15be	20 a4 14	jsr $14a4			jsr 	EXPEvalString 					; string to R0, zTemp0
.15c1	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.15c4	5a		phy				phy
.15c5	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.15c7	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.15ca	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.15cc	f0 3b		beq $1609			beq 	_EUDError 						; empty string
.15ce	aa		tax				tax
.15cf	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.15d1					_EUDLoop:
.15d1	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.15d3	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.15d5	90 02		bcc $15d9			bcc 	_EUDNoCase
.15d7	e9 20		sbc #$20			sbc 	#$20
.15d9					_EUDNoCase:
.15d9	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.15db	90 2c		bcc $1609			bcc 	_EUDError
.15dd	c9 3a		cmp #$3a			cmp 	#'9'+1
.15df	90 0a		bcc $15eb			bcc 	_EUDOkay
.15e1	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.15e3	90 24		bcc $1609			bcc 	_EUDError
.15e5	c9 47		cmp #$47			cmp 	#'F'+1
.15e7	b0 20		bcs $1609			bcs 	_EUDError
.15e9	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.15eb					_EUDOkay:
.15eb	29 0f		and #$0f			and 	#15 							; make constant
.15ed	da		phx				phx
.15ee	48		pha				pha
.15ef	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.15f1	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.15f4	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.15f7	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.15fa	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.15fd	68		pla				pla 									; pop constant and OR in
.15fe	fa		plx				plx
.15ff	05 0c		ora $0c				ora 	IFR0+IM0
.1601	85 0c		sta $0c				sta 	IFR0+IM0
.1603	c8		iny				iny 									; next
.1604	ca		dex				dex
.1605	d0 ca		bne $15d1			bne 	_EUDLoop
.1607	7a		ply				ply
.1608	60		rts				rts
.1609					_EUDError:
.1609	4c 4d 20	jmp $204d		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.160c					EXPUnaryInlineDec:
.160c	4c 2d 20	jmp $202d		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.160f					EXPUnaryNull:
.160f	20 b7 14	jsr $14b7			jsr 	EXPTermValueR0
.1612	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1613					EXPUnaryFrac:
.1613	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 					; number to R0
.1616	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.1619	20 1d 27	jsr $271d			jsr 	IFloatFractionalR0
.161c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.161d					EXPUnaryInt:
.161d	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 					; number to R0
.1620	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.1623	20 73 27	jsr $2773			jsr 	IFloatIntegerR0
.1626	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1627					EXPUnaryLen:
.1627	20 a4 14	jsr $14a4			jsr 	EXPEvalString 					; string to R0, zTemp0
.162a	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.162d	b2 1e		lda ($1e)			lda 	(zTemp0)
.162f	a2 0c		ldx #$0c			ldx 	#IFR0
.1631	20 75 2a	jsr $2a75			jsr 	IFloatSetByte
.1634	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1635					EXPUnaryParenthesis:
.1635	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 					; number to R0
.1638	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.163b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.163c					EXPUnaryRnd:
.163c	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 				; number to R0
.163f	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 				; )
.1642	a2 0c		ldx #$0c			ldx 	#IFR0
.1644	20 5b 16	jsr $165b			jsr 	EXPLoadInRandom
.1647	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1649	85 0f		sta $0f				sta 	IFR0+IExp
.164b	60		rts				rts
.164c					ExpUnaryRand:
.164c	20 85 14	jsr $1485			jsr 	EXPEvalInteger 				; integer to R0
.164f	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 				; )
.1652	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.1654	20 5b 16	jsr $165b			jsr 	EXPLoadInRandom
.1657	20 e4 25	jsr $25e4			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.165a	60		rts				rts
.165b					EXPLoadInRandom:
.165b	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.165e	20 70 16	jsr $1670			jsr 	EXPRandom32
.1661	95 00		sta $00,x			sta 	IM0,x
.1663	20 70 16	jsr $1670			jsr 	EXPRandom32
.1666	95 01		sta $01,x			sta 	IM1,x
.1668	20 70 16	jsr $1670			jsr 	EXPRandom32
.166b	29 7f		and #$7f			and 	#$7F
.166d	95 02		sta $02,x			sta 	IM2,x
.166f	60		rts				rts
.1670					EXPRandom32:
.1670	5a		phy				phy
.1671	a0 08		ldy #$08			ldy 	#8
.1673	ad 3e 03	lda $033e			lda 	EXPSeed+0
.1676	0d 3f 03	ora $033f			ora 	EXPSeed+1
.1679	0d 40 03	ora $0340			ora 	EXPSeed+2
.167c	0d 41 03	ora $0341			ora 	EXPSeed+3
.167f	d0 08		bne $1689			bne 	_EXPRNoReset
.1681	ee 3e 03	inc $033e			inc 	EXPSeed+0
.1684	a0 10		ldy #$10			ldy 	#16
.1686	8c 41 03	sty $0341			sty 	EXPSeed+3
.1689					_EXPRNoReset:
.1689	ad 3e 03	lda $033e			lda 	EXPSeed+0
.168c					_EXPRLoop:
.168c	0a		asl a				asl		a
.168d	2e 3f 03	rol $033f			rol 	EXPSeed+1
.1690	2e 40 03	rol $0340			rol 	EXPSeed+2
.1693	2e 41 03	rol $0341			rol 	EXPSeed+3
.1696	90 02		bcc $169a			bcc 	_EXPRNoEOR
.1698	49 c5		eor #$c5			eor 	#$C5
.169a					_EXPRNoEOR:
.169a	88		dey				dey
.169b	d0 ef		bne $168c			bne 	_EXPRLoop
.169d	8d 3e 03	sta $033e			sta 	EXPSeed+0
.16a0	7a		ply				ply
.16a1	60		rts				rts
.033e					EXPSeed:
>033e							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.16a2					EXPUnarySgn:
.16a2	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 					; number to R0
.16a5	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.16a8	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.16aa	20 15 2a	jsr $2a15			jsr 	IFloatCopyToRegister
.16ad	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.16af	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.16b2	a2 10		ldx #$10			ldx 	#IFR1
.16b4	20 41 27	jsr $2741			jsr 	IFloatCompare 					; compare R1 vs 0.
.16b7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.16b8					EXPUnarySqr:
.16b8	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 					; number to R0
.16bb	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.16be	20 bf 26	jsr $26bf			jsr 	IFloatSquareRootR0 				; square root.
.16c1	b0 01		bcs $16c4			bcs 	_EUSValue
.16c3	60		rts				rts
.16c4					_EUSValue:
.16c4	4c 3d 20	jmp $203d		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.16c7					EXPUnaryHex:
.16c7	20 85 14	jsr $1485			jsr 	EXPEvalInteger 					; expr
.16ca	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.16cd	5a		phy				phy
.16ce	a9 10		lda #$10			lda 	#16
.16d0	20 14 28	jsr $2814			jsr 	IFloatIntegerToStringR0
.16d3	80 0a		bra $16df			bra 	EUSMain
.16d5					EXPUnaryStr:
.16d5	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 					; expr
.16d8	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.16db	5a		phy				phy
.16dc	20 70 28	jsr $2870			jsr 	IFloatFloatToStringR0 			; convert to string
.16df					EUSMain:
.16df	b0 18		bcs $16f9			bcs 	_EUSError
.16e1	86 1e		stx $1e				stx 	zTemp0 							; save string address
.16e3	84 1f		sty $1f				sty 	zTemp0+1
.16e5	48		pha				pha 									; save count
.16e6	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.16e8	20 68 22	jsr $2268			jsr 	StringTempAllocate
.16eb	fa		plx				plx 									; count in X
.16ec	a0 00		ldy #$00			ldy 	#0
.16ee					_EUSCopy:
.16ee	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.16f0	c8		iny				iny
.16f1	20 9d 22	jsr $229d			jsr 	StringTempWrite
.16f4	ca		dex				dex
.16f5	d0 f7		bne $16ee			bne	 	_EUSCopy
.16f7	7a		ply				ply
.16f8	60		rts				rts
.16f9					_EUSError:
.16f9	4c 3d 20	jmp $203d		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.16fc					EXPUnaryInlineString:
.16fc	18		clc				clc 								; physical address -> IM0,1
.16fd	98		tya				tya
.16fe	65 1c		adc $1c				adc 	codePtr
.1700	85 0c		sta $0c				sta 	IFR0+IM0
.1702	a5 1d		lda $1d				lda 	codePtr+1
.1704	69 00		adc #$00			adc 	#0
.1706	85 0d		sta $0d				sta 	IFR0+IM1
.1708	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.170a	a9 80		lda #$80			lda 	#$80
.170c	85 0f		sta $0f				sta 	IFR0+IExp
.170e	98		tya				tya	 								; skip over it.
.170f	38		sec				sec
.1710	71 1c		adc ($1c),y			adc 	(codePtr),y
.1712	a8		tay				tay
.1713	60		rts				rts
.1714					_EXPUISRange:
.1714	4c 3d 20	jmp $203d		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1717					EXPUnaryLeft:
.1717	20 5d 17	jsr $175d			jsr 	EXPCommonStart 					; <string>,
.171a	48		pha				pha 									; save string address on stack
.171b	da		phx				phx
.171c	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.171e	48		pha				pha
.171f	20 98 14	jsr $1498			jsr 	EXPEvalInteger8 				; characters to do
.1722	80 44		bra $1768			bra 	EXPSubstringCommon
.1724					EXPUnaryRight:
.1724	20 5d 17	jsr $175d			jsr 	EXPCommonStart 					; <string>,
.1727	48		pha				pha 									; save string address on stack
.1728	da		phx				phx
.1729	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.172b	48		pha				pha
.172c	20 98 14	jsr $1498			jsr 	EXPEvalInteger8 				; characters to do
.172f	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.1731	68		pla				pla
.1732	38		sec				sec
.1733	e5 1e		sbc $1e				sbc 	zTemp0
.1735	b0 02		bcs $1739			bcs 	_EUROffLeft
.1737	a9 00		lda #$00			lda 	#0
.1739					_EUROffLeft:
.1739	48		pha				pha 									; start pos
.173a	a9 ff		lda #$ff			lda 	#255
.173c	80 2a		bra $1768			bra 	EXPSubstringCommon
.173e					EXPUnaryMid:
.173e	20 5d 17	jsr $175d			jsr 	EXPCommonStart 					; <string>,
.1741	48		pha				pha 									; save string address on stack
.1742	da		phx				phx
.1743	20 98 14	jsr $1498			jsr 	EXPEvalInteger8 				; characters start
.1746	f0 12		beq $175a			beq 	_EUSError 						; 1 is left
.1748	3a		dec a				dec 	a 								; zero based.
.1749	48		pha				pha
.174a	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.174c	c9 99		cmp #$99			cmp 	#PR_COMMA
.174e	f0 04		beq $1754			beq 	_EUMLength 						; if so m is provided
.1750	a9 ff		lda #$ff			lda 	#255 							; default m
.1752	80 14		bra $1768			bra 	EXPSubstringCommon
.1754					_EUMLength:
.1754	c8		iny				iny 									; consume comma
.1755	20 98 14	jsr $1498			jsr 	EXPEvalInteger8 				; characters to do
.1758	80 0e		bra $1768			bra 	EXPSubstringCommon
.175a					_EUSError:
.175a	4c 4d 20	jmp $204d		jmp	ErrorV_value
.175d					EXPCommonStart:
.175d	20 a4 14	jsr $14a4			jsr 	EXPEvalString
.1760	20 74 21	jsr $2174			jsr 	ERRCheckComma
.1763	a5 0c		lda $0c				lda 	IFR0+IM0
.1765	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1767	60		rts				rts
.1768					EXPSubstringCommon:
.1768	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.176a	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; check right bracket.
.176d	68		pla				pla 									; start position
.176e	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.1770	fa		plx				plx 									; get string address to zTemp2.
.1771	86 23		stx $23				stx 	zTemp2+1
.1773	68		pla				pla
.1774	85 22		sta $22				sta 	zTemp2
.1776	38		sec				sec 									; length - start is the max count of chars
.1777	b2 22		lda ($22)			lda 	(zTemp2)
.1779	e5 21		sbc $21				sbc 	zTemp1+1
.177b	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.177d	b0 02		bcs $1781			bcs 	_EXPSSNoTrim
.177f	85 20		sta $20				sta 	zTemp1 							; update count with available
.1781					_EXPSSNoTrim:
.1781	a5 20		lda $20				lda 	zTemp1 							; chars required.
.1783	20 68 22	jsr $2268			jsr 	StringTempAllocate 				; allocate memory for it.
.1786	a5 20		lda $20				lda 	zTemp1 							; zero length string
.1788	f0 15		beq $179f			beq 	_EXPSSExit
.178a	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.178c	d2 22		cmp ($22)			cmp 	(zTemp2)
.178e	b0 0f		bcs $179f			bcs 	_EXPSSExit
.1790	5a		phy				phy
.1791	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.1793	c8		iny				iny 									; +1 for the length byte
.1794					_EXPSSCopy:
.1794	b1 22		lda ($22),y			lda 	(zTemp2),y
.1796	20 9d 22	jsr $229d			jsr 	StringTempWrite
.1799	c8		iny				iny
.179a	c6 20		dec $20				dec 	zTemp1
.179c	d0 f6		bne $1794			bne 	_EXPSSCopy
.179e	7a		ply				ply
.179f					_EXPSSExit:
.179f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.17a0					EXPUnaryVal:
.17a0	20 a4 14	jsr $14a4			jsr 	EXPEvalString 					; string to R0, zTemp0
.17a3	20 6c 21	jsr $216c			jsr 	ERRCheckRParen 					; )
.17a6	5a		phy				phy
.17a7	18		clc				clc
.17a8	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.17aa	69 01		adc #$01			adc 	#1
.17ac	aa		tax				tax
.17ad	a5 1f		lda $1f				lda 	zTemp0+1
.17af	69 00		adc #$00			adc 	#0
.17b1	a8		tay				tay
.17b2	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.17b4	20 d7 28	jsr $28d7			jsr 	IFloatStringToFloatR0 			; do conversion
.17b7	b0 02		bcs $17bb			bcs 	_EUVError
.17b9	7a		ply				ply
.17ba	60		rts				rts
.17bb					_EUVError:
.17bb	4c 4d 20	jmp $204d		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.17be					BinaryPrecedence:
>17be	02					.byte	 2	; $ef =
>17bf	02					.byte	 2	; $f0 <>
>17c0	02					.byte	 2	; $f1 <=
>17c1	02					.byte	 2	; $f2 <
>17c2	02					.byte	 2	; $f3 >=
>17c3	02					.byte	 2	; $f4 >
>17c4	01					.byte	 1	; $f5 XOR
>17c5	01					.byte	 1	; $f6 OR
>17c6	01					.byte	 1	; $f7 AND
>17c7	04					.byte	 4	; $f8 DIV
>17c8	04					.byte	 4	; $f9 MOD
>17c9	04					.byte	 4	; $fa <<
>17ca	04					.byte	 4	; $fb >>
>17cb	04					.byte	 4	; $fc /
>17cc	04					.byte	 4	; $fd *
>17cd	03					.byte	 3	; $fe -
>17ce	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.17cf					StructureOffsets:
>17cf	01					.byte	1  	; $80 REPEAT
>17d0	ff					.byte	255	; $81 UNTIL
>17d1	01					.byte	1  	; $82 WHILE
>17d2	ff					.byte	255	; $83 WEND
>17d3	01					.byte	1  	; $84 IF
>17d4	ff					.byte	255	; $85 ENDIF
>17d5	01					.byte	1  	; $86 DO
>17d6	ff					.byte	255	; $87 LOOP
>17d7	01					.byte	1  	; $88 PROC
>17d8	ff					.byte	255	; $89 ENDPROC
>17d9	01					.byte	1  	; $8a FOR
>17da	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.17db					StandardTokens:
>17db	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>17e2	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>17e8	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>17ee	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>17f3	02 49 46				.byte	$02,$49,$46                             	; $84 if
>17f6	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>17fc	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>17ff	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1804	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1809	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1811	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1815	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>181a	00					.byte	$00                                     	; $8c [[end]]
>181b	00					.byte	$00                                     	; $8d [[shift]]
>181c	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1821	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1826	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1829	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>182e	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1832	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1838	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>183e	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1843	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1847	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>184b	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1850	01 2c					.byte	$01,$2c                                 	; $99 ,
>1852	01 3b					.byte	$01,$3b                                 	; $9a ;
>1854	01 3a					.byte	$01,$3a                                 	; $9b :
>1856	01 27					.byte	$01,$27                                 	; $9c '
>1858	01 29					.byte	$01,$29                                 	; $9d )
>185a	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>185e	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1864	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1868	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>186c	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1871	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1875	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>187c	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1881	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1886	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>188b	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1890	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1895	00					.byte	0											; $aa
>1896	00					.byte	0											; $ab
>1897	00					.byte	0											; $ac
>1898	00					.byte	0											; $ad
>1899	00					.byte	0											; $ae
>189a	00					.byte	0											; $af
>189b	00					.byte	0											; $b0
>189c	00					.byte	0											; $b1
>189d	00					.byte	0											; $b2
>189e	00					.byte	0											; $b3
>189f	00					.byte	0											; $b4
>18a0	00					.byte	0											; $b5
>18a1	00					.byte	0											; $b6
>18a2	00					.byte	0											; $b7
>18a3	00					.byte	0											; $b8
>18a4	00					.byte	0											; $b9
>18a5	00					.byte	0											; $ba
>18a6	00					.byte	0											; $bb
>18a7	00					.byte	0											; $bc
>18a8	00					.byte	0											; $bd
>18a9	00					.byte	0											; $be
>18aa	00					.byte	0											; $bf
>18ab	00					.byte	0											; $c0
>18ac	00					.byte	0											; $c1
>18ad	00					.byte	0											; $c2
>18ae	00					.byte	0											; $c3
>18af	00					.byte	0											; $c4
>18b0	00					.byte	0											; $c5
>18b1	00					.byte	0											; $c6
>18b2	00					.byte	0											; $c7
>18b3	00					.byte	0											; $c8
>18b4	00					.byte	0											; $c9
>18b5	00					.byte	0											; $ca
>18b6	00					.byte	0											; $cb
>18b7	00					.byte	0											; $cc
>18b8	00					.byte	0											; $cd
>18b9	00					.byte	0											; $ce
>18ba	00					.byte	0											; $cf
>18bb	00					.byte	0											; $d0
>18bc	00					.byte	0											; $d1
>18bd	00					.byte	0											; $d2
>18be	00					.byte	0											; $d3
>18bf	00					.byte	0											; $d4
>18c0	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>18c6	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>18cc	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>18d4	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>18db	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>18e1	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>18e7	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>18ec	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>18f1	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>18f6	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>18fb	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1900	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1906	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>190b	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1913	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>191a	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>191f	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1924	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>192a	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>192f	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1935	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>193a	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1940	01 28					.byte	$01,$28                                 	; $eb (
>1942	01 24					.byte	$01,$24                                 	; $ec $
>1944	00					.byte	$00                                     	; $ed [[decimal]]
>1945	00					.byte	$00                                     	; $ee [[string]]
>1946	01 3d					.byte	$01,$3d                                 	; $ef =
>1948	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>194b	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>194e	01 3c					.byte	$01,$3c                                 	; $f2 <
>1950	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1953	01 3e					.byte	$01,$3e                                 	; $f4 >
>1955	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1959	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>195c	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1960	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1964	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1968	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>196b	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>196e	01 2f					.byte	$01,$2f                                 	; $fc /
>1970	01 2a					.byte	$01,$2a                                 	; $fd *
>1972	01 2d					.byte	$01,$2d                                 	; $fe -
>1974	01 2b					.byte	$01,$2b                                 	; $ff +
>1976	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1977					VectorTable:
>1977	89 1f					.word	Command_REPEAT           ; $80 REPEAT
>1979	92 1f					.word	Command_UNTIL            ; $81 UNTIL
>197b	02 20					.word	Command_WHILE            ; $82 WHILE
>197d	21 20					.word	Command_WEND             ; $83 WEND
>197f	61 1f					.word	IfCommand                ; $84 IF
>1981	88 1f					.word	EndIf                    ; $85 ENDIF
>1983	40 1f					.word	Command_DO               ; $86 DO
>1985	58 1f					.word	Command_LOOP             ; $87 LOOP
>1987	ba 12					.word	NoExec08                 ; $88 PROC
>1989	51 2b					.word	NotImplemented           ; $89 ENDPROC
>198b	51 2b					.word	NotImplemented           ; $8a FOR
>198d	51 2b					.word	NotImplemented           ; $8b NEXT
>198f	73 12					.word	RUNEndOfLine             ; $8c [[END]]
>1991	b1 12					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1993	81 1f					.word	ElseCode                 ; $8e ELSE
>1995	ba 12					.word	NoExec01                 ; $8f THEN
>1997	ba 12					.word	NoExec02                 ; $90 TO
>1999	ba 12					.word	NoExec03                 ; $91 STEP
>199b	d9 11					.word	CommandLET               ; $92 LET
>199d	74 11					.word	Command_Print            ; $93 PRINT
>199f	51 2b					.word	NotImplemented           ; $94 INPUT
>19a1	51 2b					.word	NotImplemented           ; $95 CALL
>19a3	51 2b					.word	NotImplemented           ; $96 SYS
>19a5	5a 12					.word	Command_REM              ; $97 REM
>19a7	49 1f					.word	Command_EXIT             ; $98 EXIT
>19a9	ba 12					.word	NoExec04                 ; $99 ,
>19ab	ba 12					.word	NoExec05                 ; $9a ;
>19ad	ba 12					.word	NoExec06                 ; $9b :
>19af	5a 12					.word	Command_REM2             ; $9c '
>19b1	ba 12					.word	NoExec07                 ; $9d )
>19b3	58 10					.word	CommandDIM               ; $9e DIM
>19b5	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>19b7	51 12					.word	Command_NEW              ; $a0 NEW
>19b9	67 12					.word	Command_RUN              ; $a1 RUN
>19bb	b7 12					.word	Command_STOP             ; $a2 STOP
>19bd	b4 12					.word	Command_END              ; $a3 END
>19bf	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>19c1	51 2b					.word	NotImplemented           ; $a5 LIST
>19c3	51 2b					.word	NotImplemented           ; $a6 SAVE
>19c5	51 2b					.word	NotImplemented           ; $a7 LOAD
>19c7	51 2b					.word	NotImplemented           ; $a8 POKE
>19c9	51 2b					.word	NotImplemented           ; $a9 DOKE
>19cb	51 2b					.word	NotImplemented           ; $aa
>19cd	51 2b					.word	NotImplemented           ; $ab
>19cf	51 2b					.word	NotImplemented           ; $ac
>19d1	51 2b					.word	NotImplemented           ; $ad
>19d3	51 2b					.word	NotImplemented           ; $ae
>19d5	51 2b					.word	NotImplemented           ; $af
>19d7	51 2b					.word	NotImplemented           ; $b0
>19d9	51 2b					.word	NotImplemented           ; $b1
>19db	51 2b					.word	NotImplemented           ; $b2
>19dd	51 2b					.word	NotImplemented           ; $b3
>19df	51 2b					.word	NotImplemented           ; $b4
>19e1	51 2b					.word	NotImplemented           ; $b5
>19e3	51 2b					.word	NotImplemented           ; $b6
>19e5	51 2b					.word	NotImplemented           ; $b7
>19e7	51 2b					.word	NotImplemented           ; $b8
>19e9	51 2b					.word	NotImplemented           ; $b9
>19eb	51 2b					.word	NotImplemented           ; $ba
>19ed	51 2b					.word	NotImplemented           ; $bb
>19ef	51 2b					.word	NotImplemented           ; $bc
>19f1	51 2b					.word	NotImplemented           ; $bd
>19f3	51 2b					.word	NotImplemented           ; $be
>19f5	51 2b					.word	NotImplemented           ; $bf
>19f7	51 2b					.word	NotImplemented           ; $c0
>19f9	51 2b					.word	NotImplemented           ; $c1
>19fb	51 2b					.word	NotImplemented           ; $c2
>19fd	51 2b					.word	NotImplemented           ; $c3
>19ff	51 2b					.word	NotImplemented           ; $c4
>1a01	51 2b					.word	NotImplemented           ; $c5
>1a03	51 2b					.word	NotImplemented           ; $c6
>1a05	51 2b					.word	NotImplemented           ; $c7
>1a07	51 2b					.word	NotImplemented           ; $c8
>1a09	51 2b					.word	NotImplemented           ; $c9
>1a0b	51 2b					.word	NotImplemented           ; $ca
>1a0d	51 2b					.word	NotImplemented           ; $cb
>1a0f	51 2b					.word	NotImplemented           ; $cc
>1a11	51 2b					.word	NotImplemented           ; $cd
>1a13	51 2b					.word	NotImplemented           ; $ce
>1a15	51 2b					.word	NotImplemented           ; $cf
>1a17	51 2b					.word	NotImplemented           ; $d0
>1a19	51 2b					.word	NotImplemented           ; $d1
>1a1b	51 2b					.word	NotImplemented           ; $d2
>1a1d	51 2b					.word	NotImplemented           ; $d3
>1a1f	51 2b					.word	NotImplemented           ; $d4
>1a21	51 2b					.word	NotImplemented           ; $d5 DEEK(
>1a23	51 2b					.word	NotImplemented           ; $d6 PEEK(
>1a25	24 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1a27	17 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1a29	3e 17					.word	EXPUnaryMid              ; $d9 MID$(
>1a2b	d5 16					.word	EXPUnaryStr              ; $da STR$(
>1a2d	a0 17					.word	EXPUnaryVal              ; $db VAL(
>1a2f	a2 16					.word	EXPUnarySgn              ; $dc SGN(
>1a31	8d 15					.word	EXPUnaryAbs              ; $dd ABS(
>1a33	27 16					.word	EXPUnaryLen              ; $de LEN(
>1a35	b8 16					.word	EXPUnarySqr              ; $df SQR(
>1a37	ad 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1a39	97 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1a3b	51 2b					.word	NotImplemented           ; $e2 INKEY$(
>1a3d	51 2b					.word	NotImplemented           ; $e3 EVENT(
>1a3f	51 2b					.word	NotImplemented           ; $e4 TIME
>1a41	1d 16					.word	EXPUnaryInt              ; $e5 INT(
>1a43	13 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1a45	be 15					.word	EXPUnaryDec              ; $e7 DEC(
>1a47	c7 16					.word	EXPUnaryHex              ; $e8 HEX$(
>1a49	3c 16					.word	EXPUnaryRnd              ; $e9 RND(
>1a4b	4c 16					.word	ExpUnaryRand             ; $ea RAND(
>1a4d	35 16					.word	EXPUnaryParenthesis      ; $eb (
>1a4f	0f 16					.word	EXPUnaryNull             ; $ec $
>1a51	0c 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1a53	fc 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1a55	77 13					.word	EXPCompareEqual          ; $ef =
>1a57	92 13					.word	EXPCompareNotEqual       ; $f0 <>
>1a59	9b 13					.word	EXPCompareLessEqual      ; $f1 <=
>1a5b	80 13					.word	EXPCompareLess           ; $f2 <
>1a5d	a4 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1a5f	89 13					.word	EXPCompareGreater        ; $f4 >
>1a61	24 13					.word	EXPBinXor                ; $f5 XOR
>1a63	18 13					.word	EXPBinOr                 ; $f6 OR
>1a65	0c 13					.word	EXPBinAnd                ; $f7 AND
>1a67	e4 12					.word	EXPBinIDiv               ; $f8 DIV
>1a69	f5 12					.word	EXPBinIMod               ; $f9 MOD
>1a6b	ef 13					.word	EXPBinLeft               ; $fa <<
>1a6d	f7 13					.word	EXPBinRight              ; $fb >>
>1a6f	d8 12					.word	EXPBinFDiv               ; $fc /
>1a71	cf 12					.word	EXPBinMul                ; $fd *
>1a73	c6 12					.word	EXPBinSub                ; $fe -
>1a75	bd 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1a77					TOKDetokenise:
.1a77	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1a79	84 23		sty $23				sty 	zTemp2+1
.1a7b	9c 44 03	stz $0344			stz		TOKLastCharacter 			; clear last character
.1a7e					_TOKDLoop:
.1a7e	20 ad 1a	jsr $1aad			jsr 	TOKDGet 					; get next
.1a81	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1a83	f0 26		beq $1aab			beq 	_TOKDExit
.1a85	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1a87	f0 1d		beq $1aa6			beq 	_TOKDDataItem
.1a89	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1a8b	f0 19		beq $1aa6			beq 	_TOKDDataItem
.1a8d	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1a8f	10 05		bpl $1a96			bpl 	_TOKDNotToken
.1a91	20 75 1b	jsr $1b75			jsr 	TOKDToken 					; token to text.
.1a94	80 e8		bra $1a7e			bra 	_TOKDLoop
.1a96					_TOKDNotToken:
.1a96	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1a98	90 05		bcc $1a9f			bcc 	_TOKDNotIdentifier
.1a9a	20 e8 1a	jsr $1ae8			jsr 	TOKDIdentifier
.1a9d	80 df		bra $1a7e			bra 	_TOKDLoop
.1a9f					_TOKDNotIdentifier:
.1a9f	a0 0a		ldy #$0a			ldy 	#10
.1aa1	20 31 1b	jsr $1b31			jsr 	TOKDInteger
.1aa4	80 d8		bra $1a7e			bra 	_TOKDLoop
.1aa6					_TOKDDataItem:
.1aa6	20 c3 1a	jsr $1ac3			jsr 	TOKDDataItem
.1aa9	80 d3		bra $1a7e			bra 	_TOKDLoop
.1aab					_TOKDExit:
.1aab	18		clc				clc
.1aac	60		rts				rts
.1aad	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1aaf	e6 22		inc $22				inc 	zTemp2
.1ab1	d0 02		bne $1ab5			bne 	_TKDGExit
.1ab3	e6 23		inc $23				inc 	zTemp2+1
.1ab5					_TKDGExit:
.1ab5	60		rts				rts
.1ab6					TOKDOutput:
.1ab6	8d 44 03	sta $0344			sta 	TOKLastCharacter
.1ab9	6c 42 03	jmp ($0342)			jmp 	(TOKOutputMethod)
.1abc					TOKSetDetokeniseOutput:
.1abc	8e 42 03	stx $0342			stx 	TOKOutputMethod
.1abf	8c 43 03	sty $0343			sty 	TOKOutputMethod+1
.1ac2	60		rts				rts
.0342					TOKOutputMethod:
>0342							.fill 	2
.0344					TOKLastCharacter:
>0344							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1ac3					TOKDDataItem:
.1ac3	a8		tay				tay 								; type in Y
.1ac4	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1ac6	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1ac8	f0 02		beq $1acc			beq 	_TOKDDIsString
.1aca	a9 2e		lda #$2e			lda 	#'.'
.1acc					_TOKDDIsString:
.1acc	20 b6 1a	jsr $1ab6			jsr 	TOKDOutput 					; dump it
.1acf	20 ad 1a	jsr $1aad			jsr 	TOKDGet 					; get length into X
.1ad2	aa		tax				tax
.1ad3					_TOKDDOutput:
.1ad3	ca		dex				dex 								; are we complete
.1ad4	30 08		bmi $1ade			bmi 	_TOKDDEnd
.1ad6	20 ad 1a	jsr $1aad			jsr 	TOKDGet 					; get character and output it
.1ad9	20 b6 1a	jsr $1ab6			jsr 	TOKDOutput
.1adc	80 f5		bra $1ad3			bra 	_TOKDDOutput
.1ade					_TOKDDEnd:
.1ade	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1ae0	d0 05		bne $1ae7			bne 	_TOKDDNotString
.1ae2	a9 22		lda #$22			lda 	#'"'
.1ae4	20 b6 1a	jsr $1ab6			jsr 	TOKDOutput
.1ae7					_TOKDDNotString:
.1ae7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1ae8					TOKDIdentifier:
.1ae8	a0 ff		ldy #$ff			ldy 	#$FF
.1aea	8c 45 03	sty $0345			sty 	TOKDIFirstChar
.1aed					_TOKDLoop:
.1aed	a8		tay				tay 								; token in Y
.1aee	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1af0	c0 64		cpy #$64			cpy 	#$64
.1af2	f0 11		beq $1b05			beq 	_TOKDIOutput
.1af4	a9 5f		lda #$5f			lda 	#'_'
.1af6	c0 65		cpy #$65			cpy 	#$65
.1af8	f0 0b		beq $1b05			beq 	_TOKDIOutput
.1afa	98		tya				tya 								; handle a-z
.1afb	18		clc				clc
.1afc	69 21		adc #$21			adc	 	#$21
.1afe	c0 5a		cpy #$5a			cpy 	#$5A
.1b00	90 03		bcc $1b05			bcc 	_TOKDIOutput
.1b02	38		sec				sec 								; handle 0-9
.1b03	e9 4b		sbc #$4b			sbc 	#$4B
.1b05					_TOKDIOutput:
.1b05	2c 45 03	bit $0345			bit 	TOKDIFirstChar
.1b08	10 08		bpl $1b12			bpl 	_TOKDINoSpacing
.1b0a	48		pha				pha
.1b0b	20 a7 1b	jsr $1ba7			jsr 	TOKDSpacing
.1b0e	9c 45 03	stz $0345			stz 	TOKDIFirstChar
.1b11	68		pla				pla
.1b12					_TOKDINoSpacing:
.1b12	20 b6 1a	jsr $1ab6			jsr 	TOKDOutput
.1b15	20 ad 1a	jsr $1aad			jsr 	TOKDGet 					; get next token
.1b18	c9 7c		cmp #$7c			cmp 	#$7C
.1b1a	90 d1		bcc $1aed			bcc 	_TOKDLoop
.1b1c	f0 12		beq $1b30			beq 	_TOKDIExit 					; it's a number, no tail.
.1b1e	4a		lsr a				lsr 	a 							; string ?
.1b1f	90 07		bcc $1b28			bcc 	_TOKDICheckArray
.1b21	48		pha				pha
.1b22	a9 24		lda #$24			lda 	#"$"
.1b24	20 b6 1a	jsr $1ab6			jsr 	TOKDOutput
.1b27	68		pla				pla
.1b28					_TOKDICheckArray:
.1b28	4a		lsr a				lsr 	a 							; array ?
.1b29	90 05		bcc $1b30			bcc 	_TOKDIExit
.1b2b	a9 28		lda #$28			lda 	#"("
.1b2d	20 b6 1a	jsr $1ab6			jsr 	TOKDOutput
.1b30					_TOKDIExit:
.1b30	60		rts				rts
.0345					TOKDIFirstChar:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1b31					TOKDInteger:
.1b31	5a		phy				phy 								; save base
.1b32	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1b34	20 75 2a	jsr $2a75			jsr 	IFloatSetByte
.1b37					_TOKDILoop:
.1b37	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1b39	c9 40		cmp #$40			cmp 	#$40
.1b3b	b0 1d		bcs $1b5a			bcs 	_TOKDIHaveInteger
.1b3d	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1b3f	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1b42	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1b45	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1b48	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1b4b	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1b4e	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1b51	20 ad 1a	jsr $1aad			jsr 	TOKDGet 					; OR byte in.
.1b54	05 0c		ora $0c				ora 	IFR0+IM0
.1b56	85 0c		sta $0c				sta 	IFR0+IM0
.1b58	80 dd		bra $1b37			bra 	_TOKDILoop
.1b5a					_TOKDIHaveInteger:
.1b5a	7a		ply				ply 								; restore base
.1b5b	98		tya				tya 								; base in A
.1b5c	20 14 28	jsr $2814			jsr 	IFloatIntegerToStringR0
.1b5f	86 1e		stx $1e				stx 	zTemp0
.1b61	84 1f		sty $1f				sty 	zTemp0+1
.1b63	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b65	20 a7 1b	jsr $1ba7			jsr 	TOKDSpacing 				; check spacing okay.
.1b68	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1b6a					_TOKDOutput:
.1b6a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b6c	20 b6 1a	jsr $1ab6			jsr 	TOKDOutput
.1b6f	c8		iny				iny
.1b70	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b72	d0 f6		bne $1b6a			bne 	_TOKDOutput
.1b74	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1b75					TOKDToken:
.1b75	a2 db		ldx #$db			ldx 	#StandardTokens & $FF
.1b77	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1b79					_TOKDSearch:
.1b79	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1b7b	84 1f		sty $1f				sty 	zTemp0+1
.1b7d	aa		tax				tax 								; token ID in X.
.1b7e					_TOKDFind:
.1b7e	ca		dex				dex 								; reached the start
.1b7f	10 0d		bpl $1b8e			bpl 	_TOKDFound
.1b81	38		sec				sec 								; go to next entry
.1b82	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b84	65 1e		adc $1e				adc 	zTemp0
.1b86	85 1e		sta $1e				sta 	zTemp0
.1b88	90 f4		bcc $1b7e			bcc 	_TOKDFind
.1b8a	e6 1f		inc $1f				inc 	zTemp0+1
.1b8c	80 f0		bra $1b7e			bra 	_TOKDFind
.1b8e					_TOKDFound:
.1b8e	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1b90	f0 14		beq $1ba6			beq 	_TOKDExit
.1b92	aa		tax				tax
.1b93	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1b95	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1b97	20 a7 1b	jsr $1ba7			jsr 	TOKDSpacing
.1b9a					_TOKDOutput:
.1b9a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b9c	20 fb 1e	jsr $1efb			jsr 	TOKToLower
.1b9f	20 b6 1a	jsr $1ab6			jsr 	TOKDOutput
.1ba2	c8		iny				iny
.1ba3	ca		dex				dex
.1ba4	d0 f4		bne $1b9a			bne 	_TOKDOutput
.1ba6					_TOKDExit:
.1ba6	60		rts				rts
.1ba7					TOKDSpacing:
.1ba7	20 12 1f	jsr $1f12			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1baa	90 0d		bcc $1bb9			bcc 	_TOKDSExit
.1bac	ad 44 03	lda $0344			lda 	TOKLastCharacter			; and last character also alphanumeric
.1baf	20 12 1f	jsr $1f12			jsr 	TOKIsIdentifierElement
.1bb2	90 05		bcc $1bb9			bcc 	_TOKDSExit
.1bb4	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1bb6	20 b6 1a	jsr $1ab6			jsr 	TOKDOutput
.1bb9					_TOKDSExit:
.1bb9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1bba					PGMDeleteLine:
.1bba	20 6d 1c	jsr $1c6d			jsr 	PGMEndProgram 				; end of program into zTemp0
.1bbd	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1bbf	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1bc2	85 21		sta $21				sta 	zTemp1+1
.1bc4					_PGMDLoop:
.1bc4	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1bc6	38		sec				sec
.1bc7	f0 3a		beq $1c03			beq 	_PGMDExit
.1bc9	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1bcb	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bcd	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1bd0	d0 08		bne $1bda			bne 	_PGMDNext
.1bd2	c8		iny				iny
.1bd3	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bd5	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1bd8	f0 0d		beq $1be7			beq 	_PGMDDelete
.1bda					_PGMDNext:
.1bda	18		clc				clc
.1bdb	b2 20		lda ($20)			lda 	(zTemp1)
.1bdd	65 20		adc $20				adc 	zTemp1
.1bdf	85 20		sta $20				sta 	zTemp1
.1be1	90 e1		bcc $1bc4			bcc 	_PGMDLoop
.1be3	e6 21		inc $21				inc 	zTemp1+1
.1be5	80 dd		bra $1bc4			bra 	_PGMDLoop
.1be7					_PGMDDelete:
.1be7	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1be9	a8		tay				tay
.1bea					_PGMDCopy:
.1bea	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1bec	92 20		sta ($20)			sta 	(zTemp1)
.1bee	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1bf0	c5 1e		cmp $1e				cmp 	zTemp0
.1bf2	d0 07		bne $1bfb			bne 	_PGMDNext2
.1bf4	a5 21		lda $21				lda 	zTemp1+1
.1bf6	c5 1f		cmp $1f				cmp 	zTemp0+1
.1bf8	18		clc				clc
.1bf9	f0 08		beq $1c03			beq 	_PGMDExit
.1bfb					_PGMDNext2:
.1bfb	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1bfd	d0 eb		bne $1bea			bne 	_PGMDCopy
.1bff	e6 21		inc $21				inc 	zTemp1+1
.1c01	80 e7		bra $1bea			bra 	_PGMDCopy
.1c03					_PGMDExit:
.1c03	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1c04					PGMInsertLine:
.1c04	20 6d 1c	jsr $1c6d			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c07	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c09	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c0c	85 21		sta $21				sta 	zTemp1+1
.1c0e					_PGMILoop:
.1c0e	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c10	f0 1c		beq $1c2e			beq 	_PGMIInsert
.1c12	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c14	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c16	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c19	c8		iny				iny
.1c1a	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c1c	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1c1f	b0 0d		bcs $1c2e			bcs 	_PGMIInsert 				; insert here.
.1c21	18		clc				clc
.1c22	b2 20		lda ($20)			lda 	(zTemp1)
.1c24	65 20		adc $20				adc 	zTemp1
.1c26	85 20		sta $20				sta 	zTemp1
.1c28	90 e4		bcc $1c0e			bcc 	_PGMILoop
.1c2a	e6 21		inc $21				inc 	zTemp1+1
.1c2c	80 e0		bra $1c0e			bra 	_PGMILoop
.1c2e					_PGMIInsert:
.1c2e	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1c31					_PGMIInsertLoop:
.1c31	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c33	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1c35	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1c37	c5 1e		cmp $1e				cmp 	zTemp0
.1c39	d0 06		bne $1c41			bne 	_PGMINext
.1c3b	a5 21		lda $21				lda 	zTemp1+1
.1c3d	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c3f	f0 0a		beq $1c4b			beq 	_PGMIInserted
.1c41					_PGMINext:
.1c41	a5 1e		lda $1e				lda 	zTemp0
.1c43	d0 02		bne $1c47			bne 	_PGMINoBorrow
.1c45	c6 1f		dec $1f				dec 	zTemp0+1
.1c47					_PGMINoBorrow:
.1c47	c6 1e		dec $1e				dec 	zTemp0
.1c49	80 e6		bra $1c31			bra 	_PGMIInsertLoop
.1c4b					_PGMIInserted:
.1c4b	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1c4d					_PGMICopyLoop:
.1c4d	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1c50	91 20		sta ($20),y			sta 	(zTemp1),y
.1c52	c8		iny				iny
.1c53	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1c56	d0 f5		bne $1c4d			bne 	_PGMICopyLoop
.1c58	18		clc				clc
.1c59	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1c5a					PGMSetBaseAddress:
.1c5a	8e 46 03	stx $0346			stx 	PGMBaseHigh
.1c5d	8c 47 03	sty $0347			sty 	PGMEndMemoryHigh
.1c60	60		rts				rts
.1c61					PGMNewProgram:
.1c61	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1c63	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c66	85 1f		sta $1f				sta 	zTemp0+1
.1c68	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1c6a	92 1e		sta ($1e)			sta 	(zTemp0)
.1c6c	60		rts				rts
.1c6d					PGMEndProgram:
.1c6d	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1c6f	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c72	85 1f		sta $1f				sta 	zTemp0+1
.1c74					_PGMEPLoop:
.1c74	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c76	f0 0b		beq $1c83			beq 	_PGMEPExit
.1c78	18		clc				clc
.1c79	65 1e		adc $1e				adc 	zTemp0
.1c7b	85 1e		sta $1e				sta 	zTemp0
.1c7d	90 f5		bcc $1c74			bcc 	_PGMEPLoop
.1c7f	e6 1f		inc $1f				inc 	zTemp0+1
.1c81	80 f1		bra $1c74			bra 	_PGMEPLoop
.1c83					_PGMEPExit:
.1c83	60		rts				rts
.0346					PGMBaseHigh:
>0346							.fill 	1
.0347					PGMEndMemoryHigh:
>0347							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1c84					TOKResetElement:
.1c84	9c 48 03	stz $0348			stz 	TOKElement
.1c87	60		rts				rts
.1c88					TOKWriteElement:
.1c88	da		phx				phx
.1c89	ae 48 03	ldx $0348			ldx 	TOKElement
.1c8c	9d 49 03	sta $0349,x			sta 	TOKElementText,x
.1c8f	9e 4a 03	stz $034a,x			stz 	TOKElementText+1,x
.1c92	fa		plx				plx
.1c93	ee 48 03	inc $0348			inc 	TOKElement
.1c96	60		rts				rts
.0348					TOKElement:
>0348							.fill 	1
.0349					TOKElementText:
>0349							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1c97					TOKTokeniseConstant:
.1c97	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1c99	48		pha				pha 								; save on stack
.1c9a	29 c0		and #$c0			and 	#$C0
.1c9c	05 0d		ora $0d				ora 	IFR0+IM1
.1c9e	05 0e		ora $0e				ora 	IFR0+IM2
.1ca0	f0 10		beq $1cb2			beq 	_TTCLess
.1ca2	da		phx				phx
.1ca3	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1ca5					_TTCShiftRight:
.1ca5	46 0e		lsr $0e				lsr 	IFR0+IM2
.1ca7	66 0d		ror $0d				ror 	IFR0+IM1
.1ca9	66 0c		ror $0c				ror 	IFR0+IM0
.1cab	ca		dex				dex
.1cac	d0 f7		bne $1ca5			bne 	_TTCShiftRight
.1cae	fa		plx				plx
.1caf	20 97 1c	jsr $1c97			jsr 	TOKTokeniseConstant
.1cb2					_TTCLess:
.1cb2	68		pla				pla
.1cb3	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1cb5	20 4e 1d	jsr $1d4e			jsr 	TOKWriteA
.1cb8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1cb9					TOKTokeniseDecimals:
.1cb9	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext 					; consume the .
.1cbc	20 88 1e	jsr $1e88			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1cbf	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1cc1	20 4e 1d	jsr $1d4e			jsr 	TOKWriteA
.1cc4	20 c9 1c	jsr $1cc9			jsr 	TOKOutputElementBuffer 		; then the buffer
.1cc7	18		clc				clc
.1cc8	60		rts				rts
.1cc9					TOKOutputElementBuffer:
.1cc9	ad 48 03	lda $0348			lda 	TOKElement 					; get count and write that
.1ccc	20 4e 1d	jsr $1d4e			jsr 	TOKWriteA
.1ccf	a8		tay				tay 								; put in Y
.1cd0	f0 0c		beq $1cde			beq 	_TOEExit 					; exit if empty which is okay.
.1cd2	a2 01		ldx #$01			ldx 	#1
.1cd4					_TOELoop:
.1cd4	bd 48 03	lda $0348,x			lda 	TOKElement,x
.1cd7	20 4e 1d	jsr $1d4e			jsr 	TOKWriteA
.1cda	e8		inx				inx
.1cdb	88		dey				dey
.1cdc	d0 f6		bne $1cd4			bne 	_TOELoop
.1cde					_TOEExit:
.1cde	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1cdf					TOKTokenise:
.1cdf	8c 49 04	sty $0449			sty 	TOKDataSource+1 			; save source routine pointer
.1ce2	8e 48 04	stx $0448			stx 	TOKDataSource
.1ce5	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1ce7	8d 4a 04	sta $044a			sta 	TOKIsFirstElement
.1cea	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1cec	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1cef					_TOKMainLoop:
.1cef	20 5a 1d	jsr $1d5a			jsr 	TOKGet 						; what follows.
.1cf2	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1cf4	f0 4f		beq $1d45			beq 	_TOKExit
.1cf6	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1cf8	d0 05		bne $1cff			bne 	_TOKElement
.1cfa	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext
.1cfd	80 f0		bra $1cef			bra 	_TOKMainLoop
.1cff					_TOKElement:
.1cff	20 06 1f	jsr $1f06			jsr 	TOKIsDigit 					; is it 0..9
.1d02	90 0a		bcc $1d0e			bcc 	_TOKNotDigit
.1d04	20 5f 1e	jsr $1e5f			jsr 	TOKTokeniseInteger 			; get integer
.1d07	b0 43		bcs $1d4c			bcs 	_TOKFail 					; did it fail ?
.1d09	9c 4a 04	stz $044a			stz 	TOKIsFirstElement 			; clear first element flag
.1d0c	80 e1		bra $1cef			bra 	_TOKMainLoop
.1d0e					_TOKNotDigit:
.1d0e	9c 4a 04	stz $044a			stz 	TOKIsFirstElement 			; clear first element flag
.1d11	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d13	d0 07		bne $1d1c			bne 	_TOKNotHex
.1d15	20 a7 1d	jsr $1da7			jsr 	TOKTokeniseHexadecimal
.1d18	b0 32		bcs $1d4c			bcs 	_TOKFail
.1d1a	80 d3		bra $1cef			bra 	_TOKMainLoop
.1d1c					_TOKNotHex:
.1d1c	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1d1e	d0 07		bne $1d27			bne 	_TOKNotDecimal
.1d20	20 b9 1c	jsr $1cb9			jsr 	TOKTokeniseDecimals
.1d23	b0 27		bcs $1d4c			bcs 	_TOKFail
.1d25	80 c8		bra $1cef			bra 	_TOKMainLoop
.1d27					_TOKNotDecimal:
.1d27	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1d29	d0 07		bne $1d32			bne 	_TOKNotString
.1d2b	20 cd 1e	jsr $1ecd			jsr 	TOKTokeniseString
.1d2e	b0 1c		bcs $1d4c			bcs 	_TOKFail
.1d30	80 bd		bra $1cef			bra 	_TOKMainLoop
.1d32					_TOKNotString:
.1d32	20 23 1f	jsr $1f23			jsr 	TOKIsAlpha 					; identifier ?
.1d35	b0 07		bcs $1d3e			bcs 	_TOKIdentifier
.1d37	20 9c 1e	jsr $1e9c			jsr 	TOKTokenisePunctuation 		; punctuation
.1d3a	b0 10		bcs $1d4c			bcs 	_TOKFail
.1d3c	80 b1		bra $1cef			bra 	_TOKMainLoop
.1d3e					_TOKIdentifier:
.1d3e	20 e1 1d	jsr $1de1			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1d41	b0 09		bcs $1d4c			bcs 	_TOKFail
.1d43	80 aa		bra $1cef			bra 	_TOKMainLoop
.1d45					_TOKExit:
.1d45	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1d47	20 4e 1d	jsr $1d4e			jsr 	TOKWriteA
.1d4a	18		clc				clc									; return with carry set.
.1d4b	60		rts				rts
.1d4c					_TOKFail:
.1d4c	38		sec				sec
.1d4d	60		rts				rts
.1d4e					TOKWriteA:
.1d4e	da		phx				phx
.1d4f	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1d52	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1d55	fa		plx				plx
.1d56	ee 37 02	inc $0237			inc 	TOKLineSize
.1d59	60		rts				rts
.1d5a					TOKGet:
.1d5a	18		clc				clc
.1d5b	6c 48 04	jmp ($0448)			jmp 	(TOKDataSource)
.1d5e					TOKGetNext:
.1d5e	38		sec				sec
.1d5f	6c 48 04	jmp ($0448)			jmp 	(TOKDataSource)
.0448					TOKDataSource:
>0448							.fill 	2
.044a					TOKIsFirstElement:
>044a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1d62					TOKFindToken:
.1d62	a2 db		ldx #$db			ldx 	#StandardTokens & $FF 		; do this table
.1d64	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1d66	20 71 1d	jsr $1d71			jsr 	TOKFindTokenXY 				; find it, or not
.1d69	90 04		bcc $1d6f			bcc 	_TOKFTFail
.1d6b	a2 00		ldx #$00			ldx 	#0
.1d6d	38		sec				sec
.1d6e	60		rts				rts
.1d6f					_TOKFTFail
.1d6f	18		clc				clc
.1d70	60		rts				rts
.1d71					TOKFindTokenXY:
.1d71	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1d73	84 1f		sty $1f				sty 	zTemp0+1
.1d75	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1d77	8d 4b 04	sta $044b			sta 	TOKCurrent
.1d7a					_TOKFindLoop:
.1d7a	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1d7c	18		clc				clc 		 						; clear carry in case of fail
.1d7d	30 17		bmi $1d96			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1d7f	cd 48 03	cmp $0348			cmp 	TOKElement 					; compare against the element length
.1d82	d0 13		bne $1d97			bne 	_TOKNext 					; different, try next.
.1d84	aa		tax				tax 								; number of chars to compare.
.1d85	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1d87					_TOKCompare:
.1d87	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1d89	d9 48 03	cmp $0348,y			cmp 	TOKElementText-1,y
.1d8c	d0 09		bne $1d97			bne 	_TOKNext 					; different ? try next
.1d8e	c8		iny				iny 								; compare next two
.1d8f	ca		dex				dex
.1d90	d0 f5		bne $1d87			bne 	_TOKCompare 				; until done X characters.
.1d92	38		sec				sec
.1d93	ad 4b 04	lda $044b			lda 	TOKCurrent 					; return current ID.
.1d96					_TOKExit:
.1d96	60		rts				rts
.1d97					_TOKNext:
.1d97	ee 4b 04	inc $044b			inc 	TOKCurrent 					; increment token #
.1d9a	38		sec				sec 								; add length+1 to ptr
.1d9b	b2 1e		lda ($1e)			lda 	(zTemp0)
.1d9d	65 1e		adc $1e				adc 	zTemp0
.1d9f	85 1e		sta $1e				sta 	zTemp0
.1da1	90 d7		bcc $1d7a			bcc 	_TOKFindLoop
.1da3	e6 1f		inc $1f				inc 	zTemp0+1
.1da5	80 d3		bra $1d7a			bra 	_TOKFindLoop
.044b					TOKCurrent:
>044b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1da7					TOKTokeniseHexadecimal:
.1da7	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext 					; consume the $
.1daa	a2 0c		ldx #$0c			ldx 	#IFR0
.1dac	20 73 2a	jsr $2a73			jsr 	IFloatSetZero 				; set R0 = 0
.1daf					_TTHLoop:
.1daf	20 5a 1d	jsr $1d5a			jsr 	TOKGet 						; keep getting and copying while numeric.
.1db2	20 30 1f	jsr $1f30			jsr 	TOKIsHexadecimal
.1db5	90 20		bcc $1dd7			bcc 	_TTHDone
.1db7	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1db9	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1dbc	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1dbf	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1dc2	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.1dc5	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext
.1dc8	38		sec				sec 								; convert to decimal.
.1dc9	e9 30		sbc #$30			sbc 	#48
.1dcb	c9 0a		cmp #$0a			cmp 	#10
.1dcd	90 02		bcc $1dd1			bcc 	_TTHNotAlpha
.1dcf	e9 07		sbc #$07			sbc 	#7
.1dd1					_TTHNotAlpha:
.1dd1	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1dd3	85 0c		sta $0c				sta 	IFR0+IM0
.1dd5	80 d8		bra $1daf			bra 	_TTHLoop
.1dd7					_TTHDone:
.1dd7	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1dd9	20 4e 1d	jsr $1d4e			jsr 	TOKWriteA
.1ddc	20 97 1c	jsr $1c97			jsr 	TOKTokeniseConstant 		; write integer out.
.1ddf	18		clc				clc
.1de0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1de1					TOKTokeniseIdentifier:
.1de1	20 84 1c	jsr $1c84			jsr 	TOKResetElement 			; extract an identifier
.1de4					_TOKGetIdentifier:
.1de4	20 5a 1d	jsr $1d5a			jsr 	TOKGet
.1de7	20 f0 1e	jsr $1ef0			jsr 	TOKToUpper
.1dea	20 12 1f	jsr $1f12			jsr 	TOKIsIdentifierElement
.1ded	90 08		bcc $1df7			bcc 	_TOKEndIdent
.1def	20 88 1c	jsr $1c88			jsr		TOKWriteElement
.1df2	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext
.1df5	80 ed		bra $1de4			bra 	_TOKGetIdentifier
.1df7					_TOKEndIdent:
.1df7	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1df9	d0 06		bne $1e01			bne 	_TOKNotString
.1dfb	20 88 1c	jsr $1c88			jsr 	TOKWriteElement 			; add it
.1dfe	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext 					; consume it
.1e01					_TOKNotString:
.1e01	20 5a 1d	jsr $1d5a			jsr 	TOKGet 						; finally check for (
.1e04	c9 28		cmp #$28			cmp 	#"("
.1e06	d0 06		bne $1e0e			bne 	_TOKNoArray
.1e08	20 88 1c	jsr $1c88			jsr 	TOKWriteElement 			; add it
.1e0b	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext 					; consume it
.1e0e					_TOKNoArray:
.1e0e	20 62 1d	jsr $1d62			jsr 	TOKFindToken 				; find it
.1e11	90 05		bcc $1e18			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e13	20 4e 1d	jsr $1d4e			jsr 	TOKWriteA
.1e16	18		clc				clc
.1e17	60		rts				rts
.1e18					_TOKIsVariable:
.1e18	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1e1a					_TOKOutputBuffer:
.1e1a	bd 49 03	lda $0349,x			lda 	TOKElementText,x 			; output it translated.
.1e1d	20 46 1e	jsr $1e46			jsr 	TOKTranslateIdentifier
.1e20	20 4e 1d	jsr $1d4e			jsr 	TOKWriteA
.1e23	e8		inx				inx
.1e24	bd 49 03	lda $0349,x			lda 	TOKElementText,x
.1e27	20 12 1f	jsr $1f12			jsr 	TOKIsIdentifierElement
.1e2a	b0 ee		bcs $1e1a			bcs 	_TOKOutputBuffer
.1e2c	a8		tay				tay 								; last char in Y
.1e2d	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1e2f	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1e31	f0 0e		beq $1e41			beq 	_TOKIVExit
.1e33	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1e35	d0 04		bne $1e3b			bne 	_TOKIVCheckArray 			; no, check for (
.1e37	1a		inc a				inc 	a 							; token is $7D
.1e38	bc 4a 03	ldy $034a,x			ldy 	TOKElementText+1,x 			; get next one.
.1e3b					_TOKIVCheckArray:
.1e3b	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1e3d	d0 02		bne $1e41			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1e3f	1a		inc a				inc 	a
.1e40	1a		inc a				inc 	a
.1e41					_TOKIVExit:
.1e41	20 4e 1d	jsr $1d4e			jsr 	TOKWriteA 					; ending token
.1e44	18		clc				clc
.1e45	60		rts				rts
.1e46					TOKTranslateIdentifier:
.1e46	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1e48	f0 0f		beq $1e59			beq 	_TTI64
.1e4a	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1e4c	f0 0e		beq $1e5c			beq 	_TTI65
.1e4e	38		sec				sec
.1e4f	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1e51	10 03		bpl $1e56			bpl 	_TTIExit
.1e53	18		clc				clc 								; map 09 onto 26-35
.1e54	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1e56					_TTIExit:
.1e56	09 40		ora #$40			ora 	#$40 						; correct range.
.1e58	60		rts				rts
.1e59	a9 64		lda #$64	_TTI64:	lda 	#$64
.1e5b	60		rts				rts
.1e5c	a9 65		lda #$65	_TTI65:	lda 	#$65
.1e5e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1e5f					TOKTokeniseInteger:
.1e5f	20 88 1e	jsr $1e88			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e62	a2 49		ldx #$49			ldx 	#TOKElementText & $FF
.1e64	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1e66	ad 48 03	lda $0348			lda		TOKElement
.1e69	20 d7 28	jsr $28d7			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1e6c	ad 4a 04	lda $044a			lda 	TOKIsFirstElement 			; first element ?
.1e6f	f0 12		beq $1e83			beq 	_TOKNotLineNumber
.1e71	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1e73	d0 0c		bne $1e81			bne 	_TOKBadLineNumeber
.1e75	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1e77	8d 38 02	sta $0238			sta 	TOKLineNumber
.1e7a	a5 0d		lda $0d				lda 	IFR0+IM1
.1e7c	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1e7f	18		clc				clc
.1e80	60		rts				rts
.1e81					_TOKBadLineNumeber:
.1e81	38		sec				sec
.1e82	60		rts				rts
.1e83					_TOKNotLineNumber:
.1e83	20 97 1c	jsr $1c97			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1e86	18		clc				clc
.1e87	60		rts				rts
.1e88					TOKExtractInteger:
.1e88	20 84 1c	jsr $1c84			jsr 	TOKResetElement 			; restart
.1e8b					_TTILoop:
.1e8b	20 5a 1d	jsr $1d5a			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e8e	20 06 1f	jsr $1f06			jsr 	TOKIsDigit
.1e91	90 08		bcc $1e9b			bcc 	_TOKEIExit
.1e93	20 88 1c	jsr $1c88			jsr 	TOKWriteElement
.1e96	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext
.1e99	80 f0		bra $1e8b			bra 	_TTILoop
.1e9b					_TOKEIExit:
.1e9b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1e9c					TOKTokenisePunctuation:
.1e9c	20 84 1c	jsr $1c84			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1e9f	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext
.1ea2	20 88 1c	jsr $1c88			jsr 	TOKWriteElement
.1ea5	20 5a 1d	jsr $1d5a			jsr 	TOKGet 						; what follows ?
.1ea8	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1eaa	f0 10		beq $1ebc			beq 	_TTPOne
.1eac	20 1a 1f	jsr $1f1a			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1eaf	b0 0b		bcs $1ebc			bcs 	_TTPOne 					; these speed things up a bit.
.1eb1	20 88 1c	jsr $1c88			jsr 	TOKWriteElement 			; this is what we will search for.
.1eb4	20 62 1d	jsr $1d62			jsr 	TOKFindToken
.1eb7	b0 0a		bcs $1ec3			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1eb9	ce 48 03	dec $0348			dec 	TOKElement 					; make it a single character
.1ebc					_TTPOne:
.1ebc	20 62 1d	jsr $1d62			jsr 	TOKFindToken 				; look for one character punctuation
.1ebf	b0 07		bcs $1ec8			bcs 	_TTPOutputExit 				; we found it
.1ec1	38		sec				sec 								; not recognised.
.1ec2	60		rts				rts
.1ec3					_TTPConsumeExit:
.1ec3	48		pha				pha
.1ec4	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext 					; get the 2nd char out.
.1ec7	68		pla				pla
.1ec8					_TTPOutputExit:
.1ec8	20 4e 1d	jsr $1d4e			jsr  	TOKWriteA 					; write token out
.1ecb	18		clc				clc
.1ecc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1ecd					TOKTokeniseString:
.1ecd	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext 					; consume the "
.1ed0	20 84 1c	jsr $1c84			jsr 	TOKResetElement 			; start getting the string
.1ed3					_TOKTSLoop:
.1ed3	20 5a 1d	jsr $1d5a			jsr 	TOKGet 						; check EOL
.1ed6	c9 00		cmp #$00			cmp 	#0
.1ed8	f0 0c		beq $1ee6			beq 	_TOKTSExit
.1eda	20 5e 1d	jsr $1d5e			jsr 	TOKGetNext 					; get and consume
.1edd	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1edf	f0 05		beq $1ee6			beq 	_TOKTSExit
.1ee1	20 88 1c	jsr $1c88			jsr 	TOKWriteElement
.1ee4	80 ed		bra $1ed3			bra 	_TOKTSLoop
.1ee6					_TOKTSExit:
.1ee6	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1ee8	20 4e 1d	jsr $1d4e			jsr 	TOKWriteA
.1eeb	20 c9 1c	jsr $1cc9			jsr 	TOKOutputElementBuffer
.1eee	18		clc				clc
.1eef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1ef0					TOKToUpper:
.1ef0	c9 61		cmp #$61			cmp 	#"a"
.1ef2	90 06		bcc $1efa			bcc 	_TTUNotLower
.1ef4	c9 7b		cmp #$7b			cmp 	#"z"+1
.1ef6	b0 02		bcs $1efa			bcs 	_TTUNotLower
.1ef8	49 20		eor #$20			eor 	#$20
.1efa					_TTUNotLower:
.1efa	60		rts				rts
.1efb					TOKToLower:
.1efb	c9 41		cmp #$41			cmp 	#"A"
.1efd	90 06		bcc $1f05			bcc 	_TTUNotUpper
.1eff	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f01	b0 02		bcs $1f05			bcs 	_TTUNotUpper
.1f03	49 20		eor #$20			eor 	#$20
.1f05					_TTUNotUpper:
.1f05	60		rts				rts
.1f06					TOKIsDigit:
.1f06	c9 30		cmp #$30			cmp 	#"0"
.1f08	90 06		bcc $1f10			bcc 	TOKFail
.1f0a	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f0c	b0 02		bcs $1f10			bcs 	TOKFail
.1f0e					TOKSucceed:
.1f0e	38		sec				sec
.1f0f	60		rts				rts
.1f10					TOKFail:
.1f10	18		clc				clc
.1f11	60		rts				rts
.1f12					TOKIsIdentifierElement:
.1f12	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f14	f0 f8		beq $1f0e			beq 	TOKSucceed
.1f16	c9 5f		cmp #$5f			cmp 	#"_"
.1f18	f0 f4		beq $1f0e			beq 	TOKSucceed 					; else fall through to alphanumeric
.1f1a					TOKIsAlphaNumeric:
.1f1a	20 23 1f	jsr $1f23			jsr 	TOKIsAlpha
.1f1d	b0 ef		bcs $1f0e			bcs 	TOKSucceed
.1f1f	20 06 1f	jsr $1f06			jsr 	TOKIsDigit
.1f22	60		rts				rts
.1f23					TOKIsAlpha:
.1f23	20 f0 1e	jsr $1ef0			jsr 	TOKToUpper
.1f26	c9 41		cmp #$41			cmp 	#"A"
.1f28	90 e6		bcc $1f10			bcc 	TOKFail
.1f2a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f2c	b0 e2		bcs $1f10			bcs 	TOKFail
.1f2e	80 de		bra $1f0e			bra 	TOKSucceed
.1f30					TOKIsHexadecimal:
.1f30	20 06 1f	jsr $1f06			jsr		TOKIsDigit
.1f33	b0 d9		bcs $1f0e			bcs 	TOKSucceed
.1f35	20 23 1f	jsr $1f23			jsr 	TOKIsAlpha
.1f38	90 d6		bcc $1f10			bcc 	TOKFail
.1f3a	c9 47		cmp #$47			cmp 	#"F"+1
.1f3c	b0 d2		bcs $1f10			bcs 	TOKFail
.1f3e	80 ce		bra $1f0e			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.1f40					Command_DO:
.1f40	a9 22		lda #$22			lda 	#STK_DO
.1f42	20 9b 21	jsr $219b			jsr 	StackOpen
.1f45	20 c5 21	jsr $21c5			jsr 	STKSaveCodePosition 		; save loop position
.1f48	60		rts				rts
.1f49					Command_EXIT:
.1f49	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.1f4b	20 bd 21	jsr $21bd			jsr 	StackCheckFrame
.1f4e	20 af 21	jsr $21af			jsr 	StackClose 					; close it
.1f51	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.1f53	aa		tax				tax
.1f54	20 a7 1f	jsr $1fa7			jsr 	ScanForward
.1f57	60		rts				rts
.1f58					Command_LOOP:
.1f58	a9 22		lda #$22			lda 	#STK_DO
.1f5a	20 bd 21	jsr $21bd			jsr 	StackCheckFrame
.1f5d	20 d7 21	jsr $21d7			jsr 	STKLoadCodePosition 		; loop back
.1f60	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.1f61					IfCommand:
.1f61	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 				; Get the if test.
.1f64	b1 1c		lda ($1c),y			lda 	(codePtr),y					; what follows ?
.1f66	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.1f68	d0 0a		bne $1f74			bne 	_IfStructured 				; we still support it.
.1f6a	c8		iny				iny 								; consume THEN
.1f6b	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero 			; is it zero
.1f6e	f0 01		beq $1f71			beq 	_IfFail 					; if fail, go to next line
.1f70	60		rts				rts 								; if THEN just continue
.1f71					_IfFail:
.1f71	4c 73 12	jmp $1273			jmp 	RUNEndOfLine
.1f74					_IfStructured:
.1f74	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero 			; is it zero
.1f77	d0 07		bne $1f80			bne 	_IfExit 					; if not, then continue normally.
.1f79	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.1f7b	a2 85		ldx #$85			ldx 	#PR_ENDIF
.1f7d	20 a7 1f	jsr $1fa7			jsr 	ScanForward 				; and run from there
.1f80					_IfExit:
.1f80	60		rts				rts
.1f81					ElseCode:
.1f81	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.1f83	aa		tax				tax 								; so just go to the structure exit
.1f84	20 a7 1f	jsr $1fa7			jsr 	ScanForward
.1f87	60		rts				rts
.1f88					EndIf:
.1f88	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.1f89					Command_REPEAT:
.1f89	a9 02		lda #$02			lda 	#STK_REPEAT
.1f8b	20 9b 21	jsr $219b			jsr 	StackOpen
.1f8e	20 c5 21	jsr $21c5			jsr 	STKSaveCodePosition 		; save loop position
.1f91	60		rts				rts
.1f92					Command_UNTIL:
.1f92	a9 02		lda #$02			lda 	#STK_REPEAT
.1f94	20 bd 21	jsr $21bd			jsr 	StackCheckFrame
.1f97	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 				; work out the test
.1f9a	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero 			; check if zero
.1f9d	f0 04		beq $1fa3			beq 	_CULoopBack 				; if so keep looping
.1f9f	20 af 21	jsr $21af			jsr 	StackClose		 			; return
.1fa2	60		rts				rts
.1fa3					_CULoopBack:
.1fa3	20 d7 21	jsr $21d7			jsr 	STKLoadCodePosition 		; loop back
.1fa6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scan.asm

.1fa7					ScanForward:
.1fa7	85 1e		sta $1e				sta 	zTemp0 						; save scan options in zTemp0
.1fa9	86 1f		stx $1f				stx 	zTemp0+1
.1fab	64 20		stz $20				stz 	zTemp1 						; clear structure count.
.1fad					_ScanForwardLoop:
.1fad	a5 20		lda $20				lda 	zTemp1 						; if structure count non zero, don't check for end.
.1faf	d0 0a		bne $1fbb			bne 	_ScanNoCheck
.1fb1	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; reached either target token.
.1fb3	c5 1e		cmp $1e				cmp 	zTemp0
.1fb5	f0 49		beq $2000			beq 	_ScanExit
.1fb7	c5 1f		cmp $1f				cmp 	zTemp0+1
.1fb9	f0 45		beq $2000			beq 	_ScanExit
.1fbb					_ScanNoCheck:
.1fbb	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get the token and consume it.
.1fbd	c8		iny				iny
.1fbe	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.1fc0	f0 37		beq $1ff9			beq		_ScanDataItem
.1fc2	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1fc4	f0 33		beq $1ff9			beq 	_ScanDataItem
.1fc6	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.1fc8	f0 1b		beq $1fe5			beq 	_ScanNextLine
.1fca	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.1fcc	d0 01		bne $1fcf			bne 	_ScanNoShift
.1fce	c8		iny				iny
.1fcf					_ScanNoShift:
.1fcf	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.1fd1	b0 da		bcs $1fad			bcs 	_ScanForwardLoop
.1fd3	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.1fd5	90 d6		bcc $1fad			bcc 	_ScanForwardLoop
.1fd7	aa		tax				tax 								; access the table to get the adjustment.
.1fd8	18		clc				clc
.1fd9	a5 20		lda $20				lda 	zTemp1 						; add it to structure count.
.1fdb	7d 4f 17	adc $174f,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.1fde	85 20		sta $20				sta 	zTemp1
.1fe0	10 cb		bpl $1fad			bpl		_ScanForwardLoop 			; error if -ve ?
.1fe2	4c b1 20	jmp $20b1		jmp	ErrorV_structure
.1fe5					_ScanNextLine:
.1fe5	18		clc				clc	 								; forward to next line.
.1fe6	b2 1c		lda ($1c)			lda 	(codePtr)
.1fe8	65 1c		adc $1c				adc 	codePtr
.1fea	85 1c		sta $1c				sta 	codePtr
.1fec	90 02		bcc $1ff0			bcc 	_ScanNoCarry
.1fee	e6 1d		inc $1d				inc 	codePtr+1
.1ff0					_ScanNoCarry:
.1ff0	a0 03		ldy #$03			ldy 	#3
.1ff2	b2 1c		lda ($1c)			lda 	(codePtr) 					; off end of program ?
.1ff4	d0 b7		bne $1fad			bne 	_ScanForwardLoop
.1ff6	4c b1 20	jmp $20b1		jmp	ErrorV_structure
.1ff9					_ScanDataItem:
.1ff9	98		tya				tya
.1ffa	38		sec				sec
.1ffb	71 1c		adc ($1c),y			adc 	(codePtr),y
.1ffd	a8		tay				tay
.1ffe	80 ad		bra $1fad			bra 	_ScanForwardLoop
.2000					_ScanExit:
.2000	c8		iny				iny 								; consume final token.
.2001	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2002					Command_WHILE:
.2002	5a		phy				phy 								; save position of the test
.2003	20 7a 14	jsr $147a			jsr 	EXPEvalNumber 				; work out the while test.
.2006	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero 			; check if zero
.2009	f0 0e		beq $2019			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.200b	98		tya				tya 								; position *after* test.
.200c	7a		ply				ply 								; restore position before test, at WHILE
.200d	88		dey				dey 								; so we execute the WHILE command again.
.200e	48		pha				pha 								; push after test on the stack
.200f	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2011	20 9b 21	jsr $219b			jsr 	StackOpen
.2014	20 c5 21	jsr $21c5			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2017	7a		ply				ply 								; restore the position *after* the test
.2018	60		rts				rts
.2019					_WHExitLoop:
.2019	68		pla				pla 								; throw post loop position
.201a	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.201c	aa		tax				tax
.201d	20 a7 1f	jsr $1fa7			jsr 	ScanForward
.2020	60		rts				rts
.2021					Command_WEND:
.2021	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2023	20 bd 21	jsr $21bd			jsr 	StackCheckFrame
.2026	20 d7 21	jsr $21d7			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2029	20 af 21	jsr $21af			jsr 	StackClose		 			; erase the frame
.202c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.202d					ErrorV_syntax:
.202d	20 55 2b	jsr $2b55		jsr	ErrorHandler
>2030	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>2038	72 72 6f 72 00
.203d					ErrorV_range:
.203d	20 55 2b	jsr $2b55		jsr	ErrorHandler
>2040	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>2048	61 6e 67 65 00
.204d					ErrorV_value:
.204d	20 55 2b	jsr $2b55		jsr	ErrorHandler
>2050	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>2058	65 00
.205a					ErrorV_type:
.205a	20 55 2b	jsr $2b55		jsr	ErrorHandler
>205d	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>2065	6d 61 74 63 68 00
.206b					ErrorV_unimplemented:
.206b	20 55 2b	jsr $2b55		jsr	ErrorHandler
>206e	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>2076	65 6d 65 6e 74 65 64 00
.207e					ErrorV_assert:
.207e	20 55 2b	jsr $2b55		jsr	ErrorHandler
>2081	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>2089	61 69 6c 00
.208d					ErrorV_internal:
.208d	20 55 2b	jsr $2b55		jsr	ErrorHandler
>2090	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>2098	20 45 72 72 6f 72 00
.209f					ErrorV_divzero:
.209f	20 55 2b	jsr $2b55		jsr	ErrorHandler
>20a2	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>20aa	79 20 5a 65 72 6f 00
.20b1					ErrorV_structure:
.20b1	20 55 2b	jsr $2b55		jsr	ErrorHandler
>20b4	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>20bc	65 20 49 6d 62 61 6c 61 6e 63 65 00
.20c8					ErrorV_stop:
.20c8	20 55 2b	jsr $2b55		jsr	ErrorHandler
>20cb	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>20d3	53 74 6f 70 70 65 64 00
.20db					ErrorV_data:
.20db	20 55 2b	jsr $2b55		jsr	ErrorHandler
>20de	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>20e6	61 74 61 00
.20ea					ErrorV_redefine:
.20ea	20 55 2b	jsr $2b55		jsr	ErrorHandler
>20ed	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>20f5	64 65 66 69 6e 65 64 00
.20fd					ErrorV_index:
.20fd	20 55 2b	jsr $2b55		jsr	ErrorHandler
>2100	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>2108	79 20 49 6e 64 65 78 00
.2110					ErrorV_memory:
.2110	20 55 2b	jsr $2b55		jsr	ErrorHandler
>2113	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>211b	65 6d 6f 72 79 00
.2121					ErrorV_uninitialised:
.2121	20 55 2b	jsr $2b55		jsr	ErrorHandler
>2124	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>212c	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.213b					ErrorV_string:
.213b	20 55 2b	jsr $2b55		jsr	ErrorHandler
>213e	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>2146	6e 67 20 4c 65 6e 67 74 68 00
.2150					ErrorV_variable:
.2150	20 55 2b	jsr $2b55		jsr	ErrorHandler
>2153	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>215b	20 4d 69 73 73 69 6e 67 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2164					ERRCheckLParen:
.2164	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2166	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2168	d0 18		bne $2182			bne 	ERRSyntaxError
.216a	c8		iny				iny
.216b	60		rts				rts
.216c					ERRCheckRParen:
.216c	b1 1c		lda ($1c),y			lda 	(codePtr),y
.216e	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2170	d0 10		bne $2182			bne 	ERRSyntaxError
.2172	c8		iny				iny
.2173	60		rts				rts
.2174					ERRCheckComma:
.2174	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2176	c9 99		cmp #$99			cmp 	#PR_COMMA
.2178	d0 08		bne $2182			bne 	ERRSyntaxError
.217a	c8		iny				iny
.217b	60		rts				rts
.217c					ERRCheckA:
.217c	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.217e	d0 02		bne $2182			bne 	ERRSyntaxError
.2180	c8		iny				iny
.2181	60		rts				rts
.2182					ERRSyntaxError:
.2182	4c 2d 20	jmp $202d		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/bytes.asm

.2185					StackPushByte:
.2185	48		pha				pha 								; save byte on stack
.2186	a5 26		lda $26				lda 	basicStack 					; decrement basic stack pointer
.2188	d0 02		bne $218c			bne 	_SPBNoBorrow
.218a	c6 27		dec $27				dec 	basicStack+1 				; borrow
.218c					_SPBNoBorrow:
.218c	c6 26		dec $26				dec 	basicStack
.218e	68		pla				pla 								; get back and write
.218f	92 26		sta ($26)			sta 	(basicStack)
.2191	60		rts				rts
.2192					StackPopByte:
.2192	b2 26		lda ($26)			lda 	(basicStack) 				; bump the stack pointer.
.2194	e6 26		inc $26				inc 	basicStack
.2196	d0 02		bne $219a			bne 	_SPBNoCarry
.2198	e6 27		inc $27				inc 	basicStack+1
.219a					_SPBNoCarry:
.219a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.219b					StackOpen:
.219b	48		pha				pha 								; save frame byte
.219c	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.219e	0a		asl a				asl 	a 							; claim twice this for storage
.219f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.21a1	38		sec				sec 								; so basically subtracting from
.21a2	65 26		adc $26				adc 	basicStack 	 				; basicStack
.21a4	85 26		sta $26				sta 	basicStack
.21a6	b0 03		bcs $21ab			bcs 	_SONoBorrow
>21a8	db						.byte 	$DB
.21a9	c6 27		dec $27				dec 	basicStack+1
.21ab					_SONoBorrow:
.21ab	68		pla				pla 								; get marker back and write at TOS
.21ac	92 26		sta ($26)			sta 	(basicStack)
.21ae	60		rts				rts
.21af					StackClose:
.21af	b2 26		lda ($26)			lda 	(basicStack) 				; get TOS marker
.21b1	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.21b3	0a		asl a				asl 	a 							; claim twice this.
.21b4	65 26		adc $26				adc 	basicStack 					; add to the stack pointer.
.21b6	85 26		sta $26				sta 	basicStack
.21b8	90 02		bcc $21bc			bcc 	_SCExit
.21ba	e6 27		inc $27				inc 	basicStack+1
.21bc					_SCExit:
.21bc	60		rts				rts
.21bd					StackCheckFrame:
.21bd	d2 26		cmp ($26)			cmp		(basicStack) 				; check  frames match
.21bf	d0 01		bne $21c2			bne 	_SCFError 					; different, we have structures mixed up
.21c1	60		rts				rts
.21c2					_SCFError:
.21c2	4c b1 20	jmp $20b1		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.21c5					STKSaveCodePosition:
.21c5	5a		phy				phy
.21c6	98		tya				tya 								; save Y at offset 1.
.21c7	a0 01		ldy #$01			ldy 	#1
.21c9	91 26		sta ($26),y			sta 	(basicStack),y
.21cb	a5 1c		lda $1c				lda 	codePtr 					; save code (low) at 2
.21cd	c8		iny				iny
.21ce	91 26		sta ($26),y			sta 	(basicStack),y
.21d0	a5 1d		lda $1d				lda 	codePtr+1 					; save code (high) at 3
.21d2	c8		iny				iny
.21d3	91 26		sta ($26),y			sta 	(basicStack),y
.21d5	7a		ply				ply
.21d6	60		rts				rts
.21d7					STKLoadCodePosition:
.21d7	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.21d9	b1 26		lda ($26),y			lda 	(basicStack),y
.21db	85 1d		sta $1d				sta 	codePtr+1
.21dd	88		dey				dey
.21de	b1 26		lda ($26),y			lda 	(basicStack),y
.21e0	85 1c		sta $1c				sta 	codePtr
.21e2	88		dey				dey
.21e3	b1 26		lda ($26),y			lda 	(basicStack),y 				; line offset to Y
.21e5	a8		tay				tay
.21e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.21e7					StackReset:
.21e7	48		pha				pha 								; save top of memory
.21e8	3a		dec a				dec 	a  							; end of stack = previous byte
.21e9	85 27		sta $27				sta 	basicStack+1
.21eb	a9 ff		lda #$ff			lda 	#$FF
.21ed	85 26		sta $26				sta 	basicStack
.21ef	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.21f1	92 26		sta ($26)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.21f3	68		pla				pla 								; allocate pages for stack.
.21f4	38		sec				sec
.21f5	e9 02		sbc #$02			sbc 	#2
.21f7	60		rts				rts
.0026					basicStack:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.21f8					StringConcrete:
.21f8	5a		phy				phy 								; save position on stack
.21f9	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.21fb	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.21fd	b0 41		bcs $2240			bcs 	_SALengthError
.21ff	18		clc				clc 								; length of the new string
.2200	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2202	90 02		bcc $2206			bcc 	_SAHaveLength
.2204	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2206					_SAHaveLength:
.2206	48		pha				pha 								; save length to be allocated for concreting.
.2207	38		sec				sec
.2208	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.220a	6d 4d 04	adc $044d			adc 	stringMemory
.220d	8d 4d 04	sta $044d			sta 	stringMemory
.2210	85 22		sta $22				sta 	zTemp2 						; update storage address
.2212	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2214	6d 4e 04	adc $044e			adc 	stringMemory+1
.2217	8d 4e 04	sta $044e			sta 	stringMemory+1
.221a	85 23		sta $23				sta 	zTemp2+1
.221c	68		pla				pla 								; save length allocated in +0
.221d	92 22		sta ($22)			sta 	(zTemp2)
.221f	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2221	a0 01		ldy #$01			ldy 	#1
.2223	91 22		sta ($22),y			sta 	(zTemp2),y
.2225					_SACopyNewString:
.2225	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.2227	a0 02		ldy #$02			ldy 	#2
.2229	91 22		sta ($22),y			sta 	(zTemp2),y
.222b	aa		tax				tax 								; bytes to copy
.222c	f0 0c		beq $223a			beq 	_SACopyExit
.222e	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2230					_SACopyNSLoop:
.2230	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.2232	c8		iny				iny 								; write two on in string storage
.2233	c8		iny				iny
.2234	91 22		sta ($22),y			sta 	(zTemp2),y
.2236	88		dey				dey
.2237	ca		dex				dex									; until copied all the string lengths.
.2238	d0 f6		bne $2230			bne 	_SACopyNSLoop
.223a					_SACopyExit:
.223a	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.223c	a5 22		lda $22				lda 	zTemp2
.223e	7a		ply				ply
.223f	60		rts				rts
.2240					_SALengthError:
.2240	4c 3b 21	jmp $213b		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2243					StringSystemInitialise:
.2243	3a		dec a				dec 	a 							; make last byte of previous page.
.2244	8d 4e 04	sta $044e			sta 	stringMemory+1
.2247	85 1f		sta $1f				sta 	zTemp0+1
.2249	a9 ff		lda #$ff			lda 	#$FF
.224b	8d 4d 04	sta $044d			sta 	stringMemory
.224e	85 1e		sta $1e				sta 	zTemp0
.2250	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2252	92 1e		sta ($1e)			sta 	(zTemp0)
.2254	60		rts				rts
.2255					StringSpaceInitialise:
.2255	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2257	8d 4c 04	sta $044c			sta 	stringInitialised
.225a	ad 4d 04	lda $044d			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.225d	8d 4f 04	sta $044f			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2260	ad 4e 04	lda $044e			lda 	stringMemory+1
.2263	3a		dec a				dec 	a
.2264	8d 50 04	sta $0450			sta 	stringTempPointer+1
.2267	60		rts				rts
.2268					StringTempAllocate:
.2268	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.226a	b0 2e		bcs $229a			bcs 	_STALength
.226c	2c 4c 04	bit $044c			bit 	stringInitialised 			; already initialised
.226f	30 05		bmi $2276			bmi 	_STAAllocate
.2271	48		pha				pha 								; save value to subtract.
.2272	20 55 22	jsr $2255			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2275	68		pla				pla 								; restore it
.2276					_STAAllocate:
.2276	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2278	18		clc				clc  								; deliberate allows one more
.2279	6d 4f 04	adc $044f			adc 	stringTempPointer 			; subtract from temp pointer
.227c	8d 4f 04	sta $044f			sta 	stringTempPointer
.227f	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.2281	85 28		sta $28				sta 	zsTemp 						; and zsTemp
.2283	ad 50 04	lda $0450			lda 	stringTempPointer+1
.2286	69 ff		adc #$ff			adc 	#$FF
.2288	8d 50 04	sta $0450			sta 	stringTempPointer+1
.228b	85 29		sta $29				sta 	zsTemp+1
.228d	85 0d		sta $0d				sta 	IFR0+IM1
.228f	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2291	a9 80		lda #$80			lda 	#$80
.2293	85 0f		sta $0f				sta 	IFR0+IExp
.2295	a9 00		lda #$00			lda 	#0 							; clear the target string
.2297	92 28		sta ($28)			sta 	(zsTemp)
.2299	60		rts				rts
.229a					_STALength:
.229a	4c 3b 21	jmp $213b		jmp	ErrorV_string
.229d					StringTempWrite:
.229d	5a		phy				phy
.229e	48		pha				pha
.229f	b2 28		lda ($28)			lda 	(zsTemp)
.22a1	1a		inc a				inc 	a
.22a2	92 28		sta ($28)			sta 	(zsTemp)
.22a4	a8		tay				tay
.22a5	68		pla				pla
.22a6	91 28		sta ($28),y			sta 	(zsTemp),y
.22a8	7a		ply				ply
.22a9	60		rts				rts
.0028					zsTemp:
>0028							.fill 	2
.044c					stringInitialised:
>044c							.fill 	1
.044d					stringMemory:
>044d							.fill 	2
.044f					stringTempPointer:
>044f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.22aa					VARArrayLookup:
.22aa	85 1e		sta $1e				sta 	zTemp0 						; save the array address pointer in zTemp0
.22ac	86 1f		stx $1f				stx 	zTemp0+1
.22ae	b2 1e		lda ($1e)			lda 	(zTemp0)
.22b0	48		pha				pha
.22b1	5a		phy				phy
.22b2	a0 01		ldy #$01			ldy 	#1
.22b4	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.22b6	7a		ply				ply
.22b7	48		pha				pha
.22b8	20 8c 14	jsr $148c			jsr 	EXPEvalInteger16 			; R0 now contains the index
.22bb	68		pla				pla 								; array address to zTemp0
.22bc	85 1f		sta $1f				sta 	zTemp0+1
.22be	68		pla				pla
.22bf	85 1e		sta $1e				sta 	zTemp0
.22c1	5a		phy				phy 								; save codePtr position.
.22c2	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.22c4	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.22c6	48		pha				pha 								; save bit 15 on stack.
.22c7	29 7f		and #$7f			and 	#$7F
.22c9	85 20		sta $20				sta 	zTemp1
.22cb	a5 0c		lda $0c				lda 	IFR0+IM0 					; check range of index
.22cd	d2 1e		cmp ($1e)			cmp 	(zTemp0)
.22cf	a5 0d		lda $0d				lda 	IFR0+IM1
.22d1	e5 20		sbc $20				sbc 	zTemp1
.22d3	b0 3a		bcs $230f			bcs 	_VALIndex
.22d5	a5 0d		lda $0d				lda 	IFR0+IM1  					; sanity check
.22d7	c9 40		cmp #$40			cmp 	#$40
.22d9	b0 34		bcs $230f			bcs 	_VALIndex
.22db	06 0c		asl $0c				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.22dd	26 0d		rol $0d				rol 	IFR0+IM1
.22df	fa		plx				plx 								; get msb of size -> X
.22e0	30 04		bmi $22e6			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.22e2	06 0c		asl $0c				asl 	IFR0+IM0
.22e4	26 0d		rol $0d				rol 	IFR0+IM1
.22e6					_VARNotX4:
.22e6	18		clc				clc 								; add the two for the size bytes
.22e7	a5 0c		lda $0c				lda 	IFR0+IM0
.22e9	69 02		adc #$02			adc 	#2
.22eb	85 0c		sta $0c				sta 	IFR0+IM0
.22ed	90 02		bcc $22f1			bcc 	_VARNoCarry1
.22ef	e6 0d		inc $0d				inc 	IFR0+IM1
.22f1					_VARNoCarry1:
.22f1	18		clc				clc 								; calculate the element address and push to stack.
.22f2	a5 0c		lda $0c				lda 	IFR0+IM0
.22f4	65 1e		adc $1e				adc 	zTemp0
.22f6	48		pha				pha
.22f7	a5 0d		lda $0d				lda 	IFR0+IM1
.22f9	65 1f		adc $1f				adc 	zTemp0+1
.22fb	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.22fd	30 04		bmi $2303			bmi 	_VARHasSubLevel
.22ff	aa		tax				tax 								; address in XA
.2300	68		pla				pla
.2301	7a		ply				ply 								; restore Y and exit
.2302	60		rts				rts
.2303					_VARHasSubLevel:
.2303	aa		tax				tax 								; get link address in XA
.2304	68		pla				pla
.2305	7a		ply				ply 								; restore code position.
.2306	48		pha				pha
.2307	20 74 21	jsr $2174			jsr 	ERRCheckComma 				; comma required.
.230a	68		pla				pla
.230b	20 aa 22	jsr $22aa			jsr 	VARArrayLookup 				; call it recursively
.230e	60		rts				rts
.230f					_VALIndex:
.230f	4c fd 20	jmp $20fd		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2312					VARCreate:
.2312	5a		phy				phy
.2313	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2315	a2 00		ldx #$00			ldx 	#0
.2317	20 32 10	jsr $1032			jsr 	AllocateMemory
.231a	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.231c	86 21		stx $21				stx 	zTemp1+1
.231e	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2320	ad 53 04	lda $0453			lda 	VARHash
.2323	91 20		sta ($20),y			sta 	(zTemp1),y
.2325	c8		iny				iny 								; put address of name into +3,+4
.2326	ad 51 04	lda $0451			lda 	VARNameAddress
.2329	91 20		sta ($20),y			sta 	(zTemp1),y
.232b	c8		iny				iny
.232c	ad 52 04	lda $0452			lda 	VARNameAddress+1
.232f	91 20		sta ($20),y			sta 	(zTemp1),y
.2331	ad 54 04	lda $0454			lda 	VARType
.2334	29 01		and #$01			and 	#1
.2336	f0 06		beq $233e			beq 	_CVNotString
.2338	a0 08		ldy #$08			ldy 	#5+3
.233a	a9 80		lda #$80			lda 	#$80
.233c	91 20		sta ($20),y			sta 	(zTemp1),y
.233e					_CVNotString:
.233e	ad 75 04	lda $0475			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2341	85 1e		sta $1e				sta 	zTemp0
.2343	ad 76 04	lda $0476			lda 	VARHashEntry+1
.2346	85 1f		sta $1f				sta 	zTemp0+1
.2348	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.234a	b2 1e		lda ($1e)			lda 	(zTemp0)
.234c	92 20		sta ($20)			sta 	(zTemp1)
.234e	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2350	91 20		sta ($20),y			sta 	(zTemp1),y
.2352	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.2354	92 1e		sta ($1e)			sta 	(zTemp0)
.2356	a5 21		lda $21				lda 	zTemp1+1
.2358	91 1e		sta ($1e),y			sta 	(zTemp0),y
.235a	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.235c	a6 21		ldx $21				ldx 	zTemp1+1
.235e	18		clc				clc 								; add 5 to point to the data.
.235f	69 05		adc #$05			adc 	#5
.2361	90 01		bcc $2364			bcc 	_VCNoCarry
.2363	e8		inx				inx
.2364					_VCNoCarry:
.2364	7a		ply				ply
.2365	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2366					VARFind:
.2366	5a		phy				phy
.2367	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2369	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.236b	85 21		sta $21				sta 	zTemp1+1
.236d	f0 1c		beq $238b			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.236f	b2 1e		lda ($1e)			lda 	(zTemp0)
.2371	85 20		sta $20				sta 	zTemp1
.2373					_VFLoop:
.2373	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2375	b1 20		lda ($20),y			lda 	(zTemp1),y
.2377	cd 53 04	cmp $0453			cmp 	VARHash
.237a	f0 12		beq $238e			beq 	_VFHashesMatch 				; if so, check the name.
.237c					_VFNext:
.237c	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.237e	aa		tax				tax
.237f	a0 01		ldy #$01			ldy 	#1
.2381	b1 20		lda ($20),y			lda 	(zTemp1),y
.2383	85 21		sta $21				sta 	zTemp1+1
.2385	86 20		stx $20				stx 	zTemp1
.2387	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2389	d0 e8		bne $2373			bne 	_VFLoop
.238b					_VFExitFail:
.238b	7a		ply				ply
.238c	18		clc				clc
.238d	60		rts				rts
.238e					_VFHashesMatch:
.238e	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2390	b1 20		lda ($20),y			lda 	(zTemp1),y
.2392	85 22		sta $22				sta 	zTemp2
.2394	c8		iny				iny
.2395	b1 20		lda ($20),y			lda 	(zTemp1),y
.2397	85 23		sta $23				sta 	zTemp2+1
.2399	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.239b					_VFNameCompLoop:
.239b	c8		iny				iny 								; char at a time
.239c	b9 55 04	lda $0455,y			lda 	VARBuffer,y
.239f	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.23a1	d0 d9		bne $237c			bne 	_VFNext						; next entry if different.
.23a3	c9 7c		cmp #$7c			cmp 	#$7C
.23a5	90 f4		bcc $239b			bcc 	_VFNameCompLoop 			; until done the whole lot.
.23a7	18		clc				clc
.23a8	a5 20		lda $20				lda 	zTemp1
.23aa	a6 21		ldx $21				ldx 	zTemp1+1
.23ac	69 05		adc #$05			adc 	#5
.23ae	90 01		bcc $23b1			bcc 	_VFNNoCarry
.23b0	e8		inx				inx
.23b1					_VFNNoCarry:
.23b1	7a		ply				ply
.23b2	38		sec				sec
.23b3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.23b4					VARGetInfo:
.23b4	98		tya				tya 								; calculate the address of the identifier start.
.23b5	18		clc				clc
.23b6	65 1c		adc $1c				adc 	codePtr
.23b8	8d 51 04	sta $0451			sta 	VARNameAddress
.23bb	a5 1d		lda $1d				lda 	codePtr+1
.23bd	69 00		adc #$00			adc 	#0
.23bf	8d 52 04	sta $0452			sta 	VARNameAddress+1
.23c2	9c 53 04	stz $0453			stz 	VARHash
.23c5	a2 00		ldx #$00			ldx 	#0
.23c7					_VARCopyName:
.23c7	18		clc				clc 								; update the sum hash.
.23c8	ad 53 04	lda $0453			lda 	VARHash
.23cb	71 1c		adc ($1c),y			adc 	(codePtr),y
.23cd	8d 53 04	sta $0453			sta 	VARHash
.23d0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.23d2	c8		iny				iny
.23d3	9d 55 04	sta $0455,x			sta 	VARBuffer,x
.23d6	e8		inx				inx
.23d7	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.23d9	90 ec		bcc $23c7			bcc 	_VARCopyName
.23db	8d 54 04	sta $0454			sta 	VARType 					; save type byte
.23de	29 03		and #$03			and 	#3 							; type is 0-3
.23e0	0a		asl a				asl 	a
.23e1	0a		asl a				asl 	a
.23e2	85 1e		sta $1e				sta 	zTemp0
.23e4	ad 53 04	lda $0453			lda 	VARHash 					; force into range of hash entries per type.
.23e7	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.23e9	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.23eb	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.23ec	69 77		adc #$77			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.23ee	85 1e		sta $1e				sta 	zTemp0
.23f0	8d 75 04	sta $0475			sta 	VARHashEntry
.23f3	a9 04		lda #$04			lda 	#VARHashTables >> 8
.23f5	69 00		adc #$00			adc 	#0
.23f7	85 1f		sta $1f				sta 	zTemp0+1
.23f9	8d 76 04	sta $0476			sta 	VARHashEntry+1
.23fc	60		rts				rts
.23fd					VARClearHashTables:
.23fd	a2 00		ldx #$00			ldx 	#0
.23ff					_VCHRLoop:
.23ff	a9 00		lda #$00			lda 	#0
.2401	9d 77 04	sta $0477,x			sta 	VARHashTables,x
.2404	e8		inx				inx
.2405	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2407	d0 f6		bne $23ff			bne 	_VCHRLoop
.2409	60		rts				rts
.0451					VARNameAddress:
>0451							.fill 	2
.0453					VARHash:
>0453							.fill 	1
.0454					VARType:
>0454							.fill 	1
.0455					VARBuffer:
>0455							.fill 	32
.0475					VARHashEntry:
>0475							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0477					VARHashTables:
>0477							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.240a					VARCheckSimple:
.240a	aa		tax				tax 								; save in X
.240b	b1 1c		lda ($1c),y			lda 	(codePtr),y
.240d	c9 7c		cmp #$7c			cmp 	#$7C
.240f	d0 15		bne $2426			bne 	_VCSComplex
.2411	c8		iny				iny 								; consume the second byte, the type.
.2412	8a		txa				txa  								; character (40-7F) x 4
.2413	0a		asl a				asl 	a
.2414	0a		asl a				asl  	a
.2415	18		clc				clc
.2416	69 97		adc #$97			adc 	#FastVariables & $FF
.2418	85 0c		sta $0c				sta 	IFR0+IM0
.241a	a9 04		lda #$04			lda 	#FastVariables >> 8
.241c	69 00		adc #$00			adc 	#0
.241e	85 0d		sta $0d				sta 	IFR0+IM1
.2420	64 0e		stz $0e				stz 	IFR0+IM2
.2422	64 0f		stz $0f				stz 	IFR0+IExp
.2424	38		sec				sec 								; it's a reference
.2425	60		rts				rts
.2426					_VCSComplex:
.2426	88		dey				dey	 								; extract information.
.2427	20 b4 23	jsr $23b4			jsr 	VARGetInfo
.242a	20 66 23	jsr $2366			jsr 	VARFind 					; search for variable
.242d	b0 0a		bcs $2439			bcs 	_VCSHaveVariable
.242f	ad 54 04	lda $0454			lda 	VARType 					; error if arrays, cannot autocreate
.2432	29 02		and #$02			and 	#2
.2434	d0 25		bne $245b			bne 	_VCNoCreate
.2436	20 12 23	jsr $2312			jsr 	VARCreate 					; create variable
.2439					_VCSHaveVariable:
.2439	48		pha				pha 								; save LSB on the stack
.243a	ad 54 04	lda $0454			lda 	VARType 					; get var type, and shift bit 1 into carry
.243d	6a		ror a				ror 	a
.243e	6a		ror a				ror 	a
.243f	68		pla				pla 								; restore LSB
.2440	90 08		bcc $244a			bcc 	_VCSNotArray 				; skip if not an array
.2442	20 aa 22	jsr $22aa			jsr 	VARArrayLookup 				; look for subscripts.
.2445	48		pha				pha 								; check )
.2446	20 6c 21	jsr $216c			jsr 	ERRCheckRParen
.2449	68		pla				pla
.244a					_VCSNotArray:
.244a	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.244c	85 0c		sta $0c				sta 	IFR0+IM0
.244e	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.2450	ad 54 04	lda $0454			lda 	VARType 					; number/string bit into carry
.2453	6a		ror a				ror 	a
.2454	a9 00		lda #$00			lda 	#0
.2456	6a		ror a				ror 	a 							; now $00 or $80
.2457	85 0f		sta $0f				sta 	IFR0+IExp
.2459	38		sec				sec 								; it's a reference
.245a	60		rts				rts
.245b					_VCNoCreate:
.245b	4c 21 21	jmp $2121		jmp	ErrorV_uninitialised
.0497					FastVariables:
>0497							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.245e					IFInitialise:
.245e	9c 07 05	stz $0507			stz 	IFStackIndex
.2461	60		rts				rts
.2462					IFloatSubtract:
.2462	da		phx				phx
.2463	a2 0c		ldx #$0c			ldx 	#IFR0
.2465	20 7e 2a	jsr $2a7e			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2468	fa		plx				plx
.2469					IFloatAdd:
.2469	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.246b	05 0f		ora $0f				ora 	IFR0+IExp
.246d	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.246f	d0 4e		bne $24bf			bne 	_IFloatAddDecimals 			; decimal version.
.2471					_IFAddSubMantissa:
.2471	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2473	45 0f		eor $0f				eor 	IFR0+IExp
.2475	29 40		and #$40			and 	#IFSign
.2477	d0 21		bne $249a			bne 	_IFloatSubMantissa
.2479	18		clc				clc 								; do the actual addition
.247a	a5 0c		lda $0c			lda 	IFR0+IM0
.247c	75 00		adc $00,x		adc 		IM0,x
.247e	85 0c		sta $0c			sta 	IFR0+IM0
.2480	a5 0d		lda $0d			lda 	IFR0+IM1
.2482	75 01		adc $01,x		adc 		IM1,x
.2484	85 0d		sta $0d			sta 	IFR0+IM1
.2486	a5 0e		lda $0e			lda 	IFR0+IM2
.2488	75 02		adc $02,x		adc 		IM2,x
.248a	85 0e		sta $0e			sta 	IFR0+IM2
.248c	10 29		bpl $24b7			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.248e	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.2490	20 a2 2a	jsr $2aa2			jsr 	IFloatShiftRight
.2493	20 cc 2a	jsr $2acc			jsr 	IFloatIncExponent
.2496	d0 1f		bne $24b7			bne 	_IFloatAddExit
.2498	38		sec				sec 								; overflowed numerically.
.2499	60		rts				rts
.249a					_IFloatSubMantissa:
.249a	38		sec				sec 								; do the subtraction R0-Rx
.249b	a5 0c		lda $0c			lda 	IFR0+IM0
.249d	f5 00		sbc $00,x		sbc 		IM0,x
.249f	85 0c		sta $0c			sta 	IFR0+IM0
.24a1	a5 0d		lda $0d			lda 	IFR0+IM1
.24a3	f5 01		sbc $01,x		sbc 		IM1,x
.24a5	85 0d		sta $0d			sta 	IFR0+IM1
.24a7	a5 0e		lda $0e			lda 	IFR0+IM2
.24a9	f5 02		sbc $02,x		sbc 		IM2,x
.24ab	85 0e		sta $0e			sta 	IFR0+IM2
.24ad	b0 08		bcs $24b7			bcs 	_IFloatAddExit 				; no borrow so we are done.
.24af	a2 0c		ldx #$0c			ldx 	#IFR0
.24b1	20 86 2a	jsr $2a86			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.24b4	20 7e 2a	jsr $2a7e			jsr 	IFloatNegate 				; negate
.24b7					_IFloatAddExit:
.24b7	18		clc				clc
.24b8	60		rts				rts
.24b9					_IFloatZeroAdd:
.24b9	fa		plx				plx 								; return this value in R0
.24ba	20 04 2a	jsr $2a04			jsr 	IFloatCopyFromRegister
.24bd	18		clc				clc
.24be	60		rts				rts
.24bf					_IFloatAddDecimals:
.24bf	20 6c 2a	jsr $2a6c			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.24c2	f0 f3		beq $24b7			beq 	_IFloatAddExit
.24c4	20 aa 2a	jsr $2aaa			jsr 	IFloatNormalise 			; normalise RX
.24c7	da		phx				phx 								; normalise R0
.24c8	a2 0c		ldx #$0c			ldx 	#IFR0
.24ca	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero
.24cd	f0 ea		beq $24b9			beq 	_IFloatZeroAdd
.24cf	20 aa 2a	jsr $2aaa			jsr 	IFloatNormalise
.24d2	fa		plx				plx
.24d3	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.24d5	29 3f		and #$3f			and 	#IFXMask
.24d7	38		sec				sec
.24d8	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.24da	85 0a		sta $0a				sta 	iTemp0
.24dc	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.24de	29 3f		and #$3f			and 	#IFXMask
.24e0	38		sec				sec
.24e1	e9 20		sbc #$20			sbc 	#$20
.24e3	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.24e5	b0 02		bcs $24e9			bcs 	_IFloatHaveLarger
.24e7	a5 0a		lda $0a				lda 	iTemp0
.24e9					_IFloatHaveLarger:
.24e9	18		clc				clc 								; get the actual one back.
.24ea	69 20		adc #$20			adc 	#$20 						; shift both to that.
.24ec	20 f9 24	jsr $24f9			jsr 	_IFShiftXToA
.24ef	da		phx				phx
.24f0	a2 0c		ldx #$0c			ldx 	#IFR0
.24f2	20 f9 24	jsr $24f9			jsr 	_IFShiftXToA
.24f5	fa		plx				plx
.24f6	4c 71 24	jmp $2471			jmp 	_IFAddSubMantissa 			; do the adding bit.
.24f9					_IFShiftXToA:
.24f9	8d ff 04	sta $04ff			sta 	IFTarget
.24fc	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero 			; check adding zero ?
.24ff	f0 11		beq $2512			beq 	_IFSXExit
.2501					_IFSXLoop:
.2501	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2503	29 3f		and #$3f			and 	#IFXMask
.2505	cd ff 04	cmp $04ff			cmp 	IFTarget
.2508	f0 08		beq $2512			beq 	_IFSXExit
.250a	20 a2 2a	jsr $2aa2			jsr 	IFloatShiftRight
.250d	20 cc 2a	jsr $2acc			jsr 	IFloatIncExponent
.2510	80 ef		bra $2501			bra 	_IFSXLoop
.2512					_IFSXExit:
.2512	60		rts				rts
.04ff					IFTarget:
>04ff							.fill 	1
.2513					IFloatMultiply:
.2513	8e ff 04	stx $04ff			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2516	20 ce 25	jsr $25ce			jsr 	IFCalculateNewSign
.2519	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.251b	05 0f		ora $0f				ora 	IFR0+IExp
.251d	29 3f		and #$3f			and 	#IFXMask
.251f	15 01		ora $01,x			ora 	IM1,x
.2521	05 0d		ora $0d				ora 	IFR0+IM1
.2523	15 02		ora $02,x			ora 	IM2,x
.2525	05 0e		ora $0e				ora 	IFR0+IM2
.2527	d0 0a		bne $2533			bne 	_IFMStandard
.2529	20 4f 2a	jsr $2a4f			jsr 	IFloatMultiply8BitRx
.252c	ad 01 05	lda $0501			lda 	IFNewSign
.252f	85 0f		sta $0f				sta 	IFR0+IExp
.2531	18		clc				clc
.2532	60		rts				rts
.2533					_IFMStandard:
.2533	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2535	20 c5 25	jsr $25c5			jsr 	IFMSignExtend
.2538	8d 00 05	sta $0500			sta 	IFNewExponent
.253b	a5 0f		lda $0f				lda 	IFR0+IExp
.253d	20 c5 25	jsr $25c5			jsr 	IFMSignExtend
.2540	18		clc				clc
.2541	6d 00 05	adc $0500			adc 	IFNewExponent
.2544	8d 00 05	sta $0500			sta 	IFNewExponent
.2547	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2549	20 15 2a	jsr $2a15			jsr 	IFloatCopyToRegister
.254c	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.254e	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.2551					_IFMLoop:
.2551	a2 18		ldx #$18			ldx 	#IFRTemp
.2553	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero
.2556	f0 3a		beq $2592			beq 	_IFMExit
.2558	ae ff 04	ldx $04ff			ldx 	IFTarget 					; look at adder MSB
.255b	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.255d	10 03		bpl $2562			bpl	 	_IFMTargetOkay
.255f	20 b6 25	jsr $25b6			jsr 	_IFMShiftAll
.2562					_IFMTargetOkay:
.2562	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2564	29 01		and #$01			and 	#1
.2566	f0 16		beq $257e			beq 	_IFMNoAdd
.2568	ae ff 04	ldx $04ff			ldx 	IFTarget 					; add adder
.256b	18		clc				clc
.256c	a5 0c		lda $0c			lda 	IFR0+IM0
.256e	75 00		adc $00,x		adc 		IM0,x
.2570	85 0c		sta $0c			sta 	IFR0+IM0
.2572	a5 0d		lda $0d			lda 	IFR0+IM1
.2574	75 01		adc $01,x		adc 		IM1,x
.2576	85 0d		sta $0d			sta 	IFR0+IM1
.2578	a5 0e		lda $0e			lda 	IFR0+IM2
.257a	75 02		adc $02,x		adc 		IM2,x
.257c	85 0e		sta $0e			sta 	IFR0+IM2
.257e					_IFMNoAdd:
.257e	a5 0e		lda $0e				lda 	IFR0+IM2
.2580	10 03		bpl $2585			bpl 	_IFMResultOkay
.2582	20 b6 25	jsr $25b6			jsr 	_IFMShiftAll
.2585					_IFMResultOkay:
.2585	a2 18		ldx #$18			ldx 	#IFRTemp
.2587	20 a2 2a	jsr $2aa2			jsr 	IFloatShiftRight
.258a	ae ff 04	ldx $04ff			ldx 	IFTarget
.258d	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.2590	80 bf		bra $2551			bra 	_IFMLoop
.2592					_IFMExit:
.2592	ad 00 05	lda $0500			lda 	IFNewExponent 				; validate new exponent.
.2595	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2597	90 0f		bcc $25a8			bcc 	_IFMOkay
.2599	c9 e0		cmp #$e0			cmp 	#$E0
.259b	b0 0b		bcs $25a8			bcs 	_IFMOkay
.259d	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.259f	f0 13		beq $25b4			beq 	_IFMError
.25a1	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.25a3	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.25a6	18		clc				clc
.25a7	60		rts				rts
.25a8					_IFMOkay:
.25a8	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.25aa	0d 01 05	ora $0501			ora 	IFNewSign
.25ad	85 0f		sta $0f				sta 	IFR0+IExp
.25af	18		clc				clc
.25b0	60		rts				rts
.25b1	4c ff ff	jmp $ffff			jmp 	$FFFF
.25b4					_IFMError:
.25b4	38		sec				sec
.25b5	60		rts				rts
.25b6					_IFMShiftAll:
.25b6	a2 0c		ldx #$0c			ldx 	#IFR0
.25b8	20 a2 2a	jsr $2aa2			jsr 	IFloatShiftRight
.25bb	ae ff 04	ldx $04ff			ldx 	IFTarget
.25be	20 a2 2a	jsr $2aa2			jsr 	IFloatShiftRight
.25c1	ee 00 05	inc $0500			inc 	IFNewExponent
.25c4	60		rts				rts
.25c5					IFMSignExtend:
.25c5	29 3f		and #$3f			and 	#IFXMask
.25c7	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.25c9	90 02		bcc $25cd			bcc 	_IFMNoSXX
.25cb	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.25cd					_IFMNoSXX:
.25cd	60		rts				rts
.25ce					IFCalculateNewSign:
.25ce	b5 03		lda $03,x			lda 	IExp,x
.25d0	45 0f		eor $0f				eor 	IFR0+IExp
.25d2	29 40		and #$40			and 	#IFSign
.25d4	8d 01 05	sta $0501			sta 	IFNewSign
.25d7	60		rts				rts
.0500					IFNewExponent:
>0500							.fill 	1
.0501					IFNewSign:
>0501							.fill 	1
.25d8					IFloatDivideInteger:
.25d8	20 f1 25	jsr $25f1			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.25db	b0 06		bcs $25e3			bcs 	_IFDIExit
.25dd	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.25df	20 04 2a	jsr $2a04			jsr 	IFloatCopyFromRegister
.25e2	18		clc				clc
.25e3					_IFDIExit:
.25e3	60		rts				rts
.25e4					IFloatModulusInteger:
.25e4	20 f1 25	jsr $25f1			jsr 	IFloatDivideIntegerCommon
.25e7	b0 07		bcs $25f0			bcs 	_IFMIExit
.25e9	ae ff 04	ldx $04ff			ldx 	IFTarget
.25ec	20 04 2a	jsr $2a04			jsr 	IFloatCopyFromRegister
.25ef	18		clc				clc
.25f0					_IFMIExit:
.25f0	60		rts				rts
.25f1					IFloatDivideIntegerCommon:
.25f1	8e ff 04	stx $04ff			stx 	IFTarget  					; this is s1, s0 = R0
.25f4	20 ce 25	jsr $25ce			jsr 	IFCalculateNewSign 			; calculate sign of result
.25f7	20 1f 26	jsr $261f			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.25fa	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.25fc	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero
.25ff	f0 1c		beq $261d			beq 	_IFDIDivZero
.2601	ae ff 04	ldx $04ff			ldx 	IFTarget 					; zero Rx (S1)
.2604	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.2607	5a		phy				phy
.2608	a0 18		ldy #$18			ldy 	#24
.260a					_IFDILoop:
.260a	20 30 26	jsr $2630			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.260d	20 3c 26	jsr $263c			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2610	88		dey				dey
.2611	d0 f7		bne $260a			bne 	_IFDILoop 					; do it 24 times
.2613	7a		ply				ply
.2614	ad 01 05	lda $0501			lda 	IFNewSign 					; set sign of result.
.2617	29 40		and #$40			and 	#IFSign
.2619	85 1b		sta $1b				sta 	IFRTemp+IExp
.261b	18		clc				clc 								; is okay.
.261c	60		rts				rts
.261d					_IFDIDivZero:
.261d	38		sec				sec
.261e	60		rts				rts
.261f					IFDCopyRXToRTemp:
.261f	b5 00		lda $00,x			lda 	IM0,x
.2621	85 18		sta $18				sta 	IFRTemp+IM0
.2623	b5 01		lda $01,x			lda 	IM1,x
.2625	85 19		sta $19				sta 	IFRTemp+IM1
.2627	b5 02		lda $02,x			lda 	IM2,x
.2629	85 1a		sta $1a				sta 	IFRTemp+IM2
.262b	b5 03		lda $03,x			lda 	IExp,x
.262d	85 1b		sta $1b				sta 	IFRTemp+IExp
.262f	60		rts				rts
.2630					IFDShiftSTempS1Left:
.2630	a2 18		ldx #$18			ldx 	#IFRTemp
.2632	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft
.2635	ae ff 04	ldx $04ff			ldx 	IFTarget
.2638	20 9b 2a	jsr $2a9b			jsr 	IFloatRotateLeft
.263b	60		rts				rts
.263c					IFDTrySubtract:
.263c	ae ff 04	ldx $04ff			ldx 	IFTarget 					; s1 = Rx
.263f	38		sec				sec 								; subtract, saving the results on the stack.
.2640	b5 00		lda $00,x			lda 	IM0,x
.2642	e5 0c		sbc $0c				sbc 	IFR0+IM0
.2644	48		pha				pha
.2645	b5 01		lda $01,x			lda 	IM1,x
.2647	e5 0d		sbc $0d				sbc 	IFR0+IM1
.2649	48		pha				pha
.264a	b5 02		lda $02,x			lda 	IM2,x
.264c	e5 0e		sbc $0e				sbc 	IFR0+IM2
.264e	b0 03		bcs $2653			bcs 	_IFDCanSubtract
.2650	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2651	68		pla				pla
.2652	60		rts				rts
.2653					_IFDCanSubtract:
.2653	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2655	68		pla				pla
.2656	95 01		sta $01,x			sta 	IM1,x
.2658	68		pla				pla
.2659	95 00		sta $00,x			sta 	IM0,x
.265b	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.265d	d0 06		bne $2665			bne 	_IFDCSExit
.265f	e6 19		inc $19				inc 	IFRTemp+IM1
.2661	d0 02		bne $2665			bne 	_IFDCSExit
.2663	e6 1a		inc $1a				inc 	IFRTemp+IM2
.2665					_IFDCSExit:
.2665	60		rts				rts
.2666					IFloatBitwiseAnd:
.2666	5a		phy				phy
.2667	20 ab 26	jsr $26ab			jsr 	IFPreProcessBitwise 		; set up everything.
.266a	d0 0f		bne $267b			bne 	_IFBAExit
.266c					_IFBALoop:
.266c	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.266f	35 00		and $00,x			and 	IM0,x
.2671	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2674	e8		inx				inx
.2675	c8		iny				iny
.2676	c0 03		cpy #$03			cpy 	#3
.2678	d0 f2		bne $266c			bne 	_IFBALoop
.267a	18		clc				clc
.267b					_IFBAExit:
.267b	7a		ply				ply
.267c	60		rts				rts
.267d					IFloatBitwiseOr:
.267d	5a		phy				phy
.267e	20 ab 26	jsr $26ab			jsr 	IFPreProcessBitwise 		; set up everything.
.2681	d0 0f		bne $2692			bne 	_IFBAExit
.2683					_IFBALoop:
.2683	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2686	15 00		ora $00,x			ora 	IM0,x
.2688	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.268b	e8		inx				inx
.268c	c8		iny				iny
.268d	c0 03		cpy #$03			cpy 	#3
.268f	d0 f2		bne $2683			bne 	_IFBALoop
.2691	18		clc				clc
.2692					_IFBAExit:
.2692	7a		ply				ply
.2693	60		rts				rts
.2694					IFloatBitwiseXor:
.2694	5a		phy				phy
.2695	20 ab 26	jsr $26ab			jsr 	IFPreProcessBitwise 		; set up everything.
.2698	d0 0f		bne $26a9			bne 	_IFBAExit
.269a					_IFBALoop:
.269a	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.269d	55 00		eor $00,x			eor 	IM0,x
.269f	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.26a2	e8		inx				inx
.26a3	c8		iny				iny
.26a4	c0 03		cpy #$03			cpy 	#3
.26a6	d0 f2		bne $269a			bne 	_IFBALoop
.26a8	18		clc				clc
.26a9					_IFBAExit:
.26a9	7a		ply				ply
.26aa	60		rts				rts
.26ab					IFPreProcessBitwise:
.26ab	a0 00		ldy #$00			ldy 	#0 							; set index.
.26ad	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.26af	15 03		ora $03,x			ora 	IExp,x
.26b1	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.26b3	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.26b5	38		sec				sec 								; carry set just in cases.
.26b6	60		rts				rts
.26b7					IFloatAbsoluteR0:
.26b7	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.26b9	29 bf		and #$bf			and 	#IFSign ^ 255
.26bb	85 0f		sta $0f				sta 	IFR0+IExp
.26bd	18		clc				clc
.26be	60		rts				rts
.26bf					IFloatSquareRootR0:
.26bf	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.26c1	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero
.26c4	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.26c6	29 40		and #$40			and 	#IFSign
.26c8	d0 2f		bne $26f9			bne 	_IFSRFail
.26ca	20 aa 2a	jsr $2aaa			jsr 	IFloatNormalise 			; it will work better !
.26cd	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.26cf	20 15 2a	jsr $2a15			jsr 	IFloatCopyToRegister
.26d2	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.26d4	20 c5 25	jsr $25c5			jsr 	IFMSignExtend 				; sign extended version of the exponent
.26d7	18		clc				clc
.26d8	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.26da	85 0f		sta $0f				sta 	IFR0+IExp
.26dc	4a		lsr a				lsr 	a 							; which we can halve.
.26dd	38		sec				sec 								; convert back
.26de	e9 17		sbc #$17			sbc 	#23
.26e0	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.26e2	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.26e4	20 fb 26	jsr $26fb			jsr 	_IFSRNewton
.26e7	20 fb 26	jsr $26fb			jsr 	_IFSRNewton
.26ea	20 fb 26	jsr $26fb			jsr 	_IFSRNewton
.26ed	20 fb 26	jsr $26fb			jsr 	_IFSRNewton
.26f0	18		clc				clc
.26f1	60		rts				rts
.26f2					_IFSRZero:
.26f2	a2 0c		ldx #$0c			ldx 	#IFR0
.26f4	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.26f7	18		clc				clc
.26f8	60		rts				rts
.26f9					_IFSRFail:
.26f9	38		sec				sec
.26fa	60		rts				rts
.26fb					_IFSRNewton:
.26fb	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.26fd	20 c2 29	jsr $29c2			jsr 	IFloatPushRx
.2700	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2702	20 c2 29	jsr $29c2			jsr 	IFloatPushRx
.2705	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.2707	20 96 27	jsr $2796			jsr 	IFloatDivideFloat
.270a	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.270c	20 e3 29	jsr $29e3			jsr 	IFloatPullRx
.270f	20 69 24	jsr $2469			jsr 	IFloatAdd 					; now guess + original/guess
.2712	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.2714	20 a2 2a	jsr $2aa2			jsr 	IFloatShiftRight
.2717	a2 10		ldx #$10			ldx 	#IFR1
.2719	20 e3 29	jsr $29e3			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.271c	60		rts				rts
.271d					IFloatFractionalR0:
.271d	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.271f	29 3f		and #$3f			and 	#IFXMask
.2721	f0 17		beq $273a			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2723	20 b7 26	jsr $26b7			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2726	a2 0c		ldx #$0c			ldx 	#IFR0
.2728	20 aa 2a	jsr $2aaa			jsr 	IFloatNormalise 			; normalise R0
.272b	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.272d	20 15 2a	jsr $2a15			jsr 	IFloatCopyToRegister
.2730	20 73 27	jsr $2773			jsr 	IFloatIntegerR0 			; take integer part of R0
.2733	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.2735	20 62 24	jsr $2462			jsr 	IFloatSubtract
.2738	80 05		bra $273f			bra 	_FIPExit
.273a					_FIPZero:
.273a	a2 0c		ldx #$0c			ldx 	#IFR0
.273c	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.273f					_FIPExit:
.273f	18		clc				clc
.2740	60		rts				rts
.2741					IFloatCompare:
.2741	20 62 24	jsr $2462			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2744	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2746	05 0f		ora $0f				ora 	IFR0+IExp
.2748	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.274a	29 3f		and #$3f			and 	#IFXMask
.274c	d0 19		bne $2767			bne 	_IFCNonInteger
.274e	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero 			; check if zero
.2751	f0 0f		beq $2762			beq 	_IFCZero
.2753					_IFCReturnSign:
.2753	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2755	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2757	48		pha				pha
.2758	a9 01		lda #$01			lda 	#1
.275a	20 75 2a	jsr $2a75			jsr 	IFloatSetByte 				; return to +1
.275d	68		pla				pla 								; sign bit back
.275e	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.2760	18		clc				clc
.2761	60		rts				rts
.2762					_IFCZero:
.2762	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.2765	18		clc				clc
.2766	60		rts				rts
.2767					_IFCNonInteger:
.2767	a5 0c		lda $0c				lda 	IFR0+IM0
.2769	29 00		and #$00			and		#$00
.276b	05 0d		ora $0d				ora 	IFR0+IM1
.276d	05 0e		ora $0e				ora 	IFR0+IM2
.276f	f0 f1		beq $2762			beq 	_IFCZero 					; near enough !
.2771	80 e0		bra $2753			bra 	_IFCReturnSign 				; return the sign of the difference.
.2773					IFloatIntegerR0:
.2773	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2775	29 3f		and #$3f			and 	#IFXMask
.2777	f0 1b		beq $2794			beq 	_FIPExit 					; if so do nothing
.2779	a2 0c		ldx #$0c			ldx 	#IFR0
.277b	20 aa 2a	jsr $2aaa			jsr 	IFloatNormalise 			; normalise
.277e	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero 			; is it zero ?
.2781	f0 0e		beq $2791			beq 	_FIPZero 					; if so return zero.
.2783					_FIPShift:
.2783	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2785	29 20		and #$20			and 	#$20 						; still -ve
.2787	f0 0b		beq $2794			beq 	_FIPExit
.2789	20 a2 2a	jsr $2aa2			jsr 	IFloatShiftRight 			; shift mantissa right
.278c	20 cc 2a	jsr $2acc			jsr 	IFloatIncExponent 			; bump exponent
.278f	80 f2		bra $2783			bra 	_FIPShift
.2791					_FIPZero:
.2791	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.2794					_FIPExit:
.2794	18		clc				clc
.2795	60		rts				rts
.2796					IFloatDivideFloat:
.2796	8e ff 04	stx $04ff			stx 	IFTarget  					; this is s1, s0 = R0
.2799	20 ce 25	jsr $25ce			jsr 	IFCalculateNewSign 			; calculate sign of result
.279c	20 aa 2a	jsr $2aaa			jsr 	IFloatNormalise 			; normalise RX
.279f	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.27a1	20 aa 2a	jsr $2aaa			jsr 	IFloatNormalise
.27a4	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero
.27a7	f0 56		beq $27ff			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.27a9	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.27ab	20 c5 25	jsr $25c5			jsr 	IFMSignExtend
.27ae	8d 00 05	sta $0500			sta 	IFNewExponent
.27b1	ae ff 04	ldx $04ff			ldx 	IFTarget 					; calculate s1.exponent
.27b4	b5 03		lda $03,x			lda 	IExp,x
.27b6	20 c5 25	jsr $25c5			jsr 	IFMSignExtend
.27b9	38		sec				sec
.27ba	ed 00 05	sbc $0500			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.27bd	38		sec				sec
.27be	e9 17		sbc #$17			sbc 	#23
.27c0	8d 00 05	sta $0500			sta 	IFNewExponent
.27c3	20 01 28	jsr $2801			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.27c6	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.27c8	10 08		bpl $27d2			bpl 	_IFDFNoShiftResult
.27ca	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.27cc	20 a2 2a	jsr $2aa2			jsr 	IFloatShiftRight
.27cf	ee 00 05	inc $0500			inc 	IFNewExponent
.27d2					_IFDFNoShiftResult:
.27d2	ad 00 05	lda $0500			lda 	IFNewExponent 				; underflow/overflow check.
.27d5	30 06		bmi $27dd			bmi 	_IFDFCheckUnderflow
.27d7	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.27d9	b0 24		bcs $27ff			bcs 	_IFDFDivZero
.27db	80 11		bra $27ee			bra		_IFDFExit
.27dd					_IFDFCheckUnderflow:
.27dd	ad 00 05	lda $0500			lda 	IFNewExponent 				; shift into a legal exponent.
.27e0	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.27e2	b0 0a		bcs $27ee			bcs 	_IFDFExit
.27e4	ee 00 05	inc $0500			inc 	IFNewExponent
.27e7	a2 18		ldx #$18			ldx 	#IFRTemp
.27e9	20 a2 2a	jsr $2aa2			jsr 	IFloatShiftRight
.27ec	80 ef		bra $27dd			bra 	_IFDFCheckUnderflow
.27ee					_IFDFExit:
.27ee	ad 00 05	lda $0500			lda 	IFNewExponent 				; combine exponent and sign.
.27f1	29 3f		and #$3f			and 	#IFXMask
.27f3	0d 01 05	ora $0501			ora 	IFNewSign
.27f6	85 1b		sta $1b				sta 	IFRTemp+IExp
.27f8	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.27fa	20 04 2a	jsr $2a04			jsr 	IFloatCopyFromRegister
.27fd	18		clc				clc
.27fe	60		rts				rts
.27ff					_IFDFDivZero:
.27ff	38		sec				sec
.2800	60		rts				rts
.2801					IFloatDivideSupport:
.2801	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.2803	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.2806	5a		phy				phy 								; main division loop x 23
.2807	a0 17		ldy #$17			ldy 	#23
.2809					_IFDSLoop:
.2809	20 3c 26	jsr $263c			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.280c	20 30 26	jsr $2630			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.280f	88		dey				dey
.2810	d0 f7		bne $2809			bne 	_IFDSLoop 					; do it 24 times
.2812	7a		ply				ply
.2813	60		rts				rts
.2814					IFloatIntegerToStringR0:
.2814	8d 02 05	sta $0502			sta 	IFBase 						; save base to use.
.2817	20 f4 2a	jsr $2af4			jsr 	IFloatBufferReset			; empty buffer
.281a	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.281c	29 3f		and #$3f			and 	#IFXMask
.281e	d0 1e		bne $283e			bne 	_IFIFail
.2820	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.2822	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero
.2825	f0 0e		beq $2835			beq 	_IFINotNegative
.2827	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.2829	29 40		and #$40			and 	#IFSign
.282b	f0 08		beq $2835			beq 	_IFINotNegative
.282d	a9 2d		lda #$2d			lda 	#"-"						; output -
.282f	20 03 2b	jsr $2b03			jsr 	IFloatBufferWrite
.2832	20 7e 2a	jsr $2a7e			jsr 	IFloatNegate 				; tidy up !
.2835					_IFINotNegative:
.2835	20 40 28	jsr $2840			jsr 	_IFIRecursiveConvert 		; start converting
.2838	20 fb 2a	jsr $2afb			jsr 	IFloatGetBufferAddress
.283b	18		clc				clc
.283c	80 01		bra $283f			bra 	_IFIExit
.283e					_IFIFail:
.283e	38		sec				sec
.283f					_IFIExit:
.283f	60		rts				rts
.2840					_IFIRecursiveConvert:
.2840	a2 10		ldx #$10			ldx 	#IFR1
.2842	20 15 2a	jsr $2a15			jsr 	IFloatCopyToRegister 		; R0->R1
.2845	a2 0c		ldx #$0c			ldx 	#IFR0
.2847	ad 02 05	lda $0502			lda 	IFBase 						; Base -> R0
.284a	20 75 2a	jsr $2a75			jsr 	IFloatSetByte
.284d	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.284f	20 d8 25	jsr $25d8			jsr 	IFloatDivideInteger
.2852	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.2854	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero
.2857	f0 09		beq $2862			beq 	_IFIOutDigit
.2859	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.285b	48		pha				pha
.285c	20 40 28	jsr $2840			jsr 	_IFIRecursiveConvert 		; convert the divider
.285f	68		pla				pla
.2860	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.2862					_IFIOutDigit:
.2862	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.2864	c9 0a		cmp #$0a			cmp	 	#10
.2866	90 02		bcc $286a			bcc 	_IFINotHex
.2868	69 06		adc #$06			adc 	#6
.286a					_IFINotHex:
.286a	69 30		adc #$30			adc 	#48
.286c	20 03 2b	jsr $2b03			jsr 	IFloatBufferWrite
.286f	60		rts				rts
.0502					IFBase:
>0502							.fill 	1
.2870					IFloatFloatToStringR0:
.2870	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2872	20 c2 29	jsr $29c2			jsr 	IFloatPushRx
.2875	20 15 2a	jsr $2a15			jsr 	IFloatCopyToRegister
.2878	20 73 27	jsr $2773			jsr 	IFloatIntegerR0				; make R0 integer
.287b	a9 0a		lda #$0a			lda 	#10 						; base 10.
.287d	20 14 28	jsr $2814			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2880	9c 03 05	stz $0503			stz 	IFloatDecimalCount 			; zero the decimal count.
.2883	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.2885	29 3f		and #$3f			and 	#IFXMask
.2887	f0 44		beq $28cd			beq 	_IFFSExit
.2889					_IFloatFracLoop:
.2889	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.288b	20 04 2a	jsr $2a04			jsr 	IFloatCopyFromRegister
.288e	20 1d 27	jsr $271d			jsr 	IFloatFractionalR0
.2891	20 aa 2a	jsr $2aaa			jsr 	IFloatNormalise
.2894	a2 14		ldx #$14			ldx 	#IFR2
.2896	20 15 2a	jsr $2a15			jsr 	IFloatCopyToRegister 		; copy to R2
.2899	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.289b	a9 0a		lda #$0a			lda 	#10
.289d	20 75 2a	jsr $2a75			jsr 	IFloatSetByte
.28a0	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.28a2	20 13 25	jsr $2513			jsr 	IFloatMultiply
.28a5	a2 14		ldx #$14			ldx 	#IFR2
.28a7	20 15 2a	jsr $2a15			jsr 	IFloatCopyToRegister
.28aa	20 73 27	jsr $2773			jsr 	IFloatIntegerR0 			; get integer part of R0
.28ad	ad 03 05	lda $0503			lda 	IFloatDecimalCount 			; done 5 dp, no more
.28b0	c9 03		cmp #$03			cmp 	#3
.28b2	f0 16		beq $28ca			beq 	_IFFSExitStripZero
.28b4	ad 03 05	lda $0503			lda 	IFloatDecimalCount 			; written the DP yet ?
.28b7	d0 05		bne $28be			bne 	_IFloatNotFirst
.28b9	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.28bb	20 03 2b	jsr $2b03			jsr 	IFloatBufferWrite
.28be					_IFloatNotFirst:
.28be	ee 03 05	inc $0503			inc 	IFloatDecimalCount
.28c1	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.28c3	09 30		ora #$30			ora 	#"0"						; ASCII
.28c5	20 03 2b	jsr $2b03			jsr 	IFloatBufferWrite 			; write to the buffer.
.28c8	80 bf		bra $2889			bra 	_IFloatFracLoop
.28ca					_IFFSExitStripZero:
.28ca	20 12 2b	jsr $2b12			jsr 	IFloatStripTrailingZeros
.28cd					_IFFSExit:
.28cd	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.28cf	20 e3 29	jsr $29e3			jsr 	IFloatPullRx
.28d2	20 fb 2a	jsr $2afb			jsr 	IFloatGetBufferAddress
.28d5	18		clc				clc
.28d6	60		rts				rts
.0503					IFloatDecimalCount:
>0503							.fill 	1
.28d7					IFloatStringToFloatR0:
.28d7	8d 04 05	sta $0504			sta 	IFCount 					; save it out.
.28da	86 0a		stx $0a				stx 	iTemp0
.28dc	84 0b		sty $0b				sty 	iTemp0+1
.28de	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.28e0	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.28e3	9c 05 05	stz $0505			stz 	IFSignFlag 					; clear the sign flag
.28e6	20 73 29	jsr $2973			jsr 	IFSTFGetNext 				; get first
.28e9	f0 1b		beq $2906			beq 	_IFSTFFail 					; no character
.28eb	90 10		bcc $28fd			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.28ed	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.28ef	d0 15		bne $2906			bne 	_IFSTFFail
.28f1	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.28f3	8d 05 05	sta $0505			sta 	IFSignFlag
.28f6					_IFSTFLoop:
.28f6	20 73 29	jsr $2973			jsr 	IFSTFGetNext 				; get next
.28f9	b0 0b		bcs $2906			bcs 	_IFSTFFail 					; bad character.
.28fb	f0 11		beq $290e			beq 	_IFSTFExit 					; end of data
.28fd					_IFSTFHaveChar:
.28fd	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.28ff	f0 08		beq $2909			beq 	_IFSTFDecimal
.2901	20 97 29	jsr $2997			jsr 	IFSTFAddR0 					; add number in
.2904	80 f0		bra $28f6			bra 	_IFSTFLoop 					; keep going until . or end.
.2906					_IFSTFFail:
.2906	38		sec				sec
.2907	80 0d		bra $2916			bra 	_IFSTFReturn
.2909					_IFSTFDecimal:
.2909	20 1e 29	jsr $291e			jsr 	IFSTFDecimal 				; call the decimal places code.
.290c	b0 08		bcs $2916			bcs 	_IFSTFReturn 				; error
.290e					_IFSTFExit:
.290e	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2910	0d 05 05	ora $0505			ora 	IFSignFlag
.2913	85 0f		sta $0f				sta 	IFR0+IExp
.2915	18		clc				clc
.2916					_IFSTFReturn:
.2916	60		rts				rts
.2917					IFloatAddDecimalToR0:
.2917	8d 04 05	sta $0504			sta 	IFCount 					; save it out.
.291a	86 0a		stx $0a				stx 	iTemp0
.291c	84 0b		sty $0b				sty 	iTemp0+1
.291e					IFSTFDecimal:
.291e	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2920	20 c2 29	jsr $29c2			jsr 	IFloatPushRx
.2923	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2925	20 73 2a	jsr $2a73			jsr 	IFloatSetZero
.2928	9c 06 05	stz $0506			stz 	IFDecimalPlaces
.292b					_IFSTDLoop:
.292b	20 73 29	jsr $2973			jsr 	IFSTFGetNext 				; get next
.292e	b0 41		bcs $2971			bcs 	_IFSTFFail2 				; bad character.
.2930	f0 11		beq $2943			beq 	_IFSTFComplete 				; end of data, work out the result.
.2932	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2934	f0 39		beq $296f			beq 	_IFSTFExit2
.2936	20 97 29	jsr $2997			jsr 	IFSTFAddR0 					; add number in
.2939	ee 06 05	inc $0506			inc 	IFDecimalPlaces 			; count decimals
.293c	ad 06 05	lda $0506			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.293f	c9 03		cmp #$03			cmp 	#3
.2941	90 e8		bcc $292b			bcc 	_IFSTDLoop
.2943					_IFSTFComplete:
.2943	ad 06 05	lda $0506			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2946	f0 27		beq $296f			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2948	3a		dec a				dec 	a 							; table indexed from 1.
.2949	0a		asl a				asl 	a
.294a	0a		asl a				asl 	a
.294b	aa		tax				tax
.294c	bd ae 29	lda $29ae,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.294f	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2951	bd af 29	lda $29af,x			lda 	TableTen+1,x
.2954	85 11		sta $11				sta  	IFR1+IM1
.2956	bd b0 29	lda $29b0,x			lda 	TableTen+2,x
.2959	85 12		sta $12				sta  	IFR1+IM2
.295b	bd b1 29	lda $29b1,x			lda 	TableTen+3,x
.295e	85 13		sta $13				sta  	IFR1+IExp
.2960	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2962	20 13 25	jsr $2513			jsr 	IFloatMultiply
.2965	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.2967	20 e3 29	jsr $29e3			jsr 	IFloatPullRx
.296a	a2 10		ldx #$10			ldx 	#IFR1
.296c	20 69 24	jsr $2469			jsr 	IFloatAdd
.296f					_IFSTFExit2:
.296f	18		clc				clc
.2970	60		rts				rts
.2971					_IFSTFFail2:
.2971	38		sec				sec
.2972	60		rts				rts
.2973					IFSTFGetNext:
.2973	ad 04 05	lda $0504			lda 	IFCount  					; if count is zero, return with Z set.
.2976	f0 19		beq $2991			beq 	_IFSTFReturnOk
.2978	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.297a	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.297c	d0 02		bne $2980			bne 	_IFSTFGNNoCarry
.297e	e6 0b		inc $0b				inc 	iTemp0+1
.2980					_IFSTFGNNoCarry:
.2980	ce 04 05	dec $0504			dec 	IFCount 					; dec count.
.2983	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2985	f0 08		beq $298f			beq 	_IFSTFGOkay
.2987	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2989	90 08		bcc $2993			bcc 	_IFSTFGFail
.298b	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.298d	b0 04		bcs $2993			bcs 	_IFSTFGFail
.298f					_IFSTFGOkay:
.298f	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2991					_IFSTFReturnOk:
.2991	18		clc				clc
.2992	60		rts				rts
.2993					_IFSTFGFail:
.2993	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2995	38		sec				sec
.2996	60		rts				rts
.2997					IFSTFAddR0:
.2997	29 0f		and #$0f			and 	#15 						; to int value
.2999	48		pha				pha 								; save it.
.299a	a9 0a		lda #$0a			lda 	#10
.299c	a2 10		ldx #$10			ldx 	#IFR1
.299e	20 75 2a	jsr $2a75			jsr 	IFloatSetByte
.29a1	20 13 25	jsr $2513			jsr 	IFloatMultiply
.29a4	68		pla				pla
.29a5	a2 10		ldx #$10			ldx 	#IFR1
.29a7	20 75 2a	jsr $2a75			jsr 	IFloatSetByte
.29aa	20 69 24	jsr $2469			jsr 	IFloatAdd
.29ad	60		rts				rts
.0504					IFCount:
>0504							.fill 	1
.0505					IFSignFlag:
>0505							.fill 	1
.0506					IFDecimalPlaces:
>0506							.fill 	1
.29ae					TableTen:
>29ae	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>29b2	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>29b6	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>29ba	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>29be	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.29c2					IFloatPushRx:
.29c2	5a		phy				phy
.29c3	ac 07 05	ldy $0507			ldy 	IFStackIndex
.29c6	b5 00		lda $00,x			lda 	IM0,x
.29c8	99 08 05	sta $0508,y			sta 	IFStack,y
.29cb	b5 01		lda $01,x			lda 	IM1,x
.29cd	99 09 05	sta $0509,y			sta 	IFStack+1,y
.29d0	b5 02		lda $02,x			lda 	IM2,x
.29d2	99 0a 05	sta $050a,y			sta 	IFStack+2,y
.29d5	b5 03		lda $03,x			lda 	IExp,x
.29d7	99 0b 05	sta $050b,y			sta 	IFStack+3,y
.29da	c8		iny				iny
.29db	c8		iny				iny
.29dc	c8		iny				iny
.29dd	c8		iny				iny
.29de	8c 07 05	sty $0507			sty 	IFStackIndex
.29e1	7a		ply				ply
.29e2	60		rts				rts
.29e3					IFloatPullRx:
.29e3	5a		phy				phy
.29e4	ac 07 05	ldy $0507			ldy 	IFStackIndex
.29e7	88		dey				dey
.29e8	88		dey				dey
.29e9	88		dey				dey
.29ea	88		dey				dey
.29eb	b9 08 05	lda $0508,y			lda 	IFStack,y
.29ee	95 00		sta $00,x			sta 	IM0,x
.29f0	b9 09 05	lda $0509,y			lda 	IFStack+1,y
.29f3	95 01		sta $01,x			sta 	IM1,x
.29f5	b9 0a 05	lda $050a,y			lda 	IFStack+2,y
.29f8	95 02		sta $02,x			sta 	IM2,x
.29fa	b9 0b 05	lda $050b,y			lda 	IFStack+3,y
.29fd	95 03		sta $03,x			sta 	IExp,x
.29ff	8c 07 05	sty $0507			sty 	IFStackIndex
.2a02	7a		ply				ply
.2a03	60		rts				rts
.0507					IFStackIndex:
>0507							.fill 	1
.0508					IFStack:
>0508							.fill 	16*4
.2a04					IFloatCopyFromRegister:
.2a04	b5 00		lda $00,x			lda 	0,x
.2a06	85 0c		sta $0c				sta 	IFR0
.2a08	b5 01		lda $01,x			lda 	1,x
.2a0a	85 0d		sta $0d				sta 	IFR0+1
.2a0c	b5 02		lda $02,x			lda 	2,x
.2a0e	85 0e		sta $0e				sta 	IFR0+2
.2a10	b5 03		lda $03,x			lda 	3,x
.2a12	85 0f		sta $0f				sta 	IFR0+3
.2a14	60		rts				rts
.2a15					IFloatCopyToRegister:
.2a15	a5 0c		lda $0c				lda 	IFR0
.2a17	95 00		sta $00,x			sta 	0,x
.2a19	a5 0d		lda $0d				lda 	IFR0+1
.2a1b	95 01		sta $01,x			sta 	1,x
.2a1d	a5 0e		lda $0e				lda 	IFR0+2
.2a1f	95 02		sta $02,x			sta 	2,x
.2a21	a5 0f		lda $0f				lda 	IFR0+3
.2a23	95 03		sta $03,x			sta 	3,x
.2a25	60		rts				rts
.2a26					IFloatLoadInline:
.2a26	68		pla				pla 								; pop address off to iTemp0
.2a27	85 0a		sta $0a				sta 	iTemp0
.2a29	68		pla				pla
.2a2a	85 0b		sta $0b				sta 	iTemp0+1
.2a2c	a0 01		ldy #$01			ldy 	#1
.2a2e	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2a30	95 00		sta $00,x			sta 	0,x
.2a32	c8		iny				iny
.2a33	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.2a35	95 01		sta $01,x			sta 	1,x
.2a37	c8		iny				iny
.2a38	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2a3a	95 02		sta $02,x			sta 	2,x
.2a3c	c8		iny				iny
.2a3d	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2a3f	95 03		sta $03,x			sta 	3,x
.2a41	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2a42	a5 0a		lda $0a				lda 	iTemp0
.2a44	69 05		adc #$05			adc 	#5
.2a46	85 0a		sta $0a				sta 	iTemp0
.2a48	90 02		bcc $2a4c			bcc 	_IFLINoCarry
.2a4a	e6 0b		inc $0b				inc 	iTemp0+1
.2a4c					_IFLINoCarry:
.2a4c	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2a4f					IFloatMultiply8BitRx:
.2a4f	5a		phy		        phy
.2a50	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2a52	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2a54	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2a55	85 0c		sta $0c		        sta     IFR0+IM0
.2a57	84 0d		sty $0d		        sty     IFR0+IM1
.2a59	a9 00		lda #$00	        lda     #0
.2a5b	a0 08		ldy #$08	        ldy     #8
.2a5d					_IFMLoop:
.2a5d	90 03		bcc $2a62	        bcc     _IFMNoAdd
.2a5f	18		clc		        clc
.2a60	65 0d		adc $0d		        adc     IFR0+IM1
.2a62					_IFMNoAdd:
.2a62	6a		ror a		        ror     a
.2a63	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2a65	88		dey		        dey
.2a66	d0 f5		bne $2a5d	        bne     _IFMLoop
.2a68	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2a6a	7a		ply		        ply
.2a6b	60		rts		        rts
.2a6c					IFloatCheckZero:
.2a6c	b5 00		lda $00,x			lda 	IM0,x
.2a6e	15 01		ora $01,x			ora 	IM1,x
.2a70	15 02		ora $02,x			ora 	IM2,x
.2a72	60		rts				rts
.2a73					IFloatSetZero:
.2a73	a9 00		lda #$00			lda 	#0
.2a75					IFloatSetByte:
.2a75	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2a77	74 01		stz $01,x			stz 	IM1,x
.2a79	74 02		stz $02,x			stz 	IM2,x
.2a7b	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2a7d	60		rts				rts
.2a7e					IFloatNegate:
.2a7e	b5 03		lda $03,x			lda 	IExp,x
.2a80	49 40		eor #$40			eor 	#IFSign
.2a82	95 03		sta $03,x			sta 	IExp,x
.2a84	18		clc				clc
.2a85	60		rts				rts
.2a86					IFloatMantissaNegate:
.2a86	38		sec				sec
.2a87	a9 00		lda #$00			lda 	#0
.2a89	f5 00		sbc $00,x			sbc 	IM0,x
.2a8b	95 00		sta $00,x			sta 	IM0,x
.2a8d	a9 00		lda #$00			lda 	#0
.2a8f	f5 01		sbc $01,x			sbc 	IM1,x
.2a91	95 01		sta $01,x			sta 	IM1,x
.2a93	a9 00		lda #$00			lda 	#0
.2a95	f5 02		sbc $02,x			sbc 	IM2,x
.2a97	95 02		sta $02,x			sta 	IM2,x
.2a99	60		rts				rts
.2a9a					IFloatShiftLeft:
.2a9a	18		clc				clc
.2a9b					IFloatRotateLeft:
.2a9b	36 00		rol $00,x			rol 	IM0,x
.2a9d	36 01		rol $01,x			rol 	IM1,x
.2a9f	36 02		rol $02,x			rol 	IM2,x
.2aa1	60		rts				rts
.2aa2					IFloatShiftRight:
.2aa2	18		clc				clc
.2aa3					IFloatRotateRight:
.2aa3	76 02		ror $02,x			ror 	IM2,x
.2aa5	76 01		ror $01,x			ror 	IM1,x
.2aa7	76 00		ror $00,x			ror 	IM0,x
.2aa9	60		rts				rts
.2aaa					IFloatNormalise:
.2aaa	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero 			; is it zero
.2aad	f0 18		beq $2ac7			beq 	_IFNExitZero 				; if so exit
.2aaf					_IFNLoop:
.2aaf	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2ab1	29 c0		and #$c0			and 	#$C0
.2ab3	c9 40		cmp #$40			cmp 	#$40
.2ab5	f0 13		beq $2aca			beq 	_IFNExitOkay 				; if so , then we are done.
.2ab7	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2ab9	29 3f		and #$3f			and 	#$3F
.2abb	c9 20		cmp #$20			cmp 	#$20
.2abd	f0 0b		beq $2aca			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2abf	20 e0 2a	jsr $2ae0			jsr 	IFloatDecExponent
.2ac2	20 9a 2a	jsr $2a9a			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2ac5	80 e8		bra $2aaf			bra 	_IFNLoop
.2ac7					_IFNExitZero:
.2ac7	20 73 2a	jsr $2a73			jsr 	IFloatSetZero 				; set the result to zero
.2aca					_IFNExitOkay:
.2aca	18		clc				clc  								; return with CC.
.2acb	60		rts				rts
.2acc					IFloatIncExponent:
.2acc	b5 03		lda $03,x			lda 	IExp,x
.2ace	48		pha				pha
.2acf	29 c0		and #$c0			and 	#$C0
.2ad1	8d 48 05	sta $0548			sta 	IFXTemp
.2ad4	68		pla				pla
.2ad5	1a		inc a				inc 	a
.2ad6	29 3f		and #$3f			and 	#$3F
.2ad8	48		pha				pha
.2ad9	0d 48 05	ora $0548			ora 	IFXTemp
.2adc	95 03		sta $03,x			sta 	IExp,x
.2ade	68		pla				pla
.2adf	60		rts				rts
.2ae0					IFloatDecExponent:
.2ae0	b5 03		lda $03,x			lda 	IExp,x
.2ae2	48		pha				pha
.2ae3	29 c0		and #$c0			and 	#$C0
.2ae5	8d 48 05	sta $0548			sta 	IFXTemp
.2ae8	68		pla				pla
.2ae9	3a		dec a				dec 	a
.2aea	29 3f		and #$3f			and 	#$3F
.2aec	48		pha				pha
.2aed	0d 48 05	ora $0548			ora 	IFXTemp
.2af0	95 03		sta $03,x			sta 	IExp,x
.2af2	68		pla				pla
.2af3	60		rts				rts
.0548					IFXTemp:
>0548							.fill 	1
.2af4					IFloatBufferReset:
.2af4	9c 49 05	stz $0549			stz 	IFBufferCount
.2af7	9c 4a 05	stz $054a			stz 	IFBuffer
.2afa	60		rts				rts
.2afb					IFloatGetBufferAddress:
.2afb	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.2afd	a2 4a		ldx #$4a			ldx 	#(IFBuffer & $FF)
.2aff	ad 49 05	lda $0549			lda 	IFBufferCount
.2b02	60		rts				rts
.2b03					IFloatBufferWrite:
.2b03	da		phx				phx
.2b04	ae 49 05	ldx $0549			ldx 	IFBufferCount
.2b07	9d 4a 05	sta $054a,x			sta 	IFBuffer,x
.2b0a	9e 4b 05	stz $054b,x			stz 	IFBuffer+1,x
.2b0d	ee 49 05	inc $0549			inc 	IFBufferCount
.2b10	fa		plx				plx
.2b11	60		rts				rts
.2b12					IFloatStripTrailingZeros:
.2b12	ae 49 05	ldx $0549			ldx 	IFBufferCount
.2b15	bd 49 05	lda $0549,x			lda 	IFBuffer-1,x
.2b18	c9 30		cmp #$30			cmp		#"0"
.2b1a	d0 0f		bne $2b2b			bne 	_IFSTExit
.2b1c	bd 48 05	lda $0548,x			lda 	IFBuffer-2,x
.2b1f	c9 2e		cmp #$2e			cmp 	#"."
.2b21	f0 08		beq $2b2b			beq 	_IFSTExit
.2b23	ce 49 05	dec $0549			dec 	IFBufferCount
.2b26	9e 49 05	stz $0549,x			stz 	IFBuffer-1,x
.2b29	80 e7		bra $2b12			bra 	IFloatStripTrailingZeros
.2b2b					_IFSTExit:
.2b2b	60		rts				rts
.0549					IFBufferCount:
>0549							.fill 	1
.054a					IFBuffer:
>054a							.fill 	25
.2b2c					IFloatCheck:
.2b2c	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2b2e	09 40		ora #$40			ora 	#IFSign
.2b30	85 0f		sta $0f				sta 	IFR0+IExp
.2b32	20 69 24	jsr $2469			jsr 	IFloatAdd 					; add allowed to error.
.2b35	a2 0c		ldx #$0c			ldx 	#IFR0
.2b37	20 6c 2a	jsr $2a6c			jsr 	IFloatCheckZero 			; error if < 0
.2b3a	f0 06		beq $2b42			beq 	_IFAOkay
.2b3c	a5 0f		lda $0f				lda 	IFR0+IExp
.2b3e	29 40		and #$40			and 	#IFSign
.2b40	d0 01		bne $2b43			bne 	_IFAFail
.2b42					_IFAOkay:
.2b42	60		rts				rts
.2b43					_IFAFail:
.2b43	38		sec				sec
.2b44	68		pla				pla 								; get address - 2
.2b45	e9 02		sbc #$02			sbc 	#2
.2b47	aa		tax				tax
.2b48	68		pla				pla
.2b49	e9 00		sbc #$00			sbc 	#0
.2b4b	a8		tay				tay
.2b4c	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2b4e					_IFAStop:
>2b4e	db						.byte 	$DB 						; display an error AA ADR ADR
.2b4f	80 fd		bra $2b4e			bra 	_IFAStop

;******  Return to file: basic.asm

.2b51					NotImplemented:
.2b51	a9 ff		lda #$ff			lda 	#$FF
.2b53	80 04		bra $2b59			bra 	EnterDbg
.2b55					ErrorHandler:
.2b55	fa		plx				plx
.2b56	7a		ply				ply
.2b57	a9 ee		lda #$ee			lda 	#$EE
.2b59					EnterDbg:
>2b59	db						.byte 	$DB
.2b5a	4c 59 2b	jmp $2b59			jmp 	EnterDbg

;******  End of listing
