
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Sat Jul  1 17:26:12 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
=192					OSTextBufferSize = 192
.025d					OSEditWidth:
>025d							.fill 	1
.025e					OSEditLength:
>025e							.fill 	1
.025f					OSEditBuffer:
>025f							.fill 	OSTextBufferSize+1
>0320							.fill 	32
>0340							.align 	256
.0400					sectorSize:
>0400							.fill 	2
.0402					sectorCount:
>0402							.fill 	2
.0404					currentSector:
>0404							.fill 	2

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSEnterLine              = $ffdf ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe2					OSScreenLine             = $ffe2 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe5					OSKeyboardDataProcess    = $ffe5 ; Keyboard update process.
=$ffe8					OSCheckBreak             = $ffe8 ; NZ if ESC pressed.
=$ffeb					OSIsKeyAvailable         = $ffeb ; Check if key available (CS if so)
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard, CC = success, CS = no key
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSWriteScreen            = $fff4 ; Write A to screen, CC = success
=$fff7					OSWriteString            = $fff7 ; Write length prefixed string YX to screen

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 9d 20	jsr $209d			jsr 	PGMSetBaseAddress
.1007	20 27 2c	jsr $2c27			jsr 	IFInitialise 				; setup math library
.100a	4c 08 14	jmp $1408			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="I"					AM_ABSOLUTEIX	= 'I' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d0					AM_IND 		= ('P'|AM_ZPAGE) 				; lda (nn)
=$d1					AM_INDX		= ('Q'|AM_ZPAGE) 				; lda (nn,x)
=$d2					AM_INDY		= ('R'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0406					TOKLineSize:
>0406							.fill 	1
.0407					TOKLineNumber:
>0407							.fill 	2
.0409					TOKBuffer:
>0409							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; get a number to assert
.1010	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1012	20 33 32	jsr $3233			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail 					; if so, the assert fails.
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 34 27	jmp $2734		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.101d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.101f	f0 14		beq $1035			beq 	_CLNoParam
.1021	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1023	f0 10		beq $1035			beq 	_CLNoParam
.1025	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; address for CLEAR
.1028	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102a	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102c	b0 0b		bcs $1039			bcs 	_CLMemory
.102e	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1030	90 07		bcc $1039			bcc 	_CLMemory
.1032	8d 21 05	sta $0521			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1035					_CLNoParam:
.1035	20 3c 10	jsr $103c			jsr 	ClearCode
.1038	60		rts				rts
.1039					_CLMemory:
.1039	4c ce 27	jmp $27ce		jmp	ErrorV_memory
.103c					ClearCode:
.103c	20 b0 20	jsr $20b0			jsr 	PGMEndProgram 				; end program => zTemp0
.103f	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1041	a5 23		lda $23				lda 	zTemp0+1 					; for variables.
.1043	1a		inc a				inc 	a
.1044	85 29		sta $29				sta 	freeMemory+1
.1046	20 c6 2b	jsr $2bc6			jsr 	VARClearHashTables
.1049	ad 21 05	lda $0521			lda 	PGMEndMemoryHigh
.104c	20 02 29	jsr $2902			jsr 	StackReset 					; page passed on in A
.104f	20 61 29	jsr $2961			jsr 	StringSystemInitialise
.1052	20 49 26	jsr $2649			jsr 	ScanProcedures
.1055	20 92 14	jsr $1492			jsr 	Command_RESTORE
.1058	60		rts				rts
.1059					AllocateMemory:
.1059	5a		phy				phy 								; save Y
.105a	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low (of final memory)
.105c	5a		phy				phy
.105d	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.105f	5a		phy				phy
.1060	a8		tay				tay 								; count is now in XY
.1061					_AllocateLoop:
.1061	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1063	d0 04		bne $1069			bne 	_AllocateOne
.1065	c0 00		cpy #$00			cpy 	#0
.1067	f0 15		beq $107e			beq 	_AllocateExit
.1069					_AllocateOne:
.1069	a9 00		lda #$00			lda 	#0 							; zero byte
.106b	92 28		sta ($28)			sta 	(freeMemory)
.106d	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.106f	d0 05		bne $1076			bne 	_AllocateSkipCarry
.1071	e6 29		inc $29				inc 	freeMemory+1
.1073	20 82 10	jsr $1082			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.1076					_AllocateSkipCarry:
.1076	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1078	d0 01		bne $107b			bne 	_AllocateSkipBorrow
.107a	ca		dex				dex
.107b					_AllocateSkipBorrow:
.107b	88		dey				dey
.107c	80 e3		bra $1061			bra 	_AllocateLoop
.107e					_AllocateExit:
.107e	fa		plx				plx 								; restore address
.107f	68		pla				pla
.1080	7a		ply				ply 								; restore Y
.1081	60		rts				rts
.1082					ClearCheckMemory:
.1082	a5 29		lda $29				lda 	freeMemory+1 				; allocatable memory
.1084	1a		inc a				inc 	a 							; spacing 2 pages
.1085	1a		inc a				inc 	a
.1086	cd 29 06	cmp $0629			cmp 	stringMemory+1 				; problems if hit string memory
.1089	b0 01		bcs $108c			bcs  	_CCMError
.108b	60		rts				rts
.108c					_CCMError:
.108c	4c ce 27	jmp $27ce		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.108f					CommandDIM:
.108f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1091	29 c0		and #$c0			and 	#$C0
.1093	c9 40		cmp #$40			cmp 	#$40
.1095	d0 39		bne $10d0			bne 	_CDSyntax
.1097	20 7d 2b	jsr $2b7d			jsr 	VARGetInfo 					; get information
.109a	ad 31 06	lda $0631			lda 	VARType 					; check array.
.109d	29 02		and #$02			and 	#2
.109f	f0 2f		beq $10d0			beq 	_CDSyntax
.10a1	20 2f 2b	jsr $2b2f			jsr 	VARFind 					; does it already exist
.10a4	b0 2d		bcs $10d3			bcs 	_CDExists
.10a6	20 db 2a	jsr $2adb			jsr 	VARCreate 					; create it - returns data ptr in XA
.10a9	da		phx				phx 								; save target address
.10aa	48		pha				pha
.10ab	ad 31 06	lda $0631			lda 	VARType 					; type ID.
.10ae	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b0	20 d6 10	jsr $10d6			jsr 	CreateArray 				; create array to XA
.10b3	84 24		sty $24				sty 	zTemp1 						; save Y
.10b5	7a		ply				ply 								; restore target to zTemp0
.10b6	84 22		sty $22				sty 	zTemp0
.10b8	7a		ply				ply
.10b9	84 23		sty $23				sty 	zTemp0+1
.10bb	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10bd	a0 01		ldy #$01			ldy 	#1
.10bf	8a		txa				txa
.10c0	91 22		sta ($22),y			sta 	(zTemp0),y
.10c2	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10c4	20 93 28	jsr $2893			jsr 	ERRCheckRParen 				; check )
.10c7	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10c9	c8		iny				iny
.10ca	c9 99		cmp #$99			cmp 	#PR_COMMA
.10cc	f0 c1		beq $108f			beq 	CommandDIM
.10ce	88		dey				dey
.10cf	60		rts				rts
.10d0					_CDSyntax:
.10d0	4c de 26	jmp $26de		jmp	ErrorV_syntax
.10d3					_CDExists:
.10d3	4c a6 27	jmp $27a6		jmp	ErrorV_redefine
.10d6					CreateArray:
.10d6	8d 09 05	sta $0509			sta 	CAType						; save type
.10d9	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10dc	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10de	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e0	f0 04		beq $10e6			beq 	_CATwoDimensions
.10e2	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e5	60		rts				rts
.10e6					_CATwoDimensions:
.10e6	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10e8	8d 0b 05	sta $050b			sta 	CADim1+1
.10eb	a5 08		lda $08				lda 	IFR0+IM0
.10ed	8d 0a 05	sta $050a			sta 	CADim1+0
.10f0	20 9b 28	jsr $289b			jsr 	ERRCheckComma 				; check comma
.10f3	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f6	5a		phy				phy 								; save Y position
.10f7	18		clc				clc 								; allocate the outer array of pointers.
.10f8	ae 0b 05	ldx $050b			ldx 	CADim1+1
.10fb	ad 0a 05	lda $050a			lda 	CADim1
.10fe	20 71 11	jsr $1171			jsr 	CSAAllocate 				; allocate the outer array
.1101	da		phx				phx									; save this address on the stack
.1102	48		pha				pha
.1103	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.1105	85 26		sta $26				sta 	zTemp2
.1107					_CACreateSubLoop:
.1107	38		sec				sec
.1108	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create data array of required size.
.110b	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.110d	91 26		sta ($26),y			sta 	(zTemp2),y
.110f	8a		txa				txa
.1110	c8		iny				iny
.1111	91 26		sta ($26),y			sta 	(zTemp2),y
.1113	18		clc				clc  								; next slot.
.1114	a5 26		lda $26				lda 	zTemp2
.1116	69 02		adc #$02			adc 	#2
.1118	85 26		sta $26				sta 	zTemp2
.111a	90 02		bcc $111e			bcc 	_CACNoCarry
.111c	e6 27		inc $27				inc 	zTemp2+1
.111e					_CACNoCarry:
.111e	ad 0a 05	lda $050a			lda 	CADim1 						; use DIM1 as a counter
.1121	d0 03		bne $1126			bne 	_CACNoBorrow
.1123	ce 0b 05	dec $050b			dec 	CADim1+1
.1126					_CACNoBorrow:
.1126	ce 0a 05	dec $050a			dec 	CADim1
.1129	ad 0b 05	lda $050b			lda 	CADim1+1 					; but do one more.
.112c	10 d9		bpl $1107			bpl 	_CACreateSubLoop
.112e	68		pla				pla
.112f	fa		plx				plx
.1130	7a		ply				ply
.1131	60		rts				rts
.1132					CreateSingleArray:
.1132	5a		phy				phy
.1133	38		sec				sec 								; allocate memory block all zeros.
.1134	a5 08		lda $08				lda 	IFR0+IM0
.1136	a6 09		ldx $09				ldx 	IFR0+IM1
.1138	20 71 11	jsr $1171			jsr 	CSAAllocate
.113b	ac 09 05	ldy $0509			ldy 	CAType 						; if numbers, we don't need to initialise.
.113e	f0 2f		beq $116f			beq 	_CSANoInit
.1140	da		phx				phx 								; save address of new array
.1141	48		pha				pha
.1142	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1144	86 23		stx $23				stx 	zTemp0+1
.1146	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1148	b1 22		lda ($22),y			lda 	(zTemp0),y
.114a	a8		tay				tay
.114b	b2 22		lda ($22)			lda 	(zTemp0)
.114d	aa		tax				tax
.114e					_CSAEraseString:
.114e	5a		phy				phy
.114f	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1151	a9 80		lda #$80			lda 	#$80
.1153	91 22		sta ($22),y			sta 	(zTemp0),y
.1155	7a		ply				ply
.1156	18		clc				clc 								; add 4 to next slot.
.1157	a5 22		lda $22				lda 	zTemp0
.1159	69 04		adc #$04			adc 	#4
.115b	85 22		sta $22				sta 	zTemp0
.115d	90 02		bcc $1161			bcc 	_CSAENoCarry
.115f	e6 23		inc $23				inc 	zTemp0+1
.1161					_CSAENoCarry:
.1161	e0 00		cpx #$00			cpx 	#0
.1163	d0 01		bne $1166			bne 	_CSANoBorrow
.1165	88		dey				dey
.1166					_CSANoBorrow:
.1166	ca		dex				dex
.1167	d0 e5		bne $114e			bne 	_CSAEraseString
.1169	c0 00		cpy #$00			cpy 	#0
.116b	d0 e1		bne $114e			bne 	_CSAEraseString
.116d	68		pla				pla
.116e	fa		plx				plx
.116f					_CSANoInit:
.116f	7a		ply				ply
.1170	60		rts				rts
.1171					CSAAllocate:
.1171	08		php				php 								; save type flag.
.1172	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1173	d0 01		bne $1176			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1175	e8		inx				inx
.1176					_CSAANoCarry:
.1176	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1178	b0 2e		bcs $11a8			bcs 	_CSARange
.117a	28		plp				plp 								; restore type flag
.117b	08		php				php 								; save it back again.
.117c	da		phx				phx 								; save size.
.117d	48		pha				pha
.117e	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1180	90 03		bcc $1185			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1182	0a		asl a				asl 	a
.1183	26 23		rol $23				rol 	zTemp0+1
.1185					_CSAATimes2:
.1185	0a		asl a				asl 	a
.1186	26 23		rol $23				rol 	zTemp0+1
.1188	18		clc				clc
.1189	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.118b	90 02		bcc $118f			bcc 	_CSAANoCarry2
.118d	e6 23		inc $23				inc 	zTemp0+1
.118f					_CSAANoCarry2:
.118f	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1191	20 59 10	jsr $1059			jsr 	AllocateMemory 				; allocate memory to XA
.1194	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1196	85 22		sta $22				sta 	zTemp0
.1198	68		pla				pla  								; write element count to first 2 bytes
.1199	92 22		sta ($22)			sta 	(zTemp0)
.119b	68		pla				pla 								; msb of element count
.119c	28		plp				plp 								; CC if pointer array
.119d	b0 02		bcs $11a1			bcs 	_CSAAIsData
.119f	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a1					_CSAAIsData:
.11a1	a0 01		ldy #$01			ldy 	#1
.11a3	91 22		sta ($22),y			sta 	(zTemp0),y
.11a5	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11a7	60		rts				rts
.11a8					_CSARange:
.11a8	4c ef 26	jmp $26ef		jmp	ErrorV_range
.0509					CAType:
>0509							.fill 	1
.050a					CADim1:
>050a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11ab					Command_Doke:
.11ab	38		sec				sec
.11ac	80 01		bra $11af			bra 	DPCommon
.11ae					Command_Poke:
.11ae	18		clc				clc
.11af					DPCommon:
.11af	08		php				php 								; CS if DOKE
.11b0	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; address
.11b3	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b5	48		pha				pha
.11b6	a5 09		lda $09				lda 	IFR0+IM1
.11b8	48		pha				pha
.11b9	20 9b 28	jsr $289b			jsr 	ERRCheckComma 				; [dp]oke address,data
.11bc	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16
.11bf	68		pla				pla 								; get address back
.11c0	85 23		sta $23				sta 	zTemp0+1
.11c2	68		pla				pla
.11c3	85 22		sta $22				sta 	zTemp0
.11c5	a5 08		lda $08				lda 	IFR0+IM0
.11c7	92 22		sta ($22)			sta 	(zTemp0)
.11c9	28		plp				plp
.11ca	90 08		bcc $11d4			bcc 	_DPExit
.11cc	5a		phy				phy
.11cd	a5 09		lda $09				lda 	IFR0+IM1
.11cf	a0 01		ldy #$01			ldy 	#1
.11d1	91 22		sta ($22),y			sta 	(zTemp0),y
.11d3	7a		ply				ply
.11d4					_DPExit:
.11d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11d5					Command_GOTO:
.11d5	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get line number
.11d8					GotoR0:
.11d8	ad 20 05	lda $0520			lda 	PGMBaseHigh 				; back to the program start
.11db	85 19		sta $19				sta 	codePtr+1
.11dd	64 18		stz $18				stz 	codePtr
.11df					_GOSearch:
.11df	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e1	f0 1f		beq $1202			beq 	_GOError
.11e3	a0 01		ldy #$01			ldy 	#1 							; found line #
.11e5	b1 18		lda ($18),y			lda 	(codePtr),y
.11e7	c5 08		cmp $08				cmp 	IFR0+IM0
.11e9	d0 0a		bne $11f5			bne 	_GONext
.11eb	c8		iny				iny
.11ec	b1 18		lda ($18),y			lda 	(codePtr),y
.11ee	c5 09		cmp $09				cmp 	IFR0+IM1
.11f0	d0 03		bne $11f5			bne 	_GONext
.11f2	4c d7 14	jmp $14d7			jmp 	RUNNewLine
.11f5					_GONext:
.11f5	18		clc				clc 								; advance to next line.
.11f6	b2 18		lda ($18)			lda 	(codePtr)
.11f8	65 18		adc $18				adc 	codePtr
.11fa	85 18		sta $18				sta 	codePtr
.11fc	90 e1		bcc $11df			bcc 	_GOSearch
.11fe	e6 19		inc $19				inc 	codePtr+1
.1200	80 dd		bra $11df			bra 	_GOSearch
.1202					_GOError:
.1202	4c 73 28	jmp $2873		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1205					Command_Input:
.1205	a9 ff		lda #$ff			lda 	#$FF
.1207	8d 0c 05	sta $050c			sta 	InputFlag
.120a	80 03		bra $120f			bra 	Command_IP_Main
.120c					Command_Print:
.120c	9c 0c 05	stz $050c			stz 	InputFlag
.120f					Command_IP_Main:
.120f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1210					_CPLoop:
.1210	08		php				php 								; save last action flag
.1211	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1213	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1215	f0 48		beq $125f			beq 	_CPExit 					; without consuming
.1217	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1219	f0 44		beq $125f			beq 	_CPExit
.121b	68		pla				pla 								; throw last action flag
.121c	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.121e	c8		iny				iny
.121f	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1221	f0 39		beq $125c			beq 	_CPContinueWithSameLine
.1223	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1225	f0 30		beq $1257			beq 	_CPTab
.1227	88		dey				dey 								; undo the get.
.1228	2c 0c 05	bit $050c			bit 	InputFlag 					; check for Input
.122b	10 0b		bpl $1238			bpl	 	_CPNotInput
.122d	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.122f	c9 40		cmp #$40			cmp 	#$40
.1231	d0 05		bne $1238			bne 	_CPNotInput
.1233	20 68 12	jsr $1268			jsr 	_CPInputCode 				; input code
.1236	80 d7		bra $120f			bra 	Command_IP_Main 			; and go round again.
.1238					_CPNotInput:
.1238	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; evaluate expression.
.123b	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.123d	10 0e		bpl $124d			bpl 	_CPNumber
.123f	5a		phy				phy
.1240	18		clc				clc 								; string address to YX
.1241	a5 08		lda $08				lda 	IFR0+IM0
.1243	aa		tax				tax
.1244	a5 09		lda $09				lda 	IFR0+IM1
.1246	a8		tay				tay
.1247	20 9c 12	jsr $129c			jsr 	CPPrintYX 					; print YX
.124a	7a		ply				ply
.124b	80 c2		bra $120f			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.124d					_CPNumber:
.124d	5a		phy				phy
.124e	20 37 30	jsr $3037			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1251	20 9c 12	jsr $129c			jsr 	CPPrintYX 					; print string at YX
.1254	7a		ply				ply
.1255	80 b8		bra $120f			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1257					_CPTab:
.1257	a9 09		lda #$09			lda 	#9 							; print TAB
.1259	20 b4 12	jsr $12b4			jsr 	CPPrintA
.125c					_CPContinueWithSameLine:
.125c	38		sec				sec 								; loop round with carry set, which
.125d	80 b1		bra $1210			bra 	_CPLoop 					; will inhibit final CR
.125f					_CPExit:
.125f	28		plp				plp 								; get last action flag
.1260	b0 05		bcs $1267			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1262	a9 0d		lda #$0d			lda 	#13 						; print new line
.1264	20 b4 12	jsr $12b4			jsr 	CPPrintA
.1267					_CPExit2:
.1267	60		rts				rts
.1268					_CPInputCode:
.1268	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get the term.
.126b	5a		phy				phy 								; save position
.126c	20 b1 12	jsr $12b1			jsr 	CPInputA					; input a line to YX
.126f	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1271	30 18		bmi $128b			bmi 	_CPInputString
.1273	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1275	48		pha				pha
.1276	a5 09		lda $09				lda 	IFR0+IM1
.1278	48		pha				pha
.1279	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.127b	84 23		sty $23				sty 	zTemp0+1
.127d	20 7d 1a	jsr $1a7d			jsr 	VALConversionZTemp0
.1280	68		pla				pla 								; do the assign.
.1281	85 23		sta $23				sta 	zTemp0+1
.1283	68		pla				pla
.1284	85 22		sta $22				sta 	zTemp0
.1286	20 dc 12	jsr $12dc			jsr 	AssignNumber
.1289	7a		ply				ply
.128a	60		rts				rts
.128b					_CPInputString:
.128b	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.128d	85 22		sta $22				sta 	zTemp0
.128f	a5 09		lda $09				lda 	IFR0+IM1
.1291	85 23		sta $23				sta 	zTemp0+1
.1293	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1295	84 09		sty $09				sty 	IFR0+IM1
.1297	20 f3 12	jsr $12f3			jsr 	AssignString 				; assign the string
.129a	7a		ply				ply 								; exit
.129b	60		rts				rts
.129c					CPPrintYX:
.129c	86 22		stx $22				stx 	zTemp0
.129e	84 23		sty $23				sty 	zTemp0+1
.12a0	b2 22		lda ($22)			lda 	(zTemp0)
.12a2	aa		tax				tax
.12a3	f0 0b		beq $12b0			beq 	_CPPrintExit
.12a5	a0 01		ldy #$01			ldy 	#1
.12a7					_CPPrintAYXLoop:
.12a7	b1 22		lda ($22),y			lda 	(zTemp0),y
.12a9	20 b4 12	jsr $12b4			jsr 	CPPrintA
.12ac	c8		iny				iny
.12ad	ca		dex				dex
.12ae	d0 f7		bne $12a7			bne 	_CPPrintAYXLoop
.12b0					_CPPrintExit:
.12b0	60		rts				rts
.12b1					CPInputA:
.12b1	4c df ff	jmp $ffdf			jmp 	OSEnterLine
.12b4					CPPrintA:
.12b4	4c f4 ff	jmp $fff4			jmp 	OSWriteScreen
.050c					InputFlag:
>050c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12b7					CommandLET:
.12b7	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term
.12ba	90 6f		bcc $132b			bcc 	CLError 					; must be a reference term.
.12bc	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12be	48		pha				pha
.12bf	a5 09		lda $09				lda 	IFR0+IM1
.12c1	48		pha				pha
.12c2	a5 0b		lda $0b				lda 	IFR0+IExp
.12c4	48		pha				pha
.12c5	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12c7	20 a3 28	jsr $28a3			jsr 	ERRCheckA
.12ca	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; right hand side.
.12cd	68		pla				pla 								; type of l-expr
.12ce	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d0	30 5c		bmi $132e			bmi 	CLType
.12d2	fa		plx				plx 	 							; pop target address to zTemp0
.12d3	86 23		stx $23				stx 	zTemp0+1
.12d5	fa		plx				plx
.12d6	86 22		stx $22				stx 	zTemp0
.12d8					AssignData:
.12d8	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12da	30 17		bmi $12f3			bmi 	AssignString
.12dc					AssignNumber:
.12dc	5a		phy				phy
.12dd	a0 03		ldy #$03			ldy 	#3
.12df	a5 0b		lda $0b				lda 	IFR0+IExp
.12e1	91 22		sta ($22),y			sta 	(zTemp0),y
.12e3	88		dey				dey
.12e4	a5 0a		lda $0a				lda 	IFR0+IM2
.12e6	91 22		sta ($22),y			sta 	(zTemp0),y
.12e8	88		dey				dey
.12e9	a5 09		lda $09				lda 	IFR0+IM1
.12eb	91 22		sta ($22),y			sta 	(zTemp0),y
.12ed	a5 08		lda $08				lda 	IFR0+IM0
.12ef	92 22		sta ($22)			sta 	(zTemp0)
.12f1	7a		ply				ply
.12f2	60		rts				rts
.12f3					AssignString:
.12f3	5a		phy				phy
.12f4	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12f6	b1 22		lda ($22),y			lda 	(zTemp0),y
.12f8	12 22		ora ($22)			ora 	(zTemp0)
.12fa	f0 23		beq $131f			beq 	_CLConcreteString
.12fc	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12fe	85 24		sta $24				sta 	zTemp1
.1300	b1 22		lda ($22),y			lda 	(zTemp0),y
.1302	85 25		sta $25				sta 	zTemp1+1
.1304	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.1306	38		sec				sec 								; we want 3 for slot size, status, string size.
.1307	e9 03		sbc #$03			sbc 	#3
.1309	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.130b	90 12		bcc $131f			bcc 	_CLConcreteString 			; if so, concrete the string again.
.130d	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.130f	1a		inc a				inc 	a
.1310	aa		tax				tax
.1311	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1313					_CLReplaceString:
.1313	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1315	c8		iny				iny
.1316	c8		iny				iny
.1317	91 24		sta ($24),y			sta 	(zTemp1),y
.1319	88		dey				dey
.131a	ca		dex				dex
.131b	d0 f6		bne $1313			bne 	_CLReplaceString
.131d	80 0a		bra $1329			bra 	_CLExit
.131f					_CLConcreteString:
.131f	20 16 29	jsr $2916			jsr 	StringConcrete  			; concreted string in XA.
.1322	a0 01		ldy #$01			ldy 	#1 							; store the address
.1324	92 22		sta ($22)			sta 	(zTemp0)
.1326	8a		txa				txa
.1327	91 22		sta ($22),y			sta 	(zTemp0),y
.1329					_CLExit:
.1329	7a		ply				ply
.132a	60		rts				rts
.132b					CLError:
.132b	4c 11 28	jmp $2811		jmp	ErrorV_variable
.132e					CLType:
.132e	4c 0e 27	jmp $270e		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1331					Command_LIST:
.1331	9c 0d 05	stz $050d			stz 	CLFrom 						; default from
.1334	9c 0e 05	stz $050e			stz 	CLFrom+1
.1337	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1339	c9 99		cmp #$99			cmp 	#PR_COMMA
.133b	f0 1d		beq $135a			beq 	_CLToLine
.133d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.133f	f0 37		beq $1378			beq 	_CLDefaultTo
.1341	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1344	a5 08		lda $08				lda 	IFR0+IM0
.1346	8d 0d 05	sta $050d			sta 	CLFrom
.1349	8d 0f 05	sta $050f			sta 	CLTo
.134c	a5 09		lda $09				lda 	IFR0+IM1
.134e	8d 0e 05	sta $050e			sta 	CLFrom+1
.1351	8d 10 05	sta $0510			sta 	CLTo+1
.1354	b1 18		lda ($18),y			lda 	(codePtr),y
.1356	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1358	f0 26		beq $1380			beq 	_CLList
.135a					_CLToLine:
.135a	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.135c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.135e	f0 18		beq $1378			beq 	_CLDefaultTo
.1360	20 9b 28	jsr $289b			jsr 	ERRCheckComma 				; sep comma
.1363	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1365	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1367	f0 0f		beq $1378			beq 	_CLDefaultTo
.1369	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; there's a To value.
.136c	a5 08		lda $08				lda 	IFR0+IM0
.136e	8d 0f 05	sta $050f			sta 	CLTo
.1371	a5 09		lda $09				lda 	IFR0+IM1
.1373	8d 10 05	sta $0510			sta 	CLTo+1
.1376	80 08		bra $1380			bra 	_CLList
.1378					_CLDefaultTo:
.1378	a9 ff		lda #$ff			lda 	#$FF
.137a	8d 0f 05	sta $050f			sta 	CLTo
.137d	8d 10 05	sta $0510			sta 	CLTo+1
.1380					_CLList:
.1380	ad 20 05	lda $0520			lda 	PGMBaseHigh 				; back to the program start
.1383	85 19		sta $19				sta 	codePtr+1
.1385	64 18		stz $18				stz 	codePtr
.1387	a2 f4		ldx #$f4			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1389	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.138b	20 f6 1e	jsr $1ef6			jsr 	TOKSetDetokeniseOutput
.138e					_CLLoop:
.138e	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1390	f0 51		beq $13e3			beq 	_CLExit
.1392	20 e5 ff	jsr $ffe5			jsr 	OSKeyboardDataProcess
.1395	20 e8 ff	jsr $ffe8			jsr 	OSCheckBreak 				; check escape.
.1398	d0 4c		bne $13e6			bne 	_CLBreak
.139a	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.139c	20 e9 13	jsr $13e9			jsr 	_CLCompareLine
.139f	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a1	f0 33		beq $13d6			beq 	_CLNext
.13a3	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13a5	20 e9 13	jsr $13e9			jsr 	_CLCompareLine
.13a8	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13aa	f0 2a		beq $13d6			beq 	_CLNext
.13ac	a0 02		ldy #$02			ldy 	#2 							; print line #
.13ae	b1 18		lda ($18),y			lda 	(codePtr),y
.13b0	aa		tax				tax
.13b1	88		dey				dey
.13b2	b1 18		lda ($18),y			lda 	(codePtr),y
.13b4	20 f4 29	jsr $29f4			jsr 	WriteIntXA
.13b7					_CLSpacing:
.13b7	a9 20		lda #$20			lda 	#32
.13b9	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.13bc	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.13bf	e0 06		cpx #$06			cpx 	#6
.13c1	d0 f4		bne $13b7			bne 	_CLSpacing
.13c3	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13c5	a5 18		lda $18				lda 	codePtr
.13c7	18		clc				clc
.13c8	69 03		adc #$03			adc 	#3
.13ca	aa		tax				tax
.13cb	90 01		bcc $13ce			bcc 	_CLNoCarry2
.13cd	c8		iny				iny
.13ce					_CLNoCarry2:
.13ce	20 9b 1e	jsr $1e9b			jsr 	TOKDetokenise
.13d1	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d3	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.13d6					_CLNext:
.13d6	18		clc				clc 								; advance to next line.
.13d7	b2 18		lda ($18)			lda 	(codePtr)
.13d9	65 18		adc $18				adc 	codePtr
.13db	85 18		sta $18				sta 	codePtr
.13dd	90 02		bcc $13e1			bcc 	_CLNoCarry
.13df	e6 19		inc $19				inc 	codePtr+1
.13e1					_CLNoCarry:
.13e1	80 ab		bra $138e			bra 	_CLLoop
.13e3					_CLExit:
.13e3	4c 13 2a	jmp $2a13			jmp 	WarmStart
.13e6					_CLBreak:
.13e6	4c 69 28	jmp $2869		jmp	ErrorV_break
.13e9					_CLCompareLine:
.13e9	a0 01		ldy #$01			ldy 	#1
.13eb	38		sec				sec
.13ec	b1 18		lda ($18),y			lda 	(codePtr),y
.13ee	fd 0d 05	sbc $050d,x			sbc 	CLFrom,x
.13f1	85 22		sta $22				sta 	zTemp0
.13f3	c8		iny				iny
.13f4	b1 18		lda ($18),y			lda 	(codePtr),y
.13f6	fd 0e 05	sbc $050e,x			sbc 	CLFrom+1,x
.13f9	90 0a		bcc $1405			bcc 	_CLIsNegative
.13fb	d0 05		bne $1402			bne 	_CLIsPositive
.13fd	a5 22		lda $22				lda 	zTemp0
.13ff	d0 01		bne $1402			bne 	_CLIsPositive
.1401	60		rts				rts
.1402					_CLIsPositive:
.1402	a9 01		lda #$01			lda 	#1
.1404	60		rts				rts
.1405					_CLIsNegative:
.1405	a9 ff		lda #$ff			lda 	#255
.1407	60		rts				rts
.050d					CLFrom:
>050d							.fill 	2
.050f					CLTo:
>050f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1408					Command_NEW:
.1408	20 a4 20	jsr $20a4			jsr 	PGMNewProgram 				; Reset current program
.140b	20 3c 10	jsr $103c			jsr 	ClearCode 					; Run CLR
.140e	4c 30 15	jmp $1530			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1411					Command_READ:
.1411	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term to R0
.1414	90 35		bcc $144b			bcc 	_CRSyntax 					; fail if not a reference.
.1416	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1418	48		pha				pha
.1419	a5 09		lda $09				lda 	IFR0+IM1
.141b	48		pha				pha
.141c	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.141e	48		pha				pha
.141f	20 a4 14	jsr $14a4			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1422	ad 15 05	lda $0515			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1425	d0 27		bne $144e			bne 	_CRHaveData  				; forward for the next one.
.1427					_CRNextLine:
.1427	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1429	f0 1a		beq $1445			beq 	_CRNoData
.142b					_CRKeepSearching:
.142b	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.142d	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.142f	20 ee 25	jsr $25ee			jsr 	ScanForward
.1432	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1434	f0 18		beq $144e			beq 	_CRHaveData 				; found it
.1436	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1438	18		clc				clc 								; try the next line, keep going.
.1439	b2 18		lda ($18)			lda 	(codePtr)
.143b	65 18		adc $18				adc 	codePtr
.143d	85 18		sta $18				sta 	codePtr
.143f	90 e6		bcc $1427			bcc 	_CRNextLine
.1441	e6 19		inc $19				inc 	codePtr+1
.1443	80 e2		bra $1427			bra 	_CRNextLine
.1445					_CRNoData:
.1445	4c 96 27	jmp $2796		jmp	ErrorV_data
.1448					_CLType:
.1448	4c 0e 27	jmp $270e		jmp	ErrorV_type
.144b					_CRSyntax:
.144b	4c de 26	jmp $26de		jmp	ErrorV_syntax
.144e					_CRHaveData:
.144e	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1451	68		pla				pla 								; type of l-expr
.1452	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1454	30 f2		bmi $1448			bmi 	_CLType
.1456	68		pla				pla 								; restore address
.1457	85 23		sta $23				sta 	zTemp0+1
.1459	68		pla				pla
.145a	85 22		sta $22				sta 	zTemp0
.145c	20 d8 12	jsr $12d8			jsr 	AssignData 					; write R0 there.
.145f	9c 15 05	stz $0515			stz 	dataInStatement 			; clear in data flag
.1462	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1464	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1466	d0 04		bne $146c			bne 	_CRSwapBack
.1468	c8		iny				iny 								; consume comma
.1469	ee 15 05	inc $0515			inc 	dataInStatement 			; set in data statement flag.
.146c					_CRSwapBack:
.146c	20 a4 14	jsr $14a4			jsr 	SwapCodeDataPointers		; swap them back.
.146f	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1471	c8		iny				iny
.1472	c9 99		cmp #$99			cmp 	#PR_COMMA
.1474	f0 9b		beq $1411			beq 	Command_READ 				; if so go round again.
.1476	88		dey				dey 								; unpick get.
.1477	60		rts				rts
.1478					Command_DATA:
.1478	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.147a	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.147c	20 ee 25	jsr $25ee			jsr 	ScanForward
.147f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1481	d0 01		bne $1484			bne 	_CDNotEOL
.1483	88		dey				dey
.1484					_CDNotEOL:
.1484	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1485					Command_REM:
.1485					Command_REM2:
.1485	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1487	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1489	d0 06		bne $1491			bne 	_CRExit
.148b	c8		iny				iny 								; skip over it, it's a comment.
.148c	98		tya				tya
.148d	38		sec				sec
.148e	71 18		adc ($18),y			adc 	(codePtr),y
.1490	a8		tay				tay
.1491					_CRExit:
.1491	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1492					S
.1492					Command_RESTORE:
.1492	ad 20 05	lda $0520			lda 	PGMBaseHigh 				; back to the program start
.1495	8d 12 05	sta $0512			sta 	dataPtr+1
.1498	9c 11 05	stz $0511			stz 	dataPtr
.149b	a9 03		lda #$03			lda 	#3 							; position start of line
.149d	8d 13 05	sta $0513			sta 	dataPos
.14a0	9c 15 05	stz $0515			stz 	dataInStatement 			; not in statement
.14a3	60		rts				rts
.14a4					SwapCodeDataPointers:
.14a4	ad 11 05	lda $0511			lda 	dataPtr 					; swap LSB of code/data
.14a7	a6 18		ldx $18				ldx 	codePtr
.14a9	85 18		sta $18				sta 	codePtr
.14ab	8e 11 05	stx $0511			stx 	dataPtr
.14ae	ad 12 05	lda $0512			lda 	dataPtr+1 					; swap MSB of code/data
.14b1	a6 19		ldx $19				ldx 	codePtr+1
.14b3	85 19		sta $19				sta 	codePtr+1
.14b5	8e 12 05	stx $0512			stx 	dataPtr+1
.14b8	ad 13 05	lda $0513			lda 	dataPos 					; swap dataPos and Y
.14bb	8c 13 05	sty $0513			sty 	dataPos
.14be	a8		tay				tay
.14bf	60		rts				rts
.0511					dataPtr:
>0511							.fill 	2
.0513					dataPos:
>0513							.fill 	2
.0515					dataInStatement:
>0515							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c0					Command_RUN:
.14c0	20 3c 10	jsr $103c			jsr 	ClearCode					; clear everything out.
.14c3	ad 20 05	lda $0520			lda 	PGMBaseHigh 				; back to the program start
.14c6	85 19		sta $19				sta 	codePtr+1
.14c8	64 18		stz $18				stz 	codePtr
.14ca	80 0b		bra $14d7			bra 	RUNNewLine
.14cc					RUNEndOfLine:
.14cc	18		clc				clc 								; advance to next line.
.14cd	b2 18		lda ($18)			lda 	(codePtr)
.14cf	65 18		adc $18				adc 	codePtr
.14d1	85 18		sta $18				sta 	codePtr
.14d3	90 02		bcc $14d7			bcc 	_RELNoCarry
.14d5	e6 19		inc $19				inc 	codePtr+1
.14d7					_RELNoCarry:
.14d7					RUNNewLine:
.14d7	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14d9	9a		txs				txs
.14da	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14dc	f0 52		beq $1530			beq 	Command_END
.14de	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e0	b1 18		lda ($18),y			lda 	(codePtr),y
.14e2	8d 2c 06	sta $062c			sta 	ERRLine
.14e5	c8		iny				iny
.14e6	b1 18		lda ($18),y			lda 	(codePtr),y
.14e8	8d 2d 06	sta $062d			sta 	ERRLine+1
.14eb	c8		iny				iny 								; offset into codePtr for start of line.
.14ec					RUNNewCommand:
.14ec	9c 27 06	stz $0627			stz 	stringInitialised 			; reset string system.
.14ef	ce 16 05	dec $0516			dec 	checkCounter
.14f2	d0 0a		bne $14fe			bne 	_RNCNoCheck
.14f4	5a		phy				phy 								; keyboard check.
.14f5	20 e5 ff	jsr $ffe5			jsr 	OSKeyboardDataProcess
.14f8	7a		ply				ply
.14f9	20 e8 ff	jsr $ffe8			jsr 	OSCheckBreak 				; check escape.
.14fc	d0 1e		bne $151c			bne 	_RUNBreak
.14fe					_RNCNoCheck:
.14fe	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1500	10 1d		bpl $151f			bpl		_RUNNotToken 				; probably an identifier
.1502	c8		iny				iny 								; consume token
.1503	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1505	f0 e5		beq $14ec			beq 	RUNNewCommand
.1507	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1509	b0 0e		bcs $1519			bcs 	_RUNSyntax
.150b	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.150d	90 0a		bcc $1519			bcc 	_RUNSyntax
.150f	0a		asl a				asl 	a 							; double into X.
.1510	aa		tax				tax
.1511	20 16 15	jsr $1516			jsr 	_RUNDispatchMain			; call the main dispatcher
.1514	80 d6		bra $14ec			bra 	RUNNewCommand
.1516					_RUNDispatchMain:
.1516	7c 7f 1d	jmp ($1d7f,x)			jmp 	(VectorTable,x)
.1519					_RUNSyntax:
.1519	4c de 26	jmp $26de		jmp	ErrorV_syntax
.151c					_RUNBreak:
.151c	4c 69 28	jmp $2869		jmp	ErrorV_break
.151f					_RUNNotToken:
.151f	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1521	90 f6		bcc $1519			bcc 	_RUNSyntax
.1523	20 b7 12	jsr $12b7			jsr 	CommandLET 					; assignment
.1526	80 c4		bra $14ec			bra 	RUNNewCommand 				; loop round.
.1528					Command_Shift_Handler:
.1528	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.152a	c8		iny				iny
.152b	0a		asl a				asl 	a 							; double into X
.152c	aa		tax				tax
.152d	7c 7f 1e	jmp ($1e7f,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1530					Command_END:
.1530	4c 13 2a	jmp $2a13			jmp 	WarmStart
.0516					checkCounter:
>0516							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1533					Command_STOP:
.1533	4c 82 27	jmp $2782		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1536					Command_Sys:
.1536	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; execution address
.1539	5a		phy				phy
.153a	ad 74 06	lda $0674			lda 	('A'-'A')*4 + FastVariables ; load AXY
.153d	ae d0 06	ldx $06d0			ldx 	('X'-'A')*4 + FastVariables
.1540	ac d4 06	ldy $06d4			ldy 	('Y'-'A')*4 + FastVariables
.1543	20 48 15	jsr $1548			jsr 	_CSCallIFR0 				; call the code
.1546	7a		ply				ply
.1547	60		rts				rts
.1548					_CSCallIFR0:
.1548	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.154b					NoExec01:
.154b					NoExec02:
.154b					NoExec03:
.154b					NoExec04:
.154b					NoExec05:
.154b					NoExec06:
.154b					NoExec07:
.154b					NoExec08:
.154b	4c de 26	jmp $26de		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.154e					EXPBinAdd:
.154e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1550	30 6f		bmi $15c1			bmi 	EXPConcatenate
.1552	a2 0c		ldx #$0c			ldx 	#IFR1
.1554	4c 32 2c	jmp $2c32			jmp 	IFloatAdd
.1557					EXPBinSub:
.1557	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1559	30 3f		bmi $159a			bmi 	EXPTypeError
.155b	a2 0c		ldx #$0c			ldx 	#IFR1
.155d	4c 2b 2c	jmp $2c2b			jmp 	IFloatSubtract
.1560					EXPBinMul:
.1560	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.1562	30 36		bmi $159a			bmi 	EXPTypeError
.1564	a2 0c		ldx #$0c			ldx 	#IFR1
.1566	4c dc 2c	jmp $2cdc			jmp 	IFloatMultiply
.1569					EXPBinFDiv:
.1569	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.156b	30 2d		bmi $159a			bmi 	EXPTypeError
.156d	a2 0c		ldx #$0c			ldx 	#IFR1
.156f	20 5e 2f	jsr $2f5e			jsr 	IFloatDivideFloat
.1572	b0 0f		bcs $1583			bcs 	EXPDZero
.1574	60		rts				rts
.1575					EXPBinIDiv:
.1575	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1577	30 21		bmi $159a			bmi 	EXPTypeError
.1579	a2 0c		ldx #$0c			ldx 	#IFR1
.157b	20 5e 2f	jsr $2f5e			jsr 	IFloatDivideFloat
.157e	b0 03		bcs $1583			bcs 	EXPDZero
.1580	4c 3b 2f	jmp $2f3b			jmp 	IFloatIntegerR0
.1583					EXPDZero:
.1583	4c 57 27	jmp $2757		jmp	ErrorV_divzero
.1586					EXPBinIMod:
.1586	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1588	30 10		bmi $159a			bmi 	EXPTypeError
.158a	a2 0c		ldx #$0c			ldx 	#IFR1
.158c	5a		phy				phy
.158d	20 71 2e	jsr $2e71			jsr 	IFPreProcessBitwise 		; set up everything.
.1590	d0 05		bne $1597			bne 	EXPDRange
.1592	20 aa 2d	jsr $2daa			jsr 	IFloatModulusInteger
.1595	7a		ply				ply
.1596	60		rts				rts
.1597					EXPDRange:
.1597	4c ef 26	jmp $26ef		jmp	ErrorV_range
.159a					EXPTypeError:
.159a	4c 0e 27	jmp $270e		jmp	ErrorV_type
.159d					EXPBinAnd:
.159d	24 0b		bit $0b				bit 	IFR0+IExp
.159f	30 f9		bmi $159a			bmi 	EXPTypeError
.15a1	a2 0c		ldx #$0c			ldx 	#IFR1
.15a3	20 2c 2e	jsr $2e2c			jsr 	IFloatBitwiseAnd
.15a6	b0 ef		bcs $1597			bcs 	EXPDRange
.15a8	60		rts				rts
.15a9					EXPBinOr:
.15a9	24 0b		bit $0b				bit 	IFR0+IExp
.15ab	30 ed		bmi $159a			bmi 	EXPTypeError
.15ad	a2 0c		ldx #$0c			ldx 	#IFR1
.15af	20 43 2e	jsr $2e43			jsr 	IFloatBitwiseOr
.15b2	b0 e3		bcs $1597			bcs 	EXPDRange
.15b4	60		rts				rts
.15b5					EXPBinXor:
.15b5	24 0b		bit $0b				bit 	IFR0+IExp
.15b7	30 e1		bmi $159a			bmi 	EXPTypeError
.15b9	a2 0c		ldx #$0c			ldx 	#IFR1
.15bb	20 5a 2e	jsr $2e5a			jsr 	IFloatBitwiseXor
.15be	b0 d7		bcs $1597			bcs 	EXPDRange
.15c0	60		rts				rts
.15c1					EXPConcatenate:
.15c1	18		clc				clc
.15c2	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15c4	72 0c		adc ($0c)			adc 	(IFR1)
.15c6	b0 2d		bcs $15f5			bcs 	_EXPCError 					; far too long.
.15c8	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15ca	da		phx				phx
.15cb	a6 09		ldx $09				ldx 	IFR0+1
.15cd	da		phx				phx
.15ce	20 89 29	jsr $2989			jsr 	StringTempAllocate 			; allocate string, set up return
.15d1	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15d3	a5 0c		lda $0c				lda 	IFR1
.15d5	20 de 15	jsr $15de			jsr 	_EXPCCopyXA
.15d8	fa		plx				plx 								; copy second string
.15d9	68		pla				pla
.15da	20 de 15	jsr $15de			jsr 	_EXPCCopyXA
.15dd	60		rts				rts
.15de					_EXPCCopyXA:
.15de	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15e0	85 22		sta $22				sta 	zTemp0
.15e2	b2 22		lda ($22)			lda 	(zTemp0)					; length of string
.15e4	f0 0e		beq $15f4			beq 	_EXPCCExit 					; nothing in string
.15e6	aa		tax				tax 								; count
.15e7	5a		phy				phy 								; start position
.15e8	a0 01		ldy #$01			ldy 	#1
.15ea					_EXPCCLoop:
.15ea	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15ec	20 be 29	jsr $29be			jsr 	StringTempWrite
.15ef	c8		iny				iny
.15f0	ca		dex				dex
.15f1	d0 f7		bne $15ea			bne 	_EXPCCLoop
.15f3	7a		ply				ply
.15f4					_EXPCCExit:
.15f4	60		rts				rts
.15f5					_EXPCError:
.15f5	4c fb 27	jmp $27fb		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15f8					EXPReturnTrue:
.15f8	a2 08		ldx #$08			ldx 	#IFR0
.15fa	a9 01		lda #$01			lda 	#1
.15fc	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.15ff	20 45 32	jsr $3245			jsr 	IFloatNegate
.1602	60		rts				rts
.1603					EXPReturnFalse:
.1603	a2 08		ldx #$08			ldx 	#IFR0
.1605	4c 3a 32	jmp $323a			jmp 	IFloatSetZero
.1608					EXPCompareEqual:
.1608	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.160b	c9 00		cmp #$00			cmp 	#0
.160d	f0 e9		beq $15f8			beq 	EXPReturnTrue
.160f	80 f2		bra $1603			bra 	EXPReturnFalse
.1611					EXPCompareLess:
.1611	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1614	c9 ff		cmp #$ff			cmp 	#$FF
.1616	f0 e0		beq $15f8			beq 	EXPReturnTrue
.1618	80 e9		bra $1603			bra 	EXPReturnFalse
.161a					EXPCompareGreater:
.161a	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.161d	c9 01		cmp #$01			cmp 	#1
.161f	f0 d7		beq $15f8			beq 	EXPReturnTrue
.1621	80 e0		bra $1603			bra 	EXPReturnFalse
.1623					EXPCompareNotEqual:
.1623	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1626	c9 00		cmp #$00			cmp 	#0
.1628	d0 ce		bne $15f8			bne 	EXPReturnTrue
.162a	80 d7		bra $1603			bra 	EXPReturnFalse
.162c					EXPCompareLessEqual:
.162c	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.162f	c9 01		cmp #$01			cmp 	#1
.1631	d0 c5		bne $15f8			bne 	EXPReturnTrue
.1633	80 ce		bra $1603			bra 	EXPReturnFalse
.1635					EXPCompareGreaterEqual:
.1635	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1638	c9 ff		cmp #$ff			cmp 	#$FF
.163a	d0 bc		bne $15f8			bne 	EXPReturnTrue
.163c	80 c5		bra $1603			bra 	EXPReturnFalse
.163e					EXPCompareBaseCode:
.163e	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1640	30 10		bmi $1652			bmi 	_EXCBCString
.1642	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1644	20 09 2f	jsr $2f09			jsr 	IFloatCompare
.1647	a5 08		lda $08				lda 	IFR0+IM0
.1649	f0 06		beq $1651			beq 	_EXCBCExit 					; return 0 if zero
.164b	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.164d	50 02		bvc $1651			bvc 	_EXCBCExit
.164f	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1651					_EXCBCExit:
.1651	60		rts				rts
.1652					_EXCBCString:
.1652	5a		phy				phy
.1653	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1655	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1657	90 02		bcc $165b			bcc 	_EXCBCSmaller
.1659	b2 0c		lda ($0c)			lda 	(IFR1)
.165b					_EXCBCSmaller:
.165b	aa		tax				tax
.165c	f0 0d		beq $166b			beq 	_EXCBCMatches 				; if zero common length matches
.165e	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1660					_EXCBCCheckSmallerMatches:
.1660	c8		iny				iny 								; compare directly as far as common length
.1661	38		sec				sec
.1662	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1664	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1666	d0 08		bne $1670			bne 	_EXCBCExit2
.1668	ca		dex				dex
.1669	d0 f5		bne $1660			bne 	_EXCBCCheckSmallerMatches
.166b					_EXCBCMatches:
.166b	38		sec				sec
.166c	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.166e	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1670					_EXCBCExit2:
.1670	7a		ply				ply
.1671	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.1673	f0 04		beq $1679			beq 	_EXCBCReturn
.1675	30 03		bmi $167a			bmi 	_EXCBCFF 					; return $FF if <
.1677	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1679					_EXCBCReturn:
.1679	60		rts				rts
.167a					_EXCBCFF:
.167a	a9 ff		lda #$ff			lda 	#$FF
.167c	60		rts				rts
.167d					_EXCBCRange:
.167d	4c ef 26	jmp $26ef		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1680					EXPBinLeft:
.1680	a9 ff		lda #$ff			lda 	#$FF
.1682	8d 17 05	sta $0517			sta 	EXPShiftLeftFlag
.1685	4c 8b 16	jmp $168b			jmp 	EXPShiftCommon
.1688					EXPBinRight:
.1688	9c 17 05	stz $0517			stz 	EXPShiftLeftFlag
.168b					EXPShiftCommon:
.168b	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.168d	05 0f		ora $0f				ora 	IFR1+IExp
.168f	29 7f		and #$7f			and 	#$7F
.1691	d0 35		bne $16c8			bne 	_EXPSRange
.1693	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1695	29 e0		and #$e0			and 	#$E0
.1697	05 09		ora $09				ora 	IFR0+IM1
.1699	05 0a		ora $0a				ora 	IFR0+IM2
.169b	d0 25		bne $16c2			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.169d	5a		phy				phy
.169e	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16a0	29 1f		and #$1f			and 	#$1F
.16a2	f0 17		beq $16bb			beq 	_EXPSExit 					; exit if zero
.16a4	a8		tay				tay
.16a5					_EXPSLoop:
.16a5	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16a7	2c 17 05	bit $0517			bit 	EXPShiftLeftFlag
.16aa	30 05		bmi $16b1			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16ac	20 69 32	jsr $3269			jsr 	IFloatShiftRight
.16af	80 07		bra $16b8			bra 	_EXPSContinue
.16b1					_EXPSShiftLeft:
.16b1	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.16b4	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16b6	30 10		bmi $16c8			bmi 	_EXPSRange
.16b8					_EXPSContinue:
.16b8	88		dey				dey 								; do it Y times
.16b9	d0 ea		bne $16a5			bne 	_EXPSLoop
.16bb					_EXPSExit:
.16bb	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16bd	20 cb 31	jsr $31cb			jsr 	IFloatCopyFromRegister
.16c0	7a		ply				ply
.16c1	60		rts				rts
.16c2					_EXPSShiftZero:
.16c2	a2 08		ldx #$08			ldx 	#IFR0
.16c4	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.16c7	60		rts				rts
.16c8					_EXPSRange:
.16c8	4c ef 26	jmp $26ef		jmp	ErrorV_range
.0517					EXPShiftLeftFlag:
>0517							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16cb					EXPEvaluateExpression:
.16cb	a9 00		lda #$00			lda 	#0 							; current precedence
.16cd					EXPEvaluateExpressionPrecedenceA:
.16cd	48		pha				pha
.16ce	20 48 17	jsr $1748			jsr 	EXPTermValueR0				; do first term.
.16d1					_EELoop:
.16d1	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16d3	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16d5	90 31		bcc $1708			bcc 	_EEExit
.16d7	aa		tax				tax 								; access the precedence of the operator.
.16d8	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16d9	dd a6 1a	cmp $1aa6,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16dc	b0 2b		bcs $1709			bcs 	_EEExit2
.16de	48		pha				pha 								; save current precedence.
.16df	da		phx				phx 								; save operator
.16e0	c8		iny				iny 								; consume operator
.16e1	da		phx				phx
.16e2	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16e4	20 89 31	jsr $3189			jsr 	IFloatPushRx
.16e7	fa		plx				plx
.16e8	bd a6 1a	lda $1aa6,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16eb	20 cd 16	jsr $16cd			jsr 	EXPEvaluateExpressionPrecedenceA
.16ee	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16f0	20 aa 31	jsr $31aa			jsr 	IFloatPullRx
.16f3	fa		plx				plx 								; operator
.16f4	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16f6	45 0f		eor $0f				eor 	IFR1+IExp
.16f8	30 08		bmi $1702			bmi 	_EEType
.16fa					_EETypeOkay:
.16fa	8a		txa				txa
.16fb	0a		asl a				asl 	a 							; double -> X
.16fc	aa		tax				tax
.16fd	20 05 17	jsr $1705			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1700	80 cf		bra $16d1			bra 	_EELoop
.1702					_EEType:
.1702	4c 0e 27	jmp $270e		jmp	ErrorV_type
.1705					_EECallBinary:
.1705	7c 7f 1d	jmp ($1d7f,x)			jmp 	(VectorTable,x)
.1708					_EEExit:
.1708	68		pla				pla 								; throw precedence
.1709					_EEExit2:
.1709	18		clc				clc
.170a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.170b					EXPEvalNumber:
.170b	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; get a value
.170e	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1710	30 01		bmi $1713			bmi 	EVUType
.1712	60		rts				rts
.1713					EVUType:
.1713	4c 0e 27	jmp $270e		jmp	ErrorV_type
.1716					EXPEvalInteger:
.1716	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1719	20 3b 2f	jsr $2f3b			jsr 	IFloatIntegerR0
.171c	60		rts				rts
.171d					EXPEvalInteger16:
.171d	20 16 17	jsr $1716			jsr 	EXPEvalInteger 				; get integer
.1720	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1722	d0 21		bne $1745			bne 	EVURange
.1724	a6 09		ldx $09				ldx 	IFR0+IM1
.1726	a5 08		lda $08				lda 	IFR0+IM0
.1728	60		rts				rts
.1729					EXPEvalInteger8:
.1729	20 16 17	jsr $1716			jsr 	EXPEvalInteger 				; get integer
.172c	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.172e	05 09		ora $09				ora 	IFR0+IM1
.1730	d0 13		bne $1745			bne 	EVURange
.1732	a5 08		lda $08				lda 	IFR0+IM0
.1734	60		rts				rts
.1735					EXPEvalString:
.1735	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; get value
.1738	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.173a	10 d7		bpl $1713			bpl 	EVUType
.173c	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.173e	86 23		stx $23				stx 	zTemp0+1
.1740	a5 08		lda $08				lda 	IFR0+IM0
.1742	85 22		sta $22				sta 	zTemp0
.1744	60		rts				rts
.1745					EVURange:
.1745	4c ef 26	jmp $26ef		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1748					EXPTermValueR0:
.1748	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term
.174b	90 45		bcc $1792			bcc 	_ETVNotReference 			; exit if value.
.174d	5a		phy				phy
.174e	a0 03		ldy #$03			ldy 	#3 							; get type
.1750	b1 08		lda ($08),y			lda 	(IFR0),y
.1752	30 14		bmi $1768			bmi 	_ETVDereferenceString
.1754	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1756	88		dey				dey 								; get byte 2
.1757	b1 08		lda ($08),y			lda 	(IFR0),y
.1759	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.175b	88		dey				dey 								; get byte 1
.175c	b1 08		lda ($08),y			lda 	(IFR0),y
.175e	aa		tax				tax 								; save in X so we can overwrite it
.175f	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1761	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1763	85 08		sta $08				sta 	IFR0+IM0
.1765	7a		ply				ply
.1766	18		clc				clc
.1767	60		rts				rts
.1768					_ETVDereferenceString:
.1768	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.176a	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.176c	12 08		ora ($08)			ora 	(IFR0)
.176e	f0 11		beq $1781			beq 	_ETVNull 					; if so, return a fake NULL.
.1770	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1772	aa		tax				tax
.1773	b2 08		lda ($08)			lda 	(IFR0)
.1775	18		clc				clc 								; add two so points to actual string.
.1776	69 02		adc #$02			adc 	#2
.1778	90 01		bcc $177b			bcc 	_EVDSNoCarry
.177a	e8		inx				inx
.177b					_EVDSNoCarry:
.177b	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.177d	85 08		sta $08				sta 	IFR0
.177f	80 08		bra $1789			bra 	_ETVFillExit 				; tidy up and exit.
.1781					_ETVNull:
.1781	a9 91		lda #$91			lda 	#_EVTNString & $FF
.1783	85 08		sta $08				sta 	IFR0+IM0
.1785	a9 17		lda #$17			lda 	#_EVTNString >> 8
.1787	85 09		sta $09				sta 	IFR0+IM1
.1789					_ETVFillExit:
.1789	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.178b	a9 80		lda #$80			lda 	#$80 						; set type to string.
.178d	85 0b		sta $0b				sta 	IFR0+IExp
.178f	7a		ply				ply
.1790	60		rts				rts
.1791					_EVTNString:
>1791	00						.byte 	0
.1792					_ETVNotReference:
.1792	60		rts				rts
.1793					EXPTermR0:
.1793	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1795	30 10		bmi $17a7			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1797	c8		iny				iny 								; consume element
.1798	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.179a	b0 08		bcs $17a4			bcs 	_ETMIdentifier
.179c	20 d2 17	jsr $17d2			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.179f	20 05 18	jsr $1805			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17a2	18		clc				clc 								; return value ok
.17a3	60		rts				rts
.17a4					_ETMIdentifier:
.17a4	4c d3 2b	jmp $2bd3			jmp 	VARCheckSimple 				; check variables, seperate module.
.17a7					_ETMIsUnaryOrMinus:
.17a7	c8		iny				iny 								; consume element
.17a8	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17aa	d0 0e		bne $17ba			bne 	_ETMCheckUnary
.17ac	20 48 17	jsr $1748			jsr 	EXPTermValueR0 				; get a term to negate
.17af	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17b1	20 45 32	jsr $3245			jsr 	IFloatNegate
.17b4	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17b6	30 17		bmi $17cf			bmi 	_ETMUnaryType				; if so error.
.17b8	18		clc				clc
.17b9	60		rts				rts
.17ba					_ETMCheckUnary:
.17ba	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17bc	90 0e		bcc $17cc			bcc 	_ETMUnarySyntax
.17be	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17c0	b0 0a		bcs $17cc			bcs 	_ETMUnarySyntax
.17c2	0a		asl a				asl 	a 							; make it into an index => X
.17c3	aa		tax				tax
.17c4	20 c9 17	jsr $17c9			jsr 	_ETMCallUnaryFunction 		; call the function
.17c7	18		clc				clc 								; and return it.
.17c8	60		rts				rts
.17c9					_ETMCallUnaryFunction:
.17c9	7c 7f 1d	jmp ($1d7f,x)			jmp 	(VectorTable,x)
.17cc					_ETMUnarySyntax:
.17cc	4c de 26	jmp $26de		jmp	ErrorV_syntax
.17cf					_ETMUnaryType:
.17cf	4c 0e 27	jmp $270e		jmp	ErrorV_type
.17d2					EXPExtractTokenisedInteger:
.17d2	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17d4	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17d6	64 09		stz $09				stz 	IFR0+IM1
.17d8	64 0a		stz $0a				stz 	IFR0+IM2
.17da					_ETMConstant:
.17da	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17dc	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17de	b0 24		bcs $1804			bcs 	_ETMCExit 					; no, exit.
.17e0	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17e2	a5 09		lda $09				lda 	IFR0+IM1
.17e4	85 0a		sta $0a				sta 	IFR0+IM2
.17e6	a5 08		lda $08				lda 	IFR0+IM0
.17e8	85 09		sta $09				sta 	IFR0+IM1
.17ea	64 08		stz $08				stz 	IFR0+IM0
.17ec	8a		txa				txa
.17ed	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17ee	66 0a		ror $0a				ror 	IFR0+IM2
.17f0	66 09		ror $09				ror 	IFR0+IM1
.17f2	66 08		ror $08				ror 	IFR0+IM0
.17f4	4a		lsr a				lsr 	a
.17f5	66 0a		ror $0a				ror 	IFR0+IM2
.17f7	66 09		ror $09				ror 	IFR0+IM1
.17f9	66 08		ror $08				ror 	IFR0+IM0
.17fb	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17fd	11 18		ora ($18),y			ora 	(codePtr),y
.17ff	85 08		sta $08				sta 	IFR0+IM0
.1801	c8		iny				iny 								; consume, loop back
.1802	80 d6		bra $17da			bra 	_ETMConstant
.1804					_ETMCExit:
.1804	60		rts				rts
.1805					EXPCheckDecimalFollows:
.1805	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1807	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1809	d0 19		bne $1824			bne 	_ETMCDExit
.180b	c8		iny				iny 								; consume token.
.180c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.180e	5a		phy				phy									; save current position
.180f	48		pha				pha 								; save count of chars.
.1810	38		sec				sec 								; address into YX : y + codePtr+1
.1811	98		tya				tya
.1812	65 18		adc $18				adc 	codePtr
.1814	aa		tax				tax
.1815	a5 19		lda $19				lda 	codePtr+1
.1817	69 00		adc #$00			adc 	#0
.1819	a8		tay				tay
.181a	68		pla				pla 								; get count.
.181b	20 de 30	jsr $30de			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.181e	7a		ply				ply 								; go to next token.
.181f	98		tya				tya
.1820	38		sec				sec
.1821	71 18		adc ($18),y			adc 	(codePtr),y
.1823	a8		tay				tay
.1824					_ETMCDExit:
.1824	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1825					EXPUnaryAbs:
.1825	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.1828	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.182b	20 7d 2e	jsr $2e7d			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.182e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.182f					EXPUnaryNull:
.182f	20 48 17	jsr $1748			jsr 	EXPTermValueR0
.1832	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1833					EXPUnaryAsc:
.1833	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.1836	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.1839	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.183b	f0 06		beq $1843			beq 	_EXAZero 						; if so return 0
.183d	5a		phy				phy 									; otherwise get first character
.183e	a0 01		ldy #$01			ldy 	#1
.1840	b1 22		lda ($22),y			lda 	(zTemp0),y
.1842	7a		ply				ply
.1843					_EXAZero:
.1843	a2 08		ldx #$08			ldx 	#IFR0
.1845	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.1848	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1849					EXPUnaryChr:
.1849	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; expr
.184c	48		pha				pha 									; push on stack
.184d	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.1850	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1852	20 89 29	jsr $2989			jsr 	StringTempAllocate
.1855	68		pla				pla 									; get value back
.1856	20 be 29	jsr $29be			jsr 	StringTempWrite 				; write to string.
.1859	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.185a					EXPUnaryDec:
.185a	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.185d	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.1860	5a		phy				phy 									; save position.
.1861	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1863	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.1866	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1868	f0 3b		beq $18a5			beq 	_EUDError 						; empty string is not legit.
.186a	aa		tax				tax 									; count in X.
.186b	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.186d					_EUDLoop:
.186d	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next from string
.186f	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1871	90 02		bcc $1875			bcc 	_EUDNoCase
.1873	e9 20		sbc #$20			sbc 	#$20
.1875					_EUDNoCase:
.1875	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1877	90 2c		bcc $18a5			bcc 	_EUDError
.1879	c9 3a		cmp #$3a			cmp 	#'9'+1
.187b	90 0a		bcc $1887			bcc 	_EUDOkay
.187d	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.187f	90 24		bcc $18a5			bcc 	_EUDError
.1881	c9 47		cmp #$47			cmp 	#'F'+1
.1883	b0 20		bcs $18a5			bcs 	_EUDError
.1885	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1887					_EUDOkay:
.1887	29 0f		and #$0f			and 	#15 							; make constant
.1889	da		phx				phx
.188a	48		pha				pha
.188b	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.188d	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.1890	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.1893	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.1896	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.1899	68		pla				pla 									; pop constant and OR in
.189a	fa		plx				plx
.189b	05 08		ora $08				ora 	IFR0+IM0
.189d	85 08		sta $08				sta 	IFR0+IM0
.189f	c8		iny				iny 									; next char
.18a0	ca		dex				dex 									; done all characters ?
.18a1	d0 ca		bne $186d			bne 	_EUDLoop
.18a3	7a		ply				ply
.18a4	60		rts				rts
.18a5					_EUDError:
.18a5	4c 00 27	jmp $2700		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.18a8					EXPUnaryInlineDec:
.18a8	4c de 26	jmp $26de		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18ab					EXPUnaryPeek:
.18ab	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 				; number to R0
.18ae	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.18b1	b2 08		lda ($08)			lda 	(IFR0)
.18b3	a2 08		ldx #$08			ldx 	#IFR0
.18b5	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.18b8	60		rts				rts
.18b9					EXPUnaryDeek:
.18b9	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 				; number to R0
.18bc	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.18bf	5a		phy				phy
.18c0	a0 01		ldy #$01			ldy 	#1
.18c2	b1 08		lda ($08),y			lda 	(IFR0),y
.18c4	7a		ply				ply
.18c5	48		pha				pha
.18c6	b2 08		lda ($08)			lda 	(IFR0)
.18c8	a2 08		ldx #$08			ldx 	#IFR0
.18ca	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.18cd	68		pla				pla
.18ce	85 09		sta $09				sta 	IFR0+IM1
.18d0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18d1					EXPUnaryFrac:
.18d1	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.18d4	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.18d7	20 e5 2e	jsr $2ee5			jsr 	IFloatFractionalR0 				; get fractional bit.
.18da	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18db					EXPUnaryInkey:
.18db	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.18de	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18e0	20 89 29	jsr $2989			jsr 	StringTempAllocate
.18e3	20 eb ff	jsr $ffeb			jsr 	OSIsKeyAvailable 				; if no key exit
.18e6	b0 06		bcs $18ee			bcs 	_EUIExit
.18e8	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18eb	20 be 29	jsr $29be			jsr 	StringTempWrite
.18ee					_EUIExit:
.18ee	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18ef					EXPUnaryInt:
.18ef	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.18f2	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; check for )
.18f5	20 3b 2f	jsr $2f3b			jsr 	IFloatIntegerR0 				; force to integer.
.18f8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18f9					EXPUnaryLen:
.18f9	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.18fc	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.18ff	b2 22		lda ($22)			lda 	(zTemp0) 						; first byte is the length
.1901	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1903	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.1906	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1907					EXPUnaryParenthesis:
.1907	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.190a	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.190d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.190e					EXPUnaryRnd:
.190e	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; number to R0
.1911	20 93 28	jsr $2893			jsr 	ERRCheckRParen 				; )
.1914	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1916	20 2d 19	jsr $192d			jsr 	EXPLoadInRandom
.1919	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.191b	85 0b		sta $0b				sta 	IFR0+IExp
.191d	60		rts				rts
.191e					ExpUnaryRand:
.191e	20 16 17	jsr $1716			jsr 	EXPEvalInteger 				; integer to R0
.1921	20 93 28	jsr $2893			jsr 	ERRCheckRParen 				; )
.1924	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1926	20 2d 19	jsr $192d			jsr 	EXPLoadInRandom
.1929	20 aa 2d	jsr $2daa			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.192c	60		rts				rts
.192d					EXPLoadInRandom:
.192d	20 3a 32	jsr $323a			jsr 	IFloatSetZero 				; zero it
.1930	20 42 19	jsr $1942			jsr 	EXPRandom32 				; do a 23 bit number.
.1933	95 00		sta $00,x			sta 	IM0,x
.1935	20 42 19	jsr $1942			jsr 	EXPRandom32
.1938	95 01		sta $01,x			sta 	IM1,x
.193a	20 42 19	jsr $1942			jsr 	EXPRandom32
.193d	29 7f		and #$7f			and 	#$7F
.193f	95 02		sta $02,x			sta 	IM2,x
.1941	60		rts				rts
.1942					EXPRandom32:
.1942	5a		phy				phy
.1943	a0 08		ldy #$08			ldy 	#8
.1945	ad 18 05	lda $0518			lda 	EXPSeed+0
.1948	0d 19 05	ora $0519			ora 	EXPSeed+1
.194b	0d 1a 05	ora $051a			ora 	EXPSeed+2
.194e	0d 1b 05	ora $051b			ora 	EXPSeed+3
.1951	d0 08		bne $195b			bne 	_EXPRNoReset
.1953	ee 18 05	inc $0518			inc 	EXPSeed+0
.1956	a0 10		ldy #$10			ldy 	#16
.1958	8c 1b 05	sty $051b			sty 	EXPSeed+3
.195b					_EXPRNoReset:
.195b	ad 18 05	lda $0518			lda 	EXPSeed+0
.195e					_EXPRLoop:
.195e	0a		asl a				asl		a
.195f	2e 19 05	rol $0519			rol 	EXPSeed+1
.1962	2e 1a 05	rol $051a			rol 	EXPSeed+2
.1965	2e 1b 05	rol $051b			rol 	EXPSeed+3
.1968	90 02		bcc $196c			bcc 	_EXPRNoEOR
.196a	49 c5		eor #$c5			eor 	#$C5
.196c					_EXPRNoEOR:
.196c	88		dey				dey
.196d	d0 ef		bne $195e			bne 	_EXPRLoop
.196f	8d 18 05	sta $0518			sta 	EXPSeed+0
.1972	7a		ply				ply
.1973	60		rts				rts
.0518					EXPSeed:
>0518							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1974					EXPUnarySgn:
.1974	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.1977	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.197a	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.197c	20 dc 31	jsr $31dc			jsr 	IFloatCopyToRegister
.197f	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1981	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.1984	a2 0c		ldx #$0c			ldx 	#IFR1
.1986	20 09 2f	jsr $2f09			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1989	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.198a					EXPUnarySqr:
.198a	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.198d	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.1990	20 85 2e	jsr $2e85			jsr 	IFloatSquareRootR0 				; square root.
.1993	b0 01		bcs $1996			bcs 	_EUSValue 						; error check.
.1995	60		rts				rts
.1996					_EUSValue:
.1996	4c ef 26	jmp $26ef		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1999					EXPUnaryHex:
.1999	20 16 17	jsr $1716			jsr 	EXPEvalInteger 					; expr
.199c	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.199f	5a		phy				phy
.19a0	a9 10		lda #$10			lda 	#16
.19a2	20 dc 2f	jsr $2fdc			jsr 	IFloatIntegerToStringR0
.19a5	80 0a		bra $19b1			bra 	EUSMain
.19a7					EXPUnaryStr:
.19a7	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; expr
.19aa	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.19ad	5a		phy				phy
.19ae	20 37 30	jsr $3037			jsr 	IFloatFloatToStringR0 			; convert to string
.19b1					EUSMain:
.19b1	b0 19		bcs $19cc			bcs 	_EUSError
.19b3	86 22		stx $22				stx 	zTemp0 							; save string address
.19b5	84 23		sty $23				sty 	zTemp0+1
.19b7	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19b9	20 89 29	jsr $2989			jsr 	StringTempAllocate
.19bc	b2 22		lda ($22)			lda 	(zTemp0) 						; get count
.19be	aa		tax				tax 									; count in X
.19bf	a0 01		ldy #$01			ldy 	#1
.19c1					_EUSCopy:
.19c1	b1 22		lda ($22),y			lda 	(zTemp0),y
.19c3	c8		iny				iny
.19c4	20 be 29	jsr $29be			jsr 	StringTempWrite
.19c7	ca		dex				dex
.19c8	d0 f7		bne $19c1			bne	 	_EUSCopy
.19ca	7a		ply				ply
.19cb	60		rts				rts
.19cc					_EUSError:
.19cc	4c ef 26	jmp $26ef		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19cf					EXPUnaryInlineString:
.19cf	18		clc				clc 								; physical address -> IM0,1
.19d0	98		tya				tya 								; put the actual address in IM0
.19d1	65 18		adc $18				adc 	codePtr
.19d3	85 08		sta $08				sta 	IFR0+IM0
.19d5	a5 19		lda $19				lda 	codePtr+1
.19d7	69 00		adc #$00			adc 	#0
.19d9	85 09		sta $09				sta 	IFR0+IM1
.19db	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19dd	a9 80		lda #$80			lda 	#$80
.19df	85 0b		sta $0b				sta 	IFR0+IExp
.19e1	98		tya				tya	 								; skip over it.
.19e2	38		sec				sec
.19e3	71 18		adc ($18),y			adc 	(codePtr),y
.19e5	a8		tay				tay
.19e6	60		rts				rts
.19e7					_EXPUISRange:
.19e7	4c ef 26	jmp $26ef		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19ea					EXPUnaryLeft:
.19ea	20 30 1a	jsr $1a30			jsr 	EXPCommonStart 					; <string>,
.19ed	48		pha				pha 									; save string address on stack
.19ee	da		phx				phx
.19ef	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19f1	48		pha				pha
.19f2	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.19f5	80 44		bra $1a3b			bra 	EXPSubstringCommon
.19f7					EXPUnaryRight:
.19f7	20 30 1a	jsr $1a30			jsr 	EXPCommonStart 					; <string>,
.19fa	48		pha				pha 									; save string address on stack
.19fb	da		phx				phx
.19fc	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19fe	48		pha				pha
.19ff	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.1a02	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.1a04	68		pla				pla
.1a05	38		sec				sec
.1a06	e5 22		sbc $22				sbc 	zTemp0
.1a08	b0 02		bcs $1a0c			bcs 	_EUROffLeft
.1a0a	a9 00		lda #$00			lda 	#0
.1a0c					_EUROffLeft:
.1a0c	48		pha				pha 									; start pos
.1a0d	a9 ff		lda #$ff			lda 	#255
.1a0f	80 2a		bra $1a3b			bra 	EXPSubstringCommon
.1a11					EXPUnaryMid:
.1a11	20 30 1a	jsr $1a30			jsr 	EXPCommonStart 					; <string>,
.1a14	48		pha				pha 									; save string address on stack
.1a15	da		phx				phx
.1a16	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters start
.1a19	f0 12		beq $1a2d			beq 	_EUSError 						; 1 is left
.1a1b	3a		dec a				dec 	a 								; zero based.
.1a1c	48		pha				pha
.1a1d	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a1f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a21	f0 04		beq $1a27			beq 	_EUMLength 						; if so m is provided
.1a23	a9 ff		lda #$ff			lda 	#255 							; default m
.1a25	80 14		bra $1a3b			bra 	EXPSubstringCommon
.1a27					_EUMLength:
.1a27	c8		iny				iny 									; consume comma
.1a28	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.1a2b	80 0e		bra $1a3b			bra 	EXPSubstringCommon
.1a2d					_EUSError:
.1a2d	4c 00 27	jmp $2700		jmp	ErrorV_value
.1a30					EXPCommonStart:
.1a30	20 35 17	jsr $1735			jsr 	EXPEvalString
.1a33	20 9b 28	jsr $289b			jsr 	ERRCheckComma
.1a36	a5 08		lda $08				lda 	IFR0+IM0
.1a38	a6 09		ldx $09				ldx 	IFR0+IM1
.1a3a	60		rts				rts
.1a3b					EXPSubstringCommon:
.1a3b	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a3d	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; check right bracket.
.1a40	68		pla				pla 									; start position
.1a41	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a43	fa		plx				plx 									; get string address to zTemp2.
.1a44	86 27		stx $27				stx 	zTemp2+1
.1a46	68		pla				pla
.1a47	85 26		sta $26				sta 	zTemp2
.1a49	38		sec				sec 									; length - start is the max count of chars
.1a4a	b2 26		lda ($26)			lda 	(zTemp2)
.1a4c	e5 25		sbc $25				sbc 	zTemp1+1
.1a4e	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a50	b0 02		bcs $1a54			bcs 	_EXPSSNoTrim
.1a52	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a54					_EXPSSNoTrim:
.1a54	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a56	20 89 29	jsr $2989			jsr 	StringTempAllocate 				; allocate memory for it.
.1a59	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a5b	f0 15		beq $1a72			beq 	_EXPSSExit
.1a5d	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a5f	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a61	b0 0f		bcs $1a72			bcs 	_EXPSSExit
.1a63	5a		phy				phy
.1a64	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a66	c8		iny				iny 									; +1 for the length byte
.1a67					_EXPSSCopy:
.1a67	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a69	20 be 29	jsr $29be			jsr 	StringTempWrite
.1a6c	c8		iny				iny
.1a6d	c6 24		dec $24				dec 	zTemp1
.1a6f	d0 f6		bne $1a67			bne 	_EXPSSCopy
.1a71	7a		ply				ply
.1a72					_EXPSSExit:
.1a72	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a73					EXPUnaryVal:
.1a73	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a76	20 93 28	jsr $2893			jsr 	ERRCheckRParen 					; )
.1a79	20 7d 1a	jsr $1a7d			jsr 	VALConversionZTemp0
.1a7c	60		rts				rts
.1a7d					VALConversionZTemp0:
.1a7d	5a		phy				phy
.1a7e	18		clc				clc
.1a7f	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a81	69 01		adc #$01			adc 	#1
.1a83	aa		tax				tax
.1a84	a5 23		lda $23				lda 	zTemp0+1
.1a86	69 00		adc #$00			adc 	#0
.1a88	a8		tay				tay
.1a89	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a8b	20 9e 30	jsr $309e			jsr 	IFloatStringToFloatR0 			; do conversion
.1a8e	b0 02		bcs $1a92			bcs 	_EUVError
.1a90	7a		ply				ply
.1a91	60		rts				rts
.1a92					_EUVError:
.1a92	4c 00 27	jmp $2700		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1a95					AssemblerLookup:
>1a95	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,74,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,74,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,74,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,74,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,74,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,74,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,74,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,74,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,75,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,75,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,75,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,75,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,75,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,75,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,75,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,75
>1a9d	fb 1e 7c 00 4b 1e 7c 4a b8 1e 1e 00 41 1e 7c eb
>1aad	b9 1e f9 00 41 1e 7c 4a 7f 6a 00 00 7a 6a e1 eb
>1abd	23 6a e1 00 7a 6a e1 4a 97 6a 6a 00 7a 6a e1 eb
>1acd	a6 6a 7d 00 7a 6a e1 4a 38 62 00 00 00 62 0b eb
>1add	ec 62 0b 00 2e 62 0b 4a c3 62 62 00 00 62 0b eb
>1aed	bf 62 04 00 00 62 0b 4a 42 1d 00 00 3b 1d e7 eb
>1afd	14 1d e7 00 2e 1d e7 4a d3 1d 1d 00 3b 1d e7 eb
>1b0d	ac 1d 2c 00 2e 1d e7 4a 99 22 00 00 3a 22 39 f5
>1b1d	93 7a 54 00 3a 22 39 4b 45 22 22 00 3a 22 39 f5
>1b2d	5e 22 66 00 3b 22 3b 4b 19 01 18 00 19 01 18 f5
>1b3d	c6 01 c5 00 19 01 18 4b 55 01 01 00 19 01 18 f5
>1b4d	cc 01 61 00 19 01 18 4b f7 a8 00 00 f7 a8 7d f5
>1b5d	0f a8 92 0c f7 a8 7d 4b 75 a8 a8 00 00 a8 7d f5
>1b6d	ba a8 03 31 00 a8 7d 4b f6 48 00 00 f6 48 f9 f5
>1b7d	0e 48 dd 00 f6 48 f9 4b 8f 48 48 00 00 48 f9 f5
>1b8d	a7 48 2b 00 00 48 f9 4b

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1b95					BinaryPrecedence:
>1b95	02					.byte	 2	; $ef =
>1b96	02					.byte	 2	; $f0 <>
>1b97	02					.byte	 2	; $f1 <=
>1b98	02					.byte	 2	; $f2 <
>1b99	02					.byte	 2	; $f3 >=
>1b9a	02					.byte	 2	; $f4 >
>1b9b	01					.byte	 1	; $f5 XOR
>1b9c	01					.byte	 1	; $f6 OR
>1b9d	01					.byte	 1	; $f7 AND
>1b9e	04					.byte	 4	; $f8 DIV
>1b9f	04					.byte	 4	; $f9 MOD
>1ba0	04					.byte	 4	; $fa <<
>1ba1	04					.byte	 4	; $fb >>
>1ba2	04					.byte	 4	; $fc /
>1ba3	04					.byte	 4	; $fd *
>1ba4	03					.byte	 3	; $fe -
>1ba5	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1ba6					StructureOffsets:
>1ba6	01					.byte	1  	; $80 REPEAT
>1ba7	ff					.byte	255	; $81 UNTIL
>1ba8	01					.byte	1  	; $82 WHILE
>1ba9	ff					.byte	255	; $83 WEND
>1baa	01					.byte	1  	; $84 IF
>1bab	ff					.byte	255	; $85 ENDIF
>1bac	01					.byte	1  	; $86 DO
>1bad	ff					.byte	255	; $87 LOOP
>1bae	01					.byte	1  	; $88 PROC
>1baf	ff					.byte	255	; $89 ENDPROC
>1bb0	01					.byte	1  	; $8a FOR
>1bb1	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1bb2					StandardTokens:
>1bb2	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1bb9	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1bbf	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1bc5	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1bca	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1bcd	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1bd3	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1bd6	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1bdb	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1be0	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1be8	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1bec	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1bf1	00					.byte	$00                                     	; $8c [[end]]
>1bf2	00					.byte	$00                                     	; $8d [[shift]]
>1bf3	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1bf8	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1bfd	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1c00	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1c05	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1c09	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1c0f	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1c15	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1c1a	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1c1e	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1c22	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1c27	01 2c					.byte	$01,$2c                                 	; $99 ,
>1c29	01 3b					.byte	$01,$3b                                 	; $9a ;
>1c2b	01 3a					.byte	$01,$3a                                 	; $9b :
>1c2d	01 27					.byte	$01,$27                                 	; $9c '
>1c2f	01 29					.byte	$01,$29                                 	; $9d )
>1c31	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1c36	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1c3b	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1c40	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1c45	01 5b					.byte	$01,$5b                                 	; $a2 [
>1c47	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1c49	01 23					.byte	$01,$23                                 	; $a4 #
>1c4b	01 2e					.byte	$01,$2e                                 	; $a5 .
>1c4d	00					.byte	0											; $a6
>1c4e	00					.byte	0											; $a7
>1c4f	00					.byte	0											; $a8
>1c50	00					.byte	0											; $a9
>1c51	00					.byte	0											; $aa
>1c52	00					.byte	0											; $ab
>1c53	00					.byte	0											; $ac
>1c54	00					.byte	0											; $ad
>1c55	00					.byte	0											; $ae
>1c56	00					.byte	0											; $af
>1c57	00					.byte	0											; $b0
>1c58	00					.byte	0											; $b1
>1c59	00					.byte	0											; $b2
>1c5a	00					.byte	0											; $b3
>1c5b	00					.byte	0											; $b4
>1c5c	00					.byte	0											; $b5
>1c5d	00					.byte	0											; $b6
>1c5e	00					.byte	0											; $b7
>1c5f	00					.byte	0											; $b8
>1c60	00					.byte	0											; $b9
>1c61	00					.byte	0											; $ba
>1c62	00					.byte	0											; $bb
>1c63	00					.byte	0											; $bc
>1c64	00					.byte	0											; $bd
>1c65	00					.byte	0											; $be
>1c66	00					.byte	0											; $bf
>1c67	00					.byte	0											; $c0
>1c68	00					.byte	0											; $c1
>1c69	00					.byte	0											; $c2
>1c6a	00					.byte	0											; $c3
>1c6b	00					.byte	0											; $c4
>1c6c	00					.byte	0											; $c5
>1c6d	00					.byte	0											; $c6
>1c6e	00					.byte	0											; $c7
>1c6f	00					.byte	0											; $c8
>1c70	00					.byte	0											; $c9
>1c71	00					.byte	0											; $ca
>1c72	00					.byte	0											; $cb
>1c73	00					.byte	0											; $cc
>1c74	00					.byte	0											; $cd
>1c75	00					.byte	0											; $ce
>1c76	00					.byte	0											; $cf
>1c77	00					.byte	0											; $d0
>1c78	00					.byte	0											; $d1
>1c79	00					.byte	0											; $d2
>1c7a	00					.byte	0											; $d3
>1c7b	00					.byte	0											; $d4
>1c7c	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1c82	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1c88	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1c90	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1c97	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1c9d	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ca3	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1ca8	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1cad	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1cb2	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1cb7	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1cbc	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1cc2	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1cc7	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1ccf	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1cd6	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1cdb	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1ce0	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1ce6	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1ceb	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1cf1	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1cf6	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1cfc	01 28					.byte	$01,$28                                 	; $eb (
>1cfe	01 26					.byte	$01,$26                                 	; $ec &
>1d00	00					.byte	$00                                     	; $ed [[decimal]]
>1d01	00					.byte	$00                                     	; $ee [[string]]
>1d02	01 3d					.byte	$01,$3d                                 	; $ef =
>1d04	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1d07	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1d0a	01 3c					.byte	$01,$3c                                 	; $f2 <
>1d0c	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1d0f	01 3e					.byte	$01,$3e                                 	; $f4 >
>1d11	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1d15	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1d18	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1d1c	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1d20	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1d24	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1d27	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1d2a	01 2f					.byte	$01,$2f                                 	; $fc /
>1d2c	01 2a					.byte	$01,$2a                                 	; $fd *
>1d2e	01 2d					.byte	$01,$2d                                 	; $fe -
>1d30	01 2b					.byte	$01,$2b                                 	; $ff +
>1d32	ff					.byte	$FF
.1d33					AlternateTokens:
>1d33	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1d39	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1d3d	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1d41	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1d46	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1d4a	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1d51	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1d56	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1d5b	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1d60	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1d66	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1d6b	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1d72	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1d7a	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1d7e	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1d7f					VectorTable:
>1d7f	ce 25					.word	Command_REPEAT           ; $80 REPEAT
>1d81	d7 25					.word	Command_UNTIL            ; $81 UNTIL
>1d83	b1 26					.word	Command_WHILE            ; $82 WHILE
>1d85	d2 26					.word	Command_WEND             ; $83 WEND
>1d87	a4 25					.word	IfCommand                ; $84 IF
>1d89	cd 25					.word	EndIf                    ; $85 ENDIF
>1d8b	26 24					.word	Command_DO               ; $86 DO
>1d8d	3e 24					.word	Command_LOOP             ; $87 LOOP
>1d8f	4b 15					.word	NoExec08                 ; $88 PROC
>1d91	1a 24					.word	Command_ENDPROC          ; $89 ENDPROC
>1d93	47 24					.word	Command_FOR              ; $8a FOR
>1d95	d4 24					.word	Command_NEXT             ; $8b NEXT
>1d97	cc 14					.word	RUNEndOfLine             ; $8c [[END]]
>1d99	28 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1d9b	c6 25					.word	ElseCode                 ; $8e ELSE
>1d9d	4b 15					.word	NoExec01                 ; $8f THEN
>1d9f	4b 15					.word	NoExec02                 ; $90 TO
>1da1	4b 15					.word	NoExec03                 ; $91 STEP
>1da3	b7 12					.word	CommandLET               ; $92 LET
>1da5	0c 12					.word	Command_Print            ; $93 PRINT
>1da7	05 12					.word	Command_Input            ; $94 INPUT
>1da9	de 23					.word	Command_CALL             ; $95 CALL
>1dab	36 15					.word	Command_Sys              ; $96 SYS
>1dad	85 14					.word	Command_REM              ; $97 REM
>1daf	2f 24					.word	Command_EXIT             ; $98 EXIT
>1db1	4b 15					.word	NoExec04                 ; $99 ,
>1db3	4b 15					.word	NoExec05                 ; $9a ;
>1db5	4b 15					.word	NoExec06                 ; $9b :
>1db7	85 14					.word	Command_REM2             ; $9c '
>1db9	4b 15					.word	NoExec07                 ; $9d )
>1dbb	ae 11					.word	Command_Poke             ; $9e POKE
>1dbd	ab 11					.word	Command_Doke             ; $9f DOKE
>1dbf	11 14					.word	Command_READ             ; $a0 READ
>1dc1	78 14					.word	Command_DATA             ; $a1 DATA
>1dc3	10 2a					.word	NotImplemented           ; $a2 [
>1dc5	10 2a					.word	NotImplemented           ; $a3 ]
>1dc7	10 2a					.word	NotImplemented           ; $a4 #
>1dc9	10 2a					.word	NotImplemented           ; $a5 .
>1dcb	10 2a					.word	NotImplemented           ; $a6
>1dcd	10 2a					.word	NotImplemented           ; $a7
>1dcf	10 2a					.word	NotImplemented           ; $a8
>1dd1	10 2a					.word	NotImplemented           ; $a9
>1dd3	10 2a					.word	NotImplemented           ; $aa
>1dd5	10 2a					.word	NotImplemented           ; $ab
>1dd7	10 2a					.word	NotImplemented           ; $ac
>1dd9	10 2a					.word	NotImplemented           ; $ad
>1ddb	10 2a					.word	NotImplemented           ; $ae
>1ddd	10 2a					.word	NotImplemented           ; $af
>1ddf	10 2a					.word	NotImplemented           ; $b0
>1de1	10 2a					.word	NotImplemented           ; $b1
>1de3	10 2a					.word	NotImplemented           ; $b2
>1de5	10 2a					.word	NotImplemented           ; $b3
>1de7	10 2a					.word	NotImplemented           ; $b4
>1de9	10 2a					.word	NotImplemented           ; $b5
>1deb	10 2a					.word	NotImplemented           ; $b6
>1ded	10 2a					.word	NotImplemented           ; $b7
>1def	10 2a					.word	NotImplemented           ; $b8
>1df1	10 2a					.word	NotImplemented           ; $b9
>1df3	10 2a					.word	NotImplemented           ; $ba
>1df5	10 2a					.word	NotImplemented           ; $bb
>1df7	10 2a					.word	NotImplemented           ; $bc
>1df9	10 2a					.word	NotImplemented           ; $bd
>1dfb	10 2a					.word	NotImplemented           ; $be
>1dfd	10 2a					.word	NotImplemented           ; $bf
>1dff	10 2a					.word	NotImplemented           ; $c0
>1e01	10 2a					.word	NotImplemented           ; $c1
>1e03	10 2a					.word	NotImplemented           ; $c2
>1e05	10 2a					.word	NotImplemented           ; $c3
>1e07	10 2a					.word	NotImplemented           ; $c4
>1e09	10 2a					.word	NotImplemented           ; $c5
>1e0b	10 2a					.word	NotImplemented           ; $c6
>1e0d	10 2a					.word	NotImplemented           ; $c7
>1e0f	10 2a					.word	NotImplemented           ; $c8
>1e11	10 2a					.word	NotImplemented           ; $c9
>1e13	10 2a					.word	NotImplemented           ; $ca
>1e15	10 2a					.word	NotImplemented           ; $cb
>1e17	10 2a					.word	NotImplemented           ; $cc
>1e19	10 2a					.word	NotImplemented           ; $cd
>1e1b	10 2a					.word	NotImplemented           ; $ce
>1e1d	10 2a					.word	NotImplemented           ; $cf
>1e1f	10 2a					.word	NotImplemented           ; $d0
>1e21	10 2a					.word	NotImplemented           ; $d1
>1e23	10 2a					.word	NotImplemented           ; $d2
>1e25	10 2a					.word	NotImplemented           ; $d3
>1e27	10 2a					.word	NotImplemented           ; $d4
>1e29	b9 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1e2b	ab 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1e2d	f7 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1e2f	ea 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1e31	11 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1e33	a7 19					.word	EXPUnaryStr              ; $da STR$(
>1e35	73 1a					.word	EXPUnaryVal              ; $db VAL(
>1e37	74 19					.word	EXPUnarySgn              ; $dc SGN(
>1e39	25 18					.word	EXPUnaryAbs              ; $dd ABS(
>1e3b	f9 18					.word	EXPUnaryLen              ; $de LEN(
>1e3d	8a 19					.word	EXPUnarySqr              ; $df SQR(
>1e3f	49 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1e41	33 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1e43	db 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1e45	10 2a					.word	NotImplemented           ; $e3 EVENT(
>1e47	10 2a					.word	NotImplemented           ; $e4 TIME
>1e49	ef 18					.word	EXPUnaryInt              ; $e5 INT(
>1e4b	d1 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1e4d	5a 18					.word	EXPUnaryDec              ; $e7 DEC(
>1e4f	99 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1e51	0e 19					.word	EXPUnaryRnd              ; $e9 RND(
>1e53	1e 19					.word	ExpUnaryRand             ; $ea RAND(
>1e55	07 19					.word	EXPUnaryParenthesis      ; $eb (
>1e57	2f 18					.word	EXPUnaryNull             ; $ec &
>1e59	a8 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1e5b	cf 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1e5d	08 16					.word	EXPCompareEqual          ; $ef =
>1e5f	23 16					.word	EXPCompareNotEqual       ; $f0 <>
>1e61	2c 16					.word	EXPCompareLessEqual      ; $f1 <=
>1e63	11 16					.word	EXPCompareLess           ; $f2 <
>1e65	35 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1e67	1a 16					.word	EXPCompareGreater        ; $f4 >
>1e69	b5 15					.word	EXPBinXor                ; $f5 XOR
>1e6b	a9 15					.word	EXPBinOr                 ; $f6 OR
>1e6d	9d 15					.word	EXPBinAnd                ; $f7 AND
>1e6f	75 15					.word	EXPBinIDiv               ; $f8 DIV
>1e71	86 15					.word	EXPBinIMod               ; $f9 MOD
>1e73	80 16					.word	EXPBinLeft               ; $fa <<
>1e75	88 16					.word	EXPBinRight              ; $fb >>
>1e77	69 15					.word	EXPBinFDiv               ; $fc /
>1e79	60 15					.word	EXPBinMul                ; $fd *
>1e7b	57 15					.word	EXPBinSub                ; $fe -
>1e7d	4e 15					.word	EXPBinAdd                ; $ff +
.1e7f					AlternateVectorTable:
>1e7f	1b 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1e81	08 14					.word	Command_NEW              ; $8d81 NEW
>1e83	c0 14					.word	Command_RUN              ; $8d82 RUN
>1e85	33 15					.word	Command_STOP             ; $8d83 STOP
>1e87	30 15					.word	Command_END              ; $8d84 END
>1e89	0d 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1e8b	31 13					.word	Command_LIST             ; $8d86 LIST
>1e8d	10 2a					.word	NotImplemented           ; $8d87 SAVE
>1e8f	10 2a					.word	NotImplemented           ; $8d88 LOAD
>1e91	8a 25					.word	Command_GOSUB            ; $8d89 GOSUB
>1e93	d5 11					.word	Command_GOTO             ; $8d8a GOTO
>1e95	98 25					.word	Command_RETURN           ; $8d8b RETURN
>1e97	92 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1e99	8f 10					.word	CommandDIM               ; $8d8d DIM

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1e9b					TOKDetokenise:
.1e9b	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1e9d	84 27		sty $27				sty 	zTemp2+1
.1e9f	9c 1e 05	stz $051e			stz		TOKLastCharacter 			; clear last character
.1ea2					_TOKDLoop:
.1ea2	20 e7 1e	jsr $1ee7			jsr 	TOKDGet 					; get next
.1ea5	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1ea7	f0 3c		beq $1ee5			beq 	_TOKDExit
.1ea9	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1eab	f0 33		beq $1ee0			beq 	_TOKDDataItem
.1ead	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1eaf	f0 2f		beq $1ee0			beq 	_TOKDDataItem
.1eb1	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.1eb3	f0 19		beq $1ece			beq 	_TOKAmpersand
.1eb5	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1eb7	10 05		bpl $1ebe			bpl 	_TOKDNotToken
.1eb9	20 ad 1f	jsr $1fad			jsr 	TOKDToken 					; token to text.
.1ebc	80 e4		bra $1ea2			bra 	_TOKDLoop
.1ebe					_TOKDNotToken:
.1ebe	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1ec0	90 05		bcc $1ec7			bcc 	_TOKDNotIdentifier
.1ec2	20 24 1f	jsr $1f24			jsr 	TOKDIdentifier
.1ec5	80 db		bra $1ea2			bra 	_TOKDLoop
.1ec7					_TOKDNotIdentifier:
.1ec7	a0 0a		ldy #$0a			ldy 	#10
.1ec9	20 67 1f	jsr $1f67			jsr 	TOKDInteger
.1ecc	80 d4		bra $1ea2			bra 	_TOKDLoop
.1ece					_TOKAmpersand:
.1ece	20 ef 1f	jsr $1fef			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.1ed1	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.1ed3	20 f0 1e	jsr $1ef0			jsr 	TOKDOutput
.1ed6	20 e7 1e	jsr $1ee7			jsr 	TOKDGet 					; get first char of integer
.1ed9	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.1edb	20 67 1f	jsr $1f67			jsr 	TOKDInteger
.1ede	80 c2		bra $1ea2			bra 	_TOKDLoop
.1ee0					_TOKDDataItem:
.1ee0	20 fd 1e	jsr $1efd			jsr 	TOKDDataItem
.1ee3	80 bd		bra $1ea2			bra 	_TOKDLoop
.1ee5					_TOKDExit:
.1ee5	18		clc				clc
.1ee6	60		rts				rts
.1ee7	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1ee9	e6 26		inc $26				inc 	zTemp2
.1eeb	d0 02		bne $1eef			bne 	_TKDGExit
.1eed	e6 27		inc $27				inc 	zTemp2+1
.1eef					_TKDGExit:
.1eef	60		rts				rts
.1ef0					TOKDOutput:
.1ef0	8d 1e 05	sta $051e			sta 	TOKLastCharacter
.1ef3	6c 1c 05	jmp ($051c)			jmp 	(TOKOutputMethod)
.1ef6					TOKSetDetokeniseOutput:
.1ef6	8e 1c 05	stx $051c			stx 	TOKOutputMethod
.1ef9	8c 1d 05	sty $051d			sty 	TOKOutputMethod+1
.1efc	60		rts				rts
.051c					TOKOutputMethod:
>051c							.fill 	2
.051e					TOKLastCharacter:
>051e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1efd					TOKDDataItem:
.1efd	a8		tay				tay 								; type in Y
.1efe	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1f00	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1f02	f0 02		beq $1f06			beq 	_TOKDDIsString
.1f04	a9 2e		lda #$2e			lda 	#'.'
.1f06					_TOKDDIsString:
.1f06	20 f0 1e	jsr $1ef0			jsr 	TOKDOutput 					; dump it
.1f09	20 e7 1e	jsr $1ee7			jsr 	TOKDGet 					; get length into X
.1f0c	aa		tax				tax
.1f0d					_TOKDDOutput:
.1f0d	ca		dex				dex 								; are we complete
.1f0e	e0 ff		cpx #$ff			cpx 	#255
.1f10	f0 08		beq $1f1a			beq 	_TOKDDEnd
.1f12	20 e7 1e	jsr $1ee7			jsr 	TOKDGet 					; get character and output it
.1f15	20 f0 1e	jsr $1ef0			jsr 	TOKDOutput
.1f18	80 f3		bra $1f0d			bra 	_TOKDDOutput
.1f1a					_TOKDDEnd:
.1f1a	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1f1c	d0 05		bne $1f23			bne 	_TOKDDNotString
.1f1e	a9 22		lda #$22			lda 	#'"'
.1f20	20 f0 1e	jsr $1ef0			jsr 	TOKDOutput
.1f23					_TOKDDNotString:
.1f23	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1f24					TOKDIdentifier:
.1f24	a0 ff		ldy #$ff			ldy 	#$FF
.1f26	8c 1f 05	sty $051f			sty 	TOKDIFirstChar
.1f29					_TOKDLoop:
.1f29	a8		tay				tay 								; token in Y
.1f2a	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.1f2c	c0 64		cpy #$64			cpy 	#$64
.1f2e	f0 0b		beq $1f3b			beq 	_TOKDIOutput
.1f30	98		tya				tya 								; handle a-z
.1f31	18		clc				clc
.1f32	69 21		adc #$21			adc	 	#$21
.1f34	c0 5a		cpy #$5a			cpy 	#$5A
.1f36	90 03		bcc $1f3b			bcc 	_TOKDIOutput
.1f38	38		sec				sec 								; handle 0-9
.1f39	e9 4b		sbc #$4b			sbc 	#$4B
.1f3b					_TOKDIOutput:
.1f3b	2c 1f 05	bit $051f			bit 	TOKDIFirstChar
.1f3e	10 08		bpl $1f48			bpl 	_TOKDINoSpacing
.1f40	48		pha				pha
.1f41	20 ea 1f	jsr $1fea			jsr 	TOKDSpacing
.1f44	9c 1f 05	stz $051f			stz 	TOKDIFirstChar
.1f47	68		pla				pla
.1f48					_TOKDINoSpacing:
.1f48	20 f0 1e	jsr $1ef0			jsr 	TOKDOutput
.1f4b	20 e7 1e	jsr $1ee7			jsr 	TOKDGet 					; get next token
.1f4e	c9 7c		cmp #$7c			cmp 	#$7C
.1f50	90 d7		bcc $1f29			bcc 	_TOKDLoop
.1f52	f0 12		beq $1f66			beq 	_TOKDIExit 					; it's a number, no tail.
.1f54	4a		lsr a				lsr 	a 							; string ?
.1f55	90 07		bcc $1f5e			bcc 	_TOKDICheckArray
.1f57	48		pha				pha
.1f58	a9 24		lda #$24			lda 	#"$"
.1f5a	20 f0 1e	jsr $1ef0			jsr 	TOKDOutput
.1f5d	68		pla				pla
.1f5e					_TOKDICheckArray:
.1f5e	4a		lsr a				lsr 	a 							; array ?
.1f5f	90 05		bcc $1f66			bcc 	_TOKDIExit
.1f61	a9 28		lda #$28			lda 	#"("
.1f63	20 f0 1e	jsr $1ef0			jsr 	TOKDOutput
.1f66					_TOKDIExit:
.1f66	60		rts				rts
.051f					TOKDIFirstChar:
>051f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1f67					TOKDInteger:
.1f67	5a		phy				phy 								; save base
.1f68	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1f6a	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.1f6d					_TOKDILoop:
.1f6d	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1f6f	c9 40		cmp #$40			cmp 	#$40
.1f71	b0 1d		bcs $1f90			bcs 	_TOKDIHaveInteger
.1f73	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1f75	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.1f78	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.1f7b	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.1f7e	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.1f81	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.1f84	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.1f87	20 e7 1e	jsr $1ee7			jsr 	TOKDGet 					; OR byte in.
.1f8a	05 08		ora $08				ora 	IFR0+IM0
.1f8c	85 08		sta $08				sta 	IFR0+IM0
.1f8e	80 dd		bra $1f6d			bra 	_TOKDILoop
.1f90					_TOKDIHaveInteger:
.1f90	7a		ply				ply 								; restore base
.1f91	98		tya				tya 								; base in A
.1f92	20 dc 2f	jsr $2fdc			jsr 	IFloatIntegerToStringR0
.1f95	86 22		stx $22				stx 	zTemp0
.1f97	84 23		sty $23				sty 	zTemp0+1
.1f99	b2 22		lda ($22)			lda 	(zTemp0)
.1f9b	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.1f9d	b1 22		lda ($22),y			lda 	(zTemp0),y
.1f9f	20 ea 1f	jsr $1fea			jsr 	TOKDSpacing 				; check spacing okay.
.1fa2					_TOKDOutput:
.1fa2	b1 22		lda ($22),y			lda 	(zTemp0),y
.1fa4	20 f0 1e	jsr $1ef0			jsr 	TOKDOutput
.1fa7	c8		iny				iny
.1fa8	b1 22		lda ($22),y			lda 	(zTemp0),y
.1faa	d0 f6		bne $1fa2			bne 	_TOKDOutput
.1fac	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1fad					TOKDToken:
.1fad	a2 b2		ldx #$b2			ldx 	#StandardTokens & $FF 		; standard table
.1faf	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.1fb1	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.1fb3	d0 07		bne $1fbc			bne 	_TOKDSearch
.1fb5	20 e7 1e	jsr $1ee7			jsr 	TOKDGet 					; get next
.1fb8	a2 33		ldx #$33			ldx 	#AlternateTokens & $FF 		; alt table
.1fba	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.1fbc					_TOKDSearch:
.1fbc	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1fbe	84 23		sty $23				sty 	zTemp0+1
.1fc0	aa		tax				tax 								; token ID in X.
.1fc1					_TOKDFind:
.1fc1	ca		dex				dex 								; reached the start
.1fc2	10 0d		bpl $1fd1			bpl 	_TOKDFound
.1fc4	38		sec				sec 								; go to next entry
.1fc5	b2 22		lda ($22)			lda 	(zTemp0)
.1fc7	65 22		adc $22				adc 	zTemp0
.1fc9	85 22		sta $22				sta 	zTemp0
.1fcb	90 f4		bcc $1fc1			bcc 	_TOKDFind
.1fcd	e6 23		inc $23				inc 	zTemp0+1
.1fcf	80 f0		bra $1fc1			bra 	_TOKDFind
.1fd1					_TOKDFound:
.1fd1	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1fd3	f0 14		beq $1fe9			beq 	_TOKDExit
.1fd5	aa		tax				tax
.1fd6	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1fd8	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing first character,
.1fda	20 ea 1f	jsr $1fea			jsr 	TOKDSpacing
.1fdd					_TOKDOutput:
.1fdd	b1 22		lda ($22),y			lda 	(zTemp0),y
.1fdf	20 9d 23	jsr $239d			jsr 	TOKToLower
.1fe2	20 f0 1e	jsr $1ef0			jsr 	TOKDOutput
.1fe5	c8		iny				iny
.1fe6	ca		dex				dex
.1fe7	d0 f4		bne $1fdd			bne 	_TOKDOutput
.1fe9					_TOKDExit:
.1fe9	60		rts				rts
.1fea					TOKDSpacing:
.1fea	20 b4 23	jsr $23b4			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1fed	90 0d		bcc $1ffc			bcc 	TOKDSExit
.1fef					TOKDSpaceLastAlpha:
.1fef	ad 1e 05	lda $051e			lda 	TOKLastCharacter			; and last character also alphanumeric
.1ff2	20 b4 23	jsr $23b4			jsr 	TOKIsIdentifierElement
.1ff5	90 05		bcc $1ffc			bcc 	TOKDSExit
.1ff7	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1ff9	20 f0 1e	jsr $1ef0			jsr 	TOKDOutput
.1ffc					TOKDSExit:
.1ffc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1ffd					PGMDeleteLine:
.1ffd	20 b0 20	jsr $20b0			jsr 	PGMEndProgram 				; end of program into zTemp0
.2000	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.2002	ad 20 05	lda $0520			lda 	PGMBaseHigh
.2005	85 25		sta $25				sta 	zTemp1+1
.2007					_PGMDLoop:
.2007	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.2009	38		sec				sec
.200a	f0 3a		beq $2046			beq 	_PGMDExit
.200c	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.200e	b1 24		lda ($24),y			lda 	(zTemp1),y
.2010	cd 07 04	cmp $0407			cmp 	TOKLineNumber
.2013	d0 08		bne $201d			bne 	_PGMDNext
.2015	c8		iny				iny
.2016	b1 24		lda ($24),y			lda 	(zTemp1),y
.2018	cd 08 04	cmp $0408			cmp 	TOKLineNumber+1
.201b	f0 0d		beq $202a			beq 	_PGMDDelete
.201d					_PGMDNext:
.201d	18		clc				clc
.201e	b2 24		lda ($24)			lda 	(zTemp1)
.2020	65 24		adc $24				adc 	zTemp1
.2022	85 24		sta $24				sta 	zTemp1
.2024	90 e1		bcc $2007			bcc 	_PGMDLoop
.2026	e6 25		inc $25				inc 	zTemp1+1
.2028	80 dd		bra $2007			bra 	_PGMDLoop
.202a					_PGMDDelete:
.202a	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.202c	a8		tay				tay
.202d					_PGMDCopy:
.202d	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.202f	92 24		sta ($24)			sta 	(zTemp1)
.2031	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.2033	c5 22		cmp $22				cmp 	zTemp0
.2035	d0 07		bne $203e			bne 	_PGMDNext2
.2037	a5 25		lda $25				lda 	zTemp1+1
.2039	c5 23		cmp $23				cmp 	zTemp0+1
.203b	18		clc				clc
.203c	f0 08		beq $2046			beq 	_PGMDExit
.203e					_PGMDNext2:
.203e	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.2040	d0 eb		bne $202d			bne 	_PGMDCopy
.2042	e6 25		inc $25				inc 	zTemp1+1
.2044	80 e7		bra $202d			bra 	_PGMDCopy
.2046					_PGMDExit:
.2046	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.2047					PGMInsertLine:
.2047	20 b0 20	jsr $20b0			jsr 	PGMEndProgram 				; end of program into zTemp0
.204a	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.204c	ad 20 05	lda $0520			lda 	PGMBaseHigh
.204f	85 25		sta $25				sta 	zTemp1+1
.2051					_PGMILoop:
.2051	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.2053	f0 1c		beq $2071			beq 	_PGMIInsert
.2055	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.2057	b1 24		lda ($24),y			lda 	(zTemp1),y
.2059	cd 07 04	cmp $0407			cmp 	TOKLineNumber
.205c	c8		iny				iny
.205d	b1 24		lda ($24),y			lda 	(zTemp1),y
.205f	ed 08 04	sbc $0408			sbc 	TOKLineNumber+1
.2062	b0 0d		bcs $2071			bcs 	_PGMIInsert 				; insert here.
.2064	18		clc				clc
.2065	b2 24		lda ($24)			lda 	(zTemp1)
.2067	65 24		adc $24				adc 	zTemp1
.2069	85 24		sta $24				sta 	zTemp1
.206b	90 e4		bcc $2051			bcc 	_PGMILoop
.206d	e6 25		inc $25				inc 	zTemp1+1
.206f	80 e0		bra $2051			bra 	_PGMILoop
.2071					_PGMIInsert:
.2071	ac 06 04	ldy $0406			ldy 	TOKLineSize 				; space required
.2074					_PGMIInsertLoop:
.2074	b2 22		lda ($22)			lda 	(zTemp0)
.2076	91 22		sta ($22),y			sta 	(zTemp0),y
.2078	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.207a	c5 22		cmp $22				cmp 	zTemp0
.207c	d0 06		bne $2084			bne 	_PGMINext
.207e	a5 25		lda $25				lda 	zTemp1+1
.2080	c5 23		cmp $23				cmp 	zTemp0+1
.2082	f0 0a		beq $208e			beq 	_PGMIInserted
.2084					_PGMINext:
.2084	a5 22		lda $22				lda 	zTemp0
.2086	d0 02		bne $208a			bne 	_PGMINoBorrow
.2088	c6 23		dec $23				dec 	zTemp0+1
.208a					_PGMINoBorrow:
.208a	c6 22		dec $22				dec 	zTemp0
.208c	80 e6		bra $2074			bra 	_PGMIInsertLoop
.208e					_PGMIInserted:
.208e	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.2090					_PGMICopyLoop:
.2090	b9 06 04	lda $0406,y			lda 	TOKLineSize,y
.2093	91 24		sta ($24),y			sta 	(zTemp1),y
.2095	c8		iny				iny
.2096	cc 06 04	cpy $0406			cpy 	TOKLineSize
.2099	d0 f5		bne $2090			bne 	_PGMICopyLoop
.209b	18		clc				clc
.209c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.209d					PGMSetBaseAddress:
.209d	8e 20 05	stx $0520			stx 	PGMBaseHigh 				; use memory from here
.20a0	8c 21 05	sty $0521			sty 	PGMEndMemoryHigh 			; to here.
.20a3	60		rts				rts
.20a4					PGMNewProgram:
.20a4	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.20a6	ad 20 05	lda $0520			lda 	PGMBaseHigh
.20a9	85 23		sta $23				sta 	zTemp0+1
.20ab	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.20ad	92 22		sta ($22)			sta 	(zTemp0)
.20af	60		rts				rts
.20b0					PGMEndProgram:
.20b0	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.20b2	ad 20 05	lda $0520			lda 	PGMBaseHigh
.20b5	85 23		sta $23				sta 	zTemp0+1
.20b7					_PGMEPLoop:
.20b7	b2 22		lda ($22)			lda 	(zTemp0) 					; reached end ?
.20b9	f0 0b		beq $20c6			beq 	_PGMEPExit
.20bb	18		clc				clc 								; no, advance to next
.20bc	65 22		adc $22				adc 	zTemp0
.20be	85 22		sta $22				sta 	zTemp0
.20c0	90 f5		bcc $20b7			bcc 	_PGMEPLoop
.20c2	e6 23		inc $23				inc 	zTemp0+1
.20c4	80 f1		bra $20b7			bra 	_PGMEPLoop
.20c6					_PGMEPExit:
.20c6	60		rts				rts
.0520					PGMBaseHigh:
>0520							.fill 	1
.0521					PGMEndMemoryHigh:
>0521							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.20c7					TOKResetElement:
.20c7	9c 22 05	stz $0522			stz 	TOKElement
.20ca	60		rts				rts
.20cb					TOKWriteElement:
.20cb	da		phx				phx
.20cc	ae 22 05	ldx $0522			ldx 	TOKElement
.20cf	9d 23 05	sta $0523,x			sta 	TOKElementText,x
.20d2	9e 24 05	stz $0524,x			stz 	TOKElementText+1,x
.20d5	fa		plx				plx
.20d6	ee 22 05	inc $0522			inc 	TOKElement
.20d9	60		rts				rts
.0522					TOKElement:
>0522							.fill 	1
.0523					TOKElementText:
>0523							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.20da					TOKTokeniseConstant:
.20da	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.20dc	48		pha				pha 								; save on stack
.20dd	29 c0		and #$c0			and 	#$C0
.20df	05 09		ora $09				ora 	IFR0+IM1
.20e1	05 0a		ora $0a				ora 	IFR0+IM2
.20e3	f0 10		beq $20f5			beq 	_TTCLess
.20e5	da		phx				phx
.20e6	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.20e8					_TTCShiftRight:
.20e8	46 0a		lsr $0a				lsr 	IFR0+IM2
.20ea	66 09		ror $09				ror 	IFR0+IM1
.20ec	66 08		ror $08				ror 	IFR0+IM0
.20ee	ca		dex				dex
.20ef	d0 f7		bne $20e8			bne 	_TTCShiftRight
.20f1	fa		plx				plx
.20f2	20 da 20	jsr $20da			jsr 	TOKTokeniseConstant
.20f5					_TTCLess:
.20f5	68		pla				pla
.20f6	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.20f8	20 98 21	jsr $2198			jsr 	TOKWriteA
.20fb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.20fc					TOKTokeniseDecimals:
.20fc	20 ab 21	jsr $21ab			jsr 	TOKGetNext 					; consume the .
.20ff	20 21 23	jsr $2321			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2102	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.2104	20 98 21	jsr $2198			jsr 	TOKWriteA
.2107	20 0c 21	jsr $210c			jsr 	TOKOutputElementBuffer 		; then the buffer
.210a	18		clc				clc
.210b	60		rts				rts
.210c					TOKOutputElementBuffer:
.210c	ad 22 05	lda $0522			lda 	TOKElement 					; get count and write that
.210f	20 98 21	jsr $2198			jsr 	TOKWriteA
.2112	a8		tay				tay 								; put in Y
.2113	f0 0c		beq $2121			beq 	_TOEExit 					; exit if empty which is okay.
.2115	a2 01		ldx #$01			ldx 	#1
.2117					_TOELoop:
.2117	bd 22 05	lda $0522,x			lda 	TOKElement,x
.211a	20 98 21	jsr $2198			jsr 	TOKWriteA
.211d	e8		inx				inx
.211e	88		dey				dey
.211f	d0 f6		bne $2117			bne 	_TOELoop
.2121					_TOEExit:
.2121	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.2122					TOKTokenise:
.2122	8c 23 06	sty $0623			sty 	TOKDataSource+1 			; save source routine pointer
.2125	8e 22 06	stx $0622			stx 	TOKDataSource
.2128	a9 01		lda #$01			lda 	#1 							; set first element flag.
.212a	8d 24 06	sta $0624			sta 	TOKIsFirstElement
.212d	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.212f	8d 06 04	sta $0406			sta 	TOKLineSize 				; line length itself and the line numbers.
.2132	9c 07 04	stz $0407			stz 	TOKLineNumber
.2135	9c 08 04	stz $0408			stz 	TOKLineNumber+1
.2138					_TOKMainLoop:
.2138	20 a7 21	jsr $21a7			jsr 	TOKGet 						; what follows.
.213b	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.213d	f0 50		beq $218f			beq 	_TOKExit
.213f	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.2141	d0 05		bne $2148			bne 	_TOKElement
.2143	20 ab 21	jsr $21ab			jsr 	TOKGetNext
.2146	80 f0		bra $2138			bra 	_TOKMainLoop
.2148					_TOKElement:
.2148	20 a8 23	jsr $23a8			jsr 	TOKIsDigit 					; is it 0..9
.214b	90 16		bcc $2163			bcc 	_TOKNotDigit
.214d	20 f8 22	jsr $22f8			jsr 	TOKTokeniseInteger 			; get integer
.2150	b0 44		bcs $2196			bcs 	_TOKFail 					; did it fail ?
.2152	9c 24 06	stz $0624			stz 	TOKIsFirstElement 			; clear first element flag
.2155	20 a7 21	jsr $21a7			jsr 	TOKGet 						; what follows ?
.2158	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.215a	d0 dc		bne $2138			bne 	_TOKMainLoop
.215c	20 fc 20	jsr $20fc			jsr 	TOKTokeniseDecimals
.215f	b0 35		bcs $2196			bcs 	_TOKFail
.2161	80 d5		bra $2138			bra 	_TOKMainLoop
.2163					_TOKNotDigit:
.2163	9c 24 06	stz $0624			stz 	TOKIsFirstElement 			; clear first element flag
.2166	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.2168	d0 07		bne $2171			bne 	_TOKNotHex
.216a	20 01 22	jsr $2201			jsr 	TOKTokeniseHexadecimal
.216d	b0 27		bcs $2196			bcs 	_TOKFail
.216f	80 c7		bra $2138			bra 	_TOKMainLoop
.2171					_TOKNotHex:
.2171	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.2173	d0 07		bne $217c			bne 	_TOKNotString
.2175	20 6f 23	jsr $236f			jsr 	TOKTokeniseString
.2178	b0 1c		bcs $2196			bcs 	_TOKFail
.217a	80 bc		bra $2138			bra 	_TOKMainLoop
.217c					_TOKNotString:
.217c	20 c1 23	jsr $23c1			jsr 	TOKIsAlpha 					; identifier ?
.217f	b0 07		bcs $2188			bcs 	_TOKIdentifier
.2181	20 35 23	jsr $2335			jsr 	TOKTokenisePunctuation 		; punctuation
.2184	b0 10		bcs $2196			bcs 	_TOKFail
.2186	80 b0		bra $2138			bra 	_TOKMainLoop
.2188					_TOKIdentifier:
.2188	20 3b 22	jsr $223b			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.218b	b0 09		bcs $2196			bcs 	_TOKFail
.218d	80 a9		bra $2138			bra 	_TOKMainLoop
.218f					_TOKExit:
.218f	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.2191	20 98 21	jsr $2198			jsr 	TOKWriteA
.2194	18		clc				clc									; return with carry set.
.2195	60		rts				rts
.2196					_TOKFail:
.2196	38		sec				sec
.2197	60		rts				rts
.2198					TOKWriteA:
.2198	da		phx				phx
.2199	ae 06 04	ldx $0406			ldx 	TOKLineSize
.219c	9d 06 04	sta $0406,x			sta 	TOKLineSize,x
.219f	9e 07 04	stz $0407,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.21a2	fa		plx				plx
.21a3	ee 06 04	inc $0406			inc 	TOKLineSize
.21a6	60		rts				rts
.21a7					TOKGet:
.21a7	18		clc				clc
.21a8	6c 22 06	jmp ($0622)			jmp 	(TOKDataSource)
.21ab					TOKGetNext:
.21ab	38		sec				sec
.21ac	6c 22 06	jmp ($0622)			jmp 	(TOKDataSource)
.0622					TOKDataSource:
>0622							.fill 	2
.0624					TOKIsFirstElement:
>0624							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.21af					TOKFindToken:
.21af	a2 b2		ldx #$b2			ldx 	#StandardTokens & $FF 		; do this table
.21b1	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.21b3	20 cb 21	jsr $21cb			jsr 	TOKFindTokenXY 				; find it, or not
.21b6	b0 0d		bcs $21c5			bcs 	_TOKFound1
.21b8	a2 33		ldx #$33			ldx 	#AlternateTokens & $FF 		; do the alternate table
.21ba	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.21bc	20 cb 21	jsr $21cb			jsr 	TOKFindTokenXY 				; find it, or not
.21bf	90 08		bcc $21c9			bcc 	_TOKFTFail 					; not ....
.21c1	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.21c3	38		sec				sec
.21c4	60		rts				rts
.21c5					_TOKFound1:
.21c5	a2 00		ldx #$00			ldx 	#0
.21c7	38		sec				sec
.21c8	60		rts				rts
.21c9					_TOKFTFail
.21c9	18		clc				clc
.21ca	60		rts				rts
.21cb					TOKFindTokenXY:
.21cb	86 22		stx $22				stx 	zTemp0 						; save token table address
.21cd	84 23		sty $23				sty 	zTemp0+1
.21cf	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.21d1	8d 25 06	sta $0625			sta 	TOKCurrent
.21d4					_TOKFindLoop:
.21d4	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.21d6	18		clc				clc 		 						; clear carry in case of fail
.21d7	30 17		bmi $21f0			bmi 	_TOKExit 					; end of table, fail, so return CC.
.21d9	cd 22 05	cmp $0522			cmp 	TOKElement 					; compare against the element length
.21dc	d0 13		bne $21f1			bne 	_TOKNext 					; different, try next.
.21de	aa		tax				tax 								; number of chars to compare.
.21df	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.21e1					_TOKCompare:
.21e1	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.21e3	d9 22 05	cmp $0522,y			cmp 	TOKElementText-1,y
.21e6	d0 09		bne $21f1			bne 	_TOKNext 					; different ? try next
.21e8	c8		iny				iny 								; compare next two
.21e9	ca		dex				dex
.21ea	d0 f5		bne $21e1			bne 	_TOKCompare 				; until done X characters.
.21ec	38		sec				sec
.21ed	ad 25 06	lda $0625			lda 	TOKCurrent 					; return current ID.
.21f0					_TOKExit:
.21f0	60		rts				rts
.21f1					_TOKNext:
.21f1	ee 25 06	inc $0625			inc 	TOKCurrent 					; increment token #
.21f4	38		sec				sec 								; add length+1 to ptr
.21f5	b2 22		lda ($22)			lda 	(zTemp0)
.21f7	65 22		adc $22				adc 	zTemp0
.21f9	85 22		sta $22				sta 	zTemp0
.21fb	90 d7		bcc $21d4			bcc 	_TOKFindLoop
.21fd	e6 23		inc $23				inc 	zTemp0+1
.21ff	80 d3		bra $21d4			bra 	_TOKFindLoop
.0625					TOKCurrent:
>0625							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.2201					TOKTokeniseHexadecimal:
.2201	20 ab 21	jsr $21ab			jsr 	TOKGetNext 					; consume the $
.2204	a2 08		ldx #$08			ldx 	#IFR0
.2206	20 3a 32	jsr $323a			jsr 	IFloatSetZero 				; set R0 = 0
.2209					_TTHLoop:
.2209	20 a7 21	jsr $21a7			jsr 	TOKGet 						; keep getting and copying while numeric.
.220c	20 ce 23	jsr $23ce			jsr 	TOKIsHexadecimal
.220f	90 20		bcc $2231			bcc 	_TTHDone
.2211	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.2213	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.2216	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.2219	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.221c	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.221f	20 ab 21	jsr $21ab			jsr 	TOKGetNext
.2222	38		sec				sec 								; convert to decimal.
.2223	e9 30		sbc #$30			sbc 	#48
.2225	c9 0a		cmp #$0a			cmp 	#10
.2227	90 02		bcc $222b			bcc 	_TTHNotAlpha
.2229	e9 07		sbc #$07			sbc 	#7
.222b					_TTHNotAlpha:
.222b	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.222d	85 08		sta $08				sta 	IFR0+IM0
.222f	80 d8		bra $2209			bra 	_TTHLoop
.2231					_TTHDone:
.2231	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.2233	20 98 21	jsr $2198			jsr 	TOKWriteA
.2236	20 da 20	jsr $20da			jsr 	TOKTokeniseConstant 		; write integer out.
.2239	18		clc				clc
.223a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.223b					TOKTokeniseIdentifier:
.223b	20 c7 20	jsr $20c7			jsr 	TOKResetElement 			; extract an identifier
.223e					_TOKGetIdentifier:
.223e	20 a7 21	jsr $21a7			jsr 	TOKGet
.2241	20 92 23	jsr $2392			jsr 	TOKToUpper
.2244	20 b4 23	jsr $23b4			jsr 	TOKIsIdentifierElement
.2247	90 08		bcc $2251			bcc 	_TOKEndIdent
.2249	20 cb 20	jsr $20cb			jsr		TOKWriteElement
.224c	20 ab 21	jsr $21ab			jsr 	TOKGetNext
.224f	80 ed		bra $223e			bra 	_TOKGetIdentifier
.2251					_TOKEndIdent:
.2251	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.2253	d0 06		bne $225b			bne 	_TOKNotString
.2255	20 cb 20	jsr $20cb			jsr 	TOKWriteElement 			; add it
.2258	20 ab 21	jsr $21ab			jsr 	TOKGetNext 					; consume it
.225b					_TOKNotString:
.225b	20 a7 21	jsr $21a7			jsr 	TOKGet 						; finally check for (
.225e	c9 28		cmp #$28			cmp 	#"("
.2260	d0 06		bne $2268			bne 	_TOKNoArray
.2262	20 cb 20	jsr $20cb			jsr 	TOKWriteElement 			; add it
.2265	20 ab 21	jsr $21ab			jsr 	TOKGetNext 					; consume it
.2268					_TOKNoArray:
.2268	20 af 21	jsr $21af			jsr 	TOKFindToken 				; find it
.226b	90 18		bcc $2285			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.226d	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.226f	f0 0f		beq $2280			beq 	_TOKComment 				; yes, do comment code.
.2271	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.2273	d0 06		bne $227b			bne 	_TOKNoShift
.2275	48		pha				pha 								; write the shift.
.2276	8a		txa				txa
.2277	20 98 21	jsr $2198			jsr 	TOKWriteA
.227a	68		pla				pla
.227b					_TOKNoShift:
.227b	20 98 21	jsr $2198			jsr 	TOKWriteA 					; write the main token.
.227e	18		clc				clc
.227f	60		rts				rts
.2280					_TOKComment:
.2280	20 c5 22	jsr $22c5			jsr 	TOKDoComment
.2283	18		clc				clc
.2284	60		rts				rts
.2285					_TOKIsVariable:
.2285	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2287					_TOKOutputBuffer:
.2287	bd 23 05	lda $0523,x			lda 	TOKElementText,x 			; output it translated.
.228a	20 b3 22	jsr $22b3			jsr 	TOKTranslateIdentifier
.228d	20 98 21	jsr $2198			jsr 	TOKWriteA
.2290	e8		inx				inx
.2291	bd 23 05	lda $0523,x			lda 	TOKElementText,x
.2294	20 b4 23	jsr $23b4			jsr 	TOKIsIdentifierElement
.2297	b0 ee		bcs $2287			bcs 	_TOKOutputBuffer
.2299	a8		tay				tay 								; last char in Y
.229a	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.229c	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.229e	f0 0e		beq $22ae			beq 	_TOKIVExit
.22a0	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.22a2	d0 04		bne $22a8			bne 	_TOKIVCheckArray 			; no, check for (
.22a4	1a		inc a				inc 	a 							; token is $7D
.22a5	bc 24 05	ldy $0524,x			ldy 	TOKElementText+1,x 			; get next one.
.22a8					_TOKIVCheckArray:
.22a8	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.22aa	d0 02		bne $22ae			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.22ac	1a		inc a				inc 	a
.22ad	1a		inc a				inc 	a
.22ae					_TOKIVExit:
.22ae	20 98 21	jsr $2198			jsr 	TOKWriteA 					; ending token
.22b1	18		clc				clc
.22b2	60		rts				rts
.22b3					TOKTranslateIdentifier:
.22b3	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.22b5	f0 0b		beq $22c2			beq 	_TTI64
.22b7	38		sec				sec
.22b8	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.22ba	10 03		bpl $22bf			bpl 	_TTIExit
.22bc	18		clc				clc 								; map 09 onto 26-35
.22bd	69 2b		adc #$2b			adc 	#"A"-"0"+26
.22bf					_TTIExit:
.22bf	09 40		ora #$40			ora 	#$40 						; correct range.
.22c1	60		rts				rts
.22c2	a9 64		lda #$64	_TTI64:	lda 	#$64
.22c4	60		rts				rts
.22c5					TOKDoComment:
.22c5	20 98 21	jsr $2198			jsr 	TOKWriteA					; output the token.
.22c8					_TOKSkipSpaces:
.22c8	20 a7 21	jsr $21a7			jsr 	TOKGet 						; skip over spaces
.22cb	c9 20		cmp #$20			cmp 	#' '
.22cd	d0 05		bne $22d4			bne 	_TOKEndSpaces
.22cf	20 ab 21	jsr $21ab			jsr 	TOKGetNext
.22d2	80 f4		bra $22c8			bra 	_TOKSkipSpaces
.22d4					_TOKEndSpaces:
.22d4	48		pha				pha 								; save it
.22d5	68		pla				pla
.22d6	f0 04		beq $22dc			beq 	_TOKDCExit 					; end of line.
.22d8	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.22da	d0 01		bne $22dd			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.22dc					_TOKDCExit:
.22dc	60		rts				rts
.22dd					_TOKDCDoLine:
.22dd	20 c7 20	jsr $20c7			jsr 	TOKResetElement 			; start getting the string
.22e0					_TOKDCLoop:
.22e0	20 a7 21	jsr $21a7			jsr 	TOKGet 						; check EOL
.22e3	c9 00		cmp #$00			cmp 	#0
.22e5	f0 08		beq $22ef			beq 	_TOKDCEndComment
.22e7	20 ab 21	jsr $21ab			jsr 	TOKGetNext 					; get and consume
.22ea	20 cb 20	jsr $20cb			jsr 	TOKWriteElement
.22ed	80 f1		bra $22e0			bra 	_TOKDCLoop
.22ef					_TOKDCEndComment:
.22ef	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.22f1	20 98 21	jsr $2198			jsr 	TOKWriteA
.22f4	20 0c 21	jsr $210c			jsr 	TOKOutputElementBuffer
.22f7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.22f8					TOKTokeniseInteger:
.22f8	20 21 23	jsr $2321			jsr 	TOKExtractInteger 			; pull an integer out as text.
.22fb	a2 23		ldx #$23			ldx 	#TOKElementText & $FF
.22fd	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.22ff	ad 22 05	lda $0522			lda		TOKElement
.2302	20 9e 30	jsr $309e			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2305	ad 24 06	lda $0624			lda 	TOKIsFirstElement 			; first element ?
.2308	f0 12		beq $231c			beq 	_TOKNotLineNumber
.230a	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.230c	d0 0c		bne $231a			bne 	_TOKBadLineNumeber
.230e	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2310	8d 07 04	sta $0407			sta 	TOKLineNumber
.2313	a5 09		lda $09				lda 	IFR0+IM1
.2315	8d 08 04	sta $0408			sta 	TOKLineNumber+1
.2318	18		clc				clc
.2319	60		rts				rts
.231a					_TOKBadLineNumeber:
.231a	38		sec				sec
.231b	60		rts				rts
.231c					_TOKNotLineNumber:
.231c	20 da 20	jsr $20da			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.231f	18		clc				clc
.2320	60		rts				rts
.2321					TOKExtractInteger:
.2321	20 c7 20	jsr $20c7			jsr 	TOKResetElement 			; restart
.2324					_TTILoop:
.2324	20 a7 21	jsr $21a7			jsr 	TOKGet 						; keep getting and copying while numeric.
.2327	20 a8 23	jsr $23a8			jsr 	TOKIsDigit
.232a	90 08		bcc $2334			bcc 	_TOKEIExit
.232c	20 cb 20	jsr $20cb			jsr 	TOKWriteElement
.232f	20 ab 21	jsr $21ab			jsr 	TOKGetNext
.2332	80 f0		bra $2324			bra 	_TTILoop
.2334					_TOKEIExit:
.2334	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2335					TOKTokenisePunctuation:
.2335	20 c7 20	jsr $20c7			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2338	20 ab 21	jsr $21ab			jsr 	TOKGetNext
.233b	20 cb 20	jsr $20cb			jsr 	TOKWriteElement
.233e	20 a7 21	jsr $21a7			jsr 	TOKGet 						; what follows ?
.2341	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2343	f0 10		beq $2355			beq 	_TTPOne
.2345	20 b8 23	jsr $23b8			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2348	b0 0b		bcs $2355			bcs 	_TTPOne 					; these speed things up a bit.
.234a	20 cb 20	jsr $20cb			jsr 	TOKWriteElement 			; this is what we will search for.
.234d	20 af 21	jsr $21af			jsr 	TOKFindToken
.2350	b0 0a		bcs $235c			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2352	ce 22 05	dec $0522			dec 	TOKElement 					; make it a single character
.2355					_TTPOne:
.2355	20 af 21	jsr $21af			jsr 	TOKFindToken 				; look for one character punctuation
.2358	b0 07		bcs $2361			bcs 	_TTPOutputExit 				; we found it
.235a	38		sec				sec 								; not recognised.
.235b	60		rts				rts
.235c					_TTPConsumeExit:
.235c	48		pha				pha
.235d	20 ab 21	jsr $21ab			jsr 	TOKGetNext 					; get the 2nd char out.
.2360	68		pla				pla
.2361					_TTPOutputExit:
.2361	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.2363	f0 05		beq $236a			beq 	_TTPComment
.2365	20 98 21	jsr $2198			jsr  	TOKWriteA 					; write token out
.2368	18		clc				clc
.2369	60		rts				rts
.236a					_TTPComment:
.236a	20 c5 22	jsr $22c5			jsr 	TOKDoComment
.236d	18		clc				clc
.236e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.236f					TOKTokeniseString:
.236f	20 ab 21	jsr $21ab			jsr 	TOKGetNext 					; consume the "
.2372	20 c7 20	jsr $20c7			jsr 	TOKResetElement 			; start getting the string
.2375					_TOKTSLoop:
.2375	20 a7 21	jsr $21a7			jsr 	TOKGet 						; check EOL
.2378	c9 00		cmp #$00			cmp 	#0
.237a	f0 0c		beq $2388			beq 	_TOKTSExit
.237c	20 ab 21	jsr $21ab			jsr 	TOKGetNext 					; get and consume
.237f	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2381	f0 05		beq $2388			beq 	_TOKTSExit
.2383	20 cb 20	jsr $20cb			jsr 	TOKWriteElement
.2386	80 ed		bra $2375			bra 	_TOKTSLoop
.2388					_TOKTSExit:
.2388	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.238a	20 98 21	jsr $2198			jsr 	TOKWriteA
.238d	20 0c 21	jsr $210c			jsr 	TOKOutputElementBuffer
.2390	18		clc				clc
.2391	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2392					TOKToUpper:
.2392	c9 61		cmp #$61			cmp 	#"a"
.2394	90 06		bcc $239c			bcc 	_TTUNotLower
.2396	c9 7b		cmp #$7b			cmp 	#"z"+1
.2398	b0 02		bcs $239c			bcs 	_TTUNotLower
.239a	49 20		eor #$20			eor 	#$20
.239c					_TTUNotLower:
.239c	60		rts				rts
.239d					TOKToLower:
.239d	c9 41		cmp #$41			cmp 	#"A"
.239f	90 06		bcc $23a7			bcc 	_TTUNotUpper
.23a1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.23a3	b0 02		bcs $23a7			bcs 	_TTUNotUpper
.23a5	49 20		eor #$20			eor 	#$20
.23a7					_TTUNotUpper:
.23a7	60		rts				rts
.23a8					TOKIsDigit:
.23a8	c9 30		cmp #$30			cmp 	#"0"
.23aa	90 06		bcc $23b2			bcc 	TOKFail
.23ac	c9 3a		cmp #$3a			cmp 	#"9"+1
.23ae	b0 02		bcs $23b2			bcs 	TOKFail
.23b0					TOKSucceed:
.23b0	38		sec				sec
.23b1	60		rts				rts
.23b2					TOKFail:
.23b2	18		clc				clc
.23b3	60		rts				rts
.23b4					TOKIsIdentifierElement:
.23b4	c9 5f		cmp #$5f			cmp 	#"_"
.23b6	f0 f8		beq $23b0			beq 	TOKSucceed 					; else fall through to alphanumeric
.23b8					TOKIsAlphaNumeric:
.23b8	20 c1 23	jsr $23c1			jsr 	TOKIsAlpha
.23bb	b0 f3		bcs $23b0			bcs 	TOKSucceed
.23bd	20 a8 23	jsr $23a8			jsr 	TOKIsDigit
.23c0	60		rts				rts
.23c1					TOKIsAlpha:
.23c1	20 92 23	jsr $2392			jsr 	TOKToUpper
.23c4	c9 41		cmp #$41			cmp 	#"A"
.23c6	90 ea		bcc $23b2			bcc 	TOKFail
.23c8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.23ca	b0 e6		bcs $23b2			bcs 	TOKFail
.23cc	80 e2		bra $23b0			bra 	TOKSucceed
.23ce					TOKIsHexadecimal:
.23ce	20 a8 23	jsr $23a8			jsr		TOKIsDigit
.23d1	b0 dd		bcs $23b0			bcs 	TOKSucceed
.23d3	20 c1 23	jsr $23c1			jsr 	TOKIsAlpha
.23d6	90 da		bcc $23b2			bcc 	TOKFail
.23d8	c9 47		cmp #$47			cmp 	#"F"+1
.23da	b0 d6		bcs $23b2			bcs 	TOKFail
.23dc	80 d2		bra $23b0			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.23de					Command_CALL:
.23de	a9 42		lda #$42			lda 	#STK_CALL
.23e0	20 ac 28	jsr $28ac			jsr 	StackOpen
.23e3	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.23e5	29 c0		and #$c0			and 	#$C0
.23e7	c9 40		cmp #$40			cmp 	#$40
.23e9	d0 29		bne $2414			bne 	_CCSyntax
.23eb	20 7d 2b	jsr $2b7d			jsr 	VARGetInfo 					; get the information
.23ee	20 93 28	jsr $2893			jsr 	ERRCheckRParen 				; check right bracket follows.
.23f1	20 2f 2b	jsr $2b2f			jsr 	VARFind 					; exists ?
.23f4	90 21		bcc $2417			bcc 	_CCUnknown
.23f6	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.23f8	85 22		sta $22				sta 	zTemp0
.23fa	20 e0 28	jsr $28e0			jsr 	STKSaveCodePosition 		; save return address on stack.
.23fd	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.23ff	b1 22		lda ($22),y			lda 	(zTemp0),y
.2401	c9 ff		cmp #$ff			cmp 	#$FF
.2403	d0 12		bne $2417			bne 	_CCUnknown
.2405	88		dey				dey 								; get Y offset to stack
.2406	b1 22		lda ($22),y			lda 	(zTemp0),y
.2408	48		pha				pha
.2409	88		dey				dey 								; get address
.240a	b1 22		lda ($22),y			lda 	(zTemp0),y
.240c	85 19		sta $19				sta 	codePtr+1
.240e	b2 22		lda ($22)			lda 	(zTemp0)
.2410	85 18		sta $18				sta 	codePtr
.2412	7a		ply				ply 								; restore Y
.2413	60		rts				rts
.2414					_CCSyntax:
.2414	4c de 26	jmp $26de		jmp	ErrorV_syntax
.2417					_CCUnknown:
.2417	4c 53 28	jmp $2853		jmp	ErrorV_unknown
.241a					Command_ENDPROC:
.241a	a9 42		lda #$42			lda 	#STK_CALL
.241c	20 d8 28	jsr $28d8			jsr 	StackCheckFrame
.241f	20 f2 28	jsr $28f2			jsr 	STKLoadCodePosition 		; return
.2422	20 ca 28	jsr $28ca			jsr 	StackClose
.2425	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2426					Command_DO:
.2426	a9 22		lda #$22			lda 	#STK_DO
.2428	20 ac 28	jsr $28ac			jsr 	StackOpen
.242b	20 e0 28	jsr $28e0			jsr 	STKSaveCodePosition 		; save loop position
.242e	60		rts				rts
.242f					Command_EXIT:
.242f	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2431	20 d8 28	jsr $28d8			jsr 	StackCheckFrame
.2434	20 ca 28	jsr $28ca			jsr 	StackClose 					; close it
.2437	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2439	aa		tax				tax
.243a	20 ee 25	jsr $25ee			jsr 	ScanForward
.243d	60		rts				rts
.243e					Command_LOOP:
.243e	a9 22		lda #$22			lda 	#STK_DO
.2440	20 d8 28	jsr $28d8			jsr 	StackCheckFrame
.2443	20 f2 28	jsr $28f2			jsr 	STKLoadCodePosition 		; loop back
.2446	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2447					Command_FOR:
.2447	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2449	20 ac 28	jsr $28ac			jsr 	StackOpen
.244c	20 b7 12	jsr $12b7			jsr 	CommandLET 					; do "I = 1" bit
.244f	5a		phy				phy 								; save variable address to +4,+5
.2450	a0 04		ldy #$04			ldy 	#4
.2452	a5 22		lda $22				lda 	zTemp0
.2454	91 2a		sta ($2a),y			sta 	(basicStack),y
.2456	c8		iny				iny
.2457	a5 23		lda $23				lda 	zTemp0+1
.2459	91 2a		sta ($2a),y			sta 	(basicStack),y
.245b	7a		ply				ply
.245c	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.245e	20 a3 28	jsr $28a3			jsr 	ERRCheckA
.2461	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2464	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2466	a2 08		ldx #$08			ldx 	#IFR0
.2468	20 bd 24	jsr $24bd			jsr 	CFSaveR0X
.246b	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.246d	c9 91		cmp #$91			cmp 	#PR_STEP
.246f	d0 06		bne $2477			bne 	_CFStep1
.2471	c8		iny				iny 								; consume step
.2472	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; evaluate STEP
.2475	80 24		bra $249b			bra 	_CFWriteStep
.2477					_CFStep1:
.2477	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2479	a9 01		lda #$01			lda 	#1
.247b	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.247e	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.247f	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2481	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2483	85 22		sta $22				sta 	zTemp0
.2485	c8		iny				iny
.2486	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2488	85 23		sta $23				sta 	zTemp0+1
.248a	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.248c	b1 22		lda ($22),y			lda 	(zTemp0),y
.248e	d0 0a		bne $249a			bne 	_CFNotOptimised
.2490	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2492	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2494	d0 04		bne $249a			bne 	_CFNotOptimised
.2496	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2498	85 0b		sta $0b				sta 	IFR0+IExp
.249a					_CFNotOptimised:
.249a	7a		ply				ply
.249b					_CFWriteStep:
.249b	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.249d	a9 06		lda #$06			lda 	#6
.249f	20 bd 24	jsr $24bd			jsr 	CFSaveR0X
.24a2	20 e0 28	jsr $28e0			jsr 	STKSaveCodePosition 		; save loop position
.24a5	60		rts				rts
.24a6					CFLoadR0X:
.24a6	5a		phy				phy
.24a7	a8		tay				tay
.24a8	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24aa	95 00		sta $00,x			sta 	IM0,x
.24ac	c8		iny				iny
.24ad	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24af	95 01		sta $01,x			sta 	IM1,x
.24b1	c8		iny				iny
.24b2	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24b4	95 02		sta $02,x			sta 	IM2,x
.24b6	c8		iny				iny
.24b7	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24b9	95 03		sta $03,x			sta 	IExp,x
.24bb	7a		ply				ply
.24bc	60		rts				rts
.24bd					CFSaveR0X:
.24bd	5a		phy				phy
.24be	a8		tay				tay
.24bf	b5 00		lda $00,x			lda 	IM0,x
.24c1	91 2a		sta ($2a),y			sta 	(basicStack),y
.24c3	c8		iny				iny
.24c4	b5 01		lda $01,x			lda 	IM1,x
.24c6	91 2a		sta ($2a),y			sta 	(basicStack),y
.24c8	c8		iny				iny
.24c9	b5 02		lda $02,x			lda 	IM2,x
.24cb	91 2a		sta ($2a),y			sta 	(basicStack),y
.24cd	c8		iny				iny
.24ce	b5 03		lda $03,x			lda 	IExp,x
.24d0	91 2a		sta ($2a),y			sta 	(basicStack),y
.24d2	7a		ply				ply
.24d3	60		rts				rts
.24d4					Command_NEXT:
.24d4	a9 37		lda #$37			lda 	#STK_FOR
.24d6	20 d8 28	jsr $28d8			jsr 	StackCheckFrame
.24d9	5a		phy				phy 								; check optimised loop
.24da	a0 09		ldy #$09			ldy 	#9
.24dc	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24de	7a		ply				ply
.24df	0a		asl a				asl 	a
.24e0	b0 35		bcs $2517			bcs 	_CNOptimised
.24e2	20 4f 25	jsr $254f			jsr 	_CNLoadValue 				; load index value to R0.
.24e5	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.24e7	a9 06		lda #$06			lda 	#6
.24e9	20 a6 24	jsr $24a6			jsr 	CFLoadR0X
.24ec	20 32 2c	jsr $2c32			jsr 	IFloatAdd 					; add them together and write back.
.24ef	20 72 25	jsr $2572			jsr 	_CNSaveValue
.24f2	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.24f4	a2 0c		ldx #$0c			ldx 	#IFR1
.24f6	20 a6 24	jsr $24a6			jsr 	CFLoadR0X
.24f9	20 09 2f	jsr $2f09			jsr 	IFloatCompare 				; compare terminal vs current
.24fc	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.24fe	20 33 32	jsr $3233			jsr 	IFloatCheckZero
.2501	f0 10		beq $2513			beq 	_CNLoopBack
.2503	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2505	5a		phy				phy
.2506	a0 09		ldy #$09			ldy 	#6+IExp
.2508	51 2a		eor ($2a),y			eor 	(basicStack),y
.250a	7a		ply				ply
.250b	29 40		and #$40			and 	#IFSign
.250d	f0 04		beq $2513			beq 	_CNLoopBack
.250f					_CNExitLoop:
.250f	20 ca 28	jsr $28ca			jsr 	StackClose		 			; return
.2512	60		rts				rts
.2513					_CNLoopBack:
.2513	20 f2 28	jsr $28f2			jsr 	STKLoadCodePosition 		; loop back
.2516	60		rts				rts
.2517					_CNOptimised:
.2517	5a		phy				phy
.2518	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.251a	b1 2a		lda ($2a),y			lda 	(basicStack),y
.251c	85 26		sta $26				sta 	zTemp2
.251e	c8		iny				iny
.251f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2521	85 27		sta $27				sta 	zTemp2+1
.2523	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.2525					_CNIncrement:
.2525	c8		iny				iny
.2526	b1 26		lda ($26),y			lda 	(zTemp2),y
.2528	1a		inc a				inc 	a
.2529	91 26		sta ($26),y			sta 	(zTemp2),y
.252b	f0 f8		beq $2525			beq 	_CNIncrement
.252d	18		clc				clc 								; point zTemp0 to terminal value
.252e	a5 2a		lda $2a				lda 	basicStack
.2530	69 0a		adc #$0a			adc 	#10
.2532	85 22		sta $22				sta 	zTemp0
.2534	a5 2b		lda $2b				lda 	basicStack+1
.2536	69 00		adc #$00			adc 	#0
.2538	85 23		sta $23				sta 	zTemp0+1
.253a	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.253c	18		clc				clc 								; borrow 1, we want > not >=
.253d	b2 26		lda ($26)			lda 	(zTemp2)
.253f	f2 22		sbc ($22)			sbc 	(zTemp0)
.2541	b1 26		lda ($26),y			lda 	(zTemp2),y
.2543	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2545	c8		iny				iny
.2546	b1 26		lda ($26),y			lda 	(zTemp2),y
.2548	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.254a	7a		ply				ply
.254b	b0 c2		bcs $250f			bcs 	_CNExitLoop
.254d	80 c4		bra $2513			bra 	_CNLoopBack
.254f					_CNLoadValue:
.254f	5a		phy				phy
.2550	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2552	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2554	85 26		sta $26				sta 	zTemp2
.2556	c8		iny				iny
.2557	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2559	85 27		sta $27				sta 	zTemp2+1
.255b	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.255d	b1 26		lda ($26),y			lda 	(zTemp2),y
.255f	85 08		sta $08				sta 	IFR0+IM0
.2561	c8		iny				iny
.2562	b1 26		lda ($26),y			lda 	(zTemp2),y
.2564	85 09		sta $09				sta 	IFR0+IM1
.2566	c8		iny				iny
.2567	b1 26		lda ($26),y			lda 	(zTemp2),y
.2569	85 0a		sta $0a				sta 	IFR0+IM2
.256b	c8		iny				iny
.256c	b1 26		lda ($26),y			lda 	(zTemp2),y
.256e	85 0b		sta $0b				sta 	IFR0+IExp
.2570	7a		ply				ply
.2571	60		rts				rts
.2572					_CNSaveValue:
.2572	5a		phy				phy
.2573	a0 00		ldy #$00			ldy 	#0
.2575	a5 08		lda $08				lda 	IFR0+IM0
.2577	91 26		sta ($26),y			sta 	(zTemp2),y
.2579	c8		iny				iny
.257a	a5 09		lda $09				lda 	IFR0+IM1
.257c	91 26		sta ($26),y			sta 	(zTemp2),y
.257e	c8		iny				iny
.257f	a5 0a		lda $0a				lda 	IFR0+IM2
.2581	91 26		sta ($26),y			sta 	(zTemp2),y
.2583	c8		iny				iny
.2584	a5 0b		lda $0b				lda 	IFR0+IExp
.2586	91 26		sta ($26),y			sta 	(zTemp2),y
.2588	7a		ply				ply
.2589	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.258a					Command_GOSUB:
.258a	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get line number
.258d	a9 52		lda #$52			lda 	#STK_GOSUB
.258f	20 ac 28	jsr $28ac			jsr 	StackOpen
.2592	20 e0 28	jsr $28e0			jsr 	STKSaveCodePosition 		; save return address on stack.
.2595	4c d8 11	jmp $11d8			jmp 	GotoR0
.2598					Command_RETURN:
.2598	a9 52		lda #$52			lda 	#STK_GOSUB
.259a	20 d8 28	jsr $28d8			jsr 	StackCheckFrame
.259d	20 f2 28	jsr $28f2			jsr 	STKLoadCodePosition 		; return
.25a0	20 ca 28	jsr $28ca			jsr 	StackClose
.25a3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.25a4					IfCommand:
.25a4	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; Get the if test.
.25a7	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.25a9	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.25ab	d0 0c		bne $25b9			bne 	_IfStructured 				; we still support it.
.25ad	c8		iny				iny 								; consume THEN
.25ae	a2 08		ldx #$08			ldx 	#IFR0
.25b0	20 33 32	jsr $3233			jsr 	IFloatCheckZero 			; is it zero
.25b3	f0 01		beq $25b6			beq 	_IfFail 					; if fail, go to next line
.25b5	60		rts				rts 								; if THEN just continue
.25b6					_IfFail:
.25b6	4c cc 14	jmp $14cc			jmp 	RUNEndOfLine
.25b9					_IfStructured:
.25b9	20 33 32	jsr $3233			jsr 	IFloatCheckZero 			; is it zero
.25bc	d0 07		bne $25c5			bne 	_IfExit 					; if not, then continue normally.
.25be	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.25c0	a2 85		ldx #$85			ldx 	#PR_ENDIF
.25c2	20 ee 25	jsr $25ee			jsr 	ScanForward 				; and run from there
.25c5					_IfExit:
.25c5	60		rts				rts
.25c6					ElseCode:
.25c6	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.25c8	aa		tax				tax 								; so just go to the structure exit
.25c9	20 ee 25	jsr $25ee			jsr 	ScanForward
.25cc	60		rts				rts
.25cd					EndIf:
.25cd	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.25ce					Command_REPEAT:
.25ce	a9 02		lda #$02			lda 	#STK_REPEAT
.25d0	20 ac 28	jsr $28ac			jsr 	StackOpen
.25d3	20 e0 28	jsr $28e0			jsr 	STKSaveCodePosition 		; save loop position
.25d6	60		rts				rts
.25d7					Command_UNTIL:
.25d7	a9 02		lda #$02			lda 	#STK_REPEAT
.25d9	20 d8 28	jsr $28d8			jsr 	StackCheckFrame
.25dc	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; work out the test
.25df	a2 08		ldx #$08			ldx 	#IFR0
.25e1	20 33 32	jsr $3233			jsr 	IFloatCheckZero 			; check if zero
.25e4	f0 04		beq $25ea			beq 	_CULoopBack 				; if so keep looping
.25e6	20 ca 28	jsr $28ca			jsr 	StackClose		 			; return
.25e9	60		rts				rts
.25ea					_CULoopBack:
.25ea	20 f2 28	jsr $28f2			jsr 	STKLoadCodePosition 		; loop back
.25ed	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.25ee					ScanForward:
.25ee	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.25f0	86 23		stx $23				stx 	zTemp0+1
.25f2	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.25f4					_ScanForwardLoop:
.25f4	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.25f6	d0 0a		bne $2602			bne 	_ScanNoCheck
.25f8	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.25fa	c5 22		cmp $22				cmp 	zTemp0
.25fc	f0 49		beq $2647			beq 	_ScanExit
.25fe	c5 23		cmp $23				cmp 	zTemp0+1
.2600	f0 45		beq $2647			beq 	_ScanExit
.2602					_ScanNoCheck:
.2602	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2604	c8		iny				iny
.2605	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2607	f0 37		beq $2640			beq		_ScanDataItem
.2609	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.260b	f0 33		beq $2640			beq 	_ScanDataItem
.260d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.260f	f0 1b		beq $262c			beq 	_ScanNextLine
.2611	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2613	d0 01		bne $2616			bne 	_ScanNoShift
.2615	c8		iny				iny
.2616					_ScanNoShift:
.2616	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2618	b0 da		bcs $25f4			bcs 	_ScanForwardLoop
.261a	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.261c	90 d6		bcc $25f4			bcc 	_ScanForwardLoop
.261e	aa		tax				tax 								; access the table to get the adjustment.
.261f	18		clc				clc
.2620	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.2622	7d 26 1b	adc $1b26,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2625	85 24		sta $24				sta 	zTemp1
.2627	10 cb		bpl $25f4			bpl		_ScanForwardLoop 			; error if -ve ?
.2629	4c 6a 27	jmp $276a		jmp	ErrorV_structure
.262c					_ScanNextLine:
.262c	18		clc				clc	 								; forward to next line.
.262d	b2 18		lda ($18)			lda 	(codePtr)
.262f	65 18		adc $18				adc 	codePtr
.2631	85 18		sta $18				sta 	codePtr
.2633	90 02		bcc $2637			bcc 	_ScanNoCarry
.2635	e6 19		inc $19				inc 	codePtr+1
.2637					_ScanNoCarry:
.2637	a0 03		ldy #$03			ldy 	#3
.2639	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.263b	d0 b7		bne $25f4			bne 	_ScanForwardLoop
.263d	4c 6a 27	jmp $276a		jmp	ErrorV_structure
.2640					_ScanDataItem:
.2640	98		tya				tya
.2641	38		sec				sec
.2642	71 18		adc ($18),y			adc 	(codePtr),y
.2644	a8		tay				tay
.2645	80 ad		bra $25f4			bra 	_ScanForwardLoop
.2647					_ScanExit:
.2647	c8		iny				iny 								; consume final token.
.2648	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2649					ScanProcedures:
.2649	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.264b	48		pha				pha
.264c	a5 19		lda $19				lda 	codePtr+1
.264e	48		pha				pha
.264f	5a		phy				phy
.2650	ad 20 05	lda $0520			lda 	PGMBaseHigh 				; back to the program start
.2653	85 19		sta $19				sta 	codePtr+1
.2655	64 18		stz $18				stz 	codePtr
.2657					_SPLoop:
.2657	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2659	f0 18		beq $2673			beq 	_SPExit
.265b	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.265d	b1 18		lda ($18),y			lda 	(codePtr),y
.265f	c9 88		cmp #$88			cmp 	#PR_PROC
.2661	d0 03		bne $2666			bne 	_SPNext
.2663	20 7b 26	jsr $267b			jsr 	_SPSetupRecord
.2666					_SPNext:
.2666	18		clc				clc 								; forward to next
.2667	b2 18		lda ($18)			lda 	(codePtr)
.2669	65 18		adc $18				adc 	codePtr
.266b	85 18		sta $18				sta 	codePtr
.266d	90 e8		bcc $2657			bcc 	_SPLoop
.266f	e6 19		inc $19				inc 	codePtr+1
.2671	80 e4		bra $2657			bra 	_SPLoop
.2673					_SPExit:
.2673	7a		ply				ply
.2674	68		pla				pla
.2675	85 19		sta $19				sta 	codePtr+1
.2677	68		pla				pla
.2678	85 18		sta $18				sta 	codePtr
.267a	60		rts				rts
.267b					_SPSetupRecord:
.267b	c8		iny				iny 								; check identifier follows
.267c	b1 18		lda ($18),y			lda 	(codePtr),y
.267e	29 c0		and #$c0			and 	#$C0
.2680	c9 40		cmp #$40			cmp 	#$40
.2682	d0 27		bne $26ab			bne 	_SPSyntax
.2684	20 7d 2b	jsr $2b7d			jsr 	VARGetInfo 					; get the information
.2687	20 93 28	jsr $2893			jsr 	ERRCheckRParen 				; check right bracket follows.
.268a	20 2f 2b	jsr $2b2f			jsr 	VARFind 					; already exists ?
.268d	b0 1f		bcs $26ae			bcs 	_SPUsed 					; error !
.268f	20 db 2a	jsr $2adb			jsr 	VARCreate 					; create, XA points to the data.
.2692	85 22		sta $22				sta 	zTemp0
.2694	86 23		stx $23				stx 	zTemp0+1
.2696	5a		phy				phy 								; save Y pos on stack
.2697	a0 01		ldy #$01			ldy 	#1
.2699	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.269b	92 22		sta ($22)			sta 	(zTemp0)
.269d	a5 19		lda $19				lda 	codePtr+1
.269f	91 22		sta ($22),y			sta 	(zTemp0),y
.26a1	c8		iny				iny
.26a2	68		pla				pla
.26a3	91 22		sta ($22),y			sta 	(zTemp0),y
.26a5	c8		iny				iny
.26a6	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.26a8	91 22		sta ($22),y			sta 	(zTemp0),y
.26aa	60		rts				rts
.26ab					_SPSyntax:
.26ab	4c de 26	jmp $26de		jmp	ErrorV_syntax
.26ae					_SPUsed:
.26ae	4c 35 28	jmp $2835		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.26b1					Command_WHILE:
.26b1	5a		phy				phy 								; save position of the test
.26b2	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; work out the while test.
.26b5	a2 08		ldx #$08			ldx 	#IFR0
.26b7	20 33 32	jsr $3233			jsr 	IFloatCheckZero 			; check if zero
.26ba	f0 0e		beq $26ca			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.26bc	98		tya				tya 								; position *after* test.
.26bd	7a		ply				ply 								; restore position before test, at WHILE
.26be	88		dey				dey 								; so we execute the WHILE command again.
.26bf	48		pha				pha 								; push after test on the stack
.26c0	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.26c2	20 ac 28	jsr $28ac			jsr 	StackOpen
.26c5	20 e0 28	jsr $28e0			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.26c8	7a		ply				ply 								; restore the position *after* the test
.26c9	60		rts				rts
.26ca					_WHExitLoop:
.26ca	68		pla				pla 								; throw post loop position
.26cb	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.26cd	aa		tax				tax
.26ce	20 ee 25	jsr $25ee			jsr 	ScanForward
.26d1	60		rts				rts
.26d2					Command_WEND:
.26d2	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.26d4	20 d8 28	jsr $28d8			jsr 	StackCheckFrame
.26d7	20 f2 28	jsr $28f2			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.26da	20 ca 28	jsr $28ca			jsr 	StackClose		 			; erase the frame
.26dd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.26de					ErrorV_syntax:
.26de	20 cb 29	jsr $29cb		jsr	ErrorHandler
>26e1	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>26e9	45 72 72 6f 72 00
.26ef					ErrorV_range:
.26ef	20 cb 29	jsr $29cb		jsr	ErrorHandler
>26f2	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>26fa	52 61 6e 67 65 00
.2700					ErrorV_value:
.2700	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2703	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>270b	75 65 00
.270e					ErrorV_type:
.270e	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2711	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2719	73 6d 61 74 63 68 00
.2720					ErrorV_unimplemented:
.2720	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2723	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>272b	6c 65 6d 65 6e 74 65 64 00
.2734					ErrorV_assert:
.2734	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2737	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>273f	46 61 69 6c 00
.2744					ErrorV_internal:
.2744	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2747	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>274f	6c 20 45 72 72 6f 72 00
.2757					ErrorV_divzero:
.2757	20 cb 29	jsr $29cb		jsr	ErrorHandler
>275a	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2762	42 79 20 5a 65 72 6f 00
.276a					ErrorV_structure:
.276a	20 cb 29	jsr $29cb		jsr	ErrorHandler
>276d	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2775	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2782					ErrorV_stop:
.2782	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2785	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>278d	20 53 74 6f 70 70 65 64 00
.2796					ErrorV_data:
.2796	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2799	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>27a1	44 61 74 61 00
.27a6					ErrorV_redefine:
.27a6	20 cb 29	jsr $29cb		jsr	ErrorHandler
>27a9	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>27b1	65 64 65 66 69 6e 65 64 00
.27ba					ErrorV_index:
.27ba	20 cb 29	jsr $29cb		jsr	ErrorHandler
>27bd	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>27c5	61 79 20 49 6e 64 65 78 00
.27ce					ErrorV_memory:
.27ce	20 cb 29	jsr $29cb		jsr	ErrorHandler
>27d1	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>27d9	4d 65 6d 6f 72 79 00
.27e0					ErrorV_uninitialised:
.27e0	20 cb 29	jsr $29cb		jsr	ErrorHandler
>27e3	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>27eb	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.27fb					ErrorV_string:
.27fb	20 cb 29	jsr $29cb		jsr	ErrorHandler
>27fe	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2806	69 6e 67 20 4c 65 6e 67 74 68 00
.2811					ErrorV_variable:
.2811	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2814	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>281c	65 20 4d 69 73 73 69 6e 67 00
.2826					ErrorV_stack:
.2826	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2829	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2831	75 6c 6c 00
.2835					ErrorV_dupproc:
.2835	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2838	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2840	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2850	65 64 00
.2853					ErrorV_unknown:
.2853	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2856	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>285e	20 50 72 6f 63 65 64 75 72 65 00
.2869					ErrorV_break:
.2869	20 cb 29	jsr $29cb		jsr	ErrorHandler
>286c	05 42 72 65 61 6b 00			.text	5,"Break",0
.2873					ErrorV_line:
.2873	20 cb 29	jsr $29cb		jsr	ErrorHandler
>2876	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>287e	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.288b					ERRCheckLParen:
.288b	b1 18		lda ($18),y			lda 	(codePtr),y
.288d	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.288f	d0 18		bne $28a9			bne 	ERRSyntaxError
.2891	c8		iny				iny
.2892	60		rts				rts
.2893					ERRCheckRParen:
.2893	b1 18		lda ($18),y			lda 	(codePtr),y
.2895	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2897	d0 10		bne $28a9			bne 	ERRSyntaxError
.2899	c8		iny				iny
.289a	60		rts				rts
.289b					ERRCheckComma:
.289b	b1 18		lda ($18),y			lda 	(codePtr),y
.289d	c9 99		cmp #$99			cmp 	#PR_COMMA
.289f	d0 08		bne $28a9			bne 	ERRSyntaxError
.28a1	c8		iny				iny
.28a2	60		rts				rts
.28a3					ERRCheckA:
.28a3	d1 18		cmp ($18),y			cmp 	(codePtr),y
.28a5	d0 02		bne $28a9			bne 	ERRSyntaxError
.28a7	c8		iny				iny
.28a8	60		rts				rts
.28a9					ERRSyntaxError:
.28a9	4c de 26	jmp $26de		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.28ac					StackOpen:
.28ac	48		pha				pha 								; save frame byte
.28ad	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.28af	0a		asl a				asl 	a 							; claim twice this for storage
.28b0	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.28b2	38		sec				sec 								; so basically subtracting from
.28b3	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.28b5	85 2a		sta $2a				sta 	basicStack
.28b7	b0 0a		bcs $28c3			bcs 	_SONoBorrow
>28b9	db						.byte 	$DB
.28ba	c6 2b		dec $2b				dec 	basicStack+1
.28bc	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.28be	cd 26 06	cmp $0626			cmp 	basicStackEnd
.28c1	f0 04		beq $28c7			beq 	_SOMemory
.28c3					_SONoBorrow:
.28c3	68		pla				pla 								; get marker back and write at TOS
.28c4	92 2a		sta ($2a)			sta 	(basicStack)
.28c6	60		rts				rts
.28c7					_SOMemory:
.28c7	4c 26 28	jmp $2826		jmp	ErrorV_stack
.28ca					StackClose:
.28ca	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.28cc	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.28ce	0a		asl a				asl 	a 							; claim twice this.
.28cf	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.28d1	85 2a		sta $2a				sta 	basicStack
.28d3	90 02		bcc $28d7			bcc 	_SCExit
.28d5	e6 2b		inc $2b				inc 	basicStack+1
.28d7					_SCExit:
.28d7	60		rts				rts
.28d8					StackCheckFrame:
.28d8	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.28da	d0 01		bne $28dd			bne 	_SCFError 					; different, we have structures mixed up
.28dc	60		rts				rts
.28dd					_SCFError:
.28dd	4c 6a 27	jmp $276a		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.28e0					STKSaveCodePosition:
.28e0	5a		phy				phy
.28e1	98		tya				tya 								; save Y at offset 1.
.28e2	a0 01		ldy #$01			ldy 	#1
.28e4	91 2a		sta ($2a),y			sta 	(basicStack),y
.28e6	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.28e8	c8		iny				iny
.28e9	91 2a		sta ($2a),y			sta 	(basicStack),y
.28eb	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.28ed	c8		iny				iny
.28ee	91 2a		sta ($2a),y			sta 	(basicStack),y
.28f0	7a		ply				ply
.28f1	60		rts				rts
.28f2					STKLoadCodePosition:
.28f2	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.28f4	b1 2a		lda ($2a),y			lda 	(basicStack),y
.28f6	85 19		sta $19				sta 	codePtr+1
.28f8	88		dey				dey
.28f9	b1 2a		lda ($2a),y			lda 	(basicStack),y
.28fb	85 18		sta $18				sta 	codePtr
.28fd	88		dey				dey
.28fe	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.2900	a8		tay				tay
.2901	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2902					StackReset:
.2902	48		pha				pha 								; save top of memory
.2903	3a		dec a				dec 	a  							; end of stack = previous byte
.2904	85 2b		sta $2b				sta 	basicStack+1
.2906	a9 ff		lda #$ff			lda 	#$FF
.2908	85 2a		sta $2a				sta 	basicStack
.290a	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.290c	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.290e	68		pla				pla 								; allocate pages for stack.
.290f	38		sec				sec
.2910	e9 02		sbc #$02			sbc 	#STACKPAGES
.2912	8d 26 06	sta $0626			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2915	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0626					basicStackEnd:
>0626							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2916					StringConcrete:
.2916	5a		phy				phy 								; save position on stack
.2917	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2919	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.291b	b0 41		bcs $295e			bcs 	_SALengthError
.291d	18		clc				clc 								; length of the new string
.291e	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2920	90 02		bcc $2924			bcc 	_SAHaveLength
.2922	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2924					_SAHaveLength:
.2924	48		pha				pha 								; save length to be allocated for concreting.
.2925	38		sec				sec
.2926	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2928	6d 28 06	adc $0628			adc 	stringMemory
.292b	8d 28 06	sta $0628			sta 	stringMemory
.292e	85 26		sta $26				sta 	zTemp2 						; update storage address
.2930	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2932	6d 29 06	adc $0629			adc 	stringMemory+1
.2935	8d 29 06	sta $0629			sta 	stringMemory+1
.2938	85 27		sta $27				sta 	zTemp2+1
.293a	68		pla				pla 								; save length allocated in +0
.293b	92 26		sta ($26)			sta 	(zTemp2)
.293d	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.293f	a0 01		ldy #$01			ldy 	#1
.2941	91 26		sta ($26),y			sta 	(zTemp2),y
.2943					_SACopyNewString:
.2943	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2945	a0 02		ldy #$02			ldy 	#2
.2947	91 26		sta ($26),y			sta 	(zTemp2),y
.2949	aa		tax				tax 								; bytes to copy
.294a	f0 0c		beq $2958			beq 	_SACopyExit
.294c	a0 01		ldy #$01			ldy 	#1 							; first character from here
.294e					_SACopyNSLoop:
.294e	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2950	c8		iny				iny 								; write two on in string storage
.2951	c8		iny				iny
.2952	91 26		sta ($26),y			sta 	(zTemp2),y
.2954	88		dey				dey
.2955	ca		dex				dex									; until copied all the string lengths.
.2956	d0 f6		bne $294e			bne 	_SACopyNSLoop
.2958					_SACopyExit:
.2958	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.295a	a5 26		lda $26				lda 	zTemp2
.295c	7a		ply				ply
.295d	60		rts				rts
.295e					_SALengthError:
.295e	4c fb 27	jmp $27fb		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2961					StringSystemInitialise:
.2961	3a		dec a				dec 	a 							; make last byte of previous page.
.2962	8d 29 06	sta $0629			sta 	stringMemory+1
.2965	85 23		sta $23				sta 	zTemp0+1
.2967	a9 ff		lda #$ff			lda 	#$FF
.2969	8d 28 06	sta $0628			sta 	stringMemory
.296c	85 22		sta $22				sta 	zTemp0
.296e	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2970	92 22		sta ($22)			sta 	(zTemp0)
.2972	60		rts				rts
.2973					StringSpaceInitialise:
.2973	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2975	8d 27 06	sta $0627			sta 	stringInitialised
.2978	ad 28 06	lda $0628			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.297b	8d 2a 06	sta $062a			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.297e	ad 29 06	lda $0629			lda 	stringMemory+1
.2981	3a		dec a				dec 	a
.2982	8d 2b 06	sta $062b			sta 	stringTempPointer+1
.2985	20 82 10	jsr $1082			jsr 	ClearCheckMemory
.2988	60		rts				rts
.2989					StringTempAllocate:
.2989	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.298b	b0 2e		bcs $29bb			bcs 	_STALength
.298d	2c 27 06	bit $0627			bit 	stringInitialised 			; already initialised
.2990	30 05		bmi $2997			bmi 	_STAAllocate
.2992	48		pha				pha 								; save value to subtract.
.2993	20 73 29	jsr $2973			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2996	68		pla				pla 								; restore it
.2997					_STAAllocate:
.2997	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2999	18		clc				clc  								; deliberate allows one more
.299a	6d 2a 06	adc $062a			adc 	stringTempPointer 			; subtract from temp pointer
.299d	8d 2a 06	sta $062a			sta 	stringTempPointer
.29a0	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.29a2	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.29a4	ad 2b 06	lda $062b			lda 	stringTempPointer+1
.29a7	69 ff		adc #$ff			adc 	#$FF
.29a9	8d 2b 06	sta $062b			sta 	stringTempPointer+1
.29ac	85 2d		sta $2d				sta 	zsTemp+1
.29ae	85 09		sta $09				sta 	IFR0+IM1
.29b0	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.29b2	a9 80		lda #$80			lda 	#$80
.29b4	85 0b		sta $0b				sta 	IFR0+IExp
.29b6	a9 00		lda #$00			lda 	#0 							; clear the target string
.29b8	92 2c		sta ($2c)			sta 	(zsTemp)
.29ba	60		rts				rts
.29bb					_STALength:
.29bb	4c fb 27	jmp $27fb		jmp	ErrorV_string
.29be					StringTempWrite:
.29be	5a		phy				phy
.29bf	48		pha				pha
.29c0	b2 2c		lda ($2c)			lda 	(zsTemp)
.29c2	1a		inc a				inc 	a
.29c3	92 2c		sta ($2c)			sta 	(zsTemp)
.29c5	a8		tay				tay
.29c6	68		pla				pla
.29c7	91 2c		sta ($2c),y			sta 	(zsTemp),y
.29c9	7a		ply				ply
.29ca	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0627					stringInitialised:
>0627							.fill 	1
.0628					stringMemory:
>0628							.fill 	2
.062a					stringTempPointer:
>062a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.29cb					ErrorHandler:
.29cb	fa		plx				plx 								; get address of msg
.29cc	7a		ply				ply
.29cd	e8		inx				inx 								; bump past RTS
.29ce	d0 01		bne $29d1			bne 	_EHNoInc
.29d0	c8		iny				iny
.29d1					_EHNoInc:
.29d1	20 f7 ff	jsr $fff7			jsr	 	OSWriteString 				; print it.
.29d4	ad 2c 06	lda $062c			lda 	ERRLine 					; direct command ?
.29d7	0d 2d 06	ora $062d			ora 	ERRLine+1
.29da	f0 10		beq $29ec			beq 	_EHNoNumber
.29dc	a2 ef		ldx #$ef			ldx 	#_EHAtMsg & $FF
.29de	a0 29		ldy #$29			ldy 	#_EHAtMsg >> 8
.29e0	20 f7 ff	jsr $fff7			jsr 	OSWriteString
.29e3	ad 2c 06	lda $062c			lda 	ERRLine 					; line number -> XA
.29e6	ae 2d 06	ldx $062d			ldx 	ERRLine+1
.29e9	20 f4 29	jsr $29f4			jsr 	WriteIntXA
.29ec					_EHNoNumber:
.29ec	4c 1d 2a	jmp $2a1d			jmp 	WarmStartNewLine
.29ef					_EHAtMsg:
>29ef	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.29f4					_EHAtMsg1:
.29f4					WriteIntXA:
.29f4	da		phx				phx
.29f5	48		pha				pha
.29f6	a2 08		ldx #$08			ldx 	#IFR0
.29f8	20 89 31	jsr $3189			jsr 	IFloatPushRx
.29fb	68		pla				pla
.29fc	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.29ff	68		pla				pla
.2a00	85 09		sta $09				sta 	IFR0+IM1
.2a02	a9 0a		lda #$0a			lda 	#10 						; decimal
.2a04	20 dc 2f	jsr $2fdc			jsr 	IFloatIntegerToStringR0	 	; convert
.2a07	20 f7 ff	jsr $fff7			jsr 	OSWriteString 				; print
.2a0a	a2 08		ldx #$08			ldx 	#IFR0
.2a0c	20 aa 31	jsr $31aa			jsr 	IFloatPullRx
.2a0f	60		rts				rts
.2a10					NotImplemented:
.2a10	4c 20 27	jmp $2720		jmp	ErrorV_unimplemented
.062c					ERRLine:
>062c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2a13					WarmStart:
.2a13	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2a15	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2a18	a9 6b		lda #$6b			lda 	#"k"
.2a1a	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2a1d					WarmStartNewLine:
.2a1d	a9 0d		lda #$0d			lda 	#13
.2a1f	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2a22					WarmStartNoPrompt:
.2a22	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2a24	9a		txs				txs
.2a25	20 e2 ff	jsr $ffe2			jsr 	OSScreenLine 				; edit
.2a28	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2a29	d0 01		bne $2a2c			bne 	_WSSkip
.2a2b	c8		iny				iny
.2a2c					_WSSkip:
.2a2c	86 26		stx $26				stx 	zTemp2 						; save address
.2a2e	84 27		sty $27				sty 	zTemp2+1
.2a30	b2 26		lda ($26)			lda 	(zTemp2)
.2a32	f0 ee		beq $2a22			beq 	WarmStartNoPrompt 			; ignore empty line.
.2a34	a2 66		ldx #$66			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2a36	a0 2a		ldy #$2a			ldy 	#TOKGetCharacter >> 8
.2a38	38		sec				sec
.2a39	20 22 21	jsr $2122			jsr 	TOKTokenise
.2a3c	b0 25		bcs $2a63			bcs 	_WSSyntax
.2a3e	ad 07 04	lda $0407			lda 	TOKLineNumber 				; if line number zero
.2a41	0d 08 04	ora $0408			ora 	TOKLineNumber+1
.2a44	d0 0b		bne $2a51			bne 	_WSLineEdit
.2a46	a9 06		lda #$06			lda 	#TOKLineSize & $FF 			; execute code.
.2a48	85 18		sta $18				sta 	codePtr
.2a4a	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2a4c	85 19		sta $19				sta 	codePtr+1
.2a4e	4c d7 14	jmp $14d7			jmp 	RUNNewLine
.2a51					_WSLineEdit:
.2a51	20 fd 1f	jsr $1ffd			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2a54	ad 06 04	lda $0406			lda 	TOKLineSize 				; check line is empty.
.2a57	c9 04		cmp #$04			cmp 	#4
.2a59	f0 03		beq $2a5e			beq 	_WSNoInsert
.2a5b	20 47 20	jsr $2047			jsr 	PGMInsertLine				; if not, maybe insert
.2a5e					_WSNoInsert:
.2a5e	20 3c 10	jsr $103c			jsr 	ClearCode 					; clear variables etc.
.2a61	80 bf		bra $2a22			bra 	WarmStartNoPrompt
.2a63					_WSSyntax:
.2a63	4c de 26	jmp $26de		jmp	ErrorV_syntax
.2a66					TOKGetCharacter:
.2a66	b2 26		lda ($26)			lda 	(zTemp2)
.2a68	90 06		bcc $2a70			bcc 	_GSNoIncrement
.2a6a	e6 26		inc $26				inc 	zTemp2
.2a6c	d0 02		bne $2a70			bne 	_GSNoIncrement
.2a6e	e6 27		inc $27				inc 	zTemp2+1
.2a70					_GSNoIncrement:
.2a70	c9 00		cmp #$00			cmp 	#0
.2a72	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2a73					VARArrayLookup:
.2a73	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2a75	86 23		stx $23				stx 	zTemp0+1
.2a77	b2 22		lda ($22)			lda 	(zTemp0)
.2a79	48		pha				pha
.2a7a	5a		phy				phy
.2a7b	a0 01		ldy #$01			ldy 	#1
.2a7d	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a7f	7a		ply				ply
.2a80	48		pha				pha
.2a81	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2a84	68		pla				pla 								; array address to zTemp0
.2a85	85 23		sta $23				sta 	zTemp0+1
.2a87	68		pla				pla
.2a88	85 22		sta $22				sta 	zTemp0
.2a8a	5a		phy				phy 								; save codePtr position.
.2a8b	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2a8d	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a8f	48		pha				pha 								; save bit 15 on stack.
.2a90	29 7f		and #$7f			and 	#$7F
.2a92	85 24		sta $24				sta 	zTemp1
.2a94	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2a96	d2 22		cmp ($22)			cmp 	(zTemp0)
.2a98	a5 09		lda $09				lda 	IFR0+IM1
.2a9a	e5 24		sbc $24				sbc 	zTemp1
.2a9c	b0 3a		bcs $2ad8			bcs 	_VALIndex
.2a9e	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2aa0	c9 40		cmp #$40			cmp 	#$40
.2aa2	b0 34		bcs $2ad8			bcs 	_VALIndex
.2aa4	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2aa6	26 09		rol $09				rol 	IFR0+IM1
.2aa8	fa		plx				plx 								; get msb of size -> X
.2aa9	30 04		bmi $2aaf			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2aab	06 08		asl $08				asl 	IFR0+IM0
.2aad	26 09		rol $09				rol 	IFR0+IM1
.2aaf					_VARNotX4:
.2aaf	18		clc				clc 								; add the two for the size bytes
.2ab0	a5 08		lda $08				lda 	IFR0+IM0
.2ab2	69 02		adc #$02			adc 	#2
.2ab4	85 08		sta $08				sta 	IFR0+IM0
.2ab6	90 02		bcc $2aba			bcc 	_VARNoCarry1
.2ab8	e6 09		inc $09				inc 	IFR0+IM1
.2aba					_VARNoCarry1:
.2aba	18		clc				clc 								; calculate the element address and push to stack.
.2abb	a5 08		lda $08				lda 	IFR0+IM0
.2abd	65 22		adc $22				adc 	zTemp0
.2abf	48		pha				pha
.2ac0	a5 09		lda $09				lda 	IFR0+IM1
.2ac2	65 23		adc $23				adc 	zTemp0+1
.2ac4	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2ac6	30 04		bmi $2acc			bmi 	_VARHasSubLevel
.2ac8	aa		tax				tax 								; address in XA
.2ac9	68		pla				pla
.2aca	7a		ply				ply 								; restore Y and exit
.2acb	60		rts				rts
.2acc					_VARHasSubLevel:
.2acc	aa		tax				tax 								; get link address in XA
.2acd	68		pla				pla
.2ace	7a		ply				ply 								; restore code position.
.2acf	48		pha				pha
.2ad0	20 9b 28	jsr $289b			jsr 	ERRCheckComma 				; comma required.
.2ad3	68		pla				pla
.2ad4	20 73 2a	jsr $2a73			jsr 	VARArrayLookup 				; call it recursively
.2ad7	60		rts				rts
.2ad8					_VALIndex:
.2ad8	4c ba 27	jmp $27ba		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2adb					VARCreate:
.2adb	5a		phy				phy
.2adc	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2ade	a2 00		ldx #$00			ldx 	#0
.2ae0	20 59 10	jsr $1059			jsr 	AllocateMemory
.2ae3	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.2ae5	86 25		stx $25				stx 	zTemp1+1
.2ae7	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2ae9	ad 30 06	lda $0630			lda 	VARHash
.2aec	91 24		sta ($24),y			sta 	(zTemp1),y
.2aee	c8		iny				iny 								; put address of name into +3,+4
.2aef	ad 2e 06	lda $062e			lda 	VARNameAddress
.2af2	91 24		sta ($24),y			sta 	(zTemp1),y
.2af4	c8		iny				iny
.2af5	ad 2f 06	lda $062f			lda 	VARNameAddress+1
.2af8	91 24		sta ($24),y			sta 	(zTemp1),y
.2afa	ad 31 06	lda $0631			lda 	VARType
.2afd	29 01		and #$01			and 	#1
.2aff	f0 06		beq $2b07			beq 	_CVNotString
.2b01	a0 08		ldy #$08			ldy 	#5+3
.2b03	a9 80		lda #$80			lda 	#$80
.2b05	91 24		sta ($24),y			sta 	(zTemp1),y
.2b07					_CVNotString:
.2b07	ad 52 06	lda $0652			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2b0a	85 22		sta $22				sta 	zTemp0
.2b0c	ad 53 06	lda $0653			lda 	VARHashEntry+1
.2b0f	85 23		sta $23				sta 	zTemp0+1
.2b11	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2b13	b2 22		lda ($22)			lda 	(zTemp0)
.2b15	92 24		sta ($24)			sta 	(zTemp1)
.2b17	b1 22		lda ($22),y			lda 	(zTemp0),y
.2b19	91 24		sta ($24),y			sta 	(zTemp1),y
.2b1b	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2b1d	92 22		sta ($22)			sta 	(zTemp0)
.2b1f	a5 25		lda $25				lda 	zTemp1+1
.2b21	91 22		sta ($22),y			sta 	(zTemp0),y
.2b23	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2b25	a6 25		ldx $25				ldx 	zTemp1+1
.2b27	18		clc				clc 								; add 5 to point to the data.
.2b28	69 05		adc #$05			adc 	#5
.2b2a	90 01		bcc $2b2d			bcc 	_VCNoCarry
.2b2c	e8		inx				inx
.2b2d					_VCNoCarry:
.2b2d	7a		ply				ply
.2b2e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2b2f					VARFind:
.2b2f	5a		phy				phy
.2b30	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2b32	b1 22		lda ($22),y			lda 	(zTemp0),y
.2b34	85 25		sta $25				sta 	zTemp1+1
.2b36	f0 1c		beq $2b54			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2b38	b2 22		lda ($22)			lda 	(zTemp0)
.2b3a	85 24		sta $24				sta 	zTemp1
.2b3c					_VFLoop:
.2b3c	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2b3e	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b40	cd 30 06	cmp $0630			cmp 	VARHash
.2b43	f0 12		beq $2b57			beq 	_VFHashesMatch 				; if so, check the name.
.2b45					_VFNext:
.2b45	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2b47	aa		tax				tax
.2b48	a0 01		ldy #$01			ldy 	#1
.2b4a	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b4c	85 25		sta $25				sta 	zTemp1+1
.2b4e	86 24		stx $24				stx 	zTemp1
.2b50	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2b52	d0 e8		bne $2b3c			bne 	_VFLoop
.2b54					_VFExitFail:
.2b54	7a		ply				ply
.2b55	18		clc				clc
.2b56	60		rts				rts
.2b57					_VFHashesMatch:
.2b57	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2b59	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b5b	85 26		sta $26				sta 	zTemp2
.2b5d	c8		iny				iny
.2b5e	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b60	85 27		sta $27				sta 	zTemp2+1
.2b62	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2b64					_VFNameCompLoop:
.2b64	c8		iny				iny 								; char at a time
.2b65	b9 32 06	lda $0632,y			lda 	VARBuffer,y
.2b68	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2b6a	d0 d9		bne $2b45			bne 	_VFNext						; next entry if different.
.2b6c	c9 7c		cmp #$7c			cmp 	#$7C
.2b6e	90 f4		bcc $2b64			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2b70	18		clc				clc
.2b71	a5 24		lda $24				lda 	zTemp1
.2b73	a6 25		ldx $25				ldx 	zTemp1+1
.2b75	69 05		adc #$05			adc 	#5
.2b77	90 01		bcc $2b7a			bcc 	_VFNNoCarry
.2b79	e8		inx				inx
.2b7a					_VFNNoCarry:
.2b7a	7a		ply				ply
.2b7b	38		sec				sec
.2b7c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2b7d					VARGetInfo:
.2b7d	98		tya				tya 								; calculate the address of the identifier start.
.2b7e	18		clc				clc
.2b7f	65 18		adc $18				adc 	codePtr
.2b81	8d 2e 06	sta $062e			sta 	VARNameAddress
.2b84	a5 19		lda $19				lda 	codePtr+1
.2b86	69 00		adc #$00			adc 	#0
.2b88	8d 2f 06	sta $062f			sta 	VARNameAddress+1
.2b8b	9c 30 06	stz $0630			stz 	VARHash
.2b8e	a2 00		ldx #$00			ldx 	#0
.2b90					_VARCopyName:
.2b90	18		clc				clc 								; update the sum hash.
.2b91	ad 30 06	lda $0630			lda 	VARHash
.2b94	71 18		adc ($18),y			adc 	(codePtr),y
.2b96	8d 30 06	sta $0630			sta 	VARHash
.2b99	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2b9b	c8		iny				iny
.2b9c	9d 32 06	sta $0632,x			sta 	VARBuffer,x
.2b9f	e8		inx				inx
.2ba0	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2ba2	90 ec		bcc $2b90			bcc 	_VARCopyName
.2ba4	8d 31 06	sta $0631			sta 	VARType 					; save type byte
.2ba7	29 03		and #$03			and 	#3 							; type is 0-3
.2ba9	0a		asl a				asl 	a
.2baa	0a		asl a				asl 	a
.2bab	85 22		sta $22				sta 	zTemp0
.2bad	ad 30 06	lda $0630			lda 	VARHash 					; force into range of hash entries per type.
.2bb0	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2bb2	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2bb4	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2bb5	69 54		adc #$54			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2bb7	85 22		sta $22				sta 	zTemp0
.2bb9	8d 52 06	sta $0652			sta 	VARHashEntry
.2bbc	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2bbe	69 00		adc #$00			adc 	#0
.2bc0	85 23		sta $23				sta 	zTemp0+1
.2bc2	8d 53 06	sta $0653			sta 	VARHashEntry+1
.2bc5	60		rts				rts
.2bc6					VARClearHashTables:
.2bc6	a2 00		ldx #$00			ldx 	#0
.2bc8					_VCHRLoop:
.2bc8	a9 00		lda #$00			lda 	#0
.2bca	9d 54 06	sta $0654,x			sta 	VARHashTables,x
.2bcd	e8		inx				inx
.2bce	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2bd0	d0 f6		bne $2bc8			bne 	_VCHRLoop
.2bd2	60		rts				rts
.062e					VARNameAddress:
>062e							.fill 	2
.0630					VARHash:
>0630							.fill 	1
.0631					VARType:
>0631							.fill 	1
.0632					VARBuffer:
>0632							.fill 	32
.0652					VARHashEntry:
>0652							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0654					VARHashTables:
>0654							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2bd3					VARCheckSimple:
.2bd3	aa		tax				tax 								; save in X
.2bd4	b1 18		lda ($18),y			lda 	(codePtr),y
.2bd6	c9 7c		cmp #$7c			cmp 	#$7C
.2bd8	d0 15		bne $2bef			bne 	_VCSComplex
.2bda	c8		iny				iny 								; consume the second byte, the type.
.2bdb	8a		txa				txa  								; character (40-7F) x 4
.2bdc	0a		asl a				asl 	a
.2bdd	0a		asl a				asl  	a
.2bde	18		clc				clc
.2bdf	69 74		adc #$74			adc 	#FastVariables & $FF
.2be1	85 08		sta $08				sta 	IFR0+IM0
.2be3	a9 06		lda #$06			lda 	#FastVariables >> 8
.2be5	69 00		adc #$00			adc 	#0
.2be7	85 09		sta $09				sta 	IFR0+IM1
.2be9	64 0a		stz $0a				stz 	IFR0+IM2
.2beb	64 0b		stz $0b				stz 	IFR0+IExp
.2bed	38		sec				sec 								; it's a reference
.2bee	60		rts				rts
.2bef					_VCSComplex:
.2bef	88		dey				dey	 								; extract information.
.2bf0	20 7d 2b	jsr $2b7d			jsr 	VARGetInfo
.2bf3	20 2f 2b	jsr $2b2f			jsr 	VARFind 					; search for variable
.2bf6	b0 0a		bcs $2c02			bcs 	_VCSHaveVariable
.2bf8	ad 31 06	lda $0631			lda 	VARType 					; error if arrays, cannot autocreate
.2bfb	29 02		and #$02			and 	#2
.2bfd	d0 25		bne $2c24			bne 	_VCNoCreate
.2bff	20 db 2a	jsr $2adb			jsr 	VARCreate 					; create variable
.2c02					_VCSHaveVariable:
.2c02	48		pha				pha 								; save LSB on the stack
.2c03	ad 31 06	lda $0631			lda 	VARType 					; get var type, and shift bit 1 into carry
.2c06	6a		ror a				ror 	a
.2c07	6a		ror a				ror 	a
.2c08	68		pla				pla 								; restore LSB
.2c09	90 08		bcc $2c13			bcc 	_VCSNotArray 				; skip if not an array
.2c0b	20 73 2a	jsr $2a73			jsr 	VARArrayLookup 				; look for subscripts.
.2c0e	48		pha				pha 								; check )
.2c0f	20 93 28	jsr $2893			jsr 	ERRCheckRParen
.2c12	68		pla				pla
.2c13					_VCSNotArray:
.2c13	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2c15	85 08		sta $08				sta 	IFR0+IM0
.2c17	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2c19	ad 31 06	lda $0631			lda 	VARType 					; number/string bit into carry
.2c1c	6a		ror a				ror 	a
.2c1d	a9 00		lda #$00			lda 	#0
.2c1f	6a		ror a				ror 	a 							; now $00 or $80
.2c20	85 0b		sta $0b				sta 	IFR0+IExp
.2c22	38		sec				sec 								; it's a reference
.2c23	60		rts				rts
.2c24					_VCNoCreate:
.2c24	4c e0 27	jmp $27e0		jmp	ErrorV_uninitialised
.0674					FastVariables:
>0674							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2c27					IFInitialise:
.2c27	9c e4 06	stz $06e4			stz 	IFStackIndex 				; reset the internal stack.
.2c2a	60		rts				rts
.2c2b					IFloatSubtract:
.2c2b	da		phx				phx
.2c2c	a2 08		ldx #$08			ldx 	#IFR0
.2c2e	20 45 32	jsr $3245			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2c31	fa		plx				plx
.2c32					IFloatAdd:
.2c32	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2c34	05 0b		ora $0b				ora 	IFR0+IExp
.2c36	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2c38	d0 4e		bne $2c88			bne 	_IFloatAddDecimals 			; floating point version.
.2c3a					_IFAddSubMantissa:
.2c3a	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2c3c	45 0b		eor $0b				eor 	IFR0+IExp
.2c3e	29 40		and #$40			and 	#IFSign
.2c40	d0 21		bne $2c63			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2c42	18		clc				clc 								; do the actual addition
.2c43	a5 08		lda $08				lda 	IFR0+IM0
.2c45	75 00		adc $00,x			adc 		IM0,x
.2c47	85 08		sta $08				sta 	IFR0+IM0
.2c49	a5 09		lda $09				lda 	IFR0+IM1
.2c4b	75 01		adc $01,x			adc 		IM1,x
.2c4d	85 09		sta $09				sta 	IFR0+IM1
.2c4f	a5 0a		lda $0a				lda 	IFR0+IM2
.2c51	75 02		adc $02,x			adc 		IM2,x
.2c53	85 0a		sta $0a				sta 	IFR0+IM2
.2c55	10 29		bpl $2c80			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2c57	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2c59	20 69 32	jsr $3269			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2c5c	20 93 32	jsr $3293			jsr 	IFloatIncExponent
.2c5f	d0 1f		bne $2c80			bne 	_IFloatAddExit
.2c61	38		sec				sec 								; overflowed numerically.
.2c62	60		rts				rts
.2c63					_IFloatSubMantissa:
.2c63	38		sec				sec 								; do the subtraction R0-Rx
.2c64	a5 08		lda $08				lda 	IFR0+IM0
.2c66	f5 00		sbc $00,x			sbc 		IM0,x
.2c68	85 08		sta $08				sta 	IFR0+IM0
.2c6a	a5 09		lda $09				lda 	IFR0+IM1
.2c6c	f5 01		sbc $01,x			sbc 		IM1,x
.2c6e	85 09		sta $09				sta 	IFR0+IM1
.2c70	a5 0a		lda $0a				lda 	IFR0+IM2
.2c72	f5 02		sbc $02,x			sbc 		IM2,x
.2c74	85 0a		sta $0a				sta 	IFR0+IM2
.2c76	b0 08		bcs $2c80			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2c78	a2 08		ldx #$08			ldx 	#IFR0
.2c7a	20 4d 32	jsr $324d			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2c7d	20 45 32	jsr $3245			jsr 	IFloatNegate 				; negate the result using sign bit.
.2c80					_IFloatAddExit:
.2c80	18		clc				clc
.2c81	60		rts				rts
.2c82					_IFloatZeroAdd:
.2c82	fa		plx				plx 								; return this value in R0
.2c83	20 cb 31	jsr $31cb			jsr 	IFloatCopyFromRegister
.2c86	18		clc				clc
.2c87	60		rts				rts
.2c88					_IFloatAddDecimals:
.2c88	20 33 32	jsr $3233			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2c8b	f0 f3		beq $2c80			beq 	_IFloatAddExit
.2c8d	20 71 32	jsr $3271			jsr 	IFloatNormalise 			; normalise RX
.2c90	da		phx				phx 								; normalise R0
.2c91	a2 08		ldx #$08			ldx 	#IFR0
.2c93	20 33 32	jsr $3233			jsr 	IFloatCheckZero
.2c96	f0 ea		beq $2c82			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2c98	20 71 32	jsr $3271			jsr 	IFloatNormalise
.2c9b	fa		plx				plx
.2c9c	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2c9e	29 3f		and #$3f			and 	#IFXMask
.2ca0	38		sec				sec
.2ca1	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2ca3	85 20		sta $20				sta 	iTemp0
.2ca5	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2ca7	29 3f		and #$3f			and 	#IFXMask
.2ca9	38		sec				sec
.2caa	e9 20		sbc #$20			sbc 	#$20
.2cac	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2cae	b0 02		bcs $2cb2			bcs 	_IFloatHaveLarger
.2cb0	a5 20		lda $20				lda 	iTemp0
.2cb2					_IFloatHaveLarger:
.2cb2	18		clc				clc 								; get the actual one back.
.2cb3	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2cb5	20 c2 2c	jsr $2cc2			jsr 	_IFShiftXToA
.2cb8	da		phx				phx
.2cb9	a2 08		ldx #$08			ldx 	#IFR0
.2cbb	20 c2 2c	jsr $2cc2			jsr 	_IFShiftXToA
.2cbe	fa		plx				plx
.2cbf	4c 3a 2c	jmp $2c3a			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2cc2					_IFShiftXToA:
.2cc2	8d dc 06	sta $06dc			sta 	IFTarget
.2cc5	20 33 32	jsr $3233			jsr 	IFloatCheckZero 			; check adding zero ?
.2cc8	f0 11		beq $2cdb			beq 	_IFSXExit
.2cca					_IFSXLoop:
.2cca	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2ccc	29 3f		and #$3f			and 	#IFXMask
.2cce	cd dc 06	cmp $06dc			cmp 	IFTarget
.2cd1	f0 08		beq $2cdb			beq 	_IFSXExit
.2cd3	20 69 32	jsr $3269			jsr 	IFloatShiftRight
.2cd6	20 93 32	jsr $3293			jsr 	IFloatIncExponent
.2cd9	80 ef		bra $2cca			bra 	_IFSXLoop
.2cdb					_IFSXExit:
.2cdb	60		rts				rts
.06dc					IFTarget:
>06dc							.fill 	1
.2cdc					IFloatMultiply:
.2cdc	8e dc 06	stx $06dc			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2cdf	20 94 2d	jsr $2d94			jsr 	IFCalculateNewSign
.2ce2	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2ce4	05 0b		ora $0b				ora 	IFR0+IExp
.2ce6	29 3f		and #$3f			and 	#IFXMask
.2ce8	15 01		ora $01,x			ora 	IM1,x
.2cea	05 09		ora $09				ora 	IFR0+IM1
.2cec	15 02		ora $02,x			ora 	IM2,x
.2cee	05 0a		ora $0a				ora 	IFR0+IM2
.2cf0	d0 0a		bne $2cfc			bne 	_IFMStandard
.2cf2	20 16 32	jsr $3216			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2cf5	ad de 06	lda $06de			lda 	IFNewSign
.2cf8	85 0b		sta $0b				sta 	IFR0+IExp
.2cfa	18		clc				clc
.2cfb	60		rts				rts
.2cfc					_IFMStandard:
.2cfc	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2cfe	20 8b 2d	jsr $2d8b			jsr 	IFMSignExtend
.2d01	8d dd 06	sta $06dd			sta 	IFNewExponent
.2d04	a5 0b		lda $0b				lda 	IFR0+IExp
.2d06	20 8b 2d	jsr $2d8b			jsr 	IFMSignExtend
.2d09	18		clc				clc
.2d0a	6d dd 06	adc $06dd			adc 	IFNewExponent
.2d0d	8d dd 06	sta $06dd			sta 	IFNewExponent
.2d10	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2d12	20 dc 31	jsr $31dc			jsr 	IFloatCopyToRegister
.2d15	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2d17	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.2d1a					_IFMLoop:
.2d1a	a2 14		ldx #$14			ldx 	#IFRTemp
.2d1c	20 33 32	jsr $3233			jsr 	IFloatCheckZero
.2d1f	f0 3a		beq $2d5b			beq 	_IFMExit
.2d21	ae dc 06	ldx $06dc			ldx 	IFTarget 					; look at adder MSB
.2d24	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2d26	10 03		bpl $2d2b			bpl	 	_IFMTargetOkay
.2d28	20 7c 2d	jsr $2d7c			jsr 	_IFMShiftAll
.2d2b					_IFMTargetOkay:
.2d2b	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2d2d	29 01		and #$01			and 	#1
.2d2f	f0 16		beq $2d47			beq 	_IFMNoAdd
.2d31	ae dc 06	ldx $06dc			ldx 	IFTarget 					; add adder
.2d34	18		clc				clc
.2d35	a5 08		lda $08				lda 	IFR0+IM0
.2d37	75 00		adc $00,x			adc 		IM0,x
.2d39	85 08		sta $08				sta 	IFR0+IM0
.2d3b	a5 09		lda $09				lda 	IFR0+IM1
.2d3d	75 01		adc $01,x			adc 		IM1,x
.2d3f	85 09		sta $09				sta 	IFR0+IM1
.2d41	a5 0a		lda $0a				lda 	IFR0+IM2
.2d43	75 02		adc $02,x			adc 		IM2,x
.2d45	85 0a		sta $0a				sta 	IFR0+IM2
.2d47					_IFMNoAdd:
.2d47	a5 0a		lda $0a				lda 	IFR0+IM2
.2d49	10 03		bpl $2d4e			bpl 	_IFMResultOkay
.2d4b	20 7c 2d	jsr $2d7c			jsr 	_IFMShiftAll
.2d4e					_IFMResultOkay:
.2d4e	a2 14		ldx #$14			ldx 	#IFRTemp
.2d50	20 69 32	jsr $3269			jsr 	IFloatShiftRight
.2d53	ae dc 06	ldx $06dc			ldx 	IFTarget
.2d56	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.2d59	80 bf		bra $2d1a			bra 	_IFMLoop
.2d5b					_IFMExit:
.2d5b	ad dd 06	lda $06dd			lda 	IFNewExponent 				; validate new exponent.
.2d5e	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2d60	90 0f		bcc $2d71			bcc 	_IFMOkay
.2d62	c9 e0		cmp #$e0			cmp 	#$E0
.2d64	b0 0b		bcs $2d71			bcs 	_IFMOkay
.2d66	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2d68	f0 10		beq $2d7a			beq 	_IFMError
.2d6a	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2d6c	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.2d6f	18		clc				clc
.2d70	60		rts				rts
.2d71					_IFMOkay:
.2d71	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2d73	0d de 06	ora $06de			ora 	IFNewSign
.2d76	85 0b		sta $0b				sta 	IFR0+IExp
.2d78	18		clc				clc
.2d79	60		rts				rts
.2d7a					_IFMError:
.2d7a	38		sec				sec
.2d7b	60		rts				rts
.2d7c					_IFMShiftAll:
.2d7c	a2 08		ldx #$08			ldx 	#IFR0
.2d7e	20 69 32	jsr $3269			jsr 	IFloatShiftRight
.2d81	ae dc 06	ldx $06dc			ldx 	IFTarget
.2d84	20 69 32	jsr $3269			jsr 	IFloatShiftRight
.2d87	ee dd 06	inc $06dd			inc 	IFNewExponent
.2d8a	60		rts				rts
.2d8b					IFMSignExtend:
.2d8b	29 3f		and #$3f			and 	#IFXMask
.2d8d	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2d8f	90 02		bcc $2d93			bcc 	_IFMNoSXX
.2d91	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2d93					_IFMNoSXX:
.2d93	60		rts				rts
.2d94					IFCalculateNewSign:
.2d94	b5 03		lda $03,x			lda 	IExp,x
.2d96	45 0b		eor $0b				eor 	IFR0+IExp
.2d98	29 40		and #$40			and 	#IFSign
.2d9a	8d de 06	sta $06de			sta 	IFNewSign
.2d9d	60		rts				rts
.06dd					IFNewExponent:
>06dd							.fill 	1
.06de					IFNewSign:
>06de							.fill 	1
.2d9e					IFloatDivideInteger:
.2d9e	20 b7 2d	jsr $2db7			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2da1	b0 06		bcs $2da9			bcs 	_IFDIExit
.2da3	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2da5	20 cb 31	jsr $31cb			jsr 	IFloatCopyFromRegister
.2da8	18		clc				clc
.2da9					_IFDIExit:
.2da9	60		rts				rts
.2daa					IFloatModulusInteger:
.2daa	20 b7 2d	jsr $2db7			jsr 	IFloatDivideIntegerCommon
.2dad	b0 07		bcs $2db6			bcs 	_IFMIExit
.2daf	ae dc 06	ldx $06dc			ldx 	IFTarget
.2db2	20 cb 31	jsr $31cb			jsr 	IFloatCopyFromRegister
.2db5	18		clc				clc
.2db6					_IFMIExit:
.2db6	60		rts				rts
.2db7					IFloatDivideIntegerCommon:
.2db7	8e dc 06	stx $06dc			stx 	IFTarget  					; this is s1, s0 = R0
.2dba	20 94 2d	jsr $2d94			jsr 	IFCalculateNewSign 			; calculate sign of result
.2dbd	20 e5 2d	jsr $2de5			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2dc0	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2dc2	20 33 32	jsr $3233			jsr 	IFloatCheckZero
.2dc5	f0 1c		beq $2de3			beq 	_IFDIDivZero
.2dc7	ae dc 06	ldx $06dc			ldx 	IFTarget 					; zero Rx (S1)
.2dca	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.2dcd	5a		phy				phy
.2dce	a0 18		ldy #$18			ldy 	#24
.2dd0					_IFDILoop:
.2dd0	20 f6 2d	jsr $2df6			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2dd3	20 02 2e	jsr $2e02			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2dd6	88		dey				dey
.2dd7	d0 f7		bne $2dd0			bne 	_IFDILoop 					; do it 24 times
.2dd9	7a		ply				ply
.2dda	ad de 06	lda $06de			lda 	IFNewSign 					; set sign of result.
.2ddd	29 40		and #$40			and 	#IFSign
.2ddf	85 17		sta $17				sta 	IFRTemp+IExp
.2de1	18		clc				clc 								; is okay.
.2de2	60		rts				rts
.2de3					_IFDIDivZero:
.2de3	38		sec				sec
.2de4	60		rts				rts
.2de5					IFDCopyRXToRTemp:
.2de5	b5 00		lda $00,x			lda 	IM0,x
.2de7	85 14		sta $14				sta 	IFRTemp+IM0
.2de9	b5 01		lda $01,x			lda 	IM1,x
.2deb	85 15		sta $15				sta 	IFRTemp+IM1
.2ded	b5 02		lda $02,x			lda 	IM2,x
.2def	85 16		sta $16				sta 	IFRTemp+IM2
.2df1	b5 03		lda $03,x			lda 	IExp,x
.2df3	85 17		sta $17				sta 	IFRTemp+IExp
.2df5	60		rts				rts
.2df6					IFDShiftSTempS1Left:
.2df6	a2 14		ldx #$14			ldx 	#IFRTemp
.2df8	20 61 32	jsr $3261			jsr 	IFloatShiftLeft
.2dfb	ae dc 06	ldx $06dc			ldx 	IFTarget
.2dfe	20 62 32	jsr $3262			jsr 	IFloatRotateLeft
.2e01	60		rts				rts
.2e02					IFDTrySubtract:
.2e02	ae dc 06	ldx $06dc			ldx 	IFTarget 					; s1 = Rx
.2e05	38		sec				sec 								; subtract, saving the results on the stack.
.2e06	b5 00		lda $00,x			lda 	IM0,x
.2e08	e5 08		sbc $08				sbc 	IFR0+IM0
.2e0a	48		pha				pha
.2e0b	b5 01		lda $01,x			lda 	IM1,x
.2e0d	e5 09		sbc $09				sbc 	IFR0+IM1
.2e0f	48		pha				pha
.2e10	b5 02		lda $02,x			lda 	IM2,x
.2e12	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2e14	b0 03		bcs $2e19			bcs 	_IFDCanSubtract
.2e16	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2e17	68		pla				pla
.2e18	60		rts				rts
.2e19					_IFDCanSubtract:
.2e19	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2e1b	68		pla				pla
.2e1c	95 01		sta $01,x			sta 	IM1,x
.2e1e	68		pla				pla
.2e1f	95 00		sta $00,x			sta 	IM0,x
.2e21	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2e23	d0 06		bne $2e2b			bne 	_IFDCSExit
.2e25	e6 15		inc $15				inc 	IFRTemp+IM1
.2e27	d0 02		bne $2e2b			bne 	_IFDCSExit
.2e29	e6 16		inc $16				inc 	IFRTemp+IM2
.2e2b					_IFDCSExit:
.2e2b	60		rts				rts
.2e2c					IFloatBitwiseAnd:
.2e2c	5a		phy				phy
.2e2d	20 71 2e	jsr $2e71			jsr 	IFPreProcessBitwise 		; set up everything.
.2e30	d0 0f		bne $2e41			bne 	_IFBAExit
.2e32					_IFBALoop:
.2e32	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2e35	35 00		and $00,x			and 	IM0,x
.2e37	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2e3a	e8		inx				inx
.2e3b	c8		iny				iny
.2e3c	c0 03		cpy #$03			cpy 	#3
.2e3e	d0 f2		bne $2e32			bne 	_IFBALoop
.2e40	18		clc				clc
.2e41					_IFBAExit:
.2e41	7a		ply				ply
.2e42	60		rts				rts
.2e43					IFloatBitwiseOr:
.2e43	5a		phy				phy
.2e44	20 71 2e	jsr $2e71			jsr 	IFPreProcessBitwise 		; set up everything.
.2e47	d0 0f		bne $2e58			bne 	_IFBAExit
.2e49					_IFBALoop:
.2e49	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2e4c	15 00		ora $00,x			ora 	IM0,x
.2e4e	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2e51	e8		inx				inx
.2e52	c8		iny				iny
.2e53	c0 03		cpy #$03			cpy 	#3
.2e55	d0 f2		bne $2e49			bne 	_IFBALoop
.2e57	18		clc				clc
.2e58					_IFBAExit:
.2e58	7a		ply				ply
.2e59	60		rts				rts
.2e5a					IFloatBitwiseXor:
.2e5a	5a		phy				phy
.2e5b	20 71 2e	jsr $2e71			jsr 	IFPreProcessBitwise 		; set up everything.
.2e5e	d0 0f		bne $2e6f			bne 	_IFBAExit
.2e60					_IFBALoop:
.2e60	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2e63	55 00		eor $00,x			eor 	IM0,x
.2e65	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2e68	e8		inx				inx
.2e69	c8		iny				iny
.2e6a	c0 03		cpy #$03			cpy 	#3
.2e6c	d0 f2		bne $2e60			bne 	_IFBALoop
.2e6e	18		clc				clc
.2e6f					_IFBAExit:
.2e6f	7a		ply				ply
.2e70	60		rts				rts
.2e71					IFPreProcessBitwise:
.2e71	a0 00		ldy #$00			ldy 	#0 							; set index.
.2e73	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2e75	15 03		ora $03,x			ora 	IExp,x
.2e77	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2e79	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2e7b	38		sec				sec 								; carry set just in cases.
.2e7c	60		rts				rts
.2e7d					IFloatAbsoluteR0:
.2e7d	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2e7f	29 bf		and #$bf			and 	#IFSign ^ 255
.2e81	85 0b		sta $0b				sta 	IFR0+IExp
.2e83	18		clc				clc
.2e84	60		rts				rts
.2e85					IFloatSquareRootR0:
.2e85	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2e87	20 33 32	jsr $3233			jsr 	IFloatCheckZero
.2e8a	f0 2e		beq $2eba			beq 	_IFSRZero
.2e8c	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2e8e	29 40		and #$40			and 	#IFSign
.2e90	d0 2f		bne $2ec1			bne 	_IFSRFail
.2e92	20 71 32	jsr $3271			jsr 	IFloatNormalise 			; it will work better !
.2e95	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2e97	20 dc 31	jsr $31dc			jsr 	IFloatCopyToRegister
.2e9a	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2e9c	20 8b 2d	jsr $2d8b			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2e9f	18		clc				clc
.2ea0	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2ea2	85 0b		sta $0b				sta 	IFR0+IExp
.2ea4	4a		lsr a				lsr 	a 							; which we can halve.
.2ea5	38		sec				sec 								; convert back
.2ea6	e9 17		sbc #$17			sbc 	#23
.2ea8	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2eaa	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2eac	20 c3 2e	jsr $2ec3			jsr 	_IFSRNewton
.2eaf	20 c3 2e	jsr $2ec3			jsr 	_IFSRNewton
.2eb2	20 c3 2e	jsr $2ec3			jsr 	_IFSRNewton
.2eb5	20 c3 2e	jsr $2ec3			jsr 	_IFSRNewton
.2eb8	18		clc				clc
.2eb9	60		rts				rts
.2eba					_IFSRZero:
.2eba	a2 08		ldx #$08			ldx 	#IFR0
.2ebc	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.2ebf	18		clc				clc
.2ec0	60		rts				rts
.2ec1					_IFSRFail:
.2ec1	38		sec				sec
.2ec2	60		rts				rts
.2ec3					_IFSRNewton:
.2ec3	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2ec5	20 89 31	jsr $3189			jsr 	IFloatPushRx
.2ec8	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2eca	20 89 31	jsr $3189			jsr 	IFloatPushRx
.2ecd	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2ecf	20 5e 2f	jsr $2f5e			jsr 	IFloatDivideFloat
.2ed2	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2ed4	20 aa 31	jsr $31aa			jsr 	IFloatPullRx
.2ed7	20 32 2c	jsr $2c32			jsr 	IFloatAdd 					; now guess + original/guess
.2eda	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2edc	20 69 32	jsr $3269			jsr 	IFloatShiftRight
.2edf	a2 0c		ldx #$0c			ldx 	#IFR1
.2ee1	20 aa 31	jsr $31aa			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2ee4	60		rts				rts
.2ee5					IFloatFractionalR0:
.2ee5	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2ee7	29 3f		and #$3f			and 	#IFXMask
.2ee9	f0 17		beq $2f02			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2eeb	20 7d 2e	jsr $2e7d			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2eee	a2 08		ldx #$08			ldx 	#IFR0
.2ef0	20 71 32	jsr $3271			jsr 	IFloatNormalise 			; normalise R0
.2ef3	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2ef5	20 dc 31	jsr $31dc			jsr 	IFloatCopyToRegister
.2ef8	20 3b 2f	jsr $2f3b			jsr 	IFloatIntegerR0 			; take integer part of R0
.2efb	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2efd	20 2b 2c	jsr $2c2b			jsr 	IFloatSubtract
.2f00	80 05		bra $2f07			bra 	_FIPExit
.2f02					_FIPZero:
.2f02	a2 08		ldx #$08			ldx 	#IFR0
.2f04	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.2f07					_FIPExit:
.2f07	18		clc				clc
.2f08	60		rts				rts
.2f09					IFloatCompare:
.2f09	20 2b 2c	jsr $2c2b			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2f0c	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2f0e	05 0b		ora $0b				ora 	IFR0+IExp
.2f10	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2f12	29 3f		and #$3f			and 	#IFXMask
.2f14	d0 19		bne $2f2f			bne 	_IFCNonInteger
.2f16	20 33 32	jsr $3233			jsr 	IFloatCheckZero 			; check if zero
.2f19	f0 0f		beq $2f2a			beq 	_IFCZero
.2f1b					_IFCReturnSign:
.2f1b	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2f1d	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2f1f	48		pha				pha
.2f20	a9 01		lda #$01			lda 	#1
.2f22	20 3c 32	jsr $323c			jsr 	IFloatSetByte 				; return to +1
.2f25	68		pla				pla 								; sign bit back
.2f26	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2f28	18		clc				clc
.2f29	60		rts				rts
.2f2a					_IFCZero:
.2f2a	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.2f2d	18		clc				clc
.2f2e	60		rts				rts
.2f2f					_IFCNonInteger:
.2f2f	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2f31	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2f33	05 09		ora $09				ora 	IFR0+IM1
.2f35	05 0a		ora $0a				ora 	IFR0+IM2
.2f37	f0 f1		beq $2f2a			beq 	_IFCZero 					; near enough !
.2f39	80 e0		bra $2f1b			bra 	_IFCReturnSign 				; return the sign of the difference.
.2f3b					IFloatIntegerR0:
.2f3b	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2f3d	29 3f		and #$3f			and 	#IFXMask
.2f3f	f0 1b		beq $2f5c			beq 	_FIPExit 					; if so do nothing
.2f41	a2 08		ldx #$08			ldx 	#IFR0
.2f43	20 71 32	jsr $3271			jsr 	IFloatNormalise 			; normalise
.2f46	20 33 32	jsr $3233			jsr 	IFloatCheckZero 			; is it zero ?
.2f49	f0 0e		beq $2f59			beq 	_FIPZero 					; if so return zero.
.2f4b					_FIPShift:
.2f4b	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2f4d	29 20		and #$20			and 	#$20 						; still -ve
.2f4f	f0 0b		beq $2f5c			beq 	_FIPExit
.2f51	20 69 32	jsr $3269			jsr 	IFloatShiftRight 			; shift mantissa right
.2f54	20 93 32	jsr $3293			jsr 	IFloatIncExponent 			; bump exponent
.2f57	80 f2		bra $2f4b			bra 	_FIPShift
.2f59					_FIPZero:
.2f59	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.2f5c					_FIPExit:
.2f5c	18		clc				clc
.2f5d	60		rts				rts
.2f5e					IFloatDivideFloat:
.2f5e	8e dc 06	stx $06dc			stx 	IFTarget  					; this is s1, s0 = R0
.2f61	20 94 2d	jsr $2d94			jsr 	IFCalculateNewSign 			; calculate sign of result
.2f64	20 71 32	jsr $3271			jsr 	IFloatNormalise 			; normalise RX
.2f67	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2f69	20 71 32	jsr $3271			jsr 	IFloatNormalise
.2f6c	20 33 32	jsr $3233			jsr 	IFloatCheckZero
.2f6f	f0 56		beq $2fc7			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2f71	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2f73	20 8b 2d	jsr $2d8b			jsr 	IFMSignExtend
.2f76	8d dd 06	sta $06dd			sta 	IFNewExponent
.2f79	ae dc 06	ldx $06dc			ldx 	IFTarget 					; calculate s1.exponent
.2f7c	b5 03		lda $03,x			lda 	IExp,x
.2f7e	20 8b 2d	jsr $2d8b			jsr 	IFMSignExtend
.2f81	38		sec				sec
.2f82	ed dd 06	sbc $06dd			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2f85	38		sec				sec
.2f86	e9 17		sbc #$17			sbc 	#23
.2f88	8d dd 06	sta $06dd			sta 	IFNewExponent
.2f8b	20 c9 2f	jsr $2fc9			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2f8e	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2f90	10 08		bpl $2f9a			bpl 	_IFDFNoShiftResult
.2f92	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2f94	20 69 32	jsr $3269			jsr 	IFloatShiftRight
.2f97	ee dd 06	inc $06dd			inc 	IFNewExponent
.2f9a					_IFDFNoShiftResult:
.2f9a	ad dd 06	lda $06dd			lda 	IFNewExponent 				; underflow/overflow check.
.2f9d	30 06		bmi $2fa5			bmi 	_IFDFCheckUnderflow
.2f9f	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2fa1	b0 24		bcs $2fc7			bcs 	_IFDFDivZero
.2fa3	80 11		bra $2fb6			bra		_IFDFExit
.2fa5					_IFDFCheckUnderflow:
.2fa5	ad dd 06	lda $06dd			lda 	IFNewExponent 				; shift into a legal exponent.
.2fa8	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2faa	b0 0a		bcs $2fb6			bcs 	_IFDFExit
.2fac	ee dd 06	inc $06dd			inc 	IFNewExponent
.2faf	a2 14		ldx #$14			ldx 	#IFRTemp
.2fb1	20 69 32	jsr $3269			jsr 	IFloatShiftRight
.2fb4	80 ef		bra $2fa5			bra 	_IFDFCheckUnderflow
.2fb6					_IFDFExit:
.2fb6	ad dd 06	lda $06dd			lda 	IFNewExponent 				; combine exponent and sign.
.2fb9	29 3f		and #$3f			and 	#IFXMask
.2fbb	0d de 06	ora $06de			ora 	IFNewSign
.2fbe	85 17		sta $17				sta 	IFRTemp+IExp
.2fc0	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2fc2	20 cb 31	jsr $31cb			jsr 	IFloatCopyFromRegister
.2fc5	18		clc				clc
.2fc6	60		rts				rts
.2fc7					_IFDFDivZero:
.2fc7	38		sec				sec
.2fc8	60		rts				rts
.2fc9					IFloatDivideSupport:
.2fc9	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2fcb	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.2fce	5a		phy				phy 								; main division loop x 23
.2fcf	a0 17		ldy #$17			ldy 	#23
.2fd1					_IFDSLoop:
.2fd1	20 02 2e	jsr $2e02			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2fd4	20 f6 2d	jsr $2df6			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2fd7	88		dey				dey
.2fd8	d0 f7		bne $2fd1			bne 	_IFDSLoop 					; do it 24 times
.2fda	7a		ply				ply
.2fdb	60		rts				rts
.2fdc					IFloatIntegerToStringR0:
.2fdc	8d df 06	sta $06df			sta 	IFBase 						; save base to use.
.2fdf	20 bb 32	jsr $32bb			jsr 	IFloatBufferReset			; empty buffer
.2fe2	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2fe4	29 3f		and #$3f			and 	#IFXMask
.2fe6	d0 1d		bne $3005			bne 	_IFIFail
.2fe8	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2fea	20 33 32	jsr $3233			jsr 	IFloatCheckZero
.2fed	f0 0e		beq $2ffd			beq 	_IFINotNegative
.2fef	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2ff1	29 40		and #$40			and 	#IFSign
.2ff3	f0 08		beq $2ffd			beq 	_IFINotNegative
.2ff5	a9 2d		lda #$2d			lda 	#"-"						; output -
.2ff7	20 ca 32	jsr $32ca			jsr 	IFloatBufferWrite
.2ffa	20 45 32	jsr $3245			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.2ffd					_IFINotNegative:
.2ffd	20 07 30	jsr $3007			jsr 	_IFIRecursiveConvert 		; start converting
.3000	20 c2 32	jsr $32c2			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.3003	18		clc				clc
.3004	60		rts				rts
.3005					_IFIFail:
.3005	38		sec				sec
.3006	60		rts				rts
.3007					_IFIRecursiveConvert:
.3007	a2 0c		ldx #$0c			ldx 	#IFR1
.3009	20 dc 31	jsr $31dc			jsr 	IFloatCopyToRegister 		; R0->R1
.300c	a2 08		ldx #$08			ldx 	#IFR0
.300e	ad df 06	lda $06df			lda 	IFBase 						; Base -> R0
.3011	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.3014	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.3016	20 9e 2d	jsr $2d9e			jsr 	IFloatDivideInteger
.3019	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.301b	20 33 32	jsr $3233			jsr 	IFloatCheckZero
.301e	f0 09		beq $3029			beq 	_IFIOutDigit
.3020	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.3022	48		pha				pha
.3023	20 07 30	jsr $3007			jsr 	_IFIRecursiveConvert 		; convert the divide result
.3026	68		pla				pla
.3027	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.3029					_IFIOutDigit:
.3029	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.302b	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.302d	90 02		bcc $3031			bcc 	_IFINotHex
.302f	69 06		adc #$06			adc 	#6
.3031					_IFINotHex:
.3031	69 30		adc #$30			adc 	#48
.3033	20 ca 32	jsr $32ca			jsr 	IFloatBufferWrite 			; write character to buffer.
.3036	60		rts				rts
.06df					IFBase:
>06df							.fill 	1
.3037					IFloatFloatToStringR0:
.3037	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.3039	20 89 31	jsr $3189			jsr 	IFloatPushRx
.303c	20 dc 31	jsr $31dc			jsr 	IFloatCopyToRegister
.303f	20 3b 2f	jsr $2f3b			jsr 	IFloatIntegerR0				; make R0 integer
.3042	a9 0a		lda #$0a			lda 	#10 						; base 10.
.3044	20 dc 2f	jsr $2fdc			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.3047	9c e0 06	stz $06e0			stz 	IFloatDecimalCount 			; zero the decimal count.
.304a	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.304c	29 3f		and #$3f			and 	#IFXMask
.304e	f0 44		beq $3094			beq 	_IFFSExit
.3050					_IFloatFracLoop:
.3050	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.3052	20 cb 31	jsr $31cb			jsr 	IFloatCopyFromRegister
.3055	20 e5 2e	jsr $2ee5			jsr 	IFloatFractionalR0
.3058	20 71 32	jsr $3271			jsr 	IFloatNormalise
.305b	a2 10		ldx #$10			ldx 	#IFR2
.305d	20 dc 31	jsr $31dc			jsr 	IFloatCopyToRegister 		; copy to back R2
.3060	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.3062	a9 0a		lda #$0a			lda 	#10
.3064	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.3067	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.3069	20 dc 2c	jsr $2cdc			jsr 	IFloatMultiply
.306c	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.306e	20 dc 31	jsr $31dc			jsr 	IFloatCopyToRegister
.3071	20 3b 2f	jsr $2f3b			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.3074	ad e0 06	lda $06e0			lda 	IFloatDecimalCount 			; done 3 dp, no more
.3077	c9 03		cmp #$03			cmp 	#3
.3079	f0 16		beq $3091			beq 	_IFFSExitStripZero
.307b	ad e0 06	lda $06e0			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.307e	d0 05		bne $3085			bne 	_IFloatNotFirst
.3080	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3082	20 ca 32	jsr $32ca			jsr 	IFloatBufferWrite
.3085					_IFloatNotFirst:
.3085	ee e0 06	inc $06e0			inc 	IFloatDecimalCount
.3088	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.308a	09 30		ora #$30			ora 	#"0"						; ASCII
.308c	20 ca 32	jsr $32ca			jsr 	IFloatBufferWrite 			; write to the buffer.
.308f	80 bf		bra $3050			bra 	_IFloatFracLoop
.3091					_IFFSExitStripZero:
.3091	20 d9 32	jsr $32d9			jsr 	IFloatStripTrailingZeros
.3094					_IFFSExit:
.3094	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.3096	20 aa 31	jsr $31aa			jsr 	IFloatPullRx
.3099	20 c2 32	jsr $32c2			jsr 	IFloatGetBufferAddress
.309c	18		clc				clc
.309d	60		rts				rts
.06e0					IFloatDecimalCount:
>06e0							.fill 	1
.309e					IFloatStringToFloatR0:
.309e	8d e1 06	sta $06e1			sta 	IFCount 					; save length and positions out.
.30a1	86 20		stx $20				stx 	iTemp0
.30a3	84 21		sty $21				sty 	iTemp0+1
.30a5	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.30a7	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.30aa	9c e2 06	stz $06e2			stz 	IFSignFlag 					; clear the sign flag
.30ad	20 3a 31	jsr $313a			jsr 	IFSTFGetNext 				; get first
.30b0	f0 1b		beq $30cd			beq 	_IFSTFFail 					; no character, fail.
.30b2	90 10		bcc $30c4			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.30b4	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.30b6	d0 15		bne $30cd			bne 	_IFSTFFail
.30b8	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.30ba	8d e2 06	sta $06e2			sta 	IFSignFlag
.30bd					_IFSTFLoop:
.30bd	20 3a 31	jsr $313a			jsr 	IFSTFGetNext 				; get next character
.30c0	b0 0b		bcs $30cd			bcs 	_IFSTFFail 					; bad character.
.30c2	f0 11		beq $30d5			beq 	_IFSTFExit 					; end of data
.30c4					_IFSTFHaveChar:
.30c4	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.30c6	f0 08		beq $30d0			beq 	_IFSTFDecimal
.30c8	20 5e 31	jsr $315e			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.30cb	80 f0		bra $30bd			bra 	_IFSTFLoop 					; keep going until . or end.
.30cd					_IFSTFFail:
.30cd	38		sec				sec
.30ce	80 0d		bra $30dd			bra 	_IFSTFReturn
.30d0					_IFSTFDecimal:
.30d0	20 e5 30	jsr $30e5			jsr 	IFSTFDecimal 				; call the decimal places code.
.30d3	b0 08		bcs $30dd			bcs 	_IFSTFReturn 				; error
.30d5					_IFSTFExit:
.30d5	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.30d7	0d e2 06	ora $06e2			ora 	IFSignFlag
.30da	85 0b		sta $0b				sta 	IFR0+IExp
.30dc	18		clc				clc
.30dd					_IFSTFReturn:
.30dd	60		rts				rts
.30de					IFloatAddDecimalToR0:
.30de	8d e1 06	sta $06e1			sta 	IFCount 					; save it out.
.30e1	86 20		stx $20				stx 	iTemp0
.30e3	84 21		sty $21				sty 	iTemp0+1
.30e5					IFSTFDecimal:
.30e5	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.30e7	20 89 31	jsr $3189			jsr 	IFloatPushRx
.30ea	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.30ec	20 3a 32	jsr $323a			jsr 	IFloatSetZero
.30ef	9c e3 06	stz $06e3			stz 	IFDecimalPlaces 			; zero DP.
.30f2					_IFSTDLoop:
.30f2	20 3a 31	jsr $313a			jsr 	IFSTFGetNext 				; get next
.30f5	b0 41		bcs $3138			bcs 	_IFSTFFail2 				; bad character.
.30f7	f0 11		beq $310a			beq 	_IFSTFComplete 				; end of data, work out the result.
.30f9	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.30fb	f0 39		beq $3136			beq 	_IFSTFExit2
.30fd	20 5e 31	jsr $315e			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.3100	ee e3 06	inc $06e3			inc 	IFDecimalPlaces 			; count decimals
.3103	ad e3 06	lda $06e3			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.3106	c9 03		cmp #$03			cmp 	#3
.3108	90 e8		bcc $30f2			bcc 	_IFSTDLoop
.310a					_IFSTFComplete:
.310a	ad e3 06	lda $06e3			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.310d	f0 27		beq $3136			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.310f	3a		dec a				dec 	a 							; table indexed from 1.
.3110	0a		asl a				asl 	a
.3111	0a		asl a				asl 	a
.3112	aa		tax				tax
.3113	bd 75 31	lda $3175,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.3116	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.3118	bd 76 31	lda $3176,x			lda 	TableTen+1,x
.311b	85 0d		sta $0d				sta  	IFR1+IM1
.311d	bd 77 31	lda $3177,x			lda 	TableTen+2,x
.3120	85 0e		sta $0e				sta  	IFR1+IM2
.3122	bd 78 31	lda $3178,x			lda 	TableTen+3,x
.3125	85 0f		sta $0f				sta  	IFR1+IExp
.3127	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.3129	20 dc 2c	jsr $2cdc			jsr 	IFloatMultiply
.312c	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.312e	20 aa 31	jsr $31aa			jsr 	IFloatPullRx
.3131	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.3133	20 32 2c	jsr $2c32			jsr 	IFloatAdd
.3136					_IFSTFExit2:
.3136	18		clc				clc
.3137	60		rts				rts
.3138					_IFSTFFail2:
.3138	38		sec				sec
.3139	60		rts				rts
.313a					IFSTFGetNext:
.313a	ad e1 06	lda $06e1			lda 	IFCount  					; if count is zero, return with Z set.
.313d	f0 19		beq $3158			beq 	_IFSTFReturnOk
.313f	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3141	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3143	d0 02		bne $3147			bne 	_IFSTFGNNoCarry
.3145	e6 21		inc $21				inc 	iTemp0+1
.3147					_IFSTFGNNoCarry:
.3147	ce e1 06	dec $06e1			dec 	IFCount 					; dec count.
.314a	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.314c	f0 08		beq $3156			beq 	_IFSTFGOkay
.314e	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3150	90 08		bcc $315a			bcc 	_IFSTFGFail
.3152	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3154	b0 04		bcs $315a			bcs 	_IFSTFGFail
.3156					_IFSTFGOkay:
.3156	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3158					_IFSTFReturnOk:
.3158	18		clc				clc
.3159	60		rts				rts
.315a					_IFSTFGFail:
.315a	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.315c	38		sec				sec
.315d	60		rts				rts
.315e					IFSTFAddR0:
.315e	29 0f		and #$0f			and 	#15 						; to int value
.3160	48		pha				pha 								; save it.
.3161	a9 0a		lda #$0a			lda 	#10
.3163	a2 0c		ldx #$0c			ldx 	#IFR1
.3165	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.3168	20 dc 2c	jsr $2cdc			jsr 	IFloatMultiply
.316b	68		pla				pla
.316c	a2 0c		ldx #$0c			ldx 	#IFR1
.316e	20 3c 32	jsr $323c			jsr 	IFloatSetByte
.3171	20 32 2c	jsr $2c32			jsr 	IFloatAdd
.3174	60		rts				rts
.06e1					IFCount:
>06e1							.fill 	1
.06e2					IFSignFlag:
>06e2							.fill 	1
.06e3					IFDecimalPlaces:
>06e3							.fill 	1
.3175					TableTen:
>3175	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3179	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>317d	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3181	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3185	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.3189					IFloatPushRx:
.3189	5a		phy				phy
.318a	ac e4 06	ldy $06e4			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.318d	b5 00		lda $00,x			lda 	IM0,x
.318f	99 e5 06	sta $06e5,y			sta 	IFStack,y
.3192	b5 01		lda $01,x			lda 	IM1,x
.3194	99 e6 06	sta $06e6,y			sta 	IFStack+1,y
.3197	b5 02		lda $02,x			lda 	IM2,x
.3199	99 e7 06	sta $06e7,y			sta 	IFStack+2,y
.319c	b5 03		lda $03,x			lda 	IExp,x
.319e	99 e8 06	sta $06e8,y			sta 	IFStack+3,y
.31a1	c8		iny				iny
.31a2	c8		iny				iny
.31a3	c8		iny				iny
.31a4	c8		iny				iny
.31a5	8c e4 06	sty $06e4			sty 	IFStackIndex 				; update SP
.31a8	7a		ply				ply
.31a9	60		rts				rts
.31aa					IFloatPullRx:
.31aa	5a		phy				phy
.31ab	ac e4 06	ldy $06e4			ldy 	IFStackIndex	 			; decrement SP
.31ae	88		dey				dey
.31af	88		dey				dey
.31b0	88		dey				dey
.31b1	88		dey				dey
.31b2	b9 e5 06	lda $06e5,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.31b5	95 00		sta $00,x			sta 	IM0,x
.31b7	b9 e6 06	lda $06e6,y			lda 	IFStack+1,y
.31ba	95 01		sta $01,x			sta 	IM1,x
.31bc	b9 e7 06	lda $06e7,y			lda 	IFStack+2,y
.31bf	95 02		sta $02,x			sta 	IM2,x
.31c1	b9 e8 06	lda $06e8,y			lda 	IFStack+3,y
.31c4	95 03		sta $03,x			sta 	IExp,x
.31c6	8c e4 06	sty $06e4			sty 	IFStackIndex 				; update SP
.31c9	7a		ply				ply
.31ca	60		rts				rts
.06e4					IFStackIndex:
>06e4							.fill 	1
.06e5					IFStack:
>06e5							.fill 	16*4
.31cb					IFloatCopyFromRegister:
.31cb	b5 00		lda $00,x			lda 	0,x
.31cd	85 08		sta $08				sta 	IFR0
.31cf	b5 01		lda $01,x			lda 	1,x
.31d1	85 09		sta $09				sta 	IFR0+1
.31d3	b5 02		lda $02,x			lda 	2,x
.31d5	85 0a		sta $0a				sta 	IFR0+2
.31d7	b5 03		lda $03,x			lda 	3,x
.31d9	85 0b		sta $0b				sta 	IFR0+3
.31db	60		rts				rts
.31dc					IFloatCopyToRegister:
.31dc	a5 08		lda $08				lda 	IFR0
.31de	95 00		sta $00,x			sta 	0,x
.31e0	a5 09		lda $09				lda 	IFR0+1
.31e2	95 01		sta $01,x			sta 	1,x
.31e4	a5 0a		lda $0a				lda 	IFR0+2
.31e6	95 02		sta $02,x			sta 	2,x
.31e8	a5 0b		lda $0b				lda 	IFR0+3
.31ea	95 03		sta $03,x			sta 	3,x
.31ec	60		rts				rts
.31ed					IFloatLoadInline:
.31ed	68		pla				pla 								; pop address off to iTemp0
.31ee	85 20		sta $20				sta 	iTemp0
.31f0	68		pla				pla
.31f1	85 21		sta $21				sta 	iTemp0+1
.31f3	a0 01		ldy #$01			ldy 	#1
.31f5	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.31f7	95 00		sta $00,x			sta 	0,x
.31f9	c8		iny				iny
.31fa	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.31fc	95 01		sta $01,x			sta 	1,x
.31fe	c8		iny				iny
.31ff	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.3201	95 02		sta $02,x			sta 	2,x
.3203	c8		iny				iny
.3204	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.3206	95 03		sta $03,x			sta 	3,x
.3208	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.3209	a5 20		lda $20				lda 	iTemp0
.320b	69 05		adc #$05			adc 	#5
.320d	85 20		sta $20				sta 	iTemp0
.320f	90 02		bcc $3213			bcc 	_IFLINoCarry
.3211	e6 21		inc $21				inc 	iTemp0+1
.3213					_IFLINoCarry:
.3213	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3216					IFloatMultiply8BitRx:
.3216	5a		phy		        phy
.3217	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3219	a4 08		ldy $08		        ldy     IFR0+IM0
.321b	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.321c	85 08		sta $08		        sta     IFR0+IM0
.321e	84 09		sty $09		        sty     IFR0+IM1
.3220	a9 00		lda #$00	        lda     #0
.3222	a0 08		ldy #$08	        ldy     #8
.3224					_IFMLoop:
.3224	90 03		bcc $3229	        bcc     _IFMNoAdd
.3226	18		clc		        clc
.3227	65 09		adc $09		        adc     IFR0+IM1
.3229					_IFMNoAdd:
.3229	6a		ror a		        ror     a
.322a	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.322c	88		dey		        dey
.322d	d0 f5		bne $3224	        bne     _IFMLoop
.322f	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3231	7a		ply		        ply
.3232	60		rts		        rts
.3233					IFloatCheckZero:
.3233	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.3235	15 01		ora $01,x			ora 	IM1,x
.3237	15 02		ora $02,x			ora 	IM2,x
.3239	60		rts				rts
.323a					IFloatSetZero:
.323a	a9 00		lda #$00			lda 	#0
.323c					IFloatSetByte:
.323c	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.323e	74 01		stz $01,x			stz 	IM1,x
.3240	74 02		stz $02,x			stz 	IM2,x
.3242	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3244	60		rts				rts
.3245					IFloatNegate:
.3245	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3247	49 40		eor #$40			eor 	#IFSign
.3249	95 03		sta $03,x			sta 	IExp,x
.324b	18		clc				clc
.324c	60		rts				rts
.324d					IFloatMantissaNegate:
.324d	38		sec				sec 								; when you want a real 2's complement negative value.
.324e	a9 00		lda #$00			lda 	#0
.3250	f5 00		sbc $00,x			sbc 	IM0,x
.3252	95 00		sta $00,x			sta 	IM0,x
.3254	a9 00		lda #$00			lda 	#0
.3256	f5 01		sbc $01,x			sbc 	IM1,x
.3258	95 01		sta $01,x			sta 	IM1,x
.325a	a9 00		lda #$00			lda 	#0
.325c	f5 02		sbc $02,x			sbc 	IM2,x
.325e	95 02		sta $02,x			sta 	IM2,x
.3260	60		rts				rts
.3261					IFloatShiftLeft:
.3261	18		clc				clc
.3262					IFloatRotateLeft:
.3262	36 00		rol $00,x			rol 	IM0,x
.3264	36 01		rol $01,x			rol 	IM1,x
.3266	36 02		rol $02,x			rol 	IM2,x
.3268	60		rts				rts
.3269					IFloatShiftRight:
.3269	18		clc				clc
.326a					IFloatRotateRight:
.326a	76 02		ror $02,x			ror 	IM2,x
.326c	76 01		ror $01,x			ror 	IM1,x
.326e	76 00		ror $00,x			ror 	IM0,x
.3270	60		rts				rts
.3271					IFloatNormalise:
.3271	20 33 32	jsr $3233			jsr 	IFloatCheckZero 			; is it zero
.3274	f0 18		beq $328e			beq 	_IFNExitZero 				; if so exit
.3276					_IFNLoop:
.3276	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3278	29 c0		and #$c0			and 	#$C0
.327a	c9 40		cmp #$40			cmp 	#$40
.327c	f0 13		beq $3291			beq 	_IFNExitOkay 				; if so , then we are done.
.327e	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3280	29 3f		and #$3f			and 	#$3F
.3282	c9 20		cmp #$20			cmp 	#$20
.3284	f0 0b		beq $3291			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3286	20 a7 32	jsr $32a7			jsr 	IFloatDecExponent
.3289	20 61 32	jsr $3261			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.328c	80 e8		bra $3276			bra 	_IFNLoop
.328e					_IFNExitZero:
.328e	20 3a 32	jsr $323a			jsr 	IFloatSetZero 				; set the result to zero
.3291					_IFNExitOkay:
.3291	18		clc				clc  								; return with CC.
.3292	60		rts				rts
.3293					IFloatIncExponent:
.3293	b5 03		lda $03,x			lda 	IExp,x
.3295	48		pha				pha
.3296	29 c0		and #$c0			and 	#$C0
.3298	8d 25 07	sta $0725			sta 	IFXTemp
.329b	68		pla				pla
.329c	1a		inc a				inc 	a
.329d	29 3f		and #$3f			and 	#$3F
.329f	48		pha				pha
.32a0	0d 25 07	ora $0725			ora 	IFXTemp
.32a3	95 03		sta $03,x			sta 	IExp,x
.32a5	68		pla				pla
.32a6	60		rts				rts
.32a7					IFloatDecExponent:
.32a7	b5 03		lda $03,x			lda 	IExp,x
.32a9	48		pha				pha
.32aa	29 c0		and #$c0			and 	#$C0
.32ac	8d 25 07	sta $0725			sta 	IFXTemp
.32af	68		pla				pla
.32b0	3a		dec a				dec 	a
.32b1	29 3f		and #$3f			and 	#$3F
.32b3	48		pha				pha
.32b4	0d 25 07	ora $0725			ora 	IFXTemp
.32b7	95 03		sta $03,x			sta 	IExp,x
.32b9	68		pla				pla
.32ba	60		rts				rts
.0725					IFXTemp:
>0725							.fill 	1
.32bb					IFloatBufferReset:
.32bb	9c 26 07	stz $0726			stz 	IFBufferCount
.32be	9c 27 07	stz $0727			stz 	IFBuffer
.32c1	60		rts				rts
.32c2					IFloatGetBufferAddress:
.32c2	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.32c4	a2 26		ldx #$26			ldx 	#(IFBufferCount & $FF)
.32c6	ad 26 07	lda $0726			lda 	IFBufferCount
.32c9	60		rts				rts
.32ca					IFloatBufferWrite:
.32ca	da		phx				phx
.32cb	ae 26 07	ldx $0726			ldx 	IFBufferCount
.32ce	9d 27 07	sta $0727,x			sta 	IFBuffer,x
.32d1	9e 28 07	stz $0728,x			stz 	IFBuffer+1,x
.32d4	ee 26 07	inc $0726			inc 	IFBufferCount
.32d7	fa		plx				plx
.32d8	60		rts				rts
.32d9					IFloatStripTrailingZeros:
.32d9	ae 26 07	ldx $0726			ldx 	IFBufferCount
.32dc	bd 26 07	lda $0726,x			lda 	IFBuffer-1,x
.32df	c9 30		cmp #$30			cmp		#"0"
.32e1	d0 0f		bne $32f2			bne 	_IFSTExit
.32e3	bd 25 07	lda $0725,x			lda 	IFBuffer-2,x
.32e6	c9 2e		cmp #$2e			cmp 	#"."
.32e8	f0 08		beq $32f2			beq 	_IFSTExit
.32ea	ce 26 07	dec $0726			dec 	IFBufferCount
.32ed	9e 26 07	stz $0726,x			stz 	IFBuffer-1,x
.32f0	80 e7		bra $32d9			bra 	IFloatStripTrailingZeros
.32f2					_IFSTExit:
.32f2	60		rts				rts
.0726					IFBufferCount:
>0726							.fill 	1
.0727					IFBuffer:
>0727							.fill 	25
.32f3					IFloatCheckRange:
.32f3	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.32f5	09 40		ora #$40			ora 	#IFSign
.32f7	85 0b		sta $0b				sta 	IFR0+IExp
.32f9	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.32fb	20 32 2c	jsr $2c32			jsr 	IFloatAdd 					; add allowed to error.
.32fe	a2 08		ldx #$08			ldx 	#IFR0
.3300	20 33 32	jsr $3233			jsr 	IFloatCheckZero 			; error if < 0
.3303	f0 06		beq $330b			beq 	_IFAOkay
.3305	a5 0b		lda $0b				lda 	IFR0+IExp
.3307	29 40		and #$40			and 	#IFSign
.3309	d0 01		bne $330c			bne 	_IFAFail
.330b					_IFAOkay:
.330b	60		rts				rts
.330c					_IFAFail:
.330c	38		sec				sec
.330d	68		pla				pla 								; get address - 2
.330e	e9 02		sbc #$02			sbc 	#2
.3310	aa		tax				tax
.3311	68		pla				pla
.3312	e9 00		sbc #$00			sbc 	#0
.3314	a8		tay				tay
.3315	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3317					_IFAStop:
>3317	db						.byte 	$DB 						; display an error AA ADR ADR
.3318	80 fd		bra $3317			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
