
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Sun Jun  4 04:56:28 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=$6000					startMemory = $6000
=$a000					endMemory = $A000
=2					stackPages = 2

;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
>0237							.fill 	32
>0257							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe5					OSGetScreenSize          = $ffe5 ; Get size of screen to XY
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeyboardWithCursor = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1)
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadDevice             = $fff4 ; Read device X to A
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#startMemory >> 8
.1002	a0 a0		ldy #$a0			ldy 	#endMemory >> 8
.1004	20 cf 1c	jsr $1ccf			jsr 	PGMSetBaseAddress
.1007	20 1d 26	jsr $261d			jsr 	IFInitialise
.100a	4c a1 12	jmp $12a1			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0300					TOKLineSize:
>0300							.fill 	1
.0301					TOKLineNumber:
>0301							.fill 	2
.0303					TOKBuffer:
>0303							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 35 22	jmp $2235		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 e2 1c	jsr $1ce2			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 bc 25	jsr $25bc			jsr 	VARClearHashTables
.1028	ad 10 04	lda $0410			lda 	PGMEndMemoryHigh
.102b	20 a0 23	jsr $23a0			jsr 	StackReset
.102e	20 ff 23	jsr $23ff			jsr 	StringSystemInitialise
.1031	60		rts				rts
.1032					AllocateMemory:
.1032	5a		phy				phy 								; save Y
.1033	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.1035	5a		phy				phy
.1036	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1038	5a		phy				phy
.1039	a8		tay				tay 								; count is now in XY
.103a					_AllocateLoop:
.103a	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103c	d0 04		bne $1042			bne 	_AllocateOne
.103e	c0 00		cpy #$00			cpy 	#0
.1040	f0 15		beq $1057			beq 	_AllocateExit
.1042					_AllocateOne:
.1042	a9 00		lda #$00			lda 	#0 							; zero byte
.1044	92 24		sta ($24)			sta 	(freeMemory)
.1046	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1048	d0 05		bne $104f			bne 	_AllocateSkipCarry
.104a	e6 25		inc $25				inc 	freeMemory+1
.104c	20 5b 10	jsr $105b			jsr 	ClearCheckMemory
.104f					_AllocateSkipCarry:
.104f	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1051	d0 01		bne $1054			bne 	_AllocateSkipBorrow
.1053	ca		dex				dex
.1054					_AllocateSkipBorrow:
.1054	88		dey				dey
.1055	80 e3		bra $103a			bra 	_AllocateLoop
.1057					_AllocateExit:
.1057	fa		plx				plx 								; restore address
.1058	68		pla				pla
.1059	7a		ply				ply 								; restore Y
.105a	60		rts				rts
.105b					ClearCheckMemory:
.105b	a5 25		lda $25				lda 	freeMemory+1
.105d	1a		inc a				inc 	a
.105e	1a		inc a				inc 	a
.105f	cd 18 05	cmp $0518			cmp 	stringMemory+1
.1062	b0 01		bcs $1065			bcs  	_CCMError
.1064	60		rts				rts
.1065					_CCMError:
.1065	4c c7 22	jmp $22c7		jmp	ErrorV_memory
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1068					CommandDIM:
.1068	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check identifier follows.
.106a	29 c0		and #$c0			and 	#$C0
.106c	c9 40		cmp #$40			cmp 	#$40
.106e	d0 39		bne $10a9			bne 	_CDSyntax
.1070	20 73 25	jsr $2573			jsr 	VARGetInfo 					; get information
.1073	ad 1e 05	lda $051e			lda 	VARType 					; check array.
.1076	29 02		and #$02			and 	#2
.1078	f0 2f		beq $10a9			beq 	_CDSyntax
.107a	20 25 25	jsr $2525			jsr 	VARFind 					; does it already exist
.107d	b0 2d		bcs $10ac			bcs 	_CDExists
.107f	20 d1 24	jsr $24d1			jsr 	VARCreate 					; create it - returns data ptr in XA
.1082	da		phx				phx 								; save target address
.1083	48		pha				pha
.1084	ad 1e 05	lda $051e			lda 	VARType 					; type ID.
.1087	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1089	20 af 10	jsr $10af			jsr 	CreateArray 				; create array to XA
.108c	84 20		sty $20				sty 	zTemp1 						; save Y
.108e	7a		ply				ply 								; restore target to zTemp0
.108f	84 1e		sty $1e				sty 	zTemp0
.1091	7a		ply				ply
.1092	84 1f		sty $1f				sty 	zTemp0+1
.1094	92 1e		sta ($1e)			sta 	(zTemp0) 					; save new array
.1096	a0 01		ldy #$01			ldy 	#1
.1098	8a		txa				txa
.1099	91 1e		sta ($1e),y			sta 	(zTemp0),y
.109b	a4 20		ldy $20				ldy 	zTemp1 						; restore zTemp1
.109d	20 31 23	jsr $2331			jsr 	ERRCheckRParen 				; check )
.10a0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10a2	c8		iny				iny
.10a3	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a5	f0 c1		beq $1068			beq 	CommandDIM
.10a7	88		dey				dey
.10a8	60		rts				rts
.10a9					_CDSyntax:
.10a9	4c e4 21	jmp $21e4		jmp	ErrorV_syntax
.10ac					_CDExists:
.10ac	4c a1 22	jmp $22a1		jmp	ErrorV_redefine
.10af					CreateArray:
.10af	8d 03 04	sta $0403			sta 	CAType						; save type
.10b2	20 db 14	jsr $14db			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10b5	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10b7	c9 99		cmp #$99			cmp 	#PR_COMMA
.10b9	f0 04		beq $10bf			beq 	_CATwoDimensions
.10bb	20 0b 11	jsr $110b			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10be	60		rts				rts
.10bf					_CATwoDimensions:
.10bf	a5 0d		lda $0d				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10c1	8d 05 04	sta $0405			sta 	CADim1+1
.10c4	a5 0c		lda $0c				lda 	IFR0+IM0
.10c6	8d 04 04	sta $0404			sta 	CADim1+0
.10c9	20 39 23	jsr $2339			jsr 	ERRCheckComma 				; check comma
.10cc	20 db 14	jsr $14db			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10cf	5a		phy				phy 								; save Y position
.10d0	18		clc				clc 								; allocate the outer array of pointers.
.10d1	ae 05 04	ldx $0405			ldx 	CADim1+1
.10d4	ad 04 04	lda $0404			lda 	CADim1
.10d7	20 4a 11	jsr $114a			jsr 	CSAAllocate 				; allocate the outer array
.10da	da		phx				phx									; save this address on the stack
.10db	48		pha				pha
.10dc	86 23		stx $23				stx 	zTemp2+1					; and in zTemp2
.10de	85 22		sta $22				sta 	zTemp2
.10e0					_CACreateSubLoop:
.10e0	38		sec				sec
.10e1	20 0b 11	jsr $110b			jsr 	CreateSingleArray 			; create data array of required size.
.10e4	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10e6	91 22		sta ($22),y			sta 	(zTemp2),y
.10e8	8a		txa				txa
.10e9	c8		iny				iny
.10ea	91 22		sta ($22),y			sta 	(zTemp2),y
.10ec	18		clc				clc  								; next slot.
.10ed	a5 22		lda $22				lda 	zTemp2
.10ef	69 02		adc #$02			adc 	#2
.10f1	85 22		sta $22				sta 	zTemp2
.10f3	90 02		bcc $10f7			bcc 	_CACNoCarry
.10f5	e6 23		inc $23				inc 	zTemp2+1
.10f7					_CACNoCarry:
.10f7	ad 04 04	lda $0404			lda 	CADim1 						; use DIM1 as a counter
.10fa	d0 03		bne $10ff			bne 	_CACNoBorrow
.10fc	ce 05 04	dec $0405			dec 	CADim1+1
.10ff					_CACNoBorrow:
.10ff	ce 04 04	dec $0404			dec 	CADim1
.1102	ad 05 04	lda $0405			lda 	CADim1+1 					; but do one more.
.1105	10 d9		bpl $10e0			bpl 	_CACreateSubLoop
.1107	68		pla				pla
.1108	fa		plx				plx
.1109	7a		ply				ply
.110a	60		rts				rts
.110b					CreateSingleArray:
.110b	5a		phy				phy
.110c	38		sec				sec 								; allocate memory block all zeros.
.110d	a5 0c		lda $0c				lda 	IFR0+IM0
.110f	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1111	20 4a 11	jsr $114a			jsr 	CSAAllocate
.1114	ac 03 04	ldy $0403			ldy 	CAType 						; if numbers, we don't need to initialise.
.1117	f0 2f		beq $1148			beq 	_CSANoInit
.1119	da		phx				phx 								; save address of new array
.111a	48		pha				pha
.111b	85 1e		sta $1e				sta 	zTemp0 						; address in zTemp0
.111d	86 1f		stx $1f				stx 	zTemp0+1
.111f	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1121	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1123	a8		tay				tay
.1124	b2 1e		lda ($1e)			lda 	(zTemp0)
.1126	aa		tax				tax
.1127					_CSAEraseString:
.1127	5a		phy				phy
.1128	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.112a	a9 80		lda #$80			lda 	#$80
.112c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.112e	7a		ply				ply
.112f	18		clc				clc 								; add 4 to next slot.
.1130	a5 1e		lda $1e				lda 	zTemp0
.1132	69 04		adc #$04			adc 	#4
.1134	85 1e		sta $1e				sta 	zTemp0
.1136	90 02		bcc $113a			bcc 	_CSAENoCarry
.1138	e6 1f		inc $1f				inc 	zTemp0+1
.113a					_CSAENoCarry:
.113a	e0 00		cpx #$00			cpx 	#0
.113c	d0 01		bne $113f			bne 	_CSANoBorrow
.113e	88		dey				dey
.113f					_CSANoBorrow:
.113f	ca		dex				dex
.1140	d0 e5		bne $1127			bne 	_CSAEraseString
.1142	c0 00		cpy #$00			cpy 	#0
.1144	d0 e1		bne $1127			bne 	_CSAEraseString
.1146	68		pla				pla
.1147	fa		plx				plx
.1148					_CSANoInit:
.1148	7a		ply				ply
.1149	60		rts				rts
.114a					CSAAllocate:
.114a	08		php				php 								; save type flag.
.114b	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.114c	d0 01		bne $114f			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.114e	e8		inx				inx
.114f					_CSAANoCarry:
.114f	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1151	b0 2e		bcs $1181			bcs 	_CSARange
.1153	28		plp				plp 								; restore type flag
.1154	08		php				php 								; save it back again.
.1155	da		phx				phx 								; save size.
.1156	48		pha				pha
.1157	86 1f		stx $1f				stx  	zTemp0+1 					; now in ztemp0+1:X
.1159	90 03		bcc $115e			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.115b	0a		asl a				asl 	a
.115c	26 1f		rol $1f				rol 	zTemp0+1
.115e					_CSAATimes2:
.115e	0a		asl a				asl 	a
.115f	26 1f		rol $1f				rol 	zTemp0+1
.1161	18		clc				clc
.1162	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1164	90 02		bcc $1168			bcc 	_CSAANoCarry2
.1166	e6 1f		inc $1f				inc 	zTemp0+1
.1168					_CSAANoCarry2:
.1168	a6 1f		ldx $1f				ldx 	zTemp0+1 					; XA is the bytes required.
.116a	20 32 10	jsr $1032			jsr 	AllocateMemory 				; allocate memory to XA
.116d	86 1f		stx $1f				stx 	zTemp0+1 					; save pointers
.116f	85 1e		sta $1e				sta 	zTemp0
.1171	68		pla				pla  								; write element count to first 2 bytes
.1172	92 1e		sta ($1e)			sta 	(zTemp0)
.1174	68		pla				pla 								; msb of element count
.1175	28		plp				plp 								; CC if pointer array
.1176	b0 02		bcs $117a			bcs 	_CSAAIsData
.1178	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.117a					_CSAAIsData:
.117a	a0 01		ldy #$01			ldy 	#1
.117c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.117e	a5 1e		lda $1e				lda 	zTemp0 						; fix XA back up again
.1180	60		rts				rts
.1181					_CSARange:
.1181	4c f4 21	jmp $21f4		jmp	ErrorV_range
.0403					CAType:
>0403							.fill 	1
.0404					CADim1:
>0404							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.1184					Command_Doke:
.1184	38		sec				sec
.1185	80 01		bra $1188			bra 	DPCommon
.1187					Command_Poke:
.1187	18		clc				clc
.1188					DPCommon:
.1188	08		php				php 								; CS if DOKE
.1189	20 db 14	jsr $14db			jsr 	EXPEvalInteger16 			; address
.118c	a5 0c		lda $0c				lda 	IFR0+IM0 					; push on stack
.118e	48		pha				pha
.118f	a5 0d		lda $0d				lda 	IFR0+IM1
.1191	48		pha				pha
.1192	20 39 23	jsr $2339			jsr 	ERRCheckComma 				; [dp]oke address,data
.1195	20 db 14	jsr $14db			jsr 	EXPEvalInteger16
.1198	68		pla				pla 								; get address back
.1199	85 1f		sta $1f				sta 	zTemp0+1
.119b	68		pla				pla
.119c	85 1e		sta $1e				sta 	zTemp0
.119e	a5 0c		lda $0c				lda 	IFR0+IM0
.11a0	92 1e		sta ($1e)			sta 	(zTemp0)
.11a2	28		plp				plp
.11a3	90 08		bcc $11ad			bcc 	_DPExit
.11a5	5a		phy				phy
.11a6	a5 0d		lda $0d				lda 	IFR0+IM1
.11a8	a0 01		ldy #$01			ldy 	#1
.11aa	91 1e		sta ($1e),y			sta 	(zTemp0),y
.11ac	7a		ply				ply
.11ad					_DPExit:
.11ad	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11ae					Command_Print:
.11ae					Command_IP_Main:
.11ae	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11af					_CPLoop:
.11af	08		php				php 								; save last action flag
.11b0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.11b2	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11b4	f0 3e		beq $11f4			beq 	_CPExit 					; without consuming
.11b6	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11b8	f0 3a		beq $11f4			beq 	_CPExit
.11ba	68		pla				pla 								; throw last action flag
.11bb	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.11bd	c8		iny				iny
.11be	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11c0	f0 2f		beq $11f1			beq 	_CPContinueWithSameLine
.11c2	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11c4	f0 26		beq $11ec			beq 	_CPTab
.11c6	88		dey				dey 								; undo the get.
.11c7	20 89 14	jsr $1489			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11ca	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.11cc	10 14		bpl $11e2			bpl 	_CPNumber
.11ce	5a		phy				phy
.11cf	18		clc				clc 								; string address to YX
.11d0	a5 0c		lda $0c				lda 	IFR0+IM0
.11d2	aa		tax				tax
.11d3	a5 0d		lda $0d				lda 	IFR0+IM1
.11d5	a8		tay				tay
.11d6	e8		inx				inx 								; point to 1st character
.11d7	d0 01		bne $11da			bne 	_CPNoCarry
.11d9	c8		iny				iny
.11da					_CPNoCarry:
.11da	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.11dc	20 fd 11	jsr $11fd			jsr 	CPPrintAYX 					; print AYX
.11df	7a		ply				ply
.11e0	80 cc		bra $11ae			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11e2					_CPNumber:
.11e2	5a		phy				phy
.11e3	20 2f 2a	jsr $2a2f			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11e6	20 fd 11	jsr $11fd			jsr 	CPPrintAYX 					; print AYX
.11e9	7a		ply				ply
.11ea	80 c2		bra $11ae			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11ec					_CPTab:
.11ec	a9 09		lda #$09			lda 	#9 							; print TAB
.11ee	20 10 12	jsr $1210			jsr 	CPPrintA
.11f1					_CPContinueWithSameLine:
.11f1	38		sec				sec 								; loop round with carry set, which
.11f2	80 bb		bra $11af			bra 	_CPLoop 					; will inhibit final CR
.11f4					_CPExit:
.11f4	28		plp				plp 								; get last action flag
.11f5	b0 05		bcs $11fc			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11f7	a9 0d		lda #$0d			lda 	#13 						; print new line
.11f9	20 10 12	jsr $1210			jsr 	CPPrintA
.11fc					_CPExit2:
.11fc	60		rts				rts
.11fd					CPPrintAYX:
.11fd	86 1e		stx $1e				stx 	zTemp0
.11ff	84 1f		sty $1f				sty 	zTemp0+1
.1201	aa		tax				tax
.1202	f0 0b		beq $120f			beq 	_CPPrintExit
.1204	a0 00		ldy #$00			ldy 	#0
.1206					_CPPrintAYXLoop:
.1206	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1208	20 10 12	jsr $1210			jsr 	CPPrintA
.120b	c8		iny				iny
.120c	ca		dex				dex
.120d	d0 f7		bne $1206			bne 	_CPPrintAYXLoop
.120f					_CPPrintExit:
.120f	60		rts				rts
.1210					CPPrintA:
.1210	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1213					CommandLET:
.1213	20 51 15	jsr $1551			jsr 	EXPTermR0 					; get term
.1216	90 6d		bcc $1285			bcc 	_CLError 					; must be a reference term.
.1218	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.121a	48		pha				pha
.121b	a5 0d		lda $0d				lda 	IFR0+IM1
.121d	48		pha				pha
.121e	a5 0f		lda $0f				lda 	IFR0+IExp
.1220	48		pha				pha
.1221	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1223	20 41 23	jsr $2341			jsr 	ERRCheckA
.1226	20 89 14	jsr $1489			jsr 	EXPEvaluateExpression 		; right hand side.
.1229	68		pla				pla 								; type of l-expr
.122a	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.122c	30 5a		bmi $1288			bmi 	_CLType
.122e	fa		plx				plx 	 							; pop target address to zTemp0
.122f	86 1f		stx $1f				stx 	zTemp0+1
.1231	fa		plx				plx
.1232	86 1e		stx $1e				stx 	zTemp0
.1234	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.1236	30 15		bmi $124d			bmi 	_CLStringAssign
.1238	5a		phy				phy
.1239	a0 03		ldy #$03			ldy 	#3
.123b	91 1e		sta ($1e),y			sta 	(zTemp0),y
.123d	88		dey				dey
.123e	a5 0e		lda $0e				lda 	IFR0+IM2
.1240	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1242	88		dey				dey
.1243	a5 0d		lda $0d				lda 	IFR0+IM1
.1245	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1247	a5 0c		lda $0c				lda 	IFR0+IM0
.1249	92 1e		sta ($1e)			sta 	(zTemp0)
.124b	7a		ply				ply
.124c	60		rts				rts
.124d					_CLStringAssign:
.124d	5a		phy				phy
.124e	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1250	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1252	12 1e		ora ($1e)			ora 	(zTemp0)
.1254	f0 23		beq $1279			beq 	_CLConcreteString
.1256	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1258	85 20		sta $20				sta 	zTemp1
.125a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.125c	85 21		sta $21				sta 	zTemp1+1
.125e	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.1260	38		sec				sec 								; we want 3 for slot size, status, string size.
.1261	e9 03		sbc #$03			sbc 	#3
.1263	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.1265	90 12		bcc $1279			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1267	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1269	1a		inc a				inc 	a
.126a	aa		tax				tax
.126b	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.126d					_CLReplaceString:
.126d	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.126f	c8		iny				iny
.1270	c8		iny				iny
.1271	91 20		sta ($20),y			sta 	(zTemp1),y
.1273	88		dey				dey
.1274	ca		dex				dex
.1275	d0 f6		bne $126d			bne 	_CLReplaceString
.1277	80 0a		bra $1283			bra 	_CLExit
.1279					_CLConcreteString:
.1279	20 b4 23	jsr $23b4			jsr 	StringConcrete  			; concreted string in XA.
.127c	a0 01		ldy #$01			ldy 	#1 							; store the address
.127e	92 1e		sta ($1e)			sta 	(zTemp0)
.1280	8a		txa				txa
.1281	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1283					_CLExit:
.1283	7a		ply				ply
.1284	60		rts				rts
.1285					_CLError:
.1285	4c 07 23	jmp $2307		jmp	ErrorV_variable
.1288					_CLType:
.1288	4c 11 22	jmp $2211		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.128b					Command_NEW:
.128b	20 d6 1c	jsr $1cd6			jsr 	PGMNewProgram
.128e	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1291	4c ee 12	jmp $12ee			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1294					Command_REM:
.1294					Command_REM2:
.1294	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1296	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1298	d0 06		bne $12a0			bne 	_CRExit
.129a	c8		iny				iny 								; skip over it, it's a comment.
.129b	98		tya				tya
.129c	38		sec				sec
.129d	71 1c		adc ($1c),y			adc 	(codePtr),y
.129f	a8		tay				tay
.12a0					_CRExit:
.12a0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.12a1					Command_RUN:
.12a1	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.12a4	ad 0f 04	lda $040f			lda 	PGMBaseHigh 				; back to the program start
.12a7	85 1d		sta $1d				sta 	codePtr+1
.12a9	64 1c		stz $1c				stz 	codePtr
.12ab	80 0b		bra $12b8			bra 	RUNNewLine
.12ad					RUNEndOfLine:
.12ad	18		clc				clc 								; advance to next line.
.12ae	b2 1c		lda ($1c)			lda 	(codePtr)
.12b0	65 1c		adc $1c				adc 	codePtr
.12b2	85 1c		sta $1c				sta 	codePtr
.12b4	90 02		bcc $12b8			bcc 	_RELNoCarry
.12b6	e6 1d		inc $1d				inc 	codePtr+1
.12b8					_RELNoCarry:
.12b8					RUNNewLine:
.12b8	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.12ba	9a		txs				txs
.12bb	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.12bd	f0 2f		beq $12ee			beq 	Command_END
.12bf	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.12c1					RUNNewCommand:
.12c1	9c 16 05	stz $0516			stz 	stringInitialised 			; reset string system.
.12c4	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.12c6	10 1a		bpl $12e2			bpl		_RUNNotToken 				; probably an identifier
.12c8	c8		iny				iny 								; consume token
.12c9	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.12cb	f0 f4		beq $12c1			beq 	RUNNewCommand
.12cd	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.12cf	b0 0e		bcs $12df			bcs 	_RUNSyntax
.12d1	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.12d3	90 0a		bcc $12df			bcc 	_RUNSyntax
.12d5	0a		asl a				asl 	a 							; double into X.
.12d6	aa		tax				tax
.12d7	20 dc 12	jsr $12dc			jsr 	_RUNDispatchMain			; call the main dispatcher
.12da	80 e5		bra $12c1			bra 	RUNNewCommand
.12dc					_RUNDispatchMain:
.12dc	7c ec 19	jmp ($19ec,x)			jmp 	(VectorTable,x)
.12df					_RUNSyntax:
.12df	4c e4 21	jmp $21e4		jmp	ErrorV_syntax
.12e2					_RUNNotToken:
.12e2	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.12e4	90 f9		bcc $12df			bcc 	_RUNSyntax
.12e6	20 13 12	jsr $1213			jsr 	CommandLET 					; assignment
.12e9	80 d6		bra $12c1			bra 	RUNNewCommand 				; loop round.
.12eb					Command_Shift_Handler:
.12eb	4c 22 22	jmp $2222		jmp	ErrorV_unimplemented
.12ee					Command_END:
.12ee	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.12f1					Command_STOP:
.12f1	4c 7f 22	jmp $227f		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.12f4					Command_Sys:
.12f4	20 db 14	jsr $14db			jsr 	EXPEvalInteger16 			; execution address
.12f7	5a		phy				phy
.12f8	ad 61 05	lda $0561			lda 	('A'-'A')*4 + FastVariables ; load AXY
.12fb	ae bd 05	ldx $05bd			ldx 	('X'-'A')*4 + FastVariables
.12fe	ac c1 05	ldy $05c1			ldy 	('Y'-'A')*4 + FastVariables
.1301	20 06 13	jsr $1306			jsr 	_CSCallIFR0 				; call the code
.1304	7a		ply				ply
.1305	60		rts				rts
.1306					_CSCallIFR0:
.1306	6c 0c 00	jmp ($000c)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1309					NoExec01:
.1309					NoExec02:
.1309					NoExec03:
.1309					NoExec04:
.1309					NoExec05:
.1309					NoExec06:
.1309					NoExec07:
.1309					NoExec08:
.1309	4c e4 21	jmp $21e4		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.130c					EXPBinAdd:
.130c	24 0f		bit $0f				bit 	IFR0+IExp
.130e	30 6f		bmi $137f			bmi 	EXPConcatenate
.1310	a2 10		ldx #$10			ldx 	#IFR1
.1312	4c 28 26	jmp $2628			jmp 	IFloatAdd
.1315					EXPBinSub:
.1315	24 0f		bit $0f				bit 	IFR0+IExp
.1317	30 3f		bmi $1358			bmi 	EXPTypeError
.1319	a2 10		ldx #$10			ldx 	#IFR1
.131b	4c 21 26	jmp $2621			jmp 	IFloatSubtract
.131e					EXPBinMul:
.131e	24 0f		bit $0f				bit 	IFR0+IExp
.1320	30 36		bmi $1358			bmi 	EXPTypeError
.1322	a2 10		ldx #$10			ldx 	#IFR1
.1324	4c d2 26	jmp $26d2			jmp 	IFloatMultiply
.1327					EXPBinFDiv:
.1327	24 0f		bit $0f				bit 	IFR0+IExp
.1329	30 2d		bmi $1358			bmi 	EXPTypeError
.132b	a2 10		ldx #$10			ldx 	#IFR1
.132d	20 55 29	jsr $2955			jsr 	IFloatDivideFloat
.1330	b0 0f		bcs $1341			bcs 	EXPDZero
.1332	60		rts				rts
.1333					EXPBinIDiv:
.1333	24 0f		bit $0f				bit 	IFR0+IExp
.1335	30 21		bmi $1358			bmi 	EXPTypeError
.1337	a2 10		ldx #$10			ldx 	#IFR1
.1339	20 55 29	jsr $2955			jsr 	IFloatDivideFloat
.133c	b0 03		bcs $1341			bcs 	EXPDZero
.133e	4c 32 29	jmp $2932			jmp 	IFloatIntegerR0
.1341					EXPDZero:
.1341	4c 56 22	jmp $2256		jmp	ErrorV_divzero
.1344					EXPBinIMod:
.1344	24 0f		bit $0f				bit 	IFR0+IExp
.1346	30 10		bmi $1358			bmi 	EXPTypeError
.1348	a2 10		ldx #$10			ldx 	#IFR1
.134a	5a		phy				phy
.134b	20 6a 28	jsr $286a			jsr 	IFPreProcessBitwise 		; set up everything.
.134e	d0 05		bne $1355			bne 	EXPDRange
.1350	20 a3 27	jsr $27a3			jsr 	IFloatModulusInteger
.1353	7a		ply				ply
.1354	60		rts				rts
.1355					EXPDRange:
.1355	4c f4 21	jmp $21f4		jmp	ErrorV_range
.1358					EXPTypeError:
.1358	4c 11 22	jmp $2211		jmp	ErrorV_type
.135b					EXPBinAnd:
.135b	24 0f		bit $0f				bit 	IFR0+IExp
.135d	30 f9		bmi $1358			bmi 	EXPTypeError
.135f	a2 10		ldx #$10			ldx 	#IFR1
.1361	20 25 28	jsr $2825			jsr 	IFloatBitwiseAnd
.1364	b0 ef		bcs $1355			bcs 	EXPDRange
.1366	60		rts				rts
.1367					EXPBinOr:
.1367	24 0f		bit $0f				bit 	IFR0+IExp
.1369	30 ed		bmi $1358			bmi 	EXPTypeError
.136b	a2 10		ldx #$10			ldx 	#IFR1
.136d	20 3c 28	jsr $283c			jsr 	IFloatBitwiseOr
.1370	b0 e3		bcs $1355			bcs 	EXPDRange
.1372	60		rts				rts
.1373					EXPBinXor:
.1373	24 0f		bit $0f				bit 	IFR0+IExp
.1375	30 e1		bmi $1358			bmi 	EXPTypeError
.1377	a2 10		ldx #$10			ldx 	#IFR1
.1379	20 53 28	jsr $2853			jsr 	IFloatBitwiseXor
.137c	b0 d7		bcs $1355			bcs 	EXPDRange
.137e	60		rts				rts
.137f					EXPConcatenate:
.137f	18		clc				clc
.1380	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1382	72 10		adc ($10)			adc 	(IFR1)
.1384	b0 2d		bcs $13b3			bcs 	_EXPCError
.1386	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.1388	da		phx				phx
.1389	a6 0d		ldx $0d				ldx 	IFR0+1
.138b	da		phx				phx
.138c	20 27 24	jsr $2427			jsr 	StringTempAllocate 			; allocate string, set up return
.138f	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1391	a5 10		lda $10				lda 	IFR1
.1393	20 9c 13	jsr $139c			jsr 	_EXPCCopyXA
.1396	fa		plx				plx 								; copy second string
.1397	68		pla				pla
.1398	20 9c 13	jsr $139c			jsr 	_EXPCCopyXA
.139b	60		rts				rts
.139c					_EXPCCopyXA:
.139c	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.139e	85 1e		sta $1e				sta 	zTemp0
.13a0	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.13a2	f0 0e		beq $13b2			beq 	_EXPCCExit 					; nothing.
.13a4	aa		tax				tax 								; count
.13a5	5a		phy				phy 								; start positioin
.13a6	a0 01		ldy #$01			ldy 	#1
.13a8					_EXPCCLoop:
.13a8	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.13aa	20 5c 24	jsr $245c			jsr 	StringTempWrite
.13ad	c8		iny				iny
.13ae	ca		dex				dex
.13af	d0 f7		bne $13a8			bne 	_EXPCCLoop
.13b1	7a		ply				ply
.13b2					_EXPCCExit:
.13b2	60		rts				rts
.13b3					_EXPCError:
.13b3	4c f2 22	jmp $22f2		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.13b6					EXPReturnTrue:
.13b6	a2 0c		ldx #$0c			ldx 	#IFR0
.13b8	a9 01		lda #$01			lda 	#1
.13ba	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.13bd	20 3d 2c	jsr $2c3d			jsr 	IFloatNegate
.13c0	60		rts				rts
.13c1					EXPReturnFalse:
.13c1	a2 0c		ldx #$0c			ldx 	#IFR0
.13c3	4c 32 2c	jmp $2c32			jmp 	IFloatSetZero
.13c6					EXPCompareEqual:
.13c6	20 fc 13	jsr $13fc			jsr 	EXPCompareBaseCode
.13c9	c9 00		cmp #$00			cmp 	#0
.13cb	f0 e9		beq $13b6			beq 	EXPReturnTrue
.13cd	80 f2		bra $13c1			bra 	EXPReturnFalse
.13cf					EXPCompareLess:
.13cf	20 fc 13	jsr $13fc			jsr 	EXPCompareBaseCode
.13d2	c9 ff		cmp #$ff			cmp 	#$FF
.13d4	f0 e0		beq $13b6			beq 	EXPReturnTrue
.13d6	80 e9		bra $13c1			bra 	EXPReturnFalse
.13d8					EXPCompareGreater:
.13d8	20 fc 13	jsr $13fc			jsr 	EXPCompareBaseCode
.13db	c9 01		cmp #$01			cmp 	#1
.13dd	f0 d7		beq $13b6			beq 	EXPReturnTrue
.13df	80 e0		bra $13c1			bra 	EXPReturnFalse
.13e1					EXPCompareNotEqual:
.13e1	20 fc 13	jsr $13fc			jsr 	EXPCompareBaseCode
.13e4	c9 00		cmp #$00			cmp 	#0
.13e6	d0 ce		bne $13b6			bne 	EXPReturnTrue
.13e8	80 d7		bra $13c1			bra 	EXPReturnFalse
.13ea					EXPCompareLessEqual:
.13ea	20 fc 13	jsr $13fc			jsr 	EXPCompareBaseCode
.13ed	c9 01		cmp #$01			cmp 	#1
.13ef	d0 c5		bne $13b6			bne 	EXPReturnTrue
.13f1	80 ce		bra $13c1			bra 	EXPReturnFalse
.13f3					EXPCompareGreaterEqual:
.13f3	20 fc 13	jsr $13fc			jsr 	EXPCompareBaseCode
.13f6	c9 ff		cmp #$ff			cmp 	#$FF
.13f8	d0 bc		bne $13b6			bne 	EXPReturnTrue
.13fa	80 c5		bra $13c1			bra 	EXPReturnFalse
.13fc					EXPCompareBaseCode:
.13fc	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.13fe	30 10		bmi $1410			bmi 	_EXCBCString
.1400	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.1402	20 00 29	jsr $2900			jsr 	IFloatCompare
.1405	a5 0c		lda $0c				lda 	IFR0+IM0
.1407	f0 06		beq $140f			beq 	_EXCBCExit 					; return 0 if zero
.1409	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.140b	50 02		bvc $140f			bvc 	_EXCBCExit
.140d	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.140f					_EXCBCExit:
.140f	60		rts				rts
.1410					_EXCBCString:
.1410	5a		phy				phy
.1411	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.1413	d2 10		cmp ($10)			cmp 	(IFR1)
.1415	90 02		bcc $1419			bcc 	_EXCBCSmaller
.1417	b2 10		lda ($10)			lda 	(IFR1)
.1419					_EXCBCSmaller:
.1419	aa		tax				tax
.141a	f0 0d		beq $1429			beq 	_EXCBCMatches 				; if zero common length matches
.141c	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.141e					_EXCBCCheckSmallerMatches:
.141e	c8		iny				iny 								; compare directly as far as common length
.141f	38		sec				sec
.1420	b1 10		lda ($10),y			lda 	(IFR1),y
.1422	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.1424	d0 08		bne $142e			bne 	_EXCBCExit2
.1426	ca		dex				dex
.1427	d0 f5		bne $141e			bne 	_EXCBCCheckSmallerMatches
.1429					_EXCBCMatches:
.1429	38		sec				sec
.142a	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.142c	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.142e					_EXCBCExit2:
.142e	7a		ply				ply
.142f	c9 00		cmp #$00			cmp 	#0
.1431	f0 04		beq $1437			beq 	_EXCBCReturn
.1433	30 03		bmi $1438			bmi 	_EXCBCFF
.1435	a9 01		lda #$01			lda 	#1
.1437					_EXCBCReturn:
.1437	60		rts				rts
.1438					_EXCBCFF:
.1438	a9 ff		lda #$ff			lda 	#$FF
.143a	60		rts				rts
.143b					_EXCBCRange:
.143b	4c f4 21	jmp $21f4		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.143e					EXPBinLeft:
.143e	a9 ff		lda #$ff			lda 	#$FF
.1440	8d 06 04	sta $0406			sta 	EXPShiftLeftFlag
.1443	4c 49 14	jmp $1449			jmp 	EXPShiftCommon
.1446					EXPBinRight:
.1446	9c 06 04	stz $0406			stz 	EXPShiftLeftFlag
.1449					EXPShiftCommon:
.1449	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.144b	05 13		ora $13				ora 	IFR1+IExp
.144d	29 7f		and #$7f			and 	#$7F
.144f	d0 35		bne $1486			bne 	_EXPSRange
.1451	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1453	29 e0		and #$e0			and 	#$E0
.1455	05 0d		ora $0d				ora 	IFR0+IM1
.1457	05 0e		ora $0e				ora 	IFR0+IM2
.1459	d0 25		bne $1480			bne 	_EXPSShiftZero 				; if so return zero
.145b	5a		phy				phy
.145c	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.145e	29 1f		and #$1f			and 	#$1F
.1460	f0 17		beq $1479			beq 	_EXPSExit 					; exit if zero
.1462	a8		tay				tay
.1463					_EXPSLoop:
.1463	a2 10		ldx #$10			ldx 	#IFR1
.1465	2c 06 04	bit $0406			bit 	EXPShiftLeftFlag
.1468	30 05		bmi $146f			bmi 	_EXPSShiftLeft
.146a	20 61 2c	jsr $2c61			jsr 	IFloatShiftRight
.146d	80 07		bra $1476			bra 	_EXPSContinue
.146f					_EXPSShiftLeft:
.146f	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1472	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1474	30 10		bmi $1486			bmi 	_EXPSRange
.1476					_EXPSContinue:
.1476	88		dey				dey
.1477	d0 ea		bne $1463			bne 	_EXPSLoop
.1479					_EXPSExit:
.1479	a2 10		ldx #$10			ldx 	#IFR1
.147b	20 c3 2b	jsr $2bc3			jsr 	IFloatCopyFromRegister
.147e	7a		ply				ply
.147f	60		rts				rts
.1480					_EXPSShiftZero:
.1480	a2 0c		ldx #$0c			ldx 	#IFR0
.1482	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.1485	60		rts				rts
.1486					_EXPSRange:
.1486	4c f4 21	jmp $21f4		jmp	ErrorV_range
.0406					EXPShiftLeftFlag:
>0406							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1489					EXPEvaluateExpression:
.1489	a9 00		lda #$00			lda 	#0 							; current precedence
.148b					EXPEvaluateExpressionPrecedenceA:
.148b	48		pha				pha
.148c	20 06 15	jsr $1506			jsr 	EXPTermValueR0				; do first term.
.148f					_EELoop:
.148f	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1491	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1493	90 31		bcc $14c6			bcc 	_EEExit
.1495	aa		tax				tax 								; access the precedence of the operator.
.1496	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1497	dd 44 17	cmp $1744,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.149a	b0 2b		bcs $14c7			bcs 	_EEExit2
.149c	48		pha				pha 								; save current precedence.
.149d	da		phx				phx 								; save operator
.149e	c8		iny				iny 								; consume operator
.149f	da		phx				phx
.14a0	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.14a2	20 81 2b	jsr $2b81			jsr 	IFloatPushRx
.14a5	fa		plx				plx
.14a6	bd 44 17	lda $1744,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.14a9	20 8b 14	jsr $148b			jsr 	EXPEvaluateExpressionPrecedenceA
.14ac	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.14ae	20 a2 2b	jsr $2ba2			jsr 	IFloatPullRx
.14b1	fa		plx				plx 								; operator
.14b2	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.14b4	45 13		eor $13				eor 	IFR1+IExp
.14b6	30 08		bmi $14c0			bmi 	_EEType
.14b8					_EETypeOkay:
.14b8	8a		txa				txa
.14b9	0a		asl a				asl 	a 							; double -> X
.14ba	aa		tax				tax
.14bb	20 c3 14	jsr $14c3			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.14be	80 cf		bra $148f			bra 	_EELoop
.14c0					_EEType:
.14c0	4c 11 22	jmp $2211		jmp	ErrorV_type
.14c3					_EECallBinary:
.14c3	7c ec 19	jmp ($19ec,x)			jmp 	(VectorTable,x)
.14c6					_EEExit:
.14c6	68		pla				pla 								; throw precedence
.14c7					_EEExit2:
.14c7	18		clc				clc
.14c8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.14c9					EXPEvalNumber:
.14c9	20 89 14	jsr $1489			jsr 	EXPEvaluateExpression
.14cc	24 0f		bit $0f				bit 	IFR0+IExp
.14ce	30 01		bmi $14d1			bmi 	EVUType
.14d0	60		rts				rts
.14d1					EVUType:
.14d1	4c 11 22	jmp $2211		jmp	ErrorV_type
.14d4					EXPEvalInteger:
.14d4	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.14d7	20 32 29	jsr $2932			jsr 	IFloatIntegerR0
.14da	60		rts				rts
.14db					EXPEvalInteger16:
.14db	20 d4 14	jsr $14d4			jsr 	EXPEvalInteger
.14de	a5 0e		lda $0e				lda 	IFR0+IM2
.14e0	d0 21		bne $1503			bne 	EVURange
.14e2	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14e4	a5 0c		lda $0c				lda 	IFR0+IM0
.14e6	60		rts				rts
.14e7					EXPEvalInteger8:
.14e7	20 d4 14	jsr $14d4			jsr 	EXPEvalInteger
.14ea	a5 0e		lda $0e				lda 	IFR0+IM2
.14ec	05 0d		ora $0d				ora 	IFR0+IM1
.14ee	d0 13		bne $1503			bne 	EVURange
.14f0	a5 0c		lda $0c				lda 	IFR0+IM0
.14f2	60		rts				rts
.14f3					EXPEvalString:
.14f3	20 89 14	jsr $1489			jsr 	EXPEvaluateExpression
.14f6	24 0f		bit $0f				bit 	IFR0+IExp
.14f8	10 d7		bpl $14d1			bpl 	EVUType
.14fa	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14fc	86 1f		stx $1f				stx 	zTemp0+1
.14fe	a5 0c		lda $0c				lda 	IFR0+IM0
.1500	85 1e		sta $1e				sta 	zTemp0
.1502	60		rts				rts
.1503					EVURange:
.1503	4c f4 21	jmp $21f4		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1506					EXPTermValueR0:
.1506	20 51 15	jsr $1551			jsr 	EXPTermR0 					; get term
.1509	90 45		bcc $1550			bcc 	_ETVNotReference 			; exit if value.
.150b	5a		phy				phy
.150c	a0 03		ldy #$03			ldy 	#3 							; get type
.150e	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1510	30 14		bmi $1526			bmi 	_ETVDereferenceString
.1512	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.1514	88		dey				dey
.1515	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1517	85 0e		sta $0e				sta 	IFR0+IM2
.1519	88		dey				dey
.151a	b1 0c		lda ($0c),y			lda 	(IFR0),y
.151c	aa		tax				tax
.151d	b2 0c		lda ($0c)			lda 	(IFR0)
.151f	86 0d		stx $0d				stx 	IFR0+IM1
.1521	85 0c		sta $0c				sta 	IFR0+IM0
.1523	7a		ply				ply
.1524	18		clc				clc
.1525	60		rts				rts
.1526					_ETVDereferenceString:
.1526	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1528	b1 0c		lda ($0c),y			lda 	(IFR0),y
.152a	12 0c		ora ($0c)			ora 	(IFR0)
.152c	f0 11		beq $153f			beq 	_ETVNull
.152e	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.1530	aa		tax				tax
.1531	b2 0c		lda ($0c)			lda 	(IFR0)
.1533	18		clc				clc 								; add two so points to actual string.
.1534	69 02		adc #$02			adc 	#2
.1536	90 01		bcc $1539			bcc 	_EVDSNoCarry
.1538	e8		inx				inx
.1539					_EVDSNoCarry:
.1539	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.153b	85 0c		sta $0c				sta 	IFR0
.153d	80 08		bra $1547			bra 	_ETVFillExit 				; tidy up and exit.
.153f					_ETVNull:
.153f	a9 4f		lda #$4f			lda 	#_EVTNString & $FF
.1541	85 0c		sta $0c				sta 	IFR0+IM0
.1543	a9 15		lda #$15			lda 	#_EVTNString >> 8
.1545	85 0d		sta $0d				sta 	IFR0+IM1
.1547					_ETVFillExit:
.1547	64 0e		stz $0e				stz 	IFR0+IM2
.1549	a9 80		lda #$80			lda 	#$80
.154b	85 0f		sta $0f				sta 	IFR0+IExp
.154d	7a		ply				ply
.154e	60		rts				rts
.154f					_EVTNString:
>154f	00						.byte 	0
.1550					_ETVNotReference:
.1550	60		rts				rts
.1551					EXPTermR0:
.1551	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.1553	30 10		bmi $1565			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1555	c8		iny				iny 								; consume element
.1556	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1558	b0 08		bcs $1562			bcs 	_ETMIdentifier
.155a	20 89 15	jsr $1589			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.155d	20 bc 15	jsr $15bc			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1560	18		clc				clc 								; return value
.1561	60		rts				rts
.1562					_ETMIdentifier:
.1562	4c c9 25	jmp $25c9			jmp 	VARCheckSimple 				; check simple variables A-Z
.1565					_ETMIsUnaryOrMinus:
.1565	c8		iny				iny 								; consume element
.1566	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1568	d0 0a		bne $1574			bne 	_ETMCheckUnary
.156a	20 06 15	jsr $1506			jsr 	EXPTermValueR0 				; get a term to negate
.156d	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.156f	20 3d 2c	jsr $2c3d			jsr 	IFloatNegate
.1572	18		clc				clc
.1573	60		rts				rts
.1574					_ETMCheckUnary:
.1574	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1576	90 0e		bcc $1586			bcc 	_ETMUnarySyntax
.1578	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.157a	b0 0a		bcs $1586			bcs 	_ETMUnarySyntax
.157c	0a		asl a				asl 	a
.157d	aa		tax				tax
.157e	20 83 15	jsr $1583			jsr 	_ETMCallUnaryFunction
.1581	18		clc				clc
.1582	60		rts				rts
.1583					_ETMCallUnaryFunction:
.1583	7c ec 19	jmp ($19ec,x)			jmp 	(VectorTable,x)
.1586					_ETMUnarySyntax:
.1586	4c e4 21	jmp $21e4		jmp	ErrorV_syntax
.1589					EXPExtractTokenisedInteger:
.1589	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.158b	64 0f		stz $0f				stz 	IFR0+IExp
.158d	64 0d		stz $0d				stz 	IFR0+IM1
.158f	64 0e		stz $0e				stz 	IFR0+IM2
.1591					_ETMConstant:
.1591	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1593	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1595	b0 24		bcs $15bb			bcs 	_ETMCExit 					; no.
.1597	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1599	a5 0d		lda $0d				lda 	IFR0+IM1
.159b	85 0e		sta $0e				sta 	IFR0+IM2
.159d	a5 0c		lda $0c				lda 	IFR0+IM0
.159f	85 0d		sta $0d				sta 	IFR0+IM1
.15a1	64 0c		stz $0c				stz 	IFR0+IM0
.15a3	8a		txa				txa
.15a4	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.15a5	66 0e		ror $0e				ror 	IFR0+IM2
.15a7	66 0d		ror $0d				ror 	IFR0+IM1
.15a9	66 0c		ror $0c				ror 	IFR0+IM0
.15ab	4a		lsr a				lsr 	a
.15ac	66 0e		ror $0e				ror 	IFR0+IM2
.15ae	66 0d		ror $0d				ror 	IFR0+IM1
.15b0	66 0c		ror $0c				ror 	IFR0+IM0
.15b2	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.15b4	11 1c		ora ($1c),y			ora 	(codePtr),y
.15b6	85 0c		sta $0c				sta 	IFR0+IM0
.15b8	c8		iny				iny 								; consume, loop back
.15b9	80 d6		bra $1591			bra 	_ETMConstant
.15bb					_ETMCExit:
.15bb	60		rts				rts
.15bc					EXPCheckDecimalFollows:
.15bc	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.15be	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.15c0	d0 19		bne $15db			bne 	_ETMCDExit
.15c2	c8		iny				iny 								; consume token.
.15c3	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.15c5	5a		phy				phy									; save current position
.15c6	48		pha				pha 								; save count of chars.
.15c7	38		sec				sec 								; address into YX : y + codePtr+1
.15c8	98		tya				tya
.15c9	65 1c		adc $1c				adc 	codePtr
.15cb	aa		tax				tax
.15cc	a5 1d		lda $1d				lda 	codePtr+1
.15ce	69 00		adc #$00			adc 	#0
.15d0	a8		tay				tay
.15d1	68		pla				pla 								; get count.
.15d2	20 d6 2a	jsr $2ad6			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.15d5	7a		ply				ply 								; go to next token.
.15d6	98		tya				tya
.15d7	38		sec				sec
.15d8	71 1c		adc ($1c),y			adc 	(codePtr),y
.15da	a8		tay				tay
.15db					_ETMCDExit:
.15db	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.15dc					EXPUnaryAbs:
.15dc	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 					; number to R0
.15df	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.15e2	20 76 28	jsr $2876			jsr 	IFloatAbsoluteR0
.15e5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.15e6					EXPUnaryAsc:
.15e6	20 f3 14	jsr $14f3			jsr 	EXPEvalString 					; string to R0, zTemp0
.15e9	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.15ec	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.15ee	f0 06		beq $15f6			beq 	_EXAZero 						; if so return 0
.15f0	5a		phy				phy 									; otherwise get first character
.15f1	a0 01		ldy #$01			ldy 	#1
.15f3	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15f5	7a		ply				ply
.15f6					_EXAZero:
.15f6	a2 0c		ldx #$0c			ldx 	#IFR0
.15f8	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.15fb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.15fc					EXPUnaryChr:
.15fc	20 e7 14	jsr $14e7			jsr 	EXPEvalInteger8 				; expr
.15ff	48		pha				pha 									; push on stack
.1600	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.1603	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1605	20 27 24	jsr $2427			jsr 	StringTempAllocate
.1608	68		pla				pla
.1609	20 5c 24	jsr $245c			jsr 	StringTempWrite
.160c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.160d					EXPUnaryDec:
.160d	20 f3 14	jsr $14f3			jsr 	EXPEvalString 					; string to R0, zTemp0
.1610	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.1613	5a		phy				phy
.1614	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.1616	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.1619	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.161b	f0 3b		beq $1658			beq 	_EUDError 						; empty string
.161d	aa		tax				tax
.161e	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1620					_EUDLoop:
.1620	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1622	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1624	90 02		bcc $1628			bcc 	_EUDNoCase
.1626	e9 20		sbc #$20			sbc 	#$20
.1628					_EUDNoCase:
.1628	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.162a	90 2c		bcc $1658			bcc 	_EUDError
.162c	c9 3a		cmp #$3a			cmp 	#'9'+1
.162e	90 0a		bcc $163a			bcc 	_EUDOkay
.1630	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1632	90 24		bcc $1658			bcc 	_EUDError
.1634	c9 47		cmp #$47			cmp 	#'F'+1
.1636	b0 20		bcs $1658			bcs 	_EUDError
.1638	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.163a					_EUDOkay:
.163a	29 0f		and #$0f			and 	#15 							; make constant
.163c	da		phx				phx
.163d	48		pha				pha
.163e	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1640	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1643	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1646	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1649	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.164c	68		pla				pla 									; pop constant and OR in
.164d	fa		plx				plx
.164e	05 0c		ora $0c				ora 	IFR0+IM0
.1650	85 0c		sta $0c				sta 	IFR0+IM0
.1652	c8		iny				iny 									; next
.1653	ca		dex				dex
.1654	d0 ca		bne $1620			bne 	_EUDLoop
.1656	7a		ply				ply
.1657	60		rts				rts
.1658					_EUDError:
.1658	4c 04 22	jmp $2204		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.165b					EXPUnaryInlineDec:
.165b	4c e4 21	jmp $21e4		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.165e					EXPUnaryPeek:
.165e	20 db 14	jsr $14db			jsr 	EXPEvalInteger16 				; number to R0
.1661	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.1664	b2 0c		lda ($0c)			lda 	(IFR0)
.1666	a2 0c		ldx #$0c			ldx 	#IFR0
.1668	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.166b	60		rts				rts
.166c					EXPUnaryDeek:
.166c	20 db 14	jsr $14db			jsr 	EXPEvalInteger16 				; number to R0
.166f	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.1672	5a		phy				phy
.1673	a0 01		ldy #$01			ldy 	#1
.1675	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1677	7a		ply				ply
.1678	48		pha				pha
.1679	b2 0c		lda ($0c)			lda 	(IFR0)
.167b	a2 0c		ldx #$0c			ldx 	#IFR0
.167d	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.1680	68		pla				pla
.1681	85 0d		sta $0d				sta 	IFR0+IM1
.1683	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1684					EXPUnaryNull:
.1684	20 06 15	jsr $1506			jsr 	EXPTermValueR0
.1687	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1688					EXPUnaryFrac:
.1688	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 					; number to R0
.168b	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.168e	20 dc 28	jsr $28dc			jsr 	IFloatFractionalR0
.1691	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1692					EXPUnaryInt:
.1692	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 					; number to R0
.1695	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.1698	20 32 29	jsr $2932			jsr 	IFloatIntegerR0
.169b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.169c					EXPUnaryLen:
.169c	20 f3 14	jsr $14f3			jsr 	EXPEvalString 					; string to R0, zTemp0
.169f	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.16a2	b2 1e		lda ($1e)			lda 	(zTemp0)
.16a4	a2 0c		ldx #$0c			ldx 	#IFR0
.16a6	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.16a9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.16aa					EXPUnaryParenthesis:
.16aa	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 					; number to R0
.16ad	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.16b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.16b1					EXPUnaryRnd:
.16b1	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 				; number to R0
.16b4	20 31 23	jsr $2331			jsr 	ERRCheckRParen 				; )
.16b7	a2 0c		ldx #$0c			ldx 	#IFR0
.16b9	20 d0 16	jsr $16d0			jsr 	EXPLoadInRandom
.16bc	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.16be	85 0f		sta $0f				sta 	IFR0+IExp
.16c0	60		rts				rts
.16c1					ExpUnaryRand:
.16c1	20 d4 14	jsr $14d4			jsr 	EXPEvalInteger 				; integer to R0
.16c4	20 31 23	jsr $2331			jsr 	ERRCheckRParen 				; )
.16c7	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.16c9	20 d0 16	jsr $16d0			jsr 	EXPLoadInRandom
.16cc	20 a3 27	jsr $27a3			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.16cf	60		rts				rts
.16d0					EXPLoadInRandom:
.16d0	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.16d3	20 e5 16	jsr $16e5			jsr 	EXPRandom32
.16d6	95 00		sta $00,x			sta 	IM0,x
.16d8	20 e5 16	jsr $16e5			jsr 	EXPRandom32
.16db	95 01		sta $01,x			sta 	IM1,x
.16dd	20 e5 16	jsr $16e5			jsr 	EXPRandom32
.16e0	29 7f		and #$7f			and 	#$7F
.16e2	95 02		sta $02,x			sta 	IM2,x
.16e4	60		rts				rts
.16e5					EXPRandom32:
.16e5	5a		phy				phy
.16e6	a0 08		ldy #$08			ldy 	#8
.16e8	ad 07 04	lda $0407			lda 	EXPSeed+0
.16eb	0d 08 04	ora $0408			ora 	EXPSeed+1
.16ee	0d 09 04	ora $0409			ora 	EXPSeed+2
.16f1	0d 0a 04	ora $040a			ora 	EXPSeed+3
.16f4	d0 08		bne $16fe			bne 	_EXPRNoReset
.16f6	ee 07 04	inc $0407			inc 	EXPSeed+0
.16f9	a0 10		ldy #$10			ldy 	#16
.16fb	8c 0a 04	sty $040a			sty 	EXPSeed+3
.16fe					_EXPRNoReset:
.16fe	ad 07 04	lda $0407			lda 	EXPSeed+0
.1701					_EXPRLoop:
.1701	0a		asl a				asl		a
.1702	2e 08 04	rol $0408			rol 	EXPSeed+1
.1705	2e 09 04	rol $0409			rol 	EXPSeed+2
.1708	2e 0a 04	rol $040a			rol 	EXPSeed+3
.170b	90 02		bcc $170f			bcc 	_EXPRNoEOR
.170d	49 c5		eor #$c5			eor 	#$C5
.170f					_EXPRNoEOR:
.170f	88		dey				dey
.1710	d0 ef		bne $1701			bne 	_EXPRLoop
.1712	8d 07 04	sta $0407			sta 	EXPSeed+0
.1715	7a		ply				ply
.1716	60		rts				rts
.0407					EXPSeed:
>0407							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1717					EXPUnarySgn:
.1717	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 					; number to R0
.171a	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.171d	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.171f	20 d4 2b	jsr $2bd4			jsr 	IFloatCopyToRegister
.1722	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.1724	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.1727	a2 10		ldx #$10			ldx 	#IFR1
.1729	20 00 29	jsr $2900			jsr 	IFloatCompare 					; compare R1 vs 0.
.172c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.172d					EXPUnarySqr:
.172d	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 					; number to R0
.1730	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.1733	20 7e 28	jsr $287e			jsr 	IFloatSquareRootR0 				; square root.
.1736	b0 01		bcs $1739			bcs 	_EUSValue
.1738	60		rts				rts
.1739					_EUSValue:
.1739	4c f4 21	jmp $21f4		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.173c					EXPUnaryHex:
.173c	20 d4 14	jsr $14d4			jsr 	EXPEvalInteger 					; expr
.173f	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.1742	5a		phy				phy
.1743	a9 10		lda #$10			lda 	#16
.1745	20 d3 29	jsr $29d3			jsr 	IFloatIntegerToStringR0
.1748	80 0a		bra $1754			bra 	EUSMain
.174a					EXPUnaryStr:
.174a	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 					; expr
.174d	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.1750	5a		phy				phy
.1751	20 2f 2a	jsr $2a2f			jsr 	IFloatFloatToStringR0 			; convert to string
.1754					EUSMain:
.1754	b0 18		bcs $176e			bcs 	_EUSError
.1756	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1758	84 1f		sty $1f				sty 	zTemp0+1
.175a	48		pha				pha 									; save count
.175b	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.175d	20 27 24	jsr $2427			jsr 	StringTempAllocate
.1760	fa		plx				plx 									; count in X
.1761	a0 00		ldy #$00			ldy 	#0
.1763					_EUSCopy:
.1763	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1765	c8		iny				iny
.1766	20 5c 24	jsr $245c			jsr 	StringTempWrite
.1769	ca		dex				dex
.176a	d0 f7		bne $1763			bne	 	_EUSCopy
.176c	7a		ply				ply
.176d	60		rts				rts
.176e					_EUSError:
.176e	4c f4 21	jmp $21f4		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1771					EXPUnaryInlineString:
.1771	18		clc				clc 								; physical address -> IM0,1
.1772	98		tya				tya
.1773	65 1c		adc $1c				adc 	codePtr
.1775	85 0c		sta $0c				sta 	IFR0+IM0
.1777	a5 1d		lda $1d				lda 	codePtr+1
.1779	69 00		adc #$00			adc 	#0
.177b	85 0d		sta $0d				sta 	IFR0+IM1
.177d	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.177f	a9 80		lda #$80			lda 	#$80
.1781	85 0f		sta $0f				sta 	IFR0+IExp
.1783	98		tya				tya	 								; skip over it.
.1784	38		sec				sec
.1785	71 1c		adc ($1c),y			adc 	(codePtr),y
.1787	a8		tay				tay
.1788	60		rts				rts
.1789					_EXPUISRange:
.1789	4c f4 21	jmp $21f4		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.178c					EXPUnaryLeft:
.178c	20 d2 17	jsr $17d2			jsr 	EXPCommonStart 					; <string>,
.178f	48		pha				pha 									; save string address on stack
.1790	da		phx				phx
.1791	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1793	48		pha				pha
.1794	20 e7 14	jsr $14e7			jsr 	EXPEvalInteger8 				; characters to do
.1797	80 44		bra $17dd			bra 	EXPSubstringCommon
.1799					EXPUnaryRight:
.1799	20 d2 17	jsr $17d2			jsr 	EXPCommonStart 					; <string>,
.179c	48		pha				pha 									; save string address on stack
.179d	da		phx				phx
.179e	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.17a0	48		pha				pha
.17a1	20 e7 14	jsr $14e7			jsr 	EXPEvalInteger8 				; characters to do
.17a4	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.17a6	68		pla				pla
.17a7	38		sec				sec
.17a8	e5 1e		sbc $1e				sbc 	zTemp0
.17aa	b0 02		bcs $17ae			bcs 	_EUROffLeft
.17ac	a9 00		lda #$00			lda 	#0
.17ae					_EUROffLeft:
.17ae	48		pha				pha 									; start pos
.17af	a9 ff		lda #$ff			lda 	#255
.17b1	80 2a		bra $17dd			bra 	EXPSubstringCommon
.17b3					EXPUnaryMid:
.17b3	20 d2 17	jsr $17d2			jsr 	EXPCommonStart 					; <string>,
.17b6	48		pha				pha 									; save string address on stack
.17b7	da		phx				phx
.17b8	20 e7 14	jsr $14e7			jsr 	EXPEvalInteger8 				; characters start
.17bb	f0 12		beq $17cf			beq 	_EUSError 						; 1 is left
.17bd	3a		dec a				dec 	a 								; zero based.
.17be	48		pha				pha
.17bf	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.17c1	c9 99		cmp #$99			cmp 	#PR_COMMA
.17c3	f0 04		beq $17c9			beq 	_EUMLength 						; if so m is provided
.17c5	a9 ff		lda #$ff			lda 	#255 							; default m
.17c7	80 14		bra $17dd			bra 	EXPSubstringCommon
.17c9					_EUMLength:
.17c9	c8		iny				iny 									; consume comma
.17ca	20 e7 14	jsr $14e7			jsr 	EXPEvalInteger8 				; characters to do
.17cd	80 0e		bra $17dd			bra 	EXPSubstringCommon
.17cf					_EUSError:
.17cf	4c 04 22	jmp $2204		jmp	ErrorV_value
.17d2					EXPCommonStart:
.17d2	20 f3 14	jsr $14f3			jsr 	EXPEvalString
.17d5	20 39 23	jsr $2339			jsr 	ERRCheckComma
.17d8	a5 0c		lda $0c				lda 	IFR0+IM0
.17da	a6 0d		ldx $0d				ldx 	IFR0+IM1
.17dc	60		rts				rts
.17dd					EXPSubstringCommon:
.17dd	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.17df	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; check right bracket.
.17e2	68		pla				pla 									; start position
.17e3	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.17e5	fa		plx				plx 									; get string address to zTemp2.
.17e6	86 23		stx $23				stx 	zTemp2+1
.17e8	68		pla				pla
.17e9	85 22		sta $22				sta 	zTemp2
.17eb	38		sec				sec 									; length - start is the max count of chars
.17ec	b2 22		lda ($22)			lda 	(zTemp2)
.17ee	e5 21		sbc $21				sbc 	zTemp1+1
.17f0	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.17f2	b0 02		bcs $17f6			bcs 	_EXPSSNoTrim
.17f4	85 20		sta $20				sta 	zTemp1 							; update count with available
.17f6					_EXPSSNoTrim:
.17f6	a5 20		lda $20				lda 	zTemp1 							; chars required.
.17f8	20 27 24	jsr $2427			jsr 	StringTempAllocate 				; allocate memory for it.
.17fb	a5 20		lda $20				lda 	zTemp1 							; zero length string
.17fd	f0 15		beq $1814			beq 	_EXPSSExit
.17ff	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.1801	d2 22		cmp ($22)			cmp 	(zTemp2)
.1803	b0 0f		bcs $1814			bcs 	_EXPSSExit
.1805	5a		phy				phy
.1806	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.1808	c8		iny				iny 									; +1 for the length byte
.1809					_EXPSSCopy:
.1809	b1 22		lda ($22),y			lda 	(zTemp2),y
.180b	20 5c 24	jsr $245c			jsr 	StringTempWrite
.180e	c8		iny				iny
.180f	c6 20		dec $20				dec 	zTemp1
.1811	d0 f6		bne $1809			bne 	_EXPSSCopy
.1813	7a		ply				ply
.1814					_EXPSSExit:
.1814	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1815					EXPUnaryVal:
.1815	20 f3 14	jsr $14f3			jsr 	EXPEvalString 					; string to R0, zTemp0
.1818	20 31 23	jsr $2331			jsr 	ERRCheckRParen 					; )
.181b	5a		phy				phy
.181c	18		clc				clc
.181d	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.181f	69 01		adc #$01			adc 	#1
.1821	aa		tax				tax
.1822	a5 1f		lda $1f				lda 	zTemp0+1
.1824	69 00		adc #$00			adc 	#0
.1826	a8		tay				tay
.1827	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.1829	20 96 2a	jsr $2a96			jsr 	IFloatStringToFloatR0 			; do conversion
.182c	b0 02		bcs $1830			bcs 	_EUVError
.182e	7a		ply				ply
.182f	60		rts				rts
.1830					_EUVError:
.1830	4c 04 22	jmp $2204		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1833					BinaryPrecedence:
>1833	02					.byte	 2	; $ef =
>1834	02					.byte	 2	; $f0 <>
>1835	02					.byte	 2	; $f1 <=
>1836	02					.byte	 2	; $f2 <
>1837	02					.byte	 2	; $f3 >=
>1838	02					.byte	 2	; $f4 >
>1839	01					.byte	 1	; $f5 XOR
>183a	01					.byte	 1	; $f6 OR
>183b	01					.byte	 1	; $f7 AND
>183c	04					.byte	 4	; $f8 DIV
>183d	04					.byte	 4	; $f9 MOD
>183e	04					.byte	 4	; $fa <<
>183f	04					.byte	 4	; $fb >>
>1840	04					.byte	 4	; $fc /
>1841	04					.byte	 4	; $fd *
>1842	03					.byte	 3	; $fe -
>1843	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1844					StructureOffsets:
>1844	01					.byte	1  	; $80 REPEAT
>1845	ff					.byte	255	; $81 UNTIL
>1846	01					.byte	1  	; $82 WHILE
>1847	ff					.byte	255	; $83 WEND
>1848	01					.byte	1  	; $84 IF
>1849	ff					.byte	255	; $85 ENDIF
>184a	01					.byte	1  	; $86 DO
>184b	ff					.byte	255	; $87 LOOP
>184c	01					.byte	1  	; $88 PROC
>184d	ff					.byte	255	; $89 ENDPROC
>184e	01					.byte	1  	; $8a FOR
>184f	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1850					StandardTokens:
>1850	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1857	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>185d	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1863	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1868	02 49 46				.byte	$02,$49,$46                             	; $84 if
>186b	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1871	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1874	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1879	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>187e	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1886	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>188a	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>188f	00					.byte	$00                                     	; $8c [[end]]
>1890	00					.byte	$00                                     	; $8d [[shift]]
>1891	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1896	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>189b	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>189e	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>18a3	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>18a7	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>18ad	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>18b3	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>18b8	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>18bc	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>18c0	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>18c5	01 2c					.byte	$01,$2c                                 	; $99 ,
>18c7	01 3b					.byte	$01,$3b                                 	; $9a ;
>18c9	01 3a					.byte	$01,$3a                                 	; $9b :
>18cb	01 27					.byte	$01,$27                                 	; $9c '
>18cd	01 29					.byte	$01,$29                                 	; $9d )
>18cf	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>18d3	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>18d9	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>18dd	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>18e1	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>18e6	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>18ea	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>18f1	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>18f6	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>18fb	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1900	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1905	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>190a	00					.byte	0											; $aa
>190b	00					.byte	0											; $ab
>190c	00					.byte	0											; $ac
>190d	00					.byte	0											; $ad
>190e	00					.byte	0											; $ae
>190f	00					.byte	0											; $af
>1910	00					.byte	0											; $b0
>1911	00					.byte	0											; $b1
>1912	00					.byte	0											; $b2
>1913	00					.byte	0											; $b3
>1914	00					.byte	0											; $b4
>1915	00					.byte	0											; $b5
>1916	00					.byte	0											; $b6
>1917	00					.byte	0											; $b7
>1918	00					.byte	0											; $b8
>1919	00					.byte	0											; $b9
>191a	00					.byte	0											; $ba
>191b	00					.byte	0											; $bb
>191c	00					.byte	0											; $bc
>191d	00					.byte	0											; $bd
>191e	00					.byte	0											; $be
>191f	00					.byte	0											; $bf
>1920	00					.byte	0											; $c0
>1921	00					.byte	0											; $c1
>1922	00					.byte	0											; $c2
>1923	00					.byte	0											; $c3
>1924	00					.byte	0											; $c4
>1925	00					.byte	0											; $c5
>1926	00					.byte	0											; $c6
>1927	00					.byte	0											; $c7
>1928	00					.byte	0											; $c8
>1929	00					.byte	0											; $c9
>192a	00					.byte	0											; $ca
>192b	00					.byte	0											; $cb
>192c	00					.byte	0											; $cc
>192d	00					.byte	0											; $cd
>192e	00					.byte	0											; $ce
>192f	00					.byte	0											; $cf
>1930	00					.byte	0											; $d0
>1931	00					.byte	0											; $d1
>1932	00					.byte	0											; $d2
>1933	00					.byte	0											; $d3
>1934	00					.byte	0											; $d4
>1935	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>193b	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1941	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1949	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1950	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1956	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>195c	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1961	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1966	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>196b	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1970	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1975	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>197b	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1980	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1988	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>198f	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1994	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1999	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>199f	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>19a4	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>19aa	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>19af	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>19b5	01 28					.byte	$01,$28                                 	; $eb (
>19b7	01 24					.byte	$01,$24                                 	; $ec $
>19b9	00					.byte	$00                                     	; $ed [[decimal]]
>19ba	00					.byte	$00                                     	; $ee [[string]]
>19bb	01 3d					.byte	$01,$3d                                 	; $ef =
>19bd	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>19c0	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>19c3	01 3c					.byte	$01,$3c                                 	; $f2 <
>19c5	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>19c8	01 3e					.byte	$01,$3e                                 	; $f4 >
>19ca	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>19ce	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>19d1	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>19d5	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>19d9	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>19dd	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>19e0	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>19e3	01 2f					.byte	$01,$2f                                 	; $fc /
>19e5	01 2a					.byte	$01,$2a                                 	; $fd *
>19e7	01 2d					.byte	$01,$2d                                 	; $fe -
>19e9	01 2b					.byte	$01,$2b                                 	; $ff +
>19eb	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.19ec					VectorTable:
>19ec	40 21					.word	Command_REPEAT           ; $80 REPEAT
>19ee	49 21					.word	Command_UNTIL            ; $81 UNTIL
>19f0	b9 21					.word	Command_WHILE            ; $82 WHILE
>19f2	d8 21					.word	Command_WEND             ; $83 WEND
>19f4	18 21					.word	IfCommand                ; $84 IF
>19f6	3f 21					.word	EndIf                    ; $85 ENDIF
>19f8	b5 1f					.word	Command_DO               ; $86 DO
>19fa	cd 1f					.word	Command_LOOP             ; $87 LOOP
>19fc	09 13					.word	NoExec08                 ; $88 PROC
>19fe	10 2d					.word	NotImplemented           ; $89 ENDPROC
>1a00	d6 1f					.word	Command_FOR              ; $8a FOR
>1a02	63 20					.word	Command_NEXT             ; $8b NEXT
>1a04	ad 12					.word	RUNEndOfLine             ; $8c [[END]]
>1a06	eb 12					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1a08	38 21					.word	ElseCode                 ; $8e ELSE
>1a0a	09 13					.word	NoExec01                 ; $8f THEN
>1a0c	09 13					.word	NoExec02                 ; $90 TO
>1a0e	09 13					.word	NoExec03                 ; $91 STEP
>1a10	13 12					.word	CommandLET               ; $92 LET
>1a12	ae 11					.word	Command_Print            ; $93 PRINT
>1a14	10 2d					.word	NotImplemented           ; $94 INPUT
>1a16	10 2d					.word	NotImplemented           ; $95 CALL
>1a18	f4 12					.word	Command_Sys              ; $96 SYS
>1a1a	94 12					.word	Command_REM              ; $97 REM
>1a1c	be 1f					.word	Command_EXIT             ; $98 EXIT
>1a1e	09 13					.word	NoExec04                 ; $99 ,
>1a20	09 13					.word	NoExec05                 ; $9a ;
>1a22	09 13					.word	NoExec06                 ; $9b :
>1a24	94 12					.word	Command_REM2             ; $9c '
>1a26	09 13					.word	NoExec07                 ; $9d )
>1a28	68 10					.word	CommandDIM               ; $9e DIM
>1a2a	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1a2c	8b 12					.word	Command_NEW              ; $a0 NEW
>1a2e	a1 12					.word	Command_RUN              ; $a1 RUN
>1a30	f1 12					.word	Command_STOP             ; $a2 STOP
>1a32	ee 12					.word	Command_END              ; $a3 END
>1a34	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1a36	10 2d					.word	NotImplemented           ; $a5 LIST
>1a38	10 2d					.word	NotImplemented           ; $a6 SAVE
>1a3a	10 2d					.word	NotImplemented           ; $a7 LOAD
>1a3c	87 11					.word	Command_Poke             ; $a8 POKE
>1a3e	84 11					.word	Command_Doke             ; $a9 DOKE
>1a40	10 2d					.word	NotImplemented           ; $aa
>1a42	10 2d					.word	NotImplemented           ; $ab
>1a44	10 2d					.word	NotImplemented           ; $ac
>1a46	10 2d					.word	NotImplemented           ; $ad
>1a48	10 2d					.word	NotImplemented           ; $ae
>1a4a	10 2d					.word	NotImplemented           ; $af
>1a4c	10 2d					.word	NotImplemented           ; $b0
>1a4e	10 2d					.word	NotImplemented           ; $b1
>1a50	10 2d					.word	NotImplemented           ; $b2
>1a52	10 2d					.word	NotImplemented           ; $b3
>1a54	10 2d					.word	NotImplemented           ; $b4
>1a56	10 2d					.word	NotImplemented           ; $b5
>1a58	10 2d					.word	NotImplemented           ; $b6
>1a5a	10 2d					.word	NotImplemented           ; $b7
>1a5c	10 2d					.word	NotImplemented           ; $b8
>1a5e	10 2d					.word	NotImplemented           ; $b9
>1a60	10 2d					.word	NotImplemented           ; $ba
>1a62	10 2d					.word	NotImplemented           ; $bb
>1a64	10 2d					.word	NotImplemented           ; $bc
>1a66	10 2d					.word	NotImplemented           ; $bd
>1a68	10 2d					.word	NotImplemented           ; $be
>1a6a	10 2d					.word	NotImplemented           ; $bf
>1a6c	10 2d					.word	NotImplemented           ; $c0
>1a6e	10 2d					.word	NotImplemented           ; $c1
>1a70	10 2d					.word	NotImplemented           ; $c2
>1a72	10 2d					.word	NotImplemented           ; $c3
>1a74	10 2d					.word	NotImplemented           ; $c4
>1a76	10 2d					.word	NotImplemented           ; $c5
>1a78	10 2d					.word	NotImplemented           ; $c6
>1a7a	10 2d					.word	NotImplemented           ; $c7
>1a7c	10 2d					.word	NotImplemented           ; $c8
>1a7e	10 2d					.word	NotImplemented           ; $c9
>1a80	10 2d					.word	NotImplemented           ; $ca
>1a82	10 2d					.word	NotImplemented           ; $cb
>1a84	10 2d					.word	NotImplemented           ; $cc
>1a86	10 2d					.word	NotImplemented           ; $cd
>1a88	10 2d					.word	NotImplemented           ; $ce
>1a8a	10 2d					.word	NotImplemented           ; $cf
>1a8c	10 2d					.word	NotImplemented           ; $d0
>1a8e	10 2d					.word	NotImplemented           ; $d1
>1a90	10 2d					.word	NotImplemented           ; $d2
>1a92	10 2d					.word	NotImplemented           ; $d3
>1a94	10 2d					.word	NotImplemented           ; $d4
>1a96	6c 16					.word	EXPUnaryDeek             ; $d5 DEEK(
>1a98	5e 16					.word	EXPUnaryPeek             ; $d6 PEEK(
>1a9a	99 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1a9c	8c 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1a9e	b3 17					.word	EXPUnaryMid              ; $d9 MID$(
>1aa0	4a 17					.word	EXPUnaryStr              ; $da STR$(
>1aa2	15 18					.word	EXPUnaryVal              ; $db VAL(
>1aa4	17 17					.word	EXPUnarySgn              ; $dc SGN(
>1aa6	dc 15					.word	EXPUnaryAbs              ; $dd ABS(
>1aa8	9c 16					.word	EXPUnaryLen              ; $de LEN(
>1aaa	2d 17					.word	EXPUnarySqr              ; $df SQR(
>1aac	fc 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1aae	e6 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1ab0	10 2d					.word	NotImplemented           ; $e2 INKEY$(
>1ab2	10 2d					.word	NotImplemented           ; $e3 EVENT(
>1ab4	10 2d					.word	NotImplemented           ; $e4 TIME
>1ab6	92 16					.word	EXPUnaryInt              ; $e5 INT(
>1ab8	88 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1aba	0d 16					.word	EXPUnaryDec              ; $e7 DEC(
>1abc	3c 17					.word	EXPUnaryHex              ; $e8 HEX$(
>1abe	b1 16					.word	EXPUnaryRnd              ; $e9 RND(
>1ac0	c1 16					.word	ExpUnaryRand             ; $ea RAND(
>1ac2	aa 16					.word	EXPUnaryParenthesis      ; $eb (
>1ac4	84 16					.word	EXPUnaryNull             ; $ec $
>1ac6	5b 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1ac8	71 17					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1aca	c6 13					.word	EXPCompareEqual          ; $ef =
>1acc	e1 13					.word	EXPCompareNotEqual       ; $f0 <>
>1ace	ea 13					.word	EXPCompareLessEqual      ; $f1 <=
>1ad0	cf 13					.word	EXPCompareLess           ; $f2 <
>1ad2	f3 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1ad4	d8 13					.word	EXPCompareGreater        ; $f4 >
>1ad6	73 13					.word	EXPBinXor                ; $f5 XOR
>1ad8	67 13					.word	EXPBinOr                 ; $f6 OR
>1ada	5b 13					.word	EXPBinAnd                ; $f7 AND
>1adc	33 13					.word	EXPBinIDiv               ; $f8 DIV
>1ade	44 13					.word	EXPBinIMod               ; $f9 MOD
>1ae0	3e 14					.word	EXPBinLeft               ; $fa <<
>1ae2	46 14					.word	EXPBinRight              ; $fb >>
>1ae4	27 13					.word	EXPBinFDiv               ; $fc /
>1ae6	1e 13					.word	EXPBinMul                ; $fd *
>1ae8	15 13					.word	EXPBinSub                ; $fe -
>1aea	0c 13					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1aec					TOKDetokenise:
.1aec	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1aee	84 23		sty $23				sty 	zTemp2+1
.1af0	9c 0d 04	stz $040d			stz		TOKLastCharacter 			; clear last character
.1af3					_TOKDLoop:
.1af3	20 22 1b	jsr $1b22			jsr 	TOKDGet 					; get next
.1af6	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1af8	f0 26		beq $1b20			beq 	_TOKDExit
.1afa	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1afc	f0 1d		beq $1b1b			beq 	_TOKDDataItem
.1afe	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1b00	f0 19		beq $1b1b			beq 	_TOKDDataItem
.1b02	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1b04	10 05		bpl $1b0b			bpl 	_TOKDNotToken
.1b06	20 ea 1b	jsr $1bea			jsr 	TOKDToken 					; token to text.
.1b09	80 e8		bra $1af3			bra 	_TOKDLoop
.1b0b					_TOKDNotToken:
.1b0b	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1b0d	90 05		bcc $1b14			bcc 	_TOKDNotIdentifier
.1b0f	20 5d 1b	jsr $1b5d			jsr 	TOKDIdentifier
.1b12	80 df		bra $1af3			bra 	_TOKDLoop
.1b14					_TOKDNotIdentifier:
.1b14	a0 0a		ldy #$0a			ldy 	#10
.1b16	20 a6 1b	jsr $1ba6			jsr 	TOKDInteger
.1b19	80 d8		bra $1af3			bra 	_TOKDLoop
.1b1b					_TOKDDataItem:
.1b1b	20 38 1b	jsr $1b38			jsr 	TOKDDataItem
.1b1e	80 d3		bra $1af3			bra 	_TOKDLoop
.1b20					_TOKDExit:
.1b20	18		clc				clc
.1b21	60		rts				rts
.1b22	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1b24	e6 22		inc $22				inc 	zTemp2
.1b26	d0 02		bne $1b2a			bne 	_TKDGExit
.1b28	e6 23		inc $23				inc 	zTemp2+1
.1b2a					_TKDGExit:
.1b2a	60		rts				rts
.1b2b					TOKDOutput:
.1b2b	8d 0d 04	sta $040d			sta 	TOKLastCharacter
.1b2e	6c 0b 04	jmp ($040b)			jmp 	(TOKOutputMethod)
.1b31					TOKSetDetokeniseOutput:
.1b31	8e 0b 04	stx $040b			stx 	TOKOutputMethod
.1b34	8c 0c 04	sty $040c			sty 	TOKOutputMethod+1
.1b37	60		rts				rts
.040b					TOKOutputMethod:
>040b							.fill 	2
.040d					TOKLastCharacter:
>040d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1b38					TOKDDataItem:
.1b38	a8		tay				tay 								; type in Y
.1b39	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1b3b	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1b3d	f0 02		beq $1b41			beq 	_TOKDDIsString
.1b3f	a9 2e		lda #$2e			lda 	#'.'
.1b41					_TOKDDIsString:
.1b41	20 2b 1b	jsr $1b2b			jsr 	TOKDOutput 					; dump it
.1b44	20 22 1b	jsr $1b22			jsr 	TOKDGet 					; get length into X
.1b47	aa		tax				tax
.1b48					_TOKDDOutput:
.1b48	ca		dex				dex 								; are we complete
.1b49	30 08		bmi $1b53			bmi 	_TOKDDEnd
.1b4b	20 22 1b	jsr $1b22			jsr 	TOKDGet 					; get character and output it
.1b4e	20 2b 1b	jsr $1b2b			jsr 	TOKDOutput
.1b51	80 f5		bra $1b48			bra 	_TOKDDOutput
.1b53					_TOKDDEnd:
.1b53	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1b55	d0 05		bne $1b5c			bne 	_TOKDDNotString
.1b57	a9 22		lda #$22			lda 	#'"'
.1b59	20 2b 1b	jsr $1b2b			jsr 	TOKDOutput
.1b5c					_TOKDDNotString:
.1b5c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1b5d					TOKDIdentifier:
.1b5d	a0 ff		ldy #$ff			ldy 	#$FF
.1b5f	8c 0e 04	sty $040e			sty 	TOKDIFirstChar
.1b62					_TOKDLoop:
.1b62	a8		tay				tay 								; token in Y
.1b63	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1b65	c0 64		cpy #$64			cpy 	#$64
.1b67	f0 11		beq $1b7a			beq 	_TOKDIOutput
.1b69	a9 5f		lda #$5f			lda 	#'_'
.1b6b	c0 65		cpy #$65			cpy 	#$65
.1b6d	f0 0b		beq $1b7a			beq 	_TOKDIOutput
.1b6f	98		tya				tya 								; handle a-z
.1b70	18		clc				clc
.1b71	69 21		adc #$21			adc	 	#$21
.1b73	c0 5a		cpy #$5a			cpy 	#$5A
.1b75	90 03		bcc $1b7a			bcc 	_TOKDIOutput
.1b77	38		sec				sec 								; handle 0-9
.1b78	e9 4b		sbc #$4b			sbc 	#$4B
.1b7a					_TOKDIOutput:
.1b7a	2c 0e 04	bit $040e			bit 	TOKDIFirstChar
.1b7d	10 08		bpl $1b87			bpl 	_TOKDINoSpacing
.1b7f	48		pha				pha
.1b80	20 1c 1c	jsr $1c1c			jsr 	TOKDSpacing
.1b83	9c 0e 04	stz $040e			stz 	TOKDIFirstChar
.1b86	68		pla				pla
.1b87					_TOKDINoSpacing:
.1b87	20 2b 1b	jsr $1b2b			jsr 	TOKDOutput
.1b8a	20 22 1b	jsr $1b22			jsr 	TOKDGet 					; get next token
.1b8d	c9 7c		cmp #$7c			cmp 	#$7C
.1b8f	90 d1		bcc $1b62			bcc 	_TOKDLoop
.1b91	f0 12		beq $1ba5			beq 	_TOKDIExit 					; it's a number, no tail.
.1b93	4a		lsr a				lsr 	a 							; string ?
.1b94	90 07		bcc $1b9d			bcc 	_TOKDICheckArray
.1b96	48		pha				pha
.1b97	a9 24		lda #$24			lda 	#"$"
.1b99	20 2b 1b	jsr $1b2b			jsr 	TOKDOutput
.1b9c	68		pla				pla
.1b9d					_TOKDICheckArray:
.1b9d	4a		lsr a				lsr 	a 							; array ?
.1b9e	90 05		bcc $1ba5			bcc 	_TOKDIExit
.1ba0	a9 28		lda #$28			lda 	#"("
.1ba2	20 2b 1b	jsr $1b2b			jsr 	TOKDOutput
.1ba5					_TOKDIExit:
.1ba5	60		rts				rts
.040e					TOKDIFirstChar:
>040e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1ba6					TOKDInteger:
.1ba6	5a		phy				phy 								; save base
.1ba7	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1ba9	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.1bac					_TOKDILoop:
.1bac	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1bae	c9 40		cmp #$40			cmp 	#$40
.1bb0	b0 1d		bcs $1bcf			bcs 	_TOKDIHaveInteger
.1bb2	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1bb4	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1bb7	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1bba	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1bbd	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1bc0	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1bc3	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1bc6	20 22 1b	jsr $1b22			jsr 	TOKDGet 					; OR byte in.
.1bc9	05 0c		ora $0c				ora 	IFR0+IM0
.1bcb	85 0c		sta $0c				sta 	IFR0+IM0
.1bcd	80 dd		bra $1bac			bra 	_TOKDILoop
.1bcf					_TOKDIHaveInteger:
.1bcf	7a		ply				ply 								; restore base
.1bd0	98		tya				tya 								; base in A
.1bd1	20 d3 29	jsr $29d3			jsr 	IFloatIntegerToStringR0
.1bd4	86 1e		stx $1e				stx 	zTemp0
.1bd6	84 1f		sty $1f				sty 	zTemp0+1
.1bd8	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bda	20 1c 1c	jsr $1c1c			jsr 	TOKDSpacing 				; check spacing okay.
.1bdd	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1bdf					_TOKDOutput:
.1bdf	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1be1	20 2b 1b	jsr $1b2b			jsr 	TOKDOutput
.1be4	c8		iny				iny
.1be5	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1be7	d0 f6		bne $1bdf			bne 	_TOKDOutput
.1be9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1bea					TOKDToken:
.1bea	a2 50		ldx #$50			ldx 	#StandardTokens & $FF
.1bec	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1bee					_TOKDSearch:
.1bee	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1bf0	84 1f		sty $1f				sty 	zTemp0+1
.1bf2	aa		tax				tax 								; token ID in X.
.1bf3					_TOKDFind:
.1bf3	ca		dex				dex 								; reached the start
.1bf4	10 0d		bpl $1c03			bpl 	_TOKDFound
.1bf6	38		sec				sec 								; go to next entry
.1bf7	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bf9	65 1e		adc $1e				adc 	zTemp0
.1bfb	85 1e		sta $1e				sta 	zTemp0
.1bfd	90 f4		bcc $1bf3			bcc 	_TOKDFind
.1bff	e6 1f		inc $1f				inc 	zTemp0+1
.1c01	80 f0		bra $1bf3			bra 	_TOKDFind
.1c03					_TOKDFound:
.1c03	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1c05	f0 14		beq $1c1b			beq 	_TOKDExit
.1c07	aa		tax				tax
.1c08	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1c0a	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1c0c	20 1c 1c	jsr $1c1c			jsr 	TOKDSpacing
.1c0f					_TOKDOutput:
.1c0f	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1c11	20 70 1f	jsr $1f70			jsr 	TOKToLower
.1c14	20 2b 1b	jsr $1b2b			jsr 	TOKDOutput
.1c17	c8		iny				iny
.1c18	ca		dex				dex
.1c19	d0 f4		bne $1c0f			bne 	_TOKDOutput
.1c1b					_TOKDExit:
.1c1b	60		rts				rts
.1c1c					TOKDSpacing:
.1c1c	20 87 1f	jsr $1f87			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1c1f	90 0d		bcc $1c2e			bcc 	_TOKDSExit
.1c21	ad 0d 04	lda $040d			lda 	TOKLastCharacter			; and last character also alphanumeric
.1c24	20 87 1f	jsr $1f87			jsr 	TOKIsIdentifierElement
.1c27	90 05		bcc $1c2e			bcc 	_TOKDSExit
.1c29	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1c2b	20 2b 1b	jsr $1b2b			jsr 	TOKDOutput
.1c2e					_TOKDSExit:
.1c2e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1c2f					PGMDeleteLine:
.1c2f	20 e2 1c	jsr $1ce2			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c32	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c34	ad 0f 04	lda $040f			lda 	PGMBaseHigh
.1c37	85 21		sta $21				sta 	zTemp1+1
.1c39					_PGMDLoop:
.1c39	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1c3b	38		sec				sec
.1c3c	f0 3a		beq $1c78			beq 	_PGMDExit
.1c3e	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1c40	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c42	cd 01 03	cmp $0301			cmp 	TOKLineNumber
.1c45	d0 08		bne $1c4f			bne 	_PGMDNext
.1c47	c8		iny				iny
.1c48	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c4a	cd 02 03	cmp $0302			cmp 	TOKLineNumber+1
.1c4d	f0 0d		beq $1c5c			beq 	_PGMDDelete
.1c4f					_PGMDNext:
.1c4f	18		clc				clc
.1c50	b2 20		lda ($20)			lda 	(zTemp1)
.1c52	65 20		adc $20				adc 	zTemp1
.1c54	85 20		sta $20				sta 	zTemp1
.1c56	90 e1		bcc $1c39			bcc 	_PGMDLoop
.1c58	e6 21		inc $21				inc 	zTemp1+1
.1c5a	80 dd		bra $1c39			bra 	_PGMDLoop
.1c5c					_PGMDDelete:
.1c5c	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1c5e	a8		tay				tay
.1c5f					_PGMDCopy:
.1c5f	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1c61	92 20		sta ($20)			sta 	(zTemp1)
.1c63	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1c65	c5 1e		cmp $1e				cmp 	zTemp0
.1c67	d0 07		bne $1c70			bne 	_PGMDNext2
.1c69	a5 21		lda $21				lda 	zTemp1+1
.1c6b	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c6d	18		clc				clc
.1c6e	f0 08		beq $1c78			beq 	_PGMDExit
.1c70					_PGMDNext2:
.1c70	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1c72	d0 eb		bne $1c5f			bne 	_PGMDCopy
.1c74	e6 21		inc $21				inc 	zTemp1+1
.1c76	80 e7		bra $1c5f			bra 	_PGMDCopy
.1c78					_PGMDExit:
.1c78	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1c79					PGMInsertLine:
.1c79	20 e2 1c	jsr $1ce2			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c7c	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c7e	ad 0f 04	lda $040f			lda 	PGMBaseHigh
.1c81	85 21		sta $21				sta 	zTemp1+1
.1c83					_PGMILoop:
.1c83	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c85	f0 1c		beq $1ca3			beq 	_PGMIInsert
.1c87	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c89	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c8b	cd 01 03	cmp $0301			cmp 	TOKLineNumber
.1c8e	c8		iny				iny
.1c8f	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c91	ed 02 03	sbc $0302			sbc 	TOKLineNumber+1
.1c94	b0 0d		bcs $1ca3			bcs 	_PGMIInsert 				; insert here.
.1c96	18		clc				clc
.1c97	b2 20		lda ($20)			lda 	(zTemp1)
.1c99	65 20		adc $20				adc 	zTemp1
.1c9b	85 20		sta $20				sta 	zTemp1
.1c9d	90 e4		bcc $1c83			bcc 	_PGMILoop
.1c9f	e6 21		inc $21				inc 	zTemp1+1
.1ca1	80 e0		bra $1c83			bra 	_PGMILoop
.1ca3					_PGMIInsert:
.1ca3	ac 00 03	ldy $0300			ldy 	TOKLineSize 				; space required
.1ca6					_PGMIInsertLoop:
.1ca6	b2 1e		lda ($1e)			lda 	(zTemp0)
.1ca8	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1caa	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1cac	c5 1e		cmp $1e				cmp 	zTemp0
.1cae	d0 06		bne $1cb6			bne 	_PGMINext
.1cb0	a5 21		lda $21				lda 	zTemp1+1
.1cb2	c5 1f		cmp $1f				cmp 	zTemp0+1
.1cb4	f0 0a		beq $1cc0			beq 	_PGMIInserted
.1cb6					_PGMINext:
.1cb6	a5 1e		lda $1e				lda 	zTemp0
.1cb8	d0 02		bne $1cbc			bne 	_PGMINoBorrow
.1cba	c6 1f		dec $1f				dec 	zTemp0+1
.1cbc					_PGMINoBorrow:
.1cbc	c6 1e		dec $1e				dec 	zTemp0
.1cbe	80 e6		bra $1ca6			bra 	_PGMIInsertLoop
.1cc0					_PGMIInserted:
.1cc0	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1cc2					_PGMICopyLoop:
.1cc2	b9 00 03	lda $0300,y			lda 	TOKLineSize,y
.1cc5	91 20		sta ($20),y			sta 	(zTemp1),y
.1cc7	c8		iny				iny
.1cc8	cc 00 03	cpy $0300			cpy 	TOKLineSize
.1ccb	d0 f5		bne $1cc2			bne 	_PGMICopyLoop
.1ccd	18		clc				clc
.1cce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1ccf					PGMSetBaseAddress:
.1ccf	8e 0f 04	stx $040f			stx 	PGMBaseHigh
.1cd2	8c 10 04	sty $0410			sty 	PGMEndMemoryHigh
.1cd5	60		rts				rts
.1cd6					PGMNewProgram:
.1cd6	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1cd8	ad 0f 04	lda $040f			lda 	PGMBaseHigh
.1cdb	85 1f		sta $1f				sta 	zTemp0+1
.1cdd	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1cdf	92 1e		sta ($1e)			sta 	(zTemp0)
.1ce1	60		rts				rts
.1ce2					PGMEndProgram:
.1ce2	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1ce4	ad 0f 04	lda $040f			lda 	PGMBaseHigh
.1ce7	85 1f		sta $1f				sta 	zTemp0+1
.1ce9					_PGMEPLoop:
.1ce9	b2 1e		lda ($1e)			lda 	(zTemp0)
.1ceb	f0 0b		beq $1cf8			beq 	_PGMEPExit
.1ced	18		clc				clc
.1cee	65 1e		adc $1e				adc 	zTemp0
.1cf0	85 1e		sta $1e				sta 	zTemp0
.1cf2	90 f5		bcc $1ce9			bcc 	_PGMEPLoop
.1cf4	e6 1f		inc $1f				inc 	zTemp0+1
.1cf6	80 f1		bra $1ce9			bra 	_PGMEPLoop
.1cf8					_PGMEPExit:
.1cf8	60		rts				rts
.040f					PGMBaseHigh:
>040f							.fill 	1
.0410					PGMEndMemoryHigh:
>0410							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1cf9					TOKResetElement:
.1cf9	9c 11 04	stz $0411			stz 	TOKElement
.1cfc	60		rts				rts
.1cfd					TOKWriteElement:
.1cfd	da		phx				phx
.1cfe	ae 11 04	ldx $0411			ldx 	TOKElement
.1d01	9d 12 04	sta $0412,x			sta 	TOKElementText,x
.1d04	9e 13 04	stz $0413,x			stz 	TOKElementText+1,x
.1d07	fa		plx				plx
.1d08	ee 11 04	inc $0411			inc 	TOKElement
.1d0b	60		rts				rts
.0411					TOKElement:
>0411							.fill 	1
.0412					TOKElementText:
>0412							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1d0c					TOKTokeniseConstant:
.1d0c	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1d0e	48		pha				pha 								; save on stack
.1d0f	29 c0		and #$c0			and 	#$C0
.1d11	05 0d		ora $0d				ora 	IFR0+IM1
.1d13	05 0e		ora $0e				ora 	IFR0+IM2
.1d15	f0 10		beq $1d27			beq 	_TTCLess
.1d17	da		phx				phx
.1d18	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1d1a					_TTCShiftRight:
.1d1a	46 0e		lsr $0e				lsr 	IFR0+IM2
.1d1c	66 0d		ror $0d				ror 	IFR0+IM1
.1d1e	66 0c		ror $0c				ror 	IFR0+IM0
.1d20	ca		dex				dex
.1d21	d0 f7		bne $1d1a			bne 	_TTCShiftRight
.1d23	fa		plx				plx
.1d24	20 0c 1d	jsr $1d0c			jsr 	TOKTokeniseConstant
.1d27					_TTCLess:
.1d27	68		pla				pla
.1d28	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1d2a	20 c3 1d	jsr $1dc3			jsr 	TOKWriteA
.1d2d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1d2e					TOKTokeniseDecimals:
.1d2e	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext 					; consume the .
.1d31	20 fd 1e	jsr $1efd			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1d34	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1d36	20 c3 1d	jsr $1dc3			jsr 	TOKWriteA
.1d39	20 3e 1d	jsr $1d3e			jsr 	TOKOutputElementBuffer 		; then the buffer
.1d3c	18		clc				clc
.1d3d	60		rts				rts
.1d3e					TOKOutputElementBuffer:
.1d3e	ad 11 04	lda $0411			lda 	TOKElement 					; get count and write that
.1d41	20 c3 1d	jsr $1dc3			jsr 	TOKWriteA
.1d44	a8		tay				tay 								; put in Y
.1d45	f0 0c		beq $1d53			beq 	_TOEExit 					; exit if empty which is okay.
.1d47	a2 01		ldx #$01			ldx 	#1
.1d49					_TOELoop:
.1d49	bd 11 04	lda $0411,x			lda 	TOKElement,x
.1d4c	20 c3 1d	jsr $1dc3			jsr 	TOKWriteA
.1d4f	e8		inx				inx
.1d50	88		dey				dey
.1d51	d0 f6		bne $1d49			bne 	_TOELoop
.1d53					_TOEExit:
.1d53	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1d54					TOKTokenise:
.1d54	8c 12 05	sty $0512			sty 	TOKDataSource+1 			; save source routine pointer
.1d57	8e 11 05	stx $0511			stx 	TOKDataSource
.1d5a	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1d5c	8d 13 05	sta $0513			sta 	TOKIsFirstElement
.1d5f	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1d61	8d 00 03	sta $0300			sta 	TOKLineSize 				; line length itself and the line numbers.
.1d64					_TOKMainLoop:
.1d64	20 cf 1d	jsr $1dcf			jsr 	TOKGet 						; what follows.
.1d67	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1d69	f0 4f		beq $1dba			beq 	_TOKExit
.1d6b	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1d6d	d0 05		bne $1d74			bne 	_TOKElement
.1d6f	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext
.1d72	80 f0		bra $1d64			bra 	_TOKMainLoop
.1d74					_TOKElement:
.1d74	20 7b 1f	jsr $1f7b			jsr 	TOKIsDigit 					; is it 0..9
.1d77	90 0a		bcc $1d83			bcc 	_TOKNotDigit
.1d79	20 d4 1e	jsr $1ed4			jsr 	TOKTokeniseInteger 			; get integer
.1d7c	b0 43		bcs $1dc1			bcs 	_TOKFail 					; did it fail ?
.1d7e	9c 13 05	stz $0513			stz 	TOKIsFirstElement 			; clear first element flag
.1d81	80 e1		bra $1d64			bra 	_TOKMainLoop
.1d83					_TOKNotDigit:
.1d83	9c 13 05	stz $0513			stz 	TOKIsFirstElement 			; clear first element flag
.1d86	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d88	d0 07		bne $1d91			bne 	_TOKNotHex
.1d8a	20 1c 1e	jsr $1e1c			jsr 	TOKTokeniseHexadecimal
.1d8d	b0 32		bcs $1dc1			bcs 	_TOKFail
.1d8f	80 d3		bra $1d64			bra 	_TOKMainLoop
.1d91					_TOKNotHex:
.1d91	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1d93	d0 07		bne $1d9c			bne 	_TOKNotDecimal
.1d95	20 2e 1d	jsr $1d2e			jsr 	TOKTokeniseDecimals
.1d98	b0 27		bcs $1dc1			bcs 	_TOKFail
.1d9a	80 c8		bra $1d64			bra 	_TOKMainLoop
.1d9c					_TOKNotDecimal:
.1d9c	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1d9e	d0 07		bne $1da7			bne 	_TOKNotString
.1da0	20 42 1f	jsr $1f42			jsr 	TOKTokeniseString
.1da3	b0 1c		bcs $1dc1			bcs 	_TOKFail
.1da5	80 bd		bra $1d64			bra 	_TOKMainLoop
.1da7					_TOKNotString:
.1da7	20 98 1f	jsr $1f98			jsr 	TOKIsAlpha 					; identifier ?
.1daa	b0 07		bcs $1db3			bcs 	_TOKIdentifier
.1dac	20 11 1f	jsr $1f11			jsr 	TOKTokenisePunctuation 		; punctuation
.1daf	b0 10		bcs $1dc1			bcs 	_TOKFail
.1db1	80 b1		bra $1d64			bra 	_TOKMainLoop
.1db3					_TOKIdentifier:
.1db3	20 56 1e	jsr $1e56			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1db6	b0 09		bcs $1dc1			bcs 	_TOKFail
.1db8	80 aa		bra $1d64			bra 	_TOKMainLoop
.1dba					_TOKExit:
.1dba	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1dbc	20 c3 1d	jsr $1dc3			jsr 	TOKWriteA
.1dbf	18		clc				clc									; return with carry set.
.1dc0	60		rts				rts
.1dc1					_TOKFail:
.1dc1	38		sec				sec
.1dc2	60		rts				rts
.1dc3					TOKWriteA:
.1dc3	da		phx				phx
.1dc4	ae 00 03	ldx $0300			ldx 	TOKLineSize
.1dc7	9d 00 03	sta $0300,x			sta 	TOKLineSize,x
.1dca	fa		plx				plx
.1dcb	ee 00 03	inc $0300			inc 	TOKLineSize
.1dce	60		rts				rts
.1dcf					TOKGet:
.1dcf	18		clc				clc
.1dd0	6c 11 05	jmp ($0511)			jmp 	(TOKDataSource)
.1dd3					TOKGetNext:
.1dd3	38		sec				sec
.1dd4	6c 11 05	jmp ($0511)			jmp 	(TOKDataSource)
.0511					TOKDataSource:
>0511							.fill 	2
.0513					TOKIsFirstElement:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1dd7					TOKFindToken:
.1dd7	a2 50		ldx #$50			ldx 	#StandardTokens & $FF 		; do this table
.1dd9	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1ddb	20 e6 1d	jsr $1de6			jsr 	TOKFindTokenXY 				; find it, or not
.1dde	90 04		bcc $1de4			bcc 	_TOKFTFail
.1de0	a2 00		ldx #$00			ldx 	#0
.1de2	38		sec				sec
.1de3	60		rts				rts
.1de4					_TOKFTFail
.1de4	18		clc				clc
.1de5	60		rts				rts
.1de6					TOKFindTokenXY:
.1de6	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1de8	84 1f		sty $1f				sty 	zTemp0+1
.1dea	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1dec	8d 14 05	sta $0514			sta 	TOKCurrent
.1def					_TOKFindLoop:
.1def	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1df1	18		clc				clc 		 						; clear carry in case of fail
.1df2	30 17		bmi $1e0b			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1df4	cd 11 04	cmp $0411			cmp 	TOKElement 					; compare against the element length
.1df7	d0 13		bne $1e0c			bne 	_TOKNext 					; different, try next.
.1df9	aa		tax				tax 								; number of chars to compare.
.1dfa	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1dfc					_TOKCompare:
.1dfc	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1dfe	d9 11 04	cmp $0411,y			cmp 	TOKElementText-1,y
.1e01	d0 09		bne $1e0c			bne 	_TOKNext 					; different ? try next
.1e03	c8		iny				iny 								; compare next two
.1e04	ca		dex				dex
.1e05	d0 f5		bne $1dfc			bne 	_TOKCompare 				; until done X characters.
.1e07	38		sec				sec
.1e08	ad 14 05	lda $0514			lda 	TOKCurrent 					; return current ID.
.1e0b					_TOKExit:
.1e0b	60		rts				rts
.1e0c					_TOKNext:
.1e0c	ee 14 05	inc $0514			inc 	TOKCurrent 					; increment token #
.1e0f	38		sec				sec 								; add length+1 to ptr
.1e10	b2 1e		lda ($1e)			lda 	(zTemp0)
.1e12	65 1e		adc $1e				adc 	zTemp0
.1e14	85 1e		sta $1e				sta 	zTemp0
.1e16	90 d7		bcc $1def			bcc 	_TOKFindLoop
.1e18	e6 1f		inc $1f				inc 	zTemp0+1
.1e1a	80 d3		bra $1def			bra 	_TOKFindLoop
.0514					TOKCurrent:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1e1c					TOKTokeniseHexadecimal:
.1e1c	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext 					; consume the $
.1e1f	a2 0c		ldx #$0c			ldx 	#IFR0
.1e21	20 32 2c	jsr $2c32			jsr 	IFloatSetZero 				; set R0 = 0
.1e24					_TTHLoop:
.1e24	20 cf 1d	jsr $1dcf			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e27	20 a5 1f	jsr $1fa5			jsr 	TOKIsHexadecimal
.1e2a	90 20		bcc $1e4c			bcc 	_TTHDone
.1e2c	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1e2e	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1e31	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1e34	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1e37	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.1e3a	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext
.1e3d	38		sec				sec 								; convert to decimal.
.1e3e	e9 30		sbc #$30			sbc 	#48
.1e40	c9 0a		cmp #$0a			cmp 	#10
.1e42	90 02		bcc $1e46			bcc 	_TTHNotAlpha
.1e44	e9 07		sbc #$07			sbc 	#7
.1e46					_TTHNotAlpha:
.1e46	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1e48	85 0c		sta $0c				sta 	IFR0+IM0
.1e4a	80 d8		bra $1e24			bra 	_TTHLoop
.1e4c					_TTHDone:
.1e4c	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1e4e	20 c3 1d	jsr $1dc3			jsr 	TOKWriteA
.1e51	20 0c 1d	jsr $1d0c			jsr 	TOKTokeniseConstant 		; write integer out.
.1e54	18		clc				clc
.1e55	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1e56					TOKTokeniseIdentifier:
.1e56	20 f9 1c	jsr $1cf9			jsr 	TOKResetElement 			; extract an identifier
.1e59					_TOKGetIdentifier:
.1e59	20 cf 1d	jsr $1dcf			jsr 	TOKGet
.1e5c	20 65 1f	jsr $1f65			jsr 	TOKToUpper
.1e5f	20 87 1f	jsr $1f87			jsr 	TOKIsIdentifierElement
.1e62	90 08		bcc $1e6c			bcc 	_TOKEndIdent
.1e64	20 fd 1c	jsr $1cfd			jsr		TOKWriteElement
.1e67	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext
.1e6a	80 ed		bra $1e59			bra 	_TOKGetIdentifier
.1e6c					_TOKEndIdent:
.1e6c	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1e6e	d0 06		bne $1e76			bne 	_TOKNotString
.1e70	20 fd 1c	jsr $1cfd			jsr 	TOKWriteElement 			; add it
.1e73	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext 					; consume it
.1e76					_TOKNotString:
.1e76	20 cf 1d	jsr $1dcf			jsr 	TOKGet 						; finally check for (
.1e79	c9 28		cmp #$28			cmp 	#"("
.1e7b	d0 06		bne $1e83			bne 	_TOKNoArray
.1e7d	20 fd 1c	jsr $1cfd			jsr 	TOKWriteElement 			; add it
.1e80	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext 					; consume it
.1e83					_TOKNoArray:
.1e83	20 d7 1d	jsr $1dd7			jsr 	TOKFindToken 				; find it
.1e86	90 05		bcc $1e8d			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e88	20 c3 1d	jsr $1dc3			jsr 	TOKWriteA
.1e8b	18		clc				clc
.1e8c	60		rts				rts
.1e8d					_TOKIsVariable:
.1e8d	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1e8f					_TOKOutputBuffer:
.1e8f	bd 12 04	lda $0412,x			lda 	TOKElementText,x 			; output it translated.
.1e92	20 bb 1e	jsr $1ebb			jsr 	TOKTranslateIdentifier
.1e95	20 c3 1d	jsr $1dc3			jsr 	TOKWriteA
.1e98	e8		inx				inx
.1e99	bd 12 04	lda $0412,x			lda 	TOKElementText,x
.1e9c	20 87 1f	jsr $1f87			jsr 	TOKIsIdentifierElement
.1e9f	b0 ee		bcs $1e8f			bcs 	_TOKOutputBuffer
.1ea1	a8		tay				tay 								; last char in Y
.1ea2	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1ea4	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1ea6	f0 0e		beq $1eb6			beq 	_TOKIVExit
.1ea8	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1eaa	d0 04		bne $1eb0			bne 	_TOKIVCheckArray 			; no, check for (
.1eac	1a		inc a				inc 	a 							; token is $7D
.1ead	bc 13 04	ldy $0413,x			ldy 	TOKElementText+1,x 			; get next one.
.1eb0					_TOKIVCheckArray:
.1eb0	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1eb2	d0 02		bne $1eb6			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1eb4	1a		inc a				inc 	a
.1eb5	1a		inc a				inc 	a
.1eb6					_TOKIVExit:
.1eb6	20 c3 1d	jsr $1dc3			jsr 	TOKWriteA 					; ending token
.1eb9	18		clc				clc
.1eba	60		rts				rts
.1ebb					TOKTranslateIdentifier:
.1ebb	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1ebd	f0 0f		beq $1ece			beq 	_TTI64
.1ebf	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1ec1	f0 0e		beq $1ed1			beq 	_TTI65
.1ec3	38		sec				sec
.1ec4	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1ec6	10 03		bpl $1ecb			bpl 	_TTIExit
.1ec8	18		clc				clc 								; map 09 onto 26-35
.1ec9	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1ecb					_TTIExit:
.1ecb	09 40		ora #$40			ora 	#$40 						; correct range.
.1ecd	60		rts				rts
.1ece	a9 64		lda #$64	_TTI64:	lda 	#$64
.1ed0	60		rts				rts
.1ed1	a9 65		lda #$65	_TTI65:	lda 	#$65
.1ed3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1ed4					TOKTokeniseInteger:
.1ed4	20 fd 1e	jsr $1efd			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1ed7	a2 12		ldx #$12			ldx 	#TOKElementText & $FF
.1ed9	a0 04		ldy #$04			ldy 	#TOKElementText >> 8
.1edb	ad 11 04	lda $0411			lda		TOKElement
.1ede	20 96 2a	jsr $2a96			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1ee1	ad 13 05	lda $0513			lda 	TOKIsFirstElement 			; first element ?
.1ee4	f0 12		beq $1ef8			beq 	_TOKNotLineNumber
.1ee6	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1ee8	d0 0c		bne $1ef6			bne 	_TOKBadLineNumeber
.1eea	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1eec	8d 01 03	sta $0301			sta 	TOKLineNumber
.1eef	a5 0d		lda $0d				lda 	IFR0+IM1
.1ef1	8d 02 03	sta $0302			sta 	TOKLineNumber+1
.1ef4	18		clc				clc
.1ef5	60		rts				rts
.1ef6					_TOKBadLineNumeber:
.1ef6	38		sec				sec
.1ef7	60		rts				rts
.1ef8					_TOKNotLineNumber:
.1ef8	20 0c 1d	jsr $1d0c			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1efb	18		clc				clc
.1efc	60		rts				rts
.1efd					TOKExtractInteger:
.1efd	20 f9 1c	jsr $1cf9			jsr 	TOKResetElement 			; restart
.1f00					_TTILoop:
.1f00	20 cf 1d	jsr $1dcf			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f03	20 7b 1f	jsr $1f7b			jsr 	TOKIsDigit
.1f06	90 08		bcc $1f10			bcc 	_TOKEIExit
.1f08	20 fd 1c	jsr $1cfd			jsr 	TOKWriteElement
.1f0b	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext
.1f0e	80 f0		bra $1f00			bra 	_TTILoop
.1f10					_TOKEIExit:
.1f10	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1f11					TOKTokenisePunctuation:
.1f11	20 f9 1c	jsr $1cf9			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1f14	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext
.1f17	20 fd 1c	jsr $1cfd			jsr 	TOKWriteElement
.1f1a	20 cf 1d	jsr $1dcf			jsr 	TOKGet 						; what follows ?
.1f1d	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1f1f	f0 10		beq $1f31			beq 	_TTPOne
.1f21	20 8f 1f	jsr $1f8f			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1f24	b0 0b		bcs $1f31			bcs 	_TTPOne 					; these speed things up a bit.
.1f26	20 fd 1c	jsr $1cfd			jsr 	TOKWriteElement 			; this is what we will search for.
.1f29	20 d7 1d	jsr $1dd7			jsr 	TOKFindToken
.1f2c	b0 0a		bcs $1f38			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1f2e	ce 11 04	dec $0411			dec 	TOKElement 					; make it a single character
.1f31					_TTPOne:
.1f31	20 d7 1d	jsr $1dd7			jsr 	TOKFindToken 				; look for one character punctuation
.1f34	b0 07		bcs $1f3d			bcs 	_TTPOutputExit 				; we found it
.1f36	38		sec				sec 								; not recognised.
.1f37	60		rts				rts
.1f38					_TTPConsumeExit:
.1f38	48		pha				pha
.1f39	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext 					; get the 2nd char out.
.1f3c	68		pla				pla
.1f3d					_TTPOutputExit:
.1f3d	20 c3 1d	jsr $1dc3			jsr  	TOKWriteA 					; write token out
.1f40	18		clc				clc
.1f41	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1f42					TOKTokeniseString:
.1f42	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext 					; consume the "
.1f45	20 f9 1c	jsr $1cf9			jsr 	TOKResetElement 			; start getting the string
.1f48					_TOKTSLoop:
.1f48	20 cf 1d	jsr $1dcf			jsr 	TOKGet 						; check EOL
.1f4b	c9 00		cmp #$00			cmp 	#0
.1f4d	f0 0c		beq $1f5b			beq 	_TOKTSExit
.1f4f	20 d3 1d	jsr $1dd3			jsr 	TOKGetNext 					; get and consume
.1f52	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1f54	f0 05		beq $1f5b			beq 	_TOKTSExit
.1f56	20 fd 1c	jsr $1cfd			jsr 	TOKWriteElement
.1f59	80 ed		bra $1f48			bra 	_TOKTSLoop
.1f5b					_TOKTSExit:
.1f5b	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1f5d	20 c3 1d	jsr $1dc3			jsr 	TOKWriteA
.1f60	20 3e 1d	jsr $1d3e			jsr 	TOKOutputElementBuffer
.1f63	18		clc				clc
.1f64	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1f65					TOKToUpper:
.1f65	c9 61		cmp #$61			cmp 	#"a"
.1f67	90 06		bcc $1f6f			bcc 	_TTUNotLower
.1f69	c9 7b		cmp #$7b			cmp 	#"z"+1
.1f6b	b0 02		bcs $1f6f			bcs 	_TTUNotLower
.1f6d	49 20		eor #$20			eor 	#$20
.1f6f					_TTUNotLower:
.1f6f	60		rts				rts
.1f70					TOKToLower:
.1f70	c9 41		cmp #$41			cmp 	#"A"
.1f72	90 06		bcc $1f7a			bcc 	_TTUNotUpper
.1f74	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f76	b0 02		bcs $1f7a			bcs 	_TTUNotUpper
.1f78	49 20		eor #$20			eor 	#$20
.1f7a					_TTUNotUpper:
.1f7a	60		rts				rts
.1f7b					TOKIsDigit:
.1f7b	c9 30		cmp #$30			cmp 	#"0"
.1f7d	90 06		bcc $1f85			bcc 	TOKFail
.1f7f	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f81	b0 02		bcs $1f85			bcs 	TOKFail
.1f83					TOKSucceed:
.1f83	38		sec				sec
.1f84	60		rts				rts
.1f85					TOKFail:
.1f85	18		clc				clc
.1f86	60		rts				rts
.1f87					TOKIsIdentifierElement:
.1f87	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f89	f0 f8		beq $1f83			beq 	TOKSucceed
.1f8b	c9 5f		cmp #$5f			cmp 	#"_"
.1f8d	f0 f4		beq $1f83			beq 	TOKSucceed 					; else fall through to alphanumeric
.1f8f					TOKIsAlphaNumeric:
.1f8f	20 98 1f	jsr $1f98			jsr 	TOKIsAlpha
.1f92	b0 ef		bcs $1f83			bcs 	TOKSucceed
.1f94	20 7b 1f	jsr $1f7b			jsr 	TOKIsDigit
.1f97	60		rts				rts
.1f98					TOKIsAlpha:
.1f98	20 65 1f	jsr $1f65			jsr 	TOKToUpper
.1f9b	c9 41		cmp #$41			cmp 	#"A"
.1f9d	90 e6		bcc $1f85			bcc 	TOKFail
.1f9f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1fa1	b0 e2		bcs $1f85			bcs 	TOKFail
.1fa3	80 de		bra $1f83			bra 	TOKSucceed
.1fa5					TOKIsHexadecimal:
.1fa5	20 7b 1f	jsr $1f7b			jsr		TOKIsDigit
.1fa8	b0 d9		bcs $1f83			bcs 	TOKSucceed
.1faa	20 98 1f	jsr $1f98			jsr 	TOKIsAlpha
.1fad	90 d6		bcc $1f85			bcc 	TOKFail
.1faf	c9 47		cmp #$47			cmp 	#"F"+1
.1fb1	b0 d2		bcs $1f85			bcs 	TOKFail
.1fb3	80 ce		bra $1f83			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.1fb5					Command_DO:
.1fb5	a9 22		lda #$22			lda 	#STK_DO
.1fb7	20 4a 23	jsr $234a			jsr 	StackOpen
.1fba	20 7e 23	jsr $237e			jsr 	STKSaveCodePosition 		; save loop position
.1fbd	60		rts				rts
.1fbe					Command_EXIT:
.1fbe	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.1fc0	20 76 23	jsr $2376			jsr 	StackCheckFrame
.1fc3	20 68 23	jsr $2368			jsr 	StackClose 					; close it
.1fc6	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.1fc8	aa		tax				tax
.1fc9	20 5e 21	jsr $215e			jsr 	ScanForward
.1fcc	60		rts				rts
.1fcd					Command_LOOP:
.1fcd	a9 22		lda #$22			lda 	#STK_DO
.1fcf	20 76 23	jsr $2376			jsr 	StackCheckFrame
.1fd2	20 90 23	jsr $2390			jsr 	STKLoadCodePosition 		; loop back
.1fd5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.1fd6					Command_FOR:
.1fd6	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.1fd8	20 4a 23	jsr $234a			jsr 	StackOpen
.1fdb	20 13 12	jsr $1213			jsr 	CommandLET 					; do "I = 1" bit
.1fde	5a		phy				phy 								; save variable address to +4,+5
.1fdf	a0 04		ldy #$04			ldy 	#4
.1fe1	a5 1e		lda $1e				lda 	zTemp0
.1fe3	91 26		sta ($26),y			sta 	(basicStack),y
.1fe5	c8		iny				iny
.1fe6	a5 1f		lda $1f				lda 	zTemp0+1
.1fe8	91 26		sta ($26),y			sta 	(basicStack),y
.1fea	7a		ply				ply
.1feb	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.1fed	20 41 23	jsr $2341			jsr 	ERRCheckA
.1ff0	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.1ff3	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.1ff5	a2 0c		ldx #$0c			ldx 	#IFR0
.1ff7	20 4c 20	jsr $204c			jsr 	CFSaveR0X
.1ffa	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; STEP here ?
.1ffc	c9 91		cmp #$91			cmp 	#PR_STEP
.1ffe	d0 06		bne $2006			bne 	_CFStep1
.2000	c8		iny				iny 								; consume step
.2001	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 				; evaluate STEP
.2004	80 24		bra $202a			bra 	_CFWriteStep
.2006					_CFStep1:
.2006	a2 0c		ldx #$0c			ldx 	#IFR0 						; default R0, 1
.2008	a9 01		lda #$01			lda 	#1
.200a	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.200d	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.200e	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2010	b1 26		lda ($26),y			lda 	(basicStack),y
.2012	85 1e		sta $1e				sta 	zTemp0
.2014	c8		iny				iny
.2015	b1 26		lda ($26),y			lda 	(basicStack),y
.2017	85 1f		sta $1f				sta 	zTemp0+1
.2019	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.201b	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.201d	d0 0a		bne $2029			bne 	_CFNotOptimised
.201f	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2021	b1 26		lda ($26),y			lda 	(basicStack),y
.2023	d0 04		bne $2029			bne 	_CFNotOptimised
.2025	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2027	85 0f		sta $0f				sta 	IFR0+IExp
.2029					_CFNotOptimised:
.2029	7a		ply				ply
.202a					_CFWriteStep:
.202a	a2 0c		ldx #$0c			ldx 	#IFR0 						; Write to additive.
.202c	a9 06		lda #$06			lda 	#6
.202e	20 4c 20	jsr $204c			jsr 	CFSaveR0X
.2031	20 7e 23	jsr $237e			jsr 	STKSaveCodePosition 		; save loop position
.2034	60		rts				rts
.2035					CFLoadR0X:
.2035	5a		phy				phy
.2036	a8		tay				tay
.2037	b1 26		lda ($26),y			lda 	(basicStack),y
.2039	95 00		sta $00,x			sta 	IM0,x
.203b	c8		iny				iny
.203c	b1 26		lda ($26),y			lda 	(basicStack),y
.203e	95 01		sta $01,x			sta 	IM1,x
.2040	c8		iny				iny
.2041	b1 26		lda ($26),y			lda 	(basicStack),y
.2043	95 02		sta $02,x			sta 	IM2,x
.2045	c8		iny				iny
.2046	b1 26		lda ($26),y			lda 	(basicStack),y
.2048	95 03		sta $03,x			sta 	IExp,x
.204a	7a		ply				ply
.204b	60		rts				rts
.204c					CFSaveR0X:
.204c	5a		phy				phy
.204d	a8		tay				tay
.204e	b5 00		lda $00,x			lda 	IM0,x
.2050	91 26		sta ($26),y			sta 	(basicStack),y
.2052	c8		iny				iny
.2053	b5 01		lda $01,x			lda 	IM1,x
.2055	91 26		sta ($26),y			sta 	(basicStack),y
.2057	c8		iny				iny
.2058	b5 02		lda $02,x			lda 	IM2,x
.205a	91 26		sta ($26),y			sta 	(basicStack),y
.205c	c8		iny				iny
.205d	b5 03		lda $03,x			lda 	IExp,x
.205f	91 26		sta ($26),y			sta 	(basicStack),y
.2061	7a		ply				ply
.2062	60		rts				rts
.2063					Command_NEXT:
.2063	a9 37		lda #$37			lda 	#STK_FOR
.2065	20 76 23	jsr $2376			jsr 	StackCheckFrame
.2068	5a		phy				phy 								; check optimised loop
.2069	a0 09		ldy #$09			ldy 	#9
.206b	b1 26		lda ($26),y			lda 	(basicStack),y
.206d	7a		ply				ply
.206e	0a		asl a				asl 	a
.206f	b0 35		bcs $20a6			bcs 	_CNOptimised
.2071	20 dd 20	jsr $20dd			jsr 	_CNLoadValue 				; load index value to R0.
.2074	a2 10		ldx #$10			ldx 	#IFR1 						; load adding value to R1.
.2076	a9 06		lda #$06			lda 	#6
.2078	20 35 20	jsr $2035			jsr 	CFLoadR0X
.207b	20 28 26	jsr $2628			jsr 	IFloatAdd 					; add them together and write back.
.207e	20 00 21	jsr $2100			jsr 	_CNSaveValue
.2081	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2083	a2 10		ldx #$10			ldx 	#IFR1
.2085	20 35 20	jsr $2035			jsr 	CFLoadR0X
.2088	20 00 29	jsr $2900			jsr 	IFloatCompare 				; compare terminal vs current
.208b	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.208d	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero
.2090	f0 10		beq $20a2			beq 	_CNLoopBack
.2092	a5 0f		lda $0f				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2094	5a		phy				phy
.2095	a0 09		ldy #$09			ldy 	#6+IExp
.2097	51 26		eor ($26),y			eor 	(basicStack),y
.2099	7a		ply				ply
.209a	29 40		and #$40			and 	#IFSign
.209c	f0 04		beq $20a2			beq 	_CNLoopBack
.209e					_CNExitLoop:
.209e	20 68 23	jsr $2368			jsr 	StackClose		 			; return
.20a1	60		rts				rts
.20a2					_CNLoopBack:
.20a2	20 90 23	jsr $2390			jsr 	STKLoadCodePosition 		; loop back
.20a5	60		rts				rts
.20a6					_CNOptimised:
.20a6	5a		phy				phy
.20a7	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.20a9	b1 26		lda ($26),y			lda 	(basicStack),y
.20ab	85 22		sta $22				sta 	zTemp2
.20ad	c8		iny				iny
.20ae	b1 26		lda ($26),y			lda 	(basicStack),y
.20b0	85 23		sta $23				sta 	zTemp2+1
.20b2	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.20b4					_CNIncrement:
.20b4	c8		iny				iny
.20b5	b1 22		lda ($22),y			lda 	(zTemp2),y
.20b7	1a		inc a				inc 	a
.20b8	91 22		sta ($22),y			sta 	(zTemp2),y
.20ba	f0 f8		beq $20b4			beq 	_CNIncrement
.20bc	18		clc				clc 								; point zTemp0 to terminal value
.20bd	a5 26		lda $26				lda 	basicStack
.20bf	69 0a		adc #$0a			adc 	#10
.20c1	85 1e		sta $1e				sta 	zTemp0
.20c3	a5 27		lda $27				lda 	basicStack+1
.20c5	69 00		adc #$00			adc 	#0
.20c7	85 1f		sta $1f				sta 	zTemp0+1
.20c9	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.20cb	b2 22		lda ($22)			lda 	(zTemp2)
.20cd	d2 1e		cmp ($1e)			cmp 	(zTemp0)
.20cf	b1 22		lda ($22),y			lda 	(zTemp2),y
.20d1	f1 1e		sbc ($1e),y			sbc 	(zTemp0),y
.20d3	c8		iny				iny
.20d4	b1 22		lda ($22),y			lda 	(zTemp2),y
.20d6	f1 1e		sbc ($1e),y			sbc 	(zTemp0),y
.20d8	7a		ply				ply
.20d9	b0 c3		bcs $209e			bcs 	_CNExitLoop
.20db	80 c5		bra $20a2			bra 	_CNLoopBack
.20dd					_CNLoadValue:
.20dd	5a		phy				phy
.20de	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.20e0	b1 26		lda ($26),y			lda 	(basicStack),y
.20e2	85 22		sta $22				sta 	zTemp2
.20e4	c8		iny				iny
.20e5	b1 26		lda ($26),y			lda 	(basicStack),y
.20e7	85 23		sta $23				sta 	zTemp2+1
.20e9	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.20eb	b1 22		lda ($22),y			lda 	(zTemp2),y
.20ed	85 0c		sta $0c				sta 	IFR0+IM0
.20ef	c8		iny				iny
.20f0	b1 22		lda ($22),y			lda 	(zTemp2),y
.20f2	85 0d		sta $0d				sta 	IFR0+IM1
.20f4	c8		iny				iny
.20f5	b1 22		lda ($22),y			lda 	(zTemp2),y
.20f7	85 0e		sta $0e				sta 	IFR0+IM2
.20f9	c8		iny				iny
.20fa	b1 22		lda ($22),y			lda 	(zTemp2),y
.20fc	85 0f		sta $0f				sta 	IFR0+IExp
.20fe	7a		ply				ply
.20ff	60		rts				rts
.2100					_CNSaveValue:
.2100	5a		phy				phy
.2101	a0 00		ldy #$00			ldy 	#0
.2103	a5 0c		lda $0c				lda 	IFR0+IM0
.2105	91 22		sta ($22),y			sta 	(zTemp2),y
.2107	c8		iny				iny
.2108	a5 0d		lda $0d				lda 	IFR0+IM1
.210a	91 22		sta ($22),y			sta 	(zTemp2),y
.210c	c8		iny				iny
.210d	a5 0e		lda $0e				lda 	IFR0+IM2
.210f	91 22		sta ($22),y			sta 	(zTemp2),y
.2111	c8		iny				iny
.2112	a5 0f		lda $0f				lda 	IFR0+IExp
.2114	91 22		sta ($22),y			sta 	(zTemp2),y
.2116	7a		ply				ply
.2117	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2118					IfCommand:
.2118	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 				; Get the if test.
.211b	b1 1c		lda ($1c),y			lda 	(codePtr),y					; what follows ?
.211d	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.211f	d0 0a		bne $212b			bne 	_IfStructured 				; we still support it.
.2121	c8		iny				iny 								; consume THEN
.2122	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero 			; is it zero
.2125	f0 01		beq $2128			beq 	_IfFail 					; if fail, go to next line
.2127	60		rts				rts 								; if THEN just continue
.2128					_IfFail:
.2128	4c ad 12	jmp $12ad			jmp 	RUNEndOfLine
.212b					_IfStructured:
.212b	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero 			; is it zero
.212e	d0 07		bne $2137			bne 	_IfExit 					; if not, then continue normally.
.2130	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2132	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2134	20 5e 21	jsr $215e			jsr 	ScanForward 				; and run from there
.2137					_IfExit:
.2137	60		rts				rts
.2138					ElseCode:
.2138	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.213a	aa		tax				tax 								; so just go to the structure exit
.213b	20 5e 21	jsr $215e			jsr 	ScanForward
.213e	60		rts				rts
.213f					EndIf:
.213f	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2140					Command_REPEAT:
.2140	a9 02		lda #$02			lda 	#STK_REPEAT
.2142	20 4a 23	jsr $234a			jsr 	StackOpen
.2145	20 7e 23	jsr $237e			jsr 	STKSaveCodePosition 		; save loop position
.2148	60		rts				rts
.2149					Command_UNTIL:
.2149	a9 02		lda #$02			lda 	#STK_REPEAT
.214b	20 76 23	jsr $2376			jsr 	StackCheckFrame
.214e	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 				; work out the test
.2151	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero 			; check if zero
.2154	f0 04		beq $215a			beq 	_CULoopBack 				; if so keep looping
.2156	20 68 23	jsr $2368			jsr 	StackClose		 			; return
.2159	60		rts				rts
.215a					_CULoopBack:
.215a	20 90 23	jsr $2390			jsr 	STKLoadCodePosition 		; loop back
.215d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scan.asm

.215e					ScanForward:
.215e	85 1e		sta $1e				sta 	zTemp0 						; save scan options in zTemp0
.2160	86 1f		stx $1f				stx 	zTemp0+1
.2162	64 20		stz $20				stz 	zTemp1 						; clear structure count.
.2164					_ScanForwardLoop:
.2164	a5 20		lda $20				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2166	d0 0a		bne $2172			bne 	_ScanNoCheck
.2168	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; reached either target token.
.216a	c5 1e		cmp $1e				cmp 	zTemp0
.216c	f0 49		beq $21b7			beq 	_ScanExit
.216e	c5 1f		cmp $1f				cmp 	zTemp0+1
.2170	f0 45		beq $21b7			beq 	_ScanExit
.2172					_ScanNoCheck:
.2172	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get the token and consume it.
.2174	c8		iny				iny
.2175	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2177	f0 37		beq $21b0			beq		_ScanDataItem
.2179	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.217b	f0 33		beq $21b0			beq 	_ScanDataItem
.217d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.217f	f0 1b		beq $219c			beq 	_ScanNextLine
.2181	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2183	d0 01		bne $2186			bne 	_ScanNoShift
.2185	c8		iny				iny
.2186					_ScanNoShift:
.2186	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2188	b0 da		bcs $2164			bcs 	_ScanForwardLoop
.218a	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.218c	90 d6		bcc $2164			bcc 	_ScanForwardLoop
.218e	aa		tax				tax 								; access the table to get the adjustment.
.218f	18		clc				clc
.2190	a5 20		lda $20				lda 	zTemp1 						; add it to structure count.
.2192	7d c4 17	adc $17c4,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2195	85 20		sta $20				sta 	zTemp1
.2197	10 cb		bpl $2164			bpl		_ScanForwardLoop 			; error if -ve ?
.2199	4c 68 22	jmp $2268		jmp	ErrorV_structure
.219c					_ScanNextLine:
.219c	18		clc				clc	 								; forward to next line.
.219d	b2 1c		lda ($1c)			lda 	(codePtr)
.219f	65 1c		adc $1c				adc 	codePtr
.21a1	85 1c		sta $1c				sta 	codePtr
.21a3	90 02		bcc $21a7			bcc 	_ScanNoCarry
.21a5	e6 1d		inc $1d				inc 	codePtr+1
.21a7					_ScanNoCarry:
.21a7	a0 03		ldy #$03			ldy 	#3
.21a9	b2 1c		lda ($1c)			lda 	(codePtr) 					; off end of program ?
.21ab	d0 b7		bne $2164			bne 	_ScanForwardLoop
.21ad	4c 68 22	jmp $2268		jmp	ErrorV_structure
.21b0					_ScanDataItem:
.21b0	98		tya				tya
.21b1	38		sec				sec
.21b2	71 1c		adc ($1c),y			adc 	(codePtr),y
.21b4	a8		tay				tay
.21b5	80 ad		bra $2164			bra 	_ScanForwardLoop
.21b7					_ScanExit:
.21b7	c8		iny				iny 								; consume final token.
.21b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.21b9					Command_WHILE:
.21b9	5a		phy				phy 								; save position of the test
.21ba	20 c9 14	jsr $14c9			jsr 	EXPEvalNumber 				; work out the while test.
.21bd	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero 			; check if zero
.21c0	f0 0e		beq $21d0			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.21c2	98		tya				tya 								; position *after* test.
.21c3	7a		ply				ply 								; restore position before test, at WHILE
.21c4	88		dey				dey 								; so we execute the WHILE command again.
.21c5	48		pha				pha 								; push after test on the stack
.21c6	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.21c8	20 4a 23	jsr $234a			jsr 	StackOpen
.21cb	20 7e 23	jsr $237e			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.21ce	7a		ply				ply 								; restore the position *after* the test
.21cf	60		rts				rts
.21d0					_WHExitLoop:
.21d0	68		pla				pla 								; throw post loop position
.21d1	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.21d3	aa		tax				tax
.21d4	20 5e 21	jsr $215e			jsr 	ScanForward
.21d7	60		rts				rts
.21d8					Command_WEND:
.21d8	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.21da	20 76 23	jsr $2376			jsr 	StackCheckFrame
.21dd	20 90 23	jsr $2390			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.21e0	20 68 23	jsr $2368			jsr 	StackClose		 			; erase the frame
.21e3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.21e4					ErrorV_syntax:
.21e4	20 14 2d	jsr $2d14		jsr	ErrorHandler
>21e7	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>21ef	72 72 6f 72 00
.21f4					ErrorV_range:
.21f4	20 14 2d	jsr $2d14		jsr	ErrorHandler
>21f7	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>21ff	61 6e 67 65 00
.2204					ErrorV_value:
.2204	20 14 2d	jsr $2d14		jsr	ErrorHandler
>2207	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>220f	65 00
.2211					ErrorV_type:
.2211	20 14 2d	jsr $2d14		jsr	ErrorHandler
>2214	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>221c	6d 61 74 63 68 00
.2222					ErrorV_unimplemented:
.2222	20 14 2d	jsr $2d14		jsr	ErrorHandler
>2225	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>222d	65 6d 65 6e 74 65 64 00
.2235					ErrorV_assert:
.2235	20 14 2d	jsr $2d14		jsr	ErrorHandler
>2238	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>2240	61 69 6c 00
.2244					ErrorV_internal:
.2244	20 14 2d	jsr $2d14		jsr	ErrorHandler
>2247	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>224f	20 45 72 72 6f 72 00
.2256					ErrorV_divzero:
.2256	20 14 2d	jsr $2d14		jsr	ErrorHandler
>2259	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>2261	79 20 5a 65 72 6f 00
.2268					ErrorV_structure:
.2268	20 14 2d	jsr $2d14		jsr	ErrorHandler
>226b	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>2273	65 20 49 6d 62 61 6c 61 6e 63 65 00
.227f					ErrorV_stop:
.227f	20 14 2d	jsr $2d14		jsr	ErrorHandler
>2282	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>228a	53 74 6f 70 70 65 64 00
.2292					ErrorV_data:
.2292	20 14 2d	jsr $2d14		jsr	ErrorHandler
>2295	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>229d	61 74 61 00
.22a1					ErrorV_redefine:
.22a1	20 14 2d	jsr $2d14		jsr	ErrorHandler
>22a4	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>22ac	64 65 66 69 6e 65 64 00
.22b4					ErrorV_index:
.22b4	20 14 2d	jsr $2d14		jsr	ErrorHandler
>22b7	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>22bf	79 20 49 6e 64 65 78 00
.22c7					ErrorV_memory:
.22c7	20 14 2d	jsr $2d14		jsr	ErrorHandler
>22ca	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>22d2	65 6d 6f 72 79 00
.22d8					ErrorV_uninitialised:
.22d8	20 14 2d	jsr $2d14		jsr	ErrorHandler
>22db	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>22e3	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.22f2					ErrorV_string:
.22f2	20 14 2d	jsr $2d14		jsr	ErrorHandler
>22f5	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>22fd	6e 67 20 4c 65 6e 67 74 68 00
.2307					ErrorV_variable:
.2307	20 14 2d	jsr $2d14		jsr	ErrorHandler
>230a	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>2312	20 4d 69 73 73 69 6e 67 00
.231b					ErrorV_stack:
.231b	20 14 2d	jsr $2d14		jsr	ErrorHandler
>231e	53 74 61 63 6b 20 46 75			.text	"Stack Full",0
>2326	6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2329					ERRCheckLParen:
.2329	b1 1c		lda ($1c),y			lda 	(codePtr),y
.232b	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.232d	d0 18		bne $2347			bne 	ERRSyntaxError
.232f	c8		iny				iny
.2330	60		rts				rts
.2331					ERRCheckRParen:
.2331	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2333	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2335	d0 10		bne $2347			bne 	ERRSyntaxError
.2337	c8		iny				iny
.2338	60		rts				rts
.2339					ERRCheckComma:
.2339	b1 1c		lda ($1c),y			lda 	(codePtr),y
.233b	c9 99		cmp #$99			cmp 	#PR_COMMA
.233d	d0 08		bne $2347			bne 	ERRSyntaxError
.233f	c8		iny				iny
.2340	60		rts				rts
.2341					ERRCheckA:
.2341	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.2343	d0 02		bne $2347			bne 	ERRSyntaxError
.2345	c8		iny				iny
.2346	60		rts				rts
.2347					ERRSyntaxError:
.2347	4c e4 21	jmp $21e4		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.234a					StackOpen:
.234a	48		pha				pha 								; save frame byte
.234b	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.234d	0a		asl a				asl 	a 							; claim twice this for storage
.234e	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2350	38		sec				sec 								; so basically subtracting from
.2351	65 26		adc $26				adc 	basicStack 	 				; basicStack
.2353	85 26		sta $26				sta 	basicStack
.2355	b0 0a		bcs $2361			bcs 	_SONoBorrow
>2357	db						.byte 	$DB
.2358	c6 27		dec $27				dec 	basicStack+1
.235a	a5 27		lda $27				lda 	basicStack+1 				; reached the bottom ?
.235c	cd 15 05	cmp $0515			cmp 	basicStackEnd
.235f	f0 04		beq $2365			beq 	_SOMemory
.2361					_SONoBorrow:
.2361	68		pla				pla 								; get marker back and write at TOS
.2362	92 26		sta ($26)			sta 	(basicStack)
.2364	60		rts				rts
.2365					_SOMemory:
.2365	4c 1b 23	jmp $231b		jmp	ErrorV_stack
.2368					StackClose:
.2368	b2 26		lda ($26)			lda 	(basicStack) 				; get TOS marker
.236a	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.236c	0a		asl a				asl 	a 							; claim twice this.
.236d	65 26		adc $26				adc 	basicStack 					; add to the stack pointer.
.236f	85 26		sta $26				sta 	basicStack
.2371	90 02		bcc $2375			bcc 	_SCExit
.2373	e6 27		inc $27				inc 	basicStack+1
.2375					_SCExit:
.2375	60		rts				rts
.2376					StackCheckFrame:
.2376	d2 26		cmp ($26)			cmp		(basicStack) 				; check  frames match
.2378	d0 01		bne $237b			bne 	_SCFError 					; different, we have structures mixed up
.237a	60		rts				rts
.237b					_SCFError:
.237b	4c 68 22	jmp $2268		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.237e					STKSaveCodePosition:
.237e	5a		phy				phy
.237f	98		tya				tya 								; save Y at offset 1.
.2380	a0 01		ldy #$01			ldy 	#1
.2382	91 26		sta ($26),y			sta 	(basicStack),y
.2384	a5 1c		lda $1c				lda 	codePtr 					; save code (low) at 2
.2386	c8		iny				iny
.2387	91 26		sta ($26),y			sta 	(basicStack),y
.2389	a5 1d		lda $1d				lda 	codePtr+1 					; save code (high) at 3
.238b	c8		iny				iny
.238c	91 26		sta ($26),y			sta 	(basicStack),y
.238e	7a		ply				ply
.238f	60		rts				rts
.2390					STKLoadCodePosition:
.2390	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2392	b1 26		lda ($26),y			lda 	(basicStack),y
.2394	85 1d		sta $1d				sta 	codePtr+1
.2396	88		dey				dey
.2397	b1 26		lda ($26),y			lda 	(basicStack),y
.2399	85 1c		sta $1c				sta 	codePtr
.239b	88		dey				dey
.239c	b1 26		lda ($26),y			lda 	(basicStack),y 				; line offset to Y
.239e	a8		tay				tay
.239f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.23a0					StackReset:
.23a0	48		pha				pha 								; save top of memory
.23a1	3a		dec a				dec 	a  							; end of stack = previous byte
.23a2	85 27		sta $27				sta 	basicStack+1
.23a4	a9 ff		lda #$ff			lda 	#$FF
.23a6	85 26		sta $26				sta 	basicStack
.23a8	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.23aa	92 26		sta ($26)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.23ac	68		pla				pla 								; allocate pages for stack.
.23ad	38		sec				sec
.23ae	e9 02		sbc #$02			sbc 	#stackPages
.23b0	8d 15 05	sta $0515			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.23b3	60		rts				rts
.0026					basicStack:
>0026							.fill 	2
.0515					basicStackEnd:
>0515							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.23b4					StringConcrete:
.23b4	5a		phy				phy 								; save position on stack
.23b5	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.23b7	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.23b9	b0 41		bcs $23fc			bcs 	_SALengthError
.23bb	18		clc				clc 								; length of the new string
.23bc	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.23be	90 02		bcc $23c2			bcc 	_SAHaveLength
.23c0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.23c2					_SAHaveLength:
.23c2	48		pha				pha 								; save length to be allocated for concreting.
.23c3	38		sec				sec
.23c4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.23c6	6d 17 05	adc $0517			adc 	stringMemory
.23c9	8d 17 05	sta $0517			sta 	stringMemory
.23cc	85 22		sta $22				sta 	zTemp2 						; update storage address
.23ce	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.23d0	6d 18 05	adc $0518			adc 	stringMemory+1
.23d3	8d 18 05	sta $0518			sta 	stringMemory+1
.23d6	85 23		sta $23				sta 	zTemp2+1
.23d8	68		pla				pla 								; save length allocated in +0
.23d9	92 22		sta ($22)			sta 	(zTemp2)
.23db	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.23dd	a0 01		ldy #$01			ldy 	#1
.23df	91 22		sta ($22),y			sta 	(zTemp2),y
.23e1					_SACopyNewString:
.23e1	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.23e3	a0 02		ldy #$02			ldy 	#2
.23e5	91 22		sta ($22),y			sta 	(zTemp2),y
.23e7	aa		tax				tax 								; bytes to copy
.23e8	f0 0c		beq $23f6			beq 	_SACopyExit
.23ea	a0 01		ldy #$01			ldy 	#1 							; first character from here
.23ec					_SACopyNSLoop:
.23ec	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.23ee	c8		iny				iny 								; write two on in string storage
.23ef	c8		iny				iny
.23f0	91 22		sta ($22),y			sta 	(zTemp2),y
.23f2	88		dey				dey
.23f3	ca		dex				dex									; until copied all the string lengths.
.23f4	d0 f6		bne $23ec			bne 	_SACopyNSLoop
.23f6					_SACopyExit:
.23f6	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.23f8	a5 22		lda $22				lda 	zTemp2
.23fa	7a		ply				ply
.23fb	60		rts				rts
.23fc					_SALengthError:
.23fc	4c f2 22	jmp $22f2		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.23ff					StringSystemInitialise:
.23ff	3a		dec a				dec 	a 							; make last byte of previous page.
.2400	8d 18 05	sta $0518			sta 	stringMemory+1
.2403	85 1f		sta $1f				sta 	zTemp0+1
.2405	a9 ff		lda #$ff			lda 	#$FF
.2407	8d 17 05	sta $0517			sta 	stringMemory
.240a	85 1e		sta $1e				sta 	zTemp0
.240c	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.240e	92 1e		sta ($1e)			sta 	(zTemp0)
.2410	60		rts				rts
.2411					StringSpaceInitialise:
.2411	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2413	8d 16 05	sta $0516			sta 	stringInitialised
.2416	ad 17 05	lda $0517			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2419	8d 19 05	sta $0519			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.241c	ad 18 05	lda $0518			lda 	stringMemory+1
.241f	3a		dec a				dec 	a
.2420	8d 1a 05	sta $051a			sta 	stringTempPointer+1
.2423	20 5b 10	jsr $105b			jsr 	ClearCheckMemory
.2426	60		rts				rts
.2427					StringTempAllocate:
.2427	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2429	b0 2e		bcs $2459			bcs 	_STALength
.242b	2c 16 05	bit $0516			bit 	stringInitialised 			; already initialised
.242e	30 05		bmi $2435			bmi 	_STAAllocate
.2430	48		pha				pha 								; save value to subtract.
.2431	20 11 24	jsr $2411			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2434	68		pla				pla 								; restore it
.2435					_STAAllocate:
.2435	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2437	18		clc				clc  								; deliberate allows one more
.2438	6d 19 05	adc $0519			adc 	stringTempPointer 			; subtract from temp pointer
.243b	8d 19 05	sta $0519			sta 	stringTempPointer
.243e	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.2440	85 28		sta $28				sta 	zsTemp 						; and zsTemp
.2442	ad 1a 05	lda $051a			lda 	stringTempPointer+1
.2445	69 ff		adc #$ff			adc 	#$FF
.2447	8d 1a 05	sta $051a			sta 	stringTempPointer+1
.244a	85 29		sta $29				sta 	zsTemp+1
.244c	85 0d		sta $0d				sta 	IFR0+IM1
.244e	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2450	a9 80		lda #$80			lda 	#$80
.2452	85 0f		sta $0f				sta 	IFR0+IExp
.2454	a9 00		lda #$00			lda 	#0 							; clear the target string
.2456	92 28		sta ($28)			sta 	(zsTemp)
.2458	60		rts				rts
.2459					_STALength:
.2459	4c f2 22	jmp $22f2		jmp	ErrorV_string
.245c					StringTempWrite:
.245c	5a		phy				phy
.245d	48		pha				pha
.245e	b2 28		lda ($28)			lda 	(zsTemp)
.2460	1a		inc a				inc 	a
.2461	92 28		sta ($28)			sta 	(zsTemp)
.2463	a8		tay				tay
.2464	68		pla				pla
.2465	91 28		sta ($28),y			sta 	(zsTemp),y
.2467	7a		ply				ply
.2468	60		rts				rts
.0028					zsTemp:
>0028							.fill 	2
.0516					stringInitialised:
>0516							.fill 	1
.0517					stringMemory:
>0517							.fill 	2
.0519					stringTempPointer:
>0519							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2469					VARArrayLookup:
.2469	85 1e		sta $1e				sta 	zTemp0 						; save the array address pointer in zTemp0
.246b	86 1f		stx $1f				stx 	zTemp0+1
.246d	b2 1e		lda ($1e)			lda 	(zTemp0)
.246f	48		pha				pha
.2470	5a		phy				phy
.2471	a0 01		ldy #$01			ldy 	#1
.2473	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2475	7a		ply				ply
.2476	48		pha				pha
.2477	20 db 14	jsr $14db			jsr 	EXPEvalInteger16 			; R0 now contains the index
.247a	68		pla				pla 								; array address to zTemp0
.247b	85 1f		sta $1f				sta 	zTemp0+1
.247d	68		pla				pla
.247e	85 1e		sta $1e				sta 	zTemp0
.2480	5a		phy				phy 								; save codePtr position.
.2481	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2483	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2485	48		pha				pha 								; save bit 15 on stack.
.2486	29 7f		and #$7f			and 	#$7F
.2488	85 20		sta $20				sta 	zTemp1
.248a	a5 0c		lda $0c				lda 	IFR0+IM0 					; check range of index
.248c	d2 1e		cmp ($1e)			cmp 	(zTemp0)
.248e	a5 0d		lda $0d				lda 	IFR0+IM1
.2490	e5 20		sbc $20				sbc 	zTemp1
.2492	b0 3a		bcs $24ce			bcs 	_VALIndex
.2494	a5 0d		lda $0d				lda 	IFR0+IM1  					; sanity check
.2496	c9 40		cmp #$40			cmp 	#$40
.2498	b0 34		bcs $24ce			bcs 	_VALIndex
.249a	06 0c		asl $0c				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.249c	26 0d		rol $0d				rol 	IFR0+IM1
.249e	fa		plx				plx 								; get msb of size -> X
.249f	30 04		bmi $24a5			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.24a1	06 0c		asl $0c				asl 	IFR0+IM0
.24a3	26 0d		rol $0d				rol 	IFR0+IM1
.24a5					_VARNotX4:
.24a5	18		clc				clc 								; add the two for the size bytes
.24a6	a5 0c		lda $0c				lda 	IFR0+IM0
.24a8	69 02		adc #$02			adc 	#2
.24aa	85 0c		sta $0c				sta 	IFR0+IM0
.24ac	90 02		bcc $24b0			bcc 	_VARNoCarry1
.24ae	e6 0d		inc $0d				inc 	IFR0+IM1
.24b0					_VARNoCarry1:
.24b0	18		clc				clc 								; calculate the element address and push to stack.
.24b1	a5 0c		lda $0c				lda 	IFR0+IM0
.24b3	65 1e		adc $1e				adc 	zTemp0
.24b5	48		pha				pha
.24b6	a5 0d		lda $0d				lda 	IFR0+IM1
.24b8	65 1f		adc $1f				adc 	zTemp0+1
.24ba	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.24bc	30 04		bmi $24c2			bmi 	_VARHasSubLevel
.24be	aa		tax				tax 								; address in XA
.24bf	68		pla				pla
.24c0	7a		ply				ply 								; restore Y and exit
.24c1	60		rts				rts
.24c2					_VARHasSubLevel:
.24c2	aa		tax				tax 								; get link address in XA
.24c3	68		pla				pla
.24c4	7a		ply				ply 								; restore code position.
.24c5	48		pha				pha
.24c6	20 39 23	jsr $2339			jsr 	ERRCheckComma 				; comma required.
.24c9	68		pla				pla
.24ca	20 69 24	jsr $2469			jsr 	VARArrayLookup 				; call it recursively
.24cd	60		rts				rts
.24ce					_VALIndex:
.24ce	4c b4 22	jmp $22b4		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.24d1					VARCreate:
.24d1	5a		phy				phy
.24d2	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.24d4	a2 00		ldx #$00			ldx 	#0
.24d6	20 32 10	jsr $1032			jsr 	AllocateMemory
.24d9	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.24db	86 21		stx $21				stx 	zTemp1+1
.24dd	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.24df	ad 1d 05	lda $051d			lda 	VARHash
.24e2	91 20		sta ($20),y			sta 	(zTemp1),y
.24e4	c8		iny				iny 								; put address of name into +3,+4
.24e5	ad 1b 05	lda $051b			lda 	VARNameAddress
.24e8	91 20		sta ($20),y			sta 	(zTemp1),y
.24ea	c8		iny				iny
.24eb	ad 1c 05	lda $051c			lda 	VARNameAddress+1
.24ee	91 20		sta ($20),y			sta 	(zTemp1),y
.24f0	ad 1e 05	lda $051e			lda 	VARType
.24f3	29 01		and #$01			and 	#1
.24f5	f0 06		beq $24fd			beq 	_CVNotString
.24f7	a0 08		ldy #$08			ldy 	#5+3
.24f9	a9 80		lda #$80			lda 	#$80
.24fb	91 20		sta ($20),y			sta 	(zTemp1),y
.24fd					_CVNotString:
.24fd	ad 3f 05	lda $053f			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2500	85 1e		sta $1e				sta 	zTemp0
.2502	ad 40 05	lda $0540			lda 	VARHashEntry+1
.2505	85 1f		sta $1f				sta 	zTemp0+1
.2507	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2509	b2 1e		lda ($1e)			lda 	(zTemp0)
.250b	92 20		sta ($20)			sta 	(zTemp1)
.250d	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.250f	91 20		sta ($20),y			sta 	(zTemp1),y
.2511	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.2513	92 1e		sta ($1e)			sta 	(zTemp0)
.2515	a5 21		lda $21				lda 	zTemp1+1
.2517	91 1e		sta ($1e),y			sta 	(zTemp0),y
.2519	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.251b	a6 21		ldx $21				ldx 	zTemp1+1
.251d	18		clc				clc 								; add 5 to point to the data.
.251e	69 05		adc #$05			adc 	#5
.2520	90 01		bcc $2523			bcc 	_VCNoCarry
.2522	e8		inx				inx
.2523					_VCNoCarry:
.2523	7a		ply				ply
.2524	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2525					VARFind:
.2525	5a		phy				phy
.2526	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2528	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.252a	85 21		sta $21				sta 	zTemp1+1
.252c	f0 1c		beq $254a			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.252e	b2 1e		lda ($1e)			lda 	(zTemp0)
.2530	85 20		sta $20				sta 	zTemp1
.2532					_VFLoop:
.2532	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2534	b1 20		lda ($20),y			lda 	(zTemp1),y
.2536	cd 1d 05	cmp $051d			cmp 	VARHash
.2539	f0 12		beq $254d			beq 	_VFHashesMatch 				; if so, check the name.
.253b					_VFNext:
.253b	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.253d	aa		tax				tax
.253e	a0 01		ldy #$01			ldy 	#1
.2540	b1 20		lda ($20),y			lda 	(zTemp1),y
.2542	85 21		sta $21				sta 	zTemp1+1
.2544	86 20		stx $20				stx 	zTemp1
.2546	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2548	d0 e8		bne $2532			bne 	_VFLoop
.254a					_VFExitFail:
.254a	7a		ply				ply
.254b	18		clc				clc
.254c	60		rts				rts
.254d					_VFHashesMatch:
.254d	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.254f	b1 20		lda ($20),y			lda 	(zTemp1),y
.2551	85 22		sta $22				sta 	zTemp2
.2553	c8		iny				iny
.2554	b1 20		lda ($20),y			lda 	(zTemp1),y
.2556	85 23		sta $23				sta 	zTemp2+1
.2558	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.255a					_VFNameCompLoop:
.255a	c8		iny				iny 								; char at a time
.255b	b9 1f 05	lda $051f,y			lda 	VARBuffer,y
.255e	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.2560	d0 d9		bne $253b			bne 	_VFNext						; next entry if different.
.2562	c9 7c		cmp #$7c			cmp 	#$7C
.2564	90 f4		bcc $255a			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2566	18		clc				clc
.2567	a5 20		lda $20				lda 	zTemp1
.2569	a6 21		ldx $21				ldx 	zTemp1+1
.256b	69 05		adc #$05			adc 	#5
.256d	90 01		bcc $2570			bcc 	_VFNNoCarry
.256f	e8		inx				inx
.2570					_VFNNoCarry:
.2570	7a		ply				ply
.2571	38		sec				sec
.2572	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2573					VARGetInfo:
.2573	98		tya				tya 								; calculate the address of the identifier start.
.2574	18		clc				clc
.2575	65 1c		adc $1c				adc 	codePtr
.2577	8d 1b 05	sta $051b			sta 	VARNameAddress
.257a	a5 1d		lda $1d				lda 	codePtr+1
.257c	69 00		adc #$00			adc 	#0
.257e	8d 1c 05	sta $051c			sta 	VARNameAddress+1
.2581	9c 1d 05	stz $051d			stz 	VARHash
.2584	a2 00		ldx #$00			ldx 	#0
.2586					_VARCopyName:
.2586	18		clc				clc 								; update the sum hash.
.2587	ad 1d 05	lda $051d			lda 	VARHash
.258a	71 1c		adc ($1c),y			adc 	(codePtr),y
.258c	8d 1d 05	sta $051d			sta 	VARHash
.258f	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.2591	c8		iny				iny
.2592	9d 1f 05	sta $051f,x			sta 	VARBuffer,x
.2595	e8		inx				inx
.2596	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2598	90 ec		bcc $2586			bcc 	_VARCopyName
.259a	8d 1e 05	sta $051e			sta 	VARType 					; save type byte
.259d	29 03		and #$03			and 	#3 							; type is 0-3
.259f	0a		asl a				asl 	a
.25a0	0a		asl a				asl 	a
.25a1	85 1e		sta $1e				sta 	zTemp0
.25a3	ad 1d 05	lda $051d			lda 	VARHash 					; force into range of hash entries per type.
.25a6	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.25a8	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.25aa	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.25ab	69 41		adc #$41			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.25ad	85 1e		sta $1e				sta 	zTemp0
.25af	8d 3f 05	sta $053f			sta 	VARHashEntry
.25b2	a9 05		lda #$05			lda 	#VARHashTables >> 8
.25b4	69 00		adc #$00			adc 	#0
.25b6	85 1f		sta $1f				sta 	zTemp0+1
.25b8	8d 40 05	sta $0540			sta 	VARHashEntry+1
.25bb	60		rts				rts
.25bc					VARClearHashTables:
.25bc	a2 00		ldx #$00			ldx 	#0
.25be					_VCHRLoop:
.25be	a9 00		lda #$00			lda 	#0
.25c0	9d 41 05	sta $0541,x			sta 	VARHashTables,x
.25c3	e8		inx				inx
.25c4	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.25c6	d0 f6		bne $25be			bne 	_VCHRLoop
.25c8	60		rts				rts
.051b					VARNameAddress:
>051b							.fill 	2
.051d					VARHash:
>051d							.fill 	1
.051e					VARType:
>051e							.fill 	1
.051f					VARBuffer:
>051f							.fill 	32
.053f					VARHashEntry:
>053f							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0541					VARHashTables:
>0541							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.25c9					VARCheckSimple:
.25c9	aa		tax				tax 								; save in X
.25ca	b1 1c		lda ($1c),y			lda 	(codePtr),y
.25cc	c9 7c		cmp #$7c			cmp 	#$7C
.25ce	d0 15		bne $25e5			bne 	_VCSComplex
.25d0	c8		iny				iny 								; consume the second byte, the type.
.25d1	8a		txa				txa  								; character (40-7F) x 4
.25d2	0a		asl a				asl 	a
.25d3	0a		asl a				asl  	a
.25d4	18		clc				clc
.25d5	69 61		adc #$61			adc 	#FastVariables & $FF
.25d7	85 0c		sta $0c				sta 	IFR0+IM0
.25d9	a9 05		lda #$05			lda 	#FastVariables >> 8
.25db	69 00		adc #$00			adc 	#0
.25dd	85 0d		sta $0d				sta 	IFR0+IM1
.25df	64 0e		stz $0e				stz 	IFR0+IM2
.25e1	64 0f		stz $0f				stz 	IFR0+IExp
.25e3	38		sec				sec 								; it's a reference
.25e4	60		rts				rts
.25e5					_VCSComplex:
.25e5	88		dey				dey	 								; extract information.
.25e6	20 73 25	jsr $2573			jsr 	VARGetInfo
.25e9	20 25 25	jsr $2525			jsr 	VARFind 					; search for variable
.25ec	b0 0a		bcs $25f8			bcs 	_VCSHaveVariable
.25ee	ad 1e 05	lda $051e			lda 	VARType 					; error if arrays, cannot autocreate
.25f1	29 02		and #$02			and 	#2
.25f3	d0 25		bne $261a			bne 	_VCNoCreate
.25f5	20 d1 24	jsr $24d1			jsr 	VARCreate 					; create variable
.25f8					_VCSHaveVariable:
.25f8	48		pha				pha 								; save LSB on the stack
.25f9	ad 1e 05	lda $051e			lda 	VARType 					; get var type, and shift bit 1 into carry
.25fc	6a		ror a				ror 	a
.25fd	6a		ror a				ror 	a
.25fe	68		pla				pla 								; restore LSB
.25ff	90 08		bcc $2609			bcc 	_VCSNotArray 				; skip if not an array
.2601	20 69 24	jsr $2469			jsr 	VARArrayLookup 				; look for subscripts.
.2604	48		pha				pha 								; check )
.2605	20 31 23	jsr $2331			jsr 	ERRCheckRParen
.2608	68		pla				pla
.2609					_VCSNotArray:
.2609	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.260b	85 0c		sta $0c				sta 	IFR0+IM0
.260d	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.260f	ad 1e 05	lda $051e			lda 	VARType 					; number/string bit into carry
.2612	6a		ror a				ror 	a
.2613	a9 00		lda #$00			lda 	#0
.2615	6a		ror a				ror 	a 							; now $00 or $80
.2616	85 0f		sta $0f				sta 	IFR0+IExp
.2618	38		sec				sec 								; it's a reference
.2619	60		rts				rts
.261a					_VCNoCreate:
.261a	4c d8 22	jmp $22d8		jmp	ErrorV_uninitialised
.0561					FastVariables:
>0561							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.261d					IFInitialise:
.261d	9c d1 05	stz $05d1			stz 	IFStackIndex
.2620	60		rts				rts
.2621					IFloatSubtract:
.2621	da		phx				phx
.2622	a2 0c		ldx #$0c			ldx 	#IFR0
.2624	20 3d 2c	jsr $2c3d			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2627	fa		plx				plx
.2628					IFloatAdd:
.2628	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.262a	05 0f		ora $0f				ora 	IFR0+IExp
.262c	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.262e	d0 4e		bne $267e			bne 	_IFloatAddDecimals 			; decimal version.
.2630					_IFAddSubMantissa:
.2630	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2632	45 0f		eor $0f				eor 	IFR0+IExp
.2634	29 40		and #$40			and 	#IFSign
.2636	d0 21		bne $2659			bne 	_IFloatSubMantissa
.2638	18		clc				clc 								; do the actual addition
.2639	a5 0c		lda $0c			lda 	IFR0+IM0
.263b	75 00		adc $00,x		adc 		IM0,x
.263d	85 0c		sta $0c			sta 	IFR0+IM0
.263f	a5 0d		lda $0d			lda 	IFR0+IM1
.2641	75 01		adc $01,x		adc 		IM1,x
.2643	85 0d		sta $0d			sta 	IFR0+IM1
.2645	a5 0e		lda $0e			lda 	IFR0+IM2
.2647	75 02		adc $02,x		adc 		IM2,x
.2649	85 0e		sta $0e			sta 	IFR0+IM2
.264b	10 29		bpl $2676			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.264d	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.264f	20 61 2c	jsr $2c61			jsr 	IFloatShiftRight
.2652	20 8b 2c	jsr $2c8b			jsr 	IFloatIncExponent
.2655	d0 1f		bne $2676			bne 	_IFloatAddExit
.2657	38		sec				sec 								; overflowed numerically.
.2658	60		rts				rts
.2659					_IFloatSubMantissa:
.2659	38		sec				sec 								; do the subtraction R0-Rx
.265a	a5 0c		lda $0c			lda 	IFR0+IM0
.265c	f5 00		sbc $00,x		sbc 		IM0,x
.265e	85 0c		sta $0c			sta 	IFR0+IM0
.2660	a5 0d		lda $0d			lda 	IFR0+IM1
.2662	f5 01		sbc $01,x		sbc 		IM1,x
.2664	85 0d		sta $0d			sta 	IFR0+IM1
.2666	a5 0e		lda $0e			lda 	IFR0+IM2
.2668	f5 02		sbc $02,x		sbc 		IM2,x
.266a	85 0e		sta $0e			sta 	IFR0+IM2
.266c	b0 08		bcs $2676			bcs 	_IFloatAddExit 				; no borrow so we are done.
.266e	a2 0c		ldx #$0c			ldx 	#IFR0
.2670	20 45 2c	jsr $2c45			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2673	20 3d 2c	jsr $2c3d			jsr 	IFloatNegate 				; negate
.2676					_IFloatAddExit:
.2676	18		clc				clc
.2677	60		rts				rts
.2678					_IFloatZeroAdd:
.2678	fa		plx				plx 								; return this value in R0
.2679	20 c3 2b	jsr $2bc3			jsr 	IFloatCopyFromRegister
.267c	18		clc				clc
.267d	60		rts				rts
.267e					_IFloatAddDecimals:
.267e	20 2b 2c	jsr $2c2b			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2681	f0 f3		beq $2676			beq 	_IFloatAddExit
.2683	20 69 2c	jsr $2c69			jsr 	IFloatNormalise 			; normalise RX
.2686	da		phx				phx 								; normalise R0
.2687	a2 0c		ldx #$0c			ldx 	#IFR0
.2689	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero
.268c	f0 ea		beq $2678			beq 	_IFloatZeroAdd
.268e	20 69 2c	jsr $2c69			jsr 	IFloatNormalise
.2691	fa		plx				plx
.2692	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.2694	29 3f		and #$3f			and 	#IFXMask
.2696	38		sec				sec
.2697	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2699	85 0a		sta $0a				sta 	iTemp0
.269b	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.269d	29 3f		and #$3f			and 	#IFXMask
.269f	38		sec				sec
.26a0	e9 20		sbc #$20			sbc 	#$20
.26a2	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.26a4	b0 02		bcs $26a8			bcs 	_IFloatHaveLarger
.26a6	a5 0a		lda $0a				lda 	iTemp0
.26a8					_IFloatHaveLarger:
.26a8	18		clc				clc 								; get the actual one back.
.26a9	69 20		adc #$20			adc 	#$20 						; shift both to that.
.26ab	20 b8 26	jsr $26b8			jsr 	_IFShiftXToA
.26ae	da		phx				phx
.26af	a2 0c		ldx #$0c			ldx 	#IFR0
.26b1	20 b8 26	jsr $26b8			jsr 	_IFShiftXToA
.26b4	fa		plx				plx
.26b5	4c 30 26	jmp $2630			jmp 	_IFAddSubMantissa 			; do the adding bit.
.26b8					_IFShiftXToA:
.26b8	8d c9 05	sta $05c9			sta 	IFTarget
.26bb	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero 			; check adding zero ?
.26be	f0 11		beq $26d1			beq 	_IFSXExit
.26c0					_IFSXLoop:
.26c0	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.26c2	29 3f		and #$3f			and 	#IFXMask
.26c4	cd c9 05	cmp $05c9			cmp 	IFTarget
.26c7	f0 08		beq $26d1			beq 	_IFSXExit
.26c9	20 61 2c	jsr $2c61			jsr 	IFloatShiftRight
.26cc	20 8b 2c	jsr $2c8b			jsr 	IFloatIncExponent
.26cf	80 ef		bra $26c0			bra 	_IFSXLoop
.26d1					_IFSXExit:
.26d1	60		rts				rts
.05c9					IFTarget:
>05c9							.fill 	1
.26d2					IFloatMultiply:
.26d2	8e c9 05	stx $05c9			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.26d5	20 8d 27	jsr $278d			jsr 	IFCalculateNewSign
.26d8	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.26da	05 0f		ora $0f				ora 	IFR0+IExp
.26dc	29 3f		and #$3f			and 	#IFXMask
.26de	15 01		ora $01,x			ora 	IM1,x
.26e0	05 0d		ora $0d				ora 	IFR0+IM1
.26e2	15 02		ora $02,x			ora 	IM2,x
.26e4	05 0e		ora $0e				ora 	IFR0+IM2
.26e6	d0 0a		bne $26f2			bne 	_IFMStandard
.26e8	20 0e 2c	jsr $2c0e			jsr 	IFloatMultiply8BitRx
.26eb	ad cb 05	lda $05cb			lda 	IFNewSign
.26ee	85 0f		sta $0f				sta 	IFR0+IExp
.26f0	18		clc				clc
.26f1	60		rts				rts
.26f2					_IFMStandard:
.26f2	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.26f4	20 84 27	jsr $2784			jsr 	IFMSignExtend
.26f7	8d ca 05	sta $05ca			sta 	IFNewExponent
.26fa	a5 0f		lda $0f				lda 	IFR0+IExp
.26fc	20 84 27	jsr $2784			jsr 	IFMSignExtend
.26ff	18		clc				clc
.2700	6d ca 05	adc $05ca			adc 	IFNewExponent
.2703	8d ca 05	sta $05ca			sta 	IFNewExponent
.2706	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2708	20 d4 2b	jsr $2bd4			jsr 	IFloatCopyToRegister
.270b	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.270d	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.2710					_IFMLoop:
.2710	a2 18		ldx #$18			ldx 	#IFRTemp
.2712	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero
.2715	f0 3a		beq $2751			beq 	_IFMExit
.2717	ae c9 05	ldx $05c9			ldx 	IFTarget 					; look at adder MSB
.271a	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.271c	10 03		bpl $2721			bpl	 	_IFMTargetOkay
.271e	20 75 27	jsr $2775			jsr 	_IFMShiftAll
.2721					_IFMTargetOkay:
.2721	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2723	29 01		and #$01			and 	#1
.2725	f0 16		beq $273d			beq 	_IFMNoAdd
.2727	ae c9 05	ldx $05c9			ldx 	IFTarget 					; add adder
.272a	18		clc				clc
.272b	a5 0c		lda $0c			lda 	IFR0+IM0
.272d	75 00		adc $00,x		adc 		IM0,x
.272f	85 0c		sta $0c			sta 	IFR0+IM0
.2731	a5 0d		lda $0d			lda 	IFR0+IM1
.2733	75 01		adc $01,x		adc 		IM1,x
.2735	85 0d		sta $0d			sta 	IFR0+IM1
.2737	a5 0e		lda $0e			lda 	IFR0+IM2
.2739	75 02		adc $02,x		adc 		IM2,x
.273b	85 0e		sta $0e			sta 	IFR0+IM2
.273d					_IFMNoAdd:
.273d	a5 0e		lda $0e				lda 	IFR0+IM2
.273f	10 03		bpl $2744			bpl 	_IFMResultOkay
.2741	20 75 27	jsr $2775			jsr 	_IFMShiftAll
.2744					_IFMResultOkay:
.2744	a2 18		ldx #$18			ldx 	#IFRTemp
.2746	20 61 2c	jsr $2c61			jsr 	IFloatShiftRight
.2749	ae c9 05	ldx $05c9			ldx 	IFTarget
.274c	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.274f	80 bf		bra $2710			bra 	_IFMLoop
.2751					_IFMExit:
.2751	ad ca 05	lda $05ca			lda 	IFNewExponent 				; validate new exponent.
.2754	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2756	90 0f		bcc $2767			bcc 	_IFMOkay
.2758	c9 e0		cmp #$e0			cmp 	#$E0
.275a	b0 0b		bcs $2767			bcs 	_IFMOkay
.275c	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.275e	f0 13		beq $2773			beq 	_IFMError
.2760	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.2762	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.2765	18		clc				clc
.2766	60		rts				rts
.2767					_IFMOkay:
.2767	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2769	0d cb 05	ora $05cb			ora 	IFNewSign
.276c	85 0f		sta $0f				sta 	IFR0+IExp
.276e	18		clc				clc
.276f	60		rts				rts
.2770	4c ff ff	jmp $ffff			jmp 	$FFFF
.2773					_IFMError:
.2773	38		sec				sec
.2774	60		rts				rts
.2775					_IFMShiftAll:
.2775	a2 0c		ldx #$0c			ldx 	#IFR0
.2777	20 61 2c	jsr $2c61			jsr 	IFloatShiftRight
.277a	ae c9 05	ldx $05c9			ldx 	IFTarget
.277d	20 61 2c	jsr $2c61			jsr 	IFloatShiftRight
.2780	ee ca 05	inc $05ca			inc 	IFNewExponent
.2783	60		rts				rts
.2784					IFMSignExtend:
.2784	29 3f		and #$3f			and 	#IFXMask
.2786	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2788	90 02		bcc $278c			bcc 	_IFMNoSXX
.278a	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.278c					_IFMNoSXX:
.278c	60		rts				rts
.278d					IFCalculateNewSign:
.278d	b5 03		lda $03,x			lda 	IExp,x
.278f	45 0f		eor $0f				eor 	IFR0+IExp
.2791	29 40		and #$40			and 	#IFSign
.2793	8d cb 05	sta $05cb			sta 	IFNewSign
.2796	60		rts				rts
.05ca					IFNewExponent:
>05ca							.fill 	1
.05cb					IFNewSign:
>05cb							.fill 	1
.2797					IFloatDivideInteger:
.2797	20 b0 27	jsr $27b0			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.279a	b0 06		bcs $27a2			bcs 	_IFDIExit
.279c	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.279e	20 c3 2b	jsr $2bc3			jsr 	IFloatCopyFromRegister
.27a1	18		clc				clc
.27a2					_IFDIExit:
.27a2	60		rts				rts
.27a3					IFloatModulusInteger:
.27a3	20 b0 27	jsr $27b0			jsr 	IFloatDivideIntegerCommon
.27a6	b0 07		bcs $27af			bcs 	_IFMIExit
.27a8	ae c9 05	ldx $05c9			ldx 	IFTarget
.27ab	20 c3 2b	jsr $2bc3			jsr 	IFloatCopyFromRegister
.27ae	18		clc				clc
.27af					_IFMIExit:
.27af	60		rts				rts
.27b0					IFloatDivideIntegerCommon:
.27b0	8e c9 05	stx $05c9			stx 	IFTarget  					; this is s1, s0 = R0
.27b3	20 8d 27	jsr $278d			jsr 	IFCalculateNewSign 			; calculate sign of result
.27b6	20 de 27	jsr $27de			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.27b9	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.27bb	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero
.27be	f0 1c		beq $27dc			beq 	_IFDIDivZero
.27c0	ae c9 05	ldx $05c9			ldx 	IFTarget 					; zero Rx (S1)
.27c3	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.27c6	5a		phy				phy
.27c7	a0 18		ldy #$18			ldy 	#24
.27c9					_IFDILoop:
.27c9	20 ef 27	jsr $27ef			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.27cc	20 fb 27	jsr $27fb			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.27cf	88		dey				dey
.27d0	d0 f7		bne $27c9			bne 	_IFDILoop 					; do it 24 times
.27d2	7a		ply				ply
.27d3	ad cb 05	lda $05cb			lda 	IFNewSign 					; set sign of result.
.27d6	29 40		and #$40			and 	#IFSign
.27d8	85 1b		sta $1b				sta 	IFRTemp+IExp
.27da	18		clc				clc 								; is okay.
.27db	60		rts				rts
.27dc					_IFDIDivZero:
.27dc	38		sec				sec
.27dd	60		rts				rts
.27de					IFDCopyRXToRTemp:
.27de	b5 00		lda $00,x			lda 	IM0,x
.27e0	85 18		sta $18				sta 	IFRTemp+IM0
.27e2	b5 01		lda $01,x			lda 	IM1,x
.27e4	85 19		sta $19				sta 	IFRTemp+IM1
.27e6	b5 02		lda $02,x			lda 	IM2,x
.27e8	85 1a		sta $1a				sta 	IFRTemp+IM2
.27ea	b5 03		lda $03,x			lda 	IExp,x
.27ec	85 1b		sta $1b				sta 	IFRTemp+IExp
.27ee	60		rts				rts
.27ef					IFDShiftSTempS1Left:
.27ef	a2 18		ldx #$18			ldx 	#IFRTemp
.27f1	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft
.27f4	ae c9 05	ldx $05c9			ldx 	IFTarget
.27f7	20 5a 2c	jsr $2c5a			jsr 	IFloatRotateLeft
.27fa	60		rts				rts
.27fb					IFDTrySubtract:
.27fb	ae c9 05	ldx $05c9			ldx 	IFTarget 					; s1 = Rx
.27fe	38		sec				sec 								; subtract, saving the results on the stack.
.27ff	b5 00		lda $00,x			lda 	IM0,x
.2801	e5 0c		sbc $0c				sbc 	IFR0+IM0
.2803	48		pha				pha
.2804	b5 01		lda $01,x			lda 	IM1,x
.2806	e5 0d		sbc $0d				sbc 	IFR0+IM1
.2808	48		pha				pha
.2809	b5 02		lda $02,x			lda 	IM2,x
.280b	e5 0e		sbc $0e				sbc 	IFR0+IM2
.280d	b0 03		bcs $2812			bcs 	_IFDCanSubtract
.280f	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2810	68		pla				pla
.2811	60		rts				rts
.2812					_IFDCanSubtract:
.2812	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2814	68		pla				pla
.2815	95 01		sta $01,x			sta 	IM1,x
.2817	68		pla				pla
.2818	95 00		sta $00,x			sta 	IM0,x
.281a	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.281c	d0 06		bne $2824			bne 	_IFDCSExit
.281e	e6 19		inc $19				inc 	IFRTemp+IM1
.2820	d0 02		bne $2824			bne 	_IFDCSExit
.2822	e6 1a		inc $1a				inc 	IFRTemp+IM2
.2824					_IFDCSExit:
.2824	60		rts				rts
.2825					IFloatBitwiseAnd:
.2825	5a		phy				phy
.2826	20 6a 28	jsr $286a			jsr 	IFPreProcessBitwise 		; set up everything.
.2829	d0 0f		bne $283a			bne 	_IFBAExit
.282b					_IFBALoop:
.282b	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.282e	35 00		and $00,x			and 	IM0,x
.2830	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2833	e8		inx				inx
.2834	c8		iny				iny
.2835	c0 03		cpy #$03			cpy 	#3
.2837	d0 f2		bne $282b			bne 	_IFBALoop
.2839	18		clc				clc
.283a					_IFBAExit:
.283a	7a		ply				ply
.283b	60		rts				rts
.283c					IFloatBitwiseOr:
.283c	5a		phy				phy
.283d	20 6a 28	jsr $286a			jsr 	IFPreProcessBitwise 		; set up everything.
.2840	d0 0f		bne $2851			bne 	_IFBAExit
.2842					_IFBALoop:
.2842	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2845	15 00		ora $00,x			ora 	IM0,x
.2847	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.284a	e8		inx				inx
.284b	c8		iny				iny
.284c	c0 03		cpy #$03			cpy 	#3
.284e	d0 f2		bne $2842			bne 	_IFBALoop
.2850	18		clc				clc
.2851					_IFBAExit:
.2851	7a		ply				ply
.2852	60		rts				rts
.2853					IFloatBitwiseXor:
.2853	5a		phy				phy
.2854	20 6a 28	jsr $286a			jsr 	IFPreProcessBitwise 		; set up everything.
.2857	d0 0f		bne $2868			bne 	_IFBAExit
.2859					_IFBALoop:
.2859	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.285c	55 00		eor $00,x			eor 	IM0,x
.285e	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2861	e8		inx				inx
.2862	c8		iny				iny
.2863	c0 03		cpy #$03			cpy 	#3
.2865	d0 f2		bne $2859			bne 	_IFBALoop
.2867	18		clc				clc
.2868					_IFBAExit:
.2868	7a		ply				ply
.2869	60		rts				rts
.286a					IFPreProcessBitwise:
.286a	a0 00		ldy #$00			ldy 	#0 							; set index.
.286c	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.286e	15 03		ora $03,x			ora 	IExp,x
.2870	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2872	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2874	38		sec				sec 								; carry set just in cases.
.2875	60		rts				rts
.2876					IFloatAbsoluteR0:
.2876	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.2878	29 bf		and #$bf			and 	#IFSign ^ 255
.287a	85 0f		sta $0f				sta 	IFR0+IExp
.287c	18		clc				clc
.287d	60		rts				rts
.287e					IFloatSquareRootR0:
.287e	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.2880	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero
.2883	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.2885	29 40		and #$40			and 	#IFSign
.2887	d0 2f		bne $28b8			bne 	_IFSRFail
.2889	20 69 2c	jsr $2c69			jsr 	IFloatNormalise 			; it will work better !
.288c	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.288e	20 d4 2b	jsr $2bd4			jsr 	IFloatCopyToRegister
.2891	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2893	20 84 27	jsr $2784			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2896	18		clc				clc
.2897	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2899	85 0f		sta $0f				sta 	IFR0+IExp
.289b	4a		lsr a				lsr 	a 							; which we can halve.
.289c	38		sec				sec 								; convert back
.289d	e9 17		sbc #$17			sbc 	#23
.289f	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.28a1	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.28a3	20 ba 28	jsr $28ba			jsr 	_IFSRNewton
.28a6	20 ba 28	jsr $28ba			jsr 	_IFSRNewton
.28a9	20 ba 28	jsr $28ba			jsr 	_IFSRNewton
.28ac	20 ba 28	jsr $28ba			jsr 	_IFSRNewton
.28af	18		clc				clc
.28b0	60		rts				rts
.28b1					_IFSRZero:
.28b1	a2 0c		ldx #$0c			ldx 	#IFR0
.28b3	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.28b6	18		clc				clc
.28b7	60		rts				rts
.28b8					_IFSRFail:
.28b8	38		sec				sec
.28b9	60		rts				rts
.28ba					_IFSRNewton:
.28ba	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.28bc	20 81 2b	jsr $2b81			jsr 	IFloatPushRx
.28bf	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.28c1	20 81 2b	jsr $2b81			jsr 	IFloatPushRx
.28c4	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.28c6	20 55 29	jsr $2955			jsr 	IFloatDivideFloat
.28c9	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.28cb	20 a2 2b	jsr $2ba2			jsr 	IFloatPullRx
.28ce	20 28 26	jsr $2628			jsr 	IFloatAdd 					; now guess + original/guess
.28d1	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.28d3	20 61 2c	jsr $2c61			jsr 	IFloatShiftRight
.28d6	a2 10		ldx #$10			ldx 	#IFR1
.28d8	20 a2 2b	jsr $2ba2			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.28db	60		rts				rts
.28dc					IFloatFractionalR0:
.28dc	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.28de	29 3f		and #$3f			and 	#IFXMask
.28e0	f0 17		beq $28f9			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.28e2	20 76 28	jsr $2876			jsr 	IFloatAbsoluteR0 			; absolute value R9
.28e5	a2 0c		ldx #$0c			ldx 	#IFR0
.28e7	20 69 2c	jsr $2c69			jsr 	IFloatNormalise 			; normalise R0
.28ea	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.28ec	20 d4 2b	jsr $2bd4			jsr 	IFloatCopyToRegister
.28ef	20 32 29	jsr $2932			jsr 	IFloatIntegerR0 			; take integer part of R0
.28f2	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.28f4	20 21 26	jsr $2621			jsr 	IFloatSubtract
.28f7	80 05		bra $28fe			bra 	_FIPExit
.28f9					_FIPZero:
.28f9	a2 0c		ldx #$0c			ldx 	#IFR0
.28fb	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.28fe					_FIPExit:
.28fe	18		clc				clc
.28ff	60		rts				rts
.2900					IFloatCompare:
.2900	20 21 26	jsr $2621			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2903	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2905	05 0f		ora $0f				ora 	IFR0+IExp
.2907	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.2909	29 3f		and #$3f			and 	#IFXMask
.290b	d0 19		bne $2926			bne 	_IFCNonInteger
.290d	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero 			; check if zero
.2910	f0 0f		beq $2921			beq 	_IFCZero
.2912					_IFCReturnSign:
.2912	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2914	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2916	48		pha				pha
.2917	a9 01		lda #$01			lda 	#1
.2919	20 34 2c	jsr $2c34			jsr 	IFloatSetByte 				; return to +1
.291c	68		pla				pla 								; sign bit back
.291d	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.291f	18		clc				clc
.2920	60		rts				rts
.2921					_IFCZero:
.2921	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.2924	18		clc				clc
.2925	60		rts				rts
.2926					_IFCNonInteger:
.2926	a5 0c		lda $0c				lda 	IFR0+IM0
.2928	29 00		and #$00			and		#$00
.292a	05 0d		ora $0d				ora 	IFR0+IM1
.292c	05 0e		ora $0e				ora 	IFR0+IM2
.292e	f0 f1		beq $2921			beq 	_IFCZero 					; near enough !
.2930	80 e0		bra $2912			bra 	_IFCReturnSign 				; return the sign of the difference.
.2932					IFloatIntegerR0:
.2932	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2934	29 3f		and #$3f			and 	#IFXMask
.2936	f0 1b		beq $2953			beq 	_FIPExit 					; if so do nothing
.2938	a2 0c		ldx #$0c			ldx 	#IFR0
.293a	20 69 2c	jsr $2c69			jsr 	IFloatNormalise 			; normalise
.293d	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero 			; is it zero ?
.2940	f0 0e		beq $2950			beq 	_FIPZero 					; if so return zero.
.2942					_FIPShift:
.2942	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2944	29 20		and #$20			and 	#$20 						; still -ve
.2946	f0 0b		beq $2953			beq 	_FIPExit
.2948	20 61 2c	jsr $2c61			jsr 	IFloatShiftRight 			; shift mantissa right
.294b	20 8b 2c	jsr $2c8b			jsr 	IFloatIncExponent 			; bump exponent
.294e	80 f2		bra $2942			bra 	_FIPShift
.2950					_FIPZero:
.2950	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.2953					_FIPExit:
.2953	18		clc				clc
.2954	60		rts				rts
.2955					IFloatDivideFloat:
.2955	8e c9 05	stx $05c9			stx 	IFTarget  					; this is s1, s0 = R0
.2958	20 8d 27	jsr $278d			jsr 	IFCalculateNewSign 			; calculate sign of result
.295b	20 69 2c	jsr $2c69			jsr 	IFloatNormalise 			; normalise RX
.295e	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.2960	20 69 2c	jsr $2c69			jsr 	IFloatNormalise
.2963	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero
.2966	f0 56		beq $29be			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2968	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.296a	20 84 27	jsr $2784			jsr 	IFMSignExtend
.296d	8d ca 05	sta $05ca			sta 	IFNewExponent
.2970	ae c9 05	ldx $05c9			ldx 	IFTarget 					; calculate s1.exponent
.2973	b5 03		lda $03,x			lda 	IExp,x
.2975	20 84 27	jsr $2784			jsr 	IFMSignExtend
.2978	38		sec				sec
.2979	ed ca 05	sbc $05ca			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.297c	38		sec				sec
.297d	e9 17		sbc #$17			sbc 	#23
.297f	8d ca 05	sta $05ca			sta 	IFNewExponent
.2982	20 c0 29	jsr $29c0			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2985	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.2987	10 08		bpl $2991			bpl 	_IFDFNoShiftResult
.2989	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.298b	20 61 2c	jsr $2c61			jsr 	IFloatShiftRight
.298e	ee ca 05	inc $05ca			inc 	IFNewExponent
.2991					_IFDFNoShiftResult:
.2991	ad ca 05	lda $05ca			lda 	IFNewExponent 				; underflow/overflow check.
.2994	30 06		bmi $299c			bmi 	_IFDFCheckUnderflow
.2996	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2998	b0 24		bcs $29be			bcs 	_IFDFDivZero
.299a	80 11		bra $29ad			bra		_IFDFExit
.299c					_IFDFCheckUnderflow:
.299c	ad ca 05	lda $05ca			lda 	IFNewExponent 				; shift into a legal exponent.
.299f	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.29a1	b0 0a		bcs $29ad			bcs 	_IFDFExit
.29a3	ee ca 05	inc $05ca			inc 	IFNewExponent
.29a6	a2 18		ldx #$18			ldx 	#IFRTemp
.29a8	20 61 2c	jsr $2c61			jsr 	IFloatShiftRight
.29ab	80 ef		bra $299c			bra 	_IFDFCheckUnderflow
.29ad					_IFDFExit:
.29ad	ad ca 05	lda $05ca			lda 	IFNewExponent 				; combine exponent and sign.
.29b0	29 3f		and #$3f			and 	#IFXMask
.29b2	0d cb 05	ora $05cb			ora 	IFNewSign
.29b5	85 1b		sta $1b				sta 	IFRTemp+IExp
.29b7	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.29b9	20 c3 2b	jsr $2bc3			jsr 	IFloatCopyFromRegister
.29bc	18		clc				clc
.29bd	60		rts				rts
.29be					_IFDFDivZero:
.29be	38		sec				sec
.29bf	60		rts				rts
.29c0					IFloatDivideSupport:
.29c0	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.29c2	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.29c5	5a		phy				phy 								; main division loop x 23
.29c6	a0 17		ldy #$17			ldy 	#23
.29c8					_IFDSLoop:
.29c8	20 fb 27	jsr $27fb			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.29cb	20 ef 27	jsr $27ef			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.29ce	88		dey				dey
.29cf	d0 f7		bne $29c8			bne 	_IFDSLoop 					; do it 24 times
.29d1	7a		ply				ply
.29d2	60		rts				rts
.29d3					IFloatIntegerToStringR0:
.29d3	8d cc 05	sta $05cc			sta 	IFBase 						; save base to use.
.29d6	20 b3 2c	jsr $2cb3			jsr 	IFloatBufferReset			; empty buffer
.29d9	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.29db	29 3f		and #$3f			and 	#IFXMask
.29dd	d0 1e		bne $29fd			bne 	_IFIFail
.29df	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.29e1	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero
.29e4	f0 0e		beq $29f4			beq 	_IFINotNegative
.29e6	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.29e8	29 40		and #$40			and 	#IFSign
.29ea	f0 08		beq $29f4			beq 	_IFINotNegative
.29ec	a9 2d		lda #$2d			lda 	#"-"						; output -
.29ee	20 c2 2c	jsr $2cc2			jsr 	IFloatBufferWrite
.29f1	20 3d 2c	jsr $2c3d			jsr 	IFloatNegate 				; tidy up !
.29f4					_IFINotNegative:
.29f4	20 ff 29	jsr $29ff			jsr 	_IFIRecursiveConvert 		; start converting
.29f7	20 ba 2c	jsr $2cba			jsr 	IFloatGetBufferAddress
.29fa	18		clc				clc
.29fb	80 01		bra $29fe			bra 	_IFIExit
.29fd					_IFIFail:
.29fd	38		sec				sec
.29fe					_IFIExit:
.29fe	60		rts				rts
.29ff					_IFIRecursiveConvert:
.29ff	a2 10		ldx #$10			ldx 	#IFR1
.2a01	20 d4 2b	jsr $2bd4			jsr 	IFloatCopyToRegister 		; R0->R1
.2a04	a2 0c		ldx #$0c			ldx 	#IFR0
.2a06	ad cc 05	lda $05cc			lda 	IFBase 						; Base -> R0
.2a09	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.2a0c	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.2a0e	20 97 27	jsr $2797			jsr 	IFloatDivideInteger
.2a11	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.2a13	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero
.2a16	f0 09		beq $2a21			beq 	_IFIOutDigit
.2a18	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.2a1a	48		pha				pha
.2a1b	20 ff 29	jsr $29ff			jsr 	_IFIRecursiveConvert 		; convert the divider
.2a1e	68		pla				pla
.2a1f	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.2a21					_IFIOutDigit:
.2a21	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.2a23	c9 0a		cmp #$0a			cmp	 	#10
.2a25	90 02		bcc $2a29			bcc 	_IFINotHex
.2a27	69 06		adc #$06			adc 	#6
.2a29					_IFINotHex:
.2a29	69 30		adc #$30			adc 	#48
.2a2b	20 c2 2c	jsr $2cc2			jsr 	IFloatBufferWrite
.2a2e	60		rts				rts
.05cc					IFBase:
>05cc							.fill 	1
.2a2f					IFloatFloatToStringR0:
.2a2f	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2a31	20 81 2b	jsr $2b81			jsr 	IFloatPushRx
.2a34	20 d4 2b	jsr $2bd4			jsr 	IFloatCopyToRegister
.2a37	20 32 29	jsr $2932			jsr 	IFloatIntegerR0				; make R0 integer
.2a3a	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2a3c	20 d3 29	jsr $29d3			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2a3f	9c cd 05	stz $05cd			stz 	IFloatDecimalCount 			; zero the decimal count.
.2a42	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.2a44	29 3f		and #$3f			and 	#IFXMask
.2a46	f0 44		beq $2a8c			beq 	_IFFSExit
.2a48					_IFloatFracLoop:
.2a48	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.2a4a	20 c3 2b	jsr $2bc3			jsr 	IFloatCopyFromRegister
.2a4d	20 dc 28	jsr $28dc			jsr 	IFloatFractionalR0
.2a50	20 69 2c	jsr $2c69			jsr 	IFloatNormalise
.2a53	a2 14		ldx #$14			ldx 	#IFR2
.2a55	20 d4 2b	jsr $2bd4			jsr 	IFloatCopyToRegister 		; copy to R2
.2a58	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.2a5a	a9 0a		lda #$0a			lda 	#10
.2a5c	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.2a5f	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.2a61	20 d2 26	jsr $26d2			jsr 	IFloatMultiply
.2a64	a2 14		ldx #$14			ldx 	#IFR2
.2a66	20 d4 2b	jsr $2bd4			jsr 	IFloatCopyToRegister
.2a69	20 32 29	jsr $2932			jsr 	IFloatIntegerR0 			; get integer part of R0
.2a6c	ad cd 05	lda $05cd			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2a6f	c9 03		cmp #$03			cmp 	#3
.2a71	f0 16		beq $2a89			beq 	_IFFSExitStripZero
.2a73	ad cd 05	lda $05cd			lda 	IFloatDecimalCount 			; written the DP yet ?
.2a76	d0 05		bne $2a7d			bne 	_IFloatNotFirst
.2a78	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2a7a	20 c2 2c	jsr $2cc2			jsr 	IFloatBufferWrite
.2a7d					_IFloatNotFirst:
.2a7d	ee cd 05	inc $05cd			inc 	IFloatDecimalCount
.2a80	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.2a82	09 30		ora #$30			ora 	#"0"						; ASCII
.2a84	20 c2 2c	jsr $2cc2			jsr 	IFloatBufferWrite 			; write to the buffer.
.2a87	80 bf		bra $2a48			bra 	_IFloatFracLoop
.2a89					_IFFSExitStripZero:
.2a89	20 d1 2c	jsr $2cd1			jsr 	IFloatStripTrailingZeros
.2a8c					_IFFSExit:
.2a8c	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.2a8e	20 a2 2b	jsr $2ba2			jsr 	IFloatPullRx
.2a91	20 ba 2c	jsr $2cba			jsr 	IFloatGetBufferAddress
.2a94	18		clc				clc
.2a95	60		rts				rts
.05cd					IFloatDecimalCount:
>05cd							.fill 	1
.2a96					IFloatStringToFloatR0:
.2a96	8d ce 05	sta $05ce			sta 	IFCount 					; save it out.
.2a99	86 0a		stx $0a				stx 	iTemp0
.2a9b	84 0b		sty $0b				sty 	iTemp0+1
.2a9d	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.2a9f	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.2aa2	9c cf 05	stz $05cf			stz 	IFSignFlag 					; clear the sign flag
.2aa5	20 32 2b	jsr $2b32			jsr 	IFSTFGetNext 				; get first
.2aa8	f0 1b		beq $2ac5			beq 	_IFSTFFail 					; no character
.2aaa	90 10		bcc $2abc			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2aac	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2aae	d0 15		bne $2ac5			bne 	_IFSTFFail
.2ab0	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2ab2	8d cf 05	sta $05cf			sta 	IFSignFlag
.2ab5					_IFSTFLoop:
.2ab5	20 32 2b	jsr $2b32			jsr 	IFSTFGetNext 				; get next
.2ab8	b0 0b		bcs $2ac5			bcs 	_IFSTFFail 					; bad character.
.2aba	f0 11		beq $2acd			beq 	_IFSTFExit 					; end of data
.2abc					_IFSTFHaveChar:
.2abc	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2abe	f0 08		beq $2ac8			beq 	_IFSTFDecimal
.2ac0	20 56 2b	jsr $2b56			jsr 	IFSTFAddR0 					; add number in
.2ac3	80 f0		bra $2ab5			bra 	_IFSTFLoop 					; keep going until . or end.
.2ac5					_IFSTFFail:
.2ac5	38		sec				sec
.2ac6	80 0d		bra $2ad5			bra 	_IFSTFReturn
.2ac8					_IFSTFDecimal:
.2ac8	20 dd 2a	jsr $2add			jsr 	IFSTFDecimal 				; call the decimal places code.
.2acb	b0 08		bcs $2ad5			bcs 	_IFSTFReturn 				; error
.2acd					_IFSTFExit:
.2acd	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2acf	0d cf 05	ora $05cf			ora 	IFSignFlag
.2ad2	85 0f		sta $0f				sta 	IFR0+IExp
.2ad4	18		clc				clc
.2ad5					_IFSTFReturn:
.2ad5	60		rts				rts
.2ad6					IFloatAddDecimalToR0:
.2ad6	8d ce 05	sta $05ce			sta 	IFCount 					; save it out.
.2ad9	86 0a		stx $0a				stx 	iTemp0
.2adb	84 0b		sty $0b				sty 	iTemp0+1
.2add					IFSTFDecimal:
.2add	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2adf	20 81 2b	jsr $2b81			jsr 	IFloatPushRx
.2ae2	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2ae4	20 32 2c	jsr $2c32			jsr 	IFloatSetZero
.2ae7	9c d0 05	stz $05d0			stz 	IFDecimalPlaces
.2aea					_IFSTDLoop:
.2aea	20 32 2b	jsr $2b32			jsr 	IFSTFGetNext 				; get next
.2aed	b0 41		bcs $2b30			bcs 	_IFSTFFail2 				; bad character.
.2aef	f0 11		beq $2b02			beq 	_IFSTFComplete 				; end of data, work out the result.
.2af1	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2af3	f0 39		beq $2b2e			beq 	_IFSTFExit2
.2af5	20 56 2b	jsr $2b56			jsr 	IFSTFAddR0 					; add number in
.2af8	ee d0 05	inc $05d0			inc 	IFDecimalPlaces 			; count decimals
.2afb	ad d0 05	lda $05d0			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2afe	c9 03		cmp #$03			cmp 	#3
.2b00	90 e8		bcc $2aea			bcc 	_IFSTDLoop
.2b02					_IFSTFComplete:
.2b02	ad d0 05	lda $05d0			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2b05	f0 27		beq $2b2e			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2b07	3a		dec a				dec 	a 							; table indexed from 1.
.2b08	0a		asl a				asl 	a
.2b09	0a		asl a				asl 	a
.2b0a	aa		tax				tax
.2b0b	bd 6d 2b	lda $2b6d,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2b0e	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2b10	bd 6e 2b	lda $2b6e,x			lda 	TableTen+1,x
.2b13	85 11		sta $11				sta  	IFR1+IM1
.2b15	bd 6f 2b	lda $2b6f,x			lda 	TableTen+2,x
.2b18	85 12		sta $12				sta  	IFR1+IM2
.2b1a	bd 70 2b	lda $2b70,x			lda 	TableTen+3,x
.2b1d	85 13		sta $13				sta  	IFR1+IExp
.2b1f	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2b21	20 d2 26	jsr $26d2			jsr 	IFloatMultiply
.2b24	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.2b26	20 a2 2b	jsr $2ba2			jsr 	IFloatPullRx
.2b29	a2 10		ldx #$10			ldx 	#IFR1
.2b2b	20 28 26	jsr $2628			jsr 	IFloatAdd
.2b2e					_IFSTFExit2:
.2b2e	18		clc				clc
.2b2f	60		rts				rts
.2b30					_IFSTFFail2:
.2b30	38		sec				sec
.2b31	60		rts				rts
.2b32					IFSTFGetNext:
.2b32	ad ce 05	lda $05ce			lda 	IFCount  					; if count is zero, return with Z set.
.2b35	f0 19		beq $2b50			beq 	_IFSTFReturnOk
.2b37	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2b39	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2b3b	d0 02		bne $2b3f			bne 	_IFSTFGNNoCarry
.2b3d	e6 0b		inc $0b				inc 	iTemp0+1
.2b3f					_IFSTFGNNoCarry:
.2b3f	ce ce 05	dec $05ce			dec 	IFCount 					; dec count.
.2b42	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2b44	f0 08		beq $2b4e			beq 	_IFSTFGOkay
.2b46	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2b48	90 08		bcc $2b52			bcc 	_IFSTFGFail
.2b4a	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2b4c	b0 04		bcs $2b52			bcs 	_IFSTFGFail
.2b4e					_IFSTFGOkay:
.2b4e	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2b50					_IFSTFReturnOk:
.2b50	18		clc				clc
.2b51	60		rts				rts
.2b52					_IFSTFGFail:
.2b52	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2b54	38		sec				sec
.2b55	60		rts				rts
.2b56					IFSTFAddR0:
.2b56	29 0f		and #$0f			and 	#15 						; to int value
.2b58	48		pha				pha 								; save it.
.2b59	a9 0a		lda #$0a			lda 	#10
.2b5b	a2 10		ldx #$10			ldx 	#IFR1
.2b5d	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.2b60	20 d2 26	jsr $26d2			jsr 	IFloatMultiply
.2b63	68		pla				pla
.2b64	a2 10		ldx #$10			ldx 	#IFR1
.2b66	20 34 2c	jsr $2c34			jsr 	IFloatSetByte
.2b69	20 28 26	jsr $2628			jsr 	IFloatAdd
.2b6c	60		rts				rts
.05ce					IFCount:
>05ce							.fill 	1
.05cf					IFSignFlag:
>05cf							.fill 	1
.05d0					IFDecimalPlaces:
>05d0							.fill 	1
.2b6d					TableTen:
>2b6d	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2b71	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2b75	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2b79	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2b7d	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2b81					IFloatPushRx:
.2b81	5a		phy				phy
.2b82	ac d1 05	ldy $05d1			ldy 	IFStackIndex
.2b85	b5 00		lda $00,x			lda 	IM0,x
.2b87	99 d2 05	sta $05d2,y			sta 	IFStack,y
.2b8a	b5 01		lda $01,x			lda 	IM1,x
.2b8c	99 d3 05	sta $05d3,y			sta 	IFStack+1,y
.2b8f	b5 02		lda $02,x			lda 	IM2,x
.2b91	99 d4 05	sta $05d4,y			sta 	IFStack+2,y
.2b94	b5 03		lda $03,x			lda 	IExp,x
.2b96	99 d5 05	sta $05d5,y			sta 	IFStack+3,y
.2b99	c8		iny				iny
.2b9a	c8		iny				iny
.2b9b	c8		iny				iny
.2b9c	c8		iny				iny
.2b9d	8c d1 05	sty $05d1			sty 	IFStackIndex
.2ba0	7a		ply				ply
.2ba1	60		rts				rts
.2ba2					IFloatPullRx:
.2ba2	5a		phy				phy
.2ba3	ac d1 05	ldy $05d1			ldy 	IFStackIndex
.2ba6	88		dey				dey
.2ba7	88		dey				dey
.2ba8	88		dey				dey
.2ba9	88		dey				dey
.2baa	b9 d2 05	lda $05d2,y			lda 	IFStack,y
.2bad	95 00		sta $00,x			sta 	IM0,x
.2baf	b9 d3 05	lda $05d3,y			lda 	IFStack+1,y
.2bb2	95 01		sta $01,x			sta 	IM1,x
.2bb4	b9 d4 05	lda $05d4,y			lda 	IFStack+2,y
.2bb7	95 02		sta $02,x			sta 	IM2,x
.2bb9	b9 d5 05	lda $05d5,y			lda 	IFStack+3,y
.2bbc	95 03		sta $03,x			sta 	IExp,x
.2bbe	8c d1 05	sty $05d1			sty 	IFStackIndex
.2bc1	7a		ply				ply
.2bc2	60		rts				rts
.05d1					IFStackIndex:
>05d1							.fill 	1
.05d2					IFStack:
>05d2							.fill 	16*4
.2bc3					IFloatCopyFromRegister:
.2bc3	b5 00		lda $00,x			lda 	0,x
.2bc5	85 0c		sta $0c				sta 	IFR0
.2bc7	b5 01		lda $01,x			lda 	1,x
.2bc9	85 0d		sta $0d				sta 	IFR0+1
.2bcb	b5 02		lda $02,x			lda 	2,x
.2bcd	85 0e		sta $0e				sta 	IFR0+2
.2bcf	b5 03		lda $03,x			lda 	3,x
.2bd1	85 0f		sta $0f				sta 	IFR0+3
.2bd3	60		rts				rts
.2bd4					IFloatCopyToRegister:
.2bd4	a5 0c		lda $0c				lda 	IFR0
.2bd6	95 00		sta $00,x			sta 	0,x
.2bd8	a5 0d		lda $0d				lda 	IFR0+1
.2bda	95 01		sta $01,x			sta 	1,x
.2bdc	a5 0e		lda $0e				lda 	IFR0+2
.2bde	95 02		sta $02,x			sta 	2,x
.2be0	a5 0f		lda $0f				lda 	IFR0+3
.2be2	95 03		sta $03,x			sta 	3,x
.2be4	60		rts				rts
.2be5					IFloatLoadInline:
.2be5	68		pla				pla 								; pop address off to iTemp0
.2be6	85 0a		sta $0a				sta 	iTemp0
.2be8	68		pla				pla
.2be9	85 0b		sta $0b				sta 	iTemp0+1
.2beb	a0 01		ldy #$01			ldy 	#1
.2bed	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2bef	95 00		sta $00,x			sta 	0,x
.2bf1	c8		iny				iny
.2bf2	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.2bf4	95 01		sta $01,x			sta 	1,x
.2bf6	c8		iny				iny
.2bf7	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2bf9	95 02		sta $02,x			sta 	2,x
.2bfb	c8		iny				iny
.2bfc	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2bfe	95 03		sta $03,x			sta 	3,x
.2c00	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2c01	a5 0a		lda $0a				lda 	iTemp0
.2c03	69 05		adc #$05			adc 	#5
.2c05	85 0a		sta $0a				sta 	iTemp0
.2c07	90 02		bcc $2c0b			bcc 	_IFLINoCarry
.2c09	e6 0b		inc $0b				inc 	iTemp0+1
.2c0b					_IFLINoCarry:
.2c0b	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2c0e					IFloatMultiply8BitRx:
.2c0e	5a		phy		        phy
.2c0f	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2c11	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2c13	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2c14	85 0c		sta $0c		        sta     IFR0+IM0
.2c16	84 0d		sty $0d		        sty     IFR0+IM1
.2c18	a9 00		lda #$00	        lda     #0
.2c1a	a0 08		ldy #$08	        ldy     #8
.2c1c					_IFMLoop:
.2c1c	90 03		bcc $2c21	        bcc     _IFMNoAdd
.2c1e	18		clc		        clc
.2c1f	65 0d		adc $0d		        adc     IFR0+IM1
.2c21					_IFMNoAdd:
.2c21	6a		ror a		        ror     a
.2c22	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2c24	88		dey		        dey
.2c25	d0 f5		bne $2c1c	        bne     _IFMLoop
.2c27	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2c29	7a		ply		        ply
.2c2a	60		rts		        rts
.2c2b					IFloatCheckZero:
.2c2b	b5 00		lda $00,x			lda 	IM0,x
.2c2d	15 01		ora $01,x			ora 	IM1,x
.2c2f	15 02		ora $02,x			ora 	IM2,x
.2c31	60		rts				rts
.2c32					IFloatSetZero:
.2c32	a9 00		lda #$00			lda 	#0
.2c34					IFloatSetByte:
.2c34	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2c36	74 01		stz $01,x			stz 	IM1,x
.2c38	74 02		stz $02,x			stz 	IM2,x
.2c3a	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2c3c	60		rts				rts
.2c3d					IFloatNegate:
.2c3d	b5 03		lda $03,x			lda 	IExp,x
.2c3f	49 40		eor #$40			eor 	#IFSign
.2c41	95 03		sta $03,x			sta 	IExp,x
.2c43	18		clc				clc
.2c44	60		rts				rts
.2c45					IFloatMantissaNegate:
.2c45	38		sec				sec
.2c46	a9 00		lda #$00			lda 	#0
.2c48	f5 00		sbc $00,x			sbc 	IM0,x
.2c4a	95 00		sta $00,x			sta 	IM0,x
.2c4c	a9 00		lda #$00			lda 	#0
.2c4e	f5 01		sbc $01,x			sbc 	IM1,x
.2c50	95 01		sta $01,x			sta 	IM1,x
.2c52	a9 00		lda #$00			lda 	#0
.2c54	f5 02		sbc $02,x			sbc 	IM2,x
.2c56	95 02		sta $02,x			sta 	IM2,x
.2c58	60		rts				rts
.2c59					IFloatShiftLeft:
.2c59	18		clc				clc
.2c5a					IFloatRotateLeft:
.2c5a	36 00		rol $00,x			rol 	IM0,x
.2c5c	36 01		rol $01,x			rol 	IM1,x
.2c5e	36 02		rol $02,x			rol 	IM2,x
.2c60	60		rts				rts
.2c61					IFloatShiftRight:
.2c61	18		clc				clc
.2c62					IFloatRotateRight:
.2c62	76 02		ror $02,x			ror 	IM2,x
.2c64	76 01		ror $01,x			ror 	IM1,x
.2c66	76 00		ror $00,x			ror 	IM0,x
.2c68	60		rts				rts
.2c69					IFloatNormalise:
.2c69	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero 			; is it zero
.2c6c	f0 18		beq $2c86			beq 	_IFNExitZero 				; if so exit
.2c6e					_IFNLoop:
.2c6e	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2c70	29 c0		and #$c0			and 	#$C0
.2c72	c9 40		cmp #$40			cmp 	#$40
.2c74	f0 13		beq $2c89			beq 	_IFNExitOkay 				; if so , then we are done.
.2c76	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2c78	29 3f		and #$3f			and 	#$3F
.2c7a	c9 20		cmp #$20			cmp 	#$20
.2c7c	f0 0b		beq $2c89			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2c7e	20 9f 2c	jsr $2c9f			jsr 	IFloatDecExponent
.2c81	20 59 2c	jsr $2c59			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2c84	80 e8		bra $2c6e			bra 	_IFNLoop
.2c86					_IFNExitZero:
.2c86	20 32 2c	jsr $2c32			jsr 	IFloatSetZero 				; set the result to zero
.2c89					_IFNExitOkay:
.2c89	18		clc				clc  								; return with CC.
.2c8a	60		rts				rts
.2c8b					IFloatIncExponent:
.2c8b	b5 03		lda $03,x			lda 	IExp,x
.2c8d	48		pha				pha
.2c8e	29 c0		and #$c0			and 	#$C0
.2c90	8d 12 06	sta $0612			sta 	IFXTemp
.2c93	68		pla				pla
.2c94	1a		inc a				inc 	a
.2c95	29 3f		and #$3f			and 	#$3F
.2c97	48		pha				pha
.2c98	0d 12 06	ora $0612			ora 	IFXTemp
.2c9b	95 03		sta $03,x			sta 	IExp,x
.2c9d	68		pla				pla
.2c9e	60		rts				rts
.2c9f					IFloatDecExponent:
.2c9f	b5 03		lda $03,x			lda 	IExp,x
.2ca1	48		pha				pha
.2ca2	29 c0		and #$c0			and 	#$C0
.2ca4	8d 12 06	sta $0612			sta 	IFXTemp
.2ca7	68		pla				pla
.2ca8	3a		dec a				dec 	a
.2ca9	29 3f		and #$3f			and 	#$3F
.2cab	48		pha				pha
.2cac	0d 12 06	ora $0612			ora 	IFXTemp
.2caf	95 03		sta $03,x			sta 	IExp,x
.2cb1	68		pla				pla
.2cb2	60		rts				rts
.0612					IFXTemp:
>0612							.fill 	1
.2cb3					IFloatBufferReset:
.2cb3	9c 13 06	stz $0613			stz 	IFBufferCount
.2cb6	9c 14 06	stz $0614			stz 	IFBuffer
.2cb9	60		rts				rts
.2cba					IFloatGetBufferAddress:
.2cba	a0 06		ldy #$06			ldy 	#(IFBuffer >> 8)
.2cbc	a2 14		ldx #$14			ldx 	#(IFBuffer & $FF)
.2cbe	ad 13 06	lda $0613			lda 	IFBufferCount
.2cc1	60		rts				rts
.2cc2					IFloatBufferWrite:
.2cc2	da		phx				phx
.2cc3	ae 13 06	ldx $0613			ldx 	IFBufferCount
.2cc6	9d 14 06	sta $0614,x			sta 	IFBuffer,x
.2cc9	9e 15 06	stz $0615,x			stz 	IFBuffer+1,x
.2ccc	ee 13 06	inc $0613			inc 	IFBufferCount
.2ccf	fa		plx				plx
.2cd0	60		rts				rts
.2cd1					IFloatStripTrailingZeros:
.2cd1	ae 13 06	ldx $0613			ldx 	IFBufferCount
.2cd4	bd 13 06	lda $0613,x			lda 	IFBuffer-1,x
.2cd7	c9 30		cmp #$30			cmp		#"0"
.2cd9	d0 0f		bne $2cea			bne 	_IFSTExit
.2cdb	bd 12 06	lda $0612,x			lda 	IFBuffer-2,x
.2cde	c9 2e		cmp #$2e			cmp 	#"."
.2ce0	f0 08		beq $2cea			beq 	_IFSTExit
.2ce2	ce 13 06	dec $0613			dec 	IFBufferCount
.2ce5	9e 13 06	stz $0613,x			stz 	IFBuffer-1,x
.2ce8	80 e7		bra $2cd1			bra 	IFloatStripTrailingZeros
.2cea					_IFSTExit:
.2cea	60		rts				rts
.0613					IFBufferCount:
>0613							.fill 	1
.0614					IFBuffer:
>0614							.fill 	25
.2ceb					IFloatCheck:
.2ceb	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2ced	09 40		ora #$40			ora 	#IFSign
.2cef	85 0f		sta $0f				sta 	IFR0+IExp
.2cf1	20 28 26	jsr $2628			jsr 	IFloatAdd 					; add allowed to error.
.2cf4	a2 0c		ldx #$0c			ldx 	#IFR0
.2cf6	20 2b 2c	jsr $2c2b			jsr 	IFloatCheckZero 			; error if < 0
.2cf9	f0 06		beq $2d01			beq 	_IFAOkay
.2cfb	a5 0f		lda $0f				lda 	IFR0+IExp
.2cfd	29 40		and #$40			and 	#IFSign
.2cff	d0 01		bne $2d02			bne 	_IFAFail
.2d01					_IFAOkay:
.2d01	60		rts				rts
.2d02					_IFAFail:
.2d02	38		sec				sec
.2d03	68		pla				pla 								; get address - 2
.2d04	e9 02		sbc #$02			sbc 	#2
.2d06	aa		tax				tax
.2d07	68		pla				pla
.2d08	e9 00		sbc #$00			sbc 	#0
.2d0a	a8		tay				tay
.2d0b	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2d0d					_IFAStop:
>2d0d	db						.byte 	$DB 						; display an error AA ADR ADR
.2d0e	80 fd		bra $2d0d			bra 	_IFAStop

;******  Return to file: basic.asm

.2d10					NotImplemented:
.2d10	a9 ff		lda #$ff			lda 	#$FF
.2d12	80 04		bra $2d18			bra 	EnterDbg
.2d14					ErrorHandler:
.2d14	fa		plx				plx
.2d15	7a		ply				ply
.2d16	a9 ee		lda #$ee			lda 	#$EE
.2d18					EnterDbg:
>2d18	db						.byte 	$DB
.2d19	4c 18 2d	jmp $2d18			jmp 	EnterDbg

;******  End of listing
