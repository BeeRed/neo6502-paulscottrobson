
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3400" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Fri Jun  9 15:15:31 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3400					BASICCODE=$3400
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 34		ldx #$34			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 4c 1e	jsr $1e4c			jsr 	PGMSetBaseAddress
.1007	20 4d 29	jsr $294d			jsr 	IFInitialise 				; setup math library
.100a	4c d2 13	jmp $13d2			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 2e 16	jsr $162e			jsr 	EXPEvalNumber
.1010	a2 08		ldx #$08			ldx 	#IFR0
.1012	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 73 24	jmp $2473		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.101d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.101f	f0 14		beq $1035			beq 	_CLNoParam
.1021	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1023	f0 10		beq $1035			beq 	_CLNoParam
.1025	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; address for CLEAR
.1028	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102a	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102c	b0 0b		bcs $1039			bcs 	_CLMemory
.102e	c9 35		cmp #$35			cmp 	#(BASICCODE >> 8)+1 		; too low
.1030	90 07		bcc $1039			bcc 	_CLMemory
.1032	8d 16 05	sta $0516			sta 	PGMEndMemoryHigh 			; update end of memory.
.1035					_CLNoParam:
.1035	20 3c 10	jsr $103c			jsr 	ClearCode
.1038	60		rts				rts
.1039					_CLMemory:
.1039	4c 0d 25	jmp $250d		jmp	ErrorV_memory
.103c					ClearCode:
.103c	20 5f 1e	jsr $1e5f			jsr 	PGMEndProgram 				; end program => zTemp0
.103f	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1041	a5 23		lda $23				lda 	zTemp0+1
.1043	1a		inc a				inc 	a
.1044	85 29		sta $29				sta 	freeMemory+1
.1046	20 ec 28	jsr $28ec			jsr 	VARClearHashTables
.1049	ad 16 05	lda $0516			lda 	PGMEndMemoryHigh
.104c	20 29 26	jsr $2629			jsr 	StackReset
.104f	20 88 26	jsr $2688			jsr 	StringSystemInitialise
.1052	20 88 23	jsr $2388			jsr 	ScanProcedures
.1055	60		rts				rts
.1056					AllocateMemory:
.1056	5a		phy				phy 								; save Y
.1057	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low
.1059	5a		phy				phy
.105a	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.105c	5a		phy				phy
.105d	a8		tay				tay 								; count is now in XY
.105e					_AllocateLoop:
.105e	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1060	d0 04		bne $1066			bne 	_AllocateOne
.1062	c0 00		cpy #$00			cpy 	#0
.1064	f0 15		beq $107b			beq 	_AllocateExit
.1066					_AllocateOne:
.1066	a9 00		lda #$00			lda 	#0 							; zero byte
.1068	92 28		sta ($28)			sta 	(freeMemory)
.106a	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.106c	d0 05		bne $1073			bne 	_AllocateSkipCarry
.106e	e6 29		inc $29				inc 	freeMemory+1
.1070	20 7f 10	jsr $107f			jsr 	ClearCheckMemory
.1073					_AllocateSkipCarry:
.1073	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1075	d0 01		bne $1078			bne 	_AllocateSkipBorrow
.1077	ca		dex				dex
.1078					_AllocateSkipBorrow:
.1078	88		dey				dey
.1079	80 e3		bra $105e			bra 	_AllocateLoop
.107b					_AllocateExit:
.107b	fa		plx				plx 								; restore address
.107c	68		pla				pla
.107d	7a		ply				ply 								; restore Y
.107e	60		rts				rts
.107f					ClearCheckMemory:
.107f	a5 29		lda $29				lda 	freeMemory+1
.1081	1a		inc a				inc 	a
.1082	1a		inc a				inc 	a
.1083	cd 1e 06	cmp $061e			cmp 	stringMemory+1
.1086	b0 01		bcs $1089			bcs  	_CCMError
.1088	60		rts				rts
.1089					_CCMError:
.1089	4c 0d 25	jmp $250d		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.108c					CommandDIM:
.108c	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.108e	29 c0		and #$c0			and 	#$C0
.1090	c9 40		cmp #$40			cmp 	#$40
.1092	d0 39		bne $10cd			bne 	_CDSyntax
.1094	20 a3 28	jsr $28a3			jsr 	VARGetInfo 					; get information
.1097	ad 26 06	lda $0626			lda 	VARType 					; check array.
.109a	29 02		and #$02			and 	#2
.109c	f0 2f		beq $10cd			beq 	_CDSyntax
.109e	20 55 28	jsr $2855			jsr 	VARFind 					; does it already exist
.10a1	b0 2d		bcs $10d0			bcs 	_CDExists
.10a3	20 01 28	jsr $2801			jsr 	VARCreate 					; create it - returns data ptr in XA
.10a6	da		phx				phx 								; save target address
.10a7	48		pha				pha
.10a8	ad 26 06	lda $0626			lda 	VARType 					; type ID.
.10ab	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10ad	20 d3 10	jsr $10d3			jsr 	CreateArray 				; create array to XA
.10b0	84 24		sty $24				sty 	zTemp1 						; save Y
.10b2	7a		ply				ply 								; restore target to zTemp0
.10b3	84 22		sty $22				sty 	zTemp0
.10b5	7a		ply				ply
.10b6	84 23		sty $23				sty 	zTemp0+1
.10b8	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10ba	a0 01		ldy #$01			ldy 	#1
.10bc	8a		txa				txa
.10bd	91 22		sta ($22),y			sta 	(zTemp0),y
.10bf	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10c1	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 				; check )
.10c4	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10c6	c8		iny				iny
.10c7	c9 99		cmp #$99			cmp 	#PR_COMMA
.10c9	f0 c1		beq $108c			beq 	CommandDIM
.10cb	88		dey				dey
.10cc	60		rts				rts
.10cd					_CDSyntax:
.10cd	4c 1d 24	jmp $241d		jmp	ErrorV_syntax
.10d0					_CDExists:
.10d0	4c e5 24	jmp $24e5		jmp	ErrorV_redefine
.10d3					CreateArray:
.10d3	8d 03 05	sta $0503			sta 	CAType						; save type
.10d6	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10d9	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10db	c9 99		cmp #$99			cmp 	#PR_COMMA
.10dd	f0 04		beq $10e3			beq 	_CATwoDimensions
.10df	20 2f 11	jsr $112f			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e2	60		rts				rts
.10e3					_CATwoDimensions:
.10e3	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10e5	8d 05 05	sta $0505			sta 	CADim1+1
.10e8	a5 08		lda $08				lda 	IFR0+IM0
.10ea	8d 04 05	sta $0504			sta 	CADim1+0
.10ed	20 c2 25	jsr $25c2			jsr 	ERRCheckComma 				; check comma
.10f0	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f3	5a		phy				phy 								; save Y position
.10f4	18		clc				clc 								; allocate the outer array of pointers.
.10f5	ae 05 05	ldx $0505			ldx 	CADim1+1
.10f8	ad 04 05	lda $0504			lda 	CADim1
.10fb	20 6e 11	jsr $116e			jsr 	CSAAllocate 				; allocate the outer array
.10fe	da		phx				phx									; save this address on the stack
.10ff	48		pha				pha
.1100	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.1102	85 26		sta $26				sta 	zTemp2
.1104					_CACreateSubLoop:
.1104	38		sec				sec
.1105	20 2f 11	jsr $112f			jsr 	CreateSingleArray 			; create data array of required size.
.1108	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.110a	91 26		sta ($26),y			sta 	(zTemp2),y
.110c	8a		txa				txa
.110d	c8		iny				iny
.110e	91 26		sta ($26),y			sta 	(zTemp2),y
.1110	18		clc				clc  								; next slot.
.1111	a5 26		lda $26				lda 	zTemp2
.1113	69 02		adc #$02			adc 	#2
.1115	85 26		sta $26				sta 	zTemp2
.1117	90 02		bcc $111b			bcc 	_CACNoCarry
.1119	e6 27		inc $27				inc 	zTemp2+1
.111b					_CACNoCarry:
.111b	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.111e	d0 03		bne $1123			bne 	_CACNoBorrow
.1120	ce 05 05	dec $0505			dec 	CADim1+1
.1123					_CACNoBorrow:
.1123	ce 04 05	dec $0504			dec 	CADim1
.1126	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1129	10 d9		bpl $1104			bpl 	_CACreateSubLoop
.112b	68		pla				pla
.112c	fa		plx				plx
.112d	7a		ply				ply
.112e	60		rts				rts
.112f					CreateSingleArray:
.112f	5a		phy				phy
.1130	38		sec				sec 								; allocate memory block all zeros.
.1131	a5 08		lda $08				lda 	IFR0+IM0
.1133	a6 09		ldx $09				ldx 	IFR0+IM1
.1135	20 6e 11	jsr $116e			jsr 	CSAAllocate
.1138	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.113b	f0 2f		beq $116c			beq 	_CSANoInit
.113d	da		phx				phx 								; save address of new array
.113e	48		pha				pha
.113f	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1141	86 23		stx $23				stx 	zTemp0+1
.1143	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1145	b1 22		lda ($22),y			lda 	(zTemp0),y
.1147	a8		tay				tay
.1148	b2 22		lda ($22)			lda 	(zTemp0)
.114a	aa		tax				tax
.114b					_CSAEraseString:
.114b	5a		phy				phy
.114c	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.114e	a9 80		lda #$80			lda 	#$80
.1150	91 22		sta ($22),y			sta 	(zTemp0),y
.1152	7a		ply				ply
.1153	18		clc				clc 								; add 4 to next slot.
.1154	a5 22		lda $22				lda 	zTemp0
.1156	69 04		adc #$04			adc 	#4
.1158	85 22		sta $22				sta 	zTemp0
.115a	90 02		bcc $115e			bcc 	_CSAENoCarry
.115c	e6 23		inc $23				inc 	zTemp0+1
.115e					_CSAENoCarry:
.115e	e0 00		cpx #$00			cpx 	#0
.1160	d0 01		bne $1163			bne 	_CSANoBorrow
.1162	88		dey				dey
.1163					_CSANoBorrow:
.1163	ca		dex				dex
.1164	d0 e5		bne $114b			bne 	_CSAEraseString
.1166	c0 00		cpy #$00			cpy 	#0
.1168	d0 e1		bne $114b			bne 	_CSAEraseString
.116a	68		pla				pla
.116b	fa		plx				plx
.116c					_CSANoInit:
.116c	7a		ply				ply
.116d	60		rts				rts
.116e					CSAAllocate:
.116e	08		php				php 								; save type flag.
.116f	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1170	d0 01		bne $1173			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1172	e8		inx				inx
.1173					_CSAANoCarry:
.1173	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1175	b0 2e		bcs $11a5			bcs 	_CSARange
.1177	28		plp				plp 								; restore type flag
.1178	08		php				php 								; save it back again.
.1179	da		phx				phx 								; save size.
.117a	48		pha				pha
.117b	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.117d	90 03		bcc $1182			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.117f	0a		asl a				asl 	a
.1180	26 23		rol $23				rol 	zTemp0+1
.1182					_CSAATimes2:
.1182	0a		asl a				asl 	a
.1183	26 23		rol $23				rol 	zTemp0+1
.1185	18		clc				clc
.1186	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1188	90 02		bcc $118c			bcc 	_CSAANoCarry2
.118a	e6 23		inc $23				inc 	zTemp0+1
.118c					_CSAANoCarry2:
.118c	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.118e	20 56 10	jsr $1056			jsr 	AllocateMemory 				; allocate memory to XA
.1191	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1193	85 22		sta $22				sta 	zTemp0
.1195	68		pla				pla  								; write element count to first 2 bytes
.1196	92 22		sta ($22)			sta 	(zTemp0)
.1198	68		pla				pla 								; msb of element count
.1199	28		plp				plp 								; CC if pointer array
.119a	b0 02		bcs $119e			bcs 	_CSAAIsData
.119c	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.119e					_CSAAIsData:
.119e	a0 01		ldy #$01			ldy 	#1
.11a0	91 22		sta ($22),y			sta 	(zTemp0),y
.11a2	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11a4	60		rts				rts
.11a5					_CSARange:
.11a5	4c 2e 24	jmp $242e		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11a8					Command_Doke:
.11a8	38		sec				sec
.11a9	80 01		bra $11ac			bra 	DPCommon
.11ab					Command_Poke:
.11ab	18		clc				clc
.11ac					DPCommon:
.11ac	08		php				php 								; CS if DOKE
.11ad	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; address
.11b0	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b2	48		pha				pha
.11b3	a5 09		lda $09				lda 	IFR0+IM1
.11b5	48		pha				pha
.11b6	20 c2 25	jsr $25c2			jsr 	ERRCheckComma 				; [dp]oke address,data
.11b9	20 40 16	jsr $1640			jsr 	EXPEvalInteger16
.11bc	68		pla				pla 								; get address back
.11bd	85 23		sta $23				sta 	zTemp0+1
.11bf	68		pla				pla
.11c0	85 22		sta $22				sta 	zTemp0
.11c2	a5 08		lda $08				lda 	IFR0+IM0
.11c4	92 22		sta ($22)			sta 	(zTemp0)
.11c6	28		plp				plp
.11c7	90 08		bcc $11d1			bcc 	_DPExit
.11c9	5a		phy				phy
.11ca	a5 09		lda $09				lda 	IFR0+IM1
.11cc	a0 01		ldy #$01			ldy 	#1
.11ce	91 22		sta ($22),y			sta 	(zTemp0),y
.11d0	7a		ply				ply
.11d1					_DPExit:
.11d1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11d2					Command_Input:
.11d2	a9 ff		lda #$ff			lda 	#$FF
.11d4	8d 06 05	sta $0506			sta 	InputFlag
.11d7	80 03		bra $11dc			bra 	Command_IP_Main
.11d9					Command_Print:
.11d9	9c 06 05	stz $0506			stz 	InputFlag
.11dc					Command_IP_Main:
.11dc	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11dd					_CPLoop:
.11dd	08		php				php 								; save last action flag
.11de	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.11e0	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11e2	f0 4e		beq $1232			beq 	_CPExit 					; without consuming
.11e4	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11e6	f0 4a		beq $1232			beq 	_CPExit
.11e8	68		pla				pla 								; throw last action flag
.11e9	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.11eb	c8		iny				iny
.11ec	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11ee	f0 3f		beq $122f			beq 	_CPContinueWithSameLine
.11f0	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11f2	f0 36		beq $122a			beq 	_CPTab
.11f4	88		dey				dey 								; undo the get.
.11f5	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.11f8	10 0b		bpl $1205			bpl	 	_CPNotInput
.11fa	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.11fc	c9 40		cmp #$40			cmp 	#$40
.11fe	d0 05		bne $1205			bne 	_CPNotInput
.1200	20 3b 12	jsr $123b			jsr 	_CPInputCode 				; input code
.1203	80 d7		bra $11dc			bra 	Command_IP_Main 			; and go round again.
.1205					_CPNotInput:
.1205	20 ee 15	jsr $15ee			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1208	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.120a	10 14		bpl $1220			bpl 	_CPNumber
.120c	5a		phy				phy
.120d	18		clc				clc 								; string address to YX
.120e	a5 08		lda $08				lda 	IFR0+IM0
.1210	aa		tax				tax
.1211	a5 09		lda $09				lda 	IFR0+IM1
.1213	a8		tay				tay
.1214	e8		inx				inx 								; point to 1st character
.1215	d0 01		bne $1218			bne 	_CPNoCarry
.1217	c8		iny				iny
.1218					_CPNoCarry:
.1218	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.121a	20 6f 12	jsr $126f			jsr 	CPPrintAYX 					; print AYX
.121d	7a		ply				ply
.121e	80 bc		bra $11dc			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1220					_CPNumber:
.1220	5a		phy				phy
.1221	20 5f 2d	jsr $2d5f			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.1224	20 6f 12	jsr $126f			jsr 	CPPrintAYX 					; print AYX
.1227	7a		ply				ply
.1228	80 b2		bra $11dc			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.122a					_CPTab:
.122a	a9 09		lda #$09			lda 	#9 							; print TAB
.122c	20 85 12	jsr $1285			jsr 	CPPrintA
.122f					_CPContinueWithSameLine:
.122f	38		sec				sec 								; loop round with carry set, which
.1230	80 ab		bra $11dd			bra 	_CPLoop 					; will inhibit final CR
.1232					_CPExit:
.1232	28		plp				plp 								; get last action flag
.1233	b0 05		bcs $123a			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1235	a9 0d		lda #$0d			lda 	#13 						; print new line
.1237	20 85 12	jsr $1285			jsr 	CPPrintA
.123a					_CPExit2:
.123a	60		rts				rts
.123b					_CPInputCode:
.123b	20 b6 16	jsr $16b6			jsr 	EXPTermR0 					; get the term.
.123e	5a		phy				phy 								; save position
.123f	20 82 12	jsr $1282			jsr 	CPInputA					; input a line to YX
.1242	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1244	30 18		bmi $125e			bmi 	_CPInputString
.1246	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1248	48		pha				pha
.1249	a5 09		lda $09				lda 	IFR0+IM1
.124b	48		pha				pha
.124c	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.124e	84 23		sty $23				sty 	zTemp0+1
.1250	20 98 19	jsr $1998			jsr 	VALConversionZTemp0
.1253	68		pla				pla 								; do the assign.
.1254	85 23		sta $23				sta 	zTemp0+1
.1256	68		pla				pla
.1257	85 22		sta $22				sta 	zTemp0
.1259	20 ad 12	jsr $12ad			jsr 	AssignNumber
.125c	7a		ply				ply
.125d	60		rts				rts
.125e					_CPInputString:
.125e	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1260	85 22		sta $22				sta 	zTemp0
.1262	a5 09		lda $09				lda 	IFR0+IM1
.1264	85 23		sta $23				sta 	zTemp0+1
.1266	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1268	84 09		sty $09				sty 	IFR0+IM1
.126a	20 c4 12	jsr $12c4			jsr 	AssignString 				; assign the string
.126d	7a		ply				ply 								; exit
.126e	60		rts				rts
.126f					CPPrintAYX:
.126f	86 22		stx $22				stx 	zTemp0
.1271	84 23		sty $23				sty 	zTemp0+1
.1273	aa		tax				tax
.1274	f0 0b		beq $1281			beq 	_CPPrintExit
.1276	a0 00		ldy #$00			ldy 	#0
.1278					_CPPrintAYXLoop:
.1278	b1 22		lda ($22),y			lda 	(zTemp0),y
.127a	20 85 12	jsr $1285			jsr 	CPPrintA
.127d	c8		iny				iny
.127e	ca		dex				dex
.127f	d0 f7		bne $1278			bne 	_CPPrintAYXLoop
.1281					_CPPrintExit:
.1281	60		rts				rts
.1282					CPInputA:
.1282	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.1285					CPPrintA:
.1285	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1288					CommandLET:
.1288	20 b6 16	jsr $16b6			jsr 	EXPTermR0 					; get term
.128b	90 6f		bcc $12fc			bcc 	CLError 					; must be a reference term.
.128d	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.128f	48		pha				pha
.1290	a5 09		lda $09				lda 	IFR0+IM1
.1292	48		pha				pha
.1293	a5 0b		lda $0b				lda 	IFR0+IExp
.1295	48		pha				pha
.1296	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1298	20 ca 25	jsr $25ca			jsr 	ERRCheckA
.129b	20 ee 15	jsr $15ee			jsr 	EXPEvaluateExpression 		; right hand side.
.129e	68		pla				pla 								; type of l-expr
.129f	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12a1	30 5c		bmi $12ff			bmi 	CLType
.12a3	fa		plx				plx 	 							; pop target address to zTemp0
.12a4	86 23		stx $23				stx 	zTemp0+1
.12a6	fa		plx				plx
.12a7	86 22		stx $22				stx 	zTemp0
.12a9					AssignData:
.12a9	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12ab	30 17		bmi $12c4			bmi 	AssignString
.12ad					AssignNumber:
.12ad	5a		phy				phy
.12ae	a0 03		ldy #$03			ldy 	#3
.12b0	a5 0b		lda $0b				lda 	IFR0+IExp
.12b2	91 22		sta ($22),y			sta 	(zTemp0),y
.12b4	88		dey				dey
.12b5	a5 0a		lda $0a				lda 	IFR0+IM2
.12b7	91 22		sta ($22),y			sta 	(zTemp0),y
.12b9	88		dey				dey
.12ba	a5 09		lda $09				lda 	IFR0+IM1
.12bc	91 22		sta ($22),y			sta 	(zTemp0),y
.12be	a5 08		lda $08				lda 	IFR0+IM0
.12c0	92 22		sta ($22)			sta 	(zTemp0)
.12c2	7a		ply				ply
.12c3	60		rts				rts
.12c4					AssignString:
.12c4	5a		phy				phy
.12c5	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12c7	b1 22		lda ($22),y			lda 	(zTemp0),y
.12c9	12 22		ora ($22)			ora 	(zTemp0)
.12cb	f0 23		beq $12f0			beq 	_CLConcreteString
.12cd	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12cf	85 24		sta $24				sta 	zTemp1
.12d1	b1 22		lda ($22),y			lda 	(zTemp0),y
.12d3	85 25		sta $25				sta 	zTemp1+1
.12d5	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.12d7	38		sec				sec 								; we want 3 for slot size, status, string size.
.12d8	e9 03		sbc #$03			sbc 	#3
.12da	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.12dc	90 12		bcc $12f0			bcc 	_CLConcreteString 			; if so, concrete the string again.
.12de	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.12e0	1a		inc a				inc 	a
.12e1	aa		tax				tax
.12e2	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.12e4					_CLReplaceString:
.12e4	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.12e6	c8		iny				iny
.12e7	c8		iny				iny
.12e8	91 24		sta ($24),y			sta 	(zTemp1),y
.12ea	88		dey				dey
.12eb	ca		dex				dex
.12ec	d0 f6		bne $12e4			bne 	_CLReplaceString
.12ee	80 0a		bra $12fa			bra 	_CLExit
.12f0					_CLConcreteString:
.12f0	20 3d 26	jsr $263d			jsr 	StringConcrete  			; concreted string in XA.
.12f3	a0 01		ldy #$01			ldy 	#1 							; store the address
.12f5	92 22		sta ($22)			sta 	(zTemp0)
.12f7	8a		txa				txa
.12f8	91 22		sta ($22),y			sta 	(zTemp0),y
.12fa					_CLExit:
.12fa	7a		ply				ply
.12fb	60		rts				rts
.12fc					CLError:
.12fc	4c 50 25	jmp $2550		jmp	ErrorV_variable
.12ff					CLType:
.12ff	4c 4d 24	jmp $244d		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1302					Command_LIST:
.1302	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1305	9c 08 05	stz $0508			stz 	CLFrom+1
.1308	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.130a	c9 99		cmp #$99			cmp 	#PR_COMMA
.130c	f0 1d		beq $132b			beq 	_CLToLine
.130e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1310	f0 37		beq $1349			beq 	_CLDefaultTo
.1312	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1315	a5 08		lda $08				lda 	IFR0+IM0
.1317	8d 07 05	sta $0507			sta 	CLFrom
.131a	8d 09 05	sta $0509			sta 	CLTo
.131d	a5 09		lda $09				lda 	IFR0+IM1
.131f	8d 08 05	sta $0508			sta 	CLFrom+1
.1322	8d 0a 05	sta $050a			sta 	CLTo+1
.1325	b1 18		lda ($18),y			lda 	(codePtr),y
.1327	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1329	f0 26		beq $1351			beq 	_CLList
.132b					_CLToLine:
.132b	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.132d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.132f	f0 18		beq $1349			beq 	_CLDefaultTo
.1331	20 c2 25	jsr $25c2			jsr 	ERRCheckComma 				; sep comma
.1334	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1336	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1338	f0 0f		beq $1349			beq 	_CLDefaultTo
.133a	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; there's a To value.
.133d	a5 08		lda $08				lda 	IFR0+IM0
.133f	8d 09 05	sta $0509			sta 	CLTo
.1342	a5 09		lda $09				lda 	IFR0+IM1
.1344	8d 0a 05	sta $050a			sta 	CLTo+1
.1347	80 08		bra $1351			bra 	_CLList
.1349					_CLDefaultTo:
.1349	a9 ff		lda #$ff			lda 	#$FF
.134b	8d 09 05	sta $0509			sta 	CLTo
.134e	8d 0a 05	sta $050a			sta 	CLTo+1
.1351					_CLList:
.1351	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.1354	85 19		sta $19				sta 	codePtr+1
.1356	64 18		stz $18				stz 	codePtr
.1358	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.135a	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.135c	20 ae 1c	jsr $1cae			jsr 	TOKSetDetokeniseOutput
.135f					_CLLoop:
.135f	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1361	f0 4a		beq $13ad			beq 	_CLExit
.1363	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1366	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1369	d0 45		bne $13b0			bne 	_CLBreak
.136b	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.136d	20 b3 13	jsr $13b3			jsr 	_CLCompareLine
.1370	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.1372	f0 2c		beq $13a0			beq 	_CLNext
.1374	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.1376	20 b3 13	jsr $13b3			jsr 	_CLCompareLine
.1379	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.137b	f0 23		beq $13a0			beq 	_CLNext
.137d	a0 02		ldy #$02			ldy 	#2 							; print line #
.137f	b1 18		lda ($18),y			lda 	(codePtr),y
.1381	aa		tax				tax
.1382	88		dey				dey
.1383	b1 18		lda ($18),y			lda 	(codePtr),y
.1385	20 1b 27	jsr $271b			jsr 	WriteIntXA
.1388	a9 20		lda #$20			lda 	#32
.138a	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.138d	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.138f	a5 18		lda $18				lda 	codePtr
.1391	18		clc				clc
.1392	69 03		adc #$03			adc 	#3
.1394	aa		tax				tax
.1395	90 01		bcc $1398			bcc 	_CLNoCarry2
.1397	c8		iny				iny
.1398					_CLNoCarry2:
.1398	20 69 1c	jsr $1c69			jsr 	TOKDetokenise
.139b	a9 0d		lda #$0d			lda 	#13	 						; next line
.139d	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13a0					_CLNext:
.13a0	18		clc				clc 								; advance to next line.
.13a1	b2 18		lda ($18)			lda 	(codePtr)
.13a3	65 18		adc $18				adc 	codePtr
.13a5	85 18		sta $18				sta 	codePtr
.13a7	90 02		bcc $13ab			bcc 	_CLNoCarry
.13a9	e6 19		inc $19				inc 	codePtr+1
.13ab					_CLNoCarry:
.13ab	80 b2		bra $135f			bra 	_CLLoop
.13ad					_CLExit:
.13ad	4c 3a 27	jmp $273a			jmp 	WarmStart
.13b0					_CLBreak:
.13b0	4c a8 25	jmp $25a8		jmp	ErrorV_break
.13b3					_CLCompareLine:
.13b3	a0 01		ldy #$01			ldy 	#1
.13b5	38		sec				sec
.13b6	b1 18		lda ($18),y			lda 	(codePtr),y
.13b8	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13bb	85 22		sta $22				sta 	zTemp0
.13bd	c8		iny				iny
.13be	b1 18		lda ($18),y			lda 	(codePtr),y
.13c0	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13c3	90 0a		bcc $13cf			bcc 	_CLIsNegative
.13c5	d0 05		bne $13cc			bne 	_CLIsPositive
.13c7	a5 22		lda $22				lda 	zTemp0
.13c9	d0 01		bne $13cc			bne 	_CLIsPositive
.13cb	60		rts				rts
.13cc					_CLIsPositive:
.13cc	a9 01		lda #$01			lda 	#1
.13ce	60		rts				rts
.13cf					_CLIsNegative:
.13cf	a9 ff		lda #$ff			lda 	#255
.13d1	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.13d2					Command_NEW:
.13d2	20 53 1e	jsr $1e53			jsr 	PGMNewProgram
.13d5	20 3c 10	jsr $103c			jsr 	ClearCode
.13d8	4c 53 14	jmp $1453			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.13db					Command_REM:
.13db					Command_REM2:
.13db	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.13dd	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.13df	d0 06		bne $13e7			bne 	_CRExit
.13e1	c8		iny				iny 								; skip over it, it's a comment.
.13e2	98		tya				tya
.13e3	38		sec				sec
.13e4	71 18		adc ($18),y			adc 	(codePtr),y
.13e6	a8		tay				tay
.13e7					_CRExit:
.13e7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.13e8					Command_RUN:
.13e8	20 3c 10	jsr $103c			jsr 	ClearCode					; clear everything out.
.13eb	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.13ee	85 19		sta $19				sta 	codePtr+1
.13f0	64 18		stz $18				stz 	codePtr
.13f2	80 0b		bra $13ff			bra 	RUNNewLine
.13f4					RUNEndOfLine:
.13f4	18		clc				clc 								; advance to next line.
.13f5	b2 18		lda ($18)			lda 	(codePtr)
.13f7	65 18		adc $18				adc 	codePtr
.13f9	85 18		sta $18				sta 	codePtr
.13fb	90 02		bcc $13ff			bcc 	_RELNoCarry
.13fd	e6 19		inc $19				inc 	codePtr+1
.13ff					_RELNoCarry:
.13ff					RUNNewLine:
.13ff	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1401	9a		txs				txs
.1402	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.1404	f0 4d		beq $1453			beq 	Command_END
.1406	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.1408	b1 18		lda ($18),y			lda 	(codePtr),y
.140a	8d 21 06	sta $0621			sta 	ERRLine
.140d	c8		iny				iny
.140e	b1 18		lda ($18),y			lda 	(codePtr),y
.1410	8d 22 06	sta $0622			sta 	ERRLine+1
.1413	c8		iny				iny 								; offset into codePtr for start of line.
.1414					RUNNewCommand:
.1414	9c 1c 06	stz $061c			stz 	stringInitialised 			; reset string system.
.1417	ce 0b 05	dec $050b			dec 	checkCounter
.141a	d0 0a		bne $1426			bne 	_RNCNoCheck
.141c	5a		phy				phy 								; keyboard check.
.141d	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1420	7a		ply				ply
.1421	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1424	d0 1e		bne $1444			bne 	_RUNBreak
.1426					_RNCNoCheck:
.1426	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1428	10 1d		bpl $1447			bpl		_RUNNotToken 				; probably an identifier
.142a	c8		iny				iny 								; consume token
.142b	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.142d	f0 e5		beq $1414			beq 	RUNNewCommand
.142f	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1431	b0 0e		bcs $1441			bcs 	_RUNSyntax
.1433	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1435	90 0a		bcc $1441			bcc 	_RUNSyntax
.1437	0a		asl a				asl 	a 							; double into X.
.1438	aa		tax				tax
.1439	20 3e 14	jsr $143e			jsr 	_RUNDispatchMain			; call the main dispatcher
.143c	80 d6		bra $1414			bra 	RUNNewCommand
.143e					_RUNDispatchMain:
.143e	7c 69 1b	jmp ($1b69,x)			jmp 	(VectorTable,x)
.1441					_RUNSyntax:
.1441	4c 1d 24	jmp $241d		jmp	ErrorV_syntax
.1444					_RUNBreak:
.1444	4c a8 25	jmp $25a8		jmp	ErrorV_break
.1447					_RUNNotToken:
.1447	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1449	90 f6		bcc $1441			bcc 	_RUNSyntax
.144b	20 88 12	jsr $1288			jsr 	CommandLET 					; assignment
.144e	80 c4		bra $1414			bra 	RUNNewCommand 				; loop round.
.1450					Command_Shift_Handler:
.1450	4c 5f 24	jmp $245f		jmp	ErrorV_unimplemented
.1453					Command_END:
.1453	4c 3a 27	jmp $273a			jmp 	WarmStart
.050b					checkCounter:
>050b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1456					Command_STOP:
.1456	4c c1 24	jmp $24c1		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1459					Command_Sys:
.1459	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; execution address
.145c	5a		phy				phy
.145d	ad 69 06	lda $0669			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1460	ae c5 06	ldx $06c5			ldx 	('X'-'A')*4 + FastVariables
.1463	ac c9 06	ldy $06c9			ldy 	('Y'-'A')*4 + FastVariables
.1466	20 6b 14	jsr $146b			jsr 	_CSCallIFR0 				; call the code
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					_CSCallIFR0:
.146b	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.146e					NoExec01:
.146e					NoExec02:
.146e					NoExec03:
.146e					NoExec04:
.146e					NoExec05:
.146e					NoExec06:
.146e					NoExec07:
.146e					NoExec08:
.146e	4c 1d 24	jmp $241d		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1471					EXPBinAdd:
.1471	24 0b		bit $0b				bit 	IFR0+IExp
.1473	30 6f		bmi $14e4			bmi 	EXPConcatenate
.1475	a2 0c		ldx #$0c			ldx 	#IFR1
.1477	4c 58 29	jmp $2958			jmp 	IFloatAdd
.147a					EXPBinSub:
.147a	24 0b		bit $0b				bit 	IFR0+IExp
.147c	30 3f		bmi $14bd			bmi 	EXPTypeError
.147e	a2 0c		ldx #$0c			ldx 	#IFR1
.1480	4c 51 29	jmp $2951			jmp 	IFloatSubtract
.1483					EXPBinMul:
.1483	24 0b		bit $0b				bit 	IFR0+IExp
.1485	30 36		bmi $14bd			bmi 	EXPTypeError
.1487	a2 0c		ldx #$0c			ldx 	#IFR1
.1489	4c 02 2a	jmp $2a02			jmp 	IFloatMultiply
.148c					EXPBinFDiv:
.148c	24 0b		bit $0b				bit 	IFR0+IExp
.148e	30 2d		bmi $14bd			bmi 	EXPTypeError
.1490	a2 0c		ldx #$0c			ldx 	#IFR1
.1492	20 85 2c	jsr $2c85			jsr 	IFloatDivideFloat
.1495	b0 0f		bcs $14a6			bcs 	EXPDZero
.1497	60		rts				rts
.1498					EXPBinIDiv:
.1498	24 0b		bit $0b				bit 	IFR0+IExp
.149a	30 21		bmi $14bd			bmi 	EXPTypeError
.149c	a2 0c		ldx #$0c			ldx 	#IFR1
.149e	20 85 2c	jsr $2c85			jsr 	IFloatDivideFloat
.14a1	b0 03		bcs $14a6			bcs 	EXPDZero
.14a3	4c 62 2c	jmp $2c62			jmp 	IFloatIntegerR0
.14a6					EXPDZero:
.14a6	4c 96 24	jmp $2496		jmp	ErrorV_divzero
.14a9					EXPBinIMod:
.14a9	24 0b		bit $0b				bit 	IFR0+IExp
.14ab	30 10		bmi $14bd			bmi 	EXPTypeError
.14ad	a2 0c		ldx #$0c			ldx 	#IFR1
.14af	5a		phy				phy
.14b0	20 9a 2b	jsr $2b9a			jsr 	IFPreProcessBitwise 		; set up everything.
.14b3	d0 05		bne $14ba			bne 	EXPDRange
.14b5	20 d3 2a	jsr $2ad3			jsr 	IFloatModulusInteger
.14b8	7a		ply				ply
.14b9	60		rts				rts
.14ba					EXPDRange:
.14ba	4c 2e 24	jmp $242e		jmp	ErrorV_range
.14bd					EXPTypeError:
.14bd	4c 4d 24	jmp $244d		jmp	ErrorV_type
.14c0					EXPBinAnd:
.14c0	24 0b		bit $0b				bit 	IFR0+IExp
.14c2	30 f9		bmi $14bd			bmi 	EXPTypeError
.14c4	a2 0c		ldx #$0c			ldx 	#IFR1
.14c6	20 55 2b	jsr $2b55			jsr 	IFloatBitwiseAnd
.14c9	b0 ef		bcs $14ba			bcs 	EXPDRange
.14cb	60		rts				rts
.14cc					EXPBinOr:
.14cc	24 0b		bit $0b				bit 	IFR0+IExp
.14ce	30 ed		bmi $14bd			bmi 	EXPTypeError
.14d0	a2 0c		ldx #$0c			ldx 	#IFR1
.14d2	20 6c 2b	jsr $2b6c			jsr 	IFloatBitwiseOr
.14d5	b0 e3		bcs $14ba			bcs 	EXPDRange
.14d7	60		rts				rts
.14d8					EXPBinXor:
.14d8	24 0b		bit $0b				bit 	IFR0+IExp
.14da	30 e1		bmi $14bd			bmi 	EXPTypeError
.14dc	a2 0c		ldx #$0c			ldx 	#IFR1
.14de	20 83 2b	jsr $2b83			jsr 	IFloatBitwiseXor
.14e1	b0 d7		bcs $14ba			bcs 	EXPDRange
.14e3	60		rts				rts
.14e4					EXPConcatenate:
.14e4	18		clc				clc
.14e5	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.14e7	72 0c		adc ($0c)			adc 	(IFR1)
.14e9	b0 2d		bcs $1518			bcs 	_EXPCError
.14eb	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.14ed	da		phx				phx
.14ee	a6 09		ldx $09				ldx 	IFR0+1
.14f0	da		phx				phx
.14f1	20 b0 26	jsr $26b0			jsr 	StringTempAllocate 			; allocate string, set up return
.14f4	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.14f6	a5 0c		lda $0c				lda 	IFR1
.14f8	20 01 15	jsr $1501			jsr 	_EXPCCopyXA
.14fb	fa		plx				plx 								; copy second string
.14fc	68		pla				pla
.14fd	20 01 15	jsr $1501			jsr 	_EXPCCopyXA
.1500	60		rts				rts
.1501					_EXPCCopyXA:
.1501	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.1503	85 22		sta $22				sta 	zTemp0
.1505	b2 22		lda ($22)			lda 	(zTemp0)					; length
.1507	f0 0e		beq $1517			beq 	_EXPCCExit 					; nothing.
.1509	aa		tax				tax 								; count
.150a	5a		phy				phy 								; start positioin
.150b	a0 01		ldy #$01			ldy 	#1
.150d					_EXPCCLoop:
.150d	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.150f	20 e5 26	jsr $26e5			jsr 	StringTempWrite
.1512	c8		iny				iny
.1513	ca		dex				dex
.1514	d0 f7		bne $150d			bne 	_EXPCCLoop
.1516	7a		ply				ply
.1517					_EXPCCExit:
.1517	60		rts				rts
.1518					_EXPCError:
.1518	4c 3a 25	jmp $253a		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.151b					EXPReturnTrue:
.151b	a2 08		ldx #$08			ldx 	#IFR0
.151d	a9 01		lda #$01			lda 	#1
.151f	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.1522	20 6d 2f	jsr $2f6d			jsr 	IFloatNegate
.1525	60		rts				rts
.1526					EXPReturnFalse:
.1526	a2 08		ldx #$08			ldx 	#IFR0
.1528	4c 62 2f	jmp $2f62			jmp 	IFloatSetZero
.152b					EXPCompareEqual:
.152b	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.152e	c9 00		cmp #$00			cmp 	#0
.1530	f0 e9		beq $151b			beq 	EXPReturnTrue
.1532	80 f2		bra $1526			bra 	EXPReturnFalse
.1534					EXPCompareLess:
.1534	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.1537	c9 ff		cmp #$ff			cmp 	#$FF
.1539	f0 e0		beq $151b			beq 	EXPReturnTrue
.153b	80 e9		bra $1526			bra 	EXPReturnFalse
.153d					EXPCompareGreater:
.153d	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.1540	c9 01		cmp #$01			cmp 	#1
.1542	f0 d7		beq $151b			beq 	EXPReturnTrue
.1544	80 e0		bra $1526			bra 	EXPReturnFalse
.1546					EXPCompareNotEqual:
.1546	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.1549	c9 00		cmp #$00			cmp 	#0
.154b	d0 ce		bne $151b			bne 	EXPReturnTrue
.154d	80 d7		bra $1526			bra 	EXPReturnFalse
.154f					EXPCompareLessEqual:
.154f	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.1552	c9 01		cmp #$01			cmp 	#1
.1554	d0 c5		bne $151b			bne 	EXPReturnTrue
.1556	80 ce		bra $1526			bra 	EXPReturnFalse
.1558					EXPCompareGreaterEqual:
.1558	20 61 15	jsr $1561			jsr 	EXPCompareBaseCode
.155b	c9 ff		cmp #$ff			cmp 	#$FF
.155d	d0 bc		bne $151b			bne 	EXPReturnTrue
.155f	80 c5		bra $1526			bra 	EXPReturnFalse
.1561					EXPCompareBaseCode:
.1561	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1563	30 10		bmi $1575			bmi 	_EXCBCString
.1565	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1567	20 30 2c	jsr $2c30			jsr 	IFloatCompare
.156a	a5 08		lda $08				lda 	IFR0+IM0
.156c	f0 06		beq $1574			beq 	_EXCBCExit 					; return 0 if zero
.156e	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1570	50 02		bvc $1574			bvc 	_EXCBCExit
.1572	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1574					_EXCBCExit:
.1574	60		rts				rts
.1575					_EXCBCString:
.1575	5a		phy				phy
.1576	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1578	d2 0c		cmp ($0c)			cmp 	(IFR1)
.157a	90 02		bcc $157e			bcc 	_EXCBCSmaller
.157c	b2 0c		lda ($0c)			lda 	(IFR1)
.157e					_EXCBCSmaller:
.157e	aa		tax				tax
.157f	f0 0d		beq $158e			beq 	_EXCBCMatches 				; if zero common length matches
.1581	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1583					_EXCBCCheckSmallerMatches:
.1583	c8		iny				iny 								; compare directly as far as common length
.1584	38		sec				sec
.1585	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1587	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1589	d0 08		bne $1593			bne 	_EXCBCExit2
.158b	ca		dex				dex
.158c	d0 f5		bne $1583			bne 	_EXCBCCheckSmallerMatches
.158e					_EXCBCMatches:
.158e	38		sec				sec
.158f	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1591	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1593					_EXCBCExit2:
.1593	7a		ply				ply
.1594	c9 00		cmp #$00			cmp 	#0
.1596	f0 04		beq $159c			beq 	_EXCBCReturn
.1598	30 03		bmi $159d			bmi 	_EXCBCFF
.159a	a9 01		lda #$01			lda 	#1
.159c					_EXCBCReturn:
.159c	60		rts				rts
.159d					_EXCBCFF:
.159d	a9 ff		lda #$ff			lda 	#$FF
.159f	60		rts				rts
.15a0					_EXCBCRange:
.15a0	4c 2e 24	jmp $242e		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.15a3					EXPBinLeft:
.15a3	a9 ff		lda #$ff			lda 	#$FF
.15a5	8d 0c 05	sta $050c			sta 	EXPShiftLeftFlag
.15a8	4c ae 15	jmp $15ae			jmp 	EXPShiftCommon
.15ab					EXPBinRight:
.15ab	9c 0c 05	stz $050c			stz 	EXPShiftLeftFlag
.15ae					EXPShiftCommon:
.15ae	a5 0b		lda $0b				lda 	IFR0+IExp 					; both integers
.15b0	05 0f		ora $0f				ora 	IFR1+IExp
.15b2	29 7f		and #$7f			and 	#$7F
.15b4	d0 35		bne $15eb			bne 	_EXPSRange
.15b6	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.15b8	29 e0		and #$e0			and 	#$E0
.15ba	05 09		ora $09				ora 	IFR0+IM1
.15bc	05 0a		ora $0a				ora 	IFR0+IM2
.15be	d0 25		bne $15e5			bne 	_EXPSShiftZero 				; if so return zero
.15c0	5a		phy				phy
.15c1	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.15c3	29 1f		and #$1f			and 	#$1F
.15c5	f0 17		beq $15de			beq 	_EXPSExit 					; exit if zero
.15c7	a8		tay				tay
.15c8					_EXPSLoop:
.15c8	a2 0c		ldx #$0c			ldx 	#IFR1
.15ca	2c 0c 05	bit $050c			bit 	EXPShiftLeftFlag
.15cd	30 05		bmi $15d4			bmi 	_EXPSShiftLeft
.15cf	20 91 2f	jsr $2f91			jsr 	IFloatShiftRight
.15d2	80 07		bra $15db			bra 	_EXPSContinue
.15d4					_EXPSShiftLeft:
.15d4	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.15d7	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts
.15d9	30 10		bmi $15eb			bmi 	_EXPSRange
.15db					_EXPSContinue:
.15db	88		dey				dey
.15dc	d0 ea		bne $15c8			bne 	_EXPSLoop
.15de					_EXPSExit:
.15de	a2 0c		ldx #$0c			ldx 	#IFR1
.15e0	20 f3 2e	jsr $2ef3			jsr 	IFloatCopyFromRegister
.15e3	7a		ply				ply
.15e4	60		rts				rts
.15e5					_EXPSShiftZero:
.15e5	a2 08		ldx #$08			ldx 	#IFR0
.15e7	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.15ea	60		rts				rts
.15eb					_EXPSRange:
.15eb	4c 2e 24	jmp $242e		jmp	ErrorV_range
.050c					EXPShiftLeftFlag:
>050c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.15ee					EXPEvaluateExpression:
.15ee	a9 00		lda #$00			lda 	#0 							; current precedence
.15f0					EXPEvaluateExpressionPrecedenceA:
.15f0	48		pha				pha
.15f1	20 6b 16	jsr $166b			jsr 	EXPTermValueR0				; do first term.
.15f4					_EELoop:
.15f4	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.15f6	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.15f8	90 31		bcc $162b			bcc 	_EEExit
.15fa	aa		tax				tax 								; access the precedence of the operator.
.15fb	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.15fc	dd c1 18	cmp $18c1,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.15ff	b0 2b		bcs $162c			bcs 	_EEExit2
.1601	48		pha				pha 								; save current precedence.
.1602	da		phx				phx 								; save operator
.1603	c8		iny				iny 								; consume operator
.1604	da		phx				phx
.1605	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.1607	20 b1 2e	jsr $2eb1			jsr 	IFloatPushRx
.160a	fa		plx				plx
.160b	bd c1 18	lda $18c1,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.160e	20 f0 15	jsr $15f0			jsr 	EXPEvaluateExpressionPrecedenceA
.1611	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.1613	20 d2 2e	jsr $2ed2			jsr 	IFloatPullRx
.1616	fa		plx				plx 								; operator
.1617	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.1619	45 0f		eor $0f				eor 	IFR1+IExp
.161b	30 08		bmi $1625			bmi 	_EEType
.161d					_EETypeOkay:
.161d	8a		txa				txa
.161e	0a		asl a				asl 	a 							; double -> X
.161f	aa		tax				tax
.1620	20 28 16	jsr $1628			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1623	80 cf		bra $15f4			bra 	_EELoop
.1625					_EEType:
.1625	4c 4d 24	jmp $244d		jmp	ErrorV_type
.1628					_EECallBinary:
.1628	7c 69 1b	jmp ($1b69,x)			jmp 	(VectorTable,x)
.162b					_EEExit:
.162b	68		pla				pla 								; throw precedence
.162c					_EEExit2:
.162c	18		clc				clc
.162d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.162e					EXPEvalNumber:
.162e	20 ee 15	jsr $15ee			jsr 	EXPEvaluateExpression
.1631	24 0b		bit $0b				bit 	IFR0+IExp
.1633	30 01		bmi $1636			bmi 	EVUType
.1635	60		rts				rts
.1636					EVUType:
.1636	4c 4d 24	jmp $244d		jmp	ErrorV_type
.1639					EXPEvalInteger:
.1639	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.163c	20 62 2c	jsr $2c62			jsr 	IFloatIntegerR0
.163f	60		rts				rts
.1640					EXPEvalInteger16:
.1640	20 39 16	jsr $1639			jsr 	EXPEvalInteger
.1643	a5 0a		lda $0a				lda 	IFR0+IM2
.1645	d0 21		bne $1668			bne 	EVURange
.1647	a6 09		ldx $09				ldx 	IFR0+IM1
.1649	a5 08		lda $08				lda 	IFR0+IM0
.164b	60		rts				rts
.164c					EXPEvalInteger8:
.164c	20 39 16	jsr $1639			jsr 	EXPEvalInteger
.164f	a5 0a		lda $0a				lda 	IFR0+IM2
.1651	05 09		ora $09				ora 	IFR0+IM1
.1653	d0 13		bne $1668			bne 	EVURange
.1655	a5 08		lda $08				lda 	IFR0+IM0
.1657	60		rts				rts
.1658					EXPEvalString:
.1658	20 ee 15	jsr $15ee			jsr 	EXPEvaluateExpression
.165b	24 0b		bit $0b				bit 	IFR0+IExp
.165d	10 d7		bpl $1636			bpl 	EVUType
.165f	a6 09		ldx $09				ldx 	IFR0+IM1
.1661	86 23		stx $23				stx 	zTemp0+1
.1663	a5 08		lda $08				lda 	IFR0+IM0
.1665	85 22		sta $22				sta 	zTemp0
.1667	60		rts				rts
.1668					EVURange:
.1668	4c 2e 24	jmp $242e		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.166b					EXPTermValueR0:
.166b	20 b6 16	jsr $16b6			jsr 	EXPTermR0 					; get term
.166e	90 45		bcc $16b5			bcc 	_ETVNotReference 			; exit if value.
.1670	5a		phy				phy
.1671	a0 03		ldy #$03			ldy 	#3 							; get type
.1673	b1 08		lda ($08),y			lda 	(IFR0),y
.1675	30 14		bmi $168b			bmi 	_ETVDereferenceString
.1677	85 0b		sta $0b				sta 	IFR0+IExp 					; dereference to R0
.1679	88		dey				dey
.167a	b1 08		lda ($08),y			lda 	(IFR0),y
.167c	85 0a		sta $0a				sta 	IFR0+IM2
.167e	88		dey				dey
.167f	b1 08		lda ($08),y			lda 	(IFR0),y
.1681	aa		tax				tax
.1682	b2 08		lda ($08)			lda 	(IFR0)
.1684	86 09		stx $09				stx 	IFR0+IM1
.1686	85 08		sta $08				sta 	IFR0+IM0
.1688	7a		ply				ply
.1689	18		clc				clc
.168a	60		rts				rts
.168b					_ETVDereferenceString:
.168b	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.168d	b1 08		lda ($08),y			lda 	(IFR0),y
.168f	12 08		ora ($08)			ora 	(IFR0)
.1691	f0 11		beq $16a4			beq 	_ETVNull
.1693	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1695	aa		tax				tax
.1696	b2 08		lda ($08)			lda 	(IFR0)
.1698	18		clc				clc 								; add two so points to actual string.
.1699	69 02		adc #$02			adc 	#2
.169b	90 01		bcc $169e			bcc 	_EVDSNoCarry
.169d	e8		inx				inx
.169e					_EVDSNoCarry:
.169e	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.16a0	85 08		sta $08				sta 	IFR0
.16a2	80 08		bra $16ac			bra 	_ETVFillExit 				; tidy up and exit.
.16a4					_ETVNull:
.16a4	a9 b4		lda #$b4			lda 	#_EVTNString & $FF
.16a6	85 08		sta $08				sta 	IFR0+IM0
.16a8	a9 16		lda #$16			lda 	#_EVTNString >> 8
.16aa	85 09		sta $09				sta 	IFR0+IM1
.16ac					_ETVFillExit:
.16ac	64 0a		stz $0a				stz 	IFR0+IM2
.16ae	a9 80		lda #$80			lda 	#$80
.16b0	85 0b		sta $0b				sta 	IFR0+IExp
.16b2	7a		ply				ply
.16b3	60		rts				rts
.16b4					_EVTNString:
>16b4	00						.byte 	0
.16b5					_ETVNotReference:
.16b5	60		rts				rts
.16b6					EXPTermR0:
.16b6	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.16b8	30 10		bmi $16ca			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.16ba	c8		iny				iny 								; consume element
.16bb	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.16bd	b0 08		bcs $16c7			bcs 	_ETMIdentifier
.16bf	20 ee 16	jsr $16ee			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.16c2	20 21 17	jsr $1721			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.16c5	18		clc				clc 								; return value
.16c6	60		rts				rts
.16c7					_ETMIdentifier:
.16c7	4c f9 28	jmp $28f9			jmp 	VARCheckSimple 				; check simple variables A-Z
.16ca					_ETMIsUnaryOrMinus:
.16ca	c8		iny				iny 								; consume element
.16cb	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.16cd	d0 0a		bne $16d9			bne 	_ETMCheckUnary
.16cf	20 6b 16	jsr $166b			jsr 	EXPTermValueR0 				; get a term to negate
.16d2	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.16d4	20 6d 2f	jsr $2f6d			jsr 	IFloatNegate
.16d7	18		clc				clc
.16d8	60		rts				rts
.16d9					_ETMCheckUnary:
.16d9	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.16db	90 0e		bcc $16eb			bcc 	_ETMUnarySyntax
.16dd	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.16df	b0 0a		bcs $16eb			bcs 	_ETMUnarySyntax
.16e1	0a		asl a				asl 	a
.16e2	aa		tax				tax
.16e3	20 e8 16	jsr $16e8			jsr 	_ETMCallUnaryFunction
.16e6	18		clc				clc
.16e7	60		rts				rts
.16e8					_ETMCallUnaryFunction:
.16e8	7c 69 1b	jmp ($1b69,x)			jmp 	(VectorTable,x)
.16eb					_ETMUnarySyntax:
.16eb	4c 1d 24	jmp $241d		jmp	ErrorV_syntax
.16ee					EXPExtractTokenisedInteger:
.16ee	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.16f0	64 0b		stz $0b				stz 	IFR0+IExp
.16f2	64 09		stz $09				stz 	IFR0+IM1
.16f4	64 0a		stz $0a				stz 	IFR0+IM2
.16f6					_ETMConstant:
.16f6	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.16f8	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.16fa	b0 24		bcs $1720			bcs 	_ETMCExit 					; no.
.16fc	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.16fe	a5 09		lda $09				lda 	IFR0+IM1
.1700	85 0a		sta $0a				sta 	IFR0+IM2
.1702	a5 08		lda $08				lda 	IFR0+IM0
.1704	85 09		sta $09				sta 	IFR0+IM1
.1706	64 08		stz $08				stz 	IFR0+IM0
.1708	8a		txa				txa
.1709	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.170a	66 0a		ror $0a				ror 	IFR0+IM2
.170c	66 09		ror $09				ror 	IFR0+IM1
.170e	66 08		ror $08				ror 	IFR0+IM0
.1710	4a		lsr a				lsr 	a
.1711	66 0a		ror $0a				ror 	IFR0+IM2
.1713	66 09		ror $09				ror 	IFR0+IM1
.1715	66 08		ror $08				ror 	IFR0+IM0
.1717	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1719	11 18		ora ($18),y			ora 	(codePtr),y
.171b	85 08		sta $08				sta 	IFR0+IM0
.171d	c8		iny				iny 								; consume, loop back
.171e	80 d6		bra $16f6			bra 	_ETMConstant
.1720					_ETMCExit:
.1720	60		rts				rts
.1721					EXPCheckDecimalFollows:
.1721	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1723	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1725	d0 19		bne $1740			bne 	_ETMCDExit
.1727	c8		iny				iny 								; consume token.
.1728	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.172a	5a		phy				phy									; save current position
.172b	48		pha				pha 								; save count of chars.
.172c	38		sec				sec 								; address into YX : y + codePtr+1
.172d	98		tya				tya
.172e	65 18		adc $18				adc 	codePtr
.1730	aa		tax				tax
.1731	a5 19		lda $19				lda 	codePtr+1
.1733	69 00		adc #$00			adc 	#0
.1735	a8		tay				tay
.1736	68		pla				pla 								; get count.
.1737	20 06 2e	jsr $2e06			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.173a	7a		ply				ply 								; go to next token.
.173b	98		tya				tya
.173c	38		sec				sec
.173d	71 18		adc ($18),y			adc 	(codePtr),y
.173f	a8		tay				tay
.1740					_ETMCDExit:
.1740	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1741					EXPUnaryAbs:
.1741	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.1744	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.1747	20 a6 2b	jsr $2ba6			jsr 	IFloatAbsoluteR0
.174a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.174b					EXPUnaryAsc:
.174b	20 58 16	jsr $1658			jsr 	EXPEvalString 					; string to R0, zTemp0
.174e	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.1751	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1753	f0 06		beq $175b			beq 	_EXAZero 						; if so return 0
.1755	5a		phy				phy 									; otherwise get first character
.1756	a0 01		ldy #$01			ldy 	#1
.1758	b1 22		lda ($22),y			lda 	(zTemp0),y
.175a	7a		ply				ply
.175b					_EXAZero:
.175b	a2 08		ldx #$08			ldx 	#IFR0
.175d	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.1760	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1761					EXPUnaryChr:
.1761	20 4c 16	jsr $164c			jsr 	EXPEvalInteger8 				; expr
.1764	48		pha				pha 									; push on stack
.1765	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.1768	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.176a	20 b0 26	jsr $26b0			jsr 	StringTempAllocate
.176d	68		pla				pla
.176e	20 e5 26	jsr $26e5			jsr 	StringTempWrite
.1771	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1772					EXPUnaryDec:
.1772	20 58 16	jsr $1658			jsr 	EXPEvalString 					; string to R0, zTemp0
.1775	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.1778	5a		phy				phy
.1779	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.177b	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.177e	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1780	f0 3b		beq $17bd			beq 	_EUDError 						; empty string
.1782	aa		tax				tax
.1783	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1785					_EUDLoop:
.1785	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next
.1787	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1789	90 02		bcc $178d			bcc 	_EUDNoCase
.178b	e9 20		sbc #$20			sbc 	#$20
.178d					_EUDNoCase:
.178d	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.178f	90 2c		bcc $17bd			bcc 	_EUDError
.1791	c9 3a		cmp #$3a			cmp 	#'9'+1
.1793	90 0a		bcc $179f			bcc 	_EUDOkay
.1795	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1797	90 24		bcc $17bd			bcc 	_EUDError
.1799	c9 47		cmp #$47			cmp 	#'F'+1
.179b	b0 20		bcs $17bd			bcs 	_EUDError
.179d	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.179f					_EUDOkay:
.179f	29 0f		and #$0f			and 	#15 							; make constant
.17a1	da		phx				phx
.17a2	48		pha				pha
.17a3	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.17a5	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.17a8	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.17ab	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.17ae	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.17b1	68		pla				pla 									; pop constant and OR in
.17b2	fa		plx				plx
.17b3	05 08		ora $08				ora 	IFR0+IM0
.17b5	85 08		sta $08				sta 	IFR0+IM0
.17b7	c8		iny				iny 									; next
.17b8	ca		dex				dex
.17b9	d0 ca		bne $1785			bne 	_EUDLoop
.17bb	7a		ply				ply
.17bc	60		rts				rts
.17bd					_EUDError:
.17bd	4c 3f 24	jmp $243f		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.17c0					EXPUnaryInlineDec:
.17c0	4c 1d 24	jmp $241d		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.17c3					EXPUnaryPeek:
.17c3	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 				; number to R0
.17c6	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.17c9	b2 08		lda ($08)			lda 	(IFR0)
.17cb	a2 08		ldx #$08			ldx 	#IFR0
.17cd	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.17d0	60		rts				rts
.17d1					EXPUnaryDeek:
.17d1	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 				; number to R0
.17d4	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.17d7	5a		phy				phy
.17d8	a0 01		ldy #$01			ldy 	#1
.17da	b1 08		lda ($08),y			lda 	(IFR0),y
.17dc	7a		ply				ply
.17dd	48		pha				pha
.17de	b2 08		lda ($08)			lda 	(IFR0)
.17e0	a2 08		ldx #$08			ldx 	#IFR0
.17e2	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.17e5	68		pla				pla
.17e6	85 09		sta $09				sta 	IFR0+IM1
.17e8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.17e9					EXPUnaryNull:
.17e9	20 6b 16	jsr $166b			jsr 	EXPTermValueR0
.17ec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.17ed					EXPUnaryFrac:
.17ed	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.17f0	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.17f3	20 0c 2c	jsr $2c0c			jsr 	IFloatFractionalR0
.17f6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.17f7					EXPUnaryInkey:
.17f7	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.17fa	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.17fc	20 b0 26	jsr $26b0			jsr 	StringTempAllocate
.17ff	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.1802	b0 06		bcs $180a			bcs 	_EUIExit
.1804	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.1807	20 e5 26	jsr $26e5			jsr 	StringTempWrite
.180a					_EUIExit:
.180a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.180b					EXPUnaryInt:
.180b	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.180e	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.1811	20 62 2c	jsr $2c62			jsr 	IFloatIntegerR0
.1814	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1815					EXPUnaryLen:
.1815	20 58 16	jsr $1658			jsr 	EXPEvalString 					; string to R0, zTemp0
.1818	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.181b	b2 22		lda ($22)			lda 	(zTemp0)
.181d	a2 08		ldx #$08			ldx 	#IFR0
.181f	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.1822	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1823					EXPUnaryParenthesis:
.1823	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.1826	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.1829	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.182a					EXPUnaryRnd:
.182a	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; number to R0
.182d	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 				; )
.1830	a2 08		ldx #$08			ldx 	#IFR0
.1832	20 49 18	jsr $1849			jsr 	EXPLoadInRandom
.1835	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1837	85 0b		sta $0b				sta 	IFR0+IExp
.1839	60		rts				rts
.183a					ExpUnaryRand:
.183a	20 39 16	jsr $1639			jsr 	EXPEvalInteger 				; integer to R0
.183d	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 				; )
.1840	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1842	20 49 18	jsr $1849			jsr 	EXPLoadInRandom
.1845	20 d3 2a	jsr $2ad3			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1848	60		rts				rts
.1849					EXPLoadInRandom:
.1849	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.184c	20 5e 18	jsr $185e			jsr 	EXPRandom32
.184f	95 00		sta $00,x			sta 	IM0,x
.1851	20 5e 18	jsr $185e			jsr 	EXPRandom32
.1854	95 01		sta $01,x			sta 	IM1,x
.1856	20 5e 18	jsr $185e			jsr 	EXPRandom32
.1859	29 7f		and #$7f			and 	#$7F
.185b	95 02		sta $02,x			sta 	IM2,x
.185d	60		rts				rts
.185e					EXPRandom32:
.185e	5a		phy				phy
.185f	a0 08		ldy #$08			ldy 	#8
.1861	ad 0d 05	lda $050d			lda 	EXPSeed+0
.1864	0d 0e 05	ora $050e			ora 	EXPSeed+1
.1867	0d 0f 05	ora $050f			ora 	EXPSeed+2
.186a	0d 10 05	ora $0510			ora 	EXPSeed+3
.186d	d0 08		bne $1877			bne 	_EXPRNoReset
.186f	ee 0d 05	inc $050d			inc 	EXPSeed+0
.1872	a0 10		ldy #$10			ldy 	#16
.1874	8c 10 05	sty $0510			sty 	EXPSeed+3
.1877					_EXPRNoReset:
.1877	ad 0d 05	lda $050d			lda 	EXPSeed+0
.187a					_EXPRLoop:
.187a	0a		asl a				asl		a
.187b	2e 0e 05	rol $050e			rol 	EXPSeed+1
.187e	2e 0f 05	rol $050f			rol 	EXPSeed+2
.1881	2e 10 05	rol $0510			rol 	EXPSeed+3
.1884	90 02		bcc $1888			bcc 	_EXPRNoEOR
.1886	49 c5		eor #$c5			eor 	#$C5
.1888					_EXPRNoEOR:
.1888	88		dey				dey
.1889	d0 ef		bne $187a			bne 	_EXPRLoop
.188b	8d 0d 05	sta $050d			sta 	EXPSeed+0
.188e	7a		ply				ply
.188f	60		rts				rts
.050d					EXPSeed:
>050d							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1890					EXPUnarySgn:
.1890	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.1893	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.1896	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1898	20 04 2f	jsr $2f04			jsr 	IFloatCopyToRegister
.189b	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.189d	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.18a0	a2 0c		ldx #$0c			ldx 	#IFR1
.18a2	20 30 2c	jsr $2c30			jsr 	IFloatCompare 					; compare R1 vs 0.
.18a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.18a6					EXPUnarySqr:
.18a6	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; number to R0
.18a9	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.18ac	20 ae 2b	jsr $2bae			jsr 	IFloatSquareRootR0 				; square root.
.18af	b0 01		bcs $18b2			bcs 	_EUSValue
.18b1	60		rts				rts
.18b2					_EUSValue:
.18b2	4c 2e 24	jmp $242e		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.18b5					EXPUnaryHex:
.18b5	20 39 16	jsr $1639			jsr 	EXPEvalInteger 					; expr
.18b8	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.18bb	5a		phy				phy
.18bc	a9 10		lda #$10			lda 	#16
.18be	20 03 2d	jsr $2d03			jsr 	IFloatIntegerToStringR0
.18c1	80 0a		bra $18cd			bra 	EUSMain
.18c3					EXPUnaryStr:
.18c3	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 					; expr
.18c6	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.18c9	5a		phy				phy
.18ca	20 5f 2d	jsr $2d5f			jsr 	IFloatFloatToStringR0 			; convert to string
.18cd					EUSMain:
.18cd	b0 18		bcs $18e7			bcs 	_EUSError
.18cf	86 22		stx $22				stx 	zTemp0 							; save string address
.18d1	84 23		sty $23				sty 	zTemp0+1
.18d3	48		pha				pha 									; save count
.18d4	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.18d6	20 b0 26	jsr $26b0			jsr 	StringTempAllocate
.18d9	fa		plx				plx 									; count in X
.18da	a0 00		ldy #$00			ldy 	#0
.18dc					_EUSCopy:
.18dc	b1 22		lda ($22),y			lda 	(zTemp0),y
.18de	c8		iny				iny
.18df	20 e5 26	jsr $26e5			jsr 	StringTempWrite
.18e2	ca		dex				dex
.18e3	d0 f7		bne $18dc			bne	 	_EUSCopy
.18e5	7a		ply				ply
.18e6	60		rts				rts
.18e7					_EUSError:
.18e7	4c 2e 24	jmp $242e		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.18ea					EXPUnaryInlineString:
.18ea	18		clc				clc 								; physical address -> IM0,1
.18eb	98		tya				tya
.18ec	65 18		adc $18				adc 	codePtr
.18ee	85 08		sta $08				sta 	IFR0+IM0
.18f0	a5 19		lda $19				lda 	codePtr+1
.18f2	69 00		adc #$00			adc 	#0
.18f4	85 09		sta $09				sta 	IFR0+IM1
.18f6	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in rest
.18f8	a9 80		lda #$80			lda 	#$80
.18fa	85 0b		sta $0b				sta 	IFR0+IExp
.18fc	98		tya				tya	 								; skip over it.
.18fd	38		sec				sec
.18fe	71 18		adc ($18),y			adc 	(codePtr),y
.1900	a8		tay				tay
.1901	60		rts				rts
.1902					_EXPUISRange:
.1902	4c 2e 24	jmp $242e		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1905					EXPUnaryLeft:
.1905	20 4b 19	jsr $194b			jsr 	EXPCommonStart 					; <string>,
.1908	48		pha				pha 									; save string address on stack
.1909	da		phx				phx
.190a	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.190c	48		pha				pha
.190d	20 4c 16	jsr $164c			jsr 	EXPEvalInteger8 				; characters to do
.1910	80 44		bra $1956			bra 	EXPSubstringCommon
.1912					EXPUnaryRight:
.1912	20 4b 19	jsr $194b			jsr 	EXPCommonStart 					; <string>,
.1915	48		pha				pha 									; save string address on stack
.1916	da		phx				phx
.1917	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1919	48		pha				pha
.191a	20 4c 16	jsr $164c			jsr 	EXPEvalInteger8 				; characters to do
.191d	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.191f	68		pla				pla
.1920	38		sec				sec
.1921	e5 22		sbc $22				sbc 	zTemp0
.1923	b0 02		bcs $1927			bcs 	_EUROffLeft
.1925	a9 00		lda #$00			lda 	#0
.1927					_EUROffLeft:
.1927	48		pha				pha 									; start pos
.1928	a9 ff		lda #$ff			lda 	#255
.192a	80 2a		bra $1956			bra 	EXPSubstringCommon
.192c					EXPUnaryMid:
.192c	20 4b 19	jsr $194b			jsr 	EXPCommonStart 					; <string>,
.192f	48		pha				pha 									; save string address on stack
.1930	da		phx				phx
.1931	20 4c 16	jsr $164c			jsr 	EXPEvalInteger8 				; characters start
.1934	f0 12		beq $1948			beq 	_EUSError 						; 1 is left
.1936	3a		dec a				dec 	a 								; zero based.
.1937	48		pha				pha
.1938	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.193a	c9 99		cmp #$99			cmp 	#PR_COMMA
.193c	f0 04		beq $1942			beq 	_EUMLength 						; if so m is provided
.193e	a9 ff		lda #$ff			lda 	#255 							; default m
.1940	80 14		bra $1956			bra 	EXPSubstringCommon
.1942					_EUMLength:
.1942	c8		iny				iny 									; consume comma
.1943	20 4c 16	jsr $164c			jsr 	EXPEvalInteger8 				; characters to do
.1946	80 0e		bra $1956			bra 	EXPSubstringCommon
.1948					_EUSError:
.1948	4c 3f 24	jmp $243f		jmp	ErrorV_value
.194b					EXPCommonStart:
.194b	20 58 16	jsr $1658			jsr 	EXPEvalString
.194e	20 c2 25	jsr $25c2			jsr 	ERRCheckComma
.1951	a5 08		lda $08				lda 	IFR0+IM0
.1953	a6 09		ldx $09				ldx 	IFR0+IM1
.1955	60		rts				rts
.1956					EXPSubstringCommon:
.1956	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1958	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; check right bracket.
.195b	68		pla				pla 									; start position
.195c	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.195e	fa		plx				plx 									; get string address to zTemp2.
.195f	86 27		stx $27				stx 	zTemp2+1
.1961	68		pla				pla
.1962	85 26		sta $26				sta 	zTemp2
.1964	38		sec				sec 									; length - start is the max count of chars
.1965	b2 26		lda ($26)			lda 	(zTemp2)
.1967	e5 25		sbc $25				sbc 	zTemp1+1
.1969	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.196b	b0 02		bcs $196f			bcs 	_EXPSSNoTrim
.196d	85 24		sta $24				sta 	zTemp1 							; update count with available
.196f					_EXPSSNoTrim:
.196f	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1971	20 b0 26	jsr $26b0			jsr 	StringTempAllocate 				; allocate memory for it.
.1974	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1976	f0 15		beq $198d			beq 	_EXPSSExit
.1978	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.197a	d2 26		cmp ($26)			cmp 	(zTemp2)
.197c	b0 0f		bcs $198d			bcs 	_EXPSSExit
.197e	5a		phy				phy
.197f	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1981	c8		iny				iny 									; +1 for the length byte
.1982					_EXPSSCopy:
.1982	b1 26		lda ($26),y			lda 	(zTemp2),y
.1984	20 e5 26	jsr $26e5			jsr 	StringTempWrite
.1987	c8		iny				iny
.1988	c6 24		dec $24				dec 	zTemp1
.198a	d0 f6		bne $1982			bne 	_EXPSSCopy
.198c	7a		ply				ply
.198d					_EXPSSExit:
.198d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.198e					EXPUnaryVal:
.198e	20 58 16	jsr $1658			jsr 	EXPEvalString 					; string to R0, zTemp0
.1991	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 					; )
.1994	20 98 19	jsr $1998			jsr 	VALConversionZTemp0
.1997	60		rts				rts
.1998					VALConversionZTemp0:
.1998	5a		phy				phy
.1999	18		clc				clc
.199a	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.199c	69 01		adc #$01			adc 	#1
.199e	aa		tax				tax
.199f	a5 23		lda $23				lda 	zTemp0+1
.19a1	69 00		adc #$00			adc 	#0
.19a3	a8		tay				tay
.19a4	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.19a6	20 c6 2d	jsr $2dc6			jsr 	IFloatStringToFloatR0 			; do conversion
.19a9	b0 02		bcs $19ad			bcs 	_EUVError
.19ab	7a		ply				ply
.19ac	60		rts				rts
.19ad					_EUVError:
.19ad	4c 3f 24	jmp $243f		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.19b0					BinaryPrecedence:
>19b0	02					.byte	 2	; $ef =
>19b1	02					.byte	 2	; $f0 <>
>19b2	02					.byte	 2	; $f1 <=
>19b3	02					.byte	 2	; $f2 <
>19b4	02					.byte	 2	; $f3 >=
>19b5	02					.byte	 2	; $f4 >
>19b6	01					.byte	 1	; $f5 XOR
>19b7	01					.byte	 1	; $f6 OR
>19b8	01					.byte	 1	; $f7 AND
>19b9	04					.byte	 4	; $f8 DIV
>19ba	04					.byte	 4	; $f9 MOD
>19bb	04					.byte	 4	; $fa <<
>19bc	04					.byte	 4	; $fb >>
>19bd	04					.byte	 4	; $fc /
>19be	04					.byte	 4	; $fd *
>19bf	03					.byte	 3	; $fe -
>19c0	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.19c1					StructureOffsets:
>19c1	01					.byte	1  	; $80 REPEAT
>19c2	ff					.byte	255	; $81 UNTIL
>19c3	01					.byte	1  	; $82 WHILE
>19c4	ff					.byte	255	; $83 WEND
>19c5	01					.byte	1  	; $84 IF
>19c6	ff					.byte	255	; $85 ENDIF
>19c7	01					.byte	1  	; $86 DO
>19c8	ff					.byte	255	; $87 LOOP
>19c9	01					.byte	1  	; $88 PROC
>19ca	ff					.byte	255	; $89 ENDPROC
>19cb	01					.byte	1  	; $8a FOR
>19cc	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.19cd					StandardTokens:
>19cd	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>19d4	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>19da	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>19e0	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>19e5	02 49 46				.byte	$02,$49,$46                             	; $84 if
>19e8	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>19ee	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>19f1	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>19f6	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>19fb	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1a03	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1a07	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1a0c	00					.byte	$00                                     	; $8c [[end]]
>1a0d	00					.byte	$00                                     	; $8d [[shift]]
>1a0e	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1a13	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1a18	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1a1b	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1a20	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1a24	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1a2a	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1a30	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1a35	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1a39	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1a3d	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1a42	01 2c					.byte	$01,$2c                                 	; $99 ,
>1a44	01 3b					.byte	$01,$3b                                 	; $9a ;
>1a46	01 3a					.byte	$01,$3a                                 	; $9b :
>1a48	01 27					.byte	$01,$27                                 	; $9c '
>1a4a	01 29					.byte	$01,$29                                 	; $9d )
>1a4c	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1a50	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1a56	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1a5a	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1a5e	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1a63	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1a67	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1a6e	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1a73	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1a78	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1a7d	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1a82	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1a87	00					.byte	0											; $aa
>1a88	00					.byte	0											; $ab
>1a89	00					.byte	0											; $ac
>1a8a	00					.byte	0											; $ad
>1a8b	00					.byte	0											; $ae
>1a8c	00					.byte	0											; $af
>1a8d	00					.byte	0											; $b0
>1a8e	00					.byte	0											; $b1
>1a8f	00					.byte	0											; $b2
>1a90	00					.byte	0											; $b3
>1a91	00					.byte	0											; $b4
>1a92	00					.byte	0											; $b5
>1a93	00					.byte	0											; $b6
>1a94	00					.byte	0											; $b7
>1a95	00					.byte	0											; $b8
>1a96	00					.byte	0											; $b9
>1a97	00					.byte	0											; $ba
>1a98	00					.byte	0											; $bb
>1a99	00					.byte	0											; $bc
>1a9a	00					.byte	0											; $bd
>1a9b	00					.byte	0											; $be
>1a9c	00					.byte	0											; $bf
>1a9d	00					.byte	0											; $c0
>1a9e	00					.byte	0											; $c1
>1a9f	00					.byte	0											; $c2
>1aa0	00					.byte	0											; $c3
>1aa1	00					.byte	0											; $c4
>1aa2	00					.byte	0											; $c5
>1aa3	00					.byte	0											; $c6
>1aa4	00					.byte	0											; $c7
>1aa5	00					.byte	0											; $c8
>1aa6	00					.byte	0											; $c9
>1aa7	00					.byte	0											; $ca
>1aa8	00					.byte	0											; $cb
>1aa9	00					.byte	0											; $cc
>1aaa	00					.byte	0											; $cd
>1aab	00					.byte	0											; $ce
>1aac	00					.byte	0											; $cf
>1aad	00					.byte	0											; $d0
>1aae	00					.byte	0											; $d1
>1aaf	00					.byte	0											; $d2
>1ab0	00					.byte	0											; $d3
>1ab1	00					.byte	0											; $d4
>1ab2	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1ab8	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1abe	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1ac6	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1acd	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1ad3	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ad9	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1ade	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1ae3	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1ae8	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1aed	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1af2	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1af8	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1afd	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1b05	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1b0c	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1b11	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1b16	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1b1c	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1b21	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1b27	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1b2c	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1b32	01 28					.byte	$01,$28                                 	; $eb (
>1b34	01 24					.byte	$01,$24                                 	; $ec $
>1b36	00					.byte	$00                                     	; $ed [[decimal]]
>1b37	00					.byte	$00                                     	; $ee [[string]]
>1b38	01 3d					.byte	$01,$3d                                 	; $ef =
>1b3a	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1b3d	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1b40	01 3c					.byte	$01,$3c                                 	; $f2 <
>1b42	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1b45	01 3e					.byte	$01,$3e                                 	; $f4 >
>1b47	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1b4b	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1b4e	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1b52	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1b56	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1b5a	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1b5d	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1b60	01 2f					.byte	$01,$2f                                 	; $fc /
>1b62	01 2a					.byte	$01,$2a                                 	; $fd *
>1b64	01 2d					.byte	$01,$2d                                 	; $fe -
>1b66	01 2b					.byte	$01,$2b                                 	; $ff +
>1b68	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1b69					VectorTable:
>1b69	0d 23					.word	Command_REPEAT           ; $80 REPEAT
>1b6b	16 23					.word	Command_UNTIL            ; $81 UNTIL
>1b6d	f0 23					.word	Command_WHILE            ; $82 WHILE
>1b6f	11 24					.word	Command_WEND             ; $83 WEND
>1b71	e3 22					.word	IfCommand                ; $84 IF
>1b73	0c 23					.word	EndIf                    ; $85 ENDIF
>1b75	80 21					.word	Command_DO               ; $86 DO
>1b77	98 21					.word	Command_LOOP             ; $87 LOOP
>1b79	6e 14					.word	NoExec08                 ; $88 PROC
>1b7b	74 21					.word	Command_ENDPROC          ; $89 ENDPROC
>1b7d	a1 21					.word	Command_FOR              ; $8a FOR
>1b7f	2e 22					.word	Command_NEXT             ; $8b NEXT
>1b81	f4 13					.word	RUNEndOfLine             ; $8c [[END]]
>1b83	50 14					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1b85	05 23					.word	ElseCode                 ; $8e ELSE
>1b87	6e 14					.word	NoExec01                 ; $8f THEN
>1b89	6e 14					.word	NoExec02                 ; $90 TO
>1b8b	6e 14					.word	NoExec03                 ; $91 STEP
>1b8d	88 12					.word	CommandLET               ; $92 LET
>1b8f	d9 11					.word	Command_Print            ; $93 PRINT
>1b91	d2 11					.word	Command_Input            ; $94 INPUT
>1b93	38 21					.word	Command_CALL             ; $95 CALL
>1b95	59 14					.word	Command_Sys              ; $96 SYS
>1b97	db 13					.word	Command_REM              ; $97 REM
>1b99	89 21					.word	Command_EXIT             ; $98 EXIT
>1b9b	6e 14					.word	NoExec04                 ; $99 ,
>1b9d	6e 14					.word	NoExec05                 ; $9a ;
>1b9f	6e 14					.word	NoExec06                 ; $9b :
>1ba1	db 13					.word	Command_REM2             ; $9c '
>1ba3	6e 14					.word	NoExec07                 ; $9d )
>1ba5	8c 10					.word	CommandDIM               ; $9e DIM
>1ba7	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1ba9	d2 13					.word	Command_NEW              ; $a0 NEW
>1bab	e8 13					.word	Command_RUN              ; $a1 RUN
>1bad	56 14					.word	Command_STOP             ; $a2 STOP
>1baf	53 14					.word	Command_END              ; $a3 END
>1bb1	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1bb3	02 13					.word	Command_LIST             ; $a5 LIST
>1bb5	37 27					.word	NotImplemented           ; $a6 SAVE
>1bb7	37 27					.word	NotImplemented           ; $a7 LOAD
>1bb9	ab 11					.word	Command_Poke             ; $a8 POKE
>1bbb	a8 11					.word	Command_Doke             ; $a9 DOKE
>1bbd	37 27					.word	NotImplemented           ; $aa
>1bbf	37 27					.word	NotImplemented           ; $ab
>1bc1	37 27					.word	NotImplemented           ; $ac
>1bc3	37 27					.word	NotImplemented           ; $ad
>1bc5	37 27					.word	NotImplemented           ; $ae
>1bc7	37 27					.word	NotImplemented           ; $af
>1bc9	37 27					.word	NotImplemented           ; $b0
>1bcb	37 27					.word	NotImplemented           ; $b1
>1bcd	37 27					.word	NotImplemented           ; $b2
>1bcf	37 27					.word	NotImplemented           ; $b3
>1bd1	37 27					.word	NotImplemented           ; $b4
>1bd3	37 27					.word	NotImplemented           ; $b5
>1bd5	37 27					.word	NotImplemented           ; $b6
>1bd7	37 27					.word	NotImplemented           ; $b7
>1bd9	37 27					.word	NotImplemented           ; $b8
>1bdb	37 27					.word	NotImplemented           ; $b9
>1bdd	37 27					.word	NotImplemented           ; $ba
>1bdf	37 27					.word	NotImplemented           ; $bb
>1be1	37 27					.word	NotImplemented           ; $bc
>1be3	37 27					.word	NotImplemented           ; $bd
>1be5	37 27					.word	NotImplemented           ; $be
>1be7	37 27					.word	NotImplemented           ; $bf
>1be9	37 27					.word	NotImplemented           ; $c0
>1beb	37 27					.word	NotImplemented           ; $c1
>1bed	37 27					.word	NotImplemented           ; $c2
>1bef	37 27					.word	NotImplemented           ; $c3
>1bf1	37 27					.word	NotImplemented           ; $c4
>1bf3	37 27					.word	NotImplemented           ; $c5
>1bf5	37 27					.word	NotImplemented           ; $c6
>1bf7	37 27					.word	NotImplemented           ; $c7
>1bf9	37 27					.word	NotImplemented           ; $c8
>1bfb	37 27					.word	NotImplemented           ; $c9
>1bfd	37 27					.word	NotImplemented           ; $ca
>1bff	37 27					.word	NotImplemented           ; $cb
>1c01	37 27					.word	NotImplemented           ; $cc
>1c03	37 27					.word	NotImplemented           ; $cd
>1c05	37 27					.word	NotImplemented           ; $ce
>1c07	37 27					.word	NotImplemented           ; $cf
>1c09	37 27					.word	NotImplemented           ; $d0
>1c0b	37 27					.word	NotImplemented           ; $d1
>1c0d	37 27					.word	NotImplemented           ; $d2
>1c0f	37 27					.word	NotImplemented           ; $d3
>1c11	37 27					.word	NotImplemented           ; $d4
>1c13	d1 17					.word	EXPUnaryDeek             ; $d5 DEEK(
>1c15	c3 17					.word	EXPUnaryPeek             ; $d6 PEEK(
>1c17	12 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1c19	05 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1c1b	2c 19					.word	EXPUnaryMid              ; $d9 MID$(
>1c1d	c3 18					.word	EXPUnaryStr              ; $da STR$(
>1c1f	8e 19					.word	EXPUnaryVal              ; $db VAL(
>1c21	90 18					.word	EXPUnarySgn              ; $dc SGN(
>1c23	41 17					.word	EXPUnaryAbs              ; $dd ABS(
>1c25	15 18					.word	EXPUnaryLen              ; $de LEN(
>1c27	a6 18					.word	EXPUnarySqr              ; $df SQR(
>1c29	61 17					.word	EXPUnaryChr              ; $e0 CHR$(
>1c2b	4b 17					.word	EXPUnaryAsc              ; $e1 ASC(
>1c2d	f7 17					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1c2f	37 27					.word	NotImplemented           ; $e3 EVENT(
>1c31	37 27					.word	NotImplemented           ; $e4 TIME
>1c33	0b 18					.word	EXPUnaryInt              ; $e5 INT(
>1c35	ed 17					.word	EXPUnaryFrac             ; $e6 FRAC(
>1c37	72 17					.word	EXPUnaryDec              ; $e7 DEC(
>1c39	b5 18					.word	EXPUnaryHex              ; $e8 HEX$(
>1c3b	2a 18					.word	EXPUnaryRnd              ; $e9 RND(
>1c3d	3a 18					.word	ExpUnaryRand             ; $ea RAND(
>1c3f	23 18					.word	EXPUnaryParenthesis      ; $eb (
>1c41	e9 17					.word	EXPUnaryNull             ; $ec $
>1c43	c0 17					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1c45	ea 18					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1c47	2b 15					.word	EXPCompareEqual          ; $ef =
>1c49	46 15					.word	EXPCompareNotEqual       ; $f0 <>
>1c4b	4f 15					.word	EXPCompareLessEqual      ; $f1 <=
>1c4d	34 15					.word	EXPCompareLess           ; $f2 <
>1c4f	58 15					.word	EXPCompareGreaterEqual   ; $f3 >=
>1c51	3d 15					.word	EXPCompareGreater        ; $f4 >
>1c53	d8 14					.word	EXPBinXor                ; $f5 XOR
>1c55	cc 14					.word	EXPBinOr                 ; $f6 OR
>1c57	c0 14					.word	EXPBinAnd                ; $f7 AND
>1c59	98 14					.word	EXPBinIDiv               ; $f8 DIV
>1c5b	a9 14					.word	EXPBinIMod               ; $f9 MOD
>1c5d	a3 15					.word	EXPBinLeft               ; $fa <<
>1c5f	ab 15					.word	EXPBinRight              ; $fb >>
>1c61	8c 14					.word	EXPBinFDiv               ; $fc /
>1c63	83 14					.word	EXPBinMul                ; $fd *
>1c65	7a 14					.word	EXPBinSub                ; $fe -
>1c67	71 14					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1c69					TOKDetokenise:
.1c69	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1c6b	84 27		sty $27				sty 	zTemp2+1
.1c6d	9c 13 05	stz $0513			stz		TOKLastCharacter 			; clear last character
.1c70					_TOKDLoop:
.1c70	20 9f 1c	jsr $1c9f			jsr 	TOKDGet 					; get next
.1c73	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1c75	f0 26		beq $1c9d			beq 	_TOKDExit
.1c77	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1c79	f0 1d		beq $1c98			beq 	_TOKDDataItem
.1c7b	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1c7d	f0 19		beq $1c98			beq 	_TOKDDataItem
.1c7f	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1c81	10 05		bpl $1c88			bpl 	_TOKDNotToken
.1c83	20 67 1d	jsr $1d67			jsr 	TOKDToken 					; token to text.
.1c86	80 e8		bra $1c70			bra 	_TOKDLoop
.1c88					_TOKDNotToken:
.1c88	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1c8a	90 05		bcc $1c91			bcc 	_TOKDNotIdentifier
.1c8c	20 da 1c	jsr $1cda			jsr 	TOKDIdentifier
.1c8f	80 df		bra $1c70			bra 	_TOKDLoop
.1c91					_TOKDNotIdentifier:
.1c91	a0 0a		ldy #$0a			ldy 	#10
.1c93	20 23 1d	jsr $1d23			jsr 	TOKDInteger
.1c96	80 d8		bra $1c70			bra 	_TOKDLoop
.1c98					_TOKDDataItem:
.1c98	20 b5 1c	jsr $1cb5			jsr 	TOKDDataItem
.1c9b	80 d3		bra $1c70			bra 	_TOKDLoop
.1c9d					_TOKDExit:
.1c9d	18		clc				clc
.1c9e	60		rts				rts
.1c9f	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1ca1	e6 26		inc $26				inc 	zTemp2
.1ca3	d0 02		bne $1ca7			bne 	_TKDGExit
.1ca5	e6 27		inc $27				inc 	zTemp2+1
.1ca7					_TKDGExit:
.1ca7	60		rts				rts
.1ca8					TOKDOutput:
.1ca8	8d 13 05	sta $0513			sta 	TOKLastCharacter
.1cab	6c 11 05	jmp ($0511)			jmp 	(TOKOutputMethod)
.1cae					TOKSetDetokeniseOutput:
.1cae	8e 11 05	stx $0511			stx 	TOKOutputMethod
.1cb1	8c 12 05	sty $0512			sty 	TOKOutputMethod+1
.1cb4	60		rts				rts
.0511					TOKOutputMethod:
>0511							.fill 	2
.0513					TOKLastCharacter:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1cb5					TOKDDataItem:
.1cb5	a8		tay				tay 								; type in Y
.1cb6	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1cb8	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1cba	f0 02		beq $1cbe			beq 	_TOKDDIsString
.1cbc	a9 2e		lda #$2e			lda 	#'.'
.1cbe					_TOKDDIsString:
.1cbe	20 a8 1c	jsr $1ca8			jsr 	TOKDOutput 					; dump it
.1cc1	20 9f 1c	jsr $1c9f			jsr 	TOKDGet 					; get length into X
.1cc4	aa		tax				tax
.1cc5					_TOKDDOutput:
.1cc5	ca		dex				dex 								; are we complete
.1cc6	30 08		bmi $1cd0			bmi 	_TOKDDEnd
.1cc8	20 9f 1c	jsr $1c9f			jsr 	TOKDGet 					; get character and output it
.1ccb	20 a8 1c	jsr $1ca8			jsr 	TOKDOutput
.1cce	80 f5		bra $1cc5			bra 	_TOKDDOutput
.1cd0					_TOKDDEnd:
.1cd0	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1cd2	d0 05		bne $1cd9			bne 	_TOKDDNotString
.1cd4	a9 22		lda #$22			lda 	#'"'
.1cd6	20 a8 1c	jsr $1ca8			jsr 	TOKDOutput
.1cd9					_TOKDDNotString:
.1cd9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1cda					TOKDIdentifier:
.1cda	a0 ff		ldy #$ff			ldy 	#$FF
.1cdc	8c 14 05	sty $0514			sty 	TOKDIFirstChar
.1cdf					_TOKDLoop:
.1cdf	a8		tay				tay 								; token in Y
.1ce0	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1ce2	c0 64		cpy #$64			cpy 	#$64
.1ce4	f0 11		beq $1cf7			beq 	_TOKDIOutput
.1ce6	a9 5f		lda #$5f			lda 	#'_'
.1ce8	c0 65		cpy #$65			cpy 	#$65
.1cea	f0 0b		beq $1cf7			beq 	_TOKDIOutput
.1cec	98		tya				tya 								; handle a-z
.1ced	18		clc				clc
.1cee	69 21		adc #$21			adc	 	#$21
.1cf0	c0 5a		cpy #$5a			cpy 	#$5A
.1cf2	90 03		bcc $1cf7			bcc 	_TOKDIOutput
.1cf4	38		sec				sec 								; handle 0-9
.1cf5	e9 4b		sbc #$4b			sbc 	#$4B
.1cf7					_TOKDIOutput:
.1cf7	2c 14 05	bit $0514			bit 	TOKDIFirstChar
.1cfa	10 08		bpl $1d04			bpl 	_TOKDINoSpacing
.1cfc	48		pha				pha
.1cfd	20 99 1d	jsr $1d99			jsr 	TOKDSpacing
.1d00	9c 14 05	stz $0514			stz 	TOKDIFirstChar
.1d03	68		pla				pla
.1d04					_TOKDINoSpacing:
.1d04	20 a8 1c	jsr $1ca8			jsr 	TOKDOutput
.1d07	20 9f 1c	jsr $1c9f			jsr 	TOKDGet 					; get next token
.1d0a	c9 7c		cmp #$7c			cmp 	#$7C
.1d0c	90 d1		bcc $1cdf			bcc 	_TOKDLoop
.1d0e	f0 12		beq $1d22			beq 	_TOKDIExit 					; it's a number, no tail.
.1d10	4a		lsr a				lsr 	a 							; string ?
.1d11	90 07		bcc $1d1a			bcc 	_TOKDICheckArray
.1d13	48		pha				pha
.1d14	a9 24		lda #$24			lda 	#"$"
.1d16	20 a8 1c	jsr $1ca8			jsr 	TOKDOutput
.1d19	68		pla				pla
.1d1a					_TOKDICheckArray:
.1d1a	4a		lsr a				lsr 	a 							; array ?
.1d1b	90 05		bcc $1d22			bcc 	_TOKDIExit
.1d1d	a9 28		lda #$28			lda 	#"("
.1d1f	20 a8 1c	jsr $1ca8			jsr 	TOKDOutput
.1d22					_TOKDIExit:
.1d22	60		rts				rts
.0514					TOKDIFirstChar:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1d23					TOKDInteger:
.1d23	5a		phy				phy 								; save base
.1d24	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1d26	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.1d29					_TOKDILoop:
.1d29	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1d2b	c9 40		cmp #$40			cmp 	#$40
.1d2d	b0 1d		bcs $1d4c			bcs 	_TOKDIHaveInteger
.1d2f	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1d31	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.1d34	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.1d37	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.1d3a	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.1d3d	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.1d40	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.1d43	20 9f 1c	jsr $1c9f			jsr 	TOKDGet 					; OR byte in.
.1d46	05 08		ora $08				ora 	IFR0+IM0
.1d48	85 08		sta $08				sta 	IFR0+IM0
.1d4a	80 dd		bra $1d29			bra 	_TOKDILoop
.1d4c					_TOKDIHaveInteger:
.1d4c	7a		ply				ply 								; restore base
.1d4d	98		tya				tya 								; base in A
.1d4e	20 03 2d	jsr $2d03			jsr 	IFloatIntegerToStringR0
.1d51	86 22		stx $22				stx 	zTemp0
.1d53	84 23		sty $23				sty 	zTemp0+1
.1d55	b2 22		lda ($22)			lda 	(zTemp0)
.1d57	20 99 1d	jsr $1d99			jsr 	TOKDSpacing 				; check spacing okay.
.1d5a	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1d5c					_TOKDOutput:
.1d5c	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d5e	20 a8 1c	jsr $1ca8			jsr 	TOKDOutput
.1d61	c8		iny				iny
.1d62	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d64	d0 f6		bne $1d5c			bne 	_TOKDOutput
.1d66	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1d67					TOKDToken:
.1d67	a2 cd		ldx #$cd			ldx 	#StandardTokens & $FF
.1d69	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1d6b					_TOKDSearch:
.1d6b	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1d6d	84 23		sty $23				sty 	zTemp0+1
.1d6f	aa		tax				tax 								; token ID in X.
.1d70					_TOKDFind:
.1d70	ca		dex				dex 								; reached the start
.1d71	10 0d		bpl $1d80			bpl 	_TOKDFound
.1d73	38		sec				sec 								; go to next entry
.1d74	b2 22		lda ($22)			lda 	(zTemp0)
.1d76	65 22		adc $22				adc 	zTemp0
.1d78	85 22		sta $22				sta 	zTemp0
.1d7a	90 f4		bcc $1d70			bcc 	_TOKDFind
.1d7c	e6 23		inc $23				inc 	zTemp0+1
.1d7e	80 f0		bra $1d70			bra 	_TOKDFind
.1d80					_TOKDFound:
.1d80	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1d82	f0 14		beq $1d98			beq 	_TOKDExit
.1d84	aa		tax				tax
.1d85	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1d87	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1d89	20 99 1d	jsr $1d99			jsr 	TOKDSpacing
.1d8c					_TOKDOutput:
.1d8c	b1 22		lda ($22),y			lda 	(zTemp0),y
.1d8e	20 f3 20	jsr $20f3			jsr 	TOKToLower
.1d91	20 a8 1c	jsr $1ca8			jsr 	TOKDOutput
.1d94	c8		iny				iny
.1d95	ca		dex				dex
.1d96	d0 f4		bne $1d8c			bne 	_TOKDOutput
.1d98					_TOKDExit:
.1d98	60		rts				rts
.1d99					TOKDSpacing:
.1d99	20 0a 21	jsr $210a			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1d9c	90 0d		bcc $1dab			bcc 	_TOKDSExit
.1d9e	ad 13 05	lda $0513			lda 	TOKLastCharacter			; and last character also alphanumeric
.1da1	20 0a 21	jsr $210a			jsr 	TOKIsIdentifierElement
.1da4	90 05		bcc $1dab			bcc 	_TOKDSExit
.1da6	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1da8	20 a8 1c	jsr $1ca8			jsr 	TOKDOutput
.1dab					_TOKDSExit:
.1dab	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1dac					PGMDeleteLine:
.1dac	20 5f 1e	jsr $1e5f			jsr 	PGMEndProgram 				; end of program into zTemp0
.1daf	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1db1	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1db4	85 25		sta $25				sta 	zTemp1+1
.1db6					_PGMDLoop:
.1db6	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1db8	38		sec				sec
.1db9	f0 3a		beq $1df5			beq 	_PGMDExit
.1dbb	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1dbd	b1 24		lda ($24),y			lda 	(zTemp1),y
.1dbf	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1dc2	d0 08		bne $1dcc			bne 	_PGMDNext
.1dc4	c8		iny				iny
.1dc5	b1 24		lda ($24),y			lda 	(zTemp1),y
.1dc7	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1dca	f0 0d		beq $1dd9			beq 	_PGMDDelete
.1dcc					_PGMDNext:
.1dcc	18		clc				clc
.1dcd	b2 24		lda ($24)			lda 	(zTemp1)
.1dcf	65 24		adc $24				adc 	zTemp1
.1dd1	85 24		sta $24				sta 	zTemp1
.1dd3	90 e1		bcc $1db6			bcc 	_PGMDLoop
.1dd5	e6 25		inc $25				inc 	zTemp1+1
.1dd7	80 dd		bra $1db6			bra 	_PGMDLoop
.1dd9					_PGMDDelete:
.1dd9	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1ddb	a8		tay				tay
.1ddc					_PGMDCopy:
.1ddc	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1dde	92 24		sta ($24)			sta 	(zTemp1)
.1de0	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1de2	c5 22		cmp $22				cmp 	zTemp0
.1de4	d0 07		bne $1ded			bne 	_PGMDNext2
.1de6	a5 25		lda $25				lda 	zTemp1+1
.1de8	c5 23		cmp $23				cmp 	zTemp0+1
.1dea	18		clc				clc
.1deb	f0 08		beq $1df5			beq 	_PGMDExit
.1ded					_PGMDNext2:
.1ded	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1def	d0 eb		bne $1ddc			bne 	_PGMDCopy
.1df1	e6 25		inc $25				inc 	zTemp1+1
.1df3	80 e7		bra $1ddc			bra 	_PGMDCopy
.1df5					_PGMDExit:
.1df5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1df6					PGMInsertLine:
.1df6	20 5f 1e	jsr $1e5f			jsr 	PGMEndProgram 				; end of program into zTemp0
.1df9	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1dfb	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1dfe	85 25		sta $25				sta 	zTemp1+1
.1e00					_PGMILoop:
.1e00	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1e02	f0 1c		beq $1e20			beq 	_PGMIInsert
.1e04	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1e06	b1 24		lda ($24),y			lda 	(zTemp1),y
.1e08	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1e0b	c8		iny				iny
.1e0c	b1 24		lda ($24),y			lda 	(zTemp1),y
.1e0e	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1e11	b0 0d		bcs $1e20			bcs 	_PGMIInsert 				; insert here.
.1e13	18		clc				clc
.1e14	b2 24		lda ($24)			lda 	(zTemp1)
.1e16	65 24		adc $24				adc 	zTemp1
.1e18	85 24		sta $24				sta 	zTemp1
.1e1a	90 e4		bcc $1e00			bcc 	_PGMILoop
.1e1c	e6 25		inc $25				inc 	zTemp1+1
.1e1e	80 e0		bra $1e00			bra 	_PGMILoop
.1e20					_PGMIInsert:
.1e20	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1e23					_PGMIInsertLoop:
.1e23	b2 22		lda ($22)			lda 	(zTemp0)
.1e25	91 22		sta ($22),y			sta 	(zTemp0),y
.1e27	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1e29	c5 22		cmp $22				cmp 	zTemp0
.1e2b	d0 06		bne $1e33			bne 	_PGMINext
.1e2d	a5 25		lda $25				lda 	zTemp1+1
.1e2f	c5 23		cmp $23				cmp 	zTemp0+1
.1e31	f0 0a		beq $1e3d			beq 	_PGMIInserted
.1e33					_PGMINext:
.1e33	a5 22		lda $22				lda 	zTemp0
.1e35	d0 02		bne $1e39			bne 	_PGMINoBorrow
.1e37	c6 23		dec $23				dec 	zTemp0+1
.1e39					_PGMINoBorrow:
.1e39	c6 22		dec $22				dec 	zTemp0
.1e3b	80 e6		bra $1e23			bra 	_PGMIInsertLoop
.1e3d					_PGMIInserted:
.1e3d	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1e3f					_PGMICopyLoop:
.1e3f	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1e42	91 24		sta ($24),y			sta 	(zTemp1),y
.1e44	c8		iny				iny
.1e45	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1e48	d0 f5		bne $1e3f			bne 	_PGMICopyLoop
.1e4a	18		clc				clc
.1e4b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1e4c					PGMSetBaseAddress:
.1e4c	8e 15 05	stx $0515			stx 	PGMBaseHigh
.1e4f	8c 16 05	sty $0516			sty 	PGMEndMemoryHigh
.1e52	60		rts				rts
.1e53					PGMNewProgram:
.1e53	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1e55	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1e58	85 23		sta $23				sta 	zTemp0+1
.1e5a	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1e5c	92 22		sta ($22)			sta 	(zTemp0)
.1e5e	60		rts				rts
.1e5f					PGMEndProgram:
.1e5f	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1e61	ad 15 05	lda $0515			lda 	PGMBaseHigh
.1e64	85 23		sta $23				sta 	zTemp0+1
.1e66					_PGMEPLoop:
.1e66	b2 22		lda ($22)			lda 	(zTemp0)
.1e68	f0 0b		beq $1e75			beq 	_PGMEPExit
.1e6a	18		clc				clc
.1e6b	65 22		adc $22				adc 	zTemp0
.1e6d	85 22		sta $22				sta 	zTemp0
.1e6f	90 f5		bcc $1e66			bcc 	_PGMEPLoop
.1e71	e6 23		inc $23				inc 	zTemp0+1
.1e73	80 f1		bra $1e66			bra 	_PGMEPLoop
.1e75					_PGMEPExit:
.1e75	60		rts				rts
.0515					PGMBaseHigh:
>0515							.fill 	1
.0516					PGMEndMemoryHigh:
>0516							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1e76					TOKResetElement:
.1e76	9c 17 05	stz $0517			stz 	TOKElement
.1e79	60		rts				rts
.1e7a					TOKWriteElement:
.1e7a	da		phx				phx
.1e7b	ae 17 05	ldx $0517			ldx 	TOKElement
.1e7e	9d 18 05	sta $0518,x			sta 	TOKElementText,x
.1e81	9e 19 05	stz $0519,x			stz 	TOKElementText+1,x
.1e84	fa		plx				plx
.1e85	ee 17 05	inc $0517			inc 	TOKElement
.1e88	60		rts				rts
.0517					TOKElement:
>0517							.fill 	1
.0518					TOKElementText:
>0518							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1e89					TOKTokeniseConstant:
.1e89	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1e8b	48		pha				pha 								; save on stack
.1e8c	29 c0		and #$c0			and 	#$C0
.1e8e	05 09		ora $09				ora 	IFR0+IM1
.1e90	05 0a		ora $0a				ora 	IFR0+IM2
.1e92	f0 10		beq $1ea4			beq 	_TTCLess
.1e94	da		phx				phx
.1e95	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1e97					_TTCShiftRight:
.1e97	46 0a		lsr $0a				lsr 	IFR0+IM2
.1e99	66 09		ror $09				ror 	IFR0+IM1
.1e9b	66 08		ror $08				ror 	IFR0+IM0
.1e9d	ca		dex				dex
.1e9e	d0 f7		bne $1e97			bne 	_TTCShiftRight
.1ea0	fa		plx				plx
.1ea1	20 89 1e	jsr $1e89			jsr 	TOKTokeniseConstant
.1ea4					_TTCLess:
.1ea4	68		pla				pla
.1ea5	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1ea7	20 46 1f	jsr $1f46			jsr 	TOKWriteA
.1eaa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1eab					TOKTokeniseDecimals:
.1eab	20 56 1f	jsr $1f56			jsr 	TOKGetNext 					; consume the .
.1eae	20 80 20	jsr $2080			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1eb1	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1eb3	20 46 1f	jsr $1f46			jsr 	TOKWriteA
.1eb6	20 bb 1e	jsr $1ebb			jsr 	TOKOutputElementBuffer 		; then the buffer
.1eb9	18		clc				clc
.1eba	60		rts				rts
.1ebb					TOKOutputElementBuffer:
.1ebb	ad 17 05	lda $0517			lda 	TOKElement 					; get count and write that
.1ebe	20 46 1f	jsr $1f46			jsr 	TOKWriteA
.1ec1	a8		tay				tay 								; put in Y
.1ec2	f0 0c		beq $1ed0			beq 	_TOEExit 					; exit if empty which is okay.
.1ec4	a2 01		ldx #$01			ldx 	#1
.1ec6					_TOELoop:
.1ec6	bd 17 05	lda $0517,x			lda 	TOKElement,x
.1ec9	20 46 1f	jsr $1f46			jsr 	TOKWriteA
.1ecc	e8		inx				inx
.1ecd	88		dey				dey
.1ece	d0 f6		bne $1ec6			bne 	_TOELoop
.1ed0					_TOEExit:
.1ed0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1ed1					TOKTokenise:
.1ed1	8c 18 06	sty $0618			sty 	TOKDataSource+1 			; save source routine pointer
.1ed4	8e 17 06	stx $0617			stx 	TOKDataSource
.1ed7	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1ed9	8d 19 06	sta $0619			sta 	TOKIsFirstElement
.1edc	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1ede	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1ee1	9c 01 04	stz $0401			stz 	TOKLineNumber
.1ee4	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1ee7					_TOKMainLoop:
.1ee7	20 52 1f	jsr $1f52			jsr 	TOKGet 						; what follows.
.1eea	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1eec	f0 4f		beq $1f3d			beq 	_TOKExit
.1eee	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1ef0	d0 05		bne $1ef7			bne 	_TOKElement
.1ef2	20 56 1f	jsr $1f56			jsr 	TOKGetNext
.1ef5	80 f0		bra $1ee7			bra 	_TOKMainLoop
.1ef7					_TOKElement:
.1ef7	20 fe 20	jsr $20fe			jsr 	TOKIsDigit 					; is it 0..9
.1efa	90 0a		bcc $1f06			bcc 	_TOKNotDigit
.1efc	20 57 20	jsr $2057			jsr 	TOKTokeniseInteger 			; get integer
.1eff	b0 43		bcs $1f44			bcs 	_TOKFail 					; did it fail ?
.1f01	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.1f04	80 e1		bra $1ee7			bra 	_TOKMainLoop
.1f06					_TOKNotDigit:
.1f06	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.1f09	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1f0b	d0 07		bne $1f14			bne 	_TOKNotHex
.1f0d	20 9f 1f	jsr $1f9f			jsr 	TOKTokeniseHexadecimal
.1f10	b0 32		bcs $1f44			bcs 	_TOKFail
.1f12	80 d3		bra $1ee7			bra 	_TOKMainLoop
.1f14					_TOKNotHex:
.1f14	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1f16	d0 07		bne $1f1f			bne 	_TOKNotDecimal
.1f18	20 ab 1e	jsr $1eab			jsr 	TOKTokeniseDecimals
.1f1b	b0 27		bcs $1f44			bcs 	_TOKFail
.1f1d	80 c8		bra $1ee7			bra 	_TOKMainLoop
.1f1f					_TOKNotDecimal:
.1f1f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1f21	d0 07		bne $1f2a			bne 	_TOKNotString
.1f23	20 c5 20	jsr $20c5			jsr 	TOKTokeniseString
.1f26	b0 1c		bcs $1f44			bcs 	_TOKFail
.1f28	80 bd		bra $1ee7			bra 	_TOKMainLoop
.1f2a					_TOKNotString:
.1f2a	20 1b 21	jsr $211b			jsr 	TOKIsAlpha 					; identifier ?
.1f2d	b0 07		bcs $1f36			bcs 	_TOKIdentifier
.1f2f	20 94 20	jsr $2094			jsr 	TOKTokenisePunctuation 		; punctuation
.1f32	b0 10		bcs $1f44			bcs 	_TOKFail
.1f34	80 b1		bra $1ee7			bra 	_TOKMainLoop
.1f36					_TOKIdentifier:
.1f36	20 d9 1f	jsr $1fd9			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1f39	b0 09		bcs $1f44			bcs 	_TOKFail
.1f3b	80 aa		bra $1ee7			bra 	_TOKMainLoop
.1f3d					_TOKExit:
.1f3d	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1f3f	20 46 1f	jsr $1f46			jsr 	TOKWriteA
.1f42	18		clc				clc									; return with carry set.
.1f43	60		rts				rts
.1f44					_TOKFail:
.1f44	38		sec				sec
.1f45	60		rts				rts
.1f46					TOKWriteA:
.1f46	da		phx				phx
.1f47	ae 00 04	ldx $0400			ldx 	TOKLineSize
.1f4a	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.1f4d	fa		plx				plx
.1f4e	ee 00 04	inc $0400			inc 	TOKLineSize
.1f51	60		rts				rts
.1f52					TOKGet:
.1f52	18		clc				clc
.1f53	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.1f56					TOKGetNext:
.1f56	38		sec				sec
.1f57	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.0617					TOKDataSource:
>0617							.fill 	2
.0619					TOKIsFirstElement:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1f5a					TOKFindToken:
.1f5a	a2 cd		ldx #$cd			ldx 	#StandardTokens & $FF 		; do this table
.1f5c	a0 19		ldy #$19			ldy 	#StandardTokens >> 8
.1f5e	20 69 1f	jsr $1f69			jsr 	TOKFindTokenXY 				; find it, or not
.1f61	90 04		bcc $1f67			bcc 	_TOKFTFail
.1f63	a2 00		ldx #$00			ldx 	#0
.1f65	38		sec				sec
.1f66	60		rts				rts
.1f67					_TOKFTFail
.1f67	18		clc				clc
.1f68	60		rts				rts
.1f69					TOKFindTokenXY:
.1f69	86 22		stx $22				stx 	zTemp0 						; save token table address
.1f6b	84 23		sty $23				sty 	zTemp0+1
.1f6d	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1f6f	8d 1a 06	sta $061a			sta 	TOKCurrent
.1f72					_TOKFindLoop:
.1f72	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.1f74	18		clc				clc 		 						; clear carry in case of fail
.1f75	30 17		bmi $1f8e			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1f77	cd 17 05	cmp $0517			cmp 	TOKElement 					; compare against the element length
.1f7a	d0 13		bne $1f8f			bne 	_TOKNext 					; different, try next.
.1f7c	aa		tax				tax 								; number of chars to compare.
.1f7d	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1f7f					_TOKCompare:
.1f7f	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.1f81	d9 17 05	cmp $0517,y			cmp 	TOKElementText-1,y
.1f84	d0 09		bne $1f8f			bne 	_TOKNext 					; different ? try next
.1f86	c8		iny				iny 								; compare next two
.1f87	ca		dex				dex
.1f88	d0 f5		bne $1f7f			bne 	_TOKCompare 				; until done X characters.
.1f8a	38		sec				sec
.1f8b	ad 1a 06	lda $061a			lda 	TOKCurrent 					; return current ID.
.1f8e					_TOKExit:
.1f8e	60		rts				rts
.1f8f					_TOKNext:
.1f8f	ee 1a 06	inc $061a			inc 	TOKCurrent 					; increment token #
.1f92	38		sec				sec 								; add length+1 to ptr
.1f93	b2 22		lda ($22)			lda 	(zTemp0)
.1f95	65 22		adc $22				adc 	zTemp0
.1f97	85 22		sta $22				sta 	zTemp0
.1f99	90 d7		bcc $1f72			bcc 	_TOKFindLoop
.1f9b	e6 23		inc $23				inc 	zTemp0+1
.1f9d	80 d3		bra $1f72			bra 	_TOKFindLoop
.061a					TOKCurrent:
>061a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1f9f					TOKTokeniseHexadecimal:
.1f9f	20 56 1f	jsr $1f56			jsr 	TOKGetNext 					; consume the $
.1fa2	a2 08		ldx #$08			ldx 	#IFR0
.1fa4	20 62 2f	jsr $2f62			jsr 	IFloatSetZero 				; set R0 = 0
.1fa7					_TTHLoop:
.1fa7	20 52 1f	jsr $1f52			jsr 	TOKGet 						; keep getting and copying while numeric.
.1faa	20 28 21	jsr $2128			jsr 	TOKIsHexadecimal
.1fad	90 20		bcc $1fcf			bcc 	_TTHDone
.1faf	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.1fb1	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.1fb4	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.1fb7	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.1fba	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.1fbd	20 56 1f	jsr $1f56			jsr 	TOKGetNext
.1fc0	38		sec				sec 								; convert to decimal.
.1fc1	e9 30		sbc #$30			sbc 	#48
.1fc3	c9 0a		cmp #$0a			cmp 	#10
.1fc5	90 02		bcc $1fc9			bcc 	_TTHNotAlpha
.1fc7	e9 07		sbc #$07			sbc 	#7
.1fc9					_TTHNotAlpha:
.1fc9	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.1fcb	85 08		sta $08				sta 	IFR0+IM0
.1fcd	80 d8		bra $1fa7			bra 	_TTHLoop
.1fcf					_TTHDone:
.1fcf	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1fd1	20 46 1f	jsr $1f46			jsr 	TOKWriteA
.1fd4	20 89 1e	jsr $1e89			jsr 	TOKTokeniseConstant 		; write integer out.
.1fd7	18		clc				clc
.1fd8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1fd9					TOKTokeniseIdentifier:
.1fd9	20 76 1e	jsr $1e76			jsr 	TOKResetElement 			; extract an identifier
.1fdc					_TOKGetIdentifier:
.1fdc	20 52 1f	jsr $1f52			jsr 	TOKGet
.1fdf	20 e8 20	jsr $20e8			jsr 	TOKToUpper
.1fe2	20 0a 21	jsr $210a			jsr 	TOKIsIdentifierElement
.1fe5	90 08		bcc $1fef			bcc 	_TOKEndIdent
.1fe7	20 7a 1e	jsr $1e7a			jsr		TOKWriteElement
.1fea	20 56 1f	jsr $1f56			jsr 	TOKGetNext
.1fed	80 ed		bra $1fdc			bra 	_TOKGetIdentifier
.1fef					_TOKEndIdent:
.1fef	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1ff1	d0 06		bne $1ff9			bne 	_TOKNotString
.1ff3	20 7a 1e	jsr $1e7a			jsr 	TOKWriteElement 			; add it
.1ff6	20 56 1f	jsr $1f56			jsr 	TOKGetNext 					; consume it
.1ff9					_TOKNotString:
.1ff9	20 52 1f	jsr $1f52			jsr 	TOKGet 						; finally check for (
.1ffc	c9 28		cmp #$28			cmp 	#"("
.1ffe	d0 06		bne $2006			bne 	_TOKNoArray
.2000	20 7a 1e	jsr $1e7a			jsr 	TOKWriteElement 			; add it
.2003	20 56 1f	jsr $1f56			jsr 	TOKGetNext 					; consume it
.2006					_TOKNoArray:
.2006	20 5a 1f	jsr $1f5a			jsr 	TOKFindToken 				; find it
.2009	90 05		bcc $2010			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.200b	20 46 1f	jsr $1f46			jsr 	TOKWriteA
.200e	18		clc				clc
.200f	60		rts				rts
.2010					_TOKIsVariable:
.2010	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2012					_TOKOutputBuffer:
.2012	bd 18 05	lda $0518,x			lda 	TOKElementText,x 			; output it translated.
.2015	20 3e 20	jsr $203e			jsr 	TOKTranslateIdentifier
.2018	20 46 1f	jsr $1f46			jsr 	TOKWriteA
.201b	e8		inx				inx
.201c	bd 18 05	lda $0518,x			lda 	TOKElementText,x
.201f	20 0a 21	jsr $210a			jsr 	TOKIsIdentifierElement
.2022	b0 ee		bcs $2012			bcs 	_TOKOutputBuffer
.2024	a8		tay				tay 								; last char in Y
.2025	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2027	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2029	f0 0e		beq $2039			beq 	_TOKIVExit
.202b	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.202d	d0 04		bne $2033			bne 	_TOKIVCheckArray 			; no, check for (
.202f	1a		inc a				inc 	a 							; token is $7D
.2030	bc 19 05	ldy $0519,x			ldy 	TOKElementText+1,x 			; get next one.
.2033					_TOKIVCheckArray:
.2033	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2035	d0 02		bne $2039			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2037	1a		inc a				inc 	a
.2038	1a		inc a				inc 	a
.2039					_TOKIVExit:
.2039	20 46 1f	jsr $1f46			jsr 	TOKWriteA 					; ending token
.203c	18		clc				clc
.203d	60		rts				rts
.203e					TOKTranslateIdentifier:
.203e	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.2040	f0 0f		beq $2051			beq 	_TTI64
.2042	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.2044	f0 0e		beq $2054			beq 	_TTI65
.2046	38		sec				sec
.2047	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2049	10 03		bpl $204e			bpl 	_TTIExit
.204b	18		clc				clc 								; map 09 onto 26-35
.204c	69 2b		adc #$2b			adc 	#"A"-"0"+26
.204e					_TTIExit:
.204e	09 40		ora #$40			ora 	#$40 						; correct range.
.2050	60		rts				rts
.2051	a9 64		lda #$64	_TTI64:	lda 	#$64
.2053	60		rts				rts
.2054	a9 65		lda #$65	_TTI65:	lda 	#$65
.2056	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2057					TOKTokeniseInteger:
.2057	20 80 20	jsr $2080			jsr 	TOKExtractInteger 			; pull an integer out as text.
.205a	a2 18		ldx #$18			ldx 	#TOKElementText & $FF
.205c	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.205e	ad 17 05	lda $0517			lda		TOKElement
.2061	20 c6 2d	jsr $2dc6			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2064	ad 19 06	lda $0619			lda 	TOKIsFirstElement 			; first element ?
.2067	f0 12		beq $207b			beq 	_TOKNotLineNumber
.2069	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.206b	d0 0c		bne $2079			bne 	_TOKBadLineNumeber
.206d	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.206f	8d 01 04	sta $0401			sta 	TOKLineNumber
.2072	a5 09		lda $09				lda 	IFR0+IM1
.2074	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2077	18		clc				clc
.2078	60		rts				rts
.2079					_TOKBadLineNumeber:
.2079	38		sec				sec
.207a	60		rts				rts
.207b					_TOKNotLineNumber:
.207b	20 89 1e	jsr $1e89			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.207e	18		clc				clc
.207f	60		rts				rts
.2080					TOKExtractInteger:
.2080	20 76 1e	jsr $1e76			jsr 	TOKResetElement 			; restart
.2083					_TTILoop:
.2083	20 52 1f	jsr $1f52			jsr 	TOKGet 						; keep getting and copying while numeric.
.2086	20 fe 20	jsr $20fe			jsr 	TOKIsDigit
.2089	90 08		bcc $2093			bcc 	_TOKEIExit
.208b	20 7a 1e	jsr $1e7a			jsr 	TOKWriteElement
.208e	20 56 1f	jsr $1f56			jsr 	TOKGetNext
.2091	80 f0		bra $2083			bra 	_TTILoop
.2093					_TOKEIExit:
.2093	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2094					TOKTokenisePunctuation:
.2094	20 76 1e	jsr $1e76			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2097	20 56 1f	jsr $1f56			jsr 	TOKGetNext
.209a	20 7a 1e	jsr $1e7a			jsr 	TOKWriteElement
.209d	20 52 1f	jsr $1f52			jsr 	TOKGet 						; what follows ?
.20a0	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.20a2	f0 10		beq $20b4			beq 	_TTPOne
.20a4	20 12 21	jsr $2112			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.20a7	b0 0b		bcs $20b4			bcs 	_TTPOne 					; these speed things up a bit.
.20a9	20 7a 1e	jsr $1e7a			jsr 	TOKWriteElement 			; this is what we will search for.
.20ac	20 5a 1f	jsr $1f5a			jsr 	TOKFindToken
.20af	b0 0a		bcs $20bb			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.20b1	ce 17 05	dec $0517			dec 	TOKElement 					; make it a single character
.20b4					_TTPOne:
.20b4	20 5a 1f	jsr $1f5a			jsr 	TOKFindToken 				; look for one character punctuation
.20b7	b0 07		bcs $20c0			bcs 	_TTPOutputExit 				; we found it
.20b9	38		sec				sec 								; not recognised.
.20ba	60		rts				rts
.20bb					_TTPConsumeExit:
.20bb	48		pha				pha
.20bc	20 56 1f	jsr $1f56			jsr 	TOKGetNext 					; get the 2nd char out.
.20bf	68		pla				pla
.20c0					_TTPOutputExit:
.20c0	20 46 1f	jsr $1f46			jsr  	TOKWriteA 					; write token out
.20c3	18		clc				clc
.20c4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.20c5					TOKTokeniseString:
.20c5	20 56 1f	jsr $1f56			jsr 	TOKGetNext 					; consume the "
.20c8	20 76 1e	jsr $1e76			jsr 	TOKResetElement 			; start getting the string
.20cb					_TOKTSLoop:
.20cb	20 52 1f	jsr $1f52			jsr 	TOKGet 						; check EOL
.20ce	c9 00		cmp #$00			cmp 	#0
.20d0	f0 0c		beq $20de			beq 	_TOKTSExit
.20d2	20 56 1f	jsr $1f56			jsr 	TOKGetNext 					; get and consume
.20d5	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.20d7	f0 05		beq $20de			beq 	_TOKTSExit
.20d9	20 7a 1e	jsr $1e7a			jsr 	TOKWriteElement
.20dc	80 ed		bra $20cb			bra 	_TOKTSLoop
.20de					_TOKTSExit:
.20de	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.20e0	20 46 1f	jsr $1f46			jsr 	TOKWriteA
.20e3	20 bb 1e	jsr $1ebb			jsr 	TOKOutputElementBuffer
.20e6	18		clc				clc
.20e7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.20e8					TOKToUpper:
.20e8	c9 61		cmp #$61			cmp 	#"a"
.20ea	90 06		bcc $20f2			bcc 	_TTUNotLower
.20ec	c9 7b		cmp #$7b			cmp 	#"z"+1
.20ee	b0 02		bcs $20f2			bcs 	_TTUNotLower
.20f0	49 20		eor #$20			eor 	#$20
.20f2					_TTUNotLower:
.20f2	60		rts				rts
.20f3					TOKToLower:
.20f3	c9 41		cmp #$41			cmp 	#"A"
.20f5	90 06		bcc $20fd			bcc 	_TTUNotUpper
.20f7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.20f9	b0 02		bcs $20fd			bcs 	_TTUNotUpper
.20fb	49 20		eor #$20			eor 	#$20
.20fd					_TTUNotUpper:
.20fd	60		rts				rts
.20fe					TOKIsDigit:
.20fe	c9 30		cmp #$30			cmp 	#"0"
.2100	90 06		bcc $2108			bcc 	TOKFail
.2102	c9 3a		cmp #$3a			cmp 	#"9"+1
.2104	b0 02		bcs $2108			bcs 	TOKFail
.2106					TOKSucceed:
.2106	38		sec				sec
.2107	60		rts				rts
.2108					TOKFail:
.2108	18		clc				clc
.2109	60		rts				rts
.210a					TOKIsIdentifierElement:
.210a	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.210c	f0 f8		beq $2106			beq 	TOKSucceed
.210e	c9 5f		cmp #$5f			cmp 	#"_"
.2110	f0 f4		beq $2106			beq 	TOKSucceed 					; else fall through to alphanumeric
.2112					TOKIsAlphaNumeric:
.2112	20 1b 21	jsr $211b			jsr 	TOKIsAlpha
.2115	b0 ef		bcs $2106			bcs 	TOKSucceed
.2117	20 fe 20	jsr $20fe			jsr 	TOKIsDigit
.211a	60		rts				rts
.211b					TOKIsAlpha:
.211b	20 e8 20	jsr $20e8			jsr 	TOKToUpper
.211e	c9 41		cmp #$41			cmp 	#"A"
.2120	90 e6		bcc $2108			bcc 	TOKFail
.2122	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2124	b0 e2		bcs $2108			bcs 	TOKFail
.2126	80 de		bra $2106			bra 	TOKSucceed
.2128					TOKIsHexadecimal:
.2128	20 fe 20	jsr $20fe			jsr		TOKIsDigit
.212b	b0 d9		bcs $2106			bcs 	TOKSucceed
.212d	20 1b 21	jsr $211b			jsr 	TOKIsAlpha
.2130	90 d6		bcc $2108			bcc 	TOKFail
.2132	c9 47		cmp #$47			cmp 	#"F"+1
.2134	b0 d2		bcs $2108			bcs 	TOKFail
.2136	80 ce		bra $2106			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2138					Command_CALL:
.2138	a9 42		lda #$42			lda 	#STK_CALL
.213a	20 d3 25	jsr $25d3			jsr 	StackOpen
.213d	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.213f	29 c0		and #$c0			and 	#$C0
.2141	c9 40		cmp #$40			cmp 	#$40
.2143	d0 29		bne $216e			bne 	_CCSyntax
.2145	20 a3 28	jsr $28a3			jsr 	VARGetInfo 					; get the information
.2148	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 				; check right bracket follows.
.214b	20 55 28	jsr $2855			jsr 	VARFind 					; exists ?
.214e	90 21		bcc $2171			bcc 	_CCUnknown
.2150	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.2152	85 22		sta $22				sta 	zTemp0
.2154	20 07 26	jsr $2607			jsr 	STKSaveCodePosition 		; save return address on stack.
.2157	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2159	b1 22		lda ($22),y			lda 	(zTemp0),y
.215b	c9 ff		cmp #$ff			cmp 	#$FF
.215d	d0 12		bne $2171			bne 	_CCUnknown
.215f	88		dey				dey 								; get Y offset to stack
.2160	b1 22		lda ($22),y			lda 	(zTemp0),y
.2162	48		pha				pha
.2163	88		dey				dey 								; get address
.2164	b1 22		lda ($22),y			lda 	(zTemp0),y
.2166	85 19		sta $19				sta 	codePtr+1
.2168	b2 22		lda ($22)			lda 	(zTemp0)
.216a	85 18		sta $18				sta 	codePtr
.216c	7a		ply				ply 								; restore Y
.216d	60		rts				rts
.216e					_CCSyntax:
.216e	4c 1d 24	jmp $241d		jmp	ErrorV_syntax
.2171					_CCUnknown:
.2171	4c 92 25	jmp $2592		jmp	ErrorV_unknown
.2174					Command_ENDPROC:
.2174	a9 42		lda #$42			lda 	#STK_CALL
.2176	20 ff 25	jsr $25ff			jsr 	StackCheckFrame
.2179	20 19 26	jsr $2619			jsr 	STKLoadCodePosition 		; return
.217c	20 f1 25	jsr $25f1			jsr 	StackClose
.217f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2180					Command_DO:
.2180	a9 22		lda #$22			lda 	#STK_DO
.2182	20 d3 25	jsr $25d3			jsr 	StackOpen
.2185	20 07 26	jsr $2607			jsr 	STKSaveCodePosition 		; save loop position
.2188	60		rts				rts
.2189					Command_EXIT:
.2189	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.218b	20 ff 25	jsr $25ff			jsr 	StackCheckFrame
.218e	20 f1 25	jsr $25f1			jsr 	StackClose 					; close it
.2191	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2193	aa		tax				tax
.2194	20 2d 23	jsr $232d			jsr 	ScanForward
.2197	60		rts				rts
.2198					Command_LOOP:
.2198	a9 22		lda #$22			lda 	#STK_DO
.219a	20 ff 25	jsr $25ff			jsr 	StackCheckFrame
.219d	20 19 26	jsr $2619			jsr 	STKLoadCodePosition 		; loop back
.21a0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.21a1					Command_FOR:
.21a1	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.21a3	20 d3 25	jsr $25d3			jsr 	StackOpen
.21a6	20 88 12	jsr $1288			jsr 	CommandLET 					; do "I = 1" bit
.21a9	5a		phy				phy 								; save variable address to +4,+5
.21aa	a0 04		ldy #$04			ldy 	#4
.21ac	a5 22		lda $22				lda 	zTemp0
.21ae	91 2a		sta ($2a),y			sta 	(basicStack),y
.21b0	c8		iny				iny
.21b1	a5 23		lda $23				lda 	zTemp0+1
.21b3	91 2a		sta ($2a),y			sta 	(basicStack),y
.21b5	7a		ply				ply
.21b6	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.21b8	20 ca 25	jsr $25ca			jsr 	ERRCheckA
.21bb	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.21be	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.21c0	a2 08		ldx #$08			ldx 	#IFR0
.21c2	20 17 22	jsr $2217			jsr 	CFSaveR0X
.21c5	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.21c7	c9 91		cmp #$91			cmp 	#PR_STEP
.21c9	d0 06		bne $21d1			bne 	_CFStep1
.21cb	c8		iny				iny 								; consume step
.21cc	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; evaluate STEP
.21cf	80 24		bra $21f5			bra 	_CFWriteStep
.21d1					_CFStep1:
.21d1	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.21d3	a9 01		lda #$01			lda 	#1
.21d5	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.21d8	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.21d9	a0 04		ldy #$04			ldy 	#4 							; get variable address
.21db	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21dd	85 22		sta $22				sta 	zTemp0
.21df	c8		iny				iny
.21e0	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21e2	85 23		sta $23				sta 	zTemp0+1
.21e4	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.21e6	b1 22		lda ($22),y			lda 	(zTemp0),y
.21e8	d0 0a		bne $21f4			bne 	_CFNotOptimised
.21ea	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.21ec	b1 2a		lda ($2a),y			lda 	(basicStack),y
.21ee	d0 04		bne $21f4			bne 	_CFNotOptimised
.21f0	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.21f2	85 0b		sta $0b				sta 	IFR0+IExp
.21f4					_CFNotOptimised:
.21f4	7a		ply				ply
.21f5					_CFWriteStep:
.21f5	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.21f7	a9 06		lda #$06			lda 	#6
.21f9	20 17 22	jsr $2217			jsr 	CFSaveR0X
.21fc	20 07 26	jsr $2607			jsr 	STKSaveCodePosition 		; save loop position
.21ff	60		rts				rts
.2200					CFLoadR0X:
.2200	5a		phy				phy
.2201	a8		tay				tay
.2202	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2204	95 00		sta $00,x			sta 	IM0,x
.2206	c8		iny				iny
.2207	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2209	95 01		sta $01,x			sta 	IM1,x
.220b	c8		iny				iny
.220c	b1 2a		lda ($2a),y			lda 	(basicStack),y
.220e	95 02		sta $02,x			sta 	IM2,x
.2210	c8		iny				iny
.2211	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2213	95 03		sta $03,x			sta 	IExp,x
.2215	7a		ply				ply
.2216	60		rts				rts
.2217					CFSaveR0X:
.2217	5a		phy				phy
.2218	a8		tay				tay
.2219	b5 00		lda $00,x			lda 	IM0,x
.221b	91 2a		sta ($2a),y			sta 	(basicStack),y
.221d	c8		iny				iny
.221e	b5 01		lda $01,x			lda 	IM1,x
.2220	91 2a		sta ($2a),y			sta 	(basicStack),y
.2222	c8		iny				iny
.2223	b5 02		lda $02,x			lda 	IM2,x
.2225	91 2a		sta ($2a),y			sta 	(basicStack),y
.2227	c8		iny				iny
.2228	b5 03		lda $03,x			lda 	IExp,x
.222a	91 2a		sta ($2a),y			sta 	(basicStack),y
.222c	7a		ply				ply
.222d	60		rts				rts
.222e					Command_NEXT:
.222e	a9 37		lda #$37			lda 	#STK_FOR
.2230	20 ff 25	jsr $25ff			jsr 	StackCheckFrame
.2233	5a		phy				phy 								; check optimised loop
.2234	a0 09		ldy #$09			ldy 	#9
.2236	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2238	7a		ply				ply
.2239	0a		asl a				asl 	a
.223a	b0 35		bcs $2271			bcs 	_CNOptimised
.223c	20 a8 22	jsr $22a8			jsr 	_CNLoadValue 				; load index value to R0.
.223f	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2241	a9 06		lda #$06			lda 	#6
.2243	20 00 22	jsr $2200			jsr 	CFLoadR0X
.2246	20 58 29	jsr $2958			jsr 	IFloatAdd 					; add them together and write back.
.2249	20 cb 22	jsr $22cb			jsr 	_CNSaveValue
.224c	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.224e	a2 0c		ldx #$0c			ldx 	#IFR1
.2250	20 00 22	jsr $2200			jsr 	CFLoadR0X
.2253	20 30 2c	jsr $2c30			jsr 	IFloatCompare 				; compare terminal vs current
.2256	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2258	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero
.225b	f0 10		beq $226d			beq 	_CNLoopBack
.225d	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.225f	5a		phy				phy
.2260	a0 09		ldy #$09			ldy 	#6+IExp
.2262	51 2a		eor ($2a),y			eor 	(basicStack),y
.2264	7a		ply				ply
.2265	29 40		and #$40			and 	#IFSign
.2267	f0 04		beq $226d			beq 	_CNLoopBack
.2269					_CNExitLoop:
.2269	20 f1 25	jsr $25f1			jsr 	StackClose		 			; return
.226c	60		rts				rts
.226d					_CNLoopBack:
.226d	20 19 26	jsr $2619			jsr 	STKLoadCodePosition 		; loop back
.2270	60		rts				rts
.2271					_CNOptimised:
.2271	5a		phy				phy
.2272	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2274	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2276	85 26		sta $26				sta 	zTemp2
.2278	c8		iny				iny
.2279	b1 2a		lda ($2a),y			lda 	(basicStack),y
.227b	85 27		sta $27				sta 	zTemp2+1
.227d	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.227f					_CNIncrement:
.227f	c8		iny				iny
.2280	b1 26		lda ($26),y			lda 	(zTemp2),y
.2282	1a		inc a				inc 	a
.2283	91 26		sta ($26),y			sta 	(zTemp2),y
.2285	f0 f8		beq $227f			beq 	_CNIncrement
.2287	18		clc				clc 								; point zTemp0 to terminal value
.2288	a5 2a		lda $2a				lda 	basicStack
.228a	69 0a		adc #$0a			adc 	#10
.228c	85 22		sta $22				sta 	zTemp0
.228e	a5 2b		lda $2b				lda 	basicStack+1
.2290	69 00		adc #$00			adc 	#0
.2292	85 23		sta $23				sta 	zTemp0+1
.2294	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2296	b2 26		lda ($26)			lda 	(zTemp2)
.2298	d2 22		cmp ($22)			cmp 	(zTemp0)
.229a	b1 26		lda ($26),y			lda 	(zTemp2),y
.229c	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.229e	c8		iny				iny
.229f	b1 26		lda ($26),y			lda 	(zTemp2),y
.22a1	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.22a3	7a		ply				ply
.22a4	b0 c3		bcs $2269			bcs 	_CNExitLoop
.22a6	80 c5		bra $226d			bra 	_CNLoopBack
.22a8					_CNLoadValue:
.22a8	5a		phy				phy
.22a9	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.22ab	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22ad	85 26		sta $26				sta 	zTemp2
.22af	c8		iny				iny
.22b0	b1 2a		lda ($2a),y			lda 	(basicStack),y
.22b2	85 27		sta $27				sta 	zTemp2+1
.22b4	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.22b6	b1 26		lda ($26),y			lda 	(zTemp2),y
.22b8	85 08		sta $08				sta 	IFR0+IM0
.22ba	c8		iny				iny
.22bb	b1 26		lda ($26),y			lda 	(zTemp2),y
.22bd	85 09		sta $09				sta 	IFR0+IM1
.22bf	c8		iny				iny
.22c0	b1 26		lda ($26),y			lda 	(zTemp2),y
.22c2	85 0a		sta $0a				sta 	IFR0+IM2
.22c4	c8		iny				iny
.22c5	b1 26		lda ($26),y			lda 	(zTemp2),y
.22c7	85 0b		sta $0b				sta 	IFR0+IExp
.22c9	7a		ply				ply
.22ca	60		rts				rts
.22cb					_CNSaveValue:
.22cb	5a		phy				phy
.22cc	a0 00		ldy #$00			ldy 	#0
.22ce	a5 08		lda $08				lda 	IFR0+IM0
.22d0	91 26		sta ($26),y			sta 	(zTemp2),y
.22d2	c8		iny				iny
.22d3	a5 09		lda $09				lda 	IFR0+IM1
.22d5	91 26		sta ($26),y			sta 	(zTemp2),y
.22d7	c8		iny				iny
.22d8	a5 0a		lda $0a				lda 	IFR0+IM2
.22da	91 26		sta ($26),y			sta 	(zTemp2),y
.22dc	c8		iny				iny
.22dd	a5 0b		lda $0b				lda 	IFR0+IExp
.22df	91 26		sta ($26),y			sta 	(zTemp2),y
.22e1	7a		ply				ply
.22e2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.22e3					IfCommand:
.22e3	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; Get the if test.
.22e6	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.22e8	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.22ea	d0 0c		bne $22f8			bne 	_IfStructured 				; we still support it.
.22ec	c8		iny				iny 								; consume THEN
.22ed	a2 08		ldx #$08			ldx 	#IFR0
.22ef	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero 			; is it zero
.22f2	f0 01		beq $22f5			beq 	_IfFail 					; if fail, go to next line
.22f4	60		rts				rts 								; if THEN just continue
.22f5					_IfFail:
.22f5	4c f4 13	jmp $13f4			jmp 	RUNEndOfLine
.22f8					_IfStructured:
.22f8	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero 			; is it zero
.22fb	d0 07		bne $2304			bne 	_IfExit 					; if not, then continue normally.
.22fd	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.22ff	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2301	20 2d 23	jsr $232d			jsr 	ScanForward 				; and run from there
.2304					_IfExit:
.2304	60		rts				rts
.2305					ElseCode:
.2305	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2307	aa		tax				tax 								; so just go to the structure exit
.2308	20 2d 23	jsr $232d			jsr 	ScanForward
.230b	60		rts				rts
.230c					EndIf:
.230c	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.230d					Command_REPEAT:
.230d	a9 02		lda #$02			lda 	#STK_REPEAT
.230f	20 d3 25	jsr $25d3			jsr 	StackOpen
.2312	20 07 26	jsr $2607			jsr 	STKSaveCodePosition 		; save loop position
.2315	60		rts				rts
.2316					Command_UNTIL:
.2316	a9 02		lda #$02			lda 	#STK_REPEAT
.2318	20 ff 25	jsr $25ff			jsr 	StackCheckFrame
.231b	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; work out the test
.231e	a2 08		ldx #$08			ldx 	#IFR0
.2320	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero 			; check if zero
.2323	f0 04		beq $2329			beq 	_CULoopBack 				; if so keep looping
.2325	20 f1 25	jsr $25f1			jsr 	StackClose		 			; return
.2328	60		rts				rts
.2329					_CULoopBack:
.2329	20 19 26	jsr $2619			jsr 	STKLoadCodePosition 		; loop back
.232c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.232d					ScanForward:
.232d	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.232f	86 23		stx $23				stx 	zTemp0+1
.2331	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.2333					_ScanForwardLoop:
.2333	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2335	d0 0a		bne $2341			bne 	_ScanNoCheck
.2337	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2339	c5 22		cmp $22				cmp 	zTemp0
.233b	f0 49		beq $2386			beq 	_ScanExit
.233d	c5 23		cmp $23				cmp 	zTemp0+1
.233f	f0 45		beq $2386			beq 	_ScanExit
.2341					_ScanNoCheck:
.2341	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2343	c8		iny				iny
.2344	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2346	f0 37		beq $237f			beq		_ScanDataItem
.2348	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.234a	f0 33		beq $237f			beq 	_ScanDataItem
.234c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.234e	f0 1b		beq $236b			beq 	_ScanNextLine
.2350	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2352	d0 01		bne $2355			bne 	_ScanNoShift
.2354	c8		iny				iny
.2355					_ScanNoShift:
.2355	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2357	b0 da		bcs $2333			bcs 	_ScanForwardLoop
.2359	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.235b	90 d6		bcc $2333			bcc 	_ScanForwardLoop
.235d	aa		tax				tax 								; access the table to get the adjustment.
.235e	18		clc				clc
.235f	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.2361	7d 41 19	adc $1941,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.2364	85 24		sta $24				sta 	zTemp1
.2366	10 cb		bpl $2333			bpl		_ScanForwardLoop 			; error if -ve ?
.2368	4c a9 24	jmp $24a9		jmp	ErrorV_structure
.236b					_ScanNextLine:
.236b	18		clc				clc	 								; forward to next line.
.236c	b2 18		lda ($18)			lda 	(codePtr)
.236e	65 18		adc $18				adc 	codePtr
.2370	85 18		sta $18				sta 	codePtr
.2372	90 02		bcc $2376			bcc 	_ScanNoCarry
.2374	e6 19		inc $19				inc 	codePtr+1
.2376					_ScanNoCarry:
.2376	a0 03		ldy #$03			ldy 	#3
.2378	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.237a	d0 b7		bne $2333			bne 	_ScanForwardLoop
.237c	4c a9 24	jmp $24a9		jmp	ErrorV_structure
.237f					_ScanDataItem:
.237f	98		tya				tya
.2380	38		sec				sec
.2381	71 18		adc ($18),y			adc 	(codePtr),y
.2383	a8		tay				tay
.2384	80 ad		bra $2333			bra 	_ScanForwardLoop
.2386					_ScanExit:
.2386	c8		iny				iny 								; consume final token.
.2387	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2388					ScanProcedures:
.2388	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.238a	48		pha				pha
.238b	a5 19		lda $19				lda 	codePtr+1
.238d	48		pha				pha
.238e	5a		phy				phy
.238f	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.2392	85 19		sta $19				sta 	codePtr+1
.2394	64 18		stz $18				stz 	codePtr
.2396					_SPLoop:
.2396	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2398	f0 18		beq $23b2			beq 	_SPExit
.239a	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.239c	b1 18		lda ($18),y			lda 	(codePtr),y
.239e	c9 88		cmp #$88			cmp 	#PR_PROC
.23a0	d0 03		bne $23a5			bne 	_SPNext
.23a2	20 ba 23	jsr $23ba			jsr 	_SPSetupRecord
.23a5					_SPNext:
.23a5	18		clc				clc 								; forward to next
.23a6	b2 18		lda ($18)			lda 	(codePtr)
.23a8	65 18		adc $18				adc 	codePtr
.23aa	85 18		sta $18				sta 	codePtr
.23ac	90 e8		bcc $2396			bcc 	_SPLoop
.23ae	e6 19		inc $19				inc 	codePtr+1
.23b0	80 e4		bra $2396			bra 	_SPLoop
.23b2					_SPExit:
.23b2	7a		ply				ply
.23b3	68		pla				pla
.23b4	85 19		sta $19				sta 	codePtr+1
.23b6	68		pla				pla
.23b7	85 18		sta $18				sta 	codePtr
.23b9	60		rts				rts
.23ba					_SPSetupRecord:
.23ba	c8		iny				iny 								; check identifier follows
.23bb	b1 18		lda ($18),y			lda 	(codePtr),y
.23bd	29 c0		and #$c0			and 	#$C0
.23bf	c9 40		cmp #$40			cmp 	#$40
.23c1	d0 27		bne $23ea			bne 	_SPSyntax
.23c3	20 a3 28	jsr $28a3			jsr 	VARGetInfo 					; get the information
.23c6	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen 				; check right bracket follows.
.23c9	20 55 28	jsr $2855			jsr 	VARFind 					; already exists ?
.23cc	b0 1f		bcs $23ed			bcs 	_SPUsed 					; error !
.23ce	20 01 28	jsr $2801			jsr 	VARCreate 					; create, XA points to the data.
.23d1	85 22		sta $22				sta 	zTemp0
.23d3	86 23		stx $23				stx 	zTemp0+1
.23d5	5a		phy				phy 								; save Y pos on stack
.23d6	a0 01		ldy #$01			ldy 	#1
.23d8	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.23da	92 22		sta ($22)			sta 	(zTemp0)
.23dc	a5 19		lda $19				lda 	codePtr+1
.23de	91 22		sta ($22),y			sta 	(zTemp0),y
.23e0	c8		iny				iny
.23e1	68		pla				pla
.23e2	91 22		sta ($22),y			sta 	(zTemp0),y
.23e4	c8		iny				iny
.23e5	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.23e7	91 22		sta ($22),y			sta 	(zTemp0),y
.23e9	60		rts				rts
.23ea					_SPSyntax:
.23ea	4c 1d 24	jmp $241d		jmp	ErrorV_syntax
.23ed					_SPUsed:
.23ed	4c 74 25	jmp $2574		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.23f0					Command_WHILE:
.23f0	5a		phy				phy 								; save position of the test
.23f1	20 2e 16	jsr $162e			jsr 	EXPEvalNumber 				; work out the while test.
.23f4	a2 08		ldx #$08			ldx 	#IFR0
.23f6	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero 			; check if zero
.23f9	f0 0e		beq $2409			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.23fb	98		tya				tya 								; position *after* test.
.23fc	7a		ply				ply 								; restore position before test, at WHILE
.23fd	88		dey				dey 								; so we execute the WHILE command again.
.23fe	48		pha				pha 								; push after test on the stack
.23ff	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2401	20 d3 25	jsr $25d3			jsr 	StackOpen
.2404	20 07 26	jsr $2607			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2407	7a		ply				ply 								; restore the position *after* the test
.2408	60		rts				rts
.2409					_WHExitLoop:
.2409	68		pla				pla 								; throw post loop position
.240a	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.240c	aa		tax				tax
.240d	20 2d 23	jsr $232d			jsr 	ScanForward
.2410	60		rts				rts
.2411					Command_WEND:
.2411	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2413	20 ff 25	jsr $25ff			jsr 	StackCheckFrame
.2416	20 19 26	jsr $2619			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2419	20 f1 25	jsr $25f1			jsr 	StackClose		 			; erase the frame
.241c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.241d					ErrorV_syntax:
.241d	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2420	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2428	45 72 72 6f 72 00
.242e					ErrorV_range:
.242e	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2431	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2439	52 61 6e 67 65 00
.243f					ErrorV_value:
.243f	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2442	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>244a	75 65 00
.244d					ErrorV_type:
.244d	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2450	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2458	73 6d 61 74 63 68 00
.245f					ErrorV_unimplemented:
.245f	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2462	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>246a	6c 65 6d 65 6e 74 65 64 00
.2473					ErrorV_assert:
.2473	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2476	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>247e	46 61 69 6c 00
.2483					ErrorV_internal:
.2483	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2486	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>248e	6c 20 45 72 72 6f 72 00
.2496					ErrorV_divzero:
.2496	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2499	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>24a1	42 79 20 5a 65 72 6f 00
.24a9					ErrorV_structure:
.24a9	20 f2 26	jsr $26f2		jsr	ErrorHandler
>24ac	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>24b4	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.24c1					ErrorV_stop:
.24c1	20 f2 26	jsr $26f2		jsr	ErrorHandler
>24c4	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>24cc	20 53 74 6f 70 70 65 64 00
.24d5					ErrorV_data:
.24d5	20 f2 26	jsr $26f2		jsr	ErrorHandler
>24d8	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>24e0	44 61 74 61 00
.24e5					ErrorV_redefine:
.24e5	20 f2 26	jsr $26f2		jsr	ErrorHandler
>24e8	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>24f0	65 64 65 66 69 6e 65 64 00
.24f9					ErrorV_index:
.24f9	20 f2 26	jsr $26f2		jsr	ErrorHandler
>24fc	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2504	61 79 20 49 6e 64 65 78 00
.250d					ErrorV_memory:
.250d	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2510	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2518	4d 65 6d 6f 72 79 00
.251f					ErrorV_uninitialised:
.251f	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2522	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>252a	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.253a					ErrorV_string:
.253a	20 f2 26	jsr $26f2		jsr	ErrorHandler
>253d	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2545	69 6e 67 20 4c 65 6e 67 74 68 00
.2550					ErrorV_variable:
.2550	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2553	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>255b	65 20 4d 69 73 73 69 6e 67 00
.2565					ErrorV_stack:
.2565	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2568	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2570	75 6c 6c 00
.2574					ErrorV_dupproc:
.2574	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2577	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>257f	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>258f	65 64 00
.2592					ErrorV_unknown:
.2592	20 f2 26	jsr $26f2		jsr	ErrorHandler
>2595	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>259d	20 50 72 6f 63 65 64 75 72 65 00
.25a8					ErrorV_break:
.25a8	20 f2 26	jsr $26f2		jsr	ErrorHandler
>25ab	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.25b2					ERRCheckLParen:
.25b2	b1 18		lda ($18),y			lda 	(codePtr),y
.25b4	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.25b6	d0 18		bne $25d0			bne 	ERRSyntaxError
.25b8	c8		iny				iny
.25b9	60		rts				rts
.25ba					ERRCheckRParen:
.25ba	b1 18		lda ($18),y			lda 	(codePtr),y
.25bc	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.25be	d0 10		bne $25d0			bne 	ERRSyntaxError
.25c0	c8		iny				iny
.25c1	60		rts				rts
.25c2					ERRCheckComma:
.25c2	b1 18		lda ($18),y			lda 	(codePtr),y
.25c4	c9 99		cmp #$99			cmp 	#PR_COMMA
.25c6	d0 08		bne $25d0			bne 	ERRSyntaxError
.25c8	c8		iny				iny
.25c9	60		rts				rts
.25ca					ERRCheckA:
.25ca	d1 18		cmp ($18),y			cmp 	(codePtr),y
.25cc	d0 02		bne $25d0			bne 	ERRSyntaxError
.25ce	c8		iny				iny
.25cf	60		rts				rts
.25d0					ERRSyntaxError:
.25d0	4c 1d 24	jmp $241d		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.25d3					StackOpen:
.25d3	48		pha				pha 								; save frame byte
.25d4	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.25d6	0a		asl a				asl 	a 							; claim twice this for storage
.25d7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.25d9	38		sec				sec 								; so basically subtracting from
.25da	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.25dc	85 2a		sta $2a				sta 	basicStack
.25de	b0 0a		bcs $25ea			bcs 	_SONoBorrow
>25e0	db						.byte 	$DB
.25e1	c6 2b		dec $2b				dec 	basicStack+1
.25e3	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.25e5	cd 1b 06	cmp $061b			cmp 	basicStackEnd
.25e8	f0 04		beq $25ee			beq 	_SOMemory
.25ea					_SONoBorrow:
.25ea	68		pla				pla 								; get marker back and write at TOS
.25eb	92 2a		sta ($2a)			sta 	(basicStack)
.25ed	60		rts				rts
.25ee					_SOMemory:
.25ee	4c 65 25	jmp $2565		jmp	ErrorV_stack
.25f1					StackClose:
.25f1	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.25f3	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.25f5	0a		asl a				asl 	a 							; claim twice this.
.25f6	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.25f8	85 2a		sta $2a				sta 	basicStack
.25fa	90 02		bcc $25fe			bcc 	_SCExit
.25fc	e6 2b		inc $2b				inc 	basicStack+1
.25fe					_SCExit:
.25fe	60		rts				rts
.25ff					StackCheckFrame:
.25ff	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.2601	d0 01		bne $2604			bne 	_SCFError 					; different, we have structures mixed up
.2603	60		rts				rts
.2604					_SCFError:
.2604	4c a9 24	jmp $24a9		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2607					STKSaveCodePosition:
.2607	5a		phy				phy
.2608	98		tya				tya 								; save Y at offset 1.
.2609	a0 01		ldy #$01			ldy 	#1
.260b	91 2a		sta ($2a),y			sta 	(basicStack),y
.260d	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.260f	c8		iny				iny
.2610	91 2a		sta ($2a),y			sta 	(basicStack),y
.2612	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2614	c8		iny				iny
.2615	91 2a		sta ($2a),y			sta 	(basicStack),y
.2617	7a		ply				ply
.2618	60		rts				rts
.2619					STKLoadCodePosition:
.2619	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.261b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.261d	85 19		sta $19				sta 	codePtr+1
.261f	88		dey				dey
.2620	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2622	85 18		sta $18				sta 	codePtr
.2624	88		dey				dey
.2625	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.2627	a8		tay				tay
.2628	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2629					StackReset:
.2629	48		pha				pha 								; save top of memory
.262a	3a		dec a				dec 	a  							; end of stack = previous byte
.262b	85 2b		sta $2b				sta 	basicStack+1
.262d	a9 ff		lda #$ff			lda 	#$FF
.262f	85 2a		sta $2a				sta 	basicStack
.2631	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2633	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2635	68		pla				pla 								; allocate pages for stack.
.2636	38		sec				sec
.2637	e9 02		sbc #$02			sbc 	#STACKPAGES
.2639	8d 1b 06	sta $061b			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.263c	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.061b					basicStackEnd:
>061b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.263d					StringConcrete:
.263d	5a		phy				phy 								; save position on stack
.263e	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2640	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2642	b0 41		bcs $2685			bcs 	_SALengthError
.2644	18		clc				clc 								; length of the new string
.2645	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2647	90 02		bcc $264b			bcc 	_SAHaveLength
.2649	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.264b					_SAHaveLength:
.264b	48		pha				pha 								; save length to be allocated for concreting.
.264c	38		sec				sec
.264d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.264f	6d 1d 06	adc $061d			adc 	stringMemory
.2652	8d 1d 06	sta $061d			sta 	stringMemory
.2655	85 26		sta $26				sta 	zTemp2 						; update storage address
.2657	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2659	6d 1e 06	adc $061e			adc 	stringMemory+1
.265c	8d 1e 06	sta $061e			sta 	stringMemory+1
.265f	85 27		sta $27				sta 	zTemp2+1
.2661	68		pla				pla 								; save length allocated in +0
.2662	92 26		sta ($26)			sta 	(zTemp2)
.2664	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2666	a0 01		ldy #$01			ldy 	#1
.2668	91 26		sta ($26),y			sta 	(zTemp2),y
.266a					_SACopyNewString:
.266a	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.266c	a0 02		ldy #$02			ldy 	#2
.266e	91 26		sta ($26),y			sta 	(zTemp2),y
.2670	aa		tax				tax 								; bytes to copy
.2671	f0 0c		beq $267f			beq 	_SACopyExit
.2673	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2675					_SACopyNSLoop:
.2675	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2677	c8		iny				iny 								; write two on in string storage
.2678	c8		iny				iny
.2679	91 26		sta ($26),y			sta 	(zTemp2),y
.267b	88		dey				dey
.267c	ca		dex				dex									; until copied all the string lengths.
.267d	d0 f6		bne $2675			bne 	_SACopyNSLoop
.267f					_SACopyExit:
.267f	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.2681	a5 26		lda $26				lda 	zTemp2
.2683	7a		ply				ply
.2684	60		rts				rts
.2685					_SALengthError:
.2685	4c 3a 25	jmp $253a		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2688					StringSystemInitialise:
.2688	3a		dec a				dec 	a 							; make last byte of previous page.
.2689	8d 1e 06	sta $061e			sta 	stringMemory+1
.268c	85 23		sta $23				sta 	zTemp0+1
.268e	a9 ff		lda #$ff			lda 	#$FF
.2690	8d 1d 06	sta $061d			sta 	stringMemory
.2693	85 22		sta $22				sta 	zTemp0
.2695	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2697	92 22		sta ($22)			sta 	(zTemp0)
.2699	60		rts				rts
.269a					StringSpaceInitialise:
.269a	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.269c	8d 1c 06	sta $061c			sta 	stringInitialised
.269f	ad 1d 06	lda $061d			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.26a2	8d 1f 06	sta $061f			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.26a5	ad 1e 06	lda $061e			lda 	stringMemory+1
.26a8	3a		dec a				dec 	a
.26a9	8d 20 06	sta $0620			sta 	stringTempPointer+1
.26ac	20 7f 10	jsr $107f			jsr 	ClearCheckMemory
.26af	60		rts				rts
.26b0					StringTempAllocate:
.26b0	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.26b2	b0 2e		bcs $26e2			bcs 	_STALength
.26b4	2c 1c 06	bit $061c			bit 	stringInitialised 			; already initialised
.26b7	30 05		bmi $26be			bmi 	_STAAllocate
.26b9	48		pha				pha 								; save value to subtract.
.26ba	20 9a 26	jsr $269a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.26bd	68		pla				pla 								; restore it
.26be					_STAAllocate:
.26be	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.26c0	18		clc				clc  								; deliberate allows one more
.26c1	6d 1f 06	adc $061f			adc 	stringTempPointer 			; subtract from temp pointer
.26c4	8d 1f 06	sta $061f			sta 	stringTempPointer
.26c7	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.26c9	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.26cb	ad 20 06	lda $0620			lda 	stringTempPointer+1
.26ce	69 ff		adc #$ff			adc 	#$FF
.26d0	8d 20 06	sta $0620			sta 	stringTempPointer+1
.26d3	85 2d		sta $2d				sta 	zsTemp+1
.26d5	85 09		sta $09				sta 	IFR0+IM1
.26d7	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.26d9	a9 80		lda #$80			lda 	#$80
.26db	85 0b		sta $0b				sta 	IFR0+IExp
.26dd	a9 00		lda #$00			lda 	#0 							; clear the target string
.26df	92 2c		sta ($2c)			sta 	(zsTemp)
.26e1	60		rts				rts
.26e2					_STALength:
.26e2	4c 3a 25	jmp $253a		jmp	ErrorV_string
.26e5					StringTempWrite:
.26e5	5a		phy				phy
.26e6	48		pha				pha
.26e7	b2 2c		lda ($2c)			lda 	(zsTemp)
.26e9	1a		inc a				inc 	a
.26ea	92 2c		sta ($2c)			sta 	(zsTemp)
.26ec	a8		tay				tay
.26ed	68		pla				pla
.26ee	91 2c		sta ($2c),y			sta 	(zsTemp),y
.26f0	7a		ply				ply
.26f1	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.061c					stringInitialised:
>061c							.fill 	1
.061d					stringMemory:
>061d							.fill 	2
.061f					stringTempPointer:
>061f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.26f2					ErrorHandler:
.26f2	fa		plx				plx 								; get address of msg
.26f3	7a		ply				ply
.26f4	e8		inx				inx 								; bump past RTS
.26f5	d0 01		bne $26f8			bne 	_EHNoInc
.26f7	c8		iny				iny
.26f8					_EHNoInc:
.26f8	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.26fb	ad 21 06	lda $0621			lda 	ERRLine 					; direct command ?
.26fe	0d 22 06	ora $0622			ora 	ERRLine+1
.2701	f0 10		beq $2713			beq 	_EHNoNumber
.2703	a2 16		ldx #$16			ldx 	#_EHAtMsg & $FF
.2705	a0 27		ldy #$27			ldy 	#_EHAtMsg >> 8
.2707	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.270a	ad 21 06	lda $0621			lda 	ERRLine 					; line number -> XA
.270d	ae 22 06	ldx $0622			ldx 	ERRLine+1
.2710	20 1b 27	jsr $271b			jsr 	WriteIntXA
.2713					_EHNoNumber:
.2713	4c 44 27	jmp $2744			jmp 	WarmStartNewLine
.2716					_EHAtMsg:
>2716	20 61 74 20 00					.text 	" at ",0
.271b					WriteIntXA:
.271b	da		phx				phx
.271c	48		pha				pha
.271d	a2 08		ldx #$08			ldx 	#IFR0
.271f	20 b1 2e	jsr $2eb1			jsr 	IFloatPushRx
.2722	68		pla				pla
.2723	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.2726	68		pla				pla
.2727	85 09		sta $09				sta 	IFR0+IM1
.2729	a9 0a		lda #$0a			lda 	#10 						; decimal
.272b	20 03 2d	jsr $2d03			jsr 	IFloatIntegerToStringR0	 	; convert
.272e	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.2731	a2 08		ldx #$08			ldx 	#IFR0
.2733	20 d2 2e	jsr $2ed2			jsr 	IFloatPullRx
.2736	60		rts				rts
.2737					NotImplemented:
.2737	4c 5f 24	jmp $245f		jmp	ErrorV_unimplemented
.0621					ERRLine:
>0621							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.273a					WarmStart:
.273a	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.273c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.273f	a9 6b		lda #$6b			lda 	#"k"
.2741	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2744					WarmStartNewLine:
.2744	a9 0d		lda #$0d			lda 	#13
.2746	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2749					WarmStartNoPrompt:
.2749	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.274b	9a		txs				txs
.274c	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.274f	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.2751	f0 f1		beq $2744			beq 	WarmStartNewLine
.2753	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.2755	d0 f2		bne $2749			bne 	WarmStartNoPrompt
.2757	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.275a	e8		inx				inx 								; skip length byte to make it ASCIIZ
.275b	d0 01		bne $275e			bne 	_WSSkip
.275d	c8		iny				iny
.275e					_WSSkip:
.275e	86 26		stx $26				stx 	zTemp2 						; save address
.2760	84 27		sty $27				sty 	zTemp2+1
.2762	a2 8c		ldx #$8c			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2764	a0 27		ldy #$27			ldy 	#TOKGetCharacter >> 8
.2766	38		sec				sec
.2767	20 d1 1e	jsr $1ed1			jsr 	TOKTokenise
.276a	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.276d	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2770	d0 0b		bne $277d			bne 	_WSLineEdit
.2772	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2774	85 18		sta $18				sta 	codePtr
.2776	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2778	85 19		sta $19				sta 	codePtr+1
.277a	4c ff 13	jmp $13ff			jmp 	RUNNewLine
.277d					_WSLineEdit:
.277d	20 ac 1d	jsr $1dac			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2780	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2783	c9 04		cmp #$04			cmp 	#4
.2785	f0 03		beq $278a			beq 	_WSNoInsert
.2787	20 f6 1d	jsr $1df6			jsr 	PGMInsertLine				; if not, maybe insert
.278a					_WSNoInsert:
.278a	80 bd		bra $2749			bra 	WarmStartNoPrompt
.278c					TOKGetCharacter:
.278c	b2 26		lda ($26)			lda 	(zTemp2)
.278e	90 06		bcc $2796			bcc 	_GSNoIncrement
.2790	e6 26		inc $26				inc 	zTemp2
.2792	d0 02		bne $2796			bne 	_GSNoIncrement
.2794	e6 27		inc $27				inc 	zTemp2+1
.2796					_GSNoIncrement:
.2796	c9 00		cmp #$00			cmp 	#0
.2798	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2799					VARArrayLookup:
.2799	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.279b	86 23		stx $23				stx 	zTemp0+1
.279d	b2 22		lda ($22)			lda 	(zTemp0)
.279f	48		pha				pha
.27a0	5a		phy				phy
.27a1	a0 01		ldy #$01			ldy 	#1
.27a3	b1 22		lda ($22),y			lda 	(zTemp0),y
.27a5	7a		ply				ply
.27a6	48		pha				pha
.27a7	20 40 16	jsr $1640			jsr 	EXPEvalInteger16 			; R0 now contains the index
.27aa	68		pla				pla 								; array address to zTemp0
.27ab	85 23		sta $23				sta 	zTemp0+1
.27ad	68		pla				pla
.27ae	85 22		sta $22				sta 	zTemp0
.27b0	5a		phy				phy 								; save codePtr position.
.27b1	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.27b3	b1 22		lda ($22),y			lda 	(zTemp0),y
.27b5	48		pha				pha 								; save bit 15 on stack.
.27b6	29 7f		and #$7f			and 	#$7F
.27b8	85 24		sta $24				sta 	zTemp1
.27ba	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.27bc	d2 22		cmp ($22)			cmp 	(zTemp0)
.27be	a5 09		lda $09				lda 	IFR0+IM1
.27c0	e5 24		sbc $24				sbc 	zTemp1
.27c2	b0 3a		bcs $27fe			bcs 	_VALIndex
.27c4	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.27c6	c9 40		cmp #$40			cmp 	#$40
.27c8	b0 34		bcs $27fe			bcs 	_VALIndex
.27ca	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.27cc	26 09		rol $09				rol 	IFR0+IM1
.27ce	fa		plx				plx 								; get msb of size -> X
.27cf	30 04		bmi $27d5			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.27d1	06 08		asl $08				asl 	IFR0+IM0
.27d3	26 09		rol $09				rol 	IFR0+IM1
.27d5					_VARNotX4:
.27d5	18		clc				clc 								; add the two for the size bytes
.27d6	a5 08		lda $08				lda 	IFR0+IM0
.27d8	69 02		adc #$02			adc 	#2
.27da	85 08		sta $08				sta 	IFR0+IM0
.27dc	90 02		bcc $27e0			bcc 	_VARNoCarry1
.27de	e6 09		inc $09				inc 	IFR0+IM1
.27e0					_VARNoCarry1:
.27e0	18		clc				clc 								; calculate the element address and push to stack.
.27e1	a5 08		lda $08				lda 	IFR0+IM0
.27e3	65 22		adc $22				adc 	zTemp0
.27e5	48		pha				pha
.27e6	a5 09		lda $09				lda 	IFR0+IM1
.27e8	65 23		adc $23				adc 	zTemp0+1
.27ea	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.27ec	30 04		bmi $27f2			bmi 	_VARHasSubLevel
.27ee	aa		tax				tax 								; address in XA
.27ef	68		pla				pla
.27f0	7a		ply				ply 								; restore Y and exit
.27f1	60		rts				rts
.27f2					_VARHasSubLevel:
.27f2	aa		tax				tax 								; get link address in XA
.27f3	68		pla				pla
.27f4	7a		ply				ply 								; restore code position.
.27f5	48		pha				pha
.27f6	20 c2 25	jsr $25c2			jsr 	ERRCheckComma 				; comma required.
.27f9	68		pla				pla
.27fa	20 99 27	jsr $2799			jsr 	VARArrayLookup 				; call it recursively
.27fd	60		rts				rts
.27fe					_VALIndex:
.27fe	4c f9 24	jmp $24f9		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2801					VARCreate:
.2801	5a		phy				phy
.2802	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2804	a2 00		ldx #$00			ldx 	#0
.2806	20 56 10	jsr $1056			jsr 	AllocateMemory
.2809	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.280b	86 25		stx $25				stx 	zTemp1+1
.280d	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.280f	ad 25 06	lda $0625			lda 	VARHash
.2812	91 24		sta ($24),y			sta 	(zTemp1),y
.2814	c8		iny				iny 								; put address of name into +3,+4
.2815	ad 23 06	lda $0623			lda 	VARNameAddress
.2818	91 24		sta ($24),y			sta 	(zTemp1),y
.281a	c8		iny				iny
.281b	ad 24 06	lda $0624			lda 	VARNameAddress+1
.281e	91 24		sta ($24),y			sta 	(zTemp1),y
.2820	ad 26 06	lda $0626			lda 	VARType
.2823	29 01		and #$01			and 	#1
.2825	f0 06		beq $282d			beq 	_CVNotString
.2827	a0 08		ldy #$08			ldy 	#5+3
.2829	a9 80		lda #$80			lda 	#$80
.282b	91 24		sta ($24),y			sta 	(zTemp1),y
.282d					_CVNotString:
.282d	ad 47 06	lda $0647			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2830	85 22		sta $22				sta 	zTemp0
.2832	ad 48 06	lda $0648			lda 	VARHashEntry+1
.2835	85 23		sta $23				sta 	zTemp0+1
.2837	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2839	b2 22		lda ($22)			lda 	(zTemp0)
.283b	92 24		sta ($24)			sta 	(zTemp1)
.283d	b1 22		lda ($22),y			lda 	(zTemp0),y
.283f	91 24		sta ($24),y			sta 	(zTemp1),y
.2841	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2843	92 22		sta ($22)			sta 	(zTemp0)
.2845	a5 25		lda $25				lda 	zTemp1+1
.2847	91 22		sta ($22),y			sta 	(zTemp0),y
.2849	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.284b	a6 25		ldx $25				ldx 	zTemp1+1
.284d	18		clc				clc 								; add 5 to point to the data.
.284e	69 05		adc #$05			adc 	#5
.2850	90 01		bcc $2853			bcc 	_VCNoCarry
.2852	e8		inx				inx
.2853					_VCNoCarry:
.2853	7a		ply				ply
.2854	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2855					VARFind:
.2855	5a		phy				phy
.2856	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2858	b1 22		lda ($22),y			lda 	(zTemp0),y
.285a	85 25		sta $25				sta 	zTemp1+1
.285c	f0 1c		beq $287a			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.285e	b2 22		lda ($22)			lda 	(zTemp0)
.2860	85 24		sta $24				sta 	zTemp1
.2862					_VFLoop:
.2862	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2864	b1 24		lda ($24),y			lda 	(zTemp1),y
.2866	cd 25 06	cmp $0625			cmp 	VARHash
.2869	f0 12		beq $287d			beq 	_VFHashesMatch 				; if so, check the name.
.286b					_VFNext:
.286b	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.286d	aa		tax				tax
.286e	a0 01		ldy #$01			ldy 	#1
.2870	b1 24		lda ($24),y			lda 	(zTemp1),y
.2872	85 25		sta $25				sta 	zTemp1+1
.2874	86 24		stx $24				stx 	zTemp1
.2876	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2878	d0 e8		bne $2862			bne 	_VFLoop
.287a					_VFExitFail:
.287a	7a		ply				ply
.287b	18		clc				clc
.287c	60		rts				rts
.287d					_VFHashesMatch:
.287d	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.287f	b1 24		lda ($24),y			lda 	(zTemp1),y
.2881	85 26		sta $26				sta 	zTemp2
.2883	c8		iny				iny
.2884	b1 24		lda ($24),y			lda 	(zTemp1),y
.2886	85 27		sta $27				sta 	zTemp2+1
.2888	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.288a					_VFNameCompLoop:
.288a	c8		iny				iny 								; char at a time
.288b	b9 27 06	lda $0627,y			lda 	VARBuffer,y
.288e	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2890	d0 d9		bne $286b			bne 	_VFNext						; next entry if different.
.2892	c9 7c		cmp #$7c			cmp 	#$7C
.2894	90 f4		bcc $288a			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2896	18		clc				clc
.2897	a5 24		lda $24				lda 	zTemp1
.2899	a6 25		ldx $25				ldx 	zTemp1+1
.289b	69 05		adc #$05			adc 	#5
.289d	90 01		bcc $28a0			bcc 	_VFNNoCarry
.289f	e8		inx				inx
.28a0					_VFNNoCarry:
.28a0	7a		ply				ply
.28a1	38		sec				sec
.28a2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.28a3					VARGetInfo:
.28a3	98		tya				tya 								; calculate the address of the identifier start.
.28a4	18		clc				clc
.28a5	65 18		adc $18				adc 	codePtr
.28a7	8d 23 06	sta $0623			sta 	VARNameAddress
.28aa	a5 19		lda $19				lda 	codePtr+1
.28ac	69 00		adc #$00			adc 	#0
.28ae	8d 24 06	sta $0624			sta 	VARNameAddress+1
.28b1	9c 25 06	stz $0625			stz 	VARHash
.28b4	a2 00		ldx #$00			ldx 	#0
.28b6					_VARCopyName:
.28b6	18		clc				clc 								; update the sum hash.
.28b7	ad 25 06	lda $0625			lda 	VARHash
.28ba	71 18		adc ($18),y			adc 	(codePtr),y
.28bc	8d 25 06	sta $0625			sta 	VARHash
.28bf	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.28c1	c8		iny				iny
.28c2	9d 27 06	sta $0627,x			sta 	VARBuffer,x
.28c5	e8		inx				inx
.28c6	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.28c8	90 ec		bcc $28b6			bcc 	_VARCopyName
.28ca	8d 26 06	sta $0626			sta 	VARType 					; save type byte
.28cd	29 03		and #$03			and 	#3 							; type is 0-3
.28cf	0a		asl a				asl 	a
.28d0	0a		asl a				asl 	a
.28d1	85 22		sta $22				sta 	zTemp0
.28d3	ad 25 06	lda $0625			lda 	VARHash 					; force into range of hash entries per type.
.28d6	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.28d8	65 22		adc $22				adc 	zTemp0 						; index of hash table
.28da	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.28db	69 49		adc #$49			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.28dd	85 22		sta $22				sta 	zTemp0
.28df	8d 47 06	sta $0647			sta 	VARHashEntry
.28e2	a9 06		lda #$06			lda 	#VARHashTables >> 8
.28e4	69 00		adc #$00			adc 	#0
.28e6	85 23		sta $23				sta 	zTemp0+1
.28e8	8d 48 06	sta $0648			sta 	VARHashEntry+1
.28eb	60		rts				rts
.28ec					VARClearHashTables:
.28ec	a2 00		ldx #$00			ldx 	#0
.28ee					_VCHRLoop:
.28ee	a9 00		lda #$00			lda 	#0
.28f0	9d 49 06	sta $0649,x			sta 	VARHashTables,x
.28f3	e8		inx				inx
.28f4	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.28f6	d0 f6		bne $28ee			bne 	_VCHRLoop
.28f8	60		rts				rts
.0623					VARNameAddress:
>0623							.fill 	2
.0625					VARHash:
>0625							.fill 	1
.0626					VARType:
>0626							.fill 	1
.0627					VARBuffer:
>0627							.fill 	32
.0647					VARHashEntry:
>0647							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0649					VARHashTables:
>0649							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.28f9					VARCheckSimple:
.28f9	aa		tax				tax 								; save in X
.28fa	b1 18		lda ($18),y			lda 	(codePtr),y
.28fc	c9 7c		cmp #$7c			cmp 	#$7C
.28fe	d0 15		bne $2915			bne 	_VCSComplex
.2900	c8		iny				iny 								; consume the second byte, the type.
.2901	8a		txa				txa  								; character (40-7F) x 4
.2902	0a		asl a				asl 	a
.2903	0a		asl a				asl  	a
.2904	18		clc				clc
.2905	69 69		adc #$69			adc 	#FastVariables & $FF
.2907	85 08		sta $08				sta 	IFR0+IM0
.2909	a9 06		lda #$06			lda 	#FastVariables >> 8
.290b	69 00		adc #$00			adc 	#0
.290d	85 09		sta $09				sta 	IFR0+IM1
.290f	64 0a		stz $0a				stz 	IFR0+IM2
.2911	64 0b		stz $0b				stz 	IFR0+IExp
.2913	38		sec				sec 								; it's a reference
.2914	60		rts				rts
.2915					_VCSComplex:
.2915	88		dey				dey	 								; extract information.
.2916	20 a3 28	jsr $28a3			jsr 	VARGetInfo
.2919	20 55 28	jsr $2855			jsr 	VARFind 					; search for variable
.291c	b0 0a		bcs $2928			bcs 	_VCSHaveVariable
.291e	ad 26 06	lda $0626			lda 	VARType 					; error if arrays, cannot autocreate
.2921	29 02		and #$02			and 	#2
.2923	d0 25		bne $294a			bne 	_VCNoCreate
.2925	20 01 28	jsr $2801			jsr 	VARCreate 					; create variable
.2928					_VCSHaveVariable:
.2928	48		pha				pha 								; save LSB on the stack
.2929	ad 26 06	lda $0626			lda 	VARType 					; get var type, and shift bit 1 into carry
.292c	6a		ror a				ror 	a
.292d	6a		ror a				ror 	a
.292e	68		pla				pla 								; restore LSB
.292f	90 08		bcc $2939			bcc 	_VCSNotArray 				; skip if not an array
.2931	20 99 27	jsr $2799			jsr 	VARArrayLookup 				; look for subscripts.
.2934	48		pha				pha 								; check )
.2935	20 ba 25	jsr $25ba			jsr 	ERRCheckRParen
.2938	68		pla				pla
.2939					_VCSNotArray:
.2939	86 09		stx $09				stx 	IFR0+IM1 					; save address
.293b	85 08		sta $08				sta 	IFR0+IM0
.293d	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.293f	ad 26 06	lda $0626			lda 	VARType 					; number/string bit into carry
.2942	6a		ror a				ror 	a
.2943	a9 00		lda #$00			lda 	#0
.2945	6a		ror a				ror 	a 							; now $00 or $80
.2946	85 0b		sta $0b				sta 	IFR0+IExp
.2948	38		sec				sec 								; it's a reference
.2949	60		rts				rts
.294a					_VCNoCreate:
.294a	4c 1f 25	jmp $251f		jmp	ErrorV_uninitialised
.0669					FastVariables:
>0669							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.294d					IFInitialise:
.294d	9c d9 06	stz $06d9			stz 	IFStackIndex
.2950	60		rts				rts
.2951					IFloatSubtract:
.2951	da		phx				phx
.2952	a2 08		ldx #$08			ldx 	#IFR0
.2954	20 6d 2f	jsr $2f6d			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2957	fa		plx				plx
.2958					IFloatAdd:
.2958	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.295a	05 0b		ora $0b				ora 	IFR0+IExp
.295c	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.295e	d0 4e		bne $29ae			bne 	_IFloatAddDecimals 			; decimal version.
.2960					_IFAddSubMantissa:
.2960	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2962	45 0b		eor $0b				eor 	IFR0+IExp
.2964	29 40		and #$40			and 	#IFSign
.2966	d0 21		bne $2989			bne 	_IFloatSubMantissa
.2968	18		clc				clc 								; do the actual addition
.2969	a5 08		lda $08			lda 	IFR0+IM0
.296b	75 00		adc $00,x		adc 		IM0,x
.296d	85 08		sta $08			sta 	IFR0+IM0
.296f	a5 09		lda $09			lda 	IFR0+IM1
.2971	75 01		adc $01,x		adc 		IM1,x
.2973	85 09		sta $09			sta 	IFR0+IM1
.2975	a5 0a		lda $0a			lda 	IFR0+IM2
.2977	75 02		adc $02,x		adc 		IM2,x
.2979	85 0a		sta $0a			sta 	IFR0+IM2
.297b	10 29		bpl $29a6			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.297d	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.297f	20 91 2f	jsr $2f91			jsr 	IFloatShiftRight
.2982	20 bb 2f	jsr $2fbb			jsr 	IFloatIncExponent
.2985	d0 1f		bne $29a6			bne 	_IFloatAddExit
.2987	38		sec				sec 								; overflowed numerically.
.2988	60		rts				rts
.2989					_IFloatSubMantissa:
.2989	38		sec				sec 								; do the subtraction R0-Rx
.298a	a5 08		lda $08			lda 	IFR0+IM0
.298c	f5 00		sbc $00,x		sbc 		IM0,x
.298e	85 08		sta $08			sta 	IFR0+IM0
.2990	a5 09		lda $09			lda 	IFR0+IM1
.2992	f5 01		sbc $01,x		sbc 		IM1,x
.2994	85 09		sta $09			sta 	IFR0+IM1
.2996	a5 0a		lda $0a			lda 	IFR0+IM2
.2998	f5 02		sbc $02,x		sbc 		IM2,x
.299a	85 0a		sta $0a			sta 	IFR0+IM2
.299c	b0 08		bcs $29a6			bcs 	_IFloatAddExit 				; no borrow so we are done.
.299e	a2 08		ldx #$08			ldx 	#IFR0
.29a0	20 75 2f	jsr $2f75			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.29a3	20 6d 2f	jsr $2f6d			jsr 	IFloatNegate 				; negate
.29a6					_IFloatAddExit:
.29a6	18		clc				clc
.29a7	60		rts				rts
.29a8					_IFloatZeroAdd:
.29a8	fa		plx				plx 								; return this value in R0
.29a9	20 f3 2e	jsr $2ef3			jsr 	IFloatCopyFromRegister
.29ac	18		clc				clc
.29ad	60		rts				rts
.29ae					_IFloatAddDecimals:
.29ae	20 5b 2f	jsr $2f5b			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.29b1	f0 f3		beq $29a6			beq 	_IFloatAddExit
.29b3	20 99 2f	jsr $2f99			jsr 	IFloatNormalise 			; normalise RX
.29b6	da		phx				phx 								; normalise R0
.29b7	a2 08		ldx #$08			ldx 	#IFR0
.29b9	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero
.29bc	f0 ea		beq $29a8			beq 	_IFloatZeroAdd
.29be	20 99 2f	jsr $2f99			jsr 	IFloatNormalise
.29c1	fa		plx				plx
.29c2	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.29c4	29 3f		and #$3f			and 	#IFXMask
.29c6	38		sec				sec
.29c7	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.29c9	85 20		sta $20				sta 	iTemp0
.29cb	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.29cd	29 3f		and #$3f			and 	#IFXMask
.29cf	38		sec				sec
.29d0	e9 20		sbc #$20			sbc 	#$20
.29d2	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.29d4	b0 02		bcs $29d8			bcs 	_IFloatHaveLarger
.29d6	a5 20		lda $20				lda 	iTemp0
.29d8					_IFloatHaveLarger:
.29d8	18		clc				clc 								; get the actual one back.
.29d9	69 20		adc #$20			adc 	#$20 						; shift both to that.
.29db	20 e8 29	jsr $29e8			jsr 	_IFShiftXToA
.29de	da		phx				phx
.29df	a2 08		ldx #$08			ldx 	#IFR0
.29e1	20 e8 29	jsr $29e8			jsr 	_IFShiftXToA
.29e4	fa		plx				plx
.29e5	4c 60 29	jmp $2960			jmp 	_IFAddSubMantissa 			; do the adding bit.
.29e8					_IFShiftXToA:
.29e8	8d d1 06	sta $06d1			sta 	IFTarget
.29eb	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero 			; check adding zero ?
.29ee	f0 11		beq $2a01			beq 	_IFSXExit
.29f0					_IFSXLoop:
.29f0	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.29f2	29 3f		and #$3f			and 	#IFXMask
.29f4	cd d1 06	cmp $06d1			cmp 	IFTarget
.29f7	f0 08		beq $2a01			beq 	_IFSXExit
.29f9	20 91 2f	jsr $2f91			jsr 	IFloatShiftRight
.29fc	20 bb 2f	jsr $2fbb			jsr 	IFloatIncExponent
.29ff	80 ef		bra $29f0			bra 	_IFSXLoop
.2a01					_IFSXExit:
.2a01	60		rts				rts
.06d1					IFTarget:
>06d1							.fill 	1
.2a02					IFloatMultiply:
.2a02	8e d1 06	stx $06d1			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2a05	20 bd 2a	jsr $2abd			jsr 	IFCalculateNewSign
.2a08	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2a0a	05 0b		ora $0b				ora 	IFR0+IExp
.2a0c	29 3f		and #$3f			and 	#IFXMask
.2a0e	15 01		ora $01,x			ora 	IM1,x
.2a10	05 09		ora $09				ora 	IFR0+IM1
.2a12	15 02		ora $02,x			ora 	IM2,x
.2a14	05 0a		ora $0a				ora 	IFR0+IM2
.2a16	d0 0a		bne $2a22			bne 	_IFMStandard
.2a18	20 3e 2f	jsr $2f3e			jsr 	IFloatMultiply8BitRx
.2a1b	ad d3 06	lda $06d3			lda 	IFNewSign
.2a1e	85 0b		sta $0b				sta 	IFR0+IExp
.2a20	18		clc				clc
.2a21	60		rts				rts
.2a22					_IFMStandard:
.2a22	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2a24	20 b4 2a	jsr $2ab4			jsr 	IFMSignExtend
.2a27	8d d2 06	sta $06d2			sta 	IFNewExponent
.2a2a	a5 0b		lda $0b				lda 	IFR0+IExp
.2a2c	20 b4 2a	jsr $2ab4			jsr 	IFMSignExtend
.2a2f	18		clc				clc
.2a30	6d d2 06	adc $06d2			adc 	IFNewExponent
.2a33	8d d2 06	sta $06d2			sta 	IFNewExponent
.2a36	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2a38	20 04 2f	jsr $2f04			jsr 	IFloatCopyToRegister
.2a3b	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2a3d	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.2a40					_IFMLoop:
.2a40	a2 14		ldx #$14			ldx 	#IFRTemp
.2a42	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero
.2a45	f0 3a		beq $2a81			beq 	_IFMExit
.2a47	ae d1 06	ldx $06d1			ldx 	IFTarget 					; look at adder MSB
.2a4a	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2a4c	10 03		bpl $2a51			bpl	 	_IFMTargetOkay
.2a4e	20 a5 2a	jsr $2aa5			jsr 	_IFMShiftAll
.2a51					_IFMTargetOkay:
.2a51	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2a53	29 01		and #$01			and 	#1
.2a55	f0 16		beq $2a6d			beq 	_IFMNoAdd
.2a57	ae d1 06	ldx $06d1			ldx 	IFTarget 					; add adder
.2a5a	18		clc				clc
.2a5b	a5 08		lda $08			lda 	IFR0+IM0
.2a5d	75 00		adc $00,x		adc 		IM0,x
.2a5f	85 08		sta $08			sta 	IFR0+IM0
.2a61	a5 09		lda $09			lda 	IFR0+IM1
.2a63	75 01		adc $01,x		adc 		IM1,x
.2a65	85 09		sta $09			sta 	IFR0+IM1
.2a67	a5 0a		lda $0a			lda 	IFR0+IM2
.2a69	75 02		adc $02,x		adc 		IM2,x
.2a6b	85 0a		sta $0a			sta 	IFR0+IM2
.2a6d					_IFMNoAdd:
.2a6d	a5 0a		lda $0a				lda 	IFR0+IM2
.2a6f	10 03		bpl $2a74			bpl 	_IFMResultOkay
.2a71	20 a5 2a	jsr $2aa5			jsr 	_IFMShiftAll
.2a74					_IFMResultOkay:
.2a74	a2 14		ldx #$14			ldx 	#IFRTemp
.2a76	20 91 2f	jsr $2f91			jsr 	IFloatShiftRight
.2a79	ae d1 06	ldx $06d1			ldx 	IFTarget
.2a7c	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.2a7f	80 bf		bra $2a40			bra 	_IFMLoop
.2a81					_IFMExit:
.2a81	ad d2 06	lda $06d2			lda 	IFNewExponent 				; validate new exponent.
.2a84	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2a86	90 0f		bcc $2a97			bcc 	_IFMOkay
.2a88	c9 e0		cmp #$e0			cmp 	#$E0
.2a8a	b0 0b		bcs $2a97			bcs 	_IFMOkay
.2a8c	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2a8e	f0 13		beq $2aa3			beq 	_IFMError
.2a90	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2a92	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.2a95	18		clc				clc
.2a96	60		rts				rts
.2a97					_IFMOkay:
.2a97	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2a99	0d d3 06	ora $06d3			ora 	IFNewSign
.2a9c	85 0b		sta $0b				sta 	IFR0+IExp
.2a9e	18		clc				clc
.2a9f	60		rts				rts
.2aa0	4c ff ff	jmp $ffff			jmp 	$FFFF
.2aa3					_IFMError:
.2aa3	38		sec				sec
.2aa4	60		rts				rts
.2aa5					_IFMShiftAll:
.2aa5	a2 08		ldx #$08			ldx 	#IFR0
.2aa7	20 91 2f	jsr $2f91			jsr 	IFloatShiftRight
.2aaa	ae d1 06	ldx $06d1			ldx 	IFTarget
.2aad	20 91 2f	jsr $2f91			jsr 	IFloatShiftRight
.2ab0	ee d2 06	inc $06d2			inc 	IFNewExponent
.2ab3	60		rts				rts
.2ab4					IFMSignExtend:
.2ab4	29 3f		and #$3f			and 	#IFXMask
.2ab6	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2ab8	90 02		bcc $2abc			bcc 	_IFMNoSXX
.2aba	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2abc					_IFMNoSXX:
.2abc	60		rts				rts
.2abd					IFCalculateNewSign:
.2abd	b5 03		lda $03,x			lda 	IExp,x
.2abf	45 0b		eor $0b				eor 	IFR0+IExp
.2ac1	29 40		and #$40			and 	#IFSign
.2ac3	8d d3 06	sta $06d3			sta 	IFNewSign
.2ac6	60		rts				rts
.06d2					IFNewExponent:
>06d2							.fill 	1
.06d3					IFNewSign:
>06d3							.fill 	1
.2ac7					IFloatDivideInteger:
.2ac7	20 e0 2a	jsr $2ae0			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2aca	b0 06		bcs $2ad2			bcs 	_IFDIExit
.2acc	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2ace	20 f3 2e	jsr $2ef3			jsr 	IFloatCopyFromRegister
.2ad1	18		clc				clc
.2ad2					_IFDIExit:
.2ad2	60		rts				rts
.2ad3					IFloatModulusInteger:
.2ad3	20 e0 2a	jsr $2ae0			jsr 	IFloatDivideIntegerCommon
.2ad6	b0 07		bcs $2adf			bcs 	_IFMIExit
.2ad8	ae d1 06	ldx $06d1			ldx 	IFTarget
.2adb	20 f3 2e	jsr $2ef3			jsr 	IFloatCopyFromRegister
.2ade	18		clc				clc
.2adf					_IFMIExit:
.2adf	60		rts				rts
.2ae0					IFloatDivideIntegerCommon:
.2ae0	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.2ae3	20 bd 2a	jsr $2abd			jsr 	IFCalculateNewSign 			; calculate sign of result
.2ae6	20 0e 2b	jsr $2b0e			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2ae9	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2aeb	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero
.2aee	f0 1c		beq $2b0c			beq 	_IFDIDivZero
.2af0	ae d1 06	ldx $06d1			ldx 	IFTarget 					; zero Rx (S1)
.2af3	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.2af6	5a		phy				phy
.2af7	a0 18		ldy #$18			ldy 	#24
.2af9					_IFDILoop:
.2af9	20 1f 2b	jsr $2b1f			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2afc	20 2b 2b	jsr $2b2b			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2aff	88		dey				dey
.2b00	d0 f7		bne $2af9			bne 	_IFDILoop 					; do it 24 times
.2b02	7a		ply				ply
.2b03	ad d3 06	lda $06d3			lda 	IFNewSign 					; set sign of result.
.2b06	29 40		and #$40			and 	#IFSign
.2b08	85 17		sta $17				sta 	IFRTemp+IExp
.2b0a	18		clc				clc 								; is okay.
.2b0b	60		rts				rts
.2b0c					_IFDIDivZero:
.2b0c	38		sec				sec
.2b0d	60		rts				rts
.2b0e					IFDCopyRXToRTemp:
.2b0e	b5 00		lda $00,x			lda 	IM0,x
.2b10	85 14		sta $14				sta 	IFRTemp+IM0
.2b12	b5 01		lda $01,x			lda 	IM1,x
.2b14	85 15		sta $15				sta 	IFRTemp+IM1
.2b16	b5 02		lda $02,x			lda 	IM2,x
.2b18	85 16		sta $16				sta 	IFRTemp+IM2
.2b1a	b5 03		lda $03,x			lda 	IExp,x
.2b1c	85 17		sta $17				sta 	IFRTemp+IExp
.2b1e	60		rts				rts
.2b1f					IFDShiftSTempS1Left:
.2b1f	a2 14		ldx #$14			ldx 	#IFRTemp
.2b21	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft
.2b24	ae d1 06	ldx $06d1			ldx 	IFTarget
.2b27	20 8a 2f	jsr $2f8a			jsr 	IFloatRotateLeft
.2b2a	60		rts				rts
.2b2b					IFDTrySubtract:
.2b2b	ae d1 06	ldx $06d1			ldx 	IFTarget 					; s1 = Rx
.2b2e	38		sec				sec 								; subtract, saving the results on the stack.
.2b2f	b5 00		lda $00,x			lda 	IM0,x
.2b31	e5 08		sbc $08				sbc 	IFR0+IM0
.2b33	48		pha				pha
.2b34	b5 01		lda $01,x			lda 	IM1,x
.2b36	e5 09		sbc $09				sbc 	IFR0+IM1
.2b38	48		pha				pha
.2b39	b5 02		lda $02,x			lda 	IM2,x
.2b3b	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2b3d	b0 03		bcs $2b42			bcs 	_IFDCanSubtract
.2b3f	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2b40	68		pla				pla
.2b41	60		rts				rts
.2b42					_IFDCanSubtract:
.2b42	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2b44	68		pla				pla
.2b45	95 01		sta $01,x			sta 	IM1,x
.2b47	68		pla				pla
.2b48	95 00		sta $00,x			sta 	IM0,x
.2b4a	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2b4c	d0 06		bne $2b54			bne 	_IFDCSExit
.2b4e	e6 15		inc $15				inc 	IFRTemp+IM1
.2b50	d0 02		bne $2b54			bne 	_IFDCSExit
.2b52	e6 16		inc $16				inc 	IFRTemp+IM2
.2b54					_IFDCSExit:
.2b54	60		rts				rts
.2b55					IFloatBitwiseAnd:
.2b55	5a		phy				phy
.2b56	20 9a 2b	jsr $2b9a			jsr 	IFPreProcessBitwise 		; set up everything.
.2b59	d0 0f		bne $2b6a			bne 	_IFBAExit
.2b5b					_IFBALoop:
.2b5b	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2b5e	35 00		and $00,x			and 	IM0,x
.2b60	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2b63	e8		inx				inx
.2b64	c8		iny				iny
.2b65	c0 03		cpy #$03			cpy 	#3
.2b67	d0 f2		bne $2b5b			bne 	_IFBALoop
.2b69	18		clc				clc
.2b6a					_IFBAExit:
.2b6a	7a		ply				ply
.2b6b	60		rts				rts
.2b6c					IFloatBitwiseOr:
.2b6c	5a		phy				phy
.2b6d	20 9a 2b	jsr $2b9a			jsr 	IFPreProcessBitwise 		; set up everything.
.2b70	d0 0f		bne $2b81			bne 	_IFBAExit
.2b72					_IFBALoop:
.2b72	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2b75	15 00		ora $00,x			ora 	IM0,x
.2b77	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2b7a	e8		inx				inx
.2b7b	c8		iny				iny
.2b7c	c0 03		cpy #$03			cpy 	#3
.2b7e	d0 f2		bne $2b72			bne 	_IFBALoop
.2b80	18		clc				clc
.2b81					_IFBAExit:
.2b81	7a		ply				ply
.2b82	60		rts				rts
.2b83					IFloatBitwiseXor:
.2b83	5a		phy				phy
.2b84	20 9a 2b	jsr $2b9a			jsr 	IFPreProcessBitwise 		; set up everything.
.2b87	d0 0f		bne $2b98			bne 	_IFBAExit
.2b89					_IFBALoop:
.2b89	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2b8c	55 00		eor $00,x			eor 	IM0,x
.2b8e	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2b91	e8		inx				inx
.2b92	c8		iny				iny
.2b93	c0 03		cpy #$03			cpy 	#3
.2b95	d0 f2		bne $2b89			bne 	_IFBALoop
.2b97	18		clc				clc
.2b98					_IFBAExit:
.2b98	7a		ply				ply
.2b99	60		rts				rts
.2b9a					IFPreProcessBitwise:
.2b9a	a0 00		ldy #$00			ldy 	#0 							; set index.
.2b9c	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2b9e	15 03		ora $03,x			ora 	IExp,x
.2ba0	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2ba2	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2ba4	38		sec				sec 								; carry set just in cases.
.2ba5	60		rts				rts
.2ba6					IFloatAbsoluteR0:
.2ba6	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2ba8	29 bf		and #$bf			and 	#IFSign ^ 255
.2baa	85 0b		sta $0b				sta 	IFR0+IExp
.2bac	18		clc				clc
.2bad	60		rts				rts
.2bae					IFloatSquareRootR0:
.2bae	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2bb0	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero
.2bb3	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2bb5	29 40		and #$40			and 	#IFSign
.2bb7	d0 2f		bne $2be8			bne 	_IFSRFail
.2bb9	20 99 2f	jsr $2f99			jsr 	IFloatNormalise 			; it will work better !
.2bbc	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2bbe	20 04 2f	jsr $2f04			jsr 	IFloatCopyToRegister
.2bc1	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2bc3	20 b4 2a	jsr $2ab4			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2bc6	18		clc				clc
.2bc7	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2bc9	85 0b		sta $0b				sta 	IFR0+IExp
.2bcb	4a		lsr a				lsr 	a 							; which we can halve.
.2bcc	38		sec				sec 								; convert back
.2bcd	e9 17		sbc #$17			sbc 	#23
.2bcf	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2bd1	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2bd3	20 ea 2b	jsr $2bea			jsr 	_IFSRNewton
.2bd6	20 ea 2b	jsr $2bea			jsr 	_IFSRNewton
.2bd9	20 ea 2b	jsr $2bea			jsr 	_IFSRNewton
.2bdc	20 ea 2b	jsr $2bea			jsr 	_IFSRNewton
.2bdf	18		clc				clc
.2be0	60		rts				rts
.2be1					_IFSRZero:
.2be1	a2 08		ldx #$08			ldx 	#IFR0
.2be3	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.2be6	18		clc				clc
.2be7	60		rts				rts
.2be8					_IFSRFail:
.2be8	38		sec				sec
.2be9	60		rts				rts
.2bea					_IFSRNewton:
.2bea	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2bec	20 b1 2e	jsr $2eb1			jsr 	IFloatPushRx
.2bef	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2bf1	20 b1 2e	jsr $2eb1			jsr 	IFloatPushRx
.2bf4	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2bf6	20 85 2c	jsr $2c85			jsr 	IFloatDivideFloat
.2bf9	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2bfb	20 d2 2e	jsr $2ed2			jsr 	IFloatPullRx
.2bfe	20 58 29	jsr $2958			jsr 	IFloatAdd 					; now guess + original/guess
.2c01	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2c03	20 91 2f	jsr $2f91			jsr 	IFloatShiftRight
.2c06	a2 0c		ldx #$0c			ldx 	#IFR1
.2c08	20 d2 2e	jsr $2ed2			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2c0b	60		rts				rts
.2c0c					IFloatFractionalR0:
.2c0c	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2c0e	29 3f		and #$3f			and 	#IFXMask
.2c10	f0 17		beq $2c29			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2c12	20 a6 2b	jsr $2ba6			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2c15	a2 08		ldx #$08			ldx 	#IFR0
.2c17	20 99 2f	jsr $2f99			jsr 	IFloatNormalise 			; normalise R0
.2c1a	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2c1c	20 04 2f	jsr $2f04			jsr 	IFloatCopyToRegister
.2c1f	20 62 2c	jsr $2c62			jsr 	IFloatIntegerR0 			; take integer part of R0
.2c22	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2c24	20 51 29	jsr $2951			jsr 	IFloatSubtract
.2c27	80 05		bra $2c2e			bra 	_FIPExit
.2c29					_FIPZero:
.2c29	a2 08		ldx #$08			ldx 	#IFR0
.2c2b	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.2c2e					_FIPExit:
.2c2e	18		clc				clc
.2c2f	60		rts				rts
.2c30					IFloatCompare:
.2c30	20 51 29	jsr $2951			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2c33	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2c35	05 0b		ora $0b				ora 	IFR0+IExp
.2c37	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2c39	29 3f		and #$3f			and 	#IFXMask
.2c3b	d0 19		bne $2c56			bne 	_IFCNonInteger
.2c3d	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero 			; check if zero
.2c40	f0 0f		beq $2c51			beq 	_IFCZero
.2c42					_IFCReturnSign:
.2c42	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2c44	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2c46	48		pha				pha
.2c47	a9 01		lda #$01			lda 	#1
.2c49	20 64 2f	jsr $2f64			jsr 	IFloatSetByte 				; return to +1
.2c4c	68		pla				pla 								; sign bit back
.2c4d	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2c4f	18		clc				clc
.2c50	60		rts				rts
.2c51					_IFCZero:
.2c51	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.2c54	18		clc				clc
.2c55	60		rts				rts
.2c56					_IFCNonInteger:
.2c56	a5 08		lda $08				lda 	IFR0+IM0
.2c58	29 00		and #$00			and		#$00
.2c5a	05 09		ora $09				ora 	IFR0+IM1
.2c5c	05 0a		ora $0a				ora 	IFR0+IM2
.2c5e	f0 f1		beq $2c51			beq 	_IFCZero 					; near enough !
.2c60	80 e0		bra $2c42			bra 	_IFCReturnSign 				; return the sign of the difference.
.2c62					IFloatIntegerR0:
.2c62	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2c64	29 3f		and #$3f			and 	#IFXMask
.2c66	f0 1b		beq $2c83			beq 	_FIPExit 					; if so do nothing
.2c68	a2 08		ldx #$08			ldx 	#IFR0
.2c6a	20 99 2f	jsr $2f99			jsr 	IFloatNormalise 			; normalise
.2c6d	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero 			; is it zero ?
.2c70	f0 0e		beq $2c80			beq 	_FIPZero 					; if so return zero.
.2c72					_FIPShift:
.2c72	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2c74	29 20		and #$20			and 	#$20 						; still -ve
.2c76	f0 0b		beq $2c83			beq 	_FIPExit
.2c78	20 91 2f	jsr $2f91			jsr 	IFloatShiftRight 			; shift mantissa right
.2c7b	20 bb 2f	jsr $2fbb			jsr 	IFloatIncExponent 			; bump exponent
.2c7e	80 f2		bra $2c72			bra 	_FIPShift
.2c80					_FIPZero:
.2c80	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.2c83					_FIPExit:
.2c83	18		clc				clc
.2c84	60		rts				rts
.2c85					IFloatDivideFloat:
.2c85	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.2c88	20 bd 2a	jsr $2abd			jsr 	IFCalculateNewSign 			; calculate sign of result
.2c8b	20 99 2f	jsr $2f99			jsr 	IFloatNormalise 			; normalise RX
.2c8e	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2c90	20 99 2f	jsr $2f99			jsr 	IFloatNormalise
.2c93	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero
.2c96	f0 56		beq $2cee			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2c98	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2c9a	20 b4 2a	jsr $2ab4			jsr 	IFMSignExtend
.2c9d	8d d2 06	sta $06d2			sta 	IFNewExponent
.2ca0	ae d1 06	ldx $06d1			ldx 	IFTarget 					; calculate s1.exponent
.2ca3	b5 03		lda $03,x			lda 	IExp,x
.2ca5	20 b4 2a	jsr $2ab4			jsr 	IFMSignExtend
.2ca8	38		sec				sec
.2ca9	ed d2 06	sbc $06d2			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2cac	38		sec				sec
.2cad	e9 17		sbc #$17			sbc 	#23
.2caf	8d d2 06	sta $06d2			sta 	IFNewExponent
.2cb2	20 f0 2c	jsr $2cf0			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2cb5	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2cb7	10 08		bpl $2cc1			bpl 	_IFDFNoShiftResult
.2cb9	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2cbb	20 91 2f	jsr $2f91			jsr 	IFloatShiftRight
.2cbe	ee d2 06	inc $06d2			inc 	IFNewExponent
.2cc1					_IFDFNoShiftResult:
.2cc1	ad d2 06	lda $06d2			lda 	IFNewExponent 				; underflow/overflow check.
.2cc4	30 06		bmi $2ccc			bmi 	_IFDFCheckUnderflow
.2cc6	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2cc8	b0 24		bcs $2cee			bcs 	_IFDFDivZero
.2cca	80 11		bra $2cdd			bra		_IFDFExit
.2ccc					_IFDFCheckUnderflow:
.2ccc	ad d2 06	lda $06d2			lda 	IFNewExponent 				; shift into a legal exponent.
.2ccf	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2cd1	b0 0a		bcs $2cdd			bcs 	_IFDFExit
.2cd3	ee d2 06	inc $06d2			inc 	IFNewExponent
.2cd6	a2 14		ldx #$14			ldx 	#IFRTemp
.2cd8	20 91 2f	jsr $2f91			jsr 	IFloatShiftRight
.2cdb	80 ef		bra $2ccc			bra 	_IFDFCheckUnderflow
.2cdd					_IFDFExit:
.2cdd	ad d2 06	lda $06d2			lda 	IFNewExponent 				; combine exponent and sign.
.2ce0	29 3f		and #$3f			and 	#IFXMask
.2ce2	0d d3 06	ora $06d3			ora 	IFNewSign
.2ce5	85 17		sta $17				sta 	IFRTemp+IExp
.2ce7	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2ce9	20 f3 2e	jsr $2ef3			jsr 	IFloatCopyFromRegister
.2cec	18		clc				clc
.2ced	60		rts				rts
.2cee					_IFDFDivZero:
.2cee	38		sec				sec
.2cef	60		rts				rts
.2cf0					IFloatDivideSupport:
.2cf0	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2cf2	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.2cf5	5a		phy				phy 								; main division loop x 23
.2cf6	a0 17		ldy #$17			ldy 	#23
.2cf8					_IFDSLoop:
.2cf8	20 2b 2b	jsr $2b2b			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2cfb	20 1f 2b	jsr $2b1f			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2cfe	88		dey				dey
.2cff	d0 f7		bne $2cf8			bne 	_IFDSLoop 					; do it 24 times
.2d01	7a		ply				ply
.2d02	60		rts				rts
.2d03					IFloatIntegerToStringR0:
.2d03	8d d4 06	sta $06d4			sta 	IFBase 						; save base to use.
.2d06	20 e3 2f	jsr $2fe3			jsr 	IFloatBufferReset			; empty buffer
.2d09	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer
.2d0b	29 3f		and #$3f			and 	#IFXMask
.2d0d	d0 1e		bne $2d2d			bne 	_IFIFail
.2d0f	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2d11	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero
.2d14	f0 0e		beq $2d24			beq 	_IFINotNegative
.2d16	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2d18	29 40		and #$40			and 	#IFSign
.2d1a	f0 08		beq $2d24			beq 	_IFINotNegative
.2d1c	a9 2d		lda #$2d			lda 	#"-"						; output -
.2d1e	20 f2 2f	jsr $2ff2			jsr 	IFloatBufferWrite
.2d21	20 6d 2f	jsr $2f6d			jsr 	IFloatNegate 				; tidy up !
.2d24					_IFINotNegative:
.2d24	20 2f 2d	jsr $2d2f			jsr 	_IFIRecursiveConvert 		; start converting
.2d27	20 ea 2f	jsr $2fea			jsr 	IFloatGetBufferAddress
.2d2a	18		clc				clc
.2d2b	80 01		bra $2d2e			bra 	_IFIExit
.2d2d					_IFIFail:
.2d2d	38		sec				sec
.2d2e					_IFIExit:
.2d2e	60		rts				rts
.2d2f					_IFIRecursiveConvert:
.2d2f	a2 0c		ldx #$0c			ldx 	#IFR1
.2d31	20 04 2f	jsr $2f04			jsr 	IFloatCopyToRegister 		; R0->R1
.2d34	a2 08		ldx #$08			ldx 	#IFR0
.2d36	ad d4 06	lda $06d4			lda 	IFBase 						; Base -> R0
.2d39	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.2d3c	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2d3e	20 c7 2a	jsr $2ac7			jsr 	IFloatDivideInteger
.2d41	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2d43	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero
.2d46	f0 09		beq $2d51			beq 	_IFIOutDigit
.2d48	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder
.2d4a	48		pha				pha
.2d4b	20 2f 2d	jsr $2d2f			jsr 	_IFIRecursiveConvert 		; convert the divider
.2d4e	68		pla				pla
.2d4f	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2d51					_IFIOutDigit:
.2d51	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2d53	c9 0a		cmp #$0a			cmp	 	#10
.2d55	90 02		bcc $2d59			bcc 	_IFINotHex
.2d57	69 06		adc #$06			adc 	#6
.2d59					_IFINotHex:
.2d59	69 30		adc #$30			adc 	#48
.2d5b	20 f2 2f	jsr $2ff2			jsr 	IFloatBufferWrite
.2d5e	60		rts				rts
.06d4					IFBase:
>06d4							.fill 	1
.2d5f					IFloatFloatToStringR0:
.2d5f	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2d61	20 b1 2e	jsr $2eb1			jsr 	IFloatPushRx
.2d64	20 04 2f	jsr $2f04			jsr 	IFloatCopyToRegister
.2d67	20 62 2c	jsr $2c62			jsr 	IFloatIntegerR0				; make R0 integer
.2d6a	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2d6c	20 03 2d	jsr $2d03			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2d6f	9c d5 06	stz $06d5			stz 	IFloatDecimalCount 			; zero the decimal count.
.2d72	a5 13		lda $13				lda 	IFR2+IExp 					; is integer.
.2d74	29 3f		and #$3f			and 	#IFXMask
.2d76	f0 44		beq $2dbc			beq 	_IFFSExit
.2d78					_IFloatFracLoop:
.2d78	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2d7a	20 f3 2e	jsr $2ef3			jsr 	IFloatCopyFromRegister
.2d7d	20 0c 2c	jsr $2c0c			jsr 	IFloatFractionalR0
.2d80	20 99 2f	jsr $2f99			jsr 	IFloatNormalise
.2d83	a2 10		ldx #$10			ldx 	#IFR2
.2d85	20 04 2f	jsr $2f04			jsr 	IFloatCopyToRegister 		; copy to R2
.2d88	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2d8a	a9 0a		lda #$0a			lda 	#10
.2d8c	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.2d8f	a2 10		ldx #$10			ldx 	#IFR2						; R0,R2 = R2 * 10
.2d91	20 02 2a	jsr $2a02			jsr 	IFloatMultiply
.2d94	a2 10		ldx #$10			ldx 	#IFR2
.2d96	20 04 2f	jsr $2f04			jsr 	IFloatCopyToRegister
.2d99	20 62 2c	jsr $2c62			jsr 	IFloatIntegerR0 			; get integer part of R0
.2d9c	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2d9f	c9 03		cmp #$03			cmp 	#3
.2da1	f0 16		beq $2db9			beq 	_IFFSExitStripZero
.2da3	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; written the DP yet ?
.2da6	d0 05		bne $2dad			bne 	_IFloatNotFirst
.2da8	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2daa	20 f2 2f	jsr $2ff2			jsr 	IFloatBufferWrite
.2dad					_IFloatNotFirst:
.2dad	ee d5 06	inc $06d5			inc 	IFloatDecimalCount
.2db0	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2db2	09 30		ora #$30			ora 	#"0"						; ASCII
.2db4	20 f2 2f	jsr $2ff2			jsr 	IFloatBufferWrite 			; write to the buffer.
.2db7	80 bf		bra $2d78			bra 	_IFloatFracLoop
.2db9					_IFFSExitStripZero:
.2db9	20 01 30	jsr $3001			jsr 	IFloatStripTrailingZeros
.2dbc					_IFFSExit:
.2dbc	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2dbe	20 d2 2e	jsr $2ed2			jsr 	IFloatPullRx
.2dc1	20 ea 2f	jsr $2fea			jsr 	IFloatGetBufferAddress
.2dc4	18		clc				clc
.2dc5	60		rts				rts
.06d5					IFloatDecimalCount:
>06d5							.fill 	1
.2dc6					IFloatStringToFloatR0:
.2dc6	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.2dc9	86 20		stx $20				stx 	iTemp0
.2dcb	84 21		sty $21				sty 	iTemp0+1
.2dcd	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2dcf	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.2dd2	9c d7 06	stz $06d7			stz 	IFSignFlag 					; clear the sign flag
.2dd5	20 62 2e	jsr $2e62			jsr 	IFSTFGetNext 				; get first
.2dd8	f0 1b		beq $2df5			beq 	_IFSTFFail 					; no character
.2dda	90 10		bcc $2dec			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2ddc	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2dde	d0 15		bne $2df5			bne 	_IFSTFFail
.2de0	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2de2	8d d7 06	sta $06d7			sta 	IFSignFlag
.2de5					_IFSTFLoop:
.2de5	20 62 2e	jsr $2e62			jsr 	IFSTFGetNext 				; get next
.2de8	b0 0b		bcs $2df5			bcs 	_IFSTFFail 					; bad character.
.2dea	f0 11		beq $2dfd			beq 	_IFSTFExit 					; end of data
.2dec					_IFSTFHaveChar:
.2dec	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2dee	f0 08		beq $2df8			beq 	_IFSTFDecimal
.2df0	20 86 2e	jsr $2e86			jsr 	IFSTFAddR0 					; add number in
.2df3	80 f0		bra $2de5			bra 	_IFSTFLoop 					; keep going until . or end.
.2df5					_IFSTFFail:
.2df5	38		sec				sec
.2df6	80 0d		bra $2e05			bra 	_IFSTFReturn
.2df8					_IFSTFDecimal:
.2df8	20 0d 2e	jsr $2e0d			jsr 	IFSTFDecimal 				; call the decimal places code.
.2dfb	b0 08		bcs $2e05			bcs 	_IFSTFReturn 				; error
.2dfd					_IFSTFExit:
.2dfd	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2dff	0d d7 06	ora $06d7			ora 	IFSignFlag
.2e02	85 0b		sta $0b				sta 	IFR0+IExp
.2e04	18		clc				clc
.2e05					_IFSTFReturn:
.2e05	60		rts				rts
.2e06					IFloatAddDecimalToR0:
.2e06	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.2e09	86 20		stx $20				stx 	iTemp0
.2e0b	84 21		sty $21				sty 	iTemp0+1
.2e0d					IFSTFDecimal:
.2e0d	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2e0f	20 b1 2e	jsr $2eb1			jsr 	IFloatPushRx
.2e12	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2e14	20 62 2f	jsr $2f62			jsr 	IFloatSetZero
.2e17	9c d8 06	stz $06d8			stz 	IFDecimalPlaces
.2e1a					_IFSTDLoop:
.2e1a	20 62 2e	jsr $2e62			jsr 	IFSTFGetNext 				; get next
.2e1d	b0 41		bcs $2e60			bcs 	_IFSTFFail2 				; bad character.
.2e1f	f0 11		beq $2e32			beq 	_IFSTFComplete 				; end of data, work out the result.
.2e21	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2e23	f0 39		beq $2e5e			beq 	_IFSTFExit2
.2e25	20 86 2e	jsr $2e86			jsr 	IFSTFAddR0 					; add number in
.2e28	ee d8 06	inc $06d8			inc 	IFDecimalPlaces 			; count decimals
.2e2b	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2e2e	c9 03		cmp #$03			cmp 	#3
.2e30	90 e8		bcc $2e1a			bcc 	_IFSTDLoop
.2e32					_IFSTFComplete:
.2e32	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2e35	f0 27		beq $2e5e			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2e37	3a		dec a				dec 	a 							; table indexed from 1.
.2e38	0a		asl a				asl 	a
.2e39	0a		asl a				asl 	a
.2e3a	aa		tax				tax
.2e3b	bd 9d 2e	lda $2e9d,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2e3e	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2e40	bd 9e 2e	lda $2e9e,x			lda 	TableTen+1,x
.2e43	85 0d		sta $0d				sta  	IFR1+IM1
.2e45	bd 9f 2e	lda $2e9f,x			lda 	TableTen+2,x
.2e48	85 0e		sta $0e				sta  	IFR1+IM2
.2e4a	bd a0 2e	lda $2ea0,x			lda 	TableTen+3,x
.2e4d	85 0f		sta $0f				sta  	IFR1+IExp
.2e4f	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2e51	20 02 2a	jsr $2a02			jsr 	IFloatMultiply
.2e54	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop and add the decimal.
.2e56	20 d2 2e	jsr $2ed2			jsr 	IFloatPullRx
.2e59	a2 0c		ldx #$0c			ldx 	#IFR1
.2e5b	20 58 29	jsr $2958			jsr 	IFloatAdd
.2e5e					_IFSTFExit2:
.2e5e	18		clc				clc
.2e5f	60		rts				rts
.2e60					_IFSTFFail2:
.2e60	38		sec				sec
.2e61	60		rts				rts
.2e62					IFSTFGetNext:
.2e62	ad d6 06	lda $06d6			lda 	IFCount  					; if count is zero, return with Z set.
.2e65	f0 19		beq $2e80			beq 	_IFSTFReturnOk
.2e67	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.2e69	e6 20		inc $20				inc 	iTemp0 						; point at next.
.2e6b	d0 02		bne $2e6f			bne 	_IFSTFGNNoCarry
.2e6d	e6 21		inc $21				inc 	iTemp0+1
.2e6f					_IFSTFGNNoCarry:
.2e6f	ce d6 06	dec $06d6			dec 	IFCount 					; dec count.
.2e72	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2e74	f0 08		beq $2e7e			beq 	_IFSTFGOkay
.2e76	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2e78	90 08		bcc $2e82			bcc 	_IFSTFGFail
.2e7a	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2e7c	b0 04		bcs $2e82			bcs 	_IFSTFGFail
.2e7e					_IFSTFGOkay:
.2e7e	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2e80					_IFSTFReturnOk:
.2e80	18		clc				clc
.2e81	60		rts				rts
.2e82					_IFSTFGFail:
.2e82	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2e84	38		sec				sec
.2e85	60		rts				rts
.2e86					IFSTFAddR0:
.2e86	29 0f		and #$0f			and 	#15 						; to int value
.2e88	48		pha				pha 								; save it.
.2e89	a9 0a		lda #$0a			lda 	#10
.2e8b	a2 0c		ldx #$0c			ldx 	#IFR1
.2e8d	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.2e90	20 02 2a	jsr $2a02			jsr 	IFloatMultiply
.2e93	68		pla				pla
.2e94	a2 0c		ldx #$0c			ldx 	#IFR1
.2e96	20 64 2f	jsr $2f64			jsr 	IFloatSetByte
.2e99	20 58 29	jsr $2958			jsr 	IFloatAdd
.2e9c	60		rts				rts
.06d6					IFCount:
>06d6							.fill 	1
.06d7					IFSignFlag:
>06d7							.fill 	1
.06d8					IFDecimalPlaces:
>06d8							.fill 	1
.2e9d					TableTen:
>2e9d	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2ea1	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2ea5	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2ea9	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2ead	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2eb1					IFloatPushRx:
.2eb1	5a		phy				phy
.2eb2	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.2eb5	b5 00		lda $00,x			lda 	IM0,x
.2eb7	99 da 06	sta $06da,y			sta 	IFStack,y
.2eba	b5 01		lda $01,x			lda 	IM1,x
.2ebc	99 db 06	sta $06db,y			sta 	IFStack+1,y
.2ebf	b5 02		lda $02,x			lda 	IM2,x
.2ec1	99 dc 06	sta $06dc,y			sta 	IFStack+2,y
.2ec4	b5 03		lda $03,x			lda 	IExp,x
.2ec6	99 dd 06	sta $06dd,y			sta 	IFStack+3,y
.2ec9	c8		iny				iny
.2eca	c8		iny				iny
.2ecb	c8		iny				iny
.2ecc	c8		iny				iny
.2ecd	8c d9 06	sty $06d9			sty 	IFStackIndex
.2ed0	7a		ply				ply
.2ed1	60		rts				rts
.2ed2					IFloatPullRx:
.2ed2	5a		phy				phy
.2ed3	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.2ed6	88		dey				dey
.2ed7	88		dey				dey
.2ed8	88		dey				dey
.2ed9	88		dey				dey
.2eda	b9 da 06	lda $06da,y			lda 	IFStack,y
.2edd	95 00		sta $00,x			sta 	IM0,x
.2edf	b9 db 06	lda $06db,y			lda 	IFStack+1,y
.2ee2	95 01		sta $01,x			sta 	IM1,x
.2ee4	b9 dc 06	lda $06dc,y			lda 	IFStack+2,y
.2ee7	95 02		sta $02,x			sta 	IM2,x
.2ee9	b9 dd 06	lda $06dd,y			lda 	IFStack+3,y
.2eec	95 03		sta $03,x			sta 	IExp,x
.2eee	8c d9 06	sty $06d9			sty 	IFStackIndex
.2ef1	7a		ply				ply
.2ef2	60		rts				rts
.06d9					IFStackIndex:
>06d9							.fill 	1
.06da					IFStack:
>06da							.fill 	16*4
.2ef3					IFloatCopyFromRegister:
.2ef3	b5 00		lda $00,x			lda 	0,x
.2ef5	85 08		sta $08				sta 	IFR0
.2ef7	b5 01		lda $01,x			lda 	1,x
.2ef9	85 09		sta $09				sta 	IFR0+1
.2efb	b5 02		lda $02,x			lda 	2,x
.2efd	85 0a		sta $0a				sta 	IFR0+2
.2eff	b5 03		lda $03,x			lda 	3,x
.2f01	85 0b		sta $0b				sta 	IFR0+3
.2f03	60		rts				rts
.2f04					IFloatCopyToRegister:
.2f04	a5 08		lda $08				lda 	IFR0
.2f06	95 00		sta $00,x			sta 	0,x
.2f08	a5 09		lda $09				lda 	IFR0+1
.2f0a	95 01		sta $01,x			sta 	1,x
.2f0c	a5 0a		lda $0a				lda 	IFR0+2
.2f0e	95 02		sta $02,x			sta 	2,x
.2f10	a5 0b		lda $0b				lda 	IFR0+3
.2f12	95 03		sta $03,x			sta 	3,x
.2f14	60		rts				rts
.2f15					IFloatLoadInline:
.2f15	68		pla				pla 								; pop address off to iTemp0
.2f16	85 20		sta $20				sta 	iTemp0
.2f18	68		pla				pla
.2f19	85 21		sta $21				sta 	iTemp0+1
.2f1b	a0 01		ldy #$01			ldy 	#1
.2f1d	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.2f1f	95 00		sta $00,x			sta 	0,x
.2f21	c8		iny				iny
.2f22	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.2f24	95 01		sta $01,x			sta 	1,x
.2f26	c8		iny				iny
.2f27	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.2f29	95 02		sta $02,x			sta 	2,x
.2f2b	c8		iny				iny
.2f2c	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.2f2e	95 03		sta $03,x			sta 	3,x
.2f30	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2f31	a5 20		lda $20				lda 	iTemp0
.2f33	69 05		adc #$05			adc 	#5
.2f35	85 20		sta $20				sta 	iTemp0
.2f37	90 02		bcc $2f3b			bcc 	_IFLINoCarry
.2f39	e6 21		inc $21				inc 	iTemp0+1
.2f3b					_IFLINoCarry:
.2f3b	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.2f3e					IFloatMultiply8BitRx:
.2f3e	5a		phy		        phy
.2f3f	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2f41	a4 08		ldy $08		        ldy     IFR0+IM0
.2f43	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2f44	85 08		sta $08		        sta     IFR0+IM0
.2f46	84 09		sty $09		        sty     IFR0+IM1
.2f48	a9 00		lda #$00	        lda     #0
.2f4a	a0 08		ldy #$08	        ldy     #8
.2f4c					_IFMLoop:
.2f4c	90 03		bcc $2f51	        bcc     _IFMNoAdd
.2f4e	18		clc		        clc
.2f4f	65 09		adc $09		        adc     IFR0+IM1
.2f51					_IFMNoAdd:
.2f51	6a		ror a		        ror     a
.2f52	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2f54	88		dey		        dey
.2f55	d0 f5		bne $2f4c	        bne     _IFMLoop
.2f57	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.2f59	7a		ply		        ply
.2f5a	60		rts		        rts
.2f5b					IFloatCheckZero:
.2f5b	b5 00		lda $00,x			lda 	IM0,x
.2f5d	15 01		ora $01,x			ora 	IM1,x
.2f5f	15 02		ora $02,x			ora 	IM2,x
.2f61	60		rts				rts
.2f62					IFloatSetZero:
.2f62	a9 00		lda #$00			lda 	#0
.2f64					IFloatSetByte:
.2f64	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2f66	74 01		stz $01,x			stz 	IM1,x
.2f68	74 02		stz $02,x			stz 	IM2,x
.2f6a	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2f6c	60		rts				rts
.2f6d					IFloatNegate:
.2f6d	b5 03		lda $03,x			lda 	IExp,x
.2f6f	49 40		eor #$40			eor 	#IFSign
.2f71	95 03		sta $03,x			sta 	IExp,x
.2f73	18		clc				clc
.2f74	60		rts				rts
.2f75					IFloatMantissaNegate:
.2f75	38		sec				sec
.2f76	a9 00		lda #$00			lda 	#0
.2f78	f5 00		sbc $00,x			sbc 	IM0,x
.2f7a	95 00		sta $00,x			sta 	IM0,x
.2f7c	a9 00		lda #$00			lda 	#0
.2f7e	f5 01		sbc $01,x			sbc 	IM1,x
.2f80	95 01		sta $01,x			sta 	IM1,x
.2f82	a9 00		lda #$00			lda 	#0
.2f84	f5 02		sbc $02,x			sbc 	IM2,x
.2f86	95 02		sta $02,x			sta 	IM2,x
.2f88	60		rts				rts
.2f89					IFloatShiftLeft:
.2f89	18		clc				clc
.2f8a					IFloatRotateLeft:
.2f8a	36 00		rol $00,x			rol 	IM0,x
.2f8c	36 01		rol $01,x			rol 	IM1,x
.2f8e	36 02		rol $02,x			rol 	IM2,x
.2f90	60		rts				rts
.2f91					IFloatShiftRight:
.2f91	18		clc				clc
.2f92					IFloatRotateRight:
.2f92	76 02		ror $02,x			ror 	IM2,x
.2f94	76 01		ror $01,x			ror 	IM1,x
.2f96	76 00		ror $00,x			ror 	IM0,x
.2f98	60		rts				rts
.2f99					IFloatNormalise:
.2f99	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero 			; is it zero
.2f9c	f0 18		beq $2fb6			beq 	_IFNExitZero 				; if so exit
.2f9e					_IFNLoop:
.2f9e	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2fa0	29 c0		and #$c0			and 	#$C0
.2fa2	c9 40		cmp #$40			cmp 	#$40
.2fa4	f0 13		beq $2fb9			beq 	_IFNExitOkay 				; if so , then we are done.
.2fa6	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2fa8	29 3f		and #$3f			and 	#$3F
.2faa	c9 20		cmp #$20			cmp 	#$20
.2fac	f0 0b		beq $2fb9			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2fae	20 cf 2f	jsr $2fcf			jsr 	IFloatDecExponent
.2fb1	20 89 2f	jsr $2f89			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2fb4	80 e8		bra $2f9e			bra 	_IFNLoop
.2fb6					_IFNExitZero:
.2fb6	20 62 2f	jsr $2f62			jsr 	IFloatSetZero 				; set the result to zero
.2fb9					_IFNExitOkay:
.2fb9	18		clc				clc  								; return with CC.
.2fba	60		rts				rts
.2fbb					IFloatIncExponent:
.2fbb	b5 03		lda $03,x			lda 	IExp,x
.2fbd	48		pha				pha
.2fbe	29 c0		and #$c0			and 	#$C0
.2fc0	8d 1a 07	sta $071a			sta 	IFXTemp
.2fc3	68		pla				pla
.2fc4	1a		inc a				inc 	a
.2fc5	29 3f		and #$3f			and 	#$3F
.2fc7	48		pha				pha
.2fc8	0d 1a 07	ora $071a			ora 	IFXTemp
.2fcb	95 03		sta $03,x			sta 	IExp,x
.2fcd	68		pla				pla
.2fce	60		rts				rts
.2fcf					IFloatDecExponent:
.2fcf	b5 03		lda $03,x			lda 	IExp,x
.2fd1	48		pha				pha
.2fd2	29 c0		and #$c0			and 	#$C0
.2fd4	8d 1a 07	sta $071a			sta 	IFXTemp
.2fd7	68		pla				pla
.2fd8	3a		dec a				dec 	a
.2fd9	29 3f		and #$3f			and 	#$3F
.2fdb	48		pha				pha
.2fdc	0d 1a 07	ora $071a			ora 	IFXTemp
.2fdf	95 03		sta $03,x			sta 	IExp,x
.2fe1	68		pla				pla
.2fe2	60		rts				rts
.071a					IFXTemp:
>071a							.fill 	1
.2fe3					IFloatBufferReset:
.2fe3	9c 1b 07	stz $071b			stz 	IFBufferCount
.2fe6	9c 1c 07	stz $071c			stz 	IFBuffer
.2fe9	60		rts				rts
.2fea					IFloatGetBufferAddress:
.2fea	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.2fec	a2 1c		ldx #$1c			ldx 	#(IFBuffer & $FF)
.2fee	ad 1b 07	lda $071b			lda 	IFBufferCount
.2ff1	60		rts				rts
.2ff2					IFloatBufferWrite:
.2ff2	da		phx				phx
.2ff3	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.2ff6	9d 1c 07	sta $071c,x			sta 	IFBuffer,x
.2ff9	9e 1d 07	stz $071d,x			stz 	IFBuffer+1,x
.2ffc	ee 1b 07	inc $071b			inc 	IFBufferCount
.2fff	fa		plx				plx
.3000	60		rts				rts
.3001					IFloatStripTrailingZeros:
.3001	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.3004	bd 1b 07	lda $071b,x			lda 	IFBuffer-1,x
.3007	c9 30		cmp #$30			cmp		#"0"
.3009	d0 0f		bne $301a			bne 	_IFSTExit
.300b	bd 1a 07	lda $071a,x			lda 	IFBuffer-2,x
.300e	c9 2e		cmp #$2e			cmp 	#"."
.3010	f0 08		beq $301a			beq 	_IFSTExit
.3012	ce 1b 07	dec $071b			dec 	IFBufferCount
.3015	9e 1b 07	stz $071b,x			stz 	IFBuffer-1,x
.3018	80 e7		bra $3001			bra 	IFloatStripTrailingZeros
.301a					_IFSTExit:
.301a	60		rts				rts
.071b					IFBufferCount:
>071b							.fill 	1
.071c					IFBuffer:
>071c							.fill 	25
.301b					IFloatCheck:
.301b	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative
.301d	09 40		ora #$40			ora 	#IFSign
.301f	85 0b		sta $0b				sta 	IFR0+IExp
.3021	20 58 29	jsr $2958			jsr 	IFloatAdd 					; add allowed to error.
.3024	a2 08		ldx #$08			ldx 	#IFR0
.3026	20 5b 2f	jsr $2f5b			jsr 	IFloatCheckZero 			; error if < 0
.3029	f0 06		beq $3031			beq 	_IFAOkay
.302b	a5 0b		lda $0b				lda 	IFR0+IExp
.302d	29 40		and #$40			and 	#IFSign
.302f	d0 01		bne $3032			bne 	_IFAFail
.3031					_IFAOkay:
.3031	60		rts				rts
.3032					_IFAFail:
.3032	38		sec				sec
.3033	68		pla				pla 								; get address - 2
.3034	e9 02		sbc #$02			sbc 	#2
.3036	aa		tax				tax
.3037	68		pla				pla
.3038	e9 00		sbc #$00			sbc 	#0
.303a	a8		tay				tay
.303b	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.303d					_IFAStop:
>303d	db						.byte 	$DB 						; display an error AA ADR ADR
.303e	80 fd		bra $303d			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
