
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Thu Jun  1 10:14:50 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 4f 1c	jsr $1c4f			jsr 	PGMSetBaseAddress
.1007	20 d1 22	jsr $22d1			jsr 	IFInitialise
.100a	4c 68 12	jmp $1268			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc


;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 7b 14	jsr $147b			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 df 28	jsr $28df			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 89 1f	jmp $1f89		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 62 1c	jsr $1c62			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 81 22	jsr $2281			jsr 	VARClearHashTables
.1028	ad 48 03	lda $0348			lda 	PGMEndMemoryHigh
.102b	20 d3 20	jsr $20d3			jsr 	StackReset
.102e	20 2f 21	jsr $212f			jsr 	StringSystemInitialise
.1031	60		rts				rts
.1032					AllocateMemory:
.1032	5a		phy				phy 								; save Y
.1033	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.1035	5a		phy				phy
.1036	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1038	5a		phy				phy
.1039	a8		tay				tay 								; count is now in XY
.103a					_AllocateLoop:
.103a	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103c	d0 04		bne $1042			bne 	_AllocateOne
.103e	c0 00		cpy #$00			cpy 	#0
.1040	f0 12		beq $1054			beq 	_AllocateExit
.1042					_AllocateOne:
.1042	a9 00		lda #$00			lda 	#0 							; zero byte
.1044	92 24		sta ($24)			sta 	(freeMemory)
.1046	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1048	d0 02		bne $104c			bne 	_AllocateSkipCarry
.104a	e6 25		inc $25				inc 	freeMemory+1
.104c					_AllocateSkipCarry:
.104c	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.104e	d0 01		bne $1051			bne 	_AllocateSkipBorrow
.1050	ca		dex				dex
.1051					_AllocateSkipBorrow:
.1051	88		dey				dey
.1052	80 e6		bra $103a			bra 	_AllocateLoop
.1054					_AllocateExit:
.1054	fa		plx				plx 								; restore address
.1055	68		pla				pla
.1056	7a		ply				ply 								; restore Y
.1057	60		rts				rts
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1058					CommandDIM:
.1058	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check identifier follows.
.105a	29 c0		and #$c0			and 	#$C0
.105c	c9 40		cmp #$40			cmp 	#$40
.105e	d0 39		bne $1099			bne 	_CDSyntax
.1060	20 38 22	jsr $2238			jsr 	VARGetInfo 					; get information
.1063	ad 54 04	lda $0454			lda 	VARType 					; check array.
.1066	29 02		and #$02			and 	#2
.1068	f0 2f		beq $1099			beq 	_CDSyntax
.106a	20 ea 21	jsr $21ea			jsr 	VARFind 					; does it already exist
.106d	b0 2d		bcs $109c			bcs 	_CDExists
.106f	20 96 21	jsr $2196			jsr 	VARCreate 					; create it - returns data ptr in XA
.1072	da		phx				phx 								; save target address
.1073	48		pha				pha
.1074	ad 54 04	lda $0454			lda 	VARType 					; type ID.
.1077	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1079	20 9f 10	jsr $109f			jsr 	CreateArray 				; create array to XA
.107c	84 20		sty $20				sty 	zTemp1 						; save Y
.107e	7a		ply				ply 								; restore target to zTemp0
.107f	84 1e		sty $1e				sty 	zTemp0
.1081	7a		ply				ply
.1082	84 1f		sty $1f				sty 	zTemp0+1
.1084	92 1e		sta ($1e)			sta 	(zTemp0) 					; save new array
.1086	a0 01		ldy #$01			ldy 	#1
.1088	8a		txa				txa
.1089	91 1e		sta ($1e),y			sta 	(zTemp0),y
.108b	a4 20		ldy $20				ldy 	zTemp1 						; restore zTemp1
.108d	20 77 20	jsr $2077			jsr 	ERRCheckRParen 				; check )
.1090	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.1092	c8		iny				iny
.1093	c0 99		cpy #$99			cpy 	#PR_COMMA
.1095	f0 c1		beq $1058			beq 	CommandDIM
.1097	88		dey				dey
.1098	60		rts				rts
.1099					_CDSyntax:
.1099	4c 38 1f	jmp $1f38		jmp	ErrorV_syntax
.109c					_CDExists:
.109c	4c f5 1f	jmp $1ff5		jmp	ErrorV_redefine
.109f					CreateArray:
.109f	8d 3b 03	sta $033b			sta 	CAType						; save type
.10a2	20 8d 14	jsr $148d			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10a5	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10a7	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a9	f0 04		beq $10af			beq 	_CATwoDimensions
.10ab	20 fc 10	jsr $10fc			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ae	60		rts				rts
.10af					_CATwoDimensions:
>10af	db						.byte 	$DB
.10b0	a5 0d		lda $0d				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10b2	8d 3d 03	sta $033d			sta 	CADim1+1
.10b5	a5 0c		lda $0c				lda 	IFR0+IM0
.10b7	8d 3c 03	sta $033c			sta 	CADim1+0
.10ba	20 7f 20	jsr $207f			jsr 	ERRCheckComma 				; check comma
.10bd	20 8d 14	jsr $148d			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10c0	5a		phy				phy 								; save Y position
.10c1	18		clc				clc 								; allocate the outer array of pointers.
.10c2	ae 3d 03	ldx $033d			ldx 	CADim1+1
.10c5	ad 3c 03	lda $033c			lda 	CADim1
.10c8	20 3b 11	jsr $113b			jsr 	CSAAllocate 				; allocate the outer array
.10cb	da		phx				phx									; save this address on the stack
.10cc	48		pha				pha
.10cd	86 23		stx $23				stx 	zTemp2+1					; and in zTemp2
.10cf	85 22		sta $22				sta 	zTemp2
.10d1					_CACreateSubLoop:
.10d1	38		sec				sec
.10d2	20 fc 10	jsr $10fc			jsr 	CreateSingleArray 			; create data array of required size.
.10d5	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10d7	91 22		sta ($22),y			sta 	(zTemp2),y
.10d9	8a		txa				txa
.10da	c8		iny				iny
.10db	91 22		sta ($22),y			sta 	(zTemp2),y
.10dd	18		clc				clc  								; next slot.
.10de	a5 22		lda $22				lda 	zTemp2
.10e0	69 02		adc #$02			adc 	#2
.10e2	85 22		sta $22				sta 	zTemp2
.10e4	90 02		bcc $10e8			bcc 	_CACNoCarry
.10e6	e6 23		inc $23				inc 	zTemp2+1
.10e8					_CACNoCarry:
.10e8	ad 3c 03	lda $033c			lda 	CADim1 						; use DIM1 as a counter
.10eb	d0 03		bne $10f0			bne 	_CACNoBorrow
.10ed	ce 3d 03	dec $033d			dec 	CADim1+1
.10f0					_CACNoBorrow:
.10f0	ce 3c 03	dec $033c			dec 	CADim1
.10f3	ad 3d 03	lda $033d			lda 	CADim1+1 					; but do one more.
.10f6	10 d9		bpl $10d1			bpl 	_CACreateSubLoop
.10f8	68		pla				pla
.10f9	fa		plx				plx
.10fa	7a		ply				ply
.10fb	60		rts				rts
.10fc					CreateSingleArray:
.10fc	5a		phy				phy
.10fd	38		sec				sec 								; allocate memory block all zeros.
.10fe	a5 0c		lda $0c				lda 	IFR0+IM0
.1100	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1102	20 3b 11	jsr $113b			jsr 	CSAAllocate
.1105	ac 3b 03	ldy $033b			ldy 	CAType 						; if numbers, we don't need to initialise.
.1108	f0 2f		beq $1139			beq 	_CSANoInit
.110a	da		phx				phx 								; save address of new array
.110b	48		pha				pha
.110c	85 1e		sta $1e				sta 	zTemp0 						; address in zTemp0
.110e	86 1f		stx $1f				stx 	zTemp0+1
.1110	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1112	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1114	a8		tay				tay
.1115	b2 1e		lda ($1e)			lda 	(zTemp0)
.1117	aa		tax				tax
.1118					_CSAEraseString:
.1118	5a		phy				phy
.1119	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.111b	a9 80		lda #$80			lda 	#$80
.111d	91 1e		sta ($1e),y			sta 	(zTemp0),y
.111f	7a		ply				ply
.1120	18		clc				clc 								; add 4 to next slot.
.1121	a5 1e		lda $1e				lda 	zTemp0
.1123	69 04		adc #$04			adc 	#4
.1125	85 1e		sta $1e				sta 	zTemp0
.1127	90 02		bcc $112b			bcc 	_CSAENoCarry
.1129	e6 1f		inc $1f				inc 	zTemp0+1
.112b					_CSAENoCarry:
.112b	e0 00		cpx #$00			cpx 	#0
.112d	d0 01		bne $1130			bne 	_CSANoBorrow
.112f	88		dey				dey
.1130					_CSANoBorrow:
.1130	ca		dex				dex
.1131	d0 e5		bne $1118			bne 	_CSAEraseString
.1133	c0 00		cpy #$00			cpy 	#0
.1135	d0 e1		bne $1118			bne 	_CSAEraseString
.1137	68		pla				pla
.1138	fa		plx				plx
.1139					_CSANoInit:
.1139	7a		ply				ply
.113a	60		rts				rts
.113b					CSAAllocate:
.113b	08		php				php 								; save type flag.
.113c	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.113d	d0 01		bne $1140			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.113f	e8		inx				inx
.1140					_CSAANoCarry:
.1140	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1142	b0 2e		bcs $1172			bcs 	_CSARange
.1144	28		plp				plp 								; restore type flag
.1145	08		php				php 								; save it back again.
.1146	da		phx				phx 								; save size.
.1147	48		pha				pha
.1148	86 1f		stx $1f				stx  	zTemp0+1 					; now in ztemp0+1:X
.114a	90 03		bcc $114f			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.114c	0a		asl a				asl 	a
.114d	26 1f		rol $1f				rol 	zTemp0+1
.114f					_CSAATimes2:
.114f	0a		asl a				asl 	a
.1150	26 1f		rol $1f				rol 	zTemp0+1
.1152	18		clc				clc
.1153	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1155	90 02		bcc $1159			bcc 	_CSAANoCarry2
.1157	e6 1f		inc $1f				inc 	zTemp0+1
.1159					_CSAANoCarry2:
.1159	a6 1f		ldx $1f				ldx 	zTemp0+1 					; XA is the bytes required.
.115b	20 32 10	jsr $1032			jsr 	AllocateMemory 				; allocate memory to XA
.115e	86 1f		stx $1f				stx 	zTemp0+1 					; save pointers
.1160	85 1e		sta $1e				sta 	zTemp0
.1162	68		pla				pla  								; write element count to first 2 bytes
.1163	92 1e		sta ($1e)			sta 	(zTemp0)
.1165	68		pla				pla 								; msb of element count
.1166	28		plp				plp 								; CC if pointer array
.1167	b0 02		bcs $116b			bcs 	_CSAAIsData
.1169	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.116b					_CSAAIsData:
.116b	a0 01		ldy #$01			ldy 	#1
.116d	91 1e		sta ($1e),y			sta 	(zTemp0),y
.116f	a5 1e		lda $1e				lda 	zTemp0 						; fix XA back up again
.1171	60		rts				rts
.1172					_CSARange:
.1172	4c 48 1f	jmp $1f48		jmp	ErrorV_range
.033b					CAType:
>033b							.fill 	1
.033c					CADim1:
>033c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1175					Command_Print:
.1175					Command_IP_Main:
.1175	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1176					_CPLoop:
.1176	08		php				php 								; save last action flag
.1177	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1179	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.117b	f0 3e		beq $11bb			beq 	_CPExit 					; without consuming
.117d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.117f	f0 3a		beq $11bb			beq 	_CPExit
.1181	68		pla				pla 								; throw last action flag
.1182	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1184	c8		iny				iny
.1185	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1187	f0 2f		beq $11b8			beq 	_CPContinueWithSameLine
.1189	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.118b	f0 26		beq $11b3			beq 	_CPTab
.118d	88		dey				dey 								; undo the get.
.118e	20 3b 14	jsr $143b			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1191	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1193	10 14		bpl $11a9			bpl 	_CPNumber
.1195	5a		phy				phy
.1196	18		clc				clc 								; string address to YX
.1197	a5 0c		lda $0c				lda 	IFR0+IM0
.1199	aa		tax				tax
.119a	a5 0d		lda $0d				lda 	IFR0+IM1
.119c	a8		tay				tay
.119d	e8		inx				inx 								; point to 1st character
.119e	d0 01		bne $11a1			bne 	_CPNoCarry
.11a0	c8		iny				iny
.11a1					_CPNoCarry:
.11a1	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.11a3	20 c4 11	jsr $11c4			jsr 	CPPrintAYX 					; print AYX
.11a6	7a		ply				ply
.11a7	80 cc		bra $1175			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11a9					_CPNumber:
.11a9	5a		phy				phy
.11aa	20 e3 26	jsr $26e3			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11ad	20 c4 11	jsr $11c4			jsr 	CPPrintAYX 					; print AYX
.11b0	7a		ply				ply
.11b1	80 c2		bra $1175			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11b3					_CPTab:
.11b3	a9 09		lda #$09			lda 	#9 							; print TAB
.11b5	20 d7 11	jsr $11d7			jsr 	CPPrintA
.11b8					_CPContinueWithSameLine:
.11b8	38		sec				sec 								; loop round with carry set, which
.11b9	80 bb		bra $1176			bra 	_CPLoop 					; will inhibit final CR
.11bb					_CPExit:
.11bb	28		plp				plp 								; get last action flag
.11bc	b0 05		bcs $11c3			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11be	a9 0d		lda #$0d			lda 	#13 						; print new line
.11c0	20 d7 11	jsr $11d7			jsr 	CPPrintA
.11c3					_CPExit2:
.11c3	60		rts				rts
.11c4					CPPrintAYX:
.11c4	86 1e		stx $1e				stx 	zTemp0
.11c6	84 1f		sty $1f				sty 	zTemp0+1
.11c8	aa		tax				tax
.11c9	f0 0b		beq $11d6			beq 	_CPPrintExit
.11cb	a0 00		ldy #$00			ldy 	#0
.11cd					_CPPrintAYXLoop:
.11cd	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.11cf	20 d7 11	jsr $11d7			jsr 	CPPrintA
.11d2	c8		iny				iny
.11d3	ca		dex				dex
.11d4	d0 f7		bne $11cd			bne 	_CPPrintAYXLoop
.11d6					_CPPrintExit:
.11d6	60		rts				rts
.11d7					CPPrintA:
.11d7	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.11da					CommandLET:
.11da	20 03 15	jsr $1503			jsr 	EXPTermR0 					; get term
.11dd	90 6d		bcc $124c			bcc 	_CLError 					; must be a reference term.
.11df	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.11e1	48		pha				pha
.11e2	a5 0d		lda $0d				lda 	IFR0+IM1
.11e4	48		pha				pha
.11e5	a5 0f		lda $0f				lda 	IFR0+IExp
.11e7	48		pha				pha
.11e8	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.11ea	20 87 20	jsr $2087			jsr 	ERRCheckA
.11ed	20 3b 14	jsr $143b			jsr 	EXPEvaluateExpression 		; right hand side.
.11f0	68		pla				pla 								; type of l-expr
.11f1	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.11f3	30 5a		bmi $124f			bmi 	_CLType
.11f5	fa		plx				plx 	 							; pop target address to zTemp0
.11f6	86 1f		stx $1f				stx 	zTemp0+1
.11f8	fa		plx				plx
.11f9	86 1e		stx $1e				stx 	zTemp0
.11fb	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.11fd	30 15		bmi $1214			bmi 	_CLStringAssign
.11ff	5a		phy				phy
.1200	a0 03		ldy #$03			ldy 	#3
.1202	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1204	88		dey				dey
.1205	a5 0e		lda $0e				lda 	IFR0+IM2
.1207	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1209	88		dey				dey
.120a	a5 0d		lda $0d				lda 	IFR0+IM1
.120c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.120e	a5 0c		lda $0c				lda 	IFR0+IM0
.1210	92 1e		sta ($1e)			sta 	(zTemp0)
.1212	7a		ply				ply
.1213	60		rts				rts
.1214					_CLStringAssign:
.1214	5a		phy				phy
.1215	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1217	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1219	12 1e		ora ($1e)			ora 	(zTemp0)
.121b	f0 23		beq $1240			beq 	_CLConcreteString
.121d	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.121f	85 20		sta $20				sta 	zTemp1
.1221	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1223	85 21		sta $21				sta 	zTemp1+1
.1225	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.1227	38		sec				sec 								; we want 3 for slot size, status, string size.
.1228	e9 03		sbc #$03			sbc 	#3
.122a	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.122c	90 12		bcc $1240			bcc 	_CLConcreteString 			; if so, concrete the string again.
.122e	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1230	1a		inc a				inc 	a
.1231	aa		tax				tax
.1232	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1234					_CLReplaceString:
.1234	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.1236	c8		iny				iny
.1237	c8		iny				iny
.1238	91 20		sta ($20),y			sta 	(zTemp1),y
.123a	88		dey				dey
.123b	ca		dex				dex
.123c	d0 f6		bne $1234			bne 	_CLReplaceString
.123e	80 0a		bra $124a			bra 	_CLExit
.1240					_CLConcreteString:
.1240	20 e4 20	jsr $20e4			jsr 	StringConcrete  			; concreted string in XA.
.1243	a0 01		ldy #$01			ldy 	#1 							; store the address
.1245	92 1e		sta ($1e)			sta 	(zTemp0)
.1247	8a		txa				txa
.1248	91 1e		sta ($1e),y			sta 	(zTemp0),y
.124a					_CLExit:
.124a	7a		ply				ply
.124b	60		rts				rts
.124c					_CLError:
.124c	4c 5b 20	jmp $205b		jmp	ErrorV_variable
.124f					_CLType:
.124f	4c 65 1f	jmp $1f65		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1252					Command_NEW:
.1252	20 56 1c	jsr $1c56			jsr 	PGMNewProgram
.1255	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1258	4c b5 12	jmp $12b5			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.125b					Command_REM:
.125b					Command_REM2:
.125b	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.125d	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.125f	d0 06		bne $1267			bne 	_CRExit
.1261	c8		iny				iny 								; skip over it, it's a comment.
.1262	98		tya				tya
.1263	38		sec				sec
.1264	71 1c		adc ($1c),y			adc 	(codePtr),y
.1266	a8		tay				tay
.1267					_CRExit:
.1267	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1268					Command_RUN:
.1268	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.126b	ad 47 03	lda $0347			lda 	PGMBaseHigh 				; back to the program start
.126e	85 1d		sta $1d				sta 	codePtr+1
.1270	64 1c		stz $1c				stz 	codePtr
.1272	80 0b		bra $127f			bra 	RUNNewLine
.1274					RUNEndOfLine:
.1274	18		clc				clc 								; advance to next line.
.1275	b2 1c		lda ($1c)			lda 	(codePtr)
.1277	65 1c		adc $1c				adc 	codePtr
.1279	85 1c		sta $1c				sta 	codePtr
.127b	90 02		bcc $127f			bcc 	_RELNoCarry
.127d	e6 1d		inc $1d				inc 	codePtr+1
.127f					_RELNoCarry:
.127f					RUNNewLine:
.127f	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1281	9a		txs				txs
.1282	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.1284	f0 2f		beq $12b5			beq 	Command_END
.1286	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.1288					RUNNewCommand:
.1288	9c 4c 04	stz $044c			stz 	stringInitialised 			; reset string system.
.128b	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.128d	10 1a		bpl $12a9			bpl		_RUNNotToken 				; probably an identifier
.128f	c8		iny				iny 								; consume token
.1290	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1292	f0 f4		beq $1288			beq 	RUNNewCommand
.1294	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1296	b0 0e		bcs $12a6			bcs 	_RUNSyntax
.1298	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.129a	90 0a		bcc $12a6			bcc 	_RUNSyntax
.129c	0a		asl a				asl 	a 							; double into X.
.129d	aa		tax				tax
.129e	20 a3 12	jsr $12a3			jsr 	_RUNDispatchMain			; call the main dispatcher
.12a1	80 e5		bra $1288			bra 	RUNNewCommand
.12a3					_RUNDispatchMain:
.12a3	7c 6c 19	jmp ($196c,x)			jmp 	(VectorTable,x)
.12a6					_RUNSyntax:
.12a6	4c 38 1f	jmp $1f38		jmp	ErrorV_syntax
.12a9					_RUNNotToken:
.12a9	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.12ab	90 f9		bcc $12a6			bcc 	_RUNSyntax
.12ad	20 da 11	jsr $11da			jsr 	CommandLET 					; assignment
.12b0	80 d6		bra $1288			bra 	RUNNewCommand 				; loop round.
.12b2					Command_Shift_Handler:
.12b2	4c 76 1f	jmp $1f76		jmp	ErrorV_unimplemented
.12b5					Command_END:
.12b5	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.12b8					Command_STOP:
.12b8	4c d3 1f	jmp $1fd3		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.12bb					NoExec01:
.12bb					NoExec02:
.12bb					NoExec03:
.12bb					NoExec04:
.12bb					NoExec05:
.12bb					NoExec06:
.12bb					NoExec07:
.12bb	4c 38 1f	jmp $1f38		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.12be					EXPBinAdd:
.12be	24 0f		bit $0f				bit 	IFR0+IExp
.12c0	30 6f		bmi $1331			bmi 	EXPConcatenate
.12c2	a2 10		ldx #$10			ldx 	#IFR1
.12c4	4c dc 22	jmp $22dc			jmp 	IFloatAdd
.12c7					EXPBinSub:
.12c7	24 0f		bit $0f				bit 	IFR0+IExp
.12c9	30 3f		bmi $130a			bmi 	EXPTypeError
.12cb	a2 10		ldx #$10			ldx 	#IFR1
.12cd	4c d5 22	jmp $22d5			jmp 	IFloatSubtract
.12d0					EXPBinMul:
.12d0	24 0f		bit $0f				bit 	IFR0+IExp
.12d2	30 36		bmi $130a			bmi 	EXPTypeError
.12d4	a2 10		ldx #$10			ldx 	#IFR1
.12d6	4c 86 23	jmp $2386			jmp 	IFloatMultiply
.12d9					EXPBinFDiv:
.12d9	24 0f		bit $0f				bit 	IFR0+IExp
.12db	30 2d		bmi $130a			bmi 	EXPTypeError
.12dd	a2 10		ldx #$10			ldx 	#IFR1
.12df	20 09 26	jsr $2609			jsr 	IFloatDivideFloat
.12e2	b0 0f		bcs $12f3			bcs 	EXPDZero
.12e4	60		rts				rts
.12e5					EXPBinIDiv:
.12e5	24 0f		bit $0f				bit 	IFR0+IExp
.12e7	30 21		bmi $130a			bmi 	EXPTypeError
.12e9	a2 10		ldx #$10			ldx 	#IFR1
.12eb	20 09 26	jsr $2609			jsr 	IFloatDivideFloat
.12ee	b0 03		bcs $12f3			bcs 	EXPDZero
.12f0	4c e6 25	jmp $25e6			jmp 	IFloatIntegerR0
.12f3					EXPDZero:
.12f3	4c aa 1f	jmp $1faa		jmp	ErrorV_divzero
.12f6					EXPBinIMod:
.12f6	24 0f		bit $0f				bit 	IFR0+IExp
.12f8	30 10		bmi $130a			bmi 	EXPTypeError
.12fa	a2 10		ldx #$10			ldx 	#IFR1
.12fc	5a		phy				phy
.12fd	20 1e 25	jsr $251e			jsr 	IFPreProcessBitwise 		; set up everything.
.1300	d0 05		bne $1307			bne 	EXPDRange
.1302	20 57 24	jsr $2457			jsr 	IFloatModulusInteger
.1305	7a		ply				ply
.1306	60		rts				rts
.1307					EXPDRange:
.1307	4c 48 1f	jmp $1f48		jmp	ErrorV_range
.130a					EXPTypeError:
.130a	4c 65 1f	jmp $1f65		jmp	ErrorV_type
.130d					EXPBinAnd:
.130d	24 0f		bit $0f				bit 	IFR0+IExp
.130f	30 f9		bmi $130a			bmi 	EXPTypeError
.1311	a2 10		ldx #$10			ldx 	#IFR1
.1313	20 d9 24	jsr $24d9			jsr 	IFloatBitwiseAnd
.1316	b0 ef		bcs $1307			bcs 	EXPDRange
.1318	60		rts				rts
.1319					EXPBinOr:
.1319	24 0f		bit $0f				bit 	IFR0+IExp
.131b	30 ed		bmi $130a			bmi 	EXPTypeError
.131d	a2 10		ldx #$10			ldx 	#IFR1
.131f	20 f0 24	jsr $24f0			jsr 	IFloatBitwiseOr
.1322	b0 e3		bcs $1307			bcs 	EXPDRange
.1324	60		rts				rts
.1325					EXPBinXor:
.1325	24 0f		bit $0f				bit 	IFR0+IExp
.1327	30 e1		bmi $130a			bmi 	EXPTypeError
.1329	a2 10		ldx #$10			ldx 	#IFR1
.132b	20 07 25	jsr $2507			jsr 	IFloatBitwiseXor
.132e	b0 d7		bcs $1307			bcs 	EXPDRange
.1330	60		rts				rts
.1331					EXPConcatenate:
.1331	18		clc				clc
.1332	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1334	72 10		adc ($10)			adc 	(IFR1)
.1336	b0 2d		bcs $1365			bcs 	_EXPCError
.1338	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.133a	da		phx				phx
.133b	a6 0d		ldx $0d				ldx 	IFR0+1
.133d	da		phx				phx
.133e	20 54 21	jsr $2154			jsr 	StringTempAllocate 			; allocate string, set up return
.1341	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1343	a5 10		lda $10				lda 	IFR1
.1345	20 4e 13	jsr $134e			jsr 	_EXPCCopyXA
.1348	fa		plx				plx 								; copy second string
.1349	68		pla				pla
.134a	20 4e 13	jsr $134e			jsr 	_EXPCCopyXA
.134d	60		rts				rts
.134e					_EXPCCopyXA:
.134e	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.1350	85 1e		sta $1e				sta 	zTemp0
.1352	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.1354	f0 0e		beq $1364			beq 	_EXPCCExit 					; nothing.
.1356	aa		tax				tax 								; count
.1357	5a		phy				phy 								; start positioin
.1358	a0 01		ldy #$01			ldy 	#1
.135a					_EXPCCLoop:
.135a	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.135c	20 89 21	jsr $2189			jsr 	StringTempWrite
.135f	c8		iny				iny
.1360	ca		dex				dex
.1361	d0 f7		bne $135a			bne 	_EXPCCLoop
.1363	7a		ply				ply
.1364					_EXPCCExit:
.1364	60		rts				rts
.1365					_EXPCError:
.1365	4c 46 20	jmp $2046		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1368					EXPReturnTrue:
.1368	a2 0c		ldx #$0c			ldx 	#IFR0
.136a	a9 01		lda #$01			lda 	#1
.136c	20 e8 28	jsr $28e8			jsr 	IFloatSetByte
.136f	20 f1 28	jsr $28f1			jsr 	IFloatNegate
.1372	60		rts				rts
.1373					EXPReturnFalse:
.1373	a2 0c		ldx #$0c			ldx 	#IFR0
.1375	4c e6 28	jmp $28e6			jmp 	IFloatSetZero
.1378					EXPCompareEqual:
.1378	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.137b	c9 00		cmp #$00			cmp 	#0
.137d	f0 e9		beq $1368			beq 	EXPReturnTrue
.137f	80 f2		bra $1373			bra 	EXPReturnFalse
.1381					EXPCompareLess:
.1381	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.1384	c9 ff		cmp #$ff			cmp 	#$FF
.1386	f0 e0		beq $1368			beq 	EXPReturnTrue
.1388	80 e9		bra $1373			bra 	EXPReturnFalse
.138a					EXPCompareGreater:
.138a	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.138d	c9 01		cmp #$01			cmp 	#1
.138f	f0 d7		beq $1368			beq 	EXPReturnTrue
.1391	80 e0		bra $1373			bra 	EXPReturnFalse
.1393					EXPCompareNotEqual:
.1393	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.1396	c9 00		cmp #$00			cmp 	#0
.1398	d0 ce		bne $1368			bne 	EXPReturnTrue
.139a	80 d7		bra $1373			bra 	EXPReturnFalse
.139c					EXPCompareLessEqual:
.139c	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.139f	c9 01		cmp #$01			cmp 	#1
.13a1	d0 c5		bne $1368			bne 	EXPReturnTrue
.13a3	80 ce		bra $1373			bra 	EXPReturnFalse
.13a5					EXPCompareGreaterEqual:
.13a5	20 ae 13	jsr $13ae			jsr 	EXPCompareBaseCode
.13a8	c9 ff		cmp #$ff			cmp 	#$FF
.13aa	d0 bc		bne $1368			bne 	EXPReturnTrue
.13ac	80 c5		bra $1373			bra 	EXPReturnFalse
.13ae					EXPCompareBaseCode:
.13ae	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.13b0	30 10		bmi $13c2			bmi 	_EXCBCString
.13b2	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.13b4	20 b4 25	jsr $25b4			jsr 	IFloatCompare
.13b7	a5 0c		lda $0c				lda 	IFR0+IM0
.13b9	f0 06		beq $13c1			beq 	_EXCBCExit 					; return 0 if zero
.13bb	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.13bd	50 02		bvc $13c1			bvc 	_EXCBCExit
.13bf	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.13c1					_EXCBCExit:
.13c1	60		rts				rts
.13c2					_EXCBCString:
.13c2	5a		phy				phy
.13c3	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.13c5	d2 10		cmp ($10)			cmp 	(IFR1)
.13c7	90 02		bcc $13cb			bcc 	_EXCBCSmaller
.13c9	b2 10		lda ($10)			lda 	(IFR1)
.13cb					_EXCBCSmaller:
.13cb	aa		tax				tax
.13cc	f0 0d		beq $13db			beq 	_EXCBCMatches 				; if zero common length matches
.13ce	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.13d0					_EXCBCCheckSmallerMatches:
.13d0	c8		iny				iny 								; compare directly as far as common length
.13d1	38		sec				sec
.13d2	b1 10		lda ($10),y			lda 	(IFR1),y
.13d4	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.13d6	d0 08		bne $13e0			bne 	_EXCBCExit2
.13d8	ca		dex				dex
.13d9	d0 f5		bne $13d0			bne 	_EXCBCCheckSmallerMatches
.13db					_EXCBCMatches:
.13db	38		sec				sec
.13dc	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.13de	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.13e0					_EXCBCExit2:
.13e0	7a		ply				ply
.13e1	c9 00		cmp #$00			cmp 	#0
.13e3	f0 04		beq $13e9			beq 	_EXCBCReturn
.13e5	30 03		bmi $13ea			bmi 	_EXCBCFF
.13e7	a9 01		lda #$01			lda 	#1
.13e9					_EXCBCReturn:
.13e9	60		rts				rts
.13ea					_EXCBCFF:
.13ea	a9 ff		lda #$ff			lda 	#$FF
.13ec	60		rts				rts
.13ed					_EXCBCRange:
.13ed	4c 48 1f	jmp $1f48		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.13f0					EXPBinLeft:
.13f0	a9 ff		lda #$ff			lda 	#$FF
.13f2	8d 3e 03	sta $033e			sta 	EXPShiftLeftFlag
.13f5	4c fb 13	jmp $13fb			jmp 	EXPShiftCommon
.13f8					EXPBinRight:
.13f8	9c 3e 03	stz $033e			stz 	EXPShiftLeftFlag
.13fb					EXPShiftCommon:
.13fb	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.13fd	05 13		ora $13				ora 	IFR1+IExp
.13ff	29 7f		and #$7f			and 	#$7F
.1401	d0 35		bne $1438			bne 	_EXPSRange
.1403	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1405	29 e0		and #$e0			and 	#$E0
.1407	05 0d		ora $0d				ora 	IFR0+IM1
.1409	05 0e		ora $0e				ora 	IFR0+IM2
.140b	d0 25		bne $1432			bne 	_EXPSShiftZero 				; if so return zero
.140d	5a		phy				phy
.140e	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1410	29 1f		and #$1f			and 	#$1F
.1412	f0 17		beq $142b			beq 	_EXPSExit 					; exit if zero
.1414	a8		tay				tay
.1415					_EXPSLoop:
.1415	a2 10		ldx #$10			ldx 	#IFR1
.1417	2c 3e 03	bit $033e			bit 	EXPShiftLeftFlag
.141a	30 05		bmi $1421			bmi 	_EXPSShiftLeft
.141c	20 15 29	jsr $2915			jsr 	IFloatShiftRight
.141f	80 07		bra $1428			bra 	_EXPSContinue
.1421					_EXPSShiftLeft:
.1421	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1424	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1426	30 10		bmi $1438			bmi 	_EXPSRange
.1428					_EXPSContinue:
.1428	88		dey				dey
.1429	d0 ea		bne $1415			bne 	_EXPSLoop
.142b					_EXPSExit:
.142b	a2 10		ldx #$10			ldx 	#IFR1
.142d	20 77 28	jsr $2877			jsr 	IFloatCopyFromRegister
.1430	7a		ply				ply
.1431	60		rts				rts
.1432					_EXPSShiftZero:
.1432	a2 0c		ldx #$0c			ldx 	#IFR0
.1434	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.1437	60		rts				rts
.1438					_EXPSRange:
.1438	4c 48 1f	jmp $1f48		jmp	ErrorV_range
.033e					EXPShiftLeftFlag:
>033e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.143b					EXPEvaluateExpression:
.143b	a9 00		lda #$00			lda 	#0 							; current precedence
.143d					EXPEvaluateExpressionPrecedenceA:
.143d	48		pha				pha
.143e	20 b8 14	jsr $14b8			jsr 	EXPTermValueR0				; do first term.
.1441					_EELoop:
.1441	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1443	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1445	90 31		bcc $1478			bcc 	_EEExit
.1447	aa		tax				tax 								; access the precedence of the operator.
.1448	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1449	dd d0 16	cmp $16d0,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.144c	b0 2b		bcs $1479			bcs 	_EEExit2
.144e	48		pha				pha 								; save current precedence.
.144f	da		phx				phx 								; save operator
.1450	c8		iny				iny 								; consume operator
.1451	da		phx				phx
.1452	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.1454	20 35 28	jsr $2835			jsr 	IFloatPushRx
.1457	fa		plx				plx
.1458	bd d0 16	lda $16d0,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.145b	20 3d 14	jsr $143d			jsr 	EXPEvaluateExpressionPrecedenceA
.145e	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.1460	20 56 28	jsr $2856			jsr 	IFloatPullRx
.1463	fa		plx				plx 								; operator
.1464	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.1466	45 13		eor $13				eor 	IFR1+IExp
.1468	30 08		bmi $1472			bmi 	_EEType
.146a					_EETypeOkay:
.146a	8a		txa				txa
.146b	0a		asl a				asl 	a 							; double -> X
.146c	aa		tax				tax
.146d	20 75 14	jsr $1475			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1470	80 cf		bra $1441			bra 	_EELoop
.1472					_EEType:
.1472	4c 65 1f	jmp $1f65		jmp	ErrorV_type
.1475					_EECallBinary:
.1475	7c 6c 19	jmp ($196c,x)			jmp 	(VectorTable,x)
.1478					_EEExit:
.1478	68		pla				pla 								; throw precedence
.1479					_EEExit2:
.1479	18		clc				clc
.147a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.147b					EXPEvalNumber:
.147b	20 3b 14	jsr $143b			jsr 	EXPEvaluateExpression
.147e	24 0f		bit $0f				bit 	IFR0+IExp
.1480	30 01		bmi $1483			bmi 	EVUType
.1482	60		rts				rts
.1483					EVUType:
.1483	4c 65 1f	jmp $1f65		jmp	ErrorV_type
.1486					EXPEvalInteger:
.1486	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1489	20 e6 25	jsr $25e6			jsr 	IFloatIntegerR0
.148c	60		rts				rts
.148d					EXPEvalInteger16:
.148d	20 86 14	jsr $1486			jsr 	EXPEvalInteger
.1490	a5 0e		lda $0e				lda 	IFR0+IM2
.1492	d0 21		bne $14b5			bne 	EVURange
.1494	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1496	a5 0c		lda $0c				lda 	IFR0+IM0
.1498	60		rts				rts
.1499					EXPEvalInteger8:
.1499	20 86 14	jsr $1486			jsr 	EXPEvalInteger
.149c	a5 0e		lda $0e				lda 	IFR0+IM2
.149e	05 0d		ora $0d				ora 	IFR0+IM1
.14a0	d0 13		bne $14b5			bne 	EVURange
.14a2	a5 0c		lda $0c				lda 	IFR0+IM0
.14a4	60		rts				rts
.14a5					EXPEvalString:
.14a5	20 3b 14	jsr $143b			jsr 	EXPEvaluateExpression
.14a8	24 0f		bit $0f				bit 	IFR0+IExp
.14aa	10 d7		bpl $1483			bpl 	EVUType
.14ac	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14ae	86 1f		stx $1f				stx 	zTemp0+1
.14b0	a5 0c		lda $0c				lda 	IFR0+IM0
.14b2	85 1e		sta $1e				sta 	zTemp0
.14b4	60		rts				rts
.14b5					EVURange:
.14b5	4c 48 1f	jmp $1f48		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.14b8					EXPTermValueR0:
.14b8	20 03 15	jsr $1503			jsr 	EXPTermR0 					; get term
.14bb	90 45		bcc $1502			bcc 	_ETVNotReference 			; exit if value.
.14bd	5a		phy				phy
.14be	a0 03		ldy #$03			ldy 	#3 							; get type
.14c0	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14c2	30 14		bmi $14d8			bmi 	_ETVDereferenceString
.14c4	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.14c6	88		dey				dey
.14c7	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14c9	85 0e		sta $0e				sta 	IFR0+IM2
.14cb	88		dey				dey
.14cc	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14ce	aa		tax				tax
.14cf	b2 0c		lda ($0c)			lda 	(IFR0)
.14d1	86 0d		stx $0d				stx 	IFR0+IM1
.14d3	85 0c		sta $0c				sta 	IFR0+IM0
.14d5	7a		ply				ply
.14d6	18		clc				clc
.14d7	60		rts				rts
.14d8					_ETVDereferenceString:
.14d8	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.14da	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14dc	12 0c		ora ($0c)			ora 	(IFR0)
.14de	f0 11		beq $14f1			beq 	_ETVNull
.14e0	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.14e2	aa		tax				tax
.14e3	b2 0c		lda ($0c)			lda 	(IFR0)
.14e5	18		clc				clc 								; add two so points to actual string.
.14e6	69 02		adc #$02			adc 	#2
.14e8	90 01		bcc $14eb			bcc 	_EVDSNoCarry
.14ea	e8		inx				inx
.14eb					_EVDSNoCarry:
.14eb	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.14ed	85 0c		sta $0c				sta 	IFR0
.14ef	80 08		bra $14f9			bra 	_ETVFillExit 				; tidy up and exit.
.14f1					_ETVNull:
.14f1	a9 01		lda #$01			lda 	#_EVTNString & $FF
.14f3	85 0c		sta $0c				sta 	IFR0+IM0
.14f5	a9 15		lda #$15			lda 	#_EVTNString >> 8
.14f7	85 0d		sta $0d				sta 	IFR0+IM1
.14f9					_ETVFillExit:
.14f9	64 0e		stz $0e				stz 	IFR0+IM2
.14fb	a9 80		lda #$80			lda 	#$80
.14fd	85 0f		sta $0f				sta 	IFR0+IExp
.14ff	7a		ply				ply
.1500	60		rts				rts
.1501					_EVTNString:
>1501	00						.byte 	0
.1502					_ETVNotReference:
.1502	60		rts				rts
.1503					EXPTermR0:
.1503	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.1505	30 10		bmi $1517			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1507	c8		iny				iny 								; consume element
.1508	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.150a	b0 08		bcs $1514			bcs 	_ETMIdentifier
.150c	20 3b 15	jsr $153b			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.150f	20 6e 15	jsr $156e			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1512	18		clc				clc 								; return value
.1513	60		rts				rts
.1514					_ETMIdentifier:
.1514	4c 8e 22	jmp $228e			jmp 	VARCheckSimple 				; check simple variables A-Z
.1517					_ETMIsUnaryOrMinus:
.1517	c8		iny				iny 								; consume element
.1518	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.151a	d0 0a		bne $1526			bne 	_ETMCheckUnary
.151c	20 b8 14	jsr $14b8			jsr 	EXPTermValueR0 				; get a term to negate
.151f	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1521	20 f1 28	jsr $28f1			jsr 	IFloatNegate
.1524	18		clc				clc
.1525	60		rts				rts
.1526					_ETMCheckUnary:
.1526	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1528	90 0e		bcc $1538			bcc 	_ETMUnarySyntax
.152a	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.152c	b0 0a		bcs $1538			bcs 	_ETMUnarySyntax
.152e	0a		asl a				asl 	a
.152f	aa		tax				tax
.1530	20 35 15	jsr $1535			jsr 	_ETMCallUnaryFunction
.1533	18		clc				clc
.1534	60		rts				rts
.1535					_ETMCallUnaryFunction:
.1535	7c 6c 19	jmp ($196c,x)			jmp 	(VectorTable,x)
.1538					_ETMUnarySyntax:
.1538	4c 38 1f	jmp $1f38		jmp	ErrorV_syntax
.153b					EXPExtractTokenisedInteger:
.153b	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.153d	64 0f		stz $0f				stz 	IFR0+IExp
.153f	64 0d		stz $0d				stz 	IFR0+IM1
.1541	64 0e		stz $0e				stz 	IFR0+IM2
.1543					_ETMConstant:
.1543	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1545	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1547	b0 24		bcs $156d			bcs 	_ETMCExit 					; no.
.1549	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.154b	a5 0d		lda $0d				lda 	IFR0+IM1
.154d	85 0e		sta $0e				sta 	IFR0+IM2
.154f	a5 0c		lda $0c				lda 	IFR0+IM0
.1551	85 0d		sta $0d				sta 	IFR0+IM1
.1553	64 0c		stz $0c				stz 	IFR0+IM0
.1555	8a		txa				txa
.1556	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1557	66 0e		ror $0e				ror 	IFR0+IM2
.1559	66 0d		ror $0d				ror 	IFR0+IM1
.155b	66 0c		ror $0c				ror 	IFR0+IM0
.155d	4a		lsr a				lsr 	a
.155e	66 0e		ror $0e				ror 	IFR0+IM2
.1560	66 0d		ror $0d				ror 	IFR0+IM1
.1562	66 0c		ror $0c				ror 	IFR0+IM0
.1564	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.1566	11 1c		ora ($1c),y			ora 	(codePtr),y
.1568	85 0c		sta $0c				sta 	IFR0+IM0
.156a	c8		iny				iny 								; consume, loop back
.156b	80 d6		bra $1543			bra 	_ETMConstant
.156d					_ETMCExit:
.156d	60		rts				rts
.156e					EXPCheckDecimalFollows:
.156e	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.1570	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1572	d0 19		bne $158d			bne 	_ETMCDExit
.1574	c8		iny				iny 								; consume token.
.1575	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.1577	5a		phy				phy									; save current position
.1578	48		pha				pha 								; save count of chars.
.1579	38		sec				sec 								; address into YX : y + codePtr+1
.157a	98		tya				tya
.157b	65 1c		adc $1c				adc 	codePtr
.157d	aa		tax				tax
.157e	a5 1d		lda $1d				lda 	codePtr+1
.1580	69 00		adc #$00			adc 	#0
.1582	a8		tay				tay
.1583	68		pla				pla 								; get count.
.1584	20 8a 27	jsr $278a			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1587	7a		ply				ply 								; go to next token.
.1588	98		tya				tya
.1589	38		sec				sec
.158a	71 1c		adc ($1c),y			adc 	(codePtr),y
.158c	a8		tay				tay
.158d					_ETMCDExit:
.158d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.158e					EXPUnaryAbs:
.158e	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.1591	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.1594	20 2a 25	jsr $252a			jsr 	IFloatAbsoluteR0
.1597	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1598					EXPUnaryAsc:
.1598	20 a5 14	jsr $14a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.159b	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.159e	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.15a0	f0 06		beq $15a8			beq 	_EXAZero 						; if so return 0
.15a2	5a		phy				phy 									; otherwise get first character
.15a3	a0 01		ldy #$01			ldy 	#1
.15a5	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15a7	7a		ply				ply
.15a8					_EXAZero:
.15a8	a2 0c		ldx #$0c			ldx 	#IFR0
.15aa	20 e8 28	jsr $28e8			jsr 	IFloatSetByte
.15ad	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.15ae					EXPUnaryChr:
.15ae	20 99 14	jsr $1499			jsr 	EXPEvalInteger8 				; expr
.15b1	48		pha				pha 									; push on stack
.15b2	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.15b5	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.15b7	20 54 21	jsr $2154			jsr 	StringTempAllocate
.15ba	68		pla				pla
.15bb	20 89 21	jsr $2189			jsr 	StringTempWrite
.15be	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.15bf					EXPUnaryDec:
.15bf	20 a5 14	jsr $14a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.15c2	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.15c5	5a		phy				phy
.15c6	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.15c8	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.15cb	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.15cd	f0 3b		beq $160a			beq 	_EUDError 						; empty string
.15cf	aa		tax				tax
.15d0	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.15d2					_EUDLoop:
.15d2	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.15d4	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.15d6	90 02		bcc $15da			bcc 	_EUDNoCase
.15d8	e9 20		sbc #$20			sbc 	#$20
.15da					_EUDNoCase:
.15da	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.15dc	90 2c		bcc $160a			bcc 	_EUDError
.15de	c9 3a		cmp #$3a			cmp 	#'9'+1
.15e0	90 0a		bcc $15ec			bcc 	_EUDOkay
.15e2	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.15e4	90 24		bcc $160a			bcc 	_EUDError
.15e6	c9 47		cmp #$47			cmp 	#'F'+1
.15e8	b0 20		bcs $160a			bcs 	_EUDError
.15ea	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.15ec					_EUDOkay:
.15ec	29 0f		and #$0f			and 	#15 							; make constant
.15ee	da		phx				phx
.15ef	48		pha				pha
.15f0	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.15f2	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.15f5	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.15f8	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.15fb	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.15fe	68		pla				pla 									; pop constant and OR in
.15ff	fa		plx				plx
.1600	05 0c		ora $0c				ora 	IFR0+IM0
.1602	85 0c		sta $0c				sta 	IFR0+IM0
.1604	c8		iny				iny 									; next
.1605	ca		dex				dex
.1606	d0 ca		bne $15d2			bne 	_EUDLoop
.1608	7a		ply				ply
.1609	60		rts				rts
.160a					_EUDError:
.160a	4c 58 1f	jmp $1f58		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.160d					EXPUnaryInlineDec:
.160d	4c 38 1f	jmp $1f38		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1610					EXPUnaryNull:
.1610	20 b8 14	jsr $14b8			jsr 	EXPTermValueR0
.1613	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1614					EXPUnaryFrac:
.1614	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.1617	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.161a	20 90 25	jsr $2590			jsr 	IFloatFractionalR0
.161d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.161e					EXPUnaryInt:
.161e	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.1621	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.1624	20 e6 25	jsr $25e6			jsr 	IFloatIntegerR0
.1627	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1628					EXPUnaryLen:
.1628	20 a5 14	jsr $14a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.162b	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.162e	b2 1e		lda ($1e)			lda 	(zTemp0)
.1630	a2 0c		ldx #$0c			ldx 	#IFR0
.1632	20 e8 28	jsr $28e8			jsr 	IFloatSetByte
.1635	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1636					EXPUnaryParenthesis:
.1636	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.1639	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.163c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.163d					EXPUnaryRnd:
.163d	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 				; number to R0
.1640	20 77 20	jsr $2077			jsr 	ERRCheckRParen 				; )
.1643	a2 0c		ldx #$0c			ldx 	#IFR0
.1645	20 5c 16	jsr $165c			jsr 	EXPLoadInRandom
.1648	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.164a	85 0f		sta $0f				sta 	IFR0+IExp
.164c	60		rts				rts
.164d					ExpUnaryRand:
.164d	20 86 14	jsr $1486			jsr 	EXPEvalInteger 				; integer to R0
.1650	20 77 20	jsr $2077			jsr 	ERRCheckRParen 				; )
.1653	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.1655	20 5c 16	jsr $165c			jsr 	EXPLoadInRandom
.1658	20 57 24	jsr $2457			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.165b	60		rts				rts
.165c					EXPLoadInRandom:
.165c	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.165f	20 71 16	jsr $1671			jsr 	EXPRandom32
.1662	95 00		sta $00,x			sta 	IM0,x
.1664	20 71 16	jsr $1671			jsr 	EXPRandom32
.1667	95 01		sta $01,x			sta 	IM1,x
.1669	20 71 16	jsr $1671			jsr 	EXPRandom32
.166c	29 7f		and #$7f			and 	#$7F
.166e	95 02		sta $02,x			sta 	IM2,x
.1670	60		rts				rts
.1671					EXPRandom32:
.1671	5a		phy				phy
.1672	a0 08		ldy #$08			ldy 	#8
.1674	ad 3f 03	lda $033f			lda 	EXPSeed+0
.1677	0d 40 03	ora $0340			ora 	EXPSeed+1
.167a	0d 41 03	ora $0341			ora 	EXPSeed+2
.167d	0d 42 03	ora $0342			ora 	EXPSeed+3
.1680	d0 08		bne $168a			bne 	_EXPRNoReset
.1682	ee 3f 03	inc $033f			inc 	EXPSeed+0
.1685	a0 10		ldy #$10			ldy 	#16
.1687	8c 42 03	sty $0342			sty 	EXPSeed+3
.168a					_EXPRNoReset:
.168a	ad 3f 03	lda $033f			lda 	EXPSeed+0
.168d					_EXPRLoop:
.168d	0a		asl a				asl		a
.168e	2e 40 03	rol $0340			rol 	EXPSeed+1
.1691	2e 41 03	rol $0341			rol 	EXPSeed+2
.1694	2e 42 03	rol $0342			rol 	EXPSeed+3
.1697	90 02		bcc $169b			bcc 	_EXPRNoEOR
.1699	49 c5		eor #$c5			eor 	#$C5
.169b					_EXPRNoEOR:
.169b	88		dey				dey
.169c	d0 ef		bne $168d			bne 	_EXPRLoop
.169e	8d 3f 03	sta $033f			sta 	EXPSeed+0
.16a1	7a		ply				ply
.16a2	60		rts				rts
.033f					EXPSeed:
>033f							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.16a3					EXPUnarySgn:
.16a3	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.16a6	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.16a9	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.16ab	20 88 28	jsr $2888			jsr 	IFloatCopyToRegister
.16ae	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.16b0	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.16b3	a2 10		ldx #$10			ldx 	#IFR1
.16b5	20 b4 25	jsr $25b4			jsr 	IFloatCompare 					; compare R1 vs 0.
.16b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.16b9					EXPUnarySqr:
.16b9	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; number to R0
.16bc	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.16bf	20 32 25	jsr $2532			jsr 	IFloatSquareRootR0 				; square root.
.16c2	b0 01		bcs $16c5			bcs 	_EUSValue
.16c4	60		rts				rts
.16c5					_EUSValue:
.16c5	4c 48 1f	jmp $1f48		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.16c8					EXPUnaryHex:
.16c8	20 86 14	jsr $1486			jsr 	EXPEvalInteger 					; expr
.16cb	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.16ce	5a		phy				phy
.16cf	a9 10		lda #$10			lda 	#16
.16d1	20 87 26	jsr $2687			jsr 	IFloatIntegerToStringR0
.16d4	80 0a		bra $16e0			bra 	EUSMain
.16d6					EXPUnaryStr:
.16d6	20 7b 14	jsr $147b			jsr 	EXPEvalNumber 					; expr
.16d9	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.16dc	5a		phy				phy
.16dd	20 e3 26	jsr $26e3			jsr 	IFloatFloatToStringR0 			; convert to string
.16e0					EUSMain:
.16e0	b0 18		bcs $16fa			bcs 	_EUSError
.16e2	86 1e		stx $1e				stx 	zTemp0 							; save string address
.16e4	84 1f		sty $1f				sty 	zTemp0+1
.16e6	48		pha				pha 									; save count
.16e7	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.16e9	20 54 21	jsr $2154			jsr 	StringTempAllocate
.16ec	fa		plx				plx 									; count in X
.16ed	a0 00		ldy #$00			ldy 	#0
.16ef					_EUSCopy:
.16ef	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.16f1	c8		iny				iny
.16f2	20 89 21	jsr $2189			jsr 	StringTempWrite
.16f5	ca		dex				dex
.16f6	d0 f7		bne $16ef			bne	 	_EUSCopy
.16f8	7a		ply				ply
.16f9	60		rts				rts
.16fa					_EUSError:
.16fa	4c 48 1f	jmp $1f48		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.16fd					EXPUnaryInlineString:
.16fd	18		clc				clc 								; physical address -> IM0,1
.16fe	98		tya				tya
.16ff	65 1c		adc $1c				adc 	codePtr
.1701	85 0c		sta $0c				sta 	IFR0+IM0
.1703	a5 1d		lda $1d				lda 	codePtr+1
.1705	69 00		adc #$00			adc 	#0
.1707	85 0d		sta $0d				sta 	IFR0+IM1
.1709	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.170b	a9 80		lda #$80			lda 	#$80
.170d	85 0f		sta $0f				sta 	IFR0+IExp
.170f	98		tya				tya	 								; skip over it.
.1710	38		sec				sec
.1711	71 1c		adc ($1c),y			adc 	(codePtr),y
.1713	a8		tay				tay
.1714	60		rts				rts
.1715					_EXPUISRange:
.1715	4c 48 1f	jmp $1f48		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1718					EXPUnaryLeft:
.1718	20 5e 17	jsr $175e			jsr 	EXPCommonStart 					; <string>,
.171b	48		pha				pha 									; save string address on stack
.171c	da		phx				phx
.171d	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.171f	48		pha				pha
.1720	20 99 14	jsr $1499			jsr 	EXPEvalInteger8 				; characters to do
.1723	80 44		bra $1769			bra 	EXPSubstringCommon
.1725					EXPUnaryRight:
.1725	20 5e 17	jsr $175e			jsr 	EXPCommonStart 					; <string>,
.1728	48		pha				pha 									; save string address on stack
.1729	da		phx				phx
.172a	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.172c	48		pha				pha
.172d	20 99 14	jsr $1499			jsr 	EXPEvalInteger8 				; characters to do
.1730	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.1732	68		pla				pla
.1733	38		sec				sec
.1734	e5 1e		sbc $1e				sbc 	zTemp0
.1736	b0 02		bcs $173a			bcs 	_EUROffLeft
.1738	a9 00		lda #$00			lda 	#0
.173a					_EUROffLeft:
.173a	48		pha				pha 									; start pos
.173b	a9 ff		lda #$ff			lda 	#255
.173d	80 2a		bra $1769			bra 	EXPSubstringCommon
.173f					EXPUnaryMid:
.173f	20 5e 17	jsr $175e			jsr 	EXPCommonStart 					; <string>,
.1742	48		pha				pha 									; save string address on stack
.1743	da		phx				phx
.1744	20 99 14	jsr $1499			jsr 	EXPEvalInteger8 				; characters start
.1747	f0 12		beq $175b			beq 	_EUSError 						; 1 is left
.1749	3a		dec a				dec 	a 								; zero based.
.174a	48		pha				pha
.174b	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.174d	c9 99		cmp #$99			cmp 	#PR_COMMA
.174f	f0 04		beq $1755			beq 	_EUMLength 						; if so m is provided
.1751	a9 ff		lda #$ff			lda 	#255 							; default m
.1753	80 14		bra $1769			bra 	EXPSubstringCommon
.1755					_EUMLength:
.1755	c8		iny				iny 									; consume comma
.1756	20 99 14	jsr $1499			jsr 	EXPEvalInteger8 				; characters to do
.1759	80 0e		bra $1769			bra 	EXPSubstringCommon
.175b					_EUSError:
.175b	4c 58 1f	jmp $1f58		jmp	ErrorV_value
.175e					EXPCommonStart:
.175e	20 a5 14	jsr $14a5			jsr 	EXPEvalString
.1761	20 7f 20	jsr $207f			jsr 	ERRCheckComma
.1764	a5 0c		lda $0c				lda 	IFR0+IM0
.1766	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1768	60		rts				rts
.1769					EXPSubstringCommon:
.1769	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.176b	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; check right bracket.
.176e	68		pla				pla 									; start position
.176f	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.1771	fa		plx				plx 									; get string address to zTemp2.
.1772	86 23		stx $23				stx 	zTemp2+1
.1774	68		pla				pla
.1775	85 22		sta $22				sta 	zTemp2
.1777	38		sec				sec 									; length - start is the max count of chars
.1778	b2 22		lda ($22)			lda 	(zTemp2)
.177a	e5 21		sbc $21				sbc 	zTemp1+1
.177c	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.177e	b0 02		bcs $1782			bcs 	_EXPSSNoTrim
.1780	85 20		sta $20				sta 	zTemp1 							; update count with available
.1782					_EXPSSNoTrim:
.1782	a5 20		lda $20				lda 	zTemp1 							; chars required.
.1784	20 54 21	jsr $2154			jsr 	StringTempAllocate 				; allocate memory for it.
.1787	a5 20		lda $20				lda 	zTemp1 							; zero length string
.1789	f0 15		beq $17a0			beq 	_EXPSSExit
.178b	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.178d	d2 22		cmp ($22)			cmp 	(zTemp2)
.178f	b0 0f		bcs $17a0			bcs 	_EXPSSExit
.1791	5a		phy				phy
.1792	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.1794	c8		iny				iny 									; +1 for the length byte
.1795					_EXPSSCopy:
.1795	b1 22		lda ($22),y			lda 	(zTemp2),y
.1797	20 89 21	jsr $2189			jsr 	StringTempWrite
.179a	c8		iny				iny
.179b	c6 20		dec $20				dec 	zTemp1
.179d	d0 f6		bne $1795			bne 	_EXPSSCopy
.179f	7a		ply				ply
.17a0					_EXPSSExit:
.17a0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.17a1					EXPUnaryVal:
.17a1	20 a5 14	jsr $14a5			jsr 	EXPEvalString 					; string to R0, zTemp0
.17a4	20 77 20	jsr $2077			jsr 	ERRCheckRParen 					; )
.17a7	5a		phy				phy
.17a8	18		clc				clc
.17a9	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.17ab	69 01		adc #$01			adc 	#1
.17ad	aa		tax				tax
.17ae	a5 1f		lda $1f				lda 	zTemp0+1
.17b0	69 00		adc #$00			adc 	#0
.17b2	a8		tay				tay
.17b3	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.17b5	20 4a 27	jsr $274a			jsr 	IFloatStringToFloatR0 			; do conversion
.17b8	b0 02		bcs $17bc			bcs 	_EUVError
.17ba	7a		ply				ply
.17bb	60		rts				rts
.17bc					_EUVError:
.17bc	4c 58 1f	jmp $1f58		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.17bf					BinaryPrecedence:
>17bf	02					.byte	 2	; $ef =
>17c0	02					.byte	 2	; $f0 <>
>17c1	02					.byte	 2	; $f1 <=
>17c2	02					.byte	 2	; $f2 <
>17c3	02					.byte	 2	; $f3 >=
>17c4	02					.byte	 2	; $f4 >
>17c5	01					.byte	 1	; $f5 XOR
>17c6	01					.byte	 1	; $f6 OR
>17c7	01					.byte	 1	; $f7 AND
>17c8	04					.byte	 4	; $f8 DIV
>17c9	04					.byte	 4	; $f9 MOD
>17ca	04					.byte	 4	; $fa <<
>17cb	04					.byte	 4	; $fb >>
>17cc	04					.byte	 4	; $fc /
>17cd	04					.byte	 4	; $fd *
>17ce	03					.byte	 3	; $fe -
>17cf	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.17d0					StandardTokens:
>17d0	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>17d7	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>17dd	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>17e3	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>17e8	02 49 46				.byte	$02,$49,$46                             	; $84 if
>17eb	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>17f1	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>17f4	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>17f9	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>17fe	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1806	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>180a	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>180f	00					.byte	$00                                     	; $8c [[end]]
>1810	00					.byte	$00                                     	; $8d [[shift]]
>1811	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1816	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>181b	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>181e	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1823	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1827	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>182d	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1833	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1838	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>183c	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1840	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1845	01 2c					.byte	$01,$2c                                 	; $99 ,
>1847	01 3b					.byte	$01,$3b                                 	; $9a ;
>1849	01 3a					.byte	$01,$3a                                 	; $9b :
>184b	01 27					.byte	$01,$27                                 	; $9c '
>184d	01 29					.byte	$01,$29                                 	; $9d )
>184f	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1853	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1859	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>185d	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1861	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1866	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>186a	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1871	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1876	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>187b	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1880	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1885	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>188a	00					.byte	0											; $aa
>188b	00					.byte	0											; $ab
>188c	00					.byte	0											; $ac
>188d	00					.byte	0											; $ad
>188e	00					.byte	0											; $ae
>188f	00					.byte	0											; $af
>1890	00					.byte	0											; $b0
>1891	00					.byte	0											; $b1
>1892	00					.byte	0											; $b2
>1893	00					.byte	0											; $b3
>1894	00					.byte	0											; $b4
>1895	00					.byte	0											; $b5
>1896	00					.byte	0											; $b6
>1897	00					.byte	0											; $b7
>1898	00					.byte	0											; $b8
>1899	00					.byte	0											; $b9
>189a	00					.byte	0											; $ba
>189b	00					.byte	0											; $bb
>189c	00					.byte	0											; $bc
>189d	00					.byte	0											; $bd
>189e	00					.byte	0											; $be
>189f	00					.byte	0											; $bf
>18a0	00					.byte	0											; $c0
>18a1	00					.byte	0											; $c1
>18a2	00					.byte	0											; $c2
>18a3	00					.byte	0											; $c3
>18a4	00					.byte	0											; $c4
>18a5	00					.byte	0											; $c5
>18a6	00					.byte	0											; $c6
>18a7	00					.byte	0											; $c7
>18a8	00					.byte	0											; $c8
>18a9	00					.byte	0											; $c9
>18aa	00					.byte	0											; $ca
>18ab	00					.byte	0											; $cb
>18ac	00					.byte	0											; $cc
>18ad	00					.byte	0											; $cd
>18ae	00					.byte	0											; $ce
>18af	00					.byte	0											; $cf
>18b0	00					.byte	0											; $d0
>18b1	00					.byte	0											; $d1
>18b2	00					.byte	0											; $d2
>18b3	00					.byte	0											; $d3
>18b4	00					.byte	0											; $d4
>18b5	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>18bb	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>18c1	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>18c9	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>18d0	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>18d6	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>18dc	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>18e1	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>18e6	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>18eb	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>18f0	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>18f5	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>18fb	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1900	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1908	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>190f	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1914	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1919	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>191f	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1924	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>192a	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>192f	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1935	01 28					.byte	$01,$28                                 	; $eb (
>1937	01 24					.byte	$01,$24                                 	; $ec $
>1939	00					.byte	$00                                     	; $ed [[decimal]]
>193a	00					.byte	$00                                     	; $ee [[string]]
>193b	01 3d					.byte	$01,$3d                                 	; $ef =
>193d	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1940	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1943	01 3c					.byte	$01,$3c                                 	; $f2 <
>1945	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1948	01 3e					.byte	$01,$3e                                 	; $f4 >
>194a	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>194e	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1951	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1955	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1959	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>195d	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1960	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1963	01 2f					.byte	$01,$2f                                 	; $fc /
>1965	01 2a					.byte	$01,$2a                                 	; $fd *
>1967	01 2d					.byte	$01,$2d                                 	; $fe -
>1969	01 2b					.byte	$01,$2b                                 	; $ff +
>196b	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.196c					VectorTable:
>196c	c4 29					.word	NotImplemented           ; $80 REPEAT
>196e	c4 29					.word	NotImplemented           ; $81 UNTIL
>1970	c4 29					.word	NotImplemented           ; $82 WHILE
>1972	c4 29					.word	NotImplemented           ; $83 WEND
>1974	c4 29					.word	NotImplemented           ; $84 IF
>1976	c4 29					.word	NotImplemented           ; $85 ENDIF
>1978	c4 29					.word	NotImplemented           ; $86 DO
>197a	c4 29					.word	NotImplemented           ; $87 LOOP
>197c	c4 29					.word	NotImplemented           ; $88 PROC
>197e	c4 29					.word	NotImplemented           ; $89 ENDPROC
>1980	c4 29					.word	NotImplemented           ; $8a FOR
>1982	c4 29					.word	NotImplemented           ; $8b NEXT
>1984	74 12					.word	RUNEndOfLine             ; $8c [[END]]
>1986	b2 12					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1988	c4 29					.word	NotImplemented           ; $8e ELSE
>198a	bb 12					.word	NoExec01                 ; $8f THEN
>198c	bb 12					.word	NoExec02                 ; $90 TO
>198e	bb 12					.word	NoExec03                 ; $91 STEP
>1990	da 11					.word	CommandLET               ; $92 LET
>1992	75 11					.word	Command_Print            ; $93 PRINT
>1994	c4 29					.word	NotImplemented           ; $94 INPUT
>1996	c4 29					.word	NotImplemented           ; $95 CALL
>1998	c4 29					.word	NotImplemented           ; $96 SYS
>199a	5b 12					.word	Command_REM              ; $97 REM
>199c	c4 29					.word	NotImplemented           ; $98 EXIT
>199e	bb 12					.word	NoExec04                 ; $99 ,
>19a0	bb 12					.word	NoExec05                 ; $9a ;
>19a2	bb 12					.word	NoExec06                 ; $9b :
>19a4	5b 12					.word	Command_REM2             ; $9c '
>19a6	bb 12					.word	NoExec07                 ; $9d )
>19a8	58 10					.word	CommandDIM               ; $9e DIM
>19aa	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>19ac	52 12					.word	Command_NEW              ; $a0 NEW
>19ae	68 12					.word	Command_RUN              ; $a1 RUN
>19b0	b8 12					.word	Command_STOP             ; $a2 STOP
>19b2	b5 12					.word	Command_END              ; $a3 END
>19b4	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>19b6	c4 29					.word	NotImplemented           ; $a5 LIST
>19b8	c4 29					.word	NotImplemented           ; $a6 SAVE
>19ba	c4 29					.word	NotImplemented           ; $a7 LOAD
>19bc	c4 29					.word	NotImplemented           ; $a8 POKE
>19be	c4 29					.word	NotImplemented           ; $a9 DOKE
>19c0	c4 29					.word	NotImplemented           ; $aa
>19c2	c4 29					.word	NotImplemented           ; $ab
>19c4	c4 29					.word	NotImplemented           ; $ac
>19c6	c4 29					.word	NotImplemented           ; $ad
>19c8	c4 29					.word	NotImplemented           ; $ae
>19ca	c4 29					.word	NotImplemented           ; $af
>19cc	c4 29					.word	NotImplemented           ; $b0
>19ce	c4 29					.word	NotImplemented           ; $b1
>19d0	c4 29					.word	NotImplemented           ; $b2
>19d2	c4 29					.word	NotImplemented           ; $b3
>19d4	c4 29					.word	NotImplemented           ; $b4
>19d6	c4 29					.word	NotImplemented           ; $b5
>19d8	c4 29					.word	NotImplemented           ; $b6
>19da	c4 29					.word	NotImplemented           ; $b7
>19dc	c4 29					.word	NotImplemented           ; $b8
>19de	c4 29					.word	NotImplemented           ; $b9
>19e0	c4 29					.word	NotImplemented           ; $ba
>19e2	c4 29					.word	NotImplemented           ; $bb
>19e4	c4 29					.word	NotImplemented           ; $bc
>19e6	c4 29					.word	NotImplemented           ; $bd
>19e8	c4 29					.word	NotImplemented           ; $be
>19ea	c4 29					.word	NotImplemented           ; $bf
>19ec	c4 29					.word	NotImplemented           ; $c0
>19ee	c4 29					.word	NotImplemented           ; $c1
>19f0	c4 29					.word	NotImplemented           ; $c2
>19f2	c4 29					.word	NotImplemented           ; $c3
>19f4	c4 29					.word	NotImplemented           ; $c4
>19f6	c4 29					.word	NotImplemented           ; $c5
>19f8	c4 29					.word	NotImplemented           ; $c6
>19fa	c4 29					.word	NotImplemented           ; $c7
>19fc	c4 29					.word	NotImplemented           ; $c8
>19fe	c4 29					.word	NotImplemented           ; $c9
>1a00	c4 29					.word	NotImplemented           ; $ca
>1a02	c4 29					.word	NotImplemented           ; $cb
>1a04	c4 29					.word	NotImplemented           ; $cc
>1a06	c4 29					.word	NotImplemented           ; $cd
>1a08	c4 29					.word	NotImplemented           ; $ce
>1a0a	c4 29					.word	NotImplemented           ; $cf
>1a0c	c4 29					.word	NotImplemented           ; $d0
>1a0e	c4 29					.word	NotImplemented           ; $d1
>1a10	c4 29					.word	NotImplemented           ; $d2
>1a12	c4 29					.word	NotImplemented           ; $d3
>1a14	c4 29					.word	NotImplemented           ; $d4
>1a16	c4 29					.word	NotImplemented           ; $d5 DEEK(
>1a18	c4 29					.word	NotImplemented           ; $d6 PEEK(
>1a1a	25 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1a1c	18 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1a1e	3f 17					.word	EXPUnaryMid              ; $d9 MID$(
>1a20	d6 16					.word	EXPUnaryStr              ; $da STR$(
>1a22	a1 17					.word	EXPUnaryVal              ; $db VAL(
>1a24	a3 16					.word	EXPUnarySgn              ; $dc SGN(
>1a26	8e 15					.word	EXPUnaryAbs              ; $dd ABS(
>1a28	28 16					.word	EXPUnaryLen              ; $de LEN(
>1a2a	b9 16					.word	EXPUnarySqr              ; $df SQR(
>1a2c	ae 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1a2e	98 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1a30	c4 29					.word	NotImplemented           ; $e2 INKEY$(
>1a32	c4 29					.word	NotImplemented           ; $e3 EVENT(
>1a34	c4 29					.word	NotImplemented           ; $e4 TIME
>1a36	1e 16					.word	EXPUnaryInt              ; $e5 INT(
>1a38	14 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1a3a	bf 15					.word	EXPUnaryDec              ; $e7 DEC(
>1a3c	c8 16					.word	EXPUnaryHex              ; $e8 HEX$(
>1a3e	3d 16					.word	EXPUnaryRnd              ; $e9 RND(
>1a40	4d 16					.word	ExpUnaryRand             ; $ea RAND(
>1a42	36 16					.word	EXPUnaryParenthesis      ; $eb (
>1a44	10 16					.word	EXPUnaryNull             ; $ec $
>1a46	0d 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1a48	fd 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1a4a	78 13					.word	EXPCompareEqual          ; $ef =
>1a4c	93 13					.word	EXPCompareNotEqual       ; $f0 <>
>1a4e	9c 13					.word	EXPCompareLessEqual      ; $f1 <=
>1a50	81 13					.word	EXPCompareLess           ; $f2 <
>1a52	a5 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1a54	8a 13					.word	EXPCompareGreater        ; $f4 >
>1a56	25 13					.word	EXPBinXor                ; $f5 XOR
>1a58	19 13					.word	EXPBinOr                 ; $f6 OR
>1a5a	0d 13					.word	EXPBinAnd                ; $f7 AND
>1a5c	e5 12					.word	EXPBinIDiv               ; $f8 DIV
>1a5e	f6 12					.word	EXPBinIMod               ; $f9 MOD
>1a60	f0 13					.word	EXPBinLeft               ; $fa <<
>1a62	f8 13					.word	EXPBinRight              ; $fb >>
>1a64	d9 12					.word	EXPBinFDiv               ; $fc /
>1a66	d0 12					.word	EXPBinMul                ; $fd *
>1a68	c7 12					.word	EXPBinSub                ; $fe -
>1a6a	be 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1a6c					TOKDetokenise:
.1a6c	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1a6e	84 23		sty $23				sty 	zTemp2+1
.1a70	9c 45 03	stz $0345			stz		TOKLastCharacter 			; clear last character
.1a73					_TOKDLoop:
.1a73	20 a2 1a	jsr $1aa2			jsr 	TOKDGet 					; get next
.1a76	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1a78	f0 26		beq $1aa0			beq 	_TOKDExit
.1a7a	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1a7c	f0 1d		beq $1a9b			beq 	_TOKDDataItem
.1a7e	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1a80	f0 19		beq $1a9b			beq 	_TOKDDataItem
.1a82	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1a84	10 05		bpl $1a8b			bpl 	_TOKDNotToken
.1a86	20 6a 1b	jsr $1b6a			jsr 	TOKDToken 					; token to text.
.1a89	80 e8		bra $1a73			bra 	_TOKDLoop
.1a8b					_TOKDNotToken:
.1a8b	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1a8d	90 05		bcc $1a94			bcc 	_TOKDNotIdentifier
.1a8f	20 dd 1a	jsr $1add			jsr 	TOKDIdentifier
.1a92	80 df		bra $1a73			bra 	_TOKDLoop
.1a94					_TOKDNotIdentifier:
.1a94	a0 0a		ldy #$0a			ldy 	#10
.1a96	20 26 1b	jsr $1b26			jsr 	TOKDInteger
.1a99	80 d8		bra $1a73			bra 	_TOKDLoop
.1a9b					_TOKDDataItem:
.1a9b	20 b8 1a	jsr $1ab8			jsr 	TOKDDataItem
.1a9e	80 d3		bra $1a73			bra 	_TOKDLoop
.1aa0					_TOKDExit:
.1aa0	18		clc				clc
.1aa1	60		rts				rts
.1aa2	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1aa4	e6 22		inc $22				inc 	zTemp2
.1aa6	d0 02		bne $1aaa			bne 	_TKDGExit
.1aa8	e6 23		inc $23				inc 	zTemp2+1
.1aaa					_TKDGExit:
.1aaa	60		rts				rts
.1aab					TOKDOutput:
.1aab	8d 45 03	sta $0345			sta 	TOKLastCharacter
.1aae	6c 43 03	jmp ($0343)			jmp 	(TOKOutputMethod)
.1ab1					TOKSetDetokeniseOutput:
.1ab1	8e 43 03	stx $0343			stx 	TOKOutputMethod
.1ab4	8c 44 03	sty $0344			sty 	TOKOutputMethod+1
.1ab7	60		rts				rts
.0343					TOKOutputMethod:
>0343							.fill 	2
.0345					TOKLastCharacter:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1ab8					TOKDDataItem:
.1ab8	a8		tay				tay 								; type in Y
.1ab9	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1abb	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1abd	f0 02		beq $1ac1			beq 	_TOKDDIsString
.1abf	a9 2e		lda #$2e			lda 	#'.'
.1ac1					_TOKDDIsString:
.1ac1	20 ab 1a	jsr $1aab			jsr 	TOKDOutput 					; dump it
.1ac4	20 a2 1a	jsr $1aa2			jsr 	TOKDGet 					; get length into X
.1ac7	aa		tax				tax
.1ac8					_TOKDDOutput:
.1ac8	ca		dex				dex 								; are we complete
.1ac9	30 08		bmi $1ad3			bmi 	_TOKDDEnd
.1acb	20 a2 1a	jsr $1aa2			jsr 	TOKDGet 					; get character and output it
.1ace	20 ab 1a	jsr $1aab			jsr 	TOKDOutput
.1ad1	80 f5		bra $1ac8			bra 	_TOKDDOutput
.1ad3					_TOKDDEnd:
.1ad3	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1ad5	d0 05		bne $1adc			bne 	_TOKDDNotString
.1ad7	a9 22		lda #$22			lda 	#'"'
.1ad9	20 ab 1a	jsr $1aab			jsr 	TOKDOutput
.1adc					_TOKDDNotString:
.1adc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1add					TOKDIdentifier:
.1add	a0 ff		ldy #$ff			ldy 	#$FF
.1adf	8c 46 03	sty $0346			sty 	TOKDIFirstChar
.1ae2					_TOKDLoop:
.1ae2	a8		tay				tay 								; token in Y
.1ae3	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1ae5	c0 64		cpy #$64			cpy 	#$64
.1ae7	f0 11		beq $1afa			beq 	_TOKDIOutput
.1ae9	a9 5f		lda #$5f			lda 	#'_'
.1aeb	c0 65		cpy #$65			cpy 	#$65
.1aed	f0 0b		beq $1afa			beq 	_TOKDIOutput
.1aef	98		tya				tya 								; handle a-z
.1af0	18		clc				clc
.1af1	69 21		adc #$21			adc	 	#$21
.1af3	c0 5a		cpy #$5a			cpy 	#$5A
.1af5	90 03		bcc $1afa			bcc 	_TOKDIOutput
.1af7	38		sec				sec 								; handle 0-9
.1af8	e9 4b		sbc #$4b			sbc 	#$4B
.1afa					_TOKDIOutput:
.1afa	2c 46 03	bit $0346			bit 	TOKDIFirstChar
.1afd	10 08		bpl $1b07			bpl 	_TOKDINoSpacing
.1aff	48		pha				pha
.1b00	20 9c 1b	jsr $1b9c			jsr 	TOKDSpacing
.1b03	9c 46 03	stz $0346			stz 	TOKDIFirstChar
.1b06	68		pla				pla
.1b07					_TOKDINoSpacing:
.1b07	20 ab 1a	jsr $1aab			jsr 	TOKDOutput
.1b0a	20 a2 1a	jsr $1aa2			jsr 	TOKDGet 					; get next token
.1b0d	c9 7c		cmp #$7c			cmp 	#$7C
.1b0f	90 d1		bcc $1ae2			bcc 	_TOKDLoop
.1b11	f0 12		beq $1b25			beq 	_TOKDIExit 					; it's a number, no tail.
.1b13	4a		lsr a				lsr 	a 							; string ?
.1b14	90 07		bcc $1b1d			bcc 	_TOKDICheckArray
.1b16	48		pha				pha
.1b17	a9 24		lda #$24			lda 	#"$"
.1b19	20 ab 1a	jsr $1aab			jsr 	TOKDOutput
.1b1c	68		pla				pla
.1b1d					_TOKDICheckArray:
.1b1d	4a		lsr a				lsr 	a 							; array ?
.1b1e	90 05		bcc $1b25			bcc 	_TOKDIExit
.1b20	a9 28		lda #$28			lda 	#"("
.1b22	20 ab 1a	jsr $1aab			jsr 	TOKDOutput
.1b25					_TOKDIExit:
.1b25	60		rts				rts
.0346					TOKDIFirstChar:
>0346							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1b26					TOKDInteger:
.1b26	5a		phy				phy 								; save base
.1b27	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1b29	20 e8 28	jsr $28e8			jsr 	IFloatSetByte
.1b2c					_TOKDILoop:
.1b2c	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1b2e	c9 40		cmp #$40			cmp 	#$40
.1b30	b0 1d		bcs $1b4f			bcs 	_TOKDIHaveInteger
.1b32	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1b34	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1b37	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1b3a	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1b3d	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1b40	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1b43	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1b46	20 a2 1a	jsr $1aa2			jsr 	TOKDGet 					; OR byte in.
.1b49	05 0c		ora $0c				ora 	IFR0+IM0
.1b4b	85 0c		sta $0c				sta 	IFR0+IM0
.1b4d	80 dd		bra $1b2c			bra 	_TOKDILoop
.1b4f					_TOKDIHaveInteger:
.1b4f	7a		ply				ply 								; restore base
.1b50	98		tya				tya 								; base in A
.1b51	20 87 26	jsr $2687			jsr 	IFloatIntegerToStringR0
.1b54	86 1e		stx $1e				stx 	zTemp0
.1b56	84 1f		sty $1f				sty 	zTemp0+1
.1b58	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b5a	20 9c 1b	jsr $1b9c			jsr 	TOKDSpacing 				; check spacing okay.
.1b5d	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1b5f					_TOKDOutput:
.1b5f	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b61	20 ab 1a	jsr $1aab			jsr 	TOKDOutput
.1b64	c8		iny				iny
.1b65	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b67	d0 f6		bne $1b5f			bne 	_TOKDOutput
.1b69	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1b6a					TOKDToken:
.1b6a	a2 d0		ldx #$d0			ldx 	#StandardTokens & $FF
.1b6c	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1b6e					_TOKDSearch:
.1b6e	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1b70	84 1f		sty $1f				sty 	zTemp0+1
.1b72	aa		tax				tax 								; token ID in X.
.1b73					_TOKDFind:
.1b73	ca		dex				dex 								; reached the start
.1b74	10 0d		bpl $1b83			bpl 	_TOKDFound
.1b76	38		sec				sec 								; go to next entry
.1b77	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b79	65 1e		adc $1e				adc 	zTemp0
.1b7b	85 1e		sta $1e				sta 	zTemp0
.1b7d	90 f4		bcc $1b73			bcc 	_TOKDFind
.1b7f	e6 1f		inc $1f				inc 	zTemp0+1
.1b81	80 f0		bra $1b73			bra 	_TOKDFind
.1b83					_TOKDFound:
.1b83	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1b85	f0 14		beq $1b9b			beq 	_TOKDExit
.1b87	aa		tax				tax
.1b88	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1b8a	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1b8c	20 9c 1b	jsr $1b9c			jsr 	TOKDSpacing
.1b8f					_TOKDOutput:
.1b8f	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1b91	20 f3 1e	jsr $1ef3			jsr 	TOKToLower
.1b94	20 ab 1a	jsr $1aab			jsr 	TOKDOutput
.1b97	c8		iny				iny
.1b98	ca		dex				dex
.1b99	d0 f4		bne $1b8f			bne 	_TOKDOutput
.1b9b					_TOKDExit:
.1b9b	60		rts				rts
.1b9c					TOKDSpacing:
.1b9c	20 0a 1f	jsr $1f0a			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1b9f	90 0d		bcc $1bae			bcc 	_TOKDSExit
.1ba1	ad 45 03	lda $0345			lda 	TOKLastCharacter			; and last character also alphanumeric
.1ba4	20 0a 1f	jsr $1f0a			jsr 	TOKIsIdentifierElement
.1ba7	90 05		bcc $1bae			bcc 	_TOKDSExit
.1ba9	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1bab	20 ab 1a	jsr $1aab			jsr 	TOKDOutput
.1bae					_TOKDSExit:
.1bae	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1baf					PGMDeleteLine:
.1baf	20 62 1c	jsr $1c62			jsr 	PGMEndProgram 				; end of program into zTemp0
.1bb2	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1bb4	ad 47 03	lda $0347			lda 	PGMBaseHigh
.1bb7	85 21		sta $21				sta 	zTemp1+1
.1bb9					_PGMDLoop:
.1bb9	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1bbb	38		sec				sec
.1bbc	f0 3a		beq $1bf8			beq 	_PGMDExit
.1bbe	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1bc0	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bc2	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1bc5	d0 08		bne $1bcf			bne 	_PGMDNext
.1bc7	c8		iny				iny
.1bc8	b1 20		lda ($20),y			lda 	(zTemp1),y
.1bca	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1bcd	f0 0d		beq $1bdc			beq 	_PGMDDelete
.1bcf					_PGMDNext:
.1bcf	18		clc				clc
.1bd0	b2 20		lda ($20)			lda 	(zTemp1)
.1bd2	65 20		adc $20				adc 	zTemp1
.1bd4	85 20		sta $20				sta 	zTemp1
.1bd6	90 e1		bcc $1bb9			bcc 	_PGMDLoop
.1bd8	e6 21		inc $21				inc 	zTemp1+1
.1bda	80 dd		bra $1bb9			bra 	_PGMDLoop
.1bdc					_PGMDDelete:
.1bdc	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1bde	a8		tay				tay
.1bdf					_PGMDCopy:
.1bdf	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1be1	92 20		sta ($20)			sta 	(zTemp1)
.1be3	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1be5	c5 1e		cmp $1e				cmp 	zTemp0
.1be7	d0 07		bne $1bf0			bne 	_PGMDNext2
.1be9	a5 21		lda $21				lda 	zTemp1+1
.1beb	c5 1f		cmp $1f				cmp 	zTemp0+1
.1bed	18		clc				clc
.1bee	f0 08		beq $1bf8			beq 	_PGMDExit
.1bf0					_PGMDNext2:
.1bf0	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1bf2	d0 eb		bne $1bdf			bne 	_PGMDCopy
.1bf4	e6 21		inc $21				inc 	zTemp1+1
.1bf6	80 e7		bra $1bdf			bra 	_PGMDCopy
.1bf8					_PGMDExit:
.1bf8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1bf9					PGMInsertLine:
.1bf9	20 62 1c	jsr $1c62			jsr 	PGMEndProgram 				; end of program into zTemp0
.1bfc	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1bfe	ad 47 03	lda $0347			lda 	PGMBaseHigh
.1c01	85 21		sta $21				sta 	zTemp1+1
.1c03					_PGMILoop:
.1c03	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c05	f0 1c		beq $1c23			beq 	_PGMIInsert
.1c07	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c09	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c0b	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c0e	c8		iny				iny
.1c0f	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c11	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1c14	b0 0d		bcs $1c23			bcs 	_PGMIInsert 				; insert here.
.1c16	18		clc				clc
.1c17	b2 20		lda ($20)			lda 	(zTemp1)
.1c19	65 20		adc $20				adc 	zTemp1
.1c1b	85 20		sta $20				sta 	zTemp1
.1c1d	90 e4		bcc $1c03			bcc 	_PGMILoop
.1c1f	e6 21		inc $21				inc 	zTemp1+1
.1c21	80 e0		bra $1c03			bra 	_PGMILoop
.1c23					_PGMIInsert:
.1c23	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1c26					_PGMIInsertLoop:
.1c26	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c28	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1c2a	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1c2c	c5 1e		cmp $1e				cmp 	zTemp0
.1c2e	d0 06		bne $1c36			bne 	_PGMINext
.1c30	a5 21		lda $21				lda 	zTemp1+1
.1c32	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c34	f0 0a		beq $1c40			beq 	_PGMIInserted
.1c36					_PGMINext:
.1c36	a5 1e		lda $1e				lda 	zTemp0
.1c38	d0 02		bne $1c3c			bne 	_PGMINoBorrow
.1c3a	c6 1f		dec $1f				dec 	zTemp0+1
.1c3c					_PGMINoBorrow:
.1c3c	c6 1e		dec $1e				dec 	zTemp0
.1c3e	80 e6		bra $1c26			bra 	_PGMIInsertLoop
.1c40					_PGMIInserted:
.1c40	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1c42					_PGMICopyLoop:
.1c42	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1c45	91 20		sta ($20),y			sta 	(zTemp1),y
.1c47	c8		iny				iny
.1c48	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1c4b	d0 f5		bne $1c42			bne 	_PGMICopyLoop
.1c4d	18		clc				clc
.1c4e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1c4f					PGMSetBaseAddress:
.1c4f	8e 47 03	stx $0347			stx 	PGMBaseHigh
.1c52	8c 48 03	sty $0348			sty 	PGMEndMemoryHigh
.1c55	60		rts				rts
.1c56					PGMNewProgram:
.1c56	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1c58	ad 47 03	lda $0347			lda 	PGMBaseHigh
.1c5b	85 1f		sta $1f				sta 	zTemp0+1
.1c5d	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1c5f	92 1e		sta ($1e)			sta 	(zTemp0)
.1c61	60		rts				rts
.1c62					PGMEndProgram:
.1c62	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1c64	ad 47 03	lda $0347			lda 	PGMBaseHigh
.1c67	85 1f		sta $1f				sta 	zTemp0+1
.1c69					_PGMEPLoop:
.1c69	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c6b	f0 0b		beq $1c78			beq 	_PGMEPExit
.1c6d	18		clc				clc
.1c6e	65 1e		adc $1e				adc 	zTemp0
.1c70	85 1e		sta $1e				sta 	zTemp0
.1c72	90 f5		bcc $1c69			bcc 	_PGMEPLoop
.1c74	e6 1f		inc $1f				inc 	zTemp0+1
.1c76	80 f1		bra $1c69			bra 	_PGMEPLoop
.1c78					_PGMEPExit:
.1c78	60		rts				rts
.0347					PGMBaseHigh:
>0347							.fill 	1
.0348					PGMEndMemoryHigh:
>0348							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1c79					TOKResetElement:
.1c79	9c 49 03	stz $0349			stz 	TOKElement
.1c7c	60		rts				rts
.1c7d					TOKWriteElement:
.1c7d	da		phx				phx
.1c7e	ae 49 03	ldx $0349			ldx 	TOKElement
.1c81	9d 4a 03	sta $034a,x			sta 	TOKElementText,x
.1c84	9e 4b 03	stz $034b,x			stz 	TOKElementText+1,x
.1c87	fa		plx				plx
.1c88	ee 49 03	inc $0349			inc 	TOKElement
.1c8b	60		rts				rts
.0349					TOKElement:
>0349							.fill 	1
.034a					TOKElementText:
>034a							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1c8c					TOKTokeniseConstant:
.1c8c	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1c8e	48		pha				pha 								; save on stack
.1c8f	29 c0		and #$c0			and 	#$C0
.1c91	05 0d		ora $0d				ora 	IFR0+IM1
.1c93	05 0e		ora $0e				ora 	IFR0+IM2
.1c95	f0 10		beq $1ca7			beq 	_TTCLess
.1c97	da		phx				phx
.1c98	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1c9a					_TTCShiftRight:
.1c9a	46 0e		lsr $0e				lsr 	IFR0+IM2
.1c9c	66 0d		ror $0d				ror 	IFR0+IM1
.1c9e	66 0c		ror $0c				ror 	IFR0+IM0
.1ca0	ca		dex				dex
.1ca1	d0 f7		bne $1c9a			bne 	_TTCShiftRight
.1ca3	fa		plx				plx
.1ca4	20 8c 1c	jsr $1c8c			jsr 	TOKTokeniseConstant
.1ca7					_TTCLess:
.1ca7	68		pla				pla
.1ca8	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1caa	20 46 1d	jsr $1d46			jsr 	TOKWriteA
.1cad	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1cae					TOKTokeniseDecimals:
.1cae	20 56 1d	jsr $1d56			jsr 	TOKGetNext 					; consume the .
.1cb1	20 80 1e	jsr $1e80			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1cb4	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1cb6	20 46 1d	jsr $1d46			jsr 	TOKWriteA
.1cb9	20 be 1c	jsr $1cbe			jsr 	TOKOutputElementBuffer 		; then the buffer
.1cbc	18		clc				clc
.1cbd	60		rts				rts
.1cbe					TOKOutputElementBuffer:
.1cbe	ad 49 03	lda $0349			lda 	TOKElement 					; get count and write that
.1cc1	20 46 1d	jsr $1d46			jsr 	TOKWriteA
.1cc4	a8		tay				tay 								; put in Y
.1cc5	f0 0c		beq $1cd3			beq 	_TOEExit 					; exit if empty which is okay.
.1cc7	a2 01		ldx #$01			ldx 	#1
.1cc9					_TOELoop:
.1cc9	bd 49 03	lda $0349,x			lda 	TOKElement,x
.1ccc	20 46 1d	jsr $1d46			jsr 	TOKWriteA
.1ccf	e8		inx				inx
.1cd0	88		dey				dey
.1cd1	d0 f6		bne $1cc9			bne 	_TOELoop
.1cd3					_TOEExit:
.1cd3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1cd4					TOKTokenise:
.1cd4	8c 4a 04	sty $044a			sty 	TOKDataSource+1 			; save source routine pointer
.1cd7	8e 49 04	stx $0449			stx 	TOKDataSource
.1cda	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1cdc	2a		rol a				rol  	a
.1cdd	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1ce0	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1ce2	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1ce5					_TOKMainLoop:
.1ce5	20 52 1d	jsr $1d52			jsr 	TOKGet 						; what follows.
.1ce8	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1cea	f0 51		beq $1d3d			beq 	_TOKExit
.1cec	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1cee	d0 05		bne $1cf5			bne 	_TOKElement
.1cf0	20 56 1d	jsr $1d56			jsr 	TOKGetNext
.1cf3	80 f0		bra $1ce5			bra 	_TOKMainLoop
.1cf5					_TOKElement:
.1cf5	20 fe 1e	jsr $1efe			jsr 	TOKIsDigit 					; is it 0..9
.1cf8	90 0a		bcc $1d04			bcc 	_TOKNotDigit
.1cfa	20 57 1e	jsr $1e57			jsr 	TOKTokeniseInteger 			; get integer
.1cfd	b0 45		bcs $1d44			bcs 	_TOKFail 					; did it fail ?
.1cff	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1d02	80 e1		bra $1ce5			bra 	_TOKMainLoop
.1d04					_TOKNotDigit:
.1d04	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1d07	d0 3b		bne $1d44			bne 	_TOKFail 					; if so, we've a problem.
.1d09	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d0b	d0 07		bne $1d14			bne 	_TOKNotHex
.1d0d	20 9f 1d	jsr $1d9f			jsr 	TOKTokeniseHexadecimal
.1d10	b0 32		bcs $1d44			bcs 	_TOKFail
.1d12	80 d1		bra $1ce5			bra 	_TOKMainLoop
.1d14					_TOKNotHex:
.1d14	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1d16	d0 07		bne $1d1f			bne 	_TOKNotDecimal
.1d18	20 ae 1c	jsr $1cae			jsr 	TOKTokeniseDecimals
.1d1b	b0 27		bcs $1d44			bcs 	_TOKFail
.1d1d	80 c6		bra $1ce5			bra 	_TOKMainLoop
.1d1f					_TOKNotDecimal:
.1d1f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1d21	d0 07		bne $1d2a			bne 	_TOKNotString
.1d23	20 c5 1e	jsr $1ec5			jsr 	TOKTokeniseString
.1d26	b0 1c		bcs $1d44			bcs 	_TOKFail
.1d28	80 bb		bra $1ce5			bra 	_TOKMainLoop
.1d2a					_TOKNotString:
.1d2a	20 1b 1f	jsr $1f1b			jsr 	TOKIsAlpha 					; identifier ?
.1d2d	b0 07		bcs $1d36			bcs 	_TOKIdentifier
.1d2f	20 94 1e	jsr $1e94			jsr 	TOKTokenisePunctuation 		; punctuation
.1d32	b0 10		bcs $1d44			bcs 	_TOKFail
.1d34	80 af		bra $1ce5			bra 	_TOKMainLoop
.1d36					_TOKIdentifier:
.1d36	20 d9 1d	jsr $1dd9			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1d39	b0 09		bcs $1d44			bcs 	_TOKFail
.1d3b	80 a8		bra $1ce5			bra 	_TOKMainLoop
.1d3d					_TOKExit:
.1d3d	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1d3f	20 46 1d	jsr $1d46			jsr 	TOKWriteA
.1d42	18		clc				clc									; return with carry set.
.1d43	60		rts				rts
.1d44					_TOKFail:
.1d44	38		sec				sec
.1d45	60		rts				rts
.1d46					TOKWriteA:
.1d46	da		phx				phx
.1d47	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1d4a	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1d4d	fa		plx				plx
.1d4e	ee 37 02	inc $0237			inc 	TOKLineSize
.1d51	60		rts				rts
.1d52					TOKGet:
.1d52	18		clc				clc
.1d53	6c 49 04	jmp ($0449)			jmp 	(TOKDataSource)
.1d56					TOKGetNext:
.1d56	38		sec				sec
.1d57	6c 49 04	jmp ($0449)			jmp 	(TOKDataSource)
.0449					TOKDataSource:
>0449							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1d5a					TOKFindToken:
.1d5a	a2 d0		ldx #$d0			ldx 	#StandardTokens & $FF 		; do this table
.1d5c	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1d5e	20 69 1d	jsr $1d69			jsr 	TOKFindTokenXY 				; find it, or not
.1d61	90 04		bcc $1d67			bcc 	_TOKFTFail
.1d63	a2 00		ldx #$00			ldx 	#0
.1d65	38		sec				sec
.1d66	60		rts				rts
.1d67					_TOKFTFail
.1d67	18		clc				clc
.1d68	60		rts				rts
.1d69					TOKFindTokenXY:
.1d69	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1d6b	84 1f		sty $1f				sty 	zTemp0+1
.1d6d	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1d6f	8d 4b 04	sta $044b			sta 	TOKCurrent
.1d72					_TOKFindLoop:
.1d72	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1d74	18		clc				clc 		 						; clear carry in case of fail
.1d75	30 17		bmi $1d8e			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1d77	cd 49 03	cmp $0349			cmp 	TOKElement 					; compare against the element length
.1d7a	d0 13		bne $1d8f			bne 	_TOKNext 					; different, try next.
.1d7c	aa		tax				tax 								; number of chars to compare.
.1d7d	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1d7f					_TOKCompare:
.1d7f	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1d81	d9 49 03	cmp $0349,y			cmp 	TOKElementText-1,y
.1d84	d0 09		bne $1d8f			bne 	_TOKNext 					; different ? try next
.1d86	c8		iny				iny 								; compare next two
.1d87	ca		dex				dex
.1d88	d0 f5		bne $1d7f			bne 	_TOKCompare 				; until done X characters.
.1d8a	38		sec				sec
.1d8b	ad 4b 04	lda $044b			lda 	TOKCurrent 					; return current ID.
.1d8e					_TOKExit:
.1d8e	60		rts				rts
.1d8f					_TOKNext:
.1d8f	ee 4b 04	inc $044b			inc 	TOKCurrent 					; increment token #
.1d92	38		sec				sec 								; add length+1 to ptr
.1d93	b2 1e		lda ($1e)			lda 	(zTemp0)
.1d95	65 1e		adc $1e				adc 	zTemp0
.1d97	85 1e		sta $1e				sta 	zTemp0
.1d99	90 d7		bcc $1d72			bcc 	_TOKFindLoop
.1d9b	e6 1f		inc $1f				inc 	zTemp0+1
.1d9d	80 d3		bra $1d72			bra 	_TOKFindLoop
.044b					TOKCurrent:
>044b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1d9f					TOKTokeniseHexadecimal:
.1d9f	20 56 1d	jsr $1d56			jsr 	TOKGetNext 					; consume the $
.1da2	a2 0c		ldx #$0c			ldx 	#IFR0
.1da4	20 e6 28	jsr $28e6			jsr 	IFloatSetZero 				; set R0 = 0
.1da7					_TTHLoop:
.1da7	20 52 1d	jsr $1d52			jsr 	TOKGet 						; keep getting and copying while numeric.
.1daa	20 28 1f	jsr $1f28			jsr 	TOKIsHexadecimal
.1dad	90 20		bcc $1dcf			bcc 	_TTHDone
.1daf	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1db1	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1db4	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1db7	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1dba	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.1dbd	20 56 1d	jsr $1d56			jsr 	TOKGetNext
.1dc0	38		sec				sec 								; convert to decimal.
.1dc1	e9 30		sbc #$30			sbc 	#48
.1dc3	c9 0a		cmp #$0a			cmp 	#10
.1dc5	90 02		bcc $1dc9			bcc 	_TTHNotAlpha
.1dc7	e9 07		sbc #$07			sbc 	#7
.1dc9					_TTHNotAlpha:
.1dc9	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1dcb	85 0c		sta $0c				sta 	IFR0+IM0
.1dcd	80 d8		bra $1da7			bra 	_TTHLoop
.1dcf					_TTHDone:
.1dcf	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1dd1	20 46 1d	jsr $1d46			jsr 	TOKWriteA
.1dd4	20 8c 1c	jsr $1c8c			jsr 	TOKTokeniseConstant 		; write integer out.
.1dd7	18		clc				clc
.1dd8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1dd9					TOKTokeniseIdentifier:
.1dd9	20 79 1c	jsr $1c79			jsr 	TOKResetElement 			; extract an identifier
.1ddc					_TOKGetIdentifier:
.1ddc	20 52 1d	jsr $1d52			jsr 	TOKGet
.1ddf	20 e8 1e	jsr $1ee8			jsr 	TOKToUpper
.1de2	20 0a 1f	jsr $1f0a			jsr 	TOKIsIdentifierElement
.1de5	90 08		bcc $1def			bcc 	_TOKEndIdent
.1de7	20 7d 1c	jsr $1c7d			jsr		TOKWriteElement
.1dea	20 56 1d	jsr $1d56			jsr 	TOKGetNext
.1ded	80 ed		bra $1ddc			bra 	_TOKGetIdentifier
.1def					_TOKEndIdent:
.1def	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1df1	d0 06		bne $1df9			bne 	_TOKNotString
.1df3	20 7d 1c	jsr $1c7d			jsr 	TOKWriteElement 			; add it
.1df6	20 56 1d	jsr $1d56			jsr 	TOKGetNext 					; consume it
.1df9					_TOKNotString:
.1df9	20 52 1d	jsr $1d52			jsr 	TOKGet 						; finally check for (
.1dfc	c9 28		cmp #$28			cmp 	#"("
.1dfe	d0 06		bne $1e06			bne 	_TOKNoArray
.1e00	20 7d 1c	jsr $1c7d			jsr 	TOKWriteElement 			; add it
.1e03	20 56 1d	jsr $1d56			jsr 	TOKGetNext 					; consume it
.1e06					_TOKNoArray:
.1e06	20 5a 1d	jsr $1d5a			jsr 	TOKFindToken 				; find it
.1e09	90 05		bcc $1e10			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e0b	20 46 1d	jsr $1d46			jsr 	TOKWriteA
.1e0e	18		clc				clc
.1e0f	60		rts				rts
.1e10					_TOKIsVariable:
.1e10	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1e12					_TOKOutputBuffer:
.1e12	bd 4a 03	lda $034a,x			lda 	TOKElementText,x 			; output it translated.
.1e15	20 3e 1e	jsr $1e3e			jsr 	TOKTranslateIdentifier
.1e18	20 46 1d	jsr $1d46			jsr 	TOKWriteA
.1e1b	e8		inx				inx
.1e1c	bd 4a 03	lda $034a,x			lda 	TOKElementText,x
.1e1f	20 0a 1f	jsr $1f0a			jsr 	TOKIsIdentifierElement
.1e22	b0 ee		bcs $1e12			bcs 	_TOKOutputBuffer
.1e24	a8		tay				tay 								; last char in Y
.1e25	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1e27	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1e29	f0 0e		beq $1e39			beq 	_TOKIVExit
.1e2b	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1e2d	d0 04		bne $1e33			bne 	_TOKIVCheckArray 			; no, check for (
.1e2f	1a		inc a				inc 	a 							; token is $7D
.1e30	bc 4b 03	ldy $034b,x			ldy 	TOKElementText+1,x 			; get next one.
.1e33					_TOKIVCheckArray:
.1e33	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1e35	d0 02		bne $1e39			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1e37	1a		inc a				inc 	a
.1e38	1a		inc a				inc 	a
.1e39					_TOKIVExit:
.1e39	20 46 1d	jsr $1d46			jsr 	TOKWriteA 					; ending token
.1e3c	18		clc				clc
.1e3d	60		rts				rts
.1e3e					TOKTranslateIdentifier:
.1e3e	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1e40	f0 0f		beq $1e51			beq 	_TTI64
.1e42	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1e44	f0 0e		beq $1e54			beq 	_TTI65
.1e46	38		sec				sec
.1e47	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1e49	10 03		bpl $1e4e			bpl 	_TTIExit
.1e4b	18		clc				clc 								; map 09 onto 26-35
.1e4c	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1e4e					_TTIExit:
.1e4e	09 40		ora #$40			ora 	#$40 						; correct range.
.1e50	60		rts				rts
.1e51	a9 64		lda #$64	_TTI64:	lda 	#$64
.1e53	60		rts				rts
.1e54	a9 65		lda #$65	_TTI65:	lda 	#$65
.1e56	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1e57					TOKTokeniseInteger:
.1e57	20 80 1e	jsr $1e80			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e5a	a2 4a		ldx #$4a			ldx 	#TOKElementText & $FF
.1e5c	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1e5e	ad 49 03	lda $0349			lda		TOKElement
.1e61	20 4a 27	jsr $274a			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1e64	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1e67	f0 12		beq $1e7b			beq 	_TOKNotLineNumber
.1e69	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1e6b	d0 0c		bne $1e79			bne 	_TOKBadLineNumeber
.1e6d	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1e6f	8d 38 02	sta $0238			sta 	TOKLineNumber
.1e72	a5 0d		lda $0d				lda 	IFR0+IM1
.1e74	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1e77	18		clc				clc
.1e78	60		rts				rts
.1e79					_TOKBadLineNumeber:
.1e79	38		sec				sec
.1e7a	60		rts				rts
.1e7b					_TOKNotLineNumber:
.1e7b	20 8c 1c	jsr $1c8c			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1e7e	18		clc				clc
.1e7f	60		rts				rts
.1e80					TOKExtractInteger:
.1e80	20 79 1c	jsr $1c79			jsr 	TOKResetElement 			; restart
.1e83					_TTILoop:
.1e83	20 52 1d	jsr $1d52			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e86	20 fe 1e	jsr $1efe			jsr 	TOKIsDigit
.1e89	90 08		bcc $1e93			bcc 	_TOKEIExit
.1e8b	20 7d 1c	jsr $1c7d			jsr 	TOKWriteElement
.1e8e	20 56 1d	jsr $1d56			jsr 	TOKGetNext
.1e91	80 f0		bra $1e83			bra 	_TTILoop
.1e93					_TOKEIExit:
.1e93	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1e94					TOKTokenisePunctuation:
.1e94	20 79 1c	jsr $1c79			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1e97	20 56 1d	jsr $1d56			jsr 	TOKGetNext
.1e9a	20 7d 1c	jsr $1c7d			jsr 	TOKWriteElement
.1e9d	20 52 1d	jsr $1d52			jsr 	TOKGet 						; what follows ?
.1ea0	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1ea2	f0 10		beq $1eb4			beq 	_TTPOne
.1ea4	20 12 1f	jsr $1f12			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1ea7	b0 0b		bcs $1eb4			bcs 	_TTPOne 					; these speed things up a bit.
.1ea9	20 7d 1c	jsr $1c7d			jsr 	TOKWriteElement 			; this is what we will search for.
.1eac	20 5a 1d	jsr $1d5a			jsr 	TOKFindToken
.1eaf	b0 0a		bcs $1ebb			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1eb1	ce 49 03	dec $0349			dec 	TOKElement 					; make it a single character
.1eb4					_TTPOne:
.1eb4	20 5a 1d	jsr $1d5a			jsr 	TOKFindToken 				; look for one character punctuation
.1eb7	b0 07		bcs $1ec0			bcs 	_TTPOutputExit 				; we found it
.1eb9	38		sec				sec 								; not recognised.
.1eba	60		rts				rts
.1ebb					_TTPConsumeExit:
.1ebb	48		pha				pha
.1ebc	20 56 1d	jsr $1d56			jsr 	TOKGetNext 					; get the 2nd char out.
.1ebf	68		pla				pla
.1ec0					_TTPOutputExit:
.1ec0	20 46 1d	jsr $1d46			jsr  	TOKWriteA 					; write token out
.1ec3	18		clc				clc
.1ec4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1ec5					TOKTokeniseString:
.1ec5	20 56 1d	jsr $1d56			jsr 	TOKGetNext 					; consume the "
.1ec8	20 79 1c	jsr $1c79			jsr 	TOKResetElement 			; start getting the string
.1ecb					_TOKTSLoop:
.1ecb	20 52 1d	jsr $1d52			jsr 	TOKGet 						; check EOL
.1ece	c9 00		cmp #$00			cmp 	#0
.1ed0	f0 0c		beq $1ede			beq 	_TOKTSExit
.1ed2	20 56 1d	jsr $1d56			jsr 	TOKGetNext 					; get and consume
.1ed5	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1ed7	f0 05		beq $1ede			beq 	_TOKTSExit
.1ed9	20 7d 1c	jsr $1c7d			jsr 	TOKWriteElement
.1edc	80 ed		bra $1ecb			bra 	_TOKTSLoop
.1ede					_TOKTSExit:
.1ede	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1ee0	20 46 1d	jsr $1d46			jsr 	TOKWriteA
.1ee3	20 be 1c	jsr $1cbe			jsr 	TOKOutputElementBuffer
.1ee6	18		clc				clc
.1ee7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1ee8					TOKToUpper:
.1ee8	c9 61		cmp #$61			cmp 	#"a"
.1eea	90 06		bcc $1ef2			bcc 	_TTUNotLower
.1eec	c9 7b		cmp #$7b			cmp 	#"z"+1
.1eee	b0 02		bcs $1ef2			bcs 	_TTUNotLower
.1ef0	49 20		eor #$20			eor 	#$20
.1ef2					_TTUNotLower:
.1ef2	60		rts				rts
.1ef3					TOKToLower:
.1ef3	c9 41		cmp #$41			cmp 	#"A"
.1ef5	90 06		bcc $1efd			bcc 	_TTUNotUpper
.1ef7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1ef9	b0 02		bcs $1efd			bcs 	_TTUNotUpper
.1efb	49 20		eor #$20			eor 	#$20
.1efd					_TTUNotUpper:
.1efd	60		rts				rts
.1efe					TOKIsDigit:
.1efe	c9 30		cmp #$30			cmp 	#"0"
.1f00	90 06		bcc $1f08			bcc 	TOKFail
.1f02	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f04	b0 02		bcs $1f08			bcs 	TOKFail
.1f06					TOKSucceed:
.1f06	38		sec				sec
.1f07	60		rts				rts
.1f08					TOKFail:
.1f08	18		clc				clc
.1f09	60		rts				rts
.1f0a					TOKIsIdentifierElement:
.1f0a	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f0c	f0 f8		beq $1f06			beq 	TOKSucceed
.1f0e	c9 5f		cmp #$5f			cmp 	#"_"
.1f10	f0 f4		beq $1f06			beq 	TOKSucceed 					; else fall through to alphanumeric
.1f12					TOKIsAlphaNumeric:
.1f12	20 1b 1f	jsr $1f1b			jsr 	TOKIsAlpha
.1f15	b0 ef		bcs $1f06			bcs 	TOKSucceed
.1f17	20 fe 1e	jsr $1efe			jsr 	TOKIsDigit
.1f1a	60		rts				rts
.1f1b					TOKIsAlpha:
.1f1b	20 e8 1e	jsr $1ee8			jsr 	TOKToUpper
.1f1e	c9 41		cmp #$41			cmp 	#"A"
.1f20	90 e6		bcc $1f08			bcc 	TOKFail
.1f22	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f24	b0 e2		bcs $1f08			bcs 	TOKFail
.1f26	80 de		bra $1f06			bra 	TOKSucceed
.1f28					TOKIsHexadecimal:
.1f28	20 fe 1e	jsr $1efe			jsr		TOKIsDigit
.1f2b	b0 d9		bcs $1f06			bcs 	TOKSucceed
.1f2d	20 1b 1f	jsr $1f1b			jsr 	TOKIsAlpha
.1f30	90 d6		bcc $1f08			bcc 	TOKFail
.1f32	c9 47		cmp #$47			cmp 	#"F"+1
.1f34	b0 d2		bcs $1f08			bcs 	TOKFail
.1f36	80 ce		bra $1f06			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.1f38					ErrorV_syntax:
.1f38	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1f3b	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>1f43	72 72 6f 72 00
.1f48					ErrorV_range:
.1f48	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1f4b	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>1f53	61 6e 67 65 00
.1f58					ErrorV_value:
.1f58	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1f5b	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>1f63	65 00
.1f65					ErrorV_type:
.1f65	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1f68	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>1f70	6d 61 74 63 68 00
.1f76					ErrorV_unimplemented:
.1f76	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1f79	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>1f81	65 6d 65 6e 74 65 64 00
.1f89					ErrorV_assert:
.1f89	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1f8c	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>1f94	61 69 6c 00
.1f98					ErrorV_internal:
.1f98	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1f9b	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>1fa3	20 45 72 72 6f 72 00
.1faa					ErrorV_divzero:
.1faa	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1fad	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>1fb5	79 20 5a 65 72 6f 00
.1fbc					ErrorV_structure:
.1fbc	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1fbf	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>1fc7	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1fd3					ErrorV_stop:
.1fd3	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1fd6	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>1fde	53 74 6f 70 70 65 64 00
.1fe6					ErrorV_data:
.1fe6	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1fe9	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>1ff1	61 74 61 00
.1ff5					ErrorV_redefine:
.1ff5	20 c8 29	jsr $29c8		jsr	ErrorHandler
>1ff8	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>2000	64 65 66 69 6e 65 64 00
.2008					ErrorV_index:
.2008	20 c8 29	jsr $29c8		jsr	ErrorHandler
>200b	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>2013	79 20 49 6e 64 65 78 00
.201b					ErrorV_memory:
.201b	20 c8 29	jsr $29c8		jsr	ErrorHandler
>201e	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>2026	65 6d 6f 72 79 00
.202c					ErrorV_uninitialised:
.202c	20 c8 29	jsr $29c8		jsr	ErrorHandler
>202f	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>2037	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2046					ErrorV_string:
.2046	20 c8 29	jsr $29c8		jsr	ErrorHandler
>2049	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>2051	6e 67 20 4c 65 6e 67 74 68 00
.205b					ErrorV_variable:
.205b	20 c8 29	jsr $29c8		jsr	ErrorHandler
>205e	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>2066	20 4d 69 73 73 69 6e 67 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.206f					ERRCheckLParen:
.206f	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2071	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2073	d0 18		bne $208d			bne 	ERRSyntaxError
.2075	c8		iny				iny
.2076	60		rts				rts
.2077					ERRCheckRParen:
.2077	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2079	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.207b	d0 10		bne $208d			bne 	ERRSyntaxError
.207d	c8		iny				iny
.207e	60		rts				rts
.207f					ERRCheckComma:
.207f	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2081	c9 99		cmp #$99			cmp 	#PR_COMMA
.2083	d0 08		bne $208d			bne 	ERRSyntaxError
.2085	c8		iny				iny
.2086	60		rts				rts
.2087					ERRCheckA:
.2087	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.2089	d0 02		bne $208d			bne 	ERRSyntaxError
.208b	c8		iny				iny
.208c	60		rts				rts
.208d					ERRSyntaxError:
.208d	4c 38 1f	jmp $1f38		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/bytes.asm

.2090					StackPushByte:
.2090	48		pha				pha 								; save byte on stack
.2091	a5 26		lda $26				lda 	basicStack 					; decrement basic stack pointer
.2093	d0 02		bne $2097			bne 	_SPBNoBorrow
.2095	c6 27		dec $27				dec 	basicStack+1 				; borrow
.2097					_SPBNoBorrow:
.2097	c6 26		dec $26				dec 	basicStack
.2099	68		pla				pla 								; get back and write
.209a	92 26		sta ($26)			sta 	(basicStack)
.209c	60		rts				rts
.209d					StackPopByte:
.209d	b2 26		lda ($26)			lda 	(basicStack) 				; bump the stack pointer.
.209f	e6 26		inc $26				inc 	basicStack
.20a1	d0 02		bne $20a5			bne 	_SPBNoCarry
.20a3	e6 27		inc $27				inc 	basicStack+1
.20a5					_SPBNoCarry:
.20a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.20a6					StackOpen:
.20a6	48		pha				pha 								; save frame byte
.20a7	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.20a9	0a		asl a				asl 	a 							; claim twice this for storage
.20aa	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.20ac	38		sec				sec 								; so basically subtracting from
.20ad	65 26		adc $26				adc 	basicStack 	 				; basicStack
.20af	85 26		sta $26				sta 	basicStack
.20b1	b0 03		bcs $20b6			bcs 	_SONoBorrow
>20b3	db						.byte 	$DB
.20b4	c6 27		dec $27				dec 	basicStack+1
.20b6					_SONoBorrow:
.20b6	68		pla				pla 								; get marker back and write at TOS
.20b7	92 26		sta ($26)			sta 	(basicStack)
.20b9	60		rts				rts
.20ba					StackClose:
.20ba	b2 26		lda ($26)			lda 	(basicStack) 				; get TOS marker
.20bc	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.20be	0a		asl a				asl 	a 							; claim twice this.
.20bf	65 26		adc $26				adc 	basicStack 					; add to the stack pointer.
.20c1	85 26		sta $26				sta 	basicStack
.20c3	90 02		bcc $20c7			bcc 	_SCExit
.20c5	e6 27		inc $27				inc 	basicStack+1
.20c7					_SCExit:
.20c7	60		rts				rts
.20c8					StackCheckFrame:
.20c8	52 26		eor ($26)			eor 	(basicStack) 				; xor with toS marker
.20ca	29 f0		and #$f0			and 	#$F0 						; check type bits
.20cc	d0 01		bne $20cf			bne 	_SCFError 					; different, we have structures mixed up
.20ce	60		rts				rts
.20cf					_SCFError:
.20cf	8a		txa				txa 								; report error X
.20d0	4c c8 29	jmp $29c8			jmp 	ErrorHandler

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.20d3					StackReset:
.20d3	48		pha				pha 								; save top of memory
.20d4	3a		dec a				dec 	a  							; end of stack = previous byte
.20d5	85 27		sta $27				sta 	basicStack+1
.20d7	a9 ff		lda #$ff			lda 	#$FF
.20d9	85 26		sta $26				sta 	basicStack
.20db	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.20dd	92 26		sta ($26)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.20df	68		pla				pla 								; allocate pages for stack.
.20e0	38		sec				sec
.20e1	e9 02		sbc #$02			sbc 	#2
.20e3	60		rts				rts
.0026					basicStack:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.20e4					StringConcrete:
.20e4	5a		phy				phy 								; save position on stack
.20e5	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.20e7	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.20e9	b0 41		bcs $212c			bcs 	_SALengthError
.20eb	18		clc				clc 								; length of the new string
.20ec	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.20ee	90 02		bcc $20f2			bcc 	_SAHaveLength
.20f0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.20f2					_SAHaveLength:
.20f2	48		pha				pha 								; save length to be allocated for concreting.
.20f3	38		sec				sec
.20f4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.20f6	6d 4d 04	adc $044d			adc 	stringMemory
.20f9	8d 4d 04	sta $044d			sta 	stringMemory
.20fc	85 22		sta $22				sta 	zTemp2 						; update storage address
.20fe	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2100	6d 4e 04	adc $044e			adc 	stringMemory+1
.2103	8d 4e 04	sta $044e			sta 	stringMemory+1
.2106	85 23		sta $23				sta 	zTemp2+1
.2108	68		pla				pla 								; save length allocated in +0
.2109	92 22		sta ($22)			sta 	(zTemp2)
.210b	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.210d	a0 01		ldy #$01			ldy 	#1
.210f	91 22		sta ($22),y			sta 	(zTemp2),y
.2111					_SACopyNewString:
.2111	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.2113	a0 02		ldy #$02			ldy 	#2
.2115	91 22		sta ($22),y			sta 	(zTemp2),y
.2117	aa		tax				tax 								; bytes to copy
.2118	f0 0c		beq $2126			beq 	_SACopyExit
.211a	a0 01		ldy #$01			ldy 	#1 							; first character from here
.211c					_SACopyNSLoop:
.211c	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.211e	c8		iny				iny 								; write two on in string storage
.211f	c8		iny				iny
.2120	91 22		sta ($22),y			sta 	(zTemp2),y
.2122	88		dey				dey
.2123	ca		dex				dex									; until copied all the string lengths.
.2124	d0 f6		bne $211c			bne 	_SACopyNSLoop
.2126					_SACopyExit:
.2126	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.2128	a5 22		lda $22				lda 	zTemp2
.212a	7a		ply				ply
.212b	60		rts				rts
.212c					_SALengthError:
.212c	4c 46 20	jmp $2046		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.212f					StringSystemInitialise:
.212f	3a		dec a				dec 	a 							; make last byte of previous page.
.2130	8d 4e 04	sta $044e			sta 	stringMemory+1
.2133	85 1f		sta $1f				sta 	zTemp0+1
.2135	a9 ff		lda #$ff			lda 	#$FF
.2137	8d 4d 04	sta $044d			sta 	stringMemory
.213a	85 1e		sta $1e				sta 	zTemp0
.213c	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.213e	92 1e		sta ($1e)			sta 	(zTemp0)
.2140	60		rts				rts
.2141					StringSpaceInitialise:
.2141	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2143	8d 4c 04	sta $044c			sta 	stringInitialised
.2146	ad 4d 04	lda $044d			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2149	8d 4f 04	sta $044f			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.214c	ad 4e 04	lda $044e			lda 	stringMemory+1
.214f	3a		dec a				dec 	a
.2150	8d 50 04	sta $0450			sta 	stringTempPointer+1
.2153	60		rts				rts
.2154					StringTempAllocate:
.2154	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2156	b0 2e		bcs $2186			bcs 	_STALength
.2158	2c 4c 04	bit $044c			bit 	stringInitialised 			; already initialised
.215b	30 05		bmi $2162			bmi 	_STAAllocate
.215d	48		pha				pha 								; save value to subtract.
.215e	20 41 21	jsr $2141			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2161	68		pla				pla 								; restore it
.2162					_STAAllocate:
.2162	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2164	18		clc				clc  								; deliberate allows one more
.2165	6d 4f 04	adc $044f			adc 	stringTempPointer 			; subtract from temp pointer
.2168	8d 4f 04	sta $044f			sta 	stringTempPointer
.216b	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.216d	85 28		sta $28				sta 	zsTemp 						; and zsTemp
.216f	ad 50 04	lda $0450			lda 	stringTempPointer+1
.2172	69 ff		adc #$ff			adc 	#$FF
.2174	8d 50 04	sta $0450			sta 	stringTempPointer+1
.2177	85 29		sta $29				sta 	zsTemp+1
.2179	85 0d		sta $0d				sta 	IFR0+IM1
.217b	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.217d	a9 80		lda #$80			lda 	#$80
.217f	85 0f		sta $0f				sta 	IFR0+IExp
.2181	a9 00		lda #$00			lda 	#0 							; clear the target string
.2183	92 28		sta ($28)			sta 	(zsTemp)
.2185	60		rts				rts
.2186					_STALength:
.2186	4c 46 20	jmp $2046		jmp	ErrorV_string
.2189					StringTempWrite:
.2189	5a		phy				phy
.218a	48		pha				pha
.218b	b2 28		lda ($28)			lda 	(zsTemp)
.218d	1a		inc a				inc 	a
.218e	92 28		sta ($28)			sta 	(zsTemp)
.2190	a8		tay				tay
.2191	68		pla				pla
.2192	91 28		sta ($28),y			sta 	(zsTemp),y
.2194	7a		ply				ply
.2195	60		rts				rts
.0028					zsTemp:
>0028							.fill 	2
.044c					stringInitialised:
>044c							.fill 	1
.044d					stringMemory:
>044d							.fill 	2
.044f					stringTempPointer:
>044f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2196					VARCreate:
.2196	5a		phy				phy
.2197	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2199	a2 00		ldx #$00			ldx 	#0
.219b	20 32 10	jsr $1032			jsr 	AllocateMemory
.219e	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.21a0	86 21		stx $21				stx 	zTemp1+1
.21a2	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.21a4	ad 53 04	lda $0453			lda 	VARHash
.21a7	91 20		sta ($20),y			sta 	(zTemp1),y
.21a9	c8		iny				iny 								; put address of name into +3,+4
.21aa	ad 51 04	lda $0451			lda 	VARNameAddress
.21ad	91 20		sta ($20),y			sta 	(zTemp1),y
.21af	c8		iny				iny
.21b0	ad 52 04	lda $0452			lda 	VARNameAddress+1
.21b3	91 20		sta ($20),y			sta 	(zTemp1),y
.21b5	ad 54 04	lda $0454			lda 	VARType
.21b8	29 01		and #$01			and 	#1
.21ba	f0 06		beq $21c2			beq 	_CVNotString
.21bc	a0 08		ldy #$08			ldy 	#5+3
.21be	a9 80		lda #$80			lda 	#$80
.21c0	91 20		sta ($20),y			sta 	(zTemp1),y
.21c2					_CVNotString:
.21c2	ad 75 04	lda $0475			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.21c5	85 1e		sta $1e				sta 	zTemp0
.21c7	ad 76 04	lda $0476			lda 	VARHashEntry+1
.21ca	85 1f		sta $1f				sta 	zTemp0+1
.21cc	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.21ce	b2 1e		lda ($1e)			lda 	(zTemp0)
.21d0	92 20		sta ($20)			sta 	(zTemp1)
.21d2	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.21d4	91 20		sta ($20),y			sta 	(zTemp1),y
.21d6	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.21d8	92 1e		sta ($1e)			sta 	(zTemp0)
.21da	a5 21		lda $21				lda 	zTemp1+1
.21dc	91 1e		sta ($1e),y			sta 	(zTemp0),y
.21de	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.21e0	a6 21		ldx $21				ldx 	zTemp1+1
.21e2	18		clc				clc 								; add 5 to point to the data.
.21e3	69 05		adc #$05			adc 	#5
.21e5	90 01		bcc $21e8			bcc 	_VCNoCarry
.21e7	e8		inx				inx
.21e8					_VCNoCarry:
.21e8	7a		ply				ply
.21e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.21ea					VARFind:
.21ea	5a		phy				phy
.21eb	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.21ed	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.21ef	85 21		sta $21				sta 	zTemp1+1
.21f1	f0 1c		beq $220f			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.21f3	b2 1e		lda ($1e)			lda 	(zTemp0)
.21f5	85 20		sta $20				sta 	zTemp1
.21f7					_VFLoop:
.21f7	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.21f9	b1 20		lda ($20),y			lda 	(zTemp1),y
.21fb	cd 53 04	cmp $0453			cmp 	VARHash
.21fe	f0 12		beq $2212			beq 	_VFHashesMatch 				; if so, check the name.
.2200					_VFNext:
.2200	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.2202	aa		tax				tax
.2203	a0 01		ldy #$01			ldy 	#1
.2205	b1 20		lda ($20),y			lda 	(zTemp1),y
.2207	85 21		sta $21				sta 	zTemp1+1
.2209	86 20		stx $20				stx 	zTemp1
.220b	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.220d	d0 e8		bne $21f7			bne 	_VFLoop
.220f					_VFExitFail:
.220f	7a		ply				ply
.2210	18		clc				clc
.2211	60		rts				rts
.2212					_VFHashesMatch:
.2212	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2214	b1 20		lda ($20),y			lda 	(zTemp1),y
.2216	85 22		sta $22				sta 	zTemp2
.2218	c8		iny				iny
.2219	b1 20		lda ($20),y			lda 	(zTemp1),y
.221b	85 23		sta $23				sta 	zTemp2+1
.221d	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.221f					_VFNameCompLoop:
.221f	c8		iny				iny 								; char at a time
.2220	b9 55 04	lda $0455,y			lda 	VARBuffer,y
.2223	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.2225	d0 d9		bne $2200			bne 	_VFNext						; next entry if different.
.2227	c9 7c		cmp #$7c			cmp 	#$7C
.2229	90 f4		bcc $221f			bcc 	_VFNameCompLoop 			; until done the whole lot.
.222b	18		clc				clc
.222c	a5 20		lda $20				lda 	zTemp1
.222e	a6 21		ldx $21				ldx 	zTemp1+1
.2230	69 05		adc #$05			adc 	#5
.2232	90 01		bcc $2235			bcc 	_VFNNoCarry
.2234	e8		inx				inx
.2235					_VFNNoCarry:
.2235	7a		ply				ply
.2236	38		sec				sec
.2237	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2238					VARGetInfo:
.2238	98		tya				tya 								; calculate the address of the identifier start.
.2239	18		clc				clc
.223a	65 1c		adc $1c				adc 	codePtr
.223c	8d 51 04	sta $0451			sta 	VARNameAddress
.223f	a5 1d		lda $1d				lda 	codePtr+1
.2241	69 00		adc #$00			adc 	#0
.2243	8d 52 04	sta $0452			sta 	VARNameAddress+1
.2246	9c 53 04	stz $0453			stz 	VARHash
.2249	a2 00		ldx #$00			ldx 	#0
.224b					_VARCopyName:
.224b	18		clc				clc 								; update the sum hash.
.224c	ad 53 04	lda $0453			lda 	VARHash
.224f	71 1c		adc ($1c),y			adc 	(codePtr),y
.2251	8d 53 04	sta $0453			sta 	VARHash
.2254	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.2256	c8		iny				iny
.2257	9d 55 04	sta $0455,x			sta 	VARBuffer,x
.225a	e8		inx				inx
.225b	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.225d	90 ec		bcc $224b			bcc 	_VARCopyName
.225f	8d 54 04	sta $0454			sta 	VARType 					; save type byte
.2262	29 03		and #$03			and 	#3 							; type is 0-3
.2264	0a		asl a				asl 	a
.2265	0a		asl a				asl 	a
.2266	85 1e		sta $1e				sta 	zTemp0
.2268	ad 53 04	lda $0453			lda 	VARHash 					; force into range of hash entries per type.
.226b	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.226d	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.226f	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2270	69 77		adc #$77			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2272	85 1e		sta $1e				sta 	zTemp0
.2274	8d 75 04	sta $0475			sta 	VARHashEntry
.2277	a9 04		lda #$04			lda 	#VARHashTables >> 8
.2279	69 00		adc #$00			adc 	#0
.227b	85 1f		sta $1f				sta 	zTemp0+1
.227d	8d 76 04	sta $0476			sta 	VARHashEntry+1
.2280	60		rts				rts
.2281					VARClearHashTables:
.2281	a2 00		ldx #$00			ldx 	#0
.2283					_VCHRLoop:
.2283	a9 00		lda #$00			lda 	#0
.2285	9d 77 04	sta $0477,x			sta 	VARHashTables,x
.2288	e8		inx				inx
.2289	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.228b	d0 f6		bne $2283			bne 	_VCHRLoop
.228d	60		rts				rts
.0451					VARNameAddress:
>0451							.fill 	2
.0453					VARHash:
>0453							.fill 	1
.0454					VARType:
>0454							.fill 	1
.0455					VARBuffer:
>0455							.fill 	32
.0475					VARHashEntry:
>0475							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0477					VARHashTables:
>0477							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.228e					VARCheckSimple:
.228e	aa		tax				tax 								; save in X
.228f	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2291	c9 7c		cmp #$7c			cmp 	#$7C
.2293	d0 15		bne $22aa			bne 	_VCSComplex
.2295	c8		iny				iny 								; consume the second byte, the type.
.2296	8a		txa				txa  								; character (40-7F) x 4
.2297	0a		asl a				asl 	a
.2298	0a		asl a				asl  	a
.2299	18		clc				clc
.229a	69 97		adc #$97			adc 	#FastVariables & $FF
.229c	85 0c		sta $0c				sta 	IFR0+IM0
.229e	a9 04		lda #$04			lda 	#FastVariables >> 8
.22a0	69 00		adc #$00			adc 	#0
.22a2	85 0d		sta $0d				sta 	IFR0+IM1
.22a4	64 0e		stz $0e				stz 	IFR0+IM2
.22a6	64 0f		stz $0f				stz 	IFR0+IExp
.22a8	38		sec				sec 								; it's a reference
.22a9	60		rts				rts
.22aa					_VCSComplex:
.22aa	88		dey				dey	 								; extract information.
.22ab	20 38 22	jsr $2238			jsr 	VARGetInfo
.22ae	20 ea 21	jsr $21ea			jsr 	VARFind 					; search for variable
.22b1	b0 0a		bcs $22bd			bcs 	_VCSHaveVariable
.22b3	ad 54 04	lda $0454			lda 	VARType 					; error if arrays, cannot autocreate
.22b6	29 02		and #$02			and 	#2
.22b8	d0 14		bne $22ce			bne 	_VCNoCreate
.22ba	20 96 21	jsr $2196			jsr 	VARCreate 					; create variable
.22bd					_VCSHaveVariable:
.22bd	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.22bf	85 0c		sta $0c				sta 	IFR0+IM0
.22c1	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.22c3	ad 54 04	lda $0454			lda 	VARType 					; number/string bit into carry
.22c6	6a		ror a				ror 	a
.22c7	a9 00		lda #$00			lda 	#0
.22c9	6a		ror a				ror 	a 							; now $00 or $80
.22ca	85 0f		sta $0f				sta 	IFR0+IExp
.22cc	38		sec				sec 								; it's a reference
.22cd	60		rts				rts
.22ce					_VCNoCreate:
.22ce	4c 2c 20	jmp $202c		jmp	ErrorV_uninitialised
.0497					FastVariables:
>0497							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.22d1					IFInitialise:
.22d1	9c 07 05	stz $0507			stz 	IFStackIndex
.22d4	60		rts				rts
.22d5					IFloatSubtract:
.22d5	da		phx				phx
.22d6	a2 0c		ldx #$0c			ldx 	#IFR0
.22d8	20 f1 28	jsr $28f1			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.22db	fa		plx				plx
.22dc					IFloatAdd:
.22dc	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.22de	05 0f		ora $0f				ora 	IFR0+IExp
.22e0	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.22e2	d0 4e		bne $2332			bne 	_IFloatAddDecimals 			; decimal version.
.22e4					_IFAddSubMantissa:
.22e4	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.22e6	45 0f		eor $0f				eor 	IFR0+IExp
.22e8	29 40		and #$40			and 	#IFSign
.22ea	d0 21		bne $230d			bne 	_IFloatSubMantissa
.22ec	18		clc				clc 								; do the actual addition
.22ed	a5 0c		lda $0c			lda 	IFR0+IM0
.22ef	75 00		adc $00,x		adc 		IM0,x
.22f1	85 0c		sta $0c			sta 	IFR0+IM0
.22f3	a5 0d		lda $0d			lda 	IFR0+IM1
.22f5	75 01		adc $01,x		adc 		IM1,x
.22f7	85 0d		sta $0d			sta 	IFR0+IM1
.22f9	a5 0e		lda $0e			lda 	IFR0+IM2
.22fb	75 02		adc $02,x		adc 		IM2,x
.22fd	85 0e		sta $0e			sta 	IFR0+IM2
.22ff	10 29		bpl $232a			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2301	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.2303	20 15 29	jsr $2915			jsr 	IFloatShiftRight
.2306	20 3f 29	jsr $293f			jsr 	IFloatIncExponent
.2309	d0 1f		bne $232a			bne 	_IFloatAddExit
.230b	38		sec				sec 								; overflowed numerically.
.230c	60		rts				rts
.230d					_IFloatSubMantissa:
.230d	38		sec				sec 								; do the subtraction R0-Rx
.230e	a5 0c		lda $0c			lda 	IFR0+IM0
.2310	f5 00		sbc $00,x		sbc 		IM0,x
.2312	85 0c		sta $0c			sta 	IFR0+IM0
.2314	a5 0d		lda $0d			lda 	IFR0+IM1
.2316	f5 01		sbc $01,x		sbc 		IM1,x
.2318	85 0d		sta $0d			sta 	IFR0+IM1
.231a	a5 0e		lda $0e			lda 	IFR0+IM2
.231c	f5 02		sbc $02,x		sbc 		IM2,x
.231e	85 0e		sta $0e			sta 	IFR0+IM2
.2320	b0 08		bcs $232a			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2322	a2 0c		ldx #$0c			ldx 	#IFR0
.2324	20 f9 28	jsr $28f9			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2327	20 f1 28	jsr $28f1			jsr 	IFloatNegate 				; negate
.232a					_IFloatAddExit:
.232a	18		clc				clc
.232b	60		rts				rts
.232c					_IFloatZeroAdd:
.232c	fa		plx				plx 								; return this value in R0
.232d	20 77 28	jsr $2877			jsr 	IFloatCopyFromRegister
.2330	18		clc				clc
.2331	60		rts				rts
.2332					_IFloatAddDecimals:
.2332	20 df 28	jsr $28df			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2335	f0 f3		beq $232a			beq 	_IFloatAddExit
.2337	20 1d 29	jsr $291d			jsr 	IFloatNormalise 			; normalise RX
.233a	da		phx				phx 								; normalise R0
.233b	a2 0c		ldx #$0c			ldx 	#IFR0
.233d	20 df 28	jsr $28df			jsr 	IFloatCheckZero
.2340	f0 ea		beq $232c			beq 	_IFloatZeroAdd
.2342	20 1d 29	jsr $291d			jsr 	IFloatNormalise
.2345	fa		plx				plx
.2346	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.2348	29 3f		and #$3f			and 	#IFXMask
.234a	38		sec				sec
.234b	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.234d	85 0a		sta $0a				sta 	iTemp0
.234f	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2351	29 3f		and #$3f			and 	#IFXMask
.2353	38		sec				sec
.2354	e9 20		sbc #$20			sbc 	#$20
.2356	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.2358	b0 02		bcs $235c			bcs 	_IFloatHaveLarger
.235a	a5 0a		lda $0a				lda 	iTemp0
.235c					_IFloatHaveLarger:
.235c	18		clc				clc 								; get the actual one back.
.235d	69 20		adc #$20			adc 	#$20 						; shift both to that.
.235f	20 6c 23	jsr $236c			jsr 	_IFShiftXToA
.2362	da		phx				phx
.2363	a2 0c		ldx #$0c			ldx 	#IFR0
.2365	20 6c 23	jsr $236c			jsr 	_IFShiftXToA
.2368	fa		plx				plx
.2369	4c e4 22	jmp $22e4			jmp 	_IFAddSubMantissa 			; do the adding bit.
.236c					_IFShiftXToA:
.236c	8d ff 04	sta $04ff			sta 	IFTarget
.236f	20 df 28	jsr $28df			jsr 	IFloatCheckZero 			; check adding zero ?
.2372	f0 11		beq $2385			beq 	_IFSXExit
.2374					_IFSXLoop:
.2374	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2376	29 3f		and #$3f			and 	#IFXMask
.2378	cd ff 04	cmp $04ff			cmp 	IFTarget
.237b	f0 08		beq $2385			beq 	_IFSXExit
.237d	20 15 29	jsr $2915			jsr 	IFloatShiftRight
.2380	20 3f 29	jsr $293f			jsr 	IFloatIncExponent
.2383	80 ef		bra $2374			bra 	_IFSXLoop
.2385					_IFSXExit:
.2385	60		rts				rts
.04ff					IFTarget:
>04ff							.fill 	1
.2386					IFloatMultiply:
.2386	8e ff 04	stx $04ff			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2389	20 41 24	jsr $2441			jsr 	IFCalculateNewSign
.238c	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.238e	05 0f		ora $0f				ora 	IFR0+IExp
.2390	29 3f		and #$3f			and 	#IFXMask
.2392	15 01		ora $01,x			ora 	IM1,x
.2394	05 0d		ora $0d				ora 	IFR0+IM1
.2396	15 02		ora $02,x			ora 	IM2,x
.2398	05 0e		ora $0e				ora 	IFR0+IM2
.239a	d0 0a		bne $23a6			bne 	_IFMStandard
.239c	20 c2 28	jsr $28c2			jsr 	IFloatMultiply8BitRx
.239f	ad 01 05	lda $0501			lda 	IFNewSign
.23a2	85 0f		sta $0f				sta 	IFR0+IExp
.23a4	18		clc				clc
.23a5	60		rts				rts
.23a6					_IFMStandard:
.23a6	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.23a8	20 38 24	jsr $2438			jsr 	IFMSignExtend
.23ab	8d 00 05	sta $0500			sta 	IFNewExponent
.23ae	a5 0f		lda $0f				lda 	IFR0+IExp
.23b0	20 38 24	jsr $2438			jsr 	IFMSignExtend
.23b3	18		clc				clc
.23b4	6d 00 05	adc $0500			adc 	IFNewExponent
.23b7	8d 00 05	sta $0500			sta 	IFNewExponent
.23ba	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.23bc	20 88 28	jsr $2888			jsr 	IFloatCopyToRegister
.23bf	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.23c1	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.23c4					_IFMLoop:
.23c4	a2 18		ldx #$18			ldx 	#IFRTemp
.23c6	20 df 28	jsr $28df			jsr 	IFloatCheckZero
.23c9	f0 3a		beq $2405			beq 	_IFMExit
.23cb	ae ff 04	ldx $04ff			ldx 	IFTarget 					; look at adder MSB
.23ce	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.23d0	10 03		bpl $23d5			bpl	 	_IFMTargetOkay
.23d2	20 29 24	jsr $2429			jsr 	_IFMShiftAll
.23d5					_IFMTargetOkay:
.23d5	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.23d7	29 01		and #$01			and 	#1
.23d9	f0 16		beq $23f1			beq 	_IFMNoAdd
.23db	ae ff 04	ldx $04ff			ldx 	IFTarget 					; add adder
.23de	18		clc				clc
.23df	a5 0c		lda $0c			lda 	IFR0+IM0
.23e1	75 00		adc $00,x		adc 		IM0,x
.23e3	85 0c		sta $0c			sta 	IFR0+IM0
.23e5	a5 0d		lda $0d			lda 	IFR0+IM1
.23e7	75 01		adc $01,x		adc 		IM1,x
.23e9	85 0d		sta $0d			sta 	IFR0+IM1
.23eb	a5 0e		lda $0e			lda 	IFR0+IM2
.23ed	75 02		adc $02,x		adc 		IM2,x
.23ef	85 0e		sta $0e			sta 	IFR0+IM2
.23f1					_IFMNoAdd:
.23f1	a5 0e		lda $0e				lda 	IFR0+IM2
.23f3	10 03		bpl $23f8			bpl 	_IFMResultOkay
.23f5	20 29 24	jsr $2429			jsr 	_IFMShiftAll
.23f8					_IFMResultOkay:
.23f8	a2 18		ldx #$18			ldx 	#IFRTemp
.23fa	20 15 29	jsr $2915			jsr 	IFloatShiftRight
.23fd	ae ff 04	ldx $04ff			ldx 	IFTarget
.2400	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.2403	80 bf		bra $23c4			bra 	_IFMLoop
.2405					_IFMExit:
.2405	ad 00 05	lda $0500			lda 	IFNewExponent 				; validate new exponent.
.2408	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.240a	90 0f		bcc $241b			bcc 	_IFMOkay
.240c	c9 e0		cmp #$e0			cmp 	#$E0
.240e	b0 0b		bcs $241b			bcs 	_IFMOkay
.2410	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2412	f0 13		beq $2427			beq 	_IFMError
.2414	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.2416	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.2419	18		clc				clc
.241a	60		rts				rts
.241b					_IFMOkay:
.241b	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.241d	0d 01 05	ora $0501			ora 	IFNewSign
.2420	85 0f		sta $0f				sta 	IFR0+IExp
.2422	18		clc				clc
.2423	60		rts				rts
.2424	4c ff ff	jmp $ffff			jmp 	$FFFF
.2427					_IFMError:
.2427	38		sec				sec
.2428	60		rts				rts
.2429					_IFMShiftAll:
.2429	a2 0c		ldx #$0c			ldx 	#IFR0
.242b	20 15 29	jsr $2915			jsr 	IFloatShiftRight
.242e	ae ff 04	ldx $04ff			ldx 	IFTarget
.2431	20 15 29	jsr $2915			jsr 	IFloatShiftRight
.2434	ee 00 05	inc $0500			inc 	IFNewExponent
.2437	60		rts				rts
.2438					IFMSignExtend:
.2438	29 3f		and #$3f			and 	#IFXMask
.243a	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.243c	90 02		bcc $2440			bcc 	_IFMNoSXX
.243e	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2440					_IFMNoSXX:
.2440	60		rts				rts
.2441					IFCalculateNewSign:
.2441	b5 03		lda $03,x			lda 	IExp,x
.2443	45 0f		eor $0f				eor 	IFR0+IExp
.2445	29 40		and #$40			and 	#IFSign
.2447	8d 01 05	sta $0501			sta 	IFNewSign
.244a	60		rts				rts
.0500					IFNewExponent:
>0500							.fill 	1
.0501					IFNewSign:
>0501							.fill 	1
.244b					IFloatDivideInteger:
.244b	20 64 24	jsr $2464			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.244e	b0 06		bcs $2456			bcs 	_IFDIExit
.2450	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.2452	20 77 28	jsr $2877			jsr 	IFloatCopyFromRegister
.2455	18		clc				clc
.2456					_IFDIExit:
.2456	60		rts				rts
.2457					IFloatModulusInteger:
.2457	20 64 24	jsr $2464			jsr 	IFloatDivideIntegerCommon
.245a	b0 07		bcs $2463			bcs 	_IFMIExit
.245c	ae ff 04	ldx $04ff			ldx 	IFTarget
.245f	20 77 28	jsr $2877			jsr 	IFloatCopyFromRegister
.2462	18		clc				clc
.2463					_IFMIExit:
.2463	60		rts				rts
.2464					IFloatDivideIntegerCommon:
.2464	8e ff 04	stx $04ff			stx 	IFTarget  					; this is s1, s0 = R0
.2467	20 41 24	jsr $2441			jsr 	IFCalculateNewSign 			; calculate sign of result
.246a	20 92 24	jsr $2492			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.246d	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.246f	20 df 28	jsr $28df			jsr 	IFloatCheckZero
.2472	f0 1c		beq $2490			beq 	_IFDIDivZero
.2474	ae ff 04	ldx $04ff			ldx 	IFTarget 					; zero Rx (S1)
.2477	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.247a	5a		phy				phy
.247b	a0 18		ldy #$18			ldy 	#24
.247d					_IFDILoop:
.247d	20 a3 24	jsr $24a3			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2480	20 af 24	jsr $24af			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2483	88		dey				dey
.2484	d0 f7		bne $247d			bne 	_IFDILoop 					; do it 24 times
.2486	7a		ply				ply
.2487	ad 01 05	lda $0501			lda 	IFNewSign 					; set sign of result.
.248a	29 40		and #$40			and 	#IFSign
.248c	85 1b		sta $1b				sta 	IFRTemp+IExp
.248e	18		clc				clc 								; is okay.
.248f	60		rts				rts
.2490					_IFDIDivZero:
.2490	38		sec				sec
.2491	60		rts				rts
.2492					IFDCopyRXToRTemp:
.2492	b5 00		lda $00,x			lda 	IM0,x
.2494	85 18		sta $18				sta 	IFRTemp+IM0
.2496	b5 01		lda $01,x			lda 	IM1,x
.2498	85 19		sta $19				sta 	IFRTemp+IM1
.249a	b5 02		lda $02,x			lda 	IM2,x
.249c	85 1a		sta $1a				sta 	IFRTemp+IM2
.249e	b5 03		lda $03,x			lda 	IExp,x
.24a0	85 1b		sta $1b				sta 	IFRTemp+IExp
.24a2	60		rts				rts
.24a3					IFDShiftSTempS1Left:
.24a3	a2 18		ldx #$18			ldx 	#IFRTemp
.24a5	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft
.24a8	ae ff 04	ldx $04ff			ldx 	IFTarget
.24ab	20 0e 29	jsr $290e			jsr 	IFloatRotateLeft
.24ae	60		rts				rts
.24af					IFDTrySubtract:
.24af	ae ff 04	ldx $04ff			ldx 	IFTarget 					; s1 = Rx
.24b2	38		sec				sec 								; subtract, saving the results on the stack.
.24b3	b5 00		lda $00,x			lda 	IM0,x
.24b5	e5 0c		sbc $0c				sbc 	IFR0+IM0
.24b7	48		pha				pha
.24b8	b5 01		lda $01,x			lda 	IM1,x
.24ba	e5 0d		sbc $0d				sbc 	IFR0+IM1
.24bc	48		pha				pha
.24bd	b5 02		lda $02,x			lda 	IM2,x
.24bf	e5 0e		sbc $0e				sbc 	IFR0+IM2
.24c1	b0 03		bcs $24c6			bcs 	_IFDCanSubtract
.24c3	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.24c4	68		pla				pla
.24c5	60		rts				rts
.24c6					_IFDCanSubtract:
.24c6	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.24c8	68		pla				pla
.24c9	95 01		sta $01,x			sta 	IM1,x
.24cb	68		pla				pla
.24cc	95 00		sta $00,x			sta 	IM0,x
.24ce	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.24d0	d0 06		bne $24d8			bne 	_IFDCSExit
.24d2	e6 19		inc $19				inc 	IFRTemp+IM1
.24d4	d0 02		bne $24d8			bne 	_IFDCSExit
.24d6	e6 1a		inc $1a				inc 	IFRTemp+IM2
.24d8					_IFDCSExit:
.24d8	60		rts				rts
.24d9					IFloatBitwiseAnd:
.24d9	5a		phy				phy
.24da	20 1e 25	jsr $251e			jsr 	IFPreProcessBitwise 		; set up everything.
.24dd	d0 0f		bne $24ee			bne 	_IFBAExit
.24df					_IFBALoop:
.24df	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.24e2	35 00		and $00,x			and 	IM0,x
.24e4	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.24e7	e8		inx				inx
.24e8	c8		iny				iny
.24e9	c0 03		cpy #$03			cpy 	#3
.24eb	d0 f2		bne $24df			bne 	_IFBALoop
.24ed	18		clc				clc
.24ee					_IFBAExit:
.24ee	7a		ply				ply
.24ef	60		rts				rts
.24f0					IFloatBitwiseOr:
.24f0	5a		phy				phy
.24f1	20 1e 25	jsr $251e			jsr 	IFPreProcessBitwise 		; set up everything.
.24f4	d0 0f		bne $2505			bne 	_IFBAExit
.24f6					_IFBALoop:
.24f6	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.24f9	15 00		ora $00,x			ora 	IM0,x
.24fb	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.24fe	e8		inx				inx
.24ff	c8		iny				iny
.2500	c0 03		cpy #$03			cpy 	#3
.2502	d0 f2		bne $24f6			bne 	_IFBALoop
.2504	18		clc				clc
.2505					_IFBAExit:
.2505	7a		ply				ply
.2506	60		rts				rts
.2507					IFloatBitwiseXor:
.2507	5a		phy				phy
.2508	20 1e 25	jsr $251e			jsr 	IFPreProcessBitwise 		; set up everything.
.250b	d0 0f		bne $251c			bne 	_IFBAExit
.250d					_IFBALoop:
.250d	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2510	55 00		eor $00,x			eor 	IM0,x
.2512	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2515	e8		inx				inx
.2516	c8		iny				iny
.2517	c0 03		cpy #$03			cpy 	#3
.2519	d0 f2		bne $250d			bne 	_IFBALoop
.251b	18		clc				clc
.251c					_IFBAExit:
.251c	7a		ply				ply
.251d	60		rts				rts
.251e					IFPreProcessBitwise:
.251e	a0 00		ldy #$00			ldy 	#0 							; set index.
.2520	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.2522	15 03		ora $03,x			ora 	IExp,x
.2524	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2526	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2528	38		sec				sec 								; carry set just in cases.
.2529	60		rts				rts
.252a					IFloatAbsoluteR0:
.252a	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.252c	29 bf		and #$bf			and 	#IFSign ^ 255
.252e	85 0f		sta $0f				sta 	IFR0+IExp
.2530	18		clc				clc
.2531	60		rts				rts
.2532					IFloatSquareRootR0:
.2532	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.2534	20 df 28	jsr $28df			jsr 	IFloatCheckZero
.2537	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.2539	29 40		and #$40			and 	#IFSign
.253b	d0 2f		bne $256c			bne 	_IFSRFail
.253d	20 1d 29	jsr $291d			jsr 	IFloatNormalise 			; it will work better !
.2540	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.2542	20 88 28	jsr $2888			jsr 	IFloatCopyToRegister
.2545	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2547	20 38 24	jsr $2438			jsr 	IFMSignExtend 				; sign extended version of the exponent
.254a	18		clc				clc
.254b	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.254d	85 0f		sta $0f				sta 	IFR0+IExp
.254f	4a		lsr a				lsr 	a 							; which we can halve.
.2550	38		sec				sec 								; convert back
.2551	e9 17		sbc #$17			sbc 	#23
.2553	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2555	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.2557	20 6e 25	jsr $256e			jsr 	_IFSRNewton
.255a	20 6e 25	jsr $256e			jsr 	_IFSRNewton
.255d	20 6e 25	jsr $256e			jsr 	_IFSRNewton
.2560	20 6e 25	jsr $256e			jsr 	_IFSRNewton
.2563	18		clc				clc
.2564	60		rts				rts
.2565					_IFSRZero:
.2565	a2 0c		ldx #$0c			ldx 	#IFR0
.2567	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.256a	18		clc				clc
.256b	60		rts				rts
.256c					_IFSRFail:
.256c	38		sec				sec
.256d	60		rts				rts
.256e					_IFSRNewton:
.256e	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.2570	20 35 28	jsr $2835			jsr 	IFloatPushRx
.2573	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2575	20 35 28	jsr $2835			jsr 	IFloatPushRx
.2578	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.257a	20 09 26	jsr $2609			jsr 	IFloatDivideFloat
.257d	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.257f	20 56 28	jsr $2856			jsr 	IFloatPullRx
.2582	20 dc 22	jsr $22dc			jsr 	IFloatAdd 					; now guess + original/guess
.2585	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.2587	20 15 29	jsr $2915			jsr 	IFloatShiftRight
.258a	a2 10		ldx #$10			ldx 	#IFR1
.258c	20 56 28	jsr $2856			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.258f	60		rts				rts
.2590					IFloatFractionalR0:
.2590	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2592	29 3f		and #$3f			and 	#IFXMask
.2594	f0 17		beq $25ad			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2596	20 2a 25	jsr $252a			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2599	a2 0c		ldx #$0c			ldx 	#IFR0
.259b	20 1d 29	jsr $291d			jsr 	IFloatNormalise 			; normalise R0
.259e	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.25a0	20 88 28	jsr $2888			jsr 	IFloatCopyToRegister
.25a3	20 e6 25	jsr $25e6			jsr 	IFloatIntegerR0 			; take integer part of R0
.25a6	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.25a8	20 d5 22	jsr $22d5			jsr 	IFloatSubtract
.25ab	80 05		bra $25b2			bra 	_FIPExit
.25ad					_FIPZero:
.25ad	a2 0c		ldx #$0c			ldx 	#IFR0
.25af	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.25b2					_FIPExit:
.25b2	18		clc				clc
.25b3	60		rts				rts
.25b4					IFloatCompare:
.25b4	20 d5 22	jsr $22d5			jsr 	IFloatSubtract 				; subtract R0 from RX.
.25b7	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.25b9	05 0f		ora $0f				ora 	IFR0+IExp
.25bb	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.25bd	29 3f		and #$3f			and 	#IFXMask
.25bf	d0 19		bne $25da			bne 	_IFCNonInteger
.25c1	20 df 28	jsr $28df			jsr 	IFloatCheckZero 			; check if zero
.25c4	f0 0f		beq $25d5			beq 	_IFCZero
.25c6					_IFCReturnSign:
.25c6	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.25c8	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.25ca	48		pha				pha
.25cb	a9 01		lda #$01			lda 	#1
.25cd	20 e8 28	jsr $28e8			jsr 	IFloatSetByte 				; return to +1
.25d0	68		pla				pla 								; sign bit back
.25d1	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.25d3	18		clc				clc
.25d4	60		rts				rts
.25d5					_IFCZero:
.25d5	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.25d8	18		clc				clc
.25d9	60		rts				rts
.25da					_IFCNonInteger:
.25da	a5 0c		lda $0c				lda 	IFR0+IM0
.25dc	29 00		and #$00			and		#$00
.25de	05 0d		ora $0d				ora 	IFR0+IM1
.25e0	05 0e		ora $0e				ora 	IFR0+IM2
.25e2	f0 f1		beq $25d5			beq 	_IFCZero 					; near enough !
.25e4	80 e0		bra $25c6			bra 	_IFCReturnSign 				; return the sign of the difference.
.25e6					IFloatIntegerR0:
.25e6	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.25e8	29 3f		and #$3f			and 	#IFXMask
.25ea	f0 1b		beq $2607			beq 	_FIPExit 					; if so do nothing
.25ec	a2 0c		ldx #$0c			ldx 	#IFR0
.25ee	20 1d 29	jsr $291d			jsr 	IFloatNormalise 			; normalise
.25f1	20 df 28	jsr $28df			jsr 	IFloatCheckZero 			; is it zero ?
.25f4	f0 0e		beq $2604			beq 	_FIPZero 					; if so return zero.
.25f6					_FIPShift:
.25f6	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.25f8	29 20		and #$20			and 	#$20 						; still -ve
.25fa	f0 0b		beq $2607			beq 	_FIPExit
.25fc	20 15 29	jsr $2915			jsr 	IFloatShiftRight 			; shift mantissa right
.25ff	20 3f 29	jsr $293f			jsr 	IFloatIncExponent 			; bump exponent
.2602	80 f2		bra $25f6			bra 	_FIPShift
.2604					_FIPZero:
.2604	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.2607					_FIPExit:
.2607	18		clc				clc
.2608	60		rts				rts
.2609					IFloatDivideFloat:
.2609	8e ff 04	stx $04ff			stx 	IFTarget  					; this is s1, s0 = R0
.260c	20 41 24	jsr $2441			jsr 	IFCalculateNewSign 			; calculate sign of result
.260f	20 1d 29	jsr $291d			jsr 	IFloatNormalise 			; normalise RX
.2612	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.2614	20 1d 29	jsr $291d			jsr 	IFloatNormalise
.2617	20 df 28	jsr $28df			jsr 	IFloatCheckZero
.261a	f0 56		beq $2672			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.261c	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.261e	20 38 24	jsr $2438			jsr 	IFMSignExtend
.2621	8d 00 05	sta $0500			sta 	IFNewExponent
.2624	ae ff 04	ldx $04ff			ldx 	IFTarget 					; calculate s1.exponent
.2627	b5 03		lda $03,x			lda 	IExp,x
.2629	20 38 24	jsr $2438			jsr 	IFMSignExtend
.262c	38		sec				sec
.262d	ed 00 05	sbc $0500			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2630	38		sec				sec
.2631	e9 17		sbc #$17			sbc 	#23
.2633	8d 00 05	sta $0500			sta 	IFNewExponent
.2636	20 74 26	jsr $2674			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2639	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.263b	10 08		bpl $2645			bpl 	_IFDFNoShiftResult
.263d	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.263f	20 15 29	jsr $2915			jsr 	IFloatShiftRight
.2642	ee 00 05	inc $0500			inc 	IFNewExponent
.2645					_IFDFNoShiftResult:
.2645	ad 00 05	lda $0500			lda 	IFNewExponent 				; underflow/overflow check.
.2648	30 06		bmi $2650			bmi 	_IFDFCheckUnderflow
.264a	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.264c	b0 24		bcs $2672			bcs 	_IFDFDivZero
.264e	80 11		bra $2661			bra		_IFDFExit
.2650					_IFDFCheckUnderflow:
.2650	ad 00 05	lda $0500			lda 	IFNewExponent 				; shift into a legal exponent.
.2653	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2655	b0 0a		bcs $2661			bcs 	_IFDFExit
.2657	ee 00 05	inc $0500			inc 	IFNewExponent
.265a	a2 18		ldx #$18			ldx 	#IFRTemp
.265c	20 15 29	jsr $2915			jsr 	IFloatShiftRight
.265f	80 ef		bra $2650			bra 	_IFDFCheckUnderflow
.2661					_IFDFExit:
.2661	ad 00 05	lda $0500			lda 	IFNewExponent 				; combine exponent and sign.
.2664	29 3f		and #$3f			and 	#IFXMask
.2666	0d 01 05	ora $0501			ora 	IFNewSign
.2669	85 1b		sta $1b				sta 	IFRTemp+IExp
.266b	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.266d	20 77 28	jsr $2877			jsr 	IFloatCopyFromRegister
.2670	18		clc				clc
.2671	60		rts				rts
.2672					_IFDFDivZero:
.2672	38		sec				sec
.2673	60		rts				rts
.2674					IFloatDivideSupport:
.2674	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.2676	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.2679	5a		phy				phy 								; main division loop x 23
.267a	a0 17		ldy #$17			ldy 	#23
.267c					_IFDSLoop:
.267c	20 af 24	jsr $24af			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.267f	20 a3 24	jsr $24a3			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2682	88		dey				dey
.2683	d0 f7		bne $267c			bne 	_IFDSLoop 					; do it 24 times
.2685	7a		ply				ply
.2686	60		rts				rts
.2687					IFloatIntegerToStringR0:
.2687	8d 02 05	sta $0502			sta 	IFBase 						; save base to use.
.268a	20 67 29	jsr $2967			jsr 	IFloatBufferReset			; empty buffer
.268d	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.268f	29 3f		and #$3f			and 	#IFXMask
.2691	d0 1e		bne $26b1			bne 	_IFIFail
.2693	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.2695	20 df 28	jsr $28df			jsr 	IFloatCheckZero
.2698	f0 0e		beq $26a8			beq 	_IFINotNegative
.269a	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.269c	29 40		and #$40			and 	#IFSign
.269e	f0 08		beq $26a8			beq 	_IFINotNegative
.26a0	a9 2d		lda #$2d			lda 	#"-"						; output -
.26a2	20 76 29	jsr $2976			jsr 	IFloatBufferWrite
.26a5	20 f1 28	jsr $28f1			jsr 	IFloatNegate 				; tidy up !
.26a8					_IFINotNegative:
.26a8	20 b3 26	jsr $26b3			jsr 	_IFIRecursiveConvert 		; start converting
.26ab	20 6e 29	jsr $296e			jsr 	IFloatGetBufferAddress
.26ae	18		clc				clc
.26af	80 01		bra $26b2			bra 	_IFIExit
.26b1					_IFIFail:
.26b1	38		sec				sec
.26b2					_IFIExit:
.26b2	60		rts				rts
.26b3					_IFIRecursiveConvert:
.26b3	a2 10		ldx #$10			ldx 	#IFR1
.26b5	20 88 28	jsr $2888			jsr 	IFloatCopyToRegister 		; R0->R1
.26b8	a2 0c		ldx #$0c			ldx 	#IFR0
.26ba	ad 02 05	lda $0502			lda 	IFBase 						; Base -> R0
.26bd	20 e8 28	jsr $28e8			jsr 	IFloatSetByte
.26c0	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.26c2	20 4b 24	jsr $244b			jsr 	IFloatDivideInteger
.26c5	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.26c7	20 df 28	jsr $28df			jsr 	IFloatCheckZero
.26ca	f0 09		beq $26d5			beq 	_IFIOutDigit
.26cc	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.26ce	48		pha				pha
.26cf	20 b3 26	jsr $26b3			jsr 	_IFIRecursiveConvert 		; convert the divider
.26d2	68		pla				pla
.26d3	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.26d5					_IFIOutDigit:
.26d5	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.26d7	c9 0a		cmp #$0a			cmp	 	#10
.26d9	90 02		bcc $26dd			bcc 	_IFINotHex
.26db	69 06		adc #$06			adc 	#6
.26dd					_IFINotHex:
.26dd	69 30		adc #$30			adc 	#48
.26df	20 76 29	jsr $2976			jsr 	IFloatBufferWrite
.26e2	60		rts				rts
.0502					IFBase:
>0502							.fill 	1
.26e3					IFloatFloatToStringR0:
.26e3	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.26e5	20 35 28	jsr $2835			jsr 	IFloatPushRx
.26e8	20 88 28	jsr $2888			jsr 	IFloatCopyToRegister
.26eb	20 e6 25	jsr $25e6			jsr 	IFloatIntegerR0				; make R0 integer
.26ee	a9 0a		lda #$0a			lda 	#10 						; base 10.
.26f0	20 87 26	jsr $2687			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.26f3	9c 03 05	stz $0503			stz 	IFloatDecimalCount 			; zero the decimal count.
.26f6	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.26f8	29 3f		and #$3f			and 	#IFXMask
.26fa	f0 44		beq $2740			beq 	_IFFSExit
.26fc					_IFloatFracLoop:
.26fc	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.26fe	20 77 28	jsr $2877			jsr 	IFloatCopyFromRegister
.2701	20 90 25	jsr $2590			jsr 	IFloatFractionalR0
.2704	20 1d 29	jsr $291d			jsr 	IFloatNormalise
.2707	a2 14		ldx #$14			ldx 	#IFR2
.2709	20 88 28	jsr $2888			jsr 	IFloatCopyToRegister 		; copy to R2
.270c	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.270e	a9 0a		lda #$0a			lda 	#10
.2710	20 e8 28	jsr $28e8			jsr 	IFloatSetByte
.2713	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.2715	20 86 23	jsr $2386			jsr 	IFloatMultiply
.2718	a2 14		ldx #$14			ldx 	#IFR2
.271a	20 88 28	jsr $2888			jsr 	IFloatCopyToRegister
.271d	20 e6 25	jsr $25e6			jsr 	IFloatIntegerR0 			; get integer part of R0
.2720	ad 03 05	lda $0503			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2723	c9 03		cmp #$03			cmp 	#3
.2725	f0 16		beq $273d			beq 	_IFFSExitStripZero
.2727	ad 03 05	lda $0503			lda 	IFloatDecimalCount 			; written the DP yet ?
.272a	d0 05		bne $2731			bne 	_IFloatNotFirst
.272c	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.272e	20 76 29	jsr $2976			jsr 	IFloatBufferWrite
.2731					_IFloatNotFirst:
.2731	ee 03 05	inc $0503			inc 	IFloatDecimalCount
.2734	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.2736	09 30		ora #$30			ora 	#"0"						; ASCII
.2738	20 76 29	jsr $2976			jsr 	IFloatBufferWrite 			; write to the buffer.
.273b	80 bf		bra $26fc			bra 	_IFloatFracLoop
.273d					_IFFSExitStripZero:
.273d	20 85 29	jsr $2985			jsr 	IFloatStripTrailingZeros
.2740					_IFFSExit:
.2740	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.2742	20 56 28	jsr $2856			jsr 	IFloatPullRx
.2745	20 6e 29	jsr $296e			jsr 	IFloatGetBufferAddress
.2748	18		clc				clc
.2749	60		rts				rts
.0503					IFloatDecimalCount:
>0503							.fill 	1
.274a					IFloatStringToFloatR0:
.274a	8d 04 05	sta $0504			sta 	IFCount 					; save it out.
.274d	86 0a		stx $0a				stx 	iTemp0
.274f	84 0b		sty $0b				sty 	iTemp0+1
.2751	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.2753	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.2756	9c 05 05	stz $0505			stz 	IFSignFlag 					; clear the sign flag
.2759	20 e6 27	jsr $27e6			jsr 	IFSTFGetNext 				; get first
.275c	f0 1b		beq $2779			beq 	_IFSTFFail 					; no character
.275e	90 10		bcc $2770			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2760	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2762	d0 15		bne $2779			bne 	_IFSTFFail
.2764	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2766	8d 05 05	sta $0505			sta 	IFSignFlag
.2769					_IFSTFLoop:
.2769	20 e6 27	jsr $27e6			jsr 	IFSTFGetNext 				; get next
.276c	b0 0b		bcs $2779			bcs 	_IFSTFFail 					; bad character.
.276e	f0 11		beq $2781			beq 	_IFSTFExit 					; end of data
.2770					_IFSTFHaveChar:
.2770	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2772	f0 08		beq $277c			beq 	_IFSTFDecimal
.2774	20 0a 28	jsr $280a			jsr 	IFSTFAddR0 					; add number in
.2777	80 f0		bra $2769			bra 	_IFSTFLoop 					; keep going until . or end.
.2779					_IFSTFFail:
.2779	38		sec				sec
.277a	80 0d		bra $2789			bra 	_IFSTFReturn
.277c					_IFSTFDecimal:
.277c	20 91 27	jsr $2791			jsr 	IFSTFDecimal 				; call the decimal places code.
.277f	b0 08		bcs $2789			bcs 	_IFSTFReturn 				; error
.2781					_IFSTFExit:
.2781	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2783	0d 05 05	ora $0505			ora 	IFSignFlag
.2786	85 0f		sta $0f				sta 	IFR0+IExp
.2788	18		clc				clc
.2789					_IFSTFReturn:
.2789	60		rts				rts
.278a					IFloatAddDecimalToR0:
.278a	8d 04 05	sta $0504			sta 	IFCount 					; save it out.
.278d	86 0a		stx $0a				stx 	iTemp0
.278f	84 0b		sty $0b				sty 	iTemp0+1
.2791					IFSTFDecimal:
.2791	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2793	20 35 28	jsr $2835			jsr 	IFloatPushRx
.2796	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2798	20 e6 28	jsr $28e6			jsr 	IFloatSetZero
.279b	9c 06 05	stz $0506			stz 	IFDecimalPlaces
.279e					_IFSTDLoop:
.279e	20 e6 27	jsr $27e6			jsr 	IFSTFGetNext 				; get next
.27a1	b0 41		bcs $27e4			bcs 	_IFSTFFail2 				; bad character.
.27a3	f0 11		beq $27b6			beq 	_IFSTFComplete 				; end of data, work out the result.
.27a5	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.27a7	f0 39		beq $27e2			beq 	_IFSTFExit2
.27a9	20 0a 28	jsr $280a			jsr 	IFSTFAddR0 					; add number in
.27ac	ee 06 05	inc $0506			inc 	IFDecimalPlaces 			; count decimals
.27af	ad 06 05	lda $0506			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.27b2	c9 03		cmp #$03			cmp 	#3
.27b4	90 e8		bcc $279e			bcc 	_IFSTDLoop
.27b6					_IFSTFComplete:
.27b6	ad 06 05	lda $0506			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.27b9	f0 27		beq $27e2			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.27bb	3a		dec a				dec 	a 							; table indexed from 1.
.27bc	0a		asl a				asl 	a
.27bd	0a		asl a				asl 	a
.27be	aa		tax				tax
.27bf	bd 21 28	lda $2821,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.27c2	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.27c4	bd 22 28	lda $2822,x			lda 	TableTen+1,x
.27c7	85 11		sta $11				sta  	IFR1+IM1
.27c9	bd 23 28	lda $2823,x			lda 	TableTen+2,x
.27cc	85 12		sta $12				sta  	IFR1+IM2
.27ce	bd 24 28	lda $2824,x			lda 	TableTen+3,x
.27d1	85 13		sta $13				sta  	IFR1+IExp
.27d3	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.27d5	20 86 23	jsr $2386			jsr 	IFloatMultiply
.27d8	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.27da	20 56 28	jsr $2856			jsr 	IFloatPullRx
.27dd	a2 10		ldx #$10			ldx 	#IFR1
.27df	20 dc 22	jsr $22dc			jsr 	IFloatAdd
.27e2					_IFSTFExit2:
.27e2	18		clc				clc
.27e3	60		rts				rts
.27e4					_IFSTFFail2:
.27e4	38		sec				sec
.27e5	60		rts				rts
.27e6					IFSTFGetNext:
.27e6	ad 04 05	lda $0504			lda 	IFCount  					; if count is zero, return with Z set.
.27e9	f0 19		beq $2804			beq 	_IFSTFReturnOk
.27eb	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.27ed	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.27ef	d0 02		bne $27f3			bne 	_IFSTFGNNoCarry
.27f1	e6 0b		inc $0b				inc 	iTemp0+1
.27f3					_IFSTFGNNoCarry:
.27f3	ce 04 05	dec $0504			dec 	IFCount 					; dec count.
.27f6	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.27f8	f0 08		beq $2802			beq 	_IFSTFGOkay
.27fa	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.27fc	90 08		bcc $2806			bcc 	_IFSTFGFail
.27fe	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2800	b0 04		bcs $2806			bcs 	_IFSTFGFail
.2802					_IFSTFGOkay:
.2802	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2804					_IFSTFReturnOk:
.2804	18		clc				clc
.2805	60		rts				rts
.2806					_IFSTFGFail:
.2806	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2808	38		sec				sec
.2809	60		rts				rts
.280a					IFSTFAddR0:
.280a	29 0f		and #$0f			and 	#15 						; to int value
.280c	48		pha				pha 								; save it.
.280d	a9 0a		lda #$0a			lda 	#10
.280f	a2 10		ldx #$10			ldx 	#IFR1
.2811	20 e8 28	jsr $28e8			jsr 	IFloatSetByte
.2814	20 86 23	jsr $2386			jsr 	IFloatMultiply
.2817	68		pla				pla
.2818	a2 10		ldx #$10			ldx 	#IFR1
.281a	20 e8 28	jsr $28e8			jsr 	IFloatSetByte
.281d	20 dc 22	jsr $22dc			jsr 	IFloatAdd
.2820	60		rts				rts
.0504					IFCount:
>0504							.fill 	1
.0505					IFSignFlag:
>0505							.fill 	1
.0506					IFDecimalPlaces:
>0506							.fill 	1
.2821					TableTen:
>2821	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2825	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2829	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>282d	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2831	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2835					IFloatPushRx:
.2835	5a		phy				phy
.2836	ac 07 05	ldy $0507			ldy 	IFStackIndex
.2839	b5 00		lda $00,x			lda 	IM0,x
.283b	99 08 05	sta $0508,y			sta 	IFStack,y
.283e	b5 01		lda $01,x			lda 	IM1,x
.2840	99 09 05	sta $0509,y			sta 	IFStack+1,y
.2843	b5 02		lda $02,x			lda 	IM2,x
.2845	99 0a 05	sta $050a,y			sta 	IFStack+2,y
.2848	b5 03		lda $03,x			lda 	IExp,x
.284a	99 0b 05	sta $050b,y			sta 	IFStack+3,y
.284d	c8		iny				iny
.284e	c8		iny				iny
.284f	c8		iny				iny
.2850	c8		iny				iny
.2851	8c 07 05	sty $0507			sty 	IFStackIndex
.2854	7a		ply				ply
.2855	60		rts				rts
.2856					IFloatPullRx:
.2856	5a		phy				phy
.2857	ac 07 05	ldy $0507			ldy 	IFStackIndex
.285a	88		dey				dey
.285b	88		dey				dey
.285c	88		dey				dey
.285d	88		dey				dey
.285e	b9 08 05	lda $0508,y			lda 	IFStack,y
.2861	95 00		sta $00,x			sta 	IM0,x
.2863	b9 09 05	lda $0509,y			lda 	IFStack+1,y
.2866	95 01		sta $01,x			sta 	IM1,x
.2868	b9 0a 05	lda $050a,y			lda 	IFStack+2,y
.286b	95 02		sta $02,x			sta 	IM2,x
.286d	b9 0b 05	lda $050b,y			lda 	IFStack+3,y
.2870	95 03		sta $03,x			sta 	IExp,x
.2872	8c 07 05	sty $0507			sty 	IFStackIndex
.2875	7a		ply				ply
.2876	60		rts				rts
.0507					IFStackIndex:
>0507							.fill 	1
.0508					IFStack:
>0508							.fill 	16*4
.2877					IFloatCopyFromRegister:
.2877	b5 00		lda $00,x			lda 	0,x
.2879	85 0c		sta $0c				sta 	IFR0
.287b	b5 01		lda $01,x			lda 	1,x
.287d	85 0d		sta $0d				sta 	IFR0+1
.287f	b5 02		lda $02,x			lda 	2,x
.2881	85 0e		sta $0e				sta 	IFR0+2
.2883	b5 03		lda $03,x			lda 	3,x
.2885	85 0f		sta $0f				sta 	IFR0+3
.2887	60		rts				rts
.2888					IFloatCopyToRegister:
.2888	a5 0c		lda $0c				lda 	IFR0
.288a	95 00		sta $00,x			sta 	0,x
.288c	a5 0d		lda $0d				lda 	IFR0+1
.288e	95 01		sta $01,x			sta 	1,x
.2890	a5 0e		lda $0e				lda 	IFR0+2
.2892	95 02		sta $02,x			sta 	2,x
.2894	a5 0f		lda $0f				lda 	IFR0+3
.2896	95 03		sta $03,x			sta 	3,x
.2898	60		rts				rts
.2899					IFloatLoadInline:
.2899	68		pla				pla 								; pop address off to iTemp0
.289a	85 0a		sta $0a				sta 	iTemp0
.289c	68		pla				pla
.289d	85 0b		sta $0b				sta 	iTemp0+1
.289f	a0 01		ldy #$01			ldy 	#1
.28a1	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.28a3	95 00		sta $00,x			sta 	0,x
.28a5	c8		iny				iny
.28a6	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.28a8	95 01		sta $01,x			sta 	1,x
.28aa	c8		iny				iny
.28ab	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.28ad	95 02		sta $02,x			sta 	2,x
.28af	c8		iny				iny
.28b0	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.28b2	95 03		sta $03,x			sta 	3,x
.28b4	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.28b5	a5 0a		lda $0a				lda 	iTemp0
.28b7	69 05		adc #$05			adc 	#5
.28b9	85 0a		sta $0a				sta 	iTemp0
.28bb	90 02		bcc $28bf			bcc 	_IFLINoCarry
.28bd	e6 0b		inc $0b				inc 	iTemp0+1
.28bf					_IFLINoCarry:
.28bf	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.28c2					IFloatMultiply8BitRx:
.28c2	5a		phy		        phy
.28c3	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.28c5	a4 0c		ldy $0c		        ldy     IFR0+IM0
.28c7	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.28c8	85 0c		sta $0c		        sta     IFR0+IM0
.28ca	84 0d		sty $0d		        sty     IFR0+IM1
.28cc	a9 00		lda #$00	        lda     #0
.28ce	a0 08		ldy #$08	        ldy     #8
.28d0					_IFMLoop:
.28d0	90 03		bcc $28d5	        bcc     _IFMNoAdd
.28d2	18		clc		        clc
.28d3	65 0d		adc $0d		        adc     IFR0+IM1
.28d5					_IFMNoAdd:
.28d5	6a		ror a		        ror     a
.28d6	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.28d8	88		dey		        dey
.28d9	d0 f5		bne $28d0	        bne     _IFMLoop
.28db	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.28dd	7a		ply		        ply
.28de	60		rts		        rts
.28df					IFloatCheckZero:
.28df	b5 00		lda $00,x			lda 	IM0,x
.28e1	15 01		ora $01,x			ora 	IM1,x
.28e3	15 02		ora $02,x			ora 	IM2,x
.28e5	60		rts				rts
.28e6					IFloatSetZero:
.28e6	a9 00		lda #$00			lda 	#0
.28e8					IFloatSetByte:
.28e8	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.28ea	74 01		stz $01,x			stz 	IM1,x
.28ec	74 02		stz $02,x			stz 	IM2,x
.28ee	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.28f0	60		rts				rts
.28f1					IFloatNegate:
.28f1	b5 03		lda $03,x			lda 	IExp,x
.28f3	49 40		eor #$40			eor 	#IFSign
.28f5	95 03		sta $03,x			sta 	IExp,x
.28f7	18		clc				clc
.28f8	60		rts				rts
.28f9					IFloatMantissaNegate:
.28f9	38		sec				sec
.28fa	a9 00		lda #$00			lda 	#0
.28fc	f5 00		sbc $00,x			sbc 	IM0,x
.28fe	95 00		sta $00,x			sta 	IM0,x
.2900	a9 00		lda #$00			lda 	#0
.2902	f5 01		sbc $01,x			sbc 	IM1,x
.2904	95 01		sta $01,x			sta 	IM1,x
.2906	a9 00		lda #$00			lda 	#0
.2908	f5 02		sbc $02,x			sbc 	IM2,x
.290a	95 02		sta $02,x			sta 	IM2,x
.290c	60		rts				rts
.290d					IFloatShiftLeft:
.290d	18		clc				clc
.290e					IFloatRotateLeft:
.290e	36 00		rol $00,x			rol 	IM0,x
.2910	36 01		rol $01,x			rol 	IM1,x
.2912	36 02		rol $02,x			rol 	IM2,x
.2914	60		rts				rts
.2915					IFloatShiftRight:
.2915	18		clc				clc
.2916					IFloatRotateRight:
.2916	76 02		ror $02,x			ror 	IM2,x
.2918	76 01		ror $01,x			ror 	IM1,x
.291a	76 00		ror $00,x			ror 	IM0,x
.291c	60		rts				rts
.291d					IFloatNormalise:
.291d	20 df 28	jsr $28df			jsr 	IFloatCheckZero 			; is it zero
.2920	f0 18		beq $293a			beq 	_IFNExitZero 				; if so exit
.2922					_IFNLoop:
.2922	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2924	29 c0		and #$c0			and 	#$C0
.2926	c9 40		cmp #$40			cmp 	#$40
.2928	f0 13		beq $293d			beq 	_IFNExitOkay 				; if so , then we are done.
.292a	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.292c	29 3f		and #$3f			and 	#$3F
.292e	c9 20		cmp #$20			cmp 	#$20
.2930	f0 0b		beq $293d			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2932	20 53 29	jsr $2953			jsr 	IFloatDecExponent
.2935	20 0d 29	jsr $290d			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2938	80 e8		bra $2922			bra 	_IFNLoop
.293a					_IFNExitZero:
.293a	20 e6 28	jsr $28e6			jsr 	IFloatSetZero 				; set the result to zero
.293d					_IFNExitOkay:
.293d	18		clc				clc  								; return with CC.
.293e	60		rts				rts
.293f					IFloatIncExponent:
.293f	b5 03		lda $03,x			lda 	IExp,x
.2941	48		pha				pha
.2942	29 c0		and #$c0			and 	#$C0
.2944	8d 48 05	sta $0548			sta 	IFXTemp
.2947	68		pla				pla
.2948	1a		inc a				inc 	a
.2949	29 3f		and #$3f			and 	#$3F
.294b	48		pha				pha
.294c	0d 48 05	ora $0548			ora 	IFXTemp
.294f	95 03		sta $03,x			sta 	IExp,x
.2951	68		pla				pla
.2952	60		rts				rts
.2953					IFloatDecExponent:
.2953	b5 03		lda $03,x			lda 	IExp,x
.2955	48		pha				pha
.2956	29 c0		and #$c0			and 	#$C0
.2958	8d 48 05	sta $0548			sta 	IFXTemp
.295b	68		pla				pla
.295c	3a		dec a				dec 	a
.295d	29 3f		and #$3f			and 	#$3F
.295f	48		pha				pha
.2960	0d 48 05	ora $0548			ora 	IFXTemp
.2963	95 03		sta $03,x			sta 	IExp,x
.2965	68		pla				pla
.2966	60		rts				rts
.0548					IFXTemp:
>0548							.fill 	1
.2967					IFloatBufferReset:
.2967	9c 49 05	stz $0549			stz 	IFBufferCount
.296a	9c 4a 05	stz $054a			stz 	IFBuffer
.296d	60		rts				rts
.296e					IFloatGetBufferAddress:
.296e	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.2970	a2 4a		ldx #$4a			ldx 	#(IFBuffer & $FF)
.2972	ad 49 05	lda $0549			lda 	IFBufferCount
.2975	60		rts				rts
.2976					IFloatBufferWrite:
.2976	da		phx				phx
.2977	ae 49 05	ldx $0549			ldx 	IFBufferCount
.297a	9d 4a 05	sta $054a,x			sta 	IFBuffer,x
.297d	9e 4b 05	stz $054b,x			stz 	IFBuffer+1,x
.2980	ee 49 05	inc $0549			inc 	IFBufferCount
.2983	fa		plx				plx
.2984	60		rts				rts
.2985					IFloatStripTrailingZeros:
.2985	ae 49 05	ldx $0549			ldx 	IFBufferCount
.2988	bd 49 05	lda $0549,x			lda 	IFBuffer-1,x
.298b	c9 30		cmp #$30			cmp		#"0"
.298d	d0 0f		bne $299e			bne 	_IFSTExit
.298f	bd 48 05	lda $0548,x			lda 	IFBuffer-2,x
.2992	c9 2e		cmp #$2e			cmp 	#"."
.2994	f0 08		beq $299e			beq 	_IFSTExit
.2996	ce 49 05	dec $0549			dec 	IFBufferCount
.2999	9e 49 05	stz $0549,x			stz 	IFBuffer-1,x
.299c	80 e7		bra $2985			bra 	IFloatStripTrailingZeros
.299e					_IFSTExit:
.299e	60		rts				rts
.0549					IFBufferCount:
>0549							.fill 	1
.054a					IFBuffer:
>054a							.fill 	25
.299f					IFloatCheck:
.299f	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.29a1	09 40		ora #$40			ora 	#IFSign
.29a3	85 0f		sta $0f				sta 	IFR0+IExp
.29a5	20 dc 22	jsr $22dc			jsr 	IFloatAdd 					; add allowed to error.
.29a8	a2 0c		ldx #$0c			ldx 	#IFR0
.29aa	20 df 28	jsr $28df			jsr 	IFloatCheckZero 			; error if < 0
.29ad	f0 06		beq $29b5			beq 	_IFAOkay
.29af	a5 0f		lda $0f				lda 	IFR0+IExp
.29b1	29 40		and #$40			and 	#IFSign
.29b3	d0 01		bne $29b6			bne 	_IFAFail
.29b5					_IFAOkay:
.29b5	60		rts				rts
.29b6					_IFAFail:
.29b6	38		sec				sec
.29b7	68		pla				pla 								; get address - 2
.29b8	e9 02		sbc #$02			sbc 	#2
.29ba	aa		tax				tax
.29bb	68		pla				pla
.29bc	e9 00		sbc #$00			sbc 	#0
.29be	a8		tay				tay
.29bf	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.29c1					_IFAStop:
>29c1	db						.byte 	$DB 						; display an error AA ADR ADR
.29c2	80 fd		bra $29c1			bra 	_IFAStop

;******  Return to file: basic.asm

.29c4					NotImplemented:
.29c4	a9 ff		lda #$ff			lda 	#$FF
.29c6	80 04		bra $29cc			bra 	EnterDbg
.29c8					ErrorHandler:
.29c8	fa		plx				plx
.29c9	7a		ply				ply
.29ca	a9 ee		lda #$ee			lda 	#$EE
.29cc					EnterDbg:
>29cc	db						.byte 	$DB
.29cd	4c cc 29	jmp $29cc			jmp 	EnterDbg

;******  End of listing
