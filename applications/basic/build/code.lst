
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Sat Jun  3 06:38:55 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=$6000					startMemory = $6000
=$a000					endMemory = $A000
=2					stackPages = 2

;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe5					OSGetScreenSize          = $ffe5 ; Get size of screen to XY
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeyboardWithCursor = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1)
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadDevice             = $fff4 ; Read device X to A
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#startMemory >> 8
.1002	a0 a0		ldy #$a0			ldy 	#endMemory >> 8
.1004	20 90 1c	jsr $1c90			jsr 	PGMSetBaseAddress
.1007	20 81 25	jsr $2581			jsr 	IFInitialise
.100a	4c 77 12	jmp $1277			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 8a 14	jsr $148a			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 99 21	jmp $2199		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 a3 1c	jsr $1ca3			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 20 25	jsr $2520			jsr 	VARClearHashTables
.1028	ad 47 03	lda $0347			lda 	PGMEndMemoryHigh
.102b	20 04 23	jsr $2304			jsr 	StackReset
.102e	20 63 23	jsr $2363			jsr 	StringSystemInitialise
.1031	60		rts				rts
.1032					AllocateMemory:
.1032	5a		phy				phy 								; save Y
.1033	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.1035	5a		phy				phy
.1036	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1038	5a		phy				phy
.1039	a8		tay				tay 								; count is now in XY
.103a					_AllocateLoop:
.103a	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103c	d0 04		bne $1042			bne 	_AllocateOne
.103e	c0 00		cpy #$00			cpy 	#0
.1040	f0 15		beq $1057			beq 	_AllocateExit
.1042					_AllocateOne:
.1042	a9 00		lda #$00			lda 	#0 							; zero byte
.1044	92 24		sta ($24)			sta 	(freeMemory)
.1046	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1048	d0 05		bne $104f			bne 	_AllocateSkipCarry
.104a	e6 25		inc $25				inc 	freeMemory+1
.104c	20 5b 10	jsr $105b			jsr 	ClearCheckMemory
.104f					_AllocateSkipCarry:
.104f	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1051	d0 01		bne $1054			bne 	_AllocateSkipBorrow
.1053	ca		dex				dex
.1054					_AllocateSkipBorrow:
.1054	88		dey				dey
.1055	80 e3		bra $103a			bra 	_AllocateLoop
.1057					_AllocateExit:
.1057	fa		plx				plx 								; restore address
.1058	68		pla				pla
.1059	7a		ply				ply 								; restore Y
.105a	60		rts				rts
.105b					ClearCheckMemory:
.105b	a5 25		lda $25				lda 	freeMemory+1
.105d	1a		inc a				inc 	a
.105e	1a		inc a				inc 	a
.105f	cd 4f 04	cmp $044f			cmp 	stringMemory+1
.1062	b0 01		bcs $1065			bcs  	_CCMError
.1064	60		rts				rts
.1065					_CCMError:
.1065	4c 2b 22	jmp $222b		jmp	ErrorV_memory
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1068					CommandDIM:
.1068	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check identifier follows.
.106a	29 c0		and #$c0			and 	#$C0
.106c	c9 40		cmp #$40			cmp 	#$40
.106e	d0 39		bne $10a9			bne 	_CDSyntax
.1070	20 d7 24	jsr $24d7			jsr 	VARGetInfo 					; get information
.1073	ad 55 04	lda $0455			lda 	VARType 					; check array.
.1076	29 02		and #$02			and 	#2
.1078	f0 2f		beq $10a9			beq 	_CDSyntax
.107a	20 89 24	jsr $2489			jsr 	VARFind 					; does it already exist
.107d	b0 2d		bcs $10ac			bcs 	_CDExists
.107f	20 35 24	jsr $2435			jsr 	VARCreate 					; create it - returns data ptr in XA
.1082	da		phx				phx 								; save target address
.1083	48		pha				pha
.1084	ad 55 04	lda $0455			lda 	VARType 					; type ID.
.1087	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.1089	20 af 10	jsr $10af			jsr 	CreateArray 				; create array to XA
.108c	84 20		sty $20				sty 	zTemp1 						; save Y
.108e	7a		ply				ply 								; restore target to zTemp0
.108f	84 1e		sty $1e				sty 	zTemp0
.1091	7a		ply				ply
.1092	84 1f		sty $1f				sty 	zTemp0+1
.1094	92 1e		sta ($1e)			sta 	(zTemp0) 					; save new array
.1096	a0 01		ldy #$01			ldy 	#1
.1098	8a		txa				txa
.1099	91 1e		sta ($1e),y			sta 	(zTemp0),y
.109b	a4 20		ldy $20				ldy 	zTemp1 						; restore zTemp1
.109d	20 95 22	jsr $2295			jsr 	ERRCheckRParen 				; check )
.10a0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10a2	c8		iny				iny
.10a3	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a5	f0 c1		beq $1068			beq 	CommandDIM
.10a7	88		dey				dey
.10a8	60		rts				rts
.10a9					_CDSyntax:
.10a9	4c 48 21	jmp $2148		jmp	ErrorV_syntax
.10ac					_CDExists:
.10ac	4c 05 22	jmp $2205		jmp	ErrorV_redefine
.10af					CreateArray:
.10af	8d 3a 03	sta $033a			sta 	CAType						; save type
.10b2	20 9c 14	jsr $149c			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10b5	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10b7	c9 99		cmp #$99			cmp 	#PR_COMMA
.10b9	f0 04		beq $10bf			beq 	_CATwoDimensions
.10bb	20 0b 11	jsr $110b			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10be	60		rts				rts
.10bf					_CATwoDimensions:
.10bf	a5 0d		lda $0d				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10c1	8d 3c 03	sta $033c			sta 	CADim1+1
.10c4	a5 0c		lda $0c				lda 	IFR0+IM0
.10c6	8d 3b 03	sta $033b			sta 	CADim1+0
.10c9	20 9d 22	jsr $229d			jsr 	ERRCheckComma 				; check comma
.10cc	20 9c 14	jsr $149c			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10cf	5a		phy				phy 								; save Y position
.10d0	18		clc				clc 								; allocate the outer array of pointers.
.10d1	ae 3c 03	ldx $033c			ldx 	CADim1+1
.10d4	ad 3b 03	lda $033b			lda 	CADim1
.10d7	20 4a 11	jsr $114a			jsr 	CSAAllocate 				; allocate the outer array
.10da	da		phx				phx									; save this address on the stack
.10db	48		pha				pha
.10dc	86 23		stx $23				stx 	zTemp2+1					; and in zTemp2
.10de	85 22		sta $22				sta 	zTemp2
.10e0					_CACreateSubLoop:
.10e0	38		sec				sec
.10e1	20 0b 11	jsr $110b			jsr 	CreateSingleArray 			; create data array of required size.
.10e4	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10e6	91 22		sta ($22),y			sta 	(zTemp2),y
.10e8	8a		txa				txa
.10e9	c8		iny				iny
.10ea	91 22		sta ($22),y			sta 	(zTemp2),y
.10ec	18		clc				clc  								; next slot.
.10ed	a5 22		lda $22				lda 	zTemp2
.10ef	69 02		adc #$02			adc 	#2
.10f1	85 22		sta $22				sta 	zTemp2
.10f3	90 02		bcc $10f7			bcc 	_CACNoCarry
.10f5	e6 23		inc $23				inc 	zTemp2+1
.10f7					_CACNoCarry:
.10f7	ad 3b 03	lda $033b			lda 	CADim1 						; use DIM1 as a counter
.10fa	d0 03		bne $10ff			bne 	_CACNoBorrow
.10fc	ce 3c 03	dec $033c			dec 	CADim1+1
.10ff					_CACNoBorrow:
.10ff	ce 3b 03	dec $033b			dec 	CADim1
.1102	ad 3c 03	lda $033c			lda 	CADim1+1 					; but do one more.
.1105	10 d9		bpl $10e0			bpl 	_CACreateSubLoop
.1107	68		pla				pla
.1108	fa		plx				plx
.1109	7a		ply				ply
.110a	60		rts				rts
.110b					CreateSingleArray:
.110b	5a		phy				phy
.110c	38		sec				sec 								; allocate memory block all zeros.
.110d	a5 0c		lda $0c				lda 	IFR0+IM0
.110f	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1111	20 4a 11	jsr $114a			jsr 	CSAAllocate
.1114	ac 3a 03	ldy $033a			ldy 	CAType 						; if numbers, we don't need to initialise.
.1117	f0 2f		beq $1148			beq 	_CSANoInit
.1119	da		phx				phx 								; save address of new array
.111a	48		pha				pha
.111b	85 1e		sta $1e				sta 	zTemp0 						; address in zTemp0
.111d	86 1f		stx $1f				stx 	zTemp0+1
.111f	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1121	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1123	a8		tay				tay
.1124	b2 1e		lda ($1e)			lda 	(zTemp0)
.1126	aa		tax				tax
.1127					_CSAEraseString:
.1127	5a		phy				phy
.1128	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.112a	a9 80		lda #$80			lda 	#$80
.112c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.112e	7a		ply				ply
.112f	18		clc				clc 								; add 4 to next slot.
.1130	a5 1e		lda $1e				lda 	zTemp0
.1132	69 04		adc #$04			adc 	#4
.1134	85 1e		sta $1e				sta 	zTemp0
.1136	90 02		bcc $113a			bcc 	_CSAENoCarry
.1138	e6 1f		inc $1f				inc 	zTemp0+1
.113a					_CSAENoCarry:
.113a	e0 00		cpx #$00			cpx 	#0
.113c	d0 01		bne $113f			bne 	_CSANoBorrow
.113e	88		dey				dey
.113f					_CSANoBorrow:
.113f	ca		dex				dex
.1140	d0 e5		bne $1127			bne 	_CSAEraseString
.1142	c0 00		cpy #$00			cpy 	#0
.1144	d0 e1		bne $1127			bne 	_CSAEraseString
.1146	68		pla				pla
.1147	fa		plx				plx
.1148					_CSANoInit:
.1148	7a		ply				ply
.1149	60		rts				rts
.114a					CSAAllocate:
.114a	08		php				php 								; save type flag.
.114b	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.114c	d0 01		bne $114f			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.114e	e8		inx				inx
.114f					_CSAANoCarry:
.114f	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1151	b0 2e		bcs $1181			bcs 	_CSARange
.1153	28		plp				plp 								; restore type flag
.1154	08		php				php 								; save it back again.
.1155	da		phx				phx 								; save size.
.1156	48		pha				pha
.1157	86 1f		stx $1f				stx  	zTemp0+1 					; now in ztemp0+1:X
.1159	90 03		bcc $115e			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.115b	0a		asl a				asl 	a
.115c	26 1f		rol $1f				rol 	zTemp0+1
.115e					_CSAATimes2:
.115e	0a		asl a				asl 	a
.115f	26 1f		rol $1f				rol 	zTemp0+1
.1161	18		clc				clc
.1162	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1164	90 02		bcc $1168			bcc 	_CSAANoCarry2
.1166	e6 1f		inc $1f				inc 	zTemp0+1
.1168					_CSAANoCarry2:
.1168	a6 1f		ldx $1f				ldx 	zTemp0+1 					; XA is the bytes required.
.116a	20 32 10	jsr $1032			jsr 	AllocateMemory 				; allocate memory to XA
.116d	86 1f		stx $1f				stx 	zTemp0+1 					; save pointers
.116f	85 1e		sta $1e				sta 	zTemp0
.1171	68		pla				pla  								; write element count to first 2 bytes
.1172	92 1e		sta ($1e)			sta 	(zTemp0)
.1174	68		pla				pla 								; msb of element count
.1175	28		plp				plp 								; CC if pointer array
.1176	b0 02		bcs $117a			bcs 	_CSAAIsData
.1178	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.117a					_CSAAIsData:
.117a	a0 01		ldy #$01			ldy 	#1
.117c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.117e	a5 1e		lda $1e				lda 	zTemp0 						; fix XA back up again
.1180	60		rts				rts
.1181					_CSARange:
.1181	4c 58 21	jmp $2158		jmp	ErrorV_range
.033a					CAType:
>033a							.fill 	1
.033b					CADim1:
>033b							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1184					Command_Print:
.1184					Command_IP_Main:
.1184	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1185					_CPLoop:
.1185	08		php				php 								; save last action flag
.1186	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1188	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.118a	f0 3e		beq $11ca			beq 	_CPExit 					; without consuming
.118c	c9 9b		cmp #$9b			cmp 	#PR_COLON
.118e	f0 3a		beq $11ca			beq 	_CPExit
.1190	68		pla				pla 								; throw last action flag
.1191	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1193	c8		iny				iny
.1194	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1196	f0 2f		beq $11c7			beq 	_CPContinueWithSameLine
.1198	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.119a	f0 26		beq $11c2			beq 	_CPTab
.119c	88		dey				dey 								; undo the get.
.119d	20 4a 14	jsr $144a			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11a0	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.11a2	10 14		bpl $11b8			bpl 	_CPNumber
.11a4	5a		phy				phy
.11a5	18		clc				clc 								; string address to YX
.11a6	a5 0c		lda $0c				lda 	IFR0+IM0
.11a8	aa		tax				tax
.11a9	a5 0d		lda $0d				lda 	IFR0+IM1
.11ab	a8		tay				tay
.11ac	e8		inx				inx 								; point to 1st character
.11ad	d0 01		bne $11b0			bne 	_CPNoCarry
.11af	c8		iny				iny
.11b0					_CPNoCarry:
.11b0	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.11b2	20 d3 11	jsr $11d3			jsr 	CPPrintAYX 					; print AYX
.11b5	7a		ply				ply
.11b6	80 cc		bra $1184			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11b8					_CPNumber:
.11b8	5a		phy				phy
.11b9	20 93 29	jsr $2993			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11bc	20 d3 11	jsr $11d3			jsr 	CPPrintAYX 					; print AYX
.11bf	7a		ply				ply
.11c0	80 c2		bra $1184			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11c2					_CPTab:
.11c2	a9 09		lda #$09			lda 	#9 							; print TAB
.11c4	20 e6 11	jsr $11e6			jsr 	CPPrintA
.11c7					_CPContinueWithSameLine:
.11c7	38		sec				sec 								; loop round with carry set, which
.11c8	80 bb		bra $1185			bra 	_CPLoop 					; will inhibit final CR
.11ca					_CPExit:
.11ca	28		plp				plp 								; get last action flag
.11cb	b0 05		bcs $11d2			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11cd	a9 0d		lda #$0d			lda 	#13 						; print new line
.11cf	20 e6 11	jsr $11e6			jsr 	CPPrintA
.11d2					_CPExit2:
.11d2	60		rts				rts
.11d3					CPPrintAYX:
.11d3	86 1e		stx $1e				stx 	zTemp0
.11d5	84 1f		sty $1f				sty 	zTemp0+1
.11d7	aa		tax				tax
.11d8	f0 0b		beq $11e5			beq 	_CPPrintExit
.11da	a0 00		ldy #$00			ldy 	#0
.11dc					_CPPrintAYXLoop:
.11dc	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.11de	20 e6 11	jsr $11e6			jsr 	CPPrintA
.11e1	c8		iny				iny
.11e2	ca		dex				dex
.11e3	d0 f7		bne $11dc			bne 	_CPPrintAYXLoop
.11e5					_CPPrintExit:
.11e5	60		rts				rts
.11e6					CPPrintA:
.11e6	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.11e9					CommandLET:
.11e9	20 12 15	jsr $1512			jsr 	EXPTermR0 					; get term
.11ec	90 6d		bcc $125b			bcc 	_CLError 					; must be a reference term.
.11ee	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.11f0	48		pha				pha
.11f1	a5 0d		lda $0d				lda 	IFR0+IM1
.11f3	48		pha				pha
.11f4	a5 0f		lda $0f				lda 	IFR0+IExp
.11f6	48		pha				pha
.11f7	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.11f9	20 a5 22	jsr $22a5			jsr 	ERRCheckA
.11fc	20 4a 14	jsr $144a			jsr 	EXPEvaluateExpression 		; right hand side.
.11ff	68		pla				pla 								; type of l-expr
.1200	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.1202	30 5a		bmi $125e			bmi 	_CLType
.1204	fa		plx				plx 	 							; pop target address to zTemp0
.1205	86 1f		stx $1f				stx 	zTemp0+1
.1207	fa		plx				plx
.1208	86 1e		stx $1e				stx 	zTemp0
.120a	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.120c	30 15		bmi $1223			bmi 	_CLStringAssign
.120e	5a		phy				phy
.120f	a0 03		ldy #$03			ldy 	#3
.1211	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1213	88		dey				dey
.1214	a5 0e		lda $0e				lda 	IFR0+IM2
.1216	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1218	88		dey				dey
.1219	a5 0d		lda $0d				lda 	IFR0+IM1
.121b	91 1e		sta ($1e),y			sta 	(zTemp0),y
.121d	a5 0c		lda $0c				lda 	IFR0+IM0
.121f	92 1e		sta ($1e)			sta 	(zTemp0)
.1221	7a		ply				ply
.1222	60		rts				rts
.1223					_CLStringAssign:
.1223	5a		phy				phy
.1224	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1226	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1228	12 1e		ora ($1e)			ora 	(zTemp0)
.122a	f0 23		beq $124f			beq 	_CLConcreteString
.122c	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.122e	85 20		sta $20				sta 	zTemp1
.1230	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1232	85 21		sta $21				sta 	zTemp1+1
.1234	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.1236	38		sec				sec 								; we want 3 for slot size, status, string size.
.1237	e9 03		sbc #$03			sbc 	#3
.1239	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.123b	90 12		bcc $124f			bcc 	_CLConcreteString 			; if so, concrete the string again.
.123d	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.123f	1a		inc a				inc 	a
.1240	aa		tax				tax
.1241	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1243					_CLReplaceString:
.1243	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.1245	c8		iny				iny
.1246	c8		iny				iny
.1247	91 20		sta ($20),y			sta 	(zTemp1),y
.1249	88		dey				dey
.124a	ca		dex				dex
.124b	d0 f6		bne $1243			bne 	_CLReplaceString
.124d	80 0a		bra $1259			bra 	_CLExit
.124f					_CLConcreteString:
.124f	20 18 23	jsr $2318			jsr 	StringConcrete  			; concreted string in XA.
.1252	a0 01		ldy #$01			ldy 	#1 							; store the address
.1254	92 1e		sta ($1e)			sta 	(zTemp0)
.1256	8a		txa				txa
.1257	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1259					_CLExit:
.1259	7a		ply				ply
.125a	60		rts				rts
.125b					_CLError:
.125b	4c 6b 22	jmp $226b		jmp	ErrorV_variable
.125e					_CLType:
.125e	4c 75 21	jmp $2175		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1261					Command_NEW:
.1261	20 97 1c	jsr $1c97			jsr 	PGMNewProgram
.1264	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1267	4c c4 12	jmp $12c4			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.126a					Command_REM:
.126a					Command_REM2:
.126a	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.126c	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.126e	d0 06		bne $1276			bne 	_CRExit
.1270	c8		iny				iny 								; skip over it, it's a comment.
.1271	98		tya				tya
.1272	38		sec				sec
.1273	71 1c		adc ($1c),y			adc 	(codePtr),y
.1275	a8		tay				tay
.1276					_CRExit:
.1276	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.1277					Command_RUN:
.1277	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.127a	ad 46 03	lda $0346			lda 	PGMBaseHigh 				; back to the program start
.127d	85 1d		sta $1d				sta 	codePtr+1
.127f	64 1c		stz $1c				stz 	codePtr
.1281	80 0b		bra $128e			bra 	RUNNewLine
.1283					RUNEndOfLine:
.1283	18		clc				clc 								; advance to next line.
.1284	b2 1c		lda ($1c)			lda 	(codePtr)
.1286	65 1c		adc $1c				adc 	codePtr
.1288	85 1c		sta $1c				sta 	codePtr
.128a	90 02		bcc $128e			bcc 	_RELNoCarry
.128c	e6 1d		inc $1d				inc 	codePtr+1
.128e					_RELNoCarry:
.128e					RUNNewLine:
.128e	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1290	9a		txs				txs
.1291	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.1293	f0 2f		beq $12c4			beq 	Command_END
.1295	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.1297					RUNNewCommand:
.1297	9c 4d 04	stz $044d			stz 	stringInitialised 			; reset string system.
.129a	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.129c	10 1a		bpl $12b8			bpl		_RUNNotToken 				; probably an identifier
.129e	c8		iny				iny 								; consume token
.129f	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.12a1	f0 f4		beq $1297			beq 	RUNNewCommand
.12a3	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.12a5	b0 0e		bcs $12b5			bcs 	_RUNSyntax
.12a7	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.12a9	90 0a		bcc $12b5			bcc 	_RUNSyntax
.12ab	0a		asl a				asl 	a 							; double into X.
.12ac	aa		tax				tax
.12ad	20 b2 12	jsr $12b2			jsr 	_RUNDispatchMain			; call the main dispatcher
.12b0	80 e5		bra $1297			bra 	RUNNewCommand
.12b2					_RUNDispatchMain:
.12b2	7c ad 19	jmp ($19ad,x)			jmp 	(VectorTable,x)
.12b5					_RUNSyntax:
.12b5	4c 48 21	jmp $2148		jmp	ErrorV_syntax
.12b8					_RUNNotToken:
.12b8	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.12ba	90 f9		bcc $12b5			bcc 	_RUNSyntax
.12bc	20 e9 11	jsr $11e9			jsr 	CommandLET 					; assignment
.12bf	80 d6		bra $1297			bra 	RUNNewCommand 				; loop round.
.12c1					Command_Shift_Handler:
.12c1	4c 86 21	jmp $2186		jmp	ErrorV_unimplemented
.12c4					Command_END:
.12c4	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.12c7					Command_STOP:
.12c7	4c e3 21	jmp $21e3		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.12ca					NoExec01:
.12ca					NoExec02:
.12ca					NoExec03:
.12ca					NoExec04:
.12ca					NoExec05:
.12ca					NoExec06:
.12ca					NoExec07:
.12ca					NoExec08:
.12ca	4c 48 21	jmp $2148		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.12cd					EXPBinAdd:
.12cd	24 0f		bit $0f				bit 	IFR0+IExp
.12cf	30 6f		bmi $1340			bmi 	EXPConcatenate
.12d1	a2 10		ldx #$10			ldx 	#IFR1
.12d3	4c 8c 25	jmp $258c			jmp 	IFloatAdd
.12d6					EXPBinSub:
.12d6	24 0f		bit $0f				bit 	IFR0+IExp
.12d8	30 3f		bmi $1319			bmi 	EXPTypeError
.12da	a2 10		ldx #$10			ldx 	#IFR1
.12dc	4c 85 25	jmp $2585			jmp 	IFloatSubtract
.12df					EXPBinMul:
.12df	24 0f		bit $0f				bit 	IFR0+IExp
.12e1	30 36		bmi $1319			bmi 	EXPTypeError
.12e3	a2 10		ldx #$10			ldx 	#IFR1
.12e5	4c 36 26	jmp $2636			jmp 	IFloatMultiply
.12e8					EXPBinFDiv:
.12e8	24 0f		bit $0f				bit 	IFR0+IExp
.12ea	30 2d		bmi $1319			bmi 	EXPTypeError
.12ec	a2 10		ldx #$10			ldx 	#IFR1
.12ee	20 b9 28	jsr $28b9			jsr 	IFloatDivideFloat
.12f1	b0 0f		bcs $1302			bcs 	EXPDZero
.12f3	60		rts				rts
.12f4					EXPBinIDiv:
.12f4	24 0f		bit $0f				bit 	IFR0+IExp
.12f6	30 21		bmi $1319			bmi 	EXPTypeError
.12f8	a2 10		ldx #$10			ldx 	#IFR1
.12fa	20 b9 28	jsr $28b9			jsr 	IFloatDivideFloat
.12fd	b0 03		bcs $1302			bcs 	EXPDZero
.12ff	4c 96 28	jmp $2896			jmp 	IFloatIntegerR0
.1302					EXPDZero:
.1302	4c ba 21	jmp $21ba		jmp	ErrorV_divzero
.1305					EXPBinIMod:
.1305	24 0f		bit $0f				bit 	IFR0+IExp
.1307	30 10		bmi $1319			bmi 	EXPTypeError
.1309	a2 10		ldx #$10			ldx 	#IFR1
.130b	5a		phy				phy
.130c	20 ce 27	jsr $27ce			jsr 	IFPreProcessBitwise 		; set up everything.
.130f	d0 05		bne $1316			bne 	EXPDRange
.1311	20 07 27	jsr $2707			jsr 	IFloatModulusInteger
.1314	7a		ply				ply
.1315	60		rts				rts
.1316					EXPDRange:
.1316	4c 58 21	jmp $2158		jmp	ErrorV_range
.1319					EXPTypeError:
.1319	4c 75 21	jmp $2175		jmp	ErrorV_type
.131c					EXPBinAnd:
.131c	24 0f		bit $0f				bit 	IFR0+IExp
.131e	30 f9		bmi $1319			bmi 	EXPTypeError
.1320	a2 10		ldx #$10			ldx 	#IFR1
.1322	20 89 27	jsr $2789			jsr 	IFloatBitwiseAnd
.1325	b0 ef		bcs $1316			bcs 	EXPDRange
.1327	60		rts				rts
.1328					EXPBinOr:
.1328	24 0f		bit $0f				bit 	IFR0+IExp
.132a	30 ed		bmi $1319			bmi 	EXPTypeError
.132c	a2 10		ldx #$10			ldx 	#IFR1
.132e	20 a0 27	jsr $27a0			jsr 	IFloatBitwiseOr
.1331	b0 e3		bcs $1316			bcs 	EXPDRange
.1333	60		rts				rts
.1334					EXPBinXor:
.1334	24 0f		bit $0f				bit 	IFR0+IExp
.1336	30 e1		bmi $1319			bmi 	EXPTypeError
.1338	a2 10		ldx #$10			ldx 	#IFR1
.133a	20 b7 27	jsr $27b7			jsr 	IFloatBitwiseXor
.133d	b0 d7		bcs $1316			bcs 	EXPDRange
.133f	60		rts				rts
.1340					EXPConcatenate:
.1340	18		clc				clc
.1341	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1343	72 10		adc ($10)			adc 	(IFR1)
.1345	b0 2d		bcs $1374			bcs 	_EXPCError
.1347	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.1349	da		phx				phx
.134a	a6 0d		ldx $0d				ldx 	IFR0+1
.134c	da		phx				phx
.134d	20 8b 23	jsr $238b			jsr 	StringTempAllocate 			; allocate string, set up return
.1350	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1352	a5 10		lda $10				lda 	IFR1
.1354	20 5d 13	jsr $135d			jsr 	_EXPCCopyXA
.1357	fa		plx				plx 								; copy second string
.1358	68		pla				pla
.1359	20 5d 13	jsr $135d			jsr 	_EXPCCopyXA
.135c	60		rts				rts
.135d					_EXPCCopyXA:
.135d	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.135f	85 1e		sta $1e				sta 	zTemp0
.1361	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.1363	f0 0e		beq $1373			beq 	_EXPCCExit 					; nothing.
.1365	aa		tax				tax 								; count
.1366	5a		phy				phy 								; start positioin
.1367	a0 01		ldy #$01			ldy 	#1
.1369					_EXPCCLoop:
.1369	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.136b	20 c0 23	jsr $23c0			jsr 	StringTempWrite
.136e	c8		iny				iny
.136f	ca		dex				dex
.1370	d0 f7		bne $1369			bne 	_EXPCCLoop
.1372	7a		ply				ply
.1373					_EXPCCExit:
.1373	60		rts				rts
.1374					_EXPCError:
.1374	4c 56 22	jmp $2256		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1377					EXPReturnTrue:
.1377	a2 0c		ldx #$0c			ldx 	#IFR0
.1379	a9 01		lda #$01			lda 	#1
.137b	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.137e	20 a1 2b	jsr $2ba1			jsr 	IFloatNegate
.1381	60		rts				rts
.1382					EXPReturnFalse:
.1382	a2 0c		ldx #$0c			ldx 	#IFR0
.1384	4c 96 2b	jmp $2b96			jmp 	IFloatSetZero
.1387					EXPCompareEqual:
.1387	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.138a	c9 00		cmp #$00			cmp 	#0
.138c	f0 e9		beq $1377			beq 	EXPReturnTrue
.138e	80 f2		bra $1382			bra 	EXPReturnFalse
.1390					EXPCompareLess:
.1390	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.1393	c9 ff		cmp #$ff			cmp 	#$FF
.1395	f0 e0		beq $1377			beq 	EXPReturnTrue
.1397	80 e9		bra $1382			bra 	EXPReturnFalse
.1399					EXPCompareGreater:
.1399	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.139c	c9 01		cmp #$01			cmp 	#1
.139e	f0 d7		beq $1377			beq 	EXPReturnTrue
.13a0	80 e0		bra $1382			bra 	EXPReturnFalse
.13a2					EXPCompareNotEqual:
.13a2	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.13a5	c9 00		cmp #$00			cmp 	#0
.13a7	d0 ce		bne $1377			bne 	EXPReturnTrue
.13a9	80 d7		bra $1382			bra 	EXPReturnFalse
.13ab					EXPCompareLessEqual:
.13ab	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.13ae	c9 01		cmp #$01			cmp 	#1
.13b0	d0 c5		bne $1377			bne 	EXPReturnTrue
.13b2	80 ce		bra $1382			bra 	EXPReturnFalse
.13b4					EXPCompareGreaterEqual:
.13b4	20 bd 13	jsr $13bd			jsr 	EXPCompareBaseCode
.13b7	c9 ff		cmp #$ff			cmp 	#$FF
.13b9	d0 bc		bne $1377			bne 	EXPReturnTrue
.13bb	80 c5		bra $1382			bra 	EXPReturnFalse
.13bd					EXPCompareBaseCode:
.13bd	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.13bf	30 10		bmi $13d1			bmi 	_EXCBCString
.13c1	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.13c3	20 64 28	jsr $2864			jsr 	IFloatCompare
.13c6	a5 0c		lda $0c				lda 	IFR0+IM0
.13c8	f0 06		beq $13d0			beq 	_EXCBCExit 					; return 0 if zero
.13ca	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.13cc	50 02		bvc $13d0			bvc 	_EXCBCExit
.13ce	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.13d0					_EXCBCExit:
.13d0	60		rts				rts
.13d1					_EXCBCString:
.13d1	5a		phy				phy
.13d2	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.13d4	d2 10		cmp ($10)			cmp 	(IFR1)
.13d6	90 02		bcc $13da			bcc 	_EXCBCSmaller
.13d8	b2 10		lda ($10)			lda 	(IFR1)
.13da					_EXCBCSmaller:
.13da	aa		tax				tax
.13db	f0 0d		beq $13ea			beq 	_EXCBCMatches 				; if zero common length matches
.13dd	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.13df					_EXCBCCheckSmallerMatches:
.13df	c8		iny				iny 								; compare directly as far as common length
.13e0	38		sec				sec
.13e1	b1 10		lda ($10),y			lda 	(IFR1),y
.13e3	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.13e5	d0 08		bne $13ef			bne 	_EXCBCExit2
.13e7	ca		dex				dex
.13e8	d0 f5		bne $13df			bne 	_EXCBCCheckSmallerMatches
.13ea					_EXCBCMatches:
.13ea	38		sec				sec
.13eb	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.13ed	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.13ef					_EXCBCExit2:
.13ef	7a		ply				ply
.13f0	c9 00		cmp #$00			cmp 	#0
.13f2	f0 04		beq $13f8			beq 	_EXCBCReturn
.13f4	30 03		bmi $13f9			bmi 	_EXCBCFF
.13f6	a9 01		lda #$01			lda 	#1
.13f8					_EXCBCReturn:
.13f8	60		rts				rts
.13f9					_EXCBCFF:
.13f9	a9 ff		lda #$ff			lda 	#$FF
.13fb	60		rts				rts
.13fc					_EXCBCRange:
.13fc	4c 58 21	jmp $2158		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.13ff					EXPBinLeft:
.13ff	a9 ff		lda #$ff			lda 	#$FF
.1401	8d 3d 03	sta $033d			sta 	EXPShiftLeftFlag
.1404	4c 0a 14	jmp $140a			jmp 	EXPShiftCommon
.1407					EXPBinRight:
.1407	9c 3d 03	stz $033d			stz 	EXPShiftLeftFlag
.140a					EXPShiftCommon:
.140a	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.140c	05 13		ora $13				ora 	IFR1+IExp
.140e	29 7f		and #$7f			and 	#$7F
.1410	d0 35		bne $1447			bne 	_EXPSRange
.1412	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1414	29 e0		and #$e0			and 	#$E0
.1416	05 0d		ora $0d				ora 	IFR0+IM1
.1418	05 0e		ora $0e				ora 	IFR0+IM2
.141a	d0 25		bne $1441			bne 	_EXPSShiftZero 				; if so return zero
.141c	5a		phy				phy
.141d	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.141f	29 1f		and #$1f			and 	#$1F
.1421	f0 17		beq $143a			beq 	_EXPSExit 					; exit if zero
.1423	a8		tay				tay
.1424					_EXPSLoop:
.1424	a2 10		ldx #$10			ldx 	#IFR1
.1426	2c 3d 03	bit $033d			bit 	EXPShiftLeftFlag
.1429	30 05		bmi $1430			bmi 	_EXPSShiftLeft
.142b	20 c5 2b	jsr $2bc5			jsr 	IFloatShiftRight
.142e	80 07		bra $1437			bra 	_EXPSContinue
.1430					_EXPSShiftLeft:
.1430	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1433	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1435	30 10		bmi $1447			bmi 	_EXPSRange
.1437					_EXPSContinue:
.1437	88		dey				dey
.1438	d0 ea		bne $1424			bne 	_EXPSLoop
.143a					_EXPSExit:
.143a	a2 10		ldx #$10			ldx 	#IFR1
.143c	20 27 2b	jsr $2b27			jsr 	IFloatCopyFromRegister
.143f	7a		ply				ply
.1440	60		rts				rts
.1441					_EXPSShiftZero:
.1441	a2 0c		ldx #$0c			ldx 	#IFR0
.1443	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.1446	60		rts				rts
.1447					_EXPSRange:
.1447	4c 58 21	jmp $2158		jmp	ErrorV_range
.033d					EXPShiftLeftFlag:
>033d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.144a					EXPEvaluateExpression:
.144a	a9 00		lda #$00			lda 	#0 							; current precedence
.144c					EXPEvaluateExpressionPrecedenceA:
.144c	48		pha				pha
.144d	20 c7 14	jsr $14c7			jsr 	EXPTermValueR0				; do first term.
.1450					_EELoop:
.1450	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1452	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1454	90 31		bcc $1487			bcc 	_EEExit
.1456	aa		tax				tax 								; access the precedence of the operator.
.1457	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1458	dd 05 17	cmp $1705,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.145b	b0 2b		bcs $1488			bcs 	_EEExit2
.145d	48		pha				pha 								; save current precedence.
.145e	da		phx				phx 								; save operator
.145f	c8		iny				iny 								; consume operator
.1460	da		phx				phx
.1461	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.1463	20 e5 2a	jsr $2ae5			jsr 	IFloatPushRx
.1466	fa		plx				plx
.1467	bd 05 17	lda $1705,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.146a	20 4c 14	jsr $144c			jsr 	EXPEvaluateExpressionPrecedenceA
.146d	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.146f	20 06 2b	jsr $2b06			jsr 	IFloatPullRx
.1472	fa		plx				plx 								; operator
.1473	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.1475	45 13		eor $13				eor 	IFR1+IExp
.1477	30 08		bmi $1481			bmi 	_EEType
.1479					_EETypeOkay:
.1479	8a		txa				txa
.147a	0a		asl a				asl 	a 							; double -> X
.147b	aa		tax				tax
.147c	20 84 14	jsr $1484			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.147f	80 cf		bra $1450			bra 	_EELoop
.1481					_EEType:
.1481	4c 75 21	jmp $2175		jmp	ErrorV_type
.1484					_EECallBinary:
.1484	7c ad 19	jmp ($19ad,x)			jmp 	(VectorTable,x)
.1487					_EEExit:
.1487	68		pla				pla 								; throw precedence
.1488					_EEExit2:
.1488	18		clc				clc
.1489	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.148a					EXPEvalNumber:
.148a	20 4a 14	jsr $144a			jsr 	EXPEvaluateExpression
.148d	24 0f		bit $0f				bit 	IFR0+IExp
.148f	30 01		bmi $1492			bmi 	EVUType
.1491	60		rts				rts
.1492					EVUType:
.1492	4c 75 21	jmp $2175		jmp	ErrorV_type
.1495					EXPEvalInteger:
.1495	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1498	20 96 28	jsr $2896			jsr 	IFloatIntegerR0
.149b	60		rts				rts
.149c					EXPEvalInteger16:
.149c	20 95 14	jsr $1495			jsr 	EXPEvalInteger
.149f	a5 0e		lda $0e				lda 	IFR0+IM2
.14a1	d0 21		bne $14c4			bne 	EVURange
.14a3	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14a5	a5 0c		lda $0c				lda 	IFR0+IM0
.14a7	60		rts				rts
.14a8					EXPEvalInteger8:
.14a8	20 95 14	jsr $1495			jsr 	EXPEvalInteger
.14ab	a5 0e		lda $0e				lda 	IFR0+IM2
.14ad	05 0d		ora $0d				ora 	IFR0+IM1
.14af	d0 13		bne $14c4			bne 	EVURange
.14b1	a5 0c		lda $0c				lda 	IFR0+IM0
.14b3	60		rts				rts
.14b4					EXPEvalString:
.14b4	20 4a 14	jsr $144a			jsr 	EXPEvaluateExpression
.14b7	24 0f		bit $0f				bit 	IFR0+IExp
.14b9	10 d7		bpl $1492			bpl 	EVUType
.14bb	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14bd	86 1f		stx $1f				stx 	zTemp0+1
.14bf	a5 0c		lda $0c				lda 	IFR0+IM0
.14c1	85 1e		sta $1e				sta 	zTemp0
.14c3	60		rts				rts
.14c4					EVURange:
.14c4	4c 58 21	jmp $2158		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.14c7					EXPTermValueR0:
.14c7	20 12 15	jsr $1512			jsr 	EXPTermR0 					; get term
.14ca	90 45		bcc $1511			bcc 	_ETVNotReference 			; exit if value.
.14cc	5a		phy				phy
.14cd	a0 03		ldy #$03			ldy 	#3 							; get type
.14cf	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14d1	30 14		bmi $14e7			bmi 	_ETVDereferenceString
.14d3	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.14d5	88		dey				dey
.14d6	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14d8	85 0e		sta $0e				sta 	IFR0+IM2
.14da	88		dey				dey
.14db	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14dd	aa		tax				tax
.14de	b2 0c		lda ($0c)			lda 	(IFR0)
.14e0	86 0d		stx $0d				stx 	IFR0+IM1
.14e2	85 0c		sta $0c				sta 	IFR0+IM0
.14e4	7a		ply				ply
.14e5	18		clc				clc
.14e6	60		rts				rts
.14e7					_ETVDereferenceString:
.14e7	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.14e9	b1 0c		lda ($0c),y			lda 	(IFR0),y
.14eb	12 0c		ora ($0c)			ora 	(IFR0)
.14ed	f0 11		beq $1500			beq 	_ETVNull
.14ef	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.14f1	aa		tax				tax
.14f2	b2 0c		lda ($0c)			lda 	(IFR0)
.14f4	18		clc				clc 								; add two so points to actual string.
.14f5	69 02		adc #$02			adc 	#2
.14f7	90 01		bcc $14fa			bcc 	_EVDSNoCarry
.14f9	e8		inx				inx
.14fa					_EVDSNoCarry:
.14fa	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.14fc	85 0c		sta $0c				sta 	IFR0
.14fe	80 08		bra $1508			bra 	_ETVFillExit 				; tidy up and exit.
.1500					_ETVNull:
.1500	a9 10		lda #$10			lda 	#_EVTNString & $FF
.1502	85 0c		sta $0c				sta 	IFR0+IM0
.1504	a9 15		lda #$15			lda 	#_EVTNString >> 8
.1506	85 0d		sta $0d				sta 	IFR0+IM1
.1508					_ETVFillExit:
.1508	64 0e		stz $0e				stz 	IFR0+IM2
.150a	a9 80		lda #$80			lda 	#$80
.150c	85 0f		sta $0f				sta 	IFR0+IExp
.150e	7a		ply				ply
.150f	60		rts				rts
.1510					_EVTNString:
>1510	00						.byte 	0
.1511					_ETVNotReference:
.1511	60		rts				rts
.1512					EXPTermR0:
.1512	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.1514	30 10		bmi $1526			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1516	c8		iny				iny 								; consume element
.1517	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1519	b0 08		bcs $1523			bcs 	_ETMIdentifier
.151b	20 4a 15	jsr $154a			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.151e	20 7d 15	jsr $157d			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1521	18		clc				clc 								; return value
.1522	60		rts				rts
.1523					_ETMIdentifier:
.1523	4c 2d 25	jmp $252d			jmp 	VARCheckSimple 				; check simple variables A-Z
.1526					_ETMIsUnaryOrMinus:
.1526	c8		iny				iny 								; consume element
.1527	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1529	d0 0a		bne $1535			bne 	_ETMCheckUnary
.152b	20 c7 14	jsr $14c7			jsr 	EXPTermValueR0 				; get a term to negate
.152e	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1530	20 a1 2b	jsr $2ba1			jsr 	IFloatNegate
.1533	18		clc				clc
.1534	60		rts				rts
.1535					_ETMCheckUnary:
.1535	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1537	90 0e		bcc $1547			bcc 	_ETMUnarySyntax
.1539	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.153b	b0 0a		bcs $1547			bcs 	_ETMUnarySyntax
.153d	0a		asl a				asl 	a
.153e	aa		tax				tax
.153f	20 44 15	jsr $1544			jsr 	_ETMCallUnaryFunction
.1542	18		clc				clc
.1543	60		rts				rts
.1544					_ETMCallUnaryFunction:
.1544	7c ad 19	jmp ($19ad,x)			jmp 	(VectorTable,x)
.1547					_ETMUnarySyntax:
.1547	4c 48 21	jmp $2148		jmp	ErrorV_syntax
.154a					EXPExtractTokenisedInteger:
.154a	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.154c	64 0f		stz $0f				stz 	IFR0+IExp
.154e	64 0d		stz $0d				stz 	IFR0+IM1
.1550	64 0e		stz $0e				stz 	IFR0+IM2
.1552					_ETMConstant:
.1552	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1554	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1556	b0 24		bcs $157c			bcs 	_ETMCExit 					; no.
.1558	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.155a	a5 0d		lda $0d				lda 	IFR0+IM1
.155c	85 0e		sta $0e				sta 	IFR0+IM2
.155e	a5 0c		lda $0c				lda 	IFR0+IM0
.1560	85 0d		sta $0d				sta 	IFR0+IM1
.1562	64 0c		stz $0c				stz 	IFR0+IM0
.1564	8a		txa				txa
.1565	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1566	66 0e		ror $0e				ror 	IFR0+IM2
.1568	66 0d		ror $0d				ror 	IFR0+IM1
.156a	66 0c		ror $0c				ror 	IFR0+IM0
.156c	4a		lsr a				lsr 	a
.156d	66 0e		ror $0e				ror 	IFR0+IM2
.156f	66 0d		ror $0d				ror 	IFR0+IM1
.1571	66 0c		ror $0c				ror 	IFR0+IM0
.1573	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.1575	11 1c		ora ($1c),y			ora 	(codePtr),y
.1577	85 0c		sta $0c				sta 	IFR0+IM0
.1579	c8		iny				iny 								; consume, loop back
.157a	80 d6		bra $1552			bra 	_ETMConstant
.157c					_ETMCExit:
.157c	60		rts				rts
.157d					EXPCheckDecimalFollows:
.157d	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.157f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1581	d0 19		bne $159c			bne 	_ETMCDExit
.1583	c8		iny				iny 								; consume token.
.1584	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.1586	5a		phy				phy									; save current position
.1587	48		pha				pha 								; save count of chars.
.1588	38		sec				sec 								; address into YX : y + codePtr+1
.1589	98		tya				tya
.158a	65 1c		adc $1c				adc 	codePtr
.158c	aa		tax				tax
.158d	a5 1d		lda $1d				lda 	codePtr+1
.158f	69 00		adc #$00			adc 	#0
.1591	a8		tay				tay
.1592	68		pla				pla 								; get count.
.1593	20 3a 2a	jsr $2a3a			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1596	7a		ply				ply 								; go to next token.
.1597	98		tya				tya
.1598	38		sec				sec
.1599	71 1c		adc ($1c),y			adc 	(codePtr),y
.159b	a8		tay				tay
.159c					_ETMCDExit:
.159c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.159d					EXPUnaryAbs:
.159d	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.15a0	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.15a3	20 da 27	jsr $27da			jsr 	IFloatAbsoluteR0
.15a6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.15a7					EXPUnaryAsc:
.15a7	20 b4 14	jsr $14b4			jsr 	EXPEvalString 					; string to R0, zTemp0
.15aa	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.15ad	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.15af	f0 06		beq $15b7			beq 	_EXAZero 						; if so return 0
.15b1	5a		phy				phy 									; otherwise get first character
.15b2	a0 01		ldy #$01			ldy 	#1
.15b4	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15b6	7a		ply				ply
.15b7					_EXAZero:
.15b7	a2 0c		ldx #$0c			ldx 	#IFR0
.15b9	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.15bc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.15bd					EXPUnaryChr:
.15bd	20 a8 14	jsr $14a8			jsr 	EXPEvalInteger8 				; expr
.15c0	48		pha				pha 									; push on stack
.15c1	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.15c4	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.15c6	20 8b 23	jsr $238b			jsr 	StringTempAllocate
.15c9	68		pla				pla
.15ca	20 c0 23	jsr $23c0			jsr 	StringTempWrite
.15cd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.15ce					EXPUnaryDec:
.15ce	20 b4 14	jsr $14b4			jsr 	EXPEvalString 					; string to R0, zTemp0
.15d1	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.15d4	5a		phy				phy
.15d5	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.15d7	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.15da	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.15dc	f0 3b		beq $1619			beq 	_EUDError 						; empty string
.15de	aa		tax				tax
.15df	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.15e1					_EUDLoop:
.15e1	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.15e3	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.15e5	90 02		bcc $15e9			bcc 	_EUDNoCase
.15e7	e9 20		sbc #$20			sbc 	#$20
.15e9					_EUDNoCase:
.15e9	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.15eb	90 2c		bcc $1619			bcc 	_EUDError
.15ed	c9 3a		cmp #$3a			cmp 	#'9'+1
.15ef	90 0a		bcc $15fb			bcc 	_EUDOkay
.15f1	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.15f3	90 24		bcc $1619			bcc 	_EUDError
.15f5	c9 47		cmp #$47			cmp 	#'F'+1
.15f7	b0 20		bcs $1619			bcs 	_EUDError
.15f9	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.15fb					_EUDOkay:
.15fb	29 0f		and #$0f			and 	#15 							; make constant
.15fd	da		phx				phx
.15fe	48		pha				pha
.15ff	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1601	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1604	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1607	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.160a	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.160d	68		pla				pla 									; pop constant and OR in
.160e	fa		plx				plx
.160f	05 0c		ora $0c				ora 	IFR0+IM0
.1611	85 0c		sta $0c				sta 	IFR0+IM0
.1613	c8		iny				iny 									; next
.1614	ca		dex				dex
.1615	d0 ca		bne $15e1			bne 	_EUDLoop
.1617	7a		ply				ply
.1618	60		rts				rts
.1619					_EUDError:
.1619	4c 68 21	jmp $2168		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.161c					EXPUnaryInlineDec:
.161c	4c 48 21	jmp $2148		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.161f					EXPUnaryPeek:
.161f	20 9c 14	jsr $149c			jsr 	EXPEvalInteger16 				; number to R0
.1622	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.1625	b2 0c		lda ($0c)			lda 	(IFR0)
.1627	a2 0c		ldx #$0c			ldx 	#IFR0
.1629	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.162c	60		rts				rts
.162d					EXPUnaryDeek:
.162d	20 9c 14	jsr $149c			jsr 	EXPEvalInteger16 				; number to R0
.1630	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.1633	5a		phy				phy
.1634	a0 01		ldy #$01			ldy 	#1
.1636	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1638	7a		ply				ply
.1639	48		pha				pha
.163a	b2 0c		lda ($0c)			lda 	(IFR0)
.163c	a2 0c		ldx #$0c			ldx 	#IFR0
.163e	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.1641	68		pla				pla
.1642	85 0d		sta $0d				sta 	IFR0+IM1
.1644	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1645					EXPUnaryNull:
.1645	20 c7 14	jsr $14c7			jsr 	EXPTermValueR0
.1648	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1649					EXPUnaryFrac:
.1649	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.164c	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.164f	20 40 28	jsr $2840			jsr 	IFloatFractionalR0
.1652	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1653					EXPUnaryInt:
.1653	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.1656	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.1659	20 96 28	jsr $2896			jsr 	IFloatIntegerR0
.165c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.165d					EXPUnaryLen:
.165d	20 b4 14	jsr $14b4			jsr 	EXPEvalString 					; string to R0, zTemp0
.1660	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.1663	b2 1e		lda ($1e)			lda 	(zTemp0)
.1665	a2 0c		ldx #$0c			ldx 	#IFR0
.1667	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.166a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.166b					EXPUnaryParenthesis:
.166b	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.166e	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.1671	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1672					EXPUnaryRnd:
.1672	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; number to R0
.1675	20 95 22	jsr $2295			jsr 	ERRCheckRParen 				; )
.1678	a2 0c		ldx #$0c			ldx 	#IFR0
.167a	20 91 16	jsr $1691			jsr 	EXPLoadInRandom
.167d	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.167f	85 0f		sta $0f				sta 	IFR0+IExp
.1681	60		rts				rts
.1682					ExpUnaryRand:
.1682	20 95 14	jsr $1495			jsr 	EXPEvalInteger 				; integer to R0
.1685	20 95 22	jsr $2295			jsr 	ERRCheckRParen 				; )
.1688	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.168a	20 91 16	jsr $1691			jsr 	EXPLoadInRandom
.168d	20 07 27	jsr $2707			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1690	60		rts				rts
.1691					EXPLoadInRandom:
.1691	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.1694	20 a6 16	jsr $16a6			jsr 	EXPRandom32
.1697	95 00		sta $00,x			sta 	IM0,x
.1699	20 a6 16	jsr $16a6			jsr 	EXPRandom32
.169c	95 01		sta $01,x			sta 	IM1,x
.169e	20 a6 16	jsr $16a6			jsr 	EXPRandom32
.16a1	29 7f		and #$7f			and 	#$7F
.16a3	95 02		sta $02,x			sta 	IM2,x
.16a5	60		rts				rts
.16a6					EXPRandom32:
.16a6	5a		phy				phy
.16a7	a0 08		ldy #$08			ldy 	#8
.16a9	ad 3e 03	lda $033e			lda 	EXPSeed+0
.16ac	0d 3f 03	ora $033f			ora 	EXPSeed+1
.16af	0d 40 03	ora $0340			ora 	EXPSeed+2
.16b2	0d 41 03	ora $0341			ora 	EXPSeed+3
.16b5	d0 08		bne $16bf			bne 	_EXPRNoReset
.16b7	ee 3e 03	inc $033e			inc 	EXPSeed+0
.16ba	a0 10		ldy #$10			ldy 	#16
.16bc	8c 41 03	sty $0341			sty 	EXPSeed+3
.16bf					_EXPRNoReset:
.16bf	ad 3e 03	lda $033e			lda 	EXPSeed+0
.16c2					_EXPRLoop:
.16c2	0a		asl a				asl		a
.16c3	2e 3f 03	rol $033f			rol 	EXPSeed+1
.16c6	2e 40 03	rol $0340			rol 	EXPSeed+2
.16c9	2e 41 03	rol $0341			rol 	EXPSeed+3
.16cc	90 02		bcc $16d0			bcc 	_EXPRNoEOR
.16ce	49 c5		eor #$c5			eor 	#$C5
.16d0					_EXPRNoEOR:
.16d0	88		dey				dey
.16d1	d0 ef		bne $16c2			bne 	_EXPRLoop
.16d3	8d 3e 03	sta $033e			sta 	EXPSeed+0
.16d6	7a		ply				ply
.16d7	60		rts				rts
.033e					EXPSeed:
>033e							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.16d8					EXPUnarySgn:
.16d8	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.16db	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.16de	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.16e0	20 38 2b	jsr $2b38			jsr 	IFloatCopyToRegister
.16e3	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.16e5	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.16e8	a2 10		ldx #$10			ldx 	#IFR1
.16ea	20 64 28	jsr $2864			jsr 	IFloatCompare 					; compare R1 vs 0.
.16ed	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.16ee					EXPUnarySqr:
.16ee	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; number to R0
.16f1	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.16f4	20 e2 27	jsr $27e2			jsr 	IFloatSquareRootR0 				; square root.
.16f7	b0 01		bcs $16fa			bcs 	_EUSValue
.16f9	60		rts				rts
.16fa					_EUSValue:
.16fa	4c 58 21	jmp $2158		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.16fd					EXPUnaryHex:
.16fd	20 95 14	jsr $1495			jsr 	EXPEvalInteger 					; expr
.1700	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.1703	5a		phy				phy
.1704	a9 10		lda #$10			lda 	#16
.1706	20 37 29	jsr $2937			jsr 	IFloatIntegerToStringR0
.1709	80 0a		bra $1715			bra 	EUSMain
.170b					EXPUnaryStr:
.170b	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 					; expr
.170e	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.1711	5a		phy				phy
.1712	20 93 29	jsr $2993			jsr 	IFloatFloatToStringR0 			; convert to string
.1715					EUSMain:
.1715	b0 18		bcs $172f			bcs 	_EUSError
.1717	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1719	84 1f		sty $1f				sty 	zTemp0+1
.171b	48		pha				pha 									; save count
.171c	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.171e	20 8b 23	jsr $238b			jsr 	StringTempAllocate
.1721	fa		plx				plx 									; count in X
.1722	a0 00		ldy #$00			ldy 	#0
.1724					_EUSCopy:
.1724	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1726	c8		iny				iny
.1727	20 c0 23	jsr $23c0			jsr 	StringTempWrite
.172a	ca		dex				dex
.172b	d0 f7		bne $1724			bne	 	_EUSCopy
.172d	7a		ply				ply
.172e	60		rts				rts
.172f					_EUSError:
.172f	4c 58 21	jmp $2158		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1732					EXPUnaryInlineString:
.1732	18		clc				clc 								; physical address -> IM0,1
.1733	98		tya				tya
.1734	65 1c		adc $1c				adc 	codePtr
.1736	85 0c		sta $0c				sta 	IFR0+IM0
.1738	a5 1d		lda $1d				lda 	codePtr+1
.173a	69 00		adc #$00			adc 	#0
.173c	85 0d		sta $0d				sta 	IFR0+IM1
.173e	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.1740	a9 80		lda #$80			lda 	#$80
.1742	85 0f		sta $0f				sta 	IFR0+IExp
.1744	98		tya				tya	 								; skip over it.
.1745	38		sec				sec
.1746	71 1c		adc ($1c),y			adc 	(codePtr),y
.1748	a8		tay				tay
.1749	60		rts				rts
.174a					_EXPUISRange:
.174a	4c 58 21	jmp $2158		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.174d					EXPUnaryLeft:
.174d	20 93 17	jsr $1793			jsr 	EXPCommonStart 					; <string>,
.1750	48		pha				pha 									; save string address on stack
.1751	da		phx				phx
.1752	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1754	48		pha				pha
.1755	20 a8 14	jsr $14a8			jsr 	EXPEvalInteger8 				; characters to do
.1758	80 44		bra $179e			bra 	EXPSubstringCommon
.175a					EXPUnaryRight:
.175a	20 93 17	jsr $1793			jsr 	EXPCommonStart 					; <string>,
.175d	48		pha				pha 									; save string address on stack
.175e	da		phx				phx
.175f	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.1761	48		pha				pha
.1762	20 a8 14	jsr $14a8			jsr 	EXPEvalInteger8 				; characters to do
.1765	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.1767	68		pla				pla
.1768	38		sec				sec
.1769	e5 1e		sbc $1e				sbc 	zTemp0
.176b	b0 02		bcs $176f			bcs 	_EUROffLeft
.176d	a9 00		lda #$00			lda 	#0
.176f					_EUROffLeft:
.176f	48		pha				pha 									; start pos
.1770	a9 ff		lda #$ff			lda 	#255
.1772	80 2a		bra $179e			bra 	EXPSubstringCommon
.1774					EXPUnaryMid:
.1774	20 93 17	jsr $1793			jsr 	EXPCommonStart 					; <string>,
.1777	48		pha				pha 									; save string address on stack
.1778	da		phx				phx
.1779	20 a8 14	jsr $14a8			jsr 	EXPEvalInteger8 				; characters start
.177c	f0 12		beq $1790			beq 	_EUSError 						; 1 is left
.177e	3a		dec a				dec 	a 								; zero based.
.177f	48		pha				pha
.1780	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.1782	c9 99		cmp #$99			cmp 	#PR_COMMA
.1784	f0 04		beq $178a			beq 	_EUMLength 						; if so m is provided
.1786	a9 ff		lda #$ff			lda 	#255 							; default m
.1788	80 14		bra $179e			bra 	EXPSubstringCommon
.178a					_EUMLength:
.178a	c8		iny				iny 									; consume comma
.178b	20 a8 14	jsr $14a8			jsr 	EXPEvalInteger8 				; characters to do
.178e	80 0e		bra $179e			bra 	EXPSubstringCommon
.1790					_EUSError:
.1790	4c 68 21	jmp $2168		jmp	ErrorV_value
.1793					EXPCommonStart:
.1793	20 b4 14	jsr $14b4			jsr 	EXPEvalString
.1796	20 9d 22	jsr $229d			jsr 	ERRCheckComma
.1799	a5 0c		lda $0c				lda 	IFR0+IM0
.179b	a6 0d		ldx $0d				ldx 	IFR0+IM1
.179d	60		rts				rts
.179e					EXPSubstringCommon:
.179e	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.17a0	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; check right bracket.
.17a3	68		pla				pla 									; start position
.17a4	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.17a6	fa		plx				plx 									; get string address to zTemp2.
.17a7	86 23		stx $23				stx 	zTemp2+1
.17a9	68		pla				pla
.17aa	85 22		sta $22				sta 	zTemp2
.17ac	38		sec				sec 									; length - start is the max count of chars
.17ad	b2 22		lda ($22)			lda 	(zTemp2)
.17af	e5 21		sbc $21				sbc 	zTemp1+1
.17b1	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.17b3	b0 02		bcs $17b7			bcs 	_EXPSSNoTrim
.17b5	85 20		sta $20				sta 	zTemp1 							; update count with available
.17b7					_EXPSSNoTrim:
.17b7	a5 20		lda $20				lda 	zTemp1 							; chars required.
.17b9	20 8b 23	jsr $238b			jsr 	StringTempAllocate 				; allocate memory for it.
.17bc	a5 20		lda $20				lda 	zTemp1 							; zero length string
.17be	f0 15		beq $17d5			beq 	_EXPSSExit
.17c0	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.17c2	d2 22		cmp ($22)			cmp 	(zTemp2)
.17c4	b0 0f		bcs $17d5			bcs 	_EXPSSExit
.17c6	5a		phy				phy
.17c7	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.17c9	c8		iny				iny 									; +1 for the length byte
.17ca					_EXPSSCopy:
.17ca	b1 22		lda ($22),y			lda 	(zTemp2),y
.17cc	20 c0 23	jsr $23c0			jsr 	StringTempWrite
.17cf	c8		iny				iny
.17d0	c6 20		dec $20				dec 	zTemp1
.17d2	d0 f6		bne $17ca			bne 	_EXPSSCopy
.17d4	7a		ply				ply
.17d5					_EXPSSExit:
.17d5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.17d6					EXPUnaryVal:
.17d6	20 b4 14	jsr $14b4			jsr 	EXPEvalString 					; string to R0, zTemp0
.17d9	20 95 22	jsr $2295			jsr 	ERRCheckRParen 					; )
.17dc	5a		phy				phy
.17dd	18		clc				clc
.17de	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.17e0	69 01		adc #$01			adc 	#1
.17e2	aa		tax				tax
.17e3	a5 1f		lda $1f				lda 	zTemp0+1
.17e5	69 00		adc #$00			adc 	#0
.17e7	a8		tay				tay
.17e8	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.17ea	20 fa 29	jsr $29fa			jsr 	IFloatStringToFloatR0 			; do conversion
.17ed	b0 02		bcs $17f1			bcs 	_EUVError
.17ef	7a		ply				ply
.17f0	60		rts				rts
.17f1					_EUVError:
.17f1	4c 68 21	jmp $2168		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.17f4					BinaryPrecedence:
>17f4	02					.byte	 2	; $ef =
>17f5	02					.byte	 2	; $f0 <>
>17f6	02					.byte	 2	; $f1 <=
>17f7	02					.byte	 2	; $f2 <
>17f8	02					.byte	 2	; $f3 >=
>17f9	02					.byte	 2	; $f4 >
>17fa	01					.byte	 1	; $f5 XOR
>17fb	01					.byte	 1	; $f6 OR
>17fc	01					.byte	 1	; $f7 AND
>17fd	04					.byte	 4	; $f8 DIV
>17fe	04					.byte	 4	; $f9 MOD
>17ff	04					.byte	 4	; $fa <<
>1800	04					.byte	 4	; $fb >>
>1801	04					.byte	 4	; $fc /
>1802	04					.byte	 4	; $fd *
>1803	03					.byte	 3	; $fe -
>1804	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1805					StructureOffsets:
>1805	01					.byte	1  	; $80 REPEAT
>1806	ff					.byte	255	; $81 UNTIL
>1807	01					.byte	1  	; $82 WHILE
>1808	ff					.byte	255	; $83 WEND
>1809	01					.byte	1  	; $84 IF
>180a	ff					.byte	255	; $85 ENDIF
>180b	01					.byte	1  	; $86 DO
>180c	ff					.byte	255	; $87 LOOP
>180d	01					.byte	1  	; $88 PROC
>180e	ff					.byte	255	; $89 ENDPROC
>180f	01					.byte	1  	; $8a FOR
>1810	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1811					StandardTokens:
>1811	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1818	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>181e	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1824	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1829	02 49 46				.byte	$02,$49,$46                             	; $84 if
>182c	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1832	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1835	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>183a	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>183f	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1847	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>184b	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1850	00					.byte	$00                                     	; $8c [[end]]
>1851	00					.byte	$00                                     	; $8d [[shift]]
>1852	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1857	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>185c	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>185f	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1864	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1868	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>186e	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1874	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1879	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>187d	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1881	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1886	01 2c					.byte	$01,$2c                                 	; $99 ,
>1888	01 3b					.byte	$01,$3b                                 	; $9a ;
>188a	01 3a					.byte	$01,$3a                                 	; $9b :
>188c	01 27					.byte	$01,$27                                 	; $9c '
>188e	01 29					.byte	$01,$29                                 	; $9d )
>1890	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1894	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>189a	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>189e	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>18a2	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>18a7	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>18ab	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>18b2	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>18b7	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>18bc	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>18c1	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>18c6	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>18cb	00					.byte	0											; $aa
>18cc	00					.byte	0											; $ab
>18cd	00					.byte	0											; $ac
>18ce	00					.byte	0											; $ad
>18cf	00					.byte	0											; $ae
>18d0	00					.byte	0											; $af
>18d1	00					.byte	0											; $b0
>18d2	00					.byte	0											; $b1
>18d3	00					.byte	0											; $b2
>18d4	00					.byte	0											; $b3
>18d5	00					.byte	0											; $b4
>18d6	00					.byte	0											; $b5
>18d7	00					.byte	0											; $b6
>18d8	00					.byte	0											; $b7
>18d9	00					.byte	0											; $b8
>18da	00					.byte	0											; $b9
>18db	00					.byte	0											; $ba
>18dc	00					.byte	0											; $bb
>18dd	00					.byte	0											; $bc
>18de	00					.byte	0											; $bd
>18df	00					.byte	0											; $be
>18e0	00					.byte	0											; $bf
>18e1	00					.byte	0											; $c0
>18e2	00					.byte	0											; $c1
>18e3	00					.byte	0											; $c2
>18e4	00					.byte	0											; $c3
>18e5	00					.byte	0											; $c4
>18e6	00					.byte	0											; $c5
>18e7	00					.byte	0											; $c6
>18e8	00					.byte	0											; $c7
>18e9	00					.byte	0											; $c8
>18ea	00					.byte	0											; $c9
>18eb	00					.byte	0											; $ca
>18ec	00					.byte	0											; $cb
>18ed	00					.byte	0											; $cc
>18ee	00					.byte	0											; $cd
>18ef	00					.byte	0											; $ce
>18f0	00					.byte	0											; $cf
>18f1	00					.byte	0											; $d0
>18f2	00					.byte	0											; $d1
>18f3	00					.byte	0											; $d2
>18f4	00					.byte	0											; $d3
>18f5	00					.byte	0											; $d4
>18f6	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>18fc	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1902	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>190a	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1911	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1917	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>191d	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1922	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1927	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>192c	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1931	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1936	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>193c	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1941	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1949	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1950	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1955	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>195a	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1960	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1965	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>196b	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1970	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1976	01 28					.byte	$01,$28                                 	; $eb (
>1978	01 24					.byte	$01,$24                                 	; $ec $
>197a	00					.byte	$00                                     	; $ed [[decimal]]
>197b	00					.byte	$00                                     	; $ee [[string]]
>197c	01 3d					.byte	$01,$3d                                 	; $ef =
>197e	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1981	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1984	01 3c					.byte	$01,$3c                                 	; $f2 <
>1986	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1989	01 3e					.byte	$01,$3e                                 	; $f4 >
>198b	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>198f	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1992	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1996	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>199a	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>199e	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>19a1	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>19a4	01 2f					.byte	$01,$2f                                 	; $fc /
>19a6	01 2a					.byte	$01,$2a                                 	; $fd *
>19a8	01 2d					.byte	$01,$2d                                 	; $fe -
>19aa	01 2b					.byte	$01,$2b                                 	; $ff +
>19ac	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.19ad					VectorTable:
>19ad	a4 20					.word	Command_REPEAT           ; $80 REPEAT
>19af	ad 20					.word	Command_UNTIL            ; $81 UNTIL
>19b1	1d 21					.word	Command_WHILE            ; $82 WHILE
>19b3	3c 21					.word	Command_WEND             ; $83 WEND
>19b5	7c 20					.word	IfCommand                ; $84 IF
>19b7	a3 20					.word	EndIf                    ; $85 ENDIF
>19b9	76 1f					.word	Command_DO               ; $86 DO
>19bb	8e 1f					.word	Command_LOOP             ; $87 LOOP
>19bd	ca 12					.word	NoExec08                 ; $88 PROC
>19bf	74 2c					.word	NotImplemented           ; $89 ENDPROC
>19c1	97 1f					.word	Command_FOR              ; $8a FOR
>19c3	07 20					.word	Command_NEXT             ; $8b NEXT
>19c5	83 12					.word	RUNEndOfLine             ; $8c [[END]]
>19c7	c1 12					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>19c9	9c 20					.word	ElseCode                 ; $8e ELSE
>19cb	ca 12					.word	NoExec01                 ; $8f THEN
>19cd	ca 12					.word	NoExec02                 ; $90 TO
>19cf	ca 12					.word	NoExec03                 ; $91 STEP
>19d1	e9 11					.word	CommandLET               ; $92 LET
>19d3	84 11					.word	Command_Print            ; $93 PRINT
>19d5	74 2c					.word	NotImplemented           ; $94 INPUT
>19d7	74 2c					.word	NotImplemented           ; $95 CALL
>19d9	74 2c					.word	NotImplemented           ; $96 SYS
>19db	6a 12					.word	Command_REM              ; $97 REM
>19dd	7f 1f					.word	Command_EXIT             ; $98 EXIT
>19df	ca 12					.word	NoExec04                 ; $99 ,
>19e1	ca 12					.word	NoExec05                 ; $9a ;
>19e3	ca 12					.word	NoExec06                 ; $9b :
>19e5	6a 12					.word	Command_REM2             ; $9c '
>19e7	ca 12					.word	NoExec07                 ; $9d )
>19e9	68 10					.word	CommandDIM               ; $9e DIM
>19eb	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>19ed	61 12					.word	Command_NEW              ; $a0 NEW
>19ef	77 12					.word	Command_RUN              ; $a1 RUN
>19f1	c7 12					.word	Command_STOP             ; $a2 STOP
>19f3	c4 12					.word	Command_END              ; $a3 END
>19f5	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>19f7	74 2c					.word	NotImplemented           ; $a5 LIST
>19f9	74 2c					.word	NotImplemented           ; $a6 SAVE
>19fb	74 2c					.word	NotImplemented           ; $a7 LOAD
>19fd	74 2c					.word	NotImplemented           ; $a8 POKE
>19ff	74 2c					.word	NotImplemented           ; $a9 DOKE
>1a01	74 2c					.word	NotImplemented           ; $aa
>1a03	74 2c					.word	NotImplemented           ; $ab
>1a05	74 2c					.word	NotImplemented           ; $ac
>1a07	74 2c					.word	NotImplemented           ; $ad
>1a09	74 2c					.word	NotImplemented           ; $ae
>1a0b	74 2c					.word	NotImplemented           ; $af
>1a0d	74 2c					.word	NotImplemented           ; $b0
>1a0f	74 2c					.word	NotImplemented           ; $b1
>1a11	74 2c					.word	NotImplemented           ; $b2
>1a13	74 2c					.word	NotImplemented           ; $b3
>1a15	74 2c					.word	NotImplemented           ; $b4
>1a17	74 2c					.word	NotImplemented           ; $b5
>1a19	74 2c					.word	NotImplemented           ; $b6
>1a1b	74 2c					.word	NotImplemented           ; $b7
>1a1d	74 2c					.word	NotImplemented           ; $b8
>1a1f	74 2c					.word	NotImplemented           ; $b9
>1a21	74 2c					.word	NotImplemented           ; $ba
>1a23	74 2c					.word	NotImplemented           ; $bb
>1a25	74 2c					.word	NotImplemented           ; $bc
>1a27	74 2c					.word	NotImplemented           ; $bd
>1a29	74 2c					.word	NotImplemented           ; $be
>1a2b	74 2c					.word	NotImplemented           ; $bf
>1a2d	74 2c					.word	NotImplemented           ; $c0
>1a2f	74 2c					.word	NotImplemented           ; $c1
>1a31	74 2c					.word	NotImplemented           ; $c2
>1a33	74 2c					.word	NotImplemented           ; $c3
>1a35	74 2c					.word	NotImplemented           ; $c4
>1a37	74 2c					.word	NotImplemented           ; $c5
>1a39	74 2c					.word	NotImplemented           ; $c6
>1a3b	74 2c					.word	NotImplemented           ; $c7
>1a3d	74 2c					.word	NotImplemented           ; $c8
>1a3f	74 2c					.word	NotImplemented           ; $c9
>1a41	74 2c					.word	NotImplemented           ; $ca
>1a43	74 2c					.word	NotImplemented           ; $cb
>1a45	74 2c					.word	NotImplemented           ; $cc
>1a47	74 2c					.word	NotImplemented           ; $cd
>1a49	74 2c					.word	NotImplemented           ; $ce
>1a4b	74 2c					.word	NotImplemented           ; $cf
>1a4d	74 2c					.word	NotImplemented           ; $d0
>1a4f	74 2c					.word	NotImplemented           ; $d1
>1a51	74 2c					.word	NotImplemented           ; $d2
>1a53	74 2c					.word	NotImplemented           ; $d3
>1a55	74 2c					.word	NotImplemented           ; $d4
>1a57	2d 16					.word	EXPUnaryDeek             ; $d5 DEEK(
>1a59	1f 16					.word	EXPUnaryPeek             ; $d6 PEEK(
>1a5b	5a 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1a5d	4d 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1a5f	74 17					.word	EXPUnaryMid              ; $d9 MID$(
>1a61	0b 17					.word	EXPUnaryStr              ; $da STR$(
>1a63	d6 17					.word	EXPUnaryVal              ; $db VAL(
>1a65	d8 16					.word	EXPUnarySgn              ; $dc SGN(
>1a67	9d 15					.word	EXPUnaryAbs              ; $dd ABS(
>1a69	5d 16					.word	EXPUnaryLen              ; $de LEN(
>1a6b	ee 16					.word	EXPUnarySqr              ; $df SQR(
>1a6d	bd 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1a6f	a7 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1a71	74 2c					.word	NotImplemented           ; $e2 INKEY$(
>1a73	74 2c					.word	NotImplemented           ; $e3 EVENT(
>1a75	74 2c					.word	NotImplemented           ; $e4 TIME
>1a77	53 16					.word	EXPUnaryInt              ; $e5 INT(
>1a79	49 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1a7b	ce 15					.word	EXPUnaryDec              ; $e7 DEC(
>1a7d	fd 16					.word	EXPUnaryHex              ; $e8 HEX$(
>1a7f	72 16					.word	EXPUnaryRnd              ; $e9 RND(
>1a81	82 16					.word	ExpUnaryRand             ; $ea RAND(
>1a83	6b 16					.word	EXPUnaryParenthesis      ; $eb (
>1a85	45 16					.word	EXPUnaryNull             ; $ec $
>1a87	1c 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1a89	32 17					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1a8b	87 13					.word	EXPCompareEqual          ; $ef =
>1a8d	a2 13					.word	EXPCompareNotEqual       ; $f0 <>
>1a8f	ab 13					.word	EXPCompareLessEqual      ; $f1 <=
>1a91	90 13					.word	EXPCompareLess           ; $f2 <
>1a93	b4 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1a95	99 13					.word	EXPCompareGreater        ; $f4 >
>1a97	34 13					.word	EXPBinXor                ; $f5 XOR
>1a99	28 13					.word	EXPBinOr                 ; $f6 OR
>1a9b	1c 13					.word	EXPBinAnd                ; $f7 AND
>1a9d	f4 12					.word	EXPBinIDiv               ; $f8 DIV
>1a9f	05 13					.word	EXPBinIMod               ; $f9 MOD
>1aa1	ff 13					.word	EXPBinLeft               ; $fa <<
>1aa3	07 14					.word	EXPBinRight              ; $fb >>
>1aa5	e8 12					.word	EXPBinFDiv               ; $fc /
>1aa7	df 12					.word	EXPBinMul                ; $fd *
>1aa9	d6 12					.word	EXPBinSub                ; $fe -
>1aab	cd 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1aad					TOKDetokenise:
.1aad	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1aaf	84 23		sty $23				sty 	zTemp2+1
.1ab1	9c 44 03	stz $0344			stz		TOKLastCharacter 			; clear last character
.1ab4					_TOKDLoop:
.1ab4	20 e3 1a	jsr $1ae3			jsr 	TOKDGet 					; get next
.1ab7	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1ab9	f0 26		beq $1ae1			beq 	_TOKDExit
.1abb	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1abd	f0 1d		beq $1adc			beq 	_TOKDDataItem
.1abf	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1ac1	f0 19		beq $1adc			beq 	_TOKDDataItem
.1ac3	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1ac5	10 05		bpl $1acc			bpl 	_TOKDNotToken
.1ac7	20 ab 1b	jsr $1bab			jsr 	TOKDToken 					; token to text.
.1aca	80 e8		bra $1ab4			bra 	_TOKDLoop
.1acc					_TOKDNotToken:
.1acc	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1ace	90 05		bcc $1ad5			bcc 	_TOKDNotIdentifier
.1ad0	20 1e 1b	jsr $1b1e			jsr 	TOKDIdentifier
.1ad3	80 df		bra $1ab4			bra 	_TOKDLoop
.1ad5					_TOKDNotIdentifier:
.1ad5	a0 0a		ldy #$0a			ldy 	#10
.1ad7	20 67 1b	jsr $1b67			jsr 	TOKDInteger
.1ada	80 d8		bra $1ab4			bra 	_TOKDLoop
.1adc					_TOKDDataItem:
.1adc	20 f9 1a	jsr $1af9			jsr 	TOKDDataItem
.1adf	80 d3		bra $1ab4			bra 	_TOKDLoop
.1ae1					_TOKDExit:
.1ae1	18		clc				clc
.1ae2	60		rts				rts
.1ae3	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1ae5	e6 22		inc $22				inc 	zTemp2
.1ae7	d0 02		bne $1aeb			bne 	_TKDGExit
.1ae9	e6 23		inc $23				inc 	zTemp2+1
.1aeb					_TKDGExit:
.1aeb	60		rts				rts
.1aec					TOKDOutput:
.1aec	8d 44 03	sta $0344			sta 	TOKLastCharacter
.1aef	6c 42 03	jmp ($0342)			jmp 	(TOKOutputMethod)
.1af2					TOKSetDetokeniseOutput:
.1af2	8e 42 03	stx $0342			stx 	TOKOutputMethod
.1af5	8c 43 03	sty $0343			sty 	TOKOutputMethod+1
.1af8	60		rts				rts
.0342					TOKOutputMethod:
>0342							.fill 	2
.0344					TOKLastCharacter:
>0344							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1af9					TOKDDataItem:
.1af9	a8		tay				tay 								; type in Y
.1afa	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1afc	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1afe	f0 02		beq $1b02			beq 	_TOKDDIsString
.1b00	a9 2e		lda #$2e			lda 	#'.'
.1b02					_TOKDDIsString:
.1b02	20 ec 1a	jsr $1aec			jsr 	TOKDOutput 					; dump it
.1b05	20 e3 1a	jsr $1ae3			jsr 	TOKDGet 					; get length into X
.1b08	aa		tax				tax
.1b09					_TOKDDOutput:
.1b09	ca		dex				dex 								; are we complete
.1b0a	30 08		bmi $1b14			bmi 	_TOKDDEnd
.1b0c	20 e3 1a	jsr $1ae3			jsr 	TOKDGet 					; get character and output it
.1b0f	20 ec 1a	jsr $1aec			jsr 	TOKDOutput
.1b12	80 f5		bra $1b09			bra 	_TOKDDOutput
.1b14					_TOKDDEnd:
.1b14	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1b16	d0 05		bne $1b1d			bne 	_TOKDDNotString
.1b18	a9 22		lda #$22			lda 	#'"'
.1b1a	20 ec 1a	jsr $1aec			jsr 	TOKDOutput
.1b1d					_TOKDDNotString:
.1b1d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1b1e					TOKDIdentifier:
.1b1e	a0 ff		ldy #$ff			ldy 	#$FF
.1b20	8c 45 03	sty $0345			sty 	TOKDIFirstChar
.1b23					_TOKDLoop:
.1b23	a8		tay				tay 								; token in Y
.1b24	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1b26	c0 64		cpy #$64			cpy 	#$64
.1b28	f0 11		beq $1b3b			beq 	_TOKDIOutput
.1b2a	a9 5f		lda #$5f			lda 	#'_'
.1b2c	c0 65		cpy #$65			cpy 	#$65
.1b2e	f0 0b		beq $1b3b			beq 	_TOKDIOutput
.1b30	98		tya				tya 								; handle a-z
.1b31	18		clc				clc
.1b32	69 21		adc #$21			adc	 	#$21
.1b34	c0 5a		cpy #$5a			cpy 	#$5A
.1b36	90 03		bcc $1b3b			bcc 	_TOKDIOutput
.1b38	38		sec				sec 								; handle 0-9
.1b39	e9 4b		sbc #$4b			sbc 	#$4B
.1b3b					_TOKDIOutput:
.1b3b	2c 45 03	bit $0345			bit 	TOKDIFirstChar
.1b3e	10 08		bpl $1b48			bpl 	_TOKDINoSpacing
.1b40	48		pha				pha
.1b41	20 dd 1b	jsr $1bdd			jsr 	TOKDSpacing
.1b44	9c 45 03	stz $0345			stz 	TOKDIFirstChar
.1b47	68		pla				pla
.1b48					_TOKDINoSpacing:
.1b48	20 ec 1a	jsr $1aec			jsr 	TOKDOutput
.1b4b	20 e3 1a	jsr $1ae3			jsr 	TOKDGet 					; get next token
.1b4e	c9 7c		cmp #$7c			cmp 	#$7C
.1b50	90 d1		bcc $1b23			bcc 	_TOKDLoop
.1b52	f0 12		beq $1b66			beq 	_TOKDIExit 					; it's a number, no tail.
.1b54	4a		lsr a				lsr 	a 							; string ?
.1b55	90 07		bcc $1b5e			bcc 	_TOKDICheckArray
.1b57	48		pha				pha
.1b58	a9 24		lda #$24			lda 	#"$"
.1b5a	20 ec 1a	jsr $1aec			jsr 	TOKDOutput
.1b5d	68		pla				pla
.1b5e					_TOKDICheckArray:
.1b5e	4a		lsr a				lsr 	a 							; array ?
.1b5f	90 05		bcc $1b66			bcc 	_TOKDIExit
.1b61	a9 28		lda #$28			lda 	#"("
.1b63	20 ec 1a	jsr $1aec			jsr 	TOKDOutput
.1b66					_TOKDIExit:
.1b66	60		rts				rts
.0345					TOKDIFirstChar:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1b67					TOKDInteger:
.1b67	5a		phy				phy 								; save base
.1b68	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1b6a	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.1b6d					_TOKDILoop:
.1b6d	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1b6f	c9 40		cmp #$40			cmp 	#$40
.1b71	b0 1d		bcs $1b90			bcs 	_TOKDIHaveInteger
.1b73	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1b75	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1b78	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1b7b	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1b7e	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1b81	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1b84	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1b87	20 e3 1a	jsr $1ae3			jsr 	TOKDGet 					; OR byte in.
.1b8a	05 0c		ora $0c				ora 	IFR0+IM0
.1b8c	85 0c		sta $0c				sta 	IFR0+IM0
.1b8e	80 dd		bra $1b6d			bra 	_TOKDILoop
.1b90					_TOKDIHaveInteger:
.1b90	7a		ply				ply 								; restore base
.1b91	98		tya				tya 								; base in A
.1b92	20 37 29	jsr $2937			jsr 	IFloatIntegerToStringR0
.1b95	86 1e		stx $1e				stx 	zTemp0
.1b97	84 1f		sty $1f				sty 	zTemp0+1
.1b99	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b9b	20 dd 1b	jsr $1bdd			jsr 	TOKDSpacing 				; check spacing okay.
.1b9e	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1ba0					_TOKDOutput:
.1ba0	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1ba2	20 ec 1a	jsr $1aec			jsr 	TOKDOutput
.1ba5	c8		iny				iny
.1ba6	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1ba8	d0 f6		bne $1ba0			bne 	_TOKDOutput
.1baa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1bab					TOKDToken:
.1bab	a2 11		ldx #$11			ldx 	#StandardTokens & $FF
.1bad	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1baf					_TOKDSearch:
.1baf	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1bb1	84 1f		sty $1f				sty 	zTemp0+1
.1bb3	aa		tax				tax 								; token ID in X.
.1bb4					_TOKDFind:
.1bb4	ca		dex				dex 								; reached the start
.1bb5	10 0d		bpl $1bc4			bpl 	_TOKDFound
.1bb7	38		sec				sec 								; go to next entry
.1bb8	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bba	65 1e		adc $1e				adc 	zTemp0
.1bbc	85 1e		sta $1e				sta 	zTemp0
.1bbe	90 f4		bcc $1bb4			bcc 	_TOKDFind
.1bc0	e6 1f		inc $1f				inc 	zTemp0+1
.1bc2	80 f0		bra $1bb4			bra 	_TOKDFind
.1bc4					_TOKDFound:
.1bc4	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1bc6	f0 14		beq $1bdc			beq 	_TOKDExit
.1bc8	aa		tax				tax
.1bc9	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1bcb	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1bcd	20 dd 1b	jsr $1bdd			jsr 	TOKDSpacing
.1bd0					_TOKDOutput:
.1bd0	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1bd2	20 31 1f	jsr $1f31			jsr 	TOKToLower
.1bd5	20 ec 1a	jsr $1aec			jsr 	TOKDOutput
.1bd8	c8		iny				iny
.1bd9	ca		dex				dex
.1bda	d0 f4		bne $1bd0			bne 	_TOKDOutput
.1bdc					_TOKDExit:
.1bdc	60		rts				rts
.1bdd					TOKDSpacing:
.1bdd	20 48 1f	jsr $1f48			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1be0	90 0d		bcc $1bef			bcc 	_TOKDSExit
.1be2	ad 44 03	lda $0344			lda 	TOKLastCharacter			; and last character also alphanumeric
.1be5	20 48 1f	jsr $1f48			jsr 	TOKIsIdentifierElement
.1be8	90 05		bcc $1bef			bcc 	_TOKDSExit
.1bea	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1bec	20 ec 1a	jsr $1aec			jsr 	TOKDOutput
.1bef					_TOKDSExit:
.1bef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1bf0					PGMDeleteLine:
.1bf0	20 a3 1c	jsr $1ca3			jsr 	PGMEndProgram 				; end of program into zTemp0
.1bf3	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1bf5	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1bf8	85 21		sta $21				sta 	zTemp1+1
.1bfa					_PGMDLoop:
.1bfa	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1bfc	38		sec				sec
.1bfd	f0 3a		beq $1c39			beq 	_PGMDExit
.1bff	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1c01	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c03	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c06	d0 08		bne $1c10			bne 	_PGMDNext
.1c08	c8		iny				iny
.1c09	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c0b	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1c0e	f0 0d		beq $1c1d			beq 	_PGMDDelete
.1c10					_PGMDNext:
.1c10	18		clc				clc
.1c11	b2 20		lda ($20)			lda 	(zTemp1)
.1c13	65 20		adc $20				adc 	zTemp1
.1c15	85 20		sta $20				sta 	zTemp1
.1c17	90 e1		bcc $1bfa			bcc 	_PGMDLoop
.1c19	e6 21		inc $21				inc 	zTemp1+1
.1c1b	80 dd		bra $1bfa			bra 	_PGMDLoop
.1c1d					_PGMDDelete:
.1c1d	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1c1f	a8		tay				tay
.1c20					_PGMDCopy:
.1c20	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1c22	92 20		sta ($20)			sta 	(zTemp1)
.1c24	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1c26	c5 1e		cmp $1e				cmp 	zTemp0
.1c28	d0 07		bne $1c31			bne 	_PGMDNext2
.1c2a	a5 21		lda $21				lda 	zTemp1+1
.1c2c	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c2e	18		clc				clc
.1c2f	f0 08		beq $1c39			beq 	_PGMDExit
.1c31					_PGMDNext2:
.1c31	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1c33	d0 eb		bne $1c20			bne 	_PGMDCopy
.1c35	e6 21		inc $21				inc 	zTemp1+1
.1c37	80 e7		bra $1c20			bra 	_PGMDCopy
.1c39					_PGMDExit:
.1c39	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1c3a					PGMInsertLine:
.1c3a	20 a3 1c	jsr $1ca3			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c3d	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c3f	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c42	85 21		sta $21				sta 	zTemp1+1
.1c44					_PGMILoop:
.1c44	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c46	f0 1c		beq $1c64			beq 	_PGMIInsert
.1c48	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c4a	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c4c	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1c4f	c8		iny				iny
.1c50	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c52	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1c55	b0 0d		bcs $1c64			bcs 	_PGMIInsert 				; insert here.
.1c57	18		clc				clc
.1c58	b2 20		lda ($20)			lda 	(zTemp1)
.1c5a	65 20		adc $20				adc 	zTemp1
.1c5c	85 20		sta $20				sta 	zTemp1
.1c5e	90 e4		bcc $1c44			bcc 	_PGMILoop
.1c60	e6 21		inc $21				inc 	zTemp1+1
.1c62	80 e0		bra $1c44			bra 	_PGMILoop
.1c64					_PGMIInsert:
.1c64	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1c67					_PGMIInsertLoop:
.1c67	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c69	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1c6b	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1c6d	c5 1e		cmp $1e				cmp 	zTemp0
.1c6f	d0 06		bne $1c77			bne 	_PGMINext
.1c71	a5 21		lda $21				lda 	zTemp1+1
.1c73	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c75	f0 0a		beq $1c81			beq 	_PGMIInserted
.1c77					_PGMINext:
.1c77	a5 1e		lda $1e				lda 	zTemp0
.1c79	d0 02		bne $1c7d			bne 	_PGMINoBorrow
.1c7b	c6 1f		dec $1f				dec 	zTemp0+1
.1c7d					_PGMINoBorrow:
.1c7d	c6 1e		dec $1e				dec 	zTemp0
.1c7f	80 e6		bra $1c67			bra 	_PGMIInsertLoop
.1c81					_PGMIInserted:
.1c81	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1c83					_PGMICopyLoop:
.1c83	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1c86	91 20		sta ($20),y			sta 	(zTemp1),y
.1c88	c8		iny				iny
.1c89	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1c8c	d0 f5		bne $1c83			bne 	_PGMICopyLoop
.1c8e	18		clc				clc
.1c8f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1c90					PGMSetBaseAddress:
.1c90	8e 46 03	stx $0346			stx 	PGMBaseHigh
.1c93	8c 47 03	sty $0347			sty 	PGMEndMemoryHigh
.1c96	60		rts				rts
.1c97					PGMNewProgram:
.1c97	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1c99	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1c9c	85 1f		sta $1f				sta 	zTemp0+1
.1c9e	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1ca0	92 1e		sta ($1e)			sta 	(zTemp0)
.1ca2	60		rts				rts
.1ca3					PGMEndProgram:
.1ca3	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1ca5	ad 46 03	lda $0346			lda 	PGMBaseHigh
.1ca8	85 1f		sta $1f				sta 	zTemp0+1
.1caa					_PGMEPLoop:
.1caa	b2 1e		lda ($1e)			lda 	(zTemp0)
.1cac	f0 0b		beq $1cb9			beq 	_PGMEPExit
.1cae	18		clc				clc
.1caf	65 1e		adc $1e				adc 	zTemp0
.1cb1	85 1e		sta $1e				sta 	zTemp0
.1cb3	90 f5		bcc $1caa			bcc 	_PGMEPLoop
.1cb5	e6 1f		inc $1f				inc 	zTemp0+1
.1cb7	80 f1		bra $1caa			bra 	_PGMEPLoop
.1cb9					_PGMEPExit:
.1cb9	60		rts				rts
.0346					PGMBaseHigh:
>0346							.fill 	1
.0347					PGMEndMemoryHigh:
>0347							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1cba					TOKResetElement:
.1cba	9c 48 03	stz $0348			stz 	TOKElement
.1cbd	60		rts				rts
.1cbe					TOKWriteElement:
.1cbe	da		phx				phx
.1cbf	ae 48 03	ldx $0348			ldx 	TOKElement
.1cc2	9d 49 03	sta $0349,x			sta 	TOKElementText,x
.1cc5	9e 4a 03	stz $034a,x			stz 	TOKElementText+1,x
.1cc8	fa		plx				plx
.1cc9	ee 48 03	inc $0348			inc 	TOKElement
.1ccc	60		rts				rts
.0348					TOKElement:
>0348							.fill 	1
.0349					TOKElementText:
>0349							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1ccd					TOKTokeniseConstant:
.1ccd	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1ccf	48		pha				pha 								; save on stack
.1cd0	29 c0		and #$c0			and 	#$C0
.1cd2	05 0d		ora $0d				ora 	IFR0+IM1
.1cd4	05 0e		ora $0e				ora 	IFR0+IM2
.1cd6	f0 10		beq $1ce8			beq 	_TTCLess
.1cd8	da		phx				phx
.1cd9	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1cdb					_TTCShiftRight:
.1cdb	46 0e		lsr $0e				lsr 	IFR0+IM2
.1cdd	66 0d		ror $0d				ror 	IFR0+IM1
.1cdf	66 0c		ror $0c				ror 	IFR0+IM0
.1ce1	ca		dex				dex
.1ce2	d0 f7		bne $1cdb			bne 	_TTCShiftRight
.1ce4	fa		plx				plx
.1ce5	20 cd 1c	jsr $1ccd			jsr 	TOKTokeniseConstant
.1ce8					_TTCLess:
.1ce8	68		pla				pla
.1ce9	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1ceb	20 84 1d	jsr $1d84			jsr 	TOKWriteA
.1cee	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1cef					TOKTokeniseDecimals:
.1cef	20 94 1d	jsr $1d94			jsr 	TOKGetNext 					; consume the .
.1cf2	20 be 1e	jsr $1ebe			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1cf5	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1cf7	20 84 1d	jsr $1d84			jsr 	TOKWriteA
.1cfa	20 ff 1c	jsr $1cff			jsr 	TOKOutputElementBuffer 		; then the buffer
.1cfd	18		clc				clc
.1cfe	60		rts				rts
.1cff					TOKOutputElementBuffer:
.1cff	ad 48 03	lda $0348			lda 	TOKElement 					; get count and write that
.1d02	20 84 1d	jsr $1d84			jsr 	TOKWriteA
.1d05	a8		tay				tay 								; put in Y
.1d06	f0 0c		beq $1d14			beq 	_TOEExit 					; exit if empty which is okay.
.1d08	a2 01		ldx #$01			ldx 	#1
.1d0a					_TOELoop:
.1d0a	bd 48 03	lda $0348,x			lda 	TOKElement,x
.1d0d	20 84 1d	jsr $1d84			jsr 	TOKWriteA
.1d10	e8		inx				inx
.1d11	88		dey				dey
.1d12	d0 f6		bne $1d0a			bne 	_TOELoop
.1d14					_TOEExit:
.1d14	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1d15					TOKTokenise:
.1d15	8c 49 04	sty $0449			sty 	TOKDataSource+1 			; save source routine pointer
.1d18	8e 48 04	stx $0448			stx 	TOKDataSource
.1d1b	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1d1d	8d 4a 04	sta $044a			sta 	TOKIsFirstElement
.1d20	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1d22	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1d25					_TOKMainLoop:
.1d25	20 90 1d	jsr $1d90			jsr 	TOKGet 						; what follows.
.1d28	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1d2a	f0 4f		beq $1d7b			beq 	_TOKExit
.1d2c	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1d2e	d0 05		bne $1d35			bne 	_TOKElement
.1d30	20 94 1d	jsr $1d94			jsr 	TOKGetNext
.1d33	80 f0		bra $1d25			bra 	_TOKMainLoop
.1d35					_TOKElement:
.1d35	20 3c 1f	jsr $1f3c			jsr 	TOKIsDigit 					; is it 0..9
.1d38	90 0a		bcc $1d44			bcc 	_TOKNotDigit
.1d3a	20 95 1e	jsr $1e95			jsr 	TOKTokeniseInteger 			; get integer
.1d3d	b0 43		bcs $1d82			bcs 	_TOKFail 					; did it fail ?
.1d3f	9c 4a 04	stz $044a			stz 	TOKIsFirstElement 			; clear first element flag
.1d42	80 e1		bra $1d25			bra 	_TOKMainLoop
.1d44					_TOKNotDigit:
.1d44	9c 4a 04	stz $044a			stz 	TOKIsFirstElement 			; clear first element flag
.1d47	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d49	d0 07		bne $1d52			bne 	_TOKNotHex
.1d4b	20 dd 1d	jsr $1ddd			jsr 	TOKTokeniseHexadecimal
.1d4e	b0 32		bcs $1d82			bcs 	_TOKFail
.1d50	80 d3		bra $1d25			bra 	_TOKMainLoop
.1d52					_TOKNotHex:
.1d52	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1d54	d0 07		bne $1d5d			bne 	_TOKNotDecimal
.1d56	20 ef 1c	jsr $1cef			jsr 	TOKTokeniseDecimals
.1d59	b0 27		bcs $1d82			bcs 	_TOKFail
.1d5b	80 c8		bra $1d25			bra 	_TOKMainLoop
.1d5d					_TOKNotDecimal:
.1d5d	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1d5f	d0 07		bne $1d68			bne 	_TOKNotString
.1d61	20 03 1f	jsr $1f03			jsr 	TOKTokeniseString
.1d64	b0 1c		bcs $1d82			bcs 	_TOKFail
.1d66	80 bd		bra $1d25			bra 	_TOKMainLoop
.1d68					_TOKNotString:
.1d68	20 59 1f	jsr $1f59			jsr 	TOKIsAlpha 					; identifier ?
.1d6b	b0 07		bcs $1d74			bcs 	_TOKIdentifier
.1d6d	20 d2 1e	jsr $1ed2			jsr 	TOKTokenisePunctuation 		; punctuation
.1d70	b0 10		bcs $1d82			bcs 	_TOKFail
.1d72	80 b1		bra $1d25			bra 	_TOKMainLoop
.1d74					_TOKIdentifier:
.1d74	20 17 1e	jsr $1e17			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1d77	b0 09		bcs $1d82			bcs 	_TOKFail
.1d79	80 aa		bra $1d25			bra 	_TOKMainLoop
.1d7b					_TOKExit:
.1d7b	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1d7d	20 84 1d	jsr $1d84			jsr 	TOKWriteA
.1d80	18		clc				clc									; return with carry set.
.1d81	60		rts				rts
.1d82					_TOKFail:
.1d82	38		sec				sec
.1d83	60		rts				rts
.1d84					TOKWriteA:
.1d84	da		phx				phx
.1d85	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1d88	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1d8b	fa		plx				plx
.1d8c	ee 37 02	inc $0237			inc 	TOKLineSize
.1d8f	60		rts				rts
.1d90					TOKGet:
.1d90	18		clc				clc
.1d91	6c 48 04	jmp ($0448)			jmp 	(TOKDataSource)
.1d94					TOKGetNext:
.1d94	38		sec				sec
.1d95	6c 48 04	jmp ($0448)			jmp 	(TOKDataSource)
.0448					TOKDataSource:
>0448							.fill 	2
.044a					TOKIsFirstElement:
>044a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1d98					TOKFindToken:
.1d98	a2 11		ldx #$11			ldx 	#StandardTokens & $FF 		; do this table
.1d9a	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1d9c	20 a7 1d	jsr $1da7			jsr 	TOKFindTokenXY 				; find it, or not
.1d9f	90 04		bcc $1da5			bcc 	_TOKFTFail
.1da1	a2 00		ldx #$00			ldx 	#0
.1da3	38		sec				sec
.1da4	60		rts				rts
.1da5					_TOKFTFail
.1da5	18		clc				clc
.1da6	60		rts				rts
.1da7					TOKFindTokenXY:
.1da7	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1da9	84 1f		sty $1f				sty 	zTemp0+1
.1dab	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1dad	8d 4b 04	sta $044b			sta 	TOKCurrent
.1db0					_TOKFindLoop:
.1db0	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1db2	18		clc				clc 		 						; clear carry in case of fail
.1db3	30 17		bmi $1dcc			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1db5	cd 48 03	cmp $0348			cmp 	TOKElement 					; compare against the element length
.1db8	d0 13		bne $1dcd			bne 	_TOKNext 					; different, try next.
.1dba	aa		tax				tax 								; number of chars to compare.
.1dbb	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1dbd					_TOKCompare:
.1dbd	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1dbf	d9 48 03	cmp $0348,y			cmp 	TOKElementText-1,y
.1dc2	d0 09		bne $1dcd			bne 	_TOKNext 					; different ? try next
.1dc4	c8		iny				iny 								; compare next two
.1dc5	ca		dex				dex
.1dc6	d0 f5		bne $1dbd			bne 	_TOKCompare 				; until done X characters.
.1dc8	38		sec				sec
.1dc9	ad 4b 04	lda $044b			lda 	TOKCurrent 					; return current ID.
.1dcc					_TOKExit:
.1dcc	60		rts				rts
.1dcd					_TOKNext:
.1dcd	ee 4b 04	inc $044b			inc 	TOKCurrent 					; increment token #
.1dd0	38		sec				sec 								; add length+1 to ptr
.1dd1	b2 1e		lda ($1e)			lda 	(zTemp0)
.1dd3	65 1e		adc $1e				adc 	zTemp0
.1dd5	85 1e		sta $1e				sta 	zTemp0
.1dd7	90 d7		bcc $1db0			bcc 	_TOKFindLoop
.1dd9	e6 1f		inc $1f				inc 	zTemp0+1
.1ddb	80 d3		bra $1db0			bra 	_TOKFindLoop
.044b					TOKCurrent:
>044b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1ddd					TOKTokeniseHexadecimal:
.1ddd	20 94 1d	jsr $1d94			jsr 	TOKGetNext 					; consume the $
.1de0	a2 0c		ldx #$0c			ldx 	#IFR0
.1de2	20 96 2b	jsr $2b96			jsr 	IFloatSetZero 				; set R0 = 0
.1de5					_TTHLoop:
.1de5	20 90 1d	jsr $1d90			jsr 	TOKGet 						; keep getting and copying while numeric.
.1de8	20 66 1f	jsr $1f66			jsr 	TOKIsHexadecimal
.1deb	90 20		bcc $1e0d			bcc 	_TTHDone
.1ded	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1def	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1df2	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1df5	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1df8	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.1dfb	20 94 1d	jsr $1d94			jsr 	TOKGetNext
.1dfe	38		sec				sec 								; convert to decimal.
.1dff	e9 30		sbc #$30			sbc 	#48
.1e01	c9 0a		cmp #$0a			cmp 	#10
.1e03	90 02		bcc $1e07			bcc 	_TTHNotAlpha
.1e05	e9 07		sbc #$07			sbc 	#7
.1e07					_TTHNotAlpha:
.1e07	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1e09	85 0c		sta $0c				sta 	IFR0+IM0
.1e0b	80 d8		bra $1de5			bra 	_TTHLoop
.1e0d					_TTHDone:
.1e0d	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1e0f	20 84 1d	jsr $1d84			jsr 	TOKWriteA
.1e12	20 cd 1c	jsr $1ccd			jsr 	TOKTokeniseConstant 		; write integer out.
.1e15	18		clc				clc
.1e16	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1e17					TOKTokeniseIdentifier:
.1e17	20 ba 1c	jsr $1cba			jsr 	TOKResetElement 			; extract an identifier
.1e1a					_TOKGetIdentifier:
.1e1a	20 90 1d	jsr $1d90			jsr 	TOKGet
.1e1d	20 26 1f	jsr $1f26			jsr 	TOKToUpper
.1e20	20 48 1f	jsr $1f48			jsr 	TOKIsIdentifierElement
.1e23	90 08		bcc $1e2d			bcc 	_TOKEndIdent
.1e25	20 be 1c	jsr $1cbe			jsr		TOKWriteElement
.1e28	20 94 1d	jsr $1d94			jsr 	TOKGetNext
.1e2b	80 ed		bra $1e1a			bra 	_TOKGetIdentifier
.1e2d					_TOKEndIdent:
.1e2d	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1e2f	d0 06		bne $1e37			bne 	_TOKNotString
.1e31	20 be 1c	jsr $1cbe			jsr 	TOKWriteElement 			; add it
.1e34	20 94 1d	jsr $1d94			jsr 	TOKGetNext 					; consume it
.1e37					_TOKNotString:
.1e37	20 90 1d	jsr $1d90			jsr 	TOKGet 						; finally check for (
.1e3a	c9 28		cmp #$28			cmp 	#"("
.1e3c	d0 06		bne $1e44			bne 	_TOKNoArray
.1e3e	20 be 1c	jsr $1cbe			jsr 	TOKWriteElement 			; add it
.1e41	20 94 1d	jsr $1d94			jsr 	TOKGetNext 					; consume it
.1e44					_TOKNoArray:
.1e44	20 98 1d	jsr $1d98			jsr 	TOKFindToken 				; find it
.1e47	90 05		bcc $1e4e			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e49	20 84 1d	jsr $1d84			jsr 	TOKWriteA
.1e4c	18		clc				clc
.1e4d	60		rts				rts
.1e4e					_TOKIsVariable:
.1e4e	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1e50					_TOKOutputBuffer:
.1e50	bd 49 03	lda $0349,x			lda 	TOKElementText,x 			; output it translated.
.1e53	20 7c 1e	jsr $1e7c			jsr 	TOKTranslateIdentifier
.1e56	20 84 1d	jsr $1d84			jsr 	TOKWriteA
.1e59	e8		inx				inx
.1e5a	bd 49 03	lda $0349,x			lda 	TOKElementText,x
.1e5d	20 48 1f	jsr $1f48			jsr 	TOKIsIdentifierElement
.1e60	b0 ee		bcs $1e50			bcs 	_TOKOutputBuffer
.1e62	a8		tay				tay 								; last char in Y
.1e63	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1e65	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1e67	f0 0e		beq $1e77			beq 	_TOKIVExit
.1e69	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1e6b	d0 04		bne $1e71			bne 	_TOKIVCheckArray 			; no, check for (
.1e6d	1a		inc a				inc 	a 							; token is $7D
.1e6e	bc 4a 03	ldy $034a,x			ldy 	TOKElementText+1,x 			; get next one.
.1e71					_TOKIVCheckArray:
.1e71	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1e73	d0 02		bne $1e77			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1e75	1a		inc a				inc 	a
.1e76	1a		inc a				inc 	a
.1e77					_TOKIVExit:
.1e77	20 84 1d	jsr $1d84			jsr 	TOKWriteA 					; ending token
.1e7a	18		clc				clc
.1e7b	60		rts				rts
.1e7c					TOKTranslateIdentifier:
.1e7c	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1e7e	f0 0f		beq $1e8f			beq 	_TTI64
.1e80	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1e82	f0 0e		beq $1e92			beq 	_TTI65
.1e84	38		sec				sec
.1e85	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1e87	10 03		bpl $1e8c			bpl 	_TTIExit
.1e89	18		clc				clc 								; map 09 onto 26-35
.1e8a	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1e8c					_TTIExit:
.1e8c	09 40		ora #$40			ora 	#$40 						; correct range.
.1e8e	60		rts				rts
.1e8f	a9 64		lda #$64	_TTI64:	lda 	#$64
.1e91	60		rts				rts
.1e92	a9 65		lda #$65	_TTI65:	lda 	#$65
.1e94	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1e95					TOKTokeniseInteger:
.1e95	20 be 1e	jsr $1ebe			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1e98	a2 49		ldx #$49			ldx 	#TOKElementText & $FF
.1e9a	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1e9c	ad 48 03	lda $0348			lda		TOKElement
.1e9f	20 fa 29	jsr $29fa			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1ea2	ad 4a 04	lda $044a			lda 	TOKIsFirstElement 			; first element ?
.1ea5	f0 12		beq $1eb9			beq 	_TOKNotLineNumber
.1ea7	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1ea9	d0 0c		bne $1eb7			bne 	_TOKBadLineNumeber
.1eab	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1ead	8d 38 02	sta $0238			sta 	TOKLineNumber
.1eb0	a5 0d		lda $0d				lda 	IFR0+IM1
.1eb2	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1eb5	18		clc				clc
.1eb6	60		rts				rts
.1eb7					_TOKBadLineNumeber:
.1eb7	38		sec				sec
.1eb8	60		rts				rts
.1eb9					_TOKNotLineNumber:
.1eb9	20 cd 1c	jsr $1ccd			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1ebc	18		clc				clc
.1ebd	60		rts				rts
.1ebe					TOKExtractInteger:
.1ebe	20 ba 1c	jsr $1cba			jsr 	TOKResetElement 			; restart
.1ec1					_TTILoop:
.1ec1	20 90 1d	jsr $1d90			jsr 	TOKGet 						; keep getting and copying while numeric.
.1ec4	20 3c 1f	jsr $1f3c			jsr 	TOKIsDigit
.1ec7	90 08		bcc $1ed1			bcc 	_TOKEIExit
.1ec9	20 be 1c	jsr $1cbe			jsr 	TOKWriteElement
.1ecc	20 94 1d	jsr $1d94			jsr 	TOKGetNext
.1ecf	80 f0		bra $1ec1			bra 	_TTILoop
.1ed1					_TOKEIExit:
.1ed1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1ed2					TOKTokenisePunctuation:
.1ed2	20 ba 1c	jsr $1cba			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1ed5	20 94 1d	jsr $1d94			jsr 	TOKGetNext
.1ed8	20 be 1c	jsr $1cbe			jsr 	TOKWriteElement
.1edb	20 90 1d	jsr $1d90			jsr 	TOKGet 						; what follows ?
.1ede	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1ee0	f0 10		beq $1ef2			beq 	_TTPOne
.1ee2	20 50 1f	jsr $1f50			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1ee5	b0 0b		bcs $1ef2			bcs 	_TTPOne 					; these speed things up a bit.
.1ee7	20 be 1c	jsr $1cbe			jsr 	TOKWriteElement 			; this is what we will search for.
.1eea	20 98 1d	jsr $1d98			jsr 	TOKFindToken
.1eed	b0 0a		bcs $1ef9			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1eef	ce 48 03	dec $0348			dec 	TOKElement 					; make it a single character
.1ef2					_TTPOne:
.1ef2	20 98 1d	jsr $1d98			jsr 	TOKFindToken 				; look for one character punctuation
.1ef5	b0 07		bcs $1efe			bcs 	_TTPOutputExit 				; we found it
.1ef7	38		sec				sec 								; not recognised.
.1ef8	60		rts				rts
.1ef9					_TTPConsumeExit:
.1ef9	48		pha				pha
.1efa	20 94 1d	jsr $1d94			jsr 	TOKGetNext 					; get the 2nd char out.
.1efd	68		pla				pla
.1efe					_TTPOutputExit:
.1efe	20 84 1d	jsr $1d84			jsr  	TOKWriteA 					; write token out
.1f01	18		clc				clc
.1f02	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1f03					TOKTokeniseString:
.1f03	20 94 1d	jsr $1d94			jsr 	TOKGetNext 					; consume the "
.1f06	20 ba 1c	jsr $1cba			jsr 	TOKResetElement 			; start getting the string
.1f09					_TOKTSLoop:
.1f09	20 90 1d	jsr $1d90			jsr 	TOKGet 						; check EOL
.1f0c	c9 00		cmp #$00			cmp 	#0
.1f0e	f0 0c		beq $1f1c			beq 	_TOKTSExit
.1f10	20 94 1d	jsr $1d94			jsr 	TOKGetNext 					; get and consume
.1f13	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1f15	f0 05		beq $1f1c			beq 	_TOKTSExit
.1f17	20 be 1c	jsr $1cbe			jsr 	TOKWriteElement
.1f1a	80 ed		bra $1f09			bra 	_TOKTSLoop
.1f1c					_TOKTSExit:
.1f1c	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1f1e	20 84 1d	jsr $1d84			jsr 	TOKWriteA
.1f21	20 ff 1c	jsr $1cff			jsr 	TOKOutputElementBuffer
.1f24	18		clc				clc
.1f25	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1f26					TOKToUpper:
.1f26	c9 61		cmp #$61			cmp 	#"a"
.1f28	90 06		bcc $1f30			bcc 	_TTUNotLower
.1f2a	c9 7b		cmp #$7b			cmp 	#"z"+1
.1f2c	b0 02		bcs $1f30			bcs 	_TTUNotLower
.1f2e	49 20		eor #$20			eor 	#$20
.1f30					_TTUNotLower:
.1f30	60		rts				rts
.1f31					TOKToLower:
.1f31	c9 41		cmp #$41			cmp 	#"A"
.1f33	90 06		bcc $1f3b			bcc 	_TTUNotUpper
.1f35	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f37	b0 02		bcs $1f3b			bcs 	_TTUNotUpper
.1f39	49 20		eor #$20			eor 	#$20
.1f3b					_TTUNotUpper:
.1f3b	60		rts				rts
.1f3c					TOKIsDigit:
.1f3c	c9 30		cmp #$30			cmp 	#"0"
.1f3e	90 06		bcc $1f46			bcc 	TOKFail
.1f40	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f42	b0 02		bcs $1f46			bcs 	TOKFail
.1f44					TOKSucceed:
.1f44	38		sec				sec
.1f45	60		rts				rts
.1f46					TOKFail:
.1f46	18		clc				clc
.1f47	60		rts				rts
.1f48					TOKIsIdentifierElement:
.1f48	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f4a	f0 f8		beq $1f44			beq 	TOKSucceed
.1f4c	c9 5f		cmp #$5f			cmp 	#"_"
.1f4e	f0 f4		beq $1f44			beq 	TOKSucceed 					; else fall through to alphanumeric
.1f50					TOKIsAlphaNumeric:
.1f50	20 59 1f	jsr $1f59			jsr 	TOKIsAlpha
.1f53	b0 ef		bcs $1f44			bcs 	TOKSucceed
.1f55	20 3c 1f	jsr $1f3c			jsr 	TOKIsDigit
.1f58	60		rts				rts
.1f59					TOKIsAlpha:
.1f59	20 26 1f	jsr $1f26			jsr 	TOKToUpper
.1f5c	c9 41		cmp #$41			cmp 	#"A"
.1f5e	90 e6		bcc $1f46			bcc 	TOKFail
.1f60	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f62	b0 e2		bcs $1f46			bcs 	TOKFail
.1f64	80 de		bra $1f44			bra 	TOKSucceed
.1f66					TOKIsHexadecimal:
.1f66	20 3c 1f	jsr $1f3c			jsr		TOKIsDigit
.1f69	b0 d9		bcs $1f44			bcs 	TOKSucceed
.1f6b	20 59 1f	jsr $1f59			jsr 	TOKIsAlpha
.1f6e	90 d6		bcc $1f46			bcc 	TOKFail
.1f70	c9 47		cmp #$47			cmp 	#"F"+1
.1f72	b0 d2		bcs $1f46			bcs 	TOKFail
.1f74	80 ce		bra $1f44			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.1f76					Command_DO:
.1f76	a9 22		lda #$22			lda 	#STK_DO
.1f78	20 ae 22	jsr $22ae			jsr 	StackOpen
.1f7b	20 e2 22	jsr $22e2			jsr 	STKSaveCodePosition 		; save loop position
.1f7e	60		rts				rts
.1f7f					Command_EXIT:
.1f7f	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.1f81	20 da 22	jsr $22da			jsr 	StackCheckFrame
.1f84	20 cc 22	jsr $22cc			jsr 	StackClose 					; close it
.1f87	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.1f89	aa		tax				tax
.1f8a	20 c2 20	jsr $20c2			jsr 	ScanForward
.1f8d	60		rts				rts
.1f8e					Command_LOOP:
.1f8e	a9 22		lda #$22			lda 	#STK_DO
.1f90	20 da 22	jsr $22da			jsr 	StackCheckFrame
.1f93	20 f4 22	jsr $22f4			jsr 	STKLoadCodePosition 		; loop back
.1f96	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.1f97					Command_FOR:
.1f97	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.1f99	20 ae 22	jsr $22ae			jsr 	StackOpen
.1f9c	20 e9 11	jsr $11e9			jsr 	CommandLET 					; do "I = 1" bit
.1f9f	5a		phy				phy 								; save variable address to +4,+5
.1fa0	a0 04		ldy #$04			ldy 	#4
.1fa2	a5 1e		lda $1e				lda 	zTemp0
.1fa4	91 26		sta ($26),y			sta 	(basicStack),y
.1fa6	c8		iny				iny
.1fa7	a5 1f		lda $1f				lda 	zTemp0+1
.1fa9	91 26		sta ($26),y			sta 	(basicStack),y
.1fab	7a		ply				ply
.1fac	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.1fae	20 a5 22	jsr $22a5			jsr 	ERRCheckA
.1fb1	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.1fb4	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.1fb6	a2 0c		ldx #$0c			ldx 	#IFR0
.1fb8	20 f0 1f	jsr $1ff0			jsr 	CFSaveR0X
.1fbb	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; STEP here ?
.1fbd	c9 91		cmp #$91			cmp 	#PR_STEP
.1fbf	d0 06		bne $1fc7			bne 	_CFStep1
.1fc1	c8		iny				iny 								; consume step
.1fc2	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; evaluate STEP
.1fc5	80 07		bra $1fce			bra 	_CFWriteStep
.1fc7					_CFStep1:
.1fc7	a2 0c		ldx #$0c			ldx 	#IFR0 						; default R0, 1
.1fc9	a9 01		lda #$01			lda 	#1
.1fcb	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.1fce					_CFWriteStep:
.1fce	a2 0c		ldx #$0c			ldx 	#IFR0 						; Write to additive.
.1fd0	a9 06		lda #$06			lda 	#6
.1fd2	20 f0 1f	jsr $1ff0			jsr 	CFSaveR0X
.1fd5	20 e2 22	jsr $22e2			jsr 	STKSaveCodePosition 		; save loop position
.1fd8	60		rts				rts
.1fd9					CFLoadR0X:
.1fd9	5a		phy				phy
.1fda	a8		tay				tay
.1fdb	b1 26		lda ($26),y			lda 	(basicStack),y
.1fdd	95 00		sta $00,x			sta 	IM0,x
.1fdf	c8		iny				iny
.1fe0	b1 26		lda ($26),y			lda 	(basicStack),y
.1fe2	95 01		sta $01,x			sta 	IM1,x
.1fe4	c8		iny				iny
.1fe5	b1 26		lda ($26),y			lda 	(basicStack),y
.1fe7	95 02		sta $02,x			sta 	IM2,x
.1fe9	c8		iny				iny
.1fea	b1 26		lda ($26),y			lda 	(basicStack),y
.1fec	95 03		sta $03,x			sta 	IExp,x
.1fee	7a		ply				ply
.1fef	60		rts				rts
.1ff0					CFSaveR0X:
.1ff0	5a		phy				phy
.1ff1	a8		tay				tay
.1ff2	b5 00		lda $00,x			lda 	IM0,x
.1ff4	91 26		sta ($26),y			sta 	(basicStack),y
.1ff6	c8		iny				iny
.1ff7	b5 01		lda $01,x			lda 	IM1,x
.1ff9	91 26		sta ($26),y			sta 	(basicStack),y
.1ffb	c8		iny				iny
.1ffc	b5 02		lda $02,x			lda 	IM2,x
.1ffe	91 26		sta ($26),y			sta 	(basicStack),y
.2000	c8		iny				iny
.2001	b5 03		lda $03,x			lda 	IExp,x
.2003	91 26		sta ($26),y			sta 	(basicStack),y
.2005	7a		ply				ply
.2006	60		rts				rts
.2007					Command_NEXT:
.2007	a9 37		lda #$37			lda 	#STK_FOR
.2009	20 da 22	jsr $22da			jsr 	StackCheckFrame
.200c	20 41 20	jsr $2041			jsr 	_CNLoadValue 				; load index value to R0.
.200f	a2 10		ldx #$10			ldx 	#IFR1 						; load adding value to R1.
.2011	a9 06		lda #$06			lda 	#6
.2013	20 d9 1f	jsr $1fd9			jsr 	CFLoadR0X
.2016	20 8c 25	jsr $258c			jsr 	IFloatAdd 					; add them together and write back.
.2019	20 64 20	jsr $2064			jsr 	_CNSaveValue
.201c	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.201e	a2 10		ldx #$10			ldx 	#IFR1
.2020	20 d9 1f	jsr $1fd9			jsr 	CFLoadR0X
.2023	20 64 28	jsr $2864			jsr 	IFloatCompare 				; compare terminal vs current
.2026	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2028	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero
.202b	f0 10		beq $203d			beq 	_CNLoopBack
.202d	a5 0f		lda $0f				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.202f	5a		phy				phy
.2030	a0 09		ldy #$09			ldy 	#6+IExp
.2032	51 26		eor ($26),y			eor 	(basicStack),y
.2034	7a		ply				ply
.2035	29 40		and #$40			and 	#IFSign
.2037	f0 04		beq $203d			beq 	_CNLoopBack
.2039	20 cc 22	jsr $22cc			jsr 	StackClose		 			; return
.203c	60		rts				rts
.203d					_CNLoopBack:
.203d	20 f4 22	jsr $22f4			jsr 	STKLoadCodePosition 		; loop back
.2040	60		rts				rts
.2041					_CNLoadValue:
.2041	5a		phy				phy
.2042	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2044	b1 26		lda ($26),y			lda 	(basicStack),y
.2046	85 22		sta $22				sta 	zTemp2
.2048	c8		iny				iny
.2049	b1 26		lda ($26),y			lda 	(basicStack),y
.204b	85 23		sta $23				sta 	zTemp2+1
.204d	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.204f	b1 22		lda ($22),y			lda 	(zTemp2),y
.2051	85 0c		sta $0c				sta 	IFR0+IM0
.2053	c8		iny				iny
.2054	b1 22		lda ($22),y			lda 	(zTemp2),y
.2056	85 0d		sta $0d				sta 	IFR0+IM1
.2058	c8		iny				iny
.2059	b1 22		lda ($22),y			lda 	(zTemp2),y
.205b	85 0e		sta $0e				sta 	IFR0+IM2
.205d	c8		iny				iny
.205e	b1 22		lda ($22),y			lda 	(zTemp2),y
.2060	85 0f		sta $0f				sta 	IFR0+IExp
.2062	7a		ply				ply
.2063	60		rts				rts
.2064					_CNSaveValue:
.2064	5a		phy				phy
.2065	a0 00		ldy #$00			ldy 	#0
.2067	a5 0c		lda $0c				lda 	IFR0+IM0
.2069	91 22		sta ($22),y			sta 	(zTemp2),y
.206b	c8		iny				iny
.206c	a5 0d		lda $0d				lda 	IFR0+IM1
.206e	91 22		sta ($22),y			sta 	(zTemp2),y
.2070	c8		iny				iny
.2071	a5 0e		lda $0e				lda 	IFR0+IM2
.2073	91 22		sta ($22),y			sta 	(zTemp2),y
.2075	c8		iny				iny
.2076	a5 0f		lda $0f				lda 	IFR0+IExp
.2078	91 22		sta ($22),y			sta 	(zTemp2),y
.207a	7a		ply				ply
.207b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.207c					IfCommand:
.207c	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; Get the if test.
.207f	b1 1c		lda ($1c),y			lda 	(codePtr),y					; what follows ?
.2081	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2083	d0 0a		bne $208f			bne 	_IfStructured 				; we still support it.
.2085	c8		iny				iny 								; consume THEN
.2086	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero 			; is it zero
.2089	f0 01		beq $208c			beq 	_IfFail 					; if fail, go to next line
.208b	60		rts				rts 								; if THEN just continue
.208c					_IfFail:
.208c	4c 83 12	jmp $1283			jmp 	RUNEndOfLine
.208f					_IfStructured:
.208f	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero 			; is it zero
.2092	d0 07		bne $209b			bne 	_IfExit 					; if not, then continue normally.
.2094	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2096	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2098	20 c2 20	jsr $20c2			jsr 	ScanForward 				; and run from there
.209b					_IfExit:
.209b	60		rts				rts
.209c					ElseCode:
.209c	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.209e	aa		tax				tax 								; so just go to the structure exit
.209f	20 c2 20	jsr $20c2			jsr 	ScanForward
.20a2	60		rts				rts
.20a3					EndIf:
.20a3	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.20a4					Command_REPEAT:
.20a4	a9 02		lda #$02			lda 	#STK_REPEAT
.20a6	20 ae 22	jsr $22ae			jsr 	StackOpen
.20a9	20 e2 22	jsr $22e2			jsr 	STKSaveCodePosition 		; save loop position
.20ac	60		rts				rts
.20ad					Command_UNTIL:
.20ad	a9 02		lda #$02			lda 	#STK_REPEAT
.20af	20 da 22	jsr $22da			jsr 	StackCheckFrame
.20b2	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; work out the test
.20b5	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero 			; check if zero
.20b8	f0 04		beq $20be			beq 	_CULoopBack 				; if so keep looping
.20ba	20 cc 22	jsr $22cc			jsr 	StackClose		 			; return
.20bd	60		rts				rts
.20be					_CULoopBack:
.20be	20 f4 22	jsr $22f4			jsr 	STKLoadCodePosition 		; loop back
.20c1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scan.asm

.20c2					ScanForward:
.20c2	85 1e		sta $1e				sta 	zTemp0 						; save scan options in zTemp0
.20c4	86 1f		stx $1f				stx 	zTemp0+1
.20c6	64 20		stz $20				stz 	zTemp1 						; clear structure count.
.20c8					_ScanForwardLoop:
.20c8	a5 20		lda $20				lda 	zTemp1 						; if structure count non zero, don't check for end.
.20ca	d0 0a		bne $20d6			bne 	_ScanNoCheck
.20cc	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; reached either target token.
.20ce	c5 1e		cmp $1e				cmp 	zTemp0
.20d0	f0 49		beq $211b			beq 	_ScanExit
.20d2	c5 1f		cmp $1f				cmp 	zTemp0+1
.20d4	f0 45		beq $211b			beq 	_ScanExit
.20d6					_ScanNoCheck:
.20d6	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get the token and consume it.
.20d8	c8		iny				iny
.20d9	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.20db	f0 37		beq $2114			beq		_ScanDataItem
.20dd	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.20df	f0 33		beq $2114			beq 	_ScanDataItem
.20e1	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.20e3	f0 1b		beq $2100			beq 	_ScanNextLine
.20e5	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.20e7	d0 01		bne $20ea			bne 	_ScanNoShift
.20e9	c8		iny				iny
.20ea					_ScanNoShift:
.20ea	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.20ec	b0 da		bcs $20c8			bcs 	_ScanForwardLoop
.20ee	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.20f0	90 d6		bcc $20c8			bcc 	_ScanForwardLoop
.20f2	aa		tax				tax 								; access the table to get the adjustment.
.20f3	18		clc				clc
.20f4	a5 20		lda $20				lda 	zTemp1 						; add it to structure count.
.20f6	7d 85 17	adc $1785,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.20f9	85 20		sta $20				sta 	zTemp1
.20fb	10 cb		bpl $20c8			bpl		_ScanForwardLoop 			; error if -ve ?
.20fd	4c cc 21	jmp $21cc		jmp	ErrorV_structure
.2100					_ScanNextLine:
.2100	18		clc				clc	 								; forward to next line.
.2101	b2 1c		lda ($1c)			lda 	(codePtr)
.2103	65 1c		adc $1c				adc 	codePtr
.2105	85 1c		sta $1c				sta 	codePtr
.2107	90 02		bcc $210b			bcc 	_ScanNoCarry
.2109	e6 1d		inc $1d				inc 	codePtr+1
.210b					_ScanNoCarry:
.210b	a0 03		ldy #$03			ldy 	#3
.210d	b2 1c		lda ($1c)			lda 	(codePtr) 					; off end of program ?
.210f	d0 b7		bne $20c8			bne 	_ScanForwardLoop
.2111	4c cc 21	jmp $21cc		jmp	ErrorV_structure
.2114					_ScanDataItem:
.2114	98		tya				tya
.2115	38		sec				sec
.2116	71 1c		adc ($1c),y			adc 	(codePtr),y
.2118	a8		tay				tay
.2119	80 ad		bra $20c8			bra 	_ScanForwardLoop
.211b					_ScanExit:
.211b	c8		iny				iny 								; consume final token.
.211c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.211d					Command_WHILE:
.211d	5a		phy				phy 								; save position of the test
.211e	20 8a 14	jsr $148a			jsr 	EXPEvalNumber 				; work out the while test.
.2121	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero 			; check if zero
.2124	f0 0e		beq $2134			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2126	98		tya				tya 								; position *after* test.
.2127	7a		ply				ply 								; restore position before test, at WHILE
.2128	88		dey				dey 								; so we execute the WHILE command again.
.2129	48		pha				pha 								; push after test on the stack
.212a	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.212c	20 ae 22	jsr $22ae			jsr 	StackOpen
.212f	20 e2 22	jsr $22e2			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2132	7a		ply				ply 								; restore the position *after* the test
.2133	60		rts				rts
.2134					_WHExitLoop:
.2134	68		pla				pla 								; throw post loop position
.2135	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2137	aa		tax				tax
.2138	20 c2 20	jsr $20c2			jsr 	ScanForward
.213b	60		rts				rts
.213c					Command_WEND:
.213c	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.213e	20 da 22	jsr $22da			jsr 	StackCheckFrame
.2141	20 f4 22	jsr $22f4			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2144	20 cc 22	jsr $22cc			jsr 	StackClose		 			; erase the frame
.2147	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2148					ErrorV_syntax:
.2148	20 78 2c	jsr $2c78		jsr	ErrorHandler
>214b	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>2153	72 72 6f 72 00
.2158					ErrorV_range:
.2158	20 78 2c	jsr $2c78		jsr	ErrorHandler
>215b	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>2163	61 6e 67 65 00
.2168					ErrorV_value:
.2168	20 78 2c	jsr $2c78		jsr	ErrorHandler
>216b	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>2173	65 00
.2175					ErrorV_type:
.2175	20 78 2c	jsr $2c78		jsr	ErrorHandler
>2178	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>2180	6d 61 74 63 68 00
.2186					ErrorV_unimplemented:
.2186	20 78 2c	jsr $2c78		jsr	ErrorHandler
>2189	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>2191	65 6d 65 6e 74 65 64 00
.2199					ErrorV_assert:
.2199	20 78 2c	jsr $2c78		jsr	ErrorHandler
>219c	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>21a4	61 69 6c 00
.21a8					ErrorV_internal:
.21a8	20 78 2c	jsr $2c78		jsr	ErrorHandler
>21ab	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>21b3	20 45 72 72 6f 72 00
.21ba					ErrorV_divzero:
.21ba	20 78 2c	jsr $2c78		jsr	ErrorHandler
>21bd	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>21c5	79 20 5a 65 72 6f 00
.21cc					ErrorV_structure:
.21cc	20 78 2c	jsr $2c78		jsr	ErrorHandler
>21cf	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>21d7	65 20 49 6d 62 61 6c 61 6e 63 65 00
.21e3					ErrorV_stop:
.21e3	20 78 2c	jsr $2c78		jsr	ErrorHandler
>21e6	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>21ee	53 74 6f 70 70 65 64 00
.21f6					ErrorV_data:
.21f6	20 78 2c	jsr $2c78		jsr	ErrorHandler
>21f9	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>2201	61 74 61 00
.2205					ErrorV_redefine:
.2205	20 78 2c	jsr $2c78		jsr	ErrorHandler
>2208	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>2210	64 65 66 69 6e 65 64 00
.2218					ErrorV_index:
.2218	20 78 2c	jsr $2c78		jsr	ErrorHandler
>221b	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>2223	79 20 49 6e 64 65 78 00
.222b					ErrorV_memory:
.222b	20 78 2c	jsr $2c78		jsr	ErrorHandler
>222e	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>2236	65 6d 6f 72 79 00
.223c					ErrorV_uninitialised:
.223c	20 78 2c	jsr $2c78		jsr	ErrorHandler
>223f	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>2247	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2256					ErrorV_string:
.2256	20 78 2c	jsr $2c78		jsr	ErrorHandler
>2259	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>2261	6e 67 20 4c 65 6e 67 74 68 00
.226b					ErrorV_variable:
.226b	20 78 2c	jsr $2c78		jsr	ErrorHandler
>226e	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>2276	20 4d 69 73 73 69 6e 67 00
.227f					ErrorV_stack:
.227f	20 78 2c	jsr $2c78		jsr	ErrorHandler
>2282	53 74 61 63 6b 20 46 75			.text	"Stack Full",0
>228a	6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.228d					ERRCheckLParen:
.228d	b1 1c		lda ($1c),y			lda 	(codePtr),y
.228f	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2291	d0 18		bne $22ab			bne 	ERRSyntaxError
.2293	c8		iny				iny
.2294	60		rts				rts
.2295					ERRCheckRParen:
.2295	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2297	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2299	d0 10		bne $22ab			bne 	ERRSyntaxError
.229b	c8		iny				iny
.229c	60		rts				rts
.229d					ERRCheckComma:
.229d	b1 1c		lda ($1c),y			lda 	(codePtr),y
.229f	c9 99		cmp #$99			cmp 	#PR_COMMA
.22a1	d0 08		bne $22ab			bne 	ERRSyntaxError
.22a3	c8		iny				iny
.22a4	60		rts				rts
.22a5					ERRCheckA:
.22a5	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.22a7	d0 02		bne $22ab			bne 	ERRSyntaxError
.22a9	c8		iny				iny
.22aa	60		rts				rts
.22ab					ERRSyntaxError:
.22ab	4c 48 21	jmp $2148		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.22ae					StackOpen:
.22ae	48		pha				pha 								; save frame byte
.22af	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.22b1	0a		asl a				asl 	a 							; claim twice this for storage
.22b2	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.22b4	38		sec				sec 								; so basically subtracting from
.22b5	65 26		adc $26				adc 	basicStack 	 				; basicStack
.22b7	85 26		sta $26				sta 	basicStack
.22b9	b0 0a		bcs $22c5			bcs 	_SONoBorrow
>22bb	db						.byte 	$DB
.22bc	c6 27		dec $27				dec 	basicStack+1
.22be	a5 27		lda $27				lda 	basicStack+1 				; reached the bottom ?
.22c0	cd 4c 04	cmp $044c			cmp 	basicStackEnd
.22c3	f0 04		beq $22c9			beq 	_SOMemory
.22c5					_SONoBorrow:
.22c5	68		pla				pla 								; get marker back and write at TOS
.22c6	92 26		sta ($26)			sta 	(basicStack)
.22c8	60		rts				rts
.22c9					_SOMemory:
.22c9	4c 7f 22	jmp $227f		jmp	ErrorV_stack
.22cc					StackClose:
.22cc	b2 26		lda ($26)			lda 	(basicStack) 				; get TOS marker
.22ce	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.22d0	0a		asl a				asl 	a 							; claim twice this.
.22d1	65 26		adc $26				adc 	basicStack 					; add to the stack pointer.
.22d3	85 26		sta $26				sta 	basicStack
.22d5	90 02		bcc $22d9			bcc 	_SCExit
.22d7	e6 27		inc $27				inc 	basicStack+1
.22d9					_SCExit:
.22d9	60		rts				rts
.22da					StackCheckFrame:
.22da	d2 26		cmp ($26)			cmp		(basicStack) 				; check  frames match
.22dc	d0 01		bne $22df			bne 	_SCFError 					; different, we have structures mixed up
.22de	60		rts				rts
.22df					_SCFError:
.22df	4c cc 21	jmp $21cc		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.22e2					STKSaveCodePosition:
.22e2	5a		phy				phy
.22e3	98		tya				tya 								; save Y at offset 1.
.22e4	a0 01		ldy #$01			ldy 	#1
.22e6	91 26		sta ($26),y			sta 	(basicStack),y
.22e8	a5 1c		lda $1c				lda 	codePtr 					; save code (low) at 2
.22ea	c8		iny				iny
.22eb	91 26		sta ($26),y			sta 	(basicStack),y
.22ed	a5 1d		lda $1d				lda 	codePtr+1 					; save code (high) at 3
.22ef	c8		iny				iny
.22f0	91 26		sta ($26),y			sta 	(basicStack),y
.22f2	7a		ply				ply
.22f3	60		rts				rts
.22f4					STKLoadCodePosition:
.22f4	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.22f6	b1 26		lda ($26),y			lda 	(basicStack),y
.22f8	85 1d		sta $1d				sta 	codePtr+1
.22fa	88		dey				dey
.22fb	b1 26		lda ($26),y			lda 	(basicStack),y
.22fd	85 1c		sta $1c				sta 	codePtr
.22ff	88		dey				dey
.2300	b1 26		lda ($26),y			lda 	(basicStack),y 				; line offset to Y
.2302	a8		tay				tay
.2303	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2304					StackReset:
.2304	48		pha				pha 								; save top of memory
.2305	3a		dec a				dec 	a  							; end of stack = previous byte
.2306	85 27		sta $27				sta 	basicStack+1
.2308	a9 ff		lda #$ff			lda 	#$FF
.230a	85 26		sta $26				sta 	basicStack
.230c	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.230e	92 26		sta ($26)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2310	68		pla				pla 								; allocate pages for stack.
.2311	38		sec				sec
.2312	e9 02		sbc #$02			sbc 	#stackPages
.2314	8d 4c 04	sta $044c			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2317	60		rts				rts
.0026					basicStack:
>0026							.fill 	2
.044c					basicStackEnd:
>044c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2318					StringConcrete:
.2318	5a		phy				phy 								; save position on stack
.2319	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.231b	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.231d	b0 41		bcs $2360			bcs 	_SALengthError
.231f	18		clc				clc 								; length of the new string
.2320	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2322	90 02		bcc $2326			bcc 	_SAHaveLength
.2324	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2326					_SAHaveLength:
.2326	48		pha				pha 								; save length to be allocated for concreting.
.2327	38		sec				sec
.2328	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.232a	6d 4e 04	adc $044e			adc 	stringMemory
.232d	8d 4e 04	sta $044e			sta 	stringMemory
.2330	85 22		sta $22				sta 	zTemp2 						; update storage address
.2332	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2334	6d 4f 04	adc $044f			adc 	stringMemory+1
.2337	8d 4f 04	sta $044f			sta 	stringMemory+1
.233a	85 23		sta $23				sta 	zTemp2+1
.233c	68		pla				pla 								; save length allocated in +0
.233d	92 22		sta ($22)			sta 	(zTemp2)
.233f	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2341	a0 01		ldy #$01			ldy 	#1
.2343	91 22		sta ($22),y			sta 	(zTemp2),y
.2345					_SACopyNewString:
.2345	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.2347	a0 02		ldy #$02			ldy 	#2
.2349	91 22		sta ($22),y			sta 	(zTemp2),y
.234b	aa		tax				tax 								; bytes to copy
.234c	f0 0c		beq $235a			beq 	_SACopyExit
.234e	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2350					_SACopyNSLoop:
.2350	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.2352	c8		iny				iny 								; write two on in string storage
.2353	c8		iny				iny
.2354	91 22		sta ($22),y			sta 	(zTemp2),y
.2356	88		dey				dey
.2357	ca		dex				dex									; until copied all the string lengths.
.2358	d0 f6		bne $2350			bne 	_SACopyNSLoop
.235a					_SACopyExit:
.235a	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.235c	a5 22		lda $22				lda 	zTemp2
.235e	7a		ply				ply
.235f	60		rts				rts
.2360					_SALengthError:
.2360	4c 56 22	jmp $2256		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2363					StringSystemInitialise:
.2363	3a		dec a				dec 	a 							; make last byte of previous page.
.2364	8d 4f 04	sta $044f			sta 	stringMemory+1
.2367	85 1f		sta $1f				sta 	zTemp0+1
.2369	a9 ff		lda #$ff			lda 	#$FF
.236b	8d 4e 04	sta $044e			sta 	stringMemory
.236e	85 1e		sta $1e				sta 	zTemp0
.2370	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2372	92 1e		sta ($1e)			sta 	(zTemp0)
.2374	60		rts				rts
.2375					StringSpaceInitialise:
.2375	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2377	8d 4d 04	sta $044d			sta 	stringInitialised
.237a	ad 4e 04	lda $044e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.237d	8d 50 04	sta $0450			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2380	ad 4f 04	lda $044f			lda 	stringMemory+1
.2383	3a		dec a				dec 	a
.2384	8d 51 04	sta $0451			sta 	stringTempPointer+1
.2387	20 5b 10	jsr $105b			jsr 	ClearCheckMemory
.238a	60		rts				rts
.238b					StringTempAllocate:
.238b	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.238d	b0 2e		bcs $23bd			bcs 	_STALength
.238f	2c 4d 04	bit $044d			bit 	stringInitialised 			; already initialised
.2392	30 05		bmi $2399			bmi 	_STAAllocate
.2394	48		pha				pha 								; save value to subtract.
.2395	20 75 23	jsr $2375			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2398	68		pla				pla 								; restore it
.2399					_STAAllocate:
.2399	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.239b	18		clc				clc  								; deliberate allows one more
.239c	6d 50 04	adc $0450			adc 	stringTempPointer 			; subtract from temp pointer
.239f	8d 50 04	sta $0450			sta 	stringTempPointer
.23a2	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.23a4	85 28		sta $28				sta 	zsTemp 						; and zsTemp
.23a6	ad 51 04	lda $0451			lda 	stringTempPointer+1
.23a9	69 ff		adc #$ff			adc 	#$FF
.23ab	8d 51 04	sta $0451			sta 	stringTempPointer+1
.23ae	85 29		sta $29				sta 	zsTemp+1
.23b0	85 0d		sta $0d				sta 	IFR0+IM1
.23b2	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.23b4	a9 80		lda #$80			lda 	#$80
.23b6	85 0f		sta $0f				sta 	IFR0+IExp
.23b8	a9 00		lda #$00			lda 	#0 							; clear the target string
.23ba	92 28		sta ($28)			sta 	(zsTemp)
.23bc	60		rts				rts
.23bd					_STALength:
.23bd	4c 56 22	jmp $2256		jmp	ErrorV_string
.23c0					StringTempWrite:
.23c0	5a		phy				phy
.23c1	48		pha				pha
.23c2	b2 28		lda ($28)			lda 	(zsTemp)
.23c4	1a		inc a				inc 	a
.23c5	92 28		sta ($28)			sta 	(zsTemp)
.23c7	a8		tay				tay
.23c8	68		pla				pla
.23c9	91 28		sta ($28),y			sta 	(zsTemp),y
.23cb	7a		ply				ply
.23cc	60		rts				rts
.0028					zsTemp:
>0028							.fill 	2
.044d					stringInitialised:
>044d							.fill 	1
.044e					stringMemory:
>044e							.fill 	2
.0450					stringTempPointer:
>0450							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.23cd					VARArrayLookup:
.23cd	85 1e		sta $1e				sta 	zTemp0 						; save the array address pointer in zTemp0
.23cf	86 1f		stx $1f				stx 	zTemp0+1
.23d1	b2 1e		lda ($1e)			lda 	(zTemp0)
.23d3	48		pha				pha
.23d4	5a		phy				phy
.23d5	a0 01		ldy #$01			ldy 	#1
.23d7	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.23d9	7a		ply				ply
.23da	48		pha				pha
.23db	20 9c 14	jsr $149c			jsr 	EXPEvalInteger16 			; R0 now contains the index
.23de	68		pla				pla 								; array address to zTemp0
.23df	85 1f		sta $1f				sta 	zTemp0+1
.23e1	68		pla				pla
.23e2	85 1e		sta $1e				sta 	zTemp0
.23e4	5a		phy				phy 								; save codePtr position.
.23e5	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.23e7	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.23e9	48		pha				pha 								; save bit 15 on stack.
.23ea	29 7f		and #$7f			and 	#$7F
.23ec	85 20		sta $20				sta 	zTemp1
.23ee	a5 0c		lda $0c				lda 	IFR0+IM0 					; check range of index
.23f0	d2 1e		cmp ($1e)			cmp 	(zTemp0)
.23f2	a5 0d		lda $0d				lda 	IFR0+IM1
.23f4	e5 20		sbc $20				sbc 	zTemp1
.23f6	b0 3a		bcs $2432			bcs 	_VALIndex
.23f8	a5 0d		lda $0d				lda 	IFR0+IM1  					; sanity check
.23fa	c9 40		cmp #$40			cmp 	#$40
.23fc	b0 34		bcs $2432			bcs 	_VALIndex
.23fe	06 0c		asl $0c				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2400	26 0d		rol $0d				rol 	IFR0+IM1
.2402	fa		plx				plx 								; get msb of size -> X
.2403	30 04		bmi $2409			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2405	06 0c		asl $0c				asl 	IFR0+IM0
.2407	26 0d		rol $0d				rol 	IFR0+IM1
.2409					_VARNotX4:
.2409	18		clc				clc 								; add the two for the size bytes
.240a	a5 0c		lda $0c				lda 	IFR0+IM0
.240c	69 02		adc #$02			adc 	#2
.240e	85 0c		sta $0c				sta 	IFR0+IM0
.2410	90 02		bcc $2414			bcc 	_VARNoCarry1
.2412	e6 0d		inc $0d				inc 	IFR0+IM1
.2414					_VARNoCarry1:
.2414	18		clc				clc 								; calculate the element address and push to stack.
.2415	a5 0c		lda $0c				lda 	IFR0+IM0
.2417	65 1e		adc $1e				adc 	zTemp0
.2419	48		pha				pha
.241a	a5 0d		lda $0d				lda 	IFR0+IM1
.241c	65 1f		adc $1f				adc 	zTemp0+1
.241e	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2420	30 04		bmi $2426			bmi 	_VARHasSubLevel
.2422	aa		tax				tax 								; address in XA
.2423	68		pla				pla
.2424	7a		ply				ply 								; restore Y and exit
.2425	60		rts				rts
.2426					_VARHasSubLevel:
.2426	aa		tax				tax 								; get link address in XA
.2427	68		pla				pla
.2428	7a		ply				ply 								; restore code position.
.2429	48		pha				pha
.242a	20 9d 22	jsr $229d			jsr 	ERRCheckComma 				; comma required.
.242d	68		pla				pla
.242e	20 cd 23	jsr $23cd			jsr 	VARArrayLookup 				; call it recursively
.2431	60		rts				rts
.2432					_VALIndex:
.2432	4c 18 22	jmp $2218		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2435					VARCreate:
.2435	5a		phy				phy
.2436	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2438	a2 00		ldx #$00			ldx 	#0
.243a	20 32 10	jsr $1032			jsr 	AllocateMemory
.243d	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.243f	86 21		stx $21				stx 	zTemp1+1
.2441	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2443	ad 54 04	lda $0454			lda 	VARHash
.2446	91 20		sta ($20),y			sta 	(zTemp1),y
.2448	c8		iny				iny 								; put address of name into +3,+4
.2449	ad 52 04	lda $0452			lda 	VARNameAddress
.244c	91 20		sta ($20),y			sta 	(zTemp1),y
.244e	c8		iny				iny
.244f	ad 53 04	lda $0453			lda 	VARNameAddress+1
.2452	91 20		sta ($20),y			sta 	(zTemp1),y
.2454	ad 55 04	lda $0455			lda 	VARType
.2457	29 01		and #$01			and 	#1
.2459	f0 06		beq $2461			beq 	_CVNotString
.245b	a0 08		ldy #$08			ldy 	#5+3
.245d	a9 80		lda #$80			lda 	#$80
.245f	91 20		sta ($20),y			sta 	(zTemp1),y
.2461					_CVNotString:
.2461	ad 76 04	lda $0476			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2464	85 1e		sta $1e				sta 	zTemp0
.2466	ad 77 04	lda $0477			lda 	VARHashEntry+1
.2469	85 1f		sta $1f				sta 	zTemp0+1
.246b	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.246d	b2 1e		lda ($1e)			lda 	(zTemp0)
.246f	92 20		sta ($20)			sta 	(zTemp1)
.2471	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2473	91 20		sta ($20),y			sta 	(zTemp1),y
.2475	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.2477	92 1e		sta ($1e)			sta 	(zTemp0)
.2479	a5 21		lda $21				lda 	zTemp1+1
.247b	91 1e		sta ($1e),y			sta 	(zTemp0),y
.247d	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.247f	a6 21		ldx $21				ldx 	zTemp1+1
.2481	18		clc				clc 								; add 5 to point to the data.
.2482	69 05		adc #$05			adc 	#5
.2484	90 01		bcc $2487			bcc 	_VCNoCarry
.2486	e8		inx				inx
.2487					_VCNoCarry:
.2487	7a		ply				ply
.2488	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2489					VARFind:
.2489	5a		phy				phy
.248a	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.248c	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.248e	85 21		sta $21				sta 	zTemp1+1
.2490	f0 1c		beq $24ae			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2492	b2 1e		lda ($1e)			lda 	(zTemp0)
.2494	85 20		sta $20				sta 	zTemp1
.2496					_VFLoop:
.2496	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2498	b1 20		lda ($20),y			lda 	(zTemp1),y
.249a	cd 54 04	cmp $0454			cmp 	VARHash
.249d	f0 12		beq $24b1			beq 	_VFHashesMatch 				; if so, check the name.
.249f					_VFNext:
.249f	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.24a1	aa		tax				tax
.24a2	a0 01		ldy #$01			ldy 	#1
.24a4	b1 20		lda ($20),y			lda 	(zTemp1),y
.24a6	85 21		sta $21				sta 	zTemp1+1
.24a8	86 20		stx $20				stx 	zTemp1
.24aa	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.24ac	d0 e8		bne $2496			bne 	_VFLoop
.24ae					_VFExitFail:
.24ae	7a		ply				ply
.24af	18		clc				clc
.24b0	60		rts				rts
.24b1					_VFHashesMatch:
.24b1	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.24b3	b1 20		lda ($20),y			lda 	(zTemp1),y
.24b5	85 22		sta $22				sta 	zTemp2
.24b7	c8		iny				iny
.24b8	b1 20		lda ($20),y			lda 	(zTemp1),y
.24ba	85 23		sta $23				sta 	zTemp2+1
.24bc	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.24be					_VFNameCompLoop:
.24be	c8		iny				iny 								; char at a time
.24bf	b9 56 04	lda $0456,y			lda 	VARBuffer,y
.24c2	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.24c4	d0 d9		bne $249f			bne 	_VFNext						; next entry if different.
.24c6	c9 7c		cmp #$7c			cmp 	#$7C
.24c8	90 f4		bcc $24be			bcc 	_VFNameCompLoop 			; until done the whole lot.
.24ca	18		clc				clc
.24cb	a5 20		lda $20				lda 	zTemp1
.24cd	a6 21		ldx $21				ldx 	zTemp1+1
.24cf	69 05		adc #$05			adc 	#5
.24d1	90 01		bcc $24d4			bcc 	_VFNNoCarry
.24d3	e8		inx				inx
.24d4					_VFNNoCarry:
.24d4	7a		ply				ply
.24d5	38		sec				sec
.24d6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.24d7					VARGetInfo:
.24d7	98		tya				tya 								; calculate the address of the identifier start.
.24d8	18		clc				clc
.24d9	65 1c		adc $1c				adc 	codePtr
.24db	8d 52 04	sta $0452			sta 	VARNameAddress
.24de	a5 1d		lda $1d				lda 	codePtr+1
.24e0	69 00		adc #$00			adc 	#0
.24e2	8d 53 04	sta $0453			sta 	VARNameAddress+1
.24e5	9c 54 04	stz $0454			stz 	VARHash
.24e8	a2 00		ldx #$00			ldx 	#0
.24ea					_VARCopyName:
.24ea	18		clc				clc 								; update the sum hash.
.24eb	ad 54 04	lda $0454			lda 	VARHash
.24ee	71 1c		adc ($1c),y			adc 	(codePtr),y
.24f0	8d 54 04	sta $0454			sta 	VARHash
.24f3	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.24f5	c8		iny				iny
.24f6	9d 56 04	sta $0456,x			sta 	VARBuffer,x
.24f9	e8		inx				inx
.24fa	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.24fc	90 ec		bcc $24ea			bcc 	_VARCopyName
.24fe	8d 55 04	sta $0455			sta 	VARType 					; save type byte
.2501	29 03		and #$03			and 	#3 							; type is 0-3
.2503	0a		asl a				asl 	a
.2504	0a		asl a				asl 	a
.2505	85 1e		sta $1e				sta 	zTemp0
.2507	ad 54 04	lda $0454			lda 	VARHash 					; force into range of hash entries per type.
.250a	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.250c	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.250e	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.250f	69 78		adc #$78			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2511	85 1e		sta $1e				sta 	zTemp0
.2513	8d 76 04	sta $0476			sta 	VARHashEntry
.2516	a9 04		lda #$04			lda 	#VARHashTables >> 8
.2518	69 00		adc #$00			adc 	#0
.251a	85 1f		sta $1f				sta 	zTemp0+1
.251c	8d 77 04	sta $0477			sta 	VARHashEntry+1
.251f	60		rts				rts
.2520					VARClearHashTables:
.2520	a2 00		ldx #$00			ldx 	#0
.2522					_VCHRLoop:
.2522	a9 00		lda #$00			lda 	#0
.2524	9d 78 04	sta $0478,x			sta 	VARHashTables,x
.2527	e8		inx				inx
.2528	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.252a	d0 f6		bne $2522			bne 	_VCHRLoop
.252c	60		rts				rts
.0452					VARNameAddress:
>0452							.fill 	2
.0454					VARHash:
>0454							.fill 	1
.0455					VARType:
>0455							.fill 	1
.0456					VARBuffer:
>0456							.fill 	32
.0476					VARHashEntry:
>0476							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0478					VARHashTables:
>0478							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.252d					VARCheckSimple:
.252d	aa		tax				tax 								; save in X
.252e	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2530	c9 7c		cmp #$7c			cmp 	#$7C
.2532	d0 15		bne $2549			bne 	_VCSComplex
.2534	c8		iny				iny 								; consume the second byte, the type.
.2535	8a		txa				txa  								; character (40-7F) x 4
.2536	0a		asl a				asl 	a
.2537	0a		asl a				asl  	a
.2538	18		clc				clc
.2539	69 98		adc #$98			adc 	#FastVariables & $FF
.253b	85 0c		sta $0c				sta 	IFR0+IM0
.253d	a9 04		lda #$04			lda 	#FastVariables >> 8
.253f	69 00		adc #$00			adc 	#0
.2541	85 0d		sta $0d				sta 	IFR0+IM1
.2543	64 0e		stz $0e				stz 	IFR0+IM2
.2545	64 0f		stz $0f				stz 	IFR0+IExp
.2547	38		sec				sec 								; it's a reference
.2548	60		rts				rts
.2549					_VCSComplex:
.2549	88		dey				dey	 								; extract information.
.254a	20 d7 24	jsr $24d7			jsr 	VARGetInfo
.254d	20 89 24	jsr $2489			jsr 	VARFind 					; search for variable
.2550	b0 0a		bcs $255c			bcs 	_VCSHaveVariable
.2552	ad 55 04	lda $0455			lda 	VARType 					; error if arrays, cannot autocreate
.2555	29 02		and #$02			and 	#2
.2557	d0 25		bne $257e			bne 	_VCNoCreate
.2559	20 35 24	jsr $2435			jsr 	VARCreate 					; create variable
.255c					_VCSHaveVariable:
.255c	48		pha				pha 								; save LSB on the stack
.255d	ad 55 04	lda $0455			lda 	VARType 					; get var type, and shift bit 1 into carry
.2560	6a		ror a				ror 	a
.2561	6a		ror a				ror 	a
.2562	68		pla				pla 								; restore LSB
.2563	90 08		bcc $256d			bcc 	_VCSNotArray 				; skip if not an array
.2565	20 cd 23	jsr $23cd			jsr 	VARArrayLookup 				; look for subscripts.
.2568	48		pha				pha 								; check )
.2569	20 95 22	jsr $2295			jsr 	ERRCheckRParen
.256c	68		pla				pla
.256d					_VCSNotArray:
.256d	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.256f	85 0c		sta $0c				sta 	IFR0+IM0
.2571	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.2573	ad 55 04	lda $0455			lda 	VARType 					; number/string bit into carry
.2576	6a		ror a				ror 	a
.2577	a9 00		lda #$00			lda 	#0
.2579	6a		ror a				ror 	a 							; now $00 or $80
.257a	85 0f		sta $0f				sta 	IFR0+IExp
.257c	38		sec				sec 								; it's a reference
.257d	60		rts				rts
.257e					_VCNoCreate:
.257e	4c 3c 22	jmp $223c		jmp	ErrorV_uninitialised
.0498					FastVariables:
>0498							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.2581					IFInitialise:
.2581	9c 08 05	stz $0508			stz 	IFStackIndex
.2584	60		rts				rts
.2585					IFloatSubtract:
.2585	da		phx				phx
.2586	a2 0c		ldx #$0c			ldx 	#IFR0
.2588	20 a1 2b	jsr $2ba1			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.258b	fa		plx				plx
.258c					IFloatAdd:
.258c	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.258e	05 0f		ora $0f				ora 	IFR0+IExp
.2590	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2592	d0 4e		bne $25e2			bne 	_IFloatAddDecimals 			; decimal version.
.2594					_IFAddSubMantissa:
.2594	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2596	45 0f		eor $0f				eor 	IFR0+IExp
.2598	29 40		and #$40			and 	#IFSign
.259a	d0 21		bne $25bd			bne 	_IFloatSubMantissa
.259c	18		clc				clc 								; do the actual addition
.259d	a5 0c		lda $0c			lda 	IFR0+IM0
.259f	75 00		adc $00,x		adc 		IM0,x
.25a1	85 0c		sta $0c			sta 	IFR0+IM0
.25a3	a5 0d		lda $0d			lda 	IFR0+IM1
.25a5	75 01		adc $01,x		adc 		IM1,x
.25a7	85 0d		sta $0d			sta 	IFR0+IM1
.25a9	a5 0e		lda $0e			lda 	IFR0+IM2
.25ab	75 02		adc $02,x		adc 		IM2,x
.25ad	85 0e		sta $0e			sta 	IFR0+IM2
.25af	10 29		bpl $25da			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.25b1	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.25b3	20 c5 2b	jsr $2bc5			jsr 	IFloatShiftRight
.25b6	20 ef 2b	jsr $2bef			jsr 	IFloatIncExponent
.25b9	d0 1f		bne $25da			bne 	_IFloatAddExit
.25bb	38		sec				sec 								; overflowed numerically.
.25bc	60		rts				rts
.25bd					_IFloatSubMantissa:
.25bd	38		sec				sec 								; do the subtraction R0-Rx
.25be	a5 0c		lda $0c			lda 	IFR0+IM0
.25c0	f5 00		sbc $00,x		sbc 		IM0,x
.25c2	85 0c		sta $0c			sta 	IFR0+IM0
.25c4	a5 0d		lda $0d			lda 	IFR0+IM1
.25c6	f5 01		sbc $01,x		sbc 		IM1,x
.25c8	85 0d		sta $0d			sta 	IFR0+IM1
.25ca	a5 0e		lda $0e			lda 	IFR0+IM2
.25cc	f5 02		sbc $02,x		sbc 		IM2,x
.25ce	85 0e		sta $0e			sta 	IFR0+IM2
.25d0	b0 08		bcs $25da			bcs 	_IFloatAddExit 				; no borrow so we are done.
.25d2	a2 0c		ldx #$0c			ldx 	#IFR0
.25d4	20 a9 2b	jsr $2ba9			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.25d7	20 a1 2b	jsr $2ba1			jsr 	IFloatNegate 				; negate
.25da					_IFloatAddExit:
.25da	18		clc				clc
.25db	60		rts				rts
.25dc					_IFloatZeroAdd:
.25dc	fa		plx				plx 								; return this value in R0
.25dd	20 27 2b	jsr $2b27			jsr 	IFloatCopyFromRegister
.25e0	18		clc				clc
.25e1	60		rts				rts
.25e2					_IFloatAddDecimals:
.25e2	20 8f 2b	jsr $2b8f			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.25e5	f0 f3		beq $25da			beq 	_IFloatAddExit
.25e7	20 cd 2b	jsr $2bcd			jsr 	IFloatNormalise 			; normalise RX
.25ea	da		phx				phx 								; normalise R0
.25eb	a2 0c		ldx #$0c			ldx 	#IFR0
.25ed	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero
.25f0	f0 ea		beq $25dc			beq 	_IFloatZeroAdd
.25f2	20 cd 2b	jsr $2bcd			jsr 	IFloatNormalise
.25f5	fa		plx				plx
.25f6	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.25f8	29 3f		and #$3f			and 	#IFXMask
.25fa	38		sec				sec
.25fb	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.25fd	85 0a		sta $0a				sta 	iTemp0
.25ff	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2601	29 3f		and #$3f			and 	#IFXMask
.2603	38		sec				sec
.2604	e9 20		sbc #$20			sbc 	#$20
.2606	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.2608	b0 02		bcs $260c			bcs 	_IFloatHaveLarger
.260a	a5 0a		lda $0a				lda 	iTemp0
.260c					_IFloatHaveLarger:
.260c	18		clc				clc 								; get the actual one back.
.260d	69 20		adc #$20			adc 	#$20 						; shift both to that.
.260f	20 1c 26	jsr $261c			jsr 	_IFShiftXToA
.2612	da		phx				phx
.2613	a2 0c		ldx #$0c			ldx 	#IFR0
.2615	20 1c 26	jsr $261c			jsr 	_IFShiftXToA
.2618	fa		plx				plx
.2619	4c 94 25	jmp $2594			jmp 	_IFAddSubMantissa 			; do the adding bit.
.261c					_IFShiftXToA:
.261c	8d 00 05	sta $0500			sta 	IFTarget
.261f	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero 			; check adding zero ?
.2622	f0 11		beq $2635			beq 	_IFSXExit
.2624					_IFSXLoop:
.2624	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2626	29 3f		and #$3f			and 	#IFXMask
.2628	cd 00 05	cmp $0500			cmp 	IFTarget
.262b	f0 08		beq $2635			beq 	_IFSXExit
.262d	20 c5 2b	jsr $2bc5			jsr 	IFloatShiftRight
.2630	20 ef 2b	jsr $2bef			jsr 	IFloatIncExponent
.2633	80 ef		bra $2624			bra 	_IFSXLoop
.2635					_IFSXExit:
.2635	60		rts				rts
.0500					IFTarget:
>0500							.fill 	1
.2636					IFloatMultiply:
.2636	8e 00 05	stx $0500			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2639	20 f1 26	jsr $26f1			jsr 	IFCalculateNewSign
.263c	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.263e	05 0f		ora $0f				ora 	IFR0+IExp
.2640	29 3f		and #$3f			and 	#IFXMask
.2642	15 01		ora $01,x			ora 	IM1,x
.2644	05 0d		ora $0d				ora 	IFR0+IM1
.2646	15 02		ora $02,x			ora 	IM2,x
.2648	05 0e		ora $0e				ora 	IFR0+IM2
.264a	d0 0a		bne $2656			bne 	_IFMStandard
.264c	20 72 2b	jsr $2b72			jsr 	IFloatMultiply8BitRx
.264f	ad 02 05	lda $0502			lda 	IFNewSign
.2652	85 0f		sta $0f				sta 	IFR0+IExp
.2654	18		clc				clc
.2655	60		rts				rts
.2656					_IFMStandard:
.2656	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2658	20 e8 26	jsr $26e8			jsr 	IFMSignExtend
.265b	8d 01 05	sta $0501			sta 	IFNewExponent
.265e	a5 0f		lda $0f				lda 	IFR0+IExp
.2660	20 e8 26	jsr $26e8			jsr 	IFMSignExtend
.2663	18		clc				clc
.2664	6d 01 05	adc $0501			adc 	IFNewExponent
.2667	8d 01 05	sta $0501			sta 	IFNewExponent
.266a	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.266c	20 38 2b	jsr $2b38			jsr 	IFloatCopyToRegister
.266f	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.2671	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.2674					_IFMLoop:
.2674	a2 18		ldx #$18			ldx 	#IFRTemp
.2676	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero
.2679	f0 3a		beq $26b5			beq 	_IFMExit
.267b	ae 00 05	ldx $0500			ldx 	IFTarget 					; look at adder MSB
.267e	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2680	10 03		bpl $2685			bpl	 	_IFMTargetOkay
.2682	20 d9 26	jsr $26d9			jsr 	_IFMShiftAll
.2685					_IFMTargetOkay:
.2685	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2687	29 01		and #$01			and 	#1
.2689	f0 16		beq $26a1			beq 	_IFMNoAdd
.268b	ae 00 05	ldx $0500			ldx 	IFTarget 					; add adder
.268e	18		clc				clc
.268f	a5 0c		lda $0c			lda 	IFR0+IM0
.2691	75 00		adc $00,x		adc 		IM0,x
.2693	85 0c		sta $0c			sta 	IFR0+IM0
.2695	a5 0d		lda $0d			lda 	IFR0+IM1
.2697	75 01		adc $01,x		adc 		IM1,x
.2699	85 0d		sta $0d			sta 	IFR0+IM1
.269b	a5 0e		lda $0e			lda 	IFR0+IM2
.269d	75 02		adc $02,x		adc 		IM2,x
.269f	85 0e		sta $0e			sta 	IFR0+IM2
.26a1					_IFMNoAdd:
.26a1	a5 0e		lda $0e				lda 	IFR0+IM2
.26a3	10 03		bpl $26a8			bpl 	_IFMResultOkay
.26a5	20 d9 26	jsr $26d9			jsr 	_IFMShiftAll
.26a8					_IFMResultOkay:
.26a8	a2 18		ldx #$18			ldx 	#IFRTemp
.26aa	20 c5 2b	jsr $2bc5			jsr 	IFloatShiftRight
.26ad	ae 00 05	ldx $0500			ldx 	IFTarget
.26b0	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.26b3	80 bf		bra $2674			bra 	_IFMLoop
.26b5					_IFMExit:
.26b5	ad 01 05	lda $0501			lda 	IFNewExponent 				; validate new exponent.
.26b8	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.26ba	90 0f		bcc $26cb			bcc 	_IFMOkay
.26bc	c9 e0		cmp #$e0			cmp 	#$E0
.26be	b0 0b		bcs $26cb			bcs 	_IFMOkay
.26c0	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.26c2	f0 13		beq $26d7			beq 	_IFMError
.26c4	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.26c6	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.26c9	18		clc				clc
.26ca	60		rts				rts
.26cb					_IFMOkay:
.26cb	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.26cd	0d 02 05	ora $0502			ora 	IFNewSign
.26d0	85 0f		sta $0f				sta 	IFR0+IExp
.26d2	18		clc				clc
.26d3	60		rts				rts
.26d4	4c ff ff	jmp $ffff			jmp 	$FFFF
.26d7					_IFMError:
.26d7	38		sec				sec
.26d8	60		rts				rts
.26d9					_IFMShiftAll:
.26d9	a2 0c		ldx #$0c			ldx 	#IFR0
.26db	20 c5 2b	jsr $2bc5			jsr 	IFloatShiftRight
.26de	ae 00 05	ldx $0500			ldx 	IFTarget
.26e1	20 c5 2b	jsr $2bc5			jsr 	IFloatShiftRight
.26e4	ee 01 05	inc $0501			inc 	IFNewExponent
.26e7	60		rts				rts
.26e8					IFMSignExtend:
.26e8	29 3f		and #$3f			and 	#IFXMask
.26ea	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.26ec	90 02		bcc $26f0			bcc 	_IFMNoSXX
.26ee	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.26f0					_IFMNoSXX:
.26f0	60		rts				rts
.26f1					IFCalculateNewSign:
.26f1	b5 03		lda $03,x			lda 	IExp,x
.26f3	45 0f		eor $0f				eor 	IFR0+IExp
.26f5	29 40		and #$40			and 	#IFSign
.26f7	8d 02 05	sta $0502			sta 	IFNewSign
.26fa	60		rts				rts
.0501					IFNewExponent:
>0501							.fill 	1
.0502					IFNewSign:
>0502							.fill 	1
.26fb					IFloatDivideInteger:
.26fb	20 14 27	jsr $2714			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.26fe	b0 06		bcs $2706			bcs 	_IFDIExit
.2700	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.2702	20 27 2b	jsr $2b27			jsr 	IFloatCopyFromRegister
.2705	18		clc				clc
.2706					_IFDIExit:
.2706	60		rts				rts
.2707					IFloatModulusInteger:
.2707	20 14 27	jsr $2714			jsr 	IFloatDivideIntegerCommon
.270a	b0 07		bcs $2713			bcs 	_IFMIExit
.270c	ae 00 05	ldx $0500			ldx 	IFTarget
.270f	20 27 2b	jsr $2b27			jsr 	IFloatCopyFromRegister
.2712	18		clc				clc
.2713					_IFMIExit:
.2713	60		rts				rts
.2714					IFloatDivideIntegerCommon:
.2714	8e 00 05	stx $0500			stx 	IFTarget  					; this is s1, s0 = R0
.2717	20 f1 26	jsr $26f1			jsr 	IFCalculateNewSign 			; calculate sign of result
.271a	20 42 27	jsr $2742			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.271d	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.271f	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero
.2722	f0 1c		beq $2740			beq 	_IFDIDivZero
.2724	ae 00 05	ldx $0500			ldx 	IFTarget 					; zero Rx (S1)
.2727	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.272a	5a		phy				phy
.272b	a0 18		ldy #$18			ldy 	#24
.272d					_IFDILoop:
.272d	20 53 27	jsr $2753			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2730	20 5f 27	jsr $275f			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2733	88		dey				dey
.2734	d0 f7		bne $272d			bne 	_IFDILoop 					; do it 24 times
.2736	7a		ply				ply
.2737	ad 02 05	lda $0502			lda 	IFNewSign 					; set sign of result.
.273a	29 40		and #$40			and 	#IFSign
.273c	85 1b		sta $1b				sta 	IFRTemp+IExp
.273e	18		clc				clc 								; is okay.
.273f	60		rts				rts
.2740					_IFDIDivZero:
.2740	38		sec				sec
.2741	60		rts				rts
.2742					IFDCopyRXToRTemp:
.2742	b5 00		lda $00,x			lda 	IM0,x
.2744	85 18		sta $18				sta 	IFRTemp+IM0
.2746	b5 01		lda $01,x			lda 	IM1,x
.2748	85 19		sta $19				sta 	IFRTemp+IM1
.274a	b5 02		lda $02,x			lda 	IM2,x
.274c	85 1a		sta $1a				sta 	IFRTemp+IM2
.274e	b5 03		lda $03,x			lda 	IExp,x
.2750	85 1b		sta $1b				sta 	IFRTemp+IExp
.2752	60		rts				rts
.2753					IFDShiftSTempS1Left:
.2753	a2 18		ldx #$18			ldx 	#IFRTemp
.2755	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft
.2758	ae 00 05	ldx $0500			ldx 	IFTarget
.275b	20 be 2b	jsr $2bbe			jsr 	IFloatRotateLeft
.275e	60		rts				rts
.275f					IFDTrySubtract:
.275f	ae 00 05	ldx $0500			ldx 	IFTarget 					; s1 = Rx
.2762	38		sec				sec 								; subtract, saving the results on the stack.
.2763	b5 00		lda $00,x			lda 	IM0,x
.2765	e5 0c		sbc $0c				sbc 	IFR0+IM0
.2767	48		pha				pha
.2768	b5 01		lda $01,x			lda 	IM1,x
.276a	e5 0d		sbc $0d				sbc 	IFR0+IM1
.276c	48		pha				pha
.276d	b5 02		lda $02,x			lda 	IM2,x
.276f	e5 0e		sbc $0e				sbc 	IFR0+IM2
.2771	b0 03		bcs $2776			bcs 	_IFDCanSubtract
.2773	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2774	68		pla				pla
.2775	60		rts				rts
.2776					_IFDCanSubtract:
.2776	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2778	68		pla				pla
.2779	95 01		sta $01,x			sta 	IM1,x
.277b	68		pla				pla
.277c	95 00		sta $00,x			sta 	IM0,x
.277e	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.2780	d0 06		bne $2788			bne 	_IFDCSExit
.2782	e6 19		inc $19				inc 	IFRTemp+IM1
.2784	d0 02		bne $2788			bne 	_IFDCSExit
.2786	e6 1a		inc $1a				inc 	IFRTemp+IM2
.2788					_IFDCSExit:
.2788	60		rts				rts
.2789					IFloatBitwiseAnd:
.2789	5a		phy				phy
.278a	20 ce 27	jsr $27ce			jsr 	IFPreProcessBitwise 		; set up everything.
.278d	d0 0f		bne $279e			bne 	_IFBAExit
.278f					_IFBALoop:
.278f	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2792	35 00		and $00,x			and 	IM0,x
.2794	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2797	e8		inx				inx
.2798	c8		iny				iny
.2799	c0 03		cpy #$03			cpy 	#3
.279b	d0 f2		bne $278f			bne 	_IFBALoop
.279d	18		clc				clc
.279e					_IFBAExit:
.279e	7a		ply				ply
.279f	60		rts				rts
.27a0					IFloatBitwiseOr:
.27a0	5a		phy				phy
.27a1	20 ce 27	jsr $27ce			jsr 	IFPreProcessBitwise 		; set up everything.
.27a4	d0 0f		bne $27b5			bne 	_IFBAExit
.27a6					_IFBALoop:
.27a6	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.27a9	15 00		ora $00,x			ora 	IM0,x
.27ab	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.27ae	e8		inx				inx
.27af	c8		iny				iny
.27b0	c0 03		cpy #$03			cpy 	#3
.27b2	d0 f2		bne $27a6			bne 	_IFBALoop
.27b4	18		clc				clc
.27b5					_IFBAExit:
.27b5	7a		ply				ply
.27b6	60		rts				rts
.27b7					IFloatBitwiseXor:
.27b7	5a		phy				phy
.27b8	20 ce 27	jsr $27ce			jsr 	IFPreProcessBitwise 		; set up everything.
.27bb	d0 0f		bne $27cc			bne 	_IFBAExit
.27bd					_IFBALoop:
.27bd	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.27c0	55 00		eor $00,x			eor 	IM0,x
.27c2	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.27c5	e8		inx				inx
.27c6	c8		iny				iny
.27c7	c0 03		cpy #$03			cpy 	#3
.27c9	d0 f2		bne $27bd			bne 	_IFBALoop
.27cb	18		clc				clc
.27cc					_IFBAExit:
.27cc	7a		ply				ply
.27cd	60		rts				rts
.27ce					IFPreProcessBitwise:
.27ce	a0 00		ldy #$00			ldy 	#0 							; set index.
.27d0	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.27d2	15 03		ora $03,x			ora 	IExp,x
.27d4	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.27d6	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.27d8	38		sec				sec 								; carry set just in cases.
.27d9	60		rts				rts
.27da					IFloatAbsoluteR0:
.27da	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.27dc	29 bf		and #$bf			and 	#IFSign ^ 255
.27de	85 0f		sta $0f				sta 	IFR0+IExp
.27e0	18		clc				clc
.27e1	60		rts				rts
.27e2					IFloatSquareRootR0:
.27e2	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.27e4	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero
.27e7	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.27e9	29 40		and #$40			and 	#IFSign
.27eb	d0 2f		bne $281c			bne 	_IFSRFail
.27ed	20 cd 2b	jsr $2bcd			jsr 	IFloatNormalise 			; it will work better !
.27f0	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.27f2	20 38 2b	jsr $2b38			jsr 	IFloatCopyToRegister
.27f5	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.27f7	20 e8 26	jsr $26e8			jsr 	IFMSignExtend 				; sign extended version of the exponent
.27fa	18		clc				clc
.27fb	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.27fd	85 0f		sta $0f				sta 	IFR0+IExp
.27ff	4a		lsr a				lsr 	a 							; which we can halve.
.2800	38		sec				sec 								; convert back
.2801	e9 17		sbc #$17			sbc 	#23
.2803	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2805	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.2807	20 1e 28	jsr $281e			jsr 	_IFSRNewton
.280a	20 1e 28	jsr $281e			jsr 	_IFSRNewton
.280d	20 1e 28	jsr $281e			jsr 	_IFSRNewton
.2810	20 1e 28	jsr $281e			jsr 	_IFSRNewton
.2813	18		clc				clc
.2814	60		rts				rts
.2815					_IFSRZero:
.2815	a2 0c		ldx #$0c			ldx 	#IFR0
.2817	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.281a	18		clc				clc
.281b	60		rts				rts
.281c					_IFSRFail:
.281c	38		sec				sec
.281d	60		rts				rts
.281e					_IFSRNewton:
.281e	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.2820	20 e5 2a	jsr $2ae5			jsr 	IFloatPushRx
.2823	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2825	20 e5 2a	jsr $2ae5			jsr 	IFloatPushRx
.2828	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.282a	20 b9 28	jsr $28b9			jsr 	IFloatDivideFloat
.282d	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.282f	20 06 2b	jsr $2b06			jsr 	IFloatPullRx
.2832	20 8c 25	jsr $258c			jsr 	IFloatAdd 					; now guess + original/guess
.2835	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.2837	20 c5 2b	jsr $2bc5			jsr 	IFloatShiftRight
.283a	a2 10		ldx #$10			ldx 	#IFR1
.283c	20 06 2b	jsr $2b06			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.283f	60		rts				rts
.2840					IFloatFractionalR0:
.2840	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2842	29 3f		and #$3f			and 	#IFXMask
.2844	f0 17		beq $285d			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2846	20 da 27	jsr $27da			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2849	a2 0c		ldx #$0c			ldx 	#IFR0
.284b	20 cd 2b	jsr $2bcd			jsr 	IFloatNormalise 			; normalise R0
.284e	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.2850	20 38 2b	jsr $2b38			jsr 	IFloatCopyToRegister
.2853	20 96 28	jsr $2896			jsr 	IFloatIntegerR0 			; take integer part of R0
.2856	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.2858	20 85 25	jsr $2585			jsr 	IFloatSubtract
.285b	80 05		bra $2862			bra 	_FIPExit
.285d					_FIPZero:
.285d	a2 0c		ldx #$0c			ldx 	#IFR0
.285f	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.2862					_FIPExit:
.2862	18		clc				clc
.2863	60		rts				rts
.2864					IFloatCompare:
.2864	20 85 25	jsr $2585			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2867	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2869	05 0f		ora $0f				ora 	IFR0+IExp
.286b	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.286d	29 3f		and #$3f			and 	#IFXMask
.286f	d0 19		bne $288a			bne 	_IFCNonInteger
.2871	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero 			; check if zero
.2874	f0 0f		beq $2885			beq 	_IFCZero
.2876					_IFCReturnSign:
.2876	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2878	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.287a	48		pha				pha
.287b	a9 01		lda #$01			lda 	#1
.287d	20 98 2b	jsr $2b98			jsr 	IFloatSetByte 				; return to +1
.2880	68		pla				pla 								; sign bit back
.2881	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.2883	18		clc				clc
.2884	60		rts				rts
.2885					_IFCZero:
.2885	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.2888	18		clc				clc
.2889	60		rts				rts
.288a					_IFCNonInteger:
.288a	a5 0c		lda $0c				lda 	IFR0+IM0
.288c	29 00		and #$00			and		#$00
.288e	05 0d		ora $0d				ora 	IFR0+IM1
.2890	05 0e		ora $0e				ora 	IFR0+IM2
.2892	f0 f1		beq $2885			beq 	_IFCZero 					; near enough !
.2894	80 e0		bra $2876			bra 	_IFCReturnSign 				; return the sign of the difference.
.2896					IFloatIntegerR0:
.2896	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2898	29 3f		and #$3f			and 	#IFXMask
.289a	f0 1b		beq $28b7			beq 	_FIPExit 					; if so do nothing
.289c	a2 0c		ldx #$0c			ldx 	#IFR0
.289e	20 cd 2b	jsr $2bcd			jsr 	IFloatNormalise 			; normalise
.28a1	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero 			; is it zero ?
.28a4	f0 0e		beq $28b4			beq 	_FIPZero 					; if so return zero.
.28a6					_FIPShift:
.28a6	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.28a8	29 20		and #$20			and 	#$20 						; still -ve
.28aa	f0 0b		beq $28b7			beq 	_FIPExit
.28ac	20 c5 2b	jsr $2bc5			jsr 	IFloatShiftRight 			; shift mantissa right
.28af	20 ef 2b	jsr $2bef			jsr 	IFloatIncExponent 			; bump exponent
.28b2	80 f2		bra $28a6			bra 	_FIPShift
.28b4					_FIPZero:
.28b4	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.28b7					_FIPExit:
.28b7	18		clc				clc
.28b8	60		rts				rts
.28b9					IFloatDivideFloat:
.28b9	8e 00 05	stx $0500			stx 	IFTarget  					; this is s1, s0 = R0
.28bc	20 f1 26	jsr $26f1			jsr 	IFCalculateNewSign 			; calculate sign of result
.28bf	20 cd 2b	jsr $2bcd			jsr 	IFloatNormalise 			; normalise RX
.28c2	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.28c4	20 cd 2b	jsr $2bcd			jsr 	IFloatNormalise
.28c7	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero
.28ca	f0 56		beq $2922			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.28cc	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.28ce	20 e8 26	jsr $26e8			jsr 	IFMSignExtend
.28d1	8d 01 05	sta $0501			sta 	IFNewExponent
.28d4	ae 00 05	ldx $0500			ldx 	IFTarget 					; calculate s1.exponent
.28d7	b5 03		lda $03,x			lda 	IExp,x
.28d9	20 e8 26	jsr $26e8			jsr 	IFMSignExtend
.28dc	38		sec				sec
.28dd	ed 01 05	sbc $0501			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.28e0	38		sec				sec
.28e1	e9 17		sbc #$17			sbc 	#23
.28e3	8d 01 05	sta $0501			sta 	IFNewExponent
.28e6	20 24 29	jsr $2924			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.28e9	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.28eb	10 08		bpl $28f5			bpl 	_IFDFNoShiftResult
.28ed	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.28ef	20 c5 2b	jsr $2bc5			jsr 	IFloatShiftRight
.28f2	ee 01 05	inc $0501			inc 	IFNewExponent
.28f5					_IFDFNoShiftResult:
.28f5	ad 01 05	lda $0501			lda 	IFNewExponent 				; underflow/overflow check.
.28f8	30 06		bmi $2900			bmi 	_IFDFCheckUnderflow
.28fa	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.28fc	b0 24		bcs $2922			bcs 	_IFDFDivZero
.28fe	80 11		bra $2911			bra		_IFDFExit
.2900					_IFDFCheckUnderflow:
.2900	ad 01 05	lda $0501			lda 	IFNewExponent 				; shift into a legal exponent.
.2903	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2905	b0 0a		bcs $2911			bcs 	_IFDFExit
.2907	ee 01 05	inc $0501			inc 	IFNewExponent
.290a	a2 18		ldx #$18			ldx 	#IFRTemp
.290c	20 c5 2b	jsr $2bc5			jsr 	IFloatShiftRight
.290f	80 ef		bra $2900			bra 	_IFDFCheckUnderflow
.2911					_IFDFExit:
.2911	ad 01 05	lda $0501			lda 	IFNewExponent 				; combine exponent and sign.
.2914	29 3f		and #$3f			and 	#IFXMask
.2916	0d 02 05	ora $0502			ora 	IFNewSign
.2919	85 1b		sta $1b				sta 	IFRTemp+IExp
.291b	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.291d	20 27 2b	jsr $2b27			jsr 	IFloatCopyFromRegister
.2920	18		clc				clc
.2921	60		rts				rts
.2922					_IFDFDivZero:
.2922	38		sec				sec
.2923	60		rts				rts
.2924					IFloatDivideSupport:
.2924	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.2926	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.2929	5a		phy				phy 								; main division loop x 23
.292a	a0 17		ldy #$17			ldy 	#23
.292c					_IFDSLoop:
.292c	20 5f 27	jsr $275f			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.292f	20 53 27	jsr $2753			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2932	88		dey				dey
.2933	d0 f7		bne $292c			bne 	_IFDSLoop 					; do it 24 times
.2935	7a		ply				ply
.2936	60		rts				rts
.2937					IFloatIntegerToStringR0:
.2937	8d 03 05	sta $0503			sta 	IFBase 						; save base to use.
.293a	20 17 2c	jsr $2c17			jsr 	IFloatBufferReset			; empty buffer
.293d	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.293f	29 3f		and #$3f			and 	#IFXMask
.2941	d0 1e		bne $2961			bne 	_IFIFail
.2943	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.2945	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero
.2948	f0 0e		beq $2958			beq 	_IFINotNegative
.294a	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.294c	29 40		and #$40			and 	#IFSign
.294e	f0 08		beq $2958			beq 	_IFINotNegative
.2950	a9 2d		lda #$2d			lda 	#"-"						; output -
.2952	20 26 2c	jsr $2c26			jsr 	IFloatBufferWrite
.2955	20 a1 2b	jsr $2ba1			jsr 	IFloatNegate 				; tidy up !
.2958					_IFINotNegative:
.2958	20 63 29	jsr $2963			jsr 	_IFIRecursiveConvert 		; start converting
.295b	20 1e 2c	jsr $2c1e			jsr 	IFloatGetBufferAddress
.295e	18		clc				clc
.295f	80 01		bra $2962			bra 	_IFIExit
.2961					_IFIFail:
.2961	38		sec				sec
.2962					_IFIExit:
.2962	60		rts				rts
.2963					_IFIRecursiveConvert:
.2963	a2 10		ldx #$10			ldx 	#IFR1
.2965	20 38 2b	jsr $2b38			jsr 	IFloatCopyToRegister 		; R0->R1
.2968	a2 0c		ldx #$0c			ldx 	#IFR0
.296a	ad 03 05	lda $0503			lda 	IFBase 						; Base -> R0
.296d	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.2970	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.2972	20 fb 26	jsr $26fb			jsr 	IFloatDivideInteger
.2975	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.2977	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero
.297a	f0 09		beq $2985			beq 	_IFIOutDigit
.297c	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.297e	48		pha				pha
.297f	20 63 29	jsr $2963			jsr 	_IFIRecursiveConvert 		; convert the divider
.2982	68		pla				pla
.2983	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.2985					_IFIOutDigit:
.2985	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.2987	c9 0a		cmp #$0a			cmp	 	#10
.2989	90 02		bcc $298d			bcc 	_IFINotHex
.298b	69 06		adc #$06			adc 	#6
.298d					_IFINotHex:
.298d	69 30		adc #$30			adc 	#48
.298f	20 26 2c	jsr $2c26			jsr 	IFloatBufferWrite
.2992	60		rts				rts
.0503					IFBase:
>0503							.fill 	1
.2993					IFloatFloatToStringR0:
.2993	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2995	20 e5 2a	jsr $2ae5			jsr 	IFloatPushRx
.2998	20 38 2b	jsr $2b38			jsr 	IFloatCopyToRegister
.299b	20 96 28	jsr $2896			jsr 	IFloatIntegerR0				; make R0 integer
.299e	a9 0a		lda #$0a			lda 	#10 						; base 10.
.29a0	20 37 29	jsr $2937			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.29a3	9c 04 05	stz $0504			stz 	IFloatDecimalCount 			; zero the decimal count.
.29a6	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.29a8	29 3f		and #$3f			and 	#IFXMask
.29aa	f0 44		beq $29f0			beq 	_IFFSExit
.29ac					_IFloatFracLoop:
.29ac	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.29ae	20 27 2b	jsr $2b27			jsr 	IFloatCopyFromRegister
.29b1	20 40 28	jsr $2840			jsr 	IFloatFractionalR0
.29b4	20 cd 2b	jsr $2bcd			jsr 	IFloatNormalise
.29b7	a2 14		ldx #$14			ldx 	#IFR2
.29b9	20 38 2b	jsr $2b38			jsr 	IFloatCopyToRegister 		; copy to R2
.29bc	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.29be	a9 0a		lda #$0a			lda 	#10
.29c0	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.29c3	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.29c5	20 36 26	jsr $2636			jsr 	IFloatMultiply
.29c8	a2 14		ldx #$14			ldx 	#IFR2
.29ca	20 38 2b	jsr $2b38			jsr 	IFloatCopyToRegister
.29cd	20 96 28	jsr $2896			jsr 	IFloatIntegerR0 			; get integer part of R0
.29d0	ad 04 05	lda $0504			lda 	IFloatDecimalCount 			; done 5 dp, no more
.29d3	c9 03		cmp #$03			cmp 	#3
.29d5	f0 16		beq $29ed			beq 	_IFFSExitStripZero
.29d7	ad 04 05	lda $0504			lda 	IFloatDecimalCount 			; written the DP yet ?
.29da	d0 05		bne $29e1			bne 	_IFloatNotFirst
.29dc	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.29de	20 26 2c	jsr $2c26			jsr 	IFloatBufferWrite
.29e1					_IFloatNotFirst:
.29e1	ee 04 05	inc $0504			inc 	IFloatDecimalCount
.29e4	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.29e6	09 30		ora #$30			ora 	#"0"						; ASCII
.29e8	20 26 2c	jsr $2c26			jsr 	IFloatBufferWrite 			; write to the buffer.
.29eb	80 bf		bra $29ac			bra 	_IFloatFracLoop
.29ed					_IFFSExitStripZero:
.29ed	20 35 2c	jsr $2c35			jsr 	IFloatStripTrailingZeros
.29f0					_IFFSExit:
.29f0	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.29f2	20 06 2b	jsr $2b06			jsr 	IFloatPullRx
.29f5	20 1e 2c	jsr $2c1e			jsr 	IFloatGetBufferAddress
.29f8	18		clc				clc
.29f9	60		rts				rts
.0504					IFloatDecimalCount:
>0504							.fill 	1
.29fa					IFloatStringToFloatR0:
.29fa	8d 05 05	sta $0505			sta 	IFCount 					; save it out.
.29fd	86 0a		stx $0a				stx 	iTemp0
.29ff	84 0b		sty $0b				sty 	iTemp0+1
.2a01	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.2a03	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.2a06	9c 06 05	stz $0506			stz 	IFSignFlag 					; clear the sign flag
.2a09	20 96 2a	jsr $2a96			jsr 	IFSTFGetNext 				; get first
.2a0c	f0 1b		beq $2a29			beq 	_IFSTFFail 					; no character
.2a0e	90 10		bcc $2a20			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2a10	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2a12	d0 15		bne $2a29			bne 	_IFSTFFail
.2a14	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2a16	8d 06 05	sta $0506			sta 	IFSignFlag
.2a19					_IFSTFLoop:
.2a19	20 96 2a	jsr $2a96			jsr 	IFSTFGetNext 				; get next
.2a1c	b0 0b		bcs $2a29			bcs 	_IFSTFFail 					; bad character.
.2a1e	f0 11		beq $2a31			beq 	_IFSTFExit 					; end of data
.2a20					_IFSTFHaveChar:
.2a20	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2a22	f0 08		beq $2a2c			beq 	_IFSTFDecimal
.2a24	20 ba 2a	jsr $2aba			jsr 	IFSTFAddR0 					; add number in
.2a27	80 f0		bra $2a19			bra 	_IFSTFLoop 					; keep going until . or end.
.2a29					_IFSTFFail:
.2a29	38		sec				sec
.2a2a	80 0d		bra $2a39			bra 	_IFSTFReturn
.2a2c					_IFSTFDecimal:
.2a2c	20 41 2a	jsr $2a41			jsr 	IFSTFDecimal 				; call the decimal places code.
.2a2f	b0 08		bcs $2a39			bcs 	_IFSTFReturn 				; error
.2a31					_IFSTFExit:
.2a31	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2a33	0d 06 05	ora $0506			ora 	IFSignFlag
.2a36	85 0f		sta $0f				sta 	IFR0+IExp
.2a38	18		clc				clc
.2a39					_IFSTFReturn:
.2a39	60		rts				rts
.2a3a					IFloatAddDecimalToR0:
.2a3a	8d 05 05	sta $0505			sta 	IFCount 					; save it out.
.2a3d	86 0a		stx $0a				stx 	iTemp0
.2a3f	84 0b		sty $0b				sty 	iTemp0+1
.2a41					IFSTFDecimal:
.2a41	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2a43	20 e5 2a	jsr $2ae5			jsr 	IFloatPushRx
.2a46	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2a48	20 96 2b	jsr $2b96			jsr 	IFloatSetZero
.2a4b	9c 07 05	stz $0507			stz 	IFDecimalPlaces
.2a4e					_IFSTDLoop:
.2a4e	20 96 2a	jsr $2a96			jsr 	IFSTFGetNext 				; get next
.2a51	b0 41		bcs $2a94			bcs 	_IFSTFFail2 				; bad character.
.2a53	f0 11		beq $2a66			beq 	_IFSTFComplete 				; end of data, work out the result.
.2a55	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2a57	f0 39		beq $2a92			beq 	_IFSTFExit2
.2a59	20 ba 2a	jsr $2aba			jsr 	IFSTFAddR0 					; add number in
.2a5c	ee 07 05	inc $0507			inc 	IFDecimalPlaces 			; count decimals
.2a5f	ad 07 05	lda $0507			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2a62	c9 03		cmp #$03			cmp 	#3
.2a64	90 e8		bcc $2a4e			bcc 	_IFSTDLoop
.2a66					_IFSTFComplete:
.2a66	ad 07 05	lda $0507			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2a69	f0 27		beq $2a92			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2a6b	3a		dec a				dec 	a 							; table indexed from 1.
.2a6c	0a		asl a				asl 	a
.2a6d	0a		asl a				asl 	a
.2a6e	aa		tax				tax
.2a6f	bd d1 2a	lda $2ad1,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2a72	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2a74	bd d2 2a	lda $2ad2,x			lda 	TableTen+1,x
.2a77	85 11		sta $11				sta  	IFR1+IM1
.2a79	bd d3 2a	lda $2ad3,x			lda 	TableTen+2,x
.2a7c	85 12		sta $12				sta  	IFR1+IM2
.2a7e	bd d4 2a	lda $2ad4,x			lda 	TableTen+3,x
.2a81	85 13		sta $13				sta  	IFR1+IExp
.2a83	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2a85	20 36 26	jsr $2636			jsr 	IFloatMultiply
.2a88	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.2a8a	20 06 2b	jsr $2b06			jsr 	IFloatPullRx
.2a8d	a2 10		ldx #$10			ldx 	#IFR1
.2a8f	20 8c 25	jsr $258c			jsr 	IFloatAdd
.2a92					_IFSTFExit2:
.2a92	18		clc				clc
.2a93	60		rts				rts
.2a94					_IFSTFFail2:
.2a94	38		sec				sec
.2a95	60		rts				rts
.2a96					IFSTFGetNext:
.2a96	ad 05 05	lda $0505			lda 	IFCount  					; if count is zero, return with Z set.
.2a99	f0 19		beq $2ab4			beq 	_IFSTFReturnOk
.2a9b	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2a9d	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2a9f	d0 02		bne $2aa3			bne 	_IFSTFGNNoCarry
.2aa1	e6 0b		inc $0b				inc 	iTemp0+1
.2aa3					_IFSTFGNNoCarry:
.2aa3	ce 05 05	dec $0505			dec 	IFCount 					; dec count.
.2aa6	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2aa8	f0 08		beq $2ab2			beq 	_IFSTFGOkay
.2aaa	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2aac	90 08		bcc $2ab6			bcc 	_IFSTFGFail
.2aae	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2ab0	b0 04		bcs $2ab6			bcs 	_IFSTFGFail
.2ab2					_IFSTFGOkay:
.2ab2	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ab4					_IFSTFReturnOk:
.2ab4	18		clc				clc
.2ab5	60		rts				rts
.2ab6					_IFSTFGFail:
.2ab6	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ab8	38		sec				sec
.2ab9	60		rts				rts
.2aba					IFSTFAddR0:
.2aba	29 0f		and #$0f			and 	#15 						; to int value
.2abc	48		pha				pha 								; save it.
.2abd	a9 0a		lda #$0a			lda 	#10
.2abf	a2 10		ldx #$10			ldx 	#IFR1
.2ac1	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.2ac4	20 36 26	jsr $2636			jsr 	IFloatMultiply
.2ac7	68		pla				pla
.2ac8	a2 10		ldx #$10			ldx 	#IFR1
.2aca	20 98 2b	jsr $2b98			jsr 	IFloatSetByte
.2acd	20 8c 25	jsr $258c			jsr 	IFloatAdd
.2ad0	60		rts				rts
.0505					IFCount:
>0505							.fill 	1
.0506					IFSignFlag:
>0506							.fill 	1
.0507					IFDecimalPlaces:
>0507							.fill 	1
.2ad1					TableTen:
>2ad1	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2ad5	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2ad9	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2add	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2ae1	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2ae5					IFloatPushRx:
.2ae5	5a		phy				phy
.2ae6	ac 08 05	ldy $0508			ldy 	IFStackIndex
.2ae9	b5 00		lda $00,x			lda 	IM0,x
.2aeb	99 09 05	sta $0509,y			sta 	IFStack,y
.2aee	b5 01		lda $01,x			lda 	IM1,x
.2af0	99 0a 05	sta $050a,y			sta 	IFStack+1,y
.2af3	b5 02		lda $02,x			lda 	IM2,x
.2af5	99 0b 05	sta $050b,y			sta 	IFStack+2,y
.2af8	b5 03		lda $03,x			lda 	IExp,x
.2afa	99 0c 05	sta $050c,y			sta 	IFStack+3,y
.2afd	c8		iny				iny
.2afe	c8		iny				iny
.2aff	c8		iny				iny
.2b00	c8		iny				iny
.2b01	8c 08 05	sty $0508			sty 	IFStackIndex
.2b04	7a		ply				ply
.2b05	60		rts				rts
.2b06					IFloatPullRx:
.2b06	5a		phy				phy
.2b07	ac 08 05	ldy $0508			ldy 	IFStackIndex
.2b0a	88		dey				dey
.2b0b	88		dey				dey
.2b0c	88		dey				dey
.2b0d	88		dey				dey
.2b0e	b9 09 05	lda $0509,y			lda 	IFStack,y
.2b11	95 00		sta $00,x			sta 	IM0,x
.2b13	b9 0a 05	lda $050a,y			lda 	IFStack+1,y
.2b16	95 01		sta $01,x			sta 	IM1,x
.2b18	b9 0b 05	lda $050b,y			lda 	IFStack+2,y
.2b1b	95 02		sta $02,x			sta 	IM2,x
.2b1d	b9 0c 05	lda $050c,y			lda 	IFStack+3,y
.2b20	95 03		sta $03,x			sta 	IExp,x
.2b22	8c 08 05	sty $0508			sty 	IFStackIndex
.2b25	7a		ply				ply
.2b26	60		rts				rts
.0508					IFStackIndex:
>0508							.fill 	1
.0509					IFStack:
>0509							.fill 	16*4
.2b27					IFloatCopyFromRegister:
.2b27	b5 00		lda $00,x			lda 	0,x
.2b29	85 0c		sta $0c				sta 	IFR0
.2b2b	b5 01		lda $01,x			lda 	1,x
.2b2d	85 0d		sta $0d				sta 	IFR0+1
.2b2f	b5 02		lda $02,x			lda 	2,x
.2b31	85 0e		sta $0e				sta 	IFR0+2
.2b33	b5 03		lda $03,x			lda 	3,x
.2b35	85 0f		sta $0f				sta 	IFR0+3
.2b37	60		rts				rts
.2b38					IFloatCopyToRegister:
.2b38	a5 0c		lda $0c				lda 	IFR0
.2b3a	95 00		sta $00,x			sta 	0,x
.2b3c	a5 0d		lda $0d				lda 	IFR0+1
.2b3e	95 01		sta $01,x			sta 	1,x
.2b40	a5 0e		lda $0e				lda 	IFR0+2
.2b42	95 02		sta $02,x			sta 	2,x
.2b44	a5 0f		lda $0f				lda 	IFR0+3
.2b46	95 03		sta $03,x			sta 	3,x
.2b48	60		rts				rts
.2b49					IFloatLoadInline:
.2b49	68		pla				pla 								; pop address off to iTemp0
.2b4a	85 0a		sta $0a				sta 	iTemp0
.2b4c	68		pla				pla
.2b4d	85 0b		sta $0b				sta 	iTemp0+1
.2b4f	a0 01		ldy #$01			ldy 	#1
.2b51	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2b53	95 00		sta $00,x			sta 	0,x
.2b55	c8		iny				iny
.2b56	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.2b58	95 01		sta $01,x			sta 	1,x
.2b5a	c8		iny				iny
.2b5b	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2b5d	95 02		sta $02,x			sta 	2,x
.2b5f	c8		iny				iny
.2b60	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2b62	95 03		sta $03,x			sta 	3,x
.2b64	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2b65	a5 0a		lda $0a				lda 	iTemp0
.2b67	69 05		adc #$05			adc 	#5
.2b69	85 0a		sta $0a				sta 	iTemp0
.2b6b	90 02		bcc $2b6f			bcc 	_IFLINoCarry
.2b6d	e6 0b		inc $0b				inc 	iTemp0+1
.2b6f					_IFLINoCarry:
.2b6f	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2b72					IFloatMultiply8BitRx:
.2b72	5a		phy		        phy
.2b73	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2b75	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2b77	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2b78	85 0c		sta $0c		        sta     IFR0+IM0
.2b7a	84 0d		sty $0d		        sty     IFR0+IM1
.2b7c	a9 00		lda #$00	        lda     #0
.2b7e	a0 08		ldy #$08	        ldy     #8
.2b80					_IFMLoop:
.2b80	90 03		bcc $2b85	        bcc     _IFMNoAdd
.2b82	18		clc		        clc
.2b83	65 0d		adc $0d		        adc     IFR0+IM1
.2b85					_IFMNoAdd:
.2b85	6a		ror a		        ror     a
.2b86	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2b88	88		dey		        dey
.2b89	d0 f5		bne $2b80	        bne     _IFMLoop
.2b8b	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2b8d	7a		ply		        ply
.2b8e	60		rts		        rts
.2b8f					IFloatCheckZero:
.2b8f	b5 00		lda $00,x			lda 	IM0,x
.2b91	15 01		ora $01,x			ora 	IM1,x
.2b93	15 02		ora $02,x			ora 	IM2,x
.2b95	60		rts				rts
.2b96					IFloatSetZero:
.2b96	a9 00		lda #$00			lda 	#0
.2b98					IFloatSetByte:
.2b98	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2b9a	74 01		stz $01,x			stz 	IM1,x
.2b9c	74 02		stz $02,x			stz 	IM2,x
.2b9e	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2ba0	60		rts				rts
.2ba1					IFloatNegate:
.2ba1	b5 03		lda $03,x			lda 	IExp,x
.2ba3	49 40		eor #$40			eor 	#IFSign
.2ba5	95 03		sta $03,x			sta 	IExp,x
.2ba7	18		clc				clc
.2ba8	60		rts				rts
.2ba9					IFloatMantissaNegate:
.2ba9	38		sec				sec
.2baa	a9 00		lda #$00			lda 	#0
.2bac	f5 00		sbc $00,x			sbc 	IM0,x
.2bae	95 00		sta $00,x			sta 	IM0,x
.2bb0	a9 00		lda #$00			lda 	#0
.2bb2	f5 01		sbc $01,x			sbc 	IM1,x
.2bb4	95 01		sta $01,x			sta 	IM1,x
.2bb6	a9 00		lda #$00			lda 	#0
.2bb8	f5 02		sbc $02,x			sbc 	IM2,x
.2bba	95 02		sta $02,x			sta 	IM2,x
.2bbc	60		rts				rts
.2bbd					IFloatShiftLeft:
.2bbd	18		clc				clc
.2bbe					IFloatRotateLeft:
.2bbe	36 00		rol $00,x			rol 	IM0,x
.2bc0	36 01		rol $01,x			rol 	IM1,x
.2bc2	36 02		rol $02,x			rol 	IM2,x
.2bc4	60		rts				rts
.2bc5					IFloatShiftRight:
.2bc5	18		clc				clc
.2bc6					IFloatRotateRight:
.2bc6	76 02		ror $02,x			ror 	IM2,x
.2bc8	76 01		ror $01,x			ror 	IM1,x
.2bca	76 00		ror $00,x			ror 	IM0,x
.2bcc	60		rts				rts
.2bcd					IFloatNormalise:
.2bcd	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero 			; is it zero
.2bd0	f0 18		beq $2bea			beq 	_IFNExitZero 				; if so exit
.2bd2					_IFNLoop:
.2bd2	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2bd4	29 c0		and #$c0			and 	#$C0
.2bd6	c9 40		cmp #$40			cmp 	#$40
.2bd8	f0 13		beq $2bed			beq 	_IFNExitOkay 				; if so , then we are done.
.2bda	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2bdc	29 3f		and #$3f			and 	#$3F
.2bde	c9 20		cmp #$20			cmp 	#$20
.2be0	f0 0b		beq $2bed			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2be2	20 03 2c	jsr $2c03			jsr 	IFloatDecExponent
.2be5	20 bd 2b	jsr $2bbd			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2be8	80 e8		bra $2bd2			bra 	_IFNLoop
.2bea					_IFNExitZero:
.2bea	20 96 2b	jsr $2b96			jsr 	IFloatSetZero 				; set the result to zero
.2bed					_IFNExitOkay:
.2bed	18		clc				clc  								; return with CC.
.2bee	60		rts				rts
.2bef					IFloatIncExponent:
.2bef	b5 03		lda $03,x			lda 	IExp,x
.2bf1	48		pha				pha
.2bf2	29 c0		and #$c0			and 	#$C0
.2bf4	8d 49 05	sta $0549			sta 	IFXTemp
.2bf7	68		pla				pla
.2bf8	1a		inc a				inc 	a
.2bf9	29 3f		and #$3f			and 	#$3F
.2bfb	48		pha				pha
.2bfc	0d 49 05	ora $0549			ora 	IFXTemp
.2bff	95 03		sta $03,x			sta 	IExp,x
.2c01	68		pla				pla
.2c02	60		rts				rts
.2c03					IFloatDecExponent:
.2c03	b5 03		lda $03,x			lda 	IExp,x
.2c05	48		pha				pha
.2c06	29 c0		and #$c0			and 	#$C0
.2c08	8d 49 05	sta $0549			sta 	IFXTemp
.2c0b	68		pla				pla
.2c0c	3a		dec a				dec 	a
.2c0d	29 3f		and #$3f			and 	#$3F
.2c0f	48		pha				pha
.2c10	0d 49 05	ora $0549			ora 	IFXTemp
.2c13	95 03		sta $03,x			sta 	IExp,x
.2c15	68		pla				pla
.2c16	60		rts				rts
.0549					IFXTemp:
>0549							.fill 	1
.2c17					IFloatBufferReset:
.2c17	9c 4a 05	stz $054a			stz 	IFBufferCount
.2c1a	9c 4b 05	stz $054b			stz 	IFBuffer
.2c1d	60		rts				rts
.2c1e					IFloatGetBufferAddress:
.2c1e	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.2c20	a2 4b		ldx #$4b			ldx 	#(IFBuffer & $FF)
.2c22	ad 4a 05	lda $054a			lda 	IFBufferCount
.2c25	60		rts				rts
.2c26					IFloatBufferWrite:
.2c26	da		phx				phx
.2c27	ae 4a 05	ldx $054a			ldx 	IFBufferCount
.2c2a	9d 4b 05	sta $054b,x			sta 	IFBuffer,x
.2c2d	9e 4c 05	stz $054c,x			stz 	IFBuffer+1,x
.2c30	ee 4a 05	inc $054a			inc 	IFBufferCount
.2c33	fa		plx				plx
.2c34	60		rts				rts
.2c35					IFloatStripTrailingZeros:
.2c35	ae 4a 05	ldx $054a			ldx 	IFBufferCount
.2c38	bd 4a 05	lda $054a,x			lda 	IFBuffer-1,x
.2c3b	c9 30		cmp #$30			cmp		#"0"
.2c3d	d0 0f		bne $2c4e			bne 	_IFSTExit
.2c3f	bd 49 05	lda $0549,x			lda 	IFBuffer-2,x
.2c42	c9 2e		cmp #$2e			cmp 	#"."
.2c44	f0 08		beq $2c4e			beq 	_IFSTExit
.2c46	ce 4a 05	dec $054a			dec 	IFBufferCount
.2c49	9e 4a 05	stz $054a,x			stz 	IFBuffer-1,x
.2c4c	80 e7		bra $2c35			bra 	IFloatStripTrailingZeros
.2c4e					_IFSTExit:
.2c4e	60		rts				rts
.054a					IFBufferCount:
>054a							.fill 	1
.054b					IFBuffer:
>054b							.fill 	25
.2c4f					IFloatCheck:
.2c4f	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2c51	09 40		ora #$40			ora 	#IFSign
.2c53	85 0f		sta $0f				sta 	IFR0+IExp
.2c55	20 8c 25	jsr $258c			jsr 	IFloatAdd 					; add allowed to error.
.2c58	a2 0c		ldx #$0c			ldx 	#IFR0
.2c5a	20 8f 2b	jsr $2b8f			jsr 	IFloatCheckZero 			; error if < 0
.2c5d	f0 06		beq $2c65			beq 	_IFAOkay
.2c5f	a5 0f		lda $0f				lda 	IFR0+IExp
.2c61	29 40		and #$40			and 	#IFSign
.2c63	d0 01		bne $2c66			bne 	_IFAFail
.2c65					_IFAOkay:
.2c65	60		rts				rts
.2c66					_IFAFail:
.2c66	38		sec				sec
.2c67	68		pla				pla 								; get address - 2
.2c68	e9 02		sbc #$02			sbc 	#2
.2c6a	aa		tax				tax
.2c6b	68		pla				pla
.2c6c	e9 00		sbc #$00			sbc 	#0
.2c6e	a8		tay				tay
.2c6f	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2c71					_IFAStop:
>2c71	db						.byte 	$DB 						; display an error AA ADR ADR
.2c72	80 fd		bra $2c71			bra 	_IFAStop

;******  Return to file: basic.asm

.2c74					NotImplemented:
.2c74	a9 ff		lda #$ff			lda 	#$FF
.2c76	80 04		bra $2c7c			bra 	EnterDbg
.2c78					ErrorHandler:
.2c78	fa		plx				plx
.2c79	7a		ply				ply
.2c7a	a9 ee		lda #$ee			lda 	#$EE
.2c7c					EnterDbg:
>2c7c	db						.byte 	$DB
.2c7d	4c 7c 2c	jmp $2c7c			jmp 	EnterDbg

;******  End of listing
