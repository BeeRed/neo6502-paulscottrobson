
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Fri Jun 30 07:33:15 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
=192					OSTextBufferSize = 192
.025d					OSEditWidth:
>025d							.fill 	1
.025e					OSEditLength:
>025e							.fill 	1
.025f					OSEditBuffer:
>025f							.fill 	OSTextBufferSize+1
>0320							.fill 	32
>0340							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSEnterLine              = $ffdf ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe2					OSScreenLine             = $ffe2 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe5					OSKeyboardDataProcess    = $ffe5 ; Keyboard update process.
=$ffe8					OSCheckBreak             = $ffe8 ; NZ if ESC pressed.
=$ffeb					OSIsKeyAvailable         = $ffeb ; Check if key available (CS if so)
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard, CC = success, CS = no key
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSWriteScreen            = $fff4 ; Write A to screen, CC = success
=$fff7					OSWriteString            = $fff7 ; Write length prefixed string YX to screen

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 89 20	jsr $2089			jsr 	PGMSetBaseAddress
.1007	20 18 2c	jsr $2c18			jsr 	IFInitialise 				; setup math library
.100a	4c 08 14	jmp $1408			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_STANDARD_LAST = $a3
=$a3					PR_RSQ = $a3
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; get a number to assert
.1010	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1012	20 24 32	jsr $3224			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail 					; if so, the assert fails.
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 2a 27	jmp $272a		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.101d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.101f	f0 14		beq $1035			beq 	_CLNoParam
.1021	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1023	f0 10		beq $1035			beq 	_CLNoParam
.1025	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; address for CLEAR
.1028	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102a	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102c	b0 0b		bcs $1039			bcs 	_CLMemory
.102e	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1030	90 07		bcc $1039			bcc 	_CLMemory
.1032	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1035					_CLNoParam:
.1035	20 3c 10	jsr $103c			jsr 	ClearCode
.1038	60		rts				rts
.1039					_CLMemory:
.1039	4c c4 27	jmp $27c4		jmp	ErrorV_memory
.103c					ClearCode:
.103c	20 9c 20	jsr $209c			jsr 	PGMEndProgram 				; end program => zTemp0
.103f	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1041	a5 23		lda $23				lda 	zTemp0+1 					; for variables.
.1043	1a		inc a				inc 	a
.1044	85 29		sta $29				sta 	freeMemory+1
.1046	20 b7 2b	jsr $2bb7			jsr 	VARClearHashTables
.1049	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.104c	20 f8 28	jsr $28f8			jsr 	StackReset 					; page passed on in A
.104f	20 57 29	jsr $2957			jsr 	StringSystemInitialise
.1052	20 3f 26	jsr $263f			jsr 	ScanProcedures
.1055	20 92 14	jsr $1492			jsr 	Command_RESTORE
.1058	60		rts				rts
.1059					AllocateMemory:
.1059	5a		phy				phy 								; save Y
.105a	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low (of final memory)
.105c	5a		phy				phy
.105d	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.105f	5a		phy				phy
.1060	a8		tay				tay 								; count is now in XY
.1061					_AllocateLoop:
.1061	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1063	d0 04		bne $1069			bne 	_AllocateOne
.1065	c0 00		cpy #$00			cpy 	#0
.1067	f0 15		beq $107e			beq 	_AllocateExit
.1069					_AllocateOne:
.1069	a9 00		lda #$00			lda 	#0 							; zero byte
.106b	92 28		sta ($28)			sta 	(freeMemory)
.106d	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.106f	d0 05		bne $1076			bne 	_AllocateSkipCarry
.1071	e6 29		inc $29				inc 	freeMemory+1
.1073	20 82 10	jsr $1082			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.1076					_AllocateSkipCarry:
.1076	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1078	d0 01		bne $107b			bne 	_AllocateSkipBorrow
.107a	ca		dex				dex
.107b					_AllocateSkipBorrow:
.107b	88		dey				dey
.107c	80 e3		bra $1061			bra 	_AllocateLoop
.107e					_AllocateExit:
.107e	fa		plx				plx 								; restore address
.107f	68		pla				pla
.1080	7a		ply				ply 								; restore Y
.1081	60		rts				rts
.1082					ClearCheckMemory:
.1082	a5 29		lda $29				lda 	freeMemory+1 				; allocatable memory
.1084	1a		inc a				inc 	a 							; spacing 2 pages
.1085	1a		inc a				inc 	a
.1086	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.1089	b0 01		bcs $108c			bcs  	_CCMError
.108b	60		rts				rts
.108c					_CCMError:
.108c	4c c4 27	jmp $27c4		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.108f					CommandDIM:
.108f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1091	29 c0		and #$c0			and 	#$C0
.1093	c9 40		cmp #$40			cmp 	#$40
.1095	d0 39		bne $10d0			bne 	_CDSyntax
.1097	20 6e 2b	jsr $2b6e			jsr 	VARGetInfo 					; get information
.109a	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.109d	29 02		and #$02			and 	#2
.109f	f0 2f		beq $10d0			beq 	_CDSyntax
.10a1	20 20 2b	jsr $2b20			jsr 	VARFind 					; does it already exist
.10a4	b0 2d		bcs $10d3			bcs 	_CDExists
.10a6	20 cc 2a	jsr $2acc			jsr 	VARCreate 					; create it - returns data ptr in XA
.10a9	da		phx				phx 								; save target address
.10aa	48		pha				pha
.10ab	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10ae	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b0	20 d6 10	jsr $10d6			jsr 	CreateArray 				; create array to XA
.10b3	84 24		sty $24				sty 	zTemp1 						; save Y
.10b5	7a		ply				ply 								; restore target to zTemp0
.10b6	84 22		sty $22				sty 	zTemp0
.10b8	7a		ply				ply
.10b9	84 23		sty $23				sty 	zTemp0+1
.10bb	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10bd	a0 01		ldy #$01			ldy 	#1
.10bf	8a		txa				txa
.10c0	91 22		sta ($22),y			sta 	(zTemp0),y
.10c2	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10c4	20 89 28	jsr $2889			jsr 	ERRCheckRParen 				; check )
.10c7	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10c9	c8		iny				iny
.10ca	c9 99		cmp #$99			cmp 	#PR_COMMA
.10cc	f0 c1		beq $108f			beq 	CommandDIM
.10ce	88		dey				dey
.10cf	60		rts				rts
.10d0					_CDSyntax:
.10d0	4c d4 26	jmp $26d4		jmp	ErrorV_syntax
.10d3					_CDExists:
.10d3	4c 9c 27	jmp $279c		jmp	ErrorV_redefine
.10d6					CreateArray:
.10d6	8d 03 05	sta $0503			sta 	CAType						; save type
.10d9	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10dc	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10de	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e0	f0 04		beq $10e6			beq 	_CATwoDimensions
.10e2	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e5	60		rts				rts
.10e6					_CATwoDimensions:
.10e6	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10e8	8d 05 05	sta $0505			sta 	CADim1+1
.10eb	a5 08		lda $08				lda 	IFR0+IM0
.10ed	8d 04 05	sta $0504			sta 	CADim1+0
.10f0	20 91 28	jsr $2891			jsr 	ERRCheckComma 				; check comma
.10f3	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f6	5a		phy				phy 								; save Y position
.10f7	18		clc				clc 								; allocate the outer array of pointers.
.10f8	ae 05 05	ldx $0505			ldx 	CADim1+1
.10fb	ad 04 05	lda $0504			lda 	CADim1
.10fe	20 71 11	jsr $1171			jsr 	CSAAllocate 				; allocate the outer array
.1101	da		phx				phx									; save this address on the stack
.1102	48		pha				pha
.1103	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.1105	85 26		sta $26				sta 	zTemp2
.1107					_CACreateSubLoop:
.1107	38		sec				sec
.1108	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create data array of required size.
.110b	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.110d	91 26		sta ($26),y			sta 	(zTemp2),y
.110f	8a		txa				txa
.1110	c8		iny				iny
.1111	91 26		sta ($26),y			sta 	(zTemp2),y
.1113	18		clc				clc  								; next slot.
.1114	a5 26		lda $26				lda 	zTemp2
.1116	69 02		adc #$02			adc 	#2
.1118	85 26		sta $26				sta 	zTemp2
.111a	90 02		bcc $111e			bcc 	_CACNoCarry
.111c	e6 27		inc $27				inc 	zTemp2+1
.111e					_CACNoCarry:
.111e	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1121	d0 03		bne $1126			bne 	_CACNoBorrow
.1123	ce 05 05	dec $0505			dec 	CADim1+1
.1126					_CACNoBorrow:
.1126	ce 04 05	dec $0504			dec 	CADim1
.1129	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.112c	10 d9		bpl $1107			bpl 	_CACreateSubLoop
.112e	68		pla				pla
.112f	fa		plx				plx
.1130	7a		ply				ply
.1131	60		rts				rts
.1132					CreateSingleArray:
.1132	5a		phy				phy
.1133	38		sec				sec 								; allocate memory block all zeros.
.1134	a5 08		lda $08				lda 	IFR0+IM0
.1136	a6 09		ldx $09				ldx 	IFR0+IM1
.1138	20 71 11	jsr $1171			jsr 	CSAAllocate
.113b	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.113e	f0 2f		beq $116f			beq 	_CSANoInit
.1140	da		phx				phx 								; save address of new array
.1141	48		pha				pha
.1142	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1144	86 23		stx $23				stx 	zTemp0+1
.1146	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1148	b1 22		lda ($22),y			lda 	(zTemp0),y
.114a	a8		tay				tay
.114b	b2 22		lda ($22)			lda 	(zTemp0)
.114d	aa		tax				tax
.114e					_CSAEraseString:
.114e	5a		phy				phy
.114f	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1151	a9 80		lda #$80			lda 	#$80
.1153	91 22		sta ($22),y			sta 	(zTemp0),y
.1155	7a		ply				ply
.1156	18		clc				clc 								; add 4 to next slot.
.1157	a5 22		lda $22				lda 	zTemp0
.1159	69 04		adc #$04			adc 	#4
.115b	85 22		sta $22				sta 	zTemp0
.115d	90 02		bcc $1161			bcc 	_CSAENoCarry
.115f	e6 23		inc $23				inc 	zTemp0+1
.1161					_CSAENoCarry:
.1161	e0 00		cpx #$00			cpx 	#0
.1163	d0 01		bne $1166			bne 	_CSANoBorrow
.1165	88		dey				dey
.1166					_CSANoBorrow:
.1166	ca		dex				dex
.1167	d0 e5		bne $114e			bne 	_CSAEraseString
.1169	c0 00		cpy #$00			cpy 	#0
.116b	d0 e1		bne $114e			bne 	_CSAEraseString
.116d	68		pla				pla
.116e	fa		plx				plx
.116f					_CSANoInit:
.116f	7a		ply				ply
.1170	60		rts				rts
.1171					CSAAllocate:
.1171	08		php				php 								; save type flag.
.1172	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1173	d0 01		bne $1176			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1175	e8		inx				inx
.1176					_CSAANoCarry:
.1176	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1178	b0 2e		bcs $11a8			bcs 	_CSARange
.117a	28		plp				plp 								; restore type flag
.117b	08		php				php 								; save it back again.
.117c	da		phx				phx 								; save size.
.117d	48		pha				pha
.117e	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1180	90 03		bcc $1185			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1182	0a		asl a				asl 	a
.1183	26 23		rol $23				rol 	zTemp0+1
.1185					_CSAATimes2:
.1185	0a		asl a				asl 	a
.1186	26 23		rol $23				rol 	zTemp0+1
.1188	18		clc				clc
.1189	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.118b	90 02		bcc $118f			bcc 	_CSAANoCarry2
.118d	e6 23		inc $23				inc 	zTemp0+1
.118f					_CSAANoCarry2:
.118f	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1191	20 59 10	jsr $1059			jsr 	AllocateMemory 				; allocate memory to XA
.1194	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1196	85 22		sta $22				sta 	zTemp0
.1198	68		pla				pla  								; write element count to first 2 bytes
.1199	92 22		sta ($22)			sta 	(zTemp0)
.119b	68		pla				pla 								; msb of element count
.119c	28		plp				plp 								; CC if pointer array
.119d	b0 02		bcs $11a1			bcs 	_CSAAIsData
.119f	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a1					_CSAAIsData:
.11a1	a0 01		ldy #$01			ldy 	#1
.11a3	91 22		sta ($22),y			sta 	(zTemp0),y
.11a5	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11a7	60		rts				rts
.11a8					_CSARange:
.11a8	4c e5 26	jmp $26e5		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11ab					Command_Doke:
.11ab	38		sec				sec
.11ac	80 01		bra $11af			bra 	DPCommon
.11ae					Command_Poke:
.11ae	18		clc				clc
.11af					DPCommon:
.11af	08		php				php 								; CS if DOKE
.11b0	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; address
.11b3	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b5	48		pha				pha
.11b6	a5 09		lda $09				lda 	IFR0+IM1
.11b8	48		pha				pha
.11b9	20 91 28	jsr $2891			jsr 	ERRCheckComma 				; [dp]oke address,data
.11bc	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16
.11bf	68		pla				pla 								; get address back
.11c0	85 23		sta $23				sta 	zTemp0+1
.11c2	68		pla				pla
.11c3	85 22		sta $22				sta 	zTemp0
.11c5	a5 08		lda $08				lda 	IFR0+IM0
.11c7	92 22		sta ($22)			sta 	(zTemp0)
.11c9	28		plp				plp
.11ca	90 08		bcc $11d4			bcc 	_DPExit
.11cc	5a		phy				phy
.11cd	a5 09		lda $09				lda 	IFR0+IM1
.11cf	a0 01		ldy #$01			ldy 	#1
.11d1	91 22		sta ($22),y			sta 	(zTemp0),y
.11d3	7a		ply				ply
.11d4					_DPExit:
.11d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11d5					Command_GOTO:
.11d5	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get line number
.11d8					GotoR0:
.11d8	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11db	85 19		sta $19				sta 	codePtr+1
.11dd	64 18		stz $18				stz 	codePtr
.11df					_GOSearch:
.11df	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e1	f0 1f		beq $1202			beq 	_GOError
.11e3	a0 01		ldy #$01			ldy 	#1 							; found line #
.11e5	b1 18		lda ($18),y			lda 	(codePtr),y
.11e7	c5 08		cmp $08				cmp 	IFR0+IM0
.11e9	d0 0a		bne $11f5			bne 	_GONext
.11eb	c8		iny				iny
.11ec	b1 18		lda ($18),y			lda 	(codePtr),y
.11ee	c5 09		cmp $09				cmp 	IFR0+IM1
.11f0	d0 03		bne $11f5			bne 	_GONext
.11f2	4c d7 14	jmp $14d7			jmp 	RUNNewLine
.11f5					_GONext:
.11f5	18		clc				clc 								; advance to next line.
.11f6	b2 18		lda ($18)			lda 	(codePtr)
.11f8	65 18		adc $18				adc 	codePtr
.11fa	85 18		sta $18				sta 	codePtr
.11fc	90 e1		bcc $11df			bcc 	_GOSearch
.11fe	e6 19		inc $19				inc 	codePtr+1
.1200	80 dd		bra $11df			bra 	_GOSearch
.1202					_GOError:
.1202	4c 69 28	jmp $2869		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1205					Command_Input:
.1205	a9 ff		lda #$ff			lda 	#$FF
.1207	8d 06 05	sta $0506			sta 	InputFlag
.120a	80 03		bra $120f			bra 	Command_IP_Main
.120c					Command_Print:
.120c	9c 06 05	stz $0506			stz 	InputFlag
.120f					Command_IP_Main:
.120f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1210					_CPLoop:
.1210	08		php				php 								; save last action flag
.1211	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1213	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1215	f0 48		beq $125f			beq 	_CPExit 					; without consuming
.1217	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1219	f0 44		beq $125f			beq 	_CPExit
.121b	68		pla				pla 								; throw last action flag
.121c	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.121e	c8		iny				iny
.121f	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1221	f0 39		beq $125c			beq 	_CPContinueWithSameLine
.1223	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1225	f0 30		beq $1257			beq 	_CPTab
.1227	88		dey				dey 								; undo the get.
.1228	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.122b	10 0b		bpl $1238			bpl	 	_CPNotInput
.122d	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.122f	c9 40		cmp #$40			cmp 	#$40
.1231	d0 05		bne $1238			bne 	_CPNotInput
.1233	20 68 12	jsr $1268			jsr 	_CPInputCode 				; input code
.1236	80 d7		bra $120f			bra 	Command_IP_Main 			; and go round again.
.1238					_CPNotInput:
.1238	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; evaluate expression.
.123b	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.123d	10 0e		bpl $124d			bpl 	_CPNumber
.123f	5a		phy				phy
.1240	18		clc				clc 								; string address to YX
.1241	a5 08		lda $08				lda 	IFR0+IM0
.1243	aa		tax				tax
.1244	a5 09		lda $09				lda 	IFR0+IM1
.1246	a8		tay				tay
.1247	20 9c 12	jsr $129c			jsr 	CPPrintYX 					; print YX
.124a	7a		ply				ply
.124b	80 c2		bra $120f			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.124d					_CPNumber:
.124d	5a		phy				phy
.124e	20 28 30	jsr $3028			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1251	20 9c 12	jsr $129c			jsr 	CPPrintYX 					; print string at YX
.1254	7a		ply				ply
.1255	80 b8		bra $120f			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1257					_CPTab:
.1257	a9 09		lda #$09			lda 	#9 							; print TAB
.1259	20 b4 12	jsr $12b4			jsr 	CPPrintA
.125c					_CPContinueWithSameLine:
.125c	38		sec				sec 								; loop round with carry set, which
.125d	80 b1		bra $1210			bra 	_CPLoop 					; will inhibit final CR
.125f					_CPExit:
.125f	28		plp				plp 								; get last action flag
.1260	b0 05		bcs $1267			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1262	a9 0d		lda #$0d			lda 	#13 						; print new line
.1264	20 b4 12	jsr $12b4			jsr 	CPPrintA
.1267					_CPExit2:
.1267	60		rts				rts
.1268					_CPInputCode:
.1268	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get the term.
.126b	5a		phy				phy 								; save position
.126c	20 b1 12	jsr $12b1			jsr 	CPInputA					; input a line to YX
.126f	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1271	30 18		bmi $128b			bmi 	_CPInputString
.1273	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1275	48		pha				pha
.1276	a5 09		lda $09				lda 	IFR0+IM1
.1278	48		pha				pha
.1279	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.127b	84 23		sty $23				sty 	zTemp0+1
.127d	20 7d 1a	jsr $1a7d			jsr 	VALConversionZTemp0
.1280	68		pla				pla 								; do the assign.
.1281	85 23		sta $23				sta 	zTemp0+1
.1283	68		pla				pla
.1284	85 22		sta $22				sta 	zTemp0
.1286	20 dc 12	jsr $12dc			jsr 	AssignNumber
.1289	7a		ply				ply
.128a	60		rts				rts
.128b					_CPInputString:
.128b	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.128d	85 22		sta $22				sta 	zTemp0
.128f	a5 09		lda $09				lda 	IFR0+IM1
.1291	85 23		sta $23				sta 	zTemp0+1
.1293	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.1295	84 09		sty $09				sty 	IFR0+IM1
.1297	20 f3 12	jsr $12f3			jsr 	AssignString 				; assign the string
.129a	7a		ply				ply 								; exit
.129b	60		rts				rts
.129c					CPPrintYX:
.129c	86 22		stx $22				stx 	zTemp0
.129e	84 23		sty $23				sty 	zTemp0+1
.12a0	b2 22		lda ($22)			lda 	(zTemp0)
.12a2	aa		tax				tax
.12a3	f0 0b		beq $12b0			beq 	_CPPrintExit
.12a5	a0 01		ldy #$01			ldy 	#1
.12a7					_CPPrintAYXLoop:
.12a7	b1 22		lda ($22),y			lda 	(zTemp0),y
.12a9	20 b4 12	jsr $12b4			jsr 	CPPrintA
.12ac	c8		iny				iny
.12ad	ca		dex				dex
.12ae	d0 f7		bne $12a7			bne 	_CPPrintAYXLoop
.12b0					_CPPrintExit:
.12b0	60		rts				rts
.12b1					CPInputA:
.12b1	4c df ff	jmp $ffdf			jmp 	OSEnterLine
.12b4					CPPrintA:
.12b4	4c f4 ff	jmp $fff4			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12b7					CommandLET:
.12b7	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term
.12ba	90 6f		bcc $132b			bcc 	CLError 					; must be a reference term.
.12bc	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12be	48		pha				pha
.12bf	a5 09		lda $09				lda 	IFR0+IM1
.12c1	48		pha				pha
.12c2	a5 0b		lda $0b				lda 	IFR0+IExp
.12c4	48		pha				pha
.12c5	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12c7	20 99 28	jsr $2899			jsr 	ERRCheckA
.12ca	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; right hand side.
.12cd	68		pla				pla 								; type of l-expr
.12ce	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d0	30 5c		bmi $132e			bmi 	CLType
.12d2	fa		plx				plx 	 							; pop target address to zTemp0
.12d3	86 23		stx $23				stx 	zTemp0+1
.12d5	fa		plx				plx
.12d6	86 22		stx $22				stx 	zTemp0
.12d8					AssignData:
.12d8	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12da	30 17		bmi $12f3			bmi 	AssignString
.12dc					AssignNumber:
.12dc	5a		phy				phy
.12dd	a0 03		ldy #$03			ldy 	#3
.12df	a5 0b		lda $0b				lda 	IFR0+IExp
.12e1	91 22		sta ($22),y			sta 	(zTemp0),y
.12e3	88		dey				dey
.12e4	a5 0a		lda $0a				lda 	IFR0+IM2
.12e6	91 22		sta ($22),y			sta 	(zTemp0),y
.12e8	88		dey				dey
.12e9	a5 09		lda $09				lda 	IFR0+IM1
.12eb	91 22		sta ($22),y			sta 	(zTemp0),y
.12ed	a5 08		lda $08				lda 	IFR0+IM0
.12ef	92 22		sta ($22)			sta 	(zTemp0)
.12f1	7a		ply				ply
.12f2	60		rts				rts
.12f3					AssignString:
.12f3	5a		phy				phy
.12f4	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12f6	b1 22		lda ($22),y			lda 	(zTemp0),y
.12f8	12 22		ora ($22)			ora 	(zTemp0)
.12fa	f0 23		beq $131f			beq 	_CLConcreteString
.12fc	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.12fe	85 24		sta $24				sta 	zTemp1
.1300	b1 22		lda ($22),y			lda 	(zTemp0),y
.1302	85 25		sta $25				sta 	zTemp1+1
.1304	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.1306	38		sec				sec 								; we want 3 for slot size, status, string size.
.1307	e9 03		sbc #$03			sbc 	#3
.1309	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.130b	90 12		bcc $131f			bcc 	_CLConcreteString 			; if so, concrete the string again.
.130d	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.130f	1a		inc a				inc 	a
.1310	aa		tax				tax
.1311	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1313					_CLReplaceString:
.1313	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1315	c8		iny				iny
.1316	c8		iny				iny
.1317	91 24		sta ($24),y			sta 	(zTemp1),y
.1319	88		dey				dey
.131a	ca		dex				dex
.131b	d0 f6		bne $1313			bne 	_CLReplaceString
.131d	80 0a		bra $1329			bra 	_CLExit
.131f					_CLConcreteString:
.131f	20 0c 29	jsr $290c			jsr 	StringConcrete  			; concreted string in XA.
.1322	a0 01		ldy #$01			ldy 	#1 							; store the address
.1324	92 22		sta ($22)			sta 	(zTemp0)
.1326	8a		txa				txa
.1327	91 22		sta ($22),y			sta 	(zTemp0),y
.1329					_CLExit:
.1329	7a		ply				ply
.132a	60		rts				rts
.132b					CLError:
.132b	4c 07 28	jmp $2807		jmp	ErrorV_variable
.132e					CLType:
.132e	4c 04 27	jmp $2704		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1331					Command_LIST:
.1331	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1334	9c 08 05	stz $0508			stz 	CLFrom+1
.1337	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1339	c9 99		cmp #$99			cmp 	#PR_COMMA
.133b	f0 1d		beq $135a			beq 	_CLToLine
.133d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.133f	f0 37		beq $1378			beq 	_CLDefaultTo
.1341	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1344	a5 08		lda $08				lda 	IFR0+IM0
.1346	8d 07 05	sta $0507			sta 	CLFrom
.1349	8d 09 05	sta $0509			sta 	CLTo
.134c	a5 09		lda $09				lda 	IFR0+IM1
.134e	8d 08 05	sta $0508			sta 	CLFrom+1
.1351	8d 0a 05	sta $050a			sta 	CLTo+1
.1354	b1 18		lda ($18),y			lda 	(codePtr),y
.1356	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1358	f0 26		beq $1380			beq 	_CLList
.135a					_CLToLine:
.135a	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.135c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.135e	f0 18		beq $1378			beq 	_CLDefaultTo
.1360	20 91 28	jsr $2891			jsr 	ERRCheckComma 				; sep comma
.1363	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1365	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1367	f0 0f		beq $1378			beq 	_CLDefaultTo
.1369	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; there's a To value.
.136c	a5 08		lda $08				lda 	IFR0+IM0
.136e	8d 09 05	sta $0509			sta 	CLTo
.1371	a5 09		lda $09				lda 	IFR0+IM1
.1373	8d 0a 05	sta $050a			sta 	CLTo+1
.1376	80 08		bra $1380			bra 	_CLList
.1378					_CLDefaultTo:
.1378	a9 ff		lda #$ff			lda 	#$FF
.137a	8d 09 05	sta $0509			sta 	CLTo
.137d	8d 0a 05	sta $050a			sta 	CLTo+1
.1380					_CLList:
.1380	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1383	85 19		sta $19				sta 	codePtr+1
.1385	64 18		stz $18				stz 	codePtr
.1387	a2 f4		ldx #$f4			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1389	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.138b	20 de 1e	jsr $1ede			jsr 	TOKSetDetokeniseOutput
.138e					_CLLoop:
.138e	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1390	f0 51		beq $13e3			beq 	_CLExit
.1392	20 e5 ff	jsr $ffe5			jsr 	OSKeyboardDataProcess
.1395	20 e8 ff	jsr $ffe8			jsr 	OSCheckBreak 				; check escape.
.1398	d0 4c		bne $13e6			bne 	_CLBreak
.139a	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.139c	20 e9 13	jsr $13e9			jsr 	_CLCompareLine
.139f	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a1	f0 33		beq $13d6			beq 	_CLNext
.13a3	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13a5	20 e9 13	jsr $13e9			jsr 	_CLCompareLine
.13a8	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13aa	f0 2a		beq $13d6			beq 	_CLNext
.13ac	a0 02		ldy #$02			ldy 	#2 							; print line #
.13ae	b1 18		lda ($18),y			lda 	(codePtr),y
.13b0	aa		tax				tax
.13b1	88		dey				dey
.13b2	b1 18		lda ($18),y			lda 	(codePtr),y
.13b4	20 ea 29	jsr $29ea			jsr 	WriteIntXA
.13b7					_CLSpacing:
.13b7	a9 20		lda #$20			lda 	#32
.13b9	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.13bc	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.13bf	e0 06		cpx #$06			cpx 	#6
.13c1	d0 f4		bne $13b7			bne 	_CLSpacing
.13c3	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13c5	a5 18		lda $18				lda 	codePtr
.13c7	18		clc				clc
.13c8	69 03		adc #$03			adc 	#3
.13ca	aa		tax				tax
.13cb	90 01		bcc $13ce			bcc 	_CLNoCarry2
.13cd	c8		iny				iny
.13ce					_CLNoCarry2:
.13ce	20 99 1e	jsr $1e99			jsr 	TOKDetokenise
.13d1	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d3	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.13d6					_CLNext:
.13d6	18		clc				clc 								; advance to next line.
.13d7	b2 18		lda ($18)			lda 	(codePtr)
.13d9	65 18		adc $18				adc 	codePtr
.13db	85 18		sta $18				sta 	codePtr
.13dd	90 02		bcc $13e1			bcc 	_CLNoCarry
.13df	e6 19		inc $19				inc 	codePtr+1
.13e1					_CLNoCarry:
.13e1	80 ab		bra $138e			bra 	_CLLoop
.13e3					_CLExit:
.13e3	4c 09 2a	jmp $2a09			jmp 	WarmStart
.13e6					_CLBreak:
.13e6	4c 5f 28	jmp $285f		jmp	ErrorV_break
.13e9					_CLCompareLine:
.13e9	a0 01		ldy #$01			ldy 	#1
.13eb	38		sec				sec
.13ec	b1 18		lda ($18),y			lda 	(codePtr),y
.13ee	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f1	85 22		sta $22				sta 	zTemp0
.13f3	c8		iny				iny
.13f4	b1 18		lda ($18),y			lda 	(codePtr),y
.13f6	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13f9	90 0a		bcc $1405			bcc 	_CLIsNegative
.13fb	d0 05		bne $1402			bne 	_CLIsPositive
.13fd	a5 22		lda $22				lda 	zTemp0
.13ff	d0 01		bne $1402			bne 	_CLIsPositive
.1401	60		rts				rts
.1402					_CLIsPositive:
.1402	a9 01		lda #$01			lda 	#1
.1404	60		rts				rts
.1405					_CLIsNegative:
.1405	a9 ff		lda #$ff			lda 	#255
.1407	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1408					Command_NEW:
.1408	20 90 20	jsr $2090			jsr 	PGMNewProgram 				; Reset current program
.140b	20 3c 10	jsr $103c			jsr 	ClearCode 					; Run CLR
.140e	4c 30 15	jmp $1530			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1411					Command_READ:
.1411	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term to R0
.1414	90 35		bcc $144b			bcc 	_CRSyntax 					; fail if not a reference.
.1416	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1418	48		pha				pha
.1419	a5 09		lda $09				lda 	IFR0+IM1
.141b	48		pha				pha
.141c	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.141e	48		pha				pha
.141f	20 a4 14	jsr $14a4			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1422	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1425	d0 27		bne $144e			bne 	_CRHaveData  				; forward for the next one.
.1427					_CRNextLine:
.1427	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1429	f0 1a		beq $1445			beq 	_CRNoData
.142b					_CRKeepSearching:
.142b	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.142d	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.142f	20 e4 25	jsr $25e4			jsr 	ScanForward
.1432	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.1434	f0 18		beq $144e			beq 	_CRHaveData 				; found it
.1436	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1438	18		clc				clc 								; try the next line, keep going.
.1439	b2 18		lda ($18)			lda 	(codePtr)
.143b	65 18		adc $18				adc 	codePtr
.143d	85 18		sta $18				sta 	codePtr
.143f	90 e6		bcc $1427			bcc 	_CRNextLine
.1441	e6 19		inc $19				inc 	codePtr+1
.1443	80 e2		bra $1427			bra 	_CRNextLine
.1445					_CRNoData:
.1445	4c 8c 27	jmp $278c		jmp	ErrorV_data
.1448					_CLType:
.1448	4c 04 27	jmp $2704		jmp	ErrorV_type
.144b					_CRSyntax:
.144b	4c d4 26	jmp $26d4		jmp	ErrorV_syntax
.144e					_CRHaveData:
.144e	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1451	68		pla				pla 								; type of l-expr
.1452	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1454	30 f2		bmi $1448			bmi 	_CLType
.1456	68		pla				pla 								; restore address
.1457	85 23		sta $23				sta 	zTemp0+1
.1459	68		pla				pla
.145a	85 22		sta $22				sta 	zTemp0
.145c	20 d8 12	jsr $12d8			jsr 	AssignData 					; write R0 there.
.145f	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1462	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1464	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1466	d0 04		bne $146c			bne 	_CRSwapBack
.1468	c8		iny				iny 								; consume comma
.1469	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.146c					_CRSwapBack:
.146c	20 a4 14	jsr $14a4			jsr 	SwapCodeDataPointers		; swap them back.
.146f	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1471	c8		iny				iny
.1472	c9 99		cmp #$99			cmp 	#PR_COMMA
.1474	f0 9b		beq $1411			beq 	Command_READ 				; if so go round again.
.1476	88		dey				dey 								; unpick get.
.1477	60		rts				rts
.1478					Command_DATA:
.1478	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.147a	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.147c	20 e4 25	jsr $25e4			jsr 	ScanForward
.147f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1481	d0 01		bne $1484			bne 	_CDNotEOL
.1483	88		dey				dey
.1484					_CDNotEOL:
.1484	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1485					Command_REM:
.1485					Command_REM2:
.1485	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1487	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1489	d0 06		bne $1491			bne 	_CRExit
.148b	c8		iny				iny 								; skip over it, it's a comment.
.148c	98		tya				tya
.148d	38		sec				sec
.148e	71 18		adc ($18),y			adc 	(codePtr),y
.1490	a8		tay				tay
.1491					_CRExit:
.1491	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1492					S
.1492					Command_RESTORE:
.1492	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1495	8d 0c 05	sta $050c			sta 	dataPtr+1
.1498	9c 0b 05	stz $050b			stz 	dataPtr
.149b	a9 03		lda #$03			lda 	#3 							; position start of line
.149d	8d 0d 05	sta $050d			sta 	dataPos
.14a0	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14a3	60		rts				rts
.14a4					SwapCodeDataPointers:
.14a4	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14a7	a6 18		ldx $18				ldx 	codePtr
.14a9	85 18		sta $18				sta 	codePtr
.14ab	8e 0b 05	stx $050b			stx 	dataPtr
.14ae	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14b1	a6 19		ldx $19				ldx 	codePtr+1
.14b3	85 19		sta $19				sta 	codePtr+1
.14b5	8e 0c 05	stx $050c			stx 	dataPtr+1
.14b8	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14bb	8c 0d 05	sty $050d			sty 	dataPos
.14be	a8		tay				tay
.14bf	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c0					Command_RUN:
.14c0	20 3c 10	jsr $103c			jsr 	ClearCode					; clear everything out.
.14c3	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14c6	85 19		sta $19				sta 	codePtr+1
.14c8	64 18		stz $18				stz 	codePtr
.14ca	80 0b		bra $14d7			bra 	RUNNewLine
.14cc					RUNEndOfLine:
.14cc	18		clc				clc 								; advance to next line.
.14cd	b2 18		lda ($18)			lda 	(codePtr)
.14cf	65 18		adc $18				adc 	codePtr
.14d1	85 18		sta $18				sta 	codePtr
.14d3	90 02		bcc $14d7			bcc 	_RELNoCarry
.14d5	e6 19		inc $19				inc 	codePtr+1
.14d7					_RELNoCarry:
.14d7					RUNNewLine:
.14d7	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14d9	9a		txs				txs
.14da	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14dc	f0 52		beq $1530			beq 	Command_END
.14de	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e0	b1 18		lda ($18),y			lda 	(codePtr),y
.14e2	8d 26 06	sta $0626			sta 	ERRLine
.14e5	c8		iny				iny
.14e6	b1 18		lda ($18),y			lda 	(codePtr),y
.14e8	8d 27 06	sta $0627			sta 	ERRLine+1
.14eb	c8		iny				iny 								; offset into codePtr for start of line.
.14ec					RUNNewCommand:
.14ec	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14ef	ce 10 05	dec $0510			dec 	checkCounter
.14f2	d0 0a		bne $14fe			bne 	_RNCNoCheck
.14f4	5a		phy				phy 								; keyboard check.
.14f5	20 e5 ff	jsr $ffe5			jsr 	OSKeyboardDataProcess
.14f8	7a		ply				ply
.14f9	20 e8 ff	jsr $ffe8			jsr 	OSCheckBreak 				; check escape.
.14fc	d0 1e		bne $151c			bne 	_RUNBreak
.14fe					_RNCNoCheck:
.14fe	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1500	10 1d		bpl $151f			bpl		_RUNNotToken 				; probably an identifier
.1502	c8		iny				iny 								; consume token
.1503	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1505	f0 e5		beq $14ec			beq 	RUNNewCommand
.1507	c9 a4		cmp #$a4			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1509	b0 0e		bcs $1519			bcs 	_RUNSyntax
.150b	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.150d	90 0a		bcc $1519			bcc 	_RUNSyntax
.150f	0a		asl a				asl 	a 							; double into X.
.1510	aa		tax				tax
.1511	20 16 15	jsr $1516			jsr 	_RUNDispatchMain			; call the main dispatcher
.1514	80 d6		bra $14ec			bra 	RUNNewCommand
.1516					_RUNDispatchMain:
.1516	7c 7d 1d	jmp ($1d7d,x)			jmp 	(VectorTable,x)
.1519					_RUNSyntax:
.1519	4c d4 26	jmp $26d4		jmp	ErrorV_syntax
.151c					_RUNBreak:
.151c	4c 5f 28	jmp $285f		jmp	ErrorV_break
.151f					_RUNNotToken:
.151f	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1521	90 f6		bcc $1519			bcc 	_RUNSyntax
.1523	20 b7 12	jsr $12b7			jsr 	CommandLET 					; assignment
.1526	80 c4		bra $14ec			bra 	RUNNewCommand 				; loop round.
.1528					Command_Shift_Handler:
.1528	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.152a	c8		iny				iny
.152b	0a		asl a				asl 	a 							; double into X
.152c	aa		tax				tax
.152d	7c 7d 1e	jmp ($1e7d,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1530					Command_END:
.1530	4c 09 2a	jmp $2a09			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1533					Command_STOP:
.1533	4c 78 27	jmp $2778		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1536					Command_Sys:
.1536	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; execution address
.1539	5a		phy				phy
.153a	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.153d	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1540	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.1543	20 48 15	jsr $1548			jsr 	_CSCallIFR0 				; call the code
.1546	7a		ply				ply
.1547	60		rts				rts
.1548					_CSCallIFR0:
.1548	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.154b					NoExec01:
.154b					NoExec02:
.154b					NoExec03:
.154b					NoExec04:
.154b					NoExec05:
.154b					NoExec06:
.154b					NoExec07:
.154b					NoExec08:
.154b	4c d4 26	jmp $26d4		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.154e					EXPBinAdd:
.154e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1550	30 6f		bmi $15c1			bmi 	EXPConcatenate
.1552	a2 0c		ldx #$0c			ldx 	#IFR1
.1554	4c 23 2c	jmp $2c23			jmp 	IFloatAdd
.1557					EXPBinSub:
.1557	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1559	30 3f		bmi $159a			bmi 	EXPTypeError
.155b	a2 0c		ldx #$0c			ldx 	#IFR1
.155d	4c 1c 2c	jmp $2c1c			jmp 	IFloatSubtract
.1560					EXPBinMul:
.1560	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.1562	30 36		bmi $159a			bmi 	EXPTypeError
.1564	a2 0c		ldx #$0c			ldx 	#IFR1
.1566	4c cd 2c	jmp $2ccd			jmp 	IFloatMultiply
.1569					EXPBinFDiv:
.1569	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.156b	30 2d		bmi $159a			bmi 	EXPTypeError
.156d	a2 0c		ldx #$0c			ldx 	#IFR1
.156f	20 4f 2f	jsr $2f4f			jsr 	IFloatDivideFloat
.1572	b0 0f		bcs $1583			bcs 	EXPDZero
.1574	60		rts				rts
.1575					EXPBinIDiv:
.1575	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1577	30 21		bmi $159a			bmi 	EXPTypeError
.1579	a2 0c		ldx #$0c			ldx 	#IFR1
.157b	20 4f 2f	jsr $2f4f			jsr 	IFloatDivideFloat
.157e	b0 03		bcs $1583			bcs 	EXPDZero
.1580	4c 2c 2f	jmp $2f2c			jmp 	IFloatIntegerR0
.1583					EXPDZero:
.1583	4c 4d 27	jmp $274d		jmp	ErrorV_divzero
.1586					EXPBinIMod:
.1586	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1588	30 10		bmi $159a			bmi 	EXPTypeError
.158a	a2 0c		ldx #$0c			ldx 	#IFR1
.158c	5a		phy				phy
.158d	20 62 2e	jsr $2e62			jsr 	IFPreProcessBitwise 		; set up everything.
.1590	d0 05		bne $1597			bne 	EXPDRange
.1592	20 9b 2d	jsr $2d9b			jsr 	IFloatModulusInteger
.1595	7a		ply				ply
.1596	60		rts				rts
.1597					EXPDRange:
.1597	4c e5 26	jmp $26e5		jmp	ErrorV_range
.159a					EXPTypeError:
.159a	4c 04 27	jmp $2704		jmp	ErrorV_type
.159d					EXPBinAnd:
.159d	24 0b		bit $0b				bit 	IFR0+IExp
.159f	30 f9		bmi $159a			bmi 	EXPTypeError
.15a1	a2 0c		ldx #$0c			ldx 	#IFR1
.15a3	20 1d 2e	jsr $2e1d			jsr 	IFloatBitwiseAnd
.15a6	b0 ef		bcs $1597			bcs 	EXPDRange
.15a8	60		rts				rts
.15a9					EXPBinOr:
.15a9	24 0b		bit $0b				bit 	IFR0+IExp
.15ab	30 ed		bmi $159a			bmi 	EXPTypeError
.15ad	a2 0c		ldx #$0c			ldx 	#IFR1
.15af	20 34 2e	jsr $2e34			jsr 	IFloatBitwiseOr
.15b2	b0 e3		bcs $1597			bcs 	EXPDRange
.15b4	60		rts				rts
.15b5					EXPBinXor:
.15b5	24 0b		bit $0b				bit 	IFR0+IExp
.15b7	30 e1		bmi $159a			bmi 	EXPTypeError
.15b9	a2 0c		ldx #$0c			ldx 	#IFR1
.15bb	20 4b 2e	jsr $2e4b			jsr 	IFloatBitwiseXor
.15be	b0 d7		bcs $1597			bcs 	EXPDRange
.15c0	60		rts				rts
.15c1					EXPConcatenate:
.15c1	18		clc				clc
.15c2	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15c4	72 0c		adc ($0c)			adc 	(IFR1)
.15c6	b0 2d		bcs $15f5			bcs 	_EXPCError 					; far too long.
.15c8	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15ca	da		phx				phx
.15cb	a6 09		ldx $09				ldx 	IFR0+1
.15cd	da		phx				phx
.15ce	20 7f 29	jsr $297f			jsr 	StringTempAllocate 			; allocate string, set up return
.15d1	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15d3	a5 0c		lda $0c				lda 	IFR1
.15d5	20 de 15	jsr $15de			jsr 	_EXPCCopyXA
.15d8	fa		plx				plx 								; copy second string
.15d9	68		pla				pla
.15da	20 de 15	jsr $15de			jsr 	_EXPCCopyXA
.15dd	60		rts				rts
.15de					_EXPCCopyXA:
.15de	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15e0	85 22		sta $22				sta 	zTemp0
.15e2	b2 22		lda ($22)			lda 	(zTemp0)					; length of string
.15e4	f0 0e		beq $15f4			beq 	_EXPCCExit 					; nothing in string
.15e6	aa		tax				tax 								; count
.15e7	5a		phy				phy 								; start position
.15e8	a0 01		ldy #$01			ldy 	#1
.15ea					_EXPCCLoop:
.15ea	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15ec	20 b4 29	jsr $29b4			jsr 	StringTempWrite
.15ef	c8		iny				iny
.15f0	ca		dex				dex
.15f1	d0 f7		bne $15ea			bne 	_EXPCCLoop
.15f3	7a		ply				ply
.15f4					_EXPCCExit:
.15f4	60		rts				rts
.15f5					_EXPCError:
.15f5	4c f1 27	jmp $27f1		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15f8					EXPReturnTrue:
.15f8	a2 08		ldx #$08			ldx 	#IFR0
.15fa	a9 01		lda #$01			lda 	#1
.15fc	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.15ff	20 36 32	jsr $3236			jsr 	IFloatNegate
.1602	60		rts				rts
.1603					EXPReturnFalse:
.1603	a2 08		ldx #$08			ldx 	#IFR0
.1605	4c 2b 32	jmp $322b			jmp 	IFloatSetZero
.1608					EXPCompareEqual:
.1608	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.160b	c9 00		cmp #$00			cmp 	#0
.160d	f0 e9		beq $15f8			beq 	EXPReturnTrue
.160f	80 f2		bra $1603			bra 	EXPReturnFalse
.1611					EXPCompareLess:
.1611	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1614	c9 ff		cmp #$ff			cmp 	#$FF
.1616	f0 e0		beq $15f8			beq 	EXPReturnTrue
.1618	80 e9		bra $1603			bra 	EXPReturnFalse
.161a					EXPCompareGreater:
.161a	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.161d	c9 01		cmp #$01			cmp 	#1
.161f	f0 d7		beq $15f8			beq 	EXPReturnTrue
.1621	80 e0		bra $1603			bra 	EXPReturnFalse
.1623					EXPCompareNotEqual:
.1623	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1626	c9 00		cmp #$00			cmp 	#0
.1628	d0 ce		bne $15f8			bne 	EXPReturnTrue
.162a	80 d7		bra $1603			bra 	EXPReturnFalse
.162c					EXPCompareLessEqual:
.162c	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.162f	c9 01		cmp #$01			cmp 	#1
.1631	d0 c5		bne $15f8			bne 	EXPReturnTrue
.1633	80 ce		bra $1603			bra 	EXPReturnFalse
.1635					EXPCompareGreaterEqual:
.1635	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1638	c9 ff		cmp #$ff			cmp 	#$FF
.163a	d0 bc		bne $15f8			bne 	EXPReturnTrue
.163c	80 c5		bra $1603			bra 	EXPReturnFalse
.163e					EXPCompareBaseCode:
.163e	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1640	30 10		bmi $1652			bmi 	_EXCBCString
.1642	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1644	20 fa 2e	jsr $2efa			jsr 	IFloatCompare
.1647	a5 08		lda $08				lda 	IFR0+IM0
.1649	f0 06		beq $1651			beq 	_EXCBCExit 					; return 0 if zero
.164b	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.164d	50 02		bvc $1651			bvc 	_EXCBCExit
.164f	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1651					_EXCBCExit:
.1651	60		rts				rts
.1652					_EXCBCString:
.1652	5a		phy				phy
.1653	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1655	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1657	90 02		bcc $165b			bcc 	_EXCBCSmaller
.1659	b2 0c		lda ($0c)			lda 	(IFR1)
.165b					_EXCBCSmaller:
.165b	aa		tax				tax
.165c	f0 0d		beq $166b			beq 	_EXCBCMatches 				; if zero common length matches
.165e	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1660					_EXCBCCheckSmallerMatches:
.1660	c8		iny				iny 								; compare directly as far as common length
.1661	38		sec				sec
.1662	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1664	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1666	d0 08		bne $1670			bne 	_EXCBCExit2
.1668	ca		dex				dex
.1669	d0 f5		bne $1660			bne 	_EXCBCCheckSmallerMatches
.166b					_EXCBCMatches:
.166b	38		sec				sec
.166c	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.166e	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1670					_EXCBCExit2:
.1670	7a		ply				ply
.1671	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.1673	f0 04		beq $1679			beq 	_EXCBCReturn
.1675	30 03		bmi $167a			bmi 	_EXCBCFF 					; return $FF if <
.1677	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1679					_EXCBCReturn:
.1679	60		rts				rts
.167a					_EXCBCFF:
.167a	a9 ff		lda #$ff			lda 	#$FF
.167c	60		rts				rts
.167d					_EXCBCRange:
.167d	4c e5 26	jmp $26e5		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1680					EXPBinLeft:
.1680	a9 ff		lda #$ff			lda 	#$FF
.1682	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.1685	4c 8b 16	jmp $168b			jmp 	EXPShiftCommon
.1688					EXPBinRight:
.1688	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.168b					EXPShiftCommon:
.168b	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.168d	05 0f		ora $0f				ora 	IFR1+IExp
.168f	29 7f		and #$7f			and 	#$7F
.1691	d0 35		bne $16c8			bne 	_EXPSRange
.1693	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1695	29 e0		and #$e0			and 	#$E0
.1697	05 09		ora $09				ora 	IFR0+IM1
.1699	05 0a		ora $0a				ora 	IFR0+IM2
.169b	d0 25		bne $16c2			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.169d	5a		phy				phy
.169e	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16a0	29 1f		and #$1f			and 	#$1F
.16a2	f0 17		beq $16bb			beq 	_EXPSExit 					; exit if zero
.16a4	a8		tay				tay
.16a5					_EXPSLoop:
.16a5	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16a7	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16aa	30 05		bmi $16b1			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16ac	20 5a 32	jsr $325a			jsr 	IFloatShiftRight
.16af	80 07		bra $16b8			bra 	_EXPSContinue
.16b1					_EXPSShiftLeft:
.16b1	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.16b4	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16b6	30 10		bmi $16c8			bmi 	_EXPSRange
.16b8					_EXPSContinue:
.16b8	88		dey				dey 								; do it Y times
.16b9	d0 ea		bne $16a5			bne 	_EXPSLoop
.16bb					_EXPSExit:
.16bb	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16bd	20 bc 31	jsr $31bc			jsr 	IFloatCopyFromRegister
.16c0	7a		ply				ply
.16c1	60		rts				rts
.16c2					_EXPSShiftZero:
.16c2	a2 08		ldx #$08			ldx 	#IFR0
.16c4	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.16c7	60		rts				rts
.16c8					_EXPSRange:
.16c8	4c e5 26	jmp $26e5		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16cb					EXPEvaluateExpression:
.16cb	a9 00		lda #$00			lda 	#0 							; current precedence
.16cd					EXPEvaluateExpressionPrecedenceA:
.16cd	48		pha				pha
.16ce	20 48 17	jsr $1748			jsr 	EXPTermValueR0				; do first term.
.16d1					_EELoop:
.16d1	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16d3	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16d5	90 31		bcc $1708			bcc 	_EEExit
.16d7	aa		tax				tax 								; access the precedence of the operator.
.16d8	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16d9	dd a6 1a	cmp $1aa6,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16dc	b0 2b		bcs $1709			bcs 	_EEExit2
.16de	48		pha				pha 								; save current precedence.
.16df	da		phx				phx 								; save operator
.16e0	c8		iny				iny 								; consume operator
.16e1	da		phx				phx
.16e2	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16e4	20 7a 31	jsr $317a			jsr 	IFloatPushRx
.16e7	fa		plx				plx
.16e8	bd a6 1a	lda $1aa6,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16eb	20 cd 16	jsr $16cd			jsr 	EXPEvaluateExpressionPrecedenceA
.16ee	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16f0	20 9b 31	jsr $319b			jsr 	IFloatPullRx
.16f3	fa		plx				plx 								; operator
.16f4	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16f6	45 0f		eor $0f				eor 	IFR1+IExp
.16f8	30 08		bmi $1702			bmi 	_EEType
.16fa					_EETypeOkay:
.16fa	8a		txa				txa
.16fb	0a		asl a				asl 	a 							; double -> X
.16fc	aa		tax				tax
.16fd	20 05 17	jsr $1705			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1700	80 cf		bra $16d1			bra 	_EELoop
.1702					_EEType:
.1702	4c 04 27	jmp $2704		jmp	ErrorV_type
.1705					_EECallBinary:
.1705	7c 7d 1d	jmp ($1d7d,x)			jmp 	(VectorTable,x)
.1708					_EEExit:
.1708	68		pla				pla 								; throw precedence
.1709					_EEExit2:
.1709	18		clc				clc
.170a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.170b					EXPEvalNumber:
.170b	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; get a value
.170e	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1710	30 01		bmi $1713			bmi 	EVUType
.1712	60		rts				rts
.1713					EVUType:
.1713	4c 04 27	jmp $2704		jmp	ErrorV_type
.1716					EXPEvalInteger:
.1716	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1719	20 2c 2f	jsr $2f2c			jsr 	IFloatIntegerR0
.171c	60		rts				rts
.171d					EXPEvalInteger16:
.171d	20 16 17	jsr $1716			jsr 	EXPEvalInteger 				; get integer
.1720	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.1722	d0 21		bne $1745			bne 	EVURange
.1724	a6 09		ldx $09				ldx 	IFR0+IM1
.1726	a5 08		lda $08				lda 	IFR0+IM0
.1728	60		rts				rts
.1729					EXPEvalInteger8:
.1729	20 16 17	jsr $1716			jsr 	EXPEvalInteger 				; get integer
.172c	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.172e	05 09		ora $09				ora 	IFR0+IM1
.1730	d0 13		bne $1745			bne 	EVURange
.1732	a5 08		lda $08				lda 	IFR0+IM0
.1734	60		rts				rts
.1735					EXPEvalString:
.1735	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; get value
.1738	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.173a	10 d7		bpl $1713			bpl 	EVUType
.173c	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.173e	86 23		stx $23				stx 	zTemp0+1
.1740	a5 08		lda $08				lda 	IFR0+IM0
.1742	85 22		sta $22				sta 	zTemp0
.1744	60		rts				rts
.1745					EVURange:
.1745	4c e5 26	jmp $26e5		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1748					EXPTermValueR0:
.1748	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term
.174b	90 45		bcc $1792			bcc 	_ETVNotReference 			; exit if value.
.174d	5a		phy				phy
.174e	a0 03		ldy #$03			ldy 	#3 							; get type
.1750	b1 08		lda ($08),y			lda 	(IFR0),y
.1752	30 14		bmi $1768			bmi 	_ETVDereferenceString
.1754	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1756	88		dey				dey 								; get byte 2
.1757	b1 08		lda ($08),y			lda 	(IFR0),y
.1759	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.175b	88		dey				dey 								; get byte 1
.175c	b1 08		lda ($08),y			lda 	(IFR0),y
.175e	aa		tax				tax 								; save in X so we can overwrite it
.175f	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1761	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.1763	85 08		sta $08				sta 	IFR0+IM0
.1765	7a		ply				ply
.1766	18		clc				clc
.1767	60		rts				rts
.1768					_ETVDereferenceString:
.1768	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.176a	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.176c	12 08		ora ($08)			ora 	(IFR0)
.176e	f0 11		beq $1781			beq 	_ETVNull 					; if so, return a fake NULL.
.1770	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1772	aa		tax				tax
.1773	b2 08		lda ($08)			lda 	(IFR0)
.1775	18		clc				clc 								; add two so points to actual string.
.1776	69 02		adc #$02			adc 	#2
.1778	90 01		bcc $177b			bcc 	_EVDSNoCarry
.177a	e8		inx				inx
.177b					_EVDSNoCarry:
.177b	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.177d	85 08		sta $08				sta 	IFR0
.177f	80 08		bra $1789			bra 	_ETVFillExit 				; tidy up and exit.
.1781					_ETVNull:
.1781	a9 91		lda #$91			lda 	#_EVTNString & $FF
.1783	85 08		sta $08				sta 	IFR0+IM0
.1785	a9 17		lda #$17			lda 	#_EVTNString >> 8
.1787	85 09		sta $09				sta 	IFR0+IM1
.1789					_ETVFillExit:
.1789	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.178b	a9 80		lda #$80			lda 	#$80 						; set type to string.
.178d	85 0b		sta $0b				sta 	IFR0+IExp
.178f	7a		ply				ply
.1790	60		rts				rts
.1791					_EVTNString:
>1791	00						.byte 	0
.1792					_ETVNotReference:
.1792	60		rts				rts
.1793					EXPTermR0:
.1793	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1795	30 10		bmi $17a7			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1797	c8		iny				iny 								; consume element
.1798	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.179a	b0 08		bcs $17a4			bcs 	_ETMIdentifier
.179c	20 d2 17	jsr $17d2			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.179f	20 05 18	jsr $1805			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17a2	18		clc				clc 								; return value ok
.17a3	60		rts				rts
.17a4					_ETMIdentifier:
.17a4	4c c4 2b	jmp $2bc4			jmp 	VARCheckSimple 				; check variables, seperate module.
.17a7					_ETMIsUnaryOrMinus:
.17a7	c8		iny				iny 								; consume element
.17a8	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17aa	d0 0e		bne $17ba			bne 	_ETMCheckUnary
.17ac	20 48 17	jsr $1748			jsr 	EXPTermValueR0 				; get a term to negate
.17af	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17b1	20 36 32	jsr $3236			jsr 	IFloatNegate
.17b4	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17b6	30 17		bmi $17cf			bmi 	_ETMUnaryType				; if so error.
.17b8	18		clc				clc
.17b9	60		rts				rts
.17ba					_ETMCheckUnary:
.17ba	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17bc	90 0e		bcc $17cc			bcc 	_ETMUnarySyntax
.17be	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17c0	b0 0a		bcs $17cc			bcs 	_ETMUnarySyntax
.17c2	0a		asl a				asl 	a 							; make it into an index => X
.17c3	aa		tax				tax
.17c4	20 c9 17	jsr $17c9			jsr 	_ETMCallUnaryFunction 		; call the function
.17c7	18		clc				clc 								; and return it.
.17c8	60		rts				rts
.17c9					_ETMCallUnaryFunction:
.17c9	7c 7d 1d	jmp ($1d7d,x)			jmp 	(VectorTable,x)
.17cc					_ETMUnarySyntax:
.17cc	4c d4 26	jmp $26d4		jmp	ErrorV_syntax
.17cf					_ETMUnaryType:
.17cf	4c 04 27	jmp $2704		jmp	ErrorV_type
.17d2					EXPExtractTokenisedInteger:
.17d2	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17d4	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17d6	64 09		stz $09				stz 	IFR0+IM1
.17d8	64 0a		stz $0a				stz 	IFR0+IM2
.17da					_ETMConstant:
.17da	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17dc	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17de	b0 24		bcs $1804			bcs 	_ETMCExit 					; no, exit.
.17e0	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17e2	a5 09		lda $09				lda 	IFR0+IM1
.17e4	85 0a		sta $0a				sta 	IFR0+IM2
.17e6	a5 08		lda $08				lda 	IFR0+IM0
.17e8	85 09		sta $09				sta 	IFR0+IM1
.17ea	64 08		stz $08				stz 	IFR0+IM0
.17ec	8a		txa				txa
.17ed	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17ee	66 0a		ror $0a				ror 	IFR0+IM2
.17f0	66 09		ror $09				ror 	IFR0+IM1
.17f2	66 08		ror $08				ror 	IFR0+IM0
.17f4	4a		lsr a				lsr 	a
.17f5	66 0a		ror $0a				ror 	IFR0+IM2
.17f7	66 09		ror $09				ror 	IFR0+IM1
.17f9	66 08		ror $08				ror 	IFR0+IM0
.17fb	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17fd	11 18		ora ($18),y			ora 	(codePtr),y
.17ff	85 08		sta $08				sta 	IFR0+IM0
.1801	c8		iny				iny 								; consume, loop back
.1802	80 d6		bra $17da			bra 	_ETMConstant
.1804					_ETMCExit:
.1804	60		rts				rts
.1805					EXPCheckDecimalFollows:
.1805	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1807	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1809	d0 19		bne $1824			bne 	_ETMCDExit
.180b	c8		iny				iny 								; consume token.
.180c	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.180e	5a		phy				phy									; save current position
.180f	48		pha				pha 								; save count of chars.
.1810	38		sec				sec 								; address into YX : y + codePtr+1
.1811	98		tya				tya
.1812	65 18		adc $18				adc 	codePtr
.1814	aa		tax				tax
.1815	a5 19		lda $19				lda 	codePtr+1
.1817	69 00		adc #$00			adc 	#0
.1819	a8		tay				tay
.181a	68		pla				pla 								; get count.
.181b	20 cf 30	jsr $30cf			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.181e	7a		ply				ply 								; go to next token.
.181f	98		tya				tya
.1820	38		sec				sec
.1821	71 18		adc ($18),y			adc 	(codePtr),y
.1823	a8		tay				tay
.1824					_ETMCDExit:
.1824	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1825					EXPUnaryAbs:
.1825	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.1828	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.182b	20 6e 2e	jsr $2e6e			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.182e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.182f					EXPUnaryAsc:
.182f	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.1832	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.1835	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1837	f0 06		beq $183f			beq 	_EXAZero 						; if so return 0
.1839	5a		phy				phy 									; otherwise get first character
.183a	a0 01		ldy #$01			ldy 	#1
.183c	b1 22		lda ($22),y			lda 	(zTemp0),y
.183e	7a		ply				ply
.183f					_EXAZero:
.183f	a2 08		ldx #$08			ldx 	#IFR0
.1841	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.1844	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1845					EXPUnaryChr:
.1845	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; expr
.1848	48		pha				pha 									; push on stack
.1849	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.184c	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.184e	20 7f 29	jsr $297f			jsr 	StringTempAllocate
.1851	68		pla				pla 									; get value back
.1852	20 b4 29	jsr $29b4			jsr 	StringTempWrite 				; write to string.
.1855	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1856					EXPUnaryDec:
.1856	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.1859	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.185c	5a		phy				phy 									; save position.
.185d	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.185f	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.1862	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1864	f0 3b		beq $18a1			beq 	_EUDError 						; empty string is not legit.
.1866	aa		tax				tax 									; count in X.
.1867	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1869					_EUDLoop:
.1869	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next from string
.186b	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.186d	90 02		bcc $1871			bcc 	_EUDNoCase
.186f	e9 20		sbc #$20			sbc 	#$20
.1871					_EUDNoCase:
.1871	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1873	90 2c		bcc $18a1			bcc 	_EUDError
.1875	c9 3a		cmp #$3a			cmp 	#'9'+1
.1877	90 0a		bcc $1883			bcc 	_EUDOkay
.1879	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.187b	90 24		bcc $18a1			bcc 	_EUDError
.187d	c9 47		cmp #$47			cmp 	#'F'+1
.187f	b0 20		bcs $18a1			bcs 	_EUDError
.1881	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.1883					_EUDOkay:
.1883	29 0f		and #$0f			and 	#15 							; make constant
.1885	da		phx				phx
.1886	48		pha				pha
.1887	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1889	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.188c	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.188f	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.1892	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.1895	68		pla				pla 									; pop constant and OR in
.1896	fa		plx				plx
.1897	05 08		ora $08				ora 	IFR0+IM0
.1899	85 08		sta $08				sta 	IFR0+IM0
.189b	c8		iny				iny 									; next char
.189c	ca		dex				dex 									; done all characters ?
.189d	d0 ca		bne $1869			bne 	_EUDLoop
.189f	7a		ply				ply
.18a0	60		rts				rts
.18a1					_EUDError:
.18a1	4c f6 26	jmp $26f6		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.18a4					EXPUnaryInlineDec:
.18a4	4c d4 26	jmp $26d4		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18a7					EXPUnaryPeek:
.18a7	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 				; number to R0
.18aa	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.18ad	b2 08		lda ($08)			lda 	(IFR0)
.18af	a2 08		ldx #$08			ldx 	#IFR0
.18b1	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.18b4	60		rts				rts
.18b5					EXPUnaryDeek:
.18b5	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 				; number to R0
.18b8	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.18bb	5a		phy				phy
.18bc	a0 01		ldy #$01			ldy 	#1
.18be	b1 08		lda ($08),y			lda 	(IFR0),y
.18c0	7a		ply				ply
.18c1	48		pha				pha
.18c2	b2 08		lda ($08)			lda 	(IFR0)
.18c4	a2 08		ldx #$08			ldx 	#IFR0
.18c6	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.18c9	68		pla				pla
.18ca	85 09		sta $09				sta 	IFR0+IM1
.18cc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.18cd					EXPUnaryNull:
.18cd	20 48 17	jsr $1748			jsr 	EXPTermValueR0
.18d0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18d1					EXPUnaryFrac:
.18d1	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.18d4	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.18d7	20 d6 2e	jsr $2ed6			jsr 	IFloatFractionalR0 				; get fractional bit.
.18da	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18db					EXPUnaryInkey:
.18db	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.18de	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18e0	20 7f 29	jsr $297f			jsr 	StringTempAllocate
.18e3	20 eb ff	jsr $ffeb			jsr 	OSIsKeyAvailable 				; if no key exit
.18e6	b0 06		bcs $18ee			bcs 	_EUIExit
.18e8	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18eb	20 b4 29	jsr $29b4			jsr 	StringTempWrite
.18ee					_EUIExit:
.18ee	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18ef					EXPUnaryInt:
.18ef	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.18f2	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; check for )
.18f5	20 2c 2f	jsr $2f2c			jsr 	IFloatIntegerR0 				; force to integer.
.18f8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18f9					EXPUnaryLen:
.18f9	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.18fc	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.18ff	b2 22		lda ($22)			lda 	(zTemp0) 						; first byte is the length
.1901	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.1903	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.1906	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1907					EXPUnaryParenthesis:
.1907	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.190a	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.190d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.190e					EXPUnaryRnd:
.190e	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; number to R0
.1911	20 89 28	jsr $2889			jsr 	ERRCheckRParen 				; )
.1914	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1916	20 2d 19	jsr $192d			jsr 	EXPLoadInRandom
.1919	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.191b	85 0b		sta $0b				sta 	IFR0+IExp
.191d	60		rts				rts
.191e					ExpUnaryRand:
.191e	20 16 17	jsr $1716			jsr 	EXPEvalInteger 				; integer to R0
.1921	20 89 28	jsr $2889			jsr 	ERRCheckRParen 				; )
.1924	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1926	20 2d 19	jsr $192d			jsr 	EXPLoadInRandom
.1929	20 9b 2d	jsr $2d9b			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.192c	60		rts				rts
.192d					EXPLoadInRandom:
.192d	20 2b 32	jsr $322b			jsr 	IFloatSetZero 				; zero it
.1930	20 42 19	jsr $1942			jsr 	EXPRandom32 				; do a 23 bit number.
.1933	95 00		sta $00,x			sta 	IM0,x
.1935	20 42 19	jsr $1942			jsr 	EXPRandom32
.1938	95 01		sta $01,x			sta 	IM1,x
.193a	20 42 19	jsr $1942			jsr 	EXPRandom32
.193d	29 7f		and #$7f			and 	#$7F
.193f	95 02		sta $02,x			sta 	IM2,x
.1941	60		rts				rts
.1942					EXPRandom32:
.1942	5a		phy				phy
.1943	a0 08		ldy #$08			ldy 	#8
.1945	ad 12 05	lda $0512			lda 	EXPSeed+0
.1948	0d 13 05	ora $0513			ora 	EXPSeed+1
.194b	0d 14 05	ora $0514			ora 	EXPSeed+2
.194e	0d 15 05	ora $0515			ora 	EXPSeed+3
.1951	d0 08		bne $195b			bne 	_EXPRNoReset
.1953	ee 12 05	inc $0512			inc 	EXPSeed+0
.1956	a0 10		ldy #$10			ldy 	#16
.1958	8c 15 05	sty $0515			sty 	EXPSeed+3
.195b					_EXPRNoReset:
.195b	ad 12 05	lda $0512			lda 	EXPSeed+0
.195e					_EXPRLoop:
.195e	0a		asl a				asl		a
.195f	2e 13 05	rol $0513			rol 	EXPSeed+1
.1962	2e 14 05	rol $0514			rol 	EXPSeed+2
.1965	2e 15 05	rol $0515			rol 	EXPSeed+3
.1968	90 02		bcc $196c			bcc 	_EXPRNoEOR
.196a	49 c5		eor #$c5			eor 	#$C5
.196c					_EXPRNoEOR:
.196c	88		dey				dey
.196d	d0 ef		bne $195e			bne 	_EXPRLoop
.196f	8d 12 05	sta $0512			sta 	EXPSeed+0
.1972	7a		ply				ply
.1973	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1974					EXPUnarySgn:
.1974	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.1977	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.197a	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.197c	20 cd 31	jsr $31cd			jsr 	IFloatCopyToRegister
.197f	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1981	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.1984	a2 0c		ldx #$0c			ldx 	#IFR1
.1986	20 fa 2e	jsr $2efa			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1989	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.198a					EXPUnarySqr:
.198a	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.198d	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.1990	20 76 2e	jsr $2e76			jsr 	IFloatSquareRootR0 				; square root.
.1993	b0 01		bcs $1996			bcs 	_EUSValue 						; error check.
.1995	60		rts				rts
.1996					_EUSValue:
.1996	4c e5 26	jmp $26e5		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1999					EXPUnaryHex:
.1999	20 16 17	jsr $1716			jsr 	EXPEvalInteger 					; expr
.199c	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.199f	5a		phy				phy
.19a0	a9 10		lda #$10			lda 	#16
.19a2	20 cd 2f	jsr $2fcd			jsr 	IFloatIntegerToStringR0
.19a5	80 0a		bra $19b1			bra 	EUSMain
.19a7					EXPUnaryStr:
.19a7	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; expr
.19aa	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.19ad	5a		phy				phy
.19ae	20 28 30	jsr $3028			jsr 	IFloatFloatToStringR0 			; convert to string
.19b1					EUSMain:
.19b1	b0 19		bcs $19cc			bcs 	_EUSError
.19b3	86 22		stx $22				stx 	zTemp0 							; save string address
.19b5	84 23		sty $23				sty 	zTemp0+1
.19b7	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19b9	20 7f 29	jsr $297f			jsr 	StringTempAllocate
.19bc	b2 22		lda ($22)			lda 	(zTemp0) 						; get count
.19be	aa		tax				tax 									; count in X
.19bf	a0 01		ldy #$01			ldy 	#1
.19c1					_EUSCopy:
.19c1	b1 22		lda ($22),y			lda 	(zTemp0),y
.19c3	c8		iny				iny
.19c4	20 b4 29	jsr $29b4			jsr 	StringTempWrite
.19c7	ca		dex				dex
.19c8	d0 f7		bne $19c1			bne	 	_EUSCopy
.19ca	7a		ply				ply
.19cb	60		rts				rts
.19cc					_EUSError:
.19cc	4c e5 26	jmp $26e5		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19cf					EXPUnaryInlineString:
.19cf	18		clc				clc 								; physical address -> IM0,1
.19d0	98		tya				tya 								; put the actual address in IM0
.19d1	65 18		adc $18				adc 	codePtr
.19d3	85 08		sta $08				sta 	IFR0+IM0
.19d5	a5 19		lda $19				lda 	codePtr+1
.19d7	69 00		adc #$00			adc 	#0
.19d9	85 09		sta $09				sta 	IFR0+IM1
.19db	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19dd	a9 80		lda #$80			lda 	#$80
.19df	85 0b		sta $0b				sta 	IFR0+IExp
.19e1	98		tya				tya	 								; skip over it.
.19e2	38		sec				sec
.19e3	71 18		adc ($18),y			adc 	(codePtr),y
.19e5	a8		tay				tay
.19e6	60		rts				rts
.19e7					_EXPUISRange:
.19e7	4c e5 26	jmp $26e5		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19ea					EXPUnaryLeft:
.19ea	20 30 1a	jsr $1a30			jsr 	EXPCommonStart 					; <string>,
.19ed	48		pha				pha 									; save string address on stack
.19ee	da		phx				phx
.19ef	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19f1	48		pha				pha
.19f2	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.19f5	80 44		bra $1a3b			bra 	EXPSubstringCommon
.19f7					EXPUnaryRight:
.19f7	20 30 1a	jsr $1a30			jsr 	EXPCommonStart 					; <string>,
.19fa	48		pha				pha 									; save string address on stack
.19fb	da		phx				phx
.19fc	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19fe	48		pha				pha
.19ff	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.1a02	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.1a04	68		pla				pla
.1a05	38		sec				sec
.1a06	e5 22		sbc $22				sbc 	zTemp0
.1a08	b0 02		bcs $1a0c			bcs 	_EUROffLeft
.1a0a	a9 00		lda #$00			lda 	#0
.1a0c					_EUROffLeft:
.1a0c	48		pha				pha 									; start pos
.1a0d	a9 ff		lda #$ff			lda 	#255
.1a0f	80 2a		bra $1a3b			bra 	EXPSubstringCommon
.1a11					EXPUnaryMid:
.1a11	20 30 1a	jsr $1a30			jsr 	EXPCommonStart 					; <string>,
.1a14	48		pha				pha 									; save string address on stack
.1a15	da		phx				phx
.1a16	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters start
.1a19	f0 12		beq $1a2d			beq 	_EUSError 						; 1 is left
.1a1b	3a		dec a				dec 	a 								; zero based.
.1a1c	48		pha				pha
.1a1d	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a1f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a21	f0 04		beq $1a27			beq 	_EUMLength 						; if so m is provided
.1a23	a9 ff		lda #$ff			lda 	#255 							; default m
.1a25	80 14		bra $1a3b			bra 	EXPSubstringCommon
.1a27					_EUMLength:
.1a27	c8		iny				iny 									; consume comma
.1a28	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.1a2b	80 0e		bra $1a3b			bra 	EXPSubstringCommon
.1a2d					_EUSError:
.1a2d	4c f6 26	jmp $26f6		jmp	ErrorV_value
.1a30					EXPCommonStart:
.1a30	20 35 17	jsr $1735			jsr 	EXPEvalString
.1a33	20 91 28	jsr $2891			jsr 	ERRCheckComma
.1a36	a5 08		lda $08				lda 	IFR0+IM0
.1a38	a6 09		ldx $09				ldx 	IFR0+IM1
.1a3a	60		rts				rts
.1a3b					EXPSubstringCommon:
.1a3b	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a3d	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; check right bracket.
.1a40	68		pla				pla 									; start position
.1a41	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a43	fa		plx				plx 									; get string address to zTemp2.
.1a44	86 27		stx $27				stx 	zTemp2+1
.1a46	68		pla				pla
.1a47	85 26		sta $26				sta 	zTemp2
.1a49	38		sec				sec 									; length - start is the max count of chars
.1a4a	b2 26		lda ($26)			lda 	(zTemp2)
.1a4c	e5 25		sbc $25				sbc 	zTemp1+1
.1a4e	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a50	b0 02		bcs $1a54			bcs 	_EXPSSNoTrim
.1a52	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a54					_EXPSSNoTrim:
.1a54	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a56	20 7f 29	jsr $297f			jsr 	StringTempAllocate 				; allocate memory for it.
.1a59	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a5b	f0 15		beq $1a72			beq 	_EXPSSExit
.1a5d	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a5f	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a61	b0 0f		bcs $1a72			bcs 	_EXPSSExit
.1a63	5a		phy				phy
.1a64	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a66	c8		iny				iny 									; +1 for the length byte
.1a67					_EXPSSCopy:
.1a67	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a69	20 b4 29	jsr $29b4			jsr 	StringTempWrite
.1a6c	c8		iny				iny
.1a6d	c6 24		dec $24				dec 	zTemp1
.1a6f	d0 f6		bne $1a67			bne 	_EXPSSCopy
.1a71	7a		ply				ply
.1a72					_EXPSSExit:
.1a72	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a73					EXPUnaryVal:
.1a73	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a76	20 89 28	jsr $2889			jsr 	ERRCheckRParen 					; )
.1a79	20 7d 1a	jsr $1a7d			jsr 	VALConversionZTemp0
.1a7c	60		rts				rts
.1a7d					VALConversionZTemp0:
.1a7d	5a		phy				phy
.1a7e	18		clc				clc
.1a7f	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a81	69 01		adc #$01			adc 	#1
.1a83	aa		tax				tax
.1a84	a5 23		lda $23				lda 	zTemp0+1
.1a86	69 00		adc #$00			adc 	#0
.1a88	a8		tay				tay
.1a89	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a8b	20 8f 30	jsr $308f			jsr 	IFloatStringToFloatR0 			; do conversion
.1a8e	b0 02		bcs $1a92			bcs 	_EUVError
.1a90	7a		ply				ply
.1a91	60		rts				rts
.1a92					_EUVError:
.1a92	4c f6 26	jmp $26f6		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1a95					AssemblerLookup:
>1a95	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,74,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,74,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,74,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,74,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,74,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,74,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,74,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,74,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,75,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,75,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,75,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,75,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,75,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,75,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,75,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,75
>1a9d	fb 1e 7c 00 4b 1e 7c 4a b8 1e 1e 00 41 1e 7c eb
>1aad	b9 1e f9 00 41 1e 7c 4a 7f 6a 00 00 7a 6a e1 eb
>1abd	23 6a e1 00 7a 6a e1 4a 97 6a 6a 00 7a 6a e1 eb
>1acd	a6 6a 7d 00 7a 6a e1 4a 38 62 00 00 00 62 0b eb
>1add	ec 62 0b 00 2e 62 0b 4a c3 62 62 00 00 62 0b eb
>1aed	bf 62 04 00 00 62 0b 4a 42 1d 00 00 3b 1d e7 eb
>1afd	14 1d e7 00 2e 1d e7 4a d3 1d 1d 00 3b 1d e7 eb
>1b0d	ac 1d 2c 00 2e 1d e7 4a 99 22 00 00 3a 22 39 f5
>1b1d	93 7a 54 00 3a 22 39 4b 45 22 22 00 3a 22 39 f5
>1b2d	5e 22 66 00 3b 22 3b 4b 19 01 18 00 19 01 18 f5
>1b3d	c6 01 c5 00 19 01 18 4b 55 01 01 00 19 01 18 f5
>1b4d	cc 01 61 00 19 01 18 4b f7 a8 00 00 f7 a8 7d f5
>1b5d	0f a8 92 0c f7 a8 7d 4b 75 a8 a8 00 00 a8 7d f5
>1b6d	ba a8 03 31 00 a8 7d 4b f6 48 00 00 f6 48 f9 f5
>1b7d	0e 48 dd 00 f6 48 f9 4b 8f 48 48 00 00 48 f9 f5
>1b8d	a7 48 2b 00 00 48 f9 4b

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1b95					BinaryPrecedence:
>1b95	02					.byte	 2	; $ef =
>1b96	02					.byte	 2	; $f0 <>
>1b97	02					.byte	 2	; $f1 <=
>1b98	02					.byte	 2	; $f2 <
>1b99	02					.byte	 2	; $f3 >=
>1b9a	02					.byte	 2	; $f4 >
>1b9b	01					.byte	 1	; $f5 XOR
>1b9c	01					.byte	 1	; $f6 OR
>1b9d	01					.byte	 1	; $f7 AND
>1b9e	04					.byte	 4	; $f8 DIV
>1b9f	04					.byte	 4	; $f9 MOD
>1ba0	04					.byte	 4	; $fa <<
>1ba1	04					.byte	 4	; $fb >>
>1ba2	04					.byte	 4	; $fc /
>1ba3	04					.byte	 4	; $fd *
>1ba4	03					.byte	 3	; $fe -
>1ba5	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1ba6					StructureOffsets:
>1ba6	01					.byte	1  	; $80 REPEAT
>1ba7	ff					.byte	255	; $81 UNTIL
>1ba8	01					.byte	1  	; $82 WHILE
>1ba9	ff					.byte	255	; $83 WEND
>1baa	01					.byte	1  	; $84 IF
>1bab	ff					.byte	255	; $85 ENDIF
>1bac	01					.byte	1  	; $86 DO
>1bad	ff					.byte	255	; $87 LOOP
>1bae	01					.byte	1  	; $88 PROC
>1baf	ff					.byte	255	; $89 ENDPROC
>1bb0	01					.byte	1  	; $8a FOR
>1bb1	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1bb2					StandardTokens:
>1bb2	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1bb9	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1bbf	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1bc5	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1bca	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1bcd	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1bd3	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1bd6	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1bdb	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1be0	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1be8	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1bec	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1bf1	00					.byte	$00                                     	; $8c [[end]]
>1bf2	00					.byte	$00                                     	; $8d [[shift]]
>1bf3	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1bf8	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1bfd	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1c00	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1c05	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1c09	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1c0f	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1c15	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1c1a	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1c1e	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1c22	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1c27	01 2c					.byte	$01,$2c                                 	; $99 ,
>1c29	01 3b					.byte	$01,$3b                                 	; $9a ;
>1c2b	01 3a					.byte	$01,$3a                                 	; $9b :
>1c2d	01 27					.byte	$01,$27                                 	; $9c '
>1c2f	01 29					.byte	$01,$29                                 	; $9d )
>1c31	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1c36	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1c3b	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1c40	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1c45	01 5b					.byte	$01,$5b                                 	; $a2 [
>1c47	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1c49	00					.byte	0											; $a4
>1c4a	00					.byte	0											; $a5
>1c4b	00					.byte	0											; $a6
>1c4c	00					.byte	0											; $a7
>1c4d	00					.byte	0											; $a8
>1c4e	00					.byte	0											; $a9
>1c4f	00					.byte	0											; $aa
>1c50	00					.byte	0											; $ab
>1c51	00					.byte	0											; $ac
>1c52	00					.byte	0											; $ad
>1c53	00					.byte	0											; $ae
>1c54	00					.byte	0											; $af
>1c55	00					.byte	0											; $b0
>1c56	00					.byte	0											; $b1
>1c57	00					.byte	0											; $b2
>1c58	00					.byte	0											; $b3
>1c59	00					.byte	0											; $b4
>1c5a	00					.byte	0											; $b5
>1c5b	00					.byte	0											; $b6
>1c5c	00					.byte	0											; $b7
>1c5d	00					.byte	0											; $b8
>1c5e	00					.byte	0											; $b9
>1c5f	00					.byte	0											; $ba
>1c60	00					.byte	0											; $bb
>1c61	00					.byte	0											; $bc
>1c62	00					.byte	0											; $bd
>1c63	00					.byte	0											; $be
>1c64	00					.byte	0											; $bf
>1c65	00					.byte	0											; $c0
>1c66	00					.byte	0											; $c1
>1c67	00					.byte	0											; $c2
>1c68	00					.byte	0											; $c3
>1c69	00					.byte	0											; $c4
>1c6a	00					.byte	0											; $c5
>1c6b	00					.byte	0											; $c6
>1c6c	00					.byte	0											; $c7
>1c6d	00					.byte	0											; $c8
>1c6e	00					.byte	0											; $c9
>1c6f	00					.byte	0											; $ca
>1c70	00					.byte	0											; $cb
>1c71	00					.byte	0											; $cc
>1c72	00					.byte	0											; $cd
>1c73	00					.byte	0											; $ce
>1c74	00					.byte	0											; $cf
>1c75	00					.byte	0											; $d0
>1c76	00					.byte	0											; $d1
>1c77	00					.byte	0											; $d2
>1c78	00					.byte	0											; $d3
>1c79	00					.byte	0											; $d4
>1c7a	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1c80	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1c86	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1c8e	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1c95	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1c9b	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1ca1	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1ca6	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1cab	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1cb0	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1cb5	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1cba	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1cc0	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1cc5	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1ccd	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1cd4	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1cd9	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1cde	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1ce4	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1ce9	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1cef	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1cf4	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1cfa	01 28					.byte	$01,$28                                 	; $eb (
>1cfc	01 24					.byte	$01,$24                                 	; $ec $
>1cfe	00					.byte	$00                                     	; $ed [[decimal]]
>1cff	00					.byte	$00                                     	; $ee [[string]]
>1d00	01 3d					.byte	$01,$3d                                 	; $ef =
>1d02	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1d05	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1d08	01 3c					.byte	$01,$3c                                 	; $f2 <
>1d0a	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1d0d	01 3e					.byte	$01,$3e                                 	; $f4 >
>1d0f	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1d13	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1d16	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1d1a	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1d1e	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1d22	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1d25	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1d28	01 2f					.byte	$01,$2f                                 	; $fc /
>1d2a	01 2a					.byte	$01,$2a                                 	; $fd *
>1d2c	01 2d					.byte	$01,$2d                                 	; $fe -
>1d2e	01 2b					.byte	$01,$2b                                 	; $ff +
>1d30	ff					.byte	$FF
.1d31					AlternateTokens:
>1d31	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1d37	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1d3b	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1d3f	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1d44	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1d48	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1d4f	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1d54	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1d59	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1d5e	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1d64	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1d69	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1d70	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1d78	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1d7c	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1d7d					VectorTable:
>1d7d	c4 25					.word	Command_REPEAT           ; $80 REPEAT
>1d7f	cd 25					.word	Command_UNTIL            ; $81 UNTIL
>1d81	a7 26					.word	Command_WHILE            ; $82 WHILE
>1d83	c8 26					.word	Command_WEND             ; $83 WEND
>1d85	9a 25					.word	IfCommand                ; $84 IF
>1d87	c3 25					.word	EndIf                    ; $85 ENDIF
>1d89	1c 24					.word	Command_DO               ; $86 DO
>1d8b	34 24					.word	Command_LOOP             ; $87 LOOP
>1d8d	4b 15					.word	NoExec08                 ; $88 PROC
>1d8f	10 24					.word	Command_ENDPROC          ; $89 ENDPROC
>1d91	3d 24					.word	Command_FOR              ; $8a FOR
>1d93	ca 24					.word	Command_NEXT             ; $8b NEXT
>1d95	cc 14					.word	RUNEndOfLine             ; $8c [[END]]
>1d97	28 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1d99	bc 25					.word	ElseCode                 ; $8e ELSE
>1d9b	4b 15					.word	NoExec01                 ; $8f THEN
>1d9d	4b 15					.word	NoExec02                 ; $90 TO
>1d9f	4b 15					.word	NoExec03                 ; $91 STEP
>1da1	b7 12					.word	CommandLET               ; $92 LET
>1da3	0c 12					.word	Command_Print            ; $93 PRINT
>1da5	05 12					.word	Command_Input            ; $94 INPUT
>1da7	d4 23					.word	Command_CALL             ; $95 CALL
>1da9	36 15					.word	Command_Sys              ; $96 SYS
>1dab	85 14					.word	Command_REM              ; $97 REM
>1dad	25 24					.word	Command_EXIT             ; $98 EXIT
>1daf	4b 15					.word	NoExec04                 ; $99 ,
>1db1	4b 15					.word	NoExec05                 ; $9a ;
>1db3	4b 15					.word	NoExec06                 ; $9b :
>1db5	85 14					.word	Command_REM2             ; $9c '
>1db7	4b 15					.word	NoExec07                 ; $9d )
>1db9	ae 11					.word	Command_Poke             ; $9e POKE
>1dbb	ab 11					.word	Command_Doke             ; $9f DOKE
>1dbd	11 14					.word	Command_READ             ; $a0 READ
>1dbf	78 14					.word	Command_DATA             ; $a1 DATA
>1dc1	06 2a					.word	NotImplemented           ; $a2 [
>1dc3	06 2a					.word	NotImplemented           ; $a3 ]
>1dc5	06 2a					.word	NotImplemented           ; $a4
>1dc7	06 2a					.word	NotImplemented           ; $a5
>1dc9	06 2a					.word	NotImplemented           ; $a6
>1dcb	06 2a					.word	NotImplemented           ; $a7
>1dcd	06 2a					.word	NotImplemented           ; $a8
>1dcf	06 2a					.word	NotImplemented           ; $a9
>1dd1	06 2a					.word	NotImplemented           ; $aa
>1dd3	06 2a					.word	NotImplemented           ; $ab
>1dd5	06 2a					.word	NotImplemented           ; $ac
>1dd7	06 2a					.word	NotImplemented           ; $ad
>1dd9	06 2a					.word	NotImplemented           ; $ae
>1ddb	06 2a					.word	NotImplemented           ; $af
>1ddd	06 2a					.word	NotImplemented           ; $b0
>1ddf	06 2a					.word	NotImplemented           ; $b1
>1de1	06 2a					.word	NotImplemented           ; $b2
>1de3	06 2a					.word	NotImplemented           ; $b3
>1de5	06 2a					.word	NotImplemented           ; $b4
>1de7	06 2a					.word	NotImplemented           ; $b5
>1de9	06 2a					.word	NotImplemented           ; $b6
>1deb	06 2a					.word	NotImplemented           ; $b7
>1ded	06 2a					.word	NotImplemented           ; $b8
>1def	06 2a					.word	NotImplemented           ; $b9
>1df1	06 2a					.word	NotImplemented           ; $ba
>1df3	06 2a					.word	NotImplemented           ; $bb
>1df5	06 2a					.word	NotImplemented           ; $bc
>1df7	06 2a					.word	NotImplemented           ; $bd
>1df9	06 2a					.word	NotImplemented           ; $be
>1dfb	06 2a					.word	NotImplemented           ; $bf
>1dfd	06 2a					.word	NotImplemented           ; $c0
>1dff	06 2a					.word	NotImplemented           ; $c1
>1e01	06 2a					.word	NotImplemented           ; $c2
>1e03	06 2a					.word	NotImplemented           ; $c3
>1e05	06 2a					.word	NotImplemented           ; $c4
>1e07	06 2a					.word	NotImplemented           ; $c5
>1e09	06 2a					.word	NotImplemented           ; $c6
>1e0b	06 2a					.word	NotImplemented           ; $c7
>1e0d	06 2a					.word	NotImplemented           ; $c8
>1e0f	06 2a					.word	NotImplemented           ; $c9
>1e11	06 2a					.word	NotImplemented           ; $ca
>1e13	06 2a					.word	NotImplemented           ; $cb
>1e15	06 2a					.word	NotImplemented           ; $cc
>1e17	06 2a					.word	NotImplemented           ; $cd
>1e19	06 2a					.word	NotImplemented           ; $ce
>1e1b	06 2a					.word	NotImplemented           ; $cf
>1e1d	06 2a					.word	NotImplemented           ; $d0
>1e1f	06 2a					.word	NotImplemented           ; $d1
>1e21	06 2a					.word	NotImplemented           ; $d2
>1e23	06 2a					.word	NotImplemented           ; $d3
>1e25	06 2a					.word	NotImplemented           ; $d4
>1e27	b5 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1e29	a7 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1e2b	f7 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1e2d	ea 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1e2f	11 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1e31	a7 19					.word	EXPUnaryStr              ; $da STR$(
>1e33	73 1a					.word	EXPUnaryVal              ; $db VAL(
>1e35	74 19					.word	EXPUnarySgn              ; $dc SGN(
>1e37	25 18					.word	EXPUnaryAbs              ; $dd ABS(
>1e39	f9 18					.word	EXPUnaryLen              ; $de LEN(
>1e3b	8a 19					.word	EXPUnarySqr              ; $df SQR(
>1e3d	45 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1e3f	2f 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1e41	db 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1e43	06 2a					.word	NotImplemented           ; $e3 EVENT(
>1e45	06 2a					.word	NotImplemented           ; $e4 TIME
>1e47	ef 18					.word	EXPUnaryInt              ; $e5 INT(
>1e49	d1 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1e4b	56 18					.word	EXPUnaryDec              ; $e7 DEC(
>1e4d	99 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1e4f	0e 19					.word	EXPUnaryRnd              ; $e9 RND(
>1e51	1e 19					.word	ExpUnaryRand             ; $ea RAND(
>1e53	07 19					.word	EXPUnaryParenthesis      ; $eb (
>1e55	cd 18					.word	EXPUnaryNull             ; $ec $
>1e57	a4 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1e59	cf 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1e5b	08 16					.word	EXPCompareEqual          ; $ef =
>1e5d	23 16					.word	EXPCompareNotEqual       ; $f0 <>
>1e5f	2c 16					.word	EXPCompareLessEqual      ; $f1 <=
>1e61	11 16					.word	EXPCompareLess           ; $f2 <
>1e63	35 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1e65	1a 16					.word	EXPCompareGreater        ; $f4 >
>1e67	b5 15					.word	EXPBinXor                ; $f5 XOR
>1e69	a9 15					.word	EXPBinOr                 ; $f6 OR
>1e6b	9d 15					.word	EXPBinAnd                ; $f7 AND
>1e6d	75 15					.word	EXPBinIDiv               ; $f8 DIV
>1e6f	86 15					.word	EXPBinIMod               ; $f9 MOD
>1e71	80 16					.word	EXPBinLeft               ; $fa <<
>1e73	88 16					.word	EXPBinRight              ; $fb >>
>1e75	69 15					.word	EXPBinFDiv               ; $fc /
>1e77	60 15					.word	EXPBinMul                ; $fd *
>1e79	57 15					.word	EXPBinSub                ; $fe -
>1e7b	4e 15					.word	EXPBinAdd                ; $ff +
.1e7d					AlternateVectorTable:
>1e7d	1b 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1e7f	08 14					.word	Command_NEW              ; $8d81 NEW
>1e81	c0 14					.word	Command_RUN              ; $8d82 RUN
>1e83	33 15					.word	Command_STOP             ; $8d83 STOP
>1e85	30 15					.word	Command_END              ; $8d84 END
>1e87	0d 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1e89	31 13					.word	Command_LIST             ; $8d86 LIST
>1e8b	06 2a					.word	NotImplemented           ; $8d87 SAVE
>1e8d	06 2a					.word	NotImplemented           ; $8d88 LOAD
>1e8f	80 25					.word	Command_GOSUB            ; $8d89 GOSUB
>1e91	d5 11					.word	Command_GOTO             ; $8d8a GOTO
>1e93	8e 25					.word	Command_RETURN           ; $8d8b RETURN
>1e95	92 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1e97	8f 10					.word	CommandDIM               ; $8d8d DIM

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1e99					TOKDetokenise:
.1e99	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1e9b	84 27		sty $27				sty 	zTemp2+1
.1e9d	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1ea0					_TOKDLoop:
.1ea0	20 cf 1e	jsr $1ecf			jsr 	TOKDGet 					; get next
.1ea3	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1ea5	f0 26		beq $1ecd			beq 	_TOKDExit
.1ea7	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1ea9	f0 1d		beq $1ec8			beq 	_TOKDDataItem
.1eab	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1ead	f0 19		beq $1ec8			beq 	_TOKDDataItem
.1eaf	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1eb1	10 05		bpl $1eb8			bpl 	_TOKDNotToken
.1eb3	20 99 1f	jsr $1f99			jsr 	TOKDToken 					; token to text.
.1eb6	80 e8		bra $1ea0			bra 	_TOKDLoop
.1eb8					_TOKDNotToken:
.1eb8	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1eba	90 05		bcc $1ec1			bcc 	_TOKDNotIdentifier
.1ebc	20 0a 1f	jsr $1f0a			jsr 	TOKDIdentifier
.1ebf	80 df		bra $1ea0			bra 	_TOKDLoop
.1ec1					_TOKDNotIdentifier:
.1ec1	a0 0a		ldy #$0a			ldy 	#10
.1ec3	20 53 1f	jsr $1f53			jsr 	TOKDInteger
.1ec6	80 d8		bra $1ea0			bra 	_TOKDLoop
.1ec8					_TOKDDataItem:
.1ec8	20 e5 1e	jsr $1ee5			jsr 	TOKDDataItem
.1ecb	80 d3		bra $1ea0			bra 	_TOKDLoop
.1ecd					_TOKDExit:
.1ecd	18		clc				clc
.1ece	60		rts				rts
.1ecf	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1ed1	e6 26		inc $26				inc 	zTemp2
.1ed3	d0 02		bne $1ed7			bne 	_TKDGExit
.1ed5	e6 27		inc $27				inc 	zTemp2+1
.1ed7					_TKDGExit:
.1ed7	60		rts				rts
.1ed8					TOKDOutput:
.1ed8	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1edb	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1ede					TOKSetDetokeniseOutput:
.1ede	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1ee1	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1ee4	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1ee5					TOKDDataItem:
.1ee5	a8		tay				tay 								; type in Y
.1ee6	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1ee8	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1eea	f0 02		beq $1eee			beq 	_TOKDDIsString
.1eec	a9 2e		lda #$2e			lda 	#'.'
.1eee					_TOKDDIsString:
.1eee	20 d8 1e	jsr $1ed8			jsr 	TOKDOutput 					; dump it
.1ef1	20 cf 1e	jsr $1ecf			jsr 	TOKDGet 					; get length into X
.1ef4	aa		tax				tax
.1ef5					_TOKDDOutput:
.1ef5	ca		dex				dex 								; are we complete
.1ef6	30 08		bmi $1f00			bmi 	_TOKDDEnd
.1ef8	20 cf 1e	jsr $1ecf			jsr 	TOKDGet 					; get character and output it
.1efb	20 d8 1e	jsr $1ed8			jsr 	TOKDOutput
.1efe	80 f5		bra $1ef5			bra 	_TOKDDOutput
.1f00					_TOKDDEnd:
.1f00	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1f02	d0 05		bne $1f09			bne 	_TOKDDNotString
.1f04	a9 22		lda #$22			lda 	#'"'
.1f06	20 d8 1e	jsr $1ed8			jsr 	TOKDOutput
.1f09					_TOKDDNotString:
.1f09	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1f0a					TOKDIdentifier:
.1f0a	a0 ff		ldy #$ff			ldy 	#$FF
.1f0c	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1f0f					_TOKDLoop:
.1f0f	a8		tay				tay 								; token in Y
.1f10	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1f12	c0 64		cpy #$64			cpy 	#$64
.1f14	f0 11		beq $1f27			beq 	_TOKDIOutput
.1f16	a9 5f		lda #$5f			lda 	#'_'
.1f18	c0 65		cpy #$65			cpy 	#$65
.1f1a	f0 0b		beq $1f27			beq 	_TOKDIOutput
.1f1c	98		tya				tya 								; handle a-z
.1f1d	18		clc				clc
.1f1e	69 21		adc #$21			adc	 	#$21
.1f20	c0 5a		cpy #$5a			cpy 	#$5A
.1f22	90 03		bcc $1f27			bcc 	_TOKDIOutput
.1f24	38		sec				sec 								; handle 0-9
.1f25	e9 4b		sbc #$4b			sbc 	#$4B
.1f27					_TOKDIOutput:
.1f27	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1f2a	10 08		bpl $1f34			bpl 	_TOKDINoSpacing
.1f2c	48		pha				pha
.1f2d	20 d6 1f	jsr $1fd6			jsr 	TOKDSpacing
.1f30	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1f33	68		pla				pla
.1f34					_TOKDINoSpacing:
.1f34	20 d8 1e	jsr $1ed8			jsr 	TOKDOutput
.1f37	20 cf 1e	jsr $1ecf			jsr 	TOKDGet 					; get next token
.1f3a	c9 7c		cmp #$7c			cmp 	#$7C
.1f3c	90 d1		bcc $1f0f			bcc 	_TOKDLoop
.1f3e	f0 12		beq $1f52			beq 	_TOKDIExit 					; it's a number, no tail.
.1f40	4a		lsr a				lsr 	a 							; string ?
.1f41	90 07		bcc $1f4a			bcc 	_TOKDICheckArray
.1f43	48		pha				pha
.1f44	a9 24		lda #$24			lda 	#"$"
.1f46	20 d8 1e	jsr $1ed8			jsr 	TOKDOutput
.1f49	68		pla				pla
.1f4a					_TOKDICheckArray:
.1f4a	4a		lsr a				lsr 	a 							; array ?
.1f4b	90 05		bcc $1f52			bcc 	_TOKDIExit
.1f4d	a9 28		lda #$28			lda 	#"("
.1f4f	20 d8 1e	jsr $1ed8			jsr 	TOKDOutput
.1f52					_TOKDIExit:
.1f52	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1f53					TOKDInteger:
.1f53	5a		phy				phy 								; save base
.1f54	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1f56	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.1f59					_TOKDILoop:
.1f59	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1f5b	c9 40		cmp #$40			cmp 	#$40
.1f5d	b0 1d		bcs $1f7c			bcs 	_TOKDIHaveInteger
.1f5f	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1f61	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.1f64	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.1f67	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.1f6a	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.1f6d	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.1f70	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.1f73	20 cf 1e	jsr $1ecf			jsr 	TOKDGet 					; OR byte in.
.1f76	05 08		ora $08				ora 	IFR0+IM0
.1f78	85 08		sta $08				sta 	IFR0+IM0
.1f7a	80 dd		bra $1f59			bra 	_TOKDILoop
.1f7c					_TOKDIHaveInteger:
.1f7c	7a		ply				ply 								; restore base
.1f7d	98		tya				tya 								; base in A
.1f7e	20 cd 2f	jsr $2fcd			jsr 	IFloatIntegerToStringR0
.1f81	86 22		stx $22				stx 	zTemp0
.1f83	84 23		sty $23				sty 	zTemp0+1
.1f85	b2 22		lda ($22)			lda 	(zTemp0)
.1f87	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.1f89	b1 22		lda ($22),y			lda 	(zTemp0),y
.1f8b	20 d6 1f	jsr $1fd6			jsr 	TOKDSpacing 				; check spacing okay.
.1f8e					_TOKDOutput:
.1f8e	b1 22		lda ($22),y			lda 	(zTemp0),y
.1f90	20 d8 1e	jsr $1ed8			jsr 	TOKDOutput
.1f93	c8		iny				iny
.1f94	b1 22		lda ($22),y			lda 	(zTemp0),y
.1f96	d0 f6		bne $1f8e			bne 	_TOKDOutput
.1f98	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1f99					TOKDToken:
.1f99	a2 b2		ldx #$b2			ldx 	#StandardTokens & $FF 		; standard table
.1f9b	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.1f9d	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.1f9f	d0 07		bne $1fa8			bne 	_TOKDSearch
.1fa1	20 cf 1e	jsr $1ecf			jsr 	TOKDGet 					; get next
.1fa4	a2 31		ldx #$31			ldx 	#AlternateTokens & $FF 		; alt table
.1fa6	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.1fa8					_TOKDSearch:
.1fa8	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1faa	84 23		sty $23				sty 	zTemp0+1
.1fac	aa		tax				tax 								; token ID in X.
.1fad					_TOKDFind:
.1fad	ca		dex				dex 								; reached the start
.1fae	10 0d		bpl $1fbd			bpl 	_TOKDFound
.1fb0	38		sec				sec 								; go to next entry
.1fb1	b2 22		lda ($22)			lda 	(zTemp0)
.1fb3	65 22		adc $22				adc 	zTemp0
.1fb5	85 22		sta $22				sta 	zTemp0
.1fb7	90 f4		bcc $1fad			bcc 	_TOKDFind
.1fb9	e6 23		inc $23				inc 	zTemp0+1
.1fbb	80 f0		bra $1fad			bra 	_TOKDFind
.1fbd					_TOKDFound:
.1fbd	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1fbf	f0 14		beq $1fd5			beq 	_TOKDExit
.1fc1	aa		tax				tax
.1fc2	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1fc4	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing first character,
.1fc6	20 d6 1f	jsr $1fd6			jsr 	TOKDSpacing
.1fc9					_TOKDOutput:
.1fc9	b1 22		lda ($22),y			lda 	(zTemp0),y
.1fcb	20 8f 23	jsr $238f			jsr 	TOKToLower
.1fce	20 d8 1e	jsr $1ed8			jsr 	TOKDOutput
.1fd1	c8		iny				iny
.1fd2	ca		dex				dex
.1fd3	d0 f4		bne $1fc9			bne 	_TOKDOutput
.1fd5					_TOKDExit:
.1fd5	60		rts				rts
.1fd6					TOKDSpacing:
.1fd6	20 a6 23	jsr $23a6			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1fd9	90 0d		bcc $1fe8			bcc 	_TOKDSExit
.1fdb	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1fde	20 a6 23	jsr $23a6			jsr 	TOKIsIdentifierElement
.1fe1	90 05		bcc $1fe8			bcc 	_TOKDSExit
.1fe3	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1fe5	20 d8 1e	jsr $1ed8			jsr 	TOKDOutput
.1fe8					_TOKDSExit:
.1fe8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1fe9					PGMDeleteLine:
.1fe9	20 9c 20	jsr $209c			jsr 	PGMEndProgram 				; end of program into zTemp0
.1fec	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1fee	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1ff1	85 25		sta $25				sta 	zTemp1+1
.1ff3					_PGMDLoop:
.1ff3	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1ff5	38		sec				sec
.1ff6	f0 3a		beq $2032			beq 	_PGMDExit
.1ff8	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1ffa	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ffc	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1fff	d0 08		bne $2009			bne 	_PGMDNext
.2001	c8		iny				iny
.2002	b1 24		lda ($24),y			lda 	(zTemp1),y
.2004	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.2007	f0 0d		beq $2016			beq 	_PGMDDelete
.2009					_PGMDNext:
.2009	18		clc				clc
.200a	b2 24		lda ($24)			lda 	(zTemp1)
.200c	65 24		adc $24				adc 	zTemp1
.200e	85 24		sta $24				sta 	zTemp1
.2010	90 e1		bcc $1ff3			bcc 	_PGMDLoop
.2012	e6 25		inc $25				inc 	zTemp1+1
.2014	80 dd		bra $1ff3			bra 	_PGMDLoop
.2016					_PGMDDelete:
.2016	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.2018	a8		tay				tay
.2019					_PGMDCopy:
.2019	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.201b	92 24		sta ($24)			sta 	(zTemp1)
.201d	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.201f	c5 22		cmp $22				cmp 	zTemp0
.2021	d0 07		bne $202a			bne 	_PGMDNext2
.2023	a5 25		lda $25				lda 	zTemp1+1
.2025	c5 23		cmp $23				cmp 	zTemp0+1
.2027	18		clc				clc
.2028	f0 08		beq $2032			beq 	_PGMDExit
.202a					_PGMDNext2:
.202a	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.202c	d0 eb		bne $2019			bne 	_PGMDCopy
.202e	e6 25		inc $25				inc 	zTemp1+1
.2030	80 e7		bra $2019			bra 	_PGMDCopy
.2032					_PGMDExit:
.2032	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.2033					PGMInsertLine:
.2033	20 9c 20	jsr $209c			jsr 	PGMEndProgram 				; end of program into zTemp0
.2036	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.2038	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.203b	85 25		sta $25				sta 	zTemp1+1
.203d					_PGMILoop:
.203d	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.203f	f0 1c		beq $205d			beq 	_PGMIInsert
.2041	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.2043	b1 24		lda ($24),y			lda 	(zTemp1),y
.2045	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2048	c8		iny				iny
.2049	b1 24		lda ($24),y			lda 	(zTemp1),y
.204b	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.204e	b0 0d		bcs $205d			bcs 	_PGMIInsert 				; insert here.
.2050	18		clc				clc
.2051	b2 24		lda ($24)			lda 	(zTemp1)
.2053	65 24		adc $24				adc 	zTemp1
.2055	85 24		sta $24				sta 	zTemp1
.2057	90 e4		bcc $203d			bcc 	_PGMILoop
.2059	e6 25		inc $25				inc 	zTemp1+1
.205b	80 e0		bra $203d			bra 	_PGMILoop
.205d					_PGMIInsert:
.205d	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.2060					_PGMIInsertLoop:
.2060	b2 22		lda ($22)			lda 	(zTemp0)
.2062	91 22		sta ($22),y			sta 	(zTemp0),y
.2064	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.2066	c5 22		cmp $22				cmp 	zTemp0
.2068	d0 06		bne $2070			bne 	_PGMINext
.206a	a5 25		lda $25				lda 	zTemp1+1
.206c	c5 23		cmp $23				cmp 	zTemp0+1
.206e	f0 0a		beq $207a			beq 	_PGMIInserted
.2070					_PGMINext:
.2070	a5 22		lda $22				lda 	zTemp0
.2072	d0 02		bne $2076			bne 	_PGMINoBorrow
.2074	c6 23		dec $23				dec 	zTemp0+1
.2076					_PGMINoBorrow:
.2076	c6 22		dec $22				dec 	zTemp0
.2078	80 e6		bra $2060			bra 	_PGMIInsertLoop
.207a					_PGMIInserted:
.207a	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.207c					_PGMICopyLoop:
.207c	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.207f	91 24		sta ($24),y			sta 	(zTemp1),y
.2081	c8		iny				iny
.2082	cc 00 04	cpy $0400			cpy 	TOKLineSize
.2085	d0 f5		bne $207c			bne 	_PGMICopyLoop
.2087	18		clc				clc
.2088	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.2089					PGMSetBaseAddress:
.2089	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.208c	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.208f	60		rts				rts
.2090					PGMNewProgram:
.2090	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.2092	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.2095	85 23		sta $23				sta 	zTemp0+1
.2097	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.2099	92 22		sta ($22)			sta 	(zTemp0)
.209b	60		rts				rts
.209c					PGMEndProgram:
.209c	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.209e	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.20a1	85 23		sta $23				sta 	zTemp0+1
.20a3					_PGMEPLoop:
.20a3	b2 22		lda ($22)			lda 	(zTemp0) 					; reached end ?
.20a5	f0 0b		beq $20b2			beq 	_PGMEPExit
.20a7	18		clc				clc 								; no, advance to next
.20a8	65 22		adc $22				adc 	zTemp0
.20aa	85 22		sta $22				sta 	zTemp0
.20ac	90 f5		bcc $20a3			bcc 	_PGMEPLoop
.20ae	e6 23		inc $23				inc 	zTemp0+1
.20b0	80 f1		bra $20a3			bra 	_PGMEPLoop
.20b2					_PGMEPExit:
.20b2	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.20b3					TOKResetElement:
.20b3	9c 1c 05	stz $051c			stz 	TOKElement
.20b6	60		rts				rts
.20b7					TOKWriteElement:
.20b7	da		phx				phx
.20b8	ae 1c 05	ldx $051c			ldx 	TOKElement
.20bb	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.20be	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.20c1	fa		plx				plx
.20c2	ee 1c 05	inc $051c			inc 	TOKElement
.20c5	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.20c6					TOKTokeniseConstant:
.20c6	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.20c8	48		pha				pha 								; save on stack
.20c9	29 c0		and #$c0			and 	#$C0
.20cb	05 09		ora $09				ora 	IFR0+IM1
.20cd	05 0a		ora $0a				ora 	IFR0+IM2
.20cf	f0 10		beq $20e1			beq 	_TTCLess
.20d1	da		phx				phx
.20d2	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.20d4					_TTCShiftRight:
.20d4	46 0a		lsr $0a				lsr 	IFR0+IM2
.20d6	66 09		ror $09				ror 	IFR0+IM1
.20d8	66 08		ror $08				ror 	IFR0+IM0
.20da	ca		dex				dex
.20db	d0 f7		bne $20d4			bne 	_TTCShiftRight
.20dd	fa		plx				plx
.20de	20 c6 20	jsr $20c6			jsr 	TOKTokeniseConstant
.20e1					_TTCLess:
.20e1	68		pla				pla
.20e2	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.20e4	20 83 21	jsr $2183			jsr 	TOKWriteA
.20e7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.20e8					TOKTokeniseDecimals:
.20e8	20 96 21	jsr $2196			jsr 	TOKGetNext 					; consume the .
.20eb	20 13 23	jsr $2313			jsr 	TOKExtractInteger 			; pull an integer out as text.
.20ee	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.20f0	20 83 21	jsr $2183			jsr 	TOKWriteA
.20f3	20 f8 20	jsr $20f8			jsr 	TOKOutputElementBuffer 		; then the buffer
.20f6	18		clc				clc
.20f7	60		rts				rts
.20f8					TOKOutputElementBuffer:
.20f8	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.20fb	20 83 21	jsr $2183			jsr 	TOKWriteA
.20fe	a8		tay				tay 								; put in Y
.20ff	f0 0c		beq $210d			beq 	_TOEExit 					; exit if empty which is okay.
.2101	a2 01		ldx #$01			ldx 	#1
.2103					_TOELoop:
.2103	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.2106	20 83 21	jsr $2183			jsr 	TOKWriteA
.2109	e8		inx				inx
.210a	88		dey				dey
.210b	d0 f6		bne $2103			bne 	_TOELoop
.210d					_TOEExit:
.210d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.210e					TOKTokenise:
.210e	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.2111	8e 1c 06	stx $061c			stx 	TOKDataSource
.2114	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2116	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.2119	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.211b	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.211e	9c 01 04	stz $0401			stz 	TOKLineNumber
.2121	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2124					_TOKMainLoop:
.2124	20 92 21	jsr $2192			jsr 	TOKGet 						; what follows.
.2127	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.2129	f0 4f		beq $217a			beq 	_TOKExit
.212b	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.212d	d0 05		bne $2134			bne 	_TOKElement
.212f	20 96 21	jsr $2196			jsr 	TOKGetNext
.2132	80 f0		bra $2124			bra 	_TOKMainLoop
.2134					_TOKElement:
.2134	20 9a 23	jsr $239a			jsr 	TOKIsDigit 					; is it 0..9
.2137	90 0a		bcc $2143			bcc 	_TOKNotDigit
.2139	20 ea 22	jsr $22ea			jsr 	TOKTokeniseInteger 			; get integer
.213c	b0 43		bcs $2181			bcs 	_TOKFail 					; did it fail ?
.213e	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2141	80 e1		bra $2124			bra 	_TOKMainLoop
.2143					_TOKNotDigit:
.2143	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2146	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.2148	d0 07		bne $2151			bne 	_TOKNotHex
.214a	20 ec 21	jsr $21ec			jsr 	TOKTokeniseHexadecimal
.214d	b0 32		bcs $2181			bcs 	_TOKFail
.214f	80 d3		bra $2124			bra 	_TOKMainLoop
.2151					_TOKNotHex:
.2151	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2153	d0 07		bne $215c			bne 	_TOKNotDecimal
.2155	20 e8 20	jsr $20e8			jsr 	TOKTokeniseDecimals
.2158	b0 27		bcs $2181			bcs 	_TOKFail
.215a	80 c8		bra $2124			bra 	_TOKMainLoop
.215c					_TOKNotDecimal:
.215c	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.215e	d0 07		bne $2167			bne 	_TOKNotString
.2160	20 61 23	jsr $2361			jsr 	TOKTokeniseString
.2163	b0 1c		bcs $2181			bcs 	_TOKFail
.2165	80 bd		bra $2124			bra 	_TOKMainLoop
.2167					_TOKNotString:
.2167	20 b7 23	jsr $23b7			jsr 	TOKIsAlpha 					; identifier ?
.216a	b0 07		bcs $2173			bcs 	_TOKIdentifier
.216c	20 27 23	jsr $2327			jsr 	TOKTokenisePunctuation 		; punctuation
.216f	b0 10		bcs $2181			bcs 	_TOKFail
.2171	80 b1		bra $2124			bra 	_TOKMainLoop
.2173					_TOKIdentifier:
.2173	20 26 22	jsr $2226			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2176	b0 09		bcs $2181			bcs 	_TOKFail
.2178	80 aa		bra $2124			bra 	_TOKMainLoop
.217a					_TOKExit:
.217a	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.217c	20 83 21	jsr $2183			jsr 	TOKWriteA
.217f	18		clc				clc									; return with carry set.
.2180	60		rts				rts
.2181					_TOKFail:
.2181	38		sec				sec
.2182	60		rts				rts
.2183					TOKWriteA:
.2183	da		phx				phx
.2184	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2187	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.218a	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.218d	fa		plx				plx
.218e	ee 00 04	inc $0400			inc 	TOKLineSize
.2191	60		rts				rts
.2192					TOKGet:
.2192	18		clc				clc
.2193	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.2196					TOKGetNext:
.2196	38		sec				sec
.2197	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.219a					TOKFindToken:
.219a	a2 b2		ldx #$b2			ldx 	#StandardTokens & $FF 		; do this table
.219c	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.219e	20 b6 21	jsr $21b6			jsr 	TOKFindTokenXY 				; find it, or not
.21a1	b0 0d		bcs $21b0			bcs 	_TOKFound1
.21a3	a2 31		ldx #$31			ldx 	#AlternateTokens & $FF 		; do the alternate table
.21a5	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.21a7	20 b6 21	jsr $21b6			jsr 	TOKFindTokenXY 				; find it, or not
.21aa	90 08		bcc $21b4			bcc 	_TOKFTFail 					; not ....
.21ac	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.21ae	38		sec				sec
.21af	60		rts				rts
.21b0					_TOKFound1:
.21b0	a2 00		ldx #$00			ldx 	#0
.21b2	38		sec				sec
.21b3	60		rts				rts
.21b4					_TOKFTFail
.21b4	18		clc				clc
.21b5	60		rts				rts
.21b6					TOKFindTokenXY:
.21b6	86 22		stx $22				stx 	zTemp0 						; save token table address
.21b8	84 23		sty $23				sty 	zTemp0+1
.21ba	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.21bc	8d 1f 06	sta $061f			sta 	TOKCurrent
.21bf					_TOKFindLoop:
.21bf	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.21c1	18		clc				clc 		 						; clear carry in case of fail
.21c2	30 17		bmi $21db			bmi 	_TOKExit 					; end of table, fail, so return CC.
.21c4	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.21c7	d0 13		bne $21dc			bne 	_TOKNext 					; different, try next.
.21c9	aa		tax				tax 								; number of chars to compare.
.21ca	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.21cc					_TOKCompare:
.21cc	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.21ce	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.21d1	d0 09		bne $21dc			bne 	_TOKNext 					; different ? try next
.21d3	c8		iny				iny 								; compare next two
.21d4	ca		dex				dex
.21d5	d0 f5		bne $21cc			bne 	_TOKCompare 				; until done X characters.
.21d7	38		sec				sec
.21d8	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.21db					_TOKExit:
.21db	60		rts				rts
.21dc					_TOKNext:
.21dc	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.21df	38		sec				sec 								; add length+1 to ptr
.21e0	b2 22		lda ($22)			lda 	(zTemp0)
.21e2	65 22		adc $22				adc 	zTemp0
.21e4	85 22		sta $22				sta 	zTemp0
.21e6	90 d7		bcc $21bf			bcc 	_TOKFindLoop
.21e8	e6 23		inc $23				inc 	zTemp0+1
.21ea	80 d3		bra $21bf			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.21ec					TOKTokeniseHexadecimal:
.21ec	20 96 21	jsr $2196			jsr 	TOKGetNext 					; consume the $
.21ef	a2 08		ldx #$08			ldx 	#IFR0
.21f1	20 2b 32	jsr $322b			jsr 	IFloatSetZero 				; set R0 = 0
.21f4					_TTHLoop:
.21f4	20 92 21	jsr $2192			jsr 	TOKGet 						; keep getting and copying while numeric.
.21f7	20 c4 23	jsr $23c4			jsr 	TOKIsHexadecimal
.21fa	90 20		bcc $221c			bcc 	_TTHDone
.21fc	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.21fe	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.2201	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.2204	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.2207	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.220a	20 96 21	jsr $2196			jsr 	TOKGetNext
.220d	38		sec				sec 								; convert to decimal.
.220e	e9 30		sbc #$30			sbc 	#48
.2210	c9 0a		cmp #$0a			cmp 	#10
.2212	90 02		bcc $2216			bcc 	_TTHNotAlpha
.2214	e9 07		sbc #$07			sbc 	#7
.2216					_TTHNotAlpha:
.2216	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2218	85 08		sta $08				sta 	IFR0+IM0
.221a	80 d8		bra $21f4			bra 	_TTHLoop
.221c					_TTHDone:
.221c	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.221e	20 83 21	jsr $2183			jsr 	TOKWriteA
.2221	20 c6 20	jsr $20c6			jsr 	TOKTokeniseConstant 		; write integer out.
.2224	18		clc				clc
.2225	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2226					TOKTokeniseIdentifier:
.2226	20 b3 20	jsr $20b3			jsr 	TOKResetElement 			; extract an identifier
.2229					_TOKGetIdentifier:
.2229	20 92 21	jsr $2192			jsr 	TOKGet
.222c	20 84 23	jsr $2384			jsr 	TOKToUpper
.222f	20 a6 23	jsr $23a6			jsr 	TOKIsIdentifierElement
.2232	90 08		bcc $223c			bcc 	_TOKEndIdent
.2234	20 b7 20	jsr $20b7			jsr		TOKWriteElement
.2237	20 96 21	jsr $2196			jsr 	TOKGetNext
.223a	80 ed		bra $2229			bra 	_TOKGetIdentifier
.223c					_TOKEndIdent:
.223c	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.223e	d0 06		bne $2246			bne 	_TOKNotString
.2240	20 b7 20	jsr $20b7			jsr 	TOKWriteElement 			; add it
.2243	20 96 21	jsr $2196			jsr 	TOKGetNext 					; consume it
.2246					_TOKNotString:
.2246	20 92 21	jsr $2192			jsr 	TOKGet 						; finally check for (
.2249	c9 28		cmp #$28			cmp 	#"("
.224b	d0 06		bne $2253			bne 	_TOKNoArray
.224d	20 b7 20	jsr $20b7			jsr 	TOKWriteElement 			; add it
.2250	20 96 21	jsr $2196			jsr 	TOKGetNext 					; consume it
.2253					_TOKNoArray:
.2253	20 9a 21	jsr $219a			jsr 	TOKFindToken 				; find it
.2256	90 18		bcc $2270			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2258	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.225a	f0 0f		beq $226b			beq 	_TOKComment 				; yes, do comment code.
.225c	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.225e	d0 06		bne $2266			bne 	_TOKNoShift
.2260	48		pha				pha 								; write the shift.
.2261	8a		txa				txa
.2262	20 83 21	jsr $2183			jsr 	TOKWriteA
.2265	68		pla				pla
.2266					_TOKNoShift:
.2266	20 83 21	jsr $2183			jsr 	TOKWriteA 					; write the main token.
.2269	18		clc				clc
.226a	60		rts				rts
.226b					_TOKComment:
.226b	20 b7 22	jsr $22b7			jsr 	TOKDoComment
.226e	18		clc				clc
.226f	60		rts				rts
.2270					_TOKIsVariable:
.2270	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2272					_TOKOutputBuffer:
.2272	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.2275	20 9e 22	jsr $229e			jsr 	TOKTranslateIdentifier
.2278	20 83 21	jsr $2183			jsr 	TOKWriteA
.227b	e8		inx				inx
.227c	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.227f	20 a6 23	jsr $23a6			jsr 	TOKIsIdentifierElement
.2282	b0 ee		bcs $2272			bcs 	_TOKOutputBuffer
.2284	a8		tay				tay 								; last char in Y
.2285	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2287	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2289	f0 0e		beq $2299			beq 	_TOKIVExit
.228b	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.228d	d0 04		bne $2293			bne 	_TOKIVCheckArray 			; no, check for (
.228f	1a		inc a				inc 	a 							; token is $7D
.2290	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.2293					_TOKIVCheckArray:
.2293	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2295	d0 02		bne $2299			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2297	1a		inc a				inc 	a
.2298	1a		inc a				inc 	a
.2299					_TOKIVExit:
.2299	20 83 21	jsr $2183			jsr 	TOKWriteA 					; ending token
.229c	18		clc				clc
.229d	60		rts				rts
.229e					TOKTranslateIdentifier:
.229e	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.22a0	f0 0f		beq $22b1			beq 	_TTI64
.22a2	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.22a4	f0 0e		beq $22b4			beq 	_TTI65
.22a6	38		sec				sec
.22a7	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.22a9	10 03		bpl $22ae			bpl 	_TTIExit
.22ab	18		clc				clc 								; map 09 onto 26-35
.22ac	69 2b		adc #$2b			adc 	#"A"-"0"+26
.22ae					_TTIExit:
.22ae	09 40		ora #$40			ora 	#$40 						; correct range.
.22b0	60		rts				rts
.22b1	a9 64		lda #$64	_TTI64:	lda 	#$64
.22b3	60		rts				rts
.22b4	a9 65		lda #$65	_TTI65:	lda 	#$65
.22b6	60		rts				rts
.22b7					TOKDoComment:
.22b7	20 83 21	jsr $2183			jsr 	TOKWriteA					; output the token.
.22ba					_TOKSkipSpaces:
.22ba	20 92 21	jsr $2192			jsr 	TOKGet 						; skip over spaces
.22bd	c9 20		cmp #$20			cmp 	#' '
.22bf	d0 05		bne $22c6			bne 	_TOKEndSpaces
.22c1	20 96 21	jsr $2196			jsr 	TOKGetNext
.22c4	80 f4		bra $22ba			bra 	_TOKSkipSpaces
.22c6					_TOKEndSpaces:
.22c6	48		pha				pha 								; save it
.22c7	68		pla				pla
.22c8	f0 04		beq $22ce			beq 	_TOKDCExit 					; end of line.
.22ca	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.22cc	d0 01		bne $22cf			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.22ce					_TOKDCExit:
.22ce	60		rts				rts
.22cf					_TOKDCDoLine:
.22cf	20 b3 20	jsr $20b3			jsr 	TOKResetElement 			; start getting the string
.22d2					_TOKDCLoop:
.22d2	20 92 21	jsr $2192			jsr 	TOKGet 						; check EOL
.22d5	c9 00		cmp #$00			cmp 	#0
.22d7	f0 08		beq $22e1			beq 	_TOKDCEndComment
.22d9	20 96 21	jsr $2196			jsr 	TOKGetNext 					; get and consume
.22dc	20 b7 20	jsr $20b7			jsr 	TOKWriteElement
.22df	80 f1		bra $22d2			bra 	_TOKDCLoop
.22e1					_TOKDCEndComment:
.22e1	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.22e3	20 83 21	jsr $2183			jsr 	TOKWriteA
.22e6	20 f8 20	jsr $20f8			jsr 	TOKOutputElementBuffer
.22e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.22ea					TOKTokeniseInteger:
.22ea	20 13 23	jsr $2313			jsr 	TOKExtractInteger 			; pull an integer out as text.
.22ed	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.22ef	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.22f1	ad 1c 05	lda $051c			lda		TOKElement
.22f4	20 8f 30	jsr $308f			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.22f7	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.22fa	f0 12		beq $230e			beq 	_TOKNotLineNumber
.22fc	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.22fe	d0 0c		bne $230c			bne 	_TOKBadLineNumeber
.2300	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2302	8d 01 04	sta $0401			sta 	TOKLineNumber
.2305	a5 09		lda $09				lda 	IFR0+IM1
.2307	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.230a	18		clc				clc
.230b	60		rts				rts
.230c					_TOKBadLineNumeber:
.230c	38		sec				sec
.230d	60		rts				rts
.230e					_TOKNotLineNumber:
.230e	20 c6 20	jsr $20c6			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2311	18		clc				clc
.2312	60		rts				rts
.2313					TOKExtractInteger:
.2313	20 b3 20	jsr $20b3			jsr 	TOKResetElement 			; restart
.2316					_TTILoop:
.2316	20 92 21	jsr $2192			jsr 	TOKGet 						; keep getting and copying while numeric.
.2319	20 9a 23	jsr $239a			jsr 	TOKIsDigit
.231c	90 08		bcc $2326			bcc 	_TOKEIExit
.231e	20 b7 20	jsr $20b7			jsr 	TOKWriteElement
.2321	20 96 21	jsr $2196			jsr 	TOKGetNext
.2324	80 f0		bra $2316			bra 	_TTILoop
.2326					_TOKEIExit:
.2326	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2327					TOKTokenisePunctuation:
.2327	20 b3 20	jsr $20b3			jsr 	TOKResetElement 			; copy first punctuation character into element.
.232a	20 96 21	jsr $2196			jsr 	TOKGetNext
.232d	20 b7 20	jsr $20b7			jsr 	TOKWriteElement
.2330	20 92 21	jsr $2192			jsr 	TOKGet 						; what follows ?
.2333	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2335	f0 10		beq $2347			beq 	_TTPOne
.2337	20 ae 23	jsr $23ae			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.233a	b0 0b		bcs $2347			bcs 	_TTPOne 					; these speed things up a bit.
.233c	20 b7 20	jsr $20b7			jsr 	TOKWriteElement 			; this is what we will search for.
.233f	20 9a 21	jsr $219a			jsr 	TOKFindToken
.2342	b0 0a		bcs $234e			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2344	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.2347					_TTPOne:
.2347	20 9a 21	jsr $219a			jsr 	TOKFindToken 				; look for one character punctuation
.234a	b0 07		bcs $2353			bcs 	_TTPOutputExit 				; we found it
.234c	38		sec				sec 								; not recognised.
.234d	60		rts				rts
.234e					_TTPConsumeExit:
.234e	48		pha				pha
.234f	20 96 21	jsr $2196			jsr 	TOKGetNext 					; get the 2nd char out.
.2352	68		pla				pla
.2353					_TTPOutputExit:
.2353	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.2355	f0 05		beq $235c			beq 	_TTPComment
.2357	20 83 21	jsr $2183			jsr  	TOKWriteA 					; write token out
.235a	18		clc				clc
.235b	60		rts				rts
.235c					_TTPComment:
.235c	20 b7 22	jsr $22b7			jsr 	TOKDoComment
.235f	18		clc				clc
.2360	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2361					TOKTokeniseString:
.2361	20 96 21	jsr $2196			jsr 	TOKGetNext 					; consume the "
.2364	20 b3 20	jsr $20b3			jsr 	TOKResetElement 			; start getting the string
.2367					_TOKTSLoop:
.2367	20 92 21	jsr $2192			jsr 	TOKGet 						; check EOL
.236a	c9 00		cmp #$00			cmp 	#0
.236c	f0 0c		beq $237a			beq 	_TOKTSExit
.236e	20 96 21	jsr $2196			jsr 	TOKGetNext 					; get and consume
.2371	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2373	f0 05		beq $237a			beq 	_TOKTSExit
.2375	20 b7 20	jsr $20b7			jsr 	TOKWriteElement
.2378	80 ed		bra $2367			bra 	_TOKTSLoop
.237a					_TOKTSExit:
.237a	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.237c	20 83 21	jsr $2183			jsr 	TOKWriteA
.237f	20 f8 20	jsr $20f8			jsr 	TOKOutputElementBuffer
.2382	18		clc				clc
.2383	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2384					TOKToUpper:
.2384	c9 61		cmp #$61			cmp 	#"a"
.2386	90 06		bcc $238e			bcc 	_TTUNotLower
.2388	c9 7b		cmp #$7b			cmp 	#"z"+1
.238a	b0 02		bcs $238e			bcs 	_TTUNotLower
.238c	49 20		eor #$20			eor 	#$20
.238e					_TTUNotLower:
.238e	60		rts				rts
.238f					TOKToLower:
.238f	c9 41		cmp #$41			cmp 	#"A"
.2391	90 06		bcc $2399			bcc 	_TTUNotUpper
.2393	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2395	b0 02		bcs $2399			bcs 	_TTUNotUpper
.2397	49 20		eor #$20			eor 	#$20
.2399					_TTUNotUpper:
.2399	60		rts				rts
.239a					TOKIsDigit:
.239a	c9 30		cmp #$30			cmp 	#"0"
.239c	90 06		bcc $23a4			bcc 	TOKFail
.239e	c9 3a		cmp #$3a			cmp 	#"9"+1
.23a0	b0 02		bcs $23a4			bcs 	TOKFail
.23a2					TOKSucceed:
.23a2	38		sec				sec
.23a3	60		rts				rts
.23a4					TOKFail:
.23a4	18		clc				clc
.23a5	60		rts				rts
.23a6					TOKIsIdentifierElement:
.23a6	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.23a8	f0 f8		beq $23a2			beq 	TOKSucceed
.23aa	c9 5f		cmp #$5f			cmp 	#"_"
.23ac	f0 f4		beq $23a2			beq 	TOKSucceed 					; else fall through to alphanumeric
.23ae					TOKIsAlphaNumeric:
.23ae	20 b7 23	jsr $23b7			jsr 	TOKIsAlpha
.23b1	b0 ef		bcs $23a2			bcs 	TOKSucceed
.23b3	20 9a 23	jsr $239a			jsr 	TOKIsDigit
.23b6	60		rts				rts
.23b7					TOKIsAlpha:
.23b7	20 84 23	jsr $2384			jsr 	TOKToUpper
.23ba	c9 41		cmp #$41			cmp 	#"A"
.23bc	90 e6		bcc $23a4			bcc 	TOKFail
.23be	c9 5b		cmp #$5b			cmp 	#"Z"+1
.23c0	b0 e2		bcs $23a4			bcs 	TOKFail
.23c2	80 de		bra $23a2			bra 	TOKSucceed
.23c4					TOKIsHexadecimal:
.23c4	20 9a 23	jsr $239a			jsr		TOKIsDigit
.23c7	b0 d9		bcs $23a2			bcs 	TOKSucceed
.23c9	20 b7 23	jsr $23b7			jsr 	TOKIsAlpha
.23cc	90 d6		bcc $23a4			bcc 	TOKFail
.23ce	c9 47		cmp #$47			cmp 	#"F"+1
.23d0	b0 d2		bcs $23a4			bcs 	TOKFail
.23d2	80 ce		bra $23a2			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.23d4					Command_CALL:
.23d4	a9 42		lda #$42			lda 	#STK_CALL
.23d6	20 a2 28	jsr $28a2			jsr 	StackOpen
.23d9	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.23db	29 c0		and #$c0			and 	#$C0
.23dd	c9 40		cmp #$40			cmp 	#$40
.23df	d0 29		bne $240a			bne 	_CCSyntax
.23e1	20 6e 2b	jsr $2b6e			jsr 	VARGetInfo 					; get the information
.23e4	20 89 28	jsr $2889			jsr 	ERRCheckRParen 				; check right bracket follows.
.23e7	20 20 2b	jsr $2b20			jsr 	VARFind 					; exists ?
.23ea	90 21		bcc $240d			bcc 	_CCUnknown
.23ec	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.23ee	85 22		sta $22				sta 	zTemp0
.23f0	20 d6 28	jsr $28d6			jsr 	STKSaveCodePosition 		; save return address on stack.
.23f3	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.23f5	b1 22		lda ($22),y			lda 	(zTemp0),y
.23f7	c9 ff		cmp #$ff			cmp 	#$FF
.23f9	d0 12		bne $240d			bne 	_CCUnknown
.23fb	88		dey				dey 								; get Y offset to stack
.23fc	b1 22		lda ($22),y			lda 	(zTemp0),y
.23fe	48		pha				pha
.23ff	88		dey				dey 								; get address
.2400	b1 22		lda ($22),y			lda 	(zTemp0),y
.2402	85 19		sta $19				sta 	codePtr+1
.2404	b2 22		lda ($22)			lda 	(zTemp0)
.2406	85 18		sta $18				sta 	codePtr
.2408	7a		ply				ply 								; restore Y
.2409	60		rts				rts
.240a					_CCSyntax:
.240a	4c d4 26	jmp $26d4		jmp	ErrorV_syntax
.240d					_CCUnknown:
.240d	4c 49 28	jmp $2849		jmp	ErrorV_unknown
.2410					Command_ENDPROC:
.2410	a9 42		lda #$42			lda 	#STK_CALL
.2412	20 ce 28	jsr $28ce			jsr 	StackCheckFrame
.2415	20 e8 28	jsr $28e8			jsr 	STKLoadCodePosition 		; return
.2418	20 c0 28	jsr $28c0			jsr 	StackClose
.241b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.241c					Command_DO:
.241c	a9 22		lda #$22			lda 	#STK_DO
.241e	20 a2 28	jsr $28a2			jsr 	StackOpen
.2421	20 d6 28	jsr $28d6			jsr 	STKSaveCodePosition 		; save loop position
.2424	60		rts				rts
.2425					Command_EXIT:
.2425	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2427	20 ce 28	jsr $28ce			jsr 	StackCheckFrame
.242a	20 c0 28	jsr $28c0			jsr 	StackClose 					; close it
.242d	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.242f	aa		tax				tax
.2430	20 e4 25	jsr $25e4			jsr 	ScanForward
.2433	60		rts				rts
.2434					Command_LOOP:
.2434	a9 22		lda #$22			lda 	#STK_DO
.2436	20 ce 28	jsr $28ce			jsr 	StackCheckFrame
.2439	20 e8 28	jsr $28e8			jsr 	STKLoadCodePosition 		; loop back
.243c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.243d					Command_FOR:
.243d	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.243f	20 a2 28	jsr $28a2			jsr 	StackOpen
.2442	20 b7 12	jsr $12b7			jsr 	CommandLET 					; do "I = 1" bit
.2445	5a		phy				phy 								; save variable address to +4,+5
.2446	a0 04		ldy #$04			ldy 	#4
.2448	a5 22		lda $22				lda 	zTemp0
.244a	91 2a		sta ($2a),y			sta 	(basicStack),y
.244c	c8		iny				iny
.244d	a5 23		lda $23				lda 	zTemp0+1
.244f	91 2a		sta ($2a),y			sta 	(basicStack),y
.2451	7a		ply				ply
.2452	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2454	20 99 28	jsr $2899			jsr 	ERRCheckA
.2457	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.245a	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.245c	a2 08		ldx #$08			ldx 	#IFR0
.245e	20 b3 24	jsr $24b3			jsr 	CFSaveR0X
.2461	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2463	c9 91		cmp #$91			cmp 	#PR_STEP
.2465	d0 06		bne $246d			bne 	_CFStep1
.2467	c8		iny				iny 								; consume step
.2468	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; evaluate STEP
.246b	80 24		bra $2491			bra 	_CFWriteStep
.246d					_CFStep1:
.246d	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.246f	a9 01		lda #$01			lda 	#1
.2471	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.2474	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2475	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2477	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2479	85 22		sta $22				sta 	zTemp0
.247b	c8		iny				iny
.247c	b1 2a		lda ($2a),y			lda 	(basicStack),y
.247e	85 23		sta $23				sta 	zTemp0+1
.2480	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2482	b1 22		lda ($22),y			lda 	(zTemp0),y
.2484	d0 0a		bne $2490			bne 	_CFNotOptimised
.2486	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2488	b1 2a		lda ($2a),y			lda 	(basicStack),y
.248a	d0 04		bne $2490			bne 	_CFNotOptimised
.248c	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.248e	85 0b		sta $0b				sta 	IFR0+IExp
.2490					_CFNotOptimised:
.2490	7a		ply				ply
.2491					_CFWriteStep:
.2491	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2493	a9 06		lda #$06			lda 	#6
.2495	20 b3 24	jsr $24b3			jsr 	CFSaveR0X
.2498	20 d6 28	jsr $28d6			jsr 	STKSaveCodePosition 		; save loop position
.249b	60		rts				rts
.249c					CFLoadR0X:
.249c	5a		phy				phy
.249d	a8		tay				tay
.249e	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24a0	95 00		sta $00,x			sta 	IM0,x
.24a2	c8		iny				iny
.24a3	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24a5	95 01		sta $01,x			sta 	IM1,x
.24a7	c8		iny				iny
.24a8	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24aa	95 02		sta $02,x			sta 	IM2,x
.24ac	c8		iny				iny
.24ad	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24af	95 03		sta $03,x			sta 	IExp,x
.24b1	7a		ply				ply
.24b2	60		rts				rts
.24b3					CFSaveR0X:
.24b3	5a		phy				phy
.24b4	a8		tay				tay
.24b5	b5 00		lda $00,x			lda 	IM0,x
.24b7	91 2a		sta ($2a),y			sta 	(basicStack),y
.24b9	c8		iny				iny
.24ba	b5 01		lda $01,x			lda 	IM1,x
.24bc	91 2a		sta ($2a),y			sta 	(basicStack),y
.24be	c8		iny				iny
.24bf	b5 02		lda $02,x			lda 	IM2,x
.24c1	91 2a		sta ($2a),y			sta 	(basicStack),y
.24c3	c8		iny				iny
.24c4	b5 03		lda $03,x			lda 	IExp,x
.24c6	91 2a		sta ($2a),y			sta 	(basicStack),y
.24c8	7a		ply				ply
.24c9	60		rts				rts
.24ca					Command_NEXT:
.24ca	a9 37		lda #$37			lda 	#STK_FOR
.24cc	20 ce 28	jsr $28ce			jsr 	StackCheckFrame
.24cf	5a		phy				phy 								; check optimised loop
.24d0	a0 09		ldy #$09			ldy 	#9
.24d2	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24d4	7a		ply				ply
.24d5	0a		asl a				asl 	a
.24d6	b0 35		bcs $250d			bcs 	_CNOptimised
.24d8	20 45 25	jsr $2545			jsr 	_CNLoadValue 				; load index value to R0.
.24db	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.24dd	a9 06		lda #$06			lda 	#6
.24df	20 9c 24	jsr $249c			jsr 	CFLoadR0X
.24e2	20 23 2c	jsr $2c23			jsr 	IFloatAdd 					; add them together and write back.
.24e5	20 68 25	jsr $2568			jsr 	_CNSaveValue
.24e8	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.24ea	a2 0c		ldx #$0c			ldx 	#IFR1
.24ec	20 9c 24	jsr $249c			jsr 	CFLoadR0X
.24ef	20 fa 2e	jsr $2efa			jsr 	IFloatCompare 				; compare terminal vs current
.24f2	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.24f4	20 24 32	jsr $3224			jsr 	IFloatCheckZero
.24f7	f0 10		beq $2509			beq 	_CNLoopBack
.24f9	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.24fb	5a		phy				phy
.24fc	a0 09		ldy #$09			ldy 	#6+IExp
.24fe	51 2a		eor ($2a),y			eor 	(basicStack),y
.2500	7a		ply				ply
.2501	29 40		and #$40			and 	#IFSign
.2503	f0 04		beq $2509			beq 	_CNLoopBack
.2505					_CNExitLoop:
.2505	20 c0 28	jsr $28c0			jsr 	StackClose		 			; return
.2508	60		rts				rts
.2509					_CNLoopBack:
.2509	20 e8 28	jsr $28e8			jsr 	STKLoadCodePosition 		; loop back
.250c	60		rts				rts
.250d					_CNOptimised:
.250d	5a		phy				phy
.250e	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2510	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2512	85 26		sta $26				sta 	zTemp2
.2514	c8		iny				iny
.2515	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2517	85 27		sta $27				sta 	zTemp2+1
.2519	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.251b					_CNIncrement:
.251b	c8		iny				iny
.251c	b1 26		lda ($26),y			lda 	(zTemp2),y
.251e	1a		inc a				inc 	a
.251f	91 26		sta ($26),y			sta 	(zTemp2),y
.2521	f0 f8		beq $251b			beq 	_CNIncrement
.2523	18		clc				clc 								; point zTemp0 to terminal value
.2524	a5 2a		lda $2a				lda 	basicStack
.2526	69 0a		adc #$0a			adc 	#10
.2528	85 22		sta $22				sta 	zTemp0
.252a	a5 2b		lda $2b				lda 	basicStack+1
.252c	69 00		adc #$00			adc 	#0
.252e	85 23		sta $23				sta 	zTemp0+1
.2530	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2532	18		clc				clc 								; borrow 1, we want > not >=
.2533	b2 26		lda ($26)			lda 	(zTemp2)
.2535	f2 22		sbc ($22)			sbc 	(zTemp0)
.2537	b1 26		lda ($26),y			lda 	(zTemp2),y
.2539	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.253b	c8		iny				iny
.253c	b1 26		lda ($26),y			lda 	(zTemp2),y
.253e	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2540	7a		ply				ply
.2541	b0 c2		bcs $2505			bcs 	_CNExitLoop
.2543	80 c4		bra $2509			bra 	_CNLoopBack
.2545					_CNLoadValue:
.2545	5a		phy				phy
.2546	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2548	b1 2a		lda ($2a),y			lda 	(basicStack),y
.254a	85 26		sta $26				sta 	zTemp2
.254c	c8		iny				iny
.254d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.254f	85 27		sta $27				sta 	zTemp2+1
.2551	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2553	b1 26		lda ($26),y			lda 	(zTemp2),y
.2555	85 08		sta $08				sta 	IFR0+IM0
.2557	c8		iny				iny
.2558	b1 26		lda ($26),y			lda 	(zTemp2),y
.255a	85 09		sta $09				sta 	IFR0+IM1
.255c	c8		iny				iny
.255d	b1 26		lda ($26),y			lda 	(zTemp2),y
.255f	85 0a		sta $0a				sta 	IFR0+IM2
.2561	c8		iny				iny
.2562	b1 26		lda ($26),y			lda 	(zTemp2),y
.2564	85 0b		sta $0b				sta 	IFR0+IExp
.2566	7a		ply				ply
.2567	60		rts				rts
.2568					_CNSaveValue:
.2568	5a		phy				phy
.2569	a0 00		ldy #$00			ldy 	#0
.256b	a5 08		lda $08				lda 	IFR0+IM0
.256d	91 26		sta ($26),y			sta 	(zTemp2),y
.256f	c8		iny				iny
.2570	a5 09		lda $09				lda 	IFR0+IM1
.2572	91 26		sta ($26),y			sta 	(zTemp2),y
.2574	c8		iny				iny
.2575	a5 0a		lda $0a				lda 	IFR0+IM2
.2577	91 26		sta ($26),y			sta 	(zTemp2),y
.2579	c8		iny				iny
.257a	a5 0b		lda $0b				lda 	IFR0+IExp
.257c	91 26		sta ($26),y			sta 	(zTemp2),y
.257e	7a		ply				ply
.257f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2580					Command_GOSUB:
.2580	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get line number
.2583	a9 52		lda #$52			lda 	#STK_GOSUB
.2585	20 a2 28	jsr $28a2			jsr 	StackOpen
.2588	20 d6 28	jsr $28d6			jsr 	STKSaveCodePosition 		; save return address on stack.
.258b	4c d8 11	jmp $11d8			jmp 	GotoR0
.258e					Command_RETURN:
.258e	a9 52		lda #$52			lda 	#STK_GOSUB
.2590	20 ce 28	jsr $28ce			jsr 	StackCheckFrame
.2593	20 e8 28	jsr $28e8			jsr 	STKLoadCodePosition 		; return
.2596	20 c0 28	jsr $28c0			jsr 	StackClose
.2599	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.259a					IfCommand:
.259a	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; Get the if test.
.259d	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.259f	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.25a1	d0 0c		bne $25af			bne 	_IfStructured 				; we still support it.
.25a3	c8		iny				iny 								; consume THEN
.25a4	a2 08		ldx #$08			ldx 	#IFR0
.25a6	20 24 32	jsr $3224			jsr 	IFloatCheckZero 			; is it zero
.25a9	f0 01		beq $25ac			beq 	_IfFail 					; if fail, go to next line
.25ab	60		rts				rts 								; if THEN just continue
.25ac					_IfFail:
.25ac	4c cc 14	jmp $14cc			jmp 	RUNEndOfLine
.25af					_IfStructured:
.25af	20 24 32	jsr $3224			jsr 	IFloatCheckZero 			; is it zero
.25b2	d0 07		bne $25bb			bne 	_IfExit 					; if not, then continue normally.
.25b4	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.25b6	a2 85		ldx #$85			ldx 	#PR_ENDIF
.25b8	20 e4 25	jsr $25e4			jsr 	ScanForward 				; and run from there
.25bb					_IfExit:
.25bb	60		rts				rts
.25bc					ElseCode:
.25bc	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.25be	aa		tax				tax 								; so just go to the structure exit
.25bf	20 e4 25	jsr $25e4			jsr 	ScanForward
.25c2	60		rts				rts
.25c3					EndIf:
.25c3	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.25c4					Command_REPEAT:
.25c4	a9 02		lda #$02			lda 	#STK_REPEAT
.25c6	20 a2 28	jsr $28a2			jsr 	StackOpen
.25c9	20 d6 28	jsr $28d6			jsr 	STKSaveCodePosition 		; save loop position
.25cc	60		rts				rts
.25cd					Command_UNTIL:
.25cd	a9 02		lda #$02			lda 	#STK_REPEAT
.25cf	20 ce 28	jsr $28ce			jsr 	StackCheckFrame
.25d2	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; work out the test
.25d5	a2 08		ldx #$08			ldx 	#IFR0
.25d7	20 24 32	jsr $3224			jsr 	IFloatCheckZero 			; check if zero
.25da	f0 04		beq $25e0			beq 	_CULoopBack 				; if so keep looping
.25dc	20 c0 28	jsr $28c0			jsr 	StackClose		 			; return
.25df	60		rts				rts
.25e0					_CULoopBack:
.25e0	20 e8 28	jsr $28e8			jsr 	STKLoadCodePosition 		; loop back
.25e3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.25e4					ScanForward:
.25e4	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.25e6	86 23		stx $23				stx 	zTemp0+1
.25e8	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.25ea					_ScanForwardLoop:
.25ea	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.25ec	d0 0a		bne $25f8			bne 	_ScanNoCheck
.25ee	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.25f0	c5 22		cmp $22				cmp 	zTemp0
.25f2	f0 49		beq $263d			beq 	_ScanExit
.25f4	c5 23		cmp $23				cmp 	zTemp0+1
.25f6	f0 45		beq $263d			beq 	_ScanExit
.25f8					_ScanNoCheck:
.25f8	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.25fa	c8		iny				iny
.25fb	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.25fd	f0 37		beq $2636			beq		_ScanDataItem
.25ff	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2601	f0 33		beq $2636			beq 	_ScanDataItem
.2603	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2605	f0 1b		beq $2622			beq 	_ScanNextLine
.2607	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.2609	d0 01		bne $260c			bne 	_ScanNoShift
.260b	c8		iny				iny
.260c					_ScanNoShift:
.260c	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.260e	b0 da		bcs $25ea			bcs 	_ScanForwardLoop
.2610	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2612	90 d6		bcc $25ea			bcc 	_ScanForwardLoop
.2614	aa		tax				tax 								; access the table to get the adjustment.
.2615	18		clc				clc
.2616	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.2618	7d 26 1b	adc $1b26,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.261b	85 24		sta $24				sta 	zTemp1
.261d	10 cb		bpl $25ea			bpl		_ScanForwardLoop 			; error if -ve ?
.261f	4c 60 27	jmp $2760		jmp	ErrorV_structure
.2622					_ScanNextLine:
.2622	18		clc				clc	 								; forward to next line.
.2623	b2 18		lda ($18)			lda 	(codePtr)
.2625	65 18		adc $18				adc 	codePtr
.2627	85 18		sta $18				sta 	codePtr
.2629	90 02		bcc $262d			bcc 	_ScanNoCarry
.262b	e6 19		inc $19				inc 	codePtr+1
.262d					_ScanNoCarry:
.262d	a0 03		ldy #$03			ldy 	#3
.262f	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2631	d0 b7		bne $25ea			bne 	_ScanForwardLoop
.2633	4c 60 27	jmp $2760		jmp	ErrorV_structure
.2636					_ScanDataItem:
.2636	98		tya				tya
.2637	38		sec				sec
.2638	71 18		adc ($18),y			adc 	(codePtr),y
.263a	a8		tay				tay
.263b	80 ad		bra $25ea			bra 	_ScanForwardLoop
.263d					_ScanExit:
.263d	c8		iny				iny 								; consume final token.
.263e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.263f					ScanProcedures:
.263f	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.2641	48		pha				pha
.2642	a5 19		lda $19				lda 	codePtr+1
.2644	48		pha				pha
.2645	5a		phy				phy
.2646	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.2649	85 19		sta $19				sta 	codePtr+1
.264b	64 18		stz $18				stz 	codePtr
.264d					_SPLoop:
.264d	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.264f	f0 18		beq $2669			beq 	_SPExit
.2651	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2653	b1 18		lda ($18),y			lda 	(codePtr),y
.2655	c9 88		cmp #$88			cmp 	#PR_PROC
.2657	d0 03		bne $265c			bne 	_SPNext
.2659	20 71 26	jsr $2671			jsr 	_SPSetupRecord
.265c					_SPNext:
.265c	18		clc				clc 								; forward to next
.265d	b2 18		lda ($18)			lda 	(codePtr)
.265f	65 18		adc $18				adc 	codePtr
.2661	85 18		sta $18				sta 	codePtr
.2663	90 e8		bcc $264d			bcc 	_SPLoop
.2665	e6 19		inc $19				inc 	codePtr+1
.2667	80 e4		bra $264d			bra 	_SPLoop
.2669					_SPExit:
.2669	7a		ply				ply
.266a	68		pla				pla
.266b	85 19		sta $19				sta 	codePtr+1
.266d	68		pla				pla
.266e	85 18		sta $18				sta 	codePtr
.2670	60		rts				rts
.2671					_SPSetupRecord:
.2671	c8		iny				iny 								; check identifier follows
.2672	b1 18		lda ($18),y			lda 	(codePtr),y
.2674	29 c0		and #$c0			and 	#$C0
.2676	c9 40		cmp #$40			cmp 	#$40
.2678	d0 27		bne $26a1			bne 	_SPSyntax
.267a	20 6e 2b	jsr $2b6e			jsr 	VARGetInfo 					; get the information
.267d	20 89 28	jsr $2889			jsr 	ERRCheckRParen 				; check right bracket follows.
.2680	20 20 2b	jsr $2b20			jsr 	VARFind 					; already exists ?
.2683	b0 1f		bcs $26a4			bcs 	_SPUsed 					; error !
.2685	20 cc 2a	jsr $2acc			jsr 	VARCreate 					; create, XA points to the data.
.2688	85 22		sta $22				sta 	zTemp0
.268a	86 23		stx $23				stx 	zTemp0+1
.268c	5a		phy				phy 								; save Y pos on stack
.268d	a0 01		ldy #$01			ldy 	#1
.268f	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2691	92 22		sta ($22)			sta 	(zTemp0)
.2693	a5 19		lda $19				lda 	codePtr+1
.2695	91 22		sta ($22),y			sta 	(zTemp0),y
.2697	c8		iny				iny
.2698	68		pla				pla
.2699	91 22		sta ($22),y			sta 	(zTemp0),y
.269b	c8		iny				iny
.269c	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.269e	91 22		sta ($22),y			sta 	(zTemp0),y
.26a0	60		rts				rts
.26a1					_SPSyntax:
.26a1	4c d4 26	jmp $26d4		jmp	ErrorV_syntax
.26a4					_SPUsed:
.26a4	4c 2b 28	jmp $282b		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.26a7					Command_WHILE:
.26a7	5a		phy				phy 								; save position of the test
.26a8	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; work out the while test.
.26ab	a2 08		ldx #$08			ldx 	#IFR0
.26ad	20 24 32	jsr $3224			jsr 	IFloatCheckZero 			; check if zero
.26b0	f0 0e		beq $26c0			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.26b2	98		tya				tya 								; position *after* test.
.26b3	7a		ply				ply 								; restore position before test, at WHILE
.26b4	88		dey				dey 								; so we execute the WHILE command again.
.26b5	48		pha				pha 								; push after test on the stack
.26b6	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.26b8	20 a2 28	jsr $28a2			jsr 	StackOpen
.26bb	20 d6 28	jsr $28d6			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.26be	7a		ply				ply 								; restore the position *after* the test
.26bf	60		rts				rts
.26c0					_WHExitLoop:
.26c0	68		pla				pla 								; throw post loop position
.26c1	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.26c3	aa		tax				tax
.26c4	20 e4 25	jsr $25e4			jsr 	ScanForward
.26c7	60		rts				rts
.26c8					Command_WEND:
.26c8	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.26ca	20 ce 28	jsr $28ce			jsr 	StackCheckFrame
.26cd	20 e8 28	jsr $28e8			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.26d0	20 c0 28	jsr $28c0			jsr 	StackClose		 			; erase the frame
.26d3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.26d4					ErrorV_syntax:
.26d4	20 c1 29	jsr $29c1		jsr	ErrorHandler
>26d7	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>26df	45 72 72 6f 72 00
.26e5					ErrorV_range:
.26e5	20 c1 29	jsr $29c1		jsr	ErrorHandler
>26e8	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>26f0	52 61 6e 67 65 00
.26f6					ErrorV_value:
.26f6	20 c1 29	jsr $29c1		jsr	ErrorHandler
>26f9	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2701	75 65 00
.2704					ErrorV_type:
.2704	20 c1 29	jsr $29c1		jsr	ErrorHandler
>2707	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>270f	73 6d 61 74 63 68 00
.2716					ErrorV_unimplemented:
.2716	20 c1 29	jsr $29c1		jsr	ErrorHandler
>2719	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2721	6c 65 6d 65 6e 74 65 64 00
.272a					ErrorV_assert:
.272a	20 c1 29	jsr $29c1		jsr	ErrorHandler
>272d	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2735	46 61 69 6c 00
.273a					ErrorV_internal:
.273a	20 c1 29	jsr $29c1		jsr	ErrorHandler
>273d	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2745	6c 20 45 72 72 6f 72 00
.274d					ErrorV_divzero:
.274d	20 c1 29	jsr $29c1		jsr	ErrorHandler
>2750	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2758	42 79 20 5a 65 72 6f 00
.2760					ErrorV_structure:
.2760	20 c1 29	jsr $29c1		jsr	ErrorHandler
>2763	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>276b	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2778					ErrorV_stop:
.2778	20 c1 29	jsr $29c1		jsr	ErrorHandler
>277b	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2783	20 53 74 6f 70 70 65 64 00
.278c					ErrorV_data:
.278c	20 c1 29	jsr $29c1		jsr	ErrorHandler
>278f	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2797	44 61 74 61 00
.279c					ErrorV_redefine:
.279c	20 c1 29	jsr $29c1		jsr	ErrorHandler
>279f	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>27a7	65 64 65 66 69 6e 65 64 00
.27b0					ErrorV_index:
.27b0	20 c1 29	jsr $29c1		jsr	ErrorHandler
>27b3	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>27bb	61 79 20 49 6e 64 65 78 00
.27c4					ErrorV_memory:
.27c4	20 c1 29	jsr $29c1		jsr	ErrorHandler
>27c7	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>27cf	4d 65 6d 6f 72 79 00
.27d6					ErrorV_uninitialised:
.27d6	20 c1 29	jsr $29c1		jsr	ErrorHandler
>27d9	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>27e1	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.27f1					ErrorV_string:
.27f1	20 c1 29	jsr $29c1		jsr	ErrorHandler
>27f4	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>27fc	69 6e 67 20 4c 65 6e 67 74 68 00
.2807					ErrorV_variable:
.2807	20 c1 29	jsr $29c1		jsr	ErrorHandler
>280a	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2812	65 20 4d 69 73 73 69 6e 67 00
.281c					ErrorV_stack:
.281c	20 c1 29	jsr $29c1		jsr	ErrorHandler
>281f	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2827	75 6c 6c 00
.282b					ErrorV_dupproc:
.282b	20 c1 29	jsr $29c1		jsr	ErrorHandler
>282e	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2836	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2846	65 64 00
.2849					ErrorV_unknown:
.2849	20 c1 29	jsr $29c1		jsr	ErrorHandler
>284c	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2854	20 50 72 6f 63 65 64 75 72 65 00
.285f					ErrorV_break:
.285f	20 c1 29	jsr $29c1		jsr	ErrorHandler
>2862	05 42 72 65 61 6b 00			.text	5,"Break",0
.2869					ErrorV_line:
.2869	20 c1 29	jsr $29c1		jsr	ErrorHandler
>286c	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2874	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2881					ERRCheckLParen:
.2881	b1 18		lda ($18),y			lda 	(codePtr),y
.2883	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2885	d0 18		bne $289f			bne 	ERRSyntaxError
.2887	c8		iny				iny
.2888	60		rts				rts
.2889					ERRCheckRParen:
.2889	b1 18		lda ($18),y			lda 	(codePtr),y
.288b	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.288d	d0 10		bne $289f			bne 	ERRSyntaxError
.288f	c8		iny				iny
.2890	60		rts				rts
.2891					ERRCheckComma:
.2891	b1 18		lda ($18),y			lda 	(codePtr),y
.2893	c9 99		cmp #$99			cmp 	#PR_COMMA
.2895	d0 08		bne $289f			bne 	ERRSyntaxError
.2897	c8		iny				iny
.2898	60		rts				rts
.2899					ERRCheckA:
.2899	d1 18		cmp ($18),y			cmp 	(codePtr),y
.289b	d0 02		bne $289f			bne 	ERRSyntaxError
.289d	c8		iny				iny
.289e	60		rts				rts
.289f					ERRSyntaxError:
.289f	4c d4 26	jmp $26d4		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.28a2					StackOpen:
.28a2	48		pha				pha 								; save frame byte
.28a3	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.28a5	0a		asl a				asl 	a 							; claim twice this for storage
.28a6	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.28a8	38		sec				sec 								; so basically subtracting from
.28a9	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.28ab	85 2a		sta $2a				sta 	basicStack
.28ad	b0 0a		bcs $28b9			bcs 	_SONoBorrow
>28af	db						.byte 	$DB
.28b0	c6 2b		dec $2b				dec 	basicStack+1
.28b2	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.28b4	cd 20 06	cmp $0620			cmp 	basicStackEnd
.28b7	f0 04		beq $28bd			beq 	_SOMemory
.28b9					_SONoBorrow:
.28b9	68		pla				pla 								; get marker back and write at TOS
.28ba	92 2a		sta ($2a)			sta 	(basicStack)
.28bc	60		rts				rts
.28bd					_SOMemory:
.28bd	4c 1c 28	jmp $281c		jmp	ErrorV_stack
.28c0					StackClose:
.28c0	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.28c2	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.28c4	0a		asl a				asl 	a 							; claim twice this.
.28c5	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.28c7	85 2a		sta $2a				sta 	basicStack
.28c9	90 02		bcc $28cd			bcc 	_SCExit
.28cb	e6 2b		inc $2b				inc 	basicStack+1
.28cd					_SCExit:
.28cd	60		rts				rts
.28ce					StackCheckFrame:
.28ce	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.28d0	d0 01		bne $28d3			bne 	_SCFError 					; different, we have structures mixed up
.28d2	60		rts				rts
.28d3					_SCFError:
.28d3	4c 60 27	jmp $2760		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.28d6					STKSaveCodePosition:
.28d6	5a		phy				phy
.28d7	98		tya				tya 								; save Y at offset 1.
.28d8	a0 01		ldy #$01			ldy 	#1
.28da	91 2a		sta ($2a),y			sta 	(basicStack),y
.28dc	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.28de	c8		iny				iny
.28df	91 2a		sta ($2a),y			sta 	(basicStack),y
.28e1	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.28e3	c8		iny				iny
.28e4	91 2a		sta ($2a),y			sta 	(basicStack),y
.28e6	7a		ply				ply
.28e7	60		rts				rts
.28e8					STKLoadCodePosition:
.28e8	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.28ea	b1 2a		lda ($2a),y			lda 	(basicStack),y
.28ec	85 19		sta $19				sta 	codePtr+1
.28ee	88		dey				dey
.28ef	b1 2a		lda ($2a),y			lda 	(basicStack),y
.28f1	85 18		sta $18				sta 	codePtr
.28f3	88		dey				dey
.28f4	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.28f6	a8		tay				tay
.28f7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.28f8					StackReset:
.28f8	48		pha				pha 								; save top of memory
.28f9	3a		dec a				dec 	a  							; end of stack = previous byte
.28fa	85 2b		sta $2b				sta 	basicStack+1
.28fc	a9 ff		lda #$ff			lda 	#$FF
.28fe	85 2a		sta $2a				sta 	basicStack
.2900	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2902	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2904	68		pla				pla 								; allocate pages for stack.
.2905	38		sec				sec
.2906	e9 02		sbc #$02			sbc 	#STACKPAGES
.2908	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.290b	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.290c					StringConcrete:
.290c	5a		phy				phy 								; save position on stack
.290d	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.290f	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2911	b0 41		bcs $2954			bcs 	_SALengthError
.2913	18		clc				clc 								; length of the new string
.2914	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2916	90 02		bcc $291a			bcc 	_SAHaveLength
.2918	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.291a					_SAHaveLength:
.291a	48		pha				pha 								; save length to be allocated for concreting.
.291b	38		sec				sec
.291c	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.291e	6d 22 06	adc $0622			adc 	stringMemory
.2921	8d 22 06	sta $0622			sta 	stringMemory
.2924	85 26		sta $26				sta 	zTemp2 						; update storage address
.2926	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2928	6d 23 06	adc $0623			adc 	stringMemory+1
.292b	8d 23 06	sta $0623			sta 	stringMemory+1
.292e	85 27		sta $27				sta 	zTemp2+1
.2930	68		pla				pla 								; save length allocated in +0
.2931	92 26		sta ($26)			sta 	(zTemp2)
.2933	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2935	a0 01		ldy #$01			ldy 	#1
.2937	91 26		sta ($26),y			sta 	(zTemp2),y
.2939					_SACopyNewString:
.2939	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.293b	a0 02		ldy #$02			ldy 	#2
.293d	91 26		sta ($26),y			sta 	(zTemp2),y
.293f	aa		tax				tax 								; bytes to copy
.2940	f0 0c		beq $294e			beq 	_SACopyExit
.2942	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2944					_SACopyNSLoop:
.2944	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2946	c8		iny				iny 								; write two on in string storage
.2947	c8		iny				iny
.2948	91 26		sta ($26),y			sta 	(zTemp2),y
.294a	88		dey				dey
.294b	ca		dex				dex									; until copied all the string lengths.
.294c	d0 f6		bne $2944			bne 	_SACopyNSLoop
.294e					_SACopyExit:
.294e	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.2950	a5 26		lda $26				lda 	zTemp2
.2952	7a		ply				ply
.2953	60		rts				rts
.2954					_SALengthError:
.2954	4c f1 27	jmp $27f1		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2957					StringSystemInitialise:
.2957	3a		dec a				dec 	a 							; make last byte of previous page.
.2958	8d 23 06	sta $0623			sta 	stringMemory+1
.295b	85 23		sta $23				sta 	zTemp0+1
.295d	a9 ff		lda #$ff			lda 	#$FF
.295f	8d 22 06	sta $0622			sta 	stringMemory
.2962	85 22		sta $22				sta 	zTemp0
.2964	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2966	92 22		sta ($22)			sta 	(zTemp0)
.2968	60		rts				rts
.2969					StringSpaceInitialise:
.2969	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.296b	8d 21 06	sta $0621			sta 	stringInitialised
.296e	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2971	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2974	ad 23 06	lda $0623			lda 	stringMemory+1
.2977	3a		dec a				dec 	a
.2978	8d 25 06	sta $0625			sta 	stringTempPointer+1
.297b	20 82 10	jsr $1082			jsr 	ClearCheckMemory
.297e	60		rts				rts
.297f					StringTempAllocate:
.297f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2981	b0 2e		bcs $29b1			bcs 	_STALength
.2983	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.2986	30 05		bmi $298d			bmi 	_STAAllocate
.2988	48		pha				pha 								; save value to subtract.
.2989	20 69 29	jsr $2969			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.298c	68		pla				pla 								; restore it
.298d					_STAAllocate:
.298d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.298f	18		clc				clc  								; deliberate allows one more
.2990	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.2993	8d 24 06	sta $0624			sta 	stringTempPointer
.2996	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2998	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.299a	ad 25 06	lda $0625			lda 	stringTempPointer+1
.299d	69 ff		adc #$ff			adc 	#$FF
.299f	8d 25 06	sta $0625			sta 	stringTempPointer+1
.29a2	85 2d		sta $2d				sta 	zsTemp+1
.29a4	85 09		sta $09				sta 	IFR0+IM1
.29a6	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.29a8	a9 80		lda #$80			lda 	#$80
.29aa	85 0b		sta $0b				sta 	IFR0+IExp
.29ac	a9 00		lda #$00			lda 	#0 							; clear the target string
.29ae	92 2c		sta ($2c)			sta 	(zsTemp)
.29b0	60		rts				rts
.29b1					_STALength:
.29b1	4c f1 27	jmp $27f1		jmp	ErrorV_string
.29b4					StringTempWrite:
.29b4	5a		phy				phy
.29b5	48		pha				pha
.29b6	b2 2c		lda ($2c)			lda 	(zsTemp)
.29b8	1a		inc a				inc 	a
.29b9	92 2c		sta ($2c)			sta 	(zsTemp)
.29bb	a8		tay				tay
.29bc	68		pla				pla
.29bd	91 2c		sta ($2c),y			sta 	(zsTemp),y
.29bf	7a		ply				ply
.29c0	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.29c1					ErrorHandler:
.29c1	fa		plx				plx 								; get address of msg
.29c2	7a		ply				ply
.29c3	e8		inx				inx 								; bump past RTS
.29c4	d0 01		bne $29c7			bne 	_EHNoInc
.29c6	c8		iny				iny
.29c7					_EHNoInc:
.29c7	20 f7 ff	jsr $fff7			jsr	 	OSWriteString 				; print it.
.29ca	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.29cd	0d 27 06	ora $0627			ora 	ERRLine+1
.29d0	f0 10		beq $29e2			beq 	_EHNoNumber
.29d2	a2 e5		ldx #$e5			ldx 	#_EHAtMsg & $FF
.29d4	a0 29		ldy #$29			ldy 	#_EHAtMsg >> 8
.29d6	20 f7 ff	jsr $fff7			jsr 	OSWriteString
.29d9	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.29dc	ae 27 06	ldx $0627			ldx 	ERRLine+1
.29df	20 ea 29	jsr $29ea			jsr 	WriteIntXA
.29e2					_EHNoNumber:
.29e2	4c 13 2a	jmp $2a13			jmp 	WarmStartNewLine
.29e5					_EHAtMsg:
>29e5	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.29ea					_EHAtMsg1:
.29ea					WriteIntXA:
.29ea	da		phx				phx
.29eb	48		pha				pha
.29ec	a2 08		ldx #$08			ldx 	#IFR0
.29ee	20 7a 31	jsr $317a			jsr 	IFloatPushRx
.29f1	68		pla				pla
.29f2	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.29f5	68		pla				pla
.29f6	85 09		sta $09				sta 	IFR0+IM1
.29f8	a9 0a		lda #$0a			lda 	#10 						; decimal
.29fa	20 cd 2f	jsr $2fcd			jsr 	IFloatIntegerToStringR0	 	; convert
.29fd	20 f7 ff	jsr $fff7			jsr 	OSWriteString 				; print
.2a00	a2 08		ldx #$08			ldx 	#IFR0
.2a02	20 9b 31	jsr $319b			jsr 	IFloatPullRx
.2a05	60		rts				rts
.2a06					NotImplemented:
.2a06	4c 16 27	jmp $2716		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2a09					WarmStart:
.2a09	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2a0b	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2a0e	a9 6b		lda #$6b			lda 	#"k"
.2a10	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2a13					WarmStartNewLine:
.2a13	a9 0d		lda #$0d			lda 	#13
.2a15	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2a18					WarmStartNoPrompt:
.2a18	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2a1a	9a		txs				txs
.2a1b	20 e2 ff	jsr $ffe2			jsr 	OSScreenLine 				; edit
.2a1e	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2a1f	d0 01		bne $2a22			bne 	_WSSkip
.2a21	c8		iny				iny
.2a22					_WSSkip:
.2a22	86 26		stx $26				stx 	zTemp2 						; save address
.2a24	84 27		sty $27				sty 	zTemp2+1
.2a26	b2 26		lda ($26)			lda 	(zTemp2)
.2a28	f0 ee		beq $2a18			beq 	WarmStartNoPrompt 			; ignore empty line.
.2a2a	a2 57		ldx #$57			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2a2c	a0 2a		ldy #$2a			ldy 	#TOKGetCharacter >> 8
.2a2e	38		sec				sec
.2a2f	20 0e 21	jsr $210e			jsr 	TOKTokenise
.2a32	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2a35	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2a38	d0 0b		bne $2a45			bne 	_WSLineEdit
.2a3a	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2a3c	85 18		sta $18				sta 	codePtr
.2a3e	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2a40	85 19		sta $19				sta 	codePtr+1
.2a42	4c d7 14	jmp $14d7			jmp 	RUNNewLine
.2a45					_WSLineEdit:
.2a45	20 e9 1f	jsr $1fe9			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2a48	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2a4b	c9 04		cmp #$04			cmp 	#4
.2a4d	f0 03		beq $2a52			beq 	_WSNoInsert
.2a4f	20 33 20	jsr $2033			jsr 	PGMInsertLine				; if not, maybe insert
.2a52					_WSNoInsert:
.2a52	20 3c 10	jsr $103c			jsr 	ClearCode 					; clear variables etc.
.2a55	80 c1		bra $2a18			bra 	WarmStartNoPrompt
.2a57					TOKGetCharacter:
.2a57	b2 26		lda ($26)			lda 	(zTemp2)
.2a59	90 06		bcc $2a61			bcc 	_GSNoIncrement
.2a5b	e6 26		inc $26				inc 	zTemp2
.2a5d	d0 02		bne $2a61			bne 	_GSNoIncrement
.2a5f	e6 27		inc $27				inc 	zTemp2+1
.2a61					_GSNoIncrement:
.2a61	c9 00		cmp #$00			cmp 	#0
.2a63	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2a64					VARArrayLookup:
.2a64	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2a66	86 23		stx $23				stx 	zTemp0+1
.2a68	b2 22		lda ($22)			lda 	(zTemp0)
.2a6a	48		pha				pha
.2a6b	5a		phy				phy
.2a6c	a0 01		ldy #$01			ldy 	#1
.2a6e	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a70	7a		ply				ply
.2a71	48		pha				pha
.2a72	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2a75	68		pla				pla 								; array address to zTemp0
.2a76	85 23		sta $23				sta 	zTemp0+1
.2a78	68		pla				pla
.2a79	85 22		sta $22				sta 	zTemp0
.2a7b	5a		phy				phy 								; save codePtr position.
.2a7c	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2a7e	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a80	48		pha				pha 								; save bit 15 on stack.
.2a81	29 7f		and #$7f			and 	#$7F
.2a83	85 24		sta $24				sta 	zTemp1
.2a85	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2a87	d2 22		cmp ($22)			cmp 	(zTemp0)
.2a89	a5 09		lda $09				lda 	IFR0+IM1
.2a8b	e5 24		sbc $24				sbc 	zTemp1
.2a8d	b0 3a		bcs $2ac9			bcs 	_VALIndex
.2a8f	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2a91	c9 40		cmp #$40			cmp 	#$40
.2a93	b0 34		bcs $2ac9			bcs 	_VALIndex
.2a95	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2a97	26 09		rol $09				rol 	IFR0+IM1
.2a99	fa		plx				plx 								; get msb of size -> X
.2a9a	30 04		bmi $2aa0			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2a9c	06 08		asl $08				asl 	IFR0+IM0
.2a9e	26 09		rol $09				rol 	IFR0+IM1
.2aa0					_VARNotX4:
.2aa0	18		clc				clc 								; add the two for the size bytes
.2aa1	a5 08		lda $08				lda 	IFR0+IM0
.2aa3	69 02		adc #$02			adc 	#2
.2aa5	85 08		sta $08				sta 	IFR0+IM0
.2aa7	90 02		bcc $2aab			bcc 	_VARNoCarry1
.2aa9	e6 09		inc $09				inc 	IFR0+IM1
.2aab					_VARNoCarry1:
.2aab	18		clc				clc 								; calculate the element address and push to stack.
.2aac	a5 08		lda $08				lda 	IFR0+IM0
.2aae	65 22		adc $22				adc 	zTemp0
.2ab0	48		pha				pha
.2ab1	a5 09		lda $09				lda 	IFR0+IM1
.2ab3	65 23		adc $23				adc 	zTemp0+1
.2ab5	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2ab7	30 04		bmi $2abd			bmi 	_VARHasSubLevel
.2ab9	aa		tax				tax 								; address in XA
.2aba	68		pla				pla
.2abb	7a		ply				ply 								; restore Y and exit
.2abc	60		rts				rts
.2abd					_VARHasSubLevel:
.2abd	aa		tax				tax 								; get link address in XA
.2abe	68		pla				pla
.2abf	7a		ply				ply 								; restore code position.
.2ac0	48		pha				pha
.2ac1	20 91 28	jsr $2891			jsr 	ERRCheckComma 				; comma required.
.2ac4	68		pla				pla
.2ac5	20 64 2a	jsr $2a64			jsr 	VARArrayLookup 				; call it recursively
.2ac8	60		rts				rts
.2ac9					_VALIndex:
.2ac9	4c b0 27	jmp $27b0		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2acc					VARCreate:
.2acc	5a		phy				phy
.2acd	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2acf	a2 00		ldx #$00			ldx 	#0
.2ad1	20 59 10	jsr $1059			jsr 	AllocateMemory
.2ad4	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.2ad6	86 25		stx $25				stx 	zTemp1+1
.2ad8	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2ada	ad 2a 06	lda $062a			lda 	VARHash
.2add	91 24		sta ($24),y			sta 	(zTemp1),y
.2adf	c8		iny				iny 								; put address of name into +3,+4
.2ae0	ad 28 06	lda $0628			lda 	VARNameAddress
.2ae3	91 24		sta ($24),y			sta 	(zTemp1),y
.2ae5	c8		iny				iny
.2ae6	ad 29 06	lda $0629			lda 	VARNameAddress+1
.2ae9	91 24		sta ($24),y			sta 	(zTemp1),y
.2aeb	ad 2b 06	lda $062b			lda 	VARType
.2aee	29 01		and #$01			and 	#1
.2af0	f0 06		beq $2af8			beq 	_CVNotString
.2af2	a0 08		ldy #$08			ldy 	#5+3
.2af4	a9 80		lda #$80			lda 	#$80
.2af6	91 24		sta ($24),y			sta 	(zTemp1),y
.2af8					_CVNotString:
.2af8	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2afb	85 22		sta $22				sta 	zTemp0
.2afd	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.2b00	85 23		sta $23				sta 	zTemp0+1
.2b02	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2b04	b2 22		lda ($22)			lda 	(zTemp0)
.2b06	92 24		sta ($24)			sta 	(zTemp1)
.2b08	b1 22		lda ($22),y			lda 	(zTemp0),y
.2b0a	91 24		sta ($24),y			sta 	(zTemp1),y
.2b0c	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2b0e	92 22		sta ($22)			sta 	(zTemp0)
.2b10	a5 25		lda $25				lda 	zTemp1+1
.2b12	91 22		sta ($22),y			sta 	(zTemp0),y
.2b14	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2b16	a6 25		ldx $25				ldx 	zTemp1+1
.2b18	18		clc				clc 								; add 5 to point to the data.
.2b19	69 05		adc #$05			adc 	#5
.2b1b	90 01		bcc $2b1e			bcc 	_VCNoCarry
.2b1d	e8		inx				inx
.2b1e					_VCNoCarry:
.2b1e	7a		ply				ply
.2b1f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2b20					VARFind:
.2b20	5a		phy				phy
.2b21	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2b23	b1 22		lda ($22),y			lda 	(zTemp0),y
.2b25	85 25		sta $25				sta 	zTemp1+1
.2b27	f0 1c		beq $2b45			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2b29	b2 22		lda ($22)			lda 	(zTemp0)
.2b2b	85 24		sta $24				sta 	zTemp1
.2b2d					_VFLoop:
.2b2d	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2b2f	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b31	cd 2a 06	cmp $062a			cmp 	VARHash
.2b34	f0 12		beq $2b48			beq 	_VFHashesMatch 				; if so, check the name.
.2b36					_VFNext:
.2b36	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2b38	aa		tax				tax
.2b39	a0 01		ldy #$01			ldy 	#1
.2b3b	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b3d	85 25		sta $25				sta 	zTemp1+1
.2b3f	86 24		stx $24				stx 	zTemp1
.2b41	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2b43	d0 e8		bne $2b2d			bne 	_VFLoop
.2b45					_VFExitFail:
.2b45	7a		ply				ply
.2b46	18		clc				clc
.2b47	60		rts				rts
.2b48					_VFHashesMatch:
.2b48	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2b4a	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b4c	85 26		sta $26				sta 	zTemp2
.2b4e	c8		iny				iny
.2b4f	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b51	85 27		sta $27				sta 	zTemp2+1
.2b53	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2b55					_VFNameCompLoop:
.2b55	c8		iny				iny 								; char at a time
.2b56	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2b59	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2b5b	d0 d9		bne $2b36			bne 	_VFNext						; next entry if different.
.2b5d	c9 7c		cmp #$7c			cmp 	#$7C
.2b5f	90 f4		bcc $2b55			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2b61	18		clc				clc
.2b62	a5 24		lda $24				lda 	zTemp1
.2b64	a6 25		ldx $25				ldx 	zTemp1+1
.2b66	69 05		adc #$05			adc 	#5
.2b68	90 01		bcc $2b6b			bcc 	_VFNNoCarry
.2b6a	e8		inx				inx
.2b6b					_VFNNoCarry:
.2b6b	7a		ply				ply
.2b6c	38		sec				sec
.2b6d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2b6e					VARGetInfo:
.2b6e	98		tya				tya 								; calculate the address of the identifier start.
.2b6f	18		clc				clc
.2b70	65 18		adc $18				adc 	codePtr
.2b72	8d 28 06	sta $0628			sta 	VARNameAddress
.2b75	a5 19		lda $19				lda 	codePtr+1
.2b77	69 00		adc #$00			adc 	#0
.2b79	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2b7c	9c 2a 06	stz $062a			stz 	VARHash
.2b7f	a2 00		ldx #$00			ldx 	#0
.2b81					_VARCopyName:
.2b81	18		clc				clc 								; update the sum hash.
.2b82	ad 2a 06	lda $062a			lda 	VARHash
.2b85	71 18		adc ($18),y			adc 	(codePtr),y
.2b87	8d 2a 06	sta $062a			sta 	VARHash
.2b8a	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2b8c	c8		iny				iny
.2b8d	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2b90	e8		inx				inx
.2b91	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2b93	90 ec		bcc $2b81			bcc 	_VARCopyName
.2b95	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2b98	29 03		and #$03			and 	#3 							; type is 0-3
.2b9a	0a		asl a				asl 	a
.2b9b	0a		asl a				asl 	a
.2b9c	85 22		sta $22				sta 	zTemp0
.2b9e	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2ba1	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2ba3	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2ba5	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2ba6	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2ba8	85 22		sta $22				sta 	zTemp0
.2baa	8d 4c 06	sta $064c			sta 	VARHashEntry
.2bad	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2baf	69 00		adc #$00			adc 	#0
.2bb1	85 23		sta $23				sta 	zTemp0+1
.2bb3	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2bb6	60		rts				rts
.2bb7					VARClearHashTables:
.2bb7	a2 00		ldx #$00			ldx 	#0
.2bb9					_VCHRLoop:
.2bb9	a9 00		lda #$00			lda 	#0
.2bbb	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2bbe	e8		inx				inx
.2bbf	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2bc1	d0 f6		bne $2bb9			bne 	_VCHRLoop
.2bc3	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2bc4					VARCheckSimple:
.2bc4	aa		tax				tax 								; save in X
.2bc5	b1 18		lda ($18),y			lda 	(codePtr),y
.2bc7	c9 7c		cmp #$7c			cmp 	#$7C
.2bc9	d0 15		bne $2be0			bne 	_VCSComplex
.2bcb	c8		iny				iny 								; consume the second byte, the type.
.2bcc	8a		txa				txa  								; character (40-7F) x 4
.2bcd	0a		asl a				asl 	a
.2bce	0a		asl a				asl  	a
.2bcf	18		clc				clc
.2bd0	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2bd2	85 08		sta $08				sta 	IFR0+IM0
.2bd4	a9 06		lda #$06			lda 	#FastVariables >> 8
.2bd6	69 00		adc #$00			adc 	#0
.2bd8	85 09		sta $09				sta 	IFR0+IM1
.2bda	64 0a		stz $0a				stz 	IFR0+IM2
.2bdc	64 0b		stz $0b				stz 	IFR0+IExp
.2bde	38		sec				sec 								; it's a reference
.2bdf	60		rts				rts
.2be0					_VCSComplex:
.2be0	88		dey				dey	 								; extract information.
.2be1	20 6e 2b	jsr $2b6e			jsr 	VARGetInfo
.2be4	20 20 2b	jsr $2b20			jsr 	VARFind 					; search for variable
.2be7	b0 0a		bcs $2bf3			bcs 	_VCSHaveVariable
.2be9	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2bec	29 02		and #$02			and 	#2
.2bee	d0 25		bne $2c15			bne 	_VCNoCreate
.2bf0	20 cc 2a	jsr $2acc			jsr 	VARCreate 					; create variable
.2bf3					_VCSHaveVariable:
.2bf3	48		pha				pha 								; save LSB on the stack
.2bf4	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2bf7	6a		ror a				ror 	a
.2bf8	6a		ror a				ror 	a
.2bf9	68		pla				pla 								; restore LSB
.2bfa	90 08		bcc $2c04			bcc 	_VCSNotArray 				; skip if not an array
.2bfc	20 64 2a	jsr $2a64			jsr 	VARArrayLookup 				; look for subscripts.
.2bff	48		pha				pha 								; check )
.2c00	20 89 28	jsr $2889			jsr 	ERRCheckRParen
.2c03	68		pla				pla
.2c04					_VCSNotArray:
.2c04	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2c06	85 08		sta $08				sta 	IFR0+IM0
.2c08	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2c0a	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2c0d	6a		ror a				ror 	a
.2c0e	a9 00		lda #$00			lda 	#0
.2c10	6a		ror a				ror 	a 							; now $00 or $80
.2c11	85 0b		sta $0b				sta 	IFR0+IExp
.2c13	38		sec				sec 								; it's a reference
.2c14	60		rts				rts
.2c15					_VCNoCreate:
.2c15	4c d6 27	jmp $27d6		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2c18					IFInitialise:
.2c18	9c de 06	stz $06de			stz 	IFStackIndex 				; reset the internal stack.
.2c1b	60		rts				rts
.2c1c					IFloatSubtract:
.2c1c	da		phx				phx
.2c1d	a2 08		ldx #$08			ldx 	#IFR0
.2c1f	20 36 32	jsr $3236			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2c22	fa		plx				plx
.2c23					IFloatAdd:
.2c23	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2c25	05 0b		ora $0b				ora 	IFR0+IExp
.2c27	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2c29	d0 4e		bne $2c79			bne 	_IFloatAddDecimals 			; floating point version.
.2c2b					_IFAddSubMantissa:
.2c2b	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2c2d	45 0b		eor $0b				eor 	IFR0+IExp
.2c2f	29 40		and #$40			and 	#IFSign
.2c31	d0 21		bne $2c54			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2c33	18		clc				clc 								; do the actual addition
.2c34	a5 08		lda $08				lda 	IFR0+IM0
.2c36	75 00		adc $00,x			adc 		IM0,x
.2c38	85 08		sta $08				sta 	IFR0+IM0
.2c3a	a5 09		lda $09				lda 	IFR0+IM1
.2c3c	75 01		adc $01,x			adc 		IM1,x
.2c3e	85 09		sta $09				sta 	IFR0+IM1
.2c40	a5 0a		lda $0a				lda 	IFR0+IM2
.2c42	75 02		adc $02,x			adc 		IM2,x
.2c44	85 0a		sta $0a				sta 	IFR0+IM2
.2c46	10 29		bpl $2c71			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2c48	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2c4a	20 5a 32	jsr $325a			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2c4d	20 84 32	jsr $3284			jsr 	IFloatIncExponent
.2c50	d0 1f		bne $2c71			bne 	_IFloatAddExit
.2c52	38		sec				sec 								; overflowed numerically.
.2c53	60		rts				rts
.2c54					_IFloatSubMantissa:
.2c54	38		sec				sec 								; do the subtraction R0-Rx
.2c55	a5 08		lda $08				lda 	IFR0+IM0
.2c57	f5 00		sbc $00,x			sbc 		IM0,x
.2c59	85 08		sta $08				sta 	IFR0+IM0
.2c5b	a5 09		lda $09				lda 	IFR0+IM1
.2c5d	f5 01		sbc $01,x			sbc 		IM1,x
.2c5f	85 09		sta $09				sta 	IFR0+IM1
.2c61	a5 0a		lda $0a				lda 	IFR0+IM2
.2c63	f5 02		sbc $02,x			sbc 		IM2,x
.2c65	85 0a		sta $0a				sta 	IFR0+IM2
.2c67	b0 08		bcs $2c71			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2c69	a2 08		ldx #$08			ldx 	#IFR0
.2c6b	20 3e 32	jsr $323e			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2c6e	20 36 32	jsr $3236			jsr 	IFloatNegate 				; negate the result using sign bit.
.2c71					_IFloatAddExit:
.2c71	18		clc				clc
.2c72	60		rts				rts
.2c73					_IFloatZeroAdd:
.2c73	fa		plx				plx 								; return this value in R0
.2c74	20 bc 31	jsr $31bc			jsr 	IFloatCopyFromRegister
.2c77	18		clc				clc
.2c78	60		rts				rts
.2c79					_IFloatAddDecimals:
.2c79	20 24 32	jsr $3224			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2c7c	f0 f3		beq $2c71			beq 	_IFloatAddExit
.2c7e	20 62 32	jsr $3262			jsr 	IFloatNormalise 			; normalise RX
.2c81	da		phx				phx 								; normalise R0
.2c82	a2 08		ldx #$08			ldx 	#IFR0
.2c84	20 24 32	jsr $3224			jsr 	IFloatCheckZero
.2c87	f0 ea		beq $2c73			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2c89	20 62 32	jsr $3262			jsr 	IFloatNormalise
.2c8c	fa		plx				plx
.2c8d	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2c8f	29 3f		and #$3f			and 	#IFXMask
.2c91	38		sec				sec
.2c92	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2c94	85 20		sta $20				sta 	iTemp0
.2c96	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2c98	29 3f		and #$3f			and 	#IFXMask
.2c9a	38		sec				sec
.2c9b	e9 20		sbc #$20			sbc 	#$20
.2c9d	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2c9f	b0 02		bcs $2ca3			bcs 	_IFloatHaveLarger
.2ca1	a5 20		lda $20				lda 	iTemp0
.2ca3					_IFloatHaveLarger:
.2ca3	18		clc				clc 								; get the actual one back.
.2ca4	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2ca6	20 b3 2c	jsr $2cb3			jsr 	_IFShiftXToA
.2ca9	da		phx				phx
.2caa	a2 08		ldx #$08			ldx 	#IFR0
.2cac	20 b3 2c	jsr $2cb3			jsr 	_IFShiftXToA
.2caf	fa		plx				plx
.2cb0	4c 2b 2c	jmp $2c2b			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2cb3					_IFShiftXToA:
.2cb3	8d d6 06	sta $06d6			sta 	IFTarget
.2cb6	20 24 32	jsr $3224			jsr 	IFloatCheckZero 			; check adding zero ?
.2cb9	f0 11		beq $2ccc			beq 	_IFSXExit
.2cbb					_IFSXLoop:
.2cbb	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2cbd	29 3f		and #$3f			and 	#IFXMask
.2cbf	cd d6 06	cmp $06d6			cmp 	IFTarget
.2cc2	f0 08		beq $2ccc			beq 	_IFSXExit
.2cc4	20 5a 32	jsr $325a			jsr 	IFloatShiftRight
.2cc7	20 84 32	jsr $3284			jsr 	IFloatIncExponent
.2cca	80 ef		bra $2cbb			bra 	_IFSXLoop
.2ccc					_IFSXExit:
.2ccc	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2ccd					IFloatMultiply:
.2ccd	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2cd0	20 85 2d	jsr $2d85			jsr 	IFCalculateNewSign
.2cd3	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2cd5	05 0b		ora $0b				ora 	IFR0+IExp
.2cd7	29 3f		and #$3f			and 	#IFXMask
.2cd9	15 01		ora $01,x			ora 	IM1,x
.2cdb	05 09		ora $09				ora 	IFR0+IM1
.2cdd	15 02		ora $02,x			ora 	IM2,x
.2cdf	05 0a		ora $0a				ora 	IFR0+IM2
.2ce1	d0 0a		bne $2ced			bne 	_IFMStandard
.2ce3	20 07 32	jsr $3207			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2ce6	ad d8 06	lda $06d8			lda 	IFNewSign
.2ce9	85 0b		sta $0b				sta 	IFR0+IExp
.2ceb	18		clc				clc
.2cec	60		rts				rts
.2ced					_IFMStandard:
.2ced	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2cef	20 7c 2d	jsr $2d7c			jsr 	IFMSignExtend
.2cf2	8d d7 06	sta $06d7			sta 	IFNewExponent
.2cf5	a5 0b		lda $0b				lda 	IFR0+IExp
.2cf7	20 7c 2d	jsr $2d7c			jsr 	IFMSignExtend
.2cfa	18		clc				clc
.2cfb	6d d7 06	adc $06d7			adc 	IFNewExponent
.2cfe	8d d7 06	sta $06d7			sta 	IFNewExponent
.2d01	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2d03	20 cd 31	jsr $31cd			jsr 	IFloatCopyToRegister
.2d06	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2d08	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.2d0b					_IFMLoop:
.2d0b	a2 14		ldx #$14			ldx 	#IFRTemp
.2d0d	20 24 32	jsr $3224			jsr 	IFloatCheckZero
.2d10	f0 3a		beq $2d4c			beq 	_IFMExit
.2d12	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2d15	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2d17	10 03		bpl $2d1c			bpl	 	_IFMTargetOkay
.2d19	20 6d 2d	jsr $2d6d			jsr 	_IFMShiftAll
.2d1c					_IFMTargetOkay:
.2d1c	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2d1e	29 01		and #$01			and 	#1
.2d20	f0 16		beq $2d38			beq 	_IFMNoAdd
.2d22	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2d25	18		clc				clc
.2d26	a5 08		lda $08				lda 	IFR0+IM0
.2d28	75 00		adc $00,x			adc 		IM0,x
.2d2a	85 08		sta $08				sta 	IFR0+IM0
.2d2c	a5 09		lda $09				lda 	IFR0+IM1
.2d2e	75 01		adc $01,x			adc 		IM1,x
.2d30	85 09		sta $09				sta 	IFR0+IM1
.2d32	a5 0a		lda $0a				lda 	IFR0+IM2
.2d34	75 02		adc $02,x			adc 		IM2,x
.2d36	85 0a		sta $0a				sta 	IFR0+IM2
.2d38					_IFMNoAdd:
.2d38	a5 0a		lda $0a				lda 	IFR0+IM2
.2d3a	10 03		bpl $2d3f			bpl 	_IFMResultOkay
.2d3c	20 6d 2d	jsr $2d6d			jsr 	_IFMShiftAll
.2d3f					_IFMResultOkay:
.2d3f	a2 14		ldx #$14			ldx 	#IFRTemp
.2d41	20 5a 32	jsr $325a			jsr 	IFloatShiftRight
.2d44	ae d6 06	ldx $06d6			ldx 	IFTarget
.2d47	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.2d4a	80 bf		bra $2d0b			bra 	_IFMLoop
.2d4c					_IFMExit:
.2d4c	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2d4f	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2d51	90 0f		bcc $2d62			bcc 	_IFMOkay
.2d53	c9 e0		cmp #$e0			cmp 	#$E0
.2d55	b0 0b		bcs $2d62			bcs 	_IFMOkay
.2d57	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2d59	f0 10		beq $2d6b			beq 	_IFMError
.2d5b	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2d5d	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.2d60	18		clc				clc
.2d61	60		rts				rts
.2d62					_IFMOkay:
.2d62	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2d64	0d d8 06	ora $06d8			ora 	IFNewSign
.2d67	85 0b		sta $0b				sta 	IFR0+IExp
.2d69	18		clc				clc
.2d6a	60		rts				rts
.2d6b					_IFMError:
.2d6b	38		sec				sec
.2d6c	60		rts				rts
.2d6d					_IFMShiftAll:
.2d6d	a2 08		ldx #$08			ldx 	#IFR0
.2d6f	20 5a 32	jsr $325a			jsr 	IFloatShiftRight
.2d72	ae d6 06	ldx $06d6			ldx 	IFTarget
.2d75	20 5a 32	jsr $325a			jsr 	IFloatShiftRight
.2d78	ee d7 06	inc $06d7			inc 	IFNewExponent
.2d7b	60		rts				rts
.2d7c					IFMSignExtend:
.2d7c	29 3f		and #$3f			and 	#IFXMask
.2d7e	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2d80	90 02		bcc $2d84			bcc 	_IFMNoSXX
.2d82	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2d84					_IFMNoSXX:
.2d84	60		rts				rts
.2d85					IFCalculateNewSign:
.2d85	b5 03		lda $03,x			lda 	IExp,x
.2d87	45 0b		eor $0b				eor 	IFR0+IExp
.2d89	29 40		and #$40			and 	#IFSign
.2d8b	8d d8 06	sta $06d8			sta 	IFNewSign
.2d8e	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2d8f					IFloatDivideInteger:
.2d8f	20 a8 2d	jsr $2da8			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2d92	b0 06		bcs $2d9a			bcs 	_IFDIExit
.2d94	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2d96	20 bc 31	jsr $31bc			jsr 	IFloatCopyFromRegister
.2d99	18		clc				clc
.2d9a					_IFDIExit:
.2d9a	60		rts				rts
.2d9b					IFloatModulusInteger:
.2d9b	20 a8 2d	jsr $2da8			jsr 	IFloatDivideIntegerCommon
.2d9e	b0 07		bcs $2da7			bcs 	_IFMIExit
.2da0	ae d6 06	ldx $06d6			ldx 	IFTarget
.2da3	20 bc 31	jsr $31bc			jsr 	IFloatCopyFromRegister
.2da6	18		clc				clc
.2da7					_IFMIExit:
.2da7	60		rts				rts
.2da8					IFloatDivideIntegerCommon:
.2da8	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2dab	20 85 2d	jsr $2d85			jsr 	IFCalculateNewSign 			; calculate sign of result
.2dae	20 d6 2d	jsr $2dd6			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2db1	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2db3	20 24 32	jsr $3224			jsr 	IFloatCheckZero
.2db6	f0 1c		beq $2dd4			beq 	_IFDIDivZero
.2db8	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2dbb	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.2dbe	5a		phy				phy
.2dbf	a0 18		ldy #$18			ldy 	#24
.2dc1					_IFDILoop:
.2dc1	20 e7 2d	jsr $2de7			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2dc4	20 f3 2d	jsr $2df3			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2dc7	88		dey				dey
.2dc8	d0 f7		bne $2dc1			bne 	_IFDILoop 					; do it 24 times
.2dca	7a		ply				ply
.2dcb	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2dce	29 40		and #$40			and 	#IFSign
.2dd0	85 17		sta $17				sta 	IFRTemp+IExp
.2dd2	18		clc				clc 								; is okay.
.2dd3	60		rts				rts
.2dd4					_IFDIDivZero:
.2dd4	38		sec				sec
.2dd5	60		rts				rts
.2dd6					IFDCopyRXToRTemp:
.2dd6	b5 00		lda $00,x			lda 	IM0,x
.2dd8	85 14		sta $14				sta 	IFRTemp+IM0
.2dda	b5 01		lda $01,x			lda 	IM1,x
.2ddc	85 15		sta $15				sta 	IFRTemp+IM1
.2dde	b5 02		lda $02,x			lda 	IM2,x
.2de0	85 16		sta $16				sta 	IFRTemp+IM2
.2de2	b5 03		lda $03,x			lda 	IExp,x
.2de4	85 17		sta $17				sta 	IFRTemp+IExp
.2de6	60		rts				rts
.2de7					IFDShiftSTempS1Left:
.2de7	a2 14		ldx #$14			ldx 	#IFRTemp
.2de9	20 52 32	jsr $3252			jsr 	IFloatShiftLeft
.2dec	ae d6 06	ldx $06d6			ldx 	IFTarget
.2def	20 53 32	jsr $3253			jsr 	IFloatRotateLeft
.2df2	60		rts				rts
.2df3					IFDTrySubtract:
.2df3	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2df6	38		sec				sec 								; subtract, saving the results on the stack.
.2df7	b5 00		lda $00,x			lda 	IM0,x
.2df9	e5 08		sbc $08				sbc 	IFR0+IM0
.2dfb	48		pha				pha
.2dfc	b5 01		lda $01,x			lda 	IM1,x
.2dfe	e5 09		sbc $09				sbc 	IFR0+IM1
.2e00	48		pha				pha
.2e01	b5 02		lda $02,x			lda 	IM2,x
.2e03	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2e05	b0 03		bcs $2e0a			bcs 	_IFDCanSubtract
.2e07	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2e08	68		pla				pla
.2e09	60		rts				rts
.2e0a					_IFDCanSubtract:
.2e0a	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2e0c	68		pla				pla
.2e0d	95 01		sta $01,x			sta 	IM1,x
.2e0f	68		pla				pla
.2e10	95 00		sta $00,x			sta 	IM0,x
.2e12	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2e14	d0 06		bne $2e1c			bne 	_IFDCSExit
.2e16	e6 15		inc $15				inc 	IFRTemp+IM1
.2e18	d0 02		bne $2e1c			bne 	_IFDCSExit
.2e1a	e6 16		inc $16				inc 	IFRTemp+IM2
.2e1c					_IFDCSExit:
.2e1c	60		rts				rts
.2e1d					IFloatBitwiseAnd:
.2e1d	5a		phy				phy
.2e1e	20 62 2e	jsr $2e62			jsr 	IFPreProcessBitwise 		; set up everything.
.2e21	d0 0f		bne $2e32			bne 	_IFBAExit
.2e23					_IFBALoop:
.2e23	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2e26	35 00		and $00,x			and 	IM0,x
.2e28	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2e2b	e8		inx				inx
.2e2c	c8		iny				iny
.2e2d	c0 03		cpy #$03			cpy 	#3
.2e2f	d0 f2		bne $2e23			bne 	_IFBALoop
.2e31	18		clc				clc
.2e32					_IFBAExit:
.2e32	7a		ply				ply
.2e33	60		rts				rts
.2e34					IFloatBitwiseOr:
.2e34	5a		phy				phy
.2e35	20 62 2e	jsr $2e62			jsr 	IFPreProcessBitwise 		; set up everything.
.2e38	d0 0f		bne $2e49			bne 	_IFBAExit
.2e3a					_IFBALoop:
.2e3a	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2e3d	15 00		ora $00,x			ora 	IM0,x
.2e3f	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2e42	e8		inx				inx
.2e43	c8		iny				iny
.2e44	c0 03		cpy #$03			cpy 	#3
.2e46	d0 f2		bne $2e3a			bne 	_IFBALoop
.2e48	18		clc				clc
.2e49					_IFBAExit:
.2e49	7a		ply				ply
.2e4a	60		rts				rts
.2e4b					IFloatBitwiseXor:
.2e4b	5a		phy				phy
.2e4c	20 62 2e	jsr $2e62			jsr 	IFPreProcessBitwise 		; set up everything.
.2e4f	d0 0f		bne $2e60			bne 	_IFBAExit
.2e51					_IFBALoop:
.2e51	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2e54	55 00		eor $00,x			eor 	IM0,x
.2e56	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2e59	e8		inx				inx
.2e5a	c8		iny				iny
.2e5b	c0 03		cpy #$03			cpy 	#3
.2e5d	d0 f2		bne $2e51			bne 	_IFBALoop
.2e5f	18		clc				clc
.2e60					_IFBAExit:
.2e60	7a		ply				ply
.2e61	60		rts				rts
.2e62					IFPreProcessBitwise:
.2e62	a0 00		ldy #$00			ldy 	#0 							; set index.
.2e64	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2e66	15 03		ora $03,x			ora 	IExp,x
.2e68	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2e6a	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2e6c	38		sec				sec 								; carry set just in cases.
.2e6d	60		rts				rts
.2e6e					IFloatAbsoluteR0:
.2e6e	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2e70	29 bf		and #$bf			and 	#IFSign ^ 255
.2e72	85 0b		sta $0b				sta 	IFR0+IExp
.2e74	18		clc				clc
.2e75	60		rts				rts
.2e76					IFloatSquareRootR0:
.2e76	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2e78	20 24 32	jsr $3224			jsr 	IFloatCheckZero
.2e7b	f0 2e		beq $2eab			beq 	_IFSRZero
.2e7d	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2e7f	29 40		and #$40			and 	#IFSign
.2e81	d0 2f		bne $2eb2			bne 	_IFSRFail
.2e83	20 62 32	jsr $3262			jsr 	IFloatNormalise 			; it will work better !
.2e86	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2e88	20 cd 31	jsr $31cd			jsr 	IFloatCopyToRegister
.2e8b	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2e8d	20 7c 2d	jsr $2d7c			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2e90	18		clc				clc
.2e91	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2e93	85 0b		sta $0b				sta 	IFR0+IExp
.2e95	4a		lsr a				lsr 	a 							; which we can halve.
.2e96	38		sec				sec 								; convert back
.2e97	e9 17		sbc #$17			sbc 	#23
.2e99	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2e9b	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2e9d	20 b4 2e	jsr $2eb4			jsr 	_IFSRNewton
.2ea0	20 b4 2e	jsr $2eb4			jsr 	_IFSRNewton
.2ea3	20 b4 2e	jsr $2eb4			jsr 	_IFSRNewton
.2ea6	20 b4 2e	jsr $2eb4			jsr 	_IFSRNewton
.2ea9	18		clc				clc
.2eaa	60		rts				rts
.2eab					_IFSRZero:
.2eab	a2 08		ldx #$08			ldx 	#IFR0
.2ead	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.2eb0	18		clc				clc
.2eb1	60		rts				rts
.2eb2					_IFSRFail:
.2eb2	38		sec				sec
.2eb3	60		rts				rts
.2eb4					_IFSRNewton:
.2eb4	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2eb6	20 7a 31	jsr $317a			jsr 	IFloatPushRx
.2eb9	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2ebb	20 7a 31	jsr $317a			jsr 	IFloatPushRx
.2ebe	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2ec0	20 4f 2f	jsr $2f4f			jsr 	IFloatDivideFloat
.2ec3	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2ec5	20 9b 31	jsr $319b			jsr 	IFloatPullRx
.2ec8	20 23 2c	jsr $2c23			jsr 	IFloatAdd 					; now guess + original/guess
.2ecb	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2ecd	20 5a 32	jsr $325a			jsr 	IFloatShiftRight
.2ed0	a2 0c		ldx #$0c			ldx 	#IFR1
.2ed2	20 9b 31	jsr $319b			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2ed5	60		rts				rts
.2ed6					IFloatFractionalR0:
.2ed6	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2ed8	29 3f		and #$3f			and 	#IFXMask
.2eda	f0 17		beq $2ef3			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2edc	20 6e 2e	jsr $2e6e			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2edf	a2 08		ldx #$08			ldx 	#IFR0
.2ee1	20 62 32	jsr $3262			jsr 	IFloatNormalise 			; normalise R0
.2ee4	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2ee6	20 cd 31	jsr $31cd			jsr 	IFloatCopyToRegister
.2ee9	20 2c 2f	jsr $2f2c			jsr 	IFloatIntegerR0 			; take integer part of R0
.2eec	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2eee	20 1c 2c	jsr $2c1c			jsr 	IFloatSubtract
.2ef1	80 05		bra $2ef8			bra 	_FIPExit
.2ef3					_FIPZero:
.2ef3	a2 08		ldx #$08			ldx 	#IFR0
.2ef5	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.2ef8					_FIPExit:
.2ef8	18		clc				clc
.2ef9	60		rts				rts
.2efa					IFloatCompare:
.2efa	20 1c 2c	jsr $2c1c			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2efd	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2eff	05 0b		ora $0b				ora 	IFR0+IExp
.2f01	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2f03	29 3f		and #$3f			and 	#IFXMask
.2f05	d0 19		bne $2f20			bne 	_IFCNonInteger
.2f07	20 24 32	jsr $3224			jsr 	IFloatCheckZero 			; check if zero
.2f0a	f0 0f		beq $2f1b			beq 	_IFCZero
.2f0c					_IFCReturnSign:
.2f0c	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2f0e	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2f10	48		pha				pha
.2f11	a9 01		lda #$01			lda 	#1
.2f13	20 2d 32	jsr $322d			jsr 	IFloatSetByte 				; return to +1
.2f16	68		pla				pla 								; sign bit back
.2f17	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2f19	18		clc				clc
.2f1a	60		rts				rts
.2f1b					_IFCZero:
.2f1b	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.2f1e	18		clc				clc
.2f1f	60		rts				rts
.2f20					_IFCNonInteger:
.2f20	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2f22	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2f24	05 09		ora $09				ora 	IFR0+IM1
.2f26	05 0a		ora $0a				ora 	IFR0+IM2
.2f28	f0 f1		beq $2f1b			beq 	_IFCZero 					; near enough !
.2f2a	80 e0		bra $2f0c			bra 	_IFCReturnSign 				; return the sign of the difference.
.2f2c					IFloatIntegerR0:
.2f2c	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2f2e	29 3f		and #$3f			and 	#IFXMask
.2f30	f0 1b		beq $2f4d			beq 	_FIPExit 					; if so do nothing
.2f32	a2 08		ldx #$08			ldx 	#IFR0
.2f34	20 62 32	jsr $3262			jsr 	IFloatNormalise 			; normalise
.2f37	20 24 32	jsr $3224			jsr 	IFloatCheckZero 			; is it zero ?
.2f3a	f0 0e		beq $2f4a			beq 	_FIPZero 					; if so return zero.
.2f3c					_FIPShift:
.2f3c	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2f3e	29 20		and #$20			and 	#$20 						; still -ve
.2f40	f0 0b		beq $2f4d			beq 	_FIPExit
.2f42	20 5a 32	jsr $325a			jsr 	IFloatShiftRight 			; shift mantissa right
.2f45	20 84 32	jsr $3284			jsr 	IFloatIncExponent 			; bump exponent
.2f48	80 f2		bra $2f3c			bra 	_FIPShift
.2f4a					_FIPZero:
.2f4a	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.2f4d					_FIPExit:
.2f4d	18		clc				clc
.2f4e	60		rts				rts
.2f4f					IFloatDivideFloat:
.2f4f	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2f52	20 85 2d	jsr $2d85			jsr 	IFCalculateNewSign 			; calculate sign of result
.2f55	20 62 32	jsr $3262			jsr 	IFloatNormalise 			; normalise RX
.2f58	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2f5a	20 62 32	jsr $3262			jsr 	IFloatNormalise
.2f5d	20 24 32	jsr $3224			jsr 	IFloatCheckZero
.2f60	f0 56		beq $2fb8			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2f62	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2f64	20 7c 2d	jsr $2d7c			jsr 	IFMSignExtend
.2f67	8d d7 06	sta $06d7			sta 	IFNewExponent
.2f6a	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2f6d	b5 03		lda $03,x			lda 	IExp,x
.2f6f	20 7c 2d	jsr $2d7c			jsr 	IFMSignExtend
.2f72	38		sec				sec
.2f73	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2f76	38		sec				sec
.2f77	e9 17		sbc #$17			sbc 	#23
.2f79	8d d7 06	sta $06d7			sta 	IFNewExponent
.2f7c	20 ba 2f	jsr $2fba			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2f7f	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2f81	10 08		bpl $2f8b			bpl 	_IFDFNoShiftResult
.2f83	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2f85	20 5a 32	jsr $325a			jsr 	IFloatShiftRight
.2f88	ee d7 06	inc $06d7			inc 	IFNewExponent
.2f8b					_IFDFNoShiftResult:
.2f8b	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2f8e	30 06		bmi $2f96			bmi 	_IFDFCheckUnderflow
.2f90	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2f92	b0 24		bcs $2fb8			bcs 	_IFDFDivZero
.2f94	80 11		bra $2fa7			bra		_IFDFExit
.2f96					_IFDFCheckUnderflow:
.2f96	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2f99	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2f9b	b0 0a		bcs $2fa7			bcs 	_IFDFExit
.2f9d	ee d7 06	inc $06d7			inc 	IFNewExponent
.2fa0	a2 14		ldx #$14			ldx 	#IFRTemp
.2fa2	20 5a 32	jsr $325a			jsr 	IFloatShiftRight
.2fa5	80 ef		bra $2f96			bra 	_IFDFCheckUnderflow
.2fa7					_IFDFExit:
.2fa7	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2faa	29 3f		and #$3f			and 	#IFXMask
.2fac	0d d8 06	ora $06d8			ora 	IFNewSign
.2faf	85 17		sta $17				sta 	IFRTemp+IExp
.2fb1	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2fb3	20 bc 31	jsr $31bc			jsr 	IFloatCopyFromRegister
.2fb6	18		clc				clc
.2fb7	60		rts				rts
.2fb8					_IFDFDivZero:
.2fb8	38		sec				sec
.2fb9	60		rts				rts
.2fba					IFloatDivideSupport:
.2fba	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2fbc	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.2fbf	5a		phy				phy 								; main division loop x 23
.2fc0	a0 17		ldy #$17			ldy 	#23
.2fc2					_IFDSLoop:
.2fc2	20 f3 2d	jsr $2df3			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2fc5	20 e7 2d	jsr $2de7			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2fc8	88		dey				dey
.2fc9	d0 f7		bne $2fc2			bne 	_IFDSLoop 					; do it 24 times
.2fcb	7a		ply				ply
.2fcc	60		rts				rts
.2fcd					IFloatIntegerToStringR0:
.2fcd	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2fd0	20 ac 32	jsr $32ac			jsr 	IFloatBufferReset			; empty buffer
.2fd3	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2fd5	29 3f		and #$3f			and 	#IFXMask
.2fd7	d0 1d		bne $2ff6			bne 	_IFIFail
.2fd9	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2fdb	20 24 32	jsr $3224			jsr 	IFloatCheckZero
.2fde	f0 0e		beq $2fee			beq 	_IFINotNegative
.2fe0	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2fe2	29 40		and #$40			and 	#IFSign
.2fe4	f0 08		beq $2fee			beq 	_IFINotNegative
.2fe6	a9 2d		lda #$2d			lda 	#"-"						; output -
.2fe8	20 bb 32	jsr $32bb			jsr 	IFloatBufferWrite
.2feb	20 36 32	jsr $3236			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.2fee					_IFINotNegative:
.2fee	20 f8 2f	jsr $2ff8			jsr 	_IFIRecursiveConvert 		; start converting
.2ff1	20 b3 32	jsr $32b3			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.2ff4	18		clc				clc
.2ff5	60		rts				rts
.2ff6					_IFIFail:
.2ff6	38		sec				sec
.2ff7	60		rts				rts
.2ff8					_IFIRecursiveConvert:
.2ff8	a2 0c		ldx #$0c			ldx 	#IFR1
.2ffa	20 cd 31	jsr $31cd			jsr 	IFloatCopyToRegister 		; R0->R1
.2ffd	a2 08		ldx #$08			ldx 	#IFR0
.2fff	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.3002	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.3005	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.3007	20 8f 2d	jsr $2d8f			jsr 	IFloatDivideInteger
.300a	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.300c	20 24 32	jsr $3224			jsr 	IFloatCheckZero
.300f	f0 09		beq $301a			beq 	_IFIOutDigit
.3011	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.3013	48		pha				pha
.3014	20 f8 2f	jsr $2ff8			jsr 	_IFIRecursiveConvert 		; convert the divide result
.3017	68		pla				pla
.3018	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.301a					_IFIOutDigit:
.301a	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.301c	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.301e	90 02		bcc $3022			bcc 	_IFINotHex
.3020	69 06		adc #$06			adc 	#6
.3022					_IFINotHex:
.3022	69 30		adc #$30			adc 	#48
.3024	20 bb 32	jsr $32bb			jsr 	IFloatBufferWrite 			; write character to buffer.
.3027	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.3028					IFloatFloatToStringR0:
.3028	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.302a	20 7a 31	jsr $317a			jsr 	IFloatPushRx
.302d	20 cd 31	jsr $31cd			jsr 	IFloatCopyToRegister
.3030	20 2c 2f	jsr $2f2c			jsr 	IFloatIntegerR0				; make R0 integer
.3033	a9 0a		lda #$0a			lda 	#10 						; base 10.
.3035	20 cd 2f	jsr $2fcd			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.3038	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.303b	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.303d	29 3f		and #$3f			and 	#IFXMask
.303f	f0 44		beq $3085			beq 	_IFFSExit
.3041					_IFloatFracLoop:
.3041	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.3043	20 bc 31	jsr $31bc			jsr 	IFloatCopyFromRegister
.3046	20 d6 2e	jsr $2ed6			jsr 	IFloatFractionalR0
.3049	20 62 32	jsr $3262			jsr 	IFloatNormalise
.304c	a2 10		ldx #$10			ldx 	#IFR2
.304e	20 cd 31	jsr $31cd			jsr 	IFloatCopyToRegister 		; copy to back R2
.3051	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.3053	a9 0a		lda #$0a			lda 	#10
.3055	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.3058	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.305a	20 cd 2c	jsr $2ccd			jsr 	IFloatMultiply
.305d	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.305f	20 cd 31	jsr $31cd			jsr 	IFloatCopyToRegister
.3062	20 2c 2f	jsr $2f2c			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.3065	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 3 dp, no more
.3068	c9 03		cmp #$03			cmp 	#3
.306a	f0 16		beq $3082			beq 	_IFFSExitStripZero
.306c	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.306f	d0 05		bne $3076			bne 	_IFloatNotFirst
.3071	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3073	20 bb 32	jsr $32bb			jsr 	IFloatBufferWrite
.3076					_IFloatNotFirst:
.3076	ee da 06	inc $06da			inc 	IFloatDecimalCount
.3079	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.307b	09 30		ora #$30			ora 	#"0"						; ASCII
.307d	20 bb 32	jsr $32bb			jsr 	IFloatBufferWrite 			; write to the buffer.
.3080	80 bf		bra $3041			bra 	_IFloatFracLoop
.3082					_IFFSExitStripZero:
.3082	20 ca 32	jsr $32ca			jsr 	IFloatStripTrailingZeros
.3085					_IFFSExit:
.3085	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.3087	20 9b 31	jsr $319b			jsr 	IFloatPullRx
.308a	20 b3 32	jsr $32b3			jsr 	IFloatGetBufferAddress
.308d	18		clc				clc
.308e	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.308f					IFloatStringToFloatR0:
.308f	8d db 06	sta $06db			sta 	IFCount 					; save length and positions out.
.3092	86 20		stx $20				stx 	iTemp0
.3094	84 21		sty $21				sty 	iTemp0+1
.3096	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.3098	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.309b	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.309e	20 2b 31	jsr $312b			jsr 	IFSTFGetNext 				; get first
.30a1	f0 1b		beq $30be			beq 	_IFSTFFail 					; no character, fail.
.30a3	90 10		bcc $30b5			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.30a5	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.30a7	d0 15		bne $30be			bne 	_IFSTFFail
.30a9	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.30ab	8d dc 06	sta $06dc			sta 	IFSignFlag
.30ae					_IFSTFLoop:
.30ae	20 2b 31	jsr $312b			jsr 	IFSTFGetNext 				; get next character
.30b1	b0 0b		bcs $30be			bcs 	_IFSTFFail 					; bad character.
.30b3	f0 11		beq $30c6			beq 	_IFSTFExit 					; end of data
.30b5					_IFSTFHaveChar:
.30b5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.30b7	f0 08		beq $30c1			beq 	_IFSTFDecimal
.30b9	20 4f 31	jsr $314f			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.30bc	80 f0		bra $30ae			bra 	_IFSTFLoop 					; keep going until . or end.
.30be					_IFSTFFail:
.30be	38		sec				sec
.30bf	80 0d		bra $30ce			bra 	_IFSTFReturn
.30c1					_IFSTFDecimal:
.30c1	20 d6 30	jsr $30d6			jsr 	IFSTFDecimal 				; call the decimal places code.
.30c4	b0 08		bcs $30ce			bcs 	_IFSTFReturn 				; error
.30c6					_IFSTFExit:
.30c6	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.30c8	0d dc 06	ora $06dc			ora 	IFSignFlag
.30cb	85 0b		sta $0b				sta 	IFR0+IExp
.30cd	18		clc				clc
.30ce					_IFSTFReturn:
.30ce	60		rts				rts
.30cf					IFloatAddDecimalToR0:
.30cf	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.30d2	86 20		stx $20				stx 	iTemp0
.30d4	84 21		sty $21				sty 	iTemp0+1
.30d6					IFSTFDecimal:
.30d6	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.30d8	20 7a 31	jsr $317a			jsr 	IFloatPushRx
.30db	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.30dd	20 2b 32	jsr $322b			jsr 	IFloatSetZero
.30e0	9c dd 06	stz $06dd			stz 	IFDecimalPlaces 			; zero DP.
.30e3					_IFSTDLoop:
.30e3	20 2b 31	jsr $312b			jsr 	IFSTFGetNext 				; get next
.30e6	b0 41		bcs $3129			bcs 	_IFSTFFail2 				; bad character.
.30e8	f0 11		beq $30fb			beq 	_IFSTFComplete 				; end of data, work out the result.
.30ea	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.30ec	f0 39		beq $3127			beq 	_IFSTFExit2
.30ee	20 4f 31	jsr $314f			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.30f1	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.30f4	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.30f7	c9 03		cmp #$03			cmp 	#3
.30f9	90 e8		bcc $30e3			bcc 	_IFSTDLoop
.30fb					_IFSTFComplete:
.30fb	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.30fe	f0 27		beq $3127			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.3100	3a		dec a				dec 	a 							; table indexed from 1.
.3101	0a		asl a				asl 	a
.3102	0a		asl a				asl 	a
.3103	aa		tax				tax
.3104	bd 66 31	lda $3166,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.3107	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.3109	bd 67 31	lda $3167,x			lda 	TableTen+1,x
.310c	85 0d		sta $0d				sta  	IFR1+IM1
.310e	bd 68 31	lda $3168,x			lda 	TableTen+2,x
.3111	85 0e		sta $0e				sta  	IFR1+IM2
.3113	bd 69 31	lda $3169,x			lda 	TableTen+3,x
.3116	85 0f		sta $0f				sta  	IFR1+IExp
.3118	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.311a	20 cd 2c	jsr $2ccd			jsr 	IFloatMultiply
.311d	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.311f	20 9b 31	jsr $319b			jsr 	IFloatPullRx
.3122	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.3124	20 23 2c	jsr $2c23			jsr 	IFloatAdd
.3127					_IFSTFExit2:
.3127	18		clc				clc
.3128	60		rts				rts
.3129					_IFSTFFail2:
.3129	38		sec				sec
.312a	60		rts				rts
.312b					IFSTFGetNext:
.312b	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.312e	f0 19		beq $3149			beq 	_IFSTFReturnOk
.3130	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3132	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3134	d0 02		bne $3138			bne 	_IFSTFGNNoCarry
.3136	e6 21		inc $21				inc 	iTemp0+1
.3138					_IFSTFGNNoCarry:
.3138	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.313b	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.313d	f0 08		beq $3147			beq 	_IFSTFGOkay
.313f	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3141	90 08		bcc $314b			bcc 	_IFSTFGFail
.3143	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3145	b0 04		bcs $314b			bcs 	_IFSTFGFail
.3147					_IFSTFGOkay:
.3147	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3149					_IFSTFReturnOk:
.3149	18		clc				clc
.314a	60		rts				rts
.314b					_IFSTFGFail:
.314b	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.314d	38		sec				sec
.314e	60		rts				rts
.314f					IFSTFAddR0:
.314f	29 0f		and #$0f			and 	#15 						; to int value
.3151	48		pha				pha 								; save it.
.3152	a9 0a		lda #$0a			lda 	#10
.3154	a2 0c		ldx #$0c			ldx 	#IFR1
.3156	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.3159	20 cd 2c	jsr $2ccd			jsr 	IFloatMultiply
.315c	68		pla				pla
.315d	a2 0c		ldx #$0c			ldx 	#IFR1
.315f	20 2d 32	jsr $322d			jsr 	IFloatSetByte
.3162	20 23 2c	jsr $2c23			jsr 	IFloatAdd
.3165	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.3166					TableTen:
>3166	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>316a	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>316e	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3172	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3176	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.317a					IFloatPushRx:
.317a	5a		phy				phy
.317b	ac de 06	ldy $06de			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.317e	b5 00		lda $00,x			lda 	IM0,x
.3180	99 df 06	sta $06df,y			sta 	IFStack,y
.3183	b5 01		lda $01,x			lda 	IM1,x
.3185	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.3188	b5 02		lda $02,x			lda 	IM2,x
.318a	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.318d	b5 03		lda $03,x			lda 	IExp,x
.318f	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.3192	c8		iny				iny
.3193	c8		iny				iny
.3194	c8		iny				iny
.3195	c8		iny				iny
.3196	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.3199	7a		ply				ply
.319a	60		rts				rts
.319b					IFloatPullRx:
.319b	5a		phy				phy
.319c	ac de 06	ldy $06de			ldy 	IFStackIndex	 			; decrement SP
.319f	88		dey				dey
.31a0	88		dey				dey
.31a1	88		dey				dey
.31a2	88		dey				dey
.31a3	b9 df 06	lda $06df,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.31a6	95 00		sta $00,x			sta 	IM0,x
.31a8	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.31ab	95 01		sta $01,x			sta 	IM1,x
.31ad	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.31b0	95 02		sta $02,x			sta 	IM2,x
.31b2	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.31b5	95 03		sta $03,x			sta 	IExp,x
.31b7	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.31ba	7a		ply				ply
.31bb	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.31bc					IFloatCopyFromRegister:
.31bc	b5 00		lda $00,x			lda 	0,x
.31be	85 08		sta $08				sta 	IFR0
.31c0	b5 01		lda $01,x			lda 	1,x
.31c2	85 09		sta $09				sta 	IFR0+1
.31c4	b5 02		lda $02,x			lda 	2,x
.31c6	85 0a		sta $0a				sta 	IFR0+2
.31c8	b5 03		lda $03,x			lda 	3,x
.31ca	85 0b		sta $0b				sta 	IFR0+3
.31cc	60		rts				rts
.31cd					IFloatCopyToRegister:
.31cd	a5 08		lda $08				lda 	IFR0
.31cf	95 00		sta $00,x			sta 	0,x
.31d1	a5 09		lda $09				lda 	IFR0+1
.31d3	95 01		sta $01,x			sta 	1,x
.31d5	a5 0a		lda $0a				lda 	IFR0+2
.31d7	95 02		sta $02,x			sta 	2,x
.31d9	a5 0b		lda $0b				lda 	IFR0+3
.31db	95 03		sta $03,x			sta 	3,x
.31dd	60		rts				rts
.31de					IFloatLoadInline:
.31de	68		pla				pla 								; pop address off to iTemp0
.31df	85 20		sta $20				sta 	iTemp0
.31e1	68		pla				pla
.31e2	85 21		sta $21				sta 	iTemp0+1
.31e4	a0 01		ldy #$01			ldy 	#1
.31e6	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.31e8	95 00		sta $00,x			sta 	0,x
.31ea	c8		iny				iny
.31eb	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.31ed	95 01		sta $01,x			sta 	1,x
.31ef	c8		iny				iny
.31f0	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.31f2	95 02		sta $02,x			sta 	2,x
.31f4	c8		iny				iny
.31f5	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.31f7	95 03		sta $03,x			sta 	3,x
.31f9	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.31fa	a5 20		lda $20				lda 	iTemp0
.31fc	69 05		adc #$05			adc 	#5
.31fe	85 20		sta $20				sta 	iTemp0
.3200	90 02		bcc $3204			bcc 	_IFLINoCarry
.3202	e6 21		inc $21				inc 	iTemp0+1
.3204					_IFLINoCarry:
.3204	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3207					IFloatMultiply8BitRx:
.3207	5a		phy		        phy
.3208	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.320a	a4 08		ldy $08		        ldy     IFR0+IM0
.320c	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.320d	85 08		sta $08		        sta     IFR0+IM0
.320f	84 09		sty $09		        sty     IFR0+IM1
.3211	a9 00		lda #$00	        lda     #0
.3213	a0 08		ldy #$08	        ldy     #8
.3215					_IFMLoop:
.3215	90 03		bcc $321a	        bcc     _IFMNoAdd
.3217	18		clc		        clc
.3218	65 09		adc $09		        adc     IFR0+IM1
.321a					_IFMNoAdd:
.321a	6a		ror a		        ror     a
.321b	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.321d	88		dey		        dey
.321e	d0 f5		bne $3215	        bne     _IFMLoop
.3220	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3222	7a		ply		        ply
.3223	60		rts		        rts
.3224					IFloatCheckZero:
.3224	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.3226	15 01		ora $01,x			ora 	IM1,x
.3228	15 02		ora $02,x			ora 	IM2,x
.322a	60		rts				rts
.322b					IFloatSetZero:
.322b	a9 00		lda #$00			lda 	#0
.322d					IFloatSetByte:
.322d	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.322f	74 01		stz $01,x			stz 	IM1,x
.3231	74 02		stz $02,x			stz 	IM2,x
.3233	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3235	60		rts				rts
.3236					IFloatNegate:
.3236	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.3238	49 40		eor #$40			eor 	#IFSign
.323a	95 03		sta $03,x			sta 	IExp,x
.323c	18		clc				clc
.323d	60		rts				rts
.323e					IFloatMantissaNegate:
.323e	38		sec				sec 								; when you want a real 2's complement negative value.
.323f	a9 00		lda #$00			lda 	#0
.3241	f5 00		sbc $00,x			sbc 	IM0,x
.3243	95 00		sta $00,x			sta 	IM0,x
.3245	a9 00		lda #$00			lda 	#0
.3247	f5 01		sbc $01,x			sbc 	IM1,x
.3249	95 01		sta $01,x			sta 	IM1,x
.324b	a9 00		lda #$00			lda 	#0
.324d	f5 02		sbc $02,x			sbc 	IM2,x
.324f	95 02		sta $02,x			sta 	IM2,x
.3251	60		rts				rts
.3252					IFloatShiftLeft:
.3252	18		clc				clc
.3253					IFloatRotateLeft:
.3253	36 00		rol $00,x			rol 	IM0,x
.3255	36 01		rol $01,x			rol 	IM1,x
.3257	36 02		rol $02,x			rol 	IM2,x
.3259	60		rts				rts
.325a					IFloatShiftRight:
.325a	18		clc				clc
.325b					IFloatRotateRight:
.325b	76 02		ror $02,x			ror 	IM2,x
.325d	76 01		ror $01,x			ror 	IM1,x
.325f	76 00		ror $00,x			ror 	IM0,x
.3261	60		rts				rts
.3262					IFloatNormalise:
.3262	20 24 32	jsr $3224			jsr 	IFloatCheckZero 			; is it zero
.3265	f0 18		beq $327f			beq 	_IFNExitZero 				; if so exit
.3267					_IFNLoop:
.3267	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3269	29 c0		and #$c0			and 	#$C0
.326b	c9 40		cmp #$40			cmp 	#$40
.326d	f0 13		beq $3282			beq 	_IFNExitOkay 				; if so , then we are done.
.326f	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3271	29 3f		and #$3f			and 	#$3F
.3273	c9 20		cmp #$20			cmp 	#$20
.3275	f0 0b		beq $3282			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3277	20 98 32	jsr $3298			jsr 	IFloatDecExponent
.327a	20 52 32	jsr $3252			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.327d	80 e8		bra $3267			bra 	_IFNLoop
.327f					_IFNExitZero:
.327f	20 2b 32	jsr $322b			jsr 	IFloatSetZero 				; set the result to zero
.3282					_IFNExitOkay:
.3282	18		clc				clc  								; return with CC.
.3283	60		rts				rts
.3284					IFloatIncExponent:
.3284	b5 03		lda $03,x			lda 	IExp,x
.3286	48		pha				pha
.3287	29 c0		and #$c0			and 	#$C0
.3289	8d 1f 07	sta $071f			sta 	IFXTemp
.328c	68		pla				pla
.328d	1a		inc a				inc 	a
.328e	29 3f		and #$3f			and 	#$3F
.3290	48		pha				pha
.3291	0d 1f 07	ora $071f			ora 	IFXTemp
.3294	95 03		sta $03,x			sta 	IExp,x
.3296	68		pla				pla
.3297	60		rts				rts
.3298					IFloatDecExponent:
.3298	b5 03		lda $03,x			lda 	IExp,x
.329a	48		pha				pha
.329b	29 c0		and #$c0			and 	#$C0
.329d	8d 1f 07	sta $071f			sta 	IFXTemp
.32a0	68		pla				pla
.32a1	3a		dec a				dec 	a
.32a2	29 3f		and #$3f			and 	#$3F
.32a4	48		pha				pha
.32a5	0d 1f 07	ora $071f			ora 	IFXTemp
.32a8	95 03		sta $03,x			sta 	IExp,x
.32aa	68		pla				pla
.32ab	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.32ac					IFloatBufferReset:
.32ac	9c 20 07	stz $0720			stz 	IFBufferCount
.32af	9c 21 07	stz $0721			stz 	IFBuffer
.32b2	60		rts				rts
.32b3					IFloatGetBufferAddress:
.32b3	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.32b5	a2 20		ldx #$20			ldx 	#(IFBufferCount & $FF)
.32b7	ad 20 07	lda $0720			lda 	IFBufferCount
.32ba	60		rts				rts
.32bb					IFloatBufferWrite:
.32bb	da		phx				phx
.32bc	ae 20 07	ldx $0720			ldx 	IFBufferCount
.32bf	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.32c2	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.32c5	ee 20 07	inc $0720			inc 	IFBufferCount
.32c8	fa		plx				plx
.32c9	60		rts				rts
.32ca					IFloatStripTrailingZeros:
.32ca	ae 20 07	ldx $0720			ldx 	IFBufferCount
.32cd	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.32d0	c9 30		cmp #$30			cmp		#"0"
.32d2	d0 0f		bne $32e3			bne 	_IFSTExit
.32d4	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.32d7	c9 2e		cmp #$2e			cmp 	#"."
.32d9	f0 08		beq $32e3			beq 	_IFSTExit
.32db	ce 20 07	dec $0720			dec 	IFBufferCount
.32de	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.32e1	80 e7		bra $32ca			bra 	IFloatStripTrailingZeros
.32e3					_IFSTExit:
.32e3	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.32e4					IFloatCheckRange:
.32e4	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.32e6	09 40		ora #$40			ora 	#IFSign
.32e8	85 0b		sta $0b				sta 	IFR0+IExp
.32ea	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.32ec	20 23 2c	jsr $2c23			jsr 	IFloatAdd 					; add allowed to error.
.32ef	a2 08		ldx #$08			ldx 	#IFR0
.32f1	20 24 32	jsr $3224			jsr 	IFloatCheckZero 			; error if < 0
.32f4	f0 06		beq $32fc			beq 	_IFAOkay
.32f6	a5 0b		lda $0b				lda 	IFR0+IExp
.32f8	29 40		and #$40			and 	#IFSign
.32fa	d0 01		bne $32fd			bne 	_IFAFail
.32fc					_IFAOkay:
.32fc	60		rts				rts
.32fd					_IFAFail:
.32fd	38		sec				sec
.32fe	68		pla				pla 								; get address - 2
.32ff	e9 02		sbc #$02			sbc 	#2
.3301	aa		tax				tax
.3302	68		pla				pla
.3303	e9 00		sbc #$00			sbc 	#0
.3305	a8		tay				tay
.3306	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.3308					_IFAStop:
>3308	db						.byte 	$DB 						; display an error AA ADR ADR
.3309	80 fd		bra $3308			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
