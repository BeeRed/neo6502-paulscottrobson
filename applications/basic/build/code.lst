
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Wed May 31 12:05:31 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 32 1b	jsr $1b32			jsr 	PGMSetBaseAddress
.1007	20 b4 21	jsr $21b4			jsr 	IFInitialise
.100a	4c 4e 11	jmp $114e			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc


;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 5e 13	jsr $135e			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 6c 1e	jmp $1e6c		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 45 1b	jsr $1b45			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 64 21	jsr $2164			jsr 	VARClearHashTables
.1028	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh
.102b	20 b6 1f	jsr $1fb6			jsr 	StackReset
.102e	20 12 20	jsr $2012			jsr 	StringSystemInitialise
.1031	60		rts				rts
.1032					AllocateMemory:
.1032	5a		phy				phy 								; save Y
.1033	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.1035	5a		phy				phy
.1036	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.1038	5a		phy				phy
.1039	a8		tay				tay 								; count is now in XY
.103a					_AllocateLoop:
.103a	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103c	d0 04		bne $1042			bne 	_AllocateOne
.103e	c0 00		cpy #$00			cpy 	#0
.1040	f0 12		beq $1054			beq 	_AllocateExit
.1042					_AllocateOne:
.1042	a9 00		lda #$00			lda 	#0 							; zero byte
.1044	92 24		sta ($24)			sta 	(freeMemory)
.1046	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.1048	d0 02		bne $104c			bne 	_AllocateSkipCarry
.104a	e6 25		inc $25				inc 	freeMemory+1
.104c					_AllocateSkipCarry:
.104c	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.104e	d0 01		bne $1051			bne 	_AllocateSkipBorrow
.1050	ca		dex				dex
.1051					_AllocateSkipBorrow:
.1051	88		dey				dey
.1052	80 e6		bra $103a			bra 	_AllocateLoop
.1054					_AllocateExit:
.1054	fa		plx				plx 								; restore address
.1055	68		pla				pla
.1056	7a		ply				ply 								; restore Y
.1057	60		rts				rts
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.1058					NoExec01:
.1058					NoExec02:
.1058					NoExec03:
.1058					NoExec04:
.1058					NoExec05:
.1058					NoExec06:
.1058					NoExec07:
.1058	4c 1b 1e	jmp $1e1b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.105b					Command_Print:
.105b					Command_IP_Main:
.105b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.105c					_CPLoop:
.105c	08		php				php 								; save last action flag
.105d	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.105f	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1061	f0 3e		beq $10a1			beq 	_CPExit 					; without consuming
.1063	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1065	f0 3a		beq $10a1			beq 	_CPExit
.1067	68		pla				pla 								; throw last action flag
.1068	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.106a	c8		iny				iny
.106b	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.106d	f0 2f		beq $109e			beq 	_CPContinueWithSameLine
.106f	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1071	f0 26		beq $1099			beq 	_CPTab
.1073	88		dey				dey 								; undo the get.
.1074	20 1e 13	jsr $131e			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1077	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1079	10 14		bpl $108f			bpl 	_CPNumber
.107b	5a		phy				phy
.107c	18		clc				clc 								; string address to YX
.107d	a5 0c		lda $0c				lda 	IFR0+IM0
.107f	aa		tax				tax
.1080	a5 0d		lda $0d				lda 	IFR0+IM1
.1082	a8		tay				tay
.1083	e8		inx				inx 								; point to 1st character
.1084	d0 01		bne $1087			bne 	_CPNoCarry
.1086	c8		iny				iny
.1087					_CPNoCarry:
.1087	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1089	20 aa 10	jsr $10aa			jsr 	CPPrintAYX 					; print AYX
.108c	7a		ply				ply
.108d	80 cc		bra $105b			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.108f					_CPNumber:
.108f	5a		phy				phy
.1090	20 c6 25	jsr $25c6			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.1093	20 aa 10	jsr $10aa			jsr 	CPPrintAYX 					; print AYX
.1096	7a		ply				ply
.1097	80 c2		bra $105b			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1099					_CPTab:
.1099	a9 09		lda #$09			lda 	#9 							; print TAB
.109b	20 bd 10	jsr $10bd			jsr 	CPPrintA
.109e					_CPContinueWithSameLine:
.109e	38		sec				sec 								; loop round with carry set, which
.109f	80 bb		bra $105c			bra 	_CPLoop 					; will inhibit final CR
.10a1					_CPExit:
.10a1	28		plp				plp 								; get last action flag
.10a2	b0 05		bcs $10a9			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.10a4	a9 0d		lda #$0d			lda 	#13 						; print new line
.10a6	20 bd 10	jsr $10bd			jsr 	CPPrintA
.10a9					_CPExit2:
.10a9	60		rts				rts
.10aa					CPPrintAYX:
.10aa	86 1e		stx $1e				stx 	zTemp0
.10ac	84 1f		sty $1f				sty 	zTemp0+1
.10ae	aa		tax				tax
.10af	f0 0b		beq $10bc			beq 	_CPPrintExit
.10b1	a0 00		ldy #$00			ldy 	#0
.10b3					_CPPrintAYXLoop:
.10b3	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.10b5	20 bd 10	jsr $10bd			jsr 	CPPrintA
.10b8	c8		iny				iny
.10b9	ca		dex				dex
.10ba	d0 f7		bne $10b3			bne 	_CPPrintAYXLoop
.10bc					_CPPrintExit:
.10bc	60		rts				rts
.10bd					CPPrintA:
.10bd	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.10c0					CommandLET:
.10c0	20 e6 13	jsr $13e6			jsr 	EXPTermR0 					; get term
.10c3	90 6d		bcc $1132			bcc 	_CLError 					; must be a reference term.
.10c5	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.10c7	48		pha				pha
.10c8	a5 0d		lda $0d				lda 	IFR0+IM1
.10ca	48		pha				pha
.10cb	a5 0f		lda $0f				lda 	IFR0+IExp
.10cd	48		pha				pha
.10ce	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.10d0	20 6a 1f	jsr $1f6a			jsr 	ERRCheckA
.10d3	20 1e 13	jsr $131e			jsr 	EXPEvaluateExpression 		; right hand side.
.10d6	68		pla				pla 								; type of l-expr
.10d7	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.10d9	30 5a		bmi $1135			bmi 	_CLType
.10db	fa		plx				plx 	 							; pop target address to zTemp0
.10dc	86 1f		stx $1f				stx 	zTemp0+1
.10de	fa		plx				plx
.10df	86 1e		stx $1e				stx 	zTemp0
.10e1	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.10e3	30 15		bmi $10fa			bmi 	_CLStringAssign
.10e5	5a		phy				phy
.10e6	a0 03		ldy #$03			ldy 	#3
.10e8	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10ea	88		dey				dey
.10eb	a5 0e		lda $0e				lda 	IFR0+IM2
.10ed	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10ef	88		dey				dey
.10f0	a5 0d		lda $0d				lda 	IFR0+IM1
.10f2	91 1e		sta ($1e),y			sta 	(zTemp0),y
.10f4	a5 0c		lda $0c				lda 	IFR0+IM0
.10f6	92 1e		sta ($1e)			sta 	(zTemp0)
.10f8	7a		ply				ply
.10f9	60		rts				rts
.10fa					_CLStringAssign:
.10fa	5a		phy				phy
.10fb	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.10fd	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.10ff	12 1e		ora ($1e)			ora 	(zTemp0)
.1101	f0 23		beq $1126			beq 	_CLConcreteString
.1103	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1105	85 20		sta $20				sta 	zTemp1
.1107	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1109	85 21		sta $21				sta 	zTemp1+1
.110b	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.110d	38		sec				sec 								; we want 3 for slot size, status, string size.
.110e	e9 03		sbc #$03			sbc 	#3
.1110	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.1112	90 12		bcc $1126			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1114	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1116	1a		inc a				inc 	a
.1117	aa		tax				tax
.1118	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.111a					_CLReplaceString:
.111a	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.111c	c8		iny				iny
.111d	c8		iny				iny
.111e	91 20		sta ($20),y			sta 	(zTemp1),y
.1120	88		dey				dey
.1121	ca		dex				dex
.1122	d0 f6		bne $111a			bne 	_CLReplaceString
.1124	80 0a		bra $1130			bra 	_CLExit
.1126					_CLConcreteString:
.1126	20 c7 1f	jsr $1fc7			jsr 	StringConcrete  			; concreted string in XA.
.1129	a0 01		ldy #$01			ldy 	#1 							; store the address
.112b	92 1e		sta ($1e)			sta 	(zTemp0)
.112d	8a		txa				txa
.112e	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1130					_CLExit:
.1130	7a		ply				ply
.1131	60		rts				rts
.1132					_CLError:
.1132	4c 3e 1f	jmp $1f3e		jmp	ErrorV_variable
.1135					_CLType:
.1135	4c 48 1e	jmp $1e48		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1138					Command_NEW:
.1138	20 39 1b	jsr $1b39			jsr 	PGMNewProgram
.113b	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.113e	4c 9b 11	jmp $119b			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1141					Command_REM:
.1141					Command_REM2:
.1141	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1143	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1145	d0 06		bne $114d			bne 	_CRExit
.1147	c8		iny				iny 								; skip over it, it's a comment.
.1148	98		tya				tya
.1149	38		sec				sec
.114a	71 1c		adc ($1c),y			adc 	(codePtr),y
.114c	a8		tay				tay
.114d					_CRExit:
.114d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.114e					Command_RUN:
.114e	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.1151	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.1154	85 1d		sta $1d				sta 	codePtr+1
.1156	64 1c		stz $1c				stz 	codePtr
.1158	80 0b		bra $1165			bra 	RUNNewLine
.115a					RUNEndOfLine:
.115a	18		clc				clc 								; advance to next line.
.115b	b2 1c		lda ($1c)			lda 	(codePtr)
.115d	65 1c		adc $1c				adc 	codePtr
.115f	85 1c		sta $1c				sta 	codePtr
.1161	90 02		bcc $1165			bcc 	_RELNoCarry
.1163	e6 1d		inc $1d				inc 	codePtr+1
.1165					_RELNoCarry:
.1165					RUNNewLine:
.1165	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1167	9a		txs				txs
.1168	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.116a	f0 2f		beq $119b			beq 	Command_END
.116c	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.116e					RUNNewCommand:
.116e	9c 49 04	stz $0449			stz 	stringInitialised 			; reset string system.
.1171	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.1173	10 1a		bpl $118f			bpl		_RUNNotToken 				; probably an identifier
.1175	c8		iny				iny 								; consume token
.1176	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1178	f0 f4		beq $116e			beq 	RUNNewCommand
.117a	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.117c	b0 0e		bcs $118c			bcs 	_RUNSyntax
.117e	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1180	90 0a		bcc $118c			bcc 	_RUNSyntax
.1182	0a		asl a				asl 	a 							; double into X.
.1183	aa		tax				tax
.1184	20 89 11	jsr $1189			jsr 	_RUNDispatchMain			; call the main dispatcher
.1187	80 e5		bra $116e			bra 	RUNNewCommand
.1189					_RUNDispatchMain:
.1189	7c 4f 18	jmp ($184f,x)			jmp 	(VectorTable,x)
.118c					_RUNSyntax:
.118c	4c 1b 1e	jmp $1e1b		jmp	ErrorV_syntax
.118f					_RUNNotToken:
.118f	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1191	90 f9		bcc $118c			bcc 	_RUNSyntax
.1193	20 c0 10	jsr $10c0			jsr 	CommandLET 					; assignment
.1196	80 d6		bra $116e			bra 	RUNNewCommand 				; loop round.
.1198					Command_Shift_Handler:
.1198	4c 59 1e	jmp $1e59		jmp	ErrorV_unimplemented
.119b					Command_END:
.119b	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.119e					Command_STOP:
.119e	4c b6 1e	jmp $1eb6		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.11a1					EXPBinAdd:
.11a1	24 0f		bit $0f				bit 	IFR0+IExp
.11a3	30 6f		bmi $1214			bmi 	EXPConcatenate
.11a5	a2 10		ldx #$10			ldx 	#IFR1
.11a7	4c bf 21	jmp $21bf			jmp 	IFloatAdd
.11aa					EXPBinSub:
.11aa	24 0f		bit $0f				bit 	IFR0+IExp
.11ac	30 3f		bmi $11ed			bmi 	EXPTypeError
.11ae	a2 10		ldx #$10			ldx 	#IFR1
.11b0	4c b8 21	jmp $21b8			jmp 	IFloatSubtract
.11b3					EXPBinMul:
.11b3	24 0f		bit $0f				bit 	IFR0+IExp
.11b5	30 36		bmi $11ed			bmi 	EXPTypeError
.11b7	a2 10		ldx #$10			ldx 	#IFR1
.11b9	4c 69 22	jmp $2269			jmp 	IFloatMultiply
.11bc					EXPBinFDiv:
.11bc	24 0f		bit $0f				bit 	IFR0+IExp
.11be	30 2d		bmi $11ed			bmi 	EXPTypeError
.11c0	a2 10		ldx #$10			ldx 	#IFR1
.11c2	20 ec 24	jsr $24ec			jsr 	IFloatDivideFloat
.11c5	b0 0f		bcs $11d6			bcs 	EXPDZero
.11c7	60		rts				rts
.11c8					EXPBinIDiv:
.11c8	24 0f		bit $0f				bit 	IFR0+IExp
.11ca	30 21		bmi $11ed			bmi 	EXPTypeError
.11cc	a2 10		ldx #$10			ldx 	#IFR1
.11ce	20 ec 24	jsr $24ec			jsr 	IFloatDivideFloat
.11d1	b0 03		bcs $11d6			bcs 	EXPDZero
.11d3	4c c9 24	jmp $24c9			jmp 	IFloatIntegerR0
.11d6					EXPDZero:
.11d6	4c 8d 1e	jmp $1e8d		jmp	ErrorV_divzero
.11d9					EXPBinIMod:
.11d9	24 0f		bit $0f				bit 	IFR0+IExp
.11db	30 10		bmi $11ed			bmi 	EXPTypeError
.11dd	a2 10		ldx #$10			ldx 	#IFR1
.11df	5a		phy				phy
.11e0	20 01 24	jsr $2401			jsr 	IFPreProcessBitwise 		; set up everything.
.11e3	d0 05		bne $11ea			bne 	EXPDRange
.11e5	20 3a 23	jsr $233a			jsr 	IFloatModulusInteger
.11e8	7a		ply				ply
.11e9	60		rts				rts
.11ea					EXPDRange:
.11ea	4c 2b 1e	jmp $1e2b		jmp	ErrorV_range
.11ed					EXPTypeError:
.11ed	4c 48 1e	jmp $1e48		jmp	ErrorV_type
.11f0					EXPBinAnd:
.11f0	24 0f		bit $0f				bit 	IFR0+IExp
.11f2	30 f9		bmi $11ed			bmi 	EXPTypeError
.11f4	a2 10		ldx #$10			ldx 	#IFR1
.11f6	20 bc 23	jsr $23bc			jsr 	IFloatBitwiseAnd
.11f9	b0 ef		bcs $11ea			bcs 	EXPDRange
.11fb	60		rts				rts
.11fc					EXPBinOr:
.11fc	24 0f		bit $0f				bit 	IFR0+IExp
.11fe	30 ed		bmi $11ed			bmi 	EXPTypeError
.1200	a2 10		ldx #$10			ldx 	#IFR1
.1202	20 d3 23	jsr $23d3			jsr 	IFloatBitwiseOr
.1205	b0 e3		bcs $11ea			bcs 	EXPDRange
.1207	60		rts				rts
.1208					EXPBinXor:
.1208	24 0f		bit $0f				bit 	IFR0+IExp
.120a	30 e1		bmi $11ed			bmi 	EXPTypeError
.120c	a2 10		ldx #$10			ldx 	#IFR1
.120e	20 ea 23	jsr $23ea			jsr 	IFloatBitwiseXor
.1211	b0 d7		bcs $11ea			bcs 	EXPDRange
.1213	60		rts				rts
.1214					EXPConcatenate:
.1214	18		clc				clc
.1215	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1217	72 10		adc ($10)			adc 	(IFR1)
.1219	b0 2d		bcs $1248			bcs 	_EXPCError
.121b	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.121d	da		phx				phx
.121e	a6 0d		ldx $0d				ldx 	IFR0+1
.1220	da		phx				phx
.1221	20 37 20	jsr $2037			jsr 	StringTempAllocate 			; allocate string, set up return
.1224	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1226	a5 10		lda $10				lda 	IFR1
.1228	20 31 12	jsr $1231			jsr 	_EXPCCopyXA
.122b	fa		plx				plx 								; copy second string
.122c	68		pla				pla
.122d	20 31 12	jsr $1231			jsr 	_EXPCCopyXA
.1230	60		rts				rts
.1231					_EXPCCopyXA:
.1231	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.1233	85 1e		sta $1e				sta 	zTemp0
.1235	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.1237	f0 0e		beq $1247			beq 	_EXPCCExit 					; nothing.
.1239	aa		tax				tax 								; count
.123a	5a		phy				phy 								; start positioin
.123b	a0 01		ldy #$01			ldy 	#1
.123d					_EXPCCLoop:
.123d	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.123f	20 6c 20	jsr $206c			jsr 	StringTempWrite
.1242	c8		iny				iny
.1243	ca		dex				dex
.1244	d0 f7		bne $123d			bne 	_EXPCCLoop
.1246	7a		ply				ply
.1247					_EXPCCExit:
.1247	60		rts				rts
.1248					_EXPCError:
.1248	4c 29 1f	jmp $1f29		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.124b					EXPReturnTrue:
.124b	a2 0c		ldx #$0c			ldx 	#IFR0
.124d	a9 01		lda #$01			lda 	#1
.124f	20 cb 27	jsr $27cb			jsr 	IFloatSetByte
.1252	20 d4 27	jsr $27d4			jsr 	IFloatNegate
.1255	60		rts				rts
.1256					EXPReturnFalse:
.1256	a2 0c		ldx #$0c			ldx 	#IFR0
.1258	4c c9 27	jmp $27c9			jmp 	IFloatSetZero
.125b					EXPCompareEqual:
.125b	20 91 12	jsr $1291			jsr 	EXPCompareBaseCode
.125e	c9 00		cmp #$00			cmp 	#0
.1260	f0 e9		beq $124b			beq 	EXPReturnTrue
.1262	80 f2		bra $1256			bra 	EXPReturnFalse
.1264					EXPCompareLess:
.1264	20 91 12	jsr $1291			jsr 	EXPCompareBaseCode
.1267	c9 ff		cmp #$ff			cmp 	#$FF
.1269	f0 e0		beq $124b			beq 	EXPReturnTrue
.126b	80 e9		bra $1256			bra 	EXPReturnFalse
.126d					EXPCompareGreater:
.126d	20 91 12	jsr $1291			jsr 	EXPCompareBaseCode
.1270	c9 01		cmp #$01			cmp 	#1
.1272	f0 d7		beq $124b			beq 	EXPReturnTrue
.1274	80 e0		bra $1256			bra 	EXPReturnFalse
.1276					EXPCompareNotEqual:
.1276	20 91 12	jsr $1291			jsr 	EXPCompareBaseCode
.1279	c9 00		cmp #$00			cmp 	#0
.127b	d0 ce		bne $124b			bne 	EXPReturnTrue
.127d	80 d7		bra $1256			bra 	EXPReturnFalse
.127f					EXPCompareLessEqual:
.127f	20 91 12	jsr $1291			jsr 	EXPCompareBaseCode
.1282	c9 01		cmp #$01			cmp 	#1
.1284	d0 c5		bne $124b			bne 	EXPReturnTrue
.1286	80 ce		bra $1256			bra 	EXPReturnFalse
.1288					EXPCompareGreaterEqual:
.1288	20 91 12	jsr $1291			jsr 	EXPCompareBaseCode
.128b	c9 ff		cmp #$ff			cmp 	#$FF
.128d	d0 bc		bne $124b			bne 	EXPReturnTrue
.128f	80 c5		bra $1256			bra 	EXPReturnFalse
.1291					EXPCompareBaseCode:
.1291	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.1293	30 10		bmi $12a5			bmi 	_EXCBCString
.1295	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.1297	20 97 24	jsr $2497			jsr 	IFloatCompare
.129a	a5 0c		lda $0c				lda 	IFR0+IM0
.129c	f0 06		beq $12a4			beq 	_EXCBCExit 					; return 0 if zero
.129e	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.12a0	50 02		bvc $12a4			bvc 	_EXCBCExit
.12a2	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.12a4					_EXCBCExit:
.12a4	60		rts				rts
.12a5					_EXCBCString:
.12a5	5a		phy				phy
.12a6	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.12a8	d2 10		cmp ($10)			cmp 	(IFR1)
.12aa	90 02		bcc $12ae			bcc 	_EXCBCSmaller
.12ac	b2 10		lda ($10)			lda 	(IFR1)
.12ae					_EXCBCSmaller:
.12ae	aa		tax				tax
.12af	f0 0d		beq $12be			beq 	_EXCBCMatches 				; if zero common length matches
.12b1	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.12b3					_EXCBCCheckSmallerMatches:
.12b3	c8		iny				iny 								; compare directly as far as common length
.12b4	38		sec				sec
.12b5	b1 10		lda ($10),y			lda 	(IFR1),y
.12b7	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.12b9	d0 08		bne $12c3			bne 	_EXCBCExit2
.12bb	ca		dex				dex
.12bc	d0 f5		bne $12b3			bne 	_EXCBCCheckSmallerMatches
.12be					_EXCBCMatches:
.12be	38		sec				sec
.12bf	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.12c1	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.12c3					_EXCBCExit2:
.12c3	7a		ply				ply
.12c4	c9 00		cmp #$00			cmp 	#0
.12c6	f0 04		beq $12cc			beq 	_EXCBCReturn
.12c8	30 03		bmi $12cd			bmi 	_EXCBCFF
.12ca	a9 01		lda #$01			lda 	#1
.12cc					_EXCBCReturn:
.12cc	60		rts				rts
.12cd					_EXCBCFF:
.12cd	a9 ff		lda #$ff			lda 	#$FF
.12cf	60		rts				rts
.12d0					_EXCBCRange:
.12d0	4c 2b 1e	jmp $1e2b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.12d3					EXPBinLeft:
.12d3	a9 ff		lda #$ff			lda 	#$FF
.12d5	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.12d8	4c de 12	jmp $12de			jmp 	EXPShiftCommon
.12db					EXPBinRight:
.12db	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.12de					EXPShiftCommon:
.12de	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.12e0	05 13		ora $13				ora 	IFR1+IExp
.12e2	29 7f		and #$7f			and 	#$7F
.12e4	d0 35		bne $131b			bne 	_EXPSRange
.12e6	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.12e8	29 e0		and #$e0			and 	#$E0
.12ea	05 0d		ora $0d				ora 	IFR0+IM1
.12ec	05 0e		ora $0e				ora 	IFR0+IM2
.12ee	d0 25		bne $1315			bne 	_EXPSShiftZero 				; if so return zero
.12f0	5a		phy				phy
.12f1	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.12f3	29 1f		and #$1f			and 	#$1F
.12f5	f0 17		beq $130e			beq 	_EXPSExit 					; exit if zero
.12f7	a8		tay				tay
.12f8					_EXPSLoop:
.12f8	a2 10		ldx #$10			ldx 	#IFR1
.12fa	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.12fd	30 05		bmi $1304			bmi 	_EXPSShiftLeft
.12ff	20 f8 27	jsr $27f8			jsr 	IFloatShiftRight
.1302	80 07		bra $130b			bra 	_EXPSContinue
.1304					_EXPSShiftLeft:
.1304	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1307	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1309	30 10		bmi $131b			bmi 	_EXPSRange
.130b					_EXPSContinue:
.130b	88		dey				dey
.130c	d0 ea		bne $12f8			bne 	_EXPSLoop
.130e					_EXPSExit:
.130e	a2 10		ldx #$10			ldx 	#IFR1
.1310	20 5a 27	jsr $275a			jsr 	IFloatCopyFromRegister
.1313	7a		ply				ply
.1314	60		rts				rts
.1315					_EXPSShiftZero:
.1315	a2 0c		ldx #$0c			ldx 	#IFR0
.1317	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.131a	60		rts				rts
.131b					_EXPSRange:
.131b	4c 2b 1e	jmp $1e2b		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.131e					EXPEvaluateExpression:
.131e	a9 00		lda #$00			lda 	#0 							; current precedence
.1320					EXPEvaluateExpressionPrecedenceA:
.1320	48		pha				pha
.1321	20 9b 13	jsr $139b			jsr 	EXPTermValueR0				; do first term.
.1324					_EELoop:
.1324	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1326	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1328	90 31		bcc $135b			bcc 	_EEExit
.132a	aa		tax				tax 								; access the precedence of the operator.
.132b	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.132c	dd b3 15	cmp $15b3,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.132f	b0 2b		bcs $135c			bcs 	_EEExit2
.1331	48		pha				pha 								; save current precedence.
.1332	da		phx				phx 								; save operator
.1333	c8		iny				iny 								; consume operator
.1334	da		phx				phx
.1335	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.1337	20 18 27	jsr $2718			jsr 	IFloatPushRx
.133a	fa		plx				plx
.133b	bd b3 15	lda $15b3,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.133e	20 20 13	jsr $1320			jsr 	EXPEvaluateExpressionPrecedenceA
.1341	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.1343	20 39 27	jsr $2739			jsr 	IFloatPullRx
.1346	fa		plx				plx 								; operator
.1347	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.1349	45 13		eor $13				eor 	IFR1+IExp
.134b	30 08		bmi $1355			bmi 	_EEType
.134d					_EETypeOkay:
.134d	8a		txa				txa
.134e	0a		asl a				asl 	a 							; double -> X
.134f	aa		tax				tax
.1350	20 58 13	jsr $1358			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1353	80 cf		bra $1324			bra 	_EELoop
.1355					_EEType:
.1355	4c 48 1e	jmp $1e48		jmp	ErrorV_type
.1358					_EECallBinary:
.1358	7c 4f 18	jmp ($184f,x)			jmp 	(VectorTable,x)
.135b					_EEExit:
.135b	68		pla				pla 								; throw precedence
.135c					_EEExit2:
.135c	18		clc				clc
.135d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.135e					EXPEvalNumber:
.135e	20 1e 13	jsr $131e			jsr 	EXPEvaluateExpression
.1361	24 0f		bit $0f				bit 	IFR0+IExp
.1363	30 01		bmi $1366			bmi 	EVUType
.1365	60		rts				rts
.1366					EVUType:
.1366	4c 48 1e	jmp $1e48		jmp	ErrorV_type
.1369					EXPEvalInteger:
.1369	20 5e 13	jsr $135e			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.136c	20 c9 24	jsr $24c9			jsr 	IFloatIntegerR0
.136f	60		rts				rts
.1370					EXPEvalInteger16:
.1370	20 69 13	jsr $1369			jsr 	EXPEvalInteger
.1373	a5 0e		lda $0e				lda 	IFR0+IM2
.1375	d0 21		bne $1398			bne 	EVURange
.1377	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1379	a5 0c		lda $0c				lda 	IFR0+IM0
.137b	60		rts				rts
.137c					EXPEvalInteger8:
.137c	20 69 13	jsr $1369			jsr 	EXPEvalInteger
.137f	a5 0e		lda $0e				lda 	IFR0+IM2
.1381	05 0d		ora $0d				ora 	IFR0+IM1
.1383	d0 13		bne $1398			bne 	EVURange
.1385	a5 0c		lda $0c				lda 	IFR0+IM0
.1387	60		rts				rts
.1388					EXPEvalString:
.1388	20 1e 13	jsr $131e			jsr 	EXPEvaluateExpression
.138b	24 0f		bit $0f				bit 	IFR0+IExp
.138d	10 d7		bpl $1366			bpl 	EVUType
.138f	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1391	86 1f		stx $1f				stx 	zTemp0+1
.1393	a5 0c		lda $0c				lda 	IFR0+IM0
.1395	85 1e		sta $1e				sta 	zTemp0
.1397	60		rts				rts
.1398					EVURange:
.1398	4c 2b 1e	jmp $1e2b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.139b					EXPTermValueR0:
.139b	20 e6 13	jsr $13e6			jsr 	EXPTermR0 					; get term
.139e	90 45		bcc $13e5			bcc 	_ETVNotReference 			; exit if value.
.13a0	5a		phy				phy
.13a1	a0 03		ldy #$03			ldy 	#3 							; get type
.13a3	b1 0c		lda ($0c),y			lda 	(IFR0),y
.13a5	30 14		bmi $13bb			bmi 	_ETVDereferenceString
.13a7	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.13a9	88		dey				dey
.13aa	b1 0c		lda ($0c),y			lda 	(IFR0),y
.13ac	85 0e		sta $0e				sta 	IFR0+IM2
.13ae	88		dey				dey
.13af	b1 0c		lda ($0c),y			lda 	(IFR0),y
.13b1	aa		tax				tax
.13b2	b2 0c		lda ($0c)			lda 	(IFR0)
.13b4	86 0d		stx $0d				stx 	IFR0+IM1
.13b6	85 0c		sta $0c				sta 	IFR0+IM0
.13b8	7a		ply				ply
.13b9	18		clc				clc
.13ba	60		rts				rts
.13bb					_ETVDereferenceString:
.13bb	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.13bd	b1 0c		lda ($0c),y			lda 	(IFR0),y
.13bf	12 0c		ora ($0c)			ora 	(IFR0)
.13c1	f0 11		beq $13d4			beq 	_ETVNull
.13c3	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.13c5	aa		tax				tax
.13c6	b2 0c		lda ($0c)			lda 	(IFR0)
.13c8	18		clc				clc 								; add two so points to actual string.
.13c9	69 02		adc #$02			adc 	#2
.13cb	90 01		bcc $13ce			bcc 	_EVDSNoCarry
.13cd	e8		inx				inx
.13ce					_EVDSNoCarry:
.13ce	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.13d0	85 0c		sta $0c				sta 	IFR0
.13d2	80 08		bra $13dc			bra 	_ETVFillExit 				; tidy up and exit.
.13d4					_ETVNull:
.13d4	a9 e4		lda #$e4			lda 	#_EVTNString & $FF
.13d6	85 0c		sta $0c				sta 	IFR0+IM0
.13d8	a9 13		lda #$13			lda 	#_EVTNString >> 8
.13da	85 0d		sta $0d				sta 	IFR0+IM1
.13dc					_ETVFillExit:
.13dc	64 0e		stz $0e				stz 	IFR0+IM2
.13de	a9 80		lda #$80			lda 	#$80
.13e0	85 0f		sta $0f				sta 	IFR0+IExp
.13e2	7a		ply				ply
.13e3	60		rts				rts
.13e4					_EVTNString:
>13e4	00						.byte 	0
.13e5					_ETVNotReference:
.13e5	60		rts				rts
.13e6					EXPTermR0:
.13e6	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.13e8	30 10		bmi $13fa			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.13ea	c8		iny				iny 								; consume element
.13eb	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.13ed	b0 08		bcs $13f7			bcs 	_ETMIdentifier
.13ef	20 1e 14	jsr $141e			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.13f2	20 51 14	jsr $1451			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.13f5	18		clc				clc 								; return value
.13f6	60		rts				rts
.13f7					_ETMIdentifier:
.13f7	4c 71 21	jmp $2171			jmp 	VARCheckSimple 				; check simple variables A-Z
.13fa					_ETMIsUnaryOrMinus:
.13fa	c8		iny				iny 								; consume element
.13fb	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.13fd	d0 0a		bne $1409			bne 	_ETMCheckUnary
.13ff	20 9b 13	jsr $139b			jsr 	EXPTermValueR0 				; get a term to negate
.1402	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1404	20 d4 27	jsr $27d4			jsr 	IFloatNegate
.1407	18		clc				clc
.1408	60		rts				rts
.1409					_ETMCheckUnary:
.1409	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.140b	90 0e		bcc $141b			bcc 	_ETMUnarySyntax
.140d	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.140f	b0 0a		bcs $141b			bcs 	_ETMUnarySyntax
.1411	0a		asl a				asl 	a
.1412	aa		tax				tax
.1413	20 18 14	jsr $1418			jsr 	_ETMCallUnaryFunction
.1416	18		clc				clc
.1417	60		rts				rts
.1418					_ETMCallUnaryFunction:
.1418	7c 4f 18	jmp ($184f,x)			jmp 	(VectorTable,x)
.141b					_ETMUnarySyntax:
.141b	4c 1b 1e	jmp $1e1b		jmp	ErrorV_syntax
.141e					EXPExtractTokenisedInteger:
.141e	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.1420	64 0f		stz $0f				stz 	IFR0+IExp
.1422	64 0d		stz $0d				stz 	IFR0+IM1
.1424	64 0e		stz $0e				stz 	IFR0+IM2
.1426					_ETMConstant:
.1426	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1428	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.142a	b0 24		bcs $1450			bcs 	_ETMCExit 					; no.
.142c	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.142e	a5 0d		lda $0d				lda 	IFR0+IM1
.1430	85 0e		sta $0e				sta 	IFR0+IM2
.1432	a5 0c		lda $0c				lda 	IFR0+IM0
.1434	85 0d		sta $0d				sta 	IFR0+IM1
.1436	64 0c		stz $0c				stz 	IFR0+IM0
.1438	8a		txa				txa
.1439	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.143a	66 0e		ror $0e				ror 	IFR0+IM2
.143c	66 0d		ror $0d				ror 	IFR0+IM1
.143e	66 0c		ror $0c				ror 	IFR0+IM0
.1440	4a		lsr a				lsr 	a
.1441	66 0e		ror $0e				ror 	IFR0+IM2
.1443	66 0d		ror $0d				ror 	IFR0+IM1
.1445	66 0c		ror $0c				ror 	IFR0+IM0
.1447	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.1449	11 1c		ora ($1c),y			ora 	(codePtr),y
.144b	85 0c		sta $0c				sta 	IFR0+IM0
.144d	c8		iny				iny 								; consume, loop back
.144e	80 d6		bra $1426			bra 	_ETMConstant
.1450					_ETMCExit:
.1450	60		rts				rts
.1451					EXPCheckDecimalFollows:
.1451	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.1453	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1455	d0 19		bne $1470			bne 	_ETMCDExit
.1457	c8		iny				iny 								; consume token.
.1458	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.145a	5a		phy				phy									; save current position
.145b	48		pha				pha 								; save count of chars.
.145c	38		sec				sec 								; address into YX : y + codePtr+1
.145d	98		tya				tya
.145e	65 1c		adc $1c				adc 	codePtr
.1460	aa		tax				tax
.1461	a5 1d		lda $1d				lda 	codePtr+1
.1463	69 00		adc #$00			adc 	#0
.1465	a8		tay				tay
.1466	68		pla				pla 								; get count.
.1467	20 6d 26	jsr $266d			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.146a	7a		ply				ply 								; go to next token.
.146b	98		tya				tya
.146c	38		sec				sec
.146d	71 1c		adc ($1c),y			adc 	(codePtr),y
.146f	a8		tay				tay
.1470					_ETMCDExit:
.1470	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1471					EXPUnaryAbs:
.1471	20 5e 13	jsr $135e			jsr 	EXPEvalNumber 					; number to R0
.1474	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.1477	20 0d 24	jsr $240d			jsr 	IFloatAbsoluteR0
.147a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.147b					EXPUnaryAsc:
.147b	20 88 13	jsr $1388			jsr 	EXPEvalString 					; string to R0, zTemp0
.147e	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.1481	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.1483	f0 06		beq $148b			beq 	_EXAZero 						; if so return 0
.1485	5a		phy				phy 									; otherwise get first character
.1486	a0 01		ldy #$01			ldy 	#1
.1488	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.148a	7a		ply				ply
.148b					_EXAZero:
.148b	a2 0c		ldx #$0c			ldx 	#IFR0
.148d	20 cb 27	jsr $27cb			jsr 	IFloatSetByte
.1490	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1491					EXPUnaryChr:
.1491	20 7c 13	jsr $137c			jsr 	EXPEvalInteger8 				; expr
.1494	48		pha				pha 									; push on stack
.1495	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.1498	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.149a	20 37 20	jsr $2037			jsr 	StringTempAllocate
.149d	68		pla				pla
.149e	20 6c 20	jsr $206c			jsr 	StringTempWrite
.14a1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.14a2					EXPUnaryDec:
.14a2	20 88 13	jsr $1388			jsr 	EXPEvalString 					; string to R0, zTemp0
.14a5	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.14a8	5a		phy				phy
.14a9	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.14ab	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.14ae	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.14b0	f0 3b		beq $14ed			beq 	_EUDError 						; empty string
.14b2	aa		tax				tax
.14b3	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.14b5					_EUDLoop:
.14b5	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.14b7	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.14b9	90 02		bcc $14bd			bcc 	_EUDNoCase
.14bb	e9 20		sbc #$20			sbc 	#$20
.14bd					_EUDNoCase:
.14bd	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.14bf	90 2c		bcc $14ed			bcc 	_EUDError
.14c1	c9 3a		cmp #$3a			cmp 	#'9'+1
.14c3	90 0a		bcc $14cf			bcc 	_EUDOkay
.14c5	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.14c7	90 24		bcc $14ed			bcc 	_EUDError
.14c9	c9 47		cmp #$47			cmp 	#'F'+1
.14cb	b0 20		bcs $14ed			bcs 	_EUDError
.14cd	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.14cf					_EUDOkay:
.14cf	29 0f		and #$0f			and 	#15 							; make constant
.14d1	da		phx				phx
.14d2	48		pha				pha
.14d3	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.14d5	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.14d8	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.14db	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.14de	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.14e1	68		pla				pla 									; pop constant and OR in
.14e2	fa		plx				plx
.14e3	05 0c		ora $0c				ora 	IFR0+IM0
.14e5	85 0c		sta $0c				sta 	IFR0+IM0
.14e7	c8		iny				iny 									; next
.14e8	ca		dex				dex
.14e9	d0 ca		bne $14b5			bne 	_EUDLoop
.14eb	7a		ply				ply
.14ec	60		rts				rts
.14ed					_EUDError:
.14ed	4c 3b 1e	jmp $1e3b		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.14f0					EXPUnaryInlineDec:
.14f0	4c 1b 1e	jmp $1e1b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.14f3					EXPUnaryNull:
.14f3	20 9b 13	jsr $139b			jsr 	EXPTermValueR0
.14f6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.14f7					EXPUnaryFrac:
.14f7	20 5e 13	jsr $135e			jsr 	EXPEvalNumber 					; number to R0
.14fa	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.14fd	20 73 24	jsr $2473			jsr 	IFloatFractionalR0
.1500	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1501					EXPUnaryInt:
.1501	20 5e 13	jsr $135e			jsr 	EXPEvalNumber 					; number to R0
.1504	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.1507	20 c9 24	jsr $24c9			jsr 	IFloatIntegerR0
.150a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.150b					EXPUnaryLen:
.150b	20 88 13	jsr $1388			jsr 	EXPEvalString 					; string to R0, zTemp0
.150e	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.1511	b2 1e		lda ($1e)			lda 	(zTemp0)
.1513	a2 0c		ldx #$0c			ldx 	#IFR0
.1515	20 cb 27	jsr $27cb			jsr 	IFloatSetByte
.1518	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1519					EXPUnaryParenthesis:
.1519	20 5e 13	jsr $135e			jsr 	EXPEvalNumber 					; number to R0
.151c	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.151f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1520					EXPUnaryRnd:
.1520	20 5e 13	jsr $135e			jsr 	EXPEvalNumber 				; number to R0
.1523	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 				; )
.1526	a2 0c		ldx #$0c			ldx 	#IFR0
.1528	20 3f 15	jsr $153f			jsr 	EXPLoadInRandom
.152b	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.152d	85 0f		sta $0f				sta 	IFR0+IExp
.152f	60		rts				rts
.1530					ExpUnaryRand:
.1530	20 69 13	jsr $1369			jsr 	EXPEvalInteger 				; integer to R0
.1533	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 				; )
.1536	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.1538	20 3f 15	jsr $153f			jsr 	EXPLoadInRandom
.153b	20 3a 23	jsr $233a			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.153e	60		rts				rts
.153f					EXPLoadInRandom:
.153f	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.1542	20 54 15	jsr $1554			jsr 	EXPRandom32
.1545	95 00		sta $00,x			sta 	IM0,x
.1547	20 54 15	jsr $1554			jsr 	EXPRandom32
.154a	95 01		sta $01,x			sta 	IM1,x
.154c	20 54 15	jsr $1554			jsr 	EXPRandom32
.154f	29 7f		and #$7f			and 	#$7F
.1551	95 02		sta $02,x			sta 	IM2,x
.1553	60		rts				rts
.1554					EXPRandom32:
.1554	5a		phy				phy
.1555	a0 08		ldy #$08			ldy 	#8
.1557	ad 3c 03	lda $033c			lda 	EXPSeed+0
.155a	0d 3d 03	ora $033d			ora 	EXPSeed+1
.155d	0d 3e 03	ora $033e			ora 	EXPSeed+2
.1560	0d 3f 03	ora $033f			ora 	EXPSeed+3
.1563	d0 08		bne $156d			bne 	_EXPRNoReset
.1565	ee 3c 03	inc $033c			inc 	EXPSeed+0
.1568	a0 10		ldy #$10			ldy 	#16
.156a	8c 3f 03	sty $033f			sty 	EXPSeed+3
.156d					_EXPRNoReset:
.156d	ad 3c 03	lda $033c			lda 	EXPSeed+0
.1570					_EXPRLoop:
.1570	0a		asl a				asl		a
.1571	2e 3d 03	rol $033d			rol 	EXPSeed+1
.1574	2e 3e 03	rol $033e			rol 	EXPSeed+2
.1577	2e 3f 03	rol $033f			rol 	EXPSeed+3
.157a	90 02		bcc $157e			bcc 	_EXPRNoEOR
.157c	49 c5		eor #$c5			eor 	#$C5
.157e					_EXPRNoEOR:
.157e	88		dey				dey
.157f	d0 ef		bne $1570			bne 	_EXPRLoop
.1581	8d 3c 03	sta $033c			sta 	EXPSeed+0
.1584	7a		ply				ply
.1585	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1586					EXPUnarySgn:
.1586	20 5e 13	jsr $135e			jsr 	EXPEvalNumber 					; number to R0
.1589	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.158c	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.158e	20 6b 27	jsr $276b			jsr 	IFloatCopyToRegister
.1591	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.1593	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.1596	a2 10		ldx #$10			ldx 	#IFR1
.1598	20 97 24	jsr $2497			jsr 	IFloatCompare 					; compare R1 vs 0.
.159b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.159c					EXPUnarySqr:
.159c	20 5e 13	jsr $135e			jsr 	EXPEvalNumber 					; number to R0
.159f	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.15a2	20 15 24	jsr $2415			jsr 	IFloatSquareRootR0 				; square root.
.15a5	b0 01		bcs $15a8			bcs 	_EUSValue
.15a7	60		rts				rts
.15a8					_EUSValue:
.15a8	4c 2b 1e	jmp $1e2b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.15ab					EXPUnaryHex:
.15ab	20 69 13	jsr $1369			jsr 	EXPEvalInteger 					; expr
.15ae	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.15b1	5a		phy				phy
.15b2	a9 10		lda #$10			lda 	#16
.15b4	20 6a 25	jsr $256a			jsr 	IFloatIntegerToStringR0
.15b7	80 0a		bra $15c3			bra 	EUSMain
.15b9					EXPUnaryStr:
.15b9	20 5e 13	jsr $135e			jsr 	EXPEvalNumber 					; expr
.15bc	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.15bf	5a		phy				phy
.15c0	20 c6 25	jsr $25c6			jsr 	IFloatFloatToStringR0 			; convert to string
.15c3					EUSMain:
.15c3	b0 18		bcs $15dd			bcs 	_EUSError
.15c5	86 1e		stx $1e				stx 	zTemp0 							; save string address
.15c7	84 1f		sty $1f				sty 	zTemp0+1
.15c9	48		pha				pha 									; save count
.15ca	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.15cc	20 37 20	jsr $2037			jsr 	StringTempAllocate
.15cf	fa		plx				plx 									; count in X
.15d0	a0 00		ldy #$00			ldy 	#0
.15d2					_EUSCopy:
.15d2	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15d4	c8		iny				iny
.15d5	20 6c 20	jsr $206c			jsr 	StringTempWrite
.15d8	ca		dex				dex
.15d9	d0 f7		bne $15d2			bne	 	_EUSCopy
.15db	7a		ply				ply
.15dc	60		rts				rts
.15dd					_EUSError:
.15dd	4c 2b 1e	jmp $1e2b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.15e0					EXPUnaryInlineString:
.15e0	18		clc				clc 								; physical address -> IM0,1
.15e1	98		tya				tya
.15e2	65 1c		adc $1c				adc 	codePtr
.15e4	85 0c		sta $0c				sta 	IFR0+IM0
.15e6	a5 1d		lda $1d				lda 	codePtr+1
.15e8	69 00		adc #$00			adc 	#0
.15ea	85 0d		sta $0d				sta 	IFR0+IM1
.15ec	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.15ee	a9 80		lda #$80			lda 	#$80
.15f0	85 0f		sta $0f				sta 	IFR0+IExp
.15f2	98		tya				tya	 								; skip over it.
.15f3	38		sec				sec
.15f4	71 1c		adc ($1c),y			adc 	(codePtr),y
.15f6	a8		tay				tay
.15f7	60		rts				rts
.15f8					_EXPUISRange:
.15f8	4c 2b 1e	jmp $1e2b		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.15fb					EXPUnaryLeft:
.15fb	20 41 16	jsr $1641			jsr 	EXPCommonStart 					; <string>,
.15fe	48		pha				pha 									; save string address on stack
.15ff	da		phx				phx
.1600	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1602	48		pha				pha
.1603	20 7c 13	jsr $137c			jsr 	EXPEvalInteger8 				; characters to do
.1606	80 44		bra $164c			bra 	EXPSubstringCommon
.1608					EXPUnaryRight:
.1608	20 41 16	jsr $1641			jsr 	EXPCommonStart 					; <string>,
.160b	48		pha				pha 									; save string address on stack
.160c	da		phx				phx
.160d	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.160f	48		pha				pha
.1610	20 7c 13	jsr $137c			jsr 	EXPEvalInteger8 				; characters to do
.1613	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.1615	68		pla				pla
.1616	38		sec				sec
.1617	e5 1e		sbc $1e				sbc 	zTemp0
.1619	b0 02		bcs $161d			bcs 	_EUROffLeft
.161b	a9 00		lda #$00			lda 	#0
.161d					_EUROffLeft:
.161d	48		pha				pha 									; start pos
.161e	a9 ff		lda #$ff			lda 	#255
.1620	80 2a		bra $164c			bra 	EXPSubstringCommon
.1622					EXPUnaryMid:
.1622	20 41 16	jsr $1641			jsr 	EXPCommonStart 					; <string>,
.1625	48		pha				pha 									; save string address on stack
.1626	da		phx				phx
.1627	20 7c 13	jsr $137c			jsr 	EXPEvalInteger8 				; characters start
.162a	f0 12		beq $163e			beq 	_EUSError 						; 1 is left
.162c	3a		dec a				dec 	a 								; zero based.
.162d	48		pha				pha
.162e	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.1630	c9 99		cmp #$99			cmp 	#PR_COMMA
.1632	f0 04		beq $1638			beq 	_EUMLength 						; if so m is provided
.1634	a9 ff		lda #$ff			lda 	#255 							; default m
.1636	80 14		bra $164c			bra 	EXPSubstringCommon
.1638					_EUMLength:
.1638	c8		iny				iny 									; consume comma
.1639	20 7c 13	jsr $137c			jsr 	EXPEvalInteger8 				; characters to do
.163c	80 0e		bra $164c			bra 	EXPSubstringCommon
.163e					_EUSError:
.163e	4c 3b 1e	jmp $1e3b		jmp	ErrorV_value
.1641					EXPCommonStart:
.1641	20 88 13	jsr $1388			jsr 	EXPEvalString
.1644	20 62 1f	jsr $1f62			jsr 	ERRCheckComma
.1647	a5 0c		lda $0c				lda 	IFR0+IM0
.1649	a6 0d		ldx $0d				ldx 	IFR0+IM1
.164b	60		rts				rts
.164c					EXPSubstringCommon:
.164c	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.164e	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; check right bracket.
.1651	68		pla				pla 									; start position
.1652	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.1654	fa		plx				plx 									; get string address to zTemp2.
.1655	86 23		stx $23				stx 	zTemp2+1
.1657	68		pla				pla
.1658	85 22		sta $22				sta 	zTemp2
.165a	38		sec				sec 									; length - start is the max count of chars
.165b	b2 22		lda ($22)			lda 	(zTemp2)
.165d	e5 21		sbc $21				sbc 	zTemp1+1
.165f	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.1661	b0 02		bcs $1665			bcs 	_EXPSSNoTrim
.1663	85 20		sta $20				sta 	zTemp1 							; update count with available
.1665					_EXPSSNoTrim:
.1665	a5 20		lda $20				lda 	zTemp1 							; chars required.
.1667	20 37 20	jsr $2037			jsr 	StringTempAllocate 				; allocate memory for it.
.166a	a5 20		lda $20				lda 	zTemp1 							; zero length string
.166c	f0 15		beq $1683			beq 	_EXPSSExit
.166e	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.1670	d2 22		cmp ($22)			cmp 	(zTemp2)
.1672	b0 0f		bcs $1683			bcs 	_EXPSSExit
.1674	5a		phy				phy
.1675	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.1677	c8		iny				iny 									; +1 for the length byte
.1678					_EXPSSCopy:
.1678	b1 22		lda ($22),y			lda 	(zTemp2),y
.167a	20 6c 20	jsr $206c			jsr 	StringTempWrite
.167d	c8		iny				iny
.167e	c6 20		dec $20				dec 	zTemp1
.1680	d0 f6		bne $1678			bne 	_EXPSSCopy
.1682	7a		ply				ply
.1683					_EXPSSExit:
.1683	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1684					EXPUnaryVal:
.1684	20 88 13	jsr $1388			jsr 	EXPEvalString 					; string to R0, zTemp0
.1687	20 5a 1f	jsr $1f5a			jsr 	ERRCheckRParen 					; )
.168a	5a		phy				phy
.168b	18		clc				clc
.168c	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.168e	69 01		adc #$01			adc 	#1
.1690	aa		tax				tax
.1691	a5 1f		lda $1f				lda 	zTemp0+1
.1693	69 00		adc #$00			adc 	#0
.1695	a8		tay				tay
.1696	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.1698	20 2d 26	jsr $262d			jsr 	IFloatStringToFloatR0 			; do conversion
.169b	b0 02		bcs $169f			bcs 	_EUVError
.169d	7a		ply				ply
.169e	60		rts				rts
.169f					_EUVError:
.169f	4c 3b 1e	jmp $1e3b		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.16a2					BinaryPrecedence:
>16a2	02					.byte	 2	; $ef =
>16a3	02					.byte	 2	; $f0 <>
>16a4	02					.byte	 2	; $f1 <=
>16a5	02					.byte	 2	; $f2 <
>16a6	02					.byte	 2	; $f3 >=
>16a7	02					.byte	 2	; $f4 >
>16a8	01					.byte	 1	; $f5 XOR
>16a9	01					.byte	 1	; $f6 OR
>16aa	01					.byte	 1	; $f7 AND
>16ab	04					.byte	 4	; $f8 DIV
>16ac	04					.byte	 4	; $f9 MOD
>16ad	04					.byte	 4	; $fa <<
>16ae	04					.byte	 4	; $fb >>
>16af	04					.byte	 4	; $fc /
>16b0	04					.byte	 4	; $fd *
>16b1	03					.byte	 3	; $fe -
>16b2	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.16b3					StandardTokens:
>16b3	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>16ba	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>16c0	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>16c6	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>16cb	02 49 46				.byte	$02,$49,$46                             	; $84 if
>16ce	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>16d4	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>16d7	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>16dc	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>16e1	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>16e9	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>16ed	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>16f2	00					.byte	$00                                     	; $8c [[end]]
>16f3	00					.byte	$00                                     	; $8d [[shift]]
>16f4	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>16f9	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>16fe	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1701	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1706	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>170a	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1710	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1716	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>171b	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>171f	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1723	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1728	01 2c					.byte	$01,$2c                                 	; $99 ,
>172a	01 3b					.byte	$01,$3b                                 	; $9a ;
>172c	01 3a					.byte	$01,$3a                                 	; $9b :
>172e	01 27					.byte	$01,$27                                 	; $9c '
>1730	01 29					.byte	$01,$29                                 	; $9d )
>1732	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1736	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>173c	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1740	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1744	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1749	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>174d	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1754	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1759	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>175e	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1763	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1768	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>176d	00					.byte	0											; $aa
>176e	00					.byte	0											; $ab
>176f	00					.byte	0											; $ac
>1770	00					.byte	0											; $ad
>1771	00					.byte	0											; $ae
>1772	00					.byte	0											; $af
>1773	00					.byte	0											; $b0
>1774	00					.byte	0											; $b1
>1775	00					.byte	0											; $b2
>1776	00					.byte	0											; $b3
>1777	00					.byte	0											; $b4
>1778	00					.byte	0											; $b5
>1779	00					.byte	0											; $b6
>177a	00					.byte	0											; $b7
>177b	00					.byte	0											; $b8
>177c	00					.byte	0											; $b9
>177d	00					.byte	0											; $ba
>177e	00					.byte	0											; $bb
>177f	00					.byte	0											; $bc
>1780	00					.byte	0											; $bd
>1781	00					.byte	0											; $be
>1782	00					.byte	0											; $bf
>1783	00					.byte	0											; $c0
>1784	00					.byte	0											; $c1
>1785	00					.byte	0											; $c2
>1786	00					.byte	0											; $c3
>1787	00					.byte	0											; $c4
>1788	00					.byte	0											; $c5
>1789	00					.byte	0											; $c6
>178a	00					.byte	0											; $c7
>178b	00					.byte	0											; $c8
>178c	00					.byte	0											; $c9
>178d	00					.byte	0											; $ca
>178e	00					.byte	0											; $cb
>178f	00					.byte	0											; $cc
>1790	00					.byte	0											; $cd
>1791	00					.byte	0											; $ce
>1792	00					.byte	0											; $cf
>1793	00					.byte	0											; $d0
>1794	00					.byte	0											; $d1
>1795	00					.byte	0											; $d2
>1796	00					.byte	0											; $d3
>1797	00					.byte	0											; $d4
>1798	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>179e	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>17a4	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>17ac	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>17b3	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>17b9	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>17bf	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>17c4	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>17c9	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>17ce	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>17d3	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>17d8	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>17de	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>17e3	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>17eb	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>17f2	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>17f7	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>17fc	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1802	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1807	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>180d	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1812	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1818	01 28					.byte	$01,$28                                 	; $eb (
>181a	01 24					.byte	$01,$24                                 	; $ec $
>181c	00					.byte	$00                                     	; $ed [[decimal]]
>181d	00					.byte	$00                                     	; $ee [[string]]
>181e	01 3d					.byte	$01,$3d                                 	; $ef =
>1820	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1823	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1826	01 3c					.byte	$01,$3c                                 	; $f2 <
>1828	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>182b	01 3e					.byte	$01,$3e                                 	; $f4 >
>182d	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1831	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1834	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1838	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>183c	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1840	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1843	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1846	01 2f					.byte	$01,$2f                                 	; $fc /
>1848	01 2a					.byte	$01,$2a                                 	; $fd *
>184a	01 2d					.byte	$01,$2d                                 	; $fe -
>184c	01 2b					.byte	$01,$2b                                 	; $ff +
>184e	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.184f					VectorTable:
>184f	a7 28					.word	NotImplemented           ; $80 REPEAT
>1851	a7 28					.word	NotImplemented           ; $81 UNTIL
>1853	a7 28					.word	NotImplemented           ; $82 WHILE
>1855	a7 28					.word	NotImplemented           ; $83 WEND
>1857	a7 28					.word	NotImplemented           ; $84 IF
>1859	a7 28					.word	NotImplemented           ; $85 ENDIF
>185b	a7 28					.word	NotImplemented           ; $86 DO
>185d	a7 28					.word	NotImplemented           ; $87 LOOP
>185f	a7 28					.word	NotImplemented           ; $88 PROC
>1861	a7 28					.word	NotImplemented           ; $89 ENDPROC
>1863	a7 28					.word	NotImplemented           ; $8a FOR
>1865	a7 28					.word	NotImplemented           ; $8b NEXT
>1867	5a 11					.word	RUNEndOfLine             ; $8c [[END]]
>1869	98 11					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>186b	a7 28					.word	NotImplemented           ; $8e ELSE
>186d	58 10					.word	NoExec01                 ; $8f THEN
>186f	58 10					.word	NoExec02                 ; $90 TO
>1871	58 10					.word	NoExec03                 ; $91 STEP
>1873	c0 10					.word	CommandLET               ; $92 LET
>1875	5b 10					.word	Command_Print            ; $93 PRINT
>1877	a7 28					.word	NotImplemented           ; $94 INPUT
>1879	a7 28					.word	NotImplemented           ; $95 CALL
>187b	a7 28					.word	NotImplemented           ; $96 SYS
>187d	41 11					.word	Command_REM              ; $97 REM
>187f	a7 28					.word	NotImplemented           ; $98 EXIT
>1881	58 10					.word	NoExec04                 ; $99 ,
>1883	58 10					.word	NoExec05                 ; $9a ;
>1885	58 10					.word	NoExec06                 ; $9b :
>1887	41 11					.word	Command_REM2             ; $9c '
>1889	58 10					.word	NoExec07                 ; $9d )
>188b	a7 28					.word	NotImplemented           ; $9e DIM
>188d	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>188f	38 11					.word	Command_NEW              ; $a0 NEW
>1891	4e 11					.word	Command_RUN              ; $a1 RUN
>1893	9e 11					.word	Command_STOP             ; $a2 STOP
>1895	9b 11					.word	Command_END              ; $a3 END
>1897	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1899	a7 28					.word	NotImplemented           ; $a5 LIST
>189b	a7 28					.word	NotImplemented           ; $a6 SAVE
>189d	a7 28					.word	NotImplemented           ; $a7 LOAD
>189f	a7 28					.word	NotImplemented           ; $a8 POKE
>18a1	a7 28					.word	NotImplemented           ; $a9 DOKE
>18a3	a7 28					.word	NotImplemented           ; $aa
>18a5	a7 28					.word	NotImplemented           ; $ab
>18a7	a7 28					.word	NotImplemented           ; $ac
>18a9	a7 28					.word	NotImplemented           ; $ad
>18ab	a7 28					.word	NotImplemented           ; $ae
>18ad	a7 28					.word	NotImplemented           ; $af
>18af	a7 28					.word	NotImplemented           ; $b0
>18b1	a7 28					.word	NotImplemented           ; $b1
>18b3	a7 28					.word	NotImplemented           ; $b2
>18b5	a7 28					.word	NotImplemented           ; $b3
>18b7	a7 28					.word	NotImplemented           ; $b4
>18b9	a7 28					.word	NotImplemented           ; $b5
>18bb	a7 28					.word	NotImplemented           ; $b6
>18bd	a7 28					.word	NotImplemented           ; $b7
>18bf	a7 28					.word	NotImplemented           ; $b8
>18c1	a7 28					.word	NotImplemented           ; $b9
>18c3	a7 28					.word	NotImplemented           ; $ba
>18c5	a7 28					.word	NotImplemented           ; $bb
>18c7	a7 28					.word	NotImplemented           ; $bc
>18c9	a7 28					.word	NotImplemented           ; $bd
>18cb	a7 28					.word	NotImplemented           ; $be
>18cd	a7 28					.word	NotImplemented           ; $bf
>18cf	a7 28					.word	NotImplemented           ; $c0
>18d1	a7 28					.word	NotImplemented           ; $c1
>18d3	a7 28					.word	NotImplemented           ; $c2
>18d5	a7 28					.word	NotImplemented           ; $c3
>18d7	a7 28					.word	NotImplemented           ; $c4
>18d9	a7 28					.word	NotImplemented           ; $c5
>18db	a7 28					.word	NotImplemented           ; $c6
>18dd	a7 28					.word	NotImplemented           ; $c7
>18df	a7 28					.word	NotImplemented           ; $c8
>18e1	a7 28					.word	NotImplemented           ; $c9
>18e3	a7 28					.word	NotImplemented           ; $ca
>18e5	a7 28					.word	NotImplemented           ; $cb
>18e7	a7 28					.word	NotImplemented           ; $cc
>18e9	a7 28					.word	NotImplemented           ; $cd
>18eb	a7 28					.word	NotImplemented           ; $ce
>18ed	a7 28					.word	NotImplemented           ; $cf
>18ef	a7 28					.word	NotImplemented           ; $d0
>18f1	a7 28					.word	NotImplemented           ; $d1
>18f3	a7 28					.word	NotImplemented           ; $d2
>18f5	a7 28					.word	NotImplemented           ; $d3
>18f7	a7 28					.word	NotImplemented           ; $d4
>18f9	a7 28					.word	NotImplemented           ; $d5 DEEK(
>18fb	a7 28					.word	NotImplemented           ; $d6 PEEK(
>18fd	08 16					.word	EXPUnaryRight            ; $d7 RIGHT$(
>18ff	fb 15					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1901	22 16					.word	EXPUnaryMid              ; $d9 MID$(
>1903	b9 15					.word	EXPUnaryStr              ; $da STR$(
>1905	84 16					.word	EXPUnaryVal              ; $db VAL(
>1907	86 15					.word	EXPUnarySgn              ; $dc SGN(
>1909	71 14					.word	EXPUnaryAbs              ; $dd ABS(
>190b	0b 15					.word	EXPUnaryLen              ; $de LEN(
>190d	9c 15					.word	EXPUnarySqr              ; $df SQR(
>190f	91 14					.word	EXPUnaryChr              ; $e0 CHR$(
>1911	7b 14					.word	EXPUnaryAsc              ; $e1 ASC(
>1913	a7 28					.word	NotImplemented           ; $e2 INKEY$(
>1915	a7 28					.word	NotImplemented           ; $e3 EVENT(
>1917	a7 28					.word	NotImplemented           ; $e4 TIME
>1919	01 15					.word	EXPUnaryInt              ; $e5 INT(
>191b	f7 14					.word	EXPUnaryFrac             ; $e6 FRAC(
>191d	a2 14					.word	EXPUnaryDec              ; $e7 DEC(
>191f	ab 15					.word	EXPUnaryHex              ; $e8 HEX$(
>1921	20 15					.word	EXPUnaryRnd              ; $e9 RND(
>1923	30 15					.word	ExpUnaryRand             ; $ea RAND(
>1925	19 15					.word	EXPUnaryParenthesis      ; $eb (
>1927	f3 14					.word	EXPUnaryNull             ; $ec $
>1929	f0 14					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>192b	e0 15					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>192d	5b 12					.word	EXPCompareEqual          ; $ef =
>192f	76 12					.word	EXPCompareNotEqual       ; $f0 <>
>1931	7f 12					.word	EXPCompareLessEqual      ; $f1 <=
>1933	64 12					.word	EXPCompareLess           ; $f2 <
>1935	88 12					.word	EXPCompareGreaterEqual   ; $f3 >=
>1937	6d 12					.word	EXPCompareGreater        ; $f4 >
>1939	08 12					.word	EXPBinXor                ; $f5 XOR
>193b	fc 11					.word	EXPBinOr                 ; $f6 OR
>193d	f0 11					.word	EXPBinAnd                ; $f7 AND
>193f	c8 11					.word	EXPBinIDiv               ; $f8 DIV
>1941	d9 11					.word	EXPBinIMod               ; $f9 MOD
>1943	d3 12					.word	EXPBinLeft               ; $fa <<
>1945	db 12					.word	EXPBinRight              ; $fb >>
>1947	bc 11					.word	EXPBinFDiv               ; $fc /
>1949	b3 11					.word	EXPBinMul                ; $fd *
>194b	aa 11					.word	EXPBinSub                ; $fe -
>194d	a1 11					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.194f					TOKDetokenise:
.194f	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1951	84 23		sty $23				sty 	zTemp2+1
.1953	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.1956					_TOKDLoop:
.1956	20 85 19	jsr $1985			jsr 	TOKDGet 					; get next
.1959	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.195b	f0 26		beq $1983			beq 	_TOKDExit
.195d	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.195f	f0 1d		beq $197e			beq 	_TOKDDataItem
.1961	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1963	f0 19		beq $197e			beq 	_TOKDDataItem
.1965	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1967	10 05		bpl $196e			bpl 	_TOKDNotToken
.1969	20 4d 1a	jsr $1a4d			jsr 	TOKDToken 					; token to text.
.196c	80 e8		bra $1956			bra 	_TOKDLoop
.196e					_TOKDNotToken:
.196e	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1970	90 05		bcc $1977			bcc 	_TOKDNotIdentifier
.1972	20 c0 19	jsr $19c0			jsr 	TOKDIdentifier
.1975	80 df		bra $1956			bra 	_TOKDLoop
.1977					_TOKDNotIdentifier:
.1977	a0 0a		ldy #$0a			ldy 	#10
.1979	20 09 1a	jsr $1a09			jsr 	TOKDInteger
.197c	80 d8		bra $1956			bra 	_TOKDLoop
.197e					_TOKDDataItem:
.197e	20 9b 19	jsr $199b			jsr 	TOKDDataItem
.1981	80 d3		bra $1956			bra 	_TOKDLoop
.1983					_TOKDExit:
.1983	18		clc				clc
.1984	60		rts				rts
.1985	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1987	e6 22		inc $22				inc 	zTemp2
.1989	d0 02		bne $198d			bne 	_TKDGExit
.198b	e6 23		inc $23				inc 	zTemp2+1
.198d					_TKDGExit:
.198d	60		rts				rts
.198e					TOKDOutput:
.198e	8d 42 03	sta $0342			sta 	TOKLastCharacter
.1991	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.1994					TOKSetDetokeniseOutput:
.1994	8e 40 03	stx $0340			stx 	TOKOutputMethod
.1997	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.199a	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.199b					TOKDDataItem:
.199b	a8		tay				tay 								; type in Y
.199c	a9 22		lda #$22			lda 	#'"'						; start with " or .
.199e	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.19a0	f0 02		beq $19a4			beq 	_TOKDDIsString
.19a2	a9 2e		lda #$2e			lda 	#'.'
.19a4					_TOKDDIsString:
.19a4	20 8e 19	jsr $198e			jsr 	TOKDOutput 					; dump it
.19a7	20 85 19	jsr $1985			jsr 	TOKDGet 					; get length into X
.19aa	aa		tax				tax
.19ab					_TOKDDOutput:
.19ab	ca		dex				dex 								; are we complete
.19ac	30 08		bmi $19b6			bmi 	_TOKDDEnd
.19ae	20 85 19	jsr $1985			jsr 	TOKDGet 					; get character and output it
.19b1	20 8e 19	jsr $198e			jsr 	TOKDOutput
.19b4	80 f5		bra $19ab			bra 	_TOKDDOutput
.19b6					_TOKDDEnd:
.19b6	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.19b8	d0 05		bne $19bf			bne 	_TOKDDNotString
.19ba	a9 22		lda #$22			lda 	#'"'
.19bc	20 8e 19	jsr $198e			jsr 	TOKDOutput
.19bf					_TOKDDNotString:
.19bf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.19c0					TOKDIdentifier:
.19c0	a0 ff		ldy #$ff			ldy 	#$FF
.19c2	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.19c5					_TOKDLoop:
.19c5	a8		tay				tay 								; token in Y
.19c6	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.19c8	c0 64		cpy #$64			cpy 	#$64
.19ca	f0 11		beq $19dd			beq 	_TOKDIOutput
.19cc	a9 5f		lda #$5f			lda 	#'_'
.19ce	c0 65		cpy #$65			cpy 	#$65
.19d0	f0 0b		beq $19dd			beq 	_TOKDIOutput
.19d2	98		tya				tya 								; handle a-z
.19d3	18		clc				clc
.19d4	69 21		adc #$21			adc	 	#$21
.19d6	c0 5a		cpy #$5a			cpy 	#$5A
.19d8	90 03		bcc $19dd			bcc 	_TOKDIOutput
.19da	38		sec				sec 								; handle 0-9
.19db	e9 4b		sbc #$4b			sbc 	#$4B
.19dd					_TOKDIOutput:
.19dd	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.19e0	10 08		bpl $19ea			bpl 	_TOKDINoSpacing
.19e2	48		pha				pha
.19e3	20 7f 1a	jsr $1a7f			jsr 	TOKDSpacing
.19e6	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.19e9	68		pla				pla
.19ea					_TOKDINoSpacing:
.19ea	20 8e 19	jsr $198e			jsr 	TOKDOutput
.19ed	20 85 19	jsr $1985			jsr 	TOKDGet 					; get next token
.19f0	c9 7c		cmp #$7c			cmp 	#$7C
.19f2	90 d1		bcc $19c5			bcc 	_TOKDLoop
.19f4	f0 12		beq $1a08			beq 	_TOKDIExit 					; it's a number, no tail.
.19f6	4a		lsr a				lsr 	a 							; string ?
.19f7	90 07		bcc $1a00			bcc 	_TOKDICheckArray
.19f9	48		pha				pha
.19fa	a9 24		lda #$24			lda 	#"$"
.19fc	20 8e 19	jsr $198e			jsr 	TOKDOutput
.19ff	68		pla				pla
.1a00					_TOKDICheckArray:
.1a00	4a		lsr a				lsr 	a 							; array ?
.1a01	90 05		bcc $1a08			bcc 	_TOKDIExit
.1a03	a9 28		lda #$28			lda 	#"("
.1a05	20 8e 19	jsr $198e			jsr 	TOKDOutput
.1a08					_TOKDIExit:
.1a08	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1a09					TOKDInteger:
.1a09	5a		phy				phy 								; save base
.1a0a	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1a0c	20 cb 27	jsr $27cb			jsr 	IFloatSetByte
.1a0f					_TOKDILoop:
.1a0f	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1a11	c9 40		cmp #$40			cmp 	#$40
.1a13	b0 1d		bcs $1a32			bcs 	_TOKDIHaveInteger
.1a15	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1a17	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1a1a	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1a1d	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1a20	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1a23	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1a26	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1a29	20 85 19	jsr $1985			jsr 	TOKDGet 					; OR byte in.
.1a2c	05 0c		ora $0c				ora 	IFR0+IM0
.1a2e	85 0c		sta $0c				sta 	IFR0+IM0
.1a30	80 dd		bra $1a0f			bra 	_TOKDILoop
.1a32					_TOKDIHaveInteger:
.1a32	7a		ply				ply 								; restore base
.1a33	98		tya				tya 								; base in A
.1a34	20 6a 25	jsr $256a			jsr 	IFloatIntegerToStringR0
.1a37	86 1e		stx $1e				stx 	zTemp0
.1a39	84 1f		sty $1f				sty 	zTemp0+1
.1a3b	b2 1e		lda ($1e)			lda 	(zTemp0)
.1a3d	20 7f 1a	jsr $1a7f			jsr 	TOKDSpacing 				; check spacing okay.
.1a40	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1a42					_TOKDOutput:
.1a42	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1a44	20 8e 19	jsr $198e			jsr 	TOKDOutput
.1a47	c8		iny				iny
.1a48	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1a4a	d0 f6		bne $1a42			bne 	_TOKDOutput
.1a4c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1a4d					TOKDToken:
.1a4d	a2 b3		ldx #$b3			ldx 	#StandardTokens & $FF
.1a4f	a0 16		ldy #$16			ldy 	#StandardTokens >> 8
.1a51					_TOKDSearch:
.1a51	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1a53	84 1f		sty $1f				sty 	zTemp0+1
.1a55	aa		tax				tax 								; token ID in X.
.1a56					_TOKDFind:
.1a56	ca		dex				dex 								; reached the start
.1a57	10 0d		bpl $1a66			bpl 	_TOKDFound
.1a59	38		sec				sec 								; go to next entry
.1a5a	b2 1e		lda ($1e)			lda 	(zTemp0)
.1a5c	65 1e		adc $1e				adc 	zTemp0
.1a5e	85 1e		sta $1e				sta 	zTemp0
.1a60	90 f4		bcc $1a56			bcc 	_TOKDFind
.1a62	e6 1f		inc $1f				inc 	zTemp0+1
.1a64	80 f0		bra $1a56			bra 	_TOKDFind
.1a66					_TOKDFound:
.1a66	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1a68	f0 14		beq $1a7e			beq 	_TOKDExit
.1a6a	aa		tax				tax
.1a6b	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1a6d	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1a6f	20 7f 1a	jsr $1a7f			jsr 	TOKDSpacing
.1a72					_TOKDOutput:
.1a72	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1a74	20 d6 1d	jsr $1dd6			jsr 	TOKToLower
.1a77	20 8e 19	jsr $198e			jsr 	TOKDOutput
.1a7a	c8		iny				iny
.1a7b	ca		dex				dex
.1a7c	d0 f4		bne $1a72			bne 	_TOKDOutput
.1a7e					_TOKDExit:
.1a7e	60		rts				rts
.1a7f					TOKDSpacing:
.1a7f	20 ed 1d	jsr $1ded			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1a82	90 0d		bcc $1a91			bcc 	_TOKDSExit
.1a84	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1a87	20 ed 1d	jsr $1ded			jsr 	TOKIsIdentifierElement
.1a8a	90 05		bcc $1a91			bcc 	_TOKDSExit
.1a8c	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1a8e	20 8e 19	jsr $198e			jsr 	TOKDOutput
.1a91					_TOKDSExit:
.1a91	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1a92					PGMDeleteLine:
.1a92	20 45 1b	jsr $1b45			jsr 	PGMEndProgram 				; end of program into zTemp0
.1a95	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1a97	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1a9a	85 21		sta $21				sta 	zTemp1+1
.1a9c					_PGMDLoop:
.1a9c	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1a9e	38		sec				sec
.1a9f	f0 3a		beq $1adb			beq 	_PGMDExit
.1aa1	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1aa3	b1 20		lda ($20),y			lda 	(zTemp1),y
.1aa5	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1aa8	d0 08		bne $1ab2			bne 	_PGMDNext
.1aaa	c8		iny				iny
.1aab	b1 20		lda ($20),y			lda 	(zTemp1),y
.1aad	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1ab0	f0 0d		beq $1abf			beq 	_PGMDDelete
.1ab2					_PGMDNext:
.1ab2	18		clc				clc
.1ab3	b2 20		lda ($20)			lda 	(zTemp1)
.1ab5	65 20		adc $20				adc 	zTemp1
.1ab7	85 20		sta $20				sta 	zTemp1
.1ab9	90 e1		bcc $1a9c			bcc 	_PGMDLoop
.1abb	e6 21		inc $21				inc 	zTemp1+1
.1abd	80 dd		bra $1a9c			bra 	_PGMDLoop
.1abf					_PGMDDelete:
.1abf	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1ac1	a8		tay				tay
.1ac2					_PGMDCopy:
.1ac2	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1ac4	92 20		sta ($20)			sta 	(zTemp1)
.1ac6	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1ac8	c5 1e		cmp $1e				cmp 	zTemp0
.1aca	d0 07		bne $1ad3			bne 	_PGMDNext2
.1acc	a5 21		lda $21				lda 	zTemp1+1
.1ace	c5 1f		cmp $1f				cmp 	zTemp0+1
.1ad0	18		clc				clc
.1ad1	f0 08		beq $1adb			beq 	_PGMDExit
.1ad3					_PGMDNext2:
.1ad3	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1ad5	d0 eb		bne $1ac2			bne 	_PGMDCopy
.1ad7	e6 21		inc $21				inc 	zTemp1+1
.1ad9	80 e7		bra $1ac2			bra 	_PGMDCopy
.1adb					_PGMDExit:
.1adb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1adc					PGMInsertLine:
.1adc	20 45 1b	jsr $1b45			jsr 	PGMEndProgram 				; end of program into zTemp0
.1adf	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1ae1	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1ae4	85 21		sta $21				sta 	zTemp1+1
.1ae6					_PGMILoop:
.1ae6	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1ae8	f0 1c		beq $1b06			beq 	_PGMIInsert
.1aea	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1aec	b1 20		lda ($20),y			lda 	(zTemp1),y
.1aee	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1af1	c8		iny				iny
.1af2	b1 20		lda ($20),y			lda 	(zTemp1),y
.1af4	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1af7	b0 0d		bcs $1b06			bcs 	_PGMIInsert 				; insert here.
.1af9	18		clc				clc
.1afa	b2 20		lda ($20)			lda 	(zTemp1)
.1afc	65 20		adc $20				adc 	zTemp1
.1afe	85 20		sta $20				sta 	zTemp1
.1b00	90 e4		bcc $1ae6			bcc 	_PGMILoop
.1b02	e6 21		inc $21				inc 	zTemp1+1
.1b04	80 e0		bra $1ae6			bra 	_PGMILoop
.1b06					_PGMIInsert:
.1b06	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1b09					_PGMIInsertLoop:
.1b09	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b0b	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1b0d	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1b0f	c5 1e		cmp $1e				cmp 	zTemp0
.1b11	d0 06		bne $1b19			bne 	_PGMINext
.1b13	a5 21		lda $21				lda 	zTemp1+1
.1b15	c5 1f		cmp $1f				cmp 	zTemp0+1
.1b17	f0 0a		beq $1b23			beq 	_PGMIInserted
.1b19					_PGMINext:
.1b19	a5 1e		lda $1e				lda 	zTemp0
.1b1b	d0 02		bne $1b1f			bne 	_PGMINoBorrow
.1b1d	c6 1f		dec $1f				dec 	zTemp0+1
.1b1f					_PGMINoBorrow:
.1b1f	c6 1e		dec $1e				dec 	zTemp0
.1b21	80 e6		bra $1b09			bra 	_PGMIInsertLoop
.1b23					_PGMIInserted:
.1b23	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1b25					_PGMICopyLoop:
.1b25	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1b28	91 20		sta ($20),y			sta 	(zTemp1),y
.1b2a	c8		iny				iny
.1b2b	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1b2e	d0 f5		bne $1b25			bne 	_PGMICopyLoop
.1b30	18		clc				clc
.1b31	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1b32					PGMSetBaseAddress:
.1b32	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1b35	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1b38	60		rts				rts
.1b39					PGMNewProgram:
.1b39	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1b3b	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1b3e	85 1f		sta $1f				sta 	zTemp0+1
.1b40	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1b42	92 1e		sta ($1e)			sta 	(zTemp0)
.1b44	60		rts				rts
.1b45					PGMEndProgram:
.1b45	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1b47	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1b4a	85 1f		sta $1f				sta 	zTemp0+1
.1b4c					_PGMEPLoop:
.1b4c	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b4e	f0 0b		beq $1b5b			beq 	_PGMEPExit
.1b50	18		clc				clc
.1b51	65 1e		adc $1e				adc 	zTemp0
.1b53	85 1e		sta $1e				sta 	zTemp0
.1b55	90 f5		bcc $1b4c			bcc 	_PGMEPLoop
.1b57	e6 1f		inc $1f				inc 	zTemp0+1
.1b59	80 f1		bra $1b4c			bra 	_PGMEPLoop
.1b5b					_PGMEPExit:
.1b5b	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1b5c					TOKResetElement:
.1b5c	9c 46 03	stz $0346			stz 	TOKElement
.1b5f	60		rts				rts
.1b60					TOKWriteElement:
.1b60	da		phx				phx
.1b61	ae 46 03	ldx $0346			ldx 	TOKElement
.1b64	9d 47 03	sta $0347,x			sta 	TOKElementText,x
.1b67	9e 48 03	stz $0348,x			stz 	TOKElementText+1,x
.1b6a	fa		plx				plx
.1b6b	ee 46 03	inc $0346			inc 	TOKElement
.1b6e	60		rts				rts
.0346					TOKElement:
>0346							.fill 	1
.0347					TOKElementText:
>0347							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1b6f					TOKTokeniseConstant:
.1b6f	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1b71	48		pha				pha 								; save on stack
.1b72	29 c0		and #$c0			and 	#$C0
.1b74	05 0d		ora $0d				ora 	IFR0+IM1
.1b76	05 0e		ora $0e				ora 	IFR0+IM2
.1b78	f0 10		beq $1b8a			beq 	_TTCLess
.1b7a	da		phx				phx
.1b7b	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1b7d					_TTCShiftRight:
.1b7d	46 0e		lsr $0e				lsr 	IFR0+IM2
.1b7f	66 0d		ror $0d				ror 	IFR0+IM1
.1b81	66 0c		ror $0c				ror 	IFR0+IM0
.1b83	ca		dex				dex
.1b84	d0 f7		bne $1b7d			bne 	_TTCShiftRight
.1b86	fa		plx				plx
.1b87	20 6f 1b	jsr $1b6f			jsr 	TOKTokeniseConstant
.1b8a					_TTCLess:
.1b8a	68		pla				pla
.1b8b	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1b8d	20 29 1c	jsr $1c29			jsr 	TOKWriteA
.1b90	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1b91					TOKTokeniseDecimals:
.1b91	20 39 1c	jsr $1c39			jsr 	TOKGetNext 					; consume the .
.1b94	20 63 1d	jsr $1d63			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1b97	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1b99	20 29 1c	jsr $1c29			jsr 	TOKWriteA
.1b9c	20 a1 1b	jsr $1ba1			jsr 	TOKOutputElementBuffer 		; then the buffer
.1b9f	18		clc				clc
.1ba0	60		rts				rts
.1ba1					TOKOutputElementBuffer:
.1ba1	ad 46 03	lda $0346			lda 	TOKElement 					; get count and write that
.1ba4	20 29 1c	jsr $1c29			jsr 	TOKWriteA
.1ba7	a8		tay				tay 								; put in Y
.1ba8	f0 0c		beq $1bb6			beq 	_TOEExit 					; exit if empty which is okay.
.1baa	a2 01		ldx #$01			ldx 	#1
.1bac					_TOELoop:
.1bac	bd 46 03	lda $0346,x			lda 	TOKElement,x
.1baf	20 29 1c	jsr $1c29			jsr 	TOKWriteA
.1bb2	e8		inx				inx
.1bb3	88		dey				dey
.1bb4	d0 f6		bne $1bac			bne 	_TOELoop
.1bb6					_TOEExit:
.1bb6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1bb7					TOKTokenise:
.1bb7	8c 47 04	sty $0447			sty 	TOKDataSource+1 			; save source routine pointer
.1bba	8e 46 04	stx $0446			stx 	TOKDataSource
.1bbd	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1bbf	2a		rol a				rol  	a
.1bc0	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1bc3	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1bc5	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1bc8					_TOKMainLoop:
.1bc8	20 35 1c	jsr $1c35			jsr 	TOKGet 						; what follows.
.1bcb	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1bcd	f0 51		beq $1c20			beq 	_TOKExit
.1bcf	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1bd1	d0 05		bne $1bd8			bne 	_TOKElement
.1bd3	20 39 1c	jsr $1c39			jsr 	TOKGetNext
.1bd6	80 f0		bra $1bc8			bra 	_TOKMainLoop
.1bd8					_TOKElement:
.1bd8	20 e1 1d	jsr $1de1			jsr 	TOKIsDigit 					; is it 0..9
.1bdb	90 0a		bcc $1be7			bcc 	_TOKNotDigit
.1bdd	20 3a 1d	jsr $1d3a			jsr 	TOKTokeniseInteger 			; get integer
.1be0	b0 45		bcs $1c27			bcs 	_TOKFail 					; did it fail ?
.1be2	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1be5	80 e1		bra $1bc8			bra 	_TOKMainLoop
.1be7					_TOKNotDigit:
.1be7	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1bea	d0 3b		bne $1c27			bne 	_TOKFail 					; if so, we've a problem.
.1bec	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1bee	d0 07		bne $1bf7			bne 	_TOKNotHex
.1bf0	20 82 1c	jsr $1c82			jsr 	TOKTokeniseHexadecimal
.1bf3	b0 32		bcs $1c27			bcs 	_TOKFail
.1bf5	80 d1		bra $1bc8			bra 	_TOKMainLoop
.1bf7					_TOKNotHex:
.1bf7	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1bf9	d0 07		bne $1c02			bne 	_TOKNotDecimal
.1bfb	20 91 1b	jsr $1b91			jsr 	TOKTokeniseDecimals
.1bfe	b0 27		bcs $1c27			bcs 	_TOKFail
.1c00	80 c6		bra $1bc8			bra 	_TOKMainLoop
.1c02					_TOKNotDecimal:
.1c02	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1c04	d0 07		bne $1c0d			bne 	_TOKNotString
.1c06	20 a8 1d	jsr $1da8			jsr 	TOKTokeniseString
.1c09	b0 1c		bcs $1c27			bcs 	_TOKFail
.1c0b	80 bb		bra $1bc8			bra 	_TOKMainLoop
.1c0d					_TOKNotString:
.1c0d	20 fe 1d	jsr $1dfe			jsr 	TOKIsAlpha 					; identifier ?
.1c10	b0 07		bcs $1c19			bcs 	_TOKIdentifier
.1c12	20 77 1d	jsr $1d77			jsr 	TOKTokenisePunctuation 		; punctuation
.1c15	b0 10		bcs $1c27			bcs 	_TOKFail
.1c17	80 af		bra $1bc8			bra 	_TOKMainLoop
.1c19					_TOKIdentifier:
.1c19	20 bc 1c	jsr $1cbc			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1c1c	b0 09		bcs $1c27			bcs 	_TOKFail
.1c1e	80 a8		bra $1bc8			bra 	_TOKMainLoop
.1c20					_TOKExit:
.1c20	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1c22	20 29 1c	jsr $1c29			jsr 	TOKWriteA
.1c25	18		clc				clc									; return with carry set.
.1c26	60		rts				rts
.1c27					_TOKFail:
.1c27	38		sec				sec
.1c28	60		rts				rts
.1c29					TOKWriteA:
.1c29	da		phx				phx
.1c2a	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1c2d	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1c30	fa		plx				plx
.1c31	ee 37 02	inc $0237			inc 	TOKLineSize
.1c34	60		rts				rts
.1c35					TOKGet:
.1c35	18		clc				clc
.1c36	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1c39					TOKGetNext:
.1c39	38		sec				sec
.1c3a	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.0446					TOKDataSource:
>0446							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1c3d					TOKFindToken:
.1c3d	a2 b3		ldx #$b3			ldx 	#StandardTokens & $FF 		; do this table
.1c3f	a0 16		ldy #$16			ldy 	#StandardTokens >> 8
.1c41	20 4c 1c	jsr $1c4c			jsr 	TOKFindTokenXY 				; find it, or not
.1c44	90 04		bcc $1c4a			bcc 	_TOKFTFail
.1c46	a2 00		ldx #$00			ldx 	#0
.1c48	38		sec				sec
.1c49	60		rts				rts
.1c4a					_TOKFTFail
.1c4a	18		clc				clc
.1c4b	60		rts				rts
.1c4c					TOKFindTokenXY:
.1c4c	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1c4e	84 1f		sty $1f				sty 	zTemp0+1
.1c50	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1c52	8d 48 04	sta $0448			sta 	TOKCurrent
.1c55					_TOKFindLoop:
.1c55	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1c57	18		clc				clc 		 						; clear carry in case of fail
.1c58	30 17		bmi $1c71			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1c5a	cd 46 03	cmp $0346			cmp 	TOKElement 					; compare against the element length
.1c5d	d0 13		bne $1c72			bne 	_TOKNext 					; different, try next.
.1c5f	aa		tax				tax 								; number of chars to compare.
.1c60	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1c62					_TOKCompare:
.1c62	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1c64	d9 46 03	cmp $0346,y			cmp 	TOKElementText-1,y
.1c67	d0 09		bne $1c72			bne 	_TOKNext 					; different ? try next
.1c69	c8		iny				iny 								; compare next two
.1c6a	ca		dex				dex
.1c6b	d0 f5		bne $1c62			bne 	_TOKCompare 				; until done X characters.
.1c6d	38		sec				sec
.1c6e	ad 48 04	lda $0448			lda 	TOKCurrent 					; return current ID.
.1c71					_TOKExit:
.1c71	60		rts				rts
.1c72					_TOKNext:
.1c72	ee 48 04	inc $0448			inc 	TOKCurrent 					; increment token #
.1c75	38		sec				sec 								; add length+1 to ptr
.1c76	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c78	65 1e		adc $1e				adc 	zTemp0
.1c7a	85 1e		sta $1e				sta 	zTemp0
.1c7c	90 d7		bcc $1c55			bcc 	_TOKFindLoop
.1c7e	e6 1f		inc $1f				inc 	zTemp0+1
.1c80	80 d3		bra $1c55			bra 	_TOKFindLoop
.0448					TOKCurrent:
>0448							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1c82					TOKTokeniseHexadecimal:
.1c82	20 39 1c	jsr $1c39			jsr 	TOKGetNext 					; consume the $
.1c85	a2 0c		ldx #$0c			ldx 	#IFR0
.1c87	20 c9 27	jsr $27c9			jsr 	IFloatSetZero 				; set R0 = 0
.1c8a					_TTHLoop:
.1c8a	20 35 1c	jsr $1c35			jsr 	TOKGet 						; keep getting and copying while numeric.
.1c8d	20 0b 1e	jsr $1e0b			jsr 	TOKIsHexadecimal
.1c90	90 20		bcc $1cb2			bcc 	_TTHDone
.1c92	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1c94	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1c97	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1c9a	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1c9d	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.1ca0	20 39 1c	jsr $1c39			jsr 	TOKGetNext
.1ca3	38		sec				sec 								; convert to decimal.
.1ca4	e9 30		sbc #$30			sbc 	#48
.1ca6	c9 0a		cmp #$0a			cmp 	#10
.1ca8	90 02		bcc $1cac			bcc 	_TTHNotAlpha
.1caa	e9 07		sbc #$07			sbc 	#7
.1cac					_TTHNotAlpha:
.1cac	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1cae	85 0c		sta $0c				sta 	IFR0+IM0
.1cb0	80 d8		bra $1c8a			bra 	_TTHLoop
.1cb2					_TTHDone:
.1cb2	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1cb4	20 29 1c	jsr $1c29			jsr 	TOKWriteA
.1cb7	20 6f 1b	jsr $1b6f			jsr 	TOKTokeniseConstant 		; write integer out.
.1cba	18		clc				clc
.1cbb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1cbc					TOKTokeniseIdentifier:
.1cbc	20 5c 1b	jsr $1b5c			jsr 	TOKResetElement 			; extract an identifier
.1cbf					_TOKGetIdentifier:
.1cbf	20 35 1c	jsr $1c35			jsr 	TOKGet
.1cc2	20 cb 1d	jsr $1dcb			jsr 	TOKToUpper
.1cc5	20 ed 1d	jsr $1ded			jsr 	TOKIsIdentifierElement
.1cc8	90 08		bcc $1cd2			bcc 	_TOKEndIdent
.1cca	20 60 1b	jsr $1b60			jsr		TOKWriteElement
.1ccd	20 39 1c	jsr $1c39			jsr 	TOKGetNext
.1cd0	80 ed		bra $1cbf			bra 	_TOKGetIdentifier
.1cd2					_TOKEndIdent:
.1cd2	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1cd4	d0 06		bne $1cdc			bne 	_TOKNotString
.1cd6	20 60 1b	jsr $1b60			jsr 	TOKWriteElement 			; add it
.1cd9	20 39 1c	jsr $1c39			jsr 	TOKGetNext 					; consume it
.1cdc					_TOKNotString:
.1cdc	20 35 1c	jsr $1c35			jsr 	TOKGet 						; finally check for (
.1cdf	c9 28		cmp #$28			cmp 	#"("
.1ce1	d0 06		bne $1ce9			bne 	_TOKNoArray
.1ce3	20 60 1b	jsr $1b60			jsr 	TOKWriteElement 			; add it
.1ce6	20 39 1c	jsr $1c39			jsr 	TOKGetNext 					; consume it
.1ce9					_TOKNoArray:
.1ce9	20 3d 1c	jsr $1c3d			jsr 	TOKFindToken 				; find it
.1cec	90 05		bcc $1cf3			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1cee	20 29 1c	jsr $1c29			jsr 	TOKWriteA
.1cf1	18		clc				clc
.1cf2	60		rts				rts
.1cf3					_TOKIsVariable:
.1cf3	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1cf5					_TOKOutputBuffer:
.1cf5	bd 47 03	lda $0347,x			lda 	TOKElementText,x 			; output it translated.
.1cf8	20 21 1d	jsr $1d21			jsr 	TOKTranslateIdentifier
.1cfb	20 29 1c	jsr $1c29			jsr 	TOKWriteA
.1cfe	e8		inx				inx
.1cff	bd 47 03	lda $0347,x			lda 	TOKElementText,x
.1d02	20 ed 1d	jsr $1ded			jsr 	TOKIsIdentifierElement
.1d05	b0 ee		bcs $1cf5			bcs 	_TOKOutputBuffer
.1d07	a8		tay				tay 								; last char in Y
.1d08	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1d0a	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1d0c	f0 0e		beq $1d1c			beq 	_TOKIVExit
.1d0e	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1d10	d0 04		bne $1d16			bne 	_TOKIVCheckArray 			; no, check for (
.1d12	1a		inc a				inc 	a 							; token is $7D
.1d13	bc 48 03	ldy $0348,x			ldy 	TOKElementText+1,x 			; get next one.
.1d16					_TOKIVCheckArray:
.1d16	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1d18	d0 02		bne $1d1c			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1d1a	1a		inc a				inc 	a
.1d1b	1a		inc a				inc 	a
.1d1c					_TOKIVExit:
.1d1c	20 29 1c	jsr $1c29			jsr 	TOKWriteA 					; ending token
.1d1f	18		clc				clc
.1d20	60		rts				rts
.1d21					TOKTranslateIdentifier:
.1d21	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1d23	f0 0f		beq $1d34			beq 	_TTI64
.1d25	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1d27	f0 0e		beq $1d37			beq 	_TTI65
.1d29	38		sec				sec
.1d2a	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1d2c	10 03		bpl $1d31			bpl 	_TTIExit
.1d2e	18		clc				clc 								; map 09 onto 26-35
.1d2f	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1d31					_TTIExit:
.1d31	09 40		ora #$40			ora 	#$40 						; correct range.
.1d33	60		rts				rts
.1d34	a9 64		lda #$64	_TTI64:	lda 	#$64
.1d36	60		rts				rts
.1d37	a9 65		lda #$65	_TTI65:	lda 	#$65
.1d39	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1d3a					TOKTokeniseInteger:
.1d3a	20 63 1d	jsr $1d63			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1d3d	a2 47		ldx #$47			ldx 	#TOKElementText & $FF
.1d3f	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1d41	ad 46 03	lda $0346			lda		TOKElement
.1d44	20 2d 26	jsr $262d			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1d47	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1d4a	f0 12		beq $1d5e			beq 	_TOKNotLineNumber
.1d4c	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1d4e	d0 0c		bne $1d5c			bne 	_TOKBadLineNumeber
.1d50	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1d52	8d 38 02	sta $0238			sta 	TOKLineNumber
.1d55	a5 0d		lda $0d				lda 	IFR0+IM1
.1d57	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1d5a	18		clc				clc
.1d5b	60		rts				rts
.1d5c					_TOKBadLineNumeber:
.1d5c	38		sec				sec
.1d5d	60		rts				rts
.1d5e					_TOKNotLineNumber:
.1d5e	20 6f 1b	jsr $1b6f			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1d61	18		clc				clc
.1d62	60		rts				rts
.1d63					TOKExtractInteger:
.1d63	20 5c 1b	jsr $1b5c			jsr 	TOKResetElement 			; restart
.1d66					_TTILoop:
.1d66	20 35 1c	jsr $1c35			jsr 	TOKGet 						; keep getting and copying while numeric.
.1d69	20 e1 1d	jsr $1de1			jsr 	TOKIsDigit
.1d6c	90 08		bcc $1d76			bcc 	_TOKEIExit
.1d6e	20 60 1b	jsr $1b60			jsr 	TOKWriteElement
.1d71	20 39 1c	jsr $1c39			jsr 	TOKGetNext
.1d74	80 f0		bra $1d66			bra 	_TTILoop
.1d76					_TOKEIExit:
.1d76	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1d77					TOKTokenisePunctuation:
.1d77	20 5c 1b	jsr $1b5c			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1d7a	20 39 1c	jsr $1c39			jsr 	TOKGetNext
.1d7d	20 60 1b	jsr $1b60			jsr 	TOKWriteElement
.1d80	20 35 1c	jsr $1c35			jsr 	TOKGet 						; what follows ?
.1d83	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1d85	f0 10		beq $1d97			beq 	_TTPOne
.1d87	20 f5 1d	jsr $1df5			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1d8a	b0 0b		bcs $1d97			bcs 	_TTPOne 					; these speed things up a bit.
.1d8c	20 60 1b	jsr $1b60			jsr 	TOKWriteElement 			; this is what we will search for.
.1d8f	20 3d 1c	jsr $1c3d			jsr 	TOKFindToken
.1d92	b0 0a		bcs $1d9e			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1d94	ce 46 03	dec $0346			dec 	TOKElement 					; make it a single character
.1d97					_TTPOne:
.1d97	20 3d 1c	jsr $1c3d			jsr 	TOKFindToken 				; look for one character punctuation
.1d9a	b0 07		bcs $1da3			bcs 	_TTPOutputExit 				; we found it
.1d9c	38		sec				sec 								; not recognised.
.1d9d	60		rts				rts
.1d9e					_TTPConsumeExit:
.1d9e	48		pha				pha
.1d9f	20 39 1c	jsr $1c39			jsr 	TOKGetNext 					; get the 2nd char out.
.1da2	68		pla				pla
.1da3					_TTPOutputExit:
.1da3	20 29 1c	jsr $1c29			jsr  	TOKWriteA 					; write token out
.1da6	18		clc				clc
.1da7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1da8					TOKTokeniseString:
.1da8	20 39 1c	jsr $1c39			jsr 	TOKGetNext 					; consume the "
.1dab	20 5c 1b	jsr $1b5c			jsr 	TOKResetElement 			; start getting the string
.1dae					_TOKTSLoop:
.1dae	20 35 1c	jsr $1c35			jsr 	TOKGet 						; check EOL
.1db1	c9 00		cmp #$00			cmp 	#0
.1db3	f0 0c		beq $1dc1			beq 	_TOKTSExit
.1db5	20 39 1c	jsr $1c39			jsr 	TOKGetNext 					; get and consume
.1db8	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1dba	f0 05		beq $1dc1			beq 	_TOKTSExit
.1dbc	20 60 1b	jsr $1b60			jsr 	TOKWriteElement
.1dbf	80 ed		bra $1dae			bra 	_TOKTSLoop
.1dc1					_TOKTSExit:
.1dc1	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1dc3	20 29 1c	jsr $1c29			jsr 	TOKWriteA
.1dc6	20 a1 1b	jsr $1ba1			jsr 	TOKOutputElementBuffer
.1dc9	18		clc				clc
.1dca	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1dcb					TOKToUpper:
.1dcb	c9 61		cmp #$61			cmp 	#"a"
.1dcd	90 06		bcc $1dd5			bcc 	_TTUNotLower
.1dcf	c9 7b		cmp #$7b			cmp 	#"z"+1
.1dd1	b0 02		bcs $1dd5			bcs 	_TTUNotLower
.1dd3	49 20		eor #$20			eor 	#$20
.1dd5					_TTUNotLower:
.1dd5	60		rts				rts
.1dd6					TOKToLower:
.1dd6	c9 41		cmp #$41			cmp 	#"A"
.1dd8	90 06		bcc $1de0			bcc 	_TTUNotUpper
.1dda	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1ddc	b0 02		bcs $1de0			bcs 	_TTUNotUpper
.1dde	49 20		eor #$20			eor 	#$20
.1de0					_TTUNotUpper:
.1de0	60		rts				rts
.1de1					TOKIsDigit:
.1de1	c9 30		cmp #$30			cmp 	#"0"
.1de3	90 06		bcc $1deb			bcc 	TOKFail
.1de5	c9 3a		cmp #$3a			cmp 	#"9"+1
.1de7	b0 02		bcs $1deb			bcs 	TOKFail
.1de9					TOKSucceed:
.1de9	38		sec				sec
.1dea	60		rts				rts
.1deb					TOKFail:
.1deb	18		clc				clc
.1dec	60		rts				rts
.1ded					TOKIsIdentifierElement:
.1ded	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1def	f0 f8		beq $1de9			beq 	TOKSucceed
.1df1	c9 5f		cmp #$5f			cmp 	#"_"
.1df3	f0 f4		beq $1de9			beq 	TOKSucceed 					; else fall through to alphanumeric
.1df5					TOKIsAlphaNumeric:
.1df5	20 fe 1d	jsr $1dfe			jsr 	TOKIsAlpha
.1df8	b0 ef		bcs $1de9			bcs 	TOKSucceed
.1dfa	20 e1 1d	jsr $1de1			jsr 	TOKIsDigit
.1dfd	60		rts				rts
.1dfe					TOKIsAlpha:
.1dfe	20 cb 1d	jsr $1dcb			jsr 	TOKToUpper
.1e01	c9 41		cmp #$41			cmp 	#"A"
.1e03	90 e6		bcc $1deb			bcc 	TOKFail
.1e05	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1e07	b0 e2		bcs $1deb			bcs 	TOKFail
.1e09	80 de		bra $1de9			bra 	TOKSucceed
.1e0b					TOKIsHexadecimal:
.1e0b	20 e1 1d	jsr $1de1			jsr		TOKIsDigit
.1e0e	b0 d9		bcs $1de9			bcs 	TOKSucceed
.1e10	20 fe 1d	jsr $1dfe			jsr 	TOKIsAlpha
.1e13	90 d6		bcc $1deb			bcc 	TOKFail
.1e15	c9 47		cmp #$47			cmp 	#"F"+1
.1e17	b0 d2		bcs $1deb			bcs 	TOKFail
.1e19	80 ce		bra $1de9			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.1e1b					ErrorV_syntax:
.1e1b	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1e1e	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>1e26	72 72 6f 72 00
.1e2b					ErrorV_range:
.1e2b	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1e2e	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>1e36	61 6e 67 65 00
.1e3b					ErrorV_value:
.1e3b	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1e3e	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>1e46	65 00
.1e48					ErrorV_type:
.1e48	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1e4b	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>1e53	6d 61 74 63 68 00
.1e59					ErrorV_unimplemented:
.1e59	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1e5c	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>1e64	65 6d 65 6e 74 65 64 00
.1e6c					ErrorV_assert:
.1e6c	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1e6f	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>1e77	61 69 6c 00
.1e7b					ErrorV_internal:
.1e7b	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1e7e	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>1e86	20 45 72 72 6f 72 00
.1e8d					ErrorV_divzero:
.1e8d	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1e90	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>1e98	79 20 5a 65 72 6f 00
.1e9f					ErrorV_structure:
.1e9f	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1ea2	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>1eaa	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1eb6					ErrorV_stop:
.1eb6	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1eb9	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>1ec1	53 74 6f 70 70 65 64 00
.1ec9					ErrorV_data:
.1ec9	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1ecc	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>1ed4	61 74 61 00
.1ed8					ErrorV_redefine:
.1ed8	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1edb	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>1ee3	64 65 66 69 6e 65 64 00
.1eeb					ErrorV_index:
.1eeb	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1eee	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>1ef6	79 20 49 6e 64 65 78 00
.1efe					ErrorV_memory:
.1efe	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1f01	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>1f09	65 6d 6f 72 79 00
.1f0f					ErrorV_uninitialised:
.1f0f	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1f12	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>1f1a	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.1f29					ErrorV_string:
.1f29	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1f2c	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>1f34	6e 67 20 4c 65 6e 67 74 68 00
.1f3e					ErrorV_variable:
.1f3e	20 ab 28	jsr $28ab		jsr	ErrorHandler
>1f41	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>1f49	20 4d 69 73 73 69 6e 67 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.1f52					ERRCheckLParen:
.1f52	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1f54	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.1f56	d0 18		bne $1f70			bne 	ERRSyntaxError
.1f58	c8		iny				iny
.1f59	60		rts				rts
.1f5a					ERRCheckRParen:
.1f5a	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1f5c	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.1f5e	d0 10		bne $1f70			bne 	ERRSyntaxError
.1f60	c8		iny				iny
.1f61	60		rts				rts
.1f62					ERRCheckComma:
.1f62	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1f64	c9 99		cmp #$99			cmp 	#PR_COMMA
.1f66	d0 08		bne $1f70			bne 	ERRSyntaxError
.1f68	c8		iny				iny
.1f69	60		rts				rts
.1f6a					ERRCheckA:
.1f6a	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.1f6c	d0 02		bne $1f70			bne 	ERRSyntaxError
.1f6e	c8		iny				iny
.1f6f	60		rts				rts
.1f70					ERRSyntaxError:
.1f70	4c 1b 1e	jmp $1e1b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/bytes.asm

.1f73					StackPushByte:
.1f73	48		pha				pha 								; save byte on stack
.1f74	a5 26		lda $26				lda 	basicStack 					; decrement basic stack pointer
.1f76	d0 02		bne $1f7a			bne 	_SPBNoBorrow
.1f78	c6 27		dec $27				dec 	basicStack+1 				; borrow
.1f7a					_SPBNoBorrow:
.1f7a	c6 26		dec $26				dec 	basicStack
.1f7c	68		pla				pla 								; get back and write
.1f7d	92 26		sta ($26)			sta 	(basicStack)
.1f7f	60		rts				rts
.1f80					StackPopByte:
.1f80	b2 26		lda ($26)			lda 	(basicStack) 				; bump the stack pointer.
.1f82	e6 26		inc $26				inc 	basicStack
.1f84	d0 02		bne $1f88			bne 	_SPBNoCarry
.1f86	e6 27		inc $27				inc 	basicStack+1
.1f88					_SPBNoCarry:
.1f88	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.1f89					StackOpen:
.1f89	48		pha				pha 								; save frame byte
.1f8a	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.1f8c	0a		asl a				asl 	a 							; claim twice this for storage
.1f8d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.1f8f	38		sec				sec 								; so basically subtracting from
.1f90	65 26		adc $26				adc 	basicStack 	 				; basicStack
.1f92	85 26		sta $26				sta 	basicStack
.1f94	b0 03		bcs $1f99			bcs 	_SONoBorrow
>1f96	db						.byte 	$DB
.1f97	c6 27		dec $27				dec 	basicStack+1
.1f99					_SONoBorrow:
.1f99	68		pla				pla 								; get marker back and write at TOS
.1f9a	92 26		sta ($26)			sta 	(basicStack)
.1f9c	60		rts				rts
.1f9d					StackClose:
.1f9d	b2 26		lda ($26)			lda 	(basicStack) 				; get TOS marker
.1f9f	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.1fa1	0a		asl a				asl 	a 							; claim twice this.
.1fa2	65 26		adc $26				adc 	basicStack 					; add to the stack pointer.
.1fa4	85 26		sta $26				sta 	basicStack
.1fa6	90 02		bcc $1faa			bcc 	_SCExit
.1fa8	e6 27		inc $27				inc 	basicStack+1
.1faa					_SCExit:
.1faa	60		rts				rts
.1fab					StackCheckFrame:
.1fab	52 26		eor ($26)			eor 	(basicStack) 				; xor with toS marker
.1fad	29 f0		and #$f0			and 	#$F0 						; check type bits
.1faf	d0 01		bne $1fb2			bne 	_SCFError 					; different, we have structures mixed up
.1fb1	60		rts				rts
.1fb2					_SCFError:
.1fb2	8a		txa				txa 								; report error X
.1fb3	4c ab 28	jmp $28ab			jmp 	ErrorHandler

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.1fb6					StackReset:
.1fb6	48		pha				pha 								; save top of memory
.1fb7	3a		dec a				dec 	a  							; end of stack = previous byte
.1fb8	85 27		sta $27				sta 	basicStack+1
.1fba	a9 ff		lda #$ff			lda 	#$FF
.1fbc	85 26		sta $26				sta 	basicStack
.1fbe	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.1fc0	92 26		sta ($26)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.1fc2	68		pla				pla 								; allocate pages for stack.
.1fc3	38		sec				sec
.1fc4	e9 02		sbc #$02			sbc 	#2
.1fc6	60		rts				rts
.0026					basicStack:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.1fc7					StringConcrete:
.1fc7	5a		phy				phy 								; save position on stack
.1fc8	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.1fca	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.1fcc	b0 41		bcs $200f			bcs 	_SALengthError
.1fce	18		clc				clc 								; length of the new string
.1fcf	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.1fd1	90 02		bcc $1fd5			bcc 	_SAHaveLength
.1fd3	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.1fd5					_SAHaveLength:
.1fd5	48		pha				pha 								; save length to be allocated for concreting.
.1fd6	38		sec				sec
.1fd7	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.1fd9	6d 4a 04	adc $044a			adc 	stringMemory
.1fdc	8d 4a 04	sta $044a			sta 	stringMemory
.1fdf	85 22		sta $22				sta 	zTemp2 						; update storage address
.1fe1	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.1fe3	6d 4b 04	adc $044b			adc 	stringMemory+1
.1fe6	8d 4b 04	sta $044b			sta 	stringMemory+1
.1fe9	85 23		sta $23				sta 	zTemp2+1
.1feb	68		pla				pla 								; save length allocated in +0
.1fec	92 22		sta ($22)			sta 	(zTemp2)
.1fee	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.1ff0	a0 01		ldy #$01			ldy 	#1
.1ff2	91 22		sta ($22),y			sta 	(zTemp2),y
.1ff4					_SACopyNewString:
.1ff4	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.1ff6	a0 02		ldy #$02			ldy 	#2
.1ff8	91 22		sta ($22),y			sta 	(zTemp2),y
.1ffa	aa		tax				tax 								; bytes to copy
.1ffb	f0 0c		beq $2009			beq 	_SACopyExit
.1ffd	a0 01		ldy #$01			ldy 	#1 							; first character from here
.1fff					_SACopyNSLoop:
.1fff	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.2001	c8		iny				iny 								; write two on in string storage
.2002	c8		iny				iny
.2003	91 22		sta ($22),y			sta 	(zTemp2),y
.2005	88		dey				dey
.2006	ca		dex				dex									; until copied all the string lengths.
.2007	d0 f6		bne $1fff			bne 	_SACopyNSLoop
.2009					_SACopyExit:
.2009	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.200b	a5 22		lda $22				lda 	zTemp2
.200d	7a		ply				ply
.200e	60		rts				rts
.200f					_SALengthError:
.200f	4c 29 1f	jmp $1f29		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2012					StringSystemInitialise:
.2012	3a		dec a				dec 	a 							; make last byte of previous page.
.2013	8d 4b 04	sta $044b			sta 	stringMemory+1
.2016	85 1f		sta $1f				sta 	zTemp0+1
.2018	a9 ff		lda #$ff			lda 	#$FF
.201a	8d 4a 04	sta $044a			sta 	stringMemory
.201d	85 1e		sta $1e				sta 	zTemp0
.201f	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2021	92 1e		sta ($1e)			sta 	(zTemp0)
.2023	60		rts				rts
.2024					StringSpaceInitialise:
.2024	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2026	8d 49 04	sta $0449			sta 	stringInitialised
.2029	ad 4a 04	lda $044a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.202c	8d 4c 04	sta $044c			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.202f	ad 4b 04	lda $044b			lda 	stringMemory+1
.2032	3a		dec a				dec 	a
.2033	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.2036	60		rts				rts
.2037					StringTempAllocate:
.2037	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2039	b0 2e		bcs $2069			bcs 	_STALength
.203b	2c 49 04	bit $0449			bit 	stringInitialised 			; already initialised
.203e	30 05		bmi $2045			bmi 	_STAAllocate
.2040	48		pha				pha 								; save value to subtract.
.2041	20 24 20	jsr $2024			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2044	68		pla				pla 								; restore it
.2045					_STAAllocate:
.2045	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2047	18		clc				clc  								; deliberate allows one more
.2048	6d 4c 04	adc $044c			adc 	stringTempPointer 			; subtract from temp pointer
.204b	8d 4c 04	sta $044c			sta 	stringTempPointer
.204e	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.2050	85 28		sta $28				sta 	zsTemp 						; and zsTemp
.2052	ad 4d 04	lda $044d			lda 	stringTempPointer+1
.2055	69 ff		adc #$ff			adc 	#$FF
.2057	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.205a	85 29		sta $29				sta 	zsTemp+1
.205c	85 0d		sta $0d				sta 	IFR0+IM1
.205e	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2060	a9 80		lda #$80			lda 	#$80
.2062	85 0f		sta $0f				sta 	IFR0+IExp
.2064	a9 00		lda #$00			lda 	#0 							; clear the target string
.2066	92 28		sta ($28)			sta 	(zsTemp)
.2068	60		rts				rts
.2069					_STALength:
.2069	4c 29 1f	jmp $1f29		jmp	ErrorV_string
.206c					StringTempWrite:
.206c	5a		phy				phy
.206d	48		pha				pha
.206e	b2 28		lda ($28)			lda 	(zsTemp)
.2070	1a		inc a				inc 	a
.2071	92 28		sta ($28)			sta 	(zsTemp)
.2073	a8		tay				tay
.2074	68		pla				pla
.2075	91 28		sta ($28),y			sta 	(zsTemp),y
.2077	7a		ply				ply
.2078	60		rts				rts
.0028					zsTemp:
>0028							.fill 	2
.0449					stringInitialised:
>0449							.fill 	1
.044a					stringMemory:
>044a							.fill 	2
.044c					stringTempPointer:
>044c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2079					VARCreate:
.2079	5a		phy				phy
.207a	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.207c	a2 00		ldx #$00			ldx 	#0
.207e	20 32 10	jsr $1032			jsr 	AllocateMemory
.2081	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.2083	86 21		stx $21				stx 	zTemp1+1
.2085	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2087	ad 50 04	lda $0450			lda 	VARHash
.208a	91 20		sta ($20),y			sta 	(zTemp1),y
.208c	c8		iny				iny 								; put address of name into +3,+4
.208d	ad 4e 04	lda $044e			lda 	VARNameAddress
.2090	91 20		sta ($20),y			sta 	(zTemp1),y
.2092	c8		iny				iny
.2093	ad 4f 04	lda $044f			lda 	VARNameAddress+1
.2096	91 20		sta ($20),y			sta 	(zTemp1),y
.2098	ad 51 04	lda $0451			lda 	VARType
.209b	29 01		and #$01			and 	#1
.209d	f0 06		beq $20a5			beq 	_CVNotString
.209f	a0 08		ldy #$08			ldy 	#5+3
.20a1	a9 80		lda #$80			lda 	#$80
.20a3	91 20		sta ($20),y			sta 	(zTemp1),y
.20a5					_CVNotString:
.20a5	ad 72 04	lda $0472			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.20a8	85 1e		sta $1e				sta 	zTemp0
.20aa	ad 73 04	lda $0473			lda 	VARHashEntry+1
.20ad	85 1f		sta $1f				sta 	zTemp0+1
.20af	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.20b1	b2 1e		lda ($1e)			lda 	(zTemp0)
.20b3	92 20		sta ($20)			sta 	(zTemp1)
.20b5	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.20b7	91 20		sta ($20),y			sta 	(zTemp1),y
.20b9	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.20bb	92 1e		sta ($1e)			sta 	(zTemp0)
.20bd	a5 21		lda $21				lda 	zTemp1+1
.20bf	91 1e		sta ($1e),y			sta 	(zTemp0),y
.20c1	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.20c3	a6 21		ldx $21				ldx 	zTemp1+1
.20c5	18		clc				clc 								; add 5 to point to the data.
.20c6	69 05		adc #$05			adc 	#5
.20c8	90 01		bcc $20cb			bcc 	_VCNoCarry
.20ca	e8		inx				inx
.20cb					_VCNoCarry:
.20cb	7a		ply				ply
.20cc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.20cd					VARFind:
.20cd	5a		phy				phy
.20ce	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.20d0	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.20d2	85 21		sta $21				sta 	zTemp1+1
.20d4	f0 1c		beq $20f2			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.20d6	b2 1e		lda ($1e)			lda 	(zTemp0)
.20d8	85 20		sta $20				sta 	zTemp1
.20da					_VFLoop:
.20da	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.20dc	b1 20		lda ($20),y			lda 	(zTemp1),y
.20de	cd 50 04	cmp $0450			cmp 	VARHash
.20e1	f0 12		beq $20f5			beq 	_VFHashesMatch 				; if so, check the name.
.20e3					_VFNext:
.20e3	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.20e5	aa		tax				tax
.20e6	a0 01		ldy #$01			ldy 	#1
.20e8	b1 20		lda ($20),y			lda 	(zTemp1),y
.20ea	85 21		sta $21				sta 	zTemp1+1
.20ec	86 20		stx $20				stx 	zTemp1
.20ee	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.20f0	d0 e8		bne $20da			bne 	_VFLoop
.20f2					_VFExitFail:
.20f2	7a		ply				ply
.20f3	18		clc				clc
.20f4	60		rts				rts
.20f5					_VFHashesMatch:
.20f5	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.20f7	b1 20		lda ($20),y			lda 	(zTemp1),y
.20f9	85 22		sta $22				sta 	zTemp2
.20fb	c8		iny				iny
.20fc	b1 20		lda ($20),y			lda 	(zTemp1),y
.20fe	85 23		sta $23				sta 	zTemp2+1
.2100	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2102					_VFNameCompLoop:
.2102	c8		iny				iny 								; char at a time
.2103	b9 52 04	lda $0452,y			lda 	VARBuffer,y
.2106	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.2108	d0 d9		bne $20e3			bne 	_VFNext						; next entry if different.
.210a	c9 7c		cmp #$7c			cmp 	#$7C
.210c	90 f4		bcc $2102			bcc 	_VFNameCompLoop 			; until done the whole lot.
.210e	18		clc				clc
.210f	a5 20		lda $20				lda 	zTemp1
.2111	a6 21		ldx $21				ldx 	zTemp1+1
.2113	69 05		adc #$05			adc 	#5
.2115	90 01		bcc $2118			bcc 	_VFNNoCarry
.2117	e8		inx				inx
.2118					_VFNNoCarry:
.2118	7a		ply				ply
.2119	38		sec				sec
.211a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.211b					VARGetInfo:
.211b	98		tya				tya 								; calculate the address of the identifier start.
.211c	18		clc				clc
.211d	65 1c		adc $1c				adc 	codePtr
.211f	8d 4e 04	sta $044e			sta 	VARNameAddress
.2122	a5 1d		lda $1d				lda 	codePtr+1
.2124	69 00		adc #$00			adc 	#0
.2126	8d 4f 04	sta $044f			sta 	VARNameAddress+1
.2129	9c 50 04	stz $0450			stz 	VARHash
.212c	a2 00		ldx #$00			ldx 	#0
.212e					_VARCopyName:
.212e	18		clc				clc 								; update the sum hash.
.212f	ad 50 04	lda $0450			lda 	VARHash
.2132	71 1c		adc ($1c),y			adc 	(codePtr),y
.2134	8d 50 04	sta $0450			sta 	VARHash
.2137	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.2139	c8		iny				iny
.213a	9d 52 04	sta $0452,x			sta 	VARBuffer,x
.213d	e8		inx				inx
.213e	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2140	90 ec		bcc $212e			bcc 	_VARCopyName
.2142	8d 51 04	sta $0451			sta 	VARType 					; save type byte
.2145	29 03		and #$03			and 	#3 							; type is 0-3
.2147	0a		asl a				asl 	a
.2148	0a		asl a				asl 	a
.2149	85 1e		sta $1e				sta 	zTemp0
.214b	ad 50 04	lda $0450			lda 	VARHash 					; force into range of hash entries per type.
.214e	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2150	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.2152	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2153	69 74		adc #$74			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2155	85 1e		sta $1e				sta 	zTemp0
.2157	8d 72 04	sta $0472			sta 	VARHashEntry
.215a	a9 04		lda #$04			lda 	#VARHashTables >> 8
.215c	69 00		adc #$00			adc 	#0
.215e	85 1f		sta $1f				sta 	zTemp0+1
.2160	8d 73 04	sta $0473			sta 	VARHashEntry+1
.2163	60		rts				rts
.2164					VARClearHashTables:
.2164	a2 00		ldx #$00			ldx 	#0
.2166					_VCHRLoop:
.2166	a9 00		lda #$00			lda 	#0
.2168	9d 74 04	sta $0474,x			sta 	VARHashTables,x
.216b	e8		inx				inx
.216c	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.216e	d0 f6		bne $2166			bne 	_VCHRLoop
.2170	60		rts				rts
.044e					VARNameAddress:
>044e							.fill 	2
.0450					VARHash:
>0450							.fill 	1
.0451					VARType:
>0451							.fill 	1
.0452					VARBuffer:
>0452							.fill 	32
.0472					VARHashEntry:
>0472							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0474					VARHashTables:
>0474							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2171					VARCheckSimple:
.2171	aa		tax				tax 								; save in X
.2172	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2174	c9 7c		cmp #$7c			cmp 	#$7C
.2176	d0 15		bne $218d			bne 	_VCSComplex
.2178	c8		iny				iny 								; consume the second byte, the type.
.2179	8a		txa				txa  								; character (40-7F) x 4
.217a	0a		asl a				asl 	a
.217b	0a		asl a				asl  	a
.217c	18		clc				clc
.217d	69 94		adc #$94			adc 	#FastVariables & $FF
.217f	85 0c		sta $0c				sta 	IFR0+IM0
.2181	a9 04		lda #$04			lda 	#FastVariables >> 8
.2183	69 00		adc #$00			adc 	#0
.2185	85 0d		sta $0d				sta 	IFR0+IM1
.2187	64 0e		stz $0e				stz 	IFR0+IM2
.2189	64 0f		stz $0f				stz 	IFR0+IExp
.218b	38		sec				sec 								; it's a reference
.218c	60		rts				rts
.218d					_VCSComplex:
.218d	88		dey				dey	 								; extract information.
.218e	20 1b 21	jsr $211b			jsr 	VARGetInfo
.2191	20 cd 20	jsr $20cd			jsr 	VARFind 					; search for variable
.2194	b0 0a		bcs $21a0			bcs 	_VCSHaveVariable
.2196	ad 51 04	lda $0451			lda 	VARType 					; error if arrays, cannot autocreate
.2199	29 02		and #$02			and 	#2
.219b	d0 14		bne $21b1			bne 	_VCNoCreate
.219d	20 79 20	jsr $2079			jsr 	VARCreate 					; create variable
.21a0					_VCSHaveVariable:
.21a0	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.21a2	85 0c		sta $0c				sta 	IFR0+IM0
.21a4	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.21a6	ad 51 04	lda $0451			lda 	VARType 					; number/string bit into carry
.21a9	6a		ror a				ror 	a
.21aa	a9 00		lda #$00			lda 	#0
.21ac	6a		ror a				ror 	a 							; now $00 or $80
.21ad	85 0f		sta $0f				sta 	IFR0+IExp
.21af	38		sec				sec 								; it's a reference
.21b0	60		rts				rts
.21b1					_VCNoCreate:
.21b1	4c 0f 1f	jmp $1f0f		jmp	ErrorV_uninitialised
.0494					FastVariables:
>0494							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.21b4					IFInitialise:
.21b4	9c 04 05	stz $0504			stz 	IFStackIndex
.21b7	60		rts				rts
.21b8					IFloatSubtract:
.21b8	da		phx				phx
.21b9	a2 0c		ldx #$0c			ldx 	#IFR0
.21bb	20 d4 27	jsr $27d4			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.21be	fa		plx				plx
.21bf					IFloatAdd:
.21bf	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.21c1	05 0f		ora $0f				ora 	IFR0+IExp
.21c3	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.21c5	d0 4e		bne $2215			bne 	_IFloatAddDecimals 			; decimal version.
.21c7					_IFAddSubMantissa:
.21c7	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.21c9	45 0f		eor $0f				eor 	IFR0+IExp
.21cb	29 40		and #$40			and 	#IFSign
.21cd	d0 21		bne $21f0			bne 	_IFloatSubMantissa
.21cf	18		clc				clc 								; do the actual addition
.21d0	a5 0c		lda $0c			lda 	IFR0+IM0
.21d2	75 00		adc $00,x		adc 		IM0,x
.21d4	85 0c		sta $0c			sta 	IFR0+IM0
.21d6	a5 0d		lda $0d			lda 	IFR0+IM1
.21d8	75 01		adc $01,x		adc 		IM1,x
.21da	85 0d		sta $0d			sta 	IFR0+IM1
.21dc	a5 0e		lda $0e			lda 	IFR0+IM2
.21de	75 02		adc $02,x		adc 		IM2,x
.21e0	85 0e		sta $0e			sta 	IFR0+IM2
.21e2	10 29		bpl $220d			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.21e4	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.21e6	20 f8 27	jsr $27f8			jsr 	IFloatShiftRight
.21e9	20 22 28	jsr $2822			jsr 	IFloatIncExponent
.21ec	d0 1f		bne $220d			bne 	_IFloatAddExit
.21ee	38		sec				sec 								; overflowed numerically.
.21ef	60		rts				rts
.21f0					_IFloatSubMantissa:
.21f0	38		sec				sec 								; do the subtraction R0-Rx
.21f1	a5 0c		lda $0c			lda 	IFR0+IM0
.21f3	f5 00		sbc $00,x		sbc 		IM0,x
.21f5	85 0c		sta $0c			sta 	IFR0+IM0
.21f7	a5 0d		lda $0d			lda 	IFR0+IM1
.21f9	f5 01		sbc $01,x		sbc 		IM1,x
.21fb	85 0d		sta $0d			sta 	IFR0+IM1
.21fd	a5 0e		lda $0e			lda 	IFR0+IM2
.21ff	f5 02		sbc $02,x		sbc 		IM2,x
.2201	85 0e		sta $0e			sta 	IFR0+IM2
.2203	b0 08		bcs $220d			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2205	a2 0c		ldx #$0c			ldx 	#IFR0
.2207	20 dc 27	jsr $27dc			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.220a	20 d4 27	jsr $27d4			jsr 	IFloatNegate 				; negate
.220d					_IFloatAddExit:
.220d	18		clc				clc
.220e	60		rts				rts
.220f					_IFloatZeroAdd:
.220f	fa		plx				plx 								; return this value in R0
.2210	20 5a 27	jsr $275a			jsr 	IFloatCopyFromRegister
.2213	18		clc				clc
.2214	60		rts				rts
.2215					_IFloatAddDecimals:
.2215	20 c2 27	jsr $27c2			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2218	f0 f3		beq $220d			beq 	_IFloatAddExit
.221a	20 00 28	jsr $2800			jsr 	IFloatNormalise 			; normalise RX
.221d	da		phx				phx 								; normalise R0
.221e	a2 0c		ldx #$0c			ldx 	#IFR0
.2220	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero
.2223	f0 ea		beq $220f			beq 	_IFloatZeroAdd
.2225	20 00 28	jsr $2800			jsr 	IFloatNormalise
.2228	fa		plx				plx
.2229	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.222b	29 3f		and #$3f			and 	#IFXMask
.222d	38		sec				sec
.222e	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2230	85 0a		sta $0a				sta 	iTemp0
.2232	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2234	29 3f		and #$3f			and 	#IFXMask
.2236	38		sec				sec
.2237	e9 20		sbc #$20			sbc 	#$20
.2239	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.223b	b0 02		bcs $223f			bcs 	_IFloatHaveLarger
.223d	a5 0a		lda $0a				lda 	iTemp0
.223f					_IFloatHaveLarger:
.223f	18		clc				clc 								; get the actual one back.
.2240	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2242	20 4f 22	jsr $224f			jsr 	_IFShiftXToA
.2245	da		phx				phx
.2246	a2 0c		ldx #$0c			ldx 	#IFR0
.2248	20 4f 22	jsr $224f			jsr 	_IFShiftXToA
.224b	fa		plx				plx
.224c	4c c7 21	jmp $21c7			jmp 	_IFAddSubMantissa 			; do the adding bit.
.224f					_IFShiftXToA:
.224f	8d fc 04	sta $04fc			sta 	IFTarget
.2252	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero 			; check adding zero ?
.2255	f0 11		beq $2268			beq 	_IFSXExit
.2257					_IFSXLoop:
.2257	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2259	29 3f		and #$3f			and 	#IFXMask
.225b	cd fc 04	cmp $04fc			cmp 	IFTarget
.225e	f0 08		beq $2268			beq 	_IFSXExit
.2260	20 f8 27	jsr $27f8			jsr 	IFloatShiftRight
.2263	20 22 28	jsr $2822			jsr 	IFloatIncExponent
.2266	80 ef		bra $2257			bra 	_IFSXLoop
.2268					_IFSXExit:
.2268	60		rts				rts
.04fc					IFTarget:
>04fc							.fill 	1
.2269					IFloatMultiply:
.2269	8e fc 04	stx $04fc			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.226c	20 24 23	jsr $2324			jsr 	IFCalculateNewSign
.226f	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2271	05 0f		ora $0f				ora 	IFR0+IExp
.2273	29 3f		and #$3f			and 	#IFXMask
.2275	15 01		ora $01,x			ora 	IM1,x
.2277	05 0d		ora $0d				ora 	IFR0+IM1
.2279	15 02		ora $02,x			ora 	IM2,x
.227b	05 0e		ora $0e				ora 	IFR0+IM2
.227d	d0 0a		bne $2289			bne 	_IFMStandard
.227f	20 a5 27	jsr $27a5			jsr 	IFloatMultiply8BitRx
.2282	ad fe 04	lda $04fe			lda 	IFNewSign
.2285	85 0f		sta $0f				sta 	IFR0+IExp
.2287	18		clc				clc
.2288	60		rts				rts
.2289					_IFMStandard:
.2289	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.228b	20 1b 23	jsr $231b			jsr 	IFMSignExtend
.228e	8d fd 04	sta $04fd			sta 	IFNewExponent
.2291	a5 0f		lda $0f				lda 	IFR0+IExp
.2293	20 1b 23	jsr $231b			jsr 	IFMSignExtend
.2296	18		clc				clc
.2297	6d fd 04	adc $04fd			adc 	IFNewExponent
.229a	8d fd 04	sta $04fd			sta 	IFNewExponent
.229d	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.229f	20 6b 27	jsr $276b			jsr 	IFloatCopyToRegister
.22a2	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.22a4	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.22a7					_IFMLoop:
.22a7	a2 18		ldx #$18			ldx 	#IFRTemp
.22a9	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero
.22ac	f0 3a		beq $22e8			beq 	_IFMExit
.22ae	ae fc 04	ldx $04fc			ldx 	IFTarget 					; look at adder MSB
.22b1	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.22b3	10 03		bpl $22b8			bpl	 	_IFMTargetOkay
.22b5	20 0c 23	jsr $230c			jsr 	_IFMShiftAll
.22b8					_IFMTargetOkay:
.22b8	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.22ba	29 01		and #$01			and 	#1
.22bc	f0 16		beq $22d4			beq 	_IFMNoAdd
.22be	ae fc 04	ldx $04fc			ldx 	IFTarget 					; add adder
.22c1	18		clc				clc
.22c2	a5 0c		lda $0c			lda 	IFR0+IM0
.22c4	75 00		adc $00,x		adc 		IM0,x
.22c6	85 0c		sta $0c			sta 	IFR0+IM0
.22c8	a5 0d		lda $0d			lda 	IFR0+IM1
.22ca	75 01		adc $01,x		adc 		IM1,x
.22cc	85 0d		sta $0d			sta 	IFR0+IM1
.22ce	a5 0e		lda $0e			lda 	IFR0+IM2
.22d0	75 02		adc $02,x		adc 		IM2,x
.22d2	85 0e		sta $0e			sta 	IFR0+IM2
.22d4					_IFMNoAdd:
.22d4	a5 0e		lda $0e				lda 	IFR0+IM2
.22d6	10 03		bpl $22db			bpl 	_IFMResultOkay
.22d8	20 0c 23	jsr $230c			jsr 	_IFMShiftAll
.22db					_IFMResultOkay:
.22db	a2 18		ldx #$18			ldx 	#IFRTemp
.22dd	20 f8 27	jsr $27f8			jsr 	IFloatShiftRight
.22e0	ae fc 04	ldx $04fc			ldx 	IFTarget
.22e3	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.22e6	80 bf		bra $22a7			bra 	_IFMLoop
.22e8					_IFMExit:
.22e8	ad fd 04	lda $04fd			lda 	IFNewExponent 				; validate new exponent.
.22eb	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.22ed	90 0f		bcc $22fe			bcc 	_IFMOkay
.22ef	c9 e0		cmp #$e0			cmp 	#$E0
.22f1	b0 0b		bcs $22fe			bcs 	_IFMOkay
.22f3	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.22f5	f0 13		beq $230a			beq 	_IFMError
.22f7	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.22f9	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.22fc	18		clc				clc
.22fd	60		rts				rts
.22fe					_IFMOkay:
.22fe	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2300	0d fe 04	ora $04fe			ora 	IFNewSign
.2303	85 0f		sta $0f				sta 	IFR0+IExp
.2305	18		clc				clc
.2306	60		rts				rts
.2307	4c ff ff	jmp $ffff			jmp 	$FFFF
.230a					_IFMError:
.230a	38		sec				sec
.230b	60		rts				rts
.230c					_IFMShiftAll:
.230c	a2 0c		ldx #$0c			ldx 	#IFR0
.230e	20 f8 27	jsr $27f8			jsr 	IFloatShiftRight
.2311	ae fc 04	ldx $04fc			ldx 	IFTarget
.2314	20 f8 27	jsr $27f8			jsr 	IFloatShiftRight
.2317	ee fd 04	inc $04fd			inc 	IFNewExponent
.231a	60		rts				rts
.231b					IFMSignExtend:
.231b	29 3f		and #$3f			and 	#IFXMask
.231d	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.231f	90 02		bcc $2323			bcc 	_IFMNoSXX
.2321	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2323					_IFMNoSXX:
.2323	60		rts				rts
.2324					IFCalculateNewSign:
.2324	b5 03		lda $03,x			lda 	IExp,x
.2326	45 0f		eor $0f				eor 	IFR0+IExp
.2328	29 40		and #$40			and 	#IFSign
.232a	8d fe 04	sta $04fe			sta 	IFNewSign
.232d	60		rts				rts
.04fd					IFNewExponent:
>04fd							.fill 	1
.04fe					IFNewSign:
>04fe							.fill 	1
.232e					IFloatDivideInteger:
.232e	20 47 23	jsr $2347			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2331	b0 06		bcs $2339			bcs 	_IFDIExit
.2333	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.2335	20 5a 27	jsr $275a			jsr 	IFloatCopyFromRegister
.2338	18		clc				clc
.2339					_IFDIExit:
.2339	60		rts				rts
.233a					IFloatModulusInteger:
.233a	20 47 23	jsr $2347			jsr 	IFloatDivideIntegerCommon
.233d	b0 07		bcs $2346			bcs 	_IFMIExit
.233f	ae fc 04	ldx $04fc			ldx 	IFTarget
.2342	20 5a 27	jsr $275a			jsr 	IFloatCopyFromRegister
.2345	18		clc				clc
.2346					_IFMIExit:
.2346	60		rts				rts
.2347					IFloatDivideIntegerCommon:
.2347	8e fc 04	stx $04fc			stx 	IFTarget  					; this is s1, s0 = R0
.234a	20 24 23	jsr $2324			jsr 	IFCalculateNewSign 			; calculate sign of result
.234d	20 75 23	jsr $2375			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2350	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.2352	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero
.2355	f0 1c		beq $2373			beq 	_IFDIDivZero
.2357	ae fc 04	ldx $04fc			ldx 	IFTarget 					; zero Rx (S1)
.235a	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.235d	5a		phy				phy
.235e	a0 18		ldy #$18			ldy 	#24
.2360					_IFDILoop:
.2360	20 86 23	jsr $2386			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2363	20 92 23	jsr $2392			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2366	88		dey				dey
.2367	d0 f7		bne $2360			bne 	_IFDILoop 					; do it 24 times
.2369	7a		ply				ply
.236a	ad fe 04	lda $04fe			lda 	IFNewSign 					; set sign of result.
.236d	29 40		and #$40			and 	#IFSign
.236f	85 1b		sta $1b				sta 	IFRTemp+IExp
.2371	18		clc				clc 								; is okay.
.2372	60		rts				rts
.2373					_IFDIDivZero:
.2373	38		sec				sec
.2374	60		rts				rts
.2375					IFDCopyRXToRTemp:
.2375	b5 00		lda $00,x			lda 	IM0,x
.2377	85 18		sta $18				sta 	IFRTemp+IM0
.2379	b5 01		lda $01,x			lda 	IM1,x
.237b	85 19		sta $19				sta 	IFRTemp+IM1
.237d	b5 02		lda $02,x			lda 	IM2,x
.237f	85 1a		sta $1a				sta 	IFRTemp+IM2
.2381	b5 03		lda $03,x			lda 	IExp,x
.2383	85 1b		sta $1b				sta 	IFRTemp+IExp
.2385	60		rts				rts
.2386					IFDShiftSTempS1Left:
.2386	a2 18		ldx #$18			ldx 	#IFRTemp
.2388	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft
.238b	ae fc 04	ldx $04fc			ldx 	IFTarget
.238e	20 f1 27	jsr $27f1			jsr 	IFloatRotateLeft
.2391	60		rts				rts
.2392					IFDTrySubtract:
.2392	ae fc 04	ldx $04fc			ldx 	IFTarget 					; s1 = Rx
.2395	38		sec				sec 								; subtract, saving the results on the stack.
.2396	b5 00		lda $00,x			lda 	IM0,x
.2398	e5 0c		sbc $0c				sbc 	IFR0+IM0
.239a	48		pha				pha
.239b	b5 01		lda $01,x			lda 	IM1,x
.239d	e5 0d		sbc $0d				sbc 	IFR0+IM1
.239f	48		pha				pha
.23a0	b5 02		lda $02,x			lda 	IM2,x
.23a2	e5 0e		sbc $0e				sbc 	IFR0+IM2
.23a4	b0 03		bcs $23a9			bcs 	_IFDCanSubtract
.23a6	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.23a7	68		pla				pla
.23a8	60		rts				rts
.23a9					_IFDCanSubtract:
.23a9	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.23ab	68		pla				pla
.23ac	95 01		sta $01,x			sta 	IM1,x
.23ae	68		pla				pla
.23af	95 00		sta $00,x			sta 	IM0,x
.23b1	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.23b3	d0 06		bne $23bb			bne 	_IFDCSExit
.23b5	e6 19		inc $19				inc 	IFRTemp+IM1
.23b7	d0 02		bne $23bb			bne 	_IFDCSExit
.23b9	e6 1a		inc $1a				inc 	IFRTemp+IM2
.23bb					_IFDCSExit:
.23bb	60		rts				rts
.23bc					IFloatBitwiseAnd:
.23bc	5a		phy				phy
.23bd	20 01 24	jsr $2401			jsr 	IFPreProcessBitwise 		; set up everything.
.23c0	d0 0f		bne $23d1			bne 	_IFBAExit
.23c2					_IFBALoop:
.23c2	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.23c5	35 00		and $00,x			and 	IM0,x
.23c7	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.23ca	e8		inx				inx
.23cb	c8		iny				iny
.23cc	c0 03		cpy #$03			cpy 	#3
.23ce	d0 f2		bne $23c2			bne 	_IFBALoop
.23d0	18		clc				clc
.23d1					_IFBAExit:
.23d1	7a		ply				ply
.23d2	60		rts				rts
.23d3					IFloatBitwiseOr:
.23d3	5a		phy				phy
.23d4	20 01 24	jsr $2401			jsr 	IFPreProcessBitwise 		; set up everything.
.23d7	d0 0f		bne $23e8			bne 	_IFBAExit
.23d9					_IFBALoop:
.23d9	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.23dc	15 00		ora $00,x			ora 	IM0,x
.23de	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.23e1	e8		inx				inx
.23e2	c8		iny				iny
.23e3	c0 03		cpy #$03			cpy 	#3
.23e5	d0 f2		bne $23d9			bne 	_IFBALoop
.23e7	18		clc				clc
.23e8					_IFBAExit:
.23e8	7a		ply				ply
.23e9	60		rts				rts
.23ea					IFloatBitwiseXor:
.23ea	5a		phy				phy
.23eb	20 01 24	jsr $2401			jsr 	IFPreProcessBitwise 		; set up everything.
.23ee	d0 0f		bne $23ff			bne 	_IFBAExit
.23f0					_IFBALoop:
.23f0	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.23f3	55 00		eor $00,x			eor 	IM0,x
.23f5	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.23f8	e8		inx				inx
.23f9	c8		iny				iny
.23fa	c0 03		cpy #$03			cpy 	#3
.23fc	d0 f2		bne $23f0			bne 	_IFBALoop
.23fe	18		clc				clc
.23ff					_IFBAExit:
.23ff	7a		ply				ply
.2400	60		rts				rts
.2401					IFPreProcessBitwise:
.2401	a0 00		ldy #$00			ldy 	#0 							; set index.
.2403	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.2405	15 03		ora $03,x			ora 	IExp,x
.2407	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2409	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.240b	38		sec				sec 								; carry set just in cases.
.240c	60		rts				rts
.240d					IFloatAbsoluteR0:
.240d	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.240f	29 bf		and #$bf			and 	#IFSign ^ 255
.2411	85 0f		sta $0f				sta 	IFR0+IExp
.2413	18		clc				clc
.2414	60		rts				rts
.2415					IFloatSquareRootR0:
.2415	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.2417	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero
.241a	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.241c	29 40		and #$40			and 	#IFSign
.241e	d0 2f		bne $244f			bne 	_IFSRFail
.2420	20 00 28	jsr $2800			jsr 	IFloatNormalise 			; it will work better !
.2423	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.2425	20 6b 27	jsr $276b			jsr 	IFloatCopyToRegister
.2428	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.242a	20 1b 23	jsr $231b			jsr 	IFMSignExtend 				; sign extended version of the exponent
.242d	18		clc				clc
.242e	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2430	85 0f		sta $0f				sta 	IFR0+IExp
.2432	4a		lsr a				lsr 	a 							; which we can halve.
.2433	38		sec				sec 								; convert back
.2434	e9 17		sbc #$17			sbc 	#23
.2436	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2438	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.243a	20 51 24	jsr $2451			jsr 	_IFSRNewton
.243d	20 51 24	jsr $2451			jsr 	_IFSRNewton
.2440	20 51 24	jsr $2451			jsr 	_IFSRNewton
.2443	20 51 24	jsr $2451			jsr 	_IFSRNewton
.2446	18		clc				clc
.2447	60		rts				rts
.2448					_IFSRZero:
.2448	a2 0c		ldx #$0c			ldx 	#IFR0
.244a	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.244d	18		clc				clc
.244e	60		rts				rts
.244f					_IFSRFail:
.244f	38		sec				sec
.2450	60		rts				rts
.2451					_IFSRNewton:
.2451	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.2453	20 18 27	jsr $2718			jsr 	IFloatPushRx
.2456	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2458	20 18 27	jsr $2718			jsr 	IFloatPushRx
.245b	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.245d	20 ec 24	jsr $24ec			jsr 	IFloatDivideFloat
.2460	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2462	20 39 27	jsr $2739			jsr 	IFloatPullRx
.2465	20 bf 21	jsr $21bf			jsr 	IFloatAdd 					; now guess + original/guess
.2468	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.246a	20 f8 27	jsr $27f8			jsr 	IFloatShiftRight
.246d	a2 10		ldx #$10			ldx 	#IFR1
.246f	20 39 27	jsr $2739			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2472	60		rts				rts
.2473					IFloatFractionalR0:
.2473	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2475	29 3f		and #$3f			and 	#IFXMask
.2477	f0 17		beq $2490			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2479	20 0d 24	jsr $240d			jsr 	IFloatAbsoluteR0 			; absolute value R9
.247c	a2 0c		ldx #$0c			ldx 	#IFR0
.247e	20 00 28	jsr $2800			jsr 	IFloatNormalise 			; normalise R0
.2481	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.2483	20 6b 27	jsr $276b			jsr 	IFloatCopyToRegister
.2486	20 c9 24	jsr $24c9			jsr 	IFloatIntegerR0 			; take integer part of R0
.2489	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.248b	20 b8 21	jsr $21b8			jsr 	IFloatSubtract
.248e	80 05		bra $2495			bra 	_FIPExit
.2490					_FIPZero:
.2490	a2 0c		ldx #$0c			ldx 	#IFR0
.2492	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.2495					_FIPExit:
.2495	18		clc				clc
.2496	60		rts				rts
.2497					IFloatCompare:
.2497	20 b8 21	jsr $21b8			jsr 	IFloatSubtract 				; subtract R0 from RX.
.249a	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.249c	05 0f		ora $0f				ora 	IFR0+IExp
.249e	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.24a0	29 3f		and #$3f			and 	#IFXMask
.24a2	d0 19		bne $24bd			bne 	_IFCNonInteger
.24a4	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero 			; check if zero
.24a7	f0 0f		beq $24b8			beq 	_IFCZero
.24a9					_IFCReturnSign:
.24a9	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.24ab	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.24ad	48		pha				pha
.24ae	a9 01		lda #$01			lda 	#1
.24b0	20 cb 27	jsr $27cb			jsr 	IFloatSetByte 				; return to +1
.24b3	68		pla				pla 								; sign bit back
.24b4	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.24b6	18		clc				clc
.24b7	60		rts				rts
.24b8					_IFCZero:
.24b8	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.24bb	18		clc				clc
.24bc	60		rts				rts
.24bd					_IFCNonInteger:
.24bd	a5 0c		lda $0c				lda 	IFR0+IM0
.24bf	29 00		and #$00			and		#$00
.24c1	05 0d		ora $0d				ora 	IFR0+IM1
.24c3	05 0e		ora $0e				ora 	IFR0+IM2
.24c5	f0 f1		beq $24b8			beq 	_IFCZero 					; near enough !
.24c7	80 e0		bra $24a9			bra 	_IFCReturnSign 				; return the sign of the difference.
.24c9					IFloatIntegerR0:
.24c9	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.24cb	29 3f		and #$3f			and 	#IFXMask
.24cd	f0 1b		beq $24ea			beq 	_FIPExit 					; if so do nothing
.24cf	a2 0c		ldx #$0c			ldx 	#IFR0
.24d1	20 00 28	jsr $2800			jsr 	IFloatNormalise 			; normalise
.24d4	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero 			; is it zero ?
.24d7	f0 0e		beq $24e7			beq 	_FIPZero 					; if so return zero.
.24d9					_FIPShift:
.24d9	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.24db	29 20		and #$20			and 	#$20 						; still -ve
.24dd	f0 0b		beq $24ea			beq 	_FIPExit
.24df	20 f8 27	jsr $27f8			jsr 	IFloatShiftRight 			; shift mantissa right
.24e2	20 22 28	jsr $2822			jsr 	IFloatIncExponent 			; bump exponent
.24e5	80 f2		bra $24d9			bra 	_FIPShift
.24e7					_FIPZero:
.24e7	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.24ea					_FIPExit:
.24ea	18		clc				clc
.24eb	60		rts				rts
.24ec					IFloatDivideFloat:
.24ec	8e fc 04	stx $04fc			stx 	IFTarget  					; this is s1, s0 = R0
.24ef	20 24 23	jsr $2324			jsr 	IFCalculateNewSign 			; calculate sign of result
.24f2	20 00 28	jsr $2800			jsr 	IFloatNormalise 			; normalise RX
.24f5	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.24f7	20 00 28	jsr $2800			jsr 	IFloatNormalise
.24fa	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero
.24fd	f0 56		beq $2555			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.24ff	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.2501	20 1b 23	jsr $231b			jsr 	IFMSignExtend
.2504	8d fd 04	sta $04fd			sta 	IFNewExponent
.2507	ae fc 04	ldx $04fc			ldx 	IFTarget 					; calculate s1.exponent
.250a	b5 03		lda $03,x			lda 	IExp,x
.250c	20 1b 23	jsr $231b			jsr 	IFMSignExtend
.250f	38		sec				sec
.2510	ed fd 04	sbc $04fd			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2513	38		sec				sec
.2514	e9 17		sbc #$17			sbc 	#23
.2516	8d fd 04	sta $04fd			sta 	IFNewExponent
.2519	20 57 25	jsr $2557			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.251c	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.251e	10 08		bpl $2528			bpl 	_IFDFNoShiftResult
.2520	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.2522	20 f8 27	jsr $27f8			jsr 	IFloatShiftRight
.2525	ee fd 04	inc $04fd			inc 	IFNewExponent
.2528					_IFDFNoShiftResult:
.2528	ad fd 04	lda $04fd			lda 	IFNewExponent 				; underflow/overflow check.
.252b	30 06		bmi $2533			bmi 	_IFDFCheckUnderflow
.252d	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.252f	b0 24		bcs $2555			bcs 	_IFDFDivZero
.2531	80 11		bra $2544			bra		_IFDFExit
.2533					_IFDFCheckUnderflow:
.2533	ad fd 04	lda $04fd			lda 	IFNewExponent 				; shift into a legal exponent.
.2536	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2538	b0 0a		bcs $2544			bcs 	_IFDFExit
.253a	ee fd 04	inc $04fd			inc 	IFNewExponent
.253d	a2 18		ldx #$18			ldx 	#IFRTemp
.253f	20 f8 27	jsr $27f8			jsr 	IFloatShiftRight
.2542	80 ef		bra $2533			bra 	_IFDFCheckUnderflow
.2544					_IFDFExit:
.2544	ad fd 04	lda $04fd			lda 	IFNewExponent 				; combine exponent and sign.
.2547	29 3f		and #$3f			and 	#IFXMask
.2549	0d fe 04	ora $04fe			ora 	IFNewSign
.254c	85 1b		sta $1b				sta 	IFRTemp+IExp
.254e	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.2550	20 5a 27	jsr $275a			jsr 	IFloatCopyFromRegister
.2553	18		clc				clc
.2554	60		rts				rts
.2555					_IFDFDivZero:
.2555	38		sec				sec
.2556	60		rts				rts
.2557					IFloatDivideSupport:
.2557	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.2559	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.255c	5a		phy				phy 								; main division loop x 23
.255d	a0 17		ldy #$17			ldy 	#23
.255f					_IFDSLoop:
.255f	20 92 23	jsr $2392			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2562	20 86 23	jsr $2386			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2565	88		dey				dey
.2566	d0 f7		bne $255f			bne 	_IFDSLoop 					; do it 24 times
.2568	7a		ply				ply
.2569	60		rts				rts
.256a					IFloatIntegerToStringR0:
.256a	8d ff 04	sta $04ff			sta 	IFBase 						; save base to use.
.256d	20 4a 28	jsr $284a			jsr 	IFloatBufferReset			; empty buffer
.2570	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.2572	29 3f		and #$3f			and 	#IFXMask
.2574	d0 1e		bne $2594			bne 	_IFIFail
.2576	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.2578	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero
.257b	f0 0e		beq $258b			beq 	_IFINotNegative
.257d	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.257f	29 40		and #$40			and 	#IFSign
.2581	f0 08		beq $258b			beq 	_IFINotNegative
.2583	a9 2d		lda #$2d			lda 	#"-"						; output -
.2585	20 59 28	jsr $2859			jsr 	IFloatBufferWrite
.2588	20 d4 27	jsr $27d4			jsr 	IFloatNegate 				; tidy up !
.258b					_IFINotNegative:
.258b	20 96 25	jsr $2596			jsr 	_IFIRecursiveConvert 		; start converting
.258e	20 51 28	jsr $2851			jsr 	IFloatGetBufferAddress
.2591	18		clc				clc
.2592	80 01		bra $2595			bra 	_IFIExit
.2594					_IFIFail:
.2594	38		sec				sec
.2595					_IFIExit:
.2595	60		rts				rts
.2596					_IFIRecursiveConvert:
.2596	a2 10		ldx #$10			ldx 	#IFR1
.2598	20 6b 27	jsr $276b			jsr 	IFloatCopyToRegister 		; R0->R1
.259b	a2 0c		ldx #$0c			ldx 	#IFR0
.259d	ad ff 04	lda $04ff			lda 	IFBase 						; Base -> R0
.25a0	20 cb 27	jsr $27cb			jsr 	IFloatSetByte
.25a3	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.25a5	20 2e 23	jsr $232e			jsr 	IFloatDivideInteger
.25a8	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.25aa	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero
.25ad	f0 09		beq $25b8			beq 	_IFIOutDigit
.25af	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.25b1	48		pha				pha
.25b2	20 96 25	jsr $2596			jsr 	_IFIRecursiveConvert 		; convert the divider
.25b5	68		pla				pla
.25b6	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.25b8					_IFIOutDigit:
.25b8	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.25ba	c9 0a		cmp #$0a			cmp	 	#10
.25bc	90 02		bcc $25c0			bcc 	_IFINotHex
.25be	69 06		adc #$06			adc 	#6
.25c0					_IFINotHex:
.25c0	69 30		adc #$30			adc 	#48
.25c2	20 59 28	jsr $2859			jsr 	IFloatBufferWrite
.25c5	60		rts				rts
.04ff					IFBase:
>04ff							.fill 	1
.25c6					IFloatFloatToStringR0:
.25c6	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.25c8	20 18 27	jsr $2718			jsr 	IFloatPushRx
.25cb	20 6b 27	jsr $276b			jsr 	IFloatCopyToRegister
.25ce	20 c9 24	jsr $24c9			jsr 	IFloatIntegerR0				; make R0 integer
.25d1	a9 0a		lda #$0a			lda 	#10 						; base 10.
.25d3	20 6a 25	jsr $256a			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.25d6	9c 00 05	stz $0500			stz 	IFloatDecimalCount 			; zero the decimal count.
.25d9	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.25db	29 3f		and #$3f			and 	#IFXMask
.25dd	f0 44		beq $2623			beq 	_IFFSExit
.25df					_IFloatFracLoop:
.25df	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.25e1	20 5a 27	jsr $275a			jsr 	IFloatCopyFromRegister
.25e4	20 73 24	jsr $2473			jsr 	IFloatFractionalR0
.25e7	20 00 28	jsr $2800			jsr 	IFloatNormalise
.25ea	a2 14		ldx #$14			ldx 	#IFR2
.25ec	20 6b 27	jsr $276b			jsr 	IFloatCopyToRegister 		; copy to R2
.25ef	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.25f1	a9 0a		lda #$0a			lda 	#10
.25f3	20 cb 27	jsr $27cb			jsr 	IFloatSetByte
.25f6	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.25f8	20 69 22	jsr $2269			jsr 	IFloatMultiply
.25fb	a2 14		ldx #$14			ldx 	#IFR2
.25fd	20 6b 27	jsr $276b			jsr 	IFloatCopyToRegister
.2600	20 c9 24	jsr $24c9			jsr 	IFloatIntegerR0 			; get integer part of R0
.2603	ad 00 05	lda $0500			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2606	c9 03		cmp #$03			cmp 	#3
.2608	f0 16		beq $2620			beq 	_IFFSExitStripZero
.260a	ad 00 05	lda $0500			lda 	IFloatDecimalCount 			; written the DP yet ?
.260d	d0 05		bne $2614			bne 	_IFloatNotFirst
.260f	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2611	20 59 28	jsr $2859			jsr 	IFloatBufferWrite
.2614					_IFloatNotFirst:
.2614	ee 00 05	inc $0500			inc 	IFloatDecimalCount
.2617	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.2619	09 30		ora #$30			ora 	#"0"						; ASCII
.261b	20 59 28	jsr $2859			jsr 	IFloatBufferWrite 			; write to the buffer.
.261e	80 bf		bra $25df			bra 	_IFloatFracLoop
.2620					_IFFSExitStripZero:
.2620	20 68 28	jsr $2868			jsr 	IFloatStripTrailingZeros
.2623					_IFFSExit:
.2623	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.2625	20 39 27	jsr $2739			jsr 	IFloatPullRx
.2628	20 51 28	jsr $2851			jsr 	IFloatGetBufferAddress
.262b	18		clc				clc
.262c	60		rts				rts
.0500					IFloatDecimalCount:
>0500							.fill 	1
.262d					IFloatStringToFloatR0:
.262d	8d 01 05	sta $0501			sta 	IFCount 					; save it out.
.2630	86 0a		stx $0a				stx 	iTemp0
.2632	84 0b		sty $0b				sty 	iTemp0+1
.2634	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.2636	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.2639	9c 02 05	stz $0502			stz 	IFSignFlag 					; clear the sign flag
.263c	20 c9 26	jsr $26c9			jsr 	IFSTFGetNext 				; get first
.263f	f0 1b		beq $265c			beq 	_IFSTFFail 					; no character
.2641	90 10		bcc $2653			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2643	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2645	d0 15		bne $265c			bne 	_IFSTFFail
.2647	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2649	8d 02 05	sta $0502			sta 	IFSignFlag
.264c					_IFSTFLoop:
.264c	20 c9 26	jsr $26c9			jsr 	IFSTFGetNext 				; get next
.264f	b0 0b		bcs $265c			bcs 	_IFSTFFail 					; bad character.
.2651	f0 11		beq $2664			beq 	_IFSTFExit 					; end of data
.2653					_IFSTFHaveChar:
.2653	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2655	f0 08		beq $265f			beq 	_IFSTFDecimal
.2657	20 ed 26	jsr $26ed			jsr 	IFSTFAddR0 					; add number in
.265a	80 f0		bra $264c			bra 	_IFSTFLoop 					; keep going until . or end.
.265c					_IFSTFFail:
.265c	38		sec				sec
.265d	80 0d		bra $266c			bra 	_IFSTFReturn
.265f					_IFSTFDecimal:
.265f	20 74 26	jsr $2674			jsr 	IFSTFDecimal 				; call the decimal places code.
.2662	b0 08		bcs $266c			bcs 	_IFSTFReturn 				; error
.2664					_IFSTFExit:
.2664	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2666	0d 02 05	ora $0502			ora 	IFSignFlag
.2669	85 0f		sta $0f				sta 	IFR0+IExp
.266b	18		clc				clc
.266c					_IFSTFReturn:
.266c	60		rts				rts
.266d					IFloatAddDecimalToR0:
.266d	8d 01 05	sta $0501			sta 	IFCount 					; save it out.
.2670	86 0a		stx $0a				stx 	iTemp0
.2672	84 0b		sty $0b				sty 	iTemp0+1
.2674					IFSTFDecimal:
.2674	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2676	20 18 27	jsr $2718			jsr 	IFloatPushRx
.2679	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.267b	20 c9 27	jsr $27c9			jsr 	IFloatSetZero
.267e	9c 03 05	stz $0503			stz 	IFDecimalPlaces
.2681					_IFSTDLoop:
.2681	20 c9 26	jsr $26c9			jsr 	IFSTFGetNext 				; get next
.2684	b0 41		bcs $26c7			bcs 	_IFSTFFail2 				; bad character.
.2686	f0 11		beq $2699			beq 	_IFSTFComplete 				; end of data, work out the result.
.2688	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.268a	f0 39		beq $26c5			beq 	_IFSTFExit2
.268c	20 ed 26	jsr $26ed			jsr 	IFSTFAddR0 					; add number in
.268f	ee 03 05	inc $0503			inc 	IFDecimalPlaces 			; count decimals
.2692	ad 03 05	lda $0503			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2695	c9 03		cmp #$03			cmp 	#3
.2697	90 e8		bcc $2681			bcc 	_IFSTDLoop
.2699					_IFSTFComplete:
.2699	ad 03 05	lda $0503			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.269c	f0 27		beq $26c5			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.269e	3a		dec a				dec 	a 							; table indexed from 1.
.269f	0a		asl a				asl 	a
.26a0	0a		asl a				asl 	a
.26a1	aa		tax				tax
.26a2	bd 04 27	lda $2704,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.26a5	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.26a7	bd 05 27	lda $2705,x			lda 	TableTen+1,x
.26aa	85 11		sta $11				sta  	IFR1+IM1
.26ac	bd 06 27	lda $2706,x			lda 	TableTen+2,x
.26af	85 12		sta $12				sta  	IFR1+IM2
.26b1	bd 07 27	lda $2707,x			lda 	TableTen+3,x
.26b4	85 13		sta $13				sta  	IFR1+IExp
.26b6	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.26b8	20 69 22	jsr $2269			jsr 	IFloatMultiply
.26bb	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.26bd	20 39 27	jsr $2739			jsr 	IFloatPullRx
.26c0	a2 10		ldx #$10			ldx 	#IFR1
.26c2	20 bf 21	jsr $21bf			jsr 	IFloatAdd
.26c5					_IFSTFExit2:
.26c5	18		clc				clc
.26c6	60		rts				rts
.26c7					_IFSTFFail2:
.26c7	38		sec				sec
.26c8	60		rts				rts
.26c9					IFSTFGetNext:
.26c9	ad 01 05	lda $0501			lda 	IFCount  					; if count is zero, return with Z set.
.26cc	f0 19		beq $26e7			beq 	_IFSTFReturnOk
.26ce	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.26d0	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.26d2	d0 02		bne $26d6			bne 	_IFSTFGNNoCarry
.26d4	e6 0b		inc $0b				inc 	iTemp0+1
.26d6					_IFSTFGNNoCarry:
.26d6	ce 01 05	dec $0501			dec 	IFCount 					; dec count.
.26d9	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.26db	f0 08		beq $26e5			beq 	_IFSTFGOkay
.26dd	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.26df	90 08		bcc $26e9			bcc 	_IFSTFGFail
.26e1	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.26e3	b0 04		bcs $26e9			bcs 	_IFSTFGFail
.26e5					_IFSTFGOkay:
.26e5	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.26e7					_IFSTFReturnOk:
.26e7	18		clc				clc
.26e8	60		rts				rts
.26e9					_IFSTFGFail:
.26e9	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.26eb	38		sec				sec
.26ec	60		rts				rts
.26ed					IFSTFAddR0:
.26ed	29 0f		and #$0f			and 	#15 						; to int value
.26ef	48		pha				pha 								; save it.
.26f0	a9 0a		lda #$0a			lda 	#10
.26f2	a2 10		ldx #$10			ldx 	#IFR1
.26f4	20 cb 27	jsr $27cb			jsr 	IFloatSetByte
.26f7	20 69 22	jsr $2269			jsr 	IFloatMultiply
.26fa	68		pla				pla
.26fb	a2 10		ldx #$10			ldx 	#IFR1
.26fd	20 cb 27	jsr $27cb			jsr 	IFloatSetByte
.2700	20 bf 21	jsr $21bf			jsr 	IFloatAdd
.2703	60		rts				rts
.0501					IFCount:
>0501							.fill 	1
.0502					IFSignFlag:
>0502							.fill 	1
.0503					IFDecimalPlaces:
>0503							.fill 	1
.2704					TableTen:
>2704	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2708	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>270c	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2710	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2714	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2718					IFloatPushRx:
.2718	5a		phy				phy
.2719	ac 04 05	ldy $0504			ldy 	IFStackIndex
.271c	b5 00		lda $00,x			lda 	IM0,x
.271e	99 05 05	sta $0505,y			sta 	IFStack,y
.2721	b5 01		lda $01,x			lda 	IM1,x
.2723	99 06 05	sta $0506,y			sta 	IFStack+1,y
.2726	b5 02		lda $02,x			lda 	IM2,x
.2728	99 07 05	sta $0507,y			sta 	IFStack+2,y
.272b	b5 03		lda $03,x			lda 	IExp,x
.272d	99 08 05	sta $0508,y			sta 	IFStack+3,y
.2730	c8		iny				iny
.2731	c8		iny				iny
.2732	c8		iny				iny
.2733	c8		iny				iny
.2734	8c 04 05	sty $0504			sty 	IFStackIndex
.2737	7a		ply				ply
.2738	60		rts				rts
.2739					IFloatPullRx:
.2739	5a		phy				phy
.273a	ac 04 05	ldy $0504			ldy 	IFStackIndex
.273d	88		dey				dey
.273e	88		dey				dey
.273f	88		dey				dey
.2740	88		dey				dey
.2741	b9 05 05	lda $0505,y			lda 	IFStack,y
.2744	95 00		sta $00,x			sta 	IM0,x
.2746	b9 06 05	lda $0506,y			lda 	IFStack+1,y
.2749	95 01		sta $01,x			sta 	IM1,x
.274b	b9 07 05	lda $0507,y			lda 	IFStack+2,y
.274e	95 02		sta $02,x			sta 	IM2,x
.2750	b9 08 05	lda $0508,y			lda 	IFStack+3,y
.2753	95 03		sta $03,x			sta 	IExp,x
.2755	8c 04 05	sty $0504			sty 	IFStackIndex
.2758	7a		ply				ply
.2759	60		rts				rts
.0504					IFStackIndex:
>0504							.fill 	1
.0505					IFStack:
>0505							.fill 	16*4
.275a					IFloatCopyFromRegister:
.275a	b5 00		lda $00,x			lda 	0,x
.275c	85 0c		sta $0c				sta 	IFR0
.275e	b5 01		lda $01,x			lda 	1,x
.2760	85 0d		sta $0d				sta 	IFR0+1
.2762	b5 02		lda $02,x			lda 	2,x
.2764	85 0e		sta $0e				sta 	IFR0+2
.2766	b5 03		lda $03,x			lda 	3,x
.2768	85 0f		sta $0f				sta 	IFR0+3
.276a	60		rts				rts
.276b					IFloatCopyToRegister:
.276b	a5 0c		lda $0c				lda 	IFR0
.276d	95 00		sta $00,x			sta 	0,x
.276f	a5 0d		lda $0d				lda 	IFR0+1
.2771	95 01		sta $01,x			sta 	1,x
.2773	a5 0e		lda $0e				lda 	IFR0+2
.2775	95 02		sta $02,x			sta 	2,x
.2777	a5 0f		lda $0f				lda 	IFR0+3
.2779	95 03		sta $03,x			sta 	3,x
.277b	60		rts				rts
.277c					IFloatLoadInline:
.277c	68		pla				pla 								; pop address off to iTemp0
.277d	85 0a		sta $0a				sta 	iTemp0
.277f	68		pla				pla
.2780	85 0b		sta $0b				sta 	iTemp0+1
.2782	a0 01		ldy #$01			ldy 	#1
.2784	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2786	95 00		sta $00,x			sta 	0,x
.2788	c8		iny				iny
.2789	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.278b	95 01		sta $01,x			sta 	1,x
.278d	c8		iny				iny
.278e	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2790	95 02		sta $02,x			sta 	2,x
.2792	c8		iny				iny
.2793	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2795	95 03		sta $03,x			sta 	3,x
.2797	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2798	a5 0a		lda $0a				lda 	iTemp0
.279a	69 05		adc #$05			adc 	#5
.279c	85 0a		sta $0a				sta 	iTemp0
.279e	90 02		bcc $27a2			bcc 	_IFLINoCarry
.27a0	e6 0b		inc $0b				inc 	iTemp0+1
.27a2					_IFLINoCarry:
.27a2	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.27a5					IFloatMultiply8BitRx:
.27a5	5a		phy		        phy
.27a6	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.27a8	a4 0c		ldy $0c		        ldy     IFR0+IM0
.27aa	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.27ab	85 0c		sta $0c		        sta     IFR0+IM0
.27ad	84 0d		sty $0d		        sty     IFR0+IM1
.27af	a9 00		lda #$00	        lda     #0
.27b1	a0 08		ldy #$08	        ldy     #8
.27b3					_IFMLoop:
.27b3	90 03		bcc $27b8	        bcc     _IFMNoAdd
.27b5	18		clc		        clc
.27b6	65 0d		adc $0d		        adc     IFR0+IM1
.27b8					_IFMNoAdd:
.27b8	6a		ror a		        ror     a
.27b9	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.27bb	88		dey		        dey
.27bc	d0 f5		bne $27b3	        bne     _IFMLoop
.27be	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.27c0	7a		ply		        ply
.27c1	60		rts		        rts
.27c2					IFloatCheckZero:
.27c2	b5 00		lda $00,x			lda 	IM0,x
.27c4	15 01		ora $01,x			ora 	IM1,x
.27c6	15 02		ora $02,x			ora 	IM2,x
.27c8	60		rts				rts
.27c9					IFloatSetZero:
.27c9	a9 00		lda #$00			lda 	#0
.27cb					IFloatSetByte:
.27cb	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.27cd	74 01		stz $01,x			stz 	IM1,x
.27cf	74 02		stz $02,x			stz 	IM2,x
.27d1	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.27d3	60		rts				rts
.27d4					IFloatNegate:
.27d4	b5 03		lda $03,x			lda 	IExp,x
.27d6	49 40		eor #$40			eor 	#IFSign
.27d8	95 03		sta $03,x			sta 	IExp,x
.27da	18		clc				clc
.27db	60		rts				rts
.27dc					IFloatMantissaNegate:
.27dc	38		sec				sec
.27dd	a9 00		lda #$00			lda 	#0
.27df	f5 00		sbc $00,x			sbc 	IM0,x
.27e1	95 00		sta $00,x			sta 	IM0,x
.27e3	a9 00		lda #$00			lda 	#0
.27e5	f5 01		sbc $01,x			sbc 	IM1,x
.27e7	95 01		sta $01,x			sta 	IM1,x
.27e9	a9 00		lda #$00			lda 	#0
.27eb	f5 02		sbc $02,x			sbc 	IM2,x
.27ed	95 02		sta $02,x			sta 	IM2,x
.27ef	60		rts				rts
.27f0					IFloatShiftLeft:
.27f0	18		clc				clc
.27f1					IFloatRotateLeft:
.27f1	36 00		rol $00,x			rol 	IM0,x
.27f3	36 01		rol $01,x			rol 	IM1,x
.27f5	36 02		rol $02,x			rol 	IM2,x
.27f7	60		rts				rts
.27f8					IFloatShiftRight:
.27f8	18		clc				clc
.27f9					IFloatRotateRight:
.27f9	76 02		ror $02,x			ror 	IM2,x
.27fb	76 01		ror $01,x			ror 	IM1,x
.27fd	76 00		ror $00,x			ror 	IM0,x
.27ff	60		rts				rts
.2800					IFloatNormalise:
.2800	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero 			; is it zero
.2803	f0 18		beq $281d			beq 	_IFNExitZero 				; if so exit
.2805					_IFNLoop:
.2805	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2807	29 c0		and #$c0			and 	#$C0
.2809	c9 40		cmp #$40			cmp 	#$40
.280b	f0 13		beq $2820			beq 	_IFNExitOkay 				; if so , then we are done.
.280d	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.280f	29 3f		and #$3f			and 	#$3F
.2811	c9 20		cmp #$20			cmp 	#$20
.2813	f0 0b		beq $2820			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2815	20 36 28	jsr $2836			jsr 	IFloatDecExponent
.2818	20 f0 27	jsr $27f0			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.281b	80 e8		bra $2805			bra 	_IFNLoop
.281d					_IFNExitZero:
.281d	20 c9 27	jsr $27c9			jsr 	IFloatSetZero 				; set the result to zero
.2820					_IFNExitOkay:
.2820	18		clc				clc  								; return with CC.
.2821	60		rts				rts
.2822					IFloatIncExponent:
.2822	b5 03		lda $03,x			lda 	IExp,x
.2824	48		pha				pha
.2825	29 c0		and #$c0			and 	#$C0
.2827	8d 45 05	sta $0545			sta 	IFXTemp
.282a	68		pla				pla
.282b	1a		inc a				inc 	a
.282c	29 3f		and #$3f			and 	#$3F
.282e	48		pha				pha
.282f	0d 45 05	ora $0545			ora 	IFXTemp
.2832	95 03		sta $03,x			sta 	IExp,x
.2834	68		pla				pla
.2835	60		rts				rts
.2836					IFloatDecExponent:
.2836	b5 03		lda $03,x			lda 	IExp,x
.2838	48		pha				pha
.2839	29 c0		and #$c0			and 	#$C0
.283b	8d 45 05	sta $0545			sta 	IFXTemp
.283e	68		pla				pla
.283f	3a		dec a				dec 	a
.2840	29 3f		and #$3f			and 	#$3F
.2842	48		pha				pha
.2843	0d 45 05	ora $0545			ora 	IFXTemp
.2846	95 03		sta $03,x			sta 	IExp,x
.2848	68		pla				pla
.2849	60		rts				rts
.0545					IFXTemp:
>0545							.fill 	1
.284a					IFloatBufferReset:
.284a	9c 46 05	stz $0546			stz 	IFBufferCount
.284d	9c 47 05	stz $0547			stz 	IFBuffer
.2850	60		rts				rts
.2851					IFloatGetBufferAddress:
.2851	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.2853	a2 47		ldx #$47			ldx 	#(IFBuffer & $FF)
.2855	ad 46 05	lda $0546			lda 	IFBufferCount
.2858	60		rts				rts
.2859					IFloatBufferWrite:
.2859	da		phx				phx
.285a	ae 46 05	ldx $0546			ldx 	IFBufferCount
.285d	9d 47 05	sta $0547,x			sta 	IFBuffer,x
.2860	9e 48 05	stz $0548,x			stz 	IFBuffer+1,x
.2863	ee 46 05	inc $0546			inc 	IFBufferCount
.2866	fa		plx				plx
.2867	60		rts				rts
.2868					IFloatStripTrailingZeros:
.2868	ae 46 05	ldx $0546			ldx 	IFBufferCount
.286b	bd 46 05	lda $0546,x			lda 	IFBuffer-1,x
.286e	c9 30		cmp #$30			cmp		#"0"
.2870	d0 0f		bne $2881			bne 	_IFSTExit
.2872	bd 45 05	lda $0545,x			lda 	IFBuffer-2,x
.2875	c9 2e		cmp #$2e			cmp 	#"."
.2877	f0 08		beq $2881			beq 	_IFSTExit
.2879	ce 46 05	dec $0546			dec 	IFBufferCount
.287c	9e 46 05	stz $0546,x			stz 	IFBuffer-1,x
.287f	80 e7		bra $2868			bra 	IFloatStripTrailingZeros
.2881					_IFSTExit:
.2881	60		rts				rts
.0546					IFBufferCount:
>0546							.fill 	1
.0547					IFBuffer:
>0547							.fill 	25
.2882					IFloatCheck:
.2882	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2884	09 40		ora #$40			ora 	#IFSign
.2886	85 0f		sta $0f				sta 	IFR0+IExp
.2888	20 bf 21	jsr $21bf			jsr 	IFloatAdd 					; add allowed to error.
.288b	a2 0c		ldx #$0c			ldx 	#IFR0
.288d	20 c2 27	jsr $27c2			jsr 	IFloatCheckZero 			; error if < 0
.2890	f0 06		beq $2898			beq 	_IFAOkay
.2892	a5 0f		lda $0f				lda 	IFR0+IExp
.2894	29 40		and #$40			and 	#IFSign
.2896	d0 01		bne $2899			bne 	_IFAFail
.2898					_IFAOkay:
.2898	60		rts				rts
.2899					_IFAFail:
.2899	38		sec				sec
.289a	68		pla				pla 								; get address - 2
.289b	e9 02		sbc #$02			sbc 	#2
.289d	aa		tax				tax
.289e	68		pla				pla
.289f	e9 00		sbc #$00			sbc 	#0
.28a1	a8		tay				tay
.28a2	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.28a4					_IFAStop:
>28a4	db						.byte 	$DB 						; display an error AA ADR ADR
.28a5	80 fd		bra $28a4			bra 	_IFAStop

;******  Return to file: basic.asm

.28a7					NotImplemented:
.28a7	a9 ff		lda #$ff			lda 	#$FF
.28a9	80 04		bra $28af			bra 	EnterDbg
.28ab					ErrorHandler:
.28ab	fa		plx				plx
.28ac	7a		ply				ply
.28ad	a9 ee		lda #$ee			lda 	#$EE
.28af					EnterDbg:
>28af	db						.byte 	$DB
.28b0	4c af 28	jmp $28af			jmp 	EnterDbg

;******  End of listing
