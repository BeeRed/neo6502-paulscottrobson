
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Mon May 29 14:03:04 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 6b 1b	jsr $1b6b			jsr 	PGMSetBaseAddress
.1007	20 be 1e	jsr $1ebe			jsr 	IFInitialise
.100a	4c 9d 10	jmp $109d			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a7					PR_STANDARD_LAST = $a7
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d7					PR_UNARY_FIRST = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 3b 11	jmp $113b		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 54 1e	jsr $1e54			jsr 	StringSystemInitialise
.101e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.101f					NoExec01:
.101f					NoExec02:
.101f					NoExec03:
.101f					NoExec04:
.101f					NoExec05:
.101f					NoExec06:
.101f					NoExec07:
.101f	4c ea 10	jmp $10ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1022					Command_Print:
.1022					Command_IP_Main:
.1022	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1023					_CPLoop:
.1023	08		php				php 								; save last action flag
.1024	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1026	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1028	f0 3e		beq $1068			beq 	_CPExit 					; without consuming
.102a	c9 9b		cmp #$9b			cmp 	#PR_COLON
.102c	f0 3a		beq $1068			beq 	_CPExit
.102e	68		pla				pla 								; throw last action flag
.102f	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1031	c8		iny				iny
.1032	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1034	f0 2f		beq $1065			beq 	_CPContinueWithSameLine
.1036	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1038	f0 26		beq $1060			beq 	_CPTab
.103a	88		dey				dey 								; undo the get.
.103b	20 ab 13	jsr $13ab			jsr 	EXPEvaluateExpression 		; evaluate expression.
.103e	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1040	10 14		bpl $1056			bpl 	_CPNumber
.1042	5a		phy				phy
.1043	18		clc				clc 								; string address to YX
.1044	a5 0c		lda $0c				lda 	IFR0+IM0
.1046	aa		tax				tax
.1047	a5 0d		lda $0d				lda 	IFR0+IM1
.1049	a8		tay				tay
.104a	e8		inx				inx 								; point to 1st character
.104b	d0 01		bne $104e			bne 	_CPNoCarry
.104d	c8		iny				iny
.104e					_CPNoCarry:
.104e	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1050	20 71 10	jsr $1071			jsr 	CPPrintAYX 					; print AYX
.1053	7a		ply				ply
.1054	80 cc		bra $1022			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1056					_CPNumber:
.1056	5a		phy				phy
.1057	20 d0 22	jsr $22d0			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.105a	20 71 10	jsr $1071			jsr 	CPPrintAYX 					; print AYX
.105d	7a		ply				ply
.105e	80 c2		bra $1022			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1060					_CPTab:
.1060	a9 09		lda #$09			lda 	#9 							; print TAB
.1062	20 84 10	jsr $1084			jsr 	CPPrintA
.1065					_CPContinueWithSameLine:
.1065	38		sec				sec 								; loop round with carry set, which
.1066	80 bb		bra $1023			bra 	_CPLoop 					; will inhibit final CR
.1068					_CPExit:
.1068	28		plp				plp 								; get last action flag
.1069	b0 05		bcs $1070			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.106b	a9 0d		lda #$0d			lda 	#13 						; print new line
.106d	20 84 10	jsr $1084			jsr 	CPPrintA
.1070					_CPExit2:
.1070	60		rts				rts
.1071					CPPrintAYX:
.1071	86 1e		stx $1e				stx 	zTemp0
.1073	84 1f		sty $1f				sty 	zTemp0+1
.1075	aa		tax				tax
.1076	f0 0b		beq $1083			beq 	_CPPrintExit
.1078	a0 00		ldy #$00			ldy 	#0
.107a					_CPPrintAYXLoop:
.107a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.107c	20 84 10	jsr $1084			jsr 	CPPrintA
.107f	c8		iny				iny
.1080	ca		dex				dex
.1081	d0 f7		bne $107a			bne 	_CPPrintAYXLoop
.1083					_CPPrintExit:
.1083	60		rts				rts
.1084					CPPrintA:
.1084	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1087					Command_NEW:
.1087	20 72 1b	jsr $1b72			jsr 	PGMNewProgram
.108a	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.108d	4c e4 10	jmp $10e4			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1090					Command_REM:
.1090					Command_REM2:
.1090	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1092	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1094	d0 06		bne $109c			bne 	_CRExit
.1096	c8		iny				iny 								; skip over it, it's a comment.
.1097	98		tya				tya
.1098	38		sec				sec
.1099	71 1c		adc ($1c),y			adc 	(codePtr),y
.109b	a8		tay				tay
.109c					_CRExit:
.109c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.109d					Command_RUN:
.109d	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.10a0	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.10a3	85 1d		sta $1d				sta 	codePtr+1
.10a5	64 1c		stz $1c				stz 	codePtr
.10a7	80 0b		bra $10b4			bra 	RUNNewLine
.10a9					RUNEndOfLine:
.10a9	18		clc				clc 								; advance to next line.
.10aa	b2 1c		lda ($1c)			lda 	(codePtr)
.10ac	65 1c		adc $1c				adc 	codePtr
.10ae	85 1c		sta $1c				sta 	codePtr
.10b0	90 02		bcc $10b4			bcc 	_RELNoCarry
.10b2	e6 1d		inc $1d				inc 	codePtr+1
.10b4					_RELNoCarry:
.10b4					RUNNewLine:
.10b4	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.10b6	9a		txs				txs
.10b7	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.10b9	f0 29		beq $10e4			beq 	Command_END
.10bb	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.10bd					RUNNewCommand:
.10bd	9c 49 04	stz $0449			stz 	stringInitialised 			; reset string system.
.10c0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.10c2	10 1a		bpl $10de			bpl		_RUNNotToken 				; probably an identifier
.10c4	c8		iny				iny 								; consume token
.10c5	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.10c7	f0 f4		beq $10bd			beq 	RUNNewCommand
.10c9	c9 a8		cmp #$a8			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.10cb	b0 0e		bcs $10db			bcs 	_RUNSyntax
.10cd	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.10cf	90 0a		bcc $10db			bcc 	_RUNSyntax
.10d1	0a		asl a				asl 	a 							; double into X.
.10d2	aa		tax				tax
.10d3	20 d8 10	jsr $10d8			jsr 	_RUNDispatchMain			; call the main dispatcher
.10d6	80 e5		bra $10bd			bra 	RUNNewCommand
.10d8					_RUNDispatchMain:
.10d8	7c 88 18	jmp ($1888,x)			jmp 	(VectorTable,x)
.10db					_RUNSyntax:
.10db	4c ea 10	jmp $10ea		jmp	ErrorV_syntax
.10de					_RUNNotToken:
.10de	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.10e1					Command_Shift_Handler:
.10e1	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.10e4					Command_END:
.10e4	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.10e7					Command_STOP:
.10e7	4c 85 11	jmp $1185		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.10ea					ErrorV_syntax:
.10ea	20 b5 25	jsr $25b5		jsr	ErrorHandler
>10ed	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>10f5	72 72 6f 72 00
.10fa					ErrorV_range:
.10fa	20 b5 25	jsr $25b5		jsr	ErrorHandler
>10fd	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>1105	61 6e 67 65 00
.110a					ErrorV_value:
.110a	20 b5 25	jsr $25b5		jsr	ErrorHandler
>110d	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>1115	65 00
.1117					ErrorV_type:
.1117	20 b5 25	jsr $25b5		jsr	ErrorHandler
>111a	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>1122	6d 61 74 63 68 00
.1128					ErrorV_unimplemented:
.1128	20 b5 25	jsr $25b5		jsr	ErrorHandler
>112b	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>1133	65 6d 65 6e 74 65 64 00
.113b					ErrorV_assert:
.113b	20 b5 25	jsr $25b5		jsr	ErrorHandler
>113e	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>1146	61 69 6c 00
.114a					ErrorV_internal:
.114a	20 b5 25	jsr $25b5		jsr	ErrorHandler
>114d	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>1155	20 45 72 72 6f 72 00
.115c					ErrorV_divzero:
.115c	20 b5 25	jsr $25b5		jsr	ErrorHandler
>115f	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>1167	79 20 5a 65 72 6f 00
.116e					ErrorV_structure:
.116e	20 b5 25	jsr $25b5		jsr	ErrorHandler
>1171	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>1179	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1185					ErrorV_stop:
.1185	20 b5 25	jsr $25b5		jsr	ErrorHandler
>1188	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>1190	53 74 6f 70 70 65 64 00
.1198					ErrorV_data:
.1198	20 b5 25	jsr $25b5		jsr	ErrorHandler
>119b	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>11a3	61 74 61 00
.11a7					ErrorV_redefine:
.11a7	20 b5 25	jsr $25b5		jsr	ErrorHandler
>11aa	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>11b2	64 65 66 69 6e 65 64 00
.11ba					ErrorV_index:
.11ba	20 b5 25	jsr $25b5		jsr	ErrorHandler
>11bd	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>11c5	79 20 49 6e 64 65 78 00
.11cd					ErrorV_memory:
.11cd	20 b5 25	jsr $25b5		jsr	ErrorHandler
>11d0	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>11d8	65 6d 6f 72 79 00
.11de					ErrorV_uninitialised:
.11de	20 b5 25	jsr $25b5		jsr	ErrorHandler
>11e1	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>11e9	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.11f8					ErrorV_string:
.11f8	20 b5 25	jsr $25b5		jsr	ErrorHandler
>11fb	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>1203	6e 67 20 4c 65 6e 67 74 68 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.120d					ERRCheckLParen:
.120d	b1 1c		lda ($1c),y			lda 	(codePtr),y
.120f	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.1211	d0 18		bne $122b			bne 	ERRSyntaxError
.1213	c8		iny				iny
.1214	60		rts				rts
.1215					ERRCheckRParen:
.1215	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1217	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.1219	d0 10		bne $122b			bne 	ERRSyntaxError
.121b	c8		iny				iny
.121c	60		rts				rts
.121d					ERRCheckComma:
.121d	b1 1c		lda ($1c),y			lda 	(codePtr),y
.121f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1221	d0 08		bne $122b			bne 	ERRSyntaxError
.1223	c8		iny				iny
.1224	60		rts				rts
.1225					ERRCheckA:
.1225	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.1227	d0 02		bne $122b			bne 	ERRSyntaxError
.1229	c8		iny				iny
.122a	60		rts				rts
.122b					ERRSyntaxError:
.122b	4c ea 10	jmp $10ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.122e					EXPBinAdd:
.122e	24 0f		bit $0f				bit 	IFR0+IExp
.1230	30 6f		bmi $12a1			bmi 	EXPConcatenate
.1232	a2 10		ldx #$10			ldx 	#IFR1
.1234	4c c9 1e	jmp $1ec9			jmp 	IFloatAdd
.1237					EXPBinSub:
.1237	24 0f		bit $0f				bit 	IFR0+IExp
.1239	30 3f		bmi $127a			bmi 	EXPTypeError
.123b	a2 10		ldx #$10			ldx 	#IFR1
.123d	4c c2 1e	jmp $1ec2			jmp 	IFloatSubtract
.1240					EXPBinMul:
.1240	24 0f		bit $0f				bit 	IFR0+IExp
.1242	30 36		bmi $127a			bmi 	EXPTypeError
.1244	a2 10		ldx #$10			ldx 	#IFR1
.1246	4c 73 1f	jmp $1f73			jmp 	IFloatMultiply
.1249					EXPBinFDiv:
.1249	24 0f		bit $0f				bit 	IFR0+IExp
.124b	30 2d		bmi $127a			bmi 	EXPTypeError
.124d	a2 10		ldx #$10			ldx 	#IFR1
.124f	20 f6 21	jsr $21f6			jsr 	IFloatDivideFloat
.1252	b0 0f		bcs $1263			bcs 	EXPDZero
.1254	60		rts				rts
.1255					EXPBinIDiv:
.1255	24 0f		bit $0f				bit 	IFR0+IExp
.1257	30 21		bmi $127a			bmi 	EXPTypeError
.1259	a2 10		ldx #$10			ldx 	#IFR1
.125b	20 f6 21	jsr $21f6			jsr 	IFloatDivideFloat
.125e	b0 03		bcs $1263			bcs 	EXPDZero
.1260	4c d3 21	jmp $21d3			jmp 	IFloatIntegerR0
.1263					EXPDZero:
.1263	4c 5c 11	jmp $115c		jmp	ErrorV_divzero
.1266					EXPBinIMod:
.1266	24 0f		bit $0f				bit 	IFR0+IExp
.1268	30 10		bmi $127a			bmi 	EXPTypeError
.126a	a2 10		ldx #$10			ldx 	#IFR1
.126c	5a		phy				phy
.126d	20 0b 21	jsr $210b			jsr 	IFPreProcessBitwise 		; set up everything.
.1270	d0 05		bne $1277			bne 	EXPDRange
.1272	20 44 20	jsr $2044			jsr 	IFloatModulusInteger
.1275	7a		ply				ply
.1276	60		rts				rts
.1277					EXPDRange:
.1277	4c fa 10	jmp $10fa		jmp	ErrorV_range
.127a					EXPTypeError:
.127a	4c 17 11	jmp $1117		jmp	ErrorV_type
.127d					EXPBinAnd:
.127d	24 0f		bit $0f				bit 	IFR0+IExp
.127f	30 f9		bmi $127a			bmi 	EXPTypeError
.1281	a2 10		ldx #$10			ldx 	#IFR1
.1283	20 c6 20	jsr $20c6			jsr 	IFloatBitwiseAnd
.1286	b0 ef		bcs $1277			bcs 	EXPDRange
.1288	60		rts				rts
.1289					EXPBinOr:
.1289	24 0f		bit $0f				bit 	IFR0+IExp
.128b	30 ed		bmi $127a			bmi 	EXPTypeError
.128d	a2 10		ldx #$10			ldx 	#IFR1
.128f	20 dd 20	jsr $20dd			jsr 	IFloatBitwiseOr
.1292	b0 e3		bcs $1277			bcs 	EXPDRange
.1294	60		rts				rts
.1295					EXPBinXor:
.1295	24 0f		bit $0f				bit 	IFR0+IExp
.1297	30 e1		bmi $127a			bmi 	EXPTypeError
.1299	a2 10		ldx #$10			ldx 	#IFR1
.129b	20 f4 20	jsr $20f4			jsr 	IFloatBitwiseXor
.129e	b0 d7		bcs $1277			bcs 	EXPDRange
.12a0	60		rts				rts
.12a1					EXPConcatenate:
.12a1	18		clc				clc
.12a2	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.12a4	72 10		adc ($10)			adc 	(IFR1)
.12a6	b0 2d		bcs $12d5			bcs 	_EXPCError
.12a8	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.12aa	da		phx				phx
.12ab	a6 0d		ldx $0d				ldx 	IFR0+1
.12ad	da		phx				phx
.12ae	20 7c 1e	jsr $1e7c			jsr 	StringTempAllocate 			; allocate string, set up return
.12b1	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.12b3	a5 10		lda $10				lda 	IFR1
.12b5	20 be 12	jsr $12be			jsr 	_EXPCCopyXA
.12b8	fa		plx				plx 								; copy second string
.12b9	68		pla				pla
.12ba	20 be 12	jsr $12be			jsr 	_EXPCCopyXA
.12bd	60		rts				rts
.12be					_EXPCCopyXA:
.12be	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.12c0	85 1e		sta $1e				sta 	zTemp0
.12c2	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.12c4	f0 0e		beq $12d4			beq 	_EXPCCExit 					; nothing.
.12c6	aa		tax				tax 								; count
.12c7	5a		phy				phy 								; start positioin
.12c8	a0 01		ldy #$01			ldy 	#1
.12ca					_EXPCCLoop:
.12ca	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.12cc	20 b1 1e	jsr $1eb1			jsr 	StringTempWrite
.12cf	c8		iny				iny
.12d0	ca		dex				dex
.12d1	d0 f7		bne $12ca			bne 	_EXPCCLoop
.12d3	7a		ply				ply
.12d4					_EXPCCExit:
.12d4	60		rts				rts
.12d5					_EXPCError:
.12d5	4c f8 11	jmp $11f8		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.12d8					EXPReturnTrue:
.12d8	a2 0c		ldx #$0c			ldx 	#IFR0
.12da	a9 01		lda #$01			lda 	#1
.12dc	20 d5 24	jsr $24d5			jsr 	IFloatSetByte
.12df	20 de 24	jsr $24de			jsr 	IFloatNegate
.12e2	60		rts				rts
.12e3					EXPReturnFalse:
.12e3	a2 0c		ldx #$0c			ldx 	#IFR0
.12e5	4c d3 24	jmp $24d3			jmp 	IFloatSetZero
.12e8					EXPCompareEqual:
.12e8	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.12eb	c9 00		cmp #$00			cmp 	#0
.12ed	f0 e9		beq $12d8			beq 	EXPReturnTrue
.12ef	80 f2		bra $12e3			bra 	EXPReturnFalse
.12f1					EXPCompareLess:
.12f1	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.12f4	c9 ff		cmp #$ff			cmp 	#$FF
.12f6	f0 e0		beq $12d8			beq 	EXPReturnTrue
.12f8	80 e9		bra $12e3			bra 	EXPReturnFalse
.12fa					EXPCompareGreater:
.12fa	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.12fd	c9 01		cmp #$01			cmp 	#1
.12ff	f0 d7		beq $12d8			beq 	EXPReturnTrue
.1301	80 e0		bra $12e3			bra 	EXPReturnFalse
.1303					EXPCompareNotEqual:
.1303	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.1306	c9 00		cmp #$00			cmp 	#0
.1308	d0 ce		bne $12d8			bne 	EXPReturnTrue
.130a	80 d7		bra $12e3			bra 	EXPReturnFalse
.130c					EXPCompareLessEqual:
.130c	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.130f	c9 01		cmp #$01			cmp 	#1
.1311	d0 c5		bne $12d8			bne 	EXPReturnTrue
.1313	80 ce		bra $12e3			bra 	EXPReturnFalse
.1315					EXPCompareGreaterEqual:
.1315	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.1318	c9 ff		cmp #$ff			cmp 	#$FF
.131a	d0 bc		bne $12d8			bne 	EXPReturnTrue
.131c	80 c5		bra $12e3			bra 	EXPReturnFalse
.131e					EXPCompareBaseCode:
.131e	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.1320	30 10		bmi $1332			bmi 	_EXCBCString
.1322	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.1324	20 a1 21	jsr $21a1			jsr 	IFloatCompare
.1327	a5 0c		lda $0c				lda 	IFR0+IM0
.1329	f0 06		beq $1331			beq 	_EXCBCExit 					; return 0 if zero
.132b	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.132d	50 02		bvc $1331			bvc 	_EXCBCExit
.132f	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1331					_EXCBCExit:
.1331	60		rts				rts
.1332					_EXCBCString:
.1332	5a		phy				phy
.1333	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.1335	d2 10		cmp ($10)			cmp 	(IFR1)
.1337	90 02		bcc $133b			bcc 	_EXCBCSmaller
.1339	b2 10		lda ($10)			lda 	(IFR1)
.133b					_EXCBCSmaller:
.133b	aa		tax				tax
.133c	f0 0d		beq $134b			beq 	_EXCBCMatches 				; if zero common length matches
.133e	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1340					_EXCBCCheckSmallerMatches:
.1340	c8		iny				iny 								; compare directly as far as common length
.1341	38		sec				sec
.1342	b1 10		lda ($10),y			lda 	(IFR1),y
.1344	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.1346	d0 08		bne $1350			bne 	_EXCBCExit2
.1348	ca		dex				dex
.1349	d0 f5		bne $1340			bne 	_EXCBCCheckSmallerMatches
.134b					_EXCBCMatches:
.134b	38		sec				sec
.134c	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.134e	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1350					_EXCBCExit2:
.1350	7a		ply				ply
.1351	c9 00		cmp #$00			cmp 	#0
.1353	f0 04		beq $1359			beq 	_EXCBCReturn
.1355	30 03		bmi $135a			bmi 	_EXCBCFF
.1357	a9 01		lda #$01			lda 	#1
.1359					_EXCBCReturn:
.1359	60		rts				rts
.135a					_EXCBCFF:
.135a	a9 ff		lda #$ff			lda 	#$FF
.135c	60		rts				rts
.135d					_EXCBCRange:
.135d	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1360					EXPBinLeft:
.1360	a9 ff		lda #$ff			lda 	#$FF
.1362	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.1365	4c 6b 13	jmp $136b			jmp 	EXPShiftCommon
.1368					EXPBinRight:
.1368	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.136b					EXPShiftCommon:
.136b	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.136d	05 13		ora $13				ora 	IFR1+IExp
.136f	29 7f		and #$7f			and 	#$7F
.1371	d0 35		bne $13a8			bne 	_EXPSRange
.1373	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1375	29 e0		and #$e0			and 	#$E0
.1377	05 0d		ora $0d				ora 	IFR0+IM1
.1379	05 0e		ora $0e				ora 	IFR0+IM2
.137b	d0 25		bne $13a2			bne 	_EXPSShiftZero 				; if so return zero
.137d	5a		phy				phy
.137e	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1380	29 1f		and #$1f			and 	#$1F
.1382	f0 17		beq $139b			beq 	_EXPSExit 					; exit if zero
.1384	a8		tay				tay
.1385					_EXPSLoop:
.1385	a2 10		ldx #$10			ldx 	#IFR1
.1387	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.138a	30 05		bmi $1391			bmi 	_EXPSShiftLeft
.138c	20 02 25	jsr $2502			jsr 	IFloatShiftRight
.138f	80 07		bra $1398			bra 	_EXPSContinue
.1391					_EXPSShiftLeft:
.1391	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1394	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1396	30 10		bmi $13a8			bmi 	_EXPSRange
.1398					_EXPSContinue:
.1398	88		dey				dey
.1399	d0 ea		bne $1385			bne 	_EXPSLoop
.139b					_EXPSExit:
.139b	a2 10		ldx #$10			ldx 	#IFR1
.139d	20 64 24	jsr $2464			jsr 	IFloatCopyFromRegister
.13a0	7a		ply				ply
.13a1	60		rts				rts
.13a2					_EXPSShiftZero:
.13a2	a2 0c		ldx #$0c			ldx 	#IFR0
.13a4	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.13a7	60		rts				rts
.13a8					_EXPSRange:
.13a8	4c fa 10	jmp $10fa		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.13ab					EXPEvaluateExpression:
.13ab	a9 00		lda #$00			lda 	#0 							; current precedence
.13ad					EXPEvaluateExpressionPrecedenceA:
.13ad	48		pha				pha
.13ae	20 28 14	jsr $1428			jsr 	EXPTermValueR0				; do first term.
.13b1					_EELoop:
.13b1	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.13b3	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.13b5	90 31		bcc $13e8			bcc 	_EEExit
.13b7	aa		tax				tax 								; access the precedence of the operator.
.13b8	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.13b9	dd fe 15	cmp $15fe,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.13bc	b0 2b		bcs $13e9			bcs 	_EEExit2
.13be	48		pha				pha 								; save current precedence.
.13bf	da		phx				phx 								; save operator
.13c0	c8		iny				iny 								; consume operator
.13c1	da		phx				phx
.13c2	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.13c4	20 22 24	jsr $2422			jsr 	IFloatPushRx
.13c7	fa		plx				plx
.13c8	bd fe 15	lda $15fe,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.13cb	20 ad 13	jsr $13ad			jsr 	EXPEvaluateExpressionPrecedenceA
.13ce	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.13d0	20 43 24	jsr $2443			jsr 	IFloatPullRx
.13d3	fa		plx				plx 								; operator
.13d4	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.13d6	45 13		eor $13				eor 	IFR1+IExp
.13d8	30 08		bmi $13e2			bmi 	_EEType
.13da					_EETypeOkay:
.13da	8a		txa				txa
.13db	0a		asl a				asl 	a 							; double -> X
.13dc	aa		tax				tax
.13dd	20 e5 13	jsr $13e5			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.13e0	80 cf		bra $13b1			bra 	_EELoop
.13e2					_EEType:
.13e2	4c 17 11	jmp $1117		jmp	ErrorV_type
.13e5					_EECallBinary:
.13e5	7c 88 18	jmp ($1888,x)			jmp 	(VectorTable,x)
.13e8					_EEExit:
.13e8	68		pla				pla 								; throw precedence
.13e9					_EEExit2:
.13e9	18		clc				clc
.13ea	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.13eb					EXPEvalNumber:
.13eb	20 ab 13	jsr $13ab			jsr 	EXPEvaluateExpression
.13ee	24 0f		bit $0f				bit 	IFR0+IExp
.13f0	30 01		bmi $13f3			bmi 	EVUType
.13f2	60		rts				rts
.13f3					EVUType:
.13f3	4c 17 11	jmp $1117		jmp	ErrorV_type
.13f6					EXPEvalInteger:
.13f6	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.13f9	20 d3 21	jsr $21d3			jsr 	IFloatIntegerR0
.13fc	60		rts				rts
.13fd					EXPEvalInteger16:
.13fd	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger
.1400	a5 0e		lda $0e				lda 	IFR0+IM2
.1402	d0 21		bne $1425			bne 	EVURange
.1404	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1406	a5 0c		lda $0c				lda 	IFR0+IM0
.1408	60		rts				rts
.1409					EXPEvalInteger8:
.1409	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger
.140c	a5 0e		lda $0e				lda 	IFR0+IM2
.140e	05 0d		ora $0d				ora 	IFR0+IM1
.1410	d0 13		bne $1425			bne 	EVURange
.1412	a5 0c		lda $0c				lda 	IFR0+IM0
.1414	60		rts				rts
.1415					EXPEvalString:
.1415	20 ab 13	jsr $13ab			jsr 	EXPEvaluateExpression
.1418	24 0f		bit $0f				bit 	IFR0+IExp
.141a	10 d7		bpl $13f3			bpl 	EVUType
.141c	a6 0d		ldx $0d				ldx 	IFR0+IM1
.141e	86 1f		stx $1f				stx 	zTemp0+1
.1420	a5 0c		lda $0c				lda 	IFR0+IM0
.1422	85 1e		sta $1e				sta 	zTemp0
.1424	60		rts				rts
.1425					EVURange:
.1425	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1428					EXPTermValueR0:
.1428	20 31 14	jsr $1431			jsr 	EXPTermR0
.142b	90 03		bcc $1430			bcc 	_ETVNotReference
.142d	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.1430					_ETVNotReference:
.1430	60		rts				rts
.1431					EXPTermR0:
.1431	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.1433	30 10		bmi $1445			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1435	c8		iny				iny 								; consume element
.1436	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1438	b0 08		bcs $1442			bcs 	_ETMIdentifier
.143a	20 69 14	jsr $1469			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.143d	20 9c 14	jsr $149c			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1440	18		clc				clc 								; return value
.1441	60		rts				rts
.1442					_ETMIdentifier:
.1442	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.1445					_ETMIsUnaryOrMinus:
.1445	c8		iny				iny 								; consume element
.1446	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1448	d0 0a		bne $1454			bne 	_ETMCheckUnary
.144a	20 28 14	jsr $1428			jsr 	EXPTermValueR0 				; get a term to negate
.144d	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.144f	20 de 24	jsr $24de			jsr 	IFloatNegate
.1452	18		clc				clc
.1453	60		rts				rts
.1454					_ETMCheckUnary:
.1454	c9 d7		cmp #$d7			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1456	90 0e		bcc $1466			bcc 	_ETMUnarySyntax
.1458	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.145a	b0 0a		bcs $1466			bcs 	_ETMUnarySyntax
.145c	0a		asl a				asl 	a
.145d	aa		tax				tax
.145e	20 63 14	jsr $1463			jsr 	_ETMCallUnaryFunction
.1461	18		clc				clc
.1462	60		rts				rts
.1463					_ETMCallUnaryFunction:
.1463	7c 88 18	jmp ($1888,x)			jmp 	(VectorTable,x)
.1466					_ETMUnarySyntax:
.1466	4c ea 10	jmp $10ea		jmp	ErrorV_syntax
.1469					EXPExtractTokenisedInteger:
.1469	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.146b	64 0f		stz $0f				stz 	IFR0+IExp
.146d	64 0d		stz $0d				stz 	IFR0+IM1
.146f	64 0e		stz $0e				stz 	IFR0+IM2
.1471					_ETMConstant:
.1471	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1473	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1475	b0 24		bcs $149b			bcs 	_ETMCExit 					; no.
.1477	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1479	a5 0d		lda $0d				lda 	IFR0+IM1
.147b	85 0e		sta $0e				sta 	IFR0+IM2
.147d	a5 0c		lda $0c				lda 	IFR0+IM0
.147f	85 0d		sta $0d				sta 	IFR0+IM1
.1481	64 0c		stz $0c				stz 	IFR0+IM0
.1483	8a		txa				txa
.1484	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1485	66 0e		ror $0e				ror 	IFR0+IM2
.1487	66 0d		ror $0d				ror 	IFR0+IM1
.1489	66 0c		ror $0c				ror 	IFR0+IM0
.148b	4a		lsr a				lsr 	a
.148c	66 0e		ror $0e				ror 	IFR0+IM2
.148e	66 0d		ror $0d				ror 	IFR0+IM1
.1490	66 0c		ror $0c				ror 	IFR0+IM0
.1492	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.1494	11 1c		ora ($1c),y			ora 	(codePtr),y
.1496	85 0c		sta $0c				sta 	IFR0+IM0
.1498	c8		iny				iny 								; consume, loop back
.1499	80 d6		bra $1471			bra 	_ETMConstant
.149b					_ETMCExit:
.149b	60		rts				rts
.149c					EXPCheckDecimalFollows:
.149c	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.149e	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.14a0	d0 19		bne $14bb			bne 	_ETMCDExit
.14a2	c8		iny				iny 								; consume token.
.14a3	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.14a5	5a		phy				phy									; save current position
.14a6	48		pha				pha 								; save count of chars.
.14a7	38		sec				sec 								; address into YX : y + codePtr+1
.14a8	98		tya				tya
.14a9	65 1c		adc $1c				adc 	codePtr
.14ab	aa		tax				tax
.14ac	a5 1d		lda $1d				lda 	codePtr+1
.14ae	69 00		adc #$00			adc 	#0
.14b0	a8		tay				tay
.14b1	68		pla				pla 								; get count.
.14b2	20 77 23	jsr $2377			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.14b5	7a		ply				ply 								; go to next token.
.14b6	98		tya				tya
.14b7	38		sec				sec
.14b8	71 1c		adc ($1c),y			adc 	(codePtr),y
.14ba	a8		tay				tay
.14bb					_ETMCDExit:
.14bb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.14bc					EXPUnaryAbs:
.14bc	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.14bf	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14c2	20 17 21	jsr $2117			jsr 	IFloatAbsoluteR0
.14c5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.14c6					EXPUnaryAsc:
.14c6	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.14c9	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14cc	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.14ce	f0 06		beq $14d6			beq 	_EXAZero 						; if so return 0
.14d0	5a		phy				phy 									; otherwise get first character
.14d1	a0 01		ldy #$01			ldy 	#1
.14d3	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.14d5	7a		ply				ply
.14d6					_EXAZero:
.14d6	a2 0c		ldx #$0c			ldx 	#IFR0
.14d8	20 d5 24	jsr $24d5			jsr 	IFloatSetByte
.14db	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.14dc					EXPUnaryChr:
.14dc	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; expr
.14df	48		pha				pha 									; push on stack
.14e0	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14e3	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.14e5	20 7c 1e	jsr $1e7c			jsr 	StringTempAllocate
.14e8	68		pla				pla
.14e9	20 b1 1e	jsr $1eb1			jsr 	StringTempWrite
.14ec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.14ed					EXPUnaryDec:
.14ed	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.14f0	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14f3	5a		phy				phy
.14f4	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.14f6	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.14f9	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.14fb	f0 3b		beq $1538			beq 	_EUDError 						; empty string
.14fd	aa		tax				tax
.14fe	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1500					_EUDLoop:
.1500	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1502	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1504	90 02		bcc $1508			bcc 	_EUDNoCase
.1506	e9 20		sbc #$20			sbc 	#$20
.1508					_EUDNoCase:
.1508	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.150a	90 2c		bcc $1538			bcc 	_EUDError
.150c	c9 3a		cmp #$3a			cmp 	#'9'+1
.150e	90 0a		bcc $151a			bcc 	_EUDOkay
.1510	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1512	90 24		bcc $1538			bcc 	_EUDError
.1514	c9 47		cmp #$47			cmp 	#'F'+1
.1516	b0 20		bcs $1538			bcs 	_EUDError
.1518	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.151a					_EUDOkay:
.151a	29 0f		and #$0f			and 	#15 							; make constant
.151c	da		phx				phx
.151d	48		pha				pha
.151e	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1520	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1523	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1526	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1529	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.152c	68		pla				pla 									; pop constant and OR in
.152d	fa		plx				plx
.152e	05 0c		ora $0c				ora 	IFR0+IM0
.1530	85 0c		sta $0c				sta 	IFR0+IM0
.1532	c8		iny				iny 									; next
.1533	ca		dex				dex
.1534	d0 ca		bne $1500			bne 	_EUDLoop
.1536	7a		ply				ply
.1537	60		rts				rts
.1538					_EUDError:
.1538	4c 0a 11	jmp $110a		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.153b					EXPUnaryInlineDec:
.153b	4c ea 10	jmp $10ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.153e					EXPUnaryNull:
.153e	20 28 14	jsr $1428			jsr 	EXPTermValueR0
.1541	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1542					EXPUnaryFrac:
.1542	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.1545	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.1548	20 7d 21	jsr $217d			jsr 	IFloatFractionalR0
.154b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.154c					EXPUnaryInt:
.154c	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.154f	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.1552	20 d3 21	jsr $21d3			jsr 	IFloatIntegerR0
.1555	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1556					EXPUnaryLen:
.1556	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.1559	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.155c	b2 1e		lda ($1e)			lda 	(zTemp0)
.155e	a2 0c		ldx #$0c			ldx 	#IFR0
.1560	20 d5 24	jsr $24d5			jsr 	IFloatSetByte
.1563	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1564					EXPUnaryParenthesis:
.1564	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.1567	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.156a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.156b					EXPUnaryRnd:
.156b	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 				; number to R0
.156e	20 15 12	jsr $1215			jsr 	ERRCheckRParen 				; )
.1571	a2 0c		ldx #$0c			ldx 	#IFR0
.1573	20 8a 15	jsr $158a			jsr 	EXPLoadInRandom
.1576	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1578	85 0f		sta $0f				sta 	IFR0+IExp
.157a	60		rts				rts
.157b					ExpUnaryRand:
.157b	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger 				; integer to R0
.157e	20 15 12	jsr $1215			jsr 	ERRCheckRParen 				; )
.1581	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.1583	20 8a 15	jsr $158a			jsr 	EXPLoadInRandom
.1586	20 44 20	jsr $2044			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1589	60		rts				rts
.158a					EXPLoadInRandom:
.158a	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.158d	20 9f 15	jsr $159f			jsr 	EXPRandom32
.1590	95 00		sta $00,x			sta 	IM0,x
.1592	20 9f 15	jsr $159f			jsr 	EXPRandom32
.1595	95 01		sta $01,x			sta 	IM1,x
.1597	20 9f 15	jsr $159f			jsr 	EXPRandom32
.159a	29 7f		and #$7f			and 	#$7F
.159c	95 02		sta $02,x			sta 	IM2,x
.159e	60		rts				rts
.159f					EXPRandom32:
.159f	5a		phy				phy
.15a0	a0 08		ldy #$08			ldy 	#8
.15a2	ad 3c 03	lda $033c			lda 	EXPSeed+0
.15a5	0d 3d 03	ora $033d			ora 	EXPSeed+1
.15a8	0d 3e 03	ora $033e			ora 	EXPSeed+2
.15ab	0d 3f 03	ora $033f			ora 	EXPSeed+3
.15ae	d0 08		bne $15b8			bne 	_EXPRNoReset
.15b0	ee 3c 03	inc $033c			inc 	EXPSeed+0
.15b3	a0 10		ldy #$10			ldy 	#16
.15b5	8c 3f 03	sty $033f			sty 	EXPSeed+3
.15b8					_EXPRNoReset:
.15b8	ad 3c 03	lda $033c			lda 	EXPSeed+0
.15bb					_EXPRLoop:
.15bb	0a		asl a				asl		a
.15bc	2e 3d 03	rol $033d			rol 	EXPSeed+1
.15bf	2e 3e 03	rol $033e			rol 	EXPSeed+2
.15c2	2e 3f 03	rol $033f			rol 	EXPSeed+3
.15c5	90 02		bcc $15c9			bcc 	_EXPRNoEOR
.15c7	49 c5		eor #$c5			eor 	#$C5
.15c9					_EXPRNoEOR:
.15c9	88		dey				dey
.15ca	d0 ef		bne $15bb			bne 	_EXPRLoop
.15cc	8d 3c 03	sta $033c			sta 	EXPSeed+0
.15cf	7a		ply				ply
.15d0	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.15d1					EXPUnarySgn:
.15d1	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.15d4	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.15d7	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.15d9	20 75 24	jsr $2475			jsr 	IFloatCopyToRegister
.15dc	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.15de	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.15e1	a2 10		ldx #$10			ldx 	#IFR1
.15e3	20 a1 21	jsr $21a1			jsr 	IFloatCompare 					; compare R1 vs 0.
.15e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.15e7					EXPUnarySqr:
.15e7	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.15ea	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.15ed	20 1f 21	jsr $211f			jsr 	IFloatSquareRootR0 				; square root.
.15f0	b0 01		bcs $15f3			bcs 	_EUSValue
.15f2	60		rts				rts
.15f3					_EUSValue:
.15f3	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.15f6					EXPUnaryHex:
.15f6	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger 					; expr
.15f9	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.15fc	5a		phy				phy
.15fd	a9 10		lda #$10			lda 	#16
.15ff	20 74 22	jsr $2274			jsr 	IFloatIntegerToStringR0
.1602	80 0a		bra $160e			bra 	EUSMain
.1604					EXPUnaryStr:
.1604	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; expr
.1607	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.160a	5a		phy				phy
.160b	20 d0 22	jsr $22d0			jsr 	IFloatFloatToStringR0 			; convert to string
.160e					EUSMain:
.160e	b0 18		bcs $1628			bcs 	_EUSError
.1610	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1612	84 1f		sty $1f				sty 	zTemp0+1
.1614	48		pha				pha 									; save count
.1615	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1617	20 7c 1e	jsr $1e7c			jsr 	StringTempAllocate
.161a	fa		plx				plx 									; count in X
.161b	a0 00		ldy #$00			ldy 	#0
.161d					_EUSCopy:
.161d	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.161f	c8		iny				iny
.1620	20 b1 1e	jsr $1eb1			jsr 	StringTempWrite
.1623	ca		dex				dex
.1624	d0 f7		bne $161d			bne	 	_EUSCopy
.1626	7a		ply				ply
.1627	60		rts				rts
.1628					_EUSError:
.1628	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.162b					EXPUnaryInlineString:
.162b	18		clc				clc 								; physical address -> IM0,1
.162c	98		tya				tya
.162d	65 1c		adc $1c				adc 	codePtr
.162f	85 0c		sta $0c				sta 	IFR0+IM0
.1631	a5 1d		lda $1d				lda 	codePtr+1
.1633	69 00		adc #$00			adc 	#0
.1635	85 0d		sta $0d				sta 	IFR0+IM1
.1637	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.1639	a9 80		lda #$80			lda 	#$80
.163b	85 0f		sta $0f				sta 	IFR0+IExp
.163d	98		tya				tya	 								; skip over it.
.163e	38		sec				sec
.163f	71 1c		adc ($1c),y			adc 	(codePtr),y
.1641	a8		tay				tay
.1642	60		rts				rts
.1643					_EXPUISRange:
.1643	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1646					EXPUnaryLeft:
.1646	20 8c 16	jsr $168c			jsr 	EXPCommonStart 					; <string>,
.1649	48		pha				pha 									; save string address on stack
.164a	da		phx				phx
.164b	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.164d	48		pha				pha
.164e	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; characters to do
.1651	80 44		bra $1697			bra 	EXPSubstringCommon
.1653					EXPUnaryRight:
.1653	20 8c 16	jsr $168c			jsr 	EXPCommonStart 					; <string>,
.1656	48		pha				pha 									; save string address on stack
.1657	da		phx				phx
.1658	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.165a	48		pha				pha
.165b	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; characters to do
.165e	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.1660	68		pla				pla
.1661	38		sec				sec
.1662	e5 1e		sbc $1e				sbc 	zTemp0
.1664	b0 02		bcs $1668			bcs 	_EUROffLeft
.1666	a9 00		lda #$00			lda 	#0
.1668					_EUROffLeft:
.1668	48		pha				pha 									; start pos
.1669	a9 ff		lda #$ff			lda 	#255
.166b	80 2a		bra $1697			bra 	EXPSubstringCommon
.166d					EXPUnaryMid:
.166d	20 8c 16	jsr $168c			jsr 	EXPCommonStart 					; <string>,
.1670	48		pha				pha 									; save string address on stack
.1671	da		phx				phx
.1672	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; characters start
.1675	f0 12		beq $1689			beq 	_EUSError 						; 1 is left
.1677	3a		dec a				dec 	a 								; zero based.
.1678	48		pha				pha
.1679	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.167b	c9 99		cmp #$99			cmp 	#PR_COMMA
.167d	f0 04		beq $1683			beq 	_EUMLength 						; if so m is provided
.167f	a9 ff		lda #$ff			lda 	#255 							; default m
.1681	80 14		bra $1697			bra 	EXPSubstringCommon
.1683					_EUMLength:
.1683	c8		iny				iny 									; consume comma
.1684	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; characters to do
.1687	80 0e		bra $1697			bra 	EXPSubstringCommon
.1689					_EUSError:
.1689	4c 0a 11	jmp $110a		jmp	ErrorV_value
.168c					EXPCommonStart:
.168c	20 15 14	jsr $1415			jsr 	EXPEvalString
.168f	20 1d 12	jsr $121d			jsr 	ERRCheckComma
.1692	a5 0c		lda $0c				lda 	IFR0+IM0
.1694	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1696	60		rts				rts
.1697					EXPSubstringCommon:
.1697	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.1699	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; check right bracket.
.169c	68		pla				pla 									; start position
.169d	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.169f	fa		plx				plx 									; get string address to zTemp2.
.16a0	86 23		stx $23				stx 	zTemp2+1
.16a2	68		pla				pla
.16a3	85 22		sta $22				sta 	zTemp2
.16a5	38		sec				sec 									; length - start is the max count of chars
.16a6	b2 22		lda ($22)			lda 	(zTemp2)
.16a8	e5 21		sbc $21				sbc 	zTemp1+1
.16aa	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.16ac	b0 02		bcs $16b0			bcs 	_EXPSSNoTrim
.16ae	85 20		sta $20				sta 	zTemp1 							; update count with available
.16b0					_EXPSSNoTrim:
.16b0	a5 20		lda $20				lda 	zTemp1 							; chars required.
.16b2	20 7c 1e	jsr $1e7c			jsr 	StringTempAllocate 				; allocate memory for it.
.16b5	a5 20		lda $20				lda 	zTemp1 							; zero length string
.16b7	f0 15		beq $16ce			beq 	_EXPSSExit
.16b9	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.16bb	d2 22		cmp ($22)			cmp 	(zTemp2)
.16bd	b0 0f		bcs $16ce			bcs 	_EXPSSExit
.16bf	5a		phy				phy
.16c0	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.16c2	c8		iny				iny 									; +1 for the length byte
.16c3					_EXPSSCopy:
.16c3	b1 22		lda ($22),y			lda 	(zTemp2),y
.16c5	20 b1 1e	jsr $1eb1			jsr 	StringTempWrite
.16c8	c8		iny				iny
.16c9	c6 20		dec $20				dec 	zTemp1
.16cb	d0 f6		bne $16c3			bne 	_EXPSSCopy
.16cd	7a		ply				ply
.16ce					_EXPSSExit:
.16ce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.16cf					EXPUnaryVal:
.16cf	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.16d2	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.16d5	5a		phy				phy
.16d6	18		clc				clc
.16d7	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.16d9	69 01		adc #$01			adc 	#1
.16db	aa		tax				tax
.16dc	a5 1f		lda $1f				lda 	zTemp0+1
.16de	69 00		adc #$00			adc 	#0
.16e0	a8		tay				tay
.16e1	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.16e3	20 37 23	jsr $2337			jsr 	IFloatStringToFloatR0 			; do conversion
.16e6	b0 02		bcs $16ea			bcs 	_EUVError
.16e8	7a		ply				ply
.16e9	60		rts				rts
.16ea					_EUVError:
.16ea	4c 0a 11	jmp $110a		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.16ed					BinaryPrecedence:
>16ed	02					.byte	 2	; $ef =
>16ee	02					.byte	 2	; $f0 <>
>16ef	02					.byte	 2	; $f1 <=
>16f0	02					.byte	 2	; $f2 <
>16f1	02					.byte	 2	; $f3 >=
>16f2	02					.byte	 2	; $f4 >
>16f3	01					.byte	 1	; $f5 XOR
>16f4	01					.byte	 1	; $f6 OR
>16f5	01					.byte	 1	; $f7 AND
>16f6	04					.byte	 4	; $f8 DIV
>16f7	04					.byte	 4	; $f9 MOD
>16f8	04					.byte	 4	; $fa <<
>16f9	04					.byte	 4	; $fb >>
>16fa	04					.byte	 4	; $fc /
>16fb	04					.byte	 4	; $fd *
>16fc	03					.byte	 3	; $fe -
>16fd	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.16fe					StandardTokens:
>16fe	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1705	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>170b	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1711	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1716	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1719	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>171f	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1722	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1727	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>172c	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1734	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1738	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>173d	00					.byte	$00                                     	; $8c [[end]]
>173e	00					.byte	$00                                     	; $8d [[shift]]
>173f	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1744	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1749	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>174c	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1751	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1755	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>175b	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1761	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1766	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>176a	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>176e	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1773	01 2c					.byte	$01,$2c                                 	; $99 ,
>1775	01 3b					.byte	$01,$3b                                 	; $9a ;
>1777	01 3a					.byte	$01,$3a                                 	; $9b :
>1779	01 27					.byte	$01,$27                                 	; $9c '
>177b	01 29					.byte	$01,$29                                 	; $9d )
>177d	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1781	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1787	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>178b	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>178f	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1794	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1798	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>179f	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>17a4	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>17a9	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>17ae	00					.byte	0											; $a8
>17af	00					.byte	0											; $a9
>17b0	00					.byte	0											; $aa
>17b1	00					.byte	0											; $ab
>17b2	00					.byte	0											; $ac
>17b3	00					.byte	0											; $ad
>17b4	00					.byte	0											; $ae
>17b5	00					.byte	0											; $af
>17b6	00					.byte	0											; $b0
>17b7	00					.byte	0											; $b1
>17b8	00					.byte	0											; $b2
>17b9	00					.byte	0											; $b3
>17ba	00					.byte	0											; $b4
>17bb	00					.byte	0											; $b5
>17bc	00					.byte	0											; $b6
>17bd	00					.byte	0											; $b7
>17be	00					.byte	0											; $b8
>17bf	00					.byte	0											; $b9
>17c0	00					.byte	0											; $ba
>17c1	00					.byte	0											; $bb
>17c2	00					.byte	0											; $bc
>17c3	00					.byte	0											; $bd
>17c4	00					.byte	0											; $be
>17c5	00					.byte	0											; $bf
>17c6	00					.byte	0											; $c0
>17c7	00					.byte	0											; $c1
>17c8	00					.byte	0											; $c2
>17c9	00					.byte	0											; $c3
>17ca	00					.byte	0											; $c4
>17cb	00					.byte	0											; $c5
>17cc	00					.byte	0											; $c6
>17cd	00					.byte	0											; $c7
>17ce	00					.byte	0											; $c8
>17cf	00					.byte	0											; $c9
>17d0	00					.byte	0											; $ca
>17d1	00					.byte	0											; $cb
>17d2	00					.byte	0											; $cc
>17d3	00					.byte	0											; $cd
>17d4	00					.byte	0											; $ce
>17d5	00					.byte	0											; $cf
>17d6	00					.byte	0											; $d0
>17d7	00					.byte	0											; $d1
>17d8	00					.byte	0											; $d2
>17d9	00					.byte	0											; $d3
>17da	00					.byte	0											; $d4
>17db	00					.byte	0											; $d5
>17dc	00					.byte	0											; $d6
>17dd	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>17e5	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>17ec	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>17f2	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>17f8	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>17fd	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1802	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1807	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>180c	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1811	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1817	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>181c	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1824	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>182b	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1830	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1835	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>183b	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1840	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1846	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>184b	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1851	01 28					.byte	$01,$28                                 	; $eb (
>1853	01 24					.byte	$01,$24                                 	; $ec $
>1855	00					.byte	$00                                     	; $ed [[decimal]]
>1856	00					.byte	$00                                     	; $ee [[string]]
>1857	01 3d					.byte	$01,$3d                                 	; $ef =
>1859	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>185c	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>185f	01 3c					.byte	$01,$3c                                 	; $f2 <
>1861	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1864	01 3e					.byte	$01,$3e                                 	; $f4 >
>1866	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>186a	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>186d	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1871	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1875	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1879	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>187c	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>187f	01 2f					.byte	$01,$2f                                 	; $fc /
>1881	01 2a					.byte	$01,$2a                                 	; $fd *
>1883	01 2d					.byte	$01,$2d                                 	; $fe -
>1885	01 2b					.byte	$01,$2b                                 	; $ff +
>1887	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1888					VectorTable:
>1888	b1 25					.word	NotImplemented           ; $80 REPEAT
>188a	b1 25					.word	NotImplemented           ; $81 UNTIL
>188c	b1 25					.word	NotImplemented           ; $82 WHILE
>188e	b1 25					.word	NotImplemented           ; $83 WEND
>1890	b1 25					.word	NotImplemented           ; $84 IF
>1892	b1 25					.word	NotImplemented           ; $85 ENDIF
>1894	b1 25					.word	NotImplemented           ; $86 DO
>1896	b1 25					.word	NotImplemented           ; $87 LOOP
>1898	b1 25					.word	NotImplemented           ; $88 PROC
>189a	b1 25					.word	NotImplemented           ; $89 ENDPROC
>189c	b1 25					.word	NotImplemented           ; $8a FOR
>189e	b1 25					.word	NotImplemented           ; $8b NEXT
>18a0	a9 10					.word	RUNEndOfLine             ; $8c [[END]]
>18a2	e1 10					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>18a4	b1 25					.word	NotImplemented           ; $8e ELSE
>18a6	1f 10					.word	NoExec01                 ; $8f THEN
>18a8	1f 10					.word	NoExec02                 ; $90 TO
>18aa	1f 10					.word	NoExec03                 ; $91 STEP
>18ac	b1 25					.word	NotImplemented           ; $92 LET
>18ae	22 10					.word	Command_Print            ; $93 PRINT
>18b0	b1 25					.word	NotImplemented           ; $94 INPUT
>18b2	b1 25					.word	NotImplemented           ; $95 CALL
>18b4	b1 25					.word	NotImplemented           ; $96 SYS
>18b6	90 10					.word	Command_REM              ; $97 REM
>18b8	b1 25					.word	NotImplemented           ; $98 EXIT
>18ba	1f 10					.word	NoExec04                 ; $99 ,
>18bc	1f 10					.word	NoExec05                 ; $9a ;
>18be	1f 10					.word	NoExec06                 ; $9b :
>18c0	90 10					.word	Command_REM2             ; $9c '
>18c2	1f 10					.word	NoExec07                 ; $9d )
>18c4	b1 25					.word	NotImplemented           ; $9e DIM
>18c6	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>18c8	87 10					.word	Command_NEW              ; $a0 NEW
>18ca	9d 10					.word	Command_RUN              ; $a1 RUN
>18cc	e7 10					.word	Command_STOP             ; $a2 STOP
>18ce	e4 10					.word	Command_END              ; $a3 END
>18d0	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>18d2	b1 25					.word	NotImplemented           ; $a5 LIST
>18d4	b1 25					.word	NotImplemented           ; $a6 SAVE
>18d6	b1 25					.word	NotImplemented           ; $a7 LOAD
>18d8	b1 25					.word	NotImplemented           ; $a8
>18da	b1 25					.word	NotImplemented           ; $a9
>18dc	b1 25					.word	NotImplemented           ; $aa
>18de	b1 25					.word	NotImplemented           ; $ab
>18e0	b1 25					.word	NotImplemented           ; $ac
>18e2	b1 25					.word	NotImplemented           ; $ad
>18e4	b1 25					.word	NotImplemented           ; $ae
>18e6	b1 25					.word	NotImplemented           ; $af
>18e8	b1 25					.word	NotImplemented           ; $b0
>18ea	b1 25					.word	NotImplemented           ; $b1
>18ec	b1 25					.word	NotImplemented           ; $b2
>18ee	b1 25					.word	NotImplemented           ; $b3
>18f0	b1 25					.word	NotImplemented           ; $b4
>18f2	b1 25					.word	NotImplemented           ; $b5
>18f4	b1 25					.word	NotImplemented           ; $b6
>18f6	b1 25					.word	NotImplemented           ; $b7
>18f8	b1 25					.word	NotImplemented           ; $b8
>18fa	b1 25					.word	NotImplemented           ; $b9
>18fc	b1 25					.word	NotImplemented           ; $ba
>18fe	b1 25					.word	NotImplemented           ; $bb
>1900	b1 25					.word	NotImplemented           ; $bc
>1902	b1 25					.word	NotImplemented           ; $bd
>1904	b1 25					.word	NotImplemented           ; $be
>1906	b1 25					.word	NotImplemented           ; $bf
>1908	b1 25					.word	NotImplemented           ; $c0
>190a	b1 25					.word	NotImplemented           ; $c1
>190c	b1 25					.word	NotImplemented           ; $c2
>190e	b1 25					.word	NotImplemented           ; $c3
>1910	b1 25					.word	NotImplemented           ; $c4
>1912	b1 25					.word	NotImplemented           ; $c5
>1914	b1 25					.word	NotImplemented           ; $c6
>1916	b1 25					.word	NotImplemented           ; $c7
>1918	b1 25					.word	NotImplemented           ; $c8
>191a	b1 25					.word	NotImplemented           ; $c9
>191c	b1 25					.word	NotImplemented           ; $ca
>191e	b1 25					.word	NotImplemented           ; $cb
>1920	b1 25					.word	NotImplemented           ; $cc
>1922	b1 25					.word	NotImplemented           ; $cd
>1924	b1 25					.word	NotImplemented           ; $ce
>1926	b1 25					.word	NotImplemented           ; $cf
>1928	b1 25					.word	NotImplemented           ; $d0
>192a	b1 25					.word	NotImplemented           ; $d1
>192c	b1 25					.word	NotImplemented           ; $d2
>192e	b1 25					.word	NotImplemented           ; $d3
>1930	b1 25					.word	NotImplemented           ; $d4
>1932	b1 25					.word	NotImplemented           ; $d5
>1934	b1 25					.word	NotImplemented           ; $d6
>1936	53 16					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1938	46 16					.word	EXPUnaryLeft             ; $d8 LEFT$(
>193a	6d 16					.word	EXPUnaryMid              ; $d9 MID$(
>193c	04 16					.word	EXPUnaryStr              ; $da STR$(
>193e	cf 16					.word	EXPUnaryVal              ; $db VAL(
>1940	d1 15					.word	EXPUnarySgn              ; $dc SGN(
>1942	bc 14					.word	EXPUnaryAbs              ; $dd ABS(
>1944	56 15					.word	EXPUnaryLen              ; $de LEN(
>1946	e7 15					.word	EXPUnarySqr              ; $df SQR(
>1948	dc 14					.word	EXPUnaryChr              ; $e0 CHR$(
>194a	c6 14					.word	EXPUnaryAsc              ; $e1 ASC(
>194c	b1 25					.word	NotImplemented           ; $e2 INKEY$(
>194e	b1 25					.word	NotImplemented           ; $e3 EVENT(
>1950	b1 25					.word	NotImplemented           ; $e4 TIME
>1952	4c 15					.word	EXPUnaryInt              ; $e5 INT(
>1954	42 15					.word	EXPUnaryFrac             ; $e6 FRAC(
>1956	ed 14					.word	EXPUnaryDec              ; $e7 DEC(
>1958	f6 15					.word	EXPUnaryHex              ; $e8 HEX$(
>195a	6b 15					.word	EXPUnaryRnd              ; $e9 RND(
>195c	7b 15					.word	ExpUnaryRand             ; $ea RAND(
>195e	64 15					.word	EXPUnaryParenthesis      ; $eb (
>1960	3e 15					.word	EXPUnaryNull             ; $ec $
>1962	3b 15					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1964	2b 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1966	e8 12					.word	EXPCompareEqual          ; $ef =
>1968	03 13					.word	EXPCompareNotEqual       ; $f0 <>
>196a	0c 13					.word	EXPCompareLessEqual      ; $f1 <=
>196c	f1 12					.word	EXPCompareLess           ; $f2 <
>196e	15 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1970	fa 12					.word	EXPCompareGreater        ; $f4 >
>1972	95 12					.word	EXPBinXor                ; $f5 XOR
>1974	89 12					.word	EXPBinOr                 ; $f6 OR
>1976	7d 12					.word	EXPBinAnd                ; $f7 AND
>1978	55 12					.word	EXPBinIDiv               ; $f8 DIV
>197a	66 12					.word	EXPBinIMod               ; $f9 MOD
>197c	60 13					.word	EXPBinLeft               ; $fa <<
>197e	68 13					.word	EXPBinRight              ; $fb >>
>1980	49 12					.word	EXPBinFDiv               ; $fc /
>1982	40 12					.word	EXPBinMul                ; $fd *
>1984	37 12					.word	EXPBinSub                ; $fe -
>1986	2e 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1988					TOKDetokenise:
.1988	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.198a	84 23		sty $23				sty 	zTemp2+1
.198c	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.198f					_TOKDLoop:
.198f	20 be 19	jsr $19be			jsr 	TOKDGet 					; get next
.1992	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1994	f0 26		beq $19bc			beq 	_TOKDExit
.1996	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1998	f0 1d		beq $19b7			beq 	_TOKDDataItem
.199a	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.199c	f0 19		beq $19b7			beq 	_TOKDDataItem
.199e	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.19a0	10 05		bpl $19a7			bpl 	_TOKDNotToken
.19a2	20 86 1a	jsr $1a86			jsr 	TOKDToken 					; token to text.
.19a5	80 e8		bra $198f			bra 	_TOKDLoop
.19a7					_TOKDNotToken:
.19a7	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.19a9	90 05		bcc $19b0			bcc 	_TOKDNotIdentifier
.19ab	20 f9 19	jsr $19f9			jsr 	TOKDIdentifier
.19ae	80 df		bra $198f			bra 	_TOKDLoop
.19b0					_TOKDNotIdentifier:
.19b0	a0 0a		ldy #$0a			ldy 	#10
.19b2	20 42 1a	jsr $1a42			jsr 	TOKDInteger
.19b5	80 d8		bra $198f			bra 	_TOKDLoop
.19b7					_TOKDDataItem:
.19b7	20 d4 19	jsr $19d4			jsr 	TOKDDataItem
.19ba	80 d3		bra $198f			bra 	_TOKDLoop
.19bc					_TOKDExit:
.19bc	18		clc				clc
.19bd	60		rts				rts
.19be	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.19c0	e6 22		inc $22				inc 	zTemp2
.19c2	d0 02		bne $19c6			bne 	_TKDGExit
.19c4	e6 23		inc $23				inc 	zTemp2+1
.19c6					_TKDGExit:
.19c6	60		rts				rts
.19c7					TOKDOutput:
.19c7	8d 42 03	sta $0342			sta 	TOKLastCharacter
.19ca	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.19cd					TOKSetDetokeniseOutput:
.19cd	8e 40 03	stx $0340			stx 	TOKOutputMethod
.19d0	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.19d3	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.19d4					TOKDDataItem:
.19d4	a8		tay				tay 								; type in Y
.19d5	a9 22		lda #$22			lda 	#'"'						; start with " or .
.19d7	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.19d9	f0 02		beq $19dd			beq 	_TOKDDIsString
.19db	a9 2e		lda #$2e			lda 	#'.'
.19dd					_TOKDDIsString:
.19dd	20 c7 19	jsr $19c7			jsr 	TOKDOutput 					; dump it
.19e0	20 be 19	jsr $19be			jsr 	TOKDGet 					; get length into X
.19e3	aa		tax				tax
.19e4					_TOKDDOutput:
.19e4	ca		dex				dex 								; are we complete
.19e5	30 08		bmi $19ef			bmi 	_TOKDDEnd
.19e7	20 be 19	jsr $19be			jsr 	TOKDGet 					; get character and output it
.19ea	20 c7 19	jsr $19c7			jsr 	TOKDOutput
.19ed	80 f5		bra $19e4			bra 	_TOKDDOutput
.19ef					_TOKDDEnd:
.19ef	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.19f1	d0 05		bne $19f8			bne 	_TOKDDNotString
.19f3	a9 22		lda #$22			lda 	#'"'
.19f5	20 c7 19	jsr $19c7			jsr 	TOKDOutput
.19f8					_TOKDDNotString:
.19f8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.19f9					TOKDIdentifier:
.19f9	a0 ff		ldy #$ff			ldy 	#$FF
.19fb	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.19fe					_TOKDLoop:
.19fe	a8		tay				tay 								; token in Y
.19ff	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1a01	c0 64		cpy #$64			cpy 	#$64
.1a03	f0 11		beq $1a16			beq 	_TOKDIOutput
.1a05	a9 5f		lda #$5f			lda 	#'_'
.1a07	c0 65		cpy #$65			cpy 	#$65
.1a09	f0 0b		beq $1a16			beq 	_TOKDIOutput
.1a0b	98		tya				tya 								; handle a-z
.1a0c	18		clc				clc
.1a0d	69 21		adc #$21			adc	 	#$21
.1a0f	c0 5a		cpy #$5a			cpy 	#$5A
.1a11	90 03		bcc $1a16			bcc 	_TOKDIOutput
.1a13	38		sec				sec 								; handle 0-9
.1a14	e9 4b		sbc #$4b			sbc 	#$4B
.1a16					_TOKDIOutput:
.1a16	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.1a19	10 08		bpl $1a23			bpl 	_TOKDINoSpacing
.1a1b	48		pha				pha
.1a1c	20 b8 1a	jsr $1ab8			jsr 	TOKDSpacing
.1a1f	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.1a22	68		pla				pla
.1a23					_TOKDINoSpacing:
.1a23	20 c7 19	jsr $19c7			jsr 	TOKDOutput
.1a26	20 be 19	jsr $19be			jsr 	TOKDGet 					; get next token
.1a29	c9 7c		cmp #$7c			cmp 	#$7C
.1a2b	90 d1		bcc $19fe			bcc 	_TOKDLoop
.1a2d	f0 12		beq $1a41			beq 	_TOKDIExit 					; it's a number, no tail.
.1a2f	4a		lsr a				lsr 	a 							; string ?
.1a30	90 07		bcc $1a39			bcc 	_TOKDICheckArray
.1a32	48		pha				pha
.1a33	a9 24		lda #$24			lda 	#"$"
.1a35	20 c7 19	jsr $19c7			jsr 	TOKDOutput
.1a38	68		pla				pla
.1a39					_TOKDICheckArray:
.1a39	4a		lsr a				lsr 	a 							; array ?
.1a3a	90 05		bcc $1a41			bcc 	_TOKDIExit
.1a3c	a9 28		lda #$28			lda 	#"("
.1a3e	20 c7 19	jsr $19c7			jsr 	TOKDOutput
.1a41					_TOKDIExit:
.1a41	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1a42					TOKDInteger:
.1a42	5a		phy				phy 								; save base
.1a43	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1a45	20 d5 24	jsr $24d5			jsr 	IFloatSetByte
.1a48					_TOKDILoop:
.1a48	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1a4a	c9 40		cmp #$40			cmp 	#$40
.1a4c	b0 1d		bcs $1a6b			bcs 	_TOKDIHaveInteger
.1a4e	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1a50	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1a53	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1a56	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1a59	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1a5c	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1a5f	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1a62	20 be 19	jsr $19be			jsr 	TOKDGet 					; OR byte in.
.1a65	05 0c		ora $0c				ora 	IFR0+IM0
.1a67	85 0c		sta $0c				sta 	IFR0+IM0
.1a69	80 dd		bra $1a48			bra 	_TOKDILoop
.1a6b					_TOKDIHaveInteger:
.1a6b	7a		ply				ply 								; restore base
.1a6c	98		tya				tya 								; base in A
.1a6d	20 74 22	jsr $2274			jsr 	IFloatIntegerToStringR0
.1a70	86 1e		stx $1e				stx 	zTemp0
.1a72	84 1f		sty $1f				sty 	zTemp0+1
.1a74	b2 1e		lda ($1e)			lda 	(zTemp0)
.1a76	20 b8 1a	jsr $1ab8			jsr 	TOKDSpacing 				; check spacing okay.
.1a79	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1a7b					_TOKDOutput:
.1a7b	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1a7d	20 c7 19	jsr $19c7			jsr 	TOKDOutput
.1a80	c8		iny				iny
.1a81	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1a83	d0 f6		bne $1a7b			bne 	_TOKDOutput
.1a85	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1a86					TOKDToken:
.1a86	a2 fe		ldx #$fe			ldx 	#StandardTokens & $FF
.1a88	a0 16		ldy #$16			ldy 	#StandardTokens >> 8
.1a8a					_TOKDSearch:
.1a8a	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1a8c	84 1f		sty $1f				sty 	zTemp0+1
.1a8e	aa		tax				tax 								; token ID in X.
.1a8f					_TOKDFind:
.1a8f	ca		dex				dex 								; reached the start
.1a90	10 0d		bpl $1a9f			bpl 	_TOKDFound
.1a92	38		sec				sec 								; go to next entry
.1a93	b2 1e		lda ($1e)			lda 	(zTemp0)
.1a95	65 1e		adc $1e				adc 	zTemp0
.1a97	85 1e		sta $1e				sta 	zTemp0
.1a99	90 f4		bcc $1a8f			bcc 	_TOKDFind
.1a9b	e6 1f		inc $1f				inc 	zTemp0+1
.1a9d	80 f0		bra $1a8f			bra 	_TOKDFind
.1a9f					_TOKDFound:
.1a9f	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1aa1	f0 14		beq $1ab7			beq 	_TOKDExit
.1aa3	aa		tax				tax
.1aa4	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1aa6	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1aa8	20 b8 1a	jsr $1ab8			jsr 	TOKDSpacing
.1aab					_TOKDOutput:
.1aab	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1aad	20 0f 1e	jsr $1e0f			jsr 	TOKToLower
.1ab0	20 c7 19	jsr $19c7			jsr 	TOKDOutput
.1ab3	c8		iny				iny
.1ab4	ca		dex				dex
.1ab5	d0 f4		bne $1aab			bne 	_TOKDOutput
.1ab7					_TOKDExit:
.1ab7	60		rts				rts
.1ab8					TOKDSpacing:
.1ab8	20 26 1e	jsr $1e26			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1abb	90 0d		bcc $1aca			bcc 	_TOKDSExit
.1abd	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1ac0	20 26 1e	jsr $1e26			jsr 	TOKIsIdentifierElement
.1ac3	90 05		bcc $1aca			bcc 	_TOKDSExit
.1ac5	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1ac7	20 c7 19	jsr $19c7			jsr 	TOKDOutput
.1aca					_TOKDSExit:
.1aca	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1acb					PGMDeleteLine:
.1acb	20 7e 1b	jsr $1b7e			jsr 	PGMEndProgram 				; end of program into zTemp0
.1ace	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1ad0	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1ad3	85 21		sta $21				sta 	zTemp1+1
.1ad5					_PGMDLoop:
.1ad5	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1ad7	38		sec				sec
.1ad8	f0 3a		beq $1b14			beq 	_PGMDExit
.1ada	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1adc	b1 20		lda ($20),y			lda 	(zTemp1),y
.1ade	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1ae1	d0 08		bne $1aeb			bne 	_PGMDNext
.1ae3	c8		iny				iny
.1ae4	b1 20		lda ($20),y			lda 	(zTemp1),y
.1ae6	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1ae9	f0 0d		beq $1af8			beq 	_PGMDDelete
.1aeb					_PGMDNext:
.1aeb	18		clc				clc
.1aec	b2 20		lda ($20)			lda 	(zTemp1)
.1aee	65 20		adc $20				adc 	zTemp1
.1af0	85 20		sta $20				sta 	zTemp1
.1af2	90 e1		bcc $1ad5			bcc 	_PGMDLoop
.1af4	e6 21		inc $21				inc 	zTemp1+1
.1af6	80 dd		bra $1ad5			bra 	_PGMDLoop
.1af8					_PGMDDelete:
.1af8	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1afa	a8		tay				tay
.1afb					_PGMDCopy:
.1afb	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1afd	92 20		sta ($20)			sta 	(zTemp1)
.1aff	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1b01	c5 1e		cmp $1e				cmp 	zTemp0
.1b03	d0 07		bne $1b0c			bne 	_PGMDNext2
.1b05	a5 21		lda $21				lda 	zTemp1+1
.1b07	c5 1f		cmp $1f				cmp 	zTemp0+1
.1b09	18		clc				clc
.1b0a	f0 08		beq $1b14			beq 	_PGMDExit
.1b0c					_PGMDNext2:
.1b0c	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1b0e	d0 eb		bne $1afb			bne 	_PGMDCopy
.1b10	e6 21		inc $21				inc 	zTemp1+1
.1b12	80 e7		bra $1afb			bra 	_PGMDCopy
.1b14					_PGMDExit:
.1b14	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1b15					PGMInsertLine:
.1b15	20 7e 1b	jsr $1b7e			jsr 	PGMEndProgram 				; end of program into zTemp0
.1b18	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1b1a	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1b1d	85 21		sta $21				sta 	zTemp1+1
.1b1f					_PGMILoop:
.1b1f	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1b21	f0 1c		beq $1b3f			beq 	_PGMIInsert
.1b23	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1b25	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b27	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1b2a	c8		iny				iny
.1b2b	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b2d	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1b30	b0 0d		bcs $1b3f			bcs 	_PGMIInsert 				; insert here.
.1b32	18		clc				clc
.1b33	b2 20		lda ($20)			lda 	(zTemp1)
.1b35	65 20		adc $20				adc 	zTemp1
.1b37	85 20		sta $20				sta 	zTemp1
.1b39	90 e4		bcc $1b1f			bcc 	_PGMILoop
.1b3b	e6 21		inc $21				inc 	zTemp1+1
.1b3d	80 e0		bra $1b1f			bra 	_PGMILoop
.1b3f					_PGMIInsert:
.1b3f	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1b42					_PGMIInsertLoop:
.1b42	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b44	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1b46	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1b48	c5 1e		cmp $1e				cmp 	zTemp0
.1b4a	d0 06		bne $1b52			bne 	_PGMINext
.1b4c	a5 21		lda $21				lda 	zTemp1+1
.1b4e	c5 1f		cmp $1f				cmp 	zTemp0+1
.1b50	f0 0a		beq $1b5c			beq 	_PGMIInserted
.1b52					_PGMINext:
.1b52	a5 1e		lda $1e				lda 	zTemp0
.1b54	d0 02		bne $1b58			bne 	_PGMINoBorrow
.1b56	c6 1f		dec $1f				dec 	zTemp0+1
.1b58					_PGMINoBorrow:
.1b58	c6 1e		dec $1e				dec 	zTemp0
.1b5a	80 e6		bra $1b42			bra 	_PGMIInsertLoop
.1b5c					_PGMIInserted:
.1b5c	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1b5e					_PGMICopyLoop:
.1b5e	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1b61	91 20		sta ($20),y			sta 	(zTemp1),y
.1b63	c8		iny				iny
.1b64	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1b67	d0 f5		bne $1b5e			bne 	_PGMICopyLoop
.1b69	18		clc				clc
.1b6a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1b6b					PGMSetBaseAddress:
.1b6b	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1b6e	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1b71	60		rts				rts
.1b72					PGMNewProgram:
.1b72	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1b74	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1b77	85 1f		sta $1f				sta 	zTemp0+1
.1b79	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1b7b	92 1e		sta ($1e)			sta 	(zTemp0)
.1b7d	60		rts				rts
.1b7e					PGMEndProgram:
.1b7e	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1b80	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1b83	85 1f		sta $1f				sta 	zTemp0+1
.1b85					_PGMEPLoop:
.1b85	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b87	f0 0b		beq $1b94			beq 	_PGMEPExit
.1b89	18		clc				clc
.1b8a	65 1e		adc $1e				adc 	zTemp0
.1b8c	85 1e		sta $1e				sta 	zTemp0
.1b8e	90 f5		bcc $1b85			bcc 	_PGMEPLoop
.1b90	e6 1f		inc $1f				inc 	zTemp0+1
.1b92	80 f1		bra $1b85			bra 	_PGMEPLoop
.1b94					_PGMEPExit:
.1b94	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1b95					TOKResetElement:
.1b95	9c 46 03	stz $0346			stz 	TOKElement
.1b98	60		rts				rts
.1b99					TOKWriteElement:
.1b99	da		phx				phx
.1b9a	ae 46 03	ldx $0346			ldx 	TOKElement
.1b9d	9d 47 03	sta $0347,x			sta 	TOKElementText,x
.1ba0	9e 48 03	stz $0348,x			stz 	TOKElementText+1,x
.1ba3	fa		plx				plx
.1ba4	ee 46 03	inc $0346			inc 	TOKElement
.1ba7	60		rts				rts
.0346					TOKElement:
>0346							.fill 	1
.0347					TOKElementText:
>0347							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1ba8					TOKTokeniseConstant:
.1ba8	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1baa	48		pha				pha 								; save on stack
.1bab	29 c0		and #$c0			and 	#$C0
.1bad	05 0d		ora $0d				ora 	IFR0+IM1
.1baf	05 0e		ora $0e				ora 	IFR0+IM2
.1bb1	f0 10		beq $1bc3			beq 	_TTCLess
.1bb3	da		phx				phx
.1bb4	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1bb6					_TTCShiftRight:
.1bb6	46 0e		lsr $0e				lsr 	IFR0+IM2
.1bb8	66 0d		ror $0d				ror 	IFR0+IM1
.1bba	66 0c		ror $0c				ror 	IFR0+IM0
.1bbc	ca		dex				dex
.1bbd	d0 f7		bne $1bb6			bne 	_TTCShiftRight
.1bbf	fa		plx				plx
.1bc0	20 a8 1b	jsr $1ba8			jsr 	TOKTokeniseConstant
.1bc3					_TTCLess:
.1bc3	68		pla				pla
.1bc4	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1bc6	20 62 1c	jsr $1c62			jsr 	TOKWriteA
.1bc9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1bca					TOKTokeniseDecimals:
.1bca	20 72 1c	jsr $1c72			jsr 	TOKGetNext 					; consume the .
.1bcd	20 9c 1d	jsr $1d9c			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1bd0	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1bd2	20 62 1c	jsr $1c62			jsr 	TOKWriteA
.1bd5	20 da 1b	jsr $1bda			jsr 	TOKOutputElementBuffer 		; then the buffer
.1bd8	18		clc				clc
.1bd9	60		rts				rts
.1bda					TOKOutputElementBuffer:
.1bda	ad 46 03	lda $0346			lda 	TOKElement 					; get count and write that
.1bdd	20 62 1c	jsr $1c62			jsr 	TOKWriteA
.1be0	a8		tay				tay 								; put in Y
.1be1	f0 0c		beq $1bef			beq 	_TOEExit 					; exit if empty which is okay.
.1be3	a2 01		ldx #$01			ldx 	#1
.1be5					_TOELoop:
.1be5	bd 46 03	lda $0346,x			lda 	TOKElement,x
.1be8	20 62 1c	jsr $1c62			jsr 	TOKWriteA
.1beb	e8		inx				inx
.1bec	88		dey				dey
.1bed	d0 f6		bne $1be5			bne 	_TOELoop
.1bef					_TOEExit:
.1bef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1bf0					TOKTokenise:
.1bf0	8c 47 04	sty $0447			sty 	TOKDataSource+1 			; save source routine pointer
.1bf3	8e 46 04	stx $0446			stx 	TOKDataSource
.1bf6	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1bf8	2a		rol a				rol  	a
.1bf9	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1bfc	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1bfe	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1c01					_TOKMainLoop:
.1c01	20 6e 1c	jsr $1c6e			jsr 	TOKGet 						; what follows.
.1c04	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1c06	f0 51		beq $1c59			beq 	_TOKExit
.1c08	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1c0a	d0 05		bne $1c11			bne 	_TOKElement
.1c0c	20 72 1c	jsr $1c72			jsr 	TOKGetNext
.1c0f	80 f0		bra $1c01			bra 	_TOKMainLoop
.1c11					_TOKElement:
.1c11	20 1a 1e	jsr $1e1a			jsr 	TOKIsDigit 					; is it 0..9
.1c14	90 0a		bcc $1c20			bcc 	_TOKNotDigit
.1c16	20 73 1d	jsr $1d73			jsr 	TOKTokeniseInteger 			; get integer
.1c19	b0 45		bcs $1c60			bcs 	_TOKFail 					; did it fail ?
.1c1b	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1c1e	80 e1		bra $1c01			bra 	_TOKMainLoop
.1c20					_TOKNotDigit:
.1c20	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1c23	d0 3b		bne $1c60			bne 	_TOKFail 					; if so, we've a problem.
.1c25	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1c27	d0 07		bne $1c30			bne 	_TOKNotHex
.1c29	20 bb 1c	jsr $1cbb			jsr 	TOKTokeniseHexadecimal
.1c2c	b0 32		bcs $1c60			bcs 	_TOKFail
.1c2e	80 d1		bra $1c01			bra 	_TOKMainLoop
.1c30					_TOKNotHex:
.1c30	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1c32	d0 07		bne $1c3b			bne 	_TOKNotDecimal
.1c34	20 ca 1b	jsr $1bca			jsr 	TOKTokeniseDecimals
.1c37	b0 27		bcs $1c60			bcs 	_TOKFail
.1c39	80 c6		bra $1c01			bra 	_TOKMainLoop
.1c3b					_TOKNotDecimal:
.1c3b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1c3d	d0 07		bne $1c46			bne 	_TOKNotString
.1c3f	20 e1 1d	jsr $1de1			jsr 	TOKTokeniseString
.1c42	b0 1c		bcs $1c60			bcs 	_TOKFail
.1c44	80 bb		bra $1c01			bra 	_TOKMainLoop
.1c46					_TOKNotString:
.1c46	20 37 1e	jsr $1e37			jsr 	TOKIsAlpha 					; identifier ?
.1c49	b0 07		bcs $1c52			bcs 	_TOKIdentifier
.1c4b	20 b0 1d	jsr $1db0			jsr 	TOKTokenisePunctuation 		; punctuation
.1c4e	b0 10		bcs $1c60			bcs 	_TOKFail
.1c50	80 af		bra $1c01			bra 	_TOKMainLoop
.1c52					_TOKIdentifier:
.1c52	20 f5 1c	jsr $1cf5			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1c55	b0 09		bcs $1c60			bcs 	_TOKFail
.1c57	80 a8		bra $1c01			bra 	_TOKMainLoop
.1c59					_TOKExit:
.1c59	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1c5b	20 62 1c	jsr $1c62			jsr 	TOKWriteA
.1c5e	18		clc				clc									; return with carry set.
.1c5f	60		rts				rts
.1c60					_TOKFail:
.1c60	38		sec				sec
.1c61	60		rts				rts
.1c62					TOKWriteA:
.1c62	da		phx				phx
.1c63	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1c66	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1c69	fa		plx				plx
.1c6a	ee 37 02	inc $0237			inc 	TOKLineSize
.1c6d	60		rts				rts
.1c6e					TOKGet:
.1c6e	18		clc				clc
.1c6f	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1c72					TOKGetNext:
.1c72	38		sec				sec
.1c73	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.0446					TOKDataSource:
>0446							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1c76					TOKFindToken:
.1c76	a2 fe		ldx #$fe			ldx 	#StandardTokens & $FF 		; do this table
.1c78	a0 16		ldy #$16			ldy 	#StandardTokens >> 8
.1c7a	20 85 1c	jsr $1c85			jsr 	TOKFindTokenXY 				; find it, or not
.1c7d	90 04		bcc $1c83			bcc 	_TOKFTFail
.1c7f	a2 00		ldx #$00			ldx 	#0
.1c81	38		sec				sec
.1c82	60		rts				rts
.1c83					_TOKFTFail
.1c83	18		clc				clc
.1c84	60		rts				rts
.1c85					TOKFindTokenXY:
.1c85	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1c87	84 1f		sty $1f				sty 	zTemp0+1
.1c89	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1c8b	8d 48 04	sta $0448			sta 	TOKCurrent
.1c8e					_TOKFindLoop:
.1c8e	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1c90	18		clc				clc 		 						; clear carry in case of fail
.1c91	30 17		bmi $1caa			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1c93	cd 46 03	cmp $0346			cmp 	TOKElement 					; compare against the element length
.1c96	d0 13		bne $1cab			bne 	_TOKNext 					; different, try next.
.1c98	aa		tax				tax 								; number of chars to compare.
.1c99	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1c9b					_TOKCompare:
.1c9b	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1c9d	d9 46 03	cmp $0346,y			cmp 	TOKElementText-1,y
.1ca0	d0 09		bne $1cab			bne 	_TOKNext 					; different ? try next
.1ca2	c8		iny				iny 								; compare next two
.1ca3	ca		dex				dex
.1ca4	d0 f5		bne $1c9b			bne 	_TOKCompare 				; until done X characters.
.1ca6	38		sec				sec
.1ca7	ad 48 04	lda $0448			lda 	TOKCurrent 					; return current ID.
.1caa					_TOKExit:
.1caa	60		rts				rts
.1cab					_TOKNext:
.1cab	ee 48 04	inc $0448			inc 	TOKCurrent 					; increment token #
.1cae	38		sec				sec 								; add length+1 to ptr
.1caf	b2 1e		lda ($1e)			lda 	(zTemp0)
.1cb1	65 1e		adc $1e				adc 	zTemp0
.1cb3	85 1e		sta $1e				sta 	zTemp0
.1cb5	90 d7		bcc $1c8e			bcc 	_TOKFindLoop
.1cb7	e6 1f		inc $1f				inc 	zTemp0+1
.1cb9	80 d3		bra $1c8e			bra 	_TOKFindLoop
.0448					TOKCurrent:
>0448							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1cbb					TOKTokeniseHexadecimal:
.1cbb	20 72 1c	jsr $1c72			jsr 	TOKGetNext 					; consume the $
.1cbe	a2 0c		ldx #$0c			ldx 	#IFR0
.1cc0	20 d3 24	jsr $24d3			jsr 	IFloatSetZero 				; set R0 = 0
.1cc3					_TTHLoop:
.1cc3	20 6e 1c	jsr $1c6e			jsr 	TOKGet 						; keep getting and copying while numeric.
.1cc6	20 44 1e	jsr $1e44			jsr 	TOKIsHexadecimal
.1cc9	90 20		bcc $1ceb			bcc 	_TTHDone
.1ccb	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1ccd	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1cd0	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1cd3	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1cd6	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1cd9	20 72 1c	jsr $1c72			jsr 	TOKGetNext
.1cdc	38		sec				sec 								; convert to decimal.
.1cdd	e9 30		sbc #$30			sbc 	#48
.1cdf	c9 0a		cmp #$0a			cmp 	#10
.1ce1	90 02		bcc $1ce5			bcc 	_TTHNotAlpha
.1ce3	e9 07		sbc #$07			sbc 	#7
.1ce5					_TTHNotAlpha:
.1ce5	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1ce7	85 0c		sta $0c				sta 	IFR0+IM0
.1ce9	80 d8		bra $1cc3			bra 	_TTHLoop
.1ceb					_TTHDone:
.1ceb	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1ced	20 62 1c	jsr $1c62			jsr 	TOKWriteA
.1cf0	20 a8 1b	jsr $1ba8			jsr 	TOKTokeniseConstant 		; write integer out.
.1cf3	18		clc				clc
.1cf4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1cf5					TOKTokeniseIdentifier:
.1cf5	20 95 1b	jsr $1b95			jsr 	TOKResetElement 			; extract an identifier
.1cf8					_TOKGetIdentifier:
.1cf8	20 6e 1c	jsr $1c6e			jsr 	TOKGet
.1cfb	20 04 1e	jsr $1e04			jsr 	TOKToUpper
.1cfe	20 26 1e	jsr $1e26			jsr 	TOKIsIdentifierElement
.1d01	90 08		bcc $1d0b			bcc 	_TOKEndIdent
.1d03	20 99 1b	jsr $1b99			jsr		TOKWriteElement
.1d06	20 72 1c	jsr $1c72			jsr 	TOKGetNext
.1d09	80 ed		bra $1cf8			bra 	_TOKGetIdentifier
.1d0b					_TOKEndIdent:
.1d0b	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1d0d	d0 06		bne $1d15			bne 	_TOKNotString
.1d0f	20 99 1b	jsr $1b99			jsr 	TOKWriteElement 			; add it
.1d12	20 72 1c	jsr $1c72			jsr 	TOKGetNext 					; consume it
.1d15					_TOKNotString:
.1d15	20 6e 1c	jsr $1c6e			jsr 	TOKGet 						; finally check for (
.1d18	c9 28		cmp #$28			cmp 	#"("
.1d1a	d0 06		bne $1d22			bne 	_TOKNoArray
.1d1c	20 99 1b	jsr $1b99			jsr 	TOKWriteElement 			; add it
.1d1f	20 72 1c	jsr $1c72			jsr 	TOKGetNext 					; consume it
.1d22					_TOKNoArray:
.1d22	20 76 1c	jsr $1c76			jsr 	TOKFindToken 				; find it
.1d25	90 05		bcc $1d2c			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1d27	20 62 1c	jsr $1c62			jsr 	TOKWriteA
.1d2a	18		clc				clc
.1d2b	60		rts				rts
.1d2c					_TOKIsVariable:
.1d2c	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1d2e					_TOKOutputBuffer:
.1d2e	bd 47 03	lda $0347,x			lda 	TOKElementText,x 			; output it translated.
.1d31	20 5a 1d	jsr $1d5a			jsr 	TOKTranslateIdentifier
.1d34	20 62 1c	jsr $1c62			jsr 	TOKWriteA
.1d37	e8		inx				inx
.1d38	bd 47 03	lda $0347,x			lda 	TOKElementText,x
.1d3b	20 26 1e	jsr $1e26			jsr 	TOKIsIdentifierElement
.1d3e	b0 ee		bcs $1d2e			bcs 	_TOKOutputBuffer
.1d40	a8		tay				tay 								; last char in Y
.1d41	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1d43	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1d45	f0 0e		beq $1d55			beq 	_TOKIVExit
.1d47	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1d49	d0 04		bne $1d4f			bne 	_TOKIVCheckArray 			; no, check for (
.1d4b	1a		inc a				inc 	a 							; token is $7D
.1d4c	bc 48 03	ldy $0348,x			ldy 	TOKElementText+1,x 			; get next one.
.1d4f					_TOKIVCheckArray:
.1d4f	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1d51	d0 02		bne $1d55			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1d53	1a		inc a				inc 	a
.1d54	1a		inc a				inc 	a
.1d55					_TOKIVExit:
.1d55	20 62 1c	jsr $1c62			jsr 	TOKWriteA 					; ending token
.1d58	18		clc				clc
.1d59	60		rts				rts
.1d5a					TOKTranslateIdentifier:
.1d5a	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1d5c	f0 0f		beq $1d6d			beq 	_TTI64
.1d5e	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1d60	f0 0e		beq $1d70			beq 	_TTI65
.1d62	38		sec				sec
.1d63	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1d65	10 03		bpl $1d6a			bpl 	_TTIExit
.1d67	18		clc				clc 								; map 09 onto 26-35
.1d68	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1d6a					_TTIExit:
.1d6a	09 40		ora #$40			ora 	#$40 						; correct range.
.1d6c	60		rts				rts
.1d6d	a9 64		lda #$64	_TTI64:	lda 	#$64
.1d6f	60		rts				rts
.1d70	a9 65		lda #$65	_TTI65:	lda 	#$65
.1d72	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1d73					TOKTokeniseInteger:
.1d73	20 9c 1d	jsr $1d9c			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1d76	a2 47		ldx #$47			ldx 	#TOKElementText & $FF
.1d78	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1d7a	ad 46 03	lda $0346			lda		TOKElement
.1d7d	20 37 23	jsr $2337			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1d80	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1d83	f0 12		beq $1d97			beq 	_TOKNotLineNumber
.1d85	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1d87	d0 0c		bne $1d95			bne 	_TOKBadLineNumeber
.1d89	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1d8b	8d 38 02	sta $0238			sta 	TOKLineNumber
.1d8e	a5 0d		lda $0d				lda 	IFR0+IM1
.1d90	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1d93	18		clc				clc
.1d94	60		rts				rts
.1d95					_TOKBadLineNumeber:
.1d95	38		sec				sec
.1d96	60		rts				rts
.1d97					_TOKNotLineNumber:
.1d97	20 a8 1b	jsr $1ba8			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1d9a	18		clc				clc
.1d9b	60		rts				rts
.1d9c					TOKExtractInteger:
.1d9c	20 95 1b	jsr $1b95			jsr 	TOKResetElement 			; restart
.1d9f					_TTILoop:
.1d9f	20 6e 1c	jsr $1c6e			jsr 	TOKGet 						; keep getting and copying while numeric.
.1da2	20 1a 1e	jsr $1e1a			jsr 	TOKIsDigit
.1da5	90 08		bcc $1daf			bcc 	_TOKEIExit
.1da7	20 99 1b	jsr $1b99			jsr 	TOKWriteElement
.1daa	20 72 1c	jsr $1c72			jsr 	TOKGetNext
.1dad	80 f0		bra $1d9f			bra 	_TTILoop
.1daf					_TOKEIExit:
.1daf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1db0					TOKTokenisePunctuation:
.1db0	20 95 1b	jsr $1b95			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1db3	20 72 1c	jsr $1c72			jsr 	TOKGetNext
.1db6	20 99 1b	jsr $1b99			jsr 	TOKWriteElement
.1db9	20 6e 1c	jsr $1c6e			jsr 	TOKGet 						; what follows ?
.1dbc	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1dbe	f0 10		beq $1dd0			beq 	_TTPOne
.1dc0	20 2e 1e	jsr $1e2e			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1dc3	b0 0b		bcs $1dd0			bcs 	_TTPOne 					; these speed things up a bit.
.1dc5	20 99 1b	jsr $1b99			jsr 	TOKWriteElement 			; this is what we will search for.
.1dc8	20 76 1c	jsr $1c76			jsr 	TOKFindToken
.1dcb	b0 0a		bcs $1dd7			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1dcd	ce 46 03	dec $0346			dec 	TOKElement 					; make it a single character
.1dd0					_TTPOne:
.1dd0	20 76 1c	jsr $1c76			jsr 	TOKFindToken 				; look for one character punctuation
.1dd3	b0 07		bcs $1ddc			bcs 	_TTPOutputExit 				; we found it
.1dd5	38		sec				sec 								; not recognised.
.1dd6	60		rts				rts
.1dd7					_TTPConsumeExit:
.1dd7	48		pha				pha
.1dd8	20 72 1c	jsr $1c72			jsr 	TOKGetNext 					; get the 2nd char out.
.1ddb	68		pla				pla
.1ddc					_TTPOutputExit:
.1ddc	20 62 1c	jsr $1c62			jsr  	TOKWriteA 					; write token out
.1ddf	18		clc				clc
.1de0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1de1					TOKTokeniseString:
.1de1	20 72 1c	jsr $1c72			jsr 	TOKGetNext 					; consume the "
.1de4	20 95 1b	jsr $1b95			jsr 	TOKResetElement 			; start getting the string
.1de7					_TOKTSLoop:
.1de7	20 6e 1c	jsr $1c6e			jsr 	TOKGet 						; check EOL
.1dea	c9 00		cmp #$00			cmp 	#0
.1dec	f0 0c		beq $1dfa			beq 	_TOKTSExit
.1dee	20 72 1c	jsr $1c72			jsr 	TOKGetNext 					; get and consume
.1df1	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1df3	f0 05		beq $1dfa			beq 	_TOKTSExit
.1df5	20 99 1b	jsr $1b99			jsr 	TOKWriteElement
.1df8	80 ed		bra $1de7			bra 	_TOKTSLoop
.1dfa					_TOKTSExit:
.1dfa	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1dfc	20 62 1c	jsr $1c62			jsr 	TOKWriteA
.1dff	20 da 1b	jsr $1bda			jsr 	TOKOutputElementBuffer
.1e02	18		clc				clc
.1e03	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1e04					TOKToUpper:
.1e04	c9 61		cmp #$61			cmp 	#"a"
.1e06	90 06		bcc $1e0e			bcc 	_TTUNotLower
.1e08	c9 7b		cmp #$7b			cmp 	#"z"+1
.1e0a	b0 02		bcs $1e0e			bcs 	_TTUNotLower
.1e0c	49 20		eor #$20			eor 	#$20
.1e0e					_TTUNotLower:
.1e0e	60		rts				rts
.1e0f					TOKToLower:
.1e0f	c9 41		cmp #$41			cmp 	#"A"
.1e11	90 06		bcc $1e19			bcc 	_TTUNotUpper
.1e13	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1e15	b0 02		bcs $1e19			bcs 	_TTUNotUpper
.1e17	49 20		eor #$20			eor 	#$20
.1e19					_TTUNotUpper:
.1e19	60		rts				rts
.1e1a					TOKIsDigit:
.1e1a	c9 30		cmp #$30			cmp 	#"0"
.1e1c	90 06		bcc $1e24			bcc 	TOKFail
.1e1e	c9 3a		cmp #$3a			cmp 	#"9"+1
.1e20	b0 02		bcs $1e24			bcs 	TOKFail
.1e22					TOKSucceed:
.1e22	38		sec				sec
.1e23	60		rts				rts
.1e24					TOKFail:
.1e24	18		clc				clc
.1e25	60		rts				rts
.1e26					TOKIsIdentifierElement:
.1e26	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1e28	f0 f8		beq $1e22			beq 	TOKSucceed
.1e2a	c9 5f		cmp #$5f			cmp 	#"_"
.1e2c	f0 f4		beq $1e22			beq 	TOKSucceed 					; else fall through to alphanumeric
.1e2e					TOKIsAlphaNumeric:
.1e2e	20 37 1e	jsr $1e37			jsr 	TOKIsAlpha
.1e31	b0 ef		bcs $1e22			bcs 	TOKSucceed
.1e33	20 1a 1e	jsr $1e1a			jsr 	TOKIsDigit
.1e36	60		rts				rts
.1e37					TOKIsAlpha:
.1e37	20 04 1e	jsr $1e04			jsr 	TOKToUpper
.1e3a	c9 41		cmp #$41			cmp 	#"A"
.1e3c	90 e6		bcc $1e24			bcc 	TOKFail
.1e3e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1e40	b0 e2		bcs $1e24			bcs 	TOKFail
.1e42	80 de		bra $1e22			bra 	TOKSucceed
.1e44					TOKIsHexadecimal:
.1e44	20 1a 1e	jsr $1e1a			jsr		TOKIsDigit
.1e47	b0 d9		bcs $1e22			bcs 	TOKSucceed
.1e49	20 37 1e	jsr $1e37			jsr 	TOKIsAlpha
.1e4c	90 d6		bcc $1e24			bcc 	TOKFail
.1e4e	c9 47		cmp #$47			cmp 	#"F"+1
.1e50	b0 d2		bcs $1e24			bcs 	TOKFail
.1e52	80 ce		bra $1e22			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.1e54					StringSystemInitialise:
.1e54	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh 			; last byte of memory
.1e57	3a		dec a				dec 	a
.1e58	8d 4b 04	sta $044b			sta 	stringMemory+1
.1e5b	85 1f		sta $1f				sta 	zTemp0+1
.1e5d	a9 ff		lda #$ff			lda 	#$FF
.1e5f	8d 4a 04	sta $044a			sta 	stringMemory
.1e62	85 1e		sta $1e				sta 	zTemp0
.1e64	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.1e66	92 1e		sta ($1e)			sta 	(zTemp0)
.1e68	60		rts				rts
.1e69					StringSpaceInitialise:
.1e69	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.1e6b	8d 49 04	sta $0449			sta 	stringInitialised
.1e6e	ad 4a 04	lda $044a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.1e71	8d 4c 04	sta $044c			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.1e74	ad 4b 04	lda $044b			lda 	stringMemory+1
.1e77	3a		dec a				dec 	a
.1e78	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1e7b	60		rts				rts
.1e7c					StringTempAllocate:
.1e7c	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.1e7e	b0 2e		bcs $1eae			bcs 	_STALength
.1e80	2c 49 04	bit $0449			bit 	stringInitialised 			; already initialised
.1e83	30 05		bmi $1e8a			bmi 	_STAAllocate
.1e85	48		pha				pha 								; save value to subtract.
.1e86	20 69 1e	jsr $1e69			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.1e89	68		pla				pla 								; restore it
.1e8a					_STAAllocate:
.1e8a	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.1e8c	18		clc				clc  								; deliberate allows one more
.1e8d	6d 4c 04	adc $044c			adc 	stringTempPointer 			; subtract from temp pointer
.1e90	8d 4c 04	sta $044c			sta 	stringTempPointer
.1e93	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.1e95	85 24		sta $24				sta 	zsTemp 						; and zsTemp
.1e97	ad 4d 04	lda $044d			lda 	stringTempPointer+1
.1e9a	69 ff		adc #$ff			adc 	#$FF
.1e9c	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1e9f	85 25		sta $25				sta 	zsTemp+1
.1ea1	85 0d		sta $0d				sta 	IFR0+IM1
.1ea3	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.1ea5	a9 80		lda #$80			lda 	#$80
.1ea7	85 0f		sta $0f				sta 	IFR0+IExp
.1ea9	a9 00		lda #$00			lda 	#0 							; clear the target string
.1eab	92 24		sta ($24)			sta 	(zsTemp)
.1ead	60		rts				rts
.1eae					_STALength:
.1eae	4c f8 11	jmp $11f8		jmp	ErrorV_string
.1eb1					StringTempWrite:
.1eb1	5a		phy				phy
.1eb2	48		pha				pha
.1eb3	b2 24		lda ($24)			lda 	(zsTemp)
.1eb5	1a		inc a				inc 	a
.1eb6	92 24		sta ($24)			sta 	(zsTemp)
.1eb8	a8		tay				tay
.1eb9	68		pla				pla
.1eba	91 24		sta ($24),y			sta 	(zsTemp),y
.1ebc	7a		ply				ply
.1ebd	60		rts				rts
.0024					zsTemp:
>0024							.fill 	2
.0449					stringInitialised:
>0449							.fill 	1
.044a					stringMemory:
>044a							.fill 	2
.044c					stringTempPointer:
>044c							.fill 	2

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.1ebe					IFInitialise:
.1ebe	9c 56 04	stz $0456			stz 	IFStackIndex
.1ec1	60		rts				rts
.1ec2					IFloatSubtract:
.1ec2	da		phx				phx
.1ec3	a2 0c		ldx #$0c			ldx 	#IFR0
.1ec5	20 de 24	jsr $24de			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.1ec8	fa		plx				plx
.1ec9					IFloatAdd:
.1ec9	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.1ecb	05 0f		ora $0f				ora 	IFR0+IExp
.1ecd	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.1ecf	d0 4e		bne $1f1f			bne 	_IFloatAddDecimals 			; decimal version.
.1ed1					_IFAddSubMantissa:
.1ed1	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.1ed3	45 0f		eor $0f				eor 	IFR0+IExp
.1ed5	29 40		and #$40			and 	#IFSign
.1ed7	d0 21		bne $1efa			bne 	_IFloatSubMantissa
.1ed9	18		clc				clc 								; do the actual addition
.1eda	a5 0c		lda $0c			lda 	IFR0+IM0
.1edc	75 00		adc $00,x		adc 		IM0,x
.1ede	85 0c		sta $0c			sta 	IFR0+IM0
.1ee0	a5 0d		lda $0d			lda 	IFR0+IM1
.1ee2	75 01		adc $01,x		adc 		IM1,x
.1ee4	85 0d		sta $0d			sta 	IFR0+IM1
.1ee6	a5 0e		lda $0e			lda 	IFR0+IM2
.1ee8	75 02		adc $02,x		adc 		IM2,x
.1eea	85 0e		sta $0e			sta 	IFR0+IM2
.1eec	10 29		bpl $1f17			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.1eee	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.1ef0	20 02 25	jsr $2502			jsr 	IFloatShiftRight
.1ef3	20 2c 25	jsr $252c			jsr 	IFloatIncExponent
.1ef6	d0 1f		bne $1f17			bne 	_IFloatAddExit
.1ef8	38		sec				sec 								; overflowed numerically.
.1ef9	60		rts				rts
.1efa					_IFloatSubMantissa:
.1efa	38		sec				sec 								; do the subtraction R0-Rx
.1efb	a5 0c		lda $0c			lda 	IFR0+IM0
.1efd	f5 00		sbc $00,x		sbc 		IM0,x
.1eff	85 0c		sta $0c			sta 	IFR0+IM0
.1f01	a5 0d		lda $0d			lda 	IFR0+IM1
.1f03	f5 01		sbc $01,x		sbc 		IM1,x
.1f05	85 0d		sta $0d			sta 	IFR0+IM1
.1f07	a5 0e		lda $0e			lda 	IFR0+IM2
.1f09	f5 02		sbc $02,x		sbc 		IM2,x
.1f0b	85 0e		sta $0e			sta 	IFR0+IM2
.1f0d	b0 08		bcs $1f17			bcs 	_IFloatAddExit 				; no borrow so we are done.
.1f0f	a2 0c		ldx #$0c			ldx 	#IFR0
.1f11	20 e6 24	jsr $24e6			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.1f14	20 de 24	jsr $24de			jsr 	IFloatNegate 				; negate
.1f17					_IFloatAddExit:
.1f17	18		clc				clc
.1f18	60		rts				rts
.1f19					_IFloatZeroAdd:
.1f19	fa		plx				plx 								; return this value in R0
.1f1a	20 64 24	jsr $2464			jsr 	IFloatCopyFromRegister
.1f1d	18		clc				clc
.1f1e	60		rts				rts
.1f1f					_IFloatAddDecimals:
.1f1f	20 cc 24	jsr $24cc			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.1f22	f0 f3		beq $1f17			beq 	_IFloatAddExit
.1f24	20 0a 25	jsr $250a			jsr 	IFloatNormalise 			; normalise RX
.1f27	da		phx				phx 								; normalise R0
.1f28	a2 0c		ldx #$0c			ldx 	#IFR0
.1f2a	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero
.1f2d	f0 ea		beq $1f19			beq 	_IFloatZeroAdd
.1f2f	20 0a 25	jsr $250a			jsr 	IFloatNormalise
.1f32	fa		plx				plx
.1f33	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.1f35	29 3f		and #$3f			and 	#IFXMask
.1f37	38		sec				sec
.1f38	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.1f3a	85 0a		sta $0a				sta 	iTemp0
.1f3c	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.1f3e	29 3f		and #$3f			and 	#IFXMask
.1f40	38		sec				sec
.1f41	e9 20		sbc #$20			sbc 	#$20
.1f43	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.1f45	b0 02		bcs $1f49			bcs 	_IFloatHaveLarger
.1f47	a5 0a		lda $0a				lda 	iTemp0
.1f49					_IFloatHaveLarger:
.1f49	18		clc				clc 								; get the actual one back.
.1f4a	69 20		adc #$20			adc 	#$20 						; shift both to that.
.1f4c	20 59 1f	jsr $1f59			jsr 	_IFShiftXToA
.1f4f	da		phx				phx
.1f50	a2 0c		ldx #$0c			ldx 	#IFR0
.1f52	20 59 1f	jsr $1f59			jsr 	_IFShiftXToA
.1f55	fa		plx				plx
.1f56	4c d1 1e	jmp $1ed1			jmp 	_IFAddSubMantissa 			; do the adding bit.
.1f59					_IFShiftXToA:
.1f59	8d 4e 04	sta $044e			sta 	IFTarget
.1f5c	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero 			; check adding zero ?
.1f5f	f0 11		beq $1f72			beq 	_IFSXExit
.1f61					_IFSXLoop:
.1f61	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.1f63	29 3f		and #$3f			and 	#IFXMask
.1f65	cd 4e 04	cmp $044e			cmp 	IFTarget
.1f68	f0 08		beq $1f72			beq 	_IFSXExit
.1f6a	20 02 25	jsr $2502			jsr 	IFloatShiftRight
.1f6d	20 2c 25	jsr $252c			jsr 	IFloatIncExponent
.1f70	80 ef		bra $1f61			bra 	_IFSXLoop
.1f72					_IFSXExit:
.1f72	60		rts				rts
.044e					IFTarget:
>044e							.fill 	1
.1f73					IFloatMultiply:
.1f73	8e 4e 04	stx $044e			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.1f76	20 2e 20	jsr $202e			jsr 	IFCalculateNewSign
.1f79	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.1f7b	05 0f		ora $0f				ora 	IFR0+IExp
.1f7d	29 3f		and #$3f			and 	#IFXMask
.1f7f	15 01		ora $01,x			ora 	IM1,x
.1f81	05 0d		ora $0d				ora 	IFR0+IM1
.1f83	15 02		ora $02,x			ora 	IM2,x
.1f85	05 0e		ora $0e				ora 	IFR0+IM2
.1f87	d0 0a		bne $1f93			bne 	_IFMStandard
.1f89	20 af 24	jsr $24af			jsr 	IFloatMultiply8BitRx
.1f8c	ad 50 04	lda $0450			lda 	IFNewSign
.1f8f	85 0f		sta $0f				sta 	IFR0+IExp
.1f91	18		clc				clc
.1f92	60		rts				rts
.1f93					_IFMStandard:
.1f93	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.1f95	20 25 20	jsr $2025			jsr 	IFMSignExtend
.1f98	8d 4f 04	sta $044f			sta 	IFNewExponent
.1f9b	a5 0f		lda $0f				lda 	IFR0+IExp
.1f9d	20 25 20	jsr $2025			jsr 	IFMSignExtend
.1fa0	18		clc				clc
.1fa1	6d 4f 04	adc $044f			adc 	IFNewExponent
.1fa4	8d 4f 04	sta $044f			sta 	IFNewExponent
.1fa7	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.1fa9	20 75 24	jsr $2475			jsr 	IFloatCopyToRegister
.1fac	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.1fae	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.1fb1					_IFMLoop:
.1fb1	a2 18		ldx #$18			ldx 	#IFRTemp
.1fb3	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero
.1fb6	f0 3a		beq $1ff2			beq 	_IFMExit
.1fb8	ae 4e 04	ldx $044e			ldx 	IFTarget 					; look at adder MSB
.1fbb	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.1fbd	10 03		bpl $1fc2			bpl	 	_IFMTargetOkay
.1fbf	20 16 20	jsr $2016			jsr 	_IFMShiftAll
.1fc2					_IFMTargetOkay:
.1fc2	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.1fc4	29 01		and #$01			and 	#1
.1fc6	f0 16		beq $1fde			beq 	_IFMNoAdd
.1fc8	ae 4e 04	ldx $044e			ldx 	IFTarget 					; add adder
.1fcb	18		clc				clc
.1fcc	a5 0c		lda $0c			lda 	IFR0+IM0
.1fce	75 00		adc $00,x		adc 		IM0,x
.1fd0	85 0c		sta $0c			sta 	IFR0+IM0
.1fd2	a5 0d		lda $0d			lda 	IFR0+IM1
.1fd4	75 01		adc $01,x		adc 		IM1,x
.1fd6	85 0d		sta $0d			sta 	IFR0+IM1
.1fd8	a5 0e		lda $0e			lda 	IFR0+IM2
.1fda	75 02		adc $02,x		adc 		IM2,x
.1fdc	85 0e		sta $0e			sta 	IFR0+IM2
.1fde					_IFMNoAdd:
.1fde	a5 0e		lda $0e				lda 	IFR0+IM2
.1fe0	10 03		bpl $1fe5			bpl 	_IFMResultOkay
.1fe2	20 16 20	jsr $2016			jsr 	_IFMShiftAll
.1fe5					_IFMResultOkay:
.1fe5	a2 18		ldx #$18			ldx 	#IFRTemp
.1fe7	20 02 25	jsr $2502			jsr 	IFloatShiftRight
.1fea	ae 4e 04	ldx $044e			ldx 	IFTarget
.1fed	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.1ff0	80 bf		bra $1fb1			bra 	_IFMLoop
.1ff2					_IFMExit:
.1ff2	ad 4f 04	lda $044f			lda 	IFNewExponent 				; validate new exponent.
.1ff5	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.1ff7	90 0f		bcc $2008			bcc 	_IFMOkay
.1ff9	c9 e0		cmp #$e0			cmp 	#$E0
.1ffb	b0 0b		bcs $2008			bcs 	_IFMOkay
.1ffd	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.1fff	f0 13		beq $2014			beq 	_IFMError
.2001	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.2003	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.2006	18		clc				clc
.2007	60		rts				rts
.2008					_IFMOkay:
.2008	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.200a	0d 50 04	ora $0450			ora 	IFNewSign
.200d	85 0f		sta $0f				sta 	IFR0+IExp
.200f	18		clc				clc
.2010	60		rts				rts
.2011	4c ff ff	jmp $ffff			jmp 	$FFFF
.2014					_IFMError:
.2014	38		sec				sec
.2015	60		rts				rts
.2016					_IFMShiftAll:
.2016	a2 0c		ldx #$0c			ldx 	#IFR0
.2018	20 02 25	jsr $2502			jsr 	IFloatShiftRight
.201b	ae 4e 04	ldx $044e			ldx 	IFTarget
.201e	20 02 25	jsr $2502			jsr 	IFloatShiftRight
.2021	ee 4f 04	inc $044f			inc 	IFNewExponent
.2024	60		rts				rts
.2025					IFMSignExtend:
.2025	29 3f		and #$3f			and 	#IFXMask
.2027	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2029	90 02		bcc $202d			bcc 	_IFMNoSXX
.202b	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.202d					_IFMNoSXX:
.202d	60		rts				rts
.202e					IFCalculateNewSign:
.202e	b5 03		lda $03,x			lda 	IExp,x
.2030	45 0f		eor $0f				eor 	IFR0+IExp
.2032	29 40		and #$40			and 	#IFSign
.2034	8d 50 04	sta $0450			sta 	IFNewSign
.2037	60		rts				rts
.044f					IFNewExponent:
>044f							.fill 	1
.0450					IFNewSign:
>0450							.fill 	1
.2038					IFloatDivideInteger:
.2038	20 51 20	jsr $2051			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.203b	b0 06		bcs $2043			bcs 	_IFDIExit
.203d	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.203f	20 64 24	jsr $2464			jsr 	IFloatCopyFromRegister
.2042	18		clc				clc
.2043					_IFDIExit:
.2043	60		rts				rts
.2044					IFloatModulusInteger:
.2044	20 51 20	jsr $2051			jsr 	IFloatDivideIntegerCommon
.2047	b0 07		bcs $2050			bcs 	_IFMIExit
.2049	ae 4e 04	ldx $044e			ldx 	IFTarget
.204c	20 64 24	jsr $2464			jsr 	IFloatCopyFromRegister
.204f	18		clc				clc
.2050					_IFMIExit:
.2050	60		rts				rts
.2051					IFloatDivideIntegerCommon:
.2051	8e 4e 04	stx $044e			stx 	IFTarget  					; this is s1, s0 = R0
.2054	20 2e 20	jsr $202e			jsr 	IFCalculateNewSign 			; calculate sign of result
.2057	20 7f 20	jsr $207f			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.205a	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.205c	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero
.205f	f0 1c		beq $207d			beq 	_IFDIDivZero
.2061	ae 4e 04	ldx $044e			ldx 	IFTarget 					; zero Rx (S1)
.2064	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.2067	5a		phy				phy
.2068	a0 18		ldy #$18			ldy 	#24
.206a					_IFDILoop:
.206a	20 90 20	jsr $2090			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.206d	20 9c 20	jsr $209c			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2070	88		dey				dey
.2071	d0 f7		bne $206a			bne 	_IFDILoop 					; do it 24 times
.2073	7a		ply				ply
.2074	ad 50 04	lda $0450			lda 	IFNewSign 					; set sign of result.
.2077	29 40		and #$40			and 	#IFSign
.2079	85 1b		sta $1b				sta 	IFRTemp+IExp
.207b	18		clc				clc 								; is okay.
.207c	60		rts				rts
.207d					_IFDIDivZero:
.207d	38		sec				sec
.207e	60		rts				rts
.207f					IFDCopyRXToRTemp:
.207f	b5 00		lda $00,x			lda 	IM0,x
.2081	85 18		sta $18				sta 	IFRTemp+IM0
.2083	b5 01		lda $01,x			lda 	IM1,x
.2085	85 19		sta $19				sta 	IFRTemp+IM1
.2087	b5 02		lda $02,x			lda 	IM2,x
.2089	85 1a		sta $1a				sta 	IFRTemp+IM2
.208b	b5 03		lda $03,x			lda 	IExp,x
.208d	85 1b		sta $1b				sta 	IFRTemp+IExp
.208f	60		rts				rts
.2090					IFDShiftSTempS1Left:
.2090	a2 18		ldx #$18			ldx 	#IFRTemp
.2092	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft
.2095	ae 4e 04	ldx $044e			ldx 	IFTarget
.2098	20 fb 24	jsr $24fb			jsr 	IFloatRotateLeft
.209b	60		rts				rts
.209c					IFDTrySubtract:
.209c	ae 4e 04	ldx $044e			ldx 	IFTarget 					; s1 = Rx
.209f	38		sec				sec 								; subtract, saving the results on the stack.
.20a0	b5 00		lda $00,x			lda 	IM0,x
.20a2	e5 0c		sbc $0c				sbc 	IFR0+IM0
.20a4	48		pha				pha
.20a5	b5 01		lda $01,x			lda 	IM1,x
.20a7	e5 0d		sbc $0d				sbc 	IFR0+IM1
.20a9	48		pha				pha
.20aa	b5 02		lda $02,x			lda 	IM2,x
.20ac	e5 0e		sbc $0e				sbc 	IFR0+IM2
.20ae	b0 03		bcs $20b3			bcs 	_IFDCanSubtract
.20b0	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.20b1	68		pla				pla
.20b2	60		rts				rts
.20b3					_IFDCanSubtract:
.20b3	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.20b5	68		pla				pla
.20b6	95 01		sta $01,x			sta 	IM1,x
.20b8	68		pla				pla
.20b9	95 00		sta $00,x			sta 	IM0,x
.20bb	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.20bd	d0 06		bne $20c5			bne 	_IFDCSExit
.20bf	e6 19		inc $19				inc 	IFRTemp+IM1
.20c1	d0 02		bne $20c5			bne 	_IFDCSExit
.20c3	e6 1a		inc $1a				inc 	IFRTemp+IM2
.20c5					_IFDCSExit:
.20c5	60		rts				rts
.20c6					IFloatBitwiseAnd:
.20c6	5a		phy				phy
.20c7	20 0b 21	jsr $210b			jsr 	IFPreProcessBitwise 		; set up everything.
.20ca	d0 0f		bne $20db			bne 	_IFBAExit
.20cc					_IFBALoop:
.20cc	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.20cf	35 00		and $00,x			and 	IM0,x
.20d1	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.20d4	e8		inx				inx
.20d5	c8		iny				iny
.20d6	c0 03		cpy #$03			cpy 	#3
.20d8	d0 f2		bne $20cc			bne 	_IFBALoop
.20da	18		clc				clc
.20db					_IFBAExit:
.20db	7a		ply				ply
.20dc	60		rts				rts
.20dd					IFloatBitwiseOr:
.20dd	5a		phy				phy
.20de	20 0b 21	jsr $210b			jsr 	IFPreProcessBitwise 		; set up everything.
.20e1	d0 0f		bne $20f2			bne 	_IFBAExit
.20e3					_IFBALoop:
.20e3	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.20e6	15 00		ora $00,x			ora 	IM0,x
.20e8	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.20eb	e8		inx				inx
.20ec	c8		iny				iny
.20ed	c0 03		cpy #$03			cpy 	#3
.20ef	d0 f2		bne $20e3			bne 	_IFBALoop
.20f1	18		clc				clc
.20f2					_IFBAExit:
.20f2	7a		ply				ply
.20f3	60		rts				rts
.20f4					IFloatBitwiseXor:
.20f4	5a		phy				phy
.20f5	20 0b 21	jsr $210b			jsr 	IFPreProcessBitwise 		; set up everything.
.20f8	d0 0f		bne $2109			bne 	_IFBAExit
.20fa					_IFBALoop:
.20fa	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.20fd	55 00		eor $00,x			eor 	IM0,x
.20ff	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2102	e8		inx				inx
.2103	c8		iny				iny
.2104	c0 03		cpy #$03			cpy 	#3
.2106	d0 f2		bne $20fa			bne 	_IFBALoop
.2108	18		clc				clc
.2109					_IFBAExit:
.2109	7a		ply				ply
.210a	60		rts				rts
.210b					IFPreProcessBitwise:
.210b	a0 00		ldy #$00			ldy 	#0 							; set index.
.210d	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.210f	15 03		ora $03,x			ora 	IExp,x
.2111	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2113	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2115	38		sec				sec 								; carry set just in cases.
.2116	60		rts				rts
.2117					IFloatAbsoluteR0:
.2117	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.2119	29 bf		and #$bf			and 	#IFSign ^ 255
.211b	85 0f		sta $0f				sta 	IFR0+IExp
.211d	18		clc				clc
.211e	60		rts				rts
.211f					IFloatSquareRootR0:
.211f	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.2121	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero
.2124	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.2126	29 40		and #$40			and 	#IFSign
.2128	d0 2f		bne $2159			bne 	_IFSRFail
.212a	20 0a 25	jsr $250a			jsr 	IFloatNormalise 			; it will work better !
.212d	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.212f	20 75 24	jsr $2475			jsr 	IFloatCopyToRegister
.2132	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2134	20 25 20	jsr $2025			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2137	18		clc				clc
.2138	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.213a	85 0f		sta $0f				sta 	IFR0+IExp
.213c	4a		lsr a				lsr 	a 							; which we can halve.
.213d	38		sec				sec 								; convert back
.213e	e9 17		sbc #$17			sbc 	#23
.2140	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2142	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.2144	20 5b 21	jsr $215b			jsr 	_IFSRNewton
.2147	20 5b 21	jsr $215b			jsr 	_IFSRNewton
.214a	20 5b 21	jsr $215b			jsr 	_IFSRNewton
.214d	20 5b 21	jsr $215b			jsr 	_IFSRNewton
.2150	18		clc				clc
.2151	60		rts				rts
.2152					_IFSRZero:
.2152	a2 0c		ldx #$0c			ldx 	#IFR0
.2154	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.2157	18		clc				clc
.2158	60		rts				rts
.2159					_IFSRFail:
.2159	38		sec				sec
.215a	60		rts				rts
.215b					_IFSRNewton:
.215b	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.215d	20 22 24	jsr $2422			jsr 	IFloatPushRx
.2160	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2162	20 22 24	jsr $2422			jsr 	IFloatPushRx
.2165	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.2167	20 f6 21	jsr $21f6			jsr 	IFloatDivideFloat
.216a	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.216c	20 43 24	jsr $2443			jsr 	IFloatPullRx
.216f	20 c9 1e	jsr $1ec9			jsr 	IFloatAdd 					; now guess + original/guess
.2172	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.2174	20 02 25	jsr $2502			jsr 	IFloatShiftRight
.2177	a2 10		ldx #$10			ldx 	#IFR1
.2179	20 43 24	jsr $2443			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.217c	60		rts				rts
.217d					IFloatFractionalR0:
.217d	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.217f	29 3f		and #$3f			and 	#IFXMask
.2181	f0 17		beq $219a			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2183	20 17 21	jsr $2117			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2186	a2 0c		ldx #$0c			ldx 	#IFR0
.2188	20 0a 25	jsr $250a			jsr 	IFloatNormalise 			; normalise R0
.218b	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.218d	20 75 24	jsr $2475			jsr 	IFloatCopyToRegister
.2190	20 d3 21	jsr $21d3			jsr 	IFloatIntegerR0 			; take integer part of R0
.2193	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.2195	20 c2 1e	jsr $1ec2			jsr 	IFloatSubtract
.2198	80 05		bra $219f			bra 	_FIPExit
.219a					_FIPZero:
.219a	a2 0c		ldx #$0c			ldx 	#IFR0
.219c	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.219f					_FIPExit:
.219f	18		clc				clc
.21a0	60		rts				rts
.21a1					IFloatCompare:
.21a1	20 c2 1e	jsr $1ec2			jsr 	IFloatSubtract 				; subtract R0 from RX.
.21a4	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.21a6	05 0f		ora $0f				ora 	IFR0+IExp
.21a8	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.21aa	29 3f		and #$3f			and 	#IFXMask
.21ac	d0 19		bne $21c7			bne 	_IFCNonInteger
.21ae	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero 			; check if zero
.21b1	f0 0f		beq $21c2			beq 	_IFCZero
.21b3					_IFCReturnSign:
.21b3	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.21b5	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.21b7	48		pha				pha
.21b8	a9 01		lda #$01			lda 	#1
.21ba	20 d5 24	jsr $24d5			jsr 	IFloatSetByte 				; return to +1
.21bd	68		pla				pla 								; sign bit back
.21be	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.21c0	18		clc				clc
.21c1	60		rts				rts
.21c2					_IFCZero:
.21c2	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.21c5	18		clc				clc
.21c6	60		rts				rts
.21c7					_IFCNonInteger:
.21c7	a5 0c		lda $0c				lda 	IFR0+IM0
.21c9	29 00		and #$00			and		#$00
.21cb	05 0d		ora $0d				ora 	IFR0+IM1
.21cd	05 0e		ora $0e				ora 	IFR0+IM2
.21cf	f0 f1		beq $21c2			beq 	_IFCZero 					; near enough !
.21d1	80 e0		bra $21b3			bra 	_IFCReturnSign 				; return the sign of the difference.
.21d3					IFloatIntegerR0:
.21d3	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.21d5	29 3f		and #$3f			and 	#IFXMask
.21d7	f0 1b		beq $21f4			beq 	_FIPExit 					; if so do nothing
.21d9	a2 0c		ldx #$0c			ldx 	#IFR0
.21db	20 0a 25	jsr $250a			jsr 	IFloatNormalise 			; normalise
.21de	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero 			; is it zero ?
.21e1	f0 0e		beq $21f1			beq 	_FIPZero 					; if so return zero.
.21e3					_FIPShift:
.21e3	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.21e5	29 20		and #$20			and 	#$20 						; still -ve
.21e7	f0 0b		beq $21f4			beq 	_FIPExit
.21e9	20 02 25	jsr $2502			jsr 	IFloatShiftRight 			; shift mantissa right
.21ec	20 2c 25	jsr $252c			jsr 	IFloatIncExponent 			; bump exponent
.21ef	80 f2		bra $21e3			bra 	_FIPShift
.21f1					_FIPZero:
.21f1	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.21f4					_FIPExit:
.21f4	18		clc				clc
.21f5	60		rts				rts
.21f6					IFloatDivideFloat:
.21f6	8e 4e 04	stx $044e			stx 	IFTarget  					; this is s1, s0 = R0
.21f9	20 2e 20	jsr $202e			jsr 	IFCalculateNewSign 			; calculate sign of result
.21fc	20 0a 25	jsr $250a			jsr 	IFloatNormalise 			; normalise RX
.21ff	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.2201	20 0a 25	jsr $250a			jsr 	IFloatNormalise
.2204	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero
.2207	f0 56		beq $225f			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2209	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.220b	20 25 20	jsr $2025			jsr 	IFMSignExtend
.220e	8d 4f 04	sta $044f			sta 	IFNewExponent
.2211	ae 4e 04	ldx $044e			ldx 	IFTarget 					; calculate s1.exponent
.2214	b5 03		lda $03,x			lda 	IExp,x
.2216	20 25 20	jsr $2025			jsr 	IFMSignExtend
.2219	38		sec				sec
.221a	ed 4f 04	sbc $044f			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.221d	38		sec				sec
.221e	e9 17		sbc #$17			sbc 	#23
.2220	8d 4f 04	sta $044f			sta 	IFNewExponent
.2223	20 61 22	jsr $2261			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2226	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.2228	10 08		bpl $2232			bpl 	_IFDFNoShiftResult
.222a	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.222c	20 02 25	jsr $2502			jsr 	IFloatShiftRight
.222f	ee 4f 04	inc $044f			inc 	IFNewExponent
.2232					_IFDFNoShiftResult:
.2232	ad 4f 04	lda $044f			lda 	IFNewExponent 				; underflow/overflow check.
.2235	30 06		bmi $223d			bmi 	_IFDFCheckUnderflow
.2237	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2239	b0 24		bcs $225f			bcs 	_IFDFDivZero
.223b	80 11		bra $224e			bra		_IFDFExit
.223d					_IFDFCheckUnderflow:
.223d	ad 4f 04	lda $044f			lda 	IFNewExponent 				; shift into a legal exponent.
.2240	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2242	b0 0a		bcs $224e			bcs 	_IFDFExit
.2244	ee 4f 04	inc $044f			inc 	IFNewExponent
.2247	a2 18		ldx #$18			ldx 	#IFRTemp
.2249	20 02 25	jsr $2502			jsr 	IFloatShiftRight
.224c	80 ef		bra $223d			bra 	_IFDFCheckUnderflow
.224e					_IFDFExit:
.224e	ad 4f 04	lda $044f			lda 	IFNewExponent 				; combine exponent and sign.
.2251	29 3f		and #$3f			and 	#IFXMask
.2253	0d 50 04	ora $0450			ora 	IFNewSign
.2256	85 1b		sta $1b				sta 	IFRTemp+IExp
.2258	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.225a	20 64 24	jsr $2464			jsr 	IFloatCopyFromRegister
.225d	18		clc				clc
.225e	60		rts				rts
.225f					_IFDFDivZero:
.225f	38		sec				sec
.2260	60		rts				rts
.2261					IFloatDivideSupport:
.2261	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.2263	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.2266	5a		phy				phy 								; main division loop x 23
.2267	a0 17		ldy #$17			ldy 	#23
.2269					_IFDSLoop:
.2269	20 9c 20	jsr $209c			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.226c	20 90 20	jsr $2090			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.226f	88		dey				dey
.2270	d0 f7		bne $2269			bne 	_IFDSLoop 					; do it 24 times
.2272	7a		ply				ply
.2273	60		rts				rts
.2274					IFloatIntegerToStringR0:
.2274	8d 51 04	sta $0451			sta 	IFBase 						; save base to use.
.2277	20 54 25	jsr $2554			jsr 	IFloatBufferReset			; empty buffer
.227a	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.227c	29 3f		and #$3f			and 	#IFXMask
.227e	d0 1e		bne $229e			bne 	_IFIFail
.2280	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.2282	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero
.2285	f0 0e		beq $2295			beq 	_IFINotNegative
.2287	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.2289	29 40		and #$40			and 	#IFSign
.228b	f0 08		beq $2295			beq 	_IFINotNegative
.228d	a9 2d		lda #$2d			lda 	#"-"						; output -
.228f	20 63 25	jsr $2563			jsr 	IFloatBufferWrite
.2292	20 de 24	jsr $24de			jsr 	IFloatNegate 				; tidy up !
.2295					_IFINotNegative:
.2295	20 a0 22	jsr $22a0			jsr 	_IFIRecursiveConvert 		; start converting
.2298	20 5b 25	jsr $255b			jsr 	IFloatGetBufferAddress
.229b	18		clc				clc
.229c	80 01		bra $229f			bra 	_IFIExit
.229e					_IFIFail:
.229e	38		sec				sec
.229f					_IFIExit:
.229f	60		rts				rts
.22a0					_IFIRecursiveConvert:
.22a0	a2 10		ldx #$10			ldx 	#IFR1
.22a2	20 75 24	jsr $2475			jsr 	IFloatCopyToRegister 		; R0->R1
.22a5	a2 0c		ldx #$0c			ldx 	#IFR0
.22a7	ad 51 04	lda $0451			lda 	IFBase 						; Base -> R0
.22aa	20 d5 24	jsr $24d5			jsr 	IFloatSetByte
.22ad	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.22af	20 38 20	jsr $2038			jsr 	IFloatDivideInteger
.22b2	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.22b4	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero
.22b7	f0 09		beq $22c2			beq 	_IFIOutDigit
.22b9	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.22bb	48		pha				pha
.22bc	20 a0 22	jsr $22a0			jsr 	_IFIRecursiveConvert 		; convert the divider
.22bf	68		pla				pla
.22c0	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.22c2					_IFIOutDigit:
.22c2	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.22c4	c9 0a		cmp #$0a			cmp	 	#10
.22c6	90 02		bcc $22ca			bcc 	_IFINotHex
.22c8	69 06		adc #$06			adc 	#6
.22ca					_IFINotHex:
.22ca	69 30		adc #$30			adc 	#48
.22cc	20 63 25	jsr $2563			jsr 	IFloatBufferWrite
.22cf	60		rts				rts
.0451					IFBase:
>0451							.fill 	1
.22d0					IFloatFloatToStringR0:
.22d0	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.22d2	20 22 24	jsr $2422			jsr 	IFloatPushRx
.22d5	20 75 24	jsr $2475			jsr 	IFloatCopyToRegister
.22d8	20 d3 21	jsr $21d3			jsr 	IFloatIntegerR0				; make R0 integer
.22db	a9 0a		lda #$0a			lda 	#10 						; base 10.
.22dd	20 74 22	jsr $2274			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.22e0	9c 52 04	stz $0452			stz 	IFloatDecimalCount 			; zero the decimal count.
.22e3	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.22e5	29 3f		and #$3f			and 	#IFXMask
.22e7	f0 44		beq $232d			beq 	_IFFSExit
.22e9					_IFloatFracLoop:
.22e9	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.22eb	20 64 24	jsr $2464			jsr 	IFloatCopyFromRegister
.22ee	20 7d 21	jsr $217d			jsr 	IFloatFractionalR0
.22f1	20 0a 25	jsr $250a			jsr 	IFloatNormalise
.22f4	a2 14		ldx #$14			ldx 	#IFR2
.22f6	20 75 24	jsr $2475			jsr 	IFloatCopyToRegister 		; copy to R2
.22f9	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.22fb	a9 0a		lda #$0a			lda 	#10
.22fd	20 d5 24	jsr $24d5			jsr 	IFloatSetByte
.2300	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.2302	20 73 1f	jsr $1f73			jsr 	IFloatMultiply
.2305	a2 14		ldx #$14			ldx 	#IFR2
.2307	20 75 24	jsr $2475			jsr 	IFloatCopyToRegister
.230a	20 d3 21	jsr $21d3			jsr 	IFloatIntegerR0 			; get integer part of R0
.230d	ad 52 04	lda $0452			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2310	c9 03		cmp #$03			cmp 	#3
.2312	f0 16		beq $232a			beq 	_IFFSExitStripZero
.2314	ad 52 04	lda $0452			lda 	IFloatDecimalCount 			; written the DP yet ?
.2317	d0 05		bne $231e			bne 	_IFloatNotFirst
.2319	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.231b	20 63 25	jsr $2563			jsr 	IFloatBufferWrite
.231e					_IFloatNotFirst:
.231e	ee 52 04	inc $0452			inc 	IFloatDecimalCount
.2321	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.2323	09 30		ora #$30			ora 	#"0"						; ASCII
.2325	20 63 25	jsr $2563			jsr 	IFloatBufferWrite 			; write to the buffer.
.2328	80 bf		bra $22e9			bra 	_IFloatFracLoop
.232a					_IFFSExitStripZero:
.232a	20 72 25	jsr $2572			jsr 	IFloatStripTrailingZeros
.232d					_IFFSExit:
.232d	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.232f	20 43 24	jsr $2443			jsr 	IFloatPullRx
.2332	20 5b 25	jsr $255b			jsr 	IFloatGetBufferAddress
.2335	18		clc				clc
.2336	60		rts				rts
.0452					IFloatDecimalCount:
>0452							.fill 	1
.2337					IFloatStringToFloatR0:
.2337	8d 53 04	sta $0453			sta 	IFCount 					; save it out.
.233a	86 0a		stx $0a				stx 	iTemp0
.233c	84 0b		sty $0b				sty 	iTemp0+1
.233e	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.2340	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.2343	9c 54 04	stz $0454			stz 	IFSignFlag 					; clear the sign flag
.2346	20 d3 23	jsr $23d3			jsr 	IFSTFGetNext 				; get first
.2349	f0 1b		beq $2366			beq 	_IFSTFFail 					; no character
.234b	90 10		bcc $235d			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.234d	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.234f	d0 15		bne $2366			bne 	_IFSTFFail
.2351	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2353	8d 54 04	sta $0454			sta 	IFSignFlag
.2356					_IFSTFLoop:
.2356	20 d3 23	jsr $23d3			jsr 	IFSTFGetNext 				; get next
.2359	b0 0b		bcs $2366			bcs 	_IFSTFFail 					; bad character.
.235b	f0 11		beq $236e			beq 	_IFSTFExit 					; end of data
.235d					_IFSTFHaveChar:
.235d	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.235f	f0 08		beq $2369			beq 	_IFSTFDecimal
.2361	20 f7 23	jsr $23f7			jsr 	IFSTFAddR0 					; add number in
.2364	80 f0		bra $2356			bra 	_IFSTFLoop 					; keep going until . or end.
.2366					_IFSTFFail:
.2366	38		sec				sec
.2367	80 0d		bra $2376			bra 	_IFSTFReturn
.2369					_IFSTFDecimal:
.2369	20 7e 23	jsr $237e			jsr 	IFSTFDecimal 				; call the decimal places code.
.236c	b0 08		bcs $2376			bcs 	_IFSTFReturn 				; error
.236e					_IFSTFExit:
.236e	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2370	0d 54 04	ora $0454			ora 	IFSignFlag
.2373	85 0f		sta $0f				sta 	IFR0+IExp
.2375	18		clc				clc
.2376					_IFSTFReturn:
.2376	60		rts				rts
.2377					IFloatAddDecimalToR0:
.2377	8d 53 04	sta $0453			sta 	IFCount 					; save it out.
.237a	86 0a		stx $0a				stx 	iTemp0
.237c	84 0b		sty $0b				sty 	iTemp0+1
.237e					IFSTFDecimal:
.237e	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2380	20 22 24	jsr $2422			jsr 	IFloatPushRx
.2383	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2385	20 d3 24	jsr $24d3			jsr 	IFloatSetZero
.2388	9c 55 04	stz $0455			stz 	IFDecimalPlaces
.238b					_IFSTDLoop:
.238b	20 d3 23	jsr $23d3			jsr 	IFSTFGetNext 				; get next
.238e	b0 41		bcs $23d1			bcs 	_IFSTFFail2 				; bad character.
.2390	f0 11		beq $23a3			beq 	_IFSTFComplete 				; end of data, work out the result.
.2392	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2394	f0 39		beq $23cf			beq 	_IFSTFExit2
.2396	20 f7 23	jsr $23f7			jsr 	IFSTFAddR0 					; add number in
.2399	ee 55 04	inc $0455			inc 	IFDecimalPlaces 			; count decimals
.239c	ad 55 04	lda $0455			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.239f	c9 03		cmp #$03			cmp 	#3
.23a1	90 e8		bcc $238b			bcc 	_IFSTDLoop
.23a3					_IFSTFComplete:
.23a3	ad 55 04	lda $0455			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.23a6	f0 27		beq $23cf			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.23a8	3a		dec a				dec 	a 							; table indexed from 1.
.23a9	0a		asl a				asl 	a
.23aa	0a		asl a				asl 	a
.23ab	aa		tax				tax
.23ac	bd 0e 24	lda $240e,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.23af	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.23b1	bd 0f 24	lda $240f,x			lda 	TableTen+1,x
.23b4	85 11		sta $11				sta  	IFR1+IM1
.23b6	bd 10 24	lda $2410,x			lda 	TableTen+2,x
.23b9	85 12		sta $12				sta  	IFR1+IM2
.23bb	bd 11 24	lda $2411,x			lda 	TableTen+3,x
.23be	85 13		sta $13				sta  	IFR1+IExp
.23c0	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.23c2	20 73 1f	jsr $1f73			jsr 	IFloatMultiply
.23c5	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.23c7	20 43 24	jsr $2443			jsr 	IFloatPullRx
.23ca	a2 10		ldx #$10			ldx 	#IFR1
.23cc	20 c9 1e	jsr $1ec9			jsr 	IFloatAdd
.23cf					_IFSTFExit2:
.23cf	18		clc				clc
.23d0	60		rts				rts
.23d1					_IFSTFFail2:
.23d1	38		sec				sec
.23d2	60		rts				rts
.23d3					IFSTFGetNext:
.23d3	ad 53 04	lda $0453			lda 	IFCount  					; if count is zero, return with Z set.
.23d6	f0 19		beq $23f1			beq 	_IFSTFReturnOk
.23d8	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.23da	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.23dc	d0 02		bne $23e0			bne 	_IFSTFGNNoCarry
.23de	e6 0b		inc $0b				inc 	iTemp0+1
.23e0					_IFSTFGNNoCarry:
.23e0	ce 53 04	dec $0453			dec 	IFCount 					; dec count.
.23e3	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.23e5	f0 08		beq $23ef			beq 	_IFSTFGOkay
.23e7	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.23e9	90 08		bcc $23f3			bcc 	_IFSTFGFail
.23eb	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.23ed	b0 04		bcs $23f3			bcs 	_IFSTFGFail
.23ef					_IFSTFGOkay:
.23ef	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.23f1					_IFSTFReturnOk:
.23f1	18		clc				clc
.23f2	60		rts				rts
.23f3					_IFSTFGFail:
.23f3	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.23f5	38		sec				sec
.23f6	60		rts				rts
.23f7					IFSTFAddR0:
.23f7	29 0f		and #$0f			and 	#15 						; to int value
.23f9	48		pha				pha 								; save it.
.23fa	a9 0a		lda #$0a			lda 	#10
.23fc	a2 10		ldx #$10			ldx 	#IFR1
.23fe	20 d5 24	jsr $24d5			jsr 	IFloatSetByte
.2401	20 73 1f	jsr $1f73			jsr 	IFloatMultiply
.2404	68		pla				pla
.2405	a2 10		ldx #$10			ldx 	#IFR1
.2407	20 d5 24	jsr $24d5			jsr 	IFloatSetByte
.240a	20 c9 1e	jsr $1ec9			jsr 	IFloatAdd
.240d	60		rts				rts
.0453					IFCount:
>0453							.fill 	1
.0454					IFSignFlag:
>0454							.fill 	1
.0455					IFDecimalPlaces:
>0455							.fill 	1
.240e					TableTen:
>240e	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2412	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2416	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>241a	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>241e	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2422					IFloatPushRx:
.2422	5a		phy				phy
.2423	ac 56 04	ldy $0456			ldy 	IFStackIndex
.2426	b5 00		lda $00,x			lda 	IM0,x
.2428	99 57 04	sta $0457,y			sta 	IFStack,y
.242b	b5 01		lda $01,x			lda 	IM1,x
.242d	99 58 04	sta $0458,y			sta 	IFStack+1,y
.2430	b5 02		lda $02,x			lda 	IM2,x
.2432	99 59 04	sta $0459,y			sta 	IFStack+2,y
.2435	b5 03		lda $03,x			lda 	IExp,x
.2437	99 5a 04	sta $045a,y			sta 	IFStack+3,y
.243a	c8		iny				iny
.243b	c8		iny				iny
.243c	c8		iny				iny
.243d	c8		iny				iny
.243e	8c 56 04	sty $0456			sty 	IFStackIndex
.2441	7a		ply				ply
.2442	60		rts				rts
.2443					IFloatPullRx:
.2443	5a		phy				phy
.2444	ac 56 04	ldy $0456			ldy 	IFStackIndex
.2447	88		dey				dey
.2448	88		dey				dey
.2449	88		dey				dey
.244a	88		dey				dey
.244b	b9 57 04	lda $0457,y			lda 	IFStack,y
.244e	95 00		sta $00,x			sta 	IM0,x
.2450	b9 58 04	lda $0458,y			lda 	IFStack+1,y
.2453	95 01		sta $01,x			sta 	IM1,x
.2455	b9 59 04	lda $0459,y			lda 	IFStack+2,y
.2458	95 02		sta $02,x			sta 	IM2,x
.245a	b9 5a 04	lda $045a,y			lda 	IFStack+3,y
.245d	95 03		sta $03,x			sta 	IExp,x
.245f	8c 56 04	sty $0456			sty 	IFStackIndex
.2462	7a		ply				ply
.2463	60		rts				rts
.0456					IFStackIndex:
>0456							.fill 	1
.0457					IFStack:
>0457							.fill 	16*4
.2464					IFloatCopyFromRegister:
.2464	b5 00		lda $00,x			lda 	0,x
.2466	85 0c		sta $0c				sta 	IFR0
.2468	b5 01		lda $01,x			lda 	1,x
.246a	85 0d		sta $0d				sta 	IFR0+1
.246c	b5 02		lda $02,x			lda 	2,x
.246e	85 0e		sta $0e				sta 	IFR0+2
.2470	b5 03		lda $03,x			lda 	3,x
.2472	85 0f		sta $0f				sta 	IFR0+3
.2474	60		rts				rts
.2475					IFloatCopyToRegister:
.2475	a5 0c		lda $0c				lda 	IFR0
.2477	95 00		sta $00,x			sta 	0,x
.2479	a5 0d		lda $0d				lda 	IFR0+1
.247b	95 01		sta $01,x			sta 	1,x
.247d	a5 0e		lda $0e				lda 	IFR0+2
.247f	95 02		sta $02,x			sta 	2,x
.2481	a5 0f		lda $0f				lda 	IFR0+3
.2483	95 03		sta $03,x			sta 	3,x
.2485	60		rts				rts
.2486					IFloatLoadInline:
.2486	68		pla				pla 								; pop address off to iTemp0
.2487	85 0a		sta $0a				sta 	iTemp0
.2489	68		pla				pla
.248a	85 0b		sta $0b				sta 	iTemp0+1
.248c	a0 01		ldy #$01			ldy 	#1
.248e	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2490	95 00		sta $00,x			sta 	0,x
.2492	c8		iny				iny
.2493	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.2495	95 01		sta $01,x			sta 	1,x
.2497	c8		iny				iny
.2498	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.249a	95 02		sta $02,x			sta 	2,x
.249c	c8		iny				iny
.249d	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.249f	95 03		sta $03,x			sta 	3,x
.24a1	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.24a2	a5 0a		lda $0a				lda 	iTemp0
.24a4	69 05		adc #$05			adc 	#5
.24a6	85 0a		sta $0a				sta 	iTemp0
.24a8	90 02		bcc $24ac			bcc 	_IFLINoCarry
.24aa	e6 0b		inc $0b				inc 	iTemp0+1
.24ac					_IFLINoCarry:
.24ac	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.24af					IFloatMultiply8BitRx:
.24af	5a		phy		        phy
.24b0	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.24b2	a4 0c		ldy $0c		        ldy     IFR0+IM0
.24b4	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.24b5	85 0c		sta $0c		        sta     IFR0+IM0
.24b7	84 0d		sty $0d		        sty     IFR0+IM1
.24b9	a9 00		lda #$00	        lda     #0
.24bb	a0 08		ldy #$08	        ldy     #8
.24bd					_IFMLoop:
.24bd	90 03		bcc $24c2	        bcc     _IFMNoAdd
.24bf	18		clc		        clc
.24c0	65 0d		adc $0d		        adc     IFR0+IM1
.24c2					_IFMNoAdd:
.24c2	6a		ror a		        ror     a
.24c3	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.24c5	88		dey		        dey
.24c6	d0 f5		bne $24bd	        bne     _IFMLoop
.24c8	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.24ca	7a		ply		        ply
.24cb	60		rts		        rts
.24cc					IFloatCheckZero:
.24cc	b5 00		lda $00,x			lda 	IM0,x
.24ce	15 01		ora $01,x			ora 	IM1,x
.24d0	15 02		ora $02,x			ora 	IM2,x
.24d2	60		rts				rts
.24d3					IFloatSetZero:
.24d3	a9 00		lda #$00			lda 	#0
.24d5					IFloatSetByte:
.24d5	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.24d7	74 01		stz $01,x			stz 	IM1,x
.24d9	74 02		stz $02,x			stz 	IM2,x
.24db	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.24dd	60		rts				rts
.24de					IFloatNegate:
.24de	b5 03		lda $03,x			lda 	IExp,x
.24e0	49 40		eor #$40			eor 	#IFSign
.24e2	95 03		sta $03,x			sta 	IExp,x
.24e4	18		clc				clc
.24e5	60		rts				rts
.24e6					IFloatMantissaNegate:
.24e6	38		sec				sec
.24e7	a9 00		lda #$00			lda 	#0
.24e9	f5 00		sbc $00,x			sbc 	IM0,x
.24eb	95 00		sta $00,x			sta 	IM0,x
.24ed	a9 00		lda #$00			lda 	#0
.24ef	f5 01		sbc $01,x			sbc 	IM1,x
.24f1	95 01		sta $01,x			sta 	IM1,x
.24f3	a9 00		lda #$00			lda 	#0
.24f5	f5 02		sbc $02,x			sbc 	IM2,x
.24f7	95 02		sta $02,x			sta 	IM2,x
.24f9	60		rts				rts
.24fa					IFloatShiftLeft:
.24fa	18		clc				clc
.24fb					IFloatRotateLeft:
.24fb	36 00		rol $00,x			rol 	IM0,x
.24fd	36 01		rol $01,x			rol 	IM1,x
.24ff	36 02		rol $02,x			rol 	IM2,x
.2501	60		rts				rts
.2502					IFloatShiftRight:
.2502	18		clc				clc
.2503					IFloatRotateRight:
.2503	76 02		ror $02,x			ror 	IM2,x
.2505	76 01		ror $01,x			ror 	IM1,x
.2507	76 00		ror $00,x			ror 	IM0,x
.2509	60		rts				rts
.250a					IFloatNormalise:
.250a	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero 			; is it zero
.250d	f0 18		beq $2527			beq 	_IFNExitZero 				; if so exit
.250f					_IFNLoop:
.250f	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2511	29 c0		and #$c0			and 	#$C0
.2513	c9 40		cmp #$40			cmp 	#$40
.2515	f0 13		beq $252a			beq 	_IFNExitOkay 				; if so , then we are done.
.2517	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2519	29 3f		and #$3f			and 	#$3F
.251b	c9 20		cmp #$20			cmp 	#$20
.251d	f0 0b		beq $252a			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.251f	20 40 25	jsr $2540			jsr 	IFloatDecExponent
.2522	20 fa 24	jsr $24fa			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2525	80 e8		bra $250f			bra 	_IFNLoop
.2527					_IFNExitZero:
.2527	20 d3 24	jsr $24d3			jsr 	IFloatSetZero 				; set the result to zero
.252a					_IFNExitOkay:
.252a	18		clc				clc  								; return with CC.
.252b	60		rts				rts
.252c					IFloatIncExponent:
.252c	b5 03		lda $03,x			lda 	IExp,x
.252e	48		pha				pha
.252f	29 c0		and #$c0			and 	#$C0
.2531	8d 97 04	sta $0497			sta 	IFXTemp
.2534	68		pla				pla
.2535	1a		inc a				inc 	a
.2536	29 3f		and #$3f			and 	#$3F
.2538	48		pha				pha
.2539	0d 97 04	ora $0497			ora 	IFXTemp
.253c	95 03		sta $03,x			sta 	IExp,x
.253e	68		pla				pla
.253f	60		rts				rts
.2540					IFloatDecExponent:
.2540	b5 03		lda $03,x			lda 	IExp,x
.2542	48		pha				pha
.2543	29 c0		and #$c0			and 	#$C0
.2545	8d 97 04	sta $0497			sta 	IFXTemp
.2548	68		pla				pla
.2549	3a		dec a				dec 	a
.254a	29 3f		and #$3f			and 	#$3F
.254c	48		pha				pha
.254d	0d 97 04	ora $0497			ora 	IFXTemp
.2550	95 03		sta $03,x			sta 	IExp,x
.2552	68		pla				pla
.2553	60		rts				rts
.0497					IFXTemp:
>0497							.fill 	1
.2554					IFloatBufferReset:
.2554	9c 98 04	stz $0498			stz 	IFBufferCount
.2557	9c 99 04	stz $0499			stz 	IFBuffer
.255a	60		rts				rts
.255b					IFloatGetBufferAddress:
.255b	a0 04		ldy #$04			ldy 	#(IFBuffer >> 8)
.255d	a2 99		ldx #$99			ldx 	#(IFBuffer & $FF)
.255f	ad 98 04	lda $0498			lda 	IFBufferCount
.2562	60		rts				rts
.2563					IFloatBufferWrite:
.2563	da		phx				phx
.2564	ae 98 04	ldx $0498			ldx 	IFBufferCount
.2567	9d 99 04	sta $0499,x			sta 	IFBuffer,x
.256a	9e 9a 04	stz $049a,x			stz 	IFBuffer+1,x
.256d	ee 98 04	inc $0498			inc 	IFBufferCount
.2570	fa		plx				plx
.2571	60		rts				rts
.2572					IFloatStripTrailingZeros:
.2572	ae 98 04	ldx $0498			ldx 	IFBufferCount
.2575	bd 98 04	lda $0498,x			lda 	IFBuffer-1,x
.2578	c9 30		cmp #$30			cmp		#"0"
.257a	d0 0f		bne $258b			bne 	_IFSTExit
.257c	bd 97 04	lda $0497,x			lda 	IFBuffer-2,x
.257f	c9 2e		cmp #$2e			cmp 	#"."
.2581	f0 08		beq $258b			beq 	_IFSTExit
.2583	ce 98 04	dec $0498			dec 	IFBufferCount
.2586	9e 98 04	stz $0498,x			stz 	IFBuffer-1,x
.2589	80 e7		bra $2572			bra 	IFloatStripTrailingZeros
.258b					_IFSTExit:
.258b	60		rts				rts
.0498					IFBufferCount:
>0498							.fill 	1
.0499					IFBuffer:
>0499							.fill 	25
.258c					IFloatCheck:
.258c	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.258e	09 40		ora #$40			ora 	#IFSign
.2590	85 0f		sta $0f				sta 	IFR0+IExp
.2592	20 c9 1e	jsr $1ec9			jsr 	IFloatAdd 					; add allowed to error.
.2595	a2 0c		ldx #$0c			ldx 	#IFR0
.2597	20 cc 24	jsr $24cc			jsr 	IFloatCheckZero 			; error if < 0
.259a	f0 06		beq $25a2			beq 	_IFAOkay
.259c	a5 0f		lda $0f				lda 	IFR0+IExp
.259e	29 40		and #$40			and 	#IFSign
.25a0	d0 01		bne $25a3			bne 	_IFAFail
.25a2					_IFAOkay:
.25a2	60		rts				rts
.25a3					_IFAFail:
.25a3	38		sec				sec
.25a4	68		pla				pla 								; get address - 2
.25a5	e9 02		sbc #$02			sbc 	#2
.25a7	aa		tax				tax
.25a8	68		pla				pla
.25a9	e9 00		sbc #$00			sbc 	#0
.25ab	a8		tay				tay
.25ac	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.25ae					_IFAStop:
>25ae	db						.byte 	$DB 						; display an error AA ADR ADR
.25af	80 fd		bra $25ae			bra 	_IFAStop

;******  Return to file: basic.asm

.25b1					NotImplemented:
.25b1	a9 ff		lda #$ff			lda 	#$FF
.25b3	80 04		bra $25b9			bra 	EnterDbg
.25b5					ErrorHandler:
.25b5	fa		plx				plx
.25b6	7a		ply				ply
.25b7	a9 ee		lda #$ee			lda 	#$EE
.25b9					EnterDbg:
>25b9	db						.byte 	$DB
.25ba	4c b9 25	jmp $25b9			jmp 	EnterDbg

;******  End of listing
