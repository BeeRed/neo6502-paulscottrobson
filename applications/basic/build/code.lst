
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$6000" -D "ENDMEMORY=\$B000" -D STACKPAGES=2 -D runEdit=1 -o build/basic.bin basic.asm
; Tue Jun  6 21:56:19 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$6000					BASICCODE=$6000
=$b000					ENDMEMORY=$B000
=2					STACKPAGES=2
=1					runEdit=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					rTemp1:
>000a							.fill 	2
.000c					iTemp0:
>000c							.fill 	2
.000e					IFR0:
>000e							.fill 	4
.0012					IFR1:
>0012							.fill 	4
.0016					IFR2:
>0016							.fill 	4
.001a					IFRTemp:
>001a							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 b0		ldy #$b0			ldy 	#ENDMEMORY >> 8
.1004	20 0a 3e	jsr $3e0a			jsr 	PGMSetBaseAddress
.1007	20 05 49	jsr $4905			jsr 	IFInitialise 				; setup math library
.100a	4c 0d 10	jmp $100d			jmp 	TestCode

;******  Processing file: src/program/testing/testing.asmx

.100d					TestCode:
.100d	20 11 3e	jsr $3e11			jsr 	PGMNewProgram
.1010	9c ff ff	stz $ffff			stz 	$FFFF

;******  Processing file: src/program/testing/testrun.incx

.1013	a2 5e		ldx #$5e		ldx #Line0 & $FF
.1015	a0 13		ldy #$13		ldy #Line0 >> 8
.1017	20 19 30	jsr $3019		jsr TOKOneLine
.101a	a2 98		ldx #$98		ldx #Line1 & $FF
.101c	a0 13		ldy #$13		ldy #Line1 >> 8
.101e	20 19 30	jsr $3019		jsr TOKOneLine
.1021	a2 d0		ldx #$d0		ldx #Line2 & $FF
.1023	a0 13		ldy #$13		ldy #Line2 >> 8
.1025	20 19 30	jsr $3019		jsr TOKOneLine
.1028	a2 50		ldx #$50		ldx #Line3 & $FF
.102a	a0 14		ldy #$14		ldy #Line3 >> 8
.102c	20 19 30	jsr $3019		jsr TOKOneLine
.102f	a2 cb		ldx #$cb		ldx #Line4 & $FF
.1031	a0 14		ldy #$14		ldy #Line4 >> 8
.1033	20 19 30	jsr $3019		jsr TOKOneLine
.1036	a2 2d		ldx #$2d		ldx #Line5 & $FF
.1038	a0 15		ldy #$15		ldy #Line5 >> 8
.103a	20 19 30	jsr $3019		jsr TOKOneLine
.103d	a2 71		ldx #$71		ldx #Line6 & $FF
.103f	a0 15		ldy #$15		ldy #Line6 >> 8
.1041	20 19 30	jsr $3019		jsr TOKOneLine
.1044	a2 75		ldx #$75		ldx #Line7 & $FF
.1046	a0 15		ldy #$15		ldy #Line7 >> 8
.1048	20 19 30	jsr $3019		jsr TOKOneLine
.104b	a2 cb		ldx #$cb		ldx #Line8 & $FF
.104d	a0 15		ldy #$15		ldy #Line8 >> 8
.104f	20 19 30	jsr $3019		jsr TOKOneLine
.1052	a2 f1		ldx #$f1		ldx #Line9 & $FF
.1054	a0 15		ldy #$15		ldy #Line9 >> 8
.1056	20 19 30	jsr $3019		jsr TOKOneLine
.1059	a2 65		ldx #$65		ldx #Line10 & $FF
.105b	a0 16		ldy #$16		ldy #Line10 >> 8
.105d	20 19 30	jsr $3019		jsr TOKOneLine
.1060	a2 69		ldx #$69		ldx #Line11 & $FF
.1062	a0 16		ldy #$16		ldy #Line11 >> 8
.1064	20 19 30	jsr $3019		jsr TOKOneLine
.1067	a2 6d		ldx #$6d		ldx #Line12 & $FF
.1069	a0 16		ldy #$16		ldy #Line12 >> 8
.106b	20 19 30	jsr $3019		jsr TOKOneLine
.106e	a2 98		ldx #$98		ldx #Line13 & $FF
.1070	a0 16		ldy #$16		ldy #Line13 >> 8
.1072	20 19 30	jsr $3019		jsr TOKOneLine
.1075	a2 f0		ldx #$f0		ldx #Line14 & $FF
.1077	a0 16		ldy #$16		ldy #Line14 >> 8
.1079	20 19 30	jsr $3019		jsr TOKOneLine
.107c	a2 f5		ldx #$f5		ldx #Line15 & $FF
.107e	a0 16		ldy #$16		ldy #Line15 >> 8
.1080	20 19 30	jsr $3019		jsr TOKOneLine
.1083	a2 28		ldx #$28		ldx #Line16 & $FF
.1085	a0 17		ldy #$17		ldy #Line16 >> 8
.1087	20 19 30	jsr $3019		jsr TOKOneLine
.108a	a2 7a		ldx #$7a		ldx #Line17 & $FF
.108c	a0 17		ldy #$17		ldy #Line17 >> 8
.108e	20 19 30	jsr $3019		jsr TOKOneLine
.1091	a2 a2		ldx #$a2		ldx #Line18 & $FF
.1093	a0 17		ldy #$17		ldy #Line18 >> 8
.1095	20 19 30	jsr $3019		jsr TOKOneLine
.1098	a2 e6		ldx #$e6		ldx #Line19 & $FF
.109a	a0 17		ldy #$17		ldy #Line19 >> 8
.109c	20 19 30	jsr $3019		jsr TOKOneLine
.109f	a2 61		ldx #$61		ldx #Line20 & $FF
.10a1	a0 18		ldy #$18		ldy #Line20 >> 8
.10a3	20 19 30	jsr $3019		jsr TOKOneLine
.10a6	a2 a6		ldx #$a6		ldx #Line21 & $FF
.10a8	a0 18		ldy #$18		ldy #Line21 >> 8
.10aa	20 19 30	jsr $3019		jsr TOKOneLine
.10ad	a2 ba		ldx #$ba		ldx #Line22 & $FF
.10af	a0 18		ldy #$18		ldy #Line22 >> 8
.10b1	20 19 30	jsr $3019		jsr TOKOneLine
.10b4	a2 05		ldx #$05		ldx #Line23 & $FF
.10b6	a0 19		ldy #$19		ldy #Line23 >> 8
.10b8	20 19 30	jsr $3019		jsr TOKOneLine
.10bb	a2 29		ldx #$29		ldx #Line24 & $FF
.10bd	a0 19		ldy #$19		ldy #Line24 >> 8
.10bf	20 19 30	jsr $3019		jsr TOKOneLine
.10c2	a2 64		ldx #$64		ldx #Line25 & $FF
.10c4	a0 19		ldy #$19		ldy #Line25 >> 8
.10c6	20 19 30	jsr $3019		jsr TOKOneLine
.10c9	a2 dc		ldx #$dc		ldx #Line26 & $FF
.10cb	a0 19		ldy #$19		ldy #Line26 >> 8
.10cd	20 19 30	jsr $3019		jsr TOKOneLine
.10d0	a2 02		ldx #$02		ldx #Line27 & $FF
.10d2	a0 1a		ldy #$1a		ldy #Line27 >> 8
.10d4	20 19 30	jsr $3019		jsr TOKOneLine
.10d7	a2 5f		ldx #$5f		ldx #Line28 & $FF
.10d9	a0 1a		ldy #$1a		ldy #Line28 >> 8
.10db	20 19 30	jsr $3019		jsr TOKOneLine
.10de	a2 7f		ldx #$7f		ldx #Line29 & $FF
.10e0	a0 1a		ldy #$1a		ldy #Line29 >> 8
.10e2	20 19 30	jsr $3019		jsr TOKOneLine
.10e5	a2 83		ldx #$83		ldx #Line30 & $FF
.10e7	a0 1a		ldy #$1a		ldy #Line30 >> 8
.10e9	20 19 30	jsr $3019		jsr TOKOneLine
.10ec	a2 cc		ldx #$cc		ldx #Line31 & $FF
.10ee	a0 1a		ldy #$1a		ldy #Line31 >> 8
.10f0	20 19 30	jsr $3019		jsr TOKOneLine
.10f3	a2 4b		ldx #$4b		ldx #Line32 & $FF
.10f5	a0 1b		ldy #$1b		ldy #Line32 >> 8
.10f7	20 19 30	jsr $3019		jsr TOKOneLine
.10fa	a2 56		ldx #$56		ldx #Line33 & $FF
.10fc	a0 1b		ldy #$1b		ldy #Line33 >> 8
.10fe	20 19 30	jsr $3019		jsr TOKOneLine
.1101	a2 69		ldx #$69		ldx #Line34 & $FF
.1103	a0 1b		ldy #$1b		ldy #Line34 >> 8
.1105	20 19 30	jsr $3019		jsr TOKOneLine
.1108	a2 be		ldx #$be		ldx #Line35 & $FF
.110a	a0 1b		ldy #$1b		ldy #Line35 >> 8
.110c	20 19 30	jsr $3019		jsr TOKOneLine
.110f	a2 d6		ldx #$d6		ldx #Line36 & $FF
.1111	a0 1b		ldy #$1b		ldy #Line36 >> 8
.1113	20 19 30	jsr $3019		jsr TOKOneLine
.1116	a2 da		ldx #$da		ldx #Line37 & $FF
.1118	a0 1b		ldy #$1b		ldy #Line37 >> 8
.111a	20 19 30	jsr $3019		jsr TOKOneLine
.111d	a2 31		ldx #$31		ldx #Line38 & $FF
.111f	a0 1c		ldy #$1c		ldy #Line38 >> 8
.1121	20 19 30	jsr $3019		jsr TOKOneLine
.1124	a2 92		ldx #$92		ldx #Line39 & $FF
.1126	a0 1c		ldy #$1c		ldy #Line39 >> 8
.1128	20 19 30	jsr $3019		jsr TOKOneLine
.112b	a2 aa		ldx #$aa		ldx #Line40 & $FF
.112d	a0 1c		ldy #$1c		ldy #Line40 >> 8
.112f	20 19 30	jsr $3019		jsr TOKOneLine
.1132	a2 ae		ldx #$ae		ldx #Line41 & $FF
.1134	a0 1c		ldy #$1c		ldy #Line41 >> 8
.1136	20 19 30	jsr $3019		jsr TOKOneLine
.1139	a2 09		ldx #$09		ldx #Line42 & $FF
.113b	a0 1d		ldy #$1d		ldy #Line42 >> 8
.113d	20 19 30	jsr $3019		jsr TOKOneLine
.1140	a2 67		ldx #$67		ldx #Line43 & $FF
.1142	a0 1d		ldy #$1d		ldy #Line43 >> 8
.1144	20 19 30	jsr $3019		jsr TOKOneLine
.1147	a2 6c		ldx #$6c		ldx #Line44 & $FF
.1149	a0 1d		ldy #$1d		ldy #Line44 >> 8
.114b	20 19 30	jsr $3019		jsr TOKOneLine
.114e	a2 7a		ldx #$7a		ldx #Line45 & $FF
.1150	a0 1d		ldy #$1d		ldy #Line45 >> 8
.1152	20 19 30	jsr $3019		jsr TOKOneLine
.1155	a2 8d		ldx #$8d		ldx #Line46 & $FF
.1157	a0 1d		ldy #$1d		ldy #Line46 >> 8
.1159	20 19 30	jsr $3019		jsr TOKOneLine
.115c	a2 c9		ldx #$c9		ldx #Line47 & $FF
.115e	a0 1d		ldy #$1d		ldy #Line47 >> 8
.1160	20 19 30	jsr $3019		jsr TOKOneLine
.1163	a2 34		ldx #$34		ldx #Line48 & $FF
.1165	a0 1e		ldy #$1e		ldy #Line48 >> 8
.1167	20 19 30	jsr $3019		jsr TOKOneLine
.116a	a2 38		ldx #$38		ldx #Line49 & $FF
.116c	a0 1e		ldy #$1e		ldy #Line49 >> 8
.116e	20 19 30	jsr $3019		jsr TOKOneLine
.1171	a2 6b		ldx #$6b		ldx #Line50 & $FF
.1173	a0 1e		ldy #$1e		ldy #Line50 >> 8
.1175	20 19 30	jsr $3019		jsr TOKOneLine
.1178	a2 a5		ldx #$a5		ldx #Line51 & $FF
.117a	a0 1e		ldy #$1e		ldy #Line51 >> 8
.117c	20 19 30	jsr $3019		jsr TOKOneLine
.117f	a2 f0		ldx #$f0		ldx #Line52 & $FF
.1181	a0 1e		ldy #$1e		ldy #Line52 >> 8
.1183	20 19 30	jsr $3019		jsr TOKOneLine
.1186	a2 2e		ldx #$2e		ldx #Line53 & $FF
.1188	a0 1f		ldy #$1f		ldy #Line53 >> 8
.118a	20 19 30	jsr $3019		jsr TOKOneLine
.118d	a2 6f		ldx #$6f		ldx #Line54 & $FF
.118f	a0 1f		ldy #$1f		ldy #Line54 >> 8
.1191	20 19 30	jsr $3019		jsr TOKOneLine
.1194	a2 85		ldx #$85		ldx #Line55 & $FF
.1196	a0 1f		ldy #$1f		ldy #Line55 >> 8
.1198	20 19 30	jsr $3019		jsr TOKOneLine
.119b	a2 e2		ldx #$e2		ldx #Line56 & $FF
.119d	a0 1f		ldy #$1f		ldy #Line56 >> 8
.119f	20 19 30	jsr $3019		jsr TOKOneLine
.11a2	a2 f7		ldx #$f7		ldx #Line57 & $FF
.11a4	a0 1f		ldy #$1f		ldy #Line57 >> 8
.11a6	20 19 30	jsr $3019		jsr TOKOneLine
.11a9	a2 3c		ldx #$3c		ldx #Line58 & $FF
.11ab	a0 20		ldy #$20		ldy #Line58 >> 8
.11ad	20 19 30	jsr $3019		jsr TOKOneLine
.11b0	a2 c1		ldx #$c1		ldx #Line59 & $FF
.11b2	a0 20		ldy #$20		ldy #Line59 >> 8
.11b4	20 19 30	jsr $3019		jsr TOKOneLine
.11b7	a2 03		ldx #$03		ldx #Line60 & $FF
.11b9	a0 21		ldy #$21		ldy #Line60 >> 8
.11bb	20 19 30	jsr $3019		jsr TOKOneLine
.11be	a2 0c		ldx #$0c		ldx #Line61 & $FF
.11c0	a0 21		ldy #$21		ldy #Line61 >> 8
.11c2	20 19 30	jsr $3019		jsr TOKOneLine
.11c5	a2 36		ldx #$36		ldx #Line62 & $FF
.11c7	a0 21		ldy #$21		ldy #Line62 >> 8
.11c9	20 19 30	jsr $3019		jsr TOKOneLine
.11cc	a2 58		ldx #$58		ldx #Line63 & $FF
.11ce	a0 21		ldy #$21		ldy #Line63 >> 8
.11d0	20 19 30	jsr $3019		jsr TOKOneLine
.11d3	a2 8c		ldx #$8c		ldx #Line64 & $FF
.11d5	a0 21		ldy #$21		ldy #Line64 >> 8
.11d7	20 19 30	jsr $3019		jsr TOKOneLine
.11da	a2 b9		ldx #$b9		ldx #Line65 & $FF
.11dc	a0 21		ldy #$21		ldy #Line65 >> 8
.11de	20 19 30	jsr $3019		jsr TOKOneLine
.11e1	a2 da		ldx #$da		ldx #Line66 & $FF
.11e3	a0 21		ldy #$21		ldy #Line66 >> 8
.11e5	20 19 30	jsr $3019		jsr TOKOneLine
.11e8	a2 23		ldx #$23		ldx #Line67 & $FF
.11ea	a0 22		ldy #$22		ldy #Line67 >> 8
.11ec	20 19 30	jsr $3019		jsr TOKOneLine
.11ef	a2 8a		ldx #$8a		ldx #Line68 & $FF
.11f1	a0 22		ldy #$22		ldy #Line68 >> 8
.11f3	20 19 30	jsr $3019		jsr TOKOneLine
.11f6	a2 b5		ldx #$b5		ldx #Line69 & $FF
.11f8	a0 22		ldy #$22		ldy #Line69 >> 8
.11fa	20 19 30	jsr $3019		jsr TOKOneLine
.11fd	a2 ef		ldx #$ef		ldx #Line70 & $FF
.11ff	a0 22		ldy #$22		ldy #Line70 >> 8
.1201	20 19 30	jsr $3019		jsr TOKOneLine
.1204	a2 ff		ldx #$ff		ldx #Line71 & $FF
.1206	a0 22		ldy #$22		ldy #Line71 >> 8
.1208	20 19 30	jsr $3019		jsr TOKOneLine
.120b	a2 75		ldx #$75		ldx #Line72 & $FF
.120d	a0 23		ldy #$23		ldy #Line72 >> 8
.120f	20 19 30	jsr $3019		jsr TOKOneLine
.1212	a2 cf		ldx #$cf		ldx #Line73 & $FF
.1214	a0 23		ldy #$23		ldy #Line73 >> 8
.1216	20 19 30	jsr $3019		jsr TOKOneLine
.1219	a2 16		ldx #$16		ldx #Line74 & $FF
.121b	a0 24		ldy #$24		ldy #Line74 >> 8
.121d	20 19 30	jsr $3019		jsr TOKOneLine
.1220	a2 43		ldx #$43		ldx #Line75 & $FF
.1222	a0 24		ldy #$24		ldy #Line75 >> 8
.1224	20 19 30	jsr $3019		jsr TOKOneLine
.1227	a2 af		ldx #$af		ldx #Line76 & $FF
.1229	a0 24		ldy #$24		ldy #Line76 >> 8
.122b	20 19 30	jsr $3019		jsr TOKOneLine
.122e	a2 b3		ldx #$b3		ldx #Line77 & $FF
.1230	a0 24		ldy #$24		ldy #Line77 >> 8
.1232	20 19 30	jsr $3019		jsr TOKOneLine
.1235	a2 2b		ldx #$2b		ldx #Line78 & $FF
.1237	a0 25		ldy #$25		ldy #Line78 >> 8
.1239	20 19 30	jsr $3019		jsr TOKOneLine
.123c	a2 53		ldx #$53		ldx #Line79 & $FF
.123e	a0 25		ldy #$25		ldy #Line79 >> 8
.1240	20 19 30	jsr $3019		jsr TOKOneLine
.1243	a2 7c		ldx #$7c		ldx #Line80 & $FF
.1245	a0 25		ldy #$25		ldy #Line80 >> 8
.1247	20 19 30	jsr $3019		jsr TOKOneLine
.124a	a2 cb		ldx #$cb		ldx #Line81 & $FF
.124c	a0 25		ldy #$25		ldy #Line81 >> 8
.124e	20 19 30	jsr $3019		jsr TOKOneLine
.1251	a2 fb		ldx #$fb		ldx #Line82 & $FF
.1253	a0 25		ldy #$25		ldy #Line82 >> 8
.1255	20 19 30	jsr $3019		jsr TOKOneLine
.1258	a2 49		ldx #$49		ldx #Line83 & $FF
.125a	a0 26		ldy #$26		ldy #Line83 >> 8
.125c	20 19 30	jsr $3019		jsr TOKOneLine
.125f	a2 c1		ldx #$c1		ldx #Line84 & $FF
.1261	a0 26		ldy #$26		ldy #Line84 >> 8
.1263	20 19 30	jsr $3019		jsr TOKOneLine
.1266	a2 02		ldx #$02		ldx #Line85 & $FF
.1268	a0 27		ldy #$27		ldy #Line85 >> 8
.126a	20 19 30	jsr $3019		jsr TOKOneLine
.126d	a2 68		ldx #$68		ldx #Line86 & $FF
.126f	a0 27		ldy #$27		ldy #Line86 >> 8
.1271	20 19 30	jsr $3019		jsr TOKOneLine
.1274	a2 7b		ldx #$7b		ldx #Line87 & $FF
.1276	a0 27		ldy #$27		ldy #Line87 >> 8
.1278	20 19 30	jsr $3019		jsr TOKOneLine
.127b	a2 7f		ldx #$7f		ldx #Line88 & $FF
.127d	a0 27		ldy #$27		ldy #Line88 >> 8
.127f	20 19 30	jsr $3019		jsr TOKOneLine
.1282	a2 b4		ldx #$b4		ldx #Line89 & $FF
.1284	a0 27		ldy #$27		ldy #Line89 >> 8
.1286	20 19 30	jsr $3019		jsr TOKOneLine
.1289	a2 31		ldx #$31		ldx #Line90 & $FF
.128b	a0 28		ldy #$28		ldy #Line90 >> 8
.128d	20 19 30	jsr $3019		jsr TOKOneLine
.1290	a2 76		ldx #$76		ldx #Line91 & $FF
.1292	a0 28		ldy #$28		ldy #Line91 >> 8
.1294	20 19 30	jsr $3019		jsr TOKOneLine
.1297	a2 b3		ldx #$b3		ldx #Line92 & $FF
.1299	a0 28		ldy #$28		ldy #Line92 >> 8
.129b	20 19 30	jsr $3019		jsr TOKOneLine
.129e	a2 fa		ldx #$fa		ldx #Line93 & $FF
.12a0	a0 28		ldy #$28		ldy #Line93 >> 8
.12a2	20 19 30	jsr $3019		jsr TOKOneLine
.12a5	a2 70		ldx #$70		ldx #Line94 & $FF
.12a7	a0 29		ldy #$29		ldy #Line94 >> 8
.12a9	20 19 30	jsr $3019		jsr TOKOneLine
.12ac	a2 75		ldx #$75		ldx #Line95 & $FF
.12ae	a0 29		ldy #$29		ldy #Line95 >> 8
.12b0	20 19 30	jsr $3019		jsr TOKOneLine
.12b3	a2 f5		ldx #$f5		ldx #Line96 & $FF
.12b5	a0 29		ldy #$29		ldy #Line96 >> 8
.12b7	20 19 30	jsr $3019		jsr TOKOneLine
.12ba	a2 fa		ldx #$fa		ldx #Line97 & $FF
.12bc	a0 29		ldy #$29		ldy #Line97 >> 8
.12be	20 19 30	jsr $3019		jsr TOKOneLine
.12c1	a2 96		ldx #$96		ldx #Line98 & $FF
.12c3	a0 2a		ldy #$2a		ldy #Line98 >> 8
.12c5	20 19 30	jsr $3019		jsr TOKOneLine
.12c8	a2 d8		ldx #$d8		ldx #Line99 & $FF
.12ca	a0 2a		ldy #$2a		ldy #Line99 >> 8
.12cc	20 19 30	jsr $3019		jsr TOKOneLine
.12cf	a2 65		ldx #$65		ldx #Line100 & $FF
.12d1	a0 2b		ldy #$2b		ldy #Line100 >> 8
.12d3	20 19 30	jsr $3019		jsr TOKOneLine
.12d6	a2 df		ldx #$df		ldx #Line101 & $FF
.12d8	a0 2b		ldy #$2b		ldy #Line101 >> 8
.12da	20 19 30	jsr $3019		jsr TOKOneLine
.12dd	a2 39		ldx #$39		ldx #Line102 & $FF
.12df	a0 2c		ldy #$2c		ldy #Line102 >> 8
.12e1	20 19 30	jsr $3019		jsr TOKOneLine
.12e4	a2 7a		ldx #$7a		ldx #Line103 & $FF
.12e6	a0 2c		ldy #$2c		ldy #Line103 >> 8
.12e8	20 19 30	jsr $3019		jsr TOKOneLine
.12eb	a2 c4		ldx #$c4		ldx #Line104 & $FF
.12ed	a0 2c		ldy #$2c		ldy #Line104 >> 8
.12ef	20 19 30	jsr $3019		jsr TOKOneLine
.12f2	a2 08		ldx #$08		ldx #Line105 & $FF
.12f4	a0 2d		ldy #$2d		ldy #Line105 >> 8
.12f6	20 19 30	jsr $3019		jsr TOKOneLine
.12f9	a2 0c		ldx #$0c		ldx #Line106 & $FF
.12fb	a0 2d		ldy #$2d		ldy #Line106 >> 8
.12fd	20 19 30	jsr $3019		jsr TOKOneLine
.1300	a2 69		ldx #$69		ldx #Line107 & $FF
.1302	a0 2d		ldy #$2d		ldy #Line107 >> 8
.1304	20 19 30	jsr $3019		jsr TOKOneLine
.1307	a2 cb		ldx #$cb		ldx #Line108 & $FF
.1309	a0 2d		ldy #$2d		ldy #Line108 >> 8
.130b	20 19 30	jsr $3019		jsr TOKOneLine
.130e	a2 e9		ldx #$e9		ldx #Line109 & $FF
.1310	a0 2d		ldy #$2d		ldy #Line109 >> 8
.1312	20 19 30	jsr $3019		jsr TOKOneLine
.1315	a2 3a		ldx #$3a		ldx #Line110 & $FF
.1317	a0 2e		ldy #$2e		ldy #Line110 >> 8
.1319	20 19 30	jsr $3019		jsr TOKOneLine
.131c	a2 3f		ldx #$3f		ldx #Line111 & $FF
.131e	a0 2e		ldy #$2e		ldy #Line111 >> 8
.1320	20 19 30	jsr $3019		jsr TOKOneLine
.1323	a2 6f		ldx #$6f		ldx #Line112 & $FF
.1325	a0 2e		ldy #$2e		ldy #Line112 >> 8
.1327	20 19 30	jsr $3019		jsr TOKOneLine
.132a	a2 a7		ldx #$a7		ldx #Line113 & $FF
.132c	a0 2e		ldy #$2e		ldy #Line113 >> 8
.132e	20 19 30	jsr $3019		jsr TOKOneLine
.1331	a2 0c		ldx #$0c		ldx #Line114 & $FF
.1333	a0 2f		ldy #$2f		ldy #Line114 >> 8
.1335	20 19 30	jsr $3019		jsr TOKOneLine
.1338	a2 10		ldx #$10		ldx #Line115 & $FF
.133a	a0 2f		ldy #$2f		ldy #Line115 >> 8
.133c	20 19 30	jsr $3019		jsr TOKOneLine
.133f	a2 3d		ldx #$3d		ldx #Line116 & $FF
.1341	a0 2f		ldy #$2f		ldy #Line116 >> 8
.1343	20 19 30	jsr $3019		jsr TOKOneLine
.1346	a2 41		ldx #$41		ldx #Line117 & $FF
.1348	a0 2f		ldy #$2f		ldy #Line117 >> 8
.134a	20 19 30	jsr $3019		jsr TOKOneLine
.134d	a2 94		ldx #$94		ldx #Line118 & $FF
.134f	a0 2f		ldy #$2f		ldy #Line118 >> 8
.1351	20 19 30	jsr $3019		jsr TOKOneLine
.1354	a2 e4		ldx #$e4		ldx #Line119 & $FF
.1356	a0 2f		ldy #$2f		ldy #Line119 >> 8
.1358	20 19 30	jsr $3019		jsr TOKOneLine

;******  Return to file: src/program/testing/testing.asmx

.135b	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Processing file: src/program/testing/testdat.incx

.135e					Line0:
>135e	36 34 33 20 4e 37 52 20			.text '643 N7R N7R""REM 403)6.75"KYZVOGXF" "YRIWRLRH"1.48+U8L3 )',0
>1366	4e 37 52 22 22 52 45 4d 20 34 30 33 29 36 2e 37
>1376	35 22 4b 59 5a 56 4f 47 58 46 22 20 22 59 52 49
>1386	57 52 4c 52 48 22 31 2e 34 38 2b 55 38 4c 33 20
>1396	29 00
.1398					Line1:
>1398	31 30 38 33 20 31 33 37			.text '1083 1373 AND /G8N1O6-1.39 Y9T 7.93 S AND L0$ -2.28 713',0
>13a0	33 20 41 4e 44 20 2f 47 38 4e 31 4f 36 2d 31 2e
>13b0	33 39 20 59 39 54 20 37 2e 39 33 20 53 20 41 4e
>13c0	44 20 4c 30 24 20 2d 32 2e 32 38 20 37 31 33 00
.13d0					Line2:
>13d0	31 32 31 33 20 20 22 42			.text '1213  "BSTESBCC""B"0.4 543 9.88 R7F0V 9.01 Z1-2.21"OQ"-8.98 263 X STEP "D"ABS(> 473-3.45 203 913 923 5.82 853 THEN 943 T5O$7.36',0
>13d8	53 54 45 53 42 43 43 22 22 42 22 30 2e 34 20 35
>13e8	34 33 20 39 2e 38 38 20 52 37 46 30 56 20 39 2e
>13f8	30 31 20 5a 31 2d 32 2e 32 31 22 4f 51 22 2d 38
>1408	2e 39 38 20 32 36 33 20 58 20 53 54 45 50 20 22
>1418	44 22 41 42 53 28 3e 20 34 37 33 2d 33 2e 34 35
>1428	20 32 30 33 20 39 31 33 20 39 32 33 20 35 2e 38
>1438	32 20 38 35 33 20 54 48 45 4e 20 39 34 33 20 54
>1448	35 4f 24 37 2e 33 36 00
.1450					Line3:
>1450	36 38 33 20 3c 52 2d 37			.text '683 <R-7.49 DIV ELSE 923 C5 ASC("RDUUSFL"K6Y0D$* 833 STR$( H1R8X5/-8.59 +>1223 LOOP-3.0"ZJUKN"T 473 413 U0X9E$ A6Z0E0<6.61',0
>1458	2e 34 39 20 44 49 56 20 45 4c 53 45 20 39 32 33
>1468	20 43 35 20 41 53 43 28 22 52 44 55 55 53 46 4c
>1478	22 4b 36 59 30 44 24 2a 20 38 33 33 20 53 54 52
>1488	24 28 20 48 31 52 38 58 35 2f 2d 38 2e 35 39 20
>1498	2b 3e 31 32 32 33 20 4c 4f 4f 50 2d 33 2e 30 22
>14a8	5a 4a 55 4b 4e 22 54 20 34 37 33 20 34 31 33 20
>14b8	55 30 58 39 45 24 20 41 36 5a 30 45 30 3c 36 2e
>14c8	36 31 00
.14cb					Line4:
>14cb	33 32 33 20 59 32 46 35			.text '323 Y2F5$""303-2.39 763 U9A5- "DZMGSN"-4.81 1333-3.39 483 0.57-8.5 ) )1123 J3Q2 "@PVLY") 1333 383',0
>14d3	24 22 22 33 30 33 2d 32 2e 33 39 20 37 36 33 20
>14e3	55 39 41 35 2d 20 22 44 5a 4d 47 53 4e 22 2d 34
>14f3	2e 38 31 20 31 33 33 33 2d 33 2e 33 39 20 34 38
>1503	33 20 30 2e 35 37 2d 38 2e 35 20 29 20 29 31 31
>1513	32 33 20 4a 33 51 32 20 22 40 50 56 4c 59 22 29
>1523	20 31 33 33 33 20 33 38 33 00
.152d					Line5:
>152d	33 35 33 20 20 2b 20 31			.text '353  + 1133-2.42 V1 543 > 333 5.53 483> +-4.67 LOOP N1M9Q"SCGIMXHB"',0
>1535	31 33 33 2d 32 2e 34 32 20 56 31 20 35 34 33 20
>1545	3e 20 33 33 33 20 35 2e 35 33 20 34 38 33 3e 20
>1555	2b 2d 34 2e 36 37 20 4c 4f 4f 50 20 4e 31 4d 39
>1565	51 22 53 43 47 49 4d 58 48 42 22 00
.1571					Line6:
>1571	36 32 33 00				.text '623',0
.1575					Line7:
>1575	39 33 33 20 20 2d 34 35			.text '933  -453 9.68 963 1193 "KZARXMNT"R9K7 >( J8I3X8"VYV"/"XQ"(593 1333("MLKJE" 693 4.68>',0
>157d	33 20 39 2e 36 38 20 39 36 33 20 31 31 39 33 20
>158d	22 4b 5a 41 52 58 4d 4e 54 22 52 39 4b 37 20 3e
>159d	28 20 4a 38 49 33 58 38 22 56 59 56 22 2f 22 58
>15ad	51 22 28 35 39 33 20 31 33 33 33 28 22 4d 4c 4b
>15bd	4a 45 22 20 36 39 33 20 34 2e 36 38 3e 00
.15cb					Line8:
>15cb	32 36 33 20 22 4b 42 4d			.text '263 "KBMBIZ""JOD" -6.29 "UTOICN""EPB"',0
>15d3	42 49 5a 22 22 4a 4f 44 22 20 2d 36 2e 32 39 20
>15e3	22 55 54 4f 49 43 4e 22 22 45 50 42 22 00
.15f1					Line9:
>15f1	31 32 32 33 20 2d 30 2e			.text '1223 -0.36 F9M>"SJ"-4.71"YQDEJFW" *4.26 "LYJK" B6O 753 443 Z5J3"JANY"TO 273 9.42 623 483 3.33(*LOAD Y5R5I STR$(=293',0
>15f9	33 36 20 46 39 4d 3e 22 53 4a 22 2d 34 2e 37 31
>1609	22 59 51 44 45 4a 46 57 22 20 2a 34 2e 32 36 20
>1619	22 4c 59 4a 4b 22 20 42 36 4f 20 37 35 33 20 34
>1629	34 33 20 5a 35 4a 33 22 4a 41 4e 59 22 54 4f 20
>1639	32 37 33 20 39 2e 34 32 20 36 32 33 20 34 38 33
>1649	20 33 2e 33 33 28 2a 4c 4f 41 44 20 59 35 52 35
>1659	49 20 53 54 52 24 28 3d 32 39 33 00
.1665					Line10:
>1665	36 39 33 00				.text '693',0
.1669					Line11:
>1669	39 30 33 00				.text '903',0
.166d					Line12:
>166d	35 36 33 20 2f 31 33 31			.text '563 /1313 G1J1V8$ K4H0O1 R9K7 A4$/ "" TIME',0
>1675	33 20 47 31 4a 31 56 38 24 20 4b 34 48 30 4f 31
>1685	20 52 39 4b 37 20 41 34 24 2f 20 22 22 20 54 49
>1695	4d 45 00
.1698					Line13:
>1698	31 30 32 33 20 22 5a 4e			.text '1023 "ZNQ" "DW"T<673 1263 933"CZSV@XXX" >LOAD 1103 7.23 Q RUN 1153 753 363 SQR(3.4"DAP"',0
>16a0	51 22 20 22 44 57 22 54 3c 36 37 33 20 31 32 36
>16b0	33 20 39 33 33 22 43 5a 53 56 40 58 58 58 22 20
>16c0	3e 4c 4f 41 44 20 31 31 30 33 20 37 2e 32 33 20
>16d0	51 20 52 55 4e 20 31 31 35 33 20 37 35 33 20 33
>16e0	36 33 20 53 51 52 28 33 2e 34 22 44 41 50 22 00
.16f0					Line14:
>16f0	31 31 36 33 00				.text '1163',0
.16f5					Line15:
>16f5	35 33 33 20 2b 2d 31 2e			.text '533 +-1.71 INT( Y2 6.7/("LXM"> Q7I1 "BZCOIKKD" 233',0
>16fd	37 31 20 49 4e 54 28 20 59 32 20 36 2e 37 2f 28
>170d	22 4c 58 4d 22 3e 20 51 37 49 31 20 22 42 5a 43
>171d	4f 49 4b 4b 44 22 20 32 33 33 00
.1728					Line16:
>1728	35 35 33 20 50 52 49 4e			.text '553 PRINT V1R( "XFD" -8.26"ODLAZDX" = "PLBKCNHO")U9A5 923 Y2 L0$ Z3Y8Z"V"-0.02 G6',0
>1730	54 20 56 31 52 28 20 22 58 46 44 22 20 2d 38 2e
>1740	32 36 22 4f 44 4c 41 5a 44 58 22 20 3d 20 22 50
>1750	4c 42 4b 43 4e 48 4f 22 29 55 39 41 35 20 39 32
>1760	33 20 59 32 20 4c 30 24 20 5a 33 59 38 5a 22 56
>1770	22 2d 30 2e 30 32 20 47 36 00
.177a					Line17:
>177a	32 31 33 20 20 2a 32 38			.text '213  *283 TIME+/-9.7-"IXVUYJQO" "" STOP',0
>1782	33 20 54 49 4d 45 2b 2f 2d 39 2e 37 2d 22 49 58
>1792	56 55 59 4a 51 4f 22 20 22 22 20 53 54 4f 50 00
.17a2					Line18:
>17a2	35 38 33 20 28 31 30 37			.text '583 (1073 LIST 403"EL@SDOB"W8B1G1) V1R(993/ "M"N1M8T 613 DEEK( 0.56',0
>17aa	33 20 4c 49 53 54 20 34 30 33 22 45 4c 40 53 44
>17ba	4f 42 22 57 38 42 31 47 31 29 20 56 31 52 28 39
>17ca	39 33 2f 20 22 4d 22 4e 31 4d 38 54 20 36 31 33
>17da	20 44 45 45 4b 28 20 30 2e 35 36 00
.17e6					Line19:
>17e6	31 32 31 33 20 22 52 4d			.text '1213 "RMYWV")Z3Y8Z A8R 1.28 E6I1"TX"""-6.09 "YRW"* A4$HEX$("LITK"U8L3"CPQMC@Q"LOAD 7.26 O9E1Y5-INT(""-6.08 973 "ZC" 1143 >',0
>17ee	59 57 56 22 29 5a 33 59 38 5a 20 41 38 52 20 31
>17fe	2e 32 38 20 45 36 49 31 22 54 58 22 22 22 2d 36
>180e	2e 30 39 20 22 59 52 57 22 2a 20 41 34 24 48 45
>181e	58 24 28 22 4c 49 54 4b 22 55 38 4c 33 22 43 50
>182e	51 4d 43 40 51 22 4c 4f 41 44 20 37 2e 32 36 20
>183e	4f 39 45 31 59 35 2d 49 4e 54 28 22 22 2d 36 2e
>184e	30 38 20 39 37 33 20 22 5a 43 22 20 31 31 34 33
>185e	20 3e 00
.1861					Line20:
>1861	32 33 33 20 3c 3e 20 49			.text '233 <> INKEY$( "L@FN""V"2.29 2.91 V1R>-4.14 /ENDPROC 613 533 UNTIL +',0
>1869	4e 4b 45 59 24 28 20 22 4c 40 46 4e 22 22 56 22
>1879	32 2e 32 39 20 32 2e 39 31 20 56 31 52 3e 2d 34
>1889	2e 31 34 20 2f 45 4e 44 50 52 4f 43 20 36 31 33
>1899	20 35 33 33 20 55 4e 54 49 4c 20 2b 00
.18a6					Line21:
>18a6	31 32 34 33 20 20 4d 4f			.text '1243  MOD 493-1.86>',0
>18ae	44 20 34 39 33 2d 31 2e 38 36 3e 00
.18ba					Line22:
>18ba	31 33 30 33 20 20 52 30			.text '1303  R0H1E6 233 283 N"" 1123 903 H1R8X5 <-4.4"Q@OO"273 1003-6.38-5.96 G1L',0
>18c2	48 31 45 36 20 32 33 33 20 32 38 33 20 4e 22 22
>18d2	20 31 31 32 33 20 39 30 33 20 48 31 52 38 58 35
>18e2	20 3c 2d 34 2e 34 22 51 40 4f 4f 22 32 37 33 20
>18f2	31 30 30 33 2d 36 2e 33 38 2d 35 2e 39 36 20 47
>1902	31 4c 00
.1905					Line23:
>1905	31 32 30 33 20 20 4d 4f			.text '1203  MOD"IIFKOCR"0.55 "MS" 323< *<',0
>190d	44 22 49 49 46 4b 4f 43 52 22 30 2e 35 35 20 22
>191d	4d 53 22 20 33 32 33 3c 20 2a 3c 00
.1929					Line24:
>1929	31 33 38 33 20 20 47 31			.text '1383  G1J1V8$V1M1("LFGAP"453 DIV MID$( =V1R 3.05 303 "BQF"',0
>1931	4a 31 56 38 24 56 31 4d 31 28 22 4c 46 47 41 50
>1941	22 34 35 33 20 44 49 56 20 4d 49 44 24 28 20 3d
>1951	56 31 52 20 33 2e 30 35 20 33 30 33 20 22 42 51
>1961	46 22 00
.1964					Line25:
>1964	36 36 33 20 20 22 47 4d			.text '663  "GMDVJ""O"-1.37-7.77"OOMQLV"<<"@MJGXHC" 5.6 0.32"EEA""RBAKW"-8.31 1003 J8I3X8 =DIM "GYVXCG"""343 I2X -6.39*"WRWJF"',0
>196c	44 56 4a 22 22 4f 22 2d 31 2e 33 37 2d 37 2e 37
>197c	37 22 4f 4f 4d 51 4c 56 22 3c 3c 22 40 4d 4a 47
>198c	58 48 43 22 20 35 2e 36 20 30 2e 33 32 22 45 45
>199c	41 22 22 52 42 41 4b 57 22 2d 38 2e 33 31 20 31
>19ac	30 30 33 20 4a 38 49 33 58 38 20 3d 44 49 4d 20
>19bc	22 47 59 56 58 43 47 22 22 22 33 34 33 20 49 32
>19cc	58 20 2d 36 2e 33 39 2a 22 57 52 57 4a 46 22 00
.19dc					Line26:
>19dc	37 32 33 20 2f 41 38 52			.text '723 /A8R"FZCBVQA" E2W0Z L0 473 < 1.39',0
>19e4	22 46 5a 43 42 56 51 41 22 20 45 32 57 30 5a 20
>19f4	4c 30 20 34 37 33 20 3c 20 31 2e 33 39 00
.1a02					Line27:
>1a02	32 38 33 20 22 40 44 56			.text '283 "@DVNU"G1J1V8$ /F9D9A(1123 F1B4=F1B4"WO"303 B6$M4V3T4"QUIBIMVS" : A4G9A 273 LEFT$(( 2.43',0
>1a0a	4e 55 22 47 31 4a 31 56 38 24 20 2f 46 39 44 39
>1a1a	41 28 31 31 32 33 20 46 31 42 34 3d 46 31 42 34
>1a2a	22 57 4f 22 33 30 33 20 42 36 24 4d 34 56 33 54
>1a3a	34 22 51 55 49 42 49 4d 56 53 22 20 3a 20 41 34
>1a4a	47 39 41 20 32 37 33 20 4c 45 46 54 24 28 28 20
>1a5a	32 2e 34 33 00
.1a5f					Line28:
>1a5f	32 31 33 20 2d 20 59 39			.text '213 - Y9T *"PGAJMTD"LOOP PRINT)',0
>1a67	54 20 2a 22 50 47 41 4a 4d 54 44 22 4c 4f 4f 50
>1a77	20 50 52 49 4e 54 29 00
.1a7f					Line29:
>1a7f	37 33 33 00				.text '733',0
.1a83					Line30:
>1a83	31 32 30 33 20 29 22 4f			.text '1203 )"OQFDMHH" STR$((* LEFT$(W1U1-0.12 6.67 6.43"XN"443 -7.29 9.77-8.47',0
>1a8b	51 46 44 4d 48 48 22 20 53 54 52 24 28 28 2a 20
>1a9b	4c 45 46 54 24 28 57 31 55 31 2d 30 2e 31 32 20
>1aab	36 2e 36 37 20 36 2e 34 33 22 58 4e 22 34 34 33
>1abb	20 2d 37 2e 32 39 20 39 2e 37 37 2d 38 2e 34 37
>1acb	00
.1acc					Line31:
>1acc	31 30 36 33 20 48 31 52			.text '1063 H1R8X5 P"YDJ" ) (1223 453 U9A5 J8I3X8 "INWVZWU" "NUTWFYTC"Q7A9H5 "QCUFFPE""RZ" "QHRLIRJ" 1073 + 273- 593 TO*573 = -1.11""',0
>1ad4	38 58 35 20 50 22 59 44 4a 22 20 29 20 28 31 32
>1ae4	32 33 20 34 35 33 20 55 39 41 35 20 4a 38 49 33
>1af4	58 38 20 22 49 4e 57 56 5a 57 55 22 20 22 4e 55
>1b04	54 57 46 59 54 43 22 51 37 41 39 48 35 20 22 51
>1b14	43 55 46 46 50 45 22 22 52 5a 22 20 22 51 48 52
>1b24	4c 49 52 4a 22 20 31 30 37 33 20 2b 20 32 37 33
>1b34	2d 20 35 39 33 20 54 4f 2a 35 37 33 20 3d 20 2d
>1b44	31 2e 31 31 22 22 00
.1b4b					Line32:
>1b4b	31 32 32 33 20 59 32 46			.text '1223 Y2F5$',0
>1b53	35 24 00
.1b56					Line33:
>1b56	36 32 33 20 38 2e 33 39			.text '623 8.39 8.13 1123',0
>1b5e	20 38 2e 31 33 20 31 31 32 33 00
.1b69					Line34:
>1b69	31 31 36 33 20 20 39 31			.text '1163  913"UU" FRAC(ASSERT S7U$913 *V4L PRINT 1043 4.17 283 -6.9-<> RIGHT$(J3Q2 > N7R',0
>1b71	33 22 55 55 22 20 46 52 41 43 28 41 53 53 45 52
>1b81	54 20 53 37 55 24 39 31 33 20 2a 56 34 4c 20 50
>1b91	52 49 4e 54 20 31 30 34 33 20 34 2e 31 37 20 32
>1ba1	38 33 20 2d 36 2e 39 2d 3c 3e 20 52 49 47 48 54
>1bb1	24 28 4a 33 51 32 20 3e 20 4e 37 52 00
.1bbe					Line35:
>1bbe	34 37 33 20 50 20 33 31			.text '473 P 313 8.94>SYS=ELSE',0
>1bc6	33 20 38 2e 39 34 3e 53 59 53 3d 45 4c 53 45 00
.1bd6					Line36:
>1bd6	33 37 33 00				.text '373',0
.1bda					Line37:
>1bda	31 30 37 33 20 20 22 22			.text '1073  ""= LOAD N5O8B B5 OR << "VMB" ""T"RAQ" < 223 1.19/-0.18"KPEAH"1223 EVENT( J8I3X8',0
>1be2	3d 20 4c 4f 41 44 20 4e 35 4f 38 42 20 42 35 20
>1bf2	4f 52 20 3c 3c 20 22 56 4d 42 22 20 22 22 54 22
>1c02	52 41 51 22 20 3c 20 32 32 33 20 31 2e 31 39 2f
>1c12	2d 30 2e 31 38 22 4b 50 45 41 48 22 31 32 32 33
>1c22	20 45 56 45 4e 54 28 20 4a 38 49 33 58 38 00
.1c31					Line38:
>1c31	31 32 31 33 20 38 31 33			.text '1213 813 793 1253-"""VDQKF"ENDPROC 483 9.6-4.48 S > + 0.64 P+ 283+ DEC( "" ( -4.64- 663 1153 RUN',0
>1c39	20 37 39 33 20 31 32 35 33 2d 22 22 22 56 44 51
>1c49	4b 46 22 45 4e 44 50 52 4f 43 20 34 38 33 20 39
>1c59	2e 36 2d 34 2e 34 38 20 53 20 3e 20 2b 20 30 2e
>1c69	36 34 20 50 2b 20 32 38 33 2b 20 44 45 43 28 20
>1c79	22 22 20 28 20 2d 34 2e 36 34 2d 20 36 36 33 20
>1c89	31 31 35 33 20 52 55 4e 00
.1c92					Line39:
>1c92	33 36 33 20 50 20 33 2e			.text '363 P 3.93-6.64 203 S<>',0
>1c9a	39 33 2d 36 2e 36 34 20 32 30 33 20 53 3c 3e 00
.1caa					Line40:
>1caa	37 39 33 00				.text '793',0
.1cae					Line41:
>1cae	39 38 33 20 20 33 30 33			.text '983  303<1103* +4.23 353 1.04-5.65-6.53 1153 493 1113 F4H1S3 STOP 313-1.12 0.61"AVGOC"VAL(',0
>1cb6	3c 31 31 30 33 2a 20 2b 34 2e 32 33 20 33 35 33
>1cc6	20 31 2e 30 34 2d 35 2e 36 35 2d 36 2e 35 33 20
>1cd6	31 31 35 33 20 34 39 33 20 31 31 31 33 20 46 34
>1ce6	48 31 53 33 20 53 54 4f 50 20 33 31 33 2d 31 2e
>1cf6	31 32 20 30 2e 36 31 22 41 56 47 4f 43 22 56 41
>1d06	4c 28 00
.1d09					Line42:
>1d09	34 33 33 20 43 35 20 35			.text '433 C5 5.31 643 2.98 D8D0A 743 "VYFO" 283 P5O0K6 6.94 1293 *583 L0 "N"PRINT 1233 "FFFKEB"U9A5',0
>1d11	2e 33 31 20 36 34 33 20 32 2e 39 38 20 44 38 44
>1d21	30 41 20 37 34 33 20 22 56 59 46 4f 22 20 32 38
>1d31	33 20 50 35 4f 30 4b 36 20 36 2e 39 34 20 31 32
>1d41	39 33 20 2a 35 38 33 20 4c 30 20 22 4e 22 50 52
>1d51	49 4e 54 20 31 32 33 33 20 22 46 46 46 4b 45 42
>1d61	22 55 39 41 35 00
.1d67					Line43:
>1d67	31 30 31 33 00				.text '1013',0
.1d6c					Line44:
>1d6c	38 30 33 20 22 44 41 55			.text '803 "DAU"2.56',0
>1d74	22 32 2e 35 36 00
.1d7a					Line45:
>1d7a	34 39 33 20 20 2d 37 2e			.text '493  -7.65-* 1243)',0
>1d82	36 35 2d 2a 20 31 32 34 33 29 00
.1d8d					Line46:
>1d8d	31 30 37 33 20 43 48 52			.text '1073 CHR$( 633 4.69<5.83"IX""LWJV@"-2.39 P5O0K6 *LEFT$( 203',0
>1d95	24 28 20 36 33 33 20 34 2e 36 39 3c 35 2e 38 33
>1da5	22 49 58 22 22 4c 57 4a 56 40 22 2d 32 2e 33 39
>1db5	20 50 35 4f 30 4b 36 20 2a 4c 45 46 54 24 28 20
>1dc5	32 30 33 00
.1dc9					Line47:
>1dc9	39 35 33 20 20 37 32 33			.text '953  723 7.27 N 6.94 T>"Y""VV"O3I8 1043 403 <"H"1163 Y M5A8W"PYMHLME"$ -G6 RND(D5C2Q2<8.87"HMUNX@" "CDSRA"',0
>1dd1	20 37 2e 32 37 20 4e 20 36 2e 39 34 20 54 3e 22
>1de1	59 22 22 56 56 22 4f 33 49 38 20 31 30 34 33 20
>1df1	34 30 33 20 3c 22 48 22 31 31 36 33 20 59 20 4d
>1e01	35 41 38 57 22 50 59 4d 48 4c 4d 45 22 24 20 2d
>1e11	47 36 20 52 4e 44 28 44 35 43 32 51 32 3c 38 2e
>1e21	38 37 22 48 4d 55 4e 58 40 22 20 22 43 44 53 52
>1e31	41 22 00
.1e34					Line48:
>1e34	32 38 33 00				.text '283',0
.1e38					Line49:
>1e38	31 33 33 33 20 33 38 33			.text '1333 383 533 M<=933 SGN()-7.78 Y 943 533 SGN(-Q7I1',0
>1e40	20 35 33 33 20 4d 3c 3d 39 33 33 20 53 47 4e 28
>1e50	29 2d 37 2e 37 38 20 59 20 39 34 33 20 35 33 33
>1e60	20 53 47 4e 28 2d 51 37 49 31 00
.1e6b					Line50:
>1e6b	32 35 33 20 45 4e 44 20			.text '253 END 803 "DQUVUY"Y9T>> "P@NMHH"= 0.02 6.79 T1B6 MID$(*',0
>1e73	38 30 33 20 22 44 51 55 56 55 59 22 59 39 54 3e
>1e83	3e 20 22 50 40 4e 4d 48 48 22 3d 20 30 2e 30 32
>1e93	20 36 2e 37 39 20 54 31 42 36 20 4d 49 44 24 28
>1ea3	2a 00
.1ea5					Line51:
>1ea5	31 33 33 33 20 42 35 20			.text '1333 B5 N5O8B DO"" RAND(593 -6.49> SAVE:P>253 N 483 8.09/223"NXPE"I8N7H7 T',0
>1ead	4e 35 4f 38 42 20 44 4f 22 22 20 52 41 4e 44 28
>1ebd	35 39 33 20 2d 36 2e 34 39 3e 20 53 41 56 45 3a
>1ecd	50 3e 32 35 33 20 4e 20 34 38 33 20 38 2e 30 39
>1edd	2f 32 32 33 22 4e 58 50 45 22 49 38 4e 37 48 37
>1eed	20 54 00
.1ef0					Line52:
>1ef0	36 31 33 20 22 41 40 5a			.text '613 "A@Z" >0.74 DEEK("FF"INT("TMESZ"LET- "" 7.58 WEND Z(-2.15',0
>1ef8	22 20 3e 30 2e 37 34 20 44 45 45 4b 28 22 46 46
>1f08	22 49 4e 54 28 22 54 4d 45 53 5a 22 4c 45 54 2d
>1f18	20 22 22 20 37 2e 35 38 20 57 45 4e 44 20 5a 28
>1f28	2d 32 2e 31 35 00
.1f2e					Line53:
>1f2e	33 30 33 20 35 2e 37 35			.text '303 5.75 O6R9B T5J9$- Y DEEK(613 "WQQXQI"R9I8P REM Y5R5I <T5O$ P',0
>1f36	20 4f 36 52 39 42 20 54 35 4a 39 24 2d 20 59 20
>1f46	44 45 45 4b 28 36 31 33 20 22 57 51 51 58 51 49
>1f56	22 52 39 49 38 50 20 52 45 4d 20 59 35 52 35 49
>1f66	20 3c 54 35 4f 24 20 50 00
.1f6f					Line54:
>1f6f	31 31 36 33 20 20 30 2e			.text '1163  0.93 MOD + H1P(',0
>1f77	39 33 20 4d 4f 44 20 2b 20 48 31 50 28 00
.1f85					Line55:
>1f85	39 32 33 20 20 34 33 33			.text '923  433 803 "CWCO""LOMSOH"A6Z0E0 M1U8$ ""="D" "" "EJOIK"LIST 293 DIV 8.67"JCKURL" RUN Z8N1G',0
>1f8d	20 38 30 33 20 22 43 57 43 4f 22 22 4c 4f 4d 53
>1f9d	4f 48 22 41 36 5a 30 45 30 20 4d 31 55 38 24 20
>1fad	22 22 3d 22 44 22 20 22 22 20 22 45 4a 4f 49 4b
>1fbd	22 4c 49 53 54 20 32 39 33 20 44 49 56 20 38 2e
>1fcd	36 37 22 4a 43 4b 55 52 4c 22 20 52 55 4e 20 5a
>1fdd	38 4e 31 47 00
.1fe2					Line56:
>1fe2	32 39 33 20 20 3c 38 30			.text '293  <803"S"2.53 "F"',0
>1fea	33 22 53 22 32 2e 35 33 20 22 46 22 00
.1ff7					Line57:
>1ff7	34 38 33 20 28 31 30 35			.text '483 (1053 3.79 1173 M1U8$XOR 1293 RUN+T1B6 Y5R5I 853 -5.78 WEND>WEND',0
>1fff	33 20 33 2e 37 39 20 31 31 37 33 20 4d 31 55 38
>200f	24 58 4f 52 20 31 32 39 33 20 52 55 4e 2b 54 31
>201f	42 36 20 59 35 52 35 49 20 38 35 33 20 2d 35 2e
>202f	37 38 20 57 45 4e 44 3e 57 45 4e 44 00
.203c					Line58:
>203c	33 32 33 20 35 37 33 20			.text '323 573 G9U7, 1143 823 "Y" "K"CHR$( T5O$1393 D2( "WXCWMFCX"LET INPUT 1033 "PCTXNJ"333 1313 S7U$V1 723 Y9T )B6$K4H0O1"U"-0.35 U9A5 OR',0
>2044	47 39 55 37 2c 20 31 31 34 33 20 38 32 33 20 22
>2054	59 22 20 22 4b 22 43 48 52 24 28 20 54 35 4f 24
>2064	31 33 39 33 20 44 32 28 20 22 57 58 43 57 4d 46
>2074	43 58 22 4c 45 54 20 49 4e 50 55 54 20 31 30 33
>2084	33 20 22 50 43 54 58 4e 4a 22 33 33 33 20 31 33
>2094	31 33 20 53 37 55 24 56 31 20 37 32 33 20 59 39
>20a4	54 20 29 42 36 24 4b 34 48 30 4f 31 22 55 22 2d
>20b4	30 2e 33 35 20 55 39 41 35 20 4f 52 00
.20c1					Line59:
>20c1	39 38 33 20 4f 36 52 39			.text '983 O6R9B 5.09=613(6.66 -2.2 1193"TJG" ELSE -7.4"EBZTT""OC@@ALHS"',0
>20c9	42 20 35 2e 30 39 3d 36 31 33 28 36 2e 36 36 20
>20d9	2d 32 2e 32 20 31 31 39 33 22 54 4a 47 22 20 45
>20e9	4c 53 45 20 2d 37 2e 34 22 45 42 5a 54 54 22 22
>20f9	4f 43 40 40 41 4c 48 53 22 00
.2103					Line60:
>2103	33 36 33 20 20 55 32 4a			.text '363  U2J',0
>210b	00
.210c					Line61:
>210c	32 32 33 20 52 37 46 30			.text '223 R7F0V L0 A6Z0E0"LJ"*-7.05 "JDK""ALXQ"',0
>2114	56 20 4c 30 20 41 36 5a 30 45 30 22 4c 4a 22 2a
>2124	2d 37 2e 30 35 20 22 4a 44 4b 22 22 41 4c 58 51
>2134	22 00
.2136					Line62:
>2136	39 30 33 20 20 35 33 33			.text '903  533 -5.72"R" 593"EBYMTR"R9K7',0
>213e	20 2d 35 2e 37 32 22 52 22 20 35 39 33 22 45 42
>214e	59 4d 54 52 22 52 39 4b 37 00
.2158					Line63:
>2158	31 30 39 33 20 37 2e 33			.text '1093 7.39/ - "VHBM"=1333/O6R9B < L0"HEANBDA"563 IF+',0
>2160	39 2f 20 2d 20 22 56 48 42 4d 22 3d 31 33 33 33
>2170	2f 4f 36 52 39 42 20 3c 20 4c 30 22 48 45 41 4e
>2180	42 44 41 22 35 36 33 20 49 46 2b 00
.218c					Line64:
>218c	37 36 33 20 28 35 30 33			.text '763 (503 U2J)+Z3Y8Z )+ 1073 243 1.4 DEEK(723',0
>2194	20 55 32 4a 29 2b 5a 33 59 38 5a 20 29 2b 20 31
>21a4	30 37 33 20 32 34 33 20 31 2e 34 20 44 45 45 4b
>21b4	28 37 32 33 00
.21b9					Line65:
>21b9	32 36 33 20 44 4f 4b 45			.text '263 DOKE F1B4 R9K7 -0.11 INKEY$(',0
>21c1	20 46 31 42 34 20 52 39 4b 37 20 2d 30 2e 31 31
>21d1	20 49 4e 4b 45 59 24 28 00
.21da					Line66:
>21da	38 30 33 20 20 42 36 4f			.text '803  B6O P"SB@NEV"A6Z0E0 END "BDPQS"POKE< ENDIF OR SAVE (-5.05 993 < REM',0
>21e2	20 50 22 53 42 40 4e 45 56 22 41 36 5a 30 45 30
>21f2	20 45 4e 44 20 22 42 44 50 51 53 22 50 4f 4b 45
>2202	3c 20 45 4e 44 49 46 20 4f 52 20 53 41 56 45 20
>2212	28 2d 35 2e 30 35 20 39 39 33 20 3c 20 52 45 4d
>2222	00
.2223					Line67:
>2223	31 33 30 33 20 53 41 56			.text '1303 SAVE-"@M" INPUT 883 583"NUW@I"1193 STEP INKEY$( A8R FOR-4.26 N SQR(-2.27 "QYZBGQXI""BY" 403 M5A8W',0
>222b	45 2d 22 40 4d 22 20 49 4e 50 55 54 20 38 38 33
>223b	20 35 38 33 22 4e 55 57 40 49 22 31 31 39 33 20
>224b	53 54 45 50 20 49 4e 4b 45 59 24 28 20 41 38 52
>225b	20 46 4f 52 2d 34 2e 32 36 20 4e 20 53 51 52 28
>226b	2d 32 2e 32 37 20 22 51 59 5a 42 47 51 58 49 22
>227b	22 42 59 22 20 34 30 33 20 4d 35 41 38 57 00
.228a					Line68:
>228a	37 34 33 20 20 22 53 52			.text '743  "SRBM" Q6Z7W G8N1O6"VVDG"I8V1 713 U2J',0
>2292	42 4d 22 20 51 36 5a 37 57 20 47 38 4e 31 4f 36
>22a2	22 56 56 44 47 22 49 38 56 31 20 37 31 33 20 55
>22b2	32 4a 00
.22b5					Line69:
>22b5	32 38 33 20 22 53 47 4f			.text '283 "SGOTUI"D2(PEEK( -1.33-503 2.76/313 5.53 SQR("KUGKO"=',0
>22bd	54 55 49 22 44 32 28 50 45 45 4b 28 20 2d 31 2e
>22cd	33 33 2d 35 30 33 20 32 2e 37 36 2f 33 31 33 20
>22dd	35 2e 35 33 20 53 51 52 28 22 4b 55 47 4b 4f 22
>22ed	3d 00
.22ef					Line70:
>22ef	31 32 34 33 20 41 4e 44			.text '1243 AND F4H1S3',0
>22f7	20 46 34 48 31 53 33 00
.22ff					Line71:
>22ff	39 38 33 20 20 32 2e 30			.text '983  2.03 2.81 203 -6.21 7.82 3.0 EVENT("RLVQCSL""IFUP")< THEN """Q@"DEC() 523 LOOP M8S3V6 REM 563 END 493>Y 483 H1P(',0
>2307	33 20 32 2e 38 31 20 32 30 33 20 2d 36 2e 32 31
>2317	20 37 2e 38 32 20 33 2e 30 20 45 56 45 4e 54 28
>2327	22 52 4c 56 51 43 53 4c 22 22 49 46 55 50 22 29
>2337	3c 20 54 48 45 4e 20 22 22 22 51 40 22 44 45 43
>2347	28 29 20 35 32 33 20 4c 4f 4f 50 20 4d 38 53 33
>2357	56 36 20 52 45 4d 20 35 36 33 20 45 4e 44 20 34
>2367	39 33 3e 59 20 34 38 33 20 48 31 50 28 00
.2375					Line72:
>2375	35 38 33 20 22 4f 47 41			.text '583 "OGAX" ) P I8N7H7-6.94 L$ 453 REM 1013 493 493<PROC 9.47 0.27 663 -7.36< 3.49<*/N5O8B',0
>237d	58 22 20 29 20 50 20 49 38 4e 37 48 37 2d 36 2e
>238d	39 34 20 4c 24 20 34 35 33 20 52 45 4d 20 31 30
>239d	31 33 20 34 39 33 20 34 39 33 3c 50 52 4f 43 20
>23ad	39 2e 34 37 20 30 2e 32 37 20 36 36 33 20 2d 37
>23bd	2e 33 36 3c 20 33 2e 34 39 3c 2a 2f 4e 35 4f 38
>23cd	42 00
.23cf					Line73:
>23cf	31 32 34 33 20 28 20 52			.text '1243 ( R9I8P-3.6/ V4L N HEX$("XY@I@WX"633"F" LEN(323 :< )CHR$( > 1073-',0
>23d7	39 49 38 50 2d 33 2e 36 2f 20 56 34 4c 20 4e 20
>23e7	48 45 58 24 28 22 58 59 40 49 40 57 58 22 36 33
>23f7	33 22 46 22 20 4c 45 4e 28 33 32 33 20 3a 3c 20
>2407	29 43 48 52 24 28 20 3e 20 31 30 37 33 2d 00
.2416					Line74:
>2416	31 33 38 33 20 30 2e 33			.text '1383 0.36 <= POKE G9U7 "IEQAQ"1083<3.28 ("N"',0
>241e	36 20 3c 3d 20 50 4f 4b 45 20 47 39 55 37 20 22
>242e	49 45 51 41 51 22 31 30 38 33 3c 33 2e 32 38 20
>243e	28 22 4e 22 00
.2443					Line75:
>2443	33 39 33 20 59 39 54 20			.text '393 Y9T -9.49 >8.41) 1053= (703+-1.94 333+ELSE=/ =673)-7.75 1373 CLEAR 1063"LCOINDHD""CRO"RND("SJBVIKW"<583',0
>244b	2d 39 2e 34 39 20 3e 38 2e 34 31 29 20 31 30 35
>245b	33 3d 20 28 37 30 33 2b 2d 31 2e 39 34 20 33 33
>246b	33 2b 45 4c 53 45 3d 2f 20 3d 36 37 33 29 2d 37
>247b	2e 37 35 20 31 33 37 33 20 43 4c 45 41 52 20 31
>248b	30 36 33 22 4c 43 4f 49 4e 44 48 44 22 22 43 52
>249b	4f 22 52 4e 44 28 22 53 4a 42 56 49 4b 57 22 3c
>24ab	35 38 33 00
.24af					Line76:
>24af	38 31 33 00				.text '813',0
.24b3					Line77:
>24b3	31 31 35 33 20 20 53 37			.text '1153  S7U$ -1253 F9D9A-2.18"HZKJ"303 -5.96"AEAT" -5.15-2.04"FIU@U" DIV = F2H ( ( U9A5 4.68 1393/SGN( "WHP"383"HJPELJSZ"',0
>24bb	55 24 20 2d 31 32 35 33 20 46 39 44 39 41 2d 32
>24cb	2e 31 38 22 48 5a 4b 4a 22 33 30 33 20 2d 35 2e
>24db	39 36 22 41 45 41 54 22 20 2d 35 2e 31 35 2d 32
>24eb	2e 30 34 22 46 49 55 40 55 22 20 44 49 56 20 3d
>24fb	20 46 32 48 20 28 20 28 20 55 39 41 35 20 34 2e
>250b	36 38 20 31 33 39 33 2f 53 47 4e 28 20 22 57 48
>251b	50 22 33 38 33 22 48 4a 50 45 4c 4a 53 5a 22 00
.252b					Line78:
>252b	39 37 33 20 52 45 4d 20			.text '973 REM M-5.63 INKEY$(8.76 583 F9M 6.73',0
>2533	4d 2d 35 2e 36 33 20 49 4e 4b 45 59 24 28 38 2e
>2543	37 36 20 35 38 33 20 46 39 4d 20 36 2e 37 33 00
.2553					Line79:
>2553	31 32 34 33 20 22 5a 22			.text '1243 "Z"+ 2.65 RIGHT$("ZNJAL" +1093 WEND',0
>255b	2b 20 32 2e 36 35 20 52 49 47 48 54 24 28 22 5a
>256b	4e 4a 41 4c 22 20 2b 31 30 39 33 20 57 45 4e 44
>257b	00
.257c					Line80:
>257c	32 34 33 20 2d 32 2e 38			.text '243 -2.86"UOCO"- "DT" = NEXT</>N="" --=6.3 -9.68 Z3Y8Z,"ODTAB"F4H1S3 G9U7 WEND',0
>2584	36 22 55 4f 43 4f 22 2d 20 22 44 54 22 20 3d 20
>2594	4e 45 58 54 3c 2f 3e 4e 3d 22 22 20 2d 2d 3d 36
>25a4	2e 33 20 2d 39 2e 36 38 20 5a 33 59 38 5a 2c 22
>25b4	4f 44 54 41 42 22 46 34 48 31 53 33 20 47 39 55
>25c4	37 20 57 45 4e 44 00
.25cb					Line81:
>25cb	38 30 33 20 20 2d 39 2e			.text '803  -9.53 "Z@YOV@U" J9I+-1.41 ( E6I1, I8V1 903',0
>25d3	35 33 20 22 5a 40 59 4f 56 40 55 22 20 4a 39 49
>25e3	2b 2d 31 2e 34 31 20 28 20 45 36 49 31 2c 20 49
>25f3	38 56 31 20 39 30 33 00
.25fb					Line82:
>25fb	32 39 33 20 53 54 4f 50			.text '293 STOP -4.47 293 LIST L2I6T 1.58 1333 RIGHT$(U9A5( "FO"IF-0.06 8.0 >MID$(A7',0
>2603	20 2d 34 2e 34 37 20 32 39 33 20 4c 49 53 54 20
>2613	4c 32 49 36 54 20 31 2e 35 38 20 31 33 33 33 20
>2623	52 49 47 48 54 24 28 55 39 41 35 28 20 22 46 4f
>2633	22 49 46 2d 30 2e 30 36 20 38 2e 30 20 3e 4d 49
>2643	44 24 28 41 37 00
.2649					Line83:
>2649	33 38 33 20 53 47 4e 28			.text '383 SGN("DQ""YGN" I7J2Q3$) // =Q1K6M3 "KB" 3.62-3.86 "TK"6.13 ENDPROC E2W0Z "ZHAJ@KBY" SGN(X9G$Z1-0.28( T"ADEB@FIY" 813',0
>2651	22 44 51 22 22 59 47 4e 22 20 49 37 4a 32 51 33
>2661	24 29 20 2f 2f 20 3d 51 31 4b 36 4d 33 20 22 4b
>2671	42 22 20 33 2e 36 32 2d 33 2e 38 36 20 22 54 4b
>2681	22 36 2e 31 33 20 45 4e 44 50 52 4f 43 20 45 32
>2691	57 30 5a 20 22 5a 48 41 4a 40 4b 42 59 22 20 53
>26a1	47 4e 28 58 39 47 24 5a 31 2d 30 2e 32 38 28 20
>26b1	54 22 41 44 45 42 40 46 49 59 22 20 38 31 33 00
.26c1					Line84:
>26c1	33 37 33 20 20 55 38 4c			.text '373  U8L3 /2.54 E2W0Z INKEY$(803 "EDCSE"1363="R" D8D0A 373"C""L"',0
>26c9	33 20 2f 32 2e 35 34 20 45 32 57 30 5a 20 49 4e
>26d9	4b 45 59 24 28 38 30 33 20 22 45 44 43 53 45 22
>26e9	31 33 36 33 3d 22 52 22 20 44 38 44 30 41 20 33
>26f9	37 33 22 43 22 22 4c 22 00
.2702					Line85:
>2702	32 36 33 20 20 22 4e 22			.text '263  "N" CALL CLEAR O9E1Y5 "HPS" 533 END 563>SYS RAND( U8L3 AND- "YRCXNCC"-8.49 K0T8V B5 "ZVKEKAJ"MOD',0
>270a	20 43 41 4c 4c 20 43 4c 45 41 52 20 4f 39 45 31
>271a	59 35 20 22 48 50 53 22 20 35 33 33 20 45 4e 44
>272a	20 35 36 33 3e 53 59 53 20 52 41 4e 44 28 20 55
>273a	38 4c 33 20 41 4e 44 2d 20 22 59 52 43 58 4e 43
>274a	43 22 2d 38 2e 34 39 20 4b 30 54 38 56 20 42 35
>275a	20 22 5a 56 4b 45 4b 41 4a 22 4d 4f 44 00
.2768					Line86:
>2768	33 30 33 20 31 33 38 33			.text '303 1383 9.85 ABS(',0
>2770	20 39 2e 38 35 20 41 42 53 28 00
.277b					Line87:
>277b	34 33 33 00				.text '433',0
.277f					Line88:
>277f	35 32 33 20 28 32 35 33			.text '523 (253 D2(*"JYPNQELK" *N1M9Q LOAD) "FC"-8.73 WHILE',0
>2787	20 44 32 28 2a 22 4a 59 50 4e 51 45 4c 4b 22 20
>2797	2a 4e 31 4d 39 51 20 4c 4f 41 44 29 20 22 46 43
>27a7	22 2d 38 2e 37 33 20 57 48 49 4c 45 00
.27b4					Line89:
>27b4	36 35 33 20 20 41 31 59			.text '653  A1Y3Z "SX"EXIT "PFGX" 683-8.21 A5M1E-2.99 G9U7 ASSERT Q A4$1233= 443 WEND+6.7 2.13(PRINT M5A8W 673 FRAC(+853 P 3.88 413',0
>27bc	33 5a 20 22 53 58 22 45 58 49 54 20 22 50 46 47
>27cc	58 22 20 36 38 33 2d 38 2e 32 31 20 41 35 4d 31
>27dc	45 2d 32 2e 39 39 20 47 39 55 37 20 41 53 53 45
>27ec	52 54 20 51 20 41 34 24 31 32 33 33 3d 20 34 34
>27fc	33 20 57 45 4e 44 2b 36 2e 37 20 32 2e 31 33 28
>280c	50 52 49 4e 54 20 4d 35 41 38 57 20 36 37 33 20
>281c	46 52 41 43 28 2b 38 35 33 20 50 20 33 2e 38 38
>282c	20 34 31 33 00
.2831					Line90:
>2831	31 31 30 33 20 53 54 4f			.text '1103 STOP"@P"LOOP 4.1>/723 0.43 / R"L@QB"-F9M- ELSE 323"HI" -8.33 V1',0
>2839	50 22 40 50 22 4c 4f 4f 50 20 34 2e 31 3e 2f 37
>2849	32 33 20 30 2e 34 33 20 2f 20 52 22 4c 40 51 42
>2859	22 2d 46 39 4d 2d 20 45 4c 53 45 20 33 32 33 22
>2869	48 49 22 20 2d 38 2e 33 33 20 56 31 00
.2876					Line91:
>2876	34 34 33 20 2f 20 22 4c			.text '443 / "LYJSOB" "YUTXJ@""T"ENDIF REPEAT"NOAXIQRL""VFT@V""RNN"',0
>287e	59 4a 53 4f 42 22 20 22 59 55 54 58 4a 40 22 22
>288e	54 22 45 4e 44 49 46 20 52 45 50 45 41 54 22 4e
>289e	4f 41 58 49 51 52 4c 22 22 56 46 54 40 56 22 22
>28ae	52 4e 4e 22 00
.28b3					Line92:
>28b3	31 31 39 33 20 20 3e 20			.text '1193  > 1103 1193"NEMHDK" LOOP 7.97 8.07 "MY""K")-4.12"YWFMDO"S7U$RND(',0
>28bb	31 31 30 33 20 31 31 39 33 22 4e 45 4d 48 44 4b
>28cb	22 20 4c 4f 4f 50 20 37 2e 39 37 20 38 2e 30 37
>28db	20 22 4d 59 22 22 4b 22 29 2d 34 2e 31 32 22 59
>28eb	57 46 4d 44 4f 22 53 37 55 24 52 4e 44 28 00
.28fa					Line93:
>28fa	36 37 33 20 34 30 33 22			.text '673 403"A">253 4.88 >1203 603 723 9.3 D8D0A RUN 1.3"QZBJ" 6.39 REM>>=DEEK( "@H" - ,"FO" 1023 393 Q1K6M3 REPEAT (-2.49',0
>2902	41 22 3e 32 35 33 20 34 2e 38 38 20 3e 31 32 30
>2912	33 20 36 30 33 20 37 32 33 20 39 2e 33 20 44 38
>2922	44 30 41 20 52 55 4e 20 31 2e 33 22 51 5a 42 4a
>2932	22 20 36 2e 33 39 20 52 45 4d 3e 3e 3d 44 45 45
>2942	4b 28 20 22 40 48 22 20 2d 20 2c 22 46 4f 22 20
>2952	31 30 32 33 20 33 39 33 20 51 31 4b 36 4d 33 20
>2962	52 45 50 45 41 54 20 28 2d 32 2e 34 39 00
.2970					Line94:
>2970	31 31 32 33 00				.text '1123',0
.2975					Line95:
>2975	37 31 33 20 34 2e 38 20			.text '713 4.8 (1293 A2 WEND"UOZBHTHQ"HEX$( > 1283 XOR -8.59 6.52 6.14 "XAAQDAI" < 433 -2.01 683 I2X R9K7=L0$ Y7Z3R1(B6O LIST 323 V1>)',0
>297d	28 31 32 39 33 20 41 32 20 57 45 4e 44 22 55 4f
>298d	5a 42 48 54 48 51 22 48 45 58 24 28 20 3e 20 31
>299d	32 38 33 20 58 4f 52 20 2d 38 2e 35 39 20 36 2e
>29ad	35 32 20 36 2e 31 34 20 22 58 41 41 51 44 41 49
>29bd	22 20 3c 20 34 33 33 20 2d 32 2e 30 31 20 36 38
>29cd	33 20 49 32 58 20 52 39 4b 37 3d 4c 30 24 20 59
>29dd	37 5a 33 52 31 28 42 36 4f 20 4c 49 53 54 20 33
>29ed	32 33 20 56 31 3e 29 00
.29f5					Line96:
>29f5	31 31 36 33 00				.text '1163',0
.29fa					Line97:
>29fa	36 31 33 20 20 44 4f 20			.text '613  DO L0$ "PCYT" N1M9Q"QGM""UFST""BD"O3I8 A5M1E-763>"SPRKSUSG""@WZXRDBA" /"""C" "HEEFWBK" PRINT Y K6Y0D$-2.18 CALL T5O$"EQZXWR" 473 "URRBJE"M8S3V6 -6.3<<',0
>2a02	4c 30 24 20 22 50 43 59 54 22 20 4e 31 4d 39 51
>2a12	22 51 47 4d 22 22 55 46 53 54 22 22 42 44 22 4f
>2a22	33 49 38 20 41 35 4d 31 45 2d 37 36 33 3e 22 53
>2a32	50 52 4b 53 55 53 47 22 22 40 57 5a 58 52 44 42
>2a42	41 22 20 2f 22 22 22 43 22 20 22 48 45 45 46 57
>2a52	42 4b 22 20 50 52 49 4e 54 20 59 20 4b 36 59 30
>2a62	44 24 2d 32 2e 31 38 20 43 41 4c 4c 20 54 35 4f
>2a72	24 22 45 51 5a 58 57 52 22 20 34 37 33 20 22 55
>2a82	52 52 42 4a 45 22 4d 38 53 33 56 36 20 2d 36 2e
>2a92	33 3c 3c 00
.2a96					Line98:
>2a96	38 36 33 20 2f 31 2e 39			.text '863 /1.98"KIRL"-1.32 SQR(5.46 493 1223(1163 0.42*-9.12 "IRFBRZAH"',0
>2a9e	38 22 4b 49 52 4c 22 2d 31 2e 33 32 20 53 51 52
>2aae	28 35 2e 34 36 20 34 39 33 20 31 32 32 33 28 31
>2abe	31 36 33 20 30 2e 34 32 2a 2d 39 2e 31 32 20 22
>2ace	49 52 46 42 52 5a 41 48 22 00
.2ad8					Line99:
>2ad8	35 39 33 20 29 2d 35 2e			.text '593 )-5.01 THEN ELSE DOKE Q6Z7W PEEK("SSV@ZR"REPEAT -8.29 ASC(3.83 9.06 473 1113-0.6 = R0H1E6 713 +OR 1023 "NDKQ" INKEY$("SWZDOH"+ -5.07"F"*',0
>2ae0	30 31 20 54 48 45 4e 20 45 4c 53 45 20 44 4f 4b
>2af0	45 20 51 36 5a 37 57 20 50 45 45 4b 28 22 53 53
>2b00	56 40 5a 52 22 52 45 50 45 41 54 20 2d 38 2e 32
>2b10	39 20 41 53 43 28 33 2e 38 33 20 39 2e 30 36 20
>2b20	34 37 33 20 31 31 31 33 2d 30 2e 36 20 3d 20 52
>2b30	30 48 31 45 36 20 37 31 33 20 2b 4f 52 20 31 30
>2b40	32 33 20 22 4e 44 4b 51 22 20 49 4e 4b 45 59 24
>2b50	28 22 53 57 5a 44 4f 48 22 2b 20 2d 35 2e 30 37
>2b60	22 46 22 2a 00
.2b65					Line100:
>2b65	31 33 33 33 20 52 41 4e			.text '1333 RAND(663 Y 5.71 V1R(-6.32 "STUKLVT" FOR 813 9.55 833"XXTM" 6.51 1193 1333 S7U$-0.97 >*1.61"LO"$ =1363 ;8.17 723 6.29',0
>2b6d	44 28 36 36 33 20 59 20 35 2e 37 31 20 56 31 52
>2b7d	28 2d 36 2e 33 32 20 22 53 54 55 4b 4c 56 54 22
>2b8d	20 46 4f 52 20 38 31 33 20 39 2e 35 35 20 38 33
>2b9d	33 22 58 58 54 4d 22 20 36 2e 35 31 20 31 31 39
>2bad	33 20 31 33 33 33 20 53 37 55 24 2d 30 2e 39 37
>2bbd	20 3e 2a 31 2e 36 31 22 4c 4f 22 24 20 3d 31 33
>2bcd	36 33 20 3b 38 2e 31 37 20 37 32 33 20 36 2e 32
>2bdd	39 00
.2bdf					Line101:
>2bdf	31 30 38 33 20 38 37 33			.text '1083 873 1173 MID$(CLEAR Z8N1G A1Y3Z K0T8V 8.12)573("ZB"693=8.74+ 883 2.02 1243 583< PROC',0
>2be7	20 31 31 37 33 20 4d 49 44 24 28 43 4c 45 41 52
>2bf7	20 5a 38 4e 31 47 20 41 31 59 33 5a 20 4b 30 54
>2c07	38 56 20 38 2e 31 32 29 35 37 33 28 22 5a 42 22
>2c17	36 39 33 3d 38 2e 37 34 2b 20 38 38 33 20 32 2e
>2c27	30 32 20 31 32 34 33 20 35 38 33 3c 20 50 52 4f
>2c37	43 00
.2c39					Line102:
>2c39	36 38 33 20 2d 33 36 33			.text '683 -363/ "R" ( "" "KBCPDO"EXIT D8D0A-9.32(( "FRPMF" "RIDGW" 863',0
>2c41	2f 20 22 52 22 20 28 20 22 22 20 22 4b 42 43 50
>2c51	44 4f 22 45 58 49 54 20 44 38 44 30 41 2d 39 2e
>2c61	33 32 28 28 20 22 46 52 50 4d 46 22 20 22 52 49
>2c71	44 47 57 22 20 38 36 33 00
.2c7a					Line103:
>2c7a	31 33 33 33 20 28 22 52			.text '1333 ("R" *"AFYMZHEB"G1L >"AJFH@" -1.84 4.61(N I2X STR$(2.46(573"GL"*7.81',0
>2c82	22 20 2a 22 41 46 59 4d 5a 48 45 42 22 47 31 4c
>2c92	20 3e 22 41 4a 46 48 40 22 20 2d 31 2e 38 34 20
>2ca2	34 2e 36 31 28 4e 20 49 32 58 20 53 54 52 24 28
>2cb2	32 2e 34 36 28 35 37 33 22 47 4c 22 2a 37 2e 38
>2cc2	31 00
.2cc4					Line104:
>2cc4	34 38 33 20 4e 37 52 20			.text '483 N7R 1233-8.3 623-2.35 "XXLPM@"3.66"MOP""I")S9I1X0 WEND DEC(4.77',0
>2ccc	31 32 33 33 2d 38 2e 33 20 36 32 33 2d 32 2e 33
>2cdc	35 20 22 58 58 4c 50 4d 40 22 33 2e 36 36 22 4d
>2cec	4f 50 22 22 49 22 29 53 39 49 31 58 30 20 57 45
>2cfc	4e 44 20 44 45 43 28 34 2e 37 37 00
.2d08					Line105:
>2d08	35 36 33 00				.text '563',0
.2d0c					Line106:
>2d0c	31 31 36 33 20 20 39 39			.text '1163  993"BEPLOSZL" 7.96 EXIT 3.78 443 T LIST-0.34 INKEY$(J3Q2 3.06 >7.86 1083 1.65 1073 2.3',0
>2d14	33 22 42 45 50 4c 4f 53 5a 4c 22 20 37 2e 39 36
>2d24	20 45 58 49 54 20 33 2e 37 38 20 34 34 33 20 54
>2d34	20 4c 49 53 54 2d 30 2e 33 34 20 49 4e 4b 45 59
>2d44	24 28 4a 33 51 32 20 33 2e 30 36 20 3e 37 2e 38
>2d54	36 20 31 30 38 33 20 31 2e 36 35 20 31 30 37 33
>2d64	20 32 2e 33 00
.2d69					Line107:
>2d69	34 32 33 20 20 45 56 45			.text '423  EVENT(1143 F4H1S3 "YIJRXGCB"-8.25 9.86 B6O-3.39 -8.78 -5.06 - (IF -7.86 1.98 M5A8W INPUT 413',0
>2d71	4e 54 28 31 31 34 33 20 46 34 48 31 53 33 20 22
>2d81	59 49 4a 52 58 47 43 42 22 2d 38 2e 32 35 20 39
>2d91	2e 38 36 20 42 36 4f 2d 33 2e 33 39 20 2d 38 2e
>2da1	37 38 20 2d 35 2e 30 36 20 2d 20 28 49 46 20 2d
>2db1	37 2e 38 36 20 31 2e 39 38 20 4d 35 41 38 57 20
>2dc1	49 4e 50 55 54 20 34 31 33 00
.2dcb					Line108:
>2dcb	37 37 33 20 20 35 34 33			.text '773  543 INT( *R0H1E6 DO DEC(',0
>2dd3	20 49 4e 54 28 20 2a 52 30 48 31 45 36 20 44 4f
>2de3	20 44 45 43 28 00
.2de9					Line109:
>2de9	39 39 33 20 31 33 33 33			.text '993 1333 5.94"MOF@C" /)= -3.81 L8R0V3 T5O$N L +) "FZ"Q 693<FOR "QOZBZVX""I@LTTX"',0
>2df1	20 35 2e 39 34 22 4d 4f 46 40 43 22 20 2f 29 3d
>2e01	20 2d 33 2e 38 31 20 4c 38 52 30 56 33 20 54 35
>2e11	4f 24 4e 20 4c 20 2b 29 20 22 46 5a 22 51 20 36
>2e21	39 33 3c 46 4f 52 20 22 51 4f 5a 42 5a 56 58 22
>2e31	22 49 40 4c 54 54 58 22 00
.2e3a					Line110:
>2e3a	31 30 30 33 00				.text '1003',0
.2e3f					Line111:
>2e3f	36 34 33 20 22 4d 5a 22			.text '643 "MZ"1003>843"NXHQE" / F9D9A,/453 A7-1.61 ""',0
>2e47	31 30 30 33 3e 38 34 33 22 4e 58 48 51 45 22 20
>2e57	2f 20 46 39 44 39 41 2c 2f 34 35 33 20 41 37 2d
>2e67	31 2e 36 31 20 22 22 00
.2e6f					Line112:
>2e6f	39 30 33 20 37 35 33 2b			.text '903 753+OR 2.98 WEND-1.71 703+953 VAL(803 G8N1O6 863 >P',0
>2e77	4f 52 20 32 2e 39 38 20 57 45 4e 44 2d 31 2e 37
>2e87	31 20 37 30 33 2b 39 35 33 20 56 41 4c 28 38 30
>2e97	33 20 47 38 4e 31 4f 36 20 38 36 33 20 3e 50 00
.2ea7					Line113:
>2ea7	38 31 33 20 3d 22 44 22			.text '813 ="D" =(*/ "PNGSC"N1M8T"ZBCVWC"* LET "M"7.49 713 (663<373 <1313/7.91 V1-7.25 V1M1 TO + L8R0V3 N >',0
>2eaf	20 3d 28 2a 2f 20 22 50 4e 47 53 43 22 4e 31 4d
>2ebf	38 54 22 5a 42 43 56 57 43 22 2a 20 4c 45 54 20
>2ecf	22 4d 22 37 2e 34 39 20 37 31 33 20 28 36 36 33
>2edf	3c 33 37 33 20 3c 31 33 31 33 2f 37 2e 39 31 20
>2eef	56 31 2d 37 2e 32 35 20 56 31 4d 31 20 54 4f 20
>2eff	2b 20 4c 38 52 30 56 33 20 4e 20 3e 00
.2f0c					Line114:
>2f0c	39 30 33 00				.text '903',0
.2f10					Line115:
>2f10	32 33 33 20 2b 22 43 4c			.text '233 +"CL@XYZ"NEXT MOD-M8S3V6+"CI"A4$873 8.06',0
>2f18	40 58 59 5a 22 4e 45 58 54 20 4d 4f 44 2d 4d 38
>2f28	53 33 56 36 2b 22 43 49 22 41 34 24 38 37 33 20
>2f38	38 2e 30 36 00
.2f3d					Line116:
>2f3d	32 30 33 00				.text '203',0
.2f41					Line117:
>2f41	31 33 39 33 20 22 46 50			.text '1393 "FPL@TJM"/LET 8.0< 3.43 AND J3Q2 A7-9.08 =(<=-8.2 1193)563 1073 1213 MOD 7.25',0
>2f49	4c 40 54 4a 4d 22 2f 4c 45 54 20 38 2e 30 3c 20
>2f59	33 2e 34 33 20 41 4e 44 20 4a 33 51 32 20 41 37
>2f69	2d 39 2e 30 38 20 3d 28 3c 3d 2d 38 2e 32 20 31
>2f79	31 39 33 29 35 36 33 20 31 30 37 33 20 31 32 31
>2f89	33 20 4d 4f 44 20 37 2e 32 35 00
.2f94					Line118:
>2f94	33 36 33 20 47 31 4a 31			.text '363 G1J1V8$"""" "CQTYNJOM" */-+ TO LEFT$(513 -3.84 1013 REM 7.13"DWVB" <= -5.99',0
>2f9c	56 38 24 22 22 22 22 20 22 43 51 54 59 4e 4a 4f
>2fac	4d 22 20 2a 2f 2d 2b 20 54 4f 20 4c 45 46 54 24
>2fbc	28 35 31 33 20 2d 33 2e 38 34 20 31 30 31 33 20
>2fcc	52 45 4d 20 37 2e 31 33 22 44 57 56 42 22 20 3c
>2fdc	3d 20 2d 35 2e 39 39 00
.2fe4					Line119:
>2fe4	37 37 33 20 2d 33 2e 33			.text '773 -3.34 +G9U7-= -8.12 SAVE T1B6 343-2.27 1083 1243',0
>2fec	34 20 2b 47 39 55 37 2d 3d 20 2d 38 2e 31 32 20
>2ffc	53 41 56 45 20 54 31 42 36 20 33 34 33 2d 32 2e
>300c	32 37 20 31 30 38 33 20 31 32 34 33 00

;******  Return to file: src/program/testing/testing.asmx

.3019					TOKOneLine:
.3019	86 24		stx $24				stx 	zTemp2
.301b	84 25		sty $25				sty 	zTemp2+1
.301d	a2 33		ldx #$33			ldx 	#TOKGetSource & $FF
.301f	a0 30		ldy #$30			ldy 	#TOKGetSource >> 8
.3021	38		sec				sec
.3022	20 8f 3e	jsr $3e8f			jsr 	TOKTokenise
.3025	20 6a 3d	jsr $3d6a			jsr 	PGMDeleteLine
.3028	ad 01 04	lda $0401			lda 	TOKLineSize
.302b	c9 04		cmp #$04			cmp 	#4
.302d	f0 03		beq $3032			beq 	_TOKNoInsert
.302f	20 b4 3d	jsr $3db4			jsr 	PGMInsertLine
.3032					_TOKNoInsert:
.3032	60		rts				rts
.3033					TOKGetSource:
.3033	b2 24		lda ($24)			lda 	(zTemp2)
.3035	90 06		bcc $303d			bcc 	_GSNoIncrement
.3037	e6 24		inc $24				inc 	zTemp2
.3039	d0 02		bne $303d			bne 	_GSNoIncrement
.303b	e6 25		inc $25				inc 	zTemp2+1
.303d					_GSNoIncrement:
.303d	c9 00		cmp #$00			cmp 	#0
.303f	60		rts				rts
.0400					SrcPosition:
>0400							.fill 		1

;******  Return to file: basic.asm

.3040	4c 94 33	jmp $3394			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001e					codePtr:
>001e							.fill 	2
.0020					zTemp0:
>0020							.fill 	2
.0022					zTemp1:
>0022							.fill 	2
.0024					zTemp2:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0401					TOKLineSize:
>0401							.fill 	1
.0402					TOKLineNumber:
>0402							.fill 	2
.0404					TOKBuffer:
>0404							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.3043					Command_ASSERT:
.3043	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber
.3046	a2 0e		ldx #$0e			ldx 	#IFR0
.3048	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero
.304b	f0 01		beq $304e			beq 	_CAFail
.304d	60		rts				rts
.304e					_CAFail:
.304e	4c 2b 44	jmp $442b		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.3051					Command_CLEAR:
.3051	20 1d 3e	jsr $3e1d			jsr 	PGMEndProgram 				; end program => zTemp0
.3054	64 26		stz $26				stz 	freeMemory 					; start on next free page
.3056	a5 21		lda $21				lda 	zTemp0+1
.3058	1a		inc a				inc 	a
.3059	85 27		sta $27				sta 	freeMemory+1
.305b	20 a4 48	jsr $48a4			jsr 	VARClearHashTables
.305e	ad 16 05	lda $0516			lda 	PGMEndMemoryHigh
.3061	20 e1 45	jsr $45e1			jsr 	StackReset
.3064	20 40 46	jsr $4640			jsr 	StringSystemInitialise
.3067	20 42 43	jsr $4342			jsr 	ScanProcedures
.306a	60		rts				rts
.306b					AllocateMemory:
.306b	5a		phy				phy 								; save Y
.306c	a4 26		ldy $26				ldy 	freeMemory 					; save addr.low
.306e	5a		phy				phy
.306f	a4 27		ldy $27				ldy 	freeMemory+1 				; save addr.high
.3071	5a		phy				phy
.3072	a8		tay				tay 								; count is now in XY
.3073					_AllocateLoop:
.3073	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.3075	d0 04		bne $307b			bne 	_AllocateOne
.3077	c0 00		cpy #$00			cpy 	#0
.3079	f0 15		beq $3090			beq 	_AllocateExit
.307b					_AllocateOne:
.307b	a9 00		lda #$00			lda 	#0 							; zero byte
.307d	92 26		sta ($26)			sta 	(freeMemory)
.307f	e6 26		inc $26				inc 	freeMemory 					; bump pointer
.3081	d0 05		bne $3088			bne 	_AllocateSkipCarry
.3083	e6 27		inc $27				inc 	freeMemory+1
.3085	20 94 30	jsr $3094			jsr 	ClearCheckMemory
.3088					_AllocateSkipCarry:
.3088	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.308a	d0 01		bne $308d			bne 	_AllocateSkipBorrow
.308c	ca		dex				dex
.308d					_AllocateSkipBorrow:
.308d	88		dey				dey
.308e	80 e3		bra $3073			bra 	_AllocateLoop
.3090					_AllocateExit:
.3090	fa		plx				plx 								; restore address
.3091	68		pla				pla
.3092	7a		ply				ply 								; restore Y
.3093	60		rts				rts
.3094					ClearCheckMemory:
.3094	a5 27		lda $27				lda 	freeMemory+1
.3096	1a		inc a				inc 	a
.3097	1a		inc a				inc 	a
.3098	cd 1e 06	cmp $061e			cmp 	stringMemory+1
.309b	b0 01		bcs $309e			bcs  	_CCMError
.309d	60		rts				rts
.309e					_CCMError:
.309e	4c c5 44	jmp $44c5		jmp	ErrorV_memory
.0026					freeMemory:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.30a1					CommandDIM:
.30a1	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.30a3	29 c0		and #$c0			and 	#$C0
.30a5	c9 40		cmp #$40			cmp 	#$40
.30a7	d0 39		bne $30e2			bne 	_CDSyntax
.30a9	20 5b 48	jsr $485b			jsr 	VARGetInfo 					; get information
.30ac	ad 26 06	lda $0626			lda 	VARType 					; check array.
.30af	29 02		and #$02			and 	#2
.30b1	f0 2f		beq $30e2			beq 	_CDSyntax
.30b3	20 0d 48	jsr $480d			jsr 	VARFind 					; does it already exist
.30b6	b0 2d		bcs $30e5			bcs 	_CDExists
.30b8	20 b9 47	jsr $47b9			jsr 	VARCreate 					; create it - returns data ptr in XA
.30bb	da		phx				phx 								; save target address
.30bc	48		pha				pha
.30bd	ad 26 06	lda $0626			lda 	VARType 					; type ID.
.30c0	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.30c2	20 e8 30	jsr $30e8			jsr 	CreateArray 				; create array to XA
.30c5	84 22		sty $22				sty 	zTemp1 						; save Y
.30c7	7a		ply				ply 								; restore target to zTemp0
.30c8	84 20		sty $20				sty 	zTemp0
.30ca	7a		ply				ply
.30cb	84 21		sty $21				sty 	zTemp0+1
.30cd	92 20		sta ($20)			sta 	(zTemp0) 					; save new array
.30cf	a0 01		ldy #$01			ldy 	#1
.30d1	8a		txa				txa
.30d2	91 20		sta ($20),y			sta 	(zTemp0),y
.30d4	a4 22		ldy $22				ldy 	zTemp1 						; restore zTemp1
.30d6	20 72 45	jsr $4572			jsr 	ERRCheckRParen 				; check )
.30d9	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.30db	c8		iny				iny
.30dc	c9 99		cmp #$99			cmp 	#PR_COMMA
.30de	f0 c1		beq $30a1			beq 	CommandDIM
.30e0	88		dey				dey
.30e1	60		rts				rts
.30e2					_CDSyntax:
.30e2	4c d5 43	jmp $43d5		jmp	ErrorV_syntax
.30e5					_CDExists:
.30e5	4c 9d 44	jmp $449d		jmp	ErrorV_redefine
.30e8					CreateArray:
.30e8	8d 04 05	sta $0504			sta 	CAType						; save type
.30eb	20 02 36	jsr $3602			jsr 	EXPEvalInteger16 			; get array dimension to R0
.30ee	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.30f0	c9 99		cmp #$99			cmp 	#PR_COMMA
.30f2	f0 04		beq $30f8			beq 	_CATwoDimensions
.30f4	20 44 31	jsr $3144			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.30f7	60		rts				rts
.30f8					_CATwoDimensions:
.30f8	a5 0f		lda $0f				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.30fa	8d 06 05	sta $0506			sta 	CADim1+1
.30fd	a5 0e		lda $0e				lda 	IFR0+IM0
.30ff	8d 05 05	sta $0505			sta 	CADim1+0
.3102	20 7a 45	jsr $457a			jsr 	ERRCheckComma 				; check comma
.3105	20 02 36	jsr $3602			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.3108	5a		phy				phy 								; save Y position
.3109	18		clc				clc 								; allocate the outer array of pointers.
.310a	ae 06 05	ldx $0506			ldx 	CADim1+1
.310d	ad 05 05	lda $0505			lda 	CADim1
.3110	20 83 31	jsr $3183			jsr 	CSAAllocate 				; allocate the outer array
.3113	da		phx				phx									; save this address on the stack
.3114	48		pha				pha
.3115	86 25		stx $25				stx 	zTemp2+1					; and in zTemp2
.3117	85 24		sta $24				sta 	zTemp2
.3119					_CACreateSubLoop:
.3119	38		sec				sec
.311a	20 44 31	jsr $3144			jsr 	CreateSingleArray 			; create data array of required size.
.311d	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.311f	91 24		sta ($24),y			sta 	(zTemp2),y
.3121	8a		txa				txa
.3122	c8		iny				iny
.3123	91 24		sta ($24),y			sta 	(zTemp2),y
.3125	18		clc				clc  								; next slot.
.3126	a5 24		lda $24				lda 	zTemp2
.3128	69 02		adc #$02			adc 	#2
.312a	85 24		sta $24				sta 	zTemp2
.312c	90 02		bcc $3130			bcc 	_CACNoCarry
.312e	e6 25		inc $25				inc 	zTemp2+1
.3130					_CACNoCarry:
.3130	ad 05 05	lda $0505			lda 	CADim1 						; use DIM1 as a counter
.3133	d0 03		bne $3138			bne 	_CACNoBorrow
.3135	ce 06 05	dec $0506			dec 	CADim1+1
.3138					_CACNoBorrow:
.3138	ce 05 05	dec $0505			dec 	CADim1
.313b	ad 06 05	lda $0506			lda 	CADim1+1 					; but do one more.
.313e	10 d9		bpl $3119			bpl 	_CACreateSubLoop
.3140	68		pla				pla
.3141	fa		plx				plx
.3142	7a		ply				ply
.3143	60		rts				rts
.3144					CreateSingleArray:
.3144	5a		phy				phy
.3145	38		sec				sec 								; allocate memory block all zeros.
.3146	a5 0e		lda $0e				lda 	IFR0+IM0
.3148	a6 0f		ldx $0f				ldx 	IFR0+IM1
.314a	20 83 31	jsr $3183			jsr 	CSAAllocate
.314d	ac 04 05	ldy $0504			ldy 	CAType 						; if numbers, we don't need to initialise.
.3150	f0 2f		beq $3181			beq 	_CSANoInit
.3152	da		phx				phx 								; save address of new array
.3153	48		pha				pha
.3154	85 20		sta $20				sta 	zTemp0 						; address in zTemp0
.3156	86 21		stx $21				stx 	zTemp0+1
.3158	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.315a	b1 20		lda ($20),y			lda 	(zTemp0),y
.315c	a8		tay				tay
.315d	b2 20		lda ($20)			lda 	(zTemp0)
.315f	aa		tax				tax
.3160					_CSAEraseString:
.3160	5a		phy				phy
.3161	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.3163	a9 80		lda #$80			lda 	#$80
.3165	91 20		sta ($20),y			sta 	(zTemp0),y
.3167	7a		ply				ply
.3168	18		clc				clc 								; add 4 to next slot.
.3169	a5 20		lda $20				lda 	zTemp0
.316b	69 04		adc #$04			adc 	#4
.316d	85 20		sta $20				sta 	zTemp0
.316f	90 02		bcc $3173			bcc 	_CSAENoCarry
.3171	e6 21		inc $21				inc 	zTemp0+1
.3173					_CSAENoCarry:
.3173	e0 00		cpx #$00			cpx 	#0
.3175	d0 01		bne $3178			bne 	_CSANoBorrow
.3177	88		dey				dey
.3178					_CSANoBorrow:
.3178	ca		dex				dex
.3179	d0 e5		bne $3160			bne 	_CSAEraseString
.317b	c0 00		cpy #$00			cpy 	#0
.317d	d0 e1		bne $3160			bne 	_CSAEraseString
.317f	68		pla				pla
.3180	fa		plx				plx
.3181					_CSANoInit:
.3181	7a		ply				ply
.3182	60		rts				rts
.3183					CSAAllocate:
.3183	08		php				php 								; save type flag.
.3184	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.3185	d0 01		bne $3188			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.3187	e8		inx				inx
.3188					_CSAANoCarry:
.3188	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.318a	b0 2e		bcs $31ba			bcs 	_CSARange
.318c	28		plp				plp 								; restore type flag
.318d	08		php				php 								; save it back again.
.318e	da		phx				phx 								; save size.
.318f	48		pha				pha
.3190	86 21		stx $21				stx  	zTemp0+1 					; now in ztemp0+1:X
.3192	90 03		bcc $3197			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.3194	0a		asl a				asl 	a
.3195	26 21		rol $21				rol 	zTemp0+1
.3197					_CSAATimes2:
.3197	0a		asl a				asl 	a
.3198	26 21		rol $21				rol 	zTemp0+1
.319a	18		clc				clc
.319b	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.319d	90 02		bcc $31a1			bcc 	_CSAANoCarry2
.319f	e6 21		inc $21				inc 	zTemp0+1
.31a1					_CSAANoCarry2:
.31a1	a6 21		ldx $21				ldx 	zTemp0+1 					; XA is the bytes required.
.31a3	20 6b 30	jsr $306b			jsr 	AllocateMemory 				; allocate memory to XA
.31a6	86 21		stx $21				stx 	zTemp0+1 					; save pointers
.31a8	85 20		sta $20				sta 	zTemp0
.31aa	68		pla				pla  								; write element count to first 2 bytes
.31ab	92 20		sta ($20)			sta 	(zTemp0)
.31ad	68		pla				pla 								; msb of element count
.31ae	28		plp				plp 								; CC if pointer array
.31af	b0 02		bcs $31b3			bcs 	_CSAAIsData
.31b1	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.31b3					_CSAAIsData:
.31b3	a0 01		ldy #$01			ldy 	#1
.31b5	91 20		sta ($20),y			sta 	(zTemp0),y
.31b7	a5 20		lda $20				lda 	zTemp0 						; fix XA back up again
.31b9	60		rts				rts
.31ba					_CSARange:
.31ba	4c e6 43	jmp $43e6		jmp	ErrorV_range
.0504					CAType:
>0504							.fill 	1
.0505					CADim1:
>0505							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.31bd					Command_Doke:
.31bd	38		sec				sec
.31be	80 01		bra $31c1			bra 	DPCommon
.31c0					Command_Poke:
.31c0	18		clc				clc
.31c1					DPCommon:
.31c1	08		php				php 								; CS if DOKE
.31c2	20 02 36	jsr $3602			jsr 	EXPEvalInteger16 			; address
.31c5	a5 0e		lda $0e				lda 	IFR0+IM0 					; push on stack
.31c7	48		pha				pha
.31c8	a5 0f		lda $0f				lda 	IFR0+IM1
.31ca	48		pha				pha
.31cb	20 7a 45	jsr $457a			jsr 	ERRCheckComma 				; [dp]oke address,data
.31ce	20 02 36	jsr $3602			jsr 	EXPEvalInteger16
.31d1	68		pla				pla 								; get address back
.31d2	85 21		sta $21				sta 	zTemp0+1
.31d4	68		pla				pla
.31d5	85 20		sta $20				sta 	zTemp0
.31d7	a5 0e		lda $0e				lda 	IFR0+IM0
.31d9	92 20		sta ($20)			sta 	(zTemp0)
.31db	28		plp				plp
.31dc	90 08		bcc $31e6			bcc 	_DPExit
.31de	5a		phy				phy
.31df	a5 0f		lda $0f				lda 	IFR0+IM1
.31e1	a0 01		ldy #$01			ldy 	#1
.31e3	91 20		sta ($20),y			sta 	(zTemp0),y
.31e5	7a		ply				ply
.31e6					_DPExit:
.31e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.31e7					Command_Print:
.31e7					Command_IP_Main:
.31e7	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.31e8					_CPLoop:
.31e8	08		php				php 								; save last action flag
.31e9	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next character
.31eb	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.31ed	f0 3e		beq $322d			beq 	_CPExit 					; without consuming
.31ef	c9 9b		cmp #$9b			cmp 	#PR_COLON
.31f1	f0 3a		beq $322d			beq 	_CPExit
.31f3	68		pla				pla 								; throw last action flag
.31f4	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; next character and bump
.31f6	c8		iny				iny
.31f7	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.31f9	f0 2f		beq $322a			beq 	_CPContinueWithSameLine
.31fb	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.31fd	f0 26		beq $3225			beq 	_CPTab
.31ff	88		dey				dey 								; undo the get.
.3200	20 b0 35	jsr $35b0			jsr 	EXPEvaluateExpression 		; evaluate expression.
.3203	24 11		bit $11				bit 	IFR0+IExp 					; is it a number ?
.3205	10 14		bpl $321b			bpl 	_CPNumber
.3207	5a		phy				phy
.3208	18		clc				clc 								; string address to YX
.3209	a5 0e		lda $0e				lda 	IFR0+IM0
.320b	aa		tax				tax
.320c	a5 0f		lda $0f				lda 	IFR0+IM1
.320e	a8		tay				tay
.320f	e8		inx				inx 								; point to 1st character
.3210	d0 01		bne $3213			bne 	_CPNoCarry
.3212	c8		iny				iny
.3213					_CPNoCarry:
.3213	b2 0e		lda ($0e)			lda 	(IFR0+IM0)					; length to A
.3215	20 36 32	jsr $3236			jsr 	CPPrintAYX 					; print AYX
.3218	7a		ply				ply
.3219	80 cc		bra $31e7			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.321b					_CPNumber:
.321b	5a		phy				phy
.321c	20 17 4d	jsr $4d17			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.321f	20 36 32	jsr $3236			jsr 	CPPrintAYX 					; print AYX
.3222	7a		ply				ply
.3223	80 c2		bra $31e7			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.3225					_CPTab:
.3225	a9 09		lda #$09			lda 	#9 							; print TAB
.3227	20 49 32	jsr $3249			jsr 	CPPrintA
.322a					_CPContinueWithSameLine:
.322a	38		sec				sec 								; loop round with carry set, which
.322b	80 bb		bra $31e8			bra 	_CPLoop 					; will inhibit final CR
.322d					_CPExit:
.322d	28		plp				plp 								; get last action flag
.322e	b0 05		bcs $3235			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.3230	a9 0d		lda #$0d			lda 	#13 						; print new line
.3232	20 49 32	jsr $3249			jsr 	CPPrintA
.3235					_CPExit2:
.3235	60		rts				rts
.3236					CPPrintAYX:
.3236	86 20		stx $20				stx 	zTemp0
.3238	84 21		sty $21				sty 	zTemp0+1
.323a	aa		tax				tax
.323b	f0 0b		beq $3248			beq 	_CPPrintExit
.323d	a0 00		ldy #$00			ldy 	#0
.323f					_CPPrintAYXLoop:
.323f	b1 20		lda ($20),y			lda 	(zTemp0),y
.3241	20 49 32	jsr $3249			jsr 	CPPrintA
.3244	c8		iny				iny
.3245	ca		dex				dex
.3246	d0 f7		bne $323f			bne 	_CPPrintAYXLoop
.3248					_CPPrintExit:
.3248	60		rts				rts
.3249					CPPrintA:
.3249	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.324c					CommandLET:
.324c	20 78 36	jsr $3678			jsr 	EXPTermR0 					; get term
.324f	90 6d		bcc $32be			bcc 	CLError 					; must be a reference term.
.3251	a5 0e		lda $0e				lda 	IFR0+IM0 					; push address and type onto stack
.3253	48		pha				pha
.3254	a5 0f		lda $0f				lda 	IFR0+IM1
.3256	48		pha				pha
.3257	a5 11		lda $11				lda 	IFR0+IExp
.3259	48		pha				pha
.325a	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.325c	20 82 45	jsr $4582			jsr 	ERRCheckA
.325f	20 b0 35	jsr $35b0			jsr 	EXPEvaluateExpression 		; right hand side.
.3262	68		pla				pla 								; type of l-expr
.3263	45 11		eor $11				eor 	IFR0+IExp 					; check types match
.3265	30 5a		bmi $32c1			bmi 	CLType
.3267	fa		plx				plx 	 							; pop target address to zTemp0
.3268	86 21		stx $21				stx 	zTemp0+1
.326a	fa		plx				plx
.326b	86 20		stx $20				stx 	zTemp0
.326d					AssignData:
.326d	a5 11		lda $11				lda 	IFR0+IExp 					; string assignment
.326f	30 15		bmi $3286			bmi 	_CLStringAssign
.3271	5a		phy				phy
.3272	a0 03		ldy #$03			ldy 	#3
.3274	91 20		sta ($20),y			sta 	(zTemp0),y
.3276	88		dey				dey
.3277	a5 10		lda $10				lda 	IFR0+IM2
.3279	91 20		sta ($20),y			sta 	(zTemp0),y
.327b	88		dey				dey
.327c	a5 0f		lda $0f				lda 	IFR0+IM1
.327e	91 20		sta ($20),y			sta 	(zTemp0),y
.3280	a5 0e		lda $0e				lda 	IFR0+IM0
.3282	92 20		sta ($20)			sta 	(zTemp0)
.3284	7a		ply				ply
.3285	60		rts				rts
.3286					_CLStringAssign:
.3286	5a		phy				phy
.3287	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.3289	b1 20		lda ($20),y			lda 	(zTemp0),y
.328b	12 20		ora ($20)			ora 	(zTemp0)
.328d	f0 23		beq $32b2			beq 	_CLConcreteString
.328f	b2 20		lda ($20)			lda 	(zTemp0) 					; copy address of string to zTemp1
.3291	85 22		sta $22				sta 	zTemp1
.3293	b1 20		lda ($20),y			lda 	(zTemp0),y
.3295	85 23		sta $23				sta 	zTemp1+1
.3297	b2 22		lda ($22)			lda 	(zTemp1) 					; bytes available in the new slot
.3299	38		sec				sec 								; we want 3 for slot size, status, string size.
.329a	e9 03		sbc #$03			sbc 	#3
.329c	d2 0e		cmp ($0e)			cmp 	(IFR0) 						; compare against string size.
.329e	90 12		bcc $32b2			bcc 	_CLConcreteString 			; if so, concrete the string again.
.32a0	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.32a2	1a		inc a				inc 	a
.32a3	aa		tax				tax
.32a4	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.32a6					_CLReplaceString:
.32a6	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; copy new string into previous space.
.32a8	c8		iny				iny
.32a9	c8		iny				iny
.32aa	91 22		sta ($22),y			sta 	(zTemp1),y
.32ac	88		dey				dey
.32ad	ca		dex				dex
.32ae	d0 f6		bne $32a6			bne 	_CLReplaceString
.32b0	80 0a		bra $32bc			bra 	_CLExit
.32b2					_CLConcreteString:
.32b2	20 f5 45	jsr $45f5			jsr 	StringConcrete  			; concreted string in XA.
.32b5	a0 01		ldy #$01			ldy 	#1 							; store the address
.32b7	92 20		sta ($20)			sta 	(zTemp0)
.32b9	8a		txa				txa
.32ba	91 20		sta ($20),y			sta 	(zTemp0),y
.32bc					_CLExit:
.32bc	7a		ply				ply
.32bd	60		rts				rts
.32be					CLError:
.32be	4c 08 45	jmp $4508		jmp	ErrorV_variable
.32c1					CLType:
.32c1	4c 05 44	jmp $4405		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.32c4					Command_LIST:
.32c4	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.32c7	9c 08 05	stz $0508			stz 	CLFrom+1
.32ca	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.32cc	c9 99		cmp #$99			cmp 	#PR_COMMA
.32ce	f0 1d		beq $32ed			beq 	_CLToLine
.32d0	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.32d2	f0 37		beq $330b			beq 	_CLDefaultTo
.32d4	20 02 36	jsr $3602			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.32d7	a5 0e		lda $0e				lda 	IFR0+IM0
.32d9	8d 07 05	sta $0507			sta 	CLFrom
.32dc	8d 09 05	sta $0509			sta 	CLTo
.32df	a5 0f		lda $0f				lda 	IFR0+IM1
.32e1	8d 08 05	sta $0508			sta 	CLFrom+1
.32e4	8d 0a 05	sta $050a			sta 	CLTo+1
.32e7	b1 1e		lda ($1e),y			lda 	(codePtr),y
.32e9	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.32eb	f0 26		beq $3313			beq 	_CLList
.32ed					_CLToLine:
.32ed	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.32ef	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.32f1	f0 18		beq $330b			beq 	_CLDefaultTo
.32f3	20 7a 45	jsr $457a			jsr 	ERRCheckComma 				; sep comma
.32f6	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.32f8	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.32fa	f0 0f		beq $330b			beq 	_CLDefaultTo
.32fc	20 02 36	jsr $3602			jsr 	EXPEvalInteger16 			; there's a To value.
.32ff	a5 0e		lda $0e				lda 	IFR0+IM0
.3301	8d 09 05	sta $0509			sta 	CLTo
.3304	a5 0f		lda $0f				lda 	IFR0+IM1
.3306	8d 0a 05	sta $050a			sta 	CLTo+1
.3309	80 08		bra $3313			bra 	_CLList
.330b					_CLDefaultTo:
.330b	a9 ff		lda #$ff			lda 	#$FF
.330d	8d 09 05	sta $0509			sta 	CLTo
.3310	8d 0a 05	sta $050a			sta 	CLTo+1
.3313					_CLList:
.3313	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.3316	85 1f		sta $1f				sta 	codePtr+1
.3318	64 1e		stz $1e				stz 	codePtr
.331a	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.331c	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.331e	20 6c 3c	jsr $3c6c			jsr 	TOKSetDetokeniseOutput
.3321					_CLLoop:
.3321	b2 1e		lda ($1e)			lda 	(codePtr) 					; finished
.3323	f0 4a		beq $336f			beq 	_CLExit
.3325	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.3328	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.332b	d0 45		bne $3372			bne 	_CLBreak
.332d	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.332f	20 75 33	jsr $3375			jsr 	_CLCompareLine
.3332	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.3334	f0 2c		beq $3362			beq 	_CLNext
.3336	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.3338	20 75 33	jsr $3375			jsr 	_CLCompareLine
.333b	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.333d	f0 23		beq $3362			beq 	_CLNext
.333f	a0 02		ldy #$02			ldy 	#2 							; print line #
.3341	b1 1e		lda ($1e),y			lda 	(codePtr),y
.3343	aa		tax				tax
.3344	88		dey				dey
.3345	b1 1e		lda ($1e),y			lda 	(codePtr),y
.3347	20 d3 46	jsr $46d3			jsr 	WriteIntXA
.334a	a9 20		lda #$20			lda 	#32
.334c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.334f	a4 1f		ldy $1f				ldy 	codePtr+1 					; point YX to tokenised code/
.3351	a5 1e		lda $1e				lda 	codePtr
.3353	18		clc				clc
.3354	69 03		adc #$03			adc 	#3
.3356	aa		tax				tax
.3357	90 01		bcc $335a			bcc 	_CLNoCarry2
.3359	c8		iny				iny
.335a					_CLNoCarry2:
.335a	20 27 3c	jsr $3c27			jsr 	TOKDetokenise
.335d	a9 0d		lda #$0d			lda 	#13	 						; next line
.335f	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.3362					_CLNext:
.3362	18		clc				clc 								; advance to next line.
.3363	b2 1e		lda ($1e)			lda 	(codePtr)
.3365	65 1e		adc $1e				adc 	codePtr
.3367	85 1e		sta $1e				sta 	codePtr
.3369	90 02		bcc $336d			bcc 	_CLNoCarry
.336b	e6 1f		inc $1f				inc 	codePtr+1
.336d					_CLNoCarry:
.336d	80 b2		bra $3321			bra 	_CLLoop
.336f					_CLExit:
.336f	4c f2 46	jmp $46f2			jmp 	WarmStart
.3372					_CLBreak:
.3372	4c 60 45	jmp $4560		jmp	ErrorV_break
.3375					_CLCompareLine:
.3375	a0 01		ldy #$01			ldy 	#1
.3377	38		sec				sec
.3378	b1 1e		lda ($1e),y			lda 	(codePtr),y
.337a	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.337d	85 20		sta $20				sta 	zTemp0
.337f	c8		iny				iny
.3380	b1 1e		lda ($1e),y			lda 	(codePtr),y
.3382	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.3385	90 0a		bcc $3391			bcc 	_CLIsNegative
.3387	d0 05		bne $338e			bne 	_CLIsPositive
.3389	a5 20		lda $20				lda 	zTemp0
.338b	d0 01		bne $338e			bne 	_CLIsPositive
.338d	60		rts				rts
.338e					_CLIsPositive:
.338e	a9 01		lda #$01			lda 	#1
.3390	60		rts				rts
.3391					_CLIsNegative:
.3391	a9 ff		lda #$ff			lda 	#255
.3393	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.3394					Command_NEW:
.3394	20 11 3e	jsr $3e11			jsr 	PGMNewProgram
.3397	20 51 30	jsr $3051			jsr 	Command_CLEAR
.339a	4c 15 34	jmp $3415			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.339d					Command_REM:
.339d					Command_REM2:
.339d	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; optional string parameter
.339f	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.33a1	d0 06		bne $33a9			bne 	_CRExit
.33a3	c8		iny				iny 								; skip over it, it's a comment.
.33a4	98		tya				tya
.33a5	38		sec				sec
.33a6	71 1e		adc ($1e),y			adc 	(codePtr),y
.33a8	a8		tay				tay
.33a9					_CRExit:
.33a9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.33aa					Command_RUN:
.33aa	20 51 30	jsr $3051			jsr 	Command_CLEAR 				; clear everything out.
.33ad	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.33b0	85 1f		sta $1f				sta 	codePtr+1
.33b2	64 1e		stz $1e				stz 	codePtr
.33b4	80 0b		bra $33c1			bra 	RUNNewLine
.33b6					RUNEndOfLine:
.33b6	18		clc				clc 								; advance to next line.
.33b7	b2 1e		lda ($1e)			lda 	(codePtr)
.33b9	65 1e		adc $1e				adc 	codePtr
.33bb	85 1e		sta $1e				sta 	codePtr
.33bd	90 02		bcc $33c1			bcc 	_RELNoCarry
.33bf	e6 1f		inc $1f				inc 	codePtr+1
.33c1					_RELNoCarry:
.33c1					RUNNewLine:
.33c1	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.33c3	9a		txs				txs
.33c4	b2 1e		lda ($1e)			lda 	(codePtr) 					; check off end of program
.33c6	f0 4d		beq $3415			beq 	Command_END
.33c8	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.33ca	b1 1e		lda ($1e),y			lda 	(codePtr),y
.33cc	8d 21 06	sta $0621			sta 	ERRLine
.33cf	c8		iny				iny
.33d0	b1 1e		lda ($1e),y			lda 	(codePtr),y
.33d2	8d 22 06	sta $0622			sta 	ERRLine+1
.33d5	c8		iny				iny 								; offset into codePtr for start of line.
.33d6					RUNNewCommand:
.33d6	9c 1c 06	stz $061c			stz 	stringInitialised 			; reset string system.
.33d9	ce 0b 05	dec $050b			dec 	checkCounter
.33dc	d0 0a		bne $33e8			bne 	_RNCNoCheck
.33de	5a		phy				phy 								; keyboard check.
.33df	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.33e2	7a		ply				ply
.33e3	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.33e6	d0 1e		bne $3406			bne 	_RUNBreak
.33e8					_RNCNoCheck:
.33e8	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token
.33ea	10 1d		bpl $3409			bpl		_RUNNotToken 				; probably an identifier
.33ec	c8		iny				iny 								; consume token
.33ed	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.33ef	f0 e5		beq $33d6			beq 	RUNNewCommand
.33f1	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.33f3	b0 0e		bcs $3403			bcs 	_RUNSyntax
.33f5	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.33f7	90 0a		bcc $3403			bcc 	_RUNSyntax
.33f9	0a		asl a				asl 	a 							; double into X.
.33fa	aa		tax				tax
.33fb	20 00 34	jsr $3400			jsr 	_RUNDispatchMain			; call the main dispatcher
.33fe	80 d6		bra $33d6			bra 	RUNNewCommand
.3400					_RUNDispatchMain:
.3400	7c 27 3b	jmp ($3b27,x)			jmp 	(VectorTable,x)
.3403					_RUNSyntax:
.3403	4c d5 43	jmp $43d5		jmp	ErrorV_syntax
.3406					_RUNBreak:
.3406	4c 60 45	jmp $4560		jmp	ErrorV_break
.3409					_RUNNotToken:
.3409	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.340b	90 f6		bcc $3403			bcc 	_RUNSyntax
.340d	20 4c 32	jsr $324c			jsr 	CommandLET 					; assignment
.3410	80 c4		bra $33d6			bra 	RUNNewCommand 				; loop round.
.3412					Command_Shift_Handler:
.3412	4c 17 44	jmp $4417		jmp	ErrorV_unimplemented
.3415					Command_END:
.3415	4c f2 46	jmp $46f2			jmp 	WarmStart
.050b					checkCounter:
>050b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.3418					Command_STOP:
.3418	4c 79 44	jmp $4479		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.341b					Command_Sys:
.341b	20 02 36	jsr $3602			jsr 	EXPEvalInteger16 			; execution address
.341e	5a		phy				phy
.341f	ad 69 06	lda $0669			lda 	('A'-'A')*4 + FastVariables ; load AXY
.3422	ae c5 06	ldx $06c5			ldx 	('X'-'A')*4 + FastVariables
.3425	ac c9 06	ldy $06c9			ldy 	('Y'-'A')*4 + FastVariables
.3428	20 2d 34	jsr $342d			jsr 	_CSCallIFR0 				; call the code
.342b	7a		ply				ply
.342c	60		rts				rts
.342d					_CSCallIFR0:
.342d	6c 0e 00	jmp ($000e)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.3430					NoExec01:
.3430					NoExec02:
.3430					NoExec03:
.3430					NoExec04:
.3430					NoExec05:
.3430					NoExec06:
.3430					NoExec07:
.3430					NoExec08:
.3430	4c d5 43	jmp $43d5		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.3433					EXPBinAdd:
.3433	24 11		bit $11				bit 	IFR0+IExp
.3435	30 6f		bmi $34a6			bmi 	EXPConcatenate
.3437	a2 12		ldx #$12			ldx 	#IFR1
.3439	4c 10 49	jmp $4910			jmp 	IFloatAdd
.343c					EXPBinSub:
.343c	24 11		bit $11				bit 	IFR0+IExp
.343e	30 3f		bmi $347f			bmi 	EXPTypeError
.3440	a2 12		ldx #$12			ldx 	#IFR1
.3442	4c 09 49	jmp $4909			jmp 	IFloatSubtract
.3445					EXPBinMul:
.3445	24 11		bit $11				bit 	IFR0+IExp
.3447	30 36		bmi $347f			bmi 	EXPTypeError
.3449	a2 12		ldx #$12			ldx 	#IFR1
.344b	4c ba 49	jmp $49ba			jmp 	IFloatMultiply
.344e					EXPBinFDiv:
.344e	24 11		bit $11				bit 	IFR0+IExp
.3450	30 2d		bmi $347f			bmi 	EXPTypeError
.3452	a2 12		ldx #$12			ldx 	#IFR1
.3454	20 3d 4c	jsr $4c3d			jsr 	IFloatDivideFloat
.3457	b0 0f		bcs $3468			bcs 	EXPDZero
.3459	60		rts				rts
.345a					EXPBinIDiv:
.345a	24 11		bit $11				bit 	IFR0+IExp
.345c	30 21		bmi $347f			bmi 	EXPTypeError
.345e	a2 12		ldx #$12			ldx 	#IFR1
.3460	20 3d 4c	jsr $4c3d			jsr 	IFloatDivideFloat
.3463	b0 03		bcs $3468			bcs 	EXPDZero
.3465	4c 1a 4c	jmp $4c1a			jmp 	IFloatIntegerR0
.3468					EXPDZero:
.3468	4c 4e 44	jmp $444e		jmp	ErrorV_divzero
.346b					EXPBinIMod:
.346b	24 11		bit $11				bit 	IFR0+IExp
.346d	30 10		bmi $347f			bmi 	EXPTypeError
.346f	a2 12		ldx #$12			ldx 	#IFR1
.3471	5a		phy				phy
.3472	20 52 4b	jsr $4b52			jsr 	IFPreProcessBitwise 		; set up everything.
.3475	d0 05		bne $347c			bne 	EXPDRange
.3477	20 8b 4a	jsr $4a8b			jsr 	IFloatModulusInteger
.347a	7a		ply				ply
.347b	60		rts				rts
.347c					EXPDRange:
.347c	4c e6 43	jmp $43e6		jmp	ErrorV_range
.347f					EXPTypeError:
.347f	4c 05 44	jmp $4405		jmp	ErrorV_type
.3482					EXPBinAnd:
.3482	24 11		bit $11				bit 	IFR0+IExp
.3484	30 f9		bmi $347f			bmi 	EXPTypeError
.3486	a2 12		ldx #$12			ldx 	#IFR1
.3488	20 0d 4b	jsr $4b0d			jsr 	IFloatBitwiseAnd
.348b	b0 ef		bcs $347c			bcs 	EXPDRange
.348d	60		rts				rts
.348e					EXPBinOr:
.348e	24 11		bit $11				bit 	IFR0+IExp
.3490	30 ed		bmi $347f			bmi 	EXPTypeError
.3492	a2 12		ldx #$12			ldx 	#IFR1
.3494	20 24 4b	jsr $4b24			jsr 	IFloatBitwiseOr
.3497	b0 e3		bcs $347c			bcs 	EXPDRange
.3499	60		rts				rts
.349a					EXPBinXor:
.349a	24 11		bit $11				bit 	IFR0+IExp
.349c	30 e1		bmi $347f			bmi 	EXPTypeError
.349e	a2 12		ldx #$12			ldx 	#IFR1
.34a0	20 3b 4b	jsr $4b3b			jsr 	IFloatBitwiseXor
.34a3	b0 d7		bcs $347c			bcs 	EXPDRange
.34a5	60		rts				rts
.34a6					EXPConcatenate:
.34a6	18		clc				clc
.34a7	b2 0e		lda ($0e)			lda 	(IFR0) 	 					; work out total length
.34a9	72 12		adc ($12)			adc 	(IFR1)
.34ab	b0 2d		bcs $34da			bcs 	_EXPCError
.34ad	a6 0e		ldx $0e				ldx 	IFR0 						; push R0 string on stack.
.34af	da		phx				phx
.34b0	a6 0f		ldx $0f				ldx 	IFR0+1
.34b2	da		phx				phx
.34b3	20 68 46	jsr $4668			jsr 	StringTempAllocate 			; allocate string, set up return
.34b6	a6 13		ldx $13				ldx 	IFR1+1 						; copy first string.
.34b8	a5 12		lda $12				lda 	IFR1
.34ba	20 c3 34	jsr $34c3			jsr 	_EXPCCopyXA
.34bd	fa		plx				plx 								; copy second string
.34be	68		pla				pla
.34bf	20 c3 34	jsr $34c3			jsr 	_EXPCCopyXA
.34c2	60		rts				rts
.34c3					_EXPCCopyXA:
.34c3	86 21		stx $21				stx 	zTemp0+1 					; save address to zTemp0
.34c5	85 20		sta $20				sta 	zTemp0
.34c7	b2 20		lda ($20)			lda 	(zTemp0)					; length
.34c9	f0 0e		beq $34d9			beq 	_EXPCCExit 					; nothing.
.34cb	aa		tax				tax 								; count
.34cc	5a		phy				phy 								; start positioin
.34cd	a0 01		ldy #$01			ldy 	#1
.34cf					_EXPCCLoop:
.34cf	b1 20		lda ($20),y			lda 	(zTemp0),y 					; write characters one at a time.
.34d1	20 9d 46	jsr $469d			jsr 	StringTempWrite
.34d4	c8		iny				iny
.34d5	ca		dex				dex
.34d6	d0 f7		bne $34cf			bne 	_EXPCCLoop
.34d8	7a		ply				ply
.34d9					_EXPCCExit:
.34d9	60		rts				rts
.34da					_EXPCError:
.34da	4c f2 44	jmp $44f2		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.34dd					EXPReturnTrue:
.34dd	a2 0e		ldx #$0e			ldx 	#IFR0
.34df	a9 01		lda #$01			lda 	#1
.34e1	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.34e4	20 25 4f	jsr $4f25			jsr 	IFloatNegate
.34e7	60		rts				rts
.34e8					EXPReturnFalse:
.34e8	a2 0e		ldx #$0e			ldx 	#IFR0
.34ea	4c 1a 4f	jmp $4f1a			jmp 	IFloatSetZero
.34ed					EXPCompareEqual:
.34ed	20 23 35	jsr $3523			jsr 	EXPCompareBaseCode
.34f0	c9 00		cmp #$00			cmp 	#0
.34f2	f0 e9		beq $34dd			beq 	EXPReturnTrue
.34f4	80 f2		bra $34e8			bra 	EXPReturnFalse
.34f6					EXPCompareLess:
.34f6	20 23 35	jsr $3523			jsr 	EXPCompareBaseCode
.34f9	c9 ff		cmp #$ff			cmp 	#$FF
.34fb	f0 e0		beq $34dd			beq 	EXPReturnTrue
.34fd	80 e9		bra $34e8			bra 	EXPReturnFalse
.34ff					EXPCompareGreater:
.34ff	20 23 35	jsr $3523			jsr 	EXPCompareBaseCode
.3502	c9 01		cmp #$01			cmp 	#1
.3504	f0 d7		beq $34dd			beq 	EXPReturnTrue
.3506	80 e0		bra $34e8			bra 	EXPReturnFalse
.3508					EXPCompareNotEqual:
.3508	20 23 35	jsr $3523			jsr 	EXPCompareBaseCode
.350b	c9 00		cmp #$00			cmp 	#0
.350d	d0 ce		bne $34dd			bne 	EXPReturnTrue
.350f	80 d7		bra $34e8			bra 	EXPReturnFalse
.3511					EXPCompareLessEqual:
.3511	20 23 35	jsr $3523			jsr 	EXPCompareBaseCode
.3514	c9 01		cmp #$01			cmp 	#1
.3516	d0 c5		bne $34dd			bne 	EXPReturnTrue
.3518	80 ce		bra $34e8			bra 	EXPReturnFalse
.351a					EXPCompareGreaterEqual:
.351a	20 23 35	jsr $3523			jsr 	EXPCompareBaseCode
.351d	c9 ff		cmp #$ff			cmp 	#$FF
.351f	d0 bc		bne $34dd			bne 	EXPReturnTrue
.3521	80 c5		bra $34e8			bra 	EXPReturnFalse
.3523					EXPCompareBaseCode:
.3523	24 11		bit $11				bit 	IFR0+IExp 					; string compare ?
.3525	30 10		bmi $3537			bmi 	_EXCBCString
.3527	a2 12		ldx #$12			ldx 	#IFR1						; float compare
.3529	20 e8 4b	jsr $4be8			jsr 	IFloatCompare
.352c	a5 0e		lda $0e				lda 	IFR0+IM0
.352e	f0 06		beq $3536			beq 	_EXCBCExit 					; return 0 if zero
.3530	24 11		bit $11				bit 	IFR0+IExp 					; return 1 if +ve
.3532	50 02		bvc $3536			bvc 	_EXCBCExit
.3534	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.3536					_EXCBCExit:
.3536	60		rts				rts
.3537					_EXCBCString:
.3537	5a		phy				phy
.3538	b2 0e		lda ($0e)			lda 	(IFR0) 						; length of smaller of the two in X.
.353a	d2 12		cmp ($12)			cmp 	(IFR1)
.353c	90 02		bcc $3540			bcc 	_EXCBCSmaller
.353e	b2 12		lda ($12)			lda 	(IFR1)
.3540					_EXCBCSmaller:
.3540	aa		tax				tax
.3541	f0 0d		beq $3550			beq 	_EXCBCMatches 				; if zero common length matches
.3543	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.3545					_EXCBCCheckSmallerMatches:
.3545	c8		iny				iny 								; compare directly as far as common length
.3546	38		sec				sec
.3547	b1 12		lda ($12),y			lda 	(IFR1),y
.3549	f1 0e		sbc ($0e),y			sbc 	(IFR0),y
.354b	d0 08		bne $3555			bne 	_EXCBCExit2
.354d	ca		dex				dex
.354e	d0 f5		bne $3545			bne 	_EXCBCCheckSmallerMatches
.3550					_EXCBCMatches:
.3550	38		sec				sec
.3551	b2 12		lda ($12)			lda 	(IFR1) 						; common length matches. If same length equal
.3553	f2 0e		sbc ($0e)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.3555					_EXCBCExit2:
.3555	7a		ply				ply
.3556	c9 00		cmp #$00			cmp 	#0
.3558	f0 04		beq $355e			beq 	_EXCBCReturn
.355a	30 03		bmi $355f			bmi 	_EXCBCFF
.355c	a9 01		lda #$01			lda 	#1
.355e					_EXCBCReturn:
.355e	60		rts				rts
.355f					_EXCBCFF:
.355f	a9 ff		lda #$ff			lda 	#$FF
.3561	60		rts				rts
.3562					_EXCBCRange:
.3562	4c e6 43	jmp $43e6		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.3565					EXPBinLeft:
.3565	a9 ff		lda #$ff			lda 	#$FF
.3567	8d 0c 05	sta $050c			sta 	EXPShiftLeftFlag
.356a	4c 70 35	jmp $3570			jmp 	EXPShiftCommon
.356d					EXPBinRight:
.356d	9c 0c 05	stz $050c			stz 	EXPShiftLeftFlag
.3570					EXPShiftCommon:
.3570	a5 11		lda $11				lda 	IFR0+IExp 					; both integers
.3572	05 15		ora $15				ora 	IFR1+IExp
.3574	29 7f		and #$7f			and 	#$7F
.3576	d0 35		bne $35ad			bne 	_EXPSRange
.3578	a5 0e		lda $0e				lda 	IFR0+IM0					; check shift >= 32
.357a	29 e0		and #$e0			and 	#$E0
.357c	05 0f		ora $0f				ora 	IFR0+IM1
.357e	05 10		ora $10				ora 	IFR0+IM2
.3580	d0 25		bne $35a7			bne 	_EXPSShiftZero 				; if so return zero
.3582	5a		phy				phy
.3583	a5 0e		lda $0e				lda 	IFR0+IM0 					; get shift
.3585	29 1f		and #$1f			and 	#$1F
.3587	f0 17		beq $35a0			beq 	_EXPSExit 					; exit if zero
.3589	a8		tay				tay
.358a					_EXPSLoop:
.358a	a2 12		ldx #$12			ldx 	#IFR1
.358c	2c 0c 05	bit $050c			bit 	EXPShiftLeftFlag
.358f	30 05		bmi $3596			bmi 	_EXPSShiftLeft
.3591	20 49 4f	jsr $4f49			jsr 	IFloatShiftRight
.3594	80 07		bra $359d			bra 	_EXPSContinue
.3596					_EXPSShiftLeft:
.3596	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3599	24 10		bit $10				bit 	IFR0+IM2 					; too many shifts
.359b	30 10		bmi $35ad			bmi 	_EXPSRange
.359d					_EXPSContinue:
.359d	88		dey				dey
.359e	d0 ea		bne $358a			bne 	_EXPSLoop
.35a0					_EXPSExit:
.35a0	a2 12		ldx #$12			ldx 	#IFR1
.35a2	20 ab 4e	jsr $4eab			jsr 	IFloatCopyFromRegister
.35a5	7a		ply				ply
.35a6	60		rts				rts
.35a7					_EXPSShiftZero:
.35a7	a2 0e		ldx #$0e			ldx 	#IFR0
.35a9	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.35ac	60		rts				rts
.35ad					_EXPSRange:
.35ad	4c e6 43	jmp $43e6		jmp	ErrorV_range
.050c					EXPShiftLeftFlag:
>050c							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.35b0					EXPEvaluateExpression:
.35b0	a9 00		lda #$00			lda 	#0 							; current precedence
.35b2					EXPEvaluateExpressionPrecedenceA:
.35b2	48		pha				pha
.35b3	20 2d 36	jsr $362d			jsr 	EXPTermValueR0				; do first term.
.35b6					_EELoop:
.35b6	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.35b8	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.35ba	90 31		bcc $35ed			bcc 	_EEExit
.35bc	aa		tax				tax 								; access the precedence of the operator.
.35bd	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.35be	dd 7f 38	cmp $387f,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.35c1	b0 2b		bcs $35ee			bcs 	_EEExit2
.35c3	48		pha				pha 								; save current precedence.
.35c4	da		phx				phx 								; save operator
.35c5	c8		iny				iny 								; consume operator
.35c6	da		phx				phx
.35c7	a2 0e		ldx #$0e			ldx 	#IFR0 						; push R0 on the stack
.35c9	20 69 4e	jsr $4e69			jsr 	IFloatPushRx
.35cc	fa		plx				plx
.35cd	bd 7f 38	lda $387f,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.35d0	20 b2 35	jsr $35b2			jsr 	EXPEvaluateExpressionPrecedenceA
.35d3	a2 12		ldx #$12			ldx 	#IFR1 						; pop LHS to R1.
.35d5	20 8a 4e	jsr $4e8a			jsr 	IFloatPullRx
.35d8	fa		plx				plx 								; operator
.35d9	a5 11		lda $11				lda 	IFR0+IExp 					; if check types match.
.35db	45 15		eor $15				eor 	IFR1+IExp
.35dd	30 08		bmi $35e7			bmi 	_EEType
.35df					_EETypeOkay:
.35df	8a		txa				txa
.35e0	0a		asl a				asl 	a 							; double -> X
.35e1	aa		tax				tax
.35e2	20 ea 35	jsr $35ea			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.35e5	80 cf		bra $35b6			bra 	_EELoop
.35e7					_EEType:
.35e7	4c 05 44	jmp $4405		jmp	ErrorV_type
.35ea					_EECallBinary:
.35ea	7c 27 3b	jmp ($3b27,x)			jmp 	(VectorTable,x)
.35ed					_EEExit:
.35ed	68		pla				pla 								; throw precedence
.35ee					_EEExit2:
.35ee	18		clc				clc
.35ef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.35f0					EXPEvalNumber:
.35f0	20 b0 35	jsr $35b0			jsr 	EXPEvaluateExpression
.35f3	24 11		bit $11				bit 	IFR0+IExp
.35f5	30 01		bmi $35f8			bmi 	EVUType
.35f7	60		rts				rts
.35f8					EVUType:
.35f8	4c 05 44	jmp $4405		jmp	ErrorV_type
.35fb					EXPEvalInteger:
.35fb	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.35fe	20 1a 4c	jsr $4c1a			jsr 	IFloatIntegerR0
.3601	60		rts				rts
.3602					EXPEvalInteger16:
.3602	20 fb 35	jsr $35fb			jsr 	EXPEvalInteger
.3605	a5 10		lda $10				lda 	IFR0+IM2
.3607	d0 21		bne $362a			bne 	EVURange
.3609	a6 0f		ldx $0f				ldx 	IFR0+IM1
.360b	a5 0e		lda $0e				lda 	IFR0+IM0
.360d	60		rts				rts
.360e					EXPEvalInteger8:
.360e	20 fb 35	jsr $35fb			jsr 	EXPEvalInteger
.3611	a5 10		lda $10				lda 	IFR0+IM2
.3613	05 0f		ora $0f				ora 	IFR0+IM1
.3615	d0 13		bne $362a			bne 	EVURange
.3617	a5 0e		lda $0e				lda 	IFR0+IM0
.3619	60		rts				rts
.361a					EXPEvalString:
.361a	20 b0 35	jsr $35b0			jsr 	EXPEvaluateExpression
.361d	24 11		bit $11				bit 	IFR0+IExp
.361f	10 d7		bpl $35f8			bpl 	EVUType
.3621	a6 0f		ldx $0f				ldx 	IFR0+IM1
.3623	86 21		stx $21				stx 	zTemp0+1
.3625	a5 0e		lda $0e				lda 	IFR0+IM0
.3627	85 20		sta $20				sta 	zTemp0
.3629	60		rts				rts
.362a					EVURange:
.362a	4c e6 43	jmp $43e6		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.362d					EXPTermValueR0:
.362d	20 78 36	jsr $3678			jsr 	EXPTermR0 					; get term
.3630	90 45		bcc $3677			bcc 	_ETVNotReference 			; exit if value.
.3632	5a		phy				phy
.3633	a0 03		ldy #$03			ldy 	#3 							; get type
.3635	b1 0e		lda ($0e),y			lda 	(IFR0),y
.3637	30 14		bmi $364d			bmi 	_ETVDereferenceString
.3639	85 11		sta $11				sta 	IFR0+IExp 					; dereference to R0
.363b	88		dey				dey
.363c	b1 0e		lda ($0e),y			lda 	(IFR0),y
.363e	85 10		sta $10				sta 	IFR0+IM2
.3640	88		dey				dey
.3641	b1 0e		lda ($0e),y			lda 	(IFR0),y
.3643	aa		tax				tax
.3644	b2 0e		lda ($0e)			lda 	(IFR0)
.3646	86 0f		stx $0f				stx 	IFR0+IM1
.3648	85 0e		sta $0e				sta 	IFR0+IM0
.364a	7a		ply				ply
.364b	18		clc				clc
.364c	60		rts				rts
.364d					_ETVDereferenceString:
.364d	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.364f	b1 0e		lda ($0e),y			lda 	(IFR0),y
.3651	12 0e		ora ($0e)			ora 	(IFR0)
.3653	f0 11		beq $3666			beq 	_ETVNull
.3655	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; load address of string to XA
.3657	aa		tax				tax
.3658	b2 0e		lda ($0e)			lda 	(IFR0)
.365a	18		clc				clc 								; add two so points to actual string.
.365b	69 02		adc #$02			adc 	#2
.365d	90 01		bcc $3660			bcc 	_EVDSNoCarry
.365f	e8		inx				inx
.3660					_EVDSNoCarry:
.3660	86 0f		stx $0f				stx 	IFR0+IM1 					; save in slots
.3662	85 0e		sta $0e				sta 	IFR0
.3664	80 08		bra $366e			bra 	_ETVFillExit 				; tidy up and exit.
.3666					_ETVNull:
.3666	a9 76		lda #$76			lda 	#_EVTNString & $FF
.3668	85 0e		sta $0e				sta 	IFR0+IM0
.366a	a9 36		lda #$36			lda 	#_EVTNString >> 8
.366c	85 0f		sta $0f				sta 	IFR0+IM1
.366e					_ETVFillExit:
.366e	64 10		stz $10				stz 	IFR0+IM2
.3670	a9 80		lda #$80			lda 	#$80
.3672	85 11		sta $11				sta 	IFR0+IExp
.3674	7a		ply				ply
.3675	60		rts				rts
.3676					_EVTNString:
>3676	00						.byte 	0
.3677					_ETVNotReference:
.3677	60		rts				rts
.3678					EXPTermR0:
.3678	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get next token/element
.367a	30 10		bmi $368c			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.367c	c8		iny				iny 								; consume element
.367d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.367f	b0 08		bcs $3689			bcs 	_ETMIdentifier
.3681	20 b0 36	jsr $36b0			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.3684	20 e3 36	jsr $36e3			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.3687	18		clc				clc 								; return value
.3688	60		rts				rts
.3689					_ETMIdentifier:
.3689	4c b1 48	jmp $48b1			jmp 	VARCheckSimple 				; check simple variables A-Z
.368c					_ETMIsUnaryOrMinus:
.368c	c8		iny				iny 								; consume element
.368d	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.368f	d0 0a		bne $369b			bne 	_ETMCheckUnary
.3691	20 2d 36	jsr $362d			jsr 	EXPTermValueR0 				; get a term to negate
.3694	a2 0e		ldx #$0e			ldx 	#IFR0 						; and negate it
.3696	20 25 4f	jsr $4f25			jsr 	IFloatNegate
.3699	18		clc				clc
.369a	60		rts				rts
.369b					_ETMCheckUnary:
.369b	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.369d	90 0e		bcc $36ad			bcc 	_ETMUnarySyntax
.369f	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.36a1	b0 0a		bcs $36ad			bcs 	_ETMUnarySyntax
.36a3	0a		asl a				asl 	a
.36a4	aa		tax				tax
.36a5	20 aa 36	jsr $36aa			jsr 	_ETMCallUnaryFunction
.36a8	18		clc				clc
.36a9	60		rts				rts
.36aa					_ETMCallUnaryFunction:
.36aa	7c 27 3b	jmp ($3b27,x)			jmp 	(VectorTable,x)
.36ad					_ETMUnarySyntax:
.36ad	4c d5 43	jmp $43d5		jmp	ErrorV_syntax
.36b0					EXPExtractTokenisedInteger:
.36b0	85 0e		sta $0e				sta 	IFR0+IM0 					; initial value in IM0
.36b2	64 11		stz $11				stz 	IFR0+IExp
.36b4	64 0f		stz $0f				stz 	IFR0+IM1
.36b6	64 10		stz $10				stz 	IFR0+IM2
.36b8					_ETMConstant:
.36b8	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; what follows.
.36ba	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.36bc	b0 24		bcs $36e2			bcs 	_ETMCExit 					; no.
.36be	a6 10		ldx $10				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.36c0	a5 0f		lda $0f				lda 	IFR0+IM1
.36c2	85 10		sta $10				sta 	IFR0+IM2
.36c4	a5 0e		lda $0e				lda 	IFR0+IM0
.36c6	85 0f		sta $0f				sta 	IFR0+IM1
.36c8	64 0e		stz $0e				stz 	IFR0+IM0
.36ca	8a		txa				txa
.36cb	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.36cc	66 10		ror $10				ror 	IFR0+IM2
.36ce	66 0f		ror $0f				ror 	IFR0+IM1
.36d0	66 0e		ror $0e				ror 	IFR0+IM0
.36d2	4a		lsr a				lsr 	a
.36d3	66 10		ror $10				ror 	IFR0+IM2
.36d5	66 0f		ror $0f				ror 	IFR0+IM1
.36d7	66 0e		ror $0e				ror 	IFR0+IM0
.36d9	a5 0e		lda $0e				lda 	IFR0+IM0 					; LSB in.
.36db	11 1e		ora ($1e),y			ora 	(codePtr),y
.36dd	85 0e		sta $0e				sta 	IFR0+IM0
.36df	c8		iny				iny 								; consume, loop back
.36e0	80 d6		bra $36b8			bra 	_ETMConstant
.36e2					_ETMCExit:
.36e2	60		rts				rts
.36e3					EXPCheckDecimalFollows:
.36e3	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check for decimal
.36e5	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.36e7	d0 19		bne $3702			bne 	_ETMCDExit
.36e9	c8		iny				iny 								; consume token.
.36ea	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get count
.36ec	5a		phy				phy									; save current position
.36ed	48		pha				pha 								; save count of chars.
.36ee	38		sec				sec 								; address into YX : y + codePtr+1
.36ef	98		tya				tya
.36f0	65 1e		adc $1e				adc 	codePtr
.36f2	aa		tax				tax
.36f3	a5 1f		lda $1f				lda 	codePtr+1
.36f5	69 00		adc #$00			adc 	#0
.36f7	a8		tay				tay
.36f8	68		pla				pla 								; get count.
.36f9	20 be 4d	jsr $4dbe			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.36fc	7a		ply				ply 								; go to next token.
.36fd	98		tya				tya
.36fe	38		sec				sec
.36ff	71 1e		adc ($1e),y			adc 	(codePtr),y
.3701	a8		tay				tay
.3702					_ETMCDExit:
.3702	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.3703					EXPUnaryAbs:
.3703	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 					; number to R0
.3706	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.3709	20 5e 4b	jsr $4b5e			jsr 	IFloatAbsoluteR0
.370c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.370d					EXPUnaryAsc:
.370d	20 1a 36	jsr $361a			jsr 	EXPEvalString 					; string to R0, zTemp0
.3710	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.3713	b2 20		lda ($20)			lda 	(zTemp0) 						; length 0 ?
.3715	f0 06		beq $371d			beq 	_EXAZero 						; if so return 0
.3717	5a		phy				phy 									; otherwise get first character
.3718	a0 01		ldy #$01			ldy 	#1
.371a	b1 20		lda ($20),y			lda 	(zTemp0),y
.371c	7a		ply				ply
.371d					_EXAZero:
.371d	a2 0e		ldx #$0e			ldx 	#IFR0
.371f	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.3722	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.3723					EXPUnaryChr:
.3723	20 0e 36	jsr $360e			jsr 	EXPEvalInteger8 				; expr
.3726	48		pha				pha 									; push on stack
.3727	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.372a	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.372c	20 68 46	jsr $4668			jsr 	StringTempAllocate
.372f	68		pla				pla
.3730	20 9d 46	jsr $469d			jsr 	StringTempWrite
.3733	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.3734					EXPUnaryDec:
.3734	20 1a 36	jsr $361a			jsr 	EXPEvalString 					; string to R0, zTemp0
.3737	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.373a	5a		phy				phy
.373b	a2 0e		ldx #$0e			ldx 	#IFR0 							; zero the result
.373d	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.3740	b2 20		lda ($20)			lda 	(zTemp0)						; read the length to X
.3742	f0 3b		beq $377f			beq 	_EUDError 						; empty string
.3744	aa		tax				tax
.3745	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.3747					_EUDLoop:
.3747	b1 20		lda ($20),y			lda 	(zTemp0),y 						; get next
.3749	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.374b	90 02		bcc $374f			bcc 	_EUDNoCase
.374d	e9 20		sbc #$20			sbc 	#$20
.374f					_EUDNoCase:
.374f	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.3751	90 2c		bcc $377f			bcc 	_EUDError
.3753	c9 3a		cmp #$3a			cmp 	#'9'+1
.3755	90 0a		bcc $3761			bcc 	_EUDOkay
.3757	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.3759	90 24		bcc $377f			bcc 	_EUDError
.375b	c9 47		cmp #$47			cmp 	#'F'+1
.375d	b0 20		bcs $377f			bcs 	_EUDError
.375f	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.3761					_EUDOkay:
.3761	29 0f		and #$0f			and 	#15 							; make constant
.3763	da		phx				phx
.3764	48		pha				pha
.3765	a2 0e		ldx #$0e			ldx 	#IFR0 							; multiply R0 x 16
.3767	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.376a	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.376d	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3770	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3773	68		pla				pla 									; pop constant and OR in
.3774	fa		plx				plx
.3775	05 0e		ora $0e				ora 	IFR0+IM0
.3777	85 0e		sta $0e				sta 	IFR0+IM0
.3779	c8		iny				iny 									; next
.377a	ca		dex				dex
.377b	d0 ca		bne $3747			bne 	_EUDLoop
.377d	7a		ply				ply
.377e	60		rts				rts
.377f					_EUDError:
.377f	4c f7 43	jmp $43f7		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.3782					EXPUnaryInlineDec:
.3782	4c d5 43	jmp $43d5		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.3785					EXPUnaryPeek:
.3785	20 02 36	jsr $3602			jsr 	EXPEvalInteger16 				; number to R0
.3788	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.378b	b2 0e		lda ($0e)			lda 	(IFR0)
.378d	a2 0e		ldx #$0e			ldx 	#IFR0
.378f	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.3792	60		rts				rts
.3793					EXPUnaryDeek:
.3793	20 02 36	jsr $3602			jsr 	EXPEvalInteger16 				; number to R0
.3796	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.3799	5a		phy				phy
.379a	a0 01		ldy #$01			ldy 	#1
.379c	b1 0e		lda ($0e),y			lda 	(IFR0),y
.379e	7a		ply				ply
.379f	48		pha				pha
.37a0	b2 0e		lda ($0e)			lda 	(IFR0)
.37a2	a2 0e		ldx #$0e			ldx 	#IFR0
.37a4	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.37a7	68		pla				pla
.37a8	85 0f		sta $0f				sta 	IFR0+IM1
.37aa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.37ab					EXPUnaryNull:
.37ab	20 2d 36	jsr $362d			jsr 	EXPTermValueR0
.37ae	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.37af					EXPUnaryFrac:
.37af	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 					; number to R0
.37b2	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.37b5	20 c4 4b	jsr $4bc4			jsr 	IFloatFractionalR0
.37b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.37b9					EXPUnaryInkey:
.37b9	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.37bc	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.37be	20 68 46	jsr $4668			jsr 	StringTempAllocate
.37c1	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.37c4	b0 06		bcs $37cc			bcs 	_EUIExit
.37c6	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.37c9	20 9d 46	jsr $469d			jsr 	StringTempWrite
.37cc					_EUIExit:
.37cc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.37cd					EXPUnaryInt:
.37cd	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 					; number to R0
.37d0	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.37d3	20 1a 4c	jsr $4c1a			jsr 	IFloatIntegerR0
.37d6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.37d7					EXPUnaryLen:
.37d7	20 1a 36	jsr $361a			jsr 	EXPEvalString 					; string to R0, zTemp0
.37da	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.37dd	b2 20		lda ($20)			lda 	(zTemp0)
.37df	a2 0e		ldx #$0e			ldx 	#IFR0
.37e1	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.37e4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.37e5					EXPUnaryParenthesis:
.37e5	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 					; number to R0
.37e8	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.37eb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.37ec					EXPUnaryRnd:
.37ec	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 				; number to R0
.37ef	20 72 45	jsr $4572			jsr 	ERRCheckRParen 				; )
.37f2	a2 0e		ldx #$0e			ldx 	#IFR0
.37f4	20 0b 38	jsr $380b			jsr 	EXPLoadInRandom
.37f7	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.37f9	85 11		sta $11				sta 	IFR0+IExp
.37fb	60		rts				rts
.37fc					ExpUnaryRand:
.37fc	20 fb 35	jsr $35fb			jsr 	EXPEvalInteger 				; integer to R0
.37ff	20 72 45	jsr $4572			jsr 	ERRCheckRParen 				; )
.3802	a2 12		ldx #$12			ldx 	#IFR1 						; random to R1
.3804	20 0b 38	jsr $380b			jsr 	EXPLoadInRandom
.3807	20 8b 4a	jsr $4a8b			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.380a	60		rts				rts
.380b					EXPLoadInRandom:
.380b	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.380e	20 20 38	jsr $3820			jsr 	EXPRandom32
.3811	95 00		sta $00,x			sta 	IM0,x
.3813	20 20 38	jsr $3820			jsr 	EXPRandom32
.3816	95 01		sta $01,x			sta 	IM1,x
.3818	20 20 38	jsr $3820			jsr 	EXPRandom32
.381b	29 7f		and #$7f			and 	#$7F
.381d	95 02		sta $02,x			sta 	IM2,x
.381f	60		rts				rts
.3820					EXPRandom32:
.3820	5a		phy				phy
.3821	a0 08		ldy #$08			ldy 	#8
.3823	ad 0d 05	lda $050d			lda 	EXPSeed+0
.3826	0d 0e 05	ora $050e			ora 	EXPSeed+1
.3829	0d 0f 05	ora $050f			ora 	EXPSeed+2
.382c	0d 10 05	ora $0510			ora 	EXPSeed+3
.382f	d0 08		bne $3839			bne 	_EXPRNoReset
.3831	ee 0d 05	inc $050d			inc 	EXPSeed+0
.3834	a0 10		ldy #$10			ldy 	#16
.3836	8c 10 05	sty $0510			sty 	EXPSeed+3
.3839					_EXPRNoReset:
.3839	ad 0d 05	lda $050d			lda 	EXPSeed+0
.383c					_EXPRLoop:
.383c	0a		asl a				asl		a
.383d	2e 0e 05	rol $050e			rol 	EXPSeed+1
.3840	2e 0f 05	rol $050f			rol 	EXPSeed+2
.3843	2e 10 05	rol $0510			rol 	EXPSeed+3
.3846	90 02		bcc $384a			bcc 	_EXPRNoEOR
.3848	49 c5		eor #$c5			eor 	#$C5
.384a					_EXPRNoEOR:
.384a	88		dey				dey
.384b	d0 ef		bne $383c			bne 	_EXPRLoop
.384d	8d 0d 05	sta $050d			sta 	EXPSeed+0
.3850	7a		ply				ply
.3851	60		rts				rts
.050d					EXPSeed:
>050d							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.3852					EXPUnarySgn:
.3852	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 					; number to R0
.3855	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.3858	a2 12		ldx #$12			ldx 	#IFR1 							; copy to R1
.385a	20 bc 4e	jsr $4ebc			jsr 	IFloatCopyToRegister
.385d	a2 0e		ldx #$0e			ldx 	#IFR0 							; R0 = 0
.385f	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.3862	a2 12		ldx #$12			ldx 	#IFR1
.3864	20 e8 4b	jsr $4be8			jsr 	IFloatCompare 					; compare R1 vs 0.
.3867	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.3868					EXPUnarySqr:
.3868	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 					; number to R0
.386b	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.386e	20 66 4b	jsr $4b66			jsr 	IFloatSquareRootR0 				; square root.
.3871	b0 01		bcs $3874			bcs 	_EUSValue
.3873	60		rts				rts
.3874					_EUSValue:
.3874	4c e6 43	jmp $43e6		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.3877					EXPUnaryHex:
.3877	20 fb 35	jsr $35fb			jsr 	EXPEvalInteger 					; expr
.387a	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.387d	5a		phy				phy
.387e	a9 10		lda #$10			lda 	#16
.3880	20 bb 4c	jsr $4cbb			jsr 	IFloatIntegerToStringR0
.3883	80 0a		bra $388f			bra 	EUSMain
.3885					EXPUnaryStr:
.3885	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 					; expr
.3888	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.388b	5a		phy				phy
.388c	20 17 4d	jsr $4d17			jsr 	IFloatFloatToStringR0 			; convert to string
.388f					EUSMain:
.388f	b0 18		bcs $38a9			bcs 	_EUSError
.3891	86 20		stx $20				stx 	zTemp0 							; save string address
.3893	84 21		sty $21				sty 	zTemp0+1
.3895	48		pha				pha 									; save count
.3896	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.3898	20 68 46	jsr $4668			jsr 	StringTempAllocate
.389b	fa		plx				plx 									; count in X
.389c	a0 00		ldy #$00			ldy 	#0
.389e					_EUSCopy:
.389e	b1 20		lda ($20),y			lda 	(zTemp0),y
.38a0	c8		iny				iny
.38a1	20 9d 46	jsr $469d			jsr 	StringTempWrite
.38a4	ca		dex				dex
.38a5	d0 f7		bne $389e			bne	 	_EUSCopy
.38a7	7a		ply				ply
.38a8	60		rts				rts
.38a9					_EUSError:
.38a9	4c e6 43	jmp $43e6		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.38ac					EXPUnaryInlineString:
.38ac	18		clc				clc 								; physical address -> IM0,1
.38ad	98		tya				tya
.38ae	65 1e		adc $1e				adc 	codePtr
.38b0	85 0e		sta $0e				sta 	IFR0+IM0
.38b2	a5 1f		lda $1f				lda 	codePtr+1
.38b4	69 00		adc #$00			adc 	#0
.38b6	85 0f		sta $0f				sta 	IFR0+IM1
.38b8	64 10		stz $10				stz 	IFR0+IM2 					; fill in rest
.38ba	a9 80		lda #$80			lda 	#$80
.38bc	85 11		sta $11				sta 	IFR0+IExp
.38be	98		tya				tya	 								; skip over it.
.38bf	38		sec				sec
.38c0	71 1e		adc ($1e),y			adc 	(codePtr),y
.38c2	a8		tay				tay
.38c3	60		rts				rts
.38c4					_EXPUISRange:
.38c4	4c e6 43	jmp $43e6		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.38c7					EXPUnaryLeft:
.38c7	20 0d 39	jsr $390d			jsr 	EXPCommonStart 					; <string>,
.38ca	48		pha				pha 									; save string address on stack
.38cb	da		phx				phx
.38cc	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.38ce	48		pha				pha
.38cf	20 0e 36	jsr $360e			jsr 	EXPEvalInteger8 				; characters to do
.38d2	80 44		bra $3918			bra 	EXPSubstringCommon
.38d4					EXPUnaryRight:
.38d4	20 0d 39	jsr $390d			jsr 	EXPCommonStart 					; <string>,
.38d7	48		pha				pha 									; save string address on stack
.38d8	da		phx				phx
.38d9	b2 0e		lda ($0e)			lda 	(IFR0) 							; the string length => stack.
.38db	48		pha				pha
.38dc	20 0e 36	jsr $360e			jsr 	EXPEvalInteger8 				; characters to do
.38df	85 20		sta $20				sta 	zTemp0 							; calculate length - required, start point.
.38e1	68		pla				pla
.38e2	38		sec				sec
.38e3	e5 20		sbc $20				sbc 	zTemp0
.38e5	b0 02		bcs $38e9			bcs 	_EUROffLeft
.38e7	a9 00		lda #$00			lda 	#0
.38e9					_EUROffLeft:
.38e9	48		pha				pha 									; start pos
.38ea	a9 ff		lda #$ff			lda 	#255
.38ec	80 2a		bra $3918			bra 	EXPSubstringCommon
.38ee					EXPUnaryMid:
.38ee	20 0d 39	jsr $390d			jsr 	EXPCommonStart 					; <string>,
.38f1	48		pha				pha 									; save string address on stack
.38f2	da		phx				phx
.38f3	20 0e 36	jsr $360e			jsr 	EXPEvalInteger8 				; characters start
.38f6	f0 12		beq $390a			beq 	_EUSError 						; 1 is left
.38f8	3a		dec a				dec 	a 								; zero based.
.38f9	48		pha				pha
.38fa	b1 1e		lda ($1e),y			lda 	(codePtr),y 					; comma follows
.38fc	c9 99		cmp #$99			cmp 	#PR_COMMA
.38fe	f0 04		beq $3904			beq 	_EUMLength 						; if so m is provided
.3900	a9 ff		lda #$ff			lda 	#255 							; default m
.3902	80 14		bra $3918			bra 	EXPSubstringCommon
.3904					_EUMLength:
.3904	c8		iny				iny 									; consume comma
.3905	20 0e 36	jsr $360e			jsr 	EXPEvalInteger8 				; characters to do
.3908	80 0e		bra $3918			bra 	EXPSubstringCommon
.390a					_EUSError:
.390a	4c f7 43	jmp $43f7		jmp	ErrorV_value
.390d					EXPCommonStart:
.390d	20 1a 36	jsr $361a			jsr 	EXPEvalString
.3910	20 7a 45	jsr $457a			jsr 	ERRCheckComma
.3913	a5 0e		lda $0e				lda 	IFR0+IM0
.3915	a6 0f		ldx $0f				ldx 	IFR0+IM1
.3917	60		rts				rts
.3918					EXPSubstringCommon:
.3918	85 22		sta $22				sta 	zTemp1 							; count to do in zTemp1.
.391a	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; check right bracket.
.391d	68		pla				pla 									; start position
.391e	85 23		sta $23				sta 	zTemp1+1 						; save in zTemp1+1
.3920	fa		plx				plx 									; get string address to zTemp2.
.3921	86 25		stx $25				stx 	zTemp2+1
.3923	68		pla				pla
.3924	85 24		sta $24				sta 	zTemp2
.3926	38		sec				sec 									; length - start is the max count of chars
.3927	b2 24		lda ($24)			lda 	(zTemp2)
.3929	e5 23		sbc $23				sbc 	zTemp1+1
.392b	c5 22		cmp $22				cmp 	zTemp1 							; if available < count
.392d	b0 02		bcs $3931			bcs 	_EXPSSNoTrim
.392f	85 22		sta $22				sta 	zTemp1 							; update count with available
.3931					_EXPSSNoTrim:
.3931	a5 22		lda $22				lda 	zTemp1 							; chars required.
.3933	20 68 46	jsr $4668			jsr 	StringTempAllocate 				; allocate memory for it.
.3936	a5 22		lda $22				lda 	zTemp1 							; zero length string
.3938	f0 15		beq $394f			beq 	_EXPSSExit
.393a	a5 23		lda $23				lda 	zTemp1+1 						; if length >= start exit
.393c	d2 24		cmp ($24)			cmp 	(zTemp2)
.393e	b0 0f		bcs $394f			bcs 	_EXPSSExit
.3940	5a		phy				phy
.3941	a4 23		ldy $23				ldy 	zTemp1+1 						; start position
.3943	c8		iny				iny 									; +1 for the length byte
.3944					_EXPSSCopy:
.3944	b1 24		lda ($24),y			lda 	(zTemp2),y
.3946	20 9d 46	jsr $469d			jsr 	StringTempWrite
.3949	c8		iny				iny
.394a	c6 22		dec $22				dec 	zTemp1
.394c	d0 f6		bne $3944			bne 	_EXPSSCopy
.394e	7a		ply				ply
.394f					_EXPSSExit:
.394f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.3950					EXPUnaryVal:
.3950	20 1a 36	jsr $361a			jsr 	EXPEvalString 					; string to R0, zTemp0
.3953	20 72 45	jsr $4572			jsr 	ERRCheckRParen 					; )
.3956	5a		phy				phy
.3957	18		clc				clc
.3958	a5 20		lda $20				lda		zTemp0 							; point XY to the text
.395a	69 01		adc #$01			adc 	#1
.395c	aa		tax				tax
.395d	a5 21		lda $21				lda 	zTemp0+1
.395f	69 00		adc #$00			adc 	#0
.3961	a8		tay				tay
.3962	b2 20		lda ($20)			lda 	(zTemp0) 						; get length.
.3964	20 7e 4d	jsr $4d7e			jsr 	IFloatStringToFloatR0 			; do conversion
.3967	b0 02		bcs $396b			bcs 	_EUVError
.3969	7a		ply				ply
.396a	60		rts				rts
.396b					_EUVError:
.396b	4c f7 43	jmp $43f7		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.396e					BinaryPrecedence:
>396e	02					.byte	 2	; $ef =
>396f	02					.byte	 2	; $f0 <>
>3970	02					.byte	 2	; $f1 <=
>3971	02					.byte	 2	; $f2 <
>3972	02					.byte	 2	; $f3 >=
>3973	02					.byte	 2	; $f4 >
>3974	01					.byte	 1	; $f5 XOR
>3975	01					.byte	 1	; $f6 OR
>3976	01					.byte	 1	; $f7 AND
>3977	04					.byte	 4	; $f8 DIV
>3978	04					.byte	 4	; $f9 MOD
>3979	04					.byte	 4	; $fa <<
>397a	04					.byte	 4	; $fb >>
>397b	04					.byte	 4	; $fc /
>397c	04					.byte	 4	; $fd *
>397d	03					.byte	 3	; $fe -
>397e	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.397f					StructureOffsets:
>397f	01					.byte	1  	; $80 REPEAT
>3980	ff					.byte	255	; $81 UNTIL
>3981	01					.byte	1  	; $82 WHILE
>3982	ff					.byte	255	; $83 WEND
>3983	01					.byte	1  	; $84 IF
>3984	ff					.byte	255	; $85 ENDIF
>3985	01					.byte	1  	; $86 DO
>3986	ff					.byte	255	; $87 LOOP
>3987	01					.byte	1  	; $88 PROC
>3988	ff					.byte	255	; $89 ENDPROC
>3989	01					.byte	1  	; $8a FOR
>398a	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.398b					StandardTokens:
>398b	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>3992	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>3998	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>399e	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>39a3	02 49 46				.byte	$02,$49,$46                             	; $84 if
>39a6	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>39ac	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>39af	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>39b4	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>39b9	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>39c1	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>39c5	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>39ca	00					.byte	$00                                     	; $8c [[end]]
>39cb	00					.byte	$00                                     	; $8d [[shift]]
>39cc	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>39d1	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>39d6	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>39d9	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>39de	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>39e2	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>39e8	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>39ee	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>39f3	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>39f7	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>39fb	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>3a00	01 2c					.byte	$01,$2c                                 	; $99 ,
>3a02	01 3b					.byte	$01,$3b                                 	; $9a ;
>3a04	01 3a					.byte	$01,$3a                                 	; $9b :
>3a06	01 27					.byte	$01,$27                                 	; $9c '
>3a08	01 29					.byte	$01,$29                                 	; $9d )
>3a0a	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>3a0e	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>3a14	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>3a18	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>3a1c	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>3a21	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>3a25	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>3a2c	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>3a31	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>3a36	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>3a3b	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>3a40	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>3a45	00					.byte	0											; $aa
>3a46	00					.byte	0											; $ab
>3a47	00					.byte	0											; $ac
>3a48	00					.byte	0											; $ad
>3a49	00					.byte	0											; $ae
>3a4a	00					.byte	0											; $af
>3a4b	00					.byte	0											; $b0
>3a4c	00					.byte	0											; $b1
>3a4d	00					.byte	0											; $b2
>3a4e	00					.byte	0											; $b3
>3a4f	00					.byte	0											; $b4
>3a50	00					.byte	0											; $b5
>3a51	00					.byte	0											; $b6
>3a52	00					.byte	0											; $b7
>3a53	00					.byte	0											; $b8
>3a54	00					.byte	0											; $b9
>3a55	00					.byte	0											; $ba
>3a56	00					.byte	0											; $bb
>3a57	00					.byte	0											; $bc
>3a58	00					.byte	0											; $bd
>3a59	00					.byte	0											; $be
>3a5a	00					.byte	0											; $bf
>3a5b	00					.byte	0											; $c0
>3a5c	00					.byte	0											; $c1
>3a5d	00					.byte	0											; $c2
>3a5e	00					.byte	0											; $c3
>3a5f	00					.byte	0											; $c4
>3a60	00					.byte	0											; $c5
>3a61	00					.byte	0											; $c6
>3a62	00					.byte	0											; $c7
>3a63	00					.byte	0											; $c8
>3a64	00					.byte	0											; $c9
>3a65	00					.byte	0											; $ca
>3a66	00					.byte	0											; $cb
>3a67	00					.byte	0											; $cc
>3a68	00					.byte	0											; $cd
>3a69	00					.byte	0											; $ce
>3a6a	00					.byte	0											; $cf
>3a6b	00					.byte	0											; $d0
>3a6c	00					.byte	0											; $d1
>3a6d	00					.byte	0											; $d2
>3a6e	00					.byte	0											; $d3
>3a6f	00					.byte	0											; $d4
>3a70	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>3a76	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>3a7c	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>3a84	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>3a8b	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>3a91	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>3a97	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>3a9c	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>3aa1	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>3aa6	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>3aab	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>3ab0	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>3ab6	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>3abb	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>3ac3	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>3aca	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>3acf	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>3ad4	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>3ada	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>3adf	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>3ae5	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>3aea	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>3af0	01 28					.byte	$01,$28                                 	; $eb (
>3af2	01 24					.byte	$01,$24                                 	; $ec $
>3af4	00					.byte	$00                                     	; $ed [[decimal]]
>3af5	00					.byte	$00                                     	; $ee [[string]]
>3af6	01 3d					.byte	$01,$3d                                 	; $ef =
>3af8	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>3afb	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>3afe	01 3c					.byte	$01,$3c                                 	; $f2 <
>3b00	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>3b03	01 3e					.byte	$01,$3e                                 	; $f4 >
>3b05	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>3b09	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>3b0c	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>3b10	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>3b14	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>3b18	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>3b1b	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>3b1e	01 2f					.byte	$01,$2f                                 	; $fc /
>3b20	01 2a					.byte	$01,$2a                                 	; $fd *
>3b22	01 2d					.byte	$01,$2d                                 	; $fe -
>3b24	01 2b					.byte	$01,$2b                                 	; $ff +
>3b26	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.3b27					VectorTable:
>3b27	c9 42					.word	Command_REPEAT           ; $80 REPEAT
>3b29	d2 42					.word	Command_UNTIL            ; $81 UNTIL
>3b2b	aa 43					.word	Command_WHILE            ; $82 WHILE
>3b2d	c9 43					.word	Command_WEND             ; $83 WEND
>3b2f	a1 42					.word	IfCommand                ; $84 IF
>3b31	c8 42					.word	EndIf                    ; $85 ENDIF
>3b33	3e 41					.word	Command_DO               ; $86 DO
>3b35	56 41					.word	Command_LOOP             ; $87 LOOP
>3b37	30 34					.word	NoExec08                 ; $88 PROC
>3b39	32 41					.word	Command_ENDPROC          ; $89 ENDPROC
>3b3b	5f 41					.word	Command_FOR              ; $8a FOR
>3b3d	ec 41					.word	Command_NEXT             ; $8b NEXT
>3b3f	b6 33					.word	RUNEndOfLine             ; $8c [[END]]
>3b41	12 34					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>3b43	c1 42					.word	ElseCode                 ; $8e ELSE
>3b45	30 34					.word	NoExec01                 ; $8f THEN
>3b47	30 34					.word	NoExec02                 ; $90 TO
>3b49	30 34					.word	NoExec03                 ; $91 STEP
>3b4b	4c 32					.word	CommandLET               ; $92 LET
>3b4d	e7 31					.word	Command_Print            ; $93 PRINT
>3b4f	ef 46					.word	NotImplemented           ; $94 INPUT
>3b51	f6 40					.word	Command_CALL             ; $95 CALL
>3b53	1b 34					.word	Command_Sys              ; $96 SYS
>3b55	9d 33					.word	Command_REM              ; $97 REM
>3b57	47 41					.word	Command_EXIT             ; $98 EXIT
>3b59	30 34					.word	NoExec04                 ; $99 ,
>3b5b	30 34					.word	NoExec05                 ; $9a ;
>3b5d	30 34					.word	NoExec06                 ; $9b :
>3b5f	9d 33					.word	Command_REM2             ; $9c '
>3b61	30 34					.word	NoExec07                 ; $9d )
>3b63	a1 30					.word	CommandDIM               ; $9e DIM
>3b65	51 30					.word	Command_CLEAR            ; $9f CLEAR
>3b67	94 33					.word	Command_NEW              ; $a0 NEW
>3b69	aa 33					.word	Command_RUN              ; $a1 RUN
>3b6b	18 34					.word	Command_STOP             ; $a2 STOP
>3b6d	15 34					.word	Command_END              ; $a3 END
>3b6f	43 30					.word	Command_ASSERT           ; $a4 ASSERT
>3b71	c4 32					.word	Command_LIST             ; $a5 LIST
>3b73	ef 46					.word	NotImplemented           ; $a6 SAVE
>3b75	ef 46					.word	NotImplemented           ; $a7 LOAD
>3b77	c0 31					.word	Command_Poke             ; $a8 POKE
>3b79	bd 31					.word	Command_Doke             ; $a9 DOKE
>3b7b	ef 46					.word	NotImplemented           ; $aa
>3b7d	ef 46					.word	NotImplemented           ; $ab
>3b7f	ef 46					.word	NotImplemented           ; $ac
>3b81	ef 46					.word	NotImplemented           ; $ad
>3b83	ef 46					.word	NotImplemented           ; $ae
>3b85	ef 46					.word	NotImplemented           ; $af
>3b87	ef 46					.word	NotImplemented           ; $b0
>3b89	ef 46					.word	NotImplemented           ; $b1
>3b8b	ef 46					.word	NotImplemented           ; $b2
>3b8d	ef 46					.word	NotImplemented           ; $b3
>3b8f	ef 46					.word	NotImplemented           ; $b4
>3b91	ef 46					.word	NotImplemented           ; $b5
>3b93	ef 46					.word	NotImplemented           ; $b6
>3b95	ef 46					.word	NotImplemented           ; $b7
>3b97	ef 46					.word	NotImplemented           ; $b8
>3b99	ef 46					.word	NotImplemented           ; $b9
>3b9b	ef 46					.word	NotImplemented           ; $ba
>3b9d	ef 46					.word	NotImplemented           ; $bb
>3b9f	ef 46					.word	NotImplemented           ; $bc
>3ba1	ef 46					.word	NotImplemented           ; $bd
>3ba3	ef 46					.word	NotImplemented           ; $be
>3ba5	ef 46					.word	NotImplemented           ; $bf
>3ba7	ef 46					.word	NotImplemented           ; $c0
>3ba9	ef 46					.word	NotImplemented           ; $c1
>3bab	ef 46					.word	NotImplemented           ; $c2
>3bad	ef 46					.word	NotImplemented           ; $c3
>3baf	ef 46					.word	NotImplemented           ; $c4
>3bb1	ef 46					.word	NotImplemented           ; $c5
>3bb3	ef 46					.word	NotImplemented           ; $c6
>3bb5	ef 46					.word	NotImplemented           ; $c7
>3bb7	ef 46					.word	NotImplemented           ; $c8
>3bb9	ef 46					.word	NotImplemented           ; $c9
>3bbb	ef 46					.word	NotImplemented           ; $ca
>3bbd	ef 46					.word	NotImplemented           ; $cb
>3bbf	ef 46					.word	NotImplemented           ; $cc
>3bc1	ef 46					.word	NotImplemented           ; $cd
>3bc3	ef 46					.word	NotImplemented           ; $ce
>3bc5	ef 46					.word	NotImplemented           ; $cf
>3bc7	ef 46					.word	NotImplemented           ; $d0
>3bc9	ef 46					.word	NotImplemented           ; $d1
>3bcb	ef 46					.word	NotImplemented           ; $d2
>3bcd	ef 46					.word	NotImplemented           ; $d3
>3bcf	ef 46					.word	NotImplemented           ; $d4
>3bd1	93 37					.word	EXPUnaryDeek             ; $d5 DEEK(
>3bd3	85 37					.word	EXPUnaryPeek             ; $d6 PEEK(
>3bd5	d4 38					.word	EXPUnaryRight            ; $d7 RIGHT$(
>3bd7	c7 38					.word	EXPUnaryLeft             ; $d8 LEFT$(
>3bd9	ee 38					.word	EXPUnaryMid              ; $d9 MID$(
>3bdb	85 38					.word	EXPUnaryStr              ; $da STR$(
>3bdd	50 39					.word	EXPUnaryVal              ; $db VAL(
>3bdf	52 38					.word	EXPUnarySgn              ; $dc SGN(
>3be1	03 37					.word	EXPUnaryAbs              ; $dd ABS(
>3be3	d7 37					.word	EXPUnaryLen              ; $de LEN(
>3be5	68 38					.word	EXPUnarySqr              ; $df SQR(
>3be7	23 37					.word	EXPUnaryChr              ; $e0 CHR$(
>3be9	0d 37					.word	EXPUnaryAsc              ; $e1 ASC(
>3beb	b9 37					.word	EXPUnaryInkey            ; $e2 INKEY$(
>3bed	ef 46					.word	NotImplemented           ; $e3 EVENT(
>3bef	ef 46					.word	NotImplemented           ; $e4 TIME
>3bf1	cd 37					.word	EXPUnaryInt              ; $e5 INT(
>3bf3	af 37					.word	EXPUnaryFrac             ; $e6 FRAC(
>3bf5	34 37					.word	EXPUnaryDec              ; $e7 DEC(
>3bf7	77 38					.word	EXPUnaryHex              ; $e8 HEX$(
>3bf9	ec 37					.word	EXPUnaryRnd              ; $e9 RND(
>3bfb	fc 37					.word	ExpUnaryRand             ; $ea RAND(
>3bfd	e5 37					.word	EXPUnaryParenthesis      ; $eb (
>3bff	ab 37					.word	EXPUnaryNull             ; $ec $
>3c01	82 37					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>3c03	ac 38					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>3c05	ed 34					.word	EXPCompareEqual          ; $ef =
>3c07	08 35					.word	EXPCompareNotEqual       ; $f0 <>
>3c09	11 35					.word	EXPCompareLessEqual      ; $f1 <=
>3c0b	f6 34					.word	EXPCompareLess           ; $f2 <
>3c0d	1a 35					.word	EXPCompareGreaterEqual   ; $f3 >=
>3c0f	ff 34					.word	EXPCompareGreater        ; $f4 >
>3c11	9a 34					.word	EXPBinXor                ; $f5 XOR
>3c13	8e 34					.word	EXPBinOr                 ; $f6 OR
>3c15	82 34					.word	EXPBinAnd                ; $f7 AND
>3c17	5a 34					.word	EXPBinIDiv               ; $f8 DIV
>3c19	6b 34					.word	EXPBinIMod               ; $f9 MOD
>3c1b	65 35					.word	EXPBinLeft               ; $fa <<
>3c1d	6d 35					.word	EXPBinRight              ; $fb >>
>3c1f	4e 34					.word	EXPBinFDiv               ; $fc /
>3c21	45 34					.word	EXPBinMul                ; $fd *
>3c23	3c 34					.word	EXPBinSub                ; $fe -
>3c25	33 34					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.3c27					TOKDetokenise:
.3c27	86 24		stx $24				stx 	zTemp2 						; save tokenised code in zTemp2
.3c29	84 25		sty $25				sty 	zTemp2+1
.3c2b	9c 13 05	stz $0513			stz		TOKLastCharacter 			; clear last character
.3c2e					_TOKDLoop:
.3c2e	20 5d 3c	jsr $3c5d			jsr 	TOKDGet 					; get next
.3c31	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.3c33	f0 26		beq $3c5b			beq 	_TOKDExit
.3c35	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.3c37	f0 1d		beq $3c56			beq 	_TOKDDataItem
.3c39	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.3c3b	f0 19		beq $3c56			beq 	_TOKDDataItem
.3c3d	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.3c3f	10 05		bpl $3c46			bpl 	_TOKDNotToken
.3c41	20 25 3d	jsr $3d25			jsr 	TOKDToken 					; token to text.
.3c44	80 e8		bra $3c2e			bra 	_TOKDLoop
.3c46					_TOKDNotToken:
.3c46	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.3c48	90 05		bcc $3c4f			bcc 	_TOKDNotIdentifier
.3c4a	20 98 3c	jsr $3c98			jsr 	TOKDIdentifier
.3c4d	80 df		bra $3c2e			bra 	_TOKDLoop
.3c4f					_TOKDNotIdentifier:
.3c4f	a0 0a		ldy #$0a			ldy 	#10
.3c51	20 e1 3c	jsr $3ce1			jsr 	TOKDInteger
.3c54	80 d8		bra $3c2e			bra 	_TOKDLoop
.3c56					_TOKDDataItem:
.3c56	20 73 3c	jsr $3c73			jsr 	TOKDDataItem
.3c59	80 d3		bra $3c2e			bra 	_TOKDLoop
.3c5b					_TOKDExit:
.3c5b	18		clc				clc
.3c5c	60		rts				rts
.3c5d	b2 24		lda ($24)	TOKDGet:lda 	(zTemp2)
.3c5f	e6 24		inc $24				inc 	zTemp2
.3c61	d0 02		bne $3c65			bne 	_TKDGExit
.3c63	e6 25		inc $25				inc 	zTemp2+1
.3c65					_TKDGExit:
.3c65	60		rts				rts
.3c66					TOKDOutput:
.3c66	8d 13 05	sta $0513			sta 	TOKLastCharacter
.3c69	6c 11 05	jmp ($0511)			jmp 	(TOKOutputMethod)
.3c6c					TOKSetDetokeniseOutput:
.3c6c	8e 11 05	stx $0511			stx 	TOKOutputMethod
.3c6f	8c 12 05	sty $0512			sty 	TOKOutputMethod+1
.3c72	60		rts				rts
.0511					TOKOutputMethod:
>0511							.fill 	2
.0513					TOKLastCharacter:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.3c73					TOKDDataItem:
.3c73	a8		tay				tay 								; type in Y
.3c74	a9 22		lda #$22			lda 	#'"'						; start with " or .
.3c76	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.3c78	f0 02		beq $3c7c			beq 	_TOKDDIsString
.3c7a	a9 2e		lda #$2e			lda 	#'.'
.3c7c					_TOKDDIsString:
.3c7c	20 66 3c	jsr $3c66			jsr 	TOKDOutput 					; dump it
.3c7f	20 5d 3c	jsr $3c5d			jsr 	TOKDGet 					; get length into X
.3c82	aa		tax				tax
.3c83					_TOKDDOutput:
.3c83	ca		dex				dex 								; are we complete
.3c84	30 08		bmi $3c8e			bmi 	_TOKDDEnd
.3c86	20 5d 3c	jsr $3c5d			jsr 	TOKDGet 					; get character and output it
.3c89	20 66 3c	jsr $3c66			jsr 	TOKDOutput
.3c8c	80 f5		bra $3c83			bra 	_TOKDDOutput
.3c8e					_TOKDDEnd:
.3c8e	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.3c90	d0 05		bne $3c97			bne 	_TOKDDNotString
.3c92	a9 22		lda #$22			lda 	#'"'
.3c94	20 66 3c	jsr $3c66			jsr 	TOKDOutput
.3c97					_TOKDDNotString:
.3c97	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.3c98					TOKDIdentifier:
.3c98	a0 ff		ldy #$ff			ldy 	#$FF
.3c9a	8c 14 05	sty $0514			sty 	TOKDIFirstChar
.3c9d					_TOKDLoop:
.3c9d	a8		tay				tay 								; token in Y
.3c9e	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.3ca0	c0 64		cpy #$64			cpy 	#$64
.3ca2	f0 11		beq $3cb5			beq 	_TOKDIOutput
.3ca4	a9 5f		lda #$5f			lda 	#'_'
.3ca6	c0 65		cpy #$65			cpy 	#$65
.3ca8	f0 0b		beq $3cb5			beq 	_TOKDIOutput
.3caa	98		tya				tya 								; handle a-z
.3cab	18		clc				clc
.3cac	69 21		adc #$21			adc	 	#$21
.3cae	c0 5a		cpy #$5a			cpy 	#$5A
.3cb0	90 03		bcc $3cb5			bcc 	_TOKDIOutput
.3cb2	38		sec				sec 								; handle 0-9
.3cb3	e9 4b		sbc #$4b			sbc 	#$4B
.3cb5					_TOKDIOutput:
.3cb5	2c 14 05	bit $0514			bit 	TOKDIFirstChar
.3cb8	10 08		bpl $3cc2			bpl 	_TOKDINoSpacing
.3cba	48		pha				pha
.3cbb	20 57 3d	jsr $3d57			jsr 	TOKDSpacing
.3cbe	9c 14 05	stz $0514			stz 	TOKDIFirstChar
.3cc1	68		pla				pla
.3cc2					_TOKDINoSpacing:
.3cc2	20 66 3c	jsr $3c66			jsr 	TOKDOutput
.3cc5	20 5d 3c	jsr $3c5d			jsr 	TOKDGet 					; get next token
.3cc8	c9 7c		cmp #$7c			cmp 	#$7C
.3cca	90 d1		bcc $3c9d			bcc 	_TOKDLoop
.3ccc	f0 12		beq $3ce0			beq 	_TOKDIExit 					; it's a number, no tail.
.3cce	4a		lsr a				lsr 	a 							; string ?
.3ccf	90 07		bcc $3cd8			bcc 	_TOKDICheckArray
.3cd1	48		pha				pha
.3cd2	a9 24		lda #$24			lda 	#"$"
.3cd4	20 66 3c	jsr $3c66			jsr 	TOKDOutput
.3cd7	68		pla				pla
.3cd8					_TOKDICheckArray:
.3cd8	4a		lsr a				lsr 	a 							; array ?
.3cd9	90 05		bcc $3ce0			bcc 	_TOKDIExit
.3cdb	a9 28		lda #$28			lda 	#"("
.3cdd	20 66 3c	jsr $3c66			jsr 	TOKDOutput
.3ce0					_TOKDIExit:
.3ce0	60		rts				rts
.0514					TOKDIFirstChar:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.3ce1					TOKDInteger:
.3ce1	5a		phy				phy 								; save base
.3ce2	a2 0e		ldx #$0e			ldx 	#IFR0 						; set into R0
.3ce4	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.3ce7					_TOKDILoop:
.3ce7	b2 24		lda ($24)			lda 	(zTemp2) 					; followed by a 00-3F
.3ce9	c9 40		cmp #$40			cmp 	#$40
.3ceb	b0 1d		bcs $3d0a			bcs 	_TOKDIHaveInteger
.3ced	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 << 6
.3cef	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3cf2	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3cf5	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3cf8	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3cfb	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3cfe	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3d01	20 5d 3c	jsr $3c5d			jsr 	TOKDGet 					; OR byte in.
.3d04	05 0e		ora $0e				ora 	IFR0+IM0
.3d06	85 0e		sta $0e				sta 	IFR0+IM0
.3d08	80 dd		bra $3ce7			bra 	_TOKDILoop
.3d0a					_TOKDIHaveInteger:
.3d0a	7a		ply				ply 								; restore base
.3d0b	98		tya				tya 								; base in A
.3d0c	20 bb 4c	jsr $4cbb			jsr 	IFloatIntegerToStringR0
.3d0f	86 20		stx $20				stx 	zTemp0
.3d11	84 21		sty $21				sty 	zTemp0+1
.3d13	b2 20		lda ($20)			lda 	(zTemp0)
.3d15	20 57 3d	jsr $3d57			jsr 	TOKDSpacing 				; check spacing okay.
.3d18	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.3d1a					_TOKDOutput:
.3d1a	b1 20		lda ($20),y			lda 	(zTemp0),y
.3d1c	20 66 3c	jsr $3c66			jsr 	TOKDOutput
.3d1f	c8		iny				iny
.3d20	b1 20		lda ($20),y			lda 	(zTemp0),y
.3d22	d0 f6		bne $3d1a			bne 	_TOKDOutput
.3d24	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.3d25					TOKDToken:
.3d25	a2 8b		ldx #$8b			ldx 	#StandardTokens & $FF
.3d27	a0 39		ldy #$39			ldy 	#StandardTokens >> 8
.3d29					_TOKDSearch:
.3d29	86 20		stx $20				stx 	zTemp0 						; put table in zTemp0
.3d2b	84 21		sty $21				sty 	zTemp0+1
.3d2d	aa		tax				tax 								; token ID in X.
.3d2e					_TOKDFind:
.3d2e	ca		dex				dex 								; reached the start
.3d2f	10 0d		bpl $3d3e			bpl 	_TOKDFound
.3d31	38		sec				sec 								; go to next entry
.3d32	b2 20		lda ($20)			lda 	(zTemp0)
.3d34	65 20		adc $20				adc 	zTemp0
.3d36	85 20		sta $20				sta 	zTemp0
.3d38	90 f4		bcc $3d2e			bcc 	_TOKDFind
.3d3a	e6 21		inc $21				inc 	zTemp0+1
.3d3c	80 f0		bra $3d2e			bra 	_TOKDFind
.3d3e					_TOKDFound:
.3d3e	b2 20		lda ($20)			lda 	(zTemp0) 					; length to X
.3d40	f0 14		beq $3d56			beq 	_TOKDExit
.3d42	aa		tax				tax
.3d43	a0 01		ldy #$01			ldy 	#1 							; output the token.
.3d45	b1 20		lda ($20),y			lda 	(zTemp0),y 					; check spacing
.3d47	20 57 3d	jsr $3d57			jsr 	TOKDSpacing
.3d4a					_TOKDOutput:
.3d4a	b1 20		lda ($20),y			lda 	(zTemp0),y
.3d4c	20 b1 40	jsr $40b1			jsr 	TOKToLower
.3d4f	20 66 3c	jsr $3c66			jsr 	TOKDOutput
.3d52	c8		iny				iny
.3d53	ca		dex				dex
.3d54	d0 f4		bne $3d4a			bne 	_TOKDOutput
.3d56					_TOKDExit:
.3d56	60		rts				rts
.3d57					TOKDSpacing:
.3d57	20 c8 40	jsr $40c8			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.3d5a	90 0d		bcc $3d69			bcc 	_TOKDSExit
.3d5c	ad 13 05	lda $0513			lda 	TOKLastCharacter			; and last character also alphanumeric
.3d5f	20 c8 40	jsr $40c8			jsr 	TOKIsIdentifierElement
.3d62	90 05		bcc $3d69			bcc 	_TOKDSExit
.3d64	a9 20		lda #$20			lda 	#" " 						; we need a space.
.3d66	20 66 3c	jsr $3c66			jsr 	TOKDOutput
.3d69					_TOKDSExit:
.3d69	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.3d6a					PGMDeleteLine:
.3d6a	20 1d 3e	jsr $3e1d			jsr 	PGMEndProgram 				; end of program into zTemp0
.3d6d	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.3d6f	ad 15 05	lda $0515			lda 	PGMBaseHigh
.3d72	85 23		sta $23				sta 	zTemp1+1
.3d74					_PGMDLoop:
.3d74	b2 22		lda ($22)			lda 	(zTemp1) 					; finished, not found ?
.3d76	38		sec				sec
.3d77	f0 3a		beq $3db3			beq 	_PGMDExit
.3d79	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.3d7b	b1 22		lda ($22),y			lda 	(zTemp1),y
.3d7d	cd 02 04	cmp $0402			cmp 	TOKLineNumber
.3d80	d0 08		bne $3d8a			bne 	_PGMDNext
.3d82	c8		iny				iny
.3d83	b1 22		lda ($22),y			lda 	(zTemp1),y
.3d85	cd 03 04	cmp $0403			cmp 	TOKLineNumber+1
.3d88	f0 0d		beq $3d97			beq 	_PGMDDelete
.3d8a					_PGMDNext:
.3d8a	18		clc				clc
.3d8b	b2 22		lda ($22)			lda 	(zTemp1)
.3d8d	65 22		adc $22				adc 	zTemp1
.3d8f	85 22		sta $22				sta 	zTemp1
.3d91	90 e1		bcc $3d74			bcc 	_PGMDLoop
.3d93	e6 23		inc $23				inc 	zTemp1+1
.3d95	80 dd		bra $3d74			bra 	_PGMDLoop
.3d97					_PGMDDelete:
.3d97	b2 22		lda ($22)			lda 	(zTemp1) 					; offset to next in Y
.3d99	a8		tay				tay
.3d9a					_PGMDCopy:
.3d9a	b1 22		lda ($22),y			lda 	(zTemp1),y 					; copy down.
.3d9c	92 22		sta ($22)			sta 	(zTemp1)
.3d9e	a5 22		lda $22				lda 	zTemp1 						; reached the end ?
.3da0	c5 20		cmp $20				cmp 	zTemp0
.3da2	d0 07		bne $3dab			bne 	_PGMDNext2
.3da4	a5 23		lda $23				lda 	zTemp1+1
.3da6	c5 21		cmp $21				cmp 	zTemp0+1
.3da8	18		clc				clc
.3da9	f0 08		beq $3db3			beq 	_PGMDExit
.3dab					_PGMDNext2:
.3dab	e6 22		inc $22				inc 	zTemp1 						; advance pointer.
.3dad	d0 eb		bne $3d9a			bne 	_PGMDCopy
.3daf	e6 23		inc $23				inc 	zTemp1+1
.3db1	80 e7		bra $3d9a			bra 	_PGMDCopy
.3db3					_PGMDExit:
.3db3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.3db4					PGMInsertLine:
.3db4	20 1d 3e	jsr $3e1d			jsr 	PGMEndProgram 				; end of program into zTemp0
.3db7	64 22		stz $22				stz 	zTemp1						; copy base address of code to zTemp1
.3db9	ad 15 05	lda $0515			lda 	PGMBaseHigh
.3dbc	85 23		sta $23				sta 	zTemp1+1
.3dbe					_PGMILoop:
.3dbe	b2 22		lda ($22)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.3dc0	f0 1c		beq $3dde			beq 	_PGMIInsert
.3dc2	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.3dc4	b1 22		lda ($22),y			lda 	(zTemp1),y
.3dc6	cd 02 04	cmp $0402			cmp 	TOKLineNumber
.3dc9	c8		iny				iny
.3dca	b1 22		lda ($22),y			lda 	(zTemp1),y
.3dcc	ed 03 04	sbc $0403			sbc 	TOKLineNumber+1
.3dcf	b0 0d		bcs $3dde			bcs 	_PGMIInsert 				; insert here.
.3dd1	18		clc				clc
.3dd2	b2 22		lda ($22)			lda 	(zTemp1)
.3dd4	65 22		adc $22				adc 	zTemp1
.3dd6	85 22		sta $22				sta 	zTemp1
.3dd8	90 e4		bcc $3dbe			bcc 	_PGMILoop
.3dda	e6 23		inc $23				inc 	zTemp1+1
.3ddc	80 e0		bra $3dbe			bra 	_PGMILoop
.3dde					_PGMIInsert:
.3dde	ac 01 04	ldy $0401			ldy 	TOKLineSize 				; space required
.3de1					_PGMIInsertLoop:
.3de1	b2 20		lda ($20)			lda 	(zTemp0)
.3de3	91 20		sta ($20),y			sta 	(zTemp0),y
.3de5	a5 22		lda $22				lda 	zTemp1 						; reached insert point
.3de7	c5 20		cmp $20				cmp 	zTemp0
.3de9	d0 06		bne $3df1			bne 	_PGMINext
.3deb	a5 23		lda $23				lda 	zTemp1+1
.3ded	c5 21		cmp $21				cmp 	zTemp0+1
.3def	f0 0a		beq $3dfb			beq 	_PGMIInserted
.3df1					_PGMINext:
.3df1	a5 20		lda $20				lda 	zTemp0
.3df3	d0 02		bne $3df7			bne 	_PGMINoBorrow
.3df5	c6 21		dec $21				dec 	zTemp0+1
.3df7					_PGMINoBorrow:
.3df7	c6 20		dec $20				dec 	zTemp0
.3df9	80 e6		bra $3de1			bra 	_PGMIInsertLoop
.3dfb					_PGMIInserted:
.3dfb	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.3dfd					_PGMICopyLoop:
.3dfd	b9 01 04	lda $0401,y			lda 	TOKLineSize,y
.3e00	91 22		sta ($22),y			sta 	(zTemp1),y
.3e02	c8		iny				iny
.3e03	cc 01 04	cpy $0401			cpy 	TOKLineSize
.3e06	d0 f5		bne $3dfd			bne 	_PGMICopyLoop
.3e08	18		clc				clc
.3e09	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.3e0a					PGMSetBaseAddress:
.3e0a	8e 15 05	stx $0515			stx 	PGMBaseHigh
.3e0d	8c 16 05	sty $0516			sty 	PGMEndMemoryHigh
.3e10	60		rts				rts
.3e11					PGMNewProgram:
.3e11	64 20		stz $20				stz 	zTemp0						; copy base address to zTemp0
.3e13	ad 15 05	lda $0515			lda 	PGMBaseHigh
.3e16	85 21		sta $21				sta 	zTemp0+1
.3e18	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.3e1a	92 20		sta ($20)			sta 	(zTemp0)
.3e1c	60		rts				rts
.3e1d					PGMEndProgram:
.3e1d	64 20		stz $20				stz 	zTemp0 						; copy base address to zTemp0
.3e1f	ad 15 05	lda $0515			lda 	PGMBaseHigh
.3e22	85 21		sta $21				sta 	zTemp0+1
.3e24					_PGMEPLoop:
.3e24	b2 20		lda ($20)			lda 	(zTemp0)
.3e26	f0 0b		beq $3e33			beq 	_PGMEPExit
.3e28	18		clc				clc
.3e29	65 20		adc $20				adc 	zTemp0
.3e2b	85 20		sta $20				sta 	zTemp0
.3e2d	90 f5		bcc $3e24			bcc 	_PGMEPLoop
.3e2f	e6 21		inc $21				inc 	zTemp0+1
.3e31	80 f1		bra $3e24			bra 	_PGMEPLoop
.3e33					_PGMEPExit:
.3e33	60		rts				rts
.0515					PGMBaseHigh:
>0515							.fill 	1
.0516					PGMEndMemoryHigh:
>0516							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.3e34					TOKResetElement:
.3e34	9c 17 05	stz $0517			stz 	TOKElement
.3e37	60		rts				rts
.3e38					TOKWriteElement:
.3e38	da		phx				phx
.3e39	ae 17 05	ldx $0517			ldx 	TOKElement
.3e3c	9d 18 05	sta $0518,x			sta 	TOKElementText,x
.3e3f	9e 19 05	stz $0519,x			stz 	TOKElementText+1,x
.3e42	fa		plx				plx
.3e43	ee 17 05	inc $0517			inc 	TOKElement
.3e46	60		rts				rts
.0517					TOKElement:
>0517							.fill 	1
.0518					TOKElementText:
>0518							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.3e47					TOKTokeniseConstant:
.3e47	a5 0e		lda $0e				lda 	IFR0+IM0 					; check > 64
.3e49	48		pha				pha 								; save on stack
.3e4a	29 c0		and #$c0			and 	#$C0
.3e4c	05 0f		ora $0f				ora 	IFR0+IM1
.3e4e	05 10		ora $10				ora 	IFR0+IM2
.3e50	f0 10		beq $3e62			beq 	_TTCLess
.3e52	da		phx				phx
.3e53	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.3e55					_TTCShiftRight:
.3e55	46 10		lsr $10				lsr 	IFR0+IM2
.3e57	66 0f		ror $0f				ror 	IFR0+IM1
.3e59	66 0e		ror $0e				ror 	IFR0+IM0
.3e5b	ca		dex				dex
.3e5c	d0 f7		bne $3e55			bne 	_TTCShiftRight
.3e5e	fa		plx				plx
.3e5f	20 47 3e	jsr $3e47			jsr 	TOKTokeniseConstant
.3e62					_TTCLess:
.3e62	68		pla				pla
.3e63	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.3e65	20 04 3f	jsr $3f04			jsr 	TOKWriteA
.3e68	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.3e69					TOKTokeniseDecimals:
.3e69	20 14 3f	jsr $3f14			jsr 	TOKGetNext 					; consume the .
.3e6c	20 3e 40	jsr $403e			jsr 	TOKExtractInteger 			; pull an integer out as text.
.3e6f	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.3e71	20 04 3f	jsr $3f04			jsr 	TOKWriteA
.3e74	20 79 3e	jsr $3e79			jsr 	TOKOutputElementBuffer 		; then the buffer
.3e77	18		clc				clc
.3e78	60		rts				rts
.3e79					TOKOutputElementBuffer:
.3e79	ad 17 05	lda $0517			lda 	TOKElement 					; get count and write that
.3e7c	20 04 3f	jsr $3f04			jsr 	TOKWriteA
.3e7f	a8		tay				tay 								; put in Y
.3e80	f0 0c		beq $3e8e			beq 	_TOEExit 					; exit if empty which is okay.
.3e82	a2 01		ldx #$01			ldx 	#1
.3e84					_TOELoop:
.3e84	bd 17 05	lda $0517,x			lda 	TOKElement,x
.3e87	20 04 3f	jsr $3f04			jsr 	TOKWriteA
.3e8a	e8		inx				inx
.3e8b	88		dey				dey
.3e8c	d0 f6		bne $3e84			bne 	_TOELoop
.3e8e					_TOEExit:
.3e8e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.3e8f					TOKTokenise:
.3e8f	8c 18 06	sty $0618			sty 	TOKDataSource+1 			; save source routine pointer
.3e92	8e 17 06	stx $0617			stx 	TOKDataSource
.3e95	a9 01		lda #$01			lda 	#1 							; set first element flag.
.3e97	8d 19 06	sta $0619			sta 	TOKIsFirstElement
.3e9a	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.3e9c	8d 01 04	sta $0401			sta 	TOKLineSize 				; line length itself and the line numbers.
.3e9f	9c 02 04	stz $0402			stz 	TOKLineNumber
.3ea2	9c 03 04	stz $0403			stz 	TOKLineNumber+1
.3ea5					_TOKMainLoop:
.3ea5	20 10 3f	jsr $3f10			jsr 	TOKGet 						; what follows.
.3ea8	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.3eaa	f0 4f		beq $3efb			beq 	_TOKExit
.3eac	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.3eae	d0 05		bne $3eb5			bne 	_TOKElement
.3eb0	20 14 3f	jsr $3f14			jsr 	TOKGetNext
.3eb3	80 f0		bra $3ea5			bra 	_TOKMainLoop
.3eb5					_TOKElement:
.3eb5	20 bc 40	jsr $40bc			jsr 	TOKIsDigit 					; is it 0..9
.3eb8	90 0a		bcc $3ec4			bcc 	_TOKNotDigit
.3eba	20 15 40	jsr $4015			jsr 	TOKTokeniseInteger 			; get integer
.3ebd	b0 43		bcs $3f02			bcs 	_TOKFail 					; did it fail ?
.3ebf	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.3ec2	80 e1		bra $3ea5			bra 	_TOKMainLoop
.3ec4					_TOKNotDigit:
.3ec4	9c 19 06	stz $0619			stz 	TOKIsFirstElement 			; clear first element flag
.3ec7	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.3ec9	d0 07		bne $3ed2			bne 	_TOKNotHex
.3ecb	20 5d 3f	jsr $3f5d			jsr 	TOKTokeniseHexadecimal
.3ece	b0 32		bcs $3f02			bcs 	_TOKFail
.3ed0	80 d3		bra $3ea5			bra 	_TOKMainLoop
.3ed2					_TOKNotHex:
.3ed2	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.3ed4	d0 07		bne $3edd			bne 	_TOKNotDecimal
.3ed6	20 69 3e	jsr $3e69			jsr 	TOKTokeniseDecimals
.3ed9	b0 27		bcs $3f02			bcs 	_TOKFail
.3edb	80 c8		bra $3ea5			bra 	_TOKMainLoop
.3edd					_TOKNotDecimal:
.3edd	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.3edf	d0 07		bne $3ee8			bne 	_TOKNotString
.3ee1	20 83 40	jsr $4083			jsr 	TOKTokeniseString
.3ee4	b0 1c		bcs $3f02			bcs 	_TOKFail
.3ee6	80 bd		bra $3ea5			bra 	_TOKMainLoop
.3ee8					_TOKNotString:
.3ee8	20 d9 40	jsr $40d9			jsr 	TOKIsAlpha 					; identifier ?
.3eeb	b0 07		bcs $3ef4			bcs 	_TOKIdentifier
.3eed	20 52 40	jsr $4052			jsr 	TOKTokenisePunctuation 		; punctuation
.3ef0	b0 10		bcs $3f02			bcs 	_TOKFail
.3ef2	80 b1		bra $3ea5			bra 	_TOKMainLoop
.3ef4					_TOKIdentifier:
.3ef4	20 97 3f	jsr $3f97			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.3ef7	b0 09		bcs $3f02			bcs 	_TOKFail
.3ef9	80 aa		bra $3ea5			bra 	_TOKMainLoop
.3efb					_TOKExit:
.3efb	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.3efd	20 04 3f	jsr $3f04			jsr 	TOKWriteA
.3f00	18		clc				clc									; return with carry set.
.3f01	60		rts				rts
.3f02					_TOKFail:
.3f02	38		sec				sec
.3f03	60		rts				rts
.3f04					TOKWriteA:
.3f04	da		phx				phx
.3f05	ae 01 04	ldx $0401			ldx 	TOKLineSize
.3f08	9d 01 04	sta $0401,x			sta 	TOKLineSize,x
.3f0b	fa		plx				plx
.3f0c	ee 01 04	inc $0401			inc 	TOKLineSize
.3f0f	60		rts				rts
.3f10					TOKGet:
.3f10	18		clc				clc
.3f11	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.3f14					TOKGetNext:
.3f14	38		sec				sec
.3f15	6c 17 06	jmp ($0617)			jmp 	(TOKDataSource)
.0617					TOKDataSource:
>0617							.fill 	2
.0619					TOKIsFirstElement:
>0619							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.3f18					TOKFindToken:
.3f18	a2 8b		ldx #$8b			ldx 	#StandardTokens & $FF 		; do this table
.3f1a	a0 39		ldy #$39			ldy 	#StandardTokens >> 8
.3f1c	20 27 3f	jsr $3f27			jsr 	TOKFindTokenXY 				; find it, or not
.3f1f	90 04		bcc $3f25			bcc 	_TOKFTFail
.3f21	a2 00		ldx #$00			ldx 	#0
.3f23	38		sec				sec
.3f24	60		rts				rts
.3f25					_TOKFTFail
.3f25	18		clc				clc
.3f26	60		rts				rts
.3f27					TOKFindTokenXY:
.3f27	86 20		stx $20				stx 	zTemp0 						; save token table address
.3f29	84 21		sty $21				sty 	zTemp0+1
.3f2b	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.3f2d	8d 1a 06	sta $061a			sta 	TOKCurrent
.3f30					_TOKFindLoop:
.3f30	b2 20		lda ($20)			lda 	(zTemp0) 					; get token length from table
.3f32	18		clc				clc 		 						; clear carry in case of fail
.3f33	30 17		bmi $3f4c			bmi 	_TOKExit 					; end of table, fail, so return CC.
.3f35	cd 17 05	cmp $0517			cmp 	TOKElement 					; compare against the element length
.3f38	d0 13		bne $3f4d			bne 	_TOKNext 					; different, try next.
.3f3a	aa		tax				tax 								; number of chars to compare.
.3f3b	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.3f3d					_TOKCompare:
.3f3d	b1 20		lda ($20),y			lda 	(zTemp0),y 					; compare the characters
.3f3f	d9 17 05	cmp $0517,y			cmp 	TOKElementText-1,y
.3f42	d0 09		bne $3f4d			bne 	_TOKNext 					; different ? try next
.3f44	c8		iny				iny 								; compare next two
.3f45	ca		dex				dex
.3f46	d0 f5		bne $3f3d			bne 	_TOKCompare 				; until done X characters.
.3f48	38		sec				sec
.3f49	ad 1a 06	lda $061a			lda 	TOKCurrent 					; return current ID.
.3f4c					_TOKExit:
.3f4c	60		rts				rts
.3f4d					_TOKNext:
.3f4d	ee 1a 06	inc $061a			inc 	TOKCurrent 					; increment token #
.3f50	38		sec				sec 								; add length+1 to ptr
.3f51	b2 20		lda ($20)			lda 	(zTemp0)
.3f53	65 20		adc $20				adc 	zTemp0
.3f55	85 20		sta $20				sta 	zTemp0
.3f57	90 d7		bcc $3f30			bcc 	_TOKFindLoop
.3f59	e6 21		inc $21				inc 	zTemp0+1
.3f5b	80 d3		bra $3f30			bra 	_TOKFindLoop
.061a					TOKCurrent:
>061a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.3f5d					TOKTokeniseHexadecimal:
.3f5d	20 14 3f	jsr $3f14			jsr 	TOKGetNext 					; consume the $
.3f60	a2 0e		ldx #$0e			ldx 	#IFR0
.3f62	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero 				; set R0 = 0
.3f65					_TTHLoop:
.3f65	20 10 3f	jsr $3f10			jsr 	TOKGet 						; keep getting and copying while numeric.
.3f68	20 e6 40	jsr $40e6			jsr 	TOKIsHexadecimal
.3f6b	90 20		bcc $3f8d			bcc 	_TTHDone
.3f6d	a2 0e		ldx #$0e			ldx 	#IFR0 						; shift R0 right 4
.3f6f	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3f72	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3f75	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3f78	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.3f7b	20 14 3f	jsr $3f14			jsr 	TOKGetNext
.3f7e	38		sec				sec 								; convert to decimal.
.3f7f	e9 30		sbc #$30			sbc 	#48
.3f81	c9 0a		cmp #$0a			cmp 	#10
.3f83	90 02		bcc $3f87			bcc 	_TTHNotAlpha
.3f85	e9 07		sbc #$07			sbc 	#7
.3f87					_TTHNotAlpha:
.3f87	05 0e		ora $0e				ora 	IFR0+IM0 					; OR in
.3f89	85 0e		sta $0e				sta 	IFR0+IM0
.3f8b	80 d8		bra $3f65			bra 	_TTHLoop
.3f8d					_TTHDone:
.3f8d	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.3f8f	20 04 3f	jsr $3f04			jsr 	TOKWriteA
.3f92	20 47 3e	jsr $3e47			jsr 	TOKTokeniseConstant 		; write integer out.
.3f95	18		clc				clc
.3f96	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.3f97					TOKTokeniseIdentifier:
.3f97	20 34 3e	jsr $3e34			jsr 	TOKResetElement 			; extract an identifier
.3f9a					_TOKGetIdentifier:
.3f9a	20 10 3f	jsr $3f10			jsr 	TOKGet
.3f9d	20 a6 40	jsr $40a6			jsr 	TOKToUpper
.3fa0	20 c8 40	jsr $40c8			jsr 	TOKIsIdentifierElement
.3fa3	90 08		bcc $3fad			bcc 	_TOKEndIdent
.3fa5	20 38 3e	jsr $3e38			jsr		TOKWriteElement
.3fa8	20 14 3f	jsr $3f14			jsr 	TOKGetNext
.3fab	80 ed		bra $3f9a			bra 	_TOKGetIdentifier
.3fad					_TOKEndIdent:
.3fad	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.3faf	d0 06		bne $3fb7			bne 	_TOKNotString
.3fb1	20 38 3e	jsr $3e38			jsr 	TOKWriteElement 			; add it
.3fb4	20 14 3f	jsr $3f14			jsr 	TOKGetNext 					; consume it
.3fb7					_TOKNotString:
.3fb7	20 10 3f	jsr $3f10			jsr 	TOKGet 						; finally check for (
.3fba	c9 28		cmp #$28			cmp 	#"("
.3fbc	d0 06		bne $3fc4			bne 	_TOKNoArray
.3fbe	20 38 3e	jsr $3e38			jsr 	TOKWriteElement 			; add it
.3fc1	20 14 3f	jsr $3f14			jsr 	TOKGetNext 					; consume it
.3fc4					_TOKNoArray:
.3fc4	20 18 3f	jsr $3f18			jsr 	TOKFindToken 				; find it
.3fc7	90 05		bcc $3fce			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.3fc9	20 04 3f	jsr $3f04			jsr 	TOKWriteA
.3fcc	18		clc				clc
.3fcd	60		rts				rts
.3fce					_TOKIsVariable:
.3fce	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.3fd0					_TOKOutputBuffer:
.3fd0	bd 18 05	lda $0518,x			lda 	TOKElementText,x 			; output it translated.
.3fd3	20 fc 3f	jsr $3ffc			jsr 	TOKTranslateIdentifier
.3fd6	20 04 3f	jsr $3f04			jsr 	TOKWriteA
.3fd9	e8		inx				inx
.3fda	bd 18 05	lda $0518,x			lda 	TOKElementText,x
.3fdd	20 c8 40	jsr $40c8			jsr 	TOKIsIdentifierElement
.3fe0	b0 ee		bcs $3fd0			bcs 	_TOKOutputBuffer
.3fe2	a8		tay				tay 								; last char in Y
.3fe3	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.3fe5	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.3fe7	f0 0e		beq $3ff7			beq 	_TOKIVExit
.3fe9	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.3feb	d0 04		bne $3ff1			bne 	_TOKIVCheckArray 			; no, check for (
.3fed	1a		inc a				inc 	a 							; token is $7D
.3fee	bc 19 05	ldy $0519,x			ldy 	TOKElementText+1,x 			; get next one.
.3ff1					_TOKIVCheckArray:
.3ff1	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.3ff3	d0 02		bne $3ff7			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.3ff5	1a		inc a				inc 	a
.3ff6	1a		inc a				inc 	a
.3ff7					_TOKIVExit:
.3ff7	20 04 3f	jsr $3f04			jsr 	TOKWriteA 					; ending token
.3ffa	18		clc				clc
.3ffb	60		rts				rts
.3ffc					TOKTranslateIdentifier:
.3ffc	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.3ffe	f0 0f		beq $400f			beq 	_TTI64
.4000	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.4002	f0 0e		beq $4012			beq 	_TTI65
.4004	38		sec				sec
.4005	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.4007	10 03		bpl $400c			bpl 	_TTIExit
.4009	18		clc				clc 								; map 09 onto 26-35
.400a	69 2b		adc #$2b			adc 	#"A"-"0"+26
.400c					_TTIExit:
.400c	09 40		ora #$40			ora 	#$40 						; correct range.
.400e	60		rts				rts
.400f	a9 64		lda #$64	_TTI64:	lda 	#$64
.4011	60		rts				rts
.4012	a9 65		lda #$65	_TTI65:	lda 	#$65
.4014	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.4015					TOKTokeniseInteger:
.4015	20 3e 40	jsr $403e			jsr 	TOKExtractInteger 			; pull an integer out as text.
.4018	a2 18		ldx #$18			ldx 	#TOKElementText & $FF
.401a	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.401c	ad 17 05	lda $0517			lda		TOKElement
.401f	20 7e 4d	jsr $4d7e			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.4022	ad 19 06	lda $0619			lda 	TOKIsFirstElement 			; first element ?
.4025	f0 12		beq $4039			beq 	_TOKNotLineNumber
.4027	a5 10		lda $10				lda 	IFR0+IM2 					; check it's a 2 digit number
.4029	d0 0c		bne $4037			bne 	_TOKBadLineNumeber
.402b	a5 0e		lda $0e				lda 	IFR0+IM0 					; copy it to the line number section.
.402d	8d 02 04	sta $0402			sta 	TOKLineNumber
.4030	a5 0f		lda $0f				lda 	IFR0+IM1
.4032	8d 03 04	sta $0403			sta 	TOKLineNumber+1
.4035	18		clc				clc
.4036	60		rts				rts
.4037					_TOKBadLineNumeber:
.4037	38		sec				sec
.4038	60		rts				rts
.4039					_TOKNotLineNumber:
.4039	20 47 3e	jsr $3e47			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.403c	18		clc				clc
.403d	60		rts				rts
.403e					TOKExtractInteger:
.403e	20 34 3e	jsr $3e34			jsr 	TOKResetElement 			; restart
.4041					_TTILoop:
.4041	20 10 3f	jsr $3f10			jsr 	TOKGet 						; keep getting and copying while numeric.
.4044	20 bc 40	jsr $40bc			jsr 	TOKIsDigit
.4047	90 08		bcc $4051			bcc 	_TOKEIExit
.4049	20 38 3e	jsr $3e38			jsr 	TOKWriteElement
.404c	20 14 3f	jsr $3f14			jsr 	TOKGetNext
.404f	80 f0		bra $4041			bra 	_TTILoop
.4051					_TOKEIExit:
.4051	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.4052					TOKTokenisePunctuation:
.4052	20 34 3e	jsr $3e34			jsr 	TOKResetElement 			; copy first punctuation character into element.
.4055	20 14 3f	jsr $3f14			jsr 	TOKGetNext
.4058	20 38 3e	jsr $3e38			jsr 	TOKWriteElement
.405b	20 10 3f	jsr $3f10			jsr 	TOKGet 						; what follows ?
.405e	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.4060	f0 10		beq $4072			beq 	_TTPOne
.4062	20 d0 40	jsr $40d0			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.4065	b0 0b		bcs $4072			bcs 	_TTPOne 					; these speed things up a bit.
.4067	20 38 3e	jsr $3e38			jsr 	TOKWriteElement 			; this is what we will search for.
.406a	20 18 3f	jsr $3f18			jsr 	TOKFindToken
.406d	b0 0a		bcs $4079			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.406f	ce 17 05	dec $0517			dec 	TOKElement 					; make it a single character
.4072					_TTPOne:
.4072	20 18 3f	jsr $3f18			jsr 	TOKFindToken 				; look for one character punctuation
.4075	b0 07		bcs $407e			bcs 	_TTPOutputExit 				; we found it
.4077	38		sec				sec 								; not recognised.
.4078	60		rts				rts
.4079					_TTPConsumeExit:
.4079	48		pha				pha
.407a	20 14 3f	jsr $3f14			jsr 	TOKGetNext 					; get the 2nd char out.
.407d	68		pla				pla
.407e					_TTPOutputExit:
.407e	20 04 3f	jsr $3f04			jsr  	TOKWriteA 					; write token out
.4081	18		clc				clc
.4082	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.4083					TOKTokeniseString:
.4083	20 14 3f	jsr $3f14			jsr 	TOKGetNext 					; consume the "
.4086	20 34 3e	jsr $3e34			jsr 	TOKResetElement 			; start getting the string
.4089					_TOKTSLoop:
.4089	20 10 3f	jsr $3f10			jsr 	TOKGet 						; check EOL
.408c	c9 00		cmp #$00			cmp 	#0
.408e	f0 0c		beq $409c			beq 	_TOKTSExit
.4090	20 14 3f	jsr $3f14			jsr 	TOKGetNext 					; get and consume
.4093	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.4095	f0 05		beq $409c			beq 	_TOKTSExit
.4097	20 38 3e	jsr $3e38			jsr 	TOKWriteElement
.409a	80 ed		bra $4089			bra 	_TOKTSLoop
.409c					_TOKTSExit:
.409c	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.409e	20 04 3f	jsr $3f04			jsr 	TOKWriteA
.40a1	20 79 3e	jsr $3e79			jsr 	TOKOutputElementBuffer
.40a4	18		clc				clc
.40a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.40a6					TOKToUpper:
.40a6	c9 61		cmp #$61			cmp 	#"a"
.40a8	90 06		bcc $40b0			bcc 	_TTUNotLower
.40aa	c9 7b		cmp #$7b			cmp 	#"z"+1
.40ac	b0 02		bcs $40b0			bcs 	_TTUNotLower
.40ae	49 20		eor #$20			eor 	#$20
.40b0					_TTUNotLower:
.40b0	60		rts				rts
.40b1					TOKToLower:
.40b1	c9 41		cmp #$41			cmp 	#"A"
.40b3	90 06		bcc $40bb			bcc 	_TTUNotUpper
.40b5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40b7	b0 02		bcs $40bb			bcs 	_TTUNotUpper
.40b9	49 20		eor #$20			eor 	#$20
.40bb					_TTUNotUpper:
.40bb	60		rts				rts
.40bc					TOKIsDigit:
.40bc	c9 30		cmp #$30			cmp 	#"0"
.40be	90 06		bcc $40c6			bcc 	TOKFail
.40c0	c9 3a		cmp #$3a			cmp 	#"9"+1
.40c2	b0 02		bcs $40c6			bcs 	TOKFail
.40c4					TOKSucceed:
.40c4	38		sec				sec
.40c5	60		rts				rts
.40c6					TOKFail:
.40c6	18		clc				clc
.40c7	60		rts				rts
.40c8					TOKIsIdentifierElement:
.40c8	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.40ca	f0 f8		beq $40c4			beq 	TOKSucceed
.40cc	c9 5f		cmp #$5f			cmp 	#"_"
.40ce	f0 f4		beq $40c4			beq 	TOKSucceed 					; else fall through to alphanumeric
.40d0					TOKIsAlphaNumeric:
.40d0	20 d9 40	jsr $40d9			jsr 	TOKIsAlpha
.40d3	b0 ef		bcs $40c4			bcs 	TOKSucceed
.40d5	20 bc 40	jsr $40bc			jsr 	TOKIsDigit
.40d8	60		rts				rts
.40d9					TOKIsAlpha:
.40d9	20 a6 40	jsr $40a6			jsr 	TOKToUpper
.40dc	c9 41		cmp #$41			cmp 	#"A"
.40de	90 e6		bcc $40c6			bcc 	TOKFail
.40e0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40e2	b0 e2		bcs $40c6			bcs 	TOKFail
.40e4	80 de		bra $40c4			bra 	TOKSucceed
.40e6					TOKIsHexadecimal:
.40e6	20 bc 40	jsr $40bc			jsr		TOKIsDigit
.40e9	b0 d9		bcs $40c4			bcs 	TOKSucceed
.40eb	20 d9 40	jsr $40d9			jsr 	TOKIsAlpha
.40ee	90 d6		bcc $40c6			bcc 	TOKFail
.40f0	c9 47		cmp #$47			cmp 	#"F"+1
.40f2	b0 d2		bcs $40c6			bcs 	TOKFail
.40f4	80 ce		bra $40c4			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.40f6					Command_CALL:
.40f6	a9 42		lda #$42			lda 	#STK_CALL
.40f8	20 8b 45	jsr $458b			jsr 	StackOpen
.40fb	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; check identifier follows.
.40fd	29 c0		and #$c0			and 	#$C0
.40ff	c9 40		cmp #$40			cmp 	#$40
.4101	d0 29		bne $412c			bne 	_CCSyntax
.4103	20 5b 48	jsr $485b			jsr 	VARGetInfo 					; get the information
.4106	20 72 45	jsr $4572			jsr 	ERRCheckRParen 				; check right bracket follows.
.4109	20 0d 48	jsr $480d			jsr 	VARFind 					; exists ?
.410c	90 21		bcc $412f			bcc 	_CCUnknown
.410e	86 21		stx $21				stx 	zTemp0+1 					; save target in XA
.4110	85 20		sta $20				sta 	zTemp0
.4112	20 bf 45	jsr $45bf			jsr 	STKSaveCodePosition 		; save return address on stack.
.4115	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.4117	b1 20		lda ($20),y			lda 	(zTemp0),y
.4119	c9 ff		cmp #$ff			cmp 	#$FF
.411b	d0 12		bne $412f			bne 	_CCUnknown
.411d	88		dey				dey 								; get Y offset to stack
.411e	b1 20		lda ($20),y			lda 	(zTemp0),y
.4120	48		pha				pha
.4121	88		dey				dey 								; get address
.4122	b1 20		lda ($20),y			lda 	(zTemp0),y
.4124	85 1f		sta $1f				sta 	codePtr+1
.4126	b2 20		lda ($20)			lda 	(zTemp0)
.4128	85 1e		sta $1e				sta 	codePtr
.412a	7a		ply				ply 								; restore Y
.412b	60		rts				rts
.412c					_CCSyntax:
.412c	4c d5 43	jmp $43d5		jmp	ErrorV_syntax
.412f					_CCUnknown:
.412f	4c 4a 45	jmp $454a		jmp	ErrorV_unknown
.4132					Command_ENDPROC:
.4132	a9 42		lda #$42			lda 	#STK_CALL
.4134	20 b7 45	jsr $45b7			jsr 	StackCheckFrame
.4137	20 d1 45	jsr $45d1			jsr 	STKLoadCodePosition 		; return
.413a	20 a9 45	jsr $45a9			jsr 	StackClose
.413d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.413e					Command_DO:
.413e	a9 22		lda #$22			lda 	#STK_DO
.4140	20 8b 45	jsr $458b			jsr 	StackOpen
.4143	20 bf 45	jsr $45bf			jsr 	STKSaveCodePosition 		; save loop position
.4146	60		rts				rts
.4147					Command_EXIT:
.4147	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.4149	20 b7 45	jsr $45b7			jsr 	StackCheckFrame
.414c	20 a9 45	jsr $45a9			jsr 	StackClose 					; close it
.414f	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.4151	aa		tax				tax
.4152	20 e7 42	jsr $42e7			jsr 	ScanForward
.4155	60		rts				rts
.4156					Command_LOOP:
.4156	a9 22		lda #$22			lda 	#STK_DO
.4158	20 b7 45	jsr $45b7			jsr 	StackCheckFrame
.415b	20 d1 45	jsr $45d1			jsr 	STKLoadCodePosition 		; loop back
.415e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.415f					Command_FOR:
.415f	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.4161	20 8b 45	jsr $458b			jsr 	StackOpen
.4164	20 4c 32	jsr $324c			jsr 	CommandLET 					; do "I = 1" bit
.4167	5a		phy				phy 								; save variable address to +4,+5
.4168	a0 04		ldy #$04			ldy 	#4
.416a	a5 20		lda $20				lda 	zTemp0
.416c	91 28		sta ($28),y			sta 	(basicStack),y
.416e	c8		iny				iny
.416f	a5 21		lda $21				lda 	zTemp0+1
.4171	91 28		sta ($28),y			sta 	(basicStack),y
.4173	7a		ply				ply
.4174	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.4176	20 82 45	jsr $4582			jsr 	ERRCheckA
.4179	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.417c	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.417e	a2 0e		ldx #$0e			ldx 	#IFR0
.4180	20 d5 41	jsr $41d5			jsr 	CFSaveR0X
.4183	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; STEP here ?
.4185	c9 91		cmp #$91			cmp 	#PR_STEP
.4187	d0 06		bne $418f			bne 	_CFStep1
.4189	c8		iny				iny 								; consume step
.418a	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 				; evaluate STEP
.418d	80 24		bra $41b3			bra 	_CFWriteStep
.418f					_CFStep1:
.418f	a2 0e		ldx #$0e			ldx 	#IFR0 						; default R0, 1
.4191	a9 01		lda #$01			lda 	#1
.4193	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.4196	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.4197	a0 04		ldy #$04			ldy 	#4 							; get variable address
.4199	b1 28		lda ($28),y			lda 	(basicStack),y
.419b	85 20		sta $20				sta 	zTemp0
.419d	c8		iny				iny
.419e	b1 28		lda ($28),y			lda 	(basicStack),y
.41a0	85 21		sta $21				sta 	zTemp0+1
.41a2	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.41a4	b1 20		lda ($20),y			lda 	(zTemp0),y
.41a6	d0 0a		bne $41b2			bne 	_CFNotOptimised
.41a8	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.41aa	b1 28		lda ($28),y			lda 	(basicStack),y
.41ac	d0 04		bne $41b2			bne 	_CFNotOptimised
.41ae	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.41b0	85 11		sta $11				sta 	IFR0+IExp
.41b2					_CFNotOptimised:
.41b2	7a		ply				ply
.41b3					_CFWriteStep:
.41b3	a2 0e		ldx #$0e			ldx 	#IFR0 						; Write to additive.
.41b5	a9 06		lda #$06			lda 	#6
.41b7	20 d5 41	jsr $41d5			jsr 	CFSaveR0X
.41ba	20 bf 45	jsr $45bf			jsr 	STKSaveCodePosition 		; save loop position
.41bd	60		rts				rts
.41be					CFLoadR0X:
.41be	5a		phy				phy
.41bf	a8		tay				tay
.41c0	b1 28		lda ($28),y			lda 	(basicStack),y
.41c2	95 00		sta $00,x			sta 	IM0,x
.41c4	c8		iny				iny
.41c5	b1 28		lda ($28),y			lda 	(basicStack),y
.41c7	95 01		sta $01,x			sta 	IM1,x
.41c9	c8		iny				iny
.41ca	b1 28		lda ($28),y			lda 	(basicStack),y
.41cc	95 02		sta $02,x			sta 	IM2,x
.41ce	c8		iny				iny
.41cf	b1 28		lda ($28),y			lda 	(basicStack),y
.41d1	95 03		sta $03,x			sta 	IExp,x
.41d3	7a		ply				ply
.41d4	60		rts				rts
.41d5					CFSaveR0X:
.41d5	5a		phy				phy
.41d6	a8		tay				tay
.41d7	b5 00		lda $00,x			lda 	IM0,x
.41d9	91 28		sta ($28),y			sta 	(basicStack),y
.41db	c8		iny				iny
.41dc	b5 01		lda $01,x			lda 	IM1,x
.41de	91 28		sta ($28),y			sta 	(basicStack),y
.41e0	c8		iny				iny
.41e1	b5 02		lda $02,x			lda 	IM2,x
.41e3	91 28		sta ($28),y			sta 	(basicStack),y
.41e5	c8		iny				iny
.41e6	b5 03		lda $03,x			lda 	IExp,x
.41e8	91 28		sta ($28),y			sta 	(basicStack),y
.41ea	7a		ply				ply
.41eb	60		rts				rts
.41ec					Command_NEXT:
.41ec	a9 37		lda #$37			lda 	#STK_FOR
.41ee	20 b7 45	jsr $45b7			jsr 	StackCheckFrame
.41f1	5a		phy				phy 								; check optimised loop
.41f2	a0 09		ldy #$09			ldy 	#9
.41f4	b1 28		lda ($28),y			lda 	(basicStack),y
.41f6	7a		ply				ply
.41f7	0a		asl a				asl 	a
.41f8	b0 35		bcs $422f			bcs 	_CNOptimised
.41fa	20 66 42	jsr $4266			jsr 	_CNLoadValue 				; load index value to R0.
.41fd	a2 12		ldx #$12			ldx 	#IFR1 						; load adding value to R1.
.41ff	a9 06		lda #$06			lda 	#6
.4201	20 be 41	jsr $41be			jsr 	CFLoadR0X
.4204	20 10 49	jsr $4910			jsr 	IFloatAdd 					; add them together and write back.
.4207	20 89 42	jsr $4289			jsr 	_CNSaveValue
.420a	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.420c	a2 12		ldx #$12			ldx 	#IFR1
.420e	20 be 41	jsr $41be			jsr 	CFLoadR0X
.4211	20 e8 4b	jsr $4be8			jsr 	IFloatCompare 				; compare terminal vs current
.4214	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.4216	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero
.4219	f0 10		beq $422b			beq 	_CNLoopBack
.421b	a5 11		lda $11				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.421d	5a		phy				phy
.421e	a0 09		ldy #$09			ldy 	#6+IExp
.4220	51 28		eor ($28),y			eor 	(basicStack),y
.4222	7a		ply				ply
.4223	29 40		and #$40			and 	#IFSign
.4225	f0 04		beq $422b			beq 	_CNLoopBack
.4227					_CNExitLoop:
.4227	20 a9 45	jsr $45a9			jsr 	StackClose		 			; return
.422a	60		rts				rts
.422b					_CNLoopBack:
.422b	20 d1 45	jsr $45d1			jsr 	STKLoadCodePosition 		; loop back
.422e	60		rts				rts
.422f					_CNOptimised:
.422f	5a		phy				phy
.4230	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.4232	b1 28		lda ($28),y			lda 	(basicStack),y
.4234	85 24		sta $24				sta 	zTemp2
.4236	c8		iny				iny
.4237	b1 28		lda ($28),y			lda 	(basicStack),y
.4239	85 25		sta $25				sta 	zTemp2+1
.423b	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.423d					_CNIncrement:
.423d	c8		iny				iny
.423e	b1 24		lda ($24),y			lda 	(zTemp2),y
.4240	1a		inc a				inc 	a
.4241	91 24		sta ($24),y			sta 	(zTemp2),y
.4243	f0 f8		beq $423d			beq 	_CNIncrement
.4245	18		clc				clc 								; point zTemp0 to terminal value
.4246	a5 28		lda $28				lda 	basicStack
.4248	69 0a		adc #$0a			adc 	#10
.424a	85 20		sta $20				sta 	zTemp0
.424c	a5 29		lda $29				lda 	basicStack+1
.424e	69 00		adc #$00			adc 	#0
.4250	85 21		sta $21				sta 	zTemp0+1
.4252	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.4254	b2 24		lda ($24)			lda 	(zTemp2)
.4256	d2 20		cmp ($20)			cmp 	(zTemp0)
.4258	b1 24		lda ($24),y			lda 	(zTemp2),y
.425a	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.425c	c8		iny				iny
.425d	b1 24		lda ($24),y			lda 	(zTemp2),y
.425f	f1 20		sbc ($20),y			sbc 	(zTemp0),y
.4261	7a		ply				ply
.4262	b0 c3		bcs $4227			bcs 	_CNExitLoop
.4264	80 c5		bra $422b			bra 	_CNLoopBack
.4266					_CNLoadValue:
.4266	5a		phy				phy
.4267	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.4269	b1 28		lda ($28),y			lda 	(basicStack),y
.426b	85 24		sta $24				sta 	zTemp2
.426d	c8		iny				iny
.426e	b1 28		lda ($28),y			lda 	(basicStack),y
.4270	85 25		sta $25				sta 	zTemp2+1
.4272	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.4274	b1 24		lda ($24),y			lda 	(zTemp2),y
.4276	85 0e		sta $0e				sta 	IFR0+IM0
.4278	c8		iny				iny
.4279	b1 24		lda ($24),y			lda 	(zTemp2),y
.427b	85 0f		sta $0f				sta 	IFR0+IM1
.427d	c8		iny				iny
.427e	b1 24		lda ($24),y			lda 	(zTemp2),y
.4280	85 10		sta $10				sta 	IFR0+IM2
.4282	c8		iny				iny
.4283	b1 24		lda ($24),y			lda 	(zTemp2),y
.4285	85 11		sta $11				sta 	IFR0+IExp
.4287	7a		ply				ply
.4288	60		rts				rts
.4289					_CNSaveValue:
.4289	5a		phy				phy
.428a	a0 00		ldy #$00			ldy 	#0
.428c	a5 0e		lda $0e				lda 	IFR0+IM0
.428e	91 24		sta ($24),y			sta 	(zTemp2),y
.4290	c8		iny				iny
.4291	a5 0f		lda $0f				lda 	IFR0+IM1
.4293	91 24		sta ($24),y			sta 	(zTemp2),y
.4295	c8		iny				iny
.4296	a5 10		lda $10				lda 	IFR0+IM2
.4298	91 24		sta ($24),y			sta 	(zTemp2),y
.429a	c8		iny				iny
.429b	a5 11		lda $11				lda 	IFR0+IExp
.429d	91 24		sta ($24),y			sta 	(zTemp2),y
.429f	7a		ply				ply
.42a0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.42a1					IfCommand:
.42a1	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 				; Get the if test.
.42a4	b1 1e		lda ($1e),y			lda 	(codePtr),y					; what follows ?
.42a6	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.42a8	d0 0a		bne $42b4			bne 	_IfStructured 				; we still support it.
.42aa	c8		iny				iny 								; consume THEN
.42ab	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero 			; is it zero
.42ae	f0 01		beq $42b1			beq 	_IfFail 					; if fail, go to next line
.42b0	60		rts				rts 								; if THEN just continue
.42b1					_IfFail:
.42b1	4c b6 33	jmp $33b6			jmp 	RUNEndOfLine
.42b4					_IfStructured:
.42b4	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero 			; is it zero
.42b7	d0 07		bne $42c0			bne 	_IfExit 					; if not, then continue normally.
.42b9	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.42bb	a2 85		ldx #$85			ldx 	#PR_ENDIF
.42bd	20 e7 42	jsr $42e7			jsr 	ScanForward 				; and run from there
.42c0					_IfExit:
.42c0	60		rts				rts
.42c1					ElseCode:
.42c1	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.42c3	aa		tax				tax 								; so just go to the structure exit
.42c4	20 e7 42	jsr $42e7			jsr 	ScanForward
.42c7	60		rts				rts
.42c8					EndIf:
.42c8	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.42c9					Command_REPEAT:
.42c9	a9 02		lda #$02			lda 	#STK_REPEAT
.42cb	20 8b 45	jsr $458b			jsr 	StackOpen
.42ce	20 bf 45	jsr $45bf			jsr 	STKSaveCodePosition 		; save loop position
.42d1	60		rts				rts
.42d2					Command_UNTIL:
.42d2	a9 02		lda #$02			lda 	#STK_REPEAT
.42d4	20 b7 45	jsr $45b7			jsr 	StackCheckFrame
.42d7	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 				; work out the test
.42da	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero 			; check if zero
.42dd	f0 04		beq $42e3			beq 	_CULoopBack 				; if so keep looping
.42df	20 a9 45	jsr $45a9			jsr 	StackClose		 			; return
.42e2	60		rts				rts
.42e3					_CULoopBack:
.42e3	20 d1 45	jsr $45d1			jsr 	STKLoadCodePosition 		; loop back
.42e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.42e7					ScanForward:
.42e7	85 20		sta $20				sta 	zTemp0 						; save scan options in zTemp0
.42e9	86 21		stx $21				stx 	zTemp0+1
.42eb	64 22		stz $22				stz 	zTemp1 						; clear structure count.
.42ed					_ScanForwardLoop:
.42ed	a5 22		lda $22				lda 	zTemp1 						; if structure count non zero, don't check for end.
.42ef	d0 0a		bne $42fb			bne 	_ScanNoCheck
.42f1	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; reached either target token.
.42f3	c5 20		cmp $20				cmp 	zTemp0
.42f5	f0 49		beq $4340			beq 	_ScanExit
.42f7	c5 21		cmp $21				cmp 	zTemp0+1
.42f9	f0 45		beq $4340			beq 	_ScanExit
.42fb					_ScanNoCheck:
.42fb	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get the token and consume it.
.42fd	c8		iny				iny
.42fe	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.4300	f0 37		beq $4339			beq		_ScanDataItem
.4302	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.4304	f0 33		beq $4339			beq 	_ScanDataItem
.4306	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.4308	f0 1b		beq $4325			beq 	_ScanNextLine
.430a	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.430c	d0 01		bne $430f			bne 	_ScanNoShift
.430e	c8		iny				iny
.430f					_ScanNoShift:
.430f	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.4311	b0 da		bcs $42ed			bcs 	_ScanForwardLoop
.4313	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.4315	90 d6		bcc $42ed			bcc 	_ScanForwardLoop
.4317	aa		tax				tax 								; access the table to get the adjustment.
.4318	18		clc				clc
.4319	a5 22		lda $22				lda 	zTemp1 						; add it to structure count.
.431b	7d ff 38	adc $38ff,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.431e	85 22		sta $22				sta 	zTemp1
.4320	10 cb		bpl $42ed			bpl		_ScanForwardLoop 			; error if -ve ?
.4322	4c 61 44	jmp $4461		jmp	ErrorV_structure
.4325					_ScanNextLine:
.4325	18		clc				clc	 								; forward to next line.
.4326	b2 1e		lda ($1e)			lda 	(codePtr)
.4328	65 1e		adc $1e				adc 	codePtr
.432a	85 1e		sta $1e				sta 	codePtr
.432c	90 02		bcc $4330			bcc 	_ScanNoCarry
.432e	e6 1f		inc $1f				inc 	codePtr+1
.4330					_ScanNoCarry:
.4330	a0 03		ldy #$03			ldy 	#3
.4332	b2 1e		lda ($1e)			lda 	(codePtr) 					; off end of program ?
.4334	d0 b7		bne $42ed			bne 	_ScanForwardLoop
.4336	4c 61 44	jmp $4461		jmp	ErrorV_structure
.4339					_ScanDataItem:
.4339	98		tya				tya
.433a	38		sec				sec
.433b	71 1e		adc ($1e),y			adc 	(codePtr),y
.433d	a8		tay				tay
.433e	80 ad		bra $42ed			bra 	_ScanForwardLoop
.4340					_ScanExit:
.4340	c8		iny				iny 								; consume final token.
.4341	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.4342					ScanProcedures:
.4342	a5 1e		lda $1e				lda 	codePtr 					; push codePtr on the stack
.4344	48		pha				pha
.4345	a5 1f		lda $1f				lda 	codePtr+1
.4347	48		pha				pha
.4348	5a		phy				phy
.4349	ad 15 05	lda $0515			lda 	PGMBaseHigh 				; back to the program start
.434c	85 1f		sta $1f				sta 	codePtr+1
.434e	64 1e		stz $1e				stz 	codePtr
.4350					_SPLoop:
.4350	b2 1e		lda ($1e)			lda 	(codePtr) 					; end of program
.4352	f0 18		beq $436c			beq 	_SPExit
.4354	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.4356	b1 1e		lda ($1e),y			lda 	(codePtr),y
.4358	c9 88		cmp #$88			cmp 	#PR_PROC
.435a	d0 03		bne $435f			bne 	_SPNext
.435c	20 74 43	jsr $4374			jsr 	_SPSetupRecord
.435f					_SPNext:
.435f	18		clc				clc 								; forward to next
.4360	b2 1e		lda ($1e)			lda 	(codePtr)
.4362	65 1e		adc $1e				adc 	codePtr
.4364	85 1e		sta $1e				sta 	codePtr
.4366	90 e8		bcc $4350			bcc 	_SPLoop
.4368	e6 1f		inc $1f				inc 	codePtr+1
.436a	80 e4		bra $4350			bra 	_SPLoop
.436c					_SPExit:
.436c	7a		ply				ply
.436d	68		pla				pla
.436e	85 1f		sta $1f				sta 	codePtr+1
.4370	68		pla				pla
.4371	85 1e		sta $1e				sta 	codePtr
.4373	60		rts				rts
.4374					_SPSetupRecord:
.4374	c8		iny				iny 								; check identifier follows
.4375	b1 1e		lda ($1e),y			lda 	(codePtr),y
.4377	29 c0		and #$c0			and 	#$C0
.4379	c9 40		cmp #$40			cmp 	#$40
.437b	d0 27		bne $43a4			bne 	_SPSyntax
.437d	20 5b 48	jsr $485b			jsr 	VARGetInfo 					; get the information
.4380	20 72 45	jsr $4572			jsr 	ERRCheckRParen 				; check right bracket follows.
.4383	20 0d 48	jsr $480d			jsr 	VARFind 					; already exists ?
.4386	b0 1f		bcs $43a7			bcs 	_SPUsed 					; error !
.4388	20 b9 47	jsr $47b9			jsr 	VARCreate 					; create, XA points to the data.
.438b	85 20		sta $20				sta 	zTemp0
.438d	86 21		stx $21				stx 	zTemp0+1
.438f	5a		phy				phy 								; save Y pos on stack
.4390	a0 01		ldy #$01			ldy 	#1
.4392	a5 1e		lda $1e				lda 	codePtr 					; save codePtr/Y
.4394	92 20		sta ($20)			sta 	(zTemp0)
.4396	a5 1f		lda $1f				lda 	codePtr+1
.4398	91 20		sta ($20),y			sta 	(zTemp0),y
.439a	c8		iny				iny
.439b	68		pla				pla
.439c	91 20		sta ($20),y			sta 	(zTemp0),y
.439e	c8		iny				iny
.439f	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.43a1	91 20		sta ($20),y			sta 	(zTemp0),y
.43a3	60		rts				rts
.43a4					_SPSyntax:
.43a4	4c d5 43	jmp $43d5		jmp	ErrorV_syntax
.43a7					_SPUsed:
.43a7	4c 2c 45	jmp $452c		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.43aa					Command_WHILE:
.43aa	5a		phy				phy 								; save position of the test
.43ab	20 f0 35	jsr $35f0			jsr 	EXPEvalNumber 				; work out the while test.
.43ae	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero 			; check if zero
.43b1	f0 0e		beq $43c1			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.43b3	98		tya				tya 								; position *after* test.
.43b4	7a		ply				ply 								; restore position before test, at WHILE
.43b5	88		dey				dey 								; so we execute the WHILE command again.
.43b6	48		pha				pha 								; push after test on the stack
.43b7	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.43b9	20 8b 45	jsr $458b			jsr 	StackOpen
.43bc	20 bf 45	jsr $45bf			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.43bf	7a		ply				ply 								; restore the position *after* the test
.43c0	60		rts				rts
.43c1					_WHExitLoop:
.43c1	68		pla				pla 								; throw post loop position
.43c2	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.43c4	aa		tax				tax
.43c5	20 e7 42	jsr $42e7			jsr 	ScanForward
.43c8	60		rts				rts
.43c9					Command_WEND:
.43c9	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.43cb	20 b7 45	jsr $45b7			jsr 	StackCheckFrame
.43ce	20 d1 45	jsr $45d1			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.43d1	20 a9 45	jsr $45a9			jsr 	StackClose		 			; erase the frame
.43d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.43d5					ErrorV_syntax:
.43d5	20 aa 46	jsr $46aa		jsr	ErrorHandler
>43d8	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>43e0	45 72 72 6f 72 00
.43e6					ErrorV_range:
.43e6	20 aa 46	jsr $46aa		jsr	ErrorHandler
>43e9	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>43f1	52 61 6e 67 65 00
.43f7					ErrorV_value:
.43f7	20 aa 46	jsr $46aa		jsr	ErrorHandler
>43fa	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>4402	75 65 00
.4405					ErrorV_type:
.4405	20 aa 46	jsr $46aa		jsr	ErrorHandler
>4408	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>4410	73 6d 61 74 63 68 00
.4417					ErrorV_unimplemented:
.4417	20 aa 46	jsr $46aa		jsr	ErrorHandler
>441a	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>4422	6c 65 6d 65 6e 74 65 64 00
.442b					ErrorV_assert:
.442b	20 aa 46	jsr $46aa		jsr	ErrorHandler
>442e	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>4436	46 61 69 6c 00
.443b					ErrorV_internal:
.443b	20 aa 46	jsr $46aa		jsr	ErrorHandler
>443e	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>4446	6c 20 45 72 72 6f 72 00
.444e					ErrorV_divzero:
.444e	20 aa 46	jsr $46aa		jsr	ErrorHandler
>4451	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>4459	42 79 20 5a 65 72 6f 00
.4461					ErrorV_structure:
.4461	20 aa 46	jsr $46aa		jsr	ErrorHandler
>4464	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>446c	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.4479					ErrorV_stop:
.4479	20 aa 46	jsr $46aa		jsr	ErrorHandler
>447c	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>4484	20 53 74 6f 70 70 65 64 00
.448d					ErrorV_data:
.448d	20 aa 46	jsr $46aa		jsr	ErrorHandler
>4490	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>4498	44 61 74 61 00
.449d					ErrorV_redefine:
.449d	20 aa 46	jsr $46aa		jsr	ErrorHandler
>44a0	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>44a8	65 64 65 66 69 6e 65 64 00
.44b1					ErrorV_index:
.44b1	20 aa 46	jsr $46aa		jsr	ErrorHandler
>44b4	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>44bc	61 79 20 49 6e 64 65 78 00
.44c5					ErrorV_memory:
.44c5	20 aa 46	jsr $46aa		jsr	ErrorHandler
>44c8	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>44d0	4d 65 6d 6f 72 79 00
.44d7					ErrorV_uninitialised:
.44d7	20 aa 46	jsr $46aa		jsr	ErrorHandler
>44da	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>44e2	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.44f2					ErrorV_string:
.44f2	20 aa 46	jsr $46aa		jsr	ErrorHandler
>44f5	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>44fd	69 6e 67 20 4c 65 6e 67 74 68 00
.4508					ErrorV_variable:
.4508	20 aa 46	jsr $46aa		jsr	ErrorHandler
>450b	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>4513	65 20 4d 69 73 73 69 6e 67 00
.451d					ErrorV_stack:
.451d	20 aa 46	jsr $46aa		jsr	ErrorHandler
>4520	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>4528	75 6c 6c 00
.452c					ErrorV_dupproc:
.452c	20 aa 46	jsr $46aa		jsr	ErrorHandler
>452f	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>4537	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>4547	65 64 00
.454a					ErrorV_unknown:
.454a	20 aa 46	jsr $46aa		jsr	ErrorHandler
>454d	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>4555	20 50 72 6f 63 65 64 75 72 65 00
.4560					ErrorV_break:
.4560	20 aa 46	jsr $46aa		jsr	ErrorHandler
>4563	05 42 72 65 61 6b 00			.text	5,"Break",0

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.456a					ERRCheckLParen:
.456a	b1 1e		lda ($1e),y			lda 	(codePtr),y
.456c	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.456e	d0 18		bne $4588			bne 	ERRSyntaxError
.4570	c8		iny				iny
.4571	60		rts				rts
.4572					ERRCheckRParen:
.4572	b1 1e		lda ($1e),y			lda 	(codePtr),y
.4574	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.4576	d0 10		bne $4588			bne 	ERRSyntaxError
.4578	c8		iny				iny
.4579	60		rts				rts
.457a					ERRCheckComma:
.457a	b1 1e		lda ($1e),y			lda 	(codePtr),y
.457c	c9 99		cmp #$99			cmp 	#PR_COMMA
.457e	d0 08		bne $4588			bne 	ERRSyntaxError
.4580	c8		iny				iny
.4581	60		rts				rts
.4582					ERRCheckA:
.4582	d1 1e		cmp ($1e),y			cmp 	(codePtr),y
.4584	d0 02		bne $4588			bne 	ERRSyntaxError
.4586	c8		iny				iny
.4587	60		rts				rts
.4588					ERRSyntaxError:
.4588	4c d5 43	jmp $43d5		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.458b					StackOpen:
.458b	48		pha				pha 								; save frame byte
.458c	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.458e	0a		asl a				asl 	a 							; claim twice this for storage
.458f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.4591	38		sec				sec 								; so basically subtracting from
.4592	65 28		adc $28				adc 	basicStack 	 				; basicStack
.4594	85 28		sta $28				sta 	basicStack
.4596	b0 0a		bcs $45a2			bcs 	_SONoBorrow
>4598	db						.byte 	$DB
.4599	c6 29		dec $29				dec 	basicStack+1
.459b	a5 29		lda $29				lda 	basicStack+1 				; reached the bottom ?
.459d	cd 1b 06	cmp $061b			cmp 	basicStackEnd
.45a0	f0 04		beq $45a6			beq 	_SOMemory
.45a2					_SONoBorrow:
.45a2	68		pla				pla 								; get marker back and write at TOS
.45a3	92 28		sta ($28)			sta 	(basicStack)
.45a5	60		rts				rts
.45a6					_SOMemory:
.45a6	4c 1d 45	jmp $451d		jmp	ErrorV_stack
.45a9					StackClose:
.45a9	b2 28		lda ($28)			lda 	(basicStack) 				; get TOS marker
.45ab	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.45ad	0a		asl a				asl 	a 							; claim twice this.
.45ae	65 28		adc $28				adc 	basicStack 					; add to the stack pointer.
.45b0	85 28		sta $28				sta 	basicStack
.45b2	90 02		bcc $45b6			bcc 	_SCExit
.45b4	e6 29		inc $29				inc 	basicStack+1
.45b6					_SCExit:
.45b6	60		rts				rts
.45b7					StackCheckFrame:
.45b7	d2 28		cmp ($28)			cmp		(basicStack) 				; check  frames match
.45b9	d0 01		bne $45bc			bne 	_SCFError 					; different, we have structures mixed up
.45bb	60		rts				rts
.45bc					_SCFError:
.45bc	4c 61 44	jmp $4461		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.45bf					STKSaveCodePosition:
.45bf	5a		phy				phy
.45c0	98		tya				tya 								; save Y at offset 1.
.45c1	a0 01		ldy #$01			ldy 	#1
.45c3	91 28		sta ($28),y			sta 	(basicStack),y
.45c5	a5 1e		lda $1e				lda 	codePtr 					; save code (low) at 2
.45c7	c8		iny				iny
.45c8	91 28		sta ($28),y			sta 	(basicStack),y
.45ca	a5 1f		lda $1f				lda 	codePtr+1 					; save code (high) at 3
.45cc	c8		iny				iny
.45cd	91 28		sta ($28),y			sta 	(basicStack),y
.45cf	7a		ply				ply
.45d0	60		rts				rts
.45d1					STKLoadCodePosition:
.45d1	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.45d3	b1 28		lda ($28),y			lda 	(basicStack),y
.45d5	85 1f		sta $1f				sta 	codePtr+1
.45d7	88		dey				dey
.45d8	b1 28		lda ($28),y			lda 	(basicStack),y
.45da	85 1e		sta $1e				sta 	codePtr
.45dc	88		dey				dey
.45dd	b1 28		lda ($28),y			lda 	(basicStack),y 				; line offset to Y
.45df	a8		tay				tay
.45e0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.45e1					StackReset:
.45e1	48		pha				pha 								; save top of memory
.45e2	3a		dec a				dec 	a  							; end of stack = previous byte
.45e3	85 29		sta $29				sta 	basicStack+1
.45e5	a9 ff		lda #$ff			lda 	#$FF
.45e7	85 28		sta $28				sta 	basicStack
.45e9	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.45eb	92 28		sta ($28)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.45ed	68		pla				pla 								; allocate pages for stack.
.45ee	38		sec				sec
.45ef	e9 02		sbc #$02			sbc 	#STACKPAGES
.45f1	8d 1b 06	sta $061b			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.45f4	60		rts				rts
.0028					basicStack:
>0028							.fill 	2
.061b					basicStackEnd:
>061b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.45f5					StringConcrete:
.45f5	5a		phy				phy 								; save position on stack
.45f6	b2 0e		lda ($0e)			lda 	(IFR0) 						; get string length
.45f8	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.45fa	b0 41		bcs $463d			bcs 	_SALengthError
.45fc	18		clc				clc 								; length of the new string
.45fd	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.45ff	90 02		bcc $4603			bcc 	_SAHaveLength
.4601	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.4603					_SAHaveLength:
.4603	48		pha				pha 								; save length to be allocated for concreting.
.4604	38		sec				sec
.4605	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.4607	6d 1d 06	adc $061d			adc 	stringMemory
.460a	8d 1d 06	sta $061d			sta 	stringMemory
.460d	85 24		sta $24				sta 	zTemp2 						; update storage address
.460f	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.4611	6d 1e 06	adc $061e			adc 	stringMemory+1
.4614	8d 1e 06	sta $061e			sta 	stringMemory+1
.4617	85 25		sta $25				sta 	zTemp2+1
.4619	68		pla				pla 								; save length allocated in +0
.461a	92 24		sta ($24)			sta 	(zTemp2)
.461c	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.461e	a0 01		ldy #$01			ldy 	#1
.4620	91 24		sta ($24),y			sta 	(zTemp2),y
.4622					_SACopyNewString:
.4622	b2 0e		lda ($0e)			lda 	(IFR0) 						; copy length at +2
.4624	a0 02		ldy #$02			ldy 	#2
.4626	91 24		sta ($24),y			sta 	(zTemp2),y
.4628	aa		tax				tax 								; bytes to copy
.4629	f0 0c		beq $4637			beq 	_SACopyExit
.462b	a0 01		ldy #$01			ldy 	#1 							; first character from here
.462d					_SACopyNSLoop:
.462d	b1 0e		lda ($0e),y			lda 	(IFR0),y 					; get character from here
.462f	c8		iny				iny 								; write two on in string storage
.4630	c8		iny				iny
.4631	91 24		sta ($24),y			sta 	(zTemp2),y
.4633	88		dey				dey
.4634	ca		dex				dex									; until copied all the string lengths.
.4635	d0 f6		bne $462d			bne 	_SACopyNSLoop
.4637					_SACopyExit:
.4637	a6 25		ldx $25				ldx 	zTemp2+1 					; XA contain the concreted string.
.4639	a5 24		lda $24				lda 	zTemp2
.463b	7a		ply				ply
.463c	60		rts				rts
.463d					_SALengthError:
.463d	4c f2 44	jmp $44f2		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.4640					StringSystemInitialise:
.4640	3a		dec a				dec 	a 							; make last byte of previous page.
.4641	8d 1e 06	sta $061e			sta 	stringMemory+1
.4644	85 21		sta $21				sta 	zTemp0+1
.4646	a9 ff		lda #$ff			lda 	#$FF
.4648	8d 1d 06	sta $061d			sta 	stringMemory
.464b	85 20		sta $20				sta 	zTemp0
.464d	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.464f	92 20		sta ($20)			sta 	(zTemp0)
.4651	60		rts				rts
.4652					StringSpaceInitialise:
.4652	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.4654	8d 1c 06	sta $061c			sta 	stringInitialised
.4657	ad 1d 06	lda $061d			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.465a	8d 1f 06	sta $061f			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.465d	ad 1e 06	lda $061e			lda 	stringMemory+1
.4660	3a		dec a				dec 	a
.4661	8d 20 06	sta $0620			sta 	stringTempPointer+1
.4664	20 94 30	jsr $3094			jsr 	ClearCheckMemory
.4667	60		rts				rts
.4668					StringTempAllocate:
.4668	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.466a	b0 2e		bcs $469a			bcs 	_STALength
.466c	2c 1c 06	bit $061c			bit 	stringInitialised 			; already initialised
.466f	30 05		bmi $4676			bmi 	_STAAllocate
.4671	48		pha				pha 								; save value to subtract.
.4672	20 52 46	jsr $4652			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.4675	68		pla				pla 								; restore it
.4676					_STAAllocate:
.4676	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.4678	18		clc				clc  								; deliberate allows one more
.4679	6d 1f 06	adc $061f			adc 	stringTempPointer 			; subtract from temp pointer
.467c	8d 1f 06	sta $061f			sta 	stringTempPointer
.467f	85 0e		sta $0e				sta 	IFR0+IM0 					; address in mantissa too
.4681	85 2a		sta $2a				sta 	zsTemp 						; and zsTemp
.4683	ad 20 06	lda $0620			lda 	stringTempPointer+1
.4686	69 ff		adc #$ff			adc 	#$FF
.4688	8d 20 06	sta $0620			sta 	stringTempPointer+1
.468b	85 2b		sta $2b				sta 	zsTemp+1
.468d	85 0f		sta $0f				sta 	IFR0+IM1
.468f	64 10		stz $10				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.4691	a9 80		lda #$80			lda 	#$80
.4693	85 11		sta $11				sta 	IFR0+IExp
.4695	a9 00		lda #$00			lda 	#0 							; clear the target string
.4697	92 2a		sta ($2a)			sta 	(zsTemp)
.4699	60		rts				rts
.469a					_STALength:
.469a	4c f2 44	jmp $44f2		jmp	ErrorV_string
.469d					StringTempWrite:
.469d	5a		phy				phy
.469e	48		pha				pha
.469f	b2 2a		lda ($2a)			lda 	(zsTemp)
.46a1	1a		inc a				inc 	a
.46a2	92 2a		sta ($2a)			sta 	(zsTemp)
.46a4	a8		tay				tay
.46a5	68		pla				pla
.46a6	91 2a		sta ($2a),y			sta 	(zsTemp),y
.46a8	7a		ply				ply
.46a9	60		rts				rts
.002a					zsTemp:
>002a							.fill 	2
.061c					stringInitialised:
>061c							.fill 	1
.061d					stringMemory:
>061d							.fill 	2
.061f					stringTempPointer:
>061f							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.46aa					ErrorHandler:
.46aa	fa		plx				plx 								; get address of msg
.46ab	7a		ply				ply
.46ac	e8		inx				inx 								; bump past RTS
.46ad	d0 01		bne $46b0			bne 	_EHNoInc
.46af	c8		iny				iny
.46b0					_EHNoInc:
.46b0	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.46b3	ad 21 06	lda $0621			lda 	ERRLine 					; direct command ?
.46b6	0d 22 06	ora $0622			ora 	ERRLine+1
.46b9	f0 10		beq $46cb			beq 	_EHNoNumber
.46bb	a2 ce		ldx #$ce			ldx 	#_EHAtMsg & $FF
.46bd	a0 46		ldy #$46			ldy 	#_EHAtMsg >> 8
.46bf	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.46c2	ad 21 06	lda $0621			lda 	ERRLine 					; line number -> XA
.46c5	ae 22 06	ldx $0622			ldx 	ERRLine+1
.46c8	20 d3 46	jsr $46d3			jsr 	WriteIntXA
.46cb					_EHNoNumber:
.46cb	4c fc 46	jmp $46fc			jmp 	WarmStartNewLine
.46ce					_EHAtMsg:
>46ce	20 61 74 20 00					.text 	" at ",0
.46d3					WriteIntXA:
.46d3	da		phx				phx
.46d4	48		pha				pha
.46d5	a2 0e		ldx #$0e			ldx 	#IFR0
.46d7	20 69 4e	jsr $4e69			jsr 	IFloatPushRx
.46da	68		pla				pla
.46db	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.46de	68		pla				pla
.46df	85 0f		sta $0f				sta 	IFR0+IM1
.46e1	a9 0a		lda #$0a			lda 	#10 						; decimal
.46e3	20 bb 4c	jsr $4cbb			jsr 	IFloatIntegerToStringR0	 	; convert
.46e6	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.46e9	a2 0e		ldx #$0e			ldx 	#IFR0
.46eb	20 8a 4e	jsr $4e8a			jsr 	IFloatPullRx
.46ee	60		rts				rts
.46ef					NotImplemented:
.46ef	4c 17 44	jmp $4417		jmp	ErrorV_unimplemented
.0621					ERRLine:
>0621							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.46f2					WarmStart:
.46f2	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.46f4	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.46f7	a9 6b		lda #$6b			lda 	#"k"
.46f9	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.46fc					WarmStartNewLine:
.46fc	a9 0d		lda #$0d			lda 	#13
.46fe	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.4701					WarmStartNoPrompt:
.4701	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.4703	9a		txs				txs
.4704	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.4707	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.4709	f0 f1		beq $46fc			beq 	WarmStartNewLine
.470b	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.470d	d0 f2		bne $4701			bne 	WarmStartNoPrompt
.470f	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.4712	e8		inx				inx 								; skip length byte to make it ASCIIZ
.4713	d0 01		bne $4716			bne 	_WSSkip
.4715	c8		iny				iny
.4716					_WSSkip:
.4716	86 24		stx $24				stx 	zTemp2 						; save address
.4718	84 25		sty $25				sty 	zTemp2+1
.471a	a2 44		ldx #$44			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.471c	a0 47		ldy #$47			ldy 	#TOKGetCharacter >> 8
.471e	38		sec				sec
.471f	20 8f 3e	jsr $3e8f			jsr 	TOKTokenise
.4722	ad 02 04	lda $0402			lda 	TOKLineNumber 				; if line number zero
.4725	0d 03 04	ora $0403			ora 	TOKLineNumber+1
.4728	d0 0b		bne $4735			bne 	_WSLineEdit
.472a	a9 01		lda #$01			lda 	#TOKLineSize & $FF 			; execute code.
.472c	85 1e		sta $1e				sta 	codePtr
.472e	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.4730	85 1f		sta $1f				sta 	codePtr+1
.4732	4c c1 33	jmp $33c1			jmp 	RUNNewLine
.4735					_WSLineEdit:
.4735	20 6a 3d	jsr $3d6a			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.4738	ad 01 04	lda $0401			lda 	TOKLineSize 				; check line is empty.
.473b	c9 04		cmp #$04			cmp 	#4
.473d	f0 03		beq $4742			beq 	_WSNoInsert
.473f	20 b4 3d	jsr $3db4			jsr 	PGMInsertLine				; if not, maybe insert
.4742					_WSNoInsert:
.4742	80 bd		bra $4701			bra 	WarmStartNoPrompt
.4744					TOKGetCharacter:
.4744	b2 24		lda ($24)			lda 	(zTemp2)
.4746	90 06		bcc $474e			bcc 	_GSNoIncrement
.4748	e6 24		inc $24				inc 	zTemp2
.474a	d0 02		bne $474e			bne 	_GSNoIncrement
.474c	e6 25		inc $25				inc 	zTemp2+1
.474e					_GSNoIncrement:
.474e	c9 00		cmp #$00			cmp 	#0
.4750	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.4751					VARArrayLookup:
.4751	85 20		sta $20				sta 	zTemp0 						; save the array address pointer in zTemp0
.4753	86 21		stx $21				stx 	zTemp0+1
.4755	b2 20		lda ($20)			lda 	(zTemp0)
.4757	48		pha				pha
.4758	5a		phy				phy
.4759	a0 01		ldy #$01			ldy 	#1
.475b	b1 20		lda ($20),y			lda 	(zTemp0),y
.475d	7a		ply				ply
.475e	48		pha				pha
.475f	20 02 36	jsr $3602			jsr 	EXPEvalInteger16 			; R0 now contains the index
.4762	68		pla				pla 								; array address to zTemp0
.4763	85 21		sta $21				sta 	zTemp0+1
.4765	68		pla				pla
.4766	85 20		sta $20				sta 	zTemp0
.4768	5a		phy				phy 								; save codePtr position.
.4769	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.476b	b1 20		lda ($20),y			lda 	(zTemp0),y
.476d	48		pha				pha 								; save bit 15 on stack.
.476e	29 7f		and #$7f			and 	#$7F
.4770	85 22		sta $22				sta 	zTemp1
.4772	a5 0e		lda $0e				lda 	IFR0+IM0 					; check range of index
.4774	d2 20		cmp ($20)			cmp 	(zTemp0)
.4776	a5 0f		lda $0f				lda 	IFR0+IM1
.4778	e5 22		sbc $22				sbc 	zTemp1
.477a	b0 3a		bcs $47b6			bcs 	_VALIndex
.477c	a5 0f		lda $0f				lda 	IFR0+IM1  					; sanity check
.477e	c9 40		cmp #$40			cmp 	#$40
.4780	b0 34		bcs $47b6			bcs 	_VALIndex
.4782	06 0e		asl $0e				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.4784	26 0f		rol $0f				rol 	IFR0+IM1
.4786	fa		plx				plx 								; get msb of size -> X
.4787	30 04		bmi $478d			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.4789	06 0e		asl $0e				asl 	IFR0+IM0
.478b	26 0f		rol $0f				rol 	IFR0+IM1
.478d					_VARNotX4:
.478d	18		clc				clc 								; add the two for the size bytes
.478e	a5 0e		lda $0e				lda 	IFR0+IM0
.4790	69 02		adc #$02			adc 	#2
.4792	85 0e		sta $0e				sta 	IFR0+IM0
.4794	90 02		bcc $4798			bcc 	_VARNoCarry1
.4796	e6 0f		inc $0f				inc 	IFR0+IM1
.4798					_VARNoCarry1:
.4798	18		clc				clc 								; calculate the element address and push to stack.
.4799	a5 0e		lda $0e				lda 	IFR0+IM0
.479b	65 20		adc $20				adc 	zTemp0
.479d	48		pha				pha
.479e	a5 0f		lda $0f				lda 	IFR0+IM1
.47a0	65 21		adc $21				adc 	zTemp0+1
.47a2	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.47a4	30 04		bmi $47aa			bmi 	_VARHasSubLevel
.47a6	aa		tax				tax 								; address in XA
.47a7	68		pla				pla
.47a8	7a		ply				ply 								; restore Y and exit
.47a9	60		rts				rts
.47aa					_VARHasSubLevel:
.47aa	aa		tax				tax 								; get link address in XA
.47ab	68		pla				pla
.47ac	7a		ply				ply 								; restore code position.
.47ad	48		pha				pha
.47ae	20 7a 45	jsr $457a			jsr 	ERRCheckComma 				; comma required.
.47b1	68		pla				pla
.47b2	20 51 47	jsr $4751			jsr 	VARArrayLookup 				; call it recursively
.47b5	60		rts				rts
.47b6					_VALIndex:
.47b6	4c b1 44	jmp $44b1		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.47b9					VARCreate:
.47b9	5a		phy				phy
.47ba	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.47bc	a2 00		ldx #$00			ldx 	#0
.47be	20 6b 30	jsr $306b			jsr 	AllocateMemory
.47c1	85 22		sta $22				sta 	zTemp1 						; save new address in zTemp1
.47c3	86 23		stx $23				stx 	zTemp1+1
.47c5	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.47c7	ad 25 06	lda $0625			lda 	VARHash
.47ca	91 22		sta ($22),y			sta 	(zTemp1),y
.47cc	c8		iny				iny 								; put address of name into +3,+4
.47cd	ad 23 06	lda $0623			lda 	VARNameAddress
.47d0	91 22		sta ($22),y			sta 	(zTemp1),y
.47d2	c8		iny				iny
.47d3	ad 24 06	lda $0624			lda 	VARNameAddress+1
.47d6	91 22		sta ($22),y			sta 	(zTemp1),y
.47d8	ad 26 06	lda $0626			lda 	VARType
.47db	29 01		and #$01			and 	#1
.47dd	f0 06		beq $47e5			beq 	_CVNotString
.47df	a0 08		ldy #$08			ldy 	#5+3
.47e1	a9 80		lda #$80			lda 	#$80
.47e3	91 22		sta ($22),y			sta 	(zTemp1),y
.47e5					_CVNotString:
.47e5	ad 47 06	lda $0647			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.47e8	85 20		sta $20				sta 	zTemp0
.47ea	ad 48 06	lda $0648			lda 	VARHashEntry+1
.47ed	85 21		sta $21				sta 	zTemp0+1
.47ef	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.47f1	b2 20		lda ($20)			lda 	(zTemp0)
.47f3	92 22		sta ($22)			sta 	(zTemp1)
.47f5	b1 20		lda ($20),y			lda 	(zTemp0),y
.47f7	91 22		sta ($22),y			sta 	(zTemp1),y
.47f9	a5 22		lda $22				lda 	zTemp1 						; address of the new record into head
.47fb	92 20		sta ($20)			sta 	(zTemp0)
.47fd	a5 23		lda $23				lda 	zTemp1+1
.47ff	91 20		sta ($20),y			sta 	(zTemp0),y
.4801	a5 22		lda $22				lda 	zTemp1 						; new record to XA
.4803	a6 23		ldx $23				ldx 	zTemp1+1
.4805	18		clc				clc 								; add 5 to point to the data.
.4806	69 05		adc #$05			adc 	#5
.4808	90 01		bcc $480b			bcc 	_VCNoCarry
.480a	e8		inx				inx
.480b					_VCNoCarry:
.480b	7a		ply				ply
.480c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.480d					VARFind:
.480d	5a		phy				phy
.480e	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.4810	b1 20		lda ($20),y			lda 	(zTemp0),y
.4812	85 23		sta $23				sta 	zTemp1+1
.4814	f0 1c		beq $4832			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.4816	b2 20		lda ($20)			lda 	(zTemp0)
.4818	85 22		sta $22				sta 	zTemp1
.481a					_VFLoop:
.481a	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.481c	b1 22		lda ($22),y			lda 	(zTemp1),y
.481e	cd 25 06	cmp $0625			cmp 	VARHash
.4821	f0 12		beq $4835			beq 	_VFHashesMatch 				; if so, check the name.
.4823					_VFNext:
.4823	b2 22		lda ($22)			lda 	(zTemp1) 					; next link to AX
.4825	aa		tax				tax
.4826	a0 01		ldy #$01			ldy 	#1
.4828	b1 22		lda ($22),y			lda 	(zTemp1),y
.482a	85 23		sta $23				sta 	zTemp1+1
.482c	86 22		stx $22				stx 	zTemp1
.482e	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.4830	d0 e8		bne $481a			bne 	_VFLoop
.4832					_VFExitFail:
.4832	7a		ply				ply
.4833	18		clc				clc
.4834	60		rts				rts
.4835					_VFHashesMatch:
.4835	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.4837	b1 22		lda ($22),y			lda 	(zTemp1),y
.4839	85 24		sta $24				sta 	zTemp2
.483b	c8		iny				iny
.483c	b1 22		lda ($22),y			lda 	(zTemp1),y
.483e	85 25		sta $25				sta 	zTemp2+1
.4840	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.4842					_VFNameCompLoop:
.4842	c8		iny				iny 								; char at a time
.4843	b9 27 06	lda $0627,y			lda 	VARBuffer,y
.4846	d1 24		cmp ($24),y			cmp 	(zTemp2),y
.4848	d0 d9		bne $4823			bne 	_VFNext						; next entry if different.
.484a	c9 7c		cmp #$7c			cmp 	#$7C
.484c	90 f4		bcc $4842			bcc 	_VFNameCompLoop 			; until done the whole lot.
.484e	18		clc				clc
.484f	a5 22		lda $22				lda 	zTemp1
.4851	a6 23		ldx $23				ldx 	zTemp1+1
.4853	69 05		adc #$05			adc 	#5
.4855	90 01		bcc $4858			bcc 	_VFNNoCarry
.4857	e8		inx				inx
.4858					_VFNNoCarry:
.4858	7a		ply				ply
.4859	38		sec				sec
.485a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.485b					VARGetInfo:
.485b	98		tya				tya 								; calculate the address of the identifier start.
.485c	18		clc				clc
.485d	65 1e		adc $1e				adc 	codePtr
.485f	8d 23 06	sta $0623			sta 	VARNameAddress
.4862	a5 1f		lda $1f				lda 	codePtr+1
.4864	69 00		adc #$00			adc 	#0
.4866	8d 24 06	sta $0624			sta 	VARNameAddress+1
.4869	9c 25 06	stz $0625			stz 	VARHash
.486c	a2 00		ldx #$00			ldx 	#0
.486e					_VARCopyName:
.486e	18		clc				clc 								; update the sum hash.
.486f	ad 25 06	lda $0625			lda 	VARHash
.4872	71 1e		adc ($1e),y			adc 	(codePtr),y
.4874	8d 25 06	sta $0625			sta 	VARHash
.4877	b1 1e		lda ($1e),y			lda 	(codePtr),y 				; get character and save it in buffer
.4879	c8		iny				iny
.487a	9d 27 06	sta $0627,x			sta 	VARBuffer,x
.487d	e8		inx				inx
.487e	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.4880	90 ec		bcc $486e			bcc 	_VARCopyName
.4882	8d 26 06	sta $0626			sta 	VARType 					; save type byte
.4885	29 03		and #$03			and 	#3 							; type is 0-3
.4887	0a		asl a				asl 	a
.4888	0a		asl a				asl 	a
.4889	85 20		sta $20				sta 	zTemp0
.488b	ad 25 06	lda $0625			lda 	VARHash 					; force into range of hash entries per type.
.488e	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.4890	65 20		adc $20				adc 	zTemp0 						; index of hash table
.4892	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.4893	69 49		adc #$49			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.4895	85 20		sta $20				sta 	zTemp0
.4897	8d 47 06	sta $0647			sta 	VARHashEntry
.489a	a9 06		lda #$06			lda 	#VARHashTables >> 8
.489c	69 00		adc #$00			adc 	#0
.489e	85 21		sta $21				sta 	zTemp0+1
.48a0	8d 48 06	sta $0648			sta 	VARHashEntry+1
.48a3	60		rts				rts
.48a4					VARClearHashTables:
.48a4	a2 00		ldx #$00			ldx 	#0
.48a6					_VCHRLoop:
.48a6	a9 00		lda #$00			lda 	#0
.48a8	9d 49 06	sta $0649,x			sta 	VARHashTables,x
.48ab	e8		inx				inx
.48ac	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.48ae	d0 f6		bne $48a6			bne 	_VCHRLoop
.48b0	60		rts				rts
.0623					VARNameAddress:
>0623							.fill 	2
.0625					VARHash:
>0625							.fill 	1
.0626					VARType:
>0626							.fill 	1
.0627					VARBuffer:
>0627							.fill 	32
.0647					VARHashEntry:
>0647							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0649					VARHashTables:
>0649							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.48b1					VARCheckSimple:
.48b1	aa		tax				tax 								; save in X
.48b2	b1 1e		lda ($1e),y			lda 	(codePtr),y
.48b4	c9 7c		cmp #$7c			cmp 	#$7C
.48b6	d0 15		bne $48cd			bne 	_VCSComplex
.48b8	c8		iny				iny 								; consume the second byte, the type.
.48b9	8a		txa				txa  								; character (40-7F) x 4
.48ba	0a		asl a				asl 	a
.48bb	0a		asl a				asl  	a
.48bc	18		clc				clc
.48bd	69 69		adc #$69			adc 	#FastVariables & $FF
.48bf	85 0e		sta $0e				sta 	IFR0+IM0
.48c1	a9 06		lda #$06			lda 	#FastVariables >> 8
.48c3	69 00		adc #$00			adc 	#0
.48c5	85 0f		sta $0f				sta 	IFR0+IM1
.48c7	64 10		stz $10				stz 	IFR0+IM2
.48c9	64 11		stz $11				stz 	IFR0+IExp
.48cb	38		sec				sec 								; it's a reference
.48cc	60		rts				rts
.48cd					_VCSComplex:
.48cd	88		dey				dey	 								; extract information.
.48ce	20 5b 48	jsr $485b			jsr 	VARGetInfo
.48d1	20 0d 48	jsr $480d			jsr 	VARFind 					; search for variable
.48d4	b0 0a		bcs $48e0			bcs 	_VCSHaveVariable
.48d6	ad 26 06	lda $0626			lda 	VARType 					; error if arrays, cannot autocreate
.48d9	29 02		and #$02			and 	#2
.48db	d0 25		bne $4902			bne 	_VCNoCreate
.48dd	20 b9 47	jsr $47b9			jsr 	VARCreate 					; create variable
.48e0					_VCSHaveVariable:
.48e0	48		pha				pha 								; save LSB on the stack
.48e1	ad 26 06	lda $0626			lda 	VARType 					; get var type, and shift bit 1 into carry
.48e4	6a		ror a				ror 	a
.48e5	6a		ror a				ror 	a
.48e6	68		pla				pla 								; restore LSB
.48e7	90 08		bcc $48f1			bcc 	_VCSNotArray 				; skip if not an array
.48e9	20 51 47	jsr $4751			jsr 	VARArrayLookup 				; look for subscripts.
.48ec	48		pha				pha 								; check )
.48ed	20 72 45	jsr $4572			jsr 	ERRCheckRParen
.48f0	68		pla				pla
.48f1					_VCSNotArray:
.48f1	86 0f		stx $0f				stx 	IFR0+IM1 					; save address
.48f3	85 0e		sta $0e				sta 	IFR0+IM0
.48f5	64 10		stz $10				stz 	IFR0+IM2 					; clear the unused byte.
.48f7	ad 26 06	lda $0626			lda 	VARType 					; number/string bit into carry
.48fa	6a		ror a				ror 	a
.48fb	a9 00		lda #$00			lda 	#0
.48fd	6a		ror a				ror 	a 							; now $00 or $80
.48fe	85 11		sta $11				sta 	IFR0+IExp
.4900	38		sec				sec 								; it's a reference
.4901	60		rts				rts
.4902					_VCNoCreate:
.4902	4c d7 44	jmp $44d7		jmp	ErrorV_uninitialised
.0669					FastVariables:
>0669							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.4905					IFInitialise:
.4905	9c d9 06	stz $06d9			stz 	IFStackIndex
.4908	60		rts				rts
.4909					IFloatSubtract:
.4909	da		phx				phx
.490a	a2 0e		ldx #$0e			ldx 	#IFR0
.490c	20 25 4f	jsr $4f25			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.490f	fa		plx				plx
.4910					IFloatAdd:
.4910	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.4912	05 11		ora $11				ora 	IFR0+IExp
.4914	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.4916	d0 4e		bne $4966			bne 	_IFloatAddDecimals 			; decimal version.
.4918					_IFAddSubMantissa:
.4918	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.491a	45 11		eor $11				eor 	IFR0+IExp
.491c	29 40		and #$40			and 	#IFSign
.491e	d0 21		bne $4941			bne 	_IFloatSubMantissa
.4920	18		clc				clc 								; do the actual addition
.4921	a5 0e		lda $0e			lda 	IFR0+IM0
.4923	75 00		adc $00,x		adc 		IM0,x
.4925	85 0e		sta $0e			sta 	IFR0+IM0
.4927	a5 0f		lda $0f			lda 	IFR0+IM1
.4929	75 01		adc $01,x		adc 		IM1,x
.492b	85 0f		sta $0f			sta 	IFR0+IM1
.492d	a5 10		lda $10			lda 	IFR0+IM2
.492f	75 02		adc $02,x		adc 		IM2,x
.4931	85 10		sta $10			sta 	IFR0+IM2
.4933	10 29		bpl $495e			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.4935	a2 0e		ldx #$0e			ldx 	#IFR0						; shift R0 right, divide by 2
.4937	20 49 4f	jsr $4f49			jsr 	IFloatShiftRight
.493a	20 73 4f	jsr $4f73			jsr 	IFloatIncExponent
.493d	d0 1f		bne $495e			bne 	_IFloatAddExit
.493f	38		sec				sec 								; overflowed numerically.
.4940	60		rts				rts
.4941					_IFloatSubMantissa:
.4941	38		sec				sec 								; do the subtraction R0-Rx
.4942	a5 0e		lda $0e			lda 	IFR0+IM0
.4944	f5 00		sbc $00,x		sbc 		IM0,x
.4946	85 0e		sta $0e			sta 	IFR0+IM0
.4948	a5 0f		lda $0f			lda 	IFR0+IM1
.494a	f5 01		sbc $01,x		sbc 		IM1,x
.494c	85 0f		sta $0f			sta 	IFR0+IM1
.494e	a5 10		lda $10			lda 	IFR0+IM2
.4950	f5 02		sbc $02,x		sbc 		IM2,x
.4952	85 10		sta $10			sta 	IFR0+IM2
.4954	b0 08		bcs $495e			bcs 	_IFloatAddExit 				; no borrow so we are done.
.4956	a2 0e		ldx #$0e			ldx 	#IFR0
.4958	20 2d 4f	jsr $4f2d			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.495b	20 25 4f	jsr $4f25			jsr 	IFloatNegate 				; negate
.495e					_IFloatAddExit:
.495e	18		clc				clc
.495f	60		rts				rts
.4960					_IFloatZeroAdd:
.4960	fa		plx				plx 								; return this value in R0
.4961	20 ab 4e	jsr $4eab			jsr 	IFloatCopyFromRegister
.4964	18		clc				clc
.4965	60		rts				rts
.4966					_IFloatAddDecimals:
.4966	20 13 4f	jsr $4f13			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.4969	f0 f3		beq $495e			beq 	_IFloatAddExit
.496b	20 51 4f	jsr $4f51			jsr 	IFloatNormalise 			; normalise RX
.496e	da		phx				phx 								; normalise R0
.496f	a2 0e		ldx #$0e			ldx 	#IFR0
.4971	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero
.4974	f0 ea		beq $4960			beq 	_IFloatZeroAdd
.4976	20 51 4f	jsr $4f51			jsr 	IFloatNormalise
.4979	fa		plx				plx
.497a	a5 11		lda $11				lda 	IFR0+IExp 					; get the exponent of R0
.497c	29 3f		and #$3f			and 	#IFXMask
.497e	38		sec				sec
.497f	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.4981	85 0c		sta $0c				sta 	iTemp0
.4983	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.4985	29 3f		and #$3f			and 	#IFXMask
.4987	38		sec				sec
.4988	e9 20		sbc #$20			sbc 	#$20
.498a	c5 0c		cmp $0c				cmp 	iTemp0 						; get the larger adjusted
.498c	b0 02		bcs $4990			bcs 	_IFloatHaveLarger
.498e	a5 0c		lda $0c				lda 	iTemp0
.4990					_IFloatHaveLarger:
.4990	18		clc				clc 								; get the actual one back.
.4991	69 20		adc #$20			adc 	#$20 						; shift both to that.
.4993	20 a0 49	jsr $49a0			jsr 	_IFShiftXToA
.4996	da		phx				phx
.4997	a2 0e		ldx #$0e			ldx 	#IFR0
.4999	20 a0 49	jsr $49a0			jsr 	_IFShiftXToA
.499c	fa		plx				plx
.499d	4c 18 49	jmp $4918			jmp 	_IFAddSubMantissa 			; do the adding bit.
.49a0					_IFShiftXToA:
.49a0	8d d1 06	sta $06d1			sta 	IFTarget
.49a3	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero 			; check adding zero ?
.49a6	f0 11		beq $49b9			beq 	_IFSXExit
.49a8					_IFSXLoop:
.49a8	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.49aa	29 3f		and #$3f			and 	#IFXMask
.49ac	cd d1 06	cmp $06d1			cmp 	IFTarget
.49af	f0 08		beq $49b9			beq 	_IFSXExit
.49b1	20 49 4f	jsr $4f49			jsr 	IFloatShiftRight
.49b4	20 73 4f	jsr $4f73			jsr 	IFloatIncExponent
.49b7	80 ef		bra $49a8			bra 	_IFSXLoop
.49b9					_IFSXExit:
.49b9	60		rts				rts
.06d1					IFTarget:
>06d1							.fill 	1
.49ba					IFloatMultiply:
.49ba	8e d1 06	stx $06d1			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.49bd	20 75 4a	jsr $4a75			jsr 	IFCalculateNewSign
.49c0	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.49c2	05 11		ora $11				ora 	IFR0+IExp
.49c4	29 3f		and #$3f			and 	#IFXMask
.49c6	15 01		ora $01,x			ora 	IM1,x
.49c8	05 0f		ora $0f				ora 	IFR0+IM1
.49ca	15 02		ora $02,x			ora 	IM2,x
.49cc	05 10		ora $10				ora 	IFR0+IM2
.49ce	d0 0a		bne $49da			bne 	_IFMStandard
.49d0	20 f6 4e	jsr $4ef6			jsr 	IFloatMultiply8BitRx
.49d3	ad d3 06	lda $06d3			lda 	IFNewSign
.49d6	85 11		sta $11				sta 	IFR0+IExp
.49d8	18		clc				clc
.49d9	60		rts				rts
.49da					_IFMStandard:
.49da	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.49dc	20 6c 4a	jsr $4a6c			jsr 	IFMSignExtend
.49df	8d d2 06	sta $06d2			sta 	IFNewExponent
.49e2	a5 11		lda $11				lda 	IFR0+IExp
.49e4	20 6c 4a	jsr $4a6c			jsr 	IFMSignExtend
.49e7	18		clc				clc
.49e8	6d d2 06	adc $06d2			adc 	IFNewExponent
.49eb	8d d2 06	sta $06d2			sta 	IFNewExponent
.49ee	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.49f0	20 bc 4e	jsr $4ebc			jsr 	IFloatCopyToRegister
.49f3	a2 0e		ldx #$0e			ldx 	#IFR0 						; zero R0 (the result)
.49f5	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.49f8					_IFMLoop:
.49f8	a2 1a		ldx #$1a			ldx 	#IFRTemp
.49fa	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero
.49fd	f0 3a		beq $4a39			beq 	_IFMExit
.49ff	ae d1 06	ldx $06d1			ldx 	IFTarget 					; look at adder MSB
.4a02	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.4a04	10 03		bpl $4a09			bpl	 	_IFMTargetOkay
.4a06	20 5d 4a	jsr $4a5d			jsr 	_IFMShiftAll
.4a09					_IFMTargetOkay:
.4a09	a5 1a		lda $1a				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.4a0b	29 01		and #$01			and 	#1
.4a0d	f0 16		beq $4a25			beq 	_IFMNoAdd
.4a0f	ae d1 06	ldx $06d1			ldx 	IFTarget 					; add adder
.4a12	18		clc				clc
.4a13	a5 0e		lda $0e			lda 	IFR0+IM0
.4a15	75 00		adc $00,x		adc 		IM0,x
.4a17	85 0e		sta $0e			sta 	IFR0+IM0
.4a19	a5 0f		lda $0f			lda 	IFR0+IM1
.4a1b	75 01		adc $01,x		adc 		IM1,x
.4a1d	85 0f		sta $0f			sta 	IFR0+IM1
.4a1f	a5 10		lda $10			lda 	IFR0+IM2
.4a21	75 02		adc $02,x		adc 		IM2,x
.4a23	85 10		sta $10			sta 	IFR0+IM2
.4a25					_IFMNoAdd:
.4a25	a5 10		lda $10				lda 	IFR0+IM2
.4a27	10 03		bpl $4a2c			bpl 	_IFMResultOkay
.4a29	20 5d 4a	jsr $4a5d			jsr 	_IFMShiftAll
.4a2c					_IFMResultOkay:
.4a2c	a2 1a		ldx #$1a			ldx 	#IFRTemp
.4a2e	20 49 4f	jsr $4f49			jsr 	IFloatShiftRight
.4a31	ae d1 06	ldx $06d1			ldx 	IFTarget
.4a34	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.4a37	80 bf		bra $49f8			bra 	_IFMLoop
.4a39					_IFMExit:
.4a39	ad d2 06	lda $06d2			lda 	IFNewExponent 				; validate new exponent.
.4a3c	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.4a3e	90 0f		bcc $4a4f			bcc 	_IFMOkay
.4a40	c9 e0		cmp #$e0			cmp 	#$E0
.4a42	b0 0b		bcs $4a4f			bcs 	_IFMOkay
.4a44	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.4a46	f0 13		beq $4a5b			beq 	_IFMError
.4a48	a2 0e		ldx #$0e			ldx 	#IFR0 						; return zero underflow
.4a4a	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.4a4d	18		clc				clc
.4a4e	60		rts				rts
.4a4f					_IFMOkay:
.4a4f	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.4a51	0d d3 06	ora $06d3			ora 	IFNewSign
.4a54	85 11		sta $11				sta 	IFR0+IExp
.4a56	18		clc				clc
.4a57	60		rts				rts
.4a58	4c ff ff	jmp $ffff			jmp 	$FFFF
.4a5b					_IFMError:
.4a5b	38		sec				sec
.4a5c	60		rts				rts
.4a5d					_IFMShiftAll:
.4a5d	a2 0e		ldx #$0e			ldx 	#IFR0
.4a5f	20 49 4f	jsr $4f49			jsr 	IFloatShiftRight
.4a62	ae d1 06	ldx $06d1			ldx 	IFTarget
.4a65	20 49 4f	jsr $4f49			jsr 	IFloatShiftRight
.4a68	ee d2 06	inc $06d2			inc 	IFNewExponent
.4a6b	60		rts				rts
.4a6c					IFMSignExtend:
.4a6c	29 3f		and #$3f			and 	#IFXMask
.4a6e	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.4a70	90 02		bcc $4a74			bcc 	_IFMNoSXX
.4a72	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.4a74					_IFMNoSXX:
.4a74	60		rts				rts
.4a75					IFCalculateNewSign:
.4a75	b5 03		lda $03,x			lda 	IExp,x
.4a77	45 11		eor $11				eor 	IFR0+IExp
.4a79	29 40		and #$40			and 	#IFSign
.4a7b	8d d3 06	sta $06d3			sta 	IFNewSign
.4a7e	60		rts				rts
.06d2					IFNewExponent:
>06d2							.fill 	1
.06d3					IFNewSign:
>06d3							.fill 	1
.4a7f					IFloatDivideInteger:
.4a7f	20 98 4a	jsr $4a98			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.4a82	b0 06		bcs $4a8a			bcs 	_IFDIExit
.4a84	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy result from register.
.4a86	20 ab 4e	jsr $4eab			jsr 	IFloatCopyFromRegister
.4a89	18		clc				clc
.4a8a					_IFDIExit:
.4a8a	60		rts				rts
.4a8b					IFloatModulusInteger:
.4a8b	20 98 4a	jsr $4a98			jsr 	IFloatDivideIntegerCommon
.4a8e	b0 07		bcs $4a97			bcs 	_IFMIExit
.4a90	ae d1 06	ldx $06d1			ldx 	IFTarget
.4a93	20 ab 4e	jsr $4eab			jsr 	IFloatCopyFromRegister
.4a96	18		clc				clc
.4a97					_IFMIExit:
.4a97	60		rts				rts
.4a98					IFloatDivideIntegerCommon:
.4a98	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.4a9b	20 75 4a	jsr $4a75			jsr 	IFCalculateNewSign 			; calculate sign of result
.4a9e	20 c6 4a	jsr $4ac6			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.4aa1	a2 0e		ldx #$0e			ldx 	#IFR0 						; check divide by zero
.4aa3	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero
.4aa6	f0 1c		beq $4ac4			beq 	_IFDIDivZero
.4aa8	ae d1 06	ldx $06d1			ldx 	IFTarget 					; zero Rx (S1)
.4aab	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.4aae	5a		phy				phy
.4aaf	a0 18		ldy #$18			ldy 	#24
.4ab1					_IFDILoop:
.4ab1	20 d7 4a	jsr $4ad7			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.4ab4	20 e3 4a	jsr $4ae3			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.4ab7	88		dey				dey
.4ab8	d0 f7		bne $4ab1			bne 	_IFDILoop 					; do it 24 times
.4aba	7a		ply				ply
.4abb	ad d3 06	lda $06d3			lda 	IFNewSign 					; set sign of result.
.4abe	29 40		and #$40			and 	#IFSign
.4ac0	85 1d		sta $1d				sta 	IFRTemp+IExp
.4ac2	18		clc				clc 								; is okay.
.4ac3	60		rts				rts
.4ac4					_IFDIDivZero:
.4ac4	38		sec				sec
.4ac5	60		rts				rts
.4ac6					IFDCopyRXToRTemp:
.4ac6	b5 00		lda $00,x			lda 	IM0,x
.4ac8	85 1a		sta $1a				sta 	IFRTemp+IM0
.4aca	b5 01		lda $01,x			lda 	IM1,x
.4acc	85 1b		sta $1b				sta 	IFRTemp+IM1
.4ace	b5 02		lda $02,x			lda 	IM2,x
.4ad0	85 1c		sta $1c				sta 	IFRTemp+IM2
.4ad2	b5 03		lda $03,x			lda 	IExp,x
.4ad4	85 1d		sta $1d				sta 	IFRTemp+IExp
.4ad6	60		rts				rts
.4ad7					IFDShiftSTempS1Left:
.4ad7	a2 1a		ldx #$1a			ldx 	#IFRTemp
.4ad9	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft
.4adc	ae d1 06	ldx $06d1			ldx 	IFTarget
.4adf	20 42 4f	jsr $4f42			jsr 	IFloatRotateLeft
.4ae2	60		rts				rts
.4ae3					IFDTrySubtract:
.4ae3	ae d1 06	ldx $06d1			ldx 	IFTarget 					; s1 = Rx
.4ae6	38		sec				sec 								; subtract, saving the results on the stack.
.4ae7	b5 00		lda $00,x			lda 	IM0,x
.4ae9	e5 0e		sbc $0e				sbc 	IFR0+IM0
.4aeb	48		pha				pha
.4aec	b5 01		lda $01,x			lda 	IM1,x
.4aee	e5 0f		sbc $0f				sbc 	IFR0+IM1
.4af0	48		pha				pha
.4af1	b5 02		lda $02,x			lda 	IM2,x
.4af3	e5 10		sbc $10				sbc 	IFR0+IM2
.4af5	b0 03		bcs $4afa			bcs 	_IFDCanSubtract
.4af7	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.4af8	68		pla				pla
.4af9	60		rts				rts
.4afa					_IFDCanSubtract:
.4afa	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.4afc	68		pla				pla
.4afd	95 01		sta $01,x			sta 	IM1,x
.4aff	68		pla				pla
.4b00	95 00		sta $00,x			sta 	IM0,x
.4b02	e6 1a		inc $1a				inc 	IFRTemp+IM0 				; increment temp
.4b04	d0 06		bne $4b0c			bne 	_IFDCSExit
.4b06	e6 1b		inc $1b				inc 	IFRTemp+IM1
.4b08	d0 02		bne $4b0c			bne 	_IFDCSExit
.4b0a	e6 1c		inc $1c				inc 	IFRTemp+IM2
.4b0c					_IFDCSExit:
.4b0c	60		rts				rts
.4b0d					IFloatBitwiseAnd:
.4b0d	5a		phy				phy
.4b0e	20 52 4b	jsr $4b52			jsr 	IFPreProcessBitwise 		; set up everything.
.4b11	d0 0f		bne $4b22			bne 	_IFBAExit
.4b13					_IFBALoop:
.4b13	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.4b16	35 00		and $00,x			and 	IM0,x
.4b18	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.4b1b	e8		inx				inx
.4b1c	c8		iny				iny
.4b1d	c0 03		cpy #$03			cpy 	#3
.4b1f	d0 f2		bne $4b13			bne 	_IFBALoop
.4b21	18		clc				clc
.4b22					_IFBAExit:
.4b22	7a		ply				ply
.4b23	60		rts				rts
.4b24					IFloatBitwiseOr:
.4b24	5a		phy				phy
.4b25	20 52 4b	jsr $4b52			jsr 	IFPreProcessBitwise 		; set up everything.
.4b28	d0 0f		bne $4b39			bne 	_IFBAExit
.4b2a					_IFBALoop:
.4b2a	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.4b2d	15 00		ora $00,x			ora 	IM0,x
.4b2f	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.4b32	e8		inx				inx
.4b33	c8		iny				iny
.4b34	c0 03		cpy #$03			cpy 	#3
.4b36	d0 f2		bne $4b2a			bne 	_IFBALoop
.4b38	18		clc				clc
.4b39					_IFBAExit:
.4b39	7a		ply				ply
.4b3a	60		rts				rts
.4b3b					IFloatBitwiseXor:
.4b3b	5a		phy				phy
.4b3c	20 52 4b	jsr $4b52			jsr 	IFPreProcessBitwise 		; set up everything.
.4b3f	d0 0f		bne $4b50			bne 	_IFBAExit
.4b41					_IFBALoop:
.4b41	b9 0e 00	lda $000e,y			lda 	IFR0+IM0,y
.4b44	55 00		eor $00,x			eor 	IM0,x
.4b46	99 0e 00	sta $000e,y			sta 	IFR0+IM0,y
.4b49	e8		inx				inx
.4b4a	c8		iny				iny
.4b4b	c0 03		cpy #$03			cpy 	#3
.4b4d	d0 f2		bne $4b41			bne 	_IFBALoop
.4b4f	18		clc				clc
.4b50					_IFBAExit:
.4b50	7a		ply				ply
.4b51	60		rts				rts
.4b52					IFPreProcessBitwise:
.4b52	a0 00		ldy #$00			ldy 	#0 							; set index.
.4b54	a5 11		lda $11				lda 	IFR0+IExp 					; OR exponents
.4b56	15 03		ora $03,x			ora 	IExp,x
.4b58	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.4b5a	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.4b5c	38		sec				sec 								; carry set just in cases.
.4b5d	60		rts				rts
.4b5e					IFloatAbsoluteR0:
.4b5e	a5 11		lda $11				lda 	IFR0+IExp					; reset the sign bit.
.4b60	29 bf		and #$bf			and 	#IFSign ^ 255
.4b62	85 11		sta $11				sta 	IFR0+IExp
.4b64	18		clc				clc
.4b65	60		rts				rts
.4b66					IFloatSquareRootR0:
.4b66	a2 0e		ldx #$0e			ldx 	#IFR0 						; if zero, return zero.
.4b68	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero
.4b6b	a5 11		lda $11				lda	 	IFR0+IExp 					; if negative fail.
.4b6d	29 40		and #$40			and 	#IFSign
.4b6f	d0 2f		bne $4ba0			bne 	_IFSRFail
.4b71	20 51 4f	jsr $4f51			jsr 	IFloatNormalise 			; it will work better !
.4b74	a2 12		ldx #$12			ldx 	#IFR1 						; R1 contains original throughout
.4b76	20 bc 4e	jsr $4ebc			jsr 	IFloatCopyToRegister
.4b79	a5 11		lda $11				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.4b7b	20 6c 4a	jsr $4a6c			jsr 	IFMSignExtend 				; sign extended version of the exponent
.4b7e	18		clc				clc
.4b7f	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.4b81	85 11		sta $11				sta 	IFR0+IExp
.4b83	4a		lsr a				lsr 	a 							; which we can halve.
.4b84	38		sec				sec 								; convert back
.4b85	e9 17		sbc #$17			sbc 	#23
.4b87	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.4b89	85 11		sta $11				sta 	IFR0+IExp 					; to R0
.4b8b	20 a2 4b	jsr $4ba2			jsr 	_IFSRNewton
.4b8e	20 a2 4b	jsr $4ba2			jsr 	_IFSRNewton
.4b91	20 a2 4b	jsr $4ba2			jsr 	_IFSRNewton
.4b94	20 a2 4b	jsr $4ba2			jsr 	_IFSRNewton
.4b97	18		clc				clc
.4b98	60		rts				rts
.4b99					_IFSRZero:
.4b99	a2 0e		ldx #$0e			ldx 	#IFR0
.4b9b	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.4b9e	18		clc				clc
.4b9f	60		rts				rts
.4ba0					_IFSRFail:
.4ba0	38		sec				sec
.4ba1	60		rts				rts
.4ba2					_IFSRNewton:
.4ba2	a2 12		ldx #$12			ldx 	#IFR1 						; push original value (R3) on the stack
.4ba4	20 69 4e	jsr $4e69			jsr 	IFloatPushRx
.4ba7	a2 0e		ldx #$0e			ldx 	#IFR0 						; push current guess (R0) on the stack.
.4ba9	20 69 4e	jsr $4e69			jsr 	IFloatPushRx
.4bac	a2 12		ldx #$12			ldx 	#IFR1 						; guess = original / guess
.4bae	20 3d 4c	jsr $4c3d			jsr 	IFloatDivideFloat
.4bb1	a2 12		ldx #$12			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.4bb3	20 8a 4e	jsr $4e8a			jsr 	IFloatPullRx
.4bb6	20 10 49	jsr $4910			jsr 	IFloatAdd 					; now guess + original/guess
.4bb9	a2 0e		ldx #$0e			ldx 	#IFR0 						; divide by 2
.4bbb	20 49 4f	jsr $4f49			jsr 	IFloatShiftRight
.4bbe	a2 12		ldx #$12			ldx 	#IFR1
.4bc0	20 8a 4e	jsr $4e8a			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.4bc3	60		rts				rts
.4bc4					IFloatFractionalR0:
.4bc4	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.4bc6	29 3f		and #$3f			and 	#IFXMask
.4bc8	f0 17		beq $4be1			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.4bca	20 5e 4b	jsr $4b5e			jsr 	IFloatAbsoluteR0 			; absolute value R9
.4bcd	a2 0e		ldx #$0e			ldx 	#IFR0
.4bcf	20 51 4f	jsr $4f51			jsr 	IFloatNormalise 			; normalise R0
.4bd2	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy to RTemp
.4bd4	20 bc 4e	jsr $4ebc			jsr 	IFloatCopyToRegister
.4bd7	20 1a 4c	jsr $4c1a			jsr 	IFloatIntegerR0 			; take integer part of R0
.4bda	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; subtract
.4bdc	20 09 49	jsr $4909			jsr 	IFloatSubtract
.4bdf	80 05		bra $4be6			bra 	_FIPExit
.4be1					_FIPZero:
.4be1	a2 0e		ldx #$0e			ldx 	#IFR0
.4be3	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.4be6					_FIPExit:
.4be6	18		clc				clc
.4be7	60		rts				rts
.4be8					IFloatCompare:
.4be8	20 09 49	jsr $4909			jsr 	IFloatSubtract 				; subtract R0 from RX.
.4beb	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.4bed	05 11		ora $11				ora 	IFR0+IExp
.4bef	a2 0e		ldx #$0e			ldx 	#IFR0 						; only using R0 from now on.
.4bf1	29 3f		and #$3f			and 	#IFXMask
.4bf3	d0 19		bne $4c0e			bne 	_IFCNonInteger
.4bf5	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero 			; check if zero
.4bf8	f0 0f		beq $4c09			beq 	_IFCZero
.4bfa					_IFCReturnSign:
.4bfa	a5 11		lda $11				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.4bfc	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.4bfe	48		pha				pha
.4bff	a9 01		lda #$01			lda 	#1
.4c01	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte 				; return to +1
.4c04	68		pla				pla 								; sign bit back
.4c05	85 11		sta $11				sta 	IFR0+IExp					; set that sign
.4c07	18		clc				clc
.4c08	60		rts				rts
.4c09					_IFCZero:
.4c09	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.4c0c	18		clc				clc
.4c0d	60		rts				rts
.4c0e					_IFCNonInteger:
.4c0e	a5 0e		lda $0e				lda 	IFR0+IM0
.4c10	29 00		and #$00			and		#$00
.4c12	05 0f		ora $0f				ora 	IFR0+IM1
.4c14	05 10		ora $10				ora 	IFR0+IM2
.4c16	f0 f1		beq $4c09			beq 	_IFCZero 					; near enough !
.4c18	80 e0		bra $4bfa			bra 	_IFCReturnSign 				; return the sign of the difference.
.4c1a					IFloatIntegerR0:
.4c1a	a5 11		lda $11				lda 	IFR0+IExp					; is it integer already ?
.4c1c	29 3f		and #$3f			and 	#IFXMask
.4c1e	f0 1b		beq $4c3b			beq 	_FIPExit 					; if so do nothing
.4c20	a2 0e		ldx #$0e			ldx 	#IFR0
.4c22	20 51 4f	jsr $4f51			jsr 	IFloatNormalise 			; normalise
.4c25	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero 			; is it zero ?
.4c28	f0 0e		beq $4c38			beq 	_FIPZero 					; if so return zero.
.4c2a					_FIPShift:
.4c2a	a5 11		lda $11				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.4c2c	29 20		and #$20			and 	#$20 						; still -ve
.4c2e	f0 0b		beq $4c3b			beq 	_FIPExit
.4c30	20 49 4f	jsr $4f49			jsr 	IFloatShiftRight 			; shift mantissa right
.4c33	20 73 4f	jsr $4f73			jsr 	IFloatIncExponent 			; bump exponent
.4c36	80 f2		bra $4c2a			bra 	_FIPShift
.4c38					_FIPZero:
.4c38	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.4c3b					_FIPExit:
.4c3b	18		clc				clc
.4c3c	60		rts				rts
.4c3d					IFloatDivideFloat:
.4c3d	8e d1 06	stx $06d1			stx 	IFTarget  					; this is s1, s0 = R0
.4c40	20 75 4a	jsr $4a75			jsr 	IFCalculateNewSign 			; calculate sign of result
.4c43	20 51 4f	jsr $4f51			jsr 	IFloatNormalise 			; normalise RX
.4c46	a2 0e		ldx #$0e			ldx 	#IFR0 						; normalise R0
.4c48	20 51 4f	jsr $4f51			jsr 	IFloatNormalise
.4c4b	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero
.4c4e	f0 56		beq $4ca6			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.4c50	a5 11		lda $11				lda 	IFR0+IExp 					; calculate s0.exponent
.4c52	20 6c 4a	jsr $4a6c			jsr 	IFMSignExtend
.4c55	8d d2 06	sta $06d2			sta 	IFNewExponent
.4c58	ae d1 06	ldx $06d1			ldx 	IFTarget 					; calculate s1.exponent
.4c5b	b5 03		lda $03,x			lda 	IExp,x
.4c5d	20 6c 4a	jsr $4a6c			jsr 	IFMSignExtend
.4c60	38		sec				sec
.4c61	ed d2 06	sbc $06d2			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.4c64	38		sec				sec
.4c65	e9 17		sbc #$17			sbc 	#23
.4c67	8d d2 06	sta $06d2			sta 	IFNewExponent
.4c6a	20 a8 4c	jsr $4ca8			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.4c6d	a5 1c		lda $1c				lda 	IFRTemp+IM2 				; result has overflowed ?
.4c6f	10 08		bpl $4c79			bpl 	_IFDFNoShiftResult
.4c71	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; if so, fix it up.
.4c73	20 49 4f	jsr $4f49			jsr 	IFloatShiftRight
.4c76	ee d2 06	inc $06d2			inc 	IFNewExponent
.4c79					_IFDFNoShiftResult:
.4c79	ad d2 06	lda $06d2			lda 	IFNewExponent 				; underflow/overflow check.
.4c7c	30 06		bmi $4c84			bmi 	_IFDFCheckUnderflow
.4c7e	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.4c80	b0 24		bcs $4ca6			bcs 	_IFDFDivZero
.4c82	80 11		bra $4c95			bra		_IFDFExit
.4c84					_IFDFCheckUnderflow:
.4c84	ad d2 06	lda $06d2			lda 	IFNewExponent 				; shift into a legal exponent.
.4c87	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.4c89	b0 0a		bcs $4c95			bcs 	_IFDFExit
.4c8b	ee d2 06	inc $06d2			inc 	IFNewExponent
.4c8e	a2 1a		ldx #$1a			ldx 	#IFRTemp
.4c90	20 49 4f	jsr $4f49			jsr 	IFloatShiftRight
.4c93	80 ef		bra $4c84			bra 	_IFDFCheckUnderflow
.4c95					_IFDFExit:
.4c95	ad d2 06	lda $06d2			lda 	IFNewExponent 				; combine exponent and sign.
.4c98	29 3f		and #$3f			and 	#IFXMask
.4c9a	0d d3 06	ora $06d3			ora 	IFNewSign
.4c9d	85 1d		sta $1d				sta 	IFRTemp+IExp
.4c9f	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; copy RTemp to R0.
.4ca1	20 ab 4e	jsr $4eab			jsr 	IFloatCopyFromRegister
.4ca4	18		clc				clc
.4ca5	60		rts				rts
.4ca6					_IFDFDivZero:
.4ca6	38		sec				sec
.4ca7	60		rts				rts
.4ca8					IFloatDivideSupport:
.4ca8	a2 1a		ldx #$1a			ldx 	#IFRTemp 					; zero RTemp
.4caa	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.4cad	5a		phy				phy 								; main division loop x 23
.4cae	a0 17		ldy #$17			ldy 	#23
.4cb0					_IFDSLoop:
.4cb0	20 e3 4a	jsr $4ae3			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.4cb3	20 d7 4a	jsr $4ad7			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.4cb6	88		dey				dey
.4cb7	d0 f7		bne $4cb0			bne 	_IFDSLoop 					; do it 24 times
.4cb9	7a		ply				ply
.4cba	60		rts				rts
.4cbb					IFloatIntegerToStringR0:
.4cbb	8d d4 06	sta $06d4			sta 	IFBase 						; save base to use.
.4cbe	20 9b 4f	jsr $4f9b			jsr 	IFloatBufferReset			; empty buffer
.4cc1	a5 11		lda $11				lda 	IFR0+IExp					; check integer
.4cc3	29 3f		and #$3f			and 	#IFXMask
.4cc5	d0 1e		bne $4ce5			bne 	_IFIFail
.4cc7	a2 0e		ldx #$0e			ldx 	#IFR0 						; skip - check if zero.
.4cc9	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero
.4ccc	f0 0e		beq $4cdc			beq 	_IFINotNegative
.4cce	a5 11		lda $11				lda 	IFR0+IExp 					; is signed ?
.4cd0	29 40		and #$40			and 	#IFSign
.4cd2	f0 08		beq $4cdc			beq 	_IFINotNegative
.4cd4	a9 2d		lda #$2d			lda 	#"-"						; output -
.4cd6	20 aa 4f	jsr $4faa			jsr 	IFloatBufferWrite
.4cd9	20 25 4f	jsr $4f25			jsr 	IFloatNegate 				; tidy up !
.4cdc					_IFINotNegative:
.4cdc	20 e7 4c	jsr $4ce7			jsr 	_IFIRecursiveConvert 		; start converting
.4cdf	20 a2 4f	jsr $4fa2			jsr 	IFloatGetBufferAddress
.4ce2	18		clc				clc
.4ce3	80 01		bra $4ce6			bra 	_IFIExit
.4ce5					_IFIFail:
.4ce5	38		sec				sec
.4ce6					_IFIExit:
.4ce6	60		rts				rts
.4ce7					_IFIRecursiveConvert:
.4ce7	a2 12		ldx #$12			ldx 	#IFR1
.4ce9	20 bc 4e	jsr $4ebc			jsr 	IFloatCopyToRegister 		; R0->R1
.4cec	a2 0e		ldx #$0e			ldx 	#IFR0
.4cee	ad d4 06	lda $06d4			lda 	IFBase 						; Base -> R0
.4cf1	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.4cf4	a2 12		ldx #$12			ldx 	#IFR1 						; R0 = R1 / R0
.4cf6	20 7f 4a	jsr $4a7f			jsr 	IFloatDivideInteger
.4cf9	a2 0e		ldx #$0e			ldx 	#IFR0 						; if result <> 0
.4cfb	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero
.4cfe	f0 09		beq $4d09			beq 	_IFIOutDigit
.4d00	a5 12		lda $12				lda 	IFR1+IM0 					; save remainder
.4d02	48		pha				pha
.4d03	20 e7 4c	jsr $4ce7			jsr 	_IFIRecursiveConvert 		; convert the divider
.4d06	68		pla				pla
.4d07	85 12		sta $12				sta 	IFR1+IM0 					; restore remainder
.4d09					_IFIOutDigit:
.4d09	a5 12		lda $12				lda 	IFR1+IM0 					; get remainder.
.4d0b	c9 0a		cmp #$0a			cmp	 	#10
.4d0d	90 02		bcc $4d11			bcc 	_IFINotHex
.4d0f	69 06		adc #$06			adc 	#6
.4d11					_IFINotHex:
.4d11	69 30		adc #$30			adc 	#48
.4d13	20 aa 4f	jsr $4faa			jsr 	IFloatBufferWrite
.4d16	60		rts				rts
.06d4					IFBase:
>06d4							.fill 	1
.4d17					IFloatFloatToStringR0:
.4d17	a2 16		ldx #$16			ldx 	#IFR2 						; copy R2 to stack,value to R2
.4d19	20 69 4e	jsr $4e69			jsr 	IFloatPushRx
.4d1c	20 bc 4e	jsr $4ebc			jsr 	IFloatCopyToRegister
.4d1f	20 1a 4c	jsr $4c1a			jsr 	IFloatIntegerR0				; make R0 integer
.4d22	a9 0a		lda #$0a			lda 	#10 						; base 10.
.4d24	20 bb 4c	jsr $4cbb			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.4d27	9c d5 06	stz $06d5			stz 	IFloatDecimalCount 			; zero the decimal count.
.4d2a	a5 19		lda $19				lda 	IFR2+IExp 					; is integer.
.4d2c	29 3f		and #$3f			and 	#IFXMask
.4d2e	f0 44		beq $4d74			beq 	_IFFSExit
.4d30					_IFloatFracLoop:
.4d30	a2 16		ldx #$16			ldx 	#IFR2 						; R0 = fractional part of R2
.4d32	20 ab 4e	jsr $4eab			jsr 	IFloatCopyFromRegister
.4d35	20 c4 4b	jsr $4bc4			jsr 	IFloatFractionalR0
.4d38	20 51 4f	jsr $4f51			jsr 	IFloatNormalise
.4d3b	a2 16		ldx #$16			ldx 	#IFR2
.4d3d	20 bc 4e	jsr $4ebc			jsr 	IFloatCopyToRegister 		; copy to R2
.4d40	a2 16		ldx #$16			ldx 	#IFR2 						; set R2 to 10
.4d42	a9 0a		lda #$0a			lda 	#10
.4d44	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.4d47	a2 16		ldx #$16			ldx 	#IFR2						; R0,R2 = R2 * 10
.4d49	20 ba 49	jsr $49ba			jsr 	IFloatMultiply
.4d4c	a2 16		ldx #$16			ldx 	#IFR2
.4d4e	20 bc 4e	jsr $4ebc			jsr 	IFloatCopyToRegister
.4d51	20 1a 4c	jsr $4c1a			jsr 	IFloatIntegerR0 			; get integer part of R0
.4d54	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; done 5 dp, no more
.4d57	c9 03		cmp #$03			cmp 	#3
.4d59	f0 16		beq $4d71			beq 	_IFFSExitStripZero
.4d5b	ad d5 06	lda $06d5			lda 	IFloatDecimalCount 			; written the DP yet ?
.4d5e	d0 05		bne $4d65			bne 	_IFloatNotFirst
.4d60	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.4d62	20 aa 4f	jsr $4faa			jsr 	IFloatBufferWrite
.4d65					_IFloatNotFirst:
.4d65	ee d5 06	inc $06d5			inc 	IFloatDecimalCount
.4d68	a5 0e		lda $0e				lda 	IFR0+IM0 					; get digit
.4d6a	09 30		ora #$30			ora 	#"0"						; ASCII
.4d6c	20 aa 4f	jsr $4faa			jsr 	IFloatBufferWrite 			; write to the buffer.
.4d6f	80 bf		bra $4d30			bra 	_IFloatFracLoop
.4d71					_IFFSExitStripZero:
.4d71	20 b9 4f	jsr $4fb9			jsr 	IFloatStripTrailingZeros
.4d74					_IFFSExit:
.4d74	a2 16		ldx #$16			ldx 	#IFR2 						; restore R2
.4d76	20 8a 4e	jsr $4e8a			jsr 	IFloatPullRx
.4d79	20 a2 4f	jsr $4fa2			jsr 	IFloatGetBufferAddress
.4d7c	18		clc				clc
.4d7d	60		rts				rts
.06d5					IFloatDecimalCount:
>06d5							.fill 	1
.4d7e					IFloatStringToFloatR0:
.4d7e	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.4d81	86 0c		stx $0c				stx 	iTemp0
.4d83	84 0d		sty $0d				sty 	iTemp0+1
.4d85	a2 0e		ldx #$0e			ldx 	#IFR0 						; reset the current value.
.4d87	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.4d8a	9c d7 06	stz $06d7			stz 	IFSignFlag 					; clear the sign flag
.4d8d	20 1a 4e	jsr $4e1a			jsr 	IFSTFGetNext 				; get first
.4d90	f0 1b		beq $4dad			beq 	_IFSTFFail 					; no character
.4d92	90 10		bcc $4da4			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.4d94	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.4d96	d0 15		bne $4dad			bne 	_IFSTFFail
.4d98	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.4d9a	8d d7 06	sta $06d7			sta 	IFSignFlag
.4d9d					_IFSTFLoop:
.4d9d	20 1a 4e	jsr $4e1a			jsr 	IFSTFGetNext 				; get next
.4da0	b0 0b		bcs $4dad			bcs 	_IFSTFFail 					; bad character.
.4da2	f0 11		beq $4db5			beq 	_IFSTFExit 					; end of data
.4da4					_IFSTFHaveChar:
.4da4	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.4da6	f0 08		beq $4db0			beq 	_IFSTFDecimal
.4da8	20 3e 4e	jsr $4e3e			jsr 	IFSTFAddR0 					; add number in
.4dab	80 f0		bra $4d9d			bra 	_IFSTFLoop 					; keep going until . or end.
.4dad					_IFSTFFail:
.4dad	38		sec				sec
.4dae	80 0d		bra $4dbd			bra 	_IFSTFReturn
.4db0					_IFSTFDecimal:
.4db0	20 c5 4d	jsr $4dc5			jsr 	IFSTFDecimal 				; call the decimal places code.
.4db3	b0 08		bcs $4dbd			bcs 	_IFSTFReturn 				; error
.4db5					_IFSTFExit:
.4db5	a5 11		lda $11				lda 	IFR0+IExp 					; copy sign flag in.
.4db7	0d d7 06	ora $06d7			ora 	IFSignFlag
.4dba	85 11		sta $11				sta 	IFR0+IExp
.4dbc	18		clc				clc
.4dbd					_IFSTFReturn:
.4dbd	60		rts				rts
.4dbe					IFloatAddDecimalToR0:
.4dbe	8d d6 06	sta $06d6			sta 	IFCount 					; save it out.
.4dc1	86 0c		stx $0c				stx 	iTemp0
.4dc3	84 0d		sty $0d				sty 	iTemp0+1
.4dc5					IFSTFDecimal:
.4dc5	a2 0e		ldx #$0e			ldx 	#IFR0 						; push integer part on stack
.4dc7	20 69 4e	jsr $4e69			jsr 	IFloatPushRx
.4dca	a2 0e		ldx #$0e			ldx 	#IFR0 						; R0 is the decimal digits so far.
.4dcc	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero
.4dcf	9c d8 06	stz $06d8			stz 	IFDecimalPlaces
.4dd2					_IFSTDLoop:
.4dd2	20 1a 4e	jsr $4e1a			jsr 	IFSTFGetNext 				; get next
.4dd5	b0 41		bcs $4e18			bcs 	_IFSTFFail2 				; bad character.
.4dd7	f0 11		beq $4dea			beq 	_IFSTFComplete 				; end of data, work out the result.
.4dd9	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.4ddb	f0 39		beq $4e16			beq 	_IFSTFExit2
.4ddd	20 3e 4e	jsr $4e3e			jsr 	IFSTFAddR0 					; add number in
.4de0	ee d8 06	inc $06d8			inc 	IFDecimalPlaces 			; count decimals
.4de3	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.4de6	c9 03		cmp #$03			cmp 	#3
.4de8	90 e8		bcc $4dd2			bcc 	_IFSTDLoop
.4dea					_IFSTFComplete:
.4dea	ad d8 06	lda $06d8			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.4ded	f0 27		beq $4e16			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.4def	3a		dec a				dec 	a 							; table indexed from 1.
.4df0	0a		asl a				asl 	a
.4df1	0a		asl a				asl 	a
.4df2	aa		tax				tax
.4df3	bd 55 4e	lda $4e55,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.4df6	85 12		sta $12				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.4df8	bd 56 4e	lda $4e56,x			lda 	TableTen+1,x
.4dfb	85 13		sta $13				sta  	IFR1+IM1
.4dfd	bd 57 4e	lda $4e57,x			lda 	TableTen+2,x
.4e00	85 14		sta $14				sta  	IFR1+IM2
.4e02	bd 58 4e	lda $4e58,x			lda 	TableTen+3,x
.4e05	85 15		sta $15				sta  	IFR1+IExp
.4e07	a2 12		ldx #$12			ldx 	#IFR1 						; multiply into result
.4e09	20 ba 49	jsr $49ba			jsr 	IFloatMultiply
.4e0c	a2 12		ldx #$12			ldx 	#IFR1  						; pop and add the decimal.
.4e0e	20 8a 4e	jsr $4e8a			jsr 	IFloatPullRx
.4e11	a2 12		ldx #$12			ldx 	#IFR1
.4e13	20 10 49	jsr $4910			jsr 	IFloatAdd
.4e16					_IFSTFExit2:
.4e16	18		clc				clc
.4e17	60		rts				rts
.4e18					_IFSTFFail2:
.4e18	38		sec				sec
.4e19	60		rts				rts
.4e1a					IFSTFGetNext:
.4e1a	ad d6 06	lda $06d6			lda 	IFCount  					; if count is zero, return with Z set.
.4e1d	f0 19		beq $4e38			beq 	_IFSTFReturnOk
.4e1f	b2 0c		lda ($0c)			lda 	(iTemp0) 					; get next character
.4e21	e6 0c		inc $0c				inc 	iTemp0 						; point at next.
.4e23	d0 02		bne $4e27			bne 	_IFSTFGNNoCarry
.4e25	e6 0d		inc $0d				inc 	iTemp0+1
.4e27					_IFSTFGNNoCarry:
.4e27	ce d6 06	dec $06d6			dec 	IFCount 					; dec count.
.4e2a	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.4e2c	f0 08		beq $4e36			beq 	_IFSTFGOkay
.4e2e	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.4e30	90 08		bcc $4e3a			bcc 	_IFSTFGFail
.4e32	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.4e34	b0 04		bcs $4e3a			bcs 	_IFSTFGFail
.4e36					_IFSTFGOkay:
.4e36	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.4e38					_IFSTFReturnOk:
.4e38	18		clc				clc
.4e39	60		rts				rts
.4e3a					_IFSTFGFail:
.4e3a	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.4e3c	38		sec				sec
.4e3d	60		rts				rts
.4e3e					IFSTFAddR0:
.4e3e	29 0f		and #$0f			and 	#15 						; to int value
.4e40	48		pha				pha 								; save it.
.4e41	a9 0a		lda #$0a			lda 	#10
.4e43	a2 12		ldx #$12			ldx 	#IFR1
.4e45	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.4e48	20 ba 49	jsr $49ba			jsr 	IFloatMultiply
.4e4b	68		pla				pla
.4e4c	a2 12		ldx #$12			ldx 	#IFR1
.4e4e	20 1c 4f	jsr $4f1c			jsr 	IFloatSetByte
.4e51	20 10 49	jsr $4910			jsr 	IFloatAdd
.4e54	60		rts				rts
.06d6					IFCount:
>06d6							.fill 	1
.06d7					IFSignFlag:
>06d7							.fill 	1
.06d8					IFDecimalPlaces:
>06d8							.fill 	1
.4e55					TableTen:
>4e55	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>4e59	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>4e5d	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>4e61	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>4e65	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.4e69					IFloatPushRx:
.4e69	5a		phy				phy
.4e6a	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.4e6d	b5 00		lda $00,x			lda 	IM0,x
.4e6f	99 da 06	sta $06da,y			sta 	IFStack,y
.4e72	b5 01		lda $01,x			lda 	IM1,x
.4e74	99 db 06	sta $06db,y			sta 	IFStack+1,y
.4e77	b5 02		lda $02,x			lda 	IM2,x
.4e79	99 dc 06	sta $06dc,y			sta 	IFStack+2,y
.4e7c	b5 03		lda $03,x			lda 	IExp,x
.4e7e	99 dd 06	sta $06dd,y			sta 	IFStack+3,y
.4e81	c8		iny				iny
.4e82	c8		iny				iny
.4e83	c8		iny				iny
.4e84	c8		iny				iny
.4e85	8c d9 06	sty $06d9			sty 	IFStackIndex
.4e88	7a		ply				ply
.4e89	60		rts				rts
.4e8a					IFloatPullRx:
.4e8a	5a		phy				phy
.4e8b	ac d9 06	ldy $06d9			ldy 	IFStackIndex
.4e8e	88		dey				dey
.4e8f	88		dey				dey
.4e90	88		dey				dey
.4e91	88		dey				dey
.4e92	b9 da 06	lda $06da,y			lda 	IFStack,y
.4e95	95 00		sta $00,x			sta 	IM0,x
.4e97	b9 db 06	lda $06db,y			lda 	IFStack+1,y
.4e9a	95 01		sta $01,x			sta 	IM1,x
.4e9c	b9 dc 06	lda $06dc,y			lda 	IFStack+2,y
.4e9f	95 02		sta $02,x			sta 	IM2,x
.4ea1	b9 dd 06	lda $06dd,y			lda 	IFStack+3,y
.4ea4	95 03		sta $03,x			sta 	IExp,x
.4ea6	8c d9 06	sty $06d9			sty 	IFStackIndex
.4ea9	7a		ply				ply
.4eaa	60		rts				rts
.06d9					IFStackIndex:
>06d9							.fill 	1
.06da					IFStack:
>06da							.fill 	16*4
.4eab					IFloatCopyFromRegister:
.4eab	b5 00		lda $00,x			lda 	0,x
.4ead	85 0e		sta $0e				sta 	IFR0
.4eaf	b5 01		lda $01,x			lda 	1,x
.4eb1	85 0f		sta $0f				sta 	IFR0+1
.4eb3	b5 02		lda $02,x			lda 	2,x
.4eb5	85 10		sta $10				sta 	IFR0+2
.4eb7	b5 03		lda $03,x			lda 	3,x
.4eb9	85 11		sta $11				sta 	IFR0+3
.4ebb	60		rts				rts
.4ebc					IFloatCopyToRegister:
.4ebc	a5 0e		lda $0e				lda 	IFR0
.4ebe	95 00		sta $00,x			sta 	0,x
.4ec0	a5 0f		lda $0f				lda 	IFR0+1
.4ec2	95 01		sta $01,x			sta 	1,x
.4ec4	a5 10		lda $10				lda 	IFR0+2
.4ec6	95 02		sta $02,x			sta 	2,x
.4ec8	a5 11		lda $11				lda 	IFR0+3
.4eca	95 03		sta $03,x			sta 	3,x
.4ecc	60		rts				rts
.4ecd					IFloatLoadInline:
.4ecd	68		pla				pla 								; pop address off to iTemp0
.4ece	85 0c		sta $0c				sta 	iTemp0
.4ed0	68		pla				pla
.4ed1	85 0d		sta $0d				sta 	iTemp0+1
.4ed3	a0 01		ldy #$01			ldy 	#1
.4ed5	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 0
.4ed7	95 00		sta $00,x			sta 	0,x
.4ed9	c8		iny				iny
.4eda	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 1
.4edc	95 01		sta $01,x			sta 	1,x
.4ede	c8		iny				iny
.4edf	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 2
.4ee1	95 02		sta $02,x			sta 	2,x
.4ee3	c8		iny				iny
.4ee4	b1 0c		lda ($0c),y			lda 	(iTemp0),y 					; copy byte 3
.4ee6	95 03		sta $03,x			sta 	3,x
.4ee8	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.4ee9	a5 0c		lda $0c				lda 	iTemp0
.4eeb	69 05		adc #$05			adc 	#5
.4eed	85 0c		sta $0c				sta 	iTemp0
.4eef	90 02		bcc $4ef3			bcc 	_IFLINoCarry
.4ef1	e6 0d		inc $0d				inc 	iTemp0+1
.4ef3					_IFLINoCarry:
.4ef3	6c 0c 00	jmp ($000c)			jmp 	(iTemp0)					; effectively RTS
.4ef6					IFloatMultiply8BitRx:
.4ef6	5a		phy		        phy
.4ef7	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.4ef9	a4 0e		ldy $0e		        ldy     IFR0+IM0
.4efb	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.4efc	85 0e		sta $0e		        sta     IFR0+IM0
.4efe	84 0f		sty $0f		        sty     IFR0+IM1
.4f00	a9 00		lda #$00	        lda     #0
.4f02	a0 08		ldy #$08	        ldy     #8
.4f04					_IFMLoop:
.4f04	90 03		bcc $4f09	        bcc     _IFMNoAdd
.4f06	18		clc		        clc
.4f07	65 0f		adc $0f		        adc     IFR0+IM1
.4f09					_IFMNoAdd:
.4f09	6a		ror a		        ror     a
.4f0a	66 0e		ror $0e		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.4f0c	88		dey		        dey
.4f0d	d0 f5		bne $4f04	        bne     _IFMLoop
.4f0f	85 0f		sta $0f		        sta     IFR0+IM1                    ; write MSB out
.4f11	7a		ply		        ply
.4f12	60		rts		        rts
.4f13					IFloatCheckZero:
.4f13	b5 00		lda $00,x			lda 	IM0,x
.4f15	15 01		ora $01,x			ora 	IM1,x
.4f17	15 02		ora $02,x			ora 	IM2,x
.4f19	60		rts				rts
.4f1a					IFloatSetZero:
.4f1a	a9 00		lda #$00			lda 	#0
.4f1c					IFloatSetByte:
.4f1c	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.4f1e	74 01		stz $01,x			stz 	IM1,x
.4f20	74 02		stz $02,x			stz 	IM2,x
.4f22	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.4f24	60		rts				rts
.4f25					IFloatNegate:
.4f25	b5 03		lda $03,x			lda 	IExp,x
.4f27	49 40		eor #$40			eor 	#IFSign
.4f29	95 03		sta $03,x			sta 	IExp,x
.4f2b	18		clc				clc
.4f2c	60		rts				rts
.4f2d					IFloatMantissaNegate:
.4f2d	38		sec				sec
.4f2e	a9 00		lda #$00			lda 	#0
.4f30	f5 00		sbc $00,x			sbc 	IM0,x
.4f32	95 00		sta $00,x			sta 	IM0,x
.4f34	a9 00		lda #$00			lda 	#0
.4f36	f5 01		sbc $01,x			sbc 	IM1,x
.4f38	95 01		sta $01,x			sta 	IM1,x
.4f3a	a9 00		lda #$00			lda 	#0
.4f3c	f5 02		sbc $02,x			sbc 	IM2,x
.4f3e	95 02		sta $02,x			sta 	IM2,x
.4f40	60		rts				rts
.4f41					IFloatShiftLeft:
.4f41	18		clc				clc
.4f42					IFloatRotateLeft:
.4f42	36 00		rol $00,x			rol 	IM0,x
.4f44	36 01		rol $01,x			rol 	IM1,x
.4f46	36 02		rol $02,x			rol 	IM2,x
.4f48	60		rts				rts
.4f49					IFloatShiftRight:
.4f49	18		clc				clc
.4f4a					IFloatRotateRight:
.4f4a	76 02		ror $02,x			ror 	IM2,x
.4f4c	76 01		ror $01,x			ror 	IM1,x
.4f4e	76 00		ror $00,x			ror 	IM0,x
.4f50	60		rts				rts
.4f51					IFloatNormalise:
.4f51	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero 			; is it zero
.4f54	f0 18		beq $4f6e			beq 	_IFNExitZero 				; if so exit
.4f56					_IFNLoop:
.4f56	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.4f58	29 c0		and #$c0			and 	#$C0
.4f5a	c9 40		cmp #$40			cmp 	#$40
.4f5c	f0 13		beq $4f71			beq 	_IFNExitOkay 				; if so , then we are done.
.4f5e	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.4f60	29 3f		and #$3f			and 	#$3F
.4f62	c9 20		cmp #$20			cmp 	#$20
.4f64	f0 0b		beq $4f71			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.4f66	20 87 4f	jsr $4f87			jsr 	IFloatDecExponent
.4f69	20 41 4f	jsr $4f41			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.4f6c	80 e8		bra $4f56			bra 	_IFNLoop
.4f6e					_IFNExitZero:
.4f6e	20 1a 4f	jsr $4f1a			jsr 	IFloatSetZero 				; set the result to zero
.4f71					_IFNExitOkay:
.4f71	18		clc				clc  								; return with CC.
.4f72	60		rts				rts
.4f73					IFloatIncExponent:
.4f73	b5 03		lda $03,x			lda 	IExp,x
.4f75	48		pha				pha
.4f76	29 c0		and #$c0			and 	#$C0
.4f78	8d 1a 07	sta $071a			sta 	IFXTemp
.4f7b	68		pla				pla
.4f7c	1a		inc a				inc 	a
.4f7d	29 3f		and #$3f			and 	#$3F
.4f7f	48		pha				pha
.4f80	0d 1a 07	ora $071a			ora 	IFXTemp
.4f83	95 03		sta $03,x			sta 	IExp,x
.4f85	68		pla				pla
.4f86	60		rts				rts
.4f87					IFloatDecExponent:
.4f87	b5 03		lda $03,x			lda 	IExp,x
.4f89	48		pha				pha
.4f8a	29 c0		and #$c0			and 	#$C0
.4f8c	8d 1a 07	sta $071a			sta 	IFXTemp
.4f8f	68		pla				pla
.4f90	3a		dec a				dec 	a
.4f91	29 3f		and #$3f			and 	#$3F
.4f93	48		pha				pha
.4f94	0d 1a 07	ora $071a			ora 	IFXTemp
.4f97	95 03		sta $03,x			sta 	IExp,x
.4f99	68		pla				pla
.4f9a	60		rts				rts
.071a					IFXTemp:
>071a							.fill 	1
.4f9b					IFloatBufferReset:
.4f9b	9c 1b 07	stz $071b			stz 	IFBufferCount
.4f9e	9c 1c 07	stz $071c			stz 	IFBuffer
.4fa1	60		rts				rts
.4fa2					IFloatGetBufferAddress:
.4fa2	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.4fa4	a2 1c		ldx #$1c			ldx 	#(IFBuffer & $FF)
.4fa6	ad 1b 07	lda $071b			lda 	IFBufferCount
.4fa9	60		rts				rts
.4faa					IFloatBufferWrite:
.4faa	da		phx				phx
.4fab	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.4fae	9d 1c 07	sta $071c,x			sta 	IFBuffer,x
.4fb1	9e 1d 07	stz $071d,x			stz 	IFBuffer+1,x
.4fb4	ee 1b 07	inc $071b			inc 	IFBufferCount
.4fb7	fa		plx				plx
.4fb8	60		rts				rts
.4fb9					IFloatStripTrailingZeros:
.4fb9	ae 1b 07	ldx $071b			ldx 	IFBufferCount
.4fbc	bd 1b 07	lda $071b,x			lda 	IFBuffer-1,x
.4fbf	c9 30		cmp #$30			cmp		#"0"
.4fc1	d0 0f		bne $4fd2			bne 	_IFSTExit
.4fc3	bd 1a 07	lda $071a,x			lda 	IFBuffer-2,x
.4fc6	c9 2e		cmp #$2e			cmp 	#"."
.4fc8	f0 08		beq $4fd2			beq 	_IFSTExit
.4fca	ce 1b 07	dec $071b			dec 	IFBufferCount
.4fcd	9e 1b 07	stz $071b,x			stz 	IFBuffer-1,x
.4fd0	80 e7		bra $4fb9			bra 	IFloatStripTrailingZeros
.4fd2					_IFSTExit:
.4fd2	60		rts				rts
.071b					IFBufferCount:
>071b							.fill 	1
.071c					IFBuffer:
>071c							.fill 	25
.4fd3					IFloatCheck:
.4fd3	a5 11		lda $11				lda 	IFR0+IExp					; force it negative
.4fd5	09 40		ora #$40			ora 	#IFSign
.4fd7	85 11		sta $11				sta 	IFR0+IExp
.4fd9	20 10 49	jsr $4910			jsr 	IFloatAdd 					; add allowed to error.
.4fdc	a2 0e		ldx #$0e			ldx 	#IFR0
.4fde	20 13 4f	jsr $4f13			jsr 	IFloatCheckZero 			; error if < 0
.4fe1	f0 06		beq $4fe9			beq 	_IFAOkay
.4fe3	a5 11		lda $11				lda 	IFR0+IExp
.4fe5	29 40		and #$40			and 	#IFSign
.4fe7	d0 01		bne $4fea			bne 	_IFAFail
.4fe9					_IFAOkay:
.4fe9	60		rts				rts
.4fea					_IFAFail:
.4fea	38		sec				sec
.4feb	68		pla				pla 								; get address - 2
.4fec	e9 02		sbc #$02			sbc 	#2
.4fee	aa		tax				tax
.4fef	68		pla				pla
.4ff0	e9 00		sbc #$00			sbc 	#0
.4ff2	a8		tay				tay
.4ff3	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.4ff5					_IFAStop:
>4ff5	db						.byte 	$DB 						; display an error AA ADR ADR
.4ff6	80 fd		bra $4ff5			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
