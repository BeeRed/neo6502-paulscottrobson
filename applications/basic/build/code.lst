
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Tue Jun 20 13:36:18 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 47 1f	jsr $1f47			jsr 	PGMSetBaseAddress
.1007	20 9e 2a	jsr $2a9e			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.100f	4c c5 14	jmp $14c5			jmp 	Command_RUN
.1012	4c 0d 14	jmp $140d			jmp 	Command_NEW

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$aa					PR_READ = $aa
=$ab					PR_DATA = $ab
=$ac					PR_RESTORE = $ac
=$ad					PR_GOTO = $ad
=$ae					PR_GOSUB = $ae
=$af					PR_RETURN = $af
=$af					PR_STANDARD_LAST = $af
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 0b 17	jsr $170b			jsr 	EXPEvalNumber
.1018	a2 08		ldx #$08			ldx 	#IFR0
.101a	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c ac 25	jmp $25ac		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1025	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1027	f0 14		beq $103d			beq 	_CLNoParam
.1029	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.102b	f0 10		beq $103d			beq 	_CLNoParam
.102d	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; address for CLEAR
.1030	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1032	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1034	b0 0b		bcs $1041			bcs 	_CLMemory
.1036	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1038	90 07		bcc $1041			bcc 	_CLMemory
.103a	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory.
.103d					_CLNoParam:
.103d	20 44 10	jsr $1044			jsr 	ClearCode
.1040	60		rts				rts
.1041					_CLMemory:
.1041	4c 46 26	jmp $2646		jmp	ErrorV_memory
.1044					ClearCode:
.1044	20 5a 1f	jsr $1f5a			jsr 	PGMEndProgram 				; end program => zTemp0
.1047	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1049	a5 23		lda $23				lda 	zTemp0+1
.104b	1a		inc a				inc 	a
.104c	85 29		sta $29				sta 	freeMemory+1
.104e	20 3d 2a	jsr $2a3d			jsr 	VARClearHashTables
.1051	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.1054	20 7a 27	jsr $277a			jsr 	StackReset
.1057	20 d9 27	jsr $27d9			jsr 	StringSystemInitialise
.105a	20 c1 24	jsr $24c1			jsr 	ScanProcedures
.105d	20 97 14	jsr $1497			jsr 	Command_RESTORE
.1060	60		rts				rts
.1061					AllocateMemory:
.1061	5a		phy				phy 								; save Y
.1062	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low
.1064	5a		phy				phy
.1065	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.1067	5a		phy				phy
.1068	a8		tay				tay 								; count is now in XY
.1069					_AllocateLoop:
.1069	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.106b	d0 04		bne $1071			bne 	_AllocateOne
.106d	c0 00		cpy #$00			cpy 	#0
.106f	f0 15		beq $1086			beq 	_AllocateExit
.1071					_AllocateOne:
.1071	a9 00		lda #$00			lda 	#0 							; zero byte
.1073	92 28		sta ($28)			sta 	(freeMemory)
.1075	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.1077	d0 05		bne $107e			bne 	_AllocateSkipCarry
.1079	e6 29		inc $29				inc 	freeMemory+1
.107b	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.107e					_AllocateSkipCarry:
.107e	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1080	d0 01		bne $1083			bne 	_AllocateSkipBorrow
.1082	ca		dex				dex
.1083					_AllocateSkipBorrow:
.1083	88		dey				dey
.1084	80 e3		bra $1069			bra 	_AllocateLoop
.1086					_AllocateExit:
.1086	fa		plx				plx 								; restore address
.1087	68		pla				pla
.1088	7a		ply				ply 								; restore Y
.1089	60		rts				rts
.108a					ClearCheckMemory:
.108a	a5 29		lda $29				lda 	freeMemory+1
.108c	1a		inc a				inc 	a
.108d	1a		inc a				inc 	a
.108e	cd 23 06	cmp $0623			cmp 	stringMemory+1
.1091	b0 01		bcs $1094			bcs  	_CCMError
.1093	60		rts				rts
.1094					_CCMError:
.1094	4c 46 26	jmp $2646		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1097					CommandDIM:
.1097	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1099	29 c0		and #$c0			and 	#$C0
.109b	c9 40		cmp #$40			cmp 	#$40
.109d	d0 39		bne $10d8			bne 	_CDSyntax
.109f	20 f4 29	jsr $29f4			jsr 	VARGetInfo 					; get information
.10a2	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.10a5	29 02		and #$02			and 	#2
.10a7	f0 2f		beq $10d8			beq 	_CDSyntax
.10a9	20 a6 29	jsr $29a6			jsr 	VARFind 					; does it already exist
.10ac	b0 2d		bcs $10db			bcs 	_CDExists
.10ae	20 52 29	jsr $2952			jsr 	VARCreate 					; create it - returns data ptr in XA
.10b1	da		phx				phx 								; save target address
.10b2	48		pha				pha
.10b3	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10b6	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b8	20 de 10	jsr $10de			jsr 	CreateArray 				; create array to XA
.10bb	84 24		sty $24				sty 	zTemp1 						; save Y
.10bd	7a		ply				ply 								; restore target to zTemp0
.10be	84 22		sty $22				sty 	zTemp0
.10c0	7a		ply				ply
.10c1	84 23		sty $23				sty 	zTemp0+1
.10c3	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10c5	a0 01		ldy #$01			ldy 	#1
.10c7	8a		txa				txa
.10c8	91 22		sta ($22),y			sta 	(zTemp0),y
.10ca	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10cc	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 				; check )
.10cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10d1	c8		iny				iny
.10d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10d4	f0 c1		beq $1097			beq 	CommandDIM
.10d6	88		dey				dey
.10d7	60		rts				rts
.10d8					_CDSyntax:
.10d8	4c 56 25	jmp $2556		jmp	ErrorV_syntax
.10db					_CDExists:
.10db	4c 1e 26	jmp $261e		jmp	ErrorV_redefine
.10de					CreateArray:
.10de	8d 03 05	sta $0503			sta 	CAType						; save type
.10e1	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10e4	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e8	f0 04		beq $10ee			beq 	_CATwoDimensions
.10ea	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ed	60		rts				rts
.10ee					_CATwoDimensions:
.10ee	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10f0	8d 05 05	sta $0505			sta 	CADim1+1
.10f3	a5 08		lda $08				lda 	IFR0+IM0
.10f5	8d 04 05	sta $0504			sta 	CADim1+0
.10f8	20 13 27	jsr $2713			jsr 	ERRCheckComma 				; check comma
.10fb	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10fe	5a		phy				phy 								; save Y position
.10ff	18		clc				clc 								; allocate the outer array of pointers.
.1100	ae 05 05	ldx $0505			ldx 	CADim1+1
.1103	ad 04 05	lda $0504			lda 	CADim1
.1106	20 79 11	jsr $1179			jsr 	CSAAllocate 				; allocate the outer array
.1109	da		phx				phx									; save this address on the stack
.110a	48		pha				pha
.110b	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.110d	85 26		sta $26				sta 	zTemp2
.110f					_CACreateSubLoop:
.110f	38		sec				sec
.1110	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create data array of required size.
.1113	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1115	91 26		sta ($26),y			sta 	(zTemp2),y
.1117	8a		txa				txa
.1118	c8		iny				iny
.1119	91 26		sta ($26),y			sta 	(zTemp2),y
.111b	18		clc				clc  								; next slot.
.111c	a5 26		lda $26				lda 	zTemp2
.111e	69 02		adc #$02			adc 	#2
.1120	85 26		sta $26				sta 	zTemp2
.1122	90 02		bcc $1126			bcc 	_CACNoCarry
.1124	e6 27		inc $27				inc 	zTemp2+1
.1126					_CACNoCarry:
.1126	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1129	d0 03		bne $112e			bne 	_CACNoBorrow
.112b	ce 05 05	dec $0505			dec 	CADim1+1
.112e					_CACNoBorrow:
.112e	ce 04 05	dec $0504			dec 	CADim1
.1131	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1134	10 d9		bpl $110f			bpl 	_CACreateSubLoop
.1136	68		pla				pla
.1137	fa		plx				plx
.1138	7a		ply				ply
.1139	60		rts				rts
.113a					CreateSingleArray:
.113a	5a		phy				phy
.113b	38		sec				sec 								; allocate memory block all zeros.
.113c	a5 08		lda $08				lda 	IFR0+IM0
.113e	a6 09		ldx $09				ldx 	IFR0+IM1
.1140	20 79 11	jsr $1179			jsr 	CSAAllocate
.1143	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1146	f0 2f		beq $1177			beq 	_CSANoInit
.1148	da		phx				phx 								; save address of new array
.1149	48		pha				pha
.114a	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.114c	86 23		stx $23				stx 	zTemp0+1
.114e	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1150	b1 22		lda ($22),y			lda 	(zTemp0),y
.1152	a8		tay				tay
.1153	b2 22		lda ($22)			lda 	(zTemp0)
.1155	aa		tax				tax
.1156					_CSAEraseString:
.1156	5a		phy				phy
.1157	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1159	a9 80		lda #$80			lda 	#$80
.115b	91 22		sta ($22),y			sta 	(zTemp0),y
.115d	7a		ply				ply
.115e	18		clc				clc 								; add 4 to next slot.
.115f	a5 22		lda $22				lda 	zTemp0
.1161	69 04		adc #$04			adc 	#4
.1163	85 22		sta $22				sta 	zTemp0
.1165	90 02		bcc $1169			bcc 	_CSAENoCarry
.1167	e6 23		inc $23				inc 	zTemp0+1
.1169					_CSAENoCarry:
.1169	e0 00		cpx #$00			cpx 	#0
.116b	d0 01		bne $116e			bne 	_CSANoBorrow
.116d	88		dey				dey
.116e					_CSANoBorrow:
.116e	ca		dex				dex
.116f	d0 e5		bne $1156			bne 	_CSAEraseString
.1171	c0 00		cpy #$00			cpy 	#0
.1173	d0 e1		bne $1156			bne 	_CSAEraseString
.1175	68		pla				pla
.1176	fa		plx				plx
.1177					_CSANoInit:
.1177	7a		ply				ply
.1178	60		rts				rts
.1179					CSAAllocate:
.1179	08		php				php 								; save type flag.
.117a	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.117b	d0 01		bne $117e			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.117d	e8		inx				inx
.117e					_CSAANoCarry:
.117e	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1180	b0 2e		bcs $11b0			bcs 	_CSARange
.1182	28		plp				plp 								; restore type flag
.1183	08		php				php 								; save it back again.
.1184	da		phx				phx 								; save size.
.1185	48		pha				pha
.1186	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1188	90 03		bcc $118d			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.118a	0a		asl a				asl 	a
.118b	26 23		rol $23				rol 	zTemp0+1
.118d					_CSAATimes2:
.118d	0a		asl a				asl 	a
.118e	26 23		rol $23				rol 	zTemp0+1
.1190	18		clc				clc
.1191	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1193	90 02		bcc $1197			bcc 	_CSAANoCarry2
.1195	e6 23		inc $23				inc 	zTemp0+1
.1197					_CSAANoCarry2:
.1197	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1199	20 61 10	jsr $1061			jsr 	AllocateMemory 				; allocate memory to XA
.119c	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.119e	85 22		sta $22				sta 	zTemp0
.11a0	68		pla				pla  								; write element count to first 2 bytes
.11a1	92 22		sta ($22)			sta 	(zTemp0)
.11a3	68		pla				pla 								; msb of element count
.11a4	28		plp				plp 								; CC if pointer array
.11a5	b0 02		bcs $11a9			bcs 	_CSAAIsData
.11a7	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a9					_CSAAIsData:
.11a9	a0 01		ldy #$01			ldy 	#1
.11ab	91 22		sta ($22),y			sta 	(zTemp0),y
.11ad	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11af	60		rts				rts
.11b0					_CSARange:
.11b0	4c 67 25	jmp $2567		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11b3					Command_Doke:
.11b3	38		sec				sec
.11b4	80 01		bra $11b7			bra 	DPCommon
.11b6					Command_Poke:
.11b6	18		clc				clc
.11b7					DPCommon:
.11b7	08		php				php 								; CS if DOKE
.11b8	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; address
.11bb	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11bd	48		pha				pha
.11be	a5 09		lda $09				lda 	IFR0+IM1
.11c0	48		pha				pha
.11c1	20 13 27	jsr $2713			jsr 	ERRCheckComma 				; [dp]oke address,data
.11c4	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16
.11c7	68		pla				pla 								; get address back
.11c8	85 23		sta $23				sta 	zTemp0+1
.11ca	68		pla				pla
.11cb	85 22		sta $22				sta 	zTemp0
.11cd	a5 08		lda $08				lda 	IFR0+IM0
.11cf	92 22		sta ($22)			sta 	(zTemp0)
.11d1	28		plp				plp
.11d2	90 08		bcc $11dc			bcc 	_DPExit
.11d4	5a		phy				phy
.11d5	a5 09		lda $09				lda 	IFR0+IM1
.11d7	a0 01		ldy #$01			ldy 	#1
.11d9	91 22		sta ($22),y			sta 	(zTemp0),y
.11db	7a		ply				ply
.11dc					_DPExit:
.11dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11dd					Command_GOTO:
.11dd	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; get line number
.11e0					GotoR0:
.11e0	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11e3	85 19		sta $19				sta 	codePtr+1
.11e5	64 18		stz $18				stz 	codePtr
.11e7					_GOSearch:
.11e7	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e9	f0 1f		beq $120a			beq 	_GOError
.11eb	a0 01		ldy #$01			ldy 	#1 							; found line #
.11ed	b1 18		lda ($18),y			lda 	(codePtr),y
.11ef	c5 08		cmp $08				cmp 	IFR0+IM0
.11f1	d0 0a		bne $11fd			bne 	_GONext
.11f3	c8		iny				iny
.11f4	b1 18		lda ($18),y			lda 	(codePtr),y
.11f6	c5 09		cmp $09				cmp 	IFR0+IM1
.11f8	d0 03		bne $11fd			bne 	_GONext
.11fa	4c dc 14	jmp $14dc			jmp 	RUNNewLine
.11fd					_GONext:
.11fd	18		clc				clc 								; advance to next line.
.11fe	b2 18		lda ($18)			lda 	(codePtr)
.1200	65 18		adc $18				adc 	codePtr
.1202	85 18		sta $18				sta 	codePtr
.1204	90 e1		bcc $11e7			bcc 	_GOSearch
.1206	e6 19		inc $19				inc 	codePtr+1
.1208	80 dd		bra $11e7			bra 	_GOSearch
.120a					_GOError:
.120a	4c eb 26	jmp $26eb		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.120d					Command_Input:
.120d	a9 ff		lda #$ff			lda 	#$FF
.120f	8d 06 05	sta $0506			sta 	InputFlag
.1212	80 03		bra $1217			bra 	Command_IP_Main
.1214					Command_Print:
.1214	9c 06 05	stz $0506			stz 	InputFlag
.1217					Command_IP_Main:
.1217	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1218					_CPLoop:
.1218	08		php				php 								; save last action flag
.1219	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.121b	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.121d	f0 4e		beq $126d			beq 	_CPExit 					; without consuming
.121f	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1221	f0 4a		beq $126d			beq 	_CPExit
.1223	68		pla				pla 								; throw last action flag
.1224	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.1226	c8		iny				iny
.1227	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1229	f0 3f		beq $126a			beq 	_CPContinueWithSameLine
.122b	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.122d	f0 36		beq $1265			beq 	_CPTab
.122f	88		dey				dey 								; undo the get.
.1230	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.1233	10 0b		bpl $1240			bpl	 	_CPNotInput
.1235	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1237	c9 40		cmp #$40			cmp 	#$40
.1239	d0 05		bne $1240			bne 	_CPNotInput
.123b	20 76 12	jsr $1276			jsr 	_CPInputCode 				; input code
.123e	80 d7		bra $1217			bra 	Command_IP_Main 			; and go round again.
.1240					_CPNotInput:
.1240	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1243	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1245	10 14		bpl $125b			bpl 	_CPNumber
.1247	5a		phy				phy
.1248	18		clc				clc 								; string address to YX
.1249	a5 08		lda $08				lda 	IFR0+IM0
.124b	aa		tax				tax
.124c	a5 09		lda $09				lda 	IFR0+IM1
.124e	a8		tay				tay
.124f	e8		inx				inx 								; point to 1st character
.1250	d0 01		bne $1253			bne 	_CPNoCarry
.1252	c8		iny				iny
.1253					_CPNoCarry:
.1253	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.1255	20 aa 12	jsr $12aa			jsr 	CPPrintAYX 					; print AYX
.1258	7a		ply				ply
.1259	80 bc		bra $1217			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.125b					_CPNumber:
.125b	5a		phy				phy
.125c	20 b0 2e	jsr $2eb0			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.125f	20 aa 12	jsr $12aa			jsr 	CPPrintAYX 					; print AYX
.1262	7a		ply				ply
.1263	80 b2		bra $1217			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1265					_CPTab:
.1265	a9 09		lda #$09			lda 	#9 							; print TAB
.1267	20 c0 12	jsr $12c0			jsr 	CPPrintA
.126a					_CPContinueWithSameLine:
.126a	38		sec				sec 								; loop round with carry set, which
.126b	80 ab		bra $1218			bra 	_CPLoop 					; will inhibit final CR
.126d					_CPExit:
.126d	28		plp				plp 								; get last action flag
.126e	b0 05		bcs $1275			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1270	a9 0d		lda #$0d			lda 	#13 						; print new line
.1272	20 c0 12	jsr $12c0			jsr 	CPPrintA
.1275					_CPExit2:
.1275	60		rts				rts
.1276					_CPInputCode:
.1276	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get the term.
.1279	5a		phy				phy 								; save position
.127a	20 bd 12	jsr $12bd			jsr 	CPInputA					; input a line to YX
.127d	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.127f	30 18		bmi $1299			bmi 	_CPInputString
.1281	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.1283	48		pha				pha
.1284	a5 09		lda $09				lda 	IFR0+IM1
.1286	48		pha				pha
.1287	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1289	84 23		sty $23				sty 	zTemp0+1
.128b	20 75 1a	jsr $1a75			jsr 	VALConversionZTemp0
.128e	68		pla				pla 								; do the assign.
.128f	85 23		sta $23				sta 	zTemp0+1
.1291	68		pla				pla
.1292	85 22		sta $22				sta 	zTemp0
.1294	20 e8 12	jsr $12e8			jsr 	AssignNumber
.1297	7a		ply				ply
.1298	60		rts				rts
.1299					_CPInputString:
.1299	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.129b	85 22		sta $22				sta 	zTemp0
.129d	a5 09		lda $09				lda 	IFR0+IM1
.129f	85 23		sta $23				sta 	zTemp0+1
.12a1	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.12a3	84 09		sty $09				sty 	IFR0+IM1
.12a5	20 ff 12	jsr $12ff			jsr 	AssignString 				; assign the string
.12a8	7a		ply				ply 								; exit
.12a9	60		rts				rts
.12aa					CPPrintAYX:
.12aa	86 22		stx $22				stx 	zTemp0
.12ac	84 23		sty $23				sty 	zTemp0+1
.12ae	aa		tax				tax
.12af	f0 0b		beq $12bc			beq 	_CPPrintExit
.12b1	a0 00		ldy #$00			ldy 	#0
.12b3					_CPPrintAYXLoop:
.12b3	b1 22		lda ($22),y			lda 	(zTemp0),y
.12b5	20 c0 12	jsr $12c0			jsr 	CPPrintA
.12b8	c8		iny				iny
.12b9	ca		dex				dex
.12ba	d0 f7		bne $12b3			bne 	_CPPrintAYXLoop
.12bc					_CPPrintExit:
.12bc	60		rts				rts
.12bd					CPInputA:
.12bd	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.12c0					CPPrintA:
.12c0	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12c3					CommandLET:
.12c3	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term
.12c6	90 6f		bcc $1337			bcc 	CLError 					; must be a reference term.
.12c8	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12ca	48		pha				pha
.12cb	a5 09		lda $09				lda 	IFR0+IM1
.12cd	48		pha				pha
.12ce	a5 0b		lda $0b				lda 	IFR0+IExp
.12d0	48		pha				pha
.12d1	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12d3	20 1b 27	jsr $271b			jsr 	ERRCheckA
.12d6	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; right hand side.
.12d9	68		pla				pla 								; type of l-expr
.12da	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12dc	30 5c		bmi $133a			bmi 	CLType
.12de	fa		plx				plx 	 							; pop target address to zTemp0
.12df	86 23		stx $23				stx 	zTemp0+1
.12e1	fa		plx				plx
.12e2	86 22		stx $22				stx 	zTemp0
.12e4					AssignData:
.12e4	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12e6	30 17		bmi $12ff			bmi 	AssignString
.12e8					AssignNumber:
.12e8	5a		phy				phy
.12e9	a0 03		ldy #$03			ldy 	#3
.12eb	a5 0b		lda $0b				lda 	IFR0+IExp
.12ed	91 22		sta ($22),y			sta 	(zTemp0),y
.12ef	88		dey				dey
.12f0	a5 0a		lda $0a				lda 	IFR0+IM2
.12f2	91 22		sta ($22),y			sta 	(zTemp0),y
.12f4	88		dey				dey
.12f5	a5 09		lda $09				lda 	IFR0+IM1
.12f7	91 22		sta ($22),y			sta 	(zTemp0),y
.12f9	a5 08		lda $08				lda 	IFR0+IM0
.12fb	92 22		sta ($22)			sta 	(zTemp0)
.12fd	7a		ply				ply
.12fe	60		rts				rts
.12ff					AssignString:
.12ff	5a		phy				phy
.1300	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1302	b1 22		lda ($22),y			lda 	(zTemp0),y
.1304	12 22		ora ($22)			ora 	(zTemp0)
.1306	f0 23		beq $132b			beq 	_CLConcreteString
.1308	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.130a	85 24		sta $24				sta 	zTemp1
.130c	b1 22		lda ($22),y			lda 	(zTemp0),y
.130e	85 25		sta $25				sta 	zTemp1+1
.1310	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.1312	38		sec				sec 								; we want 3 for slot size, status, string size.
.1313	e9 03		sbc #$03			sbc 	#3
.1315	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1317	90 12		bcc $132b			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1319	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.131b	1a		inc a				inc 	a
.131c	aa		tax				tax
.131d	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.131f					_CLReplaceString:
.131f	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1321	c8		iny				iny
.1322	c8		iny				iny
.1323	91 24		sta ($24),y			sta 	(zTemp1),y
.1325	88		dey				dey
.1326	ca		dex				dex
.1327	d0 f6		bne $131f			bne 	_CLReplaceString
.1329	80 0a		bra $1335			bra 	_CLExit
.132b					_CLConcreteString:
.132b	20 8e 27	jsr $278e			jsr 	StringConcrete  			; concreted string in XA.
.132e	a0 01		ldy #$01			ldy 	#1 							; store the address
.1330	92 22		sta ($22)			sta 	(zTemp0)
.1332	8a		txa				txa
.1333	91 22		sta ($22),y			sta 	(zTemp0),y
.1335					_CLExit:
.1335	7a		ply				ply
.1336	60		rts				rts
.1337					CLError:
.1337	4c 89 26	jmp $2689		jmp	ErrorV_variable
.133a					CLType:
.133a	4c 86 25	jmp $2586		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.133d					Command_LIST:
.133d	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1340	9c 08 05	stz $0508			stz 	CLFrom+1
.1343	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1345	c9 99		cmp #$99			cmp 	#PR_COMMA
.1347	f0 1d		beq $1366			beq 	_CLToLine
.1349	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.134b	f0 37		beq $1384			beq 	_CLDefaultTo
.134d	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1350	a5 08		lda $08				lda 	IFR0+IM0
.1352	8d 07 05	sta $0507			sta 	CLFrom
.1355	8d 09 05	sta $0509			sta 	CLTo
.1358	a5 09		lda $09				lda 	IFR0+IM1
.135a	8d 08 05	sta $0508			sta 	CLFrom+1
.135d	8d 0a 05	sta $050a			sta 	CLTo+1
.1360	b1 18		lda ($18),y			lda 	(codePtr),y
.1362	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1364	f0 26		beq $138c			beq 	_CLList
.1366					_CLToLine:
.1366	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1368	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.136a	f0 18		beq $1384			beq 	_CLDefaultTo
.136c	20 13 27	jsr $2713			jsr 	ERRCheckComma 				; sep comma
.136f	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1371	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1373	f0 0f		beq $1384			beq 	_CLDefaultTo
.1375	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; there's a To value.
.1378	a5 08		lda $08				lda 	IFR0+IM0
.137a	8d 09 05	sta $0509			sta 	CLTo
.137d	a5 09		lda $09				lda 	IFR0+IM1
.137f	8d 0a 05	sta $050a			sta 	CLTo+1
.1382	80 08		bra $138c			bra 	_CLList
.1384					_CLDefaultTo:
.1384	a9 ff		lda #$ff			lda 	#$FF
.1386	8d 09 05	sta $0509			sta 	CLTo
.1389	8d 0a 05	sta $050a			sta 	CLTo+1
.138c					_CLList:
.138c	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.138f	85 19		sta $19				sta 	codePtr+1
.1391	64 18		stz $18				stz 	codePtr
.1393	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1395	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1397	20 a9 1d	jsr $1da9			jsr 	TOKSetDetokeniseOutput
.139a					_CLLoop:
.139a	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.139c	f0 4a		beq $13e8			beq 	_CLExit
.139e	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.13a1	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.13a4	d0 45		bne $13eb			bne 	_CLBreak
.13a6	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13a8	20 ee 13	jsr $13ee			jsr 	_CLCompareLine
.13ab	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13ad	f0 2c		beq $13db			beq 	_CLNext
.13af	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13b1	20 ee 13	jsr $13ee			jsr 	_CLCompareLine
.13b4	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13b6	f0 23		beq $13db			beq 	_CLNext
.13b8	a0 02		ldy #$02			ldy 	#2 							; print line #
.13ba	b1 18		lda ($18),y			lda 	(codePtr),y
.13bc	aa		tax				tax
.13bd	88		dey				dey
.13be	b1 18		lda ($18),y			lda 	(codePtr),y
.13c0	20 6c 28	jsr $286c			jsr 	WriteIntXA
.13c3	a9 20		lda #$20			lda 	#32
.13c5	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13c8	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13ca	a5 18		lda $18				lda 	codePtr
.13cc	18		clc				clc
.13cd	69 03		adc #$03			adc 	#3
.13cf	aa		tax				tax
.13d0	90 01		bcc $13d3			bcc 	_CLNoCarry2
.13d2	c8		iny				iny
.13d3					_CLNoCarry2:
.13d3	20 64 1d	jsr $1d64			jsr 	TOKDetokenise
.13d6	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d8	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13db					_CLNext:
.13db	18		clc				clc 								; advance to next line.
.13dc	b2 18		lda ($18)			lda 	(codePtr)
.13de	65 18		adc $18				adc 	codePtr
.13e0	85 18		sta $18				sta 	codePtr
.13e2	90 02		bcc $13e6			bcc 	_CLNoCarry
.13e4	e6 19		inc $19				inc 	codePtr+1
.13e6					_CLNoCarry:
.13e6	80 b2		bra $139a			bra 	_CLLoop
.13e8					_CLExit:
.13e8	4c 8b 28	jmp $288b			jmp 	WarmStart
.13eb					_CLBreak:
.13eb	4c e1 26	jmp $26e1		jmp	ErrorV_break
.13ee					_CLCompareLine:
.13ee	a0 01		ldy #$01			ldy 	#1
.13f0	38		sec				sec
.13f1	b1 18		lda ($18),y			lda 	(codePtr),y
.13f3	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f6	85 22		sta $22				sta 	zTemp0
.13f8	c8		iny				iny
.13f9	b1 18		lda ($18),y			lda 	(codePtr),y
.13fb	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13fe	90 0a		bcc $140a			bcc 	_CLIsNegative
.1400	d0 05		bne $1407			bne 	_CLIsPositive
.1402	a5 22		lda $22				lda 	zTemp0
.1404	d0 01		bne $1407			bne 	_CLIsPositive
.1406	60		rts				rts
.1407					_CLIsPositive:
.1407	a9 01		lda #$01			lda 	#1
.1409	60		rts				rts
.140a					_CLIsNegative:
.140a	a9 ff		lda #$ff			lda 	#255
.140c	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.140d					Command_NEW:
.140d	20 4e 1f	jsr $1f4e			jsr 	PGMNewProgram
.1410	20 44 10	jsr $1044			jsr 	ClearCode
.1413	4c 30 15	jmp $1530			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1416					Command_READ:
.1416	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term to R0
.1419	90 35		bcc $1450			bcc 	_CRSyntax 					; fail if not a reference.
.141b	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.141d	48		pha				pha
.141e	a5 09		lda $09				lda 	IFR0+IM1
.1420	48		pha				pha
.1421	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1423	48		pha				pha
.1424	20 a9 14	jsr $14a9			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1427	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.142a	d0 27		bne $1453			bne 	_CRHaveData  				; forward for the next one.
.142c					_CRNextLine:
.142c	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.142e	f0 1a		beq $144a			beq 	_CRNoData
.1430					_CRKeepSearching:
.1430	a9 ab		lda #$ab			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1432	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1434	20 66 24	jsr $2466			jsr 	ScanForward
.1437	c9 ab		cmp #$ab			cmp 	#PR_DATA 					; found data ?
.1439	f0 18		beq $1453			beq 	_CRHaveData 				; found it
.143b	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.143d	18		clc				clc 								; try the next line, keep going.
.143e	b2 18		lda ($18)			lda 	(codePtr)
.1440	65 18		adc $18				adc 	codePtr
.1442	85 18		sta $18				sta 	codePtr
.1444	90 e6		bcc $142c			bcc 	_CRNextLine
.1446	e6 19		inc $19				inc 	codePtr+1
.1448	80 e2		bra $142c			bra 	_CRNextLine
.144a					_CRNoData:
.144a	4c 0e 26	jmp $260e		jmp	ErrorV_data
.144d					_CLType:
.144d	4c 86 25	jmp $2586		jmp	ErrorV_type
.1450					_CRSyntax:
.1450	4c 56 25	jmp $2556		jmp	ErrorV_syntax
.1453					_CRHaveData:
.1453	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1456	68		pla				pla 								; type of l-expr
.1457	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1459	30 f2		bmi $144d			bmi 	_CLType
.145b	68		pla				pla 								; restore address
.145c	85 23		sta $23				sta 	zTemp0+1
.145e	68		pla				pla
.145f	85 22		sta $22				sta 	zTemp0
.1461	20 e4 12	jsr $12e4			jsr 	AssignData 					; write R0 there.
.1464	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1467	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1469	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.146b	d0 04		bne $1471			bne 	_CRSwapBack
.146d	c8		iny				iny 								; consume comma
.146e	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.1471					_CRSwapBack:
.1471	20 a9 14	jsr $14a9			jsr 	SwapCodeDataPointers		; swap them back.
.1474	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1476	c8		iny				iny
.1477	c9 99		cmp #$99			cmp 	#PR_COMMA
.1479	f0 9b		beq $1416			beq 	Command_READ 				; if so go round again.
.147b	88		dey				dey 								; unpick get.
.147c	60		rts				rts
.147d					Command_DATA:
.147d	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.147f	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1481	20 66 24	jsr $2466			jsr 	ScanForward
.1484	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1486	d0 01		bne $1489			bne 	_CDNotEOL
.1488	88		dey				dey
.1489					_CDNotEOL:
.1489	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.148a					Command_REM:
.148a					Command_REM2:
.148a	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.148c	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.148e	d0 06		bne $1496			bne 	_CRExit
.1490	c8		iny				iny 								; skip over it, it's a comment.
.1491	98		tya				tya
.1492	38		sec				sec
.1493	71 18		adc ($18),y			adc 	(codePtr),y
.1495	a8		tay				tay
.1496					_CRExit:
.1496	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1497					S
.1497					Command_RESTORE:
.1497	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.149a	8d 0c 05	sta $050c			sta 	dataPtr+1
.149d	9c 0b 05	stz $050b			stz 	dataPtr
.14a0	a9 03		lda #$03			lda 	#3 							; position start of line
.14a2	8d 0d 05	sta $050d			sta 	dataPos
.14a5	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14a8	60		rts				rts
.14a9					SwapCodeDataPointers:
.14a9	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14ac	a6 18		ldx $18				ldx 	codePtr
.14ae	85 18		sta $18				sta 	codePtr
.14b0	8e 0b 05	stx $050b			stx 	dataPtr
.14b3	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14b6	a6 19		ldx $19				ldx 	codePtr+1
.14b8	85 19		sta $19				sta 	codePtr+1
.14ba	8e 0c 05	stx $050c			stx 	dataPtr+1
.14bd	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14c0	8c 0d 05	sty $050d			sty 	dataPos
.14c3	a8		tay				tay
.14c4	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c5					Command_RUN:
.14c5	20 44 10	jsr $1044			jsr 	ClearCode					; clear everything out.
.14c8	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14cb	85 19		sta $19				sta 	codePtr+1
.14cd	64 18		stz $18				stz 	codePtr
.14cf	80 0b		bra $14dc			bra 	RUNNewLine
.14d1					RUNEndOfLine:
.14d1	18		clc				clc 								; advance to next line.
.14d2	b2 18		lda ($18)			lda 	(codePtr)
.14d4	65 18		adc $18				adc 	codePtr
.14d6	85 18		sta $18				sta 	codePtr
.14d8	90 02		bcc $14dc			bcc 	_RELNoCarry
.14da	e6 19		inc $19				inc 	codePtr+1
.14dc					_RELNoCarry:
.14dc					RUNNewLine:
.14dc	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14de	9a		txs				txs
.14df	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14e1	f0 4d		beq $1530			beq 	Command_END
.14e3	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e5	b1 18		lda ($18),y			lda 	(codePtr),y
.14e7	8d 26 06	sta $0626			sta 	ERRLine
.14ea	c8		iny				iny
.14eb	b1 18		lda ($18),y			lda 	(codePtr),y
.14ed	8d 27 06	sta $0627			sta 	ERRLine+1
.14f0	c8		iny				iny 								; offset into codePtr for start of line.
.14f1					RUNNewCommand:
.14f1	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14f4	ce 10 05	dec $0510			dec 	checkCounter
.14f7	d0 0a		bne $1503			bne 	_RNCNoCheck
.14f9	5a		phy				phy 								; keyboard check.
.14fa	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.14fd	7a		ply				ply
.14fe	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.1501	d0 1e		bne $1521			bne 	_RUNBreak
.1503					_RNCNoCheck:
.1503	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1505	10 1d		bpl $1524			bpl		_RUNNotToken 				; probably an identifier
.1507	c8		iny				iny 								; consume token
.1508	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.150a	f0 e5		beq $14f1			beq 	RUNNewCommand
.150c	c9 b0		cmp #$b0			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.150e	b0 0e		bcs $151e			bcs 	_RUNSyntax
.1510	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1512	90 0a		bcc $151e			bcc 	_RUNSyntax
.1514	0a		asl a				asl 	a 							; double into X.
.1515	aa		tax				tax
.1516	20 1b 15	jsr $151b			jsr 	_RUNDispatchMain			; call the main dispatcher
.1519	80 d6		bra $14f1			bra 	RUNNewCommand
.151b					_RUNDispatchMain:
.151b	7c 64 1c	jmp ($1c64,x)			jmp 	(VectorTable,x)
.151e					_RUNSyntax:
.151e	4c 56 25	jmp $2556		jmp	ErrorV_syntax
.1521					_RUNBreak:
.1521	4c e1 26	jmp $26e1		jmp	ErrorV_break
.1524					_RUNNotToken:
.1524	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1526	90 f6		bcc $151e			bcc 	_RUNSyntax
.1528	20 c3 12	jsr $12c3			jsr 	CommandLET 					; assignment
.152b	80 c4		bra $14f1			bra 	RUNNewCommand 				; loop round.
.152d					Command_Shift_Handler:
.152d	4c 98 25	jmp $2598		jmp	ErrorV_unimplemented
.1530					Command_END:
.1530	4c 8b 28	jmp $288b			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.1533					Command_STOP:
.1533	4c fa 25	jmp $25fa		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1536					Command_Sys:
.1536	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; execution address
.1539	5a		phy				phy
.153a	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.153d	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1540	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.1543	20 48 15	jsr $1548			jsr 	_CSCallIFR0 				; call the code
.1546	7a		ply				ply
.1547	60		rts				rts
.1548					_CSCallIFR0:
.1548	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.154b					NoExec01:
.154b					NoExec02:
.154b					NoExec03:
.154b					NoExec04:
.154b					NoExec05:
.154b					NoExec06:
.154b					NoExec07:
.154b					NoExec08:
.154b	4c 56 25	jmp $2556		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.154e					EXPBinAdd:
.154e	24 0b		bit $0b				bit 	IFR0+IExp
.1550	30 6f		bmi $15c1			bmi 	EXPConcatenate
.1552	a2 0c		ldx #$0c			ldx 	#IFR1
.1554	4c a9 2a	jmp $2aa9			jmp 	IFloatAdd
.1557					EXPBinSub:
.1557	24 0b		bit $0b				bit 	IFR0+IExp
.1559	30 3f		bmi $159a			bmi 	EXPTypeError
.155b	a2 0c		ldx #$0c			ldx 	#IFR1
.155d	4c a2 2a	jmp $2aa2			jmp 	IFloatSubtract
.1560					EXPBinMul:
.1560	24 0b		bit $0b				bit 	IFR0+IExp
.1562	30 36		bmi $159a			bmi 	EXPTypeError
.1564	a2 0c		ldx #$0c			ldx 	#IFR1
.1566	4c 53 2b	jmp $2b53			jmp 	IFloatMultiply
.1569					EXPBinFDiv:
.1569	24 0b		bit $0b				bit 	IFR0+IExp
.156b	30 2d		bmi $159a			bmi 	EXPTypeError
.156d	a2 0c		ldx #$0c			ldx 	#IFR1
.156f	20 d6 2d	jsr $2dd6			jsr 	IFloatDivideFloat
.1572	b0 0f		bcs $1583			bcs 	EXPDZero
.1574	60		rts				rts
.1575					EXPBinIDiv:
.1575	24 0b		bit $0b				bit 	IFR0+IExp
.1577	30 21		bmi $159a			bmi 	EXPTypeError
.1579	a2 0c		ldx #$0c			ldx 	#IFR1
.157b	20 d6 2d	jsr $2dd6			jsr 	IFloatDivideFloat
.157e	b0 03		bcs $1583			bcs 	EXPDZero
.1580	4c b3 2d	jmp $2db3			jmp 	IFloatIntegerR0
.1583					EXPDZero:
.1583	4c cf 25	jmp $25cf		jmp	ErrorV_divzero
.1586					EXPBinIMod:
.1586	24 0b		bit $0b				bit 	IFR0+IExp
.1588	30 10		bmi $159a			bmi 	EXPTypeError
.158a	a2 0c		ldx #$0c			ldx 	#IFR1
.158c	5a		phy				phy
.158d	20 eb 2c	jsr $2ceb			jsr 	IFPreProcessBitwise 		; set up everything.
.1590	d0 05		bne $1597			bne 	EXPDRange
.1592	20 24 2c	jsr $2c24			jsr 	IFloatModulusInteger
.1595	7a		ply				ply
.1596	60		rts				rts
.1597					EXPDRange:
.1597	4c 67 25	jmp $2567		jmp	ErrorV_range
.159a					EXPTypeError:
.159a	4c 86 25	jmp $2586		jmp	ErrorV_type
.159d					EXPBinAnd:
.159d	24 0b		bit $0b				bit 	IFR0+IExp
.159f	30 f9		bmi $159a			bmi 	EXPTypeError
.15a1	a2 0c		ldx #$0c			ldx 	#IFR1
.15a3	20 a6 2c	jsr $2ca6			jsr 	IFloatBitwiseAnd
.15a6	b0 ef		bcs $1597			bcs 	EXPDRange
.15a8	60		rts				rts
.15a9					EXPBinOr:
.15a9	24 0b		bit $0b				bit 	IFR0+IExp
.15ab	30 ed		bmi $159a			bmi 	EXPTypeError
.15ad	a2 0c		ldx #$0c			ldx 	#IFR1
.15af	20 bd 2c	jsr $2cbd			jsr 	IFloatBitwiseOr
.15b2	b0 e3		bcs $1597			bcs 	EXPDRange
.15b4	60		rts				rts
.15b5					EXPBinXor:
.15b5	24 0b		bit $0b				bit 	IFR0+IExp
.15b7	30 e1		bmi $159a			bmi 	EXPTypeError
.15b9	a2 0c		ldx #$0c			ldx 	#IFR1
.15bb	20 d4 2c	jsr $2cd4			jsr 	IFloatBitwiseXor
.15be	b0 d7		bcs $1597			bcs 	EXPDRange
.15c0	60		rts				rts
.15c1					EXPConcatenate:
.15c1	18		clc				clc
.15c2	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15c4	72 0c		adc ($0c)			adc 	(IFR1)
.15c6	b0 2d		bcs $15f5			bcs 	_EXPCError
.15c8	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15ca	da		phx				phx
.15cb	a6 09		ldx $09				ldx 	IFR0+1
.15cd	da		phx				phx
.15ce	20 01 28	jsr $2801			jsr 	StringTempAllocate 			; allocate string, set up return
.15d1	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15d3	a5 0c		lda $0c				lda 	IFR1
.15d5	20 de 15	jsr $15de			jsr 	_EXPCCopyXA
.15d8	fa		plx				plx 								; copy second string
.15d9	68		pla				pla
.15da	20 de 15	jsr $15de			jsr 	_EXPCCopyXA
.15dd	60		rts				rts
.15de					_EXPCCopyXA:
.15de	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15e0	85 22		sta $22				sta 	zTemp0
.15e2	b2 22		lda ($22)			lda 	(zTemp0)					; length
.15e4	f0 0e		beq $15f4			beq 	_EXPCCExit 					; nothing.
.15e6	aa		tax				tax 								; count
.15e7	5a		phy				phy 								; start positioin
.15e8	a0 01		ldy #$01			ldy 	#1
.15ea					_EXPCCLoop:
.15ea	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15ec	20 36 28	jsr $2836			jsr 	StringTempWrite
.15ef	c8		iny				iny
.15f0	ca		dex				dex
.15f1	d0 f7		bne $15ea			bne 	_EXPCCLoop
.15f3	7a		ply				ply
.15f4					_EXPCCExit:
.15f4	60		rts				rts
.15f5					_EXPCError:
.15f5	4c 73 26	jmp $2673		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15f8					EXPReturnTrue:
.15f8	a2 08		ldx #$08			ldx 	#IFR0
.15fa	a9 01		lda #$01			lda 	#1
.15fc	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.15ff	20 be 30	jsr $30be			jsr 	IFloatNegate
.1602	60		rts				rts
.1603					EXPReturnFalse:
.1603	a2 08		ldx #$08			ldx 	#IFR0
.1605	4c b3 30	jmp $30b3			jmp 	IFloatSetZero
.1608					EXPCompareEqual:
.1608	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.160b	c9 00		cmp #$00			cmp 	#0
.160d	f0 e9		beq $15f8			beq 	EXPReturnTrue
.160f	80 f2		bra $1603			bra 	EXPReturnFalse
.1611					EXPCompareLess:
.1611	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1614	c9 ff		cmp #$ff			cmp 	#$FF
.1616	f0 e0		beq $15f8			beq 	EXPReturnTrue
.1618	80 e9		bra $1603			bra 	EXPReturnFalse
.161a					EXPCompareGreater:
.161a	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.161d	c9 01		cmp #$01			cmp 	#1
.161f	f0 d7		beq $15f8			beq 	EXPReturnTrue
.1621	80 e0		bra $1603			bra 	EXPReturnFalse
.1623					EXPCompareNotEqual:
.1623	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1626	c9 00		cmp #$00			cmp 	#0
.1628	d0 ce		bne $15f8			bne 	EXPReturnTrue
.162a	80 d7		bra $1603			bra 	EXPReturnFalse
.162c					EXPCompareLessEqual:
.162c	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.162f	c9 01		cmp #$01			cmp 	#1
.1631	d0 c5		bne $15f8			bne 	EXPReturnTrue
.1633	80 ce		bra $1603			bra 	EXPReturnFalse
.1635					EXPCompareGreaterEqual:
.1635	20 3e 16	jsr $163e			jsr 	EXPCompareBaseCode
.1638	c9 ff		cmp #$ff			cmp 	#$FF
.163a	d0 bc		bne $15f8			bne 	EXPReturnTrue
.163c	80 c5		bra $1603			bra 	EXPReturnFalse
.163e					EXPCompareBaseCode:
.163e	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1640	30 10		bmi $1652			bmi 	_EXCBCString
.1642	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.1644	20 81 2d	jsr $2d81			jsr 	IFloatCompare
.1647	a5 08		lda $08				lda 	IFR0+IM0
.1649	f0 06		beq $1651			beq 	_EXCBCExit 					; return 0 if zero
.164b	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.164d	50 02		bvc $1651			bvc 	_EXCBCExit
.164f	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1651					_EXCBCExit:
.1651	60		rts				rts
.1652					_EXCBCString:
.1652	5a		phy				phy
.1653	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1655	d2 0c		cmp ($0c)			cmp 	(IFR1)
.1657	90 02		bcc $165b			bcc 	_EXCBCSmaller
.1659	b2 0c		lda ($0c)			lda 	(IFR1)
.165b					_EXCBCSmaller:
.165b	aa		tax				tax
.165c	f0 0d		beq $166b			beq 	_EXCBCMatches 				; if zero common length matches
.165e	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1660					_EXCBCCheckSmallerMatches:
.1660	c8		iny				iny 								; compare directly as far as common length
.1661	38		sec				sec
.1662	b1 0c		lda ($0c),y			lda 	(IFR1),y
.1664	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1666	d0 08		bne $1670			bne 	_EXCBCExit2
.1668	ca		dex				dex
.1669	d0 f5		bne $1660			bne 	_EXCBCCheckSmallerMatches
.166b					_EXCBCMatches:
.166b	38		sec				sec
.166c	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.166e	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1670					_EXCBCExit2:
.1670	7a		ply				ply
.1671	c9 00		cmp #$00			cmp 	#0
.1673	f0 04		beq $1679			beq 	_EXCBCReturn
.1675	30 03		bmi $167a			bmi 	_EXCBCFF
.1677	a9 01		lda #$01			lda 	#1
.1679					_EXCBCReturn:
.1679	60		rts				rts
.167a					_EXCBCFF:
.167a	a9 ff		lda #$ff			lda 	#$FF
.167c	60		rts				rts
.167d					_EXCBCRange:
.167d	4c 67 25	jmp $2567		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1680					EXPBinLeft:
.1680	a9 ff		lda #$ff			lda 	#$FF
.1682	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.1685	4c 8b 16	jmp $168b			jmp 	EXPShiftCommon
.1688					EXPBinRight:
.1688	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.168b					EXPShiftCommon:
.168b	a5 0b		lda $0b				lda 	IFR0+IExp 					; both integers
.168d	05 0f		ora $0f				ora 	IFR1+IExp
.168f	29 7f		and #$7f			and 	#$7F
.1691	d0 35		bne $16c8			bne 	_EXPSRange
.1693	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1695	29 e0		and #$e0			and 	#$E0
.1697	05 09		ora $09				ora 	IFR0+IM1
.1699	05 0a		ora $0a				ora 	IFR0+IM2
.169b	d0 25		bne $16c2			bne 	_EXPSShiftZero 				; if so return zero
.169d	5a		phy				phy
.169e	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16a0	29 1f		and #$1f			and 	#$1F
.16a2	f0 17		beq $16bb			beq 	_EXPSExit 					; exit if zero
.16a4	a8		tay				tay
.16a5					_EXPSLoop:
.16a5	a2 0c		ldx #$0c			ldx 	#IFR1
.16a7	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16aa	30 05		bmi $16b1			bmi 	_EXPSShiftLeft
.16ac	20 e2 30	jsr $30e2			jsr 	IFloatShiftRight
.16af	80 07		bra $16b8			bra 	_EXPSContinue
.16b1					_EXPSShiftLeft:
.16b1	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.16b4	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts
.16b6	30 10		bmi $16c8			bmi 	_EXPSRange
.16b8					_EXPSContinue:
.16b8	88		dey				dey
.16b9	d0 ea		bne $16a5			bne 	_EXPSLoop
.16bb					_EXPSExit:
.16bb	a2 0c		ldx #$0c			ldx 	#IFR1
.16bd	20 44 30	jsr $3044			jsr 	IFloatCopyFromRegister
.16c0	7a		ply				ply
.16c1	60		rts				rts
.16c2					_EXPSShiftZero:
.16c2	a2 08		ldx #$08			ldx 	#IFR0
.16c4	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.16c7	60		rts				rts
.16c8					_EXPSRange:
.16c8	4c 67 25	jmp $2567		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16cb					EXPEvaluateExpression:
.16cb	a9 00		lda #$00			lda 	#0 							; current precedence
.16cd					EXPEvaluateExpressionPrecedenceA:
.16cd	48		pha				pha
.16ce	20 48 17	jsr $1748			jsr 	EXPTermValueR0				; do first term.
.16d1					_EELoop:
.16d1	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16d3	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16d5	90 31		bcc $1708			bcc 	_EEExit
.16d7	aa		tax				tax 								; access the precedence of the operator.
.16d8	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16d9	dd 9e 19	cmp $199e,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16dc	b0 2b		bcs $1709			bcs 	_EEExit2
.16de	48		pha				pha 								; save current precedence.
.16df	da		phx				phx 								; save operator
.16e0	c8		iny				iny 								; consume operator
.16e1	da		phx				phx
.16e2	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16e4	20 02 30	jsr $3002			jsr 	IFloatPushRx
.16e7	fa		plx				plx
.16e8	bd 9e 19	lda $199e,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16eb	20 cd 16	jsr $16cd			jsr 	EXPEvaluateExpressionPrecedenceA
.16ee	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16f0	20 23 30	jsr $3023			jsr 	IFloatPullRx
.16f3	fa		plx				plx 								; operator
.16f4	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16f6	45 0f		eor $0f				eor 	IFR1+IExp
.16f8	30 08		bmi $1702			bmi 	_EEType
.16fa					_EETypeOkay:
.16fa	8a		txa				txa
.16fb	0a		asl a				asl 	a 							; double -> X
.16fc	aa		tax				tax
.16fd	20 05 17	jsr $1705			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1700	80 cf		bra $16d1			bra 	_EELoop
.1702					_EEType:
.1702	4c 86 25	jmp $2586		jmp	ErrorV_type
.1705					_EECallBinary:
.1705	7c 64 1c	jmp ($1c64,x)			jmp 	(VectorTable,x)
.1708					_EEExit:
.1708	68		pla				pla 								; throw precedence
.1709					_EEExit2:
.1709	18		clc				clc
.170a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.170b					EXPEvalNumber:
.170b	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression
.170e	24 0b		bit $0b				bit 	IFR0+IExp
.1710	30 01		bmi $1713			bmi 	EVUType
.1712	60		rts				rts
.1713					EVUType:
.1713	4c 86 25	jmp $2586		jmp	ErrorV_type
.1716					EXPEvalInteger:
.1716	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1719	20 b3 2d	jsr $2db3			jsr 	IFloatIntegerR0
.171c	60		rts				rts
.171d					EXPEvalInteger16:
.171d	20 16 17	jsr $1716			jsr 	EXPEvalInteger
.1720	a5 0a		lda $0a				lda 	IFR0+IM2
.1722	d0 21		bne $1745			bne 	EVURange
.1724	a6 09		ldx $09				ldx 	IFR0+IM1
.1726	a5 08		lda $08				lda 	IFR0+IM0
.1728	60		rts				rts
.1729					EXPEvalInteger8:
.1729	20 16 17	jsr $1716			jsr 	EXPEvalInteger
.172c	a5 0a		lda $0a				lda 	IFR0+IM2
.172e	05 09		ora $09				ora 	IFR0+IM1
.1730	d0 13		bne $1745			bne 	EVURange
.1732	a5 08		lda $08				lda 	IFR0+IM0
.1734	60		rts				rts
.1735					EXPEvalString:
.1735	20 cb 16	jsr $16cb			jsr 	EXPEvaluateExpression
.1738	24 0b		bit $0b				bit 	IFR0+IExp
.173a	10 d7		bpl $1713			bpl 	EVUType
.173c	a6 09		ldx $09				ldx 	IFR0+IM1
.173e	86 23		stx $23				stx 	zTemp0+1
.1740	a5 08		lda $08				lda 	IFR0+IM0
.1742	85 22		sta $22				sta 	zTemp0
.1744	60		rts				rts
.1745					EVURange:
.1745	4c 67 25	jmp $2567		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1748					EXPTermValueR0:
.1748	20 93 17	jsr $1793			jsr 	EXPTermR0 					; get term
.174b	90 45		bcc $1792			bcc 	_ETVNotReference 			; exit if value.
.174d	5a		phy				phy
.174e	a0 03		ldy #$03			ldy 	#3 							; get type
.1750	b1 08		lda ($08),y			lda 	(IFR0),y
.1752	30 14		bmi $1768			bmi 	_ETVDereferenceString
.1754	85 0b		sta $0b				sta 	IFR0+IExp 					; dereference to R0
.1756	88		dey				dey
.1757	b1 08		lda ($08),y			lda 	(IFR0),y
.1759	85 0a		sta $0a				sta 	IFR0+IM2
.175b	88		dey				dey
.175c	b1 08		lda ($08),y			lda 	(IFR0),y
.175e	aa		tax				tax
.175f	b2 08		lda ($08)			lda 	(IFR0)
.1761	86 09		stx $09				stx 	IFR0+IM1
.1763	85 08		sta $08				sta 	IFR0+IM0
.1765	7a		ply				ply
.1766	18		clc				clc
.1767	60		rts				rts
.1768					_ETVDereferenceString:
.1768	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.176a	b1 08		lda ($08),y			lda 	(IFR0),y
.176c	12 08		ora ($08)			ora 	(IFR0)
.176e	f0 11		beq $1781			beq 	_ETVNull
.1770	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.1772	aa		tax				tax
.1773	b2 08		lda ($08)			lda 	(IFR0)
.1775	18		clc				clc 								; add two so points to actual string.
.1776	69 02		adc #$02			adc 	#2
.1778	90 01		bcc $177b			bcc 	_EVDSNoCarry
.177a	e8		inx				inx
.177b					_EVDSNoCarry:
.177b	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.177d	85 08		sta $08				sta 	IFR0
.177f	80 08		bra $1789			bra 	_ETVFillExit 				; tidy up and exit.
.1781					_ETVNull:
.1781	a9 91		lda #$91			lda 	#_EVTNString & $FF
.1783	85 08		sta $08				sta 	IFR0+IM0
.1785	a9 17		lda #$17			lda 	#_EVTNString >> 8
.1787	85 09		sta $09				sta 	IFR0+IM1
.1789					_ETVFillExit:
.1789	64 0a		stz $0a				stz 	IFR0+IM2
.178b	a9 80		lda #$80			lda 	#$80
.178d	85 0b		sta $0b				sta 	IFR0+IExp
.178f	7a		ply				ply
.1790	60		rts				rts
.1791					_EVTNString:
>1791	00						.byte 	0
.1792					_ETVNotReference:
.1792	60		rts				rts
.1793					EXPTermR0:
.1793	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1795	30 10		bmi $17a7			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1797	c8		iny				iny 								; consume element
.1798	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.179a	b0 08		bcs $17a4			bcs 	_ETMIdentifier
.179c	20 cb 17	jsr $17cb			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.179f	20 fe 17	jsr $17fe			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17a2	18		clc				clc 								; return value
.17a3	60		rts				rts
.17a4					_ETMIdentifier:
.17a4	4c 4a 2a	jmp $2a4a			jmp 	VARCheckSimple 				; check simple variables A-Z
.17a7					_ETMIsUnaryOrMinus:
.17a7	c8		iny				iny 								; consume element
.17a8	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17aa	d0 0a		bne $17b6			bne 	_ETMCheckUnary
.17ac	20 48 17	jsr $1748			jsr 	EXPTermValueR0 				; get a term to negate
.17af	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17b1	20 be 30	jsr $30be			jsr 	IFloatNegate
.17b4	18		clc				clc
.17b5	60		rts				rts
.17b6					_ETMCheckUnary:
.17b6	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17b8	90 0e		bcc $17c8			bcc 	_ETMUnarySyntax
.17ba	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17bc	b0 0a		bcs $17c8			bcs 	_ETMUnarySyntax
.17be	0a		asl a				asl 	a
.17bf	aa		tax				tax
.17c0	20 c5 17	jsr $17c5			jsr 	_ETMCallUnaryFunction
.17c3	18		clc				clc
.17c4	60		rts				rts
.17c5					_ETMCallUnaryFunction:
.17c5	7c 64 1c	jmp ($1c64,x)			jmp 	(VectorTable,x)
.17c8					_ETMUnarySyntax:
.17c8	4c 56 25	jmp $2556		jmp	ErrorV_syntax
.17cb					EXPExtractTokenisedInteger:
.17cb	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17cd	64 0b		stz $0b				stz 	IFR0+IExp
.17cf	64 09		stz $09				stz 	IFR0+IM1
.17d1	64 0a		stz $0a				stz 	IFR0+IM2
.17d3					_ETMConstant:
.17d3	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17d5	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17d7	b0 24		bcs $17fd			bcs 	_ETMCExit 					; no.
.17d9	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17db	a5 09		lda $09				lda 	IFR0+IM1
.17dd	85 0a		sta $0a				sta 	IFR0+IM2
.17df	a5 08		lda $08				lda 	IFR0+IM0
.17e1	85 09		sta $09				sta 	IFR0+IM1
.17e3	64 08		stz $08				stz 	IFR0+IM0
.17e5	8a		txa				txa
.17e6	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17e7	66 0a		ror $0a				ror 	IFR0+IM2
.17e9	66 09		ror $09				ror 	IFR0+IM1
.17eb	66 08		ror $08				ror 	IFR0+IM0
.17ed	4a		lsr a				lsr 	a
.17ee	66 0a		ror $0a				ror 	IFR0+IM2
.17f0	66 09		ror $09				ror 	IFR0+IM1
.17f2	66 08		ror $08				ror 	IFR0+IM0
.17f4	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17f6	11 18		ora ($18),y			ora 	(codePtr),y
.17f8	85 08		sta $08				sta 	IFR0+IM0
.17fa	c8		iny				iny 								; consume, loop back
.17fb	80 d6		bra $17d3			bra 	_ETMConstant
.17fd					_ETMCExit:
.17fd	60		rts				rts
.17fe					EXPCheckDecimalFollows:
.17fe	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1800	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1802	d0 19		bne $181d			bne 	_ETMCDExit
.1804	c8		iny				iny 								; consume token.
.1805	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1807	5a		phy				phy									; save current position
.1808	48		pha				pha 								; save count of chars.
.1809	38		sec				sec 								; address into YX : y + codePtr+1
.180a	98		tya				tya
.180b	65 18		adc $18				adc 	codePtr
.180d	aa		tax				tax
.180e	a5 19		lda $19				lda 	codePtr+1
.1810	69 00		adc #$00			adc 	#0
.1812	a8		tay				tay
.1813	68		pla				pla 								; get count.
.1814	20 57 2f	jsr $2f57			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1817	7a		ply				ply 								; go to next token.
.1818	98		tya				tya
.1819	38		sec				sec
.181a	71 18		adc ($18),y			adc 	(codePtr),y
.181c	a8		tay				tay
.181d					_ETMCDExit:
.181d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.181e					EXPUnaryAbs:
.181e	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.1821	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.1824	20 f7 2c	jsr $2cf7			jsr 	IFloatAbsoluteR0
.1827	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1828					EXPUnaryAsc:
.1828	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.182b	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.182e	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1830	f0 06		beq $1838			beq 	_EXAZero 						; if so return 0
.1832	5a		phy				phy 									; otherwise get first character
.1833	a0 01		ldy #$01			ldy 	#1
.1835	b1 22		lda ($22),y			lda 	(zTemp0),y
.1837	7a		ply				ply
.1838					_EXAZero:
.1838	a2 08		ldx #$08			ldx 	#IFR0
.183a	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.183d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.183e					EXPUnaryChr:
.183e	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; expr
.1841	48		pha				pha 									; push on stack
.1842	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.1845	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1847	20 01 28	jsr $2801			jsr 	StringTempAllocate
.184a	68		pla				pla
.184b	20 36 28	jsr $2836			jsr 	StringTempWrite
.184e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.184f					EXPUnaryDec:
.184f	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.1852	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.1855	5a		phy				phy
.1856	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1858	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.185b	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.185d	f0 3b		beq $189a			beq 	_EUDError 						; empty string
.185f	aa		tax				tax
.1860	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1862					_EUDLoop:
.1862	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next
.1864	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1866	90 02		bcc $186a			bcc 	_EUDNoCase
.1868	e9 20		sbc #$20			sbc 	#$20
.186a					_EUDNoCase:
.186a	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.186c	90 2c		bcc $189a			bcc 	_EUDError
.186e	c9 3a		cmp #$3a			cmp 	#'9'+1
.1870	90 0a		bcc $187c			bcc 	_EUDOkay
.1872	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1874	90 24		bcc $189a			bcc 	_EUDError
.1876	c9 47		cmp #$47			cmp 	#'F'+1
.1878	b0 20		bcs $189a			bcs 	_EUDError
.187a	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.187c					_EUDOkay:
.187c	29 0f		and #$0f			and 	#15 							; make constant
.187e	da		phx				phx
.187f	48		pha				pha
.1880	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1882	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.1885	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.1888	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.188b	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.188e	68		pla				pla 									; pop constant and OR in
.188f	fa		plx				plx
.1890	05 08		ora $08				ora 	IFR0+IM0
.1892	85 08		sta $08				sta 	IFR0+IM0
.1894	c8		iny				iny 									; next
.1895	ca		dex				dex
.1896	d0 ca		bne $1862			bne 	_EUDLoop
.1898	7a		ply				ply
.1899	60		rts				rts
.189a					_EUDError:
.189a	4c 78 25	jmp $2578		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.189d					EXPUnaryInlineDec:
.189d	4c 56 25	jmp $2556		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18a0					EXPUnaryPeek:
.18a0	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 				; number to R0
.18a3	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.18a6	b2 08		lda ($08)			lda 	(IFR0)
.18a8	a2 08		ldx #$08			ldx 	#IFR0
.18aa	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.18ad	60		rts				rts
.18ae					EXPUnaryDeek:
.18ae	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 				; number to R0
.18b1	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.18b4	5a		phy				phy
.18b5	a0 01		ldy #$01			ldy 	#1
.18b7	b1 08		lda ($08),y			lda 	(IFR0),y
.18b9	7a		ply				ply
.18ba	48		pha				pha
.18bb	b2 08		lda ($08)			lda 	(IFR0)
.18bd	a2 08		ldx #$08			ldx 	#IFR0
.18bf	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.18c2	68		pla				pla
.18c3	85 09		sta $09				sta 	IFR0+IM1
.18c5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.18c6					EXPUnaryNull:
.18c6	20 48 17	jsr $1748			jsr 	EXPTermValueR0
.18c9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18ca					EXPUnaryFrac:
.18ca	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.18cd	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.18d0	20 5d 2d	jsr $2d5d			jsr 	IFloatFractionalR0
.18d3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18d4					EXPUnaryInkey:
.18d4	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.18d7	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18d9	20 01 28	jsr $2801			jsr 	StringTempAllocate
.18dc	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.18df	b0 06		bcs $18e7			bcs 	_EUIExit
.18e1	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18e4	20 36 28	jsr $2836			jsr 	StringTempWrite
.18e7					_EUIExit:
.18e7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18e8					EXPUnaryInt:
.18e8	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.18eb	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.18ee	20 b3 2d	jsr $2db3			jsr 	IFloatIntegerR0
.18f1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18f2					EXPUnaryLen:
.18f2	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.18f5	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.18f8	b2 22		lda ($22)			lda 	(zTemp0)
.18fa	a2 08		ldx #$08			ldx 	#IFR0
.18fc	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.18ff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1900					EXPUnaryParenthesis:
.1900	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.1903	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.1906	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1907					EXPUnaryRnd:
.1907	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; number to R0
.190a	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 				; )
.190d	a2 08		ldx #$08			ldx 	#IFR0
.190f	20 26 19	jsr $1926			jsr 	EXPLoadInRandom
.1912	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1914	85 0b		sta $0b				sta 	IFR0+IExp
.1916	60		rts				rts
.1917					ExpUnaryRand:
.1917	20 16 17	jsr $1716			jsr 	EXPEvalInteger 				; integer to R0
.191a	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 				; )
.191d	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.191f	20 26 19	jsr $1926			jsr 	EXPLoadInRandom
.1922	20 24 2c	jsr $2c24			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1925	60		rts				rts
.1926					EXPLoadInRandom:
.1926	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.1929	20 3b 19	jsr $193b			jsr 	EXPRandom32
.192c	95 00		sta $00,x			sta 	IM0,x
.192e	20 3b 19	jsr $193b			jsr 	EXPRandom32
.1931	95 01		sta $01,x			sta 	IM1,x
.1933	20 3b 19	jsr $193b			jsr 	EXPRandom32
.1936	29 7f		and #$7f			and 	#$7F
.1938	95 02		sta $02,x			sta 	IM2,x
.193a	60		rts				rts
.193b					EXPRandom32:
.193b	5a		phy				phy
.193c	a0 08		ldy #$08			ldy 	#8
.193e	ad 12 05	lda $0512			lda 	EXPSeed+0
.1941	0d 13 05	ora $0513			ora 	EXPSeed+1
.1944	0d 14 05	ora $0514			ora 	EXPSeed+2
.1947	0d 15 05	ora $0515			ora 	EXPSeed+3
.194a	d0 08		bne $1954			bne 	_EXPRNoReset
.194c	ee 12 05	inc $0512			inc 	EXPSeed+0
.194f	a0 10		ldy #$10			ldy 	#16
.1951	8c 15 05	sty $0515			sty 	EXPSeed+3
.1954					_EXPRNoReset:
.1954	ad 12 05	lda $0512			lda 	EXPSeed+0
.1957					_EXPRLoop:
.1957	0a		asl a				asl		a
.1958	2e 13 05	rol $0513			rol 	EXPSeed+1
.195b	2e 14 05	rol $0514			rol 	EXPSeed+2
.195e	2e 15 05	rol $0515			rol 	EXPSeed+3
.1961	90 02		bcc $1965			bcc 	_EXPRNoEOR
.1963	49 c5		eor #$c5			eor 	#$C5
.1965					_EXPRNoEOR:
.1965	88		dey				dey
.1966	d0 ef		bne $1957			bne 	_EXPRLoop
.1968	8d 12 05	sta $0512			sta 	EXPSeed+0
.196b	7a		ply				ply
.196c	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.196d					EXPUnarySgn:
.196d	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.1970	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.1973	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1975	20 55 30	jsr $3055			jsr 	IFloatCopyToRegister
.1978	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.197a	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.197d	a2 0c		ldx #$0c			ldx 	#IFR1
.197f	20 81 2d	jsr $2d81			jsr 	IFloatCompare 					; compare R1 vs 0.
.1982	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1983					EXPUnarySqr:
.1983	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; number to R0
.1986	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.1989	20 ff 2c	jsr $2cff			jsr 	IFloatSquareRootR0 				; square root.
.198c	b0 01		bcs $198f			bcs 	_EUSValue
.198e	60		rts				rts
.198f					_EUSValue:
.198f	4c 67 25	jmp $2567		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1992					EXPUnaryHex:
.1992	20 16 17	jsr $1716			jsr 	EXPEvalInteger 					; expr
.1995	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.1998	5a		phy				phy
.1999	a9 10		lda #$10			lda 	#16
.199b	20 54 2e	jsr $2e54			jsr 	IFloatIntegerToStringR0
.199e	80 0a		bra $19aa			bra 	EUSMain
.19a0					EXPUnaryStr:
.19a0	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 					; expr
.19a3	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.19a6	5a		phy				phy
.19a7	20 b0 2e	jsr $2eb0			jsr 	IFloatFloatToStringR0 			; convert to string
.19aa					EUSMain:
.19aa	b0 18		bcs $19c4			bcs 	_EUSError
.19ac	86 22		stx $22				stx 	zTemp0 							; save string address
.19ae	84 23		sty $23				sty 	zTemp0+1
.19b0	48		pha				pha 									; save count
.19b1	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19b3	20 01 28	jsr $2801			jsr 	StringTempAllocate
.19b6	fa		plx				plx 									; count in X
.19b7	a0 00		ldy #$00			ldy 	#0
.19b9					_EUSCopy:
.19b9	b1 22		lda ($22),y			lda 	(zTemp0),y
.19bb	c8		iny				iny
.19bc	20 36 28	jsr $2836			jsr 	StringTempWrite
.19bf	ca		dex				dex
.19c0	d0 f7		bne $19b9			bne	 	_EUSCopy
.19c2	7a		ply				ply
.19c3	60		rts				rts
.19c4					_EUSError:
.19c4	4c 67 25	jmp $2567		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19c7					EXPUnaryInlineString:
.19c7	18		clc				clc 								; physical address -> IM0,1
.19c8	98		tya				tya
.19c9	65 18		adc $18				adc 	codePtr
.19cb	85 08		sta $08				sta 	IFR0+IM0
.19cd	a5 19		lda $19				lda 	codePtr+1
.19cf	69 00		adc #$00			adc 	#0
.19d1	85 09		sta $09				sta 	IFR0+IM1
.19d3	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in rest
.19d5	a9 80		lda #$80			lda 	#$80
.19d7	85 0b		sta $0b				sta 	IFR0+IExp
.19d9	98		tya				tya	 								; skip over it.
.19da	38		sec				sec
.19db	71 18		adc ($18),y			adc 	(codePtr),y
.19dd	a8		tay				tay
.19de	60		rts				rts
.19df					_EXPUISRange:
.19df	4c 67 25	jmp $2567		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19e2					EXPUnaryLeft:
.19e2	20 28 1a	jsr $1a28			jsr 	EXPCommonStart 					; <string>,
.19e5	48		pha				pha 									; save string address on stack
.19e6	da		phx				phx
.19e7	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19e9	48		pha				pha
.19ea	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.19ed	80 44		bra $1a33			bra 	EXPSubstringCommon
.19ef					EXPUnaryRight:
.19ef	20 28 1a	jsr $1a28			jsr 	EXPCommonStart 					; <string>,
.19f2	48		pha				pha 									; save string address on stack
.19f3	da		phx				phx
.19f4	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19f6	48		pha				pha
.19f7	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.19fa	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.19fc	68		pla				pla
.19fd	38		sec				sec
.19fe	e5 22		sbc $22				sbc 	zTemp0
.1a00	b0 02		bcs $1a04			bcs 	_EUROffLeft
.1a02	a9 00		lda #$00			lda 	#0
.1a04					_EUROffLeft:
.1a04	48		pha				pha 									; start pos
.1a05	a9 ff		lda #$ff			lda 	#255
.1a07	80 2a		bra $1a33			bra 	EXPSubstringCommon
.1a09					EXPUnaryMid:
.1a09	20 28 1a	jsr $1a28			jsr 	EXPCommonStart 					; <string>,
.1a0c	48		pha				pha 									; save string address on stack
.1a0d	da		phx				phx
.1a0e	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters start
.1a11	f0 12		beq $1a25			beq 	_EUSError 						; 1 is left
.1a13	3a		dec a				dec 	a 								; zero based.
.1a14	48		pha				pha
.1a15	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a17	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a19	f0 04		beq $1a1f			beq 	_EUMLength 						; if so m is provided
.1a1b	a9 ff		lda #$ff			lda 	#255 							; default m
.1a1d	80 14		bra $1a33			bra 	EXPSubstringCommon
.1a1f					_EUMLength:
.1a1f	c8		iny				iny 									; consume comma
.1a20	20 29 17	jsr $1729			jsr 	EXPEvalInteger8 				; characters to do
.1a23	80 0e		bra $1a33			bra 	EXPSubstringCommon
.1a25					_EUSError:
.1a25	4c 78 25	jmp $2578		jmp	ErrorV_value
.1a28					EXPCommonStart:
.1a28	20 35 17	jsr $1735			jsr 	EXPEvalString
.1a2b	20 13 27	jsr $2713			jsr 	ERRCheckComma
.1a2e	a5 08		lda $08				lda 	IFR0+IM0
.1a30	a6 09		ldx $09				ldx 	IFR0+IM1
.1a32	60		rts				rts
.1a33					EXPSubstringCommon:
.1a33	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a35	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; check right bracket.
.1a38	68		pla				pla 									; start position
.1a39	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a3b	fa		plx				plx 									; get string address to zTemp2.
.1a3c	86 27		stx $27				stx 	zTemp2+1
.1a3e	68		pla				pla
.1a3f	85 26		sta $26				sta 	zTemp2
.1a41	38		sec				sec 									; length - start is the max count of chars
.1a42	b2 26		lda ($26)			lda 	(zTemp2)
.1a44	e5 25		sbc $25				sbc 	zTemp1+1
.1a46	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a48	b0 02		bcs $1a4c			bcs 	_EXPSSNoTrim
.1a4a	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a4c					_EXPSSNoTrim:
.1a4c	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a4e	20 01 28	jsr $2801			jsr 	StringTempAllocate 				; allocate memory for it.
.1a51	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a53	f0 15		beq $1a6a			beq 	_EXPSSExit
.1a55	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a57	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a59	b0 0f		bcs $1a6a			bcs 	_EXPSSExit
.1a5b	5a		phy				phy
.1a5c	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a5e	c8		iny				iny 									; +1 for the length byte
.1a5f					_EXPSSCopy:
.1a5f	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a61	20 36 28	jsr $2836			jsr 	StringTempWrite
.1a64	c8		iny				iny
.1a65	c6 24		dec $24				dec 	zTemp1
.1a67	d0 f6		bne $1a5f			bne 	_EXPSSCopy
.1a69	7a		ply				ply
.1a6a					_EXPSSExit:
.1a6a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a6b					EXPUnaryVal:
.1a6b	20 35 17	jsr $1735			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a6e	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 					; )
.1a71	20 75 1a	jsr $1a75			jsr 	VALConversionZTemp0
.1a74	60		rts				rts
.1a75					VALConversionZTemp0:
.1a75	5a		phy				phy
.1a76	18		clc				clc
.1a77	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a79	69 01		adc #$01			adc 	#1
.1a7b	aa		tax				tax
.1a7c	a5 23		lda $23				lda 	zTemp0+1
.1a7e	69 00		adc #$00			adc 	#0
.1a80	a8		tay				tay
.1a81	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a83	20 17 2f	jsr $2f17			jsr 	IFloatStringToFloatR0 			; do conversion
.1a86	b0 02		bcs $1a8a			bcs 	_EUVError
.1a88	7a		ply				ply
.1a89	60		rts				rts
.1a8a					_EUVError:
.1a8a	4c 78 25	jmp $2578		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a8d					BinaryPrecedence:
>1a8d	02					.byte	 2	; $ef =
>1a8e	02					.byte	 2	; $f0 <>
>1a8f	02					.byte	 2	; $f1 <=
>1a90	02					.byte	 2	; $f2 <
>1a91	02					.byte	 2	; $f3 >=
>1a92	02					.byte	 2	; $f4 >
>1a93	01					.byte	 1	; $f5 XOR
>1a94	01					.byte	 1	; $f6 OR
>1a95	01					.byte	 1	; $f7 AND
>1a96	04					.byte	 4	; $f8 DIV
>1a97	04					.byte	 4	; $f9 MOD
>1a98	04					.byte	 4	; $fa <<
>1a99	04					.byte	 4	; $fb >>
>1a9a	04					.byte	 4	; $fc /
>1a9b	04					.byte	 4	; $fd *
>1a9c	03					.byte	 3	; $fe -
>1a9d	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1a9e					StructureOffsets:
>1a9e	01					.byte	1  	; $80 REPEAT
>1a9f	ff					.byte	255	; $81 UNTIL
>1aa0	01					.byte	1  	; $82 WHILE
>1aa1	ff					.byte	255	; $83 WEND
>1aa2	01					.byte	1  	; $84 IF
>1aa3	ff					.byte	255	; $85 ENDIF
>1aa4	01					.byte	1  	; $86 DO
>1aa5	ff					.byte	255	; $87 LOOP
>1aa6	01					.byte	1  	; $88 PROC
>1aa7	ff					.byte	255	; $89 ENDPROC
>1aa8	01					.byte	1  	; $8a FOR
>1aa9	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1aaa					StandardTokens:
>1aaa	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1ab1	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1ab7	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1abd	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1ac2	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1ac5	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1acb	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1ace	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1ad3	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1ad8	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1ae0	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1ae4	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1ae9	00					.byte	$00                                     	; $8c [[end]]
>1aea	00					.byte	$00                                     	; $8d [[shift]]
>1aeb	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1af0	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1af5	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1af8	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1afd	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1b01	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1b07	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1b0d	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1b12	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1b16	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1b1a	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1b1f	01 2c					.byte	$01,$2c                                 	; $99 ,
>1b21	01 3b					.byte	$01,$3b                                 	; $9a ;
>1b23	01 3a					.byte	$01,$3a                                 	; $9b :
>1b25	01 27					.byte	$01,$27                                 	; $9c '
>1b27	01 29					.byte	$01,$29                                 	; $9d )
>1b29	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1b2d	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1b33	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1b37	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1b3b	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1b40	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1b44	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1b4b	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1b50	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1b55	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1b5a	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1b5f	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1b64	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $aa read
>1b69	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $ab data
>1b6e	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $ac restore
>1b76	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $ad goto
>1b7b	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $ae gosub
>1b81	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $af return
>1b88	00					.byte	0											; $b0
>1b89	00					.byte	0											; $b1
>1b8a	00					.byte	0											; $b2
>1b8b	00					.byte	0											; $b3
>1b8c	00					.byte	0											; $b4
>1b8d	00					.byte	0											; $b5
>1b8e	00					.byte	0											; $b6
>1b8f	00					.byte	0											; $b7
>1b90	00					.byte	0											; $b8
>1b91	00					.byte	0											; $b9
>1b92	00					.byte	0											; $ba
>1b93	00					.byte	0											; $bb
>1b94	00					.byte	0											; $bc
>1b95	00					.byte	0											; $bd
>1b96	00					.byte	0											; $be
>1b97	00					.byte	0											; $bf
>1b98	00					.byte	0											; $c0
>1b99	00					.byte	0											; $c1
>1b9a	00					.byte	0											; $c2
>1b9b	00					.byte	0											; $c3
>1b9c	00					.byte	0											; $c4
>1b9d	00					.byte	0											; $c5
>1b9e	00					.byte	0											; $c6
>1b9f	00					.byte	0											; $c7
>1ba0	00					.byte	0											; $c8
>1ba1	00					.byte	0											; $c9
>1ba2	00					.byte	0											; $ca
>1ba3	00					.byte	0											; $cb
>1ba4	00					.byte	0											; $cc
>1ba5	00					.byte	0											; $cd
>1ba6	00					.byte	0											; $ce
>1ba7	00					.byte	0											; $cf
>1ba8	00					.byte	0											; $d0
>1ba9	00					.byte	0											; $d1
>1baa	00					.byte	0											; $d2
>1bab	00					.byte	0											; $d3
>1bac	00					.byte	0											; $d4
>1bad	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1bb3	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1bb9	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1bc1	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1bc8	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1bce	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1bd4	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1bd9	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1bde	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1be3	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1be8	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1bed	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1bf3	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bf8	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1c00	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1c07	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1c0c	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1c11	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1c17	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1c1c	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1c22	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1c27	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1c2d	01 28					.byte	$01,$28                                 	; $eb (
>1c2f	01 24					.byte	$01,$24                                 	; $ec $
>1c31	00					.byte	$00                                     	; $ed [[decimal]]
>1c32	00					.byte	$00                                     	; $ee [[string]]
>1c33	01 3d					.byte	$01,$3d                                 	; $ef =
>1c35	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1c38	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1c3b	01 3c					.byte	$01,$3c                                 	; $f2 <
>1c3d	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1c40	01 3e					.byte	$01,$3e                                 	; $f4 >
>1c42	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1c46	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c49	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c4d	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c51	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c55	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c58	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c5b	01 2f					.byte	$01,$2f                                 	; $fc /
>1c5d	01 2a					.byte	$01,$2a                                 	; $fd *
>1c5f	01 2d					.byte	$01,$2d                                 	; $fe -
>1c61	01 2b					.byte	$01,$2b                                 	; $ff +
>1c63	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c64					VectorTable:
>1c64	46 24					.word	Command_REPEAT           ; $80 REPEAT
>1c66	4f 24					.word	Command_UNTIL            ; $81 UNTIL
>1c68	29 25					.word	Command_WHILE            ; $82 WHILE
>1c6a	4a 25					.word	Command_WEND             ; $83 WEND
>1c6c	1c 24					.word	IfCommand                ; $84 IF
>1c6e	45 24					.word	EndIf                    ; $85 ENDIF
>1c70	b9 22					.word	Command_DO               ; $86 DO
>1c72	d1 22					.word	Command_LOOP             ; $87 LOOP
>1c74	4b 15					.word	NoExec08                 ; $88 PROC
>1c76	ad 22					.word	Command_ENDPROC          ; $89 ENDPROC
>1c78	da 22					.word	Command_FOR              ; $8a FOR
>1c7a	67 23					.word	Command_NEXT             ; $8b NEXT
>1c7c	d1 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c7e	2d 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c80	3e 24					.word	ElseCode                 ; $8e ELSE
>1c82	4b 15					.word	NoExec01                 ; $8f THEN
>1c84	4b 15					.word	NoExec02                 ; $90 TO
>1c86	4b 15					.word	NoExec03                 ; $91 STEP
>1c88	c3 12					.word	CommandLET               ; $92 LET
>1c8a	14 12					.word	Command_Print            ; $93 PRINT
>1c8c	0d 12					.word	Command_Input            ; $94 INPUT
>1c8e	71 22					.word	Command_CALL             ; $95 CALL
>1c90	36 15					.word	Command_Sys              ; $96 SYS
>1c92	8a 14					.word	Command_REM              ; $97 REM
>1c94	c2 22					.word	Command_EXIT             ; $98 EXIT
>1c96	4b 15					.word	NoExec04                 ; $99 ,
>1c98	4b 15					.word	NoExec05                 ; $9a ;
>1c9a	4b 15					.word	NoExec06                 ; $9b :
>1c9c	8a 14					.word	Command_REM2             ; $9c '
>1c9e	4b 15					.word	NoExec07                 ; $9d )
>1ca0	97 10					.word	CommandDIM               ; $9e DIM
>1ca2	23 10					.word	Command_CLEAR            ; $9f CLEAR
>1ca4	0d 14					.word	Command_NEW              ; $a0 NEW
>1ca6	c5 14					.word	Command_RUN              ; $a1 RUN
>1ca8	33 15					.word	Command_STOP             ; $a2 STOP
>1caa	30 15					.word	Command_END              ; $a3 END
>1cac	15 10					.word	Command_ASSERT           ; $a4 ASSERT
>1cae	3d 13					.word	Command_LIST             ; $a5 LIST
>1cb0	88 28					.word	NotImplemented           ; $a6 SAVE
>1cb2	88 28					.word	NotImplemented           ; $a7 LOAD
>1cb4	b6 11					.word	Command_Poke             ; $a8 POKE
>1cb6	b3 11					.word	Command_Doke             ; $a9 DOKE
>1cb8	16 14					.word	Command_READ             ; $aa READ
>1cba	7d 14					.word	Command_DATA             ; $ab DATA
>1cbc	97 14					.word	Command_RESTORE          ; $ac RESTORE
>1cbe	dd 11					.word	Command_GOTO             ; $ad GOTO
>1cc0	88 28					.word	NotImplemented           ; $ae GOSUB
>1cc2	88 28					.word	NotImplemented           ; $af RETURN
>1cc4	88 28					.word	NotImplemented           ; $b0
>1cc6	88 28					.word	NotImplemented           ; $b1
>1cc8	88 28					.word	NotImplemented           ; $b2
>1cca	88 28					.word	NotImplemented           ; $b3
>1ccc	88 28					.word	NotImplemented           ; $b4
>1cce	88 28					.word	NotImplemented           ; $b5
>1cd0	88 28					.word	NotImplemented           ; $b6
>1cd2	88 28					.word	NotImplemented           ; $b7
>1cd4	88 28					.word	NotImplemented           ; $b8
>1cd6	88 28					.word	NotImplemented           ; $b9
>1cd8	88 28					.word	NotImplemented           ; $ba
>1cda	88 28					.word	NotImplemented           ; $bb
>1cdc	88 28					.word	NotImplemented           ; $bc
>1cde	88 28					.word	NotImplemented           ; $bd
>1ce0	88 28					.word	NotImplemented           ; $be
>1ce2	88 28					.word	NotImplemented           ; $bf
>1ce4	88 28					.word	NotImplemented           ; $c0
>1ce6	88 28					.word	NotImplemented           ; $c1
>1ce8	88 28					.word	NotImplemented           ; $c2
>1cea	88 28					.word	NotImplemented           ; $c3
>1cec	88 28					.word	NotImplemented           ; $c4
>1cee	88 28					.word	NotImplemented           ; $c5
>1cf0	88 28					.word	NotImplemented           ; $c6
>1cf2	88 28					.word	NotImplemented           ; $c7
>1cf4	88 28					.word	NotImplemented           ; $c8
>1cf6	88 28					.word	NotImplemented           ; $c9
>1cf8	88 28					.word	NotImplemented           ; $ca
>1cfa	88 28					.word	NotImplemented           ; $cb
>1cfc	88 28					.word	NotImplemented           ; $cc
>1cfe	88 28					.word	NotImplemented           ; $cd
>1d00	88 28					.word	NotImplemented           ; $ce
>1d02	88 28					.word	NotImplemented           ; $cf
>1d04	88 28					.word	NotImplemented           ; $d0
>1d06	88 28					.word	NotImplemented           ; $d1
>1d08	88 28					.word	NotImplemented           ; $d2
>1d0a	88 28					.word	NotImplemented           ; $d3
>1d0c	88 28					.word	NotImplemented           ; $d4
>1d0e	ae 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1d10	a0 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1d12	ef 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1d14	e2 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1d16	09 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1d18	a0 19					.word	EXPUnaryStr              ; $da STR$(
>1d1a	6b 1a					.word	EXPUnaryVal              ; $db VAL(
>1d1c	6d 19					.word	EXPUnarySgn              ; $dc SGN(
>1d1e	1e 18					.word	EXPUnaryAbs              ; $dd ABS(
>1d20	f2 18					.word	EXPUnaryLen              ; $de LEN(
>1d22	83 19					.word	EXPUnarySqr              ; $df SQR(
>1d24	3e 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1d26	28 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1d28	d4 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1d2a	88 28					.word	NotImplemented           ; $e3 EVENT(
>1d2c	88 28					.word	NotImplemented           ; $e4 TIME
>1d2e	e8 18					.word	EXPUnaryInt              ; $e5 INT(
>1d30	ca 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1d32	4f 18					.word	EXPUnaryDec              ; $e7 DEC(
>1d34	92 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1d36	07 19					.word	EXPUnaryRnd              ; $e9 RND(
>1d38	17 19					.word	ExpUnaryRand             ; $ea RAND(
>1d3a	00 19					.word	EXPUnaryParenthesis      ; $eb (
>1d3c	c6 18					.word	EXPUnaryNull             ; $ec $
>1d3e	9d 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1d40	c7 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1d42	08 16					.word	EXPCompareEqual          ; $ef =
>1d44	23 16					.word	EXPCompareNotEqual       ; $f0 <>
>1d46	2c 16					.word	EXPCompareLessEqual      ; $f1 <=
>1d48	11 16					.word	EXPCompareLess           ; $f2 <
>1d4a	35 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d4c	1a 16					.word	EXPCompareGreater        ; $f4 >
>1d4e	b5 15					.word	EXPBinXor                ; $f5 XOR
>1d50	a9 15					.word	EXPBinOr                 ; $f6 OR
>1d52	9d 15					.word	EXPBinAnd                ; $f7 AND
>1d54	75 15					.word	EXPBinIDiv               ; $f8 DIV
>1d56	86 15					.word	EXPBinIMod               ; $f9 MOD
>1d58	80 16					.word	EXPBinLeft               ; $fa <<
>1d5a	88 16					.word	EXPBinRight              ; $fb >>
>1d5c	69 15					.word	EXPBinFDiv               ; $fc /
>1d5e	60 15					.word	EXPBinMul                ; $fd *
>1d60	57 15					.word	EXPBinSub                ; $fe -
>1d62	4e 15					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d64					TOKDetokenise:
.1d64	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d66	84 27		sty $27				sty 	zTemp2+1
.1d68	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1d6b					_TOKDLoop:
.1d6b	20 9a 1d	jsr $1d9a			jsr 	TOKDGet 					; get next
.1d6e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1d70	f0 26		beq $1d98			beq 	_TOKDExit
.1d72	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1d74	f0 1d		beq $1d93			beq 	_TOKDDataItem
.1d76	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1d78	f0 19		beq $1d93			beq 	_TOKDDataItem
.1d7a	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1d7c	10 05		bpl $1d83			bpl 	_TOKDNotToken
.1d7e	20 62 1e	jsr $1e62			jsr 	TOKDToken 					; token to text.
.1d81	80 e8		bra $1d6b			bra 	_TOKDLoop
.1d83					_TOKDNotToken:
.1d83	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1d85	90 05		bcc $1d8c			bcc 	_TOKDNotIdentifier
.1d87	20 d5 1d	jsr $1dd5			jsr 	TOKDIdentifier
.1d8a	80 df		bra $1d6b			bra 	_TOKDLoop
.1d8c					_TOKDNotIdentifier:
.1d8c	a0 0a		ldy #$0a			ldy 	#10
.1d8e	20 1e 1e	jsr $1e1e			jsr 	TOKDInteger
.1d91	80 d8		bra $1d6b			bra 	_TOKDLoop
.1d93					_TOKDDataItem:
.1d93	20 b0 1d	jsr $1db0			jsr 	TOKDDataItem
.1d96	80 d3		bra $1d6b			bra 	_TOKDLoop
.1d98					_TOKDExit:
.1d98	18		clc				clc
.1d99	60		rts				rts
.1d9a	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1d9c	e6 26		inc $26				inc 	zTemp2
.1d9e	d0 02		bne $1da2			bne 	_TKDGExit
.1da0	e6 27		inc $27				inc 	zTemp2+1
.1da2					_TKDGExit:
.1da2	60		rts				rts
.1da3					TOKDOutput:
.1da3	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1da6	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1da9					TOKSetDetokeniseOutput:
.1da9	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1dac	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1daf	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1db0					TOKDDataItem:
.1db0	a8		tay				tay 								; type in Y
.1db1	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1db3	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1db5	f0 02		beq $1db9			beq 	_TOKDDIsString
.1db7	a9 2e		lda #$2e			lda 	#'.'
.1db9					_TOKDDIsString:
.1db9	20 a3 1d	jsr $1da3			jsr 	TOKDOutput 					; dump it
.1dbc	20 9a 1d	jsr $1d9a			jsr 	TOKDGet 					; get length into X
.1dbf	aa		tax				tax
.1dc0					_TOKDDOutput:
.1dc0	ca		dex				dex 								; are we complete
.1dc1	30 08		bmi $1dcb			bmi 	_TOKDDEnd
.1dc3	20 9a 1d	jsr $1d9a			jsr 	TOKDGet 					; get character and output it
.1dc6	20 a3 1d	jsr $1da3			jsr 	TOKDOutput
.1dc9	80 f5		bra $1dc0			bra 	_TOKDDOutput
.1dcb					_TOKDDEnd:
.1dcb	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1dcd	d0 05		bne $1dd4			bne 	_TOKDDNotString
.1dcf	a9 22		lda #$22			lda 	#'"'
.1dd1	20 a3 1d	jsr $1da3			jsr 	TOKDOutput
.1dd4					_TOKDDNotString:
.1dd4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1dd5					TOKDIdentifier:
.1dd5	a0 ff		ldy #$ff			ldy 	#$FF
.1dd7	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1dda					_TOKDLoop:
.1dda	a8		tay				tay 								; token in Y
.1ddb	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1ddd	c0 64		cpy #$64			cpy 	#$64
.1ddf	f0 11		beq $1df2			beq 	_TOKDIOutput
.1de1	a9 5f		lda #$5f			lda 	#'_'
.1de3	c0 65		cpy #$65			cpy 	#$65
.1de5	f0 0b		beq $1df2			beq 	_TOKDIOutput
.1de7	98		tya				tya 								; handle a-z
.1de8	18		clc				clc
.1de9	69 21		adc #$21			adc	 	#$21
.1deb	c0 5a		cpy #$5a			cpy 	#$5A
.1ded	90 03		bcc $1df2			bcc 	_TOKDIOutput
.1def	38		sec				sec 								; handle 0-9
.1df0	e9 4b		sbc #$4b			sbc 	#$4B
.1df2					_TOKDIOutput:
.1df2	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1df5	10 08		bpl $1dff			bpl 	_TOKDINoSpacing
.1df7	48		pha				pha
.1df8	20 94 1e	jsr $1e94			jsr 	TOKDSpacing
.1dfb	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1dfe	68		pla				pla
.1dff					_TOKDINoSpacing:
.1dff	20 a3 1d	jsr $1da3			jsr 	TOKDOutput
.1e02	20 9a 1d	jsr $1d9a			jsr 	TOKDGet 					; get next token
.1e05	c9 7c		cmp #$7c			cmp 	#$7C
.1e07	90 d1		bcc $1dda			bcc 	_TOKDLoop
.1e09	f0 12		beq $1e1d			beq 	_TOKDIExit 					; it's a number, no tail.
.1e0b	4a		lsr a				lsr 	a 							; string ?
.1e0c	90 07		bcc $1e15			bcc 	_TOKDICheckArray
.1e0e	48		pha				pha
.1e0f	a9 24		lda #$24			lda 	#"$"
.1e11	20 a3 1d	jsr $1da3			jsr 	TOKDOutput
.1e14	68		pla				pla
.1e15					_TOKDICheckArray:
.1e15	4a		lsr a				lsr 	a 							; array ?
.1e16	90 05		bcc $1e1d			bcc 	_TOKDIExit
.1e18	a9 28		lda #$28			lda 	#"("
.1e1a	20 a3 1d	jsr $1da3			jsr 	TOKDOutput
.1e1d					_TOKDIExit:
.1e1d	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1e1e					TOKDInteger:
.1e1e	5a		phy				phy 								; save base
.1e1f	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1e21	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.1e24					_TOKDILoop:
.1e24	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1e26	c9 40		cmp #$40			cmp 	#$40
.1e28	b0 1d		bcs $1e47			bcs 	_TOKDIHaveInteger
.1e2a	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1e2c	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.1e2f	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.1e32	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.1e35	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.1e38	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.1e3b	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.1e3e	20 9a 1d	jsr $1d9a			jsr 	TOKDGet 					; OR byte in.
.1e41	05 08		ora $08				ora 	IFR0+IM0
.1e43	85 08		sta $08				sta 	IFR0+IM0
.1e45	80 dd		bra $1e24			bra 	_TOKDILoop
.1e47					_TOKDIHaveInteger:
.1e47	7a		ply				ply 								; restore base
.1e48	98		tya				tya 								; base in A
.1e49	20 54 2e	jsr $2e54			jsr 	IFloatIntegerToStringR0
.1e4c	86 22		stx $22				stx 	zTemp0
.1e4e	84 23		sty $23				sty 	zTemp0+1
.1e50	b2 22		lda ($22)			lda 	(zTemp0)
.1e52	20 94 1e	jsr $1e94			jsr 	TOKDSpacing 				; check spacing okay.
.1e55	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1e57					_TOKDOutput:
.1e57	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e59	20 a3 1d	jsr $1da3			jsr 	TOKDOutput
.1e5c	c8		iny				iny
.1e5d	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e5f	d0 f6		bne $1e57			bne 	_TOKDOutput
.1e61	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e62					TOKDToken:
.1e62	a2 aa		ldx #$aa			ldx 	#StandardTokens & $FF
.1e64	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e66					_TOKDSearch:
.1e66	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1e68	84 23		sty $23				sty 	zTemp0+1
.1e6a	aa		tax				tax 								; token ID in X.
.1e6b					_TOKDFind:
.1e6b	ca		dex				dex 								; reached the start
.1e6c	10 0d		bpl $1e7b			bpl 	_TOKDFound
.1e6e	38		sec				sec 								; go to next entry
.1e6f	b2 22		lda ($22)			lda 	(zTemp0)
.1e71	65 22		adc $22				adc 	zTemp0
.1e73	85 22		sta $22				sta 	zTemp0
.1e75	90 f4		bcc $1e6b			bcc 	_TOKDFind
.1e77	e6 23		inc $23				inc 	zTemp0+1
.1e79	80 f0		bra $1e6b			bra 	_TOKDFind
.1e7b					_TOKDFound:
.1e7b	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1e7d	f0 14		beq $1e93			beq 	_TOKDExit
.1e7f	aa		tax				tax
.1e80	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1e82	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1e84	20 94 1e	jsr $1e94			jsr 	TOKDSpacing
.1e87					_TOKDOutput:
.1e87	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e89	20 2c 22	jsr $222c			jsr 	TOKToLower
.1e8c	20 a3 1d	jsr $1da3			jsr 	TOKDOutput
.1e8f	c8		iny				iny
.1e90	ca		dex				dex
.1e91	d0 f4		bne $1e87			bne 	_TOKDOutput
.1e93					_TOKDExit:
.1e93	60		rts				rts
.1e94					TOKDSpacing:
.1e94	20 43 22	jsr $2243			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1e97	90 0d		bcc $1ea6			bcc 	_TOKDSExit
.1e99	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1e9c	20 43 22	jsr $2243			jsr 	TOKIsIdentifierElement
.1e9f	90 05		bcc $1ea6			bcc 	_TOKDSExit
.1ea1	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1ea3	20 a3 1d	jsr $1da3			jsr 	TOKDOutput
.1ea6					_TOKDSExit:
.1ea6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1ea7					PGMDeleteLine:
.1ea7	20 5a 1f	jsr $1f5a			jsr 	PGMEndProgram 				; end of program into zTemp0
.1eaa	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1eac	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1eaf	85 25		sta $25				sta 	zTemp1+1
.1eb1					_PGMDLoop:
.1eb1	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1eb3	38		sec				sec
.1eb4	f0 3a		beq $1ef0			beq 	_PGMDExit
.1eb6	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1eb8	b1 24		lda ($24),y			lda 	(zTemp1),y
.1eba	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1ebd	d0 08		bne $1ec7			bne 	_PGMDNext
.1ebf	c8		iny				iny
.1ec0	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ec2	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1ec5	f0 0d		beq $1ed4			beq 	_PGMDDelete
.1ec7					_PGMDNext:
.1ec7	18		clc				clc
.1ec8	b2 24		lda ($24)			lda 	(zTemp1)
.1eca	65 24		adc $24				adc 	zTemp1
.1ecc	85 24		sta $24				sta 	zTemp1
.1ece	90 e1		bcc $1eb1			bcc 	_PGMDLoop
.1ed0	e6 25		inc $25				inc 	zTemp1+1
.1ed2	80 dd		bra $1eb1			bra 	_PGMDLoop
.1ed4					_PGMDDelete:
.1ed4	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1ed6	a8		tay				tay
.1ed7					_PGMDCopy:
.1ed7	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1ed9	92 24		sta ($24)			sta 	(zTemp1)
.1edb	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1edd	c5 22		cmp $22				cmp 	zTemp0
.1edf	d0 07		bne $1ee8			bne 	_PGMDNext2
.1ee1	a5 25		lda $25				lda 	zTemp1+1
.1ee3	c5 23		cmp $23				cmp 	zTemp0+1
.1ee5	18		clc				clc
.1ee6	f0 08		beq $1ef0			beq 	_PGMDExit
.1ee8					_PGMDNext2:
.1ee8	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1eea	d0 eb		bne $1ed7			bne 	_PGMDCopy
.1eec	e6 25		inc $25				inc 	zTemp1+1
.1eee	80 e7		bra $1ed7			bra 	_PGMDCopy
.1ef0					_PGMDExit:
.1ef0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1ef1					PGMInsertLine:
.1ef1	20 5a 1f	jsr $1f5a			jsr 	PGMEndProgram 				; end of program into zTemp0
.1ef4	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1ef6	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1ef9	85 25		sta $25				sta 	zTemp1+1
.1efb					_PGMILoop:
.1efb	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1efd	f0 1c		beq $1f1b			beq 	_PGMIInsert
.1eff	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1f01	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f03	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1f06	c8		iny				iny
.1f07	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f09	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1f0c	b0 0d		bcs $1f1b			bcs 	_PGMIInsert 				; insert here.
.1f0e	18		clc				clc
.1f0f	b2 24		lda ($24)			lda 	(zTemp1)
.1f11	65 24		adc $24				adc 	zTemp1
.1f13	85 24		sta $24				sta 	zTemp1
.1f15	90 e4		bcc $1efb			bcc 	_PGMILoop
.1f17	e6 25		inc $25				inc 	zTemp1+1
.1f19	80 e0		bra $1efb			bra 	_PGMILoop
.1f1b					_PGMIInsert:
.1f1b	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1f1e					_PGMIInsertLoop:
.1f1e	b2 22		lda ($22)			lda 	(zTemp0)
.1f20	91 22		sta ($22),y			sta 	(zTemp0),y
.1f22	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1f24	c5 22		cmp $22				cmp 	zTemp0
.1f26	d0 06		bne $1f2e			bne 	_PGMINext
.1f28	a5 25		lda $25				lda 	zTemp1+1
.1f2a	c5 23		cmp $23				cmp 	zTemp0+1
.1f2c	f0 0a		beq $1f38			beq 	_PGMIInserted
.1f2e					_PGMINext:
.1f2e	a5 22		lda $22				lda 	zTemp0
.1f30	d0 02		bne $1f34			bne 	_PGMINoBorrow
.1f32	c6 23		dec $23				dec 	zTemp0+1
.1f34					_PGMINoBorrow:
.1f34	c6 22		dec $22				dec 	zTemp0
.1f36	80 e6		bra $1f1e			bra 	_PGMIInsertLoop
.1f38					_PGMIInserted:
.1f38	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1f3a					_PGMICopyLoop:
.1f3a	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1f3d	91 24		sta ($24),y			sta 	(zTemp1),y
.1f3f	c8		iny				iny
.1f40	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1f43	d0 f5		bne $1f3a			bne 	_PGMICopyLoop
.1f45	18		clc				clc
.1f46	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f47					PGMSetBaseAddress:
.1f47	8e 1a 05	stx $051a			stx 	PGMBaseHigh
.1f4a	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh
.1f4d	60		rts				rts
.1f4e					PGMNewProgram:
.1f4e	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f50	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f53	85 23		sta $23				sta 	zTemp0+1
.1f55	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1f57	92 22		sta ($22)			sta 	(zTemp0)
.1f59	60		rts				rts
.1f5a					PGMEndProgram:
.1f5a	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f5c	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f5f	85 23		sta $23				sta 	zTemp0+1
.1f61					_PGMEPLoop:
.1f61	b2 22		lda ($22)			lda 	(zTemp0)
.1f63	f0 0b		beq $1f70			beq 	_PGMEPExit
.1f65	18		clc				clc
.1f66	65 22		adc $22				adc 	zTemp0
.1f68	85 22		sta $22				sta 	zTemp0
.1f6a	90 f5		bcc $1f61			bcc 	_PGMEPLoop
.1f6c	e6 23		inc $23				inc 	zTemp0+1
.1f6e	80 f1		bra $1f61			bra 	_PGMEPLoop
.1f70					_PGMEPExit:
.1f70	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1f71					TOKResetElement:
.1f71	9c 1c 05	stz $051c			stz 	TOKElement
.1f74	60		rts				rts
.1f75					TOKWriteElement:
.1f75	da		phx				phx
.1f76	ae 1c 05	ldx $051c			ldx 	TOKElement
.1f79	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1f7c	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1f7f	fa		plx				plx
.1f80	ee 1c 05	inc $051c			inc 	TOKElement
.1f83	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1f84					TOKTokeniseConstant:
.1f84	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1f86	48		pha				pha 								; save on stack
.1f87	29 c0		and #$c0			and 	#$C0
.1f89	05 09		ora $09				ora 	IFR0+IM1
.1f8b	05 0a		ora $0a				ora 	IFR0+IM2
.1f8d	f0 10		beq $1f9f			beq 	_TTCLess
.1f8f	da		phx				phx
.1f90	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1f92					_TTCShiftRight:
.1f92	46 0a		lsr $0a				lsr 	IFR0+IM2
.1f94	66 09		ror $09				ror 	IFR0+IM1
.1f96	66 08		ror $08				ror 	IFR0+IM0
.1f98	ca		dex				dex
.1f99	d0 f7		bne $1f92			bne 	_TTCShiftRight
.1f9b	fa		plx				plx
.1f9c	20 84 1f	jsr $1f84			jsr 	TOKTokeniseConstant
.1f9f					_TTCLess:
.1f9f	68		pla				pla
.1fa0	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1fa2	20 41 20	jsr $2041			jsr 	TOKWriteA
.1fa5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1fa6					TOKTokeniseDecimals:
.1fa6	20 51 20	jsr $2051			jsr 	TOKGetNext 					; consume the .
.1fa9	20 b9 21	jsr $21b9			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fac	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1fae	20 41 20	jsr $2041			jsr 	TOKWriteA
.1fb1	20 b6 1f	jsr $1fb6			jsr 	TOKOutputElementBuffer 		; then the buffer
.1fb4	18		clc				clc
.1fb5	60		rts				rts
.1fb6					TOKOutputElementBuffer:
.1fb6	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1fb9	20 41 20	jsr $2041			jsr 	TOKWriteA
.1fbc	a8		tay				tay 								; put in Y
.1fbd	f0 0c		beq $1fcb			beq 	_TOEExit 					; exit if empty which is okay.
.1fbf	a2 01		ldx #$01			ldx 	#1
.1fc1					_TOELoop:
.1fc1	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.1fc4	20 41 20	jsr $2041			jsr 	TOKWriteA
.1fc7	e8		inx				inx
.1fc8	88		dey				dey
.1fc9	d0 f6		bne $1fc1			bne 	_TOELoop
.1fcb					_TOEExit:
.1fcb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1fcc					TOKTokenise:
.1fcc	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.1fcf	8e 1c 06	stx $061c			stx 	TOKDataSource
.1fd2	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1fd4	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.1fd7	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1fd9	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1fdc	9c 01 04	stz $0401			stz 	TOKLineNumber
.1fdf	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1fe2					_TOKMainLoop:
.1fe2	20 4d 20	jsr $204d			jsr 	TOKGet 						; what follows.
.1fe5	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1fe7	f0 4f		beq $2038			beq 	_TOKExit
.1fe9	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1feb	d0 05		bne $1ff2			bne 	_TOKElement
.1fed	20 51 20	jsr $2051			jsr 	TOKGetNext
.1ff0	80 f0		bra $1fe2			bra 	_TOKMainLoop
.1ff2					_TOKElement:
.1ff2	20 37 22	jsr $2237			jsr 	TOKIsDigit 					; is it 0..9
.1ff5	90 0a		bcc $2001			bcc 	_TOKNotDigit
.1ff7	20 90 21	jsr $2190			jsr 	TOKTokeniseInteger 			; get integer
.1ffa	b0 43		bcs $203f			bcs 	_TOKFail 					; did it fail ?
.1ffc	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.1fff	80 e1		bra $1fe2			bra 	_TOKMainLoop
.2001					_TOKNotDigit:
.2001	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2004	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.2006	d0 07		bne $200f			bne 	_TOKNotHex
.2008	20 9a 20	jsr $209a			jsr 	TOKTokeniseHexadecimal
.200b	b0 32		bcs $203f			bcs 	_TOKFail
.200d	80 d3		bra $1fe2			bra 	_TOKMainLoop
.200f					_TOKNotHex:
.200f	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2011	d0 07		bne $201a			bne 	_TOKNotDecimal
.2013	20 a6 1f	jsr $1fa6			jsr 	TOKTokeniseDecimals
.2016	b0 27		bcs $203f			bcs 	_TOKFail
.2018	80 c8		bra $1fe2			bra 	_TOKMainLoop
.201a					_TOKNotDecimal:
.201a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.201c	d0 07		bne $2025			bne 	_TOKNotString
.201e	20 fe 21	jsr $21fe			jsr 	TOKTokeniseString
.2021	b0 1c		bcs $203f			bcs 	_TOKFail
.2023	80 bd		bra $1fe2			bra 	_TOKMainLoop
.2025					_TOKNotString:
.2025	20 54 22	jsr $2254			jsr 	TOKIsAlpha 					; identifier ?
.2028	b0 07		bcs $2031			bcs 	_TOKIdentifier
.202a	20 cd 21	jsr $21cd			jsr 	TOKTokenisePunctuation 		; punctuation
.202d	b0 10		bcs $203f			bcs 	_TOKFail
.202f	80 b1		bra $1fe2			bra 	_TOKMainLoop
.2031					_TOKIdentifier:
.2031	20 d4 20	jsr $20d4			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2034	b0 09		bcs $203f			bcs 	_TOKFail
.2036	80 aa		bra $1fe2			bra 	_TOKMainLoop
.2038					_TOKExit:
.2038	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.203a	20 41 20	jsr $2041			jsr 	TOKWriteA
.203d	18		clc				clc									; return with carry set.
.203e	60		rts				rts
.203f					_TOKFail:
.203f	38		sec				sec
.2040	60		rts				rts
.2041					TOKWriteA:
.2041	da		phx				phx
.2042	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2045	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2048	fa		plx				plx
.2049	ee 00 04	inc $0400			inc 	TOKLineSize
.204c	60		rts				rts
.204d					TOKGet:
.204d	18		clc				clc
.204e	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.2051					TOKGetNext:
.2051	38		sec				sec
.2052	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2055					TOKFindToken:
.2055	a2 aa		ldx #$aa			ldx 	#StandardTokens & $FF 		; do this table
.2057	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.2059	20 64 20	jsr $2064			jsr 	TOKFindTokenXY 				; find it, or not
.205c	90 04		bcc $2062			bcc 	_TOKFTFail
.205e	a2 00		ldx #$00			ldx 	#0
.2060	38		sec				sec
.2061	60		rts				rts
.2062					_TOKFTFail
.2062	18		clc				clc
.2063	60		rts				rts
.2064					TOKFindTokenXY:
.2064	86 22		stx $22				stx 	zTemp0 						; save token table address
.2066	84 23		sty $23				sty 	zTemp0+1
.2068	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.206a	8d 1f 06	sta $061f			sta 	TOKCurrent
.206d					_TOKFindLoop:
.206d	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.206f	18		clc				clc 		 						; clear carry in case of fail
.2070	30 17		bmi $2089			bmi 	_TOKExit 					; end of table, fail, so return CC.
.2072	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.2075	d0 13		bne $208a			bne 	_TOKNext 					; different, try next.
.2077	aa		tax				tax 								; number of chars to compare.
.2078	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.207a					_TOKCompare:
.207a	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.207c	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.207f	d0 09		bne $208a			bne 	_TOKNext 					; different ? try next
.2081	c8		iny				iny 								; compare next two
.2082	ca		dex				dex
.2083	d0 f5		bne $207a			bne 	_TOKCompare 				; until done X characters.
.2085	38		sec				sec
.2086	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.2089					_TOKExit:
.2089	60		rts				rts
.208a					_TOKNext:
.208a	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.208d	38		sec				sec 								; add length+1 to ptr
.208e	b2 22		lda ($22)			lda 	(zTemp0)
.2090	65 22		adc $22				adc 	zTemp0
.2092	85 22		sta $22				sta 	zTemp0
.2094	90 d7		bcc $206d			bcc 	_TOKFindLoop
.2096	e6 23		inc $23				inc 	zTemp0+1
.2098	80 d3		bra $206d			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.209a					TOKTokeniseHexadecimal:
.209a	20 51 20	jsr $2051			jsr 	TOKGetNext 					; consume the $
.209d	a2 08		ldx #$08			ldx 	#IFR0
.209f	20 b3 30	jsr $30b3			jsr 	IFloatSetZero 				; set R0 = 0
.20a2					_TTHLoop:
.20a2	20 4d 20	jsr $204d			jsr 	TOKGet 						; keep getting and copying while numeric.
.20a5	20 61 22	jsr $2261			jsr 	TOKIsHexadecimal
.20a8	90 20		bcc $20ca			bcc 	_TTHDone
.20aa	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.20ac	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.20af	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.20b2	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.20b5	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.20b8	20 51 20	jsr $2051			jsr 	TOKGetNext
.20bb	38		sec				sec 								; convert to decimal.
.20bc	e9 30		sbc #$30			sbc 	#48
.20be	c9 0a		cmp #$0a			cmp 	#10
.20c0	90 02		bcc $20c4			bcc 	_TTHNotAlpha
.20c2	e9 07		sbc #$07			sbc 	#7
.20c4					_TTHNotAlpha:
.20c4	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.20c6	85 08		sta $08				sta 	IFR0+IM0
.20c8	80 d8		bra $20a2			bra 	_TTHLoop
.20ca					_TTHDone:
.20ca	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.20cc	20 41 20	jsr $2041			jsr 	TOKWriteA
.20cf	20 84 1f	jsr $1f84			jsr 	TOKTokeniseConstant 		; write integer out.
.20d2	18		clc				clc
.20d3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.20d4					TOKTokeniseIdentifier:
.20d4	20 71 1f	jsr $1f71			jsr 	TOKResetElement 			; extract an identifier
.20d7					_TOKGetIdentifier:
.20d7	20 4d 20	jsr $204d			jsr 	TOKGet
.20da	20 21 22	jsr $2221			jsr 	TOKToUpper
.20dd	20 43 22	jsr $2243			jsr 	TOKIsIdentifierElement
.20e0	90 08		bcc $20ea			bcc 	_TOKEndIdent
.20e2	20 75 1f	jsr $1f75			jsr		TOKWriteElement
.20e5	20 51 20	jsr $2051			jsr 	TOKGetNext
.20e8	80 ed		bra $20d7			bra 	_TOKGetIdentifier
.20ea					_TOKEndIdent:
.20ea	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.20ec	d0 06		bne $20f4			bne 	_TOKNotString
.20ee	20 75 1f	jsr $1f75			jsr 	TOKWriteElement 			; add it
.20f1	20 51 20	jsr $2051			jsr 	TOKGetNext 					; consume it
.20f4					_TOKNotString:
.20f4	20 4d 20	jsr $204d			jsr 	TOKGet 						; finally check for (
.20f7	c9 28		cmp #$28			cmp 	#"("
.20f9	d0 06		bne $2101			bne 	_TOKNoArray
.20fb	20 75 1f	jsr $1f75			jsr 	TOKWriteElement 			; add it
.20fe	20 51 20	jsr $2051			jsr 	TOKGetNext 					; consume it
.2101					_TOKNoArray:
.2101	20 55 20	jsr $2055			jsr 	TOKFindToken 				; find it
.2104	90 0e		bcc $2114			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2106	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2108	f0 05		beq $210f			beq 	_TOKComment 				; yes, do comment code.
.210a	20 41 20	jsr $2041			jsr 	TOKWriteA
.210d	18		clc				clc
.210e	60		rts				rts
.210f					_TOKComment:
.210f	20 5b 21	jsr $215b			jsr 	TOKDoComment
.2112	18		clc				clc
.2113	60		rts				rts
.2114					_TOKIsVariable:
.2114	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2116					_TOKOutputBuffer:
.2116	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.2119	20 42 21	jsr $2142			jsr 	TOKTranslateIdentifier
.211c	20 41 20	jsr $2041			jsr 	TOKWriteA
.211f	e8		inx				inx
.2120	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.2123	20 43 22	jsr $2243			jsr 	TOKIsIdentifierElement
.2126	b0 ee		bcs $2116			bcs 	_TOKOutputBuffer
.2128	a8		tay				tay 								; last char in Y
.2129	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.212b	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.212d	f0 0e		beq $213d			beq 	_TOKIVExit
.212f	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2131	d0 04		bne $2137			bne 	_TOKIVCheckArray 			; no, check for (
.2133	1a		inc a				inc 	a 							; token is $7D
.2134	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.2137					_TOKIVCheckArray:
.2137	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2139	d0 02		bne $213d			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.213b	1a		inc a				inc 	a
.213c	1a		inc a				inc 	a
.213d					_TOKIVExit:
.213d	20 41 20	jsr $2041			jsr 	TOKWriteA 					; ending token
.2140	18		clc				clc
.2141	60		rts				rts
.2142					TOKTranslateIdentifier:
.2142	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.2144	f0 0f		beq $2155			beq 	_TTI64
.2146	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.2148	f0 0e		beq $2158			beq 	_TTI65
.214a	38		sec				sec
.214b	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.214d	10 03		bpl $2152			bpl 	_TTIExit
.214f	18		clc				clc 								; map 09 onto 26-35
.2150	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2152					_TTIExit:
.2152	09 40		ora #$40			ora 	#$40 						; correct range.
.2154	60		rts				rts
.2155	a9 64		lda #$64	_TTI64:	lda 	#$64
.2157	60		rts				rts
.2158	a9 65		lda #$65	_TTI65:	lda 	#$65
.215a	60		rts				rts
.215b					TOKDoComment:
.215b	20 4d 20	jsr $204d			jsr 	TOKGet 						; skip over spaces
.215e	c9 20		cmp #$20			cmp 	#' '
.2160	d0 05		bne $2167			bne 	_TOKEndSpaces
.2162	20 51 20	jsr $2051			jsr 	TOKGetNext
.2165	80 f4		bra $215b			bra 	TOKDoComment
.2167					_TOKEndSpaces:
.2167	48		pha				pha 								; save it
.2168	a9 97		lda #$97			lda 	#PR_REM 					; output the comment token.
.216a	20 41 20	jsr $2041			jsr 	TOKWriteA
.216d	68		pla				pla
.216e	f0 04		beq $2174			beq 	_TOKDCExit 					; end of line.
.2170	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.2172	d0 01		bne $2175			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.2174					_TOKDCExit:
.2174	60		rts				rts
.2175					_TOKDCDoLine:
.2175	20 71 1f	jsr $1f71			jsr 	TOKResetElement 			; start getting the string
.2178					_TOKDCLoop:
.2178	20 4d 20	jsr $204d			jsr 	TOKGet 						; check EOL
.217b	c9 00		cmp #$00			cmp 	#0
.217d	f0 08		beq $2187			beq 	_TOKDCEndComment
.217f	20 51 20	jsr $2051			jsr 	TOKGetNext 					; get and consume
.2182	20 75 1f	jsr $1f75			jsr 	TOKWriteElement
.2185	80 f1		bra $2178			bra 	_TOKDCLoop
.2187					_TOKDCEndComment:
.2187	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2189	20 41 20	jsr $2041			jsr 	TOKWriteA
.218c	20 b6 1f	jsr $1fb6			jsr 	TOKOutputElementBuffer
.218f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2190					TOKTokeniseInteger:
.2190	20 b9 21	jsr $21b9			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2193	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.2195	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2197	ad 1c 05	lda $051c			lda		TOKElement
.219a	20 17 2f	jsr $2f17			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.219d	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.21a0	f0 12		beq $21b4			beq 	_TOKNotLineNumber
.21a2	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.21a4	d0 0c		bne $21b2			bne 	_TOKBadLineNumeber
.21a6	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.21a8	8d 01 04	sta $0401			sta 	TOKLineNumber
.21ab	a5 09		lda $09				lda 	IFR0+IM1
.21ad	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.21b0	18		clc				clc
.21b1	60		rts				rts
.21b2					_TOKBadLineNumeber:
.21b2	38		sec				sec
.21b3	60		rts				rts
.21b4					_TOKNotLineNumber:
.21b4	20 84 1f	jsr $1f84			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.21b7	18		clc				clc
.21b8	60		rts				rts
.21b9					TOKExtractInteger:
.21b9	20 71 1f	jsr $1f71			jsr 	TOKResetElement 			; restart
.21bc					_TTILoop:
.21bc	20 4d 20	jsr $204d			jsr 	TOKGet 						; keep getting and copying while numeric.
.21bf	20 37 22	jsr $2237			jsr 	TOKIsDigit
.21c2	90 08		bcc $21cc			bcc 	_TOKEIExit
.21c4	20 75 1f	jsr $1f75			jsr 	TOKWriteElement
.21c7	20 51 20	jsr $2051			jsr 	TOKGetNext
.21ca	80 f0		bra $21bc			bra 	_TTILoop
.21cc					_TOKEIExit:
.21cc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.21cd					TOKTokenisePunctuation:
.21cd	20 71 1f	jsr $1f71			jsr 	TOKResetElement 			; copy first punctuation character into element.
.21d0	20 51 20	jsr $2051			jsr 	TOKGetNext
.21d3	20 75 1f	jsr $1f75			jsr 	TOKWriteElement
.21d6	20 4d 20	jsr $204d			jsr 	TOKGet 						; what follows ?
.21d9	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.21db	f0 10		beq $21ed			beq 	_TTPOne
.21dd	20 4b 22	jsr $224b			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.21e0	b0 0b		bcs $21ed			bcs 	_TTPOne 					; these speed things up a bit.
.21e2	20 75 1f	jsr $1f75			jsr 	TOKWriteElement 			; this is what we will search for.
.21e5	20 55 20	jsr $2055			jsr 	TOKFindToken
.21e8	b0 0a		bcs $21f4			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.21ea	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.21ed					_TTPOne:
.21ed	20 55 20	jsr $2055			jsr 	TOKFindToken 				; look for one character punctuation
.21f0	b0 07		bcs $21f9			bcs 	_TTPOutputExit 				; we found it
.21f2	38		sec				sec 								; not recognised.
.21f3	60		rts				rts
.21f4					_TTPConsumeExit:
.21f4	48		pha				pha
.21f5	20 51 20	jsr $2051			jsr 	TOKGetNext 					; get the 2nd char out.
.21f8	68		pla				pla
.21f9					_TTPOutputExit:
.21f9	20 41 20	jsr $2041			jsr  	TOKWriteA 					; write token out
.21fc	18		clc				clc
.21fd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.21fe					TOKTokeniseString:
.21fe	20 51 20	jsr $2051			jsr 	TOKGetNext 					; consume the "
.2201	20 71 1f	jsr $1f71			jsr 	TOKResetElement 			; start getting the string
.2204					_TOKTSLoop:
.2204	20 4d 20	jsr $204d			jsr 	TOKGet 						; check EOL
.2207	c9 00		cmp #$00			cmp 	#0
.2209	f0 0c		beq $2217			beq 	_TOKTSExit
.220b	20 51 20	jsr $2051			jsr 	TOKGetNext 					; get and consume
.220e	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2210	f0 05		beq $2217			beq 	_TOKTSExit
.2212	20 75 1f	jsr $1f75			jsr 	TOKWriteElement
.2215	80 ed		bra $2204			bra 	_TOKTSLoop
.2217					_TOKTSExit:
.2217	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2219	20 41 20	jsr $2041			jsr 	TOKWriteA
.221c	20 b6 1f	jsr $1fb6			jsr 	TOKOutputElementBuffer
.221f	18		clc				clc
.2220	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2221					TOKToUpper:
.2221	c9 61		cmp #$61			cmp 	#"a"
.2223	90 06		bcc $222b			bcc 	_TTUNotLower
.2225	c9 7b		cmp #$7b			cmp 	#"z"+1
.2227	b0 02		bcs $222b			bcs 	_TTUNotLower
.2229	49 20		eor #$20			eor 	#$20
.222b					_TTUNotLower:
.222b	60		rts				rts
.222c					TOKToLower:
.222c	c9 41		cmp #$41			cmp 	#"A"
.222e	90 06		bcc $2236			bcc 	_TTUNotUpper
.2230	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2232	b0 02		bcs $2236			bcs 	_TTUNotUpper
.2234	49 20		eor #$20			eor 	#$20
.2236					_TTUNotUpper:
.2236	60		rts				rts
.2237					TOKIsDigit:
.2237	c9 30		cmp #$30			cmp 	#"0"
.2239	90 06		bcc $2241			bcc 	TOKFail
.223b	c9 3a		cmp #$3a			cmp 	#"9"+1
.223d	b0 02		bcs $2241			bcs 	TOKFail
.223f					TOKSucceed:
.223f	38		sec				sec
.2240	60		rts				rts
.2241					TOKFail:
.2241	18		clc				clc
.2242	60		rts				rts
.2243					TOKIsIdentifierElement:
.2243	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.2245	f0 f8		beq $223f			beq 	TOKSucceed
.2247	c9 5f		cmp #$5f			cmp 	#"_"
.2249	f0 f4		beq $223f			beq 	TOKSucceed 					; else fall through to alphanumeric
.224b					TOKIsAlphaNumeric:
.224b	20 54 22	jsr $2254			jsr 	TOKIsAlpha
.224e	b0 ef		bcs $223f			bcs 	TOKSucceed
.2250	20 37 22	jsr $2237			jsr 	TOKIsDigit
.2253	60		rts				rts
.2254					TOKIsAlpha:
.2254	20 21 22	jsr $2221			jsr 	TOKToUpper
.2257	c9 41		cmp #$41			cmp 	#"A"
.2259	90 e6		bcc $2241			bcc 	TOKFail
.225b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.225d	b0 e2		bcs $2241			bcs 	TOKFail
.225f	80 de		bra $223f			bra 	TOKSucceed
.2261					TOKIsHexadecimal:
.2261	20 37 22	jsr $2237			jsr		TOKIsDigit
.2264	b0 d9		bcs $223f			bcs 	TOKSucceed
.2266	20 54 22	jsr $2254			jsr 	TOKIsAlpha
.2269	90 d6		bcc $2241			bcc 	TOKFail
.226b	c9 47		cmp #$47			cmp 	#"F"+1
.226d	b0 d2		bcs $2241			bcs 	TOKFail
.226f	80 ce		bra $223f			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2271					Command_CALL:
.2271	a9 42		lda #$42			lda 	#STK_CALL
.2273	20 24 27	jsr $2724			jsr 	StackOpen
.2276	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.2278	29 c0		and #$c0			and 	#$C0
.227a	c9 40		cmp #$40			cmp 	#$40
.227c	d0 29		bne $22a7			bne 	_CCSyntax
.227e	20 f4 29	jsr $29f4			jsr 	VARGetInfo 					; get the information
.2281	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 				; check right bracket follows.
.2284	20 a6 29	jsr $29a6			jsr 	VARFind 					; exists ?
.2287	90 21		bcc $22aa			bcc 	_CCUnknown
.2289	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.228b	85 22		sta $22				sta 	zTemp0
.228d	20 58 27	jsr $2758			jsr 	STKSaveCodePosition 		; save return address on stack.
.2290	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2292	b1 22		lda ($22),y			lda 	(zTemp0),y
.2294	c9 ff		cmp #$ff			cmp 	#$FF
.2296	d0 12		bne $22aa			bne 	_CCUnknown
.2298	88		dey				dey 								; get Y offset to stack
.2299	b1 22		lda ($22),y			lda 	(zTemp0),y
.229b	48		pha				pha
.229c	88		dey				dey 								; get address
.229d	b1 22		lda ($22),y			lda 	(zTemp0),y
.229f	85 19		sta $19				sta 	codePtr+1
.22a1	b2 22		lda ($22)			lda 	(zTemp0)
.22a3	85 18		sta $18				sta 	codePtr
.22a5	7a		ply				ply 								; restore Y
.22a6	60		rts				rts
.22a7					_CCSyntax:
.22a7	4c 56 25	jmp $2556		jmp	ErrorV_syntax
.22aa					_CCUnknown:
.22aa	4c cb 26	jmp $26cb		jmp	ErrorV_unknown
.22ad					Command_ENDPROC:
.22ad	a9 42		lda #$42			lda 	#STK_CALL
.22af	20 50 27	jsr $2750			jsr 	StackCheckFrame
.22b2	20 6a 27	jsr $276a			jsr 	STKLoadCodePosition 		; return
.22b5	20 42 27	jsr $2742			jsr 	StackClose
.22b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.22b9					Command_DO:
.22b9	a9 22		lda #$22			lda 	#STK_DO
.22bb	20 24 27	jsr $2724			jsr 	StackOpen
.22be	20 58 27	jsr $2758			jsr 	STKSaveCodePosition 		; save loop position
.22c1	60		rts				rts
.22c2					Command_EXIT:
.22c2	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.22c4	20 50 27	jsr $2750			jsr 	StackCheckFrame
.22c7	20 42 27	jsr $2742			jsr 	StackClose 					; close it
.22ca	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.22cc	aa		tax				tax
.22cd	20 66 24	jsr $2466			jsr 	ScanForward
.22d0	60		rts				rts
.22d1					Command_LOOP:
.22d1	a9 22		lda #$22			lda 	#STK_DO
.22d3	20 50 27	jsr $2750			jsr 	StackCheckFrame
.22d6	20 6a 27	jsr $276a			jsr 	STKLoadCodePosition 		; loop back
.22d9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.22da					Command_FOR:
.22da	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.22dc	20 24 27	jsr $2724			jsr 	StackOpen
.22df	20 c3 12	jsr $12c3			jsr 	CommandLET 					; do "I = 1" bit
.22e2	5a		phy				phy 								; save variable address to +4,+5
.22e3	a0 04		ldy #$04			ldy 	#4
.22e5	a5 22		lda $22				lda 	zTemp0
.22e7	91 2a		sta ($2a),y			sta 	(basicStack),y
.22e9	c8		iny				iny
.22ea	a5 23		lda $23				lda 	zTemp0+1
.22ec	91 2a		sta ($2a),y			sta 	(basicStack),y
.22ee	7a		ply				ply
.22ef	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.22f1	20 1b 27	jsr $271b			jsr 	ERRCheckA
.22f4	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.22f7	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.22f9	a2 08		ldx #$08			ldx 	#IFR0
.22fb	20 50 23	jsr $2350			jsr 	CFSaveR0X
.22fe	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2300	c9 91		cmp #$91			cmp 	#PR_STEP
.2302	d0 06		bne $230a			bne 	_CFStep1
.2304	c8		iny				iny 								; consume step
.2305	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; evaluate STEP
.2308	80 24		bra $232e			bra 	_CFWriteStep
.230a					_CFStep1:
.230a	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.230c	a9 01		lda #$01			lda 	#1
.230e	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.2311	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2312	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2314	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2316	85 22		sta $22				sta 	zTemp0
.2318	c8		iny				iny
.2319	b1 2a		lda ($2a),y			lda 	(basicStack),y
.231b	85 23		sta $23				sta 	zTemp0+1
.231d	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.231f	b1 22		lda ($22),y			lda 	(zTemp0),y
.2321	d0 0a		bne $232d			bne 	_CFNotOptimised
.2323	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2325	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2327	d0 04		bne $232d			bne 	_CFNotOptimised
.2329	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.232b	85 0b		sta $0b				sta 	IFR0+IExp
.232d					_CFNotOptimised:
.232d	7a		ply				ply
.232e					_CFWriteStep:
.232e	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2330	a9 06		lda #$06			lda 	#6
.2332	20 50 23	jsr $2350			jsr 	CFSaveR0X
.2335	20 58 27	jsr $2758			jsr 	STKSaveCodePosition 		; save loop position
.2338	60		rts				rts
.2339					CFLoadR0X:
.2339	5a		phy				phy
.233a	a8		tay				tay
.233b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.233d	95 00		sta $00,x			sta 	IM0,x
.233f	c8		iny				iny
.2340	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2342	95 01		sta $01,x			sta 	IM1,x
.2344	c8		iny				iny
.2345	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2347	95 02		sta $02,x			sta 	IM2,x
.2349	c8		iny				iny
.234a	b1 2a		lda ($2a),y			lda 	(basicStack),y
.234c	95 03		sta $03,x			sta 	IExp,x
.234e	7a		ply				ply
.234f	60		rts				rts
.2350					CFSaveR0X:
.2350	5a		phy				phy
.2351	a8		tay				tay
.2352	b5 00		lda $00,x			lda 	IM0,x
.2354	91 2a		sta ($2a),y			sta 	(basicStack),y
.2356	c8		iny				iny
.2357	b5 01		lda $01,x			lda 	IM1,x
.2359	91 2a		sta ($2a),y			sta 	(basicStack),y
.235b	c8		iny				iny
.235c	b5 02		lda $02,x			lda 	IM2,x
.235e	91 2a		sta ($2a),y			sta 	(basicStack),y
.2360	c8		iny				iny
.2361	b5 03		lda $03,x			lda 	IExp,x
.2363	91 2a		sta ($2a),y			sta 	(basicStack),y
.2365	7a		ply				ply
.2366	60		rts				rts
.2367					Command_NEXT:
.2367	a9 37		lda #$37			lda 	#STK_FOR
.2369	20 50 27	jsr $2750			jsr 	StackCheckFrame
.236c	5a		phy				phy 								; check optimised loop
.236d	a0 09		ldy #$09			ldy 	#9
.236f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2371	7a		ply				ply
.2372	0a		asl a				asl 	a
.2373	b0 35		bcs $23aa			bcs 	_CNOptimised
.2375	20 e1 23	jsr $23e1			jsr 	_CNLoadValue 				; load index value to R0.
.2378	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.237a	a9 06		lda #$06			lda 	#6
.237c	20 39 23	jsr $2339			jsr 	CFLoadR0X
.237f	20 a9 2a	jsr $2aa9			jsr 	IFloatAdd 					; add them together and write back.
.2382	20 04 24	jsr $2404			jsr 	_CNSaveValue
.2385	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2387	a2 0c		ldx #$0c			ldx 	#IFR1
.2389	20 39 23	jsr $2339			jsr 	CFLoadR0X
.238c	20 81 2d	jsr $2d81			jsr 	IFloatCompare 				; compare terminal vs current
.238f	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2391	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero
.2394	f0 10		beq $23a6			beq 	_CNLoopBack
.2396	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2398	5a		phy				phy
.2399	a0 09		ldy #$09			ldy 	#6+IExp
.239b	51 2a		eor ($2a),y			eor 	(basicStack),y
.239d	7a		ply				ply
.239e	29 40		and #$40			and 	#IFSign
.23a0	f0 04		beq $23a6			beq 	_CNLoopBack
.23a2					_CNExitLoop:
.23a2	20 42 27	jsr $2742			jsr 	StackClose		 			; return
.23a5	60		rts				rts
.23a6					_CNLoopBack:
.23a6	20 6a 27	jsr $276a			jsr 	STKLoadCodePosition 		; loop back
.23a9	60		rts				rts
.23aa					_CNOptimised:
.23aa	5a		phy				phy
.23ab	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.23ad	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23af	85 26		sta $26				sta 	zTemp2
.23b1	c8		iny				iny
.23b2	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23b4	85 27		sta $27				sta 	zTemp2+1
.23b6	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.23b8					_CNIncrement:
.23b8	c8		iny				iny
.23b9	b1 26		lda ($26),y			lda 	(zTemp2),y
.23bb	1a		inc a				inc 	a
.23bc	91 26		sta ($26),y			sta 	(zTemp2),y
.23be	f0 f8		beq $23b8			beq 	_CNIncrement
.23c0	18		clc				clc 								; point zTemp0 to terminal value
.23c1	a5 2a		lda $2a				lda 	basicStack
.23c3	69 0a		adc #$0a			adc 	#10
.23c5	85 22		sta $22				sta 	zTemp0
.23c7	a5 2b		lda $2b				lda 	basicStack+1
.23c9	69 00		adc #$00			adc 	#0
.23cb	85 23		sta $23				sta 	zTemp0+1
.23cd	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.23cf	b2 26		lda ($26)			lda 	(zTemp2)
.23d1	d2 22		cmp ($22)			cmp 	(zTemp0)
.23d3	b1 26		lda ($26),y			lda 	(zTemp2),y
.23d5	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.23d7	c8		iny				iny
.23d8	b1 26		lda ($26),y			lda 	(zTemp2),y
.23da	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.23dc	7a		ply				ply
.23dd	b0 c3		bcs $23a2			bcs 	_CNExitLoop
.23df	80 c5		bra $23a6			bra 	_CNLoopBack
.23e1					_CNLoadValue:
.23e1	5a		phy				phy
.23e2	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.23e4	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23e6	85 26		sta $26				sta 	zTemp2
.23e8	c8		iny				iny
.23e9	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23eb	85 27		sta $27				sta 	zTemp2+1
.23ed	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.23ef	b1 26		lda ($26),y			lda 	(zTemp2),y
.23f1	85 08		sta $08				sta 	IFR0+IM0
.23f3	c8		iny				iny
.23f4	b1 26		lda ($26),y			lda 	(zTemp2),y
.23f6	85 09		sta $09				sta 	IFR0+IM1
.23f8	c8		iny				iny
.23f9	b1 26		lda ($26),y			lda 	(zTemp2),y
.23fb	85 0a		sta $0a				sta 	IFR0+IM2
.23fd	c8		iny				iny
.23fe	b1 26		lda ($26),y			lda 	(zTemp2),y
.2400	85 0b		sta $0b				sta 	IFR0+IExp
.2402	7a		ply				ply
.2403	60		rts				rts
.2404					_CNSaveValue:
.2404	5a		phy				phy
.2405	a0 00		ldy #$00			ldy 	#0
.2407	a5 08		lda $08				lda 	IFR0+IM0
.2409	91 26		sta ($26),y			sta 	(zTemp2),y
.240b	c8		iny				iny
.240c	a5 09		lda $09				lda 	IFR0+IM1
.240e	91 26		sta ($26),y			sta 	(zTemp2),y
.2410	c8		iny				iny
.2411	a5 0a		lda $0a				lda 	IFR0+IM2
.2413	91 26		sta ($26),y			sta 	(zTemp2),y
.2415	c8		iny				iny
.2416	a5 0b		lda $0b				lda 	IFR0+IExp
.2418	91 26		sta ($26),y			sta 	(zTemp2),y
.241a	7a		ply				ply
.241b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.241c					IfCommand:
.241c	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; Get the if test.
.241f	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2421	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2423	d0 0c		bne $2431			bne 	_IfStructured 				; we still support it.
.2425	c8		iny				iny 								; consume THEN
.2426	a2 08		ldx #$08			ldx 	#IFR0
.2428	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero 			; is it zero
.242b	f0 01		beq $242e			beq 	_IfFail 					; if fail, go to next line
.242d	60		rts				rts 								; if THEN just continue
.242e					_IfFail:
.242e	4c d1 14	jmp $14d1			jmp 	RUNEndOfLine
.2431					_IfStructured:
.2431	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero 			; is it zero
.2434	d0 07		bne $243d			bne 	_IfExit 					; if not, then continue normally.
.2436	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2438	a2 85		ldx #$85			ldx 	#PR_ENDIF
.243a	20 66 24	jsr $2466			jsr 	ScanForward 				; and run from there
.243d					_IfExit:
.243d	60		rts				rts
.243e					ElseCode:
.243e	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2440	aa		tax				tax 								; so just go to the structure exit
.2441	20 66 24	jsr $2466			jsr 	ScanForward
.2444	60		rts				rts
.2445					EndIf:
.2445	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2446					Command_REPEAT:
.2446	a9 02		lda #$02			lda 	#STK_REPEAT
.2448	20 24 27	jsr $2724			jsr 	StackOpen
.244b	20 58 27	jsr $2758			jsr 	STKSaveCodePosition 		; save loop position
.244e	60		rts				rts
.244f					Command_UNTIL:
.244f	a9 02		lda #$02			lda 	#STK_REPEAT
.2451	20 50 27	jsr $2750			jsr 	StackCheckFrame
.2454	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; work out the test
.2457	a2 08		ldx #$08			ldx 	#IFR0
.2459	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero 			; check if zero
.245c	f0 04		beq $2462			beq 	_CULoopBack 				; if so keep looping
.245e	20 42 27	jsr $2742			jsr 	StackClose		 			; return
.2461	60		rts				rts
.2462					_CULoopBack:
.2462	20 6a 27	jsr $276a			jsr 	STKLoadCodePosition 		; loop back
.2465	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2466					ScanForward:
.2466	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.2468	86 23		stx $23				stx 	zTemp0+1
.246a	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.246c					_ScanForwardLoop:
.246c	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.246e	d0 0a		bne $247a			bne 	_ScanNoCheck
.2470	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2472	c5 22		cmp $22				cmp 	zTemp0
.2474	f0 49		beq $24bf			beq 	_ScanExit
.2476	c5 23		cmp $23				cmp 	zTemp0+1
.2478	f0 45		beq $24bf			beq 	_ScanExit
.247a					_ScanNoCheck:
.247a	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.247c	c8		iny				iny
.247d	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.247f	f0 37		beq $24b8			beq		_ScanDataItem
.2481	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2483	f0 33		beq $24b8			beq 	_ScanDataItem
.2485	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2487	f0 1b		beq $24a4			beq 	_ScanNextLine
.2489	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.248b	d0 01		bne $248e			bne 	_ScanNoShift
.248d	c8		iny				iny
.248e					_ScanNoShift:
.248e	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2490	b0 da		bcs $246c			bcs 	_ScanForwardLoop
.2492	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2494	90 d6		bcc $246c			bcc 	_ScanForwardLoop
.2496	aa		tax				tax 								; access the table to get the adjustment.
.2497	18		clc				clc
.2498	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.249a	7d 1e 1a	adc $1a1e,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.249d	85 24		sta $24				sta 	zTemp1
.249f	10 cb		bpl $246c			bpl		_ScanForwardLoop 			; error if -ve ?
.24a1	4c e2 25	jmp $25e2		jmp	ErrorV_structure
.24a4					_ScanNextLine:
.24a4	18		clc				clc	 								; forward to next line.
.24a5	b2 18		lda ($18)			lda 	(codePtr)
.24a7	65 18		adc $18				adc 	codePtr
.24a9	85 18		sta $18				sta 	codePtr
.24ab	90 02		bcc $24af			bcc 	_ScanNoCarry
.24ad	e6 19		inc $19				inc 	codePtr+1
.24af					_ScanNoCarry:
.24af	a0 03		ldy #$03			ldy 	#3
.24b1	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.24b3	d0 b7		bne $246c			bne 	_ScanForwardLoop
.24b5	4c e2 25	jmp $25e2		jmp	ErrorV_structure
.24b8					_ScanDataItem:
.24b8	98		tya				tya
.24b9	38		sec				sec
.24ba	71 18		adc ($18),y			adc 	(codePtr),y
.24bc	a8		tay				tay
.24bd	80 ad		bra $246c			bra 	_ScanForwardLoop
.24bf					_ScanExit:
.24bf	c8		iny				iny 								; consume final token.
.24c0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.24c1					ScanProcedures:
.24c1	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.24c3	48		pha				pha
.24c4	a5 19		lda $19				lda 	codePtr+1
.24c6	48		pha				pha
.24c7	5a		phy				phy
.24c8	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.24cb	85 19		sta $19				sta 	codePtr+1
.24cd	64 18		stz $18				stz 	codePtr
.24cf					_SPLoop:
.24cf	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.24d1	f0 18		beq $24eb			beq 	_SPExit
.24d3	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.24d5	b1 18		lda ($18),y			lda 	(codePtr),y
.24d7	c9 88		cmp #$88			cmp 	#PR_PROC
.24d9	d0 03		bne $24de			bne 	_SPNext
.24db	20 f3 24	jsr $24f3			jsr 	_SPSetupRecord
.24de					_SPNext:
.24de	18		clc				clc 								; forward to next
.24df	b2 18		lda ($18)			lda 	(codePtr)
.24e1	65 18		adc $18				adc 	codePtr
.24e3	85 18		sta $18				sta 	codePtr
.24e5	90 e8		bcc $24cf			bcc 	_SPLoop
.24e7	e6 19		inc $19				inc 	codePtr+1
.24e9	80 e4		bra $24cf			bra 	_SPLoop
.24eb					_SPExit:
.24eb	7a		ply				ply
.24ec	68		pla				pla
.24ed	85 19		sta $19				sta 	codePtr+1
.24ef	68		pla				pla
.24f0	85 18		sta $18				sta 	codePtr
.24f2	60		rts				rts
.24f3					_SPSetupRecord:
.24f3	c8		iny				iny 								; check identifier follows
.24f4	b1 18		lda ($18),y			lda 	(codePtr),y
.24f6	29 c0		and #$c0			and 	#$C0
.24f8	c9 40		cmp #$40			cmp 	#$40
.24fa	d0 27		bne $2523			bne 	_SPSyntax
.24fc	20 f4 29	jsr $29f4			jsr 	VARGetInfo 					; get the information
.24ff	20 0b 27	jsr $270b			jsr 	ERRCheckRParen 				; check right bracket follows.
.2502	20 a6 29	jsr $29a6			jsr 	VARFind 					; already exists ?
.2505	b0 1f		bcs $2526			bcs 	_SPUsed 					; error !
.2507	20 52 29	jsr $2952			jsr 	VARCreate 					; create, XA points to the data.
.250a	85 22		sta $22				sta 	zTemp0
.250c	86 23		stx $23				stx 	zTemp0+1
.250e	5a		phy				phy 								; save Y pos on stack
.250f	a0 01		ldy #$01			ldy 	#1
.2511	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2513	92 22		sta ($22)			sta 	(zTemp0)
.2515	a5 19		lda $19				lda 	codePtr+1
.2517	91 22		sta ($22),y			sta 	(zTemp0),y
.2519	c8		iny				iny
.251a	68		pla				pla
.251b	91 22		sta ($22),y			sta 	(zTemp0),y
.251d	c8		iny				iny
.251e	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2520	91 22		sta ($22),y			sta 	(zTemp0),y
.2522	60		rts				rts
.2523					_SPSyntax:
.2523	4c 56 25	jmp $2556		jmp	ErrorV_syntax
.2526					_SPUsed:
.2526	4c ad 26	jmp $26ad		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2529					Command_WHILE:
.2529	5a		phy				phy 								; save position of the test
.252a	20 0b 17	jsr $170b			jsr 	EXPEvalNumber 				; work out the while test.
.252d	a2 08		ldx #$08			ldx 	#IFR0
.252f	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero 			; check if zero
.2532	f0 0e		beq $2542			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2534	98		tya				tya 								; position *after* test.
.2535	7a		ply				ply 								; restore position before test, at WHILE
.2536	88		dey				dey 								; so we execute the WHILE command again.
.2537	48		pha				pha 								; push after test on the stack
.2538	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.253a	20 24 27	jsr $2724			jsr 	StackOpen
.253d	20 58 27	jsr $2758			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2540	7a		ply				ply 								; restore the position *after* the test
.2541	60		rts				rts
.2542					_WHExitLoop:
.2542	68		pla				pla 								; throw post loop position
.2543	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2545	aa		tax				tax
.2546	20 66 24	jsr $2466			jsr 	ScanForward
.2549	60		rts				rts
.254a					Command_WEND:
.254a	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.254c	20 50 27	jsr $2750			jsr 	StackCheckFrame
.254f	20 6a 27	jsr $276a			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2552	20 42 27	jsr $2742			jsr 	StackClose		 			; erase the frame
.2555	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2556					ErrorV_syntax:
.2556	20 43 28	jsr $2843		jsr	ErrorHandler
>2559	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2561	45 72 72 6f 72 00
.2567					ErrorV_range:
.2567	20 43 28	jsr $2843		jsr	ErrorHandler
>256a	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2572	52 61 6e 67 65 00
.2578					ErrorV_value:
.2578	20 43 28	jsr $2843		jsr	ErrorHandler
>257b	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2583	75 65 00
.2586					ErrorV_type:
.2586	20 43 28	jsr $2843		jsr	ErrorHandler
>2589	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2591	73 6d 61 74 63 68 00
.2598					ErrorV_unimplemented:
.2598	20 43 28	jsr $2843		jsr	ErrorHandler
>259b	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>25a3	6c 65 6d 65 6e 74 65 64 00
.25ac					ErrorV_assert:
.25ac	20 43 28	jsr $2843		jsr	ErrorHandler
>25af	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>25b7	46 61 69 6c 00
.25bc					ErrorV_internal:
.25bc	20 43 28	jsr $2843		jsr	ErrorHandler
>25bf	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>25c7	6c 20 45 72 72 6f 72 00
.25cf					ErrorV_divzero:
.25cf	20 43 28	jsr $2843		jsr	ErrorHandler
>25d2	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>25da	42 79 20 5a 65 72 6f 00
.25e2					ErrorV_structure:
.25e2	20 43 28	jsr $2843		jsr	ErrorHandler
>25e5	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>25ed	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.25fa					ErrorV_stop:
.25fa	20 43 28	jsr $2843		jsr	ErrorHandler
>25fd	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2605	20 53 74 6f 70 70 65 64 00
.260e					ErrorV_data:
.260e	20 43 28	jsr $2843		jsr	ErrorHandler
>2611	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2619	44 61 74 61 00
.261e					ErrorV_redefine:
.261e	20 43 28	jsr $2843		jsr	ErrorHandler
>2621	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2629	65 64 65 66 69 6e 65 64 00
.2632					ErrorV_index:
.2632	20 43 28	jsr $2843		jsr	ErrorHandler
>2635	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>263d	61 79 20 49 6e 64 65 78 00
.2646					ErrorV_memory:
.2646	20 43 28	jsr $2843		jsr	ErrorHandler
>2649	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2651	4d 65 6d 6f 72 79 00
.2658					ErrorV_uninitialised:
.2658	20 43 28	jsr $2843		jsr	ErrorHandler
>265b	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2663	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2673					ErrorV_string:
.2673	20 43 28	jsr $2843		jsr	ErrorHandler
>2676	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>267e	69 6e 67 20 4c 65 6e 67 74 68 00
.2689					ErrorV_variable:
.2689	20 43 28	jsr $2843		jsr	ErrorHandler
>268c	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2694	65 20 4d 69 73 73 69 6e 67 00
.269e					ErrorV_stack:
.269e	20 43 28	jsr $2843		jsr	ErrorHandler
>26a1	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>26a9	75 6c 6c 00
.26ad					ErrorV_dupproc:
.26ad	20 43 28	jsr $2843		jsr	ErrorHandler
>26b0	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>26b8	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>26c8	65 64 00
.26cb					ErrorV_unknown:
.26cb	20 43 28	jsr $2843		jsr	ErrorHandler
>26ce	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>26d6	20 50 72 6f 63 65 64 75 72 65 00
.26e1					ErrorV_break:
.26e1	20 43 28	jsr $2843		jsr	ErrorHandler
>26e4	05 42 72 65 61 6b 00			.text	5,"Break",0
.26eb					ErrorV_line:
.26eb	20 43 28	jsr $2843		jsr	ErrorHandler
>26ee	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>26f6	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2703					ERRCheckLParen:
.2703	b1 18		lda ($18),y			lda 	(codePtr),y
.2705	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2707	d0 18		bne $2721			bne 	ERRSyntaxError
.2709	c8		iny				iny
.270a	60		rts				rts
.270b					ERRCheckRParen:
.270b	b1 18		lda ($18),y			lda 	(codePtr),y
.270d	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.270f	d0 10		bne $2721			bne 	ERRSyntaxError
.2711	c8		iny				iny
.2712	60		rts				rts
.2713					ERRCheckComma:
.2713	b1 18		lda ($18),y			lda 	(codePtr),y
.2715	c9 99		cmp #$99			cmp 	#PR_COMMA
.2717	d0 08		bne $2721			bne 	ERRSyntaxError
.2719	c8		iny				iny
.271a	60		rts				rts
.271b					ERRCheckA:
.271b	d1 18		cmp ($18),y			cmp 	(codePtr),y
.271d	d0 02		bne $2721			bne 	ERRSyntaxError
.271f	c8		iny				iny
.2720	60		rts				rts
.2721					ERRSyntaxError:
.2721	4c 56 25	jmp $2556		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2724					StackOpen:
.2724	48		pha				pha 								; save frame byte
.2725	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.2727	0a		asl a				asl 	a 							; claim twice this for storage
.2728	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.272a	38		sec				sec 								; so basically subtracting from
.272b	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.272d	85 2a		sta $2a				sta 	basicStack
.272f	b0 0a		bcs $273b			bcs 	_SONoBorrow
>2731	db						.byte 	$DB
.2732	c6 2b		dec $2b				dec 	basicStack+1
.2734	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.2736	cd 20 06	cmp $0620			cmp 	basicStackEnd
.2739	f0 04		beq $273f			beq 	_SOMemory
.273b					_SONoBorrow:
.273b	68		pla				pla 								; get marker back and write at TOS
.273c	92 2a		sta ($2a)			sta 	(basicStack)
.273e	60		rts				rts
.273f					_SOMemory:
.273f	4c 9e 26	jmp $269e		jmp	ErrorV_stack
.2742					StackClose:
.2742	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.2744	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2746	0a		asl a				asl 	a 							; claim twice this.
.2747	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.2749	85 2a		sta $2a				sta 	basicStack
.274b	90 02		bcc $274f			bcc 	_SCExit
.274d	e6 2b		inc $2b				inc 	basicStack+1
.274f					_SCExit:
.274f	60		rts				rts
.2750					StackCheckFrame:
.2750	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.2752	d0 01		bne $2755			bne 	_SCFError 					; different, we have structures mixed up
.2754	60		rts				rts
.2755					_SCFError:
.2755	4c e2 25	jmp $25e2		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2758					STKSaveCodePosition:
.2758	5a		phy				phy
.2759	98		tya				tya 								; save Y at offset 1.
.275a	a0 01		ldy #$01			ldy 	#1
.275c	91 2a		sta ($2a),y			sta 	(basicStack),y
.275e	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2760	c8		iny				iny
.2761	91 2a		sta ($2a),y			sta 	(basicStack),y
.2763	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2765	c8		iny				iny
.2766	91 2a		sta ($2a),y			sta 	(basicStack),y
.2768	7a		ply				ply
.2769	60		rts				rts
.276a					STKLoadCodePosition:
.276a	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.276c	b1 2a		lda ($2a),y			lda 	(basicStack),y
.276e	85 19		sta $19				sta 	codePtr+1
.2770	88		dey				dey
.2771	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2773	85 18		sta $18				sta 	codePtr
.2775	88		dey				dey
.2776	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.2778	a8		tay				tay
.2779	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.277a					StackReset:
.277a	48		pha				pha 								; save top of memory
.277b	3a		dec a				dec 	a  							; end of stack = previous byte
.277c	85 2b		sta $2b				sta 	basicStack+1
.277e	a9 ff		lda #$ff			lda 	#$FF
.2780	85 2a		sta $2a				sta 	basicStack
.2782	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2784	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2786	68		pla				pla 								; allocate pages for stack.
.2787	38		sec				sec
.2788	e9 02		sbc #$02			sbc 	#STACKPAGES
.278a	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.278d	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.278e					StringConcrete:
.278e	5a		phy				phy 								; save position on stack
.278f	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2791	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2793	b0 41		bcs $27d6			bcs 	_SALengthError
.2795	18		clc				clc 								; length of the new string
.2796	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2798	90 02		bcc $279c			bcc 	_SAHaveLength
.279a	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.279c					_SAHaveLength:
.279c	48		pha				pha 								; save length to be allocated for concreting.
.279d	38		sec				sec
.279e	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.27a0	6d 22 06	adc $0622			adc 	stringMemory
.27a3	8d 22 06	sta $0622			sta 	stringMemory
.27a6	85 26		sta $26				sta 	zTemp2 						; update storage address
.27a8	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.27aa	6d 23 06	adc $0623			adc 	stringMemory+1
.27ad	8d 23 06	sta $0623			sta 	stringMemory+1
.27b0	85 27		sta $27				sta 	zTemp2+1
.27b2	68		pla				pla 								; save length allocated in +0
.27b3	92 26		sta ($26)			sta 	(zTemp2)
.27b5	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.27b7	a0 01		ldy #$01			ldy 	#1
.27b9	91 26		sta ($26),y			sta 	(zTemp2),y
.27bb					_SACopyNewString:
.27bb	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.27bd	a0 02		ldy #$02			ldy 	#2
.27bf	91 26		sta ($26),y			sta 	(zTemp2),y
.27c1	aa		tax				tax 								; bytes to copy
.27c2	f0 0c		beq $27d0			beq 	_SACopyExit
.27c4	a0 01		ldy #$01			ldy 	#1 							; first character from here
.27c6					_SACopyNSLoop:
.27c6	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.27c8	c8		iny				iny 								; write two on in string storage
.27c9	c8		iny				iny
.27ca	91 26		sta ($26),y			sta 	(zTemp2),y
.27cc	88		dey				dey
.27cd	ca		dex				dex									; until copied all the string lengths.
.27ce	d0 f6		bne $27c6			bne 	_SACopyNSLoop
.27d0					_SACopyExit:
.27d0	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.27d2	a5 26		lda $26				lda 	zTemp2
.27d4	7a		ply				ply
.27d5	60		rts				rts
.27d6					_SALengthError:
.27d6	4c 73 26	jmp $2673		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.27d9					StringSystemInitialise:
.27d9	3a		dec a				dec 	a 							; make last byte of previous page.
.27da	8d 23 06	sta $0623			sta 	stringMemory+1
.27dd	85 23		sta $23				sta 	zTemp0+1
.27df	a9 ff		lda #$ff			lda 	#$FF
.27e1	8d 22 06	sta $0622			sta 	stringMemory
.27e4	85 22		sta $22				sta 	zTemp0
.27e6	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.27e8	92 22		sta ($22)			sta 	(zTemp0)
.27ea	60		rts				rts
.27eb					StringSpaceInitialise:
.27eb	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.27ed	8d 21 06	sta $0621			sta 	stringInitialised
.27f0	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.27f3	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.27f6	ad 23 06	lda $0623			lda 	stringMemory+1
.27f9	3a		dec a				dec 	a
.27fa	8d 25 06	sta $0625			sta 	stringTempPointer+1
.27fd	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.2800	60		rts				rts
.2801					StringTempAllocate:
.2801	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2803	b0 2e		bcs $2833			bcs 	_STALength
.2805	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.2808	30 05		bmi $280f			bmi 	_STAAllocate
.280a	48		pha				pha 								; save value to subtract.
.280b	20 eb 27	jsr $27eb			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.280e	68		pla				pla 								; restore it
.280f					_STAAllocate:
.280f	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2811	18		clc				clc  								; deliberate allows one more
.2812	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.2815	8d 24 06	sta $0624			sta 	stringTempPointer
.2818	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.281a	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.281c	ad 25 06	lda $0625			lda 	stringTempPointer+1
.281f	69 ff		adc #$ff			adc 	#$FF
.2821	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2824	85 2d		sta $2d				sta 	zsTemp+1
.2826	85 09		sta $09				sta 	IFR0+IM1
.2828	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.282a	a9 80		lda #$80			lda 	#$80
.282c	85 0b		sta $0b				sta 	IFR0+IExp
.282e	a9 00		lda #$00			lda 	#0 							; clear the target string
.2830	92 2c		sta ($2c)			sta 	(zsTemp)
.2832	60		rts				rts
.2833					_STALength:
.2833	4c 73 26	jmp $2673		jmp	ErrorV_string
.2836					StringTempWrite:
.2836	5a		phy				phy
.2837	48		pha				pha
.2838	b2 2c		lda ($2c)			lda 	(zsTemp)
.283a	1a		inc a				inc 	a
.283b	92 2c		sta ($2c)			sta 	(zsTemp)
.283d	a8		tay				tay
.283e	68		pla				pla
.283f	91 2c		sta ($2c),y			sta 	(zsTemp),y
.2841	7a		ply				ply
.2842	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2843					ErrorHandler:
.2843	fa		plx				plx 								; get address of msg
.2844	7a		ply				ply
.2845	e8		inx				inx 								; bump past RTS
.2846	d0 01		bne $2849			bne 	_EHNoInc
.2848	c8		iny				iny
.2849					_EHNoInc:
.2849	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.284c	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.284f	0d 27 06	ora $0627			ora 	ERRLine+1
.2852	f0 10		beq $2864			beq 	_EHNoNumber
.2854	a2 67		ldx #$67			ldx 	#_EHAtMsg & $FF
.2856	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.2858	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.285b	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.285e	ae 27 06	ldx $0627			ldx 	ERRLine+1
.2861	20 6c 28	jsr $286c			jsr 	WriteIntXA
.2864					_EHNoNumber:
.2864	4c 95 28	jmp $2895			jmp 	WarmStartNewLine
.2867					_EHAtMsg:
>2867	20 61 74 20 00					.text 	" at ",0
.286c					WriteIntXA:
.286c	da		phx				phx
.286d	48		pha				pha
.286e	a2 08		ldx #$08			ldx 	#IFR0
.2870	20 02 30	jsr $3002			jsr 	IFloatPushRx
.2873	68		pla				pla
.2874	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.2877	68		pla				pla
.2878	85 09		sta $09				sta 	IFR0+IM1
.287a	a9 0a		lda #$0a			lda 	#10 						; decimal
.287c	20 54 2e	jsr $2e54			jsr 	IFloatIntegerToStringR0	 	; convert
.287f	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.2882	a2 08		ldx #$08			ldx 	#IFR0
.2884	20 23 30	jsr $3023			jsr 	IFloatPullRx
.2887	60		rts				rts
.2888					NotImplemented:
.2888	4c 98 25	jmp $2598		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.288b					WarmStart:
.288b	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.288d	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2890	a9 6b		lda #$6b			lda 	#"k"
.2892	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.2895					WarmStartNewLine:
.2895	a9 0d		lda #$0d			lda 	#13
.2897	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.289a					WarmStartNoPrompt:
.289a	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.289c	9a		txs				txs
.289d	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.28a0	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.28a2	f0 f1		beq $2895			beq 	WarmStartNewLine
.28a4	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.28a6	d0 f2		bne $289a			bne 	WarmStartNoPrompt
.28a8	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.28ab	e8		inx				inx 								; skip length byte to make it ASCIIZ
.28ac	d0 01		bne $28af			bne 	_WSSkip
.28ae	c8		iny				iny
.28af					_WSSkip:
.28af	86 26		stx $26				stx 	zTemp2 						; save address
.28b1	84 27		sty $27				sty 	zTemp2+1
.28b3	a2 dd		ldx #$dd			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.28b5	a0 28		ldy #$28			ldy 	#TOKGetCharacter >> 8
.28b7	38		sec				sec
.28b8	20 cc 1f	jsr $1fcc			jsr 	TOKTokenise
.28bb	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.28be	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.28c1	d0 0b		bne $28ce			bne 	_WSLineEdit
.28c3	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.28c5	85 18		sta $18				sta 	codePtr
.28c7	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.28c9	85 19		sta $19				sta 	codePtr+1
.28cb	4c dc 14	jmp $14dc			jmp 	RUNNewLine
.28ce					_WSLineEdit:
.28ce	20 a7 1e	jsr $1ea7			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.28d1	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.28d4	c9 04		cmp #$04			cmp 	#4
.28d6	f0 03		beq $28db			beq 	_WSNoInsert
.28d8	20 f1 1e	jsr $1ef1			jsr 	PGMInsertLine				; if not, maybe insert
.28db					_WSNoInsert:
.28db	80 bd		bra $289a			bra 	WarmStartNoPrompt
.28dd					TOKGetCharacter:
.28dd	b2 26		lda ($26)			lda 	(zTemp2)
.28df	90 06		bcc $28e7			bcc 	_GSNoIncrement
.28e1	e6 26		inc $26				inc 	zTemp2
.28e3	d0 02		bne $28e7			bne 	_GSNoIncrement
.28e5	e6 27		inc $27				inc 	zTemp2+1
.28e7					_GSNoIncrement:
.28e7	c9 00		cmp #$00			cmp 	#0
.28e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.28ea					VARArrayLookup:
.28ea	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.28ec	86 23		stx $23				stx 	zTemp0+1
.28ee	b2 22		lda ($22)			lda 	(zTemp0)
.28f0	48		pha				pha
.28f1	5a		phy				phy
.28f2	a0 01		ldy #$01			ldy 	#1
.28f4	b1 22		lda ($22),y			lda 	(zTemp0),y
.28f6	7a		ply				ply
.28f7	48		pha				pha
.28f8	20 1d 17	jsr $171d			jsr 	EXPEvalInteger16 			; R0 now contains the index
.28fb	68		pla				pla 								; array address to zTemp0
.28fc	85 23		sta $23				sta 	zTemp0+1
.28fe	68		pla				pla
.28ff	85 22		sta $22				sta 	zTemp0
.2901	5a		phy				phy 								; save codePtr position.
.2902	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2904	b1 22		lda ($22),y			lda 	(zTemp0),y
.2906	48		pha				pha 								; save bit 15 on stack.
.2907	29 7f		and #$7f			and 	#$7F
.2909	85 24		sta $24				sta 	zTemp1
.290b	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.290d	d2 22		cmp ($22)			cmp 	(zTemp0)
.290f	a5 09		lda $09				lda 	IFR0+IM1
.2911	e5 24		sbc $24				sbc 	zTemp1
.2913	b0 3a		bcs $294f			bcs 	_VALIndex
.2915	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2917	c9 40		cmp #$40			cmp 	#$40
.2919	b0 34		bcs $294f			bcs 	_VALIndex
.291b	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.291d	26 09		rol $09				rol 	IFR0+IM1
.291f	fa		plx				plx 								; get msb of size -> X
.2920	30 04		bmi $2926			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2922	06 08		asl $08				asl 	IFR0+IM0
.2924	26 09		rol $09				rol 	IFR0+IM1
.2926					_VARNotX4:
.2926	18		clc				clc 								; add the two for the size bytes
.2927	a5 08		lda $08				lda 	IFR0+IM0
.2929	69 02		adc #$02			adc 	#2
.292b	85 08		sta $08				sta 	IFR0+IM0
.292d	90 02		bcc $2931			bcc 	_VARNoCarry1
.292f	e6 09		inc $09				inc 	IFR0+IM1
.2931					_VARNoCarry1:
.2931	18		clc				clc 								; calculate the element address and push to stack.
.2932	a5 08		lda $08				lda 	IFR0+IM0
.2934	65 22		adc $22				adc 	zTemp0
.2936	48		pha				pha
.2937	a5 09		lda $09				lda 	IFR0+IM1
.2939	65 23		adc $23				adc 	zTemp0+1
.293b	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.293d	30 04		bmi $2943			bmi 	_VARHasSubLevel
.293f	aa		tax				tax 								; address in XA
.2940	68		pla				pla
.2941	7a		ply				ply 								; restore Y and exit
.2942	60		rts				rts
.2943					_VARHasSubLevel:
.2943	aa		tax				tax 								; get link address in XA
.2944	68		pla				pla
.2945	7a		ply				ply 								; restore code position.
.2946	48		pha				pha
.2947	20 13 27	jsr $2713			jsr 	ERRCheckComma 				; comma required.
.294a	68		pla				pla
.294b	20 ea 28	jsr $28ea			jsr 	VARArrayLookup 				; call it recursively
.294e	60		rts				rts
.294f					_VALIndex:
.294f	4c 32 26	jmp $2632		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2952					VARCreate:
.2952	5a		phy				phy
.2953	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2955	a2 00		ldx #$00			ldx 	#0
.2957	20 61 10	jsr $1061			jsr 	AllocateMemory
.295a	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.295c	86 25		stx $25				stx 	zTemp1+1
.295e	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2960	ad 2a 06	lda $062a			lda 	VARHash
.2963	91 24		sta ($24),y			sta 	(zTemp1),y
.2965	c8		iny				iny 								; put address of name into +3,+4
.2966	ad 28 06	lda $0628			lda 	VARNameAddress
.2969	91 24		sta ($24),y			sta 	(zTemp1),y
.296b	c8		iny				iny
.296c	ad 29 06	lda $0629			lda 	VARNameAddress+1
.296f	91 24		sta ($24),y			sta 	(zTemp1),y
.2971	ad 2b 06	lda $062b			lda 	VARType
.2974	29 01		and #$01			and 	#1
.2976	f0 06		beq $297e			beq 	_CVNotString
.2978	a0 08		ldy #$08			ldy 	#5+3
.297a	a9 80		lda #$80			lda 	#$80
.297c	91 24		sta ($24),y			sta 	(zTemp1),y
.297e					_CVNotString:
.297e	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2981	85 22		sta $22				sta 	zTemp0
.2983	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.2986	85 23		sta $23				sta 	zTemp0+1
.2988	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.298a	b2 22		lda ($22)			lda 	(zTemp0)
.298c	92 24		sta ($24)			sta 	(zTemp1)
.298e	b1 22		lda ($22),y			lda 	(zTemp0),y
.2990	91 24		sta ($24),y			sta 	(zTemp1),y
.2992	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2994	92 22		sta ($22)			sta 	(zTemp0)
.2996	a5 25		lda $25				lda 	zTemp1+1
.2998	91 22		sta ($22),y			sta 	(zTemp0),y
.299a	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.299c	a6 25		ldx $25				ldx 	zTemp1+1
.299e	18		clc				clc 								; add 5 to point to the data.
.299f	69 05		adc #$05			adc 	#5
.29a1	90 01		bcc $29a4			bcc 	_VCNoCarry
.29a3	e8		inx				inx
.29a4					_VCNoCarry:
.29a4	7a		ply				ply
.29a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.29a6					VARFind:
.29a6	5a		phy				phy
.29a7	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.29a9	b1 22		lda ($22),y			lda 	(zTemp0),y
.29ab	85 25		sta $25				sta 	zTemp1+1
.29ad	f0 1c		beq $29cb			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.29af	b2 22		lda ($22)			lda 	(zTemp0)
.29b1	85 24		sta $24				sta 	zTemp1
.29b3					_VFLoop:
.29b3	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.29b5	b1 24		lda ($24),y			lda 	(zTemp1),y
.29b7	cd 2a 06	cmp $062a			cmp 	VARHash
.29ba	f0 12		beq $29ce			beq 	_VFHashesMatch 				; if so, check the name.
.29bc					_VFNext:
.29bc	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.29be	aa		tax				tax
.29bf	a0 01		ldy #$01			ldy 	#1
.29c1	b1 24		lda ($24),y			lda 	(zTemp1),y
.29c3	85 25		sta $25				sta 	zTemp1+1
.29c5	86 24		stx $24				stx 	zTemp1
.29c7	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.29c9	d0 e8		bne $29b3			bne 	_VFLoop
.29cb					_VFExitFail:
.29cb	7a		ply				ply
.29cc	18		clc				clc
.29cd	60		rts				rts
.29ce					_VFHashesMatch:
.29ce	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.29d0	b1 24		lda ($24),y			lda 	(zTemp1),y
.29d2	85 26		sta $26				sta 	zTemp2
.29d4	c8		iny				iny
.29d5	b1 24		lda ($24),y			lda 	(zTemp1),y
.29d7	85 27		sta $27				sta 	zTemp2+1
.29d9	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.29db					_VFNameCompLoop:
.29db	c8		iny				iny 								; char at a time
.29dc	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.29df	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.29e1	d0 d9		bne $29bc			bne 	_VFNext						; next entry if different.
.29e3	c9 7c		cmp #$7c			cmp 	#$7C
.29e5	90 f4		bcc $29db			bcc 	_VFNameCompLoop 			; until done the whole lot.
.29e7	18		clc				clc
.29e8	a5 24		lda $24				lda 	zTemp1
.29ea	a6 25		ldx $25				ldx 	zTemp1+1
.29ec	69 05		adc #$05			adc 	#5
.29ee	90 01		bcc $29f1			bcc 	_VFNNoCarry
.29f0	e8		inx				inx
.29f1					_VFNNoCarry:
.29f1	7a		ply				ply
.29f2	38		sec				sec
.29f3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.29f4					VARGetInfo:
.29f4	98		tya				tya 								; calculate the address of the identifier start.
.29f5	18		clc				clc
.29f6	65 18		adc $18				adc 	codePtr
.29f8	8d 28 06	sta $0628			sta 	VARNameAddress
.29fb	a5 19		lda $19				lda 	codePtr+1
.29fd	69 00		adc #$00			adc 	#0
.29ff	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2a02	9c 2a 06	stz $062a			stz 	VARHash
.2a05	a2 00		ldx #$00			ldx 	#0
.2a07					_VARCopyName:
.2a07	18		clc				clc 								; update the sum hash.
.2a08	ad 2a 06	lda $062a			lda 	VARHash
.2a0b	71 18		adc ($18),y			adc 	(codePtr),y
.2a0d	8d 2a 06	sta $062a			sta 	VARHash
.2a10	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2a12	c8		iny				iny
.2a13	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2a16	e8		inx				inx
.2a17	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2a19	90 ec		bcc $2a07			bcc 	_VARCopyName
.2a1b	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2a1e	29 03		and #$03			and 	#3 							; type is 0-3
.2a20	0a		asl a				asl 	a
.2a21	0a		asl a				asl 	a
.2a22	85 22		sta $22				sta 	zTemp0
.2a24	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2a27	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2a29	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2a2b	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2a2c	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2a2e	85 22		sta $22				sta 	zTemp0
.2a30	8d 4c 06	sta $064c			sta 	VARHashEntry
.2a33	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2a35	69 00		adc #$00			adc 	#0
.2a37	85 23		sta $23				sta 	zTemp0+1
.2a39	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2a3c	60		rts				rts
.2a3d					VARClearHashTables:
.2a3d	a2 00		ldx #$00			ldx 	#0
.2a3f					_VCHRLoop:
.2a3f	a9 00		lda #$00			lda 	#0
.2a41	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2a44	e8		inx				inx
.2a45	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2a47	d0 f6		bne $2a3f			bne 	_VCHRLoop
.2a49	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2a4a					VARCheckSimple:
.2a4a	aa		tax				tax 								; save in X
.2a4b	b1 18		lda ($18),y			lda 	(codePtr),y
.2a4d	c9 7c		cmp #$7c			cmp 	#$7C
.2a4f	d0 15		bne $2a66			bne 	_VCSComplex
.2a51	c8		iny				iny 								; consume the second byte, the type.
.2a52	8a		txa				txa  								; character (40-7F) x 4
.2a53	0a		asl a				asl 	a
.2a54	0a		asl a				asl  	a
.2a55	18		clc				clc
.2a56	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2a58	85 08		sta $08				sta 	IFR0+IM0
.2a5a	a9 06		lda #$06			lda 	#FastVariables >> 8
.2a5c	69 00		adc #$00			adc 	#0
.2a5e	85 09		sta $09				sta 	IFR0+IM1
.2a60	64 0a		stz $0a				stz 	IFR0+IM2
.2a62	64 0b		stz $0b				stz 	IFR0+IExp
.2a64	38		sec				sec 								; it's a reference
.2a65	60		rts				rts
.2a66					_VCSComplex:
.2a66	88		dey				dey	 								; extract information.
.2a67	20 f4 29	jsr $29f4			jsr 	VARGetInfo
.2a6a	20 a6 29	jsr $29a6			jsr 	VARFind 					; search for variable
.2a6d	b0 0a		bcs $2a79			bcs 	_VCSHaveVariable
.2a6f	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2a72	29 02		and #$02			and 	#2
.2a74	d0 25		bne $2a9b			bne 	_VCNoCreate
.2a76	20 52 29	jsr $2952			jsr 	VARCreate 					; create variable
.2a79					_VCSHaveVariable:
.2a79	48		pha				pha 								; save LSB on the stack
.2a7a	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2a7d	6a		ror a				ror 	a
.2a7e	6a		ror a				ror 	a
.2a7f	68		pla				pla 								; restore LSB
.2a80	90 08		bcc $2a8a			bcc 	_VCSNotArray 				; skip if not an array
.2a82	20 ea 28	jsr $28ea			jsr 	VARArrayLookup 				; look for subscripts.
.2a85	48		pha				pha 								; check )
.2a86	20 0b 27	jsr $270b			jsr 	ERRCheckRParen
.2a89	68		pla				pla
.2a8a					_VCSNotArray:
.2a8a	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2a8c	85 08		sta $08				sta 	IFR0+IM0
.2a8e	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2a90	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2a93	6a		ror a				ror 	a
.2a94	a9 00		lda #$00			lda 	#0
.2a96	6a		ror a				ror 	a 							; now $00 or $80
.2a97	85 0b		sta $0b				sta 	IFR0+IExp
.2a99	38		sec				sec 								; it's a reference
.2a9a	60		rts				rts
.2a9b					_VCNoCreate:
.2a9b	4c 58 26	jmp $2658		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.2a9e					IFInitialise:
.2a9e	9c de 06	stz $06de			stz 	IFStackIndex
.2aa1	60		rts				rts
.2aa2					IFloatSubtract:
.2aa2	da		phx				phx
.2aa3	a2 08		ldx #$08			ldx 	#IFR0
.2aa5	20 be 30	jsr $30be			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2aa8	fa		plx				plx
.2aa9					IFloatAdd:
.2aa9	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2aab	05 0b		ora $0b				ora 	IFR0+IExp
.2aad	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2aaf	d0 4e		bne $2aff			bne 	_IFloatAddDecimals 			; decimal version.
.2ab1					_IFAddSubMantissa:
.2ab1	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2ab3	45 0b		eor $0b				eor 	IFR0+IExp
.2ab5	29 40		and #$40			and 	#IFSign
.2ab7	d0 21		bne $2ada			bne 	_IFloatSubMantissa
.2ab9	18		clc				clc 								; do the actual addition
.2aba	a5 08		lda $08			lda 	IFR0+IM0
.2abc	75 00		adc $00,x		adc 		IM0,x
.2abe	85 08		sta $08			sta 	IFR0+IM0
.2ac0	a5 09		lda $09			lda 	IFR0+IM1
.2ac2	75 01		adc $01,x		adc 		IM1,x
.2ac4	85 09		sta $09			sta 	IFR0+IM1
.2ac6	a5 0a		lda $0a			lda 	IFR0+IM2
.2ac8	75 02		adc $02,x		adc 		IM2,x
.2aca	85 0a		sta $0a			sta 	IFR0+IM2
.2acc	10 29		bpl $2af7			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2ace	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2ad0	20 e2 30	jsr $30e2			jsr 	IFloatShiftRight
.2ad3	20 0c 31	jsr $310c			jsr 	IFloatIncExponent
.2ad6	d0 1f		bne $2af7			bne 	_IFloatAddExit
.2ad8	38		sec				sec 								; overflowed numerically.
.2ad9	60		rts				rts
.2ada					_IFloatSubMantissa:
.2ada	38		sec				sec 								; do the subtraction R0-Rx
.2adb	a5 08		lda $08			lda 	IFR0+IM0
.2add	f5 00		sbc $00,x		sbc 		IM0,x
.2adf	85 08		sta $08			sta 	IFR0+IM0
.2ae1	a5 09		lda $09			lda 	IFR0+IM1
.2ae3	f5 01		sbc $01,x		sbc 		IM1,x
.2ae5	85 09		sta $09			sta 	IFR0+IM1
.2ae7	a5 0a		lda $0a			lda 	IFR0+IM2
.2ae9	f5 02		sbc $02,x		sbc 		IM2,x
.2aeb	85 0a		sta $0a			sta 	IFR0+IM2
.2aed	b0 08		bcs $2af7			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2aef	a2 08		ldx #$08			ldx 	#IFR0
.2af1	20 c6 30	jsr $30c6			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2af4	20 be 30	jsr $30be			jsr 	IFloatNegate 				; negate
.2af7					_IFloatAddExit:
.2af7	18		clc				clc
.2af8	60		rts				rts
.2af9					_IFloatZeroAdd:
.2af9	fa		plx				plx 								; return this value in R0
.2afa	20 44 30	jsr $3044			jsr 	IFloatCopyFromRegister
.2afd	18		clc				clc
.2afe	60		rts				rts
.2aff					_IFloatAddDecimals:
.2aff	20 ac 30	jsr $30ac			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2b02	f0 f3		beq $2af7			beq 	_IFloatAddExit
.2b04	20 ea 30	jsr $30ea			jsr 	IFloatNormalise 			; normalise RX
.2b07	da		phx				phx 								; normalise R0
.2b08	a2 08		ldx #$08			ldx 	#IFR0
.2b0a	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero
.2b0d	f0 ea		beq $2af9			beq 	_IFloatZeroAdd
.2b0f	20 ea 30	jsr $30ea			jsr 	IFloatNormalise
.2b12	fa		plx				plx
.2b13	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2b15	29 3f		and #$3f			and 	#IFXMask
.2b17	38		sec				sec
.2b18	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2b1a	85 20		sta $20				sta 	iTemp0
.2b1c	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2b1e	29 3f		and #$3f			and 	#IFXMask
.2b20	38		sec				sec
.2b21	e9 20		sbc #$20			sbc 	#$20
.2b23	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2b25	b0 02		bcs $2b29			bcs 	_IFloatHaveLarger
.2b27	a5 20		lda $20				lda 	iTemp0
.2b29					_IFloatHaveLarger:
.2b29	18		clc				clc 								; get the actual one back.
.2b2a	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2b2c	20 39 2b	jsr $2b39			jsr 	_IFShiftXToA
.2b2f	da		phx				phx
.2b30	a2 08		ldx #$08			ldx 	#IFR0
.2b32	20 39 2b	jsr $2b39			jsr 	_IFShiftXToA
.2b35	fa		plx				plx
.2b36	4c b1 2a	jmp $2ab1			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2b39					_IFShiftXToA:
.2b39	8d d6 06	sta $06d6			sta 	IFTarget
.2b3c	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero 			; check adding zero ?
.2b3f	f0 11		beq $2b52			beq 	_IFSXExit
.2b41					_IFSXLoop:
.2b41	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2b43	29 3f		and #$3f			and 	#IFXMask
.2b45	cd d6 06	cmp $06d6			cmp 	IFTarget
.2b48	f0 08		beq $2b52			beq 	_IFSXExit
.2b4a	20 e2 30	jsr $30e2			jsr 	IFloatShiftRight
.2b4d	20 0c 31	jsr $310c			jsr 	IFloatIncExponent
.2b50	80 ef		bra $2b41			bra 	_IFSXLoop
.2b52					_IFSXExit:
.2b52	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2b53					IFloatMultiply:
.2b53	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2b56	20 0e 2c	jsr $2c0e			jsr 	IFCalculateNewSign
.2b59	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2b5b	05 0b		ora $0b				ora 	IFR0+IExp
.2b5d	29 3f		and #$3f			and 	#IFXMask
.2b5f	15 01		ora $01,x			ora 	IM1,x
.2b61	05 09		ora $09				ora 	IFR0+IM1
.2b63	15 02		ora $02,x			ora 	IM2,x
.2b65	05 0a		ora $0a				ora 	IFR0+IM2
.2b67	d0 0a		bne $2b73			bne 	_IFMStandard
.2b69	20 8f 30	jsr $308f			jsr 	IFloatMultiply8BitRx
.2b6c	ad d8 06	lda $06d8			lda 	IFNewSign
.2b6f	85 0b		sta $0b				sta 	IFR0+IExp
.2b71	18		clc				clc
.2b72	60		rts				rts
.2b73					_IFMStandard:
.2b73	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2b75	20 05 2c	jsr $2c05			jsr 	IFMSignExtend
.2b78	8d d7 06	sta $06d7			sta 	IFNewExponent
.2b7b	a5 0b		lda $0b				lda 	IFR0+IExp
.2b7d	20 05 2c	jsr $2c05			jsr 	IFMSignExtend
.2b80	18		clc				clc
.2b81	6d d7 06	adc $06d7			adc 	IFNewExponent
.2b84	8d d7 06	sta $06d7			sta 	IFNewExponent
.2b87	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2b89	20 55 30	jsr $3055			jsr 	IFloatCopyToRegister
.2b8c	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2b8e	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.2b91					_IFMLoop:
.2b91	a2 14		ldx #$14			ldx 	#IFRTemp
.2b93	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero
.2b96	f0 3a		beq $2bd2			beq 	_IFMExit
.2b98	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2b9b	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2b9d	10 03		bpl $2ba2			bpl	 	_IFMTargetOkay
.2b9f	20 f6 2b	jsr $2bf6			jsr 	_IFMShiftAll
.2ba2					_IFMTargetOkay:
.2ba2	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2ba4	29 01		and #$01			and 	#1
.2ba6	f0 16		beq $2bbe			beq 	_IFMNoAdd
.2ba8	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2bab	18		clc				clc
.2bac	a5 08		lda $08			lda 	IFR0+IM0
.2bae	75 00		adc $00,x		adc 		IM0,x
.2bb0	85 08		sta $08			sta 	IFR0+IM0
.2bb2	a5 09		lda $09			lda 	IFR0+IM1
.2bb4	75 01		adc $01,x		adc 		IM1,x
.2bb6	85 09		sta $09			sta 	IFR0+IM1
.2bb8	a5 0a		lda $0a			lda 	IFR0+IM2
.2bba	75 02		adc $02,x		adc 		IM2,x
.2bbc	85 0a		sta $0a			sta 	IFR0+IM2
.2bbe					_IFMNoAdd:
.2bbe	a5 0a		lda $0a				lda 	IFR0+IM2
.2bc0	10 03		bpl $2bc5			bpl 	_IFMResultOkay
.2bc2	20 f6 2b	jsr $2bf6			jsr 	_IFMShiftAll
.2bc5					_IFMResultOkay:
.2bc5	a2 14		ldx #$14			ldx 	#IFRTemp
.2bc7	20 e2 30	jsr $30e2			jsr 	IFloatShiftRight
.2bca	ae d6 06	ldx $06d6			ldx 	IFTarget
.2bcd	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.2bd0	80 bf		bra $2b91			bra 	_IFMLoop
.2bd2					_IFMExit:
.2bd2	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2bd5	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2bd7	90 0f		bcc $2be8			bcc 	_IFMOkay
.2bd9	c9 e0		cmp #$e0			cmp 	#$E0
.2bdb	b0 0b		bcs $2be8			bcs 	_IFMOkay
.2bdd	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2bdf	f0 13		beq $2bf4			beq 	_IFMError
.2be1	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2be3	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.2be6	18		clc				clc
.2be7	60		rts				rts
.2be8					_IFMOkay:
.2be8	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2bea	0d d8 06	ora $06d8			ora 	IFNewSign
.2bed	85 0b		sta $0b				sta 	IFR0+IExp
.2bef	18		clc				clc
.2bf0	60		rts				rts
.2bf1	4c ff ff	jmp $ffff			jmp 	$FFFF
.2bf4					_IFMError:
.2bf4	38		sec				sec
.2bf5	60		rts				rts
.2bf6					_IFMShiftAll:
.2bf6	a2 08		ldx #$08			ldx 	#IFR0
.2bf8	20 e2 30	jsr $30e2			jsr 	IFloatShiftRight
.2bfb	ae d6 06	ldx $06d6			ldx 	IFTarget
.2bfe	20 e2 30	jsr $30e2			jsr 	IFloatShiftRight
.2c01	ee d7 06	inc $06d7			inc 	IFNewExponent
.2c04	60		rts				rts
.2c05					IFMSignExtend:
.2c05	29 3f		and #$3f			and 	#IFXMask
.2c07	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2c09	90 02		bcc $2c0d			bcc 	_IFMNoSXX
.2c0b	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2c0d					_IFMNoSXX:
.2c0d	60		rts				rts
.2c0e					IFCalculateNewSign:
.2c0e	b5 03		lda $03,x			lda 	IExp,x
.2c10	45 0b		eor $0b				eor 	IFR0+IExp
.2c12	29 40		and #$40			and 	#IFSign
.2c14	8d d8 06	sta $06d8			sta 	IFNewSign
.2c17	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2c18					IFloatDivideInteger:
.2c18	20 31 2c	jsr $2c31			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2c1b	b0 06		bcs $2c23			bcs 	_IFDIExit
.2c1d	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2c1f	20 44 30	jsr $3044			jsr 	IFloatCopyFromRegister
.2c22	18		clc				clc
.2c23					_IFDIExit:
.2c23	60		rts				rts
.2c24					IFloatModulusInteger:
.2c24	20 31 2c	jsr $2c31			jsr 	IFloatDivideIntegerCommon
.2c27	b0 07		bcs $2c30			bcs 	_IFMIExit
.2c29	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c2c	20 44 30	jsr $3044			jsr 	IFloatCopyFromRegister
.2c2f	18		clc				clc
.2c30					_IFMIExit:
.2c30	60		rts				rts
.2c31					IFloatDivideIntegerCommon:
.2c31	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2c34	20 0e 2c	jsr $2c0e			jsr 	IFCalculateNewSign 			; calculate sign of result
.2c37	20 5f 2c	jsr $2c5f			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2c3a	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2c3c	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero
.2c3f	f0 1c		beq $2c5d			beq 	_IFDIDivZero
.2c41	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2c44	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.2c47	5a		phy				phy
.2c48	a0 18		ldy #$18			ldy 	#24
.2c4a					_IFDILoop:
.2c4a	20 70 2c	jsr $2c70			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2c4d	20 7c 2c	jsr $2c7c			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2c50	88		dey				dey
.2c51	d0 f7		bne $2c4a			bne 	_IFDILoop 					; do it 24 times
.2c53	7a		ply				ply
.2c54	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2c57	29 40		and #$40			and 	#IFSign
.2c59	85 17		sta $17				sta 	IFRTemp+IExp
.2c5b	18		clc				clc 								; is okay.
.2c5c	60		rts				rts
.2c5d					_IFDIDivZero:
.2c5d	38		sec				sec
.2c5e	60		rts				rts
.2c5f					IFDCopyRXToRTemp:
.2c5f	b5 00		lda $00,x			lda 	IM0,x
.2c61	85 14		sta $14				sta 	IFRTemp+IM0
.2c63	b5 01		lda $01,x			lda 	IM1,x
.2c65	85 15		sta $15				sta 	IFRTemp+IM1
.2c67	b5 02		lda $02,x			lda 	IM2,x
.2c69	85 16		sta $16				sta 	IFRTemp+IM2
.2c6b	b5 03		lda $03,x			lda 	IExp,x
.2c6d	85 17		sta $17				sta 	IFRTemp+IExp
.2c6f	60		rts				rts
.2c70					IFDShiftSTempS1Left:
.2c70	a2 14		ldx #$14			ldx 	#IFRTemp
.2c72	20 da 30	jsr $30da			jsr 	IFloatShiftLeft
.2c75	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c78	20 db 30	jsr $30db			jsr 	IFloatRotateLeft
.2c7b	60		rts				rts
.2c7c					IFDTrySubtract:
.2c7c	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2c7f	38		sec				sec 								; subtract, saving the results on the stack.
.2c80	b5 00		lda $00,x			lda 	IM0,x
.2c82	e5 08		sbc $08				sbc 	IFR0+IM0
.2c84	48		pha				pha
.2c85	b5 01		lda $01,x			lda 	IM1,x
.2c87	e5 09		sbc $09				sbc 	IFR0+IM1
.2c89	48		pha				pha
.2c8a	b5 02		lda $02,x			lda 	IM2,x
.2c8c	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2c8e	b0 03		bcs $2c93			bcs 	_IFDCanSubtract
.2c90	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2c91	68		pla				pla
.2c92	60		rts				rts
.2c93					_IFDCanSubtract:
.2c93	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2c95	68		pla				pla
.2c96	95 01		sta $01,x			sta 	IM1,x
.2c98	68		pla				pla
.2c99	95 00		sta $00,x			sta 	IM0,x
.2c9b	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2c9d	d0 06		bne $2ca5			bne 	_IFDCSExit
.2c9f	e6 15		inc $15				inc 	IFRTemp+IM1
.2ca1	d0 02		bne $2ca5			bne 	_IFDCSExit
.2ca3	e6 16		inc $16				inc 	IFRTemp+IM2
.2ca5					_IFDCSExit:
.2ca5	60		rts				rts
.2ca6					IFloatBitwiseAnd:
.2ca6	5a		phy				phy
.2ca7	20 eb 2c	jsr $2ceb			jsr 	IFPreProcessBitwise 		; set up everything.
.2caa	d0 0f		bne $2cbb			bne 	_IFBAExit
.2cac					_IFBALoop:
.2cac	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2caf	35 00		and $00,x			and 	IM0,x
.2cb1	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2cb4	e8		inx				inx
.2cb5	c8		iny				iny
.2cb6	c0 03		cpy #$03			cpy 	#3
.2cb8	d0 f2		bne $2cac			bne 	_IFBALoop
.2cba	18		clc				clc
.2cbb					_IFBAExit:
.2cbb	7a		ply				ply
.2cbc	60		rts				rts
.2cbd					IFloatBitwiseOr:
.2cbd	5a		phy				phy
.2cbe	20 eb 2c	jsr $2ceb			jsr 	IFPreProcessBitwise 		; set up everything.
.2cc1	d0 0f		bne $2cd2			bne 	_IFBAExit
.2cc3					_IFBALoop:
.2cc3	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2cc6	15 00		ora $00,x			ora 	IM0,x
.2cc8	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2ccb	e8		inx				inx
.2ccc	c8		iny				iny
.2ccd	c0 03		cpy #$03			cpy 	#3
.2ccf	d0 f2		bne $2cc3			bne 	_IFBALoop
.2cd1	18		clc				clc
.2cd2					_IFBAExit:
.2cd2	7a		ply				ply
.2cd3	60		rts				rts
.2cd4					IFloatBitwiseXor:
.2cd4	5a		phy				phy
.2cd5	20 eb 2c	jsr $2ceb			jsr 	IFPreProcessBitwise 		; set up everything.
.2cd8	d0 0f		bne $2ce9			bne 	_IFBAExit
.2cda					_IFBALoop:
.2cda	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2cdd	55 00		eor $00,x			eor 	IM0,x
.2cdf	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2ce2	e8		inx				inx
.2ce3	c8		iny				iny
.2ce4	c0 03		cpy #$03			cpy 	#3
.2ce6	d0 f2		bne $2cda			bne 	_IFBALoop
.2ce8	18		clc				clc
.2ce9					_IFBAExit:
.2ce9	7a		ply				ply
.2cea	60		rts				rts
.2ceb					IFPreProcessBitwise:
.2ceb	a0 00		ldy #$00			ldy 	#0 							; set index.
.2ced	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2cef	15 03		ora $03,x			ora 	IExp,x
.2cf1	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2cf3	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2cf5	38		sec				sec 								; carry set just in cases.
.2cf6	60		rts				rts
.2cf7					IFloatAbsoluteR0:
.2cf7	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2cf9	29 bf		and #$bf			and 	#IFSign ^ 255
.2cfb	85 0b		sta $0b				sta 	IFR0+IExp
.2cfd	18		clc				clc
.2cfe	60		rts				rts
.2cff					IFloatSquareRootR0:
.2cff	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2d01	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero
.2d04	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2d06	29 40		and #$40			and 	#IFSign
.2d08	d0 2f		bne $2d39			bne 	_IFSRFail
.2d0a	20 ea 30	jsr $30ea			jsr 	IFloatNormalise 			; it will work better !
.2d0d	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2d0f	20 55 30	jsr $3055			jsr 	IFloatCopyToRegister
.2d12	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2d14	20 05 2c	jsr $2c05			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2d17	18		clc				clc
.2d18	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2d1a	85 0b		sta $0b				sta 	IFR0+IExp
.2d1c	4a		lsr a				lsr 	a 							; which we can halve.
.2d1d	38		sec				sec 								; convert back
.2d1e	e9 17		sbc #$17			sbc 	#23
.2d20	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2d22	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2d24	20 3b 2d	jsr $2d3b			jsr 	_IFSRNewton
.2d27	20 3b 2d	jsr $2d3b			jsr 	_IFSRNewton
.2d2a	20 3b 2d	jsr $2d3b			jsr 	_IFSRNewton
.2d2d	20 3b 2d	jsr $2d3b			jsr 	_IFSRNewton
.2d30	18		clc				clc
.2d31	60		rts				rts
.2d32					_IFSRZero:
.2d32	a2 08		ldx #$08			ldx 	#IFR0
.2d34	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.2d37	18		clc				clc
.2d38	60		rts				rts
.2d39					_IFSRFail:
.2d39	38		sec				sec
.2d3a	60		rts				rts
.2d3b					_IFSRNewton:
.2d3b	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2d3d	20 02 30	jsr $3002			jsr 	IFloatPushRx
.2d40	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2d42	20 02 30	jsr $3002			jsr 	IFloatPushRx
.2d45	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2d47	20 d6 2d	jsr $2dd6			jsr 	IFloatDivideFloat
.2d4a	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2d4c	20 23 30	jsr $3023			jsr 	IFloatPullRx
.2d4f	20 a9 2a	jsr $2aa9			jsr 	IFloatAdd 					; now guess + original/guess
.2d52	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2d54	20 e2 30	jsr $30e2			jsr 	IFloatShiftRight
.2d57	a2 0c		ldx #$0c			ldx 	#IFR1
.2d59	20 23 30	jsr $3023			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2d5c	60		rts				rts
.2d5d					IFloatFractionalR0:
.2d5d	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2d5f	29 3f		and #$3f			and 	#IFXMask
.2d61	f0 17		beq $2d7a			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2d63	20 f7 2c	jsr $2cf7			jsr 	IFloatAbsoluteR0 			; absolute value R9
.2d66	a2 08		ldx #$08			ldx 	#IFR0
.2d68	20 ea 30	jsr $30ea			jsr 	IFloatNormalise 			; normalise R0
.2d6b	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2d6d	20 55 30	jsr $3055			jsr 	IFloatCopyToRegister
.2d70	20 b3 2d	jsr $2db3			jsr 	IFloatIntegerR0 			; take integer part of R0
.2d73	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2d75	20 a2 2a	jsr $2aa2			jsr 	IFloatSubtract
.2d78	80 05		bra $2d7f			bra 	_FIPExit
.2d7a					_FIPZero:
.2d7a	a2 08		ldx #$08			ldx 	#IFR0
.2d7c	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.2d7f					_FIPExit:
.2d7f	18		clc				clc
.2d80	60		rts				rts
.2d81					IFloatCompare:
.2d81	20 a2 2a	jsr $2aa2			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2d84	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2d86	05 0b		ora $0b				ora 	IFR0+IExp
.2d88	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2d8a	29 3f		and #$3f			and 	#IFXMask
.2d8c	d0 19		bne $2da7			bne 	_IFCNonInteger
.2d8e	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero 			; check if zero
.2d91	f0 0f		beq $2da2			beq 	_IFCZero
.2d93					_IFCReturnSign:
.2d93	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2d95	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2d97	48		pha				pha
.2d98	a9 01		lda #$01			lda 	#1
.2d9a	20 b5 30	jsr $30b5			jsr 	IFloatSetByte 				; return to +1
.2d9d	68		pla				pla 								; sign bit back
.2d9e	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2da0	18		clc				clc
.2da1	60		rts				rts
.2da2					_IFCZero:
.2da2	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.2da5	18		clc				clc
.2da6	60		rts				rts
.2da7					_IFCNonInteger:
.2da7	a5 08		lda $08				lda 	IFR0+IM0
.2da9	29 00		and #$00			and		#$00
.2dab	05 09		ora $09				ora 	IFR0+IM1
.2dad	05 0a		ora $0a				ora 	IFR0+IM2
.2daf	f0 f1		beq $2da2			beq 	_IFCZero 					; near enough !
.2db1	80 e0		bra $2d93			bra 	_IFCReturnSign 				; return the sign of the difference.
.2db3					IFloatIntegerR0:
.2db3	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2db5	29 3f		and #$3f			and 	#IFXMask
.2db7	f0 1b		beq $2dd4			beq 	_FIPExit 					; if so do nothing
.2db9	a2 08		ldx #$08			ldx 	#IFR0
.2dbb	20 ea 30	jsr $30ea			jsr 	IFloatNormalise 			; normalise
.2dbe	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero 			; is it zero ?
.2dc1	f0 0e		beq $2dd1			beq 	_FIPZero 					; if so return zero.
.2dc3					_FIPShift:
.2dc3	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2dc5	29 20		and #$20			and 	#$20 						; still -ve
.2dc7	f0 0b		beq $2dd4			beq 	_FIPExit
.2dc9	20 e2 30	jsr $30e2			jsr 	IFloatShiftRight 			; shift mantissa right
.2dcc	20 0c 31	jsr $310c			jsr 	IFloatIncExponent 			; bump exponent
.2dcf	80 f2		bra $2dc3			bra 	_FIPShift
.2dd1					_FIPZero:
.2dd1	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.2dd4					_FIPExit:
.2dd4	18		clc				clc
.2dd5	60		rts				rts
.2dd6					IFloatDivideFloat:
.2dd6	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2dd9	20 0e 2c	jsr $2c0e			jsr 	IFCalculateNewSign 			; calculate sign of result
.2ddc	20 ea 30	jsr $30ea			jsr 	IFloatNormalise 			; normalise RX
.2ddf	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2de1	20 ea 30	jsr $30ea			jsr 	IFloatNormalise
.2de4	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero
.2de7	f0 56		beq $2e3f			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2de9	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2deb	20 05 2c	jsr $2c05			jsr 	IFMSignExtend
.2dee	8d d7 06	sta $06d7			sta 	IFNewExponent
.2df1	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2df4	b5 03		lda $03,x			lda 	IExp,x
.2df6	20 05 2c	jsr $2c05			jsr 	IFMSignExtend
.2df9	38		sec				sec
.2dfa	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2dfd	38		sec				sec
.2dfe	e9 17		sbc #$17			sbc 	#23
.2e00	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e03	20 41 2e	jsr $2e41			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2e06	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2e08	10 08		bpl $2e12			bpl 	_IFDFNoShiftResult
.2e0a	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2e0c	20 e2 30	jsr $30e2			jsr 	IFloatShiftRight
.2e0f	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e12					_IFDFNoShiftResult:
.2e12	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2e15	30 06		bmi $2e1d			bmi 	_IFDFCheckUnderflow
.2e17	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2e19	b0 24		bcs $2e3f			bcs 	_IFDFDivZero
.2e1b	80 11		bra $2e2e			bra		_IFDFExit
.2e1d					_IFDFCheckUnderflow:
.2e1d	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2e20	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2e22	b0 0a		bcs $2e2e			bcs 	_IFDFExit
.2e24	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e27	a2 14		ldx #$14			ldx 	#IFRTemp
.2e29	20 e2 30	jsr $30e2			jsr 	IFloatShiftRight
.2e2c	80 ef		bra $2e1d			bra 	_IFDFCheckUnderflow
.2e2e					_IFDFExit:
.2e2e	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2e31	29 3f		and #$3f			and 	#IFXMask
.2e33	0d d8 06	ora $06d8			ora 	IFNewSign
.2e36	85 17		sta $17				sta 	IFRTemp+IExp
.2e38	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2e3a	20 44 30	jsr $3044			jsr 	IFloatCopyFromRegister
.2e3d	18		clc				clc
.2e3e	60		rts				rts
.2e3f					_IFDFDivZero:
.2e3f	38		sec				sec
.2e40	60		rts				rts
.2e41					IFloatDivideSupport:
.2e41	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2e43	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.2e46	5a		phy				phy 								; main division loop x 23
.2e47	a0 17		ldy #$17			ldy 	#23
.2e49					_IFDSLoop:
.2e49	20 7c 2c	jsr $2c7c			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2e4c	20 70 2c	jsr $2c70			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2e4f	88		dey				dey
.2e50	d0 f7		bne $2e49			bne 	_IFDSLoop 					; do it 24 times
.2e52	7a		ply				ply
.2e53	60		rts				rts
.2e54					IFloatIntegerToStringR0:
.2e54	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2e57	20 34 31	jsr $3134			jsr 	IFloatBufferReset			; empty buffer
.2e5a	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer
.2e5c	29 3f		and #$3f			and 	#IFXMask
.2e5e	d0 1e		bne $2e7e			bne 	_IFIFail
.2e60	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2e62	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero
.2e65	f0 0e		beq $2e75			beq 	_IFINotNegative
.2e67	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2e69	29 40		and #$40			and 	#IFSign
.2e6b	f0 08		beq $2e75			beq 	_IFINotNegative
.2e6d	a9 2d		lda #$2d			lda 	#"-"						; output -
.2e6f	20 43 31	jsr $3143			jsr 	IFloatBufferWrite
.2e72	20 be 30	jsr $30be			jsr 	IFloatNegate 				; tidy up !
.2e75					_IFINotNegative:
.2e75	20 80 2e	jsr $2e80			jsr 	_IFIRecursiveConvert 		; start converting
.2e78	20 3b 31	jsr $313b			jsr 	IFloatGetBufferAddress
.2e7b	18		clc				clc
.2e7c	80 01		bra $2e7f			bra 	_IFIExit
.2e7e					_IFIFail:
.2e7e	38		sec				sec
.2e7f					_IFIExit:
.2e7f	60		rts				rts
.2e80					_IFIRecursiveConvert:
.2e80	a2 0c		ldx #$0c			ldx 	#IFR1
.2e82	20 55 30	jsr $3055			jsr 	IFloatCopyToRegister 		; R0->R1
.2e85	a2 08		ldx #$08			ldx 	#IFR0
.2e87	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2e8a	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.2e8d	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2e8f	20 18 2c	jsr $2c18			jsr 	IFloatDivideInteger
.2e92	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2e94	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero
.2e97	f0 09		beq $2ea2			beq 	_IFIOutDigit
.2e99	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder
.2e9b	48		pha				pha
.2e9c	20 80 2e	jsr $2e80			jsr 	_IFIRecursiveConvert 		; convert the divider
.2e9f	68		pla				pla
.2ea0	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2ea2					_IFIOutDigit:
.2ea2	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2ea4	c9 0a		cmp #$0a			cmp	 	#10
.2ea6	90 02		bcc $2eaa			bcc 	_IFINotHex
.2ea8	69 06		adc #$06			adc 	#6
.2eaa					_IFINotHex:
.2eaa	69 30		adc #$30			adc 	#48
.2eac	20 43 31	jsr $3143			jsr 	IFloatBufferWrite
.2eaf	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2eb0					IFloatFloatToStringR0:
.2eb0	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2eb2	20 02 30	jsr $3002			jsr 	IFloatPushRx
.2eb5	20 55 30	jsr $3055			jsr 	IFloatCopyToRegister
.2eb8	20 b3 2d	jsr $2db3			jsr 	IFloatIntegerR0				; make R0 integer
.2ebb	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2ebd	20 54 2e	jsr $2e54			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2ec0	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2ec3	a5 13		lda $13				lda 	IFR2+IExp 					; is integer.
.2ec5	29 3f		and #$3f			and 	#IFXMask
.2ec7	f0 44		beq $2f0d			beq 	_IFFSExit
.2ec9					_IFloatFracLoop:
.2ec9	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2ecb	20 44 30	jsr $3044			jsr 	IFloatCopyFromRegister
.2ece	20 5d 2d	jsr $2d5d			jsr 	IFloatFractionalR0
.2ed1	20 ea 30	jsr $30ea			jsr 	IFloatNormalise
.2ed4	a2 10		ldx #$10			ldx 	#IFR2
.2ed6	20 55 30	jsr $3055			jsr 	IFloatCopyToRegister 		; copy to R2
.2ed9	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2edb	a9 0a		lda #$0a			lda 	#10
.2edd	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.2ee0	a2 10		ldx #$10			ldx 	#IFR2						; R0,R2 = R2 * 10
.2ee2	20 53 2b	jsr $2b53			jsr 	IFloatMultiply
.2ee5	a2 10		ldx #$10			ldx 	#IFR2
.2ee7	20 55 30	jsr $3055			jsr 	IFloatCopyToRegister
.2eea	20 b3 2d	jsr $2db3			jsr 	IFloatIntegerR0 			; get integer part of R0
.2eed	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2ef0	c9 03		cmp #$03			cmp 	#3
.2ef2	f0 16		beq $2f0a			beq 	_IFFSExitStripZero
.2ef4	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet ?
.2ef7	d0 05		bne $2efe			bne 	_IFloatNotFirst
.2ef9	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2efb	20 43 31	jsr $3143			jsr 	IFloatBufferWrite
.2efe					_IFloatNotFirst:
.2efe	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2f01	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2f03	09 30		ora #$30			ora 	#"0"						; ASCII
.2f05	20 43 31	jsr $3143			jsr 	IFloatBufferWrite 			; write to the buffer.
.2f08	80 bf		bra $2ec9			bra 	_IFloatFracLoop
.2f0a					_IFFSExitStripZero:
.2f0a	20 52 31	jsr $3152			jsr 	IFloatStripTrailingZeros
.2f0d					_IFFSExit:
.2f0d	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2f0f	20 23 30	jsr $3023			jsr 	IFloatPullRx
.2f12	20 3b 31	jsr $313b			jsr 	IFloatGetBufferAddress
.2f15	18		clc				clc
.2f16	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2f17					IFloatStringToFloatR0:
.2f17	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2f1a	86 20		stx $20				stx 	iTemp0
.2f1c	84 21		sty $21				sty 	iTemp0+1
.2f1e	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2f20	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.2f23	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2f26	20 b3 2f	jsr $2fb3			jsr 	IFSTFGetNext 				; get first
.2f29	f0 1b		beq $2f46			beq 	_IFSTFFail 					; no character
.2f2b	90 10		bcc $2f3d			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2f2d	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2f2f	d0 15		bne $2f46			bne 	_IFSTFFail
.2f31	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2f33	8d dc 06	sta $06dc			sta 	IFSignFlag
.2f36					_IFSTFLoop:
.2f36	20 b3 2f	jsr $2fb3			jsr 	IFSTFGetNext 				; get next
.2f39	b0 0b		bcs $2f46			bcs 	_IFSTFFail 					; bad character.
.2f3b	f0 11		beq $2f4e			beq 	_IFSTFExit 					; end of data
.2f3d					_IFSTFHaveChar:
.2f3d	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2f3f	f0 08		beq $2f49			beq 	_IFSTFDecimal
.2f41	20 d7 2f	jsr $2fd7			jsr 	IFSTFAddR0 					; add number in
.2f44	80 f0		bra $2f36			bra 	_IFSTFLoop 					; keep going until . or end.
.2f46					_IFSTFFail:
.2f46	38		sec				sec
.2f47	80 0d		bra $2f56			bra 	_IFSTFReturn
.2f49					_IFSTFDecimal:
.2f49	20 5e 2f	jsr $2f5e			jsr 	IFSTFDecimal 				; call the decimal places code.
.2f4c	b0 08		bcs $2f56			bcs 	_IFSTFReturn 				; error
.2f4e					_IFSTFExit:
.2f4e	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2f50	0d dc 06	ora $06dc			ora 	IFSignFlag
.2f53	85 0b		sta $0b				sta 	IFR0+IExp
.2f55	18		clc				clc
.2f56					_IFSTFReturn:
.2f56	60		rts				rts
.2f57					IFloatAddDecimalToR0:
.2f57	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2f5a	86 20		stx $20				stx 	iTemp0
.2f5c	84 21		sty $21				sty 	iTemp0+1
.2f5e					IFSTFDecimal:
.2f5e	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2f60	20 02 30	jsr $3002			jsr 	IFloatPushRx
.2f63	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2f65	20 b3 30	jsr $30b3			jsr 	IFloatSetZero
.2f68	9c dd 06	stz $06dd			stz 	IFDecimalPlaces
.2f6b					_IFSTDLoop:
.2f6b	20 b3 2f	jsr $2fb3			jsr 	IFSTFGetNext 				; get next
.2f6e	b0 41		bcs $2fb1			bcs 	_IFSTFFail2 				; bad character.
.2f70	f0 11		beq $2f83			beq 	_IFSTFComplete 				; end of data, work out the result.
.2f72	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2f74	f0 39		beq $2faf			beq 	_IFSTFExit2
.2f76	20 d7 2f	jsr $2fd7			jsr 	IFSTFAddR0 					; add number in
.2f79	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2f7c	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2f7f	c9 03		cmp #$03			cmp 	#3
.2f81	90 e8		bcc $2f6b			bcc 	_IFSTDLoop
.2f83					_IFSTFComplete:
.2f83	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2f86	f0 27		beq $2faf			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2f88	3a		dec a				dec 	a 							; table indexed from 1.
.2f89	0a		asl a				asl 	a
.2f8a	0a		asl a				asl 	a
.2f8b	aa		tax				tax
.2f8c	bd ee 2f	lda $2fee,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2f8f	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2f91	bd ef 2f	lda $2fef,x			lda 	TableTen+1,x
.2f94	85 0d		sta $0d				sta  	IFR1+IM1
.2f96	bd f0 2f	lda $2ff0,x			lda 	TableTen+2,x
.2f99	85 0e		sta $0e				sta  	IFR1+IM2
.2f9b	bd f1 2f	lda $2ff1,x			lda 	TableTen+3,x
.2f9e	85 0f		sta $0f				sta  	IFR1+IExp
.2fa0	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2fa2	20 53 2b	jsr $2b53			jsr 	IFloatMultiply
.2fa5	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop and add the decimal.
.2fa7	20 23 30	jsr $3023			jsr 	IFloatPullRx
.2faa	a2 0c		ldx #$0c			ldx 	#IFR1
.2fac	20 a9 2a	jsr $2aa9			jsr 	IFloatAdd
.2faf					_IFSTFExit2:
.2faf	18		clc				clc
.2fb0	60		rts				rts
.2fb1					_IFSTFFail2:
.2fb1	38		sec				sec
.2fb2	60		rts				rts
.2fb3					IFSTFGetNext:
.2fb3	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.2fb6	f0 19		beq $2fd1			beq 	_IFSTFReturnOk
.2fb8	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.2fba	e6 20		inc $20				inc 	iTemp0 						; point at next.
.2fbc	d0 02		bne $2fc0			bne 	_IFSTFGNNoCarry
.2fbe	e6 21		inc $21				inc 	iTemp0+1
.2fc0					_IFSTFGNNoCarry:
.2fc0	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.2fc3	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2fc5	f0 08		beq $2fcf			beq 	_IFSTFGOkay
.2fc7	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2fc9	90 08		bcc $2fd3			bcc 	_IFSTFGFail
.2fcb	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2fcd	b0 04		bcs $2fd3			bcs 	_IFSTFGFail
.2fcf					_IFSTFGOkay:
.2fcf	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2fd1					_IFSTFReturnOk:
.2fd1	18		clc				clc
.2fd2	60		rts				rts
.2fd3					_IFSTFGFail:
.2fd3	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2fd5	38		sec				sec
.2fd6	60		rts				rts
.2fd7					IFSTFAddR0:
.2fd7	29 0f		and #$0f			and 	#15 						; to int value
.2fd9	48		pha				pha 								; save it.
.2fda	a9 0a		lda #$0a			lda 	#10
.2fdc	a2 0c		ldx #$0c			ldx 	#IFR1
.2fde	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.2fe1	20 53 2b	jsr $2b53			jsr 	IFloatMultiply
.2fe4	68		pla				pla
.2fe5	a2 0c		ldx #$0c			ldx 	#IFR1
.2fe7	20 b5 30	jsr $30b5			jsr 	IFloatSetByte
.2fea	20 a9 2a	jsr $2aa9			jsr 	IFloatAdd
.2fed	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.2fee					TableTen:
>2fee	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2ff2	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2ff6	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2ffa	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2ffe	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.3002					IFloatPushRx:
.3002	5a		phy				phy
.3003	ac de 06	ldy $06de			ldy 	IFStackIndex
.3006	b5 00		lda $00,x			lda 	IM0,x
.3008	99 df 06	sta $06df,y			sta 	IFStack,y
.300b	b5 01		lda $01,x			lda 	IM1,x
.300d	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.3010	b5 02		lda $02,x			lda 	IM2,x
.3012	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.3015	b5 03		lda $03,x			lda 	IExp,x
.3017	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.301a	c8		iny				iny
.301b	c8		iny				iny
.301c	c8		iny				iny
.301d	c8		iny				iny
.301e	8c de 06	sty $06de			sty 	IFStackIndex
.3021	7a		ply				ply
.3022	60		rts				rts
.3023					IFloatPullRx:
.3023	5a		phy				phy
.3024	ac de 06	ldy $06de			ldy 	IFStackIndex
.3027	88		dey				dey
.3028	88		dey				dey
.3029	88		dey				dey
.302a	88		dey				dey
.302b	b9 df 06	lda $06df,y			lda 	IFStack,y
.302e	95 00		sta $00,x			sta 	IM0,x
.3030	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.3033	95 01		sta $01,x			sta 	IM1,x
.3035	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.3038	95 02		sta $02,x			sta 	IM2,x
.303a	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.303d	95 03		sta $03,x			sta 	IExp,x
.303f	8c de 06	sty $06de			sty 	IFStackIndex
.3042	7a		ply				ply
.3043	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.3044					IFloatCopyFromRegister:
.3044	b5 00		lda $00,x			lda 	0,x
.3046	85 08		sta $08				sta 	IFR0
.3048	b5 01		lda $01,x			lda 	1,x
.304a	85 09		sta $09				sta 	IFR0+1
.304c	b5 02		lda $02,x			lda 	2,x
.304e	85 0a		sta $0a				sta 	IFR0+2
.3050	b5 03		lda $03,x			lda 	3,x
.3052	85 0b		sta $0b				sta 	IFR0+3
.3054	60		rts				rts
.3055					IFloatCopyToRegister:
.3055	a5 08		lda $08				lda 	IFR0
.3057	95 00		sta $00,x			sta 	0,x
.3059	a5 09		lda $09				lda 	IFR0+1
.305b	95 01		sta $01,x			sta 	1,x
.305d	a5 0a		lda $0a				lda 	IFR0+2
.305f	95 02		sta $02,x			sta 	2,x
.3061	a5 0b		lda $0b				lda 	IFR0+3
.3063	95 03		sta $03,x			sta 	3,x
.3065	60		rts				rts
.3066					IFloatLoadInline:
.3066	68		pla				pla 								; pop address off to iTemp0
.3067	85 20		sta $20				sta 	iTemp0
.3069	68		pla				pla
.306a	85 21		sta $21				sta 	iTemp0+1
.306c	a0 01		ldy #$01			ldy 	#1
.306e	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.3070	95 00		sta $00,x			sta 	0,x
.3072	c8		iny				iny
.3073	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.3075	95 01		sta $01,x			sta 	1,x
.3077	c8		iny				iny
.3078	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.307a	95 02		sta $02,x			sta 	2,x
.307c	c8		iny				iny
.307d	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.307f	95 03		sta $03,x			sta 	3,x
.3081	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.3082	a5 20		lda $20				lda 	iTemp0
.3084	69 05		adc #$05			adc 	#5
.3086	85 20		sta $20				sta 	iTemp0
.3088	90 02		bcc $308c			bcc 	_IFLINoCarry
.308a	e6 21		inc $21				inc 	iTemp0+1
.308c					_IFLINoCarry:
.308c	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.308f					IFloatMultiply8BitRx:
.308f	5a		phy		        phy
.3090	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3092	a4 08		ldy $08		        ldy     IFR0+IM0
.3094	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.3095	85 08		sta $08		        sta     IFR0+IM0
.3097	84 09		sty $09		        sty     IFR0+IM1
.3099	a9 00		lda #$00	        lda     #0
.309b	a0 08		ldy #$08	        ldy     #8
.309d					_IFMLoop:
.309d	90 03		bcc $30a2	        bcc     _IFMNoAdd
.309f	18		clc		        clc
.30a0	65 09		adc $09		        adc     IFR0+IM1
.30a2					_IFMNoAdd:
.30a2	6a		ror a		        ror     a
.30a3	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.30a5	88		dey		        dey
.30a6	d0 f5		bne $309d	        bne     _IFMLoop
.30a8	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.30aa	7a		ply		        ply
.30ab	60		rts		        rts
.30ac					IFloatCheckZero:
.30ac	b5 00		lda $00,x			lda 	IM0,x
.30ae	15 01		ora $01,x			ora 	IM1,x
.30b0	15 02		ora $02,x			ora 	IM2,x
.30b2	60		rts				rts
.30b3					IFloatSetZero:
.30b3	a9 00		lda #$00			lda 	#0
.30b5					IFloatSetByte:
.30b5	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.30b7	74 01		stz $01,x			stz 	IM1,x
.30b9	74 02		stz $02,x			stz 	IM2,x
.30bb	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.30bd	60		rts				rts
.30be					IFloatNegate:
.30be	b5 03		lda $03,x			lda 	IExp,x
.30c0	49 40		eor #$40			eor 	#IFSign
.30c2	95 03		sta $03,x			sta 	IExp,x
.30c4	18		clc				clc
.30c5	60		rts				rts
.30c6					IFloatMantissaNegate:
.30c6	38		sec				sec
.30c7	a9 00		lda #$00			lda 	#0
.30c9	f5 00		sbc $00,x			sbc 	IM0,x
.30cb	95 00		sta $00,x			sta 	IM0,x
.30cd	a9 00		lda #$00			lda 	#0
.30cf	f5 01		sbc $01,x			sbc 	IM1,x
.30d1	95 01		sta $01,x			sta 	IM1,x
.30d3	a9 00		lda #$00			lda 	#0
.30d5	f5 02		sbc $02,x			sbc 	IM2,x
.30d7	95 02		sta $02,x			sta 	IM2,x
.30d9	60		rts				rts
.30da					IFloatShiftLeft:
.30da	18		clc				clc
.30db					IFloatRotateLeft:
.30db	36 00		rol $00,x			rol 	IM0,x
.30dd	36 01		rol $01,x			rol 	IM1,x
.30df	36 02		rol $02,x			rol 	IM2,x
.30e1	60		rts				rts
.30e2					IFloatShiftRight:
.30e2	18		clc				clc
.30e3					IFloatRotateRight:
.30e3	76 02		ror $02,x			ror 	IM2,x
.30e5	76 01		ror $01,x			ror 	IM1,x
.30e7	76 00		ror $00,x			ror 	IM0,x
.30e9	60		rts				rts
.30ea					IFloatNormalise:
.30ea	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero 			; is it zero
.30ed	f0 18		beq $3107			beq 	_IFNExitZero 				; if so exit
.30ef					_IFNLoop:
.30ef	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.30f1	29 c0		and #$c0			and 	#$C0
.30f3	c9 40		cmp #$40			cmp 	#$40
.30f5	f0 13		beq $310a			beq 	_IFNExitOkay 				; if so , then we are done.
.30f7	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.30f9	29 3f		and #$3f			and 	#$3F
.30fb	c9 20		cmp #$20			cmp 	#$20
.30fd	f0 0b		beq $310a			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.30ff	20 20 31	jsr $3120			jsr 	IFloatDecExponent
.3102	20 da 30	jsr $30da			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.3105	80 e8		bra $30ef			bra 	_IFNLoop
.3107					_IFNExitZero:
.3107	20 b3 30	jsr $30b3			jsr 	IFloatSetZero 				; set the result to zero
.310a					_IFNExitOkay:
.310a	18		clc				clc  								; return with CC.
.310b	60		rts				rts
.310c					IFloatIncExponent:
.310c	b5 03		lda $03,x			lda 	IExp,x
.310e	48		pha				pha
.310f	29 c0		and #$c0			and 	#$C0
.3111	8d 1f 07	sta $071f			sta 	IFXTemp
.3114	68		pla				pla
.3115	1a		inc a				inc 	a
.3116	29 3f		and #$3f			and 	#$3F
.3118	48		pha				pha
.3119	0d 1f 07	ora $071f			ora 	IFXTemp
.311c	95 03		sta $03,x			sta 	IExp,x
.311e	68		pla				pla
.311f	60		rts				rts
.3120					IFloatDecExponent:
.3120	b5 03		lda $03,x			lda 	IExp,x
.3122	48		pha				pha
.3123	29 c0		and #$c0			and 	#$C0
.3125	8d 1f 07	sta $071f			sta 	IFXTemp
.3128	68		pla				pla
.3129	3a		dec a				dec 	a
.312a	29 3f		and #$3f			and 	#$3F
.312c	48		pha				pha
.312d	0d 1f 07	ora $071f			ora 	IFXTemp
.3130	95 03		sta $03,x			sta 	IExp,x
.3132	68		pla				pla
.3133	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.3134					IFloatBufferReset:
.3134	9c 20 07	stz $0720			stz 	IFBufferCount
.3137	9c 21 07	stz $0721			stz 	IFBuffer
.313a	60		rts				rts
.313b					IFloatGetBufferAddress:
.313b	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.313d	a2 21		ldx #$21			ldx 	#(IFBuffer & $FF)
.313f	ad 20 07	lda $0720			lda 	IFBufferCount
.3142	60		rts				rts
.3143					IFloatBufferWrite:
.3143	da		phx				phx
.3144	ae 20 07	ldx $0720			ldx 	IFBufferCount
.3147	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.314a	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.314d	ee 20 07	inc $0720			inc 	IFBufferCount
.3150	fa		plx				plx
.3151	60		rts				rts
.3152					IFloatStripTrailingZeros:
.3152	ae 20 07	ldx $0720			ldx 	IFBufferCount
.3155	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.3158	c9 30		cmp #$30			cmp		#"0"
.315a	d0 0f		bne $316b			bne 	_IFSTExit
.315c	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.315f	c9 2e		cmp #$2e			cmp 	#"."
.3161	f0 08		beq $316b			beq 	_IFSTExit
.3163	ce 20 07	dec $0720			dec 	IFBufferCount
.3166	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.3169	80 e7		bra $3152			bra 	IFloatStripTrailingZeros
.316b					_IFSTExit:
.316b	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.316c					IFloatCheck:
.316c	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative
.316e	09 40		ora #$40			ora 	#IFSign
.3170	85 0b		sta $0b				sta 	IFR0+IExp
.3172	20 a9 2a	jsr $2aa9			jsr 	IFloatAdd 					; add allowed to error.
.3175	a2 08		ldx #$08			ldx 	#IFR0
.3177	20 ac 30	jsr $30ac			jsr 	IFloatCheckZero 			; error if < 0
.317a	f0 06		beq $3182			beq 	_IFAOkay
.317c	a5 0b		lda $0b				lda 	IFR0+IExp
.317e	29 40		and #$40			and 	#IFSign
.3180	d0 01		bne $3183			bne 	_IFAFail
.3182					_IFAOkay:
.3182	60		rts				rts
.3183					_IFAFail:
.3183	38		sec				sec
.3184	68		pla				pla 								; get address - 2
.3185	e9 02		sbc #$02			sbc 	#2
.3187	aa		tax				tax
.3188	68		pla				pla
.3189	e9 00		sbc #$00			sbc 	#0
.318b	a8		tay				tay
.318c	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.318e					_IFAStop:
>318e	db						.byte 	$DB 						; display an error AA ADR ADR
.318f	80 fd		bra $318e			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
