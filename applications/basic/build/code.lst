
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Mon May 29 13:07:22 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 e2 1a	jsr $1ae2			jsr 	PGMSetBaseAddress
.1007	20 35 1e	jsr $1e35			jsr 	IFInitialise
.100a	4c 9d 10	jmp $109d			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a7					PR_STANDARD_LAST = $a7
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d7					PR_UNARY_FIRST = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 43 24	jsr $2443			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 3b 11	jmp $113b		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 cb 1d	jsr $1dcb			jsr 	StringSystemInitialise
.101e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.101f					NoExec01:
.101f					NoExec02:
.101f					NoExec03:
.101f					NoExec04:
.101f					NoExec05:
.101f					NoExec06:
.101f					NoExec07:
.101f	4c ea 10	jmp $10ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1022					Command_Print:
.1022					Command_IP_Main:
.1022	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1023					_CPLoop:
.1023	08		php				php 								; save last action flag
.1024	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1026	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1028	f0 3e		beq $1068			beq 	_CPExit 					; without consuming
.102a	c9 9b		cmp #$9b			cmp 	#PR_COLON
.102c	f0 3a		beq $1068			beq 	_CPExit
.102e	68		pla				pla 								; throw last action flag
.102f	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1031	c8		iny				iny
.1032	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1034	f0 2f		beq $1065			beq 	_CPContinueWithSameLine
.1036	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1038	f0 26		beq $1060			beq 	_CPTab
.103a	88		dey				dey 								; undo the get.
.103b	20 ab 13	jsr $13ab			jsr 	EXPEvaluateExpression 		; evaluate expression.
.103e	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1040	10 14		bpl $1056			bpl 	_CPNumber
.1042	5a		phy				phy
.1043	18		clc				clc 								; string address to YX
.1044	a5 0c		lda $0c				lda 	IFR0+IM0
.1046	aa		tax				tax
.1047	a5 0d		lda $0d				lda 	IFR0+IM1
.1049	a8		tay				tay
.104a	e8		inx				inx 								; point to 1st character
.104b	d0 01		bne $104e			bne 	_CPNoCarry
.104d	c8		iny				iny
.104e					_CPNoCarry:
.104e	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1050	20 71 10	jsr $1071			jsr 	CPPrintAYX 					; print AYX
.1053	7a		ply				ply
.1054	80 cc		bra $1022			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1056					_CPNumber:
.1056	5a		phy				phy
.1057	20 47 22	jsr $2247			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.105a	20 71 10	jsr $1071			jsr 	CPPrintAYX 					; print AYX
.105d	7a		ply				ply
.105e	80 c2		bra $1022			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1060					_CPTab:
.1060	a9 09		lda #$09			lda 	#9 							; print TAB
.1062	20 84 10	jsr $1084			jsr 	CPPrintA
.1065					_CPContinueWithSameLine:
.1065	38		sec				sec 								; loop round with carry set, which
.1066	80 bb		bra $1023			bra 	_CPLoop 					; will inhibit final CR
.1068					_CPExit:
.1068	28		plp				plp 								; get last action flag
.1069	b0 05		bcs $1070			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.106b	a9 0d		lda #$0d			lda 	#13 						; print new line
.106d	20 84 10	jsr $1084			jsr 	CPPrintA
.1070					_CPExit2:
.1070	60		rts				rts
.1071					CPPrintAYX:
.1071	86 1e		stx $1e				stx 	zTemp0
.1073	84 1f		sty $1f				sty 	zTemp0+1
.1075	aa		tax				tax
.1076	f0 0b		beq $1083			beq 	_CPPrintExit
.1078	a0 00		ldy #$00			ldy 	#0
.107a					_CPPrintAYXLoop:
.107a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.107c	20 84 10	jsr $1084			jsr 	CPPrintA
.107f	c8		iny				iny
.1080	ca		dex				dex
.1081	d0 f7		bne $107a			bne 	_CPPrintAYXLoop
.1083					_CPPrintExit:
.1083	60		rts				rts
.1084					CPPrintA:
.1084	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1087					Command_NEW:
.1087	20 e9 1a	jsr $1ae9			jsr 	PGMNewProgram
.108a	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.108d	4c e4 10	jmp $10e4			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1090					Command_REM:
.1090					Command_REM2:
.1090	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1092	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1094	d0 06		bne $109c			bne 	_CRExit
.1096	c8		iny				iny 								; skip over it, it's a comment.
.1097	98		tya				tya
.1098	38		sec				sec
.1099	71 1c		adc ($1c),y			adc 	(codePtr),y
.109b	a8		tay				tay
.109c					_CRExit:
.109c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.109d					Command_RUN:
.109d	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.10a0	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.10a3	85 1d		sta $1d				sta 	codePtr+1
.10a5	64 1c		stz $1c				stz 	codePtr
.10a7	80 0b		bra $10b4			bra 	RUNNewLine
.10a9					RUNEndOfLine:
.10a9	18		clc				clc 								; advance to next line.
.10aa	b2 1c		lda ($1c)			lda 	(codePtr)
.10ac	65 1c		adc $1c				adc 	codePtr
.10ae	85 1c		sta $1c				sta 	codePtr
.10b0	90 02		bcc $10b4			bcc 	_RELNoCarry
.10b2	e6 1d		inc $1d				inc 	codePtr+1
.10b4					_RELNoCarry:
.10b4					RUNNewLine:
.10b4	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.10b6	9a		txs				txs
.10b7	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.10b9	f0 29		beq $10e4			beq 	Command_END
.10bb	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.10bd					RUNNewCommand:
.10bd	9c 49 04	stz $0449			stz 	stringInitialised 			; reset string system.
.10c0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.10c2	10 1a		bpl $10de			bpl		_RUNNotToken 				; probably an identifier
.10c4	c8		iny				iny 								; consume token
.10c5	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.10c7	f0 f4		beq $10bd			beq 	RUNNewCommand
.10c9	c9 a8		cmp #$a8			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.10cb	b0 0e		bcs $10db			bcs 	_RUNSyntax
.10cd	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.10cf	90 0a		bcc $10db			bcc 	_RUNSyntax
.10d1	0a		asl a				asl 	a 							; double into X.
.10d2	aa		tax				tax
.10d3	20 d8 10	jsr $10d8			jsr 	_RUNDispatchMain			; call the main dispatcher
.10d6	80 e5		bra $10bd			bra 	RUNNewCommand
.10d8					_RUNDispatchMain:
.10d8	7c ff 17	jmp ($17ff,x)			jmp 	(VectorTable,x)
.10db					_RUNSyntax:
.10db	4c ea 10	jmp $10ea		jmp	ErrorV_syntax
.10de					_RUNNotToken:
.10de	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.10e1					Command_Shift_Handler:
.10e1	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.10e4					Command_END:
.10e4	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.10e7					Command_STOP:
.10e7	4c 85 11	jmp $1185		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.10ea					ErrorV_syntax:
.10ea	20 2c 25	jsr $252c		jsr	ErrorHandler
>10ed	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>10f5	72 72 6f 72 00
.10fa					ErrorV_range:
.10fa	20 2c 25	jsr $252c		jsr	ErrorHandler
>10fd	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>1105	61 6e 67 65 00
.110a					ErrorV_value:
.110a	20 2c 25	jsr $252c		jsr	ErrorHandler
>110d	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>1115	65 00
.1117					ErrorV_type:
.1117	20 2c 25	jsr $252c		jsr	ErrorHandler
>111a	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>1122	6d 61 74 63 68 00
.1128					ErrorV_unimplemented:
.1128	20 2c 25	jsr $252c		jsr	ErrorHandler
>112b	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>1133	65 6d 65 6e 74 65 64 00
.113b					ErrorV_assert:
.113b	20 2c 25	jsr $252c		jsr	ErrorHandler
>113e	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>1146	61 69 6c 00
.114a					ErrorV_internal:
.114a	20 2c 25	jsr $252c		jsr	ErrorHandler
>114d	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>1155	20 45 72 72 6f 72 00
.115c					ErrorV_divzero:
.115c	20 2c 25	jsr $252c		jsr	ErrorHandler
>115f	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>1167	79 20 5a 65 72 6f 00
.116e					ErrorV_structure:
.116e	20 2c 25	jsr $252c		jsr	ErrorHandler
>1171	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>1179	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1185					ErrorV_stop:
.1185	20 2c 25	jsr $252c		jsr	ErrorHandler
>1188	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>1190	53 74 6f 70 70 65 64 00
.1198					ErrorV_data:
.1198	20 2c 25	jsr $252c		jsr	ErrorHandler
>119b	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>11a3	61 74 61 00
.11a7					ErrorV_redefine:
.11a7	20 2c 25	jsr $252c		jsr	ErrorHandler
>11aa	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>11b2	64 65 66 69 6e 65 64 00
.11ba					ErrorV_index:
.11ba	20 2c 25	jsr $252c		jsr	ErrorHandler
>11bd	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>11c5	79 20 49 6e 64 65 78 00
.11cd					ErrorV_memory:
.11cd	20 2c 25	jsr $252c		jsr	ErrorHandler
>11d0	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>11d8	65 6d 6f 72 79 00
.11de					ErrorV_uninitialised:
.11de	20 2c 25	jsr $252c		jsr	ErrorHandler
>11e1	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>11e9	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.11f8					ErrorV_string:
.11f8	20 2c 25	jsr $252c		jsr	ErrorHandler
>11fb	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>1203	6e 67 20 4c 65 6e 67 74 68 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.120d					ERRCheckLParen:
.120d	b1 1c		lda ($1c),y			lda 	(codePtr),y
.120f	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.1211	d0 18		bne $122b			bne 	ERRSyntaxError
.1213	c8		iny				iny
.1214	60		rts				rts
.1215					ERRCheckRParen:
.1215	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1217	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.1219	d0 10		bne $122b			bne 	ERRSyntaxError
.121b	c8		iny				iny
.121c	60		rts				rts
.121d					ERRCheckComma:
.121d	b1 1c		lda ($1c),y			lda 	(codePtr),y
.121f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1221	d0 08		bne $122b			bne 	ERRSyntaxError
.1223	c8		iny				iny
.1224	60		rts				rts
.1225					ERRCheckA:
.1225	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.1227	d0 02		bne $122b			bne 	ERRSyntaxError
.1229	c8		iny				iny
.122a	60		rts				rts
.122b					ERRSyntaxError:
.122b	4c ea 10	jmp $10ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.122e					EXPBinAdd:
.122e	24 0f		bit $0f				bit 	IFR0+IExp
.1230	30 6f		bmi $12a1			bmi 	EXPConcatenate
.1232	a2 10		ldx #$10			ldx 	#IFR1
.1234	4c 40 1e	jmp $1e40			jmp 	IFloatAdd
.1237					EXPBinSub:
.1237	24 0f		bit $0f				bit 	IFR0+IExp
.1239	30 3f		bmi $127a			bmi 	EXPTypeError
.123b	a2 10		ldx #$10			ldx 	#IFR1
.123d	4c 39 1e	jmp $1e39			jmp 	IFloatSubtract
.1240					EXPBinMul:
.1240	24 0f		bit $0f				bit 	IFR0+IExp
.1242	30 36		bmi $127a			bmi 	EXPTypeError
.1244	a2 10		ldx #$10			ldx 	#IFR1
.1246	4c ea 1e	jmp $1eea			jmp 	IFloatMultiply
.1249					EXPBinFDiv:
.1249	24 0f		bit $0f				bit 	IFR0+IExp
.124b	30 2d		bmi $127a			bmi 	EXPTypeError
.124d	a2 10		ldx #$10			ldx 	#IFR1
.124f	20 6d 21	jsr $216d			jsr 	IFloatDivideFloat
.1252	b0 0f		bcs $1263			bcs 	EXPDZero
.1254	60		rts				rts
.1255					EXPBinIDiv:
.1255	24 0f		bit $0f				bit 	IFR0+IExp
.1257	30 21		bmi $127a			bmi 	EXPTypeError
.1259	a2 10		ldx #$10			ldx 	#IFR1
.125b	20 6d 21	jsr $216d			jsr 	IFloatDivideFloat
.125e	b0 03		bcs $1263			bcs 	EXPDZero
.1260	4c 4a 21	jmp $214a			jmp 	IFloatIntegerR0
.1263					EXPDZero:
.1263	4c 5c 11	jmp $115c		jmp	ErrorV_divzero
.1266					EXPBinIMod:
.1266	24 0f		bit $0f				bit 	IFR0+IExp
.1268	30 10		bmi $127a			bmi 	EXPTypeError
.126a	a2 10		ldx #$10			ldx 	#IFR1
.126c	5a		phy				phy
.126d	20 82 20	jsr $2082			jsr 	IFPreProcessBitwise 		; set up everything.
.1270	d0 05		bne $1277			bne 	EXPDRange
.1272	20 bb 1f	jsr $1fbb			jsr 	IFloatModulusInteger
.1275	7a		ply				ply
.1276	60		rts				rts
.1277					EXPDRange:
.1277	4c fa 10	jmp $10fa		jmp	ErrorV_range
.127a					EXPTypeError:
.127a	4c 17 11	jmp $1117		jmp	ErrorV_type
.127d					EXPBinAnd:
.127d	24 0f		bit $0f				bit 	IFR0+IExp
.127f	30 f9		bmi $127a			bmi 	EXPTypeError
.1281	a2 10		ldx #$10			ldx 	#IFR1
.1283	20 3d 20	jsr $203d			jsr 	IFloatBitwiseAnd
.1286	b0 ef		bcs $1277			bcs 	EXPDRange
.1288	60		rts				rts
.1289					EXPBinOr:
.1289	24 0f		bit $0f				bit 	IFR0+IExp
.128b	30 ed		bmi $127a			bmi 	EXPTypeError
.128d	a2 10		ldx #$10			ldx 	#IFR1
.128f	20 54 20	jsr $2054			jsr 	IFloatBitwiseOr
.1292	b0 e3		bcs $1277			bcs 	EXPDRange
.1294	60		rts				rts
.1295					EXPBinXor:
.1295	24 0f		bit $0f				bit 	IFR0+IExp
.1297	30 e1		bmi $127a			bmi 	EXPTypeError
.1299	a2 10		ldx #$10			ldx 	#IFR1
.129b	20 6b 20	jsr $206b			jsr 	IFloatBitwiseXor
.129e	b0 d7		bcs $1277			bcs 	EXPDRange
.12a0	60		rts				rts
.12a1					EXPConcatenate:
.12a1	18		clc				clc
.12a2	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.12a4	72 10		adc ($10)			adc 	(IFR1)
.12a6	b0 2d		bcs $12d5			bcs 	_EXPCError
.12a8	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.12aa	da		phx				phx
.12ab	a6 0d		ldx $0d				ldx 	IFR0+1
.12ad	da		phx				phx
.12ae	20 f3 1d	jsr $1df3			jsr 	StringTempAllocate 			; allocate string, set up return
.12b1	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.12b3	a5 10		lda $10				lda 	IFR1
.12b5	20 be 12	jsr $12be			jsr 	_EXPCCopyXA
.12b8	fa		plx				plx 								; copy second string
.12b9	68		pla				pla
.12ba	20 be 12	jsr $12be			jsr 	_EXPCCopyXA
.12bd	60		rts				rts
.12be					_EXPCCopyXA:
.12be	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.12c0	85 1e		sta $1e				sta 	zTemp0
.12c2	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.12c4	f0 0e		beq $12d4			beq 	_EXPCCExit 					; nothing.
.12c6	aa		tax				tax 								; count
.12c7	5a		phy				phy 								; start positioin
.12c8	a0 01		ldy #$01			ldy 	#1
.12ca					_EXPCCLoop:
.12ca	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.12cc	20 28 1e	jsr $1e28			jsr 	StringTempWrite
.12cf	c8		iny				iny
.12d0	ca		dex				dex
.12d1	d0 f7		bne $12ca			bne 	_EXPCCLoop
.12d3	7a		ply				ply
.12d4					_EXPCCExit:
.12d4	60		rts				rts
.12d5					_EXPCError:
.12d5	4c f8 11	jmp $11f8		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.12d8					EXPReturnTrue:
.12d8	a2 0c		ldx #$0c			ldx 	#IFR0
.12da	a9 01		lda #$01			lda 	#1
.12dc	20 4c 24	jsr $244c			jsr 	IFloatSetByte
.12df	20 55 24	jsr $2455			jsr 	IFloatNegate
.12e2	60		rts				rts
.12e3					EXPReturnFalse:
.12e3	a2 0c		ldx #$0c			ldx 	#IFR0
.12e5	4c 4a 24	jmp $244a			jmp 	IFloatSetZero
.12e8					EXPCompareEqual:
.12e8	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.12eb	c9 00		cmp #$00			cmp 	#0
.12ed	f0 e9		beq $12d8			beq 	EXPReturnTrue
.12ef	80 f2		bra $12e3			bra 	EXPReturnFalse
.12f1					EXPCompareLess:
.12f1	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.12f4	c9 ff		cmp #$ff			cmp 	#$FF
.12f6	f0 e0		beq $12d8			beq 	EXPReturnTrue
.12f8	80 e9		bra $12e3			bra 	EXPReturnFalse
.12fa					EXPCompareGreater:
.12fa	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.12fd	c9 01		cmp #$01			cmp 	#1
.12ff	f0 d7		beq $12d8			beq 	EXPReturnTrue
.1301	80 e0		bra $12e3			bra 	EXPReturnFalse
.1303					EXPCompareNotEqual:
.1303	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.1306	c9 00		cmp #$00			cmp 	#0
.1308	d0 ce		bne $12d8			bne 	EXPReturnTrue
.130a	80 d7		bra $12e3			bra 	EXPReturnFalse
.130c					EXPCompareLessEqual:
.130c	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.130f	c9 01		cmp #$01			cmp 	#1
.1311	d0 c5		bne $12d8			bne 	EXPReturnTrue
.1313	80 ce		bra $12e3			bra 	EXPReturnFalse
.1315					EXPCompareGreaterEqual:
.1315	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.1318	c9 ff		cmp #$ff			cmp 	#$FF
.131a	d0 bc		bne $12d8			bne 	EXPReturnTrue
.131c	80 c5		bra $12e3			bra 	EXPReturnFalse
.131e					EXPCompareBaseCode:
.131e	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.1320	30 10		bmi $1332			bmi 	_EXCBCString
.1322	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.1324	20 18 21	jsr $2118			jsr 	IFloatCompare
.1327	a5 0c		lda $0c				lda 	IFR0+IM0
.1329	f0 06		beq $1331			beq 	_EXCBCExit 					; return 0 if zero
.132b	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.132d	50 02		bvc $1331			bvc 	_EXCBCExit
.132f	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1331					_EXCBCExit:
.1331	60		rts				rts
.1332					_EXCBCString:
.1332	5a		phy				phy
.1333	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.1335	d2 10		cmp ($10)			cmp 	(IFR1)
.1337	90 02		bcc $133b			bcc 	_EXCBCSmaller
.1339	b2 10		lda ($10)			lda 	(IFR1)
.133b					_EXCBCSmaller:
.133b	aa		tax				tax
.133c	f0 0d		beq $134b			beq 	_EXCBCMatches 				; if zero common length matches
.133e	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1340					_EXCBCCheckSmallerMatches:
.1340	c8		iny				iny 								; compare directly as far as common length
.1341	38		sec				sec
.1342	b1 10		lda ($10),y			lda 	(IFR1),y
.1344	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.1346	d0 08		bne $1350			bne 	_EXCBCExit2
.1348	ca		dex				dex
.1349	d0 f5		bne $1340			bne 	_EXCBCCheckSmallerMatches
.134b					_EXCBCMatches:
.134b	38		sec				sec
.134c	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.134e	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1350					_EXCBCExit2:
.1350	7a		ply				ply
.1351	c9 00		cmp #$00			cmp 	#0
.1353	f0 04		beq $1359			beq 	_EXCBCReturn
.1355	30 03		bmi $135a			bmi 	_EXCBCFF
.1357	a9 01		lda #$01			lda 	#1
.1359					_EXCBCReturn:
.1359	60		rts				rts
.135a					_EXCBCFF:
.135a	a9 ff		lda #$ff			lda 	#$FF
.135c	60		rts				rts
.135d					_EXCBCRange:
.135d	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1360					EXPBinLeft:
.1360	a9 ff		lda #$ff			lda 	#$FF
.1362	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.1365	4c 6b 13	jmp $136b			jmp 	EXPShiftCommon
.1368					EXPBinRight:
.1368	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.136b					EXPShiftCommon:
.136b	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.136d	05 13		ora $13				ora 	IFR1+IExp
.136f	29 7f		and #$7f			and 	#$7F
.1371	d0 35		bne $13a8			bne 	_EXPSRange
.1373	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1375	29 e0		and #$e0			and 	#$E0
.1377	05 0d		ora $0d				ora 	IFR0+IM1
.1379	05 0e		ora $0e				ora 	IFR0+IM2
.137b	d0 25		bne $13a2			bne 	_EXPSShiftZero 				; if so return zero
.137d	5a		phy				phy
.137e	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1380	29 1f		and #$1f			and 	#$1F
.1382	f0 17		beq $139b			beq 	_EXPSExit 					; exit if zero
.1384	a8		tay				tay
.1385					_EXPSLoop:
.1385	a2 10		ldx #$10			ldx 	#IFR1
.1387	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.138a	30 05		bmi $1391			bmi 	_EXPSShiftLeft
.138c	20 79 24	jsr $2479			jsr 	IFloatShiftRight
.138f	80 07		bra $1398			bra 	_EXPSContinue
.1391					_EXPSShiftLeft:
.1391	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.1394	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1396	30 10		bmi $13a8			bmi 	_EXPSRange
.1398					_EXPSContinue:
.1398	88		dey				dey
.1399	d0 ea		bne $1385			bne 	_EXPSLoop
.139b					_EXPSExit:
.139b	a2 10		ldx #$10			ldx 	#IFR1
.139d	20 db 23	jsr $23db			jsr 	IFloatCopyFromRegister
.13a0	7a		ply				ply
.13a1	60		rts				rts
.13a2					_EXPSShiftZero:
.13a2	a2 0c		ldx #$0c			ldx 	#IFR0
.13a4	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.13a7	60		rts				rts
.13a8					_EXPSRange:
.13a8	4c fa 10	jmp $10fa		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.13ab					EXPEvaluateExpression:
.13ab	a9 00		lda #$00			lda 	#0 							; current precedence
.13ad					EXPEvaluateExpressionPrecedenceA:
.13ad	48		pha				pha
.13ae	20 28 14	jsr $1428			jsr 	EXPTermValueR0				; do first term.
.13b1					_EELoop:
.13b1	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.13b3	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.13b5	90 31		bcc $13e8			bcc 	_EEExit
.13b7	aa		tax				tax 								; access the precedence of the operator.
.13b8	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.13b9	dd 75 15	cmp $1575,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.13bc	b0 2b		bcs $13e9			bcs 	_EEExit2
.13be	48		pha				pha 								; save current precedence.
.13bf	da		phx				phx 								; save operator
.13c0	c8		iny				iny 								; consume operator
.13c1	da		phx				phx
.13c2	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.13c4	20 99 23	jsr $2399			jsr 	IFloatPushRx
.13c7	fa		plx				plx
.13c8	bd 75 15	lda $1575,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.13cb	20 ad 13	jsr $13ad			jsr 	EXPEvaluateExpressionPrecedenceA
.13ce	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.13d0	20 ba 23	jsr $23ba			jsr 	IFloatPullRx
.13d3	fa		plx				plx 								; operator
.13d4	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.13d6	45 13		eor $13				eor 	IFR1+IExp
.13d8	30 08		bmi $13e2			bmi 	_EEType
.13da					_EETypeOkay:
.13da	8a		txa				txa
.13db	0a		asl a				asl 	a 							; double -> X
.13dc	aa		tax				tax
.13dd	20 e5 13	jsr $13e5			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.13e0	80 cf		bra $13b1			bra 	_EELoop
.13e2					_EEType:
.13e2	4c 17 11	jmp $1117		jmp	ErrorV_type
.13e5					_EECallBinary:
.13e5	7c ff 17	jmp ($17ff,x)			jmp 	(VectorTable,x)
.13e8					_EEExit:
.13e8	68		pla				pla 								; throw precedence
.13e9					_EEExit2:
.13e9	18		clc				clc
.13ea	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.13eb					EXPEvalNumber:
.13eb	20 ab 13	jsr $13ab			jsr 	EXPEvaluateExpression
.13ee	24 0f		bit $0f				bit 	IFR0+IExp
.13f0	30 01		bmi $13f3			bmi 	EVUType
.13f2	60		rts				rts
.13f3					EVUType:
.13f3	4c 17 11	jmp $1117		jmp	ErrorV_type
.13f6					EXPEvalInteger:
.13f6	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.13f9	20 4a 21	jsr $214a			jsr 	IFloatIntegerR0
.13fc	60		rts				rts
.13fd					EXPEvalInteger16:
.13fd	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger
.1400	a5 0e		lda $0e				lda 	IFR0+IM2
.1402	d0 21		bne $1425			bne 	EVURange
.1404	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1406	a5 0c		lda $0c				lda 	IFR0+IM0
.1408	60		rts				rts
.1409					EXPEvalInteger8:
.1409	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger
.140c	a5 0e		lda $0e				lda 	IFR0+IM2
.140e	05 0d		ora $0d				ora 	IFR0+IM1
.1410	d0 13		bne $1425			bne 	EVURange
.1412	a5 0c		lda $0c				lda 	IFR0+IM0
.1414	60		rts				rts
.1415					EXPEvalString:
.1415	20 ab 13	jsr $13ab			jsr 	EXPEvaluateExpression
.1418	24 0f		bit $0f				bit 	IFR0+IExp
.141a	10 d7		bpl $13f3			bpl 	EVUType
.141c	a6 0d		ldx $0d				ldx 	IFR0+IM1
.141e	86 1f		stx $1f				stx 	zTemp0+1
.1420	a5 0c		lda $0c				lda 	IFR0+IM0
.1422	85 1e		sta $1e				sta 	zTemp0
.1424	60		rts				rts
.1425					EVURange:
.1425	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1428					EXPTermValueR0:
.1428	20 31 14	jsr $1431			jsr 	EXPTermR0
.142b	90 03		bcc $1430			bcc 	_ETVNotReference
.142d	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.1430					_ETVNotReference:
.1430	60		rts				rts
.1431					EXPTermR0:
.1431	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.1433	30 10		bmi $1445			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1435	c8		iny				iny 								; consume element
.1436	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1438	b0 08		bcs $1442			bcs 	_ETMIdentifier
.143a	20 69 14	jsr $1469			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.143d	20 9c 14	jsr $149c			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1440	18		clc				clc 								; return value
.1441	60		rts				rts
.1442					_ETMIdentifier:
.1442	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.1445					_ETMIsUnaryOrMinus:
.1445	c8		iny				iny 								; consume element
.1446	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1448	d0 0a		bne $1454			bne 	_ETMCheckUnary
.144a	20 28 14	jsr $1428			jsr 	EXPTermValueR0 				; get a term to negate
.144d	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.144f	20 55 24	jsr $2455			jsr 	IFloatNegate
.1452	18		clc				clc
.1453	60		rts				rts
.1454					_ETMCheckUnary:
.1454	c9 d7		cmp #$d7			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1456	90 0e		bcc $1466			bcc 	_ETMUnarySyntax
.1458	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.145a	b0 0a		bcs $1466			bcs 	_ETMUnarySyntax
.145c	0a		asl a				asl 	a
.145d	aa		tax				tax
.145e	20 63 14	jsr $1463			jsr 	_ETMCallUnaryFunction
.1461	18		clc				clc
.1462	60		rts				rts
.1463					_ETMCallUnaryFunction:
.1463	7c ff 17	jmp ($17ff,x)			jmp 	(VectorTable,x)
.1466					_ETMUnarySyntax:
.1466	4c ea 10	jmp $10ea		jmp	ErrorV_syntax
.1469					EXPExtractTokenisedInteger:
.1469	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.146b	64 0f		stz $0f				stz 	IFR0+IExp
.146d	64 0d		stz $0d				stz 	IFR0+IM1
.146f	64 0e		stz $0e				stz 	IFR0+IM2
.1471					_ETMConstant:
.1471	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1473	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1475	b0 24		bcs $149b			bcs 	_ETMCExit 					; no.
.1477	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1479	a5 0d		lda $0d				lda 	IFR0+IM1
.147b	85 0e		sta $0e				sta 	IFR0+IM2
.147d	a5 0c		lda $0c				lda 	IFR0+IM0
.147f	85 0d		sta $0d				sta 	IFR0+IM1
.1481	64 0c		stz $0c				stz 	IFR0+IM0
.1483	8a		txa				txa
.1484	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1485	66 0e		ror $0e				ror 	IFR0+IM2
.1487	66 0d		ror $0d				ror 	IFR0+IM1
.1489	66 0c		ror $0c				ror 	IFR0+IM0
.148b	4a		lsr a				lsr 	a
.148c	66 0e		ror $0e				ror 	IFR0+IM2
.148e	66 0d		ror $0d				ror 	IFR0+IM1
.1490	66 0c		ror $0c				ror 	IFR0+IM0
.1492	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.1494	11 1c		ora ($1c),y			ora 	(codePtr),y
.1496	85 0c		sta $0c				sta 	IFR0+IM0
.1498	c8		iny				iny 								; consume, loop back
.1499	80 d6		bra $1471			bra 	_ETMConstant
.149b					_ETMCExit:
.149b	60		rts				rts
.149c					EXPCheckDecimalFollows:
.149c	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.149e	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.14a0	d0 19		bne $14bb			bne 	_ETMCDExit
.14a2	c8		iny				iny 								; consume token.
.14a3	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.14a5	5a		phy				phy									; save current position
.14a6	48		pha				pha 								; save count of chars.
.14a7	38		sec				sec 								; address into YX : y + codePtr+1
.14a8	98		tya				tya
.14a9	65 1c		adc $1c				adc 	codePtr
.14ab	aa		tax				tax
.14ac	a5 1d		lda $1d				lda 	codePtr+1
.14ae	69 00		adc #$00			adc 	#0
.14b0	a8		tay				tay
.14b1	68		pla				pla 								; get count.
.14b2	20 ee 22	jsr $22ee			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.14b5	7a		ply				ply 								; go to next token.
.14b6	98		tya				tya
.14b7	38		sec				sec
.14b8	71 1c		adc ($1c),y			adc 	(codePtr),y
.14ba	a8		tay				tay
.14bb					_ETMCDExit:
.14bb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.14bc					EXPUnaryAbs:
.14bc	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.14bf	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14c2	20 8e 20	jsr $208e			jsr 	IFloatAbsoluteR0
.14c5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.14c6					EXPUnaryAsc:
.14c6	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.14c9	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14cc	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.14ce	f0 06		beq $14d6			beq 	_EXAZero 						; if so return 0
.14d0	5a		phy				phy 									; otherwise get first character
.14d1	a0 01		ldy #$01			ldy 	#1
.14d3	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.14d5	7a		ply				ply
.14d6					_EXAZero:
.14d6	a2 0c		ldx #$0c			ldx 	#IFR0
.14d8	20 4c 24	jsr $244c			jsr 	IFloatSetByte
.14db	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.14dc					EXPUnaryChr:
.14dc	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; expr
.14df	48		pha				pha 									; push on stack
.14e0	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14e3	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.14e5	20 f3 1d	jsr $1df3			jsr 	StringTempAllocate
.14e8	68		pla				pla
.14e9	20 28 1e	jsr $1e28			jsr 	StringTempWrite
.14ec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.14ed					EXPUnaryDec:
.14ed	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.14f0	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14f3	5a		phy				phy
.14f4	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.14f6	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.14f9	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.14fb	f0 3b		beq $1538			beq 	_EUDError 						; empty string
.14fd	aa		tax				tax
.14fe	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1500					_EUDLoop:
.1500	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1502	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1504	90 02		bcc $1508			bcc 	_EUDNoCase
.1506	e9 20		sbc #$20			sbc 	#$20
.1508					_EUDNoCase:
.1508	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.150a	90 2c		bcc $1538			bcc 	_EUDError
.150c	c9 3a		cmp #$3a			cmp 	#'9'+1
.150e	90 0a		bcc $151a			bcc 	_EUDOkay
.1510	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1512	90 24		bcc $1538			bcc 	_EUDError
.1514	c9 47		cmp #$47			cmp 	#'F'+1
.1516	b0 20		bcs $1538			bcs 	_EUDError
.1518	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.151a					_EUDOkay:
.151a	29 0f		and #$0f			and 	#15 							; make constant
.151c	da		phx				phx
.151d	48		pha				pha
.151e	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1520	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.1523	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.1526	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.1529	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.152c	68		pla				pla 									; pop constant and OR in
.152d	fa		plx				plx
.152e	05 0c		ora $0c				ora 	IFR0+IM0
.1530	85 0c		sta $0c				sta 	IFR0+IM0
.1532	c8		iny				iny 									; next
.1533	ca		dex				dex
.1534	d0 ca		bne $1500			bne 	_EUDLoop
.1536	7a		ply				ply
.1537	60		rts				rts
.1538					_EUDError:
.1538	4c 0a 11	jmp $110a		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.153b					EXPUnaryInlineDec:
.153b	4c ea 10	jmp $10ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.153e					EXPUnaryNull:
.153e	20 28 14	jsr $1428			jsr 	EXPTermValueR0
.1541	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1542					EXPUnaryFrac:
.1542	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.1545	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.1548	20 f4 20	jsr $20f4			jsr 	IFloatFractionalR0
.154b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.154c					EXPUnaryInt:
.154c	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.154f	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.1552	20 4a 21	jsr $214a			jsr 	IFloatIntegerR0
.1555	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1556					EXPUnaryLen:
.1556	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.1559	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.155c	b2 1e		lda ($1e)			lda 	(zTemp0)
.155e	a2 0c		ldx #$0c			ldx 	#IFR0
.1560	20 4c 24	jsr $244c			jsr 	IFloatSetByte
.1563	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1564					EXPUnaryParenthesis:
.1564	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.1567	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.156a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.156b					EXPUnaryRnd:
.156b	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 				; number to R0
.156e	20 15 12	jsr $1215			jsr 	ERRCheckRParen 				; )
.1571	a2 0c		ldx #$0c			ldx 	#IFR0
.1573	20 8a 15	jsr $158a			jsr 	EXPLoadInRandom
.1576	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1578	85 0f		sta $0f				sta 	IFR0+IExp
.157a	60		rts				rts
.157b					ExpUnaryRand:
.157b	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger 				; integer to R0
.157e	20 15 12	jsr $1215			jsr 	ERRCheckRParen 				; )
.1581	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.1583	20 8a 15	jsr $158a			jsr 	EXPLoadInRandom
.1586	20 bb 1f	jsr $1fbb			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.1589	60		rts				rts
.158a					EXPLoadInRandom:
.158a	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.158d	20 9f 15	jsr $159f			jsr 	EXPRandom32
.1590	95 00		sta $00,x			sta 	IM0,x
.1592	20 9f 15	jsr $159f			jsr 	EXPRandom32
.1595	95 01		sta $01,x			sta 	IM1,x
.1597	20 9f 15	jsr $159f			jsr 	EXPRandom32
.159a	29 7f		and #$7f			and 	#$7F
.159c	95 02		sta $02,x			sta 	IM2,x
.159e	60		rts				rts
.159f					EXPRandom32:
.159f	5a		phy				phy
.15a0	a0 08		ldy #$08			ldy 	#8
.15a2	ad 3c 03	lda $033c			lda 	EXPSeed+0
.15a5	0d 3d 03	ora $033d			ora 	EXPSeed+1
.15a8	0d 3e 03	ora $033e			ora 	EXPSeed+2
.15ab	0d 3f 03	ora $033f			ora 	EXPSeed+3
.15ae	d0 08		bne $15b8			bne 	_EXPRNoReset
.15b0	ee 3c 03	inc $033c			inc 	EXPSeed+0
.15b3	a0 10		ldy #$10			ldy 	#16
.15b5	8c 3f 03	sty $033f			sty 	EXPSeed+3
.15b8					_EXPRNoReset:
.15b8	ad 3c 03	lda $033c			lda 	EXPSeed+0
.15bb					_EXPRLoop:
.15bb	0a		asl a				asl		a
.15bc	2e 3d 03	rol $033d			rol 	EXPSeed+1
.15bf	2e 3e 03	rol $033e			rol 	EXPSeed+2
.15c2	2e 3f 03	rol $033f			rol 	EXPSeed+3
.15c5	90 02		bcc $15c9			bcc 	_EXPRNoEOR
.15c7	49 c5		eor #$c5			eor 	#$C5
.15c9					_EXPRNoEOR:
.15c9	88		dey				dey
.15ca	d0 ef		bne $15bb			bne 	_EXPRLoop
.15cc	8d 3c 03	sta $033c			sta 	EXPSeed+0
.15cf	7a		ply				ply
.15d0	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.15d1					EXPUnarySgn:
.15d1	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.15d4	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.15d7	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.15d9	20 ec 23	jsr $23ec			jsr 	IFloatCopyToRegister
.15dc	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.15de	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.15e1	a2 10		ldx #$10			ldx 	#IFR1
.15e3	20 18 21	jsr $2118			jsr 	IFloatCompare 					; compare R1 vs 0.
.15e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.15e7					EXPUnarySqr:
.15e7	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.15ea	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.15ed	20 96 20	jsr $2096			jsr 	IFloatSquareRootR0 				; square root.
.15f0	b0 01		bcs $15f3			bcs 	_EUSValue
.15f2	60		rts				rts
.15f3					_EUSValue:
.15f3	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.15f6					EXPUnaryHex:
.15f6	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger 					; expr
.15f9	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.15fc	5a		phy				phy
.15fd	a9 10		lda #$10			lda 	#16
.15ff	20 eb 21	jsr $21eb			jsr 	IFloatIntegerToStringR0
.1602	80 0a		bra $160e			bra 	EUSMain
.1604					EXPUnaryStr:
.1604	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; expr
.1607	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.160a	5a		phy				phy
.160b	20 47 22	jsr $2247			jsr 	IFloatFloatToStringR0 			; convert to string
.160e					EUSMain:
.160e	b0 18		bcs $1628			bcs 	_EUSError
.1610	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1612	84 1f		sty $1f				sty 	zTemp0+1
.1614	48		pha				pha 									; save count
.1615	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1617	20 f3 1d	jsr $1df3			jsr 	StringTempAllocate
.161a	fa		plx				plx 									; count in X
.161b	a0 00		ldy #$00			ldy 	#0
.161d					_EUSCopy:
.161d	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.161f	c8		iny				iny
.1620	20 28 1e	jsr $1e28			jsr 	StringTempWrite
.1623	ca		dex				dex
.1624	d0 f7		bne $161d			bne	 	_EUSCopy
.1626	7a		ply				ply
.1627	60		rts				rts
.1628					_EUSError:
.1628	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.162b					EXPUnaryInlineString:
.162b	18		clc				clc 								; physical address -> IM0,1
.162c	98		tya				tya
.162d	65 1c		adc $1c				adc 	codePtr
.162f	85 0c		sta $0c				sta 	IFR0+IM0
.1631	a5 1d		lda $1d				lda 	codePtr+1
.1633	69 00		adc #$00			adc 	#0
.1635	85 0d		sta $0d				sta 	IFR0+IM1
.1637	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.1639	a9 80		lda #$80			lda 	#$80
.163b	85 0f		sta $0f				sta 	IFR0+IExp
.163d	98		tya				tya	 								; skip over it.
.163e	38		sec				sec
.163f	71 1c		adc ($1c),y			adc 	(codePtr),y
.1641	a8		tay				tay
.1642	60		rts				rts
.1643					_EXPUISRange:
.1643	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1646					EXPUnaryVal:
.1646	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.1649	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.164c	5a		phy				phy
.164d	18		clc				clc
.164e	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.1650	69 01		adc #$01			adc 	#1
.1652	aa		tax				tax
.1653	a5 1f		lda $1f				lda 	zTemp0+1
.1655	69 00		adc #$00			adc 	#0
.1657	a8		tay				tay
.1658	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.165a	20 ae 22	jsr $22ae			jsr 	IFloatStringToFloatR0 			; do conversion
.165d	b0 02		bcs $1661			bcs 	_EUVError
.165f	7a		ply				ply
.1660	60		rts				rts
.1661					_EUVError:
.1661	4c 0a 11	jmp $110a		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1664					BinaryPrecedence:
>1664	02					.byte	 2	; $ef =
>1665	02					.byte	 2	; $f0 <>
>1666	02					.byte	 2	; $f1 <=
>1667	02					.byte	 2	; $f2 <
>1668	02					.byte	 2	; $f3 >=
>1669	02					.byte	 2	; $f4 >
>166a	01					.byte	 1	; $f5 XOR
>166b	01					.byte	 1	; $f6 OR
>166c	01					.byte	 1	; $f7 AND
>166d	04					.byte	 4	; $f8 DIV
>166e	04					.byte	 4	; $f9 MOD
>166f	04					.byte	 4	; $fa <<
>1670	04					.byte	 4	; $fb >>
>1671	04					.byte	 4	; $fc /
>1672	04					.byte	 4	; $fd *
>1673	03					.byte	 3	; $fe -
>1674	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1675					StandardTokens:
>1675	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>167c	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1682	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1688	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>168d	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1690	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1696	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1699	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>169e	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>16a3	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>16ab	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>16af	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>16b4	00					.byte	$00                                     	; $8c [[end]]
>16b5	00					.byte	$00                                     	; $8d [[shift]]
>16b6	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>16bb	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>16c0	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>16c3	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>16c8	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>16cc	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>16d2	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>16d8	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>16dd	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>16e1	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>16e5	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>16ea	01 2c					.byte	$01,$2c                                 	; $99 ,
>16ec	01 3b					.byte	$01,$3b                                 	; $9a ;
>16ee	01 3a					.byte	$01,$3a                                 	; $9b :
>16f0	01 27					.byte	$01,$27                                 	; $9c '
>16f2	01 29					.byte	$01,$29                                 	; $9d )
>16f4	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>16f8	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>16fe	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1702	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1706	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>170b	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>170f	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1716	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>171b	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1720	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1725	00					.byte	0											; $a8
>1726	00					.byte	0											; $a9
>1727	00					.byte	0											; $aa
>1728	00					.byte	0											; $ab
>1729	00					.byte	0											; $ac
>172a	00					.byte	0											; $ad
>172b	00					.byte	0											; $ae
>172c	00					.byte	0											; $af
>172d	00					.byte	0											; $b0
>172e	00					.byte	0											; $b1
>172f	00					.byte	0											; $b2
>1730	00					.byte	0											; $b3
>1731	00					.byte	0											; $b4
>1732	00					.byte	0											; $b5
>1733	00					.byte	0											; $b6
>1734	00					.byte	0											; $b7
>1735	00					.byte	0											; $b8
>1736	00					.byte	0											; $b9
>1737	00					.byte	0											; $ba
>1738	00					.byte	0											; $bb
>1739	00					.byte	0											; $bc
>173a	00					.byte	0											; $bd
>173b	00					.byte	0											; $be
>173c	00					.byte	0											; $bf
>173d	00					.byte	0											; $c0
>173e	00					.byte	0											; $c1
>173f	00					.byte	0											; $c2
>1740	00					.byte	0											; $c3
>1741	00					.byte	0											; $c4
>1742	00					.byte	0											; $c5
>1743	00					.byte	0											; $c6
>1744	00					.byte	0											; $c7
>1745	00					.byte	0											; $c8
>1746	00					.byte	0											; $c9
>1747	00					.byte	0											; $ca
>1748	00					.byte	0											; $cb
>1749	00					.byte	0											; $cc
>174a	00					.byte	0											; $cd
>174b	00					.byte	0											; $ce
>174c	00					.byte	0											; $cf
>174d	00					.byte	0											; $d0
>174e	00					.byte	0											; $d1
>174f	00					.byte	0											; $d2
>1750	00					.byte	0											; $d3
>1751	00					.byte	0											; $d4
>1752	00					.byte	0											; $d5
>1753	00					.byte	0											; $d6
>1754	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>175c	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1763	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1769	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>176f	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1774	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1779	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>177e	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1783	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1788	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>178e	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1793	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>179b	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>17a2	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>17a7	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>17ac	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>17b2	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>17b7	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>17bd	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>17c2	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>17c8	01 28					.byte	$01,$28                                 	; $eb (
>17ca	01 24					.byte	$01,$24                                 	; $ec $
>17cc	00					.byte	$00                                     	; $ed [[decimal]]
>17cd	00					.byte	$00                                     	; $ee [[string]]
>17ce	01 3d					.byte	$01,$3d                                 	; $ef =
>17d0	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>17d3	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>17d6	01 3c					.byte	$01,$3c                                 	; $f2 <
>17d8	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>17db	01 3e					.byte	$01,$3e                                 	; $f4 >
>17dd	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>17e1	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>17e4	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>17e8	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>17ec	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>17f0	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>17f3	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>17f6	01 2f					.byte	$01,$2f                                 	; $fc /
>17f8	01 2a					.byte	$01,$2a                                 	; $fd *
>17fa	01 2d					.byte	$01,$2d                                 	; $fe -
>17fc	01 2b					.byte	$01,$2b                                 	; $ff +
>17fe	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.17ff					VectorTable:
>17ff	28 25					.word	NotImplemented           ; $80 REPEAT
>1801	28 25					.word	NotImplemented           ; $81 UNTIL
>1803	28 25					.word	NotImplemented           ; $82 WHILE
>1805	28 25					.word	NotImplemented           ; $83 WEND
>1807	28 25					.word	NotImplemented           ; $84 IF
>1809	28 25					.word	NotImplemented           ; $85 ENDIF
>180b	28 25					.word	NotImplemented           ; $86 DO
>180d	28 25					.word	NotImplemented           ; $87 LOOP
>180f	28 25					.word	NotImplemented           ; $88 PROC
>1811	28 25					.word	NotImplemented           ; $89 ENDPROC
>1813	28 25					.word	NotImplemented           ; $8a FOR
>1815	28 25					.word	NotImplemented           ; $8b NEXT
>1817	a9 10					.word	RUNEndOfLine             ; $8c [[END]]
>1819	e1 10					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>181b	28 25					.word	NotImplemented           ; $8e ELSE
>181d	1f 10					.word	NoExec01                 ; $8f THEN
>181f	1f 10					.word	NoExec02                 ; $90 TO
>1821	1f 10					.word	NoExec03                 ; $91 STEP
>1823	28 25					.word	NotImplemented           ; $92 LET
>1825	22 10					.word	Command_Print            ; $93 PRINT
>1827	28 25					.word	NotImplemented           ; $94 INPUT
>1829	28 25					.word	NotImplemented           ; $95 CALL
>182b	28 25					.word	NotImplemented           ; $96 SYS
>182d	90 10					.word	Command_REM              ; $97 REM
>182f	28 25					.word	NotImplemented           ; $98 EXIT
>1831	1f 10					.word	NoExec04                 ; $99 ,
>1833	1f 10					.word	NoExec05                 ; $9a ;
>1835	1f 10					.word	NoExec06                 ; $9b :
>1837	90 10					.word	Command_REM2             ; $9c '
>1839	1f 10					.word	NoExec07                 ; $9d )
>183b	28 25					.word	NotImplemented           ; $9e DIM
>183d	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>183f	87 10					.word	Command_NEW              ; $a0 NEW
>1841	9d 10					.word	Command_RUN              ; $a1 RUN
>1843	e7 10					.word	Command_STOP             ; $a2 STOP
>1845	e4 10					.word	Command_END              ; $a3 END
>1847	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1849	28 25					.word	NotImplemented           ; $a5 LIST
>184b	28 25					.word	NotImplemented           ; $a6 SAVE
>184d	28 25					.word	NotImplemented           ; $a7 LOAD
>184f	28 25					.word	NotImplemented           ; $a8
>1851	28 25					.word	NotImplemented           ; $a9
>1853	28 25					.word	NotImplemented           ; $aa
>1855	28 25					.word	NotImplemented           ; $ab
>1857	28 25					.word	NotImplemented           ; $ac
>1859	28 25					.word	NotImplemented           ; $ad
>185b	28 25					.word	NotImplemented           ; $ae
>185d	28 25					.word	NotImplemented           ; $af
>185f	28 25					.word	NotImplemented           ; $b0
>1861	28 25					.word	NotImplemented           ; $b1
>1863	28 25					.word	NotImplemented           ; $b2
>1865	28 25					.word	NotImplemented           ; $b3
>1867	28 25					.word	NotImplemented           ; $b4
>1869	28 25					.word	NotImplemented           ; $b5
>186b	28 25					.word	NotImplemented           ; $b6
>186d	28 25					.word	NotImplemented           ; $b7
>186f	28 25					.word	NotImplemented           ; $b8
>1871	28 25					.word	NotImplemented           ; $b9
>1873	28 25					.word	NotImplemented           ; $ba
>1875	28 25					.word	NotImplemented           ; $bb
>1877	28 25					.word	NotImplemented           ; $bc
>1879	28 25					.word	NotImplemented           ; $bd
>187b	28 25					.word	NotImplemented           ; $be
>187d	28 25					.word	NotImplemented           ; $bf
>187f	28 25					.word	NotImplemented           ; $c0
>1881	28 25					.word	NotImplemented           ; $c1
>1883	28 25					.word	NotImplemented           ; $c2
>1885	28 25					.word	NotImplemented           ; $c3
>1887	28 25					.word	NotImplemented           ; $c4
>1889	28 25					.word	NotImplemented           ; $c5
>188b	28 25					.word	NotImplemented           ; $c6
>188d	28 25					.word	NotImplemented           ; $c7
>188f	28 25					.word	NotImplemented           ; $c8
>1891	28 25					.word	NotImplemented           ; $c9
>1893	28 25					.word	NotImplemented           ; $ca
>1895	28 25					.word	NotImplemented           ; $cb
>1897	28 25					.word	NotImplemented           ; $cc
>1899	28 25					.word	NotImplemented           ; $cd
>189b	28 25					.word	NotImplemented           ; $ce
>189d	28 25					.word	NotImplemented           ; $cf
>189f	28 25					.word	NotImplemented           ; $d0
>18a1	28 25					.word	NotImplemented           ; $d1
>18a3	28 25					.word	NotImplemented           ; $d2
>18a5	28 25					.word	NotImplemented           ; $d3
>18a7	28 25					.word	NotImplemented           ; $d4
>18a9	28 25					.word	NotImplemented           ; $d5
>18ab	28 25					.word	NotImplemented           ; $d6
>18ad	28 25					.word	NotImplemented           ; $d7 RIGHT$(
>18af	28 25					.word	NotImplemented           ; $d8 LEFT$(
>18b1	28 25					.word	NotImplemented           ; $d9 MID$(
>18b3	04 16					.word	EXPUnaryStr              ; $da STR$(
>18b5	46 16					.word	EXPUnaryVal              ; $db VAL(
>18b7	d1 15					.word	EXPUnarySgn              ; $dc SGN(
>18b9	bc 14					.word	EXPUnaryAbs              ; $dd ABS(
>18bb	56 15					.word	EXPUnaryLen              ; $de LEN(
>18bd	e7 15					.word	EXPUnarySqr              ; $df SQR(
>18bf	dc 14					.word	EXPUnaryChr              ; $e0 CHR$(
>18c1	c6 14					.word	EXPUnaryAsc              ; $e1 ASC(
>18c3	28 25					.word	NotImplemented           ; $e2 INKEY$(
>18c5	28 25					.word	NotImplemented           ; $e3 EVENT(
>18c7	28 25					.word	NotImplemented           ; $e4 TIME
>18c9	4c 15					.word	EXPUnaryInt              ; $e5 INT(
>18cb	42 15					.word	EXPUnaryFrac             ; $e6 FRAC(
>18cd	ed 14					.word	EXPUnaryDec              ; $e7 DEC(
>18cf	f6 15					.word	EXPUnaryHex              ; $e8 HEX$(
>18d1	6b 15					.word	EXPUnaryRnd              ; $e9 RND(
>18d3	7b 15					.word	ExpUnaryRand             ; $ea RAND(
>18d5	64 15					.word	EXPUnaryParenthesis      ; $eb (
>18d7	3e 15					.word	EXPUnaryNull             ; $ec $
>18d9	3b 15					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>18db	2b 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>18dd	e8 12					.word	EXPCompareEqual          ; $ef =
>18df	03 13					.word	EXPCompareNotEqual       ; $f0 <>
>18e1	0c 13					.word	EXPCompareLessEqual      ; $f1 <=
>18e3	f1 12					.word	EXPCompareLess           ; $f2 <
>18e5	15 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>18e7	fa 12					.word	EXPCompareGreater        ; $f4 >
>18e9	95 12					.word	EXPBinXor                ; $f5 XOR
>18eb	89 12					.word	EXPBinOr                 ; $f6 OR
>18ed	7d 12					.word	EXPBinAnd                ; $f7 AND
>18ef	55 12					.word	EXPBinIDiv               ; $f8 DIV
>18f1	66 12					.word	EXPBinIMod               ; $f9 MOD
>18f3	60 13					.word	EXPBinLeft               ; $fa <<
>18f5	68 13					.word	EXPBinRight              ; $fb >>
>18f7	49 12					.word	EXPBinFDiv               ; $fc /
>18f9	40 12					.word	EXPBinMul                ; $fd *
>18fb	37 12					.word	EXPBinSub                ; $fe -
>18fd	2e 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.18ff					TOKDetokenise:
.18ff	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1901	84 23		sty $23				sty 	zTemp2+1
.1903	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.1906					_TOKDLoop:
.1906	20 35 19	jsr $1935			jsr 	TOKDGet 					; get next
.1909	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.190b	f0 26		beq $1933			beq 	_TOKDExit
.190d	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.190f	f0 1d		beq $192e			beq 	_TOKDDataItem
.1911	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1913	f0 19		beq $192e			beq 	_TOKDDataItem
.1915	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1917	10 05		bpl $191e			bpl 	_TOKDNotToken
.1919	20 fd 19	jsr $19fd			jsr 	TOKDToken 					; token to text.
.191c	80 e8		bra $1906			bra 	_TOKDLoop
.191e					_TOKDNotToken:
.191e	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1920	90 05		bcc $1927			bcc 	_TOKDNotIdentifier
.1922	20 70 19	jsr $1970			jsr 	TOKDIdentifier
.1925	80 df		bra $1906			bra 	_TOKDLoop
.1927					_TOKDNotIdentifier:
.1927	a0 0a		ldy #$0a			ldy 	#10
.1929	20 b9 19	jsr $19b9			jsr 	TOKDInteger
.192c	80 d8		bra $1906			bra 	_TOKDLoop
.192e					_TOKDDataItem:
.192e	20 4b 19	jsr $194b			jsr 	TOKDDataItem
.1931	80 d3		bra $1906			bra 	_TOKDLoop
.1933					_TOKDExit:
.1933	18		clc				clc
.1934	60		rts				rts
.1935	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1937	e6 22		inc $22				inc 	zTemp2
.1939	d0 02		bne $193d			bne 	_TKDGExit
.193b	e6 23		inc $23				inc 	zTemp2+1
.193d					_TKDGExit:
.193d	60		rts				rts
.193e					TOKDOutput:
.193e	8d 42 03	sta $0342			sta 	TOKLastCharacter
.1941	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.1944					TOKSetDetokeniseOutput:
.1944	8e 40 03	stx $0340			stx 	TOKOutputMethod
.1947	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.194a	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.194b					TOKDDataItem:
.194b	a8		tay				tay 								; type in Y
.194c	a9 22		lda #$22			lda 	#'"'						; start with " or .
.194e	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1950	f0 02		beq $1954			beq 	_TOKDDIsString
.1952	a9 2e		lda #$2e			lda 	#'.'
.1954					_TOKDDIsString:
.1954	20 3e 19	jsr $193e			jsr 	TOKDOutput 					; dump it
.1957	20 35 19	jsr $1935			jsr 	TOKDGet 					; get length into X
.195a	aa		tax				tax
.195b					_TOKDDOutput:
.195b	ca		dex				dex 								; are we complete
.195c	30 08		bmi $1966			bmi 	_TOKDDEnd
.195e	20 35 19	jsr $1935			jsr 	TOKDGet 					; get character and output it
.1961	20 3e 19	jsr $193e			jsr 	TOKDOutput
.1964	80 f5		bra $195b			bra 	_TOKDDOutput
.1966					_TOKDDEnd:
.1966	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1968	d0 05		bne $196f			bne 	_TOKDDNotString
.196a	a9 22		lda #$22			lda 	#'"'
.196c	20 3e 19	jsr $193e			jsr 	TOKDOutput
.196f					_TOKDDNotString:
.196f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1970					TOKDIdentifier:
.1970	a0 ff		ldy #$ff			ldy 	#$FF
.1972	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.1975					_TOKDLoop:
.1975	a8		tay				tay 								; token in Y
.1976	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1978	c0 64		cpy #$64			cpy 	#$64
.197a	f0 11		beq $198d			beq 	_TOKDIOutput
.197c	a9 5f		lda #$5f			lda 	#'_'
.197e	c0 65		cpy #$65			cpy 	#$65
.1980	f0 0b		beq $198d			beq 	_TOKDIOutput
.1982	98		tya				tya 								; handle a-z
.1983	18		clc				clc
.1984	69 21		adc #$21			adc	 	#$21
.1986	c0 5a		cpy #$5a			cpy 	#$5A
.1988	90 03		bcc $198d			bcc 	_TOKDIOutput
.198a	38		sec				sec 								; handle 0-9
.198b	e9 4b		sbc #$4b			sbc 	#$4B
.198d					_TOKDIOutput:
.198d	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.1990	10 08		bpl $199a			bpl 	_TOKDINoSpacing
.1992	48		pha				pha
.1993	20 2f 1a	jsr $1a2f			jsr 	TOKDSpacing
.1996	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.1999	68		pla				pla
.199a					_TOKDINoSpacing:
.199a	20 3e 19	jsr $193e			jsr 	TOKDOutput
.199d	20 35 19	jsr $1935			jsr 	TOKDGet 					; get next token
.19a0	c9 7c		cmp #$7c			cmp 	#$7C
.19a2	90 d1		bcc $1975			bcc 	_TOKDLoop
.19a4	f0 12		beq $19b8			beq 	_TOKDIExit 					; it's a number, no tail.
.19a6	4a		lsr a				lsr 	a 							; string ?
.19a7	90 07		bcc $19b0			bcc 	_TOKDICheckArray
.19a9	48		pha				pha
.19aa	a9 24		lda #$24			lda 	#"$"
.19ac	20 3e 19	jsr $193e			jsr 	TOKDOutput
.19af	68		pla				pla
.19b0					_TOKDICheckArray:
.19b0	4a		lsr a				lsr 	a 							; array ?
.19b1	90 05		bcc $19b8			bcc 	_TOKDIExit
.19b3	a9 28		lda #$28			lda 	#"("
.19b5	20 3e 19	jsr $193e			jsr 	TOKDOutput
.19b8					_TOKDIExit:
.19b8	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.19b9					TOKDInteger:
.19b9	5a		phy				phy 								; save base
.19ba	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.19bc	20 4c 24	jsr $244c			jsr 	IFloatSetByte
.19bf					_TOKDILoop:
.19bf	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.19c1	c9 40		cmp #$40			cmp 	#$40
.19c3	b0 1d		bcs $19e2			bcs 	_TOKDIHaveInteger
.19c5	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.19c7	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.19ca	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.19cd	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.19d0	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.19d3	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.19d6	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.19d9	20 35 19	jsr $1935			jsr 	TOKDGet 					; OR byte in.
.19dc	05 0c		ora $0c				ora 	IFR0+IM0
.19de	85 0c		sta $0c				sta 	IFR0+IM0
.19e0	80 dd		bra $19bf			bra 	_TOKDILoop
.19e2					_TOKDIHaveInteger:
.19e2	7a		ply				ply 								; restore base
.19e3	98		tya				tya 								; base in A
.19e4	20 eb 21	jsr $21eb			jsr 	IFloatIntegerToStringR0
.19e7	86 1e		stx $1e				stx 	zTemp0
.19e9	84 1f		sty $1f				sty 	zTemp0+1
.19eb	b2 1e		lda ($1e)			lda 	(zTemp0)
.19ed	20 2f 1a	jsr $1a2f			jsr 	TOKDSpacing 				; check spacing okay.
.19f0	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.19f2					_TOKDOutput:
.19f2	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.19f4	20 3e 19	jsr $193e			jsr 	TOKDOutput
.19f7	c8		iny				iny
.19f8	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.19fa	d0 f6		bne $19f2			bne 	_TOKDOutput
.19fc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.19fd					TOKDToken:
.19fd	a2 75		ldx #$75			ldx 	#StandardTokens & $FF
.19ff	a0 16		ldy #$16			ldy 	#StandardTokens >> 8
.1a01					_TOKDSearch:
.1a01	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1a03	84 1f		sty $1f				sty 	zTemp0+1
.1a05	aa		tax				tax 								; token ID in X.
.1a06					_TOKDFind:
.1a06	ca		dex				dex 								; reached the start
.1a07	10 0d		bpl $1a16			bpl 	_TOKDFound
.1a09	38		sec				sec 								; go to next entry
.1a0a	b2 1e		lda ($1e)			lda 	(zTemp0)
.1a0c	65 1e		adc $1e				adc 	zTemp0
.1a0e	85 1e		sta $1e				sta 	zTemp0
.1a10	90 f4		bcc $1a06			bcc 	_TOKDFind
.1a12	e6 1f		inc $1f				inc 	zTemp0+1
.1a14	80 f0		bra $1a06			bra 	_TOKDFind
.1a16					_TOKDFound:
.1a16	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1a18	f0 14		beq $1a2e			beq 	_TOKDExit
.1a1a	aa		tax				tax
.1a1b	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1a1d	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1a1f	20 2f 1a	jsr $1a2f			jsr 	TOKDSpacing
.1a22					_TOKDOutput:
.1a22	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1a24	20 86 1d	jsr $1d86			jsr 	TOKToLower
.1a27	20 3e 19	jsr $193e			jsr 	TOKDOutput
.1a2a	c8		iny				iny
.1a2b	ca		dex				dex
.1a2c	d0 f4		bne $1a22			bne 	_TOKDOutput
.1a2e					_TOKDExit:
.1a2e	60		rts				rts
.1a2f					TOKDSpacing:
.1a2f	20 9d 1d	jsr $1d9d			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1a32	90 0d		bcc $1a41			bcc 	_TOKDSExit
.1a34	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1a37	20 9d 1d	jsr $1d9d			jsr 	TOKIsIdentifierElement
.1a3a	90 05		bcc $1a41			bcc 	_TOKDSExit
.1a3c	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1a3e	20 3e 19	jsr $193e			jsr 	TOKDOutput
.1a41					_TOKDSExit:
.1a41	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1a42					PGMDeleteLine:
.1a42	20 f5 1a	jsr $1af5			jsr 	PGMEndProgram 				; end of program into zTemp0
.1a45	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1a47	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1a4a	85 21		sta $21				sta 	zTemp1+1
.1a4c					_PGMDLoop:
.1a4c	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1a4e	38		sec				sec
.1a4f	f0 3a		beq $1a8b			beq 	_PGMDExit
.1a51	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1a53	b1 20		lda ($20),y			lda 	(zTemp1),y
.1a55	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1a58	d0 08		bne $1a62			bne 	_PGMDNext
.1a5a	c8		iny				iny
.1a5b	b1 20		lda ($20),y			lda 	(zTemp1),y
.1a5d	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1a60	f0 0d		beq $1a6f			beq 	_PGMDDelete
.1a62					_PGMDNext:
.1a62	18		clc				clc
.1a63	b2 20		lda ($20)			lda 	(zTemp1)
.1a65	65 20		adc $20				adc 	zTemp1
.1a67	85 20		sta $20				sta 	zTemp1
.1a69	90 e1		bcc $1a4c			bcc 	_PGMDLoop
.1a6b	e6 21		inc $21				inc 	zTemp1+1
.1a6d	80 dd		bra $1a4c			bra 	_PGMDLoop
.1a6f					_PGMDDelete:
.1a6f	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1a71	a8		tay				tay
.1a72					_PGMDCopy:
.1a72	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1a74	92 20		sta ($20)			sta 	(zTemp1)
.1a76	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1a78	c5 1e		cmp $1e				cmp 	zTemp0
.1a7a	d0 07		bne $1a83			bne 	_PGMDNext2
.1a7c	a5 21		lda $21				lda 	zTemp1+1
.1a7e	c5 1f		cmp $1f				cmp 	zTemp0+1
.1a80	18		clc				clc
.1a81	f0 08		beq $1a8b			beq 	_PGMDExit
.1a83					_PGMDNext2:
.1a83	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1a85	d0 eb		bne $1a72			bne 	_PGMDCopy
.1a87	e6 21		inc $21				inc 	zTemp1+1
.1a89	80 e7		bra $1a72			bra 	_PGMDCopy
.1a8b					_PGMDExit:
.1a8b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1a8c					PGMInsertLine:
.1a8c	20 f5 1a	jsr $1af5			jsr 	PGMEndProgram 				; end of program into zTemp0
.1a8f	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1a91	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1a94	85 21		sta $21				sta 	zTemp1+1
.1a96					_PGMILoop:
.1a96	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1a98	f0 1c		beq $1ab6			beq 	_PGMIInsert
.1a9a	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1a9c	b1 20		lda ($20),y			lda 	(zTemp1),y
.1a9e	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1aa1	c8		iny				iny
.1aa2	b1 20		lda ($20),y			lda 	(zTemp1),y
.1aa4	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1aa7	b0 0d		bcs $1ab6			bcs 	_PGMIInsert 				; insert here.
.1aa9	18		clc				clc
.1aaa	b2 20		lda ($20)			lda 	(zTemp1)
.1aac	65 20		adc $20				adc 	zTemp1
.1aae	85 20		sta $20				sta 	zTemp1
.1ab0	90 e4		bcc $1a96			bcc 	_PGMILoop
.1ab2	e6 21		inc $21				inc 	zTemp1+1
.1ab4	80 e0		bra $1a96			bra 	_PGMILoop
.1ab6					_PGMIInsert:
.1ab6	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1ab9					_PGMIInsertLoop:
.1ab9	b2 1e		lda ($1e)			lda 	(zTemp0)
.1abb	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1abd	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1abf	c5 1e		cmp $1e				cmp 	zTemp0
.1ac1	d0 06		bne $1ac9			bne 	_PGMINext
.1ac3	a5 21		lda $21				lda 	zTemp1+1
.1ac5	c5 1f		cmp $1f				cmp 	zTemp0+1
.1ac7	f0 0a		beq $1ad3			beq 	_PGMIInserted
.1ac9					_PGMINext:
.1ac9	a5 1e		lda $1e				lda 	zTemp0
.1acb	d0 02		bne $1acf			bne 	_PGMINoBorrow
.1acd	c6 1f		dec $1f				dec 	zTemp0+1
.1acf					_PGMINoBorrow:
.1acf	c6 1e		dec $1e				dec 	zTemp0
.1ad1	80 e6		bra $1ab9			bra 	_PGMIInsertLoop
.1ad3					_PGMIInserted:
.1ad3	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1ad5					_PGMICopyLoop:
.1ad5	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1ad8	91 20		sta ($20),y			sta 	(zTemp1),y
.1ada	c8		iny				iny
.1adb	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1ade	d0 f5		bne $1ad5			bne 	_PGMICopyLoop
.1ae0	18		clc				clc
.1ae1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1ae2					PGMSetBaseAddress:
.1ae2	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1ae5	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1ae8	60		rts				rts
.1ae9					PGMNewProgram:
.1ae9	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1aeb	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1aee	85 1f		sta $1f				sta 	zTemp0+1
.1af0	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1af2	92 1e		sta ($1e)			sta 	(zTemp0)
.1af4	60		rts				rts
.1af5					PGMEndProgram:
.1af5	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1af7	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1afa	85 1f		sta $1f				sta 	zTemp0+1
.1afc					_PGMEPLoop:
.1afc	b2 1e		lda ($1e)			lda 	(zTemp0)
.1afe	f0 0b		beq $1b0b			beq 	_PGMEPExit
.1b00	18		clc				clc
.1b01	65 1e		adc $1e				adc 	zTemp0
.1b03	85 1e		sta $1e				sta 	zTemp0
.1b05	90 f5		bcc $1afc			bcc 	_PGMEPLoop
.1b07	e6 1f		inc $1f				inc 	zTemp0+1
.1b09	80 f1		bra $1afc			bra 	_PGMEPLoop
.1b0b					_PGMEPExit:
.1b0b	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1b0c					TOKResetElement:
.1b0c	9c 46 03	stz $0346			stz 	TOKElement
.1b0f	60		rts				rts
.1b10					TOKWriteElement:
.1b10	da		phx				phx
.1b11	ae 46 03	ldx $0346			ldx 	TOKElement
.1b14	9d 47 03	sta $0347,x			sta 	TOKElementText,x
.1b17	9e 48 03	stz $0348,x			stz 	TOKElementText+1,x
.1b1a	fa		plx				plx
.1b1b	ee 46 03	inc $0346			inc 	TOKElement
.1b1e	60		rts				rts
.0346					TOKElement:
>0346							.fill 	1
.0347					TOKElementText:
>0347							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1b1f					TOKTokeniseConstant:
.1b1f	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1b21	48		pha				pha 								; save on stack
.1b22	29 c0		and #$c0			and 	#$C0
.1b24	05 0d		ora $0d				ora 	IFR0+IM1
.1b26	05 0e		ora $0e				ora 	IFR0+IM2
.1b28	f0 10		beq $1b3a			beq 	_TTCLess
.1b2a	da		phx				phx
.1b2b	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1b2d					_TTCShiftRight:
.1b2d	46 0e		lsr $0e				lsr 	IFR0+IM2
.1b2f	66 0d		ror $0d				ror 	IFR0+IM1
.1b31	66 0c		ror $0c				ror 	IFR0+IM0
.1b33	ca		dex				dex
.1b34	d0 f7		bne $1b2d			bne 	_TTCShiftRight
.1b36	fa		plx				plx
.1b37	20 1f 1b	jsr $1b1f			jsr 	TOKTokeniseConstant
.1b3a					_TTCLess:
.1b3a	68		pla				pla
.1b3b	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1b3d	20 d9 1b	jsr $1bd9			jsr 	TOKWriteA
.1b40	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1b41					TOKTokeniseDecimals:
.1b41	20 e9 1b	jsr $1be9			jsr 	TOKGetNext 					; consume the .
.1b44	20 13 1d	jsr $1d13			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1b47	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1b49	20 d9 1b	jsr $1bd9			jsr 	TOKWriteA
.1b4c	20 51 1b	jsr $1b51			jsr 	TOKOutputElementBuffer 		; then the buffer
.1b4f	18		clc				clc
.1b50	60		rts				rts
.1b51					TOKOutputElementBuffer:
.1b51	ad 46 03	lda $0346			lda 	TOKElement 					; get count and write that
.1b54	20 d9 1b	jsr $1bd9			jsr 	TOKWriteA
.1b57	a8		tay				tay 								; put in Y
.1b58	f0 0c		beq $1b66			beq 	_TOEExit 					; exit if empty which is okay.
.1b5a	a2 01		ldx #$01			ldx 	#1
.1b5c					_TOELoop:
.1b5c	bd 46 03	lda $0346,x			lda 	TOKElement,x
.1b5f	20 d9 1b	jsr $1bd9			jsr 	TOKWriteA
.1b62	e8		inx				inx
.1b63	88		dey				dey
.1b64	d0 f6		bne $1b5c			bne 	_TOELoop
.1b66					_TOEExit:
.1b66	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1b67					TOKTokenise:
.1b67	8c 47 04	sty $0447			sty 	TOKDataSource+1 			; save source routine pointer
.1b6a	8e 46 04	stx $0446			stx 	TOKDataSource
.1b6d	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1b6f	2a		rol a				rol  	a
.1b70	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1b73	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1b75	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1b78					_TOKMainLoop:
.1b78	20 e5 1b	jsr $1be5			jsr 	TOKGet 						; what follows.
.1b7b	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1b7d	f0 51		beq $1bd0			beq 	_TOKExit
.1b7f	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1b81	d0 05		bne $1b88			bne 	_TOKElement
.1b83	20 e9 1b	jsr $1be9			jsr 	TOKGetNext
.1b86	80 f0		bra $1b78			bra 	_TOKMainLoop
.1b88					_TOKElement:
.1b88	20 91 1d	jsr $1d91			jsr 	TOKIsDigit 					; is it 0..9
.1b8b	90 0a		bcc $1b97			bcc 	_TOKNotDigit
.1b8d	20 ea 1c	jsr $1cea			jsr 	TOKTokeniseInteger 			; get integer
.1b90	b0 45		bcs $1bd7			bcs 	_TOKFail 					; did it fail ?
.1b92	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1b95	80 e1		bra $1b78			bra 	_TOKMainLoop
.1b97					_TOKNotDigit:
.1b97	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1b9a	d0 3b		bne $1bd7			bne 	_TOKFail 					; if so, we've a problem.
.1b9c	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1b9e	d0 07		bne $1ba7			bne 	_TOKNotHex
.1ba0	20 32 1c	jsr $1c32			jsr 	TOKTokeniseHexadecimal
.1ba3	b0 32		bcs $1bd7			bcs 	_TOKFail
.1ba5	80 d1		bra $1b78			bra 	_TOKMainLoop
.1ba7					_TOKNotHex:
.1ba7	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1ba9	d0 07		bne $1bb2			bne 	_TOKNotDecimal
.1bab	20 41 1b	jsr $1b41			jsr 	TOKTokeniseDecimals
.1bae	b0 27		bcs $1bd7			bcs 	_TOKFail
.1bb0	80 c6		bra $1b78			bra 	_TOKMainLoop
.1bb2					_TOKNotDecimal:
.1bb2	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1bb4	d0 07		bne $1bbd			bne 	_TOKNotString
.1bb6	20 58 1d	jsr $1d58			jsr 	TOKTokeniseString
.1bb9	b0 1c		bcs $1bd7			bcs 	_TOKFail
.1bbb	80 bb		bra $1b78			bra 	_TOKMainLoop
.1bbd					_TOKNotString:
.1bbd	20 ae 1d	jsr $1dae			jsr 	TOKIsAlpha 					; identifier ?
.1bc0	b0 07		bcs $1bc9			bcs 	_TOKIdentifier
.1bc2	20 27 1d	jsr $1d27			jsr 	TOKTokenisePunctuation 		; punctuation
.1bc5	b0 10		bcs $1bd7			bcs 	_TOKFail
.1bc7	80 af		bra $1b78			bra 	_TOKMainLoop
.1bc9					_TOKIdentifier:
.1bc9	20 6c 1c	jsr $1c6c			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1bcc	b0 09		bcs $1bd7			bcs 	_TOKFail
.1bce	80 a8		bra $1b78			bra 	_TOKMainLoop
.1bd0					_TOKExit:
.1bd0	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1bd2	20 d9 1b	jsr $1bd9			jsr 	TOKWriteA
.1bd5	18		clc				clc									; return with carry set.
.1bd6	60		rts				rts
.1bd7					_TOKFail:
.1bd7	38		sec				sec
.1bd8	60		rts				rts
.1bd9					TOKWriteA:
.1bd9	da		phx				phx
.1bda	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1bdd	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1be0	fa		plx				plx
.1be1	ee 37 02	inc $0237			inc 	TOKLineSize
.1be4	60		rts				rts
.1be5					TOKGet:
.1be5	18		clc				clc
.1be6	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1be9					TOKGetNext:
.1be9	38		sec				sec
.1bea	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.0446					TOKDataSource:
>0446							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1bed					TOKFindToken:
.1bed	a2 75		ldx #$75			ldx 	#StandardTokens & $FF 		; do this table
.1bef	a0 16		ldy #$16			ldy 	#StandardTokens >> 8
.1bf1	20 fc 1b	jsr $1bfc			jsr 	TOKFindTokenXY 				; find it, or not
.1bf4	90 04		bcc $1bfa			bcc 	_TOKFTFail
.1bf6	a2 00		ldx #$00			ldx 	#0
.1bf8	38		sec				sec
.1bf9	60		rts				rts
.1bfa					_TOKFTFail
.1bfa	18		clc				clc
.1bfb	60		rts				rts
.1bfc					TOKFindTokenXY:
.1bfc	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1bfe	84 1f		sty $1f				sty 	zTemp0+1
.1c00	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1c02	8d 48 04	sta $0448			sta 	TOKCurrent
.1c05					_TOKFindLoop:
.1c05	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1c07	18		clc				clc 		 						; clear carry in case of fail
.1c08	30 17		bmi $1c21			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1c0a	cd 46 03	cmp $0346			cmp 	TOKElement 					; compare against the element length
.1c0d	d0 13		bne $1c22			bne 	_TOKNext 					; different, try next.
.1c0f	aa		tax				tax 								; number of chars to compare.
.1c10	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1c12					_TOKCompare:
.1c12	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1c14	d9 46 03	cmp $0346,y			cmp 	TOKElementText-1,y
.1c17	d0 09		bne $1c22			bne 	_TOKNext 					; different ? try next
.1c19	c8		iny				iny 								; compare next two
.1c1a	ca		dex				dex
.1c1b	d0 f5		bne $1c12			bne 	_TOKCompare 				; until done X characters.
.1c1d	38		sec				sec
.1c1e	ad 48 04	lda $0448			lda 	TOKCurrent 					; return current ID.
.1c21					_TOKExit:
.1c21	60		rts				rts
.1c22					_TOKNext:
.1c22	ee 48 04	inc $0448			inc 	TOKCurrent 					; increment token #
.1c25	38		sec				sec 								; add length+1 to ptr
.1c26	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c28	65 1e		adc $1e				adc 	zTemp0
.1c2a	85 1e		sta $1e				sta 	zTemp0
.1c2c	90 d7		bcc $1c05			bcc 	_TOKFindLoop
.1c2e	e6 1f		inc $1f				inc 	zTemp0+1
.1c30	80 d3		bra $1c05			bra 	_TOKFindLoop
.0448					TOKCurrent:
>0448							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1c32					TOKTokeniseHexadecimal:
.1c32	20 e9 1b	jsr $1be9			jsr 	TOKGetNext 					; consume the $
.1c35	a2 0c		ldx #$0c			ldx 	#IFR0
.1c37	20 4a 24	jsr $244a			jsr 	IFloatSetZero 				; set R0 = 0
.1c3a					_TTHLoop:
.1c3a	20 e5 1b	jsr $1be5			jsr 	TOKGet 						; keep getting and copying while numeric.
.1c3d	20 bb 1d	jsr $1dbb			jsr 	TOKIsHexadecimal
.1c40	90 20		bcc $1c62			bcc 	_TTHDone
.1c42	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1c44	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.1c47	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.1c4a	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.1c4d	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.1c50	20 e9 1b	jsr $1be9			jsr 	TOKGetNext
.1c53	38		sec				sec 								; convert to decimal.
.1c54	e9 30		sbc #$30			sbc 	#48
.1c56	c9 0a		cmp #$0a			cmp 	#10
.1c58	90 02		bcc $1c5c			bcc 	_TTHNotAlpha
.1c5a	e9 07		sbc #$07			sbc 	#7
.1c5c					_TTHNotAlpha:
.1c5c	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1c5e	85 0c		sta $0c				sta 	IFR0+IM0
.1c60	80 d8		bra $1c3a			bra 	_TTHLoop
.1c62					_TTHDone:
.1c62	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1c64	20 d9 1b	jsr $1bd9			jsr 	TOKWriteA
.1c67	20 1f 1b	jsr $1b1f			jsr 	TOKTokeniseConstant 		; write integer out.
.1c6a	18		clc				clc
.1c6b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1c6c					TOKTokeniseIdentifier:
.1c6c	20 0c 1b	jsr $1b0c			jsr 	TOKResetElement 			; extract an identifier
.1c6f					_TOKGetIdentifier:
.1c6f	20 e5 1b	jsr $1be5			jsr 	TOKGet
.1c72	20 7b 1d	jsr $1d7b			jsr 	TOKToUpper
.1c75	20 9d 1d	jsr $1d9d			jsr 	TOKIsIdentifierElement
.1c78	90 08		bcc $1c82			bcc 	_TOKEndIdent
.1c7a	20 10 1b	jsr $1b10			jsr		TOKWriteElement
.1c7d	20 e9 1b	jsr $1be9			jsr 	TOKGetNext
.1c80	80 ed		bra $1c6f			bra 	_TOKGetIdentifier
.1c82					_TOKEndIdent:
.1c82	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1c84	d0 06		bne $1c8c			bne 	_TOKNotString
.1c86	20 10 1b	jsr $1b10			jsr 	TOKWriteElement 			; add it
.1c89	20 e9 1b	jsr $1be9			jsr 	TOKGetNext 					; consume it
.1c8c					_TOKNotString:
.1c8c	20 e5 1b	jsr $1be5			jsr 	TOKGet 						; finally check for (
.1c8f	c9 28		cmp #$28			cmp 	#"("
.1c91	d0 06		bne $1c99			bne 	_TOKNoArray
.1c93	20 10 1b	jsr $1b10			jsr 	TOKWriteElement 			; add it
.1c96	20 e9 1b	jsr $1be9			jsr 	TOKGetNext 					; consume it
.1c99					_TOKNoArray:
.1c99	20 ed 1b	jsr $1bed			jsr 	TOKFindToken 				; find it
.1c9c	90 05		bcc $1ca3			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1c9e	20 d9 1b	jsr $1bd9			jsr 	TOKWriteA
.1ca1	18		clc				clc
.1ca2	60		rts				rts
.1ca3					_TOKIsVariable:
.1ca3	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1ca5					_TOKOutputBuffer:
.1ca5	bd 47 03	lda $0347,x			lda 	TOKElementText,x 			; output it translated.
.1ca8	20 d1 1c	jsr $1cd1			jsr 	TOKTranslateIdentifier
.1cab	20 d9 1b	jsr $1bd9			jsr 	TOKWriteA
.1cae	e8		inx				inx
.1caf	bd 47 03	lda $0347,x			lda 	TOKElementText,x
.1cb2	20 9d 1d	jsr $1d9d			jsr 	TOKIsIdentifierElement
.1cb5	b0 ee		bcs $1ca5			bcs 	_TOKOutputBuffer
.1cb7	a8		tay				tay 								; last char in Y
.1cb8	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1cba	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1cbc	f0 0e		beq $1ccc			beq 	_TOKIVExit
.1cbe	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1cc0	d0 04		bne $1cc6			bne 	_TOKIVCheckArray 			; no, check for (
.1cc2	1a		inc a				inc 	a 							; token is $7D
.1cc3	bc 48 03	ldy $0348,x			ldy 	TOKElementText+1,x 			; get next one.
.1cc6					_TOKIVCheckArray:
.1cc6	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1cc8	d0 02		bne $1ccc			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1cca	1a		inc a				inc 	a
.1ccb	1a		inc a				inc 	a
.1ccc					_TOKIVExit:
.1ccc	20 d9 1b	jsr $1bd9			jsr 	TOKWriteA 					; ending token
.1ccf	18		clc				clc
.1cd0	60		rts				rts
.1cd1					TOKTranslateIdentifier:
.1cd1	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1cd3	f0 0f		beq $1ce4			beq 	_TTI64
.1cd5	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1cd7	f0 0e		beq $1ce7			beq 	_TTI65
.1cd9	38		sec				sec
.1cda	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1cdc	10 03		bpl $1ce1			bpl 	_TTIExit
.1cde	18		clc				clc 								; map 09 onto 26-35
.1cdf	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1ce1					_TTIExit:
.1ce1	09 40		ora #$40			ora 	#$40 						; correct range.
.1ce3	60		rts				rts
.1ce4	a9 64		lda #$64	_TTI64:	lda 	#$64
.1ce6	60		rts				rts
.1ce7	a9 65		lda #$65	_TTI65:	lda 	#$65
.1ce9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1cea					TOKTokeniseInteger:
.1cea	20 13 1d	jsr $1d13			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1ced	a2 47		ldx #$47			ldx 	#TOKElementText & $FF
.1cef	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1cf1	ad 46 03	lda $0346			lda		TOKElement
.1cf4	20 ae 22	jsr $22ae			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1cf7	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1cfa	f0 12		beq $1d0e			beq 	_TOKNotLineNumber
.1cfc	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1cfe	d0 0c		bne $1d0c			bne 	_TOKBadLineNumeber
.1d00	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1d02	8d 38 02	sta $0238			sta 	TOKLineNumber
.1d05	a5 0d		lda $0d				lda 	IFR0+IM1
.1d07	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1d0a	18		clc				clc
.1d0b	60		rts				rts
.1d0c					_TOKBadLineNumeber:
.1d0c	38		sec				sec
.1d0d	60		rts				rts
.1d0e					_TOKNotLineNumber:
.1d0e	20 1f 1b	jsr $1b1f			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1d11	18		clc				clc
.1d12	60		rts				rts
.1d13					TOKExtractInteger:
.1d13	20 0c 1b	jsr $1b0c			jsr 	TOKResetElement 			; restart
.1d16					_TTILoop:
.1d16	20 e5 1b	jsr $1be5			jsr 	TOKGet 						; keep getting and copying while numeric.
.1d19	20 91 1d	jsr $1d91			jsr 	TOKIsDigit
.1d1c	90 08		bcc $1d26			bcc 	_TOKEIExit
.1d1e	20 10 1b	jsr $1b10			jsr 	TOKWriteElement
.1d21	20 e9 1b	jsr $1be9			jsr 	TOKGetNext
.1d24	80 f0		bra $1d16			bra 	_TTILoop
.1d26					_TOKEIExit:
.1d26	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1d27					TOKTokenisePunctuation:
.1d27	20 0c 1b	jsr $1b0c			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1d2a	20 e9 1b	jsr $1be9			jsr 	TOKGetNext
.1d2d	20 10 1b	jsr $1b10			jsr 	TOKWriteElement
.1d30	20 e5 1b	jsr $1be5			jsr 	TOKGet 						; what follows ?
.1d33	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1d35	f0 10		beq $1d47			beq 	_TTPOne
.1d37	20 a5 1d	jsr $1da5			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1d3a	b0 0b		bcs $1d47			bcs 	_TTPOne 					; these speed things up a bit.
.1d3c	20 10 1b	jsr $1b10			jsr 	TOKWriteElement 			; this is what we will search for.
.1d3f	20 ed 1b	jsr $1bed			jsr 	TOKFindToken
.1d42	b0 0a		bcs $1d4e			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1d44	ce 46 03	dec $0346			dec 	TOKElement 					; make it a single character
.1d47					_TTPOne:
.1d47	20 ed 1b	jsr $1bed			jsr 	TOKFindToken 				; look for one character punctuation
.1d4a	b0 07		bcs $1d53			bcs 	_TTPOutputExit 				; we found it
.1d4c	38		sec				sec 								; not recognised.
.1d4d	60		rts				rts
.1d4e					_TTPConsumeExit:
.1d4e	48		pha				pha
.1d4f	20 e9 1b	jsr $1be9			jsr 	TOKGetNext 					; get the 2nd char out.
.1d52	68		pla				pla
.1d53					_TTPOutputExit:
.1d53	20 d9 1b	jsr $1bd9			jsr  	TOKWriteA 					; write token out
.1d56	18		clc				clc
.1d57	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1d58					TOKTokeniseString:
.1d58	20 e9 1b	jsr $1be9			jsr 	TOKGetNext 					; consume the "
.1d5b	20 0c 1b	jsr $1b0c			jsr 	TOKResetElement 			; start getting the string
.1d5e					_TOKTSLoop:
.1d5e	20 e5 1b	jsr $1be5			jsr 	TOKGet 						; check EOL
.1d61	c9 00		cmp #$00			cmp 	#0
.1d63	f0 0c		beq $1d71			beq 	_TOKTSExit
.1d65	20 e9 1b	jsr $1be9			jsr 	TOKGetNext 					; get and consume
.1d68	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1d6a	f0 05		beq $1d71			beq 	_TOKTSExit
.1d6c	20 10 1b	jsr $1b10			jsr 	TOKWriteElement
.1d6f	80 ed		bra $1d5e			bra 	_TOKTSLoop
.1d71					_TOKTSExit:
.1d71	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1d73	20 d9 1b	jsr $1bd9			jsr 	TOKWriteA
.1d76	20 51 1b	jsr $1b51			jsr 	TOKOutputElementBuffer
.1d79	18		clc				clc
.1d7a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1d7b					TOKToUpper:
.1d7b	c9 61		cmp #$61			cmp 	#"a"
.1d7d	90 06		bcc $1d85			bcc 	_TTUNotLower
.1d7f	c9 7b		cmp #$7b			cmp 	#"z"+1
.1d81	b0 02		bcs $1d85			bcs 	_TTUNotLower
.1d83	49 20		eor #$20			eor 	#$20
.1d85					_TTUNotLower:
.1d85	60		rts				rts
.1d86					TOKToLower:
.1d86	c9 41		cmp #$41			cmp 	#"A"
.1d88	90 06		bcc $1d90			bcc 	_TTUNotUpper
.1d8a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1d8c	b0 02		bcs $1d90			bcs 	_TTUNotUpper
.1d8e	49 20		eor #$20			eor 	#$20
.1d90					_TTUNotUpper:
.1d90	60		rts				rts
.1d91					TOKIsDigit:
.1d91	c9 30		cmp #$30			cmp 	#"0"
.1d93	90 06		bcc $1d9b			bcc 	TOKFail
.1d95	c9 3a		cmp #$3a			cmp 	#"9"+1
.1d97	b0 02		bcs $1d9b			bcs 	TOKFail
.1d99					TOKSucceed:
.1d99	38		sec				sec
.1d9a	60		rts				rts
.1d9b					TOKFail:
.1d9b	18		clc				clc
.1d9c	60		rts				rts
.1d9d					TOKIsIdentifierElement:
.1d9d	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1d9f	f0 f8		beq $1d99			beq 	TOKSucceed
.1da1	c9 5f		cmp #$5f			cmp 	#"_"
.1da3	f0 f4		beq $1d99			beq 	TOKSucceed 					; else fall through to alphanumeric
.1da5					TOKIsAlphaNumeric:
.1da5	20 ae 1d	jsr $1dae			jsr 	TOKIsAlpha
.1da8	b0 ef		bcs $1d99			bcs 	TOKSucceed
.1daa	20 91 1d	jsr $1d91			jsr 	TOKIsDigit
.1dad	60		rts				rts
.1dae					TOKIsAlpha:
.1dae	20 7b 1d	jsr $1d7b			jsr 	TOKToUpper
.1db1	c9 41		cmp #$41			cmp 	#"A"
.1db3	90 e6		bcc $1d9b			bcc 	TOKFail
.1db5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1db7	b0 e2		bcs $1d9b			bcs 	TOKFail
.1db9	80 de		bra $1d99			bra 	TOKSucceed
.1dbb					TOKIsHexadecimal:
.1dbb	20 91 1d	jsr $1d91			jsr		TOKIsDigit
.1dbe	b0 d9		bcs $1d99			bcs 	TOKSucceed
.1dc0	20 ae 1d	jsr $1dae			jsr 	TOKIsAlpha
.1dc3	90 d6		bcc $1d9b			bcc 	TOKFail
.1dc5	c9 47		cmp #$47			cmp 	#"F"+1
.1dc7	b0 d2		bcs $1d9b			bcs 	TOKFail
.1dc9	80 ce		bra $1d99			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.1dcb					StringSystemInitialise:
.1dcb	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh 			; last byte of memory
.1dce	3a		dec a				dec 	a
.1dcf	8d 4b 04	sta $044b			sta 	stringMemory+1
.1dd2	85 1f		sta $1f				sta 	zTemp0+1
.1dd4	a9 ff		lda #$ff			lda 	#$FF
.1dd6	8d 4a 04	sta $044a			sta 	stringMemory
.1dd9	85 1e		sta $1e				sta 	zTemp0
.1ddb	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.1ddd	92 1e		sta ($1e)			sta 	(zTemp0)
.1ddf	60		rts				rts
.1de0					StringSpaceInitialise:
.1de0	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.1de2	8d 49 04	sta $0449			sta 	stringInitialised
.1de5	ad 4a 04	lda $044a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.1de8	8d 4c 04	sta $044c			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.1deb	ad 4b 04	lda $044b			lda 	stringMemory+1
.1dee	3a		dec a				dec 	a
.1def	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1df2	60		rts				rts
.1df3					StringTempAllocate:
.1df3	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.1df5	b0 2e		bcs $1e25			bcs 	_STALength
.1df7	2c 49 04	bit $0449			bit 	stringInitialised 			; already initialised
.1dfa	30 05		bmi $1e01			bmi 	_STAAllocate
.1dfc	48		pha				pha 								; save value to subtract.
.1dfd	20 e0 1d	jsr $1de0			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.1e00	68		pla				pla 								; restore it
.1e01					_STAAllocate:
.1e01	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.1e03	18		clc				clc  								; deliberate allows one more
.1e04	6d 4c 04	adc $044c			adc 	stringTempPointer 			; subtract from temp pointer
.1e07	8d 4c 04	sta $044c			sta 	stringTempPointer
.1e0a	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.1e0c	85 24		sta $24				sta 	zsTemp 						; and zsTemp
.1e0e	ad 4d 04	lda $044d			lda 	stringTempPointer+1
.1e11	69 ff		adc #$ff			adc 	#$FF
.1e13	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1e16	85 25		sta $25				sta 	zsTemp+1
.1e18	85 0d		sta $0d				sta 	IFR0+IM1
.1e1a	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.1e1c	a9 80		lda #$80			lda 	#$80
.1e1e	85 0f		sta $0f				sta 	IFR0+IExp
.1e20	a9 00		lda #$00			lda 	#0 							; clear the target string
.1e22	92 24		sta ($24)			sta 	(zsTemp)
.1e24	60		rts				rts
.1e25					_STALength:
.1e25	4c f8 11	jmp $11f8		jmp	ErrorV_string
.1e28					StringTempWrite:
.1e28	5a		phy				phy
.1e29	48		pha				pha
.1e2a	b2 24		lda ($24)			lda 	(zsTemp)
.1e2c	1a		inc a				inc 	a
.1e2d	92 24		sta ($24)			sta 	(zsTemp)
.1e2f	a8		tay				tay
.1e30	68		pla				pla
.1e31	91 24		sta ($24),y			sta 	(zsTemp),y
.1e33	7a		ply				ply
.1e34	60		rts				rts
.0024					zsTemp:
>0024							.fill 	2
.0449					stringInitialised:
>0449							.fill 	1
.044a					stringMemory:
>044a							.fill 	2
.044c					stringTempPointer:
>044c							.fill 	2

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.1e35					IFInitialise:
.1e35	9c 56 04	stz $0456			stz 	IFStackIndex
.1e38	60		rts				rts
.1e39					IFloatSubtract:
.1e39	da		phx				phx
.1e3a	a2 0c		ldx #$0c			ldx 	#IFR0
.1e3c	20 55 24	jsr $2455			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.1e3f	fa		plx				plx
.1e40					IFloatAdd:
.1e40	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.1e42	05 0f		ora $0f				ora 	IFR0+IExp
.1e44	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.1e46	d0 4e		bne $1e96			bne 	_IFloatAddDecimals 			; decimal version.
.1e48					_IFAddSubMantissa:
.1e48	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.1e4a	45 0f		eor $0f				eor 	IFR0+IExp
.1e4c	29 40		and #$40			and 	#IFSign
.1e4e	d0 21		bne $1e71			bne 	_IFloatSubMantissa
.1e50	18		clc				clc 								; do the actual addition
.1e51	a5 0c		lda $0c			lda 	IFR0+IM0
.1e53	75 00		adc $00,x		adc 		IM0,x
.1e55	85 0c		sta $0c			sta 	IFR0+IM0
.1e57	a5 0d		lda $0d			lda 	IFR0+IM1
.1e59	75 01		adc $01,x		adc 		IM1,x
.1e5b	85 0d		sta $0d			sta 	IFR0+IM1
.1e5d	a5 0e		lda $0e			lda 	IFR0+IM2
.1e5f	75 02		adc $02,x		adc 		IM2,x
.1e61	85 0e		sta $0e			sta 	IFR0+IM2
.1e63	10 29		bpl $1e8e			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.1e65	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.1e67	20 79 24	jsr $2479			jsr 	IFloatShiftRight
.1e6a	20 a3 24	jsr $24a3			jsr 	IFloatIncExponent
.1e6d	d0 1f		bne $1e8e			bne 	_IFloatAddExit
.1e6f	38		sec				sec 								; overflowed numerically.
.1e70	60		rts				rts
.1e71					_IFloatSubMantissa:
.1e71	38		sec				sec 								; do the subtraction R0-Rx
.1e72	a5 0c		lda $0c			lda 	IFR0+IM0
.1e74	f5 00		sbc $00,x		sbc 		IM0,x
.1e76	85 0c		sta $0c			sta 	IFR0+IM0
.1e78	a5 0d		lda $0d			lda 	IFR0+IM1
.1e7a	f5 01		sbc $01,x		sbc 		IM1,x
.1e7c	85 0d		sta $0d			sta 	IFR0+IM1
.1e7e	a5 0e		lda $0e			lda 	IFR0+IM2
.1e80	f5 02		sbc $02,x		sbc 		IM2,x
.1e82	85 0e		sta $0e			sta 	IFR0+IM2
.1e84	b0 08		bcs $1e8e			bcs 	_IFloatAddExit 				; no borrow so we are done.
.1e86	a2 0c		ldx #$0c			ldx 	#IFR0
.1e88	20 5d 24	jsr $245d			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.1e8b	20 55 24	jsr $2455			jsr 	IFloatNegate 				; negate
.1e8e					_IFloatAddExit:
.1e8e	18		clc				clc
.1e8f	60		rts				rts
.1e90					_IFloatZeroAdd:
.1e90	fa		plx				plx 								; return this value in R0
.1e91	20 db 23	jsr $23db			jsr 	IFloatCopyFromRegister
.1e94	18		clc				clc
.1e95	60		rts				rts
.1e96					_IFloatAddDecimals:
.1e96	20 43 24	jsr $2443			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.1e99	f0 f3		beq $1e8e			beq 	_IFloatAddExit
.1e9b	20 81 24	jsr $2481			jsr 	IFloatNormalise 			; normalise RX
.1e9e	da		phx				phx 								; normalise R0
.1e9f	a2 0c		ldx #$0c			ldx 	#IFR0
.1ea1	20 43 24	jsr $2443			jsr 	IFloatCheckZero
.1ea4	f0 ea		beq $1e90			beq 	_IFloatZeroAdd
.1ea6	20 81 24	jsr $2481			jsr 	IFloatNormalise
.1ea9	fa		plx				plx
.1eaa	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.1eac	29 3f		and #$3f			and 	#IFXMask
.1eae	38		sec				sec
.1eaf	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.1eb1	85 0a		sta $0a				sta 	iTemp0
.1eb3	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.1eb5	29 3f		and #$3f			and 	#IFXMask
.1eb7	38		sec				sec
.1eb8	e9 20		sbc #$20			sbc 	#$20
.1eba	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.1ebc	b0 02		bcs $1ec0			bcs 	_IFloatHaveLarger
.1ebe	a5 0a		lda $0a				lda 	iTemp0
.1ec0					_IFloatHaveLarger:
.1ec0	18		clc				clc 								; get the actual one back.
.1ec1	69 20		adc #$20			adc 	#$20 						; shift both to that.
.1ec3	20 d0 1e	jsr $1ed0			jsr 	_IFShiftXToA
.1ec6	da		phx				phx
.1ec7	a2 0c		ldx #$0c			ldx 	#IFR0
.1ec9	20 d0 1e	jsr $1ed0			jsr 	_IFShiftXToA
.1ecc	fa		plx				plx
.1ecd	4c 48 1e	jmp $1e48			jmp 	_IFAddSubMantissa 			; do the adding bit.
.1ed0					_IFShiftXToA:
.1ed0	8d 4e 04	sta $044e			sta 	IFTarget
.1ed3	20 43 24	jsr $2443			jsr 	IFloatCheckZero 			; check adding zero ?
.1ed6	f0 11		beq $1ee9			beq 	_IFSXExit
.1ed8					_IFSXLoop:
.1ed8	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.1eda	29 3f		and #$3f			and 	#IFXMask
.1edc	cd 4e 04	cmp $044e			cmp 	IFTarget
.1edf	f0 08		beq $1ee9			beq 	_IFSXExit
.1ee1	20 79 24	jsr $2479			jsr 	IFloatShiftRight
.1ee4	20 a3 24	jsr $24a3			jsr 	IFloatIncExponent
.1ee7	80 ef		bra $1ed8			bra 	_IFSXLoop
.1ee9					_IFSXExit:
.1ee9	60		rts				rts
.044e					IFTarget:
>044e							.fill 	1
.1eea					IFloatMultiply:
.1eea	8e 4e 04	stx $044e			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.1eed	20 a5 1f	jsr $1fa5			jsr 	IFCalculateNewSign
.1ef0	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.1ef2	05 0f		ora $0f				ora 	IFR0+IExp
.1ef4	29 3f		and #$3f			and 	#IFXMask
.1ef6	15 01		ora $01,x			ora 	IM1,x
.1ef8	05 0d		ora $0d				ora 	IFR0+IM1
.1efa	15 02		ora $02,x			ora 	IM2,x
.1efc	05 0e		ora $0e				ora 	IFR0+IM2
.1efe	d0 0a		bne $1f0a			bne 	_IFMStandard
.1f00	20 26 24	jsr $2426			jsr 	IFloatMultiply8BitRx
.1f03	ad 50 04	lda $0450			lda 	IFNewSign
.1f06	85 0f		sta $0f				sta 	IFR0+IExp
.1f08	18		clc				clc
.1f09	60		rts				rts
.1f0a					_IFMStandard:
.1f0a	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.1f0c	20 9c 1f	jsr $1f9c			jsr 	IFMSignExtend
.1f0f	8d 4f 04	sta $044f			sta 	IFNewExponent
.1f12	a5 0f		lda $0f				lda 	IFR0+IExp
.1f14	20 9c 1f	jsr $1f9c			jsr 	IFMSignExtend
.1f17	18		clc				clc
.1f18	6d 4f 04	adc $044f			adc 	IFNewExponent
.1f1b	8d 4f 04	sta $044f			sta 	IFNewExponent
.1f1e	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.1f20	20 ec 23	jsr $23ec			jsr 	IFloatCopyToRegister
.1f23	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.1f25	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.1f28					_IFMLoop:
.1f28	a2 18		ldx #$18			ldx 	#IFRTemp
.1f2a	20 43 24	jsr $2443			jsr 	IFloatCheckZero
.1f2d	f0 3a		beq $1f69			beq 	_IFMExit
.1f2f	ae 4e 04	ldx $044e			ldx 	IFTarget 					; look at adder MSB
.1f32	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.1f34	10 03		bpl $1f39			bpl	 	_IFMTargetOkay
.1f36	20 8d 1f	jsr $1f8d			jsr 	_IFMShiftAll
.1f39					_IFMTargetOkay:
.1f39	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.1f3b	29 01		and #$01			and 	#1
.1f3d	f0 16		beq $1f55			beq 	_IFMNoAdd
.1f3f	ae 4e 04	ldx $044e			ldx 	IFTarget 					; add adder
.1f42	18		clc				clc
.1f43	a5 0c		lda $0c			lda 	IFR0+IM0
.1f45	75 00		adc $00,x		adc 		IM0,x
.1f47	85 0c		sta $0c			sta 	IFR0+IM0
.1f49	a5 0d		lda $0d			lda 	IFR0+IM1
.1f4b	75 01		adc $01,x		adc 		IM1,x
.1f4d	85 0d		sta $0d			sta 	IFR0+IM1
.1f4f	a5 0e		lda $0e			lda 	IFR0+IM2
.1f51	75 02		adc $02,x		adc 		IM2,x
.1f53	85 0e		sta $0e			sta 	IFR0+IM2
.1f55					_IFMNoAdd:
.1f55	a5 0e		lda $0e				lda 	IFR0+IM2
.1f57	10 03		bpl $1f5c			bpl 	_IFMResultOkay
.1f59	20 8d 1f	jsr $1f8d			jsr 	_IFMShiftAll
.1f5c					_IFMResultOkay:
.1f5c	a2 18		ldx #$18			ldx 	#IFRTemp
.1f5e	20 79 24	jsr $2479			jsr 	IFloatShiftRight
.1f61	ae 4e 04	ldx $044e			ldx 	IFTarget
.1f64	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.1f67	80 bf		bra $1f28			bra 	_IFMLoop
.1f69					_IFMExit:
.1f69	ad 4f 04	lda $044f			lda 	IFNewExponent 				; validate new exponent.
.1f6c	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.1f6e	90 0f		bcc $1f7f			bcc 	_IFMOkay
.1f70	c9 e0		cmp #$e0			cmp 	#$E0
.1f72	b0 0b		bcs $1f7f			bcs 	_IFMOkay
.1f74	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.1f76	f0 13		beq $1f8b			beq 	_IFMError
.1f78	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.1f7a	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.1f7d	18		clc				clc
.1f7e	60		rts				rts
.1f7f					_IFMOkay:
.1f7f	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.1f81	0d 50 04	ora $0450			ora 	IFNewSign
.1f84	85 0f		sta $0f				sta 	IFR0+IExp
.1f86	18		clc				clc
.1f87	60		rts				rts
.1f88	4c ff ff	jmp $ffff			jmp 	$FFFF
.1f8b					_IFMError:
.1f8b	38		sec				sec
.1f8c	60		rts				rts
.1f8d					_IFMShiftAll:
.1f8d	a2 0c		ldx #$0c			ldx 	#IFR0
.1f8f	20 79 24	jsr $2479			jsr 	IFloatShiftRight
.1f92	ae 4e 04	ldx $044e			ldx 	IFTarget
.1f95	20 79 24	jsr $2479			jsr 	IFloatShiftRight
.1f98	ee 4f 04	inc $044f			inc 	IFNewExponent
.1f9b	60		rts				rts
.1f9c					IFMSignExtend:
.1f9c	29 3f		and #$3f			and 	#IFXMask
.1f9e	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.1fa0	90 02		bcc $1fa4			bcc 	_IFMNoSXX
.1fa2	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.1fa4					_IFMNoSXX:
.1fa4	60		rts				rts
.1fa5					IFCalculateNewSign:
.1fa5	b5 03		lda $03,x			lda 	IExp,x
.1fa7	45 0f		eor $0f				eor 	IFR0+IExp
.1fa9	29 40		and #$40			and 	#IFSign
.1fab	8d 50 04	sta $0450			sta 	IFNewSign
.1fae	60		rts				rts
.044f					IFNewExponent:
>044f							.fill 	1
.0450					IFNewSign:
>0450							.fill 	1
.1faf					IFloatDivideInteger:
.1faf	20 c8 1f	jsr $1fc8			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.1fb2	b0 06		bcs $1fba			bcs 	_IFDIExit
.1fb4	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.1fb6	20 db 23	jsr $23db			jsr 	IFloatCopyFromRegister
.1fb9	18		clc				clc
.1fba					_IFDIExit:
.1fba	60		rts				rts
.1fbb					IFloatModulusInteger:
.1fbb	20 c8 1f	jsr $1fc8			jsr 	IFloatDivideIntegerCommon
.1fbe	b0 07		bcs $1fc7			bcs 	_IFMIExit
.1fc0	ae 4e 04	ldx $044e			ldx 	IFTarget
.1fc3	20 db 23	jsr $23db			jsr 	IFloatCopyFromRegister
.1fc6	18		clc				clc
.1fc7					_IFMIExit:
.1fc7	60		rts				rts
.1fc8					IFloatDivideIntegerCommon:
.1fc8	8e 4e 04	stx $044e			stx 	IFTarget  					; this is s1, s0 = R0
.1fcb	20 a5 1f	jsr $1fa5			jsr 	IFCalculateNewSign 			; calculate sign of result
.1fce	20 f6 1f	jsr $1ff6			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.1fd1	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.1fd3	20 43 24	jsr $2443			jsr 	IFloatCheckZero
.1fd6	f0 1c		beq $1ff4			beq 	_IFDIDivZero
.1fd8	ae 4e 04	ldx $044e			ldx 	IFTarget 					; zero Rx (S1)
.1fdb	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.1fde	5a		phy				phy
.1fdf	a0 18		ldy #$18			ldy 	#24
.1fe1					_IFDILoop:
.1fe1	20 07 20	jsr $2007			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.1fe4	20 13 20	jsr $2013			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.1fe7	88		dey				dey
.1fe8	d0 f7		bne $1fe1			bne 	_IFDILoop 					; do it 24 times
.1fea	7a		ply				ply
.1feb	ad 50 04	lda $0450			lda 	IFNewSign 					; set sign of result.
.1fee	29 40		and #$40			and 	#IFSign
.1ff0	85 1b		sta $1b				sta 	IFRTemp+IExp
.1ff2	18		clc				clc 								; is okay.
.1ff3	60		rts				rts
.1ff4					_IFDIDivZero:
.1ff4	38		sec				sec
.1ff5	60		rts				rts
.1ff6					IFDCopyRXToRTemp:
.1ff6	b5 00		lda $00,x			lda 	IM0,x
.1ff8	85 18		sta $18				sta 	IFRTemp+IM0
.1ffa	b5 01		lda $01,x			lda 	IM1,x
.1ffc	85 19		sta $19				sta 	IFRTemp+IM1
.1ffe	b5 02		lda $02,x			lda 	IM2,x
.2000	85 1a		sta $1a				sta 	IFRTemp+IM2
.2002	b5 03		lda $03,x			lda 	IExp,x
.2004	85 1b		sta $1b				sta 	IFRTemp+IExp
.2006	60		rts				rts
.2007					IFDShiftSTempS1Left:
.2007	a2 18		ldx #$18			ldx 	#IFRTemp
.2009	20 71 24	jsr $2471			jsr 	IFloatShiftLeft
.200c	ae 4e 04	ldx $044e			ldx 	IFTarget
.200f	20 72 24	jsr $2472			jsr 	IFloatRotateLeft
.2012	60		rts				rts
.2013					IFDTrySubtract:
.2013	ae 4e 04	ldx $044e			ldx 	IFTarget 					; s1 = Rx
.2016	38		sec				sec 								; subtract, saving the results on the stack.
.2017	b5 00		lda $00,x			lda 	IM0,x
.2019	e5 0c		sbc $0c				sbc 	IFR0+IM0
.201b	48		pha				pha
.201c	b5 01		lda $01,x			lda 	IM1,x
.201e	e5 0d		sbc $0d				sbc 	IFR0+IM1
.2020	48		pha				pha
.2021	b5 02		lda $02,x			lda 	IM2,x
.2023	e5 0e		sbc $0e				sbc 	IFR0+IM2
.2025	b0 03		bcs $202a			bcs 	_IFDCanSubtract
.2027	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2028	68		pla				pla
.2029	60		rts				rts
.202a					_IFDCanSubtract:
.202a	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.202c	68		pla				pla
.202d	95 01		sta $01,x			sta 	IM1,x
.202f	68		pla				pla
.2030	95 00		sta $00,x			sta 	IM0,x
.2032	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.2034	d0 06		bne $203c			bne 	_IFDCSExit
.2036	e6 19		inc $19				inc 	IFRTemp+IM1
.2038	d0 02		bne $203c			bne 	_IFDCSExit
.203a	e6 1a		inc $1a				inc 	IFRTemp+IM2
.203c					_IFDCSExit:
.203c	60		rts				rts
.203d					IFloatBitwiseAnd:
.203d	5a		phy				phy
.203e	20 82 20	jsr $2082			jsr 	IFPreProcessBitwise 		; set up everything.
.2041	d0 0f		bne $2052			bne 	_IFBAExit
.2043					_IFBALoop:
.2043	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2046	35 00		and $00,x			and 	IM0,x
.2048	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.204b	e8		inx				inx
.204c	c8		iny				iny
.204d	c0 03		cpy #$03			cpy 	#3
.204f	d0 f2		bne $2043			bne 	_IFBALoop
.2051	18		clc				clc
.2052					_IFBAExit:
.2052	7a		ply				ply
.2053	60		rts				rts
.2054					IFloatBitwiseOr:
.2054	5a		phy				phy
.2055	20 82 20	jsr $2082			jsr 	IFPreProcessBitwise 		; set up everything.
.2058	d0 0f		bne $2069			bne 	_IFBAExit
.205a					_IFBALoop:
.205a	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.205d	15 00		ora $00,x			ora 	IM0,x
.205f	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2062	e8		inx				inx
.2063	c8		iny				iny
.2064	c0 03		cpy #$03			cpy 	#3
.2066	d0 f2		bne $205a			bne 	_IFBALoop
.2068	18		clc				clc
.2069					_IFBAExit:
.2069	7a		ply				ply
.206a	60		rts				rts
.206b					IFloatBitwiseXor:
.206b	5a		phy				phy
.206c	20 82 20	jsr $2082			jsr 	IFPreProcessBitwise 		; set up everything.
.206f	d0 0f		bne $2080			bne 	_IFBAExit
.2071					_IFBALoop:
.2071	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2074	55 00		eor $00,x			eor 	IM0,x
.2076	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2079	e8		inx				inx
.207a	c8		iny				iny
.207b	c0 03		cpy #$03			cpy 	#3
.207d	d0 f2		bne $2071			bne 	_IFBALoop
.207f	18		clc				clc
.2080					_IFBAExit:
.2080	7a		ply				ply
.2081	60		rts				rts
.2082					IFPreProcessBitwise:
.2082	a0 00		ldy #$00			ldy 	#0 							; set index.
.2084	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.2086	15 03		ora $03,x			ora 	IExp,x
.2088	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.208a	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.208c	38		sec				sec 								; carry set just in cases.
.208d	60		rts				rts
.208e					IFloatAbsoluteR0:
.208e	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.2090	29 bf		and #$bf			and 	#IFSign ^ 255
.2092	85 0f		sta $0f				sta 	IFR0+IExp
.2094	18		clc				clc
.2095	60		rts				rts
.2096					IFloatSquareRootR0:
.2096	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.2098	20 43 24	jsr $2443			jsr 	IFloatCheckZero
.209b	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.209d	29 40		and #$40			and 	#IFSign
.209f	d0 2f		bne $20d0			bne 	_IFSRFail
.20a1	20 81 24	jsr $2481			jsr 	IFloatNormalise 			; it will work better !
.20a4	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.20a6	20 ec 23	jsr $23ec			jsr 	IFloatCopyToRegister
.20a9	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.20ab	20 9c 1f	jsr $1f9c			jsr 	IFMSignExtend 				; sign extended version of the exponent
.20ae	18		clc				clc
.20af	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.20b1	85 0f		sta $0f				sta 	IFR0+IExp
.20b3	4a		lsr a				lsr 	a 							; which we can halve.
.20b4	38		sec				sec 								; convert back
.20b5	e9 17		sbc #$17			sbc 	#23
.20b7	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.20b9	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.20bb	20 d2 20	jsr $20d2			jsr 	_IFSRNewton
.20be	20 d2 20	jsr $20d2			jsr 	_IFSRNewton
.20c1	20 d2 20	jsr $20d2			jsr 	_IFSRNewton
.20c4	20 d2 20	jsr $20d2			jsr 	_IFSRNewton
.20c7	18		clc				clc
.20c8	60		rts				rts
.20c9					_IFSRZero:
.20c9	a2 0c		ldx #$0c			ldx 	#IFR0
.20cb	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.20ce	18		clc				clc
.20cf	60		rts				rts
.20d0					_IFSRFail:
.20d0	38		sec				sec
.20d1	60		rts				rts
.20d2					_IFSRNewton:
.20d2	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.20d4	20 99 23	jsr $2399			jsr 	IFloatPushRx
.20d7	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.20d9	20 99 23	jsr $2399			jsr 	IFloatPushRx
.20dc	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.20de	20 6d 21	jsr $216d			jsr 	IFloatDivideFloat
.20e1	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.20e3	20 ba 23	jsr $23ba			jsr 	IFloatPullRx
.20e6	20 40 1e	jsr $1e40			jsr 	IFloatAdd 					; now guess + original/guess
.20e9	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.20eb	20 79 24	jsr $2479			jsr 	IFloatShiftRight
.20ee	a2 10		ldx #$10			ldx 	#IFR1
.20f0	20 ba 23	jsr $23ba			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.20f3	60		rts				rts
.20f4					IFloatFractionalR0:
.20f4	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.20f6	29 3f		and #$3f			and 	#IFXMask
.20f8	f0 17		beq $2111			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.20fa	20 8e 20	jsr $208e			jsr 	IFloatAbsoluteR0 			; absolute value R9
.20fd	a2 0c		ldx #$0c			ldx 	#IFR0
.20ff	20 81 24	jsr $2481			jsr 	IFloatNormalise 			; normalise R0
.2102	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.2104	20 ec 23	jsr $23ec			jsr 	IFloatCopyToRegister
.2107	20 4a 21	jsr $214a			jsr 	IFloatIntegerR0 			; take integer part of R0
.210a	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.210c	20 39 1e	jsr $1e39			jsr 	IFloatSubtract
.210f	80 05		bra $2116			bra 	_FIPExit
.2111					_FIPZero:
.2111	a2 0c		ldx #$0c			ldx 	#IFR0
.2113	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.2116					_FIPExit:
.2116	18		clc				clc
.2117	60		rts				rts
.2118					IFloatCompare:
.2118	20 39 1e	jsr $1e39			jsr 	IFloatSubtract 				; subtract R0 from RX.
.211b	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.211d	05 0f		ora $0f				ora 	IFR0+IExp
.211f	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.2121	29 3f		and #$3f			and 	#IFXMask
.2123	d0 19		bne $213e			bne 	_IFCNonInteger
.2125	20 43 24	jsr $2443			jsr 	IFloatCheckZero 			; check if zero
.2128	f0 0f		beq $2139			beq 	_IFCZero
.212a					_IFCReturnSign:
.212a	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.212c	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.212e	48		pha				pha
.212f	a9 01		lda #$01			lda 	#1
.2131	20 4c 24	jsr $244c			jsr 	IFloatSetByte 				; return to +1
.2134	68		pla				pla 								; sign bit back
.2135	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.2137	18		clc				clc
.2138	60		rts				rts
.2139					_IFCZero:
.2139	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.213c	18		clc				clc
.213d	60		rts				rts
.213e					_IFCNonInteger:
.213e	a5 0c		lda $0c				lda 	IFR0+IM0
.2140	29 00		and #$00			and		#$00
.2142	05 0d		ora $0d				ora 	IFR0+IM1
.2144	05 0e		ora $0e				ora 	IFR0+IM2
.2146	f0 f1		beq $2139			beq 	_IFCZero 					; near enough !
.2148	80 e0		bra $212a			bra 	_IFCReturnSign 				; return the sign of the difference.
.214a					IFloatIntegerR0:
.214a	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.214c	29 3f		and #$3f			and 	#IFXMask
.214e	f0 1b		beq $216b			beq 	_FIPExit 					; if so do nothing
.2150	a2 0c		ldx #$0c			ldx 	#IFR0
.2152	20 81 24	jsr $2481			jsr 	IFloatNormalise 			; normalise
.2155	20 43 24	jsr $2443			jsr 	IFloatCheckZero 			; is it zero ?
.2158	f0 0e		beq $2168			beq 	_FIPZero 					; if so return zero.
.215a					_FIPShift:
.215a	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.215c	29 20		and #$20			and 	#$20 						; still -ve
.215e	f0 0b		beq $216b			beq 	_FIPExit
.2160	20 79 24	jsr $2479			jsr 	IFloatShiftRight 			; shift mantissa right
.2163	20 a3 24	jsr $24a3			jsr 	IFloatIncExponent 			; bump exponent
.2166	80 f2		bra $215a			bra 	_FIPShift
.2168					_FIPZero:
.2168	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.216b					_FIPExit:
.216b	18		clc				clc
.216c	60		rts				rts
.216d					IFloatDivideFloat:
.216d	8e 4e 04	stx $044e			stx 	IFTarget  					; this is s1, s0 = R0
.2170	20 a5 1f	jsr $1fa5			jsr 	IFCalculateNewSign 			; calculate sign of result
.2173	20 81 24	jsr $2481			jsr 	IFloatNormalise 			; normalise RX
.2176	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.2178	20 81 24	jsr $2481			jsr 	IFloatNormalise
.217b	20 43 24	jsr $2443			jsr 	IFloatCheckZero
.217e	f0 56		beq $21d6			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2180	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.2182	20 9c 1f	jsr $1f9c			jsr 	IFMSignExtend
.2185	8d 4f 04	sta $044f			sta 	IFNewExponent
.2188	ae 4e 04	ldx $044e			ldx 	IFTarget 					; calculate s1.exponent
.218b	b5 03		lda $03,x			lda 	IExp,x
.218d	20 9c 1f	jsr $1f9c			jsr 	IFMSignExtend
.2190	38		sec				sec
.2191	ed 4f 04	sbc $044f			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2194	38		sec				sec
.2195	e9 17		sbc #$17			sbc 	#23
.2197	8d 4f 04	sta $044f			sta 	IFNewExponent
.219a	20 d8 21	jsr $21d8			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.219d	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.219f	10 08		bpl $21a9			bpl 	_IFDFNoShiftResult
.21a1	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.21a3	20 79 24	jsr $2479			jsr 	IFloatShiftRight
.21a6	ee 4f 04	inc $044f			inc 	IFNewExponent
.21a9					_IFDFNoShiftResult:
.21a9	ad 4f 04	lda $044f			lda 	IFNewExponent 				; underflow/overflow check.
.21ac	30 06		bmi $21b4			bmi 	_IFDFCheckUnderflow
.21ae	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.21b0	b0 24		bcs $21d6			bcs 	_IFDFDivZero
.21b2	80 11		bra $21c5			bra		_IFDFExit
.21b4					_IFDFCheckUnderflow:
.21b4	ad 4f 04	lda $044f			lda 	IFNewExponent 				; shift into a legal exponent.
.21b7	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.21b9	b0 0a		bcs $21c5			bcs 	_IFDFExit
.21bb	ee 4f 04	inc $044f			inc 	IFNewExponent
.21be	a2 18		ldx #$18			ldx 	#IFRTemp
.21c0	20 79 24	jsr $2479			jsr 	IFloatShiftRight
.21c3	80 ef		bra $21b4			bra 	_IFDFCheckUnderflow
.21c5					_IFDFExit:
.21c5	ad 4f 04	lda $044f			lda 	IFNewExponent 				; combine exponent and sign.
.21c8	29 3f		and #$3f			and 	#IFXMask
.21ca	0d 50 04	ora $0450			ora 	IFNewSign
.21cd	85 1b		sta $1b				sta 	IFRTemp+IExp
.21cf	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.21d1	20 db 23	jsr $23db			jsr 	IFloatCopyFromRegister
.21d4	18		clc				clc
.21d5	60		rts				rts
.21d6					_IFDFDivZero:
.21d6	38		sec				sec
.21d7	60		rts				rts
.21d8					IFloatDivideSupport:
.21d8	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.21da	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.21dd	5a		phy				phy 								; main division loop x 23
.21de	a0 17		ldy #$17			ldy 	#23
.21e0					_IFDSLoop:
.21e0	20 13 20	jsr $2013			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.21e3	20 07 20	jsr $2007			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.21e6	88		dey				dey
.21e7	d0 f7		bne $21e0			bne 	_IFDSLoop 					; do it 24 times
.21e9	7a		ply				ply
.21ea	60		rts				rts
.21eb					IFloatIntegerToStringR0:
.21eb	8d 51 04	sta $0451			sta 	IFBase 						; save base to use.
.21ee	20 cb 24	jsr $24cb			jsr 	IFloatBufferReset			; empty buffer
.21f1	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.21f3	29 3f		and #$3f			and 	#IFXMask
.21f5	d0 1e		bne $2215			bne 	_IFIFail
.21f7	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.21f9	20 43 24	jsr $2443			jsr 	IFloatCheckZero
.21fc	f0 0e		beq $220c			beq 	_IFINotNegative
.21fe	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.2200	29 40		and #$40			and 	#IFSign
.2202	f0 08		beq $220c			beq 	_IFINotNegative
.2204	a9 2d		lda #$2d			lda 	#"-"						; output -
.2206	20 da 24	jsr $24da			jsr 	IFloatBufferWrite
.2209	20 55 24	jsr $2455			jsr 	IFloatNegate 				; tidy up !
.220c					_IFINotNegative:
.220c	20 17 22	jsr $2217			jsr 	_IFIRecursiveConvert 		; start converting
.220f	20 d2 24	jsr $24d2			jsr 	IFloatGetBufferAddress
.2212	18		clc				clc
.2213	80 01		bra $2216			bra 	_IFIExit
.2215					_IFIFail:
.2215	38		sec				sec
.2216					_IFIExit:
.2216	60		rts				rts
.2217					_IFIRecursiveConvert:
.2217	a2 10		ldx #$10			ldx 	#IFR1
.2219	20 ec 23	jsr $23ec			jsr 	IFloatCopyToRegister 		; R0->R1
.221c	a2 0c		ldx #$0c			ldx 	#IFR0
.221e	ad 51 04	lda $0451			lda 	IFBase 						; Base -> R0
.2221	20 4c 24	jsr $244c			jsr 	IFloatSetByte
.2224	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.2226	20 af 1f	jsr $1faf			jsr 	IFloatDivideInteger
.2229	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.222b	20 43 24	jsr $2443			jsr 	IFloatCheckZero
.222e	f0 09		beq $2239			beq 	_IFIOutDigit
.2230	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.2232	48		pha				pha
.2233	20 17 22	jsr $2217			jsr 	_IFIRecursiveConvert 		; convert the divider
.2236	68		pla				pla
.2237	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.2239					_IFIOutDigit:
.2239	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.223b	c9 0a		cmp #$0a			cmp	 	#10
.223d	90 02		bcc $2241			bcc 	_IFINotHex
.223f	69 06		adc #$06			adc 	#6
.2241					_IFINotHex:
.2241	69 30		adc #$30			adc 	#48
.2243	20 da 24	jsr $24da			jsr 	IFloatBufferWrite
.2246	60		rts				rts
.0451					IFBase:
>0451							.fill 	1
.2247					IFloatFloatToStringR0:
.2247	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2249	20 99 23	jsr $2399			jsr 	IFloatPushRx
.224c	20 ec 23	jsr $23ec			jsr 	IFloatCopyToRegister
.224f	20 4a 21	jsr $214a			jsr 	IFloatIntegerR0				; make R0 integer
.2252	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2254	20 eb 21	jsr $21eb			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2257	9c 52 04	stz $0452			stz 	IFloatDecimalCount 			; zero the decimal count.
.225a	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.225c	29 3f		and #$3f			and 	#IFXMask
.225e	f0 44		beq $22a4			beq 	_IFFSExit
.2260					_IFloatFracLoop:
.2260	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.2262	20 db 23	jsr $23db			jsr 	IFloatCopyFromRegister
.2265	20 f4 20	jsr $20f4			jsr 	IFloatFractionalR0
.2268	20 81 24	jsr $2481			jsr 	IFloatNormalise
.226b	a2 14		ldx #$14			ldx 	#IFR2
.226d	20 ec 23	jsr $23ec			jsr 	IFloatCopyToRegister 		; copy to R2
.2270	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.2272	a9 0a		lda #$0a			lda 	#10
.2274	20 4c 24	jsr $244c			jsr 	IFloatSetByte
.2277	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.2279	20 ea 1e	jsr $1eea			jsr 	IFloatMultiply
.227c	a2 14		ldx #$14			ldx 	#IFR2
.227e	20 ec 23	jsr $23ec			jsr 	IFloatCopyToRegister
.2281	20 4a 21	jsr $214a			jsr 	IFloatIntegerR0 			; get integer part of R0
.2284	ad 52 04	lda $0452			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2287	c9 03		cmp #$03			cmp 	#3
.2289	f0 16		beq $22a1			beq 	_IFFSExitStripZero
.228b	ad 52 04	lda $0452			lda 	IFloatDecimalCount 			; written the DP yet ?
.228e	d0 05		bne $2295			bne 	_IFloatNotFirst
.2290	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2292	20 da 24	jsr $24da			jsr 	IFloatBufferWrite
.2295					_IFloatNotFirst:
.2295	ee 52 04	inc $0452			inc 	IFloatDecimalCount
.2298	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.229a	09 30		ora #$30			ora 	#"0"						; ASCII
.229c	20 da 24	jsr $24da			jsr 	IFloatBufferWrite 			; write to the buffer.
.229f	80 bf		bra $2260			bra 	_IFloatFracLoop
.22a1					_IFFSExitStripZero:
.22a1	20 e9 24	jsr $24e9			jsr 	IFloatStripTrailingZeros
.22a4					_IFFSExit:
.22a4	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.22a6	20 ba 23	jsr $23ba			jsr 	IFloatPullRx
.22a9	20 d2 24	jsr $24d2			jsr 	IFloatGetBufferAddress
.22ac	18		clc				clc
.22ad	60		rts				rts
.0452					IFloatDecimalCount:
>0452							.fill 	1
.22ae					IFloatStringToFloatR0:
.22ae	8d 53 04	sta $0453			sta 	IFCount 					; save it out.
.22b1	86 0a		stx $0a				stx 	iTemp0
.22b3	84 0b		sty $0b				sty 	iTemp0+1
.22b5	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.22b7	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.22ba	9c 54 04	stz $0454			stz 	IFSignFlag 					; clear the sign flag
.22bd	20 4a 23	jsr $234a			jsr 	IFSTFGetNext 				; get first
.22c0	f0 1b		beq $22dd			beq 	_IFSTFFail 					; no character
.22c2	90 10		bcc $22d4			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.22c4	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.22c6	d0 15		bne $22dd			bne 	_IFSTFFail
.22c8	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.22ca	8d 54 04	sta $0454			sta 	IFSignFlag
.22cd					_IFSTFLoop:
.22cd	20 4a 23	jsr $234a			jsr 	IFSTFGetNext 				; get next
.22d0	b0 0b		bcs $22dd			bcs 	_IFSTFFail 					; bad character.
.22d2	f0 11		beq $22e5			beq 	_IFSTFExit 					; end of data
.22d4					_IFSTFHaveChar:
.22d4	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.22d6	f0 08		beq $22e0			beq 	_IFSTFDecimal
.22d8	20 6e 23	jsr $236e			jsr 	IFSTFAddR0 					; add number in
.22db	80 f0		bra $22cd			bra 	_IFSTFLoop 					; keep going until . or end.
.22dd					_IFSTFFail:
.22dd	38		sec				sec
.22de	80 0d		bra $22ed			bra 	_IFSTFReturn
.22e0					_IFSTFDecimal:
.22e0	20 f5 22	jsr $22f5			jsr 	IFSTFDecimal 				; call the decimal places code.
.22e3	b0 08		bcs $22ed			bcs 	_IFSTFReturn 				; error
.22e5					_IFSTFExit:
.22e5	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.22e7	0d 54 04	ora $0454			ora 	IFSignFlag
.22ea	85 0f		sta $0f				sta 	IFR0+IExp
.22ec	18		clc				clc
.22ed					_IFSTFReturn:
.22ed	60		rts				rts
.22ee					IFloatAddDecimalToR0:
.22ee	8d 53 04	sta $0453			sta 	IFCount 					; save it out.
.22f1	86 0a		stx $0a				stx 	iTemp0
.22f3	84 0b		sty $0b				sty 	iTemp0+1
.22f5					IFSTFDecimal:
.22f5	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.22f7	20 99 23	jsr $2399			jsr 	IFloatPushRx
.22fa	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.22fc	20 4a 24	jsr $244a			jsr 	IFloatSetZero
.22ff	9c 55 04	stz $0455			stz 	IFDecimalPlaces
.2302					_IFSTDLoop:
.2302	20 4a 23	jsr $234a			jsr 	IFSTFGetNext 				; get next
.2305	b0 41		bcs $2348			bcs 	_IFSTFFail2 				; bad character.
.2307	f0 11		beq $231a			beq 	_IFSTFComplete 				; end of data, work out the result.
.2309	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.230b	f0 39		beq $2346			beq 	_IFSTFExit2
.230d	20 6e 23	jsr $236e			jsr 	IFSTFAddR0 					; add number in
.2310	ee 55 04	inc $0455			inc 	IFDecimalPlaces 			; count decimals
.2313	ad 55 04	lda $0455			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2316	c9 03		cmp #$03			cmp 	#3
.2318	90 e8		bcc $2302			bcc 	_IFSTDLoop
.231a					_IFSTFComplete:
.231a	ad 55 04	lda $0455			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.231d	f0 27		beq $2346			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.231f	3a		dec a				dec 	a 							; table indexed from 1.
.2320	0a		asl a				asl 	a
.2321	0a		asl a				asl 	a
.2322	aa		tax				tax
.2323	bd 85 23	lda $2385,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2326	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2328	bd 86 23	lda $2386,x			lda 	TableTen+1,x
.232b	85 11		sta $11				sta  	IFR1+IM1
.232d	bd 87 23	lda $2387,x			lda 	TableTen+2,x
.2330	85 12		sta $12				sta  	IFR1+IM2
.2332	bd 88 23	lda $2388,x			lda 	TableTen+3,x
.2335	85 13		sta $13				sta  	IFR1+IExp
.2337	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2339	20 ea 1e	jsr $1eea			jsr 	IFloatMultiply
.233c	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.233e	20 ba 23	jsr $23ba			jsr 	IFloatPullRx
.2341	a2 10		ldx #$10			ldx 	#IFR1
.2343	20 40 1e	jsr $1e40			jsr 	IFloatAdd
.2346					_IFSTFExit2:
.2346	18		clc				clc
.2347	60		rts				rts
.2348					_IFSTFFail2:
.2348	38		sec				sec
.2349	60		rts				rts
.234a					IFSTFGetNext:
.234a	ad 53 04	lda $0453			lda 	IFCount  					; if count is zero, return with Z set.
.234d	f0 19		beq $2368			beq 	_IFSTFReturnOk
.234f	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2351	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2353	d0 02		bne $2357			bne 	_IFSTFGNNoCarry
.2355	e6 0b		inc $0b				inc 	iTemp0+1
.2357					_IFSTFGNNoCarry:
.2357	ce 53 04	dec $0453			dec 	IFCount 					; dec count.
.235a	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.235c	f0 08		beq $2366			beq 	_IFSTFGOkay
.235e	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2360	90 08		bcc $236a			bcc 	_IFSTFGFail
.2362	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2364	b0 04		bcs $236a			bcs 	_IFSTFGFail
.2366					_IFSTFGOkay:
.2366	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2368					_IFSTFReturnOk:
.2368	18		clc				clc
.2369	60		rts				rts
.236a					_IFSTFGFail:
.236a	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.236c	38		sec				sec
.236d	60		rts				rts
.236e					IFSTFAddR0:
.236e	29 0f		and #$0f			and 	#15 						; to int value
.2370	48		pha				pha 								; save it.
.2371	a9 0a		lda #$0a			lda 	#10
.2373	a2 10		ldx #$10			ldx 	#IFR1
.2375	20 4c 24	jsr $244c			jsr 	IFloatSetByte
.2378	20 ea 1e	jsr $1eea			jsr 	IFloatMultiply
.237b	68		pla				pla
.237c	a2 10		ldx #$10			ldx 	#IFR1
.237e	20 4c 24	jsr $244c			jsr 	IFloatSetByte
.2381	20 40 1e	jsr $1e40			jsr 	IFloatAdd
.2384	60		rts				rts
.0453					IFCount:
>0453							.fill 	1
.0454					IFSignFlag:
>0454							.fill 	1
.0455					IFDecimalPlaces:
>0455							.fill 	1
.2385					TableTen:
>2385	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2389	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>238d	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2391	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2395	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2399					IFloatPushRx:
.2399	5a		phy				phy
.239a	ac 56 04	ldy $0456			ldy 	IFStackIndex
.239d	b5 00		lda $00,x			lda 	IM0,x
.239f	99 57 04	sta $0457,y			sta 	IFStack,y
.23a2	b5 01		lda $01,x			lda 	IM1,x
.23a4	99 58 04	sta $0458,y			sta 	IFStack+1,y
.23a7	b5 02		lda $02,x			lda 	IM2,x
.23a9	99 59 04	sta $0459,y			sta 	IFStack+2,y
.23ac	b5 03		lda $03,x			lda 	IExp,x
.23ae	99 5a 04	sta $045a,y			sta 	IFStack+3,y
.23b1	c8		iny				iny
.23b2	c8		iny				iny
.23b3	c8		iny				iny
.23b4	c8		iny				iny
.23b5	8c 56 04	sty $0456			sty 	IFStackIndex
.23b8	7a		ply				ply
.23b9	60		rts				rts
.23ba					IFloatPullRx:
.23ba	5a		phy				phy
.23bb	ac 56 04	ldy $0456			ldy 	IFStackIndex
.23be	88		dey				dey
.23bf	88		dey				dey
.23c0	88		dey				dey
.23c1	88		dey				dey
.23c2	b9 57 04	lda $0457,y			lda 	IFStack,y
.23c5	95 00		sta $00,x			sta 	IM0,x
.23c7	b9 58 04	lda $0458,y			lda 	IFStack+1,y
.23ca	95 01		sta $01,x			sta 	IM1,x
.23cc	b9 59 04	lda $0459,y			lda 	IFStack+2,y
.23cf	95 02		sta $02,x			sta 	IM2,x
.23d1	b9 5a 04	lda $045a,y			lda 	IFStack+3,y
.23d4	95 03		sta $03,x			sta 	IExp,x
.23d6	8c 56 04	sty $0456			sty 	IFStackIndex
.23d9	7a		ply				ply
.23da	60		rts				rts
.0456					IFStackIndex:
>0456							.fill 	1
.0457					IFStack:
>0457							.fill 	16*4
.23db					IFloatCopyFromRegister:
.23db	b5 00		lda $00,x			lda 	0,x
.23dd	85 0c		sta $0c				sta 	IFR0
.23df	b5 01		lda $01,x			lda 	1,x
.23e1	85 0d		sta $0d				sta 	IFR0+1
.23e3	b5 02		lda $02,x			lda 	2,x
.23e5	85 0e		sta $0e				sta 	IFR0+2
.23e7	b5 03		lda $03,x			lda 	3,x
.23e9	85 0f		sta $0f				sta 	IFR0+3
.23eb	60		rts				rts
.23ec					IFloatCopyToRegister:
.23ec	a5 0c		lda $0c				lda 	IFR0
.23ee	95 00		sta $00,x			sta 	0,x
.23f0	a5 0d		lda $0d				lda 	IFR0+1
.23f2	95 01		sta $01,x			sta 	1,x
.23f4	a5 0e		lda $0e				lda 	IFR0+2
.23f6	95 02		sta $02,x			sta 	2,x
.23f8	a5 0f		lda $0f				lda 	IFR0+3
.23fa	95 03		sta $03,x			sta 	3,x
.23fc	60		rts				rts
.23fd					IFloatLoadInline:
.23fd	68		pla				pla 								; pop address off to iTemp0
.23fe	85 0a		sta $0a				sta 	iTemp0
.2400	68		pla				pla
.2401	85 0b		sta $0b				sta 	iTemp0+1
.2403	a0 01		ldy #$01			ldy 	#1
.2405	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2407	95 00		sta $00,x			sta 	0,x
.2409	c8		iny				iny
.240a	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.240c	95 01		sta $01,x			sta 	1,x
.240e	c8		iny				iny
.240f	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2411	95 02		sta $02,x			sta 	2,x
.2413	c8		iny				iny
.2414	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2416	95 03		sta $03,x			sta 	3,x
.2418	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2419	a5 0a		lda $0a				lda 	iTemp0
.241b	69 05		adc #$05			adc 	#5
.241d	85 0a		sta $0a				sta 	iTemp0
.241f	90 02		bcc $2423			bcc 	_IFLINoCarry
.2421	e6 0b		inc $0b				inc 	iTemp0+1
.2423					_IFLINoCarry:
.2423	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2426					IFloatMultiply8BitRx:
.2426	5a		phy		        phy
.2427	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2429	a4 0c		ldy $0c		        ldy     IFR0+IM0
.242b	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.242c	85 0c		sta $0c		        sta     IFR0+IM0
.242e	84 0d		sty $0d		        sty     IFR0+IM1
.2430	a9 00		lda #$00	        lda     #0
.2432	a0 08		ldy #$08	        ldy     #8
.2434					_IFMLoop:
.2434	90 03		bcc $2439	        bcc     _IFMNoAdd
.2436	18		clc		        clc
.2437	65 0d		adc $0d		        adc     IFR0+IM1
.2439					_IFMNoAdd:
.2439	6a		ror a		        ror     a
.243a	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.243c	88		dey		        dey
.243d	d0 f5		bne $2434	        bne     _IFMLoop
.243f	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2441	7a		ply		        ply
.2442	60		rts		        rts
.2443					IFloatCheckZero:
.2443	b5 00		lda $00,x			lda 	IM0,x
.2445	15 01		ora $01,x			ora 	IM1,x
.2447	15 02		ora $02,x			ora 	IM2,x
.2449	60		rts				rts
.244a					IFloatSetZero:
.244a	a9 00		lda #$00			lda 	#0
.244c					IFloatSetByte:
.244c	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.244e	74 01		stz $01,x			stz 	IM1,x
.2450	74 02		stz $02,x			stz 	IM2,x
.2452	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2454	60		rts				rts
.2455					IFloatNegate:
.2455	b5 03		lda $03,x			lda 	IExp,x
.2457	49 40		eor #$40			eor 	#IFSign
.2459	95 03		sta $03,x			sta 	IExp,x
.245b	18		clc				clc
.245c	60		rts				rts
.245d					IFloatMantissaNegate:
.245d	38		sec				sec
.245e	a9 00		lda #$00			lda 	#0
.2460	f5 00		sbc $00,x			sbc 	IM0,x
.2462	95 00		sta $00,x			sta 	IM0,x
.2464	a9 00		lda #$00			lda 	#0
.2466	f5 01		sbc $01,x			sbc 	IM1,x
.2468	95 01		sta $01,x			sta 	IM1,x
.246a	a9 00		lda #$00			lda 	#0
.246c	f5 02		sbc $02,x			sbc 	IM2,x
.246e	95 02		sta $02,x			sta 	IM2,x
.2470	60		rts				rts
.2471					IFloatShiftLeft:
.2471	18		clc				clc
.2472					IFloatRotateLeft:
.2472	36 00		rol $00,x			rol 	IM0,x
.2474	36 01		rol $01,x			rol 	IM1,x
.2476	36 02		rol $02,x			rol 	IM2,x
.2478	60		rts				rts
.2479					IFloatShiftRight:
.2479	18		clc				clc
.247a					IFloatRotateRight:
.247a	76 02		ror $02,x			ror 	IM2,x
.247c	76 01		ror $01,x			ror 	IM1,x
.247e	76 00		ror $00,x			ror 	IM0,x
.2480	60		rts				rts
.2481					IFloatNormalise:
.2481	20 43 24	jsr $2443			jsr 	IFloatCheckZero 			; is it zero
.2484	f0 18		beq $249e			beq 	_IFNExitZero 				; if so exit
.2486					_IFNLoop:
.2486	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2488	29 c0		and #$c0			and 	#$C0
.248a	c9 40		cmp #$40			cmp 	#$40
.248c	f0 13		beq $24a1			beq 	_IFNExitOkay 				; if so , then we are done.
.248e	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2490	29 3f		and #$3f			and 	#$3F
.2492	c9 20		cmp #$20			cmp 	#$20
.2494	f0 0b		beq $24a1			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2496	20 b7 24	jsr $24b7			jsr 	IFloatDecExponent
.2499	20 71 24	jsr $2471			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.249c	80 e8		bra $2486			bra 	_IFNLoop
.249e					_IFNExitZero:
.249e	20 4a 24	jsr $244a			jsr 	IFloatSetZero 				; set the result to zero
.24a1					_IFNExitOkay:
.24a1	18		clc				clc  								; return with CC.
.24a2	60		rts				rts
.24a3					IFloatIncExponent:
.24a3	b5 03		lda $03,x			lda 	IExp,x
.24a5	48		pha				pha
.24a6	29 c0		and #$c0			and 	#$C0
.24a8	8d 97 04	sta $0497			sta 	IFXTemp
.24ab	68		pla				pla
.24ac	1a		inc a				inc 	a
.24ad	29 3f		and #$3f			and 	#$3F
.24af	48		pha				pha
.24b0	0d 97 04	ora $0497			ora 	IFXTemp
.24b3	95 03		sta $03,x			sta 	IExp,x
.24b5	68		pla				pla
.24b6	60		rts				rts
.24b7					IFloatDecExponent:
.24b7	b5 03		lda $03,x			lda 	IExp,x
.24b9	48		pha				pha
.24ba	29 c0		and #$c0			and 	#$C0
.24bc	8d 97 04	sta $0497			sta 	IFXTemp
.24bf	68		pla				pla
.24c0	3a		dec a				dec 	a
.24c1	29 3f		and #$3f			and 	#$3F
.24c3	48		pha				pha
.24c4	0d 97 04	ora $0497			ora 	IFXTemp
.24c7	95 03		sta $03,x			sta 	IExp,x
.24c9	68		pla				pla
.24ca	60		rts				rts
.0497					IFXTemp:
>0497							.fill 	1
.24cb					IFloatBufferReset:
.24cb	9c 98 04	stz $0498			stz 	IFBufferCount
.24ce	9c 99 04	stz $0499			stz 	IFBuffer
.24d1	60		rts				rts
.24d2					IFloatGetBufferAddress:
.24d2	a0 04		ldy #$04			ldy 	#(IFBuffer >> 8)
.24d4	a2 99		ldx #$99			ldx 	#(IFBuffer & $FF)
.24d6	ad 98 04	lda $0498			lda 	IFBufferCount
.24d9	60		rts				rts
.24da					IFloatBufferWrite:
.24da	da		phx				phx
.24db	ae 98 04	ldx $0498			ldx 	IFBufferCount
.24de	9d 99 04	sta $0499,x			sta 	IFBuffer,x
.24e1	9e 9a 04	stz $049a,x			stz 	IFBuffer+1,x
.24e4	ee 98 04	inc $0498			inc 	IFBufferCount
.24e7	fa		plx				plx
.24e8	60		rts				rts
.24e9					IFloatStripTrailingZeros:
.24e9	ae 98 04	ldx $0498			ldx 	IFBufferCount
.24ec	bd 98 04	lda $0498,x			lda 	IFBuffer-1,x
.24ef	c9 30		cmp #$30			cmp		#"0"
.24f1	d0 0f		bne $2502			bne 	_IFSTExit
.24f3	bd 97 04	lda $0497,x			lda 	IFBuffer-2,x
.24f6	c9 2e		cmp #$2e			cmp 	#"."
.24f8	f0 08		beq $2502			beq 	_IFSTExit
.24fa	ce 98 04	dec $0498			dec 	IFBufferCount
.24fd	9e 98 04	stz $0498,x			stz 	IFBuffer-1,x
.2500	80 e7		bra $24e9			bra 	IFloatStripTrailingZeros
.2502					_IFSTExit:
.2502	60		rts				rts
.0498					IFBufferCount:
>0498							.fill 	1
.0499					IFBuffer:
>0499							.fill 	25
.2503					IFloatCheck:
.2503	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2505	09 40		ora #$40			ora 	#IFSign
.2507	85 0f		sta $0f				sta 	IFR0+IExp
.2509	20 40 1e	jsr $1e40			jsr 	IFloatAdd 					; add allowed to error.
.250c	a2 0c		ldx #$0c			ldx 	#IFR0
.250e	20 43 24	jsr $2443			jsr 	IFloatCheckZero 			; error if < 0
.2511	f0 06		beq $2519			beq 	_IFAOkay
.2513	a5 0f		lda $0f				lda 	IFR0+IExp
.2515	29 40		and #$40			and 	#IFSign
.2517	d0 01		bne $251a			bne 	_IFAFail
.2519					_IFAOkay:
.2519	60		rts				rts
.251a					_IFAFail:
.251a	38		sec				sec
.251b	68		pla				pla 								; get address - 2
.251c	e9 02		sbc #$02			sbc 	#2
.251e	aa		tax				tax
.251f	68		pla				pla
.2520	e9 00		sbc #$00			sbc 	#0
.2522	a8		tay				tay
.2523	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2525					_IFAStop:
>2525	db						.byte 	$DB 						; display an error AA ADR ADR
.2526	80 fd		bra $2525			bra 	_IFAStop

;******  Return to file: basic.asm

.2528					NotImplemented:
.2528	a9 ff		lda #$ff			lda 	#$FF
.252a	80 04		bra $2530			bra 	EnterDbg
.252c					ErrorHandler:
.252c	fa		plx				plx
.252d	7a		ply				ply
.252e	a9 ee		lda #$ee			lda 	#$EE
.2530					EnterDbg:
>2530	db						.byte 	$DB
.2531	4c 30 25	jmp $2530			jmp 	EnterDbg

;******  End of listing
