
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Mon May 29 09:18:53 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 e5 1a	jsr $1ae5			jsr 	PGMSetBaseAddress
.1007	20 39 3b	jsr $3b39			jsr 	IFInitialise
.100a	4c 0f 1b	jmp $1b0f			jmp 	TestCode
.100d	4c a0 10	jmp $10a0			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a7					PR_STANDARD_LAST = $a7
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d7					PR_UNARY_FIRST = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1010					Command_ASSERT:
.1010	20 ee 13	jsr $13ee			jsr 	EXPEvalNumber
.1013	a2 0c		ldx #$0c			ldx 	#IFR0
.1015	20 47 41	jsr $4147			jsr 	IFloatCheckZero
.1018	f0 01		beq $101b			beq 	_CAFail
.101a	60		rts				rts
.101b					_CAFail:
.101b	4c 3e 11	jmp $113e		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101e					Command_CLEAR:
.101e	20 cf 3a	jsr $3acf			jsr 	StringSystemInitialise
.1021	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.1022					NoExec01:
.1022					NoExec02:
.1022					NoExec03:
.1022					NoExec04:
.1022					NoExec05:
.1022					NoExec06:
.1022					NoExec07:
.1022	4c ed 10	jmp $10ed		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1025					Command_Print:
.1025					Command_IP_Main:
.1025	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1026					_CPLoop:
.1026	08		php				php 								; save last action flag
.1027	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1029	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.102b	f0 3e		beq $106b			beq 	_CPExit 					; without consuming
.102d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.102f	f0 3a		beq $106b			beq 	_CPExit
.1031	68		pla				pla 								; throw last action flag
.1032	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1034	c8		iny				iny
.1035	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1037	f0 2f		beq $1068			beq 	_CPContinueWithSameLine
.1039	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.103b	f0 26		beq $1063			beq 	_CPTab
.103d	88		dey				dey 								; undo the get.
.103e	20 ae 13	jsr $13ae			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1041	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1043	10 14		bpl $1059			bpl 	_CPNumber
.1045	5a		phy				phy
.1046	18		clc				clc 								; string address to YX
.1047	a5 0c		lda $0c				lda 	IFR0+IM0
.1049	aa		tax				tax
.104a	a5 0d		lda $0d				lda 	IFR0+IM1
.104c	a8		tay				tay
.104d	e8		inx				inx 								; point to 1st character
.104e	d0 01		bne $1051			bne 	_CPNoCarry
.1050	c8		iny				iny
.1051					_CPNoCarry:
.1051	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1053	20 74 10	jsr $1074			jsr 	CPPrintAYX 					; print AYX
.1056	7a		ply				ply
.1057	80 cc		bra $1025			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1059					_CPNumber:
.1059	5a		phy				phy
.105a	20 4b 3f	jsr $3f4b			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.105d	20 74 10	jsr $1074			jsr 	CPPrintAYX 					; print AYX
.1060	7a		ply				ply
.1061	80 c2		bra $1025			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1063					_CPTab:
.1063	a9 09		lda #$09			lda 	#9 							; print TAB
.1065	20 87 10	jsr $1087			jsr 	CPPrintA
.1068					_CPContinueWithSameLine:
.1068	38		sec				sec 								; loop round with carry set, which
.1069	80 bb		bra $1026			bra 	_CPLoop 					; will inhibit final CR
.106b					_CPExit:
.106b	28		plp				plp 								; get last action flag
.106c	b0 05		bcs $1073			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.106e	a9 0d		lda #$0d			lda 	#13 						; print new line
.1070	20 87 10	jsr $1087			jsr 	CPPrintA
.1073					_CPExit2:
.1073	60		rts				rts
.1074					CPPrintAYX:
.1074	86 1e		stx $1e				stx 	zTemp0
.1076	84 1f		sty $1f				sty 	zTemp0+1
.1078	aa		tax				tax
.1079	f0 0b		beq $1086			beq 	_CPPrintExit
.107b	a0 00		ldy #$00			ldy 	#0
.107d					_CPPrintAYXLoop:
.107d	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.107f	20 87 10	jsr $1087			jsr 	CPPrintA
.1082	c8		iny				iny
.1083	ca		dex				dex
.1084	d0 f7		bne $107d			bne 	_CPPrintAYXLoop
.1086					_CPPrintExit:
.1086	60		rts				rts
.1087					CPPrintA:
.1087	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.108a					Command_NEW:
.108a	20 ec 1a	jsr $1aec			jsr 	PGMNewProgram
.108d	20 1e 10	jsr $101e			jsr 	Command_CLEAR
.1090	4c e7 10	jmp $10e7			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1093					Command_REM:
.1093					Command_REM2:
.1093	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1095	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1097	d0 06		bne $109f			bne 	_CRExit
.1099	c8		iny				iny 								; skip over it, it's a comment.
.109a	98		tya				tya
.109b	38		sec				sec
.109c	71 1c		adc ($1c),y			adc 	(codePtr),y
.109e	a8		tay				tay
.109f					_CRExit:
.109f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.10a0					Command_RUN:
.10a0	20 1e 10	jsr $101e			jsr 	Command_CLEAR 				; clear everything out.
.10a3	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.10a6	85 1d		sta $1d				sta 	codePtr+1
.10a8	64 1c		stz $1c				stz 	codePtr
.10aa	80 0b		bra $10b7			bra 	RUNNewLine
.10ac					RUNEndOfLine:
.10ac	18		clc				clc 								; advance to next line.
.10ad	b2 1c		lda ($1c)			lda 	(codePtr)
.10af	65 1c		adc $1c				adc 	codePtr
.10b1	85 1c		sta $1c				sta 	codePtr
.10b3	90 02		bcc $10b7			bcc 	_RELNoCarry
.10b5	e6 1d		inc $1d				inc 	codePtr+1
.10b7					_RELNoCarry:
.10b7					RUNNewLine:
.10b7	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.10b9	9a		txs				txs
.10ba	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.10bc	f0 29		beq $10e7			beq 	Command_END
.10be	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.10c0					RUNNewCommand:
.10c0	9c 4a 04	stz $044a			stz 	stringInitialised 			; reset string system.
.10c3	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.10c5	10 1a		bpl $10e1			bpl		_RUNNotToken 				; probably an identifier
.10c7	c8		iny				iny 								; consume token
.10c8	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.10ca	f0 f4		beq $10c0			beq 	RUNNewCommand
.10cc	c9 a8		cmp #$a8			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.10ce	b0 0e		bcs $10de			bcs 	_RUNSyntax
.10d0	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.10d2	90 0a		bcc $10de			bcc 	_RUNSyntax
.10d4	0a		asl a				asl 	a 							; double into X.
.10d5	aa		tax				tax
.10d6	20 db 10	jsr $10db			jsr 	_RUNDispatchMain			; call the main dispatcher
.10d9	80 e5		bra $10c0			bra 	RUNNewCommand
.10db					_RUNDispatchMain:
.10db	7c 02 18	jmp ($1802,x)			jmp 	(VectorTable,x)
.10de					_RUNSyntax:
.10de	4c ed 10	jmp $10ed		jmp	ErrorV_syntax
.10e1					_RUNNotToken:
.10e1	4c 2b 11	jmp $112b		jmp	ErrorV_unimplemented
.10e4					Command_Shift_Handler:
.10e4	4c 2b 11	jmp $112b		jmp	ErrorV_unimplemented
.10e7					Command_END:
.10e7	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.10ea					Command_STOP:
.10ea	4c 88 11	jmp $1188		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.10ed					ErrorV_syntax:
.10ed	20 30 42	jsr $4230		jsr	ErrorHandler
>10f0	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>10f8	72 72 6f 72 00
.10fd					ErrorV_range:
.10fd	20 30 42	jsr $4230		jsr	ErrorHandler
>1100	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>1108	61 6e 67 65 00
.110d					ErrorV_value:
.110d	20 30 42	jsr $4230		jsr	ErrorHandler
>1110	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>1118	65 00
.111a					ErrorV_type:
.111a	20 30 42	jsr $4230		jsr	ErrorHandler
>111d	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>1125	6d 61 74 63 68 00
.112b					ErrorV_unimplemented:
.112b	20 30 42	jsr $4230		jsr	ErrorHandler
>112e	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>1136	65 6d 65 6e 74 65 64 00
.113e					ErrorV_assert:
.113e	20 30 42	jsr $4230		jsr	ErrorHandler
>1141	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>1149	61 69 6c 00
.114d					ErrorV_internal:
.114d	20 30 42	jsr $4230		jsr	ErrorHandler
>1150	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>1158	20 45 72 72 6f 72 00
.115f					ErrorV_divzero:
.115f	20 30 42	jsr $4230		jsr	ErrorHandler
>1162	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>116a	79 20 5a 65 72 6f 00
.1171					ErrorV_structure:
.1171	20 30 42	jsr $4230		jsr	ErrorHandler
>1174	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>117c	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1188					ErrorV_stop:
.1188	20 30 42	jsr $4230		jsr	ErrorHandler
>118b	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>1193	53 74 6f 70 70 65 64 00
.119b					ErrorV_data:
.119b	20 30 42	jsr $4230		jsr	ErrorHandler
>119e	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>11a6	61 74 61 00
.11aa					ErrorV_redefine:
.11aa	20 30 42	jsr $4230		jsr	ErrorHandler
>11ad	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>11b5	64 65 66 69 6e 65 64 00
.11bd					ErrorV_index:
.11bd	20 30 42	jsr $4230		jsr	ErrorHandler
>11c0	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>11c8	79 20 49 6e 64 65 78 00
.11d0					ErrorV_memory:
.11d0	20 30 42	jsr $4230		jsr	ErrorHandler
>11d3	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>11db	65 6d 6f 72 79 00
.11e1					ErrorV_uninitialised:
.11e1	20 30 42	jsr $4230		jsr	ErrorHandler
>11e4	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>11ec	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.11fb					ErrorV_string:
.11fb	20 30 42	jsr $4230		jsr	ErrorHandler
>11fe	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>1206	6e 67 20 4c 65 6e 67 74 68 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.1210					ERRCheckLParen:
.1210	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1212	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.1214	d0 18		bne $122e			bne 	ERRSyntaxError
.1216	c8		iny				iny
.1217	60		rts				rts
.1218					ERRCheckRParen:
.1218	b1 1c		lda ($1c),y			lda 	(codePtr),y
.121a	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.121c	d0 10		bne $122e			bne 	ERRSyntaxError
.121e	c8		iny				iny
.121f	60		rts				rts
.1220					ERRCheckComma:
.1220	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1222	c9 99		cmp #$99			cmp 	#PR_COMMA
.1224	d0 08		bne $122e			bne 	ERRSyntaxError
.1226	c8		iny				iny
.1227	60		rts				rts
.1228					ERRCheckA:
.1228	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.122a	d0 02		bne $122e			bne 	ERRSyntaxError
.122c	c8		iny				iny
.122d	60		rts				rts
.122e					ERRSyntaxError:
.122e	4c ed 10	jmp $10ed		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1231					EXPBinAdd:
.1231	24 0f		bit $0f				bit 	IFR0+IExp
.1233	30 6f		bmi $12a4			bmi 	EXPConcatenate
.1235	a2 10		ldx #$10			ldx 	#IFR1
.1237	4c 44 3b	jmp $3b44			jmp 	IFloatAdd
.123a					EXPBinSub:
.123a	24 0f		bit $0f				bit 	IFR0+IExp
.123c	30 3f		bmi $127d			bmi 	EXPTypeError
.123e	a2 10		ldx #$10			ldx 	#IFR1
.1240	4c 3d 3b	jmp $3b3d			jmp 	IFloatSubtract
.1243					EXPBinMul:
.1243	24 0f		bit $0f				bit 	IFR0+IExp
.1245	30 36		bmi $127d			bmi 	EXPTypeError
.1247	a2 10		ldx #$10			ldx 	#IFR1
.1249	4c ee 3b	jmp $3bee			jmp 	IFloatMultiply
.124c					EXPBinFDiv:
.124c	24 0f		bit $0f				bit 	IFR0+IExp
.124e	30 2d		bmi $127d			bmi 	EXPTypeError
.1250	a2 10		ldx #$10			ldx 	#IFR1
.1252	20 71 3e	jsr $3e71			jsr 	IFloatDivideFloat
.1255	b0 0f		bcs $1266			bcs 	EXPDZero
.1257	60		rts				rts
.1258					EXPBinIDiv:
.1258	24 0f		bit $0f				bit 	IFR0+IExp
.125a	30 21		bmi $127d			bmi 	EXPTypeError
.125c	a2 10		ldx #$10			ldx 	#IFR1
.125e	20 71 3e	jsr $3e71			jsr 	IFloatDivideFloat
.1261	b0 03		bcs $1266			bcs 	EXPDZero
.1263	4c 4e 3e	jmp $3e4e			jmp 	IFloatIntegerR0
.1266					EXPDZero:
.1266	4c 5f 11	jmp $115f		jmp	ErrorV_divzero
.1269					EXPBinIMod:
.1269	24 0f		bit $0f				bit 	IFR0+IExp
.126b	30 10		bmi $127d			bmi 	EXPTypeError
.126d	a2 10		ldx #$10			ldx 	#IFR1
.126f	5a		phy				phy
.1270	20 86 3d	jsr $3d86			jsr 	IFPreProcessBitwise 		; set up everything.
.1273	d0 05		bne $127a			bne 	EXPDRange
.1275	20 bf 3c	jsr $3cbf			jsr 	IFloatModulusInteger
.1278	7a		ply				ply
.1279	60		rts				rts
.127a					EXPDRange:
.127a	4c fd 10	jmp $10fd		jmp	ErrorV_range
.127d					EXPTypeError:
.127d	4c 1a 11	jmp $111a		jmp	ErrorV_type
.1280					EXPBinAnd:
.1280	24 0f		bit $0f				bit 	IFR0+IExp
.1282	30 f9		bmi $127d			bmi 	EXPTypeError
.1284	a2 10		ldx #$10			ldx 	#IFR1
.1286	20 41 3d	jsr $3d41			jsr 	IFloatBitwiseAnd
.1289	b0 ef		bcs $127a			bcs 	EXPDRange
.128b	60		rts				rts
.128c					EXPBinOr:
.128c	24 0f		bit $0f				bit 	IFR0+IExp
.128e	30 ed		bmi $127d			bmi 	EXPTypeError
.1290	a2 10		ldx #$10			ldx 	#IFR1
.1292	20 58 3d	jsr $3d58			jsr 	IFloatBitwiseOr
.1295	b0 e3		bcs $127a			bcs 	EXPDRange
.1297	60		rts				rts
.1298					EXPBinXor:
.1298	24 0f		bit $0f				bit 	IFR0+IExp
.129a	30 e1		bmi $127d			bmi 	EXPTypeError
.129c	a2 10		ldx #$10			ldx 	#IFR1
.129e	20 6f 3d	jsr $3d6f			jsr 	IFloatBitwiseXor
.12a1	b0 d7		bcs $127a			bcs 	EXPDRange
.12a3	60		rts				rts
.12a4					EXPConcatenate:
.12a4	18		clc				clc
.12a5	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.12a7	72 10		adc ($10)			adc 	(IFR1)
.12a9	b0 2d		bcs $12d8			bcs 	_EXPCError
.12ab	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.12ad	da		phx				phx
.12ae	a6 0d		ldx $0d				ldx 	IFR0+1
.12b0	da		phx				phx
.12b1	20 f7 3a	jsr $3af7			jsr 	StringTempAllocate 			; allocate string, set up return
.12b4	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.12b6	a5 10		lda $10				lda 	IFR1
.12b8	20 c1 12	jsr $12c1			jsr 	_EXPCCopyXA
.12bb	fa		plx				plx 								; copy second string
.12bc	68		pla				pla
.12bd	20 c1 12	jsr $12c1			jsr 	_EXPCCopyXA
.12c0	60		rts				rts
.12c1					_EXPCCopyXA:
.12c1	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.12c3	85 1e		sta $1e				sta 	zTemp0
.12c5	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.12c7	f0 0e		beq $12d7			beq 	_EXPCCExit 					; nothing.
.12c9	aa		tax				tax 								; count
.12ca	5a		phy				phy 								; start positioin
.12cb	a0 01		ldy #$01			ldy 	#1
.12cd					_EXPCCLoop:
.12cd	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.12cf	20 2c 3b	jsr $3b2c			jsr 	StringTempWrite
.12d2	c8		iny				iny
.12d3	ca		dex				dex
.12d4	d0 f7		bne $12cd			bne 	_EXPCCLoop
.12d6	7a		ply				ply
.12d7					_EXPCCExit:
.12d7	60		rts				rts
.12d8					_EXPCError:
.12d8	4c fb 11	jmp $11fb		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.12db					EXPReturnTrue:
.12db	a2 0c		ldx #$0c			ldx 	#IFR0
.12dd	a9 01		lda #$01			lda 	#1
.12df	20 50 41	jsr $4150			jsr 	IFloatSetByte
.12e2	20 59 41	jsr $4159			jsr 	IFloatNegate
.12e5	60		rts				rts
.12e6					EXPReturnFalse:
.12e6	a2 0c		ldx #$0c			ldx 	#IFR0
.12e8	4c 4e 41	jmp $414e			jmp 	IFloatSetZero
.12eb					EXPCompareEqual:
.12eb	20 21 13	jsr $1321			jsr 	EXPCompareBaseCode
.12ee	c9 00		cmp #$00			cmp 	#0
.12f0	f0 e9		beq $12db			beq 	EXPReturnTrue
.12f2	80 f2		bra $12e6			bra 	EXPReturnFalse
.12f4					EXPCompareLess:
.12f4	20 21 13	jsr $1321			jsr 	EXPCompareBaseCode
.12f7	c9 ff		cmp #$ff			cmp 	#$FF
.12f9	f0 e0		beq $12db			beq 	EXPReturnTrue
.12fb	80 e9		bra $12e6			bra 	EXPReturnFalse
.12fd					EXPCompareGreater:
.12fd	20 21 13	jsr $1321			jsr 	EXPCompareBaseCode
.1300	c9 01		cmp #$01			cmp 	#1
.1302	f0 d7		beq $12db			beq 	EXPReturnTrue
.1304	80 e0		bra $12e6			bra 	EXPReturnFalse
.1306					EXPCompareNotEqual:
.1306	20 21 13	jsr $1321			jsr 	EXPCompareBaseCode
.1309	c9 00		cmp #$00			cmp 	#0
.130b	d0 ce		bne $12db			bne 	EXPReturnTrue
.130d	80 d7		bra $12e6			bra 	EXPReturnFalse
.130f					EXPCompareLessEqual:
.130f	20 21 13	jsr $1321			jsr 	EXPCompareBaseCode
.1312	c9 01		cmp #$01			cmp 	#1
.1314	d0 c5		bne $12db			bne 	EXPReturnTrue
.1316	80 ce		bra $12e6			bra 	EXPReturnFalse
.1318					EXPCompareGreaterEqual:
.1318	20 21 13	jsr $1321			jsr 	EXPCompareBaseCode
.131b	c9 ff		cmp #$ff			cmp 	#$FF
.131d	d0 bc		bne $12db			bne 	EXPReturnTrue
.131f	80 c5		bra $12e6			bra 	EXPReturnFalse
.1321					EXPCompareBaseCode:
.1321	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.1323	30 10		bmi $1335			bmi 	_EXCBCString
.1325	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.1327	20 1c 3e	jsr $3e1c			jsr 	IFloatCompare
.132a	a5 0c		lda $0c				lda 	IFR0+IM0
.132c	f0 06		beq $1334			beq 	_EXCBCExit 					; return 0 if zero
.132e	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.1330	50 02		bvc $1334			bvc 	_EXCBCExit
.1332	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1334					_EXCBCExit:
.1334	60		rts				rts
.1335					_EXCBCString:
.1335	5a		phy				phy
.1336	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.1338	d2 10		cmp ($10)			cmp 	(IFR1)
.133a	90 02		bcc $133e			bcc 	_EXCBCSmaller
.133c	b2 10		lda ($10)			lda 	(IFR1)
.133e					_EXCBCSmaller:
.133e	aa		tax				tax
.133f	f0 0d		beq $134e			beq 	_EXCBCMatches 				; if zero common length matches
.1341	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1343					_EXCBCCheckSmallerMatches:
.1343	c8		iny				iny 								; compare directly as far as common length
.1344	38		sec				sec
.1345	b1 10		lda ($10),y			lda 	(IFR1),y
.1347	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.1349	d0 08		bne $1353			bne 	_EXCBCExit2
.134b	ca		dex				dex
.134c	d0 f5		bne $1343			bne 	_EXCBCCheckSmallerMatches
.134e					_EXCBCMatches:
.134e	38		sec				sec
.134f	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.1351	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1353					_EXCBCExit2:
.1353	7a		ply				ply
.1354	c9 00		cmp #$00			cmp 	#0
.1356	f0 04		beq $135c			beq 	_EXCBCReturn
.1358	30 03		bmi $135d			bmi 	_EXCBCFF
.135a	a9 01		lda #$01			lda 	#1
.135c					_EXCBCReturn:
.135c	60		rts				rts
.135d					_EXCBCFF:
.135d	a9 ff		lda #$ff			lda 	#$FF
.135f	60		rts				rts
.1360					_EXCBCRange:
.1360	4c fd 10	jmp $10fd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1363					EXPBinLeft:
.1363	a9 ff		lda #$ff			lda 	#$FF
.1365	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.1368	4c 6e 13	jmp $136e			jmp 	EXPShiftCommon
.136b					EXPBinRight:
.136b	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.136e					EXPShiftCommon:
.136e	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.1370	05 13		ora $13				ora 	IFR1+IExp
.1372	29 7f		and #$7f			and 	#$7F
.1374	d0 35		bne $13ab			bne 	_EXPSRange
.1376	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1378	29 e0		and #$e0			and 	#$E0
.137a	05 0d		ora $0d				ora 	IFR0+IM1
.137c	05 0e		ora $0e				ora 	IFR0+IM2
.137e	d0 25		bne $13a5			bne 	_EXPSShiftZero 				; if so return zero
.1380	5a		phy				phy
.1381	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1383	29 1f		and #$1f			and 	#$1F
.1385	f0 17		beq $139e			beq 	_EXPSExit 					; exit if zero
.1387	a8		tay				tay
.1388					_EXPSLoop:
.1388	a2 10		ldx #$10			ldx 	#IFR1
.138a	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.138d	30 05		bmi $1394			bmi 	_EXPSShiftLeft
.138f	20 7d 41	jsr $417d			jsr 	IFloatShiftRight
.1392	80 07		bra $139b			bra 	_EXPSContinue
.1394					_EXPSShiftLeft:
.1394	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.1397	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1399	30 10		bmi $13ab			bmi 	_EXPSRange
.139b					_EXPSContinue:
.139b	88		dey				dey
.139c	d0 ea		bne $1388			bne 	_EXPSLoop
.139e					_EXPSExit:
.139e	a2 10		ldx #$10			ldx 	#IFR1
.13a0	20 df 40	jsr $40df			jsr 	IFloatCopyFromRegister
.13a3	7a		ply				ply
.13a4	60		rts				rts
.13a5					_EXPSShiftZero:
.13a5	a2 0c		ldx #$0c			ldx 	#IFR0
.13a7	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.13aa	60		rts				rts
.13ab					_EXPSRange:
.13ab	4c fd 10	jmp $10fd		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.13ae					EXPEvaluateExpression:
.13ae	a9 00		lda #$00			lda 	#0 							; current precedence
.13b0					EXPEvaluateExpressionPrecedenceA:
.13b0	48		pha				pha
.13b1	20 2b 14	jsr $142b			jsr 	EXPTermValueR0				; do first term.
.13b4					_EELoop:
.13b4	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.13b6	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.13b8	90 31		bcc $13eb			bcc 	_EEExit
.13ba	aa		tax				tax 								; access the precedence of the operator.
.13bb	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.13bc	dd 78 15	cmp $1578,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.13bf	b0 2b		bcs $13ec			bcs 	_EEExit2
.13c1	48		pha				pha 								; save current precedence.
.13c2	da		phx				phx 								; save operator
.13c3	c8		iny				iny 								; consume operator
.13c4	da		phx				phx
.13c5	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.13c7	20 9d 40	jsr $409d			jsr 	IFloatPushRx
.13ca	fa		plx				plx
.13cb	bd 78 15	lda $1578,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.13ce	20 b0 13	jsr $13b0			jsr 	EXPEvaluateExpressionPrecedenceA
.13d1	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.13d3	20 be 40	jsr $40be			jsr 	IFloatPullRx
.13d6	fa		plx				plx 								; operator
.13d7	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.13d9	45 13		eor $13				eor 	IFR1+IExp
.13db	30 08		bmi $13e5			bmi 	_EEType
.13dd					_EETypeOkay:
.13dd	8a		txa				txa
.13de	0a		asl a				asl 	a 							; double -> X
.13df	aa		tax				tax
.13e0	20 e8 13	jsr $13e8			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.13e3	80 cf		bra $13b4			bra 	_EELoop
.13e5					_EEType:
.13e5	4c 1a 11	jmp $111a		jmp	ErrorV_type
.13e8					_EECallBinary:
.13e8	7c 02 18	jmp ($1802,x)			jmp 	(VectorTable,x)
.13eb					_EEExit:
.13eb	68		pla				pla 								; throw precedence
.13ec					_EEExit2:
.13ec	18		clc				clc
.13ed	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.13ee					EXPEvalNumber:
.13ee	20 ae 13	jsr $13ae			jsr 	EXPEvaluateExpression
.13f1	24 0f		bit $0f				bit 	IFR0+IExp
.13f3	30 01		bmi $13f6			bmi 	EVUType
.13f5	60		rts				rts
.13f6					EVUType:
.13f6	4c 1a 11	jmp $111a		jmp	ErrorV_type
.13f9					EXPEvalInteger:
.13f9	20 ee 13	jsr $13ee			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.13fc	20 4e 3e	jsr $3e4e			jsr 	IFloatIntegerR0
.13ff	60		rts				rts
.1400					EXPEvalInteger16:
.1400	20 f9 13	jsr $13f9			jsr 	EXPEvalInteger
.1403	a5 0e		lda $0e				lda 	IFR0+IM2
.1405	d0 21		bne $1428			bne 	EVURange
.1407	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1409	a5 0c		lda $0c				lda 	IFR0+IM0
.140b	60		rts				rts
.140c					EXPEvalInteger8:
.140c	20 f9 13	jsr $13f9			jsr 	EXPEvalInteger
.140f	a5 0e		lda $0e				lda 	IFR0+IM2
.1411	05 0d		ora $0d				ora 	IFR0+IM1
.1413	d0 13		bne $1428			bne 	EVURange
.1415	a5 0c		lda $0c				lda 	IFR0+IM0
.1417	60		rts				rts
.1418					EXPEvalString:
.1418	20 ae 13	jsr $13ae			jsr 	EXPEvaluateExpression
.141b	24 0f		bit $0f				bit 	IFR0+IExp
.141d	10 d7		bpl $13f6			bpl 	EVUType
.141f	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1421	86 1f		stx $1f				stx 	zTemp0+1
.1423	a5 0c		lda $0c				lda 	IFR0+IM0
.1425	85 1e		sta $1e				sta 	zTemp0
.1427	60		rts				rts
.1428					EVURange:
.1428	4c fd 10	jmp $10fd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.142b					EXPTermValueR0:
.142b	20 34 14	jsr $1434			jsr 	EXPTermR0
.142e	90 03		bcc $1433			bcc 	_ETVNotReference
.1430	4c 2b 11	jmp $112b		jmp	ErrorV_unimplemented
.1433					_ETVNotReference:
.1433	60		rts				rts
.1434					EXPTermR0:
.1434	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.1436	30 10		bmi $1448			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1438	c8		iny				iny 								; consume element
.1439	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.143b	b0 08		bcs $1445			bcs 	_ETMIdentifier
.143d	20 6c 14	jsr $146c			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1440	20 9f 14	jsr $149f			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1443	18		clc				clc 								; return value
.1444	60		rts				rts
.1445					_ETMIdentifier:
.1445	4c 2b 11	jmp $112b		jmp	ErrorV_unimplemented
.1448					_ETMIsUnaryOrMinus:
.1448	c8		iny				iny 								; consume element
.1449	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.144b	d0 0a		bne $1457			bne 	_ETMCheckUnary
.144d	20 2b 14	jsr $142b			jsr 	EXPTermValueR0 				; get a term to negate
.1450	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1452	20 59 41	jsr $4159			jsr 	IFloatNegate
.1455	18		clc				clc
.1456	60		rts				rts
.1457					_ETMCheckUnary:
.1457	c9 d7		cmp #$d7			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1459	90 0e		bcc $1469			bcc 	_ETMUnarySyntax
.145b	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.145d	b0 0a		bcs $1469			bcs 	_ETMUnarySyntax
.145f	0a		asl a				asl 	a
.1460	aa		tax				tax
.1461	20 66 14	jsr $1466			jsr 	_ETMCallUnaryFunction
.1464	18		clc				clc
.1465	60		rts				rts
.1466					_ETMCallUnaryFunction:
.1466	7c 02 18	jmp ($1802,x)			jmp 	(VectorTable,x)
.1469					_ETMUnarySyntax:
.1469	4c ed 10	jmp $10ed		jmp	ErrorV_syntax
.146c					EXPExtractTokenisedInteger:
.146c	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.146e	64 0f		stz $0f				stz 	IFR0+IExp
.1470	64 0d		stz $0d				stz 	IFR0+IM1
.1472	64 0e		stz $0e				stz 	IFR0+IM2
.1474					_ETMConstant:
.1474	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1476	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1478	b0 24		bcs $149e			bcs 	_ETMCExit 					; no.
.147a	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.147c	a5 0d		lda $0d				lda 	IFR0+IM1
.147e	85 0e		sta $0e				sta 	IFR0+IM2
.1480	a5 0c		lda $0c				lda 	IFR0+IM0
.1482	85 0d		sta $0d				sta 	IFR0+IM1
.1484	64 0c		stz $0c				stz 	IFR0+IM0
.1486	8a		txa				txa
.1487	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1488	66 0e		ror $0e				ror 	IFR0+IM2
.148a	66 0d		ror $0d				ror 	IFR0+IM1
.148c	66 0c		ror $0c				ror 	IFR0+IM0
.148e	4a		lsr a				lsr 	a
.148f	66 0e		ror $0e				ror 	IFR0+IM2
.1491	66 0d		ror $0d				ror 	IFR0+IM1
.1493	66 0c		ror $0c				ror 	IFR0+IM0
.1495	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.1497	11 1c		ora ($1c),y			ora 	(codePtr),y
.1499	85 0c		sta $0c				sta 	IFR0+IM0
.149b	c8		iny				iny 								; consume, loop back
.149c	80 d6		bra $1474			bra 	_ETMConstant
.149e					_ETMCExit:
.149e	60		rts				rts
.149f					EXPCheckDecimalFollows:
.149f	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.14a1	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.14a3	d0 19		bne $14be			bne 	_ETMCDExit
.14a5	c8		iny				iny 								; consume token.
.14a6	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.14a8	5a		phy				phy									; save current position
.14a9	48		pha				pha 								; save count of chars.
.14aa	38		sec				sec 								; address into YX : y + codePtr+1
.14ab	98		tya				tya
.14ac	65 1c		adc $1c				adc 	codePtr
.14ae	aa		tax				tax
.14af	a5 1d		lda $1d				lda 	codePtr+1
.14b1	69 00		adc #$00			adc 	#0
.14b3	a8		tay				tay
.14b4	68		pla				pla 								; get count.
.14b5	20 f2 3f	jsr $3ff2			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.14b8	7a		ply				ply 								; go to next token.
.14b9	98		tya				tya
.14ba	38		sec				sec
.14bb	71 1c		adc ($1c),y			adc 	(codePtr),y
.14bd	a8		tay				tay
.14be					_ETMCDExit:
.14be	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.14bf					EXPUnaryAbs:
.14bf	20 ee 13	jsr $13ee			jsr 	EXPEvalNumber 					; number to R0
.14c2	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.14c5	20 92 3d	jsr $3d92			jsr 	IFloatAbsoluteR0
.14c8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.14c9					EXPUnaryAsc:
.14c9	20 18 14	jsr $1418			jsr 	EXPEvalString 					; string to R0, zTemp0
.14cc	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.14cf	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.14d1	f0 06		beq $14d9			beq 	_EXAZero 						; if so return 0
.14d3	5a		phy				phy 									; otherwise get first character
.14d4	a0 01		ldy #$01			ldy 	#1
.14d6	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.14d8	7a		ply				ply
.14d9					_EXAZero:
.14d9	a2 0c		ldx #$0c			ldx 	#IFR0
.14db	20 50 41	jsr $4150			jsr 	IFloatSetByte
.14de	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.14df					EXPUnaryChr:
.14df	20 0c 14	jsr $140c			jsr 	EXPEvalInteger8 				; expr
.14e2	48		pha				pha 									; push on stack
.14e3	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.14e6	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.14e8	20 f7 3a	jsr $3af7			jsr 	StringTempAllocate
.14eb	68		pla				pla
.14ec	20 2c 3b	jsr $3b2c			jsr 	StringTempWrite
.14ef	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.14f0					EXPUnaryDec:
.14f0	20 18 14	jsr $1418			jsr 	EXPEvalString 					; string to R0, zTemp0
.14f3	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.14f6	5a		phy				phy
.14f7	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.14f9	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.14fc	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.14fe	f0 3b		beq $153b			beq 	_EUDError 						; empty string
.1500	aa		tax				tax
.1501	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1503					_EUDLoop:
.1503	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1505	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1507	90 02		bcc $150b			bcc 	_EUDNoCase
.1509	e9 20		sbc #$20			sbc 	#$20
.150b					_EUDNoCase:
.150b	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.150d	90 2c		bcc $153b			bcc 	_EUDError
.150f	c9 3a		cmp #$3a			cmp 	#'9'+1
.1511	90 0a		bcc $151d			bcc 	_EUDOkay
.1513	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1515	90 24		bcc $153b			bcc 	_EUDError
.1517	c9 47		cmp #$47			cmp 	#'F'+1
.1519	b0 20		bcs $153b			bcs 	_EUDError
.151b	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.151d					_EUDOkay:
.151d	29 0f		and #$0f			and 	#15 							; make constant
.151f	da		phx				phx
.1520	48		pha				pha
.1521	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1523	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.1526	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.1529	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.152c	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.152f	68		pla				pla 									; pop constant and OR in
.1530	fa		plx				plx
.1531	05 0c		ora $0c				ora 	IFR0+IM0
.1533	85 0c		sta $0c				sta 	IFR0+IM0
.1535	c8		iny				iny 									; next
.1536	ca		dex				dex
.1537	d0 ca		bne $1503			bne 	_EUDLoop
.1539	7a		ply				ply
.153a	60		rts				rts
.153b					_EUDError:
.153b	4c 0d 11	jmp $110d		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.153e					EXPUnaryInlineDec:
.153e	4c ed 10	jmp $10ed		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1541					EXPUnaryNull:
.1541	20 2b 14	jsr $142b			jsr 	EXPTermValueR0
.1544	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1545					EXPUnaryFrac:
.1545	20 ee 13	jsr $13ee			jsr 	EXPEvalNumber 					; number to R0
.1548	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.154b	20 f8 3d	jsr $3df8			jsr 	IFloatFractionalR0
.154e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.154f					EXPUnaryInt:
.154f	20 ee 13	jsr $13ee			jsr 	EXPEvalNumber 					; number to R0
.1552	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.1555	20 4e 3e	jsr $3e4e			jsr 	IFloatIntegerR0
.1558	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1559					EXPUnaryLen:
.1559	20 18 14	jsr $1418			jsr 	EXPEvalString 					; string to R0, zTemp0
.155c	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.155f	b2 1e		lda ($1e)			lda 	(zTemp0)
.1561	a2 0c		ldx #$0c			ldx 	#IFR0
.1563	20 50 41	jsr $4150			jsr 	IFloatSetByte
.1566	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1567					EXPUnaryParenthesis:
.1567	20 ee 13	jsr $13ee			jsr 	EXPEvalNumber 					; number to R0
.156a	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.156d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.156e					EXPUnaryRnd:
.156e	20 ee 13	jsr $13ee			jsr 	EXPEvalNumber 				; number to R0
.1571	20 18 12	jsr $1218			jsr 	ERRCheckRParen 				; )
.1574	a2 0c		ldx #$0c			ldx 	#IFR0
.1576	20 8d 15	jsr $158d			jsr 	EXPLoadInRandom
.1579	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.157b	85 0f		sta $0f				sta 	IFR0+IExp
.157d	60		rts				rts
.157e					ExpUnaryRand:
.157e	20 f9 13	jsr $13f9			jsr 	EXPEvalInteger 				; integer to R0
.1581	20 18 12	jsr $1218			jsr 	ERRCheckRParen 				; )
.1584	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.1586	20 8d 15	jsr $158d			jsr 	EXPLoadInRandom
.1589	20 bf 3c	jsr $3cbf			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.158c	60		rts				rts
.158d					EXPLoadInRandom:
.158d	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.1590	20 a2 15	jsr $15a2			jsr 	EXPRandom32
.1593	95 00		sta $00,x			sta 	IM0,x
.1595	20 a2 15	jsr $15a2			jsr 	EXPRandom32
.1598	95 01		sta $01,x			sta 	IM1,x
.159a	20 a2 15	jsr $15a2			jsr 	EXPRandom32
.159d	29 7f		and #$7f			and 	#$7F
.159f	95 02		sta $02,x			sta 	IM2,x
.15a1	60		rts				rts
.15a2					EXPRandom32:
.15a2	5a		phy				phy
.15a3	a0 08		ldy #$08			ldy 	#8
.15a5	ad 3c 03	lda $033c			lda 	EXPSeed+0
.15a8	0d 3d 03	ora $033d			ora 	EXPSeed+1
.15ab	0d 3e 03	ora $033e			ora 	EXPSeed+2
.15ae	0d 3f 03	ora $033f			ora 	EXPSeed+3
.15b1	d0 08		bne $15bb			bne 	_EXPRNoReset
.15b3	ee 3c 03	inc $033c			inc 	EXPSeed+0
.15b6	a0 10		ldy #$10			ldy 	#16
.15b8	8c 3f 03	sty $033f			sty 	EXPSeed+3
.15bb					_EXPRNoReset:
.15bb	ad 3c 03	lda $033c			lda 	EXPSeed+0
.15be					_EXPRLoop:
.15be	0a		asl a				asl		a
.15bf	2e 3d 03	rol $033d			rol 	EXPSeed+1
.15c2	2e 3e 03	rol $033e			rol 	EXPSeed+2
.15c5	2e 3f 03	rol $033f			rol 	EXPSeed+3
.15c8	90 02		bcc $15cc			bcc 	_EXPRNoEOR
.15ca	49 c5		eor #$c5			eor 	#$C5
.15cc					_EXPRNoEOR:
.15cc	88		dey				dey
.15cd	d0 ef		bne $15be			bne 	_EXPRLoop
.15cf	8d 3c 03	sta $033c			sta 	EXPSeed+0
.15d2	7a		ply				ply
.15d3	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.15d4					EXPUnarySgn:
.15d4	20 ee 13	jsr $13ee			jsr 	EXPEvalNumber 					; number to R0
.15d7	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.15da	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.15dc	20 f0 40	jsr $40f0			jsr 	IFloatCopyToRegister
.15df	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.15e1	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.15e4	a2 10		ldx #$10			ldx 	#IFR1
.15e6	20 1c 3e	jsr $3e1c			jsr 	IFloatCompare 					; compare R1 vs 0.
.15e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.15ea					EXPUnarySqr:
.15ea	20 ee 13	jsr $13ee			jsr 	EXPEvalNumber 					; number to R0
.15ed	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.15f0	20 9a 3d	jsr $3d9a			jsr 	IFloatSquareRootR0 				; square root.
.15f3	b0 01		bcs $15f6			bcs 	_EUSValue
.15f5	60		rts				rts
.15f6					_EUSValue:
.15f6	4c fd 10	jmp $10fd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.15f9					EXPUnaryHex:
.15f9	20 f9 13	jsr $13f9			jsr 	EXPEvalInteger 					; expr
.15fc	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.15ff	5a		phy				phy
.1600	a9 10		lda #$10			lda 	#16
.1602	20 ef 3e	jsr $3eef			jsr 	IFloatIntegerToStringR0
.1605	80 0a		bra $1611			bra 	EUSMain
.1607					EXPUnaryStr:
.1607	20 ee 13	jsr $13ee			jsr 	EXPEvalNumber 					; expr
.160a	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.160d	5a		phy				phy
.160e	20 4b 3f	jsr $3f4b			jsr 	IFloatFloatToStringR0 			; convert to string
.1611					EUSMain:
.1611	b0 18		bcs $162b			bcs 	_EUSError
.1613	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1615	84 1f		sty $1f				sty 	zTemp0+1
.1617	48		pha				pha 									; save count
.1618	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.161a	20 f7 3a	jsr $3af7			jsr 	StringTempAllocate
.161d	fa		plx				plx 									; count in X
.161e	a0 00		ldy #$00			ldy 	#0
.1620					_EUSCopy:
.1620	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1622	c8		iny				iny
.1623	20 2c 3b	jsr $3b2c			jsr 	StringTempWrite
.1626	ca		dex				dex
.1627	d0 f7		bne $1620			bne	 	_EUSCopy
.1629	7a		ply				ply
.162a	60		rts				rts
.162b					_EUSError:
.162b	4c fd 10	jmp $10fd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.162e					EXPUnaryInlineString:
.162e	18		clc				clc 								; physical address -> IM0,1
.162f	98		tya				tya
.1630	65 1c		adc $1c				adc 	codePtr
.1632	85 0c		sta $0c				sta 	IFR0+IM0
.1634	a5 1d		lda $1d				lda 	codePtr+1
.1636	69 00		adc #$00			adc 	#0
.1638	85 0d		sta $0d				sta 	IFR0+IM1
.163a	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.163c	a9 80		lda #$80			lda 	#$80
.163e	85 0f		sta $0f				sta 	IFR0+IExp
.1640	98		tya				tya	 								; skip over it.
.1641	38		sec				sec
.1642	71 1c		adc ($1c),y			adc 	(codePtr),y
.1644	a8		tay				tay
.1645	60		rts				rts
.1646					_EXPUISRange:
.1646	4c fd 10	jmp $10fd		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1649					EXPUnaryVal:
.1649	20 18 14	jsr $1418			jsr 	EXPEvalString 					; string to R0, zTemp0
.164c	20 18 12	jsr $1218			jsr 	ERRCheckRParen 					; )
.164f	5a		phy				phy
.1650	18		clc				clc
.1651	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.1653	69 01		adc #$01			adc 	#1
.1655	aa		tax				tax
.1656	a5 1f		lda $1f				lda 	zTemp0+1
.1658	69 00		adc #$00			adc 	#0
.165a	a8		tay				tay
.165b	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.165d	20 b2 3f	jsr $3fb2			jsr 	IFloatStringToFloatR0 			; do conversion
.1660	b0 02		bcs $1664			bcs 	_EUVError
.1662	7a		ply				ply
.1663	60		rts				rts
.1664					_EUVError:
.1664	4c 0d 11	jmp $110d		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1667					BinaryPrecedence:
>1667	02					.byte	 2	; $ef =
>1668	02					.byte	 2	; $f0 <>
>1669	02					.byte	 2	; $f1 <=
>166a	02					.byte	 2	; $f2 <
>166b	02					.byte	 2	; $f3 >=
>166c	02					.byte	 2	; $f4 >
>166d	01					.byte	 1	; $f5 XOR
>166e	01					.byte	 1	; $f6 OR
>166f	01					.byte	 1	; $f7 AND
>1670	04					.byte	 4	; $f8 DIV
>1671	04					.byte	 4	; $f9 MOD
>1672	04					.byte	 4	; $fa <<
>1673	04					.byte	 4	; $fb >>
>1674	04					.byte	 4	; $fc /
>1675	04					.byte	 4	; $fd *
>1676	03					.byte	 3	; $fe -
>1677	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1678					StandardTokens:
>1678	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>167f	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1685	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>168b	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1690	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1693	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1699	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>169c	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>16a1	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>16a6	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>16ae	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>16b2	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>16b7	00					.byte	$00                                     	; $8c [[end]]
>16b8	00					.byte	$00                                     	; $8d [[shift]]
>16b9	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>16be	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>16c3	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>16c6	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>16cb	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>16cf	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>16d5	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>16db	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>16e0	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>16e4	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>16e8	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>16ed	01 2c					.byte	$01,$2c                                 	; $99 ,
>16ef	01 3b					.byte	$01,$3b                                 	; $9a ;
>16f1	01 3a					.byte	$01,$3a                                 	; $9b :
>16f3	01 27					.byte	$01,$27                                 	; $9c '
>16f5	01 29					.byte	$01,$29                                 	; $9d )
>16f7	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>16fb	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1701	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1705	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1709	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>170e	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1712	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1719	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>171e	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1723	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1728	00					.byte	0											; $a8
>1729	00					.byte	0											; $a9
>172a	00					.byte	0											; $aa
>172b	00					.byte	0											; $ab
>172c	00					.byte	0											; $ac
>172d	00					.byte	0											; $ad
>172e	00					.byte	0											; $ae
>172f	00					.byte	0											; $af
>1730	00					.byte	0											; $b0
>1731	00					.byte	0											; $b1
>1732	00					.byte	0											; $b2
>1733	00					.byte	0											; $b3
>1734	00					.byte	0											; $b4
>1735	00					.byte	0											; $b5
>1736	00					.byte	0											; $b6
>1737	00					.byte	0											; $b7
>1738	00					.byte	0											; $b8
>1739	00					.byte	0											; $b9
>173a	00					.byte	0											; $ba
>173b	00					.byte	0											; $bb
>173c	00					.byte	0											; $bc
>173d	00					.byte	0											; $bd
>173e	00					.byte	0											; $be
>173f	00					.byte	0											; $bf
>1740	00					.byte	0											; $c0
>1741	00					.byte	0											; $c1
>1742	00					.byte	0											; $c2
>1743	00					.byte	0											; $c3
>1744	00					.byte	0											; $c4
>1745	00					.byte	0											; $c5
>1746	00					.byte	0											; $c6
>1747	00					.byte	0											; $c7
>1748	00					.byte	0											; $c8
>1749	00					.byte	0											; $c9
>174a	00					.byte	0											; $ca
>174b	00					.byte	0											; $cb
>174c	00					.byte	0											; $cc
>174d	00					.byte	0											; $cd
>174e	00					.byte	0											; $ce
>174f	00					.byte	0											; $cf
>1750	00					.byte	0											; $d0
>1751	00					.byte	0											; $d1
>1752	00					.byte	0											; $d2
>1753	00					.byte	0											; $d3
>1754	00					.byte	0											; $d4
>1755	00					.byte	0											; $d5
>1756	00					.byte	0											; $d6
>1757	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>175f	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1766	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>176c	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1772	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1777	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>177c	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1781	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1786	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>178b	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1791	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1796	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>179e	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>17a5	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>17aa	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>17af	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>17b5	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>17ba	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>17c0	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>17c5	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>17cb	01 28					.byte	$01,$28                                 	; $eb (
>17cd	01 24					.byte	$01,$24                                 	; $ec $
>17cf	00					.byte	$00                                     	; $ed [[decimal]]
>17d0	00					.byte	$00                                     	; $ee [[string]]
>17d1	01 3d					.byte	$01,$3d                                 	; $ef =
>17d3	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>17d6	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>17d9	01 3c					.byte	$01,$3c                                 	; $f2 <
>17db	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>17de	01 3e					.byte	$01,$3e                                 	; $f4 >
>17e0	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>17e4	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>17e7	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>17eb	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>17ef	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>17f3	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>17f6	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>17f9	01 2f					.byte	$01,$2f                                 	; $fc /
>17fb	01 2a					.byte	$01,$2a                                 	; $fd *
>17fd	01 2d					.byte	$01,$2d                                 	; $fe -
>17ff	01 2b					.byte	$01,$2b                                 	; $ff +
>1801	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1802					VectorTable:
>1802	2c 42					.word	NotImplemented           ; $80 REPEAT
>1804	2c 42					.word	NotImplemented           ; $81 UNTIL
>1806	2c 42					.word	NotImplemented           ; $82 WHILE
>1808	2c 42					.word	NotImplemented           ; $83 WEND
>180a	2c 42					.word	NotImplemented           ; $84 IF
>180c	2c 42					.word	NotImplemented           ; $85 ENDIF
>180e	2c 42					.word	NotImplemented           ; $86 DO
>1810	2c 42					.word	NotImplemented           ; $87 LOOP
>1812	2c 42					.word	NotImplemented           ; $88 PROC
>1814	2c 42					.word	NotImplemented           ; $89 ENDPROC
>1816	2c 42					.word	NotImplemented           ; $8a FOR
>1818	2c 42					.word	NotImplemented           ; $8b NEXT
>181a	ac 10					.word	RUNEndOfLine             ; $8c [[END]]
>181c	e4 10					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>181e	2c 42					.word	NotImplemented           ; $8e ELSE
>1820	22 10					.word	NoExec01                 ; $8f THEN
>1822	22 10					.word	NoExec02                 ; $90 TO
>1824	22 10					.word	NoExec03                 ; $91 STEP
>1826	2c 42					.word	NotImplemented           ; $92 LET
>1828	25 10					.word	Command_Print            ; $93 PRINT
>182a	2c 42					.word	NotImplemented           ; $94 INPUT
>182c	2c 42					.word	NotImplemented           ; $95 CALL
>182e	2c 42					.word	NotImplemented           ; $96 SYS
>1830	93 10					.word	Command_REM              ; $97 REM
>1832	2c 42					.word	NotImplemented           ; $98 EXIT
>1834	22 10					.word	NoExec04                 ; $99 ,
>1836	22 10					.word	NoExec05                 ; $9a ;
>1838	22 10					.word	NoExec06                 ; $9b :
>183a	93 10					.word	Command_REM2             ; $9c '
>183c	22 10					.word	NoExec07                 ; $9d )
>183e	2c 42					.word	NotImplemented           ; $9e DIM
>1840	1e 10					.word	Command_CLEAR            ; $9f CLEAR
>1842	8a 10					.word	Command_NEW              ; $a0 NEW
>1844	a0 10					.word	Command_RUN              ; $a1 RUN
>1846	ea 10					.word	Command_STOP             ; $a2 STOP
>1848	e7 10					.word	Command_END              ; $a3 END
>184a	10 10					.word	Command_ASSERT           ; $a4 ASSERT
>184c	2c 42					.word	NotImplemented           ; $a5 LIST
>184e	2c 42					.word	NotImplemented           ; $a6 SAVE
>1850	2c 42					.word	NotImplemented           ; $a7 LOAD
>1852	2c 42					.word	NotImplemented           ; $a8
>1854	2c 42					.word	NotImplemented           ; $a9
>1856	2c 42					.word	NotImplemented           ; $aa
>1858	2c 42					.word	NotImplemented           ; $ab
>185a	2c 42					.word	NotImplemented           ; $ac
>185c	2c 42					.word	NotImplemented           ; $ad
>185e	2c 42					.word	NotImplemented           ; $ae
>1860	2c 42					.word	NotImplemented           ; $af
>1862	2c 42					.word	NotImplemented           ; $b0
>1864	2c 42					.word	NotImplemented           ; $b1
>1866	2c 42					.word	NotImplemented           ; $b2
>1868	2c 42					.word	NotImplemented           ; $b3
>186a	2c 42					.word	NotImplemented           ; $b4
>186c	2c 42					.word	NotImplemented           ; $b5
>186e	2c 42					.word	NotImplemented           ; $b6
>1870	2c 42					.word	NotImplemented           ; $b7
>1872	2c 42					.word	NotImplemented           ; $b8
>1874	2c 42					.word	NotImplemented           ; $b9
>1876	2c 42					.word	NotImplemented           ; $ba
>1878	2c 42					.word	NotImplemented           ; $bb
>187a	2c 42					.word	NotImplemented           ; $bc
>187c	2c 42					.word	NotImplemented           ; $bd
>187e	2c 42					.word	NotImplemented           ; $be
>1880	2c 42					.word	NotImplemented           ; $bf
>1882	2c 42					.word	NotImplemented           ; $c0
>1884	2c 42					.word	NotImplemented           ; $c1
>1886	2c 42					.word	NotImplemented           ; $c2
>1888	2c 42					.word	NotImplemented           ; $c3
>188a	2c 42					.word	NotImplemented           ; $c4
>188c	2c 42					.word	NotImplemented           ; $c5
>188e	2c 42					.word	NotImplemented           ; $c6
>1890	2c 42					.word	NotImplemented           ; $c7
>1892	2c 42					.word	NotImplemented           ; $c8
>1894	2c 42					.word	NotImplemented           ; $c9
>1896	2c 42					.word	NotImplemented           ; $ca
>1898	2c 42					.word	NotImplemented           ; $cb
>189a	2c 42					.word	NotImplemented           ; $cc
>189c	2c 42					.word	NotImplemented           ; $cd
>189e	2c 42					.word	NotImplemented           ; $ce
>18a0	2c 42					.word	NotImplemented           ; $cf
>18a2	2c 42					.word	NotImplemented           ; $d0
>18a4	2c 42					.word	NotImplemented           ; $d1
>18a6	2c 42					.word	NotImplemented           ; $d2
>18a8	2c 42					.word	NotImplemented           ; $d3
>18aa	2c 42					.word	NotImplemented           ; $d4
>18ac	2c 42					.word	NotImplemented           ; $d5
>18ae	2c 42					.word	NotImplemented           ; $d6
>18b0	2c 42					.word	NotImplemented           ; $d7 RIGHT$(
>18b2	2c 42					.word	NotImplemented           ; $d8 LEFT$(
>18b4	2c 42					.word	NotImplemented           ; $d9 MID$(
>18b6	07 16					.word	EXPUnaryStr              ; $da STR$(
>18b8	49 16					.word	EXPUnaryVal              ; $db VAL(
>18ba	d4 15					.word	EXPUnarySgn              ; $dc SGN(
>18bc	bf 14					.word	EXPUnaryAbs              ; $dd ABS(
>18be	59 15					.word	EXPUnaryLen              ; $de LEN(
>18c0	ea 15					.word	EXPUnarySqr              ; $df SQR(
>18c2	df 14					.word	EXPUnaryChr              ; $e0 CHR$(
>18c4	c9 14					.word	EXPUnaryAsc              ; $e1 ASC(
>18c6	2c 42					.word	NotImplemented           ; $e2 INKEY$(
>18c8	2c 42					.word	NotImplemented           ; $e3 EVENT(
>18ca	2c 42					.word	NotImplemented           ; $e4 TIME
>18cc	4f 15					.word	EXPUnaryInt              ; $e5 INT(
>18ce	45 15					.word	EXPUnaryFrac             ; $e6 FRAC(
>18d0	f0 14					.word	EXPUnaryDec              ; $e7 DEC(
>18d2	f9 15					.word	EXPUnaryHex              ; $e8 HEX$(
>18d4	6e 15					.word	EXPUnaryRnd              ; $e9 RND(
>18d6	7e 15					.word	ExpUnaryRand             ; $ea RAND(
>18d8	67 15					.word	EXPUnaryParenthesis      ; $eb (
>18da	41 15					.word	EXPUnaryNull             ; $ec $
>18dc	3e 15					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>18de	2e 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>18e0	eb 12					.word	EXPCompareEqual          ; $ef =
>18e2	06 13					.word	EXPCompareNotEqual       ; $f0 <>
>18e4	0f 13					.word	EXPCompareLessEqual      ; $f1 <=
>18e6	f4 12					.word	EXPCompareLess           ; $f2 <
>18e8	18 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>18ea	fd 12					.word	EXPCompareGreater        ; $f4 >
>18ec	98 12					.word	EXPBinXor                ; $f5 XOR
>18ee	8c 12					.word	EXPBinOr                 ; $f6 OR
>18f0	80 12					.word	EXPBinAnd                ; $f7 AND
>18f2	58 12					.word	EXPBinIDiv               ; $f8 DIV
>18f4	69 12					.word	EXPBinIMod               ; $f9 MOD
>18f6	63 13					.word	EXPBinLeft               ; $fa <<
>18f8	6b 13					.word	EXPBinRight              ; $fb >>
>18fa	4c 12					.word	EXPBinFDiv               ; $fc /
>18fc	43 12					.word	EXPBinMul                ; $fd *
>18fe	3a 12					.word	EXPBinSub                ; $fe -
>1900	31 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1902					TOKDetokenise:
.1902	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1904	84 23		sty $23				sty 	zTemp2+1
.1906	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.1909					_TOKDLoop:
.1909	20 38 19	jsr $1938			jsr 	TOKDGet 					; get next
.190c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.190e	f0 26		beq $1936			beq 	_TOKDExit
.1910	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1912	f0 1d		beq $1931			beq 	_TOKDDataItem
.1914	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1916	f0 19		beq $1931			beq 	_TOKDDataItem
.1918	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.191a	10 05		bpl $1921			bpl 	_TOKDNotToken
.191c	20 00 1a	jsr $1a00			jsr 	TOKDToken 					; token to text.
.191f	80 e8		bra $1909			bra 	_TOKDLoop
.1921					_TOKDNotToken:
.1921	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1923	90 05		bcc $192a			bcc 	_TOKDNotIdentifier
.1925	20 73 19	jsr $1973			jsr 	TOKDIdentifier
.1928	80 df		bra $1909			bra 	_TOKDLoop
.192a					_TOKDNotIdentifier:
.192a	a0 0a		ldy #$0a			ldy 	#10
.192c	20 bc 19	jsr $19bc			jsr 	TOKDInteger
.192f	80 d8		bra $1909			bra 	_TOKDLoop
.1931					_TOKDDataItem:
.1931	20 4e 19	jsr $194e			jsr 	TOKDDataItem
.1934	80 d3		bra $1909			bra 	_TOKDLoop
.1936					_TOKDExit:
.1936	18		clc				clc
.1937	60		rts				rts
.1938	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.193a	e6 22		inc $22				inc 	zTemp2
.193c	d0 02		bne $1940			bne 	_TKDGExit
.193e	e6 23		inc $23				inc 	zTemp2+1
.1940					_TKDGExit:
.1940	60		rts				rts
.1941					TOKDOutput:
.1941	8d 42 03	sta $0342			sta 	TOKLastCharacter
.1944	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.1947					TOKSetDetokeniseOutput:
.1947	8e 40 03	stx $0340			stx 	TOKOutputMethod
.194a	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.194d	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.194e					TOKDDataItem:
.194e	a8		tay				tay 								; type in Y
.194f	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1951	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1953	f0 02		beq $1957			beq 	_TOKDDIsString
.1955	a9 2e		lda #$2e			lda 	#'.'
.1957					_TOKDDIsString:
.1957	20 41 19	jsr $1941			jsr 	TOKDOutput 					; dump it
.195a	20 38 19	jsr $1938			jsr 	TOKDGet 					; get length into X
.195d	aa		tax				tax
.195e					_TOKDDOutput:
.195e	ca		dex				dex 								; are we complete
.195f	30 08		bmi $1969			bmi 	_TOKDDEnd
.1961	20 38 19	jsr $1938			jsr 	TOKDGet 					; get character and output it
.1964	20 41 19	jsr $1941			jsr 	TOKDOutput
.1967	80 f5		bra $195e			bra 	_TOKDDOutput
.1969					_TOKDDEnd:
.1969	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.196b	d0 05		bne $1972			bne 	_TOKDDNotString
.196d	a9 22		lda #$22			lda 	#'"'
.196f	20 41 19	jsr $1941			jsr 	TOKDOutput
.1972					_TOKDDNotString:
.1972	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1973					TOKDIdentifier:
.1973	a0 ff		ldy #$ff			ldy 	#$FF
.1975	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.1978					_TOKDLoop:
.1978	a8		tay				tay 								; token in Y
.1979	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.197b	c0 64		cpy #$64			cpy 	#$64
.197d	f0 11		beq $1990			beq 	_TOKDIOutput
.197f	a9 5f		lda #$5f			lda 	#'_'
.1981	c0 65		cpy #$65			cpy 	#$65
.1983	f0 0b		beq $1990			beq 	_TOKDIOutput
.1985	98		tya				tya 								; handle a-z
.1986	18		clc				clc
.1987	69 21		adc #$21			adc	 	#$21
.1989	c0 5a		cpy #$5a			cpy 	#$5A
.198b	90 03		bcc $1990			bcc 	_TOKDIOutput
.198d	38		sec				sec 								; handle 0-9
.198e	e9 4b		sbc #$4b			sbc 	#$4B
.1990					_TOKDIOutput:
.1990	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.1993	10 08		bpl $199d			bpl 	_TOKDINoSpacing
.1995	48		pha				pha
.1996	20 32 1a	jsr $1a32			jsr 	TOKDSpacing
.1999	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.199c	68		pla				pla
.199d					_TOKDINoSpacing:
.199d	20 41 19	jsr $1941			jsr 	TOKDOutput
.19a0	20 38 19	jsr $1938			jsr 	TOKDGet 					; get next token
.19a3	c9 7c		cmp #$7c			cmp 	#$7C
.19a5	90 d1		bcc $1978			bcc 	_TOKDLoop
.19a7	f0 12		beq $19bb			beq 	_TOKDIExit 					; it's a number, no tail.
.19a9	4a		lsr a				lsr 	a 							; string ?
.19aa	90 07		bcc $19b3			bcc 	_TOKDICheckArray
.19ac	48		pha				pha
.19ad	a9 24		lda #$24			lda 	#"$"
.19af	20 41 19	jsr $1941			jsr 	TOKDOutput
.19b2	68		pla				pla
.19b3					_TOKDICheckArray:
.19b3	4a		lsr a				lsr 	a 							; array ?
.19b4	90 05		bcc $19bb			bcc 	_TOKDIExit
.19b6	a9 28		lda #$28			lda 	#"("
.19b8	20 41 19	jsr $1941			jsr 	TOKDOutput
.19bb					_TOKDIExit:
.19bb	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.19bc					TOKDInteger:
.19bc	5a		phy				phy 								; save base
.19bd	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.19bf	20 50 41	jsr $4150			jsr 	IFloatSetByte
.19c2					_TOKDILoop:
.19c2	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.19c4	c9 40		cmp #$40			cmp 	#$40
.19c6	b0 1d		bcs $19e5			bcs 	_TOKDIHaveInteger
.19c8	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.19ca	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.19cd	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.19d0	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.19d3	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.19d6	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.19d9	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.19dc	20 38 19	jsr $1938			jsr 	TOKDGet 					; OR byte in.
.19df	05 0c		ora $0c				ora 	IFR0+IM0
.19e1	85 0c		sta $0c				sta 	IFR0+IM0
.19e3	80 dd		bra $19c2			bra 	_TOKDILoop
.19e5					_TOKDIHaveInteger:
.19e5	7a		ply				ply 								; restore base
.19e6	98		tya				tya 								; base in A
.19e7	20 ef 3e	jsr $3eef			jsr 	IFloatIntegerToStringR0
.19ea	86 1e		stx $1e				stx 	zTemp0
.19ec	84 1f		sty $1f				sty 	zTemp0+1
.19ee	b2 1e		lda ($1e)			lda 	(zTemp0)
.19f0	20 32 1a	jsr $1a32			jsr 	TOKDSpacing 				; check spacing okay.
.19f3	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.19f5					_TOKDOutput:
.19f5	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.19f7	20 41 19	jsr $1941			jsr 	TOKDOutput
.19fa	c8		iny				iny
.19fb	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.19fd	d0 f6		bne $19f5			bne 	_TOKDOutput
.19ff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1a00					TOKDToken:
.1a00	a2 78		ldx #$78			ldx 	#StandardTokens & $FF
.1a02	a0 16		ldy #$16			ldy 	#StandardTokens >> 8
.1a04					_TOKDSearch:
.1a04	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1a06	84 1f		sty $1f				sty 	zTemp0+1
.1a08	aa		tax				tax 								; token ID in X.
.1a09					_TOKDFind:
.1a09	ca		dex				dex 								; reached the start
.1a0a	10 0d		bpl $1a19			bpl 	_TOKDFound
.1a0c	38		sec				sec 								; go to next entry
.1a0d	b2 1e		lda ($1e)			lda 	(zTemp0)
.1a0f	65 1e		adc $1e				adc 	zTemp0
.1a11	85 1e		sta $1e				sta 	zTemp0
.1a13	90 f4		bcc $1a09			bcc 	_TOKDFind
.1a15	e6 1f		inc $1f				inc 	zTemp0+1
.1a17	80 f0		bra $1a09			bra 	_TOKDFind
.1a19					_TOKDFound:
.1a19	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1a1b	f0 14		beq $1a31			beq 	_TOKDExit
.1a1d	aa		tax				tax
.1a1e	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1a20	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1a22	20 32 1a	jsr $1a32			jsr 	TOKDSpacing
.1a25					_TOKDOutput:
.1a25	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1a27	20 8a 3a	jsr $3a8a			jsr 	TOKToLower
.1a2a	20 41 19	jsr $1941			jsr 	TOKDOutput
.1a2d	c8		iny				iny
.1a2e	ca		dex				dex
.1a2f	d0 f4		bne $1a25			bne 	_TOKDOutput
.1a31					_TOKDExit:
.1a31	60		rts				rts
.1a32					TOKDSpacing:
.1a32	20 a1 3a	jsr $3aa1			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1a35	90 0d		bcc $1a44			bcc 	_TOKDSExit
.1a37	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1a3a	20 a1 3a	jsr $3aa1			jsr 	TOKIsIdentifierElement
.1a3d	90 05		bcc $1a44			bcc 	_TOKDSExit
.1a3f	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1a41	20 41 19	jsr $1941			jsr 	TOKDOutput
.1a44					_TOKDSExit:
.1a44	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1a45					PGMDeleteLine:
.1a45	20 f8 1a	jsr $1af8			jsr 	PGMEndProgram 				; end of program into zTemp0
.1a48	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1a4a	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1a4d	85 21		sta $21				sta 	zTemp1+1
.1a4f					_PGMDLoop:
.1a4f	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1a51	38		sec				sec
.1a52	f0 3a		beq $1a8e			beq 	_PGMDExit
.1a54	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1a56	b1 20		lda ($20),y			lda 	(zTemp1),y
.1a58	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1a5b	d0 08		bne $1a65			bne 	_PGMDNext
.1a5d	c8		iny				iny
.1a5e	b1 20		lda ($20),y			lda 	(zTemp1),y
.1a60	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1a63	f0 0d		beq $1a72			beq 	_PGMDDelete
.1a65					_PGMDNext:
.1a65	18		clc				clc
.1a66	b2 20		lda ($20)			lda 	(zTemp1)
.1a68	65 20		adc $20				adc 	zTemp1
.1a6a	85 20		sta $20				sta 	zTemp1
.1a6c	90 e1		bcc $1a4f			bcc 	_PGMDLoop
.1a6e	e6 21		inc $21				inc 	zTemp1+1
.1a70	80 dd		bra $1a4f			bra 	_PGMDLoop
.1a72					_PGMDDelete:
.1a72	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1a74	a8		tay				tay
.1a75					_PGMDCopy:
.1a75	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1a77	92 20		sta ($20)			sta 	(zTemp1)
.1a79	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1a7b	c5 1e		cmp $1e				cmp 	zTemp0
.1a7d	d0 07		bne $1a86			bne 	_PGMDNext2
.1a7f	a5 21		lda $21				lda 	zTemp1+1
.1a81	c5 1f		cmp $1f				cmp 	zTemp0+1
.1a83	18		clc				clc
.1a84	f0 08		beq $1a8e			beq 	_PGMDExit
.1a86					_PGMDNext2:
.1a86	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1a88	d0 eb		bne $1a75			bne 	_PGMDCopy
.1a8a	e6 21		inc $21				inc 	zTemp1+1
.1a8c	80 e7		bra $1a75			bra 	_PGMDCopy
.1a8e					_PGMDExit:
.1a8e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1a8f					PGMInsertLine:
.1a8f	20 f8 1a	jsr $1af8			jsr 	PGMEndProgram 				; end of program into zTemp0
.1a92	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1a94	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1a97	85 21		sta $21				sta 	zTemp1+1
.1a99					_PGMILoop:
.1a99	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1a9b	f0 1c		beq $1ab9			beq 	_PGMIInsert
.1a9d	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1a9f	b1 20		lda ($20),y			lda 	(zTemp1),y
.1aa1	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1aa4	c8		iny				iny
.1aa5	b1 20		lda ($20),y			lda 	(zTemp1),y
.1aa7	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1aaa	b0 0d		bcs $1ab9			bcs 	_PGMIInsert 				; insert here.
.1aac	18		clc				clc
.1aad	b2 20		lda ($20)			lda 	(zTemp1)
.1aaf	65 20		adc $20				adc 	zTemp1
.1ab1	85 20		sta $20				sta 	zTemp1
.1ab3	90 e4		bcc $1a99			bcc 	_PGMILoop
.1ab5	e6 21		inc $21				inc 	zTemp1+1
.1ab7	80 e0		bra $1a99			bra 	_PGMILoop
.1ab9					_PGMIInsert:
.1ab9	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1abc					_PGMIInsertLoop:
.1abc	b2 1e		lda ($1e)			lda 	(zTemp0)
.1abe	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1ac0	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1ac2	c5 1e		cmp $1e				cmp 	zTemp0
.1ac4	d0 06		bne $1acc			bne 	_PGMINext
.1ac6	a5 21		lda $21				lda 	zTemp1+1
.1ac8	c5 1f		cmp $1f				cmp 	zTemp0+1
.1aca	f0 0a		beq $1ad6			beq 	_PGMIInserted
.1acc					_PGMINext:
.1acc	a5 1e		lda $1e				lda 	zTemp0
.1ace	d0 02		bne $1ad2			bne 	_PGMINoBorrow
.1ad0	c6 1f		dec $1f				dec 	zTemp0+1
.1ad2					_PGMINoBorrow:
.1ad2	c6 1e		dec $1e				dec 	zTemp0
.1ad4	80 e6		bra $1abc			bra 	_PGMIInsertLoop
.1ad6					_PGMIInserted:
.1ad6	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1ad8					_PGMICopyLoop:
.1ad8	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1adb	91 20		sta ($20),y			sta 	(zTemp1),y
.1add	c8		iny				iny
.1ade	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1ae1	d0 f5		bne $1ad8			bne 	_PGMICopyLoop
.1ae3	18		clc				clc
.1ae4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1ae5					PGMSetBaseAddress:
.1ae5	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1ae8	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1aeb	60		rts				rts
.1aec					PGMNewProgram:
.1aec	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1aee	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1af1	85 1f		sta $1f				sta 	zTemp0+1
.1af3	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1af5	92 1e		sta ($1e)			sta 	(zTemp0)
.1af7	60		rts				rts
.1af8					PGMEndProgram:
.1af8	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1afa	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1afd	85 1f		sta $1f				sta 	zTemp0+1
.1aff					_PGMEPLoop:
.1aff	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b01	f0 0b		beq $1b0e			beq 	_PGMEPExit
.1b03	18		clc				clc
.1b04	65 1e		adc $1e				adc 	zTemp0
.1b06	85 1e		sta $1e				sta 	zTemp0
.1b08	90 f5		bcc $1aff			bcc 	_PGMEPLoop
.1b0a	e6 1f		inc $1f				inc 	zTemp0+1
.1b0c	80 f1		bra $1aff			bra 	_PGMEPLoop
.1b0e					_PGMEPExit:
.1b0e	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/testing/testing.asm

.1b0f					TestCode:
.1b0f	20 ec 1a	jsr $1aec			jsr 	PGMNewProgram
.1b12	9c ff ff	stz $ffff			stz 	$FFFF

;******  Processing file: src/program/testing/testrun.incx

.1b15	a2 60		ldx #$60		ldx #Line0 & $FF
.1b17	a0 1e		ldy #$1e		ldy #Line0 >> 8
.1b19	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b1c	a2 64		ldx #$64		ldx #Line1 & $FF
.1b1e	a0 1e		ldy #$1e		ldy #Line1 >> 8
.1b20	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b23	a2 78		ldx #$78		ldx #Line2 & $FF
.1b25	a0 1e		ldy #$1e		ldy #Line2 >> 8
.1b27	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b2a	a2 cb		ldx #$cb		ldx #Line3 & $FF
.1b2c	a0 1e		ldy #$1e		ldy #Line3 >> 8
.1b2e	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b31	a2 cf		ldx #$cf		ldx #Line4 & $FF
.1b33	a0 1e		ldy #$1e		ldy #Line4 >> 8
.1b35	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b38	a2 15		ldx #$15		ldx #Line5 & $FF
.1b3a	a0 1f		ldy #$1f		ldy #Line5 >> 8
.1b3c	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b3f	a2 24		ldx #$24		ldx #Line6 & $FF
.1b41	a0 1f		ldy #$1f		ldy #Line6 >> 8
.1b43	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b46	a2 76		ldx #$76		ldx #Line7 & $FF
.1b48	a0 1f		ldy #$1f		ldy #Line7 >> 8
.1b4a	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b4d	a2 bd		ldx #$bd		ldx #Line8 & $FF
.1b4f	a0 1f		ldy #$1f		ldy #Line8 >> 8
.1b51	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b54	a2 f5		ldx #$f5		ldx #Line9 & $FF
.1b56	a0 1f		ldy #$1f		ldy #Line9 >> 8
.1b58	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b5b	a2 3b		ldx #$3b		ldx #Line10 & $FF
.1b5d	a0 20		ldy #$20		ldy #Line10 >> 8
.1b5f	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b62	a2 4c		ldx #$4c		ldx #Line11 & $FF
.1b64	a0 20		ldy #$20		ldy #Line11 >> 8
.1b66	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b69	a2 67		ldx #$67		ldx #Line12 & $FF
.1b6b	a0 20		ldy #$20		ldy #Line12 >> 8
.1b6d	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b70	a2 82		ldx #$82		ldx #Line13 & $FF
.1b72	a0 20		ldy #$20		ldy #Line13 >> 8
.1b74	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b77	a2 ca		ldx #$ca		ldx #Line14 & $FF
.1b79	a0 20		ldy #$20		ldy #Line14 >> 8
.1b7b	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b7e	a2 11		ldx #$11		ldx #Line15 & $FF
.1b80	a0 21		ldy #$21		ldy #Line15 >> 8
.1b82	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b85	a2 16		ldx #$16		ldx #Line16 & $FF
.1b87	a0 21		ldy #$21		ldy #Line16 >> 8
.1b89	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b8c	a2 1a		ldx #$1a		ldx #Line17 & $FF
.1b8e	a0 21		ldy #$21		ldy #Line17 >> 8
.1b90	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b93	a2 70		ldx #$70		ldx #Line18 & $FF
.1b95	a0 21		ldy #$21		ldy #Line18 >> 8
.1b97	20 e9 37	jsr $37e9		jsr TOKOneLine
.1b9a	a2 75		ldx #$75		ldx #Line19 & $FF
.1b9c	a0 21		ldy #$21		ldy #Line19 >> 8
.1b9e	20 e9 37	jsr $37e9		jsr TOKOneLine
.1ba1	a2 cb		ldx #$cb		ldx #Line20 & $FF
.1ba3	a0 21		ldy #$21		ldy #Line20 >> 8
.1ba5	20 e9 37	jsr $37e9		jsr TOKOneLine
.1ba8	a2 e3		ldx #$e3		ldx #Line21 & $FF
.1baa	a0 21		ldy #$21		ldy #Line21 >> 8
.1bac	20 e9 37	jsr $37e9		jsr TOKOneLine
.1baf	a2 e7		ldx #$e7		ldx #Line22 & $FF
.1bb1	a0 21		ldy #$21		ldy #Line22 >> 8
.1bb3	20 e9 37	jsr $37e9		jsr TOKOneLine
.1bb6	a2 0e		ldx #$0e		ldx #Line23 & $FF
.1bb8	a0 22		ldy #$22		ldy #Line23 >> 8
.1bba	20 e9 37	jsr $37e9		jsr TOKOneLine
.1bbd	a2 4b		ldx #$4b		ldx #Line24 & $FF
.1bbf	a0 22		ldy #$22		ldy #Line24 >> 8
.1bc1	20 e9 37	jsr $37e9		jsr TOKOneLine
.1bc4	a2 6c		ldx #$6c		ldx #Line25 & $FF
.1bc6	a0 22		ldy #$22		ldy #Line25 >> 8
.1bc8	20 e9 37	jsr $37e9		jsr TOKOneLine
.1bcb	a2 bc		ldx #$bc		ldx #Line26 & $FF
.1bcd	a0 22		ldy #$22		ldy #Line26 >> 8
.1bcf	20 e9 37	jsr $37e9		jsr TOKOneLine
.1bd2	a2 1b		ldx #$1b		ldx #Line27 & $FF
.1bd4	a0 23		ldy #$23		ldy #Line27 >> 8
.1bd6	20 e9 37	jsr $37e9		jsr TOKOneLine
.1bd9	a2 49		ldx #$49		ldx #Line28 & $FF
.1bdb	a0 23		ldy #$23		ldy #Line28 >> 8
.1bdd	20 e9 37	jsr $37e9		jsr TOKOneLine
.1be0	a2 9d		ldx #$9d		ldx #Line29 & $FF
.1be2	a0 23		ldy #$23		ldy #Line29 >> 8
.1be4	20 e9 37	jsr $37e9		jsr TOKOneLine
.1be7	a2 a8		ldx #$a8		ldx #Line30 & $FF
.1be9	a0 23		ldy #$23		ldy #Line30 >> 8
.1beb	20 e9 37	jsr $37e9		jsr TOKOneLine
.1bee	a2 c2		ldx #$c2		ldx #Line31 & $FF
.1bf0	a0 23		ldy #$23		ldy #Line31 >> 8
.1bf2	20 e9 37	jsr $37e9		jsr TOKOneLine
.1bf5	a2 16		ldx #$16		ldx #Line32 & $FF
.1bf7	a0 24		ldy #$24		ldy #Line32 >> 8
.1bf9	20 e9 37	jsr $37e9		jsr TOKOneLine
.1bfc	a2 52		ldx #$52		ldx #Line33 & $FF
.1bfe	a0 24		ldy #$24		ldy #Line33 >> 8
.1c00	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c03	a2 8f		ldx #$8f		ldx #Line34 & $FF
.1c05	a0 24		ldy #$24		ldy #Line34 >> 8
.1c07	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c0a	a2 f0		ldx #$f0		ldx #Line35 & $FF
.1c0c	a0 24		ldy #$24		ldy #Line35 >> 8
.1c0e	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c11	a2 30		ldx #$30		ldx #Line36 & $FF
.1c13	a0 25		ldy #$25		ldy #Line36 >> 8
.1c15	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c18	a2 57		ldx #$57		ldx #Line37 & $FF
.1c1a	a0 25		ldy #$25		ldy #Line37 >> 8
.1c1c	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c1f	a2 62		ldx #$62		ldx #Line38 & $FF
.1c21	a0 25		ldy #$25		ldy #Line38 >> 8
.1c23	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c26	a2 6b		ldx #$6b		ldx #Line39 & $FF
.1c28	a0 25		ldy #$25		ldy #Line39 >> 8
.1c2a	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c2d	a2 84		ldx #$84		ldx #Line40 & $FF
.1c2f	a0 25		ldy #$25		ldy #Line40 >> 8
.1c31	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c34	a2 f2		ldx #$f2		ldx #Line41 & $FF
.1c36	a0 25		ldy #$25		ldy #Line41 >> 8
.1c38	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c3b	a2 3a		ldx #$3a		ldx #Line42 & $FF
.1c3d	a0 26		ldy #$26		ldy #Line42 >> 8
.1c3f	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c42	a2 9e		ldx #$9e		ldx #Line43 & $FF
.1c44	a0 26		ldy #$26		ldy #Line43 >> 8
.1c46	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c49	a2 db		ldx #$db		ldx #Line44 & $FF
.1c4b	a0 26		ldy #$26		ldy #Line44 >> 8
.1c4d	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c50	a2 e0		ldx #$e0		ldx #Line45 & $FF
.1c52	a0 26		ldy #$26		ldy #Line45 >> 8
.1c54	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c57	a2 46		ldx #$46		ldx #Line46 & $FF
.1c59	a0 27		ldy #$27		ldy #Line46 >> 8
.1c5b	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c5e	a2 56		ldx #$56		ldx #Line47 & $FF
.1c60	a0 27		ldy #$27		ldy #Line47 >> 8
.1c62	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c65	a2 ae		ldx #$ae		ldx #Line48 & $FF
.1c67	a0 27		ldy #$27		ldy #Line48 >> 8
.1c69	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c6c	a2 d4		ldx #$d4		ldx #Line49 & $FF
.1c6e	a0 27		ldy #$27		ldy #Line49 >> 8
.1c70	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c73	a2 e9		ldx #$e9		ldx #Line50 & $FF
.1c75	a0 27		ldy #$27		ldy #Line50 >> 8
.1c77	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c7a	a2 7d		ldx #$7d		ldx #Line51 & $FF
.1c7c	a0 28		ldy #$28		ldy #Line51 >> 8
.1c7e	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c81	a2 ee		ldx #$ee		ldx #Line52 & $FF
.1c83	a0 28		ldy #$28		ldy #Line52 >> 8
.1c85	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c88	a2 4d		ldx #$4d		ldx #Line53 & $FF
.1c8a	a0 29		ldy #$29		ldy #Line53 >> 8
.1c8c	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c8f	a2 b6		ldx #$b6		ldx #Line54 & $FF
.1c91	a0 29		ldy #$29		ldy #Line54 >> 8
.1c93	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c96	a2 ba		ldx #$ba		ldx #Line55 & $FF
.1c98	a0 29		ldy #$29		ldy #Line55 >> 8
.1c9a	20 e9 37	jsr $37e9		jsr TOKOneLine
.1c9d	a2 fd		ldx #$fd		ldx #Line56 & $FF
.1c9f	a0 29		ldy #$29		ldy #Line56 >> 8
.1ca1	20 e9 37	jsr $37e9		jsr TOKOneLine
.1ca4	a2 0f		ldx #$0f		ldx #Line57 & $FF
.1ca6	a0 2a		ldy #$2a		ldy #Line57 >> 8
.1ca8	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cab	a2 1e		ldx #$1e		ldx #Line58 & $FF
.1cad	a0 2a		ldy #$2a		ldy #Line58 >> 8
.1caf	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cb2	a2 79		ldx #$79		ldx #Line59 & $FF
.1cb4	a0 2a		ldy #$2a		ldy #Line59 >> 8
.1cb6	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cb9	a2 7d		ldx #$7d		ldx #Line60 & $FF
.1cbb	a0 2a		ldy #$2a		ldy #Line60 >> 8
.1cbd	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cc0	a2 fd		ldx #$fd		ldx #Line61 & $FF
.1cc2	a0 2a		ldy #$2a		ldy #Line61 >> 8
.1cc4	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cc7	a2 7c		ldx #$7c		ldx #Line62 & $FF
.1cc9	a0 2b		ldy #$2b		ldy #Line62 >> 8
.1ccb	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cce	a2 91		ldx #$91		ldx #Line63 & $FF
.1cd0	a0 2b		ldy #$2b		ldy #Line63 >> 8
.1cd2	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cd5	a2 d3		ldx #$d3		ldx #Line64 & $FF
.1cd7	a0 2b		ldy #$2b		ldy #Line64 >> 8
.1cd9	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cdc	a2 4a		ldx #$4a		ldx #Line65 & $FF
.1cde	a0 2c		ldy #$2c		ldy #Line65 >> 8
.1ce0	20 e9 37	jsr $37e9		jsr TOKOneLine
.1ce3	a2 af		ldx #$af		ldx #Line66 & $FF
.1ce5	a0 2c		ldy #$2c		ldy #Line66 >> 8
.1ce7	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cea	a2 d1		ldx #$d1		ldx #Line67 & $FF
.1cec	a0 2c		ldy #$2c		ldy #Line67 >> 8
.1cee	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cf1	a2 d5		ldx #$d5		ldx #Line68 & $FF
.1cf3	a0 2c		ldy #$2c		ldy #Line68 >> 8
.1cf5	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cf8	a2 03		ldx #$03		ldx #Line69 & $FF
.1cfa	a0 2d		ldy #$2d		ldy #Line69 >> 8
.1cfc	20 e9 37	jsr $37e9		jsr TOKOneLine
.1cff	a2 07		ldx #$07		ldx #Line70 & $FF
.1d01	a0 2d		ldy #$2d		ldy #Line70 >> 8
.1d03	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d06	a2 3e		ldx #$3e		ldx #Line71 & $FF
.1d08	a0 2d		ldy #$2d		ldy #Line71 >> 8
.1d0a	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d0d	a2 48		ldx #$48		ldx #Line72 & $FF
.1d0f	a0 2d		ldy #$2d		ldy #Line72 >> 8
.1d11	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d14	a2 ba		ldx #$ba		ldx #Line73 & $FF
.1d16	a0 2d		ldy #$2d		ldy #Line73 >> 8
.1d18	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d1b	a2 df		ldx #$df		ldx #Line74 & $FF
.1d1d	a0 2d		ldy #$2d		ldy #Line74 >> 8
.1d1f	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d22	a2 10		ldx #$10		ldx #Line75 & $FF
.1d24	a0 2e		ldy #$2e		ldy #Line75 >> 8
.1d26	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d29	a2 2b		ldx #$2b		ldx #Line76 & $FF
.1d2b	a0 2e		ldy #$2e		ldy #Line76 >> 8
.1d2d	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d30	a2 45		ldx #$45		ldx #Line77 & $FF
.1d32	a0 2e		ldy #$2e		ldy #Line77 >> 8
.1d34	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d37	a2 71		ldx #$71		ldx #Line78 & $FF
.1d39	a0 2e		ldy #$2e		ldy #Line78 >> 8
.1d3b	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d3e	a2 75		ldx #$75		ldx #Line79 & $FF
.1d40	a0 2e		ldy #$2e		ldy #Line79 >> 8
.1d42	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d45	a2 7d		ldx #$7d		ldx #Line80 & $FF
.1d47	a0 2e		ldy #$2e		ldy #Line80 >> 8
.1d49	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d4c	a2 89		ldx #$89		ldx #Line81 & $FF
.1d4e	a0 2e		ldy #$2e		ldy #Line81 >> 8
.1d50	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d53	a2 9a		ldx #$9a		ldx #Line82 & $FF
.1d55	a0 2e		ldy #$2e		ldy #Line82 >> 8
.1d57	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d5a	a2 9e		ldx #$9e		ldx #Line83 & $FF
.1d5c	a0 2e		ldy #$2e		ldy #Line83 >> 8
.1d5e	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d61	a2 d0		ldx #$d0		ldx #Line84 & $FF
.1d63	a0 2e		ldy #$2e		ldy #Line84 >> 8
.1d65	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d68	a2 21		ldx #$21		ldx #Line85 & $FF
.1d6a	a0 2f		ldy #$2f		ldy #Line85 >> 8
.1d6c	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d6f	a2 8c		ldx #$8c		ldx #Line86 & $FF
.1d71	a0 2f		ldy #$2f		ldy #Line86 >> 8
.1d73	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d76	a2 c0		ldx #$c0		ldx #Line87 & $FF
.1d78	a0 2f		ldy #$2f		ldy #Line87 >> 8
.1d7a	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d7d	a2 d1		ldx #$d1		ldx #Line88 & $FF
.1d7f	a0 2f		ldy #$2f		ldy #Line88 >> 8
.1d81	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d84	a2 3d		ldx #$3d		ldx #Line89 & $FF
.1d86	a0 30		ldy #$30		ldy #Line89 >> 8
.1d88	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d8b	a2 ad		ldx #$ad		ldx #Line90 & $FF
.1d8d	a0 30		ldy #$30		ldy #Line90 >> 8
.1d8f	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d92	a2 dd		ldx #$dd		ldx #Line91 & $FF
.1d94	a0 30		ldy #$30		ldy #Line91 >> 8
.1d96	20 e9 37	jsr $37e9		jsr TOKOneLine
.1d99	a2 29		ldx #$29		ldx #Line92 & $FF
.1d9b	a0 31		ldy #$31		ldy #Line92 >> 8
.1d9d	20 e9 37	jsr $37e9		jsr TOKOneLine
.1da0	a2 2d		ldx #$2d		ldx #Line93 & $FF
.1da2	a0 31		ldy #$31		ldy #Line93 >> 8
.1da4	20 e9 37	jsr $37e9		jsr TOKOneLine
.1da7	a2 31		ldx #$31		ldx #Line94 & $FF
.1da9	a0 31		ldy #$31		ldy #Line94 >> 8
.1dab	20 e9 37	jsr $37e9		jsr TOKOneLine
.1dae	a2 78		ldx #$78		ldx #Line95 & $FF
.1db0	a0 31		ldy #$31		ldy #Line95 >> 8
.1db2	20 e9 37	jsr $37e9		jsr TOKOneLine
.1db5	a2 f8		ldx #$f8		ldx #Line96 & $FF
.1db7	a0 31		ldy #$31		ldy #Line96 >> 8
.1db9	20 e9 37	jsr $37e9		jsr TOKOneLine
.1dbc	a2 24		ldx #$24		ldx #Line97 & $FF
.1dbe	a0 32		ldy #$32		ldy #Line97 >> 8
.1dc0	20 e9 37	jsr $37e9		jsr TOKOneLine
.1dc3	a2 79		ldx #$79		ldx #Line98 & $FF
.1dc5	a0 32		ldy #$32		ldy #Line98 >> 8
.1dc7	20 e9 37	jsr $37e9		jsr TOKOneLine
.1dca	a2 e7		ldx #$e7		ldx #Line99 & $FF
.1dcc	a0 32		ldy #$32		ldy #Line99 >> 8
.1dce	20 e9 37	jsr $37e9		jsr TOKOneLine
.1dd1	a2 30		ldx #$30		ldx #Line100 & $FF
.1dd3	a0 33		ldy #$33		ldy #Line100 >> 8
.1dd5	20 e9 37	jsr $37e9		jsr TOKOneLine
.1dd8	a2 7e		ldx #$7e		ldx #Line101 & $FF
.1dda	a0 33		ldy #$33		ldy #Line101 >> 8
.1ddc	20 e9 37	jsr $37e9		jsr TOKOneLine
.1ddf	a2 f1		ldx #$f1		ldx #Line102 & $FF
.1de1	a0 33		ldy #$33		ldy #Line102 >> 8
.1de3	20 e9 37	jsr $37e9		jsr TOKOneLine
.1de6	a2 64		ldx #$64		ldx #Line103 & $FF
.1de8	a0 34		ldy #$34		ldy #Line103 >> 8
.1dea	20 e9 37	jsr $37e9		jsr TOKOneLine
.1ded	a2 e6		ldx #$e6		ldx #Line104 & $FF
.1def	a0 34		ldy #$34		ldy #Line104 >> 8
.1df1	20 e9 37	jsr $37e9		jsr TOKOneLine
.1df4	a2 25		ldx #$25		ldx #Line105 & $FF
.1df6	a0 35		ldy #$35		ldy #Line105 >> 8
.1df8	20 e9 37	jsr $37e9		jsr TOKOneLine
.1dfb	a2 3d		ldx #$3d		ldx #Line106 & $FF
.1dfd	a0 35		ldy #$35		ldy #Line106 >> 8
.1dff	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e02	a2 76		ldx #$76		ldx #Line107 & $FF
.1e04	a0 35		ldy #$35		ldy #Line107 >> 8
.1e06	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e09	a2 bc		ldx #$bc		ldx #Line108 & $FF
.1e0b	a0 35		ldy #$35		ldy #Line108 >> 8
.1e0d	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e10	a2 f4		ldx #$f4		ldx #Line109 & $FF
.1e12	a0 35		ldy #$35		ldy #Line109 >> 8
.1e14	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e17	a2 75		ldx #$75		ldx #Line110 & $FF
.1e19	a0 36		ldy #$36		ldy #Line110 >> 8
.1e1b	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e1e	a2 79		ldx #$79		ldx #Line111 & $FF
.1e20	a0 36		ldy #$36		ldy #Line111 >> 8
.1e22	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e25	a2 cb		ldx #$cb		ldx #Line112 & $FF
.1e27	a0 36		ldy #$36		ldy #Line112 >> 8
.1e29	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e2c	a2 ee		ldx #$ee		ldx #Line113 & $FF
.1e2e	a0 36		ldy #$36		ldy #Line113 >> 8
.1e30	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e33	a2 37		ldx #$37		ldx #Line114 & $FF
.1e35	a0 37		ldy #$37		ldy #Line114 >> 8
.1e37	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e3a	a2 4d		ldx #$4d		ldx #Line115 & $FF
.1e3c	a0 37		ldy #$37		ldy #Line115 >> 8
.1e3e	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e41	a2 51		ldx #$51		ldx #Line116 & $FF
.1e43	a0 37		ldy #$37		ldy #Line116 >> 8
.1e45	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e48	a2 63		ldx #$63		ldx #Line117 & $FF
.1e4a	a0 37		ldy #$37		ldy #Line117 >> 8
.1e4c	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e4f	a2 67		ldx #$67		ldx #Line118 & $FF
.1e51	a0 37		ldy #$37		ldy #Line118 >> 8
.1e53	20 e9 37	jsr $37e9		jsr TOKOneLine
.1e56	a2 80		ldx #$80		ldx #Line119 & $FF
.1e58	a0 37		ldy #$37		ldy #Line119 >> 8
.1e5a	20 e9 37	jsr $37e9		jsr TOKOneLine

;******  Return to file: src/program/testing/testing.asm

.1e5d	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Processing file: src/program/testing/testdat.incx

.1e60					Line0:
>1e60	35 35 31 00				.text '551',0
.1e64					Line1:
>1e64	31 31 33 31 20 20 28 28			.text '1131  (("MMMAQDL" (',0
>1e6c	22 4d 4d 4d 41 51 44 4c 22 20 28 00
.1e78					Line2:
>1e78	37 31 31 20 2f 57 48 49			.text '711 /WHILE 1151 STEP 721 261 UNTIL 1171-XOR 521"IXZY"=STR$(1251"YP@SIBSH"1181-3.57',0
>1e80	4c 45 20 31 31 35 31 20 53 54 45 50 20 37 32 31
>1e90	20 32 36 31 20 55 4e 54 49 4c 20 31 31 37 31 2d
>1ea0	58 4f 52 20 35 32 31 22 49 58 5a 59 22 3d 53 54
>1eb0	52 24 28 31 32 35 31 22 59 50 40 53 49 42 53 48
>1ec0	22 31 31 38 31 2d 33 2e 35 37 00
.1ecb					Line3:
>1ecb	39 35 31 00				.text '951',0
.1ecf					Line4:
>1ecf	31 30 38 31 20 43 48 52			.text '1081 CHR$( 521"JEXIJXI"WEND 1071 A9W"UKQCUY"O7K0Z NEW 6.6 681 5.71 ""',0
>1ed7	24 28 20 35 32 31 22 4a 45 58 49 4a 58 49 22 57
>1ee7	45 4e 44 20 31 30 37 31 20 41 39 57 22 55 4b 51
>1ef7	43 55 59 22 4f 37 4b 30 5a 20 4e 45 57 20 36 2e
>1f07	36 20 36 38 31 20 35 2e 37 31 20 22 22 00
.1f15					Line5:
>1f15	35 37 31 20 20 37 36 31			.text '571  761 X1W5M',0
>1f1d	20 58 31 57 35 4d 00
.1f24					Line6:
>1f24	34 37 31 20 3e 20 2d 31			.text '471 > -1.9= --3.9"B" 6.3 381"FGC"EXIT 9.82 1261 F4 REM 261 >-8.53 U2K2*651;>-0.13',0
>1f2c	2e 39 3d 20 2d 2d 33 2e 39 22 42 22 20 36 2e 33
>1f3c	20 33 38 31 22 46 47 43 22 45 58 49 54 20 39 2e
>1f4c	38 32 20 31 32 36 31 20 46 34 20 52 45 4d 20 32
>1f5c	36 31 20 3e 2d 38 2e 35 33 20 55 32 4b 32 2a 36
>1f6c	35 31 3b 3e 2d 30 2e 31 33 00
.1f76					Line7:
>1f76	32 35 31 20 22 55 5a 4f			.text '251 "UZO" >/ WHILE A7$ + +521 1091 641< -2.87 811+ F1H9 SGN(601 NEW TO',0
>1f7e	22 20 3e 2f 20 57 48 49 4c 45 20 41 37 24 20 2b
>1f8e	20 2b 35 32 31 20 31 30 39 31 20 36 34 31 3c 20
>1f9e	2d 32 2e 38 37 20 38 31 31 2b 20 46 31 48 39 20
>1fae	53 47 4e 28 36 30 31 20 4e 45 57 20 54 4f 00
.1fbd					Line8:
>1fbd	31 30 36 31 20 36 34 31			.text '1061 641/ V1U7D6( 581-9.72-4.16 U3W8E P4 )U3W8E 331 >=/',0
>1fc5	2f 20 56 31 55 37 44 36 28 20 35 38 31 2d 39 2e
>1fd5	37 32 2d 34 2e 31 36 20 55 33 57 38 45 20 50 34
>1fe5	20 29 55 33 57 38 45 20 33 33 31 20 3e 3d 2f 00
.1ff5					Line9:
>1ff5	31 31 34 31 20 34 33 31			.text '1141 431 7.46 THEN 9.32 O9C(-7.29"OJ""GGB" LET "ATNKI"-9.58 SGN(Z4 /)',0
>1ffd	20 37 2e 34 36 20 54 48 45 4e 20 39 2e 33 32 20
>200d	4f 39 43 28 2d 37 2e 32 39 22 4f 4a 22 22 47 47
>201d	42 22 20 4c 45 54 20 22 41 54 4e 4b 49 22 2d 39
>202d	2e 35 38 20 53 47 4e 28 5a 34 20 2f 29 00
.203b					Line10:
>203b	36 31 31 20 22 4e 41 48			.text '611 "NAHM" A2V3*',0
>2043	4d 22 20 41 32 56 33 2a 00
.204c					Line11:
>204c	31 30 35 31 20 59 36 52			.text '1051 Y6R5 U WEND-0.88"XVR"',0
>2054	35 20 55 20 57 45 4e 44 2d 30 2e 38 38 22 58 56
>2064	52 22 00
.2067					Line12:
>2067	31 34 31 20 20 22 22 46			.text '141  ""F2O$ /8.04-9.3 9.94',0
>206f	32 4f 24 20 2f 38 2e 30 34 2d 39 2e 33 20 39 2e
>207f	39 34 00
.2082					Line13:
>2082	32 32 31 20 22 57 54 59			.text '221 "WTYS"*681 551 E1Q3 311 =261 -*"HKN"851-9.6 301 B S6E0K RAND()H5L2P',0
>208a	53 22 2a 36 38 31 20 35 35 31 20 45 31 51 33 20
>209a	33 31 31 20 3d 32 36 31 20 2d 2a 22 48 4b 4e 22
>20aa	38 35 31 2d 39 2e 36 20 33 30 31 20 42 20 53 36
>20ba	45 30 4b 20 52 41 4e 44 28 29 48 35 4c 32 50 00
.20ca					Line14:
>20ca	33 34 31 20 5a 34 20 48			.text '341 Z4 H "WKXGSZ"401 FOR 791 R8V6M CALL - )>LEFT$( 1051 >7.92 "GFSCWD"',0
>20d2	20 22 57 4b 58 47 53 5a 22 34 30 31 20 46 4f 52
>20e2	20 37 39 31 20 52 38 56 36 4d 20 43 41 4c 4c 20
>20f2	2d 20 29 3e 4c 45 46 54 24 28 20 31 30 35 31 20
>2102	3e 37 2e 39 32 20 22 47 46 53 43 57 44 22 00
.2111					Line15:
>2111	31 30 34 31 00				.text '1041',0
.2116					Line16:
>2116	39 33 31 00				.text '931',0
.211a					Line17:
>211a	37 36 31 20 20 22 22 51			.text '761  ""Q 1051) )DO / ==O5L$,H5L2P D( )5.9 121 LEFT$(MID$(=151 )>0.26"VG@GOP"<O5L$ , *',0
>2122	20 31 30 35 31 29 20 29 44 4f 20 2f 20 3d 3d 4f
>2132	35 4c 24 2c 48 35 4c 32 50 20 44 28 20 29 35 2e
>2142	39 20 31 32 31 20 4c 45 46 54 24 28 4d 49 44 24
>2152	28 3d 31 35 31 20 29 3e 30 2e 32 36 22 56 47 40
>2162	47 4f 50 22 3c 4f 35 4c 24 20 2c 20 2a 00
.2170					Line18:
>2170	31 32 37 31 00				.text '1271',0
.2175					Line19:
>2175	33 31 31 20 50 35 4f 38			.text '311 P5O8W5$3.98 LET * *LEFT$(681 4.25( <711 871: "YD@YK"3.55 0.91 V7M6E3 A8Z4I-1.46 +',0
>217d	57 35 24 33 2e 39 38 20 4c 45 54 20 2a 20 2a 4c
>218d	45 46 54 24 28 36 38 31 20 34 2e 32 35 28 20 3c
>219d	37 31 31 20 38 37 31 3a 20 22 59 44 40 59 4b 22
>21ad	33 2e 35 35 20 30 2e 39 31 20 56 37 4d 36 45 33
>21bd	20 41 38 5a 34 49 2d 31 2e 34 36 20 2b 00
.21cb					Line20:
>21cb	37 32 31 20 34 32 31 2a			.text '721 421*1151 O-1101 611',0
>21d3	31 31 35 31 20 4f 2d 31 31 30 31 20 36 31 31 00
.21e3					Line21:
>21e3	33 36 31 00				.text '361',0
.21e7					Line22:
>21e7	31 39 31 20 30 2e 38 36			.text '191 0.86 K4G2Z "L"CHR$("ULK"1.96 111-=',0
>21ef	20 4b 34 47 32 5a 20 22 4c 22 43 48 52 24 28 22
>21ff	55 4c 4b 22 31 2e 39 36 20 31 31 31 2d 3d 00
.220e					Line23:
>220e	33 30 31 20 28 43 36 46			.text '301 (C6F5I4-7.45 -7.25- "XVAQ" , "DOOGZGV"= O9C(- =O6W 1171*',0
>2216	35 49 34 2d 37 2e 34 35 20 2d 37 2e 32 35 2d 20
>2226	22 58 56 41 51 22 20 2c 20 22 44 4f 4f 47 5a 47
>2236	56 22 3d 20 4f 39 43 28 2d 20 3d 4f 36 57 20 31
>2246	31 37 31 2a 00
.224b					Line24:
>224b	31 36 31 20 20 4b 37 20			.text '161  K7 741"MCQ" 101 1021 4.52 <',0
>2253	37 34 31 22 4d 43 51 22 20 31 30 31 20 31 30 32
>2263	31 20 34 2e 35 32 20 3c 00
.226c					Line25:
>226c	31 32 38 31 20 22 22 22			.text '1281 """XQ"521 261"R"5.44 K9D4G7""K4G2Z-5.19 841 *>C(A8Z4I DEC(S7$851 RIGHT$(->',0
>2274	58 51 22 35 32 31 20 32 36 31 22 52 22 35 2e 34
>2284	34 20 4b 39 44 34 47 37 22 22 4b 34 47 32 5a 2d
>2294	35 2e 31 39 20 38 34 31 20 2a 3e 43 28 41 38 5a
>22a4	34 49 20 44 45 43 28 53 37 24 38 35 31 20 52 49
>22b4	47 48 54 24 28 2d 3e 00
.22bc					Line26:
>22bc	36 35 31 20 36 2e 32 33			.text '651 6.23<<-4.02>- - > "HXDOWPA"P1S5P5 L-5.23 1101 TO>>9.99 B9T2 HEX$( ( 941 991 1231-1.3 C 811',0
>22c4	3c 3c 2d 34 2e 30 32 3e 2d 20 2d 20 3e 20 22 48
>22d4	58 44 4f 57 50 41 22 50 31 53 35 50 35 20 4c 2d
>22e4	35 2e 32 33 20 31 31 30 31 20 54 4f 3e 3e 39 2e
>22f4	39 39 20 42 39 54 32 20 48 45 58 24 28 20 28 20
>2304	39 34 31 20 39 39 31 20 31 32 33 31 2d 31 2e 33
>2314	20 43 20 38 31 31 00
.231b					Line27:
>231b	31 35 31 20 28 31 30 30			.text '151 (1001 -9.1 1091 "WUBU"721 B7W0V( Z0 281*)',0
>2323	31 20 2d 39 2e 31 20 31 30 39 31 20 22 57 55 42
>2333	55 22 37 32 31 20 42 37 57 30 56 28 20 5a 30 20
>2343	32 38 31 2a 29 00
.2349					Line28:
>2349	31 31 33 31 20 28 20 4d			.text '1131 ( MOD D3H8E"MP@FFH"1261 H2(ELSE"" +RND(1261 =731-5.58 S3 STEP -7.88 9.7"HKNSL"',0
>2351	4f 44 20 44 33 48 38 45 22 4d 50 40 46 46 48 22
>2361	31 32 36 31 20 48 32 28 45 4c 53 45 22 22 20 2b
>2371	52 4e 44 28 31 32 36 31 20 3d 37 33 31 2d 35 2e
>2381	35 38 20 53 33 20 53 54 45 50 20 2d 37 2e 38 38
>2391	20 39 2e 37 22 48 4b 4e 53 4c 22 00
.239d					Line29:
>239d	31 31 39 31 20 20 4c 4f			.text '1191  LOAD',0
>23a5	41 44 00
.23a8					Line30:
>23a8	31 30 31 20 22 4b 45 22			.text '101 "KE"X4W9K8 M6K1U-7.52',0
>23b0	58 34 57 39 4b 38 20 4d 36 4b 31 55 2d 37 2e 35
>23c0	32 00
.23c2					Line31:
>23c2	34 36 31 20 20 31 32 39			.text '461  1291 C6F5I4 "JXEVVE"* =2.72"ZFNQGE" X4W9K8"FQAPQNJ"1021 P9F7H 1231 LET 771 -H8',0
>23ca	31 20 43 36 46 35 49 34 20 22 4a 58 45 56 56 45
>23da	22 2a 20 3d 32 2e 37 32 22 5a 46 4e 51 47 45 22
>23ea	20 58 34 57 39 4b 38 22 46 51 41 50 51 4e 4a 22
>23fa	31 30 32 31 20 50 39 46 37 48 20 31 32 33 31 20
>240a	4c 45 54 20 37 37 31 20 2d 48 38 00
.2416					Line32:
>2416	39 30 31 20 22 22 20 36			.text '901 "" 681<=441 541 9.49 641 ASC(1.28 1001 181"LYOYHZ" 7.02',0
>241e	38 31 3c 3d 34 34 31 20 35 34 31 20 39 2e 34 39
>242e	20 36 34 31 20 41 53 43 28 31 2e 32 38 20 31 30
>243e	30 31 20 31 38 31 22 4c 59 4f 59 48 5a 22 20 37
>244e	2e 30 32 00
.2452					Line33:
>2452	33 35 31 20 22 48 46 4f			.text '351 "HFOK"DIV+) ("QBFZ" (1.06(SYS(7.03 8.57("OOLF"371 H2 * (',0
>245a	4b 22 44 49 56 2b 29 20 28 22 51 42 46 5a 22 20
>246a	28 31 2e 30 36 28 53 59 53 28 37 2e 30 33 20 38
>247a	2e 35 37 28 22 4f 4f 4c 46 22 33 37 31 20 48 32
>248a	20 2a 20 28 00
.248f					Line34:
>248f	31 31 35 31 20 22 5a 52			.text '1151 "ZR" -1.36 2.29 G4V0G"ZNHH" P9F7H C T0F1X4 8.32 0.51 741-7.69-8.43 541-2.28 C(-1.5 571-6.27',0
>2497	22 20 2d 31 2e 33 36 20 32 2e 32 39 20 47 34 56
>24a7	30 47 22 5a 4e 48 48 22 20 50 39 46 37 48 20 43
>24b7	20 54 30 46 31 58 34 20 38 2e 33 32 20 30 2e 35
>24c7	31 20 37 34 31 2d 37 2e 36 39 2d 38 2e 34 33 20
>24d7	35 34 31 2d 32 2e 32 38 20 43 28 2d 31 2e 35 20
>24e7	35 37 31 2d 36 2e 32 37 00
.24f0					Line35:
>24f0	31 37 31 20 20 37 30 31			.text '171  701 L0U8 CLEAR O2Q8L$ 3.87 3.95 831 K$9.0 S7$<=C7L8I1 OR *',0
>24f8	20 4c 30 55 38 20 43 4c 45 41 52 20 4f 32 51 38
>2508	4c 24 20 33 2e 38 37 20 33 2e 39 35 20 38 33 31
>2518	20 4b 24 39 2e 30 20 53 37 24 3c 3d 43 37 4c 38
>2528	49 31 20 4f 52 20 2a 00
.2530					Line36:
>2530	35 38 31 20 20 2d 34 2e			.text '581  -4.19 S6E0K C V7N 391 FOR ASSERT*',0
>2538	31 39 20 53 36 45 30 4b 20 43 20 56 37 4e 20 33
>2548	39 31 20 46 4f 52 20 41 53 53 45 52 54 2a 00
.2557					Line37:
>2557	34 34 31 20 52 45 50 45			.text '441 REPEAT',0
>255f	41 54 00
.2562					Line38:
>2562	38 31 31 20 4f 35 4c 24			.text '811 O5L$',0
>256a	00
.256b					Line39:
>256b	36 36 31 20 4f 34 5a 31			.text '661 O4Z1$/L8I5(>>= )O P$',0
>2573	24 2f 4c 38 49 35 28 3e 3e 3d 20 29 4f 20 50 24
>2583	00
.2584					Line40:
>2584	38 33 31 20 20 37 2e 30			.text '831  7.0 P5O8W5$ -2.15 181 631 1201 -9.96 RAND(=-< 1131 9.62 DIV 451 581 -1.21 741 591"DKLYC"1081 431 1101 /(',0
>258c	20 50 35 4f 38 57 35 24 20 2d 32 2e 31 35 20 31
>259c	38 31 20 36 33 31 20 31 32 30 31 20 2d 39 2e 39
>25ac	36 20 52 41 4e 44 28 3d 2d 3c 20 31 31 33 31 20
>25bc	39 2e 36 32 20 44 49 56 20 34 35 31 20 35 38 31
>25cc	20 2d 31 2e 32 31 20 37 34 31 20 35 39 31 22 44
>25dc	4b 4c 59 43 22 31 30 38 31 20 34 33 31 20 31 31
>25ec	30 31 20 2f 28 00
.25f2					Line41:
>25f2	36 33 31 20 3d 32 2e 30			.text '631 =2.0)R0G0R0$$"D"311 U7H2B0 "PGVGLWB"-9.33 381-2.73 (K9D4G7 581 0.88',0
>25fa	29 52 30 47 30 52 30 24 24 22 44 22 33 31 31 20
>260a	55 37 48 32 42 30 20 22 50 47 56 47 4c 57 42 22
>261a	2d 39 2e 33 33 20 33 38 31 2d 32 2e 37 33 20 28
>262a	4b 39 44 34 47 37 20 35 38 31 20 30 2e 38 38 00
.263a					Line42:
>263a	31 32 32 31 20 31 38 31			.text '1221 181 STEP A8Z4I* ( "" B9T2 861 8.71 5.65 "IM" H2 501 * 921 1111 Y1K LOAD"ZAQA" *441 "W" "FKGXP"',0
>2642	20 53 54 45 50 20 41 38 5a 34 49 2a 20 28 20 22
>2652	22 20 42 39 54 32 20 38 36 31 20 38 2e 37 31 20
>2662	35 2e 36 35 20 22 49 4d 22 20 48 32 20 35 30 31
>2672	20 2a 20 39 32 31 20 31 31 31 31 20 59 31 4b 20
>2682	4c 4f 41 44 22 5a 41 51 41 22 20 2a 34 34 31 20
>2692	22 57 22 20 22 46 4b 47 58 50 22 00
.269e					Line43:
>269e	31 35 31 20 3a 2a 20 22			.text '151 :* """KMHKNHGC" ASSERT 0.44/=)>841 3.94 P$LET"EIRRM"1071',0
>26a6	22 22 4b 4d 48 4b 4e 48 47 43 22 20 41 53 53 45
>26b6	52 54 20 30 2e 34 34 2f 3d 29 3e 38 34 31 20 33
>26c6	2e 39 34 20 50 24 4c 45 54 22 45 49 52 52 4d 22
>26d6	31 30 37 31 00
.26db					Line44:
>26db	31 30 36 31 00				.text '1061',0
.26e0					Line45:
>26e0	31 31 38 31 20 4b 39 44			.text '1181 K9D4G7 0.01 +-6.64 "X"/ F9A3$"X" >LOAD A4R5T6 "KOASRQE")3.98 -8.34 OR 9.49 O 1281"WQAJPMMS""ZK"/',0
>26e8	34 47 37 20 30 2e 30 31 20 2b 2d 36 2e 36 34 20
>26f8	22 58 22 2f 20 46 39 41 33 24 22 58 22 20 3e 4c
>2708	4f 41 44 20 41 34 52 35 54 36 20 22 4b 4f 41 53
>2718	52 51 45 22 29 33 2e 39 38 20 2d 38 2e 33 34 20
>2728	4f 52 20 39 2e 34 39 20 4f 20 31 32 38 31 22 57
>2738	51 41 4a 50 4d 4d 53 22 22 5a 4b 22 2f 00
.2746					Line46:
>2746	35 35 31 20 2d 33 2e 39			.text '551 -3.93"B" =+',0
>274e	33 22 42 22 20 3d 2b 00
.2756					Line47:
>2756	31 32 35 31 20 2f 34 2e			.text '1251 /4.06 SYS C6F5I4> LET"JM" 1081""P1S5P5 811 "AVZKHX"<571 )>7.47 >+ "ESNKJ" 8.7 DIM(',0
>275e	30 36 20 53 59 53 20 43 36 46 35 49 34 3e 20 4c
>276e	45 54 22 4a 4d 22 20 31 30 38 31 22 22 50 31 53
>277e	35 50 35 20 38 31 31 20 22 41 56 5a 4b 48 58 22
>278e	3c 35 37 31 20 29 3e 37 2e 34 37 20 3e 2b 20 22
>279e	45 53 4e 4b 4a 22 20 38 2e 37 20 44 49 4d 28 00
.27ae					Line48:
>27ae	31 31 39 31 20 43 37 4c			.text '1191 C7L8I1( >+ RUN 8.54 8.69 >+*1141',0
>27b6	38 49 31 28 20 3e 2b 20 52 55 4e 20 38 2e 35 34
>27c6	20 38 2e 36 39 20 3e 2b 2a 31 31 34 31 00
.27d4					Line49:
>27d4	33 38 31 20 38 32 31 20			.text '381 821 "T"G4V0G 261',0
>27dc	22 54 22 47 34 56 30 47 20 32 36 31 00
.27e9					Line50:
>27e9	35 32 31 20 20 44 38 52			.text '521  D8R4B4-9.19 -1.2 H9P3"KDHIVGR"C* ) *LIST O2G5E( MOD"KDFNEVNR" ""661 1041 361"PZSGN"RND( 1181"USHQEYM"571"PTFBMQ"P5O8W5$-<X1W5M 1.13 191 E1R6I3',0
>27f1	34 42 34 2d 39 2e 31 39 20 2d 31 2e 32 20 48 39
>2801	50 33 22 4b 44 48 49 56 47 52 22 43 2a 20 29 20
>2811	2a 4c 49 53 54 20 4f 32 47 35 45 28 20 4d 4f 44
>2821	22 4b 44 46 4e 45 56 4e 52 22 20 22 22 36 36 31
>2831	20 31 30 34 31 20 33 36 31 22 50 5a 53 47 4e 22
>2841	52 4e 44 28 20 31 31 38 31 22 55 53 48 51 45 59
>2851	4d 22 35 37 31 22 50 54 46 42 4d 51 22 50 35 4f
>2861	38 57 35 24 2d 3c 58 31 57 35 4d 20 31 2e 31 33
>2871	20 31 39 31 20 45 31 52 36 49 33 00
.287d					Line51:
>287d	39 37 31 20 33 2e 38 35			.text '971 3.85 Z5S1S"PXYA""JL@UJGUX" (<+ -6.76* 141 P$ LET"ZU@O"DO-3.66- C6L U0V )741 361 """IHFGG@SM"U-4.56/> ; -9.55',0
>2885	20 5a 35 53 31 53 22 50 58 59 41 22 22 4a 4c 40
>2895	55 4a 47 55 58 22 20 28 3c 2b 20 2d 36 2e 37 36
>28a5	2a 20 31 34 31 20 50 24 20 4c 45 54 22 5a 55 40
>28b5	4f 22 44 4f 2d 33 2e 36 36 2d 20 43 36 4c 20 55
>28c5	30 56 20 29 37 34 31 20 33 36 31 20 22 22 22 49
>28d5	48 46 47 47 40 53 4d 22 55 2d 34 2e 35 36 2f 3e
>28e5	20 3b 20 2d 39 2e 35 35 00
.28ee					Line52:
>28ee	34 31 31 20 2d 32 2e 35			.text '411 -2.55"VPBYJX" P7V>>3.19 2.27 1211 * 7.38-1.4 LET UNTIL O6W +>="J" ( "DHQ"611 NEW + 351 311',0
>28f6	35 22 56 50 42 59 4a 58 22 20 50 37 56 3e 3e 33
>2906	2e 31 39 20 32 2e 32 37 20 31 32 31 31 20 2a 20
>2916	37 2e 33 38 2d 31 2e 34 20 4c 45 54 20 55 4e 54
>2926	49 4c 20 4f 36 57 20 2b 3e 3d 22 4a 22 20 28 20
>2936	22 44 48 51 22 36 31 31 20 4e 45 57 20 2b 20 33
>2946	35 31 20 33 31 31 00
.294d					Line53:
>294d	31 36 31 20 34 31 31 22			.text '161 411"" "QMPZ""GHRMT"-1111) +"RAP@CCNO""BMFZK""QXKUH" "M" U0V LEFT$(-1.3 271 ELSE SYS -8.7 INKEY$( 371',0
>2955	22 20 22 51 4d 50 5a 22 22 47 48 52 4d 54 22 2d
>2965	31 31 31 31 29 20 2b 22 52 41 50 40 43 43 4e 4f
>2975	22 22 42 4d 46 5a 4b 22 22 51 58 4b 55 48 22 20
>2985	22 4d 22 20 55 30 56 20 4c 45 46 54 24 28 2d 31
>2995	2e 33 20 32 37 31 20 45 4c 53 45 20 53 59 53 20
>29a5	2d 38 2e 37 20 49 4e 4b 45 59 24 28 20 33 37 31
>29b5	00
.29b6					Line54:
>29b6	34 35 31 00				.text '451',0
.29ba					Line55:
>29ba	36 34 31 20 20 36 2e 34			.text '641  6.44 L0U8/W1E2$ WHILE 7.08 4.91 181 SGN(-7.21 8.31 "RKDYGZHA"',0
>29c2	34 20 4c 30 55 38 2f 57 31 45 32 24 20 57 48 49
>29d2	4c 45 20 37 2e 30 38 20 34 2e 39 31 20 31 38 31
>29e2	20 53 47 4e 28 2d 37 2e 32 31 20 38 2e 33 31 20
>29f2	22 52 4b 44 59 47 5a 48 41 22 00
.29fd					Line56:
>29fd	39 31 31 20 3c 20 44 34			.text '911 < D4 MOD H9P3',0
>2a05	20 4d 4f 44 20 48 39 50 33 00
.2a0f					Line57:
>2a0f	31 30 37 31 20 41 53 43			.text '1071 ASC(-7.06',0
>2a17	28 2d 37 2e 30 36 00
.2a1e					Line58:
>2a1e	31 30 38 31 20 2f 20 4c			.text '1081 / LEFT$("HHO""UJS"K7 L 9.68"UIJD@NG""JCMJ" ="QRGI""HNX"451"BHMN" >241 U3V 751 161( <=',0
>2a26	45 46 54 24 28 22 48 48 4f 22 22 55 4a 53 22 4b
>2a36	37 20 4c 20 39 2e 36 38 22 55 49 4a 44 40 4e 47
>2a46	22 22 4a 43 4d 4a 22 20 3d 22 51 52 47 49 22 22
>2a56	48 4e 58 22 34 35 31 22 42 48 4d 4e 22 20 3e 32
>2a66	34 31 20 55 33 56 20 37 35 31 20 31 36 31 28 20
>2a76	3c 3d 00
.2a79					Line59:
>2a79	31 31 31 00				.text '111',0
.2a7d					Line60:
>2a7d	39 39 31 20 43 48 52 24			.text '991 CHR$( 1261-4.11"M"<<MOD PROC ELSE STEP 721 4.86 571 EVENT( S6E0K "L@TF""W"741 A7$ - P5O8W5$X1W5M-9.77 -9.3 X1W5M -8.92 0.79',0
>2a85	28 20 31 32 36 31 2d 34 2e 31 31 22 4d 22 3c 3c
>2a95	4d 4f 44 20 50 52 4f 43 20 45 4c 53 45 20 53 54
>2aa5	45 50 20 37 32 31 20 34 2e 38 36 20 35 37 31 20
>2ab5	45 56 45 4e 54 28 20 53 36 45 30 4b 20 22 4c 40
>2ac5	54 46 22 22 57 22 37 34 31 20 41 37 24 20 2d 20
>2ad5	50 35 4f 38 57 35 24 58 31 57 35 4d 2d 39 2e 37
>2ae5	37 20 2d 39 2e 33 20 58 31 57 35 4d 20 2d 38 2e
>2af5	39 32 20 30 2e 37 39 00
.2afd					Line61:
>2afd	35 39 31 20 2d 34 2e 38			.text '591 -4.85 -8.86-5.42 "PDQSKN"- <U2K2 M6K1U "VDBV"621 STOP>XOR "UNKDZXXP"THEN /-P7V "FTIW"U0V 1141>/"ZJZKE"<>"A" 971 FRAC( "TO"',0
>2b05	35 20 2d 38 2e 38 36 2d 35 2e 34 32 20 22 50 44
>2b15	51 53 4b 4e 22 2d 20 3c 55 32 4b 32 20 4d 36 4b
>2b25	31 55 20 22 56 44 42 56 22 36 32 31 20 53 54 4f
>2b35	50 3e 58 4f 52 20 22 55 4e 4b 44 5a 58 58 50 22
>2b45	54 48 45 4e 20 2f 2d 50 37 56 20 22 46 54 49 57
>2b55	22 55 30 56 20 31 31 34 31 3e 2f 22 5a 4a 5a 4b
>2b65	45 22 3c 3e 22 41 22 20 39 37 31 20 46 52 41 43
>2b75	28 20 22 54 4f 22 00
.2b7c					Line62:
>2b7c	31 30 32 31 20 22 53 22			.text '1021 "S""NQJB"<*"GZ"',0
>2b84	22 4e 51 4a 42 22 3c 2a 22 47 5a 22 00
.2b91					Line63:
>2b91	31 30 35 31 20 54 33 49			.text '1051 T3I6A"PJY@YOIS" =<STOP"AFCTU" U7H2B0 261 D3H8E 651"UCWLBOPL"',0
>2b99	36 41 22 50 4a 59 40 59 4f 49 53 22 20 3d 3c 53
>2ba9	54 4f 50 22 41 46 43 54 55 22 20 55 37 48 32 42
>2bb9	30 20 32 36 31 20 44 33 48 38 45 20 36 35 31 22
>2bc9	55 43 57 4c 42 4f 50 4c 22 00
.2bd3					Line64:
>2bd3	31 32 31 31 20 20 2d 38			.text '1211  -8.48 5.53 3.89"" 1211"BJAJM" +PROC-5.39 211 <> "QE@FD"401 8.37 1021/(CLEAR "E"=441 H9/SGN( NEXT U3V>= 8.58 9.62',0
>2bdb	2e 34 38 20 35 2e 35 33 20 33 2e 38 39 22 22 20
>2beb	31 32 31 31 22 42 4a 41 4a 4d 22 20 2b 50 52 4f
>2bfb	43 2d 35 2e 33 39 20 32 31 31 20 3c 3e 20 22 51
>2c0b	45 40 46 44 22 34 30 31 20 38 2e 33 37 20 31 30
>2c1b	32 31 2f 28 43 4c 45 41 52 20 22 45 22 3d 34 34
>2c2b	31 20 48 39 2f 53 47 4e 28 20 4e 45 58 54 20 55
>2c3b	33 56 3e 3d 20 38 2e 35 38 20 39 2e 36 32 00
.2c4a					Line65:
>2c4a	38 30 31 20 20 29 20 2d			.text '801  ) -8.8 -0.16"F" = "R" "IF"1.59<171 -3.95 331 881) 8.36"Q" 261 -8.2 111 "NQII@CG@"ELSE C2G1:121+',0
>2c52	38 2e 38 20 2d 30 2e 31 36 22 46 22 20 3d 20 22
>2c62	52 22 20 22 49 46 22 31 2e 35 39 3c 31 37 31 20
>2c72	2d 33 2e 39 35 20 33 33 31 20 38 38 31 29 20 38
>2c82	2e 33 36 22 51 22 20 32 36 31 20 2d 38 2e 32 20
>2c92	31 31 31 20 22 4e 51 49 49 40 43 47 40 22 45 4c
>2ca2	53 45 20 43 32 47 31 3a 31 32 31 2b 00
.2caf					Line66:
>2caf	39 38 31 20 44 34 20 35			.text '981 D4 5.82 ((571(+231"ROTLJVFU"*',0
>2cb7	2e 38 32 20 28 28 35 37 31 28 2b 32 33 31 22 52
>2cc7	4f 54 4c 4a 56 46 55 22 2a 00
.2cd1					Line67:
>2cd1	33 35 31 00				.text '351',0
.2cd5					Line68:
>2cd5	31 39 31 20 22 5a 4f 43			.text '191 "ZOCZLB"+"GNRM" 4.82 FRAC( 661<CALL 121 <',0
>2cdd	5a 4c 42 22 2b 22 47 4e 52 4d 22 20 34 2e 38 32
>2ced	20 46 52 41 43 28 20 36 36 31 3c 43 41 4c 4c 20
>2cfd	31 32 31 20 3c 00
.2d03					Line69:
>2d03	39 38 31 00				.text '981',0
.2d07					Line70:
>2d07	39 34 31 20 20 4c 45 54			.text '941  LET F4 F2O$=351 H2"" Y6R5 RND(< O6W 211 F4E2W8, =',0
>2d0f	20 46 34 20 46 32 4f 24 3d 33 35 31 20 48 32 22
>2d1f	22 20 59 36 52 35 20 52 4e 44 28 3c 20 4f 36 57
>2d2f	20 32 31 31 20 46 34 45 32 57 38 2c 20 3d 00
.2d3e					Line71:
>2d3e	33 31 31 20 20 4c 45 4e			.text '311  LEN(',0
>2d46	28 00
.2d48					Line72:
>2d48	31 32 34 31 20 20 55 33			.text '1241  U3V Z3V8W2 "VTNN" 861-5.81 SQR(/<= SGN(P1S5P5 4.05 *421<>LOOP"FNWRJRFD"1121 LEFT$( * SQR(941 - 971 6.45 151',0
>2d50	56 20 5a 33 56 38 57 32 20 22 56 54 4e 4e 22 20
>2d60	38 36 31 2d 35 2e 38 31 20 53 51 52 28 2f 3c 3d
>2d70	20 53 47 4e 28 50 31 53 35 50 35 20 34 2e 30 35
>2d80	20 2a 34 32 31 3c 3e 4c 4f 4f 50 22 46 4e 57 52
>2d90	4a 52 46 44 22 31 31 32 31 20 4c 45 46 54 24 28
>2da0	20 2a 20 53 51 52 28 39 34 31 20 2d 20 39 37 31
>2db0	20 36 2e 34 35 20 31 35 31 00
.2dba					Line73:
>2dba	31 32 34 31 20 52 38 56			.text '1241 R8V6M >"MWHCPQ"+( "EDBLK"-6.61-',0
>2dc2	36 4d 20 3e 22 4d 57 48 43 50 51 22 2b 28 20 22
>2dd2	45 44 42 4c 4b 22 2d 36 2e 36 31 2d 00
.2ddf					Line74:
>2ddf	32 37 31 20 2d 34 2e 34			.text '271 -4.49 3.33 1111 K6K3 "BNUKME""E@" "TQCKWLOR"',0
>2de7	39 20 33 2e 33 33 20 31 31 31 31 20 4b 36 4b 33
>2df7	20 22 42 4e 55 4b 4d 45 22 22 45 40 22 20 22 54
>2e07	51 43 4b 57 4c 4f 52 22 00
.2e10					Line75:
>2e10	31 32 37 31 20 2a 42 37			.text '1271 *B7W0V("J" SAVE 1061)',0
>2e18	57 30 56 28 22 4a 22 20 53 41 56 45 20 31 30 36
>2e28	31 29 00
.2e2b					Line76:
>2e2b	33 30 31 20 31 30 32 31			.text '301 1021 ()-4.52 > S8J3V7',0
>2e33	20 28 29 2d 34 2e 35 32 20 3e 20 53 38 4a 33 56
>2e43	37 00
.2e45					Line77:
>2e45	31 39 31 20 37 2e 36 38			.text '191 7.68"""@VIOHLI" +LET 2.46"LWA"K3 C9Q7P2',0
>2e4d	22 22 22 40 56 49 4f 48 4c 49 22 20 2b 4c 45 54
>2e5d	20 32 2e 34 36 22 4c 57 41 22 4b 33 20 43 39 51
>2e6d	37 50 32 00
.2e71					Line78:
>2e71	32 31 31 00				.text '211',0
.2e75					Line79:
>2e75	31 30 38 31 20 3c 3c 00			.text '1081 <<',0
.2e7d					Line80:
>2e7d	37 34 31 20 35 2e 37 35			.text '741 5.75 TO',0
>2e85	20 54 4f 00
.2e89					Line81:
>2e89	37 36 31 20 57 31 45 32			.text '761 W1E2$-6.03 <',0
>2e91	24 2d 36 2e 30 33 20 3c 00
.2e9a					Line82:
>2e9a	34 36 31 00				.text '461',0
.2e9e					Line83:
>2e9e	32 30 31 20 2d 36 2e 34			.text '201 -6.44 J9C1U6 1091 CLEAR STEP-"" 3.36"W")1111>',0
>2ea6	34 20 4a 39 43 31 55 36 20 31 30 39 31 20 43 4c
>2eb6	45 41 52 20 53 54 45 50 2d 22 22 20 33 2e 33 36
>2ec6	22 57 22 29 31 31 31 31 3e 00
.2ed0					Line84:
>2ed0	31 31 35 31 20 22 56 40			.text '1151 "V@ZTN" 0.67-8.04 861 )"FCBUTAY"DEC( +531*3.87"ACZGU"B5Q0T(1131 "BD" 7.01 )',0
>2ed8	5a 54 4e 22 20 30 2e 36 37 2d 38 2e 30 34 20 38
>2ee8	36 31 20 29 22 46 43 42 55 54 41 59 22 44 45 43
>2ef8	28 20 2b 35 33 31 2a 33 2e 38 37 22 41 43 5a 47
>2f08	55 22 42 35 51 30 54 28 31 31 33 31 20 22 42 44
>2f18	22 20 37 2e 30 31 20 29 00
.2f21					Line85:
>2f21	39 37 31 20 32 33 31 20			.text '971 231 ;"ISJLIXBM" 681 THEN 7.03 U =C6F5I4 -6.06"OBXR"EXIT "RVK"3.25 LOOP 1.9 O4Z1$ 1111 K6K3= "OWNZVZJW"',0
>2f29	3b 22 49 53 4a 4c 49 58 42 4d 22 20 36 38 31 20
>2f39	54 48 45 4e 20 37 2e 30 33 20 55 20 3d 43 36 46
>2f49	35 49 34 20 2d 36 2e 30 36 22 4f 42 58 52 22 45
>2f59	58 49 54 20 22 52 56 4b 22 33 2e 32 35 20 4c 4f
>2f69	4f 50 20 31 2e 39 20 4f 34 5a 31 24 20 31 31 31
>2f79	31 20 4b 36 4b 33 3d 20 22 4f 57 4e 5a 56 5a 4a
>2f89	57 22 00
.2f8c					Line86:
>2f8c	37 35 31 20 5a 34 22 5a			.text '751 Z4"ZOWOZI"O5L$S3 N 661 H8( +6.77 1241 111* 1.76',0
>2f94	4f 57 4f 5a 49 22 4f 35 4c 24 53 33 20 4e 20 36
>2fa4	36 31 20 48 38 28 20 2b 36 2e 37 37 20 31 32 34
>2fb4	31 20 31 31 31 2a 20 31 2e 37 36 00
.2fc0					Line87:
>2fc0	35 32 31 20 20 4c 30 55			.text '521  L0U8 X4W9K8',0
>2fc8	38 20 58 34 57 39 4b 38 00
.2fd1					Line88:
>2fd1	32 34 31 20 20 32 2e 39			.text '241  2.97-4.27 E1Q3 O9C(751( *"LFKSPSB"1041 451 NEXT+F4E2W8"ZWZ"""F1C4V5 381 SAVE"UV" "XVDXISA""V"1291 TIME',0
>2fd9	37 2d 34 2e 32 37 20 45 31 51 33 20 4f 39 43 28
>2fe9	37 35 31 28 20 2a 22 4c 46 4b 53 50 53 42 22 31
>2ff9	30 34 31 20 34 35 31 20 4e 45 58 54 2b 46 34 45
>3009	32 57 38 22 5a 57 5a 22 22 22 46 31 43 34 56 35
>3019	20 33 38 31 20 53 41 56 45 22 55 56 22 20 22 58
>3029	56 44 58 49 53 41 22 22 56 22 31 32 39 31 20 54
>3039	49 4d 45 00
.303d					Line89:
>303d	35 31 31 20 20 34 39 31			.text '511  491 +NEW O5L$=1191="MN@SZ"9.12="F") -"VSQQWOZ" *-0.89 961<-6.49-5.12<"XEVTLIG"(-6.88 SQR( 6.31""V7M6E3 771',0
>3045	20 2b 4e 45 57 20 4f 35 4c 24 3d 31 31 39 31 3d
>3055	22 4d 4e 40 53 5a 22 39 2e 31 32 3d 22 46 22 29
>3065	20 2d 22 56 53 51 51 57 4f 5a 22 20 2a 2d 30 2e
>3075	38 39 20 39 36 31 3c 2d 36 2e 34 39 2d 35 2e 31
>3085	32 3c 22 58 45 56 54 4c 49 47 22 28 2d 36 2e 38
>3095	38 20 53 51 52 28 20 36 2e 33 31 22 22 56 37 4d
>30a5	36 45 33 20 37 37 31 00
.30ad					Line90:
>30ad	34 35 31 20 22 45 4a 54			.text '451 "EJTTX" 761 L 7.93 "Q"O2G5E( 0.65"UO" -1.34',0
>30b5	54 58 22 20 37 36 31 20 4c 20 37 2e 39 33 20 22
>30c5	51 22 4f 32 47 35 45 28 20 30 2e 36 35 22 55 4f
>30d5	22 20 2d 31 2e 33 34 00
.30dd					Line91:
>30dd	38 34 31 20 50 24 22 4d			.text '841 P$"MCQZFE"1231-1211"XSSTUOG") 1181 /DEC( "TGKF" ) -4.76+ TO "THPR" K3 L',0
>30e5	43 51 5a 46 45 22 31 32 33 31 2d 31 32 31 31 22
>30f5	58 53 53 54 55 4f 47 22 29 20 31 31 38 31 20 2f
>3105	44 45 43 28 20 22 54 47 4b 46 22 20 29 20 2d 34
>3115	2e 37 36 2b 20 54 4f 20 22 54 48 50 52 22 20 4b
>3125	33 20 4c 00
.3129					Line92:
>3129	39 32 31 00				.text '921',0
.312d					Line93:
>312d	38 37 31 00				.text '871',0
.3131					Line94:
>3131	31 32 39 31 20 22 42 52			.text '1291 "BRVA"-M6K1U"RDN" -"YT""WN"<*1.26-4.45"TJOJTE""LSRWWK" 171 Y4 "T"',0
>3139	56 41 22 2d 4d 36 4b 31 55 22 52 44 4e 22 20 2d
>3149	22 59 54 22 22 57 4e 22 3c 2a 31 2e 32 36 2d 34
>3159	2e 34 35 22 54 4a 4f 4a 54 45 22 22 4c 53 52 57
>3169	57 4b 22 20 31 37 31 20 59 34 20 22 54 22 00
.3178					Line95:
>3178	33 30 31 20 53 54 4f 50			.text '301 STOP "IM"(INPUT V1U7D6(1271* / 201 581/C7L8I1"LXLGHGOY"*531 9.87 ""-C9Q7P2 -5.57 WHILE MID$(""-9.03 6.78 E2A8F5 )W4Z5 < 141',0
>3180	20 22 49 4d 22 28 49 4e 50 55 54 20 56 31 55 37
>3190	44 36 28 31 32 37 31 2a 20 2f 20 32 30 31 20 35
>31a0	38 31 2f 43 37 4c 38 49 31 22 4c 58 4c 47 48 47
>31b0	4f 59 22 2a 35 33 31 20 39 2e 38 37 20 22 22 2d
>31c0	43 39 51 37 50 32 20 2d 35 2e 35 37 20 57 48 49
>31d0	4c 45 20 4d 49 44 24 28 22 22 2d 39 2e 30 33 20
>31e0	36 2e 37 38 20 45 32 41 38 46 35 20 29 57 34 5a
>31f0	35 20 3c 20 31 34 31 00
.31f8					Line96:
>31f8	36 33 31 20 20 3c 3e 2d			.text '631  <>-0.94 E1Q3 7.25"DIGD"P7V 741+"@PEUK"',0
>3200	30 2e 39 34 20 45 31 51 33 20 37 2e 32 35 22 44
>3210	49 47 44 22 50 37 56 20 37 34 31 2b 22 40 50 45
>3220	55 4b 22 00
.3224					Line97:
>3224	36 34 31 20 3d 3c 5a 30			.text '641 =<Z0 O2Q8L$ 1091 7.62 851* "@OZ@"991(<<991 INKEY$( 551 771<O2G5E(>= Z0 P$*-5.13(',0
>322c	20 4f 32 51 38 4c 24 20 31 30 39 31 20 37 2e 36
>323c	32 20 38 35 31 2a 20 22 40 4f 5a 40 22 39 39 31
>324c	28 3c 3c 39 39 31 20 49 4e 4b 45 59 24 28 20 35
>325c	35 31 20 37 37 31 3c 4f 32 47 35 45 28 3e 3d 20
>326c	5a 30 20 50 24 2a 2d 35 2e 31 33 28 00
.3279					Line98:
>3279	34 31 31 20 31 32 31 3d			.text '411 121= "NOJG"/< MID$("MWNSAV" DO 1121 "JXT"C6L INT(741( RAND(>> +"XMYCSYK"P9F7H V7N-T0F1X4-5.14* V7E3X8 V7N',0
>3281	20 22 4e 4f 4a 47 22 2f 3c 20 4d 49 44 24 28 22
>3291	4d 57 4e 53 41 56 22 20 44 4f 20 31 31 32 31 20
>32a1	22 4a 58 54 22 43 36 4c 20 49 4e 54 28 37 34 31
>32b1	28 20 52 41 4e 44 28 3e 3e 20 2b 22 58 4d 59 43
>32c1	53 59 4b 22 50 39 46 37 48 20 56 37 4e 2d 54 30
>32d1	46 31 58 34 2d 35 2e 31 34 2a 20 56 37 45 33 58
>32e1	38 20 56 37 4e 00
.32e7					Line99:
>32e7	39 34 31 20 3e 47 34 56			.text '941 >G4V0G DIV 1251) <>471 ENDIF>> "OCN"4.68-5.86 RUN K9D4G7 L 1201 7.03',0
>32ef	30 47 20 44 49 56 20 31 32 35 31 29 20 3c 3e 34
>32ff	37 31 20 45 4e 44 49 46 3e 3e 20 22 4f 43 4e 22
>330f	34 2e 36 38 2d 35 2e 38 36 20 52 55 4e 20 4b 39
>331f	44 34 47 37 20 4c 20 31 32 30 31 20 37 2e 30 33
>332f	00
.3330					Line100:
>3330	31 30 38 31 20 20 57 34			.text '1081  W4Z5 SQR(C(INPUT U P7V ENDPROC ENDPROC H A2V3 H5D6C(-4.35<>1191"PZMMPS"',0
>3338	5a 35 20 53 51 52 28 43 28 49 4e 50 55 54 20 55
>3348	20 50 37 56 20 45 4e 44 50 52 4f 43 20 45 4e 44
>3358	50 52 4f 43 20 48 20 41 32 56 33 20 48 35 44 36
>3368	43 28 2d 34 2e 33 35 3c 3e 31 31 39 31 22 50 5a
>3378	4d 4d 50 53 22 00
.337e					Line101:
>337e	36 37 31 20 3c 20 28 53			.text '671 < (STEP) (=H2 *491 F2O$1191 "JOKSJU"-1.14 1111 -1.62 8.81 Z3V8W2-8.13 1.65 1231 AND= >U2K2(U2K2-3.17-3.85 RND(',0
>3386	54 45 50 29 20 28 3d 48 32 20 2a 34 39 31 20 46
>3396	32 4f 24 31 31 39 31 20 22 4a 4f 4b 53 4a 55 22
>33a6	2d 31 2e 31 34 20 31 31 31 31 20 2d 31 2e 36 32
>33b6	20 38 2e 38 31 20 5a 33 56 38 57 32 2d 38 2e 31
>33c6	33 20 31 2e 36 35 20 31 32 33 31 20 41 4e 44 3d
>33d6	20 3e 55 32 4b 32 28 55 32 4b 32 2d 33 2e 31 37
>33e6	2d 33 2e 38 35 20 52 4e 44 28 00
.33f1					Line102:
>33f1	31 31 39 31 20 2f 31 30			.text '1191 /101>MID$(FOR O6W 1071 1091-5.69 )211-9.53 1241 E1R6I3 7.82 Z5S1S- 701+8.26"HPTJSV" "NPXOJR" 591 V3I8( 7.83 L',0
>33f9	31 3e 4d 49 44 24 28 46 4f 52 20 4f 36 57 20 31
>3409	30 37 31 20 31 30 39 31 2d 35 2e 36 39 20 29 32
>3419	31 31 2d 39 2e 35 33 20 31 32 34 31 20 45 31 52
>3429	36 49 33 20 37 2e 38 32 20 5a 35 53 31 53 2d 20
>3439	37 30 31 2b 38 2e 32 36 22 48 50 54 4a 53 56 22
>3449	20 22 4e 50 58 4f 4a 52 22 20 35 39 31 20 56 33
>3459	49 38 28 20 37 2e 38 33 20 4c 00
.3464					Line103:
>3464	38 38 31 20 4c 4f 41 44			.text '881 LOAD<= 5.68 -8.34 851 1181 411<<"F" W0$"HOWF" 6.31 261-5.68 K7"KCXEST@J"-6.27 1151-4.05 2.46 FOR ( H4E8D4 C C6L 8.23 LOAD"YH"',0
>346c	3c 3d 20 35 2e 36 38 20 2d 38 2e 33 34 20 38 35
>347c	31 20 31 31 38 31 20 34 31 31 3c 3c 22 46 22 20
>348c	57 30 24 22 48 4f 57 46 22 20 36 2e 33 31 20 32
>349c	36 31 2d 35 2e 36 38 20 4b 37 22 4b 43 58 45 53
>34ac	54 40 4a 22 2d 36 2e 32 37 20 31 31 35 31 2d 34
>34bc	2e 30 35 20 32 2e 34 36 20 46 4f 52 20 28 20 48
>34cc	34 45 38 44 34 20 43 20 43 36 4c 20 38 2e 32 33
>34dc	20 4c 4f 41 44 22 59 48 22 00
.34e6					Line104:
>34e6	38 39 31 20 20 22 41 4d			.text '891  "AM"""991 391 V7N 1.55 5.21-2.2 -8.31 C6L M2Z E1Q3"QMUSZ"',0
>34ee	22 22 22 39 39 31 20 33 39 31 20 56 37 4e 20 31
>34fe	2e 35 35 20 35 2e 32 31 2d 32 2e 32 20 2d 38 2e
>350e	33 31 20 43 36 4c 20 4d 32 5a 20 45 31 51 33 22
>351e	51 4d 55 53 5a 22 00
.3525					Line105:
>3525	36 31 31 20 2f 53 36 45			.text '611 /S6E0K 6.78 171 851',0
>352d	30 4b 20 36 2e 37 38 20 31 37 31 20 38 35 31 00
.353d					Line106:
>353d	35 36 31 20 20 2d 34 2e			.text '561  -4.91 H5L2P -5.95 -6.52 L 4.28 591 U7H2B0 ""L HEX$(',0
>3545	39 31 20 48 35 4c 32 50 20 2d 35 2e 39 35 20 2d
>3555	36 2e 35 32 20 4c 20 34 2e 32 38 20 35 39 31 20
>3565	55 37 48 32 42 30 20 22 22 4c 20 48 45 58 24 28
>3575	00
.3576					Line107:
>3576	36 31 31 20 56 37 4d 36			.text '611 V7M6E3 551 O2Q8L$ 1081 -2.04 441 411- 701 1221 481 LOOP 101<0.5 )',0
>357e	45 33 20 35 35 31 20 4f 32 51 38 4c 24 20 31 30
>358e	38 31 20 2d 32 2e 30 34 20 34 34 31 20 34 31 31
>359e	2d 20 37 30 31 20 31 32 32 31 20 34 38 31 20 4c
>35ae	4f 4f 50 20 31 30 31 3c 30 2e 35 20 29 00
.35bc					Line108:
>35bc	39 36 31 20 56 33 49 38			.text '961 V3I8(1.31"L" "MT@CVI"""- C2G1> 3.57=6.95 671 1211<+',0
>35c4	28 31 2e 33 31 22 4c 22 20 22 4d 54 40 43 56 49
>35d4	22 22 22 2d 20 43 32 47 31 3e 20 33 2e 35 37 3d
>35e4	36 2e 39 35 20 36 37 31 20 31 32 31 31 3c 2b 00
.35f4					Line109:
>35f4	35 39 31 20 20 30 2e 32			.text '591  0.28 781 >ASSERT 1251 881 531 ; 501-ENDIF""461 *1151-3.51 1101"KYIZSA"6.93 251 C9Q7P2> THEN REPEAT I6J7U6"DKDKEGKH" OR EXIT',0
>35fc	38 20 37 38 31 20 3e 41 53 53 45 52 54 20 31 32
>360c	35 31 20 38 38 31 20 35 33 31 20 3b 20 35 30 31
>361c	2d 45 4e 44 49 46 22 22 34 36 31 20 2a 31 31 35
>362c	31 2d 33 2e 35 31 20 31 31 30 31 22 4b 59 49 5a
>363c	53 41 22 36 2e 39 33 20 32 35 31 20 43 39 51 37
>364c	50 32 3e 20 54 48 45 4e 20 52 45 50 45 41 54 20
>365c	49 36 4a 37 55 36 22 44 4b 44 4b 45 47 4b 48 22
>366c	20 4f 52 20 45 58 49 54 00
.3675					Line110:
>3675	31 32 31 00				.text '121',0
.3679					Line111:
>3679	31 30 32 31 20 20 50 52			.text '1021  PROC S7$ INPUT*-5.49 =( 831 F9A3$O2Q8L$""W0$ "BJQ"LET"EX@C""TZD@WQZF" J2D9T',0
>3681	4f 43 20 53 37 24 20 49 4e 50 55 54 2a 2d 35 2e
>3691	34 39 20 3d 28 20 38 33 31 20 46 39 41 33 24 4f
>36a1	32 51 38 4c 24 22 22 57 30 24 20 22 42 4a 51 22
>36b1	4c 45 54 22 45 58 40 43 22 22 54 5a 44 40 57 51
>36c1	5a 46 22 20 4a 32 44 39 54 00
.36cb					Line112:
>36cb	34 34 31 20 4c 49 53 54			.text '441 LIST 1011 1161 INT(761 1161*+=',0
>36d3	20 31 30 31 31 20 31 31 36 31 20 49 4e 54 28 37
>36e3	36 31 20 31 31 36 31 2a 2b 3d 00
.36ee					Line113:
>36ee	31 32 32 31 20 20 22 42			.text '1221  "BQFMQLI" )M6K1U TO TO 961 H9P3-3.58 1231:MOD 7.39 "RLW"1211 ""611',0
>36f6	51 46 4d 51 4c 49 22 20 29 4d 36 4b 31 55 20 54
>3706	4f 20 54 4f 20 39 36 31 20 48 39 50 33 2d 33 2e
>3716	35 38 20 31 32 33 31 3a 4d 4f 44 20 37 2e 33 39
>3726	20 22 52 4c 57 22 31 32 31 31 20 22 22 36 31 31
>3736	00
.3737					Line114:
>3737	39 38 31 20 20 33 38 31			.text '981  381"O" F2O$<TIME',0
>373f	22 4f 22 20 46 32 4f 24 3c 54 49 4d 45 00
.374d					Line115:
>374d	38 33 31 00				.text '831',0
.3751					Line116:
>3751	38 32 31 20 22 4b 4e 45			.text '821 "KNEHDR" LIST',0
>3759	48 44 52 22 20 4c 49 53 54 00
.3763					Line117:
>3763	32 39 31 00				.text '291',0
.3767					Line118:
>3767	35 31 31 20 20 52 45 50			.text '511  REPEAT"CVLQOBBO"DO-',0
>376f	45 41 54 22 43 56 4c 51 4f 42 42 4f 22 44 4f 2d
>377f	00
.3780					Line119:
>3780	31 32 31 31 20 2d 20 22			.text '1211 - "N""CDRUUV"-8.66 "M"INT( -6.88 161="HKF"-3.1/"UKDTWJYV" 1041 M6K1U>O2Q8L$-6.97"CO"-1.16 THEN-4.93',0
>3788	4e 22 22 43 44 52 55 55 56 22 2d 38 2e 36 36 20
>3798	22 4d 22 49 4e 54 28 20 2d 36 2e 38 38 20 31 36
>37a8	31 3d 22 48 4b 46 22 2d 33 2e 31 2f 22 55 4b 44
>37b8	54 57 4a 59 56 22 20 31 30 34 31 20 4d 36 4b 31
>37c8	55 3e 4f 32 51 38 4c 24 2d 36 2e 39 37 22 43 4f
>37d8	22 2d 31 2e 31 36 20 54 48 45 4e 2d 34 2e 39 33
>37e8	00

;******  Return to file: src/program/testing/testing.asm

.37e9					TOKOneLine:
.37e9	86 22		stx $22				stx 	zTemp2
.37eb	84 23		sty $23				sty 	zTemp2+1
.37ed	a2 03		ldx #$03			ldx 	#TOKGetSource & $FF
.37ef	a0 38		ldy #$38			ldy 	#TOKGetSource >> 8
.37f1	38		sec				sec
.37f2	20 6b 38	jsr $386b			jsr 	TOKTokenise
.37f5	20 45 1a	jsr $1a45			jsr 	PGMDeleteLine
.37f8	ad 37 02	lda $0237			lda 	TOKLineSize
.37fb	c9 04		cmp #$04			cmp 	#4
.37fd	f0 03		beq $3802			beq 	_TOKNoInsert
.37ff	20 8f 1a	jsr $1a8f			jsr 	PGMInsertLine
.3802					_TOKNoInsert:
.3802	60		rts				rts
.3803					TOKGetSource:
.3803	b2 22		lda ($22)			lda 	(zTemp2)
.3805	90 06		bcc $380d			bcc 	_GSNoIncrement
.3807	e6 22		inc $22				inc 	zTemp2
.3809	d0 02		bne $380d			bne 	_GSNoIncrement
.380b	e6 23		inc $23				inc 	zTemp2+1
.380d					_GSNoIncrement:
.380d	c9 00		cmp #$00			cmp 	#0
.380f	60		rts				rts
.0346					SrcPosition:
>0346							.fill 		1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.3810					TOKResetElement:
.3810	9c 47 03	stz $0347			stz 	TOKElement
.3813	60		rts				rts
.3814					TOKWriteElement:
.3814	da		phx				phx
.3815	ae 47 03	ldx $0347			ldx 	TOKElement
.3818	9d 48 03	sta $0348,x			sta 	TOKElementText,x
.381b	9e 49 03	stz $0349,x			stz 	TOKElementText+1,x
.381e	fa		plx				plx
.381f	ee 47 03	inc $0347			inc 	TOKElement
.3822	60		rts				rts
.0347					TOKElement:
>0347							.fill 	1
.0348					TOKElementText:
>0348							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.3823					TOKTokeniseConstant:
.3823	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.3825	48		pha				pha 								; save on stack
.3826	29 c0		and #$c0			and 	#$C0
.3828	05 0d		ora $0d				ora 	IFR0+IM1
.382a	05 0e		ora $0e				ora 	IFR0+IM2
.382c	f0 10		beq $383e			beq 	_TTCLess
.382e	da		phx				phx
.382f	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.3831					_TTCShiftRight:
.3831	46 0e		lsr $0e				lsr 	IFR0+IM2
.3833	66 0d		ror $0d				ror 	IFR0+IM1
.3835	66 0c		ror $0c				ror 	IFR0+IM0
.3837	ca		dex				dex
.3838	d0 f7		bne $3831			bne 	_TTCShiftRight
.383a	fa		plx				plx
.383b	20 23 38	jsr $3823			jsr 	TOKTokeniseConstant
.383e					_TTCLess:
.383e	68		pla				pla
.383f	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.3841	20 dd 38	jsr $38dd			jsr 	TOKWriteA
.3844	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.3845					TOKTokeniseDecimals:
.3845	20 ed 38	jsr $38ed			jsr 	TOKGetNext 					; consume the .
.3848	20 17 3a	jsr $3a17			jsr 	TOKExtractInteger 			; pull an integer out as text.
.384b	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.384d	20 dd 38	jsr $38dd			jsr 	TOKWriteA
.3850	20 55 38	jsr $3855			jsr 	TOKOutputElementBuffer 		; then the buffer
.3853	18		clc				clc
.3854	60		rts				rts
.3855					TOKOutputElementBuffer:
.3855	ad 47 03	lda $0347			lda 	TOKElement 					; get count and write that
.3858	20 dd 38	jsr $38dd			jsr 	TOKWriteA
.385b	a8		tay				tay 								; put in Y
.385c	f0 0c		beq $386a			beq 	_TOEExit 					; exit if empty which is okay.
.385e	a2 01		ldx #$01			ldx 	#1
.3860					_TOELoop:
.3860	bd 47 03	lda $0347,x			lda 	TOKElement,x
.3863	20 dd 38	jsr $38dd			jsr 	TOKWriteA
.3866	e8		inx				inx
.3867	88		dey				dey
.3868	d0 f6		bne $3860			bne 	_TOELoop
.386a					_TOEExit:
.386a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.386b					TOKTokenise:
.386b	8c 48 04	sty $0448			sty 	TOKDataSource+1 			; save source routine pointer
.386e	8e 47 04	stx $0447			stx 	TOKDataSource
.3871	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.3873	2a		rol a				rol  	a
.3874	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.3877	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.3879	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.387c					_TOKMainLoop:
.387c	20 e9 38	jsr $38e9			jsr 	TOKGet 						; what follows.
.387f	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.3881	f0 51		beq $38d4			beq 	_TOKExit
.3883	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.3885	d0 05		bne $388c			bne 	_TOKElement
.3887	20 ed 38	jsr $38ed			jsr 	TOKGetNext
.388a	80 f0		bra $387c			bra 	_TOKMainLoop
.388c					_TOKElement:
.388c	20 95 3a	jsr $3a95			jsr 	TOKIsDigit 					; is it 0..9
.388f	90 0a		bcc $389b			bcc 	_TOKNotDigit
.3891	20 ee 39	jsr $39ee			jsr 	TOKTokeniseInteger 			; get integer
.3894	b0 45		bcs $38db			bcs 	_TOKFail 					; did it fail ?
.3896	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.3899	80 e1		bra $387c			bra 	_TOKMainLoop
.389b					_TOKNotDigit:
.389b	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.389e	d0 3b		bne $38db			bne 	_TOKFail 					; if so, we've a problem.
.38a0	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.38a2	d0 07		bne $38ab			bne 	_TOKNotHex
.38a4	20 36 39	jsr $3936			jsr 	TOKTokeniseHexadecimal
.38a7	b0 32		bcs $38db			bcs 	_TOKFail
.38a9	80 d1		bra $387c			bra 	_TOKMainLoop
.38ab					_TOKNotHex:
.38ab	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.38ad	d0 07		bne $38b6			bne 	_TOKNotDecimal
.38af	20 45 38	jsr $3845			jsr 	TOKTokeniseDecimals
.38b2	b0 27		bcs $38db			bcs 	_TOKFail
.38b4	80 c6		bra $387c			bra 	_TOKMainLoop
.38b6					_TOKNotDecimal:
.38b6	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.38b8	d0 07		bne $38c1			bne 	_TOKNotString
.38ba	20 5c 3a	jsr $3a5c			jsr 	TOKTokeniseString
.38bd	b0 1c		bcs $38db			bcs 	_TOKFail
.38bf	80 bb		bra $387c			bra 	_TOKMainLoop
.38c1					_TOKNotString:
.38c1	20 b2 3a	jsr $3ab2			jsr 	TOKIsAlpha 					; identifier ?
.38c4	b0 07		bcs $38cd			bcs 	_TOKIdentifier
.38c6	20 2b 3a	jsr $3a2b			jsr 	TOKTokenisePunctuation 		; punctuation
.38c9	b0 10		bcs $38db			bcs 	_TOKFail
.38cb	80 af		bra $387c			bra 	_TOKMainLoop
.38cd					_TOKIdentifier:
.38cd	20 70 39	jsr $3970			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.38d0	b0 09		bcs $38db			bcs 	_TOKFail
.38d2	80 a8		bra $387c			bra 	_TOKMainLoop
.38d4					_TOKExit:
.38d4	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.38d6	20 dd 38	jsr $38dd			jsr 	TOKWriteA
.38d9	18		clc				clc									; return with carry set.
.38da	60		rts				rts
.38db					_TOKFail:
.38db	38		sec				sec
.38dc	60		rts				rts
.38dd					TOKWriteA:
.38dd	da		phx				phx
.38de	ae 37 02	ldx $0237			ldx 	TOKLineSize
.38e1	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.38e4	fa		plx				plx
.38e5	ee 37 02	inc $0237			inc 	TOKLineSize
.38e8	60		rts				rts
.38e9					TOKGet:
.38e9	18		clc				clc
.38ea	6c 47 04	jmp ($0447)			jmp 	(TOKDataSource)
.38ed					TOKGetNext:
.38ed	38		sec				sec
.38ee	6c 47 04	jmp ($0447)			jmp 	(TOKDataSource)
.0447					TOKDataSource:
>0447							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.38f1					TOKFindToken:
.38f1	a2 78		ldx #$78			ldx 	#StandardTokens & $FF 		; do this table
.38f3	a0 16		ldy #$16			ldy 	#StandardTokens >> 8
.38f5	20 00 39	jsr $3900			jsr 	TOKFindTokenXY 				; find it, or not
.38f8	90 04		bcc $38fe			bcc 	_TOKFTFail
.38fa	a2 00		ldx #$00			ldx 	#0
.38fc	38		sec				sec
.38fd	60		rts				rts
.38fe					_TOKFTFail
.38fe	18		clc				clc
.38ff	60		rts				rts
.3900					TOKFindTokenXY:
.3900	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.3902	84 1f		sty $1f				sty 	zTemp0+1
.3904	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.3906	8d 49 04	sta $0449			sta 	TOKCurrent
.3909					_TOKFindLoop:
.3909	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.390b	18		clc				clc 		 						; clear carry in case of fail
.390c	30 17		bmi $3925			bmi 	_TOKExit 					; end of table, fail, so return CC.
.390e	cd 47 03	cmp $0347			cmp 	TOKElement 					; compare against the element length
.3911	d0 13		bne $3926			bne 	_TOKNext 					; different, try next.
.3913	aa		tax				tax 								; number of chars to compare.
.3914	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.3916					_TOKCompare:
.3916	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.3918	d9 47 03	cmp $0347,y			cmp 	TOKElementText-1,y
.391b	d0 09		bne $3926			bne 	_TOKNext 					; different ? try next
.391d	c8		iny				iny 								; compare next two
.391e	ca		dex				dex
.391f	d0 f5		bne $3916			bne 	_TOKCompare 				; until done X characters.
.3921	38		sec				sec
.3922	ad 49 04	lda $0449			lda 	TOKCurrent 					; return current ID.
.3925					_TOKExit:
.3925	60		rts				rts
.3926					_TOKNext:
.3926	ee 49 04	inc $0449			inc 	TOKCurrent 					; increment token #
.3929	38		sec				sec 								; add length+1 to ptr
.392a	b2 1e		lda ($1e)			lda 	(zTemp0)
.392c	65 1e		adc $1e				adc 	zTemp0
.392e	85 1e		sta $1e				sta 	zTemp0
.3930	90 d7		bcc $3909			bcc 	_TOKFindLoop
.3932	e6 1f		inc $1f				inc 	zTemp0+1
.3934	80 d3		bra $3909			bra 	_TOKFindLoop
.0449					TOKCurrent:
>0449							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.3936					TOKTokeniseHexadecimal:
.3936	20 ed 38	jsr $38ed			jsr 	TOKGetNext 					; consume the $
.3939	a2 0c		ldx #$0c			ldx 	#IFR0
.393b	20 4e 41	jsr $414e			jsr 	IFloatSetZero 				; set R0 = 0
.393e					_TTHLoop:
.393e	20 e9 38	jsr $38e9			jsr 	TOKGet 						; keep getting and copying while numeric.
.3941	20 bf 3a	jsr $3abf			jsr 	TOKIsHexadecimal
.3944	90 20		bcc $3966			bcc 	_TTHDone
.3946	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.3948	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.394b	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.394e	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.3951	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.3954	20 ed 38	jsr $38ed			jsr 	TOKGetNext
.3957	38		sec				sec 								; convert to decimal.
.3958	e9 30		sbc #$30			sbc 	#48
.395a	c9 0a		cmp #$0a			cmp 	#10
.395c	90 02		bcc $3960			bcc 	_TTHNotAlpha
.395e	e9 07		sbc #$07			sbc 	#7
.3960					_TTHNotAlpha:
.3960	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.3962	85 0c		sta $0c				sta 	IFR0+IM0
.3964	80 d8		bra $393e			bra 	_TTHLoop
.3966					_TTHDone:
.3966	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.3968	20 dd 38	jsr $38dd			jsr 	TOKWriteA
.396b	20 23 38	jsr $3823			jsr 	TOKTokeniseConstant 		; write integer out.
.396e	18		clc				clc
.396f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.3970					TOKTokeniseIdentifier:
.3970	20 10 38	jsr $3810			jsr 	TOKResetElement 			; extract an identifier
.3973					_TOKGetIdentifier:
.3973	20 e9 38	jsr $38e9			jsr 	TOKGet
.3976	20 7f 3a	jsr $3a7f			jsr 	TOKToUpper
.3979	20 a1 3a	jsr $3aa1			jsr 	TOKIsIdentifierElement
.397c	90 08		bcc $3986			bcc 	_TOKEndIdent
.397e	20 14 38	jsr $3814			jsr		TOKWriteElement
.3981	20 ed 38	jsr $38ed			jsr 	TOKGetNext
.3984	80 ed		bra $3973			bra 	_TOKGetIdentifier
.3986					_TOKEndIdent:
.3986	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.3988	d0 06		bne $3990			bne 	_TOKNotString
.398a	20 14 38	jsr $3814			jsr 	TOKWriteElement 			; add it
.398d	20 ed 38	jsr $38ed			jsr 	TOKGetNext 					; consume it
.3990					_TOKNotString:
.3990	20 e9 38	jsr $38e9			jsr 	TOKGet 						; finally check for (
.3993	c9 28		cmp #$28			cmp 	#"("
.3995	d0 06		bne $399d			bne 	_TOKNoArray
.3997	20 14 38	jsr $3814			jsr 	TOKWriteElement 			; add it
.399a	20 ed 38	jsr $38ed			jsr 	TOKGetNext 					; consume it
.399d					_TOKNoArray:
.399d	20 f1 38	jsr $38f1			jsr 	TOKFindToken 				; find it
.39a0	90 05		bcc $39a7			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.39a2	20 dd 38	jsr $38dd			jsr 	TOKWriteA
.39a5	18		clc				clc
.39a6	60		rts				rts
.39a7					_TOKIsVariable:
.39a7	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.39a9					_TOKOutputBuffer:
.39a9	bd 48 03	lda $0348,x			lda 	TOKElementText,x 			; output it translated.
.39ac	20 d5 39	jsr $39d5			jsr 	TOKTranslateIdentifier
.39af	20 dd 38	jsr $38dd			jsr 	TOKWriteA
.39b2	e8		inx				inx
.39b3	bd 48 03	lda $0348,x			lda 	TOKElementText,x
.39b6	20 a1 3a	jsr $3aa1			jsr 	TOKIsIdentifierElement
.39b9	b0 ee		bcs $39a9			bcs 	_TOKOutputBuffer
.39bb	a8		tay				tay 								; last char in Y
.39bc	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.39be	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.39c0	f0 0e		beq $39d0			beq 	_TOKIVExit
.39c2	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.39c4	d0 04		bne $39ca			bne 	_TOKIVCheckArray 			; no, check for (
.39c6	1a		inc a				inc 	a 							; token is $7D
.39c7	bc 49 03	ldy $0349,x			ldy 	TOKElementText+1,x 			; get next one.
.39ca					_TOKIVCheckArray:
.39ca	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.39cc	d0 02		bne $39d0			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.39ce	1a		inc a				inc 	a
.39cf	1a		inc a				inc 	a
.39d0					_TOKIVExit:
.39d0	20 dd 38	jsr $38dd			jsr 	TOKWriteA 					; ending token
.39d3	18		clc				clc
.39d4	60		rts				rts
.39d5					TOKTranslateIdentifier:
.39d5	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.39d7	f0 0f		beq $39e8			beq 	_TTI64
.39d9	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.39db	f0 0e		beq $39eb			beq 	_TTI65
.39dd	38		sec				sec
.39de	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.39e0	10 03		bpl $39e5			bpl 	_TTIExit
.39e2	18		clc				clc 								; map 09 onto 26-35
.39e3	69 2b		adc #$2b			adc 	#"A"-"0"+26
.39e5					_TTIExit:
.39e5	09 40		ora #$40			ora 	#$40 						; correct range.
.39e7	60		rts				rts
.39e8	a9 64		lda #$64	_TTI64:	lda 	#$64
.39ea	60		rts				rts
.39eb	a9 65		lda #$65	_TTI65:	lda 	#$65
.39ed	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.39ee					TOKTokeniseInteger:
.39ee	20 17 3a	jsr $3a17			jsr 	TOKExtractInteger 			; pull an integer out as text.
.39f1	a2 48		ldx #$48			ldx 	#TOKElementText & $FF
.39f3	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.39f5	ad 47 03	lda $0347			lda		TOKElement
.39f8	20 b2 3f	jsr $3fb2			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.39fb	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.39fe	f0 12		beq $3a12			beq 	_TOKNotLineNumber
.3a00	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.3a02	d0 0c		bne $3a10			bne 	_TOKBadLineNumeber
.3a04	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.3a06	8d 38 02	sta $0238			sta 	TOKLineNumber
.3a09	a5 0d		lda $0d				lda 	IFR0+IM1
.3a0b	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.3a0e	18		clc				clc
.3a0f	60		rts				rts
.3a10					_TOKBadLineNumeber:
.3a10	38		sec				sec
.3a11	60		rts				rts
.3a12					_TOKNotLineNumber:
.3a12	20 23 38	jsr $3823			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.3a15	18		clc				clc
.3a16	60		rts				rts
.3a17					TOKExtractInteger:
.3a17	20 10 38	jsr $3810			jsr 	TOKResetElement 			; restart
.3a1a					_TTILoop:
.3a1a	20 e9 38	jsr $38e9			jsr 	TOKGet 						; keep getting and copying while numeric.
.3a1d	20 95 3a	jsr $3a95			jsr 	TOKIsDigit
.3a20	90 08		bcc $3a2a			bcc 	_TOKEIExit
.3a22	20 14 38	jsr $3814			jsr 	TOKWriteElement
.3a25	20 ed 38	jsr $38ed			jsr 	TOKGetNext
.3a28	80 f0		bra $3a1a			bra 	_TTILoop
.3a2a					_TOKEIExit:
.3a2a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.3a2b					TOKTokenisePunctuation:
.3a2b	20 10 38	jsr $3810			jsr 	TOKResetElement 			; copy first punctuation character into element.
.3a2e	20 ed 38	jsr $38ed			jsr 	TOKGetNext
.3a31	20 14 38	jsr $3814			jsr 	TOKWriteElement
.3a34	20 e9 38	jsr $38e9			jsr 	TOKGet 						; what follows ?
.3a37	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.3a39	f0 10		beq $3a4b			beq 	_TTPOne
.3a3b	20 a9 3a	jsr $3aa9			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.3a3e	b0 0b		bcs $3a4b			bcs 	_TTPOne 					; these speed things up a bit.
.3a40	20 14 38	jsr $3814			jsr 	TOKWriteElement 			; this is what we will search for.
.3a43	20 f1 38	jsr $38f1			jsr 	TOKFindToken
.3a46	b0 0a		bcs $3a52			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.3a48	ce 47 03	dec $0347			dec 	TOKElement 					; make it a single character
.3a4b					_TTPOne:
.3a4b	20 f1 38	jsr $38f1			jsr 	TOKFindToken 				; look for one character punctuation
.3a4e	b0 07		bcs $3a57			bcs 	_TTPOutputExit 				; we found it
.3a50	38		sec				sec 								; not recognised.
.3a51	60		rts				rts
.3a52					_TTPConsumeExit:
.3a52	48		pha				pha
.3a53	20 ed 38	jsr $38ed			jsr 	TOKGetNext 					; get the 2nd char out.
.3a56	68		pla				pla
.3a57					_TTPOutputExit:
.3a57	20 dd 38	jsr $38dd			jsr  	TOKWriteA 					; write token out
.3a5a	18		clc				clc
.3a5b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.3a5c					TOKTokeniseString:
.3a5c	20 ed 38	jsr $38ed			jsr 	TOKGetNext 					; consume the "
.3a5f	20 10 38	jsr $3810			jsr 	TOKResetElement 			; start getting the string
.3a62					_TOKTSLoop:
.3a62	20 e9 38	jsr $38e9			jsr 	TOKGet 						; check EOL
.3a65	c9 00		cmp #$00			cmp 	#0
.3a67	f0 0c		beq $3a75			beq 	_TOKTSExit
.3a69	20 ed 38	jsr $38ed			jsr 	TOKGetNext 					; get and consume
.3a6c	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.3a6e	f0 05		beq $3a75			beq 	_TOKTSExit
.3a70	20 14 38	jsr $3814			jsr 	TOKWriteElement
.3a73	80 ed		bra $3a62			bra 	_TOKTSLoop
.3a75					_TOKTSExit:
.3a75	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.3a77	20 dd 38	jsr $38dd			jsr 	TOKWriteA
.3a7a	20 55 38	jsr $3855			jsr 	TOKOutputElementBuffer
.3a7d	18		clc				clc
.3a7e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.3a7f					TOKToUpper:
.3a7f	c9 61		cmp #$61			cmp 	#"a"
.3a81	90 06		bcc $3a89			bcc 	_TTUNotLower
.3a83	c9 7b		cmp #$7b			cmp 	#"z"+1
.3a85	b0 02		bcs $3a89			bcs 	_TTUNotLower
.3a87	49 20		eor #$20			eor 	#$20
.3a89					_TTUNotLower:
.3a89	60		rts				rts
.3a8a					TOKToLower:
.3a8a	c9 41		cmp #$41			cmp 	#"A"
.3a8c	90 06		bcc $3a94			bcc 	_TTUNotUpper
.3a8e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a90	b0 02		bcs $3a94			bcs 	_TTUNotUpper
.3a92	49 20		eor #$20			eor 	#$20
.3a94					_TTUNotUpper:
.3a94	60		rts				rts
.3a95					TOKIsDigit:
.3a95	c9 30		cmp #$30			cmp 	#"0"
.3a97	90 06		bcc $3a9f			bcc 	TOKFail
.3a99	c9 3a		cmp #$3a			cmp 	#"9"+1
.3a9b	b0 02		bcs $3a9f			bcs 	TOKFail
.3a9d					TOKSucceed:
.3a9d	38		sec				sec
.3a9e	60		rts				rts
.3a9f					TOKFail:
.3a9f	18		clc				clc
.3aa0	60		rts				rts
.3aa1					TOKIsIdentifierElement:
.3aa1	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.3aa3	f0 f8		beq $3a9d			beq 	TOKSucceed
.3aa5	c9 5f		cmp #$5f			cmp 	#"_"
.3aa7	f0 f4		beq $3a9d			beq 	TOKSucceed 					; else fall through to alphanumeric
.3aa9					TOKIsAlphaNumeric:
.3aa9	20 b2 3a	jsr $3ab2			jsr 	TOKIsAlpha
.3aac	b0 ef		bcs $3a9d			bcs 	TOKSucceed
.3aae	20 95 3a	jsr $3a95			jsr 	TOKIsDigit
.3ab1	60		rts				rts
.3ab2					TOKIsAlpha:
.3ab2	20 7f 3a	jsr $3a7f			jsr 	TOKToUpper
.3ab5	c9 41		cmp #$41			cmp 	#"A"
.3ab7	90 e6		bcc $3a9f			bcc 	TOKFail
.3ab9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3abb	b0 e2		bcs $3a9f			bcs 	TOKFail
.3abd	80 de		bra $3a9d			bra 	TOKSucceed
.3abf					TOKIsHexadecimal:
.3abf	20 95 3a	jsr $3a95			jsr		TOKIsDigit
.3ac2	b0 d9		bcs $3a9d			bcs 	TOKSucceed
.3ac4	20 b2 3a	jsr $3ab2			jsr 	TOKIsAlpha
.3ac7	90 d6		bcc $3a9f			bcc 	TOKFail
.3ac9	c9 47		cmp #$47			cmp 	#"F"+1
.3acb	b0 d2		bcs $3a9f			bcs 	TOKFail
.3acd	80 ce		bra $3a9d			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.3acf					StringSystemInitialise:
.3acf	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh 			; last byte of memory
.3ad2	3a		dec a				dec 	a
.3ad3	8d 4c 04	sta $044c			sta 	stringMemory+1
.3ad6	85 1f		sta $1f				sta 	zTemp0+1
.3ad8	a9 ff		lda #$ff			lda 	#$FF
.3ada	8d 4b 04	sta $044b			sta 	stringMemory
.3add	85 1e		sta $1e				sta 	zTemp0
.3adf	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.3ae1	92 1e		sta ($1e)			sta 	(zTemp0)
.3ae3	60		rts				rts
.3ae4					StringSpaceInitialise:
.3ae4	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.3ae6	8d 4a 04	sta $044a			sta 	stringInitialised
.3ae9	ad 4b 04	lda $044b			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.3aec	8d 4d 04	sta $044d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.3aef	ad 4c 04	lda $044c			lda 	stringMemory+1
.3af2	3a		dec a				dec 	a
.3af3	8d 4e 04	sta $044e			sta 	stringTempPointer+1
.3af6	60		rts				rts
.3af7					StringTempAllocate:
.3af7	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.3af9	b0 2e		bcs $3b29			bcs 	_STALength
.3afb	2c 4a 04	bit $044a			bit 	stringInitialised 			; already initialised
.3afe	30 05		bmi $3b05			bmi 	_STAAllocate
.3b00	48		pha				pha 								; save value to subtract.
.3b01	20 e4 3a	jsr $3ae4			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.3b04	68		pla				pla 								; restore it
.3b05					_STAAllocate:
.3b05	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.3b07	18		clc				clc  								; deliberate allows one more
.3b08	6d 4d 04	adc $044d			adc 	stringTempPointer 			; subtract from temp pointer
.3b0b	8d 4d 04	sta $044d			sta 	stringTempPointer
.3b0e	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.3b10	85 24		sta $24				sta 	zsTemp 						; and zsTemp
.3b12	ad 4e 04	lda $044e			lda 	stringTempPointer+1
.3b15	69 ff		adc #$ff			adc 	#$FF
.3b17	8d 4e 04	sta $044e			sta 	stringTempPointer+1
.3b1a	85 25		sta $25				sta 	zsTemp+1
.3b1c	85 0d		sta $0d				sta 	IFR0+IM1
.3b1e	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.3b20	a9 80		lda #$80			lda 	#$80
.3b22	85 0f		sta $0f				sta 	IFR0+IExp
.3b24	a9 00		lda #$00			lda 	#0 							; clear the target string
.3b26	92 24		sta ($24)			sta 	(zsTemp)
.3b28	60		rts				rts
.3b29					_STALength:
.3b29	4c fb 11	jmp $11fb		jmp	ErrorV_string
.3b2c					StringTempWrite:
.3b2c	5a		phy				phy
.3b2d	48		pha				pha
.3b2e	b2 24		lda ($24)			lda 	(zsTemp)
.3b30	1a		inc a				inc 	a
.3b31	92 24		sta ($24)			sta 	(zsTemp)
.3b33	a8		tay				tay
.3b34	68		pla				pla
.3b35	91 24		sta ($24),y			sta 	(zsTemp),y
.3b37	7a		ply				ply
.3b38	60		rts				rts
.0024					zsTemp:
>0024							.fill 	2
.044a					stringInitialised:
>044a							.fill 	1
.044b					stringMemory:
>044b							.fill 	2
.044d					stringTempPointer:
>044d							.fill 	2

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.3b39					IFInitialise:
.3b39	9c 57 04	stz $0457			stz 	IFStackIndex
.3b3c	60		rts				rts
.3b3d					IFloatSubtract:
.3b3d	da		phx				phx
.3b3e	a2 0c		ldx #$0c			ldx 	#IFR0
.3b40	20 59 41	jsr $4159			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.3b43	fa		plx				plx
.3b44					IFloatAdd:
.3b44	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.3b46	05 0f		ora $0f				ora 	IFR0+IExp
.3b48	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.3b4a	d0 4e		bne $3b9a			bne 	_IFloatAddDecimals 			; decimal version.
.3b4c					_IFAddSubMantissa:
.3b4c	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.3b4e	45 0f		eor $0f				eor 	IFR0+IExp
.3b50	29 40		and #$40			and 	#IFSign
.3b52	d0 21		bne $3b75			bne 	_IFloatSubMantissa
.3b54	18		clc				clc 								; do the actual addition
.3b55	a5 0c		lda $0c			lda 	IFR0+IM0
.3b57	75 00		adc $00,x		adc 		IM0,x
.3b59	85 0c		sta $0c			sta 	IFR0+IM0
.3b5b	a5 0d		lda $0d			lda 	IFR0+IM1
.3b5d	75 01		adc $01,x		adc 		IM1,x
.3b5f	85 0d		sta $0d			sta 	IFR0+IM1
.3b61	a5 0e		lda $0e			lda 	IFR0+IM2
.3b63	75 02		adc $02,x		adc 		IM2,x
.3b65	85 0e		sta $0e			sta 	IFR0+IM2
.3b67	10 29		bpl $3b92			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.3b69	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.3b6b	20 7d 41	jsr $417d			jsr 	IFloatShiftRight
.3b6e	20 a7 41	jsr $41a7			jsr 	IFloatIncExponent
.3b71	d0 1f		bne $3b92			bne 	_IFloatAddExit
.3b73	38		sec				sec 								; overflowed numerically.
.3b74	60		rts				rts
.3b75					_IFloatSubMantissa:
.3b75	38		sec				sec 								; do the subtraction R0-Rx
.3b76	a5 0c		lda $0c			lda 	IFR0+IM0
.3b78	f5 00		sbc $00,x		sbc 		IM0,x
.3b7a	85 0c		sta $0c			sta 	IFR0+IM0
.3b7c	a5 0d		lda $0d			lda 	IFR0+IM1
.3b7e	f5 01		sbc $01,x		sbc 		IM1,x
.3b80	85 0d		sta $0d			sta 	IFR0+IM1
.3b82	a5 0e		lda $0e			lda 	IFR0+IM2
.3b84	f5 02		sbc $02,x		sbc 		IM2,x
.3b86	85 0e		sta $0e			sta 	IFR0+IM2
.3b88	b0 08		bcs $3b92			bcs 	_IFloatAddExit 				; no borrow so we are done.
.3b8a	a2 0c		ldx #$0c			ldx 	#IFR0
.3b8c	20 61 41	jsr $4161			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.3b8f	20 59 41	jsr $4159			jsr 	IFloatNegate 				; negate
.3b92					_IFloatAddExit:
.3b92	18		clc				clc
.3b93	60		rts				rts
.3b94					_IFloatZeroAdd:
.3b94	fa		plx				plx 								; return this value in R0
.3b95	20 df 40	jsr $40df			jsr 	IFloatCopyFromRegister
.3b98	18		clc				clc
.3b99	60		rts				rts
.3b9a					_IFloatAddDecimals:
.3b9a	20 47 41	jsr $4147			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.3b9d	f0 f3		beq $3b92			beq 	_IFloatAddExit
.3b9f	20 85 41	jsr $4185			jsr 	IFloatNormalise 			; normalise RX
.3ba2	da		phx				phx 								; normalise R0
.3ba3	a2 0c		ldx #$0c			ldx 	#IFR0
.3ba5	20 47 41	jsr $4147			jsr 	IFloatCheckZero
.3ba8	f0 ea		beq $3b94			beq 	_IFloatZeroAdd
.3baa	20 85 41	jsr $4185			jsr 	IFloatNormalise
.3bad	fa		plx				plx
.3bae	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.3bb0	29 3f		and #$3f			and 	#IFXMask
.3bb2	38		sec				sec
.3bb3	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.3bb5	85 0a		sta $0a				sta 	iTemp0
.3bb7	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.3bb9	29 3f		and #$3f			and 	#IFXMask
.3bbb	38		sec				sec
.3bbc	e9 20		sbc #$20			sbc 	#$20
.3bbe	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.3bc0	b0 02		bcs $3bc4			bcs 	_IFloatHaveLarger
.3bc2	a5 0a		lda $0a				lda 	iTemp0
.3bc4					_IFloatHaveLarger:
.3bc4	18		clc				clc 								; get the actual one back.
.3bc5	69 20		adc #$20			adc 	#$20 						; shift both to that.
.3bc7	20 d4 3b	jsr $3bd4			jsr 	_IFShiftXToA
.3bca	da		phx				phx
.3bcb	a2 0c		ldx #$0c			ldx 	#IFR0
.3bcd	20 d4 3b	jsr $3bd4			jsr 	_IFShiftXToA
.3bd0	fa		plx				plx
.3bd1	4c 4c 3b	jmp $3b4c			jmp 	_IFAddSubMantissa 			; do the adding bit.
.3bd4					_IFShiftXToA:
.3bd4	8d 4f 04	sta $044f			sta 	IFTarget
.3bd7	20 47 41	jsr $4147			jsr 	IFloatCheckZero 			; check adding zero ?
.3bda	f0 11		beq $3bed			beq 	_IFSXExit
.3bdc					_IFSXLoop:
.3bdc	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.3bde	29 3f		and #$3f			and 	#IFXMask
.3be0	cd 4f 04	cmp $044f			cmp 	IFTarget
.3be3	f0 08		beq $3bed			beq 	_IFSXExit
.3be5	20 7d 41	jsr $417d			jsr 	IFloatShiftRight
.3be8	20 a7 41	jsr $41a7			jsr 	IFloatIncExponent
.3beb	80 ef		bra $3bdc			bra 	_IFSXLoop
.3bed					_IFSXExit:
.3bed	60		rts				rts
.044f					IFTarget:
>044f							.fill 	1
.3bee					IFloatMultiply:
.3bee	8e 4f 04	stx $044f			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.3bf1	20 a9 3c	jsr $3ca9			jsr 	IFCalculateNewSign
.3bf4	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.3bf6	05 0f		ora $0f				ora 	IFR0+IExp
.3bf8	29 3f		and #$3f			and 	#IFXMask
.3bfa	15 01		ora $01,x			ora 	IM1,x
.3bfc	05 0d		ora $0d				ora 	IFR0+IM1
.3bfe	15 02		ora $02,x			ora 	IM2,x
.3c00	05 0e		ora $0e				ora 	IFR0+IM2
.3c02	d0 0a		bne $3c0e			bne 	_IFMStandard
.3c04	20 2a 41	jsr $412a			jsr 	IFloatMultiply8BitRx
.3c07	ad 51 04	lda $0451			lda 	IFNewSign
.3c0a	85 0f		sta $0f				sta 	IFR0+IExp
.3c0c	18		clc				clc
.3c0d	60		rts				rts
.3c0e					_IFMStandard:
.3c0e	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.3c10	20 a0 3c	jsr $3ca0			jsr 	IFMSignExtend
.3c13	8d 50 04	sta $0450			sta 	IFNewExponent
.3c16	a5 0f		lda $0f				lda 	IFR0+IExp
.3c18	20 a0 3c	jsr $3ca0			jsr 	IFMSignExtend
.3c1b	18		clc				clc
.3c1c	6d 50 04	adc $0450			adc 	IFNewExponent
.3c1f	8d 50 04	sta $0450			sta 	IFNewExponent
.3c22	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.3c24	20 f0 40	jsr $40f0			jsr 	IFloatCopyToRegister
.3c27	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.3c29	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.3c2c					_IFMLoop:
.3c2c	a2 18		ldx #$18			ldx 	#IFRTemp
.3c2e	20 47 41	jsr $4147			jsr 	IFloatCheckZero
.3c31	f0 3a		beq $3c6d			beq 	_IFMExit
.3c33	ae 4f 04	ldx $044f			ldx 	IFTarget 					; look at adder MSB
.3c36	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.3c38	10 03		bpl $3c3d			bpl	 	_IFMTargetOkay
.3c3a	20 91 3c	jsr $3c91			jsr 	_IFMShiftAll
.3c3d					_IFMTargetOkay:
.3c3d	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.3c3f	29 01		and #$01			and 	#1
.3c41	f0 16		beq $3c59			beq 	_IFMNoAdd
.3c43	ae 4f 04	ldx $044f			ldx 	IFTarget 					; add adder
.3c46	18		clc				clc
.3c47	a5 0c		lda $0c			lda 	IFR0+IM0
.3c49	75 00		adc $00,x		adc 		IM0,x
.3c4b	85 0c		sta $0c			sta 	IFR0+IM0
.3c4d	a5 0d		lda $0d			lda 	IFR0+IM1
.3c4f	75 01		adc $01,x		adc 		IM1,x
.3c51	85 0d		sta $0d			sta 	IFR0+IM1
.3c53	a5 0e		lda $0e			lda 	IFR0+IM2
.3c55	75 02		adc $02,x		adc 		IM2,x
.3c57	85 0e		sta $0e			sta 	IFR0+IM2
.3c59					_IFMNoAdd:
.3c59	a5 0e		lda $0e				lda 	IFR0+IM2
.3c5b	10 03		bpl $3c60			bpl 	_IFMResultOkay
.3c5d	20 91 3c	jsr $3c91			jsr 	_IFMShiftAll
.3c60					_IFMResultOkay:
.3c60	a2 18		ldx #$18			ldx 	#IFRTemp
.3c62	20 7d 41	jsr $417d			jsr 	IFloatShiftRight
.3c65	ae 4f 04	ldx $044f			ldx 	IFTarget
.3c68	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.3c6b	80 bf		bra $3c2c			bra 	_IFMLoop
.3c6d					_IFMExit:
.3c6d	ad 50 04	lda $0450			lda 	IFNewExponent 				; validate new exponent.
.3c70	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.3c72	90 0f		bcc $3c83			bcc 	_IFMOkay
.3c74	c9 e0		cmp #$e0			cmp 	#$E0
.3c76	b0 0b		bcs $3c83			bcs 	_IFMOkay
.3c78	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.3c7a	f0 13		beq $3c8f			beq 	_IFMError
.3c7c	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.3c7e	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.3c81	18		clc				clc
.3c82	60		rts				rts
.3c83					_IFMOkay:
.3c83	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.3c85	0d 51 04	ora $0451			ora 	IFNewSign
.3c88	85 0f		sta $0f				sta 	IFR0+IExp
.3c8a	18		clc				clc
.3c8b	60		rts				rts
.3c8c	4c ff ff	jmp $ffff			jmp 	$FFFF
.3c8f					_IFMError:
.3c8f	38		sec				sec
.3c90	60		rts				rts
.3c91					_IFMShiftAll:
.3c91	a2 0c		ldx #$0c			ldx 	#IFR0
.3c93	20 7d 41	jsr $417d			jsr 	IFloatShiftRight
.3c96	ae 4f 04	ldx $044f			ldx 	IFTarget
.3c99	20 7d 41	jsr $417d			jsr 	IFloatShiftRight
.3c9c	ee 50 04	inc $0450			inc 	IFNewExponent
.3c9f	60		rts				rts
.3ca0					IFMSignExtend:
.3ca0	29 3f		and #$3f			and 	#IFXMask
.3ca2	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.3ca4	90 02		bcc $3ca8			bcc 	_IFMNoSXX
.3ca6	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.3ca8					_IFMNoSXX:
.3ca8	60		rts				rts
.3ca9					IFCalculateNewSign:
.3ca9	b5 03		lda $03,x			lda 	IExp,x
.3cab	45 0f		eor $0f				eor 	IFR0+IExp
.3cad	29 40		and #$40			and 	#IFSign
.3caf	8d 51 04	sta $0451			sta 	IFNewSign
.3cb2	60		rts				rts
.0450					IFNewExponent:
>0450							.fill 	1
.0451					IFNewSign:
>0451							.fill 	1
.3cb3					IFloatDivideInteger:
.3cb3	20 cc 3c	jsr $3ccc			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.3cb6	b0 06		bcs $3cbe			bcs 	_IFDIExit
.3cb8	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.3cba	20 df 40	jsr $40df			jsr 	IFloatCopyFromRegister
.3cbd	18		clc				clc
.3cbe					_IFDIExit:
.3cbe	60		rts				rts
.3cbf					IFloatModulusInteger:
.3cbf	20 cc 3c	jsr $3ccc			jsr 	IFloatDivideIntegerCommon
.3cc2	b0 07		bcs $3ccb			bcs 	_IFMIExit
.3cc4	ae 4f 04	ldx $044f			ldx 	IFTarget
.3cc7	20 df 40	jsr $40df			jsr 	IFloatCopyFromRegister
.3cca	18		clc				clc
.3ccb					_IFMIExit:
.3ccb	60		rts				rts
.3ccc					IFloatDivideIntegerCommon:
.3ccc	8e 4f 04	stx $044f			stx 	IFTarget  					; this is s1, s0 = R0
.3ccf	20 a9 3c	jsr $3ca9			jsr 	IFCalculateNewSign 			; calculate sign of result
.3cd2	20 fa 3c	jsr $3cfa			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.3cd5	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.3cd7	20 47 41	jsr $4147			jsr 	IFloatCheckZero
.3cda	f0 1c		beq $3cf8			beq 	_IFDIDivZero
.3cdc	ae 4f 04	ldx $044f			ldx 	IFTarget 					; zero Rx (S1)
.3cdf	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.3ce2	5a		phy				phy
.3ce3	a0 18		ldy #$18			ldy 	#24
.3ce5					_IFDILoop:
.3ce5	20 0b 3d	jsr $3d0b			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3ce8	20 17 3d	jsr $3d17			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.3ceb	88		dey				dey
.3cec	d0 f7		bne $3ce5			bne 	_IFDILoop 					; do it 24 times
.3cee	7a		ply				ply
.3cef	ad 51 04	lda $0451			lda 	IFNewSign 					; set sign of result.
.3cf2	29 40		and #$40			and 	#IFSign
.3cf4	85 1b		sta $1b				sta 	IFRTemp+IExp
.3cf6	18		clc				clc 								; is okay.
.3cf7	60		rts				rts
.3cf8					_IFDIDivZero:
.3cf8	38		sec				sec
.3cf9	60		rts				rts
.3cfa					IFDCopyRXToRTemp:
.3cfa	b5 00		lda $00,x			lda 	IM0,x
.3cfc	85 18		sta $18				sta 	IFRTemp+IM0
.3cfe	b5 01		lda $01,x			lda 	IM1,x
.3d00	85 19		sta $19				sta 	IFRTemp+IM1
.3d02	b5 02		lda $02,x			lda 	IM2,x
.3d04	85 1a		sta $1a				sta 	IFRTemp+IM2
.3d06	b5 03		lda $03,x			lda 	IExp,x
.3d08	85 1b		sta $1b				sta 	IFRTemp+IExp
.3d0a	60		rts				rts
.3d0b					IFDShiftSTempS1Left:
.3d0b	a2 18		ldx #$18			ldx 	#IFRTemp
.3d0d	20 75 41	jsr $4175			jsr 	IFloatShiftLeft
.3d10	ae 4f 04	ldx $044f			ldx 	IFTarget
.3d13	20 76 41	jsr $4176			jsr 	IFloatRotateLeft
.3d16	60		rts				rts
.3d17					IFDTrySubtract:
.3d17	ae 4f 04	ldx $044f			ldx 	IFTarget 					; s1 = Rx
.3d1a	38		sec				sec 								; subtract, saving the results on the stack.
.3d1b	b5 00		lda $00,x			lda 	IM0,x
.3d1d	e5 0c		sbc $0c				sbc 	IFR0+IM0
.3d1f	48		pha				pha
.3d20	b5 01		lda $01,x			lda 	IM1,x
.3d22	e5 0d		sbc $0d				sbc 	IFR0+IM1
.3d24	48		pha				pha
.3d25	b5 02		lda $02,x			lda 	IM2,x
.3d27	e5 0e		sbc $0e				sbc 	IFR0+IM2
.3d29	b0 03		bcs $3d2e			bcs 	_IFDCanSubtract
.3d2b	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.3d2c	68		pla				pla
.3d2d	60		rts				rts
.3d2e					_IFDCanSubtract:
.3d2e	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.3d30	68		pla				pla
.3d31	95 01		sta $01,x			sta 	IM1,x
.3d33	68		pla				pla
.3d34	95 00		sta $00,x			sta 	IM0,x
.3d36	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.3d38	d0 06		bne $3d40			bne 	_IFDCSExit
.3d3a	e6 19		inc $19				inc 	IFRTemp+IM1
.3d3c	d0 02		bne $3d40			bne 	_IFDCSExit
.3d3e	e6 1a		inc $1a				inc 	IFRTemp+IM2
.3d40					_IFDCSExit:
.3d40	60		rts				rts
.3d41					IFloatBitwiseAnd:
.3d41	5a		phy				phy
.3d42	20 86 3d	jsr $3d86			jsr 	IFPreProcessBitwise 		; set up everything.
.3d45	d0 0f		bne $3d56			bne 	_IFBAExit
.3d47					_IFBALoop:
.3d47	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.3d4a	35 00		and $00,x			and 	IM0,x
.3d4c	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.3d4f	e8		inx				inx
.3d50	c8		iny				iny
.3d51	c0 03		cpy #$03			cpy 	#3
.3d53	d0 f2		bne $3d47			bne 	_IFBALoop
.3d55	18		clc				clc
.3d56					_IFBAExit:
.3d56	7a		ply				ply
.3d57	60		rts				rts
.3d58					IFloatBitwiseOr:
.3d58	5a		phy				phy
.3d59	20 86 3d	jsr $3d86			jsr 	IFPreProcessBitwise 		; set up everything.
.3d5c	d0 0f		bne $3d6d			bne 	_IFBAExit
.3d5e					_IFBALoop:
.3d5e	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.3d61	15 00		ora $00,x			ora 	IM0,x
.3d63	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.3d66	e8		inx				inx
.3d67	c8		iny				iny
.3d68	c0 03		cpy #$03			cpy 	#3
.3d6a	d0 f2		bne $3d5e			bne 	_IFBALoop
.3d6c	18		clc				clc
.3d6d					_IFBAExit:
.3d6d	7a		ply				ply
.3d6e	60		rts				rts
.3d6f					IFloatBitwiseXor:
.3d6f	5a		phy				phy
.3d70	20 86 3d	jsr $3d86			jsr 	IFPreProcessBitwise 		; set up everything.
.3d73	d0 0f		bne $3d84			bne 	_IFBAExit
.3d75					_IFBALoop:
.3d75	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.3d78	55 00		eor $00,x			eor 	IM0,x
.3d7a	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.3d7d	e8		inx				inx
.3d7e	c8		iny				iny
.3d7f	c0 03		cpy #$03			cpy 	#3
.3d81	d0 f2		bne $3d75			bne 	_IFBALoop
.3d83	18		clc				clc
.3d84					_IFBAExit:
.3d84	7a		ply				ply
.3d85	60		rts				rts
.3d86					IFPreProcessBitwise:
.3d86	a0 00		ldy #$00			ldy 	#0 							; set index.
.3d88	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.3d8a	15 03		ora $03,x			ora 	IExp,x
.3d8c	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.3d8e	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.3d90	38		sec				sec 								; carry set just in cases.
.3d91	60		rts				rts
.3d92					IFloatAbsoluteR0:
.3d92	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.3d94	29 bf		and #$bf			and 	#IFSign ^ 255
.3d96	85 0f		sta $0f				sta 	IFR0+IExp
.3d98	18		clc				clc
.3d99	60		rts				rts
.3d9a					IFloatSquareRootR0:
.3d9a	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.3d9c	20 47 41	jsr $4147			jsr 	IFloatCheckZero
.3d9f	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.3da1	29 40		and #$40			and 	#IFSign
.3da3	d0 2f		bne $3dd4			bne 	_IFSRFail
.3da5	20 85 41	jsr $4185			jsr 	IFloatNormalise 			; it will work better !
.3da8	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.3daa	20 f0 40	jsr $40f0			jsr 	IFloatCopyToRegister
.3dad	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.3daf	20 a0 3c	jsr $3ca0			jsr 	IFMSignExtend 				; sign extended version of the exponent
.3db2	18		clc				clc
.3db3	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.3db5	85 0f		sta $0f				sta 	IFR0+IExp
.3db7	4a		lsr a				lsr 	a 							; which we can halve.
.3db8	38		sec				sec 								; convert back
.3db9	e9 17		sbc #$17			sbc 	#23
.3dbb	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.3dbd	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.3dbf	20 d6 3d	jsr $3dd6			jsr 	_IFSRNewton
.3dc2	20 d6 3d	jsr $3dd6			jsr 	_IFSRNewton
.3dc5	20 d6 3d	jsr $3dd6			jsr 	_IFSRNewton
.3dc8	20 d6 3d	jsr $3dd6			jsr 	_IFSRNewton
.3dcb	18		clc				clc
.3dcc	60		rts				rts
.3dcd					_IFSRZero:
.3dcd	a2 0c		ldx #$0c			ldx 	#IFR0
.3dcf	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.3dd2	18		clc				clc
.3dd3	60		rts				rts
.3dd4					_IFSRFail:
.3dd4	38		sec				sec
.3dd5	60		rts				rts
.3dd6					_IFSRNewton:
.3dd6	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.3dd8	20 9d 40	jsr $409d			jsr 	IFloatPushRx
.3ddb	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.3ddd	20 9d 40	jsr $409d			jsr 	IFloatPushRx
.3de0	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.3de2	20 71 3e	jsr $3e71			jsr 	IFloatDivideFloat
.3de5	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.3de7	20 be 40	jsr $40be			jsr 	IFloatPullRx
.3dea	20 44 3b	jsr $3b44			jsr 	IFloatAdd 					; now guess + original/guess
.3ded	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.3def	20 7d 41	jsr $417d			jsr 	IFloatShiftRight
.3df2	a2 10		ldx #$10			ldx 	#IFR1
.3df4	20 be 40	jsr $40be			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.3df7	60		rts				rts
.3df8					IFloatFractionalR0:
.3df8	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.3dfa	29 3f		and #$3f			and 	#IFXMask
.3dfc	f0 17		beq $3e15			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.3dfe	20 92 3d	jsr $3d92			jsr 	IFloatAbsoluteR0 			; absolute value R9
.3e01	a2 0c		ldx #$0c			ldx 	#IFR0
.3e03	20 85 41	jsr $4185			jsr 	IFloatNormalise 			; normalise R0
.3e06	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.3e08	20 f0 40	jsr $40f0			jsr 	IFloatCopyToRegister
.3e0b	20 4e 3e	jsr $3e4e			jsr 	IFloatIntegerR0 			; take integer part of R0
.3e0e	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.3e10	20 3d 3b	jsr $3b3d			jsr 	IFloatSubtract
.3e13	80 05		bra $3e1a			bra 	_FIPExit
.3e15					_FIPZero:
.3e15	a2 0c		ldx #$0c			ldx 	#IFR0
.3e17	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.3e1a					_FIPExit:
.3e1a	18		clc				clc
.3e1b	60		rts				rts
.3e1c					IFloatCompare:
.3e1c	20 3d 3b	jsr $3b3d			jsr 	IFloatSubtract 				; subtract R0 from RX.
.3e1f	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.3e21	05 0f		ora $0f				ora 	IFR0+IExp
.3e23	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.3e25	29 3f		and #$3f			and 	#IFXMask
.3e27	d0 19		bne $3e42			bne 	_IFCNonInteger
.3e29	20 47 41	jsr $4147			jsr 	IFloatCheckZero 			; check if zero
.3e2c	f0 0f		beq $3e3d			beq 	_IFCZero
.3e2e					_IFCReturnSign:
.3e2e	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.3e30	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.3e32	48		pha				pha
.3e33	a9 01		lda #$01			lda 	#1
.3e35	20 50 41	jsr $4150			jsr 	IFloatSetByte 				; return to +1
.3e38	68		pla				pla 								; sign bit back
.3e39	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.3e3b	18		clc				clc
.3e3c	60		rts				rts
.3e3d					_IFCZero:
.3e3d	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.3e40	18		clc				clc
.3e41	60		rts				rts
.3e42					_IFCNonInteger:
.3e42	a5 0c		lda $0c				lda 	IFR0+IM0
.3e44	29 00		and #$00			and		#$00
.3e46	05 0d		ora $0d				ora 	IFR0+IM1
.3e48	05 0e		ora $0e				ora 	IFR0+IM2
.3e4a	f0 f1		beq $3e3d			beq 	_IFCZero 					; near enough !
.3e4c	80 e0		bra $3e2e			bra 	_IFCReturnSign 				; return the sign of the difference.
.3e4e					IFloatIntegerR0:
.3e4e	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.3e50	29 3f		and #$3f			and 	#IFXMask
.3e52	f0 1b		beq $3e6f			beq 	_FIPExit 					; if so do nothing
.3e54	a2 0c		ldx #$0c			ldx 	#IFR0
.3e56	20 85 41	jsr $4185			jsr 	IFloatNormalise 			; normalise
.3e59	20 47 41	jsr $4147			jsr 	IFloatCheckZero 			; is it zero ?
.3e5c	f0 0e		beq $3e6c			beq 	_FIPZero 					; if so return zero.
.3e5e					_FIPShift:
.3e5e	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.3e60	29 20		and #$20			and 	#$20 						; still -ve
.3e62	f0 0b		beq $3e6f			beq 	_FIPExit
.3e64	20 7d 41	jsr $417d			jsr 	IFloatShiftRight 			; shift mantissa right
.3e67	20 a7 41	jsr $41a7			jsr 	IFloatIncExponent 			; bump exponent
.3e6a	80 f2		bra $3e5e			bra 	_FIPShift
.3e6c					_FIPZero:
.3e6c	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.3e6f					_FIPExit:
.3e6f	18		clc				clc
.3e70	60		rts				rts
.3e71					IFloatDivideFloat:
.3e71	8e 4f 04	stx $044f			stx 	IFTarget  					; this is s1, s0 = R0
.3e74	20 a9 3c	jsr $3ca9			jsr 	IFCalculateNewSign 			; calculate sign of result
.3e77	20 85 41	jsr $4185			jsr 	IFloatNormalise 			; normalise RX
.3e7a	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.3e7c	20 85 41	jsr $4185			jsr 	IFloatNormalise
.3e7f	20 47 41	jsr $4147			jsr 	IFloatCheckZero
.3e82	f0 56		beq $3eda			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.3e84	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.3e86	20 a0 3c	jsr $3ca0			jsr 	IFMSignExtend
.3e89	8d 50 04	sta $0450			sta 	IFNewExponent
.3e8c	ae 4f 04	ldx $044f			ldx 	IFTarget 					; calculate s1.exponent
.3e8f	b5 03		lda $03,x			lda 	IExp,x
.3e91	20 a0 3c	jsr $3ca0			jsr 	IFMSignExtend
.3e94	38		sec				sec
.3e95	ed 50 04	sbc $0450			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.3e98	38		sec				sec
.3e99	e9 17		sbc #$17			sbc 	#23
.3e9b	8d 50 04	sta $0450			sta 	IFNewExponent
.3e9e	20 dc 3e	jsr $3edc			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.3ea1	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.3ea3	10 08		bpl $3ead			bpl 	_IFDFNoShiftResult
.3ea5	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.3ea7	20 7d 41	jsr $417d			jsr 	IFloatShiftRight
.3eaa	ee 50 04	inc $0450			inc 	IFNewExponent
.3ead					_IFDFNoShiftResult:
.3ead	ad 50 04	lda $0450			lda 	IFNewExponent 				; underflow/overflow check.
.3eb0	30 06		bmi $3eb8			bmi 	_IFDFCheckUnderflow
.3eb2	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.3eb4	b0 24		bcs $3eda			bcs 	_IFDFDivZero
.3eb6	80 11		bra $3ec9			bra		_IFDFExit
.3eb8					_IFDFCheckUnderflow:
.3eb8	ad 50 04	lda $0450			lda 	IFNewExponent 				; shift into a legal exponent.
.3ebb	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.3ebd	b0 0a		bcs $3ec9			bcs 	_IFDFExit
.3ebf	ee 50 04	inc $0450			inc 	IFNewExponent
.3ec2	a2 18		ldx #$18			ldx 	#IFRTemp
.3ec4	20 7d 41	jsr $417d			jsr 	IFloatShiftRight
.3ec7	80 ef		bra $3eb8			bra 	_IFDFCheckUnderflow
.3ec9					_IFDFExit:
.3ec9	ad 50 04	lda $0450			lda 	IFNewExponent 				; combine exponent and sign.
.3ecc	29 3f		and #$3f			and 	#IFXMask
.3ece	0d 51 04	ora $0451			ora 	IFNewSign
.3ed1	85 1b		sta $1b				sta 	IFRTemp+IExp
.3ed3	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.3ed5	20 df 40	jsr $40df			jsr 	IFloatCopyFromRegister
.3ed8	18		clc				clc
.3ed9	60		rts				rts
.3eda					_IFDFDivZero:
.3eda	38		sec				sec
.3edb	60		rts				rts
.3edc					IFloatDivideSupport:
.3edc	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.3ede	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.3ee1	5a		phy				phy 								; main division loop x 23
.3ee2	a0 17		ldy #$17			ldy 	#23
.3ee4					_IFDSLoop:
.3ee4	20 17 3d	jsr $3d17			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.3ee7	20 0b 3d	jsr $3d0b			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3eea	88		dey				dey
.3eeb	d0 f7		bne $3ee4			bne 	_IFDSLoop 					; do it 24 times
.3eed	7a		ply				ply
.3eee	60		rts				rts
.3eef					IFloatIntegerToStringR0:
.3eef	8d 52 04	sta $0452			sta 	IFBase 						; save base to use.
.3ef2	20 cf 41	jsr $41cf			jsr 	IFloatBufferReset			; empty buffer
.3ef5	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.3ef7	29 3f		and #$3f			and 	#IFXMask
.3ef9	d0 1e		bne $3f19			bne 	_IFIFail
.3efb	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.3efd	20 47 41	jsr $4147			jsr 	IFloatCheckZero
.3f00	f0 0e		beq $3f10			beq 	_IFINotNegative
.3f02	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.3f04	29 40		and #$40			and 	#IFSign
.3f06	f0 08		beq $3f10			beq 	_IFINotNegative
.3f08	a9 2d		lda #$2d			lda 	#"-"						; output -
.3f0a	20 de 41	jsr $41de			jsr 	IFloatBufferWrite
.3f0d	20 59 41	jsr $4159			jsr 	IFloatNegate 				; tidy up !
.3f10					_IFINotNegative:
.3f10	20 1b 3f	jsr $3f1b			jsr 	_IFIRecursiveConvert 		; start converting
.3f13	20 d6 41	jsr $41d6			jsr 	IFloatGetBufferAddress
.3f16	18		clc				clc
.3f17	80 01		bra $3f1a			bra 	_IFIExit
.3f19					_IFIFail:
.3f19	38		sec				sec
.3f1a					_IFIExit:
.3f1a	60		rts				rts
.3f1b					_IFIRecursiveConvert:
.3f1b	a2 10		ldx #$10			ldx 	#IFR1
.3f1d	20 f0 40	jsr $40f0			jsr 	IFloatCopyToRegister 		; R0->R1
.3f20	a2 0c		ldx #$0c			ldx 	#IFR0
.3f22	ad 52 04	lda $0452			lda 	IFBase 						; Base -> R0
.3f25	20 50 41	jsr $4150			jsr 	IFloatSetByte
.3f28	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.3f2a	20 b3 3c	jsr $3cb3			jsr 	IFloatDivideInteger
.3f2d	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.3f2f	20 47 41	jsr $4147			jsr 	IFloatCheckZero
.3f32	f0 09		beq $3f3d			beq 	_IFIOutDigit
.3f34	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.3f36	48		pha				pha
.3f37	20 1b 3f	jsr $3f1b			jsr 	_IFIRecursiveConvert 		; convert the divider
.3f3a	68		pla				pla
.3f3b	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.3f3d					_IFIOutDigit:
.3f3d	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.3f3f	c9 0a		cmp #$0a			cmp	 	#10
.3f41	90 02		bcc $3f45			bcc 	_IFINotHex
.3f43	69 06		adc #$06			adc 	#6
.3f45					_IFINotHex:
.3f45	69 30		adc #$30			adc 	#48
.3f47	20 de 41	jsr $41de			jsr 	IFloatBufferWrite
.3f4a	60		rts				rts
.0452					IFBase:
>0452							.fill 	1
.3f4b					IFloatFloatToStringR0:
.3f4b	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.3f4d	20 9d 40	jsr $409d			jsr 	IFloatPushRx
.3f50	20 f0 40	jsr $40f0			jsr 	IFloatCopyToRegister
.3f53	20 4e 3e	jsr $3e4e			jsr 	IFloatIntegerR0				; make R0 integer
.3f56	a9 0a		lda #$0a			lda 	#10 						; base 10.
.3f58	20 ef 3e	jsr $3eef			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.3f5b	9c 53 04	stz $0453			stz 	IFloatDecimalCount 			; zero the decimal count.
.3f5e	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.3f60	29 3f		and #$3f			and 	#IFXMask
.3f62	f0 44		beq $3fa8			beq 	_IFFSExit
.3f64					_IFloatFracLoop:
.3f64	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.3f66	20 df 40	jsr $40df			jsr 	IFloatCopyFromRegister
.3f69	20 f8 3d	jsr $3df8			jsr 	IFloatFractionalR0
.3f6c	20 85 41	jsr $4185			jsr 	IFloatNormalise
.3f6f	a2 14		ldx #$14			ldx 	#IFR2
.3f71	20 f0 40	jsr $40f0			jsr 	IFloatCopyToRegister 		; copy to R2
.3f74	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.3f76	a9 0a		lda #$0a			lda 	#10
.3f78	20 50 41	jsr $4150			jsr 	IFloatSetByte
.3f7b	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.3f7d	20 ee 3b	jsr $3bee			jsr 	IFloatMultiply
.3f80	a2 14		ldx #$14			ldx 	#IFR2
.3f82	20 f0 40	jsr $40f0			jsr 	IFloatCopyToRegister
.3f85	20 4e 3e	jsr $3e4e			jsr 	IFloatIntegerR0 			; get integer part of R0
.3f88	ad 53 04	lda $0453			lda 	IFloatDecimalCount 			; done 5 dp, no more
.3f8b	c9 03		cmp #$03			cmp 	#3
.3f8d	f0 16		beq $3fa5			beq 	_IFFSExitStripZero
.3f8f	ad 53 04	lda $0453			lda 	IFloatDecimalCount 			; written the DP yet ?
.3f92	d0 05		bne $3f99			bne 	_IFloatNotFirst
.3f94	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3f96	20 de 41	jsr $41de			jsr 	IFloatBufferWrite
.3f99					_IFloatNotFirst:
.3f99	ee 53 04	inc $0453			inc 	IFloatDecimalCount
.3f9c	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.3f9e	09 30		ora #$30			ora 	#"0"						; ASCII
.3fa0	20 de 41	jsr $41de			jsr 	IFloatBufferWrite 			; write to the buffer.
.3fa3	80 bf		bra $3f64			bra 	_IFloatFracLoop
.3fa5					_IFFSExitStripZero:
.3fa5	20 ed 41	jsr $41ed			jsr 	IFloatStripTrailingZeros
.3fa8					_IFFSExit:
.3fa8	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.3faa	20 be 40	jsr $40be			jsr 	IFloatPullRx
.3fad	20 d6 41	jsr $41d6			jsr 	IFloatGetBufferAddress
.3fb0	18		clc				clc
.3fb1	60		rts				rts
.0453					IFloatDecimalCount:
>0453							.fill 	1
.3fb2					IFloatStringToFloatR0:
.3fb2	8d 54 04	sta $0454			sta 	IFCount 					; save it out.
.3fb5	86 0a		stx $0a				stx 	iTemp0
.3fb7	84 0b		sty $0b				sty 	iTemp0+1
.3fb9	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.3fbb	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.3fbe	9c 55 04	stz $0455			stz 	IFSignFlag 					; clear the sign flag
.3fc1	20 4e 40	jsr $404e			jsr 	IFSTFGetNext 				; get first
.3fc4	f0 1b		beq $3fe1			beq 	_IFSTFFail 					; no character
.3fc6	90 10		bcc $3fd8			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.3fc8	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.3fca	d0 15		bne $3fe1			bne 	_IFSTFFail
.3fcc	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.3fce	8d 55 04	sta $0455			sta 	IFSignFlag
.3fd1					_IFSTFLoop:
.3fd1	20 4e 40	jsr $404e			jsr 	IFSTFGetNext 				; get next
.3fd4	b0 0b		bcs $3fe1			bcs 	_IFSTFFail 					; bad character.
.3fd6	f0 11		beq $3fe9			beq 	_IFSTFExit 					; end of data
.3fd8					_IFSTFHaveChar:
.3fd8	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.3fda	f0 08		beq $3fe4			beq 	_IFSTFDecimal
.3fdc	20 72 40	jsr $4072			jsr 	IFSTFAddR0 					; add number in
.3fdf	80 f0		bra $3fd1			bra 	_IFSTFLoop 					; keep going until . or end.
.3fe1					_IFSTFFail:
.3fe1	38		sec				sec
.3fe2	80 0d		bra $3ff1			bra 	_IFSTFReturn
.3fe4					_IFSTFDecimal:
.3fe4	20 f9 3f	jsr $3ff9			jsr 	IFSTFDecimal 				; call the decimal places code.
.3fe7	b0 08		bcs $3ff1			bcs 	_IFSTFReturn 				; error
.3fe9					_IFSTFExit:
.3fe9	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.3feb	0d 55 04	ora $0455			ora 	IFSignFlag
.3fee	85 0f		sta $0f				sta 	IFR0+IExp
.3ff0	18		clc				clc
.3ff1					_IFSTFReturn:
.3ff1	60		rts				rts
.3ff2					IFloatAddDecimalToR0:
.3ff2	8d 54 04	sta $0454			sta 	IFCount 					; save it out.
.3ff5	86 0a		stx $0a				stx 	iTemp0
.3ff7	84 0b		sty $0b				sty 	iTemp0+1
.3ff9					IFSTFDecimal:
.3ff9	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.3ffb	20 9d 40	jsr $409d			jsr 	IFloatPushRx
.3ffe	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.4000	20 4e 41	jsr $414e			jsr 	IFloatSetZero
.4003	9c 56 04	stz $0456			stz 	IFDecimalPlaces
.4006					_IFSTDLoop:
.4006	20 4e 40	jsr $404e			jsr 	IFSTFGetNext 				; get next
.4009	b0 41		bcs $404c			bcs 	_IFSTFFail2 				; bad character.
.400b	f0 11		beq $401e			beq 	_IFSTFComplete 				; end of data, work out the result.
.400d	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.400f	f0 39		beq $404a			beq 	_IFSTFExit2
.4011	20 72 40	jsr $4072			jsr 	IFSTFAddR0 					; add number in
.4014	ee 56 04	inc $0456			inc 	IFDecimalPlaces 			; count decimals
.4017	ad 56 04	lda $0456			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.401a	c9 03		cmp #$03			cmp 	#3
.401c	90 e8		bcc $4006			bcc 	_IFSTDLoop
.401e					_IFSTFComplete:
.401e	ad 56 04	lda $0456			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.4021	f0 27		beq $404a			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.4023	3a		dec a				dec 	a 							; table indexed from 1.
.4024	0a		asl a				asl 	a
.4025	0a		asl a				asl 	a
.4026	aa		tax				tax
.4027	bd 89 40	lda $4089,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.402a	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.402c	bd 8a 40	lda $408a,x			lda 	TableTen+1,x
.402f	85 11		sta $11				sta  	IFR1+IM1
.4031	bd 8b 40	lda $408b,x			lda 	TableTen+2,x
.4034	85 12		sta $12				sta  	IFR1+IM2
.4036	bd 8c 40	lda $408c,x			lda 	TableTen+3,x
.4039	85 13		sta $13				sta  	IFR1+IExp
.403b	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.403d	20 ee 3b	jsr $3bee			jsr 	IFloatMultiply
.4040	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.4042	20 be 40	jsr $40be			jsr 	IFloatPullRx
.4045	a2 10		ldx #$10			ldx 	#IFR1
.4047	20 44 3b	jsr $3b44			jsr 	IFloatAdd
.404a					_IFSTFExit2:
.404a	18		clc				clc
.404b	60		rts				rts
.404c					_IFSTFFail2:
.404c	38		sec				sec
.404d	60		rts				rts
.404e					IFSTFGetNext:
.404e	ad 54 04	lda $0454			lda 	IFCount  					; if count is zero, return with Z set.
.4051	f0 19		beq $406c			beq 	_IFSTFReturnOk
.4053	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.4055	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.4057	d0 02		bne $405b			bne 	_IFSTFGNNoCarry
.4059	e6 0b		inc $0b				inc 	iTemp0+1
.405b					_IFSTFGNNoCarry:
.405b	ce 54 04	dec $0454			dec 	IFCount 					; dec count.
.405e	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.4060	f0 08		beq $406a			beq 	_IFSTFGOkay
.4062	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.4064	90 08		bcc $406e			bcc 	_IFSTFGFail
.4066	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.4068	b0 04		bcs $406e			bcs 	_IFSTFGFail
.406a					_IFSTFGOkay:
.406a	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.406c					_IFSTFReturnOk:
.406c	18		clc				clc
.406d	60		rts				rts
.406e					_IFSTFGFail:
.406e	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.4070	38		sec				sec
.4071	60		rts				rts
.4072					IFSTFAddR0:
.4072	29 0f		and #$0f			and 	#15 						; to int value
.4074	48		pha				pha 								; save it.
.4075	a9 0a		lda #$0a			lda 	#10
.4077	a2 10		ldx #$10			ldx 	#IFR1
.4079	20 50 41	jsr $4150			jsr 	IFloatSetByte
.407c	20 ee 3b	jsr $3bee			jsr 	IFloatMultiply
.407f	68		pla				pla
.4080	a2 10		ldx #$10			ldx 	#IFR1
.4082	20 50 41	jsr $4150			jsr 	IFloatSetByte
.4085	20 44 3b	jsr $3b44			jsr 	IFloatAdd
.4088	60		rts				rts
.0454					IFCount:
>0454							.fill 	1
.0455					IFSignFlag:
>0455							.fill 	1
.0456					IFDecimalPlaces:
>0456							.fill 	1
.4089					TableTen:
>4089	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>408d	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>4091	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>4095	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>4099	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.409d					IFloatPushRx:
.409d	5a		phy				phy
.409e	ac 57 04	ldy $0457			ldy 	IFStackIndex
.40a1	b5 00		lda $00,x			lda 	IM0,x
.40a3	99 58 04	sta $0458,y			sta 	IFStack,y
.40a6	b5 01		lda $01,x			lda 	IM1,x
.40a8	99 59 04	sta $0459,y			sta 	IFStack+1,y
.40ab	b5 02		lda $02,x			lda 	IM2,x
.40ad	99 5a 04	sta $045a,y			sta 	IFStack+2,y
.40b0	b5 03		lda $03,x			lda 	IExp,x
.40b2	99 5b 04	sta $045b,y			sta 	IFStack+3,y
.40b5	c8		iny				iny
.40b6	c8		iny				iny
.40b7	c8		iny				iny
.40b8	c8		iny				iny
.40b9	8c 57 04	sty $0457			sty 	IFStackIndex
.40bc	7a		ply				ply
.40bd	60		rts				rts
.40be					IFloatPullRx:
.40be	5a		phy				phy
.40bf	ac 57 04	ldy $0457			ldy 	IFStackIndex
.40c2	88		dey				dey
.40c3	88		dey				dey
.40c4	88		dey				dey
.40c5	88		dey				dey
.40c6	b9 58 04	lda $0458,y			lda 	IFStack,y
.40c9	95 00		sta $00,x			sta 	IM0,x
.40cb	b9 59 04	lda $0459,y			lda 	IFStack+1,y
.40ce	95 01		sta $01,x			sta 	IM1,x
.40d0	b9 5a 04	lda $045a,y			lda 	IFStack+2,y
.40d3	95 02		sta $02,x			sta 	IM2,x
.40d5	b9 5b 04	lda $045b,y			lda 	IFStack+3,y
.40d8	95 03		sta $03,x			sta 	IExp,x
.40da	8c 57 04	sty $0457			sty 	IFStackIndex
.40dd	7a		ply				ply
.40de	60		rts				rts
.0457					IFStackIndex:
>0457							.fill 	1
.0458					IFStack:
>0458							.fill 	16*4
.40df					IFloatCopyFromRegister:
.40df	b5 00		lda $00,x			lda 	0,x
.40e1	85 0c		sta $0c				sta 	IFR0
.40e3	b5 01		lda $01,x			lda 	1,x
.40e5	85 0d		sta $0d				sta 	IFR0+1
.40e7	b5 02		lda $02,x			lda 	2,x
.40e9	85 0e		sta $0e				sta 	IFR0+2
.40eb	b5 03		lda $03,x			lda 	3,x
.40ed	85 0f		sta $0f				sta 	IFR0+3
.40ef	60		rts				rts
.40f0					IFloatCopyToRegister:
.40f0	a5 0c		lda $0c				lda 	IFR0
.40f2	95 00		sta $00,x			sta 	0,x
.40f4	a5 0d		lda $0d				lda 	IFR0+1
.40f6	95 01		sta $01,x			sta 	1,x
.40f8	a5 0e		lda $0e				lda 	IFR0+2
.40fa	95 02		sta $02,x			sta 	2,x
.40fc	a5 0f		lda $0f				lda 	IFR0+3
.40fe	95 03		sta $03,x			sta 	3,x
.4100	60		rts				rts
.4101					IFloatLoadInline:
.4101	68		pla				pla 								; pop address off to iTemp0
.4102	85 0a		sta $0a				sta 	iTemp0
.4104	68		pla				pla
.4105	85 0b		sta $0b				sta 	iTemp0+1
.4107	a0 01		ldy #$01			ldy 	#1
.4109	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.410b	95 00		sta $00,x			sta 	0,x
.410d	c8		iny				iny
.410e	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.4110	95 01		sta $01,x			sta 	1,x
.4112	c8		iny				iny
.4113	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.4115	95 02		sta $02,x			sta 	2,x
.4117	c8		iny				iny
.4118	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.411a	95 03		sta $03,x			sta 	3,x
.411c	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.411d	a5 0a		lda $0a				lda 	iTemp0
.411f	69 05		adc #$05			adc 	#5
.4121	85 0a		sta $0a				sta 	iTemp0
.4123	90 02		bcc $4127			bcc 	_IFLINoCarry
.4125	e6 0b		inc $0b				inc 	iTemp0+1
.4127					_IFLINoCarry:
.4127	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.412a					IFloatMultiply8BitRx:
.412a	5a		phy		        phy
.412b	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.412d	a4 0c		ldy $0c		        ldy     IFR0+IM0
.412f	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.4130	85 0c		sta $0c		        sta     IFR0+IM0
.4132	84 0d		sty $0d		        sty     IFR0+IM1
.4134	a9 00		lda #$00	        lda     #0
.4136	a0 08		ldy #$08	        ldy     #8
.4138					_IFMLoop:
.4138	90 03		bcc $413d	        bcc     _IFMNoAdd
.413a	18		clc		        clc
.413b	65 0d		adc $0d		        adc     IFR0+IM1
.413d					_IFMNoAdd:
.413d	6a		ror a		        ror     a
.413e	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.4140	88		dey		        dey
.4141	d0 f5		bne $4138	        bne     _IFMLoop
.4143	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.4145	7a		ply		        ply
.4146	60		rts		        rts
.4147					IFloatCheckZero:
.4147	b5 00		lda $00,x			lda 	IM0,x
.4149	15 01		ora $01,x			ora 	IM1,x
.414b	15 02		ora $02,x			ora 	IM2,x
.414d	60		rts				rts
.414e					IFloatSetZero:
.414e	a9 00		lda #$00			lda 	#0
.4150					IFloatSetByte:
.4150	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.4152	74 01		stz $01,x			stz 	IM1,x
.4154	74 02		stz $02,x			stz 	IM2,x
.4156	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.4158	60		rts				rts
.4159					IFloatNegate:
.4159	b5 03		lda $03,x			lda 	IExp,x
.415b	49 40		eor #$40			eor 	#IFSign
.415d	95 03		sta $03,x			sta 	IExp,x
.415f	18		clc				clc
.4160	60		rts				rts
.4161					IFloatMantissaNegate:
.4161	38		sec				sec
.4162	a9 00		lda #$00			lda 	#0
.4164	f5 00		sbc $00,x			sbc 	IM0,x
.4166	95 00		sta $00,x			sta 	IM0,x
.4168	a9 00		lda #$00			lda 	#0
.416a	f5 01		sbc $01,x			sbc 	IM1,x
.416c	95 01		sta $01,x			sta 	IM1,x
.416e	a9 00		lda #$00			lda 	#0
.4170	f5 02		sbc $02,x			sbc 	IM2,x
.4172	95 02		sta $02,x			sta 	IM2,x
.4174	60		rts				rts
.4175					IFloatShiftLeft:
.4175	18		clc				clc
.4176					IFloatRotateLeft:
.4176	36 00		rol $00,x			rol 	IM0,x
.4178	36 01		rol $01,x			rol 	IM1,x
.417a	36 02		rol $02,x			rol 	IM2,x
.417c	60		rts				rts
.417d					IFloatShiftRight:
.417d	18		clc				clc
.417e					IFloatRotateRight:
.417e	76 02		ror $02,x			ror 	IM2,x
.4180	76 01		ror $01,x			ror 	IM1,x
.4182	76 00		ror $00,x			ror 	IM0,x
.4184	60		rts				rts
.4185					IFloatNormalise:
.4185	20 47 41	jsr $4147			jsr 	IFloatCheckZero 			; is it zero
.4188	f0 18		beq $41a2			beq 	_IFNExitZero 				; if so exit
.418a					_IFNLoop:
.418a	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.418c	29 c0		and #$c0			and 	#$C0
.418e	c9 40		cmp #$40			cmp 	#$40
.4190	f0 13		beq $41a5			beq 	_IFNExitOkay 				; if so , then we are done.
.4192	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.4194	29 3f		and #$3f			and 	#$3F
.4196	c9 20		cmp #$20			cmp 	#$20
.4198	f0 0b		beq $41a5			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.419a	20 bb 41	jsr $41bb			jsr 	IFloatDecExponent
.419d	20 75 41	jsr $4175			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.41a0	80 e8		bra $418a			bra 	_IFNLoop
.41a2					_IFNExitZero:
.41a2	20 4e 41	jsr $414e			jsr 	IFloatSetZero 				; set the result to zero
.41a5					_IFNExitOkay:
.41a5	18		clc				clc  								; return with CC.
.41a6	60		rts				rts
.41a7					IFloatIncExponent:
.41a7	b5 03		lda $03,x			lda 	IExp,x
.41a9	48		pha				pha
.41aa	29 c0		and #$c0			and 	#$C0
.41ac	8d 98 04	sta $0498			sta 	IFXTemp
.41af	68		pla				pla
.41b0	1a		inc a				inc 	a
.41b1	29 3f		and #$3f			and 	#$3F
.41b3	48		pha				pha
.41b4	0d 98 04	ora $0498			ora 	IFXTemp
.41b7	95 03		sta $03,x			sta 	IExp,x
.41b9	68		pla				pla
.41ba	60		rts				rts
.41bb					IFloatDecExponent:
.41bb	b5 03		lda $03,x			lda 	IExp,x
.41bd	48		pha				pha
.41be	29 c0		and #$c0			and 	#$C0
.41c0	8d 98 04	sta $0498			sta 	IFXTemp
.41c3	68		pla				pla
.41c4	3a		dec a				dec 	a
.41c5	29 3f		and #$3f			and 	#$3F
.41c7	48		pha				pha
.41c8	0d 98 04	ora $0498			ora 	IFXTemp
.41cb	95 03		sta $03,x			sta 	IExp,x
.41cd	68		pla				pla
.41ce	60		rts				rts
.0498					IFXTemp:
>0498							.fill 	1
.41cf					IFloatBufferReset:
.41cf	9c 99 04	stz $0499			stz 	IFBufferCount
.41d2	9c 9a 04	stz $049a			stz 	IFBuffer
.41d5	60		rts				rts
.41d6					IFloatGetBufferAddress:
.41d6	a0 04		ldy #$04			ldy 	#(IFBuffer >> 8)
.41d8	a2 9a		ldx #$9a			ldx 	#(IFBuffer & $FF)
.41da	ad 99 04	lda $0499			lda 	IFBufferCount
.41dd	60		rts				rts
.41de					IFloatBufferWrite:
.41de	da		phx				phx
.41df	ae 99 04	ldx $0499			ldx 	IFBufferCount
.41e2	9d 9a 04	sta $049a,x			sta 	IFBuffer,x
.41e5	9e 9b 04	stz $049b,x			stz 	IFBuffer+1,x
.41e8	ee 99 04	inc $0499			inc 	IFBufferCount
.41eb	fa		plx				plx
.41ec	60		rts				rts
.41ed					IFloatStripTrailingZeros:
.41ed	ae 99 04	ldx $0499			ldx 	IFBufferCount
.41f0	bd 99 04	lda $0499,x			lda 	IFBuffer-1,x
.41f3	c9 30		cmp #$30			cmp		#"0"
.41f5	d0 0f		bne $4206			bne 	_IFSTExit
.41f7	bd 98 04	lda $0498,x			lda 	IFBuffer-2,x
.41fa	c9 2e		cmp #$2e			cmp 	#"."
.41fc	f0 08		beq $4206			beq 	_IFSTExit
.41fe	ce 99 04	dec $0499			dec 	IFBufferCount
.4201	9e 99 04	stz $0499,x			stz 	IFBuffer-1,x
.4204	80 e7		bra $41ed			bra 	IFloatStripTrailingZeros
.4206					_IFSTExit:
.4206	60		rts				rts
.0499					IFBufferCount:
>0499							.fill 	1
.049a					IFBuffer:
>049a							.fill 	25
.4207					IFloatCheck:
.4207	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.4209	09 40		ora #$40			ora 	#IFSign
.420b	85 0f		sta $0f				sta 	IFR0+IExp
.420d	20 44 3b	jsr $3b44			jsr 	IFloatAdd 					; add allowed to error.
.4210	a2 0c		ldx #$0c			ldx 	#IFR0
.4212	20 47 41	jsr $4147			jsr 	IFloatCheckZero 			; error if < 0
.4215	f0 06		beq $421d			beq 	_IFAOkay
.4217	a5 0f		lda $0f				lda 	IFR0+IExp
.4219	29 40		and #$40			and 	#IFSign
.421b	d0 01		bne $421e			bne 	_IFAFail
.421d					_IFAOkay:
.421d	60		rts				rts
.421e					_IFAFail:
.421e	38		sec				sec
.421f	68		pla				pla 								; get address - 2
.4220	e9 02		sbc #$02			sbc 	#2
.4222	aa		tax				tax
.4223	68		pla				pla
.4224	e9 00		sbc #$00			sbc 	#0
.4226	a8		tay				tay
.4227	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.4229					_IFAStop:
>4229	db						.byte 	$DB 						; display an error AA ADR ADR
.422a	80 fd		bra $4229			bra 	_IFAStop

;******  Return to file: basic.asm

.422c					NotImplemented:
.422c	a9 ff		lda #$ff			lda 	#$FF
.422e	80 04		bra $4234			bra 	EnterDbg
.4230					ErrorHandler:
.4230	fa		plx				plx
.4231	7a		ply				ply
.4232	a9 ee		lda #$ee			lda 	#$EE
.4234					EnterDbg:
>4234	db						.byte 	$DB
.4235	4c 34 42	jmp $4234			jmp 	EnterDbg

;******  End of listing
