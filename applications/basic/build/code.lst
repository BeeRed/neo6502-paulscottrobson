
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Mon Jun 26 12:05:01 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 3f 1f	jsr $1f3f			jsr 	PGMSetBaseAddress
.1007	20 b6 2a	jsr $2ab6			jsr 	IFInitialise 				; setup math library
.100a	4c 05 14	jmp $1405			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$aa					PR_READ = $aa
=$ab					PR_DATA = $ab
=$ac					PR_RESTORE = $ac
=$ad					PR_GOTO = $ad
=$ae					PR_GOSUB = $ae
=$af					PR_RETURN = $af
=$af					PR_STANDARD_LAST = $af
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 03 17	jsr $1703			jsr 	EXPEvalNumber
.1010	a2 08		ldx #$08			ldx 	#IFR0
.1012	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c c1 25	jmp $25c1		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.101d	c9 9b		cmp #$9b			cmp 	#PR_COLON
.101f	f0 14		beq $1035			beq 	_CLNoParam
.1021	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1023	f0 10		beq $1035			beq 	_CLNoParam
.1025	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; address for CLEAR
.1028	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102a	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102c	b0 0b		bcs $1039			bcs 	_CLMemory
.102e	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1030	90 07		bcc $1039			bcc 	_CLMemory
.1032	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory.
.1035					_CLNoParam:
.1035	20 3c 10	jsr $103c			jsr 	ClearCode
.1038	60		rts				rts
.1039					_CLMemory:
.1039	4c 5b 26	jmp $265b		jmp	ErrorV_memory
.103c					ClearCode:
.103c	20 52 1f	jsr $1f52			jsr 	PGMEndProgram 				; end program => zTemp0
.103f	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1041	a5 23		lda $23				lda 	zTemp0+1
.1043	1a		inc a				inc 	a
.1044	85 29		sta $29				sta 	freeMemory+1
.1046	20 55 2a	jsr $2a55			jsr 	VARClearHashTables
.1049	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.104c	20 8f 27	jsr $278f			jsr 	StackReset
.104f	20 ee 27	jsr $27ee			jsr 	StringSystemInitialise
.1052	20 d6 24	jsr $24d6			jsr 	ScanProcedures
.1055	20 8f 14	jsr $148f			jsr 	Command_RESTORE
.1058	60		rts				rts
.1059					AllocateMemory:
.1059	5a		phy				phy 								; save Y
.105a	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low
.105c	5a		phy				phy
.105d	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.105f	5a		phy				phy
.1060	a8		tay				tay 								; count is now in XY
.1061					_AllocateLoop:
.1061	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1063	d0 04		bne $1069			bne 	_AllocateOne
.1065	c0 00		cpy #$00			cpy 	#0
.1067	f0 15		beq $107e			beq 	_AllocateExit
.1069					_AllocateOne:
.1069	a9 00		lda #$00			lda 	#0 							; zero byte
.106b	92 28		sta ($28)			sta 	(freeMemory)
.106d	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.106f	d0 05		bne $1076			bne 	_AllocateSkipCarry
.1071	e6 29		inc $29				inc 	freeMemory+1
.1073	20 82 10	jsr $1082			jsr 	ClearCheckMemory
.1076					_AllocateSkipCarry:
.1076	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1078	d0 01		bne $107b			bne 	_AllocateSkipBorrow
.107a	ca		dex				dex
.107b					_AllocateSkipBorrow:
.107b	88		dey				dey
.107c	80 e3		bra $1061			bra 	_AllocateLoop
.107e					_AllocateExit:
.107e	fa		plx				plx 								; restore address
.107f	68		pla				pla
.1080	7a		ply				ply 								; restore Y
.1081	60		rts				rts
.1082					ClearCheckMemory:
.1082	a5 29		lda $29				lda 	freeMemory+1
.1084	1a		inc a				inc 	a
.1085	1a		inc a				inc 	a
.1086	cd 23 06	cmp $0623			cmp 	stringMemory+1
.1089	b0 01		bcs $108c			bcs  	_CCMError
.108b	60		rts				rts
.108c					_CCMError:
.108c	4c 5b 26	jmp $265b		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.108f					CommandDIM:
.108f	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1091	29 c0		and #$c0			and 	#$C0
.1093	c9 40		cmp #$40			cmp 	#$40
.1095	d0 39		bne $10d0			bne 	_CDSyntax
.1097	20 0c 2a	jsr $2a0c			jsr 	VARGetInfo 					; get information
.109a	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.109d	29 02		and #$02			and 	#2
.109f	f0 2f		beq $10d0			beq 	_CDSyntax
.10a1	20 be 29	jsr $29be			jsr 	VARFind 					; does it already exist
.10a4	b0 2d		bcs $10d3			bcs 	_CDExists
.10a6	20 6a 29	jsr $296a			jsr 	VARCreate 					; create it - returns data ptr in XA
.10a9	da		phx				phx 								; save target address
.10aa	48		pha				pha
.10ab	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10ae	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b0	20 d6 10	jsr $10d6			jsr 	CreateArray 				; create array to XA
.10b3	84 24		sty $24				sty 	zTemp1 						; save Y
.10b5	7a		ply				ply 								; restore target to zTemp0
.10b6	84 22		sty $22				sty 	zTemp0
.10b8	7a		ply				ply
.10b9	84 23		sty $23				sty 	zTemp0+1
.10bb	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10bd	a0 01		ldy #$01			ldy 	#1
.10bf	8a		txa				txa
.10c0	91 22		sta ($22),y			sta 	(zTemp0),y
.10c2	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10c4	20 20 27	jsr $2720			jsr 	ERRCheckRParen 				; check )
.10c7	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10c9	c8		iny				iny
.10ca	c9 99		cmp #$99			cmp 	#PR_COMMA
.10cc	f0 c1		beq $108f			beq 	CommandDIM
.10ce	88		dey				dey
.10cf	60		rts				rts
.10d0					_CDSyntax:
.10d0	4c 6b 25	jmp $256b		jmp	ErrorV_syntax
.10d3					_CDExists:
.10d3	4c 33 26	jmp $2633		jmp	ErrorV_redefine
.10d6					CreateArray:
.10d6	8d 03 05	sta $0503			sta 	CAType						; save type
.10d9	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10dc	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10de	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e0	f0 04		beq $10e6			beq 	_CATwoDimensions
.10e2	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e5	60		rts				rts
.10e6					_CATwoDimensions:
.10e6	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10e8	8d 05 05	sta $0505			sta 	CADim1+1
.10eb	a5 08		lda $08				lda 	IFR0+IM0
.10ed	8d 04 05	sta $0504			sta 	CADim1+0
.10f0	20 28 27	jsr $2728			jsr 	ERRCheckComma 				; check comma
.10f3	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f6	5a		phy				phy 								; save Y position
.10f7	18		clc				clc 								; allocate the outer array of pointers.
.10f8	ae 05 05	ldx $0505			ldx 	CADim1+1
.10fb	ad 04 05	lda $0504			lda 	CADim1
.10fe	20 71 11	jsr $1171			jsr 	CSAAllocate 				; allocate the outer array
.1101	da		phx				phx									; save this address on the stack
.1102	48		pha				pha
.1103	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.1105	85 26		sta $26				sta 	zTemp2
.1107					_CACreateSubLoop:
.1107	38		sec				sec
.1108	20 32 11	jsr $1132			jsr 	CreateSingleArray 			; create data array of required size.
.110b	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.110d	91 26		sta ($26),y			sta 	(zTemp2),y
.110f	8a		txa				txa
.1110	c8		iny				iny
.1111	91 26		sta ($26),y			sta 	(zTemp2),y
.1113	18		clc				clc  								; next slot.
.1114	a5 26		lda $26				lda 	zTemp2
.1116	69 02		adc #$02			adc 	#2
.1118	85 26		sta $26				sta 	zTemp2
.111a	90 02		bcc $111e			bcc 	_CACNoCarry
.111c	e6 27		inc $27				inc 	zTemp2+1
.111e					_CACNoCarry:
.111e	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1121	d0 03		bne $1126			bne 	_CACNoBorrow
.1123	ce 05 05	dec $0505			dec 	CADim1+1
.1126					_CACNoBorrow:
.1126	ce 04 05	dec $0504			dec 	CADim1
.1129	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.112c	10 d9		bpl $1107			bpl 	_CACreateSubLoop
.112e	68		pla				pla
.112f	fa		plx				plx
.1130	7a		ply				ply
.1131	60		rts				rts
.1132					CreateSingleArray:
.1132	5a		phy				phy
.1133	38		sec				sec 								; allocate memory block all zeros.
.1134	a5 08		lda $08				lda 	IFR0+IM0
.1136	a6 09		ldx $09				ldx 	IFR0+IM1
.1138	20 71 11	jsr $1171			jsr 	CSAAllocate
.113b	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.113e	f0 2f		beq $116f			beq 	_CSANoInit
.1140	da		phx				phx 								; save address of new array
.1141	48		pha				pha
.1142	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1144	86 23		stx $23				stx 	zTemp0+1
.1146	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1148	b1 22		lda ($22),y			lda 	(zTemp0),y
.114a	a8		tay				tay
.114b	b2 22		lda ($22)			lda 	(zTemp0)
.114d	aa		tax				tax
.114e					_CSAEraseString:
.114e	5a		phy				phy
.114f	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1151	a9 80		lda #$80			lda 	#$80
.1153	91 22		sta ($22),y			sta 	(zTemp0),y
.1155	7a		ply				ply
.1156	18		clc				clc 								; add 4 to next slot.
.1157	a5 22		lda $22				lda 	zTemp0
.1159	69 04		adc #$04			adc 	#4
.115b	85 22		sta $22				sta 	zTemp0
.115d	90 02		bcc $1161			bcc 	_CSAENoCarry
.115f	e6 23		inc $23				inc 	zTemp0+1
.1161					_CSAENoCarry:
.1161	e0 00		cpx #$00			cpx 	#0
.1163	d0 01		bne $1166			bne 	_CSANoBorrow
.1165	88		dey				dey
.1166					_CSANoBorrow:
.1166	ca		dex				dex
.1167	d0 e5		bne $114e			bne 	_CSAEraseString
.1169	c0 00		cpy #$00			cpy 	#0
.116b	d0 e1		bne $114e			bne 	_CSAEraseString
.116d	68		pla				pla
.116e	fa		plx				plx
.116f					_CSANoInit:
.116f	7a		ply				ply
.1170	60		rts				rts
.1171					CSAAllocate:
.1171	08		php				php 								; save type flag.
.1172	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1173	d0 01		bne $1176			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1175	e8		inx				inx
.1176					_CSAANoCarry:
.1176	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1178	b0 2e		bcs $11a8			bcs 	_CSARange
.117a	28		plp				plp 								; restore type flag
.117b	08		php				php 								; save it back again.
.117c	da		phx				phx 								; save size.
.117d	48		pha				pha
.117e	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1180	90 03		bcc $1185			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1182	0a		asl a				asl 	a
.1183	26 23		rol $23				rol 	zTemp0+1
.1185					_CSAATimes2:
.1185	0a		asl a				asl 	a
.1186	26 23		rol $23				rol 	zTemp0+1
.1188	18		clc				clc
.1189	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.118b	90 02		bcc $118f			bcc 	_CSAANoCarry2
.118d	e6 23		inc $23				inc 	zTemp0+1
.118f					_CSAANoCarry2:
.118f	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1191	20 59 10	jsr $1059			jsr 	AllocateMemory 				; allocate memory to XA
.1194	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1196	85 22		sta $22				sta 	zTemp0
.1198	68		pla				pla  								; write element count to first 2 bytes
.1199	92 22		sta ($22)			sta 	(zTemp0)
.119b	68		pla				pla 								; msb of element count
.119c	28		plp				plp 								; CC if pointer array
.119d	b0 02		bcs $11a1			bcs 	_CSAAIsData
.119f	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a1					_CSAAIsData:
.11a1	a0 01		ldy #$01			ldy 	#1
.11a3	91 22		sta ($22),y			sta 	(zTemp0),y
.11a5	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11a7	60		rts				rts
.11a8					_CSARange:
.11a8	4c 7c 25	jmp $257c		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11ab					Command_Doke:
.11ab	38		sec				sec
.11ac	80 01		bra $11af			bra 	DPCommon
.11ae					Command_Poke:
.11ae	18		clc				clc
.11af					DPCommon:
.11af	08		php				php 								; CS if DOKE
.11b0	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; address
.11b3	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b5	48		pha				pha
.11b6	a5 09		lda $09				lda 	IFR0+IM1
.11b8	48		pha				pha
.11b9	20 28 27	jsr $2728			jsr 	ERRCheckComma 				; [dp]oke address,data
.11bc	20 15 17	jsr $1715			jsr 	EXPEvalInteger16
.11bf	68		pla				pla 								; get address back
.11c0	85 23		sta $23				sta 	zTemp0+1
.11c2	68		pla				pla
.11c3	85 22		sta $22				sta 	zTemp0
.11c5	a5 08		lda $08				lda 	IFR0+IM0
.11c7	92 22		sta ($22)			sta 	(zTemp0)
.11c9	28		plp				plp
.11ca	90 08		bcc $11d4			bcc 	_DPExit
.11cc	5a		phy				phy
.11cd	a5 09		lda $09				lda 	IFR0+IM1
.11cf	a0 01		ldy #$01			ldy 	#1
.11d1	91 22		sta ($22),y			sta 	(zTemp0),y
.11d3	7a		ply				ply
.11d4					_DPExit:
.11d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11d5					Command_GOTO:
.11d5	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; get line number
.11d8					GotoR0:
.11d8	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11db	85 19		sta $19				sta 	codePtr+1
.11dd	64 18		stz $18				stz 	codePtr
.11df					_GOSearch:
.11df	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e1	f0 1f		beq $1202			beq 	_GOError
.11e3	a0 01		ldy #$01			ldy 	#1 							; found line #
.11e5	b1 18		lda ($18),y			lda 	(codePtr),y
.11e7	c5 08		cmp $08				cmp 	IFR0+IM0
.11e9	d0 0a		bne $11f5			bne 	_GONext
.11eb	c8		iny				iny
.11ec	b1 18		lda ($18),y			lda 	(codePtr),y
.11ee	c5 09		cmp $09				cmp 	IFR0+IM1
.11f0	d0 03		bne $11f5			bne 	_GONext
.11f2	4c d4 14	jmp $14d4			jmp 	RUNNewLine
.11f5					_GONext:
.11f5	18		clc				clc 								; advance to next line.
.11f6	b2 18		lda ($18)			lda 	(codePtr)
.11f8	65 18		adc $18				adc 	codePtr
.11fa	85 18		sta $18				sta 	codePtr
.11fc	90 e1		bcc $11df			bcc 	_GOSearch
.11fe	e6 19		inc $19				inc 	codePtr+1
.1200	80 dd		bra $11df			bra 	_GOSearch
.1202					_GOError:
.1202	4c 00 27	jmp $2700		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1205					Command_Input:
.1205	a9 ff		lda #$ff			lda 	#$FF
.1207	8d 06 05	sta $0506			sta 	InputFlag
.120a	80 03		bra $120f			bra 	Command_IP_Main
.120c					Command_Print:
.120c	9c 06 05	stz $0506			stz 	InputFlag
.120f					Command_IP_Main:
.120f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1210					_CPLoop:
.1210	08		php				php 								; save last action flag
.1211	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1213	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1215	f0 4e		beq $1265			beq 	_CPExit 					; without consuming
.1217	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1219	f0 4a		beq $1265			beq 	_CPExit
.121b	68		pla				pla 								; throw last action flag
.121c	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.121e	c8		iny				iny
.121f	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1221	f0 3f		beq $1262			beq 	_CPContinueWithSameLine
.1223	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1225	f0 36		beq $125d			beq 	_CPTab
.1227	88		dey				dey 								; undo the get.
.1228	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.122b	10 0b		bpl $1238			bpl	 	_CPNotInput
.122d	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.122f	c9 40		cmp #$40			cmp 	#$40
.1231	d0 05		bne $1238			bne 	_CPNotInput
.1233	20 6e 12	jsr $126e			jsr 	_CPInputCode 				; input code
.1236	80 d7		bra $120f			bra 	Command_IP_Main 			; and go round again.
.1238					_CPNotInput:
.1238	20 c3 16	jsr $16c3			jsr 	EXPEvaluateExpression 		; evaluate expression.
.123b	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.123d	10 14		bpl $1253			bpl 	_CPNumber
.123f	5a		phy				phy
.1240	18		clc				clc 								; string address to YX
.1241	a5 08		lda $08				lda 	IFR0+IM0
.1243	aa		tax				tax
.1244	a5 09		lda $09				lda 	IFR0+IM1
.1246	a8		tay				tay
.1247	e8		inx				inx 								; point to 1st character
.1248	d0 01		bne $124b			bne 	_CPNoCarry
.124a	c8		iny				iny
.124b					_CPNoCarry:
.124b	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.124d	20 a2 12	jsr $12a2			jsr 	CPPrintAYX 					; print AYX
.1250	7a		ply				ply
.1251	80 bc		bra $120f			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1253					_CPNumber:
.1253	5a		phy				phy
.1254	20 c6 2e	jsr $2ec6			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.1257	20 a2 12	jsr $12a2			jsr 	CPPrintAYX 					; print AYX
.125a	7a		ply				ply
.125b	80 b2		bra $120f			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.125d					_CPTab:
.125d	a9 09		lda #$09			lda 	#9 							; print TAB
.125f	20 b8 12	jsr $12b8			jsr 	CPPrintA
.1262					_CPContinueWithSameLine:
.1262	38		sec				sec 								; loop round with carry set, which
.1263	80 ab		bra $1210			bra 	_CPLoop 					; will inhibit final CR
.1265					_CPExit:
.1265	28		plp				plp 								; get last action flag
.1266	b0 05		bcs $126d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1268	a9 0d		lda #$0d			lda 	#13 						; print new line
.126a	20 b8 12	jsr $12b8			jsr 	CPPrintA
.126d					_CPExit2:
.126d	60		rts				rts
.126e					_CPInputCode:
.126e	20 8b 17	jsr $178b			jsr 	EXPTermR0 					; get the term.
.1271	5a		phy				phy 								; save position
.1272	20 b5 12	jsr $12b5			jsr 	CPInputA					; input a line to YX
.1275	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1277	30 18		bmi $1291			bmi 	_CPInputString
.1279	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.127b	48		pha				pha
.127c	a5 09		lda $09				lda 	IFR0+IM1
.127e	48		pha				pha
.127f	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1281	84 23		sty $23				sty 	zTemp0+1
.1283	20 6d 1a	jsr $1a6d			jsr 	VALConversionZTemp0
.1286	68		pla				pla 								; do the assign.
.1287	85 23		sta $23				sta 	zTemp0+1
.1289	68		pla				pla
.128a	85 22		sta $22				sta 	zTemp0
.128c	20 e0 12	jsr $12e0			jsr 	AssignNumber
.128f	7a		ply				ply
.1290	60		rts				rts
.1291					_CPInputString:
.1291	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1293	85 22		sta $22				sta 	zTemp0
.1295	a5 09		lda $09				lda 	IFR0+IM1
.1297	85 23		sta $23				sta 	zTemp0+1
.1299	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.129b	84 09		sty $09				sty 	IFR0+IM1
.129d	20 f7 12	jsr $12f7			jsr 	AssignString 				; assign the string
.12a0	7a		ply				ply 								; exit
.12a1	60		rts				rts
.12a2					CPPrintAYX:
.12a2	86 22		stx $22				stx 	zTemp0
.12a4	84 23		sty $23				sty 	zTemp0+1
.12a6	aa		tax				tax
.12a7	f0 0b		beq $12b4			beq 	_CPPrintExit
.12a9	a0 00		ldy #$00			ldy 	#0
.12ab					_CPPrintAYXLoop:
.12ab	b1 22		lda ($22),y			lda 	(zTemp0),y
.12ad	20 b8 12	jsr $12b8			jsr 	CPPrintA
.12b0	c8		iny				iny
.12b1	ca		dex				dex
.12b2	d0 f7		bne $12ab			bne 	_CPPrintAYXLoop
.12b4					_CPPrintExit:
.12b4	60		rts				rts
.12b5					CPInputA:
.12b5	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.12b8					CPPrintA:
.12b8	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12bb					CommandLET:
.12bb	20 8b 17	jsr $178b			jsr 	EXPTermR0 					; get term
.12be	90 6f		bcc $132f			bcc 	CLError 					; must be a reference term.
.12c0	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12c2	48		pha				pha
.12c3	a5 09		lda $09				lda 	IFR0+IM1
.12c5	48		pha				pha
.12c6	a5 0b		lda $0b				lda 	IFR0+IExp
.12c8	48		pha				pha
.12c9	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12cb	20 30 27	jsr $2730			jsr 	ERRCheckA
.12ce	20 c3 16	jsr $16c3			jsr 	EXPEvaluateExpression 		; right hand side.
.12d1	68		pla				pla 								; type of l-expr
.12d2	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d4	30 5c		bmi $1332			bmi 	CLType
.12d6	fa		plx				plx 	 							; pop target address to zTemp0
.12d7	86 23		stx $23				stx 	zTemp0+1
.12d9	fa		plx				plx
.12da	86 22		stx $22				stx 	zTemp0
.12dc					AssignData:
.12dc	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12de	30 17		bmi $12f7			bmi 	AssignString
.12e0					AssignNumber:
.12e0	5a		phy				phy
.12e1	a0 03		ldy #$03			ldy 	#3
.12e3	a5 0b		lda $0b				lda 	IFR0+IExp
.12e5	91 22		sta ($22),y			sta 	(zTemp0),y
.12e7	88		dey				dey
.12e8	a5 0a		lda $0a				lda 	IFR0+IM2
.12ea	91 22		sta ($22),y			sta 	(zTemp0),y
.12ec	88		dey				dey
.12ed	a5 09		lda $09				lda 	IFR0+IM1
.12ef	91 22		sta ($22),y			sta 	(zTemp0),y
.12f1	a5 08		lda $08				lda 	IFR0+IM0
.12f3	92 22		sta ($22)			sta 	(zTemp0)
.12f5	7a		ply				ply
.12f6	60		rts				rts
.12f7					AssignString:
.12f7	5a		phy				phy
.12f8	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12fa	b1 22		lda ($22),y			lda 	(zTemp0),y
.12fc	12 22		ora ($22)			ora 	(zTemp0)
.12fe	f0 23		beq $1323			beq 	_CLConcreteString
.1300	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1302	85 24		sta $24				sta 	zTemp1
.1304	b1 22		lda ($22),y			lda 	(zTemp0),y
.1306	85 25		sta $25				sta 	zTemp1+1
.1308	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.130a	38		sec				sec 								; we want 3 for slot size, status, string size.
.130b	e9 03		sbc #$03			sbc 	#3
.130d	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.130f	90 12		bcc $1323			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1311	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1313	1a		inc a				inc 	a
.1314	aa		tax				tax
.1315	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1317					_CLReplaceString:
.1317	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.1319	c8		iny				iny
.131a	c8		iny				iny
.131b	91 24		sta ($24),y			sta 	(zTemp1),y
.131d	88		dey				dey
.131e	ca		dex				dex
.131f	d0 f6		bne $1317			bne 	_CLReplaceString
.1321	80 0a		bra $132d			bra 	_CLExit
.1323					_CLConcreteString:
.1323	20 a3 27	jsr $27a3			jsr 	StringConcrete  			; concreted string in XA.
.1326	a0 01		ldy #$01			ldy 	#1 							; store the address
.1328	92 22		sta ($22)			sta 	(zTemp0)
.132a	8a		txa				txa
.132b	91 22		sta ($22),y			sta 	(zTemp0),y
.132d					_CLExit:
.132d	7a		ply				ply
.132e	60		rts				rts
.132f					CLError:
.132f	4c 9e 26	jmp $269e		jmp	ErrorV_variable
.1332					CLType:
.1332	4c 9b 25	jmp $259b		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1335					Command_LIST:
.1335	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.1338	9c 08 05	stz $0508			stz 	CLFrom+1
.133b	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.133d	c9 99		cmp #$99			cmp 	#PR_COMMA
.133f	f0 1d		beq $135e			beq 	_CLToLine
.1341	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1343	f0 37		beq $137c			beq 	_CLDefaultTo
.1345	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.1348	a5 08		lda $08				lda 	IFR0+IM0
.134a	8d 07 05	sta $0507			sta 	CLFrom
.134d	8d 09 05	sta $0509			sta 	CLTo
.1350	a5 09		lda $09				lda 	IFR0+IM1
.1352	8d 08 05	sta $0508			sta 	CLFrom+1
.1355	8d 0a 05	sta $050a			sta 	CLTo+1
.1358	b1 18		lda ($18),y			lda 	(codePtr),y
.135a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.135c	f0 26		beq $1384			beq 	_CLList
.135e					_CLToLine:
.135e	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1360	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1362	f0 18		beq $137c			beq 	_CLDefaultTo
.1364	20 28 27	jsr $2728			jsr 	ERRCheckComma 				; sep comma
.1367	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.1369	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.136b	f0 0f		beq $137c			beq 	_CLDefaultTo
.136d	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; there's a To value.
.1370	a5 08		lda $08				lda 	IFR0+IM0
.1372	8d 09 05	sta $0509			sta 	CLTo
.1375	a5 09		lda $09				lda 	IFR0+IM1
.1377	8d 0a 05	sta $050a			sta 	CLTo+1
.137a	80 08		bra $1384			bra 	_CLList
.137c					_CLDefaultTo:
.137c	a9 ff		lda #$ff			lda 	#$FF
.137e	8d 09 05	sta $0509			sta 	CLTo
.1381	8d 0a 05	sta $050a			sta 	CLTo+1
.1384					_CLList:
.1384	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1387	85 19		sta $19				sta 	codePtr+1
.1389	64 18		stz $18				stz 	codePtr
.138b	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.138d	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.138f	20 a1 1d	jsr $1da1			jsr 	TOKSetDetokeniseOutput
.1392					_CLLoop:
.1392	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1394	f0 4a		beq $13e0			beq 	_CLExit
.1396	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.1399	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.139c	d0 45		bne $13e3			bne 	_CLBreak
.139e	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13a0	20 e6 13	jsr $13e6			jsr 	_CLCompareLine
.13a3	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a5	f0 2c		beq $13d3			beq 	_CLNext
.13a7	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13a9	20 e6 13	jsr $13e6			jsr 	_CLCompareLine
.13ac	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13ae	f0 23		beq $13d3			beq 	_CLNext
.13b0	a0 02		ldy #$02			ldy 	#2 							; print line #
.13b2	b1 18		lda ($18),y			lda 	(codePtr),y
.13b4	aa		tax				tax
.13b5	88		dey				dey
.13b6	b1 18		lda ($18),y			lda 	(codePtr),y
.13b8	20 81 28	jsr $2881			jsr 	WriteIntXA
.13bb	a9 20		lda #$20			lda 	#32
.13bd	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13c0	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13c2	a5 18		lda $18				lda 	codePtr
.13c4	18		clc				clc
.13c5	69 03		adc #$03			adc 	#3
.13c7	aa		tax				tax
.13c8	90 01		bcc $13cb			bcc 	_CLNoCarry2
.13ca	c8		iny				iny
.13cb					_CLNoCarry2:
.13cb	20 5c 1d	jsr $1d5c			jsr 	TOKDetokenise
.13ce	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d0	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13d3					_CLNext:
.13d3	18		clc				clc 								; advance to next line.
.13d4	b2 18		lda ($18)			lda 	(codePtr)
.13d6	65 18		adc $18				adc 	codePtr
.13d8	85 18		sta $18				sta 	codePtr
.13da	90 02		bcc $13de			bcc 	_CLNoCarry
.13dc	e6 19		inc $19				inc 	codePtr+1
.13de					_CLNoCarry:
.13de	80 b2		bra $1392			bra 	_CLLoop
.13e0					_CLExit:
.13e0	4c a0 28	jmp $28a0			jmp 	WarmStart
.13e3					_CLBreak:
.13e3	4c f6 26	jmp $26f6		jmp	ErrorV_break
.13e6					_CLCompareLine:
.13e6	a0 01		ldy #$01			ldy 	#1
.13e8	38		sec				sec
.13e9	b1 18		lda ($18),y			lda 	(codePtr),y
.13eb	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13ee	85 22		sta $22				sta 	zTemp0
.13f0	c8		iny				iny
.13f1	b1 18		lda ($18),y			lda 	(codePtr),y
.13f3	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13f6	90 0a		bcc $1402			bcc 	_CLIsNegative
.13f8	d0 05		bne $13ff			bne 	_CLIsPositive
.13fa	a5 22		lda $22				lda 	zTemp0
.13fc	d0 01		bne $13ff			bne 	_CLIsPositive
.13fe	60		rts				rts
.13ff					_CLIsPositive:
.13ff	a9 01		lda #$01			lda 	#1
.1401	60		rts				rts
.1402					_CLIsNegative:
.1402	a9 ff		lda #$ff			lda 	#255
.1404	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1405					Command_NEW:
.1405	20 46 1f	jsr $1f46			jsr 	PGMNewProgram
.1408	20 3c 10	jsr $103c			jsr 	ClearCode
.140b	4c 28 15	jmp $1528			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.140e					Command_READ:
.140e	20 8b 17	jsr $178b			jsr 	EXPTermR0 					; get term to R0
.1411	90 35		bcc $1448			bcc 	_CRSyntax 					; fail if not a reference.
.1413	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1415	48		pha				pha
.1416	a5 09		lda $09				lda 	IFR0+IM1
.1418	48		pha				pha
.1419	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.141b	48		pha				pha
.141c	20 a1 14	jsr $14a1			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.141f	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1422	d0 27		bne $144b			bne 	_CRHaveData  				; forward for the next one.
.1424					_CRNextLine:
.1424	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1426	f0 1a		beq $1442			beq 	_CRNoData
.1428					_CRKeepSearching:
.1428	a9 ab		lda #$ab			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.142a	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.142c	20 7b 24	jsr $247b			jsr 	ScanForward
.142f	c9 ab		cmp #$ab			cmp 	#PR_DATA 					; found data ?
.1431	f0 18		beq $144b			beq 	_CRHaveData 				; found it
.1433	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1435	18		clc				clc 								; try the next line, keep going.
.1436	b2 18		lda ($18)			lda 	(codePtr)
.1438	65 18		adc $18				adc 	codePtr
.143a	85 18		sta $18				sta 	codePtr
.143c	90 e6		bcc $1424			bcc 	_CRNextLine
.143e	e6 19		inc $19				inc 	codePtr+1
.1440	80 e2		bra $1424			bra 	_CRNextLine
.1442					_CRNoData:
.1442	4c 23 26	jmp $2623		jmp	ErrorV_data
.1445					_CLType:
.1445	4c 9b 25	jmp $259b		jmp	ErrorV_type
.1448					_CRSyntax:
.1448	4c 6b 25	jmp $256b		jmp	ErrorV_syntax
.144b					_CRHaveData:
.144b	20 c3 16	jsr $16c3			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.144e	68		pla				pla 								; type of l-expr
.144f	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1451	30 f2		bmi $1445			bmi 	_CLType
.1453	68		pla				pla 								; restore address
.1454	85 23		sta $23				sta 	zTemp0+1
.1456	68		pla				pla
.1457	85 22		sta $22				sta 	zTemp0
.1459	20 dc 12	jsr $12dc			jsr 	AssignData 					; write R0 there.
.145c	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.145f	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1461	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1463	d0 04		bne $1469			bne 	_CRSwapBack
.1465	c8		iny				iny 								; consume comma
.1466	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.1469					_CRSwapBack:
.1469	20 a1 14	jsr $14a1			jsr 	SwapCodeDataPointers		; swap them back.
.146c	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.146e	c8		iny				iny
.146f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1471	f0 9b		beq $140e			beq 	Command_READ 				; if so go round again.
.1473	88		dey				dey 								; unpick get.
.1474	60		rts				rts
.1475					Command_DATA:
.1475	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1477	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1479	20 7b 24	jsr $247b			jsr 	ScanForward
.147c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.147e	d0 01		bne $1481			bne 	_CDNotEOL
.1480	88		dey				dey
.1481					_CDNotEOL:
.1481	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1482					Command_REM:
.1482					Command_REM2:
.1482	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1484	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1486	d0 06		bne $148e			bne 	_CRExit
.1488	c8		iny				iny 								; skip over it, it's a comment.
.1489	98		tya				tya
.148a	38		sec				sec
.148b	71 18		adc ($18),y			adc 	(codePtr),y
.148d	a8		tay				tay
.148e					_CRExit:
.148e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.148f					S
.148f					Command_RESTORE:
.148f	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1492	8d 0c 05	sta $050c			sta 	dataPtr+1
.1495	9c 0b 05	stz $050b			stz 	dataPtr
.1498	a9 03		lda #$03			lda 	#3 							; position start of line
.149a	8d 0d 05	sta $050d			sta 	dataPos
.149d	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14a0	60		rts				rts
.14a1					SwapCodeDataPointers:
.14a1	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14a4	a6 18		ldx $18				ldx 	codePtr
.14a6	85 18		sta $18				sta 	codePtr
.14a8	8e 0b 05	stx $050b			stx 	dataPtr
.14ab	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14ae	a6 19		ldx $19				ldx 	codePtr+1
.14b0	85 19		sta $19				sta 	codePtr+1
.14b2	8e 0c 05	stx $050c			stx 	dataPtr+1
.14b5	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14b8	8c 0d 05	sty $050d			sty 	dataPos
.14bb	a8		tay				tay
.14bc	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14bd					Command_RUN:
.14bd	20 3c 10	jsr $103c			jsr 	ClearCode					; clear everything out.
.14c0	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14c3	85 19		sta $19				sta 	codePtr+1
.14c5	64 18		stz $18				stz 	codePtr
.14c7	80 0b		bra $14d4			bra 	RUNNewLine
.14c9					RUNEndOfLine:
.14c9	18		clc				clc 								; advance to next line.
.14ca	b2 18		lda ($18)			lda 	(codePtr)
.14cc	65 18		adc $18				adc 	codePtr
.14ce	85 18		sta $18				sta 	codePtr
.14d0	90 02		bcc $14d4			bcc 	_RELNoCarry
.14d2	e6 19		inc $19				inc 	codePtr+1
.14d4					_RELNoCarry:
.14d4					RUNNewLine:
.14d4	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14d6	9a		txs				txs
.14d7	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14d9	f0 4d		beq $1528			beq 	Command_END
.14db	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14dd	b1 18		lda ($18),y			lda 	(codePtr),y
.14df	8d 26 06	sta $0626			sta 	ERRLine
.14e2	c8		iny				iny
.14e3	b1 18		lda ($18),y			lda 	(codePtr),y
.14e5	8d 27 06	sta $0627			sta 	ERRLine+1
.14e8	c8		iny				iny 								; offset into codePtr for start of line.
.14e9					RUNNewCommand:
.14e9	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14ec	ce 10 05	dec $0510			dec 	checkCounter
.14ef	d0 0a		bne $14fb			bne 	_RNCNoCheck
.14f1	5a		phy				phy 								; keyboard check.
.14f2	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.14f5	7a		ply				ply
.14f6	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.14f9	d0 1e		bne $1519			bne 	_RUNBreak
.14fb					_RNCNoCheck:
.14fb	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.14fd	10 1d		bpl $151c			bpl		_RUNNotToken 				; probably an identifier
.14ff	c8		iny				iny 								; consume token
.1500	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1502	f0 e5		beq $14e9			beq 	RUNNewCommand
.1504	c9 b0		cmp #$b0			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1506	b0 0e		bcs $1516			bcs 	_RUNSyntax
.1508	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.150a	90 0a		bcc $1516			bcc 	_RUNSyntax
.150c	0a		asl a				asl 	a 							; double into X.
.150d	aa		tax				tax
.150e	20 13 15	jsr $1513			jsr 	_RUNDispatchMain			; call the main dispatcher
.1511	80 d6		bra $14e9			bra 	RUNNewCommand
.1513					_RUNDispatchMain:
.1513	7c 5c 1c	jmp ($1c5c,x)			jmp 	(VectorTable,x)
.1516					_RUNSyntax:
.1516	4c 6b 25	jmp $256b		jmp	ErrorV_syntax
.1519					_RUNBreak:
.1519	4c f6 26	jmp $26f6		jmp	ErrorV_break
.151c					_RUNNotToken:
.151c	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.151e	90 f6		bcc $1516			bcc 	_RUNSyntax
.1520	20 bb 12	jsr $12bb			jsr 	CommandLET 					; assignment
.1523	80 c4		bra $14e9			bra 	RUNNewCommand 				; loop round.
.1525					Command_Shift_Handler:
.1525	4c ad 25	jmp $25ad		jmp	ErrorV_unimplemented
.1528					Command_END:
.1528	4c a0 28	jmp $28a0			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.152b					Command_STOP:
.152b	4c 0f 26	jmp $260f		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.152e					Command_Sys:
.152e	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; execution address
.1531	5a		phy				phy
.1532	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1535	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1538	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.153b	20 40 15	jsr $1540			jsr 	_CSCallIFR0 				; call the code
.153e	7a		ply				ply
.153f	60		rts				rts
.1540					_CSCallIFR0:
.1540	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1543					NoExec01:
.1543					NoExec02:
.1543					NoExec03:
.1543					NoExec04:
.1543					NoExec05:
.1543					NoExec06:
.1543					NoExec07:
.1543					NoExec08:
.1543	4c 6b 25	jmp $256b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1546					EXPBinAdd:
.1546	24 0b		bit $0b				bit 	IFR0+IExp
.1548	30 6f		bmi $15b9			bmi 	EXPConcatenate
.154a	a2 0c		ldx #$0c			ldx 	#IFR1
.154c	4c c1 2a	jmp $2ac1			jmp 	IFloatAdd
.154f					EXPBinSub:
.154f	24 0b		bit $0b				bit 	IFR0+IExp
.1551	30 3f		bmi $1592			bmi 	EXPTypeError
.1553	a2 0c		ldx #$0c			ldx 	#IFR1
.1555	4c ba 2a	jmp $2aba			jmp 	IFloatSubtract
.1558					EXPBinMul:
.1558	24 0b		bit $0b				bit 	IFR0+IExp
.155a	30 36		bmi $1592			bmi 	EXPTypeError
.155c	a2 0c		ldx #$0c			ldx 	#IFR1
.155e	4c 6b 2b	jmp $2b6b			jmp 	IFloatMultiply
.1561					EXPBinFDiv:
.1561	24 0b		bit $0b				bit 	IFR0+IExp
.1563	30 2d		bmi $1592			bmi 	EXPTypeError
.1565	a2 0c		ldx #$0c			ldx 	#IFR1
.1567	20 ed 2d	jsr $2ded			jsr 	IFloatDivideFloat
.156a	b0 0f		bcs $157b			bcs 	EXPDZero
.156c	60		rts				rts
.156d					EXPBinIDiv:
.156d	24 0b		bit $0b				bit 	IFR0+IExp
.156f	30 21		bmi $1592			bmi 	EXPTypeError
.1571	a2 0c		ldx #$0c			ldx 	#IFR1
.1573	20 ed 2d	jsr $2ded			jsr 	IFloatDivideFloat
.1576	b0 03		bcs $157b			bcs 	EXPDZero
.1578	4c ca 2d	jmp $2dca			jmp 	IFloatIntegerR0
.157b					EXPDZero:
.157b	4c e4 25	jmp $25e4		jmp	ErrorV_divzero
.157e					EXPBinIMod:
.157e	24 0b		bit $0b				bit 	IFR0+IExp
.1580	30 10		bmi $1592			bmi 	EXPTypeError
.1582	a2 0c		ldx #$0c			ldx 	#IFR1
.1584	5a		phy				phy
.1585	20 00 2d	jsr $2d00			jsr 	IFPreProcessBitwise 		; set up everything.
.1588	d0 05		bne $158f			bne 	EXPDRange
.158a	20 39 2c	jsr $2c39			jsr 	IFloatModulusInteger
.158d	7a		ply				ply
.158e	60		rts				rts
.158f					EXPDRange:
.158f	4c 7c 25	jmp $257c		jmp	ErrorV_range
.1592					EXPTypeError:
.1592	4c 9b 25	jmp $259b		jmp	ErrorV_type
.1595					EXPBinAnd:
.1595	24 0b		bit $0b				bit 	IFR0+IExp
.1597	30 f9		bmi $1592			bmi 	EXPTypeError
.1599	a2 0c		ldx #$0c			ldx 	#IFR1
.159b	20 bb 2c	jsr $2cbb			jsr 	IFloatBitwiseAnd
.159e	b0 ef		bcs $158f			bcs 	EXPDRange
.15a0	60		rts				rts
.15a1					EXPBinOr:
.15a1	24 0b		bit $0b				bit 	IFR0+IExp
.15a3	30 ed		bmi $1592			bmi 	EXPTypeError
.15a5	a2 0c		ldx #$0c			ldx 	#IFR1
.15a7	20 d2 2c	jsr $2cd2			jsr 	IFloatBitwiseOr
.15aa	b0 e3		bcs $158f			bcs 	EXPDRange
.15ac	60		rts				rts
.15ad					EXPBinXor:
.15ad	24 0b		bit $0b				bit 	IFR0+IExp
.15af	30 e1		bmi $1592			bmi 	EXPTypeError
.15b1	a2 0c		ldx #$0c			ldx 	#IFR1
.15b3	20 e9 2c	jsr $2ce9			jsr 	IFloatBitwiseXor
.15b6	b0 d7		bcs $158f			bcs 	EXPDRange
.15b8	60		rts				rts
.15b9					EXPConcatenate:
.15b9	18		clc				clc
.15ba	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15bc	72 0c		adc ($0c)			adc 	(IFR1)
.15be	b0 2d		bcs $15ed			bcs 	_EXPCError
.15c0	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15c2	da		phx				phx
.15c3	a6 09		ldx $09				ldx 	IFR0+1
.15c5	da		phx				phx
.15c6	20 16 28	jsr $2816			jsr 	StringTempAllocate 			; allocate string, set up return
.15c9	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15cb	a5 0c		lda $0c				lda 	IFR1
.15cd	20 d6 15	jsr $15d6			jsr 	_EXPCCopyXA
.15d0	fa		plx				plx 								; copy second string
.15d1	68		pla				pla
.15d2	20 d6 15	jsr $15d6			jsr 	_EXPCCopyXA
.15d5	60		rts				rts
.15d6					_EXPCCopyXA:
.15d6	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15d8	85 22		sta $22				sta 	zTemp0
.15da	b2 22		lda ($22)			lda 	(zTemp0)					; length
.15dc	f0 0e		beq $15ec			beq 	_EXPCCExit 					; nothing.
.15de	aa		tax				tax 								; count
.15df	5a		phy				phy 								; start positioin
.15e0	a0 01		ldy #$01			ldy 	#1
.15e2					_EXPCCLoop:
.15e2	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15e4	20 4b 28	jsr $284b			jsr 	StringTempWrite
.15e7	c8		iny				iny
.15e8	ca		dex				dex
.15e9	d0 f7		bne $15e2			bne 	_EXPCCLoop
.15eb	7a		ply				ply
.15ec					_EXPCCExit:
.15ec	60		rts				rts
.15ed					_EXPCError:
.15ed	4c 88 26	jmp $2688		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15f0					EXPReturnTrue:
.15f0	a2 08		ldx #$08			ldx 	#IFR0
.15f2	a9 01		lda #$01			lda 	#1
.15f4	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.15f7	20 d4 30	jsr $30d4			jsr 	IFloatNegate
.15fa	60		rts				rts
.15fb					EXPReturnFalse:
.15fb	a2 08		ldx #$08			ldx 	#IFR0
.15fd	4c c9 30	jmp $30c9			jmp 	IFloatSetZero
.1600					EXPCompareEqual:
.1600	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.1603	c9 00		cmp #$00			cmp 	#0
.1605	f0 e9		beq $15f0			beq 	EXPReturnTrue
.1607	80 f2		bra $15fb			bra 	EXPReturnFalse
.1609					EXPCompareLess:
.1609	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.160c	c9 ff		cmp #$ff			cmp 	#$FF
.160e	f0 e0		beq $15f0			beq 	EXPReturnTrue
.1610	80 e9		bra $15fb			bra 	EXPReturnFalse
.1612					EXPCompareGreater:
.1612	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.1615	c9 01		cmp #$01			cmp 	#1
.1617	f0 d7		beq $15f0			beq 	EXPReturnTrue
.1619	80 e0		bra $15fb			bra 	EXPReturnFalse
.161b					EXPCompareNotEqual:
.161b	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.161e	c9 00		cmp #$00			cmp 	#0
.1620	d0 ce		bne $15f0			bne 	EXPReturnTrue
.1622	80 d7		bra $15fb			bra 	EXPReturnFalse
.1624					EXPCompareLessEqual:
.1624	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.1627	c9 01		cmp #$01			cmp 	#1
.1629	d0 c5		bne $15f0			bne 	EXPReturnTrue
.162b	80 ce		bra $15fb			bra 	EXPReturnFalse
.162d					EXPCompareGreaterEqual:
.162d	20 36 16	jsr $1636			jsr 	EXPCompareBaseCode
.1630	c9 ff		cmp #$ff			cmp 	#$FF
.1632	d0 bc		bne $15f0			bne 	EXPReturnTrue
.1634	80 c5		bra $15fb			bra 	EXPReturnFalse
.1636					EXPCompareBaseCode:
.1636	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1638	30 10		bmi $164a			bmi 	_EXCBCString
.163a	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.163c	20 98 2d	jsr $2d98			jsr 	IFloatCompare
.163f	a5 08		lda $08				lda 	IFR0+IM0
.1641	f0 06		beq $1649			beq 	_EXCBCExit 					; return 0 if zero
.1643	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1645	50 02		bvc $1649			bvc 	_EXCBCExit
.1647	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1649					_EXCBCExit:
.1649	60		rts				rts
.164a					_EXCBCString:
.164a	5a		phy				phy
.164b	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.164d	d2 0c		cmp ($0c)			cmp 	(IFR1)
.164f	90 02		bcc $1653			bcc 	_EXCBCSmaller
.1651	b2 0c		lda ($0c)			lda 	(IFR1)
.1653					_EXCBCSmaller:
.1653	aa		tax				tax
.1654	f0 0d		beq $1663			beq 	_EXCBCMatches 				; if zero common length matches
.1656	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1658					_EXCBCCheckSmallerMatches:
.1658	c8		iny				iny 								; compare directly as far as common length
.1659	38		sec				sec
.165a	b1 0c		lda ($0c),y			lda 	(IFR1),y
.165c	f1 08		sbc ($08),y			sbc 	(IFR0),y
.165e	d0 08		bne $1668			bne 	_EXCBCExit2
.1660	ca		dex				dex
.1661	d0 f5		bne $1658			bne 	_EXCBCCheckSmallerMatches
.1663					_EXCBCMatches:
.1663	38		sec				sec
.1664	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1666	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1668					_EXCBCExit2:
.1668	7a		ply				ply
.1669	c9 00		cmp #$00			cmp 	#0
.166b	f0 04		beq $1671			beq 	_EXCBCReturn
.166d	30 03		bmi $1672			bmi 	_EXCBCFF
.166f	a9 01		lda #$01			lda 	#1
.1671					_EXCBCReturn:
.1671	60		rts				rts
.1672					_EXCBCFF:
.1672	a9 ff		lda #$ff			lda 	#$FF
.1674	60		rts				rts
.1675					_EXCBCRange:
.1675	4c 7c 25	jmp $257c		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1678					EXPBinLeft:
.1678	a9 ff		lda #$ff			lda 	#$FF
.167a	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.167d	4c 83 16	jmp $1683			jmp 	EXPShiftCommon
.1680					EXPBinRight:
.1680	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.1683					EXPShiftCommon:
.1683	a5 0b		lda $0b				lda 	IFR0+IExp 					; both integers
.1685	05 0f		ora $0f				ora 	IFR1+IExp
.1687	29 7f		and #$7f			and 	#$7F
.1689	d0 35		bne $16c0			bne 	_EXPSRange
.168b	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.168d	29 e0		and #$e0			and 	#$E0
.168f	05 09		ora $09				ora 	IFR0+IM1
.1691	05 0a		ora $0a				ora 	IFR0+IM2
.1693	d0 25		bne $16ba			bne 	_EXPSShiftZero 				; if so return zero
.1695	5a		phy				phy
.1696	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.1698	29 1f		and #$1f			and 	#$1F
.169a	f0 17		beq $16b3			beq 	_EXPSExit 					; exit if zero
.169c	a8		tay				tay
.169d					_EXPSLoop:
.169d	a2 0c		ldx #$0c			ldx 	#IFR1
.169f	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16a2	30 05		bmi $16a9			bmi 	_EXPSShiftLeft
.16a4	20 f8 30	jsr $30f8			jsr 	IFloatShiftRight
.16a7	80 07		bra $16b0			bra 	_EXPSContinue
.16a9					_EXPSShiftLeft:
.16a9	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.16ac	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts
.16ae	30 10		bmi $16c0			bmi 	_EXPSRange
.16b0					_EXPSContinue:
.16b0	88		dey				dey
.16b1	d0 ea		bne $169d			bne 	_EXPSLoop
.16b3					_EXPSExit:
.16b3	a2 0c		ldx #$0c			ldx 	#IFR1
.16b5	20 5a 30	jsr $305a			jsr 	IFloatCopyFromRegister
.16b8	7a		ply				ply
.16b9	60		rts				rts
.16ba					_EXPSShiftZero:
.16ba	a2 08		ldx #$08			ldx 	#IFR0
.16bc	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.16bf	60		rts				rts
.16c0					_EXPSRange:
.16c0	4c 7c 25	jmp $257c		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16c3					EXPEvaluateExpression:
.16c3	a9 00		lda #$00			lda 	#0 							; current precedence
.16c5					EXPEvaluateExpressionPrecedenceA:
.16c5	48		pha				pha
.16c6	20 40 17	jsr $1740			jsr 	EXPTermValueR0				; do first term.
.16c9					_EELoop:
.16c9	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16cb	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16cd	90 31		bcc $1700			bcc 	_EEExit
.16cf	aa		tax				tax 								; access the precedence of the operator.
.16d0	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16d1	dd 96 19	cmp $1996,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16d4	b0 2b		bcs $1701			bcs 	_EEExit2
.16d6	48		pha				pha 								; save current precedence.
.16d7	da		phx				phx 								; save operator
.16d8	c8		iny				iny 								; consume operator
.16d9	da		phx				phx
.16da	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16dc	20 18 30	jsr $3018			jsr 	IFloatPushRx
.16df	fa		plx				plx
.16e0	bd 96 19	lda $1996,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16e3	20 c5 16	jsr $16c5			jsr 	EXPEvaluateExpressionPrecedenceA
.16e6	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16e8	20 39 30	jsr $3039			jsr 	IFloatPullRx
.16eb	fa		plx				plx 								; operator
.16ec	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16ee	45 0f		eor $0f				eor 	IFR1+IExp
.16f0	30 08		bmi $16fa			bmi 	_EEType
.16f2					_EETypeOkay:
.16f2	8a		txa				txa
.16f3	0a		asl a				asl 	a 							; double -> X
.16f4	aa		tax				tax
.16f5	20 fd 16	jsr $16fd			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.16f8	80 cf		bra $16c9			bra 	_EELoop
.16fa					_EEType:
.16fa	4c 9b 25	jmp $259b		jmp	ErrorV_type
.16fd					_EECallBinary:
.16fd	7c 5c 1c	jmp ($1c5c,x)			jmp 	(VectorTable,x)
.1700					_EEExit:
.1700	68		pla				pla 								; throw precedence
.1701					_EEExit2:
.1701	18		clc				clc
.1702	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1703					EXPEvalNumber:
.1703	20 c3 16	jsr $16c3			jsr 	EXPEvaluateExpression
.1706	24 0b		bit $0b				bit 	IFR0+IExp
.1708	30 01		bmi $170b			bmi 	EVUType
.170a	60		rts				rts
.170b					EVUType:
.170b	4c 9b 25	jmp $259b		jmp	ErrorV_type
.170e					EXPEvalInteger:
.170e	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1711	20 ca 2d	jsr $2dca			jsr 	IFloatIntegerR0
.1714	60		rts				rts
.1715					EXPEvalInteger16:
.1715	20 0e 17	jsr $170e			jsr 	EXPEvalInteger
.1718	a5 0a		lda $0a				lda 	IFR0+IM2
.171a	d0 21		bne $173d			bne 	EVURange
.171c	a6 09		ldx $09				ldx 	IFR0+IM1
.171e	a5 08		lda $08				lda 	IFR0+IM0
.1720	60		rts				rts
.1721					EXPEvalInteger8:
.1721	20 0e 17	jsr $170e			jsr 	EXPEvalInteger
.1724	a5 0a		lda $0a				lda 	IFR0+IM2
.1726	05 09		ora $09				ora 	IFR0+IM1
.1728	d0 13		bne $173d			bne 	EVURange
.172a	a5 08		lda $08				lda 	IFR0+IM0
.172c	60		rts				rts
.172d					EXPEvalString:
.172d	20 c3 16	jsr $16c3			jsr 	EXPEvaluateExpression
.1730	24 0b		bit $0b				bit 	IFR0+IExp
.1732	10 d7		bpl $170b			bpl 	EVUType
.1734	a6 09		ldx $09				ldx 	IFR0+IM1
.1736	86 23		stx $23				stx 	zTemp0+1
.1738	a5 08		lda $08				lda 	IFR0+IM0
.173a	85 22		sta $22				sta 	zTemp0
.173c	60		rts				rts
.173d					EVURange:
.173d	4c 7c 25	jmp $257c		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1740					EXPTermValueR0:
.1740	20 8b 17	jsr $178b			jsr 	EXPTermR0 					; get term
.1743	90 45		bcc $178a			bcc 	_ETVNotReference 			; exit if value.
.1745	5a		phy				phy
.1746	a0 03		ldy #$03			ldy 	#3 							; get type
.1748	b1 08		lda ($08),y			lda 	(IFR0),y
.174a	30 14		bmi $1760			bmi 	_ETVDereferenceString
.174c	85 0b		sta $0b				sta 	IFR0+IExp 					; dereference to R0
.174e	88		dey				dey
.174f	b1 08		lda ($08),y			lda 	(IFR0),y
.1751	85 0a		sta $0a				sta 	IFR0+IM2
.1753	88		dey				dey
.1754	b1 08		lda ($08),y			lda 	(IFR0),y
.1756	aa		tax				tax
.1757	b2 08		lda ($08)			lda 	(IFR0)
.1759	86 09		stx $09				stx 	IFR0+IM1
.175b	85 08		sta $08				sta 	IFR0+IM0
.175d	7a		ply				ply
.175e	18		clc				clc
.175f	60		rts				rts
.1760					_ETVDereferenceString:
.1760	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1762	b1 08		lda ($08),y			lda 	(IFR0),y
.1764	12 08		ora ($08)			ora 	(IFR0)
.1766	f0 11		beq $1779			beq 	_ETVNull
.1768	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.176a	aa		tax				tax
.176b	b2 08		lda ($08)			lda 	(IFR0)
.176d	18		clc				clc 								; add two so points to actual string.
.176e	69 02		adc #$02			adc 	#2
.1770	90 01		bcc $1773			bcc 	_EVDSNoCarry
.1772	e8		inx				inx
.1773					_EVDSNoCarry:
.1773	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1775	85 08		sta $08				sta 	IFR0
.1777	80 08		bra $1781			bra 	_ETVFillExit 				; tidy up and exit.
.1779					_ETVNull:
.1779	a9 89		lda #$89			lda 	#_EVTNString & $FF
.177b	85 08		sta $08				sta 	IFR0+IM0
.177d	a9 17		lda #$17			lda 	#_EVTNString >> 8
.177f	85 09		sta $09				sta 	IFR0+IM1
.1781					_ETVFillExit:
.1781	64 0a		stz $0a				stz 	IFR0+IM2
.1783	a9 80		lda #$80			lda 	#$80
.1785	85 0b		sta $0b				sta 	IFR0+IExp
.1787	7a		ply				ply
.1788	60		rts				rts
.1789					_EVTNString:
>1789	00						.byte 	0
.178a					_ETVNotReference:
.178a	60		rts				rts
.178b					EXPTermR0:
.178b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.178d	30 10		bmi $179f			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.178f	c8		iny				iny 								; consume element
.1790	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1792	b0 08		bcs $179c			bcs 	_ETMIdentifier
.1794	20 c3 17	jsr $17c3			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1797	20 f6 17	jsr $17f6			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.179a	18		clc				clc 								; return value
.179b	60		rts				rts
.179c					_ETMIdentifier:
.179c	4c 62 2a	jmp $2a62			jmp 	VARCheckSimple 				; check simple variables A-Z
.179f					_ETMIsUnaryOrMinus:
.179f	c8		iny				iny 								; consume element
.17a0	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17a2	d0 0a		bne $17ae			bne 	_ETMCheckUnary
.17a4	20 40 17	jsr $1740			jsr 	EXPTermValueR0 				; get a term to negate
.17a7	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17a9	20 d4 30	jsr $30d4			jsr 	IFloatNegate
.17ac	18		clc				clc
.17ad	60		rts				rts
.17ae					_ETMCheckUnary:
.17ae	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17b0	90 0e		bcc $17c0			bcc 	_ETMUnarySyntax
.17b2	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17b4	b0 0a		bcs $17c0			bcs 	_ETMUnarySyntax
.17b6	0a		asl a				asl 	a
.17b7	aa		tax				tax
.17b8	20 bd 17	jsr $17bd			jsr 	_ETMCallUnaryFunction
.17bb	18		clc				clc
.17bc	60		rts				rts
.17bd					_ETMCallUnaryFunction:
.17bd	7c 5c 1c	jmp ($1c5c,x)			jmp 	(VectorTable,x)
.17c0					_ETMUnarySyntax:
.17c0	4c 6b 25	jmp $256b		jmp	ErrorV_syntax
.17c3					EXPExtractTokenisedInteger:
.17c3	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17c5	64 0b		stz $0b				stz 	IFR0+IExp
.17c7	64 09		stz $09				stz 	IFR0+IM1
.17c9	64 0a		stz $0a				stz 	IFR0+IM2
.17cb					_ETMConstant:
.17cb	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17cd	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17cf	b0 24		bcs $17f5			bcs 	_ETMCExit 					; no.
.17d1	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17d3	a5 09		lda $09				lda 	IFR0+IM1
.17d5	85 0a		sta $0a				sta 	IFR0+IM2
.17d7	a5 08		lda $08				lda 	IFR0+IM0
.17d9	85 09		sta $09				sta 	IFR0+IM1
.17db	64 08		stz $08				stz 	IFR0+IM0
.17dd	8a		txa				txa
.17de	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17df	66 0a		ror $0a				ror 	IFR0+IM2
.17e1	66 09		ror $09				ror 	IFR0+IM1
.17e3	66 08		ror $08				ror 	IFR0+IM0
.17e5	4a		lsr a				lsr 	a
.17e6	66 0a		ror $0a				ror 	IFR0+IM2
.17e8	66 09		ror $09				ror 	IFR0+IM1
.17ea	66 08		ror $08				ror 	IFR0+IM0
.17ec	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17ee	11 18		ora ($18),y			ora 	(codePtr),y
.17f0	85 08		sta $08				sta 	IFR0+IM0
.17f2	c8		iny				iny 								; consume, loop back
.17f3	80 d6		bra $17cb			bra 	_ETMConstant
.17f5					_ETMCExit:
.17f5	60		rts				rts
.17f6					EXPCheckDecimalFollows:
.17f6	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.17f8	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.17fa	d0 19		bne $1815			bne 	_ETMCDExit
.17fc	c8		iny				iny 								; consume token.
.17fd	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.17ff	5a		phy				phy									; save current position
.1800	48		pha				pha 								; save count of chars.
.1801	38		sec				sec 								; address into YX : y + codePtr+1
.1802	98		tya				tya
.1803	65 18		adc $18				adc 	codePtr
.1805	aa		tax				tax
.1806	a5 19		lda $19				lda 	codePtr+1
.1808	69 00		adc #$00			adc 	#0
.180a	a8		tay				tay
.180b	68		pla				pla 								; get count.
.180c	20 6d 2f	jsr $2f6d			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.180f	7a		ply				ply 								; go to next token.
.1810	98		tya				tya
.1811	38		sec				sec
.1812	71 18		adc ($18),y			adc 	(codePtr),y
.1814	a8		tay				tay
.1815					_ETMCDExit:
.1815	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1816					EXPUnaryAbs:
.1816	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.1819	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.181c	20 0c 2d	jsr $2d0c			jsr 	IFloatAbsoluteR0
.181f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.1820					EXPUnaryAsc:
.1820	20 2d 17	jsr $172d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1823	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.1826	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1828	f0 06		beq $1830			beq 	_EXAZero 						; if so return 0
.182a	5a		phy				phy 									; otherwise get first character
.182b	a0 01		ldy #$01			ldy 	#1
.182d	b1 22		lda ($22),y			lda 	(zTemp0),y
.182f	7a		ply				ply
.1830					_EXAZero:
.1830	a2 08		ldx #$08			ldx 	#IFR0
.1832	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.1835	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1836					EXPUnaryChr:
.1836	20 21 17	jsr $1721			jsr 	EXPEvalInteger8 				; expr
.1839	48		pha				pha 									; push on stack
.183a	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.183d	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.183f	20 16 28	jsr $2816			jsr 	StringTempAllocate
.1842	68		pla				pla
.1843	20 4b 28	jsr $284b			jsr 	StringTempWrite
.1846	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1847					EXPUnaryDec:
.1847	20 2d 17	jsr $172d			jsr 	EXPEvalString 					; string to R0, zTemp0
.184a	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.184d	5a		phy				phy
.184e	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.1850	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.1853	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1855	f0 3b		beq $1892			beq 	_EUDError 						; empty string
.1857	aa		tax				tax
.1858	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.185a					_EUDLoop:
.185a	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next
.185c	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.185e	90 02		bcc $1862			bcc 	_EUDNoCase
.1860	e9 20		sbc #$20			sbc 	#$20
.1862					_EUDNoCase:
.1862	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1864	90 2c		bcc $1892			bcc 	_EUDError
.1866	c9 3a		cmp #$3a			cmp 	#'9'+1
.1868	90 0a		bcc $1874			bcc 	_EUDOkay
.186a	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.186c	90 24		bcc $1892			bcc 	_EUDError
.186e	c9 47		cmp #$47			cmp 	#'F'+1
.1870	b0 20		bcs $1892			bcs 	_EUDError
.1872	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1874					_EUDOkay:
.1874	29 0f		and #$0f			and 	#15 							; make constant
.1876	da		phx				phx
.1877	48		pha				pha
.1878	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.187a	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.187d	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.1880	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.1883	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.1886	68		pla				pla 									; pop constant and OR in
.1887	fa		plx				plx
.1888	05 08		ora $08				ora 	IFR0+IM0
.188a	85 08		sta $08				sta 	IFR0+IM0
.188c	c8		iny				iny 									; next
.188d	ca		dex				dex
.188e	d0 ca		bne $185a			bne 	_EUDLoop
.1890	7a		ply				ply
.1891	60		rts				rts
.1892					_EUDError:
.1892	4c 8d 25	jmp $258d		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1895					EXPUnaryInlineDec:
.1895	4c 6b 25	jmp $256b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1898					EXPUnaryPeek:
.1898	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 				; number to R0
.189b	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.189e	b2 08		lda ($08)			lda 	(IFR0)
.18a0	a2 08		ldx #$08			ldx 	#IFR0
.18a2	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.18a5	60		rts				rts
.18a6					EXPUnaryDeek:
.18a6	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 				; number to R0
.18a9	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.18ac	5a		phy				phy
.18ad	a0 01		ldy #$01			ldy 	#1
.18af	b1 08		lda ($08),y			lda 	(IFR0),y
.18b1	7a		ply				ply
.18b2	48		pha				pha
.18b3	b2 08		lda ($08)			lda 	(IFR0)
.18b5	a2 08		ldx #$08			ldx 	#IFR0
.18b7	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.18ba	68		pla				pla
.18bb	85 09		sta $09				sta 	IFR0+IM1
.18bd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.18be					EXPUnaryNull:
.18be	20 40 17	jsr $1740			jsr 	EXPTermValueR0
.18c1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18c2					EXPUnaryFrac:
.18c2	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.18c5	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.18c8	20 74 2d	jsr $2d74			jsr 	IFloatFractionalR0
.18cb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18cc					EXPUnaryInkey:
.18cc	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.18cf	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18d1	20 16 28	jsr $2816			jsr 	StringTempAllocate
.18d4	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.18d7	b0 06		bcs $18df			bcs 	_EUIExit
.18d9	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18dc	20 4b 28	jsr $284b			jsr 	StringTempWrite
.18df					_EUIExit:
.18df	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18e0					EXPUnaryInt:
.18e0	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.18e3	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; check for )
.18e6	20 ca 2d	jsr $2dca			jsr 	IFloatIntegerR0 				; force to integer.
.18e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18ea					EXPUnaryLen:
.18ea	20 2d 17	jsr $172d			jsr 	EXPEvalString 					; string to R0, zTemp0
.18ed	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.18f0	b2 22		lda ($22)			lda 	(zTemp0)
.18f2	a2 08		ldx #$08			ldx 	#IFR0
.18f4	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.18f7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.18f8					EXPUnaryParenthesis:
.18f8	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.18fb	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.18fe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.18ff					EXPUnaryRnd:
.18ff	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; number to R0
.1902	20 20 27	jsr $2720			jsr 	ERRCheckRParen 				; )
.1905	a2 08		ldx #$08			ldx 	#IFR0
.1907	20 1e 19	jsr $191e			jsr 	EXPLoadInRandom
.190a	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.190c	85 0b		sta $0b				sta 	IFR0+IExp
.190e	60		rts				rts
.190f					ExpUnaryRand:
.190f	20 0e 17	jsr $170e			jsr 	EXPEvalInteger 				; integer to R0
.1912	20 20 27	jsr $2720			jsr 	ERRCheckRParen 				; )
.1915	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1917	20 1e 19	jsr $191e			jsr 	EXPLoadInRandom
.191a	20 39 2c	jsr $2c39			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.191d	60		rts				rts
.191e					EXPLoadInRandom:
.191e	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.1921	20 33 19	jsr $1933			jsr 	EXPRandom32
.1924	95 00		sta $00,x			sta 	IM0,x
.1926	20 33 19	jsr $1933			jsr 	EXPRandom32
.1929	95 01		sta $01,x			sta 	IM1,x
.192b	20 33 19	jsr $1933			jsr 	EXPRandom32
.192e	29 7f		and #$7f			and 	#$7F
.1930	95 02		sta $02,x			sta 	IM2,x
.1932	60		rts				rts
.1933					EXPRandom32:
.1933	5a		phy				phy
.1934	a0 08		ldy #$08			ldy 	#8
.1936	ad 12 05	lda $0512			lda 	EXPSeed+0
.1939	0d 13 05	ora $0513			ora 	EXPSeed+1
.193c	0d 14 05	ora $0514			ora 	EXPSeed+2
.193f	0d 15 05	ora $0515			ora 	EXPSeed+3
.1942	d0 08		bne $194c			bne 	_EXPRNoReset
.1944	ee 12 05	inc $0512			inc 	EXPSeed+0
.1947	a0 10		ldy #$10			ldy 	#16
.1949	8c 15 05	sty $0515			sty 	EXPSeed+3
.194c					_EXPRNoReset:
.194c	ad 12 05	lda $0512			lda 	EXPSeed+0
.194f					_EXPRLoop:
.194f	0a		asl a				asl		a
.1950	2e 13 05	rol $0513			rol 	EXPSeed+1
.1953	2e 14 05	rol $0514			rol 	EXPSeed+2
.1956	2e 15 05	rol $0515			rol 	EXPSeed+3
.1959	90 02		bcc $195d			bcc 	_EXPRNoEOR
.195b	49 c5		eor #$c5			eor 	#$C5
.195d					_EXPRNoEOR:
.195d	88		dey				dey
.195e	d0 ef		bne $194f			bne 	_EXPRLoop
.1960	8d 12 05	sta $0512			sta 	EXPSeed+0
.1963	7a		ply				ply
.1964	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.1965					EXPUnarySgn:
.1965	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.1968	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.196b	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.196d	20 6b 30	jsr $306b			jsr 	IFloatCopyToRegister
.1970	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1972	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.1975	a2 0c		ldx #$0c			ldx 	#IFR1
.1977	20 98 2d	jsr $2d98			jsr 	IFloatCompare 					; compare R1 vs 0.
.197a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.197b					EXPUnarySqr:
.197b	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; number to R0
.197e	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.1981	20 14 2d	jsr $2d14			jsr 	IFloatSquareRootR0 				; square root.
.1984	b0 01		bcs $1987			bcs 	_EUSValue
.1986	60		rts				rts
.1987					_EUSValue:
.1987	4c 7c 25	jmp $257c		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.198a					EXPUnaryHex:
.198a	20 0e 17	jsr $170e			jsr 	EXPEvalInteger 					; expr
.198d	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.1990	5a		phy				phy
.1991	a9 10		lda #$10			lda 	#16
.1993	20 6b 2e	jsr $2e6b			jsr 	IFloatIntegerToStringR0
.1996	80 0a		bra $19a2			bra 	EUSMain
.1998					EXPUnaryStr:
.1998	20 03 17	jsr $1703			jsr 	EXPEvalNumber 					; expr
.199b	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.199e	5a		phy				phy
.199f	20 c6 2e	jsr $2ec6			jsr 	IFloatFloatToStringR0 			; convert to string
.19a2					EUSMain:
.19a2	b0 18		bcs $19bc			bcs 	_EUSError
.19a4	86 22		stx $22				stx 	zTemp0 							; save string address
.19a6	84 23		sty $23				sty 	zTemp0+1
.19a8	48		pha				pha 									; save count
.19a9	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19ab	20 16 28	jsr $2816			jsr 	StringTempAllocate
.19ae	fa		plx				plx 									; count in X
.19af	a0 00		ldy #$00			ldy 	#0
.19b1					_EUSCopy:
.19b1	b1 22		lda ($22),y			lda 	(zTemp0),y
.19b3	c8		iny				iny
.19b4	20 4b 28	jsr $284b			jsr 	StringTempWrite
.19b7	ca		dex				dex
.19b8	d0 f7		bne $19b1			bne	 	_EUSCopy
.19ba	7a		ply				ply
.19bb	60		rts				rts
.19bc					_EUSError:
.19bc	4c 7c 25	jmp $257c		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19bf					EXPUnaryInlineString:
.19bf	18		clc				clc 								; physical address -> IM0,1
.19c0	98		tya				tya
.19c1	65 18		adc $18				adc 	codePtr
.19c3	85 08		sta $08				sta 	IFR0+IM0
.19c5	a5 19		lda $19				lda 	codePtr+1
.19c7	69 00		adc #$00			adc 	#0
.19c9	85 09		sta $09				sta 	IFR0+IM1
.19cb	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in rest
.19cd	a9 80		lda #$80			lda 	#$80
.19cf	85 0b		sta $0b				sta 	IFR0+IExp
.19d1	98		tya				tya	 								; skip over it.
.19d2	38		sec				sec
.19d3	71 18		adc ($18),y			adc 	(codePtr),y
.19d5	a8		tay				tay
.19d6	60		rts				rts
.19d7					_EXPUISRange:
.19d7	4c 7c 25	jmp $257c		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19da					EXPUnaryLeft:
.19da	20 20 1a	jsr $1a20			jsr 	EXPCommonStart 					; <string>,
.19dd	48		pha				pha 									; save string address on stack
.19de	da		phx				phx
.19df	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19e1	48		pha				pha
.19e2	20 21 17	jsr $1721			jsr 	EXPEvalInteger8 				; characters to do
.19e5	80 44		bra $1a2b			bra 	EXPSubstringCommon
.19e7					EXPUnaryRight:
.19e7	20 20 1a	jsr $1a20			jsr 	EXPCommonStart 					; <string>,
.19ea	48		pha				pha 									; save string address on stack
.19eb	da		phx				phx
.19ec	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19ee	48		pha				pha
.19ef	20 21 17	jsr $1721			jsr 	EXPEvalInteger8 				; characters to do
.19f2	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.19f4	68		pla				pla
.19f5	38		sec				sec
.19f6	e5 22		sbc $22				sbc 	zTemp0
.19f8	b0 02		bcs $19fc			bcs 	_EUROffLeft
.19fa	a9 00		lda #$00			lda 	#0
.19fc					_EUROffLeft:
.19fc	48		pha				pha 									; start pos
.19fd	a9 ff		lda #$ff			lda 	#255
.19ff	80 2a		bra $1a2b			bra 	EXPSubstringCommon
.1a01					EXPUnaryMid:
.1a01	20 20 1a	jsr $1a20			jsr 	EXPCommonStart 					; <string>,
.1a04	48		pha				pha 									; save string address on stack
.1a05	da		phx				phx
.1a06	20 21 17	jsr $1721			jsr 	EXPEvalInteger8 				; characters start
.1a09	f0 12		beq $1a1d			beq 	_EUSError 						; 1 is left
.1a0b	3a		dec a				dec 	a 								; zero based.
.1a0c	48		pha				pha
.1a0d	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a0f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a11	f0 04		beq $1a17			beq 	_EUMLength 						; if so m is provided
.1a13	a9 ff		lda #$ff			lda 	#255 							; default m
.1a15	80 14		bra $1a2b			bra 	EXPSubstringCommon
.1a17					_EUMLength:
.1a17	c8		iny				iny 									; consume comma
.1a18	20 21 17	jsr $1721			jsr 	EXPEvalInteger8 				; characters to do
.1a1b	80 0e		bra $1a2b			bra 	EXPSubstringCommon
.1a1d					_EUSError:
.1a1d	4c 8d 25	jmp $258d		jmp	ErrorV_value
.1a20					EXPCommonStart:
.1a20	20 2d 17	jsr $172d			jsr 	EXPEvalString
.1a23	20 28 27	jsr $2728			jsr 	ERRCheckComma
.1a26	a5 08		lda $08				lda 	IFR0+IM0
.1a28	a6 09		ldx $09				ldx 	IFR0+IM1
.1a2a	60		rts				rts
.1a2b					EXPSubstringCommon:
.1a2b	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a2d	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; check right bracket.
.1a30	68		pla				pla 									; start position
.1a31	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a33	fa		plx				plx 									; get string address to zTemp2.
.1a34	86 27		stx $27				stx 	zTemp2+1
.1a36	68		pla				pla
.1a37	85 26		sta $26				sta 	zTemp2
.1a39	38		sec				sec 									; length - start is the max count of chars
.1a3a	b2 26		lda ($26)			lda 	(zTemp2)
.1a3c	e5 25		sbc $25				sbc 	zTemp1+1
.1a3e	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a40	b0 02		bcs $1a44			bcs 	_EXPSSNoTrim
.1a42	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a44					_EXPSSNoTrim:
.1a44	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a46	20 16 28	jsr $2816			jsr 	StringTempAllocate 				; allocate memory for it.
.1a49	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a4b	f0 15		beq $1a62			beq 	_EXPSSExit
.1a4d	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a4f	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a51	b0 0f		bcs $1a62			bcs 	_EXPSSExit
.1a53	5a		phy				phy
.1a54	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a56	c8		iny				iny 									; +1 for the length byte
.1a57					_EXPSSCopy:
.1a57	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a59	20 4b 28	jsr $284b			jsr 	StringTempWrite
.1a5c	c8		iny				iny
.1a5d	c6 24		dec $24				dec 	zTemp1
.1a5f	d0 f6		bne $1a57			bne 	_EXPSSCopy
.1a61	7a		ply				ply
.1a62					_EXPSSExit:
.1a62	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a63					EXPUnaryVal:
.1a63	20 2d 17	jsr $172d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a66	20 20 27	jsr $2720			jsr 	ERRCheckRParen 					; )
.1a69	20 6d 1a	jsr $1a6d			jsr 	VALConversionZTemp0
.1a6c	60		rts				rts
.1a6d					VALConversionZTemp0:
.1a6d	5a		phy				phy
.1a6e	18		clc				clc
.1a6f	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a71	69 01		adc #$01			adc 	#1
.1a73	aa		tax				tax
.1a74	a5 23		lda $23				lda 	zTemp0+1
.1a76	69 00		adc #$00			adc 	#0
.1a78	a8		tay				tay
.1a79	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a7b	20 2d 2f	jsr $2f2d			jsr 	IFloatStringToFloatR0 			; do conversion
.1a7e	b0 02		bcs $1a82			bcs 	_EUVError
.1a80	7a		ply				ply
.1a81	60		rts				rts
.1a82					_EUVError:
.1a82	4c 8d 25	jmp $258d		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a85					BinaryPrecedence:
>1a85	02					.byte	 2	; $ef =
>1a86	02					.byte	 2	; $f0 <>
>1a87	02					.byte	 2	; $f1 <=
>1a88	02					.byte	 2	; $f2 <
>1a89	02					.byte	 2	; $f3 >=
>1a8a	02					.byte	 2	; $f4 >
>1a8b	01					.byte	 1	; $f5 XOR
>1a8c	01					.byte	 1	; $f6 OR
>1a8d	01					.byte	 1	; $f7 AND
>1a8e	04					.byte	 4	; $f8 DIV
>1a8f	04					.byte	 4	; $f9 MOD
>1a90	04					.byte	 4	; $fa <<
>1a91	04					.byte	 4	; $fb >>
>1a92	04					.byte	 4	; $fc /
>1a93	04					.byte	 4	; $fd *
>1a94	03					.byte	 3	; $fe -
>1a95	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1a96					StructureOffsets:
>1a96	01					.byte	1  	; $80 REPEAT
>1a97	ff					.byte	255	; $81 UNTIL
>1a98	01					.byte	1  	; $82 WHILE
>1a99	ff					.byte	255	; $83 WEND
>1a9a	01					.byte	1  	; $84 IF
>1a9b	ff					.byte	255	; $85 ENDIF
>1a9c	01					.byte	1  	; $86 DO
>1a9d	ff					.byte	255	; $87 LOOP
>1a9e	01					.byte	1  	; $88 PROC
>1a9f	ff					.byte	255	; $89 ENDPROC
>1aa0	01					.byte	1  	; $8a FOR
>1aa1	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1aa2					StandardTokens:
>1aa2	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1aa9	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1aaf	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1ab5	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1aba	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1abd	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1ac3	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1ac6	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1acb	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1ad0	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1ad8	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1adc	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1ae1	00					.byte	$00                                     	; $8c [[end]]
>1ae2	00					.byte	$00                                     	; $8d [[shift]]
>1ae3	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1ae8	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1aed	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1af0	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1af5	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1af9	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1aff	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1b05	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1b0a	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1b0e	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1b12	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1b17	01 2c					.byte	$01,$2c                                 	; $99 ,
>1b19	01 3b					.byte	$01,$3b                                 	; $9a ;
>1b1b	01 3a					.byte	$01,$3a                                 	; $9b :
>1b1d	01 27					.byte	$01,$27                                 	; $9c '
>1b1f	01 29					.byte	$01,$29                                 	; $9d )
>1b21	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1b25	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1b2b	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1b2f	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1b33	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1b38	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1b3c	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1b43	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1b48	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1b4d	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1b52	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1b57	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1b5c	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $aa read
>1b61	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $ab data
>1b66	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $ac restore
>1b6e	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $ad goto
>1b73	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $ae gosub
>1b79	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $af return
>1b80	00					.byte	0											; $b0
>1b81	00					.byte	0											; $b1
>1b82	00					.byte	0											; $b2
>1b83	00					.byte	0											; $b3
>1b84	00					.byte	0											; $b4
>1b85	00					.byte	0											; $b5
>1b86	00					.byte	0											; $b6
>1b87	00					.byte	0											; $b7
>1b88	00					.byte	0											; $b8
>1b89	00					.byte	0											; $b9
>1b8a	00					.byte	0											; $ba
>1b8b	00					.byte	0											; $bb
>1b8c	00					.byte	0											; $bc
>1b8d	00					.byte	0											; $bd
>1b8e	00					.byte	0											; $be
>1b8f	00					.byte	0											; $bf
>1b90	00					.byte	0											; $c0
>1b91	00					.byte	0											; $c1
>1b92	00					.byte	0											; $c2
>1b93	00					.byte	0											; $c3
>1b94	00					.byte	0											; $c4
>1b95	00					.byte	0											; $c5
>1b96	00					.byte	0											; $c6
>1b97	00					.byte	0											; $c7
>1b98	00					.byte	0											; $c8
>1b99	00					.byte	0											; $c9
>1b9a	00					.byte	0											; $ca
>1b9b	00					.byte	0											; $cb
>1b9c	00					.byte	0											; $cc
>1b9d	00					.byte	0											; $cd
>1b9e	00					.byte	0											; $ce
>1b9f	00					.byte	0											; $cf
>1ba0	00					.byte	0											; $d0
>1ba1	00					.byte	0											; $d1
>1ba2	00					.byte	0											; $d2
>1ba3	00					.byte	0											; $d3
>1ba4	00					.byte	0											; $d4
>1ba5	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1bab	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1bb1	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1bb9	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1bc0	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1bc6	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1bcc	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1bd1	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1bd6	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1bdb	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1be0	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1be5	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1beb	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bf0	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1bf8	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1bff	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1c04	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1c09	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1c0f	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1c14	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1c1a	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1c1f	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1c25	01 28					.byte	$01,$28                                 	; $eb (
>1c27	01 24					.byte	$01,$24                                 	; $ec $
>1c29	00					.byte	$00                                     	; $ed [[decimal]]
>1c2a	00					.byte	$00                                     	; $ee [[string]]
>1c2b	01 3d					.byte	$01,$3d                                 	; $ef =
>1c2d	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1c30	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1c33	01 3c					.byte	$01,$3c                                 	; $f2 <
>1c35	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1c38	01 3e					.byte	$01,$3e                                 	; $f4 >
>1c3a	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1c3e	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c41	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c45	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c49	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c4d	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c50	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c53	01 2f					.byte	$01,$2f                                 	; $fc /
>1c55	01 2a					.byte	$01,$2a                                 	; $fd *
>1c57	01 2d					.byte	$01,$2d                                 	; $fe -
>1c59	01 2b					.byte	$01,$2b                                 	; $ff +
>1c5b	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c5c					VectorTable:
>1c5c	5b 24					.word	Command_REPEAT           ; $80 REPEAT
>1c5e	64 24					.word	Command_UNTIL            ; $81 UNTIL
>1c60	3e 25					.word	Command_WHILE            ; $82 WHILE
>1c62	5f 25					.word	Command_WEND             ; $83 WEND
>1c64	31 24					.word	IfCommand                ; $84 IF
>1c66	5a 24					.word	EndIf                    ; $85 ENDIF
>1c68	b4 22					.word	Command_DO               ; $86 DO
>1c6a	cc 22					.word	Command_LOOP             ; $87 LOOP
>1c6c	43 15					.word	NoExec08                 ; $88 PROC
>1c6e	a8 22					.word	Command_ENDPROC          ; $89 ENDPROC
>1c70	d5 22					.word	Command_FOR              ; $8a FOR
>1c72	62 23					.word	Command_NEXT             ; $8b NEXT
>1c74	c9 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c76	25 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c78	53 24					.word	ElseCode                 ; $8e ELSE
>1c7a	43 15					.word	NoExec01                 ; $8f THEN
>1c7c	43 15					.word	NoExec02                 ; $90 TO
>1c7e	43 15					.word	NoExec03                 ; $91 STEP
>1c80	bb 12					.word	CommandLET               ; $92 LET
>1c82	0c 12					.word	Command_Print            ; $93 PRINT
>1c84	05 12					.word	Command_Input            ; $94 INPUT
>1c86	6c 22					.word	Command_CALL             ; $95 CALL
>1c88	2e 15					.word	Command_Sys              ; $96 SYS
>1c8a	82 14					.word	Command_REM              ; $97 REM
>1c8c	bd 22					.word	Command_EXIT             ; $98 EXIT
>1c8e	43 15					.word	NoExec04                 ; $99 ,
>1c90	43 15					.word	NoExec05                 ; $9a ;
>1c92	43 15					.word	NoExec06                 ; $9b :
>1c94	82 14					.word	Command_REM2             ; $9c '
>1c96	43 15					.word	NoExec07                 ; $9d )
>1c98	8f 10					.word	CommandDIM               ; $9e DIM
>1c9a	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1c9c	05 14					.word	Command_NEW              ; $a0 NEW
>1c9e	bd 14					.word	Command_RUN              ; $a1 RUN
>1ca0	2b 15					.word	Command_STOP             ; $a2 STOP
>1ca2	28 15					.word	Command_END              ; $a3 END
>1ca4	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1ca6	35 13					.word	Command_LIST             ; $a5 LIST
>1ca8	9d 28					.word	NotImplemented           ; $a6 SAVE
>1caa	9d 28					.word	NotImplemented           ; $a7 LOAD
>1cac	ae 11					.word	Command_Poke             ; $a8 POKE
>1cae	ab 11					.word	Command_Doke             ; $a9 DOKE
>1cb0	0e 14					.word	Command_READ             ; $aa READ
>1cb2	75 14					.word	Command_DATA             ; $ab DATA
>1cb4	8f 14					.word	Command_RESTORE          ; $ac RESTORE
>1cb6	d5 11					.word	Command_GOTO             ; $ad GOTO
>1cb8	17 24					.word	Command_GOSUB            ; $ae GOSUB
>1cba	25 24					.word	Command_RETURN           ; $af RETURN
>1cbc	9d 28					.word	NotImplemented           ; $b0
>1cbe	9d 28					.word	NotImplemented           ; $b1
>1cc0	9d 28					.word	NotImplemented           ; $b2
>1cc2	9d 28					.word	NotImplemented           ; $b3
>1cc4	9d 28					.word	NotImplemented           ; $b4
>1cc6	9d 28					.word	NotImplemented           ; $b5
>1cc8	9d 28					.word	NotImplemented           ; $b6
>1cca	9d 28					.word	NotImplemented           ; $b7
>1ccc	9d 28					.word	NotImplemented           ; $b8
>1cce	9d 28					.word	NotImplemented           ; $b9
>1cd0	9d 28					.word	NotImplemented           ; $ba
>1cd2	9d 28					.word	NotImplemented           ; $bb
>1cd4	9d 28					.word	NotImplemented           ; $bc
>1cd6	9d 28					.word	NotImplemented           ; $bd
>1cd8	9d 28					.word	NotImplemented           ; $be
>1cda	9d 28					.word	NotImplemented           ; $bf
>1cdc	9d 28					.word	NotImplemented           ; $c0
>1cde	9d 28					.word	NotImplemented           ; $c1
>1ce0	9d 28					.word	NotImplemented           ; $c2
>1ce2	9d 28					.word	NotImplemented           ; $c3
>1ce4	9d 28					.word	NotImplemented           ; $c4
>1ce6	9d 28					.word	NotImplemented           ; $c5
>1ce8	9d 28					.word	NotImplemented           ; $c6
>1cea	9d 28					.word	NotImplemented           ; $c7
>1cec	9d 28					.word	NotImplemented           ; $c8
>1cee	9d 28					.word	NotImplemented           ; $c9
>1cf0	9d 28					.word	NotImplemented           ; $ca
>1cf2	9d 28					.word	NotImplemented           ; $cb
>1cf4	9d 28					.word	NotImplemented           ; $cc
>1cf6	9d 28					.word	NotImplemented           ; $cd
>1cf8	9d 28					.word	NotImplemented           ; $ce
>1cfa	9d 28					.word	NotImplemented           ; $cf
>1cfc	9d 28					.word	NotImplemented           ; $d0
>1cfe	9d 28					.word	NotImplemented           ; $d1
>1d00	9d 28					.word	NotImplemented           ; $d2
>1d02	9d 28					.word	NotImplemented           ; $d3
>1d04	9d 28					.word	NotImplemented           ; $d4
>1d06	a6 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1d08	98 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1d0a	e7 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1d0c	da 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1d0e	01 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1d10	98 19					.word	EXPUnaryStr              ; $da STR$(
>1d12	63 1a					.word	EXPUnaryVal              ; $db VAL(
>1d14	65 19					.word	EXPUnarySgn              ; $dc SGN(
>1d16	16 18					.word	EXPUnaryAbs              ; $dd ABS(
>1d18	ea 18					.word	EXPUnaryLen              ; $de LEN(
>1d1a	7b 19					.word	EXPUnarySqr              ; $df SQR(
>1d1c	36 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1d1e	20 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1d20	cc 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1d22	9d 28					.word	NotImplemented           ; $e3 EVENT(
>1d24	9d 28					.word	NotImplemented           ; $e4 TIME
>1d26	e0 18					.word	EXPUnaryInt              ; $e5 INT(
>1d28	c2 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1d2a	47 18					.word	EXPUnaryDec              ; $e7 DEC(
>1d2c	8a 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1d2e	ff 18					.word	EXPUnaryRnd              ; $e9 RND(
>1d30	0f 19					.word	ExpUnaryRand             ; $ea RAND(
>1d32	f8 18					.word	EXPUnaryParenthesis      ; $eb (
>1d34	be 18					.word	EXPUnaryNull             ; $ec $
>1d36	95 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1d38	bf 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1d3a	00 16					.word	EXPCompareEqual          ; $ef =
>1d3c	1b 16					.word	EXPCompareNotEqual       ; $f0 <>
>1d3e	24 16					.word	EXPCompareLessEqual      ; $f1 <=
>1d40	09 16					.word	EXPCompareLess           ; $f2 <
>1d42	2d 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d44	12 16					.word	EXPCompareGreater        ; $f4 >
>1d46	ad 15					.word	EXPBinXor                ; $f5 XOR
>1d48	a1 15					.word	EXPBinOr                 ; $f6 OR
>1d4a	95 15					.word	EXPBinAnd                ; $f7 AND
>1d4c	6d 15					.word	EXPBinIDiv               ; $f8 DIV
>1d4e	7e 15					.word	EXPBinIMod               ; $f9 MOD
>1d50	78 16					.word	EXPBinLeft               ; $fa <<
>1d52	80 16					.word	EXPBinRight              ; $fb >>
>1d54	61 15					.word	EXPBinFDiv               ; $fc /
>1d56	58 15					.word	EXPBinMul                ; $fd *
>1d58	4f 15					.word	EXPBinSub                ; $fe -
>1d5a	46 15					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d5c					TOKDetokenise:
.1d5c	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d5e	84 27		sty $27				sty 	zTemp2+1
.1d60	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1d63					_TOKDLoop:
.1d63	20 92 1d	jsr $1d92			jsr 	TOKDGet 					; get next
.1d66	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1d68	f0 26		beq $1d90			beq 	_TOKDExit
.1d6a	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1d6c	f0 1d		beq $1d8b			beq 	_TOKDDataItem
.1d6e	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1d70	f0 19		beq $1d8b			beq 	_TOKDDataItem
.1d72	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1d74	10 05		bpl $1d7b			bpl 	_TOKDNotToken
.1d76	20 5a 1e	jsr $1e5a			jsr 	TOKDToken 					; token to text.
.1d79	80 e8		bra $1d63			bra 	_TOKDLoop
.1d7b					_TOKDNotToken:
.1d7b	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1d7d	90 05		bcc $1d84			bcc 	_TOKDNotIdentifier
.1d7f	20 cd 1d	jsr $1dcd			jsr 	TOKDIdentifier
.1d82	80 df		bra $1d63			bra 	_TOKDLoop
.1d84					_TOKDNotIdentifier:
.1d84	a0 0a		ldy #$0a			ldy 	#10
.1d86	20 16 1e	jsr $1e16			jsr 	TOKDInteger
.1d89	80 d8		bra $1d63			bra 	_TOKDLoop
.1d8b					_TOKDDataItem:
.1d8b	20 a8 1d	jsr $1da8			jsr 	TOKDDataItem
.1d8e	80 d3		bra $1d63			bra 	_TOKDLoop
.1d90					_TOKDExit:
.1d90	18		clc				clc
.1d91	60		rts				rts
.1d92	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1d94	e6 26		inc $26				inc 	zTemp2
.1d96	d0 02		bne $1d9a			bne 	_TKDGExit
.1d98	e6 27		inc $27				inc 	zTemp2+1
.1d9a					_TKDGExit:
.1d9a	60		rts				rts
.1d9b					TOKDOutput:
.1d9b	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1d9e	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1da1					TOKSetDetokeniseOutput:
.1da1	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1da4	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1da7	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1da8					TOKDDataItem:
.1da8	a8		tay				tay 								; type in Y
.1da9	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1dab	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1dad	f0 02		beq $1db1			beq 	_TOKDDIsString
.1daf	a9 2e		lda #$2e			lda 	#'.'
.1db1					_TOKDDIsString:
.1db1	20 9b 1d	jsr $1d9b			jsr 	TOKDOutput 					; dump it
.1db4	20 92 1d	jsr $1d92			jsr 	TOKDGet 					; get length into X
.1db7	aa		tax				tax
.1db8					_TOKDDOutput:
.1db8	ca		dex				dex 								; are we complete
.1db9	30 08		bmi $1dc3			bmi 	_TOKDDEnd
.1dbb	20 92 1d	jsr $1d92			jsr 	TOKDGet 					; get character and output it
.1dbe	20 9b 1d	jsr $1d9b			jsr 	TOKDOutput
.1dc1	80 f5		bra $1db8			bra 	_TOKDDOutput
.1dc3					_TOKDDEnd:
.1dc3	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1dc5	d0 05		bne $1dcc			bne 	_TOKDDNotString
.1dc7	a9 22		lda #$22			lda 	#'"'
.1dc9	20 9b 1d	jsr $1d9b			jsr 	TOKDOutput
.1dcc					_TOKDDNotString:
.1dcc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1dcd					TOKDIdentifier:
.1dcd	a0 ff		ldy #$ff			ldy 	#$FF
.1dcf	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1dd2					_TOKDLoop:
.1dd2	a8		tay				tay 								; token in Y
.1dd3	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1dd5	c0 64		cpy #$64			cpy 	#$64
.1dd7	f0 11		beq $1dea			beq 	_TOKDIOutput
.1dd9	a9 5f		lda #$5f			lda 	#'_'
.1ddb	c0 65		cpy #$65			cpy 	#$65
.1ddd	f0 0b		beq $1dea			beq 	_TOKDIOutput
.1ddf	98		tya				tya 								; handle a-z
.1de0	18		clc				clc
.1de1	69 21		adc #$21			adc	 	#$21
.1de3	c0 5a		cpy #$5a			cpy 	#$5A
.1de5	90 03		bcc $1dea			bcc 	_TOKDIOutput
.1de7	38		sec				sec 								; handle 0-9
.1de8	e9 4b		sbc #$4b			sbc 	#$4B
.1dea					_TOKDIOutput:
.1dea	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1ded	10 08		bpl $1df7			bpl 	_TOKDINoSpacing
.1def	48		pha				pha
.1df0	20 8c 1e	jsr $1e8c			jsr 	TOKDSpacing
.1df3	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1df6	68		pla				pla
.1df7					_TOKDINoSpacing:
.1df7	20 9b 1d	jsr $1d9b			jsr 	TOKDOutput
.1dfa	20 92 1d	jsr $1d92			jsr 	TOKDGet 					; get next token
.1dfd	c9 7c		cmp #$7c			cmp 	#$7C
.1dff	90 d1		bcc $1dd2			bcc 	_TOKDLoop
.1e01	f0 12		beq $1e15			beq 	_TOKDIExit 					; it's a number, no tail.
.1e03	4a		lsr a				lsr 	a 							; string ?
.1e04	90 07		bcc $1e0d			bcc 	_TOKDICheckArray
.1e06	48		pha				pha
.1e07	a9 24		lda #$24			lda 	#"$"
.1e09	20 9b 1d	jsr $1d9b			jsr 	TOKDOutput
.1e0c	68		pla				pla
.1e0d					_TOKDICheckArray:
.1e0d	4a		lsr a				lsr 	a 							; array ?
.1e0e	90 05		bcc $1e15			bcc 	_TOKDIExit
.1e10	a9 28		lda #$28			lda 	#"("
.1e12	20 9b 1d	jsr $1d9b			jsr 	TOKDOutput
.1e15					_TOKDIExit:
.1e15	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1e16					TOKDInteger:
.1e16	5a		phy				phy 								; save base
.1e17	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1e19	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.1e1c					_TOKDILoop:
.1e1c	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1e1e	c9 40		cmp #$40			cmp 	#$40
.1e20	b0 1d		bcs $1e3f			bcs 	_TOKDIHaveInteger
.1e22	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1e24	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.1e27	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.1e2a	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.1e2d	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.1e30	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.1e33	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.1e36	20 92 1d	jsr $1d92			jsr 	TOKDGet 					; OR byte in.
.1e39	05 08		ora $08				ora 	IFR0+IM0
.1e3b	85 08		sta $08				sta 	IFR0+IM0
.1e3d	80 dd		bra $1e1c			bra 	_TOKDILoop
.1e3f					_TOKDIHaveInteger:
.1e3f	7a		ply				ply 								; restore base
.1e40	98		tya				tya 								; base in A
.1e41	20 6b 2e	jsr $2e6b			jsr 	IFloatIntegerToStringR0
.1e44	86 22		stx $22				stx 	zTemp0
.1e46	84 23		sty $23				sty 	zTemp0+1
.1e48	b2 22		lda ($22)			lda 	(zTemp0)
.1e4a	20 8c 1e	jsr $1e8c			jsr 	TOKDSpacing 				; check spacing okay.
.1e4d	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1e4f					_TOKDOutput:
.1e4f	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e51	20 9b 1d	jsr $1d9b			jsr 	TOKDOutput
.1e54	c8		iny				iny
.1e55	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e57	d0 f6		bne $1e4f			bne 	_TOKDOutput
.1e59	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e5a					TOKDToken:
.1e5a	a2 a2		ldx #$a2			ldx 	#StandardTokens & $FF
.1e5c	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e5e					_TOKDSearch:
.1e5e	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1e60	84 23		sty $23				sty 	zTemp0+1
.1e62	aa		tax				tax 								; token ID in X.
.1e63					_TOKDFind:
.1e63	ca		dex				dex 								; reached the start
.1e64	10 0d		bpl $1e73			bpl 	_TOKDFound
.1e66	38		sec				sec 								; go to next entry
.1e67	b2 22		lda ($22)			lda 	(zTemp0)
.1e69	65 22		adc $22				adc 	zTemp0
.1e6b	85 22		sta $22				sta 	zTemp0
.1e6d	90 f4		bcc $1e63			bcc 	_TOKDFind
.1e6f	e6 23		inc $23				inc 	zTemp0+1
.1e71	80 f0		bra $1e63			bra 	_TOKDFind
.1e73					_TOKDFound:
.1e73	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1e75	f0 14		beq $1e8b			beq 	_TOKDExit
.1e77	aa		tax				tax
.1e78	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1e7a	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1e7c	20 8c 1e	jsr $1e8c			jsr 	TOKDSpacing
.1e7f					_TOKDOutput:
.1e7f	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e81	20 27 22	jsr $2227			jsr 	TOKToLower
.1e84	20 9b 1d	jsr $1d9b			jsr 	TOKDOutput
.1e87	c8		iny				iny
.1e88	ca		dex				dex
.1e89	d0 f4		bne $1e7f			bne 	_TOKDOutput
.1e8b					_TOKDExit:
.1e8b	60		rts				rts
.1e8c					TOKDSpacing:
.1e8c	20 3e 22	jsr $223e			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1e8f	90 0d		bcc $1e9e			bcc 	_TOKDSExit
.1e91	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1e94	20 3e 22	jsr $223e			jsr 	TOKIsIdentifierElement
.1e97	90 05		bcc $1e9e			bcc 	_TOKDSExit
.1e99	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1e9b	20 9b 1d	jsr $1d9b			jsr 	TOKDOutput
.1e9e					_TOKDSExit:
.1e9e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1e9f					PGMDeleteLine:
.1e9f	20 52 1f	jsr $1f52			jsr 	PGMEndProgram 				; end of program into zTemp0
.1ea2	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1ea4	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1ea7	85 25		sta $25				sta 	zTemp1+1
.1ea9					_PGMDLoop:
.1ea9	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1eab	38		sec				sec
.1eac	f0 3a		beq $1ee8			beq 	_PGMDExit
.1eae	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1eb0	b1 24		lda ($24),y			lda 	(zTemp1),y
.1eb2	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1eb5	d0 08		bne $1ebf			bne 	_PGMDNext
.1eb7	c8		iny				iny
.1eb8	b1 24		lda ($24),y			lda 	(zTemp1),y
.1eba	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1ebd	f0 0d		beq $1ecc			beq 	_PGMDDelete
.1ebf					_PGMDNext:
.1ebf	18		clc				clc
.1ec0	b2 24		lda ($24)			lda 	(zTemp1)
.1ec2	65 24		adc $24				adc 	zTemp1
.1ec4	85 24		sta $24				sta 	zTemp1
.1ec6	90 e1		bcc $1ea9			bcc 	_PGMDLoop
.1ec8	e6 25		inc $25				inc 	zTemp1+1
.1eca	80 dd		bra $1ea9			bra 	_PGMDLoop
.1ecc					_PGMDDelete:
.1ecc	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1ece	a8		tay				tay
.1ecf					_PGMDCopy:
.1ecf	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1ed1	92 24		sta ($24)			sta 	(zTemp1)
.1ed3	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1ed5	c5 22		cmp $22				cmp 	zTemp0
.1ed7	d0 07		bne $1ee0			bne 	_PGMDNext2
.1ed9	a5 25		lda $25				lda 	zTemp1+1
.1edb	c5 23		cmp $23				cmp 	zTemp0+1
.1edd	18		clc				clc
.1ede	f0 08		beq $1ee8			beq 	_PGMDExit
.1ee0					_PGMDNext2:
.1ee0	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1ee2	d0 eb		bne $1ecf			bne 	_PGMDCopy
.1ee4	e6 25		inc $25				inc 	zTemp1+1
.1ee6	80 e7		bra $1ecf			bra 	_PGMDCopy
.1ee8					_PGMDExit:
.1ee8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1ee9					PGMInsertLine:
.1ee9	20 52 1f	jsr $1f52			jsr 	PGMEndProgram 				; end of program into zTemp0
.1eec	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1eee	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1ef1	85 25		sta $25				sta 	zTemp1+1
.1ef3					_PGMILoop:
.1ef3	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1ef5	f0 1c		beq $1f13			beq 	_PGMIInsert
.1ef7	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1ef9	b1 24		lda ($24),y			lda 	(zTemp1),y
.1efb	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1efe	c8		iny				iny
.1eff	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f01	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1f04	b0 0d		bcs $1f13			bcs 	_PGMIInsert 				; insert here.
.1f06	18		clc				clc
.1f07	b2 24		lda ($24)			lda 	(zTemp1)
.1f09	65 24		adc $24				adc 	zTemp1
.1f0b	85 24		sta $24				sta 	zTemp1
.1f0d	90 e4		bcc $1ef3			bcc 	_PGMILoop
.1f0f	e6 25		inc $25				inc 	zTemp1+1
.1f11	80 e0		bra $1ef3			bra 	_PGMILoop
.1f13					_PGMIInsert:
.1f13	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1f16					_PGMIInsertLoop:
.1f16	b2 22		lda ($22)			lda 	(zTemp0)
.1f18	91 22		sta ($22),y			sta 	(zTemp0),y
.1f1a	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1f1c	c5 22		cmp $22				cmp 	zTemp0
.1f1e	d0 06		bne $1f26			bne 	_PGMINext
.1f20	a5 25		lda $25				lda 	zTemp1+1
.1f22	c5 23		cmp $23				cmp 	zTemp0+1
.1f24	f0 0a		beq $1f30			beq 	_PGMIInserted
.1f26					_PGMINext:
.1f26	a5 22		lda $22				lda 	zTemp0
.1f28	d0 02		bne $1f2c			bne 	_PGMINoBorrow
.1f2a	c6 23		dec $23				dec 	zTemp0+1
.1f2c					_PGMINoBorrow:
.1f2c	c6 22		dec $22				dec 	zTemp0
.1f2e	80 e6		bra $1f16			bra 	_PGMIInsertLoop
.1f30					_PGMIInserted:
.1f30	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1f32					_PGMICopyLoop:
.1f32	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1f35	91 24		sta ($24),y			sta 	(zTemp1),y
.1f37	c8		iny				iny
.1f38	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1f3b	d0 f5		bne $1f32			bne 	_PGMICopyLoop
.1f3d	18		clc				clc
.1f3e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f3f					PGMSetBaseAddress:
.1f3f	8e 1a 05	stx $051a			stx 	PGMBaseHigh
.1f42	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh
.1f45	60		rts				rts
.1f46					PGMNewProgram:
.1f46	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f48	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f4b	85 23		sta $23				sta 	zTemp0+1
.1f4d	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1f4f	92 22		sta ($22)			sta 	(zTemp0)
.1f51	60		rts				rts
.1f52					PGMEndProgram:
.1f52	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f54	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f57	85 23		sta $23				sta 	zTemp0+1
.1f59					_PGMEPLoop:
.1f59	b2 22		lda ($22)			lda 	(zTemp0)
.1f5b	f0 0b		beq $1f68			beq 	_PGMEPExit
.1f5d	18		clc				clc
.1f5e	65 22		adc $22				adc 	zTemp0
.1f60	85 22		sta $22				sta 	zTemp0
.1f62	90 f5		bcc $1f59			bcc 	_PGMEPLoop
.1f64	e6 23		inc $23				inc 	zTemp0+1
.1f66	80 f1		bra $1f59			bra 	_PGMEPLoop
.1f68					_PGMEPExit:
.1f68	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1f69					TOKResetElement:
.1f69	9c 1c 05	stz $051c			stz 	TOKElement
.1f6c	60		rts				rts
.1f6d					TOKWriteElement:
.1f6d	da		phx				phx
.1f6e	ae 1c 05	ldx $051c			ldx 	TOKElement
.1f71	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1f74	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1f77	fa		plx				plx
.1f78	ee 1c 05	inc $051c			inc 	TOKElement
.1f7b	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1f7c					TOKTokeniseConstant:
.1f7c	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1f7e	48		pha				pha 								; save on stack
.1f7f	29 c0		and #$c0			and 	#$C0
.1f81	05 09		ora $09				ora 	IFR0+IM1
.1f83	05 0a		ora $0a				ora 	IFR0+IM2
.1f85	f0 10		beq $1f97			beq 	_TTCLess
.1f87	da		phx				phx
.1f88	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1f8a					_TTCShiftRight:
.1f8a	46 0a		lsr $0a				lsr 	IFR0+IM2
.1f8c	66 09		ror $09				ror 	IFR0+IM1
.1f8e	66 08		ror $08				ror 	IFR0+IM0
.1f90	ca		dex				dex
.1f91	d0 f7		bne $1f8a			bne 	_TTCShiftRight
.1f93	fa		plx				plx
.1f94	20 7c 1f	jsr $1f7c			jsr 	TOKTokeniseConstant
.1f97					_TTCLess:
.1f97	68		pla				pla
.1f98	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1f9a	20 39 20	jsr $2039			jsr 	TOKWriteA
.1f9d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1f9e					TOKTokeniseDecimals:
.1f9e	20 4c 20	jsr $204c			jsr 	TOKGetNext 					; consume the .
.1fa1	20 b4 21	jsr $21b4			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fa4	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1fa6	20 39 20	jsr $2039			jsr 	TOKWriteA
.1fa9	20 ae 1f	jsr $1fae			jsr 	TOKOutputElementBuffer 		; then the buffer
.1fac	18		clc				clc
.1fad	60		rts				rts
.1fae					TOKOutputElementBuffer:
.1fae	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1fb1	20 39 20	jsr $2039			jsr 	TOKWriteA
.1fb4	a8		tay				tay 								; put in Y
.1fb5	f0 0c		beq $1fc3			beq 	_TOEExit 					; exit if empty which is okay.
.1fb7	a2 01		ldx #$01			ldx 	#1
.1fb9					_TOELoop:
.1fb9	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.1fbc	20 39 20	jsr $2039			jsr 	TOKWriteA
.1fbf	e8		inx				inx
.1fc0	88		dey				dey
.1fc1	d0 f6		bne $1fb9			bne 	_TOELoop
.1fc3					_TOEExit:
.1fc3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1fc4					TOKTokenise:
.1fc4	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.1fc7	8e 1c 06	stx $061c			stx 	TOKDataSource
.1fca	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1fcc	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.1fcf	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1fd1	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1fd4	9c 01 04	stz $0401			stz 	TOKLineNumber
.1fd7	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1fda					_TOKMainLoop:
.1fda	20 48 20	jsr $2048			jsr 	TOKGet 						; what follows.
.1fdd	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1fdf	f0 4f		beq $2030			beq 	_TOKExit
.1fe1	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1fe3	d0 05		bne $1fea			bne 	_TOKElement
.1fe5	20 4c 20	jsr $204c			jsr 	TOKGetNext
.1fe8	80 f0		bra $1fda			bra 	_TOKMainLoop
.1fea					_TOKElement:
.1fea	20 32 22	jsr $2232			jsr 	TOKIsDigit 					; is it 0..9
.1fed	90 0a		bcc $1ff9			bcc 	_TOKNotDigit
.1fef	20 8b 21	jsr $218b			jsr 	TOKTokeniseInteger 			; get integer
.1ff2	b0 43		bcs $2037			bcs 	_TOKFail 					; did it fail ?
.1ff4	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.1ff7	80 e1		bra $1fda			bra 	_TOKMainLoop
.1ff9					_TOKNotDigit:
.1ff9	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.1ffc	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1ffe	d0 07		bne $2007			bne 	_TOKNotHex
.2000	20 95 20	jsr $2095			jsr 	TOKTokeniseHexadecimal
.2003	b0 32		bcs $2037			bcs 	_TOKFail
.2005	80 d3		bra $1fda			bra 	_TOKMainLoop
.2007					_TOKNotHex:
.2007	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2009	d0 07		bne $2012			bne 	_TOKNotDecimal
.200b	20 9e 1f	jsr $1f9e			jsr 	TOKTokeniseDecimals
.200e	b0 27		bcs $2037			bcs 	_TOKFail
.2010	80 c8		bra $1fda			bra 	_TOKMainLoop
.2012					_TOKNotDecimal:
.2012	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.2014	d0 07		bne $201d			bne 	_TOKNotString
.2016	20 f9 21	jsr $21f9			jsr 	TOKTokeniseString
.2019	b0 1c		bcs $2037			bcs 	_TOKFail
.201b	80 bd		bra $1fda			bra 	_TOKMainLoop
.201d					_TOKNotString:
.201d	20 4f 22	jsr $224f			jsr 	TOKIsAlpha 					; identifier ?
.2020	b0 07		bcs $2029			bcs 	_TOKIdentifier
.2022	20 c8 21	jsr $21c8			jsr 	TOKTokenisePunctuation 		; punctuation
.2025	b0 10		bcs $2037			bcs 	_TOKFail
.2027	80 b1		bra $1fda			bra 	_TOKMainLoop
.2029					_TOKIdentifier:
.2029	20 cf 20	jsr $20cf			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.202c	b0 09		bcs $2037			bcs 	_TOKFail
.202e	80 aa		bra $1fda			bra 	_TOKMainLoop
.2030					_TOKExit:
.2030	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.2032	20 39 20	jsr $2039			jsr 	TOKWriteA
.2035	18		clc				clc									; return with carry set.
.2036	60		rts				rts
.2037					_TOKFail:
.2037	38		sec				sec
.2038	60		rts				rts
.2039					TOKWriteA:
.2039	da		phx				phx
.203a	ae 00 04	ldx $0400			ldx 	TOKLineSize
.203d	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2040	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.2043	fa		plx				plx
.2044	ee 00 04	inc $0400			inc 	TOKLineSize
.2047	60		rts				rts
.2048					TOKGet:
.2048	18		clc				clc
.2049	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.204c					TOKGetNext:
.204c	38		sec				sec
.204d	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2050					TOKFindToken:
.2050	a2 a2		ldx #$a2			ldx 	#StandardTokens & $FF 		; do this table
.2052	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.2054	20 5f 20	jsr $205f			jsr 	TOKFindTokenXY 				; find it, or not
.2057	90 04		bcc $205d			bcc 	_TOKFTFail
.2059	a2 00		ldx #$00			ldx 	#0
.205b	38		sec				sec
.205c	60		rts				rts
.205d					_TOKFTFail
.205d	18		clc				clc
.205e	60		rts				rts
.205f					TOKFindTokenXY:
.205f	86 22		stx $22				stx 	zTemp0 						; save token table address
.2061	84 23		sty $23				sty 	zTemp0+1
.2063	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.2065	8d 1f 06	sta $061f			sta 	TOKCurrent
.2068					_TOKFindLoop:
.2068	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.206a	18		clc				clc 		 						; clear carry in case of fail
.206b	30 17		bmi $2084			bmi 	_TOKExit 					; end of table, fail, so return CC.
.206d	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.2070	d0 13		bne $2085			bne 	_TOKNext 					; different, try next.
.2072	aa		tax				tax 								; number of chars to compare.
.2073	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.2075					_TOKCompare:
.2075	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.2077	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.207a	d0 09		bne $2085			bne 	_TOKNext 					; different ? try next
.207c	c8		iny				iny 								; compare next two
.207d	ca		dex				dex
.207e	d0 f5		bne $2075			bne 	_TOKCompare 				; until done X characters.
.2080	38		sec				sec
.2081	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.2084					_TOKExit:
.2084	60		rts				rts
.2085					_TOKNext:
.2085	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.2088	38		sec				sec 								; add length+1 to ptr
.2089	b2 22		lda ($22)			lda 	(zTemp0)
.208b	65 22		adc $22				adc 	zTemp0
.208d	85 22		sta $22				sta 	zTemp0
.208f	90 d7		bcc $2068			bcc 	_TOKFindLoop
.2091	e6 23		inc $23				inc 	zTemp0+1
.2093	80 d3		bra $2068			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.2095					TOKTokeniseHexadecimal:
.2095	20 4c 20	jsr $204c			jsr 	TOKGetNext 					; consume the $
.2098	a2 08		ldx #$08			ldx 	#IFR0
.209a	20 c9 30	jsr $30c9			jsr 	IFloatSetZero 				; set R0 = 0
.209d					_TTHLoop:
.209d	20 48 20	jsr $2048			jsr 	TOKGet 						; keep getting and copying while numeric.
.20a0	20 5c 22	jsr $225c			jsr 	TOKIsHexadecimal
.20a3	90 20		bcc $20c5			bcc 	_TTHDone
.20a5	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.20a7	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.20aa	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.20ad	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.20b0	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.20b3	20 4c 20	jsr $204c			jsr 	TOKGetNext
.20b6	38		sec				sec 								; convert to decimal.
.20b7	e9 30		sbc #$30			sbc 	#48
.20b9	c9 0a		cmp #$0a			cmp 	#10
.20bb	90 02		bcc $20bf			bcc 	_TTHNotAlpha
.20bd	e9 07		sbc #$07			sbc 	#7
.20bf					_TTHNotAlpha:
.20bf	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.20c1	85 08		sta $08				sta 	IFR0+IM0
.20c3	80 d8		bra $209d			bra 	_TTHLoop
.20c5					_TTHDone:
.20c5	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.20c7	20 39 20	jsr $2039			jsr 	TOKWriteA
.20ca	20 7c 1f	jsr $1f7c			jsr 	TOKTokeniseConstant 		; write integer out.
.20cd	18		clc				clc
.20ce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.20cf					TOKTokeniseIdentifier:
.20cf	20 69 1f	jsr $1f69			jsr 	TOKResetElement 			; extract an identifier
.20d2					_TOKGetIdentifier:
.20d2	20 48 20	jsr $2048			jsr 	TOKGet
.20d5	20 1c 22	jsr $221c			jsr 	TOKToUpper
.20d8	20 3e 22	jsr $223e			jsr 	TOKIsIdentifierElement
.20db	90 08		bcc $20e5			bcc 	_TOKEndIdent
.20dd	20 6d 1f	jsr $1f6d			jsr		TOKWriteElement
.20e0	20 4c 20	jsr $204c			jsr 	TOKGetNext
.20e3	80 ed		bra $20d2			bra 	_TOKGetIdentifier
.20e5					_TOKEndIdent:
.20e5	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.20e7	d0 06		bne $20ef			bne 	_TOKNotString
.20e9	20 6d 1f	jsr $1f6d			jsr 	TOKWriteElement 			; add it
.20ec	20 4c 20	jsr $204c			jsr 	TOKGetNext 					; consume it
.20ef					_TOKNotString:
.20ef	20 48 20	jsr $2048			jsr 	TOKGet 						; finally check for (
.20f2	c9 28		cmp #$28			cmp 	#"("
.20f4	d0 06		bne $20fc			bne 	_TOKNoArray
.20f6	20 6d 1f	jsr $1f6d			jsr 	TOKWriteElement 			; add it
.20f9	20 4c 20	jsr $204c			jsr 	TOKGetNext 					; consume it
.20fc					_TOKNoArray:
.20fc	20 50 20	jsr $2050			jsr 	TOKFindToken 				; find it
.20ff	90 0e		bcc $210f			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2101	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2103	f0 05		beq $210a			beq 	_TOKComment 				; yes, do comment code.
.2105	20 39 20	jsr $2039			jsr 	TOKWriteA
.2108	18		clc				clc
.2109	60		rts				rts
.210a					_TOKComment:
.210a	20 56 21	jsr $2156			jsr 	TOKDoComment
.210d	18		clc				clc
.210e	60		rts				rts
.210f					_TOKIsVariable:
.210f	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2111					_TOKOutputBuffer:
.2111	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.2114	20 3d 21	jsr $213d			jsr 	TOKTranslateIdentifier
.2117	20 39 20	jsr $2039			jsr 	TOKWriteA
.211a	e8		inx				inx
.211b	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.211e	20 3e 22	jsr $223e			jsr 	TOKIsIdentifierElement
.2121	b0 ee		bcs $2111			bcs 	_TOKOutputBuffer
.2123	a8		tay				tay 								; last char in Y
.2124	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2126	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2128	f0 0e		beq $2138			beq 	_TOKIVExit
.212a	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.212c	d0 04		bne $2132			bne 	_TOKIVCheckArray 			; no, check for (
.212e	1a		inc a				inc 	a 							; token is $7D
.212f	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.2132					_TOKIVCheckArray:
.2132	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2134	d0 02		bne $2138			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2136	1a		inc a				inc 	a
.2137	1a		inc a				inc 	a
.2138					_TOKIVExit:
.2138	20 39 20	jsr $2039			jsr 	TOKWriteA 					; ending token
.213b	18		clc				clc
.213c	60		rts				rts
.213d					TOKTranslateIdentifier:
.213d	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.213f	f0 0f		beq $2150			beq 	_TTI64
.2141	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.2143	f0 0e		beq $2153			beq 	_TTI65
.2145	38		sec				sec
.2146	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2148	10 03		bpl $214d			bpl 	_TTIExit
.214a	18		clc				clc 								; map 09 onto 26-35
.214b	69 2b		adc #$2b			adc 	#"A"-"0"+26
.214d					_TTIExit:
.214d	09 40		ora #$40			ora 	#$40 						; correct range.
.214f	60		rts				rts
.2150	a9 64		lda #$64	_TTI64:	lda 	#$64
.2152	60		rts				rts
.2153	a9 65		lda #$65	_TTI65:	lda 	#$65
.2155	60		rts				rts
.2156					TOKDoComment:
.2156	20 48 20	jsr $2048			jsr 	TOKGet 						; skip over spaces
.2159	c9 20		cmp #$20			cmp 	#' '
.215b	d0 05		bne $2162			bne 	_TOKEndSpaces
.215d	20 4c 20	jsr $204c			jsr 	TOKGetNext
.2160	80 f4		bra $2156			bra 	TOKDoComment
.2162					_TOKEndSpaces:
.2162	48		pha				pha 								; save it
.2163	a9 97		lda #$97			lda 	#PR_REM 					; output the comment token.
.2165	20 39 20	jsr $2039			jsr 	TOKWriteA
.2168	68		pla				pla
.2169	f0 04		beq $216f			beq 	_TOKDCExit 					; end of line.
.216b	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.216d	d0 01		bne $2170			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.216f					_TOKDCExit:
.216f	60		rts				rts
.2170					_TOKDCDoLine:
.2170	20 69 1f	jsr $1f69			jsr 	TOKResetElement 			; start getting the string
.2173					_TOKDCLoop:
.2173	20 48 20	jsr $2048			jsr 	TOKGet 						; check EOL
.2176	c9 00		cmp #$00			cmp 	#0
.2178	f0 08		beq $2182			beq 	_TOKDCEndComment
.217a	20 4c 20	jsr $204c			jsr 	TOKGetNext 					; get and consume
.217d	20 6d 1f	jsr $1f6d			jsr 	TOKWriteElement
.2180	80 f1		bra $2173			bra 	_TOKDCLoop
.2182					_TOKDCEndComment:
.2182	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2184	20 39 20	jsr $2039			jsr 	TOKWriteA
.2187	20 ae 1f	jsr $1fae			jsr 	TOKOutputElementBuffer
.218a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.218b					TOKTokeniseInteger:
.218b	20 b4 21	jsr $21b4			jsr 	TOKExtractInteger 			; pull an integer out as text.
.218e	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.2190	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2192	ad 1c 05	lda $051c			lda		TOKElement
.2195	20 2d 2f	jsr $2f2d			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2198	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.219b	f0 12		beq $21af			beq 	_TOKNotLineNumber
.219d	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.219f	d0 0c		bne $21ad			bne 	_TOKBadLineNumeber
.21a1	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.21a3	8d 01 04	sta $0401			sta 	TOKLineNumber
.21a6	a5 09		lda $09				lda 	IFR0+IM1
.21a8	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.21ab	18		clc				clc
.21ac	60		rts				rts
.21ad					_TOKBadLineNumeber:
.21ad	38		sec				sec
.21ae	60		rts				rts
.21af					_TOKNotLineNumber:
.21af	20 7c 1f	jsr $1f7c			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.21b2	18		clc				clc
.21b3	60		rts				rts
.21b4					TOKExtractInteger:
.21b4	20 69 1f	jsr $1f69			jsr 	TOKResetElement 			; restart
.21b7					_TTILoop:
.21b7	20 48 20	jsr $2048			jsr 	TOKGet 						; keep getting and copying while numeric.
.21ba	20 32 22	jsr $2232			jsr 	TOKIsDigit
.21bd	90 08		bcc $21c7			bcc 	_TOKEIExit
.21bf	20 6d 1f	jsr $1f6d			jsr 	TOKWriteElement
.21c2	20 4c 20	jsr $204c			jsr 	TOKGetNext
.21c5	80 f0		bra $21b7			bra 	_TTILoop
.21c7					_TOKEIExit:
.21c7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.21c8					TOKTokenisePunctuation:
.21c8	20 69 1f	jsr $1f69			jsr 	TOKResetElement 			; copy first punctuation character into element.
.21cb	20 4c 20	jsr $204c			jsr 	TOKGetNext
.21ce	20 6d 1f	jsr $1f6d			jsr 	TOKWriteElement
.21d1	20 48 20	jsr $2048			jsr 	TOKGet 						; what follows ?
.21d4	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.21d6	f0 10		beq $21e8			beq 	_TTPOne
.21d8	20 46 22	jsr $2246			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.21db	b0 0b		bcs $21e8			bcs 	_TTPOne 					; these speed things up a bit.
.21dd	20 6d 1f	jsr $1f6d			jsr 	TOKWriteElement 			; this is what we will search for.
.21e0	20 50 20	jsr $2050			jsr 	TOKFindToken
.21e3	b0 0a		bcs $21ef			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.21e5	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.21e8					_TTPOne:
.21e8	20 50 20	jsr $2050			jsr 	TOKFindToken 				; look for one character punctuation
.21eb	b0 07		bcs $21f4			bcs 	_TTPOutputExit 				; we found it
.21ed	38		sec				sec 								; not recognised.
.21ee	60		rts				rts
.21ef					_TTPConsumeExit:
.21ef	48		pha				pha
.21f0	20 4c 20	jsr $204c			jsr 	TOKGetNext 					; get the 2nd char out.
.21f3	68		pla				pla
.21f4					_TTPOutputExit:
.21f4	20 39 20	jsr $2039			jsr  	TOKWriteA 					; write token out
.21f7	18		clc				clc
.21f8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.21f9					TOKTokeniseString:
.21f9	20 4c 20	jsr $204c			jsr 	TOKGetNext 					; consume the "
.21fc	20 69 1f	jsr $1f69			jsr 	TOKResetElement 			; start getting the string
.21ff					_TOKTSLoop:
.21ff	20 48 20	jsr $2048			jsr 	TOKGet 						; check EOL
.2202	c9 00		cmp #$00			cmp 	#0
.2204	f0 0c		beq $2212			beq 	_TOKTSExit
.2206	20 4c 20	jsr $204c			jsr 	TOKGetNext 					; get and consume
.2209	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.220b	f0 05		beq $2212			beq 	_TOKTSExit
.220d	20 6d 1f	jsr $1f6d			jsr 	TOKWriteElement
.2210	80 ed		bra $21ff			bra 	_TOKTSLoop
.2212					_TOKTSExit:
.2212	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2214	20 39 20	jsr $2039			jsr 	TOKWriteA
.2217	20 ae 1f	jsr $1fae			jsr 	TOKOutputElementBuffer
.221a	18		clc				clc
.221b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.221c					TOKToUpper:
.221c	c9 61		cmp #$61			cmp 	#"a"
.221e	90 06		bcc $2226			bcc 	_TTUNotLower
.2220	c9 7b		cmp #$7b			cmp 	#"z"+1
.2222	b0 02		bcs $2226			bcs 	_TTUNotLower
.2224	49 20		eor #$20			eor 	#$20
.2226					_TTUNotLower:
.2226	60		rts				rts
.2227					TOKToLower:
.2227	c9 41		cmp #$41			cmp 	#"A"
.2229	90 06		bcc $2231			bcc 	_TTUNotUpper
.222b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.222d	b0 02		bcs $2231			bcs 	_TTUNotUpper
.222f	49 20		eor #$20			eor 	#$20
.2231					_TTUNotUpper:
.2231	60		rts				rts
.2232					TOKIsDigit:
.2232	c9 30		cmp #$30			cmp 	#"0"
.2234	90 06		bcc $223c			bcc 	TOKFail
.2236	c9 3a		cmp #$3a			cmp 	#"9"+1
.2238	b0 02		bcs $223c			bcs 	TOKFail
.223a					TOKSucceed:
.223a	38		sec				sec
.223b	60		rts				rts
.223c					TOKFail:
.223c	18		clc				clc
.223d	60		rts				rts
.223e					TOKIsIdentifierElement:
.223e	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.2240	f0 f8		beq $223a			beq 	TOKSucceed
.2242	c9 5f		cmp #$5f			cmp 	#"_"
.2244	f0 f4		beq $223a			beq 	TOKSucceed 					; else fall through to alphanumeric
.2246					TOKIsAlphaNumeric:
.2246	20 4f 22	jsr $224f			jsr 	TOKIsAlpha
.2249	b0 ef		bcs $223a			bcs 	TOKSucceed
.224b	20 32 22	jsr $2232			jsr 	TOKIsDigit
.224e	60		rts				rts
.224f					TOKIsAlpha:
.224f	20 1c 22	jsr $221c			jsr 	TOKToUpper
.2252	c9 41		cmp #$41			cmp 	#"A"
.2254	90 e6		bcc $223c			bcc 	TOKFail
.2256	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2258	b0 e2		bcs $223c			bcs 	TOKFail
.225a	80 de		bra $223a			bra 	TOKSucceed
.225c					TOKIsHexadecimal:
.225c	20 32 22	jsr $2232			jsr		TOKIsDigit
.225f	b0 d9		bcs $223a			bcs 	TOKSucceed
.2261	20 4f 22	jsr $224f			jsr 	TOKIsAlpha
.2264	90 d6		bcc $223c			bcc 	TOKFail
.2266	c9 47		cmp #$47			cmp 	#"F"+1
.2268	b0 d2		bcs $223c			bcs 	TOKFail
.226a	80 ce		bra $223a			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.226c					Command_CALL:
.226c	a9 42		lda #$42			lda 	#STK_CALL
.226e	20 39 27	jsr $2739			jsr 	StackOpen
.2271	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.2273	29 c0		and #$c0			and 	#$C0
.2275	c9 40		cmp #$40			cmp 	#$40
.2277	d0 29		bne $22a2			bne 	_CCSyntax
.2279	20 0c 2a	jsr $2a0c			jsr 	VARGetInfo 					; get the information
.227c	20 20 27	jsr $2720			jsr 	ERRCheckRParen 				; check right bracket follows.
.227f	20 be 29	jsr $29be			jsr 	VARFind 					; exists ?
.2282	90 21		bcc $22a5			bcc 	_CCUnknown
.2284	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.2286	85 22		sta $22				sta 	zTemp0
.2288	20 6d 27	jsr $276d			jsr 	STKSaveCodePosition 		; save return address on stack.
.228b	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.228d	b1 22		lda ($22),y			lda 	(zTemp0),y
.228f	c9 ff		cmp #$ff			cmp 	#$FF
.2291	d0 12		bne $22a5			bne 	_CCUnknown
.2293	88		dey				dey 								; get Y offset to stack
.2294	b1 22		lda ($22),y			lda 	(zTemp0),y
.2296	48		pha				pha
.2297	88		dey				dey 								; get address
.2298	b1 22		lda ($22),y			lda 	(zTemp0),y
.229a	85 19		sta $19				sta 	codePtr+1
.229c	b2 22		lda ($22)			lda 	(zTemp0)
.229e	85 18		sta $18				sta 	codePtr
.22a0	7a		ply				ply 								; restore Y
.22a1	60		rts				rts
.22a2					_CCSyntax:
.22a2	4c 6b 25	jmp $256b		jmp	ErrorV_syntax
.22a5					_CCUnknown:
.22a5	4c e0 26	jmp $26e0		jmp	ErrorV_unknown
.22a8					Command_ENDPROC:
.22a8	a9 42		lda #$42			lda 	#STK_CALL
.22aa	20 65 27	jsr $2765			jsr 	StackCheckFrame
.22ad	20 7f 27	jsr $277f			jsr 	STKLoadCodePosition 		; return
.22b0	20 57 27	jsr $2757			jsr 	StackClose
.22b3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.22b4					Command_DO:
.22b4	a9 22		lda #$22			lda 	#STK_DO
.22b6	20 39 27	jsr $2739			jsr 	StackOpen
.22b9	20 6d 27	jsr $276d			jsr 	STKSaveCodePosition 		; save loop position
.22bc	60		rts				rts
.22bd					Command_EXIT:
.22bd	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.22bf	20 65 27	jsr $2765			jsr 	StackCheckFrame
.22c2	20 57 27	jsr $2757			jsr 	StackClose 					; close it
.22c5	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.22c7	aa		tax				tax
.22c8	20 7b 24	jsr $247b			jsr 	ScanForward
.22cb	60		rts				rts
.22cc					Command_LOOP:
.22cc	a9 22		lda #$22			lda 	#STK_DO
.22ce	20 65 27	jsr $2765			jsr 	StackCheckFrame
.22d1	20 7f 27	jsr $277f			jsr 	STKLoadCodePosition 		; loop back
.22d4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.22d5					Command_FOR:
.22d5	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.22d7	20 39 27	jsr $2739			jsr 	StackOpen
.22da	20 bb 12	jsr $12bb			jsr 	CommandLET 					; do "I = 1" bit
.22dd	5a		phy				phy 								; save variable address to +4,+5
.22de	a0 04		ldy #$04			ldy 	#4
.22e0	a5 22		lda $22				lda 	zTemp0
.22e2	91 2a		sta ($2a),y			sta 	(basicStack),y
.22e4	c8		iny				iny
.22e5	a5 23		lda $23				lda 	zTemp0+1
.22e7	91 2a		sta ($2a),y			sta 	(basicStack),y
.22e9	7a		ply				ply
.22ea	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.22ec	20 30 27	jsr $2730			jsr 	ERRCheckA
.22ef	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.22f2	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.22f4	a2 08		ldx #$08			ldx 	#IFR0
.22f6	20 4b 23	jsr $234b			jsr 	CFSaveR0X
.22f9	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.22fb	c9 91		cmp #$91			cmp 	#PR_STEP
.22fd	d0 06		bne $2305			bne 	_CFStep1
.22ff	c8		iny				iny 								; consume step
.2300	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; evaluate STEP
.2303	80 24		bra $2329			bra 	_CFWriteStep
.2305					_CFStep1:
.2305	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2307	a9 01		lda #$01			lda 	#1
.2309	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.230c	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.230d	a0 04		ldy #$04			ldy 	#4 							; get variable address
.230f	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2311	85 22		sta $22				sta 	zTemp0
.2313	c8		iny				iny
.2314	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2316	85 23		sta $23				sta 	zTemp0+1
.2318	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.231a	b1 22		lda ($22),y			lda 	(zTemp0),y
.231c	d0 0a		bne $2328			bne 	_CFNotOptimised
.231e	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2320	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2322	d0 04		bne $2328			bne 	_CFNotOptimised
.2324	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2326	85 0b		sta $0b				sta 	IFR0+IExp
.2328					_CFNotOptimised:
.2328	7a		ply				ply
.2329					_CFWriteStep:
.2329	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.232b	a9 06		lda #$06			lda 	#6
.232d	20 4b 23	jsr $234b			jsr 	CFSaveR0X
.2330	20 6d 27	jsr $276d			jsr 	STKSaveCodePosition 		; save loop position
.2333	60		rts				rts
.2334					CFLoadR0X:
.2334	5a		phy				phy
.2335	a8		tay				tay
.2336	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2338	95 00		sta $00,x			sta 	IM0,x
.233a	c8		iny				iny
.233b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.233d	95 01		sta $01,x			sta 	IM1,x
.233f	c8		iny				iny
.2340	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2342	95 02		sta $02,x			sta 	IM2,x
.2344	c8		iny				iny
.2345	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2347	95 03		sta $03,x			sta 	IExp,x
.2349	7a		ply				ply
.234a	60		rts				rts
.234b					CFSaveR0X:
.234b	5a		phy				phy
.234c	a8		tay				tay
.234d	b5 00		lda $00,x			lda 	IM0,x
.234f	91 2a		sta ($2a),y			sta 	(basicStack),y
.2351	c8		iny				iny
.2352	b5 01		lda $01,x			lda 	IM1,x
.2354	91 2a		sta ($2a),y			sta 	(basicStack),y
.2356	c8		iny				iny
.2357	b5 02		lda $02,x			lda 	IM2,x
.2359	91 2a		sta ($2a),y			sta 	(basicStack),y
.235b	c8		iny				iny
.235c	b5 03		lda $03,x			lda 	IExp,x
.235e	91 2a		sta ($2a),y			sta 	(basicStack),y
.2360	7a		ply				ply
.2361	60		rts				rts
.2362					Command_NEXT:
.2362	a9 37		lda #$37			lda 	#STK_FOR
.2364	20 65 27	jsr $2765			jsr 	StackCheckFrame
.2367	5a		phy				phy 								; check optimised loop
.2368	a0 09		ldy #$09			ldy 	#9
.236a	b1 2a		lda ($2a),y			lda 	(basicStack),y
.236c	7a		ply				ply
.236d	0a		asl a				asl 	a
.236e	b0 35		bcs $23a5			bcs 	_CNOptimised
.2370	20 dc 23	jsr $23dc			jsr 	_CNLoadValue 				; load index value to R0.
.2373	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2375	a9 06		lda #$06			lda 	#6
.2377	20 34 23	jsr $2334			jsr 	CFLoadR0X
.237a	20 c1 2a	jsr $2ac1			jsr 	IFloatAdd 					; add them together and write back.
.237d	20 ff 23	jsr $23ff			jsr 	_CNSaveValue
.2380	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2382	a2 0c		ldx #$0c			ldx 	#IFR1
.2384	20 34 23	jsr $2334			jsr 	CFLoadR0X
.2387	20 98 2d	jsr $2d98			jsr 	IFloatCompare 				; compare terminal vs current
.238a	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.238c	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero
.238f	f0 10		beq $23a1			beq 	_CNLoopBack
.2391	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.2393	5a		phy				phy
.2394	a0 09		ldy #$09			ldy 	#6+IExp
.2396	51 2a		eor ($2a),y			eor 	(basicStack),y
.2398	7a		ply				ply
.2399	29 40		and #$40			and 	#IFSign
.239b	f0 04		beq $23a1			beq 	_CNLoopBack
.239d					_CNExitLoop:
.239d	20 57 27	jsr $2757			jsr 	StackClose		 			; return
.23a0	60		rts				rts
.23a1					_CNLoopBack:
.23a1	20 7f 27	jsr $277f			jsr 	STKLoadCodePosition 		; loop back
.23a4	60		rts				rts
.23a5					_CNOptimised:
.23a5	5a		phy				phy
.23a6	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.23a8	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23aa	85 26		sta $26				sta 	zTemp2
.23ac	c8		iny				iny
.23ad	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23af	85 27		sta $27				sta 	zTemp2+1
.23b1	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.23b3					_CNIncrement:
.23b3	c8		iny				iny
.23b4	b1 26		lda ($26),y			lda 	(zTemp2),y
.23b6	1a		inc a				inc 	a
.23b7	91 26		sta ($26),y			sta 	(zTemp2),y
.23b9	f0 f8		beq $23b3			beq 	_CNIncrement
.23bb	18		clc				clc 								; point zTemp0 to terminal value
.23bc	a5 2a		lda $2a				lda 	basicStack
.23be	69 0a		adc #$0a			adc 	#10
.23c0	85 22		sta $22				sta 	zTemp0
.23c2	a5 2b		lda $2b				lda 	basicStack+1
.23c4	69 00		adc #$00			adc 	#0
.23c6	85 23		sta $23				sta 	zTemp0+1
.23c8	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.23ca	b2 26		lda ($26)			lda 	(zTemp2)
.23cc	d2 22		cmp ($22)			cmp 	(zTemp0)
.23ce	b1 26		lda ($26),y			lda 	(zTemp2),y
.23d0	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.23d2	c8		iny				iny
.23d3	b1 26		lda ($26),y			lda 	(zTemp2),y
.23d5	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.23d7	7a		ply				ply
.23d8	b0 c3		bcs $239d			bcs 	_CNExitLoop
.23da	80 c5		bra $23a1			bra 	_CNLoopBack
.23dc					_CNLoadValue:
.23dc	5a		phy				phy
.23dd	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.23df	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23e1	85 26		sta $26				sta 	zTemp2
.23e3	c8		iny				iny
.23e4	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23e6	85 27		sta $27				sta 	zTemp2+1
.23e8	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.23ea	b1 26		lda ($26),y			lda 	(zTemp2),y
.23ec	85 08		sta $08				sta 	IFR0+IM0
.23ee	c8		iny				iny
.23ef	b1 26		lda ($26),y			lda 	(zTemp2),y
.23f1	85 09		sta $09				sta 	IFR0+IM1
.23f3	c8		iny				iny
.23f4	b1 26		lda ($26),y			lda 	(zTemp2),y
.23f6	85 0a		sta $0a				sta 	IFR0+IM2
.23f8	c8		iny				iny
.23f9	b1 26		lda ($26),y			lda 	(zTemp2),y
.23fb	85 0b		sta $0b				sta 	IFR0+IExp
.23fd	7a		ply				ply
.23fe	60		rts				rts
.23ff					_CNSaveValue:
.23ff	5a		phy				phy
.2400	a0 00		ldy #$00			ldy 	#0
.2402	a5 08		lda $08				lda 	IFR0+IM0
.2404	91 26		sta ($26),y			sta 	(zTemp2),y
.2406	c8		iny				iny
.2407	a5 09		lda $09				lda 	IFR0+IM1
.2409	91 26		sta ($26),y			sta 	(zTemp2),y
.240b	c8		iny				iny
.240c	a5 0a		lda $0a				lda 	IFR0+IM2
.240e	91 26		sta ($26),y			sta 	(zTemp2),y
.2410	c8		iny				iny
.2411	a5 0b		lda $0b				lda 	IFR0+IExp
.2413	91 26		sta ($26),y			sta 	(zTemp2),y
.2415	7a		ply				ply
.2416	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2417					Command_GOSUB:
.2417	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; get line number
.241a	a9 52		lda #$52			lda 	#STK_GOSUB
.241c	20 39 27	jsr $2739			jsr 	StackOpen
.241f	20 6d 27	jsr $276d			jsr 	STKSaveCodePosition 		; save return address on stack.
.2422	4c d8 11	jmp $11d8			jmp 	GotoR0
.2425					Command_RETURN:
.2425	a9 52		lda #$52			lda 	#STK_GOSUB
.2427	20 65 27	jsr $2765			jsr 	StackCheckFrame
.242a	20 7f 27	jsr $277f			jsr 	STKLoadCodePosition 		; return
.242d	20 57 27	jsr $2757			jsr 	StackClose
.2430	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2431					IfCommand:
.2431	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; Get the if test.
.2434	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2436	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2438	d0 0c		bne $2446			bne 	_IfStructured 				; we still support it.
.243a	c8		iny				iny 								; consume THEN
.243b	a2 08		ldx #$08			ldx 	#IFR0
.243d	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero 			; is it zero
.2440	f0 01		beq $2443			beq 	_IfFail 					; if fail, go to next line
.2442	60		rts				rts 								; if THEN just continue
.2443					_IfFail:
.2443	4c c9 14	jmp $14c9			jmp 	RUNEndOfLine
.2446					_IfStructured:
.2446	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero 			; is it zero
.2449	d0 07		bne $2452			bne 	_IfExit 					; if not, then continue normally.
.244b	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.244d	a2 85		ldx #$85			ldx 	#PR_ENDIF
.244f	20 7b 24	jsr $247b			jsr 	ScanForward 				; and run from there
.2452					_IfExit:
.2452	60		rts				rts
.2453					ElseCode:
.2453	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2455	aa		tax				tax 								; so just go to the structure exit
.2456	20 7b 24	jsr $247b			jsr 	ScanForward
.2459	60		rts				rts
.245a					EndIf:
.245a	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.245b					Command_REPEAT:
.245b	a9 02		lda #$02			lda 	#STK_REPEAT
.245d	20 39 27	jsr $2739			jsr 	StackOpen
.2460	20 6d 27	jsr $276d			jsr 	STKSaveCodePosition 		; save loop position
.2463	60		rts				rts
.2464					Command_UNTIL:
.2464	a9 02		lda #$02			lda 	#STK_REPEAT
.2466	20 65 27	jsr $2765			jsr 	StackCheckFrame
.2469	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; work out the test
.246c	a2 08		ldx #$08			ldx 	#IFR0
.246e	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero 			; check if zero
.2471	f0 04		beq $2477			beq 	_CULoopBack 				; if so keep looping
.2473	20 57 27	jsr $2757			jsr 	StackClose		 			; return
.2476	60		rts				rts
.2477					_CULoopBack:
.2477	20 7f 27	jsr $277f			jsr 	STKLoadCodePosition 		; loop back
.247a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.247b					ScanForward:
.247b	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.247d	86 23		stx $23				stx 	zTemp0+1
.247f	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.2481					_ScanForwardLoop:
.2481	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2483	d0 0a		bne $248f			bne 	_ScanNoCheck
.2485	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2487	c5 22		cmp $22				cmp 	zTemp0
.2489	f0 49		beq $24d4			beq 	_ScanExit
.248b	c5 23		cmp $23				cmp 	zTemp0+1
.248d	f0 45		beq $24d4			beq 	_ScanExit
.248f					_ScanNoCheck:
.248f	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.2491	c8		iny				iny
.2492	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2494	f0 37		beq $24cd			beq		_ScanDataItem
.2496	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2498	f0 33		beq $24cd			beq 	_ScanDataItem
.249a	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.249c	f0 1b		beq $24b9			beq 	_ScanNextLine
.249e	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.24a0	d0 01		bne $24a3			bne 	_ScanNoShift
.24a2	c8		iny				iny
.24a3					_ScanNoShift:
.24a3	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.24a5	b0 da		bcs $2481			bcs 	_ScanForwardLoop
.24a7	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.24a9	90 d6		bcc $2481			bcc 	_ScanForwardLoop
.24ab	aa		tax				tax 								; access the table to get the adjustment.
.24ac	18		clc				clc
.24ad	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.24af	7d 16 1a	adc $1a16,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.24b2	85 24		sta $24				sta 	zTemp1
.24b4	10 cb		bpl $2481			bpl		_ScanForwardLoop 			; error if -ve ?
.24b6	4c f7 25	jmp $25f7		jmp	ErrorV_structure
.24b9					_ScanNextLine:
.24b9	18		clc				clc	 								; forward to next line.
.24ba	b2 18		lda ($18)			lda 	(codePtr)
.24bc	65 18		adc $18				adc 	codePtr
.24be	85 18		sta $18				sta 	codePtr
.24c0	90 02		bcc $24c4			bcc 	_ScanNoCarry
.24c2	e6 19		inc $19				inc 	codePtr+1
.24c4					_ScanNoCarry:
.24c4	a0 03		ldy #$03			ldy 	#3
.24c6	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.24c8	d0 b7		bne $2481			bne 	_ScanForwardLoop
.24ca	4c f7 25	jmp $25f7		jmp	ErrorV_structure
.24cd					_ScanDataItem:
.24cd	98		tya				tya
.24ce	38		sec				sec
.24cf	71 18		adc ($18),y			adc 	(codePtr),y
.24d1	a8		tay				tay
.24d2	80 ad		bra $2481			bra 	_ScanForwardLoop
.24d4					_ScanExit:
.24d4	c8		iny				iny 								; consume final token.
.24d5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.24d6					ScanProcedures:
.24d6	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.24d8	48		pha				pha
.24d9	a5 19		lda $19				lda 	codePtr+1
.24db	48		pha				pha
.24dc	5a		phy				phy
.24dd	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.24e0	85 19		sta $19				sta 	codePtr+1
.24e2	64 18		stz $18				stz 	codePtr
.24e4					_SPLoop:
.24e4	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.24e6	f0 18		beq $2500			beq 	_SPExit
.24e8	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.24ea	b1 18		lda ($18),y			lda 	(codePtr),y
.24ec	c9 88		cmp #$88			cmp 	#PR_PROC
.24ee	d0 03		bne $24f3			bne 	_SPNext
.24f0	20 08 25	jsr $2508			jsr 	_SPSetupRecord
.24f3					_SPNext:
.24f3	18		clc				clc 								; forward to next
.24f4	b2 18		lda ($18)			lda 	(codePtr)
.24f6	65 18		adc $18				adc 	codePtr
.24f8	85 18		sta $18				sta 	codePtr
.24fa	90 e8		bcc $24e4			bcc 	_SPLoop
.24fc	e6 19		inc $19				inc 	codePtr+1
.24fe	80 e4		bra $24e4			bra 	_SPLoop
.2500					_SPExit:
.2500	7a		ply				ply
.2501	68		pla				pla
.2502	85 19		sta $19				sta 	codePtr+1
.2504	68		pla				pla
.2505	85 18		sta $18				sta 	codePtr
.2507	60		rts				rts
.2508					_SPSetupRecord:
.2508	c8		iny				iny 								; check identifier follows
.2509	b1 18		lda ($18),y			lda 	(codePtr),y
.250b	29 c0		and #$c0			and 	#$C0
.250d	c9 40		cmp #$40			cmp 	#$40
.250f	d0 27		bne $2538			bne 	_SPSyntax
.2511	20 0c 2a	jsr $2a0c			jsr 	VARGetInfo 					; get the information
.2514	20 20 27	jsr $2720			jsr 	ERRCheckRParen 				; check right bracket follows.
.2517	20 be 29	jsr $29be			jsr 	VARFind 					; already exists ?
.251a	b0 1f		bcs $253b			bcs 	_SPUsed 					; error !
.251c	20 6a 29	jsr $296a			jsr 	VARCreate 					; create, XA points to the data.
.251f	85 22		sta $22				sta 	zTemp0
.2521	86 23		stx $23				stx 	zTemp0+1
.2523	5a		phy				phy 								; save Y pos on stack
.2524	a0 01		ldy #$01			ldy 	#1
.2526	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2528	92 22		sta ($22)			sta 	(zTemp0)
.252a	a5 19		lda $19				lda 	codePtr+1
.252c	91 22		sta ($22),y			sta 	(zTemp0),y
.252e	c8		iny				iny
.252f	68		pla				pla
.2530	91 22		sta ($22),y			sta 	(zTemp0),y
.2532	c8		iny				iny
.2533	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2535	91 22		sta ($22),y			sta 	(zTemp0),y
.2537	60		rts				rts
.2538					_SPSyntax:
.2538	4c 6b 25	jmp $256b		jmp	ErrorV_syntax
.253b					_SPUsed:
.253b	4c c2 26	jmp $26c2		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.253e					Command_WHILE:
.253e	5a		phy				phy 								; save position of the test
.253f	20 03 17	jsr $1703			jsr 	EXPEvalNumber 				; work out the while test.
.2542	a2 08		ldx #$08			ldx 	#IFR0
.2544	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero 			; check if zero
.2547	f0 0e		beq $2557			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2549	98		tya				tya 								; position *after* test.
.254a	7a		ply				ply 								; restore position before test, at WHILE
.254b	88		dey				dey 								; so we execute the WHILE command again.
.254c	48		pha				pha 								; push after test on the stack
.254d	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.254f	20 39 27	jsr $2739			jsr 	StackOpen
.2552	20 6d 27	jsr $276d			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2555	7a		ply				ply 								; restore the position *after* the test
.2556	60		rts				rts
.2557					_WHExitLoop:
.2557	68		pla				pla 								; throw post loop position
.2558	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.255a	aa		tax				tax
.255b	20 7b 24	jsr $247b			jsr 	ScanForward
.255e	60		rts				rts
.255f					Command_WEND:
.255f	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2561	20 65 27	jsr $2765			jsr 	StackCheckFrame
.2564	20 7f 27	jsr $277f			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2567	20 57 27	jsr $2757			jsr 	StackClose		 			; erase the frame
.256a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.256b					ErrorV_syntax:
.256b	20 58 28	jsr $2858		jsr	ErrorHandler
>256e	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2576	45 72 72 6f 72 00
.257c					ErrorV_range:
.257c	20 58 28	jsr $2858		jsr	ErrorHandler
>257f	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2587	52 61 6e 67 65 00
.258d					ErrorV_value:
.258d	20 58 28	jsr $2858		jsr	ErrorHandler
>2590	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2598	75 65 00
.259b					ErrorV_type:
.259b	20 58 28	jsr $2858		jsr	ErrorHandler
>259e	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>25a6	73 6d 61 74 63 68 00
.25ad					ErrorV_unimplemented:
.25ad	20 58 28	jsr $2858		jsr	ErrorHandler
>25b0	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>25b8	6c 65 6d 65 6e 74 65 64 00
.25c1					ErrorV_assert:
.25c1	20 58 28	jsr $2858		jsr	ErrorHandler
>25c4	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>25cc	46 61 69 6c 00
.25d1					ErrorV_internal:
.25d1	20 58 28	jsr $2858		jsr	ErrorHandler
>25d4	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>25dc	6c 20 45 72 72 6f 72 00
.25e4					ErrorV_divzero:
.25e4	20 58 28	jsr $2858		jsr	ErrorHandler
>25e7	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>25ef	42 79 20 5a 65 72 6f 00
.25f7					ErrorV_structure:
.25f7	20 58 28	jsr $2858		jsr	ErrorHandler
>25fa	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2602	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.260f					ErrorV_stop:
.260f	20 58 28	jsr $2858		jsr	ErrorHandler
>2612	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>261a	20 53 74 6f 70 70 65 64 00
.2623					ErrorV_data:
.2623	20 58 28	jsr $2858		jsr	ErrorHandler
>2626	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>262e	44 61 74 61 00
.2633					ErrorV_redefine:
.2633	20 58 28	jsr $2858		jsr	ErrorHandler
>2636	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>263e	65 64 65 66 69 6e 65 64 00
.2647					ErrorV_index:
.2647	20 58 28	jsr $2858		jsr	ErrorHandler
>264a	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2652	61 79 20 49 6e 64 65 78 00
.265b					ErrorV_memory:
.265b	20 58 28	jsr $2858		jsr	ErrorHandler
>265e	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2666	4d 65 6d 6f 72 79 00
.266d					ErrorV_uninitialised:
.266d	20 58 28	jsr $2858		jsr	ErrorHandler
>2670	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2678	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2688					ErrorV_string:
.2688	20 58 28	jsr $2858		jsr	ErrorHandler
>268b	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>2693	69 6e 67 20 4c 65 6e 67 74 68 00
.269e					ErrorV_variable:
.269e	20 58 28	jsr $2858		jsr	ErrorHandler
>26a1	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>26a9	65 20 4d 69 73 73 69 6e 67 00
.26b3					ErrorV_stack:
.26b3	20 58 28	jsr $2858		jsr	ErrorHandler
>26b6	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>26be	75 6c 6c 00
.26c2					ErrorV_dupproc:
.26c2	20 58 28	jsr $2858		jsr	ErrorHandler
>26c5	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>26cd	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>26dd	65 64 00
.26e0					ErrorV_unknown:
.26e0	20 58 28	jsr $2858		jsr	ErrorHandler
>26e3	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>26eb	20 50 72 6f 63 65 64 75 72 65 00
.26f6					ErrorV_break:
.26f6	20 58 28	jsr $2858		jsr	ErrorHandler
>26f9	05 42 72 65 61 6b 00			.text	5,"Break",0
.2700					ErrorV_line:
.2700	20 58 28	jsr $2858		jsr	ErrorHandler
>2703	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>270b	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2718					ERRCheckLParen:
.2718	b1 18		lda ($18),y			lda 	(codePtr),y
.271a	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.271c	d0 18		bne $2736			bne 	ERRSyntaxError
.271e	c8		iny				iny
.271f	60		rts				rts
.2720					ERRCheckRParen:
.2720	b1 18		lda ($18),y			lda 	(codePtr),y
.2722	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2724	d0 10		bne $2736			bne 	ERRSyntaxError
.2726	c8		iny				iny
.2727	60		rts				rts
.2728					ERRCheckComma:
.2728	b1 18		lda ($18),y			lda 	(codePtr),y
.272a	c9 99		cmp #$99			cmp 	#PR_COMMA
.272c	d0 08		bne $2736			bne 	ERRSyntaxError
.272e	c8		iny				iny
.272f	60		rts				rts
.2730					ERRCheckA:
.2730	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2732	d0 02		bne $2736			bne 	ERRSyntaxError
.2734	c8		iny				iny
.2735	60		rts				rts
.2736					ERRSyntaxError:
.2736	4c 6b 25	jmp $256b		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2739					StackOpen:
.2739	48		pha				pha 								; save frame byte
.273a	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.273c	0a		asl a				asl 	a 							; claim twice this for storage
.273d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.273f	38		sec				sec 								; so basically subtracting from
.2740	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.2742	85 2a		sta $2a				sta 	basicStack
.2744	b0 0a		bcs $2750			bcs 	_SONoBorrow
>2746	db						.byte 	$DB
.2747	c6 2b		dec $2b				dec 	basicStack+1
.2749	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.274b	cd 20 06	cmp $0620			cmp 	basicStackEnd
.274e	f0 04		beq $2754			beq 	_SOMemory
.2750					_SONoBorrow:
.2750	68		pla				pla 								; get marker back and write at TOS
.2751	92 2a		sta ($2a)			sta 	(basicStack)
.2753	60		rts				rts
.2754					_SOMemory:
.2754	4c b3 26	jmp $26b3		jmp	ErrorV_stack
.2757					StackClose:
.2757	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.2759	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.275b	0a		asl a				asl 	a 							; claim twice this.
.275c	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.275e	85 2a		sta $2a				sta 	basicStack
.2760	90 02		bcc $2764			bcc 	_SCExit
.2762	e6 2b		inc $2b				inc 	basicStack+1
.2764					_SCExit:
.2764	60		rts				rts
.2765					StackCheckFrame:
.2765	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.2767	d0 01		bne $276a			bne 	_SCFError 					; different, we have structures mixed up
.2769	60		rts				rts
.276a					_SCFError:
.276a	4c f7 25	jmp $25f7		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.276d					STKSaveCodePosition:
.276d	5a		phy				phy
.276e	98		tya				tya 								; save Y at offset 1.
.276f	a0 01		ldy #$01			ldy 	#1
.2771	91 2a		sta ($2a),y			sta 	(basicStack),y
.2773	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2775	c8		iny				iny
.2776	91 2a		sta ($2a),y			sta 	(basicStack),y
.2778	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.277a	c8		iny				iny
.277b	91 2a		sta ($2a),y			sta 	(basicStack),y
.277d	7a		ply				ply
.277e	60		rts				rts
.277f					STKLoadCodePosition:
.277f	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2781	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2783	85 19		sta $19				sta 	codePtr+1
.2785	88		dey				dey
.2786	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2788	85 18		sta $18				sta 	codePtr
.278a	88		dey				dey
.278b	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.278d	a8		tay				tay
.278e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.278f					StackReset:
.278f	48		pha				pha 								; save top of memory
.2790	3a		dec a				dec 	a  							; end of stack = previous byte
.2791	85 2b		sta $2b				sta 	basicStack+1
.2793	a9 ff		lda #$ff			lda 	#$FF
.2795	85 2a		sta $2a				sta 	basicStack
.2797	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2799	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.279b	68		pla				pla 								; allocate pages for stack.
.279c	38		sec				sec
.279d	e9 02		sbc #$02			sbc 	#STACKPAGES
.279f	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.27a2	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.27a3					StringConcrete:
.27a3	5a		phy				phy 								; save position on stack
.27a4	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.27a6	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.27a8	b0 41		bcs $27eb			bcs 	_SALengthError
.27aa	18		clc				clc 								; length of the new string
.27ab	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.27ad	90 02		bcc $27b1			bcc 	_SAHaveLength
.27af	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.27b1					_SAHaveLength:
.27b1	48		pha				pha 								; save length to be allocated for concreting.
.27b2	38		sec				sec
.27b3	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.27b5	6d 22 06	adc $0622			adc 	stringMemory
.27b8	8d 22 06	sta $0622			sta 	stringMemory
.27bb	85 26		sta $26				sta 	zTemp2 						; update storage address
.27bd	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.27bf	6d 23 06	adc $0623			adc 	stringMemory+1
.27c2	8d 23 06	sta $0623			sta 	stringMemory+1
.27c5	85 27		sta $27				sta 	zTemp2+1
.27c7	68		pla				pla 								; save length allocated in +0
.27c8	92 26		sta ($26)			sta 	(zTemp2)
.27ca	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.27cc	a0 01		ldy #$01			ldy 	#1
.27ce	91 26		sta ($26),y			sta 	(zTemp2),y
.27d0					_SACopyNewString:
.27d0	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.27d2	a0 02		ldy #$02			ldy 	#2
.27d4	91 26		sta ($26),y			sta 	(zTemp2),y
.27d6	aa		tax				tax 								; bytes to copy
.27d7	f0 0c		beq $27e5			beq 	_SACopyExit
.27d9	a0 01		ldy #$01			ldy 	#1 							; first character from here
.27db					_SACopyNSLoop:
.27db	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.27dd	c8		iny				iny 								; write two on in string storage
.27de	c8		iny				iny
.27df	91 26		sta ($26),y			sta 	(zTemp2),y
.27e1	88		dey				dey
.27e2	ca		dex				dex									; until copied all the string lengths.
.27e3	d0 f6		bne $27db			bne 	_SACopyNSLoop
.27e5					_SACopyExit:
.27e5	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.27e7	a5 26		lda $26				lda 	zTemp2
.27e9	7a		ply				ply
.27ea	60		rts				rts
.27eb					_SALengthError:
.27eb	4c 88 26	jmp $2688		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.27ee					StringSystemInitialise:
.27ee	3a		dec a				dec 	a 							; make last byte of previous page.
.27ef	8d 23 06	sta $0623			sta 	stringMemory+1
.27f2	85 23		sta $23				sta 	zTemp0+1
.27f4	a9 ff		lda #$ff			lda 	#$FF
.27f6	8d 22 06	sta $0622			sta 	stringMemory
.27f9	85 22		sta $22				sta 	zTemp0
.27fb	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.27fd	92 22		sta ($22)			sta 	(zTemp0)
.27ff	60		rts				rts
.2800					StringSpaceInitialise:
.2800	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2802	8d 21 06	sta $0621			sta 	stringInitialised
.2805	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2808	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.280b	ad 23 06	lda $0623			lda 	stringMemory+1
.280e	3a		dec a				dec 	a
.280f	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2812	20 82 10	jsr $1082			jsr 	ClearCheckMemory
.2815	60		rts				rts
.2816					StringTempAllocate:
.2816	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2818	b0 2e		bcs $2848			bcs 	_STALength
.281a	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.281d	30 05		bmi $2824			bmi 	_STAAllocate
.281f	48		pha				pha 								; save value to subtract.
.2820	20 00 28	jsr $2800			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2823	68		pla				pla 								; restore it
.2824					_STAAllocate:
.2824	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2826	18		clc				clc  								; deliberate allows one more
.2827	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.282a	8d 24 06	sta $0624			sta 	stringTempPointer
.282d	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.282f	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.2831	ad 25 06	lda $0625			lda 	stringTempPointer+1
.2834	69 ff		adc #$ff			adc 	#$FF
.2836	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2839	85 2d		sta $2d				sta 	zsTemp+1
.283b	85 09		sta $09				sta 	IFR0+IM1
.283d	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.283f	a9 80		lda #$80			lda 	#$80
.2841	85 0b		sta $0b				sta 	IFR0+IExp
.2843	a9 00		lda #$00			lda 	#0 							; clear the target string
.2845	92 2c		sta ($2c)			sta 	(zsTemp)
.2847	60		rts				rts
.2848					_STALength:
.2848	4c 88 26	jmp $2688		jmp	ErrorV_string
.284b					StringTempWrite:
.284b	5a		phy				phy
.284c	48		pha				pha
.284d	b2 2c		lda ($2c)			lda 	(zsTemp)
.284f	1a		inc a				inc 	a
.2850	92 2c		sta ($2c)			sta 	(zsTemp)
.2852	a8		tay				tay
.2853	68		pla				pla
.2854	91 2c		sta ($2c),y			sta 	(zsTemp),y
.2856	7a		ply				ply
.2857	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2858					ErrorHandler:
.2858	fa		plx				plx 								; get address of msg
.2859	7a		ply				ply
.285a	e8		inx				inx 								; bump past RTS
.285b	d0 01		bne $285e			bne 	_EHNoInc
.285d	c8		iny				iny
.285e					_EHNoInc:
.285e	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.2861	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.2864	0d 27 06	ora $0627			ora 	ERRLine+1
.2867	f0 10		beq $2879			beq 	_EHNoNumber
.2869	a2 7c		ldx #$7c			ldx 	#_EHAtMsg & $FF
.286b	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.286d	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.2870	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.2873	ae 27 06	ldx $0627			ldx 	ERRLine+1
.2876	20 81 28	jsr $2881			jsr 	WriteIntXA
.2879					_EHNoNumber:
.2879	4c aa 28	jmp $28aa			jmp 	WarmStartNewLine
.287c					_EHAtMsg:
>287c	20 61 74 20 00					.text 	" at ",0
.2881					WriteIntXA:
.2881	da		phx				phx
.2882	48		pha				pha
.2883	a2 08		ldx #$08			ldx 	#IFR0
.2885	20 18 30	jsr $3018			jsr 	IFloatPushRx
.2888	68		pla				pla
.2889	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.288c	68		pla				pla
.288d	85 09		sta $09				sta 	IFR0+IM1
.288f	a9 0a		lda #$0a			lda 	#10 						; decimal
.2891	20 6b 2e	jsr $2e6b			jsr 	IFloatIntegerToStringR0	 	; convert
.2894	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.2897	a2 08		ldx #$08			ldx 	#IFR0
.2899	20 39 30	jsr $3039			jsr 	IFloatPullRx
.289c	60		rts				rts
.289d					NotImplemented:
.289d	4c ad 25	jmp $25ad		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.28a0					WarmStart:
.28a0	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.28a2	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.28a5	a9 6b		lda #$6b			lda 	#"k"
.28a7	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.28aa					WarmStartNewLine:
.28aa	a9 0d		lda #$0d			lda 	#13
.28ac	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.28af					WarmStartNoPrompt:
.28af	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.28b1	9a		txs				txs
.28b2	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.28b5	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.28b7	f0 f1		beq $28aa			beq 	WarmStartNewLine
.28b9	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.28bb	d0 f2		bne $28af			bne 	WarmStartNoPrompt
.28bd	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.28c0	e8		inx				inx 								; skip length byte to make it ASCIIZ
.28c1	d0 01		bne $28c4			bne 	_WSSkip
.28c3	c8		iny				iny
.28c4					_WSSkip:
.28c4	86 26		stx $26				stx 	zTemp2 						; save address
.28c6	84 27		sty $27				sty 	zTemp2+1
.28c8	a2 f5		ldx #$f5			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.28ca	a0 28		ldy #$28			ldy 	#TOKGetCharacter >> 8
.28cc	38		sec				sec
.28cd	20 c4 1f	jsr $1fc4			jsr 	TOKTokenise
.28d0	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.28d3	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.28d6	d0 0b		bne $28e3			bne 	_WSLineEdit
.28d8	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.28da	85 18		sta $18				sta 	codePtr
.28dc	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.28de	85 19		sta $19				sta 	codePtr+1
.28e0	4c d4 14	jmp $14d4			jmp 	RUNNewLine
.28e3					_WSLineEdit:
.28e3	20 9f 1e	jsr $1e9f			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.28e6	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.28e9	c9 04		cmp #$04			cmp 	#4
.28eb	f0 03		beq $28f0			beq 	_WSNoInsert
.28ed	20 e9 1e	jsr $1ee9			jsr 	PGMInsertLine				; if not, maybe insert
.28f0					_WSNoInsert:
.28f0	20 3c 10	jsr $103c			jsr 	ClearCode 					; clear variables etc.
.28f3	80 ba		bra $28af			bra 	WarmStartNoPrompt
.28f5					TOKGetCharacter:
.28f5	b2 26		lda ($26)			lda 	(zTemp2)
.28f7	90 06		bcc $28ff			bcc 	_GSNoIncrement
.28f9	e6 26		inc $26				inc 	zTemp2
.28fb	d0 02		bne $28ff			bne 	_GSNoIncrement
.28fd	e6 27		inc $27				inc 	zTemp2+1
.28ff					_GSNoIncrement:
.28ff	c9 00		cmp #$00			cmp 	#0
.2901	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2902					VARArrayLookup:
.2902	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2904	86 23		stx $23				stx 	zTemp0+1
.2906	b2 22		lda ($22)			lda 	(zTemp0)
.2908	48		pha				pha
.2909	5a		phy				phy
.290a	a0 01		ldy #$01			ldy 	#1
.290c	b1 22		lda ($22),y			lda 	(zTemp0),y
.290e	7a		ply				ply
.290f	48		pha				pha
.2910	20 15 17	jsr $1715			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2913	68		pla				pla 								; array address to zTemp0
.2914	85 23		sta $23				sta 	zTemp0+1
.2916	68		pla				pla
.2917	85 22		sta $22				sta 	zTemp0
.2919	5a		phy				phy 								; save codePtr position.
.291a	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.291c	b1 22		lda ($22),y			lda 	(zTemp0),y
.291e	48		pha				pha 								; save bit 15 on stack.
.291f	29 7f		and #$7f			and 	#$7F
.2921	85 24		sta $24				sta 	zTemp1
.2923	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2925	d2 22		cmp ($22)			cmp 	(zTemp0)
.2927	a5 09		lda $09				lda 	IFR0+IM1
.2929	e5 24		sbc $24				sbc 	zTemp1
.292b	b0 3a		bcs $2967			bcs 	_VALIndex
.292d	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.292f	c9 40		cmp #$40			cmp 	#$40
.2931	b0 34		bcs $2967			bcs 	_VALIndex
.2933	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2935	26 09		rol $09				rol 	IFR0+IM1
.2937	fa		plx				plx 								; get msb of size -> X
.2938	30 04		bmi $293e			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.293a	06 08		asl $08				asl 	IFR0+IM0
.293c	26 09		rol $09				rol 	IFR0+IM1
.293e					_VARNotX4:
.293e	18		clc				clc 								; add the two for the size bytes
.293f	a5 08		lda $08				lda 	IFR0+IM0
.2941	69 02		adc #$02			adc 	#2
.2943	85 08		sta $08				sta 	IFR0+IM0
.2945	90 02		bcc $2949			bcc 	_VARNoCarry1
.2947	e6 09		inc $09				inc 	IFR0+IM1
.2949					_VARNoCarry1:
.2949	18		clc				clc 								; calculate the element address and push to stack.
.294a	a5 08		lda $08				lda 	IFR0+IM0
.294c	65 22		adc $22				adc 	zTemp0
.294e	48		pha				pha
.294f	a5 09		lda $09				lda 	IFR0+IM1
.2951	65 23		adc $23				adc 	zTemp0+1
.2953	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2955	30 04		bmi $295b			bmi 	_VARHasSubLevel
.2957	aa		tax				tax 								; address in XA
.2958	68		pla				pla
.2959	7a		ply				ply 								; restore Y and exit
.295a	60		rts				rts
.295b					_VARHasSubLevel:
.295b	aa		tax				tax 								; get link address in XA
.295c	68		pla				pla
.295d	7a		ply				ply 								; restore code position.
.295e	48		pha				pha
.295f	20 28 27	jsr $2728			jsr 	ERRCheckComma 				; comma required.
.2962	68		pla				pla
.2963	20 02 29	jsr $2902			jsr 	VARArrayLookup 				; call it recursively
.2966	60		rts				rts
.2967					_VALIndex:
.2967	4c 47 26	jmp $2647		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.296a					VARCreate:
.296a	5a		phy				phy
.296b	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.296d	a2 00		ldx #$00			ldx 	#0
.296f	20 59 10	jsr $1059			jsr 	AllocateMemory
.2972	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.2974	86 25		stx $25				stx 	zTemp1+1
.2976	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2978	ad 2a 06	lda $062a			lda 	VARHash
.297b	91 24		sta ($24),y			sta 	(zTemp1),y
.297d	c8		iny				iny 								; put address of name into +3,+4
.297e	ad 28 06	lda $0628			lda 	VARNameAddress
.2981	91 24		sta ($24),y			sta 	(zTemp1),y
.2983	c8		iny				iny
.2984	ad 29 06	lda $0629			lda 	VARNameAddress+1
.2987	91 24		sta ($24),y			sta 	(zTemp1),y
.2989	ad 2b 06	lda $062b			lda 	VARType
.298c	29 01		and #$01			and 	#1
.298e	f0 06		beq $2996			beq 	_CVNotString
.2990	a0 08		ldy #$08			ldy 	#5+3
.2992	a9 80		lda #$80			lda 	#$80
.2994	91 24		sta ($24),y			sta 	(zTemp1),y
.2996					_CVNotString:
.2996	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2999	85 22		sta $22				sta 	zTemp0
.299b	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.299e	85 23		sta $23				sta 	zTemp0+1
.29a0	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.29a2	b2 22		lda ($22)			lda 	(zTemp0)
.29a4	92 24		sta ($24)			sta 	(zTemp1)
.29a6	b1 22		lda ($22),y			lda 	(zTemp0),y
.29a8	91 24		sta ($24),y			sta 	(zTemp1),y
.29aa	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.29ac	92 22		sta ($22)			sta 	(zTemp0)
.29ae	a5 25		lda $25				lda 	zTemp1+1
.29b0	91 22		sta ($22),y			sta 	(zTemp0),y
.29b2	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.29b4	a6 25		ldx $25				ldx 	zTemp1+1
.29b6	18		clc				clc 								; add 5 to point to the data.
.29b7	69 05		adc #$05			adc 	#5
.29b9	90 01		bcc $29bc			bcc 	_VCNoCarry
.29bb	e8		inx				inx
.29bc					_VCNoCarry:
.29bc	7a		ply				ply
.29bd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.29be					VARFind:
.29be	5a		phy				phy
.29bf	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.29c1	b1 22		lda ($22),y			lda 	(zTemp0),y
.29c3	85 25		sta $25				sta 	zTemp1+1
.29c5	f0 1c		beq $29e3			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.29c7	b2 22		lda ($22)			lda 	(zTemp0)
.29c9	85 24		sta $24				sta 	zTemp1
.29cb					_VFLoop:
.29cb	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.29cd	b1 24		lda ($24),y			lda 	(zTemp1),y
.29cf	cd 2a 06	cmp $062a			cmp 	VARHash
.29d2	f0 12		beq $29e6			beq 	_VFHashesMatch 				; if so, check the name.
.29d4					_VFNext:
.29d4	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.29d6	aa		tax				tax
.29d7	a0 01		ldy #$01			ldy 	#1
.29d9	b1 24		lda ($24),y			lda 	(zTemp1),y
.29db	85 25		sta $25				sta 	zTemp1+1
.29dd	86 24		stx $24				stx 	zTemp1
.29df	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.29e1	d0 e8		bne $29cb			bne 	_VFLoop
.29e3					_VFExitFail:
.29e3	7a		ply				ply
.29e4	18		clc				clc
.29e5	60		rts				rts
.29e6					_VFHashesMatch:
.29e6	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.29e8	b1 24		lda ($24),y			lda 	(zTemp1),y
.29ea	85 26		sta $26				sta 	zTemp2
.29ec	c8		iny				iny
.29ed	b1 24		lda ($24),y			lda 	(zTemp1),y
.29ef	85 27		sta $27				sta 	zTemp2+1
.29f1	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.29f3					_VFNameCompLoop:
.29f3	c8		iny				iny 								; char at a time
.29f4	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.29f7	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.29f9	d0 d9		bne $29d4			bne 	_VFNext						; next entry if different.
.29fb	c9 7c		cmp #$7c			cmp 	#$7C
.29fd	90 f4		bcc $29f3			bcc 	_VFNameCompLoop 			; until done the whole lot.
.29ff	18		clc				clc
.2a00	a5 24		lda $24				lda 	zTemp1
.2a02	a6 25		ldx $25				ldx 	zTemp1+1
.2a04	69 05		adc #$05			adc 	#5
.2a06	90 01		bcc $2a09			bcc 	_VFNNoCarry
.2a08	e8		inx				inx
.2a09					_VFNNoCarry:
.2a09	7a		ply				ply
.2a0a	38		sec				sec
.2a0b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2a0c					VARGetInfo:
.2a0c	98		tya				tya 								; calculate the address of the identifier start.
.2a0d	18		clc				clc
.2a0e	65 18		adc $18				adc 	codePtr
.2a10	8d 28 06	sta $0628			sta 	VARNameAddress
.2a13	a5 19		lda $19				lda 	codePtr+1
.2a15	69 00		adc #$00			adc 	#0
.2a17	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2a1a	9c 2a 06	stz $062a			stz 	VARHash
.2a1d	a2 00		ldx #$00			ldx 	#0
.2a1f					_VARCopyName:
.2a1f	18		clc				clc 								; update the sum hash.
.2a20	ad 2a 06	lda $062a			lda 	VARHash
.2a23	71 18		adc ($18),y			adc 	(codePtr),y
.2a25	8d 2a 06	sta $062a			sta 	VARHash
.2a28	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2a2a	c8		iny				iny
.2a2b	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2a2e	e8		inx				inx
.2a2f	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2a31	90 ec		bcc $2a1f			bcc 	_VARCopyName
.2a33	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2a36	29 03		and #$03			and 	#3 							; type is 0-3
.2a38	0a		asl a				asl 	a
.2a39	0a		asl a				asl 	a
.2a3a	85 22		sta $22				sta 	zTemp0
.2a3c	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2a3f	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2a41	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2a43	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2a44	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2a46	85 22		sta $22				sta 	zTemp0
.2a48	8d 4c 06	sta $064c			sta 	VARHashEntry
.2a4b	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2a4d	69 00		adc #$00			adc 	#0
.2a4f	85 23		sta $23				sta 	zTemp0+1
.2a51	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2a54	60		rts				rts
.2a55					VARClearHashTables:
.2a55	a2 00		ldx #$00			ldx 	#0
.2a57					_VCHRLoop:
.2a57	a9 00		lda #$00			lda 	#0
.2a59	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2a5c	e8		inx				inx
.2a5d	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2a5f	d0 f6		bne $2a57			bne 	_VCHRLoop
.2a61	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2a62					VARCheckSimple:
.2a62	aa		tax				tax 								; save in X
.2a63	b1 18		lda ($18),y			lda 	(codePtr),y
.2a65	c9 7c		cmp #$7c			cmp 	#$7C
.2a67	d0 15		bne $2a7e			bne 	_VCSComplex
.2a69	c8		iny				iny 								; consume the second byte, the type.
.2a6a	8a		txa				txa  								; character (40-7F) x 4
.2a6b	0a		asl a				asl 	a
.2a6c	0a		asl a				asl  	a
.2a6d	18		clc				clc
.2a6e	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2a70	85 08		sta $08				sta 	IFR0+IM0
.2a72	a9 06		lda #$06			lda 	#FastVariables >> 8
.2a74	69 00		adc #$00			adc 	#0
.2a76	85 09		sta $09				sta 	IFR0+IM1
.2a78	64 0a		stz $0a				stz 	IFR0+IM2
.2a7a	64 0b		stz $0b				stz 	IFR0+IExp
.2a7c	38		sec				sec 								; it's a reference
.2a7d	60		rts				rts
.2a7e					_VCSComplex:
.2a7e	88		dey				dey	 								; extract information.
.2a7f	20 0c 2a	jsr $2a0c			jsr 	VARGetInfo
.2a82	20 be 29	jsr $29be			jsr 	VARFind 					; search for variable
.2a85	b0 0a		bcs $2a91			bcs 	_VCSHaveVariable
.2a87	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2a8a	29 02		and #$02			and 	#2
.2a8c	d0 25		bne $2ab3			bne 	_VCNoCreate
.2a8e	20 6a 29	jsr $296a			jsr 	VARCreate 					; create variable
.2a91					_VCSHaveVariable:
.2a91	48		pha				pha 								; save LSB on the stack
.2a92	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2a95	6a		ror a				ror 	a
.2a96	6a		ror a				ror 	a
.2a97	68		pla				pla 								; restore LSB
.2a98	90 08		bcc $2aa2			bcc 	_VCSNotArray 				; skip if not an array
.2a9a	20 02 29	jsr $2902			jsr 	VARArrayLookup 				; look for subscripts.
.2a9d	48		pha				pha 								; check )
.2a9e	20 20 27	jsr $2720			jsr 	ERRCheckRParen
.2aa1	68		pla				pla
.2aa2					_VCSNotArray:
.2aa2	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2aa4	85 08		sta $08				sta 	IFR0+IM0
.2aa6	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2aa8	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2aab	6a		ror a				ror 	a
.2aac	a9 00		lda #$00			lda 	#0
.2aae	6a		ror a				ror 	a 							; now $00 or $80
.2aaf	85 0b		sta $0b				sta 	IFR0+IExp
.2ab1	38		sec				sec 								; it's a reference
.2ab2	60		rts				rts
.2ab3					_VCNoCreate:
.2ab3	4c 6d 26	jmp $266d		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2ab6					IFInitialise:
.2ab6	9c de 06	stz $06de			stz 	IFStackIndex 				; reset the internal stack.
.2ab9	60		rts				rts
.2aba					IFloatSubtract:
.2aba	da		phx				phx
.2abb	a2 08		ldx #$08			ldx 	#IFR0
.2abd	20 d4 30	jsr $30d4			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2ac0	fa		plx				plx
.2ac1					IFloatAdd:
.2ac1	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2ac3	05 0b		ora $0b				ora 	IFR0+IExp
.2ac5	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2ac7	d0 4e		bne $2b17			bne 	_IFloatAddDecimals 			; floating point version.
.2ac9					_IFAddSubMantissa:
.2ac9	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2acb	45 0b		eor $0b				eor 	IFR0+IExp
.2acd	29 40		and #$40			and 	#IFSign
.2acf	d0 21		bne $2af2			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2ad1	18		clc				clc 								; do the actual addition
.2ad2	a5 08		lda $08				lda 	IFR0+IM0
.2ad4	75 00		adc $00,x			adc 		IM0,x
.2ad6	85 08		sta $08				sta 	IFR0+IM0
.2ad8	a5 09		lda $09				lda 	IFR0+IM1
.2ada	75 01		adc $01,x			adc 		IM1,x
.2adc	85 09		sta $09				sta 	IFR0+IM1
.2ade	a5 0a		lda $0a				lda 	IFR0+IM2
.2ae0	75 02		adc $02,x			adc 		IM2,x
.2ae2	85 0a		sta $0a				sta 	IFR0+IM2
.2ae4	10 29		bpl $2b0f			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2ae6	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2ae8	20 f8 30	jsr $30f8			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2aeb	20 22 31	jsr $3122			jsr 	IFloatIncExponent
.2aee	d0 1f		bne $2b0f			bne 	_IFloatAddExit
.2af0	38		sec				sec 								; overflowed numerically.
.2af1	60		rts				rts
.2af2					_IFloatSubMantissa:
.2af2	38		sec				sec 								; do the subtraction R0-Rx
.2af3	a5 08		lda $08				lda 	IFR0+IM0
.2af5	f5 00		sbc $00,x			sbc 		IM0,x
.2af7	85 08		sta $08				sta 	IFR0+IM0
.2af9	a5 09		lda $09				lda 	IFR0+IM1
.2afb	f5 01		sbc $01,x			sbc 		IM1,x
.2afd	85 09		sta $09				sta 	IFR0+IM1
.2aff	a5 0a		lda $0a				lda 	IFR0+IM2
.2b01	f5 02		sbc $02,x			sbc 		IM2,x
.2b03	85 0a		sta $0a				sta 	IFR0+IM2
.2b05	b0 08		bcs $2b0f			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2b07	a2 08		ldx #$08			ldx 	#IFR0
.2b09	20 dc 30	jsr $30dc			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2b0c	20 d4 30	jsr $30d4			jsr 	IFloatNegate 				; negate the result using sign bit.
.2b0f					_IFloatAddExit:
.2b0f	18		clc				clc
.2b10	60		rts				rts
.2b11					_IFloatZeroAdd:
.2b11	fa		plx				plx 								; return this value in R0
.2b12	20 5a 30	jsr $305a			jsr 	IFloatCopyFromRegister
.2b15	18		clc				clc
.2b16	60		rts				rts
.2b17					_IFloatAddDecimals:
.2b17	20 c2 30	jsr $30c2			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2b1a	f0 f3		beq $2b0f			beq 	_IFloatAddExit
.2b1c	20 00 31	jsr $3100			jsr 	IFloatNormalise 			; normalise RX
.2b1f	da		phx				phx 								; normalise R0
.2b20	a2 08		ldx #$08			ldx 	#IFR0
.2b22	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero
.2b25	f0 ea		beq $2b11			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2b27	20 00 31	jsr $3100			jsr 	IFloatNormalise
.2b2a	fa		plx				plx
.2b2b	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2b2d	29 3f		and #$3f			and 	#IFXMask
.2b2f	38		sec				sec
.2b30	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2b32	85 20		sta $20				sta 	iTemp0
.2b34	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2b36	29 3f		and #$3f			and 	#IFXMask
.2b38	38		sec				sec
.2b39	e9 20		sbc #$20			sbc 	#$20
.2b3b	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2b3d	b0 02		bcs $2b41			bcs 	_IFloatHaveLarger
.2b3f	a5 20		lda $20				lda 	iTemp0
.2b41					_IFloatHaveLarger:
.2b41	18		clc				clc 								; get the actual one back.
.2b42	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2b44	20 51 2b	jsr $2b51			jsr 	_IFShiftXToA
.2b47	da		phx				phx
.2b48	a2 08		ldx #$08			ldx 	#IFR0
.2b4a	20 51 2b	jsr $2b51			jsr 	_IFShiftXToA
.2b4d	fa		plx				plx
.2b4e	4c c9 2a	jmp $2ac9			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2b51					_IFShiftXToA:
.2b51	8d d6 06	sta $06d6			sta 	IFTarget
.2b54	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero 			; check adding zero ?
.2b57	f0 11		beq $2b6a			beq 	_IFSXExit
.2b59					_IFSXLoop:
.2b59	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2b5b	29 3f		and #$3f			and 	#IFXMask
.2b5d	cd d6 06	cmp $06d6			cmp 	IFTarget
.2b60	f0 08		beq $2b6a			beq 	_IFSXExit
.2b62	20 f8 30	jsr $30f8			jsr 	IFloatShiftRight
.2b65	20 22 31	jsr $3122			jsr 	IFloatIncExponent
.2b68	80 ef		bra $2b59			bra 	_IFSXLoop
.2b6a					_IFSXExit:
.2b6a	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2b6b					IFloatMultiply:
.2b6b	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2b6e	20 23 2c	jsr $2c23			jsr 	IFCalculateNewSign
.2b71	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2b73	05 0b		ora $0b				ora 	IFR0+IExp
.2b75	29 3f		and #$3f			and 	#IFXMask
.2b77	15 01		ora $01,x			ora 	IM1,x
.2b79	05 09		ora $09				ora 	IFR0+IM1
.2b7b	15 02		ora $02,x			ora 	IM2,x
.2b7d	05 0a		ora $0a				ora 	IFR0+IM2
.2b7f	d0 0a		bne $2b8b			bne 	_IFMStandard
.2b81	20 a5 30	jsr $30a5			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2b84	ad d8 06	lda $06d8			lda 	IFNewSign
.2b87	85 0b		sta $0b				sta 	IFR0+IExp
.2b89	18		clc				clc
.2b8a	60		rts				rts
.2b8b					_IFMStandard:
.2b8b	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2b8d	20 1a 2c	jsr $2c1a			jsr 	IFMSignExtend
.2b90	8d d7 06	sta $06d7			sta 	IFNewExponent
.2b93	a5 0b		lda $0b				lda 	IFR0+IExp
.2b95	20 1a 2c	jsr $2c1a			jsr 	IFMSignExtend
.2b98	18		clc				clc
.2b99	6d d7 06	adc $06d7			adc 	IFNewExponent
.2b9c	8d d7 06	sta $06d7			sta 	IFNewExponent
.2b9f	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2ba1	20 6b 30	jsr $306b			jsr 	IFloatCopyToRegister
.2ba4	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2ba6	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.2ba9					_IFMLoop:
.2ba9	a2 14		ldx #$14			ldx 	#IFRTemp
.2bab	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero
.2bae	f0 3a		beq $2bea			beq 	_IFMExit
.2bb0	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2bb3	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2bb5	10 03		bpl $2bba			bpl	 	_IFMTargetOkay
.2bb7	20 0b 2c	jsr $2c0b			jsr 	_IFMShiftAll
.2bba					_IFMTargetOkay:
.2bba	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2bbc	29 01		and #$01			and 	#1
.2bbe	f0 16		beq $2bd6			beq 	_IFMNoAdd
.2bc0	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2bc3	18		clc				clc
.2bc4	a5 08		lda $08				lda 	IFR0+IM0
.2bc6	75 00		adc $00,x			adc 		IM0,x
.2bc8	85 08		sta $08				sta 	IFR0+IM0
.2bca	a5 09		lda $09				lda 	IFR0+IM1
.2bcc	75 01		adc $01,x			adc 		IM1,x
.2bce	85 09		sta $09				sta 	IFR0+IM1
.2bd0	a5 0a		lda $0a				lda 	IFR0+IM2
.2bd2	75 02		adc $02,x			adc 		IM2,x
.2bd4	85 0a		sta $0a				sta 	IFR0+IM2
.2bd6					_IFMNoAdd:
.2bd6	a5 0a		lda $0a				lda 	IFR0+IM2
.2bd8	10 03		bpl $2bdd			bpl 	_IFMResultOkay
.2bda	20 0b 2c	jsr $2c0b			jsr 	_IFMShiftAll
.2bdd					_IFMResultOkay:
.2bdd	a2 14		ldx #$14			ldx 	#IFRTemp
.2bdf	20 f8 30	jsr $30f8			jsr 	IFloatShiftRight
.2be2	ae d6 06	ldx $06d6			ldx 	IFTarget
.2be5	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.2be8	80 bf		bra $2ba9			bra 	_IFMLoop
.2bea					_IFMExit:
.2bea	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2bed	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2bef	90 0f		bcc $2c00			bcc 	_IFMOkay
.2bf1	c9 e0		cmp #$e0			cmp 	#$E0
.2bf3	b0 0b		bcs $2c00			bcs 	_IFMOkay
.2bf5	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2bf7	f0 10		beq $2c09			beq 	_IFMError
.2bf9	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2bfb	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.2bfe	18		clc				clc
.2bff	60		rts				rts
.2c00					_IFMOkay:
.2c00	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2c02	0d d8 06	ora $06d8			ora 	IFNewSign
.2c05	85 0b		sta $0b				sta 	IFR0+IExp
.2c07	18		clc				clc
.2c08	60		rts				rts
.2c09					_IFMError:
.2c09	38		sec				sec
.2c0a	60		rts				rts
.2c0b					_IFMShiftAll:
.2c0b	a2 08		ldx #$08			ldx 	#IFR0
.2c0d	20 f8 30	jsr $30f8			jsr 	IFloatShiftRight
.2c10	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c13	20 f8 30	jsr $30f8			jsr 	IFloatShiftRight
.2c16	ee d7 06	inc $06d7			inc 	IFNewExponent
.2c19	60		rts				rts
.2c1a					IFMSignExtend:
.2c1a	29 3f		and #$3f			and 	#IFXMask
.2c1c	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2c1e	90 02		bcc $2c22			bcc 	_IFMNoSXX
.2c20	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2c22					_IFMNoSXX:
.2c22	60		rts				rts
.2c23					IFCalculateNewSign:
.2c23	b5 03		lda $03,x			lda 	IExp,x
.2c25	45 0b		eor $0b				eor 	IFR0+IExp
.2c27	29 40		and #$40			and 	#IFSign
.2c29	8d d8 06	sta $06d8			sta 	IFNewSign
.2c2c	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2c2d					IFloatDivideInteger:
.2c2d	20 46 2c	jsr $2c46			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2c30	b0 06		bcs $2c38			bcs 	_IFDIExit
.2c32	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2c34	20 5a 30	jsr $305a			jsr 	IFloatCopyFromRegister
.2c37	18		clc				clc
.2c38					_IFDIExit:
.2c38	60		rts				rts
.2c39					IFloatModulusInteger:
.2c39	20 46 2c	jsr $2c46			jsr 	IFloatDivideIntegerCommon
.2c3c	b0 07		bcs $2c45			bcs 	_IFMIExit
.2c3e	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c41	20 5a 30	jsr $305a			jsr 	IFloatCopyFromRegister
.2c44	18		clc				clc
.2c45					_IFMIExit:
.2c45	60		rts				rts
.2c46					IFloatDivideIntegerCommon:
.2c46	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2c49	20 23 2c	jsr $2c23			jsr 	IFCalculateNewSign 			; calculate sign of result
.2c4c	20 74 2c	jsr $2c74			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2c4f	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2c51	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero
.2c54	f0 1c		beq $2c72			beq 	_IFDIDivZero
.2c56	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2c59	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.2c5c	5a		phy				phy
.2c5d	a0 18		ldy #$18			ldy 	#24
.2c5f					_IFDILoop:
.2c5f	20 85 2c	jsr $2c85			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2c62	20 91 2c	jsr $2c91			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2c65	88		dey				dey
.2c66	d0 f7		bne $2c5f			bne 	_IFDILoop 					; do it 24 times
.2c68	7a		ply				ply
.2c69	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2c6c	29 40		and #$40			and 	#IFSign
.2c6e	85 17		sta $17				sta 	IFRTemp+IExp
.2c70	18		clc				clc 								; is okay.
.2c71	60		rts				rts
.2c72					_IFDIDivZero:
.2c72	38		sec				sec
.2c73	60		rts				rts
.2c74					IFDCopyRXToRTemp:
.2c74	b5 00		lda $00,x			lda 	IM0,x
.2c76	85 14		sta $14				sta 	IFRTemp+IM0
.2c78	b5 01		lda $01,x			lda 	IM1,x
.2c7a	85 15		sta $15				sta 	IFRTemp+IM1
.2c7c	b5 02		lda $02,x			lda 	IM2,x
.2c7e	85 16		sta $16				sta 	IFRTemp+IM2
.2c80	b5 03		lda $03,x			lda 	IExp,x
.2c82	85 17		sta $17				sta 	IFRTemp+IExp
.2c84	60		rts				rts
.2c85					IFDShiftSTempS1Left:
.2c85	a2 14		ldx #$14			ldx 	#IFRTemp
.2c87	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft
.2c8a	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c8d	20 f1 30	jsr $30f1			jsr 	IFloatRotateLeft
.2c90	60		rts				rts
.2c91					IFDTrySubtract:
.2c91	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2c94	38		sec				sec 								; subtract, saving the results on the stack.
.2c95	b5 00		lda $00,x			lda 	IM0,x
.2c97	e5 08		sbc $08				sbc 	IFR0+IM0
.2c99	48		pha				pha
.2c9a	b5 01		lda $01,x			lda 	IM1,x
.2c9c	e5 09		sbc $09				sbc 	IFR0+IM1
.2c9e	48		pha				pha
.2c9f	b5 02		lda $02,x			lda 	IM2,x
.2ca1	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2ca3	b0 03		bcs $2ca8			bcs 	_IFDCanSubtract
.2ca5	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2ca6	68		pla				pla
.2ca7	60		rts				rts
.2ca8					_IFDCanSubtract:
.2ca8	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2caa	68		pla				pla
.2cab	95 01		sta $01,x			sta 	IM1,x
.2cad	68		pla				pla
.2cae	95 00		sta $00,x			sta 	IM0,x
.2cb0	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2cb2	d0 06		bne $2cba			bne 	_IFDCSExit
.2cb4	e6 15		inc $15				inc 	IFRTemp+IM1
.2cb6	d0 02		bne $2cba			bne 	_IFDCSExit
.2cb8	e6 16		inc $16				inc 	IFRTemp+IM2
.2cba					_IFDCSExit:
.2cba	60		rts				rts
.2cbb					IFloatBitwiseAnd:
.2cbb	5a		phy				phy
.2cbc	20 00 2d	jsr $2d00			jsr 	IFPreProcessBitwise 		; set up everything.
.2cbf	d0 0f		bne $2cd0			bne 	_IFBAExit
.2cc1					_IFBALoop:
.2cc1	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2cc4	35 00		and $00,x			and 	IM0,x
.2cc6	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2cc9	e8		inx				inx
.2cca	c8		iny				iny
.2ccb	c0 03		cpy #$03			cpy 	#3
.2ccd	d0 f2		bne $2cc1			bne 	_IFBALoop
.2ccf	18		clc				clc
.2cd0					_IFBAExit:
.2cd0	7a		ply				ply
.2cd1	60		rts				rts
.2cd2					IFloatBitwiseOr:
.2cd2	5a		phy				phy
.2cd3	20 00 2d	jsr $2d00			jsr 	IFPreProcessBitwise 		; set up everything.
.2cd6	d0 0f		bne $2ce7			bne 	_IFBAExit
.2cd8					_IFBALoop:
.2cd8	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2cdb	15 00		ora $00,x			ora 	IM0,x
.2cdd	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2ce0	e8		inx				inx
.2ce1	c8		iny				iny
.2ce2	c0 03		cpy #$03			cpy 	#3
.2ce4	d0 f2		bne $2cd8			bne 	_IFBALoop
.2ce6	18		clc				clc
.2ce7					_IFBAExit:
.2ce7	7a		ply				ply
.2ce8	60		rts				rts
.2ce9					IFloatBitwiseXor:
.2ce9	5a		phy				phy
.2cea	20 00 2d	jsr $2d00			jsr 	IFPreProcessBitwise 		; set up everything.
.2ced	d0 0f		bne $2cfe			bne 	_IFBAExit
.2cef					_IFBALoop:
.2cef	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2cf2	55 00		eor $00,x			eor 	IM0,x
.2cf4	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2cf7	e8		inx				inx
.2cf8	c8		iny				iny
.2cf9	c0 03		cpy #$03			cpy 	#3
.2cfb	d0 f2		bne $2cef			bne 	_IFBALoop
.2cfd	18		clc				clc
.2cfe					_IFBAExit:
.2cfe	7a		ply				ply
.2cff	60		rts				rts
.2d00					IFPreProcessBitwise:
.2d00	a0 00		ldy #$00			ldy 	#0 							; set index.
.2d02	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2d04	15 03		ora $03,x			ora 	IExp,x
.2d06	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2d08	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2d0a	38		sec				sec 								; carry set just in cases.
.2d0b	60		rts				rts
.2d0c					IFloatAbsoluteR0:
.2d0c	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2d0e	29 bf		and #$bf			and 	#IFSign ^ 255
.2d10	85 0b		sta $0b				sta 	IFR0+IExp
.2d12	18		clc				clc
.2d13	60		rts				rts
.2d14					IFloatSquareRootR0:
.2d14	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2d16	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero
.2d19	f0 2e		beq $2d49			beq 	_IFSRZero
.2d1b	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2d1d	29 40		and #$40			and 	#IFSign
.2d1f	d0 2f		bne $2d50			bne 	_IFSRFail
.2d21	20 00 31	jsr $3100			jsr 	IFloatNormalise 			; it will work better !
.2d24	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2d26	20 6b 30	jsr $306b			jsr 	IFloatCopyToRegister
.2d29	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2d2b	20 1a 2c	jsr $2c1a			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2d2e	18		clc				clc
.2d2f	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2d31	85 0b		sta $0b				sta 	IFR0+IExp
.2d33	4a		lsr a				lsr 	a 							; which we can halve.
.2d34	38		sec				sec 								; convert back
.2d35	e9 17		sbc #$17			sbc 	#23
.2d37	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2d39	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2d3b	20 52 2d	jsr $2d52			jsr 	_IFSRNewton
.2d3e	20 52 2d	jsr $2d52			jsr 	_IFSRNewton
.2d41	20 52 2d	jsr $2d52			jsr 	_IFSRNewton
.2d44	20 52 2d	jsr $2d52			jsr 	_IFSRNewton
.2d47	18		clc				clc
.2d48	60		rts				rts
.2d49					_IFSRZero:
.2d49	a2 08		ldx #$08			ldx 	#IFR0
.2d4b	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.2d4e	18		clc				clc
.2d4f	60		rts				rts
.2d50					_IFSRFail:
.2d50	38		sec				sec
.2d51	60		rts				rts
.2d52					_IFSRNewton:
.2d52	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2d54	20 18 30	jsr $3018			jsr 	IFloatPushRx
.2d57	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2d59	20 18 30	jsr $3018			jsr 	IFloatPushRx
.2d5c	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2d5e	20 ed 2d	jsr $2ded			jsr 	IFloatDivideFloat
.2d61	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2d63	20 39 30	jsr $3039			jsr 	IFloatPullRx
.2d66	20 c1 2a	jsr $2ac1			jsr 	IFloatAdd 					; now guess + original/guess
.2d69	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2d6b	20 f8 30	jsr $30f8			jsr 	IFloatShiftRight
.2d6e	a2 0c		ldx #$0c			ldx 	#IFR1
.2d70	20 39 30	jsr $3039			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2d73	60		rts				rts
.2d74					IFloatFractionalR0:
.2d74	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2d76	29 3f		and #$3f			and 	#IFXMask
.2d78	f0 17		beq $2d91			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2d7a	20 0c 2d	jsr $2d0c			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2d7d	a2 08		ldx #$08			ldx 	#IFR0
.2d7f	20 00 31	jsr $3100			jsr 	IFloatNormalise 			; normalise R0
.2d82	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2d84	20 6b 30	jsr $306b			jsr 	IFloatCopyToRegister
.2d87	20 ca 2d	jsr $2dca			jsr 	IFloatIntegerR0 			; take integer part of R0
.2d8a	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2d8c	20 ba 2a	jsr $2aba			jsr 	IFloatSubtract
.2d8f	80 05		bra $2d96			bra 	_FIPExit
.2d91					_FIPZero:
.2d91	a2 08		ldx #$08			ldx 	#IFR0
.2d93	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.2d96					_FIPExit:
.2d96	18		clc				clc
.2d97	60		rts				rts
.2d98					IFloatCompare:
.2d98	20 ba 2a	jsr $2aba			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2d9b	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2d9d	05 0b		ora $0b				ora 	IFR0+IExp
.2d9f	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2da1	29 3f		and #$3f			and 	#IFXMask
.2da3	d0 19		bne $2dbe			bne 	_IFCNonInteger
.2da5	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero 			; check if zero
.2da8	f0 0f		beq $2db9			beq 	_IFCZero
.2daa					_IFCReturnSign:
.2daa	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2dac	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2dae	48		pha				pha
.2daf	a9 01		lda #$01			lda 	#1
.2db1	20 cb 30	jsr $30cb			jsr 	IFloatSetByte 				; return to +1
.2db4	68		pla				pla 								; sign bit back
.2db5	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2db7	18		clc				clc
.2db8	60		rts				rts
.2db9					_IFCZero:
.2db9	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.2dbc	18		clc				clc
.2dbd	60		rts				rts
.2dbe					_IFCNonInteger:
.2dbe	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2dc0	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2dc2	05 09		ora $09				ora 	IFR0+IM1
.2dc4	05 0a		ora $0a				ora 	IFR0+IM2
.2dc6	f0 f1		beq $2db9			beq 	_IFCZero 					; near enough !
.2dc8	80 e0		bra $2daa			bra 	_IFCReturnSign 				; return the sign of the difference.
.2dca					IFloatIntegerR0:
.2dca	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2dcc	29 3f		and #$3f			and 	#IFXMask
.2dce	f0 1b		beq $2deb			beq 	_FIPExit 					; if so do nothing
.2dd0	a2 08		ldx #$08			ldx 	#IFR0
.2dd2	20 00 31	jsr $3100			jsr 	IFloatNormalise 			; normalise
.2dd5	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero 			; is it zero ?
.2dd8	f0 0e		beq $2de8			beq 	_FIPZero 					; if so return zero.
.2dda					_FIPShift:
.2dda	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2ddc	29 20		and #$20			and 	#$20 						; still -ve
.2dde	f0 0b		beq $2deb			beq 	_FIPExit
.2de0	20 f8 30	jsr $30f8			jsr 	IFloatShiftRight 			; shift mantissa right
.2de3	20 22 31	jsr $3122			jsr 	IFloatIncExponent 			; bump exponent
.2de6	80 f2		bra $2dda			bra 	_FIPShift
.2de8					_FIPZero:
.2de8	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.2deb					_FIPExit:
.2deb	18		clc				clc
.2dec	60		rts				rts
.2ded					IFloatDivideFloat:
.2ded	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2df0	20 23 2c	jsr $2c23			jsr 	IFCalculateNewSign 			; calculate sign of result
.2df3	20 00 31	jsr $3100			jsr 	IFloatNormalise 			; normalise RX
.2df6	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2df8	20 00 31	jsr $3100			jsr 	IFloatNormalise
.2dfb	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero
.2dfe	f0 56		beq $2e56			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2e00	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2e02	20 1a 2c	jsr $2c1a			jsr 	IFMSignExtend
.2e05	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e08	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2e0b	b5 03		lda $03,x			lda 	IExp,x
.2e0d	20 1a 2c	jsr $2c1a			jsr 	IFMSignExtend
.2e10	38		sec				sec
.2e11	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2e14	38		sec				sec
.2e15	e9 17		sbc #$17			sbc 	#23
.2e17	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e1a	20 58 2e	jsr $2e58			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2e1d	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2e1f	10 08		bpl $2e29			bpl 	_IFDFNoShiftResult
.2e21	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2e23	20 f8 30	jsr $30f8			jsr 	IFloatShiftRight
.2e26	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e29					_IFDFNoShiftResult:
.2e29	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2e2c	30 06		bmi $2e34			bmi 	_IFDFCheckUnderflow
.2e2e	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2e30	b0 24		bcs $2e56			bcs 	_IFDFDivZero
.2e32	80 11		bra $2e45			bra		_IFDFExit
.2e34					_IFDFCheckUnderflow:
.2e34	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2e37	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2e39	b0 0a		bcs $2e45			bcs 	_IFDFExit
.2e3b	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e3e	a2 14		ldx #$14			ldx 	#IFRTemp
.2e40	20 f8 30	jsr $30f8			jsr 	IFloatShiftRight
.2e43	80 ef		bra $2e34			bra 	_IFDFCheckUnderflow
.2e45					_IFDFExit:
.2e45	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2e48	29 3f		and #$3f			and 	#IFXMask
.2e4a	0d d8 06	ora $06d8			ora 	IFNewSign
.2e4d	85 17		sta $17				sta 	IFRTemp+IExp
.2e4f	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2e51	20 5a 30	jsr $305a			jsr 	IFloatCopyFromRegister
.2e54	18		clc				clc
.2e55	60		rts				rts
.2e56					_IFDFDivZero:
.2e56	38		sec				sec
.2e57	60		rts				rts
.2e58					IFloatDivideSupport:
.2e58	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2e5a	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.2e5d	5a		phy				phy 								; main division loop x 23
.2e5e	a0 17		ldy #$17			ldy 	#23
.2e60					_IFDSLoop:
.2e60	20 91 2c	jsr $2c91			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2e63	20 85 2c	jsr $2c85			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2e66	88		dey				dey
.2e67	d0 f7		bne $2e60			bne 	_IFDSLoop 					; do it 24 times
.2e69	7a		ply				ply
.2e6a	60		rts				rts
.2e6b					IFloatIntegerToStringR0:
.2e6b	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2e6e	20 4a 31	jsr $314a			jsr 	IFloatBufferReset			; empty buffer
.2e71	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2e73	29 3f		and #$3f			and 	#IFXMask
.2e75	d0 1d		bne $2e94			bne 	_IFIFail
.2e77	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2e79	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero
.2e7c	f0 0e		beq $2e8c			beq 	_IFINotNegative
.2e7e	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2e80	29 40		and #$40			and 	#IFSign
.2e82	f0 08		beq $2e8c			beq 	_IFINotNegative
.2e84	a9 2d		lda #$2d			lda 	#"-"						; output -
.2e86	20 59 31	jsr $3159			jsr 	IFloatBufferWrite
.2e89	20 d4 30	jsr $30d4			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.2e8c					_IFINotNegative:
.2e8c	20 96 2e	jsr $2e96			jsr 	_IFIRecursiveConvert 		; start converting
.2e8f	20 51 31	jsr $3151			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.2e92	18		clc				clc
.2e93	60		rts				rts
.2e94					_IFIFail:
.2e94	38		sec				sec
.2e95	60		rts				rts
.2e96					_IFIRecursiveConvert:
.2e96	a2 0c		ldx #$0c			ldx 	#IFR1
.2e98	20 6b 30	jsr $306b			jsr 	IFloatCopyToRegister 		; R0->R1
.2e9b	a2 08		ldx #$08			ldx 	#IFR0
.2e9d	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2ea0	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.2ea3	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2ea5	20 2d 2c	jsr $2c2d			jsr 	IFloatDivideInteger
.2ea8	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2eaa	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero
.2ead	f0 09		beq $2eb8			beq 	_IFIOutDigit
.2eaf	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.2eb1	48		pha				pha
.2eb2	20 96 2e	jsr $2e96			jsr 	_IFIRecursiveConvert 		; convert the divide result
.2eb5	68		pla				pla
.2eb6	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2eb8					_IFIOutDigit:
.2eb8	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2eba	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.2ebc	90 02		bcc $2ec0			bcc 	_IFINotHex
.2ebe	69 06		adc #$06			adc 	#6
.2ec0					_IFINotHex:
.2ec0	69 30		adc #$30			adc 	#48
.2ec2	20 59 31	jsr $3159			jsr 	IFloatBufferWrite 			; write character to buffer.
.2ec5	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2ec6					IFloatFloatToStringR0:
.2ec6	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2ec8	20 18 30	jsr $3018			jsr 	IFloatPushRx
.2ecb	20 6b 30	jsr $306b			jsr 	IFloatCopyToRegister
.2ece	20 ca 2d	jsr $2dca			jsr 	IFloatIntegerR0				; make R0 integer
.2ed1	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2ed3	20 6b 2e	jsr $2e6b			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2ed6	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2ed9	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.2edb	29 3f		and #$3f			and 	#IFXMask
.2edd	f0 44		beq $2f23			beq 	_IFFSExit
.2edf					_IFloatFracLoop:
.2edf	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2ee1	20 5a 30	jsr $305a			jsr 	IFloatCopyFromRegister
.2ee4	20 74 2d	jsr $2d74			jsr 	IFloatFractionalR0
.2ee7	20 00 31	jsr $3100			jsr 	IFloatNormalise
.2eea	a2 10		ldx #$10			ldx 	#IFR2
.2eec	20 6b 30	jsr $306b			jsr 	IFloatCopyToRegister 		; copy to back R2
.2eef	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2ef1	a9 0a		lda #$0a			lda 	#10
.2ef3	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.2ef6	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.2ef8	20 6b 2b	jsr $2b6b			jsr 	IFloatMultiply
.2efb	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.2efd	20 6b 30	jsr $306b			jsr 	IFloatCopyToRegister
.2f00	20 ca 2d	jsr $2dca			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.2f03	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 3 dp, no more
.2f06	c9 03		cmp #$03			cmp 	#3
.2f08	f0 16		beq $2f20			beq 	_IFFSExitStripZero
.2f0a	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.2f0d	d0 05		bne $2f14			bne 	_IFloatNotFirst
.2f0f	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2f11	20 59 31	jsr $3159			jsr 	IFloatBufferWrite
.2f14					_IFloatNotFirst:
.2f14	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2f17	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2f19	09 30		ora #$30			ora 	#"0"						; ASCII
.2f1b	20 59 31	jsr $3159			jsr 	IFloatBufferWrite 			; write to the buffer.
.2f1e	80 bf		bra $2edf			bra 	_IFloatFracLoop
.2f20					_IFFSExitStripZero:
.2f20	20 68 31	jsr $3168			jsr 	IFloatStripTrailingZeros
.2f23					_IFFSExit:
.2f23	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2f25	20 39 30	jsr $3039			jsr 	IFloatPullRx
.2f28	20 51 31	jsr $3151			jsr 	IFloatGetBufferAddress
.2f2b	18		clc				clc
.2f2c	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2f2d					IFloatStringToFloatR0:
.2f2d	8d db 06	sta $06db			sta 	IFCount 					; save length and positions out.
.2f30	86 20		stx $20				stx 	iTemp0
.2f32	84 21		sty $21				sty 	iTemp0+1
.2f34	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2f36	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.2f39	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2f3c	20 c9 2f	jsr $2fc9			jsr 	IFSTFGetNext 				; get first
.2f3f	f0 1b		beq $2f5c			beq 	_IFSTFFail 					; no character, fail.
.2f41	90 10		bcc $2f53			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2f43	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2f45	d0 15		bne $2f5c			bne 	_IFSTFFail
.2f47	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2f49	8d dc 06	sta $06dc			sta 	IFSignFlag
.2f4c					_IFSTFLoop:
.2f4c	20 c9 2f	jsr $2fc9			jsr 	IFSTFGetNext 				; get next character
.2f4f	b0 0b		bcs $2f5c			bcs 	_IFSTFFail 					; bad character.
.2f51	f0 11		beq $2f64			beq 	_IFSTFExit 					; end of data
.2f53					_IFSTFHaveChar:
.2f53	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.2f55	f0 08		beq $2f5f			beq 	_IFSTFDecimal
.2f57	20 ed 2f	jsr $2fed			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.2f5a	80 f0		bra $2f4c			bra 	_IFSTFLoop 					; keep going until . or end.
.2f5c					_IFSTFFail:
.2f5c	38		sec				sec
.2f5d	80 0d		bra $2f6c			bra 	_IFSTFReturn
.2f5f					_IFSTFDecimal:
.2f5f	20 74 2f	jsr $2f74			jsr 	IFSTFDecimal 				; call the decimal places code.
.2f62	b0 08		bcs $2f6c			bcs 	_IFSTFReturn 				; error
.2f64					_IFSTFExit:
.2f64	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2f66	0d dc 06	ora $06dc			ora 	IFSignFlag
.2f69	85 0b		sta $0b				sta 	IFR0+IExp
.2f6b	18		clc				clc
.2f6c					_IFSTFReturn:
.2f6c	60		rts				rts
.2f6d					IFloatAddDecimalToR0:
.2f6d	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2f70	86 20		stx $20				stx 	iTemp0
.2f72	84 21		sty $21				sty 	iTemp0+1
.2f74					IFSTFDecimal:
.2f74	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2f76	20 18 30	jsr $3018			jsr 	IFloatPushRx
.2f79	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.2f7b	20 c9 30	jsr $30c9			jsr 	IFloatSetZero
.2f7e	9c dd 06	stz $06dd			stz 	IFDecimalPlaces 			; zero DP.
.2f81					_IFSTDLoop:
.2f81	20 c9 2f	jsr $2fc9			jsr 	IFSTFGetNext 				; get next
.2f84	b0 41		bcs $2fc7			bcs 	_IFSTFFail2 				; bad character.
.2f86	f0 11		beq $2f99			beq 	_IFSTFComplete 				; end of data, work out the result.
.2f88	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2f8a	f0 39		beq $2fc5			beq 	_IFSTFExit2
.2f8c	20 ed 2f	jsr $2fed			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.2f8f	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2f92	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2f95	c9 03		cmp #$03			cmp 	#3
.2f97	90 e8		bcc $2f81			bcc 	_IFSTDLoop
.2f99					_IFSTFComplete:
.2f99	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2f9c	f0 27		beq $2fc5			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2f9e	3a		dec a				dec 	a 							; table indexed from 1.
.2f9f	0a		asl a				asl 	a
.2fa0	0a		asl a				asl 	a
.2fa1	aa		tax				tax
.2fa2	bd 04 30	lda $3004,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2fa5	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2fa7	bd 05 30	lda $3005,x			lda 	TableTen+1,x
.2faa	85 0d		sta $0d				sta  	IFR1+IM1
.2fac	bd 06 30	lda $3006,x			lda 	TableTen+2,x
.2faf	85 0e		sta $0e				sta  	IFR1+IM2
.2fb1	bd 07 30	lda $3007,x			lda 	TableTen+3,x
.2fb4	85 0f		sta $0f				sta  	IFR1+IExp
.2fb6	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2fb8	20 6b 2b	jsr $2b6b			jsr 	IFloatMultiply
.2fbb	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.2fbd	20 39 30	jsr $3039			jsr 	IFloatPullRx
.2fc0	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.2fc2	20 c1 2a	jsr $2ac1			jsr 	IFloatAdd
.2fc5					_IFSTFExit2:
.2fc5	18		clc				clc
.2fc6	60		rts				rts
.2fc7					_IFSTFFail2:
.2fc7	38		sec				sec
.2fc8	60		rts				rts
.2fc9					IFSTFGetNext:
.2fc9	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.2fcc	f0 19		beq $2fe7			beq 	_IFSTFReturnOk
.2fce	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.2fd0	e6 20		inc $20				inc 	iTemp0 						; point at next.
.2fd2	d0 02		bne $2fd6			bne 	_IFSTFGNNoCarry
.2fd4	e6 21		inc $21				inc 	iTemp0+1
.2fd6					_IFSTFGNNoCarry:
.2fd6	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.2fd9	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2fdb	f0 08		beq $2fe5			beq 	_IFSTFGOkay
.2fdd	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2fdf	90 08		bcc $2fe9			bcc 	_IFSTFGFail
.2fe1	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2fe3	b0 04		bcs $2fe9			bcs 	_IFSTFGFail
.2fe5					_IFSTFGOkay:
.2fe5	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2fe7					_IFSTFReturnOk:
.2fe7	18		clc				clc
.2fe8	60		rts				rts
.2fe9					_IFSTFGFail:
.2fe9	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2feb	38		sec				sec
.2fec	60		rts				rts
.2fed					IFSTFAddR0:
.2fed	29 0f		and #$0f			and 	#15 						; to int value
.2fef	48		pha				pha 								; save it.
.2ff0	a9 0a		lda #$0a			lda 	#10
.2ff2	a2 0c		ldx #$0c			ldx 	#IFR1
.2ff4	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.2ff7	20 6b 2b	jsr $2b6b			jsr 	IFloatMultiply
.2ffa	68		pla				pla
.2ffb	a2 0c		ldx #$0c			ldx 	#IFR1
.2ffd	20 cb 30	jsr $30cb			jsr 	IFloatSetByte
.3000	20 c1 2a	jsr $2ac1			jsr 	IFloatAdd
.3003	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.3004					TableTen:
>3004	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3008	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>300c	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3010	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3014	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.3018					IFloatPushRx:
.3018	5a		phy				phy
.3019	ac de 06	ldy $06de			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.301c	b5 00		lda $00,x			lda 	IM0,x
.301e	99 df 06	sta $06df,y			sta 	IFStack,y
.3021	b5 01		lda $01,x			lda 	IM1,x
.3023	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.3026	b5 02		lda $02,x			lda 	IM2,x
.3028	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.302b	b5 03		lda $03,x			lda 	IExp,x
.302d	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.3030	c8		iny				iny
.3031	c8		iny				iny
.3032	c8		iny				iny
.3033	c8		iny				iny
.3034	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.3037	7a		ply				ply
.3038	60		rts				rts
.3039					IFloatPullRx:
.3039	5a		phy				phy
.303a	ac de 06	ldy $06de			ldy 	IFStackIndex	 			; decrement SP
.303d	88		dey				dey
.303e	88		dey				dey
.303f	88		dey				dey
.3040	88		dey				dey
.3041	b9 df 06	lda $06df,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.3044	95 00		sta $00,x			sta 	IM0,x
.3046	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.3049	95 01		sta $01,x			sta 	IM1,x
.304b	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.304e	95 02		sta $02,x			sta 	IM2,x
.3050	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.3053	95 03		sta $03,x			sta 	IExp,x
.3055	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.3058	7a		ply				ply
.3059	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.305a					IFloatCopyFromRegister:
.305a	b5 00		lda $00,x			lda 	0,x
.305c	85 08		sta $08				sta 	IFR0
.305e	b5 01		lda $01,x			lda 	1,x
.3060	85 09		sta $09				sta 	IFR0+1
.3062	b5 02		lda $02,x			lda 	2,x
.3064	85 0a		sta $0a				sta 	IFR0+2
.3066	b5 03		lda $03,x			lda 	3,x
.3068	85 0b		sta $0b				sta 	IFR0+3
.306a	60		rts				rts
.306b					IFloatCopyToRegister:
.306b	a5 08		lda $08				lda 	IFR0
.306d	95 00		sta $00,x			sta 	0,x
.306f	a5 09		lda $09				lda 	IFR0+1
.3071	95 01		sta $01,x			sta 	1,x
.3073	a5 0a		lda $0a				lda 	IFR0+2
.3075	95 02		sta $02,x			sta 	2,x
.3077	a5 0b		lda $0b				lda 	IFR0+3
.3079	95 03		sta $03,x			sta 	3,x
.307b	60		rts				rts
.307c					IFloatLoadInline:
.307c	68		pla				pla 								; pop address off to iTemp0
.307d	85 20		sta $20				sta 	iTemp0
.307f	68		pla				pla
.3080	85 21		sta $21				sta 	iTemp0+1
.3082	a0 01		ldy #$01			ldy 	#1
.3084	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.3086	95 00		sta $00,x			sta 	0,x
.3088	c8		iny				iny
.3089	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.308b	95 01		sta $01,x			sta 	1,x
.308d	c8		iny				iny
.308e	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.3090	95 02		sta $02,x			sta 	2,x
.3092	c8		iny				iny
.3093	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.3095	95 03		sta $03,x			sta 	3,x
.3097	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.3098	a5 20		lda $20				lda 	iTemp0
.309a	69 05		adc #$05			adc 	#5
.309c	85 20		sta $20				sta 	iTemp0
.309e	90 02		bcc $30a2			bcc 	_IFLINoCarry
.30a0	e6 21		inc $21				inc 	iTemp0+1
.30a2					_IFLINoCarry:
.30a2	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.30a5					IFloatMultiply8BitRx:
.30a5	5a		phy		        phy
.30a6	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.30a8	a4 08		ldy $08		        ldy     IFR0+IM0
.30aa	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.30ab	85 08		sta $08		        sta     IFR0+IM0
.30ad	84 09		sty $09		        sty     IFR0+IM1
.30af	a9 00		lda #$00	        lda     #0
.30b1	a0 08		ldy #$08	        ldy     #8
.30b3					_IFMLoop:
.30b3	90 03		bcc $30b8	        bcc     _IFMNoAdd
.30b5	18		clc		        clc
.30b6	65 09		adc $09		        adc     IFR0+IM1
.30b8					_IFMNoAdd:
.30b8	6a		ror a		        ror     a
.30b9	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.30bb	88		dey		        dey
.30bc	d0 f5		bne $30b3	        bne     _IFMLoop
.30be	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.30c0	7a		ply		        ply
.30c1	60		rts		        rts
.30c2					IFloatCheckZero:
.30c2	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.30c4	15 01		ora $01,x			ora 	IM1,x
.30c6	15 02		ora $02,x			ora 	IM2,x
.30c8	60		rts				rts
.30c9					IFloatSetZero:
.30c9	a9 00		lda #$00			lda 	#0
.30cb					IFloatSetByte:
.30cb	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.30cd	74 01		stz $01,x			stz 	IM1,x
.30cf	74 02		stz $02,x			stz 	IM2,x
.30d1	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.30d3	60		rts				rts
.30d4					IFloatNegate:
.30d4	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.30d6	49 40		eor #$40			eor 	#IFSign
.30d8	95 03		sta $03,x			sta 	IExp,x
.30da	18		clc				clc
.30db	60		rts				rts
.30dc					IFloatMantissaNegate:
.30dc	38		sec				sec 								; when you want a real 2's complement negative value.
.30dd	a9 00		lda #$00			lda 	#0
.30df	f5 00		sbc $00,x			sbc 	IM0,x
.30e1	95 00		sta $00,x			sta 	IM0,x
.30e3	a9 00		lda #$00			lda 	#0
.30e5	f5 01		sbc $01,x			sbc 	IM1,x
.30e7	95 01		sta $01,x			sta 	IM1,x
.30e9	a9 00		lda #$00			lda 	#0
.30eb	f5 02		sbc $02,x			sbc 	IM2,x
.30ed	95 02		sta $02,x			sta 	IM2,x
.30ef	60		rts				rts
.30f0					IFloatShiftLeft:
.30f0	18		clc				clc
.30f1					IFloatRotateLeft:
.30f1	36 00		rol $00,x			rol 	IM0,x
.30f3	36 01		rol $01,x			rol 	IM1,x
.30f5	36 02		rol $02,x			rol 	IM2,x
.30f7	60		rts				rts
.30f8					IFloatShiftRight:
.30f8	18		clc				clc
.30f9					IFloatRotateRight:
.30f9	76 02		ror $02,x			ror 	IM2,x
.30fb	76 01		ror $01,x			ror 	IM1,x
.30fd	76 00		ror $00,x			ror 	IM0,x
.30ff	60		rts				rts
.3100					IFloatNormalise:
.3100	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero 			; is it zero
.3103	f0 18		beq $311d			beq 	_IFNExitZero 				; if so exit
.3105					_IFNLoop:
.3105	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3107	29 c0		and #$c0			and 	#$C0
.3109	c9 40		cmp #$40			cmp 	#$40
.310b	f0 13		beq $3120			beq 	_IFNExitOkay 				; if so , then we are done.
.310d	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.310f	29 3f		and #$3f			and 	#$3F
.3111	c9 20		cmp #$20			cmp 	#$20
.3113	f0 0b		beq $3120			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3115	20 36 31	jsr $3136			jsr 	IFloatDecExponent
.3118	20 f0 30	jsr $30f0			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.311b	80 e8		bra $3105			bra 	_IFNLoop
.311d					_IFNExitZero:
.311d	20 c9 30	jsr $30c9			jsr 	IFloatSetZero 				; set the result to zero
.3120					_IFNExitOkay:
.3120	18		clc				clc  								; return with CC.
.3121	60		rts				rts
.3122					IFloatIncExponent:
.3122	b5 03		lda $03,x			lda 	IExp,x
.3124	48		pha				pha
.3125	29 c0		and #$c0			and 	#$C0
.3127	8d 1f 07	sta $071f			sta 	IFXTemp
.312a	68		pla				pla
.312b	1a		inc a				inc 	a
.312c	29 3f		and #$3f			and 	#$3F
.312e	48		pha				pha
.312f	0d 1f 07	ora $071f			ora 	IFXTemp
.3132	95 03		sta $03,x			sta 	IExp,x
.3134	68		pla				pla
.3135	60		rts				rts
.3136					IFloatDecExponent:
.3136	b5 03		lda $03,x			lda 	IExp,x
.3138	48		pha				pha
.3139	29 c0		and #$c0			and 	#$C0
.313b	8d 1f 07	sta $071f			sta 	IFXTemp
.313e	68		pla				pla
.313f	3a		dec a				dec 	a
.3140	29 3f		and #$3f			and 	#$3F
.3142	48		pha				pha
.3143	0d 1f 07	ora $071f			ora 	IFXTemp
.3146	95 03		sta $03,x			sta 	IExp,x
.3148	68		pla				pla
.3149	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.314a					IFloatBufferReset:
.314a	9c 20 07	stz $0720			stz 	IFBufferCount
.314d	9c 21 07	stz $0721			stz 	IFBuffer
.3150	60		rts				rts
.3151					IFloatGetBufferAddress:
.3151	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.3153	a2 21		ldx #$21			ldx 	#(IFBuffer & $FF)
.3155	ad 20 07	lda $0720			lda 	IFBufferCount
.3158	60		rts				rts
.3159					IFloatBufferWrite:
.3159	da		phx				phx
.315a	ae 20 07	ldx $0720			ldx 	IFBufferCount
.315d	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.3160	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.3163	ee 20 07	inc $0720			inc 	IFBufferCount
.3166	fa		plx				plx
.3167	60		rts				rts
.3168					IFloatStripTrailingZeros:
.3168	ae 20 07	ldx $0720			ldx 	IFBufferCount
.316b	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.316e	c9 30		cmp #$30			cmp		#"0"
.3170	d0 0f		bne $3181			bne 	_IFSTExit
.3172	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.3175	c9 2e		cmp #$2e			cmp 	#"."
.3177	f0 08		beq $3181			beq 	_IFSTExit
.3179	ce 20 07	dec $0720			dec 	IFBufferCount
.317c	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.317f	80 e7		bra $3168			bra 	IFloatStripTrailingZeros
.3181					_IFSTExit:
.3181	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.3182					IFloatCheckRange:
.3182	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.3184	09 40		ora #$40			ora 	#IFSign
.3186	85 0b		sta $0b				sta 	IFR0+IExp
.3188	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.318a	20 c1 2a	jsr $2ac1			jsr 	IFloatAdd 					; add allowed to error.
.318d	a2 08		ldx #$08			ldx 	#IFR0
.318f	20 c2 30	jsr $30c2			jsr 	IFloatCheckZero 			; error if < 0
.3192	f0 06		beq $319a			beq 	_IFAOkay
.3194	a5 0b		lda $0b				lda 	IFR0+IExp
.3196	29 40		and #$40			and 	#IFSign
.3198	d0 01		bne $319b			bne 	_IFAFail
.319a					_IFAOkay:
.319a	60		rts				rts
.319b					_IFAFail:
.319b	38		sec				sec
.319c	68		pla				pla 								; get address - 2
.319d	e9 02		sbc #$02			sbc 	#2
.319f	aa		tax				tax
.31a0	68		pla				pla
.31a1	e9 00		sbc #$00			sbc 	#0
.31a3	a8		tay				tay
.31a4	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.31a6					_IFAStop:
>31a6	db						.byte 	$DB 						; display an error AA ADR ADR
.31a7	80 fd		bra $31a6			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
