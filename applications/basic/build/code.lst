
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Mon May 29 08:03:07 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

.1000					boot:
.1000	a2 40		ldx #$40			ldx 	#$40
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 b3 1a	jsr $1ab3			jsr 	PGMSetBaseAddress
.1007	20 44 1e	jsr $1e44			jsr 	IFInitialise
.100a	a2 be		ldx #$be			ldx 	#TokTest & $FF
.100c	a0 1b		ldy #$1b			ldy 	#TokTest >> 8
.100e	18		clc				clc
.100f	20 38 1b	jsr $1b38			jsr 	TOKTokenise
.1012	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF
.1014	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1016	20 54 19	jsr $1954			jsr 	TOKSetDetokeniseOutput
.1019	a2 3a		ldx #$3a			ldx 	#TOKBuffer & $FF
.101b	a0 02		ldy #$02			ldy 	#TOKBuffer >> 8
.101d	20 12 19	jsr $1912			jsr 	TOKDetokenise
>1020	db						.byte 	$DB
.1021	4c b4 10	jmp $10b4			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a7					PR_STANDARD_LAST = $a7
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d7					PR_UNARY_FIRST = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1024					Command_ASSERT:
.1024	20 02 14	jsr $1402			jsr 	EXPEvalNumber
.1027	a2 0c		ldx #$0c			ldx 	#IFR0
.1029	20 52 24	jsr $2452			jsr 	IFloatCheckZero
.102c	f0 01		beq $102f			beq 	_CAFail
.102e	60		rts				rts
.102f					_CAFail:
.102f	4c 52 11	jmp $1152		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1032					Command_CLEAR:
.1032	20 da 1d	jsr $1dda			jsr 	StringSystemInitialise
.1035	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.1036					NoExec01:
.1036					NoExec02:
.1036					NoExec03:
.1036					NoExec04:
.1036					NoExec05:
.1036					NoExec06:
.1036					NoExec07:
.1036	4c 01 11	jmp $1101		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1039					Command_Print:
.1039					Command_IP_Main:
.1039	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.103a					_CPLoop:
.103a	08		php				php 								; save last action flag
.103b	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.103d	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.103f	f0 3e		beq $107f			beq 	_CPExit 					; without consuming
.1041	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1043	f0 3a		beq $107f			beq 	_CPExit
.1045	68		pla				pla 								; throw last action flag
.1046	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1048	c8		iny				iny
.1049	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.104b	f0 2f		beq $107c			beq 	_CPContinueWithSameLine
.104d	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.104f	f0 26		beq $1077			beq 	_CPTab
.1051	88		dey				dey 								; undo the get.
.1052	20 c2 13	jsr $13c2			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1055	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1057	10 14		bpl $106d			bpl 	_CPNumber
.1059	5a		phy				phy
.105a	18		clc				clc 								; string address to YX
.105b	a5 0c		lda $0c				lda 	IFR0+IM0
.105d	aa		tax				tax
.105e	a5 0d		lda $0d				lda 	IFR0+IM1
.1060	a8		tay				tay
.1061	e8		inx				inx 								; point to 1st character
.1062	d0 01		bne $1065			bne 	_CPNoCarry
.1064	c8		iny				iny
.1065					_CPNoCarry:
.1065	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1067	20 88 10	jsr $1088			jsr 	CPPrintAYX 					; print AYX
.106a	7a		ply				ply
.106b	80 cc		bra $1039			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.106d					_CPNumber:
.106d	5a		phy				phy
.106e	20 56 22	jsr $2256			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.1071	20 88 10	jsr $1088			jsr 	CPPrintAYX 					; print AYX
.1074	7a		ply				ply
.1075	80 c2		bra $1039			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1077					_CPTab:
.1077	a9 09		lda #$09			lda 	#9 							; print TAB
.1079	20 9b 10	jsr $109b			jsr 	CPPrintA
.107c					_CPContinueWithSameLine:
.107c	38		sec				sec 								; loop round with carry set, which
.107d	80 bb		bra $103a			bra 	_CPLoop 					; will inhibit final CR
.107f					_CPExit:
.107f	28		plp				plp 								; get last action flag
.1080	b0 05		bcs $1087			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1082	a9 0d		lda #$0d			lda 	#13 						; print new line
.1084	20 9b 10	jsr $109b			jsr 	CPPrintA
.1087					_CPExit2:
.1087	60		rts				rts
.1088					CPPrintAYX:
.1088	86 1e		stx $1e				stx 	zTemp0
.108a	84 1f		sty $1f				sty 	zTemp0+1
.108c	aa		tax				tax
.108d	f0 0b		beq $109a			beq 	_CPPrintExit
.108f	a0 00		ldy #$00			ldy 	#0
.1091					_CPPrintAYXLoop:
.1091	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1093	20 9b 10	jsr $109b			jsr 	CPPrintA
.1096	c8		iny				iny
.1097	ca		dex				dex
.1098	d0 f7		bne $1091			bne 	_CPPrintAYXLoop
.109a					_CPPrintExit:
.109a	60		rts				rts
.109b					CPPrintA:
.109b	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.109e					Command_NEW:
.109e	20 ba 1a	jsr $1aba			jsr 	PGMNewProgram
.10a1	20 32 10	jsr $1032			jsr 	Command_CLEAR
.10a4	4c fb 10	jmp $10fb			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.10a7					Command_REM:
.10a7					Command_REM2:
.10a7	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.10a9	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.10ab	d0 06		bne $10b3			bne 	_CRExit
.10ad	c8		iny				iny 								; skip over it, it's a comment.
.10ae	98		tya				tya
.10af	38		sec				sec
.10b0	71 1c		adc ($1c),y			adc 	(codePtr),y
.10b2	a8		tay				tay
.10b3					_CRExit:
.10b3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.10b4					Command_RUN:
.10b4	20 32 10	jsr $1032			jsr 	Command_CLEAR 				; clear everything out.
.10b7	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.10ba	85 1d		sta $1d				sta 	codePtr+1
.10bc	64 1c		stz $1c				stz 	codePtr
.10be	80 0b		bra $10cb			bra 	RUNNewLine
.10c0					RUNEndOfLine:
.10c0	18		clc				clc 								; advance to next line.
.10c1	b2 1c		lda ($1c)			lda 	(codePtr)
.10c3	65 1c		adc $1c				adc 	codePtr
.10c5	85 1c		sta $1c				sta 	codePtr
.10c7	90 02		bcc $10cb			bcc 	_RELNoCarry
.10c9	e6 1d		inc $1d				inc 	codePtr+1
.10cb					_RELNoCarry:
.10cb					RUNNewLine:
.10cb	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.10cd	9a		txs				txs
.10ce	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.10d0	f0 29		beq $10fb			beq 	Command_END
.10d2	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.10d4					RUNNewCommand:
.10d4	9c 49 04	stz $0449			stz 	stringInitialised 			; reset string system.
.10d7	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.10d9	10 1a		bpl $10f5			bpl		_RUNNotToken 				; probably an identifier
.10db	c8		iny				iny 								; consume token
.10dc	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.10de	f0 f4		beq $10d4			beq 	RUNNewCommand
.10e0	c9 a8		cmp #$a8			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.10e2	b0 0e		bcs $10f2			bcs 	_RUNSyntax
.10e4	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.10e6	90 0a		bcc $10f2			bcc 	_RUNSyntax
.10e8	0a		asl a				asl 	a 							; double into X.
.10e9	aa		tax				tax
.10ea	20 ef 10	jsr $10ef			jsr 	_RUNDispatchMain			; call the main dispatcher
.10ed	80 e5		bra $10d4			bra 	RUNNewCommand
.10ef					_RUNDispatchMain:
.10ef	7c 12 18	jmp ($1812,x)			jmp 	(VectorTable,x)
.10f2					_RUNSyntax:
.10f2	4c 01 11	jmp $1101		jmp	ErrorV_syntax
.10f5					_RUNNotToken:
.10f5	4c 3f 11	jmp $113f		jmp	ErrorV_unimplemented
.10f8					Command_Shift_Handler:
.10f8	4c 3f 11	jmp $113f		jmp	ErrorV_unimplemented
.10fb					Command_END:
.10fb	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.10fe					Command_STOP:
.10fe	4c 9c 11	jmp $119c		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.1101					ErrorV_syntax:
.1101	20 3b 25	jsr $253b		jsr	ErrorHandler
>1104	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>110c	72 72 6f 72 00
.1111					ErrorV_range:
.1111	20 3b 25	jsr $253b		jsr	ErrorHandler
>1114	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>111c	61 6e 67 65 00
.1121					ErrorV_value:
.1121	20 3b 25	jsr $253b		jsr	ErrorHandler
>1124	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>112c	65 00
.112e					ErrorV_type:
.112e	20 3b 25	jsr $253b		jsr	ErrorHandler
>1131	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>1139	6d 61 74 63 68 00
.113f					ErrorV_unimplemented:
.113f	20 3b 25	jsr $253b		jsr	ErrorHandler
>1142	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>114a	65 6d 65 6e 74 65 64 00
.1152					ErrorV_assert:
.1152	20 3b 25	jsr $253b		jsr	ErrorHandler
>1155	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>115d	61 69 6c 00
.1161					ErrorV_internal:
.1161	20 3b 25	jsr $253b		jsr	ErrorHandler
>1164	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>116c	20 45 72 72 6f 72 00
.1173					ErrorV_divzero:
.1173	20 3b 25	jsr $253b		jsr	ErrorHandler
>1176	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>117e	79 20 5a 65 72 6f 00
.1185					ErrorV_structure:
.1185	20 3b 25	jsr $253b		jsr	ErrorHandler
>1188	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>1190	65 20 49 6d 62 61 6c 61 6e 63 65 00
.119c					ErrorV_stop:
.119c	20 3b 25	jsr $253b		jsr	ErrorHandler
>119f	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>11a7	53 74 6f 70 70 65 64 00
.11af					ErrorV_data:
.11af	20 3b 25	jsr $253b		jsr	ErrorHandler
>11b2	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>11ba	61 74 61 00
.11be					ErrorV_redefine:
.11be	20 3b 25	jsr $253b		jsr	ErrorHandler
>11c1	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>11c9	64 65 66 69 6e 65 64 00
.11d1					ErrorV_index:
.11d1	20 3b 25	jsr $253b		jsr	ErrorHandler
>11d4	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>11dc	79 20 49 6e 64 65 78 00
.11e4					ErrorV_memory:
.11e4	20 3b 25	jsr $253b		jsr	ErrorHandler
>11e7	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>11ef	65 6d 6f 72 79 00
.11f5					ErrorV_uninitialised:
.11f5	20 3b 25	jsr $253b		jsr	ErrorHandler
>11f8	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>1200	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.120f					ErrorV_string:
.120f	20 3b 25	jsr $253b		jsr	ErrorHandler
>1212	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>121a	6e 67 20 4c 65 6e 67 74 68 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.1224					ERRCheckLParen:
.1224	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1226	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.1228	d0 18		bne $1242			bne 	ERRSyntaxError
.122a	c8		iny				iny
.122b	60		rts				rts
.122c					ERRCheckRParen:
.122c	b1 1c		lda ($1c),y			lda 	(codePtr),y
.122e	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.1230	d0 10		bne $1242			bne 	ERRSyntaxError
.1232	c8		iny				iny
.1233	60		rts				rts
.1234					ERRCheckComma:
.1234	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1236	c9 99		cmp #$99			cmp 	#PR_COMMA
.1238	d0 08		bne $1242			bne 	ERRSyntaxError
.123a	c8		iny				iny
.123b	60		rts				rts
.123c					ERRCheckA:
.123c	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.123e	d0 02		bne $1242			bne 	ERRSyntaxError
.1240	c8		iny				iny
.1241	60		rts				rts
.1242					ERRSyntaxError:
.1242	4c 01 11	jmp $1101		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1245					EXPBinAdd:
.1245	24 0f		bit $0f				bit 	IFR0+IExp
.1247	30 6f		bmi $12b8			bmi 	EXPConcatenate
.1249	a2 10		ldx #$10			ldx 	#IFR1
.124b	4c 4f 1e	jmp $1e4f			jmp 	IFloatAdd
.124e					EXPBinSub:
.124e	24 0f		bit $0f				bit 	IFR0+IExp
.1250	30 3f		bmi $1291			bmi 	EXPTypeError
.1252	a2 10		ldx #$10			ldx 	#IFR1
.1254	4c 48 1e	jmp $1e48			jmp 	IFloatSubtract
.1257					EXPBinMul:
.1257	24 0f		bit $0f				bit 	IFR0+IExp
.1259	30 36		bmi $1291			bmi 	EXPTypeError
.125b	a2 10		ldx #$10			ldx 	#IFR1
.125d	4c f9 1e	jmp $1ef9			jmp 	IFloatMultiply
.1260					EXPBinFDiv:
.1260	24 0f		bit $0f				bit 	IFR0+IExp
.1262	30 2d		bmi $1291			bmi 	EXPTypeError
.1264	a2 10		ldx #$10			ldx 	#IFR1
.1266	20 7c 21	jsr $217c			jsr 	IFloatDivideFloat
.1269	b0 0f		bcs $127a			bcs 	EXPDZero
.126b	60		rts				rts
.126c					EXPBinIDiv:
.126c	24 0f		bit $0f				bit 	IFR0+IExp
.126e	30 21		bmi $1291			bmi 	EXPTypeError
.1270	a2 10		ldx #$10			ldx 	#IFR1
.1272	20 7c 21	jsr $217c			jsr 	IFloatDivideFloat
.1275	b0 03		bcs $127a			bcs 	EXPDZero
.1277	4c 59 21	jmp $2159			jmp 	IFloatIntegerR0
.127a					EXPDZero:
.127a	4c 73 11	jmp $1173		jmp	ErrorV_divzero
.127d					EXPBinIMod:
.127d	24 0f		bit $0f				bit 	IFR0+IExp
.127f	30 10		bmi $1291			bmi 	EXPTypeError
.1281	a2 10		ldx #$10			ldx 	#IFR1
.1283	5a		phy				phy
.1284	20 91 20	jsr $2091			jsr 	IFPreProcessBitwise 		; set up everything.
.1287	d0 05		bne $128e			bne 	EXPDRange
.1289	20 ca 1f	jsr $1fca			jsr 	IFloatModulusInteger
.128c	7a		ply				ply
.128d	60		rts				rts
.128e					EXPDRange:
.128e	4c 11 11	jmp $1111		jmp	ErrorV_range
.1291					EXPTypeError:
.1291	4c 2e 11	jmp $112e		jmp	ErrorV_type
.1294					EXPBinAnd:
.1294	24 0f		bit $0f				bit 	IFR0+IExp
.1296	30 f9		bmi $1291			bmi 	EXPTypeError
.1298	a2 10		ldx #$10			ldx 	#IFR1
.129a	20 4c 20	jsr $204c			jsr 	IFloatBitwiseAnd
.129d	b0 ef		bcs $128e			bcs 	EXPDRange
.129f	60		rts				rts
.12a0					EXPBinOr:
.12a0	24 0f		bit $0f				bit 	IFR0+IExp
.12a2	30 ed		bmi $1291			bmi 	EXPTypeError
.12a4	a2 10		ldx #$10			ldx 	#IFR1
.12a6	20 63 20	jsr $2063			jsr 	IFloatBitwiseOr
.12a9	b0 e3		bcs $128e			bcs 	EXPDRange
.12ab	60		rts				rts
.12ac					EXPBinXor:
.12ac	24 0f		bit $0f				bit 	IFR0+IExp
.12ae	30 e1		bmi $1291			bmi 	EXPTypeError
.12b0	a2 10		ldx #$10			ldx 	#IFR1
.12b2	20 7a 20	jsr $207a			jsr 	IFloatBitwiseXor
.12b5	b0 d7		bcs $128e			bcs 	EXPDRange
.12b7	60		rts				rts
.12b8					EXPConcatenate:
.12b8	18		clc				clc
.12b9	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.12bb	72 10		adc ($10)			adc 	(IFR1)
.12bd	b0 2d		bcs $12ec			bcs 	_EXPCError
.12bf	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.12c1	da		phx				phx
.12c2	a6 0d		ldx $0d				ldx 	IFR0+1
.12c4	da		phx				phx
.12c5	20 02 1e	jsr $1e02			jsr 	StringTempAllocate 			; allocate string, set up return
.12c8	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.12ca	a5 10		lda $10				lda 	IFR1
.12cc	20 d5 12	jsr $12d5			jsr 	_EXPCCopyXA
.12cf	fa		plx				plx 								; copy second string
.12d0	68		pla				pla
.12d1	20 d5 12	jsr $12d5			jsr 	_EXPCCopyXA
.12d4	60		rts				rts
.12d5					_EXPCCopyXA:
.12d5	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.12d7	85 1e		sta $1e				sta 	zTemp0
.12d9	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.12db	f0 0e		beq $12eb			beq 	_EXPCCExit 					; nothing.
.12dd	aa		tax				tax 								; count
.12de	5a		phy				phy 								; start positioin
.12df	a0 01		ldy #$01			ldy 	#1
.12e1					_EXPCCLoop:
.12e1	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.12e3	20 37 1e	jsr $1e37			jsr 	StringTempWrite
.12e6	c8		iny				iny
.12e7	ca		dex				dex
.12e8	d0 f7		bne $12e1			bne 	_EXPCCLoop
.12ea	7a		ply				ply
.12eb					_EXPCCExit:
.12eb	60		rts				rts
.12ec					_EXPCError:
.12ec	4c 0f 12	jmp $120f		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.12ef					EXPReturnTrue:
.12ef	a2 0c		ldx #$0c			ldx 	#IFR0
.12f1	a9 01		lda #$01			lda 	#1
.12f3	20 5b 24	jsr $245b			jsr 	IFloatSetByte
.12f6	20 64 24	jsr $2464			jsr 	IFloatNegate
.12f9	60		rts				rts
.12fa					EXPReturnFalse:
.12fa	a2 0c		ldx #$0c			ldx 	#IFR0
.12fc	4c 59 24	jmp $2459			jmp 	IFloatSetZero
.12ff					EXPCompareEqual:
.12ff	20 35 13	jsr $1335			jsr 	EXPCompareBaseCode
.1302	c9 00		cmp #$00			cmp 	#0
.1304	f0 e9		beq $12ef			beq 	EXPReturnTrue
.1306	80 f2		bra $12fa			bra 	EXPReturnFalse
.1308					EXPCompareLess:
.1308	20 35 13	jsr $1335			jsr 	EXPCompareBaseCode
.130b	c9 ff		cmp #$ff			cmp 	#$FF
.130d	f0 e0		beq $12ef			beq 	EXPReturnTrue
.130f	80 e9		bra $12fa			bra 	EXPReturnFalse
.1311					EXPCompareGreater:
.1311	20 35 13	jsr $1335			jsr 	EXPCompareBaseCode
.1314	c9 01		cmp #$01			cmp 	#1
.1316	f0 d7		beq $12ef			beq 	EXPReturnTrue
.1318	80 e0		bra $12fa			bra 	EXPReturnFalse
.131a					EXPCompareNotEqual:
.131a	20 35 13	jsr $1335			jsr 	EXPCompareBaseCode
.131d	c9 00		cmp #$00			cmp 	#0
.131f	d0 ce		bne $12ef			bne 	EXPReturnTrue
.1321	80 d7		bra $12fa			bra 	EXPReturnFalse
.1323					EXPCompareLessEqual:
.1323	20 35 13	jsr $1335			jsr 	EXPCompareBaseCode
.1326	c9 01		cmp #$01			cmp 	#1
.1328	d0 c5		bne $12ef			bne 	EXPReturnTrue
.132a	80 ce		bra $12fa			bra 	EXPReturnFalse
.132c					EXPCompareGreaterEqual:
.132c	20 35 13	jsr $1335			jsr 	EXPCompareBaseCode
.132f	c9 ff		cmp #$ff			cmp 	#$FF
.1331	d0 bc		bne $12ef			bne 	EXPReturnTrue
.1333	80 c5		bra $12fa			bra 	EXPReturnFalse
.1335					EXPCompareBaseCode:
.1335	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.1337	30 10		bmi $1349			bmi 	_EXCBCString
.1339	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.133b	20 27 21	jsr $2127			jsr 	IFloatCompare
.133e	a5 0c		lda $0c				lda 	IFR0+IM0
.1340	f0 06		beq $1348			beq 	_EXCBCExit 					; return 0 if zero
.1342	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.1344	50 02		bvc $1348			bvc 	_EXCBCExit
.1346	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1348					_EXCBCExit:
.1348	60		rts				rts
.1349					_EXCBCString:
.1349	5a		phy				phy
.134a	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.134c	d2 10		cmp ($10)			cmp 	(IFR1)
.134e	90 02		bcc $1352			bcc 	_EXCBCSmaller
.1350	b2 10		lda ($10)			lda 	(IFR1)
.1352					_EXCBCSmaller:
.1352	aa		tax				tax
.1353	f0 0d		beq $1362			beq 	_EXCBCMatches 				; if zero common length matches
.1355	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1357					_EXCBCCheckSmallerMatches:
.1357	c8		iny				iny 								; compare directly as far as common length
.1358	38		sec				sec
.1359	b1 10		lda ($10),y			lda 	(IFR1),y
.135b	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.135d	d0 08		bne $1367			bne 	_EXCBCExit2
.135f	ca		dex				dex
.1360	d0 f5		bne $1357			bne 	_EXCBCCheckSmallerMatches
.1362					_EXCBCMatches:
.1362	38		sec				sec
.1363	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.1365	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1367					_EXCBCExit2:
.1367	7a		ply				ply
.1368	c9 00		cmp #$00			cmp 	#0
.136a	f0 04		beq $1370			beq 	_EXCBCReturn
.136c	30 03		bmi $1371			bmi 	_EXCBCFF
.136e	a9 01		lda #$01			lda 	#1
.1370					_EXCBCReturn:
.1370	60		rts				rts
.1371					_EXCBCFF:
.1371	a9 ff		lda #$ff			lda 	#$FF
.1373	60		rts				rts
.1374					_EXCBCRange:
.1374	4c 11 11	jmp $1111		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1377					EXPBinLeft:
.1377	a9 ff		lda #$ff			lda 	#$FF
.1379	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.137c	4c 82 13	jmp $1382			jmp 	EXPShiftCommon
.137f					EXPBinRight:
.137f	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.1382					EXPShiftCommon:
.1382	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.1384	05 13		ora $13				ora 	IFR1+IExp
.1386	29 7f		and #$7f			and 	#$7F
.1388	d0 35		bne $13bf			bne 	_EXPSRange
.138a	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.138c	29 e0		and #$e0			and 	#$E0
.138e	05 0d		ora $0d				ora 	IFR0+IM1
.1390	05 0e		ora $0e				ora 	IFR0+IM2
.1392	d0 25		bne $13b9			bne 	_EXPSShiftZero 				; if so return zero
.1394	5a		phy				phy
.1395	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1397	29 1f		and #$1f			and 	#$1F
.1399	f0 17		beq $13b2			beq 	_EXPSExit 					; exit if zero
.139b	a8		tay				tay
.139c					_EXPSLoop:
.139c	a2 10		ldx #$10			ldx 	#IFR1
.139e	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.13a1	30 05		bmi $13a8			bmi 	_EXPSShiftLeft
.13a3	20 88 24	jsr $2488			jsr 	IFloatShiftRight
.13a6	80 07		bra $13af			bra 	_EXPSContinue
.13a8					_EXPSShiftLeft:
.13a8	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.13ab	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.13ad	30 10		bmi $13bf			bmi 	_EXPSRange
.13af					_EXPSContinue:
.13af	88		dey				dey
.13b0	d0 ea		bne $139c			bne 	_EXPSLoop
.13b2					_EXPSExit:
.13b2	a2 10		ldx #$10			ldx 	#IFR1
.13b4	20 ea 23	jsr $23ea			jsr 	IFloatCopyFromRegister
.13b7	7a		ply				ply
.13b8	60		rts				rts
.13b9					_EXPSShiftZero:
.13b9	a2 0c		ldx #$0c			ldx 	#IFR0
.13bb	20 59 24	jsr $2459			jsr 	IFloatSetZero
.13be	60		rts				rts
.13bf					_EXPSRange:
.13bf	4c 11 11	jmp $1111		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.13c2					EXPEvaluateExpression:
.13c2	a9 00		lda #$00			lda 	#0 							; current precedence
.13c4					EXPEvaluateExpressionPrecedenceA:
.13c4	48		pha				pha
.13c5	20 3f 14	jsr $143f			jsr 	EXPTermValueR0				; do first term.
.13c8					_EELoop:
.13c8	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.13ca	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.13cc	90 31		bcc $13ff			bcc 	_EEExit
.13ce	aa		tax				tax 								; access the precedence of the operator.
.13cf	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.13d0	dd 88 15	cmp $1588,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.13d3	b0 2b		bcs $1400			bcs 	_EEExit2
.13d5	48		pha				pha 								; save current precedence.
.13d6	da		phx				phx 								; save operator
.13d7	c8		iny				iny 								; consume operator
.13d8	da		phx				phx
.13d9	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.13db	20 a8 23	jsr $23a8			jsr 	IFloatPushRx
.13de	fa		plx				plx
.13df	bd 88 15	lda $1588,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.13e2	20 c4 13	jsr $13c4			jsr 	EXPEvaluateExpressionPrecedenceA
.13e5	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.13e7	20 c9 23	jsr $23c9			jsr 	IFloatPullRx
.13ea	fa		plx				plx 								; operator
.13eb	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.13ed	45 13		eor $13				eor 	IFR1+IExp
.13ef	30 08		bmi $13f9			bmi 	_EEType
.13f1					_EETypeOkay:
.13f1	8a		txa				txa
.13f2	0a		asl a				asl 	a 							; double -> X
.13f3	aa		tax				tax
.13f4	20 fc 13	jsr $13fc			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.13f7	80 cf		bra $13c8			bra 	_EELoop
.13f9					_EEType:
.13f9	4c 2e 11	jmp $112e		jmp	ErrorV_type
.13fc					_EECallBinary:
.13fc	7c 12 18	jmp ($1812,x)			jmp 	(VectorTable,x)
.13ff					_EEExit:
.13ff	68		pla				pla 								; throw precedence
.1400					_EEExit2:
.1400	18		clc				clc
.1401	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1402					EXPEvalNumber:
.1402	20 c2 13	jsr $13c2			jsr 	EXPEvaluateExpression
.1405	24 0f		bit $0f				bit 	IFR0+IExp
.1407	30 01		bmi $140a			bmi 	EVUType
.1409	60		rts				rts
.140a					EVUType:
.140a	4c 2e 11	jmp $112e		jmp	ErrorV_type
.140d					EXPEvalInteger:
.140d	20 02 14	jsr $1402			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1410	20 59 21	jsr $2159			jsr 	IFloatIntegerR0
.1413	60		rts				rts
.1414					EXPEvalInteger16:
.1414	20 0d 14	jsr $140d			jsr 	EXPEvalInteger
.1417	a5 0e		lda $0e				lda 	IFR0+IM2
.1419	d0 21		bne $143c			bne 	EVURange
.141b	a6 0d		ldx $0d				ldx 	IFR0+IM1
.141d	a5 0c		lda $0c				lda 	IFR0+IM0
.141f	60		rts				rts
.1420					EXPEvalInteger8:
.1420	20 0d 14	jsr $140d			jsr 	EXPEvalInteger
.1423	a5 0e		lda $0e				lda 	IFR0+IM2
.1425	05 0d		ora $0d				ora 	IFR0+IM1
.1427	d0 13		bne $143c			bne 	EVURange
.1429	a5 0c		lda $0c				lda 	IFR0+IM0
.142b	60		rts				rts
.142c					EXPEvalString:
.142c	20 c2 13	jsr $13c2			jsr 	EXPEvaluateExpression
.142f	24 0f		bit $0f				bit 	IFR0+IExp
.1431	10 d7		bpl $140a			bpl 	EVUType
.1433	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1435	86 1f		stx $1f				stx 	zTemp0+1
.1437	a5 0c		lda $0c				lda 	IFR0+IM0
.1439	85 1e		sta $1e				sta 	zTemp0
.143b	60		rts				rts
.143c					EVURange:
.143c	4c 11 11	jmp $1111		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.143f					EXPTermValueR0:
.143f	20 48 14	jsr $1448			jsr 	EXPTermR0
.1442	90 03		bcc $1447			bcc 	_ETVNotReference
.1444	4c 3f 11	jmp $113f		jmp	ErrorV_unimplemented
.1447					_ETVNotReference:
.1447	60		rts				rts
.1448					EXPTermR0:
.1448	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.144a	30 3f		bmi $148b			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.144c	c8		iny				iny 								; consume element
.144d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.144f	b0 37		bcs $1488			bcs 	_ETMIdentifier
.1451	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.1453	64 0f		stz $0f				stz 	IFR0+IExp
.1455	64 0d		stz $0d				stz 	IFR0+IM1
.1457	64 0e		stz $0e				stz 	IFR0+IM2
.1459					_ETMConstant:
.1459	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.145b	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.145d	b0 24		bcs $1483			bcs 	_ETMCExit 					; no.
.145f	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1461	a5 0d		lda $0d				lda 	IFR0+IM1
.1463	85 0e		sta $0e				sta 	IFR0+IM2
.1465	a5 0c		lda $0c				lda 	IFR0+IM0
.1467	85 0d		sta $0d				sta 	IFR0+IM1
.1469	64 0c		stz $0c				stz 	IFR0+IM0
.146b	8a		txa				txa
.146c	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.146d	66 0e		ror $0e				ror 	IFR0+IM2
.146f	66 0d		ror $0d				ror 	IFR0+IM1
.1471	66 0c		ror $0c				ror 	IFR0+IM0
.1473	4a		lsr a				lsr 	a
.1474	66 0e		ror $0e				ror 	IFR0+IM2
.1476	66 0d		ror $0d				ror 	IFR0+IM1
.1478	66 0c		ror $0c				ror 	IFR0+IM0
.147a	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.147c	11 1c		ora ($1c),y			ora 	(codePtr),y
.147e	85 0c		sta $0c				sta 	IFR0+IM0
.1480	c8		iny				iny 								; consume, loop back
.1481	80 d6		bra $1459			bra 	_ETMConstant
.1483					_ETMCExit:
.1483	20 af 14	jsr $14af			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1486	18		clc				clc 								; return value
.1487	60		rts				rts
.1488					_ETMIdentifier:
.1488	4c 3f 11	jmp $113f		jmp	ErrorV_unimplemented
.148b					_ETMIsUnaryOrMinus:
.148b	c8		iny				iny 								; consume element
.148c	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.148e	d0 0a		bne $149a			bne 	_ETMCheckUnary
.1490	20 3f 14	jsr $143f			jsr 	EXPTermValueR0 				; get a term to negate
.1493	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1495	20 64 24	jsr $2464			jsr 	IFloatNegate
.1498	18		clc				clc
.1499	60		rts				rts
.149a					_ETMCheckUnary:
.149a	c9 d7		cmp #$d7			cmp 	#PR_UNARY_FIRST 			; check unary function.
.149c	90 0e		bcc $14ac			bcc 	_ETMUnarySyntax
.149e	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.14a0	b0 0a		bcs $14ac			bcs 	_ETMUnarySyntax
.14a2	0a		asl a				asl 	a
.14a3	aa		tax				tax
.14a4	20 a9 14	jsr $14a9			jsr 	_ETMCallUnaryFunction
.14a7	18		clc				clc
.14a8	60		rts				rts
.14a9					_ETMCallUnaryFunction:
.14a9	7c 12 18	jmp ($1812,x)			jmp 	(VectorTable,x)
.14ac					_ETMUnarySyntax:
.14ac	4c 01 11	jmp $1101		jmp	ErrorV_syntax
.14af					EXPCheckDecimalFollows:
.14af	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.14b1	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.14b3	d0 19		bne $14ce			bne 	_ETMCDExit
.14b5	c8		iny				iny 								; consume token.
.14b6	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.14b8	5a		phy				phy									; save current position
.14b9	48		pha				pha 								; save count of chars.
.14ba	38		sec				sec 								; address into YX : y + codePtr+1
.14bb	98		tya				tya
.14bc	65 1c		adc $1c				adc 	codePtr
.14be	aa		tax				tax
.14bf	a5 1d		lda $1d				lda 	codePtr+1
.14c1	69 00		adc #$00			adc 	#0
.14c3	a8		tay				tay
.14c4	68		pla				pla 								; get count.
.14c5	20 fd 22	jsr $22fd			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.14c8	7a		ply				ply 								; go to next token.
.14c9	98		tya				tya
.14ca	38		sec				sec
.14cb	71 1c		adc ($1c),y			adc 	(codePtr),y
.14cd	a8		tay				tay
.14ce					_ETMCDExit:
.14ce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.14cf					EXPUnaryAbs:
.14cf	20 02 14	jsr $1402			jsr 	EXPEvalNumber 					; number to R0
.14d2	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.14d5	20 9d 20	jsr $209d			jsr 	IFloatAbsoluteR0
.14d8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.14d9					EXPUnaryAsc:
.14d9	20 2c 14	jsr $142c			jsr 	EXPEvalString 					; string to R0, zTemp0
.14dc	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.14df	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.14e1	f0 06		beq $14e9			beq 	_EXAZero 						; if so return 0
.14e3	5a		phy				phy 									; otherwise get first character
.14e4	a0 01		ldy #$01			ldy 	#1
.14e6	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.14e8	7a		ply				ply
.14e9					_EXAZero:
.14e9	a2 0c		ldx #$0c			ldx 	#IFR0
.14eb	20 5b 24	jsr $245b			jsr 	IFloatSetByte
.14ee	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.14ef					EXPUnaryChr:
.14ef	20 20 14	jsr $1420			jsr 	EXPEvalInteger8 				; expr
.14f2	48		pha				pha 									; push on stack
.14f3	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.14f6	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.14f8	20 02 1e	jsr $1e02			jsr 	StringTempAllocate
.14fb	68		pla				pla
.14fc	20 37 1e	jsr $1e37			jsr 	StringTempWrite
.14ff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1500					EXPUnaryDec:
.1500	20 2c 14	jsr $142c			jsr 	EXPEvalString 					; string to R0, zTemp0
.1503	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.1506	5a		phy				phy
.1507	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.1509	20 59 24	jsr $2459			jsr 	IFloatSetZero
.150c	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.150e	f0 3b		beq $154b			beq 	_EUDError 						; empty string
.1510	aa		tax				tax
.1511	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1513					_EUDLoop:
.1513	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1515	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1517	90 02		bcc $151b			bcc 	_EUDNoCase
.1519	e9 20		sbc #$20			sbc 	#$20
.151b					_EUDNoCase:
.151b	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.151d	90 2c		bcc $154b			bcc 	_EUDError
.151f	c9 3a		cmp #$3a			cmp 	#'9'+1
.1521	90 0a		bcc $152d			bcc 	_EUDOkay
.1523	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1525	90 24		bcc $154b			bcc 	_EUDError
.1527	c9 47		cmp #$47			cmp 	#'F'+1
.1529	b0 20		bcs $154b			bcs 	_EUDError
.152b	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.152d					_EUDOkay:
.152d	29 0f		and #$0f			and 	#15 							; make constant
.152f	da		phx				phx
.1530	48		pha				pha
.1531	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1533	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.1536	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.1539	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.153c	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.153f	68		pla				pla 									; pop constant and OR in
.1540	fa		plx				plx
.1541	05 0c		ora $0c				ora 	IFR0+IM0
.1543	85 0c		sta $0c				sta 	IFR0+IM0
.1545	c8		iny				iny 									; next
.1546	ca		dex				dex
.1547	d0 ca		bne $1513			bne 	_EUDLoop
.1549	7a		ply				ply
.154a	60		rts				rts
.154b					_EUDError:
.154b	4c 21 11	jmp $1121		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.154e					EXPUnaryInlineDec:
.154e	4c 01 11	jmp $1101		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1551					EXPUnaryNull:
.1551	20 3f 14	jsr $143f			jsr 	EXPTermValueR0
.1554	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.1555					EXPUnaryFrac:
.1555	20 02 14	jsr $1402			jsr 	EXPEvalNumber 					; number to R0
.1558	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.155b	20 03 21	jsr $2103			jsr 	IFloatFractionalR0
.155e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.155f					EXPUnaryInt:
.155f	20 02 14	jsr $1402			jsr 	EXPEvalNumber 					; number to R0
.1562	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.1565	20 59 21	jsr $2159			jsr 	IFloatIntegerR0
.1568	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1569					EXPUnaryLen:
.1569	20 2c 14	jsr $142c			jsr 	EXPEvalString 					; string to R0, zTemp0
.156c	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.156f	b2 1e		lda ($1e)			lda 	(zTemp0)
.1571	a2 0c		ldx #$0c			ldx 	#IFR0
.1573	20 5b 24	jsr $245b			jsr 	IFloatSetByte
.1576	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1577					EXPUnaryParenthesis:
.1577	20 02 14	jsr $1402			jsr 	EXPEvalNumber 					; number to R0
.157a	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.157d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.157e					EXPUnaryRnd:
.157e	20 02 14	jsr $1402			jsr 	EXPEvalNumber 				; number to R0
.1581	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 				; )
.1584	a2 0c		ldx #$0c			ldx 	#IFR0
.1586	20 9d 15	jsr $159d			jsr 	EXPLoadInRandom
.1589	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.158b	85 0f		sta $0f				sta 	IFR0+IExp
.158d	60		rts				rts
.158e					ExpUnaryRand:
.158e	20 0d 14	jsr $140d			jsr 	EXPEvalInteger 				; integer to R0
.1591	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 				; )
.1594	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.1596	20 9d 15	jsr $159d			jsr 	EXPLoadInRandom
.1599	20 ca 1f	jsr $1fca			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.159c	60		rts				rts
.159d					EXPLoadInRandom:
.159d	20 59 24	jsr $2459			jsr 	IFloatSetZero
.15a0	20 b2 15	jsr $15b2			jsr 	EXPRandom32
.15a3	95 00		sta $00,x			sta 	IM0,x
.15a5	20 b2 15	jsr $15b2			jsr 	EXPRandom32
.15a8	95 01		sta $01,x			sta 	IM1,x
.15aa	20 b2 15	jsr $15b2			jsr 	EXPRandom32
.15ad	29 7f		and #$7f			and 	#$7F
.15af	95 02		sta $02,x			sta 	IM2,x
.15b1	60		rts				rts
.15b2					EXPRandom32:
.15b2	5a		phy				phy
.15b3	a0 08		ldy #$08			ldy 	#8
.15b5	ad 3c 03	lda $033c			lda 	EXPSeed+0
.15b8	0d 3d 03	ora $033d			ora 	EXPSeed+1
.15bb	0d 3e 03	ora $033e			ora 	EXPSeed+2
.15be	0d 3f 03	ora $033f			ora 	EXPSeed+3
.15c1	d0 08		bne $15cb			bne 	_EXPRNoReset
.15c3	ee 3c 03	inc $033c			inc 	EXPSeed+0
.15c6	a0 10		ldy #$10			ldy 	#16
.15c8	8c 3f 03	sty $033f			sty 	EXPSeed+3
.15cb					_EXPRNoReset:
.15cb	ad 3c 03	lda $033c			lda 	EXPSeed+0
.15ce					_EXPRLoop:
.15ce	0a		asl a				asl		a
.15cf	2e 3d 03	rol $033d			rol 	EXPSeed+1
.15d2	2e 3e 03	rol $033e			rol 	EXPSeed+2
.15d5	2e 3f 03	rol $033f			rol 	EXPSeed+3
.15d8	90 02		bcc $15dc			bcc 	_EXPRNoEOR
.15da	49 c5		eor #$c5			eor 	#$C5
.15dc					_EXPRNoEOR:
.15dc	88		dey				dey
.15dd	d0 ef		bne $15ce			bne 	_EXPRLoop
.15df	8d 3c 03	sta $033c			sta 	EXPSeed+0
.15e2	7a		ply				ply
.15e3	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.15e4					EXPUnarySgn:
.15e4	20 02 14	jsr $1402			jsr 	EXPEvalNumber 					; number to R0
.15e7	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.15ea	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.15ec	20 fb 23	jsr $23fb			jsr 	IFloatCopyToRegister
.15ef	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.15f1	20 59 24	jsr $2459			jsr 	IFloatSetZero
.15f4	a2 10		ldx #$10			ldx 	#IFR1
.15f6	20 27 21	jsr $2127			jsr 	IFloatCompare 					; compare R1 vs 0.
.15f9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.15fa					EXPUnarySqr:
.15fa	20 02 14	jsr $1402			jsr 	EXPEvalNumber 					; number to R0
.15fd	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.1600	20 a5 20	jsr $20a5			jsr 	IFloatSquareRootR0 				; square root.
.1603	b0 01		bcs $1606			bcs 	_EUSValue
.1605	60		rts				rts
.1606					_EUSValue:
.1606	4c 11 11	jmp $1111		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1609					EXPUnaryHex:
.1609	20 0d 14	jsr $140d			jsr 	EXPEvalInteger 					; expr
.160c	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.160f	5a		phy				phy
.1610	a9 10		lda #$10			lda 	#16
.1612	20 fa 21	jsr $21fa			jsr 	IFloatIntegerToStringR0
.1615	80 0a		bra $1621			bra 	EUSMain
.1617					EXPUnaryStr:
.1617	20 02 14	jsr $1402			jsr 	EXPEvalNumber 					; expr
.161a	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.161d	5a		phy				phy
.161e	20 56 22	jsr $2256			jsr 	IFloatFloatToStringR0 			; convert to string
.1621					EUSMain:
.1621	b0 18		bcs $163b			bcs 	_EUSError
.1623	86 1e		stx $1e				stx 	zTemp0 							; save string address
.1625	84 1f		sty $1f				sty 	zTemp0+1
.1627	48		pha				pha 									; save count
.1628	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.162a	20 02 1e	jsr $1e02			jsr 	StringTempAllocate
.162d	fa		plx				plx 									; count in X
.162e	a0 00		ldy #$00			ldy 	#0
.1630					_EUSCopy:
.1630	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1632	c8		iny				iny
.1633	20 37 1e	jsr $1e37			jsr 	StringTempWrite
.1636	ca		dex				dex
.1637	d0 f7		bne $1630			bne	 	_EUSCopy
.1639	7a		ply				ply
.163a	60		rts				rts
.163b					_EUSError:
.163b	4c 11 11	jmp $1111		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.163e					EXPUnaryInlineString:
.163e	18		clc				clc 								; physical address -> IM0,1
.163f	98		tya				tya
.1640	65 1c		adc $1c				adc 	codePtr
.1642	85 0c		sta $0c				sta 	IFR0+IM0
.1644	a5 1d		lda $1d				lda 	codePtr+1
.1646	69 00		adc #$00			adc 	#0
.1648	85 0d		sta $0d				sta 	IFR0+IM1
.164a	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.164c	a9 80		lda #$80			lda 	#$80
.164e	85 0f		sta $0f				sta 	IFR0+IExp
.1650	98		tya				tya	 								; skip over it.
.1651	38		sec				sec
.1652	71 1c		adc ($1c),y			adc 	(codePtr),y
.1654	a8		tay				tay
.1655	60		rts				rts
.1656					_EXPUISRange:
.1656	4c 11 11	jmp $1111		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1659					EXPUnaryVal:
.1659	20 2c 14	jsr $142c			jsr 	EXPEvalString 					; string to R0, zTemp0
.165c	20 2c 12	jsr $122c			jsr 	ERRCheckRParen 					; )
.165f	5a		phy				phy
.1660	18		clc				clc
.1661	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.1663	69 01		adc #$01			adc 	#1
.1665	aa		tax				tax
.1666	a5 1f		lda $1f				lda 	zTemp0+1
.1668	69 00		adc #$00			adc 	#0
.166a	a8		tay				tay
.166b	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.166d	20 bd 22	jsr $22bd			jsr 	IFloatStringToFloatR0 			; do conversion
.1670	b0 02		bcs $1674			bcs 	_EUVError
.1672	7a		ply				ply
.1673	60		rts				rts
.1674					_EUVError:
.1674	4c 21 11	jmp $1121		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1677					BinaryPrecedence:
>1677	02					.byte	 2	; $ef =
>1678	02					.byte	 2	; $f0 <>
>1679	02					.byte	 2	; $f1 <=
>167a	02					.byte	 2	; $f2 <
>167b	02					.byte	 2	; $f3 >=
>167c	02					.byte	 2	; $f4 >
>167d	01					.byte	 1	; $f5 XOR
>167e	01					.byte	 1	; $f6 OR
>167f	01					.byte	 1	; $f7 AND
>1680	04					.byte	 4	; $f8 DIV
>1681	04					.byte	 4	; $f9 MOD
>1682	04					.byte	 4	; $fa <<
>1683	04					.byte	 4	; $fb >>
>1684	04					.byte	 4	; $fc /
>1685	04					.byte	 4	; $fd *
>1686	03					.byte	 3	; $fe -
>1687	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1688					StandardTokens:
>1688	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>168f	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1695	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>169b	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>16a0	02 49 46				.byte	$02,$49,$46                             	; $84 if
>16a3	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>16a9	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>16ac	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>16b1	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>16b6	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>16be	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>16c2	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>16c7	00					.byte	$00                                     	; $8c [[end]]
>16c8	00					.byte	$00                                     	; $8d [[shift]]
>16c9	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>16ce	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>16d3	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>16d6	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>16db	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>16df	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>16e5	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>16eb	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>16f0	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>16f4	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>16f8	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>16fd	01 2c					.byte	$01,$2c                                 	; $99 ,
>16ff	01 3b					.byte	$01,$3b                                 	; $9a ;
>1701	01 3a					.byte	$01,$3a                                 	; $9b :
>1703	01 27					.byte	$01,$27                                 	; $9c '
>1705	01 29					.byte	$01,$29                                 	; $9d )
>1707	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>170b	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1711	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1715	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1719	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>171e	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1722	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1729	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>172e	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1733	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1738	00					.byte	0											; $a8
>1739	00					.byte	0											; $a9
>173a	00					.byte	0											; $aa
>173b	00					.byte	0											; $ab
>173c	00					.byte	0											; $ac
>173d	00					.byte	0											; $ad
>173e	00					.byte	0											; $ae
>173f	00					.byte	0											; $af
>1740	00					.byte	0											; $b0
>1741	00					.byte	0											; $b1
>1742	00					.byte	0											; $b2
>1743	00					.byte	0											; $b3
>1744	00					.byte	0											; $b4
>1745	00					.byte	0											; $b5
>1746	00					.byte	0											; $b6
>1747	00					.byte	0											; $b7
>1748	00					.byte	0											; $b8
>1749	00					.byte	0											; $b9
>174a	00					.byte	0											; $ba
>174b	00					.byte	0											; $bb
>174c	00					.byte	0											; $bc
>174d	00					.byte	0											; $bd
>174e	00					.byte	0											; $be
>174f	00					.byte	0											; $bf
>1750	00					.byte	0											; $c0
>1751	00					.byte	0											; $c1
>1752	00					.byte	0											; $c2
>1753	00					.byte	0											; $c3
>1754	00					.byte	0											; $c4
>1755	00					.byte	0											; $c5
>1756	00					.byte	0											; $c6
>1757	00					.byte	0											; $c7
>1758	00					.byte	0											; $c8
>1759	00					.byte	0											; $c9
>175a	00					.byte	0											; $ca
>175b	00					.byte	0											; $cb
>175c	00					.byte	0											; $cc
>175d	00					.byte	0											; $cd
>175e	00					.byte	0											; $ce
>175f	00					.byte	0											; $cf
>1760	00					.byte	0											; $d0
>1761	00					.byte	0											; $d1
>1762	00					.byte	0											; $d2
>1763	00					.byte	0											; $d3
>1764	00					.byte	0											; $d4
>1765	00					.byte	0											; $d5
>1766	00					.byte	0											; $d6
>1767	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>176f	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1776	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>177c	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1782	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1787	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>178c	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1791	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1796	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>179b	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>17a1	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>17a6	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>17ae	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>17b5	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>17ba	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>17bf	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>17c5	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>17ca	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>17d0	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>17d5	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>17db	01 28					.byte	$01,$28                                 	; $eb (
>17dd	01 24					.byte	$01,$24                                 	; $ec $
>17df	00					.byte	$00                                     	; $ed [[decimal]]
>17e0	00					.byte	$00                                     	; $ee [[string]]
>17e1	01 3d					.byte	$01,$3d                                 	; $ef =
>17e3	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>17e6	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>17e9	01 3c					.byte	$01,$3c                                 	; $f2 <
>17eb	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>17ee	01 3e					.byte	$01,$3e                                 	; $f4 >
>17f0	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>17f4	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>17f7	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>17fb	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>17ff	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1803	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1806	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1809	01 2f					.byte	$01,$2f                                 	; $fc /
>180b	01 2a					.byte	$01,$2a                                 	; $fd *
>180d	01 2d					.byte	$01,$2d                                 	; $fe -
>180f	01 2b					.byte	$01,$2b                                 	; $ff +
>1811	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1812					VectorTable:
>1812	37 25					.word	NotImplemented           ; $80 REPEAT
>1814	37 25					.word	NotImplemented           ; $81 UNTIL
>1816	37 25					.word	NotImplemented           ; $82 WHILE
>1818	37 25					.word	NotImplemented           ; $83 WEND
>181a	37 25					.word	NotImplemented           ; $84 IF
>181c	37 25					.word	NotImplemented           ; $85 ENDIF
>181e	37 25					.word	NotImplemented           ; $86 DO
>1820	37 25					.word	NotImplemented           ; $87 LOOP
>1822	37 25					.word	NotImplemented           ; $88 PROC
>1824	37 25					.word	NotImplemented           ; $89 ENDPROC
>1826	37 25					.word	NotImplemented           ; $8a FOR
>1828	37 25					.word	NotImplemented           ; $8b NEXT
>182a	c0 10					.word	RUNEndOfLine             ; $8c [[END]]
>182c	f8 10					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>182e	37 25					.word	NotImplemented           ; $8e ELSE
>1830	36 10					.word	NoExec01                 ; $8f THEN
>1832	36 10					.word	NoExec02                 ; $90 TO
>1834	36 10					.word	NoExec03                 ; $91 STEP
>1836	37 25					.word	NotImplemented           ; $92 LET
>1838	39 10					.word	Command_Print            ; $93 PRINT
>183a	37 25					.word	NotImplemented           ; $94 INPUT
>183c	37 25					.word	NotImplemented           ; $95 CALL
>183e	37 25					.word	NotImplemented           ; $96 SYS
>1840	a7 10					.word	Command_REM              ; $97 REM
>1842	37 25					.word	NotImplemented           ; $98 EXIT
>1844	36 10					.word	NoExec04                 ; $99 ,
>1846	36 10					.word	NoExec05                 ; $9a ;
>1848	36 10					.word	NoExec06                 ; $9b :
>184a	a7 10					.word	Command_REM2             ; $9c '
>184c	36 10					.word	NoExec07                 ; $9d )
>184e	37 25					.word	NotImplemented           ; $9e DIM
>1850	32 10					.word	Command_CLEAR            ; $9f CLEAR
>1852	9e 10					.word	Command_NEW              ; $a0 NEW
>1854	b4 10					.word	Command_RUN              ; $a1 RUN
>1856	fe 10					.word	Command_STOP             ; $a2 STOP
>1858	fb 10					.word	Command_END              ; $a3 END
>185a	24 10					.word	Command_ASSERT           ; $a4 ASSERT
>185c	37 25					.word	NotImplemented           ; $a5 LIST
>185e	37 25					.word	NotImplemented           ; $a6 SAVE
>1860	37 25					.word	NotImplemented           ; $a7 LOAD
>1862	37 25					.word	NotImplemented           ; $a8
>1864	37 25					.word	NotImplemented           ; $a9
>1866	37 25					.word	NotImplemented           ; $aa
>1868	37 25					.word	NotImplemented           ; $ab
>186a	37 25					.word	NotImplemented           ; $ac
>186c	37 25					.word	NotImplemented           ; $ad
>186e	37 25					.word	NotImplemented           ; $ae
>1870	37 25					.word	NotImplemented           ; $af
>1872	37 25					.word	NotImplemented           ; $b0
>1874	37 25					.word	NotImplemented           ; $b1
>1876	37 25					.word	NotImplemented           ; $b2
>1878	37 25					.word	NotImplemented           ; $b3
>187a	37 25					.word	NotImplemented           ; $b4
>187c	37 25					.word	NotImplemented           ; $b5
>187e	37 25					.word	NotImplemented           ; $b6
>1880	37 25					.word	NotImplemented           ; $b7
>1882	37 25					.word	NotImplemented           ; $b8
>1884	37 25					.word	NotImplemented           ; $b9
>1886	37 25					.word	NotImplemented           ; $ba
>1888	37 25					.word	NotImplemented           ; $bb
>188a	37 25					.word	NotImplemented           ; $bc
>188c	37 25					.word	NotImplemented           ; $bd
>188e	37 25					.word	NotImplemented           ; $be
>1890	37 25					.word	NotImplemented           ; $bf
>1892	37 25					.word	NotImplemented           ; $c0
>1894	37 25					.word	NotImplemented           ; $c1
>1896	37 25					.word	NotImplemented           ; $c2
>1898	37 25					.word	NotImplemented           ; $c3
>189a	37 25					.word	NotImplemented           ; $c4
>189c	37 25					.word	NotImplemented           ; $c5
>189e	37 25					.word	NotImplemented           ; $c6
>18a0	37 25					.word	NotImplemented           ; $c7
>18a2	37 25					.word	NotImplemented           ; $c8
>18a4	37 25					.word	NotImplemented           ; $c9
>18a6	37 25					.word	NotImplemented           ; $ca
>18a8	37 25					.word	NotImplemented           ; $cb
>18aa	37 25					.word	NotImplemented           ; $cc
>18ac	37 25					.word	NotImplemented           ; $cd
>18ae	37 25					.word	NotImplemented           ; $ce
>18b0	37 25					.word	NotImplemented           ; $cf
>18b2	37 25					.word	NotImplemented           ; $d0
>18b4	37 25					.word	NotImplemented           ; $d1
>18b6	37 25					.word	NotImplemented           ; $d2
>18b8	37 25					.word	NotImplemented           ; $d3
>18ba	37 25					.word	NotImplemented           ; $d4
>18bc	37 25					.word	NotImplemented           ; $d5
>18be	37 25					.word	NotImplemented           ; $d6
>18c0	37 25					.word	NotImplemented           ; $d7 RIGHT$(
>18c2	37 25					.word	NotImplemented           ; $d8 LEFT$(
>18c4	37 25					.word	NotImplemented           ; $d9 MID$(
>18c6	17 16					.word	EXPUnaryStr              ; $da STR$(
>18c8	59 16					.word	EXPUnaryVal              ; $db VAL(
>18ca	e4 15					.word	EXPUnarySgn              ; $dc SGN(
>18cc	cf 14					.word	EXPUnaryAbs              ; $dd ABS(
>18ce	69 15					.word	EXPUnaryLen              ; $de LEN(
>18d0	fa 15					.word	EXPUnarySqr              ; $df SQR(
>18d2	ef 14					.word	EXPUnaryChr              ; $e0 CHR$(
>18d4	d9 14					.word	EXPUnaryAsc              ; $e1 ASC(
>18d6	37 25					.word	NotImplemented           ; $e2 INKEY$(
>18d8	37 25					.word	NotImplemented           ; $e3 EVENT(
>18da	37 25					.word	NotImplemented           ; $e4 TIME
>18dc	5f 15					.word	EXPUnaryInt              ; $e5 INT(
>18de	55 15					.word	EXPUnaryFrac             ; $e6 FRAC(
>18e0	00 15					.word	EXPUnaryDec              ; $e7 DEC(
>18e2	09 16					.word	EXPUnaryHex              ; $e8 HEX$(
>18e4	7e 15					.word	EXPUnaryRnd              ; $e9 RND(
>18e6	8e 15					.word	ExpUnaryRand             ; $ea RAND(
>18e8	77 15					.word	EXPUnaryParenthesis      ; $eb (
>18ea	51 15					.word	EXPUnaryNull             ; $ec $
>18ec	4e 15					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>18ee	3e 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>18f0	ff 12					.word	EXPCompareEqual          ; $ef =
>18f2	1a 13					.word	EXPCompareNotEqual       ; $f0 <>
>18f4	23 13					.word	EXPCompareLessEqual      ; $f1 <=
>18f6	08 13					.word	EXPCompareLess           ; $f2 <
>18f8	2c 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>18fa	11 13					.word	EXPCompareGreater        ; $f4 >
>18fc	ac 12					.word	EXPBinXor                ; $f5 XOR
>18fe	a0 12					.word	EXPBinOr                 ; $f6 OR
>1900	94 12					.word	EXPBinAnd                ; $f7 AND
>1902	6c 12					.word	EXPBinIDiv               ; $f8 DIV
>1904	7d 12					.word	EXPBinIMod               ; $f9 MOD
>1906	77 13					.word	EXPBinLeft               ; $fa <<
>1908	7f 13					.word	EXPBinRight              ; $fb >>
>190a	60 12					.word	EXPBinFDiv               ; $fc /
>190c	57 12					.word	EXPBinMul                ; $fd *
>190e	4e 12					.word	EXPBinSub                ; $fe -
>1910	45 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1912					TOKDetokenise:
.1912	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1914	84 23		sty $23				sty 	zTemp2+1
.1916	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.1919					_TOKDLoop:
.1919	20 45 19	jsr $1945			jsr 	TOKDGet 					; get next
.191c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.191e	f0 23		beq $1943			beq 	_TOKDExit
.1920	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1922	f0 1a		beq $193e			beq 	_TOKDDataItem
.1924	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1926	f0 16		beq $193e			beq 	_TOKDDataItem
.1928	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.192a	10 05		bpl $1931			bpl 	_TOKDNotToken
.192c	20 c9 19	jsr $19c9			jsr 	TOKDToken 					; token to text.
.192f	80 e8		bra $1919			bra 	_TOKDLoop
.1931					_TOKDNotToken:
.1931	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1933	90 05		bcc $193a			bcc 	_TOKDNotIdentifier
.1935	20 80 19	jsr $1980			jsr 	TOKDIdentifier
.1938	80 df		bra $1919			bra 	_TOKDLoop
.193a					_TOKDNotIdentifier:
.193a	a0 0a		ldy #$0a			ldy 	#10
.193c	80 db		bra $1919			bra 	_TOKDLoop
.193e					_TOKDDataItem:
.193e	20 5b 19	jsr $195b			jsr 	TOKDDataItem
.1941	80 d6		bra $1919			bra 	_TOKDLoop
.1943					_TOKDExit:
.1943	18		clc				clc
.1944	60		rts				rts
.1945	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1947	e6 22		inc $22				inc 	zTemp2
.1949	d0 02		bne $194d			bne 	_TKDGExit
.194b	e6 23		inc $23				inc 	zTemp2+1
.194d					_TKDGExit:
.194d	60		rts				rts
.194e					TOKDOutput:
.194e	8d 42 03	sta $0342			sta 	TOKLastCharacter
.1951	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.1954					TOKSetDetokeniseOutput:
.1954	8e 40 03	stx $0340			stx 	TOKOutputMethod
.1957	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.195a	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.195b					TOKDDataItem:
.195b	a8		tay				tay 								; type in Y
.195c	a9 22		lda #$22			lda 	#'"'						; start with " or .
.195e	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1960	f0 02		beq $1964			beq 	_TOKDDIsString
.1962	a9 2e		lda #$2e			lda 	#'.'
.1964					_TOKDDIsString:
.1964	20 4e 19	jsr $194e			jsr 	TOKDOutput 					; dump it
.1967	20 45 19	jsr $1945			jsr 	TOKDGet 					; get length into X
.196a	aa		tax				tax
.196b					_TOKDDOutput:
.196b	ca		dex				dex 								; are we complete
.196c	30 08		bmi $1976			bmi 	_TOKDDEnd
.196e	20 45 19	jsr $1945			jsr 	TOKDGet 					; get character and output it
.1971	20 4e 19	jsr $194e			jsr 	TOKDOutput
.1974	80 f5		bra $196b			bra 	_TOKDDOutput
.1976					_TOKDDEnd:
.1976	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1978	d0 05		bne $197f			bne 	_TOKDDNotString
.197a	a9 22		lda #$22			lda 	#'"'
.197c	20 4e 19	jsr $194e			jsr 	TOKDOutput
.197f					_TOKDDNotString:
.197f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1980					TOKDIdentifier:
.1980	a0 ff		ldy #$ff			ldy 	#$FF
.1982	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.1985					_TOKDLoop:
.1985	a8		tay				tay 								; token in Y
.1986	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1988	c0 64		cpy #$64			cpy 	#$64
.198a	f0 11		beq $199d			beq 	_TOKDIOutput
.198c	a9 5f		lda #$5f			lda 	#'_'
.198e	c0 65		cpy #$65			cpy 	#$65
.1990	f0 0b		beq $199d			beq 	_TOKDIOutput
.1992	98		tya				tya 								; handle a-z
.1993	18		clc				clc
.1994	69 21		adc #$21			adc	 	#$21
.1996	c0 5a		cpy #$5a			cpy 	#$5A
.1998	90 03		bcc $199d			bcc 	_TOKDIOutput
.199a	38		sec				sec 								; handle 0-9
.199b	e9 4b		sbc #$4b			sbc 	#$4B
.199d					_TOKDIOutput:
.199d	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.19a0	10 08		bpl $19aa			bpl 	_TOKDINoSpacing
.19a2	48		pha				pha
.19a3	20 fb 19	jsr $19fb			jsr 	TOKDSpacing
.19a6	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.19a9	68		pla				pla
.19aa					_TOKDINoSpacing:
.19aa	20 4e 19	jsr $194e			jsr 	TOKDOutput
.19ad	20 45 19	jsr $1945			jsr 	TOKDGet 					; get next token
.19b0	c9 7c		cmp #$7c			cmp 	#$7C
.19b2	90 d1		bcc $1985			bcc 	_TOKDLoop
.19b4	f0 12		beq $19c8			beq 	_TOKDIExit 					; it's a number, no tail.
.19b6	4a		lsr a				lsr 	a 							; string ?
.19b7	90 07		bcc $19c0			bcc 	_TOKDICheckArray
.19b9	48		pha				pha
.19ba	a9 24		lda #$24			lda 	#"$"
.19bc	20 4e 19	jsr $194e			jsr 	TOKDOutput
.19bf	68		pla				pla
.19c0					_TOKDICheckArray:
.19c0	4a		lsr a				lsr 	a 							; array ?
.19c1	90 05		bcc $19c8			bcc 	_TOKDIExit
.19c3	a9 28		lda #$28			lda 	#"("
.19c5	20 4e 19	jsr $194e			jsr 	TOKDOutput
.19c8					_TOKDIExit:
.19c8	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.19c9					TOKDToken:
.19c9	a2 88		ldx #$88			ldx 	#StandardTokens & $FF
.19cb	a0 16		ldy #$16			ldy 	#StandardTokens >> 8
.19cd					_TOKDSearch:
.19cd	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.19cf	84 1f		sty $1f				sty 	zTemp0+1
.19d1	aa		tax				tax 								; token ID in X.
.19d2					_TOKDFind:
.19d2	ca		dex				dex 								; reached the start
.19d3	10 0d		bpl $19e2			bpl 	_TOKDFound
.19d5	38		sec				sec 								; go to next entry
.19d6	b2 1e		lda ($1e)			lda 	(zTemp0)
.19d8	65 1e		adc $1e				adc 	zTemp0
.19da	85 1e		sta $1e				sta 	zTemp0
.19dc	90 f4		bcc $19d2			bcc 	_TOKDFind
.19de	e6 1f		inc $1f				inc 	zTemp0+1
.19e0	80 f0		bra $19d2			bra 	_TOKDFind
.19e2					_TOKDFound:
.19e2	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.19e4	f0 14		beq $19fa			beq 	_TOKDExit
.19e6	aa		tax				tax
.19e7	a0 01		ldy #$01			ldy 	#1 							; output the token.
.19e9	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.19eb	20 fb 19	jsr $19fb			jsr 	TOKDSpacing
.19ee					_TOKDOutput:
.19ee	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.19f0	20 95 1d	jsr $1d95			jsr 	TOKToLower
.19f3	20 4e 19	jsr $194e			jsr 	TOKDOutput
.19f6	c8		iny				iny
.19f7	ca		dex				dex
.19f8	d0 f4		bne $19ee			bne 	_TOKDOutput
.19fa					_TOKDExit:
.19fa	60		rts				rts
.19fb					TOKDSpacing:
.19fb	20 ac 1d	jsr $1dac			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.19fe	90 0d		bcc $1a0d			bcc 	_TOKDSExit
.1a00	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1a03	20 ac 1d	jsr $1dac			jsr 	TOKIsIdentifierElement
.1a06	90 05		bcc $1a0d			bcc 	_TOKDSExit
.1a08	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1a0a	20 4e 19	jsr $194e			jsr 	TOKDOutput
.1a0d					_TOKDSExit:
.1a0d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1a0e					PGMDeleteLine:
.1a0e	20 c6 1a	jsr $1ac6			jsr 	PGMEndProgram 				; end of program into zTemp0
.1a11	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1a13	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1a16	85 21		sta $21				sta 	zTemp1+1
.1a18					_PGMDLoop:
.1a18	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1a1a	38		sec				sec
.1a1b	f0 3a		beq $1a57			beq 	_PGMDExit
.1a1d	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1a1f	b1 20		lda ($20),y			lda 	(zTemp1),y
.1a21	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1a24	d0 08		bne $1a2e			bne 	_PGMDNext
.1a26	c8		iny				iny
.1a27	b1 20		lda ($20),y			lda 	(zTemp1),y
.1a29	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1a2c	f0 0d		beq $1a3b			beq 	_PGMDDelete
.1a2e					_PGMDNext:
.1a2e	18		clc				clc
.1a2f	b2 20		lda ($20)			lda 	(zTemp1)
.1a31	65 20		adc $20				adc 	zTemp1
.1a33	85 20		sta $20				sta 	zTemp1
.1a35	90 e1		bcc $1a18			bcc 	_PGMDLoop
.1a37	e6 21		inc $21				inc 	zTemp1+1
.1a39	80 dd		bra $1a18			bra 	_PGMDLoop
.1a3b					_PGMDDelete:
.1a3b	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1a3d	a8		tay				tay
.1a3e					_PGMDCopy:
.1a3e	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1a40	92 20		sta ($20)			sta 	(zTemp1)
.1a42	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1a44	c5 1e		cmp $1e				cmp 	zTemp0
.1a46	d0 07		bne $1a4f			bne 	_PGMDNext2
.1a48	a5 21		lda $21				lda 	zTemp1+1
.1a4a	c5 1f		cmp $1f				cmp 	zTemp0+1
.1a4c	18		clc				clc
.1a4d	f0 08		beq $1a57			beq 	_PGMDExit
.1a4f					_PGMDNext2:
.1a4f	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1a51	d0 eb		bne $1a3e			bne 	_PGMDCopy
.1a53	e6 21		inc $21				inc 	zTemp1+1
.1a55	80 e7		bra $1a3e			bra 	_PGMDCopy
.1a57					_PGMDExit:
.1a57	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1a58					PGMInsertLine:
.1a58	20 c6 1a	jsr $1ac6			jsr 	PGMEndProgram 				; end of program into zTemp0
.1a5b	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1a5d	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1a60	85 21		sta $21				sta 	zTemp1+1
.1a62	18		clc				clc
.1a63	72 20		adc ($20)			adc 	(zTemp1)
.1a65	85 21		sta $21				sta 	zTemp1+1
.1a67					_PGMILoop:
.1a67	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1a69	f0 1c		beq $1a87			beq 	_PGMIInsert
.1a6b	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1a6d	b1 20		lda ($20),y			lda 	(zTemp1),y
.1a6f	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1a72	c8		iny				iny
.1a73	b1 20		lda ($20),y			lda 	(zTemp1),y
.1a75	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1a78	b0 0d		bcs $1a87			bcs 	_PGMIInsert 				; insert here.
.1a7a	18		clc				clc
.1a7b	b2 20		lda ($20)			lda 	(zTemp1)
.1a7d	65 20		adc $20				adc 	zTemp1
.1a7f	85 20		sta $20				sta 	zTemp1
.1a81	90 e4		bcc $1a67			bcc 	_PGMILoop
.1a83	e6 21		inc $21				inc 	zTemp1+1
.1a85	80 e0		bra $1a67			bra 	_PGMILoop
.1a87					_PGMIInsert:
.1a87	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1a8a					_PGMIInsertLoop:
.1a8a	b2 1e		lda ($1e)			lda 	(zTemp0)
.1a8c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1a8e	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1a90	c5 1e		cmp $1e				cmp 	zTemp0
.1a92	d0 06		bne $1a9a			bne 	_PGMINext
.1a94	a5 21		lda $21				lda 	zTemp1+1
.1a96	c5 1f		cmp $1f				cmp 	zTemp0+1
.1a98	f0 0a		beq $1aa4			beq 	_PGMIInserted
.1a9a					_PGMINext:
.1a9a	a5 1e		lda $1e				lda 	zTemp0
.1a9c	d0 02		bne $1aa0			bne 	_PGMINoBorrow
.1a9e	c6 1f		dec $1f				dec 	zTemp0+1
.1aa0					_PGMINoBorrow:
.1aa0	c6 1e		dec $1e				dec 	zTemp0
.1aa2	80 e6		bra $1a8a			bra 	_PGMIInsertLoop
.1aa4					_PGMIInserted:
.1aa4	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1aa6					_PGMICopyLoop:
.1aa6	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1aa9	91 20		sta ($20),y			sta 	(zTemp1),y
.1aab	c8		iny				iny
.1aac	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1aaf	d0 f5		bne $1aa6			bne 	_PGMICopyLoop
.1ab1	18		clc				clc
.1ab2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1ab3					PGMSetBaseAddress:
.1ab3	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1ab6	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1ab9	60		rts				rts
.1aba					PGMNewProgram:
.1aba	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1abc	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1abf	85 1f		sta $1f				sta 	zTemp0+1
.1ac1	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1ac3	92 1e		sta ($1e)			sta 	(zTemp0)
.1ac5	60		rts				rts
.1ac6					PGMEndProgram:
.1ac6	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1ac8	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1acb	85 1f		sta $1f				sta 	zTemp0+1
.1acd					_PGMEPLoop:
.1acd	b2 1e		lda ($1e)			lda 	(zTemp0)
.1acf	f0 0b		beq $1adc			beq 	_PGMEPExit
.1ad1	18		clc				clc
.1ad2	65 1e		adc $1e				adc 	zTemp0
.1ad4	85 1e		sta $1e				sta 	zTemp0
.1ad6	90 f5		bcc $1acd			bcc 	_PGMEPLoop
.1ad8	e6 1f		inc $1f				inc 	zTemp0+1
.1ada	80 f1		bra $1acd			bra 	_PGMEPLoop
.1adc					_PGMEPExit:
.1adc	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1add					TOKResetElement:
.1add	9c 46 03	stz $0346			stz 	TOKElement
.1ae0	60		rts				rts
.1ae1					TOKWriteElement:
.1ae1	da		phx				phx
.1ae2	ae 46 03	ldx $0346			ldx 	TOKElement
.1ae5	9d 47 03	sta $0347,x			sta 	TOKElementText,x
.1ae8	9e 48 03	stz $0348,x			stz 	TOKElementText+1,x
.1aeb	fa		plx				plx
.1aec	ee 46 03	inc $0346			inc 	TOKElement
.1aef	60		rts				rts
.0346					TOKElement:
>0346							.fill 	1
.0347					TOKElementText:
>0347							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1af0					TOKTokeniseConstant:
.1af0	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1af2	48		pha				pha 								; save on stack
.1af3	29 c0		and #$c0			and 	#$C0
.1af5	05 0d		ora $0d				ora 	IFR0+IM1
.1af7	05 0e		ora $0e				ora 	IFR0+IM2
.1af9	f0 10		beq $1b0b			beq 	_TTCLess
.1afb	da		phx				phx
.1afc	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1afe					_TTCShiftRight:
.1afe	46 0e		lsr $0e				lsr 	IFR0+IM2
.1b00	66 0d		ror $0d				ror 	IFR0+IM1
.1b02	66 0c		ror $0c				ror 	IFR0+IM0
.1b04	ca		dex				dex
.1b05	d0 f7		bne $1afe			bne 	_TTCShiftRight
.1b07	fa		plx				plx
.1b08	20 f0 1a	jsr $1af0			jsr 	TOKTokeniseConstant
.1b0b					_TTCLess:
.1b0b	68		pla				pla
.1b0c	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1b0e	20 aa 1b	jsr $1baa			jsr 	TOKWriteA
.1b11	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1b12					TOKTokeniseDecimals:
.1b12	20 ba 1b	jsr $1bba			jsr 	TOKGetNext 					; consume the .
.1b15	20 22 1d	jsr $1d22			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1b18	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1b1a	20 aa 1b	jsr $1baa			jsr 	TOKWriteA
.1b1d	20 22 1b	jsr $1b22			jsr 	TOKOutputElementBuffer 		; then the buffer
.1b20	18		clc				clc
.1b21	60		rts				rts
.1b22					TOKOutputElementBuffer:
.1b22	ad 46 03	lda $0346			lda 	TOKElement 					; get count and write that
.1b25	20 aa 1b	jsr $1baa			jsr 	TOKWriteA
.1b28	a8		tay				tay 								; put in Y
.1b29	f0 0c		beq $1b37			beq 	_TOEExit 					; exit if empty which is okay.
.1b2b	a2 01		ldx #$01			ldx 	#1
.1b2d					_TOELoop:
.1b2d	bd 46 03	lda $0346,x			lda 	TOKElement,x
.1b30	20 aa 1b	jsr $1baa			jsr 	TOKWriteA
.1b33	e8		inx				inx
.1b34	88		dey				dey
.1b35	d0 f6		bne $1b2d			bne 	_TOELoop
.1b37					_TOEExit:
.1b37	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1b38					TOKTokenise:
.1b38	8c 47 04	sty $0447			sty 	TOKDataSource+1 			; save source routine pointer
.1b3b	8e 46 04	stx $0446			stx 	TOKDataSource
.1b3e	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1b40	2a		rol a				rol  	a
.1b41	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1b44	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1b46	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1b49					_TOKMainLoop:
.1b49	20 b6 1b	jsr $1bb6			jsr 	TOKGet 						; what follows.
.1b4c	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1b4e	f0 51		beq $1ba1			beq 	_TOKExit
.1b50	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1b52	d0 05		bne $1b59			bne 	_TOKElement
.1b54	20 ba 1b	jsr $1bba			jsr 	TOKGetNext
.1b57	80 f0		bra $1b49			bra 	_TOKMainLoop
.1b59					_TOKElement:
.1b59	20 a0 1d	jsr $1da0			jsr 	TOKIsDigit 					; is it 0..9
.1b5c	90 0a		bcc $1b68			bcc 	_TOKNotDigit
.1b5e	20 f9 1c	jsr $1cf9			jsr 	TOKTokeniseInteger 			; get integer
.1b61	b0 45		bcs $1ba8			bcs 	_TOKFail 					; did it fail ?
.1b63	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1b66	80 e1		bra $1b49			bra 	_TOKMainLoop
.1b68					_TOKNotDigit:
.1b68	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1b6b	d0 3b		bne $1ba8			bne 	_TOKFail 					; if so, we've a problem.
.1b6d	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1b6f	d0 07		bne $1b78			bne 	_TOKNotHex
.1b71	20 41 1c	jsr $1c41			jsr 	TOKTokeniseHexadecimal
.1b74	b0 32		bcs $1ba8			bcs 	_TOKFail
.1b76	80 d1		bra $1b49			bra 	_TOKMainLoop
.1b78					_TOKNotHex:
.1b78	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1b7a	d0 07		bne $1b83			bne 	_TOKNotDecimal
.1b7c	20 12 1b	jsr $1b12			jsr 	TOKTokeniseDecimals
.1b7f	b0 27		bcs $1ba8			bcs 	_TOKFail
.1b81	80 c6		bra $1b49			bra 	_TOKMainLoop
.1b83					_TOKNotDecimal:
.1b83	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1b85	d0 07		bne $1b8e			bne 	_TOKNotString
.1b87	20 67 1d	jsr $1d67			jsr 	TOKTokeniseString
.1b8a	b0 1c		bcs $1ba8			bcs 	_TOKFail
.1b8c	80 bb		bra $1b49			bra 	_TOKMainLoop
.1b8e					_TOKNotString:
.1b8e	20 bd 1d	jsr $1dbd			jsr 	TOKIsAlpha 					; identifier ?
.1b91	b0 07		bcs $1b9a			bcs 	_TOKIdentifier
.1b93	20 36 1d	jsr $1d36			jsr 	TOKTokenisePunctuation 		; punctuation
.1b96	b0 10		bcs $1ba8			bcs 	_TOKFail
.1b98	80 af		bra $1b49			bra 	_TOKMainLoop
.1b9a					_TOKIdentifier:
.1b9a	20 7b 1c	jsr $1c7b			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1b9d	b0 09		bcs $1ba8			bcs 	_TOKFail
.1b9f	80 a8		bra $1b49			bra 	_TOKMainLoop
.1ba1					_TOKExit:
.1ba1	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1ba3	20 aa 1b	jsr $1baa			jsr 	TOKWriteA
.1ba6	18		clc				clc									; return with carry set.
.1ba7	60		rts				rts
.1ba8					_TOKFail:
.1ba8	38		sec				sec
.1ba9	60		rts				rts
.1baa					TOKWriteA:
.1baa	da		phx				phx
.1bab	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1bae	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1bb1	fa		plx				plx
.1bb2	ee 37 02	inc $0237			inc 	TOKLineSize
.1bb5	60		rts				rts
.1bb6					TOKGet:
.1bb6	18		clc				clc
.1bb7	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1bba					TOKGetNext:
.1bba	38		sec				sec
.1bbb	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1bbe	da		phx		TokTest:phx
.1bbf	ae fb 1b	ldx $1bfb			ldx 	TokPos
.1bc2	bd cc 1b	lda $1bcc,x			lda 	TokLine,x
.1bc5	90 03		bcc $1bca			bcc 	_TTExit
.1bc7	ee fb 1b	inc $1bfb			inc 	TokPos
.1bca	fa		plx		_TTExit:plx
.1bcb	60		rts				rts
>1bcc	22 48 65 6c 6c 6f 22 20		TokLine:.text 	'"Hello" .306 > <> let print az09._ a a$ a( a$(',0
>1bd4	2e 33 30 36 20 3e 20 3c 3e 20 6c 65 74 20 70 72
>1be4	69 6e 74 20 61 7a 30 39 2e 5f 20 61 20 61 24 20
>1bf4	61 28 20 61 24 28 00
>1bfb	00				TokPos:	.byte 	0
.0446					TOKDataSource:
>0446							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1bfc					TOKFindToken:
.1bfc	a2 88		ldx #$88			ldx 	#StandardTokens & $FF 		; do this table
.1bfe	a0 16		ldy #$16			ldy 	#StandardTokens >> 8
.1c00	20 0b 1c	jsr $1c0b			jsr 	TOKFindTokenXY 				; find it, or not
.1c03	90 04		bcc $1c09			bcc 	_TOKFTFail
.1c05	a2 00		ldx #$00			ldx 	#0
.1c07	38		sec				sec
.1c08	60		rts				rts
.1c09					_TOKFTFail
.1c09	18		clc				clc
.1c0a	60		rts				rts
.1c0b					TOKFindTokenXY:
.1c0b	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1c0d	84 1f		sty $1f				sty 	zTemp0+1
.1c0f	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1c11	8d 48 04	sta $0448			sta 	TOKCurrent
.1c14					_TOKFindLoop:
.1c14	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1c16	18		clc				clc 		 						; clear carry in case of fail
.1c17	30 17		bmi $1c30			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1c19	cd 46 03	cmp $0346			cmp 	TOKElement 					; compare against the element length
.1c1c	d0 13		bne $1c31			bne 	_TOKNext 					; different, try next.
.1c1e	aa		tax				tax 								; number of chars to compare.
.1c1f	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1c21					_TOKCompare:
.1c21	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1c23	d9 46 03	cmp $0346,y			cmp 	TOKElementText-1,y
.1c26	d0 09		bne $1c31			bne 	_TOKNext 					; different ? try next
.1c28	c8		iny				iny 								; compare next two
.1c29	ca		dex				dex
.1c2a	d0 f5		bne $1c21			bne 	_TOKCompare 				; until done X characters.
.1c2c	38		sec				sec
.1c2d	ad 48 04	lda $0448			lda 	TOKCurrent 					; return current ID.
.1c30					_TOKExit:
.1c30	60		rts				rts
.1c31					_TOKNext:
.1c31	ee 48 04	inc $0448			inc 	TOKCurrent 					; increment token #
.1c34	38		sec				sec 								; add length+1 to ptr
.1c35	b2 1e		lda ($1e)			lda 	(zTemp0)
.1c37	65 1e		adc $1e				adc 	zTemp0
.1c39	85 1e		sta $1e				sta 	zTemp0
.1c3b	90 d7		bcc $1c14			bcc 	_TOKFindLoop
.1c3d	e6 1f		inc $1f				inc 	zTemp0+1
.1c3f	80 d3		bra $1c14			bra 	_TOKFindLoop
.0448					TOKCurrent:
>0448							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1c41					TOKTokeniseHexadecimal:
.1c41	20 ba 1b	jsr $1bba			jsr 	TOKGetNext 					; consume the $
.1c44	a2 0c		ldx #$0c			ldx 	#IFR0
.1c46	20 59 24	jsr $2459			jsr 	IFloatSetZero 				; set R0 = 0
.1c49					_TTHLoop:
.1c49	20 b6 1b	jsr $1bb6			jsr 	TOKGet 						; keep getting and copying while numeric.
.1c4c	20 ca 1d	jsr $1dca			jsr 	TOKIsHexadecimal
.1c4f	90 20		bcc $1c71			bcc 	_TTHDone
.1c51	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1c53	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.1c56	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.1c59	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.1c5c	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.1c5f	20 ba 1b	jsr $1bba			jsr 	TOKGetNext
.1c62	38		sec				sec 								; convert to decimal.
.1c63	e9 30		sbc #$30			sbc 	#48
.1c65	c9 0a		cmp #$0a			cmp 	#10
.1c67	90 02		bcc $1c6b			bcc 	_TTHNotAlpha
.1c69	e9 07		sbc #$07			sbc 	#7
.1c6b					_TTHNotAlpha:
.1c6b	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1c6d	85 0c		sta $0c				sta 	IFR0+IM0
.1c6f	80 d8		bra $1c49			bra 	_TTHLoop
.1c71					_TTHDone:
.1c71	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1c73	20 aa 1b	jsr $1baa			jsr 	TOKWriteA
.1c76	20 f0 1a	jsr $1af0			jsr 	TOKTokeniseConstant 		; write integer out.
.1c79	18		clc				clc
.1c7a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1c7b					TOKTokeniseIdentifier:
.1c7b	20 dd 1a	jsr $1add			jsr 	TOKResetElement 			; extract an identifier
.1c7e					_TOKGetIdentifier:
.1c7e	20 b6 1b	jsr $1bb6			jsr 	TOKGet
.1c81	20 8a 1d	jsr $1d8a			jsr 	TOKToUpper
.1c84	20 ac 1d	jsr $1dac			jsr 	TOKIsIdentifierElement
.1c87	90 08		bcc $1c91			bcc 	_TOKEndIdent
.1c89	20 e1 1a	jsr $1ae1			jsr		TOKWriteElement
.1c8c	20 ba 1b	jsr $1bba			jsr 	TOKGetNext
.1c8f	80 ed		bra $1c7e			bra 	_TOKGetIdentifier
.1c91					_TOKEndIdent:
.1c91	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1c93	d0 06		bne $1c9b			bne 	_TOKNotString
.1c95	20 e1 1a	jsr $1ae1			jsr 	TOKWriteElement 			; add it
.1c98	20 ba 1b	jsr $1bba			jsr 	TOKGetNext 					; consume it
.1c9b					_TOKNotString:
.1c9b	20 b6 1b	jsr $1bb6			jsr 	TOKGet 						; finally check for (
.1c9e	c9 28		cmp #$28			cmp 	#"("
.1ca0	d0 06		bne $1ca8			bne 	_TOKNoArray
.1ca2	20 e1 1a	jsr $1ae1			jsr 	TOKWriteElement 			; add it
.1ca5	20 ba 1b	jsr $1bba			jsr 	TOKGetNext 					; consume it
.1ca8					_TOKNoArray:
.1ca8	20 fc 1b	jsr $1bfc			jsr 	TOKFindToken 				; find it
.1cab	90 05		bcc $1cb2			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1cad	20 aa 1b	jsr $1baa			jsr 	TOKWriteA
.1cb0	18		clc				clc
.1cb1	60		rts				rts
.1cb2					_TOKIsVariable:
.1cb2	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1cb4					_TOKOutputBuffer:
.1cb4	bd 47 03	lda $0347,x			lda 	TOKElementText,x 			; output it translated.
.1cb7	20 e0 1c	jsr $1ce0			jsr 	TOKTranslateIdentifier
.1cba	20 aa 1b	jsr $1baa			jsr 	TOKWriteA
.1cbd	e8		inx				inx
.1cbe	bd 47 03	lda $0347,x			lda 	TOKElementText,x
.1cc1	20 ac 1d	jsr $1dac			jsr 	TOKIsIdentifierElement
.1cc4	b0 ee		bcs $1cb4			bcs 	_TOKOutputBuffer
.1cc6	a8		tay				tay 								; last char in Y
.1cc7	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1cc9	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1ccb	f0 0e		beq $1cdb			beq 	_TOKIVExit
.1ccd	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1ccf	d0 04		bne $1cd5			bne 	_TOKIVCheckArray 			; no, check for (
.1cd1	1a		inc a				inc 	a 							; token is $7D
.1cd2	bc 48 03	ldy $0348,x			ldy 	TOKElementText+1,x 			; get next one.
.1cd5					_TOKIVCheckArray:
.1cd5	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1cd7	d0 02		bne $1cdb			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1cd9	1a		inc a				inc 	a
.1cda	1a		inc a				inc 	a
.1cdb					_TOKIVExit:
.1cdb	20 aa 1b	jsr $1baa			jsr 	TOKWriteA 					; ending token
.1cde	18		clc				clc
.1cdf	60		rts				rts
.1ce0					TOKTranslateIdentifier:
.1ce0	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1ce2	f0 0f		beq $1cf3			beq 	_TTI64
.1ce4	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1ce6	f0 0e		beq $1cf6			beq 	_TTI65
.1ce8	38		sec				sec
.1ce9	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1ceb	10 03		bpl $1cf0			bpl 	_TTIExit
.1ced	18		clc				clc 								; map 09 onto 26-35
.1cee	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1cf0					_TTIExit:
.1cf0	09 40		ora #$40			ora 	#$40 						; correct range.
.1cf2	60		rts				rts
.1cf3	a9 64		lda #$64	_TTI64:	lda 	#$64
.1cf5	60		rts				rts
.1cf6	a9 65		lda #$65	_TTI65:	lda 	#$65
.1cf8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1cf9					TOKTokeniseInteger:
.1cf9	20 22 1d	jsr $1d22			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1cfc	a2 47		ldx #$47			ldx 	#TOKElementText & $FF
.1cfe	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1d00	ad 46 03	lda $0346			lda		TOKElement
.1d03	20 bd 22	jsr $22bd			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1d06	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1d09	f0 12		beq $1d1d			beq 	_TOKNotLineNumber
.1d0b	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1d0d	d0 0c		bne $1d1b			bne 	_TOKBadLineNumeber
.1d0f	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1d11	8d 38 02	sta $0238			sta 	TOKLineNumber
.1d14	a5 0d		lda $0d				lda 	IFR0+IM1
.1d16	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1d19	18		clc				clc
.1d1a	60		rts				rts
.1d1b					_TOKBadLineNumeber:
.1d1b	38		sec				sec
.1d1c	60		rts				rts
.1d1d					_TOKNotLineNumber:
.1d1d	20 f0 1a	jsr $1af0			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1d20	18		clc				clc
.1d21	60		rts				rts
.1d22					TOKExtractInteger:
.1d22	20 dd 1a	jsr $1add			jsr 	TOKResetElement 			; restart
.1d25					_TTILoop:
.1d25	20 b6 1b	jsr $1bb6			jsr 	TOKGet 						; keep getting and copying while numeric.
.1d28	20 a0 1d	jsr $1da0			jsr 	TOKIsDigit
.1d2b	90 08		bcc $1d35			bcc 	_TOKEIExit
.1d2d	20 e1 1a	jsr $1ae1			jsr 	TOKWriteElement
.1d30	20 ba 1b	jsr $1bba			jsr 	TOKGetNext
.1d33	80 f0		bra $1d25			bra 	_TTILoop
.1d35					_TOKEIExit:
.1d35	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1d36					TOKTokenisePunctuation:
.1d36	20 dd 1a	jsr $1add			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1d39	20 ba 1b	jsr $1bba			jsr 	TOKGetNext
.1d3c	20 e1 1a	jsr $1ae1			jsr 	TOKWriteElement
.1d3f	20 b6 1b	jsr $1bb6			jsr 	TOKGet 						; what follows ?
.1d42	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1d44	f0 10		beq $1d56			beq 	_TTPOne
.1d46	20 b4 1d	jsr $1db4			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1d49	b0 0b		bcs $1d56			bcs 	_TTPOne 					; these speed things up a bit.
.1d4b	20 e1 1a	jsr $1ae1			jsr 	TOKWriteElement 			; this is what we will search for.
.1d4e	20 fc 1b	jsr $1bfc			jsr 	TOKFindToken
.1d51	b0 0a		bcs $1d5d			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1d53	ce 46 03	dec $0346			dec 	TOKElement 					; make it a single character
.1d56					_TTPOne:
.1d56	20 fc 1b	jsr $1bfc			jsr 	TOKFindToken 				; look for one character punctuation
.1d59	b0 07		bcs $1d62			bcs 	_TTPOutputExit 				; we found it
.1d5b	38		sec				sec 								; not recognised.
.1d5c	60		rts				rts
.1d5d					_TTPConsumeExit:
.1d5d	48		pha				pha
.1d5e	20 ba 1b	jsr $1bba			jsr 	TOKGetNext 					; get the 2nd char out.
.1d61	68		pla				pla
.1d62					_TTPOutputExit:
.1d62	20 aa 1b	jsr $1baa			jsr  	TOKWriteA 					; write token out
.1d65	18		clc				clc
.1d66	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1d67					TOKTokeniseString:
.1d67	20 ba 1b	jsr $1bba			jsr 	TOKGetNext 					; consume the "
.1d6a	20 dd 1a	jsr $1add			jsr 	TOKResetElement 			; start getting the string
.1d6d					_TOKTSLoop:
.1d6d	20 b6 1b	jsr $1bb6			jsr 	TOKGet 						; check EOL
.1d70	c9 00		cmp #$00			cmp 	#0
.1d72	f0 0c		beq $1d80			beq 	_TOKTSExit
.1d74	20 ba 1b	jsr $1bba			jsr 	TOKGetNext 					; get and consume
.1d77	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1d79	f0 05		beq $1d80			beq 	_TOKTSExit
.1d7b	20 e1 1a	jsr $1ae1			jsr 	TOKWriteElement
.1d7e	80 ed		bra $1d6d			bra 	_TOKTSLoop
.1d80					_TOKTSExit:
.1d80	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1d82	20 aa 1b	jsr $1baa			jsr 	TOKWriteA
.1d85	20 22 1b	jsr $1b22			jsr 	TOKOutputElementBuffer
.1d88	18		clc				clc
.1d89	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1d8a					TOKToUpper:
.1d8a	c9 61		cmp #$61			cmp 	#"a"
.1d8c	90 06		bcc $1d94			bcc 	_TTUNotLower
.1d8e	c9 7b		cmp #$7b			cmp 	#"z"+1
.1d90	b0 02		bcs $1d94			bcs 	_TTUNotLower
.1d92	49 20		eor #$20			eor 	#$20
.1d94					_TTUNotLower:
.1d94	60		rts				rts
.1d95					TOKToLower:
.1d95	c9 41		cmp #$41			cmp 	#"A"
.1d97	90 06		bcc $1d9f			bcc 	_TTUNotUpper
.1d99	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1d9b	b0 02		bcs $1d9f			bcs 	_TTUNotUpper
.1d9d	49 20		eor #$20			eor 	#$20
.1d9f					_TTUNotUpper:
.1d9f	60		rts				rts
.1da0					TOKIsDigit:
.1da0	c9 30		cmp #$30			cmp 	#"0"
.1da2	90 06		bcc $1daa			bcc 	TOKFail
.1da4	c9 3a		cmp #$3a			cmp 	#"9"+1
.1da6	b0 02		bcs $1daa			bcs 	TOKFail
.1da8					TOKSucceed:
.1da8	38		sec				sec
.1da9	60		rts				rts
.1daa					TOKFail:
.1daa	18		clc				clc
.1dab	60		rts				rts
.1dac					TOKIsIdentifierElement:
.1dac	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1dae	f0 f8		beq $1da8			beq 	TOKSucceed
.1db0	c9 5f		cmp #$5f			cmp 	#"_"
.1db2	f0 f4		beq $1da8			beq 	TOKSucceed 					; else fall through to alphanumeric
.1db4					TOKIsAlphaNumeric:
.1db4	20 bd 1d	jsr $1dbd			jsr 	TOKIsAlpha
.1db7	b0 ef		bcs $1da8			bcs 	TOKSucceed
.1db9	20 a0 1d	jsr $1da0			jsr 	TOKIsDigit
.1dbc	60		rts				rts
.1dbd					TOKIsAlpha:
.1dbd	20 8a 1d	jsr $1d8a			jsr 	TOKToUpper
.1dc0	c9 41		cmp #$41			cmp 	#"A"
.1dc2	90 e6		bcc $1daa			bcc 	TOKFail
.1dc4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1dc6	b0 e2		bcs $1daa			bcs 	TOKFail
.1dc8	80 de		bra $1da8			bra 	TOKSucceed
.1dca					TOKIsHexadecimal:
.1dca	20 a0 1d	jsr $1da0			jsr		TOKIsDigit
.1dcd	b0 d9		bcs $1da8			bcs 	TOKSucceed
.1dcf	20 bd 1d	jsr $1dbd			jsr 	TOKIsAlpha
.1dd2	90 d6		bcc $1daa			bcc 	TOKFail
.1dd4	c9 47		cmp #$47			cmp 	#"F"+1
.1dd6	b0 d2		bcs $1daa			bcs 	TOKFail
.1dd8	80 ce		bra $1da8			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.1dda					StringSystemInitialise:
.1dda	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh 			; last byte of memory
.1ddd	3a		dec a				dec 	a
.1dde	8d 4b 04	sta $044b			sta 	stringMemory+1
.1de1	85 1f		sta $1f				sta 	zTemp0+1
.1de3	a9 ff		lda #$ff			lda 	#$FF
.1de5	8d 4a 04	sta $044a			sta 	stringMemory
.1de8	85 1e		sta $1e				sta 	zTemp0
.1dea	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.1dec	92 1e		sta ($1e)			sta 	(zTemp0)
.1dee	60		rts				rts
.1def					StringSpaceInitialise:
.1def	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.1df1	8d 49 04	sta $0449			sta 	stringInitialised
.1df4	ad 4a 04	lda $044a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.1df7	8d 4c 04	sta $044c			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.1dfa	ad 4b 04	lda $044b			lda 	stringMemory+1
.1dfd	3a		dec a				dec 	a
.1dfe	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1e01	60		rts				rts
.1e02					StringTempAllocate:
.1e02	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.1e04	b0 2e		bcs $1e34			bcs 	_STALength
.1e06	2c 49 04	bit $0449			bit 	stringInitialised 			; already initialised
.1e09	30 05		bmi $1e10			bmi 	_STAAllocate
.1e0b	48		pha				pha 								; save value to subtract.
.1e0c	20 ef 1d	jsr $1def			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.1e0f	68		pla				pla 								; restore it
.1e10					_STAAllocate:
.1e10	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.1e12	18		clc				clc  								; deliberate allows one more
.1e13	6d 4c 04	adc $044c			adc 	stringTempPointer 			; subtract from temp pointer
.1e16	8d 4c 04	sta $044c			sta 	stringTempPointer
.1e19	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.1e1b	85 24		sta $24				sta 	zsTemp 						; and zsTemp
.1e1d	ad 4d 04	lda $044d			lda 	stringTempPointer+1
.1e20	69 ff		adc #$ff			adc 	#$FF
.1e22	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1e25	85 25		sta $25				sta 	zsTemp+1
.1e27	85 0d		sta $0d				sta 	IFR0+IM1
.1e29	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.1e2b	a9 80		lda #$80			lda 	#$80
.1e2d	85 0f		sta $0f				sta 	IFR0+IExp
.1e2f	a9 00		lda #$00			lda 	#0 							; clear the target string
.1e31	92 24		sta ($24)			sta 	(zsTemp)
.1e33	60		rts				rts
.1e34					_STALength:
.1e34	4c 0f 12	jmp $120f		jmp	ErrorV_string
.1e37					StringTempWrite:
.1e37	5a		phy				phy
.1e38	48		pha				pha
.1e39	b2 24		lda ($24)			lda 	(zsTemp)
.1e3b	1a		inc a				inc 	a
.1e3c	92 24		sta ($24)			sta 	(zsTemp)
.1e3e	a8		tay				tay
.1e3f	68		pla				pla
.1e40	91 24		sta ($24),y			sta 	(zsTemp),y
.1e42	7a		ply				ply
.1e43	60		rts				rts
.0024					zsTemp:
>0024							.fill 	2
.0449					stringInitialised:
>0449							.fill 	1
.044a					stringMemory:
>044a							.fill 	2
.044c					stringTempPointer:
>044c							.fill 	2

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.1e44					IFInitialise:
.1e44	9c 56 04	stz $0456			stz 	IFStackIndex
.1e47	60		rts				rts
.1e48					IFloatSubtract:
.1e48	da		phx				phx
.1e49	a2 0c		ldx #$0c			ldx 	#IFR0
.1e4b	20 64 24	jsr $2464			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.1e4e	fa		plx				plx
.1e4f					IFloatAdd:
.1e4f	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.1e51	05 0f		ora $0f				ora 	IFR0+IExp
.1e53	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.1e55	d0 4e		bne $1ea5			bne 	_IFloatAddDecimals 			; decimal version.
.1e57					_IFAddSubMantissa:
.1e57	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.1e59	45 0f		eor $0f				eor 	IFR0+IExp
.1e5b	29 40		and #$40			and 	#IFSign
.1e5d	d0 21		bne $1e80			bne 	_IFloatSubMantissa
.1e5f	18		clc				clc 								; do the actual addition
.1e60	a5 0c		lda $0c			lda 	IFR0+IM0
.1e62	75 00		adc $00,x		adc 		IM0,x
.1e64	85 0c		sta $0c			sta 	IFR0+IM0
.1e66	a5 0d		lda $0d			lda 	IFR0+IM1
.1e68	75 01		adc $01,x		adc 		IM1,x
.1e6a	85 0d		sta $0d			sta 	IFR0+IM1
.1e6c	a5 0e		lda $0e			lda 	IFR0+IM2
.1e6e	75 02		adc $02,x		adc 		IM2,x
.1e70	85 0e		sta $0e			sta 	IFR0+IM2
.1e72	10 29		bpl $1e9d			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.1e74	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.1e76	20 88 24	jsr $2488			jsr 	IFloatShiftRight
.1e79	20 b2 24	jsr $24b2			jsr 	IFloatIncExponent
.1e7c	d0 1f		bne $1e9d			bne 	_IFloatAddExit
.1e7e	38		sec				sec 								; overflowed numerically.
.1e7f	60		rts				rts
.1e80					_IFloatSubMantissa:
.1e80	38		sec				sec 								; do the subtraction R0-Rx
.1e81	a5 0c		lda $0c			lda 	IFR0+IM0
.1e83	f5 00		sbc $00,x		sbc 		IM0,x
.1e85	85 0c		sta $0c			sta 	IFR0+IM0
.1e87	a5 0d		lda $0d			lda 	IFR0+IM1
.1e89	f5 01		sbc $01,x		sbc 		IM1,x
.1e8b	85 0d		sta $0d			sta 	IFR0+IM1
.1e8d	a5 0e		lda $0e			lda 	IFR0+IM2
.1e8f	f5 02		sbc $02,x		sbc 		IM2,x
.1e91	85 0e		sta $0e			sta 	IFR0+IM2
.1e93	b0 08		bcs $1e9d			bcs 	_IFloatAddExit 				; no borrow so we are done.
.1e95	a2 0c		ldx #$0c			ldx 	#IFR0
.1e97	20 6c 24	jsr $246c			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.1e9a	20 64 24	jsr $2464			jsr 	IFloatNegate 				; negate
.1e9d					_IFloatAddExit:
.1e9d	18		clc				clc
.1e9e	60		rts				rts
.1e9f					_IFloatZeroAdd:
.1e9f	fa		plx				plx 								; return this value in R0
.1ea0	20 ea 23	jsr $23ea			jsr 	IFloatCopyFromRegister
.1ea3	18		clc				clc
.1ea4	60		rts				rts
.1ea5					_IFloatAddDecimals:
.1ea5	20 52 24	jsr $2452			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.1ea8	f0 f3		beq $1e9d			beq 	_IFloatAddExit
.1eaa	20 90 24	jsr $2490			jsr 	IFloatNormalise 			; normalise RX
.1ead	da		phx				phx 								; normalise R0
.1eae	a2 0c		ldx #$0c			ldx 	#IFR0
.1eb0	20 52 24	jsr $2452			jsr 	IFloatCheckZero
.1eb3	f0 ea		beq $1e9f			beq 	_IFloatZeroAdd
.1eb5	20 90 24	jsr $2490			jsr 	IFloatNormalise
.1eb8	fa		plx				plx
.1eb9	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.1ebb	29 3f		and #$3f			and 	#IFXMask
.1ebd	38		sec				sec
.1ebe	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.1ec0	85 0a		sta $0a				sta 	iTemp0
.1ec2	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.1ec4	29 3f		and #$3f			and 	#IFXMask
.1ec6	38		sec				sec
.1ec7	e9 20		sbc #$20			sbc 	#$20
.1ec9	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.1ecb	b0 02		bcs $1ecf			bcs 	_IFloatHaveLarger
.1ecd	a5 0a		lda $0a				lda 	iTemp0
.1ecf					_IFloatHaveLarger:
.1ecf	18		clc				clc 								; get the actual one back.
.1ed0	69 20		adc #$20			adc 	#$20 						; shift both to that.
.1ed2	20 df 1e	jsr $1edf			jsr 	_IFShiftXToA
.1ed5	da		phx				phx
.1ed6	a2 0c		ldx #$0c			ldx 	#IFR0
.1ed8	20 df 1e	jsr $1edf			jsr 	_IFShiftXToA
.1edb	fa		plx				plx
.1edc	4c 57 1e	jmp $1e57			jmp 	_IFAddSubMantissa 			; do the adding bit.
.1edf					_IFShiftXToA:
.1edf	8d 4e 04	sta $044e			sta 	IFTarget
.1ee2	20 52 24	jsr $2452			jsr 	IFloatCheckZero 			; check adding zero ?
.1ee5	f0 11		beq $1ef8			beq 	_IFSXExit
.1ee7					_IFSXLoop:
.1ee7	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.1ee9	29 3f		and #$3f			and 	#IFXMask
.1eeb	cd 4e 04	cmp $044e			cmp 	IFTarget
.1eee	f0 08		beq $1ef8			beq 	_IFSXExit
.1ef0	20 88 24	jsr $2488			jsr 	IFloatShiftRight
.1ef3	20 b2 24	jsr $24b2			jsr 	IFloatIncExponent
.1ef6	80 ef		bra $1ee7			bra 	_IFSXLoop
.1ef8					_IFSXExit:
.1ef8	60		rts				rts
.044e					IFTarget:
>044e							.fill 	1
.1ef9					IFloatMultiply:
.1ef9	8e 4e 04	stx $044e			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.1efc	20 b4 1f	jsr $1fb4			jsr 	IFCalculateNewSign
.1eff	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.1f01	05 0f		ora $0f				ora 	IFR0+IExp
.1f03	29 3f		and #$3f			and 	#IFXMask
.1f05	15 01		ora $01,x			ora 	IM1,x
.1f07	05 0d		ora $0d				ora 	IFR0+IM1
.1f09	15 02		ora $02,x			ora 	IM2,x
.1f0b	05 0e		ora $0e				ora 	IFR0+IM2
.1f0d	d0 0a		bne $1f19			bne 	_IFMStandard
.1f0f	20 35 24	jsr $2435			jsr 	IFloatMultiply8BitRx
.1f12	ad 50 04	lda $0450			lda 	IFNewSign
.1f15	85 0f		sta $0f				sta 	IFR0+IExp
.1f17	18		clc				clc
.1f18	60		rts				rts
.1f19					_IFMStandard:
.1f19	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.1f1b	20 ab 1f	jsr $1fab			jsr 	IFMSignExtend
.1f1e	8d 4f 04	sta $044f			sta 	IFNewExponent
.1f21	a5 0f		lda $0f				lda 	IFR0+IExp
.1f23	20 ab 1f	jsr $1fab			jsr 	IFMSignExtend
.1f26	18		clc				clc
.1f27	6d 4f 04	adc $044f			adc 	IFNewExponent
.1f2a	8d 4f 04	sta $044f			sta 	IFNewExponent
.1f2d	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.1f2f	20 fb 23	jsr $23fb			jsr 	IFloatCopyToRegister
.1f32	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.1f34	20 59 24	jsr $2459			jsr 	IFloatSetZero
.1f37					_IFMLoop:
.1f37	a2 18		ldx #$18			ldx 	#IFRTemp
.1f39	20 52 24	jsr $2452			jsr 	IFloatCheckZero
.1f3c	f0 3a		beq $1f78			beq 	_IFMExit
.1f3e	ae 4e 04	ldx $044e			ldx 	IFTarget 					; look at adder MSB
.1f41	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.1f43	10 03		bpl $1f48			bpl	 	_IFMTargetOkay
.1f45	20 9c 1f	jsr $1f9c			jsr 	_IFMShiftAll
.1f48					_IFMTargetOkay:
.1f48	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.1f4a	29 01		and #$01			and 	#1
.1f4c	f0 16		beq $1f64			beq 	_IFMNoAdd
.1f4e	ae 4e 04	ldx $044e			ldx 	IFTarget 					; add adder
.1f51	18		clc				clc
.1f52	a5 0c		lda $0c			lda 	IFR0+IM0
.1f54	75 00		adc $00,x		adc 		IM0,x
.1f56	85 0c		sta $0c			sta 	IFR0+IM0
.1f58	a5 0d		lda $0d			lda 	IFR0+IM1
.1f5a	75 01		adc $01,x		adc 		IM1,x
.1f5c	85 0d		sta $0d			sta 	IFR0+IM1
.1f5e	a5 0e		lda $0e			lda 	IFR0+IM2
.1f60	75 02		adc $02,x		adc 		IM2,x
.1f62	85 0e		sta $0e			sta 	IFR0+IM2
.1f64					_IFMNoAdd:
.1f64	a5 0e		lda $0e				lda 	IFR0+IM2
.1f66	10 03		bpl $1f6b			bpl 	_IFMResultOkay
.1f68	20 9c 1f	jsr $1f9c			jsr 	_IFMShiftAll
.1f6b					_IFMResultOkay:
.1f6b	a2 18		ldx #$18			ldx 	#IFRTemp
.1f6d	20 88 24	jsr $2488			jsr 	IFloatShiftRight
.1f70	ae 4e 04	ldx $044e			ldx 	IFTarget
.1f73	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.1f76	80 bf		bra $1f37			bra 	_IFMLoop
.1f78					_IFMExit:
.1f78	ad 4f 04	lda $044f			lda 	IFNewExponent 				; validate new exponent.
.1f7b	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.1f7d	90 0f		bcc $1f8e			bcc 	_IFMOkay
.1f7f	c9 e0		cmp #$e0			cmp 	#$E0
.1f81	b0 0b		bcs $1f8e			bcs 	_IFMOkay
.1f83	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.1f85	f0 13		beq $1f9a			beq 	_IFMError
.1f87	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.1f89	20 59 24	jsr $2459			jsr 	IFloatSetZero
.1f8c	18		clc				clc
.1f8d	60		rts				rts
.1f8e					_IFMOkay:
.1f8e	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.1f90	0d 50 04	ora $0450			ora 	IFNewSign
.1f93	85 0f		sta $0f				sta 	IFR0+IExp
.1f95	18		clc				clc
.1f96	60		rts				rts
.1f97	4c ff ff	jmp $ffff			jmp 	$FFFF
.1f9a					_IFMError:
.1f9a	38		sec				sec
.1f9b	60		rts				rts
.1f9c					_IFMShiftAll:
.1f9c	a2 0c		ldx #$0c			ldx 	#IFR0
.1f9e	20 88 24	jsr $2488			jsr 	IFloatShiftRight
.1fa1	ae 4e 04	ldx $044e			ldx 	IFTarget
.1fa4	20 88 24	jsr $2488			jsr 	IFloatShiftRight
.1fa7	ee 4f 04	inc $044f			inc 	IFNewExponent
.1faa	60		rts				rts
.1fab					IFMSignExtend:
.1fab	29 3f		and #$3f			and 	#IFXMask
.1fad	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.1faf	90 02		bcc $1fb3			bcc 	_IFMNoSXX
.1fb1	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.1fb3					_IFMNoSXX:
.1fb3	60		rts				rts
.1fb4					IFCalculateNewSign:
.1fb4	b5 03		lda $03,x			lda 	IExp,x
.1fb6	45 0f		eor $0f				eor 	IFR0+IExp
.1fb8	29 40		and #$40			and 	#IFSign
.1fba	8d 50 04	sta $0450			sta 	IFNewSign
.1fbd	60		rts				rts
.044f					IFNewExponent:
>044f							.fill 	1
.0450					IFNewSign:
>0450							.fill 	1
.1fbe					IFloatDivideInteger:
.1fbe	20 d7 1f	jsr $1fd7			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.1fc1	b0 06		bcs $1fc9			bcs 	_IFDIExit
.1fc3	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.1fc5	20 ea 23	jsr $23ea			jsr 	IFloatCopyFromRegister
.1fc8	18		clc				clc
.1fc9					_IFDIExit:
.1fc9	60		rts				rts
.1fca					IFloatModulusInteger:
.1fca	20 d7 1f	jsr $1fd7			jsr 	IFloatDivideIntegerCommon
.1fcd	b0 07		bcs $1fd6			bcs 	_IFMIExit
.1fcf	ae 4e 04	ldx $044e			ldx 	IFTarget
.1fd2	20 ea 23	jsr $23ea			jsr 	IFloatCopyFromRegister
.1fd5	18		clc				clc
.1fd6					_IFMIExit:
.1fd6	60		rts				rts
.1fd7					IFloatDivideIntegerCommon:
.1fd7	8e 4e 04	stx $044e			stx 	IFTarget  					; this is s1, s0 = R0
.1fda	20 b4 1f	jsr $1fb4			jsr 	IFCalculateNewSign 			; calculate sign of result
.1fdd	20 05 20	jsr $2005			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.1fe0	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.1fe2	20 52 24	jsr $2452			jsr 	IFloatCheckZero
.1fe5	f0 1c		beq $2003			beq 	_IFDIDivZero
.1fe7	ae 4e 04	ldx $044e			ldx 	IFTarget 					; zero Rx (S1)
.1fea	20 59 24	jsr $2459			jsr 	IFloatSetZero
.1fed	5a		phy				phy
.1fee	a0 18		ldy #$18			ldy 	#24
.1ff0					_IFDILoop:
.1ff0	20 16 20	jsr $2016			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.1ff3	20 22 20	jsr $2022			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.1ff6	88		dey				dey
.1ff7	d0 f7		bne $1ff0			bne 	_IFDILoop 					; do it 24 times
.1ff9	7a		ply				ply
.1ffa	ad 50 04	lda $0450			lda 	IFNewSign 					; set sign of result.
.1ffd	29 40		and #$40			and 	#IFSign
.1fff	85 1b		sta $1b				sta 	IFRTemp+IExp
.2001	18		clc				clc 								; is okay.
.2002	60		rts				rts
.2003					_IFDIDivZero:
.2003	38		sec				sec
.2004	60		rts				rts
.2005					IFDCopyRXToRTemp:
.2005	b5 00		lda $00,x			lda 	IM0,x
.2007	85 18		sta $18				sta 	IFRTemp+IM0
.2009	b5 01		lda $01,x			lda 	IM1,x
.200b	85 19		sta $19				sta 	IFRTemp+IM1
.200d	b5 02		lda $02,x			lda 	IM2,x
.200f	85 1a		sta $1a				sta 	IFRTemp+IM2
.2011	b5 03		lda $03,x			lda 	IExp,x
.2013	85 1b		sta $1b				sta 	IFRTemp+IExp
.2015	60		rts				rts
.2016					IFDShiftSTempS1Left:
.2016	a2 18		ldx #$18			ldx 	#IFRTemp
.2018	20 80 24	jsr $2480			jsr 	IFloatShiftLeft
.201b	ae 4e 04	ldx $044e			ldx 	IFTarget
.201e	20 81 24	jsr $2481			jsr 	IFloatRotateLeft
.2021	60		rts				rts
.2022					IFDTrySubtract:
.2022	ae 4e 04	ldx $044e			ldx 	IFTarget 					; s1 = Rx
.2025	38		sec				sec 								; subtract, saving the results on the stack.
.2026	b5 00		lda $00,x			lda 	IM0,x
.2028	e5 0c		sbc $0c				sbc 	IFR0+IM0
.202a	48		pha				pha
.202b	b5 01		lda $01,x			lda 	IM1,x
.202d	e5 0d		sbc $0d				sbc 	IFR0+IM1
.202f	48		pha				pha
.2030	b5 02		lda $02,x			lda 	IM2,x
.2032	e5 0e		sbc $0e				sbc 	IFR0+IM2
.2034	b0 03		bcs $2039			bcs 	_IFDCanSubtract
.2036	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2037	68		pla				pla
.2038	60		rts				rts
.2039					_IFDCanSubtract:
.2039	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.203b	68		pla				pla
.203c	95 01		sta $01,x			sta 	IM1,x
.203e	68		pla				pla
.203f	95 00		sta $00,x			sta 	IM0,x
.2041	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.2043	d0 06		bne $204b			bne 	_IFDCSExit
.2045	e6 19		inc $19				inc 	IFRTemp+IM1
.2047	d0 02		bne $204b			bne 	_IFDCSExit
.2049	e6 1a		inc $1a				inc 	IFRTemp+IM2
.204b					_IFDCSExit:
.204b	60		rts				rts
.204c					IFloatBitwiseAnd:
.204c	5a		phy				phy
.204d	20 91 20	jsr $2091			jsr 	IFPreProcessBitwise 		; set up everything.
.2050	d0 0f		bne $2061			bne 	_IFBAExit
.2052					_IFBALoop:
.2052	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2055	35 00		and $00,x			and 	IM0,x
.2057	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.205a	e8		inx				inx
.205b	c8		iny				iny
.205c	c0 03		cpy #$03			cpy 	#3
.205e	d0 f2		bne $2052			bne 	_IFBALoop
.2060	18		clc				clc
.2061					_IFBAExit:
.2061	7a		ply				ply
.2062	60		rts				rts
.2063					IFloatBitwiseOr:
.2063	5a		phy				phy
.2064	20 91 20	jsr $2091			jsr 	IFPreProcessBitwise 		; set up everything.
.2067	d0 0f		bne $2078			bne 	_IFBAExit
.2069					_IFBALoop:
.2069	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.206c	15 00		ora $00,x			ora 	IM0,x
.206e	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2071	e8		inx				inx
.2072	c8		iny				iny
.2073	c0 03		cpy #$03			cpy 	#3
.2075	d0 f2		bne $2069			bne 	_IFBALoop
.2077	18		clc				clc
.2078					_IFBAExit:
.2078	7a		ply				ply
.2079	60		rts				rts
.207a					IFloatBitwiseXor:
.207a	5a		phy				phy
.207b	20 91 20	jsr $2091			jsr 	IFPreProcessBitwise 		; set up everything.
.207e	d0 0f		bne $208f			bne 	_IFBAExit
.2080					_IFBALoop:
.2080	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2083	55 00		eor $00,x			eor 	IM0,x
.2085	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2088	e8		inx				inx
.2089	c8		iny				iny
.208a	c0 03		cpy #$03			cpy 	#3
.208c	d0 f2		bne $2080			bne 	_IFBALoop
.208e	18		clc				clc
.208f					_IFBAExit:
.208f	7a		ply				ply
.2090	60		rts				rts
.2091					IFPreProcessBitwise:
.2091	a0 00		ldy #$00			ldy 	#0 							; set index.
.2093	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.2095	15 03		ora $03,x			ora 	IExp,x
.2097	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2099	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.209b	38		sec				sec 								; carry set just in cases.
.209c	60		rts				rts
.209d					IFloatAbsoluteR0:
.209d	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.209f	29 bf		and #$bf			and 	#IFSign ^ 255
.20a1	85 0f		sta $0f				sta 	IFR0+IExp
.20a3	18		clc				clc
.20a4	60		rts				rts
.20a5					IFloatSquareRootR0:
.20a5	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.20a7	20 52 24	jsr $2452			jsr 	IFloatCheckZero
.20aa	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.20ac	29 40		and #$40			and 	#IFSign
.20ae	d0 2f		bne $20df			bne 	_IFSRFail
.20b0	20 90 24	jsr $2490			jsr 	IFloatNormalise 			; it will work better !
.20b3	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.20b5	20 fb 23	jsr $23fb			jsr 	IFloatCopyToRegister
.20b8	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.20ba	20 ab 1f	jsr $1fab			jsr 	IFMSignExtend 				; sign extended version of the exponent
.20bd	18		clc				clc
.20be	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.20c0	85 0f		sta $0f				sta 	IFR0+IExp
.20c2	4a		lsr a				lsr 	a 							; which we can halve.
.20c3	38		sec				sec 								; convert back
.20c4	e9 17		sbc #$17			sbc 	#23
.20c6	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.20c8	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.20ca	20 e1 20	jsr $20e1			jsr 	_IFSRNewton
.20cd	20 e1 20	jsr $20e1			jsr 	_IFSRNewton
.20d0	20 e1 20	jsr $20e1			jsr 	_IFSRNewton
.20d3	20 e1 20	jsr $20e1			jsr 	_IFSRNewton
.20d6	18		clc				clc
.20d7	60		rts				rts
.20d8					_IFSRZero:
.20d8	a2 0c		ldx #$0c			ldx 	#IFR0
.20da	20 59 24	jsr $2459			jsr 	IFloatSetZero
.20dd	18		clc				clc
.20de	60		rts				rts
.20df					_IFSRFail:
.20df	38		sec				sec
.20e0	60		rts				rts
.20e1					_IFSRNewton:
.20e1	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.20e3	20 a8 23	jsr $23a8			jsr 	IFloatPushRx
.20e6	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.20e8	20 a8 23	jsr $23a8			jsr 	IFloatPushRx
.20eb	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.20ed	20 7c 21	jsr $217c			jsr 	IFloatDivideFloat
.20f0	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.20f2	20 c9 23	jsr $23c9			jsr 	IFloatPullRx
.20f5	20 4f 1e	jsr $1e4f			jsr 	IFloatAdd 					; now guess + original/guess
.20f8	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.20fa	20 88 24	jsr $2488			jsr 	IFloatShiftRight
.20fd	a2 10		ldx #$10			ldx 	#IFR1
.20ff	20 c9 23	jsr $23c9			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2102	60		rts				rts
.2103					IFloatFractionalR0:
.2103	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2105	29 3f		and #$3f			and 	#IFXMask
.2107	f0 17		beq $2120			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2109	20 9d 20	jsr $209d			jsr 	IFloatAbsoluteR0 			; absolute value R9
.210c	a2 0c		ldx #$0c			ldx 	#IFR0
.210e	20 90 24	jsr $2490			jsr 	IFloatNormalise 			; normalise R0
.2111	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.2113	20 fb 23	jsr $23fb			jsr 	IFloatCopyToRegister
.2116	20 59 21	jsr $2159			jsr 	IFloatIntegerR0 			; take integer part of R0
.2119	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.211b	20 48 1e	jsr $1e48			jsr 	IFloatSubtract
.211e	80 05		bra $2125			bra 	_FIPExit
.2120					_FIPZero:
.2120	a2 0c		ldx #$0c			ldx 	#IFR0
.2122	20 59 24	jsr $2459			jsr 	IFloatSetZero
.2125					_FIPExit:
.2125	18		clc				clc
.2126	60		rts				rts
.2127					IFloatCompare:
.2127	20 48 1e	jsr $1e48			jsr 	IFloatSubtract 				; subtract R0 from RX.
.212a	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.212c	05 0f		ora $0f				ora 	IFR0+IExp
.212e	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.2130	29 3f		and #$3f			and 	#IFXMask
.2132	d0 19		bne $214d			bne 	_IFCNonInteger
.2134	20 52 24	jsr $2452			jsr 	IFloatCheckZero 			; check if zero
.2137	f0 0f		beq $2148			beq 	_IFCZero
.2139					_IFCReturnSign:
.2139	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.213b	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.213d	48		pha				pha
.213e	a9 01		lda #$01			lda 	#1
.2140	20 5b 24	jsr $245b			jsr 	IFloatSetByte 				; return to +1
.2143	68		pla				pla 								; sign bit back
.2144	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.2146	18		clc				clc
.2147	60		rts				rts
.2148					_IFCZero:
.2148	20 59 24	jsr $2459			jsr 	IFloatSetZero
.214b	18		clc				clc
.214c	60		rts				rts
.214d					_IFCNonInteger:
.214d	a5 0c		lda $0c				lda 	IFR0+IM0
.214f	29 00		and #$00			and		#$00
.2151	05 0d		ora $0d				ora 	IFR0+IM1
.2153	05 0e		ora $0e				ora 	IFR0+IM2
.2155	f0 f1		beq $2148			beq 	_IFCZero 					; near enough !
.2157	80 e0		bra $2139			bra 	_IFCReturnSign 				; return the sign of the difference.
.2159					IFloatIntegerR0:
.2159	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.215b	29 3f		and #$3f			and 	#IFXMask
.215d	f0 1b		beq $217a			beq 	_FIPExit 					; if so do nothing
.215f	a2 0c		ldx #$0c			ldx 	#IFR0
.2161	20 90 24	jsr $2490			jsr 	IFloatNormalise 			; normalise
.2164	20 52 24	jsr $2452			jsr 	IFloatCheckZero 			; is it zero ?
.2167	f0 0e		beq $2177			beq 	_FIPZero 					; if so return zero.
.2169					_FIPShift:
.2169	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.216b	29 20		and #$20			and 	#$20 						; still -ve
.216d	f0 0b		beq $217a			beq 	_FIPExit
.216f	20 88 24	jsr $2488			jsr 	IFloatShiftRight 			; shift mantissa right
.2172	20 b2 24	jsr $24b2			jsr 	IFloatIncExponent 			; bump exponent
.2175	80 f2		bra $2169			bra 	_FIPShift
.2177					_FIPZero:
.2177	20 59 24	jsr $2459			jsr 	IFloatSetZero
.217a					_FIPExit:
.217a	18		clc				clc
.217b	60		rts				rts
.217c					IFloatDivideFloat:
.217c	8e 4e 04	stx $044e			stx 	IFTarget  					; this is s1, s0 = R0
.217f	20 b4 1f	jsr $1fb4			jsr 	IFCalculateNewSign 			; calculate sign of result
.2182	20 90 24	jsr $2490			jsr 	IFloatNormalise 			; normalise RX
.2185	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.2187	20 90 24	jsr $2490			jsr 	IFloatNormalise
.218a	20 52 24	jsr $2452			jsr 	IFloatCheckZero
.218d	f0 56		beq $21e5			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.218f	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.2191	20 ab 1f	jsr $1fab			jsr 	IFMSignExtend
.2194	8d 4f 04	sta $044f			sta 	IFNewExponent
.2197	ae 4e 04	ldx $044e			ldx 	IFTarget 					; calculate s1.exponent
.219a	b5 03		lda $03,x			lda 	IExp,x
.219c	20 ab 1f	jsr $1fab			jsr 	IFMSignExtend
.219f	38		sec				sec
.21a0	ed 4f 04	sbc $044f			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.21a3	38		sec				sec
.21a4	e9 17		sbc #$17			sbc 	#23
.21a6	8d 4f 04	sta $044f			sta 	IFNewExponent
.21a9	20 e7 21	jsr $21e7			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.21ac	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.21ae	10 08		bpl $21b8			bpl 	_IFDFNoShiftResult
.21b0	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.21b2	20 88 24	jsr $2488			jsr 	IFloatShiftRight
.21b5	ee 4f 04	inc $044f			inc 	IFNewExponent
.21b8					_IFDFNoShiftResult:
.21b8	ad 4f 04	lda $044f			lda 	IFNewExponent 				; underflow/overflow check.
.21bb	30 06		bmi $21c3			bmi 	_IFDFCheckUnderflow
.21bd	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.21bf	b0 24		bcs $21e5			bcs 	_IFDFDivZero
.21c1	80 11		bra $21d4			bra		_IFDFExit
.21c3					_IFDFCheckUnderflow:
.21c3	ad 4f 04	lda $044f			lda 	IFNewExponent 				; shift into a legal exponent.
.21c6	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.21c8	b0 0a		bcs $21d4			bcs 	_IFDFExit
.21ca	ee 4f 04	inc $044f			inc 	IFNewExponent
.21cd	a2 18		ldx #$18			ldx 	#IFRTemp
.21cf	20 88 24	jsr $2488			jsr 	IFloatShiftRight
.21d2	80 ef		bra $21c3			bra 	_IFDFCheckUnderflow
.21d4					_IFDFExit:
.21d4	ad 4f 04	lda $044f			lda 	IFNewExponent 				; combine exponent and sign.
.21d7	29 3f		and #$3f			and 	#IFXMask
.21d9	0d 50 04	ora $0450			ora 	IFNewSign
.21dc	85 1b		sta $1b				sta 	IFRTemp+IExp
.21de	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.21e0	20 ea 23	jsr $23ea			jsr 	IFloatCopyFromRegister
.21e3	18		clc				clc
.21e4	60		rts				rts
.21e5					_IFDFDivZero:
.21e5	38		sec				sec
.21e6	60		rts				rts
.21e7					IFloatDivideSupport:
.21e7	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.21e9	20 59 24	jsr $2459			jsr 	IFloatSetZero
.21ec	5a		phy				phy 								; main division loop x 23
.21ed	a0 17		ldy #$17			ldy 	#23
.21ef					_IFDSLoop:
.21ef	20 22 20	jsr $2022			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.21f2	20 16 20	jsr $2016			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.21f5	88		dey				dey
.21f6	d0 f7		bne $21ef			bne 	_IFDSLoop 					; do it 24 times
.21f8	7a		ply				ply
.21f9	60		rts				rts
.21fa					IFloatIntegerToStringR0:
.21fa	8d 51 04	sta $0451			sta 	IFBase 						; save base to use.
.21fd	20 da 24	jsr $24da			jsr 	IFloatBufferReset			; empty buffer
.2200	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.2202	29 3f		and #$3f			and 	#IFXMask
.2204	d0 1e		bne $2224			bne 	_IFIFail
.2206	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.2208	20 52 24	jsr $2452			jsr 	IFloatCheckZero
.220b	f0 0e		beq $221b			beq 	_IFINotNegative
.220d	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.220f	29 40		and #$40			and 	#IFSign
.2211	f0 08		beq $221b			beq 	_IFINotNegative
.2213	a9 2d		lda #$2d			lda 	#"-"						; output -
.2215	20 e9 24	jsr $24e9			jsr 	IFloatBufferWrite
.2218	20 64 24	jsr $2464			jsr 	IFloatNegate 				; tidy up !
.221b					_IFINotNegative:
.221b	20 26 22	jsr $2226			jsr 	_IFIRecursiveConvert 		; start converting
.221e	20 e1 24	jsr $24e1			jsr 	IFloatGetBufferAddress
.2221	18		clc				clc
.2222	80 01		bra $2225			bra 	_IFIExit
.2224					_IFIFail:
.2224	38		sec				sec
.2225					_IFIExit:
.2225	60		rts				rts
.2226					_IFIRecursiveConvert:
.2226	a2 10		ldx #$10			ldx 	#IFR1
.2228	20 fb 23	jsr $23fb			jsr 	IFloatCopyToRegister 		; R0->R1
.222b	a2 0c		ldx #$0c			ldx 	#IFR0
.222d	ad 51 04	lda $0451			lda 	IFBase 						; Base -> R0
.2230	20 5b 24	jsr $245b			jsr 	IFloatSetByte
.2233	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.2235	20 be 1f	jsr $1fbe			jsr 	IFloatDivideInteger
.2238	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.223a	20 52 24	jsr $2452			jsr 	IFloatCheckZero
.223d	f0 09		beq $2248			beq 	_IFIOutDigit
.223f	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.2241	48		pha				pha
.2242	20 26 22	jsr $2226			jsr 	_IFIRecursiveConvert 		; convert the divider
.2245	68		pla				pla
.2246	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.2248					_IFIOutDigit:
.2248	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.224a	c9 0a		cmp #$0a			cmp	 	#10
.224c	90 02		bcc $2250			bcc 	_IFINotHex
.224e	69 06		adc #$06			adc 	#6
.2250					_IFINotHex:
.2250	69 30		adc #$30			adc 	#48
.2252	20 e9 24	jsr $24e9			jsr 	IFloatBufferWrite
.2255	60		rts				rts
.0451					IFBase:
>0451							.fill 	1
.2256					IFloatFloatToStringR0:
.2256	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2258	20 a8 23	jsr $23a8			jsr 	IFloatPushRx
.225b	20 fb 23	jsr $23fb			jsr 	IFloatCopyToRegister
.225e	20 59 21	jsr $2159			jsr 	IFloatIntegerR0				; make R0 integer
.2261	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2263	20 fa 21	jsr $21fa			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2266	9c 52 04	stz $0452			stz 	IFloatDecimalCount 			; zero the decimal count.
.2269	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.226b	29 3f		and #$3f			and 	#IFXMask
.226d	f0 44		beq $22b3			beq 	_IFFSExit
.226f					_IFloatFracLoop:
.226f	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.2271	20 ea 23	jsr $23ea			jsr 	IFloatCopyFromRegister
.2274	20 03 21	jsr $2103			jsr 	IFloatFractionalR0
.2277	20 90 24	jsr $2490			jsr 	IFloatNormalise
.227a	a2 14		ldx #$14			ldx 	#IFR2
.227c	20 fb 23	jsr $23fb			jsr 	IFloatCopyToRegister 		; copy to R2
.227f	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.2281	a9 0a		lda #$0a			lda 	#10
.2283	20 5b 24	jsr $245b			jsr 	IFloatSetByte
.2286	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.2288	20 f9 1e	jsr $1ef9			jsr 	IFloatMultiply
.228b	a2 14		ldx #$14			ldx 	#IFR2
.228d	20 fb 23	jsr $23fb			jsr 	IFloatCopyToRegister
.2290	20 59 21	jsr $2159			jsr 	IFloatIntegerR0 			; get integer part of R0
.2293	ad 52 04	lda $0452			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2296	c9 03		cmp #$03			cmp 	#3
.2298	f0 16		beq $22b0			beq 	_IFFSExitStripZero
.229a	ad 52 04	lda $0452			lda 	IFloatDecimalCount 			; written the DP yet ?
.229d	d0 05		bne $22a4			bne 	_IFloatNotFirst
.229f	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.22a1	20 e9 24	jsr $24e9			jsr 	IFloatBufferWrite
.22a4					_IFloatNotFirst:
.22a4	ee 52 04	inc $0452			inc 	IFloatDecimalCount
.22a7	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.22a9	09 30		ora #$30			ora 	#"0"						; ASCII
.22ab	20 e9 24	jsr $24e9			jsr 	IFloatBufferWrite 			; write to the buffer.
.22ae	80 bf		bra $226f			bra 	_IFloatFracLoop
.22b0					_IFFSExitStripZero:
.22b0	20 f8 24	jsr $24f8			jsr 	IFloatStripTrailingZeros
.22b3					_IFFSExit:
.22b3	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.22b5	20 c9 23	jsr $23c9			jsr 	IFloatPullRx
.22b8	20 e1 24	jsr $24e1			jsr 	IFloatGetBufferAddress
.22bb	18		clc				clc
.22bc	60		rts				rts
.0452					IFloatDecimalCount:
>0452							.fill 	1
.22bd					IFloatStringToFloatR0:
.22bd	8d 53 04	sta $0453			sta 	IFCount 					; save it out.
.22c0	86 0a		stx $0a				stx 	iTemp0
.22c2	84 0b		sty $0b				sty 	iTemp0+1
.22c4	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.22c6	20 59 24	jsr $2459			jsr 	IFloatSetZero
.22c9	9c 54 04	stz $0454			stz 	IFSignFlag 					; clear the sign flag
.22cc	20 59 23	jsr $2359			jsr 	IFSTFGetNext 				; get first
.22cf	f0 1b		beq $22ec			beq 	_IFSTFFail 					; no character
.22d1	90 10		bcc $22e3			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.22d3	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.22d5	d0 15		bne $22ec			bne 	_IFSTFFail
.22d7	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.22d9	8d 54 04	sta $0454			sta 	IFSignFlag
.22dc					_IFSTFLoop:
.22dc	20 59 23	jsr $2359			jsr 	IFSTFGetNext 				; get next
.22df	b0 0b		bcs $22ec			bcs 	_IFSTFFail 					; bad character.
.22e1	f0 11		beq $22f4			beq 	_IFSTFExit 					; end of data
.22e3					_IFSTFHaveChar:
.22e3	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.22e5	f0 08		beq $22ef			beq 	_IFSTFDecimal
.22e7	20 7d 23	jsr $237d			jsr 	IFSTFAddR0 					; add number in
.22ea	80 f0		bra $22dc			bra 	_IFSTFLoop 					; keep going until . or end.
.22ec					_IFSTFFail:
.22ec	38		sec				sec
.22ed	80 0d		bra $22fc			bra 	_IFSTFReturn
.22ef					_IFSTFDecimal:
.22ef	20 04 23	jsr $2304			jsr 	IFSTFDecimal 				; call the decimal places code.
.22f2	b0 08		bcs $22fc			bcs 	_IFSTFReturn 				; error
.22f4					_IFSTFExit:
.22f4	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.22f6	0d 54 04	ora $0454			ora 	IFSignFlag
.22f9	85 0f		sta $0f				sta 	IFR0+IExp
.22fb	18		clc				clc
.22fc					_IFSTFReturn:
.22fc	60		rts				rts
.22fd					IFloatAddDecimalToR0:
.22fd	8d 53 04	sta $0453			sta 	IFCount 					; save it out.
.2300	86 0a		stx $0a				stx 	iTemp0
.2302	84 0b		sty $0b				sty 	iTemp0+1
.2304					IFSTFDecimal:
.2304	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2306	20 a8 23	jsr $23a8			jsr 	IFloatPushRx
.2309	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.230b	20 59 24	jsr $2459			jsr 	IFloatSetZero
.230e	9c 55 04	stz $0455			stz 	IFDecimalPlaces
.2311					_IFSTDLoop:
.2311	20 59 23	jsr $2359			jsr 	IFSTFGetNext 				; get next
.2314	b0 41		bcs $2357			bcs 	_IFSTFFail2 				; bad character.
.2316	f0 11		beq $2329			beq 	_IFSTFComplete 				; end of data, work out the result.
.2318	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.231a	f0 39		beq $2355			beq 	_IFSTFExit2
.231c	20 7d 23	jsr $237d			jsr 	IFSTFAddR0 					; add number in
.231f	ee 55 04	inc $0455			inc 	IFDecimalPlaces 			; count decimals
.2322	ad 55 04	lda $0455			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2325	c9 03		cmp #$03			cmp 	#3
.2327	90 e8		bcc $2311			bcc 	_IFSTDLoop
.2329					_IFSTFComplete:
.2329	ad 55 04	lda $0455			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.232c	f0 27		beq $2355			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.232e	3a		dec a				dec 	a 							; table indexed from 1.
.232f	0a		asl a				asl 	a
.2330	0a		asl a				asl 	a
.2331	aa		tax				tax
.2332	bd 94 23	lda $2394,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2335	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2337	bd 95 23	lda $2395,x			lda 	TableTen+1,x
.233a	85 11		sta $11				sta  	IFR1+IM1
.233c	bd 96 23	lda $2396,x			lda 	TableTen+2,x
.233f	85 12		sta $12				sta  	IFR1+IM2
.2341	bd 97 23	lda $2397,x			lda 	TableTen+3,x
.2344	85 13		sta $13				sta  	IFR1+IExp
.2346	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2348	20 f9 1e	jsr $1ef9			jsr 	IFloatMultiply
.234b	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.234d	20 c9 23	jsr $23c9			jsr 	IFloatPullRx
.2350	a2 10		ldx #$10			ldx 	#IFR1
.2352	20 4f 1e	jsr $1e4f			jsr 	IFloatAdd
.2355					_IFSTFExit2:
.2355	18		clc				clc
.2356	60		rts				rts
.2357					_IFSTFFail2:
.2357	38		sec				sec
.2358	60		rts				rts
.2359					IFSTFGetNext:
.2359	ad 53 04	lda $0453			lda 	IFCount  					; if count is zero, return with Z set.
.235c	f0 19		beq $2377			beq 	_IFSTFReturnOk
.235e	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2360	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2362	d0 02		bne $2366			bne 	_IFSTFGNNoCarry
.2364	e6 0b		inc $0b				inc 	iTemp0+1
.2366					_IFSTFGNNoCarry:
.2366	ce 53 04	dec $0453			dec 	IFCount 					; dec count.
.2369	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.236b	f0 08		beq $2375			beq 	_IFSTFGOkay
.236d	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.236f	90 08		bcc $2379			bcc 	_IFSTFGFail
.2371	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2373	b0 04		bcs $2379			bcs 	_IFSTFGFail
.2375					_IFSTFGOkay:
.2375	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2377					_IFSTFReturnOk:
.2377	18		clc				clc
.2378	60		rts				rts
.2379					_IFSTFGFail:
.2379	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.237b	38		sec				sec
.237c	60		rts				rts
.237d					IFSTFAddR0:
.237d	29 0f		and #$0f			and 	#15 						; to int value
.237f	48		pha				pha 								; save it.
.2380	a9 0a		lda #$0a			lda 	#10
.2382	a2 10		ldx #$10			ldx 	#IFR1
.2384	20 5b 24	jsr $245b			jsr 	IFloatSetByte
.2387	20 f9 1e	jsr $1ef9			jsr 	IFloatMultiply
.238a	68		pla				pla
.238b	a2 10		ldx #$10			ldx 	#IFR1
.238d	20 5b 24	jsr $245b			jsr 	IFloatSetByte
.2390	20 4f 1e	jsr $1e4f			jsr 	IFloatAdd
.2393	60		rts				rts
.0453					IFCount:
>0453							.fill 	1
.0454					IFSignFlag:
>0454							.fill 	1
.0455					IFDecimalPlaces:
>0455							.fill 	1
.2394					TableTen:
>2394	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2398	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>239c	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>23a0	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>23a4	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.23a8					IFloatPushRx:
.23a8	5a		phy				phy
.23a9	ac 56 04	ldy $0456			ldy 	IFStackIndex
.23ac	b5 00		lda $00,x			lda 	IM0,x
.23ae	99 57 04	sta $0457,y			sta 	IFStack,y
.23b1	b5 01		lda $01,x			lda 	IM1,x
.23b3	99 58 04	sta $0458,y			sta 	IFStack+1,y
.23b6	b5 02		lda $02,x			lda 	IM2,x
.23b8	99 59 04	sta $0459,y			sta 	IFStack+2,y
.23bb	b5 03		lda $03,x			lda 	IExp,x
.23bd	99 5a 04	sta $045a,y			sta 	IFStack+3,y
.23c0	c8		iny				iny
.23c1	c8		iny				iny
.23c2	c8		iny				iny
.23c3	c8		iny				iny
.23c4	8c 56 04	sty $0456			sty 	IFStackIndex
.23c7	7a		ply				ply
.23c8	60		rts				rts
.23c9					IFloatPullRx:
.23c9	5a		phy				phy
.23ca	ac 56 04	ldy $0456			ldy 	IFStackIndex
.23cd	88		dey				dey
.23ce	88		dey				dey
.23cf	88		dey				dey
.23d0	88		dey				dey
.23d1	b9 57 04	lda $0457,y			lda 	IFStack,y
.23d4	95 00		sta $00,x			sta 	IM0,x
.23d6	b9 58 04	lda $0458,y			lda 	IFStack+1,y
.23d9	95 01		sta $01,x			sta 	IM1,x
.23db	b9 59 04	lda $0459,y			lda 	IFStack+2,y
.23de	95 02		sta $02,x			sta 	IM2,x
.23e0	b9 5a 04	lda $045a,y			lda 	IFStack+3,y
.23e3	95 03		sta $03,x			sta 	IExp,x
.23e5	8c 56 04	sty $0456			sty 	IFStackIndex
.23e8	7a		ply				ply
.23e9	60		rts				rts
.0456					IFStackIndex:
>0456							.fill 	1
.0457					IFStack:
>0457							.fill 	16*4
.23ea					IFloatCopyFromRegister:
.23ea	b5 00		lda $00,x			lda 	0,x
.23ec	85 0c		sta $0c				sta 	IFR0
.23ee	b5 01		lda $01,x			lda 	1,x
.23f0	85 0d		sta $0d				sta 	IFR0+1
.23f2	b5 02		lda $02,x			lda 	2,x
.23f4	85 0e		sta $0e				sta 	IFR0+2
.23f6	b5 03		lda $03,x			lda 	3,x
.23f8	85 0f		sta $0f				sta 	IFR0+3
.23fa	60		rts				rts
.23fb					IFloatCopyToRegister:
.23fb	a5 0c		lda $0c				lda 	IFR0
.23fd	95 00		sta $00,x			sta 	0,x
.23ff	a5 0d		lda $0d				lda 	IFR0+1
.2401	95 01		sta $01,x			sta 	1,x
.2403	a5 0e		lda $0e				lda 	IFR0+2
.2405	95 02		sta $02,x			sta 	2,x
.2407	a5 0f		lda $0f				lda 	IFR0+3
.2409	95 03		sta $03,x			sta 	3,x
.240b	60		rts				rts
.240c					IFloatLoadInline:
.240c	68		pla				pla 								; pop address off to iTemp0
.240d	85 0a		sta $0a				sta 	iTemp0
.240f	68		pla				pla
.2410	85 0b		sta $0b				sta 	iTemp0+1
.2412	a0 01		ldy #$01			ldy 	#1
.2414	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2416	95 00		sta $00,x			sta 	0,x
.2418	c8		iny				iny
.2419	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.241b	95 01		sta $01,x			sta 	1,x
.241d	c8		iny				iny
.241e	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2420	95 02		sta $02,x			sta 	2,x
.2422	c8		iny				iny
.2423	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2425	95 03		sta $03,x			sta 	3,x
.2427	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2428	a5 0a		lda $0a				lda 	iTemp0
.242a	69 05		adc #$05			adc 	#5
.242c	85 0a		sta $0a				sta 	iTemp0
.242e	90 02		bcc $2432			bcc 	_IFLINoCarry
.2430	e6 0b		inc $0b				inc 	iTemp0+1
.2432					_IFLINoCarry:
.2432	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2435					IFloatMultiply8BitRx:
.2435	5a		phy		        phy
.2436	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2438	a4 0c		ldy $0c		        ldy     IFR0+IM0
.243a	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.243b	85 0c		sta $0c		        sta     IFR0+IM0
.243d	84 0d		sty $0d		        sty     IFR0+IM1
.243f	a9 00		lda #$00	        lda     #0
.2441	a0 08		ldy #$08	        ldy     #8
.2443					_IFMLoop:
.2443	90 03		bcc $2448	        bcc     _IFMNoAdd
.2445	18		clc		        clc
.2446	65 0d		adc $0d		        adc     IFR0+IM1
.2448					_IFMNoAdd:
.2448	6a		ror a		        ror     a
.2449	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.244b	88		dey		        dey
.244c	d0 f5		bne $2443	        bne     _IFMLoop
.244e	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2450	7a		ply		        ply
.2451	60		rts		        rts
.2452					IFloatCheckZero:
.2452	b5 00		lda $00,x			lda 	IM0,x
.2454	15 01		ora $01,x			ora 	IM1,x
.2456	15 02		ora $02,x			ora 	IM2,x
.2458	60		rts				rts
.2459					IFloatSetZero:
.2459	a9 00		lda #$00			lda 	#0
.245b					IFloatSetByte:
.245b	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.245d	74 01		stz $01,x			stz 	IM1,x
.245f	74 02		stz $02,x			stz 	IM2,x
.2461	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2463	60		rts				rts
.2464					IFloatNegate:
.2464	b5 03		lda $03,x			lda 	IExp,x
.2466	49 40		eor #$40			eor 	#IFSign
.2468	95 03		sta $03,x			sta 	IExp,x
.246a	18		clc				clc
.246b	60		rts				rts
.246c					IFloatMantissaNegate:
.246c	38		sec				sec
.246d	a9 00		lda #$00			lda 	#0
.246f	f5 00		sbc $00,x			sbc 	IM0,x
.2471	95 00		sta $00,x			sta 	IM0,x
.2473	a9 00		lda #$00			lda 	#0
.2475	f5 01		sbc $01,x			sbc 	IM1,x
.2477	95 01		sta $01,x			sta 	IM1,x
.2479	a9 00		lda #$00			lda 	#0
.247b	f5 02		sbc $02,x			sbc 	IM2,x
.247d	95 02		sta $02,x			sta 	IM2,x
.247f	60		rts				rts
.2480					IFloatShiftLeft:
.2480	18		clc				clc
.2481					IFloatRotateLeft:
.2481	36 00		rol $00,x			rol 	IM0,x
.2483	36 01		rol $01,x			rol 	IM1,x
.2485	36 02		rol $02,x			rol 	IM2,x
.2487	60		rts				rts
.2488					IFloatShiftRight:
.2488	18		clc				clc
.2489					IFloatRotateRight:
.2489	76 02		ror $02,x			ror 	IM2,x
.248b	76 01		ror $01,x			ror 	IM1,x
.248d	76 00		ror $00,x			ror 	IM0,x
.248f	60		rts				rts
.2490					IFloatNormalise:
.2490	20 52 24	jsr $2452			jsr 	IFloatCheckZero 			; is it zero
.2493	f0 18		beq $24ad			beq 	_IFNExitZero 				; if so exit
.2495					_IFNLoop:
.2495	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2497	29 c0		and #$c0			and 	#$C0
.2499	c9 40		cmp #$40			cmp 	#$40
.249b	f0 13		beq $24b0			beq 	_IFNExitOkay 				; if so , then we are done.
.249d	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.249f	29 3f		and #$3f			and 	#$3F
.24a1	c9 20		cmp #$20			cmp 	#$20
.24a3	f0 0b		beq $24b0			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.24a5	20 c6 24	jsr $24c6			jsr 	IFloatDecExponent
.24a8	20 80 24	jsr $2480			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.24ab	80 e8		bra $2495			bra 	_IFNLoop
.24ad					_IFNExitZero:
.24ad	20 59 24	jsr $2459			jsr 	IFloatSetZero 				; set the result to zero
.24b0					_IFNExitOkay:
.24b0	18		clc				clc  								; return with CC.
.24b1	60		rts				rts
.24b2					IFloatIncExponent:
.24b2	b5 03		lda $03,x			lda 	IExp,x
.24b4	48		pha				pha
.24b5	29 c0		and #$c0			and 	#$C0
.24b7	8d 97 04	sta $0497			sta 	IFXTemp
.24ba	68		pla				pla
.24bb	1a		inc a				inc 	a
.24bc	29 3f		and #$3f			and 	#$3F
.24be	48		pha				pha
.24bf	0d 97 04	ora $0497			ora 	IFXTemp
.24c2	95 03		sta $03,x			sta 	IExp,x
.24c4	68		pla				pla
.24c5	60		rts				rts
.24c6					IFloatDecExponent:
.24c6	b5 03		lda $03,x			lda 	IExp,x
.24c8	48		pha				pha
.24c9	29 c0		and #$c0			and 	#$C0
.24cb	8d 97 04	sta $0497			sta 	IFXTemp
.24ce	68		pla				pla
.24cf	3a		dec a				dec 	a
.24d0	29 3f		and #$3f			and 	#$3F
.24d2	48		pha				pha
.24d3	0d 97 04	ora $0497			ora 	IFXTemp
.24d6	95 03		sta $03,x			sta 	IExp,x
.24d8	68		pla				pla
.24d9	60		rts				rts
.0497					IFXTemp:
>0497							.fill 	1
.24da					IFloatBufferReset:
.24da	9c 98 04	stz $0498			stz 	IFBufferCount
.24dd	9c 99 04	stz $0499			stz 	IFBuffer
.24e0	60		rts				rts
.24e1					IFloatGetBufferAddress:
.24e1	a0 04		ldy #$04			ldy 	#(IFBuffer >> 8)
.24e3	a2 99		ldx #$99			ldx 	#(IFBuffer & $FF)
.24e5	ad 98 04	lda $0498			lda 	IFBufferCount
.24e8	60		rts				rts
.24e9					IFloatBufferWrite:
.24e9	da		phx				phx
.24ea	ae 98 04	ldx $0498			ldx 	IFBufferCount
.24ed	9d 99 04	sta $0499,x			sta 	IFBuffer,x
.24f0	9e 9a 04	stz $049a,x			stz 	IFBuffer+1,x
.24f3	ee 98 04	inc $0498			inc 	IFBufferCount
.24f6	fa		plx				plx
.24f7	60		rts				rts
.24f8					IFloatStripTrailingZeros:
.24f8	ae 98 04	ldx $0498			ldx 	IFBufferCount
.24fb	bd 98 04	lda $0498,x			lda 	IFBuffer-1,x
.24fe	c9 30		cmp #$30			cmp		#"0"
.2500	d0 0f		bne $2511			bne 	_IFSTExit
.2502	bd 97 04	lda $0497,x			lda 	IFBuffer-2,x
.2505	c9 2e		cmp #$2e			cmp 	#"."
.2507	f0 08		beq $2511			beq 	_IFSTExit
.2509	ce 98 04	dec $0498			dec 	IFBufferCount
.250c	9e 98 04	stz $0498,x			stz 	IFBuffer-1,x
.250f	80 e7		bra $24f8			bra 	IFloatStripTrailingZeros
.2511					_IFSTExit:
.2511	60		rts				rts
.0498					IFBufferCount:
>0498							.fill 	1
.0499					IFBuffer:
>0499							.fill 	25
.2512					IFloatCheck:
.2512	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2514	09 40		ora #$40			ora 	#IFSign
.2516	85 0f		sta $0f				sta 	IFR0+IExp
.2518	20 4f 1e	jsr $1e4f			jsr 	IFloatAdd 					; add allowed to error.
.251b	a2 0c		ldx #$0c			ldx 	#IFR0
.251d	20 52 24	jsr $2452			jsr 	IFloatCheckZero 			; error if < 0
.2520	f0 06		beq $2528			beq 	_IFAOkay
.2522	a5 0f		lda $0f				lda 	IFR0+IExp
.2524	29 40		and #$40			and 	#IFSign
.2526	d0 01		bne $2529			bne 	_IFAFail
.2528					_IFAOkay:
.2528	60		rts				rts
.2529					_IFAFail:
.2529	38		sec				sec
.252a	68		pla				pla 								; get address - 2
.252b	e9 02		sbc #$02			sbc 	#2
.252d	aa		tax				tax
.252e	68		pla				pla
.252f	e9 00		sbc #$00			sbc 	#0
.2531	a8		tay				tay
.2532	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2534					_IFAStop:
>2534	db						.byte 	$DB 						; display an error AA ADR ADR
.2535	80 fd		bra $2534			bra 	_IFAStop

;******  Return to file: basic.asm

.2537					NotImplemented:
.2537	a9 ff		lda #$ff			lda 	#$FF
.2539	80 04		bra $253f			bra 	EnterDbg
.253b					ErrorHandler:
.253b	fa		plx				plx
.253c	7a		ply				ply
.253d	a9 ee		lda #$ee			lda 	#$EE
.253f					EnterDbg:
>253f	db						.byte 	$DB
.2540	4c 3f 25	jmp $253f			jmp 	EnterDbg

;******  End of listing
