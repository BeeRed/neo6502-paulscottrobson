
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D runEdit=1 -o build/basic.bin basic.asm
; Tue Jun 27 10:11:33 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					runEdit=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
.0237					OSEscapePressed:
>0237							.fill 	1
.0238					OSRKOriginal:
>0238							.fill 	1
=192					OSTextBufferSize = 192
.0239					OSXEdit:
>0239							.fill 	1
.023a					OSYEdit:
>023a							.fill 	1
.023b					OSEditWidth:
>023b							.fill 	1
.023c					OSEditPos:
>023c							.fill 	1
.023d					OSEditScroll:
>023d							.fill 	1
.023e					OSEditLength:
>023e							.fill 	1
.023f					OSEditBuffer:
>023f							.fill 	OSTextBufferSize+1
>0300							.fill 	32
>0320							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd3					OSEditLine               = $ffd3 ; Edit line, return completion in A, line in YX
=$ffd6					OSEditNewLine            = $ffd6 ; Edit line, start clear.
=$ffd9					OSWriteString            = $ffd9 ; Write length prefixed string YX to screen
=$ffdc					OSWriteStringZ           = $ffdc ; Write ASCIIZ string YX to screen
=$ffdf					OSGetScreenSize          = $ffdf ; Get size of screen to XY
=$ffe2					OSKeyboardDataProcess    = $ffe2 ; Keyboard update process.
=$ffe5					OSCheckBreak             = $ffe5 ; NZ if ESC pressed.
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 49 1f	jsr $1f49			jsr 	PGMSetBaseAddress
.1007	20 c7 2a	jsr $2ac7			jsr 	IFInitialise 				; setup math library
.100a	4c 19 96	jmp $9619			jmp 	TestCode
.100d	4c 08 14	jmp $1408			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$aa					PR_READ = $aa
=$ab					PR_DATA = $ab
=$ac					PR_RESTORE = $ac
=$ad					PR_GOTO = $ad
=$ae					PR_GOSUB = $ae
=$af					PR_RETURN = $af
=$af					PR_STANDARD_LAST = $af
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1010					Command_ASSERT:
.1010	20 06 17	jsr $1706			jsr 	EXPEvalNumber 				; get a number to assert
.1013	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1015	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero
.1018	f0 01		beq $101b			beq 	_CAFail 					; if so, the assert fails.
.101a	60		rts				rts
.101b					_CAFail:
.101b	4c d2 25	jmp $25d2		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101e					Command_CLEAR:
.101e	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1020	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1022	f0 14		beq $1038			beq 	_CLNoParam
.1024	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.1026	f0 10		beq $1038			beq 	_CLNoParam
.1028	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 			; address for CLEAR
.102b	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.102d	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.102f	b0 0b		bcs $103c			bcs 	_CLMemory
.1031	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1033	90 07		bcc $103c			bcc 	_CLMemory
.1035	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.1038					_CLNoParam:
.1038	20 3f 10	jsr $103f			jsr 	ClearCode
.103b	60		rts				rts
.103c					_CLMemory:
.103c	4c 6c 26	jmp $266c		jmp	ErrorV_memory
.103f					ClearCode:
.103f	20 5c 1f	jsr $1f5c			jsr 	PGMEndProgram 				; end program => zTemp0
.1042	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1044	a5 23		lda $23				lda 	zTemp0+1 					; for variables.
.1046	1a		inc a				inc 	a
.1047	85 29		sta $29				sta 	freeMemory+1
.1049	20 66 2a	jsr $2a66			jsr 	VARClearHashTables
.104c	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.104f	20 a0 27	jsr $27a0			jsr 	StackReset 					; page passed on in A
.1052	20 ff 27	jsr $27ff			jsr 	StringSystemInitialise
.1055	20 e7 24	jsr $24e7			jsr 	ScanProcedures
.1058	20 92 14	jsr $1492			jsr 	Command_RESTORE
.105b	60		rts				rts
.105c					AllocateMemory:
.105c	5a		phy				phy 								; save Y
.105d	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low (of final memory)
.105f	5a		phy				phy
.1060	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.1062	5a		phy				phy
.1063	a8		tay				tay 								; count is now in XY
.1064					_AllocateLoop:
.1064	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.1066	d0 04		bne $106c			bne 	_AllocateOne
.1068	c0 00		cpy #$00			cpy 	#0
.106a	f0 15		beq $1081			beq 	_AllocateExit
.106c					_AllocateOne:
.106c	a9 00		lda #$00			lda 	#0 							; zero byte
.106e	92 28		sta ($28)			sta 	(freeMemory)
.1070	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.1072	d0 05		bne $1079			bne 	_AllocateSkipCarry
.1074	e6 29		inc $29				inc 	freeMemory+1
.1076	20 85 10	jsr $1085			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.1079					_AllocateSkipCarry:
.1079	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.107b	d0 01		bne $107e			bne 	_AllocateSkipBorrow
.107d	ca		dex				dex
.107e					_AllocateSkipBorrow:
.107e	88		dey				dey
.107f	80 e3		bra $1064			bra 	_AllocateLoop
.1081					_AllocateExit:
.1081	fa		plx				plx 								; restore address
.1082	68		pla				pla
.1083	7a		ply				ply 								; restore Y
.1084	60		rts				rts
.1085					ClearCheckMemory:
.1085	a5 29		lda $29				lda 	freeMemory+1 				; allocatable memory
.1087	1a		inc a				inc 	a 							; spacing 2 pages
.1088	1a		inc a				inc 	a
.1089	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.108c	b0 01		bcs $108f			bcs  	_CCMError
.108e	60		rts				rts
.108f					_CCMError:
.108f	4c 6c 26	jmp $266c		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1092					CommandDIM:
.1092	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1094	29 c0		and #$c0			and 	#$C0
.1096	c9 40		cmp #$40			cmp 	#$40
.1098	d0 39		bne $10d3			bne 	_CDSyntax
.109a	20 1d 2a	jsr $2a1d			jsr 	VARGetInfo 					; get information
.109d	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.10a0	29 02		and #$02			and 	#2
.10a2	f0 2f		beq $10d3			beq 	_CDSyntax
.10a4	20 cf 29	jsr $29cf			jsr 	VARFind 					; does it already exist
.10a7	b0 2d		bcs $10d6			bcs 	_CDExists
.10a9	20 7b 29	jsr $297b			jsr 	VARCreate 					; create it - returns data ptr in XA
.10ac	da		phx				phx 								; save target address
.10ad	48		pha				pha
.10ae	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10b1	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b3	20 d9 10	jsr $10d9			jsr 	CreateArray 				; create array to XA
.10b6	84 24		sty $24				sty 	zTemp1 						; save Y
.10b8	7a		ply				ply 								; restore target to zTemp0
.10b9	84 22		sty $22				sty 	zTemp0
.10bb	7a		ply				ply
.10bc	84 23		sty $23				sty 	zTemp0+1
.10be	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10c0	a0 01		ldy #$01			ldy 	#1
.10c2	8a		txa				txa
.10c3	91 22		sta ($22),y			sta 	(zTemp0),y
.10c5	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10c7	20 31 27	jsr $2731			jsr 	ERRCheckRParen 				; check )
.10ca	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10cc	c8		iny				iny
.10cd	c9 99		cmp #$99			cmp 	#PR_COMMA
.10cf	f0 c1		beq $1092			beq 	CommandDIM
.10d1	88		dey				dey
.10d2	60		rts				rts
.10d3					_CDSyntax:
.10d3	4c 7c 25	jmp $257c		jmp	ErrorV_syntax
.10d6					_CDExists:
.10d6	4c 44 26	jmp $2644		jmp	ErrorV_redefine
.10d9					CreateArray:
.10d9	8d 03 05	sta $0503			sta 	CAType						; save type
.10dc	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10df	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e1	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e3	f0 04		beq $10e9			beq 	_CATwoDimensions
.10e5	20 35 11	jsr $1135			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10e8	60		rts				rts
.10e9					_CATwoDimensions:
.10e9	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10eb	8d 05 05	sta $0505			sta 	CADim1+1
.10ee	a5 08		lda $08				lda 	IFR0+IM0
.10f0	8d 04 05	sta $0504			sta 	CADim1+0
.10f3	20 39 27	jsr $2739			jsr 	ERRCheckComma 				; check comma
.10f6	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10f9	5a		phy				phy 								; save Y position
.10fa	18		clc				clc 								; allocate the outer array of pointers.
.10fb	ae 05 05	ldx $0505			ldx 	CADim1+1
.10fe	ad 04 05	lda $0504			lda 	CADim1
.1101	20 74 11	jsr $1174			jsr 	CSAAllocate 				; allocate the outer array
.1104	da		phx				phx									; save this address on the stack
.1105	48		pha				pha
.1106	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.1108	85 26		sta $26				sta 	zTemp2
.110a					_CACreateSubLoop:
.110a	38		sec				sec
.110b	20 35 11	jsr $1135			jsr 	CreateSingleArray 			; create data array of required size.
.110e	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1110	91 26		sta ($26),y			sta 	(zTemp2),y
.1112	8a		txa				txa
.1113	c8		iny				iny
.1114	91 26		sta ($26),y			sta 	(zTemp2),y
.1116	18		clc				clc  								; next slot.
.1117	a5 26		lda $26				lda 	zTemp2
.1119	69 02		adc #$02			adc 	#2
.111b	85 26		sta $26				sta 	zTemp2
.111d	90 02		bcc $1121			bcc 	_CACNoCarry
.111f	e6 27		inc $27				inc 	zTemp2+1
.1121					_CACNoCarry:
.1121	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1124	d0 03		bne $1129			bne 	_CACNoBorrow
.1126	ce 05 05	dec $0505			dec 	CADim1+1
.1129					_CACNoBorrow:
.1129	ce 04 05	dec $0504			dec 	CADim1
.112c	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.112f	10 d9		bpl $110a			bpl 	_CACreateSubLoop
.1131	68		pla				pla
.1132	fa		plx				plx
.1133	7a		ply				ply
.1134	60		rts				rts
.1135					CreateSingleArray:
.1135	5a		phy				phy
.1136	38		sec				sec 								; allocate memory block all zeros.
.1137	a5 08		lda $08				lda 	IFR0+IM0
.1139	a6 09		ldx $09				ldx 	IFR0+IM1
.113b	20 74 11	jsr $1174			jsr 	CSAAllocate
.113e	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1141	f0 2f		beq $1172			beq 	_CSANoInit
.1143	da		phx				phx 								; save address of new array
.1144	48		pha				pha
.1145	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.1147	86 23		stx $23				stx 	zTemp0+1
.1149	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.114b	b1 22		lda ($22),y			lda 	(zTemp0),y
.114d	a8		tay				tay
.114e	b2 22		lda ($22)			lda 	(zTemp0)
.1150	aa		tax				tax
.1151					_CSAEraseString:
.1151	5a		phy				phy
.1152	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1154	a9 80		lda #$80			lda 	#$80
.1156	91 22		sta ($22),y			sta 	(zTemp0),y
.1158	7a		ply				ply
.1159	18		clc				clc 								; add 4 to next slot.
.115a	a5 22		lda $22				lda 	zTemp0
.115c	69 04		adc #$04			adc 	#4
.115e	85 22		sta $22				sta 	zTemp0
.1160	90 02		bcc $1164			bcc 	_CSAENoCarry
.1162	e6 23		inc $23				inc 	zTemp0+1
.1164					_CSAENoCarry:
.1164	e0 00		cpx #$00			cpx 	#0
.1166	d0 01		bne $1169			bne 	_CSANoBorrow
.1168	88		dey				dey
.1169					_CSANoBorrow:
.1169	ca		dex				dex
.116a	d0 e5		bne $1151			bne 	_CSAEraseString
.116c	c0 00		cpy #$00			cpy 	#0
.116e	d0 e1		bne $1151			bne 	_CSAEraseString
.1170	68		pla				pla
.1171	fa		plx				plx
.1172					_CSANoInit:
.1172	7a		ply				ply
.1173	60		rts				rts
.1174					CSAAllocate:
.1174	08		php				php 								; save type flag.
.1175	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.1176	d0 01		bne $1179			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1178	e8		inx				inx
.1179					_CSAANoCarry:
.1179	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.117b	b0 2e		bcs $11ab			bcs 	_CSARange
.117d	28		plp				plp 								; restore type flag
.117e	08		php				php 								; save it back again.
.117f	da		phx				phx 								; save size.
.1180	48		pha				pha
.1181	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1183	90 03		bcc $1188			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.1185	0a		asl a				asl 	a
.1186	26 23		rol $23				rol 	zTemp0+1
.1188					_CSAATimes2:
.1188	0a		asl a				asl 	a
.1189	26 23		rol $23				rol 	zTemp0+1
.118b	18		clc				clc
.118c	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.118e	90 02		bcc $1192			bcc 	_CSAANoCarry2
.1190	e6 23		inc $23				inc 	zTemp0+1
.1192					_CSAANoCarry2:
.1192	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1194	20 5c 10	jsr $105c			jsr 	AllocateMemory 				; allocate memory to XA
.1197	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.1199	85 22		sta $22				sta 	zTemp0
.119b	68		pla				pla  								; write element count to first 2 bytes
.119c	92 22		sta ($22)			sta 	(zTemp0)
.119e	68		pla				pla 								; msb of element count
.119f	28		plp				plp 								; CC if pointer array
.11a0	b0 02		bcs $11a4			bcs 	_CSAAIsData
.11a2	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a4					_CSAAIsData:
.11a4	a0 01		ldy #$01			ldy 	#1
.11a6	91 22		sta ($22),y			sta 	(zTemp0),y
.11a8	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11aa	60		rts				rts
.11ab					_CSARange:
.11ab	4c 8d 25	jmp $258d		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11ae					Command_Doke:
.11ae	38		sec				sec
.11af	80 01		bra $11b2			bra 	DPCommon
.11b1					Command_Poke:
.11b1	18		clc				clc
.11b2					DPCommon:
.11b2	08		php				php 								; CS if DOKE
.11b3	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 			; address
.11b6	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11b8	48		pha				pha
.11b9	a5 09		lda $09				lda 	IFR0+IM1
.11bb	48		pha				pha
.11bc	20 39 27	jsr $2739			jsr 	ERRCheckComma 				; [dp]oke address,data
.11bf	20 18 17	jsr $1718			jsr 	EXPEvalInteger16
.11c2	68		pla				pla 								; get address back
.11c3	85 23		sta $23				sta 	zTemp0+1
.11c5	68		pla				pla
.11c6	85 22		sta $22				sta 	zTemp0
.11c8	a5 08		lda $08				lda 	IFR0+IM0
.11ca	92 22		sta ($22)			sta 	(zTemp0)
.11cc	28		plp				plp
.11cd	90 08		bcc $11d7			bcc 	_DPExit
.11cf	5a		phy				phy
.11d0	a5 09		lda $09				lda 	IFR0+IM1
.11d2	a0 01		ldy #$01			ldy 	#1
.11d4	91 22		sta ($22),y			sta 	(zTemp0),y
.11d6	7a		ply				ply
.11d7					_DPExit:
.11d7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11d8					Command_GOTO:
.11d8	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 			; get line number
.11db					GotoR0:
.11db	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11de	85 19		sta $19				sta 	codePtr+1
.11e0	64 18		stz $18				stz 	codePtr
.11e2					_GOSearch:
.11e2	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e4	f0 1f		beq $1205			beq 	_GOError
.11e6	a0 01		ldy #$01			ldy 	#1 							; found line #
.11e8	b1 18		lda ($18),y			lda 	(codePtr),y
.11ea	c5 08		cmp $08				cmp 	IFR0+IM0
.11ec	d0 0a		bne $11f8			bne 	_GONext
.11ee	c8		iny				iny
.11ef	b1 18		lda ($18),y			lda 	(codePtr),y
.11f1	c5 09		cmp $09				cmp 	IFR0+IM1
.11f3	d0 03		bne $11f8			bne 	_GONext
.11f5	4c d7 14	jmp $14d7			jmp 	RUNNewLine
.11f8					_GONext:
.11f8	18		clc				clc 								; advance to next line.
.11f9	b2 18		lda ($18)			lda 	(codePtr)
.11fb	65 18		adc $18				adc 	codePtr
.11fd	85 18		sta $18				sta 	codePtr
.11ff	90 e1		bcc $11e2			bcc 	_GOSearch
.1201	e6 19		inc $19				inc 	codePtr+1
.1203	80 dd		bra $11e2			bra 	_GOSearch
.1205					_GOError:
.1205	4c 11 27	jmp $2711		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1208					Command_Input:
.1208	a9 ff		lda #$ff			lda 	#$FF
.120a	8d 06 05	sta $0506			sta 	InputFlag
.120d	80 03		bra $1212			bra 	Command_IP_Main
.120f					Command_Print:
.120f	9c 06 05	stz $0506			stz 	InputFlag
.1212					Command_IP_Main:
.1212	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1213					_CPLoop:
.1213	08		php				php 								; save last action flag
.1214	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.1216	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1218	f0 4e		beq $1268			beq 	_CPExit 					; without consuming
.121a	c9 9b		cmp #$9b			cmp 	#PR_COLON
.121c	f0 4a		beq $1268			beq 	_CPExit
.121e	68		pla				pla 								; throw last action flag
.121f	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.1221	c8		iny				iny
.1222	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1224	f0 3f		beq $1265			beq 	_CPContinueWithSameLine
.1226	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1228	f0 36		beq $1260			beq 	_CPTab
.122a	88		dey				dey 								; undo the get.
.122b	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.122e	10 0b		bpl $123b			bpl	 	_CPNotInput
.1230	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1232	c9 40		cmp #$40			cmp 	#$40
.1234	d0 05		bne $123b			bne 	_CPNotInput
.1236	20 71 12	jsr $1271			jsr 	_CPInputCode 				; input code
.1239	80 d7		bra $1212			bra 	Command_IP_Main 			; and go round again.
.123b					_CPNotInput:
.123b	20 c6 16	jsr $16c6			jsr 	EXPEvaluateExpression 		; evaluate expression.
.123e	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1240	10 14		bpl $1256			bpl 	_CPNumber
.1242	5a		phy				phy
.1243	18		clc				clc 								; string address to YX
.1244	a5 08		lda $08				lda 	IFR0+IM0
.1246	aa		tax				tax
.1247	a5 09		lda $09				lda 	IFR0+IM1
.1249	a8		tay				tay
.124a	e8		inx				inx 								; point to 1st character
.124b	d0 01		bne $124e			bne 	_CPNoCarry
.124d	c8		iny				iny
.124e					_CPNoCarry:
.124e	b2 08		lda ($08)			lda 	(IFR0+IM0)					; length to A
.1250	20 a5 12	jsr $12a5			jsr 	CPPrintAYX 					; print AYX
.1253	7a		ply				ply
.1254	80 bc		bra $1212			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1256					_CPNumber:
.1256	5a		phy				phy
.1257	20 d7 2e	jsr $2ed7			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.125a	20 a5 12	jsr $12a5			jsr 	CPPrintAYX 					; print AYX
.125d	7a		ply				ply
.125e	80 b2		bra $1212			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1260					_CPTab:
.1260	a9 09		lda #$09			lda 	#9 							; print TAB
.1262	20 bb 12	jsr $12bb			jsr 	CPPrintA
.1265					_CPContinueWithSameLine:
.1265	38		sec				sec 								; loop round with carry set, which
.1266	80 ab		bra $1213			bra 	_CPLoop 					; will inhibit final CR
.1268					_CPExit:
.1268	28		plp				plp 								; get last action flag
.1269	b0 05		bcs $1270			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.126b	a9 0d		lda #$0d			lda 	#13 						; print new line
.126d	20 bb 12	jsr $12bb			jsr 	CPPrintA
.1270					_CPExit2:
.1270	60		rts				rts
.1271					_CPInputCode:
.1271	20 8e 17	jsr $178e			jsr 	EXPTermR0 					; get the term.
.1274	5a		phy				phy 								; save position
.1275	20 b8 12	jsr $12b8			jsr 	CPInputA					; input a line to YX
.1278	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.127a	30 18		bmi $1294			bmi 	_CPInputString
.127c	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.127e	48		pha				pha
.127f	a5 09		lda $09				lda 	IFR0+IM1
.1281	48		pha				pha
.1282	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1284	84 23		sty $23				sty 	zTemp0+1
.1286	20 77 1a	jsr $1a77			jsr 	VALConversionZTemp0
.1289	68		pla				pla 								; do the assign.
.128a	85 23		sta $23				sta 	zTemp0+1
.128c	68		pla				pla
.128d	85 22		sta $22				sta 	zTemp0
.128f	20 e3 12	jsr $12e3			jsr 	AssignNumber
.1292	7a		ply				ply
.1293	60		rts				rts
.1294					_CPInputString:
.1294	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1296	85 22		sta $22				sta 	zTemp0
.1298	a5 09		lda $09				lda 	IFR0+IM1
.129a	85 23		sta $23				sta 	zTemp0+1
.129c	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.129e	84 09		sty $09				sty 	IFR0+IM1
.12a0	20 fa 12	jsr $12fa			jsr 	AssignString 				; assign the string
.12a3	7a		ply				ply 								; exit
.12a4	60		rts				rts
.12a5					CPPrintAYX:
.12a5	86 22		stx $22				stx 	zTemp0
.12a7	84 23		sty $23				sty 	zTemp0+1
.12a9	aa		tax				tax
.12aa	f0 0b		beq $12b7			beq 	_CPPrintExit
.12ac	a0 00		ldy #$00			ldy 	#0
.12ae					_CPPrintAYXLoop:
.12ae	b1 22		lda ($22),y			lda 	(zTemp0),y
.12b0	20 bb 12	jsr $12bb			jsr 	CPPrintA
.12b3	c8		iny				iny
.12b4	ca		dex				dex
.12b5	d0 f7		bne $12ae			bne 	_CPPrintAYXLoop
.12b7					_CPPrintExit:
.12b7	60		rts				rts
.12b8					CPInputA:
.12b8	4c d6 ff	jmp $ffd6			jmp 	OSEditNewLine
.12bb					CPPrintA:
.12bb	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12be					CommandLET:
.12be	20 8e 17	jsr $178e			jsr 	EXPTermR0 					; get term
.12c1	90 6f		bcc $1332			bcc 	CLError 					; must be a reference term.
.12c3	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12c5	48		pha				pha
.12c6	a5 09		lda $09				lda 	IFR0+IM1
.12c8	48		pha				pha
.12c9	a5 0b		lda $0b				lda 	IFR0+IExp
.12cb	48		pha				pha
.12cc	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12ce	20 41 27	jsr $2741			jsr 	ERRCheckA
.12d1	20 c6 16	jsr $16c6			jsr 	EXPEvaluateExpression 		; right hand side.
.12d4	68		pla				pla 								; type of l-expr
.12d5	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d7	30 5c		bmi $1335			bmi 	CLType
.12d9	fa		plx				plx 	 							; pop target address to zTemp0
.12da	86 23		stx $23				stx 	zTemp0+1
.12dc	fa		plx				plx
.12dd	86 22		stx $22				stx 	zTemp0
.12df					AssignData:
.12df	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12e1	30 17		bmi $12fa			bmi 	AssignString
.12e3					AssignNumber:
.12e3	5a		phy				phy
.12e4	a0 03		ldy #$03			ldy 	#3
.12e6	a5 0b		lda $0b				lda 	IFR0+IExp
.12e8	91 22		sta ($22),y			sta 	(zTemp0),y
.12ea	88		dey				dey
.12eb	a5 0a		lda $0a				lda 	IFR0+IM2
.12ed	91 22		sta ($22),y			sta 	(zTemp0),y
.12ef	88		dey				dey
.12f0	a5 09		lda $09				lda 	IFR0+IM1
.12f2	91 22		sta ($22),y			sta 	(zTemp0),y
.12f4	a5 08		lda $08				lda 	IFR0+IM0
.12f6	92 22		sta ($22)			sta 	(zTemp0)
.12f8	7a		ply				ply
.12f9	60		rts				rts
.12fa					AssignString:
.12fa	5a		phy				phy
.12fb	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12fd	b1 22		lda ($22),y			lda 	(zTemp0),y
.12ff	12 22		ora ($22)			ora 	(zTemp0)
.1301	f0 23		beq $1326			beq 	_CLConcreteString
.1303	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1305	85 24		sta $24				sta 	zTemp1
.1307	b1 22		lda ($22),y			lda 	(zTemp0),y
.1309	85 25		sta $25				sta 	zTemp1+1
.130b	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.130d	38		sec				sec 								; we want 3 for slot size, status, string size.
.130e	e9 03		sbc #$03			sbc 	#3
.1310	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1312	90 12		bcc $1326			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1314	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1316	1a		inc a				inc 	a
.1317	aa		tax				tax
.1318	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.131a					_CLReplaceString:
.131a	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.131c	c8		iny				iny
.131d	c8		iny				iny
.131e	91 24		sta ($24),y			sta 	(zTemp1),y
.1320	88		dey				dey
.1321	ca		dex				dex
.1322	d0 f6		bne $131a			bne 	_CLReplaceString
.1324	80 0a		bra $1330			bra 	_CLExit
.1326					_CLConcreteString:
.1326	20 b4 27	jsr $27b4			jsr 	StringConcrete  			; concreted string in XA.
.1329	a0 01		ldy #$01			ldy 	#1 							; store the address
.132b	92 22		sta ($22)			sta 	(zTemp0)
.132d	8a		txa				txa
.132e	91 22		sta ($22),y			sta 	(zTemp0),y
.1330					_CLExit:
.1330	7a		ply				ply
.1331	60		rts				rts
.1332					CLError:
.1332	4c af 26	jmp $26af		jmp	ErrorV_variable
.1335					CLType:
.1335	4c ac 25	jmp $25ac		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1338					Command_LIST:
.1338	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.133b	9c 08 05	stz $0508			stz 	CLFrom+1
.133e	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1340	c9 99		cmp #$99			cmp 	#PR_COMMA
.1342	f0 1d		beq $1361			beq 	_CLToLine
.1344	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1346	f0 37		beq $137f			beq 	_CLDefaultTo
.1348	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.134b	a5 08		lda $08				lda 	IFR0+IM0
.134d	8d 07 05	sta $0507			sta 	CLFrom
.1350	8d 09 05	sta $0509			sta 	CLTo
.1353	a5 09		lda $09				lda 	IFR0+IM1
.1355	8d 08 05	sta $0508			sta 	CLFrom+1
.1358	8d 0a 05	sta $050a			sta 	CLTo+1
.135b	b1 18		lda ($18),y			lda 	(codePtr),y
.135d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.135f	f0 26		beq $1387			beq 	_CLList
.1361					_CLToLine:
.1361	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1363	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1365	f0 18		beq $137f			beq 	_CLDefaultTo
.1367	20 39 27	jsr $2739			jsr 	ERRCheckComma 				; sep comma
.136a	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.136c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.136e	f0 0f		beq $137f			beq 	_CLDefaultTo
.1370	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 			; there's a To value.
.1373	a5 08		lda $08				lda 	IFR0+IM0
.1375	8d 09 05	sta $0509			sta 	CLTo
.1378	a5 09		lda $09				lda 	IFR0+IM1
.137a	8d 0a 05	sta $050a			sta 	CLTo+1
.137d	80 08		bra $1387			bra 	_CLList
.137f					_CLDefaultTo:
.137f	a9 ff		lda #$ff			lda 	#$FF
.1381	8d 09 05	sta $0509			sta 	CLTo
.1384	8d 0a 05	sta $050a			sta 	CLTo+1
.1387					_CLList:
.1387	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.138a	85 19		sta $19				sta 	codePtr+1
.138c	64 18		stz $18				stz 	codePtr
.138e	a2 f1		ldx #$f1			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1390	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1392	20 ab 1d	jsr $1dab			jsr 	TOKSetDetokeniseOutput
.1395					_CLLoop:
.1395	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1397	f0 4a		beq $13e3			beq 	_CLExit
.1399	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.139c	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.139f	d0 45		bne $13e6			bne 	_CLBreak
.13a1	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13a3	20 e9 13	jsr $13e9			jsr 	_CLCompareLine
.13a6	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a8	f0 2c		beq $13d6			beq 	_CLNext
.13aa	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13ac	20 e9 13	jsr $13e9			jsr 	_CLCompareLine
.13af	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13b1	f0 23		beq $13d6			beq 	_CLNext
.13b3	a0 02		ldy #$02			ldy 	#2 							; print line #
.13b5	b1 18		lda ($18),y			lda 	(codePtr),y
.13b7	aa		tax				tax
.13b8	88		dey				dey
.13b9	b1 18		lda ($18),y			lda 	(codePtr),y
.13bb	20 92 28	jsr $2892			jsr 	WriteIntXA
.13be	a9 20		lda #$20			lda 	#32
.13c0	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13c3	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13c5	a5 18		lda $18				lda 	codePtr
.13c7	18		clc				clc
.13c8	69 03		adc #$03			adc 	#3
.13ca	aa		tax				tax
.13cb	90 01		bcc $13ce			bcc 	_CLNoCarry2
.13cd	c8		iny				iny
.13ce					_CLNoCarry2:
.13ce	20 66 1d	jsr $1d66			jsr 	TOKDetokenise
.13d1	a9 0d		lda #$0d			lda 	#13	 						; next line
.13d3	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.13d6					_CLNext:
.13d6	18		clc				clc 								; advance to next line.
.13d7	b2 18		lda ($18)			lda 	(codePtr)
.13d9	65 18		adc $18				adc 	codePtr
.13db	85 18		sta $18				sta 	codePtr
.13dd	90 02		bcc $13e1			bcc 	_CLNoCarry
.13df	e6 19		inc $19				inc 	codePtr+1
.13e1					_CLNoCarry:
.13e1	80 b2		bra $1395			bra 	_CLLoop
.13e3					_CLExit:
.13e3	4c b1 28	jmp $28b1			jmp 	WarmStart
.13e6					_CLBreak:
.13e6	4c 07 27	jmp $2707		jmp	ErrorV_break
.13e9					_CLCompareLine:
.13e9	a0 01		ldy #$01			ldy 	#1
.13eb	38		sec				sec
.13ec	b1 18		lda ($18),y			lda 	(codePtr),y
.13ee	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f1	85 22		sta $22				sta 	zTemp0
.13f3	c8		iny				iny
.13f4	b1 18		lda ($18),y			lda 	(codePtr),y
.13f6	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.13f9	90 0a		bcc $1405			bcc 	_CLIsNegative
.13fb	d0 05		bne $1402			bne 	_CLIsPositive
.13fd	a5 22		lda $22				lda 	zTemp0
.13ff	d0 01		bne $1402			bne 	_CLIsPositive
.1401	60		rts				rts
.1402					_CLIsPositive:
.1402	a9 01		lda #$01			lda 	#1
.1404	60		rts				rts
.1405					_CLIsNegative:
.1405	a9 ff		lda #$ff			lda 	#255
.1407	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1408					Command_NEW:
.1408	20 50 1f	jsr $1f50			jsr 	PGMNewProgram 				; Reset current program
.140b	20 3f 10	jsr $103f			jsr 	ClearCode 					; Run CLR
.140e	4c 2b 15	jmp $152b			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1411					Command_READ:
.1411	20 8e 17	jsr $178e			jsr 	EXPTermR0 					; get term to R0
.1414	90 35		bcc $144b			bcc 	_CRSyntax 					; fail if not a reference.
.1416	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1418	48		pha				pha
.1419	a5 09		lda $09				lda 	IFR0+IM1
.141b	48		pha				pha
.141c	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.141e	48		pha				pha
.141f	20 a4 14	jsr $14a4			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1422	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.1425	d0 27		bne $144e			bne 	_CRHaveData  				; forward for the next one.
.1427					_CRNextLine:
.1427	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1429	f0 1a		beq $1445			beq 	_CRNoData
.142b					_CRKeepSearching:
.142b	a9 ab		lda #$ab			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.142d	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.142f	20 8c 24	jsr $248c			jsr 	ScanForward
.1432	c9 ab		cmp #$ab			cmp 	#PR_DATA 					; found data ?
.1434	f0 18		beq $144e			beq 	_CRHaveData 				; found it
.1436	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1438	18		clc				clc 								; try the next line, keep going.
.1439	b2 18		lda ($18)			lda 	(codePtr)
.143b	65 18		adc $18				adc 	codePtr
.143d	85 18		sta $18				sta 	codePtr
.143f	90 e6		bcc $1427			bcc 	_CRNextLine
.1441	e6 19		inc $19				inc 	codePtr+1
.1443	80 e2		bra $1427			bra 	_CRNextLine
.1445					_CRNoData:
.1445	4c 34 26	jmp $2634		jmp	ErrorV_data
.1448					_CLType:
.1448	4c ac 25	jmp $25ac		jmp	ErrorV_type
.144b					_CRSyntax:
.144b	4c 7c 25	jmp $257c		jmp	ErrorV_syntax
.144e					_CRHaveData:
.144e	20 c6 16	jsr $16c6			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1451	68		pla				pla 								; type of l-expr
.1452	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.1454	30 f2		bmi $1448			bmi 	_CLType
.1456	68		pla				pla 								; restore address
.1457	85 23		sta $23				sta 	zTemp0+1
.1459	68		pla				pla
.145a	85 22		sta $22				sta 	zTemp0
.145c	20 df 12	jsr $12df			jsr 	AssignData 					; write R0 there.
.145f	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1462	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.1464	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.1466	d0 04		bne $146c			bne 	_CRSwapBack
.1468	c8		iny				iny 								; consume comma
.1469	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.146c					_CRSwapBack:
.146c	20 a4 14	jsr $14a4			jsr 	SwapCodeDataPointers		; swap them back.
.146f	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1471	c8		iny				iny
.1472	c9 99		cmp #$99			cmp 	#PR_COMMA
.1474	f0 9b		beq $1411			beq 	Command_READ 				; if so go round again.
.1476	88		dey				dey 								; unpick get.
.1477	60		rts				rts
.1478					Command_DATA:
.1478	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.147a	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.147c	20 8c 24	jsr $248c			jsr 	ScanForward
.147f	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1481	d0 01		bne $1484			bne 	_CDNotEOL
.1483	88		dey				dey
.1484					_CDNotEOL:
.1484	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1485					Command_REM:
.1485					Command_REM2:
.1485	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.1487	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1489	d0 06		bne $1491			bne 	_CRExit
.148b	c8		iny				iny 								; skip over it, it's a comment.
.148c	98		tya				tya
.148d	38		sec				sec
.148e	71 18		adc ($18),y			adc 	(codePtr),y
.1490	a8		tay				tay
.1491					_CRExit:
.1491	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.1492					S
.1492					Command_RESTORE:
.1492	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1495	8d 0c 05	sta $050c			sta 	dataPtr+1
.1498	9c 0b 05	stz $050b			stz 	dataPtr
.149b	a9 03		lda #$03			lda 	#3 							; position start of line
.149d	8d 0d 05	sta $050d			sta 	dataPos
.14a0	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14a3	60		rts				rts
.14a4					SwapCodeDataPointers:
.14a4	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14a7	a6 18		ldx $18				ldx 	codePtr
.14a9	85 18		sta $18				sta 	codePtr
.14ab	8e 0b 05	stx $050b			stx 	dataPtr
.14ae	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14b1	a6 19		ldx $19				ldx 	codePtr+1
.14b3	85 19		sta $19				sta 	codePtr+1
.14b5	8e 0c 05	stx $050c			stx 	dataPtr+1
.14b8	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14bb	8c 0d 05	sty $050d			sty 	dataPos
.14be	a8		tay				tay
.14bf	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c0					Command_RUN:
.14c0	20 3f 10	jsr $103f			jsr 	ClearCode					; clear everything out.
.14c3	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14c6	85 19		sta $19				sta 	codePtr+1
.14c8	64 18		stz $18				stz 	codePtr
.14ca	80 0b		bra $14d7			bra 	RUNNewLine
.14cc					RUNEndOfLine:
.14cc	18		clc				clc 								; advance to next line.
.14cd	b2 18		lda ($18)			lda 	(codePtr)
.14cf	65 18		adc $18				adc 	codePtr
.14d1	85 18		sta $18				sta 	codePtr
.14d3	90 02		bcc $14d7			bcc 	_RELNoCarry
.14d5	e6 19		inc $19				inc 	codePtr+1
.14d7					_RELNoCarry:
.14d7					RUNNewLine:
.14d7	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14d9	9a		txs				txs
.14da	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14dc	f0 4d		beq $152b			beq 	Command_END
.14de	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e0	b1 18		lda ($18),y			lda 	(codePtr),y
.14e2	8d 26 06	sta $0626			sta 	ERRLine
.14e5	c8		iny				iny
.14e6	b1 18		lda ($18),y			lda 	(codePtr),y
.14e8	8d 27 06	sta $0627			sta 	ERRLine+1
.14eb	c8		iny				iny 								; offset into codePtr for start of line.
.14ec					RUNNewCommand:
.14ec	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14ef	ce 10 05	dec $0510			dec 	checkCounter
.14f2	d0 0a		bne $14fe			bne 	_RNCNoCheck
.14f4	5a		phy				phy 								; keyboard check.
.14f5	20 e2 ff	jsr $ffe2			jsr 	OSKeyboardDataProcess
.14f8	7a		ply				ply
.14f9	20 e5 ff	jsr $ffe5			jsr 	OSCheckBreak 				; check escape.
.14fc	d0 1e		bne $151c			bne 	_RUNBreak
.14fe					_RNCNoCheck:
.14fe	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1500	10 1d		bpl $151f			bpl		_RUNNotToken 				; probably an identifier
.1502	c8		iny				iny 								; consume token
.1503	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1505	f0 e5		beq $14ec			beq 	RUNNewCommand
.1507	c9 b0		cmp #$b0			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1509	b0 0e		bcs $1519			bcs 	_RUNSyntax
.150b	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.150d	90 0a		bcc $1519			bcc 	_RUNSyntax
.150f	0a		asl a				asl 	a 							; double into X.
.1510	aa		tax				tax
.1511	20 16 15	jsr $1516			jsr 	_RUNDispatchMain			; call the main dispatcher
.1514	80 d6		bra $14ec			bra 	RUNNewCommand
.1516					_RUNDispatchMain:
.1516	7c 66 1c	jmp ($1c66,x)			jmp 	(VectorTable,x)
.1519					_RUNSyntax:
.1519	4c 7c 25	jmp $257c		jmp	ErrorV_syntax
.151c					_RUNBreak:
.151c	4c 07 27	jmp $2707		jmp	ErrorV_break
.151f					_RUNNotToken:
.151f	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1521	90 f6		bcc $1519			bcc 	_RUNSyntax
.1523	20 be 12	jsr $12be			jsr 	CommandLET 					; assignment
.1526	80 c4		bra $14ec			bra 	RUNNewCommand 				; loop round.
.1528					Command_Shift_Handler:
.1528	4c be 25	jmp $25be		jmp	ErrorV_unimplemented
.152b					Command_END:
.152b	4c b1 28	jmp $28b1			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.152e					Command_STOP:
.152e	4c 20 26	jmp $2620		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.1531					Command_Sys:
.1531	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 			; execution address
.1534	5a		phy				phy
.1535	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1538	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.153b	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.153e	20 43 15	jsr $1543			jsr 	_CSCallIFR0 				; call the code
.1541	7a		ply				ply
.1542	60		rts				rts
.1543					_CSCallIFR0:
.1543	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1546					NoExec01:
.1546					NoExec02:
.1546					NoExec03:
.1546					NoExec04:
.1546					NoExec05:
.1546					NoExec06:
.1546					NoExec07:
.1546					NoExec08:
.1546	4c 7c 25	jmp $257c		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1549					EXPBinAdd:
.1549	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.154b	30 6f		bmi $15bc			bmi 	EXPConcatenate
.154d	a2 0c		ldx #$0c			ldx 	#IFR1
.154f	4c d2 2a	jmp $2ad2			jmp 	IFloatAdd
.1552					EXPBinSub:
.1552	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1554	30 3f		bmi $1595			bmi 	EXPTypeError
.1556	a2 0c		ldx #$0c			ldx 	#IFR1
.1558	4c cb 2a	jmp $2acb			jmp 	IFloatSubtract
.155b					EXPBinMul:
.155b	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.155d	30 36		bmi $1595			bmi 	EXPTypeError
.155f	a2 0c		ldx #$0c			ldx 	#IFR1
.1561	4c 7c 2b	jmp $2b7c			jmp 	IFloatMultiply
.1564					EXPBinFDiv:
.1564	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1566	30 2d		bmi $1595			bmi 	EXPTypeError
.1568	a2 0c		ldx #$0c			ldx 	#IFR1
.156a	20 fe 2d	jsr $2dfe			jsr 	IFloatDivideFloat
.156d	b0 0f		bcs $157e			bcs 	EXPDZero
.156f	60		rts				rts
.1570					EXPBinIDiv:
.1570	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1572	30 21		bmi $1595			bmi 	EXPTypeError
.1574	a2 0c		ldx #$0c			ldx 	#IFR1
.1576	20 fe 2d	jsr $2dfe			jsr 	IFloatDivideFloat
.1579	b0 03		bcs $157e			bcs 	EXPDZero
.157b	4c db 2d	jmp $2ddb			jmp 	IFloatIntegerR0
.157e					EXPDZero:
.157e	4c f5 25	jmp $25f5		jmp	ErrorV_divzero
.1581					EXPBinIMod:
.1581	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1583	30 10		bmi $1595			bmi 	EXPTypeError
.1585	a2 0c		ldx #$0c			ldx 	#IFR1
.1587	5a		phy				phy
.1588	20 11 2d	jsr $2d11			jsr 	IFPreProcessBitwise 		; set up everything.
.158b	d0 05		bne $1592			bne 	EXPDRange
.158d	20 4a 2c	jsr $2c4a			jsr 	IFloatModulusInteger
.1590	7a		ply				ply
.1591	60		rts				rts
.1592					EXPDRange:
.1592	4c 8d 25	jmp $258d		jmp	ErrorV_range
.1595					EXPTypeError:
.1595	4c ac 25	jmp $25ac		jmp	ErrorV_type
.1598					EXPBinAnd:
.1598	24 0b		bit $0b				bit 	IFR0+IExp
.159a	30 f9		bmi $1595			bmi 	EXPTypeError
.159c	a2 0c		ldx #$0c			ldx 	#IFR1
.159e	20 cc 2c	jsr $2ccc			jsr 	IFloatBitwiseAnd
.15a1	b0 ef		bcs $1592			bcs 	EXPDRange
.15a3	60		rts				rts
.15a4					EXPBinOr:
.15a4	24 0b		bit $0b				bit 	IFR0+IExp
.15a6	30 ed		bmi $1595			bmi 	EXPTypeError
.15a8	a2 0c		ldx #$0c			ldx 	#IFR1
.15aa	20 e3 2c	jsr $2ce3			jsr 	IFloatBitwiseOr
.15ad	b0 e3		bcs $1592			bcs 	EXPDRange
.15af	60		rts				rts
.15b0					EXPBinXor:
.15b0	24 0b		bit $0b				bit 	IFR0+IExp
.15b2	30 e1		bmi $1595			bmi 	EXPTypeError
.15b4	a2 0c		ldx #$0c			ldx 	#IFR1
.15b6	20 fa 2c	jsr $2cfa			jsr 	IFloatBitwiseXor
.15b9	b0 d7		bcs $1592			bcs 	EXPDRange
.15bb	60		rts				rts
.15bc					EXPConcatenate:
.15bc	18		clc				clc
.15bd	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15bf	72 0c		adc ($0c)			adc 	(IFR1)
.15c1	b0 2d		bcs $15f0			bcs 	_EXPCError 					; far too long.
.15c3	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15c5	da		phx				phx
.15c6	a6 09		ldx $09				ldx 	IFR0+1
.15c8	da		phx				phx
.15c9	20 27 28	jsr $2827			jsr 	StringTempAllocate 			; allocate string, set up return
.15cc	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15ce	a5 0c		lda $0c				lda 	IFR1
.15d0	20 d9 15	jsr $15d9			jsr 	_EXPCCopyXA
.15d3	fa		plx				plx 								; copy second string
.15d4	68		pla				pla
.15d5	20 d9 15	jsr $15d9			jsr 	_EXPCCopyXA
.15d8	60		rts				rts
.15d9					_EXPCCopyXA:
.15d9	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15db	85 22		sta $22				sta 	zTemp0
.15dd	b2 22		lda ($22)			lda 	(zTemp0)					; length of string
.15df	f0 0e		beq $15ef			beq 	_EXPCCExit 					; nothing in string
.15e1	aa		tax				tax 								; count
.15e2	5a		phy				phy 								; start position
.15e3	a0 01		ldy #$01			ldy 	#1
.15e5					_EXPCCLoop:
.15e5	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15e7	20 5c 28	jsr $285c			jsr 	StringTempWrite
.15ea	c8		iny				iny
.15eb	ca		dex				dex
.15ec	d0 f7		bne $15e5			bne 	_EXPCCLoop
.15ee	7a		ply				ply
.15ef					_EXPCCExit:
.15ef	60		rts				rts
.15f0					_EXPCError:
.15f0	4c 99 26	jmp $2699		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.15f3					EXPReturnTrue:
.15f3	a2 08		ldx #$08			ldx 	#IFR0
.15f5	a9 01		lda #$01			lda 	#1
.15f7	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.15fa	20 e5 30	jsr $30e5			jsr 	IFloatNegate
.15fd	60		rts				rts
.15fe					EXPReturnFalse:
.15fe	a2 08		ldx #$08			ldx 	#IFR0
.1600	4c da 30	jmp $30da			jmp 	IFloatSetZero
.1603					EXPCompareEqual:
.1603	20 39 16	jsr $1639			jsr 	EXPCompareBaseCode
.1606	c9 00		cmp #$00			cmp 	#0
.1608	f0 e9		beq $15f3			beq 	EXPReturnTrue
.160a	80 f2		bra $15fe			bra 	EXPReturnFalse
.160c					EXPCompareLess:
.160c	20 39 16	jsr $1639			jsr 	EXPCompareBaseCode
.160f	c9 ff		cmp #$ff			cmp 	#$FF
.1611	f0 e0		beq $15f3			beq 	EXPReturnTrue
.1613	80 e9		bra $15fe			bra 	EXPReturnFalse
.1615					EXPCompareGreater:
.1615	20 39 16	jsr $1639			jsr 	EXPCompareBaseCode
.1618	c9 01		cmp #$01			cmp 	#1
.161a	f0 d7		beq $15f3			beq 	EXPReturnTrue
.161c	80 e0		bra $15fe			bra 	EXPReturnFalse
.161e					EXPCompareNotEqual:
.161e	20 39 16	jsr $1639			jsr 	EXPCompareBaseCode
.1621	c9 00		cmp #$00			cmp 	#0
.1623	d0 ce		bne $15f3			bne 	EXPReturnTrue
.1625	80 d7		bra $15fe			bra 	EXPReturnFalse
.1627					EXPCompareLessEqual:
.1627	20 39 16	jsr $1639			jsr 	EXPCompareBaseCode
.162a	c9 01		cmp #$01			cmp 	#1
.162c	d0 c5		bne $15f3			bne 	EXPReturnTrue
.162e	80 ce		bra $15fe			bra 	EXPReturnFalse
.1630					EXPCompareGreaterEqual:
.1630	20 39 16	jsr $1639			jsr 	EXPCompareBaseCode
.1633	c9 ff		cmp #$ff			cmp 	#$FF
.1635	d0 bc		bne $15f3			bne 	EXPReturnTrue
.1637	80 c5		bra $15fe			bra 	EXPReturnFalse
.1639					EXPCompareBaseCode:
.1639	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.163b	30 10		bmi $164d			bmi 	_EXCBCString
.163d	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.163f	20 a9 2d	jsr $2da9			jsr 	IFloatCompare
.1642	a5 08		lda $08				lda 	IFR0+IM0
.1644	f0 06		beq $164c			beq 	_EXCBCExit 					; return 0 if zero
.1646	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1648	50 02		bvc $164c			bvc 	_EXCBCExit
.164a	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.164c					_EXCBCExit:
.164c	60		rts				rts
.164d					_EXCBCString:
.164d	5a		phy				phy
.164e	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.1650	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.1652	90 02		bcc $1656			bcc 	_EXCBCSmaller
.1654	b2 0c		lda ($0c)			lda 	(IFR1)
.1656					_EXCBCSmaller:
.1656	aa		tax				tax
.1657	f0 0d		beq $1666			beq 	_EXCBCMatches 				; if zero common length matches
.1659	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.165b					_EXCBCCheckSmallerMatches:
.165b	c8		iny				iny 								; compare directly as far as common length
.165c	38		sec				sec
.165d	b1 0c		lda ($0c),y			lda 	(IFR1),y
.165f	f1 08		sbc ($08),y			sbc 	(IFR0),y
.1661	d0 08		bne $166b			bne 	_EXCBCExit2
.1663	ca		dex				dex
.1664	d0 f5		bne $165b			bne 	_EXCBCCheckSmallerMatches
.1666					_EXCBCMatches:
.1666	38		sec				sec
.1667	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1669	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.166b					_EXCBCExit2:
.166b	7a		ply				ply
.166c	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.166e	f0 04		beq $1674			beq 	_EXCBCReturn
.1670	30 03		bmi $1675			bmi 	_EXCBCFF 					; return $FF if <
.1672	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1674					_EXCBCReturn:
.1674	60		rts				rts
.1675					_EXCBCFF:
.1675	a9 ff		lda #$ff			lda 	#$FF
.1677	60		rts				rts
.1678					_EXCBCRange:
.1678	4c 8d 25	jmp $258d		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.167b					EXPBinLeft:
.167b	a9 ff		lda #$ff			lda 	#$FF
.167d	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.1680	4c 86 16	jmp $1686			jmp 	EXPShiftCommon
.1683					EXPBinRight:
.1683	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.1686					EXPShiftCommon:
.1686	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1688	05 0f		ora $0f				ora 	IFR1+IExp
.168a	29 7f		and #$7f			and 	#$7F
.168c	d0 35		bne $16c3			bne 	_EXPSRange
.168e	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1690	29 e0		and #$e0			and 	#$E0
.1692	05 09		ora $09				ora 	IFR0+IM1
.1694	05 0a		ora $0a				ora 	IFR0+IM2
.1696	d0 25		bne $16bd			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.1698	5a		phy				phy
.1699	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.169b	29 1f		and #$1f			and 	#$1F
.169d	f0 17		beq $16b6			beq 	_EXPSExit 					; exit if zero
.169f	a8		tay				tay
.16a0					_EXPSLoop:
.16a0	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16a2	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16a5	30 05		bmi $16ac			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16a7	20 09 31	jsr $3109			jsr 	IFloatShiftRight
.16aa	80 07		bra $16b3			bra 	_EXPSContinue
.16ac					_EXPSShiftLeft:
.16ac	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.16af	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16b1	30 10		bmi $16c3			bmi 	_EXPSRange
.16b3					_EXPSContinue:
.16b3	88		dey				dey 								; do it Y times
.16b4	d0 ea		bne $16a0			bne 	_EXPSLoop
.16b6					_EXPSExit:
.16b6	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16b8	20 6b 30	jsr $306b			jsr 	IFloatCopyFromRegister
.16bb	7a		ply				ply
.16bc	60		rts				rts
.16bd					_EXPSShiftZero:
.16bd	a2 08		ldx #$08			ldx 	#IFR0
.16bf	20 da 30	jsr $30da			jsr 	IFloatSetZero
.16c2	60		rts				rts
.16c3					_EXPSRange:
.16c3	4c 8d 25	jmp $258d		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16c6					EXPEvaluateExpression:
.16c6	a9 00		lda #$00			lda 	#0 							; current precedence
.16c8					EXPEvaluateExpressionPrecedenceA:
.16c8	48		pha				pha
.16c9	20 43 17	jsr $1743			jsr 	EXPTermValueR0				; do first term.
.16cc					_EELoop:
.16cc	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16ce	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16d0	90 31		bcc $1703			bcc 	_EEExit
.16d2	aa		tax				tax 								; access the precedence of the operator.
.16d3	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16d4	dd a0 19	cmp $19a0,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16d7	b0 2b		bcs $1704			bcs 	_EEExit2
.16d9	48		pha				pha 								; save current precedence.
.16da	da		phx				phx 								; save operator
.16db	c8		iny				iny 								; consume operator
.16dc	da		phx				phx
.16dd	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16df	20 29 30	jsr $3029			jsr 	IFloatPushRx
.16e2	fa		plx				plx
.16e3	bd a0 19	lda $19a0,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16e6	20 c8 16	jsr $16c8			jsr 	EXPEvaluateExpressionPrecedenceA
.16e9	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16eb	20 4a 30	jsr $304a			jsr 	IFloatPullRx
.16ee	fa		plx				plx 								; operator
.16ef	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16f1	45 0f		eor $0f				eor 	IFR1+IExp
.16f3	30 08		bmi $16fd			bmi 	_EEType
.16f5					_EETypeOkay:
.16f5	8a		txa				txa
.16f6	0a		asl a				asl 	a 							; double -> X
.16f7	aa		tax				tax
.16f8	20 00 17	jsr $1700			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.16fb	80 cf		bra $16cc			bra 	_EELoop
.16fd					_EEType:
.16fd	4c ac 25	jmp $25ac		jmp	ErrorV_type
.1700					_EECallBinary:
.1700	7c 66 1c	jmp ($1c66,x)			jmp 	(VectorTable,x)
.1703					_EEExit:
.1703	68		pla				pla 								; throw precedence
.1704					_EEExit2:
.1704	18		clc				clc
.1705	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1706					EXPEvalNumber:
.1706	20 c6 16	jsr $16c6			jsr 	EXPEvaluateExpression 		; get a value
.1709	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.170b	30 01		bmi $170e			bmi 	EVUType
.170d	60		rts				rts
.170e					EVUType:
.170e	4c ac 25	jmp $25ac		jmp	ErrorV_type
.1711					EXPEvalInteger:
.1711	20 06 17	jsr $1706			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1714	20 db 2d	jsr $2ddb			jsr 	IFloatIntegerR0
.1717	60		rts				rts
.1718					EXPEvalInteger16:
.1718	20 11 17	jsr $1711			jsr 	EXPEvalInteger 				; get integer
.171b	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.171d	d0 21		bne $1740			bne 	EVURange
.171f	a6 09		ldx $09				ldx 	IFR0+IM1
.1721	a5 08		lda $08				lda 	IFR0+IM0
.1723	60		rts				rts
.1724					EXPEvalInteger8:
.1724	20 11 17	jsr $1711			jsr 	EXPEvalInteger 				; get integer
.1727	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1729	05 09		ora $09				ora 	IFR0+IM1
.172b	d0 13		bne $1740			bne 	EVURange
.172d	a5 08		lda $08				lda 	IFR0+IM0
.172f	60		rts				rts
.1730					EXPEvalString:
.1730	20 c6 16	jsr $16c6			jsr 	EXPEvaluateExpression 		; get value
.1733	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1735	10 d7		bpl $170e			bpl 	EVUType
.1737	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1739	86 23		stx $23				stx 	zTemp0+1
.173b	a5 08		lda $08				lda 	IFR0+IM0
.173d	85 22		sta $22				sta 	zTemp0
.173f	60		rts				rts
.1740					EVURange:
.1740	4c 8d 25	jmp $258d		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1743					EXPTermValueR0:
.1743	20 8e 17	jsr $178e			jsr 	EXPTermR0 					; get term
.1746	90 45		bcc $178d			bcc 	_ETVNotReference 			; exit if value.
.1748	5a		phy				phy
.1749	a0 03		ldy #$03			ldy 	#3 							; get type
.174b	b1 08		lda ($08),y			lda 	(IFR0),y
.174d	30 14		bmi $1763			bmi 	_ETVDereferenceString
.174f	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.1751	88		dey				dey 								; get byte 2
.1752	b1 08		lda ($08),y			lda 	(IFR0),y
.1754	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1756	88		dey				dey 								; get byte 1
.1757	b1 08		lda ($08),y			lda 	(IFR0),y
.1759	aa		tax				tax 								; save in X so we can overwrite it
.175a	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.175c	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.175e	85 08		sta $08				sta 	IFR0+IM0
.1760	7a		ply				ply
.1761	18		clc				clc
.1762	60		rts				rts
.1763					_ETVDereferenceString:
.1763	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1765	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1767	12 08		ora ($08)			ora 	(IFR0)
.1769	f0 11		beq $177c			beq 	_ETVNull 					; if so, return a fake NULL.
.176b	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.176d	aa		tax				tax
.176e	b2 08		lda ($08)			lda 	(IFR0)
.1770	18		clc				clc 								; add two so points to actual string.
.1771	69 02		adc #$02			adc 	#2
.1773	90 01		bcc $1776			bcc 	_EVDSNoCarry
.1775	e8		inx				inx
.1776					_EVDSNoCarry:
.1776	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1778	85 08		sta $08				sta 	IFR0
.177a	80 08		bra $1784			bra 	_ETVFillExit 				; tidy up and exit.
.177c					_ETVNull:
.177c	a9 8c		lda #$8c			lda 	#_EVTNString & $FF
.177e	85 08		sta $08				sta 	IFR0+IM0
.1780	a9 17		lda #$17			lda 	#_EVTNString >> 8
.1782	85 09		sta $09				sta 	IFR0+IM1
.1784					_ETVFillExit:
.1784	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1786	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1788	85 0b		sta $0b				sta 	IFR0+IExp
.178a	7a		ply				ply
.178b	60		rts				rts
.178c					_EVTNString:
>178c	00						.byte 	0
.178d					_ETVNotReference:
.178d	60		rts				rts
.178e					EXPTermR0:
.178e	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1790	30 10		bmi $17a2			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1792	c8		iny				iny 								; consume element
.1793	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1795	b0 08		bcs $179f			bcs 	_ETMIdentifier
.1797	20 cd 17	jsr $17cd			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.179a	20 00 18	jsr $1800			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.179d	18		clc				clc 								; return value ok
.179e	60		rts				rts
.179f					_ETMIdentifier:
.179f	4c 73 2a	jmp $2a73			jmp 	VARCheckSimple 				; check variables, seperate module.
.17a2					_ETMIsUnaryOrMinus:
.17a2	c8		iny				iny 								; consume element
.17a3	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17a5	d0 0e		bne $17b5			bne 	_ETMCheckUnary
.17a7	20 43 17	jsr $1743			jsr 	EXPTermValueR0 				; get a term to negate
.17aa	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17ac	20 e5 30	jsr $30e5			jsr 	IFloatNegate
.17af	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17b1	30 17		bmi $17ca			bmi 	_ETMUnaryType				; if so error.
.17b3	18		clc				clc
.17b4	60		rts				rts
.17b5					_ETMCheckUnary:
.17b5	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17b7	90 0e		bcc $17c7			bcc 	_ETMUnarySyntax
.17b9	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17bb	b0 0a		bcs $17c7			bcs 	_ETMUnarySyntax
.17bd	0a		asl a				asl 	a 							; make it into an index => X
.17be	aa		tax				tax
.17bf	20 c4 17	jsr $17c4			jsr 	_ETMCallUnaryFunction 		; call the function
.17c2	18		clc				clc 								; and return it.
.17c3	60		rts				rts
.17c4					_ETMCallUnaryFunction:
.17c4	7c 66 1c	jmp ($1c66,x)			jmp 	(VectorTable,x)
.17c7					_ETMUnarySyntax:
.17c7	4c 7c 25	jmp $257c		jmp	ErrorV_syntax
.17ca					_ETMUnaryType:
.17ca	4c ac 25	jmp $25ac		jmp	ErrorV_type
.17cd					EXPExtractTokenisedInteger:
.17cd	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17cf	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17d1	64 09		stz $09				stz 	IFR0+IM1
.17d3	64 0a		stz $0a				stz 	IFR0+IM2
.17d5					_ETMConstant:
.17d5	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17d7	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17d9	b0 24		bcs $17ff			bcs 	_ETMCExit 					; no, exit.
.17db	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17dd	a5 09		lda $09				lda 	IFR0+IM1
.17df	85 0a		sta $0a				sta 	IFR0+IM2
.17e1	a5 08		lda $08				lda 	IFR0+IM0
.17e3	85 09		sta $09				sta 	IFR0+IM1
.17e5	64 08		stz $08				stz 	IFR0+IM0
.17e7	8a		txa				txa
.17e8	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17e9	66 0a		ror $0a				ror 	IFR0+IM2
.17eb	66 09		ror $09				ror 	IFR0+IM1
.17ed	66 08		ror $08				ror 	IFR0+IM0
.17ef	4a		lsr a				lsr 	a
.17f0	66 0a		ror $0a				ror 	IFR0+IM2
.17f2	66 09		ror $09				ror 	IFR0+IM1
.17f4	66 08		ror $08				ror 	IFR0+IM0
.17f6	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.17f8	11 18		ora ($18),y			ora 	(codePtr),y
.17fa	85 08		sta $08				sta 	IFR0+IM0
.17fc	c8		iny				iny 								; consume, loop back
.17fd	80 d6		bra $17d5			bra 	_ETMConstant
.17ff					_ETMCExit:
.17ff	60		rts				rts
.1800					EXPCheckDecimalFollows:
.1800	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1802	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1804	d0 19		bne $181f			bne 	_ETMCDExit
.1806	c8		iny				iny 								; consume token.
.1807	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1809	5a		phy				phy									; save current position
.180a	48		pha				pha 								; save count of chars.
.180b	38		sec				sec 								; address into YX : y + codePtr+1
.180c	98		tya				tya
.180d	65 18		adc $18				adc 	codePtr
.180f	aa		tax				tax
.1810	a5 19		lda $19				lda 	codePtr+1
.1812	69 00		adc #$00			adc 	#0
.1814	a8		tay				tay
.1815	68		pla				pla 								; get count.
.1816	20 7e 2f	jsr $2f7e			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1819	7a		ply				ply 								; go to next token.
.181a	98		tya				tya
.181b	38		sec				sec
.181c	71 18		adc ($18),y			adc 	(codePtr),y
.181e	a8		tay				tay
.181f					_ETMCDExit:
.181f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1820					EXPUnaryAbs:
.1820	20 06 17	jsr $1706			jsr 	EXPEvalNumber 					; number to R0
.1823	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.1826	20 1d 2d	jsr $2d1d			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1829	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.182a					EXPUnaryAsc:
.182a	20 30 17	jsr $1730			jsr 	EXPEvalString 					; string to R0, zTemp0
.182d	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.1830	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1832	f0 06		beq $183a			beq 	_EXAZero 						; if so return 0
.1834	5a		phy				phy 									; otherwise get first character
.1835	a0 01		ldy #$01			ldy 	#1
.1837	b1 22		lda ($22),y			lda 	(zTemp0),y
.1839	7a		ply				ply
.183a					_EXAZero:
.183a	a2 08		ldx #$08			ldx 	#IFR0
.183c	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.183f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1840					EXPUnaryChr:
.1840	20 24 17	jsr $1724			jsr 	EXPEvalInteger8 				; expr
.1843	48		pha				pha 									; push on stack
.1844	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.1847	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.1849	20 27 28	jsr $2827			jsr 	StringTempAllocate
.184c	68		pla				pla 									; get value back
.184d	20 5c 28	jsr $285c			jsr 	StringTempWrite 				; write to string.
.1850	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1851					EXPUnaryDec:
.1851	20 30 17	jsr $1730			jsr 	EXPEvalString 					; string to R0, zTemp0
.1854	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.1857	5a		phy				phy 									; save position.
.1858	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.185a	20 da 30	jsr $30da			jsr 	IFloatSetZero
.185d	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.185f	f0 3b		beq $189c			beq 	_EUDError 						; empty string is not legit.
.1861	aa		tax				tax 									; count in X.
.1862	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1864					_EUDLoop:
.1864	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next from string
.1866	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1868	90 02		bcc $186c			bcc 	_EUDNoCase
.186a	e9 20		sbc #$20			sbc 	#$20
.186c					_EUDNoCase:
.186c	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.186e	90 2c		bcc $189c			bcc 	_EUDError
.1870	c9 3a		cmp #$3a			cmp 	#'9'+1
.1872	90 0a		bcc $187e			bcc 	_EUDOkay
.1874	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1876	90 24		bcc $189c			bcc 	_EUDError
.1878	c9 47		cmp #$47			cmp 	#'F'+1
.187a	b0 20		bcs $189c			bcs 	_EUDError
.187c	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.187e					_EUDOkay:
.187e	29 0f		and #$0f			and 	#15 							; make constant
.1880	da		phx				phx
.1881	48		pha				pha
.1882	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1884	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.1887	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.188a	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.188d	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.1890	68		pla				pla 									; pop constant and OR in
.1891	fa		plx				plx
.1892	05 08		ora $08				ora 	IFR0+IM0
.1894	85 08		sta $08				sta 	IFR0+IM0
.1896	c8		iny				iny 									; next char
.1897	ca		dex				dex 									; done all characters ?
.1898	d0 ca		bne $1864			bne 	_EUDLoop
.189a	7a		ply				ply
.189b	60		rts				rts
.189c					_EUDError:
.189c	4c 9e 25	jmp $259e		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.189f					EXPUnaryInlineDec:
.189f	4c 7c 25	jmp $257c		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18a2					EXPUnaryPeek:
.18a2	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 				; number to R0
.18a5	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.18a8	b2 08		lda ($08)			lda 	(IFR0)
.18aa	a2 08		ldx #$08			ldx 	#IFR0
.18ac	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.18af	60		rts				rts
.18b0					EXPUnaryDeek:
.18b0	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 				; number to R0
.18b3	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.18b6	5a		phy				phy
.18b7	a0 01		ldy #$01			ldy 	#1
.18b9	b1 08		lda ($08),y			lda 	(IFR0),y
.18bb	7a		ply				ply
.18bc	48		pha				pha
.18bd	b2 08		lda ($08)			lda 	(IFR0)
.18bf	a2 08		ldx #$08			ldx 	#IFR0
.18c1	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.18c4	68		pla				pla
.18c5	85 09		sta $09				sta 	IFR0+IM1
.18c7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.18c8					EXPUnaryNull:
.18c8	20 43 17	jsr $1743			jsr 	EXPTermValueR0
.18cb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18cc					EXPUnaryFrac:
.18cc	20 06 17	jsr $1706			jsr 	EXPEvalNumber 					; number to R0
.18cf	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.18d2	20 85 2d	jsr $2d85			jsr 	IFloatFractionalR0 				; get fractional bit.
.18d5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18d6					EXPUnaryInkey:
.18d6	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.18d9	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18db	20 27 28	jsr $2827			jsr 	StringTempAllocate
.18de	20 e8 ff	jsr $ffe8			jsr 	OSIsKeyAvailable 				; if no key exit
.18e1	b0 06		bcs $18e9			bcs 	_EUIExit
.18e3	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18e6	20 5c 28	jsr $285c			jsr 	StringTempWrite
.18e9					_EUIExit:
.18e9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18ea					EXPUnaryInt:
.18ea	20 06 17	jsr $1706			jsr 	EXPEvalNumber 					; number to R0
.18ed	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; check for )
.18f0	20 db 2d	jsr $2ddb			jsr 	IFloatIntegerR0 				; force to integer.
.18f3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.18f4					EXPUnaryLen:
.18f4	20 30 17	jsr $1730			jsr 	EXPEvalString 					; string to R0, zTemp0
.18f7	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.18fa	b2 22		lda ($22)			lda 	(zTemp0) 						; first byte is the length
.18fc	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.18fe	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.1901	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1902					EXPUnaryParenthesis:
.1902	20 06 17	jsr $1706			jsr 	EXPEvalNumber 					; number to R0
.1905	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.1908	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1909					EXPUnaryRnd:
.1909	20 06 17	jsr $1706			jsr 	EXPEvalNumber 				; number to R0
.190c	20 31 27	jsr $2731			jsr 	ERRCheckRParen 				; )
.190f	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1911	20 28 19	jsr $1928			jsr 	EXPLoadInRandom
.1914	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1916	85 0b		sta $0b				sta 	IFR0+IExp
.1918	60		rts				rts
.1919					ExpUnaryRand:
.1919	20 11 17	jsr $1711			jsr 	EXPEvalInteger 				; integer to R0
.191c	20 31 27	jsr $2731			jsr 	ERRCheckRParen 				; )
.191f	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1921	20 28 19	jsr $1928			jsr 	EXPLoadInRandom
.1924	20 4a 2c	jsr $2c4a			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1927	60		rts				rts
.1928					EXPLoadInRandom:
.1928	20 da 30	jsr $30da			jsr 	IFloatSetZero 				; zero it
.192b	20 3d 19	jsr $193d			jsr 	EXPRandom32 				; do a 23 bit number.
.192e	95 00		sta $00,x			sta 	IM0,x
.1930	20 3d 19	jsr $193d			jsr 	EXPRandom32
.1933	95 01		sta $01,x			sta 	IM1,x
.1935	20 3d 19	jsr $193d			jsr 	EXPRandom32
.1938	29 7f		and #$7f			and 	#$7F
.193a	95 02		sta $02,x			sta 	IM2,x
.193c	60		rts				rts
.193d					EXPRandom32:
.193d	5a		phy				phy
.193e	a0 08		ldy #$08			ldy 	#8
.1940	ad 12 05	lda $0512			lda 	EXPSeed+0
.1943	0d 13 05	ora $0513			ora 	EXPSeed+1
.1946	0d 14 05	ora $0514			ora 	EXPSeed+2
.1949	0d 15 05	ora $0515			ora 	EXPSeed+3
.194c	d0 08		bne $1956			bne 	_EXPRNoReset
.194e	ee 12 05	inc $0512			inc 	EXPSeed+0
.1951	a0 10		ldy #$10			ldy 	#16
.1953	8c 15 05	sty $0515			sty 	EXPSeed+3
.1956					_EXPRNoReset:
.1956	ad 12 05	lda $0512			lda 	EXPSeed+0
.1959					_EXPRLoop:
.1959	0a		asl a				asl		a
.195a	2e 13 05	rol $0513			rol 	EXPSeed+1
.195d	2e 14 05	rol $0514			rol 	EXPSeed+2
.1960	2e 15 05	rol $0515			rol 	EXPSeed+3
.1963	90 02		bcc $1967			bcc 	_EXPRNoEOR
.1965	49 c5		eor #$c5			eor 	#$C5
.1967					_EXPRNoEOR:
.1967	88		dey				dey
.1968	d0 ef		bne $1959			bne 	_EXPRLoop
.196a	8d 12 05	sta $0512			sta 	EXPSeed+0
.196d	7a		ply				ply
.196e	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.196f					EXPUnarySgn:
.196f	20 06 17	jsr $1706			jsr 	EXPEvalNumber 					; number to R0
.1972	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.1975	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1977	20 7c 30	jsr $307c			jsr 	IFloatCopyToRegister
.197a	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.197c	20 da 30	jsr $30da			jsr 	IFloatSetZero
.197f	a2 0c		ldx #$0c			ldx 	#IFR1
.1981	20 a9 2d	jsr $2da9			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1984	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1985					EXPUnarySqr:
.1985	20 06 17	jsr $1706			jsr 	EXPEvalNumber 					; number to R0
.1988	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.198b	20 25 2d	jsr $2d25			jsr 	IFloatSquareRootR0 				; square root.
.198e	b0 01		bcs $1991			bcs 	_EUSValue 						; error check.
.1990	60		rts				rts
.1991					_EUSValue:
.1991	4c 8d 25	jmp $258d		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1994					EXPUnaryHex:
.1994	20 11 17	jsr $1711			jsr 	EXPEvalInteger 					; expr
.1997	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.199a	5a		phy				phy
.199b	a9 10		lda #$10			lda 	#16
.199d	20 7c 2e	jsr $2e7c			jsr 	IFloatIntegerToStringR0
.19a0	80 0a		bra $19ac			bra 	EUSMain
.19a2					EXPUnaryStr:
.19a2	20 06 17	jsr $1706			jsr 	EXPEvalNumber 					; expr
.19a5	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.19a8	5a		phy				phy
.19a9	20 d7 2e	jsr $2ed7			jsr 	IFloatFloatToStringR0 			; convert to string
.19ac					EUSMain:
.19ac	b0 18		bcs $19c6			bcs 	_EUSError
.19ae	86 22		stx $22				stx 	zTemp0 							; save string address
.19b0	84 23		sty $23				sty 	zTemp0+1
.19b2	48		pha				pha 									; save count
.19b3	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19b5	20 27 28	jsr $2827			jsr 	StringTempAllocate
.19b8	fa		plx				plx 									; count in X
.19b9	a0 00		ldy #$00			ldy 	#0
.19bb					_EUSCopy:
.19bb	b1 22		lda ($22),y			lda 	(zTemp0),y
.19bd	c8		iny				iny
.19be	20 5c 28	jsr $285c			jsr 	StringTempWrite
.19c1	ca		dex				dex
.19c2	d0 f7		bne $19bb			bne	 	_EUSCopy
.19c4	7a		ply				ply
.19c5	60		rts				rts
.19c6					_EUSError:
.19c6	4c 8d 25	jmp $258d		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19c9					EXPUnaryInlineString:
.19c9	18		clc				clc 								; physical address -> IM0,1
.19ca	98		tya				tya 								; put the actual address in IM0
.19cb	65 18		adc $18				adc 	codePtr
.19cd	85 08		sta $08				sta 	IFR0+IM0
.19cf	a5 19		lda $19				lda 	codePtr+1
.19d1	69 00		adc #$00			adc 	#0
.19d3	85 09		sta $09				sta 	IFR0+IM1
.19d5	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19d7	a9 80		lda #$80			lda 	#$80
.19d9	85 0b		sta $0b				sta 	IFR0+IExp
.19db	98		tya				tya	 								; skip over it.
.19dc	38		sec				sec
.19dd	71 18		adc ($18),y			adc 	(codePtr),y
.19df	a8		tay				tay
.19e0	60		rts				rts
.19e1					_EXPUISRange:
.19e1	4c 8d 25	jmp $258d		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19e4					EXPUnaryLeft:
.19e4	20 2a 1a	jsr $1a2a			jsr 	EXPCommonStart 					; <string>,
.19e7	48		pha				pha 									; save string address on stack
.19e8	da		phx				phx
.19e9	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19eb	48		pha				pha
.19ec	20 24 17	jsr $1724			jsr 	EXPEvalInteger8 				; characters to do
.19ef	80 44		bra $1a35			bra 	EXPSubstringCommon
.19f1					EXPUnaryRight:
.19f1	20 2a 1a	jsr $1a2a			jsr 	EXPCommonStart 					; <string>,
.19f4	48		pha				pha 									; save string address on stack
.19f5	da		phx				phx
.19f6	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.19f8	48		pha				pha
.19f9	20 24 17	jsr $1724			jsr 	EXPEvalInteger8 				; characters to do
.19fc	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.19fe	68		pla				pla
.19ff	38		sec				sec
.1a00	e5 22		sbc $22				sbc 	zTemp0
.1a02	b0 02		bcs $1a06			bcs 	_EUROffLeft
.1a04	a9 00		lda #$00			lda 	#0
.1a06					_EUROffLeft:
.1a06	48		pha				pha 									; start pos
.1a07	a9 ff		lda #$ff			lda 	#255
.1a09	80 2a		bra $1a35			bra 	EXPSubstringCommon
.1a0b					EXPUnaryMid:
.1a0b	20 2a 1a	jsr $1a2a			jsr 	EXPCommonStart 					; <string>,
.1a0e	48		pha				pha 									; save string address on stack
.1a0f	da		phx				phx
.1a10	20 24 17	jsr $1724			jsr 	EXPEvalInteger8 				; characters start
.1a13	f0 12		beq $1a27			beq 	_EUSError 						; 1 is left
.1a15	3a		dec a				dec 	a 								; zero based.
.1a16	48		pha				pha
.1a17	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a19	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a1b	f0 04		beq $1a21			beq 	_EUMLength 						; if so m is provided
.1a1d	a9 ff		lda #$ff			lda 	#255 							; default m
.1a1f	80 14		bra $1a35			bra 	EXPSubstringCommon
.1a21					_EUMLength:
.1a21	c8		iny				iny 									; consume comma
.1a22	20 24 17	jsr $1724			jsr 	EXPEvalInteger8 				; characters to do
.1a25	80 0e		bra $1a35			bra 	EXPSubstringCommon
.1a27					_EUSError:
.1a27	4c 9e 25	jmp $259e		jmp	ErrorV_value
.1a2a					EXPCommonStart:
.1a2a	20 30 17	jsr $1730			jsr 	EXPEvalString
.1a2d	20 39 27	jsr $2739			jsr 	ERRCheckComma
.1a30	a5 08		lda $08				lda 	IFR0+IM0
.1a32	a6 09		ldx $09				ldx 	IFR0+IM1
.1a34	60		rts				rts
.1a35					EXPSubstringCommon:
.1a35	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a37	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; check right bracket.
.1a3a	68		pla				pla 									; start position
.1a3b	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a3d	fa		plx				plx 									; get string address to zTemp2.
.1a3e	86 27		stx $27				stx 	zTemp2+1
.1a40	68		pla				pla
.1a41	85 26		sta $26				sta 	zTemp2
.1a43	38		sec				sec 									; length - start is the max count of chars
.1a44	b2 26		lda ($26)			lda 	(zTemp2)
.1a46	e5 25		sbc $25				sbc 	zTemp1+1
.1a48	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a4a	b0 02		bcs $1a4e			bcs 	_EXPSSNoTrim
.1a4c	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a4e					_EXPSSNoTrim:
.1a4e	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a50	20 27 28	jsr $2827			jsr 	StringTempAllocate 				; allocate memory for it.
.1a53	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a55	f0 15		beq $1a6c			beq 	_EXPSSExit
.1a57	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a59	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a5b	b0 0f		bcs $1a6c			bcs 	_EXPSSExit
.1a5d	5a		phy				phy
.1a5e	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a60	c8		iny				iny 									; +1 for the length byte
.1a61					_EXPSSCopy:
.1a61	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a63	20 5c 28	jsr $285c			jsr 	StringTempWrite
.1a66	c8		iny				iny
.1a67	c6 24		dec $24				dec 	zTemp1
.1a69	d0 f6		bne $1a61			bne 	_EXPSSCopy
.1a6b	7a		ply				ply
.1a6c					_EXPSSExit:
.1a6c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a6d					EXPUnaryVal:
.1a6d	20 30 17	jsr $1730			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a70	20 31 27	jsr $2731			jsr 	ERRCheckRParen 					; )
.1a73	20 77 1a	jsr $1a77			jsr 	VALConversionZTemp0
.1a76	60		rts				rts
.1a77					VALConversionZTemp0:
.1a77	5a		phy				phy
.1a78	18		clc				clc
.1a79	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a7b	69 01		adc #$01			adc 	#1
.1a7d	aa		tax				tax
.1a7e	a5 23		lda $23				lda 	zTemp0+1
.1a80	69 00		adc #$00			adc 	#0
.1a82	a8		tay				tay
.1a83	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a85	20 3e 2f	jsr $2f3e			jsr 	IFloatStringToFloatR0 			; do conversion
.1a88	b0 02		bcs $1a8c			bcs 	_EUVError
.1a8a	7a		ply				ply
.1a8b	60		rts				rts
.1a8c					_EUVError:
.1a8c	4c 9e 25	jmp $259e		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1a8f					BinaryPrecedence:
>1a8f	02					.byte	 2	; $ef =
>1a90	02					.byte	 2	; $f0 <>
>1a91	02					.byte	 2	; $f1 <=
>1a92	02					.byte	 2	; $f2 <
>1a93	02					.byte	 2	; $f3 >=
>1a94	02					.byte	 2	; $f4 >
>1a95	01					.byte	 1	; $f5 XOR
>1a96	01					.byte	 1	; $f6 OR
>1a97	01					.byte	 1	; $f7 AND
>1a98	04					.byte	 4	; $f8 DIV
>1a99	04					.byte	 4	; $f9 MOD
>1a9a	04					.byte	 4	; $fa <<
>1a9b	04					.byte	 4	; $fb >>
>1a9c	04					.byte	 4	; $fc /
>1a9d	04					.byte	 4	; $fd *
>1a9e	03					.byte	 3	; $fe -
>1a9f	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1aa0					StructureOffsets:
>1aa0	01					.byte	1  	; $80 REPEAT
>1aa1	ff					.byte	255	; $81 UNTIL
>1aa2	01					.byte	1  	; $82 WHILE
>1aa3	ff					.byte	255	; $83 WEND
>1aa4	01					.byte	1  	; $84 IF
>1aa5	ff					.byte	255	; $85 ENDIF
>1aa6	01					.byte	1  	; $86 DO
>1aa7	ff					.byte	255	; $87 LOOP
>1aa8	01					.byte	1  	; $88 PROC
>1aa9	ff					.byte	255	; $89 ENDPROC
>1aaa	01					.byte	1  	; $8a FOR
>1aab	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1aac					StandardTokens:
>1aac	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1ab3	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1ab9	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1abf	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1ac4	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1ac7	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1acd	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1ad0	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1ad5	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1ada	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1ae2	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1ae6	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1aeb	00					.byte	$00                                     	; $8c [[end]]
>1aec	00					.byte	$00                                     	; $8d [[shift]]
>1aed	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1af2	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1af7	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1afa	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1aff	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1b03	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1b09	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1b0f	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1b14	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1b18	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1b1c	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1b21	01 2c					.byte	$01,$2c                                 	; $99 ,
>1b23	01 3b					.byte	$01,$3b                                 	; $9a ;
>1b25	01 3a					.byte	$01,$3a                                 	; $9b :
>1b27	01 27					.byte	$01,$27                                 	; $9c '
>1b29	01 29					.byte	$01,$29                                 	; $9d )
>1b2b	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>1b2f	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>1b35	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>1b39	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>1b3d	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>1b42	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>1b46	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>1b4d	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>1b52	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>1b57	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1b5c	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1b61	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>1b66	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $aa read
>1b6b	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $ab data
>1b70	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $ac restore
>1b78	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $ad goto
>1b7d	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $ae gosub
>1b83	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $af return
>1b8a	00					.byte	0											; $b0
>1b8b	00					.byte	0											; $b1
>1b8c	00					.byte	0											; $b2
>1b8d	00					.byte	0											; $b3
>1b8e	00					.byte	0											; $b4
>1b8f	00					.byte	0											; $b5
>1b90	00					.byte	0											; $b6
>1b91	00					.byte	0											; $b7
>1b92	00					.byte	0											; $b8
>1b93	00					.byte	0											; $b9
>1b94	00					.byte	0											; $ba
>1b95	00					.byte	0											; $bb
>1b96	00					.byte	0											; $bc
>1b97	00					.byte	0											; $bd
>1b98	00					.byte	0											; $be
>1b99	00					.byte	0											; $bf
>1b9a	00					.byte	0											; $c0
>1b9b	00					.byte	0											; $c1
>1b9c	00					.byte	0											; $c2
>1b9d	00					.byte	0											; $c3
>1b9e	00					.byte	0											; $c4
>1b9f	00					.byte	0											; $c5
>1ba0	00					.byte	0											; $c6
>1ba1	00					.byte	0											; $c7
>1ba2	00					.byte	0											; $c8
>1ba3	00					.byte	0											; $c9
>1ba4	00					.byte	0											; $ca
>1ba5	00					.byte	0											; $cb
>1ba6	00					.byte	0											; $cc
>1ba7	00					.byte	0											; $cd
>1ba8	00					.byte	0											; $ce
>1ba9	00					.byte	0											; $cf
>1baa	00					.byte	0											; $d0
>1bab	00					.byte	0											; $d1
>1bac	00					.byte	0											; $d2
>1bad	00					.byte	0											; $d3
>1bae	00					.byte	0											; $d4
>1baf	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1bb5	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1bbb	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1bc3	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1bca	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1bd0	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1bd6	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1bdb	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1be0	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1be5	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1bea	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1bef	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1bf5	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1bfa	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1c02	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1c09	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1c0e	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1c13	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1c19	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1c1e	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1c24	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1c29	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1c2f	01 28					.byte	$01,$28                                 	; $eb (
>1c31	01 24					.byte	$01,$24                                 	; $ec $
>1c33	00					.byte	$00                                     	; $ed [[decimal]]
>1c34	00					.byte	$00                                     	; $ee [[string]]
>1c35	01 3d					.byte	$01,$3d                                 	; $ef =
>1c37	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1c3a	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1c3d	01 3c					.byte	$01,$3c                                 	; $f2 <
>1c3f	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1c42	01 3e					.byte	$01,$3e                                 	; $f4 >
>1c44	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1c48	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1c4b	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1c4f	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1c53	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1c57	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1c5a	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1c5d	01 2f					.byte	$01,$2f                                 	; $fc /
>1c5f	01 2a					.byte	$01,$2a                                 	; $fd *
>1c61	01 2d					.byte	$01,$2d                                 	; $fe -
>1c63	01 2b					.byte	$01,$2b                                 	; $ff +
>1c65	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1c66					VectorTable:
>1c66	6c 24					.word	Command_REPEAT           ; $80 REPEAT
>1c68	75 24					.word	Command_UNTIL            ; $81 UNTIL
>1c6a	4f 25					.word	Command_WHILE            ; $82 WHILE
>1c6c	70 25					.word	Command_WEND             ; $83 WEND
>1c6e	42 24					.word	IfCommand                ; $84 IF
>1c70	6b 24					.word	EndIf                    ; $85 ENDIF
>1c72	c5 22					.word	Command_DO               ; $86 DO
>1c74	dd 22					.word	Command_LOOP             ; $87 LOOP
>1c76	46 15					.word	NoExec08                 ; $88 PROC
>1c78	b9 22					.word	Command_ENDPROC          ; $89 ENDPROC
>1c7a	e6 22					.word	Command_FOR              ; $8a FOR
>1c7c	73 23					.word	Command_NEXT             ; $8b NEXT
>1c7e	cc 14					.word	RUNEndOfLine             ; $8c [[END]]
>1c80	28 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1c82	64 24					.word	ElseCode                 ; $8e ELSE
>1c84	46 15					.word	NoExec01                 ; $8f THEN
>1c86	46 15					.word	NoExec02                 ; $90 TO
>1c88	46 15					.word	NoExec03                 ; $91 STEP
>1c8a	be 12					.word	CommandLET               ; $92 LET
>1c8c	0f 12					.word	Command_Print            ; $93 PRINT
>1c8e	08 12					.word	Command_Input            ; $94 INPUT
>1c90	7d 22					.word	Command_CALL             ; $95 CALL
>1c92	31 15					.word	Command_Sys              ; $96 SYS
>1c94	85 14					.word	Command_REM              ; $97 REM
>1c96	ce 22					.word	Command_EXIT             ; $98 EXIT
>1c98	46 15					.word	NoExec04                 ; $99 ,
>1c9a	46 15					.word	NoExec05                 ; $9a ;
>1c9c	46 15					.word	NoExec06                 ; $9b :
>1c9e	85 14					.word	Command_REM2             ; $9c '
>1ca0	46 15					.word	NoExec07                 ; $9d )
>1ca2	92 10					.word	CommandDIM               ; $9e DIM
>1ca4	1e 10					.word	Command_CLEAR            ; $9f CLEAR
>1ca6	08 14					.word	Command_NEW              ; $a0 NEW
>1ca8	c0 14					.word	Command_RUN              ; $a1 RUN
>1caa	2e 15					.word	Command_STOP             ; $a2 STOP
>1cac	2b 15					.word	Command_END              ; $a3 END
>1cae	10 10					.word	Command_ASSERT           ; $a4 ASSERT
>1cb0	38 13					.word	Command_LIST             ; $a5 LIST
>1cb2	ae 28					.word	NotImplemented           ; $a6 SAVE
>1cb4	ae 28					.word	NotImplemented           ; $a7 LOAD
>1cb6	b1 11					.word	Command_Poke             ; $a8 POKE
>1cb8	ae 11					.word	Command_Doke             ; $a9 DOKE
>1cba	11 14					.word	Command_READ             ; $aa READ
>1cbc	78 14					.word	Command_DATA             ; $ab DATA
>1cbe	92 14					.word	Command_RESTORE          ; $ac RESTORE
>1cc0	d8 11					.word	Command_GOTO             ; $ad GOTO
>1cc2	28 24					.word	Command_GOSUB            ; $ae GOSUB
>1cc4	36 24					.word	Command_RETURN           ; $af RETURN
>1cc6	ae 28					.word	NotImplemented           ; $b0
>1cc8	ae 28					.word	NotImplemented           ; $b1
>1cca	ae 28					.word	NotImplemented           ; $b2
>1ccc	ae 28					.word	NotImplemented           ; $b3
>1cce	ae 28					.word	NotImplemented           ; $b4
>1cd0	ae 28					.word	NotImplemented           ; $b5
>1cd2	ae 28					.word	NotImplemented           ; $b6
>1cd4	ae 28					.word	NotImplemented           ; $b7
>1cd6	ae 28					.word	NotImplemented           ; $b8
>1cd8	ae 28					.word	NotImplemented           ; $b9
>1cda	ae 28					.word	NotImplemented           ; $ba
>1cdc	ae 28					.word	NotImplemented           ; $bb
>1cde	ae 28					.word	NotImplemented           ; $bc
>1ce0	ae 28					.word	NotImplemented           ; $bd
>1ce2	ae 28					.word	NotImplemented           ; $be
>1ce4	ae 28					.word	NotImplemented           ; $bf
>1ce6	ae 28					.word	NotImplemented           ; $c0
>1ce8	ae 28					.word	NotImplemented           ; $c1
>1cea	ae 28					.word	NotImplemented           ; $c2
>1cec	ae 28					.word	NotImplemented           ; $c3
>1cee	ae 28					.word	NotImplemented           ; $c4
>1cf0	ae 28					.word	NotImplemented           ; $c5
>1cf2	ae 28					.word	NotImplemented           ; $c6
>1cf4	ae 28					.word	NotImplemented           ; $c7
>1cf6	ae 28					.word	NotImplemented           ; $c8
>1cf8	ae 28					.word	NotImplemented           ; $c9
>1cfa	ae 28					.word	NotImplemented           ; $ca
>1cfc	ae 28					.word	NotImplemented           ; $cb
>1cfe	ae 28					.word	NotImplemented           ; $cc
>1d00	ae 28					.word	NotImplemented           ; $cd
>1d02	ae 28					.word	NotImplemented           ; $ce
>1d04	ae 28					.word	NotImplemented           ; $cf
>1d06	ae 28					.word	NotImplemented           ; $d0
>1d08	ae 28					.word	NotImplemented           ; $d1
>1d0a	ae 28					.word	NotImplemented           ; $d2
>1d0c	ae 28					.word	NotImplemented           ; $d3
>1d0e	ae 28					.word	NotImplemented           ; $d4
>1d10	b0 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1d12	a2 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1d14	f1 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1d16	e4 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1d18	0b 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1d1a	a2 19					.word	EXPUnaryStr              ; $da STR$(
>1d1c	6d 1a					.word	EXPUnaryVal              ; $db VAL(
>1d1e	6f 19					.word	EXPUnarySgn              ; $dc SGN(
>1d20	20 18					.word	EXPUnaryAbs              ; $dd ABS(
>1d22	f4 18					.word	EXPUnaryLen              ; $de LEN(
>1d24	85 19					.word	EXPUnarySqr              ; $df SQR(
>1d26	40 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1d28	2a 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1d2a	d6 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1d2c	ae 28					.word	NotImplemented           ; $e3 EVENT(
>1d2e	ae 28					.word	NotImplemented           ; $e4 TIME
>1d30	ea 18					.word	EXPUnaryInt              ; $e5 INT(
>1d32	cc 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1d34	51 18					.word	EXPUnaryDec              ; $e7 DEC(
>1d36	94 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1d38	09 19					.word	EXPUnaryRnd              ; $e9 RND(
>1d3a	19 19					.word	ExpUnaryRand             ; $ea RAND(
>1d3c	02 19					.word	EXPUnaryParenthesis      ; $eb (
>1d3e	c8 18					.word	EXPUnaryNull             ; $ec $
>1d40	9f 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1d42	c9 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1d44	03 16					.word	EXPCompareEqual          ; $ef =
>1d46	1e 16					.word	EXPCompareNotEqual       ; $f0 <>
>1d48	27 16					.word	EXPCompareLessEqual      ; $f1 <=
>1d4a	0c 16					.word	EXPCompareLess           ; $f2 <
>1d4c	30 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1d4e	15 16					.word	EXPCompareGreater        ; $f4 >
>1d50	b0 15					.word	EXPBinXor                ; $f5 XOR
>1d52	a4 15					.word	EXPBinOr                 ; $f6 OR
>1d54	98 15					.word	EXPBinAnd                ; $f7 AND
>1d56	70 15					.word	EXPBinIDiv               ; $f8 DIV
>1d58	81 15					.word	EXPBinIMod               ; $f9 MOD
>1d5a	7b 16					.word	EXPBinLeft               ; $fa <<
>1d5c	83 16					.word	EXPBinRight              ; $fb >>
>1d5e	64 15					.word	EXPBinFDiv               ; $fc /
>1d60	5b 15					.word	EXPBinMul                ; $fd *
>1d62	52 15					.word	EXPBinSub                ; $fe -
>1d64	49 15					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1d66					TOKDetokenise:
.1d66	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1d68	84 27		sty $27				sty 	zTemp2+1
.1d6a	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1d6d					_TOKDLoop:
.1d6d	20 9c 1d	jsr $1d9c			jsr 	TOKDGet 					; get next
.1d70	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1d72	f0 26		beq $1d9a			beq 	_TOKDExit
.1d74	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1d76	f0 1d		beq $1d95			beq 	_TOKDDataItem
.1d78	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1d7a	f0 19		beq $1d95			beq 	_TOKDDataItem
.1d7c	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1d7e	10 05		bpl $1d85			bpl 	_TOKDNotToken
.1d80	20 64 1e	jsr $1e64			jsr 	TOKDToken 					; token to text.
.1d83	80 e8		bra $1d6d			bra 	_TOKDLoop
.1d85					_TOKDNotToken:
.1d85	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1d87	90 05		bcc $1d8e			bcc 	_TOKDNotIdentifier
.1d89	20 d7 1d	jsr $1dd7			jsr 	TOKDIdentifier
.1d8c	80 df		bra $1d6d			bra 	_TOKDLoop
.1d8e					_TOKDNotIdentifier:
.1d8e	a0 0a		ldy #$0a			ldy 	#10
.1d90	20 20 1e	jsr $1e20			jsr 	TOKDInteger
.1d93	80 d8		bra $1d6d			bra 	_TOKDLoop
.1d95					_TOKDDataItem:
.1d95	20 b2 1d	jsr $1db2			jsr 	TOKDDataItem
.1d98	80 d3		bra $1d6d			bra 	_TOKDLoop
.1d9a					_TOKDExit:
.1d9a	18		clc				clc
.1d9b	60		rts				rts
.1d9c	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1d9e	e6 26		inc $26				inc 	zTemp2
.1da0	d0 02		bne $1da4			bne 	_TKDGExit
.1da2	e6 27		inc $27				inc 	zTemp2+1
.1da4					_TKDGExit:
.1da4	60		rts				rts
.1da5					TOKDOutput:
.1da5	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1da8	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1dab					TOKSetDetokeniseOutput:
.1dab	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1dae	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1db1	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1db2					TOKDDataItem:
.1db2	a8		tay				tay 								; type in Y
.1db3	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1db5	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1db7	f0 02		beq $1dbb			beq 	_TOKDDIsString
.1db9	a9 2e		lda #$2e			lda 	#'.'
.1dbb					_TOKDDIsString:
.1dbb	20 a5 1d	jsr $1da5			jsr 	TOKDOutput 					; dump it
.1dbe	20 9c 1d	jsr $1d9c			jsr 	TOKDGet 					; get length into X
.1dc1	aa		tax				tax
.1dc2					_TOKDDOutput:
.1dc2	ca		dex				dex 								; are we complete
.1dc3	30 08		bmi $1dcd			bmi 	_TOKDDEnd
.1dc5	20 9c 1d	jsr $1d9c			jsr 	TOKDGet 					; get character and output it
.1dc8	20 a5 1d	jsr $1da5			jsr 	TOKDOutput
.1dcb	80 f5		bra $1dc2			bra 	_TOKDDOutput
.1dcd					_TOKDDEnd:
.1dcd	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1dcf	d0 05		bne $1dd6			bne 	_TOKDDNotString
.1dd1	a9 22		lda #$22			lda 	#'"'
.1dd3	20 a5 1d	jsr $1da5			jsr 	TOKDOutput
.1dd6					_TOKDDNotString:
.1dd6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1dd7					TOKDIdentifier:
.1dd7	a0 ff		ldy #$ff			ldy 	#$FF
.1dd9	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1ddc					_TOKDLoop:
.1ddc	a8		tay				tay 								; token in Y
.1ddd	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1ddf	c0 64		cpy #$64			cpy 	#$64
.1de1	f0 11		beq $1df4			beq 	_TOKDIOutput
.1de3	a9 5f		lda #$5f			lda 	#'_'
.1de5	c0 65		cpy #$65			cpy 	#$65
.1de7	f0 0b		beq $1df4			beq 	_TOKDIOutput
.1de9	98		tya				tya 								; handle a-z
.1dea	18		clc				clc
.1deb	69 21		adc #$21			adc	 	#$21
.1ded	c0 5a		cpy #$5a			cpy 	#$5A
.1def	90 03		bcc $1df4			bcc 	_TOKDIOutput
.1df1	38		sec				sec 								; handle 0-9
.1df2	e9 4b		sbc #$4b			sbc 	#$4B
.1df4					_TOKDIOutput:
.1df4	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1df7	10 08		bpl $1e01			bpl 	_TOKDINoSpacing
.1df9	48		pha				pha
.1dfa	20 96 1e	jsr $1e96			jsr 	TOKDSpacing
.1dfd	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1e00	68		pla				pla
.1e01					_TOKDINoSpacing:
.1e01	20 a5 1d	jsr $1da5			jsr 	TOKDOutput
.1e04	20 9c 1d	jsr $1d9c			jsr 	TOKDGet 					; get next token
.1e07	c9 7c		cmp #$7c			cmp 	#$7C
.1e09	90 d1		bcc $1ddc			bcc 	_TOKDLoop
.1e0b	f0 12		beq $1e1f			beq 	_TOKDIExit 					; it's a number, no tail.
.1e0d	4a		lsr a				lsr 	a 							; string ?
.1e0e	90 07		bcc $1e17			bcc 	_TOKDICheckArray
.1e10	48		pha				pha
.1e11	a9 24		lda #$24			lda 	#"$"
.1e13	20 a5 1d	jsr $1da5			jsr 	TOKDOutput
.1e16	68		pla				pla
.1e17					_TOKDICheckArray:
.1e17	4a		lsr a				lsr 	a 							; array ?
.1e18	90 05		bcc $1e1f			bcc 	_TOKDIExit
.1e1a	a9 28		lda #$28			lda 	#"("
.1e1c	20 a5 1d	jsr $1da5			jsr 	TOKDOutput
.1e1f					_TOKDIExit:
.1e1f	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1e20					TOKDInteger:
.1e20	5a		phy				phy 								; save base
.1e21	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1e23	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.1e26					_TOKDILoop:
.1e26	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1e28	c9 40		cmp #$40			cmp 	#$40
.1e2a	b0 1d		bcs $1e49			bcs 	_TOKDIHaveInteger
.1e2c	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1e2e	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.1e31	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.1e34	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.1e37	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.1e3a	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.1e3d	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.1e40	20 9c 1d	jsr $1d9c			jsr 	TOKDGet 					; OR byte in.
.1e43	05 08		ora $08				ora 	IFR0+IM0
.1e45	85 08		sta $08				sta 	IFR0+IM0
.1e47	80 dd		bra $1e26			bra 	_TOKDILoop
.1e49					_TOKDIHaveInteger:
.1e49	7a		ply				ply 								; restore base
.1e4a	98		tya				tya 								; base in A
.1e4b	20 7c 2e	jsr $2e7c			jsr 	IFloatIntegerToStringR0
.1e4e	86 22		stx $22				stx 	zTemp0
.1e50	84 23		sty $23				sty 	zTemp0+1
.1e52	b2 22		lda ($22)			lda 	(zTemp0)
.1e54	20 96 1e	jsr $1e96			jsr 	TOKDSpacing 				; check spacing okay.
.1e57	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1e59					_TOKDOutput:
.1e59	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e5b	20 a5 1d	jsr $1da5			jsr 	TOKDOutput
.1e5e	c8		iny				iny
.1e5f	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e61	d0 f6		bne $1e59			bne 	_TOKDOutput
.1e63	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1e64					TOKDToken:
.1e64	a2 ac		ldx #$ac			ldx 	#StandardTokens & $FF
.1e66	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.1e68					_TOKDSearch:
.1e68	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1e6a	84 23		sty $23				sty 	zTemp0+1
.1e6c	aa		tax				tax 								; token ID in X.
.1e6d					_TOKDFind:
.1e6d	ca		dex				dex 								; reached the start
.1e6e	10 0d		bpl $1e7d			bpl 	_TOKDFound
.1e70	38		sec				sec 								; go to next entry
.1e71	b2 22		lda ($22)			lda 	(zTemp0)
.1e73	65 22		adc $22				adc 	zTemp0
.1e75	85 22		sta $22				sta 	zTemp0
.1e77	90 f4		bcc $1e6d			bcc 	_TOKDFind
.1e79	e6 23		inc $23				inc 	zTemp0+1
.1e7b	80 f0		bra $1e6d			bra 	_TOKDFind
.1e7d					_TOKDFound:
.1e7d	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1e7f	f0 14		beq $1e95			beq 	_TOKDExit
.1e81	aa		tax				tax
.1e82	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1e84	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing
.1e86	20 96 1e	jsr $1e96			jsr 	TOKDSpacing
.1e89					_TOKDOutput:
.1e89	b1 22		lda ($22),y			lda 	(zTemp0),y
.1e8b	20 38 22	jsr $2238			jsr 	TOKToLower
.1e8e	20 a5 1d	jsr $1da5			jsr 	TOKDOutput
.1e91	c8		iny				iny
.1e92	ca		dex				dex
.1e93	d0 f4		bne $1e89			bne 	_TOKDOutput
.1e95					_TOKDExit:
.1e95	60		rts				rts
.1e96					TOKDSpacing:
.1e96	20 4f 22	jsr $224f			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1e99	90 0d		bcc $1ea8			bcc 	_TOKDSExit
.1e9b	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1e9e	20 4f 22	jsr $224f			jsr 	TOKIsIdentifierElement
.1ea1	90 05		bcc $1ea8			bcc 	_TOKDSExit
.1ea3	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1ea5	20 a5 1d	jsr $1da5			jsr 	TOKDOutput
.1ea8					_TOKDSExit:
.1ea8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1ea9					PGMDeleteLine:
.1ea9	20 5c 1f	jsr $1f5c			jsr 	PGMEndProgram 				; end of program into zTemp0
.1eac	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1eae	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1eb1	85 25		sta $25				sta 	zTemp1+1
.1eb3					_PGMDLoop:
.1eb3	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.1eb5	38		sec				sec
.1eb6	f0 3a		beq $1ef2			beq 	_PGMDExit
.1eb8	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1eba	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ebc	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1ebf	d0 08		bne $1ec9			bne 	_PGMDNext
.1ec1	c8		iny				iny
.1ec2	b1 24		lda ($24),y			lda 	(zTemp1),y
.1ec4	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.1ec7	f0 0d		beq $1ed6			beq 	_PGMDDelete
.1ec9					_PGMDNext:
.1ec9	18		clc				clc
.1eca	b2 24		lda ($24)			lda 	(zTemp1)
.1ecc	65 24		adc $24				adc 	zTemp1
.1ece	85 24		sta $24				sta 	zTemp1
.1ed0	90 e1		bcc $1eb3			bcc 	_PGMDLoop
.1ed2	e6 25		inc $25				inc 	zTemp1+1
.1ed4	80 dd		bra $1eb3			bra 	_PGMDLoop
.1ed6					_PGMDDelete:
.1ed6	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.1ed8	a8		tay				tay
.1ed9					_PGMDCopy:
.1ed9	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.1edb	92 24		sta ($24)			sta 	(zTemp1)
.1edd	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.1edf	c5 22		cmp $22				cmp 	zTemp0
.1ee1	d0 07		bne $1eea			bne 	_PGMDNext2
.1ee3	a5 25		lda $25				lda 	zTemp1+1
.1ee5	c5 23		cmp $23				cmp 	zTemp0+1
.1ee7	18		clc				clc
.1ee8	f0 08		beq $1ef2			beq 	_PGMDExit
.1eea					_PGMDNext2:
.1eea	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.1eec	d0 eb		bne $1ed9			bne 	_PGMDCopy
.1eee	e6 25		inc $25				inc 	zTemp1+1
.1ef0	80 e7		bra $1ed9			bra 	_PGMDCopy
.1ef2					_PGMDExit:
.1ef2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1ef3					PGMInsertLine:
.1ef3	20 5c 1f	jsr $1f5c			jsr 	PGMEndProgram 				; end of program into zTemp0
.1ef6	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.1ef8	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1efb	85 25		sta $25				sta 	zTemp1+1
.1efd					_PGMILoop:
.1efd	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1eff	f0 1c		beq $1f1d			beq 	_PGMIInsert
.1f01	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1f03	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f05	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.1f08	c8		iny				iny
.1f09	b1 24		lda ($24),y			lda 	(zTemp1),y
.1f0b	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.1f0e	b0 0d		bcs $1f1d			bcs 	_PGMIInsert 				; insert here.
.1f10	18		clc				clc
.1f11	b2 24		lda ($24)			lda 	(zTemp1)
.1f13	65 24		adc $24				adc 	zTemp1
.1f15	85 24		sta $24				sta 	zTemp1
.1f17	90 e4		bcc $1efd			bcc 	_PGMILoop
.1f19	e6 25		inc $25				inc 	zTemp1+1
.1f1b	80 e0		bra $1efd			bra 	_PGMILoop
.1f1d					_PGMIInsert:
.1f1d	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.1f20					_PGMIInsertLoop:
.1f20	b2 22		lda ($22)			lda 	(zTemp0)
.1f22	91 22		sta ($22),y			sta 	(zTemp0),y
.1f24	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.1f26	c5 22		cmp $22				cmp 	zTemp0
.1f28	d0 06		bne $1f30			bne 	_PGMINext
.1f2a	a5 25		lda $25				lda 	zTemp1+1
.1f2c	c5 23		cmp $23				cmp 	zTemp0+1
.1f2e	f0 0a		beq $1f3a			beq 	_PGMIInserted
.1f30					_PGMINext:
.1f30	a5 22		lda $22				lda 	zTemp0
.1f32	d0 02		bne $1f36			bne 	_PGMINoBorrow
.1f34	c6 23		dec $23				dec 	zTemp0+1
.1f36					_PGMINoBorrow:
.1f36	c6 22		dec $22				dec 	zTemp0
.1f38	80 e6		bra $1f20			bra 	_PGMIInsertLoop
.1f3a					_PGMIInserted:
.1f3a	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1f3c					_PGMICopyLoop:
.1f3c	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.1f3f	91 24		sta ($24),y			sta 	(zTemp1),y
.1f41	c8		iny				iny
.1f42	cc 00 04	cpy $0400			cpy 	TOKLineSize
.1f45	d0 f5		bne $1f3c			bne 	_PGMICopyLoop
.1f47	18		clc				clc
.1f48	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1f49					PGMSetBaseAddress:
.1f49	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.1f4c	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.1f4f	60		rts				rts
.1f50					PGMNewProgram:
.1f50	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.1f52	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f55	85 23		sta $23				sta 	zTemp0+1
.1f57	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.1f59	92 22		sta ($22)			sta 	(zTemp0)
.1f5b	60		rts				rts
.1f5c					PGMEndProgram:
.1f5c	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.1f5e	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.1f61	85 23		sta $23				sta 	zTemp0+1
.1f63					_PGMEPLoop:
.1f63	b2 22		lda ($22)			lda 	(zTemp0) 					; reached end ?
.1f65	f0 0b		beq $1f72			beq 	_PGMEPExit
.1f67	18		clc				clc 								; no, advance to next
.1f68	65 22		adc $22				adc 	zTemp0
.1f6a	85 22		sta $22				sta 	zTemp0
.1f6c	90 f5		bcc $1f63			bcc 	_PGMEPLoop
.1f6e	e6 23		inc $23				inc 	zTemp0+1
.1f70	80 f1		bra $1f63			bra 	_PGMEPLoop
.1f72					_PGMEPExit:
.1f72	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1f73					TOKResetElement:
.1f73	9c 1c 05	stz $051c			stz 	TOKElement
.1f76	60		rts				rts
.1f77					TOKWriteElement:
.1f77	da		phx				phx
.1f78	ae 1c 05	ldx $051c			ldx 	TOKElement
.1f7b	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.1f7e	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.1f81	fa		plx				plx
.1f82	ee 1c 05	inc $051c			inc 	TOKElement
.1f85	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1f86					TOKTokeniseConstant:
.1f86	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.1f88	48		pha				pha 								; save on stack
.1f89	29 c0		and #$c0			and 	#$C0
.1f8b	05 09		ora $09				ora 	IFR0+IM1
.1f8d	05 0a		ora $0a				ora 	IFR0+IM2
.1f8f	f0 10		beq $1fa1			beq 	_TTCLess
.1f91	da		phx				phx
.1f92	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1f94					_TTCShiftRight:
.1f94	46 0a		lsr $0a				lsr 	IFR0+IM2
.1f96	66 09		ror $09				ror 	IFR0+IM1
.1f98	66 08		ror $08				ror 	IFR0+IM0
.1f9a	ca		dex				dex
.1f9b	d0 f7		bne $1f94			bne 	_TTCShiftRight
.1f9d	fa		plx				plx
.1f9e	20 86 1f	jsr $1f86			jsr 	TOKTokeniseConstant
.1fa1					_TTCLess:
.1fa1	68		pla				pla
.1fa2	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1fa4	20 43 20	jsr $2043			jsr 	TOKWriteA
.1fa7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1fa8					TOKTokeniseDecimals:
.1fa8	20 56 20	jsr $2056			jsr 	TOKGetNext 					; consume the .
.1fab	20 bc 21	jsr $21bc			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1fae	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1fb0	20 43 20	jsr $2043			jsr 	TOKWriteA
.1fb3	20 b8 1f	jsr $1fb8			jsr 	TOKOutputElementBuffer 		; then the buffer
.1fb6	18		clc				clc
.1fb7	60		rts				rts
.1fb8					TOKOutputElementBuffer:
.1fb8	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.1fbb	20 43 20	jsr $2043			jsr 	TOKWriteA
.1fbe	a8		tay				tay 								; put in Y
.1fbf	f0 0c		beq $1fcd			beq 	_TOEExit 					; exit if empty which is okay.
.1fc1	a2 01		ldx #$01			ldx 	#1
.1fc3					_TOELoop:
.1fc3	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.1fc6	20 43 20	jsr $2043			jsr 	TOKWriteA
.1fc9	e8		inx				inx
.1fca	88		dey				dey
.1fcb	d0 f6		bne $1fc3			bne 	_TOELoop
.1fcd					_TOEExit:
.1fcd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1fce					TOKTokenise:
.1fce	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.1fd1	8e 1c 06	stx $061c			stx 	TOKDataSource
.1fd4	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1fd6	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.1fd9	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1fdb	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.1fde	9c 01 04	stz $0401			stz 	TOKLineNumber
.1fe1	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.1fe4					_TOKMainLoop:
.1fe4	20 52 20	jsr $2052			jsr 	TOKGet 						; what follows.
.1fe7	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1fe9	f0 4f		beq $203a			beq 	_TOKExit
.1feb	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1fed	d0 05		bne $1ff4			bne 	_TOKElement
.1fef	20 56 20	jsr $2056			jsr 	TOKGetNext
.1ff2	80 f0		bra $1fe4			bra 	_TOKMainLoop
.1ff4					_TOKElement:
.1ff4	20 43 22	jsr $2243			jsr 	TOKIsDigit 					; is it 0..9
.1ff7	90 0a		bcc $2003			bcc 	_TOKNotDigit
.1ff9	20 93 21	jsr $2193			jsr 	TOKTokeniseInteger 			; get integer
.1ffc	b0 43		bcs $2041			bcs 	_TOKFail 					; did it fail ?
.1ffe	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2001	80 e1		bra $1fe4			bra 	_TOKMainLoop
.2003					_TOKNotDigit:
.2003	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2006	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.2008	d0 07		bne $2011			bne 	_TOKNotHex
.200a	20 9f 20	jsr $209f			jsr 	TOKTokeniseHexadecimal
.200d	b0 32		bcs $2041			bcs 	_TOKFail
.200f	80 d3		bra $1fe4			bra 	_TOKMainLoop
.2011					_TOKNotHex:
.2011	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2013	d0 07		bne $201c			bne 	_TOKNotDecimal
.2015	20 a8 1f	jsr $1fa8			jsr 	TOKTokeniseDecimals
.2018	b0 27		bcs $2041			bcs 	_TOKFail
.201a	80 c8		bra $1fe4			bra 	_TOKMainLoop
.201c					_TOKNotDecimal:
.201c	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.201e	d0 07		bne $2027			bne 	_TOKNotString
.2020	20 0a 22	jsr $220a			jsr 	TOKTokeniseString
.2023	b0 1c		bcs $2041			bcs 	_TOKFail
.2025	80 bd		bra $1fe4			bra 	_TOKMainLoop
.2027					_TOKNotString:
.2027	20 60 22	jsr $2260			jsr 	TOKIsAlpha 					; identifier ?
.202a	b0 07		bcs $2033			bcs 	_TOKIdentifier
.202c	20 d0 21	jsr $21d0			jsr 	TOKTokenisePunctuation 		; punctuation
.202f	b0 10		bcs $2041			bcs 	_TOKFail
.2031	80 b1		bra $1fe4			bra 	_TOKMainLoop
.2033					_TOKIdentifier:
.2033	20 d9 20	jsr $20d9			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2036	b0 09		bcs $2041			bcs 	_TOKFail
.2038	80 aa		bra $1fe4			bra 	_TOKMainLoop
.203a					_TOKExit:
.203a	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.203c	20 43 20	jsr $2043			jsr 	TOKWriteA
.203f	18		clc				clc									; return with carry set.
.2040	60		rts				rts
.2041					_TOKFail:
.2041	38		sec				sec
.2042	60		rts				rts
.2043					TOKWriteA:
.2043	da		phx				phx
.2044	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2047	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.204a	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.204d	fa		plx				plx
.204e	ee 00 04	inc $0400			inc 	TOKLineSize
.2051	60		rts				rts
.2052					TOKGet:
.2052	18		clc				clc
.2053	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.2056					TOKGetNext:
.2056	38		sec				sec
.2057	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.205a					TOKFindToken:
.205a	a2 ac		ldx #$ac			ldx 	#StandardTokens & $FF 		; do this table
.205c	a0 1a		ldy #$1a			ldy 	#StandardTokens >> 8
.205e	20 69 20	jsr $2069			jsr 	TOKFindTokenXY 				; find it, or not
.2061	90 04		bcc $2067			bcc 	_TOKFTFail
.2063	a2 00		ldx #$00			ldx 	#0
.2065	38		sec				sec
.2066	60		rts				rts
.2067					_TOKFTFail
.2067	18		clc				clc
.2068	60		rts				rts
.2069					TOKFindTokenXY:
.2069	86 22		stx $22				stx 	zTemp0 						; save token table address
.206b	84 23		sty $23				sty 	zTemp0+1
.206d	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.206f	8d 1f 06	sta $061f			sta 	TOKCurrent
.2072					_TOKFindLoop:
.2072	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.2074	18		clc				clc 		 						; clear carry in case of fail
.2075	30 17		bmi $208e			bmi 	_TOKExit 					; end of table, fail, so return CC.
.2077	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.207a	d0 13		bne $208f			bne 	_TOKNext 					; different, try next.
.207c	aa		tax				tax 								; number of chars to compare.
.207d	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.207f					_TOKCompare:
.207f	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.2081	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.2084	d0 09		bne $208f			bne 	_TOKNext 					; different ? try next
.2086	c8		iny				iny 								; compare next two
.2087	ca		dex				dex
.2088	d0 f5		bne $207f			bne 	_TOKCompare 				; until done X characters.
.208a	38		sec				sec
.208b	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.208e					_TOKExit:
.208e	60		rts				rts
.208f					_TOKNext:
.208f	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.2092	38		sec				sec 								; add length+1 to ptr
.2093	b2 22		lda ($22)			lda 	(zTemp0)
.2095	65 22		adc $22				adc 	zTemp0
.2097	85 22		sta $22				sta 	zTemp0
.2099	90 d7		bcc $2072			bcc 	_TOKFindLoop
.209b	e6 23		inc $23				inc 	zTemp0+1
.209d	80 d3		bra $2072			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.209f					TOKTokeniseHexadecimal:
.209f	20 56 20	jsr $2056			jsr 	TOKGetNext 					; consume the $
.20a2	a2 08		ldx #$08			ldx 	#IFR0
.20a4	20 da 30	jsr $30da			jsr 	IFloatSetZero 				; set R0 = 0
.20a7					_TTHLoop:
.20a7	20 52 20	jsr $2052			jsr 	TOKGet 						; keep getting and copying while numeric.
.20aa	20 6d 22	jsr $226d			jsr 	TOKIsHexadecimal
.20ad	90 20		bcc $20cf			bcc 	_TTHDone
.20af	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.20b1	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.20b4	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.20b7	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.20ba	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.20bd	20 56 20	jsr $2056			jsr 	TOKGetNext
.20c0	38		sec				sec 								; convert to decimal.
.20c1	e9 30		sbc #$30			sbc 	#48
.20c3	c9 0a		cmp #$0a			cmp 	#10
.20c5	90 02		bcc $20c9			bcc 	_TTHNotAlpha
.20c7	e9 07		sbc #$07			sbc 	#7
.20c9					_TTHNotAlpha:
.20c9	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.20cb	85 08		sta $08				sta 	IFR0+IM0
.20cd	80 d8		bra $20a7			bra 	_TTHLoop
.20cf					_TTHDone:
.20cf	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.20d1	20 43 20	jsr $2043			jsr 	TOKWriteA
.20d4	20 86 1f	jsr $1f86			jsr 	TOKTokeniseConstant 		; write integer out.
.20d7	18		clc				clc
.20d8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.20d9					TOKTokeniseIdentifier:
.20d9	20 73 1f	jsr $1f73			jsr 	TOKResetElement 			; extract an identifier
.20dc					_TOKGetIdentifier:
.20dc	20 52 20	jsr $2052			jsr 	TOKGet
.20df	20 2d 22	jsr $222d			jsr 	TOKToUpper
.20e2	20 4f 22	jsr $224f			jsr 	TOKIsIdentifierElement
.20e5	90 08		bcc $20ef			bcc 	_TOKEndIdent
.20e7	20 77 1f	jsr $1f77			jsr		TOKWriteElement
.20ea	20 56 20	jsr $2056			jsr 	TOKGetNext
.20ed	80 ed		bra $20dc			bra 	_TOKGetIdentifier
.20ef					_TOKEndIdent:
.20ef	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.20f1	d0 06		bne $20f9			bne 	_TOKNotString
.20f3	20 77 1f	jsr $1f77			jsr 	TOKWriteElement 			; add it
.20f6	20 56 20	jsr $2056			jsr 	TOKGetNext 					; consume it
.20f9					_TOKNotString:
.20f9	20 52 20	jsr $2052			jsr 	TOKGet 						; finally check for (
.20fc	c9 28		cmp #$28			cmp 	#"("
.20fe	d0 06		bne $2106			bne 	_TOKNoArray
.2100	20 77 1f	jsr $1f77			jsr 	TOKWriteElement 			; add it
.2103	20 56 20	jsr $2056			jsr 	TOKGetNext 					; consume it
.2106					_TOKNoArray:
.2106	20 5a 20	jsr $205a			jsr 	TOKFindToken 				; find it
.2109	90 0e		bcc $2119			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.210b	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.210d	f0 05		beq $2114			beq 	_TOKComment 				; yes, do comment code.
.210f	20 43 20	jsr $2043			jsr 	TOKWriteA
.2112	18		clc				clc
.2113	60		rts				rts
.2114					_TOKComment:
.2114	20 60 21	jsr $2160			jsr 	TOKDoComment
.2117	18		clc				clc
.2118	60		rts				rts
.2119					_TOKIsVariable:
.2119	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.211b					_TOKOutputBuffer:
.211b	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.211e	20 47 21	jsr $2147			jsr 	TOKTranslateIdentifier
.2121	20 43 20	jsr $2043			jsr 	TOKWriteA
.2124	e8		inx				inx
.2125	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.2128	20 4f 22	jsr $224f			jsr 	TOKIsIdentifierElement
.212b	b0 ee		bcs $211b			bcs 	_TOKOutputBuffer
.212d	a8		tay				tay 								; last char in Y
.212e	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2130	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2132	f0 0e		beq $2142			beq 	_TOKIVExit
.2134	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2136	d0 04		bne $213c			bne 	_TOKIVCheckArray 			; no, check for (
.2138	1a		inc a				inc 	a 							; token is $7D
.2139	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.213c					_TOKIVCheckArray:
.213c	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.213e	d0 02		bne $2142			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2140	1a		inc a				inc 	a
.2141	1a		inc a				inc 	a
.2142					_TOKIVExit:
.2142	20 43 20	jsr $2043			jsr 	TOKWriteA 					; ending token
.2145	18		clc				clc
.2146	60		rts				rts
.2147					TOKTranslateIdentifier:
.2147	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.2149	f0 0f		beq $215a			beq 	_TTI64
.214b	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.214d	f0 0e		beq $215d			beq 	_TTI65
.214f	38		sec				sec
.2150	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2152	10 03		bpl $2157			bpl 	_TTIExit
.2154	18		clc				clc 								; map 09 onto 26-35
.2155	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2157					_TTIExit:
.2157	09 40		ora #$40			ora 	#$40 						; correct range.
.2159	60		rts				rts
.215a	a9 64		lda #$64	_TTI64:	lda 	#$64
.215c	60		rts				rts
.215d	a9 65		lda #$65	_TTI65:	lda 	#$65
.215f	60		rts				rts
.2160					TOKDoComment:
.2160	20 43 20	jsr $2043			jsr 	TOKWriteA					; output the token.
.2163					_TOKSkipSpaces:
.2163	20 52 20	jsr $2052			jsr 	TOKGet 						; skip over spaces
.2166	c9 20		cmp #$20			cmp 	#' '
.2168	d0 05		bne $216f			bne 	_TOKEndSpaces
.216a	20 56 20	jsr $2056			jsr 	TOKGetNext
.216d	80 f4		bra $2163			bra 	_TOKSkipSpaces
.216f					_TOKEndSpaces:
.216f	48		pha				pha 								; save it
.2170	68		pla				pla
.2171	f0 04		beq $2177			beq 	_TOKDCExit 					; end of line.
.2173	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.2175	d0 01		bne $2178			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.2177					_TOKDCExit:
.2177	60		rts				rts
.2178					_TOKDCDoLine:
.2178	20 73 1f	jsr $1f73			jsr 	TOKResetElement 			; start getting the string
.217b					_TOKDCLoop:
.217b	20 52 20	jsr $2052			jsr 	TOKGet 						; check EOL
.217e	c9 00		cmp #$00			cmp 	#0
.2180	f0 08		beq $218a			beq 	_TOKDCEndComment
.2182	20 56 20	jsr $2056			jsr 	TOKGetNext 					; get and consume
.2185	20 77 1f	jsr $1f77			jsr 	TOKWriteElement
.2188	80 f1		bra $217b			bra 	_TOKDCLoop
.218a					_TOKDCEndComment:
.218a	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.218c	20 43 20	jsr $2043			jsr 	TOKWriteA
.218f	20 b8 1f	jsr $1fb8			jsr 	TOKOutputElementBuffer
.2192	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2193					TOKTokeniseInteger:
.2193	20 bc 21	jsr $21bc			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2196	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.2198	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.219a	ad 1c 05	lda $051c			lda		TOKElement
.219d	20 3e 2f	jsr $2f3e			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.21a0	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.21a3	f0 12		beq $21b7			beq 	_TOKNotLineNumber
.21a5	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.21a7	d0 0c		bne $21b5			bne 	_TOKBadLineNumeber
.21a9	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.21ab	8d 01 04	sta $0401			sta 	TOKLineNumber
.21ae	a5 09		lda $09				lda 	IFR0+IM1
.21b0	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.21b3	18		clc				clc
.21b4	60		rts				rts
.21b5					_TOKBadLineNumeber:
.21b5	38		sec				sec
.21b6	60		rts				rts
.21b7					_TOKNotLineNumber:
.21b7	20 86 1f	jsr $1f86			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.21ba	18		clc				clc
.21bb	60		rts				rts
.21bc					TOKExtractInteger:
.21bc	20 73 1f	jsr $1f73			jsr 	TOKResetElement 			; restart
.21bf					_TTILoop:
.21bf	20 52 20	jsr $2052			jsr 	TOKGet 						; keep getting and copying while numeric.
.21c2	20 43 22	jsr $2243			jsr 	TOKIsDigit
.21c5	90 08		bcc $21cf			bcc 	_TOKEIExit
.21c7	20 77 1f	jsr $1f77			jsr 	TOKWriteElement
.21ca	20 56 20	jsr $2056			jsr 	TOKGetNext
.21cd	80 f0		bra $21bf			bra 	_TTILoop
.21cf					_TOKEIExit:
.21cf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.21d0					TOKTokenisePunctuation:
.21d0	20 73 1f	jsr $1f73			jsr 	TOKResetElement 			; copy first punctuation character into element.
.21d3	20 56 20	jsr $2056			jsr 	TOKGetNext
.21d6	20 77 1f	jsr $1f77			jsr 	TOKWriteElement
.21d9	20 52 20	jsr $2052			jsr 	TOKGet 						; what follows ?
.21dc	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.21de	f0 10		beq $21f0			beq 	_TTPOne
.21e0	20 57 22	jsr $2257			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.21e3	b0 0b		bcs $21f0			bcs 	_TTPOne 					; these speed things up a bit.
.21e5	20 77 1f	jsr $1f77			jsr 	TOKWriteElement 			; this is what we will search for.
.21e8	20 5a 20	jsr $205a			jsr 	TOKFindToken
.21eb	b0 0a		bcs $21f7			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.21ed	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.21f0					_TTPOne:
.21f0	20 5a 20	jsr $205a			jsr 	TOKFindToken 				; look for one character punctuation
.21f3	b0 07		bcs $21fc			bcs 	_TTPOutputExit 				; we found it
.21f5	38		sec				sec 								; not recognised.
.21f6	60		rts				rts
.21f7					_TTPConsumeExit:
.21f7	48		pha				pha
.21f8	20 56 20	jsr $2056			jsr 	TOKGetNext 					; get the 2nd char out.
.21fb	68		pla				pla
.21fc					_TTPOutputExit:
.21fc	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.21fe	f0 05		beq $2205			beq 	_TTPComment
.2200	20 43 20	jsr $2043			jsr  	TOKWriteA 					; write token out
.2203	18		clc				clc
.2204	60		rts				rts
.2205					_TTPComment:
.2205	20 60 21	jsr $2160			jsr 	TOKDoComment
.2208	18		clc				clc
.2209	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.220a					TOKTokeniseString:
.220a	20 56 20	jsr $2056			jsr 	TOKGetNext 					; consume the "
.220d	20 73 1f	jsr $1f73			jsr 	TOKResetElement 			; start getting the string
.2210					_TOKTSLoop:
.2210	20 52 20	jsr $2052			jsr 	TOKGet 						; check EOL
.2213	c9 00		cmp #$00			cmp 	#0
.2215	f0 0c		beq $2223			beq 	_TOKTSExit
.2217	20 56 20	jsr $2056			jsr 	TOKGetNext 					; get and consume
.221a	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.221c	f0 05		beq $2223			beq 	_TOKTSExit
.221e	20 77 1f	jsr $1f77			jsr 	TOKWriteElement
.2221	80 ed		bra $2210			bra 	_TOKTSLoop
.2223					_TOKTSExit:
.2223	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2225	20 43 20	jsr $2043			jsr 	TOKWriteA
.2228	20 b8 1f	jsr $1fb8			jsr 	TOKOutputElementBuffer
.222b	18		clc				clc
.222c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.222d					TOKToUpper:
.222d	c9 61		cmp #$61			cmp 	#"a"
.222f	90 06		bcc $2237			bcc 	_TTUNotLower
.2231	c9 7b		cmp #$7b			cmp 	#"z"+1
.2233	b0 02		bcs $2237			bcs 	_TTUNotLower
.2235	49 20		eor #$20			eor 	#$20
.2237					_TTUNotLower:
.2237	60		rts				rts
.2238					TOKToLower:
.2238	c9 41		cmp #$41			cmp 	#"A"
.223a	90 06		bcc $2242			bcc 	_TTUNotUpper
.223c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.223e	b0 02		bcs $2242			bcs 	_TTUNotUpper
.2240	49 20		eor #$20			eor 	#$20
.2242					_TTUNotUpper:
.2242	60		rts				rts
.2243					TOKIsDigit:
.2243	c9 30		cmp #$30			cmp 	#"0"
.2245	90 06		bcc $224d			bcc 	TOKFail
.2247	c9 3a		cmp #$3a			cmp 	#"9"+1
.2249	b0 02		bcs $224d			bcs 	TOKFail
.224b					TOKSucceed:
.224b	38		sec				sec
.224c	60		rts				rts
.224d					TOKFail:
.224d	18		clc				clc
.224e	60		rts				rts
.224f					TOKIsIdentifierElement:
.224f	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.2251	f0 f8		beq $224b			beq 	TOKSucceed
.2253	c9 5f		cmp #$5f			cmp 	#"_"
.2255	f0 f4		beq $224b			beq 	TOKSucceed 					; else fall through to alphanumeric
.2257					TOKIsAlphaNumeric:
.2257	20 60 22	jsr $2260			jsr 	TOKIsAlpha
.225a	b0 ef		bcs $224b			bcs 	TOKSucceed
.225c	20 43 22	jsr $2243			jsr 	TOKIsDigit
.225f	60		rts				rts
.2260					TOKIsAlpha:
.2260	20 2d 22	jsr $222d			jsr 	TOKToUpper
.2263	c9 41		cmp #$41			cmp 	#"A"
.2265	90 e6		bcc $224d			bcc 	TOKFail
.2267	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2269	b0 e2		bcs $224d			bcs 	TOKFail
.226b	80 de		bra $224b			bra 	TOKSucceed
.226d					TOKIsHexadecimal:
.226d	20 43 22	jsr $2243			jsr		TOKIsDigit
.2270	b0 d9		bcs $224b			bcs 	TOKSucceed
.2272	20 60 22	jsr $2260			jsr 	TOKIsAlpha
.2275	90 d6		bcc $224d			bcc 	TOKFail
.2277	c9 47		cmp #$47			cmp 	#"F"+1
.2279	b0 d2		bcs $224d			bcs 	TOKFail
.227b	80 ce		bra $224b			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.227d					Command_CALL:
.227d	a9 42		lda #$42			lda 	#STK_CALL
.227f	20 4a 27	jsr $274a			jsr 	StackOpen
.2282	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.2284	29 c0		and #$c0			and 	#$C0
.2286	c9 40		cmp #$40			cmp 	#$40
.2288	d0 29		bne $22b3			bne 	_CCSyntax
.228a	20 1d 2a	jsr $2a1d			jsr 	VARGetInfo 					; get the information
.228d	20 31 27	jsr $2731			jsr 	ERRCheckRParen 				; check right bracket follows.
.2290	20 cf 29	jsr $29cf			jsr 	VARFind 					; exists ?
.2293	90 21		bcc $22b6			bcc 	_CCUnknown
.2295	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.2297	85 22		sta $22				sta 	zTemp0
.2299	20 7e 27	jsr $277e			jsr 	STKSaveCodePosition 		; save return address on stack.
.229c	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.229e	b1 22		lda ($22),y			lda 	(zTemp0),y
.22a0	c9 ff		cmp #$ff			cmp 	#$FF
.22a2	d0 12		bne $22b6			bne 	_CCUnknown
.22a4	88		dey				dey 								; get Y offset to stack
.22a5	b1 22		lda ($22),y			lda 	(zTemp0),y
.22a7	48		pha				pha
.22a8	88		dey				dey 								; get address
.22a9	b1 22		lda ($22),y			lda 	(zTemp0),y
.22ab	85 19		sta $19				sta 	codePtr+1
.22ad	b2 22		lda ($22)			lda 	(zTemp0)
.22af	85 18		sta $18				sta 	codePtr
.22b1	7a		ply				ply 								; restore Y
.22b2	60		rts				rts
.22b3					_CCSyntax:
.22b3	4c 7c 25	jmp $257c		jmp	ErrorV_syntax
.22b6					_CCUnknown:
.22b6	4c f1 26	jmp $26f1		jmp	ErrorV_unknown
.22b9					Command_ENDPROC:
.22b9	a9 42		lda #$42			lda 	#STK_CALL
.22bb	20 76 27	jsr $2776			jsr 	StackCheckFrame
.22be	20 90 27	jsr $2790			jsr 	STKLoadCodePosition 		; return
.22c1	20 68 27	jsr $2768			jsr 	StackClose
.22c4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.22c5					Command_DO:
.22c5	a9 22		lda #$22			lda 	#STK_DO
.22c7	20 4a 27	jsr $274a			jsr 	StackOpen
.22ca	20 7e 27	jsr $277e			jsr 	STKSaveCodePosition 		; save loop position
.22cd	60		rts				rts
.22ce					Command_EXIT:
.22ce	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.22d0	20 76 27	jsr $2776			jsr 	StackCheckFrame
.22d3	20 68 27	jsr $2768			jsr 	StackClose 					; close it
.22d6	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.22d8	aa		tax				tax
.22d9	20 8c 24	jsr $248c			jsr 	ScanForward
.22dc	60		rts				rts
.22dd					Command_LOOP:
.22dd	a9 22		lda #$22			lda 	#STK_DO
.22df	20 76 27	jsr $2776			jsr 	StackCheckFrame
.22e2	20 90 27	jsr $2790			jsr 	STKLoadCodePosition 		; loop back
.22e5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.22e6					Command_FOR:
.22e6	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.22e8	20 4a 27	jsr $274a			jsr 	StackOpen
.22eb	20 be 12	jsr $12be			jsr 	CommandLET 					; do "I = 1" bit
.22ee	5a		phy				phy 								; save variable address to +4,+5
.22ef	a0 04		ldy #$04			ldy 	#4
.22f1	a5 22		lda $22				lda 	zTemp0
.22f3	91 2a		sta ($2a),y			sta 	(basicStack),y
.22f5	c8		iny				iny
.22f6	a5 23		lda $23				lda 	zTemp0+1
.22f8	91 2a		sta ($2a),y			sta 	(basicStack),y
.22fa	7a		ply				ply
.22fb	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.22fd	20 41 27	jsr $2741			jsr 	ERRCheckA
.2300	20 06 17	jsr $1706			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.2303	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2305	a2 08		ldx #$08			ldx 	#IFR0
.2307	20 5c 23	jsr $235c			jsr 	CFSaveR0X
.230a	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.230c	c9 91		cmp #$91			cmp 	#PR_STEP
.230e	d0 06		bne $2316			bne 	_CFStep1
.2310	c8		iny				iny 								; consume step
.2311	20 06 17	jsr $1706			jsr 	EXPEvalNumber 				; evaluate STEP
.2314	80 24		bra $233a			bra 	_CFWriteStep
.2316					_CFStep1:
.2316	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2318	a9 01		lda #$01			lda 	#1
.231a	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.231d	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.231e	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2320	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2322	85 22		sta $22				sta 	zTemp0
.2324	c8		iny				iny
.2325	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2327	85 23		sta $23				sta 	zTemp0+1
.2329	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.232b	b1 22		lda ($22),y			lda 	(zTemp0),y
.232d	d0 0a		bne $2339			bne 	_CFNotOptimised
.232f	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2331	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2333	d0 04		bne $2339			bne 	_CFNotOptimised
.2335	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2337	85 0b		sta $0b				sta 	IFR0+IExp
.2339					_CFNotOptimised:
.2339	7a		ply				ply
.233a					_CFWriteStep:
.233a	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.233c	a9 06		lda #$06			lda 	#6
.233e	20 5c 23	jsr $235c			jsr 	CFSaveR0X
.2341	20 7e 27	jsr $277e			jsr 	STKSaveCodePosition 		; save loop position
.2344	60		rts				rts
.2345					CFLoadR0X:
.2345	5a		phy				phy
.2346	a8		tay				tay
.2347	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2349	95 00		sta $00,x			sta 	IM0,x
.234b	c8		iny				iny
.234c	b1 2a		lda ($2a),y			lda 	(basicStack),y
.234e	95 01		sta $01,x			sta 	IM1,x
.2350	c8		iny				iny
.2351	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2353	95 02		sta $02,x			sta 	IM2,x
.2355	c8		iny				iny
.2356	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2358	95 03		sta $03,x			sta 	IExp,x
.235a	7a		ply				ply
.235b	60		rts				rts
.235c					CFSaveR0X:
.235c	5a		phy				phy
.235d	a8		tay				tay
.235e	b5 00		lda $00,x			lda 	IM0,x
.2360	91 2a		sta ($2a),y			sta 	(basicStack),y
.2362	c8		iny				iny
.2363	b5 01		lda $01,x			lda 	IM1,x
.2365	91 2a		sta ($2a),y			sta 	(basicStack),y
.2367	c8		iny				iny
.2368	b5 02		lda $02,x			lda 	IM2,x
.236a	91 2a		sta ($2a),y			sta 	(basicStack),y
.236c	c8		iny				iny
.236d	b5 03		lda $03,x			lda 	IExp,x
.236f	91 2a		sta ($2a),y			sta 	(basicStack),y
.2371	7a		ply				ply
.2372	60		rts				rts
.2373					Command_NEXT:
.2373	a9 37		lda #$37			lda 	#STK_FOR
.2375	20 76 27	jsr $2776			jsr 	StackCheckFrame
.2378	5a		phy				phy 								; check optimised loop
.2379	a0 09		ldy #$09			ldy 	#9
.237b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.237d	7a		ply				ply
.237e	0a		asl a				asl 	a
.237f	b0 35		bcs $23b6			bcs 	_CNOptimised
.2381	20 ed 23	jsr $23ed			jsr 	_CNLoadValue 				; load index value to R0.
.2384	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2386	a9 06		lda #$06			lda 	#6
.2388	20 45 23	jsr $2345			jsr 	CFLoadR0X
.238b	20 d2 2a	jsr $2ad2			jsr 	IFloatAdd 					; add them together and write back.
.238e	20 10 24	jsr $2410			jsr 	_CNSaveValue
.2391	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.2393	a2 0c		ldx #$0c			ldx 	#IFR1
.2395	20 45 23	jsr $2345			jsr 	CFLoadR0X
.2398	20 a9 2d	jsr $2da9			jsr 	IFloatCompare 				; compare terminal vs current
.239b	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.239d	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero
.23a0	f0 10		beq $23b2			beq 	_CNLoopBack
.23a2	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.23a4	5a		phy				phy
.23a5	a0 09		ldy #$09			ldy 	#6+IExp
.23a7	51 2a		eor ($2a),y			eor 	(basicStack),y
.23a9	7a		ply				ply
.23aa	29 40		and #$40			and 	#IFSign
.23ac	f0 04		beq $23b2			beq 	_CNLoopBack
.23ae					_CNExitLoop:
.23ae	20 68 27	jsr $2768			jsr 	StackClose		 			; return
.23b1	60		rts				rts
.23b2					_CNLoopBack:
.23b2	20 90 27	jsr $2790			jsr 	STKLoadCodePosition 		; loop back
.23b5	60		rts				rts
.23b6					_CNOptimised:
.23b6	5a		phy				phy
.23b7	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.23b9	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23bb	85 26		sta $26				sta 	zTemp2
.23bd	c8		iny				iny
.23be	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23c0	85 27		sta $27				sta 	zTemp2+1
.23c2	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.23c4					_CNIncrement:
.23c4	c8		iny				iny
.23c5	b1 26		lda ($26),y			lda 	(zTemp2),y
.23c7	1a		inc a				inc 	a
.23c8	91 26		sta ($26),y			sta 	(zTemp2),y
.23ca	f0 f8		beq $23c4			beq 	_CNIncrement
.23cc	18		clc				clc 								; point zTemp0 to terminal value
.23cd	a5 2a		lda $2a				lda 	basicStack
.23cf	69 0a		adc #$0a			adc 	#10
.23d1	85 22		sta $22				sta 	zTemp0
.23d3	a5 2b		lda $2b				lda 	basicStack+1
.23d5	69 00		adc #$00			adc 	#0
.23d7	85 23		sta $23				sta 	zTemp0+1
.23d9	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.23db	b2 26		lda ($26)			lda 	(zTemp2)
.23dd	d2 22		cmp ($22)			cmp 	(zTemp0)
.23df	b1 26		lda ($26),y			lda 	(zTemp2),y
.23e1	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.23e3	c8		iny				iny
.23e4	b1 26		lda ($26),y			lda 	(zTemp2),y
.23e6	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.23e8	7a		ply				ply
.23e9	b0 c3		bcs $23ae			bcs 	_CNExitLoop
.23eb	80 c5		bra $23b2			bra 	_CNLoopBack
.23ed					_CNLoadValue:
.23ed	5a		phy				phy
.23ee	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.23f0	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23f2	85 26		sta $26				sta 	zTemp2
.23f4	c8		iny				iny
.23f5	b1 2a		lda ($2a),y			lda 	(basicStack),y
.23f7	85 27		sta $27				sta 	zTemp2+1
.23f9	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.23fb	b1 26		lda ($26),y			lda 	(zTemp2),y
.23fd	85 08		sta $08				sta 	IFR0+IM0
.23ff	c8		iny				iny
.2400	b1 26		lda ($26),y			lda 	(zTemp2),y
.2402	85 09		sta $09				sta 	IFR0+IM1
.2404	c8		iny				iny
.2405	b1 26		lda ($26),y			lda 	(zTemp2),y
.2407	85 0a		sta $0a				sta 	IFR0+IM2
.2409	c8		iny				iny
.240a	b1 26		lda ($26),y			lda 	(zTemp2),y
.240c	85 0b		sta $0b				sta 	IFR0+IExp
.240e	7a		ply				ply
.240f	60		rts				rts
.2410					_CNSaveValue:
.2410	5a		phy				phy
.2411	a0 00		ldy #$00			ldy 	#0
.2413	a5 08		lda $08				lda 	IFR0+IM0
.2415	91 26		sta ($26),y			sta 	(zTemp2),y
.2417	c8		iny				iny
.2418	a5 09		lda $09				lda 	IFR0+IM1
.241a	91 26		sta ($26),y			sta 	(zTemp2),y
.241c	c8		iny				iny
.241d	a5 0a		lda $0a				lda 	IFR0+IM2
.241f	91 26		sta ($26),y			sta 	(zTemp2),y
.2421	c8		iny				iny
.2422	a5 0b		lda $0b				lda 	IFR0+IExp
.2424	91 26		sta ($26),y			sta 	(zTemp2),y
.2426	7a		ply				ply
.2427	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2428					Command_GOSUB:
.2428	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 			; get line number
.242b	a9 52		lda #$52			lda 	#STK_GOSUB
.242d	20 4a 27	jsr $274a			jsr 	StackOpen
.2430	20 7e 27	jsr $277e			jsr 	STKSaveCodePosition 		; save return address on stack.
.2433	4c db 11	jmp $11db			jmp 	GotoR0
.2436					Command_RETURN:
.2436	a9 52		lda #$52			lda 	#STK_GOSUB
.2438	20 76 27	jsr $2776			jsr 	StackCheckFrame
.243b	20 90 27	jsr $2790			jsr 	STKLoadCodePosition 		; return
.243e	20 68 27	jsr $2768			jsr 	StackClose
.2441	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2442					IfCommand:
.2442	20 06 17	jsr $1706			jsr 	EXPEvalNumber 				; Get the if test.
.2445	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2447	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2449	d0 0c		bne $2457			bne 	_IfStructured 				; we still support it.
.244b	c8		iny				iny 								; consume THEN
.244c	a2 08		ldx #$08			ldx 	#IFR0
.244e	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero 			; is it zero
.2451	f0 01		beq $2454			beq 	_IfFail 					; if fail, go to next line
.2453	60		rts				rts 								; if THEN just continue
.2454					_IfFail:
.2454	4c cc 14	jmp $14cc			jmp 	RUNEndOfLine
.2457					_IfStructured:
.2457	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero 			; is it zero
.245a	d0 07		bne $2463			bne 	_IfExit 					; if not, then continue normally.
.245c	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.245e	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2460	20 8c 24	jsr $248c			jsr 	ScanForward 				; and run from there
.2463					_IfExit:
.2463	60		rts				rts
.2464					ElseCode:
.2464	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2466	aa		tax				tax 								; so just go to the structure exit
.2467	20 8c 24	jsr $248c			jsr 	ScanForward
.246a	60		rts				rts
.246b					EndIf:
.246b	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.246c					Command_REPEAT:
.246c	a9 02		lda #$02			lda 	#STK_REPEAT
.246e	20 4a 27	jsr $274a			jsr 	StackOpen
.2471	20 7e 27	jsr $277e			jsr 	STKSaveCodePosition 		; save loop position
.2474	60		rts				rts
.2475					Command_UNTIL:
.2475	a9 02		lda #$02			lda 	#STK_REPEAT
.2477	20 76 27	jsr $2776			jsr 	StackCheckFrame
.247a	20 06 17	jsr $1706			jsr 	EXPEvalNumber 				; work out the test
.247d	a2 08		ldx #$08			ldx 	#IFR0
.247f	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero 			; check if zero
.2482	f0 04		beq $2488			beq 	_CULoopBack 				; if so keep looping
.2484	20 68 27	jsr $2768			jsr 	StackClose		 			; return
.2487	60		rts				rts
.2488					_CULoopBack:
.2488	20 90 27	jsr $2790			jsr 	STKLoadCodePosition 		; loop back
.248b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.248c					ScanForward:
.248c	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.248e	86 23		stx $23				stx 	zTemp0+1
.2490	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.2492					_ScanForwardLoop:
.2492	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.2494	d0 0a		bne $24a0			bne 	_ScanNoCheck
.2496	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2498	c5 22		cmp $22				cmp 	zTemp0
.249a	f0 49		beq $24e5			beq 	_ScanExit
.249c	c5 23		cmp $23				cmp 	zTemp0+1
.249e	f0 45		beq $24e5			beq 	_ScanExit
.24a0					_ScanNoCheck:
.24a0	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.24a2	c8		iny				iny
.24a3	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.24a5	f0 37		beq $24de			beq		_ScanDataItem
.24a7	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.24a9	f0 33		beq $24de			beq 	_ScanDataItem
.24ab	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.24ad	f0 1b		beq $24ca			beq 	_ScanNextLine
.24af	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.24b1	d0 01		bne $24b4			bne 	_ScanNoShift
.24b3	c8		iny				iny
.24b4					_ScanNoShift:
.24b4	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.24b6	b0 da		bcs $2492			bcs 	_ScanForwardLoop
.24b8	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.24ba	90 d6		bcc $2492			bcc 	_ScanForwardLoop
.24bc	aa		tax				tax 								; access the table to get the adjustment.
.24bd	18		clc				clc
.24be	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.24c0	7d 20 1a	adc $1a20,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.24c3	85 24		sta $24				sta 	zTemp1
.24c5	10 cb		bpl $2492			bpl		_ScanForwardLoop 			; error if -ve ?
.24c7	4c 08 26	jmp $2608		jmp	ErrorV_structure
.24ca					_ScanNextLine:
.24ca	18		clc				clc	 								; forward to next line.
.24cb	b2 18		lda ($18)			lda 	(codePtr)
.24cd	65 18		adc $18				adc 	codePtr
.24cf	85 18		sta $18				sta 	codePtr
.24d1	90 02		bcc $24d5			bcc 	_ScanNoCarry
.24d3	e6 19		inc $19				inc 	codePtr+1
.24d5					_ScanNoCarry:
.24d5	a0 03		ldy #$03			ldy 	#3
.24d7	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.24d9	d0 b7		bne $2492			bne 	_ScanForwardLoop
.24db	4c 08 26	jmp $2608		jmp	ErrorV_structure
.24de					_ScanDataItem:
.24de	98		tya				tya
.24df	38		sec				sec
.24e0	71 18		adc ($18),y			adc 	(codePtr),y
.24e2	a8		tay				tay
.24e3	80 ad		bra $2492			bra 	_ScanForwardLoop
.24e5					_ScanExit:
.24e5	c8		iny				iny 								; consume final token.
.24e6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.24e7					ScanProcedures:
.24e7	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.24e9	48		pha				pha
.24ea	a5 19		lda $19				lda 	codePtr+1
.24ec	48		pha				pha
.24ed	5a		phy				phy
.24ee	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.24f1	85 19		sta $19				sta 	codePtr+1
.24f3	64 18		stz $18				stz 	codePtr
.24f5					_SPLoop:
.24f5	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.24f7	f0 18		beq $2511			beq 	_SPExit
.24f9	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.24fb	b1 18		lda ($18),y			lda 	(codePtr),y
.24fd	c9 88		cmp #$88			cmp 	#PR_PROC
.24ff	d0 03		bne $2504			bne 	_SPNext
.2501	20 19 25	jsr $2519			jsr 	_SPSetupRecord
.2504					_SPNext:
.2504	18		clc				clc 								; forward to next
.2505	b2 18		lda ($18)			lda 	(codePtr)
.2507	65 18		adc $18				adc 	codePtr
.2509	85 18		sta $18				sta 	codePtr
.250b	90 e8		bcc $24f5			bcc 	_SPLoop
.250d	e6 19		inc $19				inc 	codePtr+1
.250f	80 e4		bra $24f5			bra 	_SPLoop
.2511					_SPExit:
.2511	7a		ply				ply
.2512	68		pla				pla
.2513	85 19		sta $19				sta 	codePtr+1
.2515	68		pla				pla
.2516	85 18		sta $18				sta 	codePtr
.2518	60		rts				rts
.2519					_SPSetupRecord:
.2519	c8		iny				iny 								; check identifier follows
.251a	b1 18		lda ($18),y			lda 	(codePtr),y
.251c	29 c0		and #$c0			and 	#$C0
.251e	c9 40		cmp #$40			cmp 	#$40
.2520	d0 27		bne $2549			bne 	_SPSyntax
.2522	20 1d 2a	jsr $2a1d			jsr 	VARGetInfo 					; get the information
.2525	20 31 27	jsr $2731			jsr 	ERRCheckRParen 				; check right bracket follows.
.2528	20 cf 29	jsr $29cf			jsr 	VARFind 					; already exists ?
.252b	b0 1f		bcs $254c			bcs 	_SPUsed 					; error !
.252d	20 7b 29	jsr $297b			jsr 	VARCreate 					; create, XA points to the data.
.2530	85 22		sta $22				sta 	zTemp0
.2532	86 23		stx $23				stx 	zTemp0+1
.2534	5a		phy				phy 								; save Y pos on stack
.2535	a0 01		ldy #$01			ldy 	#1
.2537	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2539	92 22		sta ($22)			sta 	(zTemp0)
.253b	a5 19		lda $19				lda 	codePtr+1
.253d	91 22		sta ($22),y			sta 	(zTemp0),y
.253f	c8		iny				iny
.2540	68		pla				pla
.2541	91 22		sta ($22),y			sta 	(zTemp0),y
.2543	c8		iny				iny
.2544	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2546	91 22		sta ($22),y			sta 	(zTemp0),y
.2548	60		rts				rts
.2549					_SPSyntax:
.2549	4c 7c 25	jmp $257c		jmp	ErrorV_syntax
.254c					_SPUsed:
.254c	4c d3 26	jmp $26d3		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.254f					Command_WHILE:
.254f	5a		phy				phy 								; save position of the test
.2550	20 06 17	jsr $1706			jsr 	EXPEvalNumber 				; work out the while test.
.2553	a2 08		ldx #$08			ldx 	#IFR0
.2555	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero 			; check if zero
.2558	f0 0e		beq $2568			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.255a	98		tya				tya 								; position *after* test.
.255b	7a		ply				ply 								; restore position before test, at WHILE
.255c	88		dey				dey 								; so we execute the WHILE command again.
.255d	48		pha				pha 								; push after test on the stack
.255e	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2560	20 4a 27	jsr $274a			jsr 	StackOpen
.2563	20 7e 27	jsr $277e			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2566	7a		ply				ply 								; restore the position *after* the test
.2567	60		rts				rts
.2568					_WHExitLoop:
.2568	68		pla				pla 								; throw post loop position
.2569	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.256b	aa		tax				tax
.256c	20 8c 24	jsr $248c			jsr 	ScanForward
.256f	60		rts				rts
.2570					Command_WEND:
.2570	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.2572	20 76 27	jsr $2776			jsr 	StackCheckFrame
.2575	20 90 27	jsr $2790			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2578	20 68 27	jsr $2768			jsr 	StackClose		 			; erase the frame
.257b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.257c					ErrorV_syntax:
.257c	20 69 28	jsr $2869		jsr	ErrorHandler
>257f	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2587	45 72 72 6f 72 00
.258d					ErrorV_range:
.258d	20 69 28	jsr $2869		jsr	ErrorHandler
>2590	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2598	52 61 6e 67 65 00
.259e					ErrorV_value:
.259e	20 69 28	jsr $2869		jsr	ErrorHandler
>25a1	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>25a9	75 65 00
.25ac					ErrorV_type:
.25ac	20 69 28	jsr $2869		jsr	ErrorHandler
>25af	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>25b7	73 6d 61 74 63 68 00
.25be					ErrorV_unimplemented:
.25be	20 69 28	jsr $2869		jsr	ErrorHandler
>25c1	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>25c9	6c 65 6d 65 6e 74 65 64 00
.25d2					ErrorV_assert:
.25d2	20 69 28	jsr $2869		jsr	ErrorHandler
>25d5	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>25dd	46 61 69 6c 00
.25e2					ErrorV_internal:
.25e2	20 69 28	jsr $2869		jsr	ErrorHandler
>25e5	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>25ed	6c 20 45 72 72 6f 72 00
.25f5					ErrorV_divzero:
.25f5	20 69 28	jsr $2869		jsr	ErrorHandler
>25f8	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2600	42 79 20 5a 65 72 6f 00
.2608					ErrorV_structure:
.2608	20 69 28	jsr $2869		jsr	ErrorHandler
>260b	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>2613	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2620					ErrorV_stop:
.2620	20 69 28	jsr $2869		jsr	ErrorHandler
>2623	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>262b	20 53 74 6f 70 70 65 64 00
.2634					ErrorV_data:
.2634	20 69 28	jsr $2869		jsr	ErrorHandler
>2637	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>263f	44 61 74 61 00
.2644					ErrorV_redefine:
.2644	20 69 28	jsr $2869		jsr	ErrorHandler
>2647	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>264f	65 64 65 66 69 6e 65 64 00
.2658					ErrorV_index:
.2658	20 69 28	jsr $2869		jsr	ErrorHandler
>265b	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>2663	61 79 20 49 6e 64 65 78 00
.266c					ErrorV_memory:
.266c	20 69 28	jsr $2869		jsr	ErrorHandler
>266f	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2677	4d 65 6d 6f 72 79 00
.267e					ErrorV_uninitialised:
.267e	20 69 28	jsr $2869		jsr	ErrorHandler
>2681	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2689	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2699					ErrorV_string:
.2699	20 69 28	jsr $2869		jsr	ErrorHandler
>269c	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>26a4	69 6e 67 20 4c 65 6e 67 74 68 00
.26af					ErrorV_variable:
.26af	20 69 28	jsr $2869		jsr	ErrorHandler
>26b2	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>26ba	65 20 4d 69 73 73 69 6e 67 00
.26c4					ErrorV_stack:
.26c4	20 69 28	jsr $2869		jsr	ErrorHandler
>26c7	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>26cf	75 6c 6c 00
.26d3					ErrorV_dupproc:
.26d3	20 69 28	jsr $2869		jsr	ErrorHandler
>26d6	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>26de	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>26ee	65 64 00
.26f1					ErrorV_unknown:
.26f1	20 69 28	jsr $2869		jsr	ErrorHandler
>26f4	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>26fc	20 50 72 6f 63 65 64 75 72 65 00
.2707					ErrorV_break:
.2707	20 69 28	jsr $2869		jsr	ErrorHandler
>270a	05 42 72 65 61 6b 00			.text	5,"Break",0
.2711					ErrorV_line:
.2711	20 69 28	jsr $2869		jsr	ErrorHandler
>2714	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>271c	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2729					ERRCheckLParen:
.2729	b1 18		lda ($18),y			lda 	(codePtr),y
.272b	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.272d	d0 18		bne $2747			bne 	ERRSyntaxError
.272f	c8		iny				iny
.2730	60		rts				rts
.2731					ERRCheckRParen:
.2731	b1 18		lda ($18),y			lda 	(codePtr),y
.2733	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2735	d0 10		bne $2747			bne 	ERRSyntaxError
.2737	c8		iny				iny
.2738	60		rts				rts
.2739					ERRCheckComma:
.2739	b1 18		lda ($18),y			lda 	(codePtr),y
.273b	c9 99		cmp #$99			cmp 	#PR_COMMA
.273d	d0 08		bne $2747			bne 	ERRSyntaxError
.273f	c8		iny				iny
.2740	60		rts				rts
.2741					ERRCheckA:
.2741	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2743	d0 02		bne $2747			bne 	ERRSyntaxError
.2745	c8		iny				iny
.2746	60		rts				rts
.2747					ERRSyntaxError:
.2747	4c 7c 25	jmp $257c		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.274a					StackOpen:
.274a	48		pha				pha 								; save frame byte
.274b	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.274d	0a		asl a				asl 	a 							; claim twice this for storage
.274e	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2750	38		sec				sec 								; so basically subtracting from
.2751	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.2753	85 2a		sta $2a				sta 	basicStack
.2755	b0 0a		bcs $2761			bcs 	_SONoBorrow
>2757	db						.byte 	$DB
.2758	c6 2b		dec $2b				dec 	basicStack+1
.275a	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.275c	cd 20 06	cmp $0620			cmp 	basicStackEnd
.275f	f0 04		beq $2765			beq 	_SOMemory
.2761					_SONoBorrow:
.2761	68		pla				pla 								; get marker back and write at TOS
.2762	92 2a		sta ($2a)			sta 	(basicStack)
.2764	60		rts				rts
.2765					_SOMemory:
.2765	4c c4 26	jmp $26c4		jmp	ErrorV_stack
.2768					StackClose:
.2768	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.276a	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.276c	0a		asl a				asl 	a 							; claim twice this.
.276d	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.276f	85 2a		sta $2a				sta 	basicStack
.2771	90 02		bcc $2775			bcc 	_SCExit
.2773	e6 2b		inc $2b				inc 	basicStack+1
.2775					_SCExit:
.2775	60		rts				rts
.2776					StackCheckFrame:
.2776	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.2778	d0 01		bne $277b			bne 	_SCFError 					; different, we have structures mixed up
.277a	60		rts				rts
.277b					_SCFError:
.277b	4c 08 26	jmp $2608		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.277e					STKSaveCodePosition:
.277e	5a		phy				phy
.277f	98		tya				tya 								; save Y at offset 1.
.2780	a0 01		ldy #$01			ldy 	#1
.2782	91 2a		sta ($2a),y			sta 	(basicStack),y
.2784	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2786	c8		iny				iny
.2787	91 2a		sta ($2a),y			sta 	(basicStack),y
.2789	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.278b	c8		iny				iny
.278c	91 2a		sta ($2a),y			sta 	(basicStack),y
.278e	7a		ply				ply
.278f	60		rts				rts
.2790					STKLoadCodePosition:
.2790	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2792	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2794	85 19		sta $19				sta 	codePtr+1
.2796	88		dey				dey
.2797	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2799	85 18		sta $18				sta 	codePtr
.279b	88		dey				dey
.279c	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.279e	a8		tay				tay
.279f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.27a0					StackReset:
.27a0	48		pha				pha 								; save top of memory
.27a1	3a		dec a				dec 	a  							; end of stack = previous byte
.27a2	85 2b		sta $2b				sta 	basicStack+1
.27a4	a9 ff		lda #$ff			lda 	#$FF
.27a6	85 2a		sta $2a				sta 	basicStack
.27a8	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.27aa	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.27ac	68		pla				pla 								; allocate pages for stack.
.27ad	38		sec				sec
.27ae	e9 02		sbc #$02			sbc 	#STACKPAGES
.27b0	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.27b3	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.27b4					StringConcrete:
.27b4	5a		phy				phy 								; save position on stack
.27b5	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.27b7	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.27b9	b0 41		bcs $27fc			bcs 	_SALengthError
.27bb	18		clc				clc 								; length of the new string
.27bc	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.27be	90 02		bcc $27c2			bcc 	_SAHaveLength
.27c0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.27c2					_SAHaveLength:
.27c2	48		pha				pha 								; save length to be allocated for concreting.
.27c3	38		sec				sec
.27c4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.27c6	6d 22 06	adc $0622			adc 	stringMemory
.27c9	8d 22 06	sta $0622			sta 	stringMemory
.27cc	85 26		sta $26				sta 	zTemp2 						; update storage address
.27ce	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.27d0	6d 23 06	adc $0623			adc 	stringMemory+1
.27d3	8d 23 06	sta $0623			sta 	stringMemory+1
.27d6	85 27		sta $27				sta 	zTemp2+1
.27d8	68		pla				pla 								; save length allocated in +0
.27d9	92 26		sta ($26)			sta 	(zTemp2)
.27db	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.27dd	a0 01		ldy #$01			ldy 	#1
.27df	91 26		sta ($26),y			sta 	(zTemp2),y
.27e1					_SACopyNewString:
.27e1	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.27e3	a0 02		ldy #$02			ldy 	#2
.27e5	91 26		sta ($26),y			sta 	(zTemp2),y
.27e7	aa		tax				tax 								; bytes to copy
.27e8	f0 0c		beq $27f6			beq 	_SACopyExit
.27ea	a0 01		ldy #$01			ldy 	#1 							; first character from here
.27ec					_SACopyNSLoop:
.27ec	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.27ee	c8		iny				iny 								; write two on in string storage
.27ef	c8		iny				iny
.27f0	91 26		sta ($26),y			sta 	(zTemp2),y
.27f2	88		dey				dey
.27f3	ca		dex				dex									; until copied all the string lengths.
.27f4	d0 f6		bne $27ec			bne 	_SACopyNSLoop
.27f6					_SACopyExit:
.27f6	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.27f8	a5 26		lda $26				lda 	zTemp2
.27fa	7a		ply				ply
.27fb	60		rts				rts
.27fc					_SALengthError:
.27fc	4c 99 26	jmp $2699		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.27ff					StringSystemInitialise:
.27ff	3a		dec a				dec 	a 							; make last byte of previous page.
.2800	8d 23 06	sta $0623			sta 	stringMemory+1
.2803	85 23		sta $23				sta 	zTemp0+1
.2805	a9 ff		lda #$ff			lda 	#$FF
.2807	8d 22 06	sta $0622			sta 	stringMemory
.280a	85 22		sta $22				sta 	zTemp0
.280c	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.280e	92 22		sta ($22)			sta 	(zTemp0)
.2810	60		rts				rts
.2811					StringSpaceInitialise:
.2811	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2813	8d 21 06	sta $0621			sta 	stringInitialised
.2816	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2819	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.281c	ad 23 06	lda $0623			lda 	stringMemory+1
.281f	3a		dec a				dec 	a
.2820	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2823	20 85 10	jsr $1085			jsr 	ClearCheckMemory
.2826	60		rts				rts
.2827					StringTempAllocate:
.2827	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2829	b0 2e		bcs $2859			bcs 	_STALength
.282b	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.282e	30 05		bmi $2835			bmi 	_STAAllocate
.2830	48		pha				pha 								; save value to subtract.
.2831	20 11 28	jsr $2811			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2834	68		pla				pla 								; restore it
.2835					_STAAllocate:
.2835	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2837	18		clc				clc  								; deliberate allows one more
.2838	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.283b	8d 24 06	sta $0624			sta 	stringTempPointer
.283e	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2840	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.2842	ad 25 06	lda $0625			lda 	stringTempPointer+1
.2845	69 ff		adc #$ff			adc 	#$FF
.2847	8d 25 06	sta $0625			sta 	stringTempPointer+1
.284a	85 2d		sta $2d				sta 	zsTemp+1
.284c	85 09		sta $09				sta 	IFR0+IM1
.284e	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2850	a9 80		lda #$80			lda 	#$80
.2852	85 0b		sta $0b				sta 	IFR0+IExp
.2854	a9 00		lda #$00			lda 	#0 							; clear the target string
.2856	92 2c		sta ($2c)			sta 	(zsTemp)
.2858	60		rts				rts
.2859					_STALength:
.2859	4c 99 26	jmp $2699		jmp	ErrorV_string
.285c					StringTempWrite:
.285c	5a		phy				phy
.285d	48		pha				pha
.285e	b2 2c		lda ($2c)			lda 	(zsTemp)
.2860	1a		inc a				inc 	a
.2861	92 2c		sta ($2c)			sta 	(zsTemp)
.2863	a8		tay				tay
.2864	68		pla				pla
.2865	91 2c		sta ($2c),y			sta 	(zsTemp),y
.2867	7a		ply				ply
.2868	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2869					ErrorHandler:
.2869	fa		plx				plx 								; get address of msg
.286a	7a		ply				ply
.286b	e8		inx				inx 								; bump past RTS
.286c	d0 01		bne $286f			bne 	_EHNoInc
.286e	c8		iny				iny
.286f					_EHNoInc:
.286f	20 d9 ff	jsr $ffd9			jsr	 	OSWriteString 				; print it.
.2872	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.2875	0d 27 06	ora $0627			ora 	ERRLine+1
.2878	f0 10		beq $288a			beq 	_EHNoNumber
.287a	a2 8d		ldx #$8d			ldx 	#_EHAtMsg & $FF
.287c	a0 28		ldy #$28			ldy 	#_EHAtMsg >> 8
.287e	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ
.2881	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.2884	ae 27 06	ldx $0627			ldx 	ERRLine+1
.2887	20 92 28	jsr $2892			jsr 	WriteIntXA
.288a					_EHNoNumber:
.288a	4c bb 28	jmp $28bb			jmp 	WarmStartNewLine
.288d					_EHAtMsg:
>288d	20 61 74 20 00					.text 	" at ",0
.2892					WriteIntXA:
.2892	da		phx				phx
.2893	48		pha				pha
.2894	a2 08		ldx #$08			ldx 	#IFR0
.2896	20 29 30	jsr $3029			jsr 	IFloatPushRx
.2899	68		pla				pla
.289a	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.289d	68		pla				pla
.289e	85 09		sta $09				sta 	IFR0+IM1
.28a0	a9 0a		lda #$0a			lda 	#10 						; decimal
.28a2	20 7c 2e	jsr $2e7c			jsr 	IFloatIntegerToStringR0	 	; convert
.28a5	20 dc ff	jsr $ffdc			jsr 	OSWriteStringZ 				; print
.28a8	a2 08		ldx #$08			ldx 	#IFR0
.28aa	20 4a 30	jsr $304a			jsr 	IFloatPullRx
.28ad	60		rts				rts
.28ae					NotImplemented:
.28ae	4c be 25	jmp $25be		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.28b1					WarmStart:
.28b1	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.28b3	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.28b6	a9 6b		lda #$6b			lda 	#"k"
.28b8	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.28bb					WarmStartNewLine:
.28bb	a9 0d		lda #$0d			lda 	#13
.28bd	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen
.28c0					WarmStartNoPrompt:
.28c0	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.28c2	9a		txs				txs
.28c3	20 d6 ff	jsr $ffd6			jsr 	OSEditNewLine 				; edit
.28c6	c9 1b		cmp #$1b			cmp 	#27  						; ESC new line/ignore
.28c8	f0 f1		beq $28bb			beq 	WarmStartNewLine
.28ca	c9 0d		cmp #$0d			cmp 	#13 						; anything other than CR keep going
.28cc	d0 f2		bne $28c0			bne 	WarmStartNoPrompt
.28ce	20 f1 ff	jsr $fff1			jsr 	OSWriteScreen 				; echo the CR
.28d1	e8		inx				inx 								; skip length byte to make it ASCIIZ
.28d2	d0 01		bne $28d5			bne 	_WSSkip
.28d4	c8		iny				iny
.28d5					_WSSkip:
.28d5	86 26		stx $26				stx 	zTemp2 						; save address
.28d7	84 27		sty $27				sty 	zTemp2+1
.28d9	a2 06		ldx #$06			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.28db	a0 29		ldy #$29			ldy 	#TOKGetCharacter >> 8
.28dd	38		sec				sec
.28de	20 ce 1f	jsr $1fce			jsr 	TOKTokenise
.28e1	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.28e4	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.28e7	d0 0b		bne $28f4			bne 	_WSLineEdit
.28e9	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.28eb	85 18		sta $18				sta 	codePtr
.28ed	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.28ef	85 19		sta $19				sta 	codePtr+1
.28f1	4c d7 14	jmp $14d7			jmp 	RUNNewLine
.28f4					_WSLineEdit:
.28f4	20 a9 1e	jsr $1ea9			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.28f7	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.28fa	c9 04		cmp #$04			cmp 	#4
.28fc	f0 03		beq $2901			beq 	_WSNoInsert
.28fe	20 f3 1e	jsr $1ef3			jsr 	PGMInsertLine				; if not, maybe insert
.2901					_WSNoInsert:
.2901	20 3f 10	jsr $103f			jsr 	ClearCode 					; clear variables etc.
.2904	80 ba		bra $28c0			bra 	WarmStartNoPrompt
.2906					TOKGetCharacter:
.2906	b2 26		lda ($26)			lda 	(zTemp2)
.2908	90 06		bcc $2910			bcc 	_GSNoIncrement
.290a	e6 26		inc $26				inc 	zTemp2
.290c	d0 02		bne $2910			bne 	_GSNoIncrement
.290e	e6 27		inc $27				inc 	zTemp2+1
.2910					_GSNoIncrement:
.2910	c9 00		cmp #$00			cmp 	#0
.2912	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2913					VARArrayLookup:
.2913	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2915	86 23		stx $23				stx 	zTemp0+1
.2917	b2 22		lda ($22)			lda 	(zTemp0)
.2919	48		pha				pha
.291a	5a		phy				phy
.291b	a0 01		ldy #$01			ldy 	#1
.291d	b1 22		lda ($22),y			lda 	(zTemp0),y
.291f	7a		ply				ply
.2920	48		pha				pha
.2921	20 18 17	jsr $1718			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2924	68		pla				pla 								; array address to zTemp0
.2925	85 23		sta $23				sta 	zTemp0+1
.2927	68		pla				pla
.2928	85 22		sta $22				sta 	zTemp0
.292a	5a		phy				phy 								; save codePtr position.
.292b	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.292d	b1 22		lda ($22),y			lda 	(zTemp0),y
.292f	48		pha				pha 								; save bit 15 on stack.
.2930	29 7f		and #$7f			and 	#$7F
.2932	85 24		sta $24				sta 	zTemp1
.2934	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2936	d2 22		cmp ($22)			cmp 	(zTemp0)
.2938	a5 09		lda $09				lda 	IFR0+IM1
.293a	e5 24		sbc $24				sbc 	zTemp1
.293c	b0 3a		bcs $2978			bcs 	_VALIndex
.293e	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2940	c9 40		cmp #$40			cmp 	#$40
.2942	b0 34		bcs $2978			bcs 	_VALIndex
.2944	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2946	26 09		rol $09				rol 	IFR0+IM1
.2948	fa		plx				plx 								; get msb of size -> X
.2949	30 04		bmi $294f			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.294b	06 08		asl $08				asl 	IFR0+IM0
.294d	26 09		rol $09				rol 	IFR0+IM1
.294f					_VARNotX4:
.294f	18		clc				clc 								; add the two for the size bytes
.2950	a5 08		lda $08				lda 	IFR0+IM0
.2952	69 02		adc #$02			adc 	#2
.2954	85 08		sta $08				sta 	IFR0+IM0
.2956	90 02		bcc $295a			bcc 	_VARNoCarry1
.2958	e6 09		inc $09				inc 	IFR0+IM1
.295a					_VARNoCarry1:
.295a	18		clc				clc 								; calculate the element address and push to stack.
.295b	a5 08		lda $08				lda 	IFR0+IM0
.295d	65 22		adc $22				adc 	zTemp0
.295f	48		pha				pha
.2960	a5 09		lda $09				lda 	IFR0+IM1
.2962	65 23		adc $23				adc 	zTemp0+1
.2964	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2966	30 04		bmi $296c			bmi 	_VARHasSubLevel
.2968	aa		tax				tax 								; address in XA
.2969	68		pla				pla
.296a	7a		ply				ply 								; restore Y and exit
.296b	60		rts				rts
.296c					_VARHasSubLevel:
.296c	aa		tax				tax 								; get link address in XA
.296d	68		pla				pla
.296e	7a		ply				ply 								; restore code position.
.296f	48		pha				pha
.2970	20 39 27	jsr $2739			jsr 	ERRCheckComma 				; comma required.
.2973	68		pla				pla
.2974	20 13 29	jsr $2913			jsr 	VARArrayLookup 				; call it recursively
.2977	60		rts				rts
.2978					_VALIndex:
.2978	4c 58 26	jmp $2658		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.297b					VARCreate:
.297b	5a		phy				phy
.297c	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.297e	a2 00		ldx #$00			ldx 	#0
.2980	20 5c 10	jsr $105c			jsr 	AllocateMemory
.2983	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.2985	86 25		stx $25				stx 	zTemp1+1
.2987	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2989	ad 2a 06	lda $062a			lda 	VARHash
.298c	91 24		sta ($24),y			sta 	(zTemp1),y
.298e	c8		iny				iny 								; put address of name into +3,+4
.298f	ad 28 06	lda $0628			lda 	VARNameAddress
.2992	91 24		sta ($24),y			sta 	(zTemp1),y
.2994	c8		iny				iny
.2995	ad 29 06	lda $0629			lda 	VARNameAddress+1
.2998	91 24		sta ($24),y			sta 	(zTemp1),y
.299a	ad 2b 06	lda $062b			lda 	VARType
.299d	29 01		and #$01			and 	#1
.299f	f0 06		beq $29a7			beq 	_CVNotString
.29a1	a0 08		ldy #$08			ldy 	#5+3
.29a3	a9 80		lda #$80			lda 	#$80
.29a5	91 24		sta ($24),y			sta 	(zTemp1),y
.29a7					_CVNotString:
.29a7	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.29aa	85 22		sta $22				sta 	zTemp0
.29ac	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.29af	85 23		sta $23				sta 	zTemp0+1
.29b1	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.29b3	b2 22		lda ($22)			lda 	(zTemp0)
.29b5	92 24		sta ($24)			sta 	(zTemp1)
.29b7	b1 22		lda ($22),y			lda 	(zTemp0),y
.29b9	91 24		sta ($24),y			sta 	(zTemp1),y
.29bb	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.29bd	92 22		sta ($22)			sta 	(zTemp0)
.29bf	a5 25		lda $25				lda 	zTemp1+1
.29c1	91 22		sta ($22),y			sta 	(zTemp0),y
.29c3	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.29c5	a6 25		ldx $25				ldx 	zTemp1+1
.29c7	18		clc				clc 								; add 5 to point to the data.
.29c8	69 05		adc #$05			adc 	#5
.29ca	90 01		bcc $29cd			bcc 	_VCNoCarry
.29cc	e8		inx				inx
.29cd					_VCNoCarry:
.29cd	7a		ply				ply
.29ce	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.29cf					VARFind:
.29cf	5a		phy				phy
.29d0	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.29d2	b1 22		lda ($22),y			lda 	(zTemp0),y
.29d4	85 25		sta $25				sta 	zTemp1+1
.29d6	f0 1c		beq $29f4			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.29d8	b2 22		lda ($22)			lda 	(zTemp0)
.29da	85 24		sta $24				sta 	zTemp1
.29dc					_VFLoop:
.29dc	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.29de	b1 24		lda ($24),y			lda 	(zTemp1),y
.29e0	cd 2a 06	cmp $062a			cmp 	VARHash
.29e3	f0 12		beq $29f7			beq 	_VFHashesMatch 				; if so, check the name.
.29e5					_VFNext:
.29e5	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.29e7	aa		tax				tax
.29e8	a0 01		ldy #$01			ldy 	#1
.29ea	b1 24		lda ($24),y			lda 	(zTemp1),y
.29ec	85 25		sta $25				sta 	zTemp1+1
.29ee	86 24		stx $24				stx 	zTemp1
.29f0	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.29f2	d0 e8		bne $29dc			bne 	_VFLoop
.29f4					_VFExitFail:
.29f4	7a		ply				ply
.29f5	18		clc				clc
.29f6	60		rts				rts
.29f7					_VFHashesMatch:
.29f7	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.29f9	b1 24		lda ($24),y			lda 	(zTemp1),y
.29fb	85 26		sta $26				sta 	zTemp2
.29fd	c8		iny				iny
.29fe	b1 24		lda ($24),y			lda 	(zTemp1),y
.2a00	85 27		sta $27				sta 	zTemp2+1
.2a02	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2a04					_VFNameCompLoop:
.2a04	c8		iny				iny 								; char at a time
.2a05	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2a08	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2a0a	d0 d9		bne $29e5			bne 	_VFNext						; next entry if different.
.2a0c	c9 7c		cmp #$7c			cmp 	#$7C
.2a0e	90 f4		bcc $2a04			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2a10	18		clc				clc
.2a11	a5 24		lda $24				lda 	zTemp1
.2a13	a6 25		ldx $25				ldx 	zTemp1+1
.2a15	69 05		adc #$05			adc 	#5
.2a17	90 01		bcc $2a1a			bcc 	_VFNNoCarry
.2a19	e8		inx				inx
.2a1a					_VFNNoCarry:
.2a1a	7a		ply				ply
.2a1b	38		sec				sec
.2a1c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2a1d					VARGetInfo:
.2a1d	98		tya				tya 								; calculate the address of the identifier start.
.2a1e	18		clc				clc
.2a1f	65 18		adc $18				adc 	codePtr
.2a21	8d 28 06	sta $0628			sta 	VARNameAddress
.2a24	a5 19		lda $19				lda 	codePtr+1
.2a26	69 00		adc #$00			adc 	#0
.2a28	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2a2b	9c 2a 06	stz $062a			stz 	VARHash
.2a2e	a2 00		ldx #$00			ldx 	#0
.2a30					_VARCopyName:
.2a30	18		clc				clc 								; update the sum hash.
.2a31	ad 2a 06	lda $062a			lda 	VARHash
.2a34	71 18		adc ($18),y			adc 	(codePtr),y
.2a36	8d 2a 06	sta $062a			sta 	VARHash
.2a39	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2a3b	c8		iny				iny
.2a3c	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2a3f	e8		inx				inx
.2a40	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2a42	90 ec		bcc $2a30			bcc 	_VARCopyName
.2a44	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2a47	29 03		and #$03			and 	#3 							; type is 0-3
.2a49	0a		asl a				asl 	a
.2a4a	0a		asl a				asl 	a
.2a4b	85 22		sta $22				sta 	zTemp0
.2a4d	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2a50	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2a52	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2a54	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2a55	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2a57	85 22		sta $22				sta 	zTemp0
.2a59	8d 4c 06	sta $064c			sta 	VARHashEntry
.2a5c	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2a5e	69 00		adc #$00			adc 	#0
.2a60	85 23		sta $23				sta 	zTemp0+1
.2a62	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2a65	60		rts				rts
.2a66					VARClearHashTables:
.2a66	a2 00		ldx #$00			ldx 	#0
.2a68					_VCHRLoop:
.2a68	a9 00		lda #$00			lda 	#0
.2a6a	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2a6d	e8		inx				inx
.2a6e	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2a70	d0 f6		bne $2a68			bne 	_VCHRLoop
.2a72	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2a73					VARCheckSimple:
.2a73	aa		tax				tax 								; save in X
.2a74	b1 18		lda ($18),y			lda 	(codePtr),y
.2a76	c9 7c		cmp #$7c			cmp 	#$7C
.2a78	d0 15		bne $2a8f			bne 	_VCSComplex
.2a7a	c8		iny				iny 								; consume the second byte, the type.
.2a7b	8a		txa				txa  								; character (40-7F) x 4
.2a7c	0a		asl a				asl 	a
.2a7d	0a		asl a				asl  	a
.2a7e	18		clc				clc
.2a7f	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2a81	85 08		sta $08				sta 	IFR0+IM0
.2a83	a9 06		lda #$06			lda 	#FastVariables >> 8
.2a85	69 00		adc #$00			adc 	#0
.2a87	85 09		sta $09				sta 	IFR0+IM1
.2a89	64 0a		stz $0a				stz 	IFR0+IM2
.2a8b	64 0b		stz $0b				stz 	IFR0+IExp
.2a8d	38		sec				sec 								; it's a reference
.2a8e	60		rts				rts
.2a8f					_VCSComplex:
.2a8f	88		dey				dey	 								; extract information.
.2a90	20 1d 2a	jsr $2a1d			jsr 	VARGetInfo
.2a93	20 cf 29	jsr $29cf			jsr 	VARFind 					; search for variable
.2a96	b0 0a		bcs $2aa2			bcs 	_VCSHaveVariable
.2a98	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2a9b	29 02		and #$02			and 	#2
.2a9d	d0 25		bne $2ac4			bne 	_VCNoCreate
.2a9f	20 7b 29	jsr $297b			jsr 	VARCreate 					; create variable
.2aa2					_VCSHaveVariable:
.2aa2	48		pha				pha 								; save LSB on the stack
.2aa3	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2aa6	6a		ror a				ror 	a
.2aa7	6a		ror a				ror 	a
.2aa8	68		pla				pla 								; restore LSB
.2aa9	90 08		bcc $2ab3			bcc 	_VCSNotArray 				; skip if not an array
.2aab	20 13 29	jsr $2913			jsr 	VARArrayLookup 				; look for subscripts.
.2aae	48		pha				pha 								; check )
.2aaf	20 31 27	jsr $2731			jsr 	ERRCheckRParen
.2ab2	68		pla				pla
.2ab3					_VCSNotArray:
.2ab3	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2ab5	85 08		sta $08				sta 	IFR0+IM0
.2ab7	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2ab9	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2abc	6a		ror a				ror 	a
.2abd	a9 00		lda #$00			lda 	#0
.2abf	6a		ror a				ror 	a 							; now $00 or $80
.2ac0	85 0b		sta $0b				sta 	IFR0+IExp
.2ac2	38		sec				sec 								; it's a reference
.2ac3	60		rts				rts
.2ac4					_VCNoCreate:
.2ac4	4c 7e 26	jmp $267e		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2ac7					IFInitialise:
.2ac7	9c de 06	stz $06de			stz 	IFStackIndex 				; reset the internal stack.
.2aca	60		rts				rts
.2acb					IFloatSubtract:
.2acb	da		phx				phx
.2acc	a2 08		ldx #$08			ldx 	#IFR0
.2ace	20 e5 30	jsr $30e5			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2ad1	fa		plx				plx
.2ad2					IFloatAdd:
.2ad2	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2ad4	05 0b		ora $0b				ora 	IFR0+IExp
.2ad6	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2ad8	d0 4e		bne $2b28			bne 	_IFloatAddDecimals 			; floating point version.
.2ada					_IFAddSubMantissa:
.2ada	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2adc	45 0b		eor $0b				eor 	IFR0+IExp
.2ade	29 40		and #$40			and 	#IFSign
.2ae0	d0 21		bne $2b03			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2ae2	18		clc				clc 								; do the actual addition
.2ae3	a5 08		lda $08				lda 	IFR0+IM0
.2ae5	75 00		adc $00,x			adc 		IM0,x
.2ae7	85 08		sta $08				sta 	IFR0+IM0
.2ae9	a5 09		lda $09				lda 	IFR0+IM1
.2aeb	75 01		adc $01,x			adc 		IM1,x
.2aed	85 09		sta $09				sta 	IFR0+IM1
.2aef	a5 0a		lda $0a				lda 	IFR0+IM2
.2af1	75 02		adc $02,x			adc 		IM2,x
.2af3	85 0a		sta $0a				sta 	IFR0+IM2
.2af5	10 29		bpl $2b20			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2af7	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2af9	20 09 31	jsr $3109			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2afc	20 33 31	jsr $3133			jsr 	IFloatIncExponent
.2aff	d0 1f		bne $2b20			bne 	_IFloatAddExit
.2b01	38		sec				sec 								; overflowed numerically.
.2b02	60		rts				rts
.2b03					_IFloatSubMantissa:
.2b03	38		sec				sec 								; do the subtraction R0-Rx
.2b04	a5 08		lda $08				lda 	IFR0+IM0
.2b06	f5 00		sbc $00,x			sbc 		IM0,x
.2b08	85 08		sta $08				sta 	IFR0+IM0
.2b0a	a5 09		lda $09				lda 	IFR0+IM1
.2b0c	f5 01		sbc $01,x			sbc 		IM1,x
.2b0e	85 09		sta $09				sta 	IFR0+IM1
.2b10	a5 0a		lda $0a				lda 	IFR0+IM2
.2b12	f5 02		sbc $02,x			sbc 		IM2,x
.2b14	85 0a		sta $0a				sta 	IFR0+IM2
.2b16	b0 08		bcs $2b20			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2b18	a2 08		ldx #$08			ldx 	#IFR0
.2b1a	20 ed 30	jsr $30ed			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2b1d	20 e5 30	jsr $30e5			jsr 	IFloatNegate 				; negate the result using sign bit.
.2b20					_IFloatAddExit:
.2b20	18		clc				clc
.2b21	60		rts				rts
.2b22					_IFloatZeroAdd:
.2b22	fa		plx				plx 								; return this value in R0
.2b23	20 6b 30	jsr $306b			jsr 	IFloatCopyFromRegister
.2b26	18		clc				clc
.2b27	60		rts				rts
.2b28					_IFloatAddDecimals:
.2b28	20 d3 30	jsr $30d3			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2b2b	f0 f3		beq $2b20			beq 	_IFloatAddExit
.2b2d	20 11 31	jsr $3111			jsr 	IFloatNormalise 			; normalise RX
.2b30	da		phx				phx 								; normalise R0
.2b31	a2 08		ldx #$08			ldx 	#IFR0
.2b33	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero
.2b36	f0 ea		beq $2b22			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2b38	20 11 31	jsr $3111			jsr 	IFloatNormalise
.2b3b	fa		plx				plx
.2b3c	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2b3e	29 3f		and #$3f			and 	#IFXMask
.2b40	38		sec				sec
.2b41	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2b43	85 20		sta $20				sta 	iTemp0
.2b45	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2b47	29 3f		and #$3f			and 	#IFXMask
.2b49	38		sec				sec
.2b4a	e9 20		sbc #$20			sbc 	#$20
.2b4c	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2b4e	b0 02		bcs $2b52			bcs 	_IFloatHaveLarger
.2b50	a5 20		lda $20				lda 	iTemp0
.2b52					_IFloatHaveLarger:
.2b52	18		clc				clc 								; get the actual one back.
.2b53	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2b55	20 62 2b	jsr $2b62			jsr 	_IFShiftXToA
.2b58	da		phx				phx
.2b59	a2 08		ldx #$08			ldx 	#IFR0
.2b5b	20 62 2b	jsr $2b62			jsr 	_IFShiftXToA
.2b5e	fa		plx				plx
.2b5f	4c da 2a	jmp $2ada			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2b62					_IFShiftXToA:
.2b62	8d d6 06	sta $06d6			sta 	IFTarget
.2b65	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero 			; check adding zero ?
.2b68	f0 11		beq $2b7b			beq 	_IFSXExit
.2b6a					_IFSXLoop:
.2b6a	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2b6c	29 3f		and #$3f			and 	#IFXMask
.2b6e	cd d6 06	cmp $06d6			cmp 	IFTarget
.2b71	f0 08		beq $2b7b			beq 	_IFSXExit
.2b73	20 09 31	jsr $3109			jsr 	IFloatShiftRight
.2b76	20 33 31	jsr $3133			jsr 	IFloatIncExponent
.2b79	80 ef		bra $2b6a			bra 	_IFSXLoop
.2b7b					_IFSXExit:
.2b7b	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2b7c					IFloatMultiply:
.2b7c	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2b7f	20 34 2c	jsr $2c34			jsr 	IFCalculateNewSign
.2b82	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2b84	05 0b		ora $0b				ora 	IFR0+IExp
.2b86	29 3f		and #$3f			and 	#IFXMask
.2b88	15 01		ora $01,x			ora 	IM1,x
.2b8a	05 09		ora $09				ora 	IFR0+IM1
.2b8c	15 02		ora $02,x			ora 	IM2,x
.2b8e	05 0a		ora $0a				ora 	IFR0+IM2
.2b90	d0 0a		bne $2b9c			bne 	_IFMStandard
.2b92	20 b6 30	jsr $30b6			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2b95	ad d8 06	lda $06d8			lda 	IFNewSign
.2b98	85 0b		sta $0b				sta 	IFR0+IExp
.2b9a	18		clc				clc
.2b9b	60		rts				rts
.2b9c					_IFMStandard:
.2b9c	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2b9e	20 2b 2c	jsr $2c2b			jsr 	IFMSignExtend
.2ba1	8d d7 06	sta $06d7			sta 	IFNewExponent
.2ba4	a5 0b		lda $0b				lda 	IFR0+IExp
.2ba6	20 2b 2c	jsr $2c2b			jsr 	IFMSignExtend
.2ba9	18		clc				clc
.2baa	6d d7 06	adc $06d7			adc 	IFNewExponent
.2bad	8d d7 06	sta $06d7			sta 	IFNewExponent
.2bb0	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2bb2	20 7c 30	jsr $307c			jsr 	IFloatCopyToRegister
.2bb5	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2bb7	20 da 30	jsr $30da			jsr 	IFloatSetZero
.2bba					_IFMLoop:
.2bba	a2 14		ldx #$14			ldx 	#IFRTemp
.2bbc	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero
.2bbf	f0 3a		beq $2bfb			beq 	_IFMExit
.2bc1	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2bc4	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2bc6	10 03		bpl $2bcb			bpl	 	_IFMTargetOkay
.2bc8	20 1c 2c	jsr $2c1c			jsr 	_IFMShiftAll
.2bcb					_IFMTargetOkay:
.2bcb	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2bcd	29 01		and #$01			and 	#1
.2bcf	f0 16		beq $2be7			beq 	_IFMNoAdd
.2bd1	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2bd4	18		clc				clc
.2bd5	a5 08		lda $08				lda 	IFR0+IM0
.2bd7	75 00		adc $00,x			adc 		IM0,x
.2bd9	85 08		sta $08				sta 	IFR0+IM0
.2bdb	a5 09		lda $09				lda 	IFR0+IM1
.2bdd	75 01		adc $01,x			adc 		IM1,x
.2bdf	85 09		sta $09				sta 	IFR0+IM1
.2be1	a5 0a		lda $0a				lda 	IFR0+IM2
.2be3	75 02		adc $02,x			adc 		IM2,x
.2be5	85 0a		sta $0a				sta 	IFR0+IM2
.2be7					_IFMNoAdd:
.2be7	a5 0a		lda $0a				lda 	IFR0+IM2
.2be9	10 03		bpl $2bee			bpl 	_IFMResultOkay
.2beb	20 1c 2c	jsr $2c1c			jsr 	_IFMShiftAll
.2bee					_IFMResultOkay:
.2bee	a2 14		ldx #$14			ldx 	#IFRTemp
.2bf0	20 09 31	jsr $3109			jsr 	IFloatShiftRight
.2bf3	ae d6 06	ldx $06d6			ldx 	IFTarget
.2bf6	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.2bf9	80 bf		bra $2bba			bra 	_IFMLoop
.2bfb					_IFMExit:
.2bfb	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2bfe	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2c00	90 0f		bcc $2c11			bcc 	_IFMOkay
.2c02	c9 e0		cmp #$e0			cmp 	#$E0
.2c04	b0 0b		bcs $2c11			bcs 	_IFMOkay
.2c06	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2c08	f0 10		beq $2c1a			beq 	_IFMError
.2c0a	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2c0c	20 da 30	jsr $30da			jsr 	IFloatSetZero
.2c0f	18		clc				clc
.2c10	60		rts				rts
.2c11					_IFMOkay:
.2c11	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2c13	0d d8 06	ora $06d8			ora 	IFNewSign
.2c16	85 0b		sta $0b				sta 	IFR0+IExp
.2c18	18		clc				clc
.2c19	60		rts				rts
.2c1a					_IFMError:
.2c1a	38		sec				sec
.2c1b	60		rts				rts
.2c1c					_IFMShiftAll:
.2c1c	a2 08		ldx #$08			ldx 	#IFR0
.2c1e	20 09 31	jsr $3109			jsr 	IFloatShiftRight
.2c21	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c24	20 09 31	jsr $3109			jsr 	IFloatShiftRight
.2c27	ee d7 06	inc $06d7			inc 	IFNewExponent
.2c2a	60		rts				rts
.2c2b					IFMSignExtend:
.2c2b	29 3f		and #$3f			and 	#IFXMask
.2c2d	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2c2f	90 02		bcc $2c33			bcc 	_IFMNoSXX
.2c31	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2c33					_IFMNoSXX:
.2c33	60		rts				rts
.2c34					IFCalculateNewSign:
.2c34	b5 03		lda $03,x			lda 	IExp,x
.2c36	45 0b		eor $0b				eor 	IFR0+IExp
.2c38	29 40		and #$40			and 	#IFSign
.2c3a	8d d8 06	sta $06d8			sta 	IFNewSign
.2c3d	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2c3e					IFloatDivideInteger:
.2c3e	20 57 2c	jsr $2c57			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2c41	b0 06		bcs $2c49			bcs 	_IFDIExit
.2c43	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2c45	20 6b 30	jsr $306b			jsr 	IFloatCopyFromRegister
.2c48	18		clc				clc
.2c49					_IFDIExit:
.2c49	60		rts				rts
.2c4a					IFloatModulusInteger:
.2c4a	20 57 2c	jsr $2c57			jsr 	IFloatDivideIntegerCommon
.2c4d	b0 07		bcs $2c56			bcs 	_IFMIExit
.2c4f	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c52	20 6b 30	jsr $306b			jsr 	IFloatCopyFromRegister
.2c55	18		clc				clc
.2c56					_IFMIExit:
.2c56	60		rts				rts
.2c57					IFloatDivideIntegerCommon:
.2c57	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2c5a	20 34 2c	jsr $2c34			jsr 	IFCalculateNewSign 			; calculate sign of result
.2c5d	20 85 2c	jsr $2c85			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2c60	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2c62	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero
.2c65	f0 1c		beq $2c83			beq 	_IFDIDivZero
.2c67	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2c6a	20 da 30	jsr $30da			jsr 	IFloatSetZero
.2c6d	5a		phy				phy
.2c6e	a0 18		ldy #$18			ldy 	#24
.2c70					_IFDILoop:
.2c70	20 96 2c	jsr $2c96			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2c73	20 a2 2c	jsr $2ca2			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2c76	88		dey				dey
.2c77	d0 f7		bne $2c70			bne 	_IFDILoop 					; do it 24 times
.2c79	7a		ply				ply
.2c7a	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2c7d	29 40		and #$40			and 	#IFSign
.2c7f	85 17		sta $17				sta 	IFRTemp+IExp
.2c81	18		clc				clc 								; is okay.
.2c82	60		rts				rts
.2c83					_IFDIDivZero:
.2c83	38		sec				sec
.2c84	60		rts				rts
.2c85					IFDCopyRXToRTemp:
.2c85	b5 00		lda $00,x			lda 	IM0,x
.2c87	85 14		sta $14				sta 	IFRTemp+IM0
.2c89	b5 01		lda $01,x			lda 	IM1,x
.2c8b	85 15		sta $15				sta 	IFRTemp+IM1
.2c8d	b5 02		lda $02,x			lda 	IM2,x
.2c8f	85 16		sta $16				sta 	IFRTemp+IM2
.2c91	b5 03		lda $03,x			lda 	IExp,x
.2c93	85 17		sta $17				sta 	IFRTemp+IExp
.2c95	60		rts				rts
.2c96					IFDShiftSTempS1Left:
.2c96	a2 14		ldx #$14			ldx 	#IFRTemp
.2c98	20 01 31	jsr $3101			jsr 	IFloatShiftLeft
.2c9b	ae d6 06	ldx $06d6			ldx 	IFTarget
.2c9e	20 02 31	jsr $3102			jsr 	IFloatRotateLeft
.2ca1	60		rts				rts
.2ca2					IFDTrySubtract:
.2ca2	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2ca5	38		sec				sec 								; subtract, saving the results on the stack.
.2ca6	b5 00		lda $00,x			lda 	IM0,x
.2ca8	e5 08		sbc $08				sbc 	IFR0+IM0
.2caa	48		pha				pha
.2cab	b5 01		lda $01,x			lda 	IM1,x
.2cad	e5 09		sbc $09				sbc 	IFR0+IM1
.2caf	48		pha				pha
.2cb0	b5 02		lda $02,x			lda 	IM2,x
.2cb2	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2cb4	b0 03		bcs $2cb9			bcs 	_IFDCanSubtract
.2cb6	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2cb7	68		pla				pla
.2cb8	60		rts				rts
.2cb9					_IFDCanSubtract:
.2cb9	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2cbb	68		pla				pla
.2cbc	95 01		sta $01,x			sta 	IM1,x
.2cbe	68		pla				pla
.2cbf	95 00		sta $00,x			sta 	IM0,x
.2cc1	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2cc3	d0 06		bne $2ccb			bne 	_IFDCSExit
.2cc5	e6 15		inc $15				inc 	IFRTemp+IM1
.2cc7	d0 02		bne $2ccb			bne 	_IFDCSExit
.2cc9	e6 16		inc $16				inc 	IFRTemp+IM2
.2ccb					_IFDCSExit:
.2ccb	60		rts				rts
.2ccc					IFloatBitwiseAnd:
.2ccc	5a		phy				phy
.2ccd	20 11 2d	jsr $2d11			jsr 	IFPreProcessBitwise 		; set up everything.
.2cd0	d0 0f		bne $2ce1			bne 	_IFBAExit
.2cd2					_IFBALoop:
.2cd2	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2cd5	35 00		and $00,x			and 	IM0,x
.2cd7	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2cda	e8		inx				inx
.2cdb	c8		iny				iny
.2cdc	c0 03		cpy #$03			cpy 	#3
.2cde	d0 f2		bne $2cd2			bne 	_IFBALoop
.2ce0	18		clc				clc
.2ce1					_IFBAExit:
.2ce1	7a		ply				ply
.2ce2	60		rts				rts
.2ce3					IFloatBitwiseOr:
.2ce3	5a		phy				phy
.2ce4	20 11 2d	jsr $2d11			jsr 	IFPreProcessBitwise 		; set up everything.
.2ce7	d0 0f		bne $2cf8			bne 	_IFBAExit
.2ce9					_IFBALoop:
.2ce9	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2cec	15 00		ora $00,x			ora 	IM0,x
.2cee	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2cf1	e8		inx				inx
.2cf2	c8		iny				iny
.2cf3	c0 03		cpy #$03			cpy 	#3
.2cf5	d0 f2		bne $2ce9			bne 	_IFBALoop
.2cf7	18		clc				clc
.2cf8					_IFBAExit:
.2cf8	7a		ply				ply
.2cf9	60		rts				rts
.2cfa					IFloatBitwiseXor:
.2cfa	5a		phy				phy
.2cfb	20 11 2d	jsr $2d11			jsr 	IFPreProcessBitwise 		; set up everything.
.2cfe	d0 0f		bne $2d0f			bne 	_IFBAExit
.2d00					_IFBALoop:
.2d00	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2d03	55 00		eor $00,x			eor 	IM0,x
.2d05	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2d08	e8		inx				inx
.2d09	c8		iny				iny
.2d0a	c0 03		cpy #$03			cpy 	#3
.2d0c	d0 f2		bne $2d00			bne 	_IFBALoop
.2d0e	18		clc				clc
.2d0f					_IFBAExit:
.2d0f	7a		ply				ply
.2d10	60		rts				rts
.2d11					IFPreProcessBitwise:
.2d11	a0 00		ldy #$00			ldy 	#0 							; set index.
.2d13	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2d15	15 03		ora $03,x			ora 	IExp,x
.2d17	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2d19	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2d1b	38		sec				sec 								; carry set just in cases.
.2d1c	60		rts				rts
.2d1d					IFloatAbsoluteR0:
.2d1d	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2d1f	29 bf		and #$bf			and 	#IFSign ^ 255
.2d21	85 0b		sta $0b				sta 	IFR0+IExp
.2d23	18		clc				clc
.2d24	60		rts				rts
.2d25					IFloatSquareRootR0:
.2d25	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2d27	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero
.2d2a	f0 2e		beq $2d5a			beq 	_IFSRZero
.2d2c	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2d2e	29 40		and #$40			and 	#IFSign
.2d30	d0 2f		bne $2d61			bne 	_IFSRFail
.2d32	20 11 31	jsr $3111			jsr 	IFloatNormalise 			; it will work better !
.2d35	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2d37	20 7c 30	jsr $307c			jsr 	IFloatCopyToRegister
.2d3a	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2d3c	20 2b 2c	jsr $2c2b			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2d3f	18		clc				clc
.2d40	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2d42	85 0b		sta $0b				sta 	IFR0+IExp
.2d44	4a		lsr a				lsr 	a 							; which we can halve.
.2d45	38		sec				sec 								; convert back
.2d46	e9 17		sbc #$17			sbc 	#23
.2d48	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2d4a	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2d4c	20 63 2d	jsr $2d63			jsr 	_IFSRNewton
.2d4f	20 63 2d	jsr $2d63			jsr 	_IFSRNewton
.2d52	20 63 2d	jsr $2d63			jsr 	_IFSRNewton
.2d55	20 63 2d	jsr $2d63			jsr 	_IFSRNewton
.2d58	18		clc				clc
.2d59	60		rts				rts
.2d5a					_IFSRZero:
.2d5a	a2 08		ldx #$08			ldx 	#IFR0
.2d5c	20 da 30	jsr $30da			jsr 	IFloatSetZero
.2d5f	18		clc				clc
.2d60	60		rts				rts
.2d61					_IFSRFail:
.2d61	38		sec				sec
.2d62	60		rts				rts
.2d63					_IFSRNewton:
.2d63	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2d65	20 29 30	jsr $3029			jsr 	IFloatPushRx
.2d68	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2d6a	20 29 30	jsr $3029			jsr 	IFloatPushRx
.2d6d	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2d6f	20 fe 2d	jsr $2dfe			jsr 	IFloatDivideFloat
.2d72	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2d74	20 4a 30	jsr $304a			jsr 	IFloatPullRx
.2d77	20 d2 2a	jsr $2ad2			jsr 	IFloatAdd 					; now guess + original/guess
.2d7a	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2d7c	20 09 31	jsr $3109			jsr 	IFloatShiftRight
.2d7f	a2 0c		ldx #$0c			ldx 	#IFR1
.2d81	20 4a 30	jsr $304a			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2d84	60		rts				rts
.2d85					IFloatFractionalR0:
.2d85	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2d87	29 3f		and #$3f			and 	#IFXMask
.2d89	f0 17		beq $2da2			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2d8b	20 1d 2d	jsr $2d1d			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2d8e	a2 08		ldx #$08			ldx 	#IFR0
.2d90	20 11 31	jsr $3111			jsr 	IFloatNormalise 			; normalise R0
.2d93	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2d95	20 7c 30	jsr $307c			jsr 	IFloatCopyToRegister
.2d98	20 db 2d	jsr $2ddb			jsr 	IFloatIntegerR0 			; take integer part of R0
.2d9b	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2d9d	20 cb 2a	jsr $2acb			jsr 	IFloatSubtract
.2da0	80 05		bra $2da7			bra 	_FIPExit
.2da2					_FIPZero:
.2da2	a2 08		ldx #$08			ldx 	#IFR0
.2da4	20 da 30	jsr $30da			jsr 	IFloatSetZero
.2da7					_FIPExit:
.2da7	18		clc				clc
.2da8	60		rts				rts
.2da9					IFloatCompare:
.2da9	20 cb 2a	jsr $2acb			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2dac	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2dae	05 0b		ora $0b				ora 	IFR0+IExp
.2db0	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2db2	29 3f		and #$3f			and 	#IFXMask
.2db4	d0 19		bne $2dcf			bne 	_IFCNonInteger
.2db6	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero 			; check if zero
.2db9	f0 0f		beq $2dca			beq 	_IFCZero
.2dbb					_IFCReturnSign:
.2dbb	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2dbd	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2dbf	48		pha				pha
.2dc0	a9 01		lda #$01			lda 	#1
.2dc2	20 dc 30	jsr $30dc			jsr 	IFloatSetByte 				; return to +1
.2dc5	68		pla				pla 								; sign bit back
.2dc6	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2dc8	18		clc				clc
.2dc9	60		rts				rts
.2dca					_IFCZero:
.2dca	20 da 30	jsr $30da			jsr 	IFloatSetZero
.2dcd	18		clc				clc
.2dce	60		rts				rts
.2dcf					_IFCNonInteger:
.2dcf	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2dd1	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2dd3	05 09		ora $09				ora 	IFR0+IM1
.2dd5	05 0a		ora $0a				ora 	IFR0+IM2
.2dd7	f0 f1		beq $2dca			beq 	_IFCZero 					; near enough !
.2dd9	80 e0		bra $2dbb			bra 	_IFCReturnSign 				; return the sign of the difference.
.2ddb					IFloatIntegerR0:
.2ddb	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2ddd	29 3f		and #$3f			and 	#IFXMask
.2ddf	f0 1b		beq $2dfc			beq 	_FIPExit 					; if so do nothing
.2de1	a2 08		ldx #$08			ldx 	#IFR0
.2de3	20 11 31	jsr $3111			jsr 	IFloatNormalise 			; normalise
.2de6	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero 			; is it zero ?
.2de9	f0 0e		beq $2df9			beq 	_FIPZero 					; if so return zero.
.2deb					_FIPShift:
.2deb	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2ded	29 20		and #$20			and 	#$20 						; still -ve
.2def	f0 0b		beq $2dfc			beq 	_FIPExit
.2df1	20 09 31	jsr $3109			jsr 	IFloatShiftRight 			; shift mantissa right
.2df4	20 33 31	jsr $3133			jsr 	IFloatIncExponent 			; bump exponent
.2df7	80 f2		bra $2deb			bra 	_FIPShift
.2df9					_FIPZero:
.2df9	20 da 30	jsr $30da			jsr 	IFloatSetZero
.2dfc					_FIPExit:
.2dfc	18		clc				clc
.2dfd	60		rts				rts
.2dfe					IFloatDivideFloat:
.2dfe	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2e01	20 34 2c	jsr $2c34			jsr 	IFCalculateNewSign 			; calculate sign of result
.2e04	20 11 31	jsr $3111			jsr 	IFloatNormalise 			; normalise RX
.2e07	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2e09	20 11 31	jsr $3111			jsr 	IFloatNormalise
.2e0c	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero
.2e0f	f0 56		beq $2e67			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2e11	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2e13	20 2b 2c	jsr $2c2b			jsr 	IFMSignExtend
.2e16	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e19	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2e1c	b5 03		lda $03,x			lda 	IExp,x
.2e1e	20 2b 2c	jsr $2c2b			jsr 	IFMSignExtend
.2e21	38		sec				sec
.2e22	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2e25	38		sec				sec
.2e26	e9 17		sbc #$17			sbc 	#23
.2e28	8d d7 06	sta $06d7			sta 	IFNewExponent
.2e2b	20 69 2e	jsr $2e69			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2e2e	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2e30	10 08		bpl $2e3a			bpl 	_IFDFNoShiftResult
.2e32	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2e34	20 09 31	jsr $3109			jsr 	IFloatShiftRight
.2e37	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e3a					_IFDFNoShiftResult:
.2e3a	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2e3d	30 06		bmi $2e45			bmi 	_IFDFCheckUnderflow
.2e3f	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2e41	b0 24		bcs $2e67			bcs 	_IFDFDivZero
.2e43	80 11		bra $2e56			bra		_IFDFExit
.2e45					_IFDFCheckUnderflow:
.2e45	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2e48	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2e4a	b0 0a		bcs $2e56			bcs 	_IFDFExit
.2e4c	ee d7 06	inc $06d7			inc 	IFNewExponent
.2e4f	a2 14		ldx #$14			ldx 	#IFRTemp
.2e51	20 09 31	jsr $3109			jsr 	IFloatShiftRight
.2e54	80 ef		bra $2e45			bra 	_IFDFCheckUnderflow
.2e56					_IFDFExit:
.2e56	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2e59	29 3f		and #$3f			and 	#IFXMask
.2e5b	0d d8 06	ora $06d8			ora 	IFNewSign
.2e5e	85 17		sta $17				sta 	IFRTemp+IExp
.2e60	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2e62	20 6b 30	jsr $306b			jsr 	IFloatCopyFromRegister
.2e65	18		clc				clc
.2e66	60		rts				rts
.2e67					_IFDFDivZero:
.2e67	38		sec				sec
.2e68	60		rts				rts
.2e69					IFloatDivideSupport:
.2e69	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2e6b	20 da 30	jsr $30da			jsr 	IFloatSetZero
.2e6e	5a		phy				phy 								; main division loop x 23
.2e6f	a0 17		ldy #$17			ldy 	#23
.2e71					_IFDSLoop:
.2e71	20 a2 2c	jsr $2ca2			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2e74	20 96 2c	jsr $2c96			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2e77	88		dey				dey
.2e78	d0 f7		bne $2e71			bne 	_IFDSLoop 					; do it 24 times
.2e7a	7a		ply				ply
.2e7b	60		rts				rts
.2e7c					IFloatIntegerToStringR0:
.2e7c	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2e7f	20 5b 31	jsr $315b			jsr 	IFloatBufferReset			; empty buffer
.2e82	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2e84	29 3f		and #$3f			and 	#IFXMask
.2e86	d0 1d		bne $2ea5			bne 	_IFIFail
.2e88	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.2e8a	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero
.2e8d	f0 0e		beq $2e9d			beq 	_IFINotNegative
.2e8f	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.2e91	29 40		and #$40			and 	#IFSign
.2e93	f0 08		beq $2e9d			beq 	_IFINotNegative
.2e95	a9 2d		lda #$2d			lda 	#"-"						; output -
.2e97	20 6a 31	jsr $316a			jsr 	IFloatBufferWrite
.2e9a	20 e5 30	jsr $30e5			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.2e9d					_IFINotNegative:
.2e9d	20 a7 2e	jsr $2ea7			jsr 	_IFIRecursiveConvert 		; start converting
.2ea0	20 62 31	jsr $3162			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.2ea3	18		clc				clc
.2ea4	60		rts				rts
.2ea5					_IFIFail:
.2ea5	38		sec				sec
.2ea6	60		rts				rts
.2ea7					_IFIRecursiveConvert:
.2ea7	a2 0c		ldx #$0c			ldx 	#IFR1
.2ea9	20 7c 30	jsr $307c			jsr 	IFloatCopyToRegister 		; R0->R1
.2eac	a2 08		ldx #$08			ldx 	#IFR0
.2eae	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.2eb1	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.2eb4	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.2eb6	20 3e 2c	jsr $2c3e			jsr 	IFloatDivideInteger
.2eb9	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.2ebb	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero
.2ebe	f0 09		beq $2ec9			beq 	_IFIOutDigit
.2ec0	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.2ec2	48		pha				pha
.2ec3	20 a7 2e	jsr $2ea7			jsr 	_IFIRecursiveConvert 		; convert the divide result
.2ec6	68		pla				pla
.2ec7	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.2ec9					_IFIOutDigit:
.2ec9	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.2ecb	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.2ecd	90 02		bcc $2ed1			bcc 	_IFINotHex
.2ecf	69 06		adc #$06			adc 	#6
.2ed1					_IFINotHex:
.2ed1	69 30		adc #$30			adc 	#48
.2ed3	20 6a 31	jsr $316a			jsr 	IFloatBufferWrite 			; write character to buffer.
.2ed6	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.2ed7					IFloatFloatToStringR0:
.2ed7	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2ed9	20 29 30	jsr $3029			jsr 	IFloatPushRx
.2edc	20 7c 30	jsr $307c			jsr 	IFloatCopyToRegister
.2edf	20 db 2d	jsr $2ddb			jsr 	IFloatIntegerR0				; make R0 integer
.2ee2	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2ee4	20 7c 2e	jsr $2e7c			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2ee7	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.2eea	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.2eec	29 3f		and #$3f			and 	#IFXMask
.2eee	f0 44		beq $2f34			beq 	_IFFSExit
.2ef0					_IFloatFracLoop:
.2ef0	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.2ef2	20 6b 30	jsr $306b			jsr 	IFloatCopyFromRegister
.2ef5	20 85 2d	jsr $2d85			jsr 	IFloatFractionalR0
.2ef8	20 11 31	jsr $3111			jsr 	IFloatNormalise
.2efb	a2 10		ldx #$10			ldx 	#IFR2
.2efd	20 7c 30	jsr $307c			jsr 	IFloatCopyToRegister 		; copy to back R2
.2f00	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.2f02	a9 0a		lda #$0a			lda 	#10
.2f04	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.2f07	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.2f09	20 7c 2b	jsr $2b7c			jsr 	IFloatMultiply
.2f0c	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.2f0e	20 7c 30	jsr $307c			jsr 	IFloatCopyToRegister
.2f11	20 db 2d	jsr $2ddb			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.2f14	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 3 dp, no more
.2f17	c9 03		cmp #$03			cmp 	#3
.2f19	f0 16		beq $2f31			beq 	_IFFSExitStripZero
.2f1b	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.2f1e	d0 05		bne $2f25			bne 	_IFloatNotFirst
.2f20	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2f22	20 6a 31	jsr $316a			jsr 	IFloatBufferWrite
.2f25					_IFloatNotFirst:
.2f25	ee da 06	inc $06da			inc 	IFloatDecimalCount
.2f28	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.2f2a	09 30		ora #$30			ora 	#"0"						; ASCII
.2f2c	20 6a 31	jsr $316a			jsr 	IFloatBufferWrite 			; write to the buffer.
.2f2f	80 bf		bra $2ef0			bra 	_IFloatFracLoop
.2f31					_IFFSExitStripZero:
.2f31	20 79 31	jsr $3179			jsr 	IFloatStripTrailingZeros
.2f34					_IFFSExit:
.2f34	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.2f36	20 4a 30	jsr $304a			jsr 	IFloatPullRx
.2f39	20 62 31	jsr $3162			jsr 	IFloatGetBufferAddress
.2f3c	18		clc				clc
.2f3d	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.2f3e					IFloatStringToFloatR0:
.2f3e	8d db 06	sta $06db			sta 	IFCount 					; save length and positions out.
.2f41	86 20		stx $20				stx 	iTemp0
.2f43	84 21		sty $21				sty 	iTemp0+1
.2f45	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.2f47	20 da 30	jsr $30da			jsr 	IFloatSetZero
.2f4a	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.2f4d	20 da 2f	jsr $2fda			jsr 	IFSTFGetNext 				; get first
.2f50	f0 1b		beq $2f6d			beq 	_IFSTFFail 					; no character, fail.
.2f52	90 10		bcc $2f64			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2f54	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2f56	d0 15		bne $2f6d			bne 	_IFSTFFail
.2f58	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2f5a	8d dc 06	sta $06dc			sta 	IFSignFlag
.2f5d					_IFSTFLoop:
.2f5d	20 da 2f	jsr $2fda			jsr 	IFSTFGetNext 				; get next character
.2f60	b0 0b		bcs $2f6d			bcs 	_IFSTFFail 					; bad character.
.2f62	f0 11		beq $2f75			beq 	_IFSTFExit 					; end of data
.2f64					_IFSTFHaveChar:
.2f64	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.2f66	f0 08		beq $2f70			beq 	_IFSTFDecimal
.2f68	20 fe 2f	jsr $2ffe			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.2f6b	80 f0		bra $2f5d			bra 	_IFSTFLoop 					; keep going until . or end.
.2f6d					_IFSTFFail:
.2f6d	38		sec				sec
.2f6e	80 0d		bra $2f7d			bra 	_IFSTFReturn
.2f70					_IFSTFDecimal:
.2f70	20 85 2f	jsr $2f85			jsr 	IFSTFDecimal 				; call the decimal places code.
.2f73	b0 08		bcs $2f7d			bcs 	_IFSTFReturn 				; error
.2f75					_IFSTFExit:
.2f75	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.2f77	0d dc 06	ora $06dc			ora 	IFSignFlag
.2f7a	85 0b		sta $0b				sta 	IFR0+IExp
.2f7c	18		clc				clc
.2f7d					_IFSTFReturn:
.2f7d	60		rts				rts
.2f7e					IFloatAddDecimalToR0:
.2f7e	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.2f81	86 20		stx $20				stx 	iTemp0
.2f83	84 21		sty $21				sty 	iTemp0+1
.2f85					IFSTFDecimal:
.2f85	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.2f87	20 29 30	jsr $3029			jsr 	IFloatPushRx
.2f8a	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.2f8c	20 da 30	jsr $30da			jsr 	IFloatSetZero
.2f8f	9c dd 06	stz $06dd			stz 	IFDecimalPlaces 			; zero DP.
.2f92					_IFSTDLoop:
.2f92	20 da 2f	jsr $2fda			jsr 	IFSTFGetNext 				; get next
.2f95	b0 41		bcs $2fd8			bcs 	_IFSTFFail2 				; bad character.
.2f97	f0 11		beq $2faa			beq 	_IFSTFComplete 				; end of data, work out the result.
.2f99	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2f9b	f0 39		beq $2fd6			beq 	_IFSTFExit2
.2f9d	20 fe 2f	jsr $2ffe			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.2fa0	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.2fa3	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2fa6	c9 03		cmp #$03			cmp 	#3
.2fa8	90 e8		bcc $2f92			bcc 	_IFSTDLoop
.2faa					_IFSTFComplete:
.2faa	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2fad	f0 27		beq $2fd6			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2faf	3a		dec a				dec 	a 							; table indexed from 1.
.2fb0	0a		asl a				asl 	a
.2fb1	0a		asl a				asl 	a
.2fb2	aa		tax				tax
.2fb3	bd 15 30	lda $3015,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2fb6	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2fb8	bd 16 30	lda $3016,x			lda 	TableTen+1,x
.2fbb	85 0d		sta $0d				sta  	IFR1+IM1
.2fbd	bd 17 30	lda $3017,x			lda 	TableTen+2,x
.2fc0	85 0e		sta $0e				sta  	IFR1+IM2
.2fc2	bd 18 30	lda $3018,x			lda 	TableTen+3,x
.2fc5	85 0f		sta $0f				sta  	IFR1+IExp
.2fc7	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.2fc9	20 7c 2b	jsr $2b7c			jsr 	IFloatMultiply
.2fcc	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.2fce	20 4a 30	jsr $304a			jsr 	IFloatPullRx
.2fd1	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.2fd3	20 d2 2a	jsr $2ad2			jsr 	IFloatAdd
.2fd6					_IFSTFExit2:
.2fd6	18		clc				clc
.2fd7	60		rts				rts
.2fd8					_IFSTFFail2:
.2fd8	38		sec				sec
.2fd9	60		rts				rts
.2fda					IFSTFGetNext:
.2fda	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.2fdd	f0 19		beq $2ff8			beq 	_IFSTFReturnOk
.2fdf	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.2fe1	e6 20		inc $20				inc 	iTemp0 						; point at next.
.2fe3	d0 02		bne $2fe7			bne 	_IFSTFGNNoCarry
.2fe5	e6 21		inc $21				inc 	iTemp0+1
.2fe7					_IFSTFGNNoCarry:
.2fe7	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.2fea	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2fec	f0 08		beq $2ff6			beq 	_IFSTFGOkay
.2fee	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2ff0	90 08		bcc $2ffa			bcc 	_IFSTFGFail
.2ff2	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2ff4	b0 04		bcs $2ffa			bcs 	_IFSTFGFail
.2ff6					_IFSTFGOkay:
.2ff6	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ff8					_IFSTFReturnOk:
.2ff8	18		clc				clc
.2ff9	60		rts				rts
.2ffa					_IFSTFGFail:
.2ffa	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2ffc	38		sec				sec
.2ffd	60		rts				rts
.2ffe					IFSTFAddR0:
.2ffe	29 0f		and #$0f			and 	#15 						; to int value
.3000	48		pha				pha 								; save it.
.3001	a9 0a		lda #$0a			lda 	#10
.3003	a2 0c		ldx #$0c			ldx 	#IFR1
.3005	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.3008	20 7c 2b	jsr $2b7c			jsr 	IFloatMultiply
.300b	68		pla				pla
.300c	a2 0c		ldx #$0c			ldx 	#IFR1
.300e	20 dc 30	jsr $30dc			jsr 	IFloatSetByte
.3011	20 d2 2a	jsr $2ad2			jsr 	IFloatAdd
.3014	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.3015					TableTen:
>3015	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3019	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>301d	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3021	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3025	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.3029					IFloatPushRx:
.3029	5a		phy				phy
.302a	ac de 06	ldy $06de			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.302d	b5 00		lda $00,x			lda 	IM0,x
.302f	99 df 06	sta $06df,y			sta 	IFStack,y
.3032	b5 01		lda $01,x			lda 	IM1,x
.3034	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.3037	b5 02		lda $02,x			lda 	IM2,x
.3039	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.303c	b5 03		lda $03,x			lda 	IExp,x
.303e	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.3041	c8		iny				iny
.3042	c8		iny				iny
.3043	c8		iny				iny
.3044	c8		iny				iny
.3045	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.3048	7a		ply				ply
.3049	60		rts				rts
.304a					IFloatPullRx:
.304a	5a		phy				phy
.304b	ac de 06	ldy $06de			ldy 	IFStackIndex	 			; decrement SP
.304e	88		dey				dey
.304f	88		dey				dey
.3050	88		dey				dey
.3051	88		dey				dey
.3052	b9 df 06	lda $06df,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.3055	95 00		sta $00,x			sta 	IM0,x
.3057	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.305a	95 01		sta $01,x			sta 	IM1,x
.305c	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.305f	95 02		sta $02,x			sta 	IM2,x
.3061	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.3064	95 03		sta $03,x			sta 	IExp,x
.3066	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.3069	7a		ply				ply
.306a	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.306b					IFloatCopyFromRegister:
.306b	b5 00		lda $00,x			lda 	0,x
.306d	85 08		sta $08				sta 	IFR0
.306f	b5 01		lda $01,x			lda 	1,x
.3071	85 09		sta $09				sta 	IFR0+1
.3073	b5 02		lda $02,x			lda 	2,x
.3075	85 0a		sta $0a				sta 	IFR0+2
.3077	b5 03		lda $03,x			lda 	3,x
.3079	85 0b		sta $0b				sta 	IFR0+3
.307b	60		rts				rts
.307c					IFloatCopyToRegister:
.307c	a5 08		lda $08				lda 	IFR0
.307e	95 00		sta $00,x			sta 	0,x
.3080	a5 09		lda $09				lda 	IFR0+1
.3082	95 01		sta $01,x			sta 	1,x
.3084	a5 0a		lda $0a				lda 	IFR0+2
.3086	95 02		sta $02,x			sta 	2,x
.3088	a5 0b		lda $0b				lda 	IFR0+3
.308a	95 03		sta $03,x			sta 	3,x
.308c	60		rts				rts
.308d					IFloatLoadInline:
.308d	68		pla				pla 								; pop address off to iTemp0
.308e	85 20		sta $20				sta 	iTemp0
.3090	68		pla				pla
.3091	85 21		sta $21				sta 	iTemp0+1
.3093	a0 01		ldy #$01			ldy 	#1
.3095	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.3097	95 00		sta $00,x			sta 	0,x
.3099	c8		iny				iny
.309a	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.309c	95 01		sta $01,x			sta 	1,x
.309e	c8		iny				iny
.309f	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.30a1	95 02		sta $02,x			sta 	2,x
.30a3	c8		iny				iny
.30a4	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.30a6	95 03		sta $03,x			sta 	3,x
.30a8	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.30a9	a5 20		lda $20				lda 	iTemp0
.30ab	69 05		adc #$05			adc 	#5
.30ad	85 20		sta $20				sta 	iTemp0
.30af	90 02		bcc $30b3			bcc 	_IFLINoCarry
.30b1	e6 21		inc $21				inc 	iTemp0+1
.30b3					_IFLINoCarry:
.30b3	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.30b6					IFloatMultiply8BitRx:
.30b6	5a		phy		        phy
.30b7	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.30b9	a4 08		ldy $08		        ldy     IFR0+IM0
.30bb	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.30bc	85 08		sta $08		        sta     IFR0+IM0
.30be	84 09		sty $09		        sty     IFR0+IM1
.30c0	a9 00		lda #$00	        lda     #0
.30c2	a0 08		ldy #$08	        ldy     #8
.30c4					_IFMLoop:
.30c4	90 03		bcc $30c9	        bcc     _IFMNoAdd
.30c6	18		clc		        clc
.30c7	65 09		adc $09		        adc     IFR0+IM1
.30c9					_IFMNoAdd:
.30c9	6a		ror a		        ror     a
.30ca	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.30cc	88		dey		        dey
.30cd	d0 f5		bne $30c4	        bne     _IFMLoop
.30cf	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.30d1	7a		ply		        ply
.30d2	60		rts		        rts
.30d3					IFloatCheckZero:
.30d3	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.30d5	15 01		ora $01,x			ora 	IM1,x
.30d7	15 02		ora $02,x			ora 	IM2,x
.30d9	60		rts				rts
.30da					IFloatSetZero:
.30da	a9 00		lda #$00			lda 	#0
.30dc					IFloatSetByte:
.30dc	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.30de	74 01		stz $01,x			stz 	IM1,x
.30e0	74 02		stz $02,x			stz 	IM2,x
.30e2	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.30e4	60		rts				rts
.30e5					IFloatNegate:
.30e5	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.30e7	49 40		eor #$40			eor 	#IFSign
.30e9	95 03		sta $03,x			sta 	IExp,x
.30eb	18		clc				clc
.30ec	60		rts				rts
.30ed					IFloatMantissaNegate:
.30ed	38		sec				sec 								; when you want a real 2's complement negative value.
.30ee	a9 00		lda #$00			lda 	#0
.30f0	f5 00		sbc $00,x			sbc 	IM0,x
.30f2	95 00		sta $00,x			sta 	IM0,x
.30f4	a9 00		lda #$00			lda 	#0
.30f6	f5 01		sbc $01,x			sbc 	IM1,x
.30f8	95 01		sta $01,x			sta 	IM1,x
.30fa	a9 00		lda #$00			lda 	#0
.30fc	f5 02		sbc $02,x			sbc 	IM2,x
.30fe	95 02		sta $02,x			sta 	IM2,x
.3100	60		rts				rts
.3101					IFloatShiftLeft:
.3101	18		clc				clc
.3102					IFloatRotateLeft:
.3102	36 00		rol $00,x			rol 	IM0,x
.3104	36 01		rol $01,x			rol 	IM1,x
.3106	36 02		rol $02,x			rol 	IM2,x
.3108	60		rts				rts
.3109					IFloatShiftRight:
.3109	18		clc				clc
.310a					IFloatRotateRight:
.310a	76 02		ror $02,x			ror 	IM2,x
.310c	76 01		ror $01,x			ror 	IM1,x
.310e	76 00		ror $00,x			ror 	IM0,x
.3110	60		rts				rts
.3111					IFloatNormalise:
.3111	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero 			; is it zero
.3114	f0 18		beq $312e			beq 	_IFNExitZero 				; if so exit
.3116					_IFNLoop:
.3116	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3118	29 c0		and #$c0			and 	#$C0
.311a	c9 40		cmp #$40			cmp 	#$40
.311c	f0 13		beq $3131			beq 	_IFNExitOkay 				; if so , then we are done.
.311e	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3120	29 3f		and #$3f			and 	#$3F
.3122	c9 20		cmp #$20			cmp 	#$20
.3124	f0 0b		beq $3131			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3126	20 47 31	jsr $3147			jsr 	IFloatDecExponent
.3129	20 01 31	jsr $3101			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.312c	80 e8		bra $3116			bra 	_IFNLoop
.312e					_IFNExitZero:
.312e	20 da 30	jsr $30da			jsr 	IFloatSetZero 				; set the result to zero
.3131					_IFNExitOkay:
.3131	18		clc				clc  								; return with CC.
.3132	60		rts				rts
.3133					IFloatIncExponent:
.3133	b5 03		lda $03,x			lda 	IExp,x
.3135	48		pha				pha
.3136	29 c0		and #$c0			and 	#$C0
.3138	8d 1f 07	sta $071f			sta 	IFXTemp
.313b	68		pla				pla
.313c	1a		inc a				inc 	a
.313d	29 3f		and #$3f			and 	#$3F
.313f	48		pha				pha
.3140	0d 1f 07	ora $071f			ora 	IFXTemp
.3143	95 03		sta $03,x			sta 	IExp,x
.3145	68		pla				pla
.3146	60		rts				rts
.3147					IFloatDecExponent:
.3147	b5 03		lda $03,x			lda 	IExp,x
.3149	48		pha				pha
.314a	29 c0		and #$c0			and 	#$C0
.314c	8d 1f 07	sta $071f			sta 	IFXTemp
.314f	68		pla				pla
.3150	3a		dec a				dec 	a
.3151	29 3f		and #$3f			and 	#$3F
.3153	48		pha				pha
.3154	0d 1f 07	ora $071f			ora 	IFXTemp
.3157	95 03		sta $03,x			sta 	IExp,x
.3159	68		pla				pla
.315a	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.315b					IFloatBufferReset:
.315b	9c 20 07	stz $0720			stz 	IFBufferCount
.315e	9c 21 07	stz $0721			stz 	IFBuffer
.3161	60		rts				rts
.3162					IFloatGetBufferAddress:
.3162	a0 07		ldy #$07			ldy 	#(IFBuffer >> 8)
.3164	a2 21		ldx #$21			ldx 	#(IFBuffer & $FF)
.3166	ad 20 07	lda $0720			lda 	IFBufferCount
.3169	60		rts				rts
.316a					IFloatBufferWrite:
.316a	da		phx				phx
.316b	ae 20 07	ldx $0720			ldx 	IFBufferCount
.316e	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.3171	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.3174	ee 20 07	inc $0720			inc 	IFBufferCount
.3177	fa		plx				plx
.3178	60		rts				rts
.3179					IFloatStripTrailingZeros:
.3179	ae 20 07	ldx $0720			ldx 	IFBufferCount
.317c	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.317f	c9 30		cmp #$30			cmp		#"0"
.3181	d0 0f		bne $3192			bne 	_IFSTExit
.3183	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.3186	c9 2e		cmp #$2e			cmp 	#"."
.3188	f0 08		beq $3192			beq 	_IFSTExit
.318a	ce 20 07	dec $0720			dec 	IFBufferCount
.318d	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.3190	80 e7		bra $3179			bra 	IFloatStripTrailingZeros
.3192					_IFSTExit:
.3192	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.3193					IFloatCheckRange:
.3193	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.3195	09 40		ora #$40			ora 	#IFSign
.3197	85 0b		sta $0b				sta 	IFR0+IExp
.3199	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.319b	20 d2 2a	jsr $2ad2			jsr 	IFloatAdd 					; add allowed to error.
.319e	a2 08		ldx #$08			ldx 	#IFR0
.31a0	20 d3 30	jsr $30d3			jsr 	IFloatCheckZero 			; error if < 0
.31a3	f0 06		beq $31ab			beq 	_IFAOkay
.31a5	a5 0b		lda $0b				lda 	IFR0+IExp
.31a7	29 40		and #$40			and 	#IFSign
.31a9	d0 01		bne $31ac			bne 	_IFAFail
.31ab					_IFAOkay:
.31ab	60		rts				rts
.31ac					_IFAFail:
.31ac	38		sec				sec
.31ad	68		pla				pla 								; get address - 2
.31ae	e9 02		sbc #$02			sbc 	#2
.31b0	aa		tax				tax
.31b1	68		pla				pla
.31b2	e9 00		sbc #$00			sbc 	#0
.31b4	a8		tay				tay
.31b5	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.31b7					_IFAStop:
>31b7	db						.byte 	$DB 						; display an error AA ADR ADR
.31b8	80 fd		bra $31b7			bra 	_IFAStop

;******  Return to file: basic.asm


;******  Processing file: src/program/testing/testing.asmx


;******  Processing file: src/program/testing/testdat.incx

.7800					Line0:
>7800	31 34 34 30 20 3c 3d 22			.text '1440 <="DNOIHT"1174 VAL(FRAC(978 P1V0 2.0 CHR$( /1398',0
>7808	44 4e 4f 49 48 54 22 31 31 37 34 20 56 41 4c 28
>7818	46 52 41 43 28 39 37 38 20 50 31 56 30 20 32 2e
>7828	30 20 43 48 52 24 28 20 2f 31 33 39 38 00
.7836					Line1:
>7836	37 38 32 20 20 39 2e 36			.text '782  9.63 6.64"" "" << 3.36"P" 0.46 7.83 - 1818 1034 4.37 250 "BBEL@@K"',0
>783e	33 20 36 2e 36 34 22 22 20 22 22 20 3c 3c 20 33
>784e	2e 33 36 22 50 22 20 30 2e 34 36 20 37 2e 38 33
>785e	20 2d 20 31 38 31 38 20 31 30 33 34 20 34 2e 33
>786e	37 20 32 35 30 20 22 42 42 45 4c 40 40 4b 22 00
.787e					Line2:
>787e	31 33 31 34 20 22 44 57			.text '1314 "DWXYS@"1846 586 E4G0W(< "LCBIFZ"852 *H 180-3.94<=OR 642 Z6 SAVE -1.04"QMYKRCP"376/6.11 LOOP K0F8J )684 -0.45 ENDPROC 5.77(',0
>7886	58 59 53 40 22 31 38 34 36 20 35 38 36 20 45 34
>7896	47 30 57 28 3c 20 22 4c 43 42 49 46 5a 22 38 35
>78a6	32 20 2a 48 20 31 38 30 2d 33 2e 39 34 3c 3d 4f
>78b6	52 20 36 34 32 20 5a 36 20 53 41 56 45 20 2d 31
>78c6	2e 30 34 22 51 4d 59 4b 52 43 50 22 33 37 36 2f
>78d6	36 2e 31 31 20 4c 4f 4f 50 20 4b 30 46 38 4a 20
>78e6	29 36 38 34 20 2d 30 2e 34 35 20 45 4e 44 50 52
>78f6	4f 43 20 35 2e 37 37 28 00
.78ff					Line3:
>78ff	33 39 30 20 22 5a 41 51			.text '390 "ZAQBAUKO"U6E8"Q"LEN(""',0
>7907	42 41 55 4b 4f 22 55 36 45 38 22 51 22 4c 45 4e
>7917	28 22 22 00
.791b					Line4:
>791b	37 39 36 20 22 4a 44 4f			.text '796 "JDOUF"*"DHJTXN""NHJ"STOP "QIDQUA""GWQRAQM" / 1426-3.75"BASQ" V2( -5.94 S8D4("""HHDO"',0
>7923	55 46 22 2a 22 44 48 4a 54 58 4e 22 22 4e 48 4a
>7933	22 53 54 4f 50 20 22 51 49 44 51 55 41 22 22 47
>7943	57 51 52 41 51 4d 22 20 2f 20 31 34 32 36 2d 33
>7953	2e 37 35 22 42 41 53 51 22 20 56 32 28 20 2d 35
>7963	2e 39 34 20 53 38 44 34 28 22 22 22 48 48 44 4f
>7973	22 00
.7975					Line5:
>7975	31 36 33 36 20 20 3e 3e			.text '1636  >>-7.38 M1U8D7(IF"PNGP"-6.88-6.3 1454 236 C7W( "NLZMNU"/T5U1N3$',0
>797d	2d 37 2e 33 38 20 4d 31 55 38 44 37 28 49 46 22
>798d	50 4e 47 50 22 2d 36 2e 38 38 2d 36 2e 33 20 31
>799d	34 35 34 20 32 33 36 20 43 37 57 28 20 22 4e 4c
>79ad	5a 4d 4e 55 22 2f 54 35 55 31 4e 33 24 00
.79bb					Line6:
>79bb	38 39 34 20 20 31 37 30			.text '894  1706-0.5',0
>79c3	36 2d 30 2e 35 00
.79c9					Line7:
>79c9	38 31 30 00				.text '810',0
.79cd					Line8:
>79cd	31 30 36 32 20 39 30 38			.text '1062 908 0.88 <"ENXOIIP"- /-7.42 ""',0
>79d5	20 30 2e 38 38 20 3c 22 45 4e 58 4f 49 49 50 22
>79e5	2d 20 2f 2d 37 2e 34 32 20 22 22 00
.79f1					Line9:
>79f1	37 34 30 20 55 4e 54 49			.text '740 UNTIL 292"FBD@@K""JYHW""DLLJ"<= "UFHHZD"DOKE F9L7 "WK"U5E0Y6"GYW" / =ASSERT -6.87"EITPAGJ"""> DO --6.7 X1R7C1"ETWIC"(',0
>79f9	4c 20 32 39 32 22 46 42 44 40 40 4b 22 22 4a 59
>7a09	48 57 22 22 44 4c 4c 4a 22 3c 3d 20 22 55 46 48
>7a19	48 5a 44 22 44 4f 4b 45 20 46 39 4c 37 20 22 57
>7a29	4b 22 55 35 45 30 59 36 22 47 59 57 22 20 2f 20
>7a39	3d 41 53 53 45 52 54 20 2d 36 2e 38 37 22 45 49
>7a49	54 50 41 47 4a 22 22 22 3e 20 44 4f 20 2d 2d 36
>7a59	2e 37 20 58 31 52 37 43 31 22 45 54 57 49 43 22
>7a69	28 00
.7a6b					Line10:
>7a6b	31 34 36 38 20 20 33 34			.text '1468  348 4.67 1062 1412"L@O">>',0
>7a73	38 20 34 2e 36 37 20 31 30 36 32 20 31 34 31 32
>7a83	22 4c 40 4f 22 3e 3e 00
.7a8b					Line11:
>7a8b	31 30 30 36 20 2d 38 2e			.text '1006 -8.38 "ZWHVNIO"2.1 "ZC@OV"P3L8-5.36"S"6.58 STR$(8.72-2.75 306 -9.9 +LET "UKOYITAW" 572 L$ MID$(PROC 712 -0.71 1328 G1K3 376 1678 "VFQSX"EVENT( -5.77 Z1',0
>7a93	33 38 20 22 5a 57 48 56 4e 49 4f 22 32 2e 31 20
>7aa3	22 5a 43 40 4f 56 22 50 33 4c 38 2d 35 2e 33 36
>7ab3	22 53 22 36 2e 35 38 20 53 54 52 24 28 38 2e 37
>7ac3	32 2d 32 2e 37 35 20 33 30 36 20 2d 39 2e 39 20
>7ad3	2b 4c 45 54 20 22 55 4b 4f 59 49 54 41 57 22 20
>7ae3	35 37 32 20 4c 24 20 4d 49 44 24 28 50 52 4f 43
>7af3	20 37 31 32 20 2d 30 2e 37 31 20 31 33 32 38 20
>7b03	47 31 4b 33 20 33 37 36 20 31 36 37 38 20 22 56
>7b13	46 51 53 58 22 45 56 45 4e 54 28 20 2d 35 2e 37
>7b23	37 20 5a 31 00
.7b28					Line12:
>7b28	31 31 31 38 20 52 41 4e			.text '1118 RAND(Z1"YRUKT@V" EXIT"FV"236<X3$ < -1.85-',0
>7b30	44 28 5a 31 22 59 52 55 4b 54 40 56 22 20 45 58
>7b40	49 54 22 46 56 22 32 33 36 3c 58 33 24 20 3c 20
>7b50	2d 31 2e 38 35 2d 00
.7b57					Line13:
>7b57	37 38 32 20 20 35 30 32			.text '782  502',0
>7b5f	00
.7b60					Line14:
>7b60	31 31 34 36 20 22 59 59			.text '1146 "YYQQLRZC"1566 1090 THEN -7.66 -7.75 9.13 488<=R9T6 -8.22 (RESTORE V(964"QPJYPB" "@TBHJKUT"1356 H5K2 -- (+ L0J6J5 1566',0
>7b68	51 51 4c 52 5a 43 22 31 35 36 36 20 31 30 39 30
>7b78	20 54 48 45 4e 20 2d 37 2e 36 36 20 2d 37 2e 37
>7b88	35 20 39 2e 31 33 20 34 38 38 3c 3d 52 39 54 36
>7b98	20 2d 38 2e 32 32 20 28 52 45 53 54 4f 52 45 20
>7ba8	56 28 39 36 34 22 51 50 4a 59 50 42 22 20 22 40
>7bb8	54 42 48 4a 4b 55 54 22 31 33 35 36 20 48 35 4b
>7bc8	32 20 2d 2d 20 28 2b 20 4c 30 4a 36 4a 35 20 31
>7bd8	35 36 36 00
.7bdc					Line15:
>7bdc	37 39 36 20 4f 52 20 22			.text '796 OR ""1314 INKEY$(P3 +"" 558-2.92 "BL"LET L2I4',0
>7be4	22 31 33 31 34 20 49 4e 4b 45 59 24 28 50 33 20
>7bf4	2b 22 22 20 35 35 38 2d 32 2e 39 32 20 22 42 4c
>7c04	22 4c 45 54 20 4c 32 49 34 00
.7c0e					Line16:
>7c0e	31 35 35 32 20 22 50 54			.text '1552 "PTX"RUN(782 Y2Z("FYG"* 8.66 1.68',0
>7c16	58 22 52 55 4e 28 37 38 32 20 59 32 5a 28 22 46
>7c26	59 47 22 2a 20 38 2e 36 36 20 31 2e 36 38 00
.7c35					Line17:
>7c35	32 37 38 20 35 35 38 20			.text '278 558 HEX$( 4.15 PEEK( "CLYA" "LC""GFRIPYS""DOLDG"C4C4$',0
>7c3d	48 45 58 24 28 20 34 2e 31 35 20 50 45 45 4b 28
>7c4d	20 22 43 4c 59 41 22 20 22 4c 43 22 22 47 46 52
>7c5d	49 50 59 53 22 22 44 4f 4c 44 47 22 43 34 43 34
>7c6d	24 00
.7c6f					Line18:
>7c6f	31 36 33 36 20 36 38 34			.text '1636 684 3.0 6.29 1622 1244 SYS-0.2 J6N3K5(< >U5E0Y6"IEV" -2.5',0
>7c77	20 33 2e 30 20 36 2e 32 39 20 31 36 32 32 20 31
>7c87	32 34 34 20 53 59 53 2d 30 2e 32 20 4a 36 4e 33
>7c97	4b 35 28 3c 20 3e 55 35 45 30 59 36 22 49 45 56
>7ca7	22 20 2d 32 2e 35 00
.7cae					Line19:
>7cae	31 32 35 38 00				.text '1258',0
.7cb3					Line20:
>7cb3	34 30 34 00				.text '404',0
.7cb7					Line21:
>7cb7	34 31 38 20 20 32 39 32			.text '418  292 0.82;-9.2 RAND( "UB"T5("CW"',0
>7cbf	20 30 2e 38 32 3b 2d 39 2e 32 20 52 41 4e 44 28
>7ccf	20 22 55 42 22 54 35 28 22 43 57 22 00
.7cdc					Line22:
>7cdc	35 35 38 20 2d 34 2e 34			.text '558 -4.45 V(250 T4K7S6 DATA DEEK(-4.76 992 REPEAT W2Q0$U6E8 LIST>1006 U6E8-3.02 P1V0 CHR$(Y2Z( "M" 1006"DV" RETURN E4G0W(""',0
>7ce4	35 20 56 28 32 35 30 20 54 34 4b 37 53 36 20 44
>7cf4	41 54 41 20 44 45 45 4b 28 2d 34 2e 37 36 20 39
>7d04	39 32 20 52 45 50 45 41 54 20 57 32 51 30 24 55
>7d14	36 45 38 20 4c 49 53 54 3e 31 30 30 36 20 55 36
>7d24	45 38 2d 33 2e 30 32 20 50 31 56 30 20 43 48 52
>7d34	24 28 59 32 5a 28 20 22 4d 22 20 31 30 30 36 22
>7d44	44 56 22 20 52 45 54 55 52 4e 20 45 34 47 30 57
>7d54	28 22 22 00
.7d58					Line23:
>7d58	31 38 33 32 20 2f 20 2d			.text '1832 / -5.82 X3$ 0.51 250 X4 768 8.32 180 6.42 1678""+= "GIQCU"-5.87 1.25/1776 + W0U0N 4.73 R4 DIV Z7 0.46-9.73 *MID$(',0
>7d60	35 2e 38 32 20 58 33 24 20 30 2e 35 31 20 32 35
>7d70	30 20 58 34 20 37 36 38 20 38 2e 33 32 20 31 38
>7d80	30 20 36 2e 34 32 20 31 36 37 38 22 22 2b 3d 20
>7d90	22 47 49 51 43 55 22 2d 35 2e 38 37 20 31 2e 32
>7da0	35 2f 31 37 37 36 20 2b 20 57 30 55 30 4e 20 34
>7db0	2e 37 33 20 52 34 20 44 49 56 20 5a 37 20 30 2e
>7dc0	34 36 2d 39 2e 37 33 20 2a 4d 49 44 24 28 00
.7dcf					Line24:
>7dcf	31 36 37 38 20 20 2a 00			.text '1678  *',0
.7dd7					Line25:
>7dd7	31 30 36 32 20 20 31 31			.text '1062  1174 = 600 "EC@Y"C1 I4X8 "YHD" C5T9P4"OSTHE" "SOA"614 O3(+"MSORORQJ"',0
>7ddf	37 34 20 3d 20 36 30 30 20 22 45 43 40 59 22 43
>7def	31 20 49 34 58 38 20 22 59 48 44 22 20 43 35 54
>7dff	39 50 34 22 4f 53 54 48 45 22 20 22 53 4f 41 22
>7e0f	36 31 34 20 4f 33 28 2b 22 4d 53 4f 52 4f 52 51
>7e1f	4a 22 00
.7e22					Line26:
>7e22	34 30 34 20 53 51 52 28			.text '404 SQR(2.82 1314 END 1776 880 M9Q6 W0U0N)838 9.95 DATA N6J8X8 1020 "EWELQA""JE" F9L7-9.11 1594',0
>7e2a	32 2e 38 32 20 31 33 31 34 20 45 4e 44 20 31 37
>7e3a	37 36 20 38 38 30 20 4d 39 51 36 20 57 30 55 30
>7e4a	4e 29 38 33 38 20 39 2e 39 35 20 44 41 54 41 20
>7e5a	4e 36 4a 38 58 38 20 31 30 32 30 20 22 45 57 45
>7e6a	4c 51 41 22 22 4a 45 22 20 46 39 4c 37 2d 39 2e
>7e7a	31 31 20 31 35 39 34 00
.7e82					Line27:
>7e82	31 36 35 30 00				.text '1650',0
.7e87					Line28:
>7e87	31 38 31 38 20 20 2f 20			.text '1818  / 950"Q""@XYWPPUE" * 334 -+"Z"8.1+Z1 "K"',0
>7e8f	39 35 30 22 51 22 22 40 58 59 57 50 50 55 45 22
>7e9f	20 2a 20 33 33 34 20 2d 2b 22 5a 22 38 2e 31 2b
>7eaf	5a 31 20 22 4b 22 00
.7eb6					Line29:
>7eb6	34 38 38 20 20 22 55 41			.text '488  "UAR"IF"U"1524 "@D"=TO 306 VAL("EWYD" NEW "BLA"RAND(OR >',0
>7ebe	52 22 49 46 22 55 22 31 35 32 34 20 22 40 44 22
>7ece	3d 54 4f 20 33 30 36 20 56 41 4c 28 22 45 57 59
>7ede	44 22 20 4e 45 57 20 22 42 4c 41 22 52 41 4e 44
>7eee	28 4f 52 20 3e 00
.7ef4					Line30:
>7ef4	31 33 30 30 00				.text '1300',0
.7ef9					Line31:
>7ef9	38 32 34 20 3e 28 31 37			.text '824 >(1762 "JSF"J1(9.91*',0
>7f01	36 32 20 22 4a 53 46 22 4a 31 28 39 2e 39 31 2a
>7f11	00
.7f12					Line32:
>7f12	33 30 36 20 38 2e 39 36			.text '306 8.96 7.06 PRINT 1300"DSMF"4.09-2.0 D5M1V4( ) J1( V5-5.41',0
>7f1a	20 37 2e 30 36 20 50 52 49 4e 54 20 31 33 30 30
>7f2a	22 44 53 4d 46 22 34 2e 30 39 2d 32 2e 30 20 44
>7f3a	35 4d 31 56 34 28 20 29 20 4a 31 28 20 56 35 2d
>7f4a	35 2e 34 31 00
.7f4f					Line33:
>7f4f	31 37 36 32 20 32 32 32			.text '1762 222 R2 1678 1356"D"K5U2Y 4.0 - "BGXOSOZ""CN"X6-8.92"Q@"-3.02 1272 RAND( B9V 7.12 7.4<"ON"',0
>7f57	20 52 32 20 31 36 37 38 20 31 33 35 36 22 44 22
>7f67	4b 35 55 32 59 20 34 2e 30 20 2d 20 22 42 47 58
>7f77	4f 53 4f 5a 22 22 43 4e 22 58 36 2d 38 2e 39 32
>7f87	22 51 40 22 2d 33 2e 30 32 20 31 32 37 32 20 52
>7f97	41 4e 44 28 20 42 39 56 20 37 2e 31 32 20 37 2e
>7fa7	34 3c 22 4f 4e 22 00
.7fae					Line34:
>7fae	36 30 30 00				.text '600',0
.7fb2					Line35:
>7fb2	31 32 38 36 00				.text '1286',0
.7fb7					Line36:
>7fb7	31 31 30 34 20 3e 54 48			.text '1104 >THEN)*NEXT G1$',0
>7fbf	45 4e 29 2a 4e 45 58 54 20 47 31 24 00
.7fcc					Line37:
>7fcc	31 30 30 36 20 20 22 5a			.text '1006  "ZBQX"*7.01(<-8.71-6.52 = N4V4( 7.53 D0X3 U0<WEND/866 3.63 838 )"ZHSXB"M4',0
>7fd4	42 51 58 22 2a 37 2e 30 31 28 3c 2d 38 2e 37 31
>7fe4	2d 36 2e 35 32 20 3d 20 4e 34 56 34 28 20 37 2e
>7ff4	35 33 20 44 30 58 33 20 55 30 3c 57 45 4e 44 2f
>8004	38 36 36 20 33 2e 36 33 20 38 33 38 20 29 22 5a
>8014	48 53 58 42 22 4d 34 00
.801c					Line38:
>801c	37 32 36 20 20 22 4a 43			.text '726  "JCF" 544 L2I4 DEEK("R" 684"" -1.37 )$ 1104 5.8 194"""RQYVG" -8.46 -6.81 R2',0
>8024	46 22 20 35 34 34 20 4c 32 49 34 20 44 45 45 4b
>8034	28 22 52 22 20 36 38 34 22 22 20 2d 31 2e 33 37
>8044	20 29 24 20 31 31 30 34 20 35 2e 38 20 31 39 34
>8054	22 22 22 52 51 59 56 47 22 20 2d 38 2e 34 36 20
>8064	2d 36 2e 38 31 20 52 32 00
.806d					Line39:
>806d	31 31 33 32 20 57 32 51			.text '1132 W2Q0$-3.97 "JNML""" "NNOBVW" "HXKK"= )-2.54',0
>8075	30 24 2d 33 2e 39 37 20 22 4a 4e 4d 4c 22 22 22
>8085	20 22 4e 4e 4f 42 56 57 22 20 22 48 58 4b 4b 22
>8095	3d 20 29 2d 32 2e 35 34 00
.809e					Line40:
>809e	31 35 39 34 20 2d 34 2e			.text '1594 -4.86 7.81 FRAC( S3N3A (6.01 "S@QNHT" ENDPROC-6.14 7.3 "OLCF"4.3 1048 1426 "PBYM"1692-HEX$("PU"CALL DEC(;',0
>80a6	38 36 20 37 2e 38 31 20 46 52 41 43 28 20 53 33
>80b6	4e 33 41 20 28 36 2e 30 31 20 22 53 40 51 4e 48
>80c6	54 22 20 45 4e 44 50 52 4f 43 2d 36 2e 31 34 20
>80d6	37 2e 33 20 22 4f 4c 43 46 22 34 2e 33 20 31 30
>80e6	34 38 20 31 34 32 36 20 22 50 42 59 4d 22 31 36
>80f6	39 32 2d 48 45 58 24 28 22 50 55 22 43 41 4c 4c
>8106	20 44 45 43 28 3b 00
.810d					Line41:
>810d	34 38 38 20 48 20 43 48			.text '488 H CHR$( T5U1N3$6.66 "YS@XQGHR" "@JD"XOR"T"0.71 XOR-0.27 6.95 SGN(GOSUB LIST PROC L0J6J5*',0
>8115	52 24 28 20 54 35 55 31 4e 33 24 36 2e 36 36 20
>8125	22 59 53 40 58 51 47 48 52 22 20 22 40 4a 44 22
>8135	58 4f 52 22 54 22 30 2e 37 31 20 58 4f 52 2d 30
>8145	2e 32 37 20 36 2e 39 35 20 53 47 4e 28 47 4f 53
>8155	55 42 20 4c 49 53 54 20 50 52 4f 43 20 4c 30 4a
>8165	36 4a 35 2a 00
.816a					Line42:
>816a	36 35 36 20 58 34 20 31			.text '656 X4 1566*',0
>8172	35 36 36 2a 00
.8177					Line43:
>8177	31 31 30 34 20 22 4a 49			.text '1104 "JIZR"1202 1412 404',0
>817f	5a 52 22 31 32 30 32 20 31 34 31 32 20 34 30 34
>818f	00
.8190					Line44:
>8190	34 36 30 20 31 30 33 34			.text '460 1034 502-H7B0T(O0P3L4 X8 INT( OR"QBFUH"""PRINT 5.78 -0.89"EYLCFPE"-0.71 L$""0.8-3.37= X1R7C1""Z3K-9.73 2.49 F0K1U2 "QZKDEWXY" -2.32',0
>8198	20 35 30 32 2d 48 37 42 30 54 28 4f 30 50 33 4c
>81a8	34 20 58 38 20 49 4e 54 28 20 4f 52 22 51 42 46
>81b8	55 48 22 22 22 50 52 49 4e 54 20 35 2e 37 38 20
>81c8	2d 30 2e 38 39 22 45 59 4c 43 46 50 45 22 2d 30
>81d8	2e 37 31 20 4c 24 22 22 30 2e 38 2d 33 2e 33 37
>81e8	3d 20 58 31 52 37 43 31 22 22 5a 33 4b 2d 39 2e
>81f8	37 33 20 32 2e 34 39 20 46 30 4b 31 55 32 20 22
>8208	51 5a 4b 44 45 57 58 59 22 20 2d 32 2e 33 32 00
.8218					Line45:
>8218	37 36 38 20 20 3d 4e 45			.text '768  =NEXT"VHLUZPEC" "@LNTDG"194 END 3.61-8.9 1.4 P3 L9U(-2.45/"AMTD"R4 TIME D5M1V4(=MID$(F',0
>8220	58 54 22 56 48 4c 55 5a 50 45 43 22 20 22 40 4c
>8230	4e 54 44 47 22 31 39 34 20 45 4e 44 20 33 2e 36
>8240	31 2d 38 2e 39 20 31 2e 34 20 50 33 20 4c 39 55
>8250	28 2d 32 2e 34 35 2f 22 41 4d 54 44 22 52 34 20
>8260	54 49 4d 45 20 44 35 4d 31 56 34 28 3d 4d 49 44
>8270	24 28 46 00
.8274					Line46:
>8274	35 33 30 00				.text '530',0
.8278					Line47:
>8278	32 37 38 20 36 38 34 20			.text '278 684 AND "GA")"EB"9.71"K""W@QNV@NA" 1.62 656 R6"GHRCZTN"GOTO R4 5.44=1048 TO J6N3K5( SGN(-8.02 1258 796 488',0
>8280	41 4e 44 20 22 47 41 22 29 22 45 42 22 39 2e 37
>8290	31 22 4b 22 22 57 40 51 4e 56 40 4e 41 22 20 31
>82a0	2e 36 32 20 36 35 36 20 52 36 22 47 48 52 43 5a
>82b0	54 4e 22 47 4f 54 4f 20 52 34 20 35 2e 34 34 3d
>82c0	31 30 34 38 20 54 4f 20 4a 36 4e 33 4b 35 28 20
>82d0	53 47 4e 28 2d 38 2e 30 32 20 31 32 35 38 20 37
>82e0	39 36 20 34 38 38 00
.82e7					Line48:
>82e7	31 34 38 32 20 39 37 38			.text '1482 978 B9V >-5.51',0
>82ef	20 42 39 56 20 3e 2d 35 2e 35 31 00
.82fb					Line49:
>82fb	36 39 38 20 20 2a 20 31			.text '698  * 1342 1734 Q2 *RND(642""= 1188 IF DOKE 1062 B6B7V((FOR -0.09 W0U0N>',0
>8303	33 34 32 20 31 37 33 34 20 51 32 20 2a 52 4e 44
>8313	28 36 34 32 22 22 3d 20 31 31 38 38 20 49 46 20
>8323	44 4f 4b 45 20 31 30 36 32 20 42 36 42 37 56 28
>8333	28 46 4f 52 20 2d 30 2e 30 39 20 57 30 55 30 4e
>8343	3e 00
.8345					Line50:
>8345	34 33 32 20 2f 53 54 52			.text '432 /STR$( 1048 TO 8.32"CPT" 7.56"KJ@"G1K3 M1W4 "JVEUA"WHILE Z3K 1734 4.44"HSCOPJ"1244 Z6$"CETFESZN""RID" "OJK"U0"YACQ" "X@ZO@"',0
>834d	24 28 20 31 30 34 38 20 54 4f 20 38 2e 33 32 22
>835d	43 50 54 22 20 37 2e 35 36 22 4b 4a 40 22 47 31
>836d	4b 33 20 4d 31 57 34 20 22 4a 56 45 55 41 22 57
>837d	48 49 4c 45 20 5a 33 4b 20 31 37 33 34 20 34 2e
>838d	34 34 22 48 53 43 4f 50 4a 22 31 32 34 34 20 5a
>839d	36 24 22 43 45 54 46 45 53 5a 4e 22 22 52 49 44
>83ad	22 20 22 4f 4a 4b 22 55 30 22 59 41 43 51 22 20
>83bd	22 58 40 5a 4f 40 22 00
.83c5					Line51:
>83c5	31 36 33 36 20 52 36 20			.text '1636 R6 DIM "L" 1412 < ""NEW B6B7V(-1.07 866"UDPCLK" "G"-9.72 F5 "NB" "FCEMWFV">LET',0
>83cd	44 49 4d 20 22 4c 22 20 31 34 31 32 20 3c 20 22
>83dd	22 4e 45 57 20 42 36 42 37 56 28 2d 31 2e 30 37
>83ed	20 38 36 36 22 55 44 50 43 4c 4b 22 20 22 47 22
>83fd	2d 39 2e 37 32 20 46 35 20 22 4e 42 22 20 22 46
>840d	43 45 4d 57 46 56 22 3e 4c 45 54 00
.8419					Line52:
>8419	31 31 31 38 20 45 56 45			.text '1118 EVENT(950"F"1510 DIM = *NEXT 544 PRINT/"H" "ASETMO" 1132 544 1146=236 ( 3.29 M1W4 "OLMNJMB" 3.57 F9U6V0 1524( VAL( ""278',0
>8421	4e 54 28 39 35 30 22 46 22 31 35 31 30 20 44 49
>8431	4d 20 3d 20 2a 4e 45 58 54 20 35 34 34 20 50 52
>8441	49 4e 54 2f 22 48 22 20 22 41 53 45 54 4d 4f 22
>8451	20 31 31 33 32 20 35 34 34 20 31 31 34 36 3d 32
>8461	33 36 20 28 20 33 2e 32 39 20 4d 31 57 34 20 22
>8471	4f 4c 4d 4e 4a 4d 42 22 20 33 2e 35 37 20 46 39
>8481	55 36 56 30 20 31 35 32 34 28 20 56 41 4c 28 20
>8491	22 22 32 37 38 00
.8497					Line53:
>8497	33 37 36 20 20 36 34 32			.text '376  642 / U0 "@D"5.17 ENDIF 1.41 READ />8.13 ELSE INKEY$(1762',0
>849f	20 2f 20 55 30 20 22 40 44 22 35 2e 31 37 20 45
>84af	4e 44 49 46 20 31 2e 34 31 20 52 45 41 44 20 2f
>84bf	3e 38 2e 31 33 20 45 4c 53 45 20 49 4e 4b 45 59
>84cf	24 28 31 37 36 32 00
.84d6					Line54:
>84d6	31 32 34 34 00				.text '1244',0
.84db					Line55:
>84db	31 34 32 36 20 22 56 4e			.text '1426 "VNKUV@PL" - -0.2 "G"( 2.53 838 1132-0.33<>"QZQ""Y"RUN B9V 1.21)T Q2',0
>84e3	4b 55 56 40 50 4c 22 20 2d 20 2d 30 2e 32 20 22
>84f3	47 22 28 20 32 2e 35 33 20 38 33 38 20 31 31 33
>8503	32 2d 30 2e 33 33 3c 3e 22 51 5a 51 22 22 59 22
>8513	52 55 4e 20 42 39 56 20 31 2e 32 31 29 54 20 51
>8523	32 00
.8525					Line56:
>8525	32 39 32 20 20 32 36 34			.text '292  264 T3V4O(EXIT "DG@ZLEP" 1664"YG")2.57> ="WA"* 726 NEW 852 R4"P"',0
>852d	20 54 33 56 34 4f 28 45 58 49 54 20 22 44 47 40
>853d	5a 4c 45 50 22 20 31 36 36 34 22 59 47 22 29 32
>854d	2e 35 37 3e 20 3d 22 57 41 22 2a 20 37 32 36 20
>855d	4e 45 57 20 38 35 32 20 52 34 22 50 22 00
.856b					Line57:
>856b	31 31 30 34 20 44 49 56			.text '1104 DIV DIM 9.29 SGN(-4.95+ "@UK"F9U6V0 586 1020)""CLEAR UNTIL J$ 1118"FZUSB" /',0
>8573	20 44 49 4d 20 39 2e 32 39 20 53 47 4e 28 2d 34
>8583	2e 39 35 2b 20 22 40 55 4b 22 46 39 55 36 56 30
>8593	20 35 38 36 20 31 30 32 30 29 22 22 43 4c 45 41
>85a3	52 20 55 4e 54 49 4c 20 4a 24 20 31 31 31 38 22
>85b3	46 5a 55 53 42 22 20 2f 00
.85bc					Line58:
>85bc	31 30 33 34 20 22 50 4b			.text '1034 "PKDU" ( 1510 * >>""R9 4.06 (8.93"W"-8.71<>0.01 "LHL" "KZP"+1.57 OR L8X(*"UTNNUGZN">;)=-1.08 936 LOAD',0
>85c4	44 55 22 20 28 20 31 35 31 30 20 2a 20 3e 3e 22
>85d4	22 52 39 20 34 2e 30 36 20 28 38 2e 39 33 22 57
>85e4	22 2d 38 2e 37 31 3c 3e 30 2e 30 31 20 22 4c 48
>85f4	4c 22 20 22 4b 5a 50 22 2b 31 2e 35 37 20 4f 52
>8604	20 4c 38 58 28 2a 22 55 54 4e 4e 55 47 5a 4e 22
>8614	3e 3b 29 3d 2d 31 2e 30 38 20 39 33 36 20 4c 4f
>8624	41 44 00
.8627					Line59:
>8627	31 37 36 32 20 20 38 31			.text '1762  810 )0.64 "DEVZZL"1454 Z6E Z6$SAVE 1412 1664-1.7 E4G0W(+"" L5',0
>862f	30 20 29 30 2e 36 34 20 22 44 45 56 5a 5a 4c 22
>863f	31 34 35 34 20 5a 36 45 20 5a 36 24 53 41 56 45
>864f	20 31 34 31 32 20 31 36 36 34 2d 31 2e 37 20 45
>865f	34 47 30 57 28 2b 22 22 20 4c 35 00
.866b					Line60:
>866b	31 35 36 36 20 20 3c 3e			.text '1566  <> T8L7 NEW (ENDPROC -6.98 << FRAC( 1440-0.05 "HMKX"1510"BTYGMQ"<>8.16"@@DZHVB"',0
>8673	20 54 38 4c 37 20 4e 45 57 20 28 45 4e 44 50 52
>8683	4f 43 20 2d 36 2e 39 38 20 3c 3c 20 46 52 41 43
>8693	28 20 31 34 34 30 2d 30 2e 30 35 20 22 48 4d 4b
>86a3	58 22 31 35 31 30 22 42 54 59 47 4d 51 22 3c 3e
>86b3	38 2e 31 36 22 40 40 44 5a 48 56 42 22 00
.86c1					Line61:
>86c1	36 31 34 20 53 54 45 50			.text '614 STEP *(',0
>86c9	20 2a 28 00
.86cd					Line62:
>86cd	31 30 34 38 20 22 50 4b			.text '1048 "PKB"U6E8"LMGXG"<"VEMBY" "HJZSMEU" POKE G9I5 1804 R2 "" />L9U(PRINT 6.15 1202"WKRGPCHU"236 3.98 NEW',0
>86d5	42 22 55 36 45 38 22 4c 4d 47 58 47 22 3c 22 56
>86e5	45 4d 42 59 22 20 22 48 4a 5a 53 4d 45 55 22 20
>86f5	50 4f 4b 45 20 47 39 49 35 20 31 38 30 34 20 52
>8705	32 20 22 22 20 2f 3e 4c 39 55 28 50 52 49 4e 54
>8715	20 36 2e 31 35 20 31 32 30 32 22 57 4b 52 47 50
>8725	43 48 55 22 32 33 36 20 33 2e 39 38 20 4e 45 57
>8735	00
.8736					Line63:
>8736	31 33 38 34 20 31 33 39			.text '1384 1398 5.45 O0$3.64"@"V( 1426<"C" SYS"O""Q" SYS<>1650"UNJIZG"SGN(+ "" RAND(222 -3.27-7.94 T3R4-5.67 3.48 H5K2"TGAN"<',0
>873e	38 20 35 2e 34 35 20 4f 30 24 33 2e 36 34 22 40
>874e	22 56 28 20 31 34 32 36 3c 22 43 22 20 53 59 53
>875e	22 4f 22 22 51 22 20 53 59 53 3c 3e 31 36 35 30
>876e	22 55 4e 4a 49 5a 47 22 53 47 4e 28 2b 20 22 22
>877e	20 52 41 4e 44 28 32 32 32 20 2d 33 2e 32 37 2d
>878e	37 2e 39 34 20 54 33 52 34 2d 35 2e 36 37 20 33
>879e	2e 34 38 20 48 35 4b 32 22 54 47 41 4e 22 3c 00
.87ae					Line64:
>87ae	31 30 39 30 20 3c 22 42			.text '1090 <"BMPEEZ" -3.25"" WEND 1510 6.83 E"VRJTJ""QYWXYVFV"964 684+740+-6.88 "MRGCAC">EXIT DIM U5E0Y6 1524 ENDPROC --2.39 ENDPROC"LKOZ"1272',0
>87b6	4d 50 45 45 5a 22 20 2d 33 2e 32 35 22 22 20 57
>87c6	45 4e 44 20 31 35 31 30 20 36 2e 38 33 20 45 22
>87d6	56 52 4a 54 4a 22 22 51 59 57 58 59 56 46 56 22
>87e6	39 36 34 20 36 38 34 2b 37 34 30 2b 2d 36 2e 38
>87f6	38 20 22 4d 52 47 43 41 43 22 3e 45 58 49 54 20
>8806	44 49 4d 20 55 35 45 30 59 36 20 31 35 32 34 20
>8816	45 4e 44 50 52 4f 43 20 2d 2d 32 2e 33 39 20 45
>8826	4e 44 50 52 4f 43 22 4c 4b 4f 5a 22 31 32 37 32
>8836	00
.8837					Line65:
>8837	32 36 34 20 3e 20 29 20			.text '264 > ) 1776 U0 "WTV" 1412 Y5Z2("" 8.32 "" -6.74(',0
>883f	31 37 37 36 20 55 30 20 22 57 54 56 22 20 31 34
>884f	31 32 20 59 35 5a 32 28 22 22 20 38 2e 33 32 20
>885f	22 22 20 2d 36 2e 37 34 28 00
.8869					Line66:
>8869	31 33 31 34 20 20 43 4c			.text '1314  CLEAR 894-5.8*',0
>8871	45 41 52 20 38 39 34 2d 35 2e 38 2a 00
.887e					Line67:
>887e	39 32 32 20 20 2d 35 2e			.text '922  -5.51"E")9.17 488"WRWZC" "TYF" 8.32 "JUV" "LBUH"-1.65 4.71',0
>8886	35 31 22 45 22 29 39 2e 31 37 20 34 38 38 22 57
>8896	52 57 5a 43 22 20 22 54 59 46 22 20 38 2e 33 32
>88a6	20 22 4a 55 56 22 20 22 4c 42 55 48 22 2d 31 2e
>88b6	36 35 20 34 2e 37 31 00
.88be					Line68:
>88be	36 37 30 20 20 2d 34 2e			.text '670  -4.79 RAND() ) V( *T9L4"USWIWAAT"K5U2Y -4.98-6.74 / 1664 642 L5"RORG@SWC""CISN""""CTLOWXYG" "F" "KMNNPM"N4V4(Z7 CHR$("LPSRP"F5U6H7+Q4W1$ AND 3.27',0
>88c6	37 39 20 52 41 4e 44 28 29 20 29 20 56 28 20 2a
>88d6	54 39 4c 34 22 55 53 57 49 57 41 41 54 22 4b 35
>88e6	55 32 59 20 2d 34 2e 39 38 2d 36 2e 37 34 20 2f
>88f6	20 31 36 36 34 20 36 34 32 20 4c 35 22 52 4f 52
>8906	47 40 53 57 43 22 22 43 49 53 4e 22 22 22 22 43
>8916	54 4c 4f 57 58 59 47 22 20 22 46 22 20 22 4b 4d
>8926	4e 4e 50 4d 22 4e 34 56 34 28 5a 37 20 43 48 52
>8936	24 28 22 4c 50 53 52 50 22 46 35 55 36 48 37 2b
>8946	51 34 57 31 24 20 41 4e 44 20 33 2e 32 37 00
.8955					Line69:
>8955	36 37 30 20 22 45 58 56			.text '670 "EXV@KBQI"5.41"UZVIJGPE" < "VZPX" 698 A7F1(WHILE O0P3L4 L9U(1090"LY" 684 1468"X" 2.26 1272 X3$ S8D4 ASSERT"@ZT"G1$ 1846 T U6E8 O0P3L4 -4.09-',0
>895d	40 4b 42 51 49 22 35 2e 34 31 22 55 5a 56 49 4a
>896d	47 50 45 22 20 3c 20 22 56 5a 50 58 22 20 36 39
>897d	38 20 41 37 46 31 28 57 48 49 4c 45 20 4f 30 50
>898d	33 4c 34 20 4c 39 55 28 31 30 39 30 22 4c 59 22
>899d	20 36 38 34 20 31 34 36 38 22 58 22 20 32 2e 32
>89ad	36 20 31 32 37 32 20 58 33 24 20 53 38 44 34 20
>89bd	41 53 53 45 52 54 22 40 5a 54 22 47 31 24 20 31
>89cd	38 34 36 20 54 20 55 36 45 38 20 4f 30 50 33 4c
>89dd	34 20 2d 34 2e 30 39 2d 00
.89e6					Line70:
>89e6	31 32 34 34 20 22 22 00			.text '1244 ""',0
.89ee					Line71:
>89ee	31 35 39 34 00				.text '1594',0
.89f3					Line72:
>89f3	31 31 37 34 20 41 37 46			.text '1174 A7F1( DIM 1.36 978 M4+= -2.91',0
>89fb	31 28 20 44 49 4d 20 31 2e 33 36 20 39 37 38 20
>8a0b	4d 34 2b 3d 20 2d 32 2e 39 31 00
.8a16					Line73:
>8a16	34 30 34 00				.text '404',0
.8a1a					Line74:
>8a1a	36 39 38 20 31 36 36 34			.text '698 1664)',0
>8a22	29 00
.8a24					Line75:
>8a24	31 34 35 34 20 20 4f 33			.text '1454  O3 880+T5( (<</',0
>8a2c	20 38 38 30 2b 54 35 28 20 28 3c 3c 2f 00
.8a3a					Line76:
>8a3a	31 34 38 32 20 20 44 4f			.text '1482  DOKE D2R$ F0K1U2"QSZFRZ" 1678 600 -2.38 PEEK( +3.79= "E"',0
>8a42	4b 45 20 44 32 52 24 20 46 30 4b 31 55 32 22 51
>8a52	53 5a 46 52 5a 22 20 31 36 37 38 20 36 30 30 20
>8a62	2d 32 2e 33 38 20 50 45 45 4b 28 20 2b 33 2e 37
>8a72	39 3d 20 22 45 22 00
.8a79					Line77:
>8a79	31 36 39 32 20 3d 31 33			.text '1692 =1300 R6 922"XBPPJ"F0K1U2 5.77 ENDPROC WEND O3 END/*DIV F9U6V0 ASSERT +WHILE 768 572 +558 -1832 6.23 PROC SGN(A L9U("C"',0
>8a81	30 30 20 52 36 20 39 32 32 22 58 42 50 50 4a 22
>8a91	46 30 4b 31 55 32 20 35 2e 37 37 20 45 4e 44 50
>8aa1	52 4f 43 20 57 45 4e 44 20 4f 33 20 45 4e 44 2f
>8ab1	2a 44 49 56 20 46 39 55 36 56 30 20 41 53 53 45
>8ac1	52 54 20 2b 57 48 49 4c 45 20 37 36 38 20 35 37
>8ad1	32 20 2b 35 35 38 20 2d 31 38 33 32 20 36 2e 32
>8ae1	33 20 50 52 4f 43 20 53 47 4e 28 41 20 4c 39 55
>8af1	28 22 43 22 00
.8af6					Line78:
>8af6	31 37 32 30 20 31 2e 39			.text '1720 1.97) (334 ""R2*"U"1832 = U5E0Y6 LIST -0.77"VCTBX"NEW ELSE 628*LEN(',0
>8afe	37 29 20 28 33 33 34 20 22 22 52 32 2a 22 55 22
>8b0e	31 38 33 32 20 3d 20 55 35 45 30 59 36 20 4c 49
>8b1e	53 54 20 2d 30 2e 37 37 22 56 43 54 42 58 22 4e
>8b2e	45 57 20 45 4c 53 45 20 36 32 38 2a 4c 45 4e 28
>8b3e	00
.8b3f					Line79:
>8b3f	31 39 34 20 2f 33 2e 33			.text '194 /3.38"CGVAW"1272 G( 1692"MNLTQQVN" SYS',0
>8b47	38 22 43 47 56 41 57 22 31 32 37 32 20 47 28 20
>8b57	31 36 39 32 22 4d 4e 4c 54 51 51 56 4e 22 20 53
>8b67	59 53 00
.8b6a					Line80:
>8b6a	38 31 30 20 20 22 43 55			.text '810  "CUIHFK"936 RETURN 1398 2.22 Z6E TO S6K9M1> I4X8"HCR" PROC "IVKPRMZ"572) ABS("HXQFBD""JKJOBCN"6.33',0
>8b72	49 48 46 4b 22 39 33 36 20 52 45 54 55 52 4e 20
>8b82	31 33 39 38 20 32 2e 32 32 20 5a 36 45 20 54 4f
>8b92	20 53 36 4b 39 4d 31 3e 20 49 34 58 38 22 48 43
>8ba2	52 22 20 50 52 4f 43 20 22 49 56 4b 50 52 4d 5a
>8bb2	22 35 37 32 29 20 41 42 53 28 22 48 58 51 46 42
>8bc2	44 22 22 4a 4b 4a 4f 42 43 4e 22 36 2e 33 33 00
.8bd2					Line81:
>8bd2	31 31 36 30 20 35 2e 38			.text '1160 5.84-6.61 -2.6=1776 LOAD A 5.5 7.63 1258',0
>8bda	34 2d 36 2e 36 31 20 2d 32 2e 36 3d 31 37 37 36
>8bea	20 4c 4f 41 44 20 41 20 35 2e 35 20 37 2e 36 33
>8bfa	20 31 32 35 38 00
.8c00					Line82:
>8c00	39 32 32 20 4e 34 56 34			.text '922 N4V4(ASSERT R9/LEFT$( -X6 1174>"ZIN"1622 -0.61/J5S1Z5 INPUT -5.83 2.16 6.65+ "GS@""JAM" UNTIL E 474-4.9"PV"530 278',0
>8c08	28 41 53 53 45 52 54 20 52 39 2f 4c 45 46 54 24
>8c18	28 20 2d 58 36 20 31 31 37 34 3e 22 5a 49 4e 22
>8c28	31 36 32 32 20 2d 30 2e 36 31 2f 4a 35 53 31 5a
>8c38	35 20 49 4e 50 55 54 20 2d 35 2e 38 33 20 32 2e
>8c48	31 36 20 36 2e 36 35 2b 20 22 47 53 40 22 22 4a
>8c58	41 4d 22 20 55 4e 54 49 4c 20 45 20 34 37 34 2d
>8c68	34 2e 39 22 50 56 22 35 33 30 20 32 37 38 00
.8c77					Line83:
>8c77	36 32 38 20 2d 31 2e 39			.text '628 -1.95 H )"D@@ENNSL" 9.93-4.3"" 1412 1202 N9$ "NTTTK" (>=530 INKEY$(IF 3.8"HANL""BHBVT"L8X(',0
>8c7f	35 20 48 20 29 22 44 40 40 45 4e 4e 53 4c 22 20
>8c8f	39 2e 39 33 2d 34 2e 33 22 22 20 31 34 31 32 20
>8c9f	31 32 30 32 20 4e 39 24 20 22 4e 54 54 54 4b 22
>8caf	20 28 3e 3d 35 33 30 20 49 4e 4b 45 59 24 28 49
>8cbf	46 20 33 2e 38 22 48 41 4e 4c 22 22 42 48 42 56
>8ccf	54 22 4c 38 58 28 00
.8cd6					Line84:
>8cd6	31 37 33 34 20 20 22 48			.text '1734  "HHT"404 "G" RESTORE"X@QXTV" *(4.05 1244 1146',0
>8cde	48 54 22 34 30 34 20 22 47 22 20 52 45 53 54 4f
>8cee	52 45 22 58 40 51 58 54 56 22 20 2a 28 34 2e 30
>8cfe	35 20 31 32 34 34 20 31 31 34 36 00
.8d0a					Line85:
>8d0a	31 33 30 30 20 20 32 2e			.text '1300  2.49 < "KB@PBE"(>> T4K7S6 1.77 1.12-4.76 ENDIF 1.5) ("RV" 810-1.6 1104<> -0.22 C5T9P4"SNV@CCH"824 1230 CHR$(796 1594',0
>8d12	34 39 20 3c 20 22 4b 42 40 50 42 45 22 28 3e 3e
>8d22	20 54 34 4b 37 53 36 20 31 2e 37 37 20 31 2e 31
>8d32	32 2d 34 2e 37 36 20 45 4e 44 49 46 20 31 2e 35
>8d42	29 20 28 22 52 56 22 20 38 31 30 2d 31 2e 36 20
>8d52	31 31 30 34 3c 3e 20 2d 30 2e 32 32 20 43 35 54
>8d62	39 50 34 22 53 4e 56 40 43 43 48 22 38 32 34 20
>8d72	31 32 33 30 20 43 48 52 24 28 37 39 36 20 31 35
>8d82	39 34 00
.8d85					Line86:
>8d85	31 35 35 32 20 20 35 30			.text '1552  502* "U"=1104) 5.53 1608> *',0
>8d8d	32 2a 20 22 55 22 3d 31 31 30 34 29 20 35 2e 35
>8d9d	33 20 31 36 30 38 3e 20 2a 00
.8da7					Line87:
>8da7	31 38 34 36 20 20 45 36			.text '1846  E6 T5U1N3$8.46 -2.03"V"1720"DI"1272"SCTSX" M1W4 RAND(-8.95 NEXT 3.89-8.08 A7F1(-7.05 C5T9P4 0.85 1580 + 1244 NEXT LIST "JJMFYCR"9.98',0
>8daf	20 54 35 55 31 4e 33 24 38 2e 34 36 20 2d 32 2e
>8dbf	30 33 22 56 22 31 37 32 30 22 44 49 22 31 32 37
>8dcf	32 22 53 43 54 53 58 22 20 4d 31 57 34 20 52 41
>8ddf	4e 44 28 2d 38 2e 39 35 20 4e 45 58 54 20 33 2e
>8def	38 39 2d 38 2e 30 38 20 41 37 46 31 28 2d 37 2e
>8dff	30 35 20 43 35 54 39 50 34 20 30 2e 38 35 20 31
>8e0f	35 38 30 20 2b 20 31 32 34 34 20 4e 45 58 54 20
>8e1f	4c 49 53 54 20 22 4a 4a 4d 46 59 43 52 22 39 2e
>8e2f	39 38 00
.8e32					Line88:
>8e32	33 30 36 00				.text '306',0
.8e36					Line89:
>8e36	31 37 32 30 20 20 4d 31			.text '1720  M1W4= "LJFMY"/978 0.47 ; 9.38 -1.68 754"AWC"',0
>8e3e	57 34 3d 20 22 4c 4a 46 4d 59 22 2f 39 37 38 20
>8e4e	30 2e 34 37 20 3b 20 39 2e 33 38 20 2d 31 2e 36
>8e5e	38 20 37 35 34 22 41 57 43 22 00
.8e69					Line90:
>8e69	31 30 30 36 00				.text '1006',0
.8e6e					Line91:
>8e6e	37 31 32 20 30 2e 35 32			.text '712 0.52 -0.92 7.1 J$"Q""IYWRJIS" -3.13 -7.68)"CB@KOSDQ" V2( S6K9M1$ VAL("GFUZ"1370 362 1398 8.38-2.28',0
>8e76	20 2d 30 2e 39 32 20 37 2e 31 20 4a 24 22 51 22
>8e86	22 49 59 57 52 4a 49 53 22 20 2d 33 2e 31 33 20
>8e96	2d 37 2e 36 38 29 22 43 42 40 4b 4f 53 44 51 22
>8ea6	20 56 32 28 20 53 36 4b 39 4d 31 24 20 56 41 4c
>8eb6	28 22 47 46 55 5a 22 31 33 37 30 20 33 36 32 20
>8ec6	31 33 39 38 20 38 2e 33 38 2d 32 2e 32 38 00
.8ed5					Line92:
>8ed5	31 32 30 32 20 20 22 51			.text '1202  "QHUUJ"<*>"NAAWE@" 5.69<-3.42=1580 1692 ENDPROC -0.57=G( 1314 L5T$ UNTIL 6.23 768 SAVE DEC(-6.82 530',0
>8edd	48 55 55 4a 22 3c 2a 3e 22 4e 41 41 57 45 40 22
>8eed	20 35 2e 36 39 3c 2d 33 2e 34 32 3d 31 35 38 30
>8efd	20 31 36 39 32 20 45 4e 44 50 52 4f 43 20 2d 30
>8f0d	2e 35 37 3d 47 28 20 31 33 31 34 20 4c 35 54 24
>8f1d	20 55 4e 54 49 4c 20 36 2e 32 33 20 37 36 38 20
>8f2d	53 41 56 45 20 44 45 43 28 2d 36 2e 38 32 20 35
>8f3d	33 30 00
.8f40					Line93:
>8f40	31 31 37 34 20 22 51 22			.text '1174 "Q" /T5(740 334 3.16 T3R4-6.85 U0 1328-1.82 < P1V0-4.81 FRAC( 1090 586"OB@OA"',0
>8f48	20 2f 54 35 28 37 34 30 20 33 33 34 20 33 2e 31
>8f58	36 20 54 33 52 34 2d 36 2e 38 35 20 55 30 20 31
>8f68	33 32 38 2d 31 2e 38 32 20 3c 20 50 31 56 30 2d
>8f78	34 2e 38 31 20 46 52 41 43 28 20 31 30 39 30 20
>8f88	35 38 36 22 4f 42 40 4f 41 22 00
.8f93					Line94:
>8f93	31 36 32 32 20 20 31 36			.text '1622  1692 D0X3"RWBRICM"6.04/(4.27-9.87= 5.95',0
>8f9b	39 32 20 44 30 58 33 22 52 57 42 52 49 43 4d 22
>8fab	36 2e 30 34 2f 28 34 2e 32 37 2d 39 2e 38 37 3d
>8fbb	20 35 2e 39 35 00
.8fc1					Line95:
>8fc1	31 33 38 34 20 20 54 38			.text '1384  T8L7 Z7 9.66=ASC("GKYRHFYJ"1062-9.26 "LETY"O0$ 1104-3.62"UOBE""RFNCAS"L8X( 2.44 EVENT(*READ D0X3 DO=) P3 R9T6 1580 HEX$( -0.91',0
>8fc9	4c 37 20 5a 37 20 39 2e 36 36 3d 41 53 43 28 22
>8fd9	47 4b 59 52 48 46 59 4a 22 31 30 36 32 2d 39 2e
>8fe9	32 36 20 22 4c 45 54 59 22 4f 30 24 20 31 31 30
>8ff9	34 2d 33 2e 36 32 22 55 4f 42 45 22 22 52 46 4e
>9009	43 41 53 22 4c 38 58 28 20 32 2e 34 34 20 45 56
>9019	45 4e 54 28 2a 52 45 41 44 20 44 30 58 33 20 44
>9029	4f 3d 29 20 50 33 20 52 39 54 36 20 31 35 38 30
>9039	20 48 45 58 24 28 20 2d 30 2e 39 31 00
.9046					Line96:
>9046	33 39 30 20 22 42 54 48			.text '390 "BTHGF" "RRUXR"',0
>904e	47 46 22 20 22 52 52 55 58 52 22 00
.905a					Line97:
>905a	31 32 38 36 20 20 47 39			.text '1286  G9I5 S1F$"OXJVVGY"7.34 1188 950-4.8 ;502 1440+"OIW"D5M1V4(B7 PROC CHR$(1426 LEFT$(< T3V4O DATA"VDUNT" LOOP',0
>9062	49 35 20 53 31 46 24 22 4f 58 4a 56 56 47 59 22
>9072	37 2e 33 34 20 31 31 38 38 20 39 35 30 2d 34 2e
>9082	38 20 3b 35 30 32 20 31 34 34 30 2b 22 4f 49 57
>9092	22 44 35 4d 31 56 34 28 42 37 20 50 52 4f 43 20
>90a2	43 48 52 24 28 31 34 32 36 20 4c 45 46 54 24 28
>90b2	3c 20 54 33 56 34 4f 20 44 41 54 41 22 56 44 55
>90c2	4e 54 22 20 4c 4f 4f 50 00
.90cb					Line98:
>90cb	33 36 32 20 35 2e 37 32			.text '362 5.72"JHSCMK""WMJFX""@@OIULS"-4.56 1762 >D8S5L "JWLJF"=N6J8X8 "MAMPS" 6.86 DATA "D@R"< Q4W1$) DOKE 9.31 N6J8X8*1846 X6-+',0
>90d3	22 4a 48 53 43 4d 4b 22 22 57 4d 4a 46 58 22 22
>90e3	40 40 4f 49 55 4c 53 22 2d 34 2e 35 36 20 31 37
>90f3	36 32 20 3e 44 38 53 35 4c 20 22 4a 57 4c 4a 46
>9103	22 3d 4e 36 4a 38 58 38 20 22 4d 41 4d 50 53 22
>9113	20 36 2e 38 36 20 44 41 54 41 20 22 44 40 52 22
>9123	3c 20 51 34 57 31 24 29 20 44 4f 4b 45 20 39 2e
>9133	33 31 20 4e 36 4a 38 58 38 2a 31 38 34 36 20 58
>9143	36 2d 2b 00
.9147					Line99:
>9147	37 32 36 20 20 39 39 32			.text '726  992 TO"X"',0
>914f	20 54 4f 22 58 22 00
.9156					Line100:
>9156	36 38 34 20 31 2e 31 37			.text '684 1.17 9.71"QQ" PRINT O$-0.56 U6E8 ENDIF 1538',0
>915e	20 39 2e 37 31 22 51 51 22 20 50 52 49 4e 54 20
>916e	4f 24 2d 30 2e 35 36 20 55 36 45 38 20 45 4e 44
>917e	49 46 20 31 35 33 38 00
.9186					Line101:
>9186	31 33 35 36 20 2d 30 2e			.text '1356 -0.16 B6B7V(CLEAR S8L1G9(< 754 -6.77-7.78 1748 LOAD ="P@DDHWOK"-4.32 "ROEXOAJT"/1.63 <>RETURN(-8.8 194',0
>918e	31 36 20 42 36 42 37 56 28 43 4c 45 41 52 20 53
>919e	38 4c 31 47 39 28 3c 20 37 35 34 20 2d 36 2e 37
>91ae	37 2d 37 2e 37 38 20 31 37 34 38 20 4c 4f 41 44
>91be	20 3d 22 50 40 44 44 48 57 4f 4b 22 2d 34 2e 33
>91ce	32 20 22 52 4f 45 58 4f 41 4a 54 22 2f 31 2e 36
>91de	33 20 3c 3e 52 45 54 55 52 4e 28 2d 38 2e 38 20
>91ee	31 39 34 00
.91f2					Line102:
>91f2	31 36 30 38 20 52 36 20			.text '1608 R6 T3R4 TO U6E8(-',0
>91fa	54 33 52 34 20 54 4f 20 55 36 45 38 28 2d 00
.9209					Line103:
>9209	39 39 32 20 3e 50 45 45			.text '992 >PEEK(',0
>9211	4b 28 00
.9214					Line104:
>9214	31 36 33 36 20 31 2e 37			.text '1636 1.72 1412 DATA 5.62 306 RUN"UACPAOPY"TO M9Q6 1664 5.2 ENDPROC 460"YMTJJR"G(',0
>921c	32 20 31 34 31 32 20 44 41 54 41 20 35 2e 36 32
>922c	20 33 30 36 20 52 55 4e 22 55 41 43 50 41 4f 50
>923c	59 22 54 4f 20 4d 39 51 36 20 31 36 36 34 20 35
>924c	2e 32 20 45 4e 44 50 52 4f 43 20 34 36 30 22 59
>925c	4d 54 4a 4a 52 22 47 28 00
.9265					Line105:
>9265	31 31 36 30 20 31 30 34			.text '1160 1048* <ENDIF EVENT(4.6 STOP-6.87("JYCQEZMH" C1 390<>J4N1 6.33""1790 J$ T3R4 6.25 1.31"HUZSEP""ZUAGPCW"-- F',0
>926d	38 2a 20 3c 45 4e 44 49 46 20 45 56 45 4e 54 28
>927d	34 2e 36 20 53 54 4f 50 2d 36 2e 38 37 28 22 4a
>928d	59 43 51 45 5a 4d 48 22 20 43 31 20 33 39 30 3c
>929d	3e 4a 34 4e 31 20 36 2e 33 33 22 22 31 37 39 30
>92ad	20 4a 24 20 54 33 52 34 20 36 2e 32 35 20 31 2e
>92bd	33 31 22 48 55 5a 53 45 50 22 22 5a 55 41 47 50
>92cd	43 57 22 2d 2d 20 46 00
.92d5					Line106:
>92d5	31 38 31 38 00				.text '1818',0
.92da					Line107:
>92da	31 34 34 30 00				.text '1440',0
.92df					Line108:
>92df	38 32 34 20 33 36 32 20			.text '824 362 C7W(',0
>92e7	43 37 57 28 00
.92ec					Line109:
>92ec	31 34 31 32 20 36 39 38			.text '1412 698 600 L9U("BU"N4V4("NBGZA"M1W4 0.85 1.99 0.02',0
>92f4	20 36 30 30 20 4c 39 55 28 22 42 55 22 4e 34 56
>9304	34 28 22 4e 42 47 5a 41 22 4d 31 57 34 20 30 2e
>9314	38 35 20 31 2e 39 39 20 30 2e 30 32 00
.9321					Line110:
>9321	35 38 36 20 20 2b 20 2d			.text '586  + -4.88 N9$RESTORE 796 >6.16 ASSERT "BZVS"3.07 1132 *1804 838 B6B7V( 642"XQIWAM" DIM)( "NK""BOFI"/ CLEAR>8.88>',0
>9329	34 2e 38 38 20 4e 39 24 52 45 53 54 4f 52 45 20
>9339	37 39 36 20 3e 36 2e 31 36 20 41 53 53 45 52 54
>9349	20 22 42 5a 56 53 22 33 2e 30 37 20 31 31 33 32
>9359	20 2a 31 38 30 34 20 38 33 38 20 42 36 42 37 56
>9369	28 20 36 34 32 22 58 51 49 57 41 4d 22 20 44 49
>9379	4d 29 28 20 22 4e 4b 22 22 42 4f 46 49 22 2f 20
>9389	43 4c 45 41 52 3e 38 2e 38 38 3e 00
.9395					Line111:
>9395	31 38 33 32 20 22 47 45			.text '1832 "GEBAXXR"<',0
>939d	42 41 58 58 52 22 3c 00
.93a5					Line112:
>93a5	31 37 36 32 20 39 2e 32			.text '1762 9.24 T9L4 + >-5.74 H5K2 1244>> +SGN(F9U6V0 )"I"*K0F8J"BAXYSV"894 --5.85-K5U2Y 1370 "T@O" "TQRRXAZU"4.14 <',0
>93ad	34 20 54 39 4c 34 20 2b 20 3e 2d 35 2e 37 34 20
>93bd	48 35 4b 32 20 31 32 34 34 3e 3e 20 2b 53 47 4e
>93cd	28 46 39 55 36 56 30 20 29 22 49 22 2a 4b 30 46
>93dd	38 4a 22 42 41 58 59 53 56 22 38 39 34 20 2d 2d
>93ed	35 2e 38 35 2d 4b 35 55 32 59 20 31 33 37 30 20
>93fd	22 54 40 4f 22 20 22 54 51 52 52 58 41 5a 55 22
>940d	34 2e 31 34 20 3c 00
.9414					Line113:
>9414	31 31 34 36 20 53 31 46			.text '1146 S1F$ EVENT(+"NBG"T DO=S8D4>"YGRAU"698 7.27 U8V6E = 852 6.2 DOKE J$ "" M9Q6 1552"VBSOX"H 1.76 "GTWX"><=-6.75 3.27 9.53',0
>941c	24 20 45 56 45 4e 54 28 2b 22 4e 42 47 22 54 20
>942c	44 4f 3d 53 38 44 34 3e 22 59 47 52 41 55 22 36
>943c	39 38 20 37 2e 32 37 20 55 38 56 36 45 20 3d 20
>944c	38 35 32 20 36 2e 32 20 44 4f 4b 45 20 4a 24 20
>945c	22 22 20 4d 39 51 36 20 31 35 35 32 22 56 42 53
>946c	4f 58 22 48 20 31 2e 37 36 20 22 47 54 57 58 22
>947c	3e 3c 3d 2d 36 2e 37 35 20 33 2e 32 37 20 39 2e
>948c	35 33 00
.948f					Line114:
>948f	34 36 30 20 22 54 22 20			.text '460 "T" 7.82 3.28-1.02 "KVBO"1286 474 L8X(950-7.27 1440 =J1( DIM 1.47 1.54 PRINT-2.03 -1.21/) "KCEBOW";"KUICU"',0
>9497	37 2e 38 32 20 33 2e 32 38 2d 31 2e 30 32 20 22
>94a7	4b 56 42 4f 22 31 32 38 36 20 34 37 34 20 4c 38
>94b7	58 28 39 35 30 2d 37 2e 32 37 20 31 34 34 30 20
>94c7	3d 4a 31 28 20 44 49 4d 20 31 2e 34 37 20 31 2e
>94d7	35 34 20 50 52 49 4e 54 2d 32 2e 30 33 20 2d 31
>94e7	2e 32 31 2f 29 20 22 4b 43 45 42 4f 57 22 3b 22
>94f7	4b 55 49 43 55 22 00
.94fe					Line115:
>94fe	31 38 31 38 20 20 3c 45			.text '1818  <EVENT(T5( V5"F" <418"" M1W4 -7.32-5.45"GT@SBJSD"1706',0
>9506	56 45 4e 54 28 54 35 28 20 56 35 22 46 22 20 3c
>9516	34 31 38 22 22 20 4d 31 57 34 20 2d 37 2e 33 32
>9526	2d 35 2e 34 35 22 47 54 40 53 42 4a 53 44 22 31
>9536	37 30 36 00
.953a					Line116:
>953a	37 38 32 20 20 35 33 30			.text '782  530 642 796 O0P3L4"ORHHRMA"D8S5L',0
>9542	20 36 34 32 20 37 39 36 20 4f 30 50 33 4c 34 22
>9552	4f 52 48 48 52 4d 41 22 44 38 53 35 4c 00
.9560					Line117:
>9560	36 37 30 20 37 2e 33 31			.text '670 7.31 V2X4H 4.39 362 L8 1580*362=(-2.88 "SJJLPJUW" C7W("S" "TADCU@CE" <L8X(782="YXP"712 M4 208',0
>9568	20 56 32 58 34 48 20 34 2e 33 39 20 33 36 32 20
>9578	4c 38 20 31 35 38 30 2a 33 36 32 3d 28 2d 32 2e
>9588	38 38 20 22 53 4a 4a 4c 50 4a 55 57 22 20 43 37
>9598	57 28 22 53 22 20 22 54 41 44 43 55 40 43 45 22
>95a8	20 3c 4c 38 58 28 37 38 32 3d 22 59 58 50 22 37
>95b8	31 32 20 4d 34 20 32 30 38 00
.95c2					Line118:
>95c2	35 35 38 00				.text '558',0
.95c6					Line119:
>95c6	34 34 36 20 20 2d 31 2e			.text '446  -1.98,TO 1104 ( 824 -5.44 ELSE""* -4.4 404 4.93-9.59) "QJBDRPD"1426 1426 T8L7',0
>95ce	39 38 2c 54 4f 20 31 31 30 34 20 28 20 38 32 34
>95de	20 2d 35 2e 34 34 20 45 4c 53 45 22 22 2a 20 2d
>95ee	34 2e 34 20 34 30 34 20 34 2e 39 33 2d 39 2e 35
>95fe	39 29 20 22 51 4a 42 44 52 50 44 22 31 34 32 36
>960e	20 31 34 32 36 20 54 38 4c 37 00

;******  Return to file: src/program/testing/testing.asmx

.9619					TestCode:
.9619	20 50 1f	jsr $1f50			jsr 	PGMNewProgram
.961c	9c ff ff	stz $ffff			stz 	$FFFF

;******  Processing file: src/program/testing/testrun.incx

.961f	a2 00		ldx #$00		ldx #Line0 & $FF
.9621	a0 78		ldy #$78		ldy #Line0 >> 8
.9623	20 6a 99	jsr $996a		jsr TOKOneLine
.9626	a2 36		ldx #$36		ldx #Line1 & $FF
.9628	a0 78		ldy #$78		ldy #Line1 >> 8
.962a	20 6a 99	jsr $996a		jsr TOKOneLine
.962d	a2 7e		ldx #$7e		ldx #Line2 & $FF
.962f	a0 78		ldy #$78		ldy #Line2 >> 8
.9631	20 6a 99	jsr $996a		jsr TOKOneLine
.9634	a2 ff		ldx #$ff		ldx #Line3 & $FF
.9636	a0 78		ldy #$78		ldy #Line3 >> 8
.9638	20 6a 99	jsr $996a		jsr TOKOneLine
.963b	a2 1b		ldx #$1b		ldx #Line4 & $FF
.963d	a0 79		ldy #$79		ldy #Line4 >> 8
.963f	20 6a 99	jsr $996a		jsr TOKOneLine
.9642	a2 75		ldx #$75		ldx #Line5 & $FF
.9644	a0 79		ldy #$79		ldy #Line5 >> 8
.9646	20 6a 99	jsr $996a		jsr TOKOneLine
.9649	a2 bb		ldx #$bb		ldx #Line6 & $FF
.964b	a0 79		ldy #$79		ldy #Line6 >> 8
.964d	20 6a 99	jsr $996a		jsr TOKOneLine
.9650	a2 c9		ldx #$c9		ldx #Line7 & $FF
.9652	a0 79		ldy #$79		ldy #Line7 >> 8
.9654	20 6a 99	jsr $996a		jsr TOKOneLine
.9657	a2 cd		ldx #$cd		ldx #Line8 & $FF
.9659	a0 79		ldy #$79		ldy #Line8 >> 8
.965b	20 6a 99	jsr $996a		jsr TOKOneLine
.965e	a2 f1		ldx #$f1		ldx #Line9 & $FF
.9660	a0 79		ldy #$79		ldy #Line9 >> 8
.9662	20 6a 99	jsr $996a		jsr TOKOneLine
.9665	a2 6b		ldx #$6b		ldx #Line10 & $FF
.9667	a0 7a		ldy #$7a		ldy #Line10 >> 8
.9669	20 6a 99	jsr $996a		jsr TOKOneLine
.966c	a2 8b		ldx #$8b		ldx #Line11 & $FF
.966e	a0 7a		ldy #$7a		ldy #Line11 >> 8
.9670	20 6a 99	jsr $996a		jsr TOKOneLine
.9673	a2 28		ldx #$28		ldx #Line12 & $FF
.9675	a0 7b		ldy #$7b		ldy #Line12 >> 8
.9677	20 6a 99	jsr $996a		jsr TOKOneLine
.967a	a2 57		ldx #$57		ldx #Line13 & $FF
.967c	a0 7b		ldy #$7b		ldy #Line13 >> 8
.967e	20 6a 99	jsr $996a		jsr TOKOneLine
.9681	a2 60		ldx #$60		ldx #Line14 & $FF
.9683	a0 7b		ldy #$7b		ldy #Line14 >> 8
.9685	20 6a 99	jsr $996a		jsr TOKOneLine
.9688	a2 dc		ldx #$dc		ldx #Line15 & $FF
.968a	a0 7b		ldy #$7b		ldy #Line15 >> 8
.968c	20 6a 99	jsr $996a		jsr TOKOneLine
.968f	a2 0e		ldx #$0e		ldx #Line16 & $FF
.9691	a0 7c		ldy #$7c		ldy #Line16 >> 8
.9693	20 6a 99	jsr $996a		jsr TOKOneLine
.9696	a2 35		ldx #$35		ldx #Line17 & $FF
.9698	a0 7c		ldy #$7c		ldy #Line17 >> 8
.969a	20 6a 99	jsr $996a		jsr TOKOneLine
.969d	a2 6f		ldx #$6f		ldx #Line18 & $FF
.969f	a0 7c		ldy #$7c		ldy #Line18 >> 8
.96a1	20 6a 99	jsr $996a		jsr TOKOneLine
.96a4	a2 ae		ldx #$ae		ldx #Line19 & $FF
.96a6	a0 7c		ldy #$7c		ldy #Line19 >> 8
.96a8	20 6a 99	jsr $996a		jsr TOKOneLine
.96ab	a2 b3		ldx #$b3		ldx #Line20 & $FF
.96ad	a0 7c		ldy #$7c		ldy #Line20 >> 8
.96af	20 6a 99	jsr $996a		jsr TOKOneLine
.96b2	a2 b7		ldx #$b7		ldx #Line21 & $FF
.96b4	a0 7c		ldy #$7c		ldy #Line21 >> 8
.96b6	20 6a 99	jsr $996a		jsr TOKOneLine
.96b9	a2 dc		ldx #$dc		ldx #Line22 & $FF
.96bb	a0 7c		ldy #$7c		ldy #Line22 >> 8
.96bd	20 6a 99	jsr $996a		jsr TOKOneLine
.96c0	a2 58		ldx #$58		ldx #Line23 & $FF
.96c2	a0 7d		ldy #$7d		ldy #Line23 >> 8
.96c4	20 6a 99	jsr $996a		jsr TOKOneLine
.96c7	a2 cf		ldx #$cf		ldx #Line24 & $FF
.96c9	a0 7d		ldy #$7d		ldy #Line24 >> 8
.96cb	20 6a 99	jsr $996a		jsr TOKOneLine
.96ce	a2 d7		ldx #$d7		ldx #Line25 & $FF
.96d0	a0 7d		ldy #$7d		ldy #Line25 >> 8
.96d2	20 6a 99	jsr $996a		jsr TOKOneLine
.96d5	a2 22		ldx #$22		ldx #Line26 & $FF
.96d7	a0 7e		ldy #$7e		ldy #Line26 >> 8
.96d9	20 6a 99	jsr $996a		jsr TOKOneLine
.96dc	a2 82		ldx #$82		ldx #Line27 & $FF
.96de	a0 7e		ldy #$7e		ldy #Line27 >> 8
.96e0	20 6a 99	jsr $996a		jsr TOKOneLine
.96e3	a2 87		ldx #$87		ldx #Line28 & $FF
.96e5	a0 7e		ldy #$7e		ldy #Line28 >> 8
.96e7	20 6a 99	jsr $996a		jsr TOKOneLine
.96ea	a2 b6		ldx #$b6		ldx #Line29 & $FF
.96ec	a0 7e		ldy #$7e		ldy #Line29 >> 8
.96ee	20 6a 99	jsr $996a		jsr TOKOneLine
.96f1	a2 f4		ldx #$f4		ldx #Line30 & $FF
.96f3	a0 7e		ldy #$7e		ldy #Line30 >> 8
.96f5	20 6a 99	jsr $996a		jsr TOKOneLine
.96f8	a2 f9		ldx #$f9		ldx #Line31 & $FF
.96fa	a0 7e		ldy #$7e		ldy #Line31 >> 8
.96fc	20 6a 99	jsr $996a		jsr TOKOneLine
.96ff	a2 12		ldx #$12		ldx #Line32 & $FF
.9701	a0 7f		ldy #$7f		ldy #Line32 >> 8
.9703	20 6a 99	jsr $996a		jsr TOKOneLine
.9706	a2 4f		ldx #$4f		ldx #Line33 & $FF
.9708	a0 7f		ldy #$7f		ldy #Line33 >> 8
.970a	20 6a 99	jsr $996a		jsr TOKOneLine
.970d	a2 ae		ldx #$ae		ldx #Line34 & $FF
.970f	a0 7f		ldy #$7f		ldy #Line34 >> 8
.9711	20 6a 99	jsr $996a		jsr TOKOneLine
.9714	a2 b2		ldx #$b2		ldx #Line35 & $FF
.9716	a0 7f		ldy #$7f		ldy #Line35 >> 8
.9718	20 6a 99	jsr $996a		jsr TOKOneLine
.971b	a2 b7		ldx #$b7		ldx #Line36 & $FF
.971d	a0 7f		ldy #$7f		ldy #Line36 >> 8
.971f	20 6a 99	jsr $996a		jsr TOKOneLine
.9722	a2 cc		ldx #$cc		ldx #Line37 & $FF
.9724	a0 7f		ldy #$7f		ldy #Line37 >> 8
.9726	20 6a 99	jsr $996a		jsr TOKOneLine
.9729	a2 1c		ldx #$1c		ldx #Line38 & $FF
.972b	a0 80		ldy #$80		ldy #Line38 >> 8
.972d	20 6a 99	jsr $996a		jsr TOKOneLine
.9730	a2 6d		ldx #$6d		ldx #Line39 & $FF
.9732	a0 80		ldy #$80		ldy #Line39 >> 8
.9734	20 6a 99	jsr $996a		jsr TOKOneLine
.9737	a2 9e		ldx #$9e		ldx #Line40 & $FF
.9739	a0 80		ldy #$80		ldy #Line40 >> 8
.973b	20 6a 99	jsr $996a		jsr TOKOneLine
.973e	a2 0d		ldx #$0d		ldx #Line41 & $FF
.9740	a0 81		ldy #$81		ldy #Line41 >> 8
.9742	20 6a 99	jsr $996a		jsr TOKOneLine
.9745	a2 6a		ldx #$6a		ldx #Line42 & $FF
.9747	a0 81		ldy #$81		ldy #Line42 >> 8
.9749	20 6a 99	jsr $996a		jsr TOKOneLine
.974c	a2 77		ldx #$77		ldx #Line43 & $FF
.974e	a0 81		ldy #$81		ldy #Line43 >> 8
.9750	20 6a 99	jsr $996a		jsr TOKOneLine
.9753	a2 90		ldx #$90		ldx #Line44 & $FF
.9755	a0 81		ldy #$81		ldy #Line44 >> 8
.9757	20 6a 99	jsr $996a		jsr TOKOneLine
.975a	a2 18		ldx #$18		ldx #Line45 & $FF
.975c	a0 82		ldy #$82		ldy #Line45 >> 8
.975e	20 6a 99	jsr $996a		jsr TOKOneLine
.9761	a2 74		ldx #$74		ldx #Line46 & $FF
.9763	a0 82		ldy #$82		ldy #Line46 >> 8
.9765	20 6a 99	jsr $996a		jsr TOKOneLine
.9768	a2 78		ldx #$78		ldx #Line47 & $FF
.976a	a0 82		ldy #$82		ldy #Line47 >> 8
.976c	20 6a 99	jsr $996a		jsr TOKOneLine
.976f	a2 e7		ldx #$e7		ldx #Line48 & $FF
.9771	a0 82		ldy #$82		ldy #Line48 >> 8
.9773	20 6a 99	jsr $996a		jsr TOKOneLine
.9776	a2 fb		ldx #$fb		ldx #Line49 & $FF
.9778	a0 82		ldy #$82		ldy #Line49 >> 8
.977a	20 6a 99	jsr $996a		jsr TOKOneLine
.977d	a2 45		ldx #$45		ldx #Line50 & $FF
.977f	a0 83		ldy #$83		ldy #Line50 >> 8
.9781	20 6a 99	jsr $996a		jsr TOKOneLine
.9784	a2 c5		ldx #$c5		ldx #Line51 & $FF
.9786	a0 83		ldy #$83		ldy #Line51 >> 8
.9788	20 6a 99	jsr $996a		jsr TOKOneLine
.978b	a2 19		ldx #$19		ldx #Line52 & $FF
.978d	a0 84		ldy #$84		ldy #Line52 >> 8
.978f	20 6a 99	jsr $996a		jsr TOKOneLine
.9792	a2 97		ldx #$97		ldx #Line53 & $FF
.9794	a0 84		ldy #$84		ldy #Line53 >> 8
.9796	20 6a 99	jsr $996a		jsr TOKOneLine
.9799	a2 d6		ldx #$d6		ldx #Line54 & $FF
.979b	a0 84		ldy #$84		ldy #Line54 >> 8
.979d	20 6a 99	jsr $996a		jsr TOKOneLine
.97a0	a2 db		ldx #$db		ldx #Line55 & $FF
.97a2	a0 84		ldy #$84		ldy #Line55 >> 8
.97a4	20 6a 99	jsr $996a		jsr TOKOneLine
.97a7	a2 25		ldx #$25		ldx #Line56 & $FF
.97a9	a0 85		ldy #$85		ldy #Line56 >> 8
.97ab	20 6a 99	jsr $996a		jsr TOKOneLine
.97ae	a2 6b		ldx #$6b		ldx #Line57 & $FF
.97b0	a0 85		ldy #$85		ldy #Line57 >> 8
.97b2	20 6a 99	jsr $996a		jsr TOKOneLine
.97b5	a2 bc		ldx #$bc		ldx #Line58 & $FF
.97b7	a0 85		ldy #$85		ldy #Line58 >> 8
.97b9	20 6a 99	jsr $996a		jsr TOKOneLine
.97bc	a2 27		ldx #$27		ldx #Line59 & $FF
.97be	a0 86		ldy #$86		ldy #Line59 >> 8
.97c0	20 6a 99	jsr $996a		jsr TOKOneLine
.97c3	a2 6b		ldx #$6b		ldx #Line60 & $FF
.97c5	a0 86		ldy #$86		ldy #Line60 >> 8
.97c7	20 6a 99	jsr $996a		jsr TOKOneLine
.97ca	a2 c1		ldx #$c1		ldx #Line61 & $FF
.97cc	a0 86		ldy #$86		ldy #Line61 >> 8
.97ce	20 6a 99	jsr $996a		jsr TOKOneLine
.97d1	a2 cd		ldx #$cd		ldx #Line62 & $FF
.97d3	a0 86		ldy #$86		ldy #Line62 >> 8
.97d5	20 6a 99	jsr $996a		jsr TOKOneLine
.97d8	a2 36		ldx #$36		ldx #Line63 & $FF
.97da	a0 87		ldy #$87		ldy #Line63 >> 8
.97dc	20 6a 99	jsr $996a		jsr TOKOneLine
.97df	a2 ae		ldx #$ae		ldx #Line64 & $FF
.97e1	a0 87		ldy #$87		ldy #Line64 >> 8
.97e3	20 6a 99	jsr $996a		jsr TOKOneLine
.97e6	a2 37		ldx #$37		ldx #Line65 & $FF
.97e8	a0 88		ldy #$88		ldy #Line65 >> 8
.97ea	20 6a 99	jsr $996a		jsr TOKOneLine
.97ed	a2 69		ldx #$69		ldx #Line66 & $FF
.97ef	a0 88		ldy #$88		ldy #Line66 >> 8
.97f1	20 6a 99	jsr $996a		jsr TOKOneLine
.97f4	a2 7e		ldx #$7e		ldx #Line67 & $FF
.97f6	a0 88		ldy #$88		ldy #Line67 >> 8
.97f8	20 6a 99	jsr $996a		jsr TOKOneLine
.97fb	a2 be		ldx #$be		ldx #Line68 & $FF
.97fd	a0 88		ldy #$88		ldy #Line68 >> 8
.97ff	20 6a 99	jsr $996a		jsr TOKOneLine
.9802	a2 55		ldx #$55		ldx #Line69 & $FF
.9804	a0 89		ldy #$89		ldy #Line69 >> 8
.9806	20 6a 99	jsr $996a		jsr TOKOneLine
.9809	a2 e6		ldx #$e6		ldx #Line70 & $FF
.980b	a0 89		ldy #$89		ldy #Line70 >> 8
.980d	20 6a 99	jsr $996a		jsr TOKOneLine
.9810	a2 ee		ldx #$ee		ldx #Line71 & $FF
.9812	a0 89		ldy #$89		ldy #Line71 >> 8
.9814	20 6a 99	jsr $996a		jsr TOKOneLine
.9817	a2 f3		ldx #$f3		ldx #Line72 & $FF
.9819	a0 89		ldy #$89		ldy #Line72 >> 8
.981b	20 6a 99	jsr $996a		jsr TOKOneLine
.981e	a2 16		ldx #$16		ldx #Line73 & $FF
.9820	a0 8a		ldy #$8a		ldy #Line73 >> 8
.9822	20 6a 99	jsr $996a		jsr TOKOneLine
.9825	a2 1a		ldx #$1a		ldx #Line74 & $FF
.9827	a0 8a		ldy #$8a		ldy #Line74 >> 8
.9829	20 6a 99	jsr $996a		jsr TOKOneLine
.982c	a2 24		ldx #$24		ldx #Line75 & $FF
.982e	a0 8a		ldy #$8a		ldy #Line75 >> 8
.9830	20 6a 99	jsr $996a		jsr TOKOneLine
.9833	a2 3a		ldx #$3a		ldx #Line76 & $FF
.9835	a0 8a		ldy #$8a		ldy #Line76 >> 8
.9837	20 6a 99	jsr $996a		jsr TOKOneLine
.983a	a2 79		ldx #$79		ldx #Line77 & $FF
.983c	a0 8a		ldy #$8a		ldy #Line77 >> 8
.983e	20 6a 99	jsr $996a		jsr TOKOneLine
.9841	a2 f6		ldx #$f6		ldx #Line78 & $FF
.9843	a0 8a		ldy #$8a		ldy #Line78 >> 8
.9845	20 6a 99	jsr $996a		jsr TOKOneLine
.9848	a2 3f		ldx #$3f		ldx #Line79 & $FF
.984a	a0 8b		ldy #$8b		ldy #Line79 >> 8
.984c	20 6a 99	jsr $996a		jsr TOKOneLine
.984f	a2 6a		ldx #$6a		ldx #Line80 & $FF
.9851	a0 8b		ldy #$8b		ldy #Line80 >> 8
.9853	20 6a 99	jsr $996a		jsr TOKOneLine
.9856	a2 d2		ldx #$d2		ldx #Line81 & $FF
.9858	a0 8b		ldy #$8b		ldy #Line81 >> 8
.985a	20 6a 99	jsr $996a		jsr TOKOneLine
.985d	a2 00		ldx #$00		ldx #Line82 & $FF
.985f	a0 8c		ldy #$8c		ldy #Line82 >> 8
.9861	20 6a 99	jsr $996a		jsr TOKOneLine
.9864	a2 77		ldx #$77		ldx #Line83 & $FF
.9866	a0 8c		ldy #$8c		ldy #Line83 >> 8
.9868	20 6a 99	jsr $996a		jsr TOKOneLine
.986b	a2 d6		ldx #$d6		ldx #Line84 & $FF
.986d	a0 8c		ldy #$8c		ldy #Line84 >> 8
.986f	20 6a 99	jsr $996a		jsr TOKOneLine
.9872	a2 0a		ldx #$0a		ldx #Line85 & $FF
.9874	a0 8d		ldy #$8d		ldy #Line85 >> 8
.9876	20 6a 99	jsr $996a		jsr TOKOneLine
.9879	a2 85		ldx #$85		ldx #Line86 & $FF
.987b	a0 8d		ldy #$8d		ldy #Line86 >> 8
.987d	20 6a 99	jsr $996a		jsr TOKOneLine
.9880	a2 a7		ldx #$a7		ldx #Line87 & $FF
.9882	a0 8d		ldy #$8d		ldy #Line87 >> 8
.9884	20 6a 99	jsr $996a		jsr TOKOneLine
.9887	a2 32		ldx #$32		ldx #Line88 & $FF
.9889	a0 8e		ldy #$8e		ldy #Line88 >> 8
.988b	20 6a 99	jsr $996a		jsr TOKOneLine
.988e	a2 36		ldx #$36		ldx #Line89 & $FF
.9890	a0 8e		ldy #$8e		ldy #Line89 >> 8
.9892	20 6a 99	jsr $996a		jsr TOKOneLine
.9895	a2 69		ldx #$69		ldx #Line90 & $FF
.9897	a0 8e		ldy #$8e		ldy #Line90 >> 8
.9899	20 6a 99	jsr $996a		jsr TOKOneLine
.989c	a2 6e		ldx #$6e		ldx #Line91 & $FF
.989e	a0 8e		ldy #$8e		ldy #Line91 >> 8
.98a0	20 6a 99	jsr $996a		jsr TOKOneLine
.98a3	a2 d5		ldx #$d5		ldx #Line92 & $FF
.98a5	a0 8e		ldy #$8e		ldy #Line92 >> 8
.98a7	20 6a 99	jsr $996a		jsr TOKOneLine
.98aa	a2 40		ldx #$40		ldx #Line93 & $FF
.98ac	a0 8f		ldy #$8f		ldy #Line93 >> 8
.98ae	20 6a 99	jsr $996a		jsr TOKOneLine
.98b1	a2 93		ldx #$93		ldx #Line94 & $FF
.98b3	a0 8f		ldy #$8f		ldy #Line94 >> 8
.98b5	20 6a 99	jsr $996a		jsr TOKOneLine
.98b8	a2 c1		ldx #$c1		ldx #Line95 & $FF
.98ba	a0 8f		ldy #$8f		ldy #Line95 >> 8
.98bc	20 6a 99	jsr $996a		jsr TOKOneLine
.98bf	a2 46		ldx #$46		ldx #Line96 & $FF
.98c1	a0 90		ldy #$90		ldy #Line96 >> 8
.98c3	20 6a 99	jsr $996a		jsr TOKOneLine
.98c6	a2 5a		ldx #$5a		ldx #Line97 & $FF
.98c8	a0 90		ldy #$90		ldy #Line97 >> 8
.98ca	20 6a 99	jsr $996a		jsr TOKOneLine
.98cd	a2 cb		ldx #$cb		ldx #Line98 & $FF
.98cf	a0 90		ldy #$90		ldy #Line98 >> 8
.98d1	20 6a 99	jsr $996a		jsr TOKOneLine
.98d4	a2 47		ldx #$47		ldx #Line99 & $FF
.98d6	a0 91		ldy #$91		ldy #Line99 >> 8
.98d8	20 6a 99	jsr $996a		jsr TOKOneLine
.98db	a2 56		ldx #$56		ldx #Line100 & $FF
.98dd	a0 91		ldy #$91		ldy #Line100 >> 8
.98df	20 6a 99	jsr $996a		jsr TOKOneLine
.98e2	a2 86		ldx #$86		ldx #Line101 & $FF
.98e4	a0 91		ldy #$91		ldy #Line101 >> 8
.98e6	20 6a 99	jsr $996a		jsr TOKOneLine
.98e9	a2 f2		ldx #$f2		ldx #Line102 & $FF
.98eb	a0 91		ldy #$91		ldy #Line102 >> 8
.98ed	20 6a 99	jsr $996a		jsr TOKOneLine
.98f0	a2 09		ldx #$09		ldx #Line103 & $FF
.98f2	a0 92		ldy #$92		ldy #Line103 >> 8
.98f4	20 6a 99	jsr $996a		jsr TOKOneLine
.98f7	a2 14		ldx #$14		ldx #Line104 & $FF
.98f9	a0 92		ldy #$92		ldy #Line104 >> 8
.98fb	20 6a 99	jsr $996a		jsr TOKOneLine
.98fe	a2 65		ldx #$65		ldx #Line105 & $FF
.9900	a0 92		ldy #$92		ldy #Line105 >> 8
.9902	20 6a 99	jsr $996a		jsr TOKOneLine
.9905	a2 d5		ldx #$d5		ldx #Line106 & $FF
.9907	a0 92		ldy #$92		ldy #Line106 >> 8
.9909	20 6a 99	jsr $996a		jsr TOKOneLine
.990c	a2 da		ldx #$da		ldx #Line107 & $FF
.990e	a0 92		ldy #$92		ldy #Line107 >> 8
.9910	20 6a 99	jsr $996a		jsr TOKOneLine
.9913	a2 df		ldx #$df		ldx #Line108 & $FF
.9915	a0 92		ldy #$92		ldy #Line108 >> 8
.9917	20 6a 99	jsr $996a		jsr TOKOneLine
.991a	a2 ec		ldx #$ec		ldx #Line109 & $FF
.991c	a0 92		ldy #$92		ldy #Line109 >> 8
.991e	20 6a 99	jsr $996a		jsr TOKOneLine
.9921	a2 21		ldx #$21		ldx #Line110 & $FF
.9923	a0 93		ldy #$93		ldy #Line110 >> 8
.9925	20 6a 99	jsr $996a		jsr TOKOneLine
.9928	a2 95		ldx #$95		ldx #Line111 & $FF
.992a	a0 93		ldy #$93		ldy #Line111 >> 8
.992c	20 6a 99	jsr $996a		jsr TOKOneLine
.992f	a2 a5		ldx #$a5		ldx #Line112 & $FF
.9931	a0 93		ldy #$93		ldy #Line112 >> 8
.9933	20 6a 99	jsr $996a		jsr TOKOneLine
.9936	a2 14		ldx #$14		ldx #Line113 & $FF
.9938	a0 94		ldy #$94		ldy #Line113 >> 8
.993a	20 6a 99	jsr $996a		jsr TOKOneLine
.993d	a2 8f		ldx #$8f		ldx #Line114 & $FF
.993f	a0 94		ldy #$94		ldy #Line114 >> 8
.9941	20 6a 99	jsr $996a		jsr TOKOneLine
.9944	a2 fe		ldx #$fe		ldx #Line115 & $FF
.9946	a0 94		ldy #$94		ldy #Line115 >> 8
.9948	20 6a 99	jsr $996a		jsr TOKOneLine
.994b	a2 3a		ldx #$3a		ldx #Line116 & $FF
.994d	a0 95		ldy #$95		ldy #Line116 >> 8
.994f	20 6a 99	jsr $996a		jsr TOKOneLine
.9952	a2 60		ldx #$60		ldx #Line117 & $FF
.9954	a0 95		ldy #$95		ldy #Line117 >> 8
.9956	20 6a 99	jsr $996a		jsr TOKOneLine
.9959	a2 c2		ldx #$c2		ldx #Line118 & $FF
.995b	a0 95		ldy #$95		ldy #Line118 >> 8
.995d	20 6a 99	jsr $996a		jsr TOKOneLine
.9960	a2 c6		ldx #$c6		ldx #Line119 & $FF
.9962	a0 95		ldy #$95		ldy #Line119 >> 8
.9964	20 6a 99	jsr $996a		jsr TOKOneLine

;******  Return to file: src/program/testing/testing.asmx

.9967	4c ff ff	jmp $ffff			jmp 	$FFFF
.996a					TOKOneLine:
.996a	86 26		stx $26				stx 	zTemp2
.996c	84 27		sty $27				sty 	zTemp2+1
.996e	a2 84		ldx #$84			ldx 	#TOKGetSource & $FF
.9970	a0 99		ldy #$99			ldy 	#TOKGetSource >> 8
.9972	38		sec				sec
.9973	20 ce 1f	jsr $1fce			jsr 	TOKTokenise
.9976	20 a9 1e	jsr $1ea9			jsr 	PGMDeleteLine
.9979	ad 00 04	lda $0400			lda 	TOKLineSize
.997c	c9 04		cmp #$04			cmp 	#4
.997e	f0 03		beq $9983			beq 	_TOKNoInsert
.9980	20 f3 1e	jsr $1ef3			jsr 	PGMInsertLine
.9983					_TOKNoInsert:
.9983	60		rts				rts
.9984					TOKGetSource:
.9984	b2 26		lda ($26)			lda 	(zTemp2)
.9986	90 06		bcc $998e			bcc 	_GSNoIncrement
.9988	e6 26		inc $26				inc 	zTemp2
.998a	d0 02		bne $998e			bne 	_GSNoIncrement
.998c	e6 27		inc $27				inc 	zTemp2+1
.998e					_GSNoIncrement:
.998e	c9 00		cmp #$00			cmp 	#0
.9990	60		rts				rts
.073a					SrcPosition:
>073a							.fill 		1

;******  Return to file: basic.asm


;******  End of listing
