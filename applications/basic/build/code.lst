
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Sun Jun  4 17:29:04 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=$6000					startMemory = $6000
=$a000					endMemory = $A000
=2					stackPages = 2

;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1
>0237							.fill 	32
>0257							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe5					OSGetScreenSize          = $ffe5 ; Get size of screen to XY
=$ffe8					OSIsKeyAvailable         = $ffe8 ; Check if key available (CS if so)
=$ffeb					OSReadKeystroke          = $ffeb ; Read A from keyboard, showing cursor while waiting.
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard (device 1), CC = success
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0), CC = success
=$fff4					OSReadDevice             = $fff4 ; Read device X to A, CC = success
=$fff7					OSWriteDevice            = $fff7 ; Write A to device X, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#startMemory >> 8
.1002	a0 a0		ldy #$a0			ldy 	#endMemory >> 8
.1004	20 d2 1c	jsr $1cd2			jsr 	PGMSetBaseAddress
.1007	20 02 27	jsr $2702			jsr 	IFInitialise
.100a	4c a4 12	jmp $12a4			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0300					TOKLineSize:
>0300							.fill 	1
.0301					TOKLineNumber:
>0301							.fill 	2
.0303					TOKBuffer:
>0303							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c e8 22	jmp $22e8		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 e5 1c	jsr $1ce5			jsr 	PGMEndProgram 				; end program => zTemp0
.101e	64 24		stz $24				stz 	freeMemory 					; start on next free page
.1020	a5 1f		lda $1f				lda 	zTemp0+1
.1022	1a		inc a				inc 	a
.1023	85 25		sta $25				sta 	freeMemory+1
.1025	20 a1 26	jsr $26a1			jsr 	VARClearHashTables
.1028	ad 10 04	lda $0410			lda 	PGMEndMemoryHigh
.102b	20 85 24	jsr $2485			jsr 	StackReset
.102e	20 e4 24	jsr $24e4			jsr 	StringSystemInitialise
.1031	20 04 22	jsr $2204			jsr 	ScanProcedures
.1034	60		rts				rts
.1035					AllocateMemory:
.1035	5a		phy				phy 								; save Y
.1036	a4 24		ldy $24				ldy 	freeMemory 					; save addr.low
.1038	5a		phy				phy
.1039	a4 25		ldy $25				ldy 	freeMemory+1 				; save addr.high
.103b	5a		phy				phy
.103c	a8		tay				tay 								; count is now in XY
.103d					_AllocateLoop:
.103d	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.103f	d0 04		bne $1045			bne 	_AllocateOne
.1041	c0 00		cpy #$00			cpy 	#0
.1043	f0 15		beq $105a			beq 	_AllocateExit
.1045					_AllocateOne:
.1045	a9 00		lda #$00			lda 	#0 							; zero byte
.1047	92 24		sta ($24)			sta 	(freeMemory)
.1049	e6 24		inc $24				inc 	freeMemory 					; bump pointer
.104b	d0 05		bne $1052			bne 	_AllocateSkipCarry
.104d	e6 25		inc $25				inc 	freeMemory+1
.104f	20 5e 10	jsr $105e			jsr 	ClearCheckMemory
.1052					_AllocateSkipCarry:
.1052	c0 00		cpy #$00			cpy 	#0 							; decrement XY
.1054	d0 01		bne $1057			bne 	_AllocateSkipBorrow
.1056	ca		dex				dex
.1057					_AllocateSkipBorrow:
.1057	88		dey				dey
.1058	80 e3		bra $103d			bra 	_AllocateLoop
.105a					_AllocateExit:
.105a	fa		plx				plx 								; restore address
.105b	68		pla				pla
.105c	7a		ply				ply 								; restore Y
.105d	60		rts				rts
.105e					ClearCheckMemory:
.105e	a5 25		lda $25				lda 	freeMemory+1
.1060	1a		inc a				inc 	a
.1061	1a		inc a				inc 	a
.1062	cd 18 05	cmp $0518			cmp 	stringMemory+1
.1065	b0 01		bcs $1068			bcs  	_CCMError
.1067	60		rts				rts
.1068					_CCMError:
.1068	4c 7a 23	jmp $237a		jmp	ErrorV_memory
.0024					freeMemory:
>0024							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.106b					CommandDIM:
.106b	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check identifier follows.
.106d	29 c0		and #$c0			and 	#$C0
.106f	c9 40		cmp #$40			cmp 	#$40
.1071	d0 39		bne $10ac			bne 	_CDSyntax
.1073	20 58 26	jsr $2658			jsr 	VARGetInfo 					; get information
.1076	ad 1e 05	lda $051e			lda 	VARType 					; check array.
.1079	29 02		and #$02			and 	#2
.107b	f0 2f		beq $10ac			beq 	_CDSyntax
.107d	20 0a 26	jsr $260a			jsr 	VARFind 					; does it already exist
.1080	b0 2d		bcs $10af			bcs 	_CDExists
.1082	20 b6 25	jsr $25b6			jsr 	VARCreate 					; create it - returns data ptr in XA
.1085	da		phx				phx 								; save target address
.1086	48		pha				pha
.1087	ad 1e 05	lda $051e			lda 	VARType 					; type ID.
.108a	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.108c	20 b2 10	jsr $10b2			jsr 	CreateArray 				; create array to XA
.108f	84 20		sty $20				sty 	zTemp1 						; save Y
.1091	7a		ply				ply 								; restore target to zTemp0
.1092	84 1e		sty $1e				sty 	zTemp0
.1094	7a		ply				ply
.1095	84 1f		sty $1f				sty 	zTemp0+1
.1097	92 1e		sta ($1e)			sta 	(zTemp0) 					; save new array
.1099	a0 01		ldy #$01			ldy 	#1
.109b	8a		txa				txa
.109c	91 1e		sta ($1e),y			sta 	(zTemp0),y
.109e	a4 20		ldy $20				ldy 	zTemp1 						; restore zTemp1
.10a0	20 16 24	jsr $2416			jsr 	ERRCheckRParen 				; check )
.10a3	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10a5	c8		iny				iny
.10a6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10a8	f0 c1		beq $106b			beq 	CommandDIM
.10aa	88		dey				dey
.10ab	60		rts				rts
.10ac					_CDSyntax:
.10ac	4c 97 22	jmp $2297		jmp	ErrorV_syntax
.10af					_CDExists:
.10af	4c 54 23	jmp $2354		jmp	ErrorV_redefine
.10b2					CreateArray:
.10b2	8d 03 04	sta $0403			sta 	CAType						; save type
.10b5	20 de 14	jsr $14de			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10b8	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10ba	c9 99		cmp #$99			cmp 	#PR_COMMA
.10bc	f0 04		beq $10c2			beq 	_CATwoDimensions
.10be	20 0e 11	jsr $110e			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10c1	60		rts				rts
.10c2					_CATwoDimensions:
.10c2	a5 0d		lda $0d				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10c4	8d 05 04	sta $0405			sta 	CADim1+1
.10c7	a5 0c		lda $0c				lda 	IFR0+IM0
.10c9	8d 04 04	sta $0404			sta 	CADim1+0
.10cc	20 1e 24	jsr $241e			jsr 	ERRCheckComma 				; check comma
.10cf	20 de 14	jsr $14de			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10d2	5a		phy				phy 								; save Y position
.10d3	18		clc				clc 								; allocate the outer array of pointers.
.10d4	ae 05 04	ldx $0405			ldx 	CADim1+1
.10d7	ad 04 04	lda $0404			lda 	CADim1
.10da	20 4d 11	jsr $114d			jsr 	CSAAllocate 				; allocate the outer array
.10dd	da		phx				phx									; save this address on the stack
.10de	48		pha				pha
.10df	86 23		stx $23				stx 	zTemp2+1					; and in zTemp2
.10e1	85 22		sta $22				sta 	zTemp2
.10e3					_CACreateSubLoop:
.10e3	38		sec				sec
.10e4	20 0e 11	jsr $110e			jsr 	CreateSingleArray 			; create data array of required size.
.10e7	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.10e9	91 22		sta ($22),y			sta 	(zTemp2),y
.10eb	8a		txa				txa
.10ec	c8		iny				iny
.10ed	91 22		sta ($22),y			sta 	(zTemp2),y
.10ef	18		clc				clc  								; next slot.
.10f0	a5 22		lda $22				lda 	zTemp2
.10f2	69 02		adc #$02			adc 	#2
.10f4	85 22		sta $22				sta 	zTemp2
.10f6	90 02		bcc $10fa			bcc 	_CACNoCarry
.10f8	e6 23		inc $23				inc 	zTemp2+1
.10fa					_CACNoCarry:
.10fa	ad 04 04	lda $0404			lda 	CADim1 						; use DIM1 as a counter
.10fd	d0 03		bne $1102			bne 	_CACNoBorrow
.10ff	ce 05 04	dec $0405			dec 	CADim1+1
.1102					_CACNoBorrow:
.1102	ce 04 04	dec $0404			dec 	CADim1
.1105	ad 05 04	lda $0405			lda 	CADim1+1 					; but do one more.
.1108	10 d9		bpl $10e3			bpl 	_CACreateSubLoop
.110a	68		pla				pla
.110b	fa		plx				plx
.110c	7a		ply				ply
.110d	60		rts				rts
.110e					CreateSingleArray:
.110e	5a		phy				phy
.110f	38		sec				sec 								; allocate memory block all zeros.
.1110	a5 0c		lda $0c				lda 	IFR0+IM0
.1112	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1114	20 4d 11	jsr $114d			jsr 	CSAAllocate
.1117	ac 03 04	ldy $0403			ldy 	CAType 						; if numbers, we don't need to initialise.
.111a	f0 2f		beq $114b			beq 	_CSANoInit
.111c	da		phx				phx 								; save address of new array
.111d	48		pha				pha
.111e	85 1e		sta $1e				sta 	zTemp0 						; address in zTemp0
.1120	86 1f		stx $1f				stx 	zTemp0+1
.1122	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1124	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1126	a8		tay				tay
.1127	b2 1e		lda ($1e)			lda 	(zTemp0)
.1129	aa		tax				tax
.112a					_CSAEraseString:
.112a	5a		phy				phy
.112b	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.112d	a9 80		lda #$80			lda 	#$80
.112f	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1131	7a		ply				ply
.1132	18		clc				clc 								; add 4 to next slot.
.1133	a5 1e		lda $1e				lda 	zTemp0
.1135	69 04		adc #$04			adc 	#4
.1137	85 1e		sta $1e				sta 	zTemp0
.1139	90 02		bcc $113d			bcc 	_CSAENoCarry
.113b	e6 1f		inc $1f				inc 	zTemp0+1
.113d					_CSAENoCarry:
.113d	e0 00		cpx #$00			cpx 	#0
.113f	d0 01		bne $1142			bne 	_CSANoBorrow
.1141	88		dey				dey
.1142					_CSANoBorrow:
.1142	ca		dex				dex
.1143	d0 e5		bne $112a			bne 	_CSAEraseString
.1145	c0 00		cpy #$00			cpy 	#0
.1147	d0 e1		bne $112a			bne 	_CSAEraseString
.1149	68		pla				pla
.114a	fa		plx				plx
.114b					_CSANoInit:
.114b	7a		ply				ply
.114c	60		rts				rts
.114d					CSAAllocate:
.114d	08		php				php 								; save type flag.
.114e	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.114f	d0 01		bne $1152			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.1151	e8		inx				inx
.1152					_CSAANoCarry:
.1152	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1154	b0 2e		bcs $1184			bcs 	_CSARange
.1156	28		plp				plp 								; restore type flag
.1157	08		php				php 								; save it back again.
.1158	da		phx				phx 								; save size.
.1159	48		pha				pha
.115a	86 1f		stx $1f				stx  	zTemp0+1 					; now in ztemp0+1:X
.115c	90 03		bcc $1161			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.115e	0a		asl a				asl 	a
.115f	26 1f		rol $1f				rol 	zTemp0+1
.1161					_CSAATimes2:
.1161	0a		asl a				asl 	a
.1162	26 1f		rol $1f				rol 	zTemp0+1
.1164	18		clc				clc
.1165	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1167	90 02		bcc $116b			bcc 	_CSAANoCarry2
.1169	e6 1f		inc $1f				inc 	zTemp0+1
.116b					_CSAANoCarry2:
.116b	a6 1f		ldx $1f				ldx 	zTemp0+1 					; XA is the bytes required.
.116d	20 35 10	jsr $1035			jsr 	AllocateMemory 				; allocate memory to XA
.1170	86 1f		stx $1f				stx 	zTemp0+1 					; save pointers
.1172	85 1e		sta $1e				sta 	zTemp0
.1174	68		pla				pla  								; write element count to first 2 bytes
.1175	92 1e		sta ($1e)			sta 	(zTemp0)
.1177	68		pla				pla 								; msb of element count
.1178	28		plp				plp 								; CC if pointer array
.1179	b0 02		bcs $117d			bcs 	_CSAAIsData
.117b	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.117d					_CSAAIsData:
.117d	a0 01		ldy #$01			ldy 	#1
.117f	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1181	a5 1e		lda $1e				lda 	zTemp0 						; fix XA back up again
.1183	60		rts				rts
.1184					_CSARange:
.1184	4c a7 22	jmp $22a7		jmp	ErrorV_range
.0403					CAType:
>0403							.fill 	1
.0404					CADim1:
>0404							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.1187					Command_Doke:
.1187	38		sec				sec
.1188	80 01		bra $118b			bra 	DPCommon
.118a					Command_Poke:
.118a	18		clc				clc
.118b					DPCommon:
.118b	08		php				php 								; CS if DOKE
.118c	20 de 14	jsr $14de			jsr 	EXPEvalInteger16 			; address
.118f	a5 0c		lda $0c				lda 	IFR0+IM0 					; push on stack
.1191	48		pha				pha
.1192	a5 0d		lda $0d				lda 	IFR0+IM1
.1194	48		pha				pha
.1195	20 1e 24	jsr $241e			jsr 	ERRCheckComma 				; [dp]oke address,data
.1198	20 de 14	jsr $14de			jsr 	EXPEvalInteger16
.119b	68		pla				pla 								; get address back
.119c	85 1f		sta $1f				sta 	zTemp0+1
.119e	68		pla				pla
.119f	85 1e		sta $1e				sta 	zTemp0
.11a1	a5 0c		lda $0c				lda 	IFR0+IM0
.11a3	92 1e		sta ($1e)			sta 	(zTemp0)
.11a5	28		plp				plp
.11a6	90 08		bcc $11b0			bcc 	_DPExit
.11a8	5a		phy				phy
.11a9	a5 0d		lda $0d				lda 	IFR0+IM1
.11ab	a0 01		ldy #$01			ldy 	#1
.11ad	91 1e		sta ($1e),y			sta 	(zTemp0),y
.11af	7a		ply				ply
.11b0					_DPExit:
.11b0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.11b1					Command_Print:
.11b1					Command_IP_Main:
.11b1	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.11b2					_CPLoop:
.11b2	08		php				php 								; save last action flag
.11b3	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.11b5	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.11b7	f0 3e		beq $11f7			beq 	_CPExit 					; without consuming
.11b9	c9 9b		cmp #$9b			cmp 	#PR_COLON
.11bb	f0 3a		beq $11f7			beq 	_CPExit
.11bd	68		pla				pla 								; throw last action flag
.11be	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.11c0	c8		iny				iny
.11c1	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.11c3	f0 2f		beq $11f4			beq 	_CPContinueWithSameLine
.11c5	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.11c7	f0 26		beq $11ef			beq 	_CPTab
.11c9	88		dey				dey 								; undo the get.
.11ca	20 8c 14	jsr $148c			jsr 	EXPEvaluateExpression 		; evaluate expression.
.11cd	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.11cf	10 14		bpl $11e5			bpl 	_CPNumber
.11d1	5a		phy				phy
.11d2	18		clc				clc 								; string address to YX
.11d3	a5 0c		lda $0c				lda 	IFR0+IM0
.11d5	aa		tax				tax
.11d6	a5 0d		lda $0d				lda 	IFR0+IM1
.11d8	a8		tay				tay
.11d9	e8		inx				inx 								; point to 1st character
.11da	d0 01		bne $11dd			bne 	_CPNoCarry
.11dc	c8		iny				iny
.11dd					_CPNoCarry:
.11dd	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.11df	20 00 12	jsr $1200			jsr 	CPPrintAYX 					; print AYX
.11e2	7a		ply				ply
.11e3	80 cc		bra $11b1			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.11e5					_CPNumber:
.11e5	5a		phy				phy
.11e6	20 14 2b	jsr $2b14			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.11e9	20 00 12	jsr $1200			jsr 	CPPrintAYX 					; print AYX
.11ec	7a		ply				ply
.11ed	80 c2		bra $11b1			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.11ef					_CPTab:
.11ef	a9 09		lda #$09			lda 	#9 							; print TAB
.11f1	20 13 12	jsr $1213			jsr 	CPPrintA
.11f4					_CPContinueWithSameLine:
.11f4	38		sec				sec 								; loop round with carry set, which
.11f5	80 bb		bra $11b2			bra 	_CPLoop 					; will inhibit final CR
.11f7					_CPExit:
.11f7	28		plp				plp 								; get last action flag
.11f8	b0 05		bcs $11ff			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.11fa	a9 0d		lda #$0d			lda 	#13 						; print new line
.11fc	20 13 12	jsr $1213			jsr 	CPPrintA
.11ff					_CPExit2:
.11ff	60		rts				rts
.1200					CPPrintAYX:
.1200	86 1e		stx $1e				stx 	zTemp0
.1202	84 1f		sty $1f				sty 	zTemp0+1
.1204	aa		tax				tax
.1205	f0 0b		beq $1212			beq 	_CPPrintExit
.1207	a0 00		ldy #$00			ldy 	#0
.1209					_CPPrintAYXLoop:
.1209	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.120b	20 13 12	jsr $1213			jsr 	CPPrintA
.120e	c8		iny				iny
.120f	ca		dex				dex
.1210	d0 f7		bne $1209			bne 	_CPPrintAYXLoop
.1212					_CPPrintExit:
.1212	60		rts				rts
.1213					CPPrintA:
.1213	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.1216					CommandLET:
.1216	20 54 15	jsr $1554			jsr 	EXPTermR0 					; get term
.1219	90 6d		bcc $1288			bcc 	_CLError 					; must be a reference term.
.121b	a5 0c		lda $0c				lda 	IFR0+IM0 					; push address and type onto stack
.121d	48		pha				pha
.121e	a5 0d		lda $0d				lda 	IFR0+IM1
.1220	48		pha				pha
.1221	a5 0f		lda $0f				lda 	IFR0+IExp
.1223	48		pha				pha
.1224	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.1226	20 26 24	jsr $2426			jsr 	ERRCheckA
.1229	20 8c 14	jsr $148c			jsr 	EXPEvaluateExpression 		; right hand side.
.122c	68		pla				pla 								; type of l-expr
.122d	45 0f		eor $0f				eor 	IFR0+IExp 					; check types match
.122f	30 5a		bmi $128b			bmi 	_CLType
.1231	fa		plx				plx 	 							; pop target address to zTemp0
.1232	86 1f		stx $1f				stx 	zTemp0+1
.1234	fa		plx				plx
.1235	86 1e		stx $1e				stx 	zTemp0
.1237	a5 0f		lda $0f				lda 	IFR0+IExp 					; string assignment
.1239	30 15		bmi $1250			bmi 	_CLStringAssign
.123b	5a		phy				phy
.123c	a0 03		ldy #$03			ldy 	#3
.123e	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1240	88		dey				dey
.1241	a5 0e		lda $0e				lda 	IFR0+IM2
.1243	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1245	88		dey				dey
.1246	a5 0d		lda $0d				lda 	IFR0+IM1
.1248	91 1e		sta ($1e),y			sta 	(zTemp0),y
.124a	a5 0c		lda $0c				lda 	IFR0+IM0
.124c	92 1e		sta ($1e)			sta 	(zTemp0)
.124e	7a		ply				ply
.124f	60		rts				rts
.1250					_CLStringAssign:
.1250	5a		phy				phy
.1251	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.1253	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1255	12 1e		ora ($1e)			ora 	(zTemp0)
.1257	f0 23		beq $127c			beq 	_CLConcreteString
.1259	b2 1e		lda ($1e)			lda 	(zTemp0) 					; copy address of string to zTemp1
.125b	85 20		sta $20				sta 	zTemp1
.125d	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.125f	85 21		sta $21				sta 	zTemp1+1
.1261	b2 20		lda ($20)			lda 	(zTemp1) 					; bytes available in the new slot
.1263	38		sec				sec 								; we want 3 for slot size, status, string size.
.1264	e9 03		sbc #$03			sbc 	#3
.1266	d2 0c		cmp ($0c)			cmp 	(IFR0) 						; compare against string size.
.1268	90 12		bcc $127c			bcc 	_CLConcreteString 			; if so, concrete the string again.
.126a	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.126c	1a		inc a				inc 	a
.126d	aa		tax				tax
.126e	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.1270					_CLReplaceString:
.1270	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; copy new string into previous space.
.1272	c8		iny				iny
.1273	c8		iny				iny
.1274	91 20		sta ($20),y			sta 	(zTemp1),y
.1276	88		dey				dey
.1277	ca		dex				dex
.1278	d0 f6		bne $1270			bne 	_CLReplaceString
.127a	80 0a		bra $1286			bra 	_CLExit
.127c					_CLConcreteString:
.127c	20 99 24	jsr $2499			jsr 	StringConcrete  			; concreted string in XA.
.127f	a0 01		ldy #$01			ldy 	#1 							; store the address
.1281	92 1e		sta ($1e)			sta 	(zTemp0)
.1283	8a		txa				txa
.1284	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1286					_CLExit:
.1286	7a		ply				ply
.1287	60		rts				rts
.1288					_CLError:
.1288	4c ba 23	jmp $23ba		jmp	ErrorV_variable
.128b					_CLType:
.128b	4c c4 22	jmp $22c4		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.128e					Command_NEW:
.128e	20 d9 1c	jsr $1cd9			jsr 	PGMNewProgram
.1291	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.1294	4c f1 12	jmp $12f1			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1297					Command_REM:
.1297					Command_REM2:
.1297	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1299	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.129b	d0 06		bne $12a3			bne 	_CRExit
.129d	c8		iny				iny 								; skip over it, it's a comment.
.129e	98		tya				tya
.129f	38		sec				sec
.12a0	71 1c		adc ($1c),y			adc 	(codePtr),y
.12a2	a8		tay				tay
.12a3					_CRExit:
.12a3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.12a4					Command_RUN:
.12a4	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.12a7	ad 0f 04	lda $040f			lda 	PGMBaseHigh 				; back to the program start
.12aa	85 1d		sta $1d				sta 	codePtr+1
.12ac	64 1c		stz $1c				stz 	codePtr
.12ae	80 0b		bra $12bb			bra 	RUNNewLine
.12b0					RUNEndOfLine:
.12b0	18		clc				clc 								; advance to next line.
.12b1	b2 1c		lda ($1c)			lda 	(codePtr)
.12b3	65 1c		adc $1c				adc 	codePtr
.12b5	85 1c		sta $1c				sta 	codePtr
.12b7	90 02		bcc $12bb			bcc 	_RELNoCarry
.12b9	e6 1d		inc $1d				inc 	codePtr+1
.12bb					_RELNoCarry:
.12bb					RUNNewLine:
.12bb	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.12bd	9a		txs				txs
.12be	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.12c0	f0 2f		beq $12f1			beq 	Command_END
.12c2	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.12c4					RUNNewCommand:
.12c4	9c 16 05	stz $0516			stz 	stringInitialised 			; reset string system.
.12c7	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.12c9	10 1a		bpl $12e5			bpl		_RUNNotToken 				; probably an identifier
.12cb	c8		iny				iny 								; consume token
.12cc	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.12ce	f0 f4		beq $12c4			beq 	RUNNewCommand
.12d0	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.12d2	b0 0e		bcs $12e2			bcs 	_RUNSyntax
.12d4	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.12d6	90 0a		bcc $12e2			bcc 	_RUNSyntax
.12d8	0a		asl a				asl 	a 							; double into X.
.12d9	aa		tax				tax
.12da	20 df 12	jsr $12df			jsr 	_RUNDispatchMain			; call the main dispatcher
.12dd	80 e5		bra $12c4			bra 	RUNNewCommand
.12df					_RUNDispatchMain:
.12df	7c ef 19	jmp ($19ef,x)			jmp 	(VectorTable,x)
.12e2					_RUNSyntax:
.12e2	4c 97 22	jmp $2297		jmp	ErrorV_syntax
.12e5					_RUNNotToken:
.12e5	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.12e7	90 f9		bcc $12e2			bcc 	_RUNSyntax
.12e9	20 16 12	jsr $1216			jsr 	CommandLET 					; assignment
.12ec	80 d6		bra $12c4			bra 	RUNNewCommand 				; loop round.
.12ee					Command_Shift_Handler:
.12ee	4c d5 22	jmp $22d5		jmp	ErrorV_unimplemented
.12f1					Command_END:
.12f1	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.12f4					Command_STOP:
.12f4	4c 32 23	jmp $2332		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.12f7					Command_Sys:
.12f7	20 de 14	jsr $14de			jsr 	EXPEvalInteger16 			; execution address
.12fa	5a		phy				phy
.12fb	ad 61 05	lda $0561			lda 	('A'-'A')*4 + FastVariables ; load AXY
.12fe	ae bd 05	ldx $05bd			ldx 	('X'-'A')*4 + FastVariables
.1301	ac c1 05	ldy $05c1			ldy 	('Y'-'A')*4 + FastVariables
.1304	20 09 13	jsr $1309			jsr 	_CSCallIFR0 				; call the code
.1307	7a		ply				ply
.1308	60		rts				rts
.1309					_CSCallIFR0:
.1309	6c 0c 00	jmp ($000c)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.130c					NoExec01:
.130c					NoExec02:
.130c					NoExec03:
.130c					NoExec04:
.130c					NoExec05:
.130c					NoExec06:
.130c					NoExec07:
.130c					NoExec08:
.130c	4c 97 22	jmp $2297		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.130f					EXPBinAdd:
.130f	24 0f		bit $0f				bit 	IFR0+IExp
.1311	30 6f		bmi $1382			bmi 	EXPConcatenate
.1313	a2 10		ldx #$10			ldx 	#IFR1
.1315	4c 0d 27	jmp $270d			jmp 	IFloatAdd
.1318					EXPBinSub:
.1318	24 0f		bit $0f				bit 	IFR0+IExp
.131a	30 3f		bmi $135b			bmi 	EXPTypeError
.131c	a2 10		ldx #$10			ldx 	#IFR1
.131e	4c 06 27	jmp $2706			jmp 	IFloatSubtract
.1321					EXPBinMul:
.1321	24 0f		bit $0f				bit 	IFR0+IExp
.1323	30 36		bmi $135b			bmi 	EXPTypeError
.1325	a2 10		ldx #$10			ldx 	#IFR1
.1327	4c b7 27	jmp $27b7			jmp 	IFloatMultiply
.132a					EXPBinFDiv:
.132a	24 0f		bit $0f				bit 	IFR0+IExp
.132c	30 2d		bmi $135b			bmi 	EXPTypeError
.132e	a2 10		ldx #$10			ldx 	#IFR1
.1330	20 3a 2a	jsr $2a3a			jsr 	IFloatDivideFloat
.1333	b0 0f		bcs $1344			bcs 	EXPDZero
.1335	60		rts				rts
.1336					EXPBinIDiv:
.1336	24 0f		bit $0f				bit 	IFR0+IExp
.1338	30 21		bmi $135b			bmi 	EXPTypeError
.133a	a2 10		ldx #$10			ldx 	#IFR1
.133c	20 3a 2a	jsr $2a3a			jsr 	IFloatDivideFloat
.133f	b0 03		bcs $1344			bcs 	EXPDZero
.1341	4c 17 2a	jmp $2a17			jmp 	IFloatIntegerR0
.1344					EXPDZero:
.1344	4c 09 23	jmp $2309		jmp	ErrorV_divzero
.1347					EXPBinIMod:
.1347	24 0f		bit $0f				bit 	IFR0+IExp
.1349	30 10		bmi $135b			bmi 	EXPTypeError
.134b	a2 10		ldx #$10			ldx 	#IFR1
.134d	5a		phy				phy
.134e	20 4f 29	jsr $294f			jsr 	IFPreProcessBitwise 		; set up everything.
.1351	d0 05		bne $1358			bne 	EXPDRange
.1353	20 88 28	jsr $2888			jsr 	IFloatModulusInteger
.1356	7a		ply				ply
.1357	60		rts				rts
.1358					EXPDRange:
.1358	4c a7 22	jmp $22a7		jmp	ErrorV_range
.135b					EXPTypeError:
.135b	4c c4 22	jmp $22c4		jmp	ErrorV_type
.135e					EXPBinAnd:
.135e	24 0f		bit $0f				bit 	IFR0+IExp
.1360	30 f9		bmi $135b			bmi 	EXPTypeError
.1362	a2 10		ldx #$10			ldx 	#IFR1
.1364	20 0a 29	jsr $290a			jsr 	IFloatBitwiseAnd
.1367	b0 ef		bcs $1358			bcs 	EXPDRange
.1369	60		rts				rts
.136a					EXPBinOr:
.136a	24 0f		bit $0f				bit 	IFR0+IExp
.136c	30 ed		bmi $135b			bmi 	EXPTypeError
.136e	a2 10		ldx #$10			ldx 	#IFR1
.1370	20 21 29	jsr $2921			jsr 	IFloatBitwiseOr
.1373	b0 e3		bcs $1358			bcs 	EXPDRange
.1375	60		rts				rts
.1376					EXPBinXor:
.1376	24 0f		bit $0f				bit 	IFR0+IExp
.1378	30 e1		bmi $135b			bmi 	EXPTypeError
.137a	a2 10		ldx #$10			ldx 	#IFR1
.137c	20 38 29	jsr $2938			jsr 	IFloatBitwiseXor
.137f	b0 d7		bcs $1358			bcs 	EXPDRange
.1381	60		rts				rts
.1382					EXPConcatenate:
.1382	18		clc				clc
.1383	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.1385	72 10		adc ($10)			adc 	(IFR1)
.1387	b0 2d		bcs $13b6			bcs 	_EXPCError
.1389	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.138b	da		phx				phx
.138c	a6 0d		ldx $0d				ldx 	IFR0+1
.138e	da		phx				phx
.138f	20 0c 25	jsr $250c			jsr 	StringTempAllocate 			; allocate string, set up return
.1392	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.1394	a5 10		lda $10				lda 	IFR1
.1396	20 9f 13	jsr $139f			jsr 	_EXPCCopyXA
.1399	fa		plx				plx 								; copy second string
.139a	68		pla				pla
.139b	20 9f 13	jsr $139f			jsr 	_EXPCCopyXA
.139e	60		rts				rts
.139f					_EXPCCopyXA:
.139f	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.13a1	85 1e		sta $1e				sta 	zTemp0
.13a3	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.13a5	f0 0e		beq $13b5			beq 	_EXPCCExit 					; nothing.
.13a7	aa		tax				tax 								; count
.13a8	5a		phy				phy 								; start positioin
.13a9	a0 01		ldy #$01			ldy 	#1
.13ab					_EXPCCLoop:
.13ab	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.13ad	20 41 25	jsr $2541			jsr 	StringTempWrite
.13b0	c8		iny				iny
.13b1	ca		dex				dex
.13b2	d0 f7		bne $13ab			bne 	_EXPCCLoop
.13b4	7a		ply				ply
.13b5					_EXPCCExit:
.13b5	60		rts				rts
.13b6					_EXPCError:
.13b6	4c a5 23	jmp $23a5		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.13b9					EXPReturnTrue:
.13b9	a2 0c		ldx #$0c			ldx 	#IFR0
.13bb	a9 01		lda #$01			lda 	#1
.13bd	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.13c0	20 22 2d	jsr $2d22			jsr 	IFloatNegate
.13c3	60		rts				rts
.13c4					EXPReturnFalse:
.13c4	a2 0c		ldx #$0c			ldx 	#IFR0
.13c6	4c 17 2d	jmp $2d17			jmp 	IFloatSetZero
.13c9					EXPCompareEqual:
.13c9	20 ff 13	jsr $13ff			jsr 	EXPCompareBaseCode
.13cc	c9 00		cmp #$00			cmp 	#0
.13ce	f0 e9		beq $13b9			beq 	EXPReturnTrue
.13d0	80 f2		bra $13c4			bra 	EXPReturnFalse
.13d2					EXPCompareLess:
.13d2	20 ff 13	jsr $13ff			jsr 	EXPCompareBaseCode
.13d5	c9 ff		cmp #$ff			cmp 	#$FF
.13d7	f0 e0		beq $13b9			beq 	EXPReturnTrue
.13d9	80 e9		bra $13c4			bra 	EXPReturnFalse
.13db					EXPCompareGreater:
.13db	20 ff 13	jsr $13ff			jsr 	EXPCompareBaseCode
.13de	c9 01		cmp #$01			cmp 	#1
.13e0	f0 d7		beq $13b9			beq 	EXPReturnTrue
.13e2	80 e0		bra $13c4			bra 	EXPReturnFalse
.13e4					EXPCompareNotEqual:
.13e4	20 ff 13	jsr $13ff			jsr 	EXPCompareBaseCode
.13e7	c9 00		cmp #$00			cmp 	#0
.13e9	d0 ce		bne $13b9			bne 	EXPReturnTrue
.13eb	80 d7		bra $13c4			bra 	EXPReturnFalse
.13ed					EXPCompareLessEqual:
.13ed	20 ff 13	jsr $13ff			jsr 	EXPCompareBaseCode
.13f0	c9 01		cmp #$01			cmp 	#1
.13f2	d0 c5		bne $13b9			bne 	EXPReturnTrue
.13f4	80 ce		bra $13c4			bra 	EXPReturnFalse
.13f6					EXPCompareGreaterEqual:
.13f6	20 ff 13	jsr $13ff			jsr 	EXPCompareBaseCode
.13f9	c9 ff		cmp #$ff			cmp 	#$FF
.13fb	d0 bc		bne $13b9			bne 	EXPReturnTrue
.13fd	80 c5		bra $13c4			bra 	EXPReturnFalse
.13ff					EXPCompareBaseCode:
.13ff	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.1401	30 10		bmi $1413			bmi 	_EXCBCString
.1403	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.1405	20 e5 29	jsr $29e5			jsr 	IFloatCompare
.1408	a5 0c		lda $0c				lda 	IFR0+IM0
.140a	f0 06		beq $1412			beq 	_EXCBCExit 					; return 0 if zero
.140c	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.140e	50 02		bvc $1412			bvc 	_EXCBCExit
.1410	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1412					_EXCBCExit:
.1412	60		rts				rts
.1413					_EXCBCString:
.1413	5a		phy				phy
.1414	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.1416	d2 10		cmp ($10)			cmp 	(IFR1)
.1418	90 02		bcc $141c			bcc 	_EXCBCSmaller
.141a	b2 10		lda ($10)			lda 	(IFR1)
.141c					_EXCBCSmaller:
.141c	aa		tax				tax
.141d	f0 0d		beq $142c			beq 	_EXCBCMatches 				; if zero common length matches
.141f	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1421					_EXCBCCheckSmallerMatches:
.1421	c8		iny				iny 								; compare directly as far as common length
.1422	38		sec				sec
.1423	b1 10		lda ($10),y			lda 	(IFR1),y
.1425	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.1427	d0 08		bne $1431			bne 	_EXCBCExit2
.1429	ca		dex				dex
.142a	d0 f5		bne $1421			bne 	_EXCBCCheckSmallerMatches
.142c					_EXCBCMatches:
.142c	38		sec				sec
.142d	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.142f	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1431					_EXCBCExit2:
.1431	7a		ply				ply
.1432	c9 00		cmp #$00			cmp 	#0
.1434	f0 04		beq $143a			beq 	_EXCBCReturn
.1436	30 03		bmi $143b			bmi 	_EXCBCFF
.1438	a9 01		lda #$01			lda 	#1
.143a					_EXCBCReturn:
.143a	60		rts				rts
.143b					_EXCBCFF:
.143b	a9 ff		lda #$ff			lda 	#$FF
.143d	60		rts				rts
.143e					_EXCBCRange:
.143e	4c a7 22	jmp $22a7		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1441					EXPBinLeft:
.1441	a9 ff		lda #$ff			lda 	#$FF
.1443	8d 06 04	sta $0406			sta 	EXPShiftLeftFlag
.1446	4c 4c 14	jmp $144c			jmp 	EXPShiftCommon
.1449					EXPBinRight:
.1449	9c 06 04	stz $0406			stz 	EXPShiftLeftFlag
.144c					EXPShiftCommon:
.144c	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.144e	05 13		ora $13				ora 	IFR1+IExp
.1450	29 7f		and #$7f			and 	#$7F
.1452	d0 35		bne $1489			bne 	_EXPSRange
.1454	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1456	29 e0		and #$e0			and 	#$E0
.1458	05 0d		ora $0d				ora 	IFR0+IM1
.145a	05 0e		ora $0e				ora 	IFR0+IM2
.145c	d0 25		bne $1483			bne 	_EXPSShiftZero 				; if so return zero
.145e	5a		phy				phy
.145f	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1461	29 1f		and #$1f			and 	#$1F
.1463	f0 17		beq $147c			beq 	_EXPSExit 					; exit if zero
.1465	a8		tay				tay
.1466					_EXPSLoop:
.1466	a2 10		ldx #$10			ldx 	#IFR1
.1468	2c 06 04	bit $0406			bit 	EXPShiftLeftFlag
.146b	30 05		bmi $1472			bmi 	_EXPSShiftLeft
.146d	20 46 2d	jsr $2d46			jsr 	IFloatShiftRight
.1470	80 07		bra $1479			bra 	_EXPSContinue
.1472					_EXPSShiftLeft:
.1472	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1475	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1477	30 10		bmi $1489			bmi 	_EXPSRange
.1479					_EXPSContinue:
.1479	88		dey				dey
.147a	d0 ea		bne $1466			bne 	_EXPSLoop
.147c					_EXPSExit:
.147c	a2 10		ldx #$10			ldx 	#IFR1
.147e	20 a8 2c	jsr $2ca8			jsr 	IFloatCopyFromRegister
.1481	7a		ply				ply
.1482	60		rts				rts
.1483					_EXPSShiftZero:
.1483	a2 0c		ldx #$0c			ldx 	#IFR0
.1485	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.1488	60		rts				rts
.1489					_EXPSRange:
.1489	4c a7 22	jmp $22a7		jmp	ErrorV_range
.0406					EXPShiftLeftFlag:
>0406							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.148c					EXPEvaluateExpression:
.148c	a9 00		lda #$00			lda 	#0 							; current precedence
.148e					EXPEvaluateExpressionPrecedenceA:
.148e	48		pha				pha
.148f	20 09 15	jsr $1509			jsr 	EXPTermValueR0				; do first term.
.1492					_EELoop:
.1492	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.1494	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1496	90 31		bcc $14c9			bcc 	_EEExit
.1498	aa		tax				tax 								; access the precedence of the operator.
.1499	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.149a	dd 47 17	cmp $1747,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.149d	b0 2b		bcs $14ca			bcs 	_EEExit2
.149f	48		pha				pha 								; save current precedence.
.14a0	da		phx				phx 								; save operator
.14a1	c8		iny				iny 								; consume operator
.14a2	da		phx				phx
.14a3	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.14a5	20 66 2c	jsr $2c66			jsr 	IFloatPushRx
.14a8	fa		plx				plx
.14a9	bd 47 17	lda $1747,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.14ac	20 8e 14	jsr $148e			jsr 	EXPEvaluateExpressionPrecedenceA
.14af	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.14b1	20 87 2c	jsr $2c87			jsr 	IFloatPullRx
.14b4	fa		plx				plx 								; operator
.14b5	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.14b7	45 13		eor $13				eor 	IFR1+IExp
.14b9	30 08		bmi $14c3			bmi 	_EEType
.14bb					_EETypeOkay:
.14bb	8a		txa				txa
.14bc	0a		asl a				asl 	a 							; double -> X
.14bd	aa		tax				tax
.14be	20 c6 14	jsr $14c6			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.14c1	80 cf		bra $1492			bra 	_EELoop
.14c3					_EEType:
.14c3	4c c4 22	jmp $22c4		jmp	ErrorV_type
.14c6					_EECallBinary:
.14c6	7c ef 19	jmp ($19ef,x)			jmp 	(VectorTable,x)
.14c9					_EEExit:
.14c9	68		pla				pla 								; throw precedence
.14ca					_EEExit2:
.14ca	18		clc				clc
.14cb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.14cc					EXPEvalNumber:
.14cc	20 8c 14	jsr $148c			jsr 	EXPEvaluateExpression
.14cf	24 0f		bit $0f				bit 	IFR0+IExp
.14d1	30 01		bmi $14d4			bmi 	EVUType
.14d3	60		rts				rts
.14d4					EVUType:
.14d4	4c c4 22	jmp $22c4		jmp	ErrorV_type
.14d7					EXPEvalInteger:
.14d7	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.14da	20 17 2a	jsr $2a17			jsr 	IFloatIntegerR0
.14dd	60		rts				rts
.14de					EXPEvalInteger16:
.14de	20 d7 14	jsr $14d7			jsr 	EXPEvalInteger
.14e1	a5 0e		lda $0e				lda 	IFR0+IM2
.14e3	d0 21		bne $1506			bne 	EVURange
.14e5	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14e7	a5 0c		lda $0c				lda 	IFR0+IM0
.14e9	60		rts				rts
.14ea					EXPEvalInteger8:
.14ea	20 d7 14	jsr $14d7			jsr 	EXPEvalInteger
.14ed	a5 0e		lda $0e				lda 	IFR0+IM2
.14ef	05 0d		ora $0d				ora 	IFR0+IM1
.14f1	d0 13		bne $1506			bne 	EVURange
.14f3	a5 0c		lda $0c				lda 	IFR0+IM0
.14f5	60		rts				rts
.14f6					EXPEvalString:
.14f6	20 8c 14	jsr $148c			jsr 	EXPEvaluateExpression
.14f9	24 0f		bit $0f				bit 	IFR0+IExp
.14fb	10 d7		bpl $14d4			bpl 	EVUType
.14fd	a6 0d		ldx $0d				ldx 	IFR0+IM1
.14ff	86 1f		stx $1f				stx 	zTemp0+1
.1501	a5 0c		lda $0c				lda 	IFR0+IM0
.1503	85 1e		sta $1e				sta 	zTemp0
.1505	60		rts				rts
.1506					EVURange:
.1506	4c a7 22	jmp $22a7		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1509					EXPTermValueR0:
.1509	20 54 15	jsr $1554			jsr 	EXPTermR0 					; get term
.150c	90 45		bcc $1553			bcc 	_ETVNotReference 			; exit if value.
.150e	5a		phy				phy
.150f	a0 03		ldy #$03			ldy 	#3 							; get type
.1511	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1513	30 14		bmi $1529			bmi 	_ETVDereferenceString
.1515	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.1517	88		dey				dey
.1518	b1 0c		lda ($0c),y			lda 	(IFR0),y
.151a	85 0e		sta $0e				sta 	IFR0+IM2
.151c	88		dey				dey
.151d	b1 0c		lda ($0c),y			lda 	(IFR0),y
.151f	aa		tax				tax
.1520	b2 0c		lda ($0c)			lda 	(IFR0)
.1522	86 0d		stx $0d				stx 	IFR0+IM1
.1524	85 0c		sta $0c				sta 	IFR0+IM0
.1526	7a		ply				ply
.1527	18		clc				clc
.1528	60		rts				rts
.1529					_ETVDereferenceString:
.1529	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.152b	b1 0c		lda ($0c),y			lda 	(IFR0),y
.152d	12 0c		ora ($0c)			ora 	(IFR0)
.152f	f0 11		beq $1542			beq 	_ETVNull
.1531	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; load address of string to XA
.1533	aa		tax				tax
.1534	b2 0c		lda ($0c)			lda 	(IFR0)
.1536	18		clc				clc 								; add two so points to actual string.
.1537	69 02		adc #$02			adc 	#2
.1539	90 01		bcc $153c			bcc 	_EVDSNoCarry
.153b	e8		inx				inx
.153c					_EVDSNoCarry:
.153c	86 0d		stx $0d				stx 	IFR0+IM1 					; save in slots
.153e	85 0c		sta $0c				sta 	IFR0
.1540	80 08		bra $154a			bra 	_ETVFillExit 				; tidy up and exit.
.1542					_ETVNull:
.1542	a9 52		lda #$52			lda 	#_EVTNString & $FF
.1544	85 0c		sta $0c				sta 	IFR0+IM0
.1546	a9 15		lda #$15			lda 	#_EVTNString >> 8
.1548	85 0d		sta $0d				sta 	IFR0+IM1
.154a					_ETVFillExit:
.154a	64 0e		stz $0e				stz 	IFR0+IM2
.154c	a9 80		lda #$80			lda 	#$80
.154e	85 0f		sta $0f				sta 	IFR0+IExp
.1550	7a		ply				ply
.1551	60		rts				rts
.1552					_EVTNString:
>1552	00						.byte 	0
.1553					_ETVNotReference:
.1553	60		rts				rts
.1554					EXPTermR0:
.1554	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.1556	30 10		bmi $1568			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1558	c8		iny				iny 								; consume element
.1559	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.155b	b0 08		bcs $1565			bcs 	_ETMIdentifier
.155d	20 8c 15	jsr $158c			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1560	20 bf 15	jsr $15bf			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.1563	18		clc				clc 								; return value
.1564	60		rts				rts
.1565					_ETMIdentifier:
.1565	4c ae 26	jmp $26ae			jmp 	VARCheckSimple 				; check simple variables A-Z
.1568					_ETMIsUnaryOrMinus:
.1568	c8		iny				iny 								; consume element
.1569	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.156b	d0 0a		bne $1577			bne 	_ETMCheckUnary
.156d	20 09 15	jsr $1509			jsr 	EXPTermValueR0 				; get a term to negate
.1570	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.1572	20 22 2d	jsr $2d22			jsr 	IFloatNegate
.1575	18		clc				clc
.1576	60		rts				rts
.1577					_ETMCheckUnary:
.1577	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1579	90 0e		bcc $1589			bcc 	_ETMUnarySyntax
.157b	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.157d	b0 0a		bcs $1589			bcs 	_ETMUnarySyntax
.157f	0a		asl a				asl 	a
.1580	aa		tax				tax
.1581	20 86 15	jsr $1586			jsr 	_ETMCallUnaryFunction
.1584	18		clc				clc
.1585	60		rts				rts
.1586					_ETMCallUnaryFunction:
.1586	7c ef 19	jmp ($19ef,x)			jmp 	(VectorTable,x)
.1589					_ETMUnarySyntax:
.1589	4c 97 22	jmp $2297		jmp	ErrorV_syntax
.158c					EXPExtractTokenisedInteger:
.158c	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.158e	64 0f		stz $0f				stz 	IFR0+IExp
.1590	64 0d		stz $0d				stz 	IFR0+IM1
.1592	64 0e		stz $0e				stz 	IFR0+IM2
.1594					_ETMConstant:
.1594	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.1596	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1598	b0 24		bcs $15be			bcs 	_ETMCExit 					; no.
.159a	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.159c	a5 0d		lda $0d				lda 	IFR0+IM1
.159e	85 0e		sta $0e				sta 	IFR0+IM2
.15a0	a5 0c		lda $0c				lda 	IFR0+IM0
.15a2	85 0d		sta $0d				sta 	IFR0+IM1
.15a4	64 0c		stz $0c				stz 	IFR0+IM0
.15a6	8a		txa				txa
.15a7	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.15a8	66 0e		ror $0e				ror 	IFR0+IM2
.15aa	66 0d		ror $0d				ror 	IFR0+IM1
.15ac	66 0c		ror $0c				ror 	IFR0+IM0
.15ae	4a		lsr a				lsr 	a
.15af	66 0e		ror $0e				ror 	IFR0+IM2
.15b1	66 0d		ror $0d				ror 	IFR0+IM1
.15b3	66 0c		ror $0c				ror 	IFR0+IM0
.15b5	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.15b7	11 1c		ora ($1c),y			ora 	(codePtr),y
.15b9	85 0c		sta $0c				sta 	IFR0+IM0
.15bb	c8		iny				iny 								; consume, loop back
.15bc	80 d6		bra $1594			bra 	_ETMConstant
.15be					_ETMCExit:
.15be	60		rts				rts
.15bf					EXPCheckDecimalFollows:
.15bf	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.15c1	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.15c3	d0 19		bne $15de			bne 	_ETMCDExit
.15c5	c8		iny				iny 								; consume token.
.15c6	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.15c8	5a		phy				phy									; save current position
.15c9	48		pha				pha 								; save count of chars.
.15ca	38		sec				sec 								; address into YX : y + codePtr+1
.15cb	98		tya				tya
.15cc	65 1c		adc $1c				adc 	codePtr
.15ce	aa		tax				tax
.15cf	a5 1d		lda $1d				lda 	codePtr+1
.15d1	69 00		adc #$00			adc 	#0
.15d3	a8		tay				tay
.15d4	68		pla				pla 								; get count.
.15d5	20 bb 2b	jsr $2bbb			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.15d8	7a		ply				ply 								; go to next token.
.15d9	98		tya				tya
.15da	38		sec				sec
.15db	71 1c		adc ($1c),y			adc 	(codePtr),y
.15dd	a8		tay				tay
.15de					_ETMCDExit:
.15de	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.15df					EXPUnaryAbs:
.15df	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 					; number to R0
.15e2	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.15e5	20 5b 29	jsr $295b			jsr 	IFloatAbsoluteR0
.15e8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.15e9					EXPUnaryAsc:
.15e9	20 f6 14	jsr $14f6			jsr 	EXPEvalString 					; string to R0, zTemp0
.15ec	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.15ef	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.15f1	f0 06		beq $15f9			beq 	_EXAZero 						; if so return 0
.15f3	5a		phy				phy 									; otherwise get first character
.15f4	a0 01		ldy #$01			ldy 	#1
.15f6	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.15f8	7a		ply				ply
.15f9					_EXAZero:
.15f9	a2 0c		ldx #$0c			ldx 	#IFR0
.15fb	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.15fe	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.15ff					EXPUnaryChr:
.15ff	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger8 				; expr
.1602	48		pha				pha 									; push on stack
.1603	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.1606	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1608	20 0c 25	jsr $250c			jsr 	StringTempAllocate
.160b	68		pla				pla
.160c	20 41 25	jsr $2541			jsr 	StringTempWrite
.160f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1610					EXPUnaryDec:
.1610	20 f6 14	jsr $14f6			jsr 	EXPEvalString 					; string to R0, zTemp0
.1613	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.1616	5a		phy				phy
.1617	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.1619	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.161c	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.161e	f0 3b		beq $165b			beq 	_EUDError 						; empty string
.1620	aa		tax				tax
.1621	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1623					_EUDLoop:
.1623	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.1625	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1627	90 02		bcc $162b			bcc 	_EUDNoCase
.1629	e9 20		sbc #$20			sbc 	#$20
.162b					_EUDNoCase:
.162b	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.162d	90 2c		bcc $165b			bcc 	_EUDError
.162f	c9 3a		cmp #$3a			cmp 	#'9'+1
.1631	90 0a		bcc $163d			bcc 	_EUDOkay
.1633	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.1635	90 24		bcc $165b			bcc 	_EUDError
.1637	c9 47		cmp #$47			cmp 	#'F'+1
.1639	b0 20		bcs $165b			bcs 	_EUDError
.163b	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.163d					_EUDOkay:
.163d	29 0f		and #$0f			and 	#15 							; make constant
.163f	da		phx				phx
.1640	48		pha				pha
.1641	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.1643	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1646	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1649	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.164c	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.164f	68		pla				pla 									; pop constant and OR in
.1650	fa		plx				plx
.1651	05 0c		ora $0c				ora 	IFR0+IM0
.1653	85 0c		sta $0c				sta 	IFR0+IM0
.1655	c8		iny				iny 									; next
.1656	ca		dex				dex
.1657	d0 ca		bne $1623			bne 	_EUDLoop
.1659	7a		ply				ply
.165a	60		rts				rts
.165b					_EUDError:
.165b	4c b7 22	jmp $22b7		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.165e					EXPUnaryInlineDec:
.165e	4c 97 22	jmp $2297		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1661					EXPUnaryPeek:
.1661	20 de 14	jsr $14de			jsr 	EXPEvalInteger16 				; number to R0
.1664	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.1667	b2 0c		lda ($0c)			lda 	(IFR0)
.1669	a2 0c		ldx #$0c			ldx 	#IFR0
.166b	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.166e	60		rts				rts
.166f					EXPUnaryDeek:
.166f	20 de 14	jsr $14de			jsr 	EXPEvalInteger16 				; number to R0
.1672	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.1675	5a		phy				phy
.1676	a0 01		ldy #$01			ldy 	#1
.1678	b1 0c		lda ($0c),y			lda 	(IFR0),y
.167a	7a		ply				ply
.167b	48		pha				pha
.167c	b2 0c		lda ($0c)			lda 	(IFR0)
.167e	a2 0c		ldx #$0c			ldx 	#IFR0
.1680	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.1683	68		pla				pla
.1684	85 0d		sta $0d				sta 	IFR0+IM1
.1686	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.1687					EXPUnaryNull:
.1687	20 09 15	jsr $1509			jsr 	EXPTermValueR0
.168a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.168b					EXPUnaryFrac:
.168b	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 					; number to R0
.168e	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.1691	20 c1 29	jsr $29c1			jsr 	IFloatFractionalR0
.1694	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1695					EXPUnaryInt:
.1695	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 					; number to R0
.1698	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.169b	20 17 2a	jsr $2a17			jsr 	IFloatIntegerR0
.169e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.169f					EXPUnaryLen:
.169f	20 f6 14	jsr $14f6			jsr 	EXPEvalString 					; string to R0, zTemp0
.16a2	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.16a5	b2 1e		lda ($1e)			lda 	(zTemp0)
.16a7	a2 0c		ldx #$0c			ldx 	#IFR0
.16a9	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.16ac	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.16ad					EXPUnaryParenthesis:
.16ad	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 					; number to R0
.16b0	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.16b3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.16b4					EXPUnaryRnd:
.16b4	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 				; number to R0
.16b7	20 16 24	jsr $2416			jsr 	ERRCheckRParen 				; )
.16ba	a2 0c		ldx #$0c			ldx 	#IFR0
.16bc	20 d3 16	jsr $16d3			jsr 	EXPLoadInRandom
.16bf	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.16c1	85 0f		sta $0f				sta 	IFR0+IExp
.16c3	60		rts				rts
.16c4					ExpUnaryRand:
.16c4	20 d7 14	jsr $14d7			jsr 	EXPEvalInteger 				; integer to R0
.16c7	20 16 24	jsr $2416			jsr 	ERRCheckRParen 				; )
.16ca	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.16cc	20 d3 16	jsr $16d3			jsr 	EXPLoadInRandom
.16cf	20 88 28	jsr $2888			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.16d2	60		rts				rts
.16d3					EXPLoadInRandom:
.16d3	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.16d6	20 e8 16	jsr $16e8			jsr 	EXPRandom32
.16d9	95 00		sta $00,x			sta 	IM0,x
.16db	20 e8 16	jsr $16e8			jsr 	EXPRandom32
.16de	95 01		sta $01,x			sta 	IM1,x
.16e0	20 e8 16	jsr $16e8			jsr 	EXPRandom32
.16e3	29 7f		and #$7f			and 	#$7F
.16e5	95 02		sta $02,x			sta 	IM2,x
.16e7	60		rts				rts
.16e8					EXPRandom32:
.16e8	5a		phy				phy
.16e9	a0 08		ldy #$08			ldy 	#8
.16eb	ad 07 04	lda $0407			lda 	EXPSeed+0
.16ee	0d 08 04	ora $0408			ora 	EXPSeed+1
.16f1	0d 09 04	ora $0409			ora 	EXPSeed+2
.16f4	0d 0a 04	ora $040a			ora 	EXPSeed+3
.16f7	d0 08		bne $1701			bne 	_EXPRNoReset
.16f9	ee 07 04	inc $0407			inc 	EXPSeed+0
.16fc	a0 10		ldy #$10			ldy 	#16
.16fe	8c 0a 04	sty $040a			sty 	EXPSeed+3
.1701					_EXPRNoReset:
.1701	ad 07 04	lda $0407			lda 	EXPSeed+0
.1704					_EXPRLoop:
.1704	0a		asl a				asl		a
.1705	2e 08 04	rol $0408			rol 	EXPSeed+1
.1708	2e 09 04	rol $0409			rol 	EXPSeed+2
.170b	2e 0a 04	rol $040a			rol 	EXPSeed+3
.170e	90 02		bcc $1712			bcc 	_EXPRNoEOR
.1710	49 c5		eor #$c5			eor 	#$C5
.1712					_EXPRNoEOR:
.1712	88		dey				dey
.1713	d0 ef		bne $1704			bne 	_EXPRLoop
.1715	8d 07 04	sta $0407			sta 	EXPSeed+0
.1718	7a		ply				ply
.1719	60		rts				rts
.0407					EXPSeed:
>0407							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.171a					EXPUnarySgn:
.171a	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 					; number to R0
.171d	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.1720	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.1722	20 b9 2c	jsr $2cb9			jsr 	IFloatCopyToRegister
.1725	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.1727	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.172a	a2 10		ldx #$10			ldx 	#IFR1
.172c	20 e5 29	jsr $29e5			jsr 	IFloatCompare 					; compare R1 vs 0.
.172f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1730					EXPUnarySqr:
.1730	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 					; number to R0
.1733	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.1736	20 63 29	jsr $2963			jsr 	IFloatSquareRootR0 				; square root.
.1739	b0 01		bcs $173c			bcs 	_EUSValue
.173b	60		rts				rts
.173c					_EUSValue:
.173c	4c a7 22	jmp $22a7		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.173f					EXPUnaryHex:
.173f	20 d7 14	jsr $14d7			jsr 	EXPEvalInteger 					; expr
.1742	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.1745	5a		phy				phy
.1746	a9 10		lda #$10			lda 	#16
.1748	20 b8 2a	jsr $2ab8			jsr 	IFloatIntegerToStringR0
.174b	80 0a		bra $1757			bra 	EUSMain
.174d					EXPUnaryStr:
.174d	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 					; expr
.1750	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.1753	5a		phy				phy
.1754	20 14 2b	jsr $2b14			jsr 	IFloatFloatToStringR0 			; convert to string
.1757					EUSMain:
.1757	b0 18		bcs $1771			bcs 	_EUSError
.1759	86 1e		stx $1e				stx 	zTemp0 							; save string address
.175b	84 1f		sty $1f				sty 	zTemp0+1
.175d	48		pha				pha 									; save count
.175e	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1760	20 0c 25	jsr $250c			jsr 	StringTempAllocate
.1763	fa		plx				plx 									; count in X
.1764	a0 00		ldy #$00			ldy 	#0
.1766					_EUSCopy:
.1766	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1768	c8		iny				iny
.1769	20 41 25	jsr $2541			jsr 	StringTempWrite
.176c	ca		dex				dex
.176d	d0 f7		bne $1766			bne	 	_EUSCopy
.176f	7a		ply				ply
.1770	60		rts				rts
.1771					_EUSError:
.1771	4c a7 22	jmp $22a7		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1774					EXPUnaryInlineString:
.1774	18		clc				clc 								; physical address -> IM0,1
.1775	98		tya				tya
.1776	65 1c		adc $1c				adc 	codePtr
.1778	85 0c		sta $0c				sta 	IFR0+IM0
.177a	a5 1d		lda $1d				lda 	codePtr+1
.177c	69 00		adc #$00			adc 	#0
.177e	85 0d		sta $0d				sta 	IFR0+IM1
.1780	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.1782	a9 80		lda #$80			lda 	#$80
.1784	85 0f		sta $0f				sta 	IFR0+IExp
.1786	98		tya				tya	 								; skip over it.
.1787	38		sec				sec
.1788	71 1c		adc ($1c),y			adc 	(codePtr),y
.178a	a8		tay				tay
.178b	60		rts				rts
.178c					_EXPUISRange:
.178c	4c a7 22	jmp $22a7		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.178f					EXPUnaryLeft:
.178f	20 d5 17	jsr $17d5			jsr 	EXPCommonStart 					; <string>,
.1792	48		pha				pha 									; save string address on stack
.1793	da		phx				phx
.1794	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1796	48		pha				pha
.1797	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger8 				; characters to do
.179a	80 44		bra $17e0			bra 	EXPSubstringCommon
.179c					EXPUnaryRight:
.179c	20 d5 17	jsr $17d5			jsr 	EXPCommonStart 					; <string>,
.179f	48		pha				pha 									; save string address on stack
.17a0	da		phx				phx
.17a1	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.17a3	48		pha				pha
.17a4	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger8 				; characters to do
.17a7	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.17a9	68		pla				pla
.17aa	38		sec				sec
.17ab	e5 1e		sbc $1e				sbc 	zTemp0
.17ad	b0 02		bcs $17b1			bcs 	_EUROffLeft
.17af	a9 00		lda #$00			lda 	#0
.17b1					_EUROffLeft:
.17b1	48		pha				pha 									; start pos
.17b2	a9 ff		lda #$ff			lda 	#255
.17b4	80 2a		bra $17e0			bra 	EXPSubstringCommon
.17b6					EXPUnaryMid:
.17b6	20 d5 17	jsr $17d5			jsr 	EXPCommonStart 					; <string>,
.17b9	48		pha				pha 									; save string address on stack
.17ba	da		phx				phx
.17bb	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger8 				; characters start
.17be	f0 12		beq $17d2			beq 	_EUSError 						; 1 is left
.17c0	3a		dec a				dec 	a 								; zero based.
.17c1	48		pha				pha
.17c2	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.17c4	c9 99		cmp #$99			cmp 	#PR_COMMA
.17c6	f0 04		beq $17cc			beq 	_EUMLength 						; if so m is provided
.17c8	a9 ff		lda #$ff			lda 	#255 							; default m
.17ca	80 14		bra $17e0			bra 	EXPSubstringCommon
.17cc					_EUMLength:
.17cc	c8		iny				iny 									; consume comma
.17cd	20 ea 14	jsr $14ea			jsr 	EXPEvalInteger8 				; characters to do
.17d0	80 0e		bra $17e0			bra 	EXPSubstringCommon
.17d2					_EUSError:
.17d2	4c b7 22	jmp $22b7		jmp	ErrorV_value
.17d5					EXPCommonStart:
.17d5	20 f6 14	jsr $14f6			jsr 	EXPEvalString
.17d8	20 1e 24	jsr $241e			jsr 	ERRCheckComma
.17db	a5 0c		lda $0c				lda 	IFR0+IM0
.17dd	a6 0d		ldx $0d				ldx 	IFR0+IM1
.17df	60		rts				rts
.17e0					EXPSubstringCommon:
.17e0	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.17e2	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; check right bracket.
.17e5	68		pla				pla 									; start position
.17e6	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.17e8	fa		plx				plx 									; get string address to zTemp2.
.17e9	86 23		stx $23				stx 	zTemp2+1
.17eb	68		pla				pla
.17ec	85 22		sta $22				sta 	zTemp2
.17ee	38		sec				sec 									; length - start is the max count of chars
.17ef	b2 22		lda ($22)			lda 	(zTemp2)
.17f1	e5 21		sbc $21				sbc 	zTemp1+1
.17f3	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.17f5	b0 02		bcs $17f9			bcs 	_EXPSSNoTrim
.17f7	85 20		sta $20				sta 	zTemp1 							; update count with available
.17f9					_EXPSSNoTrim:
.17f9	a5 20		lda $20				lda 	zTemp1 							; chars required.
.17fb	20 0c 25	jsr $250c			jsr 	StringTempAllocate 				; allocate memory for it.
.17fe	a5 20		lda $20				lda 	zTemp1 							; zero length string
.1800	f0 15		beq $1817			beq 	_EXPSSExit
.1802	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.1804	d2 22		cmp ($22)			cmp 	(zTemp2)
.1806	b0 0f		bcs $1817			bcs 	_EXPSSExit
.1808	5a		phy				phy
.1809	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.180b	c8		iny				iny 									; +1 for the length byte
.180c					_EXPSSCopy:
.180c	b1 22		lda ($22),y			lda 	(zTemp2),y
.180e	20 41 25	jsr $2541			jsr 	StringTempWrite
.1811	c8		iny				iny
.1812	c6 20		dec $20				dec 	zTemp1
.1814	d0 f6		bne $180c			bne 	_EXPSSCopy
.1816	7a		ply				ply
.1817					_EXPSSExit:
.1817	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1818					EXPUnaryVal:
.1818	20 f6 14	jsr $14f6			jsr 	EXPEvalString 					; string to R0, zTemp0
.181b	20 16 24	jsr $2416			jsr 	ERRCheckRParen 					; )
.181e	5a		phy				phy
.181f	18		clc				clc
.1820	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.1822	69 01		adc #$01			adc 	#1
.1824	aa		tax				tax
.1825	a5 1f		lda $1f				lda 	zTemp0+1
.1827	69 00		adc #$00			adc 	#0
.1829	a8		tay				tay
.182a	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.182c	20 7b 2b	jsr $2b7b			jsr 	IFloatStringToFloatR0 			; do conversion
.182f	b0 02		bcs $1833			bcs 	_EUVError
.1831	7a		ply				ply
.1832	60		rts				rts
.1833					_EUVError:
.1833	4c b7 22	jmp $22b7		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1836					BinaryPrecedence:
>1836	02					.byte	 2	; $ef =
>1837	02					.byte	 2	; $f0 <>
>1838	02					.byte	 2	; $f1 <=
>1839	02					.byte	 2	; $f2 <
>183a	02					.byte	 2	; $f3 >=
>183b	02					.byte	 2	; $f4 >
>183c	01					.byte	 1	; $f5 XOR
>183d	01					.byte	 1	; $f6 OR
>183e	01					.byte	 1	; $f7 AND
>183f	04					.byte	 4	; $f8 DIV
>1840	04					.byte	 4	; $f9 MOD
>1841	04					.byte	 4	; $fa <<
>1842	04					.byte	 4	; $fb >>
>1843	04					.byte	 4	; $fc /
>1844	04					.byte	 4	; $fd *
>1845	03					.byte	 3	; $fe -
>1846	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1847					StructureOffsets:
>1847	01					.byte	1  	; $80 REPEAT
>1848	ff					.byte	255	; $81 UNTIL
>1849	01					.byte	1  	; $82 WHILE
>184a	ff					.byte	255	; $83 WEND
>184b	01					.byte	1  	; $84 IF
>184c	ff					.byte	255	; $85 ENDIF
>184d	01					.byte	1  	; $86 DO
>184e	ff					.byte	255	; $87 LOOP
>184f	01					.byte	1  	; $88 PROC
>1850	ff					.byte	255	; $89 ENDPROC
>1851	01					.byte	1  	; $8a FOR
>1852	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1853					StandardTokens:
>1853	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>185a	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1860	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1866	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>186b	02 49 46				.byte	$02,$49,$46                             	; $84 if
>186e	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1874	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1877	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>187c	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1881	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1889	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>188d	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1892	00					.byte	$00                                     	; $8c [[end]]
>1893	00					.byte	$00                                     	; $8d [[shift]]
>1894	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1899	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>189e	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>18a1	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>18a6	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>18aa	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>18b0	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>18b6	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>18bb	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>18bf	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>18c3	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>18c8	01 2c					.byte	$01,$2c                                 	; $99 ,
>18ca	01 3b					.byte	$01,$3b                                 	; $9a ;
>18cc	01 3a					.byte	$01,$3a                                 	; $9b :
>18ce	01 27					.byte	$01,$27                                 	; $9c '
>18d0	01 29					.byte	$01,$29                                 	; $9d )
>18d2	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>18d6	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>18dc	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>18e0	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>18e4	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>18e9	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>18ed	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>18f4	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>18f9	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>18fe	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>1903	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>1908	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>190d	00					.byte	0											; $aa
>190e	00					.byte	0											; $ab
>190f	00					.byte	0											; $ac
>1910	00					.byte	0											; $ad
>1911	00					.byte	0											; $ae
>1912	00					.byte	0											; $af
>1913	00					.byte	0											; $b0
>1914	00					.byte	0											; $b1
>1915	00					.byte	0											; $b2
>1916	00					.byte	0											; $b3
>1917	00					.byte	0											; $b4
>1918	00					.byte	0											; $b5
>1919	00					.byte	0											; $b6
>191a	00					.byte	0											; $b7
>191b	00					.byte	0											; $b8
>191c	00					.byte	0											; $b9
>191d	00					.byte	0											; $ba
>191e	00					.byte	0											; $bb
>191f	00					.byte	0											; $bc
>1920	00					.byte	0											; $bd
>1921	00					.byte	0											; $be
>1922	00					.byte	0											; $bf
>1923	00					.byte	0											; $c0
>1924	00					.byte	0											; $c1
>1925	00					.byte	0											; $c2
>1926	00					.byte	0											; $c3
>1927	00					.byte	0											; $c4
>1928	00					.byte	0											; $c5
>1929	00					.byte	0											; $c6
>192a	00					.byte	0											; $c7
>192b	00					.byte	0											; $c8
>192c	00					.byte	0											; $c9
>192d	00					.byte	0											; $ca
>192e	00					.byte	0											; $cb
>192f	00					.byte	0											; $cc
>1930	00					.byte	0											; $cd
>1931	00					.byte	0											; $ce
>1932	00					.byte	0											; $cf
>1933	00					.byte	0											; $d0
>1934	00					.byte	0											; $d1
>1935	00					.byte	0											; $d2
>1936	00					.byte	0											; $d3
>1937	00					.byte	0											; $d4
>1938	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>193e	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1944	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>194c	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1953	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1959	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>195f	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1964	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1969	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>196e	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1973	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1978	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>197e	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1983	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>198b	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1992	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1997	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>199c	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>19a2	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>19a7	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>19ad	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>19b2	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>19b8	01 28					.byte	$01,$28                                 	; $eb (
>19ba	01 24					.byte	$01,$24                                 	; $ec $
>19bc	00					.byte	$00                                     	; $ed [[decimal]]
>19bd	00					.byte	$00                                     	; $ee [[string]]
>19be	01 3d					.byte	$01,$3d                                 	; $ef =
>19c0	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>19c3	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>19c6	01 3c					.byte	$01,$3c                                 	; $f2 <
>19c8	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>19cb	01 3e					.byte	$01,$3e                                 	; $f4 >
>19cd	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>19d1	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>19d4	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>19d8	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>19dc	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>19e0	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>19e3	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>19e6	01 2f					.byte	$01,$2f                                 	; $fc /
>19e8	01 2a					.byte	$01,$2a                                 	; $fd *
>19ea	01 2d					.byte	$01,$2d                                 	; $fe -
>19ec	01 2b					.byte	$01,$2b                                 	; $ff +
>19ee	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.19ef					VectorTable:
>19ef	8b 21					.word	Command_REPEAT           ; $80 REPEAT
>19f1	94 21					.word	Command_UNTIL            ; $81 UNTIL
>19f3	6c 22					.word	Command_WHILE            ; $82 WHILE
>19f5	8b 22					.word	Command_WEND             ; $83 WEND
>19f7	63 21					.word	IfCommand                ; $84 IF
>19f9	8a 21					.word	EndIf                    ; $85 ENDIF
>19fb	00 20					.word	Command_DO               ; $86 DO
>19fd	18 20					.word	Command_LOOP             ; $87 LOOP
>19ff	0c 13					.word	NoExec08                 ; $88 PROC
>1a01	f4 1f					.word	Command_ENDPROC          ; $89 ENDPROC
>1a03	21 20					.word	Command_FOR              ; $8a FOR
>1a05	ae 20					.word	Command_NEXT             ; $8b NEXT
>1a07	b0 12					.word	RUNEndOfLine             ; $8c [[END]]
>1a09	ee 12					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1a0b	83 21					.word	ElseCode                 ; $8e ELSE
>1a0d	0c 13					.word	NoExec01                 ; $8f THEN
>1a0f	0c 13					.word	NoExec02                 ; $90 TO
>1a11	0c 13					.word	NoExec03                 ; $91 STEP
>1a13	16 12					.word	CommandLET               ; $92 LET
>1a15	b1 11					.word	Command_Print            ; $93 PRINT
>1a17	f5 2d					.word	NotImplemented           ; $94 INPUT
>1a19	b8 1f					.word	Command_CALL             ; $95 CALL
>1a1b	f7 12					.word	Command_Sys              ; $96 SYS
>1a1d	97 12					.word	Command_REM              ; $97 REM
>1a1f	09 20					.word	Command_EXIT             ; $98 EXIT
>1a21	0c 13					.word	NoExec04                 ; $99 ,
>1a23	0c 13					.word	NoExec05                 ; $9a ;
>1a25	0c 13					.word	NoExec06                 ; $9b :
>1a27	97 12					.word	Command_REM2             ; $9c '
>1a29	0c 13					.word	NoExec07                 ; $9d )
>1a2b	6b 10					.word	CommandDIM               ; $9e DIM
>1a2d	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>1a2f	8e 12					.word	Command_NEW              ; $a0 NEW
>1a31	a4 12					.word	Command_RUN              ; $a1 RUN
>1a33	f4 12					.word	Command_STOP             ; $a2 STOP
>1a35	f1 12					.word	Command_END              ; $a3 END
>1a37	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1a39	f5 2d					.word	NotImplemented           ; $a5 LIST
>1a3b	f5 2d					.word	NotImplemented           ; $a6 SAVE
>1a3d	f5 2d					.word	NotImplemented           ; $a7 LOAD
>1a3f	8a 11					.word	Command_Poke             ; $a8 POKE
>1a41	87 11					.word	Command_Doke             ; $a9 DOKE
>1a43	f5 2d					.word	NotImplemented           ; $aa
>1a45	f5 2d					.word	NotImplemented           ; $ab
>1a47	f5 2d					.word	NotImplemented           ; $ac
>1a49	f5 2d					.word	NotImplemented           ; $ad
>1a4b	f5 2d					.word	NotImplemented           ; $ae
>1a4d	f5 2d					.word	NotImplemented           ; $af
>1a4f	f5 2d					.word	NotImplemented           ; $b0
>1a51	f5 2d					.word	NotImplemented           ; $b1
>1a53	f5 2d					.word	NotImplemented           ; $b2
>1a55	f5 2d					.word	NotImplemented           ; $b3
>1a57	f5 2d					.word	NotImplemented           ; $b4
>1a59	f5 2d					.word	NotImplemented           ; $b5
>1a5b	f5 2d					.word	NotImplemented           ; $b6
>1a5d	f5 2d					.word	NotImplemented           ; $b7
>1a5f	f5 2d					.word	NotImplemented           ; $b8
>1a61	f5 2d					.word	NotImplemented           ; $b9
>1a63	f5 2d					.word	NotImplemented           ; $ba
>1a65	f5 2d					.word	NotImplemented           ; $bb
>1a67	f5 2d					.word	NotImplemented           ; $bc
>1a69	f5 2d					.word	NotImplemented           ; $bd
>1a6b	f5 2d					.word	NotImplemented           ; $be
>1a6d	f5 2d					.word	NotImplemented           ; $bf
>1a6f	f5 2d					.word	NotImplemented           ; $c0
>1a71	f5 2d					.word	NotImplemented           ; $c1
>1a73	f5 2d					.word	NotImplemented           ; $c2
>1a75	f5 2d					.word	NotImplemented           ; $c3
>1a77	f5 2d					.word	NotImplemented           ; $c4
>1a79	f5 2d					.word	NotImplemented           ; $c5
>1a7b	f5 2d					.word	NotImplemented           ; $c6
>1a7d	f5 2d					.word	NotImplemented           ; $c7
>1a7f	f5 2d					.word	NotImplemented           ; $c8
>1a81	f5 2d					.word	NotImplemented           ; $c9
>1a83	f5 2d					.word	NotImplemented           ; $ca
>1a85	f5 2d					.word	NotImplemented           ; $cb
>1a87	f5 2d					.word	NotImplemented           ; $cc
>1a89	f5 2d					.word	NotImplemented           ; $cd
>1a8b	f5 2d					.word	NotImplemented           ; $ce
>1a8d	f5 2d					.word	NotImplemented           ; $cf
>1a8f	f5 2d					.word	NotImplemented           ; $d0
>1a91	f5 2d					.word	NotImplemented           ; $d1
>1a93	f5 2d					.word	NotImplemented           ; $d2
>1a95	f5 2d					.word	NotImplemented           ; $d3
>1a97	f5 2d					.word	NotImplemented           ; $d4
>1a99	6f 16					.word	EXPUnaryDeek             ; $d5 DEEK(
>1a9b	61 16					.word	EXPUnaryPeek             ; $d6 PEEK(
>1a9d	9c 17					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1a9f	8f 17					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1aa1	b6 17					.word	EXPUnaryMid              ; $d9 MID$(
>1aa3	4d 17					.word	EXPUnaryStr              ; $da STR$(
>1aa5	18 18					.word	EXPUnaryVal              ; $db VAL(
>1aa7	1a 17					.word	EXPUnarySgn              ; $dc SGN(
>1aa9	df 15					.word	EXPUnaryAbs              ; $dd ABS(
>1aab	9f 16					.word	EXPUnaryLen              ; $de LEN(
>1aad	30 17					.word	EXPUnarySqr              ; $df SQR(
>1aaf	ff 15					.word	EXPUnaryChr              ; $e0 CHR$(
>1ab1	e9 15					.word	EXPUnaryAsc              ; $e1 ASC(
>1ab3	f5 2d					.word	NotImplemented           ; $e2 INKEY$(
>1ab5	f5 2d					.word	NotImplemented           ; $e3 EVENT(
>1ab7	f5 2d					.word	NotImplemented           ; $e4 TIME
>1ab9	95 16					.word	EXPUnaryInt              ; $e5 INT(
>1abb	8b 16					.word	EXPUnaryFrac             ; $e6 FRAC(
>1abd	10 16					.word	EXPUnaryDec              ; $e7 DEC(
>1abf	3f 17					.word	EXPUnaryHex              ; $e8 HEX$(
>1ac1	b4 16					.word	EXPUnaryRnd              ; $e9 RND(
>1ac3	c4 16					.word	ExpUnaryRand             ; $ea RAND(
>1ac5	ad 16					.word	EXPUnaryParenthesis      ; $eb (
>1ac7	87 16					.word	EXPUnaryNull             ; $ec $
>1ac9	5e 16					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1acb	74 17					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1acd	c9 13					.word	EXPCompareEqual          ; $ef =
>1acf	e4 13					.word	EXPCompareNotEqual       ; $f0 <>
>1ad1	ed 13					.word	EXPCompareLessEqual      ; $f1 <=
>1ad3	d2 13					.word	EXPCompareLess           ; $f2 <
>1ad5	f6 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>1ad7	db 13					.word	EXPCompareGreater        ; $f4 >
>1ad9	76 13					.word	EXPBinXor                ; $f5 XOR
>1adb	6a 13					.word	EXPBinOr                 ; $f6 OR
>1add	5e 13					.word	EXPBinAnd                ; $f7 AND
>1adf	36 13					.word	EXPBinIDiv               ; $f8 DIV
>1ae1	47 13					.word	EXPBinIMod               ; $f9 MOD
>1ae3	41 14					.word	EXPBinLeft               ; $fa <<
>1ae5	49 14					.word	EXPBinRight              ; $fb >>
>1ae7	2a 13					.word	EXPBinFDiv               ; $fc /
>1ae9	21 13					.word	EXPBinMul                ; $fd *
>1aeb	18 13					.word	EXPBinSub                ; $fe -
>1aed	0f 13					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1aef					TOKDetokenise:
.1aef	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.1af1	84 23		sty $23				sty 	zTemp2+1
.1af3	9c 0d 04	stz $040d			stz		TOKLastCharacter 			; clear last character
.1af6					_TOKDLoop:
.1af6	20 25 1b	jsr $1b25			jsr 	TOKDGet 					; get next
.1af9	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1afb	f0 26		beq $1b23			beq 	_TOKDExit
.1afd	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1aff	f0 1d		beq $1b1e			beq 	_TOKDDataItem
.1b01	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1b03	f0 19		beq $1b1e			beq 	_TOKDDataItem
.1b05	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1b07	10 05		bpl $1b0e			bpl 	_TOKDNotToken
.1b09	20 ed 1b	jsr $1bed			jsr 	TOKDToken 					; token to text.
.1b0c	80 e8		bra $1af6			bra 	_TOKDLoop
.1b0e					_TOKDNotToken:
.1b0e	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1b10	90 05		bcc $1b17			bcc 	_TOKDNotIdentifier
.1b12	20 60 1b	jsr $1b60			jsr 	TOKDIdentifier
.1b15	80 df		bra $1af6			bra 	_TOKDLoop
.1b17					_TOKDNotIdentifier:
.1b17	a0 0a		ldy #$0a			ldy 	#10
.1b19	20 a9 1b	jsr $1ba9			jsr 	TOKDInteger
.1b1c	80 d8		bra $1af6			bra 	_TOKDLoop
.1b1e					_TOKDDataItem:
.1b1e	20 3b 1b	jsr $1b3b			jsr 	TOKDDataItem
.1b21	80 d3		bra $1af6			bra 	_TOKDLoop
.1b23					_TOKDExit:
.1b23	18		clc				clc
.1b24	60		rts				rts
.1b25	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.1b27	e6 22		inc $22				inc 	zTemp2
.1b29	d0 02		bne $1b2d			bne 	_TKDGExit
.1b2b	e6 23		inc $23				inc 	zTemp2+1
.1b2d					_TKDGExit:
.1b2d	60		rts				rts
.1b2e					TOKDOutput:
.1b2e	8d 0d 04	sta $040d			sta 	TOKLastCharacter
.1b31	6c 0b 04	jmp ($040b)			jmp 	(TOKOutputMethod)
.1b34					TOKSetDetokeniseOutput:
.1b34	8e 0b 04	stx $040b			stx 	TOKOutputMethod
.1b37	8c 0c 04	sty $040c			sty 	TOKOutputMethod+1
.1b3a	60		rts				rts
.040b					TOKOutputMethod:
>040b							.fill 	2
.040d					TOKLastCharacter:
>040d							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1b3b					TOKDDataItem:
.1b3b	a8		tay				tay 								; type in Y
.1b3c	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1b3e	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1b40	f0 02		beq $1b44			beq 	_TOKDDIsString
.1b42	a9 2e		lda #$2e			lda 	#'.'
.1b44					_TOKDDIsString:
.1b44	20 2e 1b	jsr $1b2e			jsr 	TOKDOutput 					; dump it
.1b47	20 25 1b	jsr $1b25			jsr 	TOKDGet 					; get length into X
.1b4a	aa		tax				tax
.1b4b					_TOKDDOutput:
.1b4b	ca		dex				dex 								; are we complete
.1b4c	30 08		bmi $1b56			bmi 	_TOKDDEnd
.1b4e	20 25 1b	jsr $1b25			jsr 	TOKDGet 					; get character and output it
.1b51	20 2e 1b	jsr $1b2e			jsr 	TOKDOutput
.1b54	80 f5		bra $1b4b			bra 	_TOKDDOutput
.1b56					_TOKDDEnd:
.1b56	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1b58	d0 05		bne $1b5f			bne 	_TOKDDNotString
.1b5a	a9 22		lda #$22			lda 	#'"'
.1b5c	20 2e 1b	jsr $1b2e			jsr 	TOKDOutput
.1b5f					_TOKDDNotString:
.1b5f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1b60					TOKDIdentifier:
.1b60	a0 ff		ldy #$ff			ldy 	#$FF
.1b62	8c 0e 04	sty $040e			sty 	TOKDIFirstChar
.1b65					_TOKDLoop:
.1b65	a8		tay				tay 								; token in Y
.1b66	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1b68	c0 64		cpy #$64			cpy 	#$64
.1b6a	f0 11		beq $1b7d			beq 	_TOKDIOutput
.1b6c	a9 5f		lda #$5f			lda 	#'_'
.1b6e	c0 65		cpy #$65			cpy 	#$65
.1b70	f0 0b		beq $1b7d			beq 	_TOKDIOutput
.1b72	98		tya				tya 								; handle a-z
.1b73	18		clc				clc
.1b74	69 21		adc #$21			adc	 	#$21
.1b76	c0 5a		cpy #$5a			cpy 	#$5A
.1b78	90 03		bcc $1b7d			bcc 	_TOKDIOutput
.1b7a	38		sec				sec 								; handle 0-9
.1b7b	e9 4b		sbc #$4b			sbc 	#$4B
.1b7d					_TOKDIOutput:
.1b7d	2c 0e 04	bit $040e			bit 	TOKDIFirstChar
.1b80	10 08		bpl $1b8a			bpl 	_TOKDINoSpacing
.1b82	48		pha				pha
.1b83	20 1f 1c	jsr $1c1f			jsr 	TOKDSpacing
.1b86	9c 0e 04	stz $040e			stz 	TOKDIFirstChar
.1b89	68		pla				pla
.1b8a					_TOKDINoSpacing:
.1b8a	20 2e 1b	jsr $1b2e			jsr 	TOKDOutput
.1b8d	20 25 1b	jsr $1b25			jsr 	TOKDGet 					; get next token
.1b90	c9 7c		cmp #$7c			cmp 	#$7C
.1b92	90 d1		bcc $1b65			bcc 	_TOKDLoop
.1b94	f0 12		beq $1ba8			beq 	_TOKDIExit 					; it's a number, no tail.
.1b96	4a		lsr a				lsr 	a 							; string ?
.1b97	90 07		bcc $1ba0			bcc 	_TOKDICheckArray
.1b99	48		pha				pha
.1b9a	a9 24		lda #$24			lda 	#"$"
.1b9c	20 2e 1b	jsr $1b2e			jsr 	TOKDOutput
.1b9f	68		pla				pla
.1ba0					_TOKDICheckArray:
.1ba0	4a		lsr a				lsr 	a 							; array ?
.1ba1	90 05		bcc $1ba8			bcc 	_TOKDIExit
.1ba3	a9 28		lda #$28			lda 	#"("
.1ba5	20 2e 1b	jsr $1b2e			jsr 	TOKDOutput
.1ba8					_TOKDIExit:
.1ba8	60		rts				rts
.040e					TOKDIFirstChar:
>040e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1ba9					TOKDInteger:
.1ba9	5a		phy				phy 								; save base
.1baa	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1bac	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.1baf					_TOKDILoop:
.1baf	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1bb1	c9 40		cmp #$40			cmp 	#$40
.1bb3	b0 1d		bcs $1bd2			bcs 	_TOKDIHaveInteger
.1bb5	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1bb7	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1bba	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1bbd	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1bc0	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1bc3	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1bc6	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1bc9	20 25 1b	jsr $1b25			jsr 	TOKDGet 					; OR byte in.
.1bcc	05 0c		ora $0c				ora 	IFR0+IM0
.1bce	85 0c		sta $0c				sta 	IFR0+IM0
.1bd0	80 dd		bra $1baf			bra 	_TOKDILoop
.1bd2					_TOKDIHaveInteger:
.1bd2	7a		ply				ply 								; restore base
.1bd3	98		tya				tya 								; base in A
.1bd4	20 b8 2a	jsr $2ab8			jsr 	IFloatIntegerToStringR0
.1bd7	86 1e		stx $1e				stx 	zTemp0
.1bd9	84 1f		sty $1f				sty 	zTemp0+1
.1bdb	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bdd	20 1f 1c	jsr $1c1f			jsr 	TOKDSpacing 				; check spacing okay.
.1be0	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1be2					_TOKDOutput:
.1be2	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1be4	20 2e 1b	jsr $1b2e			jsr 	TOKDOutput
.1be7	c8		iny				iny
.1be8	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1bea	d0 f6		bne $1be2			bne 	_TOKDOutput
.1bec	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1bed					TOKDToken:
.1bed	a2 53		ldx #$53			ldx 	#StandardTokens & $FF
.1bef	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1bf1					_TOKDSearch:
.1bf1	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1bf3	84 1f		sty $1f				sty 	zTemp0+1
.1bf5	aa		tax				tax 								; token ID in X.
.1bf6					_TOKDFind:
.1bf6	ca		dex				dex 								; reached the start
.1bf7	10 0d		bpl $1c06			bpl 	_TOKDFound
.1bf9	38		sec				sec 								; go to next entry
.1bfa	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bfc	65 1e		adc $1e				adc 	zTemp0
.1bfe	85 1e		sta $1e				sta 	zTemp0
.1c00	90 f4		bcc $1bf6			bcc 	_TOKDFind
.1c02	e6 1f		inc $1f				inc 	zTemp0+1
.1c04	80 f0		bra $1bf6			bra 	_TOKDFind
.1c06					_TOKDFound:
.1c06	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1c08	f0 14		beq $1c1e			beq 	_TOKDExit
.1c0a	aa		tax				tax
.1c0b	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1c0d	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1c0f	20 1f 1c	jsr $1c1f			jsr 	TOKDSpacing
.1c12					_TOKDOutput:
.1c12	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1c14	20 73 1f	jsr $1f73			jsr 	TOKToLower
.1c17	20 2e 1b	jsr $1b2e			jsr 	TOKDOutput
.1c1a	c8		iny				iny
.1c1b	ca		dex				dex
.1c1c	d0 f4		bne $1c12			bne 	_TOKDOutput
.1c1e					_TOKDExit:
.1c1e	60		rts				rts
.1c1f					TOKDSpacing:
.1c1f	20 8a 1f	jsr $1f8a			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1c22	90 0d		bcc $1c31			bcc 	_TOKDSExit
.1c24	ad 0d 04	lda $040d			lda 	TOKLastCharacter			; and last character also alphanumeric
.1c27	20 8a 1f	jsr $1f8a			jsr 	TOKIsIdentifierElement
.1c2a	90 05		bcc $1c31			bcc 	_TOKDSExit
.1c2c	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1c2e	20 2e 1b	jsr $1b2e			jsr 	TOKDOutput
.1c31					_TOKDSExit:
.1c31	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1c32					PGMDeleteLine:
.1c32	20 e5 1c	jsr $1ce5			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c35	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c37	ad 0f 04	lda $040f			lda 	PGMBaseHigh
.1c3a	85 21		sta $21				sta 	zTemp1+1
.1c3c					_PGMDLoop:
.1c3c	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1c3e	38		sec				sec
.1c3f	f0 3a		beq $1c7b			beq 	_PGMDExit
.1c41	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1c43	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c45	cd 01 03	cmp $0301			cmp 	TOKLineNumber
.1c48	d0 08		bne $1c52			bne 	_PGMDNext
.1c4a	c8		iny				iny
.1c4b	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c4d	cd 02 03	cmp $0302			cmp 	TOKLineNumber+1
.1c50	f0 0d		beq $1c5f			beq 	_PGMDDelete
.1c52					_PGMDNext:
.1c52	18		clc				clc
.1c53	b2 20		lda ($20)			lda 	(zTemp1)
.1c55	65 20		adc $20				adc 	zTemp1
.1c57	85 20		sta $20				sta 	zTemp1
.1c59	90 e1		bcc $1c3c			bcc 	_PGMDLoop
.1c5b	e6 21		inc $21				inc 	zTemp1+1
.1c5d	80 dd		bra $1c3c			bra 	_PGMDLoop
.1c5f					_PGMDDelete:
.1c5f	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1c61	a8		tay				tay
.1c62					_PGMDCopy:
.1c62	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1c64	92 20		sta ($20)			sta 	(zTemp1)
.1c66	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1c68	c5 1e		cmp $1e				cmp 	zTemp0
.1c6a	d0 07		bne $1c73			bne 	_PGMDNext2
.1c6c	a5 21		lda $21				lda 	zTemp1+1
.1c6e	c5 1f		cmp $1f				cmp 	zTemp0+1
.1c70	18		clc				clc
.1c71	f0 08		beq $1c7b			beq 	_PGMDExit
.1c73					_PGMDNext2:
.1c73	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1c75	d0 eb		bne $1c62			bne 	_PGMDCopy
.1c77	e6 21		inc $21				inc 	zTemp1+1
.1c79	80 e7		bra $1c62			bra 	_PGMDCopy
.1c7b					_PGMDExit:
.1c7b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1c7c					PGMInsertLine:
.1c7c	20 e5 1c	jsr $1ce5			jsr 	PGMEndProgram 				; end of program into zTemp0
.1c7f	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1c81	ad 0f 04	lda $040f			lda 	PGMBaseHigh
.1c84	85 21		sta $21				sta 	zTemp1+1
.1c86					_PGMILoop:
.1c86	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1c88	f0 1c		beq $1ca6			beq 	_PGMIInsert
.1c8a	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1c8c	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c8e	cd 01 03	cmp $0301			cmp 	TOKLineNumber
.1c91	c8		iny				iny
.1c92	b1 20		lda ($20),y			lda 	(zTemp1),y
.1c94	ed 02 03	sbc $0302			sbc 	TOKLineNumber+1
.1c97	b0 0d		bcs $1ca6			bcs 	_PGMIInsert 				; insert here.
.1c99	18		clc				clc
.1c9a	b2 20		lda ($20)			lda 	(zTemp1)
.1c9c	65 20		adc $20				adc 	zTemp1
.1c9e	85 20		sta $20				sta 	zTemp1
.1ca0	90 e4		bcc $1c86			bcc 	_PGMILoop
.1ca2	e6 21		inc $21				inc 	zTemp1+1
.1ca4	80 e0		bra $1c86			bra 	_PGMILoop
.1ca6					_PGMIInsert:
.1ca6	ac 00 03	ldy $0300			ldy 	TOKLineSize 				; space required
.1ca9					_PGMIInsertLoop:
.1ca9	b2 1e		lda ($1e)			lda 	(zTemp0)
.1cab	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1cad	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1caf	c5 1e		cmp $1e				cmp 	zTemp0
.1cb1	d0 06		bne $1cb9			bne 	_PGMINext
.1cb3	a5 21		lda $21				lda 	zTemp1+1
.1cb5	c5 1f		cmp $1f				cmp 	zTemp0+1
.1cb7	f0 0a		beq $1cc3			beq 	_PGMIInserted
.1cb9					_PGMINext:
.1cb9	a5 1e		lda $1e				lda 	zTemp0
.1cbb	d0 02		bne $1cbf			bne 	_PGMINoBorrow
.1cbd	c6 1f		dec $1f				dec 	zTemp0+1
.1cbf					_PGMINoBorrow:
.1cbf	c6 1e		dec $1e				dec 	zTemp0
.1cc1	80 e6		bra $1ca9			bra 	_PGMIInsertLoop
.1cc3					_PGMIInserted:
.1cc3	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1cc5					_PGMICopyLoop:
.1cc5	b9 00 03	lda $0300,y			lda 	TOKLineSize,y
.1cc8	91 20		sta ($20),y			sta 	(zTemp1),y
.1cca	c8		iny				iny
.1ccb	cc 00 03	cpy $0300			cpy 	TOKLineSize
.1cce	d0 f5		bne $1cc5			bne 	_PGMICopyLoop
.1cd0	18		clc				clc
.1cd1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1cd2					PGMSetBaseAddress:
.1cd2	8e 0f 04	stx $040f			stx 	PGMBaseHigh
.1cd5	8c 10 04	sty $0410			sty 	PGMEndMemoryHigh
.1cd8	60		rts				rts
.1cd9					PGMNewProgram:
.1cd9	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1cdb	ad 0f 04	lda $040f			lda 	PGMBaseHigh
.1cde	85 1f		sta $1f				sta 	zTemp0+1
.1ce0	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1ce2	92 1e		sta ($1e)			sta 	(zTemp0)
.1ce4	60		rts				rts
.1ce5					PGMEndProgram:
.1ce5	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1ce7	ad 0f 04	lda $040f			lda 	PGMBaseHigh
.1cea	85 1f		sta $1f				sta 	zTemp0+1
.1cec					_PGMEPLoop:
.1cec	b2 1e		lda ($1e)			lda 	(zTemp0)
.1cee	f0 0b		beq $1cfb			beq 	_PGMEPExit
.1cf0	18		clc				clc
.1cf1	65 1e		adc $1e				adc 	zTemp0
.1cf3	85 1e		sta $1e				sta 	zTemp0
.1cf5	90 f5		bcc $1cec			bcc 	_PGMEPLoop
.1cf7	e6 1f		inc $1f				inc 	zTemp0+1
.1cf9	80 f1		bra $1cec			bra 	_PGMEPLoop
.1cfb					_PGMEPExit:
.1cfb	60		rts				rts
.040f					PGMBaseHigh:
>040f							.fill 	1
.0410					PGMEndMemoryHigh:
>0410							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1cfc					TOKResetElement:
.1cfc	9c 11 04	stz $0411			stz 	TOKElement
.1cff	60		rts				rts
.1d00					TOKWriteElement:
.1d00	da		phx				phx
.1d01	ae 11 04	ldx $0411			ldx 	TOKElement
.1d04	9d 12 04	sta $0412,x			sta 	TOKElementText,x
.1d07	9e 13 04	stz $0413,x			stz 	TOKElementText+1,x
.1d0a	fa		plx				plx
.1d0b	ee 11 04	inc $0411			inc 	TOKElement
.1d0e	60		rts				rts
.0411					TOKElement:
>0411							.fill 	1
.0412					TOKElementText:
>0412							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1d0f					TOKTokeniseConstant:
.1d0f	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1d11	48		pha				pha 								; save on stack
.1d12	29 c0		and #$c0			and 	#$C0
.1d14	05 0d		ora $0d				ora 	IFR0+IM1
.1d16	05 0e		ora $0e				ora 	IFR0+IM2
.1d18	f0 10		beq $1d2a			beq 	_TTCLess
.1d1a	da		phx				phx
.1d1b	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1d1d					_TTCShiftRight:
.1d1d	46 0e		lsr $0e				lsr 	IFR0+IM2
.1d1f	66 0d		ror $0d				ror 	IFR0+IM1
.1d21	66 0c		ror $0c				ror 	IFR0+IM0
.1d23	ca		dex				dex
.1d24	d0 f7		bne $1d1d			bne 	_TTCShiftRight
.1d26	fa		plx				plx
.1d27	20 0f 1d	jsr $1d0f			jsr 	TOKTokeniseConstant
.1d2a					_TTCLess:
.1d2a	68		pla				pla
.1d2b	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1d2d	20 c6 1d	jsr $1dc6			jsr 	TOKWriteA
.1d30	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1d31					TOKTokeniseDecimals:
.1d31	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext 					; consume the .
.1d34	20 00 1f	jsr $1f00			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1d37	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1d39	20 c6 1d	jsr $1dc6			jsr 	TOKWriteA
.1d3c	20 41 1d	jsr $1d41			jsr 	TOKOutputElementBuffer 		; then the buffer
.1d3f	18		clc				clc
.1d40	60		rts				rts
.1d41					TOKOutputElementBuffer:
.1d41	ad 11 04	lda $0411			lda 	TOKElement 					; get count and write that
.1d44	20 c6 1d	jsr $1dc6			jsr 	TOKWriteA
.1d47	a8		tay				tay 								; put in Y
.1d48	f0 0c		beq $1d56			beq 	_TOEExit 					; exit if empty which is okay.
.1d4a	a2 01		ldx #$01			ldx 	#1
.1d4c					_TOELoop:
.1d4c	bd 11 04	lda $0411,x			lda 	TOKElement,x
.1d4f	20 c6 1d	jsr $1dc6			jsr 	TOKWriteA
.1d52	e8		inx				inx
.1d53	88		dey				dey
.1d54	d0 f6		bne $1d4c			bne 	_TOELoop
.1d56					_TOEExit:
.1d56	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1d57					TOKTokenise:
.1d57	8c 12 05	sty $0512			sty 	TOKDataSource+1 			; save source routine pointer
.1d5a	8e 11 05	stx $0511			stx 	TOKDataSource
.1d5d	a9 01		lda #$01			lda 	#1 							; set first element flag.
.1d5f	8d 13 05	sta $0513			sta 	TOKIsFirstElement
.1d62	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1d64	8d 00 03	sta $0300			sta 	TOKLineSize 				; line length itself and the line numbers.
.1d67					_TOKMainLoop:
.1d67	20 d2 1d	jsr $1dd2			jsr 	TOKGet 						; what follows.
.1d6a	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1d6c	f0 4f		beq $1dbd			beq 	_TOKExit
.1d6e	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1d70	d0 05		bne $1d77			bne 	_TOKElement
.1d72	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext
.1d75	80 f0		bra $1d67			bra 	_TOKMainLoop
.1d77					_TOKElement:
.1d77	20 7e 1f	jsr $1f7e			jsr 	TOKIsDigit 					; is it 0..9
.1d7a	90 0a		bcc $1d86			bcc 	_TOKNotDigit
.1d7c	20 d7 1e	jsr $1ed7			jsr 	TOKTokeniseInteger 			; get integer
.1d7f	b0 43		bcs $1dc4			bcs 	_TOKFail 					; did it fail ?
.1d81	9c 13 05	stz $0513			stz 	TOKIsFirstElement 			; clear first element flag
.1d84	80 e1		bra $1d67			bra 	_TOKMainLoop
.1d86					_TOKNotDigit:
.1d86	9c 13 05	stz $0513			stz 	TOKIsFirstElement 			; clear first element flag
.1d89	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1d8b	d0 07		bne $1d94			bne 	_TOKNotHex
.1d8d	20 1f 1e	jsr $1e1f			jsr 	TOKTokeniseHexadecimal
.1d90	b0 32		bcs $1dc4			bcs 	_TOKFail
.1d92	80 d3		bra $1d67			bra 	_TOKMainLoop
.1d94					_TOKNotHex:
.1d94	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1d96	d0 07		bne $1d9f			bne 	_TOKNotDecimal
.1d98	20 31 1d	jsr $1d31			jsr 	TOKTokeniseDecimals
.1d9b	b0 27		bcs $1dc4			bcs 	_TOKFail
.1d9d	80 c8		bra $1d67			bra 	_TOKMainLoop
.1d9f					_TOKNotDecimal:
.1d9f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1da1	d0 07		bne $1daa			bne 	_TOKNotString
.1da3	20 45 1f	jsr $1f45			jsr 	TOKTokeniseString
.1da6	b0 1c		bcs $1dc4			bcs 	_TOKFail
.1da8	80 bd		bra $1d67			bra 	_TOKMainLoop
.1daa					_TOKNotString:
.1daa	20 9b 1f	jsr $1f9b			jsr 	TOKIsAlpha 					; identifier ?
.1dad	b0 07		bcs $1db6			bcs 	_TOKIdentifier
.1daf	20 14 1f	jsr $1f14			jsr 	TOKTokenisePunctuation 		; punctuation
.1db2	b0 10		bcs $1dc4			bcs 	_TOKFail
.1db4	80 b1		bra $1d67			bra 	_TOKMainLoop
.1db6					_TOKIdentifier:
.1db6	20 59 1e	jsr $1e59			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1db9	b0 09		bcs $1dc4			bcs 	_TOKFail
.1dbb	80 aa		bra $1d67			bra 	_TOKMainLoop
.1dbd					_TOKExit:
.1dbd	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1dbf	20 c6 1d	jsr $1dc6			jsr 	TOKWriteA
.1dc2	18		clc				clc									; return with carry set.
.1dc3	60		rts				rts
.1dc4					_TOKFail:
.1dc4	38		sec				sec
.1dc5	60		rts				rts
.1dc6					TOKWriteA:
.1dc6	da		phx				phx
.1dc7	ae 00 03	ldx $0300			ldx 	TOKLineSize
.1dca	9d 00 03	sta $0300,x			sta 	TOKLineSize,x
.1dcd	fa		plx				plx
.1dce	ee 00 03	inc $0300			inc 	TOKLineSize
.1dd1	60		rts				rts
.1dd2					TOKGet:
.1dd2	18		clc				clc
.1dd3	6c 11 05	jmp ($0511)			jmp 	(TOKDataSource)
.1dd6					TOKGetNext:
.1dd6	38		sec				sec
.1dd7	6c 11 05	jmp ($0511)			jmp 	(TOKDataSource)
.0511					TOKDataSource:
>0511							.fill 	2
.0513					TOKIsFirstElement:
>0513							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1dda					TOKFindToken:
.1dda	a2 53		ldx #$53			ldx 	#StandardTokens & $FF 		; do this table
.1ddc	a0 18		ldy #$18			ldy 	#StandardTokens >> 8
.1dde	20 e9 1d	jsr $1de9			jsr 	TOKFindTokenXY 				; find it, or not
.1de1	90 04		bcc $1de7			bcc 	_TOKFTFail
.1de3	a2 00		ldx #$00			ldx 	#0
.1de5	38		sec				sec
.1de6	60		rts				rts
.1de7					_TOKFTFail
.1de7	18		clc				clc
.1de8	60		rts				rts
.1de9					TOKFindTokenXY:
.1de9	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1deb	84 1f		sty $1f				sty 	zTemp0+1
.1ded	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1def	8d 14 05	sta $0514			sta 	TOKCurrent
.1df2					_TOKFindLoop:
.1df2	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1df4	18		clc				clc 		 						; clear carry in case of fail
.1df5	30 17		bmi $1e0e			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1df7	cd 11 04	cmp $0411			cmp 	TOKElement 					; compare against the element length
.1dfa	d0 13		bne $1e0f			bne 	_TOKNext 					; different, try next.
.1dfc	aa		tax				tax 								; number of chars to compare.
.1dfd	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1dff					_TOKCompare:
.1dff	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1e01	d9 11 04	cmp $0411,y			cmp 	TOKElementText-1,y
.1e04	d0 09		bne $1e0f			bne 	_TOKNext 					; different ? try next
.1e06	c8		iny				iny 								; compare next two
.1e07	ca		dex				dex
.1e08	d0 f5		bne $1dff			bne 	_TOKCompare 				; until done X characters.
.1e0a	38		sec				sec
.1e0b	ad 14 05	lda $0514			lda 	TOKCurrent 					; return current ID.
.1e0e					_TOKExit:
.1e0e	60		rts				rts
.1e0f					_TOKNext:
.1e0f	ee 14 05	inc $0514			inc 	TOKCurrent 					; increment token #
.1e12	38		sec				sec 								; add length+1 to ptr
.1e13	b2 1e		lda ($1e)			lda 	(zTemp0)
.1e15	65 1e		adc $1e				adc 	zTemp0
.1e17	85 1e		sta $1e				sta 	zTemp0
.1e19	90 d7		bcc $1df2			bcc 	_TOKFindLoop
.1e1b	e6 1f		inc $1f				inc 	zTemp0+1
.1e1d	80 d3		bra $1df2			bra 	_TOKFindLoop
.0514					TOKCurrent:
>0514							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1e1f					TOKTokeniseHexadecimal:
.1e1f	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext 					; consume the $
.1e22	a2 0c		ldx #$0c			ldx 	#IFR0
.1e24	20 17 2d	jsr $2d17			jsr 	IFloatSetZero 				; set R0 = 0
.1e27					_TTHLoop:
.1e27	20 d2 1d	jsr $1dd2			jsr 	TOKGet 						; keep getting and copying while numeric.
.1e2a	20 a8 1f	jsr $1fa8			jsr 	TOKIsHexadecimal
.1e2d	90 20		bcc $1e4f			bcc 	_TTHDone
.1e2f	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1e31	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1e34	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1e37	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1e3a	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.1e3d	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext
.1e40	38		sec				sec 								; convert to decimal.
.1e41	e9 30		sbc #$30			sbc 	#48
.1e43	c9 0a		cmp #$0a			cmp 	#10
.1e45	90 02		bcc $1e49			bcc 	_TTHNotAlpha
.1e47	e9 07		sbc #$07			sbc 	#7
.1e49					_TTHNotAlpha:
.1e49	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1e4b	85 0c		sta $0c				sta 	IFR0+IM0
.1e4d	80 d8		bra $1e27			bra 	_TTHLoop
.1e4f					_TTHDone:
.1e4f	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1e51	20 c6 1d	jsr $1dc6			jsr 	TOKWriteA
.1e54	20 0f 1d	jsr $1d0f			jsr 	TOKTokeniseConstant 		; write integer out.
.1e57	18		clc				clc
.1e58	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1e59					TOKTokeniseIdentifier:
.1e59	20 fc 1c	jsr $1cfc			jsr 	TOKResetElement 			; extract an identifier
.1e5c					_TOKGetIdentifier:
.1e5c	20 d2 1d	jsr $1dd2			jsr 	TOKGet
.1e5f	20 68 1f	jsr $1f68			jsr 	TOKToUpper
.1e62	20 8a 1f	jsr $1f8a			jsr 	TOKIsIdentifierElement
.1e65	90 08		bcc $1e6f			bcc 	_TOKEndIdent
.1e67	20 00 1d	jsr $1d00			jsr		TOKWriteElement
.1e6a	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext
.1e6d	80 ed		bra $1e5c			bra 	_TOKGetIdentifier
.1e6f					_TOKEndIdent:
.1e6f	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1e71	d0 06		bne $1e79			bne 	_TOKNotString
.1e73	20 00 1d	jsr $1d00			jsr 	TOKWriteElement 			; add it
.1e76	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext 					; consume it
.1e79					_TOKNotString:
.1e79	20 d2 1d	jsr $1dd2			jsr 	TOKGet 						; finally check for (
.1e7c	c9 28		cmp #$28			cmp 	#"("
.1e7e	d0 06		bne $1e86			bne 	_TOKNoArray
.1e80	20 00 1d	jsr $1d00			jsr 	TOKWriteElement 			; add it
.1e83	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext 					; consume it
.1e86					_TOKNoArray:
.1e86	20 da 1d	jsr $1dda			jsr 	TOKFindToken 				; find it
.1e89	90 05		bcc $1e90			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1e8b	20 c6 1d	jsr $1dc6			jsr 	TOKWriteA
.1e8e	18		clc				clc
.1e8f	60		rts				rts
.1e90					_TOKIsVariable:
.1e90	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1e92					_TOKOutputBuffer:
.1e92	bd 12 04	lda $0412,x			lda 	TOKElementText,x 			; output it translated.
.1e95	20 be 1e	jsr $1ebe			jsr 	TOKTranslateIdentifier
.1e98	20 c6 1d	jsr $1dc6			jsr 	TOKWriteA
.1e9b	e8		inx				inx
.1e9c	bd 12 04	lda $0412,x			lda 	TOKElementText,x
.1e9f	20 8a 1f	jsr $1f8a			jsr 	TOKIsIdentifierElement
.1ea2	b0 ee		bcs $1e92			bcs 	_TOKOutputBuffer
.1ea4	a8		tay				tay 								; last char in Y
.1ea5	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1ea7	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1ea9	f0 0e		beq $1eb9			beq 	_TOKIVExit
.1eab	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1ead	d0 04		bne $1eb3			bne 	_TOKIVCheckArray 			; no, check for (
.1eaf	1a		inc a				inc 	a 							; token is $7D
.1eb0	bc 13 04	ldy $0413,x			ldy 	TOKElementText+1,x 			; get next one.
.1eb3					_TOKIVCheckArray:
.1eb3	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1eb5	d0 02		bne $1eb9			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1eb7	1a		inc a				inc 	a
.1eb8	1a		inc a				inc 	a
.1eb9					_TOKIVExit:
.1eb9	20 c6 1d	jsr $1dc6			jsr 	TOKWriteA 					; ending token
.1ebc	18		clc				clc
.1ebd	60		rts				rts
.1ebe					TOKTranslateIdentifier:
.1ebe	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1ec0	f0 0f		beq $1ed1			beq 	_TTI64
.1ec2	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1ec4	f0 0e		beq $1ed4			beq 	_TTI65
.1ec6	38		sec				sec
.1ec7	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1ec9	10 03		bpl $1ece			bpl 	_TTIExit
.1ecb	18		clc				clc 								; map 09 onto 26-35
.1ecc	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1ece					_TTIExit:
.1ece	09 40		ora #$40			ora 	#$40 						; correct range.
.1ed0	60		rts				rts
.1ed1	a9 64		lda #$64	_TTI64:	lda 	#$64
.1ed3	60		rts				rts
.1ed4	a9 65		lda #$65	_TTI65:	lda 	#$65
.1ed6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1ed7					TOKTokeniseInteger:
.1ed7	20 00 1f	jsr $1f00			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1eda	a2 12		ldx #$12			ldx 	#TOKElementText & $FF
.1edc	a0 04		ldy #$04			ldy 	#TOKElementText >> 8
.1ede	ad 11 04	lda $0411			lda		TOKElement
.1ee1	20 7b 2b	jsr $2b7b			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1ee4	ad 13 05	lda $0513			lda 	TOKIsFirstElement 			; first element ?
.1ee7	f0 12		beq $1efb			beq 	_TOKNotLineNumber
.1ee9	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1eeb	d0 0c		bne $1ef9			bne 	_TOKBadLineNumeber
.1eed	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1eef	8d 01 03	sta $0301			sta 	TOKLineNumber
.1ef2	a5 0d		lda $0d				lda 	IFR0+IM1
.1ef4	8d 02 03	sta $0302			sta 	TOKLineNumber+1
.1ef7	18		clc				clc
.1ef8	60		rts				rts
.1ef9					_TOKBadLineNumeber:
.1ef9	38		sec				sec
.1efa	60		rts				rts
.1efb					_TOKNotLineNumber:
.1efb	20 0f 1d	jsr $1d0f			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1efe	18		clc				clc
.1eff	60		rts				rts
.1f00					TOKExtractInteger:
.1f00	20 fc 1c	jsr $1cfc			jsr 	TOKResetElement 			; restart
.1f03					_TTILoop:
.1f03	20 d2 1d	jsr $1dd2			jsr 	TOKGet 						; keep getting and copying while numeric.
.1f06	20 7e 1f	jsr $1f7e			jsr 	TOKIsDigit
.1f09	90 08		bcc $1f13			bcc 	_TOKEIExit
.1f0b	20 00 1d	jsr $1d00			jsr 	TOKWriteElement
.1f0e	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext
.1f11	80 f0		bra $1f03			bra 	_TTILoop
.1f13					_TOKEIExit:
.1f13	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1f14					TOKTokenisePunctuation:
.1f14	20 fc 1c	jsr $1cfc			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1f17	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext
.1f1a	20 00 1d	jsr $1d00			jsr 	TOKWriteElement
.1f1d	20 d2 1d	jsr $1dd2			jsr 	TOKGet 						; what follows ?
.1f20	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1f22	f0 10		beq $1f34			beq 	_TTPOne
.1f24	20 92 1f	jsr $1f92			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1f27	b0 0b		bcs $1f34			bcs 	_TTPOne 					; these speed things up a bit.
.1f29	20 00 1d	jsr $1d00			jsr 	TOKWriteElement 			; this is what we will search for.
.1f2c	20 da 1d	jsr $1dda			jsr 	TOKFindToken
.1f2f	b0 0a		bcs $1f3b			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1f31	ce 11 04	dec $0411			dec 	TOKElement 					; make it a single character
.1f34					_TTPOne:
.1f34	20 da 1d	jsr $1dda			jsr 	TOKFindToken 				; look for one character punctuation
.1f37	b0 07		bcs $1f40			bcs 	_TTPOutputExit 				; we found it
.1f39	38		sec				sec 								; not recognised.
.1f3a	60		rts				rts
.1f3b					_TTPConsumeExit:
.1f3b	48		pha				pha
.1f3c	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext 					; get the 2nd char out.
.1f3f	68		pla				pla
.1f40					_TTPOutputExit:
.1f40	20 c6 1d	jsr $1dc6			jsr  	TOKWriteA 					; write token out
.1f43	18		clc				clc
.1f44	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1f45					TOKTokeniseString:
.1f45	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext 					; consume the "
.1f48	20 fc 1c	jsr $1cfc			jsr 	TOKResetElement 			; start getting the string
.1f4b					_TOKTSLoop:
.1f4b	20 d2 1d	jsr $1dd2			jsr 	TOKGet 						; check EOL
.1f4e	c9 00		cmp #$00			cmp 	#0
.1f50	f0 0c		beq $1f5e			beq 	_TOKTSExit
.1f52	20 d6 1d	jsr $1dd6			jsr 	TOKGetNext 					; get and consume
.1f55	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1f57	f0 05		beq $1f5e			beq 	_TOKTSExit
.1f59	20 00 1d	jsr $1d00			jsr 	TOKWriteElement
.1f5c	80 ed		bra $1f4b			bra 	_TOKTSLoop
.1f5e					_TOKTSExit:
.1f5e	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1f60	20 c6 1d	jsr $1dc6			jsr 	TOKWriteA
.1f63	20 41 1d	jsr $1d41			jsr 	TOKOutputElementBuffer
.1f66	18		clc				clc
.1f67	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1f68					TOKToUpper:
.1f68	c9 61		cmp #$61			cmp 	#"a"
.1f6a	90 06		bcc $1f72			bcc 	_TTUNotLower
.1f6c	c9 7b		cmp #$7b			cmp 	#"z"+1
.1f6e	b0 02		bcs $1f72			bcs 	_TTUNotLower
.1f70	49 20		eor #$20			eor 	#$20
.1f72					_TTUNotLower:
.1f72	60		rts				rts
.1f73					TOKToLower:
.1f73	c9 41		cmp #$41			cmp 	#"A"
.1f75	90 06		bcc $1f7d			bcc 	_TTUNotUpper
.1f77	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f79	b0 02		bcs $1f7d			bcs 	_TTUNotUpper
.1f7b	49 20		eor #$20			eor 	#$20
.1f7d					_TTUNotUpper:
.1f7d	60		rts				rts
.1f7e					TOKIsDigit:
.1f7e	c9 30		cmp #$30			cmp 	#"0"
.1f80	90 06		bcc $1f88			bcc 	TOKFail
.1f82	c9 3a		cmp #$3a			cmp 	#"9"+1
.1f84	b0 02		bcs $1f88			bcs 	TOKFail
.1f86					TOKSucceed:
.1f86	38		sec				sec
.1f87	60		rts				rts
.1f88					TOKFail:
.1f88	18		clc				clc
.1f89	60		rts				rts
.1f8a					TOKIsIdentifierElement:
.1f8a	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1f8c	f0 f8		beq $1f86			beq 	TOKSucceed
.1f8e	c9 5f		cmp #$5f			cmp 	#"_"
.1f90	f0 f4		beq $1f86			beq 	TOKSucceed 					; else fall through to alphanumeric
.1f92					TOKIsAlphaNumeric:
.1f92	20 9b 1f	jsr $1f9b			jsr 	TOKIsAlpha
.1f95	b0 ef		bcs $1f86			bcs 	TOKSucceed
.1f97	20 7e 1f	jsr $1f7e			jsr 	TOKIsDigit
.1f9a	60		rts				rts
.1f9b					TOKIsAlpha:
.1f9b	20 68 1f	jsr $1f68			jsr 	TOKToUpper
.1f9e	c9 41		cmp #$41			cmp 	#"A"
.1fa0	90 e6		bcc $1f88			bcc 	TOKFail
.1fa2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1fa4	b0 e2		bcs $1f88			bcs 	TOKFail
.1fa6	80 de		bra $1f86			bra 	TOKSucceed
.1fa8					TOKIsHexadecimal:
.1fa8	20 7e 1f	jsr $1f7e			jsr		TOKIsDigit
.1fab	b0 d9		bcs $1f86			bcs 	TOKSucceed
.1fad	20 9b 1f	jsr $1f9b			jsr 	TOKIsAlpha
.1fb0	90 d6		bcc $1f88			bcc 	TOKFail
.1fb2	c9 47		cmp #$47			cmp 	#"F"+1
.1fb4	b0 d2		bcs $1f88			bcs 	TOKFail
.1fb6	80 ce		bra $1f86			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.1fb8					Command_CALL:
.1fb8	a9 42		lda #$42			lda 	#STK_CALL
.1fba	20 2f 24	jsr $242f			jsr 	StackOpen
.1fbd	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check identifier follows.
.1fbf	29 c0		and #$c0			and 	#$C0
.1fc1	c9 40		cmp #$40			cmp 	#$40
.1fc3	d0 29		bne $1fee			bne 	_CCSyntax
.1fc5	20 58 26	jsr $2658			jsr 	VARGetInfo 					; get the information
.1fc8	20 16 24	jsr $2416			jsr 	ERRCheckRParen 				; check right bracket follows.
.1fcb	20 0a 26	jsr $260a			jsr 	VARFind 					; exists ?
.1fce	90 21		bcc $1ff1			bcc 	_CCUnknown
.1fd0	86 1f		stx $1f				stx 	zTemp0+1 					; save target in XA
.1fd2	85 1e		sta $1e				sta 	zTemp0
.1fd4	20 63 24	jsr $2463			jsr 	STKSaveCodePosition 		; save return address on stack.
.1fd7	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.1fd9	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1fdb	c9 ff		cmp #$ff			cmp 	#$FF
.1fdd	d0 12		bne $1ff1			bne 	_CCUnknown
.1fdf	88		dey				dey 								; get Y offset to stack
.1fe0	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1fe2	48		pha				pha
.1fe3	88		dey				dey 								; get address
.1fe4	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1fe6	85 1d		sta $1d				sta 	codePtr+1
.1fe8	b2 1e		lda ($1e)			lda 	(zTemp0)
.1fea	85 1c		sta $1c				sta 	codePtr
.1fec	7a		ply				ply 								; restore Y
.1fed	60		rts				rts
.1fee					_CCSyntax:
.1fee	4c 97 22	jmp $2297		jmp	ErrorV_syntax
.1ff1					_CCUnknown:
.1ff1	4c f9 23	jmp $23f9		jmp	ErrorV_unknown
.1ff4					Command_ENDPROC:
.1ff4	a9 42		lda #$42			lda 	#STK_CALL
.1ff6	20 5b 24	jsr $245b			jsr 	StackCheckFrame
.1ff9	20 75 24	jsr $2475			jsr 	STKLoadCodePosition 		; return
.1ffc	20 4d 24	jsr $244d			jsr 	StackClose
.1fff	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.2000					Command_DO:
.2000	a9 22		lda #$22			lda 	#STK_DO
.2002	20 2f 24	jsr $242f			jsr 	StackOpen
.2005	20 63 24	jsr $2463			jsr 	STKSaveCodePosition 		; save loop position
.2008	60		rts				rts
.2009					Command_EXIT:
.2009	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.200b	20 5b 24	jsr $245b			jsr 	StackCheckFrame
.200e	20 4d 24	jsr $244d			jsr 	StackClose 					; close it
.2011	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2013	aa		tax				tax
.2014	20 a9 21	jsr $21a9			jsr 	ScanForward
.2017	60		rts				rts
.2018					Command_LOOP:
.2018	a9 22		lda #$22			lda 	#STK_DO
.201a	20 5b 24	jsr $245b			jsr 	StackCheckFrame
.201d	20 75 24	jsr $2475			jsr 	STKLoadCodePosition 		; loop back
.2020	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2021					Command_FOR:
.2021	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2023	20 2f 24	jsr $242f			jsr 	StackOpen
.2026	20 16 12	jsr $1216			jsr 	CommandLET 					; do "I = 1" bit
.2029	5a		phy				phy 								; save variable address to +4,+5
.202a	a0 04		ldy #$04			ldy 	#4
.202c	a5 1e		lda $1e				lda 	zTemp0
.202e	91 26		sta ($26),y			sta 	(basicStack),y
.2030	c8		iny				iny
.2031	a5 1f		lda $1f				lda 	zTemp0+1
.2033	91 26		sta ($26),y			sta 	(basicStack),y
.2035	7a		ply				ply
.2036	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2038	20 26 24	jsr $2426			jsr 	ERRCheckA
.203b	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.203e	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.2040	a2 0c		ldx #$0c			ldx 	#IFR0
.2042	20 97 20	jsr $2097			jsr 	CFSaveR0X
.2045	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; STEP here ?
.2047	c9 91		cmp #$91			cmp 	#PR_STEP
.2049	d0 06		bne $2051			bne 	_CFStep1
.204b	c8		iny				iny 								; consume step
.204c	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 				; evaluate STEP
.204f	80 24		bra $2075			bra 	_CFWriteStep
.2051					_CFStep1:
.2051	a2 0c		ldx #$0c			ldx 	#IFR0 						; default R0, 1
.2053	a9 01		lda #$01			lda 	#1
.2055	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.2058	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2059	a0 04		ldy #$04			ldy 	#4 							; get variable address
.205b	b1 26		lda ($26),y			lda 	(basicStack),y
.205d	85 1e		sta $1e				sta 	zTemp0
.205f	c8		iny				iny
.2060	b1 26		lda ($26),y			lda 	(basicStack),y
.2062	85 1f		sta $1f				sta 	zTemp0+1
.2064	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2066	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.2068	d0 0a		bne $2074			bne 	_CFNotOptimised
.206a	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.206c	b1 26		lda ($26),y			lda 	(basicStack),y
.206e	d0 04		bne $2074			bne 	_CFNotOptimised
.2070	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.2072	85 0f		sta $0f				sta 	IFR0+IExp
.2074					_CFNotOptimised:
.2074	7a		ply				ply
.2075					_CFWriteStep:
.2075	a2 0c		ldx #$0c			ldx 	#IFR0 						; Write to additive.
.2077	a9 06		lda #$06			lda 	#6
.2079	20 97 20	jsr $2097			jsr 	CFSaveR0X
.207c	20 63 24	jsr $2463			jsr 	STKSaveCodePosition 		; save loop position
.207f	60		rts				rts
.2080					CFLoadR0X:
.2080	5a		phy				phy
.2081	a8		tay				tay
.2082	b1 26		lda ($26),y			lda 	(basicStack),y
.2084	95 00		sta $00,x			sta 	IM0,x
.2086	c8		iny				iny
.2087	b1 26		lda ($26),y			lda 	(basicStack),y
.2089	95 01		sta $01,x			sta 	IM1,x
.208b	c8		iny				iny
.208c	b1 26		lda ($26),y			lda 	(basicStack),y
.208e	95 02		sta $02,x			sta 	IM2,x
.2090	c8		iny				iny
.2091	b1 26		lda ($26),y			lda 	(basicStack),y
.2093	95 03		sta $03,x			sta 	IExp,x
.2095	7a		ply				ply
.2096	60		rts				rts
.2097					CFSaveR0X:
.2097	5a		phy				phy
.2098	a8		tay				tay
.2099	b5 00		lda $00,x			lda 	IM0,x
.209b	91 26		sta ($26),y			sta 	(basicStack),y
.209d	c8		iny				iny
.209e	b5 01		lda $01,x			lda 	IM1,x
.20a0	91 26		sta ($26),y			sta 	(basicStack),y
.20a2	c8		iny				iny
.20a3	b5 02		lda $02,x			lda 	IM2,x
.20a5	91 26		sta ($26),y			sta 	(basicStack),y
.20a7	c8		iny				iny
.20a8	b5 03		lda $03,x			lda 	IExp,x
.20aa	91 26		sta ($26),y			sta 	(basicStack),y
.20ac	7a		ply				ply
.20ad	60		rts				rts
.20ae					Command_NEXT:
.20ae	a9 37		lda #$37			lda 	#STK_FOR
.20b0	20 5b 24	jsr $245b			jsr 	StackCheckFrame
.20b3	5a		phy				phy 								; check optimised loop
.20b4	a0 09		ldy #$09			ldy 	#9
.20b6	b1 26		lda ($26),y			lda 	(basicStack),y
.20b8	7a		ply				ply
.20b9	0a		asl a				asl 	a
.20ba	b0 35		bcs $20f1			bcs 	_CNOptimised
.20bc	20 28 21	jsr $2128			jsr 	_CNLoadValue 				; load index value to R0.
.20bf	a2 10		ldx #$10			ldx 	#IFR1 						; load adding value to R1.
.20c1	a9 06		lda #$06			lda 	#6
.20c3	20 80 20	jsr $2080			jsr 	CFLoadR0X
.20c6	20 0d 27	jsr $270d			jsr 	IFloatAdd 					; add them together and write back.
.20c9	20 4b 21	jsr $214b			jsr 	_CNSaveValue
.20cc	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.20ce	a2 10		ldx #$10			ldx 	#IFR1
.20d0	20 80 20	jsr $2080			jsr 	CFLoadR0X
.20d3	20 e5 29	jsr $29e5			jsr 	IFloatCompare 				; compare terminal vs current
.20d6	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.20d8	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero
.20db	f0 10		beq $20ed			beq 	_CNLoopBack
.20dd	a5 0f		lda $0f				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.20df	5a		phy				phy
.20e0	a0 09		ldy #$09			ldy 	#6+IExp
.20e2	51 26		eor ($26),y			eor 	(basicStack),y
.20e4	7a		ply				ply
.20e5	29 40		and #$40			and 	#IFSign
.20e7	f0 04		beq $20ed			beq 	_CNLoopBack
.20e9					_CNExitLoop:
.20e9	20 4d 24	jsr $244d			jsr 	StackClose		 			; return
.20ec	60		rts				rts
.20ed					_CNLoopBack:
.20ed	20 75 24	jsr $2475			jsr 	STKLoadCodePosition 		; loop back
.20f0	60		rts				rts
.20f1					_CNOptimised:
.20f1	5a		phy				phy
.20f2	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.20f4	b1 26		lda ($26),y			lda 	(basicStack),y
.20f6	85 22		sta $22				sta 	zTemp2
.20f8	c8		iny				iny
.20f9	b1 26		lda ($26),y			lda 	(basicStack),y
.20fb	85 23		sta $23				sta 	zTemp2+1
.20fd	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.20ff					_CNIncrement:
.20ff	c8		iny				iny
.2100	b1 22		lda ($22),y			lda 	(zTemp2),y
.2102	1a		inc a				inc 	a
.2103	91 22		sta ($22),y			sta 	(zTemp2),y
.2105	f0 f8		beq $20ff			beq 	_CNIncrement
.2107	18		clc				clc 								; point zTemp0 to terminal value
.2108	a5 26		lda $26				lda 	basicStack
.210a	69 0a		adc #$0a			adc 	#10
.210c	85 1e		sta $1e				sta 	zTemp0
.210e	a5 27		lda $27				lda 	basicStack+1
.2110	69 00		adc #$00			adc 	#0
.2112	85 1f		sta $1f				sta 	zTemp0+1
.2114	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2116	b2 22		lda ($22)			lda 	(zTemp2)
.2118	d2 1e		cmp ($1e)			cmp 	(zTemp0)
.211a	b1 22		lda ($22),y			lda 	(zTemp2),y
.211c	f1 1e		sbc ($1e),y			sbc 	(zTemp0),y
.211e	c8		iny				iny
.211f	b1 22		lda ($22),y			lda 	(zTemp2),y
.2121	f1 1e		sbc ($1e),y			sbc 	(zTemp0),y
.2123	7a		ply				ply
.2124	b0 c3		bcs $20e9			bcs 	_CNExitLoop
.2126	80 c5		bra $20ed			bra 	_CNLoopBack
.2128					_CNLoadValue:
.2128	5a		phy				phy
.2129	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.212b	b1 26		lda ($26),y			lda 	(basicStack),y
.212d	85 22		sta $22				sta 	zTemp2
.212f	c8		iny				iny
.2130	b1 26		lda ($26),y			lda 	(basicStack),y
.2132	85 23		sta $23				sta 	zTemp2+1
.2134	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2136	b1 22		lda ($22),y			lda 	(zTemp2),y
.2138	85 0c		sta $0c				sta 	IFR0+IM0
.213a	c8		iny				iny
.213b	b1 22		lda ($22),y			lda 	(zTemp2),y
.213d	85 0d		sta $0d				sta 	IFR0+IM1
.213f	c8		iny				iny
.2140	b1 22		lda ($22),y			lda 	(zTemp2),y
.2142	85 0e		sta $0e				sta 	IFR0+IM2
.2144	c8		iny				iny
.2145	b1 22		lda ($22),y			lda 	(zTemp2),y
.2147	85 0f		sta $0f				sta 	IFR0+IExp
.2149	7a		ply				ply
.214a	60		rts				rts
.214b					_CNSaveValue:
.214b	5a		phy				phy
.214c	a0 00		ldy #$00			ldy 	#0
.214e	a5 0c		lda $0c				lda 	IFR0+IM0
.2150	91 22		sta ($22),y			sta 	(zTemp2),y
.2152	c8		iny				iny
.2153	a5 0d		lda $0d				lda 	IFR0+IM1
.2155	91 22		sta ($22),y			sta 	(zTemp2),y
.2157	c8		iny				iny
.2158	a5 0e		lda $0e				lda 	IFR0+IM2
.215a	91 22		sta ($22),y			sta 	(zTemp2),y
.215c	c8		iny				iny
.215d	a5 0f		lda $0f				lda 	IFR0+IExp
.215f	91 22		sta ($22),y			sta 	(zTemp2),y
.2161	7a		ply				ply
.2162	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.2163					IfCommand:
.2163	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 				; Get the if test.
.2166	b1 1c		lda ($1c),y			lda 	(codePtr),y					; what follows ?
.2168	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.216a	d0 0a		bne $2176			bne 	_IfStructured 				; we still support it.
.216c	c8		iny				iny 								; consume THEN
.216d	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero 			; is it zero
.2170	f0 01		beq $2173			beq 	_IfFail 					; if fail, go to next line
.2172	60		rts				rts 								; if THEN just continue
.2173					_IfFail:
.2173	4c b0 12	jmp $12b0			jmp 	RUNEndOfLine
.2176					_IfStructured:
.2176	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero 			; is it zero
.2179	d0 07		bne $2182			bne 	_IfExit 					; if not, then continue normally.
.217b	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.217d	a2 85		ldx #$85			ldx 	#PR_ENDIF
.217f	20 a9 21	jsr $21a9			jsr 	ScanForward 				; and run from there
.2182					_IfExit:
.2182	60		rts				rts
.2183					ElseCode:
.2183	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.2185	aa		tax				tax 								; so just go to the structure exit
.2186	20 a9 21	jsr $21a9			jsr 	ScanForward
.2189	60		rts				rts
.218a					EndIf:
.218a	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.218b					Command_REPEAT:
.218b	a9 02		lda #$02			lda 	#STK_REPEAT
.218d	20 2f 24	jsr $242f			jsr 	StackOpen
.2190	20 63 24	jsr $2463			jsr 	STKSaveCodePosition 		; save loop position
.2193	60		rts				rts
.2194					Command_UNTIL:
.2194	a9 02		lda #$02			lda 	#STK_REPEAT
.2196	20 5b 24	jsr $245b			jsr 	StackCheckFrame
.2199	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 				; work out the test
.219c	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero 			; check if zero
.219f	f0 04		beq $21a5			beq 	_CULoopBack 				; if so keep looping
.21a1	20 4d 24	jsr $244d			jsr 	StackClose		 			; return
.21a4	60		rts				rts
.21a5					_CULoopBack:
.21a5	20 75 24	jsr $2475			jsr 	STKLoadCodePosition 		; loop back
.21a8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.21a9					ScanForward:
.21a9	85 1e		sta $1e				sta 	zTemp0 						; save scan options in zTemp0
.21ab	86 1f		stx $1f				stx 	zTemp0+1
.21ad	64 20		stz $20				stz 	zTemp1 						; clear structure count.
.21af					_ScanForwardLoop:
.21af	a5 20		lda $20				lda 	zTemp1 						; if structure count non zero, don't check for end.
.21b1	d0 0a		bne $21bd			bne 	_ScanNoCheck
.21b3	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; reached either target token.
.21b5	c5 1e		cmp $1e				cmp 	zTemp0
.21b7	f0 49		beq $2202			beq 	_ScanExit
.21b9	c5 1f		cmp $1f				cmp 	zTemp0+1
.21bb	f0 45		beq $2202			beq 	_ScanExit
.21bd					_ScanNoCheck:
.21bd	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get the token and consume it.
.21bf	c8		iny				iny
.21c0	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.21c2	f0 37		beq $21fb			beq		_ScanDataItem
.21c4	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.21c6	f0 33		beq $21fb			beq 	_ScanDataItem
.21c8	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.21ca	f0 1b		beq $21e7			beq 	_ScanNextLine
.21cc	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.21ce	d0 01		bne $21d1			bne 	_ScanNoShift
.21d0	c8		iny				iny
.21d1					_ScanNoShift:
.21d1	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.21d3	b0 da		bcs $21af			bcs 	_ScanForwardLoop
.21d5	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.21d7	90 d6		bcc $21af			bcc 	_ScanForwardLoop
.21d9	aa		tax				tax 								; access the table to get the adjustment.
.21da	18		clc				clc
.21db	a5 20		lda $20				lda 	zTemp1 						; add it to structure count.
.21dd	7d c7 17	adc $17c7,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.21e0	85 20		sta $20				sta 	zTemp1
.21e2	10 cb		bpl $21af			bpl		_ScanForwardLoop 			; error if -ve ?
.21e4	4c 1b 23	jmp $231b		jmp	ErrorV_structure
.21e7					_ScanNextLine:
.21e7	18		clc				clc	 								; forward to next line.
.21e8	b2 1c		lda ($1c)			lda 	(codePtr)
.21ea	65 1c		adc $1c				adc 	codePtr
.21ec	85 1c		sta $1c				sta 	codePtr
.21ee	90 02		bcc $21f2			bcc 	_ScanNoCarry
.21f0	e6 1d		inc $1d				inc 	codePtr+1
.21f2					_ScanNoCarry:
.21f2	a0 03		ldy #$03			ldy 	#3
.21f4	b2 1c		lda ($1c)			lda 	(codePtr) 					; off end of program ?
.21f6	d0 b7		bne $21af			bne 	_ScanForwardLoop
.21f8	4c 1b 23	jmp $231b		jmp	ErrorV_structure
.21fb					_ScanDataItem:
.21fb	98		tya				tya
.21fc	38		sec				sec
.21fd	71 1c		adc ($1c),y			adc 	(codePtr),y
.21ff	a8		tay				tay
.2200	80 ad		bra $21af			bra 	_ScanForwardLoop
.2202					_ScanExit:
.2202	c8		iny				iny 								; consume final token.
.2203	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2204					ScanProcedures:
.2204	a5 1c		lda $1c				lda 	codePtr 					; push codePtr on the stack
.2206	48		pha				pha
.2207	a5 1d		lda $1d				lda 	codePtr+1
.2209	48		pha				pha
.220a	5a		phy				phy
.220b	ad 0f 04	lda $040f			lda 	PGMBaseHigh 				; back to the program start
.220e	85 1d		sta $1d				sta 	codePtr+1
.2210	64 1c		stz $1c				stz 	codePtr
.2212					_SPLoop:
.2212	b2 1c		lda ($1c)			lda 	(codePtr) 					; end of program
.2214	f0 18		beq $222e			beq 	_SPExit
.2216	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2218	b1 1c		lda ($1c),y			lda 	(codePtr),y
.221a	c9 88		cmp #$88			cmp 	#PR_PROC
.221c	d0 03		bne $2221			bne 	_SPNext
.221e	20 36 22	jsr $2236			jsr 	_SPSetupRecord
.2221					_SPNext:
.2221	18		clc				clc 								; forward to next
.2222	b2 1c		lda ($1c)			lda 	(codePtr)
.2224	65 1c		adc $1c				adc 	codePtr
.2226	85 1c		sta $1c				sta 	codePtr
.2228	90 e8		bcc $2212			bcc 	_SPLoop
.222a	e6 1d		inc $1d				inc 	codePtr+1
.222c	80 e4		bra $2212			bra 	_SPLoop
.222e					_SPExit:
.222e	7a		ply				ply
.222f	68		pla				pla
.2230	85 1d		sta $1d				sta 	codePtr+1
.2232	68		pla				pla
.2233	85 1c		sta $1c				sta 	codePtr
.2235	60		rts				rts
.2236					_SPSetupRecord:
.2236	c8		iny				iny 								; check identifier follows
.2237	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2239	29 c0		and #$c0			and 	#$C0
.223b	c9 40		cmp #$40			cmp 	#$40
.223d	d0 27		bne $2266			bne 	_SPSyntax
.223f	20 58 26	jsr $2658			jsr 	VARGetInfo 					; get the information
.2242	20 16 24	jsr $2416			jsr 	ERRCheckRParen 				; check right bracket follows.
.2245	20 0a 26	jsr $260a			jsr 	VARFind 					; already exists ?
.2248	b0 1f		bcs $2269			bcs 	_SPUsed 					; error !
.224a	20 b6 25	jsr $25b6			jsr 	VARCreate 					; create, XA points to the data.
.224d	85 1e		sta $1e				sta 	zTemp0
.224f	86 1f		stx $1f				stx 	zTemp0+1
.2251	5a		phy				phy 								; save Y pos on stack
.2252	a0 01		ldy #$01			ldy 	#1
.2254	a5 1c		lda $1c				lda 	codePtr 					; save codePtr/Y
.2256	92 1e		sta ($1e)			sta 	(zTemp0)
.2258	a5 1d		lda $1d				lda 	codePtr+1
.225a	91 1e		sta ($1e),y			sta 	(zTemp0),y
.225c	c8		iny				iny
.225d	68		pla				pla
.225e	91 1e		sta ($1e),y			sta 	(zTemp0),y
.2260	c8		iny				iny
.2261	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.2263	91 1e		sta ($1e),y			sta 	(zTemp0),y
.2265	60		rts				rts
.2266					_SPSyntax:
.2266	4c 97 22	jmp $2297		jmp	ErrorV_syntax
.2269					_SPUsed:
.2269	4c dc 23	jmp $23dc		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.226c					Command_WHILE:
.226c	5a		phy				phy 								; save position of the test
.226d	20 cc 14	jsr $14cc			jsr 	EXPEvalNumber 				; work out the while test.
.2270	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero 			; check if zero
.2273	f0 0e		beq $2283			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2275	98		tya				tya 								; position *after* test.
.2276	7a		ply				ply 								; restore position before test, at WHILE
.2277	88		dey				dey 								; so we execute the WHILE command again.
.2278	48		pha				pha 								; push after test on the stack
.2279	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.227b	20 2f 24	jsr $242f			jsr 	StackOpen
.227e	20 63 24	jsr $2463			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.2281	7a		ply				ply 								; restore the position *after* the test
.2282	60		rts				rts
.2283					_WHExitLoop:
.2283	68		pla				pla 								; throw post loop position
.2284	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2286	aa		tax				tax
.2287	20 a9 21	jsr $21a9			jsr 	ScanForward
.228a	60		rts				rts
.228b					Command_WEND:
.228b	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.228d	20 5b 24	jsr $245b			jsr 	StackCheckFrame
.2290	20 75 24	jsr $2475			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2293	20 4d 24	jsr $244d			jsr 	StackClose		 			; erase the frame
.2296	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2297					ErrorV_syntax:
.2297	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>229a	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>22a2	72 72 6f 72 00
.22a7					ErrorV_range:
.22a7	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>22aa	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>22b2	61 6e 67 65 00
.22b7					ErrorV_value:
.22b7	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>22ba	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>22c2	65 00
.22c4					ErrorV_type:
.22c4	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>22c7	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>22cf	6d 61 74 63 68 00
.22d5					ErrorV_unimplemented:
.22d5	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>22d8	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>22e0	65 6d 65 6e 74 65 64 00
.22e8					ErrorV_assert:
.22e8	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>22eb	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>22f3	61 69 6c 00
.22f7					ErrorV_internal:
.22f7	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>22fa	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>2302	20 45 72 72 6f 72 00
.2309					ErrorV_divzero:
.2309	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>230c	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>2314	79 20 5a 65 72 6f 00
.231b					ErrorV_structure:
.231b	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>231e	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>2326	65 20 49 6d 62 61 6c 61 6e 63 65 00
.2332					ErrorV_stop:
.2332	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>2335	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>233d	53 74 6f 70 70 65 64 00
.2345					ErrorV_data:
.2345	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>2348	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>2350	61 74 61 00
.2354					ErrorV_redefine:
.2354	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>2357	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>235f	64 65 66 69 6e 65 64 00
.2367					ErrorV_index:
.2367	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>236a	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>2372	79 20 49 6e 64 65 78 00
.237a					ErrorV_memory:
.237a	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>237d	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>2385	65 6d 6f 72 79 00
.238b					ErrorV_uninitialised:
.238b	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>238e	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>2396	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.23a5					ErrorV_string:
.23a5	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>23a8	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>23b0	6e 67 20 4c 65 6e 67 74 68 00
.23ba					ErrorV_variable:
.23ba	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>23bd	56 61 72 69 61 62 6c 65			.text	"Variable Missing",0
>23c5	20 4d 69 73 73 69 6e 67 00
.23ce					ErrorV_stack:
.23ce	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>23d1	53 74 61 63 6b 20 46 75			.text	"Stack Full",0
>23d9	6c 6c 00
.23dc					ErrorV_dupproc:
.23dc	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>23df	50 72 6f 63 65 64 75 72			.text	"Procedure Identifier Used",0
>23e7	65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73 65
>23f7	64 00
.23f9					ErrorV_unknown:
.23f9	20 f9 2d	jsr $2df9		jsr	ErrorHandler
>23fc	55 6e 6b 6e 6f 77 6e 20			.text	"Unknown Procedure",0
>2404	50 72 6f 63 65 64 75 72 65 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.240e					ERRCheckLParen:
.240e	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2410	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.2412	d0 18		bne $242c			bne 	ERRSyntaxError
.2414	c8		iny				iny
.2415	60		rts				rts
.2416					ERRCheckRParen:
.2416	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2418	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.241a	d0 10		bne $242c			bne 	ERRSyntaxError
.241c	c8		iny				iny
.241d	60		rts				rts
.241e					ERRCheckComma:
.241e	b1 1c		lda ($1c),y			lda 	(codePtr),y
.2420	c9 99		cmp #$99			cmp 	#PR_COMMA
.2422	d0 08		bne $242c			bne 	ERRSyntaxError
.2424	c8		iny				iny
.2425	60		rts				rts
.2426					ERRCheckA:
.2426	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.2428	d0 02		bne $242c			bne 	ERRSyntaxError
.242a	c8		iny				iny
.242b	60		rts				rts
.242c					ERRSyntaxError:
.242c	4c 97 22	jmp $2297		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.242f					StackOpen:
.242f	48		pha				pha 								; save frame byte
.2430	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.2432	0a		asl a				asl 	a 							; claim twice this for storage
.2433	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.2435	38		sec				sec 								; so basically subtracting from
.2436	65 26		adc $26				adc 	basicStack 	 				; basicStack
.2438	85 26		sta $26				sta 	basicStack
.243a	b0 0a		bcs $2446			bcs 	_SONoBorrow
>243c	db						.byte 	$DB
.243d	c6 27		dec $27				dec 	basicStack+1
.243f	a5 27		lda $27				lda 	basicStack+1 				; reached the bottom ?
.2441	cd 15 05	cmp $0515			cmp 	basicStackEnd
.2444	f0 04		beq $244a			beq 	_SOMemory
.2446					_SONoBorrow:
.2446	68		pla				pla 								; get marker back and write at TOS
.2447	92 26		sta ($26)			sta 	(basicStack)
.2449	60		rts				rts
.244a					_SOMemory:
.244a	4c ce 23	jmp $23ce		jmp	ErrorV_stack
.244d					StackClose:
.244d	b2 26		lda ($26)			lda 	(basicStack) 				; get TOS marker
.244f	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2451	0a		asl a				asl 	a 							; claim twice this.
.2452	65 26		adc $26				adc 	basicStack 					; add to the stack pointer.
.2454	85 26		sta $26				sta 	basicStack
.2456	90 02		bcc $245a			bcc 	_SCExit
.2458	e6 27		inc $27				inc 	basicStack+1
.245a					_SCExit:
.245a	60		rts				rts
.245b					StackCheckFrame:
.245b	d2 26		cmp ($26)			cmp		(basicStack) 				; check  frames match
.245d	d0 01		bne $2460			bne 	_SCFError 					; different, we have structures mixed up
.245f	60		rts				rts
.2460					_SCFError:
.2460	4c 1b 23	jmp $231b		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.2463					STKSaveCodePosition:
.2463	5a		phy				phy
.2464	98		tya				tya 								; save Y at offset 1.
.2465	a0 01		ldy #$01			ldy 	#1
.2467	91 26		sta ($26),y			sta 	(basicStack),y
.2469	a5 1c		lda $1c				lda 	codePtr 					; save code (low) at 2
.246b	c8		iny				iny
.246c	91 26		sta ($26),y			sta 	(basicStack),y
.246e	a5 1d		lda $1d				lda 	codePtr+1 					; save code (high) at 3
.2470	c8		iny				iny
.2471	91 26		sta ($26),y			sta 	(basicStack),y
.2473	7a		ply				ply
.2474	60		rts				rts
.2475					STKLoadCodePosition:
.2475	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2477	b1 26		lda ($26),y			lda 	(basicStack),y
.2479	85 1d		sta $1d				sta 	codePtr+1
.247b	88		dey				dey
.247c	b1 26		lda ($26),y			lda 	(basicStack),y
.247e	85 1c		sta $1c				sta 	codePtr
.2480	88		dey				dey
.2481	b1 26		lda ($26),y			lda 	(basicStack),y 				; line offset to Y
.2483	a8		tay				tay
.2484	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2485					StackReset:
.2485	48		pha				pha 								; save top of memory
.2486	3a		dec a				dec 	a  							; end of stack = previous byte
.2487	85 27		sta $27				sta 	basicStack+1
.2489	a9 ff		lda #$ff			lda 	#$FF
.248b	85 26		sta $26				sta 	basicStack
.248d	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.248f	92 26		sta ($26)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2491	68		pla				pla 								; allocate pages for stack.
.2492	38		sec				sec
.2493	e9 02		sbc #$02			sbc 	#stackPages
.2495	8d 15 05	sta $0515			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2498	60		rts				rts
.0026					basicStack:
>0026							.fill 	2
.0515					basicStackEnd:
>0515							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2499					StringConcrete:
.2499	5a		phy				phy 								; save position on stack
.249a	b2 0c		lda ($0c)			lda 	(IFR0) 						; get string length
.249c	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.249e	b0 41		bcs $24e1			bcs 	_SALengthError
.24a0	18		clc				clc 								; length of the new string
.24a1	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.24a3	90 02		bcc $24a7			bcc 	_SAHaveLength
.24a5	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.24a7					_SAHaveLength:
.24a7	48		pha				pha 								; save length to be allocated for concreting.
.24a8	38		sec				sec
.24a9	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.24ab	6d 17 05	adc $0517			adc 	stringMemory
.24ae	8d 17 05	sta $0517			sta 	stringMemory
.24b1	85 22		sta $22				sta 	zTemp2 						; update storage address
.24b3	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.24b5	6d 18 05	adc $0518			adc 	stringMemory+1
.24b8	8d 18 05	sta $0518			sta 	stringMemory+1
.24bb	85 23		sta $23				sta 	zTemp2+1
.24bd	68		pla				pla 								; save length allocated in +0
.24be	92 22		sta ($22)			sta 	(zTemp2)
.24c0	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.24c2	a0 01		ldy #$01			ldy 	#1
.24c4	91 22		sta ($22),y			sta 	(zTemp2),y
.24c6					_SACopyNewString:
.24c6	b2 0c		lda ($0c)			lda 	(IFR0) 						; copy length at +2
.24c8	a0 02		ldy #$02			ldy 	#2
.24ca	91 22		sta ($22),y			sta 	(zTemp2),y
.24cc	aa		tax				tax 								; bytes to copy
.24cd	f0 0c		beq $24db			beq 	_SACopyExit
.24cf	a0 01		ldy #$01			ldy 	#1 							; first character from here
.24d1					_SACopyNSLoop:
.24d1	b1 0c		lda ($0c),y			lda 	(IFR0),y 					; get character from here
.24d3	c8		iny				iny 								; write two on in string storage
.24d4	c8		iny				iny
.24d5	91 22		sta ($22),y			sta 	(zTemp2),y
.24d7	88		dey				dey
.24d8	ca		dex				dex									; until copied all the string lengths.
.24d9	d0 f6		bne $24d1			bne 	_SACopyNSLoop
.24db					_SACopyExit:
.24db	a6 23		ldx $23				ldx 	zTemp2+1 					; XA contain the concreted string.
.24dd	a5 22		lda $22				lda 	zTemp2
.24df	7a		ply				ply
.24e0	60		rts				rts
.24e1					_SALengthError:
.24e1	4c a5 23	jmp $23a5		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.24e4					StringSystemInitialise:
.24e4	3a		dec a				dec 	a 							; make last byte of previous page.
.24e5	8d 18 05	sta $0518			sta 	stringMemory+1
.24e8	85 1f		sta $1f				sta 	zTemp0+1
.24ea	a9 ff		lda #$ff			lda 	#$FF
.24ec	8d 17 05	sta $0517			sta 	stringMemory
.24ef	85 1e		sta $1e				sta 	zTemp0
.24f1	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.24f3	92 1e		sta ($1e)			sta 	(zTemp0)
.24f5	60		rts				rts
.24f6					StringSpaceInitialise:
.24f6	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.24f8	8d 16 05	sta $0516			sta 	stringInitialised
.24fb	ad 17 05	lda $0517			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.24fe	8d 19 05	sta $0519			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2501	ad 18 05	lda $0518			lda 	stringMemory+1
.2504	3a		dec a				dec 	a
.2505	8d 1a 05	sta $051a			sta 	stringTempPointer+1
.2508	20 5e 10	jsr $105e			jsr 	ClearCheckMemory
.250b	60		rts				rts
.250c					StringTempAllocate:
.250c	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.250e	b0 2e		bcs $253e			bcs 	_STALength
.2510	2c 16 05	bit $0516			bit 	stringInitialised 			; already initialised
.2513	30 05		bmi $251a			bmi 	_STAAllocate
.2515	48		pha				pha 								; save value to subtract.
.2516	20 f6 24	jsr $24f6			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2519	68		pla				pla 								; restore it
.251a					_STAAllocate:
.251a	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.251c	18		clc				clc  								; deliberate allows one more
.251d	6d 19 05	adc $0519			adc 	stringTempPointer 			; subtract from temp pointer
.2520	8d 19 05	sta $0519			sta 	stringTempPointer
.2523	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.2525	85 28		sta $28				sta 	zsTemp 						; and zsTemp
.2527	ad 1a 05	lda $051a			lda 	stringTempPointer+1
.252a	69 ff		adc #$ff			adc 	#$FF
.252c	8d 1a 05	sta $051a			sta 	stringTempPointer+1
.252f	85 29		sta $29				sta 	zsTemp+1
.2531	85 0d		sta $0d				sta 	IFR0+IM1
.2533	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2535	a9 80		lda #$80			lda 	#$80
.2537	85 0f		sta $0f				sta 	IFR0+IExp
.2539	a9 00		lda #$00			lda 	#0 							; clear the target string
.253b	92 28		sta ($28)			sta 	(zsTemp)
.253d	60		rts				rts
.253e					_STALength:
.253e	4c a5 23	jmp $23a5		jmp	ErrorV_string
.2541					StringTempWrite:
.2541	5a		phy				phy
.2542	48		pha				pha
.2543	b2 28		lda ($28)			lda 	(zsTemp)
.2545	1a		inc a				inc 	a
.2546	92 28		sta ($28)			sta 	(zsTemp)
.2548	a8		tay				tay
.2549	68		pla				pla
.254a	91 28		sta ($28),y			sta 	(zsTemp),y
.254c	7a		ply				ply
.254d	60		rts				rts
.0028					zsTemp:
>0028							.fill 	2
.0516					stringInitialised:
>0516							.fill 	1
.0517					stringMemory:
>0517							.fill 	2
.0519					stringTempPointer:
>0519							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.254e					VARArrayLookup:
.254e	85 1e		sta $1e				sta 	zTemp0 						; save the array address pointer in zTemp0
.2550	86 1f		stx $1f				stx 	zTemp0+1
.2552	b2 1e		lda ($1e)			lda 	(zTemp0)
.2554	48		pha				pha
.2555	5a		phy				phy
.2556	a0 01		ldy #$01			ldy 	#1
.2558	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.255a	7a		ply				ply
.255b	48		pha				pha
.255c	20 de 14	jsr $14de			jsr 	EXPEvalInteger16 			; R0 now contains the index
.255f	68		pla				pla 								; array address to zTemp0
.2560	85 1f		sta $1f				sta 	zTemp0+1
.2562	68		pla				pla
.2563	85 1e		sta $1e				sta 	zTemp0
.2565	5a		phy				phy 								; save codePtr position.
.2566	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2568	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.256a	48		pha				pha 								; save bit 15 on stack.
.256b	29 7f		and #$7f			and 	#$7F
.256d	85 20		sta $20				sta 	zTemp1
.256f	a5 0c		lda $0c				lda 	IFR0+IM0 					; check range of index
.2571	d2 1e		cmp ($1e)			cmp 	(zTemp0)
.2573	a5 0d		lda $0d				lda 	IFR0+IM1
.2575	e5 20		sbc $20				sbc 	zTemp1
.2577	b0 3a		bcs $25b3			bcs 	_VALIndex
.2579	a5 0d		lda $0d				lda 	IFR0+IM1  					; sanity check
.257b	c9 40		cmp #$40			cmp 	#$40
.257d	b0 34		bcs $25b3			bcs 	_VALIndex
.257f	06 0c		asl $0c				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2581	26 0d		rol $0d				rol 	IFR0+IM1
.2583	fa		plx				plx 								; get msb of size -> X
.2584	30 04		bmi $258a			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2586	06 0c		asl $0c				asl 	IFR0+IM0
.2588	26 0d		rol $0d				rol 	IFR0+IM1
.258a					_VARNotX4:
.258a	18		clc				clc 								; add the two for the size bytes
.258b	a5 0c		lda $0c				lda 	IFR0+IM0
.258d	69 02		adc #$02			adc 	#2
.258f	85 0c		sta $0c				sta 	IFR0+IM0
.2591	90 02		bcc $2595			bcc 	_VARNoCarry1
.2593	e6 0d		inc $0d				inc 	IFR0+IM1
.2595					_VARNoCarry1:
.2595	18		clc				clc 								; calculate the element address and push to stack.
.2596	a5 0c		lda $0c				lda 	IFR0+IM0
.2598	65 1e		adc $1e				adc 	zTemp0
.259a	48		pha				pha
.259b	a5 0d		lda $0d				lda 	IFR0+IM1
.259d	65 1f		adc $1f				adc 	zTemp0+1
.259f	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.25a1	30 04		bmi $25a7			bmi 	_VARHasSubLevel
.25a3	aa		tax				tax 								; address in XA
.25a4	68		pla				pla
.25a5	7a		ply				ply 								; restore Y and exit
.25a6	60		rts				rts
.25a7					_VARHasSubLevel:
.25a7	aa		tax				tax 								; get link address in XA
.25a8	68		pla				pla
.25a9	7a		ply				ply 								; restore code position.
.25aa	48		pha				pha
.25ab	20 1e 24	jsr $241e			jsr 	ERRCheckComma 				; comma required.
.25ae	68		pla				pla
.25af	20 4e 25	jsr $254e			jsr 	VARArrayLookup 				; call it recursively
.25b2	60		rts				rts
.25b3					_VALIndex:
.25b3	4c 67 23	jmp $2367		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.25b6					VARCreate:
.25b6	5a		phy				phy
.25b7	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.25b9	a2 00		ldx #$00			ldx 	#0
.25bb	20 35 10	jsr $1035			jsr 	AllocateMemory
.25be	85 20		sta $20				sta 	zTemp1 						; save new address in zTemp1
.25c0	86 21		stx $21				stx 	zTemp1+1
.25c2	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.25c4	ad 1d 05	lda $051d			lda 	VARHash
.25c7	91 20		sta ($20),y			sta 	(zTemp1),y
.25c9	c8		iny				iny 								; put address of name into +3,+4
.25ca	ad 1b 05	lda $051b			lda 	VARNameAddress
.25cd	91 20		sta ($20),y			sta 	(zTemp1),y
.25cf	c8		iny				iny
.25d0	ad 1c 05	lda $051c			lda 	VARNameAddress+1
.25d3	91 20		sta ($20),y			sta 	(zTemp1),y
.25d5	ad 1e 05	lda $051e			lda 	VARType
.25d8	29 01		and #$01			and 	#1
.25da	f0 06		beq $25e2			beq 	_CVNotString
.25dc	a0 08		ldy #$08			ldy 	#5+3
.25de	a9 80		lda #$80			lda 	#$80
.25e0	91 20		sta ($20),y			sta 	(zTemp1),y
.25e2					_CVNotString:
.25e2	ad 3f 05	lda $053f			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.25e5	85 1e		sta $1e				sta 	zTemp0
.25e7	ad 40 05	lda $0540			lda 	VARHashEntry+1
.25ea	85 1f		sta $1f				sta 	zTemp0+1
.25ec	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.25ee	b2 1e		lda ($1e)			lda 	(zTemp0)
.25f0	92 20		sta ($20)			sta 	(zTemp1)
.25f2	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.25f4	91 20		sta ($20),y			sta 	(zTemp1),y
.25f6	a5 20		lda $20				lda 	zTemp1 						; address of the new record into head
.25f8	92 1e		sta ($1e)			sta 	(zTemp0)
.25fa	a5 21		lda $21				lda 	zTemp1+1
.25fc	91 1e		sta ($1e),y			sta 	(zTemp0),y
.25fe	a5 20		lda $20				lda 	zTemp1 						; new record to XA
.2600	a6 21		ldx $21				ldx 	zTemp1+1
.2602	18		clc				clc 								; add 5 to point to the data.
.2603	69 05		adc #$05			adc 	#5
.2605	90 01		bcc $2608			bcc 	_VCNoCarry
.2607	e8		inx				inx
.2608					_VCNoCarry:
.2608	7a		ply				ply
.2609	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.260a					VARFind:
.260a	5a		phy				phy
.260b	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.260d	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.260f	85 21		sta $21				sta 	zTemp1+1
.2611	f0 1c		beq $262f			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2613	b2 1e		lda ($1e)			lda 	(zTemp0)
.2615	85 20		sta $20				sta 	zTemp1
.2617					_VFLoop:
.2617	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2619	b1 20		lda ($20),y			lda 	(zTemp1),y
.261b	cd 1d 05	cmp $051d			cmp 	VARHash
.261e	f0 12		beq $2632			beq 	_VFHashesMatch 				; if so, check the name.
.2620					_VFNext:
.2620	b2 20		lda ($20)			lda 	(zTemp1) 					; next link to AX
.2622	aa		tax				tax
.2623	a0 01		ldy #$01			ldy 	#1
.2625	b1 20		lda ($20),y			lda 	(zTemp1),y
.2627	85 21		sta $21				sta 	zTemp1+1
.2629	86 20		stx $20				stx 	zTemp1
.262b	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.262d	d0 e8		bne $2617			bne 	_VFLoop
.262f					_VFExitFail:
.262f	7a		ply				ply
.2630	18		clc				clc
.2631	60		rts				rts
.2632					_VFHashesMatch:
.2632	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2634	b1 20		lda ($20),y			lda 	(zTemp1),y
.2636	85 22		sta $22				sta 	zTemp2
.2638	c8		iny				iny
.2639	b1 20		lda ($20),y			lda 	(zTemp1),y
.263b	85 23		sta $23				sta 	zTemp2+1
.263d	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.263f					_VFNameCompLoop:
.263f	c8		iny				iny 								; char at a time
.2640	b9 1f 05	lda $051f,y			lda 	VARBuffer,y
.2643	d1 22		cmp ($22),y			cmp 	(zTemp2),y
.2645	d0 d9		bne $2620			bne 	_VFNext						; next entry if different.
.2647	c9 7c		cmp #$7c			cmp 	#$7C
.2649	90 f4		bcc $263f			bcc 	_VFNameCompLoop 			; until done the whole lot.
.264b	18		clc				clc
.264c	a5 20		lda $20				lda 	zTemp1
.264e	a6 21		ldx $21				ldx 	zTemp1+1
.2650	69 05		adc #$05			adc 	#5
.2652	90 01		bcc $2655			bcc 	_VFNNoCarry
.2654	e8		inx				inx
.2655					_VFNNoCarry:
.2655	7a		ply				ply
.2656	38		sec				sec
.2657	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2658					VARGetInfo:
.2658	98		tya				tya 								; calculate the address of the identifier start.
.2659	18		clc				clc
.265a	65 1c		adc $1c				adc 	codePtr
.265c	8d 1b 05	sta $051b			sta 	VARNameAddress
.265f	a5 1d		lda $1d				lda 	codePtr+1
.2661	69 00		adc #$00			adc 	#0
.2663	8d 1c 05	sta $051c			sta 	VARNameAddress+1
.2666	9c 1d 05	stz $051d			stz 	VARHash
.2669	a2 00		ldx #$00			ldx 	#0
.266b					_VARCopyName:
.266b	18		clc				clc 								; update the sum hash.
.266c	ad 1d 05	lda $051d			lda 	VARHash
.266f	71 1c		adc ($1c),y			adc 	(codePtr),y
.2671	8d 1d 05	sta $051d			sta 	VARHash
.2674	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get character and save it in buffer
.2676	c8		iny				iny
.2677	9d 1f 05	sta $051f,x			sta 	VARBuffer,x
.267a	e8		inx				inx
.267b	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.267d	90 ec		bcc $266b			bcc 	_VARCopyName
.267f	8d 1e 05	sta $051e			sta 	VARType 					; save type byte
.2682	29 03		and #$03			and 	#3 							; type is 0-3
.2684	0a		asl a				asl 	a
.2685	0a		asl a				asl 	a
.2686	85 1e		sta $1e				sta 	zTemp0
.2688	ad 1d 05	lda $051d			lda 	VARHash 					; force into range of hash entries per type.
.268b	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.268d	65 1e		adc $1e				adc 	zTemp0 						; index of hash table
.268f	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2690	69 41		adc #$41			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2692	85 1e		sta $1e				sta 	zTemp0
.2694	8d 3f 05	sta $053f			sta 	VARHashEntry
.2697	a9 05		lda #$05			lda 	#VARHashTables >> 8
.2699	69 00		adc #$00			adc 	#0
.269b	85 1f		sta $1f				sta 	zTemp0+1
.269d	8d 40 05	sta $0540			sta 	VARHashEntry+1
.26a0	60		rts				rts
.26a1					VARClearHashTables:
.26a1	a2 00		ldx #$00			ldx 	#0
.26a3					_VCHRLoop:
.26a3	a9 00		lda #$00			lda 	#0
.26a5	9d 41 05	sta $0541,x			sta 	VARHashTables,x
.26a8	e8		inx				inx
.26a9	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.26ab	d0 f6		bne $26a3			bne 	_VCHRLoop
.26ad	60		rts				rts
.051b					VARNameAddress:
>051b							.fill 	2
.051d					VARHash:
>051d							.fill 	1
.051e					VARType:
>051e							.fill 	1
.051f					VARBuffer:
>051f							.fill 	32
.053f					VARHashEntry:
>053f							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0541					VARHashTables:
>0541							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.26ae					VARCheckSimple:
.26ae	aa		tax				tax 								; save in X
.26af	b1 1c		lda ($1c),y			lda 	(codePtr),y
.26b1	c9 7c		cmp #$7c			cmp 	#$7C
.26b3	d0 15		bne $26ca			bne 	_VCSComplex
.26b5	c8		iny				iny 								; consume the second byte, the type.
.26b6	8a		txa				txa  								; character (40-7F) x 4
.26b7	0a		asl a				asl 	a
.26b8	0a		asl a				asl  	a
.26b9	18		clc				clc
.26ba	69 61		adc #$61			adc 	#FastVariables & $FF
.26bc	85 0c		sta $0c				sta 	IFR0+IM0
.26be	a9 05		lda #$05			lda 	#FastVariables >> 8
.26c0	69 00		adc #$00			adc 	#0
.26c2	85 0d		sta $0d				sta 	IFR0+IM1
.26c4	64 0e		stz $0e				stz 	IFR0+IM2
.26c6	64 0f		stz $0f				stz 	IFR0+IExp
.26c8	38		sec				sec 								; it's a reference
.26c9	60		rts				rts
.26ca					_VCSComplex:
.26ca	88		dey				dey	 								; extract information.
.26cb	20 58 26	jsr $2658			jsr 	VARGetInfo
.26ce	20 0a 26	jsr $260a			jsr 	VARFind 					; search for variable
.26d1	b0 0a		bcs $26dd			bcs 	_VCSHaveVariable
.26d3	ad 1e 05	lda $051e			lda 	VARType 					; error if arrays, cannot autocreate
.26d6	29 02		and #$02			and 	#2
.26d8	d0 25		bne $26ff			bne 	_VCNoCreate
.26da	20 b6 25	jsr $25b6			jsr 	VARCreate 					; create variable
.26dd					_VCSHaveVariable:
.26dd	48		pha				pha 								; save LSB on the stack
.26de	ad 1e 05	lda $051e			lda 	VARType 					; get var type, and shift bit 1 into carry
.26e1	6a		ror a				ror 	a
.26e2	6a		ror a				ror 	a
.26e3	68		pla				pla 								; restore LSB
.26e4	90 08		bcc $26ee			bcc 	_VCSNotArray 				; skip if not an array
.26e6	20 4e 25	jsr $254e			jsr 	VARArrayLookup 				; look for subscripts.
.26e9	48		pha				pha 								; check )
.26ea	20 16 24	jsr $2416			jsr 	ERRCheckRParen
.26ed	68		pla				pla
.26ee					_VCSNotArray:
.26ee	86 0d		stx $0d				stx 	IFR0+IM1 					; save address
.26f0	85 0c		sta $0c				sta 	IFR0+IM0
.26f2	64 0e		stz $0e				stz 	IFR0+IM2 					; clear the unused byte.
.26f4	ad 1e 05	lda $051e			lda 	VARType 					; number/string bit into carry
.26f7	6a		ror a				ror 	a
.26f8	a9 00		lda #$00			lda 	#0
.26fa	6a		ror a				ror 	a 							; now $00 or $80
.26fb	85 0f		sta $0f				sta 	IFR0+IExp
.26fd	38		sec				sec 								; it's a reference
.26fe	60		rts				rts
.26ff					_VCNoCreate:
.26ff	4c 8b 23	jmp $238b		jmp	ErrorV_uninitialised
.0561					FastVariables:
>0561							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.2702					IFInitialise:
.2702	9c d1 05	stz $05d1			stz 	IFStackIndex
.2705	60		rts				rts
.2706					IFloatSubtract:
.2706	da		phx				phx
.2707	a2 0c		ldx #$0c			ldx 	#IFR0
.2709	20 22 2d	jsr $2d22			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.270c	fa		plx				plx
.270d					IFloatAdd:
.270d	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.270f	05 0f		ora $0f				ora 	IFR0+IExp
.2711	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2713	d0 4e		bne $2763			bne 	_IFloatAddDecimals 			; decimal version.
.2715					_IFAddSubMantissa:
.2715	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2717	45 0f		eor $0f				eor 	IFR0+IExp
.2719	29 40		and #$40			and 	#IFSign
.271b	d0 21		bne $273e			bne 	_IFloatSubMantissa
.271d	18		clc				clc 								; do the actual addition
.271e	a5 0c		lda $0c			lda 	IFR0+IM0
.2720	75 00		adc $00,x		adc 		IM0,x
.2722	85 0c		sta $0c			sta 	IFR0+IM0
.2724	a5 0d		lda $0d			lda 	IFR0+IM1
.2726	75 01		adc $01,x		adc 		IM1,x
.2728	85 0d		sta $0d			sta 	IFR0+IM1
.272a	a5 0e		lda $0e			lda 	IFR0+IM2
.272c	75 02		adc $02,x		adc 		IM2,x
.272e	85 0e		sta $0e			sta 	IFR0+IM2
.2730	10 29		bpl $275b			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2732	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.2734	20 46 2d	jsr $2d46			jsr 	IFloatShiftRight
.2737	20 70 2d	jsr $2d70			jsr 	IFloatIncExponent
.273a	d0 1f		bne $275b			bne 	_IFloatAddExit
.273c	38		sec				sec 								; overflowed numerically.
.273d	60		rts				rts
.273e					_IFloatSubMantissa:
.273e	38		sec				sec 								; do the subtraction R0-Rx
.273f	a5 0c		lda $0c			lda 	IFR0+IM0
.2741	f5 00		sbc $00,x		sbc 		IM0,x
.2743	85 0c		sta $0c			sta 	IFR0+IM0
.2745	a5 0d		lda $0d			lda 	IFR0+IM1
.2747	f5 01		sbc $01,x		sbc 		IM1,x
.2749	85 0d		sta $0d			sta 	IFR0+IM1
.274b	a5 0e		lda $0e			lda 	IFR0+IM2
.274d	f5 02		sbc $02,x		sbc 		IM2,x
.274f	85 0e		sta $0e			sta 	IFR0+IM2
.2751	b0 08		bcs $275b			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2753	a2 0c		ldx #$0c			ldx 	#IFR0
.2755	20 2a 2d	jsr $2d2a			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2758	20 22 2d	jsr $2d22			jsr 	IFloatNegate 				; negate
.275b					_IFloatAddExit:
.275b	18		clc				clc
.275c	60		rts				rts
.275d					_IFloatZeroAdd:
.275d	fa		plx				plx 								; return this value in R0
.275e	20 a8 2c	jsr $2ca8			jsr 	IFloatCopyFromRegister
.2761	18		clc				clc
.2762	60		rts				rts
.2763					_IFloatAddDecimals:
.2763	20 10 2d	jsr $2d10			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2766	f0 f3		beq $275b			beq 	_IFloatAddExit
.2768	20 4e 2d	jsr $2d4e			jsr 	IFloatNormalise 			; normalise RX
.276b	da		phx				phx 								; normalise R0
.276c	a2 0c		ldx #$0c			ldx 	#IFR0
.276e	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero
.2771	f0 ea		beq $275d			beq 	_IFloatZeroAdd
.2773	20 4e 2d	jsr $2d4e			jsr 	IFloatNormalise
.2776	fa		plx				plx
.2777	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.2779	29 3f		and #$3f			and 	#IFXMask
.277b	38		sec				sec
.277c	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.277e	85 0a		sta $0a				sta 	iTemp0
.2780	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2782	29 3f		and #$3f			and 	#IFXMask
.2784	38		sec				sec
.2785	e9 20		sbc #$20			sbc 	#$20
.2787	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.2789	b0 02		bcs $278d			bcs 	_IFloatHaveLarger
.278b	a5 0a		lda $0a				lda 	iTemp0
.278d					_IFloatHaveLarger:
.278d	18		clc				clc 								; get the actual one back.
.278e	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2790	20 9d 27	jsr $279d			jsr 	_IFShiftXToA
.2793	da		phx				phx
.2794	a2 0c		ldx #$0c			ldx 	#IFR0
.2796	20 9d 27	jsr $279d			jsr 	_IFShiftXToA
.2799	fa		plx				plx
.279a	4c 15 27	jmp $2715			jmp 	_IFAddSubMantissa 			; do the adding bit.
.279d					_IFShiftXToA:
.279d	8d c9 05	sta $05c9			sta 	IFTarget
.27a0	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero 			; check adding zero ?
.27a3	f0 11		beq $27b6			beq 	_IFSXExit
.27a5					_IFSXLoop:
.27a5	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.27a7	29 3f		and #$3f			and 	#IFXMask
.27a9	cd c9 05	cmp $05c9			cmp 	IFTarget
.27ac	f0 08		beq $27b6			beq 	_IFSXExit
.27ae	20 46 2d	jsr $2d46			jsr 	IFloatShiftRight
.27b1	20 70 2d	jsr $2d70			jsr 	IFloatIncExponent
.27b4	80 ef		bra $27a5			bra 	_IFSXLoop
.27b6					_IFSXExit:
.27b6	60		rts				rts
.05c9					IFTarget:
>05c9							.fill 	1
.27b7					IFloatMultiply:
.27b7	8e c9 05	stx $05c9			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.27ba	20 72 28	jsr $2872			jsr 	IFCalculateNewSign
.27bd	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.27bf	05 0f		ora $0f				ora 	IFR0+IExp
.27c1	29 3f		and #$3f			and 	#IFXMask
.27c3	15 01		ora $01,x			ora 	IM1,x
.27c5	05 0d		ora $0d				ora 	IFR0+IM1
.27c7	15 02		ora $02,x			ora 	IM2,x
.27c9	05 0e		ora $0e				ora 	IFR0+IM2
.27cb	d0 0a		bne $27d7			bne 	_IFMStandard
.27cd	20 f3 2c	jsr $2cf3			jsr 	IFloatMultiply8BitRx
.27d0	ad cb 05	lda $05cb			lda 	IFNewSign
.27d3	85 0f		sta $0f				sta 	IFR0+IExp
.27d5	18		clc				clc
.27d6	60		rts				rts
.27d7					_IFMStandard:
.27d7	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.27d9	20 69 28	jsr $2869			jsr 	IFMSignExtend
.27dc	8d ca 05	sta $05ca			sta 	IFNewExponent
.27df	a5 0f		lda $0f				lda 	IFR0+IExp
.27e1	20 69 28	jsr $2869			jsr 	IFMSignExtend
.27e4	18		clc				clc
.27e5	6d ca 05	adc $05ca			adc 	IFNewExponent
.27e8	8d ca 05	sta $05ca			sta 	IFNewExponent
.27eb	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.27ed	20 b9 2c	jsr $2cb9			jsr 	IFloatCopyToRegister
.27f0	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.27f2	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.27f5					_IFMLoop:
.27f5	a2 18		ldx #$18			ldx 	#IFRTemp
.27f7	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero
.27fa	f0 3a		beq $2836			beq 	_IFMExit
.27fc	ae c9 05	ldx $05c9			ldx 	IFTarget 					; look at adder MSB
.27ff	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2801	10 03		bpl $2806			bpl	 	_IFMTargetOkay
.2803	20 5a 28	jsr $285a			jsr 	_IFMShiftAll
.2806					_IFMTargetOkay:
.2806	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2808	29 01		and #$01			and 	#1
.280a	f0 16		beq $2822			beq 	_IFMNoAdd
.280c	ae c9 05	ldx $05c9			ldx 	IFTarget 					; add adder
.280f	18		clc				clc
.2810	a5 0c		lda $0c			lda 	IFR0+IM0
.2812	75 00		adc $00,x		adc 		IM0,x
.2814	85 0c		sta $0c			sta 	IFR0+IM0
.2816	a5 0d		lda $0d			lda 	IFR0+IM1
.2818	75 01		adc $01,x		adc 		IM1,x
.281a	85 0d		sta $0d			sta 	IFR0+IM1
.281c	a5 0e		lda $0e			lda 	IFR0+IM2
.281e	75 02		adc $02,x		adc 		IM2,x
.2820	85 0e		sta $0e			sta 	IFR0+IM2
.2822					_IFMNoAdd:
.2822	a5 0e		lda $0e				lda 	IFR0+IM2
.2824	10 03		bpl $2829			bpl 	_IFMResultOkay
.2826	20 5a 28	jsr $285a			jsr 	_IFMShiftAll
.2829					_IFMResultOkay:
.2829	a2 18		ldx #$18			ldx 	#IFRTemp
.282b	20 46 2d	jsr $2d46			jsr 	IFloatShiftRight
.282e	ae c9 05	ldx $05c9			ldx 	IFTarget
.2831	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.2834	80 bf		bra $27f5			bra 	_IFMLoop
.2836					_IFMExit:
.2836	ad ca 05	lda $05ca			lda 	IFNewExponent 				; validate new exponent.
.2839	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.283b	90 0f		bcc $284c			bcc 	_IFMOkay
.283d	c9 e0		cmp #$e0			cmp 	#$E0
.283f	b0 0b		bcs $284c			bcs 	_IFMOkay
.2841	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2843	f0 13		beq $2858			beq 	_IFMError
.2845	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.2847	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.284a	18		clc				clc
.284b	60		rts				rts
.284c					_IFMOkay:
.284c	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.284e	0d cb 05	ora $05cb			ora 	IFNewSign
.2851	85 0f		sta $0f				sta 	IFR0+IExp
.2853	18		clc				clc
.2854	60		rts				rts
.2855	4c ff ff	jmp $ffff			jmp 	$FFFF
.2858					_IFMError:
.2858	38		sec				sec
.2859	60		rts				rts
.285a					_IFMShiftAll:
.285a	a2 0c		ldx #$0c			ldx 	#IFR0
.285c	20 46 2d	jsr $2d46			jsr 	IFloatShiftRight
.285f	ae c9 05	ldx $05c9			ldx 	IFTarget
.2862	20 46 2d	jsr $2d46			jsr 	IFloatShiftRight
.2865	ee ca 05	inc $05ca			inc 	IFNewExponent
.2868	60		rts				rts
.2869					IFMSignExtend:
.2869	29 3f		and #$3f			and 	#IFXMask
.286b	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.286d	90 02		bcc $2871			bcc 	_IFMNoSXX
.286f	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2871					_IFMNoSXX:
.2871	60		rts				rts
.2872					IFCalculateNewSign:
.2872	b5 03		lda $03,x			lda 	IExp,x
.2874	45 0f		eor $0f				eor 	IFR0+IExp
.2876	29 40		and #$40			and 	#IFSign
.2878	8d cb 05	sta $05cb			sta 	IFNewSign
.287b	60		rts				rts
.05ca					IFNewExponent:
>05ca							.fill 	1
.05cb					IFNewSign:
>05cb							.fill 	1
.287c					IFloatDivideInteger:
.287c	20 95 28	jsr $2895			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.287f	b0 06		bcs $2887			bcs 	_IFDIExit
.2881	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.2883	20 a8 2c	jsr $2ca8			jsr 	IFloatCopyFromRegister
.2886	18		clc				clc
.2887					_IFDIExit:
.2887	60		rts				rts
.2888					IFloatModulusInteger:
.2888	20 95 28	jsr $2895			jsr 	IFloatDivideIntegerCommon
.288b	b0 07		bcs $2894			bcs 	_IFMIExit
.288d	ae c9 05	ldx $05c9			ldx 	IFTarget
.2890	20 a8 2c	jsr $2ca8			jsr 	IFloatCopyFromRegister
.2893	18		clc				clc
.2894					_IFMIExit:
.2894	60		rts				rts
.2895					IFloatDivideIntegerCommon:
.2895	8e c9 05	stx $05c9			stx 	IFTarget  					; this is s1, s0 = R0
.2898	20 72 28	jsr $2872			jsr 	IFCalculateNewSign 			; calculate sign of result
.289b	20 c3 28	jsr $28c3			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.289e	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.28a0	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero
.28a3	f0 1c		beq $28c1			beq 	_IFDIDivZero
.28a5	ae c9 05	ldx $05c9			ldx 	IFTarget 					; zero Rx (S1)
.28a8	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.28ab	5a		phy				phy
.28ac	a0 18		ldy #$18			ldy 	#24
.28ae					_IFDILoop:
.28ae	20 d4 28	jsr $28d4			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.28b1	20 e0 28	jsr $28e0			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.28b4	88		dey				dey
.28b5	d0 f7		bne $28ae			bne 	_IFDILoop 					; do it 24 times
.28b7	7a		ply				ply
.28b8	ad cb 05	lda $05cb			lda 	IFNewSign 					; set sign of result.
.28bb	29 40		and #$40			and 	#IFSign
.28bd	85 1b		sta $1b				sta 	IFRTemp+IExp
.28bf	18		clc				clc 								; is okay.
.28c0	60		rts				rts
.28c1					_IFDIDivZero:
.28c1	38		sec				sec
.28c2	60		rts				rts
.28c3					IFDCopyRXToRTemp:
.28c3	b5 00		lda $00,x			lda 	IM0,x
.28c5	85 18		sta $18				sta 	IFRTemp+IM0
.28c7	b5 01		lda $01,x			lda 	IM1,x
.28c9	85 19		sta $19				sta 	IFRTemp+IM1
.28cb	b5 02		lda $02,x			lda 	IM2,x
.28cd	85 1a		sta $1a				sta 	IFRTemp+IM2
.28cf	b5 03		lda $03,x			lda 	IExp,x
.28d1	85 1b		sta $1b				sta 	IFRTemp+IExp
.28d3	60		rts				rts
.28d4					IFDShiftSTempS1Left:
.28d4	a2 18		ldx #$18			ldx 	#IFRTemp
.28d6	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft
.28d9	ae c9 05	ldx $05c9			ldx 	IFTarget
.28dc	20 3f 2d	jsr $2d3f			jsr 	IFloatRotateLeft
.28df	60		rts				rts
.28e0					IFDTrySubtract:
.28e0	ae c9 05	ldx $05c9			ldx 	IFTarget 					; s1 = Rx
.28e3	38		sec				sec 								; subtract, saving the results on the stack.
.28e4	b5 00		lda $00,x			lda 	IM0,x
.28e6	e5 0c		sbc $0c				sbc 	IFR0+IM0
.28e8	48		pha				pha
.28e9	b5 01		lda $01,x			lda 	IM1,x
.28eb	e5 0d		sbc $0d				sbc 	IFR0+IM1
.28ed	48		pha				pha
.28ee	b5 02		lda $02,x			lda 	IM2,x
.28f0	e5 0e		sbc $0e				sbc 	IFR0+IM2
.28f2	b0 03		bcs $28f7			bcs 	_IFDCanSubtract
.28f4	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.28f5	68		pla				pla
.28f6	60		rts				rts
.28f7					_IFDCanSubtract:
.28f7	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.28f9	68		pla				pla
.28fa	95 01		sta $01,x			sta 	IM1,x
.28fc	68		pla				pla
.28fd	95 00		sta $00,x			sta 	IM0,x
.28ff	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.2901	d0 06		bne $2909			bne 	_IFDCSExit
.2903	e6 19		inc $19				inc 	IFRTemp+IM1
.2905	d0 02		bne $2909			bne 	_IFDCSExit
.2907	e6 1a		inc $1a				inc 	IFRTemp+IM2
.2909					_IFDCSExit:
.2909	60		rts				rts
.290a					IFloatBitwiseAnd:
.290a	5a		phy				phy
.290b	20 4f 29	jsr $294f			jsr 	IFPreProcessBitwise 		; set up everything.
.290e	d0 0f		bne $291f			bne 	_IFBAExit
.2910					_IFBALoop:
.2910	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2913	35 00		and $00,x			and 	IM0,x
.2915	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2918	e8		inx				inx
.2919	c8		iny				iny
.291a	c0 03		cpy #$03			cpy 	#3
.291c	d0 f2		bne $2910			bne 	_IFBALoop
.291e	18		clc				clc
.291f					_IFBAExit:
.291f	7a		ply				ply
.2920	60		rts				rts
.2921					IFloatBitwiseOr:
.2921	5a		phy				phy
.2922	20 4f 29	jsr $294f			jsr 	IFPreProcessBitwise 		; set up everything.
.2925	d0 0f		bne $2936			bne 	_IFBAExit
.2927					_IFBALoop:
.2927	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.292a	15 00		ora $00,x			ora 	IM0,x
.292c	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.292f	e8		inx				inx
.2930	c8		iny				iny
.2931	c0 03		cpy #$03			cpy 	#3
.2933	d0 f2		bne $2927			bne 	_IFBALoop
.2935	18		clc				clc
.2936					_IFBAExit:
.2936	7a		ply				ply
.2937	60		rts				rts
.2938					IFloatBitwiseXor:
.2938	5a		phy				phy
.2939	20 4f 29	jsr $294f			jsr 	IFPreProcessBitwise 		; set up everything.
.293c	d0 0f		bne $294d			bne 	_IFBAExit
.293e					_IFBALoop:
.293e	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2941	55 00		eor $00,x			eor 	IM0,x
.2943	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2946	e8		inx				inx
.2947	c8		iny				iny
.2948	c0 03		cpy #$03			cpy 	#3
.294a	d0 f2		bne $293e			bne 	_IFBALoop
.294c	18		clc				clc
.294d					_IFBAExit:
.294d	7a		ply				ply
.294e	60		rts				rts
.294f					IFPreProcessBitwise:
.294f	a0 00		ldy #$00			ldy 	#0 							; set index.
.2951	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.2953	15 03		ora $03,x			ora 	IExp,x
.2955	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2957	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2959	38		sec				sec 								; carry set just in cases.
.295a	60		rts				rts
.295b					IFloatAbsoluteR0:
.295b	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.295d	29 bf		and #$bf			and 	#IFSign ^ 255
.295f	85 0f		sta $0f				sta 	IFR0+IExp
.2961	18		clc				clc
.2962	60		rts				rts
.2963					IFloatSquareRootR0:
.2963	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.2965	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero
.2968	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.296a	29 40		and #$40			and 	#IFSign
.296c	d0 2f		bne $299d			bne 	_IFSRFail
.296e	20 4e 2d	jsr $2d4e			jsr 	IFloatNormalise 			; it will work better !
.2971	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.2973	20 b9 2c	jsr $2cb9			jsr 	IFloatCopyToRegister
.2976	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2978	20 69 28	jsr $2869			jsr 	IFMSignExtend 				; sign extended version of the exponent
.297b	18		clc				clc
.297c	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.297e	85 0f		sta $0f				sta 	IFR0+IExp
.2980	4a		lsr a				lsr 	a 							; which we can halve.
.2981	38		sec				sec 								; convert back
.2982	e9 17		sbc #$17			sbc 	#23
.2984	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2986	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.2988	20 9f 29	jsr $299f			jsr 	_IFSRNewton
.298b	20 9f 29	jsr $299f			jsr 	_IFSRNewton
.298e	20 9f 29	jsr $299f			jsr 	_IFSRNewton
.2991	20 9f 29	jsr $299f			jsr 	_IFSRNewton
.2994	18		clc				clc
.2995	60		rts				rts
.2996					_IFSRZero:
.2996	a2 0c		ldx #$0c			ldx 	#IFR0
.2998	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.299b	18		clc				clc
.299c	60		rts				rts
.299d					_IFSRFail:
.299d	38		sec				sec
.299e	60		rts				rts
.299f					_IFSRNewton:
.299f	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.29a1	20 66 2c	jsr $2c66			jsr 	IFloatPushRx
.29a4	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.29a6	20 66 2c	jsr $2c66			jsr 	IFloatPushRx
.29a9	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.29ab	20 3a 2a	jsr $2a3a			jsr 	IFloatDivideFloat
.29ae	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.29b0	20 87 2c	jsr $2c87			jsr 	IFloatPullRx
.29b3	20 0d 27	jsr $270d			jsr 	IFloatAdd 					; now guess + original/guess
.29b6	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.29b8	20 46 2d	jsr $2d46			jsr 	IFloatShiftRight
.29bb	a2 10		ldx #$10			ldx 	#IFR1
.29bd	20 87 2c	jsr $2c87			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.29c0	60		rts				rts
.29c1					IFloatFractionalR0:
.29c1	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.29c3	29 3f		and #$3f			and 	#IFXMask
.29c5	f0 17		beq $29de			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.29c7	20 5b 29	jsr $295b			jsr 	IFloatAbsoluteR0 			; absolute value R9
.29ca	a2 0c		ldx #$0c			ldx 	#IFR0
.29cc	20 4e 2d	jsr $2d4e			jsr 	IFloatNormalise 			; normalise R0
.29cf	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.29d1	20 b9 2c	jsr $2cb9			jsr 	IFloatCopyToRegister
.29d4	20 17 2a	jsr $2a17			jsr 	IFloatIntegerR0 			; take integer part of R0
.29d7	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.29d9	20 06 27	jsr $2706			jsr 	IFloatSubtract
.29dc	80 05		bra $29e3			bra 	_FIPExit
.29de					_FIPZero:
.29de	a2 0c		ldx #$0c			ldx 	#IFR0
.29e0	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.29e3					_FIPExit:
.29e3	18		clc				clc
.29e4	60		rts				rts
.29e5					IFloatCompare:
.29e5	20 06 27	jsr $2706			jsr 	IFloatSubtract 				; subtract R0 from RX.
.29e8	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.29ea	05 0f		ora $0f				ora 	IFR0+IExp
.29ec	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.29ee	29 3f		and #$3f			and 	#IFXMask
.29f0	d0 19		bne $2a0b			bne 	_IFCNonInteger
.29f2	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero 			; check if zero
.29f5	f0 0f		beq $2a06			beq 	_IFCZero
.29f7					_IFCReturnSign:
.29f7	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.29f9	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.29fb	48		pha				pha
.29fc	a9 01		lda #$01			lda 	#1
.29fe	20 19 2d	jsr $2d19			jsr 	IFloatSetByte 				; return to +1
.2a01	68		pla				pla 								; sign bit back
.2a02	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.2a04	18		clc				clc
.2a05	60		rts				rts
.2a06					_IFCZero:
.2a06	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.2a09	18		clc				clc
.2a0a	60		rts				rts
.2a0b					_IFCNonInteger:
.2a0b	a5 0c		lda $0c				lda 	IFR0+IM0
.2a0d	29 00		and #$00			and		#$00
.2a0f	05 0d		ora $0d				ora 	IFR0+IM1
.2a11	05 0e		ora $0e				ora 	IFR0+IM2
.2a13	f0 f1		beq $2a06			beq 	_IFCZero 					; near enough !
.2a15	80 e0		bra $29f7			bra 	_IFCReturnSign 				; return the sign of the difference.
.2a17					IFloatIntegerR0:
.2a17	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2a19	29 3f		and #$3f			and 	#IFXMask
.2a1b	f0 1b		beq $2a38			beq 	_FIPExit 					; if so do nothing
.2a1d	a2 0c		ldx #$0c			ldx 	#IFR0
.2a1f	20 4e 2d	jsr $2d4e			jsr 	IFloatNormalise 			; normalise
.2a22	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero 			; is it zero ?
.2a25	f0 0e		beq $2a35			beq 	_FIPZero 					; if so return zero.
.2a27					_FIPShift:
.2a27	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2a29	29 20		and #$20			and 	#$20 						; still -ve
.2a2b	f0 0b		beq $2a38			beq 	_FIPExit
.2a2d	20 46 2d	jsr $2d46			jsr 	IFloatShiftRight 			; shift mantissa right
.2a30	20 70 2d	jsr $2d70			jsr 	IFloatIncExponent 			; bump exponent
.2a33	80 f2		bra $2a27			bra 	_FIPShift
.2a35					_FIPZero:
.2a35	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.2a38					_FIPExit:
.2a38	18		clc				clc
.2a39	60		rts				rts
.2a3a					IFloatDivideFloat:
.2a3a	8e c9 05	stx $05c9			stx 	IFTarget  					; this is s1, s0 = R0
.2a3d	20 72 28	jsr $2872			jsr 	IFCalculateNewSign 			; calculate sign of result
.2a40	20 4e 2d	jsr $2d4e			jsr 	IFloatNormalise 			; normalise RX
.2a43	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.2a45	20 4e 2d	jsr $2d4e			jsr 	IFloatNormalise
.2a48	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero
.2a4b	f0 56		beq $2aa3			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2a4d	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.2a4f	20 69 28	jsr $2869			jsr 	IFMSignExtend
.2a52	8d ca 05	sta $05ca			sta 	IFNewExponent
.2a55	ae c9 05	ldx $05c9			ldx 	IFTarget 					; calculate s1.exponent
.2a58	b5 03		lda $03,x			lda 	IExp,x
.2a5a	20 69 28	jsr $2869			jsr 	IFMSignExtend
.2a5d	38		sec				sec
.2a5e	ed ca 05	sbc $05ca			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2a61	38		sec				sec
.2a62	e9 17		sbc #$17			sbc 	#23
.2a64	8d ca 05	sta $05ca			sta 	IFNewExponent
.2a67	20 a5 2a	jsr $2aa5			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2a6a	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.2a6c	10 08		bpl $2a76			bpl 	_IFDFNoShiftResult
.2a6e	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.2a70	20 46 2d	jsr $2d46			jsr 	IFloatShiftRight
.2a73	ee ca 05	inc $05ca			inc 	IFNewExponent
.2a76					_IFDFNoShiftResult:
.2a76	ad ca 05	lda $05ca			lda 	IFNewExponent 				; underflow/overflow check.
.2a79	30 06		bmi $2a81			bmi 	_IFDFCheckUnderflow
.2a7b	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2a7d	b0 24		bcs $2aa3			bcs 	_IFDFDivZero
.2a7f	80 11		bra $2a92			bra		_IFDFExit
.2a81					_IFDFCheckUnderflow:
.2a81	ad ca 05	lda $05ca			lda 	IFNewExponent 				; shift into a legal exponent.
.2a84	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2a86	b0 0a		bcs $2a92			bcs 	_IFDFExit
.2a88	ee ca 05	inc $05ca			inc 	IFNewExponent
.2a8b	a2 18		ldx #$18			ldx 	#IFRTemp
.2a8d	20 46 2d	jsr $2d46			jsr 	IFloatShiftRight
.2a90	80 ef		bra $2a81			bra 	_IFDFCheckUnderflow
.2a92					_IFDFExit:
.2a92	ad ca 05	lda $05ca			lda 	IFNewExponent 				; combine exponent and sign.
.2a95	29 3f		and #$3f			and 	#IFXMask
.2a97	0d cb 05	ora $05cb			ora 	IFNewSign
.2a9a	85 1b		sta $1b				sta 	IFRTemp+IExp
.2a9c	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.2a9e	20 a8 2c	jsr $2ca8			jsr 	IFloatCopyFromRegister
.2aa1	18		clc				clc
.2aa2	60		rts				rts
.2aa3					_IFDFDivZero:
.2aa3	38		sec				sec
.2aa4	60		rts				rts
.2aa5					IFloatDivideSupport:
.2aa5	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.2aa7	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.2aaa	5a		phy				phy 								; main division loop x 23
.2aab	a0 17		ldy #$17			ldy 	#23
.2aad					_IFDSLoop:
.2aad	20 e0 28	jsr $28e0			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2ab0	20 d4 28	jsr $28d4			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2ab3	88		dey				dey
.2ab4	d0 f7		bne $2aad			bne 	_IFDSLoop 					; do it 24 times
.2ab6	7a		ply				ply
.2ab7	60		rts				rts
.2ab8					IFloatIntegerToStringR0:
.2ab8	8d cc 05	sta $05cc			sta 	IFBase 						; save base to use.
.2abb	20 98 2d	jsr $2d98			jsr 	IFloatBufferReset			; empty buffer
.2abe	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.2ac0	29 3f		and #$3f			and 	#IFXMask
.2ac2	d0 1e		bne $2ae2			bne 	_IFIFail
.2ac4	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.2ac6	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero
.2ac9	f0 0e		beq $2ad9			beq 	_IFINotNegative
.2acb	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.2acd	29 40		and #$40			and 	#IFSign
.2acf	f0 08		beq $2ad9			beq 	_IFINotNegative
.2ad1	a9 2d		lda #$2d			lda 	#"-"						; output -
.2ad3	20 a7 2d	jsr $2da7			jsr 	IFloatBufferWrite
.2ad6	20 22 2d	jsr $2d22			jsr 	IFloatNegate 				; tidy up !
.2ad9					_IFINotNegative:
.2ad9	20 e4 2a	jsr $2ae4			jsr 	_IFIRecursiveConvert 		; start converting
.2adc	20 9f 2d	jsr $2d9f			jsr 	IFloatGetBufferAddress
.2adf	18		clc				clc
.2ae0	80 01		bra $2ae3			bra 	_IFIExit
.2ae2					_IFIFail:
.2ae2	38		sec				sec
.2ae3					_IFIExit:
.2ae3	60		rts				rts
.2ae4					_IFIRecursiveConvert:
.2ae4	a2 10		ldx #$10			ldx 	#IFR1
.2ae6	20 b9 2c	jsr $2cb9			jsr 	IFloatCopyToRegister 		; R0->R1
.2ae9	a2 0c		ldx #$0c			ldx 	#IFR0
.2aeb	ad cc 05	lda $05cc			lda 	IFBase 						; Base -> R0
.2aee	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.2af1	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.2af3	20 7c 28	jsr $287c			jsr 	IFloatDivideInteger
.2af6	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.2af8	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero
.2afb	f0 09		beq $2b06			beq 	_IFIOutDigit
.2afd	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.2aff	48		pha				pha
.2b00	20 e4 2a	jsr $2ae4			jsr 	_IFIRecursiveConvert 		; convert the divider
.2b03	68		pla				pla
.2b04	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.2b06					_IFIOutDigit:
.2b06	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.2b08	c9 0a		cmp #$0a			cmp	 	#10
.2b0a	90 02		bcc $2b0e			bcc 	_IFINotHex
.2b0c	69 06		adc #$06			adc 	#6
.2b0e					_IFINotHex:
.2b0e	69 30		adc #$30			adc 	#48
.2b10	20 a7 2d	jsr $2da7			jsr 	IFloatBufferWrite
.2b13	60		rts				rts
.05cc					IFBase:
>05cc							.fill 	1
.2b14					IFloatFloatToStringR0:
.2b14	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2b16	20 66 2c	jsr $2c66			jsr 	IFloatPushRx
.2b19	20 b9 2c	jsr $2cb9			jsr 	IFloatCopyToRegister
.2b1c	20 17 2a	jsr $2a17			jsr 	IFloatIntegerR0				; make R0 integer
.2b1f	a9 0a		lda #$0a			lda 	#10 						; base 10.
.2b21	20 b8 2a	jsr $2ab8			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.2b24	9c cd 05	stz $05cd			stz 	IFloatDecimalCount 			; zero the decimal count.
.2b27	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.2b29	29 3f		and #$3f			and 	#IFXMask
.2b2b	f0 44		beq $2b71			beq 	_IFFSExit
.2b2d					_IFloatFracLoop:
.2b2d	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.2b2f	20 a8 2c	jsr $2ca8			jsr 	IFloatCopyFromRegister
.2b32	20 c1 29	jsr $29c1			jsr 	IFloatFractionalR0
.2b35	20 4e 2d	jsr $2d4e			jsr 	IFloatNormalise
.2b38	a2 14		ldx #$14			ldx 	#IFR2
.2b3a	20 b9 2c	jsr $2cb9			jsr 	IFloatCopyToRegister 		; copy to R2
.2b3d	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.2b3f	a9 0a		lda #$0a			lda 	#10
.2b41	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.2b44	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.2b46	20 b7 27	jsr $27b7			jsr 	IFloatMultiply
.2b49	a2 14		ldx #$14			ldx 	#IFR2
.2b4b	20 b9 2c	jsr $2cb9			jsr 	IFloatCopyToRegister
.2b4e	20 17 2a	jsr $2a17			jsr 	IFloatIntegerR0 			; get integer part of R0
.2b51	ad cd 05	lda $05cd			lda 	IFloatDecimalCount 			; done 5 dp, no more
.2b54	c9 03		cmp #$03			cmp 	#3
.2b56	f0 16		beq $2b6e			beq 	_IFFSExitStripZero
.2b58	ad cd 05	lda $05cd			lda 	IFloatDecimalCount 			; written the DP yet ?
.2b5b	d0 05		bne $2b62			bne 	_IFloatNotFirst
.2b5d	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.2b5f	20 a7 2d	jsr $2da7			jsr 	IFloatBufferWrite
.2b62					_IFloatNotFirst:
.2b62	ee cd 05	inc $05cd			inc 	IFloatDecimalCount
.2b65	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.2b67	09 30		ora #$30			ora 	#"0"						; ASCII
.2b69	20 a7 2d	jsr $2da7			jsr 	IFloatBufferWrite 			; write to the buffer.
.2b6c	80 bf		bra $2b2d			bra 	_IFloatFracLoop
.2b6e					_IFFSExitStripZero:
.2b6e	20 b6 2d	jsr $2db6			jsr 	IFloatStripTrailingZeros
.2b71					_IFFSExit:
.2b71	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.2b73	20 87 2c	jsr $2c87			jsr 	IFloatPullRx
.2b76	20 9f 2d	jsr $2d9f			jsr 	IFloatGetBufferAddress
.2b79	18		clc				clc
.2b7a	60		rts				rts
.05cd					IFloatDecimalCount:
>05cd							.fill 	1
.2b7b					IFloatStringToFloatR0:
.2b7b	8d ce 05	sta $05ce			sta 	IFCount 					; save it out.
.2b7e	86 0a		stx $0a				stx 	iTemp0
.2b80	84 0b		sty $0b				sty 	iTemp0+1
.2b82	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.2b84	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.2b87	9c cf 05	stz $05cf			stz 	IFSignFlag 					; clear the sign flag
.2b8a	20 17 2c	jsr $2c17			jsr 	IFSTFGetNext 				; get first
.2b8d	f0 1b		beq $2baa			beq 	_IFSTFFail 					; no character
.2b8f	90 10		bcc $2ba1			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.2b91	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.2b93	d0 15		bne $2baa			bne 	_IFSTFFail
.2b95	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.2b97	8d cf 05	sta $05cf			sta 	IFSignFlag
.2b9a					_IFSTFLoop:
.2b9a	20 17 2c	jsr $2c17			jsr 	IFSTFGetNext 				; get next
.2b9d	b0 0b		bcs $2baa			bcs 	_IFSTFFail 					; bad character.
.2b9f	f0 11		beq $2bb2			beq 	_IFSTFExit 					; end of data
.2ba1					_IFSTFHaveChar:
.2ba1	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.2ba3	f0 08		beq $2bad			beq 	_IFSTFDecimal
.2ba5	20 3b 2c	jsr $2c3b			jsr 	IFSTFAddR0 					; add number in
.2ba8	80 f0		bra $2b9a			bra 	_IFSTFLoop 					; keep going until . or end.
.2baa					_IFSTFFail:
.2baa	38		sec				sec
.2bab	80 0d		bra $2bba			bra 	_IFSTFReturn
.2bad					_IFSTFDecimal:
.2bad	20 c2 2b	jsr $2bc2			jsr 	IFSTFDecimal 				; call the decimal places code.
.2bb0	b0 08		bcs $2bba			bcs 	_IFSTFReturn 				; error
.2bb2					_IFSTFExit:
.2bb2	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.2bb4	0d cf 05	ora $05cf			ora 	IFSignFlag
.2bb7	85 0f		sta $0f				sta 	IFR0+IExp
.2bb9	18		clc				clc
.2bba					_IFSTFReturn:
.2bba	60		rts				rts
.2bbb					IFloatAddDecimalToR0:
.2bbb	8d ce 05	sta $05ce			sta 	IFCount 					; save it out.
.2bbe	86 0a		stx $0a				stx 	iTemp0
.2bc0	84 0b		sty $0b				sty 	iTemp0+1
.2bc2					IFSTFDecimal:
.2bc2	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.2bc4	20 66 2c	jsr $2c66			jsr 	IFloatPushRx
.2bc7	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.2bc9	20 17 2d	jsr $2d17			jsr 	IFloatSetZero
.2bcc	9c d0 05	stz $05d0			stz 	IFDecimalPlaces
.2bcf					_IFSTDLoop:
.2bcf	20 17 2c	jsr $2c17			jsr 	IFSTFGetNext 				; get next
.2bd2	b0 41		bcs $2c15			bcs 	_IFSTFFail2 				; bad character.
.2bd4	f0 11		beq $2be7			beq 	_IFSTFComplete 				; end of data, work out the result.
.2bd6	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.2bd8	f0 39		beq $2c13			beq 	_IFSTFExit2
.2bda	20 3b 2c	jsr $2c3b			jsr 	IFSTFAddR0 					; add number in
.2bdd	ee d0 05	inc $05d0			inc 	IFDecimalPlaces 			; count decimals
.2be0	ad d0 05	lda $05d0			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.2be3	c9 03		cmp #$03			cmp 	#3
.2be5	90 e8		bcc $2bcf			bcc 	_IFSTDLoop
.2be7					_IFSTFComplete:
.2be7	ad d0 05	lda $05d0			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2bea	f0 27		beq $2c13			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2bec	3a		dec a				dec 	a 							; table indexed from 1.
.2bed	0a		asl a				asl 	a
.2bee	0a		asl a				asl 	a
.2bef	aa		tax				tax
.2bf0	bd 52 2c	lda $2c52,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.2bf3	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2bf5	bd 53 2c	lda $2c53,x			lda 	TableTen+1,x
.2bf8	85 11		sta $11				sta  	IFR1+IM1
.2bfa	bd 54 2c	lda $2c54,x			lda 	TableTen+2,x
.2bfd	85 12		sta $12				sta  	IFR1+IM2
.2bff	bd 55 2c	lda $2c55,x			lda 	TableTen+3,x
.2c02	85 13		sta $13				sta  	IFR1+IExp
.2c04	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2c06	20 b7 27	jsr $27b7			jsr 	IFloatMultiply
.2c09	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.2c0b	20 87 2c	jsr $2c87			jsr 	IFloatPullRx
.2c0e	a2 10		ldx #$10			ldx 	#IFR1
.2c10	20 0d 27	jsr $270d			jsr 	IFloatAdd
.2c13					_IFSTFExit2:
.2c13	18		clc				clc
.2c14	60		rts				rts
.2c15					_IFSTFFail2:
.2c15	38		sec				sec
.2c16	60		rts				rts
.2c17					IFSTFGetNext:
.2c17	ad ce 05	lda $05ce			lda 	IFCount  					; if count is zero, return with Z set.
.2c1a	f0 19		beq $2c35			beq 	_IFSTFReturnOk
.2c1c	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2c1e	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.2c20	d0 02		bne $2c24			bne 	_IFSTFGNNoCarry
.2c22	e6 0b		inc $0b				inc 	iTemp0+1
.2c24					_IFSTFGNNoCarry:
.2c24	ce ce 05	dec $05ce			dec 	IFCount 					; dec count.
.2c27	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2c29	f0 08		beq $2c33			beq 	_IFSTFGOkay
.2c2b	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2c2d	90 08		bcc $2c37			bcc 	_IFSTFGFail
.2c2f	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.2c31	b0 04		bcs $2c37			bcs 	_IFSTFGFail
.2c33					_IFSTFGOkay:
.2c33	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2c35					_IFSTFReturnOk:
.2c35	18		clc				clc
.2c36	60		rts				rts
.2c37					_IFSTFGFail:
.2c37	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2c39	38		sec				sec
.2c3a	60		rts				rts
.2c3b					IFSTFAddR0:
.2c3b	29 0f		and #$0f			and 	#15 						; to int value
.2c3d	48		pha				pha 								; save it.
.2c3e	a9 0a		lda #$0a			lda 	#10
.2c40	a2 10		ldx #$10			ldx 	#IFR1
.2c42	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.2c45	20 b7 27	jsr $27b7			jsr 	IFloatMultiply
.2c48	68		pla				pla
.2c49	a2 10		ldx #$10			ldx 	#IFR1
.2c4b	20 19 2d	jsr $2d19			jsr 	IFloatSetByte
.2c4e	20 0d 27	jsr $270d			jsr 	IFloatAdd
.2c51	60		rts				rts
.05ce					IFCount:
>05ce							.fill 	1
.05cf					IFSignFlag:
>05cf							.fill 	1
.05d0					IFDecimalPlaces:
>05d0							.fill 	1
.2c52					TableTen:
>2c52	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2c56	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2c5a	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2c5e	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>2c62	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2c66					IFloatPushRx:
.2c66	5a		phy				phy
.2c67	ac d1 05	ldy $05d1			ldy 	IFStackIndex
.2c6a	b5 00		lda $00,x			lda 	IM0,x
.2c6c	99 d2 05	sta $05d2,y			sta 	IFStack,y
.2c6f	b5 01		lda $01,x			lda 	IM1,x
.2c71	99 d3 05	sta $05d3,y			sta 	IFStack+1,y
.2c74	b5 02		lda $02,x			lda 	IM2,x
.2c76	99 d4 05	sta $05d4,y			sta 	IFStack+2,y
.2c79	b5 03		lda $03,x			lda 	IExp,x
.2c7b	99 d5 05	sta $05d5,y			sta 	IFStack+3,y
.2c7e	c8		iny				iny
.2c7f	c8		iny				iny
.2c80	c8		iny				iny
.2c81	c8		iny				iny
.2c82	8c d1 05	sty $05d1			sty 	IFStackIndex
.2c85	7a		ply				ply
.2c86	60		rts				rts
.2c87					IFloatPullRx:
.2c87	5a		phy				phy
.2c88	ac d1 05	ldy $05d1			ldy 	IFStackIndex
.2c8b	88		dey				dey
.2c8c	88		dey				dey
.2c8d	88		dey				dey
.2c8e	88		dey				dey
.2c8f	b9 d2 05	lda $05d2,y			lda 	IFStack,y
.2c92	95 00		sta $00,x			sta 	IM0,x
.2c94	b9 d3 05	lda $05d3,y			lda 	IFStack+1,y
.2c97	95 01		sta $01,x			sta 	IM1,x
.2c99	b9 d4 05	lda $05d4,y			lda 	IFStack+2,y
.2c9c	95 02		sta $02,x			sta 	IM2,x
.2c9e	b9 d5 05	lda $05d5,y			lda 	IFStack+3,y
.2ca1	95 03		sta $03,x			sta 	IExp,x
.2ca3	8c d1 05	sty $05d1			sty 	IFStackIndex
.2ca6	7a		ply				ply
.2ca7	60		rts				rts
.05d1					IFStackIndex:
>05d1							.fill 	1
.05d2					IFStack:
>05d2							.fill 	16*4
.2ca8					IFloatCopyFromRegister:
.2ca8	b5 00		lda $00,x			lda 	0,x
.2caa	85 0c		sta $0c				sta 	IFR0
.2cac	b5 01		lda $01,x			lda 	1,x
.2cae	85 0d		sta $0d				sta 	IFR0+1
.2cb0	b5 02		lda $02,x			lda 	2,x
.2cb2	85 0e		sta $0e				sta 	IFR0+2
.2cb4	b5 03		lda $03,x			lda 	3,x
.2cb6	85 0f		sta $0f				sta 	IFR0+3
.2cb8	60		rts				rts
.2cb9					IFloatCopyToRegister:
.2cb9	a5 0c		lda $0c				lda 	IFR0
.2cbb	95 00		sta $00,x			sta 	0,x
.2cbd	a5 0d		lda $0d				lda 	IFR0+1
.2cbf	95 01		sta $01,x			sta 	1,x
.2cc1	a5 0e		lda $0e				lda 	IFR0+2
.2cc3	95 02		sta $02,x			sta 	2,x
.2cc5	a5 0f		lda $0f				lda 	IFR0+3
.2cc7	95 03		sta $03,x			sta 	3,x
.2cc9	60		rts				rts
.2cca					IFloatLoadInline:
.2cca	68		pla				pla 								; pop address off to iTemp0
.2ccb	85 0a		sta $0a				sta 	iTemp0
.2ccd	68		pla				pla
.2cce	85 0b		sta $0b				sta 	iTemp0+1
.2cd0	a0 01		ldy #$01			ldy 	#1
.2cd2	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.2cd4	95 00		sta $00,x			sta 	0,x
.2cd6	c8		iny				iny
.2cd7	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.2cd9	95 01		sta $01,x			sta 	1,x
.2cdb	c8		iny				iny
.2cdc	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.2cde	95 02		sta $02,x			sta 	2,x
.2ce0	c8		iny				iny
.2ce1	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.2ce3	95 03		sta $03,x			sta 	3,x
.2ce5	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2ce6	a5 0a		lda $0a				lda 	iTemp0
.2ce8	69 05		adc #$05			adc 	#5
.2cea	85 0a		sta $0a				sta 	iTemp0
.2cec	90 02		bcc $2cf0			bcc 	_IFLINoCarry
.2cee	e6 0b		inc $0b				inc 	iTemp0+1
.2cf0					_IFLINoCarry:
.2cf0	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.2cf3					IFloatMultiply8BitRx:
.2cf3	5a		phy		        phy
.2cf4	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2cf6	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2cf8	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2cf9	85 0c		sta $0c		        sta     IFR0+IM0
.2cfb	84 0d		sty $0d		        sty     IFR0+IM1
.2cfd	a9 00		lda #$00	        lda     #0
.2cff	a0 08		ldy #$08	        ldy     #8
.2d01					_IFMLoop:
.2d01	90 03		bcc $2d06	        bcc     _IFMNoAdd
.2d03	18		clc		        clc
.2d04	65 0d		adc $0d		        adc     IFR0+IM1
.2d06					_IFMNoAdd:
.2d06	6a		ror a		        ror     a
.2d07	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2d09	88		dey		        dey
.2d0a	d0 f5		bne $2d01	        bne     _IFMLoop
.2d0c	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2d0e	7a		ply		        ply
.2d0f	60		rts		        rts
.2d10					IFloatCheckZero:
.2d10	b5 00		lda $00,x			lda 	IM0,x
.2d12	15 01		ora $01,x			ora 	IM1,x
.2d14	15 02		ora $02,x			ora 	IM2,x
.2d16	60		rts				rts
.2d17					IFloatSetZero:
.2d17	a9 00		lda #$00			lda 	#0
.2d19					IFloatSetByte:
.2d19	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2d1b	74 01		stz $01,x			stz 	IM1,x
.2d1d	74 02		stz $02,x			stz 	IM2,x
.2d1f	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.2d21	60		rts				rts
.2d22					IFloatNegate:
.2d22	b5 03		lda $03,x			lda 	IExp,x
.2d24	49 40		eor #$40			eor 	#IFSign
.2d26	95 03		sta $03,x			sta 	IExp,x
.2d28	18		clc				clc
.2d29	60		rts				rts
.2d2a					IFloatMantissaNegate:
.2d2a	38		sec				sec
.2d2b	a9 00		lda #$00			lda 	#0
.2d2d	f5 00		sbc $00,x			sbc 	IM0,x
.2d2f	95 00		sta $00,x			sta 	IM0,x
.2d31	a9 00		lda #$00			lda 	#0
.2d33	f5 01		sbc $01,x			sbc 	IM1,x
.2d35	95 01		sta $01,x			sta 	IM1,x
.2d37	a9 00		lda #$00			lda 	#0
.2d39	f5 02		sbc $02,x			sbc 	IM2,x
.2d3b	95 02		sta $02,x			sta 	IM2,x
.2d3d	60		rts				rts
.2d3e					IFloatShiftLeft:
.2d3e	18		clc				clc
.2d3f					IFloatRotateLeft:
.2d3f	36 00		rol $00,x			rol 	IM0,x
.2d41	36 01		rol $01,x			rol 	IM1,x
.2d43	36 02		rol $02,x			rol 	IM2,x
.2d45	60		rts				rts
.2d46					IFloatShiftRight:
.2d46	18		clc				clc
.2d47					IFloatRotateRight:
.2d47	76 02		ror $02,x			ror 	IM2,x
.2d49	76 01		ror $01,x			ror 	IM1,x
.2d4b	76 00		ror $00,x			ror 	IM0,x
.2d4d	60		rts				rts
.2d4e					IFloatNormalise:
.2d4e	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero 			; is it zero
.2d51	f0 18		beq $2d6b			beq 	_IFNExitZero 				; if so exit
.2d53					_IFNLoop:
.2d53	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2d55	29 c0		and #$c0			and 	#$C0
.2d57	c9 40		cmp #$40			cmp 	#$40
.2d59	f0 13		beq $2d6e			beq 	_IFNExitOkay 				; if so , then we are done.
.2d5b	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2d5d	29 3f		and #$3f			and 	#$3F
.2d5f	c9 20		cmp #$20			cmp 	#$20
.2d61	f0 0b		beq $2d6e			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.2d63	20 84 2d	jsr $2d84			jsr 	IFloatDecExponent
.2d66	20 3e 2d	jsr $2d3e			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2d69	80 e8		bra $2d53			bra 	_IFNLoop
.2d6b					_IFNExitZero:
.2d6b	20 17 2d	jsr $2d17			jsr 	IFloatSetZero 				; set the result to zero
.2d6e					_IFNExitOkay:
.2d6e	18		clc				clc  								; return with CC.
.2d6f	60		rts				rts
.2d70					IFloatIncExponent:
.2d70	b5 03		lda $03,x			lda 	IExp,x
.2d72	48		pha				pha
.2d73	29 c0		and #$c0			and 	#$C0
.2d75	8d 12 06	sta $0612			sta 	IFXTemp
.2d78	68		pla				pla
.2d79	1a		inc a				inc 	a
.2d7a	29 3f		and #$3f			and 	#$3F
.2d7c	48		pha				pha
.2d7d	0d 12 06	ora $0612			ora 	IFXTemp
.2d80	95 03		sta $03,x			sta 	IExp,x
.2d82	68		pla				pla
.2d83	60		rts				rts
.2d84					IFloatDecExponent:
.2d84	b5 03		lda $03,x			lda 	IExp,x
.2d86	48		pha				pha
.2d87	29 c0		and #$c0			and 	#$C0
.2d89	8d 12 06	sta $0612			sta 	IFXTemp
.2d8c	68		pla				pla
.2d8d	3a		dec a				dec 	a
.2d8e	29 3f		and #$3f			and 	#$3F
.2d90	48		pha				pha
.2d91	0d 12 06	ora $0612			ora 	IFXTemp
.2d94	95 03		sta $03,x			sta 	IExp,x
.2d96	68		pla				pla
.2d97	60		rts				rts
.0612					IFXTemp:
>0612							.fill 	1
.2d98					IFloatBufferReset:
.2d98	9c 13 06	stz $0613			stz 	IFBufferCount
.2d9b	9c 14 06	stz $0614			stz 	IFBuffer
.2d9e	60		rts				rts
.2d9f					IFloatGetBufferAddress:
.2d9f	a0 06		ldy #$06			ldy 	#(IFBuffer >> 8)
.2da1	a2 14		ldx #$14			ldx 	#(IFBuffer & $FF)
.2da3	ad 13 06	lda $0613			lda 	IFBufferCount
.2da6	60		rts				rts
.2da7					IFloatBufferWrite:
.2da7	da		phx				phx
.2da8	ae 13 06	ldx $0613			ldx 	IFBufferCount
.2dab	9d 14 06	sta $0614,x			sta 	IFBuffer,x
.2dae	9e 15 06	stz $0615,x			stz 	IFBuffer+1,x
.2db1	ee 13 06	inc $0613			inc 	IFBufferCount
.2db4	fa		plx				plx
.2db5	60		rts				rts
.2db6					IFloatStripTrailingZeros:
.2db6	ae 13 06	ldx $0613			ldx 	IFBufferCount
.2db9	bd 13 06	lda $0613,x			lda 	IFBuffer-1,x
.2dbc	c9 30		cmp #$30			cmp		#"0"
.2dbe	d0 0f		bne $2dcf			bne 	_IFSTExit
.2dc0	bd 12 06	lda $0612,x			lda 	IFBuffer-2,x
.2dc3	c9 2e		cmp #$2e			cmp 	#"."
.2dc5	f0 08		beq $2dcf			beq 	_IFSTExit
.2dc7	ce 13 06	dec $0613			dec 	IFBufferCount
.2dca	9e 13 06	stz $0613,x			stz 	IFBuffer-1,x
.2dcd	80 e7		bra $2db6			bra 	IFloatStripTrailingZeros
.2dcf					_IFSTExit:
.2dcf	60		rts				rts
.0613					IFBufferCount:
>0613							.fill 	1
.0614					IFBuffer:
>0614							.fill 	25
.2dd0					IFloatCheck:
.2dd0	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.2dd2	09 40		ora #$40			ora 	#IFSign
.2dd4	85 0f		sta $0f				sta 	IFR0+IExp
.2dd6	20 0d 27	jsr $270d			jsr 	IFloatAdd 					; add allowed to error.
.2dd9	a2 0c		ldx #$0c			ldx 	#IFR0
.2ddb	20 10 2d	jsr $2d10			jsr 	IFloatCheckZero 			; error if < 0
.2dde	f0 06		beq $2de6			beq 	_IFAOkay
.2de0	a5 0f		lda $0f				lda 	IFR0+IExp
.2de2	29 40		and #$40			and 	#IFSign
.2de4	d0 01		bne $2de7			bne 	_IFAFail
.2de6					_IFAOkay:
.2de6	60		rts				rts
.2de7					_IFAFail:
.2de7	38		sec				sec
.2de8	68		pla				pla 								; get address - 2
.2de9	e9 02		sbc #$02			sbc 	#2
.2deb	aa		tax				tax
.2dec	68		pla				pla
.2ded	e9 00		sbc #$00			sbc 	#0
.2def	a8		tay				tay
.2df0	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.2df2					_IFAStop:
>2df2	db						.byte 	$DB 						; display an error AA ADR ADR
.2df3	80 fd		bra $2df2			bra 	_IFAStop

;******  Return to file: basic.asm

.2df5					NotImplemented:
.2df5	a9 ff		lda #$ff			lda 	#$FF
.2df7	80 04		bra $2dfd			bra 	EnterDbg
.2df9					ErrorHandler:
.2df9	fa		plx				plx
.2dfa	7a		ply				ply
.2dfb	a9 ee		lda #$ee			lda 	#$EE
.2dfd					EnterDbg:
>2dfd	db						.byte 	$DB
.2dfe	4c fd 2d	jmp $2dfd			jmp 	EnterDbg

;******  End of listing
