
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Fri Jun 30 20:18:36 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
=192					OSTextBufferSize = 192
.025d					OSEditWidth:
>025d							.fill 	1
.025e					OSEditLength:
>025e							.fill 	1
.025f					OSEditBuffer:
>025f							.fill 	OSTextBufferSize+1
>0320							.fill 	32
>0340							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSEnterLine              = $ffdf ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe2					OSScreenLine             = $ffe2 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe5					OSKeyboardDataProcess    = $ffe5 ; Keyboard update process.
=$ffe8					OSCheckBreak             = $ffe8 ; NZ if ESC pressed.
=$ffeb					OSIsKeyAvailable         = $ffeb ; Check if key available (CS if so)
=$ffee					OSReadKeyboard           = $ffee ; Read A from keyboard, CC = success, CS = no key
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSWriteScreen            = $fff4 ; Write A to screen, CC = success
=$fff7					OSWriteString            = $fff7 ; Write length prefixed string YX to screen

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 aa 20	jsr $20aa			jsr 	PGMSetBaseAddress
.1007	20 3e 2c	jsr $2c3e			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.100f	4c c8 14	jmp $14c8			jmp 	Command_RUN
.1012	4c 10 14	jmp $1410			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/data.inc

.0022					zTemp0:
>0022							.fill 	2
.0024					zTemp1:
>0024							.fill 	2
.0026					zTemp2:
>0026							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_STANDARD_LAST = $a4
=$a4					PR_HASH = $a4
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; get a number to assert
.1018	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.101a	20 4a 32	jsr $324a			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail 					; if so, the assert fails.
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c 4b 27	jmp $274b		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1025	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1027	f0 14		beq $103d			beq 	_CLNoParam
.1029	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.102b	f0 10		beq $103d			beq 	_CLNoParam
.102d	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; address for CLEAR
.1030	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1032	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1034	b0 0b		bcs $1041			bcs 	_CLMemory
.1036	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1038	90 07		bcc $1041			bcc 	_CLMemory
.103a	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.103d					_CLNoParam:
.103d	20 44 10	jsr $1044			jsr 	ClearCode
.1040	60		rts				rts
.1041					_CLMemory:
.1041	4c e5 27	jmp $27e5		jmp	ErrorV_memory
.1044					ClearCode:
.1044	20 bd 20	jsr $20bd			jsr 	PGMEndProgram 				; end program => zTemp0
.1047	64 28		stz $28				stz 	freeMemory 					; start on next free page
.1049	a5 23		lda $23				lda 	zTemp0+1 					; for variables.
.104b	1a		inc a				inc 	a
.104c	85 29		sta $29				sta 	freeMemory+1
.104e	20 dd 2b	jsr $2bdd			jsr 	VARClearHashTables
.1051	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.1054	20 19 29	jsr $2919			jsr 	StackReset 					; page passed on in A
.1057	20 78 29	jsr $2978			jsr 	StringSystemInitialise
.105a	20 60 26	jsr $2660			jsr 	ScanProcedures
.105d	20 9a 14	jsr $149a			jsr 	Command_RESTORE
.1060	60		rts				rts
.1061					AllocateMemory:
.1061	5a		phy				phy 								; save Y
.1062	a4 28		ldy $28				ldy 	freeMemory 					; save addr.low (of final memory)
.1064	5a		phy				phy
.1065	a4 29		ldy $29				ldy 	freeMemory+1 				; save addr.high
.1067	5a		phy				phy
.1068	a8		tay				tay 								; count is now in XY
.1069					_AllocateLoop:
.1069	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.106b	d0 04		bne $1071			bne 	_AllocateOne
.106d	c0 00		cpy #$00			cpy 	#0
.106f	f0 15		beq $1086			beq 	_AllocateExit
.1071					_AllocateOne:
.1071	a9 00		lda #$00			lda 	#0 							; zero byte
.1073	92 28		sta ($28)			sta 	(freeMemory)
.1075	e6 28		inc $28				inc 	freeMemory 					; bump pointer
.1077	d0 05		bne $107e			bne 	_AllocateSkipCarry
.1079	e6 29		inc $29				inc 	freeMemory+1
.107b	20 8a 10	jsr $108a			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.107e					_AllocateSkipCarry:
.107e	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1080	d0 01		bne $1083			bne 	_AllocateSkipBorrow
.1082	ca		dex				dex
.1083					_AllocateSkipBorrow:
.1083	88		dey				dey
.1084	80 e3		bra $1069			bra 	_AllocateLoop
.1086					_AllocateExit:
.1086	fa		plx				plx 								; restore address
.1087	68		pla				pla
.1088	7a		ply				ply 								; restore Y
.1089	60		rts				rts
.108a					ClearCheckMemory:
.108a	a5 29		lda $29				lda 	freeMemory+1 				; allocatable memory
.108c	1a		inc a				inc 	a 							; spacing 2 pages
.108d	1a		inc a				inc 	a
.108e	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.1091	b0 01		bcs $1094			bcs  	_CCMError
.1093	60		rts				rts
.1094					_CCMError:
.1094	4c e5 27	jmp $27e5		jmp	ErrorV_memory
.0028					freeMemory:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1097					CommandDIM:
.1097	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1099	29 c0		and #$c0			and 	#$C0
.109b	c9 40		cmp #$40			cmp 	#$40
.109d	d0 39		bne $10d8			bne 	_CDSyntax
.109f	20 94 2b	jsr $2b94			jsr 	VARGetInfo 					; get information
.10a2	ad 2b 06	lda $062b			lda 	VARType 					; check array.
.10a5	29 02		and #$02			and 	#2
.10a7	f0 2f		beq $10d8			beq 	_CDSyntax
.10a9	20 46 2b	jsr $2b46			jsr 	VARFind 					; does it already exist
.10ac	b0 2d		bcs $10db			bcs 	_CDExists
.10ae	20 f2 2a	jsr $2af2			jsr 	VARCreate 					; create it - returns data ptr in XA
.10b1	da		phx				phx 								; save target address
.10b2	48		pha				pha
.10b3	ad 2b 06	lda $062b			lda 	VARType 					; type ID.
.10b6	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b8	20 de 10	jsr $10de			jsr 	CreateArray 				; create array to XA
.10bb	84 24		sty $24				sty 	zTemp1 						; save Y
.10bd	7a		ply				ply 								; restore target to zTemp0
.10be	84 22		sty $22				sty 	zTemp0
.10c0	7a		ply				ply
.10c1	84 23		sty $23				sty 	zTemp0+1
.10c3	92 22		sta ($22)			sta 	(zTemp0) 					; save new array
.10c5	a0 01		ldy #$01			ldy 	#1
.10c7	8a		txa				txa
.10c8	91 22		sta ($22),y			sta 	(zTemp0),y
.10ca	a4 24		ldy $24				ldy 	zTemp1 						; restore zTemp1
.10cc	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 				; check )
.10cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10d1	c8		iny				iny
.10d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10d4	f0 c1		beq $1097			beq 	CommandDIM
.10d6	88		dey				dey
.10d7	60		rts				rts
.10d8					_CDSyntax:
.10d8	4c f5 26	jmp $26f5		jmp	ErrorV_syntax
.10db					_CDExists:
.10db	4c bd 27	jmp $27bd		jmp	ErrorV_redefine
.10de					CreateArray:
.10de	8d 03 05	sta $0503			sta 	CAType						; save type
.10e1	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10e4	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e8	f0 04		beq $10ee			beq 	_CATwoDimensions
.10ea	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ed	60		rts				rts
.10ee					_CATwoDimensions:
.10ee	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10f0	8d 05 05	sta $0505			sta 	CADim1+1
.10f3	a5 08		lda $08				lda 	IFR0+IM0
.10f5	8d 04 05	sta $0504			sta 	CADim1+0
.10f8	20 b2 28	jsr $28b2			jsr 	ERRCheckComma 				; check comma
.10fb	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10fe	5a		phy				phy 								; save Y position
.10ff	18		clc				clc 								; allocate the outer array of pointers.
.1100	ae 05 05	ldx $0505			ldx 	CADim1+1
.1103	ad 04 05	lda $0504			lda 	CADim1
.1106	20 79 11	jsr $1179			jsr 	CSAAllocate 				; allocate the outer array
.1109	da		phx				phx									; save this address on the stack
.110a	48		pha				pha
.110b	86 27		stx $27				stx 	zTemp2+1					; and in zTemp2
.110d	85 26		sta $26				sta 	zTemp2
.110f					_CACreateSubLoop:
.110f	38		sec				sec
.1110	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create data array of required size.
.1113	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1115	91 26		sta ($26),y			sta 	(zTemp2),y
.1117	8a		txa				txa
.1118	c8		iny				iny
.1119	91 26		sta ($26),y			sta 	(zTemp2),y
.111b	18		clc				clc  								; next slot.
.111c	a5 26		lda $26				lda 	zTemp2
.111e	69 02		adc #$02			adc 	#2
.1120	85 26		sta $26				sta 	zTemp2
.1122	90 02		bcc $1126			bcc 	_CACNoCarry
.1124	e6 27		inc $27				inc 	zTemp2+1
.1126					_CACNoCarry:
.1126	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1129	d0 03		bne $112e			bne 	_CACNoBorrow
.112b	ce 05 05	dec $0505			dec 	CADim1+1
.112e					_CACNoBorrow:
.112e	ce 04 05	dec $0504			dec 	CADim1
.1131	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1134	10 d9		bpl $110f			bpl 	_CACreateSubLoop
.1136	68		pla				pla
.1137	fa		plx				plx
.1138	7a		ply				ply
.1139	60		rts				rts
.113a					CreateSingleArray:
.113a	5a		phy				phy
.113b	38		sec				sec 								; allocate memory block all zeros.
.113c	a5 08		lda $08				lda 	IFR0+IM0
.113e	a6 09		ldx $09				ldx 	IFR0+IM1
.1140	20 79 11	jsr $1179			jsr 	CSAAllocate
.1143	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1146	f0 2f		beq $1177			beq 	_CSANoInit
.1148	da		phx				phx 								; save address of new array
.1149	48		pha				pha
.114a	85 22		sta $22				sta 	zTemp0 						; address in zTemp0
.114c	86 23		stx $23				stx 	zTemp0+1
.114e	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1150	b1 22		lda ($22),y			lda 	(zTemp0),y
.1152	a8		tay				tay
.1153	b2 22		lda ($22)			lda 	(zTemp0)
.1155	aa		tax				tax
.1156					_CSAEraseString:
.1156	5a		phy				phy
.1157	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1159	a9 80		lda #$80			lda 	#$80
.115b	91 22		sta ($22),y			sta 	(zTemp0),y
.115d	7a		ply				ply
.115e	18		clc				clc 								; add 4 to next slot.
.115f	a5 22		lda $22				lda 	zTemp0
.1161	69 04		adc #$04			adc 	#4
.1163	85 22		sta $22				sta 	zTemp0
.1165	90 02		bcc $1169			bcc 	_CSAENoCarry
.1167	e6 23		inc $23				inc 	zTemp0+1
.1169					_CSAENoCarry:
.1169	e0 00		cpx #$00			cpx 	#0
.116b	d0 01		bne $116e			bne 	_CSANoBorrow
.116d	88		dey				dey
.116e					_CSANoBorrow:
.116e	ca		dex				dex
.116f	d0 e5		bne $1156			bne 	_CSAEraseString
.1171	c0 00		cpy #$00			cpy 	#0
.1173	d0 e1		bne $1156			bne 	_CSAEraseString
.1175	68		pla				pla
.1176	fa		plx				plx
.1177					_CSANoInit:
.1177	7a		ply				ply
.1178	60		rts				rts
.1179					CSAAllocate:
.1179	08		php				php 								; save type flag.
.117a	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.117b	d0 01		bne $117e			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.117d	e8		inx				inx
.117e					_CSAANoCarry:
.117e	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1180	b0 2e		bcs $11b0			bcs 	_CSARange
.1182	28		plp				plp 								; restore type flag
.1183	08		php				php 								; save it back again.
.1184	da		phx				phx 								; save size.
.1185	48		pha				pha
.1186	86 23		stx $23				stx  	zTemp0+1 					; now in ztemp0+1:X
.1188	90 03		bcc $118d			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.118a	0a		asl a				asl 	a
.118b	26 23		rol $23				rol 	zTemp0+1
.118d					_CSAATimes2:
.118d	0a		asl a				asl 	a
.118e	26 23		rol $23				rol 	zTemp0+1
.1190	18		clc				clc
.1191	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1193	90 02		bcc $1197			bcc 	_CSAANoCarry2
.1195	e6 23		inc $23				inc 	zTemp0+1
.1197					_CSAANoCarry2:
.1197	a6 23		ldx $23				ldx 	zTemp0+1 					; XA is the bytes required.
.1199	20 61 10	jsr $1061			jsr 	AllocateMemory 				; allocate memory to XA
.119c	86 23		stx $23				stx 	zTemp0+1 					; save pointers
.119e	85 22		sta $22				sta 	zTemp0
.11a0	68		pla				pla  								; write element count to first 2 bytes
.11a1	92 22		sta ($22)			sta 	(zTemp0)
.11a3	68		pla				pla 								; msb of element count
.11a4	28		plp				plp 								; CC if pointer array
.11a5	b0 02		bcs $11a9			bcs 	_CSAAIsData
.11a7	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a9					_CSAAIsData:
.11a9	a0 01		ldy #$01			ldy 	#1
.11ab	91 22		sta ($22),y			sta 	(zTemp0),y
.11ad	a5 22		lda $22				lda 	zTemp0 						; fix XA back up again
.11af	60		rts				rts
.11b0					_CSARange:
.11b0	4c 06 27	jmp $2706		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11b3					Command_Doke:
.11b3	38		sec				sec
.11b4	80 01		bra $11b7			bra 	DPCommon
.11b6					Command_Poke:
.11b6	18		clc				clc
.11b7					DPCommon:
.11b7	08		php				php 								; CS if DOKE
.11b8	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; address
.11bb	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11bd	48		pha				pha
.11be	a5 09		lda $09				lda 	IFR0+IM1
.11c0	48		pha				pha
.11c1	20 b2 28	jsr $28b2			jsr 	ERRCheckComma 				; [dp]oke address,data
.11c4	20 25 17	jsr $1725			jsr 	EXPEvalInteger16
.11c7	68		pla				pla 								; get address back
.11c8	85 23		sta $23				sta 	zTemp0+1
.11ca	68		pla				pla
.11cb	85 22		sta $22				sta 	zTemp0
.11cd	a5 08		lda $08				lda 	IFR0+IM0
.11cf	92 22		sta ($22)			sta 	(zTemp0)
.11d1	28		plp				plp
.11d2	90 08		bcc $11dc			bcc 	_DPExit
.11d4	5a		phy				phy
.11d5	a5 09		lda $09				lda 	IFR0+IM1
.11d7	a0 01		ldy #$01			ldy 	#1
.11d9	91 22		sta ($22),y			sta 	(zTemp0),y
.11db	7a		ply				ply
.11dc					_DPExit:
.11dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11dd					Command_GOTO:
.11dd	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; get line number
.11e0					GotoR0:
.11e0	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11e3	85 19		sta $19				sta 	codePtr+1
.11e5	64 18		stz $18				stz 	codePtr
.11e7					_GOSearch:
.11e7	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e9	f0 1f		beq $120a			beq 	_GOError
.11eb	a0 01		ldy #$01			ldy 	#1 							; found line #
.11ed	b1 18		lda ($18),y			lda 	(codePtr),y
.11ef	c5 08		cmp $08				cmp 	IFR0+IM0
.11f1	d0 0a		bne $11fd			bne 	_GONext
.11f3	c8		iny				iny
.11f4	b1 18		lda ($18),y			lda 	(codePtr),y
.11f6	c5 09		cmp $09				cmp 	IFR0+IM1
.11f8	d0 03		bne $11fd			bne 	_GONext
.11fa	4c df 14	jmp $14df			jmp 	RUNNewLine
.11fd					_GONext:
.11fd	18		clc				clc 								; advance to next line.
.11fe	b2 18		lda ($18)			lda 	(codePtr)
.1200	65 18		adc $18				adc 	codePtr
.1202	85 18		sta $18				sta 	codePtr
.1204	90 e1		bcc $11e7			bcc 	_GOSearch
.1206	e6 19		inc $19				inc 	codePtr+1
.1208	80 dd		bra $11e7			bra 	_GOSearch
.120a					_GOError:
.120a	4c 8a 28	jmp $288a		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.120d					Command_Input:
.120d	a9 ff		lda #$ff			lda 	#$FF
.120f	8d 06 05	sta $0506			sta 	InputFlag
.1212	80 03		bra $1217			bra 	Command_IP_Main
.1214					Command_Print:
.1214	9c 06 05	stz $0506			stz 	InputFlag
.1217					Command_IP_Main:
.1217	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1218					_CPLoop:
.1218	08		php				php 								; save last action flag
.1219	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.121b	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.121d	f0 48		beq $1267			beq 	_CPExit 					; without consuming
.121f	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1221	f0 44		beq $1267			beq 	_CPExit
.1223	68		pla				pla 								; throw last action flag
.1224	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.1226	c8		iny				iny
.1227	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1229	f0 39		beq $1264			beq 	_CPContinueWithSameLine
.122b	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.122d	f0 30		beq $125f			beq 	_CPTab
.122f	88		dey				dey 								; undo the get.
.1230	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.1233	10 0b		bpl $1240			bpl	 	_CPNotInput
.1235	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1237	c9 40		cmp #$40			cmp 	#$40
.1239	d0 05		bne $1240			bne 	_CPNotInput
.123b	20 70 12	jsr $1270			jsr 	_CPInputCode 				; input code
.123e	80 d7		bra $1217			bra 	Command_IP_Main 			; and go round again.
.1240					_CPNotInput:
.1240	20 d3 16	jsr $16d3			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1243	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1245	10 0e		bpl $1255			bpl 	_CPNumber
.1247	5a		phy				phy
.1248	18		clc				clc 								; string address to YX
.1249	a5 08		lda $08				lda 	IFR0+IM0
.124b	aa		tax				tax
.124c	a5 09		lda $09				lda 	IFR0+IM1
.124e	a8		tay				tay
.124f	20 a4 12	jsr $12a4			jsr 	CPPrintYX 					; print YX
.1252	7a		ply				ply
.1253	80 c2		bra $1217			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1255					_CPNumber:
.1255	5a		phy				phy
.1256	20 4e 30	jsr $304e			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1259	20 a4 12	jsr $12a4			jsr 	CPPrintYX 					; print string at YX
.125c	7a		ply				ply
.125d	80 b8		bra $1217			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.125f					_CPTab:
.125f	a9 09		lda #$09			lda 	#9 							; print TAB
.1261	20 bc 12	jsr $12bc			jsr 	CPPrintA
.1264					_CPContinueWithSameLine:
.1264	38		sec				sec 								; loop round with carry set, which
.1265	80 b1		bra $1218			bra 	_CPLoop 					; will inhibit final CR
.1267					_CPExit:
.1267	28		plp				plp 								; get last action flag
.1268	b0 05		bcs $126f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.126a	a9 0d		lda #$0d			lda 	#13 						; print new line
.126c	20 bc 12	jsr $12bc			jsr 	CPPrintA
.126f					_CPExit2:
.126f	60		rts				rts
.1270					_CPInputCode:
.1270	20 9b 17	jsr $179b			jsr 	EXPTermR0 					; get the term.
.1273	5a		phy				phy 								; save position
.1274	20 b9 12	jsr $12b9			jsr 	CPInputA					; input a line to YX
.1277	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1279	30 18		bmi $1293			bmi 	_CPInputString
.127b	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.127d	48		pha				pha
.127e	a5 09		lda $09				lda 	IFR0+IM1
.1280	48		pha				pha
.1281	86 22		stx $22				stx 	zTemp0 						; use VAL Code to convert.
.1283	84 23		sty $23				sty 	zTemp0+1
.1285	20 85 1a	jsr $1a85			jsr 	VALConversionZTemp0
.1288	68		pla				pla 								; do the assign.
.1289	85 23		sta $23				sta 	zTemp0+1
.128b	68		pla				pla
.128c	85 22		sta $22				sta 	zTemp0
.128e	20 e4 12	jsr $12e4			jsr 	AssignNumber
.1291	7a		ply				ply
.1292	60		rts				rts
.1293					_CPInputString:
.1293	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1295	85 22		sta $22				sta 	zTemp0
.1297	a5 09		lda $09				lda 	IFR0+IM1
.1299	85 23		sta $23				sta 	zTemp0+1
.129b	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.129d	84 09		sty $09				sty 	IFR0+IM1
.129f	20 fb 12	jsr $12fb			jsr 	AssignString 				; assign the string
.12a2	7a		ply				ply 								; exit
.12a3	60		rts				rts
.12a4					CPPrintYX:
.12a4	86 22		stx $22				stx 	zTemp0
.12a6	84 23		sty $23				sty 	zTemp0+1
.12a8	b2 22		lda ($22)			lda 	(zTemp0)
.12aa	aa		tax				tax
.12ab	f0 0b		beq $12b8			beq 	_CPPrintExit
.12ad	a0 01		ldy #$01			ldy 	#1
.12af					_CPPrintAYXLoop:
.12af	b1 22		lda ($22),y			lda 	(zTemp0),y
.12b1	20 bc 12	jsr $12bc			jsr 	CPPrintA
.12b4	c8		iny				iny
.12b5	ca		dex				dex
.12b6	d0 f7		bne $12af			bne 	_CPPrintAYXLoop
.12b8					_CPPrintExit:
.12b8	60		rts				rts
.12b9					CPInputA:
.12b9	4c df ff	jmp $ffdf			jmp 	OSEnterLine
.12bc					CPPrintA:
.12bc	4c f4 ff	jmp $fff4			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12bf					CommandLET:
.12bf	20 9b 17	jsr $179b			jsr 	EXPTermR0 					; get term
.12c2	90 6f		bcc $1333			bcc 	CLError 					; must be a reference term.
.12c4	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12c6	48		pha				pha
.12c7	a5 09		lda $09				lda 	IFR0+IM1
.12c9	48		pha				pha
.12ca	a5 0b		lda $0b				lda 	IFR0+IExp
.12cc	48		pha				pha
.12cd	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12cf	20 ba 28	jsr $28ba			jsr 	ERRCheckA
.12d2	20 d3 16	jsr $16d3			jsr 	EXPEvaluateExpression 		; right hand side.
.12d5	68		pla				pla 								; type of l-expr
.12d6	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d8	30 5c		bmi $1336			bmi 	CLType
.12da	fa		plx				plx 	 							; pop target address to zTemp0
.12db	86 23		stx $23				stx 	zTemp0+1
.12dd	fa		plx				plx
.12de	86 22		stx $22				stx 	zTemp0
.12e0					AssignData:
.12e0	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12e2	30 17		bmi $12fb			bmi 	AssignString
.12e4					AssignNumber:
.12e4	5a		phy				phy
.12e5	a0 03		ldy #$03			ldy 	#3
.12e7	a5 0b		lda $0b				lda 	IFR0+IExp
.12e9	91 22		sta ($22),y			sta 	(zTemp0),y
.12eb	88		dey				dey
.12ec	a5 0a		lda $0a				lda 	IFR0+IM2
.12ee	91 22		sta ($22),y			sta 	(zTemp0),y
.12f0	88		dey				dey
.12f1	a5 09		lda $09				lda 	IFR0+IM1
.12f3	91 22		sta ($22),y			sta 	(zTemp0),y
.12f5	a5 08		lda $08				lda 	IFR0+IM0
.12f7	92 22		sta ($22)			sta 	(zTemp0)
.12f9	7a		ply				ply
.12fa	60		rts				rts
.12fb					AssignString:
.12fb	5a		phy				phy
.12fc	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12fe	b1 22		lda ($22),y			lda 	(zTemp0),y
.1300	12 22		ora ($22)			ora 	(zTemp0)
.1302	f0 23		beq $1327			beq 	_CLConcreteString
.1304	b2 22		lda ($22)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1306	85 24		sta $24				sta 	zTemp1
.1308	b1 22		lda ($22),y			lda 	(zTemp0),y
.130a	85 25		sta $25				sta 	zTemp1+1
.130c	b2 24		lda ($24)			lda 	(zTemp1) 					; bytes available in the new slot
.130e	38		sec				sec 								; we want 3 for slot size, status, string size.
.130f	e9 03		sbc #$03			sbc 	#3
.1311	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1313	90 12		bcc $1327			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1315	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1317	1a		inc a				inc 	a
.1318	aa		tax				tax
.1319	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.131b					_CLReplaceString:
.131b	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.131d	c8		iny				iny
.131e	c8		iny				iny
.131f	91 24		sta ($24),y			sta 	(zTemp1),y
.1321	88		dey				dey
.1322	ca		dex				dex
.1323	d0 f6		bne $131b			bne 	_CLReplaceString
.1325	80 0a		bra $1331			bra 	_CLExit
.1327					_CLConcreteString:
.1327	20 2d 29	jsr $292d			jsr 	StringConcrete  			; concreted string in XA.
.132a	a0 01		ldy #$01			ldy 	#1 							; store the address
.132c	92 22		sta ($22)			sta 	(zTemp0)
.132e	8a		txa				txa
.132f	91 22		sta ($22),y			sta 	(zTemp0),y
.1331					_CLExit:
.1331	7a		ply				ply
.1332	60		rts				rts
.1333					CLError:
.1333	4c 28 28	jmp $2828		jmp	ErrorV_variable
.1336					CLType:
.1336	4c 25 27	jmp $2725		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1339					Command_LIST:
.1339	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.133c	9c 08 05	stz $0508			stz 	CLFrom+1
.133f	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1341	c9 99		cmp #$99			cmp 	#PR_COMMA
.1343	f0 1d		beq $1362			beq 	_CLToLine
.1345	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1347	f0 37		beq $1380			beq 	_CLDefaultTo
.1349	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.134c	a5 08		lda $08				lda 	IFR0+IM0
.134e	8d 07 05	sta $0507			sta 	CLFrom
.1351	8d 09 05	sta $0509			sta 	CLTo
.1354	a5 09		lda $09				lda 	IFR0+IM1
.1356	8d 08 05	sta $0508			sta 	CLFrom+1
.1359	8d 0a 05	sta $050a			sta 	CLTo+1
.135c	b1 18		lda ($18),y			lda 	(codePtr),y
.135e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1360	f0 26		beq $1388			beq 	_CLList
.1362					_CLToLine:
.1362	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1364	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1366	f0 18		beq $1380			beq 	_CLDefaultTo
.1368	20 b2 28	jsr $28b2			jsr 	ERRCheckComma 				; sep comma
.136b	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.136d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.136f	f0 0f		beq $1380			beq 	_CLDefaultTo
.1371	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; there's a To value.
.1374	a5 08		lda $08				lda 	IFR0+IM0
.1376	8d 09 05	sta $0509			sta 	CLTo
.1379	a5 09		lda $09				lda 	IFR0+IM1
.137b	8d 0a 05	sta $050a			sta 	CLTo+1
.137e	80 08		bra $1388			bra 	_CLList
.1380					_CLDefaultTo:
.1380	a9 ff		lda #$ff			lda 	#$FF
.1382	8d 09 05	sta $0509			sta 	CLTo
.1385	8d 0a 05	sta $050a			sta 	CLTo+1
.1388					_CLList:
.1388	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.138b	85 19		sta $19				sta 	codePtr+1
.138d	64 18		stz $18				stz 	codePtr
.138f	a2 f4		ldx #$f4			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1391	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1393	20 fd 1e	jsr $1efd			jsr 	TOKSetDetokeniseOutput
.1396					_CLLoop:
.1396	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1398	f0 51		beq $13eb			beq 	_CLExit
.139a	20 e5 ff	jsr $ffe5			jsr 	OSKeyboardDataProcess
.139d	20 e8 ff	jsr $ffe8			jsr 	OSCheckBreak 				; check escape.
.13a0	d0 4c		bne $13ee			bne 	_CLBreak
.13a2	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13a4	20 f1 13	jsr $13f1			jsr 	_CLCompareLine
.13a7	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a9	f0 33		beq $13de			beq 	_CLNext
.13ab	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13ad	20 f1 13	jsr $13f1			jsr 	_CLCompareLine
.13b0	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13b2	f0 2a		beq $13de			beq 	_CLNext
.13b4	a0 02		ldy #$02			ldy 	#2 							; print line #
.13b6	b1 18		lda ($18),y			lda 	(codePtr),y
.13b8	aa		tax				tax
.13b9	88		dey				dey
.13ba	b1 18		lda ($18),y			lda 	(codePtr),y
.13bc	20 0b 2a	jsr $2a0b			jsr 	WriteIntXA
.13bf					_CLSpacing:
.13bf	a9 20		lda #$20			lda 	#32
.13c1	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.13c4	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.13c7	e0 06		cpx #$06			cpx 	#6
.13c9	d0 f4		bne $13bf			bne 	_CLSpacing
.13cb	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13cd	a5 18		lda $18				lda 	codePtr
.13cf	18		clc				clc
.13d0	69 03		adc #$03			adc 	#3
.13d2	aa		tax				tax
.13d3	90 01		bcc $13d6			bcc 	_CLNoCarry2
.13d5	c8		iny				iny
.13d6					_CLNoCarry2:
.13d6	20 a2 1e	jsr $1ea2			jsr 	TOKDetokenise
.13d9	a9 0d		lda #$0d			lda 	#13	 						; next line
.13db	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.13de					_CLNext:
.13de	18		clc				clc 								; advance to next line.
.13df	b2 18		lda ($18)			lda 	(codePtr)
.13e1	65 18		adc $18				adc 	codePtr
.13e3	85 18		sta $18				sta 	codePtr
.13e5	90 02		bcc $13e9			bcc 	_CLNoCarry
.13e7	e6 19		inc $19				inc 	codePtr+1
.13e9					_CLNoCarry:
.13e9	80 ab		bra $1396			bra 	_CLLoop
.13eb					_CLExit:
.13eb	4c 2a 2a	jmp $2a2a			jmp 	WarmStart
.13ee					_CLBreak:
.13ee	4c 80 28	jmp $2880		jmp	ErrorV_break
.13f1					_CLCompareLine:
.13f1	a0 01		ldy #$01			ldy 	#1
.13f3	38		sec				sec
.13f4	b1 18		lda ($18),y			lda 	(codePtr),y
.13f6	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f9	85 22		sta $22				sta 	zTemp0
.13fb	c8		iny				iny
.13fc	b1 18		lda ($18),y			lda 	(codePtr),y
.13fe	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.1401	90 0a		bcc $140d			bcc 	_CLIsNegative
.1403	d0 05		bne $140a			bne 	_CLIsPositive
.1405	a5 22		lda $22				lda 	zTemp0
.1407	d0 01		bne $140a			bne 	_CLIsPositive
.1409	60		rts				rts
.140a					_CLIsPositive:
.140a	a9 01		lda #$01			lda 	#1
.140c	60		rts				rts
.140d					_CLIsNegative:
.140d	a9 ff		lda #$ff			lda 	#255
.140f	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1410					Command_NEW:
.1410	20 b1 20	jsr $20b1			jsr 	PGMNewProgram 				; Reset current program
.1413	20 44 10	jsr $1044			jsr 	ClearCode 					; Run CLR
.1416	4c 38 15	jmp $1538			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1419					Command_READ:
.1419	20 9b 17	jsr $179b			jsr 	EXPTermR0 					; get term to R0
.141c	90 35		bcc $1453			bcc 	_CRSyntax 					; fail if not a reference.
.141e	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1420	48		pha				pha
.1421	a5 09		lda $09				lda 	IFR0+IM1
.1423	48		pha				pha
.1424	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1426	48		pha				pha
.1427	20 ac 14	jsr $14ac			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.142a	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.142d	d0 27		bne $1456			bne 	_CRHaveData  				; forward for the next one.
.142f					_CRNextLine:
.142f	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1431	f0 1a		beq $144d			beq 	_CRNoData
.1433					_CRKeepSearching:
.1433	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1435	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1437	20 05 26	jsr $2605			jsr 	ScanForward
.143a	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.143c	f0 18		beq $1456			beq 	_CRHaveData 				; found it
.143e	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1440	18		clc				clc 								; try the next line, keep going.
.1441	b2 18		lda ($18)			lda 	(codePtr)
.1443	65 18		adc $18				adc 	codePtr
.1445	85 18		sta $18				sta 	codePtr
.1447	90 e6		bcc $142f			bcc 	_CRNextLine
.1449	e6 19		inc $19				inc 	codePtr+1
.144b	80 e2		bra $142f			bra 	_CRNextLine
.144d					_CRNoData:
.144d	4c ad 27	jmp $27ad		jmp	ErrorV_data
.1450					_CLType:
.1450	4c 25 27	jmp $2725		jmp	ErrorV_type
.1453					_CRSyntax:
.1453	4c f5 26	jmp $26f5		jmp	ErrorV_syntax
.1456					_CRHaveData:
.1456	20 d3 16	jsr $16d3			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1459	68		pla				pla 								; type of l-expr
.145a	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.145c	30 f2		bmi $1450			bmi 	_CLType
.145e	68		pla				pla 								; restore address
.145f	85 23		sta $23				sta 	zTemp0+1
.1461	68		pla				pla
.1462	85 22		sta $22				sta 	zTemp0
.1464	20 e0 12	jsr $12e0			jsr 	AssignData 					; write R0 there.
.1467	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.146a	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.146c	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.146e	d0 04		bne $1474			bne 	_CRSwapBack
.1470	c8		iny				iny 								; consume comma
.1471	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.1474					_CRSwapBack:
.1474	20 ac 14	jsr $14ac			jsr 	SwapCodeDataPointers		; swap them back.
.1477	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1479	c8		iny				iny
.147a	c9 99		cmp #$99			cmp 	#PR_COMMA
.147c	f0 9b		beq $1419			beq 	Command_READ 				; if so go round again.
.147e	88		dey				dey 								; unpick get.
.147f	60		rts				rts
.1480					Command_DATA:
.1480	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1482	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1484	20 05 26	jsr $2605			jsr 	ScanForward
.1487	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1489	d0 01		bne $148c			bne 	_CDNotEOL
.148b	88		dey				dey
.148c					_CDNotEOL:
.148c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.148d					Command_REM:
.148d					Command_REM2:
.148d	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.148f	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1491	d0 06		bne $1499			bne 	_CRExit
.1493	c8		iny				iny 								; skip over it, it's a comment.
.1494	98		tya				tya
.1495	38		sec				sec
.1496	71 18		adc ($18),y			adc 	(codePtr),y
.1498	a8		tay				tay
.1499					_CRExit:
.1499	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.149a					S
.149a					Command_RESTORE:
.149a	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.149d	8d 0c 05	sta $050c			sta 	dataPtr+1
.14a0	9c 0b 05	stz $050b			stz 	dataPtr
.14a3	a9 03		lda #$03			lda 	#3 							; position start of line
.14a5	8d 0d 05	sta $050d			sta 	dataPos
.14a8	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14ab	60		rts				rts
.14ac					SwapCodeDataPointers:
.14ac	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14af	a6 18		ldx $18				ldx 	codePtr
.14b1	85 18		sta $18				sta 	codePtr
.14b3	8e 0b 05	stx $050b			stx 	dataPtr
.14b6	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14b9	a6 19		ldx $19				ldx 	codePtr+1
.14bb	85 19		sta $19				sta 	codePtr+1
.14bd	8e 0c 05	stx $050c			stx 	dataPtr+1
.14c0	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14c3	8c 0d 05	sty $050d			sty 	dataPos
.14c6	a8		tay				tay
.14c7	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c8					Command_RUN:
.14c8	20 44 10	jsr $1044			jsr 	ClearCode					; clear everything out.
.14cb	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14ce	85 19		sta $19				sta 	codePtr+1
.14d0	64 18		stz $18				stz 	codePtr
.14d2	80 0b		bra $14df			bra 	RUNNewLine
.14d4					RUNEndOfLine:
.14d4	18		clc				clc 								; advance to next line.
.14d5	b2 18		lda ($18)			lda 	(codePtr)
.14d7	65 18		adc $18				adc 	codePtr
.14d9	85 18		sta $18				sta 	codePtr
.14db	90 02		bcc $14df			bcc 	_RELNoCarry
.14dd	e6 19		inc $19				inc 	codePtr+1
.14df					_RELNoCarry:
.14df					RUNNewLine:
.14df	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14e1	9a		txs				txs
.14e2	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14e4	f0 52		beq $1538			beq 	Command_END
.14e6	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e8	b1 18		lda ($18),y			lda 	(codePtr),y
.14ea	8d 26 06	sta $0626			sta 	ERRLine
.14ed	c8		iny				iny
.14ee	b1 18		lda ($18),y			lda 	(codePtr),y
.14f0	8d 27 06	sta $0627			sta 	ERRLine+1
.14f3	c8		iny				iny 								; offset into codePtr for start of line.
.14f4					RUNNewCommand:
.14f4	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14f7	ce 10 05	dec $0510			dec 	checkCounter
.14fa	d0 0a		bne $1506			bne 	_RNCNoCheck
.14fc	5a		phy				phy 								; keyboard check.
.14fd	20 e5 ff	jsr $ffe5			jsr 	OSKeyboardDataProcess
.1500	7a		ply				ply
.1501	20 e8 ff	jsr $ffe8			jsr 	OSCheckBreak 				; check escape.
.1504	d0 1e		bne $1524			bne 	_RUNBreak
.1506					_RNCNoCheck:
.1506	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1508	10 1d		bpl $1527			bpl		_RUNNotToken 				; probably an identifier
.150a	c8		iny				iny 								; consume token
.150b	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.150d	f0 e5		beq $14f4			beq 	RUNNewCommand
.150f	c9 a5		cmp #$a5			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1511	b0 0e		bcs $1521			bcs 	_RUNSyntax
.1513	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1515	90 0a		bcc $1521			bcc 	_RUNSyntax
.1517	0a		asl a				asl 	a 							; double into X.
.1518	aa		tax				tax
.1519	20 1e 15	jsr $151e			jsr 	_RUNDispatchMain			; call the main dispatcher
.151c	80 d6		bra $14f4			bra 	RUNNewCommand
.151e					_RUNDispatchMain:
.151e	7c 86 1d	jmp ($1d86,x)			jmp 	(VectorTable,x)
.1521					_RUNSyntax:
.1521	4c f5 26	jmp $26f5		jmp	ErrorV_syntax
.1524					_RUNBreak:
.1524	4c 80 28	jmp $2880		jmp	ErrorV_break
.1527					_RUNNotToken:
.1527	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1529	90 f6		bcc $1521			bcc 	_RUNSyntax
.152b	20 bf 12	jsr $12bf			jsr 	CommandLET 					; assignment
.152e	80 c4		bra $14f4			bra 	RUNNewCommand 				; loop round.
.1530					Command_Shift_Handler:
.1530	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.1532	c8		iny				iny
.1533	0a		asl a				asl 	a 							; double into X
.1534	aa		tax				tax
.1535	7c 86 1e	jmp ($1e86,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1538					Command_END:
.1538	4c 2a 2a	jmp $2a2a			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.153b					Command_STOP:
.153b	4c 99 27	jmp $2799		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.153e					Command_Sys:
.153e	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; execution address
.1541	5a		phy				phy
.1542	ad 6e 06	lda $066e			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1545	ae ca 06	ldx $06ca			ldx 	('X'-'A')*4 + FastVariables
.1548	ac ce 06	ldy $06ce			ldy 	('Y'-'A')*4 + FastVariables
.154b	20 50 15	jsr $1550			jsr 	_CSCallIFR0 				; call the code
.154e	7a		ply				ply
.154f	60		rts				rts
.1550					_CSCallIFR0:
.1550	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1553					NoExec01:
.1553					NoExec02:
.1553					NoExec03:
.1553					NoExec04:
.1553					NoExec05:
.1553					NoExec06:
.1553					NoExec07:
.1553					NoExec08:
.1553	4c f5 26	jmp $26f5		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1556					EXPBinAdd:
.1556	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1558	30 6f		bmi $15c9			bmi 	EXPConcatenate
.155a	a2 0c		ldx #$0c			ldx 	#IFR1
.155c	4c 49 2c	jmp $2c49			jmp 	IFloatAdd
.155f					EXPBinSub:
.155f	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1561	30 3f		bmi $15a2			bmi 	EXPTypeError
.1563	a2 0c		ldx #$0c			ldx 	#IFR1
.1565	4c 42 2c	jmp $2c42			jmp 	IFloatSubtract
.1568					EXPBinMul:
.1568	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.156a	30 36		bmi $15a2			bmi 	EXPTypeError
.156c	a2 0c		ldx #$0c			ldx 	#IFR1
.156e	4c f3 2c	jmp $2cf3			jmp 	IFloatMultiply
.1571					EXPBinFDiv:
.1571	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1573	30 2d		bmi $15a2			bmi 	EXPTypeError
.1575	a2 0c		ldx #$0c			ldx 	#IFR1
.1577	20 75 2f	jsr $2f75			jsr 	IFloatDivideFloat
.157a	b0 0f		bcs $158b			bcs 	EXPDZero
.157c	60		rts				rts
.157d					EXPBinIDiv:
.157d	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.157f	30 21		bmi $15a2			bmi 	EXPTypeError
.1581	a2 0c		ldx #$0c			ldx 	#IFR1
.1583	20 75 2f	jsr $2f75			jsr 	IFloatDivideFloat
.1586	b0 03		bcs $158b			bcs 	EXPDZero
.1588	4c 52 2f	jmp $2f52			jmp 	IFloatIntegerR0
.158b					EXPDZero:
.158b	4c 6e 27	jmp $276e		jmp	ErrorV_divzero
.158e					EXPBinIMod:
.158e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1590	30 10		bmi $15a2			bmi 	EXPTypeError
.1592	a2 0c		ldx #$0c			ldx 	#IFR1
.1594	5a		phy				phy
.1595	20 88 2e	jsr $2e88			jsr 	IFPreProcessBitwise 		; set up everything.
.1598	d0 05		bne $159f			bne 	EXPDRange
.159a	20 c1 2d	jsr $2dc1			jsr 	IFloatModulusInteger
.159d	7a		ply				ply
.159e	60		rts				rts
.159f					EXPDRange:
.159f	4c 06 27	jmp $2706		jmp	ErrorV_range
.15a2					EXPTypeError:
.15a2	4c 25 27	jmp $2725		jmp	ErrorV_type
.15a5					EXPBinAnd:
.15a5	24 0b		bit $0b				bit 	IFR0+IExp
.15a7	30 f9		bmi $15a2			bmi 	EXPTypeError
.15a9	a2 0c		ldx #$0c			ldx 	#IFR1
.15ab	20 43 2e	jsr $2e43			jsr 	IFloatBitwiseAnd
.15ae	b0 ef		bcs $159f			bcs 	EXPDRange
.15b0	60		rts				rts
.15b1					EXPBinOr:
.15b1	24 0b		bit $0b				bit 	IFR0+IExp
.15b3	30 ed		bmi $15a2			bmi 	EXPTypeError
.15b5	a2 0c		ldx #$0c			ldx 	#IFR1
.15b7	20 5a 2e	jsr $2e5a			jsr 	IFloatBitwiseOr
.15ba	b0 e3		bcs $159f			bcs 	EXPDRange
.15bc	60		rts				rts
.15bd					EXPBinXor:
.15bd	24 0b		bit $0b				bit 	IFR0+IExp
.15bf	30 e1		bmi $15a2			bmi 	EXPTypeError
.15c1	a2 0c		ldx #$0c			ldx 	#IFR1
.15c3	20 71 2e	jsr $2e71			jsr 	IFloatBitwiseXor
.15c6	b0 d7		bcs $159f			bcs 	EXPDRange
.15c8	60		rts				rts
.15c9					EXPConcatenate:
.15c9	18		clc				clc
.15ca	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15cc	72 0c		adc ($0c)			adc 	(IFR1)
.15ce	b0 2d		bcs $15fd			bcs 	_EXPCError 					; far too long.
.15d0	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15d2	da		phx				phx
.15d3	a6 09		ldx $09				ldx 	IFR0+1
.15d5	da		phx				phx
.15d6	20 a0 29	jsr $29a0			jsr 	StringTempAllocate 			; allocate string, set up return
.15d9	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15db	a5 0c		lda $0c				lda 	IFR1
.15dd	20 e6 15	jsr $15e6			jsr 	_EXPCCopyXA
.15e0	fa		plx				plx 								; copy second string
.15e1	68		pla				pla
.15e2	20 e6 15	jsr $15e6			jsr 	_EXPCCopyXA
.15e5	60		rts				rts
.15e6					_EXPCCopyXA:
.15e6	86 23		stx $23				stx 	zTemp0+1 					; save address to zTemp0
.15e8	85 22		sta $22				sta 	zTemp0
.15ea	b2 22		lda ($22)			lda 	(zTemp0)					; length of string
.15ec	f0 0e		beq $15fc			beq 	_EXPCCExit 					; nothing in string
.15ee	aa		tax				tax 								; count
.15ef	5a		phy				phy 								; start position
.15f0	a0 01		ldy #$01			ldy 	#1
.15f2					_EXPCCLoop:
.15f2	b1 22		lda ($22),y			lda 	(zTemp0),y 					; write characters one at a time.
.15f4	20 d5 29	jsr $29d5			jsr 	StringTempWrite
.15f7	c8		iny				iny
.15f8	ca		dex				dex
.15f9	d0 f7		bne $15f2			bne 	_EXPCCLoop
.15fb	7a		ply				ply
.15fc					_EXPCCExit:
.15fc	60		rts				rts
.15fd					_EXPCError:
.15fd	4c 12 28	jmp $2812		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1600					EXPReturnTrue:
.1600	a2 08		ldx #$08			ldx 	#IFR0
.1602	a9 01		lda #$01			lda 	#1
.1604	20 53 32	jsr $3253			jsr 	IFloatSetByte
.1607	20 5c 32	jsr $325c			jsr 	IFloatNegate
.160a	60		rts				rts
.160b					EXPReturnFalse:
.160b	a2 08		ldx #$08			ldx 	#IFR0
.160d	4c 51 32	jmp $3251			jmp 	IFloatSetZero
.1610					EXPCompareEqual:
.1610	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.1613	c9 00		cmp #$00			cmp 	#0
.1615	f0 e9		beq $1600			beq 	EXPReturnTrue
.1617	80 f2		bra $160b			bra 	EXPReturnFalse
.1619					EXPCompareLess:
.1619	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.161c	c9 ff		cmp #$ff			cmp 	#$FF
.161e	f0 e0		beq $1600			beq 	EXPReturnTrue
.1620	80 e9		bra $160b			bra 	EXPReturnFalse
.1622					EXPCompareGreater:
.1622	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.1625	c9 01		cmp #$01			cmp 	#1
.1627	f0 d7		beq $1600			beq 	EXPReturnTrue
.1629	80 e0		bra $160b			bra 	EXPReturnFalse
.162b					EXPCompareNotEqual:
.162b	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.162e	c9 00		cmp #$00			cmp 	#0
.1630	d0 ce		bne $1600			bne 	EXPReturnTrue
.1632	80 d7		bra $160b			bra 	EXPReturnFalse
.1634					EXPCompareLessEqual:
.1634	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.1637	c9 01		cmp #$01			cmp 	#1
.1639	d0 c5		bne $1600			bne 	EXPReturnTrue
.163b	80 ce		bra $160b			bra 	EXPReturnFalse
.163d					EXPCompareGreaterEqual:
.163d	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.1640	c9 ff		cmp #$ff			cmp 	#$FF
.1642	d0 bc		bne $1600			bne 	EXPReturnTrue
.1644	80 c5		bra $160b			bra 	EXPReturnFalse
.1646					EXPCompareBaseCode:
.1646	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1648	30 10		bmi $165a			bmi 	_EXCBCString
.164a	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.164c	20 20 2f	jsr $2f20			jsr 	IFloatCompare
.164f	a5 08		lda $08				lda 	IFR0+IM0
.1651	f0 06		beq $1659			beq 	_EXCBCExit 					; return 0 if zero
.1653	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1655	50 02		bvc $1659			bvc 	_EXCBCExit
.1657	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1659					_EXCBCExit:
.1659	60		rts				rts
.165a					_EXCBCString:
.165a	5a		phy				phy
.165b	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.165d	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.165f	90 02		bcc $1663			bcc 	_EXCBCSmaller
.1661	b2 0c		lda ($0c)			lda 	(IFR1)
.1663					_EXCBCSmaller:
.1663	aa		tax				tax
.1664	f0 0d		beq $1673			beq 	_EXCBCMatches 				; if zero common length matches
.1666	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1668					_EXCBCCheckSmallerMatches:
.1668	c8		iny				iny 								; compare directly as far as common length
.1669	38		sec				sec
.166a	b1 0c		lda ($0c),y			lda 	(IFR1),y
.166c	f1 08		sbc ($08),y			sbc 	(IFR0),y
.166e	d0 08		bne $1678			bne 	_EXCBCExit2
.1670	ca		dex				dex
.1671	d0 f5		bne $1668			bne 	_EXCBCCheckSmallerMatches
.1673					_EXCBCMatches:
.1673	38		sec				sec
.1674	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1676	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1678					_EXCBCExit2:
.1678	7a		ply				ply
.1679	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.167b	f0 04		beq $1681			beq 	_EXCBCReturn
.167d	30 03		bmi $1682			bmi 	_EXCBCFF 					; return $FF if <
.167f	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1681					_EXCBCReturn:
.1681	60		rts				rts
.1682					_EXCBCFF:
.1682	a9 ff		lda #$ff			lda 	#$FF
.1684	60		rts				rts
.1685					_EXCBCRange:
.1685	4c 06 27	jmp $2706		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1688					EXPBinLeft:
.1688	a9 ff		lda #$ff			lda 	#$FF
.168a	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.168d	4c 93 16	jmp $1693			jmp 	EXPShiftCommon
.1690					EXPBinRight:
.1690	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.1693					EXPShiftCommon:
.1693	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1695	05 0f		ora $0f				ora 	IFR1+IExp
.1697	29 7f		and #$7f			and 	#$7F
.1699	d0 35		bne $16d0			bne 	_EXPSRange
.169b	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.169d	29 e0		and #$e0			and 	#$E0
.169f	05 09		ora $09				ora 	IFR0+IM1
.16a1	05 0a		ora $0a				ora 	IFR0+IM2
.16a3	d0 25		bne $16ca			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.16a5	5a		phy				phy
.16a6	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16a8	29 1f		and #$1f			and 	#$1F
.16aa	f0 17		beq $16c3			beq 	_EXPSExit 					; exit if zero
.16ac	a8		tay				tay
.16ad					_EXPSLoop:
.16ad	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16af	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16b2	30 05		bmi $16b9			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16b4	20 80 32	jsr $3280			jsr 	IFloatShiftRight
.16b7	80 07		bra $16c0			bra 	_EXPSContinue
.16b9					_EXPSShiftLeft:
.16b9	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.16bc	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16be	30 10		bmi $16d0			bmi 	_EXPSRange
.16c0					_EXPSContinue:
.16c0	88		dey				dey 								; do it Y times
.16c1	d0 ea		bne $16ad			bne 	_EXPSLoop
.16c3					_EXPSExit:
.16c3	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16c5	20 e2 31	jsr $31e2			jsr 	IFloatCopyFromRegister
.16c8	7a		ply				ply
.16c9	60		rts				rts
.16ca					_EXPSShiftZero:
.16ca	a2 08		ldx #$08			ldx 	#IFR0
.16cc	20 51 32	jsr $3251			jsr 	IFloatSetZero
.16cf	60		rts				rts
.16d0					_EXPSRange:
.16d0	4c 06 27	jmp $2706		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16d3					EXPEvaluateExpression:
.16d3	a9 00		lda #$00			lda 	#0 							; current precedence
.16d5					EXPEvaluateExpressionPrecedenceA:
.16d5	48		pha				pha
.16d6	20 50 17	jsr $1750			jsr 	EXPTermValueR0				; do first term.
.16d9					_EELoop:
.16d9	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16db	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16dd	90 31		bcc $1710			bcc 	_EEExit
.16df	aa		tax				tax 								; access the precedence of the operator.
.16e0	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16e1	dd ae 1a	cmp $1aae,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16e4	b0 2b		bcs $1711			bcs 	_EEExit2
.16e6	48		pha				pha 								; save current precedence.
.16e7	da		phx				phx 								; save operator
.16e8	c8		iny				iny 								; consume operator
.16e9	da		phx				phx
.16ea	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16ec	20 a0 31	jsr $31a0			jsr 	IFloatPushRx
.16ef	fa		plx				plx
.16f0	bd ae 1a	lda $1aae,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16f3	20 d5 16	jsr $16d5			jsr 	EXPEvaluateExpressionPrecedenceA
.16f6	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16f8	20 c1 31	jsr $31c1			jsr 	IFloatPullRx
.16fb	fa		plx				plx 								; operator
.16fc	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16fe	45 0f		eor $0f				eor 	IFR1+IExp
.1700	30 08		bmi $170a			bmi 	_EEType
.1702					_EETypeOkay:
.1702	8a		txa				txa
.1703	0a		asl a				asl 	a 							; double -> X
.1704	aa		tax				tax
.1705	20 0d 17	jsr $170d			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1708	80 cf		bra $16d9			bra 	_EELoop
.170a					_EEType:
.170a	4c 25 27	jmp $2725		jmp	ErrorV_type
.170d					_EECallBinary:
.170d	7c 86 1d	jmp ($1d86,x)			jmp 	(VectorTable,x)
.1710					_EEExit:
.1710	68		pla				pla 								; throw precedence
.1711					_EEExit2:
.1711	18		clc				clc
.1712	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1713					EXPEvalNumber:
.1713	20 d3 16	jsr $16d3			jsr 	EXPEvaluateExpression 		; get a value
.1716	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1718	30 01		bmi $171b			bmi 	EVUType
.171a	60		rts				rts
.171b					EVUType:
.171b	4c 25 27	jmp $2725		jmp	ErrorV_type
.171e					EXPEvalInteger:
.171e	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1721	20 52 2f	jsr $2f52			jsr 	IFloatIntegerR0
.1724	60		rts				rts
.1725					EXPEvalInteger16:
.1725	20 1e 17	jsr $171e			jsr 	EXPEvalInteger 				; get integer
.1728	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.172a	d0 21		bne $174d			bne 	EVURange
.172c	a6 09		ldx $09				ldx 	IFR0+IM1
.172e	a5 08		lda $08				lda 	IFR0+IM0
.1730	60		rts				rts
.1731					EXPEvalInteger8:
.1731	20 1e 17	jsr $171e			jsr 	EXPEvalInteger 				; get integer
.1734	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1736	05 09		ora $09				ora 	IFR0+IM1
.1738	d0 13		bne $174d			bne 	EVURange
.173a	a5 08		lda $08				lda 	IFR0+IM0
.173c	60		rts				rts
.173d					EXPEvalString:
.173d	20 d3 16	jsr $16d3			jsr 	EXPEvaluateExpression 		; get value
.1740	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1742	10 d7		bpl $171b			bpl 	EVUType
.1744	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1746	86 23		stx $23				stx 	zTemp0+1
.1748	a5 08		lda $08				lda 	IFR0+IM0
.174a	85 22		sta $22				sta 	zTemp0
.174c	60		rts				rts
.174d					EVURange:
.174d	4c 06 27	jmp $2706		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1750					EXPTermValueR0:
.1750	20 9b 17	jsr $179b			jsr 	EXPTermR0 					; get term
.1753	90 45		bcc $179a			bcc 	_ETVNotReference 			; exit if value.
.1755	5a		phy				phy
.1756	a0 03		ldy #$03			ldy 	#3 							; get type
.1758	b1 08		lda ($08),y			lda 	(IFR0),y
.175a	30 14		bmi $1770			bmi 	_ETVDereferenceString
.175c	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.175e	88		dey				dey 								; get byte 2
.175f	b1 08		lda ($08),y			lda 	(IFR0),y
.1761	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1763	88		dey				dey 								; get byte 1
.1764	b1 08		lda ($08),y			lda 	(IFR0),y
.1766	aa		tax				tax 								; save in X so we can overwrite it
.1767	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1769	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.176b	85 08		sta $08				sta 	IFR0+IM0
.176d	7a		ply				ply
.176e	18		clc				clc
.176f	60		rts				rts
.1770					_ETVDereferenceString:
.1770	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1772	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1774	12 08		ora ($08)			ora 	(IFR0)
.1776	f0 11		beq $1789			beq 	_ETVNull 					; if so, return a fake NULL.
.1778	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.177a	aa		tax				tax
.177b	b2 08		lda ($08)			lda 	(IFR0)
.177d	18		clc				clc 								; add two so points to actual string.
.177e	69 02		adc #$02			adc 	#2
.1780	90 01		bcc $1783			bcc 	_EVDSNoCarry
.1782	e8		inx				inx
.1783					_EVDSNoCarry:
.1783	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1785	85 08		sta $08				sta 	IFR0
.1787	80 08		bra $1791			bra 	_ETVFillExit 				; tidy up and exit.
.1789					_ETVNull:
.1789	a9 99		lda #$99			lda 	#_EVTNString & $FF
.178b	85 08		sta $08				sta 	IFR0+IM0
.178d	a9 17		lda #$17			lda 	#_EVTNString >> 8
.178f	85 09		sta $09				sta 	IFR0+IM1
.1791					_ETVFillExit:
.1791	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1793	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1795	85 0b		sta $0b				sta 	IFR0+IExp
.1797	7a		ply				ply
.1798	60		rts				rts
.1799					_EVTNString:
>1799	00						.byte 	0
.179a					_ETVNotReference:
.179a	60		rts				rts
.179b					EXPTermR0:
.179b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.179d	30 10		bmi $17af			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.179f	c8		iny				iny 								; consume element
.17a0	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.17a2	b0 08		bcs $17ac			bcs 	_ETMIdentifier
.17a4	20 da 17	jsr $17da			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.17a7	20 0d 18	jsr $180d			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17aa	18		clc				clc 								; return value ok
.17ab	60		rts				rts
.17ac					_ETMIdentifier:
.17ac	4c ea 2b	jmp $2bea			jmp 	VARCheckSimple 				; check variables, seperate module.
.17af					_ETMIsUnaryOrMinus:
.17af	c8		iny				iny 								; consume element
.17b0	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17b2	d0 0e		bne $17c2			bne 	_ETMCheckUnary
.17b4	20 50 17	jsr $1750			jsr 	EXPTermValueR0 				; get a term to negate
.17b7	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17b9	20 5c 32	jsr $325c			jsr 	IFloatNegate
.17bc	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17be	30 17		bmi $17d7			bmi 	_ETMUnaryType				; if so error.
.17c0	18		clc				clc
.17c1	60		rts				rts
.17c2					_ETMCheckUnary:
.17c2	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17c4	90 0e		bcc $17d4			bcc 	_ETMUnarySyntax
.17c6	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17c8	b0 0a		bcs $17d4			bcs 	_ETMUnarySyntax
.17ca	0a		asl a				asl 	a 							; make it into an index => X
.17cb	aa		tax				tax
.17cc	20 d1 17	jsr $17d1			jsr 	_ETMCallUnaryFunction 		; call the function
.17cf	18		clc				clc 								; and return it.
.17d0	60		rts				rts
.17d1					_ETMCallUnaryFunction:
.17d1	7c 86 1d	jmp ($1d86,x)			jmp 	(VectorTable,x)
.17d4					_ETMUnarySyntax:
.17d4	4c f5 26	jmp $26f5		jmp	ErrorV_syntax
.17d7					_ETMUnaryType:
.17d7	4c 25 27	jmp $2725		jmp	ErrorV_type
.17da					EXPExtractTokenisedInteger:
.17da	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17dc	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17de	64 09		stz $09				stz 	IFR0+IM1
.17e0	64 0a		stz $0a				stz 	IFR0+IM2
.17e2					_ETMConstant:
.17e2	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17e4	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17e6	b0 24		bcs $180c			bcs 	_ETMCExit 					; no, exit.
.17e8	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17ea	a5 09		lda $09				lda 	IFR0+IM1
.17ec	85 0a		sta $0a				sta 	IFR0+IM2
.17ee	a5 08		lda $08				lda 	IFR0+IM0
.17f0	85 09		sta $09				sta 	IFR0+IM1
.17f2	64 08		stz $08				stz 	IFR0+IM0
.17f4	8a		txa				txa
.17f5	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17f6	66 0a		ror $0a				ror 	IFR0+IM2
.17f8	66 09		ror $09				ror 	IFR0+IM1
.17fa	66 08		ror $08				ror 	IFR0+IM0
.17fc	4a		lsr a				lsr 	a
.17fd	66 0a		ror $0a				ror 	IFR0+IM2
.17ff	66 09		ror $09				ror 	IFR0+IM1
.1801	66 08		ror $08				ror 	IFR0+IM0
.1803	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1805	11 18		ora ($18),y			ora 	(codePtr),y
.1807	85 08		sta $08				sta 	IFR0+IM0
.1809	c8		iny				iny 								; consume, loop back
.180a	80 d6		bra $17e2			bra 	_ETMConstant
.180c					_ETMCExit:
.180c	60		rts				rts
.180d					EXPCheckDecimalFollows:
.180d	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.180f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1811	d0 19		bne $182c			bne 	_ETMCDExit
.1813	c8		iny				iny 								; consume token.
.1814	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1816	5a		phy				phy									; save current position
.1817	48		pha				pha 								; save count of chars.
.1818	38		sec				sec 								; address into YX : y + codePtr+1
.1819	98		tya				tya
.181a	65 18		adc $18				adc 	codePtr
.181c	aa		tax				tax
.181d	a5 19		lda $19				lda 	codePtr+1
.181f	69 00		adc #$00			adc 	#0
.1821	a8		tay				tay
.1822	68		pla				pla 								; get count.
.1823	20 f5 30	jsr $30f5			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1826	7a		ply				ply 								; go to next token.
.1827	98		tya				tya
.1828	38		sec				sec
.1829	71 18		adc ($18),y			adc 	(codePtr),y
.182b	a8		tay				tay
.182c					_ETMCDExit:
.182c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.182d					EXPUnaryAbs:
.182d	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.1830	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.1833	20 94 2e	jsr $2e94			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1836	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.1837					EXPUnaryNull:
.1837	20 50 17	jsr $1750			jsr 	EXPTermValueR0
.183a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.183b					EXPUnaryAsc:
.183b	20 3d 17	jsr $173d			jsr 	EXPEvalString 					; string to R0, zTemp0
.183e	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.1841	b2 22		lda ($22)			lda 	(zTemp0) 						; length 0 ?
.1843	f0 06		beq $184b			beq 	_EXAZero 						; if so return 0
.1845	5a		phy				phy 									; otherwise get first character
.1846	a0 01		ldy #$01			ldy 	#1
.1848	b1 22		lda ($22),y			lda 	(zTemp0),y
.184a	7a		ply				ply
.184b					_EXAZero:
.184b	a2 08		ldx #$08			ldx 	#IFR0
.184d	20 53 32	jsr $3253			jsr 	IFloatSetByte
.1850	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1851					EXPUnaryChr:
.1851	20 31 17	jsr $1731			jsr 	EXPEvalInteger8 				; expr
.1854	48		pha				pha 									; push on stack
.1855	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.1858	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.185a	20 a0 29	jsr $29a0			jsr 	StringTempAllocate
.185d	68		pla				pla 									; get value back
.185e	20 d5 29	jsr $29d5			jsr 	StringTempWrite 				; write to string.
.1861	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1862					EXPUnaryDec:
.1862	20 3d 17	jsr $173d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1865	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.1868	5a		phy				phy 									; save position.
.1869	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.186b	20 51 32	jsr $3251			jsr 	IFloatSetZero
.186e	b2 22		lda ($22)			lda 	(zTemp0)						; read the length to X
.1870	f0 3b		beq $18ad			beq 	_EUDError 						; empty string is not legit.
.1872	aa		tax				tax 									; count in X.
.1873	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1875					_EUDLoop:
.1875	b1 22		lda ($22),y			lda 	(zTemp0),y 						; get next from string
.1877	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1879	90 02		bcc $187d			bcc 	_EUDNoCase
.187b	e9 20		sbc #$20			sbc 	#$20
.187d					_EUDNoCase:
.187d	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.187f	90 2c		bcc $18ad			bcc 	_EUDError
.1881	c9 3a		cmp #$3a			cmp 	#'9'+1
.1883	90 0a		bcc $188f			bcc 	_EUDOkay
.1885	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1887	90 24		bcc $18ad			bcc 	_EUDError
.1889	c9 47		cmp #$47			cmp 	#'F'+1
.188b	b0 20		bcs $18ad			bcs 	_EUDError
.188d	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.188f					_EUDOkay:
.188f	29 0f		and #$0f			and 	#15 							; make constant
.1891	da		phx				phx
.1892	48		pha				pha
.1893	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1895	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.1898	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.189b	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.189e	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.18a1	68		pla				pla 									; pop constant and OR in
.18a2	fa		plx				plx
.18a3	05 08		ora $08				ora 	IFR0+IM0
.18a5	85 08		sta $08				sta 	IFR0+IM0
.18a7	c8		iny				iny 									; next char
.18a8	ca		dex				dex 									; done all characters ?
.18a9	d0 ca		bne $1875			bne 	_EUDLoop
.18ab	7a		ply				ply
.18ac	60		rts				rts
.18ad					_EUDError:
.18ad	4c 17 27	jmp $2717		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.18b0					EXPUnaryInlineDec:
.18b0	4c f5 26	jmp $26f5		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18b3					EXPUnaryPeek:
.18b3	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 				; number to R0
.18b6	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.18b9	b2 08		lda ($08)			lda 	(IFR0)
.18bb	a2 08		ldx #$08			ldx 	#IFR0
.18bd	20 53 32	jsr $3253			jsr 	IFloatSetByte
.18c0	60		rts				rts
.18c1					EXPUnaryDeek:
.18c1	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 				; number to R0
.18c4	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.18c7	5a		phy				phy
.18c8	a0 01		ldy #$01			ldy 	#1
.18ca	b1 08		lda ($08),y			lda 	(IFR0),y
.18cc	7a		ply				ply
.18cd	48		pha				pha
.18ce	b2 08		lda ($08)			lda 	(IFR0)
.18d0	a2 08		ldx #$08			ldx 	#IFR0
.18d2	20 53 32	jsr $3253			jsr 	IFloatSetByte
.18d5	68		pla				pla
.18d6	85 09		sta $09				sta 	IFR0+IM1
.18d8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18d9					EXPUnaryFrac:
.18d9	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.18dc	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.18df	20 fc 2e	jsr $2efc			jsr 	IFloatFractionalR0 				; get fractional bit.
.18e2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18e3					EXPUnaryInkey:
.18e3	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.18e6	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18e8	20 a0 29	jsr $29a0			jsr 	StringTempAllocate
.18eb	20 eb ff	jsr $ffeb			jsr 	OSIsKeyAvailable 				; if no key exit
.18ee	b0 06		bcs $18f6			bcs 	_EUIExit
.18f0	20 ee ff	jsr $ffee			jsr 	OSReadKeyboard 					; otherwise get it.
.18f3	20 d5 29	jsr $29d5			jsr 	StringTempWrite
.18f6					_EUIExit:
.18f6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18f7					EXPUnaryInt:
.18f7	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.18fa	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; check for )
.18fd	20 52 2f	jsr $2f52			jsr 	IFloatIntegerR0 				; force to integer.
.1900	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1901					EXPUnaryLen:
.1901	20 3d 17	jsr $173d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1904	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.1907	b2 22		lda ($22)			lda 	(zTemp0) 						; first byte is the length
.1909	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.190b	20 53 32	jsr $3253			jsr 	IFloatSetByte
.190e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.190f					EXPUnaryParenthesis:
.190f	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.1912	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.1915	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1916					EXPUnaryRnd:
.1916	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; number to R0
.1919	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 				; )
.191c	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.191e	20 35 19	jsr $1935			jsr 	EXPLoadInRandom
.1921	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1923	85 0b		sta $0b				sta 	IFR0+IExp
.1925	60		rts				rts
.1926					ExpUnaryRand:
.1926	20 1e 17	jsr $171e			jsr 	EXPEvalInteger 				; integer to R0
.1929	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 				; )
.192c	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.192e	20 35 19	jsr $1935			jsr 	EXPLoadInRandom
.1931	20 c1 2d	jsr $2dc1			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1934	60		rts				rts
.1935					EXPLoadInRandom:
.1935	20 51 32	jsr $3251			jsr 	IFloatSetZero 				; zero it
.1938	20 4a 19	jsr $194a			jsr 	EXPRandom32 				; do a 23 bit number.
.193b	95 00		sta $00,x			sta 	IM0,x
.193d	20 4a 19	jsr $194a			jsr 	EXPRandom32
.1940	95 01		sta $01,x			sta 	IM1,x
.1942	20 4a 19	jsr $194a			jsr 	EXPRandom32
.1945	29 7f		and #$7f			and 	#$7F
.1947	95 02		sta $02,x			sta 	IM2,x
.1949	60		rts				rts
.194a					EXPRandom32:
.194a	5a		phy				phy
.194b	a0 08		ldy #$08			ldy 	#8
.194d	ad 12 05	lda $0512			lda 	EXPSeed+0
.1950	0d 13 05	ora $0513			ora 	EXPSeed+1
.1953	0d 14 05	ora $0514			ora 	EXPSeed+2
.1956	0d 15 05	ora $0515			ora 	EXPSeed+3
.1959	d0 08		bne $1963			bne 	_EXPRNoReset
.195b	ee 12 05	inc $0512			inc 	EXPSeed+0
.195e	a0 10		ldy #$10			ldy 	#16
.1960	8c 15 05	sty $0515			sty 	EXPSeed+3
.1963					_EXPRNoReset:
.1963	ad 12 05	lda $0512			lda 	EXPSeed+0
.1966					_EXPRLoop:
.1966	0a		asl a				asl		a
.1967	2e 13 05	rol $0513			rol 	EXPSeed+1
.196a	2e 14 05	rol $0514			rol 	EXPSeed+2
.196d	2e 15 05	rol $0515			rol 	EXPSeed+3
.1970	90 02		bcc $1974			bcc 	_EXPRNoEOR
.1972	49 c5		eor #$c5			eor 	#$C5
.1974					_EXPRNoEOR:
.1974	88		dey				dey
.1975	d0 ef		bne $1966			bne 	_EXPRLoop
.1977	8d 12 05	sta $0512			sta 	EXPSeed+0
.197a	7a		ply				ply
.197b	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.197c					EXPUnarySgn:
.197c	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.197f	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.1982	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1984	20 f3 31	jsr $31f3			jsr 	IFloatCopyToRegister
.1987	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1989	20 51 32	jsr $3251			jsr 	IFloatSetZero
.198c	a2 0c		ldx #$0c			ldx 	#IFR1
.198e	20 20 2f	jsr $2f20			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1991	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1992					EXPUnarySqr:
.1992	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.1995	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.1998	20 9c 2e	jsr $2e9c			jsr 	IFloatSquareRootR0 				; square root.
.199b	b0 01		bcs $199e			bcs 	_EUSValue 						; error check.
.199d	60		rts				rts
.199e					_EUSValue:
.199e	4c 06 27	jmp $2706		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.19a1					EXPUnaryHex:
.19a1	20 1e 17	jsr $171e			jsr 	EXPEvalInteger 					; expr
.19a4	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.19a7	5a		phy				phy
.19a8	a9 10		lda #$10			lda 	#16
.19aa	20 f3 2f	jsr $2ff3			jsr 	IFloatIntegerToStringR0
.19ad	80 0a		bra $19b9			bra 	EUSMain
.19af					EXPUnaryStr:
.19af	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; expr
.19b2	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.19b5	5a		phy				phy
.19b6	20 4e 30	jsr $304e			jsr 	IFloatFloatToStringR0 			; convert to string
.19b9					EUSMain:
.19b9	b0 19		bcs $19d4			bcs 	_EUSError
.19bb	86 22		stx $22				stx 	zTemp0 							; save string address
.19bd	84 23		sty $23				sty 	zTemp0+1
.19bf	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19c1	20 a0 29	jsr $29a0			jsr 	StringTempAllocate
.19c4	b2 22		lda ($22)			lda 	(zTemp0) 						; get count
.19c6	aa		tax				tax 									; count in X
.19c7	a0 01		ldy #$01			ldy 	#1
.19c9					_EUSCopy:
.19c9	b1 22		lda ($22),y			lda 	(zTemp0),y
.19cb	c8		iny				iny
.19cc	20 d5 29	jsr $29d5			jsr 	StringTempWrite
.19cf	ca		dex				dex
.19d0	d0 f7		bne $19c9			bne	 	_EUSCopy
.19d2	7a		ply				ply
.19d3	60		rts				rts
.19d4					_EUSError:
.19d4	4c 06 27	jmp $2706		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19d7					EXPUnaryInlineString:
.19d7	18		clc				clc 								; physical address -> IM0,1
.19d8	98		tya				tya 								; put the actual address in IM0
.19d9	65 18		adc $18				adc 	codePtr
.19db	85 08		sta $08				sta 	IFR0+IM0
.19dd	a5 19		lda $19				lda 	codePtr+1
.19df	69 00		adc #$00			adc 	#0
.19e1	85 09		sta $09				sta 	IFR0+IM1
.19e3	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19e5	a9 80		lda #$80			lda 	#$80
.19e7	85 0b		sta $0b				sta 	IFR0+IExp
.19e9	98		tya				tya	 								; skip over it.
.19ea	38		sec				sec
.19eb	71 18		adc ($18),y			adc 	(codePtr),y
.19ed	a8		tay				tay
.19ee	60		rts				rts
.19ef					_EXPUISRange:
.19ef	4c 06 27	jmp $2706		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19f2					EXPUnaryLeft:
.19f2	20 38 1a	jsr $1a38			jsr 	EXPCommonStart 					; <string>,
.19f5	48		pha				pha 									; save string address on stack
.19f6	da		phx				phx
.19f7	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19f9	48		pha				pha
.19fa	20 31 17	jsr $1731			jsr 	EXPEvalInteger8 				; characters to do
.19fd	80 44		bra $1a43			bra 	EXPSubstringCommon
.19ff					EXPUnaryRight:
.19ff	20 38 1a	jsr $1a38			jsr 	EXPCommonStart 					; <string>,
.1a02	48		pha				pha 									; save string address on stack
.1a03	da		phx				phx
.1a04	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1a06	48		pha				pha
.1a07	20 31 17	jsr $1731			jsr 	EXPEvalInteger8 				; characters to do
.1a0a	85 22		sta $22				sta 	zTemp0 							; calculate length - required, start point.
.1a0c	68		pla				pla
.1a0d	38		sec				sec
.1a0e	e5 22		sbc $22				sbc 	zTemp0
.1a10	b0 02		bcs $1a14			bcs 	_EUROffLeft
.1a12	a9 00		lda #$00			lda 	#0
.1a14					_EUROffLeft:
.1a14	48		pha				pha 									; start pos
.1a15	a9 ff		lda #$ff			lda 	#255
.1a17	80 2a		bra $1a43			bra 	EXPSubstringCommon
.1a19					EXPUnaryMid:
.1a19	20 38 1a	jsr $1a38			jsr 	EXPCommonStart 					; <string>,
.1a1c	48		pha				pha 									; save string address on stack
.1a1d	da		phx				phx
.1a1e	20 31 17	jsr $1731			jsr 	EXPEvalInteger8 				; characters start
.1a21	f0 12		beq $1a35			beq 	_EUSError 						; 1 is left
.1a23	3a		dec a				dec 	a 								; zero based.
.1a24	48		pha				pha
.1a25	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a27	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a29	f0 04		beq $1a2f			beq 	_EUMLength 						; if so m is provided
.1a2b	a9 ff		lda #$ff			lda 	#255 							; default m
.1a2d	80 14		bra $1a43			bra 	EXPSubstringCommon
.1a2f					_EUMLength:
.1a2f	c8		iny				iny 									; consume comma
.1a30	20 31 17	jsr $1731			jsr 	EXPEvalInteger8 				; characters to do
.1a33	80 0e		bra $1a43			bra 	EXPSubstringCommon
.1a35					_EUSError:
.1a35	4c 17 27	jmp $2717		jmp	ErrorV_value
.1a38					EXPCommonStart:
.1a38	20 3d 17	jsr $173d			jsr 	EXPEvalString
.1a3b	20 b2 28	jsr $28b2			jsr 	ERRCheckComma
.1a3e	a5 08		lda $08				lda 	IFR0+IM0
.1a40	a6 09		ldx $09				ldx 	IFR0+IM1
.1a42	60		rts				rts
.1a43					EXPSubstringCommon:
.1a43	85 24		sta $24				sta 	zTemp1 							; count to do in zTemp1.
.1a45	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; check right bracket.
.1a48	68		pla				pla 									; start position
.1a49	85 25		sta $25				sta 	zTemp1+1 						; save in zTemp1+1
.1a4b	fa		plx				plx 									; get string address to zTemp2.
.1a4c	86 27		stx $27				stx 	zTemp2+1
.1a4e	68		pla				pla
.1a4f	85 26		sta $26				sta 	zTemp2
.1a51	38		sec				sec 									; length - start is the max count of chars
.1a52	b2 26		lda ($26)			lda 	(zTemp2)
.1a54	e5 25		sbc $25				sbc 	zTemp1+1
.1a56	c5 24		cmp $24				cmp 	zTemp1 							; if available < count
.1a58	b0 02		bcs $1a5c			bcs 	_EXPSSNoTrim
.1a5a	85 24		sta $24				sta 	zTemp1 							; update count with available
.1a5c					_EXPSSNoTrim:
.1a5c	a5 24		lda $24				lda 	zTemp1 							; chars required.
.1a5e	20 a0 29	jsr $29a0			jsr 	StringTempAllocate 				; allocate memory for it.
.1a61	a5 24		lda $24				lda 	zTemp1 							; zero length string
.1a63	f0 15		beq $1a7a			beq 	_EXPSSExit
.1a65	a5 25		lda $25				lda 	zTemp1+1 						; if length >= start exit
.1a67	d2 26		cmp ($26)			cmp 	(zTemp2)
.1a69	b0 0f		bcs $1a7a			bcs 	_EXPSSExit
.1a6b	5a		phy				phy
.1a6c	a4 25		ldy $25				ldy 	zTemp1+1 						; start position
.1a6e	c8		iny				iny 									; +1 for the length byte
.1a6f					_EXPSSCopy:
.1a6f	b1 26		lda ($26),y			lda 	(zTemp2),y
.1a71	20 d5 29	jsr $29d5			jsr 	StringTempWrite
.1a74	c8		iny				iny
.1a75	c6 24		dec $24				dec 	zTemp1
.1a77	d0 f6		bne $1a6f			bne 	_EXPSSCopy
.1a79	7a		ply				ply
.1a7a					_EXPSSExit:
.1a7a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a7b					EXPUnaryVal:
.1a7b	20 3d 17	jsr $173d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a7e	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 					; )
.1a81	20 85 1a	jsr $1a85			jsr 	VALConversionZTemp0
.1a84	60		rts				rts
.1a85					VALConversionZTemp0:
.1a85	5a		phy				phy
.1a86	18		clc				clc
.1a87	a5 22		lda $22				lda		zTemp0 							; point XY to the text
.1a89	69 01		adc #$01			adc 	#1
.1a8b	aa		tax				tax
.1a8c	a5 23		lda $23				lda 	zTemp0+1
.1a8e	69 00		adc #$00			adc 	#0
.1a90	a8		tay				tay
.1a91	b2 22		lda ($22)			lda 	(zTemp0) 						; get length.
.1a93	20 b5 30	jsr $30b5			jsr 	IFloatStringToFloatR0 			; do conversion
.1a96	b0 02		bcs $1a9a			bcs 	_EUVError
.1a98	7a		ply				ply
.1a99	60		rts				rts
.1a9a					_EUVError:
.1a9a	4c 17 27	jmp $2717		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1a9d					AssemblerLookup:
>1a9d	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,74,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,74,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,74,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,74,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,74,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,74,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,74,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,74,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,75,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,75,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,75,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,75,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,75,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,75,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,75,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,75
>1aa5	fb 1e 7c 00 4b 1e 7c 4a b8 1e 1e 00 41 1e 7c eb
>1ab5	b9 1e f9 00 41 1e 7c 4a 7f 6a 00 00 7a 6a e1 eb
>1ac5	23 6a e1 00 7a 6a e1 4a 97 6a 6a 00 7a 6a e1 eb
>1ad5	a6 6a 7d 00 7a 6a e1 4a 38 62 00 00 00 62 0b eb
>1ae5	ec 62 0b 00 2e 62 0b 4a c3 62 62 00 00 62 0b eb
>1af5	bf 62 04 00 00 62 0b 4a 42 1d 00 00 3b 1d e7 eb
>1b05	14 1d e7 00 2e 1d e7 4a d3 1d 1d 00 3b 1d e7 eb
>1b15	ac 1d 2c 00 2e 1d e7 4a 99 22 00 00 3a 22 39 f5
>1b25	93 7a 54 00 3a 22 39 4b 45 22 22 00 3a 22 39 f5
>1b35	5e 22 66 00 3b 22 3b 4b 19 01 18 00 19 01 18 f5
>1b45	c6 01 c5 00 19 01 18 4b 55 01 01 00 19 01 18 f5
>1b55	cc 01 61 00 19 01 18 4b f7 a8 00 00 f7 a8 7d f5
>1b65	0f a8 92 0c f7 a8 7d 4b 75 a8 a8 00 00 a8 7d f5
>1b75	ba a8 03 31 00 a8 7d 4b f6 48 00 00 f6 48 f9 f5
>1b85	0e 48 dd 00 f6 48 f9 4b 8f 48 48 00 00 48 f9 f5
>1b95	a7 48 2b 00 00 48 f9 4b

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1b9d					BinaryPrecedence:
>1b9d	02					.byte	 2	; $ef =
>1b9e	02					.byte	 2	; $f0 <>
>1b9f	02					.byte	 2	; $f1 <=
>1ba0	02					.byte	 2	; $f2 <
>1ba1	02					.byte	 2	; $f3 >=
>1ba2	02					.byte	 2	; $f4 >
>1ba3	01					.byte	 1	; $f5 XOR
>1ba4	01					.byte	 1	; $f6 OR
>1ba5	01					.byte	 1	; $f7 AND
>1ba6	04					.byte	 4	; $f8 DIV
>1ba7	04					.byte	 4	; $f9 MOD
>1ba8	04					.byte	 4	; $fa <<
>1ba9	04					.byte	 4	; $fb >>
>1baa	04					.byte	 4	; $fc /
>1bab	04					.byte	 4	; $fd *
>1bac	03					.byte	 3	; $fe -
>1bad	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1bae					StructureOffsets:
>1bae	01					.byte	1  	; $80 REPEAT
>1baf	ff					.byte	255	; $81 UNTIL
>1bb0	01					.byte	1  	; $82 WHILE
>1bb1	ff					.byte	255	; $83 WEND
>1bb2	01					.byte	1  	; $84 IF
>1bb3	ff					.byte	255	; $85 ENDIF
>1bb4	01					.byte	1  	; $86 DO
>1bb5	ff					.byte	255	; $87 LOOP
>1bb6	01					.byte	1  	; $88 PROC
>1bb7	ff					.byte	255	; $89 ENDPROC
>1bb8	01					.byte	1  	; $8a FOR
>1bb9	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1bba					StandardTokens:
>1bba	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1bc1	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1bc7	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1bcd	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1bd2	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1bd5	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1bdb	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1bde	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1be3	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1be8	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1bf0	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1bf4	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1bf9	00					.byte	$00                                     	; $8c [[end]]
>1bfa	00					.byte	$00                                     	; $8d [[shift]]
>1bfb	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1c00	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1c05	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1c08	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1c0d	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1c11	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1c17	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1c1d	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1c22	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1c26	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1c2a	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1c2f	01 2c					.byte	$01,$2c                                 	; $99 ,
>1c31	01 3b					.byte	$01,$3b                                 	; $9a ;
>1c33	01 3a					.byte	$01,$3a                                 	; $9b :
>1c35	01 27					.byte	$01,$27                                 	; $9c '
>1c37	01 29					.byte	$01,$29                                 	; $9d )
>1c39	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1c3e	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1c43	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1c48	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1c4d	01 5b					.byte	$01,$5b                                 	; $a2 [
>1c4f	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1c51	01 23					.byte	$01,$23                                 	; $a4 #
>1c53	00					.byte	0											; $a5
>1c54	00					.byte	0											; $a6
>1c55	00					.byte	0											; $a7
>1c56	00					.byte	0											; $a8
>1c57	00					.byte	0											; $a9
>1c58	00					.byte	0											; $aa
>1c59	00					.byte	0											; $ab
>1c5a	00					.byte	0											; $ac
>1c5b	00					.byte	0											; $ad
>1c5c	00					.byte	0											; $ae
>1c5d	00					.byte	0											; $af
>1c5e	00					.byte	0											; $b0
>1c5f	00					.byte	0											; $b1
>1c60	00					.byte	0											; $b2
>1c61	00					.byte	0											; $b3
>1c62	00					.byte	0											; $b4
>1c63	00					.byte	0											; $b5
>1c64	00					.byte	0											; $b6
>1c65	00					.byte	0											; $b7
>1c66	00					.byte	0											; $b8
>1c67	00					.byte	0											; $b9
>1c68	00					.byte	0											; $ba
>1c69	00					.byte	0											; $bb
>1c6a	00					.byte	0											; $bc
>1c6b	00					.byte	0											; $bd
>1c6c	00					.byte	0											; $be
>1c6d	00					.byte	0											; $bf
>1c6e	00					.byte	0											; $c0
>1c6f	00					.byte	0											; $c1
>1c70	00					.byte	0											; $c2
>1c71	00					.byte	0											; $c3
>1c72	00					.byte	0											; $c4
>1c73	00					.byte	0											; $c5
>1c74	00					.byte	0											; $c6
>1c75	00					.byte	0											; $c7
>1c76	00					.byte	0											; $c8
>1c77	00					.byte	0											; $c9
>1c78	00					.byte	0											; $ca
>1c79	00					.byte	0											; $cb
>1c7a	00					.byte	0											; $cc
>1c7b	00					.byte	0											; $cd
>1c7c	00					.byte	0											; $ce
>1c7d	00					.byte	0											; $cf
>1c7e	00					.byte	0											; $d0
>1c7f	00					.byte	0											; $d1
>1c80	00					.byte	0											; $d2
>1c81	00					.byte	0											; $d3
>1c82	00					.byte	0											; $d4
>1c83	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1c89	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1c8f	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1c97	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1c9e	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1ca4	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1caa	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1caf	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1cb4	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1cb9	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1cbe	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1cc3	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1cc9	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1cce	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1cd6	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1cdd	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1ce2	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1ce7	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1ced	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1cf2	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1cf8	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1cfd	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1d03	01 28					.byte	$01,$28                                 	; $eb (
>1d05	01 26					.byte	$01,$26                                 	; $ec &
>1d07	00					.byte	$00                                     	; $ed [[decimal]]
>1d08	00					.byte	$00                                     	; $ee [[string]]
>1d09	01 3d					.byte	$01,$3d                                 	; $ef =
>1d0b	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1d0e	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1d11	01 3c					.byte	$01,$3c                                 	; $f2 <
>1d13	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1d16	01 3e					.byte	$01,$3e                                 	; $f4 >
>1d18	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1d1c	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1d1f	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1d23	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1d27	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1d2b	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1d2e	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1d31	01 2f					.byte	$01,$2f                                 	; $fc /
>1d33	01 2a					.byte	$01,$2a                                 	; $fd *
>1d35	01 2d					.byte	$01,$2d                                 	; $fe -
>1d37	01 2b					.byte	$01,$2b                                 	; $ff +
>1d39	ff					.byte	$FF
.1d3a					AlternateTokens:
>1d3a	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1d40	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1d44	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1d48	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1d4d	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1d51	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1d58	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1d5d	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1d62	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1d67	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1d6d	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1d72	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1d79	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1d81	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1d85	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1d86					VectorTable:
>1d86	e5 25					.word	Command_REPEAT           ; $80 REPEAT
>1d88	ee 25					.word	Command_UNTIL            ; $81 UNTIL
>1d8a	c8 26					.word	Command_WHILE            ; $82 WHILE
>1d8c	e9 26					.word	Command_WEND             ; $83 WEND
>1d8e	bb 25					.word	IfCommand                ; $84 IF
>1d90	e4 25					.word	EndIf                    ; $85 ENDIF
>1d92	3d 24					.word	Command_DO               ; $86 DO
>1d94	55 24					.word	Command_LOOP             ; $87 LOOP
>1d96	53 15					.word	NoExec08                 ; $88 PROC
>1d98	31 24					.word	Command_ENDPROC          ; $89 ENDPROC
>1d9a	5e 24					.word	Command_FOR              ; $8a FOR
>1d9c	eb 24					.word	Command_NEXT             ; $8b NEXT
>1d9e	d4 14					.word	RUNEndOfLine             ; $8c [[END]]
>1da0	30 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1da2	dd 25					.word	ElseCode                 ; $8e ELSE
>1da4	53 15					.word	NoExec01                 ; $8f THEN
>1da6	53 15					.word	NoExec02                 ; $90 TO
>1da8	53 15					.word	NoExec03                 ; $91 STEP
>1daa	bf 12					.word	CommandLET               ; $92 LET
>1dac	14 12					.word	Command_Print            ; $93 PRINT
>1dae	0d 12					.word	Command_Input            ; $94 INPUT
>1db0	f5 23					.word	Command_CALL             ; $95 CALL
>1db2	3e 15					.word	Command_Sys              ; $96 SYS
>1db4	8d 14					.word	Command_REM              ; $97 REM
>1db6	46 24					.word	Command_EXIT             ; $98 EXIT
>1db8	53 15					.word	NoExec04                 ; $99 ,
>1dba	53 15					.word	NoExec05                 ; $9a ;
>1dbc	53 15					.word	NoExec06                 ; $9b :
>1dbe	8d 14					.word	Command_REM2             ; $9c '
>1dc0	53 15					.word	NoExec07                 ; $9d )
>1dc2	b6 11					.word	Command_Poke             ; $9e POKE
>1dc4	b3 11					.word	Command_Doke             ; $9f DOKE
>1dc6	19 14					.word	Command_READ             ; $a0 READ
>1dc8	80 14					.word	Command_DATA             ; $a1 DATA
>1dca	27 2a					.word	NotImplemented           ; $a2 [
>1dcc	27 2a					.word	NotImplemented           ; $a3 ]
>1dce	27 2a					.word	NotImplemented           ; $a4 #
>1dd0	27 2a					.word	NotImplemented           ; $a5
>1dd2	27 2a					.word	NotImplemented           ; $a6
>1dd4	27 2a					.word	NotImplemented           ; $a7
>1dd6	27 2a					.word	NotImplemented           ; $a8
>1dd8	27 2a					.word	NotImplemented           ; $a9
>1dda	27 2a					.word	NotImplemented           ; $aa
>1ddc	27 2a					.word	NotImplemented           ; $ab
>1dde	27 2a					.word	NotImplemented           ; $ac
>1de0	27 2a					.word	NotImplemented           ; $ad
>1de2	27 2a					.word	NotImplemented           ; $ae
>1de4	27 2a					.word	NotImplemented           ; $af
>1de6	27 2a					.word	NotImplemented           ; $b0
>1de8	27 2a					.word	NotImplemented           ; $b1
>1dea	27 2a					.word	NotImplemented           ; $b2
>1dec	27 2a					.word	NotImplemented           ; $b3
>1dee	27 2a					.word	NotImplemented           ; $b4
>1df0	27 2a					.word	NotImplemented           ; $b5
>1df2	27 2a					.word	NotImplemented           ; $b6
>1df4	27 2a					.word	NotImplemented           ; $b7
>1df6	27 2a					.word	NotImplemented           ; $b8
>1df8	27 2a					.word	NotImplemented           ; $b9
>1dfa	27 2a					.word	NotImplemented           ; $ba
>1dfc	27 2a					.word	NotImplemented           ; $bb
>1dfe	27 2a					.word	NotImplemented           ; $bc
>1e00	27 2a					.word	NotImplemented           ; $bd
>1e02	27 2a					.word	NotImplemented           ; $be
>1e04	27 2a					.word	NotImplemented           ; $bf
>1e06	27 2a					.word	NotImplemented           ; $c0
>1e08	27 2a					.word	NotImplemented           ; $c1
>1e0a	27 2a					.word	NotImplemented           ; $c2
>1e0c	27 2a					.word	NotImplemented           ; $c3
>1e0e	27 2a					.word	NotImplemented           ; $c4
>1e10	27 2a					.word	NotImplemented           ; $c5
>1e12	27 2a					.word	NotImplemented           ; $c6
>1e14	27 2a					.word	NotImplemented           ; $c7
>1e16	27 2a					.word	NotImplemented           ; $c8
>1e18	27 2a					.word	NotImplemented           ; $c9
>1e1a	27 2a					.word	NotImplemented           ; $ca
>1e1c	27 2a					.word	NotImplemented           ; $cb
>1e1e	27 2a					.word	NotImplemented           ; $cc
>1e20	27 2a					.word	NotImplemented           ; $cd
>1e22	27 2a					.word	NotImplemented           ; $ce
>1e24	27 2a					.word	NotImplemented           ; $cf
>1e26	27 2a					.word	NotImplemented           ; $d0
>1e28	27 2a					.word	NotImplemented           ; $d1
>1e2a	27 2a					.word	NotImplemented           ; $d2
>1e2c	27 2a					.word	NotImplemented           ; $d3
>1e2e	27 2a					.word	NotImplemented           ; $d4
>1e30	c1 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1e32	b3 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1e34	ff 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1e36	f2 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1e38	19 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1e3a	af 19					.word	EXPUnaryStr              ; $da STR$(
>1e3c	7b 1a					.word	EXPUnaryVal              ; $db VAL(
>1e3e	7c 19					.word	EXPUnarySgn              ; $dc SGN(
>1e40	2d 18					.word	EXPUnaryAbs              ; $dd ABS(
>1e42	01 19					.word	EXPUnaryLen              ; $de LEN(
>1e44	92 19					.word	EXPUnarySqr              ; $df SQR(
>1e46	51 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1e48	3b 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1e4a	e3 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1e4c	27 2a					.word	NotImplemented           ; $e3 EVENT(
>1e4e	27 2a					.word	NotImplemented           ; $e4 TIME
>1e50	f7 18					.word	EXPUnaryInt              ; $e5 INT(
>1e52	d9 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1e54	62 18					.word	EXPUnaryDec              ; $e7 DEC(
>1e56	a1 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1e58	16 19					.word	EXPUnaryRnd              ; $e9 RND(
>1e5a	26 19					.word	ExpUnaryRand             ; $ea RAND(
>1e5c	0f 19					.word	EXPUnaryParenthesis      ; $eb (
>1e5e	37 18					.word	EXPUnaryNull             ; $ec &
>1e60	b0 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1e62	d7 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1e64	10 16					.word	EXPCompareEqual          ; $ef =
>1e66	2b 16					.word	EXPCompareNotEqual       ; $f0 <>
>1e68	34 16					.word	EXPCompareLessEqual      ; $f1 <=
>1e6a	19 16					.word	EXPCompareLess           ; $f2 <
>1e6c	3d 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1e6e	22 16					.word	EXPCompareGreater        ; $f4 >
>1e70	bd 15					.word	EXPBinXor                ; $f5 XOR
>1e72	b1 15					.word	EXPBinOr                 ; $f6 OR
>1e74	a5 15					.word	EXPBinAnd                ; $f7 AND
>1e76	7d 15					.word	EXPBinIDiv               ; $f8 DIV
>1e78	8e 15					.word	EXPBinIMod               ; $f9 MOD
>1e7a	88 16					.word	EXPBinLeft               ; $fa <<
>1e7c	90 16					.word	EXPBinRight              ; $fb >>
>1e7e	71 15					.word	EXPBinFDiv               ; $fc /
>1e80	68 15					.word	EXPBinMul                ; $fd *
>1e82	5f 15					.word	EXPBinSub                ; $fe -
>1e84	56 15					.word	EXPBinAdd                ; $ff +
.1e86					AlternateVectorTable:
>1e86	23 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1e88	10 14					.word	Command_NEW              ; $8d81 NEW
>1e8a	c8 14					.word	Command_RUN              ; $8d82 RUN
>1e8c	3b 15					.word	Command_STOP             ; $8d83 STOP
>1e8e	38 15					.word	Command_END              ; $8d84 END
>1e90	15 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1e92	39 13					.word	Command_LIST             ; $8d86 LIST
>1e94	27 2a					.word	NotImplemented           ; $8d87 SAVE
>1e96	27 2a					.word	NotImplemented           ; $8d88 LOAD
>1e98	a1 25					.word	Command_GOSUB            ; $8d89 GOSUB
>1e9a	dd 11					.word	Command_GOTO             ; $8d8a GOTO
>1e9c	af 25					.word	Command_RETURN           ; $8d8b RETURN
>1e9e	9a 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1ea0	97 10					.word	CommandDIM               ; $8d8d DIM

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1ea2					TOKDetokenise:
.1ea2	86 26		stx $26				stx 	zTemp2 						; save tokenised code in zTemp2
.1ea4	84 27		sty $27				sty 	zTemp2+1
.1ea6	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1ea9					_TOKDLoop:
.1ea9	20 ee 1e	jsr $1eee			jsr 	TOKDGet 					; get next
.1eac	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1eae	f0 3c		beq $1eec			beq 	_TOKDExit
.1eb0	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1eb2	f0 33		beq $1ee7			beq 	_TOKDDataItem
.1eb4	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1eb6	f0 2f		beq $1ee7			beq 	_TOKDDataItem
.1eb8	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.1eba	f0 19		beq $1ed5			beq 	_TOKAmpersand
.1ebc	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1ebe	10 05		bpl $1ec5			bpl 	_TOKDNotToken
.1ec0	20 ba 1f	jsr $1fba			jsr 	TOKDToken 					; token to text.
.1ec3	80 e4		bra $1ea9			bra 	_TOKDLoop
.1ec5					_TOKDNotToken:
.1ec5	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1ec7	90 05		bcc $1ece			bcc 	_TOKDNotIdentifier
.1ec9	20 2b 1f	jsr $1f2b			jsr 	TOKDIdentifier
.1ecc	80 db		bra $1ea9			bra 	_TOKDLoop
.1ece					_TOKDNotIdentifier:
.1ece	a0 0a		ldy #$0a			ldy 	#10
.1ed0	20 74 1f	jsr $1f74			jsr 	TOKDInteger
.1ed3	80 d4		bra $1ea9			bra 	_TOKDLoop
.1ed5					_TOKAmpersand:
.1ed5	20 fc 1f	jsr $1ffc			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.1ed8	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.1eda	20 f7 1e	jsr $1ef7			jsr 	TOKDOutput
.1edd	20 ee 1e	jsr $1eee			jsr 	TOKDGet 					; get first char of integer
.1ee0	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.1ee2	20 74 1f	jsr $1f74			jsr 	TOKDInteger
.1ee5	80 c2		bra $1ea9			bra 	_TOKDLoop
.1ee7					_TOKDDataItem:
.1ee7	20 04 1f	jsr $1f04			jsr 	TOKDDataItem
.1eea	80 bd		bra $1ea9			bra 	_TOKDLoop
.1eec					_TOKDExit:
.1eec	18		clc				clc
.1eed	60		rts				rts
.1eee	b2 26		lda ($26)	TOKDGet:lda 	(zTemp2)
.1ef0	e6 26		inc $26				inc 	zTemp2
.1ef2	d0 02		bne $1ef6			bne 	_TKDGExit
.1ef4	e6 27		inc $27				inc 	zTemp2+1
.1ef6					_TKDGExit:
.1ef6	60		rts				rts
.1ef7					TOKDOutput:
.1ef7	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1efa	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1efd					TOKSetDetokeniseOutput:
.1efd	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1f00	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1f03	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1f04					TOKDDataItem:
.1f04	a8		tay				tay 								; type in Y
.1f05	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1f07	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1f09	f0 02		beq $1f0d			beq 	_TOKDDIsString
.1f0b	a9 2e		lda #$2e			lda 	#'.'
.1f0d					_TOKDDIsString:
.1f0d	20 f7 1e	jsr $1ef7			jsr 	TOKDOutput 					; dump it
.1f10	20 ee 1e	jsr $1eee			jsr 	TOKDGet 					; get length into X
.1f13	aa		tax				tax
.1f14					_TOKDDOutput:
.1f14	ca		dex				dex 								; are we complete
.1f15	e0 ff		cpx #$ff			cpx 	#255
.1f17	f0 08		beq $1f21			beq 	_TOKDDEnd
.1f19	20 ee 1e	jsr $1eee			jsr 	TOKDGet 					; get character and output it
.1f1c	20 f7 1e	jsr $1ef7			jsr 	TOKDOutput
.1f1f	80 f3		bra $1f14			bra 	_TOKDDOutput
.1f21					_TOKDDEnd:
.1f21	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1f23	d0 05		bne $1f2a			bne 	_TOKDDNotString
.1f25	a9 22		lda #$22			lda 	#'"'
.1f27	20 f7 1e	jsr $1ef7			jsr 	TOKDOutput
.1f2a					_TOKDDNotString:
.1f2a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1f2b					TOKDIdentifier:
.1f2b	a0 ff		ldy #$ff			ldy 	#$FF
.1f2d	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1f30					_TOKDLoop:
.1f30	a8		tay				tay 								; token in Y
.1f31	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1f33	c0 64		cpy #$64			cpy 	#$64
.1f35	f0 11		beq $1f48			beq 	_TOKDIOutput
.1f37	a9 5f		lda #$5f			lda 	#'_'
.1f39	c0 65		cpy #$65			cpy 	#$65
.1f3b	f0 0b		beq $1f48			beq 	_TOKDIOutput
.1f3d	98		tya				tya 								; handle a-z
.1f3e	18		clc				clc
.1f3f	69 21		adc #$21			adc	 	#$21
.1f41	c0 5a		cpy #$5a			cpy 	#$5A
.1f43	90 03		bcc $1f48			bcc 	_TOKDIOutput
.1f45	38		sec				sec 								; handle 0-9
.1f46	e9 4b		sbc #$4b			sbc 	#$4B
.1f48					_TOKDIOutput:
.1f48	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1f4b	10 08		bpl $1f55			bpl 	_TOKDINoSpacing
.1f4d	48		pha				pha
.1f4e	20 f7 1f	jsr $1ff7			jsr 	TOKDSpacing
.1f51	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1f54	68		pla				pla
.1f55					_TOKDINoSpacing:
.1f55	20 f7 1e	jsr $1ef7			jsr 	TOKDOutput
.1f58	20 ee 1e	jsr $1eee			jsr 	TOKDGet 					; get next token
.1f5b	c9 7c		cmp #$7c			cmp 	#$7C
.1f5d	90 d1		bcc $1f30			bcc 	_TOKDLoop
.1f5f	f0 12		beq $1f73			beq 	_TOKDIExit 					; it's a number, no tail.
.1f61	4a		lsr a				lsr 	a 							; string ?
.1f62	90 07		bcc $1f6b			bcc 	_TOKDICheckArray
.1f64	48		pha				pha
.1f65	a9 24		lda #$24			lda 	#"$"
.1f67	20 f7 1e	jsr $1ef7			jsr 	TOKDOutput
.1f6a	68		pla				pla
.1f6b					_TOKDICheckArray:
.1f6b	4a		lsr a				lsr 	a 							; array ?
.1f6c	90 05		bcc $1f73			bcc 	_TOKDIExit
.1f6e	a9 28		lda #$28			lda 	#"("
.1f70	20 f7 1e	jsr $1ef7			jsr 	TOKDOutput
.1f73					_TOKDIExit:
.1f73	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1f74					TOKDInteger:
.1f74	5a		phy				phy 								; save base
.1f75	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1f77	20 53 32	jsr $3253			jsr 	IFloatSetByte
.1f7a					_TOKDILoop:
.1f7a	b2 26		lda ($26)			lda 	(zTemp2) 					; followed by a 00-3F
.1f7c	c9 40		cmp #$40			cmp 	#$40
.1f7e	b0 1d		bcs $1f9d			bcs 	_TOKDIHaveInteger
.1f80	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1f82	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.1f85	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.1f88	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.1f8b	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.1f8e	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.1f91	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.1f94	20 ee 1e	jsr $1eee			jsr 	TOKDGet 					; OR byte in.
.1f97	05 08		ora $08				ora 	IFR0+IM0
.1f99	85 08		sta $08				sta 	IFR0+IM0
.1f9b	80 dd		bra $1f7a			bra 	_TOKDILoop
.1f9d					_TOKDIHaveInteger:
.1f9d	7a		ply				ply 								; restore base
.1f9e	98		tya				tya 								; base in A
.1f9f	20 f3 2f	jsr $2ff3			jsr 	IFloatIntegerToStringR0
.1fa2	86 22		stx $22				stx 	zTemp0
.1fa4	84 23		sty $23				sty 	zTemp0+1
.1fa6	b2 22		lda ($22)			lda 	(zTemp0)
.1fa8	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.1faa	b1 22		lda ($22),y			lda 	(zTemp0),y
.1fac	20 f7 1f	jsr $1ff7			jsr 	TOKDSpacing 				; check spacing okay.
.1faf					_TOKDOutput:
.1faf	b1 22		lda ($22),y			lda 	(zTemp0),y
.1fb1	20 f7 1e	jsr $1ef7			jsr 	TOKDOutput
.1fb4	c8		iny				iny
.1fb5	b1 22		lda ($22),y			lda 	(zTemp0),y
.1fb7	d0 f6		bne $1faf			bne 	_TOKDOutput
.1fb9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1fba					TOKDToken:
.1fba	a2 ba		ldx #$ba			ldx 	#StandardTokens & $FF 		; standard table
.1fbc	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.1fbe	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.1fc0	d0 07		bne $1fc9			bne 	_TOKDSearch
.1fc2	20 ee 1e	jsr $1eee			jsr 	TOKDGet 					; get next
.1fc5	a2 3a		ldx #$3a			ldx 	#AlternateTokens & $FF 		; alt table
.1fc7	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.1fc9					_TOKDSearch:
.1fc9	86 22		stx $22				stx 	zTemp0 						; put table in zTemp0
.1fcb	84 23		sty $23				sty 	zTemp0+1
.1fcd	aa		tax				tax 								; token ID in X.
.1fce					_TOKDFind:
.1fce	ca		dex				dex 								; reached the start
.1fcf	10 0d		bpl $1fde			bpl 	_TOKDFound
.1fd1	38		sec				sec 								; go to next entry
.1fd2	b2 22		lda ($22)			lda 	(zTemp0)
.1fd4	65 22		adc $22				adc 	zTemp0
.1fd6	85 22		sta $22				sta 	zTemp0
.1fd8	90 f4		bcc $1fce			bcc 	_TOKDFind
.1fda	e6 23		inc $23				inc 	zTemp0+1
.1fdc	80 f0		bra $1fce			bra 	_TOKDFind
.1fde					_TOKDFound:
.1fde	b2 22		lda ($22)			lda 	(zTemp0) 					; length to X
.1fe0	f0 14		beq $1ff6			beq 	_TOKDExit
.1fe2	aa		tax				tax
.1fe3	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1fe5	b1 22		lda ($22),y			lda 	(zTemp0),y 					; check spacing first character,
.1fe7	20 f7 1f	jsr $1ff7			jsr 	TOKDSpacing
.1fea					_TOKDOutput:
.1fea	b1 22		lda ($22),y			lda 	(zTemp0),y
.1fec	20 b0 23	jsr $23b0			jsr 	TOKToLower
.1fef	20 f7 1e	jsr $1ef7			jsr 	TOKDOutput
.1ff2	c8		iny				iny
.1ff3	ca		dex				dex
.1ff4	d0 f4		bne $1fea			bne 	_TOKDOutput
.1ff6					_TOKDExit:
.1ff6	60		rts				rts
.1ff7					TOKDSpacing:
.1ff7	20 c7 23	jsr $23c7			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1ffa	90 0d		bcc $2009			bcc 	TOKDSExit
.1ffc					TOKDSpaceLastAlpha:
.1ffc	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.1fff	20 c7 23	jsr $23c7			jsr 	TOKIsIdentifierElement
.2002	90 05		bcc $2009			bcc 	TOKDSExit
.2004	a9 20		lda #$20			lda 	#" " 						; we need a space.
.2006	20 f7 1e	jsr $1ef7			jsr 	TOKDOutput
.2009					TOKDSExit:
.2009	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.200a					PGMDeleteLine:
.200a	20 bd 20	jsr $20bd			jsr 	PGMEndProgram 				; end of program into zTemp0
.200d	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.200f	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.2012	85 25		sta $25				sta 	zTemp1+1
.2014					_PGMDLoop:
.2014	b2 24		lda ($24)			lda 	(zTemp1) 					; finished, not found ?
.2016	38		sec				sec
.2017	f0 3a		beq $2053			beq 	_PGMDExit
.2019	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.201b	b1 24		lda ($24),y			lda 	(zTemp1),y
.201d	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2020	d0 08		bne $202a			bne 	_PGMDNext
.2022	c8		iny				iny
.2023	b1 24		lda ($24),y			lda 	(zTemp1),y
.2025	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.2028	f0 0d		beq $2037			beq 	_PGMDDelete
.202a					_PGMDNext:
.202a	18		clc				clc
.202b	b2 24		lda ($24)			lda 	(zTemp1)
.202d	65 24		adc $24				adc 	zTemp1
.202f	85 24		sta $24				sta 	zTemp1
.2031	90 e1		bcc $2014			bcc 	_PGMDLoop
.2033	e6 25		inc $25				inc 	zTemp1+1
.2035	80 dd		bra $2014			bra 	_PGMDLoop
.2037					_PGMDDelete:
.2037	b2 24		lda ($24)			lda 	(zTemp1) 					; offset to next in Y
.2039	a8		tay				tay
.203a					_PGMDCopy:
.203a	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy down.
.203c	92 24		sta ($24)			sta 	(zTemp1)
.203e	a5 24		lda $24				lda 	zTemp1 						; reached the end ?
.2040	c5 22		cmp $22				cmp 	zTemp0
.2042	d0 07		bne $204b			bne 	_PGMDNext2
.2044	a5 25		lda $25				lda 	zTemp1+1
.2046	c5 23		cmp $23				cmp 	zTemp0+1
.2048	18		clc				clc
.2049	f0 08		beq $2053			beq 	_PGMDExit
.204b					_PGMDNext2:
.204b	e6 24		inc $24				inc 	zTemp1 						; advance pointer.
.204d	d0 eb		bne $203a			bne 	_PGMDCopy
.204f	e6 25		inc $25				inc 	zTemp1+1
.2051	80 e7		bra $203a			bra 	_PGMDCopy
.2053					_PGMDExit:
.2053	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.2054					PGMInsertLine:
.2054	20 bd 20	jsr $20bd			jsr 	PGMEndProgram 				; end of program into zTemp0
.2057	64 24		stz $24				stz 	zTemp1						; copy base address of code to zTemp1
.2059	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.205c	85 25		sta $25				sta 	zTemp1+1
.205e					_PGMILoop:
.205e	b2 24		lda ($24)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.2060	f0 1c		beq $207e			beq 	_PGMIInsert
.2062	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.2064	b1 24		lda ($24),y			lda 	(zTemp1),y
.2066	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2069	c8		iny				iny
.206a	b1 24		lda ($24),y			lda 	(zTemp1),y
.206c	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.206f	b0 0d		bcs $207e			bcs 	_PGMIInsert 				; insert here.
.2071	18		clc				clc
.2072	b2 24		lda ($24)			lda 	(zTemp1)
.2074	65 24		adc $24				adc 	zTemp1
.2076	85 24		sta $24				sta 	zTemp1
.2078	90 e4		bcc $205e			bcc 	_PGMILoop
.207a	e6 25		inc $25				inc 	zTemp1+1
.207c	80 e0		bra $205e			bra 	_PGMILoop
.207e					_PGMIInsert:
.207e	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.2081					_PGMIInsertLoop:
.2081	b2 22		lda ($22)			lda 	(zTemp0)
.2083	91 22		sta ($22),y			sta 	(zTemp0),y
.2085	a5 24		lda $24				lda 	zTemp1 						; reached insert point
.2087	c5 22		cmp $22				cmp 	zTemp0
.2089	d0 06		bne $2091			bne 	_PGMINext
.208b	a5 25		lda $25				lda 	zTemp1+1
.208d	c5 23		cmp $23				cmp 	zTemp0+1
.208f	f0 0a		beq $209b			beq 	_PGMIInserted
.2091					_PGMINext:
.2091	a5 22		lda $22				lda 	zTemp0
.2093	d0 02		bne $2097			bne 	_PGMINoBorrow
.2095	c6 23		dec $23				dec 	zTemp0+1
.2097					_PGMINoBorrow:
.2097	c6 22		dec $22				dec 	zTemp0
.2099	80 e6		bra $2081			bra 	_PGMIInsertLoop
.209b					_PGMIInserted:
.209b	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.209d					_PGMICopyLoop:
.209d	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.20a0	91 24		sta ($24),y			sta 	(zTemp1),y
.20a2	c8		iny				iny
.20a3	cc 00 04	cpy $0400			cpy 	TOKLineSize
.20a6	d0 f5		bne $209d			bne 	_PGMICopyLoop
.20a8	18		clc				clc
.20a9	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.20aa					PGMSetBaseAddress:
.20aa	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.20ad	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.20b0	60		rts				rts
.20b1					PGMNewProgram:
.20b1	64 22		stz $22				stz 	zTemp0						; copy base address to zTemp0
.20b3	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.20b6	85 23		sta $23				sta 	zTemp0+1
.20b8	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.20ba	92 22		sta ($22)			sta 	(zTemp0)
.20bc	60		rts				rts
.20bd					PGMEndProgram:
.20bd	64 22		stz $22				stz 	zTemp0 						; copy base address to zTemp0
.20bf	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.20c2	85 23		sta $23				sta 	zTemp0+1
.20c4					_PGMEPLoop:
.20c4	b2 22		lda ($22)			lda 	(zTemp0) 					; reached end ?
.20c6	f0 0b		beq $20d3			beq 	_PGMEPExit
.20c8	18		clc				clc 								; no, advance to next
.20c9	65 22		adc $22				adc 	zTemp0
.20cb	85 22		sta $22				sta 	zTemp0
.20cd	90 f5		bcc $20c4			bcc 	_PGMEPLoop
.20cf	e6 23		inc $23				inc 	zTemp0+1
.20d1	80 f1		bra $20c4			bra 	_PGMEPLoop
.20d3					_PGMEPExit:
.20d3	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.20d4					TOKResetElement:
.20d4	9c 1c 05	stz $051c			stz 	TOKElement
.20d7	60		rts				rts
.20d8					TOKWriteElement:
.20d8	da		phx				phx
.20d9	ae 1c 05	ldx $051c			ldx 	TOKElement
.20dc	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.20df	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.20e2	fa		plx				plx
.20e3	ee 1c 05	inc $051c			inc 	TOKElement
.20e6	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.20e7					TOKTokeniseConstant:
.20e7	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.20e9	48		pha				pha 								; save on stack
.20ea	29 c0		and #$c0			and 	#$C0
.20ec	05 09		ora $09				ora 	IFR0+IM1
.20ee	05 0a		ora $0a				ora 	IFR0+IM2
.20f0	f0 10		beq $2102			beq 	_TTCLess
.20f2	da		phx				phx
.20f3	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.20f5					_TTCShiftRight:
.20f5	46 0a		lsr $0a				lsr 	IFR0+IM2
.20f7	66 09		ror $09				ror 	IFR0+IM1
.20f9	66 08		ror $08				ror 	IFR0+IM0
.20fb	ca		dex				dex
.20fc	d0 f7		bne $20f5			bne 	_TTCShiftRight
.20fe	fa		plx				plx
.20ff	20 e7 20	jsr $20e7			jsr 	TOKTokeniseConstant
.2102					_TTCLess:
.2102	68		pla				pla
.2103	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.2105	20 a4 21	jsr $21a4			jsr 	TOKWriteA
.2108	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.2109					TOKTokeniseDecimals:
.2109	20 b7 21	jsr $21b7			jsr 	TOKGetNext 					; consume the .
.210c	20 34 23	jsr $2334			jsr 	TOKExtractInteger 			; pull an integer out as text.
.210f	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.2111	20 a4 21	jsr $21a4			jsr 	TOKWriteA
.2114	20 19 21	jsr $2119			jsr 	TOKOutputElementBuffer 		; then the buffer
.2117	18		clc				clc
.2118	60		rts				rts
.2119					TOKOutputElementBuffer:
.2119	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.211c	20 a4 21	jsr $21a4			jsr 	TOKWriteA
.211f	a8		tay				tay 								; put in Y
.2120	f0 0c		beq $212e			beq 	_TOEExit 					; exit if empty which is okay.
.2122	a2 01		ldx #$01			ldx 	#1
.2124					_TOELoop:
.2124	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.2127	20 a4 21	jsr $21a4			jsr 	TOKWriteA
.212a	e8		inx				inx
.212b	88		dey				dey
.212c	d0 f6		bne $2124			bne 	_TOELoop
.212e					_TOEExit:
.212e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.212f					TOKTokenise:
.212f	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.2132	8e 1c 06	stx $061c			stx 	TOKDataSource
.2135	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2137	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.213a	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.213c	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.213f	9c 01 04	stz $0401			stz 	TOKLineNumber
.2142	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.2145					_TOKMainLoop:
.2145	20 b3 21	jsr $21b3			jsr 	TOKGet 						; what follows.
.2148	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.214a	f0 4f		beq $219b			beq 	_TOKExit
.214c	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.214e	d0 05		bne $2155			bne 	_TOKElement
.2150	20 b7 21	jsr $21b7			jsr 	TOKGetNext
.2153	80 f0		bra $2145			bra 	_TOKMainLoop
.2155					_TOKElement:
.2155	20 bb 23	jsr $23bb			jsr 	TOKIsDigit 					; is it 0..9
.2158	90 0a		bcc $2164			bcc 	_TOKNotDigit
.215a	20 0b 23	jsr $230b			jsr 	TOKTokeniseInteger 			; get integer
.215d	b0 43		bcs $21a2			bcs 	_TOKFail 					; did it fail ?
.215f	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2162	80 e1		bra $2145			bra 	_TOKMainLoop
.2164					_TOKNotDigit:
.2164	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.2167	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.2169	d0 07		bne $2172			bne 	_TOKNotHex
.216b	20 0d 22	jsr $220d			jsr 	TOKTokeniseHexadecimal
.216e	b0 32		bcs $21a2			bcs 	_TOKFail
.2170	80 d3		bra $2145			bra 	_TOKMainLoop
.2172					_TOKNotHex:
.2172	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2174	d0 07		bne $217d			bne 	_TOKNotDecimal
.2176	20 09 21	jsr $2109			jsr 	TOKTokeniseDecimals
.2179	b0 27		bcs $21a2			bcs 	_TOKFail
.217b	80 c8		bra $2145			bra 	_TOKMainLoop
.217d					_TOKNotDecimal:
.217d	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.217f	d0 07		bne $2188			bne 	_TOKNotString
.2181	20 82 23	jsr $2382			jsr 	TOKTokeniseString
.2184	b0 1c		bcs $21a2			bcs 	_TOKFail
.2186	80 bd		bra $2145			bra 	_TOKMainLoop
.2188					_TOKNotString:
.2188	20 d8 23	jsr $23d8			jsr 	TOKIsAlpha 					; identifier ?
.218b	b0 07		bcs $2194			bcs 	_TOKIdentifier
.218d	20 48 23	jsr $2348			jsr 	TOKTokenisePunctuation 		; punctuation
.2190	b0 10		bcs $21a2			bcs 	_TOKFail
.2192	80 b1		bra $2145			bra 	_TOKMainLoop
.2194					_TOKIdentifier:
.2194	20 47 22	jsr $2247			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.2197	b0 09		bcs $21a2			bcs 	_TOKFail
.2199	80 aa		bra $2145			bra 	_TOKMainLoop
.219b					_TOKExit:
.219b	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.219d	20 a4 21	jsr $21a4			jsr 	TOKWriteA
.21a0	18		clc				clc									; return with carry set.
.21a1	60		rts				rts
.21a2					_TOKFail:
.21a2	38		sec				sec
.21a3	60		rts				rts
.21a4					TOKWriteA:
.21a4	da		phx				phx
.21a5	ae 00 04	ldx $0400			ldx 	TOKLineSize
.21a8	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.21ab	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.21ae	fa		plx				plx
.21af	ee 00 04	inc $0400			inc 	TOKLineSize
.21b2	60		rts				rts
.21b3					TOKGet:
.21b3	18		clc				clc
.21b4	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.21b7					TOKGetNext:
.21b7	38		sec				sec
.21b8	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.21bb					TOKFindToken:
.21bb	a2 ba		ldx #$ba			ldx 	#StandardTokens & $FF 		; do this table
.21bd	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.21bf	20 d7 21	jsr $21d7			jsr 	TOKFindTokenXY 				; find it, or not
.21c2	b0 0d		bcs $21d1			bcs 	_TOKFound1
.21c4	a2 3a		ldx #$3a			ldx 	#AlternateTokens & $FF 		; do the alternate table
.21c6	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.21c8	20 d7 21	jsr $21d7			jsr 	TOKFindTokenXY 				; find it, or not
.21cb	90 08		bcc $21d5			bcc 	_TOKFTFail 					; not ....
.21cd	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.21cf	38		sec				sec
.21d0	60		rts				rts
.21d1					_TOKFound1:
.21d1	a2 00		ldx #$00			ldx 	#0
.21d3	38		sec				sec
.21d4	60		rts				rts
.21d5					_TOKFTFail
.21d5	18		clc				clc
.21d6	60		rts				rts
.21d7					TOKFindTokenXY:
.21d7	86 22		stx $22				stx 	zTemp0 						; save token table address
.21d9	84 23		sty $23				sty 	zTemp0+1
.21db	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.21dd	8d 1f 06	sta $061f			sta 	TOKCurrent
.21e0					_TOKFindLoop:
.21e0	b2 22		lda ($22)			lda 	(zTemp0) 					; get token length from table
.21e2	18		clc				clc 		 						; clear carry in case of fail
.21e3	30 17		bmi $21fc			bmi 	_TOKExit 					; end of table, fail, so return CC.
.21e5	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.21e8	d0 13		bne $21fd			bne 	_TOKNext 					; different, try next.
.21ea	aa		tax				tax 								; number of chars to compare.
.21eb	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.21ed					_TOKCompare:
.21ed	b1 22		lda ($22),y			lda 	(zTemp0),y 					; compare the characters
.21ef	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.21f2	d0 09		bne $21fd			bne 	_TOKNext 					; different ? try next
.21f4	c8		iny				iny 								; compare next two
.21f5	ca		dex				dex
.21f6	d0 f5		bne $21ed			bne 	_TOKCompare 				; until done X characters.
.21f8	38		sec				sec
.21f9	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.21fc					_TOKExit:
.21fc	60		rts				rts
.21fd					_TOKNext:
.21fd	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.2200	38		sec				sec 								; add length+1 to ptr
.2201	b2 22		lda ($22)			lda 	(zTemp0)
.2203	65 22		adc $22				adc 	zTemp0
.2205	85 22		sta $22				sta 	zTemp0
.2207	90 d7		bcc $21e0			bcc 	_TOKFindLoop
.2209	e6 23		inc $23				inc 	zTemp0+1
.220b	80 d3		bra $21e0			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.220d					TOKTokeniseHexadecimal:
.220d	20 b7 21	jsr $21b7			jsr 	TOKGetNext 					; consume the $
.2210	a2 08		ldx #$08			ldx 	#IFR0
.2212	20 51 32	jsr $3251			jsr 	IFloatSetZero 				; set R0 = 0
.2215					_TTHLoop:
.2215	20 b3 21	jsr $21b3			jsr 	TOKGet 						; keep getting and copying while numeric.
.2218	20 e5 23	jsr $23e5			jsr 	TOKIsHexadecimal
.221b	90 20		bcc $223d			bcc 	_TTHDone
.221d	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.221f	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.2222	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.2225	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.2228	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.222b	20 b7 21	jsr $21b7			jsr 	TOKGetNext
.222e	38		sec				sec 								; convert to decimal.
.222f	e9 30		sbc #$30			sbc 	#48
.2231	c9 0a		cmp #$0a			cmp 	#10
.2233	90 02		bcc $2237			bcc 	_TTHNotAlpha
.2235	e9 07		sbc #$07			sbc 	#7
.2237					_TTHNotAlpha:
.2237	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2239	85 08		sta $08				sta 	IFR0+IM0
.223b	80 d8		bra $2215			bra 	_TTHLoop
.223d					_TTHDone:
.223d	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.223f	20 a4 21	jsr $21a4			jsr 	TOKWriteA
.2242	20 e7 20	jsr $20e7			jsr 	TOKTokeniseConstant 		; write integer out.
.2245	18		clc				clc
.2246	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2247					TOKTokeniseIdentifier:
.2247	20 d4 20	jsr $20d4			jsr 	TOKResetElement 			; extract an identifier
.224a					_TOKGetIdentifier:
.224a	20 b3 21	jsr $21b3			jsr 	TOKGet
.224d	20 a5 23	jsr $23a5			jsr 	TOKToUpper
.2250	20 c7 23	jsr $23c7			jsr 	TOKIsIdentifierElement
.2253	90 08		bcc $225d			bcc 	_TOKEndIdent
.2255	20 d8 20	jsr $20d8			jsr		TOKWriteElement
.2258	20 b7 21	jsr $21b7			jsr 	TOKGetNext
.225b	80 ed		bra $224a			bra 	_TOKGetIdentifier
.225d					_TOKEndIdent:
.225d	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.225f	d0 06		bne $2267			bne 	_TOKNotString
.2261	20 d8 20	jsr $20d8			jsr 	TOKWriteElement 			; add it
.2264	20 b7 21	jsr $21b7			jsr 	TOKGetNext 					; consume it
.2267					_TOKNotString:
.2267	20 b3 21	jsr $21b3			jsr 	TOKGet 						; finally check for (
.226a	c9 28		cmp #$28			cmp 	#"("
.226c	d0 06		bne $2274			bne 	_TOKNoArray
.226e	20 d8 20	jsr $20d8			jsr 	TOKWriteElement 			; add it
.2271	20 b7 21	jsr $21b7			jsr 	TOKGetNext 					; consume it
.2274					_TOKNoArray:
.2274	20 bb 21	jsr $21bb			jsr 	TOKFindToken 				; find it
.2277	90 18		bcc $2291			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2279	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.227b	f0 0f		beq $228c			beq 	_TOKComment 				; yes, do comment code.
.227d	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.227f	d0 06		bne $2287			bne 	_TOKNoShift
.2281	48		pha				pha 								; write the shift.
.2282	8a		txa				txa
.2283	20 a4 21	jsr $21a4			jsr 	TOKWriteA
.2286	68		pla				pla
.2287					_TOKNoShift:
.2287	20 a4 21	jsr $21a4			jsr 	TOKWriteA 					; write the main token.
.228a	18		clc				clc
.228b	60		rts				rts
.228c					_TOKComment:
.228c	20 d8 22	jsr $22d8			jsr 	TOKDoComment
.228f	18		clc				clc
.2290	60		rts				rts
.2291					_TOKIsVariable:
.2291	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.2293					_TOKOutputBuffer:
.2293	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.2296	20 bf 22	jsr $22bf			jsr 	TOKTranslateIdentifier
.2299	20 a4 21	jsr $21a4			jsr 	TOKWriteA
.229c	e8		inx				inx
.229d	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.22a0	20 c7 23	jsr $23c7			jsr 	TOKIsIdentifierElement
.22a3	b0 ee		bcs $2293			bcs 	_TOKOutputBuffer
.22a5	a8		tay				tay 								; last char in Y
.22a6	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.22a8	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.22aa	f0 0e		beq $22ba			beq 	_TOKIVExit
.22ac	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.22ae	d0 04		bne $22b4			bne 	_TOKIVCheckArray 			; no, check for (
.22b0	1a		inc a				inc 	a 							; token is $7D
.22b1	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.22b4					_TOKIVCheckArray:
.22b4	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.22b6	d0 02		bne $22ba			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.22b8	1a		inc a				inc 	a
.22b9	1a		inc a				inc 	a
.22ba					_TOKIVExit:
.22ba	20 a4 21	jsr $21a4			jsr 	TOKWriteA 					; ending token
.22bd	18		clc				clc
.22be	60		rts				rts
.22bf					TOKTranslateIdentifier:
.22bf	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.22c1	f0 0f		beq $22d2			beq 	_TTI64
.22c3	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.22c5	f0 0e		beq $22d5			beq 	_TTI65
.22c7	38		sec				sec
.22c8	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.22ca	10 03		bpl $22cf			bpl 	_TTIExit
.22cc	18		clc				clc 								; map 09 onto 26-35
.22cd	69 2b		adc #$2b			adc 	#"A"-"0"+26
.22cf					_TTIExit:
.22cf	09 40		ora #$40			ora 	#$40 						; correct range.
.22d1	60		rts				rts
.22d2	a9 64		lda #$64	_TTI64:	lda 	#$64
.22d4	60		rts				rts
.22d5	a9 65		lda #$65	_TTI65:	lda 	#$65
.22d7	60		rts				rts
.22d8					TOKDoComment:
.22d8	20 a4 21	jsr $21a4			jsr 	TOKWriteA					; output the token.
.22db					_TOKSkipSpaces:
.22db	20 b3 21	jsr $21b3			jsr 	TOKGet 						; skip over spaces
.22de	c9 20		cmp #$20			cmp 	#' '
.22e0	d0 05		bne $22e7			bne 	_TOKEndSpaces
.22e2	20 b7 21	jsr $21b7			jsr 	TOKGetNext
.22e5	80 f4		bra $22db			bra 	_TOKSkipSpaces
.22e7					_TOKEndSpaces:
.22e7	48		pha				pha 								; save it
.22e8	68		pla				pla
.22e9	f0 04		beq $22ef			beq 	_TOKDCExit 					; end of line.
.22eb	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.22ed	d0 01		bne $22f0			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.22ef					_TOKDCExit:
.22ef	60		rts				rts
.22f0					_TOKDCDoLine:
.22f0	20 d4 20	jsr $20d4			jsr 	TOKResetElement 			; start getting the string
.22f3					_TOKDCLoop:
.22f3	20 b3 21	jsr $21b3			jsr 	TOKGet 						; check EOL
.22f6	c9 00		cmp #$00			cmp 	#0
.22f8	f0 08		beq $2302			beq 	_TOKDCEndComment
.22fa	20 b7 21	jsr $21b7			jsr 	TOKGetNext 					; get and consume
.22fd	20 d8 20	jsr $20d8			jsr 	TOKWriteElement
.2300	80 f1		bra $22f3			bra 	_TOKDCLoop
.2302					_TOKDCEndComment:
.2302	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2304	20 a4 21	jsr $21a4			jsr 	TOKWriteA
.2307	20 19 21	jsr $2119			jsr 	TOKOutputElementBuffer
.230a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.230b					TOKTokeniseInteger:
.230b	20 34 23	jsr $2334			jsr 	TOKExtractInteger 			; pull an integer out as text.
.230e	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.2310	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2312	ad 1c 05	lda $051c			lda		TOKElement
.2315	20 b5 30	jsr $30b5			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.2318	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.231b	f0 12		beq $232f			beq 	_TOKNotLineNumber
.231d	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.231f	d0 0c		bne $232d			bne 	_TOKBadLineNumeber
.2321	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2323	8d 01 04	sta $0401			sta 	TOKLineNumber
.2326	a5 09		lda $09				lda 	IFR0+IM1
.2328	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.232b	18		clc				clc
.232c	60		rts				rts
.232d					_TOKBadLineNumeber:
.232d	38		sec				sec
.232e	60		rts				rts
.232f					_TOKNotLineNumber:
.232f	20 e7 20	jsr $20e7			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2332	18		clc				clc
.2333	60		rts				rts
.2334					TOKExtractInteger:
.2334	20 d4 20	jsr $20d4			jsr 	TOKResetElement 			; restart
.2337					_TTILoop:
.2337	20 b3 21	jsr $21b3			jsr 	TOKGet 						; keep getting and copying while numeric.
.233a	20 bb 23	jsr $23bb			jsr 	TOKIsDigit
.233d	90 08		bcc $2347			bcc 	_TOKEIExit
.233f	20 d8 20	jsr $20d8			jsr 	TOKWriteElement
.2342	20 b7 21	jsr $21b7			jsr 	TOKGetNext
.2345	80 f0		bra $2337			bra 	_TTILoop
.2347					_TOKEIExit:
.2347	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.2348					TOKTokenisePunctuation:
.2348	20 d4 20	jsr $20d4			jsr 	TOKResetElement 			; copy first punctuation character into element.
.234b	20 b7 21	jsr $21b7			jsr 	TOKGetNext
.234e	20 d8 20	jsr $20d8			jsr 	TOKWriteElement
.2351	20 b3 21	jsr $21b3			jsr 	TOKGet 						; what follows ?
.2354	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.2356	f0 10		beq $2368			beq 	_TTPOne
.2358	20 cf 23	jsr $23cf			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.235b	b0 0b		bcs $2368			bcs 	_TTPOne 					; these speed things up a bit.
.235d	20 d8 20	jsr $20d8			jsr 	TOKWriteElement 			; this is what we will search for.
.2360	20 bb 21	jsr $21bb			jsr 	TOKFindToken
.2363	b0 0a		bcs $236f			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.2365	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.2368					_TTPOne:
.2368	20 bb 21	jsr $21bb			jsr 	TOKFindToken 				; look for one character punctuation
.236b	b0 07		bcs $2374			bcs 	_TTPOutputExit 				; we found it
.236d	38		sec				sec 								; not recognised.
.236e	60		rts				rts
.236f					_TTPConsumeExit:
.236f	48		pha				pha
.2370	20 b7 21	jsr $21b7			jsr 	TOKGetNext 					; get the 2nd char out.
.2373	68		pla				pla
.2374					_TTPOutputExit:
.2374	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.2376	f0 05		beq $237d			beq 	_TTPComment
.2378	20 a4 21	jsr $21a4			jsr  	TOKWriteA 					; write token out
.237b	18		clc				clc
.237c	60		rts				rts
.237d					_TTPComment:
.237d	20 d8 22	jsr $22d8			jsr 	TOKDoComment
.2380	18		clc				clc
.2381	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2382					TOKTokeniseString:
.2382	20 b7 21	jsr $21b7			jsr 	TOKGetNext 					; consume the "
.2385	20 d4 20	jsr $20d4			jsr 	TOKResetElement 			; start getting the string
.2388					_TOKTSLoop:
.2388	20 b3 21	jsr $21b3			jsr 	TOKGet 						; check EOL
.238b	c9 00		cmp #$00			cmp 	#0
.238d	f0 0c		beq $239b			beq 	_TOKTSExit
.238f	20 b7 21	jsr $21b7			jsr 	TOKGetNext 					; get and consume
.2392	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2394	f0 05		beq $239b			beq 	_TOKTSExit
.2396	20 d8 20	jsr $20d8			jsr 	TOKWriteElement
.2399	80 ed		bra $2388			bra 	_TOKTSLoop
.239b					_TOKTSExit:
.239b	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.239d	20 a4 21	jsr $21a4			jsr 	TOKWriteA
.23a0	20 19 21	jsr $2119			jsr 	TOKOutputElementBuffer
.23a3	18		clc				clc
.23a4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.23a5					TOKToUpper:
.23a5	c9 61		cmp #$61			cmp 	#"a"
.23a7	90 06		bcc $23af			bcc 	_TTUNotLower
.23a9	c9 7b		cmp #$7b			cmp 	#"z"+1
.23ab	b0 02		bcs $23af			bcs 	_TTUNotLower
.23ad	49 20		eor #$20			eor 	#$20
.23af					_TTUNotLower:
.23af	60		rts				rts
.23b0					TOKToLower:
.23b0	c9 41		cmp #$41			cmp 	#"A"
.23b2	90 06		bcc $23ba			bcc 	_TTUNotUpper
.23b4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.23b6	b0 02		bcs $23ba			bcs 	_TTUNotUpper
.23b8	49 20		eor #$20			eor 	#$20
.23ba					_TTUNotUpper:
.23ba	60		rts				rts
.23bb					TOKIsDigit:
.23bb	c9 30		cmp #$30			cmp 	#"0"
.23bd	90 06		bcc $23c5			bcc 	TOKFail
.23bf	c9 3a		cmp #$3a			cmp 	#"9"+1
.23c1	b0 02		bcs $23c5			bcs 	TOKFail
.23c3					TOKSucceed:
.23c3	38		sec				sec
.23c4	60		rts				rts
.23c5					TOKFail:
.23c5	18		clc				clc
.23c6	60		rts				rts
.23c7					TOKIsIdentifierElement:
.23c7	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.23c9	f0 f8		beq $23c3			beq 	TOKSucceed
.23cb	c9 5f		cmp #$5f			cmp 	#"_"
.23cd	f0 f4		beq $23c3			beq 	TOKSucceed 					; else fall through to alphanumeric
.23cf					TOKIsAlphaNumeric:
.23cf	20 d8 23	jsr $23d8			jsr 	TOKIsAlpha
.23d2	b0 ef		bcs $23c3			bcs 	TOKSucceed
.23d4	20 bb 23	jsr $23bb			jsr 	TOKIsDigit
.23d7	60		rts				rts
.23d8					TOKIsAlpha:
.23d8	20 a5 23	jsr $23a5			jsr 	TOKToUpper
.23db	c9 41		cmp #$41			cmp 	#"A"
.23dd	90 e6		bcc $23c5			bcc 	TOKFail
.23df	c9 5b		cmp #$5b			cmp 	#"Z"+1
.23e1	b0 e2		bcs $23c5			bcs 	TOKFail
.23e3	80 de		bra $23c3			bra 	TOKSucceed
.23e5					TOKIsHexadecimal:
.23e5	20 bb 23	jsr $23bb			jsr		TOKIsDigit
.23e8	b0 d9		bcs $23c3			bcs 	TOKSucceed
.23ea	20 d8 23	jsr $23d8			jsr 	TOKIsAlpha
.23ed	90 d6		bcc $23c5			bcc 	TOKFail
.23ef	c9 47		cmp #$47			cmp 	#"F"+1
.23f1	b0 d2		bcs $23c5			bcs 	TOKFail
.23f3	80 ce		bra $23c3			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.23f5					Command_CALL:
.23f5	a9 42		lda #$42			lda 	#STK_CALL
.23f7	20 c3 28	jsr $28c3			jsr 	StackOpen
.23fa	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.23fc	29 c0		and #$c0			and 	#$C0
.23fe	c9 40		cmp #$40			cmp 	#$40
.2400	d0 29		bne $242b			bne 	_CCSyntax
.2402	20 94 2b	jsr $2b94			jsr 	VARGetInfo 					; get the information
.2405	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 				; check right bracket follows.
.2408	20 46 2b	jsr $2b46			jsr 	VARFind 					; exists ?
.240b	90 21		bcc $242e			bcc 	_CCUnknown
.240d	86 23		stx $23				stx 	zTemp0+1 					; save target in XA
.240f	85 22		sta $22				sta 	zTemp0
.2411	20 f7 28	jsr $28f7			jsr 	STKSaveCodePosition 		; save return address on stack.
.2414	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2416	b1 22		lda ($22),y			lda 	(zTemp0),y
.2418	c9 ff		cmp #$ff			cmp 	#$FF
.241a	d0 12		bne $242e			bne 	_CCUnknown
.241c	88		dey				dey 								; get Y offset to stack
.241d	b1 22		lda ($22),y			lda 	(zTemp0),y
.241f	48		pha				pha
.2420	88		dey				dey 								; get address
.2421	b1 22		lda ($22),y			lda 	(zTemp0),y
.2423	85 19		sta $19				sta 	codePtr+1
.2425	b2 22		lda ($22)			lda 	(zTemp0)
.2427	85 18		sta $18				sta 	codePtr
.2429	7a		ply				ply 								; restore Y
.242a	60		rts				rts
.242b					_CCSyntax:
.242b	4c f5 26	jmp $26f5		jmp	ErrorV_syntax
.242e					_CCUnknown:
.242e	4c 6a 28	jmp $286a		jmp	ErrorV_unknown
.2431					Command_ENDPROC:
.2431	a9 42		lda #$42			lda 	#STK_CALL
.2433	20 ef 28	jsr $28ef			jsr 	StackCheckFrame
.2436	20 09 29	jsr $2909			jsr 	STKLoadCodePosition 		; return
.2439	20 e1 28	jsr $28e1			jsr 	StackClose
.243c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.243d					Command_DO:
.243d	a9 22		lda #$22			lda 	#STK_DO
.243f	20 c3 28	jsr $28c3			jsr 	StackOpen
.2442	20 f7 28	jsr $28f7			jsr 	STKSaveCodePosition 		; save loop position
.2445	60		rts				rts
.2446					Command_EXIT:
.2446	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.2448	20 ef 28	jsr $28ef			jsr 	StackCheckFrame
.244b	20 e1 28	jsr $28e1			jsr 	StackClose 					; close it
.244e	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2450	aa		tax				tax
.2451	20 05 26	jsr $2605			jsr 	ScanForward
.2454	60		rts				rts
.2455					Command_LOOP:
.2455	a9 22		lda #$22			lda 	#STK_DO
.2457	20 ef 28	jsr $28ef			jsr 	StackCheckFrame
.245a	20 09 29	jsr $2909			jsr 	STKLoadCodePosition 		; loop back
.245d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.245e					Command_FOR:
.245e	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2460	20 c3 28	jsr $28c3			jsr 	StackOpen
.2463	20 bf 12	jsr $12bf			jsr 	CommandLET 					; do "I = 1" bit
.2466	5a		phy				phy 								; save variable address to +4,+5
.2467	a0 04		ldy #$04			ldy 	#4
.2469	a5 22		lda $22				lda 	zTemp0
.246b	91 2a		sta ($2a),y			sta 	(basicStack),y
.246d	c8		iny				iny
.246e	a5 23		lda $23				lda 	zTemp0+1
.2470	91 2a		sta ($2a),y			sta 	(basicStack),y
.2472	7a		ply				ply
.2473	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2475	20 ba 28	jsr $28ba			jsr 	ERRCheckA
.2478	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.247b	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.247d	a2 08		ldx #$08			ldx 	#IFR0
.247f	20 d4 24	jsr $24d4			jsr 	CFSaveR0X
.2482	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2484	c9 91		cmp #$91			cmp 	#PR_STEP
.2486	d0 06		bne $248e			bne 	_CFStep1
.2488	c8		iny				iny 								; consume step
.2489	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; evaluate STEP
.248c	80 24		bra $24b2			bra 	_CFWriteStep
.248e					_CFStep1:
.248e	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2490	a9 01		lda #$01			lda 	#1
.2492	20 53 32	jsr $3253			jsr 	IFloatSetByte
.2495	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2496	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2498	b1 2a		lda ($2a),y			lda 	(basicStack),y
.249a	85 22		sta $22				sta 	zTemp0
.249c	c8		iny				iny
.249d	b1 2a		lda ($2a),y			lda 	(basicStack),y
.249f	85 23		sta $23				sta 	zTemp0+1
.24a1	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.24a3	b1 22		lda ($22),y			lda 	(zTemp0),y
.24a5	d0 0a		bne $24b1			bne 	_CFNotOptimised
.24a7	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.24a9	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24ab	d0 04		bne $24b1			bne 	_CFNotOptimised
.24ad	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.24af	85 0b		sta $0b				sta 	IFR0+IExp
.24b1					_CFNotOptimised:
.24b1	7a		ply				ply
.24b2					_CFWriteStep:
.24b2	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.24b4	a9 06		lda #$06			lda 	#6
.24b6	20 d4 24	jsr $24d4			jsr 	CFSaveR0X
.24b9	20 f7 28	jsr $28f7			jsr 	STKSaveCodePosition 		; save loop position
.24bc	60		rts				rts
.24bd					CFLoadR0X:
.24bd	5a		phy				phy
.24be	a8		tay				tay
.24bf	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24c1	95 00		sta $00,x			sta 	IM0,x
.24c3	c8		iny				iny
.24c4	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24c6	95 01		sta $01,x			sta 	IM1,x
.24c8	c8		iny				iny
.24c9	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24cb	95 02		sta $02,x			sta 	IM2,x
.24cd	c8		iny				iny
.24ce	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24d0	95 03		sta $03,x			sta 	IExp,x
.24d2	7a		ply				ply
.24d3	60		rts				rts
.24d4					CFSaveR0X:
.24d4	5a		phy				phy
.24d5	a8		tay				tay
.24d6	b5 00		lda $00,x			lda 	IM0,x
.24d8	91 2a		sta ($2a),y			sta 	(basicStack),y
.24da	c8		iny				iny
.24db	b5 01		lda $01,x			lda 	IM1,x
.24dd	91 2a		sta ($2a),y			sta 	(basicStack),y
.24df	c8		iny				iny
.24e0	b5 02		lda $02,x			lda 	IM2,x
.24e2	91 2a		sta ($2a),y			sta 	(basicStack),y
.24e4	c8		iny				iny
.24e5	b5 03		lda $03,x			lda 	IExp,x
.24e7	91 2a		sta ($2a),y			sta 	(basicStack),y
.24e9	7a		ply				ply
.24ea	60		rts				rts
.24eb					Command_NEXT:
.24eb	a9 37		lda #$37			lda 	#STK_FOR
.24ed	20 ef 28	jsr $28ef			jsr 	StackCheckFrame
.24f0	5a		phy				phy 								; check optimised loop
.24f1	a0 09		ldy #$09			ldy 	#9
.24f3	b1 2a		lda ($2a),y			lda 	(basicStack),y
.24f5	7a		ply				ply
.24f6	0a		asl a				asl 	a
.24f7	b0 35		bcs $252e			bcs 	_CNOptimised
.24f9	20 66 25	jsr $2566			jsr 	_CNLoadValue 				; load index value to R0.
.24fc	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.24fe	a9 06		lda #$06			lda 	#6
.2500	20 bd 24	jsr $24bd			jsr 	CFLoadR0X
.2503	20 49 2c	jsr $2c49			jsr 	IFloatAdd 					; add them together and write back.
.2506	20 89 25	jsr $2589			jsr 	_CNSaveValue
.2509	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.250b	a2 0c		ldx #$0c			ldx 	#IFR1
.250d	20 bd 24	jsr $24bd			jsr 	CFLoadR0X
.2510	20 20 2f	jsr $2f20			jsr 	IFloatCompare 				; compare terminal vs current
.2513	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2515	20 4a 32	jsr $324a			jsr 	IFloatCheckZero
.2518	f0 10		beq $252a			beq 	_CNLoopBack
.251a	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.251c	5a		phy				phy
.251d	a0 09		ldy #$09			ldy 	#6+IExp
.251f	51 2a		eor ($2a),y			eor 	(basicStack),y
.2521	7a		ply				ply
.2522	29 40		and #$40			and 	#IFSign
.2524	f0 04		beq $252a			beq 	_CNLoopBack
.2526					_CNExitLoop:
.2526	20 e1 28	jsr $28e1			jsr 	StackClose		 			; return
.2529	60		rts				rts
.252a					_CNLoopBack:
.252a	20 09 29	jsr $2909			jsr 	STKLoadCodePosition 		; loop back
.252d	60		rts				rts
.252e					_CNOptimised:
.252e	5a		phy				phy
.252f	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2531	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2533	85 26		sta $26				sta 	zTemp2
.2535	c8		iny				iny
.2536	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2538	85 27		sta $27				sta 	zTemp2+1
.253a	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.253c					_CNIncrement:
.253c	c8		iny				iny
.253d	b1 26		lda ($26),y			lda 	(zTemp2),y
.253f	1a		inc a				inc 	a
.2540	91 26		sta ($26),y			sta 	(zTemp2),y
.2542	f0 f8		beq $253c			beq 	_CNIncrement
.2544	18		clc				clc 								; point zTemp0 to terminal value
.2545	a5 2a		lda $2a				lda 	basicStack
.2547	69 0a		adc #$0a			adc 	#10
.2549	85 22		sta $22				sta 	zTemp0
.254b	a5 2b		lda $2b				lda 	basicStack+1
.254d	69 00		adc #$00			adc 	#0
.254f	85 23		sta $23				sta 	zTemp0+1
.2551	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2553	18		clc				clc 								; borrow 1, we want > not >=
.2554	b2 26		lda ($26)			lda 	(zTemp2)
.2556	f2 22		sbc ($22)			sbc 	(zTemp0)
.2558	b1 26		lda ($26),y			lda 	(zTemp2),y
.255a	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.255c	c8		iny				iny
.255d	b1 26		lda ($26),y			lda 	(zTemp2),y
.255f	f1 22		sbc ($22),y			sbc 	(zTemp0),y
.2561	7a		ply				ply
.2562	b0 c2		bcs $2526			bcs 	_CNExitLoop
.2564	80 c4		bra $252a			bra 	_CNLoopBack
.2566					_CNLoadValue:
.2566	5a		phy				phy
.2567	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.2569	b1 2a		lda ($2a),y			lda 	(basicStack),y
.256b	85 26		sta $26				sta 	zTemp2
.256d	c8		iny				iny
.256e	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2570	85 27		sta $27				sta 	zTemp2+1
.2572	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2574	b1 26		lda ($26),y			lda 	(zTemp2),y
.2576	85 08		sta $08				sta 	IFR0+IM0
.2578	c8		iny				iny
.2579	b1 26		lda ($26),y			lda 	(zTemp2),y
.257b	85 09		sta $09				sta 	IFR0+IM1
.257d	c8		iny				iny
.257e	b1 26		lda ($26),y			lda 	(zTemp2),y
.2580	85 0a		sta $0a				sta 	IFR0+IM2
.2582	c8		iny				iny
.2583	b1 26		lda ($26),y			lda 	(zTemp2),y
.2585	85 0b		sta $0b				sta 	IFR0+IExp
.2587	7a		ply				ply
.2588	60		rts				rts
.2589					_CNSaveValue:
.2589	5a		phy				phy
.258a	a0 00		ldy #$00			ldy 	#0
.258c	a5 08		lda $08				lda 	IFR0+IM0
.258e	91 26		sta ($26),y			sta 	(zTemp2),y
.2590	c8		iny				iny
.2591	a5 09		lda $09				lda 	IFR0+IM1
.2593	91 26		sta ($26),y			sta 	(zTemp2),y
.2595	c8		iny				iny
.2596	a5 0a		lda $0a				lda 	IFR0+IM2
.2598	91 26		sta ($26),y			sta 	(zTemp2),y
.259a	c8		iny				iny
.259b	a5 0b		lda $0b				lda 	IFR0+IExp
.259d	91 26		sta ($26),y			sta 	(zTemp2),y
.259f	7a		ply				ply
.25a0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.25a1					Command_GOSUB:
.25a1	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; get line number
.25a4	a9 52		lda #$52			lda 	#STK_GOSUB
.25a6	20 c3 28	jsr $28c3			jsr 	StackOpen
.25a9	20 f7 28	jsr $28f7			jsr 	STKSaveCodePosition 		; save return address on stack.
.25ac	4c e0 11	jmp $11e0			jmp 	GotoR0
.25af					Command_RETURN:
.25af	a9 52		lda #$52			lda 	#STK_GOSUB
.25b1	20 ef 28	jsr $28ef			jsr 	StackCheckFrame
.25b4	20 09 29	jsr $2909			jsr 	STKLoadCodePosition 		; return
.25b7	20 e1 28	jsr $28e1			jsr 	StackClose
.25ba	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.25bb					IfCommand:
.25bb	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; Get the if test.
.25be	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.25c0	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.25c2	d0 0c		bne $25d0			bne 	_IfStructured 				; we still support it.
.25c4	c8		iny				iny 								; consume THEN
.25c5	a2 08		ldx #$08			ldx 	#IFR0
.25c7	20 4a 32	jsr $324a			jsr 	IFloatCheckZero 			; is it zero
.25ca	f0 01		beq $25cd			beq 	_IfFail 					; if fail, go to next line
.25cc	60		rts				rts 								; if THEN just continue
.25cd					_IfFail:
.25cd	4c d4 14	jmp $14d4			jmp 	RUNEndOfLine
.25d0					_IfStructured:
.25d0	20 4a 32	jsr $324a			jsr 	IFloatCheckZero 			; is it zero
.25d3	d0 07		bne $25dc			bne 	_IfExit 					; if not, then continue normally.
.25d5	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.25d7	a2 85		ldx #$85			ldx 	#PR_ENDIF
.25d9	20 05 26	jsr $2605			jsr 	ScanForward 				; and run from there
.25dc					_IfExit:
.25dc	60		rts				rts
.25dd					ElseCode:
.25dd	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.25df	aa		tax				tax 								; so just go to the structure exit
.25e0	20 05 26	jsr $2605			jsr 	ScanForward
.25e3	60		rts				rts
.25e4					EndIf:
.25e4	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.25e5					Command_REPEAT:
.25e5	a9 02		lda #$02			lda 	#STK_REPEAT
.25e7	20 c3 28	jsr $28c3			jsr 	StackOpen
.25ea	20 f7 28	jsr $28f7			jsr 	STKSaveCodePosition 		; save loop position
.25ed	60		rts				rts
.25ee					Command_UNTIL:
.25ee	a9 02		lda #$02			lda 	#STK_REPEAT
.25f0	20 ef 28	jsr $28ef			jsr 	StackCheckFrame
.25f3	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; work out the test
.25f6	a2 08		ldx #$08			ldx 	#IFR0
.25f8	20 4a 32	jsr $324a			jsr 	IFloatCheckZero 			; check if zero
.25fb	f0 04		beq $2601			beq 	_CULoopBack 				; if so keep looping
.25fd	20 e1 28	jsr $28e1			jsr 	StackClose		 			; return
.2600	60		rts				rts
.2601					_CULoopBack:
.2601	20 09 29	jsr $2909			jsr 	STKLoadCodePosition 		; loop back
.2604	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2605					ScanForward:
.2605	85 22		sta $22				sta 	zTemp0 						; save scan options in zTemp0
.2607	86 23		stx $23				stx 	zTemp0+1
.2609	64 24		stz $24				stz 	zTemp1 						; clear structure count.
.260b					_ScanForwardLoop:
.260b	a5 24		lda $24				lda 	zTemp1 						; if structure count non zero, don't check for end.
.260d	d0 0a		bne $2619			bne 	_ScanNoCheck
.260f	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2611	c5 22		cmp $22				cmp 	zTemp0
.2613	f0 49		beq $265e			beq 	_ScanExit
.2615	c5 23		cmp $23				cmp 	zTemp0+1
.2617	f0 45		beq $265e			beq 	_ScanExit
.2619					_ScanNoCheck:
.2619	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.261b	c8		iny				iny
.261c	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.261e	f0 37		beq $2657			beq		_ScanDataItem
.2620	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2622	f0 33		beq $2657			beq 	_ScanDataItem
.2624	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2626	f0 1b		beq $2643			beq 	_ScanNextLine
.2628	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.262a	d0 01		bne $262d			bne 	_ScanNoShift
.262c	c8		iny				iny
.262d					_ScanNoShift:
.262d	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.262f	b0 da		bcs $260b			bcs 	_ScanForwardLoop
.2631	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2633	90 d6		bcc $260b			bcc 	_ScanForwardLoop
.2635	aa		tax				tax 								; access the table to get the adjustment.
.2636	18		clc				clc
.2637	a5 24		lda $24				lda 	zTemp1 						; add it to structure count.
.2639	7d 2e 1b	adc $1b2e,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.263c	85 24		sta $24				sta 	zTemp1
.263e	10 cb		bpl $260b			bpl		_ScanForwardLoop 			; error if -ve ?
.2640	4c 81 27	jmp $2781		jmp	ErrorV_structure
.2643					_ScanNextLine:
.2643	18		clc				clc	 								; forward to next line.
.2644	b2 18		lda ($18)			lda 	(codePtr)
.2646	65 18		adc $18				adc 	codePtr
.2648	85 18		sta $18				sta 	codePtr
.264a	90 02		bcc $264e			bcc 	_ScanNoCarry
.264c	e6 19		inc $19				inc 	codePtr+1
.264e					_ScanNoCarry:
.264e	a0 03		ldy #$03			ldy 	#3
.2650	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2652	d0 b7		bne $260b			bne 	_ScanForwardLoop
.2654	4c 81 27	jmp $2781		jmp	ErrorV_structure
.2657					_ScanDataItem:
.2657	98		tya				tya
.2658	38		sec				sec
.2659	71 18		adc ($18),y			adc 	(codePtr),y
.265b	a8		tay				tay
.265c	80 ad		bra $260b			bra 	_ScanForwardLoop
.265e					_ScanExit:
.265e	c8		iny				iny 								; consume final token.
.265f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2660					ScanProcedures:
.2660	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.2662	48		pha				pha
.2663	a5 19		lda $19				lda 	codePtr+1
.2665	48		pha				pha
.2666	5a		phy				phy
.2667	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.266a	85 19		sta $19				sta 	codePtr+1
.266c	64 18		stz $18				stz 	codePtr
.266e					_SPLoop:
.266e	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2670	f0 18		beq $268a			beq 	_SPExit
.2672	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2674	b1 18		lda ($18),y			lda 	(codePtr),y
.2676	c9 88		cmp #$88			cmp 	#PR_PROC
.2678	d0 03		bne $267d			bne 	_SPNext
.267a	20 92 26	jsr $2692			jsr 	_SPSetupRecord
.267d					_SPNext:
.267d	18		clc				clc 								; forward to next
.267e	b2 18		lda ($18)			lda 	(codePtr)
.2680	65 18		adc $18				adc 	codePtr
.2682	85 18		sta $18				sta 	codePtr
.2684	90 e8		bcc $266e			bcc 	_SPLoop
.2686	e6 19		inc $19				inc 	codePtr+1
.2688	80 e4		bra $266e			bra 	_SPLoop
.268a					_SPExit:
.268a	7a		ply				ply
.268b	68		pla				pla
.268c	85 19		sta $19				sta 	codePtr+1
.268e	68		pla				pla
.268f	85 18		sta $18				sta 	codePtr
.2691	60		rts				rts
.2692					_SPSetupRecord:
.2692	c8		iny				iny 								; check identifier follows
.2693	b1 18		lda ($18),y			lda 	(codePtr),y
.2695	29 c0		and #$c0			and 	#$C0
.2697	c9 40		cmp #$40			cmp 	#$40
.2699	d0 27		bne $26c2			bne 	_SPSyntax
.269b	20 94 2b	jsr $2b94			jsr 	VARGetInfo 					; get the information
.269e	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen 				; check right bracket follows.
.26a1	20 46 2b	jsr $2b46			jsr 	VARFind 					; already exists ?
.26a4	b0 1f		bcs $26c5			bcs 	_SPUsed 					; error !
.26a6	20 f2 2a	jsr $2af2			jsr 	VARCreate 					; create, XA points to the data.
.26a9	85 22		sta $22				sta 	zTemp0
.26ab	86 23		stx $23				stx 	zTemp0+1
.26ad	5a		phy				phy 								; save Y pos on stack
.26ae	a0 01		ldy #$01			ldy 	#1
.26b0	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.26b2	92 22		sta ($22)			sta 	(zTemp0)
.26b4	a5 19		lda $19				lda 	codePtr+1
.26b6	91 22		sta ($22),y			sta 	(zTemp0),y
.26b8	c8		iny				iny
.26b9	68		pla				pla
.26ba	91 22		sta ($22),y			sta 	(zTemp0),y
.26bc	c8		iny				iny
.26bd	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.26bf	91 22		sta ($22),y			sta 	(zTemp0),y
.26c1	60		rts				rts
.26c2					_SPSyntax:
.26c2	4c f5 26	jmp $26f5		jmp	ErrorV_syntax
.26c5					_SPUsed:
.26c5	4c 4c 28	jmp $284c		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.26c8					Command_WHILE:
.26c8	5a		phy				phy 								; save position of the test
.26c9	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; work out the while test.
.26cc	a2 08		ldx #$08			ldx 	#IFR0
.26ce	20 4a 32	jsr $324a			jsr 	IFloatCheckZero 			; check if zero
.26d1	f0 0e		beq $26e1			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.26d3	98		tya				tya 								; position *after* test.
.26d4	7a		ply				ply 								; restore position before test, at WHILE
.26d5	88		dey				dey 								; so we execute the WHILE command again.
.26d6	48		pha				pha 								; push after test on the stack
.26d7	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.26d9	20 c3 28	jsr $28c3			jsr 	StackOpen
.26dc	20 f7 28	jsr $28f7			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.26df	7a		ply				ply 								; restore the position *after* the test
.26e0	60		rts				rts
.26e1					_WHExitLoop:
.26e1	68		pla				pla 								; throw post loop position
.26e2	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.26e4	aa		tax				tax
.26e5	20 05 26	jsr $2605			jsr 	ScanForward
.26e8	60		rts				rts
.26e9					Command_WEND:
.26e9	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.26eb	20 ef 28	jsr $28ef			jsr 	StackCheckFrame
.26ee	20 09 29	jsr $2909			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.26f1	20 e1 28	jsr $28e1			jsr 	StackClose		 			; erase the frame
.26f4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.26f5					ErrorV_syntax:
.26f5	20 e2 29	jsr $29e2		jsr	ErrorHandler
>26f8	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2700	45 72 72 6f 72 00
.2706					ErrorV_range:
.2706	20 e2 29	jsr $29e2		jsr	ErrorHandler
>2709	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2711	52 61 6e 67 65 00
.2717					ErrorV_value:
.2717	20 e2 29	jsr $29e2		jsr	ErrorHandler
>271a	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2722	75 65 00
.2725					ErrorV_type:
.2725	20 e2 29	jsr $29e2		jsr	ErrorHandler
>2728	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2730	73 6d 61 74 63 68 00
.2737					ErrorV_unimplemented:
.2737	20 e2 29	jsr $29e2		jsr	ErrorHandler
>273a	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2742	6c 65 6d 65 6e 74 65 64 00
.274b					ErrorV_assert:
.274b	20 e2 29	jsr $29e2		jsr	ErrorHandler
>274e	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2756	46 61 69 6c 00
.275b					ErrorV_internal:
.275b	20 e2 29	jsr $29e2		jsr	ErrorHandler
>275e	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2766	6c 20 45 72 72 6f 72 00
.276e					ErrorV_divzero:
.276e	20 e2 29	jsr $29e2		jsr	ErrorHandler
>2771	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>2779	42 79 20 5a 65 72 6f 00
.2781					ErrorV_structure:
.2781	20 e2 29	jsr $29e2		jsr	ErrorHandler
>2784	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>278c	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2799					ErrorV_stop:
.2799	20 e2 29	jsr $29e2		jsr	ErrorHandler
>279c	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>27a4	20 53 74 6f 70 70 65 64 00
.27ad					ErrorV_data:
.27ad	20 e2 29	jsr $29e2		jsr	ErrorHandler
>27b0	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>27b8	44 61 74 61 00
.27bd					ErrorV_redefine:
.27bd	20 e2 29	jsr $29e2		jsr	ErrorHandler
>27c0	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>27c8	65 64 65 66 69 6e 65 64 00
.27d1					ErrorV_index:
.27d1	20 e2 29	jsr $29e2		jsr	ErrorHandler
>27d4	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>27dc	61 79 20 49 6e 64 65 78 00
.27e5					ErrorV_memory:
.27e5	20 e2 29	jsr $29e2		jsr	ErrorHandler
>27e8	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>27f0	4d 65 6d 6f 72 79 00
.27f7					ErrorV_uninitialised:
.27f7	20 e2 29	jsr $29e2		jsr	ErrorHandler
>27fa	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2802	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2812					ErrorV_string:
.2812	20 e2 29	jsr $29e2		jsr	ErrorHandler
>2815	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>281d	69 6e 67 20 4c 65 6e 67 74 68 00
.2828					ErrorV_variable:
.2828	20 e2 29	jsr $29e2		jsr	ErrorHandler
>282b	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2833	65 20 4d 69 73 73 69 6e 67 00
.283d					ErrorV_stack:
.283d	20 e2 29	jsr $29e2		jsr	ErrorHandler
>2840	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>2848	75 6c 6c 00
.284c					ErrorV_dupproc:
.284c	20 e2 29	jsr $29e2		jsr	ErrorHandler
>284f	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2857	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2867	65 64 00
.286a					ErrorV_unknown:
.286a	20 e2 29	jsr $29e2		jsr	ErrorHandler
>286d	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2875	20 50 72 6f 63 65 64 75 72 65 00
.2880					ErrorV_break:
.2880	20 e2 29	jsr $29e2		jsr	ErrorHandler
>2883	05 42 72 65 61 6b 00			.text	5,"Break",0
.288a					ErrorV_line:
.288a	20 e2 29	jsr $29e2		jsr	ErrorHandler
>288d	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2895	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.28a2					ERRCheckLParen:
.28a2	b1 18		lda ($18),y			lda 	(codePtr),y
.28a4	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.28a6	d0 18		bne $28c0			bne 	ERRSyntaxError
.28a8	c8		iny				iny
.28a9	60		rts				rts
.28aa					ERRCheckRParen:
.28aa	b1 18		lda ($18),y			lda 	(codePtr),y
.28ac	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.28ae	d0 10		bne $28c0			bne 	ERRSyntaxError
.28b0	c8		iny				iny
.28b1	60		rts				rts
.28b2					ERRCheckComma:
.28b2	b1 18		lda ($18),y			lda 	(codePtr),y
.28b4	c9 99		cmp #$99			cmp 	#PR_COMMA
.28b6	d0 08		bne $28c0			bne 	ERRSyntaxError
.28b8	c8		iny				iny
.28b9	60		rts				rts
.28ba					ERRCheckA:
.28ba	d1 18		cmp ($18),y			cmp 	(codePtr),y
.28bc	d0 02		bne $28c0			bne 	ERRSyntaxError
.28be	c8		iny				iny
.28bf	60		rts				rts
.28c0					ERRSyntaxError:
.28c0	4c f5 26	jmp $26f5		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.28c3					StackOpen:
.28c3	48		pha				pha 								; save frame byte
.28c4	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.28c6	0a		asl a				asl 	a 							; claim twice this for storage
.28c7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.28c9	38		sec				sec 								; so basically subtracting from
.28ca	65 2a		adc $2a				adc 	basicStack 	 				; basicStack
.28cc	85 2a		sta $2a				sta 	basicStack
.28ce	b0 0a		bcs $28da			bcs 	_SONoBorrow
>28d0	db						.byte 	$DB
.28d1	c6 2b		dec $2b				dec 	basicStack+1
.28d3	a5 2b		lda $2b				lda 	basicStack+1 				; reached the bottom ?
.28d5	cd 20 06	cmp $0620			cmp 	basicStackEnd
.28d8	f0 04		beq $28de			beq 	_SOMemory
.28da					_SONoBorrow:
.28da	68		pla				pla 								; get marker back and write at TOS
.28db	92 2a		sta ($2a)			sta 	(basicStack)
.28dd	60		rts				rts
.28de					_SOMemory:
.28de	4c 3d 28	jmp $283d		jmp	ErrorV_stack
.28e1					StackClose:
.28e1	b2 2a		lda ($2a)			lda 	(basicStack) 				; get TOS marker
.28e3	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.28e5	0a		asl a				asl 	a 							; claim twice this.
.28e6	65 2a		adc $2a				adc 	basicStack 					; add to the stack pointer.
.28e8	85 2a		sta $2a				sta 	basicStack
.28ea	90 02		bcc $28ee			bcc 	_SCExit
.28ec	e6 2b		inc $2b				inc 	basicStack+1
.28ee					_SCExit:
.28ee	60		rts				rts
.28ef					StackCheckFrame:
.28ef	d2 2a		cmp ($2a)			cmp		(basicStack) 				; check  frames match
.28f1	d0 01		bne $28f4			bne 	_SCFError 					; different, we have structures mixed up
.28f3	60		rts				rts
.28f4					_SCFError:
.28f4	4c 81 27	jmp $2781		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.28f7					STKSaveCodePosition:
.28f7	5a		phy				phy
.28f8	98		tya				tya 								; save Y at offset 1.
.28f9	a0 01		ldy #$01			ldy 	#1
.28fb	91 2a		sta ($2a),y			sta 	(basicStack),y
.28fd	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.28ff	c8		iny				iny
.2900	91 2a		sta ($2a),y			sta 	(basicStack),y
.2902	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2904	c8		iny				iny
.2905	91 2a		sta ($2a),y			sta 	(basicStack),y
.2907	7a		ply				ply
.2908	60		rts				rts
.2909					STKLoadCodePosition:
.2909	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.290b	b1 2a		lda ($2a),y			lda 	(basicStack),y
.290d	85 19		sta $19				sta 	codePtr+1
.290f	88		dey				dey
.2910	b1 2a		lda ($2a),y			lda 	(basicStack),y
.2912	85 18		sta $18				sta 	codePtr
.2914	88		dey				dey
.2915	b1 2a		lda ($2a),y			lda 	(basicStack),y 				; line offset to Y
.2917	a8		tay				tay
.2918	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.2919					StackReset:
.2919	48		pha				pha 								; save top of memory
.291a	3a		dec a				dec 	a  							; end of stack = previous byte
.291b	85 2b		sta $2b				sta 	basicStack+1
.291d	a9 ff		lda #$ff			lda 	#$FF
.291f	85 2a		sta $2a				sta 	basicStack
.2921	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2923	92 2a		sta ($2a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.2925	68		pla				pla 								; allocate pages for stack.
.2926	38		sec				sec
.2927	e9 02		sbc #$02			sbc 	#STACKPAGES
.2929	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.292c	60		rts				rts
.002a					basicStack:
>002a							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.292d					StringConcrete:
.292d	5a		phy				phy 								; save position on stack
.292e	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2930	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2932	b0 41		bcs $2975			bcs 	_SALengthError
.2934	18		clc				clc 								; length of the new string
.2935	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.2937	90 02		bcc $293b			bcc 	_SAHaveLength
.2939	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.293b					_SAHaveLength:
.293b	48		pha				pha 								; save length to be allocated for concreting.
.293c	38		sec				sec
.293d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.293f	6d 22 06	adc $0622			adc 	stringMemory
.2942	8d 22 06	sta $0622			sta 	stringMemory
.2945	85 26		sta $26				sta 	zTemp2 						; update storage address
.2947	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.2949	6d 23 06	adc $0623			adc 	stringMemory+1
.294c	8d 23 06	sta $0623			sta 	stringMemory+1
.294f	85 27		sta $27				sta 	zTemp2+1
.2951	68		pla				pla 								; save length allocated in +0
.2952	92 26		sta ($26)			sta 	(zTemp2)
.2954	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.2956	a0 01		ldy #$01			ldy 	#1
.2958	91 26		sta ($26),y			sta 	(zTemp2),y
.295a					_SACopyNewString:
.295a	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.295c	a0 02		ldy #$02			ldy 	#2
.295e	91 26		sta ($26),y			sta 	(zTemp2),y
.2960	aa		tax				tax 								; bytes to copy
.2961	f0 0c		beq $296f			beq 	_SACopyExit
.2963	a0 01		ldy #$01			ldy 	#1 							; first character from here
.2965					_SACopyNSLoop:
.2965	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.2967	c8		iny				iny 								; write two on in string storage
.2968	c8		iny				iny
.2969	91 26		sta ($26),y			sta 	(zTemp2),y
.296b	88		dey				dey
.296c	ca		dex				dex									; until copied all the string lengths.
.296d	d0 f6		bne $2965			bne 	_SACopyNSLoop
.296f					_SACopyExit:
.296f	a6 27		ldx $27				ldx 	zTemp2+1 					; XA contain the concreted string.
.2971	a5 26		lda $26				lda 	zTemp2
.2973	7a		ply				ply
.2974	60		rts				rts
.2975					_SALengthError:
.2975	4c 12 28	jmp $2812		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2978					StringSystemInitialise:
.2978	3a		dec a				dec 	a 							; make last byte of previous page.
.2979	8d 23 06	sta $0623			sta 	stringMemory+1
.297c	85 23		sta $23				sta 	zTemp0+1
.297e	a9 ff		lda #$ff			lda 	#$FF
.2980	8d 22 06	sta $0622			sta 	stringMemory
.2983	85 22		sta $22				sta 	zTemp0
.2985	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2987	92 22		sta ($22)			sta 	(zTemp0)
.2989	60		rts				rts
.298a					StringSpaceInitialise:
.298a	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.298c	8d 21 06	sta $0621			sta 	stringInitialised
.298f	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2992	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2995	ad 23 06	lda $0623			lda 	stringMemory+1
.2998	3a		dec a				dec 	a
.2999	8d 25 06	sta $0625			sta 	stringTempPointer+1
.299c	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.299f	60		rts				rts
.29a0					StringTempAllocate:
.29a0	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.29a2	b0 2e		bcs $29d2			bcs 	_STALength
.29a4	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.29a7	30 05		bmi $29ae			bmi 	_STAAllocate
.29a9	48		pha				pha 								; save value to subtract.
.29aa	20 8a 29	jsr $298a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.29ad	68		pla				pla 								; restore it
.29ae					_STAAllocate:
.29ae	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.29b0	18		clc				clc  								; deliberate allows one more
.29b1	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.29b4	8d 24 06	sta $0624			sta 	stringTempPointer
.29b7	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.29b9	85 2c		sta $2c				sta 	zsTemp 						; and zsTemp
.29bb	ad 25 06	lda $0625			lda 	stringTempPointer+1
.29be	69 ff		adc #$ff			adc 	#$FF
.29c0	8d 25 06	sta $0625			sta 	stringTempPointer+1
.29c3	85 2d		sta $2d				sta 	zsTemp+1
.29c5	85 09		sta $09				sta 	IFR0+IM1
.29c7	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.29c9	a9 80		lda #$80			lda 	#$80
.29cb	85 0b		sta $0b				sta 	IFR0+IExp
.29cd	a9 00		lda #$00			lda 	#0 							; clear the target string
.29cf	92 2c		sta ($2c)			sta 	(zsTemp)
.29d1	60		rts				rts
.29d2					_STALength:
.29d2	4c 12 28	jmp $2812		jmp	ErrorV_string
.29d5					StringTempWrite:
.29d5	5a		phy				phy
.29d6	48		pha				pha
.29d7	b2 2c		lda ($2c)			lda 	(zsTemp)
.29d9	1a		inc a				inc 	a
.29da	92 2c		sta ($2c)			sta 	(zsTemp)
.29dc	a8		tay				tay
.29dd	68		pla				pla
.29de	91 2c		sta ($2c),y			sta 	(zsTemp),y
.29e0	7a		ply				ply
.29e1	60		rts				rts
.002c					zsTemp:
>002c							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.29e2					ErrorHandler:
.29e2	fa		plx				plx 								; get address of msg
.29e3	7a		ply				ply
.29e4	e8		inx				inx 								; bump past RTS
.29e5	d0 01		bne $29e8			bne 	_EHNoInc
.29e7	c8		iny				iny
.29e8					_EHNoInc:
.29e8	20 f7 ff	jsr $fff7			jsr	 	OSWriteString 				; print it.
.29eb	ad 26 06	lda $0626			lda 	ERRLine 					; direct command ?
.29ee	0d 27 06	ora $0627			ora 	ERRLine+1
.29f1	f0 10		beq $2a03			beq 	_EHNoNumber
.29f3	a2 06		ldx #$06			ldx 	#_EHAtMsg & $FF
.29f5	a0 2a		ldy #$2a			ldy 	#_EHAtMsg >> 8
.29f7	20 f7 ff	jsr $fff7			jsr 	OSWriteString
.29fa	ad 26 06	lda $0626			lda 	ERRLine 					; line number -> XA
.29fd	ae 27 06	ldx $0627			ldx 	ERRLine+1
.2a00	20 0b 2a	jsr $2a0b			jsr 	WriteIntXA
.2a03					_EHNoNumber:
.2a03	4c 34 2a	jmp $2a34			jmp 	WarmStartNewLine
.2a06					_EHAtMsg:
>2a06	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2a0b					_EHAtMsg1:
.2a0b					WriteIntXA:
.2a0b	da		phx				phx
.2a0c	48		pha				pha
.2a0d	a2 08		ldx #$08			ldx 	#IFR0
.2a0f	20 a0 31	jsr $31a0			jsr 	IFloatPushRx
.2a12	68		pla				pla
.2a13	20 53 32	jsr $3253			jsr 	IFloatSetByte
.2a16	68		pla				pla
.2a17	85 09		sta $09				sta 	IFR0+IM1
.2a19	a9 0a		lda #$0a			lda 	#10 						; decimal
.2a1b	20 f3 2f	jsr $2ff3			jsr 	IFloatIntegerToStringR0	 	; convert
.2a1e	20 f7 ff	jsr $fff7			jsr 	OSWriteString 				; print
.2a21	a2 08		ldx #$08			ldx 	#IFR0
.2a23	20 c1 31	jsr $31c1			jsr 	IFloatPullRx
.2a26	60		rts				rts
.2a27					NotImplemented:
.2a27	4c 37 27	jmp $2737		jmp	ErrorV_unimplemented
.0626					ERRLine:
>0626							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2a2a					WarmStart:
.2a2a	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2a2c	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2a2f	a9 6b		lda #$6b			lda 	#"k"
.2a31	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2a34					WarmStartNewLine:
.2a34	a9 0d		lda #$0d			lda 	#13
.2a36	20 f4 ff	jsr $fff4			jsr 	OSWriteScreen
.2a39					WarmStartNoPrompt:
.2a39	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2a3b	9a		txs				txs
.2a3c	20 e2 ff	jsr $ffe2			jsr 	OSScreenLine 				; edit
.2a3f	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2a40	d0 01		bne $2a43			bne 	_WSSkip
.2a42	c8		iny				iny
.2a43					_WSSkip:
.2a43	86 26		stx $26				stx 	zTemp2 						; save address
.2a45	84 27		sty $27				sty 	zTemp2+1
.2a47	b2 26		lda ($26)			lda 	(zTemp2)
.2a49	f0 ee		beq $2a39			beq 	WarmStartNoPrompt 			; ignore empty line.
.2a4b	a2 7d		ldx #$7d			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2a4d	a0 2a		ldy #$2a			ldy 	#TOKGetCharacter >> 8
.2a4f	38		sec				sec
.2a50	20 2f 21	jsr $212f			jsr 	TOKTokenise
.2a53	b0 25		bcs $2a7a			bcs 	_WSSyntax
.2a55	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2a58	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2a5b	d0 0b		bne $2a68			bne 	_WSLineEdit
.2a5d	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2a5f	85 18		sta $18				sta 	codePtr
.2a61	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2a63	85 19		sta $19				sta 	codePtr+1
.2a65	4c df 14	jmp $14df			jmp 	RUNNewLine
.2a68					_WSLineEdit:
.2a68	20 0a 20	jsr $200a			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2a6b	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2a6e	c9 04		cmp #$04			cmp 	#4
.2a70	f0 03		beq $2a75			beq 	_WSNoInsert
.2a72	20 54 20	jsr $2054			jsr 	PGMInsertLine				; if not, maybe insert
.2a75					_WSNoInsert:
.2a75	20 44 10	jsr $1044			jsr 	ClearCode 					; clear variables etc.
.2a78	80 bf		bra $2a39			bra 	WarmStartNoPrompt
.2a7a					_WSSyntax:
.2a7a	4c f5 26	jmp $26f5		jmp	ErrorV_syntax
.2a7d					TOKGetCharacter:
.2a7d	b2 26		lda ($26)			lda 	(zTemp2)
.2a7f	90 06		bcc $2a87			bcc 	_GSNoIncrement
.2a81	e6 26		inc $26				inc 	zTemp2
.2a83	d0 02		bne $2a87			bne 	_GSNoIncrement
.2a85	e6 27		inc $27				inc 	zTemp2+1
.2a87					_GSNoIncrement:
.2a87	c9 00		cmp #$00			cmp 	#0
.2a89	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2a8a					VARArrayLookup:
.2a8a	85 22		sta $22				sta 	zTemp0 						; save the array address pointer in zTemp0
.2a8c	86 23		stx $23				stx 	zTemp0+1
.2a8e	b2 22		lda ($22)			lda 	(zTemp0)
.2a90	48		pha				pha
.2a91	5a		phy				phy
.2a92	a0 01		ldy #$01			ldy 	#1
.2a94	b1 22		lda ($22),y			lda 	(zTemp0),y
.2a96	7a		ply				ply
.2a97	48		pha				pha
.2a98	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2a9b	68		pla				pla 								; array address to zTemp0
.2a9c	85 23		sta $23				sta 	zTemp0+1
.2a9e	68		pla				pla
.2a9f	85 22		sta $22				sta 	zTemp0
.2aa1	5a		phy				phy 								; save codePtr position.
.2aa2	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2aa4	b1 22		lda ($22),y			lda 	(zTemp0),y
.2aa6	48		pha				pha 								; save bit 15 on stack.
.2aa7	29 7f		and #$7f			and 	#$7F
.2aa9	85 24		sta $24				sta 	zTemp1
.2aab	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2aad	d2 22		cmp ($22)			cmp 	(zTemp0)
.2aaf	a5 09		lda $09				lda 	IFR0+IM1
.2ab1	e5 24		sbc $24				sbc 	zTemp1
.2ab3	b0 3a		bcs $2aef			bcs 	_VALIndex
.2ab5	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2ab7	c9 40		cmp #$40			cmp 	#$40
.2ab9	b0 34		bcs $2aef			bcs 	_VALIndex
.2abb	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2abd	26 09		rol $09				rol 	IFR0+IM1
.2abf	fa		plx				plx 								; get msb of size -> X
.2ac0	30 04		bmi $2ac6			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2ac2	06 08		asl $08				asl 	IFR0+IM0
.2ac4	26 09		rol $09				rol 	IFR0+IM1
.2ac6					_VARNotX4:
.2ac6	18		clc				clc 								; add the two for the size bytes
.2ac7	a5 08		lda $08				lda 	IFR0+IM0
.2ac9	69 02		adc #$02			adc 	#2
.2acb	85 08		sta $08				sta 	IFR0+IM0
.2acd	90 02		bcc $2ad1			bcc 	_VARNoCarry1
.2acf	e6 09		inc $09				inc 	IFR0+IM1
.2ad1					_VARNoCarry1:
.2ad1	18		clc				clc 								; calculate the element address and push to stack.
.2ad2	a5 08		lda $08				lda 	IFR0+IM0
.2ad4	65 22		adc $22				adc 	zTemp0
.2ad6	48		pha				pha
.2ad7	a5 09		lda $09				lda 	IFR0+IM1
.2ad9	65 23		adc $23				adc 	zTemp0+1
.2adb	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2add	30 04		bmi $2ae3			bmi 	_VARHasSubLevel
.2adf	aa		tax				tax 								; address in XA
.2ae0	68		pla				pla
.2ae1	7a		ply				ply 								; restore Y and exit
.2ae2	60		rts				rts
.2ae3					_VARHasSubLevel:
.2ae3	aa		tax				tax 								; get link address in XA
.2ae4	68		pla				pla
.2ae5	7a		ply				ply 								; restore code position.
.2ae6	48		pha				pha
.2ae7	20 b2 28	jsr $28b2			jsr 	ERRCheckComma 				; comma required.
.2aea	68		pla				pla
.2aeb	20 8a 2a	jsr $2a8a			jsr 	VARArrayLookup 				; call it recursively
.2aee	60		rts				rts
.2aef					_VALIndex:
.2aef	4c d1 27	jmp $27d1		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2af2					VARCreate:
.2af2	5a		phy				phy
.2af3	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2af5	a2 00		ldx #$00			ldx 	#0
.2af7	20 61 10	jsr $1061			jsr 	AllocateMemory
.2afa	85 24		sta $24				sta 	zTemp1 						; save new address in zTemp1
.2afc	86 25		stx $25				stx 	zTemp1+1
.2afe	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2b00	ad 2a 06	lda $062a			lda 	VARHash
.2b03	91 24		sta ($24),y			sta 	(zTemp1),y
.2b05	c8		iny				iny 								; put address of name into +3,+4
.2b06	ad 28 06	lda $0628			lda 	VARNameAddress
.2b09	91 24		sta ($24),y			sta 	(zTemp1),y
.2b0b	c8		iny				iny
.2b0c	ad 29 06	lda $0629			lda 	VARNameAddress+1
.2b0f	91 24		sta ($24),y			sta 	(zTemp1),y
.2b11	ad 2b 06	lda $062b			lda 	VARType
.2b14	29 01		and #$01			and 	#1
.2b16	f0 06		beq $2b1e			beq 	_CVNotString
.2b18	a0 08		ldy #$08			ldy 	#5+3
.2b1a	a9 80		lda #$80			lda 	#$80
.2b1c	91 24		sta ($24),y			sta 	(zTemp1),y
.2b1e					_CVNotString:
.2b1e	ad 4c 06	lda $064c			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2b21	85 22		sta $22				sta 	zTemp0
.2b23	ad 4d 06	lda $064d			lda 	VARHashEntry+1
.2b26	85 23		sta $23				sta 	zTemp0+1
.2b28	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2b2a	b2 22		lda ($22)			lda 	(zTemp0)
.2b2c	92 24		sta ($24)			sta 	(zTemp1)
.2b2e	b1 22		lda ($22),y			lda 	(zTemp0),y
.2b30	91 24		sta ($24),y			sta 	(zTemp1),y
.2b32	a5 24		lda $24				lda 	zTemp1 						; address of the new record into head
.2b34	92 22		sta ($22)			sta 	(zTemp0)
.2b36	a5 25		lda $25				lda 	zTemp1+1
.2b38	91 22		sta ($22),y			sta 	(zTemp0),y
.2b3a	a5 24		lda $24				lda 	zTemp1 						; new record to XA
.2b3c	a6 25		ldx $25				ldx 	zTemp1+1
.2b3e	18		clc				clc 								; add 5 to point to the data.
.2b3f	69 05		adc #$05			adc 	#5
.2b41	90 01		bcc $2b44			bcc 	_VCNoCarry
.2b43	e8		inx				inx
.2b44					_VCNoCarry:
.2b44	7a		ply				ply
.2b45	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2b46					VARFind:
.2b46	5a		phy				phy
.2b47	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2b49	b1 22		lda ($22),y			lda 	(zTemp0),y
.2b4b	85 25		sta $25				sta 	zTemp1+1
.2b4d	f0 1c		beq $2b6b			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2b4f	b2 22		lda ($22)			lda 	(zTemp0)
.2b51	85 24		sta $24				sta 	zTemp1
.2b53					_VFLoop:
.2b53	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2b55	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b57	cd 2a 06	cmp $062a			cmp 	VARHash
.2b5a	f0 12		beq $2b6e			beq 	_VFHashesMatch 				; if so, check the name.
.2b5c					_VFNext:
.2b5c	b2 24		lda ($24)			lda 	(zTemp1) 					; next link to AX
.2b5e	aa		tax				tax
.2b5f	a0 01		ldy #$01			ldy 	#1
.2b61	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b63	85 25		sta $25				sta 	zTemp1+1
.2b65	86 24		stx $24				stx 	zTemp1
.2b67	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2b69	d0 e8		bne $2b53			bne 	_VFLoop
.2b6b					_VFExitFail:
.2b6b	7a		ply				ply
.2b6c	18		clc				clc
.2b6d	60		rts				rts
.2b6e					_VFHashesMatch:
.2b6e	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2b70	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b72	85 26		sta $26				sta 	zTemp2
.2b74	c8		iny				iny
.2b75	b1 24		lda ($24),y			lda 	(zTemp1),y
.2b77	85 27		sta $27				sta 	zTemp2+1
.2b79	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2b7b					_VFNameCompLoop:
.2b7b	c8		iny				iny 								; char at a time
.2b7c	b9 2c 06	lda $062c,y			lda 	VARBuffer,y
.2b7f	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.2b81	d0 d9		bne $2b5c			bne 	_VFNext						; next entry if different.
.2b83	c9 7c		cmp #$7c			cmp 	#$7C
.2b85	90 f4		bcc $2b7b			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2b87	18		clc				clc
.2b88	a5 24		lda $24				lda 	zTemp1
.2b8a	a6 25		ldx $25				ldx 	zTemp1+1
.2b8c	69 05		adc #$05			adc 	#5
.2b8e	90 01		bcc $2b91			bcc 	_VFNNoCarry
.2b90	e8		inx				inx
.2b91					_VFNNoCarry:
.2b91	7a		ply				ply
.2b92	38		sec				sec
.2b93	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2b94					VARGetInfo:
.2b94	98		tya				tya 								; calculate the address of the identifier start.
.2b95	18		clc				clc
.2b96	65 18		adc $18				adc 	codePtr
.2b98	8d 28 06	sta $0628			sta 	VARNameAddress
.2b9b	a5 19		lda $19				lda 	codePtr+1
.2b9d	69 00		adc #$00			adc 	#0
.2b9f	8d 29 06	sta $0629			sta 	VARNameAddress+1
.2ba2	9c 2a 06	stz $062a			stz 	VARHash
.2ba5	a2 00		ldx #$00			ldx 	#0
.2ba7					_VARCopyName:
.2ba7	18		clc				clc 								; update the sum hash.
.2ba8	ad 2a 06	lda $062a			lda 	VARHash
.2bab	71 18		adc ($18),y			adc 	(codePtr),y
.2bad	8d 2a 06	sta $062a			sta 	VARHash
.2bb0	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2bb2	c8		iny				iny
.2bb3	9d 2c 06	sta $062c,x			sta 	VARBuffer,x
.2bb6	e8		inx				inx
.2bb7	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2bb9	90 ec		bcc $2ba7			bcc 	_VARCopyName
.2bbb	8d 2b 06	sta $062b			sta 	VARType 					; save type byte
.2bbe	29 03		and #$03			and 	#3 							; type is 0-3
.2bc0	0a		asl a				asl 	a
.2bc1	0a		asl a				asl 	a
.2bc2	85 22		sta $22				sta 	zTemp0
.2bc4	ad 2a 06	lda $062a			lda 	VARHash 					; force into range of hash entries per type.
.2bc7	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2bc9	65 22		adc $22				adc 	zTemp0 						; index of hash table
.2bcb	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2bcc	69 4e		adc #$4e			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2bce	85 22		sta $22				sta 	zTemp0
.2bd0	8d 4c 06	sta $064c			sta 	VARHashEntry
.2bd3	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2bd5	69 00		adc #$00			adc 	#0
.2bd7	85 23		sta $23				sta 	zTemp0+1
.2bd9	8d 4d 06	sta $064d			sta 	VARHashEntry+1
.2bdc	60		rts				rts
.2bdd					VARClearHashTables:
.2bdd	a2 00		ldx #$00			ldx 	#0
.2bdf					_VCHRLoop:
.2bdf	a9 00		lda #$00			lda 	#0
.2be1	9d 4e 06	sta $064e,x			sta 	VARHashTables,x
.2be4	e8		inx				inx
.2be5	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2be7	d0 f6		bne $2bdf			bne 	_VCHRLoop
.2be9	60		rts				rts
.0628					VARNameAddress:
>0628							.fill 	2
.062a					VARHash:
>062a							.fill 	1
.062b					VARType:
>062b							.fill 	1
.062c					VARBuffer:
>062c							.fill 	32
.064c					VARHashEntry:
>064c							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.064e					VARHashTables:
>064e							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2bea					VARCheckSimple:
.2bea	aa		tax				tax 								; save in X
.2beb	b1 18		lda ($18),y			lda 	(codePtr),y
.2bed	c9 7c		cmp #$7c			cmp 	#$7C
.2bef	d0 15		bne $2c06			bne 	_VCSComplex
.2bf1	c8		iny				iny 								; consume the second byte, the type.
.2bf2	8a		txa				txa  								; character (40-7F) x 4
.2bf3	0a		asl a				asl 	a
.2bf4	0a		asl a				asl  	a
.2bf5	18		clc				clc
.2bf6	69 6e		adc #$6e			adc 	#FastVariables & $FF
.2bf8	85 08		sta $08				sta 	IFR0+IM0
.2bfa	a9 06		lda #$06			lda 	#FastVariables >> 8
.2bfc	69 00		adc #$00			adc 	#0
.2bfe	85 09		sta $09				sta 	IFR0+IM1
.2c00	64 0a		stz $0a				stz 	IFR0+IM2
.2c02	64 0b		stz $0b				stz 	IFR0+IExp
.2c04	38		sec				sec 								; it's a reference
.2c05	60		rts				rts
.2c06					_VCSComplex:
.2c06	88		dey				dey	 								; extract information.
.2c07	20 94 2b	jsr $2b94			jsr 	VARGetInfo
.2c0a	20 46 2b	jsr $2b46			jsr 	VARFind 					; search for variable
.2c0d	b0 0a		bcs $2c19			bcs 	_VCSHaveVariable
.2c0f	ad 2b 06	lda $062b			lda 	VARType 					; error if arrays, cannot autocreate
.2c12	29 02		and #$02			and 	#2
.2c14	d0 25		bne $2c3b			bne 	_VCNoCreate
.2c16	20 f2 2a	jsr $2af2			jsr 	VARCreate 					; create variable
.2c19					_VCSHaveVariable:
.2c19	48		pha				pha 								; save LSB on the stack
.2c1a	ad 2b 06	lda $062b			lda 	VARType 					; get var type, and shift bit 1 into carry
.2c1d	6a		ror a				ror 	a
.2c1e	6a		ror a				ror 	a
.2c1f	68		pla				pla 								; restore LSB
.2c20	90 08		bcc $2c2a			bcc 	_VCSNotArray 				; skip if not an array
.2c22	20 8a 2a	jsr $2a8a			jsr 	VARArrayLookup 				; look for subscripts.
.2c25	48		pha				pha 								; check )
.2c26	20 aa 28	jsr $28aa			jsr 	ERRCheckRParen
.2c29	68		pla				pla
.2c2a					_VCSNotArray:
.2c2a	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2c2c	85 08		sta $08				sta 	IFR0+IM0
.2c2e	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2c30	ad 2b 06	lda $062b			lda 	VARType 					; number/string bit into carry
.2c33	6a		ror a				ror 	a
.2c34	a9 00		lda #$00			lda 	#0
.2c36	6a		ror a				ror 	a 							; now $00 or $80
.2c37	85 0b		sta $0b				sta 	IFR0+IExp
.2c39	38		sec				sec 								; it's a reference
.2c3a	60		rts				rts
.2c3b					_VCNoCreate:
.2c3b	4c f7 27	jmp $27f7		jmp	ErrorV_uninitialised
.066e					FastVariables:
>066e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2c3e					IFInitialise:
.2c3e	9c de 06	stz $06de			stz 	IFStackIndex 				; reset the internal stack.
.2c41	60		rts				rts
.2c42					IFloatSubtract:
.2c42	da		phx				phx
.2c43	a2 08		ldx #$08			ldx 	#IFR0
.2c45	20 5c 32	jsr $325c			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2c48	fa		plx				plx
.2c49					IFloatAdd:
.2c49	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2c4b	05 0b		ora $0b				ora 	IFR0+IExp
.2c4d	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2c4f	d0 4e		bne $2c9f			bne 	_IFloatAddDecimals 			; floating point version.
.2c51					_IFAddSubMantissa:
.2c51	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2c53	45 0b		eor $0b				eor 	IFR0+IExp
.2c55	29 40		and #$40			and 	#IFSign
.2c57	d0 21		bne $2c7a			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2c59	18		clc				clc 								; do the actual addition
.2c5a	a5 08		lda $08				lda 	IFR0+IM0
.2c5c	75 00		adc $00,x			adc 		IM0,x
.2c5e	85 08		sta $08				sta 	IFR0+IM0
.2c60	a5 09		lda $09				lda 	IFR0+IM1
.2c62	75 01		adc $01,x			adc 		IM1,x
.2c64	85 09		sta $09				sta 	IFR0+IM1
.2c66	a5 0a		lda $0a				lda 	IFR0+IM2
.2c68	75 02		adc $02,x			adc 		IM2,x
.2c6a	85 0a		sta $0a				sta 	IFR0+IM2
.2c6c	10 29		bpl $2c97			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2c6e	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2c70	20 80 32	jsr $3280			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2c73	20 aa 32	jsr $32aa			jsr 	IFloatIncExponent
.2c76	d0 1f		bne $2c97			bne 	_IFloatAddExit
.2c78	38		sec				sec 								; overflowed numerically.
.2c79	60		rts				rts
.2c7a					_IFloatSubMantissa:
.2c7a	38		sec				sec 								; do the subtraction R0-Rx
.2c7b	a5 08		lda $08				lda 	IFR0+IM0
.2c7d	f5 00		sbc $00,x			sbc 		IM0,x
.2c7f	85 08		sta $08				sta 	IFR0+IM0
.2c81	a5 09		lda $09				lda 	IFR0+IM1
.2c83	f5 01		sbc $01,x			sbc 		IM1,x
.2c85	85 09		sta $09				sta 	IFR0+IM1
.2c87	a5 0a		lda $0a				lda 	IFR0+IM2
.2c89	f5 02		sbc $02,x			sbc 		IM2,x
.2c8b	85 0a		sta $0a				sta 	IFR0+IM2
.2c8d	b0 08		bcs $2c97			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2c8f	a2 08		ldx #$08			ldx 	#IFR0
.2c91	20 64 32	jsr $3264			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2c94	20 5c 32	jsr $325c			jsr 	IFloatNegate 				; negate the result using sign bit.
.2c97					_IFloatAddExit:
.2c97	18		clc				clc
.2c98	60		rts				rts
.2c99					_IFloatZeroAdd:
.2c99	fa		plx				plx 								; return this value in R0
.2c9a	20 e2 31	jsr $31e2			jsr 	IFloatCopyFromRegister
.2c9d	18		clc				clc
.2c9e	60		rts				rts
.2c9f					_IFloatAddDecimals:
.2c9f	20 4a 32	jsr $324a			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2ca2	f0 f3		beq $2c97			beq 	_IFloatAddExit
.2ca4	20 88 32	jsr $3288			jsr 	IFloatNormalise 			; normalise RX
.2ca7	da		phx				phx 								; normalise R0
.2ca8	a2 08		ldx #$08			ldx 	#IFR0
.2caa	20 4a 32	jsr $324a			jsr 	IFloatCheckZero
.2cad	f0 ea		beq $2c99			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2caf	20 88 32	jsr $3288			jsr 	IFloatNormalise
.2cb2	fa		plx				plx
.2cb3	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2cb5	29 3f		and #$3f			and 	#IFXMask
.2cb7	38		sec				sec
.2cb8	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2cba	85 20		sta $20				sta 	iTemp0
.2cbc	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2cbe	29 3f		and #$3f			and 	#IFXMask
.2cc0	38		sec				sec
.2cc1	e9 20		sbc #$20			sbc 	#$20
.2cc3	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2cc5	b0 02		bcs $2cc9			bcs 	_IFloatHaveLarger
.2cc7	a5 20		lda $20				lda 	iTemp0
.2cc9					_IFloatHaveLarger:
.2cc9	18		clc				clc 								; get the actual one back.
.2cca	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2ccc	20 d9 2c	jsr $2cd9			jsr 	_IFShiftXToA
.2ccf	da		phx				phx
.2cd0	a2 08		ldx #$08			ldx 	#IFR0
.2cd2	20 d9 2c	jsr $2cd9			jsr 	_IFShiftXToA
.2cd5	fa		plx				plx
.2cd6	4c 51 2c	jmp $2c51			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2cd9					_IFShiftXToA:
.2cd9	8d d6 06	sta $06d6			sta 	IFTarget
.2cdc	20 4a 32	jsr $324a			jsr 	IFloatCheckZero 			; check adding zero ?
.2cdf	f0 11		beq $2cf2			beq 	_IFSXExit
.2ce1					_IFSXLoop:
.2ce1	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2ce3	29 3f		and #$3f			and 	#IFXMask
.2ce5	cd d6 06	cmp $06d6			cmp 	IFTarget
.2ce8	f0 08		beq $2cf2			beq 	_IFSXExit
.2cea	20 80 32	jsr $3280			jsr 	IFloatShiftRight
.2ced	20 aa 32	jsr $32aa			jsr 	IFloatIncExponent
.2cf0	80 ef		bra $2ce1			bra 	_IFSXLoop
.2cf2					_IFSXExit:
.2cf2	60		rts				rts
.06d6					IFTarget:
>06d6							.fill 	1
.2cf3					IFloatMultiply:
.2cf3	8e d6 06	stx $06d6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2cf6	20 ab 2d	jsr $2dab			jsr 	IFCalculateNewSign
.2cf9	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2cfb	05 0b		ora $0b				ora 	IFR0+IExp
.2cfd	29 3f		and #$3f			and 	#IFXMask
.2cff	15 01		ora $01,x			ora 	IM1,x
.2d01	05 09		ora $09				ora 	IFR0+IM1
.2d03	15 02		ora $02,x			ora 	IM2,x
.2d05	05 0a		ora $0a				ora 	IFR0+IM2
.2d07	d0 0a		bne $2d13			bne 	_IFMStandard
.2d09	20 2d 32	jsr $322d			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2d0c	ad d8 06	lda $06d8			lda 	IFNewSign
.2d0f	85 0b		sta $0b				sta 	IFR0+IExp
.2d11	18		clc				clc
.2d12	60		rts				rts
.2d13					_IFMStandard:
.2d13	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2d15	20 a2 2d	jsr $2da2			jsr 	IFMSignExtend
.2d18	8d d7 06	sta $06d7			sta 	IFNewExponent
.2d1b	a5 0b		lda $0b				lda 	IFR0+IExp
.2d1d	20 a2 2d	jsr $2da2			jsr 	IFMSignExtend
.2d20	18		clc				clc
.2d21	6d d7 06	adc $06d7			adc 	IFNewExponent
.2d24	8d d7 06	sta $06d7			sta 	IFNewExponent
.2d27	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2d29	20 f3 31	jsr $31f3			jsr 	IFloatCopyToRegister
.2d2c	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2d2e	20 51 32	jsr $3251			jsr 	IFloatSetZero
.2d31					_IFMLoop:
.2d31	a2 14		ldx #$14			ldx 	#IFRTemp
.2d33	20 4a 32	jsr $324a			jsr 	IFloatCheckZero
.2d36	f0 3a		beq $2d72			beq 	_IFMExit
.2d38	ae d6 06	ldx $06d6			ldx 	IFTarget 					; look at adder MSB
.2d3b	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2d3d	10 03		bpl $2d42			bpl	 	_IFMTargetOkay
.2d3f	20 93 2d	jsr $2d93			jsr 	_IFMShiftAll
.2d42					_IFMTargetOkay:
.2d42	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2d44	29 01		and #$01			and 	#1
.2d46	f0 16		beq $2d5e			beq 	_IFMNoAdd
.2d48	ae d6 06	ldx $06d6			ldx 	IFTarget 					; add adder
.2d4b	18		clc				clc
.2d4c	a5 08		lda $08				lda 	IFR0+IM0
.2d4e	75 00		adc $00,x			adc 		IM0,x
.2d50	85 08		sta $08				sta 	IFR0+IM0
.2d52	a5 09		lda $09				lda 	IFR0+IM1
.2d54	75 01		adc $01,x			adc 		IM1,x
.2d56	85 09		sta $09				sta 	IFR0+IM1
.2d58	a5 0a		lda $0a				lda 	IFR0+IM2
.2d5a	75 02		adc $02,x			adc 		IM2,x
.2d5c	85 0a		sta $0a				sta 	IFR0+IM2
.2d5e					_IFMNoAdd:
.2d5e	a5 0a		lda $0a				lda 	IFR0+IM2
.2d60	10 03		bpl $2d65			bpl 	_IFMResultOkay
.2d62	20 93 2d	jsr $2d93			jsr 	_IFMShiftAll
.2d65					_IFMResultOkay:
.2d65	a2 14		ldx #$14			ldx 	#IFRTemp
.2d67	20 80 32	jsr $3280			jsr 	IFloatShiftRight
.2d6a	ae d6 06	ldx $06d6			ldx 	IFTarget
.2d6d	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.2d70	80 bf		bra $2d31			bra 	_IFMLoop
.2d72					_IFMExit:
.2d72	ad d7 06	lda $06d7			lda 	IFNewExponent 				; validate new exponent.
.2d75	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2d77	90 0f		bcc $2d88			bcc 	_IFMOkay
.2d79	c9 e0		cmp #$e0			cmp 	#$E0
.2d7b	b0 0b		bcs $2d88			bcs 	_IFMOkay
.2d7d	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2d7f	f0 10		beq $2d91			beq 	_IFMError
.2d81	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2d83	20 51 32	jsr $3251			jsr 	IFloatSetZero
.2d86	18		clc				clc
.2d87	60		rts				rts
.2d88					_IFMOkay:
.2d88	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2d8a	0d d8 06	ora $06d8			ora 	IFNewSign
.2d8d	85 0b		sta $0b				sta 	IFR0+IExp
.2d8f	18		clc				clc
.2d90	60		rts				rts
.2d91					_IFMError:
.2d91	38		sec				sec
.2d92	60		rts				rts
.2d93					_IFMShiftAll:
.2d93	a2 08		ldx #$08			ldx 	#IFR0
.2d95	20 80 32	jsr $3280			jsr 	IFloatShiftRight
.2d98	ae d6 06	ldx $06d6			ldx 	IFTarget
.2d9b	20 80 32	jsr $3280			jsr 	IFloatShiftRight
.2d9e	ee d7 06	inc $06d7			inc 	IFNewExponent
.2da1	60		rts				rts
.2da2					IFMSignExtend:
.2da2	29 3f		and #$3f			and 	#IFXMask
.2da4	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2da6	90 02		bcc $2daa			bcc 	_IFMNoSXX
.2da8	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2daa					_IFMNoSXX:
.2daa	60		rts				rts
.2dab					IFCalculateNewSign:
.2dab	b5 03		lda $03,x			lda 	IExp,x
.2dad	45 0b		eor $0b				eor 	IFR0+IExp
.2daf	29 40		and #$40			and 	#IFSign
.2db1	8d d8 06	sta $06d8			sta 	IFNewSign
.2db4	60		rts				rts
.06d7					IFNewExponent:
>06d7							.fill 	1
.06d8					IFNewSign:
>06d8							.fill 	1
.2db5					IFloatDivideInteger:
.2db5	20 ce 2d	jsr $2dce			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2db8	b0 06		bcs $2dc0			bcs 	_IFDIExit
.2dba	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2dbc	20 e2 31	jsr $31e2			jsr 	IFloatCopyFromRegister
.2dbf	18		clc				clc
.2dc0					_IFDIExit:
.2dc0	60		rts				rts
.2dc1					IFloatModulusInteger:
.2dc1	20 ce 2d	jsr $2dce			jsr 	IFloatDivideIntegerCommon
.2dc4	b0 07		bcs $2dcd			bcs 	_IFMIExit
.2dc6	ae d6 06	ldx $06d6			ldx 	IFTarget
.2dc9	20 e2 31	jsr $31e2			jsr 	IFloatCopyFromRegister
.2dcc	18		clc				clc
.2dcd					_IFMIExit:
.2dcd	60		rts				rts
.2dce					IFloatDivideIntegerCommon:
.2dce	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2dd1	20 ab 2d	jsr $2dab			jsr 	IFCalculateNewSign 			; calculate sign of result
.2dd4	20 fc 2d	jsr $2dfc			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2dd7	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2dd9	20 4a 32	jsr $324a			jsr 	IFloatCheckZero
.2ddc	f0 1c		beq $2dfa			beq 	_IFDIDivZero
.2dde	ae d6 06	ldx $06d6			ldx 	IFTarget 					; zero Rx (S1)
.2de1	20 51 32	jsr $3251			jsr 	IFloatSetZero
.2de4	5a		phy				phy
.2de5	a0 18		ldy #$18			ldy 	#24
.2de7					_IFDILoop:
.2de7	20 0d 2e	jsr $2e0d			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2dea	20 19 2e	jsr $2e19			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2ded	88		dey				dey
.2dee	d0 f7		bne $2de7			bne 	_IFDILoop 					; do it 24 times
.2df0	7a		ply				ply
.2df1	ad d8 06	lda $06d8			lda 	IFNewSign 					; set sign of result.
.2df4	29 40		and #$40			and 	#IFSign
.2df6	85 17		sta $17				sta 	IFRTemp+IExp
.2df8	18		clc				clc 								; is okay.
.2df9	60		rts				rts
.2dfa					_IFDIDivZero:
.2dfa	38		sec				sec
.2dfb	60		rts				rts
.2dfc					IFDCopyRXToRTemp:
.2dfc	b5 00		lda $00,x			lda 	IM0,x
.2dfe	85 14		sta $14				sta 	IFRTemp+IM0
.2e00	b5 01		lda $01,x			lda 	IM1,x
.2e02	85 15		sta $15				sta 	IFRTemp+IM1
.2e04	b5 02		lda $02,x			lda 	IM2,x
.2e06	85 16		sta $16				sta 	IFRTemp+IM2
.2e08	b5 03		lda $03,x			lda 	IExp,x
.2e0a	85 17		sta $17				sta 	IFRTemp+IExp
.2e0c	60		rts				rts
.2e0d					IFDShiftSTempS1Left:
.2e0d	a2 14		ldx #$14			ldx 	#IFRTemp
.2e0f	20 78 32	jsr $3278			jsr 	IFloatShiftLeft
.2e12	ae d6 06	ldx $06d6			ldx 	IFTarget
.2e15	20 79 32	jsr $3279			jsr 	IFloatRotateLeft
.2e18	60		rts				rts
.2e19					IFDTrySubtract:
.2e19	ae d6 06	ldx $06d6			ldx 	IFTarget 					; s1 = Rx
.2e1c	38		sec				sec 								; subtract, saving the results on the stack.
.2e1d	b5 00		lda $00,x			lda 	IM0,x
.2e1f	e5 08		sbc $08				sbc 	IFR0+IM0
.2e21	48		pha				pha
.2e22	b5 01		lda $01,x			lda 	IM1,x
.2e24	e5 09		sbc $09				sbc 	IFR0+IM1
.2e26	48		pha				pha
.2e27	b5 02		lda $02,x			lda 	IM2,x
.2e29	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2e2b	b0 03		bcs $2e30			bcs 	_IFDCanSubtract
.2e2d	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2e2e	68		pla				pla
.2e2f	60		rts				rts
.2e30					_IFDCanSubtract:
.2e30	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2e32	68		pla				pla
.2e33	95 01		sta $01,x			sta 	IM1,x
.2e35	68		pla				pla
.2e36	95 00		sta $00,x			sta 	IM0,x
.2e38	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2e3a	d0 06		bne $2e42			bne 	_IFDCSExit
.2e3c	e6 15		inc $15				inc 	IFRTemp+IM1
.2e3e	d0 02		bne $2e42			bne 	_IFDCSExit
.2e40	e6 16		inc $16				inc 	IFRTemp+IM2
.2e42					_IFDCSExit:
.2e42	60		rts				rts
.2e43					IFloatBitwiseAnd:
.2e43	5a		phy				phy
.2e44	20 88 2e	jsr $2e88			jsr 	IFPreProcessBitwise 		; set up everything.
.2e47	d0 0f		bne $2e58			bne 	_IFBAExit
.2e49					_IFBALoop:
.2e49	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2e4c	35 00		and $00,x			and 	IM0,x
.2e4e	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2e51	e8		inx				inx
.2e52	c8		iny				iny
.2e53	c0 03		cpy #$03			cpy 	#3
.2e55	d0 f2		bne $2e49			bne 	_IFBALoop
.2e57	18		clc				clc
.2e58					_IFBAExit:
.2e58	7a		ply				ply
.2e59	60		rts				rts
.2e5a					IFloatBitwiseOr:
.2e5a	5a		phy				phy
.2e5b	20 88 2e	jsr $2e88			jsr 	IFPreProcessBitwise 		; set up everything.
.2e5e	d0 0f		bne $2e6f			bne 	_IFBAExit
.2e60					_IFBALoop:
.2e60	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2e63	15 00		ora $00,x			ora 	IM0,x
.2e65	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2e68	e8		inx				inx
.2e69	c8		iny				iny
.2e6a	c0 03		cpy #$03			cpy 	#3
.2e6c	d0 f2		bne $2e60			bne 	_IFBALoop
.2e6e	18		clc				clc
.2e6f					_IFBAExit:
.2e6f	7a		ply				ply
.2e70	60		rts				rts
.2e71					IFloatBitwiseXor:
.2e71	5a		phy				phy
.2e72	20 88 2e	jsr $2e88			jsr 	IFPreProcessBitwise 		; set up everything.
.2e75	d0 0f		bne $2e86			bne 	_IFBAExit
.2e77					_IFBALoop:
.2e77	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2e7a	55 00		eor $00,x			eor 	IM0,x
.2e7c	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2e7f	e8		inx				inx
.2e80	c8		iny				iny
.2e81	c0 03		cpy #$03			cpy 	#3
.2e83	d0 f2		bne $2e77			bne 	_IFBALoop
.2e85	18		clc				clc
.2e86					_IFBAExit:
.2e86	7a		ply				ply
.2e87	60		rts				rts
.2e88					IFPreProcessBitwise:
.2e88	a0 00		ldy #$00			ldy 	#0 							; set index.
.2e8a	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2e8c	15 03		ora $03,x			ora 	IExp,x
.2e8e	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2e90	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2e92	38		sec				sec 								; carry set just in cases.
.2e93	60		rts				rts
.2e94					IFloatAbsoluteR0:
.2e94	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2e96	29 bf		and #$bf			and 	#IFSign ^ 255
.2e98	85 0b		sta $0b				sta 	IFR0+IExp
.2e9a	18		clc				clc
.2e9b	60		rts				rts
.2e9c					IFloatSquareRootR0:
.2e9c	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2e9e	20 4a 32	jsr $324a			jsr 	IFloatCheckZero
.2ea1	f0 2e		beq $2ed1			beq 	_IFSRZero
.2ea3	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2ea5	29 40		and #$40			and 	#IFSign
.2ea7	d0 2f		bne $2ed8			bne 	_IFSRFail
.2ea9	20 88 32	jsr $3288			jsr 	IFloatNormalise 			; it will work better !
.2eac	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2eae	20 f3 31	jsr $31f3			jsr 	IFloatCopyToRegister
.2eb1	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2eb3	20 a2 2d	jsr $2da2			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2eb6	18		clc				clc
.2eb7	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2eb9	85 0b		sta $0b				sta 	IFR0+IExp
.2ebb	4a		lsr a				lsr 	a 							; which we can halve.
.2ebc	38		sec				sec 								; convert back
.2ebd	e9 17		sbc #$17			sbc 	#23
.2ebf	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2ec1	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2ec3	20 da 2e	jsr $2eda			jsr 	_IFSRNewton
.2ec6	20 da 2e	jsr $2eda			jsr 	_IFSRNewton
.2ec9	20 da 2e	jsr $2eda			jsr 	_IFSRNewton
.2ecc	20 da 2e	jsr $2eda			jsr 	_IFSRNewton
.2ecf	18		clc				clc
.2ed0	60		rts				rts
.2ed1					_IFSRZero:
.2ed1	a2 08		ldx #$08			ldx 	#IFR0
.2ed3	20 51 32	jsr $3251			jsr 	IFloatSetZero
.2ed6	18		clc				clc
.2ed7	60		rts				rts
.2ed8					_IFSRFail:
.2ed8	38		sec				sec
.2ed9	60		rts				rts
.2eda					_IFSRNewton:
.2eda	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2edc	20 a0 31	jsr $31a0			jsr 	IFloatPushRx
.2edf	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2ee1	20 a0 31	jsr $31a0			jsr 	IFloatPushRx
.2ee4	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.2ee6	20 75 2f	jsr $2f75			jsr 	IFloatDivideFloat
.2ee9	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.2eeb	20 c1 31	jsr $31c1			jsr 	IFloatPullRx
.2eee	20 49 2c	jsr $2c49			jsr 	IFloatAdd 					; now guess + original/guess
.2ef1	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.2ef3	20 80 32	jsr $3280			jsr 	IFloatShiftRight
.2ef6	a2 0c		ldx #$0c			ldx 	#IFR1
.2ef8	20 c1 31	jsr $31c1			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.2efb	60		rts				rts
.2efc					IFloatFractionalR0:
.2efc	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2efe	29 3f		and #$3f			and 	#IFXMask
.2f00	f0 17		beq $2f19			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.2f02	20 94 2e	jsr $2e94			jsr 	IFloatAbsoluteR0 			; absolute value R0
.2f05	a2 08		ldx #$08			ldx 	#IFR0
.2f07	20 88 32	jsr $3288			jsr 	IFloatNormalise 			; normalise R0
.2f0a	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.2f0c	20 f3 31	jsr $31f3			jsr 	IFloatCopyToRegister
.2f0f	20 52 2f	jsr $2f52			jsr 	IFloatIntegerR0 			; take integer part of R0
.2f12	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.2f14	20 42 2c	jsr $2c42			jsr 	IFloatSubtract
.2f17	80 05		bra $2f1e			bra 	_FIPExit
.2f19					_FIPZero:
.2f19	a2 08		ldx #$08			ldx 	#IFR0
.2f1b	20 51 32	jsr $3251			jsr 	IFloatSetZero
.2f1e					_FIPExit:
.2f1e	18		clc				clc
.2f1f	60		rts				rts
.2f20					IFloatCompare:
.2f20	20 42 2c	jsr $2c42			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2f23	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2f25	05 0b		ora $0b				ora 	IFR0+IExp
.2f27	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.2f29	29 3f		and #$3f			and 	#IFXMask
.2f2b	d0 19		bne $2f46			bne 	_IFCNonInteger
.2f2d	20 4a 32	jsr $324a			jsr 	IFloatCheckZero 			; check if zero
.2f30	f0 0f		beq $2f41			beq 	_IFCZero
.2f32					_IFCReturnSign:
.2f32	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2f34	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2f36	48		pha				pha
.2f37	a9 01		lda #$01			lda 	#1
.2f39	20 53 32	jsr $3253			jsr 	IFloatSetByte 				; return to +1
.2f3c	68		pla				pla 								; sign bit back
.2f3d	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.2f3f	18		clc				clc
.2f40	60		rts				rts
.2f41					_IFCZero:
.2f41	20 51 32	jsr $3251			jsr 	IFloatSetZero
.2f44	18		clc				clc
.2f45	60		rts				rts
.2f46					_IFCNonInteger:
.2f46	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.2f48	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.2f4a	05 09		ora $09				ora 	IFR0+IM1
.2f4c	05 0a		ora $0a				ora 	IFR0+IM2
.2f4e	f0 f1		beq $2f41			beq 	_IFCZero 					; near enough !
.2f50	80 e0		bra $2f32			bra 	_IFCReturnSign 				; return the sign of the difference.
.2f52					IFloatIntegerR0:
.2f52	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.2f54	29 3f		and #$3f			and 	#IFXMask
.2f56	f0 1b		beq $2f73			beq 	_FIPExit 					; if so do nothing
.2f58	a2 08		ldx #$08			ldx 	#IFR0
.2f5a	20 88 32	jsr $3288			jsr 	IFloatNormalise 			; normalise
.2f5d	20 4a 32	jsr $324a			jsr 	IFloatCheckZero 			; is it zero ?
.2f60	f0 0e		beq $2f70			beq 	_FIPZero 					; if so return zero.
.2f62					_FIPShift:
.2f62	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2f64	29 20		and #$20			and 	#$20 						; still -ve
.2f66	f0 0b		beq $2f73			beq 	_FIPExit
.2f68	20 80 32	jsr $3280			jsr 	IFloatShiftRight 			; shift mantissa right
.2f6b	20 aa 32	jsr $32aa			jsr 	IFloatIncExponent 			; bump exponent
.2f6e	80 f2		bra $2f62			bra 	_FIPShift
.2f70					_FIPZero:
.2f70	20 51 32	jsr $3251			jsr 	IFloatSetZero
.2f73					_FIPExit:
.2f73	18		clc				clc
.2f74	60		rts				rts
.2f75					IFloatDivideFloat:
.2f75	8e d6 06	stx $06d6			stx 	IFTarget  					; this is s1, s0 = R0
.2f78	20 ab 2d	jsr $2dab			jsr 	IFCalculateNewSign 			; calculate sign of result
.2f7b	20 88 32	jsr $3288			jsr 	IFloatNormalise 			; normalise RX
.2f7e	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.2f80	20 88 32	jsr $3288			jsr 	IFloatNormalise
.2f83	20 4a 32	jsr $324a			jsr 	IFloatCheckZero
.2f86	f0 56		beq $2fde			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2f88	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.2f8a	20 a2 2d	jsr $2da2			jsr 	IFMSignExtend
.2f8d	8d d7 06	sta $06d7			sta 	IFNewExponent
.2f90	ae d6 06	ldx $06d6			ldx 	IFTarget 					; calculate s1.exponent
.2f93	b5 03		lda $03,x			lda 	IExp,x
.2f95	20 a2 2d	jsr $2da2			jsr 	IFMSignExtend
.2f98	38		sec				sec
.2f99	ed d7 06	sbc $06d7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.2f9c	38		sec				sec
.2f9d	e9 17		sbc #$17			sbc 	#23
.2f9f	8d d7 06	sta $06d7			sta 	IFNewExponent
.2fa2	20 e0 2f	jsr $2fe0			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2fa5	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.2fa7	10 08		bpl $2fb1			bpl 	_IFDFNoShiftResult
.2fa9	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.2fab	20 80 32	jsr $3280			jsr 	IFloatShiftRight
.2fae	ee d7 06	inc $06d7			inc 	IFNewExponent
.2fb1					_IFDFNoShiftResult:
.2fb1	ad d7 06	lda $06d7			lda 	IFNewExponent 				; underflow/overflow check.
.2fb4	30 06		bmi $2fbc			bmi 	_IFDFCheckUnderflow
.2fb6	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2fb8	b0 24		bcs $2fde			bcs 	_IFDFDivZero
.2fba	80 11		bra $2fcd			bra		_IFDFExit
.2fbc					_IFDFCheckUnderflow:
.2fbc	ad d7 06	lda $06d7			lda 	IFNewExponent 				; shift into a legal exponent.
.2fbf	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.2fc1	b0 0a		bcs $2fcd			bcs 	_IFDFExit
.2fc3	ee d7 06	inc $06d7			inc 	IFNewExponent
.2fc6	a2 14		ldx #$14			ldx 	#IFRTemp
.2fc8	20 80 32	jsr $3280			jsr 	IFloatShiftRight
.2fcb	80 ef		bra $2fbc			bra 	_IFDFCheckUnderflow
.2fcd					_IFDFExit:
.2fcd	ad d7 06	lda $06d7			lda 	IFNewExponent 				; combine exponent and sign.
.2fd0	29 3f		and #$3f			and 	#IFXMask
.2fd2	0d d8 06	ora $06d8			ora 	IFNewSign
.2fd5	85 17		sta $17				sta 	IFRTemp+IExp
.2fd7	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.2fd9	20 e2 31	jsr $31e2			jsr 	IFloatCopyFromRegister
.2fdc	18		clc				clc
.2fdd	60		rts				rts
.2fde					_IFDFDivZero:
.2fde	38		sec				sec
.2fdf	60		rts				rts
.2fe0					IFloatDivideSupport:
.2fe0	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.2fe2	20 51 32	jsr $3251			jsr 	IFloatSetZero
.2fe5	5a		phy				phy 								; main division loop x 23
.2fe6	a0 17		ldy #$17			ldy 	#23
.2fe8					_IFDSLoop:
.2fe8	20 19 2e	jsr $2e19			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2feb	20 0d 2e	jsr $2e0d			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2fee	88		dey				dey
.2fef	d0 f7		bne $2fe8			bne 	_IFDSLoop 					; do it 24 times
.2ff1	7a		ply				ply
.2ff2	60		rts				rts
.2ff3					IFloatIntegerToStringR0:
.2ff3	8d d9 06	sta $06d9			sta 	IFBase 						; save base to use.
.2ff6	20 d2 32	jsr $32d2			jsr 	IFloatBufferReset			; empty buffer
.2ff9	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.2ffb	29 3f		and #$3f			and 	#IFXMask
.2ffd	d0 1d		bne $301c			bne 	_IFIFail
.2fff	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.3001	20 4a 32	jsr $324a			jsr 	IFloatCheckZero
.3004	f0 0e		beq $3014			beq 	_IFINotNegative
.3006	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.3008	29 40		and #$40			and 	#IFSign
.300a	f0 08		beq $3014			beq 	_IFINotNegative
.300c	a9 2d		lda #$2d			lda 	#"-"						; output -
.300e	20 e1 32	jsr $32e1			jsr 	IFloatBufferWrite
.3011	20 5c 32	jsr $325c			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.3014					_IFINotNegative:
.3014	20 1e 30	jsr $301e			jsr 	_IFIRecursiveConvert 		; start converting
.3017	20 d9 32	jsr $32d9			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.301a	18		clc				clc
.301b	60		rts				rts
.301c					_IFIFail:
.301c	38		sec				sec
.301d	60		rts				rts
.301e					_IFIRecursiveConvert:
.301e	a2 0c		ldx #$0c			ldx 	#IFR1
.3020	20 f3 31	jsr $31f3			jsr 	IFloatCopyToRegister 		; R0->R1
.3023	a2 08		ldx #$08			ldx 	#IFR0
.3025	ad d9 06	lda $06d9			lda 	IFBase 						; Base -> R0
.3028	20 53 32	jsr $3253			jsr 	IFloatSetByte
.302b	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.302d	20 b5 2d	jsr $2db5			jsr 	IFloatDivideInteger
.3030	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.3032	20 4a 32	jsr $324a			jsr 	IFloatCheckZero
.3035	f0 09		beq $3040			beq 	_IFIOutDigit
.3037	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.3039	48		pha				pha
.303a	20 1e 30	jsr $301e			jsr 	_IFIRecursiveConvert 		; convert the divide result
.303d	68		pla				pla
.303e	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.3040					_IFIOutDigit:
.3040	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.3042	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.3044	90 02		bcc $3048			bcc 	_IFINotHex
.3046	69 06		adc #$06			adc 	#6
.3048					_IFINotHex:
.3048	69 30		adc #$30			adc 	#48
.304a	20 e1 32	jsr $32e1			jsr 	IFloatBufferWrite 			; write character to buffer.
.304d	60		rts				rts
.06d9					IFBase:
>06d9							.fill 	1
.304e					IFloatFloatToStringR0:
.304e	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.3050	20 a0 31	jsr $31a0			jsr 	IFloatPushRx
.3053	20 f3 31	jsr $31f3			jsr 	IFloatCopyToRegister
.3056	20 52 2f	jsr $2f52			jsr 	IFloatIntegerR0				; make R0 integer
.3059	a9 0a		lda #$0a			lda 	#10 						; base 10.
.305b	20 f3 2f	jsr $2ff3			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.305e	9c da 06	stz $06da			stz 	IFloatDecimalCount 			; zero the decimal count.
.3061	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.3063	29 3f		and #$3f			and 	#IFXMask
.3065	f0 44		beq $30ab			beq 	_IFFSExit
.3067					_IFloatFracLoop:
.3067	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.3069	20 e2 31	jsr $31e2			jsr 	IFloatCopyFromRegister
.306c	20 fc 2e	jsr $2efc			jsr 	IFloatFractionalR0
.306f	20 88 32	jsr $3288			jsr 	IFloatNormalise
.3072	a2 10		ldx #$10			ldx 	#IFR2
.3074	20 f3 31	jsr $31f3			jsr 	IFloatCopyToRegister 		; copy to back R2
.3077	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.3079	a9 0a		lda #$0a			lda 	#10
.307b	20 53 32	jsr $3253			jsr 	IFloatSetByte
.307e	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.3080	20 f3 2c	jsr $2cf3			jsr 	IFloatMultiply
.3083	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.3085	20 f3 31	jsr $31f3			jsr 	IFloatCopyToRegister
.3088	20 52 2f	jsr $2f52			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.308b	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; done 3 dp, no more
.308e	c9 03		cmp #$03			cmp 	#3
.3090	f0 16		beq $30a8			beq 	_IFFSExitStripZero
.3092	ad da 06	lda $06da			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.3095	d0 05		bne $309c			bne 	_IFloatNotFirst
.3097	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3099	20 e1 32	jsr $32e1			jsr 	IFloatBufferWrite
.309c					_IFloatNotFirst:
.309c	ee da 06	inc $06da			inc 	IFloatDecimalCount
.309f	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.30a1	09 30		ora #$30			ora 	#"0"						; ASCII
.30a3	20 e1 32	jsr $32e1			jsr 	IFloatBufferWrite 			; write to the buffer.
.30a6	80 bf		bra $3067			bra 	_IFloatFracLoop
.30a8					_IFFSExitStripZero:
.30a8	20 f0 32	jsr $32f0			jsr 	IFloatStripTrailingZeros
.30ab					_IFFSExit:
.30ab	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.30ad	20 c1 31	jsr $31c1			jsr 	IFloatPullRx
.30b0	20 d9 32	jsr $32d9			jsr 	IFloatGetBufferAddress
.30b3	18		clc				clc
.30b4	60		rts				rts
.06da					IFloatDecimalCount:
>06da							.fill 	1
.30b5					IFloatStringToFloatR0:
.30b5	8d db 06	sta $06db			sta 	IFCount 					; save length and positions out.
.30b8	86 20		stx $20				stx 	iTemp0
.30ba	84 21		sty $21				sty 	iTemp0+1
.30bc	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.30be	20 51 32	jsr $3251			jsr 	IFloatSetZero
.30c1	9c dc 06	stz $06dc			stz 	IFSignFlag 					; clear the sign flag
.30c4	20 51 31	jsr $3151			jsr 	IFSTFGetNext 				; get first
.30c7	f0 1b		beq $30e4			beq 	_IFSTFFail 					; no character, fail.
.30c9	90 10		bcc $30db			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.30cb	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.30cd	d0 15		bne $30e4			bne 	_IFSTFFail
.30cf	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.30d1	8d dc 06	sta $06dc			sta 	IFSignFlag
.30d4					_IFSTFLoop:
.30d4	20 51 31	jsr $3151			jsr 	IFSTFGetNext 				; get next character
.30d7	b0 0b		bcs $30e4			bcs 	_IFSTFFail 					; bad character.
.30d9	f0 11		beq $30ec			beq 	_IFSTFExit 					; end of data
.30db					_IFSTFHaveChar:
.30db	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.30dd	f0 08		beq $30e7			beq 	_IFSTFDecimal
.30df	20 75 31	jsr $3175			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.30e2	80 f0		bra $30d4			bra 	_IFSTFLoop 					; keep going until . or end.
.30e4					_IFSTFFail:
.30e4	38		sec				sec
.30e5	80 0d		bra $30f4			bra 	_IFSTFReturn
.30e7					_IFSTFDecimal:
.30e7	20 fc 30	jsr $30fc			jsr 	IFSTFDecimal 				; call the decimal places code.
.30ea	b0 08		bcs $30f4			bcs 	_IFSTFReturn 				; error
.30ec					_IFSTFExit:
.30ec	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.30ee	0d dc 06	ora $06dc			ora 	IFSignFlag
.30f1	85 0b		sta $0b				sta 	IFR0+IExp
.30f3	18		clc				clc
.30f4					_IFSTFReturn:
.30f4	60		rts				rts
.30f5					IFloatAddDecimalToR0:
.30f5	8d db 06	sta $06db			sta 	IFCount 					; save it out.
.30f8	86 20		stx $20				stx 	iTemp0
.30fa	84 21		sty $21				sty 	iTemp0+1
.30fc					IFSTFDecimal:
.30fc	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.30fe	20 a0 31	jsr $31a0			jsr 	IFloatPushRx
.3101	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.3103	20 51 32	jsr $3251			jsr 	IFloatSetZero
.3106	9c dd 06	stz $06dd			stz 	IFDecimalPlaces 			; zero DP.
.3109					_IFSTDLoop:
.3109	20 51 31	jsr $3151			jsr 	IFSTFGetNext 				; get next
.310c	b0 41		bcs $314f			bcs 	_IFSTFFail2 				; bad character.
.310e	f0 11		beq $3121			beq 	_IFSTFComplete 				; end of data, work out the result.
.3110	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.3112	f0 39		beq $314d			beq 	_IFSTFExit2
.3114	20 75 31	jsr $3175			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.3117	ee dd 06	inc $06dd			inc 	IFDecimalPlaces 			; count decimals
.311a	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.311d	c9 03		cmp #$03			cmp 	#3
.311f	90 e8		bcc $3109			bcc 	_IFSTDLoop
.3121					_IFSTFComplete:
.3121	ad dd 06	lda $06dd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.3124	f0 27		beq $314d			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.3126	3a		dec a				dec 	a 							; table indexed from 1.
.3127	0a		asl a				asl 	a
.3128	0a		asl a				asl 	a
.3129	aa		tax				tax
.312a	bd 8c 31	lda $318c,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.312d	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.312f	bd 8d 31	lda $318d,x			lda 	TableTen+1,x
.3132	85 0d		sta $0d				sta  	IFR1+IM1
.3134	bd 8e 31	lda $318e,x			lda 	TableTen+2,x
.3137	85 0e		sta $0e				sta  	IFR1+IM2
.3139	bd 8f 31	lda $318f,x			lda 	TableTen+3,x
.313c	85 0f		sta $0f				sta  	IFR1+IExp
.313e	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.3140	20 f3 2c	jsr $2cf3			jsr 	IFloatMultiply
.3143	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.3145	20 c1 31	jsr $31c1			jsr 	IFloatPullRx
.3148	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.314a	20 49 2c	jsr $2c49			jsr 	IFloatAdd
.314d					_IFSTFExit2:
.314d	18		clc				clc
.314e	60		rts				rts
.314f					_IFSTFFail2:
.314f	38		sec				sec
.3150	60		rts				rts
.3151					IFSTFGetNext:
.3151	ad db 06	lda $06db			lda 	IFCount  					; if count is zero, return with Z set.
.3154	f0 19		beq $316f			beq 	_IFSTFReturnOk
.3156	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3158	e6 20		inc $20				inc 	iTemp0 						; point at next.
.315a	d0 02		bne $315e			bne 	_IFSTFGNNoCarry
.315c	e6 21		inc $21				inc 	iTemp0+1
.315e					_IFSTFGNNoCarry:
.315e	ce db 06	dec $06db			dec 	IFCount 					; dec count.
.3161	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.3163	f0 08		beq $316d			beq 	_IFSTFGOkay
.3165	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3167	90 08		bcc $3171			bcc 	_IFSTFGFail
.3169	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.316b	b0 04		bcs $3171			bcs 	_IFSTFGFail
.316d					_IFSTFGOkay:
.316d	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.316f					_IFSTFReturnOk:
.316f	18		clc				clc
.3170	60		rts				rts
.3171					_IFSTFGFail:
.3171	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.3173	38		sec				sec
.3174	60		rts				rts
.3175					IFSTFAddR0:
.3175	29 0f		and #$0f			and 	#15 						; to int value
.3177	48		pha				pha 								; save it.
.3178	a9 0a		lda #$0a			lda 	#10
.317a	a2 0c		ldx #$0c			ldx 	#IFR1
.317c	20 53 32	jsr $3253			jsr 	IFloatSetByte
.317f	20 f3 2c	jsr $2cf3			jsr 	IFloatMultiply
.3182	68		pla				pla
.3183	a2 0c		ldx #$0c			ldx 	#IFR1
.3185	20 53 32	jsr $3253			jsr 	IFloatSetByte
.3188	20 49 2c	jsr $2c49			jsr 	IFloatAdd
.318b	60		rts				rts
.06db					IFCount:
>06db							.fill 	1
.06dc					IFSignFlag:
>06dc							.fill 	1
.06dd					IFDecimalPlaces:
>06dd							.fill 	1
.318c					TableTen:
>318c	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>3190	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>3194	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3198	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>319c	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.31a0					IFloatPushRx:
.31a0	5a		phy				phy
.31a1	ac de 06	ldy $06de			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.31a4	b5 00		lda $00,x			lda 	IM0,x
.31a6	99 df 06	sta $06df,y			sta 	IFStack,y
.31a9	b5 01		lda $01,x			lda 	IM1,x
.31ab	99 e0 06	sta $06e0,y			sta 	IFStack+1,y
.31ae	b5 02		lda $02,x			lda 	IM2,x
.31b0	99 e1 06	sta $06e1,y			sta 	IFStack+2,y
.31b3	b5 03		lda $03,x			lda 	IExp,x
.31b5	99 e2 06	sta $06e2,y			sta 	IFStack+3,y
.31b8	c8		iny				iny
.31b9	c8		iny				iny
.31ba	c8		iny				iny
.31bb	c8		iny				iny
.31bc	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.31bf	7a		ply				ply
.31c0	60		rts				rts
.31c1					IFloatPullRx:
.31c1	5a		phy				phy
.31c2	ac de 06	ldy $06de			ldy 	IFStackIndex	 			; decrement SP
.31c5	88		dey				dey
.31c6	88		dey				dey
.31c7	88		dey				dey
.31c8	88		dey				dey
.31c9	b9 df 06	lda $06df,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.31cc	95 00		sta $00,x			sta 	IM0,x
.31ce	b9 e0 06	lda $06e0,y			lda 	IFStack+1,y
.31d1	95 01		sta $01,x			sta 	IM1,x
.31d3	b9 e1 06	lda $06e1,y			lda 	IFStack+2,y
.31d6	95 02		sta $02,x			sta 	IM2,x
.31d8	b9 e2 06	lda $06e2,y			lda 	IFStack+3,y
.31db	95 03		sta $03,x			sta 	IExp,x
.31dd	8c de 06	sty $06de			sty 	IFStackIndex 				; update SP
.31e0	7a		ply				ply
.31e1	60		rts				rts
.06de					IFStackIndex:
>06de							.fill 	1
.06df					IFStack:
>06df							.fill 	16*4
.31e2					IFloatCopyFromRegister:
.31e2	b5 00		lda $00,x			lda 	0,x
.31e4	85 08		sta $08				sta 	IFR0
.31e6	b5 01		lda $01,x			lda 	1,x
.31e8	85 09		sta $09				sta 	IFR0+1
.31ea	b5 02		lda $02,x			lda 	2,x
.31ec	85 0a		sta $0a				sta 	IFR0+2
.31ee	b5 03		lda $03,x			lda 	3,x
.31f0	85 0b		sta $0b				sta 	IFR0+3
.31f2	60		rts				rts
.31f3					IFloatCopyToRegister:
.31f3	a5 08		lda $08				lda 	IFR0
.31f5	95 00		sta $00,x			sta 	0,x
.31f7	a5 09		lda $09				lda 	IFR0+1
.31f9	95 01		sta $01,x			sta 	1,x
.31fb	a5 0a		lda $0a				lda 	IFR0+2
.31fd	95 02		sta $02,x			sta 	2,x
.31ff	a5 0b		lda $0b				lda 	IFR0+3
.3201	95 03		sta $03,x			sta 	3,x
.3203	60		rts				rts
.3204					IFloatLoadInline:
.3204	68		pla				pla 								; pop address off to iTemp0
.3205	85 20		sta $20				sta 	iTemp0
.3207	68		pla				pla
.3208	85 21		sta $21				sta 	iTemp0+1
.320a	a0 01		ldy #$01			ldy 	#1
.320c	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.320e	95 00		sta $00,x			sta 	0,x
.3210	c8		iny				iny
.3211	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.3213	95 01		sta $01,x			sta 	1,x
.3215	c8		iny				iny
.3216	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.3218	95 02		sta $02,x			sta 	2,x
.321a	c8		iny				iny
.321b	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.321d	95 03		sta $03,x			sta 	3,x
.321f	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.3220	a5 20		lda $20				lda 	iTemp0
.3222	69 05		adc #$05			adc 	#5
.3224	85 20		sta $20				sta 	iTemp0
.3226	90 02		bcc $322a			bcc 	_IFLINoCarry
.3228	e6 21		inc $21				inc 	iTemp0+1
.322a					_IFLINoCarry:
.322a	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.322d					IFloatMultiply8BitRx:
.322d	5a		phy		        phy
.322e	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.3230	a4 08		ldy $08		        ldy     IFR0+IM0
.3232	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.3233	85 08		sta $08		        sta     IFR0+IM0
.3235	84 09		sty $09		        sty     IFR0+IM1
.3237	a9 00		lda #$00	        lda     #0
.3239	a0 08		ldy #$08	        ldy     #8
.323b					_IFMLoop:
.323b	90 03		bcc $3240	        bcc     _IFMNoAdd
.323d	18		clc		        clc
.323e	65 09		adc $09		        adc     IFR0+IM1
.3240					_IFMNoAdd:
.3240	6a		ror a		        ror     a
.3241	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.3243	88		dey		        dey
.3244	d0 f5		bne $323b	        bne     _IFMLoop
.3246	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3248	7a		ply		        ply
.3249	60		rts		        rts
.324a					IFloatCheckZero:
.324a	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.324c	15 01		ora $01,x			ora 	IM1,x
.324e	15 02		ora $02,x			ora 	IM2,x
.3250	60		rts				rts
.3251					IFloatSetZero:
.3251	a9 00		lda #$00			lda 	#0
.3253					IFloatSetByte:
.3253	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3255	74 01		stz $01,x			stz 	IM1,x
.3257	74 02		stz $02,x			stz 	IM2,x
.3259	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.325b	60		rts				rts
.325c					IFloatNegate:
.325c	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.325e	49 40		eor #$40			eor 	#IFSign
.3260	95 03		sta $03,x			sta 	IExp,x
.3262	18		clc				clc
.3263	60		rts				rts
.3264					IFloatMantissaNegate:
.3264	38		sec				sec 								; when you want a real 2's complement negative value.
.3265	a9 00		lda #$00			lda 	#0
.3267	f5 00		sbc $00,x			sbc 	IM0,x
.3269	95 00		sta $00,x			sta 	IM0,x
.326b	a9 00		lda #$00			lda 	#0
.326d	f5 01		sbc $01,x			sbc 	IM1,x
.326f	95 01		sta $01,x			sta 	IM1,x
.3271	a9 00		lda #$00			lda 	#0
.3273	f5 02		sbc $02,x			sbc 	IM2,x
.3275	95 02		sta $02,x			sta 	IM2,x
.3277	60		rts				rts
.3278					IFloatShiftLeft:
.3278	18		clc				clc
.3279					IFloatRotateLeft:
.3279	36 00		rol $00,x			rol 	IM0,x
.327b	36 01		rol $01,x			rol 	IM1,x
.327d	36 02		rol $02,x			rol 	IM2,x
.327f	60		rts				rts
.3280					IFloatShiftRight:
.3280	18		clc				clc
.3281					IFloatRotateRight:
.3281	76 02		ror $02,x			ror 	IM2,x
.3283	76 01		ror $01,x			ror 	IM1,x
.3285	76 00		ror $00,x			ror 	IM0,x
.3287	60		rts				rts
.3288					IFloatNormalise:
.3288	20 4a 32	jsr $324a			jsr 	IFloatCheckZero 			; is it zero
.328b	f0 18		beq $32a5			beq 	_IFNExitZero 				; if so exit
.328d					_IFNLoop:
.328d	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.328f	29 c0		and #$c0			and 	#$C0
.3291	c9 40		cmp #$40			cmp 	#$40
.3293	f0 13		beq $32a8			beq 	_IFNExitOkay 				; if so , then we are done.
.3295	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3297	29 3f		and #$3f			and 	#$3F
.3299	c9 20		cmp #$20			cmp 	#$20
.329b	f0 0b		beq $32a8			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.329d	20 be 32	jsr $32be			jsr 	IFloatDecExponent
.32a0	20 78 32	jsr $3278			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.32a3	80 e8		bra $328d			bra 	_IFNLoop
.32a5					_IFNExitZero:
.32a5	20 51 32	jsr $3251			jsr 	IFloatSetZero 				; set the result to zero
.32a8					_IFNExitOkay:
.32a8	18		clc				clc  								; return with CC.
.32a9	60		rts				rts
.32aa					IFloatIncExponent:
.32aa	b5 03		lda $03,x			lda 	IExp,x
.32ac	48		pha				pha
.32ad	29 c0		and #$c0			and 	#$C0
.32af	8d 1f 07	sta $071f			sta 	IFXTemp
.32b2	68		pla				pla
.32b3	1a		inc a				inc 	a
.32b4	29 3f		and #$3f			and 	#$3F
.32b6	48		pha				pha
.32b7	0d 1f 07	ora $071f			ora 	IFXTemp
.32ba	95 03		sta $03,x			sta 	IExp,x
.32bc	68		pla				pla
.32bd	60		rts				rts
.32be					IFloatDecExponent:
.32be	b5 03		lda $03,x			lda 	IExp,x
.32c0	48		pha				pha
.32c1	29 c0		and #$c0			and 	#$C0
.32c3	8d 1f 07	sta $071f			sta 	IFXTemp
.32c6	68		pla				pla
.32c7	3a		dec a				dec 	a
.32c8	29 3f		and #$3f			and 	#$3F
.32ca	48		pha				pha
.32cb	0d 1f 07	ora $071f			ora 	IFXTemp
.32ce	95 03		sta $03,x			sta 	IExp,x
.32d0	68		pla				pla
.32d1	60		rts				rts
.071f					IFXTemp:
>071f							.fill 	1
.32d2					IFloatBufferReset:
.32d2	9c 20 07	stz $0720			stz 	IFBufferCount
.32d5	9c 21 07	stz $0721			stz 	IFBuffer
.32d8	60		rts				rts
.32d9					IFloatGetBufferAddress:
.32d9	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.32db	a2 20		ldx #$20			ldx 	#(IFBufferCount & $FF)
.32dd	ad 20 07	lda $0720			lda 	IFBufferCount
.32e0	60		rts				rts
.32e1					IFloatBufferWrite:
.32e1	da		phx				phx
.32e2	ae 20 07	ldx $0720			ldx 	IFBufferCount
.32e5	9d 21 07	sta $0721,x			sta 	IFBuffer,x
.32e8	9e 22 07	stz $0722,x			stz 	IFBuffer+1,x
.32eb	ee 20 07	inc $0720			inc 	IFBufferCount
.32ee	fa		plx				plx
.32ef	60		rts				rts
.32f0					IFloatStripTrailingZeros:
.32f0	ae 20 07	ldx $0720			ldx 	IFBufferCount
.32f3	bd 20 07	lda $0720,x			lda 	IFBuffer-1,x
.32f6	c9 30		cmp #$30			cmp		#"0"
.32f8	d0 0f		bne $3309			bne 	_IFSTExit
.32fa	bd 1f 07	lda $071f,x			lda 	IFBuffer-2,x
.32fd	c9 2e		cmp #$2e			cmp 	#"."
.32ff	f0 08		beq $3309			beq 	_IFSTExit
.3301	ce 20 07	dec $0720			dec 	IFBufferCount
.3304	9e 20 07	stz $0720,x			stz 	IFBuffer-1,x
.3307	80 e7		bra $32f0			bra 	IFloatStripTrailingZeros
.3309					_IFSTExit:
.3309	60		rts				rts
.0720					IFBufferCount:
>0720							.fill 	1
.0721					IFBuffer:
>0721							.fill 	25
.330a					IFloatCheckRange:
.330a	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.330c	09 40		ora #$40			ora 	#IFSign
.330e	85 0b		sta $0b				sta 	IFR0+IExp
.3310	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.3312	20 49 2c	jsr $2c49			jsr 	IFloatAdd 					; add allowed to error.
.3315	a2 08		ldx #$08			ldx 	#IFR0
.3317	20 4a 32	jsr $324a			jsr 	IFloatCheckZero 			; error if < 0
.331a	f0 06		beq $3322			beq 	_IFAOkay
.331c	a5 0b		lda $0b				lda 	IFR0+IExp
.331e	29 40		and #$40			and 	#IFSign
.3320	d0 01		bne $3323			bne 	_IFAFail
.3322					_IFAOkay:
.3322	60		rts				rts
.3323					_IFAFail:
.3323	38		sec				sec
.3324	68		pla				pla 								; get address - 2
.3325	e9 02		sbc #$02			sbc 	#2
.3327	aa		tax				tax
.3328	68		pla				pla
.3329	e9 00		sbc #$00			sbc 	#0
.332b	a8		tay				tay
.332c	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.332e					_IFAStop:
>332e	db						.byte 	$DB 						; display an error AA ADR ADR
.332f	80 fd		bra $332e			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
