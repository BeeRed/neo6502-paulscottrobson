
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -o build/basic.bin basic.asm
; Wed Jul  5 10:15:27 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
.025d					OSXEdit:
>025d							.fill 	1
.025e					OSYEdit:
>025e							.fill 	1
.025f					OSEditPos:
>025f							.fill 	1
.0260					OSEditScroll:
>0260							.fill 	1
=192					OSTextBufferSize = 192
.0261					OSEditWidth:
>0261							.fill 	1
.0262					OSEditLength:
>0262							.fill 	1
.0263					OSEditBuffer:
>0263							.fill 	OSTextBufferSize+1
>0324							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0344					sectorSize:
>0344							.fill 	2
.0346					sectorCount:
>0346							.fill 	2
.0348					currentSector:
>0348							.fill 	2
.034a					successFlag:
>034a							.fill 	1
.034b					sectorHeader:
.034b					shFirstNext:
>034b							.fill 	1
.034c					shContinue:
>034c							.fill 	1
.034d					shDataSize:
>034d							.fill 	2
.034f					shFileSize:
>034f							.fill 	2
>0351							.fill 	10
.035b					shNameLength:
>035b							.fill 	1
.035c					shNameText:
>035c							.fill 	15
.036b					shFileSizeCopy:
>036b							.fill 	2
.036d					notFirstSector:
>036d							.fill 	1
.036e					sectorCapacity:
>036e							.fill 	2
.0370					fileRemainingSize:
>0370							.fill 	2
.0372					bytesToWrite:
>0372							.fill 	2
>0374							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffca					OSReadDirectory          = $ffca ; Read file directory.
=$ffcd					OSDeleteFile             = $ffcd ; Delete file
=$ffd0					OSReadFile               = $ffd0 ; Read file into memory
=$ffd3					OSWriteFile              = $ffd3 ; Write file from memory
=$ffd6					OSFormatFlash            = $ffd6 ; Format drive
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 21 21	jsr $2121			jsr 	PGMSetBaseAddress
.1007	20 c8 2d	jsr $2dc8			jsr 	IFInitialise 				; setup math library
.100a	4c 2f 14	jmp $142f			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="I"					AM_ABSOLUTEIX	= 'I' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d0					AM_IND 		= ('P'|AM_ZPAGE) 				; lda (nn)
=$d1					AM_INDX		= ('Q'|AM_ZPAGE) 				; lda (nn,x)
=$d2					AM_INDY		= ('R'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f
=$8d90					PR_RENUMBER = $8d90

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/assembler/entry.asm

.100d					Command_AssemblerStart:
.100d					_CALoop:
>100d	db						.byte 	$DB
.100e	b1 18		lda ($18),y			lda 	(codePtr),y 				; what's next.
.1010	c8		iny				iny 								; consume it.
.1011	c9 a5		cmp #$a5			cmp 	#PR_PERIOD 					; .label
.1013	f0 11		beq $1026			beq 	_CALabel
.1015	c9 a3		cmp #$a3			cmp 	#PR_RSQ  					; ] exit
.1017	f0 18		beq $1031			beq 	_CAExit
.1019	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; : loop back round again.
.101b	f0 f0		beq $100d			beq 	_CALoop
.101d	29 c0		and #$c0			and 	#$C0 						; is it an identifier (which we will make an opcode)
.101f	c9 40		cmp #$40			cmp 	#$40
.1021	f0 08		beq $102b			beq 	_CAOpcode
.1023	4c 65 27	jmp $2765		jmp	ErrorV_syntax
.1026					_CALabel:
.1026	20 32 10	jsr $1032			jsr 	ASLabel 					; handle a label
.1029	80 e2		bra $100d			bra 	_CALoop
.102b					_CAOpcode:
.102b	88		dey				dey 								; get it back
.102c	20 33 10	jsr $1033			jsr 	ASOpcode 					; assemble that opcode.
.102f	80 dc		bra $100d			bra 	_CALoop
.1031					_CAExit:
.1031	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/assembler/label.asm

.1032					ASLabel:
>1032	db						.byte 	$DB

;******  Return to file: include.files


;******  Processing file: src/assembler/opcode/opcode.asm

.1033					ASOpcode:
>1033	db						.byte 	$DB

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1034					Command_ASSERT:
.1034	20 76 17	jsr $1776			jsr 	EXPEvalNumber 				; get a number to assert
.1037	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.1039	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero
.103c	f0 01		beq $103f			beq 	_CAFail 					; if so, the assert fails.
.103e	60		rts				rts
.103f					_CAFail:
.103f	4c bb 27	jmp $27bb		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1042					Command_CLEAR:
.1042	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1044	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1046	f0 14		beq $105c			beq 	_CLNoParam
.1048	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.104a	f0 10		beq $105c			beq 	_CLNoParam
.104c	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; address for CLEAR
.104f	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1051	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1053	b0 0b		bcs $1060			bcs 	_CLMemory
.1055	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1057	90 07		bcc $1060			bcc 	_CLMemory
.1059	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.105c					_CLNoParam:
.105c	20 63 10	jsr $1063			jsr 	ClearCode
.105f	60		rts				rts
.1060					_CLMemory:
.1060	4c 55 28	jmp $2855		jmp	ErrorV_memory
.1063					ClearCode:
.1063	20 34 21	jsr $2134			jsr 	PGMEndProgram 				; end program => zTemp0
.1066	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.1068	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.106a	1a		inc a				inc 	a
.106b	85 2b		sta $2b				sta 	freeMemory+1
.106d	20 67 2d	jsr $2d67			jsr 	VARClearHashTables
.1070	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.1073	20 ac 29	jsr $29ac			jsr 	StackReset 					; page passed on in A
.1076	20 0b 2a	jsr $2a0b			jsr 	StringSystemInitialise
.1079	20 d0 26	jsr $26d0			jsr 	ScanProcedures
.107c	20 fd 14	jsr $14fd			jsr 	Command_RESTORE
.107f	60		rts				rts
.1080					AllocateMemory:
.1080	5a		phy				phy 								; save Y
.1081	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.1083	5a		phy				phy
.1084	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.1086	5a		phy				phy
.1087	a8		tay				tay 								; count is now in XY
.1088					_AllocateLoop:
.1088	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.108a	d0 04		bne $1090			bne 	_AllocateOne
.108c	c0 00		cpy #$00			cpy 	#0
.108e	f0 15		beq $10a5			beq 	_AllocateExit
.1090					_AllocateOne:
.1090	a9 00		lda #$00			lda 	#0 							; zero byte
.1092	92 2a		sta ($2a)			sta 	(freeMemory)
.1094	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.1096	d0 05		bne $109d			bne 	_AllocateSkipCarry
.1098	e6 2b		inc $2b				inc 	freeMemory+1
.109a	20 a9 10	jsr $10a9			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.109d					_AllocateSkipCarry:
.109d	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.109f	d0 01		bne $10a2			bne 	_AllocateSkipBorrow
.10a1	ca		dex				dex
.10a2					_AllocateSkipBorrow:
.10a2	88		dey				dey
.10a3	80 e3		bra $1088			bra 	_AllocateLoop
.10a5					_AllocateExit:
.10a5	fa		plx				plx 								; restore address
.10a6	68		pla				pla
.10a7	7a		ply				ply 								; restore Y
.10a8	60		rts				rts
.10a9					ClearCheckMemory:
.10a9	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.10ab	1a		inc a				inc 	a 							; spacing 2 pages
.10ac	1a		inc a				inc 	a
.10ad	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.10b0	b0 01		bcs $10b3			bcs  	_CCMError
.10b2	60		rts				rts
.10b3					_CCMError:
.10b3	4c 55 28	jmp $2855		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.10b6					CommandDIM:
.10b6	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.10b8	29 c0		and #$c0			and 	#$C0
.10ba	c9 40		cmp #$40			cmp 	#$40
.10bc	d0 39		bne $10f7			bne 	_CDSyntax
.10be	20 1e 2d	jsr $2d1e			jsr 	VARGetInfo 					; get information
.10c1	ad 31 06	lda $0631			lda 	VARType 					; check array.
.10c4	29 02		and #$02			and 	#2
.10c6	f0 2f		beq $10f7			beq 	_CDSyntax
.10c8	20 d0 2c	jsr $2cd0			jsr 	VARFind 					; does it already exist
.10cb	b0 2d		bcs $10fa			bcs 	_CDExists
.10cd	20 7c 2c	jsr $2c7c			jsr 	VARCreate 					; create it - returns data ptr in XA
.10d0	da		phx				phx 								; save target address
.10d1	48		pha				pha
.10d2	ad 31 06	lda $0631			lda 	VARType 					; type ID.
.10d5	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10d7	20 fd 10	jsr $10fd			jsr 	CreateArray 				; create array to XA
.10da	84 26		sty $26				sty 	zTemp1 						; save Y
.10dc	7a		ply				ply 								; restore target to zTemp0
.10dd	84 24		sty $24				sty 	zTemp0
.10df	7a		ply				ply
.10e0	84 25		sty $25				sty 	zTemp0+1
.10e2	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.10e4	a0 01		ldy #$01			ldy 	#1
.10e6	8a		txa				txa
.10e7	91 24		sta ($24),y			sta 	(zTemp0),y
.10e9	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.10eb	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 				; check )
.10ee	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10f0	c8		iny				iny
.10f1	c9 99		cmp #$99			cmp 	#PR_COMMA
.10f3	f0 c1		beq $10b6			beq 	CommandDIM
.10f5	88		dey				dey
.10f6	60		rts				rts
.10f7					_CDSyntax:
.10f7	4c 65 27	jmp $2765		jmp	ErrorV_syntax
.10fa					_CDExists:
.10fa	4c 2d 28	jmp $282d		jmp	ErrorV_redefine
.10fd					CreateArray:
.10fd	8d 03 05	sta $0503			sta 	CAType						; save type
.1100	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; get array dimension to R0
.1103	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.1105	c9 99		cmp #$99			cmp 	#PR_COMMA
.1107	f0 04		beq $110d			beq 	_CATwoDimensions
.1109	20 59 11	jsr $1159			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.110c	60		rts				rts
.110d					_CATwoDimensions:
.110d	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.110f	8d 05 05	sta $0505			sta 	CADim1+1
.1112	a5 08		lda $08				lda 	IFR0+IM0
.1114	8d 04 05	sta $0504			sta 	CADim1+0
.1117	20 46 29	jsr $2946			jsr 	ERRCheckComma 				; check comma
.111a	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.111d	5a		phy				phy 								; save Y position
.111e	18		clc				clc 								; allocate the outer array of pointers.
.111f	ae 05 05	ldx $0505			ldx 	CADim1+1
.1122	ad 04 05	lda $0504			lda 	CADim1
.1125	20 98 11	jsr $1198			jsr 	CSAAllocate 				; allocate the outer array
.1128	da		phx				phx									; save this address on the stack
.1129	48		pha				pha
.112a	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.112c	85 28		sta $28				sta 	zTemp2
.112e					_CACreateSubLoop:
.112e	38		sec				sec
.112f	20 59 11	jsr $1159			jsr 	CreateSingleArray 			; create data array of required size.
.1132	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1134	91 28		sta ($28),y			sta 	(zTemp2),y
.1136	8a		txa				txa
.1137	c8		iny				iny
.1138	91 28		sta ($28),y			sta 	(zTemp2),y
.113a	18		clc				clc  								; next slot.
.113b	a5 28		lda $28				lda 	zTemp2
.113d	69 02		adc #$02			adc 	#2
.113f	85 28		sta $28				sta 	zTemp2
.1141	90 02		bcc $1145			bcc 	_CACNoCarry
.1143	e6 29		inc $29				inc 	zTemp2+1
.1145					_CACNoCarry:
.1145	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1148	d0 03		bne $114d			bne 	_CACNoBorrow
.114a	ce 05 05	dec $0505			dec 	CADim1+1
.114d					_CACNoBorrow:
.114d	ce 04 05	dec $0504			dec 	CADim1
.1150	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1153	10 d9		bpl $112e			bpl 	_CACreateSubLoop
.1155	68		pla				pla
.1156	fa		plx				plx
.1157	7a		ply				ply
.1158	60		rts				rts
.1159					CreateSingleArray:
.1159	5a		phy				phy
.115a	38		sec				sec 								; allocate memory block all zeros.
.115b	a5 08		lda $08				lda 	IFR0+IM0
.115d	a6 09		ldx $09				ldx 	IFR0+IM1
.115f	20 98 11	jsr $1198			jsr 	CSAAllocate
.1162	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1165	f0 2f		beq $1196			beq 	_CSANoInit
.1167	da		phx				phx 								; save address of new array
.1168	48		pha				pha
.1169	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.116b	86 25		stx $25				stx 	zTemp0+1
.116d	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.116f	b1 24		lda ($24),y			lda 	(zTemp0),y
.1171	a8		tay				tay
.1172	b2 24		lda ($24)			lda 	(zTemp0)
.1174	aa		tax				tax
.1175					_CSAEraseString:
.1175	5a		phy				phy
.1176	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1178	a9 80		lda #$80			lda 	#$80
.117a	91 24		sta ($24),y			sta 	(zTemp0),y
.117c	7a		ply				ply
.117d	18		clc				clc 								; add 4 to next slot.
.117e	a5 24		lda $24				lda 	zTemp0
.1180	69 04		adc #$04			adc 	#4
.1182	85 24		sta $24				sta 	zTemp0
.1184	90 02		bcc $1188			bcc 	_CSAENoCarry
.1186	e6 25		inc $25				inc 	zTemp0+1
.1188					_CSAENoCarry:
.1188	e0 00		cpx #$00			cpx 	#0
.118a	d0 01		bne $118d			bne 	_CSANoBorrow
.118c	88		dey				dey
.118d					_CSANoBorrow:
.118d	ca		dex				dex
.118e	d0 e5		bne $1175			bne 	_CSAEraseString
.1190	c0 00		cpy #$00			cpy 	#0
.1192	d0 e1		bne $1175			bne 	_CSAEraseString
.1194	68		pla				pla
.1195	fa		plx				plx
.1196					_CSANoInit:
.1196	7a		ply				ply
.1197	60		rts				rts
.1198					CSAAllocate:
.1198	08		php				php 								; save type flag.
.1199	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.119a	d0 01		bne $119d			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.119c	e8		inx				inx
.119d					_CSAANoCarry:
.119d	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.119f	b0 2e		bcs $11cf			bcs 	_CSARange
.11a1	28		plp				plp 								; restore type flag
.11a2	08		php				php 								; save it back again.
.11a3	da		phx				phx 								; save size.
.11a4	48		pha				pha
.11a5	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.11a7	90 03		bcc $11ac			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.11a9	0a		asl a				asl 	a
.11aa	26 25		rol $25				rol 	zTemp0+1
.11ac					_CSAATimes2:
.11ac	0a		asl a				asl 	a
.11ad	26 25		rol $25				rol 	zTemp0+1
.11af	18		clc				clc
.11b0	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.11b2	90 02		bcc $11b6			bcc 	_CSAANoCarry2
.11b4	e6 25		inc $25				inc 	zTemp0+1
.11b6					_CSAANoCarry2:
.11b6	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.11b8	20 80 10	jsr $1080			jsr 	AllocateMemory 				; allocate memory to XA
.11bb	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.11bd	85 24		sta $24				sta 	zTemp0
.11bf	68		pla				pla  								; write element count to first 2 bytes
.11c0	92 24		sta ($24)			sta 	(zTemp0)
.11c2	68		pla				pla 								; msb of element count
.11c3	28		plp				plp 								; CC if pointer array
.11c4	b0 02		bcs $11c8			bcs 	_CSAAIsData
.11c6	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11c8					_CSAAIsData:
.11c8	a0 01		ldy #$01			ldy 	#1
.11ca	91 24		sta ($24),y			sta 	(zTemp0),y
.11cc	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.11ce	60		rts				rts
.11cf					_CSARange:
.11cf	4c 76 27	jmp $2776		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11d2					Command_Doke:
.11d2	38		sec				sec
.11d3	80 01		bra $11d6			bra 	DPCommon
.11d5					Command_Poke:
.11d5	18		clc				clc
.11d6					DPCommon:
.11d6	08		php				php 								; CS if DOKE
.11d7	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; address
.11da	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11dc	48		pha				pha
.11dd	a5 09		lda $09				lda 	IFR0+IM1
.11df	48		pha				pha
.11e0	20 46 29	jsr $2946			jsr 	ERRCheckComma 				; [dp]oke address,data
.11e3	20 88 17	jsr $1788			jsr 	EXPEvalInteger16
.11e6	68		pla				pla 								; get address back
.11e7	85 25		sta $25				sta 	zTemp0+1
.11e9	68		pla				pla
.11ea	85 24		sta $24				sta 	zTemp0
.11ec	a5 08		lda $08				lda 	IFR0+IM0 					; write out LSB (e.g. POKE)
.11ee	92 24		sta ($24)			sta 	(zTemp0)
.11f0	28		plp				plp 								; done if CC
.11f1	90 08		bcc $11fb			bcc 	_DPExit
.11f3	5a		phy				phy 								; else write out MSB (e.g. DOKE)
.11f4	a5 09		lda $09				lda 	IFR0+IM1
.11f6	a0 01		ldy #$01			ldy 	#1
.11f8	91 24		sta ($24),y			sta 	(zTemp0),y
.11fa	7a		ply				ply
.11fb					_DPExit:
.11fb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11fc					Command_GOTO:
.11fc	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; get line number
.11ff					GotoR0:
.11ff	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1202	85 19		sta $19				sta 	codePtr+1
.1204	64 18		stz $18				stz 	codePtr
.1206					_GOSearch:
.1206	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.1208	f0 1f		beq $1229			beq 	_GOError
.120a	a0 01		ldy #$01			ldy 	#1 							; found line #
.120c	b1 18		lda ($18),y			lda 	(codePtr),y
.120e	c5 08		cmp $08				cmp 	IFR0+IM0
.1210	d0 0a		bne $121c			bne 	_GONext
.1212	c8		iny				iny
.1213	b1 18		lda ($18),y			lda 	(codePtr),y
.1215	c5 09		cmp $09				cmp 	IFR0+IM1
.1217	d0 03		bne $121c			bne 	_GONext
.1219	4c 42 15	jmp $1542			jmp 	RUNNewLine
.121c					_GONext:
.121c	18		clc				clc 								; advance to next line.
.121d	b2 18		lda ($18)			lda 	(codePtr)
.121f	65 18		adc $18				adc 	codePtr
.1221	85 18		sta $18				sta 	codePtr
.1223	90 e1		bcc $1206			bcc 	_GOSearch
.1225	e6 19		inc $19				inc 	codePtr+1
.1227	80 dd		bra $1206			bra 	_GOSearch
.1229					_GOError:
.1229	4c fa 28	jmp $28fa		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.122c					Command_Input:
.122c	a9 ff		lda #$ff			lda 	#$FF
.122e	8d 06 05	sta $0506			sta 	InputFlag
.1231	80 03		bra $1236			bra 	Command_IP_Main
.1233					Command_Print:
.1233	9c 06 05	stz $0506			stz 	InputFlag
.1236					Command_IP_Main:
.1236	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1237					_CPLoop:
.1237	08		php				php 								; save last action flag
.1238	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.123a	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.123c	f0 48		beq $1286			beq 	_CPExit 					; without consuming
.123e	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1240	f0 44		beq $1286			beq 	_CPExit
.1242	68		pla				pla 								; throw last action flag
.1243	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.1245	c8		iny				iny
.1246	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1248	f0 39		beq $1283			beq 	_CPContinueWithSameLine
.124a	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.124c	f0 30		beq $127e			beq 	_CPTab
.124e	88		dey				dey 								; undo the get.
.124f	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.1252	10 0b		bpl $125f			bpl	 	_CPNotInput
.1254	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1256	c9 40		cmp #$40			cmp 	#$40
.1258	d0 05		bne $125f			bne 	_CPNotInput
.125a	20 8f 12	jsr $128f			jsr 	_CPInputCode 				; input code
.125d	80 d7		bra $1236			bra 	Command_IP_Main 			; and go round again.
.125f					_CPNotInput:
.125f	20 36 17	jsr $1736			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1262	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1264	10 0e		bpl $1274			bpl 	_CPNumber
.1266	5a		phy				phy
.1267	18		clc				clc 								; string address to YX
.1268	a5 08		lda $08				lda 	IFR0+IM0
.126a	aa		tax				tax
.126b	a5 09		lda $09				lda 	IFR0+IM1
.126d	a8		tay				tay
.126e	20 c3 12	jsr $12c3			jsr 	CPPrintYX 					; print YX
.1271	7a		ply				ply
.1272	80 c2		bra $1236			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1274					_CPNumber:
.1274	5a		phy				phy
.1275	20 d8 31	jsr $31d8			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1278	20 c3 12	jsr $12c3			jsr 	CPPrintYX 					; print string at YX
.127b	7a		ply				ply
.127c	80 b8		bra $1236			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.127e					_CPTab:
.127e	a9 09		lda #$09			lda 	#9 							; print TAB
.1280	20 db 12	jsr $12db			jsr 	CPPrintA
.1283					_CPContinueWithSameLine:
.1283	38		sec				sec 								; loop round with carry set, which
.1284	80 b1		bra $1237			bra 	_CPLoop 					; will inhibit final CR
.1286					_CPExit:
.1286	28		plp				plp 								; get last action flag
.1287	b0 05		bcs $128e			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.1289	a9 0d		lda #$0d			lda 	#13 						; print new line
.128b	20 db 12	jsr $12db			jsr 	CPPrintA
.128e					_CPExit2:
.128e	60		rts				rts
.128f					_CPInputCode:
.128f	20 fe 17	jsr $17fe			jsr 	EXPTermR0 					; get the term.
.1292	5a		phy				phy 								; save position
.1293	20 d8 12	jsr $12d8			jsr 	CPInputA					; input a line to YX
.1296	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1298	30 18		bmi $12b2			bmi 	_CPInputString
.129a	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.129c	48		pha				pha
.129d	a5 09		lda $09				lda 	IFR0+IM1
.129f	48		pha				pha
.12a0	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.12a2	84 25		sty $25				sty 	zTemp0+1
.12a4	20 e8 1a	jsr $1ae8			jsr 	VALConversionZTemp0
.12a7	68		pla				pla 								; do the assign.
.12a8	85 25		sta $25				sta 	zTemp0+1
.12aa	68		pla				pla
.12ab	85 24		sta $24				sta 	zTemp0
.12ad	20 03 13	jsr $1303			jsr 	AssignNumber
.12b0	7a		ply				ply
.12b1	60		rts				rts
.12b2					_CPInputString:
.12b2	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.12b4	85 24		sta $24				sta 	zTemp0
.12b6	a5 09		lda $09				lda 	IFR0+IM1
.12b8	85 25		sta $25				sta 	zTemp0+1
.12ba	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.12bc	84 09		sty $09				sty 	IFR0+IM1
.12be	20 1a 13	jsr $131a			jsr 	AssignString 				; assign the string
.12c1	7a		ply				ply 								; exit
.12c2	60		rts				rts
.12c3					CPPrintYX:
.12c3	86 24		stx $24				stx 	zTemp0
.12c5	84 25		sty $25				sty 	zTemp0+1
.12c7	b2 24		lda ($24)			lda 	(zTemp0)
.12c9	aa		tax				tax
.12ca	f0 0b		beq $12d7			beq 	_CPPrintExit
.12cc	a0 01		ldy #$01			ldy 	#1
.12ce					_CPPrintAYXLoop:
.12ce	b1 24		lda ($24),y			lda 	(zTemp0),y
.12d0	20 db 12	jsr $12db			jsr 	CPPrintA
.12d3	c8		iny				iny
.12d4	ca		dex				dex
.12d5	d0 f7		bne $12ce			bne 	_CPPrintAYXLoop
.12d7					_CPPrintExit:
.12d7	60		rts				rts
.12d8					CPInputA:
.12d8	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.12db					CPPrintA:
.12db	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12de					CommandLET:
.12de	20 fe 17	jsr $17fe			jsr 	EXPTermR0 					; get term
.12e1	90 6f		bcc $1352			bcc 	CLError 					; must be a reference term.
.12e3	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12e5	48		pha				pha
.12e6	a5 09		lda $09				lda 	IFR0+IM1
.12e8	48		pha				pha
.12e9	a5 0b		lda $0b				lda 	IFR0+IExp
.12eb	48		pha				pha
.12ec	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12ee	20 4e 29	jsr $294e			jsr 	ERRCheckA
.12f1	20 36 17	jsr $1736			jsr 	EXPEvaluateExpression 		; right hand side.
.12f4	68		pla				pla 								; type of l-expr
.12f5	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12f7	30 5c		bmi $1355			bmi 	CLType
.12f9	fa		plx				plx 	 							; pop target address to zTemp0
.12fa	86 25		stx $25				stx 	zTemp0+1
.12fc	fa		plx				plx
.12fd	86 24		stx $24				stx 	zTemp0
.12ff					AssignData:
.12ff	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.1301	30 17		bmi $131a			bmi 	AssignString
.1303					AssignNumber:
.1303	5a		phy				phy
.1304	a0 03		ldy #$03			ldy 	#3
.1306	a5 0b		lda $0b				lda 	IFR0+IExp
.1308	91 24		sta ($24),y			sta 	(zTemp0),y
.130a	88		dey				dey
.130b	a5 0a		lda $0a				lda 	IFR0+IM2
.130d	91 24		sta ($24),y			sta 	(zTemp0),y
.130f	88		dey				dey
.1310	a5 09		lda $09				lda 	IFR0+IM1
.1312	91 24		sta ($24),y			sta 	(zTemp0),y
.1314	a5 08		lda $08				lda 	IFR0+IM0
.1316	92 24		sta ($24)			sta 	(zTemp0)
.1318	7a		ply				ply
.1319	60		rts				rts
.131a					AssignString:
.131a	5a		phy				phy
.131b	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.131d	b1 24		lda ($24),y			lda 	(zTemp0),y
.131f	12 24		ora ($24)			ora 	(zTemp0)
.1321	f0 23		beq $1346			beq 	_CLConcreteString
.1323	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1325	85 26		sta $26				sta 	zTemp1
.1327	b1 24		lda ($24),y			lda 	(zTemp0),y
.1329	85 27		sta $27				sta 	zTemp1+1
.132b	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.132d	38		sec				sec 								; we want 3 for slot size, status, string size.
.132e	e9 03		sbc #$03			sbc 	#3
.1330	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1332	90 12		bcc $1346			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1334	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1336	1a		inc a				inc 	a
.1337	aa		tax				tax
.1338	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.133a					_CLReplaceString:
.133a	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.133c	c8		iny				iny
.133d	c8		iny				iny
.133e	91 26		sta ($26),y			sta 	(zTemp1),y
.1340	88		dey				dey
.1341	ca		dex				dex
.1342	d0 f6		bne $133a			bne 	_CLReplaceString
.1344	80 0a		bra $1350			bra 	_CLExit
.1346					_CLConcreteString:
.1346	20 c0 29	jsr $29c0			jsr 	StringConcrete  			; concreted string in XA.
.1349	a0 01		ldy #$01			ldy 	#1 							; store the address
.134b	92 24		sta ($24)			sta 	(zTemp0)
.134d	8a		txa				txa
.134e	91 24		sta ($24),y			sta 	(zTemp0),y
.1350					_CLExit:
.1350	7a		ply				ply
.1351	60		rts				rts
.1352					CLError:
.1352	4c 98 28	jmp $2898		jmp	ErrorV_variable
.1355					CLType:
.1355	4c 95 27	jmp $2795		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1358					Command_LIST:
.1358	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.135b	9c 08 05	stz $0508			stz 	CLFrom+1
.135e	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1360	c9 99		cmp #$99			cmp 	#PR_COMMA
.1362	f0 1d		beq $1381			beq 	_CLToLine
.1364	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1366	f0 37		beq $139f			beq 	_CLDefaultTo
.1368	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.136b	a5 08		lda $08				lda 	IFR0+IM0
.136d	8d 07 05	sta $0507			sta 	CLFrom
.1370	8d 09 05	sta $0509			sta 	CLTo
.1373	a5 09		lda $09				lda 	IFR0+IM1
.1375	8d 08 05	sta $0508			sta 	CLFrom+1
.1378	8d 0a 05	sta $050a			sta 	CLTo+1
.137b	b1 18		lda ($18),y			lda 	(codePtr),y
.137d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.137f	f0 26		beq $13a7			beq 	_CLList
.1381					_CLToLine:
.1381	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1383	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1385	f0 18		beq $139f			beq 	_CLDefaultTo
.1387	20 46 29	jsr $2946			jsr 	ERRCheckComma 				; sep comma
.138a	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.138c	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.138e	f0 0f		beq $139f			beq 	_CLDefaultTo
.1390	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; there's a To value.
.1393	a5 08		lda $08				lda 	IFR0+IM0
.1395	8d 09 05	sta $0509			sta 	CLTo
.1398	a5 09		lda $09				lda 	IFR0+IM1
.139a	8d 0a 05	sta $050a			sta 	CLTo+1
.139d	80 08		bra $13a7			bra 	_CLList
.139f					_CLDefaultTo:
.139f	a9 ff		lda #$ff			lda 	#$FF
.13a1	8d 09 05	sta $0509			sta 	CLTo
.13a4	8d 0a 05	sta $050a			sta 	CLTo+1
.13a7					_CLList:
.13a7	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.13aa	85 19		sta $19				sta 	codePtr+1
.13ac	64 18		stz $18				stz 	codePtr
.13ae	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.13b0	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.13b2	20 7a 1f	jsr $1f7a			jsr 	TOKSetDetokeniseOutput
.13b5					_CLLoop:
.13b5	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.13b7	f0 51		beq $140a			beq 	_CLExit
.13b9	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.13bc	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.13bf	d0 4c		bne $140d			bne 	_CLBreak
.13c1	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13c3	20 10 14	jsr $1410			jsr 	_CLCompareLine
.13c6	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13c8	f0 33		beq $13fd			beq 	_CLNext
.13ca	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13cc	20 10 14	jsr $1410			jsr 	_CLCompareLine
.13cf	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13d1	f0 2a		beq $13fd			beq 	_CLNext
.13d3	a0 02		ldy #$02			ldy 	#2 							; print line #
.13d5	b1 18		lda ($18),y			lda 	(codePtr),y
.13d7	aa		tax				tax
.13d8	88		dey				dey
.13d9	b1 18		lda ($18),y			lda 	(codePtr),y
.13db	20 95 2b	jsr $2b95			jsr 	WriteIntXA
.13de					_CLSpacing:
.13de	a9 20		lda #$20			lda 	#32
.13e0	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.13e3	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.13e6	e0 06		cpx #$06			cpx 	#6
.13e8	d0 f4		bne $13de			bne 	_CLSpacing
.13ea	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13ec	a5 18		lda $18				lda 	codePtr
.13ee	18		clc				clc
.13ef	69 03		adc #$03			adc 	#3
.13f1	aa		tax				tax
.13f2	90 01		bcc $13f5			bcc 	_CLNoCarry2
.13f4	c8		iny				iny
.13f5					_CLNoCarry2:
.13f5	20 1f 1f	jsr $1f1f			jsr 	TOKDetokenise
.13f8	a9 0d		lda #$0d			lda 	#13	 						; next line
.13fa	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.13fd					_CLNext:
.13fd	18		clc				clc 								; advance to next line.
.13fe	b2 18		lda ($18)			lda 	(codePtr)
.1400	65 18		adc $18				adc 	codePtr
.1402	85 18		sta $18				sta 	codePtr
.1404	90 02		bcc $1408			bcc 	_CLNoCarry
.1406	e6 19		inc $19				inc 	codePtr+1
.1408					_CLNoCarry:
.1408	80 ab		bra $13b5			bra 	_CLLoop
.140a					_CLExit:
.140a	4c b4 2b	jmp $2bb4			jmp 	WarmStart
.140d					_CLBreak:
.140d	4c f0 28	jmp $28f0		jmp	ErrorV_break
.1410					_CLCompareLine:
.1410	a0 01		ldy #$01			ldy 	#1
.1412	38		sec				sec
.1413	b1 18		lda ($18),y			lda 	(codePtr),y
.1415	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.1418	85 24		sta $24				sta 	zTemp0
.141a	c8		iny				iny
.141b	b1 18		lda ($18),y			lda 	(codePtr),y
.141d	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.1420	90 0a		bcc $142c			bcc 	_CLIsNegative
.1422	d0 05		bne $1429			bne 	_CLIsPositive
.1424	a5 24		lda $24				lda 	zTemp0
.1426	d0 01		bne $1429			bne 	_CLIsPositive
.1428	60		rts				rts
.1429					_CLIsPositive:
.1429	a9 01		lda #$01			lda 	#1
.142b	60		rts				rts
.142c					_CLIsNegative:
.142c	a9 ff		lda #$ff			lda 	#255
.142e	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.142f					Command_NEW:
.142f	20 28 21	jsr $2128			jsr 	PGMNewProgram 				; Reset current program
.1432	20 63 10	jsr $1063			jsr 	ClearCode 					; Run CLR
.1435	4c 9b 15	jmp $159b			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1438					Command_READ:
.1438	20 fe 17	jsr $17fe			jsr 	EXPTermR0 					; get term to R0
.143b	90 35		bcc $1472			bcc 	_CRSyntax 					; fail if not a reference.
.143d	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.143f	48		pha				pha
.1440	a5 09		lda $09				lda 	IFR0+IM1
.1442	48		pha				pha
.1443	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1445	48		pha				pha
.1446	20 0f 15	jsr $150f			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.1449	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.144c	d0 27		bne $1475			bne 	_CRHaveData  				; forward for the next one.
.144e					_CRNextLine:
.144e	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1450	f0 1a		beq $146c			beq 	_CRNoData
.1452					_CRKeepSearching:
.1452	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1454	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1456	20 75 26	jsr $2675			jsr 	ScanForward
.1459	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.145b	f0 18		beq $1475			beq 	_CRHaveData 				; found it
.145d	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.145f	18		clc				clc 								; try the next line, keep going.
.1460	b2 18		lda ($18)			lda 	(codePtr)
.1462	65 18		adc $18				adc 	codePtr
.1464	85 18		sta $18				sta 	codePtr
.1466	90 e6		bcc $144e			bcc 	_CRNextLine
.1468	e6 19		inc $19				inc 	codePtr+1
.146a	80 e2		bra $144e			bra 	_CRNextLine
.146c					_CRNoData:
.146c	4c 1d 28	jmp $281d		jmp	ErrorV_data
.146f					_CLType:
.146f	4c 95 27	jmp $2795		jmp	ErrorV_type
.1472					_CRSyntax:
.1472	4c 65 27	jmp $2765		jmp	ErrorV_syntax
.1475					_CRHaveData:
.1475	20 36 17	jsr $1736			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1478	68		pla				pla 								; type of l-expr
.1479	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.147b	30 f2		bmi $146f			bmi 	_CLType
.147d	68		pla				pla 								; restore address
.147e	85 25		sta $25				sta 	zTemp0+1
.1480	68		pla				pla
.1481	85 24		sta $24				sta 	zTemp0
.1483	20 ff 12	jsr $12ff			jsr 	AssignData 					; write R0 there.
.1486	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.1489	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.148b	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.148d	d0 04		bne $1493			bne 	_CRSwapBack
.148f	c8		iny				iny 								; consume comma
.1490	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.1493					_CRSwapBack:
.1493	20 0f 15	jsr $150f			jsr 	SwapCodeDataPointers		; swap them back.
.1496	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1498	c8		iny				iny
.1499	c9 99		cmp #$99			cmp 	#PR_COMMA
.149b	f0 9b		beq $1438			beq 	Command_READ 				; if so go round again.
.149d	88		dey				dey 								; unpick get.
.149e	60		rts				rts
.149f					Command_DATA:
.149f	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.14a1	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.14a3	20 75 26	jsr $2675			jsr 	ScanForward
.14a6	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.14a8	d0 01		bne $14ab			bne 	_CDNotEOL
.14aa	88		dey				dey
.14ab					_CDNotEOL:
.14ab	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.14ac					Command_REM:
.14ac					Command_REM2:
.14ac	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.14ae	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.14b0	d0 06		bne $14b8			bne 	_CRExit
.14b2	c8		iny				iny 								; skip over it, it's a comment.
.14b3	98		tya				tya
.14b4	38		sec				sec
.14b5	71 18		adc ($18),y			adc 	(codePtr),y
.14b7	a8		tay				tay
.14b8					_CRExit:
.14b8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/renumber.asm

.14b9					Command_RENUMBER:
.14b9	a9 e8		lda #$e8			lda 	#1000 & $FF 				; default REN star
.14bb	85 08		sta $08				sta 	IM0+IFR0
.14bd	a9 03		lda #$03			lda 	#1000 >> 8
.14bf	85 09		sta $09				sta 	IM1+IFR0
.14c1	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.14c3	c9 9b		cmp #$9b			cmp 	#PR_COLON
.14c5	f0 07		beq $14ce			beq 	_CRIsDefault
.14c7	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.14c9	f0 03		beq $14ce			beq 	_CRIsDefault
.14cb	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; get other start
.14ce					_CRIsDefault:
.14ce	5a		phy				phy
.14cf	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.14d1	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.14d4	85 25		sta $25				sta 	zTemp0+1
.14d6					_CRRenumberLoop:
.14d6	b2 24		lda ($24)			lda 	(zTemp0)					; check end
.14d8	f0 21		beq $14fb			beq 	_CRExit
.14da	18		clc				clc
.14db	a0 01		ldy #$01			ldy 	#1 							; copy line # in bumping as you go.
.14dd	a5 08		lda $08				lda 	IFR0+IM0
.14df	91 24		sta ($24),y			sta 	(zTemp0),y
.14e1	69 0a		adc #$0a			adc 	#10
.14e3	85 08		sta $08				sta 	IFR0+IM0
.14e5	c8		iny				iny
.14e6	a5 09		lda $09				lda 	IFR0+IM1
.14e8	91 24		sta ($24),y			sta 	(zTemp0),y
.14ea	69 00		adc #$00			adc 	#0
.14ec	85 09		sta $09				sta 	IFR0+IM1
.14ee	18		clc				clc 								; next line.
.14ef	b2 24		lda ($24)			lda 	(zTemp0)
.14f1	65 24		adc $24				adc 	zTemp0
.14f3	85 24		sta $24				sta 	zTemp0
.14f5	90 df		bcc $14d6			bcc 	_CRRenumberLoop
.14f7	e6 25		inc $25				inc 	zTemp0+1
.14f9	80 db		bra $14d6			bra 	_CRRenumberLoop
.14fb					_CRExit:
.14fb	7a		ply				ply
.14fc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.14fd					S
.14fd					Command_RESTORE:
.14fd	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1500	8d 0c 05	sta $050c			sta 	dataPtr+1
.1503	9c 0b 05	stz $050b			stz 	dataPtr
.1506	a9 03		lda #$03			lda 	#3 							; position start of line
.1508	8d 0d 05	sta $050d			sta 	dataPos
.150b	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.150e	60		rts				rts
.150f					SwapCodeDataPointers:
.150f	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.1512	a6 18		ldx $18				ldx 	codePtr
.1514	85 18		sta $18				sta 	codePtr
.1516	8e 0b 05	stx $050b			stx 	dataPtr
.1519	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.151c	a6 19		ldx $19				ldx 	codePtr+1
.151e	85 19		sta $19				sta 	codePtr+1
.1520	8e 0c 05	stx $050c			stx 	dataPtr+1
.1523	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.1526	8c 0d 05	sty $050d			sty 	dataPos
.1529	a8		tay				tay
.152a	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.152b					Command_RUN:
.152b	20 63 10	jsr $1063			jsr 	ClearCode					; clear everything out.
.152e	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.1531	85 19		sta $19				sta 	codePtr+1
.1533	64 18		stz $18				stz 	codePtr
.1535	80 0b		bra $1542			bra 	RUNNewLine
.1537					RUNEndOfLine:
.1537	18		clc				clc 								; advance to next line.
.1538	b2 18		lda ($18)			lda 	(codePtr)
.153a	65 18		adc $18				adc 	codePtr
.153c	85 18		sta $18				sta 	codePtr
.153e	90 02		bcc $1542			bcc 	_RELNoCarry
.1540	e6 19		inc $19				inc 	codePtr+1
.1542					_RELNoCarry:
.1542					RUNNewLine:
.1542	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.1544	9a		txs				txs
.1545	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.1547	f0 52		beq $159b			beq 	Command_END
.1549	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.154b	b1 18		lda ($18),y			lda 	(codePtr),y
.154d	8d 2c 06	sta $062c			sta 	ERRLine
.1550	c8		iny				iny
.1551	b1 18		lda ($18),y			lda 	(codePtr),y
.1553	8d 2d 06	sta $062d			sta 	ERRLine+1
.1556	c8		iny				iny 								; offset into codePtr for start of line.
.1557					RUNNewCommand:
.1557	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.155a	ce 10 05	dec $0510			dec 	checkCounter
.155d	d0 0a		bne $1569			bne 	_RNCNoCheck
.155f	5a		phy				phy 								; keyboard check.
.1560	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1563	7a		ply				ply
.1564	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1567	d0 1e		bne $1587			bne 	_RUNBreak
.1569					_RNCNoCheck:
.1569	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.156b	10 1d		bpl $158a			bpl		_RUNNotToken 				; probably an identifier
.156d	c8		iny				iny 								; consume token
.156e	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.1570	f0 e5		beq $1557			beq 	RUNNewCommand
.1572	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1574	b0 0e		bcs $1584			bcs 	_RUNSyntax
.1576	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1578	90 0a		bcc $1584			bcc 	_RUNSyntax
.157a	0a		asl a				asl 	a 							; double into X.
.157b	aa		tax				tax
.157c	20 81 15	jsr $1581			jsr 	_RUNDispatchMain			; call the main dispatcher
.157f	80 d6		bra $1557			bra 	RUNNewCommand
.1581					_RUNDispatchMain:
.1581	7c fd 1d	jmp ($1dfd,x)			jmp 	(VectorTable,x)
.1584					_RUNSyntax:
.1584	4c 65 27	jmp $2765		jmp	ErrorV_syntax
.1587					_RUNBreak:
.1587	4c f0 28	jmp $28f0		jmp	ErrorV_break
.158a					_RUNNotToken:
.158a	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.158c	90 f6		bcc $1584			bcc 	_RUNSyntax
.158e	20 de 12	jsr $12de			jsr 	CommandLET 					; assignment
.1591	80 c4		bra $1557			bra 	RUNNewCommand 				; loop round.
.1593					Command_Shift_Handler:
.1593	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.1595	c8		iny				iny
.1596	0a		asl a				asl 	a 							; double into X
.1597	aa		tax				tax
.1598	7c fd 1e	jmp ($1efd,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.159b					Command_END:
.159b	4c b4 2b	jmp $2bb4			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.159e					Command_STOP:
.159e	4c 09 28	jmp $2809		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.15a1					Command_Sys:
.15a1	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; execution address
.15a4	5a		phy				phy
.15a5	ad 74 06	lda $0674			lda 	('A'-'A')*4 + FastVariables ; load AXY
.15a8	ae d0 06	ldx $06d0			ldx 	('X'-'A')*4 + FastVariables
.15ab	ac d4 06	ldy $06d4			ldy 	('Y'-'A')*4 + FastVariables
.15ae	20 b3 15	jsr $15b3			jsr 	_CSCallIFR0 				; call the code
.15b1	7a		ply				ply
.15b2	60		rts				rts
.15b3					_CSCallIFR0:
.15b3	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.15b6					NoExec01:
.15b6					NoExec02:
.15b6					NoExec03:
.15b6					NoExec04:
.15b6					NoExec05:
.15b6					NoExec06:
.15b6					NoExec07:
.15b6					NoExec08:
.15b6	4c 65 27	jmp $2765		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.15b9					EXPBinAdd:
.15b9	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.15bb	30 6f		bmi $162c			bmi 	EXPConcatenate
.15bd	a2 0c		ldx #$0c			ldx 	#IFR1
.15bf	4c d3 2d	jmp $2dd3			jmp 	IFloatAdd
.15c2					EXPBinSub:
.15c2	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.15c4	30 3f		bmi $1605			bmi 	EXPTypeError
.15c6	a2 0c		ldx #$0c			ldx 	#IFR1
.15c8	4c cc 2d	jmp $2dcc			jmp 	IFloatSubtract
.15cb					EXPBinMul:
.15cb	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.15cd	30 36		bmi $1605			bmi 	EXPTypeError
.15cf	a2 0c		ldx #$0c			ldx 	#IFR1
.15d1	4c 7d 2e	jmp $2e7d			jmp 	IFloatMultiply
.15d4					EXPBinFDiv:
.15d4	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.15d6	30 2d		bmi $1605			bmi 	EXPTypeError
.15d8	a2 0c		ldx #$0c			ldx 	#IFR1
.15da	20 ff 30	jsr $30ff			jsr 	IFloatDivideFloat
.15dd	b0 0f		bcs $15ee			bcs 	EXPDZero
.15df	60		rts				rts
.15e0					EXPBinIDiv:
.15e0	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.15e2	30 21		bmi $1605			bmi 	EXPTypeError
.15e4	a2 0c		ldx #$0c			ldx 	#IFR1
.15e6	20 ff 30	jsr $30ff			jsr 	IFloatDivideFloat
.15e9	b0 03		bcs $15ee			bcs 	EXPDZero
.15eb	4c dc 30	jmp $30dc			jmp 	IFloatIntegerR0
.15ee					EXPDZero:
.15ee	4c de 27	jmp $27de		jmp	ErrorV_divzero
.15f1					EXPBinIMod:
.15f1	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.15f3	30 10		bmi $1605			bmi 	EXPTypeError
.15f5	a2 0c		ldx #$0c			ldx 	#IFR1
.15f7	5a		phy				phy
.15f8	20 12 30	jsr $3012			jsr 	IFPreProcessBitwise 		; set up everything.
.15fb	d0 05		bne $1602			bne 	EXPDRange
.15fd	20 4b 2f	jsr $2f4b			jsr 	IFloatModulusInteger
.1600	7a		ply				ply
.1601	60		rts				rts
.1602					EXPDRange:
.1602	4c 76 27	jmp $2776		jmp	ErrorV_range
.1605					EXPTypeError:
.1605	4c 95 27	jmp $2795		jmp	ErrorV_type
.1608					EXPBinAnd:
.1608	24 0b		bit $0b				bit 	IFR0+IExp
.160a	30 f9		bmi $1605			bmi 	EXPTypeError
.160c	a2 0c		ldx #$0c			ldx 	#IFR1
.160e	20 cd 2f	jsr $2fcd			jsr 	IFloatBitwiseAnd
.1611	b0 ef		bcs $1602			bcs 	EXPDRange
.1613	60		rts				rts
.1614					EXPBinOr:
.1614	24 0b		bit $0b				bit 	IFR0+IExp
.1616	30 ed		bmi $1605			bmi 	EXPTypeError
.1618	a2 0c		ldx #$0c			ldx 	#IFR1
.161a	20 e4 2f	jsr $2fe4			jsr 	IFloatBitwiseOr
.161d	b0 e3		bcs $1602			bcs 	EXPDRange
.161f	60		rts				rts
.1620					EXPBinXor:
.1620	24 0b		bit $0b				bit 	IFR0+IExp
.1622	30 e1		bmi $1605			bmi 	EXPTypeError
.1624	a2 0c		ldx #$0c			ldx 	#IFR1
.1626	20 fb 2f	jsr $2ffb			jsr 	IFloatBitwiseXor
.1629	b0 d7		bcs $1602			bcs 	EXPDRange
.162b	60		rts				rts
.162c					EXPConcatenate:
.162c	18		clc				clc
.162d	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.162f	72 0c		adc ($0c)			adc 	(IFR1)
.1631	b0 2d		bcs $1660			bcs 	_EXPCError 					; far too long.
.1633	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.1635	da		phx				phx
.1636	a6 09		ldx $09				ldx 	IFR0+1
.1638	da		phx				phx
.1639	20 33 2a	jsr $2a33			jsr 	StringTempAllocate 			; allocate string, set up return
.163c	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.163e	a5 0c		lda $0c				lda 	IFR1
.1640	20 49 16	jsr $1649			jsr 	_EXPCCopyXA
.1643	fa		plx				plx 								; copy second string
.1644	68		pla				pla
.1645	20 49 16	jsr $1649			jsr 	_EXPCCopyXA
.1648	60		rts				rts
.1649					_EXPCCopyXA:
.1649	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.164b	85 24		sta $24				sta 	zTemp0
.164d	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.164f	f0 0e		beq $165f			beq 	_EXPCCExit 					; nothing in string
.1651	aa		tax				tax 								; count
.1652	5a		phy				phy 								; start position
.1653	a0 01		ldy #$01			ldy 	#1
.1655					_EXPCCLoop:
.1655	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.1657	20 68 2a	jsr $2a68			jsr 	StringTempWrite
.165a	c8		iny				iny
.165b	ca		dex				dex
.165c	d0 f7		bne $1655			bne 	_EXPCCLoop
.165e	7a		ply				ply
.165f					_EXPCCExit:
.165f	60		rts				rts
.1660					_EXPCError:
.1660	4c 82 28	jmp $2882		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1663					EXPReturnTrue:
.1663	a2 08		ldx #$08			ldx 	#IFR0
.1665	a9 01		lda #$01			lda 	#1
.1667	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.166a	20 e6 33	jsr $33e6			jsr 	IFloatNegate
.166d	60		rts				rts
.166e					EXPReturnFalse:
.166e	a2 08		ldx #$08			ldx 	#IFR0
.1670	4c db 33	jmp $33db			jmp 	IFloatSetZero
.1673					EXPCompareEqual:
.1673	20 a9 16	jsr $16a9			jsr 	EXPCompareBaseCode
.1676	c9 00		cmp #$00			cmp 	#0
.1678	f0 e9		beq $1663			beq 	EXPReturnTrue
.167a	80 f2		bra $166e			bra 	EXPReturnFalse
.167c					EXPCompareLess:
.167c	20 a9 16	jsr $16a9			jsr 	EXPCompareBaseCode
.167f	c9 ff		cmp #$ff			cmp 	#$FF
.1681	f0 e0		beq $1663			beq 	EXPReturnTrue
.1683	80 e9		bra $166e			bra 	EXPReturnFalse
.1685					EXPCompareGreater:
.1685	20 a9 16	jsr $16a9			jsr 	EXPCompareBaseCode
.1688	c9 01		cmp #$01			cmp 	#1
.168a	f0 d7		beq $1663			beq 	EXPReturnTrue
.168c	80 e0		bra $166e			bra 	EXPReturnFalse
.168e					EXPCompareNotEqual:
.168e	20 a9 16	jsr $16a9			jsr 	EXPCompareBaseCode
.1691	c9 00		cmp #$00			cmp 	#0
.1693	d0 ce		bne $1663			bne 	EXPReturnTrue
.1695	80 d7		bra $166e			bra 	EXPReturnFalse
.1697					EXPCompareLessEqual:
.1697	20 a9 16	jsr $16a9			jsr 	EXPCompareBaseCode
.169a	c9 01		cmp #$01			cmp 	#1
.169c	d0 c5		bne $1663			bne 	EXPReturnTrue
.169e	80 ce		bra $166e			bra 	EXPReturnFalse
.16a0					EXPCompareGreaterEqual:
.16a0	20 a9 16	jsr $16a9			jsr 	EXPCompareBaseCode
.16a3	c9 ff		cmp #$ff			cmp 	#$FF
.16a5	d0 bc		bne $1663			bne 	EXPReturnTrue
.16a7	80 c5		bra $166e			bra 	EXPReturnFalse
.16a9					EXPCompareBaseCode:
.16a9	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.16ab	30 10		bmi $16bd			bmi 	_EXCBCString
.16ad	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.16af	20 aa 30	jsr $30aa			jsr 	IFloatCompare
.16b2	a5 08		lda $08				lda 	IFR0+IM0
.16b4	f0 06		beq $16bc			beq 	_EXCBCExit 					; return 0 if zero
.16b6	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.16b8	50 02		bvc $16bc			bvc 	_EXCBCExit
.16ba	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.16bc					_EXCBCExit:
.16bc	60		rts				rts
.16bd					_EXCBCString:
.16bd	5a		phy				phy
.16be	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.16c0	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.16c2	90 02		bcc $16c6			bcc 	_EXCBCSmaller
.16c4	b2 0c		lda ($0c)			lda 	(IFR1)
.16c6					_EXCBCSmaller:
.16c6	aa		tax				tax
.16c7	f0 0d		beq $16d6			beq 	_EXCBCMatches 				; if zero common length matches
.16c9	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.16cb					_EXCBCCheckSmallerMatches:
.16cb	c8		iny				iny 								; compare directly as far as common length
.16cc	38		sec				sec
.16cd	b1 0c		lda ($0c),y			lda 	(IFR1),y
.16cf	f1 08		sbc ($08),y			sbc 	(IFR0),y
.16d1	d0 08		bne $16db			bne 	_EXCBCExit2
.16d3	ca		dex				dex
.16d4	d0 f5		bne $16cb			bne 	_EXCBCCheckSmallerMatches
.16d6					_EXCBCMatches:
.16d6	38		sec				sec
.16d7	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.16d9	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.16db					_EXCBCExit2:
.16db	7a		ply				ply
.16dc	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.16de	f0 04		beq $16e4			beq 	_EXCBCReturn
.16e0	30 03		bmi $16e5			bmi 	_EXCBCFF 					; return $FF if <
.16e2	a9 01		lda #$01			lda 	#1 							; return 1 if >
.16e4					_EXCBCReturn:
.16e4	60		rts				rts
.16e5					_EXCBCFF:
.16e5	a9 ff		lda #$ff			lda 	#$FF
.16e7	60		rts				rts
.16e8					_EXCBCRange:
.16e8	4c 76 27	jmp $2776		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.16eb					EXPBinLeft:
.16eb	a9 ff		lda #$ff			lda 	#$FF
.16ed	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.16f0	4c f6 16	jmp $16f6			jmp 	EXPShiftCommon
.16f3					EXPBinRight:
.16f3	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.16f6					EXPShiftCommon:
.16f6	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.16f8	05 0f		ora $0f				ora 	IFR1+IExp
.16fa	29 7f		and #$7f			and 	#$7F
.16fc	d0 35		bne $1733			bne 	_EXPSRange
.16fe	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.1700	29 e0		and #$e0			and 	#$E0
.1702	05 09		ora $09				ora 	IFR0+IM1
.1704	05 0a		ora $0a				ora 	IFR0+IM2
.1706	d0 25		bne $172d			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.1708	5a		phy				phy
.1709	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.170b	29 1f		and #$1f			and 	#$1F
.170d	f0 17		beq $1726			beq 	_EXPSExit 					; exit if zero
.170f	a8		tay				tay
.1710					_EXPSLoop:
.1710	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.1712	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.1715	30 05		bmi $171c			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.1717	20 0a 34	jsr $340a			jsr 	IFloatShiftRight
.171a	80 07		bra $1723			bra 	_EXPSContinue
.171c					_EXPSShiftLeft:
.171c	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.171f	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.1721	30 10		bmi $1733			bmi 	_EXPSRange
.1723					_EXPSContinue:
.1723	88		dey				dey 								; do it Y times
.1724	d0 ea		bne $1710			bne 	_EXPSLoop
.1726					_EXPSExit:
.1726	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.1728	20 6c 33	jsr $336c			jsr 	IFloatCopyFromRegister
.172b	7a		ply				ply
.172c	60		rts				rts
.172d					_EXPSShiftZero:
.172d	a2 08		ldx #$08			ldx 	#IFR0
.172f	20 db 33	jsr $33db			jsr 	IFloatSetZero
.1732	60		rts				rts
.1733					_EXPSRange:
.1733	4c 76 27	jmp $2776		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.1736					EXPEvaluateExpression:
.1736	a9 00		lda #$00			lda 	#0 							; current precedence
.1738					EXPEvaluateExpressionPrecedenceA:
.1738	48		pha				pha
.1739	20 b3 17	jsr $17b3			jsr 	EXPTermValueR0				; do first term.
.173c					_EELoop:
.173c	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.173e	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.1740	90 31		bcc $1773			bcc 	_EEExit
.1742	aa		tax				tax 								; access the precedence of the operator.
.1743	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.1744	dd 11 1b	cmp $1b11,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.1747	b0 2b		bcs $1774			bcs 	_EEExit2
.1749	48		pha				pha 								; save current precedence.
.174a	da		phx				phx 								; save operator
.174b	c8		iny				iny 								; consume operator
.174c	da		phx				phx
.174d	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.174f	20 2a 33	jsr $332a			jsr 	IFloatPushRx
.1752	fa		plx				plx
.1753	bd 11 1b	lda $1b11,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.1756	20 38 17	jsr $1738			jsr 	EXPEvaluateExpressionPrecedenceA
.1759	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.175b	20 4b 33	jsr $334b			jsr 	IFloatPullRx
.175e	fa		plx				plx 								; operator
.175f	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.1761	45 0f		eor $0f				eor 	IFR1+IExp
.1763	30 08		bmi $176d			bmi 	_EEType
.1765					_EETypeOkay:
.1765	8a		txa				txa
.1766	0a		asl a				asl 	a 							; double -> X
.1767	aa		tax				tax
.1768	20 70 17	jsr $1770			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.176b	80 cf		bra $173c			bra 	_EELoop
.176d					_EEType:
.176d	4c 95 27	jmp $2795		jmp	ErrorV_type
.1770					_EECallBinary:
.1770	7c fd 1d	jmp ($1dfd,x)			jmp 	(VectorTable,x)
.1773					_EEExit:
.1773	68		pla				pla 								; throw precedence
.1774					_EEExit2:
.1774	18		clc				clc
.1775	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1776					EXPEvalNumber:
.1776	20 36 17	jsr $1736			jsr 	EXPEvaluateExpression 		; get a value
.1779	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.177b	30 01		bmi $177e			bmi 	EVUType
.177d	60		rts				rts
.177e					EVUType:
.177e	4c 95 27	jmp $2795		jmp	ErrorV_type
.1781					EXPEvalInteger:
.1781	20 76 17	jsr $1776			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1784	20 dc 30	jsr $30dc			jsr 	IFloatIntegerR0
.1787	60		rts				rts
.1788					EXPEvalInteger16:
.1788	20 81 17	jsr $1781			jsr 	EXPEvalInteger 				; get integer
.178b	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.178d	d0 21		bne $17b0			bne 	EVURange
.178f	a6 09		ldx $09				ldx 	IFR0+IM1
.1791	a5 08		lda $08				lda 	IFR0+IM0
.1793	60		rts				rts
.1794					EXPEvalInteger8:
.1794	20 81 17	jsr $1781			jsr 	EXPEvalInteger 				; get integer
.1797	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1799	05 09		ora $09				ora 	IFR0+IM1
.179b	d0 13		bne $17b0			bne 	EVURange
.179d	a5 08		lda $08				lda 	IFR0+IM0
.179f	60		rts				rts
.17a0					EXPEvalString:
.17a0	20 36 17	jsr $1736			jsr 	EXPEvaluateExpression 		; get value
.17a3	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.17a5	10 d7		bpl $177e			bpl 	EVUType
.17a7	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.17a9	86 25		stx $25				stx 	zTemp0+1
.17ab	a5 08		lda $08				lda 	IFR0+IM0
.17ad	85 24		sta $24				sta 	zTemp0
.17af	60		rts				rts
.17b0					EVURange:
.17b0	4c 76 27	jmp $2776		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.17b3					EXPTermValueR0:
.17b3	20 fe 17	jsr $17fe			jsr 	EXPTermR0 					; get term
.17b6	90 45		bcc $17fd			bcc 	_ETVNotReference 			; exit if value.
.17b8	5a		phy				phy
.17b9	a0 03		ldy #$03			ldy 	#3 							; get type
.17bb	b1 08		lda ($08),y			lda 	(IFR0),y
.17bd	30 14		bmi $17d3			bmi 	_ETVDereferenceString
.17bf	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.17c1	88		dey				dey 								; get byte 2
.17c2	b1 08		lda ($08),y			lda 	(IFR0),y
.17c4	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.17c6	88		dey				dey 								; get byte 1
.17c7	b1 08		lda ($08),y			lda 	(IFR0),y
.17c9	aa		tax				tax 								; save in X so we can overwrite it
.17ca	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.17cc	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.17ce	85 08		sta $08				sta 	IFR0+IM0
.17d0	7a		ply				ply
.17d1	18		clc				clc
.17d2	60		rts				rts
.17d3					_ETVDereferenceString:
.17d3	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.17d5	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.17d7	12 08		ora ($08)			ora 	(IFR0)
.17d9	f0 11		beq $17ec			beq 	_ETVNull 					; if so, return a fake NULL.
.17db	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.17dd	aa		tax				tax
.17de	b2 08		lda ($08)			lda 	(IFR0)
.17e0	18		clc				clc 								; add two so points to actual string.
.17e1	69 02		adc #$02			adc 	#2
.17e3	90 01		bcc $17e6			bcc 	_EVDSNoCarry
.17e5	e8		inx				inx
.17e6					_EVDSNoCarry:
.17e6	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.17e8	85 08		sta $08				sta 	IFR0
.17ea	80 08		bra $17f4			bra 	_ETVFillExit 				; tidy up and exit.
.17ec					_ETVNull:
.17ec	a9 fc		lda #$fc			lda 	#_EVTNString & $FF
.17ee	85 08		sta $08				sta 	IFR0+IM0
.17f0	a9 17		lda #$17			lda 	#_EVTNString >> 8
.17f2	85 09		sta $09				sta 	IFR0+IM1
.17f4					_ETVFillExit:
.17f4	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.17f6	a9 80		lda #$80			lda 	#$80 						; set type to string.
.17f8	85 0b		sta $0b				sta 	IFR0+IExp
.17fa	7a		ply				ply
.17fb	60		rts				rts
.17fc					_EVTNString:
>17fc	00						.byte 	0
.17fd					_ETVNotReference:
.17fd	60		rts				rts
.17fe					EXPTermR0:
.17fe	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.1800	30 10		bmi $1812			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.1802	c8		iny				iny 								; consume element
.1803	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1805	b0 08		bcs $180f			bcs 	_ETMIdentifier
.1807	20 3d 18	jsr $183d			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.180a	20 70 18	jsr $1870			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.180d	18		clc				clc 								; return value ok
.180e	60		rts				rts
.180f					_ETMIdentifier:
.180f	4c 74 2d	jmp $2d74			jmp 	VARCheckSimple 				; check variables, seperate module.
.1812					_ETMIsUnaryOrMinus:
.1812	c8		iny				iny 								; consume element
.1813	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1815	d0 0e		bne $1825			bne 	_ETMCheckUnary
.1817	20 b3 17	jsr $17b3			jsr 	EXPTermValueR0 				; get a term to negate
.181a	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.181c	20 e6 33	jsr $33e6			jsr 	IFloatNegate
.181f	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.1821	30 17		bmi $183a			bmi 	_ETMUnaryType				; if so error.
.1823	18		clc				clc
.1824	60		rts				rts
.1825					_ETMCheckUnary:
.1825	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1827	90 0e		bcc $1837			bcc 	_ETMUnarySyntax
.1829	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.182b	b0 0a		bcs $1837			bcs 	_ETMUnarySyntax
.182d	0a		asl a				asl 	a 							; make it into an index => X
.182e	aa		tax				tax
.182f	20 34 18	jsr $1834			jsr 	_ETMCallUnaryFunction 		; call the function
.1832	18		clc				clc 								; and return it.
.1833	60		rts				rts
.1834					_ETMCallUnaryFunction:
.1834	7c fd 1d	jmp ($1dfd,x)			jmp 	(VectorTable,x)
.1837					_ETMUnarySyntax:
.1837	4c 65 27	jmp $2765		jmp	ErrorV_syntax
.183a					_ETMUnaryType:
.183a	4c 95 27	jmp $2795		jmp	ErrorV_type
.183d					EXPExtractTokenisedInteger:
.183d	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.183f	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.1841	64 09		stz $09				stz 	IFR0+IM1
.1843	64 0a		stz $0a				stz 	IFR0+IM2
.1845					_ETMConstant:
.1845	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1847	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1849	b0 24		bcs $186f			bcs 	_ETMCExit 					; no, exit.
.184b	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.184d	a5 09		lda $09				lda 	IFR0+IM1
.184f	85 0a		sta $0a				sta 	IFR0+IM2
.1851	a5 08		lda $08				lda 	IFR0+IM0
.1853	85 09		sta $09				sta 	IFR0+IM1
.1855	64 08		stz $08				stz 	IFR0+IM0
.1857	8a		txa				txa
.1858	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.1859	66 0a		ror $0a				ror 	IFR0+IM2
.185b	66 09		ror $09				ror 	IFR0+IM1
.185d	66 08		ror $08				ror 	IFR0+IM0
.185f	4a		lsr a				lsr 	a
.1860	66 0a		ror $0a				ror 	IFR0+IM2
.1862	66 09		ror $09				ror 	IFR0+IM1
.1864	66 08		ror $08				ror 	IFR0+IM0
.1866	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1868	11 18		ora ($18),y			ora 	(codePtr),y
.186a	85 08		sta $08				sta 	IFR0+IM0
.186c	c8		iny				iny 								; consume, loop back
.186d	80 d6		bra $1845			bra 	_ETMConstant
.186f					_ETMCExit:
.186f	60		rts				rts
.1870					EXPCheckDecimalFollows:
.1870	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.1872	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1874	d0 19		bne $188f			bne 	_ETMCDExit
.1876	c8		iny				iny 								; consume token.
.1877	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1879	5a		phy				phy									; save current position
.187a	48		pha				pha 								; save count of chars.
.187b	38		sec				sec 								; address into YX : y + codePtr+1
.187c	98		tya				tya
.187d	65 18		adc $18				adc 	codePtr
.187f	aa		tax				tax
.1880	a5 19		lda $19				lda 	codePtr+1
.1882	69 00		adc #$00			adc 	#0
.1884	a8		tay				tay
.1885	68		pla				pla 								; get count.
.1886	20 7f 32	jsr $327f			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1889	7a		ply				ply 								; go to next token.
.188a	98		tya				tya
.188b	38		sec				sec
.188c	71 18		adc ($18),y			adc 	(codePtr),y
.188e	a8		tay				tay
.188f					_ETMCDExit:
.188f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.1890					EXPUnaryAbs:
.1890	20 76 17	jsr $1776			jsr 	EXPEvalNumber 					; number to R0
.1893	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.1896	20 1e 30	jsr $301e			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1899	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.189a					EXPUnaryNull:
.189a	20 b3 17	jsr $17b3			jsr 	EXPTermValueR0
.189d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.189e					EXPUnaryAsc:
.189e	20 a0 17	jsr $17a0			jsr 	EXPEvalString 					; string to R0, zTemp0
.18a1	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.18a4	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.18a6	f0 06		beq $18ae			beq 	_EXAZero 						; if so return 0
.18a8	5a		phy				phy 									; otherwise get first character
.18a9	a0 01		ldy #$01			ldy 	#1
.18ab	b1 24		lda ($24),y			lda 	(zTemp0),y
.18ad	7a		ply				ply
.18ae					_EXAZero:
.18ae	a2 08		ldx #$08			ldx 	#IFR0
.18b0	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.18b3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.18b4					EXPUnaryChr:
.18b4	20 94 17	jsr $1794			jsr 	EXPEvalInteger8 				; expr
.18b7	48		pha				pha 									; push on stack
.18b8	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.18bb	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.18bd	20 33 2a	jsr $2a33			jsr 	StringTempAllocate
.18c0	68		pla				pla 									; get value back
.18c1	20 68 2a	jsr $2a68			jsr 	StringTempWrite 				; write to string.
.18c4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.18c5					EXPUnaryDec:
.18c5	20 a0 17	jsr $17a0			jsr 	EXPEvalString 					; string to R0, zTemp0
.18c8	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.18cb	5a		phy				phy 									; save position.
.18cc	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.18ce	20 db 33	jsr $33db			jsr 	IFloatSetZero
.18d1	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.18d3	f0 3b		beq $1910			beq 	_EUDError 						; empty string is not legit.
.18d5	aa		tax				tax 									; count in X.
.18d6	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.18d8					_EUDLoop:
.18d8	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.18da	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.18dc	90 02		bcc $18e0			bcc 	_EUDNoCase
.18de	e9 20		sbc #$20			sbc 	#$20
.18e0					_EUDNoCase:
.18e0	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.18e2	90 2c		bcc $1910			bcc 	_EUDError
.18e4	c9 3a		cmp #$3a			cmp 	#'9'+1
.18e6	90 0a		bcc $18f2			bcc 	_EUDOkay
.18e8	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.18ea	90 24		bcc $1910			bcc 	_EUDError
.18ec	c9 47		cmp #$47			cmp 	#'F'+1
.18ee	b0 20		bcs $1910			bcs 	_EUDError
.18f0	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.18f2					_EUDOkay:
.18f2	29 0f		and #$0f			and 	#15 							; make constant
.18f4	da		phx				phx
.18f5	48		pha				pha
.18f6	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.18f8	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.18fb	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.18fe	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.1901	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.1904	68		pla				pla 									; pop constant and OR in
.1905	fa		plx				plx
.1906	05 08		ora $08				ora 	IFR0+IM0
.1908	85 08		sta $08				sta 	IFR0+IM0
.190a	c8		iny				iny 									; next char
.190b	ca		dex				dex 									; done all characters ?
.190c	d0 ca		bne $18d8			bne 	_EUDLoop
.190e	7a		ply				ply
.190f	60		rts				rts
.1910					_EUDError:
.1910	4c 87 27	jmp $2787		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1913					EXPUnaryInlineDec:
.1913	4c 65 27	jmp $2765		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.1916					EXPUnaryPeek:
.1916	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 				; number to R0
.1919	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.191c	b2 08		lda ($08)			lda 	(IFR0)
.191e	a2 08		ldx #$08			ldx 	#IFR0
.1920	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.1923	60		rts				rts
.1924					EXPUnaryDeek:
.1924	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 				; number to R0
.1927	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.192a	5a		phy				phy
.192b	a0 01		ldy #$01			ldy 	#1
.192d	b1 08		lda ($08),y			lda 	(IFR0),y
.192f	7a		ply				ply
.1930	48		pha				pha
.1931	b2 08		lda ($08)			lda 	(IFR0)
.1933	a2 08		ldx #$08			ldx 	#IFR0
.1935	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.1938	68		pla				pla
.1939	85 09		sta $09				sta 	IFR0+IM1
.193b	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.193c					EXPUnaryFrac:
.193c	20 76 17	jsr $1776			jsr 	EXPEvalNumber 					; number to R0
.193f	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.1942	20 86 30	jsr $3086			jsr 	IFloatFractionalR0 				; get fractional bit.
.1945	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.1946					EXPUnaryInkey:
.1946	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.1949	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.194b	20 33 2a	jsr $2a33			jsr 	StringTempAllocate
.194e	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit
.1951	b0 06		bcs $1959			bcs 	_EUIExit
.1953	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it.
.1956	20 68 2a	jsr $2a68			jsr 	StringTempWrite
.1959					_EUIExit:
.1959	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.195a					EXPUnaryInt:
.195a	20 76 17	jsr $1776			jsr 	EXPEvalNumber 					; number to R0
.195d	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; check for )
.1960	20 dc 30	jsr $30dc			jsr 	IFloatIntegerR0 				; force to integer.
.1963	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1964					EXPUnaryLen:
.1964	20 a0 17	jsr $17a0			jsr 	EXPEvalString 					; string to R0, zTemp0
.1967	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.196a	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.196c	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.196e	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.1971	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1972					EXPUnaryParenthesis:
.1972	20 76 17	jsr $1776			jsr 	EXPEvalNumber 					; number to R0
.1975	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.1978	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1979					EXPUnaryRnd:
.1979	20 76 17	jsr $1776			jsr 	EXPEvalNumber 				; number to R0
.197c	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 				; )
.197f	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.1981	20 98 19	jsr $1998			jsr 	EXPLoadInRandom
.1984	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1986	85 0b		sta $0b				sta 	IFR0+IExp
.1988	60		rts				rts
.1989					ExpUnaryRand:
.1989	20 81 17	jsr $1781			jsr 	EXPEvalInteger 				; integer to R0
.198c	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 				; )
.198f	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.1991	20 98 19	jsr $1998			jsr 	EXPLoadInRandom
.1994	20 4b 2f	jsr $2f4b			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1997	60		rts				rts
.1998					EXPLoadInRandom:
.1998	20 db 33	jsr $33db			jsr 	IFloatSetZero 				; zero it
.199b	20 ad 19	jsr $19ad			jsr 	EXPRandom32 				; do a 23 bit number.
.199e	95 00		sta $00,x			sta 	IM0,x
.19a0	20 ad 19	jsr $19ad			jsr 	EXPRandom32
.19a3	95 01		sta $01,x			sta 	IM1,x
.19a5	20 ad 19	jsr $19ad			jsr 	EXPRandom32
.19a8	29 7f		and #$7f			and 	#$7F
.19aa	95 02		sta $02,x			sta 	IM2,x
.19ac	60		rts				rts
.19ad					EXPRandom32:
.19ad	5a		phy				phy
.19ae	a0 08		ldy #$08			ldy 	#8
.19b0	ad 12 05	lda $0512			lda 	EXPSeed+0
.19b3	0d 13 05	ora $0513			ora 	EXPSeed+1
.19b6	0d 14 05	ora $0514			ora 	EXPSeed+2
.19b9	0d 15 05	ora $0515			ora 	EXPSeed+3
.19bc	d0 08		bne $19c6			bne 	_EXPRNoReset
.19be	ee 12 05	inc $0512			inc 	EXPSeed+0
.19c1	a0 10		ldy #$10			ldy 	#16
.19c3	8c 15 05	sty $0515			sty 	EXPSeed+3
.19c6					_EXPRNoReset:
.19c6	ad 12 05	lda $0512			lda 	EXPSeed+0
.19c9					_EXPRLoop:
.19c9	0a		asl a				asl		a
.19ca	2e 13 05	rol $0513			rol 	EXPSeed+1
.19cd	2e 14 05	rol $0514			rol 	EXPSeed+2
.19d0	2e 15 05	rol $0515			rol 	EXPSeed+3
.19d3	90 02		bcc $19d7			bcc 	_EXPRNoEOR
.19d5	49 c5		eor #$c5			eor 	#$C5
.19d7					_EXPRNoEOR:
.19d7	88		dey				dey
.19d8	d0 ef		bne $19c9			bne 	_EXPRLoop
.19da	8d 12 05	sta $0512			sta 	EXPSeed+0
.19dd	7a		ply				ply
.19de	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.19df					EXPUnarySgn:
.19df	20 76 17	jsr $1776			jsr 	EXPEvalNumber 					; number to R0
.19e2	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.19e5	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.19e7	20 7d 33	jsr $337d			jsr 	IFloatCopyToRegister
.19ea	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.19ec	20 db 33	jsr $33db			jsr 	IFloatSetZero
.19ef	a2 0c		ldx #$0c			ldx 	#IFR1
.19f1	20 aa 30	jsr $30aa			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.19f4	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.19f5					EXPUnarySqr:
.19f5	20 76 17	jsr $1776			jsr 	EXPEvalNumber 					; number to R0
.19f8	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.19fb	20 26 30	jsr $3026			jsr 	IFloatSquareRootR0 				; square root.
.19fe	b0 01		bcs $1a01			bcs 	_EUSValue 						; error check.
.1a00	60		rts				rts
.1a01					_EUSValue:
.1a01	4c 76 27	jmp $2776		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1a04					EXPUnaryHex:
.1a04	20 81 17	jsr $1781			jsr 	EXPEvalInteger 					; expr
.1a07	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.1a0a	5a		phy				phy
.1a0b	a9 10		lda #$10			lda 	#16
.1a0d	20 7d 31	jsr $317d			jsr 	IFloatIntegerToStringR0
.1a10	80 0a		bra $1a1c			bra 	EUSMain
.1a12					EXPUnaryStr:
.1a12	20 76 17	jsr $1776			jsr 	EXPEvalNumber 					; expr
.1a15	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.1a18	5a		phy				phy
.1a19	20 d8 31	jsr $31d8			jsr 	IFloatFloatToStringR0 			; convert to string
.1a1c					EUSMain:
.1a1c	b0 19		bcs $1a37			bcs 	_EUSError
.1a1e	86 24		stx $24				stx 	zTemp0 							; save string address
.1a20	84 25		sty $25				sty 	zTemp0+1
.1a22	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1a24	20 33 2a	jsr $2a33			jsr 	StringTempAllocate
.1a27	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.1a29	aa		tax				tax 									; count in X
.1a2a	a0 01		ldy #$01			ldy 	#1
.1a2c					_EUSCopy:
.1a2c	b1 24		lda ($24),y			lda 	(zTemp0),y
.1a2e	c8		iny				iny
.1a2f	20 68 2a	jsr $2a68			jsr 	StringTempWrite
.1a32	ca		dex				dex
.1a33	d0 f7		bne $1a2c			bne	 	_EUSCopy
.1a35	7a		ply				ply
.1a36	60		rts				rts
.1a37					_EUSError:
.1a37	4c 76 27	jmp $2776		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1a3a					EXPUnaryInlineString:
.1a3a	18		clc				clc 								; physical address -> IM0,1
.1a3b	98		tya				tya 								; put the actual address in IM0
.1a3c	65 18		adc $18				adc 	codePtr
.1a3e	85 08		sta $08				sta 	IFR0+IM0
.1a40	a5 19		lda $19				lda 	codePtr+1
.1a42	69 00		adc #$00			adc 	#0
.1a44	85 09		sta $09				sta 	IFR0+IM1
.1a46	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.1a48	a9 80		lda #$80			lda 	#$80
.1a4a	85 0b		sta $0b				sta 	IFR0+IExp
.1a4c	98		tya				tya	 								; skip over it.
.1a4d	38		sec				sec
.1a4e	71 18		adc ($18),y			adc 	(codePtr),y
.1a50	a8		tay				tay
.1a51	60		rts				rts
.1a52					_EXPUISRange:
.1a52	4c 76 27	jmp $2776		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1a55					EXPUnaryLeft:
.1a55	20 9b 1a	jsr $1a9b			jsr 	EXPCommonStart 					; <string>,
.1a58	48		pha				pha 									; save string address on stack
.1a59	da		phx				phx
.1a5a	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1a5c	48		pha				pha
.1a5d	20 94 17	jsr $1794			jsr 	EXPEvalInteger8 				; characters to do
.1a60	80 44		bra $1aa6			bra 	EXPSubstringCommon
.1a62					EXPUnaryRight:
.1a62	20 9b 1a	jsr $1a9b			jsr 	EXPCommonStart 					; <string>,
.1a65	48		pha				pha 									; save string address on stack
.1a66	da		phx				phx
.1a67	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1a69	48		pha				pha
.1a6a	20 94 17	jsr $1794			jsr 	EXPEvalInteger8 				; characters to do
.1a6d	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1a6f	68		pla				pla
.1a70	38		sec				sec
.1a71	e5 24		sbc $24				sbc 	zTemp0
.1a73	b0 02		bcs $1a77			bcs 	_EUROffLeft
.1a75	a9 00		lda #$00			lda 	#0
.1a77					_EUROffLeft:
.1a77	48		pha				pha 									; start pos
.1a78	a9 ff		lda #$ff			lda 	#255
.1a7a	80 2a		bra $1aa6			bra 	EXPSubstringCommon
.1a7c					EXPUnaryMid:
.1a7c	20 9b 1a	jsr $1a9b			jsr 	EXPCommonStart 					; <string>,
.1a7f	48		pha				pha 									; save string address on stack
.1a80	da		phx				phx
.1a81	20 94 17	jsr $1794			jsr 	EXPEvalInteger8 				; characters start
.1a84	f0 12		beq $1a98			beq 	_EUSError 						; 1 is left
.1a86	3a		dec a				dec 	a 								; zero based.
.1a87	48		pha				pha
.1a88	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a8a	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a8c	f0 04		beq $1a92			beq 	_EUMLength 						; if so m is provided
.1a8e	a9 ff		lda #$ff			lda 	#255 							; default m
.1a90	80 14		bra $1aa6			bra 	EXPSubstringCommon
.1a92					_EUMLength:
.1a92	c8		iny				iny 									; consume comma
.1a93	20 94 17	jsr $1794			jsr 	EXPEvalInteger8 				; characters to do
.1a96	80 0e		bra $1aa6			bra 	EXPSubstringCommon
.1a98					_EUSError:
.1a98	4c 87 27	jmp $2787		jmp	ErrorV_value
.1a9b					EXPCommonStart:
.1a9b	20 a0 17	jsr $17a0			jsr 	EXPEvalString
.1a9e	20 46 29	jsr $2946			jsr 	ERRCheckComma
.1aa1	a5 08		lda $08				lda 	IFR0+IM0
.1aa3	a6 09		ldx $09				ldx 	IFR0+IM1
.1aa5	60		rts				rts
.1aa6					EXPSubstringCommon:
.1aa6	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1aa8	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; check right bracket.
.1aab	68		pla				pla 									; start position
.1aac	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1aae	fa		plx				plx 									; get string address to zTemp2.
.1aaf	86 29		stx $29				stx 	zTemp2+1
.1ab1	68		pla				pla
.1ab2	85 28		sta $28				sta 	zTemp2
.1ab4	38		sec				sec 									; length - start is the max count of chars
.1ab5	b2 28		lda ($28)			lda 	(zTemp2)
.1ab7	e5 27		sbc $27				sbc 	zTemp1+1
.1ab9	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1abb	b0 02		bcs $1abf			bcs 	_EXPSSNoTrim
.1abd	85 26		sta $26				sta 	zTemp1 							; update count with available
.1abf					_EXPSSNoTrim:
.1abf	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1ac1	20 33 2a	jsr $2a33			jsr 	StringTempAllocate 				; allocate memory for it.
.1ac4	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1ac6	f0 15		beq $1add			beq 	_EXPSSExit
.1ac8	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1aca	d2 28		cmp ($28)			cmp 	(zTemp2)
.1acc	b0 0f		bcs $1add			bcs 	_EXPSSExit
.1ace	5a		phy				phy
.1acf	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1ad1	c8		iny				iny 									; +1 for the length byte
.1ad2					_EXPSSCopy:
.1ad2	b1 28		lda ($28),y			lda 	(zTemp2),y
.1ad4	20 68 2a	jsr $2a68			jsr 	StringTempWrite
.1ad7	c8		iny				iny
.1ad8	c6 26		dec $26				dec 	zTemp1
.1ada	d0 f6		bne $1ad2			bne 	_EXPSSCopy
.1adc	7a		ply				ply
.1add					_EXPSSExit:
.1add	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1ade					EXPUnaryVal:
.1ade	20 a0 17	jsr $17a0			jsr 	EXPEvalString 					; string to R0, zTemp0
.1ae1	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 					; )
.1ae4	20 e8 1a	jsr $1ae8			jsr 	VALConversionZTemp0
.1ae7	60		rts				rts
.1ae8					VALConversionZTemp0:
.1ae8	5a		phy				phy
.1ae9	18		clc				clc
.1aea	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1aec	69 01		adc #$01			adc 	#1
.1aee	aa		tax				tax
.1aef	a5 25		lda $25				lda 	zTemp0+1
.1af1	69 00		adc #$00			adc 	#0
.1af3	a8		tay				tay
.1af4	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1af6	20 3f 32	jsr $323f			jsr 	IFloatStringToFloatR0 			; do conversion
.1af9	b0 02		bcs $1afd			bcs 	_EUVError
.1afb	7a		ply				ply
.1afc	60		rts				rts
.1afd					_EUVError:
.1afd	4c 87 27	jmp $2787		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1b00					AssemblerLookup:
>1b00	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,74,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,74,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,74,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,74,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,74,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,74,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,74,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,74,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,75,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,75,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,75,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,75,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,75,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,75,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,75,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,75
>1b08	fb 1e 7c 00 4b 1e 7c 4a b8 1e 1e 00 41 1e 7c eb
>1b18	b9 1e f9 00 41 1e 7c 4a 7f 6a 00 00 7a 6a e1 eb
>1b28	23 6a e1 00 7a 6a e1 4a 97 6a 6a 00 7a 6a e1 eb
>1b38	a6 6a 7d 00 7a 6a e1 4a 38 62 00 00 00 62 0b eb
>1b48	ec 62 0b 00 2e 62 0b 4a c3 62 62 00 00 62 0b eb
>1b58	bf 62 04 00 00 62 0b 4a 42 1d 00 00 3b 1d e7 eb
>1b68	14 1d e7 00 2e 1d e7 4a d3 1d 1d 00 3b 1d e7 eb
>1b78	ac 1d 2c 00 2e 1d e7 4a 99 22 00 00 3a 22 39 f5
>1b88	93 7a 54 00 3a 22 39 4b 45 22 22 00 3a 22 39 f5
>1b98	5e 22 66 00 3b 22 3b 4b 19 01 18 00 19 01 18 f5
>1ba8	c6 01 c5 00 19 01 18 4b 55 01 01 00 19 01 18 f5
>1bb8	cc 01 61 00 19 01 18 4b f7 a8 00 00 f7 a8 7d f5
>1bc8	0f a8 92 0c f7 a8 7d 4b 75 a8 a8 00 00 a8 7d f5
>1bd8	ba a8 03 31 00 a8 7d 4b f6 48 00 00 f6 48 f9 f5
>1be8	0e 48 dd 00 f6 48 f9 4b 8f 48 48 00 00 48 f9 f5
>1bf8	a7 48 2b 00 00 48 f9 4b

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1c00					BinaryPrecedence:
>1c00	02					.byte	 2	; $ef =
>1c01	02					.byte	 2	; $f0 <>
>1c02	02					.byte	 2	; $f1 <=
>1c03	02					.byte	 2	; $f2 <
>1c04	02					.byte	 2	; $f3 >=
>1c05	02					.byte	 2	; $f4 >
>1c06	01					.byte	 1	; $f5 XOR
>1c07	01					.byte	 1	; $f6 OR
>1c08	01					.byte	 1	; $f7 AND
>1c09	04					.byte	 4	; $f8 DIV
>1c0a	04					.byte	 4	; $f9 MOD
>1c0b	04					.byte	 4	; $fa <<
>1c0c	04					.byte	 4	; $fb >>
>1c0d	04					.byte	 4	; $fc /
>1c0e	04					.byte	 4	; $fd *
>1c0f	03					.byte	 3	; $fe -
>1c10	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1c11					StructureOffsets:
>1c11	01					.byte	1  	; $80 REPEAT
>1c12	ff					.byte	255	; $81 UNTIL
>1c13	01					.byte	1  	; $82 WHILE
>1c14	ff					.byte	255	; $83 WEND
>1c15	01					.byte	1  	; $84 IF
>1c16	ff					.byte	255	; $85 ENDIF
>1c17	01					.byte	1  	; $86 DO
>1c18	ff					.byte	255	; $87 LOOP
>1c19	01					.byte	1  	; $88 PROC
>1c1a	ff					.byte	255	; $89 ENDPROC
>1c1b	01					.byte	1  	; $8a FOR
>1c1c	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1c1d					StandardTokens:
>1c1d	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1c24	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1c2a	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1c30	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1c35	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1c38	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1c3e	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1c41	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1c46	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1c4b	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1c53	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1c57	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1c5c	00					.byte	$00                                     	; $8c [[end]]
>1c5d	00					.byte	$00                                     	; $8d [[shift]]
>1c5e	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1c63	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1c68	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1c6b	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1c70	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1c74	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1c7a	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1c80	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1c85	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1c89	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1c8d	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1c92	01 2c					.byte	$01,$2c                                 	; $99 ,
>1c94	01 3b					.byte	$01,$3b                                 	; $9a ;
>1c96	01 3a					.byte	$01,$3a                                 	; $9b :
>1c98	01 27					.byte	$01,$27                                 	; $9c '
>1c9a	01 29					.byte	$01,$29                                 	; $9d )
>1c9c	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1ca1	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1ca6	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1cab	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1cb0	01 5b					.byte	$01,$5b                                 	; $a2 [
>1cb2	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1cb4	01 23					.byte	$01,$23                                 	; $a4 #
>1cb6	01 2e					.byte	$01,$2e                                 	; $a5 .
>1cb8	00					.byte	0											; $a6
>1cb9	00					.byte	0											; $a7
>1cba	00					.byte	0											; $a8
>1cbb	00					.byte	0											; $a9
>1cbc	00					.byte	0											; $aa
>1cbd	00					.byte	0											; $ab
>1cbe	00					.byte	0											; $ac
>1cbf	00					.byte	0											; $ad
>1cc0	00					.byte	0											; $ae
>1cc1	00					.byte	0											; $af
>1cc2	00					.byte	0											; $b0
>1cc3	00					.byte	0											; $b1
>1cc4	00					.byte	0											; $b2
>1cc5	00					.byte	0											; $b3
>1cc6	00					.byte	0											; $b4
>1cc7	00					.byte	0											; $b5
>1cc8	00					.byte	0											; $b6
>1cc9	00					.byte	0											; $b7
>1cca	00					.byte	0											; $b8
>1ccb	00					.byte	0											; $b9
>1ccc	00					.byte	0											; $ba
>1ccd	00					.byte	0											; $bb
>1cce	00					.byte	0											; $bc
>1ccf	00					.byte	0											; $bd
>1cd0	00					.byte	0											; $be
>1cd1	00					.byte	0											; $bf
>1cd2	00					.byte	0											; $c0
>1cd3	00					.byte	0											; $c1
>1cd4	00					.byte	0											; $c2
>1cd5	00					.byte	0											; $c3
>1cd6	00					.byte	0											; $c4
>1cd7	00					.byte	0											; $c5
>1cd8	00					.byte	0											; $c6
>1cd9	00					.byte	0											; $c7
>1cda	00					.byte	0											; $c8
>1cdb	00					.byte	0											; $c9
>1cdc	00					.byte	0											; $ca
>1cdd	00					.byte	0											; $cb
>1cde	00					.byte	0											; $cc
>1cdf	00					.byte	0											; $cd
>1ce0	00					.byte	0											; $ce
>1ce1	00					.byte	0											; $cf
>1ce2	00					.byte	0											; $d0
>1ce3	00					.byte	0											; $d1
>1ce4	00					.byte	0											; $d2
>1ce5	00					.byte	0											; $d3
>1ce6	00					.byte	0											; $d4
>1ce7	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1ced	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1cf3	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1cfb	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1d02	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1d08	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1d0e	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1d13	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1d18	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1d1d	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1d22	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1d27	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1d2d	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1d32	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1d3a	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1d41	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1d46	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1d4b	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1d51	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1d56	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1d5c	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1d61	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1d67	01 28					.byte	$01,$28                                 	; $eb (
>1d69	01 26					.byte	$01,$26                                 	; $ec &
>1d6b	00					.byte	$00                                     	; $ed [[decimal]]
>1d6c	00					.byte	$00                                     	; $ee [[string]]
>1d6d	01 3d					.byte	$01,$3d                                 	; $ef =
>1d6f	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1d72	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1d75	01 3c					.byte	$01,$3c                                 	; $f2 <
>1d77	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1d7a	01 3e					.byte	$01,$3e                                 	; $f4 >
>1d7c	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1d80	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1d83	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1d87	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1d8b	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1d8f	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1d92	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1d95	01 2f					.byte	$01,$2f                                 	; $fc /
>1d97	01 2a					.byte	$01,$2a                                 	; $fd *
>1d99	01 2d					.byte	$01,$2d                                 	; $fe -
>1d9b	01 2b					.byte	$01,$2b                                 	; $ff +
>1d9d	ff					.byte	$FF
.1d9e					AlternateTokens:
>1d9e	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1da4	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1da8	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1dac	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1db1	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1db5	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1dbc	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1dc1	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1dc6	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1dcb	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1dd1	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1dd6	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1ddd	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1de5	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1de9	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>1ded	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>1df3	08 52 45 4e 55 4d 42 45			.byte	$08,$52,$45,$4e,$55,$4d,$42,$45,$52     	; $8d90 renumber
>1dfb	52
>1dfc	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1dfd					VectorTable:
>1dfd	55 26					.word	Command_REPEAT           ; $80 REPEAT
>1dff	5e 26					.word	Command_UNTIL            ; $81 UNTIL
>1e01	38 27					.word	Command_WHILE            ; $82 WHILE
>1e03	59 27					.word	Command_WEND             ; $83 WEND
>1e05	2b 26					.word	IfCommand                ; $84 IF
>1e07	54 26					.word	EndIf                    ; $85 ENDIF
>1e09	ad 24					.word	Command_DO               ; $86 DO
>1e0b	c5 24					.word	Command_LOOP             ; $87 LOOP
>1e0d	b6 15					.word	NoExec08                 ; $88 PROC
>1e0f	a1 24					.word	Command_ENDPROC          ; $89 ENDPROC
>1e11	ce 24					.word	Command_FOR              ; $8a FOR
>1e13	5b 25					.word	Command_NEXT             ; $8b NEXT
>1e15	37 15					.word	RUNEndOfLine             ; $8c [[END]]
>1e17	93 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1e19	4d 26					.word	ElseCode                 ; $8e ELSE
>1e1b	b6 15					.word	NoExec01                 ; $8f THEN
>1e1d	b6 15					.word	NoExec02                 ; $90 TO
>1e1f	b6 15					.word	NoExec03                 ; $91 STEP
>1e21	de 12					.word	CommandLET               ; $92 LET
>1e23	33 12					.word	Command_Print            ; $93 PRINT
>1e25	2c 12					.word	Command_Input            ; $94 INPUT
>1e27	65 24					.word	Command_CALL             ; $95 CALL
>1e29	a1 15					.word	Command_Sys              ; $96 SYS
>1e2b	ac 14					.word	Command_REM              ; $97 REM
>1e2d	b6 24					.word	Command_EXIT             ; $98 EXIT
>1e2f	b6 15					.word	NoExec04                 ; $99 ,
>1e31	b6 15					.word	NoExec05                 ; $9a ;
>1e33	b6 15					.word	NoExec06                 ; $9b :
>1e35	ac 14					.word	Command_REM2             ; $9c '
>1e37	b6 15					.word	NoExec07                 ; $9d )
>1e39	d5 11					.word	Command_Poke             ; $9e POKE
>1e3b	d2 11					.word	Command_Doke             ; $9f DOKE
>1e3d	38 14					.word	Command_READ             ; $a0 READ
>1e3f	9f 14					.word	Command_DATA             ; $a1 DATA
>1e41	0d 10					.word	Command_AssemblerStart   ; $a2 [
>1e43	b1 2b					.word	NotImplemented           ; $a3 ]
>1e45	b1 2b					.word	NotImplemented           ; $a4 #
>1e47	b1 2b					.word	NotImplemented           ; $a5 .
>1e49	b1 2b					.word	NotImplemented           ; $a6
>1e4b	b1 2b					.word	NotImplemented           ; $a7
>1e4d	b1 2b					.word	NotImplemented           ; $a8
>1e4f	b1 2b					.word	NotImplemented           ; $a9
>1e51	b1 2b					.word	NotImplemented           ; $aa
>1e53	b1 2b					.word	NotImplemented           ; $ab
>1e55	b1 2b					.word	NotImplemented           ; $ac
>1e57	b1 2b					.word	NotImplemented           ; $ad
>1e59	b1 2b					.word	NotImplemented           ; $ae
>1e5b	b1 2b					.word	NotImplemented           ; $af
>1e5d	b1 2b					.word	NotImplemented           ; $b0
>1e5f	b1 2b					.word	NotImplemented           ; $b1
>1e61	b1 2b					.word	NotImplemented           ; $b2
>1e63	b1 2b					.word	NotImplemented           ; $b3
>1e65	b1 2b					.word	NotImplemented           ; $b4
>1e67	b1 2b					.word	NotImplemented           ; $b5
>1e69	b1 2b					.word	NotImplemented           ; $b6
>1e6b	b1 2b					.word	NotImplemented           ; $b7
>1e6d	b1 2b					.word	NotImplemented           ; $b8
>1e6f	b1 2b					.word	NotImplemented           ; $b9
>1e71	b1 2b					.word	NotImplemented           ; $ba
>1e73	b1 2b					.word	NotImplemented           ; $bb
>1e75	b1 2b					.word	NotImplemented           ; $bc
>1e77	b1 2b					.word	NotImplemented           ; $bd
>1e79	b1 2b					.word	NotImplemented           ; $be
>1e7b	b1 2b					.word	NotImplemented           ; $bf
>1e7d	b1 2b					.word	NotImplemented           ; $c0
>1e7f	b1 2b					.word	NotImplemented           ; $c1
>1e81	b1 2b					.word	NotImplemented           ; $c2
>1e83	b1 2b					.word	NotImplemented           ; $c3
>1e85	b1 2b					.word	NotImplemented           ; $c4
>1e87	b1 2b					.word	NotImplemented           ; $c5
>1e89	b1 2b					.word	NotImplemented           ; $c6
>1e8b	b1 2b					.word	NotImplemented           ; $c7
>1e8d	b1 2b					.word	NotImplemented           ; $c8
>1e8f	b1 2b					.word	NotImplemented           ; $c9
>1e91	b1 2b					.word	NotImplemented           ; $ca
>1e93	b1 2b					.word	NotImplemented           ; $cb
>1e95	b1 2b					.word	NotImplemented           ; $cc
>1e97	b1 2b					.word	NotImplemented           ; $cd
>1e99	b1 2b					.word	NotImplemented           ; $ce
>1e9b	b1 2b					.word	NotImplemented           ; $cf
>1e9d	b1 2b					.word	NotImplemented           ; $d0
>1e9f	b1 2b					.word	NotImplemented           ; $d1
>1ea1	b1 2b					.word	NotImplemented           ; $d2
>1ea3	b1 2b					.word	NotImplemented           ; $d3
>1ea5	b1 2b					.word	NotImplemented           ; $d4
>1ea7	24 19					.word	EXPUnaryDeek             ; $d5 DEEK(
>1ea9	16 19					.word	EXPUnaryPeek             ; $d6 PEEK(
>1eab	62 1a					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1ead	55 1a					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1eaf	7c 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1eb1	12 1a					.word	EXPUnaryStr              ; $da STR$(
>1eb3	de 1a					.word	EXPUnaryVal              ; $db VAL(
>1eb5	df 19					.word	EXPUnarySgn              ; $dc SGN(
>1eb7	90 18					.word	EXPUnaryAbs              ; $dd ABS(
>1eb9	64 19					.word	EXPUnaryLen              ; $de LEN(
>1ebb	f5 19					.word	EXPUnarySqr              ; $df SQR(
>1ebd	b4 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1ebf	9e 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1ec1	46 19					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1ec3	b1 2b					.word	NotImplemented           ; $e3 EVENT(
>1ec5	b1 2b					.word	NotImplemented           ; $e4 TIME
>1ec7	5a 19					.word	EXPUnaryInt              ; $e5 INT(
>1ec9	3c 19					.word	EXPUnaryFrac             ; $e6 FRAC(
>1ecb	c5 18					.word	EXPUnaryDec              ; $e7 DEC(
>1ecd	04 1a					.word	EXPUnaryHex              ; $e8 HEX$(
>1ecf	79 19					.word	EXPUnaryRnd              ; $e9 RND(
>1ed1	89 19					.word	ExpUnaryRand             ; $ea RAND(
>1ed3	72 19					.word	EXPUnaryParenthesis      ; $eb (
>1ed5	9a 18					.word	EXPUnaryNull             ; $ec &
>1ed7	13 19					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1ed9	3a 1a					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1edb	73 16					.word	EXPCompareEqual          ; $ef =
>1edd	8e 16					.word	EXPCompareNotEqual       ; $f0 <>
>1edf	97 16					.word	EXPCompareLessEqual      ; $f1 <=
>1ee1	7c 16					.word	EXPCompareLess           ; $f2 <
>1ee3	a0 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1ee5	85 16					.word	EXPCompareGreater        ; $f4 >
>1ee7	20 16					.word	EXPBinXor                ; $f5 XOR
>1ee9	14 16					.word	EXPBinOr                 ; $f6 OR
>1eeb	08 16					.word	EXPBinAnd                ; $f7 AND
>1eed	e0 15					.word	EXPBinIDiv               ; $f8 DIV
>1eef	f1 15					.word	EXPBinIMod               ; $f9 MOD
>1ef1	eb 16					.word	EXPBinLeft               ; $fa <<
>1ef3	f3 16					.word	EXPBinRight              ; $fb >>
>1ef5	d4 15					.word	EXPBinFDiv               ; $fc /
>1ef7	cb 15					.word	EXPBinMul                ; $fd *
>1ef9	c2 15					.word	EXPBinSub                ; $fe -
>1efb	b9 15					.word	EXPBinAdd                ; $ff +
.1efd					AlternateVectorTable:
>1efd	42 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1eff	2f 14					.word	Command_NEW              ; $8d81 NEW
>1f01	2b 15					.word	Command_RUN              ; $8d82 RUN
>1f03	9e 15					.word	Command_STOP             ; $8d83 STOP
>1f05	9b 15					.word	Command_END              ; $8d84 END
>1f07	34 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1f09	58 13					.word	Command_LIST             ; $8d86 LIST
>1f0b	1f 2b					.word	Command_SAVE             ; $8d87 SAVE
>1f0d	de 2a					.word	Command_LOAD             ; $8d88 LOAD
>1f0f	11 26					.word	Command_GOSUB            ; $8d89 GOSUB
>1f11	fc 11					.word	Command_GOTO             ; $8d8a GOTO
>1f13	1f 26					.word	Command_RETURN           ; $8d8b RETURN
>1f15	fd 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1f17	b6 10					.word	CommandDIM               ; $8d8d DIM
>1f19	75 2a					.word	Command_DIR              ; $8d8e DIR
>1f1b	b2 2a					.word	Command_ERASE            ; $8d8f ERASE
>1f1d	b9 14					.word	Command_RENUMBER         ; $8d90 RENUMBER

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1f1f					TOKDetokenise:
.1f1f	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.1f21	84 29		sty $29				sty 	zTemp2+1
.1f23	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1f26					_TOKDLoop:
.1f26	20 6b 1f	jsr $1f6b			jsr 	TOKDGet 					; get next
.1f29	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1f2b	f0 3c		beq $1f69			beq 	_TOKDExit
.1f2d	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1f2f	f0 33		beq $1f64			beq 	_TOKDDataItem
.1f31	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1f33	f0 2f		beq $1f64			beq 	_TOKDDataItem
.1f35	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.1f37	f0 19		beq $1f52			beq 	_TOKAmpersand
.1f39	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1f3b	10 05		bpl $1f42			bpl 	_TOKDNotToken
.1f3d	20 31 20	jsr $2031			jsr 	TOKDToken 					; token to text.
.1f40	80 e4		bra $1f26			bra 	_TOKDLoop
.1f42					_TOKDNotToken:
.1f42	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1f44	90 05		bcc $1f4b			bcc 	_TOKDNotIdentifier
.1f46	20 a8 1f	jsr $1fa8			jsr 	TOKDIdentifier
.1f49	80 db		bra $1f26			bra 	_TOKDLoop
.1f4b					_TOKDNotIdentifier:
.1f4b	a0 0a		ldy #$0a			ldy 	#10
.1f4d	20 eb 1f	jsr $1feb			jsr 	TOKDInteger
.1f50	80 d4		bra $1f26			bra 	_TOKDLoop
.1f52					_TOKAmpersand:
.1f52	20 73 20	jsr $2073			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.1f55	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.1f57	20 74 1f	jsr $1f74			jsr 	TOKDOutput
.1f5a	20 6b 1f	jsr $1f6b			jsr 	TOKDGet 					; get first char of integer
.1f5d	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.1f5f	20 eb 1f	jsr $1feb			jsr 	TOKDInteger
.1f62	80 c2		bra $1f26			bra 	_TOKDLoop
.1f64					_TOKDDataItem:
.1f64	20 81 1f	jsr $1f81			jsr 	TOKDDataItem
.1f67	80 bd		bra $1f26			bra 	_TOKDLoop
.1f69					_TOKDExit:
.1f69	18		clc				clc
.1f6a	60		rts				rts
.1f6b	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.1f6d	e6 28		inc $28				inc 	zTemp2
.1f6f	d0 02		bne $1f73			bne 	_TKDGExit
.1f71	e6 29		inc $29				inc 	zTemp2+1
.1f73					_TKDGExit:
.1f73	60		rts				rts
.1f74					TOKDOutput:
.1f74	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1f77	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1f7a					TOKSetDetokeniseOutput:
.1f7a	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1f7d	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1f80	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1f81					TOKDDataItem:
.1f81	a8		tay				tay 								; type in Y
.1f82	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1f84	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1f86	f0 02		beq $1f8a			beq 	_TOKDDIsString
.1f88	a9 2e		lda #$2e			lda 	#'.'
.1f8a					_TOKDDIsString:
.1f8a	20 74 1f	jsr $1f74			jsr 	TOKDOutput 					; dump it
.1f8d	20 6b 1f	jsr $1f6b			jsr 	TOKDGet 					; get length into X
.1f90	aa		tax				tax
.1f91					_TOKDDOutput:
.1f91	ca		dex				dex 								; are we complete
.1f92	e0 ff		cpx #$ff			cpx 	#255
.1f94	f0 08		beq $1f9e			beq 	_TOKDDEnd
.1f96	20 6b 1f	jsr $1f6b			jsr 	TOKDGet 					; get character and output it
.1f99	20 74 1f	jsr $1f74			jsr 	TOKDOutput
.1f9c	80 f3		bra $1f91			bra 	_TOKDDOutput
.1f9e					_TOKDDEnd:
.1f9e	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1fa0	d0 05		bne $1fa7			bne 	_TOKDDNotString
.1fa2	a9 22		lda #$22			lda 	#'"'
.1fa4	20 74 1f	jsr $1f74			jsr 	TOKDOutput
.1fa7					_TOKDDNotString:
.1fa7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1fa8					TOKDIdentifier:
.1fa8	a0 ff		ldy #$ff			ldy 	#$FF
.1faa	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1fad					_TOKDLoop:
.1fad	a8		tay				tay 								; token in Y
.1fae	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.1fb0	c0 64		cpy #$64			cpy 	#$64
.1fb2	f0 0b		beq $1fbf			beq 	_TOKDIOutput
.1fb4	98		tya				tya 								; handle a-z
.1fb5	18		clc				clc
.1fb6	69 21		adc #$21			adc	 	#$21
.1fb8	c0 5a		cpy #$5a			cpy 	#$5A
.1fba	90 03		bcc $1fbf			bcc 	_TOKDIOutput
.1fbc	38		sec				sec 								; handle 0-9
.1fbd	e9 4b		sbc #$4b			sbc 	#$4B
.1fbf					_TOKDIOutput:
.1fbf	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1fc2	10 08		bpl $1fcc			bpl 	_TOKDINoSpacing
.1fc4	48		pha				pha
.1fc5	20 6e 20	jsr $206e			jsr 	TOKDSpacing
.1fc8	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1fcb	68		pla				pla
.1fcc					_TOKDINoSpacing:
.1fcc	20 74 1f	jsr $1f74			jsr 	TOKDOutput
.1fcf	20 6b 1f	jsr $1f6b			jsr 	TOKDGet 					; get next token
.1fd2	c9 7c		cmp #$7c			cmp 	#$7C
.1fd4	90 d7		bcc $1fad			bcc 	_TOKDLoop
.1fd6	f0 12		beq $1fea			beq 	_TOKDIExit 					; it's a number, no tail.
.1fd8	4a		lsr a				lsr 	a 							; string ?
.1fd9	90 07		bcc $1fe2			bcc 	_TOKDICheckArray
.1fdb	48		pha				pha
.1fdc	a9 24		lda #$24			lda 	#"$"
.1fde	20 74 1f	jsr $1f74			jsr 	TOKDOutput
.1fe1	68		pla				pla
.1fe2					_TOKDICheckArray:
.1fe2	4a		lsr a				lsr 	a 							; array ?
.1fe3	90 05		bcc $1fea			bcc 	_TOKDIExit
.1fe5	a9 28		lda #$28			lda 	#"("
.1fe7	20 74 1f	jsr $1f74			jsr 	TOKDOutput
.1fea					_TOKDIExit:
.1fea	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1feb					TOKDInteger:
.1feb	5a		phy				phy 								; save base
.1fec	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1fee	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.1ff1					_TOKDILoop:
.1ff1	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F
.1ff3	c9 40		cmp #$40			cmp 	#$40
.1ff5	b0 1d		bcs $2014			bcs 	_TOKDIHaveInteger
.1ff7	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1ff9	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.1ffc	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.1fff	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.2002	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.2005	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.2008	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.200b	20 6b 1f	jsr $1f6b			jsr 	TOKDGet 					; OR byte in.
.200e	05 08		ora $08				ora 	IFR0+IM0
.2010	85 08		sta $08				sta 	IFR0+IM0
.2012	80 dd		bra $1ff1			bra 	_TOKDILoop
.2014					_TOKDIHaveInteger:
.2014	7a		ply				ply 								; restore base
.2015	98		tya				tya 								; base in A
.2016	20 7d 31	jsr $317d			jsr 	IFloatIntegerToStringR0
.2019	86 24		stx $24				stx 	zTemp0
.201b	84 25		sty $25				sty 	zTemp0+1
.201d	b2 24		lda ($24)			lda 	(zTemp0)
.201f	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.2021	b1 24		lda ($24),y			lda 	(zTemp0),y
.2023	20 6e 20	jsr $206e			jsr 	TOKDSpacing 				; check spacing okay.
.2026					_TOKDOutput:
.2026	b1 24		lda ($24),y			lda 	(zTemp0),y
.2028	20 74 1f	jsr $1f74			jsr 	TOKDOutput
.202b	c8		iny				iny
.202c	b1 24		lda ($24),y			lda 	(zTemp0),y
.202e	d0 f6		bne $2026			bne 	_TOKDOutput
.2030	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.2031					TOKDToken:
.2031	a2 1d		ldx #$1d			ldx 	#StandardTokens & $FF 		; standard table
.2033	a0 1c		ldy #$1c			ldy 	#StandardTokens >> 8
.2035	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.2037	d0 07		bne $2040			bne 	_TOKDSearch
.2039	20 6b 1f	jsr $1f6b			jsr 	TOKDGet 					; get next
.203c	a2 9e		ldx #$9e			ldx 	#AlternateTokens & $FF 		; alt table
.203e	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.2040					_TOKDSearch:
.2040	86 24		stx $24				stx 	zTemp0 						; put table in zTemp0
.2042	84 25		sty $25				sty 	zTemp0+1
.2044	aa		tax				tax 								; token ID in X.
.2045					_TOKDFind:
.2045	ca		dex				dex 								; reached the start
.2046	10 0d		bpl $2055			bpl 	_TOKDFound
.2048	38		sec				sec 								; go to next entry
.2049	b2 24		lda ($24)			lda 	(zTemp0)
.204b	65 24		adc $24				adc 	zTemp0
.204d	85 24		sta $24				sta 	zTemp0
.204f	90 f4		bcc $2045			bcc 	_TOKDFind
.2051	e6 25		inc $25				inc 	zTemp0+1
.2053	80 f0		bra $2045			bra 	_TOKDFind
.2055					_TOKDFound:
.2055	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X
.2057	f0 14		beq $206d			beq 	_TOKDExit
.2059	aa		tax				tax
.205a	a0 01		ldy #$01			ldy 	#1 							; output the token.
.205c	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.205e	20 6e 20	jsr $206e			jsr 	TOKDSpacing
.2061					_TOKDOutput:
.2061	b1 24		lda ($24),y			lda 	(zTemp0),y
.2063	20 24 24	jsr $2424			jsr 	TOKToLower
.2066	20 74 1f	jsr $1f74			jsr 	TOKDOutput
.2069	c8		iny				iny
.206a	ca		dex				dex
.206b	d0 f4		bne $2061			bne 	_TOKDOutput
.206d					_TOKDExit:
.206d	60		rts				rts
.206e					TOKDSpacing:
.206e	20 3b 24	jsr $243b			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.2071	90 0d		bcc $2080			bcc 	TOKDSExit
.2073					TOKDSpaceLastAlpha:
.2073	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.2076	20 3b 24	jsr $243b			jsr 	TOKIsIdentifierElement
.2079	90 05		bcc $2080			bcc 	TOKDSExit
.207b	a9 20		lda #$20			lda 	#" " 						; we need a space.
.207d	20 74 1f	jsr $1f74			jsr 	TOKDOutput
.2080					TOKDSExit:
.2080	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.2081					PGMDeleteLine:
.2081	20 34 21	jsr $2134			jsr 	PGMEndProgram 				; end of program into zTemp0
.2084	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2086	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.2089	85 27		sta $27				sta 	zTemp1+1
.208b					_PGMDLoop:
.208b	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.208d	38		sec				sec
.208e	f0 3a		beq $20ca			beq 	_PGMDExit
.2090	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.2092	b1 26		lda ($26),y			lda 	(zTemp1),y
.2094	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2097	d0 08		bne $20a1			bne 	_PGMDNext
.2099	c8		iny				iny
.209a	b1 26		lda ($26),y			lda 	(zTemp1),y
.209c	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.209f	f0 0d		beq $20ae			beq 	_PGMDDelete
.20a1					_PGMDNext:
.20a1	18		clc				clc
.20a2	b2 26		lda ($26)			lda 	(zTemp1)
.20a4	65 26		adc $26				adc 	zTemp1
.20a6	85 26		sta $26				sta 	zTemp1
.20a8	90 e1		bcc $208b			bcc 	_PGMDLoop
.20aa	e6 27		inc $27				inc 	zTemp1+1
.20ac	80 dd		bra $208b			bra 	_PGMDLoop
.20ae					_PGMDDelete:
.20ae	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.20b0	a8		tay				tay
.20b1					_PGMDCopy:
.20b1	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.20b3	92 26		sta ($26)			sta 	(zTemp1)
.20b5	a5 26		lda $26				lda 	zTemp1 						; reached the end ?
.20b7	c5 24		cmp $24				cmp 	zTemp0
.20b9	d0 07		bne $20c2			bne 	_PGMDNext2
.20bb	a5 27		lda $27				lda 	zTemp1+1
.20bd	c5 25		cmp $25				cmp 	zTemp0+1
.20bf	18		clc				clc
.20c0	f0 08		beq $20ca			beq 	_PGMDExit
.20c2					_PGMDNext2:
.20c2	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.20c4	d0 eb		bne $20b1			bne 	_PGMDCopy
.20c6	e6 27		inc $27				inc 	zTemp1+1
.20c8	80 e7		bra $20b1			bra 	_PGMDCopy
.20ca					_PGMDExit:
.20ca	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.20cb					PGMInsertLine:
.20cb	20 34 21	jsr $2134			jsr 	PGMEndProgram 				; end of program into zTemp0
.20ce	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.20d0	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.20d3	85 27		sta $27				sta 	zTemp1+1
.20d5					_PGMILoop:
.20d5	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.20d7	f0 1c		beq $20f5			beq 	_PGMIInsert
.20d9	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.20db	b1 26		lda ($26),y			lda 	(zTemp1),y
.20dd	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.20e0	c8		iny				iny
.20e1	b1 26		lda ($26),y			lda 	(zTemp1),y
.20e3	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.20e6	b0 0d		bcs $20f5			bcs 	_PGMIInsert 				; insert here.
.20e8	18		clc				clc
.20e9	b2 26		lda ($26)			lda 	(zTemp1)
.20eb	65 26		adc $26				adc 	zTemp1
.20ed	85 26		sta $26				sta 	zTemp1
.20ef	90 e4		bcc $20d5			bcc 	_PGMILoop
.20f1	e6 27		inc $27				inc 	zTemp1+1
.20f3	80 e0		bra $20d5			bra 	_PGMILoop
.20f5					_PGMIInsert:
.20f5	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.20f8					_PGMIInsertLoop:
.20f8	b2 24		lda ($24)			lda 	(zTemp0)
.20fa	91 24		sta ($24),y			sta 	(zTemp0),y
.20fc	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.20fe	c5 24		cmp $24				cmp 	zTemp0
.2100	d0 06		bne $2108			bne 	_PGMINext
.2102	a5 27		lda $27				lda 	zTemp1+1
.2104	c5 25		cmp $25				cmp 	zTemp0+1
.2106	f0 0a		beq $2112			beq 	_PGMIInserted
.2108					_PGMINext:
.2108	a5 24		lda $24				lda 	zTemp0
.210a	d0 02		bne $210e			bne 	_PGMINoBorrow
.210c	c6 25		dec $25				dec 	zTemp0+1
.210e					_PGMINoBorrow:
.210e	c6 24		dec $24				dec 	zTemp0
.2110	80 e6		bra $20f8			bra 	_PGMIInsertLoop
.2112					_PGMIInserted:
.2112	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.2114					_PGMICopyLoop:
.2114	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.2117	91 26		sta ($26),y			sta 	(zTemp1),y
.2119	c8		iny				iny
.211a	cc 00 04	cpy $0400			cpy 	TOKLineSize
.211d	d0 f5		bne $2114			bne 	_PGMICopyLoop
.211f	18		clc				clc
.2120	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.2121					PGMSetBaseAddress:
.2121	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.2124	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.2127	60		rts				rts
.2128					PGMNewProgram:
.2128	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.212a	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.212d	85 25		sta $25				sta 	zTemp0+1
.212f	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.2131	92 24		sta ($24)			sta 	(zTemp0)
.2133	60		rts				rts
.2134					PGMEndProgram:
.2134	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.2136	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.2139	85 25		sta $25				sta 	zTemp0+1
.213b					_PGMEPLoop:
.213b	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.213d	f0 0b		beq $214a			beq 	_PGMEPExit
.213f	18		clc				clc 								; no, advance to next
.2140	65 24		adc $24				adc 	zTemp0
.2142	85 24		sta $24				sta 	zTemp0
.2144	90 f5		bcc $213b			bcc 	_PGMEPLoop
.2146	e6 25		inc $25				inc 	zTemp0+1
.2148	80 f1		bra $213b			bra 	_PGMEPLoop
.214a					_PGMEPExit:
.214a	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.214b					TOKResetElement:
.214b	9c 1c 05	stz $051c			stz 	TOKElement
.214e	60		rts				rts
.214f					TOKWriteElement:
.214f	da		phx				phx
.2150	ae 1c 05	ldx $051c			ldx 	TOKElement
.2153	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.2156	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.2159	fa		plx				plx
.215a	ee 1c 05	inc $051c			inc 	TOKElement
.215d	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.215e					TOKTokeniseConstant:
.215e	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.2160	48		pha				pha 								; save on stack
.2161	29 c0		and #$c0			and 	#$C0
.2163	05 09		ora $09				ora 	IFR0+IM1
.2165	05 0a		ora $0a				ora 	IFR0+IM2
.2167	f0 10		beq $2179			beq 	_TTCLess
.2169	da		phx				phx
.216a	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.216c					_TTCShiftRight:
.216c	46 0a		lsr $0a				lsr 	IFR0+IM2
.216e	66 09		ror $09				ror 	IFR0+IM1
.2170	66 08		ror $08				ror 	IFR0+IM0
.2172	ca		dex				dex
.2173	d0 f7		bne $216c			bne 	_TTCShiftRight
.2175	fa		plx				plx
.2176	20 5e 21	jsr $215e			jsr 	TOKTokeniseConstant
.2179					_TTCLess:
.2179	68		pla				pla
.217a	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.217c	20 1c 22	jsr $221c			jsr 	TOKWriteA
.217f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.2180					TOKTokeniseDecimals:
.2180	20 2f 22	jsr $222f			jsr 	TOKGetNext 					; consume the .
.2183	20 a8 23	jsr $23a8			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2186	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.2188	20 1c 22	jsr $221c			jsr 	TOKWriteA
.218b	20 90 21	jsr $2190			jsr 	TOKOutputElementBuffer 		; then the buffer
.218e	18		clc				clc
.218f	60		rts				rts
.2190					TOKOutputElementBuffer:
.2190	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.2193	20 1c 22	jsr $221c			jsr 	TOKWriteA
.2196	a8		tay				tay 								; put in Y
.2197	f0 0c		beq $21a5			beq 	_TOEExit 					; exit if empty which is okay.
.2199	a2 01		ldx #$01			ldx 	#1
.219b					_TOELoop:
.219b	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.219e	20 1c 22	jsr $221c			jsr 	TOKWriteA
.21a1	e8		inx				inx
.21a2	88		dey				dey
.21a3	d0 f6		bne $219b			bne 	_TOELoop
.21a5					_TOEExit:
.21a5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.21a6					TOKTokenise:
.21a6	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.21a9	8e 1c 06	stx $061c			stx 	TOKDataSource
.21ac	a9 01		lda #$01			lda 	#1 							; set first element flag.
.21ae	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.21b1	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.21b3	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.21b6	9c 01 04	stz $0401			stz 	TOKLineNumber
.21b9	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.21bc					_TOKMainLoop:
.21bc	20 2b 22	jsr $222b			jsr 	TOKGet 						; what follows.
.21bf	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.21c1	f0 50		beq $2213			beq 	_TOKExit
.21c3	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.21c5	d0 05		bne $21cc			bne 	_TOKElement
.21c7	20 2f 22	jsr $222f			jsr 	TOKGetNext
.21ca	80 f0		bra $21bc			bra 	_TOKMainLoop
.21cc					_TOKElement:
.21cc	20 2f 24	jsr $242f			jsr 	TOKIsDigit 					; is it 0..9
.21cf	90 16		bcc $21e7			bcc 	_TOKNotDigit
.21d1	20 7f 23	jsr $237f			jsr 	TOKTokeniseInteger 			; get integer
.21d4	b0 44		bcs $221a			bcs 	_TOKFail 					; did it fail ?
.21d6	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.21d9	20 2b 22	jsr $222b			jsr 	TOKGet 						; what follows ?
.21dc	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.21de	d0 dc		bne $21bc			bne 	_TOKMainLoop
.21e0	20 80 21	jsr $2180			jsr 	TOKTokeniseDecimals
.21e3	b0 35		bcs $221a			bcs 	_TOKFail
.21e5	80 d5		bra $21bc			bra 	_TOKMainLoop
.21e7					_TOKNotDigit:
.21e7	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.21ea	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.21ec	d0 07		bne $21f5			bne 	_TOKNotHex
.21ee	20 85 22	jsr $2285			jsr 	TOKTokeniseHexadecimal
.21f1	b0 27		bcs $221a			bcs 	_TOKFail
.21f3	80 c7		bra $21bc			bra 	_TOKMainLoop
.21f5					_TOKNotHex:
.21f5	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.21f7	d0 07		bne $2200			bne 	_TOKNotString
.21f9	20 f6 23	jsr $23f6			jsr 	TOKTokeniseString
.21fc	b0 1c		bcs $221a			bcs 	_TOKFail
.21fe	80 bc		bra $21bc			bra 	_TOKMainLoop
.2200					_TOKNotString:
.2200	20 48 24	jsr $2448			jsr 	TOKIsAlpha 					; identifier ?
.2203	b0 07		bcs $220c			bcs 	_TOKIdentifier
.2205	20 bc 23	jsr $23bc			jsr 	TOKTokenisePunctuation 		; punctuation
.2208	b0 10		bcs $221a			bcs 	_TOKFail
.220a	80 b0		bra $21bc			bra 	_TOKMainLoop
.220c					_TOKIdentifier:
.220c	20 c2 22	jsr $22c2			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.220f	b0 09		bcs $221a			bcs 	_TOKFail
.2211	80 a9		bra $21bc			bra 	_TOKMainLoop
.2213					_TOKExit:
.2213	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.2215	20 1c 22	jsr $221c			jsr 	TOKWriteA
.2218	18		clc				clc									; return with carry set.
.2219	60		rts				rts
.221a					_TOKFail:
.221a	38		sec				sec
.221b	60		rts				rts
.221c					TOKWriteA:
.221c	da		phx				phx
.221d	ae 00 04	ldx $0400			ldx 	TOKLineSize
.2220	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.2223	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.2226	fa		plx				plx
.2227	ee 00 04	inc $0400			inc 	TOKLineSize
.222a	60		rts				rts
.222b					TOKGet:
.222b	18		clc				clc
.222c	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.222f					TOKGetNext:
.222f	38		sec				sec
.2230	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.2233					TOKFindToken:
.2233	a2 1d		ldx #$1d			ldx 	#StandardTokens & $FF 		; do this table
.2235	a0 1c		ldy #$1c			ldy 	#StandardTokens >> 8
.2237	20 4f 22	jsr $224f			jsr 	TOKFindTokenXY 				; find it, or not
.223a	b0 0d		bcs $2249			bcs 	_TOKFound1
.223c	a2 9e		ldx #$9e			ldx 	#AlternateTokens & $FF 		; do the alternate table
.223e	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.2240	20 4f 22	jsr $224f			jsr 	TOKFindTokenXY 				; find it, or not
.2243	90 08		bcc $224d			bcc 	_TOKFTFail 					; not ....
.2245	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.2247	38		sec				sec
.2248	60		rts				rts
.2249					_TOKFound1:
.2249	a2 00		ldx #$00			ldx 	#0
.224b	38		sec				sec
.224c	60		rts				rts
.224d					_TOKFTFail
.224d	18		clc				clc
.224e	60		rts				rts
.224f					TOKFindTokenXY:
.224f	86 24		stx $24				stx 	zTemp0 						; save token table address
.2251	84 25		sty $25				sty 	zTemp0+1
.2253	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.2255	8d 1f 06	sta $061f			sta 	TOKCurrent
.2258					_TOKFindLoop:
.2258	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.225a	18		clc				clc 		 						; clear carry in case of fail
.225b	30 17		bmi $2274			bmi 	_TOKExit 					; end of table, fail, so return CC.
.225d	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.2260	d0 13		bne $2275			bne 	_TOKNext 					; different, try next.
.2262	aa		tax				tax 								; number of chars to compare.
.2263	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.2265					_TOKCompare:
.2265	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.2267	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.226a	d0 09		bne $2275			bne 	_TOKNext 					; different ? try next
.226c	c8		iny				iny 								; compare next two
.226d	ca		dex				dex
.226e	d0 f5		bne $2265			bne 	_TOKCompare 				; until done X characters.
.2270	38		sec				sec
.2271	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.2274					_TOKExit:
.2274	60		rts				rts
.2275					_TOKNext:
.2275	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.2278	38		sec				sec 								; add length+1 to ptr
.2279	b2 24		lda ($24)			lda 	(zTemp0)
.227b	65 24		adc $24				adc 	zTemp0
.227d	85 24		sta $24				sta 	zTemp0
.227f	90 d7		bcc $2258			bcc 	_TOKFindLoop
.2281	e6 25		inc $25				inc 	zTemp0+1
.2283	80 d3		bra $2258			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.2285					TOKTokeniseHexadecimal:
.2285	20 2f 22	jsr $222f			jsr 	TOKGetNext 					; consume the $
.2288	a2 08		ldx #$08			ldx 	#IFR0
.228a	20 db 33	jsr $33db			jsr 	IFloatSetZero 				; set R0 = 0
.228d					_TTHLoop:
.228d	20 2b 22	jsr $222b			jsr 	TOKGet 						; keep getting and copying while numeric.
.2290	20 55 24	jsr $2455			jsr 	TOKIsHexadecimal
.2293	90 23		bcc $22b8			bcc 	_TTHDone
.2295	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.2297	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.229a	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.229d	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.22a0	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.22a3	20 2f 22	jsr $222f			jsr 	TOKGetNext
.22a6	20 19 24	jsr $2419			jsr 	TOKToUpper 					; make U/C
.22a9	38		sec				sec 								; convert to decimal.
.22aa	e9 30		sbc #$30			sbc 	#48
.22ac	c9 0a		cmp #$0a			cmp 	#10
.22ae	90 02		bcc $22b2			bcc 	_TTHNotAlpha
.22b0	e9 07		sbc #$07			sbc 	#7
.22b2					_TTHNotAlpha:
.22b2	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.22b4	85 08		sta $08				sta 	IFR0+IM0
.22b6	80 d5		bra $228d			bra 	_TTHLoop
.22b8					_TTHDone:
.22b8	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.22ba	20 1c 22	jsr $221c			jsr 	TOKWriteA
.22bd	20 5e 21	jsr $215e			jsr 	TOKTokeniseConstant 		; write integer out.
.22c0	18		clc				clc
.22c1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.22c2					TOKTokeniseIdentifier:
.22c2	20 4b 21	jsr $214b			jsr 	TOKResetElement 			; extract an identifier
.22c5					_TOKGetIdentifier:
.22c5	20 2b 22	jsr $222b			jsr 	TOKGet
.22c8	20 19 24	jsr $2419			jsr 	TOKToUpper
.22cb	20 3b 24	jsr $243b			jsr 	TOKIsIdentifierElement
.22ce	90 08		bcc $22d8			bcc 	_TOKEndIdent
.22d0	20 4f 21	jsr $214f			jsr		TOKWriteElement
.22d3	20 2f 22	jsr $222f			jsr 	TOKGetNext
.22d6	80 ed		bra $22c5			bra 	_TOKGetIdentifier
.22d8					_TOKEndIdent:
.22d8	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.22da	d0 06		bne $22e2			bne 	_TOKNotString
.22dc	20 4f 21	jsr $214f			jsr 	TOKWriteElement 			; add it
.22df	20 2f 22	jsr $222f			jsr 	TOKGetNext 					; consume it
.22e2					_TOKNotString:
.22e2	20 2b 22	jsr $222b			jsr 	TOKGet 						; finally check for (
.22e5	c9 28		cmp #$28			cmp 	#"("
.22e7	d0 06		bne $22ef			bne 	_TOKNoArray
.22e9	20 4f 21	jsr $214f			jsr 	TOKWriteElement 			; add it
.22ec	20 2f 22	jsr $222f			jsr 	TOKGetNext 					; consume it
.22ef					_TOKNoArray:
.22ef	20 33 22	jsr $2233			jsr 	TOKFindToken 				; find it
.22f2	90 18		bcc $230c			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.22f4	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.22f6	f0 0f		beq $2307			beq 	_TOKComment 				; yes, do comment code.
.22f8	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.22fa	d0 06		bne $2302			bne 	_TOKNoShift
.22fc	48		pha				pha 								; write the shift.
.22fd	8a		txa				txa
.22fe	20 1c 22	jsr $221c			jsr 	TOKWriteA
.2301	68		pla				pla
.2302					_TOKNoShift:
.2302	20 1c 22	jsr $221c			jsr 	TOKWriteA 					; write the main token.
.2305	18		clc				clc
.2306	60		rts				rts
.2307					_TOKComment:
.2307	20 4c 23	jsr $234c			jsr 	TOKDoComment
.230a	18		clc				clc
.230b	60		rts				rts
.230c					_TOKIsVariable:
.230c	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.230e					_TOKOutputBuffer:
.230e	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.2311	20 3a 23	jsr $233a			jsr 	TOKTranslateIdentifier
.2314	20 1c 22	jsr $221c			jsr 	TOKWriteA
.2317	e8		inx				inx
.2318	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.231b	20 3b 24	jsr $243b			jsr 	TOKIsIdentifierElement
.231e	b0 ee		bcs $230e			bcs 	_TOKOutputBuffer
.2320	a8		tay				tay 								; last char in Y
.2321	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.2323	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.2325	f0 0e		beq $2335			beq 	_TOKIVExit
.2327	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.2329	d0 04		bne $232f			bne 	_TOKIVCheckArray 			; no, check for (
.232b	1a		inc a				inc 	a 							; token is $7D
.232c	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.232f					_TOKIVCheckArray:
.232f	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.2331	d0 02		bne $2335			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.2333	1a		inc a				inc 	a
.2334	1a		inc a				inc 	a
.2335					_TOKIVExit:
.2335	20 1c 22	jsr $221c			jsr 	TOKWriteA 					; ending token
.2338	18		clc				clc
.2339	60		rts				rts
.233a					TOKTranslateIdentifier:
.233a	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.233c	f0 0b		beq $2349			beq 	_TTI64
.233e	38		sec				sec
.233f	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.2341	10 03		bpl $2346			bpl 	_TTIExit
.2343	18		clc				clc 								; map 09 onto 26-35
.2344	69 2b		adc #$2b			adc 	#"A"-"0"+26
.2346					_TTIExit:
.2346	09 40		ora #$40			ora 	#$40 						; correct range.
.2348	60		rts				rts
.2349	a9 64		lda #$64	_TTI64:	lda 	#$64
.234b	60		rts				rts
.234c					TOKDoComment:
.234c	20 1c 22	jsr $221c			jsr 	TOKWriteA					; output the token.
.234f					_TOKSkipSpaces:
.234f	20 2b 22	jsr $222b			jsr 	TOKGet 						; skip over spaces
.2352	c9 20		cmp #$20			cmp 	#' '
.2354	d0 05		bne $235b			bne 	_TOKEndSpaces
.2356	20 2f 22	jsr $222f			jsr 	TOKGetNext
.2359	80 f4		bra $234f			bra 	_TOKSkipSpaces
.235b					_TOKEndSpaces:
.235b	48		pha				pha 								; save it
.235c	68		pla				pla
.235d	f0 04		beq $2363			beq 	_TOKDCExit 					; end of line.
.235f	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.2361	d0 01		bne $2364			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.2363					_TOKDCExit:
.2363	60		rts				rts
.2364					_TOKDCDoLine:
.2364	20 4b 21	jsr $214b			jsr 	TOKResetElement 			; start getting the string
.2367					_TOKDCLoop:
.2367	20 2b 22	jsr $222b			jsr 	TOKGet 						; check EOL
.236a	c9 00		cmp #$00			cmp 	#0
.236c	f0 08		beq $2376			beq 	_TOKDCEndComment
.236e	20 2f 22	jsr $222f			jsr 	TOKGetNext 					; get and consume
.2371	20 4f 21	jsr $214f			jsr 	TOKWriteElement
.2374	80 f1		bra $2367			bra 	_TOKDCLoop
.2376					_TOKDCEndComment:
.2376	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2378	20 1c 22	jsr $221c			jsr 	TOKWriteA
.237b	20 90 21	jsr $2190			jsr 	TOKOutputElementBuffer
.237e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.237f					TOKTokeniseInteger:
.237f	20 a8 23	jsr $23a8			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2382	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.2384	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2386	ad 1c 05	lda $051c			lda		TOKElement
.2389	20 3f 32	jsr $323f			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.238c	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.238f	f0 12		beq $23a3			beq 	_TOKNotLineNumber
.2391	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.2393	d0 0c		bne $23a1			bne 	_TOKBadLineNumeber
.2395	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2397	8d 01 04	sta $0401			sta 	TOKLineNumber
.239a	a5 09		lda $09				lda 	IFR0+IM1
.239c	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.239f	18		clc				clc
.23a0	60		rts				rts
.23a1					_TOKBadLineNumeber:
.23a1	38		sec				sec
.23a2	60		rts				rts
.23a3					_TOKNotLineNumber:
.23a3	20 5e 21	jsr $215e			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.23a6	18		clc				clc
.23a7	60		rts				rts
.23a8					TOKExtractInteger:
.23a8	20 4b 21	jsr $214b			jsr 	TOKResetElement 			; restart
.23ab					_TTILoop:
.23ab	20 2b 22	jsr $222b			jsr 	TOKGet 						; keep getting and copying while numeric.
.23ae	20 2f 24	jsr $242f			jsr 	TOKIsDigit
.23b1	90 08		bcc $23bb			bcc 	_TOKEIExit
.23b3	20 4f 21	jsr $214f			jsr 	TOKWriteElement
.23b6	20 2f 22	jsr $222f			jsr 	TOKGetNext
.23b9	80 f0		bra $23ab			bra 	_TTILoop
.23bb					_TOKEIExit:
.23bb	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.23bc					TOKTokenisePunctuation:
.23bc	20 4b 21	jsr $214b			jsr 	TOKResetElement 			; copy first punctuation character into element.
.23bf	20 2f 22	jsr $222f			jsr 	TOKGetNext
.23c2	20 4f 21	jsr $214f			jsr 	TOKWriteElement
.23c5	20 2b 22	jsr $222b			jsr 	TOKGet 						; what follows ?
.23c8	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.23ca	f0 10		beq $23dc			beq 	_TTPOne
.23cc	20 3f 24	jsr $243f			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.23cf	b0 0b		bcs $23dc			bcs 	_TTPOne 					; these speed things up a bit.
.23d1	20 4f 21	jsr $214f			jsr 	TOKWriteElement 			; this is what we will search for.
.23d4	20 33 22	jsr $2233			jsr 	TOKFindToken
.23d7	b0 0a		bcs $23e3			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.23d9	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.23dc					_TTPOne:
.23dc	20 33 22	jsr $2233			jsr 	TOKFindToken 				; look for one character punctuation
.23df	b0 07		bcs $23e8			bcs 	_TTPOutputExit 				; we found it
.23e1	38		sec				sec 								; not recognised.
.23e2	60		rts				rts
.23e3					_TTPConsumeExit:
.23e3	48		pha				pha
.23e4	20 2f 22	jsr $222f			jsr 	TOKGetNext 					; get the 2nd char out.
.23e7	68		pla				pla
.23e8					_TTPOutputExit:
.23e8	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.23ea	f0 05		beq $23f1			beq 	_TTPComment
.23ec	20 1c 22	jsr $221c			jsr  	TOKWriteA 					; write token out
.23ef	18		clc				clc
.23f0	60		rts				rts
.23f1					_TTPComment:
.23f1	20 4c 23	jsr $234c			jsr 	TOKDoComment
.23f4	18		clc				clc
.23f5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.23f6					TOKTokeniseString:
.23f6	20 2f 22	jsr $222f			jsr 	TOKGetNext 					; consume the "
.23f9	20 4b 21	jsr $214b			jsr 	TOKResetElement 			; start getting the string
.23fc					_TOKTSLoop:
.23fc	20 2b 22	jsr $222b			jsr 	TOKGet 						; check EOL
.23ff	c9 00		cmp #$00			cmp 	#0
.2401	f0 0c		beq $240f			beq 	_TOKTSExit
.2403	20 2f 22	jsr $222f			jsr 	TOKGetNext 					; get and consume
.2406	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.2408	f0 05		beq $240f			beq 	_TOKTSExit
.240a	20 4f 21	jsr $214f			jsr 	TOKWriteElement
.240d	80 ed		bra $23fc			bra 	_TOKTSLoop
.240f					_TOKTSExit:
.240f	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.2411	20 1c 22	jsr $221c			jsr 	TOKWriteA
.2414	20 90 21	jsr $2190			jsr 	TOKOutputElementBuffer
.2417	18		clc				clc
.2418	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.2419					TOKToUpper:
.2419	c9 61		cmp #$61			cmp 	#"a"
.241b	90 06		bcc $2423			bcc 	_TTUNotLower
.241d	c9 7b		cmp #$7b			cmp 	#"z"+1
.241f	b0 02		bcs $2423			bcs 	_TTUNotLower
.2421	49 20		eor #$20			eor 	#$20
.2423					_TTUNotLower:
.2423	60		rts				rts
.2424					TOKToLower:
.2424	c9 41		cmp #$41			cmp 	#"A"
.2426	90 06		bcc $242e			bcc 	_TTUNotUpper
.2428	c9 5b		cmp #$5b			cmp 	#"Z"+1
.242a	b0 02		bcs $242e			bcs 	_TTUNotUpper
.242c	49 20		eor #$20			eor 	#$20
.242e					_TTUNotUpper:
.242e	60		rts				rts
.242f					TOKIsDigit:
.242f	c9 30		cmp #$30			cmp 	#"0"
.2431	90 06		bcc $2439			bcc 	TOKFail
.2433	c9 3a		cmp #$3a			cmp 	#"9"+1
.2435	b0 02		bcs $2439			bcs 	TOKFail
.2437					TOKSucceed:
.2437	38		sec				sec
.2438	60		rts				rts
.2439					TOKFail:
.2439	18		clc				clc
.243a	60		rts				rts
.243b					TOKIsIdentifierElement:
.243b	c9 5f		cmp #$5f			cmp 	#"_"
.243d	f0 f8		beq $2437			beq 	TOKSucceed 					; else fall through to alphanumeric
.243f					TOKIsAlphaNumeric:
.243f	20 48 24	jsr $2448			jsr 	TOKIsAlpha
.2442	b0 f3		bcs $2437			bcs 	TOKSucceed
.2444	20 2f 24	jsr $242f			jsr 	TOKIsDigit
.2447	60		rts				rts
.2448					TOKIsAlpha:
.2448	20 19 24	jsr $2419			jsr 	TOKToUpper
.244b	c9 41		cmp #$41			cmp 	#"A"
.244d	90 ea		bcc $2439			bcc 	TOKFail
.244f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2451	b0 e6		bcs $2439			bcs 	TOKFail
.2453	80 e2		bra $2437			bra 	TOKSucceed
.2455					TOKIsHexadecimal:
.2455	20 2f 24	jsr $242f			jsr		TOKIsDigit
.2458	b0 dd		bcs $2437			bcs 	TOKSucceed
.245a	20 48 24	jsr $2448			jsr 	TOKIsAlpha
.245d	90 da		bcc $2439			bcc 	TOKFail
.245f	c9 47		cmp #$47			cmp 	#"F"+1
.2461	b0 d6		bcs $2439			bcs 	TOKFail
.2463	80 d2		bra $2437			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.2465					Command_CALL:
.2465	a9 42		lda #$42			lda 	#STK_CALL
.2467	20 57 29	jsr $2957			jsr 	StackOpen
.246a	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.246c	29 c0		and #$c0			and 	#$C0
.246e	c9 40		cmp #$40			cmp 	#$40
.2470	d0 29		bne $249b			bne 	_CCSyntax
.2472	20 1e 2d	jsr $2d1e			jsr 	VARGetInfo 					; get the information
.2475	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 				; check right bracket follows.
.2478	20 d0 2c	jsr $2cd0			jsr 	VARFind 					; exists ?
.247b	90 21		bcc $249e			bcc 	_CCUnknown
.247d	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.247f	85 24		sta $24				sta 	zTemp0
.2481	20 8a 29	jsr $298a			jsr 	STKSaveCodePosition 		; save return address on stack.
.2484	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2486	b1 24		lda ($24),y			lda 	(zTemp0),y
.2488	c9 ff		cmp #$ff			cmp 	#$FF
.248a	d0 12		bne $249e			bne 	_CCUnknown
.248c	88		dey				dey 								; get Y offset to stack
.248d	b1 24		lda ($24),y			lda 	(zTemp0),y
.248f	48		pha				pha
.2490	88		dey				dey 								; get address
.2491	b1 24		lda ($24),y			lda 	(zTemp0),y
.2493	85 19		sta $19				sta 	codePtr+1
.2495	b2 24		lda ($24)			lda 	(zTemp0)
.2497	85 18		sta $18				sta 	codePtr
.2499	7a		ply				ply 								; restore Y
.249a	60		rts				rts
.249b					_CCSyntax:
.249b	4c 65 27	jmp $2765		jmp	ErrorV_syntax
.249e					_CCUnknown:
.249e	4c da 28	jmp $28da		jmp	ErrorV_unknown
.24a1					Command_ENDPROC:
.24a1	a9 42		lda #$42			lda 	#STK_CALL
.24a3	20 82 29	jsr $2982			jsr 	StackCheckFrame
.24a6	20 9c 29	jsr $299c			jsr 	STKLoadCodePosition 		; return
.24a9	20 74 29	jsr $2974			jsr 	StackClose
.24ac	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.24ad					Command_DO:
.24ad	a9 22		lda #$22			lda 	#STK_DO
.24af	20 57 29	jsr $2957			jsr 	StackOpen
.24b2	20 8a 29	jsr $298a			jsr 	STKSaveCodePosition 		; save loop position
.24b5	60		rts				rts
.24b6					Command_EXIT:
.24b6	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.24b8	20 82 29	jsr $2982			jsr 	StackCheckFrame
.24bb	20 74 29	jsr $2974			jsr 	StackClose 					; close it
.24be	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.24c0	aa		tax				tax
.24c1	20 75 26	jsr $2675			jsr 	ScanForward
.24c4	60		rts				rts
.24c5					Command_LOOP:
.24c5	a9 22		lda #$22			lda 	#STK_DO
.24c7	20 82 29	jsr $2982			jsr 	StackCheckFrame
.24ca	20 9c 29	jsr $299c			jsr 	STKLoadCodePosition 		; loop back
.24cd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.24ce					Command_FOR:
.24ce	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.24d0	20 57 29	jsr $2957			jsr 	StackOpen
.24d3	20 de 12	jsr $12de			jsr 	CommandLET 					; do "I = 1" bit
.24d6	5a		phy				phy 								; save variable address to +4,+5
.24d7	a0 04		ldy #$04			ldy 	#4
.24d9	a5 24		lda $24				lda 	zTemp0
.24db	91 2c		sta ($2c),y			sta 	(basicStack),y
.24dd	c8		iny				iny
.24de	a5 25		lda $25				lda 	zTemp0+1
.24e0	91 2c		sta ($2c),y			sta 	(basicStack),y
.24e2	7a		ply				ply
.24e3	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.24e5	20 4e 29	jsr $294e			jsr 	ERRCheckA
.24e8	20 76 17	jsr $1776			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.24eb	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.24ed	a2 08		ldx #$08			ldx 	#IFR0
.24ef	20 44 25	jsr $2544			jsr 	CFSaveR0X
.24f2	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.24f4	c9 91		cmp #$91			cmp 	#PR_STEP
.24f6	d0 06		bne $24fe			bne 	_CFStep1
.24f8	c8		iny				iny 								; consume step
.24f9	20 76 17	jsr $1776			jsr 	EXPEvalNumber 				; evaluate STEP
.24fc	80 24		bra $2522			bra 	_CFWriteStep
.24fe					_CFStep1:
.24fe	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2500	a9 01		lda #$01			lda 	#1
.2502	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.2505	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2506	a0 04		ldy #$04			ldy 	#4 							; get variable address
.2508	b1 2c		lda ($2c),y			lda 	(basicStack),y
.250a	85 24		sta $24				sta 	zTemp0
.250c	c8		iny				iny
.250d	b1 2c		lda ($2c),y			lda 	(basicStack),y
.250f	85 25		sta $25				sta 	zTemp0+1
.2511	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.2513	b1 24		lda ($24),y			lda 	(zTemp0),y
.2515	d0 0a		bne $2521			bne 	_CFNotOptimised
.2517	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.2519	b1 2c		lda ($2c),y			lda 	(basicStack),y
.251b	d0 04		bne $2521			bne 	_CFNotOptimised
.251d	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.251f	85 0b		sta $0b				sta 	IFR0+IExp
.2521					_CFNotOptimised:
.2521	7a		ply				ply
.2522					_CFWriteStep:
.2522	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.2524	a9 06		lda #$06			lda 	#6
.2526	20 44 25	jsr $2544			jsr 	CFSaveR0X
.2529	20 8a 29	jsr $298a			jsr 	STKSaveCodePosition 		; save loop position
.252c	60		rts				rts
.252d					CFLoadR0X:
.252d	5a		phy				phy
.252e	a8		tay				tay
.252f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2531	95 00		sta $00,x			sta 	IM0,x
.2533	c8		iny				iny
.2534	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2536	95 01		sta $01,x			sta 	IM1,x
.2538	c8		iny				iny
.2539	b1 2c		lda ($2c),y			lda 	(basicStack),y
.253b	95 02		sta $02,x			sta 	IM2,x
.253d	c8		iny				iny
.253e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2540	95 03		sta $03,x			sta 	IExp,x
.2542	7a		ply				ply
.2543	60		rts				rts
.2544					CFSaveR0X:
.2544	5a		phy				phy
.2545	a8		tay				tay
.2546	b5 00		lda $00,x			lda 	IM0,x
.2548	91 2c		sta ($2c),y			sta 	(basicStack),y
.254a	c8		iny				iny
.254b	b5 01		lda $01,x			lda 	IM1,x
.254d	91 2c		sta ($2c),y			sta 	(basicStack),y
.254f	c8		iny				iny
.2550	b5 02		lda $02,x			lda 	IM2,x
.2552	91 2c		sta ($2c),y			sta 	(basicStack),y
.2554	c8		iny				iny
.2555	b5 03		lda $03,x			lda 	IExp,x
.2557	91 2c		sta ($2c),y			sta 	(basicStack),y
.2559	7a		ply				ply
.255a	60		rts				rts
.255b					Command_NEXT:
.255b	a9 37		lda #$37			lda 	#STK_FOR
.255d	20 82 29	jsr $2982			jsr 	StackCheckFrame
.2560	5a		phy				phy 								; check optimised loop
.2561	a0 09		ldy #$09			ldy 	#9
.2563	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2565	7a		ply				ply
.2566	0a		asl a				asl 	a
.2567	b0 35		bcs $259e			bcs 	_CNOptimised
.2569	20 d6 25	jsr $25d6			jsr 	_CNLoadValue 				; load index value to R0.
.256c	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.256e	a9 06		lda #$06			lda 	#6
.2570	20 2d 25	jsr $252d			jsr 	CFLoadR0X
.2573	20 d3 2d	jsr $2dd3			jsr 	IFloatAdd 					; add them together and write back.
.2576	20 f9 25	jsr $25f9			jsr 	_CNSaveValue
.2579	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.257b	a2 0c		ldx #$0c			ldx 	#IFR1
.257d	20 2d 25	jsr $252d			jsr 	CFLoadR0X
.2580	20 aa 30	jsr $30aa			jsr 	IFloatCompare 				; compare terminal vs current
.2583	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2585	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero
.2588	f0 10		beq $259a			beq 	_CNLoopBack
.258a	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.258c	5a		phy				phy
.258d	a0 09		ldy #$09			ldy 	#6+IExp
.258f	51 2c		eor ($2c),y			eor 	(basicStack),y
.2591	7a		ply				ply
.2592	29 40		and #$40			and 	#IFSign
.2594	f0 04		beq $259a			beq 	_CNLoopBack
.2596					_CNExitLoop:
.2596	20 74 29	jsr $2974			jsr 	StackClose		 			; return
.2599	60		rts				rts
.259a					_CNLoopBack:
.259a	20 9c 29	jsr $299c			jsr 	STKLoadCodePosition 		; loop back
.259d	60		rts				rts
.259e					_CNOptimised:
.259e	5a		phy				phy
.259f	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.25a1	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25a3	85 28		sta $28				sta 	zTemp2
.25a5	c8		iny				iny
.25a6	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25a8	85 29		sta $29				sta 	zTemp2+1
.25aa	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.25ac					_CNIncrement:
.25ac	c8		iny				iny
.25ad	b1 28		lda ($28),y			lda 	(zTemp2),y
.25af	1a		inc a				inc 	a
.25b0	91 28		sta ($28),y			sta 	(zTemp2),y
.25b2	f0 f8		beq $25ac			beq 	_CNIncrement
.25b4	18		clc				clc 								; point zTemp0 to terminal value
.25b5	a5 2c		lda $2c				lda 	basicStack
.25b7	69 0a		adc #$0a			adc 	#10
.25b9	85 24		sta $24				sta 	zTemp0
.25bb	a5 2d		lda $2d				lda 	basicStack+1
.25bd	69 00		adc #$00			adc 	#0
.25bf	85 25		sta $25				sta 	zTemp0+1
.25c1	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.25c3	18		clc				clc 								; borrow 1, we want > not >=
.25c4	b2 28		lda ($28)			lda 	(zTemp2)
.25c6	f2 24		sbc ($24)			sbc 	(zTemp0)
.25c8	b1 28		lda ($28),y			lda 	(zTemp2),y
.25ca	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.25cc	c8		iny				iny
.25cd	b1 28		lda ($28),y			lda 	(zTemp2),y
.25cf	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.25d1	7a		ply				ply
.25d2	b0 c2		bcs $2596			bcs 	_CNExitLoop
.25d4	80 c4		bra $259a			bra 	_CNLoopBack
.25d6					_CNLoadValue:
.25d6	5a		phy				phy
.25d7	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.25d9	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25db	85 28		sta $28				sta 	zTemp2
.25dd	c8		iny				iny
.25de	b1 2c		lda ($2c),y			lda 	(basicStack),y
.25e0	85 29		sta $29				sta 	zTemp2+1
.25e2	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.25e4	b1 28		lda ($28),y			lda 	(zTemp2),y
.25e6	85 08		sta $08				sta 	IFR0+IM0
.25e8	c8		iny				iny
.25e9	b1 28		lda ($28),y			lda 	(zTemp2),y
.25eb	85 09		sta $09				sta 	IFR0+IM1
.25ed	c8		iny				iny
.25ee	b1 28		lda ($28),y			lda 	(zTemp2),y
.25f0	85 0a		sta $0a				sta 	IFR0+IM2
.25f2	c8		iny				iny
.25f3	b1 28		lda ($28),y			lda 	(zTemp2),y
.25f5	85 0b		sta $0b				sta 	IFR0+IExp
.25f7	7a		ply				ply
.25f8	60		rts				rts
.25f9					_CNSaveValue:
.25f9	5a		phy				phy
.25fa	a0 00		ldy #$00			ldy 	#0
.25fc	a5 08		lda $08				lda 	IFR0+IM0
.25fe	91 28		sta ($28),y			sta 	(zTemp2),y
.2600	c8		iny				iny
.2601	a5 09		lda $09				lda 	IFR0+IM1
.2603	91 28		sta ($28),y			sta 	(zTemp2),y
.2605	c8		iny				iny
.2606	a5 0a		lda $0a				lda 	IFR0+IM2
.2608	91 28		sta ($28),y			sta 	(zTemp2),y
.260a	c8		iny				iny
.260b	a5 0b		lda $0b				lda 	IFR0+IExp
.260d	91 28		sta ($28),y			sta 	(zTemp2),y
.260f	7a		ply				ply
.2610	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.2611					Command_GOSUB:
.2611	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; get line number
.2614	a9 52		lda #$52			lda 	#STK_GOSUB
.2616	20 57 29	jsr $2957			jsr 	StackOpen
.2619	20 8a 29	jsr $298a			jsr 	STKSaveCodePosition 		; save return address on stack.
.261c	4c ff 11	jmp $11ff			jmp 	GotoR0
.261f					Command_RETURN:
.261f	a9 52		lda #$52			lda 	#STK_GOSUB
.2621	20 82 29	jsr $2982			jsr 	StackCheckFrame
.2624	20 9c 29	jsr $299c			jsr 	STKLoadCodePosition 		; return
.2627	20 74 29	jsr $2974			jsr 	StackClose
.262a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.262b					IfCommand:
.262b	20 76 17	jsr $1776			jsr 	EXPEvalNumber 				; Get the if test.
.262e	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.2630	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.2632	d0 0c		bne $2640			bne 	_IfStructured 				; we still support it.
.2634	c8		iny				iny 								; consume THEN
.2635	a2 08		ldx #$08			ldx 	#IFR0
.2637	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero 			; is it zero
.263a	f0 01		beq $263d			beq 	_IfFail 					; if fail, go to next line
.263c	60		rts				rts 								; if THEN just continue
.263d					_IfFail:
.263d	4c 37 15	jmp $1537			jmp 	RUNEndOfLine
.2640					_IfStructured:
.2640	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero 			; is it zero
.2643	d0 07		bne $264c			bne 	_IfExit 					; if not, then continue normally.
.2645	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.2647	a2 85		ldx #$85			ldx 	#PR_ENDIF
.2649	20 75 26	jsr $2675			jsr 	ScanForward 				; and run from there
.264c					_IfExit:
.264c	60		rts				rts
.264d					ElseCode:
.264d	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.264f	aa		tax				tax 								; so just go to the structure exit
.2650	20 75 26	jsr $2675			jsr 	ScanForward
.2653	60		rts				rts
.2654					EndIf:
.2654	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.2655					Command_REPEAT:
.2655	a9 02		lda #$02			lda 	#STK_REPEAT
.2657	20 57 29	jsr $2957			jsr 	StackOpen
.265a	20 8a 29	jsr $298a			jsr 	STKSaveCodePosition 		; save loop position
.265d	60		rts				rts
.265e					Command_UNTIL:
.265e	a9 02		lda #$02			lda 	#STK_REPEAT
.2660	20 82 29	jsr $2982			jsr 	StackCheckFrame
.2663	20 76 17	jsr $1776			jsr 	EXPEvalNumber 				; work out the test
.2666	a2 08		ldx #$08			ldx 	#IFR0
.2668	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero 			; check if zero
.266b	f0 04		beq $2671			beq 	_CULoopBack 				; if so keep looping
.266d	20 74 29	jsr $2974			jsr 	StackClose		 			; return
.2670	60		rts				rts
.2671					_CULoopBack:
.2671	20 9c 29	jsr $299c			jsr 	STKLoadCodePosition 		; loop back
.2674	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2675					ScanForward:
.2675	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.2677	86 25		stx $25				stx 	zTemp0+1
.2679	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.267b					_ScanForwardLoop:
.267b	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.267d	d0 0a		bne $2689			bne 	_ScanNoCheck
.267f	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2681	c5 24		cmp $24				cmp 	zTemp0
.2683	f0 49		beq $26ce			beq 	_ScanExit
.2685	c5 25		cmp $25				cmp 	zTemp0+1
.2687	f0 45		beq $26ce			beq 	_ScanExit
.2689					_ScanNoCheck:
.2689	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.268b	c8		iny				iny
.268c	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.268e	f0 37		beq $26c7			beq		_ScanDataItem
.2690	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2692	f0 33		beq $26c7			beq 	_ScanDataItem
.2694	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2696	f0 1b		beq $26b3			beq 	_ScanNextLine
.2698	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.269a	d0 01		bne $269d			bne 	_ScanNoShift
.269c	c8		iny				iny
.269d					_ScanNoShift:
.269d	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.269f	b0 da		bcs $267b			bcs 	_ScanForwardLoop
.26a1	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.26a3	90 d6		bcc $267b			bcc 	_ScanForwardLoop
.26a5	aa		tax				tax 								; access the table to get the adjustment.
.26a6	18		clc				clc
.26a7	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.26a9	7d 91 1b	adc $1b91,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.26ac	85 26		sta $26				sta 	zTemp1
.26ae	10 cb		bpl $267b			bpl		_ScanForwardLoop 			; error if -ve ?
.26b0	4c f1 27	jmp $27f1		jmp	ErrorV_structure
.26b3					_ScanNextLine:
.26b3	18		clc				clc	 								; forward to next line.
.26b4	b2 18		lda ($18)			lda 	(codePtr)
.26b6	65 18		adc $18				adc 	codePtr
.26b8	85 18		sta $18				sta 	codePtr
.26ba	90 02		bcc $26be			bcc 	_ScanNoCarry
.26bc	e6 19		inc $19				inc 	codePtr+1
.26be					_ScanNoCarry:
.26be	a0 03		ldy #$03			ldy 	#3
.26c0	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.26c2	d0 b7		bne $267b			bne 	_ScanForwardLoop
.26c4	4c f1 27	jmp $27f1		jmp	ErrorV_structure
.26c7					_ScanDataItem:
.26c7	98		tya				tya
.26c8	38		sec				sec
.26c9	71 18		adc ($18),y			adc 	(codePtr),y
.26cb	a8		tay				tay
.26cc	80 ad		bra $267b			bra 	_ScanForwardLoop
.26ce					_ScanExit:
.26ce	c8		iny				iny 								; consume final token.
.26cf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.26d0					ScanProcedures:
.26d0	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.26d2	48		pha				pha
.26d3	a5 19		lda $19				lda 	codePtr+1
.26d5	48		pha				pha
.26d6	5a		phy				phy
.26d7	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.26da	85 19		sta $19				sta 	codePtr+1
.26dc	64 18		stz $18				stz 	codePtr
.26de					_SPLoop:
.26de	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.26e0	f0 18		beq $26fa			beq 	_SPExit
.26e2	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.26e4	b1 18		lda ($18),y			lda 	(codePtr),y
.26e6	c9 88		cmp #$88			cmp 	#PR_PROC
.26e8	d0 03		bne $26ed			bne 	_SPNext
.26ea	20 02 27	jsr $2702			jsr 	_SPSetupRecord
.26ed					_SPNext:
.26ed	18		clc				clc 								; forward to next
.26ee	b2 18		lda ($18)			lda 	(codePtr)
.26f0	65 18		adc $18				adc 	codePtr
.26f2	85 18		sta $18				sta 	codePtr
.26f4	90 e8		bcc $26de			bcc 	_SPLoop
.26f6	e6 19		inc $19				inc 	codePtr+1
.26f8	80 e4		bra $26de			bra 	_SPLoop
.26fa					_SPExit:
.26fa	7a		ply				ply
.26fb	68		pla				pla
.26fc	85 19		sta $19				sta 	codePtr+1
.26fe	68		pla				pla
.26ff	85 18		sta $18				sta 	codePtr
.2701	60		rts				rts
.2702					_SPSetupRecord:
.2702	c8		iny				iny 								; check identifier follows
.2703	b1 18		lda ($18),y			lda 	(codePtr),y
.2705	29 c0		and #$c0			and 	#$C0
.2707	c9 40		cmp #$40			cmp 	#$40
.2709	d0 27		bne $2732			bne 	_SPSyntax
.270b	20 1e 2d	jsr $2d1e			jsr 	VARGetInfo 					; get the information
.270e	20 3e 29	jsr $293e			jsr 	ERRCheckRParen 				; check right bracket follows.
.2711	20 d0 2c	jsr $2cd0			jsr 	VARFind 					; already exists ?
.2714	b0 1f		bcs $2735			bcs 	_SPUsed 					; error !
.2716	20 7c 2c	jsr $2c7c			jsr 	VARCreate 					; create, XA points to the data.
.2719	85 24		sta $24				sta 	zTemp0
.271b	86 25		stx $25				stx 	zTemp0+1
.271d	5a		phy				phy 								; save Y pos on stack
.271e	a0 01		ldy #$01			ldy 	#1
.2720	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.2722	92 24		sta ($24)			sta 	(zTemp0)
.2724	a5 19		lda $19				lda 	codePtr+1
.2726	91 24		sta ($24),y			sta 	(zTemp0),y
.2728	c8		iny				iny
.2729	68		pla				pla
.272a	91 24		sta ($24),y			sta 	(zTemp0),y
.272c	c8		iny				iny
.272d	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.272f	91 24		sta ($24),y			sta 	(zTemp0),y
.2731	60		rts				rts
.2732					_SPSyntax:
.2732	4c 65 27	jmp $2765		jmp	ErrorV_syntax
.2735					_SPUsed:
.2735	4c bc 28	jmp $28bc		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.2738					Command_WHILE:
.2738	5a		phy				phy 								; save position of the test
.2739	20 76 17	jsr $1776			jsr 	EXPEvalNumber 				; work out the while test.
.273c	a2 08		ldx #$08			ldx 	#IFR0
.273e	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero 			; check if zero
.2741	f0 0e		beq $2751			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.2743	98		tya				tya 								; position *after* test.
.2744	7a		ply				ply 								; restore position before test, at WHILE
.2745	88		dey				dey 								; so we execute the WHILE command again.
.2746	48		pha				pha 								; push after test on the stack
.2747	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.2749	20 57 29	jsr $2957			jsr 	StackOpen
.274c	20 8a 29	jsr $298a			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.274f	7a		ply				ply 								; restore the position *after* the test
.2750	60		rts				rts
.2751					_WHExitLoop:
.2751	68		pla				pla 								; throw post loop position
.2752	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.2754	aa		tax				tax
.2755	20 75 26	jsr $2675			jsr 	ScanForward
.2758	60		rts				rts
.2759					Command_WEND:
.2759	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.275b	20 82 29	jsr $2982			jsr 	StackCheckFrame
.275e	20 9c 29	jsr $299c			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.2761	20 74 29	jsr $2974			jsr 	StackClose		 			; erase the frame
.2764	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.2765					ErrorV_syntax:
.2765	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>2768	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2770	45 72 72 6f 72 00
.2776					ErrorV_range:
.2776	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>2779	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2781	52 61 6e 67 65 00
.2787					ErrorV_value:
.2787	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>278a	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2792	75 65 00
.2795					ErrorV_type:
.2795	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>2798	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>27a0	73 6d 61 74 63 68 00
.27a7					ErrorV_unimplemented:
.27a7	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>27aa	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>27b2	6c 65 6d 65 6e 74 65 64 00
.27bb					ErrorV_assert:
.27bb	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>27be	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>27c6	46 61 69 6c 00
.27cb					ErrorV_internal:
.27cb	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>27ce	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>27d6	6c 20 45 72 72 6f 72 00
.27de					ErrorV_divzero:
.27de	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>27e1	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>27e9	42 79 20 5a 65 72 6f 00
.27f1					ErrorV_structure:
.27f1	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>27f4	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>27fc	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.2809					ErrorV_stop:
.2809	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>280c	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>2814	20 53 74 6f 70 70 65 64 00
.281d					ErrorV_data:
.281d	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>2820	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>2828	44 61 74 61 00
.282d					ErrorV_redefine:
.282d	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>2830	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>2838	65 64 65 66 69 6e 65 64 00
.2841					ErrorV_index:
.2841	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>2844	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>284c	61 79 20 49 6e 64 65 78 00
.2855					ErrorV_memory:
.2855	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>2858	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>2860	4d 65 6d 6f 72 79 00
.2867					ErrorV_uninitialised:
.2867	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>286a	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2872	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2882					ErrorV_string:
.2882	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>2885	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>288d	69 6e 67 20 4c 65 6e 67 74 68 00
.2898					ErrorV_variable:
.2898	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>289b	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>28a3	65 20 4d 69 73 73 69 6e 67 00
.28ad					ErrorV_stack:
.28ad	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>28b0	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>28b8	75 6c 6c 00
.28bc					ErrorV_dupproc:
.28bc	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>28bf	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>28c7	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>28d7	65 64 00
.28da					ErrorV_unknown:
.28da	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>28dd	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>28e5	20 50 72 6f 63 65 64 75 72 65 00
.28f0					ErrorV_break:
.28f0	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>28f3	05 42 72 65 61 6b 00			.text	5,"Break",0
.28fa					ErrorV_line:
.28fa	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>28fd	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2905	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.2912					ErrorV_fnf:
.2912	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>2915	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>291d	74 20 46 6f 75 6e 64 00
.2925					ErrorV_full:
.2925	20 6c 2b	jsr $2b6c		jsr	ErrorHandler
>2928	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>2930	20 46 75 6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.2936					ERRCheckLParen:
.2936	b1 18		lda ($18),y			lda 	(codePtr),y
.2938	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.293a	d0 18		bne $2954			bne 	ERRSyntaxError
.293c	c8		iny				iny
.293d	60		rts				rts
.293e					ERRCheckRParen:
.293e	b1 18		lda ($18),y			lda 	(codePtr),y
.2940	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.2942	d0 10		bne $2954			bne 	ERRSyntaxError
.2944	c8		iny				iny
.2945	60		rts				rts
.2946					ERRCheckComma:
.2946	b1 18		lda ($18),y			lda 	(codePtr),y
.2948	c9 99		cmp #$99			cmp 	#PR_COMMA
.294a	d0 08		bne $2954			bne 	ERRSyntaxError
.294c	c8		iny				iny
.294d	60		rts				rts
.294e					ERRCheckA:
.294e	d1 18		cmp ($18),y			cmp 	(codePtr),y
.2950	d0 02		bne $2954			bne 	ERRSyntaxError
.2952	c8		iny				iny
.2953	60		rts				rts
.2954					ERRSyntaxError:
.2954	4c 65 27	jmp $2765		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.2957					StackOpen:
.2957	48		pha				pha 								; save frame byte
.2958	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.295a	0a		asl a				asl 	a 							; claim twice this for storage
.295b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.295d	38		sec				sec 								; so basically subtracting from
.295e	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.2960	85 2c		sta $2c				sta 	basicStack
.2962	b0 09		bcs $296d			bcs 	_SONoBorrow
.2964	c6 2d		dec $2d				dec 	basicStack+1
.2966	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.2968	cd 20 06	cmp $0620			cmp 	basicStackEnd
.296b	f0 04		beq $2971			beq 	_SOMemory
.296d					_SONoBorrow:
.296d	68		pla				pla 								; get marker back and write at TOS
.296e	92 2c		sta ($2c)			sta 	(basicStack)
.2970	60		rts				rts
.2971					_SOMemory:
.2971	4c ad 28	jmp $28ad		jmp	ErrorV_stack
.2974					StackClose:
.2974	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2976	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.2978	0a		asl a				asl 	a 							; claim twice this.
.2979	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.297b	85 2c		sta $2c				sta 	basicStack
.297d	90 02		bcc $2981			bcc 	_SCExit
.297f	e6 2d		inc $2d				inc 	basicStack+1
.2981					_SCExit:
.2981	60		rts				rts
.2982					StackCheckFrame:
.2982	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2984	d0 01		bne $2987			bne 	_SCFError 					; different, we have structures mixed up
.2986	60		rts				rts
.2987					_SCFError:
.2987	4c f1 27	jmp $27f1		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.298a					STKSaveCodePosition:
.298a	5a		phy				phy
.298b	98		tya				tya 								; save Y at offset 1.
.298c	a0 01		ldy #$01			ldy 	#1
.298e	91 2c		sta ($2c),y			sta 	(basicStack),y
.2990	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2992	c8		iny				iny
.2993	91 2c		sta ($2c),y			sta 	(basicStack),y
.2995	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2997	c8		iny				iny
.2998	91 2c		sta ($2c),y			sta 	(basicStack),y
.299a	7a		ply				ply
.299b	60		rts				rts
.299c					STKLoadCodePosition:
.299c	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.299e	b1 2c		lda ($2c),y			lda 	(basicStack),y
.29a0	85 19		sta $19				sta 	codePtr+1
.29a2	88		dey				dey
.29a3	b1 2c		lda ($2c),y			lda 	(basicStack),y
.29a5	85 18		sta $18				sta 	codePtr
.29a7	88		dey				dey
.29a8	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.29aa	a8		tay				tay
.29ab	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.29ac					StackReset:
.29ac	48		pha				pha 								; save top of memory
.29ad	3a		dec a				dec 	a  							; end of stack = previous byte
.29ae	85 2d		sta $2d				sta 	basicStack+1
.29b0	a9 ff		lda #$ff			lda 	#$FF
.29b2	85 2c		sta $2c				sta 	basicStack
.29b4	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.29b6	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.29b8	68		pla				pla 								; allocate pages for stack.
.29b9	38		sec				sec
.29ba	e9 02		sbc #$02			sbc 	#STACKPAGES
.29bc	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.29bf	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.29c0					StringConcrete:
.29c0	5a		phy				phy 								; save position on stack
.29c1	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.29c3	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.29c5	b0 41		bcs $2a08			bcs 	_SALengthError
.29c7	18		clc				clc 								; length of the new string
.29c8	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.29ca	90 02		bcc $29ce			bcc 	_SAHaveLength
.29cc	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.29ce					_SAHaveLength:
.29ce	48		pha				pha 								; save length to be allocated for concreting.
.29cf	38		sec				sec
.29d0	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.29d2	6d 22 06	adc $0622			adc 	stringMemory
.29d5	8d 22 06	sta $0622			sta 	stringMemory
.29d8	85 28		sta $28				sta 	zTemp2 						; update storage address
.29da	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.29dc	6d 23 06	adc $0623			adc 	stringMemory+1
.29df	8d 23 06	sta $0623			sta 	stringMemory+1
.29e2	85 29		sta $29				sta 	zTemp2+1
.29e4	68		pla				pla 								; save length allocated in +0
.29e5	92 28		sta ($28)			sta 	(zTemp2)
.29e7	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.29e9	a0 01		ldy #$01			ldy 	#1
.29eb	91 28		sta ($28),y			sta 	(zTemp2),y
.29ed					_SACopyNewString:
.29ed	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.29ef	a0 02		ldy #$02			ldy 	#2
.29f1	91 28		sta ($28),y			sta 	(zTemp2),y
.29f3	aa		tax				tax 								; bytes to copy
.29f4	f0 0c		beq $2a02			beq 	_SACopyExit
.29f6	a0 01		ldy #$01			ldy 	#1 							; first character from here
.29f8					_SACopyNSLoop:
.29f8	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.29fa	c8		iny				iny 								; write two on in string storage
.29fb	c8		iny				iny
.29fc	91 28		sta ($28),y			sta 	(zTemp2),y
.29fe	88		dey				dey
.29ff	ca		dex				dex									; until copied all the string lengths.
.2a00	d0 f6		bne $29f8			bne 	_SACopyNSLoop
.2a02					_SACopyExit:
.2a02	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2a04	a5 28		lda $28				lda 	zTemp2
.2a06	7a		ply				ply
.2a07	60		rts				rts
.2a08					_SALengthError:
.2a08	4c 82 28	jmp $2882		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.2a0b					StringSystemInitialise:
.2a0b	3a		dec a				dec 	a 							; make last byte of previous page.
.2a0c	8d 23 06	sta $0623			sta 	stringMemory+1
.2a0f	85 25		sta $25				sta 	zTemp0+1
.2a11	a9 ff		lda #$ff			lda 	#$FF
.2a13	8d 22 06	sta $0622			sta 	stringMemory
.2a16	85 24		sta $24				sta 	zTemp0
.2a18	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.2a1a	92 24		sta ($24)			sta 	(zTemp0)
.2a1c	60		rts				rts
.2a1d					StringSpaceInitialise:
.2a1d	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.2a1f	8d 21 06	sta $0621			sta 	stringInitialised
.2a22	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.2a25	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.2a28	ad 23 06	lda $0623			lda 	stringMemory+1
.2a2b	3a		dec a				dec 	a
.2a2c	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2a2f	20 a9 10	jsr $10a9			jsr 	ClearCheckMemory
.2a32	60		rts				rts
.2a33					StringTempAllocate:
.2a33	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.2a35	b0 2e		bcs $2a65			bcs 	_STALength
.2a37	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.2a3a	30 05		bmi $2a41			bmi 	_STAAllocate
.2a3c	48		pha				pha 								; save value to subtract.
.2a3d	20 1d 2a	jsr $2a1d			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.2a40	68		pla				pla 								; restore it
.2a41					_STAAllocate:
.2a41	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.2a43	18		clc				clc  								; deliberate allows one more
.2a44	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.2a47	8d 24 06	sta $0624			sta 	stringTempPointer
.2a4a	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.2a4c	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.2a4e	ad 25 06	lda $0625			lda 	stringTempPointer+1
.2a51	69 ff		adc #$ff			adc 	#$FF
.2a53	8d 25 06	sta $0625			sta 	stringTempPointer+1
.2a56	85 2f		sta $2f				sta 	zsTemp+1
.2a58	85 09		sta $09				sta 	IFR0+IM1
.2a5a	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.2a5c	a9 80		lda #$80			lda 	#$80
.2a5e	85 0b		sta $0b				sta 	IFR0+IExp
.2a60	a9 00		lda #$00			lda 	#0 							; clear the target string
.2a62	92 2e		sta ($2e)			sta 	(zsTemp)
.2a64	60		rts				rts
.2a65					_STALength:
.2a65	4c 82 28	jmp $2882		jmp	ErrorV_string
.2a68					StringTempWrite:
.2a68	5a		phy				phy
.2a69	48		pha				pha
.2a6a	b2 2e		lda ($2e)			lda 	(zsTemp)
.2a6c	1a		inc a				inc 	a
.2a6d	92 2e		sta ($2e)			sta 	(zsTemp)
.2a6f	a8		tay				tay
.2a70	68		pla				pla
.2a71	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2a73	7a		ply				ply
.2a74	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2a75					Command_DIR:
.2a75	5a		phy				phy
.2a76	38		sec				sec 								; reset read
.2a77	20 ca ff	jsr $ffca			jsr 	OSReadDirectory
.2a7a	18		clc		_CDLoop:clc
.2a7b	20 ca ff	jsr $ffca			jsr 	OSReadDirectory 			; read next
.2a7e	b0 27		bcs $2aa7			bcs 	_CDExit 					; no more
.2a80	86 24		stx $24				stx 	zTemp0
.2a82	84 25		sty $25				sty 	zTemp0+1
.2a84	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2a87					_CDPad:
.2a87	a9 20		lda #$20			lda 	#32
.2a89	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2a8c	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2a8f	e0 10		cpx #$10			cpx 	#16
.2a91	90 f4		bcc $2a87			bcc 	_CDPad
.2a93	a0 11		ldy #$11			ldy 	#17
.2a95	b1 24		lda ($24),y			lda 	(zTemp0),y
.2a97	aa		tax				tax
.2a98	88		dey				dey
.2a99	b1 24		lda ($24),y			lda 	(zTemp0),y
.2a9b	20 95 2b	jsr $2b95			jsr 	WriteIntXA
.2a9e	a2 a9		ldx #$a9			ldx 	#_CDTail & $FF
.2aa0	a0 2a		ldy #$2a			ldy 	#_CDTail >> 8
.2aa2	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2aa5	80 d3		bra $2a7a			bra 	_CDLoop
.2aa7	7a		ply		_CDExit:ply
.2aa8	60		rts				rts
.2aa9					_CDTail:
>2aa9	08						.byte 	_CDTail2-*-1
>2aaa	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2ab2					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2ab2					Command_ERASE:
.2ab2	20 c4 2a	jsr $2ac4			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2ab5	5a		phy				phy
.2ab6	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2ab8	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2aba	20 cd ff	jsr $ffcd			jsr 	OSDeleteFile
.2abd	7a		ply				ply
.2abe	b0 01		bcs $2ac1			bcs 	_CEFail
.2ac0	60		rts				rts
.2ac1					_CEFail:
.2ac1	4c 12 29	jmp $2912		jmp	ErrorV_fnf
.2ac4					FileSetupBlock:
.2ac4	20 a0 17	jsr $17a0			jsr 	EXPEvalString 					; string to R0, zTemp0
.2ac7	a5 24		lda $24				lda 	zTemp0 							; address to name
.2ac9	8d 26 06	sta $0626			sta 	FSBBlock
.2acc	a5 25		lda $25				lda 	zTemp0+1
.2ace	8d 27 06	sta $0627			sta 	FSBBlock+1 						; zero the rest.
.2ad1	9c 28 06	stz $0628			stz 	FSBBlock+2
.2ad4	9c 29 06	stz $0629			stz 	FSBBlock+3
.2ad7	9c 2a 06	stz $062a			stz 	FSBBlock+4
.2ada	9c 2b 06	stz $062b			stz 	FSBBlock+5
.2add	60		rts				rts
.0626					FSBBlock:
>0626							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2ade					Command_LOAD:
.2ade	20 c4 2a	jsr $2ac4			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2ae1	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; set load address
.2ae4	8d 29 06	sta $0629			sta 	FSBBlock+3
.2ae7	9c 28 06	stz $0628			stz 	FSBBlock+2
.2aea	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2aec	48		pha				pha
.2aed	20 0a 2b	jsr $2b0a			jsr	 	FileCheckSecondParam
.2af0	5a		phy				phy
.2af1	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2af3	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2af5	20 d0 ff	jsr $ffd0			jsr 	OSReadFile
.2af8	7a		ply				ply
.2af9	b0 0c		bcs $2b07			bcs 	_CLFail
.2afb	68		pla				pla 								; load program
.2afc	c9 99		cmp #$99			cmp 	#PR_COMMA
.2afe	f0 06		beq $2b06			beq 	_CLNoClear
.2b00	20 63 10	jsr $1063			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2b03	4c b4 2b	jmp $2bb4			jmp 	WarmStart 					; and warm start
.2b06					_CLNoClear:
.2b06	60		rts				rts
.2b07					_CLFail:
.2b07	4c 12 29	jmp $2912		jmp	ErrorV_fnf
.2b0a					FileCheckSecondParam:
.2b0a	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2b0c	c9 99		cmp #$99			cmp 	#PR_COMMA
.2b0e	d0 0e		bne $2b1e			bne 	_FCSPExit
.2b10	c8		iny				iny 								; consume
.2b11	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; get address
.2b14	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2b16	8d 28 06	sta $0628			sta 	FSBBlock+2
.2b19	a5 09		lda $09				lda 	IFR0+IM1
.2b1b	8d 29 06	sta $0629			sta 	FSBBlock+3
.2b1e					_FCSPExit:
.2b1e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2b1f					Command_SAVE:
.2b1f	20 c4 2a	jsr $2ac4			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2b22	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2b24	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2b26	f0 22		beq $2b4a			beq 	_CLSaveBlock 				; save "Name",from,size
.2b28	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; set load address
.2b2b	8d 29 06	sta $0629			sta 	FSBBlock+3
.2b2e	9c 28 06	stz $0628			stz 	FSBBlock+2
.2b31	20 34 21	jsr $2134			jsr		PGMEndProgram 				; end of program -> zTemp0
.2b34	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2b36	d0 02		bne $2b3a			bne 	_CLNoCarry
.2b38	e6 25		inc $25				inc 	zTemp0+1
.2b3a					_CLNoCarry:
.2b3a	a5 24		lda $24				lda 	zTemp0
.2b3c	8d 2a 06	sta $062a			sta 	FSBBlock+4
.2b3f	38		sec				sec
.2b40	a5 25		lda $25				lda 	zTemp0+1
.2b42	ed 29 06	sbc $0629			sbc 	FSBBlock+3
.2b45	8d 2b 06	sta $062b			sta 	FSBBlock+5
.2b48	80 13		bra $2b5d			bra 	_CSSave
.2b4a					_CLSaveBlock:
.2b4a	20 0a 2b	jsr $2b0a			jsr 	FileCheckSecondParam 		; the address to save from.
.2b4d	20 46 29	jsr $2946			jsr 	ERRCheckComma
.2b50	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; get size
.2b53	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2b55	8d 2a 06	sta $062a			sta 	FSBBlock+4
.2b58	a5 09		lda $09				lda 	IFR0+IM1
.2b5a	8d 2b 06	sta $062b			sta 	FSBBlock+5
.2b5d					_CSSave:
.2b5d	5a		phy				phy
.2b5e	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2b60	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2b62	20 d3 ff	jsr $ffd3			jsr 	OSWriteFile
.2b65	7a		ply				ply
.2b66	b0 01		bcs $2b69			bcs 	_CSFail
.2b68	60		rts				rts
.2b69					_CSFail:
.2b69	4c 25 29	jmp $2925		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2b6c					ErrorHandler:
.2b6c	fa		plx				plx 								; get address of msg
.2b6d	7a		ply				ply
.2b6e	e8		inx				inx 								; bump past RTS
.2b6f	d0 01		bne $2b72			bne 	_EHNoInc
.2b71	c8		iny				iny
.2b72					_EHNoInc:
.2b72	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2b75	ad 2c 06	lda $062c			lda 	ERRLine 					; direct command ?
.2b78	0d 2d 06	ora $062d			ora 	ERRLine+1
.2b7b	f0 10		beq $2b8d			beq 	_EHNoNumber
.2b7d	a2 90		ldx #$90			ldx 	#_EHAtMsg & $FF
.2b7f	a0 2b		ldy #$2b			ldy 	#_EHAtMsg >> 8
.2b81	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2b84	ad 2c 06	lda $062c			lda 	ERRLine 					; line number -> XA
.2b87	ae 2d 06	ldx $062d			ldx 	ERRLine+1
.2b8a	20 95 2b	jsr $2b95			jsr 	WriteIntXA
.2b8d					_EHNoNumber:
.2b8d	4c be 2b	jmp $2bbe			jmp 	WarmStartNewLine
.2b90					_EHAtMsg:
>2b90	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2b95					_EHAtMsg1:
.2b95					WriteIntXA:
.2b95	da		phx				phx
.2b96	48		pha				pha
.2b97	a2 08		ldx #$08			ldx 	#IFR0
.2b99	20 2a 33	jsr $332a			jsr 	IFloatPushRx
.2b9c	68		pla				pla
.2b9d	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.2ba0	68		pla				pla
.2ba1	85 09		sta $09				sta 	IFR0+IM1
.2ba3	a9 0a		lda #$0a			lda 	#10 						; decimal
.2ba5	20 7d 31	jsr $317d			jsr 	IFloatIntegerToStringR0	 	; convert
.2ba8	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2bab	a2 08		ldx #$08			ldx 	#IFR0
.2bad	20 4b 33	jsr $334b			jsr 	IFloatPullRx
.2bb0	60		rts				rts
.2bb1					NotImplemented:
.2bb1	4c a7 27	jmp $27a7		jmp	ErrorV_unimplemented
.062c					ERRLine:
>062c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2bb4					WarmStart:
.2bb4	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2bb6	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2bb9	a9 6b		lda #$6b			lda 	#"k"
.2bbb	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2bbe					WarmStartNewLine:
.2bbe	a9 0d		lda #$0d			lda 	#13
.2bc0	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2bc3					WarmStartNoPrompt:
.2bc3	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2bc5	9a		txs				txs
.2bc6	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2bc9	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2bca	d0 01		bne $2bcd			bne 	_WSSkip
.2bcc	c8		iny				iny
.2bcd					_WSSkip:
.2bcd	86 28		stx $28				stx 	zTemp2 						; save address
.2bcf	84 29		sty $29				sty 	zTemp2+1
.2bd1	b2 28		lda ($28)			lda 	(zTemp2)
.2bd3	f0 ee		beq $2bc3			beq 	WarmStartNoPrompt 			; ignore empty line.
.2bd5	a2 07		ldx #$07			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2bd7	a0 2c		ldy #$2c			ldy 	#TOKGetCharacter >> 8
.2bd9	38		sec				sec
.2bda	20 a6 21	jsr $21a6			jsr 	TOKTokenise
.2bdd	b0 25		bcs $2c04			bcs 	_WSSyntax
.2bdf	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2be2	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2be5	d0 0b		bne $2bf2			bne 	_WSLineEdit
.2be7	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2be9	85 18		sta $18				sta 	codePtr
.2beb	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2bed	85 19		sta $19				sta 	codePtr+1
.2bef	4c 42 15	jmp $1542			jmp 	RUNNewLine
.2bf2					_WSLineEdit:
.2bf2	20 81 20	jsr $2081			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2bf5	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2bf8	c9 04		cmp #$04			cmp 	#4
.2bfa	f0 03		beq $2bff			beq 	_WSNoInsert
.2bfc	20 cb 20	jsr $20cb			jsr 	PGMInsertLine				; if not, maybe insert
.2bff					_WSNoInsert:
.2bff	20 63 10	jsr $1063			jsr 	ClearCode 					; clear variables etc.
.2c02	80 bf		bra $2bc3			bra 	WarmStartNoPrompt
.2c04					_WSSyntax:
.2c04	4c 65 27	jmp $2765		jmp	ErrorV_syntax
.2c07					TOKGetCharacter:
.2c07	b2 28		lda ($28)			lda 	(zTemp2)
.2c09	90 06		bcc $2c11			bcc 	_GSNoIncrement
.2c0b	e6 28		inc $28				inc 	zTemp2
.2c0d	d0 02		bne $2c11			bne 	_GSNoIncrement
.2c0f	e6 29		inc $29				inc 	zTemp2+1
.2c11					_GSNoIncrement:
.2c11	c9 00		cmp #$00			cmp 	#0
.2c13	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2c14					VARArrayLookup:
.2c14	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2c16	86 25		stx $25				stx 	zTemp0+1
.2c18	b2 24		lda ($24)			lda 	(zTemp0)
.2c1a	48		pha				pha
.2c1b	5a		phy				phy
.2c1c	a0 01		ldy #$01			ldy 	#1
.2c1e	b1 24		lda ($24),y			lda 	(zTemp0),y
.2c20	7a		ply				ply
.2c21	48		pha				pha
.2c22	20 88 17	jsr $1788			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2c25	68		pla				pla 								; array address to zTemp0
.2c26	85 25		sta $25				sta 	zTemp0+1
.2c28	68		pla				pla
.2c29	85 24		sta $24				sta 	zTemp0
.2c2b	5a		phy				phy 								; save codePtr position.
.2c2c	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2c2e	b1 24		lda ($24),y			lda 	(zTemp0),y
.2c30	48		pha				pha 								; save bit 15 on stack.
.2c31	29 7f		and #$7f			and 	#$7F
.2c33	85 26		sta $26				sta 	zTemp1
.2c35	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2c37	d2 24		cmp ($24)			cmp 	(zTemp0)
.2c39	a5 09		lda $09				lda 	IFR0+IM1
.2c3b	e5 26		sbc $26				sbc 	zTemp1
.2c3d	b0 3a		bcs $2c79			bcs 	_VALIndex
.2c3f	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2c41	c9 40		cmp #$40			cmp 	#$40
.2c43	b0 34		bcs $2c79			bcs 	_VALIndex
.2c45	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2c47	26 09		rol $09				rol 	IFR0+IM1
.2c49	fa		plx				plx 								; get msb of size -> X
.2c4a	30 04		bmi $2c50			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2c4c	06 08		asl $08				asl 	IFR0+IM0
.2c4e	26 09		rol $09				rol 	IFR0+IM1
.2c50					_VARNotX4:
.2c50	18		clc				clc 								; add the two for the size bytes
.2c51	a5 08		lda $08				lda 	IFR0+IM0
.2c53	69 02		adc #$02			adc 	#2
.2c55	85 08		sta $08				sta 	IFR0+IM0
.2c57	90 02		bcc $2c5b			bcc 	_VARNoCarry1
.2c59	e6 09		inc $09				inc 	IFR0+IM1
.2c5b					_VARNoCarry1:
.2c5b	18		clc				clc 								; calculate the element address and push to stack.
.2c5c	a5 08		lda $08				lda 	IFR0+IM0
.2c5e	65 24		adc $24				adc 	zTemp0
.2c60	48		pha				pha
.2c61	a5 09		lda $09				lda 	IFR0+IM1
.2c63	65 25		adc $25				adc 	zTemp0+1
.2c65	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2c67	30 04		bmi $2c6d			bmi 	_VARHasSubLevel
.2c69	aa		tax				tax 								; address in XA
.2c6a	68		pla				pla
.2c6b	7a		ply				ply 								; restore Y and exit
.2c6c	60		rts				rts
.2c6d					_VARHasSubLevel:
.2c6d	aa		tax				tax 								; get link address in XA
.2c6e	68		pla				pla
.2c6f	7a		ply				ply 								; restore code position.
.2c70	48		pha				pha
.2c71	20 46 29	jsr $2946			jsr 	ERRCheckComma 				; comma required.
.2c74	68		pla				pla
.2c75	20 14 2c	jsr $2c14			jsr 	VARArrayLookup 				; call it recursively
.2c78	60		rts				rts
.2c79					_VALIndex:
.2c79	4c 41 28	jmp $2841		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2c7c					VARCreate:
.2c7c	5a		phy				phy
.2c7d	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2c7f	a2 00		ldx #$00			ldx 	#0
.2c81	20 80 10	jsr $1080			jsr 	AllocateMemory
.2c84	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2c86	86 27		stx $27				stx 	zTemp1+1
.2c88	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2c8a	ad 30 06	lda $0630			lda 	VARHash
.2c8d	91 26		sta ($26),y			sta 	(zTemp1),y
.2c8f	c8		iny				iny 								; put address of name into +3,+4
.2c90	ad 2e 06	lda $062e			lda 	VARNameAddress
.2c93	91 26		sta ($26),y			sta 	(zTemp1),y
.2c95	c8		iny				iny
.2c96	ad 2f 06	lda $062f			lda 	VARNameAddress+1
.2c99	91 26		sta ($26),y			sta 	(zTemp1),y
.2c9b	ad 31 06	lda $0631			lda 	VARType
.2c9e	29 01		and #$01			and 	#1
.2ca0	f0 06		beq $2ca8			beq 	_CVNotString
.2ca2	a0 08		ldy #$08			ldy 	#5+3
.2ca4	a9 80		lda #$80			lda 	#$80
.2ca6	91 26		sta ($26),y			sta 	(zTemp1),y
.2ca8					_CVNotString:
.2ca8	ad 52 06	lda $0652			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2cab	85 24		sta $24				sta 	zTemp0
.2cad	ad 53 06	lda $0653			lda 	VARHashEntry+1
.2cb0	85 25		sta $25				sta 	zTemp0+1
.2cb2	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2cb4	b2 24		lda ($24)			lda 	(zTemp0)
.2cb6	92 26		sta ($26)			sta 	(zTemp1)
.2cb8	b1 24		lda ($24),y			lda 	(zTemp0),y
.2cba	91 26		sta ($26),y			sta 	(zTemp1),y
.2cbc	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2cbe	92 24		sta ($24)			sta 	(zTemp0)
.2cc0	a5 27		lda $27				lda 	zTemp1+1
.2cc2	91 24		sta ($24),y			sta 	(zTemp0),y
.2cc4	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2cc6	a6 27		ldx $27				ldx 	zTemp1+1
.2cc8	18		clc				clc 								; add 5 to point to the data.
.2cc9	69 05		adc #$05			adc 	#5
.2ccb	90 01		bcc $2cce			bcc 	_VCNoCarry
.2ccd	e8		inx				inx
.2cce					_VCNoCarry:
.2cce	7a		ply				ply
.2ccf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2cd0					VARFind:
.2cd0	5a		phy				phy
.2cd1	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2cd3	b1 24		lda ($24),y			lda 	(zTemp0),y
.2cd5	85 27		sta $27				sta 	zTemp1+1
.2cd7	f0 1c		beq $2cf5			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2cd9	b2 24		lda ($24)			lda 	(zTemp0)
.2cdb	85 26		sta $26				sta 	zTemp1
.2cdd					_VFLoop:
.2cdd	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2cdf	b1 26		lda ($26),y			lda 	(zTemp1),y
.2ce1	cd 30 06	cmp $0630			cmp 	VARHash
.2ce4	f0 12		beq $2cf8			beq 	_VFHashesMatch 				; if so, check the name.
.2ce6					_VFNext:
.2ce6	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2ce8	aa		tax				tax
.2ce9	a0 01		ldy #$01			ldy 	#1
.2ceb	b1 26		lda ($26),y			lda 	(zTemp1),y
.2ced	85 27		sta $27				sta 	zTemp1+1
.2cef	86 26		stx $26				stx 	zTemp1
.2cf1	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2cf3	d0 e8		bne $2cdd			bne 	_VFLoop
.2cf5					_VFExitFail:
.2cf5	7a		ply				ply
.2cf6	18		clc				clc
.2cf7	60		rts				rts
.2cf8					_VFHashesMatch:
.2cf8	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2cfa	b1 26		lda ($26),y			lda 	(zTemp1),y
.2cfc	85 28		sta $28				sta 	zTemp2
.2cfe	c8		iny				iny
.2cff	b1 26		lda ($26),y			lda 	(zTemp1),y
.2d01	85 29		sta $29				sta 	zTemp2+1
.2d03	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2d05					_VFNameCompLoop:
.2d05	c8		iny				iny 								; char at a time
.2d06	b9 32 06	lda $0632,y			lda 	VARBuffer,y
.2d09	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2d0b	d0 d9		bne $2ce6			bne 	_VFNext						; next entry if different.
.2d0d	c9 7c		cmp #$7c			cmp 	#$7C
.2d0f	90 f4		bcc $2d05			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2d11	18		clc				clc
.2d12	a5 26		lda $26				lda 	zTemp1
.2d14	a6 27		ldx $27				ldx 	zTemp1+1
.2d16	69 05		adc #$05			adc 	#5
.2d18	90 01		bcc $2d1b			bcc 	_VFNNoCarry
.2d1a	e8		inx				inx
.2d1b					_VFNNoCarry:
.2d1b	7a		ply				ply
.2d1c	38		sec				sec
.2d1d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2d1e					VARGetInfo:
.2d1e	98		tya				tya 								; calculate the address of the identifier start.
.2d1f	18		clc				clc
.2d20	65 18		adc $18				adc 	codePtr
.2d22	8d 2e 06	sta $062e			sta 	VARNameAddress
.2d25	a5 19		lda $19				lda 	codePtr+1
.2d27	69 00		adc #$00			adc 	#0
.2d29	8d 2f 06	sta $062f			sta 	VARNameAddress+1
.2d2c	9c 30 06	stz $0630			stz 	VARHash
.2d2f	a2 00		ldx #$00			ldx 	#0
.2d31					_VARCopyName:
.2d31	18		clc				clc 								; update the sum hash.
.2d32	ad 30 06	lda $0630			lda 	VARHash
.2d35	71 18		adc ($18),y			adc 	(codePtr),y
.2d37	8d 30 06	sta $0630			sta 	VARHash
.2d3a	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2d3c	c8		iny				iny
.2d3d	9d 32 06	sta $0632,x			sta 	VARBuffer,x
.2d40	e8		inx				inx
.2d41	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2d43	90 ec		bcc $2d31			bcc 	_VARCopyName
.2d45	8d 31 06	sta $0631			sta 	VARType 					; save type byte
.2d48	29 03		and #$03			and 	#3 							; type is 0-3
.2d4a	0a		asl a				asl 	a
.2d4b	0a		asl a				asl 	a
.2d4c	85 24		sta $24				sta 	zTemp0
.2d4e	ad 30 06	lda $0630			lda 	VARHash 					; force into range of hash entries per type.
.2d51	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2d53	65 24		adc $24				adc 	zTemp0 						; index of hash table
.2d55	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2d56	69 54		adc #$54			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2d58	85 24		sta $24				sta 	zTemp0
.2d5a	8d 52 06	sta $0652			sta 	VARHashEntry
.2d5d	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2d5f	69 00		adc #$00			adc 	#0
.2d61	85 25		sta $25				sta 	zTemp0+1
.2d63	8d 53 06	sta $0653			sta 	VARHashEntry+1
.2d66	60		rts				rts
.2d67					VARClearHashTables:
.2d67	a2 00		ldx #$00			ldx 	#0
.2d69					_VCHRLoop:
.2d69	a9 00		lda #$00			lda 	#0
.2d6b	9d 54 06	sta $0654,x			sta 	VARHashTables,x
.2d6e	e8		inx				inx
.2d6f	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2d71	d0 f6		bne $2d69			bne 	_VCHRLoop
.2d73	60		rts				rts
.062e					VARNameAddress:
>062e							.fill 	2
.0630					VARHash:
>0630							.fill 	1
.0631					VARType:
>0631							.fill 	1
.0632					VARBuffer:
>0632							.fill 	32
.0652					VARHashEntry:
>0652							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0654					VARHashTables:
>0654							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2d74					VARCheckSimple:
.2d74	aa		tax				tax 								; save in X
.2d75	b1 18		lda ($18),y			lda 	(codePtr),y
.2d77	c9 7c		cmp #$7c			cmp 	#$7C
.2d79	d0 15		bne $2d90			bne 	_VCSComplex
.2d7b	c8		iny				iny 								; consume the second byte, the type.
.2d7c	8a		txa				txa  								; character (40-7F) x 4
.2d7d	0a		asl a				asl 	a
.2d7e	0a		asl a				asl  	a
.2d7f	18		clc				clc
.2d80	69 74		adc #$74			adc 	#FastVariables & $FF
.2d82	85 08		sta $08				sta 	IFR0+IM0
.2d84	a9 06		lda #$06			lda 	#FastVariables >> 8
.2d86	69 00		adc #$00			adc 	#0
.2d88	85 09		sta $09				sta 	IFR0+IM1
.2d8a	64 0a		stz $0a				stz 	IFR0+IM2
.2d8c	64 0b		stz $0b				stz 	IFR0+IExp
.2d8e	38		sec				sec 								; it's a reference
.2d8f	60		rts				rts
.2d90					_VCSComplex:
.2d90	88		dey				dey	 								; extract information.
.2d91	20 1e 2d	jsr $2d1e			jsr 	VARGetInfo
.2d94	20 d0 2c	jsr $2cd0			jsr 	VARFind 					; search for variable
.2d97	b0 0a		bcs $2da3			bcs 	_VCSHaveVariable
.2d99	ad 31 06	lda $0631			lda 	VARType 					; error if arrays, cannot autocreate
.2d9c	29 02		and #$02			and 	#2
.2d9e	d0 25		bne $2dc5			bne 	_VCNoCreate
.2da0	20 7c 2c	jsr $2c7c			jsr 	VARCreate 					; create variable
.2da3					_VCSHaveVariable:
.2da3	48		pha				pha 								; save LSB on the stack
.2da4	ad 31 06	lda $0631			lda 	VARType 					; get var type, and shift bit 1 into carry
.2da7	6a		ror a				ror 	a
.2da8	6a		ror a				ror 	a
.2da9	68		pla				pla 								; restore LSB
.2daa	90 08		bcc $2db4			bcc 	_VCSNotArray 				; skip if not an array
.2dac	20 14 2c	jsr $2c14			jsr 	VARArrayLookup 				; look for subscripts.
.2daf	48		pha				pha 								; check )
.2db0	20 3e 29	jsr $293e			jsr 	ERRCheckRParen
.2db3	68		pla				pla
.2db4					_VCSNotArray:
.2db4	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2db6	85 08		sta $08				sta 	IFR0+IM0
.2db8	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2dba	ad 31 06	lda $0631			lda 	VARType 					; number/string bit into carry
.2dbd	6a		ror a				ror 	a
.2dbe	a9 00		lda #$00			lda 	#0
.2dc0	6a		ror a				ror 	a 							; now $00 or $80
.2dc1	85 0b		sta $0b				sta 	IFR0+IExp
.2dc3	38		sec				sec 								; it's a reference
.2dc4	60		rts				rts
.2dc5					_VCNoCreate:
.2dc5	4c 67 28	jmp $2867		jmp	ErrorV_uninitialised
.0674					FastVariables:
>0674							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2dc8					IFInitialise:
.2dc8	9c e4 06	stz $06e4			stz 	IFStackIndex 				; reset the internal stack.
.2dcb	60		rts				rts
.2dcc					IFloatSubtract:
.2dcc	da		phx				phx
.2dcd	a2 08		ldx #$08			ldx 	#IFR0
.2dcf	20 e6 33	jsr $33e6			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2dd2	fa		plx				plx
.2dd3					IFloatAdd:
.2dd3	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2dd5	05 0b		ora $0b				ora 	IFR0+IExp
.2dd7	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2dd9	d0 4e		bne $2e29			bne 	_IFloatAddDecimals 			; floating point version.
.2ddb					_IFAddSubMantissa:
.2ddb	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2ddd	45 0b		eor $0b				eor 	IFR0+IExp
.2ddf	29 40		and #$40			and 	#IFSign
.2de1	d0 21		bne $2e04			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2de3	18		clc				clc 								; do the actual addition
.2de4	a5 08		lda $08				lda 	IFR0+IM0
.2de6	75 00		adc $00,x			adc 		IM0,x
.2de8	85 08		sta $08				sta 	IFR0+IM0
.2dea	a5 09		lda $09				lda 	IFR0+IM1
.2dec	75 01		adc $01,x			adc 		IM1,x
.2dee	85 09		sta $09				sta 	IFR0+IM1
.2df0	a5 0a		lda $0a				lda 	IFR0+IM2
.2df2	75 02		adc $02,x			adc 		IM2,x
.2df4	85 0a		sta $0a				sta 	IFR0+IM2
.2df6	10 29		bpl $2e21			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2df8	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2dfa	20 0a 34	jsr $340a			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2dfd	20 34 34	jsr $3434			jsr 	IFloatIncExponent
.2e00	d0 1f		bne $2e21			bne 	_IFloatAddExit
.2e02	38		sec				sec 								; overflowed numerically.
.2e03	60		rts				rts
.2e04					_IFloatSubMantissa:
.2e04	38		sec				sec 								; do the subtraction R0-Rx
.2e05	a5 08		lda $08				lda 	IFR0+IM0
.2e07	f5 00		sbc $00,x			sbc 		IM0,x
.2e09	85 08		sta $08				sta 	IFR0+IM0
.2e0b	a5 09		lda $09				lda 	IFR0+IM1
.2e0d	f5 01		sbc $01,x			sbc 		IM1,x
.2e0f	85 09		sta $09				sta 	IFR0+IM1
.2e11	a5 0a		lda $0a				lda 	IFR0+IM2
.2e13	f5 02		sbc $02,x			sbc 		IM2,x
.2e15	85 0a		sta $0a				sta 	IFR0+IM2
.2e17	b0 08		bcs $2e21			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2e19	a2 08		ldx #$08			ldx 	#IFR0
.2e1b	20 ee 33	jsr $33ee			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2e1e	20 e6 33	jsr $33e6			jsr 	IFloatNegate 				; negate the result using sign bit.
.2e21					_IFloatAddExit:
.2e21	18		clc				clc
.2e22	60		rts				rts
.2e23					_IFloatZeroAdd:
.2e23	fa		plx				plx 								; return this value in R0
.2e24	20 6c 33	jsr $336c			jsr 	IFloatCopyFromRegister
.2e27	18		clc				clc
.2e28	60		rts				rts
.2e29					_IFloatAddDecimals:
.2e29	20 d4 33	jsr $33d4			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2e2c	f0 f3		beq $2e21			beq 	_IFloatAddExit
.2e2e	20 12 34	jsr $3412			jsr 	IFloatNormalise 			; normalise RX
.2e31	da		phx				phx 								; normalise R0
.2e32	a2 08		ldx #$08			ldx 	#IFR0
.2e34	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero
.2e37	f0 ea		beq $2e23			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2e39	20 12 34	jsr $3412			jsr 	IFloatNormalise
.2e3c	fa		plx				plx
.2e3d	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2e3f	29 3f		and #$3f			and 	#IFXMask
.2e41	38		sec				sec
.2e42	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2e44	85 20		sta $20				sta 	iTemp0
.2e46	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2e48	29 3f		and #$3f			and 	#IFXMask
.2e4a	38		sec				sec
.2e4b	e9 20		sbc #$20			sbc 	#$20
.2e4d	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2e4f	b0 02		bcs $2e53			bcs 	_IFloatHaveLarger
.2e51	a5 20		lda $20				lda 	iTemp0
.2e53					_IFloatHaveLarger:
.2e53	18		clc				clc 								; get the actual one back.
.2e54	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2e56	20 63 2e	jsr $2e63			jsr 	_IFShiftXToA
.2e59	da		phx				phx
.2e5a	a2 08		ldx #$08			ldx 	#IFR0
.2e5c	20 63 2e	jsr $2e63			jsr 	_IFShiftXToA
.2e5f	fa		plx				plx
.2e60	4c db 2d	jmp $2ddb			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2e63					_IFShiftXToA:
.2e63	8d dc 06	sta $06dc			sta 	IFTarget
.2e66	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero 			; check adding zero ?
.2e69	f0 11		beq $2e7c			beq 	_IFSXExit
.2e6b					_IFSXLoop:
.2e6b	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2e6d	29 3f		and #$3f			and 	#IFXMask
.2e6f	cd dc 06	cmp $06dc			cmp 	IFTarget
.2e72	f0 08		beq $2e7c			beq 	_IFSXExit
.2e74	20 0a 34	jsr $340a			jsr 	IFloatShiftRight
.2e77	20 34 34	jsr $3434			jsr 	IFloatIncExponent
.2e7a	80 ef		bra $2e6b			bra 	_IFSXLoop
.2e7c					_IFSXExit:
.2e7c	60		rts				rts
.06dc					IFTarget:
>06dc							.fill 	1
.2e7d					IFloatMultiply:
.2e7d	8e dc 06	stx $06dc			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2e80	20 35 2f	jsr $2f35			jsr 	IFCalculateNewSign
.2e83	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2e85	05 0b		ora $0b				ora 	IFR0+IExp
.2e87	29 3f		and #$3f			and 	#IFXMask
.2e89	15 01		ora $01,x			ora 	IM1,x
.2e8b	05 09		ora $09				ora 	IFR0+IM1
.2e8d	15 02		ora $02,x			ora 	IM2,x
.2e8f	05 0a		ora $0a				ora 	IFR0+IM2
.2e91	d0 0a		bne $2e9d			bne 	_IFMStandard
.2e93	20 b7 33	jsr $33b7			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2e96	ad de 06	lda $06de			lda 	IFNewSign
.2e99	85 0b		sta $0b				sta 	IFR0+IExp
.2e9b	18		clc				clc
.2e9c	60		rts				rts
.2e9d					_IFMStandard:
.2e9d	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2e9f	20 2c 2f	jsr $2f2c			jsr 	IFMSignExtend
.2ea2	8d dd 06	sta $06dd			sta 	IFNewExponent
.2ea5	a5 0b		lda $0b				lda 	IFR0+IExp
.2ea7	20 2c 2f	jsr $2f2c			jsr 	IFMSignExtend
.2eaa	18		clc				clc
.2eab	6d dd 06	adc $06dd			adc 	IFNewExponent
.2eae	8d dd 06	sta $06dd			sta 	IFNewExponent
.2eb1	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2eb3	20 7d 33	jsr $337d			jsr 	IFloatCopyToRegister
.2eb6	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2eb8	20 db 33	jsr $33db			jsr 	IFloatSetZero
.2ebb					_IFMLoop:
.2ebb	a2 14		ldx #$14			ldx 	#IFRTemp
.2ebd	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero
.2ec0	f0 3a		beq $2efc			beq 	_IFMExit
.2ec2	ae dc 06	ldx $06dc			ldx 	IFTarget 					; look at adder MSB
.2ec5	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2ec7	10 03		bpl $2ecc			bpl	 	_IFMTargetOkay
.2ec9	20 1d 2f	jsr $2f1d			jsr 	_IFMShiftAll
.2ecc					_IFMTargetOkay:
.2ecc	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2ece	29 01		and #$01			and 	#1
.2ed0	f0 16		beq $2ee8			beq 	_IFMNoAdd
.2ed2	ae dc 06	ldx $06dc			ldx 	IFTarget 					; add adder
.2ed5	18		clc				clc
.2ed6	a5 08		lda $08				lda 	IFR0+IM0
.2ed8	75 00		adc $00,x			adc 		IM0,x
.2eda	85 08		sta $08				sta 	IFR0+IM0
.2edc	a5 09		lda $09				lda 	IFR0+IM1
.2ede	75 01		adc $01,x			adc 		IM1,x
.2ee0	85 09		sta $09				sta 	IFR0+IM1
.2ee2	a5 0a		lda $0a				lda 	IFR0+IM2
.2ee4	75 02		adc $02,x			adc 		IM2,x
.2ee6	85 0a		sta $0a				sta 	IFR0+IM2
.2ee8					_IFMNoAdd:
.2ee8	a5 0a		lda $0a				lda 	IFR0+IM2
.2eea	10 03		bpl $2eef			bpl 	_IFMResultOkay
.2eec	20 1d 2f	jsr $2f1d			jsr 	_IFMShiftAll
.2eef					_IFMResultOkay:
.2eef	a2 14		ldx #$14			ldx 	#IFRTemp
.2ef1	20 0a 34	jsr $340a			jsr 	IFloatShiftRight
.2ef4	ae dc 06	ldx $06dc			ldx 	IFTarget
.2ef7	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.2efa	80 bf		bra $2ebb			bra 	_IFMLoop
.2efc					_IFMExit:
.2efc	ad dd 06	lda $06dd			lda 	IFNewExponent 				; validate new exponent.
.2eff	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2f01	90 0f		bcc $2f12			bcc 	_IFMOkay
.2f03	c9 e0		cmp #$e0			cmp 	#$E0
.2f05	b0 0b		bcs $2f12			bcs 	_IFMOkay
.2f07	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2f09	f0 10		beq $2f1b			beq 	_IFMError
.2f0b	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2f0d	20 db 33	jsr $33db			jsr 	IFloatSetZero
.2f10	18		clc				clc
.2f11	60		rts				rts
.2f12					_IFMOkay:
.2f12	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2f14	0d de 06	ora $06de			ora 	IFNewSign
.2f17	85 0b		sta $0b				sta 	IFR0+IExp
.2f19	18		clc				clc
.2f1a	60		rts				rts
.2f1b					_IFMError:
.2f1b	38		sec				sec
.2f1c	60		rts				rts
.2f1d					_IFMShiftAll:
.2f1d	a2 08		ldx #$08			ldx 	#IFR0
.2f1f	20 0a 34	jsr $340a			jsr 	IFloatShiftRight
.2f22	ae dc 06	ldx $06dc			ldx 	IFTarget
.2f25	20 0a 34	jsr $340a			jsr 	IFloatShiftRight
.2f28	ee dd 06	inc $06dd			inc 	IFNewExponent
.2f2b	60		rts				rts
.2f2c					IFMSignExtend:
.2f2c	29 3f		and #$3f			and 	#IFXMask
.2f2e	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2f30	90 02		bcc $2f34			bcc 	_IFMNoSXX
.2f32	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2f34					_IFMNoSXX:
.2f34	60		rts				rts
.2f35					IFCalculateNewSign:
.2f35	b5 03		lda $03,x			lda 	IExp,x
.2f37	45 0b		eor $0b				eor 	IFR0+IExp
.2f39	29 40		and #$40			and 	#IFSign
.2f3b	8d de 06	sta $06de			sta 	IFNewSign
.2f3e	60		rts				rts
.06dd					IFNewExponent:
>06dd							.fill 	1
.06de					IFNewSign:
>06de							.fill 	1
.2f3f					IFloatDivideInteger:
.2f3f	20 58 2f	jsr $2f58			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2f42	b0 06		bcs $2f4a			bcs 	_IFDIExit
.2f44	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2f46	20 6c 33	jsr $336c			jsr 	IFloatCopyFromRegister
.2f49	18		clc				clc
.2f4a					_IFDIExit:
.2f4a	60		rts				rts
.2f4b					IFloatModulusInteger:
.2f4b	20 58 2f	jsr $2f58			jsr 	IFloatDivideIntegerCommon
.2f4e	b0 07		bcs $2f57			bcs 	_IFMIExit
.2f50	ae dc 06	ldx $06dc			ldx 	IFTarget
.2f53	20 6c 33	jsr $336c			jsr 	IFloatCopyFromRegister
.2f56	18		clc				clc
.2f57					_IFMIExit:
.2f57	60		rts				rts
.2f58					IFloatDivideIntegerCommon:
.2f58	8e dc 06	stx $06dc			stx 	IFTarget  					; this is s1, s0 = R0
.2f5b	20 35 2f	jsr $2f35			jsr 	IFCalculateNewSign 			; calculate sign of result
.2f5e	20 86 2f	jsr $2f86			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2f61	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2f63	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero
.2f66	f0 1c		beq $2f84			beq 	_IFDIDivZero
.2f68	ae dc 06	ldx $06dc			ldx 	IFTarget 					; zero Rx (S1)
.2f6b	20 db 33	jsr $33db			jsr 	IFloatSetZero
.2f6e	5a		phy				phy
.2f6f	a0 18		ldy #$18			ldy 	#24
.2f71					_IFDILoop:
.2f71	20 97 2f	jsr $2f97			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2f74	20 a3 2f	jsr $2fa3			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2f77	88		dey				dey
.2f78	d0 f7		bne $2f71			bne 	_IFDILoop 					; do it 24 times
.2f7a	7a		ply				ply
.2f7b	ad de 06	lda $06de			lda 	IFNewSign 					; set sign of result.
.2f7e	29 40		and #$40			and 	#IFSign
.2f80	85 17		sta $17				sta 	IFRTemp+IExp
.2f82	18		clc				clc 								; is okay.
.2f83	60		rts				rts
.2f84					_IFDIDivZero:
.2f84	38		sec				sec
.2f85	60		rts				rts
.2f86					IFDCopyRXToRTemp:
.2f86	b5 00		lda $00,x			lda 	IM0,x
.2f88	85 14		sta $14				sta 	IFRTemp+IM0
.2f8a	b5 01		lda $01,x			lda 	IM1,x
.2f8c	85 15		sta $15				sta 	IFRTemp+IM1
.2f8e	b5 02		lda $02,x			lda 	IM2,x
.2f90	85 16		sta $16				sta 	IFRTemp+IM2
.2f92	b5 03		lda $03,x			lda 	IExp,x
.2f94	85 17		sta $17				sta 	IFRTemp+IExp
.2f96	60		rts				rts
.2f97					IFDShiftSTempS1Left:
.2f97	a2 14		ldx #$14			ldx 	#IFRTemp
.2f99	20 02 34	jsr $3402			jsr 	IFloatShiftLeft
.2f9c	ae dc 06	ldx $06dc			ldx 	IFTarget
.2f9f	20 03 34	jsr $3403			jsr 	IFloatRotateLeft
.2fa2	60		rts				rts
.2fa3					IFDTrySubtract:
.2fa3	ae dc 06	ldx $06dc			ldx 	IFTarget 					; s1 = Rx
.2fa6	38		sec				sec 								; subtract, saving the results on the stack.
.2fa7	b5 00		lda $00,x			lda 	IM0,x
.2fa9	e5 08		sbc $08				sbc 	IFR0+IM0
.2fab	48		pha				pha
.2fac	b5 01		lda $01,x			lda 	IM1,x
.2fae	e5 09		sbc $09				sbc 	IFR0+IM1
.2fb0	48		pha				pha
.2fb1	b5 02		lda $02,x			lda 	IM2,x
.2fb3	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2fb5	b0 03		bcs $2fba			bcs 	_IFDCanSubtract
.2fb7	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2fb8	68		pla				pla
.2fb9	60		rts				rts
.2fba					_IFDCanSubtract:
.2fba	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2fbc	68		pla				pla
.2fbd	95 01		sta $01,x			sta 	IM1,x
.2fbf	68		pla				pla
.2fc0	95 00		sta $00,x			sta 	IM0,x
.2fc2	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2fc4	d0 06		bne $2fcc			bne 	_IFDCSExit
.2fc6	e6 15		inc $15				inc 	IFRTemp+IM1
.2fc8	d0 02		bne $2fcc			bne 	_IFDCSExit
.2fca	e6 16		inc $16				inc 	IFRTemp+IM2
.2fcc					_IFDCSExit:
.2fcc	60		rts				rts
.2fcd					IFloatBitwiseAnd:
.2fcd	5a		phy				phy
.2fce	20 12 30	jsr $3012			jsr 	IFPreProcessBitwise 		; set up everything.
.2fd1	d0 0f		bne $2fe2			bne 	_IFBAExit
.2fd3					_IFBALoop:
.2fd3	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2fd6	35 00		and $00,x			and 	IM0,x
.2fd8	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2fdb	e8		inx				inx
.2fdc	c8		iny				iny
.2fdd	c0 03		cpy #$03			cpy 	#3
.2fdf	d0 f2		bne $2fd3			bne 	_IFBALoop
.2fe1	18		clc				clc
.2fe2					_IFBAExit:
.2fe2	7a		ply				ply
.2fe3	60		rts				rts
.2fe4					IFloatBitwiseOr:
.2fe4	5a		phy				phy
.2fe5	20 12 30	jsr $3012			jsr 	IFPreProcessBitwise 		; set up everything.
.2fe8	d0 0f		bne $2ff9			bne 	_IFBAExit
.2fea					_IFBALoop:
.2fea	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2fed	15 00		ora $00,x			ora 	IM0,x
.2fef	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2ff2	e8		inx				inx
.2ff3	c8		iny				iny
.2ff4	c0 03		cpy #$03			cpy 	#3
.2ff6	d0 f2		bne $2fea			bne 	_IFBALoop
.2ff8	18		clc				clc
.2ff9					_IFBAExit:
.2ff9	7a		ply				ply
.2ffa	60		rts				rts
.2ffb					IFloatBitwiseXor:
.2ffb	5a		phy				phy
.2ffc	20 12 30	jsr $3012			jsr 	IFPreProcessBitwise 		; set up everything.
.2fff	d0 0f		bne $3010			bne 	_IFBAExit
.3001					_IFBALoop:
.3001	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.3004	55 00		eor $00,x			eor 	IM0,x
.3006	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.3009	e8		inx				inx
.300a	c8		iny				iny
.300b	c0 03		cpy #$03			cpy 	#3
.300d	d0 f2		bne $3001			bne 	_IFBALoop
.300f	18		clc				clc
.3010					_IFBAExit:
.3010	7a		ply				ply
.3011	60		rts				rts
.3012					IFPreProcessBitwise:
.3012	a0 00		ldy #$00			ldy 	#0 							; set index.
.3014	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.3016	15 03		ora $03,x			ora 	IExp,x
.3018	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.301a	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.301c	38		sec				sec 								; carry set just in cases.
.301d	60		rts				rts
.301e					IFloatAbsoluteR0:
.301e	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.3020	29 bf		and #$bf			and 	#IFSign ^ 255
.3022	85 0b		sta $0b				sta 	IFR0+IExp
.3024	18		clc				clc
.3025	60		rts				rts
.3026					IFloatSquareRootR0:
.3026	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.3028	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero
.302b	f0 2e		beq $305b			beq 	_IFSRZero
.302d	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.302f	29 40		and #$40			and 	#IFSign
.3031	d0 2f		bne $3062			bne 	_IFSRFail
.3033	20 12 34	jsr $3412			jsr 	IFloatNormalise 			; it will work better !
.3036	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.3038	20 7d 33	jsr $337d			jsr 	IFloatCopyToRegister
.303b	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.303d	20 2c 2f	jsr $2f2c			jsr 	IFMSignExtend 				; sign extended version of the exponent
.3040	18		clc				clc
.3041	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.3043	85 0b		sta $0b				sta 	IFR0+IExp
.3045	4a		lsr a				lsr 	a 							; which we can halve.
.3046	38		sec				sec 								; convert back
.3047	e9 17		sbc #$17			sbc 	#23
.3049	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.304b	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.304d	20 64 30	jsr $3064			jsr 	_IFSRNewton
.3050	20 64 30	jsr $3064			jsr 	_IFSRNewton
.3053	20 64 30	jsr $3064			jsr 	_IFSRNewton
.3056	20 64 30	jsr $3064			jsr 	_IFSRNewton
.3059	18		clc				clc
.305a	60		rts				rts
.305b					_IFSRZero:
.305b	a2 08		ldx #$08			ldx 	#IFR0
.305d	20 db 33	jsr $33db			jsr 	IFloatSetZero
.3060	18		clc				clc
.3061	60		rts				rts
.3062					_IFSRFail:
.3062	38		sec				sec
.3063	60		rts				rts
.3064					_IFSRNewton:
.3064	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.3066	20 2a 33	jsr $332a			jsr 	IFloatPushRx
.3069	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.306b	20 2a 33	jsr $332a			jsr 	IFloatPushRx
.306e	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.3070	20 ff 30	jsr $30ff			jsr 	IFloatDivideFloat
.3073	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.3075	20 4b 33	jsr $334b			jsr 	IFloatPullRx
.3078	20 d3 2d	jsr $2dd3			jsr 	IFloatAdd 					; now guess + original/guess
.307b	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.307d	20 0a 34	jsr $340a			jsr 	IFloatShiftRight
.3080	a2 0c		ldx #$0c			ldx 	#IFR1
.3082	20 4b 33	jsr $334b			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.3085	60		rts				rts
.3086					IFloatFractionalR0:
.3086	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.3088	29 3f		and #$3f			and 	#IFXMask
.308a	f0 17		beq $30a3			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.308c	20 1e 30	jsr $301e			jsr 	IFloatAbsoluteR0 			; absolute value R0
.308f	a2 08		ldx #$08			ldx 	#IFR0
.3091	20 12 34	jsr $3412			jsr 	IFloatNormalise 			; normalise R0
.3094	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.3096	20 7d 33	jsr $337d			jsr 	IFloatCopyToRegister
.3099	20 dc 30	jsr $30dc			jsr 	IFloatIntegerR0 			; take integer part of R0
.309c	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.309e	20 cc 2d	jsr $2dcc			jsr 	IFloatSubtract
.30a1	80 05		bra $30a8			bra 	_FIPExit
.30a3					_FIPZero:
.30a3	a2 08		ldx #$08			ldx 	#IFR0
.30a5	20 db 33	jsr $33db			jsr 	IFloatSetZero
.30a8					_FIPExit:
.30a8	18		clc				clc
.30a9	60		rts				rts
.30aa					IFloatCompare:
.30aa	20 cc 2d	jsr $2dcc			jsr 	IFloatSubtract 				; subtract R0 from RX.
.30ad	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.30af	05 0b		ora $0b				ora 	IFR0+IExp
.30b1	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.30b3	29 3f		and #$3f			and 	#IFXMask
.30b5	d0 19		bne $30d0			bne 	_IFCNonInteger
.30b7	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero 			; check if zero
.30ba	f0 0f		beq $30cb			beq 	_IFCZero
.30bc					_IFCReturnSign:
.30bc	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.30be	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.30c0	48		pha				pha
.30c1	a9 01		lda #$01			lda 	#1
.30c3	20 dd 33	jsr $33dd			jsr 	IFloatSetByte 				; return to +1
.30c6	68		pla				pla 								; sign bit back
.30c7	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.30c9	18		clc				clc
.30ca	60		rts				rts
.30cb					_IFCZero:
.30cb	20 db 33	jsr $33db			jsr 	IFloatSetZero
.30ce	18		clc				clc
.30cf	60		rts				rts
.30d0					_IFCNonInteger:
.30d0	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.30d2	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.30d4	05 09		ora $09				ora 	IFR0+IM1
.30d6	05 0a		ora $0a				ora 	IFR0+IM2
.30d8	f0 f1		beq $30cb			beq 	_IFCZero 					; near enough !
.30da	80 e0		bra $30bc			bra 	_IFCReturnSign 				; return the sign of the difference.
.30dc					IFloatIntegerR0:
.30dc	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.30de	29 3f		and #$3f			and 	#IFXMask
.30e0	f0 1b		beq $30fd			beq 	_FIPExit 					; if so do nothing
.30e2	a2 08		ldx #$08			ldx 	#IFR0
.30e4	20 12 34	jsr $3412			jsr 	IFloatNormalise 			; normalise
.30e7	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero 			; is it zero ?
.30ea	f0 0e		beq $30fa			beq 	_FIPZero 					; if so return zero.
.30ec					_FIPShift:
.30ec	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.30ee	29 20		and #$20			and 	#$20 						; still -ve
.30f0	f0 0b		beq $30fd			beq 	_FIPExit
.30f2	20 0a 34	jsr $340a			jsr 	IFloatShiftRight 			; shift mantissa right
.30f5	20 34 34	jsr $3434			jsr 	IFloatIncExponent 			; bump exponent
.30f8	80 f2		bra $30ec			bra 	_FIPShift
.30fa					_FIPZero:
.30fa	20 db 33	jsr $33db			jsr 	IFloatSetZero
.30fd					_FIPExit:
.30fd	18		clc				clc
.30fe	60		rts				rts
.30ff					IFloatDivideFloat:
.30ff	8e dc 06	stx $06dc			stx 	IFTarget  					; this is s1, s0 = R0
.3102	20 35 2f	jsr $2f35			jsr 	IFCalculateNewSign 			; calculate sign of result
.3105	20 12 34	jsr $3412			jsr 	IFloatNormalise 			; normalise RX
.3108	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.310a	20 12 34	jsr $3412			jsr 	IFloatNormalise
.310d	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero
.3110	f0 56		beq $3168			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.3112	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.3114	20 2c 2f	jsr $2f2c			jsr 	IFMSignExtend
.3117	8d dd 06	sta $06dd			sta 	IFNewExponent
.311a	ae dc 06	ldx $06dc			ldx 	IFTarget 					; calculate s1.exponent
.311d	b5 03		lda $03,x			lda 	IExp,x
.311f	20 2c 2f	jsr $2f2c			jsr 	IFMSignExtend
.3122	38		sec				sec
.3123	ed dd 06	sbc $06dd			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.3126	38		sec				sec
.3127	e9 17		sbc #$17			sbc 	#23
.3129	8d dd 06	sta $06dd			sta 	IFNewExponent
.312c	20 6a 31	jsr $316a			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.312f	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.3131	10 08		bpl $313b			bpl 	_IFDFNoShiftResult
.3133	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.3135	20 0a 34	jsr $340a			jsr 	IFloatShiftRight
.3138	ee dd 06	inc $06dd			inc 	IFNewExponent
.313b					_IFDFNoShiftResult:
.313b	ad dd 06	lda $06dd			lda 	IFNewExponent 				; underflow/overflow check.
.313e	30 06		bmi $3146			bmi 	_IFDFCheckUnderflow
.3140	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.3142	b0 24		bcs $3168			bcs 	_IFDFDivZero
.3144	80 11		bra $3157			bra		_IFDFExit
.3146					_IFDFCheckUnderflow:
.3146	ad dd 06	lda $06dd			lda 	IFNewExponent 				; shift into a legal exponent.
.3149	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.314b	b0 0a		bcs $3157			bcs 	_IFDFExit
.314d	ee dd 06	inc $06dd			inc 	IFNewExponent
.3150	a2 14		ldx #$14			ldx 	#IFRTemp
.3152	20 0a 34	jsr $340a			jsr 	IFloatShiftRight
.3155	80 ef		bra $3146			bra 	_IFDFCheckUnderflow
.3157					_IFDFExit:
.3157	ad dd 06	lda $06dd			lda 	IFNewExponent 				; combine exponent and sign.
.315a	29 3f		and #$3f			and 	#IFXMask
.315c	0d de 06	ora $06de			ora 	IFNewSign
.315f	85 17		sta $17				sta 	IFRTemp+IExp
.3161	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.3163	20 6c 33	jsr $336c			jsr 	IFloatCopyFromRegister
.3166	18		clc				clc
.3167	60		rts				rts
.3168					_IFDFDivZero:
.3168	38		sec				sec
.3169	60		rts				rts
.316a					IFloatDivideSupport:
.316a	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.316c	20 db 33	jsr $33db			jsr 	IFloatSetZero
.316f	5a		phy				phy 								; main division loop x 23
.3170	a0 17		ldy #$17			ldy 	#23
.3172					_IFDSLoop:
.3172	20 a3 2f	jsr $2fa3			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.3175	20 97 2f	jsr $2f97			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.3178	88		dey				dey
.3179	d0 f7		bne $3172			bne 	_IFDSLoop 					; do it 24 times
.317b	7a		ply				ply
.317c	60		rts				rts
.317d					IFloatIntegerToStringR0:
.317d	8d df 06	sta $06df			sta 	IFBase 						; save base to use.
.3180	20 5c 34	jsr $345c			jsr 	IFloatBufferReset			; empty buffer
.3183	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.3185	29 3f		and #$3f			and 	#IFXMask
.3187	d0 1d		bne $31a6			bne 	_IFIFail
.3189	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.318b	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero
.318e	f0 0e		beq $319e			beq 	_IFINotNegative
.3190	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.3192	29 40		and #$40			and 	#IFSign
.3194	f0 08		beq $319e			beq 	_IFINotNegative
.3196	a9 2d		lda #$2d			lda 	#"-"						; output -
.3198	20 6b 34	jsr $346b			jsr 	IFloatBufferWrite
.319b	20 e6 33	jsr $33e6			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.319e					_IFINotNegative:
.319e	20 a8 31	jsr $31a8			jsr 	_IFIRecursiveConvert 		; start converting
.31a1	20 63 34	jsr $3463			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.31a4	18		clc				clc
.31a5	60		rts				rts
.31a6					_IFIFail:
.31a6	38		sec				sec
.31a7	60		rts				rts
.31a8					_IFIRecursiveConvert:
.31a8	a2 0c		ldx #$0c			ldx 	#IFR1
.31aa	20 7d 33	jsr $337d			jsr 	IFloatCopyToRegister 		; R0->R1
.31ad	a2 08		ldx #$08			ldx 	#IFR0
.31af	ad df 06	lda $06df			lda 	IFBase 						; Base -> R0
.31b2	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.31b5	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.31b7	20 3f 2f	jsr $2f3f			jsr 	IFloatDivideInteger
.31ba	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.31bc	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero
.31bf	f0 09		beq $31ca			beq 	_IFIOutDigit
.31c1	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.31c3	48		pha				pha
.31c4	20 a8 31	jsr $31a8			jsr 	_IFIRecursiveConvert 		; convert the divide result
.31c7	68		pla				pla
.31c8	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.31ca					_IFIOutDigit:
.31ca	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.31cc	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.31ce	90 02		bcc $31d2			bcc 	_IFINotHex
.31d0	69 06		adc #$06			adc 	#6
.31d2					_IFINotHex:
.31d2	69 30		adc #$30			adc 	#48
.31d4	20 6b 34	jsr $346b			jsr 	IFloatBufferWrite 			; write character to buffer.
.31d7	60		rts				rts
.06df					IFBase:
>06df							.fill 	1
.31d8					IFloatFloatToStringR0:
.31d8	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.31da	20 2a 33	jsr $332a			jsr 	IFloatPushRx
.31dd	20 7d 33	jsr $337d			jsr 	IFloatCopyToRegister
.31e0	20 dc 30	jsr $30dc			jsr 	IFloatIntegerR0				; make R0 integer
.31e3	a9 0a		lda #$0a			lda 	#10 						; base 10.
.31e5	20 7d 31	jsr $317d			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.31e8	9c e0 06	stz $06e0			stz 	IFloatDecimalCount 			; zero the decimal count.
.31eb	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.31ed	29 3f		and #$3f			and 	#IFXMask
.31ef	f0 44		beq $3235			beq 	_IFFSExit
.31f1					_IFloatFracLoop:
.31f1	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.31f3	20 6c 33	jsr $336c			jsr 	IFloatCopyFromRegister
.31f6	20 86 30	jsr $3086			jsr 	IFloatFractionalR0
.31f9	20 12 34	jsr $3412			jsr 	IFloatNormalise
.31fc	a2 10		ldx #$10			ldx 	#IFR2
.31fe	20 7d 33	jsr $337d			jsr 	IFloatCopyToRegister 		; copy to back R2
.3201	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.3203	a9 0a		lda #$0a			lda 	#10
.3205	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.3208	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.320a	20 7d 2e	jsr $2e7d			jsr 	IFloatMultiply
.320d	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.320f	20 7d 33	jsr $337d			jsr 	IFloatCopyToRegister
.3212	20 dc 30	jsr $30dc			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.3215	ad e0 06	lda $06e0			lda 	IFloatDecimalCount 			; done 3 dp, no more
.3218	c9 03		cmp #$03			cmp 	#3
.321a	f0 16		beq $3232			beq 	_IFFSExitStripZero
.321c	ad e0 06	lda $06e0			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.321f	d0 05		bne $3226			bne 	_IFloatNotFirst
.3221	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.3223	20 6b 34	jsr $346b			jsr 	IFloatBufferWrite
.3226					_IFloatNotFirst:
.3226	ee e0 06	inc $06e0			inc 	IFloatDecimalCount
.3229	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.322b	09 30		ora #$30			ora 	#"0"						; ASCII
.322d	20 6b 34	jsr $346b			jsr 	IFloatBufferWrite 			; write to the buffer.
.3230	80 bf		bra $31f1			bra 	_IFloatFracLoop
.3232					_IFFSExitStripZero:
.3232	20 7a 34	jsr $347a			jsr 	IFloatStripTrailingZeros
.3235					_IFFSExit:
.3235	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.3237	20 4b 33	jsr $334b			jsr 	IFloatPullRx
.323a	20 63 34	jsr $3463			jsr 	IFloatGetBufferAddress
.323d	18		clc				clc
.323e	60		rts				rts
.06e0					IFloatDecimalCount:
>06e0							.fill 	1
.323f					IFloatStringToFloatR0:
.323f	8d e1 06	sta $06e1			sta 	IFCount 					; save length and positions out.
.3242	86 20		stx $20				stx 	iTemp0
.3244	84 21		sty $21				sty 	iTemp0+1
.3246	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.3248	20 db 33	jsr $33db			jsr 	IFloatSetZero
.324b	9c e2 06	stz $06e2			stz 	IFSignFlag 					; clear the sign flag
.324e	20 db 32	jsr $32db			jsr 	IFSTFGetNext 				; get first
.3251	f0 1b		beq $326e			beq 	_IFSTFFail 					; no character, fail.
.3253	90 10		bcc $3265			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.3255	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.3257	d0 15		bne $326e			bne 	_IFSTFFail
.3259	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.325b	8d e2 06	sta $06e2			sta 	IFSignFlag
.325e					_IFSTFLoop:
.325e	20 db 32	jsr $32db			jsr 	IFSTFGetNext 				; get next character
.3261	b0 0b		bcs $326e			bcs 	_IFSTFFail 					; bad character.
.3263	f0 11		beq $3276			beq 	_IFSTFExit 					; end of data
.3265					_IFSTFHaveChar:
.3265	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.3267	f0 08		beq $3271			beq 	_IFSTFDecimal
.3269	20 ff 32	jsr $32ff			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.326c	80 f0		bra $325e			bra 	_IFSTFLoop 					; keep going until . or end.
.326e					_IFSTFFail:
.326e	38		sec				sec
.326f	80 0d		bra $327e			bra 	_IFSTFReturn
.3271					_IFSTFDecimal:
.3271	20 86 32	jsr $3286			jsr 	IFSTFDecimal 				; call the decimal places code.
.3274	b0 08		bcs $327e			bcs 	_IFSTFReturn 				; error
.3276					_IFSTFExit:
.3276	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.3278	0d e2 06	ora $06e2			ora 	IFSignFlag
.327b	85 0b		sta $0b				sta 	IFR0+IExp
.327d	18		clc				clc
.327e					_IFSTFReturn:
.327e	60		rts				rts
.327f					IFloatAddDecimalToR0:
.327f	8d e1 06	sta $06e1			sta 	IFCount 					; save it out.
.3282	86 20		stx $20				stx 	iTemp0
.3284	84 21		sty $21				sty 	iTemp0+1
.3286					IFSTFDecimal:
.3286	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.3288	20 2a 33	jsr $332a			jsr 	IFloatPushRx
.328b	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.328d	20 db 33	jsr $33db			jsr 	IFloatSetZero
.3290	9c e3 06	stz $06e3			stz 	IFDecimalPlaces 			; zero DP.
.3293					_IFSTDLoop:
.3293	20 db 32	jsr $32db			jsr 	IFSTFGetNext 				; get next
.3296	b0 41		bcs $32d9			bcs 	_IFSTFFail2 				; bad character.
.3298	f0 11		beq $32ab			beq 	_IFSTFComplete 				; end of data, work out the result.
.329a	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.329c	f0 39		beq $32d7			beq 	_IFSTFExit2
.329e	20 ff 32	jsr $32ff			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.32a1	ee e3 06	inc $06e3			inc 	IFDecimalPlaces 			; count decimals
.32a4	ad e3 06	lda $06e3			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.32a7	c9 03		cmp #$03			cmp 	#3
.32a9	90 e8		bcc $3293			bcc 	_IFSTDLoop
.32ab					_IFSTFComplete:
.32ab	ad e3 06	lda $06e3			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.32ae	f0 27		beq $32d7			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.32b0	3a		dec a				dec 	a 							; table indexed from 1.
.32b1	0a		asl a				asl 	a
.32b2	0a		asl a				asl 	a
.32b3	aa		tax				tax
.32b4	bd 16 33	lda $3316,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.32b7	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.32b9	bd 17 33	lda $3317,x			lda 	TableTen+1,x
.32bc	85 0d		sta $0d				sta  	IFR1+IM1
.32be	bd 18 33	lda $3318,x			lda 	TableTen+2,x
.32c1	85 0e		sta $0e				sta  	IFR1+IM2
.32c3	bd 19 33	lda $3319,x			lda 	TableTen+3,x
.32c6	85 0f		sta $0f				sta  	IFR1+IExp
.32c8	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.32ca	20 7d 2e	jsr $2e7d			jsr 	IFloatMultiply
.32cd	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.32cf	20 4b 33	jsr $334b			jsr 	IFloatPullRx
.32d2	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.32d4	20 d3 2d	jsr $2dd3			jsr 	IFloatAdd
.32d7					_IFSTFExit2:
.32d7	18		clc				clc
.32d8	60		rts				rts
.32d9					_IFSTFFail2:
.32d9	38		sec				sec
.32da	60		rts				rts
.32db					IFSTFGetNext:
.32db	ad e1 06	lda $06e1			lda 	IFCount  					; if count is zero, return with Z set.
.32de	f0 19		beq $32f9			beq 	_IFSTFReturnOk
.32e0	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.32e2	e6 20		inc $20				inc 	iTemp0 						; point at next.
.32e4	d0 02		bne $32e8			bne 	_IFSTFGNNoCarry
.32e6	e6 21		inc $21				inc 	iTemp0+1
.32e8					_IFSTFGNNoCarry:
.32e8	ce e1 06	dec $06e1			dec 	IFCount 					; dec count.
.32eb	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.32ed	f0 08		beq $32f7			beq 	_IFSTFGOkay
.32ef	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.32f1	90 08		bcc $32fb			bcc 	_IFSTFGFail
.32f3	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.32f5	b0 04		bcs $32fb			bcs 	_IFSTFGFail
.32f7					_IFSTFGOkay:
.32f7	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.32f9					_IFSTFReturnOk:
.32f9	18		clc				clc
.32fa	60		rts				rts
.32fb					_IFSTFGFail:
.32fb	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.32fd	38		sec				sec
.32fe	60		rts				rts
.32ff					IFSTFAddR0:
.32ff	29 0f		and #$0f			and 	#15 						; to int value
.3301	48		pha				pha 								; save it.
.3302	a9 0a		lda #$0a			lda 	#10
.3304	a2 0c		ldx #$0c			ldx 	#IFR1
.3306	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.3309	20 7d 2e	jsr $2e7d			jsr 	IFloatMultiply
.330c	68		pla				pla
.330d	a2 0c		ldx #$0c			ldx 	#IFR1
.330f	20 dd 33	jsr $33dd			jsr 	IFloatSetByte
.3312	20 d3 2d	jsr $2dd3			jsr 	IFloatAdd
.3315	60		rts				rts
.06e1					IFCount:
>06e1							.fill 	1
.06e2					IFSignFlag:
>06e2							.fill 	1
.06e3					IFDecimalPlaces:
>06e3							.fill 	1
.3316					TableTen:
>3316	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>331a	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>331e	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>3322	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>3326	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.332a					IFloatPushRx:
.332a	5a		phy				phy
.332b	ac e4 06	ldy $06e4			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.332e	b5 00		lda $00,x			lda 	IM0,x
.3330	99 e5 06	sta $06e5,y			sta 	IFStack,y
.3333	b5 01		lda $01,x			lda 	IM1,x
.3335	99 e6 06	sta $06e6,y			sta 	IFStack+1,y
.3338	b5 02		lda $02,x			lda 	IM2,x
.333a	99 e7 06	sta $06e7,y			sta 	IFStack+2,y
.333d	b5 03		lda $03,x			lda 	IExp,x
.333f	99 e8 06	sta $06e8,y			sta 	IFStack+3,y
.3342	c8		iny				iny
.3343	c8		iny				iny
.3344	c8		iny				iny
.3345	c8		iny				iny
.3346	8c e4 06	sty $06e4			sty 	IFStackIndex 				; update SP
.3349	7a		ply				ply
.334a	60		rts				rts
.334b					IFloatPullRx:
.334b	5a		phy				phy
.334c	ac e4 06	ldy $06e4			ldy 	IFStackIndex	 			; decrement SP
.334f	88		dey				dey
.3350	88		dey				dey
.3351	88		dey				dey
.3352	88		dey				dey
.3353	b9 e5 06	lda $06e5,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.3356	95 00		sta $00,x			sta 	IM0,x
.3358	b9 e6 06	lda $06e6,y			lda 	IFStack+1,y
.335b	95 01		sta $01,x			sta 	IM1,x
.335d	b9 e7 06	lda $06e7,y			lda 	IFStack+2,y
.3360	95 02		sta $02,x			sta 	IM2,x
.3362	b9 e8 06	lda $06e8,y			lda 	IFStack+3,y
.3365	95 03		sta $03,x			sta 	IExp,x
.3367	8c e4 06	sty $06e4			sty 	IFStackIndex 				; update SP
.336a	7a		ply				ply
.336b	60		rts				rts
.06e4					IFStackIndex:
>06e4							.fill 	1
.06e5					IFStack:
>06e5							.fill 	16*4
.336c					IFloatCopyFromRegister:
.336c	b5 00		lda $00,x			lda 	0,x
.336e	85 08		sta $08				sta 	IFR0
.3370	b5 01		lda $01,x			lda 	1,x
.3372	85 09		sta $09				sta 	IFR0+1
.3374	b5 02		lda $02,x			lda 	2,x
.3376	85 0a		sta $0a				sta 	IFR0+2
.3378	b5 03		lda $03,x			lda 	3,x
.337a	85 0b		sta $0b				sta 	IFR0+3
.337c	60		rts				rts
.337d					IFloatCopyToRegister:
.337d	a5 08		lda $08				lda 	IFR0
.337f	95 00		sta $00,x			sta 	0,x
.3381	a5 09		lda $09				lda 	IFR0+1
.3383	95 01		sta $01,x			sta 	1,x
.3385	a5 0a		lda $0a				lda 	IFR0+2
.3387	95 02		sta $02,x			sta 	2,x
.3389	a5 0b		lda $0b				lda 	IFR0+3
.338b	95 03		sta $03,x			sta 	3,x
.338d	60		rts				rts
.338e					IFloatLoadInline:
.338e	68		pla				pla 								; pop address off to iTemp0
.338f	85 20		sta $20				sta 	iTemp0
.3391	68		pla				pla
.3392	85 21		sta $21				sta 	iTemp0+1
.3394	a0 01		ldy #$01			ldy 	#1
.3396	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.3398	95 00		sta $00,x			sta 	0,x
.339a	c8		iny				iny
.339b	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.339d	95 01		sta $01,x			sta 	1,x
.339f	c8		iny				iny
.33a0	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.33a2	95 02		sta $02,x			sta 	2,x
.33a4	c8		iny				iny
.33a5	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.33a7	95 03		sta $03,x			sta 	3,x
.33a9	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.33aa	a5 20		lda $20				lda 	iTemp0
.33ac	69 05		adc #$05			adc 	#5
.33ae	85 20		sta $20				sta 	iTemp0
.33b0	90 02		bcc $33b4			bcc 	_IFLINoCarry
.33b2	e6 21		inc $21				inc 	iTemp0+1
.33b4					_IFLINoCarry:
.33b4	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.33b7					IFloatMultiply8BitRx:
.33b7	5a		phy		        phy
.33b8	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.33ba	a4 08		ldy $08		        ldy     IFR0+IM0
.33bc	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.33bd	85 08		sta $08		        sta     IFR0+IM0
.33bf	84 09		sty $09		        sty     IFR0+IM1
.33c1	a9 00		lda #$00	        lda     #0
.33c3	a0 08		ldy #$08	        ldy     #8
.33c5					_IFMLoop:
.33c5	90 03		bcc $33ca	        bcc     _IFMNoAdd
.33c7	18		clc		        clc
.33c8	65 09		adc $09		        adc     IFR0+IM1
.33ca					_IFMNoAdd:
.33ca	6a		ror a		        ror     a
.33cb	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.33cd	88		dey		        dey
.33ce	d0 f5		bne $33c5	        bne     _IFMLoop
.33d0	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.33d2	7a		ply		        ply
.33d3	60		rts		        rts
.33d4					IFloatCheckZero:
.33d4	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.33d6	15 01		ora $01,x			ora 	IM1,x
.33d8	15 02		ora $02,x			ora 	IM2,x
.33da	60		rts				rts
.33db					IFloatSetZero:
.33db	a9 00		lda #$00			lda 	#0
.33dd					IFloatSetByte:
.33dd	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.33df	74 01		stz $01,x			stz 	IM1,x
.33e1	74 02		stz $02,x			stz 	IM2,x
.33e3	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.33e5	60		rts				rts
.33e6					IFloatNegate:
.33e6	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.33e8	49 40		eor #$40			eor 	#IFSign
.33ea	95 03		sta $03,x			sta 	IExp,x
.33ec	18		clc				clc
.33ed	60		rts				rts
.33ee					IFloatMantissaNegate:
.33ee	38		sec				sec 								; when you want a real 2's complement negative value.
.33ef	a9 00		lda #$00			lda 	#0
.33f1	f5 00		sbc $00,x			sbc 	IM0,x
.33f3	95 00		sta $00,x			sta 	IM0,x
.33f5	a9 00		lda #$00			lda 	#0
.33f7	f5 01		sbc $01,x			sbc 	IM1,x
.33f9	95 01		sta $01,x			sta 	IM1,x
.33fb	a9 00		lda #$00			lda 	#0
.33fd	f5 02		sbc $02,x			sbc 	IM2,x
.33ff	95 02		sta $02,x			sta 	IM2,x
.3401	60		rts				rts
.3402					IFloatShiftLeft:
.3402	18		clc				clc
.3403					IFloatRotateLeft:
.3403	36 00		rol $00,x			rol 	IM0,x
.3405	36 01		rol $01,x			rol 	IM1,x
.3407	36 02		rol $02,x			rol 	IM2,x
.3409	60		rts				rts
.340a					IFloatShiftRight:
.340a	18		clc				clc
.340b					IFloatRotateRight:
.340b	76 02		ror $02,x			ror 	IM2,x
.340d	76 01		ror $01,x			ror 	IM1,x
.340f	76 00		ror $00,x			ror 	IM0,x
.3411	60		rts				rts
.3412					IFloatNormalise:
.3412	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero 			; is it zero
.3415	f0 18		beq $342f			beq 	_IFNExitZero 				; if so exit
.3417					_IFNLoop:
.3417	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.3419	29 c0		and #$c0			and 	#$C0
.341b	c9 40		cmp #$40			cmp 	#$40
.341d	f0 13		beq $3432			beq 	_IFNExitOkay 				; if so , then we are done.
.341f	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.3421	29 3f		and #$3f			and 	#$3F
.3423	c9 20		cmp #$20			cmp 	#$20
.3425	f0 0b		beq $3432			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.3427	20 48 34	jsr $3448			jsr 	IFloatDecExponent
.342a	20 02 34	jsr $3402			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.342d	80 e8		bra $3417			bra 	_IFNLoop
.342f					_IFNExitZero:
.342f	20 db 33	jsr $33db			jsr 	IFloatSetZero 				; set the result to zero
.3432					_IFNExitOkay:
.3432	18		clc				clc  								; return with CC.
.3433	60		rts				rts
.3434					IFloatIncExponent:
.3434	b5 03		lda $03,x			lda 	IExp,x
.3436	48		pha				pha
.3437	29 c0		and #$c0			and 	#$C0
.3439	8d 25 07	sta $0725			sta 	IFXTemp
.343c	68		pla				pla
.343d	1a		inc a				inc 	a
.343e	29 3f		and #$3f			and 	#$3F
.3440	48		pha				pha
.3441	0d 25 07	ora $0725			ora 	IFXTemp
.3444	95 03		sta $03,x			sta 	IExp,x
.3446	68		pla				pla
.3447	60		rts				rts
.3448					IFloatDecExponent:
.3448	b5 03		lda $03,x			lda 	IExp,x
.344a	48		pha				pha
.344b	29 c0		and #$c0			and 	#$C0
.344d	8d 25 07	sta $0725			sta 	IFXTemp
.3450	68		pla				pla
.3451	3a		dec a				dec 	a
.3452	29 3f		and #$3f			and 	#$3F
.3454	48		pha				pha
.3455	0d 25 07	ora $0725			ora 	IFXTemp
.3458	95 03		sta $03,x			sta 	IExp,x
.345a	68		pla				pla
.345b	60		rts				rts
.0725					IFXTemp:
>0725							.fill 	1
.345c					IFloatBufferReset:
.345c	9c 26 07	stz $0726			stz 	IFBufferCount
.345f	9c 27 07	stz $0727			stz 	IFBuffer
.3462	60		rts				rts
.3463					IFloatGetBufferAddress:
.3463	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.3465	a2 26		ldx #$26			ldx 	#(IFBufferCount & $FF)
.3467	ad 26 07	lda $0726			lda 	IFBufferCount
.346a	60		rts				rts
.346b					IFloatBufferWrite:
.346b	da		phx				phx
.346c	ae 26 07	ldx $0726			ldx 	IFBufferCount
.346f	9d 27 07	sta $0727,x			sta 	IFBuffer,x
.3472	9e 28 07	stz $0728,x			stz 	IFBuffer+1,x
.3475	ee 26 07	inc $0726			inc 	IFBufferCount
.3478	fa		plx				plx
.3479	60		rts				rts
.347a					IFloatStripTrailingZeros:
.347a	ae 26 07	ldx $0726			ldx 	IFBufferCount
.347d	bd 26 07	lda $0726,x			lda 	IFBuffer-1,x
.3480	c9 30		cmp #$30			cmp		#"0"
.3482	d0 0f		bne $3493			bne 	_IFSTExit
.3484	bd 25 07	lda $0725,x			lda 	IFBuffer-2,x
.3487	c9 2e		cmp #$2e			cmp 	#"."
.3489	f0 08		beq $3493			beq 	_IFSTExit
.348b	ce 26 07	dec $0726			dec 	IFBufferCount
.348e	9e 26 07	stz $0726,x			stz 	IFBuffer-1,x
.3491	80 e7		bra $347a			bra 	IFloatStripTrailingZeros
.3493					_IFSTExit:
.3493	60		rts				rts
.0726					IFBufferCount:
>0726							.fill 	1
.0727					IFBuffer:
>0727							.fill 	25
.3494					IFloatCheckRange:
.3494	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.3496	09 40		ora #$40			ora 	#IFSign
.3498	85 0b		sta $0b				sta 	IFR0+IExp
.349a	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.349c	20 d3 2d	jsr $2dd3			jsr 	IFloatAdd 					; add allowed to error.
.349f	a2 08		ldx #$08			ldx 	#IFR0
.34a1	20 d4 33	jsr $33d4			jsr 	IFloatCheckZero 			; error if < 0
.34a4	f0 06		beq $34ac			beq 	_IFAOkay
.34a6	a5 0b		lda $0b				lda 	IFR0+IExp
.34a8	29 40		and #$40			and 	#IFSign
.34aa	d0 01		bne $34ad			bne 	_IFAFail
.34ac					_IFAOkay:
.34ac	60		rts				rts
.34ad					_IFAFail:
.34ad	38		sec				sec
.34ae	68		pla				pla 								; get address - 2
.34af	e9 02		sbc #$02			sbc 	#2
.34b1	aa		tax				tax
.34b2	68		pla				pla
.34b3	e9 00		sbc #$00			sbc 	#0
.34b5	a8		tay				tay
.34b6	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.34b8					_IFAStop:
>34b8	db						.byte 	$DB 						; display an error AA ADR ADR
.34b9	80 fd		bra $34b8			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
