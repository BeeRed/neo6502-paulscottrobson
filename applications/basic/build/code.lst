
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -o build/basic.bin basic.asm
; Mon May 29 18:24:46 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					rTemp0:
>0008							.fill 	2
.000a					iTemp0:
>000a							.fill 	2
.000c					IFR0:
>000c							.fill 	4
.0010					IFR1:
>0010							.fill 	4
.0014					IFR2:
>0014							.fill 	4
.0018					IFRTemp:
>0018							.fill 	4
.0200					OSXPos:
>0200							.fill 	1
.0201					OSYPos:
>0201							.fill 	1
.0202					OSXSize:
>0202							.fill 	1
.0203					OSYSize:
>0203							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0204					OSKeyStatus:
>0204							.fill 	32
.0224					OSKeyboardQueue:
>0224							.fill 	OSKeyboardQueueMaxSize
.0234					OSKeyboardQueueSize:
>0234							.fill 	1
.0235					OSIsKeyUp:
>0235							.fill 	1
.0236					OSIsKeyShift:
>0236							.fill 	1

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffe8					OSGetScreenSize          = $ffe8 ; Get size of screen to XY
=$ffeb					OSReadDevice             = $ffeb ; Read device X to A
=$ffee					OSWriteDevice            = $ffee ; Write A to device X
=$fff1					OSWriteScreen            = $fff1 ; Write A to screen (device 0)
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard (device 1)
=$fff7					OSIsKeyAvailable         = $fff7 ; Check if key available (CS if so)

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
.1000					boot:
.1000	a2 60		ldx #$60			ldx 	#$60
.1002	a0 a0		ldy #$a0			ldy 	#$A0
.1004	20 99 1b	jsr $1b99			jsr 	PGMSetBaseAddress
.1007	20 1d 1f	jsr $1f1d			jsr 	IFInitialise
.100a	4c 9d 10	jmp $109d			jmp 	Command_RUN

;******  Processing file: include.files


;******  Processing file: src/data.inc

.001c					codePtr:
>001c							.fill 	2
.001e					zTemp0:
>001e							.fill 	2
.0020					zTemp1:
>0020							.fill 	2
.0022					zTemp2:
>0022							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_NEXT = $8b
=$8b					PR_STRUCTURE_LAST = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_DIM = $9e
=$9f					PR_CLEAR = $9f
=$a0					PR_NEW = $a0
=$a1					PR_RUN = $a1
=$a2					PR_STOP = $a2
=$a3					PR_END = $a3
=$a4					PR_ASSERT = $a4
=$a5					PR_LIST = $a5
=$a6					PR_SAVE = $a6
=$a7					PR_LOAD = $a7
=$a8					PR_POKE = $a8
=$a9					PR_DOKE = $a9
=$a9					PR_STANDARD_LAST = $a9
=$d5					PR_DEEKLPAREN = $d5
=$d5					PR_UNARY_FIRST = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_DOLLAR = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_EQUAL = $ef
=$ef					PR_BINARY_FIRST = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0237					TOKLineSize:
>0237							.fill 	1
.0238					TOKLineNumber:
>0238							.fill 	2
.023a					TOKBuffer:
>023a							.fill 	256
.033a					TOKRequireLineNumber:
>033a							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.100d					Command_ASSERT:
.100d	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber
.1010	a2 0c		ldx #$0c			ldx 	#IFR0
.1012	20 2b 25	jsr $252b			jsr 	IFloatCheckZero
.1015	f0 01		beq $1018			beq 	_CAFail
.1017	60		rts				rts
.1018					_CAFail:
.1018	4c 3b 11	jmp $113b		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.101b					Command_CLEAR:
.101b	20 82 1e	jsr $1e82			jsr 	StringSystemInitialise
.101e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/dead.asm

.101f					NoExec01:
.101f					NoExec02:
.101f					NoExec03:
.101f					NoExec04:
.101f					NoExec05:
.101f					NoExec06:
.101f					NoExec07:
.101f	4c ea 10	jmp $10ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.1022					Command_Print:
.1022					Command_IP_Main:
.1022	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1023					_CPLoop:
.1023	08		php				php 								; save last action flag
.1024	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next character
.1026	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.1028	f0 3e		beq $1068			beq 	_CPExit 					; without consuming
.102a	c9 9b		cmp #$9b			cmp 	#PR_COLON
.102c	f0 3a		beq $1068			beq 	_CPExit
.102e	68		pla				pla 								; throw last action flag
.102f	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; next character and bump
.1031	c8		iny				iny
.1032	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1034	f0 2f		beq $1065			beq 	_CPContinueWithSameLine
.1036	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.1038	f0 26		beq $1060			beq 	_CPTab
.103a	88		dey				dey 								; undo the get.
.103b	20 ab 13	jsr $13ab			jsr 	EXPEvaluateExpression 		; evaluate expression.
.103e	24 0f		bit $0f				bit 	IFR0+IExp 					; is it a number ?
.1040	10 14		bpl $1056			bpl 	_CPNumber
.1042	5a		phy				phy
.1043	18		clc				clc 								; string address to YX
.1044	a5 0c		lda $0c				lda 	IFR0+IM0
.1046	aa		tax				tax
.1047	a5 0d		lda $0d				lda 	IFR0+IM1
.1049	a8		tay				tay
.104a	e8		inx				inx 								; point to 1st character
.104b	d0 01		bne $104e			bne 	_CPNoCarry
.104d	c8		iny				iny
.104e					_CPNoCarry:
.104e	b2 0c		lda ($0c)			lda 	(IFR0+IM0)					; length to A
.1050	20 71 10	jsr $1071			jsr 	CPPrintAYX 					; print AYX
.1053	7a		ply				ply
.1054	80 cc		bra $1022			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1056					_CPNumber:
.1056	5a		phy				phy
.1057	20 2f 23	jsr $232f			jsr 	IFloatFloatToStringR0 		; convert to string at YX length A
.105a	20 71 10	jsr $1071			jsr 	CPPrintAYX 					; print AYX
.105d	7a		ply				ply
.105e	80 c2		bra $1022			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.1060					_CPTab:
.1060	a9 09		lda #$09			lda 	#9 							; print TAB
.1062	20 84 10	jsr $1084			jsr 	CPPrintA
.1065					_CPContinueWithSameLine:
.1065	38		sec				sec 								; loop round with carry set, which
.1066	80 bb		bra $1023			bra 	_CPLoop 					; will inhibit final CR
.1068					_CPExit:
.1068	28		plp				plp 								; get last action flag
.1069	b0 05		bcs $1070			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.106b	a9 0d		lda #$0d			lda 	#13 						; print new line
.106d	20 84 10	jsr $1084			jsr 	CPPrintA
.1070					_CPExit2:
.1070	60		rts				rts
.1071					CPPrintAYX:
.1071	86 1e		stx $1e				stx 	zTemp0
.1073	84 1f		sty $1f				sty 	zTemp0+1
.1075	aa		tax				tax
.1076	f0 0b		beq $1083			beq 	_CPPrintExit
.1078	a0 00		ldy #$00			ldy 	#0
.107a					_CPPrintAYXLoop:
.107a	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.107c	20 84 10	jsr $1084			jsr 	CPPrintA
.107f	c8		iny				iny
.1080	ca		dex				dex
.1081	d0 f7		bne $107a			bne 	_CPPrintAYXLoop
.1083					_CPPrintExit:
.1083	60		rts				rts
.1084					CPPrintA:
.1084	4c f1 ff	jmp $fff1			jmp 	OSWriteScreen

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1087					Command_NEW:
.1087	20 a0 1b	jsr $1ba0			jsr 	PGMNewProgram
.108a	20 1b 10	jsr $101b			jsr 	Command_CLEAR
.108d	4c e4 10	jmp $10e4			jmp 	Command_END

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.1090					Command_REM:
.1090					Command_REM2:
.1090	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; optional string parameter
.1092	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1094	d0 06		bne $109c			bne 	_CRExit
.1096	c8		iny				iny 								; skip over it, it's a comment.
.1097	98		tya				tya
.1098	38		sec				sec
.1099	71 1c		adc ($1c),y			adc 	(codePtr),y
.109b	a8		tay				tay
.109c					_CRExit:
.109c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.109d					Command_RUN:
.109d	20 1b 10	jsr $101b			jsr 	Command_CLEAR 				; clear everything out.
.10a0	ad 44 03	lda $0344			lda 	PGMBaseHigh 				; back to the program start
.10a3	85 1d		sta $1d				sta 	codePtr+1
.10a5	64 1c		stz $1c				stz 	codePtr
.10a7	80 0b		bra $10b4			bra 	RUNNewLine
.10a9					RUNEndOfLine:
.10a9	18		clc				clc 								; advance to next line.
.10aa	b2 1c		lda ($1c)			lda 	(codePtr)
.10ac	65 1c		adc $1c				adc 	codePtr
.10ae	85 1c		sta $1c				sta 	codePtr
.10b0	90 02		bcc $10b4			bcc 	_RELNoCarry
.10b2	e6 1d		inc $1d				inc 	codePtr+1
.10b4					_RELNoCarry:
.10b4					RUNNewLine:
.10b4	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.10b6	9a		txs				txs
.10b7	b2 1c		lda ($1c)			lda 	(codePtr) 					; check off end of program
.10b9	f0 29		beq $10e4			beq 	Command_END
.10bb	a0 03		ldy #$03			ldy 	#3 							; offset into codePtr for start of line.
.10bd					RUNNewCommand:
.10bd	9c 49 04	stz $0449			stz 	stringInitialised 			; reset string system.
.10c0	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token
.10c2	10 1a		bpl $10de			bpl		_RUNNotToken 				; probably an identifier
.10c4	c8		iny				iny 								; consume token
.10c5	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.10c7	f0 f4		beq $10bd			beq 	RUNNewCommand
.10c9	c9 aa		cmp #$aa			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.10cb	b0 0e		bcs $10db			bcs 	_RUNSyntax
.10cd	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.10cf	90 0a		bcc $10db			bcc 	_RUNSyntax
.10d1	0a		asl a				asl 	a 							; double into X.
.10d2	aa		tax				tax
.10d3	20 d8 10	jsr $10d8			jsr 	_RUNDispatchMain			; call the main dispatcher
.10d6	80 e5		bra $10bd			bra 	RUNNewCommand
.10d8					_RUNDispatchMain:
.10d8	7c b6 18	jmp ($18b6,x)			jmp 	(VectorTable,x)
.10db					_RUNSyntax:
.10db	4c ea 10	jmp $10ea		jmp	ErrorV_syntax
.10de					_RUNNotToken:
.10de	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.10e1					Command_Shift_Handler:
.10e1	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.10e4					Command_END:
.10e4	4c ff ff	jmp $ffff			jmp 	$FFFF

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.10e7					Command_STOP:
.10e7	4c 85 11	jmp $1185		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/errors/generated/errors.asm

.10ea					ErrorV_syntax:
.10ea	20 14 26	jsr $2614		jsr	ErrorHandler
>10ed	53 79 6e 74 61 78 20 45			.text	"Syntax Error",0
>10f5	72 72 6f 72 00
.10fa					ErrorV_range:
.10fa	20 14 26	jsr $2614		jsr	ErrorHandler
>10fd	4f 75 74 20 4f 66 20 52			.text	"Out Of Range",0
>1105	61 6e 67 65 00
.110a					ErrorV_value:
.110a	20 14 26	jsr $2614		jsr	ErrorHandler
>110d	42 61 64 20 56 61 6c 75			.text	"Bad Value",0
>1115	65 00
.1117					ErrorV_type:
.1117	20 14 26	jsr $2614		jsr	ErrorHandler
>111a	54 79 70 65 20 4d 69 73			.text	"Type Mismatch",0
>1122	6d 61 74 63 68 00
.1128					ErrorV_unimplemented:
.1128	20 14 26	jsr $2614		jsr	ErrorHandler
>112b	4e 6f 74 20 49 6d 70 6c			.text	"Not Implemented",0
>1133	65 6d 65 6e 74 65 64 00
.113b					ErrorV_assert:
.113b	20 14 26	jsr $2614		jsr	ErrorHandler
>113e	41 73 73 65 72 74 20 46			.text	"Assert Fail",0
>1146	61 69 6c 00
.114a					ErrorV_internal:
.114a	20 14 26	jsr $2614		jsr	ErrorHandler
>114d	49 6e 74 65 72 6e 61 6c			.text	"Internal Error",0
>1155	20 45 72 72 6f 72 00
.115c					ErrorV_divzero:
.115c	20 14 26	jsr $2614		jsr	ErrorHandler
>115f	44 69 76 69 64 65 20 42			.text	"Divide By Zero",0
>1167	79 20 5a 65 72 6f 00
.116e					ErrorV_structure:
.116e	20 14 26	jsr $2614		jsr	ErrorHandler
>1171	53 74 72 75 63 74 75 72			.text	"Structure Imbalance",0
>1179	65 20 49 6d 62 61 6c 61 6e 63 65 00
.1185					ErrorV_stop:
.1185	20 14 26	jsr $2614		jsr	ErrorHandler
>1188	50 72 6f 67 72 61 6d 20			.text	"Program Stopped",0
>1190	53 74 6f 70 70 65 64 00
.1198					ErrorV_data:
.1198	20 14 26	jsr $2614		jsr	ErrorHandler
>119b	4f 75 74 20 4f 66 20 44			.text	"Out Of Data",0
>11a3	61 74 61 00
.11a7					ErrorV_redefine:
.11a7	20 14 26	jsr $2614		jsr	ErrorHandler
>11aa	41 72 72 61 79 20 52 65			.text	"Array Redefined",0
>11b2	64 65 66 69 6e 65 64 00
.11ba					ErrorV_index:
.11ba	20 14 26	jsr $2614		jsr	ErrorHandler
>11bd	42 61 64 20 41 72 72 61			.text	"Bad Array Index",0
>11c5	79 20 49 6e 64 65 78 00
.11cd					ErrorV_memory:
.11cd	20 14 26	jsr $2614		jsr	ErrorHandler
>11d0	4f 75 74 20 4f 66 20 4d			.text	"Out Of Memory",0
>11d8	65 6d 6f 72 79 00
.11de					ErrorV_uninitialised:
.11de	20 14 26	jsr $2614		jsr	ErrorHandler
>11e1	56 61 72 69 61 62 6c 65			.text	"Variable Uninitialised",0
>11e9	20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.11f8					ErrorV_string:
.11f8	20 14 26	jsr $2614		jsr	ErrorHandler
>11fb	42 61 64 20 53 74 72 69			.text	"Bad String Length",0
>1203	6e 67 20 4c 65 6e 67 74 68 00

;******  Return to file: include.files


;******  Processing file: src/errors/syntax.asm

.120d					ERRCheckLParen:
.120d	b1 1c		lda ($1c),y			lda 	(codePtr),y
.120f	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.1211	d0 18		bne $122b			bne 	ERRSyntaxError
.1213	c8		iny				iny
.1214	60		rts				rts
.1215					ERRCheckRParen:
.1215	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1217	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.1219	d0 10		bne $122b			bne 	ERRSyntaxError
.121b	c8		iny				iny
.121c	60		rts				rts
.121d					ERRCheckComma:
.121d	b1 1c		lda ($1c),y			lda 	(codePtr),y
.121f	c9 99		cmp #$99			cmp 	#PR_COMMA
.1221	d0 08		bne $122b			bne 	ERRSyntaxError
.1223	c8		iny				iny
.1224	60		rts				rts
.1225					ERRCheckA:
.1225	d1 1c		cmp ($1c),y			cmp 	(codePtr),y
.1227	d0 02		bne $122b			bne 	ERRSyntaxError
.1229	c8		iny				iny
.122a	60		rts				rts
.122b					ERRSyntaxError:
.122b	4c ea 10	jmp $10ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.122e					EXPBinAdd:
.122e	24 0f		bit $0f				bit 	IFR0+IExp
.1230	30 6f		bmi $12a1			bmi 	EXPConcatenate
.1232	a2 10		ldx #$10			ldx 	#IFR1
.1234	4c 28 1f	jmp $1f28			jmp 	IFloatAdd
.1237					EXPBinSub:
.1237	24 0f		bit $0f				bit 	IFR0+IExp
.1239	30 3f		bmi $127a			bmi 	EXPTypeError
.123b	a2 10		ldx #$10			ldx 	#IFR1
.123d	4c 21 1f	jmp $1f21			jmp 	IFloatSubtract
.1240					EXPBinMul:
.1240	24 0f		bit $0f				bit 	IFR0+IExp
.1242	30 36		bmi $127a			bmi 	EXPTypeError
.1244	a2 10		ldx #$10			ldx 	#IFR1
.1246	4c d2 1f	jmp $1fd2			jmp 	IFloatMultiply
.1249					EXPBinFDiv:
.1249	24 0f		bit $0f				bit 	IFR0+IExp
.124b	30 2d		bmi $127a			bmi 	EXPTypeError
.124d	a2 10		ldx #$10			ldx 	#IFR1
.124f	20 55 22	jsr $2255			jsr 	IFloatDivideFloat
.1252	b0 0f		bcs $1263			bcs 	EXPDZero
.1254	60		rts				rts
.1255					EXPBinIDiv:
.1255	24 0f		bit $0f				bit 	IFR0+IExp
.1257	30 21		bmi $127a			bmi 	EXPTypeError
.1259	a2 10		ldx #$10			ldx 	#IFR1
.125b	20 55 22	jsr $2255			jsr 	IFloatDivideFloat
.125e	b0 03		bcs $1263			bcs 	EXPDZero
.1260	4c 32 22	jmp $2232			jmp 	IFloatIntegerR0
.1263					EXPDZero:
.1263	4c 5c 11	jmp $115c		jmp	ErrorV_divzero
.1266					EXPBinIMod:
.1266	24 0f		bit $0f				bit 	IFR0+IExp
.1268	30 10		bmi $127a			bmi 	EXPTypeError
.126a	a2 10		ldx #$10			ldx 	#IFR1
.126c	5a		phy				phy
.126d	20 6a 21	jsr $216a			jsr 	IFPreProcessBitwise 		; set up everything.
.1270	d0 05		bne $1277			bne 	EXPDRange
.1272	20 a3 20	jsr $20a3			jsr 	IFloatModulusInteger
.1275	7a		ply				ply
.1276	60		rts				rts
.1277					EXPDRange:
.1277	4c fa 10	jmp $10fa		jmp	ErrorV_range
.127a					EXPTypeError:
.127a	4c 17 11	jmp $1117		jmp	ErrorV_type
.127d					EXPBinAnd:
.127d	24 0f		bit $0f				bit 	IFR0+IExp
.127f	30 f9		bmi $127a			bmi 	EXPTypeError
.1281	a2 10		ldx #$10			ldx 	#IFR1
.1283	20 25 21	jsr $2125			jsr 	IFloatBitwiseAnd
.1286	b0 ef		bcs $1277			bcs 	EXPDRange
.1288	60		rts				rts
.1289					EXPBinOr:
.1289	24 0f		bit $0f				bit 	IFR0+IExp
.128b	30 ed		bmi $127a			bmi 	EXPTypeError
.128d	a2 10		ldx #$10			ldx 	#IFR1
.128f	20 3c 21	jsr $213c			jsr 	IFloatBitwiseOr
.1292	b0 e3		bcs $1277			bcs 	EXPDRange
.1294	60		rts				rts
.1295					EXPBinXor:
.1295	24 0f		bit $0f				bit 	IFR0+IExp
.1297	30 e1		bmi $127a			bmi 	EXPTypeError
.1299	a2 10		ldx #$10			ldx 	#IFR1
.129b	20 53 21	jsr $2153			jsr 	IFloatBitwiseXor
.129e	b0 d7		bcs $1277			bcs 	EXPDRange
.12a0	60		rts				rts
.12a1					EXPConcatenate:
.12a1	18		clc				clc
.12a2	b2 0c		lda ($0c)			lda 	(IFR0) 	 					; work out total length
.12a4	72 10		adc ($10)			adc 	(IFR1)
.12a6	b0 2d		bcs $12d5			bcs 	_EXPCError
.12a8	a6 0c		ldx $0c				ldx 	IFR0 						; push R0 string on stack.
.12aa	da		phx				phx
.12ab	a6 0d		ldx $0d				ldx 	IFR0+1
.12ad	da		phx				phx
.12ae	20 aa 1e	jsr $1eaa			jsr 	StringTempAllocate 			; allocate string, set up return
.12b1	a6 11		ldx $11				ldx 	IFR1+1 						; copy first string.
.12b3	a5 10		lda $10				lda 	IFR1
.12b5	20 be 12	jsr $12be			jsr 	_EXPCCopyXA
.12b8	fa		plx				plx 								; copy second string
.12b9	68		pla				pla
.12ba	20 be 12	jsr $12be			jsr 	_EXPCCopyXA
.12bd	60		rts				rts
.12be					_EXPCCopyXA:
.12be	86 1f		stx $1f				stx 	zTemp0+1 					; save address to zTemp0
.12c0	85 1e		sta $1e				sta 	zTemp0
.12c2	b2 1e		lda ($1e)			lda 	(zTemp0)					; length
.12c4	f0 0e		beq $12d4			beq 	_EXPCCExit 					; nothing.
.12c6	aa		tax				tax 								; count
.12c7	5a		phy				phy 								; start positioin
.12c8	a0 01		ldy #$01			ldy 	#1
.12ca					_EXPCCLoop:
.12ca	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; write characters one at a time.
.12cc	20 df 1e	jsr $1edf			jsr 	StringTempWrite
.12cf	c8		iny				iny
.12d0	ca		dex				dex
.12d1	d0 f7		bne $12ca			bne 	_EXPCCLoop
.12d3	7a		ply				ply
.12d4					_EXPCCExit:
.12d4	60		rts				rts
.12d5					_EXPCError:
.12d5	4c f8 11	jmp $11f8		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.12d8					EXPReturnTrue:
.12d8	a2 0c		ldx #$0c			ldx 	#IFR0
.12da	a9 01		lda #$01			lda 	#1
.12dc	20 34 25	jsr $2534			jsr 	IFloatSetByte
.12df	20 3d 25	jsr $253d			jsr 	IFloatNegate
.12e2	60		rts				rts
.12e3					EXPReturnFalse:
.12e3	a2 0c		ldx #$0c			ldx 	#IFR0
.12e5	4c 32 25	jmp $2532			jmp 	IFloatSetZero
.12e8					EXPCompareEqual:
.12e8	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.12eb	c9 00		cmp #$00			cmp 	#0
.12ed	f0 e9		beq $12d8			beq 	EXPReturnTrue
.12ef	80 f2		bra $12e3			bra 	EXPReturnFalse
.12f1					EXPCompareLess:
.12f1	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.12f4	c9 ff		cmp #$ff			cmp 	#$FF
.12f6	f0 e0		beq $12d8			beq 	EXPReturnTrue
.12f8	80 e9		bra $12e3			bra 	EXPReturnFalse
.12fa					EXPCompareGreater:
.12fa	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.12fd	c9 01		cmp #$01			cmp 	#1
.12ff	f0 d7		beq $12d8			beq 	EXPReturnTrue
.1301	80 e0		bra $12e3			bra 	EXPReturnFalse
.1303					EXPCompareNotEqual:
.1303	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.1306	c9 00		cmp #$00			cmp 	#0
.1308	d0 ce		bne $12d8			bne 	EXPReturnTrue
.130a	80 d7		bra $12e3			bra 	EXPReturnFalse
.130c					EXPCompareLessEqual:
.130c	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.130f	c9 01		cmp #$01			cmp 	#1
.1311	d0 c5		bne $12d8			bne 	EXPReturnTrue
.1313	80 ce		bra $12e3			bra 	EXPReturnFalse
.1315					EXPCompareGreaterEqual:
.1315	20 1e 13	jsr $131e			jsr 	EXPCompareBaseCode
.1318	c9 ff		cmp #$ff			cmp 	#$FF
.131a	d0 bc		bne $12d8			bne 	EXPReturnTrue
.131c	80 c5		bra $12e3			bra 	EXPReturnFalse
.131e					EXPCompareBaseCode:
.131e	24 0f		bit $0f				bit 	IFR0+IExp 					; string compare ?
.1320	30 10		bmi $1332			bmi 	_EXCBCString
.1322	a2 10		ldx #$10			ldx 	#IFR1						; float compare
.1324	20 00 22	jsr $2200			jsr 	IFloatCompare
.1327	a5 0c		lda $0c				lda 	IFR0+IM0
.1329	f0 06		beq $1331			beq 	_EXCBCExit 					; return 0 if zero
.132b	24 0f		bit $0f				bit 	IFR0+IExp 					; return 1 if +ve
.132d	50 02		bvc $1331			bvc 	_EXCBCExit
.132f	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1331					_EXCBCExit:
.1331	60		rts				rts
.1332					_EXCBCString:
.1332	5a		phy				phy
.1333	b2 0c		lda ($0c)			lda 	(IFR0) 						; length of smaller of the two in X.
.1335	d2 10		cmp ($10)			cmp 	(IFR1)
.1337	90 02		bcc $133b			bcc 	_EXCBCSmaller
.1339	b2 10		lda ($10)			lda 	(IFR1)
.133b					_EXCBCSmaller:
.133b	aa		tax				tax
.133c	f0 0d		beq $134b			beq 	_EXCBCMatches 				; if zero common length matches
.133e	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1340					_EXCBCCheckSmallerMatches:
.1340	c8		iny				iny 								; compare directly as far as common length
.1341	38		sec				sec
.1342	b1 10		lda ($10),y			lda 	(IFR1),y
.1344	f1 0c		sbc ($0c),y			sbc 	(IFR0),y
.1346	d0 08		bne $1350			bne 	_EXCBCExit2
.1348	ca		dex				dex
.1349	d0 f5		bne $1340			bne 	_EXCBCCheckSmallerMatches
.134b					_EXCBCMatches:
.134b	38		sec				sec
.134c	b2 10		lda ($10)			lda 	(IFR1) 						; common length matches. If same length equal
.134e	f2 0c		sbc ($0c)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1350					_EXCBCExit2:
.1350	7a		ply				ply
.1351	c9 00		cmp #$00			cmp 	#0
.1353	f0 04		beq $1359			beq 	_EXCBCReturn
.1355	30 03		bmi $135a			bmi 	_EXCBCFF
.1357	a9 01		lda #$01			lda 	#1
.1359					_EXCBCReturn:
.1359	60		rts				rts
.135a					_EXCBCFF:
.135a	a9 ff		lda #$ff			lda 	#$FF
.135c	60		rts				rts
.135d					_EXCBCRange:
.135d	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1360					EXPBinLeft:
.1360	a9 ff		lda #$ff			lda 	#$FF
.1362	8d 3b 03	sta $033b			sta 	EXPShiftLeftFlag
.1365	4c 6b 13	jmp $136b			jmp 	EXPShiftCommon
.1368					EXPBinRight:
.1368	9c 3b 03	stz $033b			stz 	EXPShiftLeftFlag
.136b					EXPShiftCommon:
.136b	a5 0f		lda $0f				lda 	IFR0+IExp 					; both integers
.136d	05 13		ora $13				ora 	IFR1+IExp
.136f	29 7f		and #$7f			and 	#$7F
.1371	d0 35		bne $13a8			bne 	_EXPSRange
.1373	a5 0c		lda $0c				lda 	IFR0+IM0					; check shift >= 32
.1375	29 e0		and #$e0			and 	#$E0
.1377	05 0d		ora $0d				ora 	IFR0+IM1
.1379	05 0e		ora $0e				ora 	IFR0+IM2
.137b	d0 25		bne $13a2			bne 	_EXPSShiftZero 				; if so return zero
.137d	5a		phy				phy
.137e	a5 0c		lda $0c				lda 	IFR0+IM0 					; get shift
.1380	29 1f		and #$1f			and 	#$1F
.1382	f0 17		beq $139b			beq 	_EXPSExit 					; exit if zero
.1384	a8		tay				tay
.1385					_EXPSLoop:
.1385	a2 10		ldx #$10			ldx 	#IFR1
.1387	2c 3b 03	bit $033b			bit 	EXPShiftLeftFlag
.138a	30 05		bmi $1391			bmi 	_EXPSShiftLeft
.138c	20 61 25	jsr $2561			jsr 	IFloatShiftRight
.138f	80 07		bra $1398			bra 	_EXPSContinue
.1391					_EXPSShiftLeft:
.1391	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1394	24 0e		bit $0e				bit 	IFR0+IM2 					; too many shifts
.1396	30 10		bmi $13a8			bmi 	_EXPSRange
.1398					_EXPSContinue:
.1398	88		dey				dey
.1399	d0 ea		bne $1385			bne 	_EXPSLoop
.139b					_EXPSExit:
.139b	a2 10		ldx #$10			ldx 	#IFR1
.139d	20 c3 24	jsr $24c3			jsr 	IFloatCopyFromRegister
.13a0	7a		ply				ply
.13a1	60		rts				rts
.13a2					_EXPSShiftZero:
.13a2	a2 0c		ldx #$0c			ldx 	#IFR0
.13a4	20 32 25	jsr $2532			jsr 	IFloatSetZero
.13a7	60		rts				rts
.13a8					_EXPSRange:
.13a8	4c fa 10	jmp $10fa		jmp	ErrorV_range
.033b					EXPShiftLeftFlag:
>033b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.13ab					EXPEvaluateExpression:
.13ab	a9 00		lda #$00			lda 	#0 							; current precedence
.13ad					EXPEvaluateExpressionPrecedenceA:
.13ad	48		pha				pha
.13ae	20 28 14	jsr $1428			jsr 	EXPTermValueR0				; do first term.
.13b1					_EELoop:
.13b1	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.13b3	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.13b5	90 31		bcc $13e8			bcc 	_EEExit
.13b7	aa		tax				tax 								; access the precedence of the operator.
.13b8	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.13b9	dd 1a 16	cmp $161a,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.13bc	b0 2b		bcs $13e9			bcs 	_EEExit2
.13be	48		pha				pha 								; save current precedence.
.13bf	da		phx				phx 								; save operator
.13c0	c8		iny				iny 								; consume operator
.13c1	da		phx				phx
.13c2	a2 0c		ldx #$0c			ldx 	#IFR0 						; push R0 on the stack
.13c4	20 81 24	jsr $2481			jsr 	IFloatPushRx
.13c7	fa		plx				plx
.13c8	bd 1a 16	lda $161a,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.13cb	20 ad 13	jsr $13ad			jsr 	EXPEvaluateExpressionPrecedenceA
.13ce	a2 10		ldx #$10			ldx 	#IFR1 						; pop LHS to R1.
.13d0	20 a2 24	jsr $24a2			jsr 	IFloatPullRx
.13d3	fa		plx				plx 								; operator
.13d4	a5 0f		lda $0f				lda 	IFR0+IExp 					; if check types match.
.13d6	45 13		eor $13				eor 	IFR1+IExp
.13d8	30 08		bmi $13e2			bmi 	_EEType
.13da					_EETypeOkay:
.13da	8a		txa				txa
.13db	0a		asl a				asl 	a 							; double -> X
.13dc	aa		tax				tax
.13dd	20 e5 13	jsr $13e5			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.13e0	80 cf		bra $13b1			bra 	_EELoop
.13e2					_EEType:
.13e2	4c 17 11	jmp $1117		jmp	ErrorV_type
.13e5					_EECallBinary:
.13e5	7c b6 18	jmp ($18b6,x)			jmp 	(VectorTable,x)
.13e8					_EEExit:
.13e8	68		pla				pla 								; throw precedence
.13e9					_EEExit2:
.13e9	18		clc				clc
.13ea	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.13eb					EXPEvalNumber:
.13eb	20 ab 13	jsr $13ab			jsr 	EXPEvaluateExpression
.13ee	24 0f		bit $0f				bit 	IFR0+IExp
.13f0	30 01		bmi $13f3			bmi 	EVUType
.13f2	60		rts				rts
.13f3					EVUType:
.13f3	4c 17 11	jmp $1117		jmp	ErrorV_type
.13f6					EXPEvalInteger:
.13f6	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.13f9	20 32 22	jsr $2232			jsr 	IFloatIntegerR0
.13fc	60		rts				rts
.13fd					EXPEvalInteger16:
.13fd	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger
.1400	a5 0e		lda $0e				lda 	IFR0+IM2
.1402	d0 21		bne $1425			bne 	EVURange
.1404	a6 0d		ldx $0d				ldx 	IFR0+IM1
.1406	a5 0c		lda $0c				lda 	IFR0+IM0
.1408	60		rts				rts
.1409					EXPEvalInteger8:
.1409	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger
.140c	a5 0e		lda $0e				lda 	IFR0+IM2
.140e	05 0d		ora $0d				ora 	IFR0+IM1
.1410	d0 13		bne $1425			bne 	EVURange
.1412	a5 0c		lda $0c				lda 	IFR0+IM0
.1414	60		rts				rts
.1415					EXPEvalString:
.1415	20 ab 13	jsr $13ab			jsr 	EXPEvaluateExpression
.1418	24 0f		bit $0f				bit 	IFR0+IExp
.141a	10 d7		bpl $13f3			bpl 	EVUType
.141c	a6 0d		ldx $0d				ldx 	IFR0+IM1
.141e	86 1f		stx $1f				stx 	zTemp0+1
.1420	a5 0c		lda $0c				lda 	IFR0+IM0
.1422	85 1e		sta $1e				sta 	zTemp0
.1424	60		rts				rts
.1425					EVURange:
.1425	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1428					EXPTermValueR0:
.1428	20 4d 14	jsr $144d			jsr 	EXPTermR0
.142b	90 1f		bcc $144c			bcc 	_ETVNotReference
>142d	db						.byte 	$DB
.142e	5a		phy				phy
.142f	a0 03		ldy #$03			ldy 	#3 							; get type
.1431	b1 0c		lda ($0c),y			lda 	(IFR0),y
.1433	30 14		bmi $1449			bmi 	_ETVDereferenceString
.1435	85 0f		sta $0f				sta 	IFR0+IExp 					; dereference to R0
.1437	88		dey				dey
.1438	b1 0c		lda ($0c),y			lda 	(IFR0),y
.143a	85 0e		sta $0e				sta 	IFR0+IM2
.143c	88		dey				dey
.143d	b1 0c		lda ($0c),y			lda 	(IFR0),y
.143f	aa		tax				tax
.1440	b2 0c		lda ($0c)			lda 	(IFR0)
.1442	86 0d		stx $0d				stx 	IFR0+IM1
.1444	85 0c		sta $0c				sta 	IFR0+IM0
.1446	7a		ply				ply
.1447	18		clc				clc
.1448	60		rts				rts
.1449					_ETVDereferenceString:
.1449	4c 28 11	jmp $1128		jmp	ErrorV_unimplemented
.144c					_ETVNotReference:
.144c	60		rts				rts
.144d					EXPTermR0:
.144d	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get next token/element
.144f	30 10		bmi $1461			bmi 	_ETMIsUnaryOrMinus 			; if it's a token, it's a unary function, maybe -
.1451	c8		iny				iny 								; consume element
.1452	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.1454	b0 08		bcs $145e			bcs 	_ETMIdentifier
.1456	20 85 14	jsr $1485			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.1459	20 b8 14	jsr $14b8			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.145c	18		clc				clc 								; return value
.145d	60		rts				rts
.145e					_ETMIdentifier:
.145e	4c ec 1e	jmp $1eec			jmp 	VARCheckSimple 				; check simple variables A-Z
.1461					_ETMIsUnaryOrMinus:
.1461	c8		iny				iny 								; consume element
.1462	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.1464	d0 0a		bne $1470			bne 	_ETMCheckUnary
.1466	20 28 14	jsr $1428			jsr 	EXPTermValueR0 				; get a term to negate
.1469	a2 0c		ldx #$0c			ldx 	#IFR0 						; and negate it
.146b	20 3d 25	jsr $253d			jsr 	IFloatNegate
.146e	18		clc				clc
.146f	60		rts				rts
.1470					_ETMCheckUnary:
.1470	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.1472	90 0e		bcc $1482			bcc 	_ETMUnarySyntax
.1474	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.1476	b0 0a		bcs $1482			bcs 	_ETMUnarySyntax
.1478	0a		asl a				asl 	a
.1479	aa		tax				tax
.147a	20 7f 14	jsr $147f			jsr 	_ETMCallUnaryFunction
.147d	18		clc				clc
.147e	60		rts				rts
.147f					_ETMCallUnaryFunction:
.147f	7c b6 18	jmp ($18b6,x)			jmp 	(VectorTable,x)
.1482					_ETMUnarySyntax:
.1482	4c ea 10	jmp $10ea		jmp	ErrorV_syntax
.1485					EXPExtractTokenisedInteger:
.1485	85 0c		sta $0c				sta 	IFR0+IM0 					; initial value in IM0
.1487	64 0f		stz $0f				stz 	IFR0+IExp
.1489	64 0d		stz $0d				stz 	IFR0+IM1
.148b	64 0e		stz $0e				stz 	IFR0+IM2
.148d					_ETMConstant:
.148d	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; what follows.
.148f	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.1491	b0 24		bcs $14b7			bcs 	_ETMCExit 					; no.
.1493	a6 0e		ldx $0e				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.1495	a5 0d		lda $0d				lda 	IFR0+IM1
.1497	85 0e		sta $0e				sta 	IFR0+IM2
.1499	a5 0c		lda $0c				lda 	IFR0+IM0
.149b	85 0d		sta $0d				sta 	IFR0+IM1
.149d	64 0c		stz $0c				stz 	IFR0+IM0
.149f	8a		txa				txa
.14a0	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.14a1	66 0e		ror $0e				ror 	IFR0+IM2
.14a3	66 0d		ror $0d				ror 	IFR0+IM1
.14a5	66 0c		ror $0c				ror 	IFR0+IM0
.14a7	4a		lsr a				lsr 	a
.14a8	66 0e		ror $0e				ror 	IFR0+IM2
.14aa	66 0d		ror $0d				ror 	IFR0+IM1
.14ac	66 0c		ror $0c				ror 	IFR0+IM0
.14ae	a5 0c		lda $0c				lda 	IFR0+IM0 					; LSB in.
.14b0	11 1c		ora ($1c),y			ora 	(codePtr),y
.14b2	85 0c		sta $0c				sta 	IFR0+IM0
.14b4	c8		iny				iny 								; consume, loop back
.14b5	80 d6		bra $148d			bra 	_ETMConstant
.14b7					_ETMCExit:
.14b7	60		rts				rts
.14b8					EXPCheckDecimalFollows:
.14b8	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; check for decimal
.14ba	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.14bc	d0 19		bne $14d7			bne 	_ETMCDExit
.14be	c8		iny				iny 								; consume token.
.14bf	b1 1c		lda ($1c),y			lda 	(codePtr),y 				; get count
.14c1	5a		phy				phy									; save current position
.14c2	48		pha				pha 								; save count of chars.
.14c3	38		sec				sec 								; address into YX : y + codePtr+1
.14c4	98		tya				tya
.14c5	65 1c		adc $1c				adc 	codePtr
.14c7	aa		tax				tax
.14c8	a5 1d		lda $1d				lda 	codePtr+1
.14ca	69 00		adc #$00			adc 	#0
.14cc	a8		tay				tay
.14cd	68		pla				pla 								; get count.
.14ce	20 d6 23	jsr $23d6			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.14d1	7a		ply				ply 								; go to next token.
.14d2	98		tya				tya
.14d3	38		sec				sec
.14d4	71 1c		adc ($1c),y			adc 	(codePtr),y
.14d6	a8		tay				tay
.14d7					_ETMCDExit:
.14d7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.14d8					EXPUnaryAbs:
.14d8	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.14db	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14de	20 76 21	jsr $2176			jsr 	IFloatAbsoluteR0
.14e1	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.14e2					EXPUnaryAsc:
.14e2	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.14e5	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14e8	b2 1e		lda ($1e)			lda 	(zTemp0) 						; length 0 ?
.14ea	f0 06		beq $14f2			beq 	_EXAZero 						; if so return 0
.14ec	5a		phy				phy 									; otherwise get first character
.14ed	a0 01		ldy #$01			ldy 	#1
.14ef	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.14f1	7a		ply				ply
.14f2					_EXAZero:
.14f2	a2 0c		ldx #$0c			ldx 	#IFR0
.14f4	20 34 25	jsr $2534			jsr 	IFloatSetByte
.14f7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.14f8					EXPUnaryChr:
.14f8	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; expr
.14fb	48		pha				pha 									; push on stack
.14fc	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.14ff	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.1501	20 aa 1e	jsr $1eaa			jsr 	StringTempAllocate
.1504	68		pla				pla
.1505	20 df 1e	jsr $1edf			jsr 	StringTempWrite
.1508	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1509					EXPUnaryDec:
.1509	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.150c	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.150f	5a		phy				phy
.1510	a2 0c		ldx #$0c			ldx 	#IFR0 							; zero the result
.1512	20 32 25	jsr $2532			jsr 	IFloatSetZero
.1515	b2 1e		lda ($1e)			lda 	(zTemp0)						; read the length to X
.1517	f0 3b		beq $1554			beq 	_EUDError 						; empty string
.1519	aa		tax				tax
.151a	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.151c					_EUDLoop:
.151c	b1 1e		lda ($1e),y			lda 	(zTemp0),y 						; get next
.151e	c9 61		cmp #$61			cmp 	#"a" 							; l/c -> u/c
.1520	90 02		bcc $1524			bcc 	_EUDNoCase
.1522	e9 20		sbc #$20			sbc 	#$20
.1524					_EUDNoCase:
.1524	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.1526	90 2c		bcc $1554			bcc 	_EUDError
.1528	c9 3a		cmp #$3a			cmp 	#'9'+1
.152a	90 0a		bcc $1536			bcc 	_EUDOkay
.152c	c9 41		cmp #$41			cmp 	#'A'							; check A-F
.152e	90 24		bcc $1554			bcc 	_EUDError
.1530	c9 47		cmp #$47			cmp 	#'F'+1
.1532	b0 20		bcs $1554			bcs 	_EUDError
.1534	e9 06		sbc #$06			sbc 	#6 								; hex adjust
.1536					_EUDOkay:
.1536	29 0f		and #$0f			and 	#15 							; make constant
.1538	da		phx				phx
.1539	48		pha				pha
.153a	a2 0c		ldx #$0c			ldx 	#IFR0 							; multiply R0 x 16
.153c	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.153f	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1542	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1545	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1548	68		pla				pla 									; pop constant and OR in
.1549	fa		plx				plx
.154a	05 0c		ora $0c				ora 	IFR0+IM0
.154c	85 0c		sta $0c				sta 	IFR0+IM0
.154e	c8		iny				iny 									; next
.154f	ca		dex				dex
.1550	d0 ca		bne $151c			bne 	_EUDLoop
.1552	7a		ply				ply
.1553	60		rts				rts
.1554					_EUDError:
.1554	4c 0a 11	jmp $110a		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.1557					EXPUnaryInlineDec:
.1557	4c ea 10	jmp $10ea		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dollar.asm

.155a					EXPUnaryNull:
.155a	20 28 14	jsr $1428			jsr 	EXPTermValueR0
.155d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.155e					EXPUnaryFrac:
.155e	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.1561	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.1564	20 dc 21	jsr $21dc			jsr 	IFloatFractionalR0
.1567	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.1568					EXPUnaryInt:
.1568	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.156b	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.156e	20 32 22	jsr $2232			jsr 	IFloatIntegerR0
.1571	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1572					EXPUnaryLen:
.1572	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.1575	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.1578	b2 1e		lda ($1e)			lda 	(zTemp0)
.157a	a2 0c		ldx #$0c			ldx 	#IFR0
.157c	20 34 25	jsr $2534			jsr 	IFloatSetByte
.157f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.1580					EXPUnaryParenthesis:
.1580	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.1583	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.1586	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1587					EXPUnaryRnd:
.1587	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 				; number to R0
.158a	20 15 12	jsr $1215			jsr 	ERRCheckRParen 				; )
.158d	a2 0c		ldx #$0c			ldx 	#IFR0
.158f	20 a6 15	jsr $15a6			jsr 	EXPLoadInRandom
.1592	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it work.
.1594	85 0f		sta $0f				sta 	IFR0+IExp
.1596	60		rts				rts
.1597					ExpUnaryRand:
.1597	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger 				; integer to R0
.159a	20 15 12	jsr $1215			jsr 	ERRCheckRParen 				; )
.159d	a2 10		ldx #$10			ldx 	#IFR1 						; random to R1
.159f	20 a6 15	jsr $15a6			jsr 	EXPLoadInRandom
.15a2	20 a3 20	jsr $20a3			jsr 	IFloatModulusInteger 		; calculate mod r1,r2
.15a5	60		rts				rts
.15a6					EXPLoadInRandom:
.15a6	20 32 25	jsr $2532			jsr 	IFloatSetZero
.15a9	20 bb 15	jsr $15bb			jsr 	EXPRandom32
.15ac	95 00		sta $00,x			sta 	IM0,x
.15ae	20 bb 15	jsr $15bb			jsr 	EXPRandom32
.15b1	95 01		sta $01,x			sta 	IM1,x
.15b3	20 bb 15	jsr $15bb			jsr 	EXPRandom32
.15b6	29 7f		and #$7f			and 	#$7F
.15b8	95 02		sta $02,x			sta 	IM2,x
.15ba	60		rts				rts
.15bb					EXPRandom32:
.15bb	5a		phy				phy
.15bc	a0 08		ldy #$08			ldy 	#8
.15be	ad 3c 03	lda $033c			lda 	EXPSeed+0
.15c1	0d 3d 03	ora $033d			ora 	EXPSeed+1
.15c4	0d 3e 03	ora $033e			ora 	EXPSeed+2
.15c7	0d 3f 03	ora $033f			ora 	EXPSeed+3
.15ca	d0 08		bne $15d4			bne 	_EXPRNoReset
.15cc	ee 3c 03	inc $033c			inc 	EXPSeed+0
.15cf	a0 10		ldy #$10			ldy 	#16
.15d1	8c 3f 03	sty $033f			sty 	EXPSeed+3
.15d4					_EXPRNoReset:
.15d4	ad 3c 03	lda $033c			lda 	EXPSeed+0
.15d7					_EXPRLoop:
.15d7	0a		asl a				asl		a
.15d8	2e 3d 03	rol $033d			rol 	EXPSeed+1
.15db	2e 3e 03	rol $033e			rol 	EXPSeed+2
.15de	2e 3f 03	rol $033f			rol 	EXPSeed+3
.15e1	90 02		bcc $15e5			bcc 	_EXPRNoEOR
.15e3	49 c5		eor #$c5			eor 	#$C5
.15e5					_EXPRNoEOR:
.15e5	88		dey				dey
.15e6	d0 ef		bne $15d7			bne 	_EXPRLoop
.15e8	8d 3c 03	sta $033c			sta 	EXPSeed+0
.15eb	7a		ply				ply
.15ec	60		rts				rts
.033c					EXPSeed:
>033c							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.15ed					EXPUnarySgn:
.15ed	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.15f0	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.15f3	a2 10		ldx #$10			ldx 	#IFR1 							; copy to R1
.15f5	20 d4 24	jsr $24d4			jsr 	IFloatCopyToRegister
.15f8	a2 0c		ldx #$0c			ldx 	#IFR0 							; R0 = 0
.15fa	20 32 25	jsr $2532			jsr 	IFloatSetZero
.15fd	a2 10		ldx #$10			ldx 	#IFR1
.15ff	20 00 22	jsr $2200			jsr 	IFloatCompare 					; compare R1 vs 0.
.1602	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1603					EXPUnarySqr:
.1603	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; number to R0
.1606	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.1609	20 7e 21	jsr $217e			jsr 	IFloatSquareRootR0 				; square root.
.160c	b0 01		bcs $160f			bcs 	_EUSValue
.160e	60		rts				rts
.160f					_EUSValue:
.160f	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.1612					EXPUnaryHex:
.1612	20 f6 13	jsr $13f6			jsr 	EXPEvalInteger 					; expr
.1615	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.1618	5a		phy				phy
.1619	a9 10		lda #$10			lda 	#16
.161b	20 d3 22	jsr $22d3			jsr 	IFloatIntegerToStringR0
.161e	80 0a		bra $162a			bra 	EUSMain
.1620					EXPUnaryStr:
.1620	20 eb 13	jsr $13eb			jsr 	EXPEvalNumber 					; expr
.1623	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.1626	5a		phy				phy
.1627	20 2f 23	jsr $232f			jsr 	IFloatFloatToStringR0 			; convert to string
.162a					EUSMain:
.162a	b0 18		bcs $1644			bcs 	_EUSError
.162c	86 1e		stx $1e				stx 	zTemp0 							; save string address
.162e	84 1f		sty $1f				sty 	zTemp0+1
.1630	48		pha				pha 									; save count
.1631	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.1633	20 aa 1e	jsr $1eaa			jsr 	StringTempAllocate
.1636	fa		plx				plx 									; count in X
.1637	a0 00		ldy #$00			ldy 	#0
.1639					_EUSCopy:
.1639	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.163b	c8		iny				iny
.163c	20 df 1e	jsr $1edf			jsr 	StringTempWrite
.163f	ca		dex				dex
.1640	d0 f7		bne $1639			bne	 	_EUSCopy
.1642	7a		ply				ply
.1643	60		rts				rts
.1644					_EUSError:
.1644	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.1647					EXPUnaryInlineString:
.1647	18		clc				clc 								; physical address -> IM0,1
.1648	98		tya				tya
.1649	65 1c		adc $1c				adc 	codePtr
.164b	85 0c		sta $0c				sta 	IFR0+IM0
.164d	a5 1d		lda $1d				lda 	codePtr+1
.164f	69 00		adc #$00			adc 	#0
.1651	85 0d		sta $0d				sta 	IFR0+IM1
.1653	64 0e		stz $0e				stz 	IFR0+IM2 					; fill in rest
.1655	a9 80		lda #$80			lda 	#$80
.1657	85 0f		sta $0f				sta 	IFR0+IExp
.1659	98		tya				tya	 								; skip over it.
.165a	38		sec				sec
.165b	71 1c		adc ($1c),y			adc 	(codePtr),y
.165d	a8		tay				tay
.165e	60		rts				rts
.165f					_EXPUISRange:
.165f	4c fa 10	jmp $10fa		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.1662					EXPUnaryLeft:
.1662	20 a8 16	jsr $16a8			jsr 	EXPCommonStart 					; <string>,
.1665	48		pha				pha 									; save string address on stack
.1666	da		phx				phx
.1667	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.1669	48		pha				pha
.166a	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; characters to do
.166d	80 44		bra $16b3			bra 	EXPSubstringCommon
.166f					EXPUnaryRight:
.166f	20 a8 16	jsr $16a8			jsr 	EXPCommonStart 					; <string>,
.1672	48		pha				pha 									; save string address on stack
.1673	da		phx				phx
.1674	b2 0c		lda ($0c)			lda 	(IFR0) 							; the string length => stack.
.1676	48		pha				pha
.1677	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; characters to do
.167a	85 1e		sta $1e				sta 	zTemp0 							; calculate length - required, start point.
.167c	68		pla				pla
.167d	38		sec				sec
.167e	e5 1e		sbc $1e				sbc 	zTemp0
.1680	b0 02		bcs $1684			bcs 	_EUROffLeft
.1682	a9 00		lda #$00			lda 	#0
.1684					_EUROffLeft:
.1684	48		pha				pha 									; start pos
.1685	a9 ff		lda #$ff			lda 	#255
.1687	80 2a		bra $16b3			bra 	EXPSubstringCommon
.1689					EXPUnaryMid:
.1689	20 a8 16	jsr $16a8			jsr 	EXPCommonStart 					; <string>,
.168c	48		pha				pha 									; save string address on stack
.168d	da		phx				phx
.168e	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; characters start
.1691	f0 12		beq $16a5			beq 	_EUSError 						; 1 is left
.1693	3a		dec a				dec 	a 								; zero based.
.1694	48		pha				pha
.1695	b1 1c		lda ($1c),y			lda 	(codePtr),y 					; comma follows
.1697	c9 99		cmp #$99			cmp 	#PR_COMMA
.1699	f0 04		beq $169f			beq 	_EUMLength 						; if so m is provided
.169b	a9 ff		lda #$ff			lda 	#255 							; default m
.169d	80 14		bra $16b3			bra 	EXPSubstringCommon
.169f					_EUMLength:
.169f	c8		iny				iny 									; consume comma
.16a0	20 09 14	jsr $1409			jsr 	EXPEvalInteger8 				; characters to do
.16a3	80 0e		bra $16b3			bra 	EXPSubstringCommon
.16a5					_EUSError:
.16a5	4c 0a 11	jmp $110a		jmp	ErrorV_value
.16a8					EXPCommonStart:
.16a8	20 15 14	jsr $1415			jsr 	EXPEvalString
.16ab	20 1d 12	jsr $121d			jsr 	ERRCheckComma
.16ae	a5 0c		lda $0c				lda 	IFR0+IM0
.16b0	a6 0d		ldx $0d				ldx 	IFR0+IM1
.16b2	60		rts				rts
.16b3					EXPSubstringCommon:
.16b3	85 20		sta $20				sta 	zTemp1 							; count to do in zTemp1.
.16b5	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; check right bracket.
.16b8	68		pla				pla 									; start position
.16b9	85 21		sta $21				sta 	zTemp1+1 						; save in zTemp1+1
.16bb	fa		plx				plx 									; get string address to zTemp2.
.16bc	86 23		stx $23				stx 	zTemp2+1
.16be	68		pla				pla
.16bf	85 22		sta $22				sta 	zTemp2
.16c1	38		sec				sec 									; length - start is the max count of chars
.16c2	b2 22		lda ($22)			lda 	(zTemp2)
.16c4	e5 21		sbc $21				sbc 	zTemp1+1
.16c6	c5 20		cmp $20				cmp 	zTemp1 							; if available < count
.16c8	b0 02		bcs $16cc			bcs 	_EXPSSNoTrim
.16ca	85 20		sta $20				sta 	zTemp1 							; update count with available
.16cc					_EXPSSNoTrim:
.16cc	a5 20		lda $20				lda 	zTemp1 							; chars required.
.16ce	20 aa 1e	jsr $1eaa			jsr 	StringTempAllocate 				; allocate memory for it.
.16d1	a5 20		lda $20				lda 	zTemp1 							; zero length string
.16d3	f0 15		beq $16ea			beq 	_EXPSSExit
.16d5	a5 21		lda $21				lda 	zTemp1+1 						; if length >= start exit
.16d7	d2 22		cmp ($22)			cmp 	(zTemp2)
.16d9	b0 0f		bcs $16ea			bcs 	_EXPSSExit
.16db	5a		phy				phy
.16dc	a4 21		ldy $21				ldy 	zTemp1+1 						; start position
.16de	c8		iny				iny 									; +1 for the length byte
.16df					_EXPSSCopy:
.16df	b1 22		lda ($22),y			lda 	(zTemp2),y
.16e1	20 df 1e	jsr $1edf			jsr 	StringTempWrite
.16e4	c8		iny				iny
.16e5	c6 20		dec $20				dec 	zTemp1
.16e7	d0 f6		bne $16df			bne 	_EXPSSCopy
.16e9	7a		ply				ply
.16ea					_EXPSSExit:
.16ea	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.16eb					EXPUnaryVal:
.16eb	20 15 14	jsr $1415			jsr 	EXPEvalString 					; string to R0, zTemp0
.16ee	20 15 12	jsr $1215			jsr 	ERRCheckRParen 					; )
.16f1	5a		phy				phy
.16f2	18		clc				clc
.16f3	a5 1e		lda $1e				lda		zTemp0 							; point XY to the text
.16f5	69 01		adc #$01			adc 	#1
.16f7	aa		tax				tax
.16f8	a5 1f		lda $1f				lda 	zTemp0+1
.16fa	69 00		adc #$00			adc 	#0
.16fc	a8		tay				tay
.16fd	b2 1e		lda ($1e)			lda 	(zTemp0) 						; get length.
.16ff	20 96 23	jsr $2396			jsr 	IFloatStringToFloatR0 			; do conversion
.1702	b0 02		bcs $1706			bcs 	_EUVError
.1704	7a		ply				ply
.1705	60		rts				rts
.1706					_EUVError:
.1706	4c 0a 11	jmp $110a		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1709					BinaryPrecedence:
>1709	02					.byte	 2	; $ef =
>170a	02					.byte	 2	; $f0 <>
>170b	02					.byte	 2	; $f1 <=
>170c	02					.byte	 2	; $f2 <
>170d	02					.byte	 2	; $f3 >=
>170e	02					.byte	 2	; $f4 >
>170f	01					.byte	 1	; $f5 XOR
>1710	01					.byte	 1	; $f6 OR
>1711	01					.byte	 1	; $f7 AND
>1712	04					.byte	 4	; $f8 DIV
>1713	04					.byte	 4	; $f9 MOD
>1714	04					.byte	 4	; $fa <<
>1715	04					.byte	 4	; $fb >>
>1716	04					.byte	 4	; $fc /
>1717	04					.byte	 4	; $fd *
>1718	03					.byte	 3	; $fe -
>1719	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.171a					StandardTokens:
>171a	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1721	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1727	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>172d	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1732	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1735	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>173b	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>173e	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1743	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1748	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1750	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1754	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1759	00					.byte	$00                                     	; $8c [[end]]
>175a	00					.byte	$00                                     	; $8d [[shift]]
>175b	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1760	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1765	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1768	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>176d	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1771	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1777	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>177d	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1782	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1786	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>178a	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>178f	01 2c					.byte	$01,$2c                                 	; $99 ,
>1791	01 3b					.byte	$01,$3b                                 	; $9a ;
>1793	01 3a					.byte	$01,$3a                                 	; $9b :
>1795	01 27					.byte	$01,$27                                 	; $9c '
>1797	01 29					.byte	$01,$29                                 	; $9d )
>1799	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $9e dim
>179d	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $9f clear
>17a3	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $a0 new
>17a7	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $a1 run
>17ab	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $a2 stop
>17b0	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $a3 end
>17b4	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $a4 assert
>17bb	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $a5 list
>17c0	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $a6 save
>17c5	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $a7 load
>17ca	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $a8 poke
>17cf	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $a9 doke
>17d4	00					.byte	0											; $aa
>17d5	00					.byte	0											; $ab
>17d6	00					.byte	0											; $ac
>17d7	00					.byte	0											; $ad
>17d8	00					.byte	0											; $ae
>17d9	00					.byte	0											; $af
>17da	00					.byte	0											; $b0
>17db	00					.byte	0											; $b1
>17dc	00					.byte	0											; $b2
>17dd	00					.byte	0											; $b3
>17de	00					.byte	0											; $b4
>17df	00					.byte	0											; $b5
>17e0	00					.byte	0											; $b6
>17e1	00					.byte	0											; $b7
>17e2	00					.byte	0											; $b8
>17e3	00					.byte	0											; $b9
>17e4	00					.byte	0											; $ba
>17e5	00					.byte	0											; $bb
>17e6	00					.byte	0											; $bc
>17e7	00					.byte	0											; $bd
>17e8	00					.byte	0											; $be
>17e9	00					.byte	0											; $bf
>17ea	00					.byte	0											; $c0
>17eb	00					.byte	0											; $c1
>17ec	00					.byte	0											; $c2
>17ed	00					.byte	0											; $c3
>17ee	00					.byte	0											; $c4
>17ef	00					.byte	0											; $c5
>17f0	00					.byte	0											; $c6
>17f1	00					.byte	0											; $c7
>17f2	00					.byte	0											; $c8
>17f3	00					.byte	0											; $c9
>17f4	00					.byte	0											; $ca
>17f5	00					.byte	0											; $cb
>17f6	00					.byte	0											; $cc
>17f7	00					.byte	0											; $cd
>17f8	00					.byte	0											; $ce
>17f9	00					.byte	0											; $cf
>17fa	00					.byte	0											; $d0
>17fb	00					.byte	0											; $d1
>17fc	00					.byte	0											; $d2
>17fd	00					.byte	0											; $d3
>17fe	00					.byte	0											; $d4
>17ff	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1805	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>180b	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1813	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>181a	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1820	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1826	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>182b	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1830	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1835	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>183a	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>183f	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1845	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>184a	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1852	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1859	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>185e	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1863	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1869	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>186e	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1874	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1879	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>187f	01 28					.byte	$01,$28                                 	; $eb (
>1881	01 24					.byte	$01,$24                                 	; $ec $
>1883	00					.byte	$00                                     	; $ed [[decimal]]
>1884	00					.byte	$00                                     	; $ee [[string]]
>1885	01 3d					.byte	$01,$3d                                 	; $ef =
>1887	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>188a	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>188d	01 3c					.byte	$01,$3c                                 	; $f2 <
>188f	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1892	01 3e					.byte	$01,$3e                                 	; $f4 >
>1894	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1898	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>189b	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>189f	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>18a3	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>18a7	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>18aa	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>18ad	01 2f					.byte	$01,$2f                                 	; $fc /
>18af	01 2a					.byte	$01,$2a                                 	; $fd *
>18b1	01 2d					.byte	$01,$2d                                 	; $fe -
>18b3	01 2b					.byte	$01,$2b                                 	; $ff +
>18b5	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.18b6					VectorTable:
>18b6	10 26					.word	NotImplemented           ; $80 REPEAT
>18b8	10 26					.word	NotImplemented           ; $81 UNTIL
>18ba	10 26					.word	NotImplemented           ; $82 WHILE
>18bc	10 26					.word	NotImplemented           ; $83 WEND
>18be	10 26					.word	NotImplemented           ; $84 IF
>18c0	10 26					.word	NotImplemented           ; $85 ENDIF
>18c2	10 26					.word	NotImplemented           ; $86 DO
>18c4	10 26					.word	NotImplemented           ; $87 LOOP
>18c6	10 26					.word	NotImplemented           ; $88 PROC
>18c8	10 26					.word	NotImplemented           ; $89 ENDPROC
>18ca	10 26					.word	NotImplemented           ; $8a FOR
>18cc	10 26					.word	NotImplemented           ; $8b NEXT
>18ce	a9 10					.word	RUNEndOfLine             ; $8c [[END]]
>18d0	e1 10					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>18d2	10 26					.word	NotImplemented           ; $8e ELSE
>18d4	1f 10					.word	NoExec01                 ; $8f THEN
>18d6	1f 10					.word	NoExec02                 ; $90 TO
>18d8	1f 10					.word	NoExec03                 ; $91 STEP
>18da	10 26					.word	NotImplemented           ; $92 LET
>18dc	22 10					.word	Command_Print            ; $93 PRINT
>18de	10 26					.word	NotImplemented           ; $94 INPUT
>18e0	10 26					.word	NotImplemented           ; $95 CALL
>18e2	10 26					.word	NotImplemented           ; $96 SYS
>18e4	90 10					.word	Command_REM              ; $97 REM
>18e6	10 26					.word	NotImplemented           ; $98 EXIT
>18e8	1f 10					.word	NoExec04                 ; $99 ,
>18ea	1f 10					.word	NoExec05                 ; $9a ;
>18ec	1f 10					.word	NoExec06                 ; $9b :
>18ee	90 10					.word	Command_REM2             ; $9c '
>18f0	1f 10					.word	NoExec07                 ; $9d )
>18f2	10 26					.word	NotImplemented           ; $9e DIM
>18f4	1b 10					.word	Command_CLEAR            ; $9f CLEAR
>18f6	87 10					.word	Command_NEW              ; $a0 NEW
>18f8	9d 10					.word	Command_RUN              ; $a1 RUN
>18fa	e7 10					.word	Command_STOP             ; $a2 STOP
>18fc	e4 10					.word	Command_END              ; $a3 END
>18fe	0d 10					.word	Command_ASSERT           ; $a4 ASSERT
>1900	10 26					.word	NotImplemented           ; $a5 LIST
>1902	10 26					.word	NotImplemented           ; $a6 SAVE
>1904	10 26					.word	NotImplemented           ; $a7 LOAD
>1906	10 26					.word	NotImplemented           ; $a8 POKE
>1908	10 26					.word	NotImplemented           ; $a9 DOKE
>190a	10 26					.word	NotImplemented           ; $aa
>190c	10 26					.word	NotImplemented           ; $ab
>190e	10 26					.word	NotImplemented           ; $ac
>1910	10 26					.word	NotImplemented           ; $ad
>1912	10 26					.word	NotImplemented           ; $ae
>1914	10 26					.word	NotImplemented           ; $af
>1916	10 26					.word	NotImplemented           ; $b0
>1918	10 26					.word	NotImplemented           ; $b1
>191a	10 26					.word	NotImplemented           ; $b2
>191c	10 26					.word	NotImplemented           ; $b3
>191e	10 26					.word	NotImplemented           ; $b4
>1920	10 26					.word	NotImplemented           ; $b5
>1922	10 26					.word	NotImplemented           ; $b6
>1924	10 26					.word	NotImplemented           ; $b7
>1926	10 26					.word	NotImplemented           ; $b8
>1928	10 26					.word	NotImplemented           ; $b9
>192a	10 26					.word	NotImplemented           ; $ba
>192c	10 26					.word	NotImplemented           ; $bb
>192e	10 26					.word	NotImplemented           ; $bc
>1930	10 26					.word	NotImplemented           ; $bd
>1932	10 26					.word	NotImplemented           ; $be
>1934	10 26					.word	NotImplemented           ; $bf
>1936	10 26					.word	NotImplemented           ; $c0
>1938	10 26					.word	NotImplemented           ; $c1
>193a	10 26					.word	NotImplemented           ; $c2
>193c	10 26					.word	NotImplemented           ; $c3
>193e	10 26					.word	NotImplemented           ; $c4
>1940	10 26					.word	NotImplemented           ; $c5
>1942	10 26					.word	NotImplemented           ; $c6
>1944	10 26					.word	NotImplemented           ; $c7
>1946	10 26					.word	NotImplemented           ; $c8
>1948	10 26					.word	NotImplemented           ; $c9
>194a	10 26					.word	NotImplemented           ; $ca
>194c	10 26					.word	NotImplemented           ; $cb
>194e	10 26					.word	NotImplemented           ; $cc
>1950	10 26					.word	NotImplemented           ; $cd
>1952	10 26					.word	NotImplemented           ; $ce
>1954	10 26					.word	NotImplemented           ; $cf
>1956	10 26					.word	NotImplemented           ; $d0
>1958	10 26					.word	NotImplemented           ; $d1
>195a	10 26					.word	NotImplemented           ; $d2
>195c	10 26					.word	NotImplemented           ; $d3
>195e	10 26					.word	NotImplemented           ; $d4
>1960	10 26					.word	NotImplemented           ; $d5 DEEK(
>1962	10 26					.word	NotImplemented           ; $d6 PEEK(
>1964	6f 16					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1966	62 16					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1968	89 16					.word	EXPUnaryMid              ; $d9 MID$(
>196a	20 16					.word	EXPUnaryStr              ; $da STR$(
>196c	eb 16					.word	EXPUnaryVal              ; $db VAL(
>196e	ed 15					.word	EXPUnarySgn              ; $dc SGN(
>1970	d8 14					.word	EXPUnaryAbs              ; $dd ABS(
>1972	72 15					.word	EXPUnaryLen              ; $de LEN(
>1974	03 16					.word	EXPUnarySqr              ; $df SQR(
>1976	f8 14					.word	EXPUnaryChr              ; $e0 CHR$(
>1978	e2 14					.word	EXPUnaryAsc              ; $e1 ASC(
>197a	10 26					.word	NotImplemented           ; $e2 INKEY$(
>197c	10 26					.word	NotImplemented           ; $e3 EVENT(
>197e	10 26					.word	NotImplemented           ; $e4 TIME
>1980	68 15					.word	EXPUnaryInt              ; $e5 INT(
>1982	5e 15					.word	EXPUnaryFrac             ; $e6 FRAC(
>1984	09 15					.word	EXPUnaryDec              ; $e7 DEC(
>1986	12 16					.word	EXPUnaryHex              ; $e8 HEX$(
>1988	87 15					.word	EXPUnaryRnd              ; $e9 RND(
>198a	97 15					.word	ExpUnaryRand             ; $ea RAND(
>198c	80 15					.word	EXPUnaryParenthesis      ; $eb (
>198e	5a 15					.word	EXPUnaryNull             ; $ec $
>1990	57 15					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1992	47 16					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1994	e8 12					.word	EXPCompareEqual          ; $ef =
>1996	03 13					.word	EXPCompareNotEqual       ; $f0 <>
>1998	0c 13					.word	EXPCompareLessEqual      ; $f1 <=
>199a	f1 12					.word	EXPCompareLess           ; $f2 <
>199c	15 13					.word	EXPCompareGreaterEqual   ; $f3 >=
>199e	fa 12					.word	EXPCompareGreater        ; $f4 >
>19a0	95 12					.word	EXPBinXor                ; $f5 XOR
>19a2	89 12					.word	EXPBinOr                 ; $f6 OR
>19a4	7d 12					.word	EXPBinAnd                ; $f7 AND
>19a6	55 12					.word	EXPBinIDiv               ; $f8 DIV
>19a8	66 12					.word	EXPBinIMod               ; $f9 MOD
>19aa	60 13					.word	EXPBinLeft               ; $fa <<
>19ac	68 13					.word	EXPBinRight              ; $fb >>
>19ae	49 12					.word	EXPBinFDiv               ; $fc /
>19b0	40 12					.word	EXPBinMul                ; $fd *
>19b2	37 12					.word	EXPBinSub                ; $fe -
>19b4	2e 12					.word	EXPBinAdd                ; $ff +

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.19b6					TOKDetokenise:
.19b6	86 22		stx $22				stx 	zTemp2 						; save tokenised code in zTemp2
.19b8	84 23		sty $23				sty 	zTemp2+1
.19ba	9c 42 03	stz $0342			stz		TOKLastCharacter 			; clear last character
.19bd					_TOKDLoop:
.19bd	20 ec 19	jsr $19ec			jsr 	TOKDGet 					; get next
.19c0	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.19c2	f0 26		beq $19ea			beq 	_TOKDExit
.19c4	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.19c6	f0 1d		beq $19e5			beq 	_TOKDDataItem
.19c8	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.19ca	f0 19		beq $19e5			beq 	_TOKDDataItem
.19cc	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.19ce	10 05		bpl $19d5			bpl 	_TOKDNotToken
.19d0	20 b4 1a	jsr $1ab4			jsr 	TOKDToken 					; token to text.
.19d3	80 e8		bra $19bd			bra 	_TOKDLoop
.19d5					_TOKDNotToken:
.19d5	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.19d7	90 05		bcc $19de			bcc 	_TOKDNotIdentifier
.19d9	20 27 1a	jsr $1a27			jsr 	TOKDIdentifier
.19dc	80 df		bra $19bd			bra 	_TOKDLoop
.19de					_TOKDNotIdentifier:
.19de	a0 0a		ldy #$0a			ldy 	#10
.19e0	20 70 1a	jsr $1a70			jsr 	TOKDInteger
.19e3	80 d8		bra $19bd			bra 	_TOKDLoop
.19e5					_TOKDDataItem:
.19e5	20 02 1a	jsr $1a02			jsr 	TOKDDataItem
.19e8	80 d3		bra $19bd			bra 	_TOKDLoop
.19ea					_TOKDExit:
.19ea	18		clc				clc
.19eb	60		rts				rts
.19ec	b2 22		lda ($22)	TOKDGet:lda 	(zTemp2)
.19ee	e6 22		inc $22				inc 	zTemp2
.19f0	d0 02		bne $19f4			bne 	_TKDGExit
.19f2	e6 23		inc $23				inc 	zTemp2+1
.19f4					_TKDGExit:
.19f4	60		rts				rts
.19f5					TOKDOutput:
.19f5	8d 42 03	sta $0342			sta 	TOKLastCharacter
.19f8	6c 40 03	jmp ($0340)			jmp 	(TOKOutputMethod)
.19fb					TOKSetDetokeniseOutput:
.19fb	8e 40 03	stx $0340			stx 	TOKOutputMethod
.19fe	8c 41 03	sty $0341			sty 	TOKOutputMethod+1
.1a01	60		rts				rts
.0340					TOKOutputMethod:
>0340							.fill 	2
.0342					TOKLastCharacter:
>0342							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1a02					TOKDDataItem:
.1a02	a8		tay				tay 								; type in Y
.1a03	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1a05	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1a07	f0 02		beq $1a0b			beq 	_TOKDDIsString
.1a09	a9 2e		lda #$2e			lda 	#'.'
.1a0b					_TOKDDIsString:
.1a0b	20 f5 19	jsr $19f5			jsr 	TOKDOutput 					; dump it
.1a0e	20 ec 19	jsr $19ec			jsr 	TOKDGet 					; get length into X
.1a11	aa		tax				tax
.1a12					_TOKDDOutput:
.1a12	ca		dex				dex 								; are we complete
.1a13	30 08		bmi $1a1d			bmi 	_TOKDDEnd
.1a15	20 ec 19	jsr $19ec			jsr 	TOKDGet 					; get character and output it
.1a18	20 f5 19	jsr $19f5			jsr 	TOKDOutput
.1a1b	80 f5		bra $1a12			bra 	_TOKDDOutput
.1a1d					_TOKDDEnd:
.1a1d	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1a1f	d0 05		bne $1a26			bne 	_TOKDDNotString
.1a21	a9 22		lda #$22			lda 	#'"'
.1a23	20 f5 19	jsr $19f5			jsr 	TOKDOutput
.1a26					_TOKDDNotString:
.1a26	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1a27					TOKDIdentifier:
.1a27	a0 ff		ldy #$ff			ldy 	#$FF
.1a29	8c 43 03	sty $0343			sty 	TOKDIFirstChar
.1a2c					_TOKDLoop:
.1a2c	a8		tay				tay 								; token in Y
.1a2d	a9 2e		lda #$2e			lda 	#'.' 						; handle special cases.
.1a2f	c0 64		cpy #$64			cpy 	#$64
.1a31	f0 11		beq $1a44			beq 	_TOKDIOutput
.1a33	a9 5f		lda #$5f			lda 	#'_'
.1a35	c0 65		cpy #$65			cpy 	#$65
.1a37	f0 0b		beq $1a44			beq 	_TOKDIOutput
.1a39	98		tya				tya 								; handle a-z
.1a3a	18		clc				clc
.1a3b	69 21		adc #$21			adc	 	#$21
.1a3d	c0 5a		cpy #$5a			cpy 	#$5A
.1a3f	90 03		bcc $1a44			bcc 	_TOKDIOutput
.1a41	38		sec				sec 								; handle 0-9
.1a42	e9 4b		sbc #$4b			sbc 	#$4B
.1a44					_TOKDIOutput:
.1a44	2c 43 03	bit $0343			bit 	TOKDIFirstChar
.1a47	10 08		bpl $1a51			bpl 	_TOKDINoSpacing
.1a49	48		pha				pha
.1a4a	20 e6 1a	jsr $1ae6			jsr 	TOKDSpacing
.1a4d	9c 43 03	stz $0343			stz 	TOKDIFirstChar
.1a50	68		pla				pla
.1a51					_TOKDINoSpacing:
.1a51	20 f5 19	jsr $19f5			jsr 	TOKDOutput
.1a54	20 ec 19	jsr $19ec			jsr 	TOKDGet 					; get next token
.1a57	c9 7c		cmp #$7c			cmp 	#$7C
.1a59	90 d1		bcc $1a2c			bcc 	_TOKDLoop
.1a5b	f0 12		beq $1a6f			beq 	_TOKDIExit 					; it's a number, no tail.
.1a5d	4a		lsr a				lsr 	a 							; string ?
.1a5e	90 07		bcc $1a67			bcc 	_TOKDICheckArray
.1a60	48		pha				pha
.1a61	a9 24		lda #$24			lda 	#"$"
.1a63	20 f5 19	jsr $19f5			jsr 	TOKDOutput
.1a66	68		pla				pla
.1a67					_TOKDICheckArray:
.1a67	4a		lsr a				lsr 	a 							; array ?
.1a68	90 05		bcc $1a6f			bcc 	_TOKDIExit
.1a6a	a9 28		lda #$28			lda 	#"("
.1a6c	20 f5 19	jsr $19f5			jsr 	TOKDOutput
.1a6f					_TOKDIExit:
.1a6f	60		rts				rts
.0343					TOKDIFirstChar:
>0343							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1a70					TOKDInteger:
.1a70	5a		phy				phy 								; save base
.1a71	a2 0c		ldx #$0c			ldx 	#IFR0 						; set into R0
.1a73	20 34 25	jsr $2534			jsr 	IFloatSetByte
.1a76					_TOKDILoop:
.1a76	b2 22		lda ($22)			lda 	(zTemp2) 					; followed by a 00-3F
.1a78	c9 40		cmp #$40			cmp 	#$40
.1a7a	b0 1d		bcs $1a99			bcs 	_TOKDIHaveInteger
.1a7c	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 << 6
.1a7e	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1a81	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1a84	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1a87	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1a8a	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1a8d	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1a90	20 ec 19	jsr $19ec			jsr 	TOKDGet 					; OR byte in.
.1a93	05 0c		ora $0c				ora 	IFR0+IM0
.1a95	85 0c		sta $0c				sta 	IFR0+IM0
.1a97	80 dd		bra $1a76			bra 	_TOKDILoop
.1a99					_TOKDIHaveInteger:
.1a99	7a		ply				ply 								; restore base
.1a9a	98		tya				tya 								; base in A
.1a9b	20 d3 22	jsr $22d3			jsr 	IFloatIntegerToStringR0
.1a9e	86 1e		stx $1e				stx 	zTemp0
.1aa0	84 1f		sty $1f				sty 	zTemp0+1
.1aa2	b2 1e		lda ($1e)			lda 	(zTemp0)
.1aa4	20 e6 1a	jsr $1ae6			jsr 	TOKDSpacing 				; check spacing okay.
.1aa7	a0 00		ldy #$00			ldy 	#0 							; output buffer.
.1aa9					_TOKDOutput:
.1aa9	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1aab	20 f5 19	jsr $19f5			jsr 	TOKDOutput
.1aae	c8		iny				iny
.1aaf	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1ab1	d0 f6		bne $1aa9			bne 	_TOKDOutput
.1ab3	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1ab4					TOKDToken:
.1ab4	a2 1a		ldx #$1a			ldx 	#StandardTokens & $FF
.1ab6	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1ab8					_TOKDSearch:
.1ab8	86 1e		stx $1e				stx 	zTemp0 						; put table in zTemp0
.1aba	84 1f		sty $1f				sty 	zTemp0+1
.1abc	aa		tax				tax 								; token ID in X.
.1abd					_TOKDFind:
.1abd	ca		dex				dex 								; reached the start
.1abe	10 0d		bpl $1acd			bpl 	_TOKDFound
.1ac0	38		sec				sec 								; go to next entry
.1ac1	b2 1e		lda ($1e)			lda 	(zTemp0)
.1ac3	65 1e		adc $1e				adc 	zTemp0
.1ac5	85 1e		sta $1e				sta 	zTemp0
.1ac7	90 f4		bcc $1abd			bcc 	_TOKDFind
.1ac9	e6 1f		inc $1f				inc 	zTemp0+1
.1acb	80 f0		bra $1abd			bra 	_TOKDFind
.1acd					_TOKDFound:
.1acd	b2 1e		lda ($1e)			lda 	(zTemp0) 					; length to X
.1acf	f0 14		beq $1ae5			beq 	_TOKDExit
.1ad1	aa		tax				tax
.1ad2	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1ad4	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; check spacing
.1ad6	20 e6 1a	jsr $1ae6			jsr 	TOKDSpacing
.1ad9					_TOKDOutput:
.1ad9	b1 1e		lda ($1e),y			lda 	(zTemp0),y
.1adb	20 3d 1e	jsr $1e3d			jsr 	TOKToLower
.1ade	20 f5 19	jsr $19f5			jsr 	TOKDOutput
.1ae1	c8		iny				iny
.1ae2	ca		dex				dex
.1ae3	d0 f4		bne $1ad9			bne 	_TOKDOutput
.1ae5					_TOKDExit:
.1ae5	60		rts				rts
.1ae6					TOKDSpacing:
.1ae6	20 54 1e	jsr $1e54			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.1ae9	90 0d		bcc $1af8			bcc 	_TOKDSExit
.1aeb	ad 42 03	lda $0342			lda 	TOKLastCharacter			; and last character also alphanumeric
.1aee	20 54 1e	jsr $1e54			jsr 	TOKIsIdentifierElement
.1af1	90 05		bcc $1af8			bcc 	_TOKDSExit
.1af3	a9 20		lda #$20			lda 	#" " 						; we need a space.
.1af5	20 f5 19	jsr $19f5			jsr 	TOKDOutput
.1af8					_TOKDSExit:
.1af8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.1af9					PGMDeleteLine:
.1af9	20 ac 1b	jsr $1bac			jsr 	PGMEndProgram 				; end of program into zTemp0
.1afc	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1afe	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1b01	85 21		sta $21				sta 	zTemp1+1
.1b03					_PGMDLoop:
.1b03	b2 20		lda ($20)			lda 	(zTemp1) 					; finished, not found ?
.1b05	38		sec				sec
.1b06	f0 3a		beq $1b42			beq 	_PGMDExit
.1b08	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.1b0a	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b0c	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1b0f	d0 08		bne $1b19			bne 	_PGMDNext
.1b11	c8		iny				iny
.1b12	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b14	cd 39 02	cmp $0239			cmp 	TOKLineNumber+1
.1b17	f0 0d		beq $1b26			beq 	_PGMDDelete
.1b19					_PGMDNext:
.1b19	18		clc				clc
.1b1a	b2 20		lda ($20)			lda 	(zTemp1)
.1b1c	65 20		adc $20				adc 	zTemp1
.1b1e	85 20		sta $20				sta 	zTemp1
.1b20	90 e1		bcc $1b03			bcc 	_PGMDLoop
.1b22	e6 21		inc $21				inc 	zTemp1+1
.1b24	80 dd		bra $1b03			bra 	_PGMDLoop
.1b26					_PGMDDelete:
.1b26	b2 20		lda ($20)			lda 	(zTemp1) 					; offset to next in Y
.1b28	a8		tay				tay
.1b29					_PGMDCopy:
.1b29	b1 20		lda ($20),y			lda 	(zTemp1),y 					; copy down.
.1b2b	92 20		sta ($20)			sta 	(zTemp1)
.1b2d	a5 20		lda $20				lda 	zTemp1 						; reached the end ?
.1b2f	c5 1e		cmp $1e				cmp 	zTemp0
.1b31	d0 07		bne $1b3a			bne 	_PGMDNext2
.1b33	a5 21		lda $21				lda 	zTemp1+1
.1b35	c5 1f		cmp $1f				cmp 	zTemp0+1
.1b37	18		clc				clc
.1b38	f0 08		beq $1b42			beq 	_PGMDExit
.1b3a					_PGMDNext2:
.1b3a	e6 20		inc $20				inc 	zTemp1 						; advance pointer.
.1b3c	d0 eb		bne $1b29			bne 	_PGMDCopy
.1b3e	e6 21		inc $21				inc 	zTemp1+1
.1b40	80 e7		bra $1b29			bra 	_PGMDCopy
.1b42					_PGMDExit:
.1b42	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.1b43					PGMInsertLine:
.1b43	20 ac 1b	jsr $1bac			jsr 	PGMEndProgram 				; end of program into zTemp0
.1b46	64 20		stz $20				stz 	zTemp1						; copy base address of code to zTemp1
.1b48	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1b4b	85 21		sta $21				sta 	zTemp1+1
.1b4d					_PGMILoop:
.1b4d	b2 20		lda ($20)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.1b4f	f0 1c		beq $1b6d			beq 	_PGMIInsert
.1b51	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.1b53	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b55	cd 38 02	cmp $0238			cmp 	TOKLineNumber
.1b58	c8		iny				iny
.1b59	b1 20		lda ($20),y			lda 	(zTemp1),y
.1b5b	ed 39 02	sbc $0239			sbc 	TOKLineNumber+1
.1b5e	b0 0d		bcs $1b6d			bcs 	_PGMIInsert 				; insert here.
.1b60	18		clc				clc
.1b61	b2 20		lda ($20)			lda 	(zTemp1)
.1b63	65 20		adc $20				adc 	zTemp1
.1b65	85 20		sta $20				sta 	zTemp1
.1b67	90 e4		bcc $1b4d			bcc 	_PGMILoop
.1b69	e6 21		inc $21				inc 	zTemp1+1
.1b6b	80 e0		bra $1b4d			bra 	_PGMILoop
.1b6d					_PGMIInsert:
.1b6d	ac 37 02	ldy $0237			ldy 	TOKLineSize 				; space required
.1b70					_PGMIInsertLoop:
.1b70	b2 1e		lda ($1e)			lda 	(zTemp0)
.1b72	91 1e		sta ($1e),y			sta 	(zTemp0),y
.1b74	a5 20		lda $20				lda 	zTemp1 						; reached insert point
.1b76	c5 1e		cmp $1e				cmp 	zTemp0
.1b78	d0 06		bne $1b80			bne 	_PGMINext
.1b7a	a5 21		lda $21				lda 	zTemp1+1
.1b7c	c5 1f		cmp $1f				cmp 	zTemp0+1
.1b7e	f0 0a		beq $1b8a			beq 	_PGMIInserted
.1b80					_PGMINext:
.1b80	a5 1e		lda $1e				lda 	zTemp0
.1b82	d0 02		bne $1b86			bne 	_PGMINoBorrow
.1b84	c6 1f		dec $1f				dec 	zTemp0+1
.1b86					_PGMINoBorrow:
.1b86	c6 1e		dec $1e				dec 	zTemp0
.1b88	80 e6		bra $1b70			bra 	_PGMIInsertLoop
.1b8a					_PGMIInserted:
.1b8a	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.1b8c					_PGMICopyLoop:
.1b8c	b9 37 02	lda $0237,y			lda 	TOKLineSize,y
.1b8f	91 20		sta ($20),y			sta 	(zTemp1),y
.1b91	c8		iny				iny
.1b92	cc 37 02	cpy $0237			cpy 	TOKLineSize
.1b95	d0 f5		bne $1b8c			bne 	_PGMICopyLoop
.1b97	18		clc				clc
.1b98	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.1b99					PGMSetBaseAddress:
.1b99	8e 44 03	stx $0344			stx 	PGMBaseHigh
.1b9c	8c 45 03	sty $0345			sty 	PGMEndMemoryHigh
.1b9f	60		rts				rts
.1ba0					PGMNewProgram:
.1ba0	64 1e		stz $1e				stz 	zTemp0						; copy base address to zTemp0
.1ba2	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1ba5	85 1f		sta $1f				sta 	zTemp0+1
.1ba7	a9 00		lda #$00			lda 	#0 							; overwrite the offset
.1ba9	92 1e		sta ($1e)			sta 	(zTemp0)
.1bab	60		rts				rts
.1bac					PGMEndProgram:
.1bac	64 1e		stz $1e				stz 	zTemp0 						; copy base address to zTemp0
.1bae	ad 44 03	lda $0344			lda 	PGMBaseHigh
.1bb1	85 1f		sta $1f				sta 	zTemp0+1
.1bb3					_PGMEPLoop:
.1bb3	b2 1e		lda ($1e)			lda 	(zTemp0)
.1bb5	f0 0b		beq $1bc2			beq 	_PGMEPExit
.1bb7	18		clc				clc
.1bb8	65 1e		adc $1e				adc 	zTemp0
.1bba	85 1e		sta $1e				sta 	zTemp0
.1bbc	90 f5		bcc $1bb3			bcc 	_PGMEPLoop
.1bbe	e6 1f		inc $1f				inc 	zTemp0+1
.1bc0	80 f1		bra $1bb3			bra 	_PGMEPLoop
.1bc2					_PGMEPExit:
.1bc2	60		rts				rts
.0344					PGMBaseHigh:
>0344							.fill 	1
.0345					PGMEndMemoryHigh:
>0345							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.1bc3					TOKResetElement:
.1bc3	9c 46 03	stz $0346			stz 	TOKElement
.1bc6	60		rts				rts
.1bc7					TOKWriteElement:
.1bc7	da		phx				phx
.1bc8	ae 46 03	ldx $0346			ldx 	TOKElement
.1bcb	9d 47 03	sta $0347,x			sta 	TOKElementText,x
.1bce	9e 48 03	stz $0348,x			stz 	TOKElementText+1,x
.1bd1	fa		plx				plx
.1bd2	ee 46 03	inc $0346			inc 	TOKElement
.1bd5	60		rts				rts
.0346					TOKElement:
>0346							.fill 	1
.0347					TOKElementText:
>0347							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.1bd6					TOKTokeniseConstant:
.1bd6	a5 0c		lda $0c				lda 	IFR0+IM0 					; check > 64
.1bd8	48		pha				pha 								; save on stack
.1bd9	29 c0		and #$c0			and 	#$C0
.1bdb	05 0d		ora $0d				ora 	IFR0+IM1
.1bdd	05 0e		ora $0e				ora 	IFR0+IM2
.1bdf	f0 10		beq $1bf1			beq 	_TTCLess
.1be1	da		phx				phx
.1be2	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.1be4					_TTCShiftRight:
.1be4	46 0e		lsr $0e				lsr 	IFR0+IM2
.1be6	66 0d		ror $0d				ror 	IFR0+IM1
.1be8	66 0c		ror $0c				ror 	IFR0+IM0
.1bea	ca		dex				dex
.1beb	d0 f7		bne $1be4			bne 	_TTCShiftRight
.1bed	fa		plx				plx
.1bee	20 d6 1b	jsr $1bd6			jsr 	TOKTokeniseConstant
.1bf1					_TTCLess:
.1bf1	68		pla				pla
.1bf2	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.1bf4	20 90 1c	jsr $1c90			jsr 	TOKWriteA
.1bf7	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.1bf8					TOKTokeniseDecimals:
.1bf8	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext 					; consume the .
.1bfb	20 ca 1d	jsr $1dca			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1bfe	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.1c00	20 90 1c	jsr $1c90			jsr 	TOKWriteA
.1c03	20 08 1c	jsr $1c08			jsr 	TOKOutputElementBuffer 		; then the buffer
.1c06	18		clc				clc
.1c07	60		rts				rts
.1c08					TOKOutputElementBuffer:
.1c08	ad 46 03	lda $0346			lda 	TOKElement 					; get count and write that
.1c0b	20 90 1c	jsr $1c90			jsr 	TOKWriteA
.1c0e	a8		tay				tay 								; put in Y
.1c0f	f0 0c		beq $1c1d			beq 	_TOEExit 					; exit if empty which is okay.
.1c11	a2 01		ldx #$01			ldx 	#1
.1c13					_TOELoop:
.1c13	bd 46 03	lda $0346,x			lda 	TOKElement,x
.1c16	20 90 1c	jsr $1c90			jsr 	TOKWriteA
.1c19	e8		inx				inx
.1c1a	88		dey				dey
.1c1b	d0 f6		bne $1c13			bne 	_TOELoop
.1c1d					_TOEExit:
.1c1d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.1c1e					TOKTokenise:
.1c1e	8c 47 04	sty $0447			sty 	TOKDataSource+1 			; save source routine pointer
.1c21	8e 46 04	stx $0446			stx 	TOKDataSource
.1c24	a9 00		lda #$00			lda 	#0 							; now A = carry = require line #
.1c26	2a		rol a				rol  	a
.1c27	8d 3a 03	sta $033a			sta 	TOKRequireLineNumber 		; store in require line number flag.
.1c2a	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.1c2c	8d 37 02	sta $0237			sta 	TOKLineSize 				; line length itself and the line numbers.
.1c2f					_TOKMainLoop:
.1c2f	20 9c 1c	jsr $1c9c			jsr 	TOKGet 						; what follows.
.1c32	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.1c34	f0 51		beq $1c87			beq 	_TOKExit
.1c36	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.1c38	d0 05		bne $1c3f			bne 	_TOKElement
.1c3a	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext
.1c3d	80 f0		bra $1c2f			bra 	_TOKMainLoop
.1c3f					_TOKElement:
.1c3f	20 48 1e	jsr $1e48			jsr 	TOKIsDigit 					; is it 0..9
.1c42	90 0a		bcc $1c4e			bcc 	_TOKNotDigit
.1c44	20 a1 1d	jsr $1da1			jsr 	TOKTokeniseInteger 			; get integer
.1c47	b0 45		bcs $1c8e			bcs 	_TOKFail 					; did it fail ?
.1c49	9c 3a 03	stz $033a			stz 	TOKRequireLineNumber 		; reset RLN flag.
.1c4c	80 e1		bra $1c2f			bra 	_TOKMainLoop
.1c4e					_TOKNotDigit:
.1c4e	ae 3a 03	ldx $033a			ldx 	TOKRequireLineNumber 		; was a line # required
.1c51	d0 3b		bne $1c8e			bne 	_TOKFail 					; if so, we've a problem.
.1c53	c9 24		cmp #$24			cmp 	#"$"						; check for hexadecimal ?
.1c55	d0 07		bne $1c5e			bne 	_TOKNotHex
.1c57	20 e9 1c	jsr $1ce9			jsr 	TOKTokeniseHexadecimal
.1c5a	b0 32		bcs $1c8e			bcs 	_TOKFail
.1c5c	80 d1		bra $1c2f			bra 	_TOKMainLoop
.1c5e					_TOKNotHex:
.1c5e	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.1c60	d0 07		bne $1c69			bne 	_TOKNotDecimal
.1c62	20 f8 1b	jsr $1bf8			jsr 	TOKTokeniseDecimals
.1c65	b0 27		bcs $1c8e			bcs 	_TOKFail
.1c67	80 c6		bra $1c2f			bra 	_TOKMainLoop
.1c69					_TOKNotDecimal:
.1c69	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.1c6b	d0 07		bne $1c74			bne 	_TOKNotString
.1c6d	20 0f 1e	jsr $1e0f			jsr 	TOKTokeniseString
.1c70	b0 1c		bcs $1c8e			bcs 	_TOKFail
.1c72	80 bb		bra $1c2f			bra 	_TOKMainLoop
.1c74					_TOKNotString:
.1c74	20 65 1e	jsr $1e65			jsr 	TOKIsAlpha 					; identifier ?
.1c77	b0 07		bcs $1c80			bcs 	_TOKIdentifier
.1c79	20 de 1d	jsr $1dde			jsr 	TOKTokenisePunctuation 		; punctuation
.1c7c	b0 10		bcs $1c8e			bcs 	_TOKFail
.1c7e	80 af		bra $1c2f			bra 	_TOKMainLoop
.1c80					_TOKIdentifier:
.1c80	20 23 1d	jsr $1d23			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.1c83	b0 09		bcs $1c8e			bcs 	_TOKFail
.1c85	80 a8		bra $1c2f			bra 	_TOKMainLoop
.1c87					_TOKExit:
.1c87	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.1c89	20 90 1c	jsr $1c90			jsr 	TOKWriteA
.1c8c	18		clc				clc									; return with carry set.
.1c8d	60		rts				rts
.1c8e					_TOKFail:
.1c8e	38		sec				sec
.1c8f	60		rts				rts
.1c90					TOKWriteA:
.1c90	da		phx				phx
.1c91	ae 37 02	ldx $0237			ldx 	TOKLineSize
.1c94	9d 37 02	sta $0237,x			sta 	TOKLineSize,x
.1c97	fa		plx				plx
.1c98	ee 37 02	inc $0237			inc 	TOKLineSize
.1c9b	60		rts				rts
.1c9c					TOKGet:
.1c9c	18		clc				clc
.1c9d	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.1ca0					TOKGetNext:
.1ca0	38		sec				sec
.1ca1	6c 46 04	jmp ($0446)			jmp 	(TOKDataSource)
.0446					TOKDataSource:
>0446							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.1ca4					TOKFindToken:
.1ca4	a2 1a		ldx #$1a			ldx 	#StandardTokens & $FF 		; do this table
.1ca6	a0 17		ldy #$17			ldy 	#StandardTokens >> 8
.1ca8	20 b3 1c	jsr $1cb3			jsr 	TOKFindTokenXY 				; find it, or not
.1cab	90 04		bcc $1cb1			bcc 	_TOKFTFail
.1cad	a2 00		ldx #$00			ldx 	#0
.1caf	38		sec				sec
.1cb0	60		rts				rts
.1cb1					_TOKFTFail
.1cb1	18		clc				clc
.1cb2	60		rts				rts
.1cb3					TOKFindTokenXY:
.1cb3	86 1e		stx $1e				stx 	zTemp0 						; save token table address
.1cb5	84 1f		sty $1f				sty 	zTemp0+1
.1cb7	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.1cb9	8d 48 04	sta $0448			sta 	TOKCurrent
.1cbc					_TOKFindLoop:
.1cbc	b2 1e		lda ($1e)			lda 	(zTemp0) 					; get token length from table
.1cbe	18		clc				clc 		 						; clear carry in case of fail
.1cbf	30 17		bmi $1cd8			bmi 	_TOKExit 					; end of table, fail, so return CC.
.1cc1	cd 46 03	cmp $0346			cmp 	TOKElement 					; compare against the element length
.1cc4	d0 13		bne $1cd9			bne 	_TOKNext 					; different, try next.
.1cc6	aa		tax				tax 								; number of chars to compare.
.1cc7	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.1cc9					_TOKCompare:
.1cc9	b1 1e		lda ($1e),y			lda 	(zTemp0),y 					; compare the characters
.1ccb	d9 46 03	cmp $0346,y			cmp 	TOKElementText-1,y
.1cce	d0 09		bne $1cd9			bne 	_TOKNext 					; different ? try next
.1cd0	c8		iny				iny 								; compare next two
.1cd1	ca		dex				dex
.1cd2	d0 f5		bne $1cc9			bne 	_TOKCompare 				; until done X characters.
.1cd4	38		sec				sec
.1cd5	ad 48 04	lda $0448			lda 	TOKCurrent 					; return current ID.
.1cd8					_TOKExit:
.1cd8	60		rts				rts
.1cd9					_TOKNext:
.1cd9	ee 48 04	inc $0448			inc 	TOKCurrent 					; increment token #
.1cdc	38		sec				sec 								; add length+1 to ptr
.1cdd	b2 1e		lda ($1e)			lda 	(zTemp0)
.1cdf	65 1e		adc $1e				adc 	zTemp0
.1ce1	85 1e		sta $1e				sta 	zTemp0
.1ce3	90 d7		bcc $1cbc			bcc 	_TOKFindLoop
.1ce5	e6 1f		inc $1f				inc 	zTemp0+1
.1ce7	80 d3		bra $1cbc			bra 	_TOKFindLoop
.0448					TOKCurrent:
>0448							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.1ce9					TOKTokeniseHexadecimal:
.1ce9	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext 					; consume the $
.1cec	a2 0c		ldx #$0c			ldx 	#IFR0
.1cee	20 32 25	jsr $2532			jsr 	IFloatSetZero 				; set R0 = 0
.1cf1					_TTHLoop:
.1cf1	20 9c 1c	jsr $1c9c			jsr 	TOKGet 						; keep getting and copying while numeric.
.1cf4	20 72 1e	jsr $1e72			jsr 	TOKIsHexadecimal
.1cf7	90 20		bcc $1d19			bcc 	_TTHDone
.1cf9	a2 0c		ldx #$0c			ldx 	#IFR0 						; shift R0 right 4
.1cfb	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1cfe	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1d01	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1d04	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.1d07	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext
.1d0a	38		sec				sec 								; convert to decimal.
.1d0b	e9 30		sbc #$30			sbc 	#48
.1d0d	c9 0a		cmp #$0a			cmp 	#10
.1d0f	90 02		bcc $1d13			bcc 	_TTHNotAlpha
.1d11	e9 07		sbc #$07			sbc 	#7
.1d13					_TTHNotAlpha:
.1d13	05 0c		ora $0c				ora 	IFR0+IM0 					; OR in
.1d15	85 0c		sta $0c				sta 	IFR0+IM0
.1d17	80 d8		bra $1cf1			bra 	_TTHLoop
.1d19					_TTHDone:
.1d19	a9 ec		lda #$ec			lda 	#PR_DOLLAR 					; write $ function out
.1d1b	20 90 1c	jsr $1c90			jsr 	TOKWriteA
.1d1e	20 d6 1b	jsr $1bd6			jsr 	TOKTokeniseConstant 		; write integer out.
.1d21	18		clc				clc
.1d22	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.1d23					TOKTokeniseIdentifier:
.1d23	20 c3 1b	jsr $1bc3			jsr 	TOKResetElement 			; extract an identifier
.1d26					_TOKGetIdentifier:
.1d26	20 9c 1c	jsr $1c9c			jsr 	TOKGet
.1d29	20 32 1e	jsr $1e32			jsr 	TOKToUpper
.1d2c	20 54 1e	jsr $1e54			jsr 	TOKIsIdentifierElement
.1d2f	90 08		bcc $1d39			bcc 	_TOKEndIdent
.1d31	20 c7 1b	jsr $1bc7			jsr		TOKWriteElement
.1d34	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext
.1d37	80 ed		bra $1d26			bra 	_TOKGetIdentifier
.1d39					_TOKEndIdent:
.1d39	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.1d3b	d0 06		bne $1d43			bne 	_TOKNotString
.1d3d	20 c7 1b	jsr $1bc7			jsr 	TOKWriteElement 			; add it
.1d40	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext 					; consume it
.1d43					_TOKNotString:
.1d43	20 9c 1c	jsr $1c9c			jsr 	TOKGet 						; finally check for (
.1d46	c9 28		cmp #$28			cmp 	#"("
.1d48	d0 06		bne $1d50			bne 	_TOKNoArray
.1d4a	20 c7 1b	jsr $1bc7			jsr 	TOKWriteElement 			; add it
.1d4d	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext 					; consume it
.1d50					_TOKNoArray:
.1d50	20 a4 1c	jsr $1ca4			jsr 	TOKFindToken 				; find it
.1d53	90 05		bcc $1d5a			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.1d55	20 90 1c	jsr $1c90			jsr 	TOKWriteA
.1d58	18		clc				clc
.1d59	60		rts				rts
.1d5a					_TOKIsVariable:
.1d5a	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.1d5c					_TOKOutputBuffer:
.1d5c	bd 47 03	lda $0347,x			lda 	TOKElementText,x 			; output it translated.
.1d5f	20 88 1d	jsr $1d88			jsr 	TOKTranslateIdentifier
.1d62	20 90 1c	jsr $1c90			jsr 	TOKWriteA
.1d65	e8		inx				inx
.1d66	bd 47 03	lda $0347,x			lda 	TOKElementText,x
.1d69	20 54 1e	jsr $1e54			jsr 	TOKIsIdentifierElement
.1d6c	b0 ee		bcs $1d5c			bcs 	_TOKOutputBuffer
.1d6e	a8		tay				tay 								; last char in Y
.1d6f	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.1d71	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.1d73	f0 0e		beq $1d83			beq 	_TOKIVExit
.1d75	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.1d77	d0 04		bne $1d7d			bne 	_TOKIVCheckArray 			; no, check for (
.1d79	1a		inc a				inc 	a 							; token is $7D
.1d7a	bc 48 03	ldy $0348,x			ldy 	TOKElementText+1,x 			; get next one.
.1d7d					_TOKIVCheckArray:
.1d7d	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.1d7f	d0 02		bne $1d83			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.1d81	1a		inc a				inc 	a
.1d82	1a		inc a				inc 	a
.1d83					_TOKIVExit:
.1d83	20 90 1c	jsr $1c90			jsr 	TOKWriteA 					; ending token
.1d86	18		clc				clc
.1d87	60		rts				rts
.1d88					TOKTranslateIdentifier:
.1d88	c9 2e		cmp #$2e			cmp 	#"." 						; . is 0x64
.1d8a	f0 0f		beq $1d9b			beq 	_TTI64
.1d8c	c9 5f		cmp #$5f			cmp 	#"_"						; _ is 0x65
.1d8e	f0 0e		beq $1d9e			beq 	_TTI65
.1d90	38		sec				sec
.1d91	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.1d93	10 03		bpl $1d98			bpl 	_TTIExit
.1d95	18		clc				clc 								; map 09 onto 26-35
.1d96	69 2b		adc #$2b			adc 	#"A"-"0"+26
.1d98					_TTIExit:
.1d98	09 40		ora #$40			ora 	#$40 						; correct range.
.1d9a	60		rts				rts
.1d9b	a9 64		lda #$64	_TTI64:	lda 	#$64
.1d9d	60		rts				rts
.1d9e	a9 65		lda #$65	_TTI65:	lda 	#$65
.1da0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.1da1					TOKTokeniseInteger:
.1da1	20 ca 1d	jsr $1dca			jsr 	TOKExtractInteger 			; pull an integer out as text.
.1da4	a2 47		ldx #$47			ldx 	#TOKElementText & $FF
.1da6	a0 03		ldy #$03			ldy 	#TOKElementText >> 8
.1da8	ad 46 03	lda $0346			lda		TOKElement
.1dab	20 96 23	jsr $2396			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.1dae	ad 3a 03	lda $033a			lda 	TOKRequireLineNumber 		; do we require a line number.
.1db1	f0 12		beq $1dc5			beq 	_TOKNotLineNumber
.1db3	a5 0e		lda $0e				lda 	IFR0+IM2 					; check it's a 2 digit number
.1db5	d0 0c		bne $1dc3			bne 	_TOKBadLineNumeber
.1db7	a5 0c		lda $0c				lda 	IFR0+IM0 					; copy it to the line number section.
.1db9	8d 38 02	sta $0238			sta 	TOKLineNumber
.1dbc	a5 0d		lda $0d				lda 	IFR0+IM1
.1dbe	8d 39 02	sta $0239			sta 	TOKLineNumber+1
.1dc1	18		clc				clc
.1dc2	60		rts				rts
.1dc3					_TOKBadLineNumeber:
.1dc3	38		sec				sec
.1dc4	60		rts				rts
.1dc5					_TOKNotLineNumber:
.1dc5	20 d6 1b	jsr $1bd6			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.1dc8	18		clc				clc
.1dc9	60		rts				rts
.1dca					TOKExtractInteger:
.1dca	20 c3 1b	jsr $1bc3			jsr 	TOKResetElement 			; restart
.1dcd					_TTILoop:
.1dcd	20 9c 1c	jsr $1c9c			jsr 	TOKGet 						; keep getting and copying while numeric.
.1dd0	20 48 1e	jsr $1e48			jsr 	TOKIsDigit
.1dd3	90 08		bcc $1ddd			bcc 	_TOKEIExit
.1dd5	20 c7 1b	jsr $1bc7			jsr 	TOKWriteElement
.1dd8	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext
.1ddb	80 f0		bra $1dcd			bra 	_TTILoop
.1ddd					_TOKEIExit:
.1ddd	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.1dde					TOKTokenisePunctuation:
.1dde	20 c3 1b	jsr $1bc3			jsr 	TOKResetElement 			; copy first punctuation character into element.
.1de1	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext
.1de4	20 c7 1b	jsr $1bc7			jsr 	TOKWriteElement
.1de7	20 9c 1c	jsr $1c9c			jsr 	TOKGet 						; what follows ?
.1dea	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.1dec	f0 10		beq $1dfe			beq 	_TTPOne
.1dee	20 5c 1e	jsr $1e5c			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.1df1	b0 0b		bcs $1dfe			bcs 	_TTPOne 					; these speed things up a bit.
.1df3	20 c7 1b	jsr $1bc7			jsr 	TOKWriteElement 			; this is what we will search for.
.1df6	20 a4 1c	jsr $1ca4			jsr 	TOKFindToken
.1df9	b0 0a		bcs $1e05			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.1dfb	ce 46 03	dec $0346			dec 	TOKElement 					; make it a single character
.1dfe					_TTPOne:
.1dfe	20 a4 1c	jsr $1ca4			jsr 	TOKFindToken 				; look for one character punctuation
.1e01	b0 07		bcs $1e0a			bcs 	_TTPOutputExit 				; we found it
.1e03	38		sec				sec 								; not recognised.
.1e04	60		rts				rts
.1e05					_TTPConsumeExit:
.1e05	48		pha				pha
.1e06	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext 					; get the 2nd char out.
.1e09	68		pla				pla
.1e0a					_TTPOutputExit:
.1e0a	20 90 1c	jsr $1c90			jsr  	TOKWriteA 					; write token out
.1e0d	18		clc				clc
.1e0e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.1e0f					TOKTokeniseString:
.1e0f	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext 					; consume the "
.1e12	20 c3 1b	jsr $1bc3			jsr 	TOKResetElement 			; start getting the string
.1e15					_TOKTSLoop:
.1e15	20 9c 1c	jsr $1c9c			jsr 	TOKGet 						; check EOL
.1e18	c9 00		cmp #$00			cmp 	#0
.1e1a	f0 0c		beq $1e28			beq 	_TOKTSExit
.1e1c	20 a0 1c	jsr $1ca0			jsr 	TOKGetNext 					; get and consume
.1e1f	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.1e21	f0 05		beq $1e28			beq 	_TOKTSExit
.1e23	20 c7 1b	jsr $1bc7			jsr 	TOKWriteElement
.1e26	80 ed		bra $1e15			bra 	_TOKTSLoop
.1e28					_TOKTSExit:
.1e28	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.1e2a	20 90 1c	jsr $1c90			jsr 	TOKWriteA
.1e2d	20 08 1c	jsr $1c08			jsr 	TOKOutputElementBuffer
.1e30	18		clc				clc
.1e31	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.1e32					TOKToUpper:
.1e32	c9 61		cmp #$61			cmp 	#"a"
.1e34	90 06		bcc $1e3c			bcc 	_TTUNotLower
.1e36	c9 7b		cmp #$7b			cmp 	#"z"+1
.1e38	b0 02		bcs $1e3c			bcs 	_TTUNotLower
.1e3a	49 20		eor #$20			eor 	#$20
.1e3c					_TTUNotLower:
.1e3c	60		rts				rts
.1e3d					TOKToLower:
.1e3d	c9 41		cmp #$41			cmp 	#"A"
.1e3f	90 06		bcc $1e47			bcc 	_TTUNotUpper
.1e41	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1e43	b0 02		bcs $1e47			bcs 	_TTUNotUpper
.1e45	49 20		eor #$20			eor 	#$20
.1e47					_TTUNotUpper:
.1e47	60		rts				rts
.1e48					TOKIsDigit:
.1e48	c9 30		cmp #$30			cmp 	#"0"
.1e4a	90 06		bcc $1e52			bcc 	TOKFail
.1e4c	c9 3a		cmp #$3a			cmp 	#"9"+1
.1e4e	b0 02		bcs $1e52			bcs 	TOKFail
.1e50					TOKSucceed:
.1e50	38		sec				sec
.1e51	60		rts				rts
.1e52					TOKFail:
.1e52	18		clc				clc
.1e53	60		rts				rts
.1e54					TOKIsIdentifierElement:
.1e54	c9 2e		cmp #$2e			cmp 	#"." 						; true if . or _
.1e56	f0 f8		beq $1e50			beq 	TOKSucceed
.1e58	c9 5f		cmp #$5f			cmp 	#"_"
.1e5a	f0 f4		beq $1e50			beq 	TOKSucceed 					; else fall through to alphanumeric
.1e5c					TOKIsAlphaNumeric:
.1e5c	20 65 1e	jsr $1e65			jsr 	TOKIsAlpha
.1e5f	b0 ef		bcs $1e50			bcs 	TOKSucceed
.1e61	20 48 1e	jsr $1e48			jsr 	TOKIsDigit
.1e64	60		rts				rts
.1e65					TOKIsAlpha:
.1e65	20 32 1e	jsr $1e32			jsr 	TOKToUpper
.1e68	c9 41		cmp #$41			cmp 	#"A"
.1e6a	90 e6		bcc $1e52			bcc 	TOKFail
.1e6c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1e6e	b0 e2		bcs $1e52			bcs 	TOKFail
.1e70	80 de		bra $1e50			bra 	TOKSucceed
.1e72					TOKIsHexadecimal:
.1e72	20 48 1e	jsr $1e48			jsr		TOKIsDigit
.1e75	b0 d9		bcs $1e50			bcs 	TOKSucceed
.1e77	20 65 1e	jsr $1e65			jsr 	TOKIsAlpha
.1e7a	90 d6		bcc $1e52			bcc 	TOKFail
.1e7c	c9 47		cmp #$47			cmp 	#"F"+1
.1e7e	b0 d2		bcs $1e52			bcs 	TOKFail
.1e80	80 ce		bra $1e50			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.1e82					StringSystemInitialise:
.1e82	ad 45 03	lda $0345			lda 	PGMEndMemoryHigh 			; last byte of memory
.1e85	3a		dec a				dec 	a
.1e86	8d 4b 04	sta $044b			sta 	stringMemory+1
.1e89	85 1f		sta $1f				sta 	zTemp0+1
.1e8b	a9 ff		lda #$ff			lda 	#$FF
.1e8d	8d 4a 04	sta $044a			sta 	stringMemory
.1e90	85 1e		sta $1e				sta 	zTemp0
.1e92	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.1e94	92 1e		sta ($1e)			sta 	(zTemp0)
.1e96	60		rts				rts
.1e97					StringSpaceInitialise:
.1e97	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.1e99	8d 49 04	sta $0449			sta 	stringInitialised
.1e9c	ad 4a 04	lda $044a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.1e9f	8d 4c 04	sta $044c			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.1ea2	ad 4b 04	lda $044b			lda 	stringMemory+1
.1ea5	3a		dec a				dec 	a
.1ea6	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1ea9	60		rts				rts
.1eaa					StringTempAllocate:
.1eaa	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.1eac	b0 2e		bcs $1edc			bcs 	_STALength
.1eae	2c 49 04	bit $0449			bit 	stringInitialised 			; already initialised
.1eb1	30 05		bmi $1eb8			bmi 	_STAAllocate
.1eb3	48		pha				pha 								; save value to subtract.
.1eb4	20 97 1e	jsr $1e97			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.1eb7	68		pla				pla 								; restore it
.1eb8					_STAAllocate:
.1eb8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.1eba	18		clc				clc  								; deliberate allows one more
.1ebb	6d 4c 04	adc $044c			adc 	stringTempPointer 			; subtract from temp pointer
.1ebe	8d 4c 04	sta $044c			sta 	stringTempPointer
.1ec1	85 0c		sta $0c				sta 	IFR0+IM0 					; address in mantissa too
.1ec3	85 24		sta $24				sta 	zsTemp 						; and zsTemp
.1ec5	ad 4d 04	lda $044d			lda 	stringTempPointer+1
.1ec8	69 ff		adc #$ff			adc 	#$FF
.1eca	8d 4d 04	sta $044d			sta 	stringTempPointer+1
.1ecd	85 25		sta $25				sta 	zsTemp+1
.1ecf	85 0d		sta $0d				sta 	IFR0+IM1
.1ed1	64 0e		stz $0e				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.1ed3	a9 80		lda #$80			lda 	#$80
.1ed5	85 0f		sta $0f				sta 	IFR0+IExp
.1ed7	a9 00		lda #$00			lda 	#0 							; clear the target string
.1ed9	92 24		sta ($24)			sta 	(zsTemp)
.1edb	60		rts				rts
.1edc					_STALength:
.1edc	4c f8 11	jmp $11f8		jmp	ErrorV_string
.1edf					StringTempWrite:
.1edf	5a		phy				phy
.1ee0	48		pha				pha
.1ee1	b2 24		lda ($24)			lda 	(zsTemp)
.1ee3	1a		inc a				inc 	a
.1ee4	92 24		sta ($24)			sta 	(zsTemp)
.1ee6	a8		tay				tay
.1ee7	68		pla				pla
.1ee8	91 24		sta ($24),y			sta 	(zsTemp),y
.1eea	7a		ply				ply
.1eeb	60		rts				rts
.0024					zsTemp:
>0024							.fill 	2
.0449					stringInitialised:
>0449							.fill 	1
.044a					stringMemory:
>044a							.fill 	2
.044c					stringTempPointer:
>044c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/variables/simple.asm

.1eec					VARCheckSimple:
.1eec	aa		tax				tax 								; save in X
.1eed	b1 1c		lda ($1c),y			lda 	(codePtr),y
.1eef	c9 7c		cmp #$7c			cmp 	#$7C
.1ef1	d0 29		bne $1f1c			bne 	_VCSComplex
.1ef3	a9 04		lda #$04			lda 	#4
.1ef5	8d 56 04	sta $0456			sta 	FastVariables+8
.1ef8	a9 05		lda #$05			lda 	#5
.1efa	8d 57 04	sta $0457			sta 	FastVariables+9
.1efd	a9 06		lda #$06			lda 	#6
.1eff	8d 58 04	sta $0458			sta 	FastVariables+10
.1f02	a9 00		lda #$00			lda 	#0
.1f04	8d 59 04	sta $0459			sta 	FastVariables+11
.1f07	c8		iny				iny 								; consume the second byte, the type.
.1f08	8a		txa				txa  								; character (40-7F) x 4
.1f09	0a		asl a				asl 	a
.1f0a	0a		asl a				asl  	a
.1f0b	18		clc				clc
.1f0c	69 4e		adc #$4e			adc 	#FastVariables & $FF
.1f0e	85 0c		sta $0c				sta 	IFR0+IM0
.1f10	a9 04		lda #$04			lda 	#FastVariables >> 8
.1f12	69 00		adc #$00			adc 	#0
.1f14	85 0d		sta $0d				sta 	IFR0+IM1
.1f16	64 0e		stz $0e				stz 	IFR0+IM2
.1f18	64 0f		stz $0f				stz 	IFR0+IExp
.1f1a	38		sec				sec 								; it's a reference
.1f1b	60		rts				rts
.1f1c					_VCSComplex:
>1f1c	db						.byte 	$DB
.044e					FastVariables:
>044e							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F
=$40					IFSign = $40
.1f1d					IFInitialise:
.1f1d	9c be 04	stz $04be			stz 	IFStackIndex
.1f20	60		rts				rts
.1f21					IFloatSubtract:
.1f21	da		phx				phx
.1f22	a2 0c		ldx #$0c			ldx 	#IFR0
.1f24	20 3d 25	jsr $253d			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.1f27	fa		plx				plx
.1f28					IFloatAdd:
.1f28	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.1f2a	05 0f		ora $0f				ora 	IFR0+IExp
.1f2c	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.1f2e	d0 4e		bne $1f7e			bne 	_IFloatAddDecimals 			; decimal version.
.1f30					_IFAddSubMantissa:
.1f30	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.1f32	45 0f		eor $0f				eor 	IFR0+IExp
.1f34	29 40		and #$40			and 	#IFSign
.1f36	d0 21		bne $1f59			bne 	_IFloatSubMantissa
.1f38	18		clc				clc 								; do the actual addition
.1f39	a5 0c		lda $0c			lda 	IFR0+IM0
.1f3b	75 00		adc $00,x		adc 		IM0,x
.1f3d	85 0c		sta $0c			sta 	IFR0+IM0
.1f3f	a5 0d		lda $0d			lda 	IFR0+IM1
.1f41	75 01		adc $01,x		adc 		IM1,x
.1f43	85 0d		sta $0d			sta 	IFR0+IM1
.1f45	a5 0e		lda $0e			lda 	IFR0+IM2
.1f47	75 02		adc $02,x		adc 		IM2,x
.1f49	85 0e		sta $0e			sta 	IFR0+IM2
.1f4b	10 29		bpl $1f76			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.1f4d	a2 0c		ldx #$0c			ldx 	#IFR0						; shift R0 right, divide by 2
.1f4f	20 61 25	jsr $2561			jsr 	IFloatShiftRight
.1f52	20 8b 25	jsr $258b			jsr 	IFloatIncExponent
.1f55	d0 1f		bne $1f76			bne 	_IFloatAddExit
.1f57	38		sec				sec 								; overflowed numerically.
.1f58	60		rts				rts
.1f59					_IFloatSubMantissa:
.1f59	38		sec				sec 								; do the subtraction R0-Rx
.1f5a	a5 0c		lda $0c			lda 	IFR0+IM0
.1f5c	f5 00		sbc $00,x		sbc 		IM0,x
.1f5e	85 0c		sta $0c			sta 	IFR0+IM0
.1f60	a5 0d		lda $0d			lda 	IFR0+IM1
.1f62	f5 01		sbc $01,x		sbc 		IM1,x
.1f64	85 0d		sta $0d			sta 	IFR0+IM1
.1f66	a5 0e		lda $0e			lda 	IFR0+IM2
.1f68	f5 02		sbc $02,x		sbc 		IM2,x
.1f6a	85 0e		sta $0e			sta 	IFR0+IM2
.1f6c	b0 08		bcs $1f76			bcs 	_IFloatAddExit 				; no borrow so we are done.
.1f6e	a2 0c		ldx #$0c			ldx 	#IFR0
.1f70	20 45 25	jsr $2545			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.1f73	20 3d 25	jsr $253d			jsr 	IFloatNegate 				; negate
.1f76					_IFloatAddExit:
.1f76	18		clc				clc
.1f77	60		rts				rts
.1f78					_IFloatZeroAdd:
.1f78	fa		plx				plx 								; return this value in R0
.1f79	20 c3 24	jsr $24c3			jsr 	IFloatCopyFromRegister
.1f7c	18		clc				clc
.1f7d	60		rts				rts
.1f7e					_IFloatAddDecimals:
.1f7e	20 2b 25	jsr $252b			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.1f81	f0 f3		beq $1f76			beq 	_IFloatAddExit
.1f83	20 69 25	jsr $2569			jsr 	IFloatNormalise 			; normalise RX
.1f86	da		phx				phx 								; normalise R0
.1f87	a2 0c		ldx #$0c			ldx 	#IFR0
.1f89	20 2b 25	jsr $252b			jsr 	IFloatCheckZero
.1f8c	f0 ea		beq $1f78			beq 	_IFloatZeroAdd
.1f8e	20 69 25	jsr $2569			jsr 	IFloatNormalise
.1f91	fa		plx				plx
.1f92	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the exponent of R0
.1f94	29 3f		and #$3f			and 	#IFXMask
.1f96	38		sec				sec
.1f97	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.1f99	85 0a		sta $0a				sta 	iTemp0
.1f9b	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.1f9d	29 3f		and #$3f			and 	#IFXMask
.1f9f	38		sec				sec
.1fa0	e9 20		sbc #$20			sbc 	#$20
.1fa2	c5 0a		cmp $0a				cmp 	iTemp0 						; get the larger adjusted
.1fa4	b0 02		bcs $1fa8			bcs 	_IFloatHaveLarger
.1fa6	a5 0a		lda $0a				lda 	iTemp0
.1fa8					_IFloatHaveLarger:
.1fa8	18		clc				clc 								; get the actual one back.
.1fa9	69 20		adc #$20			adc 	#$20 						; shift both to that.
.1fab	20 b8 1f	jsr $1fb8			jsr 	_IFShiftXToA
.1fae	da		phx				phx
.1faf	a2 0c		ldx #$0c			ldx 	#IFR0
.1fb1	20 b8 1f	jsr $1fb8			jsr 	_IFShiftXToA
.1fb4	fa		plx				plx
.1fb5	4c 30 1f	jmp $1f30			jmp 	_IFAddSubMantissa 			; do the adding bit.
.1fb8					_IFShiftXToA:
.1fb8	8d b6 04	sta $04b6			sta 	IFTarget
.1fbb	20 2b 25	jsr $252b			jsr 	IFloatCheckZero 			; check adding zero ?
.1fbe	f0 11		beq $1fd1			beq 	_IFSXExit
.1fc0					_IFSXLoop:
.1fc0	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.1fc2	29 3f		and #$3f			and 	#IFXMask
.1fc4	cd b6 04	cmp $04b6			cmp 	IFTarget
.1fc7	f0 08		beq $1fd1			beq 	_IFSXExit
.1fc9	20 61 25	jsr $2561			jsr 	IFloatShiftRight
.1fcc	20 8b 25	jsr $258b			jsr 	IFloatIncExponent
.1fcf	80 ef		bra $1fc0			bra 	_IFSXLoop
.1fd1					_IFSXExit:
.1fd1	60		rts				rts
.04b6					IFTarget:
>04b6							.fill 	1
.1fd2					IFloatMultiply:
.1fd2	8e b6 04	stx $04b6			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.1fd5	20 8d 20	jsr $208d			jsr 	IFCalculateNewSign
.1fd8	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.1fda	05 0f		ora $0f				ora 	IFR0+IExp
.1fdc	29 3f		and #$3f			and 	#IFXMask
.1fde	15 01		ora $01,x			ora 	IM1,x
.1fe0	05 0d		ora $0d				ora 	IFR0+IM1
.1fe2	15 02		ora $02,x			ora 	IM2,x
.1fe4	05 0e		ora $0e				ora 	IFR0+IM2
.1fe6	d0 0a		bne $1ff2			bne 	_IFMStandard
.1fe8	20 0e 25	jsr $250e			jsr 	IFloatMultiply8BitRx
.1feb	ad b8 04	lda $04b8			lda 	IFNewSign
.1fee	85 0f		sta $0f				sta 	IFR0+IExp
.1ff0	18		clc				clc
.1ff1	60		rts				rts
.1ff2					_IFMStandard:
.1ff2	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.1ff4	20 84 20	jsr $2084			jsr 	IFMSignExtend
.1ff7	8d b7 04	sta $04b7			sta 	IFNewExponent
.1ffa	a5 0f		lda $0f				lda 	IFR0+IExp
.1ffc	20 84 20	jsr $2084			jsr 	IFMSignExtend
.1fff	18		clc				clc
.2000	6d b7 04	adc $04b7			adc 	IFNewExponent
.2003	8d b7 04	sta $04b7			sta 	IFNewExponent
.2006	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2008	20 d4 24	jsr $24d4			jsr 	IFloatCopyToRegister
.200b	a2 0c		ldx #$0c			ldx 	#IFR0 						; zero R0 (the result)
.200d	20 32 25	jsr $2532			jsr 	IFloatSetZero
.2010					_IFMLoop:
.2010	a2 18		ldx #$18			ldx 	#IFRTemp
.2012	20 2b 25	jsr $252b			jsr 	IFloatCheckZero
.2015	f0 3a		beq $2051			beq 	_IFMExit
.2017	ae b6 04	ldx $04b6			ldx 	IFTarget 					; look at adder MSB
.201a	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.201c	10 03		bpl $2021			bpl	 	_IFMTargetOkay
.201e	20 75 20	jsr $2075			jsr 	_IFMShiftAll
.2021					_IFMTargetOkay:
.2021	a5 18		lda $18				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2023	29 01		and #$01			and 	#1
.2025	f0 16		beq $203d			beq 	_IFMNoAdd
.2027	ae b6 04	ldx $04b6			ldx 	IFTarget 					; add adder
.202a	18		clc				clc
.202b	a5 0c		lda $0c			lda 	IFR0+IM0
.202d	75 00		adc $00,x		adc 		IM0,x
.202f	85 0c		sta $0c			sta 	IFR0+IM0
.2031	a5 0d		lda $0d			lda 	IFR0+IM1
.2033	75 01		adc $01,x		adc 		IM1,x
.2035	85 0d		sta $0d			sta 	IFR0+IM1
.2037	a5 0e		lda $0e			lda 	IFR0+IM2
.2039	75 02		adc $02,x		adc 		IM2,x
.203b	85 0e		sta $0e			sta 	IFR0+IM2
.203d					_IFMNoAdd:
.203d	a5 0e		lda $0e				lda 	IFR0+IM2
.203f	10 03		bpl $2044			bpl 	_IFMResultOkay
.2041	20 75 20	jsr $2075			jsr 	_IFMShiftAll
.2044					_IFMResultOkay:
.2044	a2 18		ldx #$18			ldx 	#IFRTemp
.2046	20 61 25	jsr $2561			jsr 	IFloatShiftRight
.2049	ae b6 04	ldx $04b6			ldx 	IFTarget
.204c	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.204f	80 bf		bra $2010			bra 	_IFMLoop
.2051					_IFMExit:
.2051	ad b7 04	lda $04b7			lda 	IFNewExponent 				; validate new exponent.
.2054	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2056	90 0f		bcc $2067			bcc 	_IFMOkay
.2058	c9 e0		cmp #$e0			cmp 	#$E0
.205a	b0 0b		bcs $2067			bcs 	_IFMOkay
.205c	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.205e	f0 13		beq $2073			beq 	_IFMError
.2060	a2 0c		ldx #$0c			ldx 	#IFR0 						; return zero underflow
.2062	20 32 25	jsr $2532			jsr 	IFloatSetZero
.2065	18		clc				clc
.2066	60		rts				rts
.2067					_IFMOkay:
.2067	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2069	0d b8 04	ora $04b8			ora 	IFNewSign
.206c	85 0f		sta $0f				sta 	IFR0+IExp
.206e	18		clc				clc
.206f	60		rts				rts
.2070	4c ff ff	jmp $ffff			jmp 	$FFFF
.2073					_IFMError:
.2073	38		sec				sec
.2074	60		rts				rts
.2075					_IFMShiftAll:
.2075	a2 0c		ldx #$0c			ldx 	#IFR0
.2077	20 61 25	jsr $2561			jsr 	IFloatShiftRight
.207a	ae b6 04	ldx $04b6			ldx 	IFTarget
.207d	20 61 25	jsr $2561			jsr 	IFloatShiftRight
.2080	ee b7 04	inc $04b7			inc 	IFNewExponent
.2083	60		rts				rts
.2084					IFMSignExtend:
.2084	29 3f		and #$3f			and 	#IFXMask
.2086	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2088	90 02		bcc $208c			bcc 	_IFMNoSXX
.208a	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.208c					_IFMNoSXX:
.208c	60		rts				rts
.208d					IFCalculateNewSign:
.208d	b5 03		lda $03,x			lda 	IExp,x
.208f	45 0f		eor $0f				eor 	IFR0+IExp
.2091	29 40		and #$40			and 	#IFSign
.2093	8d b8 04	sta $04b8			sta 	IFNewSign
.2096	60		rts				rts
.04b7					IFNewExponent:
>04b7							.fill 	1
.04b8					IFNewSign:
>04b8							.fill 	1
.2097					IFloatDivideInteger:
.2097	20 b0 20	jsr $20b0			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.209a	b0 06		bcs $20a2			bcs 	_IFDIExit
.209c	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy result from register.
.209e	20 c3 24	jsr $24c3			jsr 	IFloatCopyFromRegister
.20a1	18		clc				clc
.20a2					_IFDIExit:
.20a2	60		rts				rts
.20a3					IFloatModulusInteger:
.20a3	20 b0 20	jsr $20b0			jsr 	IFloatDivideIntegerCommon
.20a6	b0 07		bcs $20af			bcs 	_IFMIExit
.20a8	ae b6 04	ldx $04b6			ldx 	IFTarget
.20ab	20 c3 24	jsr $24c3			jsr 	IFloatCopyFromRegister
.20ae	18		clc				clc
.20af					_IFMIExit:
.20af	60		rts				rts
.20b0					IFloatDivideIntegerCommon:
.20b0	8e b6 04	stx $04b6			stx 	IFTarget  					; this is s1, s0 = R0
.20b3	20 8d 20	jsr $208d			jsr 	IFCalculateNewSign 			; calculate sign of result
.20b6	20 de 20	jsr $20de			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.20b9	a2 0c		ldx #$0c			ldx 	#IFR0 						; check divide by zero
.20bb	20 2b 25	jsr $252b			jsr 	IFloatCheckZero
.20be	f0 1c		beq $20dc			beq 	_IFDIDivZero
.20c0	ae b6 04	ldx $04b6			ldx 	IFTarget 					; zero Rx (S1)
.20c3	20 32 25	jsr $2532			jsr 	IFloatSetZero
.20c6	5a		phy				phy
.20c7	a0 18		ldy #$18			ldy 	#24
.20c9					_IFDILoop:
.20c9	20 ef 20	jsr $20ef			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.20cc	20 fb 20	jsr $20fb			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.20cf	88		dey				dey
.20d0	d0 f7		bne $20c9			bne 	_IFDILoop 					; do it 24 times
.20d2	7a		ply				ply
.20d3	ad b8 04	lda $04b8			lda 	IFNewSign 					; set sign of result.
.20d6	29 40		and #$40			and 	#IFSign
.20d8	85 1b		sta $1b				sta 	IFRTemp+IExp
.20da	18		clc				clc 								; is okay.
.20db	60		rts				rts
.20dc					_IFDIDivZero:
.20dc	38		sec				sec
.20dd	60		rts				rts
.20de					IFDCopyRXToRTemp:
.20de	b5 00		lda $00,x			lda 	IM0,x
.20e0	85 18		sta $18				sta 	IFRTemp+IM0
.20e2	b5 01		lda $01,x			lda 	IM1,x
.20e4	85 19		sta $19				sta 	IFRTemp+IM1
.20e6	b5 02		lda $02,x			lda 	IM2,x
.20e8	85 1a		sta $1a				sta 	IFRTemp+IM2
.20ea	b5 03		lda $03,x			lda 	IExp,x
.20ec	85 1b		sta $1b				sta 	IFRTemp+IExp
.20ee	60		rts				rts
.20ef					IFDShiftSTempS1Left:
.20ef	a2 18		ldx #$18			ldx 	#IFRTemp
.20f1	20 59 25	jsr $2559			jsr 	IFloatShiftLeft
.20f4	ae b6 04	ldx $04b6			ldx 	IFTarget
.20f7	20 5a 25	jsr $255a			jsr 	IFloatRotateLeft
.20fa	60		rts				rts
.20fb					IFDTrySubtract:
.20fb	ae b6 04	ldx $04b6			ldx 	IFTarget 					; s1 = Rx
.20fe	38		sec				sec 								; subtract, saving the results on the stack.
.20ff	b5 00		lda $00,x			lda 	IM0,x
.2101	e5 0c		sbc $0c				sbc 	IFR0+IM0
.2103	48		pha				pha
.2104	b5 01		lda $01,x			lda 	IM1,x
.2106	e5 0d		sbc $0d				sbc 	IFR0+IM1
.2108	48		pha				pha
.2109	b5 02		lda $02,x			lda 	IM2,x
.210b	e5 0e		sbc $0e				sbc 	IFR0+IM2
.210d	b0 03		bcs $2112			bcs 	_IFDCanSubtract
.210f	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2110	68		pla				pla
.2111	60		rts				rts
.2112					_IFDCanSubtract:
.2112	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2114	68		pla				pla
.2115	95 01		sta $01,x			sta 	IM1,x
.2117	68		pla				pla
.2118	95 00		sta $00,x			sta 	IM0,x
.211a	e6 18		inc $18				inc 	IFRTemp+IM0 				; increment temp
.211c	d0 06		bne $2124			bne 	_IFDCSExit
.211e	e6 19		inc $19				inc 	IFRTemp+IM1
.2120	d0 02		bne $2124			bne 	_IFDCSExit
.2122	e6 1a		inc $1a				inc 	IFRTemp+IM2
.2124					_IFDCSExit:
.2124	60		rts				rts
.2125					IFloatBitwiseAnd:
.2125	5a		phy				phy
.2126	20 6a 21	jsr $216a			jsr 	IFPreProcessBitwise 		; set up everything.
.2129	d0 0f		bne $213a			bne 	_IFBAExit
.212b					_IFBALoop:
.212b	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.212e	35 00		and $00,x			and 	IM0,x
.2130	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2133	e8		inx				inx
.2134	c8		iny				iny
.2135	c0 03		cpy #$03			cpy 	#3
.2137	d0 f2		bne $212b			bne 	_IFBALoop
.2139	18		clc				clc
.213a					_IFBAExit:
.213a	7a		ply				ply
.213b	60		rts				rts
.213c					IFloatBitwiseOr:
.213c	5a		phy				phy
.213d	20 6a 21	jsr $216a			jsr 	IFPreProcessBitwise 		; set up everything.
.2140	d0 0f		bne $2151			bne 	_IFBAExit
.2142					_IFBALoop:
.2142	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.2145	15 00		ora $00,x			ora 	IM0,x
.2147	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.214a	e8		inx				inx
.214b	c8		iny				iny
.214c	c0 03		cpy #$03			cpy 	#3
.214e	d0 f2		bne $2142			bne 	_IFBALoop
.2150	18		clc				clc
.2151					_IFBAExit:
.2151	7a		ply				ply
.2152	60		rts				rts
.2153					IFloatBitwiseXor:
.2153	5a		phy				phy
.2154	20 6a 21	jsr $216a			jsr 	IFPreProcessBitwise 		; set up everything.
.2157	d0 0f		bne $2168			bne 	_IFBAExit
.2159					_IFBALoop:
.2159	b9 0c 00	lda $000c,y			lda 	IFR0+IM0,y
.215c	55 00		eor $00,x			eor 	IM0,x
.215e	99 0c 00	sta $000c,y			sta 	IFR0+IM0,y
.2161	e8		inx				inx
.2162	c8		iny				iny
.2163	c0 03		cpy #$03			cpy 	#3
.2165	d0 f2		bne $2159			bne 	_IFBALoop
.2167	18		clc				clc
.2168					_IFBAExit:
.2168	7a		ply				ply
.2169	60		rts				rts
.216a					IFPreProcessBitwise:
.216a	a0 00		ldy #$00			ldy 	#0 							; set index.
.216c	a5 0f		lda $0f				lda 	IFR0+IExp 					; OR exponents
.216e	15 03		ora $03,x			ora 	IExp,x
.2170	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2172	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2174	38		sec				sec 								; carry set just in cases.
.2175	60		rts				rts
.2176					IFloatAbsoluteR0:
.2176	a5 0f		lda $0f				lda 	IFR0+IExp					; reset the sign bit.
.2178	29 bf		and #$bf			and 	#IFSign ^ 255
.217a	85 0f		sta $0f				sta 	IFR0+IExp
.217c	18		clc				clc
.217d	60		rts				rts
.217e					IFloatSquareRootR0:
.217e	a2 0c		ldx #$0c			ldx 	#IFR0 						; if zero, return zero.
.2180	20 2b 25	jsr $252b			jsr 	IFloatCheckZero
.2183	a5 0f		lda $0f				lda	 	IFR0+IExp 					; if negative fail.
.2185	29 40		and #$40			and 	#IFSign
.2187	d0 2f		bne $21b8			bne 	_IFSRFail
.2189	20 69 25	jsr $2569			jsr 	IFloatNormalise 			; it will work better !
.218c	a2 10		ldx #$10			ldx 	#IFR1 						; R1 contains original throughout
.218e	20 d4 24	jsr $24d4			jsr 	IFloatCopyToRegister
.2191	a5 0f		lda $0f				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2193	20 84 20	jsr $2084			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2196	18		clc				clc
.2197	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2199	85 0f		sta $0f				sta 	IFR0+IExp
.219b	4a		lsr a				lsr 	a 							; which we can halve.
.219c	38		sec				sec 								; convert back
.219d	e9 17		sbc #$17			sbc 	#23
.219f	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.21a1	85 0f		sta $0f				sta 	IFR0+IExp 					; to R0
.21a3	20 ba 21	jsr $21ba			jsr 	_IFSRNewton
.21a6	20 ba 21	jsr $21ba			jsr 	_IFSRNewton
.21a9	20 ba 21	jsr $21ba			jsr 	_IFSRNewton
.21ac	20 ba 21	jsr $21ba			jsr 	_IFSRNewton
.21af	18		clc				clc
.21b0	60		rts				rts
.21b1					_IFSRZero:
.21b1	a2 0c		ldx #$0c			ldx 	#IFR0
.21b3	20 32 25	jsr $2532			jsr 	IFloatSetZero
.21b6	18		clc				clc
.21b7	60		rts				rts
.21b8					_IFSRFail:
.21b8	38		sec				sec
.21b9	60		rts				rts
.21ba					_IFSRNewton:
.21ba	a2 10		ldx #$10			ldx 	#IFR1 						; push original value (R3) on the stack
.21bc	20 81 24	jsr $2481			jsr 	IFloatPushRx
.21bf	a2 0c		ldx #$0c			ldx 	#IFR0 						; push current guess (R0) on the stack.
.21c1	20 81 24	jsr $2481			jsr 	IFloatPushRx
.21c4	a2 10		ldx #$10			ldx 	#IFR1 						; guess = original / guess
.21c6	20 55 22	jsr $2255			jsr 	IFloatDivideFloat
.21c9	a2 10		ldx #$10			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.21cb	20 a2 24	jsr $24a2			jsr 	IFloatPullRx
.21ce	20 28 1f	jsr $1f28			jsr 	IFloatAdd 					; now guess + original/guess
.21d1	a2 0c		ldx #$0c			ldx 	#IFR0 						; divide by 2
.21d3	20 61 25	jsr $2561			jsr 	IFloatShiftRight
.21d6	a2 10		ldx #$10			ldx 	#IFR1
.21d8	20 a2 24	jsr $24a2			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.21db	60		rts				rts
.21dc					IFloatFractionalR0:
.21dc	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.21de	29 3f		and #$3f			and 	#IFXMask
.21e0	f0 17		beq $21f9			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.21e2	20 76 21	jsr $2176			jsr 	IFloatAbsoluteR0 			; absolute value R9
.21e5	a2 0c		ldx #$0c			ldx 	#IFR0
.21e7	20 69 25	jsr $2569			jsr 	IFloatNormalise 			; normalise R0
.21ea	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy to RTemp
.21ec	20 d4 24	jsr $24d4			jsr 	IFloatCopyToRegister
.21ef	20 32 22	jsr $2232			jsr 	IFloatIntegerR0 			; take integer part of R0
.21f2	a2 18		ldx #$18			ldx 	#IFRTemp 					; subtract
.21f4	20 21 1f	jsr $1f21			jsr 	IFloatSubtract
.21f7	80 05		bra $21fe			bra 	_FIPExit
.21f9					_FIPZero:
.21f9	a2 0c		ldx #$0c			ldx 	#IFR0
.21fb	20 32 25	jsr $2532			jsr 	IFloatSetZero
.21fe					_FIPExit:
.21fe	18		clc				clc
.21ff	60		rts				rts
.2200					IFloatCompare:
.2200	20 21 1f	jsr $1f21			jsr 	IFloatSubtract 				; subtract R0 from RX.
.2203	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.2205	05 0f		ora $0f				ora 	IFR0+IExp
.2207	a2 0c		ldx #$0c			ldx 	#IFR0 						; only using R0 from now on.
.2209	29 3f		and #$3f			and 	#IFXMask
.220b	d0 19		bne $2226			bne 	_IFCNonInteger
.220d	20 2b 25	jsr $252b			jsr 	IFloatCheckZero 			; check if zero
.2210	f0 0f		beq $2221			beq 	_IFCZero
.2212					_IFCReturnSign:
.2212	a5 0f		lda $0f				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.2214	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.2216	48		pha				pha
.2217	a9 01		lda #$01			lda 	#1
.2219	20 34 25	jsr $2534			jsr 	IFloatSetByte 				; return to +1
.221c	68		pla				pla 								; sign bit back
.221d	85 0f		sta $0f				sta 	IFR0+IExp					; set that sign
.221f	18		clc				clc
.2220	60		rts				rts
.2221					_IFCZero:
.2221	20 32 25	jsr $2532			jsr 	IFloatSetZero
.2224	18		clc				clc
.2225	60		rts				rts
.2226					_IFCNonInteger:
.2226	a5 0c		lda $0c				lda 	IFR0+IM0
.2228	29 00		and #$00			and		#$00
.222a	05 0d		ora $0d				ora 	IFR0+IM1
.222c	05 0e		ora $0e				ora 	IFR0+IM2
.222e	f0 f1		beq $2221			beq 	_IFCZero 					; near enough !
.2230	80 e0		bra $2212			bra 	_IFCReturnSign 				; return the sign of the difference.
.2232					IFloatIntegerR0:
.2232	a5 0f		lda $0f				lda 	IFR0+IExp					; is it integer already ?
.2234	29 3f		and #$3f			and 	#IFXMask
.2236	f0 1b		beq $2253			beq 	_FIPExit 					; if so do nothing
.2238	a2 0c		ldx #$0c			ldx 	#IFR0
.223a	20 69 25	jsr $2569			jsr 	IFloatNormalise 			; normalise
.223d	20 2b 25	jsr $252b			jsr 	IFloatCheckZero 			; is it zero ?
.2240	f0 0e		beq $2250			beq 	_FIPZero 					; if so return zero.
.2242					_FIPShift:
.2242	a5 0f		lda $0f				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.2244	29 20		and #$20			and 	#$20 						; still -ve
.2246	f0 0b		beq $2253			beq 	_FIPExit
.2248	20 61 25	jsr $2561			jsr 	IFloatShiftRight 			; shift mantissa right
.224b	20 8b 25	jsr $258b			jsr 	IFloatIncExponent 			; bump exponent
.224e	80 f2		bra $2242			bra 	_FIPShift
.2250					_FIPZero:
.2250	20 32 25	jsr $2532			jsr 	IFloatSetZero
.2253					_FIPExit:
.2253	18		clc				clc
.2254	60		rts				rts
.2255					IFloatDivideFloat:
.2255	8e b6 04	stx $04b6			stx 	IFTarget  					; this is s1, s0 = R0
.2258	20 8d 20	jsr $208d			jsr 	IFCalculateNewSign 			; calculate sign of result
.225b	20 69 25	jsr $2569			jsr 	IFloatNormalise 			; normalise RX
.225e	a2 0c		ldx #$0c			ldx 	#IFR0 						; normalise R0
.2260	20 69 25	jsr $2569			jsr 	IFloatNormalise
.2263	20 2b 25	jsr $252b			jsr 	IFloatCheckZero
.2266	f0 56		beq $22be			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.2268	a5 0f		lda $0f				lda 	IFR0+IExp 					; calculate s0.exponent
.226a	20 84 20	jsr $2084			jsr 	IFMSignExtend
.226d	8d b7 04	sta $04b7			sta 	IFNewExponent
.2270	ae b6 04	ldx $04b6			ldx 	IFTarget 					; calculate s1.exponent
.2273	b5 03		lda $03,x			lda 	IExp,x
.2275	20 84 20	jsr $2084			jsr 	IFMSignExtend
.2278	38		sec				sec
.2279	ed b7 04	sbc $04b7			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.227c	38		sec				sec
.227d	e9 17		sbc #$17			sbc 	#23
.227f	8d b7 04	sta $04b7			sta 	IFNewExponent
.2282	20 c0 22	jsr $22c0			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.2285	a5 1a		lda $1a				lda 	IFRTemp+IM2 				; result has overflowed ?
.2287	10 08		bpl $2291			bpl 	_IFDFNoShiftResult
.2289	a2 18		ldx #$18			ldx 	#IFRTemp 					; if so, fix it up.
.228b	20 61 25	jsr $2561			jsr 	IFloatShiftRight
.228e	ee b7 04	inc $04b7			inc 	IFNewExponent
.2291					_IFDFNoShiftResult:
.2291	ad b7 04	lda $04b7			lda 	IFNewExponent 				; underflow/overflow check.
.2294	30 06		bmi $229c			bmi 	_IFDFCheckUnderflow
.2296	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.2298	b0 24		bcs $22be			bcs 	_IFDFDivZero
.229a	80 11		bra $22ad			bra		_IFDFExit
.229c					_IFDFCheckUnderflow:
.229c	ad b7 04	lda $04b7			lda 	IFNewExponent 				; shift into a legal exponent.
.229f	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.22a1	b0 0a		bcs $22ad			bcs 	_IFDFExit
.22a3	ee b7 04	inc $04b7			inc 	IFNewExponent
.22a6	a2 18		ldx #$18			ldx 	#IFRTemp
.22a8	20 61 25	jsr $2561			jsr 	IFloatShiftRight
.22ab	80 ef		bra $229c			bra 	_IFDFCheckUnderflow
.22ad					_IFDFExit:
.22ad	ad b7 04	lda $04b7			lda 	IFNewExponent 				; combine exponent and sign.
.22b0	29 3f		and #$3f			and 	#IFXMask
.22b2	0d b8 04	ora $04b8			ora 	IFNewSign
.22b5	85 1b		sta $1b				sta 	IFRTemp+IExp
.22b7	a2 18		ldx #$18			ldx 	#IFRTemp 					; copy RTemp to R0.
.22b9	20 c3 24	jsr $24c3			jsr 	IFloatCopyFromRegister
.22bc	18		clc				clc
.22bd	60		rts				rts
.22be					_IFDFDivZero:
.22be	38		sec				sec
.22bf	60		rts				rts
.22c0					IFloatDivideSupport:
.22c0	a2 18		ldx #$18			ldx 	#IFRTemp 					; zero RTemp
.22c2	20 32 25	jsr $2532			jsr 	IFloatSetZero
.22c5	5a		phy				phy 								; main division loop x 23
.22c6	a0 17		ldy #$17			ldy 	#23
.22c8					_IFDSLoop:
.22c8	20 fb 20	jsr $20fb			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.22cb	20 ef 20	jsr $20ef			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.22ce	88		dey				dey
.22cf	d0 f7		bne $22c8			bne 	_IFDSLoop 					; do it 24 times
.22d1	7a		ply				ply
.22d2	60		rts				rts
.22d3					IFloatIntegerToStringR0:
.22d3	8d b9 04	sta $04b9			sta 	IFBase 						; save base to use.
.22d6	20 b3 25	jsr $25b3			jsr 	IFloatBufferReset			; empty buffer
.22d9	a5 0f		lda $0f				lda 	IFR0+IExp					; check integer
.22db	29 3f		and #$3f			and 	#IFXMask
.22dd	d0 1e		bne $22fd			bne 	_IFIFail
.22df	a2 0c		ldx #$0c			ldx 	#IFR0 						; skip - check if zero.
.22e1	20 2b 25	jsr $252b			jsr 	IFloatCheckZero
.22e4	f0 0e		beq $22f4			beq 	_IFINotNegative
.22e6	a5 0f		lda $0f				lda 	IFR0+IExp 					; is signed ?
.22e8	29 40		and #$40			and 	#IFSign
.22ea	f0 08		beq $22f4			beq 	_IFINotNegative
.22ec	a9 2d		lda #$2d			lda 	#"-"						; output -
.22ee	20 c2 25	jsr $25c2			jsr 	IFloatBufferWrite
.22f1	20 3d 25	jsr $253d			jsr 	IFloatNegate 				; tidy up !
.22f4					_IFINotNegative:
.22f4	20 ff 22	jsr $22ff			jsr 	_IFIRecursiveConvert 		; start converting
.22f7	20 ba 25	jsr $25ba			jsr 	IFloatGetBufferAddress
.22fa	18		clc				clc
.22fb	80 01		bra $22fe			bra 	_IFIExit
.22fd					_IFIFail:
.22fd	38		sec				sec
.22fe					_IFIExit:
.22fe	60		rts				rts
.22ff					_IFIRecursiveConvert:
.22ff	a2 10		ldx #$10			ldx 	#IFR1
.2301	20 d4 24	jsr $24d4			jsr 	IFloatCopyToRegister 		; R0->R1
.2304	a2 0c		ldx #$0c			ldx 	#IFR0
.2306	ad b9 04	lda $04b9			lda 	IFBase 						; Base -> R0
.2309	20 34 25	jsr $2534			jsr 	IFloatSetByte
.230c	a2 10		ldx #$10			ldx 	#IFR1 						; R0 = R1 / R0
.230e	20 97 20	jsr $2097			jsr 	IFloatDivideInteger
.2311	a2 0c		ldx #$0c			ldx 	#IFR0 						; if result <> 0
.2313	20 2b 25	jsr $252b			jsr 	IFloatCheckZero
.2316	f0 09		beq $2321			beq 	_IFIOutDigit
.2318	a5 10		lda $10				lda 	IFR1+IM0 					; save remainder
.231a	48		pha				pha
.231b	20 ff 22	jsr $22ff			jsr 	_IFIRecursiveConvert 		; convert the divider
.231e	68		pla				pla
.231f	85 10		sta $10				sta 	IFR1+IM0 					; restore remainder
.2321					_IFIOutDigit:
.2321	a5 10		lda $10				lda 	IFR1+IM0 					; get remainder.
.2323	c9 0a		cmp #$0a			cmp	 	#10
.2325	90 02		bcc $2329			bcc 	_IFINotHex
.2327	69 06		adc #$06			adc 	#6
.2329					_IFINotHex:
.2329	69 30		adc #$30			adc 	#48
.232b	20 c2 25	jsr $25c2			jsr 	IFloatBufferWrite
.232e	60		rts				rts
.04b9					IFBase:
>04b9							.fill 	1
.232f					IFloatFloatToStringR0:
.232f	a2 14		ldx #$14			ldx 	#IFR2 						; copy R2 to stack,value to R2
.2331	20 81 24	jsr $2481			jsr 	IFloatPushRx
.2334	20 d4 24	jsr $24d4			jsr 	IFloatCopyToRegister
.2337	20 32 22	jsr $2232			jsr 	IFloatIntegerR0				; make R0 integer
.233a	a9 0a		lda #$0a			lda 	#10 						; base 10.
.233c	20 d3 22	jsr $22d3			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.233f	9c ba 04	stz $04ba			stz 	IFloatDecimalCount 			; zero the decimal count.
.2342	a5 17		lda $17				lda 	IFR2+IExp 					; is integer.
.2344	29 3f		and #$3f			and 	#IFXMask
.2346	f0 44		beq $238c			beq 	_IFFSExit
.2348					_IFloatFracLoop:
.2348	a2 14		ldx #$14			ldx 	#IFR2 						; R0 = fractional part of R2
.234a	20 c3 24	jsr $24c3			jsr 	IFloatCopyFromRegister
.234d	20 dc 21	jsr $21dc			jsr 	IFloatFractionalR0
.2350	20 69 25	jsr $2569			jsr 	IFloatNormalise
.2353	a2 14		ldx #$14			ldx 	#IFR2
.2355	20 d4 24	jsr $24d4			jsr 	IFloatCopyToRegister 		; copy to R2
.2358	a2 14		ldx #$14			ldx 	#IFR2 						; set R2 to 10
.235a	a9 0a		lda #$0a			lda 	#10
.235c	20 34 25	jsr $2534			jsr 	IFloatSetByte
.235f	a2 14		ldx #$14			ldx 	#IFR2						; R0,R2 = R2 * 10
.2361	20 d2 1f	jsr $1fd2			jsr 	IFloatMultiply
.2364	a2 14		ldx #$14			ldx 	#IFR2
.2366	20 d4 24	jsr $24d4			jsr 	IFloatCopyToRegister
.2369	20 32 22	jsr $2232			jsr 	IFloatIntegerR0 			; get integer part of R0
.236c	ad ba 04	lda $04ba			lda 	IFloatDecimalCount 			; done 5 dp, no more
.236f	c9 03		cmp #$03			cmp 	#3
.2371	f0 16		beq $2389			beq 	_IFFSExitStripZero
.2373	ad ba 04	lda $04ba			lda 	IFloatDecimalCount 			; written the DP yet ?
.2376	d0 05		bne $237d			bne 	_IFloatNotFirst
.2378	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.237a	20 c2 25	jsr $25c2			jsr 	IFloatBufferWrite
.237d					_IFloatNotFirst:
.237d	ee ba 04	inc $04ba			inc 	IFloatDecimalCount
.2380	a5 0c		lda $0c				lda 	IFR0+IM0 					; get digit
.2382	09 30		ora #$30			ora 	#"0"						; ASCII
.2384	20 c2 25	jsr $25c2			jsr 	IFloatBufferWrite 			; write to the buffer.
.2387	80 bf		bra $2348			bra 	_IFloatFracLoop
.2389					_IFFSExitStripZero:
.2389	20 d1 25	jsr $25d1			jsr 	IFloatStripTrailingZeros
.238c					_IFFSExit:
.238c	a2 14		ldx #$14			ldx 	#IFR2 						; restore R2
.238e	20 a2 24	jsr $24a2			jsr 	IFloatPullRx
.2391	20 ba 25	jsr $25ba			jsr 	IFloatGetBufferAddress
.2394	18		clc				clc
.2395	60		rts				rts
.04ba					IFloatDecimalCount:
>04ba							.fill 	1
.2396					IFloatStringToFloatR0:
.2396	8d bb 04	sta $04bb			sta 	IFCount 					; save it out.
.2399	86 0a		stx $0a				stx 	iTemp0
.239b	84 0b		sty $0b				sty 	iTemp0+1
.239d	a2 0c		ldx #$0c			ldx 	#IFR0 						; reset the current value.
.239f	20 32 25	jsr $2532			jsr 	IFloatSetZero
.23a2	9c bc 04	stz $04bc			stz 	IFSignFlag 					; clear the sign flag
.23a5	20 32 24	jsr $2432			jsr 	IFSTFGetNext 				; get first
.23a8	f0 1b		beq $23c5			beq 	_IFSTFFail 					; no character
.23aa	90 10		bcc $23bc			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.23ac	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.23ae	d0 15		bne $23c5			bne 	_IFSTFFail
.23b0	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.23b2	8d bc 04	sta $04bc			sta 	IFSignFlag
.23b5					_IFSTFLoop:
.23b5	20 32 24	jsr $2432			jsr 	IFSTFGetNext 				; get next
.23b8	b0 0b		bcs $23c5			bcs 	_IFSTFFail 					; bad character.
.23ba	f0 11		beq $23cd			beq 	_IFSTFExit 					; end of data
.23bc					_IFSTFHaveChar:
.23bc	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ?
.23be	f0 08		beq $23c8			beq 	_IFSTFDecimal
.23c0	20 56 24	jsr $2456			jsr 	IFSTFAddR0 					; add number in
.23c3	80 f0		bra $23b5			bra 	_IFSTFLoop 					; keep going until . or end.
.23c5					_IFSTFFail:
.23c5	38		sec				sec
.23c6	80 0d		bra $23d5			bra 	_IFSTFReturn
.23c8					_IFSTFDecimal:
.23c8	20 dd 23	jsr $23dd			jsr 	IFSTFDecimal 				; call the decimal places code.
.23cb	b0 08		bcs $23d5			bcs 	_IFSTFReturn 				; error
.23cd					_IFSTFExit:
.23cd	a5 0f		lda $0f				lda 	IFR0+IExp 					; copy sign flag in.
.23cf	0d bc 04	ora $04bc			ora 	IFSignFlag
.23d2	85 0f		sta $0f				sta 	IFR0+IExp
.23d4	18		clc				clc
.23d5					_IFSTFReturn:
.23d5	60		rts				rts
.23d6					IFloatAddDecimalToR0:
.23d6	8d bb 04	sta $04bb			sta 	IFCount 					; save it out.
.23d9	86 0a		stx $0a				stx 	iTemp0
.23db	84 0b		sty $0b				sty 	iTemp0+1
.23dd					IFSTFDecimal:
.23dd	a2 0c		ldx #$0c			ldx 	#IFR0 						; push integer part on stack
.23df	20 81 24	jsr $2481			jsr 	IFloatPushRx
.23e2	a2 0c		ldx #$0c			ldx 	#IFR0 						; R0 is the decimal digits so far.
.23e4	20 32 25	jsr $2532			jsr 	IFloatSetZero
.23e7	9c bd 04	stz $04bd			stz 	IFDecimalPlaces
.23ea					_IFSTDLoop:
.23ea	20 32 24	jsr $2432			jsr 	IFSTFGetNext 				; get next
.23ed	b0 41		bcs $2430			bcs 	_IFSTFFail2 				; bad character.
.23ef	f0 11		beq $2402			beq 	_IFSTFComplete 				; end of data, work out the result.
.23f1	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.23f3	f0 39		beq $242e			beq 	_IFSTFExit2
.23f5	20 56 24	jsr $2456			jsr 	IFSTFAddR0 					; add number in
.23f8	ee bd 04	inc $04bd			inc 	IFDecimalPlaces 			; count decimals
.23fb	ad bd 04	lda $04bd			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.23fe	c9 03		cmp #$03			cmp 	#3
.2400	90 e8		bcc $23ea			bcc 	_IFSTDLoop
.2402					_IFSTFComplete:
.2402	ad bd 04	lda $04bd			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.2405	f0 27		beq $242e			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.2407	3a		dec a				dec 	a 							; table indexed from 1.
.2408	0a		asl a				asl 	a
.2409	0a		asl a				asl 	a
.240a	aa		tax				tax
.240b	bd 6d 24	lda $246d,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.240e	85 10		sta $10				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.2410	bd 6e 24	lda $246e,x			lda 	TableTen+1,x
.2413	85 11		sta $11				sta  	IFR1+IM1
.2415	bd 6f 24	lda $246f,x			lda 	TableTen+2,x
.2418	85 12		sta $12				sta  	IFR1+IM2
.241a	bd 70 24	lda $2470,x			lda 	TableTen+3,x
.241d	85 13		sta $13				sta  	IFR1+IExp
.241f	a2 10		ldx #$10			ldx 	#IFR1 						; multiply into result
.2421	20 d2 1f	jsr $1fd2			jsr 	IFloatMultiply
.2424	a2 10		ldx #$10			ldx 	#IFR1  						; pop and add the decimal.
.2426	20 a2 24	jsr $24a2			jsr 	IFloatPullRx
.2429	a2 10		ldx #$10			ldx 	#IFR1
.242b	20 28 1f	jsr $1f28			jsr 	IFloatAdd
.242e					_IFSTFExit2:
.242e	18		clc				clc
.242f	60		rts				rts
.2430					_IFSTFFail2:
.2430	38		sec				sec
.2431	60		rts				rts
.2432					IFSTFGetNext:
.2432	ad bb 04	lda $04bb			lda 	IFCount  					; if count is zero, return with Z set.
.2435	f0 19		beq $2450			beq 	_IFSTFReturnOk
.2437	b2 0a		lda ($0a)			lda 	(iTemp0) 					; get next character
.2439	e6 0a		inc $0a				inc 	iTemp0 						; point at next.
.243b	d0 02		bne $243f			bne 	_IFSTFGNNoCarry
.243d	e6 0b		inc $0b				inc 	iTemp0+1
.243f					_IFSTFGNNoCarry:
.243f	ce bb 04	dec $04bb			dec 	IFCount 					; dec count.
.2442	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.2444	f0 08		beq $244e			beq 	_IFSTFGOkay
.2446	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.2448	90 08		bcc $2452			bcc 	_IFSTFGFail
.244a	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.244c	b0 04		bcs $2452			bcs 	_IFSTFGFail
.244e					_IFSTFGOkay:
.244e	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2450					_IFSTFReturnOk:
.2450	18		clc				clc
.2451	60		rts				rts
.2452					_IFSTFGFail:
.2452	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.2454	38		sec				sec
.2455	60		rts				rts
.2456					IFSTFAddR0:
.2456	29 0f		and #$0f			and 	#15 						; to int value
.2458	48		pha				pha 								; save it.
.2459	a9 0a		lda #$0a			lda 	#10
.245b	a2 10		ldx #$10			ldx 	#IFR1
.245d	20 34 25	jsr $2534			jsr 	IFloatSetByte
.2460	20 d2 1f	jsr $1fd2			jsr 	IFloatMultiply
.2463	68		pla				pla
.2464	a2 10		ldx #$10			ldx 	#IFR1
.2466	20 34 25	jsr $2534			jsr 	IFloatSetByte
.2469	20 28 1f	jsr $1f28			jsr 	IFloatAdd
.246c	60		rts				rts
.04bb					IFCount:
>04bb							.fill 	1
.04bc					IFSignFlag:
>04bc							.fill 	1
.04bd					IFDecimalPlaces:
>04bd							.fill 	1
.246d					TableTen:
>246d	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>2471	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>2475	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>2479	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>247d	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.2481					IFloatPushRx:
.2481	5a		phy				phy
.2482	ac be 04	ldy $04be			ldy 	IFStackIndex
.2485	b5 00		lda $00,x			lda 	IM0,x
.2487	99 bf 04	sta $04bf,y			sta 	IFStack,y
.248a	b5 01		lda $01,x			lda 	IM1,x
.248c	99 c0 04	sta $04c0,y			sta 	IFStack+1,y
.248f	b5 02		lda $02,x			lda 	IM2,x
.2491	99 c1 04	sta $04c1,y			sta 	IFStack+2,y
.2494	b5 03		lda $03,x			lda 	IExp,x
.2496	99 c2 04	sta $04c2,y			sta 	IFStack+3,y
.2499	c8		iny				iny
.249a	c8		iny				iny
.249b	c8		iny				iny
.249c	c8		iny				iny
.249d	8c be 04	sty $04be			sty 	IFStackIndex
.24a0	7a		ply				ply
.24a1	60		rts				rts
.24a2					IFloatPullRx:
.24a2	5a		phy				phy
.24a3	ac be 04	ldy $04be			ldy 	IFStackIndex
.24a6	88		dey				dey
.24a7	88		dey				dey
.24a8	88		dey				dey
.24a9	88		dey				dey
.24aa	b9 bf 04	lda $04bf,y			lda 	IFStack,y
.24ad	95 00		sta $00,x			sta 	IM0,x
.24af	b9 c0 04	lda $04c0,y			lda 	IFStack+1,y
.24b2	95 01		sta $01,x			sta 	IM1,x
.24b4	b9 c1 04	lda $04c1,y			lda 	IFStack+2,y
.24b7	95 02		sta $02,x			sta 	IM2,x
.24b9	b9 c2 04	lda $04c2,y			lda 	IFStack+3,y
.24bc	95 03		sta $03,x			sta 	IExp,x
.24be	8c be 04	sty $04be			sty 	IFStackIndex
.24c1	7a		ply				ply
.24c2	60		rts				rts
.04be					IFStackIndex:
>04be							.fill 	1
.04bf					IFStack:
>04bf							.fill 	16*4
.24c3					IFloatCopyFromRegister:
.24c3	b5 00		lda $00,x			lda 	0,x
.24c5	85 0c		sta $0c				sta 	IFR0
.24c7	b5 01		lda $01,x			lda 	1,x
.24c9	85 0d		sta $0d				sta 	IFR0+1
.24cb	b5 02		lda $02,x			lda 	2,x
.24cd	85 0e		sta $0e				sta 	IFR0+2
.24cf	b5 03		lda $03,x			lda 	3,x
.24d1	85 0f		sta $0f				sta 	IFR0+3
.24d3	60		rts				rts
.24d4					IFloatCopyToRegister:
.24d4	a5 0c		lda $0c				lda 	IFR0
.24d6	95 00		sta $00,x			sta 	0,x
.24d8	a5 0d		lda $0d				lda 	IFR0+1
.24da	95 01		sta $01,x			sta 	1,x
.24dc	a5 0e		lda $0e				lda 	IFR0+2
.24de	95 02		sta $02,x			sta 	2,x
.24e0	a5 0f		lda $0f				lda 	IFR0+3
.24e2	95 03		sta $03,x			sta 	3,x
.24e4	60		rts				rts
.24e5					IFloatLoadInline:
.24e5	68		pla				pla 								; pop address off to iTemp0
.24e6	85 0a		sta $0a				sta 	iTemp0
.24e8	68		pla				pla
.24e9	85 0b		sta $0b				sta 	iTemp0+1
.24eb	a0 01		ldy #$01			ldy 	#1
.24ed	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 0
.24ef	95 00		sta $00,x			sta 	0,x
.24f1	c8		iny				iny
.24f2	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 1
.24f4	95 01		sta $01,x			sta 	1,x
.24f6	c8		iny				iny
.24f7	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 2
.24f9	95 02		sta $02,x			sta 	2,x
.24fb	c8		iny				iny
.24fc	b1 0a		lda ($0a),y			lda 	(iTemp0),y 					; copy byte 3
.24fe	95 03		sta $03,x			sta 	3,x
.2500	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.2501	a5 0a		lda $0a				lda 	iTemp0
.2503	69 05		adc #$05			adc 	#5
.2505	85 0a		sta $0a				sta 	iTemp0
.2507	90 02		bcc $250b			bcc 	_IFLINoCarry
.2509	e6 0b		inc $0b				inc 	iTemp0+1
.250b					_IFLINoCarry:
.250b	6c 0a 00	jmp ($000a)			jmp 	(iTemp0)					; effectively RTS
.250e					IFloatMultiply8BitRx:
.250e	5a		phy		        phy
.250f	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.2511	a4 0c		ldy $0c		        ldy     IFR0+IM0
.2513	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.2514	85 0c		sta $0c		        sta     IFR0+IM0
.2516	84 0d		sty $0d		        sty     IFR0+IM1
.2518	a9 00		lda #$00	        lda     #0
.251a	a0 08		ldy #$08	        ldy     #8
.251c					_IFMLoop:
.251c	90 03		bcc $2521	        bcc     _IFMNoAdd
.251e	18		clc		        clc
.251f	65 0d		adc $0d		        adc     IFR0+IM1
.2521					_IFMNoAdd:
.2521	6a		ror a		        ror     a
.2522	66 0c		ror $0c		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.2524	88		dey		        dey
.2525	d0 f5		bne $251c	        bne     _IFMLoop
.2527	85 0d		sta $0d		        sta     IFR0+IM1                    ; write MSB out
.2529	7a		ply		        ply
.252a	60		rts		        rts
.252b					IFloatCheckZero:
.252b	b5 00		lda $00,x			lda 	IM0,x
.252d	15 01		ora $01,x			ora 	IM1,x
.252f	15 02		ora $02,x			ora 	IM2,x
.2531	60		rts				rts
.2532					IFloatSetZero:
.2532	a9 00		lda #$00			lda 	#0
.2534					IFloatSetByte:
.2534	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00A
.2536	74 01		stz $01,x			stz 	IM1,x
.2538	74 02		stz $02,x			stz 	IM2,x
.253a	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.253c	60		rts				rts
.253d					IFloatNegate:
.253d	b5 03		lda $03,x			lda 	IExp,x
.253f	49 40		eor #$40			eor 	#IFSign
.2541	95 03		sta $03,x			sta 	IExp,x
.2543	18		clc				clc
.2544	60		rts				rts
.2545					IFloatMantissaNegate:
.2545	38		sec				sec
.2546	a9 00		lda #$00			lda 	#0
.2548	f5 00		sbc $00,x			sbc 	IM0,x
.254a	95 00		sta $00,x			sta 	IM0,x
.254c	a9 00		lda #$00			lda 	#0
.254e	f5 01		sbc $01,x			sbc 	IM1,x
.2550	95 01		sta $01,x			sta 	IM1,x
.2552	a9 00		lda #$00			lda 	#0
.2554	f5 02		sbc $02,x			sbc 	IM2,x
.2556	95 02		sta $02,x			sta 	IM2,x
.2558	60		rts				rts
.2559					IFloatShiftLeft:
.2559	18		clc				clc
.255a					IFloatRotateLeft:
.255a	36 00		rol $00,x			rol 	IM0,x
.255c	36 01		rol $01,x			rol 	IM1,x
.255e	36 02		rol $02,x			rol 	IM2,x
.2560	60		rts				rts
.2561					IFloatShiftRight:
.2561	18		clc				clc
.2562					IFloatRotateRight:
.2562	76 02		ror $02,x			ror 	IM2,x
.2564	76 01		ror $01,x			ror 	IM1,x
.2566	76 00		ror $00,x			ror 	IM0,x
.2568	60		rts				rts
.2569					IFloatNormalise:
.2569	20 2b 25	jsr $252b			jsr 	IFloatCheckZero 			; is it zero
.256c	f0 18		beq $2586			beq 	_IFNExitZero 				; if so exit
.256e					_IFNLoop:
.256e	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.2570	29 c0		and #$c0			and 	#$C0
.2572	c9 40		cmp #$40			cmp 	#$40
.2574	f0 13		beq $2589			beq 	_IFNExitOkay 				; if so , then we are done.
.2576	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.2578	29 3f		and #$3f			and 	#$3F
.257a	c9 20		cmp #$20			cmp 	#$20
.257c	f0 0b		beq $2589			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.257e	20 9f 25	jsr $259f			jsr 	IFloatDecExponent
.2581	20 59 25	jsr $2559			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.2584	80 e8		bra $256e			bra 	_IFNLoop
.2586					_IFNExitZero:
.2586	20 32 25	jsr $2532			jsr 	IFloatSetZero 				; set the result to zero
.2589					_IFNExitOkay:
.2589	18		clc				clc  								; return with CC.
.258a	60		rts				rts
.258b					IFloatIncExponent:
.258b	b5 03		lda $03,x			lda 	IExp,x
.258d	48		pha				pha
.258e	29 c0		and #$c0			and 	#$C0
.2590	8d ff 04	sta $04ff			sta 	IFXTemp
.2593	68		pla				pla
.2594	1a		inc a				inc 	a
.2595	29 3f		and #$3f			and 	#$3F
.2597	48		pha				pha
.2598	0d ff 04	ora $04ff			ora 	IFXTemp
.259b	95 03		sta $03,x			sta 	IExp,x
.259d	68		pla				pla
.259e	60		rts				rts
.259f					IFloatDecExponent:
.259f	b5 03		lda $03,x			lda 	IExp,x
.25a1	48		pha				pha
.25a2	29 c0		and #$c0			and 	#$C0
.25a4	8d ff 04	sta $04ff			sta 	IFXTemp
.25a7	68		pla				pla
.25a8	3a		dec a				dec 	a
.25a9	29 3f		and #$3f			and 	#$3F
.25ab	48		pha				pha
.25ac	0d ff 04	ora $04ff			ora 	IFXTemp
.25af	95 03		sta $03,x			sta 	IExp,x
.25b1	68		pla				pla
.25b2	60		rts				rts
.04ff					IFXTemp:
>04ff							.fill 	1
.25b3					IFloatBufferReset:
.25b3	9c 00 05	stz $0500			stz 	IFBufferCount
.25b6	9c 01 05	stz $0501			stz 	IFBuffer
.25b9	60		rts				rts
.25ba					IFloatGetBufferAddress:
.25ba	a0 05		ldy #$05			ldy 	#(IFBuffer >> 8)
.25bc	a2 01		ldx #$01			ldx 	#(IFBuffer & $FF)
.25be	ad 00 05	lda $0500			lda 	IFBufferCount
.25c1	60		rts				rts
.25c2					IFloatBufferWrite:
.25c2	da		phx				phx
.25c3	ae 00 05	ldx $0500			ldx 	IFBufferCount
.25c6	9d 01 05	sta $0501,x			sta 	IFBuffer,x
.25c9	9e 02 05	stz $0502,x			stz 	IFBuffer+1,x
.25cc	ee 00 05	inc $0500			inc 	IFBufferCount
.25cf	fa		plx				plx
.25d0	60		rts				rts
.25d1					IFloatStripTrailingZeros:
.25d1	ae 00 05	ldx $0500			ldx 	IFBufferCount
.25d4	bd 00 05	lda $0500,x			lda 	IFBuffer-1,x
.25d7	c9 30		cmp #$30			cmp		#"0"
.25d9	d0 0f		bne $25ea			bne 	_IFSTExit
.25db	bd ff 04	lda $04ff,x			lda 	IFBuffer-2,x
.25de	c9 2e		cmp #$2e			cmp 	#"."
.25e0	f0 08		beq $25ea			beq 	_IFSTExit
.25e2	ce 00 05	dec $0500			dec 	IFBufferCount
.25e5	9e 00 05	stz $0500,x			stz 	IFBuffer-1,x
.25e8	80 e7		bra $25d1			bra 	IFloatStripTrailingZeros
.25ea					_IFSTExit:
.25ea	60		rts				rts
.0500					IFBufferCount:
>0500							.fill 	1
.0501					IFBuffer:
>0501							.fill 	25
.25eb					IFloatCheck:
.25eb	a5 0f		lda $0f				lda 	IFR0+IExp					; force it negative
.25ed	09 40		ora #$40			ora 	#IFSign
.25ef	85 0f		sta $0f				sta 	IFR0+IExp
.25f1	20 28 1f	jsr $1f28			jsr 	IFloatAdd 					; add allowed to error.
.25f4	a2 0c		ldx #$0c			ldx 	#IFR0
.25f6	20 2b 25	jsr $252b			jsr 	IFloatCheckZero 			; error if < 0
.25f9	f0 06		beq $2601			beq 	_IFAOkay
.25fb	a5 0f		lda $0f				lda 	IFR0+IExp
.25fd	29 40		and #$40			and 	#IFSign
.25ff	d0 01		bne $2602			bne 	_IFAFail
.2601					_IFAOkay:
.2601	60		rts				rts
.2602					_IFAFail:
.2602	38		sec				sec
.2603	68		pla				pla 								; get address - 2
.2604	e9 02		sbc #$02			sbc 	#2
.2606	aa		tax				tax
.2607	68		pla				pla
.2608	e9 00		sbc #$00			sbc 	#0
.260a	a8		tay				tay
.260b	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.260d					_IFAStop:
>260d	db						.byte 	$DB 						; display an error AA ADR ADR
.260e	80 fd		bra $260d			bra 	_IFAStop

;******  Return to file: basic.asm

.2610					NotImplemented:
.2610	a9 ff		lda #$ff			lda 	#$FF
.2612	80 04		bra $2618			bra 	EnterDbg
.2614					ErrorHandler:
.2614	fa		plx				plx
.2615	7a		ply				ply
.2616	a9 ee		lda #$ee			lda 	#$EE
.2618					EnterDbg:
>2618	db						.byte 	$DB
.2619	4c 18 26	jmp $2618			jmp 	EnterDbg

;******  End of listing
