
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q -Wall -c -C -b -L build/code.lst -l build/code.lbl -D "BASICLOAD=\$1000" -D "BASICCODE=\$3800" -D "ENDMEMORY=\$C000" -D STACKPAGES=2 -D autoRun=1 -o build/basic.bin basic.asm
; Tue Jul  4 09:50:52 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=$1000					BASICLOAD=$1000
=$3800					BASICCODE=$3800
=$c000					ENDMEMORY=$C000
=2					STACKPAGES=2
=1					autoRun=1

;******  Processing input file: basic.asm


;******  Processing file: build/ramdata.inc

=$08					ZeroPageBase = $08 							; zero page usage
=$200					StorageBase = $200 							; ROM usage
.0008					IFR0:
>0008							.fill 	4
.000c					IFR1:
>000c							.fill 	4
.0010					IFR2:
>0010							.fill 	4
.0014					IFRTemp:
>0014							.fill 	4
.0018					codePtr:
>0018							.fill 	4
.001c					rTemp0:
>001c							.fill 	2
.001e					rTemp1:
>001e							.fill 	2
.0020					iTemp0:
>0020							.fill 	2
.0200					OSNewLineFlag:
>0200							.fill 	32
.0220					OSXPos:
>0220							.fill 	1
.0221					OSYPos:
>0221							.fill 	1
.0222					OSXSize:
>0222							.fill 	1
.0223					OSYSize:
>0223							.fill 	1
.0224					OSXPosSave:
>0224							.fill 	1
.0225					OSYPosSave:
>0225							.fill 	1
.0226					OSYFrameTop:
>0226							.fill 	1
.0227					OSYFrameBottom:
>0227							.fill 	1
=16					OSKeyboardQueueMaxSize = 16					; keyboard queue max size.
.0228					OSKeyStatus:
>0228							.fill 	32
.0248					OSKeyboardQueue:
>0248							.fill 	OSKeyboardQueueMaxSize
.0258					OSKeyboardQueueSize:
>0258							.fill 	1
.0259					OSIsKeyUp:
>0259							.fill 	1
.025a					OSIsKeyShift:
>025a							.fill 	1
.025b					OSEscapePressed:
>025b							.fill 	1
.025c					OSRKOriginal:
>025c							.fill 	1
=192					OSTextBufferSize = 192
.025d					OSEditWidth:
>025d							.fill 	1
.025e					OSEditLength:
>025e							.fill 	1
.025f					OSEditBuffer:
>025f							.fill 	OSTextBufferSize+1
>0320							.fill 	32
.0022					fsBlock:
>0022							.fill 	2
.0340					sectorSize:
>0340							.fill 	2
.0342					sectorCount:
>0342							.fill 	2
.0344					currentSector:
>0344							.fill 	2
.0346					successFlag:
>0346							.fill 	1
.0347					sectorHeader:
.0347					shFirstNext:
>0347							.fill 	1
.0348					shContinue:
>0348							.fill 	1
.0349					shDataSize:
>0349							.fill 	2
.034b					shFileSize:
>034b							.fill 	2
>034d							.fill 	10
.0357					shNameLength:
>0357							.fill 	1
.0358					shNameText:
>0358							.fill 	15
.0367					shFileSizeCopy:
>0367							.fill 	2
.0369					notFirstSector:
>0369							.fill 	1
.036a					sectorCapacity:
>036a							.fill 	2
.036c					fileRemainingSize:
>036c							.fill 	2
.036e					bytesToWrite:
>036e							.fill 	2
>0370							.align 	256

;******  Return to file: basic.asm


;******  Processing file: build/osvectors.inc

=$ffcd					OSReadDirectory          = $ffcd ; Read file directory.
=$ffd0					OSDeleteFile             = $ffd0 ; Delete file
=$ffd3					OSReadFile               = $ffd3 ; Read file into memory
=$ffd6					OSWriteFile              = $ffd6 ; Write file from memory
=$ffd9					OSGetScreenPosition      = $ffd9 ; Screen position to XY
=$ffdc					OSGetScreenSize          = $ffdc ; Get size of screen to XY
=$ffdf					OSWriteString            = $ffdf ; Write length prefixed string YX to screen
=$ffe2					OSEnterLine              = $ffe2 ; Edit line, return line in YX length prefixed, backspace only editing.
=$ffe5					OSScreenLine             = $ffe5 ; Edit line, return line in YX length prefixed, full screen editing.
=$ffe8					OSKeyboardDataProcess    = $ffe8 ; Keyboard update process.
=$ffeb					OSCheckBreak             = $ffeb ; NZ if ESC pressed.
=$ffee					OSIsKeyAvailable         = $ffee ; Check if key available (CS if so)
=$fff1					OSReadKeystroke          = $fff1 ; Read A from keyboard, display cursor, wait for key.
=$fff4					OSReadKeyboard           = $fff4 ; Read A from keyboard, CC = success, CS = no key
=$fff7					OSWriteScreen            = $fff7 ; Write A to screen, CC = success

;******  Return to file: basic.asm

=0					runEdit = 0 								; setting to 1 builds with the program/testing stuff in.
=0					autoRun = 0 								; setting to 1 autoruns program in memory space.
=2					STACK_PAGES = 2 							; number of stack pages.
.1000					boot:
.1000	a2 38		ldx #$38			ldx 	#BASICCODE >> 8 			; common setup, tells BASIC where its memory area is.
.1002	a0 c0		ldy #$c0			ldy 	#ENDMEMORY >> 8
.1004	20 b3 20	jsr $20b3			jsr 	PGMSetBaseAddress
.1007	20 5a 2d	jsr $2d5a			jsr 	IFInitialise 				; setup math library
.100a	a9 0c		lda #$0c			lda 	#12
.100c	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.100f	4c c8 14	jmp $14c8			jmp 	Command_RUN
.1012	4c 10 14	jmp $1410			jmp 	Command_NEW 				; most just start with this

;******  Processing file: include.files


;******  Processing file: src/assembler/assembler.inc

=$80					AM_ZPAGE 		= $80 						; bit 7 set for ZP/8 bit operands only
="I"					AM_IMPLIED 		= 'I'						; none
=$a3					AM_IMMEDIATE 	= ('#'|AM_ZPAGE)			; immediate
="A"					AM_ABSOLUTE 	= 'A' 			 			; lda nnnn
="X"					AM_ABSOLUTEX 	= 'X' 						; lda nnnn,x
="Y"					AM_ABSOLUTEY 	= 'Y' 						; lda nnnn.y
="I"					AM_ABSOLUTEIX	= 'I' 						; jmp (nnnn,x) [only instance !]
=$c1					AM_ZERO 	= ('A'|AM_ZPAGE) 				; lda nn
=$d8					AM_ZEROX 	= ('X'|AM_ZPAGE)				; lda nn,x
=$d9					AM_ZEROY 	= ('Y'|AM_ZPAGE)				; lda nn,y
=$d0					AM_IND 		= ('P'|AM_ZPAGE) 				; lda (nn)
=$d1					AM_INDX		= ('Q'|AM_ZPAGE) 				; lda (nn,x)
=$d2					AM_INDY		= ('R'|AM_ZPAGE) 				; lda (nn,y)

;******  Return to file: include.files


;******  Processing file: src/data.inc

.0024					zTemp0:
>0024							.fill 	2
.0026					zTemp1:
>0026							.fill 	2
.0028					zTemp2:
>0028							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/generated/token_const.inc

=$80					PR_STRUCTURE_FIRST = $80
=$80					PR_REPEAT = $80
=$81					PR_UNTIL = $81
=$82					PR_WHILE = $82
=$83					PR_WEND = $83
=$84					PR_IF = $84
=$85					PR_ENDIF = $85
=$86					PR_DO = $86
=$87					PR_LOOP = $87
=$88					PR_PROC = $88
=$89					PR_ENDPROC = $89
=$8a					PR_FOR = $8a
=$8b					PR_STRUCTURE_LAST = $8b
=$8b					PR_NEXT = $8b
=$8c					PR_STANDARD_FIRST = $8c
=$8c					PR_LSQLSQENDRSQRSQ = $8c
=$8d					PR_LSQLSQSHIFTRSQRSQ = $8d
=$8e					PR_ELSE = $8e
=$8f					PR_THEN = $8f
=$90					PR_TO = $90
=$91					PR_STEP = $91
=$92					PR_LET = $92
=$93					PR_PRINT = $93
=$94					PR_INPUT = $94
=$95					PR_CALL = $95
=$96					PR_SYS = $96
=$97					PR_REM = $97
=$98					PR_EXIT = $98
=$99					PR_COMMA = $99
=$9a					PR_SEMICOLON = $9a
=$9b					PR_COLON = $9b
=$9c					PR_SQUOTE = $9c
=$9d					PR_RPAREN = $9d
=$9e					PR_POKE = $9e
=$9f					PR_DOKE = $9f
=$a0					PR_READ = $a0
=$a1					PR_DATA = $a1
=$a2					PR_LSQ = $a2
=$a3					PR_RSQ = $a3
=$a4					PR_HASH = $a4
=$a5					PR_STANDARD_LAST = $a5
=$a5					PR_PERIOD = $a5
=$d5					PR_UNARY_FIRST = $d5
=$d5					PR_DEEKLPAREN = $d5
=$d6					PR_PEEKLPAREN = $d6
=$d7					PR_RIGHTDOLLARLPAREN = $d7
=$d8					PR_LEFTDOLLARLPAREN = $d8
=$d9					PR_MIDDOLLARLPAREN = $d9
=$da					PR_STRDOLLARLPAREN = $da
=$db					PR_VALLPAREN = $db
=$dc					PR_SGNLPAREN = $dc
=$dd					PR_ABSLPAREN = $dd
=$de					PR_LENLPAREN = $de
=$df					PR_SQRLPAREN = $df
=$e0					PR_CHRDOLLARLPAREN = $e0
=$e1					PR_ASCLPAREN = $e1
=$e2					PR_INKEYDOLLARLPAREN = $e2
=$e3					PR_EVENTLPAREN = $e3
=$e4					PR_TIME = $e4
=$e5					PR_INTLPAREN = $e5
=$e6					PR_FRACLPAREN = $e6
=$e7					PR_DECLPAREN = $e7
=$e8					PR_HEXDOLLARLPAREN = $e8
=$e9					PR_RNDLPAREN = $e9
=$ea					PR_RANDLPAREN = $ea
=$eb					PR_LPAREN = $eb
=$ec					PR_AMPERSAND = $ec
=$ed					PR_LSQLSQDECIMALRSQRSQ = $ed
=$ee					PR_UNARY_LAST = $ee
=$ee					PR_LSQLSQSTRINGRSQRSQ = $ee
=$ef					PR_BINARY_FIRST = $ef
=$ef					PR_EQUAL = $ef
=$f0					PR_LESSGREATER = $f0
=$f1					PR_LESSEQUAL = $f1
=$f2					PR_LESS = $f2
=$f3					PR_GREATEREQUAL = $f3
=$f4					PR_GREATER = $f4
=$f5					PR_XOR = $f5
=$f6					PR_OR = $f6
=$f7					PR_AND = $f7
=$f8					PR_DIV = $f8
=$f9					PR_MOD = $f9
=$fa					PR_LESSLESS = $fa
=$fb					PR_GREATERGREATER = $fb
=$fc					PR_SLASH = $fc
=$fd					PR_ASTERISK = $fd
=$fe					PR_MINUS = $fe
=$ff					PR_BINARY_LAST = $ff
=$ff					PR_PLUS = $ff
=$8d80					PR_CLEAR = $8d80
=$8d81					PR_NEW = $8d81
=$8d82					PR_RUN = $8d82
=$8d83					PR_STOP = $8d83
=$8d84					PR_END = $8d84
=$8d85					PR_ASSERT = $8d85
=$8d86					PR_LIST = $8d86
=$8d87					PR_SAVE = $8d87
=$8d88					PR_LOAD = $8d88
=$8d89					PR_GOSUB = $8d89
=$8d8a					PR_GOTO = $8d8a
=$8d8b					PR_RETURN = $8d8b
=$8d8c					PR_RESTORE = $8d8c
=$8d8d					PR_DIM = $8d8d
=$8d8e					PR_DIR = $8d8e
=$8d8f					PR_ERASE = $8d8f

;******  Return to file: include.files


;******  Processing file: src/program/data.inc

.0400					TOKLineSize:
>0400							.fill 	1
.0401					TOKLineNumber:
>0401							.fill 	2
.0403					TOKBuffer:
>0403							.fill 	256

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.inc


;******  Return to file: include.files


;******  Processing file: src/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$37					STK_FOR = $37
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: include.files


;******  Processing file: src/commands/assert.asm

.1015					Command_ASSERT:
.1015	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; get a number to assert
.1018	a2 08		ldx #$08			ldx 	#IFR0						; check if it is zero ?
.101a	20 66 33	jsr $3366			jsr 	IFloatCheckZero
.101d	f0 01		beq $1020			beq 	_CAFail 					; if so, the assert fails.
.101f	60		rts				rts
.1020					_CAFail:
.1020	4c 4d 27	jmp $274d		jmp	ErrorV_assert

;******  Return to file: include.files


;******  Processing file: src/commands/clear.asm

.1023					Command_CLEAR:
.1023	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for CLEAR <something>
.1025	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1027	f0 14		beq $103d			beq 	_CLNoParam
.1029	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.102b	f0 10		beq $103d			beq 	_CLNoParam
.102d	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; address for CLEAR
.1030	a5 09		lda $09				lda 	IFR0+IM1 					; high byte
.1032	c9 c0		cmp #$c0			cmp 	#ENDMEMORY >> 8 			; too high
.1034	b0 0b		bcs $1041			bcs 	_CLMemory
.1036	c9 39		cmp #$39			cmp 	#(BASICCODE >> 8)+1 		; too low
.1038	90 07		bcc $1041			bcc 	_CLMemory
.103a	8d 1b 05	sta $051b			sta 	PGMEndMemoryHigh 			; update end of memory, reserving bits.
.103d					_CLNoParam:
.103d	20 44 10	jsr $1044			jsr 	ClearCode
.1040	60		rts				rts
.1041					_CLMemory:
.1041	4c e7 27	jmp $27e7		jmp	ErrorV_memory
.1044					ClearCode:
.1044	20 c6 20	jsr $20c6			jsr 	PGMEndProgram 				; end program => zTemp0
.1047	64 2a		stz $2a				stz 	freeMemory 					; start on next free page
.1049	a5 25		lda $25				lda 	zTemp0+1 					; for variables.
.104b	1a		inc a				inc 	a
.104c	85 2b		sta $2b				sta 	freeMemory+1
.104e	20 f9 2c	jsr $2cf9			jsr 	VARClearHashTables
.1051	ad 1b 05	lda $051b			lda 	PGMEndMemoryHigh
.1054	20 3e 29	jsr $293e			jsr 	StackReset 					; page passed on in A
.1057	20 9d 29	jsr $299d			jsr 	StringSystemInitialise
.105a	20 62 26	jsr $2662			jsr 	ScanProcedures
.105d	20 9a 14	jsr $149a			jsr 	Command_RESTORE
.1060	60		rts				rts
.1061					AllocateMemory:
.1061	5a		phy				phy 								; save Y
.1062	a4 2a		ldy $2a				ldy 	freeMemory 					; save addr.low (of final memory)
.1064	5a		phy				phy
.1065	a4 2b		ldy $2b				ldy 	freeMemory+1 				; save addr.high
.1067	5a		phy				phy
.1068	a8		tay				tay 								; count is now in XY
.1069					_AllocateLoop:
.1069	e0 00		cpx #$00			cpx 	#0 							; allocate count is zero ?
.106b	d0 04		bne $1071			bne 	_AllocateOne
.106d	c0 00		cpy #$00			cpy 	#0
.106f	f0 15		beq $1086			beq 	_AllocateExit
.1071					_AllocateOne:
.1071	a9 00		lda #$00			lda 	#0 							; zero byte
.1073	92 2a		sta ($2a)			sta 	(freeMemory)
.1075	e6 2a		inc $2a				inc 	freeMemory 					; bump pointer
.1077	d0 05		bne $107e			bne 	_AllocateSkipCarry
.1079	e6 2b		inc $2b				inc 	freeMemory+1
.107b	20 8a 10	jsr $108a			jsr 	ClearCheckMemory 			; check we haven't hit the string space.
.107e					_AllocateSkipCarry:
.107e	c0 00		cpy #$00			cpy 	#0 							; do this XY times ; decrement XY
.1080	d0 01		bne $1083			bne 	_AllocateSkipBorrow
.1082	ca		dex				dex
.1083					_AllocateSkipBorrow:
.1083	88		dey				dey
.1084	80 e3		bra $1069			bra 	_AllocateLoop
.1086					_AllocateExit:
.1086	fa		plx				plx 								; restore address
.1087	68		pla				pla
.1088	7a		ply				ply 								; restore Y
.1089	60		rts				rts
.108a					ClearCheckMemory:
.108a	a5 2b		lda $2b				lda 	freeMemory+1 				; allocatable memory
.108c	1a		inc a				inc 	a 							; spacing 2 pages
.108d	1a		inc a				inc 	a
.108e	cd 23 06	cmp $0623			cmp 	stringMemory+1 				; problems if hit string memory
.1091	b0 01		bcs $1094			bcs  	_CCMError
.1093	60		rts				rts
.1094					_CCMError:
.1094	4c e7 27	jmp $27e7		jmp	ErrorV_memory
.002a					freeMemory:
>002a							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dim.asm

.1097					CommandDIM:
.1097	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.1099	29 c0		and #$c0			and 	#$C0
.109b	c9 40		cmp #$40			cmp 	#$40
.109d	d0 39		bne $10d8			bne 	_CDSyntax
.109f	20 b0 2c	jsr $2cb0			jsr 	VARGetInfo 					; get information
.10a2	ad 31 06	lda $0631			lda 	VARType 					; check array.
.10a5	29 02		and #$02			and 	#2
.10a7	f0 2f		beq $10d8			beq 	_CDSyntax
.10a9	20 62 2c	jsr $2c62			jsr 	VARFind 					; does it already exist
.10ac	b0 2d		bcs $10db			bcs 	_CDExists
.10ae	20 0e 2c	jsr $2c0e			jsr 	VARCreate 					; create it - returns data ptr in XA
.10b1	da		phx				phx 								; save target address
.10b2	48		pha				pha
.10b3	ad 31 06	lda $0631			lda 	VARType 					; type ID.
.10b6	29 01		and #$01			and 	#1 							; 0 = Number, 1 = String.
.10b8	20 de 10	jsr $10de			jsr 	CreateArray 				; create array to XA
.10bb	84 26		sty $26				sty 	zTemp1 						; save Y
.10bd	7a		ply				ply 								; restore target to zTemp0
.10be	84 24		sty $24				sty 	zTemp0
.10c0	7a		ply				ply
.10c1	84 25		sty $25				sty 	zTemp0+1
.10c3	92 24		sta ($24)			sta 	(zTemp0) 					; save new array
.10c5	a0 01		ldy #$01			ldy 	#1
.10c7	8a		txa				txa
.10c8	91 24		sta ($24),y			sta 	(zTemp0),y
.10ca	a4 26		ldy $26				ldy 	zTemp1 						; restore zTemp1
.10cc	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 				; check )
.10cf	b1 18		lda ($18),y			lda 	(codePtr),y 				; if a comma, consume and go round again.
.10d1	c8		iny				iny
.10d2	c9 99		cmp #$99			cmp 	#PR_COMMA
.10d4	f0 c1		beq $1097			beq 	CommandDIM
.10d6	88		dey				dey
.10d7	60		rts				rts
.10d8					_CDSyntax:
.10d8	4c f7 26	jmp $26f7		jmp	ErrorV_syntax
.10db					_CDExists:
.10db	4c bf 27	jmp $27bf		jmp	ErrorV_redefine
.10de					CreateArray:
.10de	8d 03 05	sta $0503			sta 	CAType						; save type
.10e1	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; get array dimension to R0
.10e4	b1 18		lda ($18),y			lda 	(codePtr),y 				; does a comma follow, if so, 2 dimensions
.10e6	c9 99		cmp #$99			cmp 	#PR_COMMA
.10e8	f0 04		beq $10ee			beq 	_CATwoDimensions
.10ea	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create a lowest level array (e.g. data)
.10ed	60		rts				rts
.10ee					_CATwoDimensions:
.10ee	a5 09		lda $09				lda 	IFR0+IM1 					; copy outer dimension to CADim1
.10f0	8d 05 05	sta $0505			sta 	CADim1+1
.10f3	a5 08		lda $08				lda 	IFR0+IM0
.10f5	8d 04 05	sta $0504			sta 	CADim1+0
.10f8	20 d8 28	jsr $28d8			jsr 	ERRCheckComma 				; check comma
.10fb	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; calculate size of 2nd dimension.
.10fe	5a		phy				phy 								; save Y position
.10ff	18		clc				clc 								; allocate the outer array of pointers.
.1100	ae 05 05	ldx $0505			ldx 	CADim1+1
.1103	ad 04 05	lda $0504			lda 	CADim1
.1106	20 79 11	jsr $1179			jsr 	CSAAllocate 				; allocate the outer array
.1109	da		phx				phx									; save this address on the stack
.110a	48		pha				pha
.110b	86 29		stx $29				stx 	zTemp2+1					; and in zTemp2
.110d	85 28		sta $28				sta 	zTemp2
.110f					_CACreateSubLoop:
.110f	38		sec				sec
.1110	20 3a 11	jsr $113a			jsr 	CreateSingleArray 			; create data array of required size.
.1113	a0 02		ldy #$02			ldy 	#2 							; save two on missing the two byte header.
.1115	91 28		sta ($28),y			sta 	(zTemp2),y
.1117	8a		txa				txa
.1118	c8		iny				iny
.1119	91 28		sta ($28),y			sta 	(zTemp2),y
.111b	18		clc				clc  								; next slot.
.111c	a5 28		lda $28				lda 	zTemp2
.111e	69 02		adc #$02			adc 	#2
.1120	85 28		sta $28				sta 	zTemp2
.1122	90 02		bcc $1126			bcc 	_CACNoCarry
.1124	e6 29		inc $29				inc 	zTemp2+1
.1126					_CACNoCarry:
.1126	ad 04 05	lda $0504			lda 	CADim1 						; use DIM1 as a counter
.1129	d0 03		bne $112e			bne 	_CACNoBorrow
.112b	ce 05 05	dec $0505			dec 	CADim1+1
.112e					_CACNoBorrow:
.112e	ce 04 05	dec $0504			dec 	CADim1
.1131	ad 05 05	lda $0505			lda 	CADim1+1 					; but do one more.
.1134	10 d9		bpl $110f			bpl 	_CACreateSubLoop
.1136	68		pla				pla
.1137	fa		plx				plx
.1138	7a		ply				ply
.1139	60		rts				rts
.113a					CreateSingleArray:
.113a	5a		phy				phy
.113b	38		sec				sec 								; allocate memory block all zeros.
.113c	a5 08		lda $08				lda 	IFR0+IM0
.113e	a6 09		ldx $09				ldx 	IFR0+IM1
.1140	20 79 11	jsr $1179			jsr 	CSAAllocate
.1143	ac 03 05	ldy $0503			ldy 	CAType 						; if numbers, we don't need to initialise.
.1146	f0 2f		beq $1177			beq 	_CSANoInit
.1148	da		phx				phx 								; save address of new array
.1149	48		pha				pha
.114a	85 24		sta $24				sta 	zTemp0 						; address in zTemp0
.114c	86 25		stx $25				stx 	zTemp0+1
.114e	a0 01		ldy #$01			ldy 	#1 							; count in YX - cannot be zero.
.1150	b1 24		lda ($24),y			lda 	(zTemp0),y
.1152	a8		tay				tay
.1153	b2 24		lda ($24)			lda 	(zTemp0)
.1155	aa		tax				tax
.1156					_CSAEraseString:
.1156	5a		phy				phy
.1157	a0 05		ldy #$05			ldy 	#5 							; 2 initial + 3 on
.1159	a9 80		lda #$80			lda 	#$80
.115b	91 24		sta ($24),y			sta 	(zTemp0),y
.115d	7a		ply				ply
.115e	18		clc				clc 								; add 4 to next slot.
.115f	a5 24		lda $24				lda 	zTemp0
.1161	69 04		adc #$04			adc 	#4
.1163	85 24		sta $24				sta 	zTemp0
.1165	90 02		bcc $1169			bcc 	_CSAENoCarry
.1167	e6 25		inc $25				inc 	zTemp0+1
.1169					_CSAENoCarry:
.1169	e0 00		cpx #$00			cpx 	#0
.116b	d0 01		bne $116e			bne 	_CSANoBorrow
.116d	88		dey				dey
.116e					_CSANoBorrow:
.116e	ca		dex				dex
.116f	d0 e5		bne $1156			bne 	_CSAEraseString
.1171	c0 00		cpy #$00			cpy 	#0
.1173	d0 e1		bne $1156			bne 	_CSAEraseString
.1175	68		pla				pla
.1176	fa		plx				plx
.1177					_CSANoInit:
.1177	7a		ply				ply
.1178	60		rts				rts
.1179					CSAAllocate:
.1179	08		php				php 								; save type flag.
.117a	1a		inc a				inc 	a 							; add 1 because we store the size of the array block
.117b	d0 01		bne $117e			bne 	_CSAANoCarry 				; for A(10) this is 11 elements.
.117d	e8		inx				inx
.117e					_CSAANoCarry:
.117e	e0 20		cpx #$20			cpx 	#$20 						; basic range check
.1180	b0 2e		bcs $11b0			bcs 	_CSARange
.1182	28		plp				plp 								; restore type flag
.1183	08		php				php 								; save it back again.
.1184	da		phx				phx 								; save size.
.1185	48		pha				pha
.1186	86 25		stx $25				stx  	zTemp0+1 					; now in ztemp0+1:X
.1188	90 03		bcc $118d			bcc 	_CSAATimes2 				; if flag on entry clear multiply by 2, otherwise by 4.
.118a	0a		asl a				asl 	a
.118b	26 25		rol $25				rol 	zTemp0+1
.118d					_CSAATimes2:
.118d	0a		asl a				asl 	a
.118e	26 25		rol $25				rol 	zTemp0+1
.1190	18		clc				clc
.1191	69 02		adc #$02			adc 	#2 							; add 2 bytes for size.
.1193	90 02		bcc $1197			bcc 	_CSAANoCarry2
.1195	e6 25		inc $25				inc 	zTemp0+1
.1197					_CSAANoCarry2:
.1197	a6 25		ldx $25				ldx 	zTemp0+1 					; XA is the bytes required.
.1199	20 61 10	jsr $1061			jsr 	AllocateMemory 				; allocate memory to XA
.119c	86 25		stx $25				stx 	zTemp0+1 					; save pointers
.119e	85 24		sta $24				sta 	zTemp0
.11a0	68		pla				pla  								; write element count to first 2 bytes
.11a1	92 24		sta ($24)			sta 	(zTemp0)
.11a3	68		pla				pla 								; msb of element count
.11a4	28		plp				plp 								; CC if pointer array
.11a5	b0 02		bcs $11a9			bcs 	_CSAAIsData
.11a7	09 80		ora #$80			ora 	#$80 						; set bit 7 of MSB indicating has sub arrays.
.11a9					_CSAAIsData:
.11a9	a0 01		ldy #$01			ldy 	#1
.11ab	91 24		sta ($24),y			sta 	(zTemp0),y
.11ad	a5 24		lda $24				lda 	zTemp0 						; fix XA back up again
.11af	60		rts				rts
.11b0					_CSARange:
.11b0	4c 08 27	jmp $2708		jmp	ErrorV_range
.0503					CAType:
>0503							.fill 	1
.0504					CADim1:
>0504							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/dokepoke.asm

.11b3					Command_Doke:
.11b3	38		sec				sec
.11b4	80 01		bra $11b7			bra 	DPCommon
.11b6					Command_Poke:
.11b6	18		clc				clc
.11b7					DPCommon:
.11b7	08		php				php 								; CS if DOKE
.11b8	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; address
.11bb	a5 08		lda $08				lda 	IFR0+IM0 					; push on stack
.11bd	48		pha				pha
.11be	a5 09		lda $09				lda 	IFR0+IM1
.11c0	48		pha				pha
.11c1	20 d8 28	jsr $28d8			jsr 	ERRCheckComma 				; [dp]oke address,data
.11c4	20 25 17	jsr $1725			jsr 	EXPEvalInteger16
.11c7	68		pla				pla 								; get address back
.11c8	85 25		sta $25				sta 	zTemp0+1
.11ca	68		pla				pla
.11cb	85 24		sta $24				sta 	zTemp0
.11cd	a5 08		lda $08				lda 	IFR0+IM0
.11cf	92 24		sta ($24)			sta 	(zTemp0)
.11d1	28		plp				plp
.11d2	90 08		bcc $11dc			bcc 	_DPExit
.11d4	5a		phy				phy
.11d5	a5 09		lda $09				lda 	IFR0+IM1
.11d7	a0 01		ldy #$01			ldy 	#1
.11d9	91 24		sta ($24),y			sta 	(zTemp0),y
.11db	7a		ply				ply
.11dc					_DPExit:
.11dc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/goto.asm

.11dd					Command_GOTO:
.11dd	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; get line number
.11e0					GotoR0:
.11e0	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.11e3	85 19		sta $19				sta 	codePtr+1
.11e5	64 18		stz $18				stz 	codePtr
.11e7					_GOSearch:
.11e7	b2 18		lda ($18)			lda 	(codePtr) 					; end of program.
.11e9	f0 1f		beq $120a			beq 	_GOError
.11eb	a0 01		ldy #$01			ldy 	#1 							; found line #
.11ed	b1 18		lda ($18),y			lda 	(codePtr),y
.11ef	c5 08		cmp $08				cmp 	IFR0+IM0
.11f1	d0 0a		bne $11fd			bne 	_GONext
.11f3	c8		iny				iny
.11f4	b1 18		lda ($18),y			lda 	(codePtr),y
.11f6	c5 09		cmp $09				cmp 	IFR0+IM1
.11f8	d0 03		bne $11fd			bne 	_GONext
.11fa	4c df 14	jmp $14df			jmp 	RUNNewLine
.11fd					_GONext:
.11fd	18		clc				clc 								; advance to next line.
.11fe	b2 18		lda ($18)			lda 	(codePtr)
.1200	65 18		adc $18				adc 	codePtr
.1202	85 18		sta $18				sta 	codePtr
.1204	90 e1		bcc $11e7			bcc 	_GOSearch
.1206	e6 19		inc $19				inc 	codePtr+1
.1208	80 dd		bra $11e7			bra 	_GOSearch
.120a					_GOError:
.120a	4c 8c 28	jmp $288c		jmp	ErrorV_line

;******  Return to file: include.files


;******  Processing file: src/commands/inputprint.asm

.120d					Command_Input:
.120d	a9 ff		lda #$ff			lda 	#$FF
.120f	8d 06 05	sta $0506			sta 	InputFlag
.1212	80 03		bra $1217			bra 	Command_IP_Main
.1214					Command_Print:
.1214	9c 06 05	stz $0506			stz 	InputFlag
.1217					Command_IP_Main:
.1217	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.1218					_CPLoop:
.1218	08		php				php 								; save last action flag
.1219	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next character
.121b	c9 8c		cmp #$8c			cmp  	#PR_LSQLSQENDRSQRSQ 		; end of line or colon, exit now.
.121d	f0 48		beq $1267			beq 	_CPExit 					; without consuming
.121f	c9 9b		cmp #$9b			cmp 	#PR_COLON
.1221	f0 44		beq $1267			beq 	_CPExit
.1223	68		pla				pla 								; throw last action flag
.1224	b1 18		lda ($18),y			lda 	(codePtr),y 				; next character and bump
.1226	c8		iny				iny
.1227	c9 9a		cmp #$9a			cmp 	#PR_SEMICOLON				; is it a semicolon
.1229	f0 39		beq $1264			beq 	_CPContinueWithSameLine
.122b	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma
.122d	f0 30		beq $125f			beq 	_CPTab
.122f	88		dey				dey 								; undo the get.
.1230	2c 06 05	bit $0506			bit 	InputFlag 					; check for Input
.1233	10 0b		bpl $1240			bpl	 	_CPNotInput
.1235	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.1237	c9 40		cmp #$40			cmp 	#$40
.1239	d0 05		bne $1240			bne 	_CPNotInput
.123b	20 70 12	jsr $1270			jsr 	_CPInputCode 				; input code
.123e	80 d7		bra $1217			bra 	Command_IP_Main 			; and go round again.
.1240					_CPNotInput:
.1240	20 d3 16	jsr $16d3			jsr 	EXPEvaluateExpression 		; evaluate expression.
.1243	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a number ?
.1245	10 0e		bpl $1255			bpl 	_CPNumber
.1247	5a		phy				phy
.1248	18		clc				clc 								; string address to YX
.1249	a5 08		lda $08				lda 	IFR0+IM0
.124b	aa		tax				tax
.124c	a5 09		lda $09				lda 	IFR0+IM1
.124e	a8		tay				tay
.124f	20 a4 12	jsr $12a4			jsr 	CPPrintYX 					; print YX
.1252	7a		ply				ply
.1253	80 c2		bra $1217			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.1255					_CPNumber:
.1255	5a		phy				phy
.1256	20 6a 31	jsr $316a			jsr 	IFloatFloatToStringR0 		; convert to string at YX
.1259	20 a4 12	jsr $12a4			jsr 	CPPrintYX 					; print string at YX
.125c	7a		ply				ply
.125d	80 b8		bra $1217			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.125f					_CPTab:
.125f	a9 09		lda #$09			lda 	#9 							; print TAB
.1261	20 bc 12	jsr $12bc			jsr 	CPPrintA
.1264					_CPContinueWithSameLine:
.1264	38		sec				sec 								; loop round with carry set, which
.1265	80 b1		bra $1218			bra 	_CPLoop 					; will inhibit final CR
.1267					_CPExit:
.1267	28		plp				plp 								; get last action flag
.1268	b0 05		bcs $126f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.126a	a9 0d		lda #$0d			lda 	#13 						; print new line
.126c	20 bc 12	jsr $12bc			jsr 	CPPrintA
.126f					_CPExit2:
.126f	60		rts				rts
.1270					_CPInputCode:
.1270	20 9b 17	jsr $179b			jsr 	EXPTermR0 					; get the term.
.1273	5a		phy				phy 								; save position
.1274	20 b9 12	jsr $12b9			jsr 	CPInputA					; input a line to YX
.1277	a5 0b		lda $0b				lda 	IFR0+IExp 					; string ?
.1279	30 18		bmi $1293			bmi 	_CPInputString
.127b	a5 08		lda $08				lda 	IFR0+IM0 					; push target address on stack
.127d	48		pha				pha
.127e	a5 09		lda $09				lda 	IFR0+IM1
.1280	48		pha				pha
.1281	86 24		stx $24				stx 	zTemp0 						; use VAL Code to convert.
.1283	84 25		sty $25				sty 	zTemp0+1
.1285	20 85 1a	jsr $1a85			jsr 	VALConversionZTemp0
.1288	68		pla				pla 								; do the assign.
.1289	85 25		sta $25				sta 	zTemp0+1
.128b	68		pla				pla
.128c	85 24		sta $24				sta 	zTemp0
.128e	20 e4 12	jsr $12e4			jsr 	AssignNumber
.1291	7a		ply				ply
.1292	60		rts				rts
.1293					_CPInputString:
.1293	a5 08		lda $08				lda 	IFR0+IM0 					; copy target address to zTemp0
.1295	85 24		sta $24				sta 	zTemp0
.1297	a5 09		lda $09				lda 	IFR0+IM1
.1299	85 25		sta $25				sta 	zTemp0+1
.129b	86 08		stx $08				stx 	IFR0+IM0 					; string YX in result register
.129d	84 09		sty $09				sty 	IFR0+IM1
.129f	20 fb 12	jsr $12fb			jsr 	AssignString 				; assign the string
.12a2	7a		ply				ply 								; exit
.12a3	60		rts				rts
.12a4					CPPrintYX:
.12a4	86 24		stx $24				stx 	zTemp0
.12a6	84 25		sty $25				sty 	zTemp0+1
.12a8	b2 24		lda ($24)			lda 	(zTemp0)
.12aa	aa		tax				tax
.12ab	f0 0b		beq $12b8			beq 	_CPPrintExit
.12ad	a0 01		ldy #$01			ldy 	#1
.12af					_CPPrintAYXLoop:
.12af	b1 24		lda ($24),y			lda 	(zTemp0),y
.12b1	20 bc 12	jsr $12bc			jsr 	CPPrintA
.12b4	c8		iny				iny
.12b5	ca		dex				dex
.12b6	d0 f7		bne $12af			bne 	_CPPrintAYXLoop
.12b8					_CPPrintExit:
.12b8	60		rts				rts
.12b9					CPInputA:
.12b9	4c e2 ff	jmp $ffe2			jmp 	OSEnterLine
.12bc					CPPrintA:
.12bc	4c f7 ff	jmp $fff7			jmp 	OSWriteScreen
.0506					InputFlag:
>0506							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/let.asm

.12bf					CommandLET:
.12bf	20 9b 17	jsr $179b			jsr 	EXPTermR0 					; get term
.12c2	90 6f		bcc $1333			bcc 	CLError 					; must be a reference term.
.12c4	a5 08		lda $08				lda 	IFR0+IM0 					; push address and type onto stack
.12c6	48		pha				pha
.12c7	a5 09		lda $09				lda 	IFR0+IM1
.12c9	48		pha				pha
.12ca	a5 0b		lda $0b				lda 	IFR0+IExp
.12cc	48		pha				pha
.12cd	a9 ef		lda #$ef			lda 	#PR_EQUAL 					; equals for syntax
.12cf	20 e0 28	jsr $28e0			jsr 	ERRCheckA
.12d2	20 d3 16	jsr $16d3			jsr 	EXPEvaluateExpression 		; right hand side.
.12d5	68		pla				pla 								; type of l-expr
.12d6	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.12d8	30 5c		bmi $1336			bmi 	CLType
.12da	fa		plx				plx 	 							; pop target address to zTemp0
.12db	86 25		stx $25				stx 	zTemp0+1
.12dd	fa		plx				plx
.12de	86 24		stx $24				stx 	zTemp0
.12e0					AssignData:
.12e0	a5 0b		lda $0b				lda 	IFR0+IExp 					; string assignment
.12e2	30 17		bmi $12fb			bmi 	AssignString
.12e4					AssignNumber:
.12e4	5a		phy				phy
.12e5	a0 03		ldy #$03			ldy 	#3
.12e7	a5 0b		lda $0b				lda 	IFR0+IExp
.12e9	91 24		sta ($24),y			sta 	(zTemp0),y
.12eb	88		dey				dey
.12ec	a5 0a		lda $0a				lda 	IFR0+IM2
.12ee	91 24		sta ($24),y			sta 	(zTemp0),y
.12f0	88		dey				dey
.12f1	a5 09		lda $09				lda 	IFR0+IM1
.12f3	91 24		sta ($24),y			sta 	(zTemp0),y
.12f5	a5 08		lda $08				lda 	IFR0+IM0
.12f7	92 24		sta ($24)			sta 	(zTemp0)
.12f9	7a		ply				ply
.12fa	60		rts				rts
.12fb					AssignString:
.12fb	5a		phy				phy
.12fc	a0 01		ldy #$01			ldy 	#1 							; check if any concreted string.
.12fe	b1 24		lda ($24),y			lda 	(zTemp0),y
.1300	12 24		ora ($24)			ora 	(zTemp0)
.1302	f0 23		beq $1327			beq 	_CLConcreteString
.1304	b2 24		lda ($24)			lda 	(zTemp0) 					; copy address of string to zTemp1
.1306	85 26		sta $26				sta 	zTemp1
.1308	b1 24		lda ($24),y			lda 	(zTemp0),y
.130a	85 27		sta $27				sta 	zTemp1+1
.130c	b2 26		lda ($26)			lda 	(zTemp1) 					; bytes available in the new slot
.130e	38		sec				sec 								; we want 3 for slot size, status, string size.
.130f	e9 03		sbc #$03			sbc 	#3
.1311	d2 08		cmp ($08)			cmp 	(IFR0) 						; compare against string size.
.1313	90 12		bcc $1327			bcc 	_CLConcreteString 			; if so, concrete the string again.
.1315	b2 08		lda ($08)			lda 	(IFR0) 						; copy size + 1 bytes (for the length byte.)
.1317	1a		inc a				inc 	a
.1318	aa		tax				tax
.1319	a0 00		ldy #$00			ldy 	#0 							; offset in replacement string.
.131b					_CLReplaceString:
.131b	b1 08		lda ($08),y			lda 	(IFR0),y 					; copy new string into previous space.
.131d	c8		iny				iny
.131e	c8		iny				iny
.131f	91 26		sta ($26),y			sta 	(zTemp1),y
.1321	88		dey				dey
.1322	ca		dex				dex
.1323	d0 f6		bne $131b			bne 	_CLReplaceString
.1325	80 0a		bra $1331			bra 	_CLExit
.1327					_CLConcreteString:
.1327	20 52 29	jsr $2952			jsr 	StringConcrete  			; concreted string in XA.
.132a	a0 01		ldy #$01			ldy 	#1 							; store the address
.132c	92 24		sta ($24)			sta 	(zTemp0)
.132e	8a		txa				txa
.132f	91 24		sta ($24),y			sta 	(zTemp0),y
.1331					_CLExit:
.1331	7a		ply				ply
.1332	60		rts				rts
.1333					CLError:
.1333	4c 2a 28	jmp $282a		jmp	ErrorV_variable
.1336					CLType:
.1336	4c 27 27	jmp $2727		jmp	ErrorV_type

;******  Return to file: include.files


;******  Processing file: src/commands/list.asm

.1339					Command_LIST:
.1339	9c 07 05	stz $0507			stz 	CLFrom 						; default from
.133c	9c 08 05	stz $0508			stz 	CLFrom+1
.133f	b1 18		lda ($18),y			lda 	(codePtr),y 				; is there a to line (e.g. LIST ,xxx)
.1341	c9 99		cmp #$99			cmp 	#PR_COMMA
.1343	f0 1d		beq $1362			beq 	_CLToLine
.1345	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1347	f0 37		beq $1380			beq 	_CLDefaultTo
.1349	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; from value *and* to value now.
.134c	a5 08		lda $08				lda 	IFR0+IM0
.134e	8d 07 05	sta $0507			sta 	CLFrom
.1351	8d 09 05	sta $0509			sta 	CLTo
.1354	a5 09		lda $09				lda 	IFR0+IM1
.1356	8d 08 05	sta $0508			sta 	CLFrom+1
.1359	8d 0a 05	sta $050a			sta 	CLTo+1
.135c	b1 18		lda ($18),y			lda 	(codePtr),y
.135e	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; that's the lot ?
.1360	f0 26		beq $1388			beq 	_CLList
.1362					_CLToLine:
.1362	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.1364	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; EOL, default TO
.1366	f0 18		beq $1380			beq 	_CLDefaultTo
.1368	20 d8 28	jsr $28d8			jsr 	ERRCheckComma 				; sep comma
.136b	b1 18		lda ($18),y			lda 	(codePtr),y 				; if it is just LIST , then default TO
.136d	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ
.136f	f0 0f		beq $1380			beq 	_CLDefaultTo
.1371	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; there's a To value.
.1374	a5 08		lda $08				lda 	IFR0+IM0
.1376	8d 09 05	sta $0509			sta 	CLTo
.1379	a5 09		lda $09				lda 	IFR0+IM1
.137b	8d 0a 05	sta $050a			sta 	CLTo+1
.137e	80 08		bra $1388			bra 	_CLList
.1380					_CLDefaultTo:
.1380	a9 ff		lda #$ff			lda 	#$FF
.1382	8d 09 05	sta $0509			sta 	CLTo
.1385	8d 0a 05	sta $050a			sta 	CLTo+1
.1388					_CLList:
.1388	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.138b	85 19		sta $19				sta 	codePtr+1
.138d	64 18		stz $18				stz 	codePtr
.138f	a2 f7		ldx #$f7			ldx 	#OSWriteScreen & $FF 		; tokenise output to screen.
.1391	a0 ff		ldy #$ff			ldy 	#OSWriteScreen >> 8
.1393	20 0c 1f	jsr $1f0c			jsr 	TOKSetDetokeniseOutput
.1396					_CLLoop:
.1396	b2 18		lda ($18)			lda 	(codePtr) 					; finished
.1398	f0 51		beq $13eb			beq 	_CLExit
.139a	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.139d	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.13a0	d0 4c		bne $13ee			bne 	_CLBreak
.13a2	a2 00		ldx #$00			ldx 	#CLFrom-CLFrom 				; compare line number vs from
.13a4	20 f1 13	jsr $13f1			jsr 	_CLCompareLine
.13a7	c9 ff		cmp #$ff			cmp 	#255 						; < from then skip
.13a9	f0 33		beq $13de			beq 	_CLNext
.13ab	a2 02		ldx #$02			ldx 	#CLTo-CLFrom   				; compare line number vs IFR0
.13ad	20 f1 13	jsr $13f1			jsr 	_CLCompareLine
.13b0	c9 01		cmp #$01			cmp 	#1 							; > to then skip
.13b2	f0 2a		beq $13de			beq 	_CLNext
.13b4	a0 02		ldy #$02			ldy 	#2 							; print line #
.13b6	b1 18		lda ($18),y			lda 	(codePtr),y
.13b8	aa		tax				tax
.13b9	88		dey				dey
.13ba	b1 18		lda ($18),y			lda 	(codePtr),y
.13bc	20 27 2b	jsr $2b27			jsr 	WriteIntXA
.13bf					_CLSpacing:
.13bf	a9 20		lda #$20			lda 	#32
.13c1	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.13c4	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.13c7	e0 06		cpx #$06			cpx 	#6
.13c9	d0 f4		bne $13bf			bne 	_CLSpacing
.13cb	a4 19		ldy $19				ldy 	codePtr+1 					; point YX to tokenised code/
.13cd	a5 18		lda $18				lda 	codePtr
.13cf	18		clc				clc
.13d0	69 03		adc #$03			adc 	#3
.13d2	aa		tax				tax
.13d3	90 01		bcc $13d6			bcc 	_CLNoCarry2
.13d5	c8		iny				iny
.13d6					_CLNoCarry2:
.13d6	20 b1 1e	jsr $1eb1			jsr 	TOKDetokenise
.13d9	a9 0d		lda #$0d			lda 	#13	 						; next line
.13db	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.13de					_CLNext:
.13de	18		clc				clc 								; advance to next line.
.13df	b2 18		lda ($18)			lda 	(codePtr)
.13e1	65 18		adc $18				adc 	codePtr
.13e3	85 18		sta $18				sta 	codePtr
.13e5	90 02		bcc $13e9			bcc 	_CLNoCarry
.13e7	e6 19		inc $19				inc 	codePtr+1
.13e9					_CLNoCarry:
.13e9	80 ab		bra $1396			bra 	_CLLoop
.13eb					_CLExit:
.13eb	4c 46 2b	jmp $2b46			jmp 	WarmStart
.13ee					_CLBreak:
.13ee	4c 82 28	jmp $2882		jmp	ErrorV_break
.13f1					_CLCompareLine:
.13f1	a0 01		ldy #$01			ldy 	#1
.13f3	38		sec				sec
.13f4	b1 18		lda ($18),y			lda 	(codePtr),y
.13f6	fd 07 05	sbc $0507,x			sbc 	CLFrom,x
.13f9	85 24		sta $24				sta 	zTemp0
.13fb	c8		iny				iny
.13fc	b1 18		lda ($18),y			lda 	(codePtr),y
.13fe	fd 08 05	sbc $0508,x			sbc 	CLFrom+1,x
.1401	90 0a		bcc $140d			bcc 	_CLIsNegative
.1403	d0 05		bne $140a			bne 	_CLIsPositive
.1405	a5 24		lda $24				lda 	zTemp0
.1407	d0 01		bne $140a			bne 	_CLIsPositive
.1409	60		rts				rts
.140a					_CLIsPositive:
.140a	a9 01		lda #$01			lda 	#1
.140c	60		rts				rts
.140d					_CLIsNegative:
.140d	a9 ff		lda #$ff			lda 	#255
.140f	60		rts				rts
.0507					CLFrom:
>0507							.fill 	2
.0509					CLTo:
>0509							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/commands/new.asm

.1410					Command_NEW:
.1410	20 ba 20	jsr $20ba			jsr 	PGMNewProgram 				; Reset current program
.1413	20 44 10	jsr $1044			jsr 	ClearCode 					; Run CLR
.1416	4c 38 15	jmp $1538			jmp 	Command_END 				; Run END

;******  Return to file: include.files


;******  Processing file: src/commands/readdata.asm

.1419					Command_READ:
.1419	20 9b 17	jsr $179b			jsr 	EXPTermR0 					; get term to R0
.141c	90 35		bcc $1453			bcc 	_CRSyntax 					; fail if not a reference.
.141e	a5 08		lda $08				lda 	IFR0+IM0 					; push address on the stack
.1420	48		pha				pha
.1421	a5 09		lda $09				lda 	IFR0+IM1
.1423	48		pha				pha
.1424	a5 0b		lda $0b				lda 	IFR0+IExp 					; push type on the stack
.1426	48		pha				pha
.1427	20 ac 14	jsr $14ac			jsr 	SwapCodeDataPointers 		; swap code and data pointers over
.142a	ad 0f 05	lda $050f			lda 	dataInStatement 			; if in a data statement, we don't need to search
.142d	d0 27		bne $1456			bne 	_CRHaveData  				; forward for the next one.
.142f					_CRNextLine:
.142f	b2 18		lda ($18)			lda 	(codePtr)					; check end of program, e.g. nothing more to READ.
.1431	f0 1a		beq $144d			beq 	_CRNoData
.1433					_CRKeepSearching:
.1433	a9 a1		lda #$a1			lda 	#PR_DATA 					; scan for instruction DATA or EOL.
.1435	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1437	20 07 26	jsr $2607			jsr 	ScanForward
.143a	c9 a1		cmp #$a1			cmp 	#PR_DATA 					; found data ?
.143c	f0 18		beq $1456			beq 	_CRHaveData 				; found it
.143e	a0 03		ldy #$03			ldy 	#3 							; position in next line.
.1440	18		clc				clc 								; try the next line, keep going.
.1441	b2 18		lda ($18)			lda 	(codePtr)
.1443	65 18		adc $18				adc 	codePtr
.1445	85 18		sta $18				sta 	codePtr
.1447	90 e6		bcc $142f			bcc 	_CRNextLine
.1449	e6 19		inc $19				inc 	codePtr+1
.144b	80 e2		bra $142f			bra 	_CRNextLine
.144d					_CRNoData:
.144d	4c af 27	jmp $27af		jmp	ErrorV_data
.1450					_CLType:
.1450	4c 27 27	jmp $2727		jmp	ErrorV_type
.1453					_CRSyntax:
.1453	4c f7 26	jmp $26f7		jmp	ErrorV_syntax
.1456					_CRHaveData:
.1456	20 d3 16	jsr $16d3			jsr 	EXPEvaluateExpression 		; some sort of value here -> R0
.1459	68		pla				pla 								; type of l-expr
.145a	45 0b		eor $0b				eor 	IFR0+IExp 					; check types match
.145c	30 f2		bmi $1450			bmi 	_CLType
.145e	68		pla				pla 								; restore address
.145f	85 25		sta $25				sta 	zTemp0+1
.1461	68		pla				pla
.1462	85 24		sta $24				sta 	zTemp0
.1464	20 e0 12	jsr $12e0			jsr 	AssignData 					; write R0 there.
.1467	9c 0f 05	stz $050f			stz 	dataInStatement 			; clear in data flag
.146a	b1 18		lda ($18),y			lda 	(codePtr),y 				; data followed by a comma,e.g. more data follows
.146c	c9 99		cmp #$99			cmp 	#PR_COMMA 					; if not, end of data statement and exit
.146e	d0 04		bne $1474			bne 	_CRSwapBack
.1470	c8		iny				iny 								; consume comma
.1471	ee 0f 05	inc $050f			inc 	dataInStatement 			; set in data statement flag.
.1474					_CRSwapBack:
.1474	20 ac 14	jsr $14ac			jsr 	SwapCodeDataPointers		; swap them back.
.1477	b1 18		lda ($18),y			lda 	(codePtr),y 				; l-expr was followed by a comma
.1479	c8		iny				iny
.147a	c9 99		cmp #$99			cmp 	#PR_COMMA
.147c	f0 9b		beq $1419			beq 	Command_READ 				; if so go round again.
.147e	88		dey				dey 								; unpick get.
.147f	60		rts				rts
.1480					Command_DATA:
.1480	a9 9b		lda #$9b			lda 	#PR_COLON 					; scan forward to : or EOL
.1482	a2 8c		ldx #$8c			ldx 	#PR_LSQLSQENDRSQRSQ
.1484	20 07 26	jsr $2607			jsr 	ScanForward
.1487	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; unconsume the EOL
.1489	d0 01		bne $148c			bne 	_CDNotEOL
.148b	88		dey				dey
.148c					_CDNotEOL:
.148c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/rem.asm

.148d					Command_REM:
.148d					Command_REM2:
.148d	b1 18		lda ($18),y			lda 	(codePtr),y 				; optional string parameter
.148f	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.1491	d0 06		bne $1499			bne 	_CRExit
.1493	c8		iny				iny 								; skip over it, it's a comment.
.1494	98		tya				tya
.1495	38		sec				sec
.1496	71 18		adc ($18),y			adc 	(codePtr),y
.1498	a8		tay				tay
.1499					_CRExit:
.1499	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/commands/restore.asm

.149a					S
.149a					Command_RESTORE:
.149a	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.149d	8d 0c 05	sta $050c			sta 	dataPtr+1
.14a0	9c 0b 05	stz $050b			stz 	dataPtr
.14a3	a9 03		lda #$03			lda 	#3 							; position start of line
.14a5	8d 0d 05	sta $050d			sta 	dataPos
.14a8	9c 0f 05	stz $050f			stz 	dataInStatement 			; not in statement
.14ab	60		rts				rts
.14ac					SwapCodeDataPointers:
.14ac	ad 0b 05	lda $050b			lda 	dataPtr 					; swap LSB of code/data
.14af	a6 18		ldx $18				ldx 	codePtr
.14b1	85 18		sta $18				sta 	codePtr
.14b3	8e 0b 05	stx $050b			stx 	dataPtr
.14b6	ad 0c 05	lda $050c			lda 	dataPtr+1 					; swap MSB of code/data
.14b9	a6 19		ldx $19				ldx 	codePtr+1
.14bb	85 19		sta $19				sta 	codePtr+1
.14bd	8e 0c 05	stx $050c			stx 	dataPtr+1
.14c0	ad 0d 05	lda $050d			lda 	dataPos 					; swap dataPos and Y
.14c3	8c 0d 05	sty $050d			sty 	dataPos
.14c6	a8		tay				tay
.14c7	60		rts				rts
.050b					dataPtr:
>050b							.fill 	2
.050d					dataPos:
>050d							.fill 	2
.050f					dataInStatement:
>050f							.fill 	1		 					; (should be pointing at , : or EOL)

;******  Return to file: include.files


;******  Processing file: src/commands/run.asm

.14c8					Command_RUN:
.14c8	20 44 10	jsr $1044			jsr 	ClearCode					; clear everything out.
.14cb	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.14ce	85 19		sta $19				sta 	codePtr+1
.14d0	64 18		stz $18				stz 	codePtr
.14d2	80 0b		bra $14df			bra 	RUNNewLine
.14d4					RUNEndOfLine:
.14d4	18		clc				clc 								; advance to next line.
.14d5	b2 18		lda ($18)			lda 	(codePtr)
.14d7	65 18		adc $18				adc 	codePtr
.14d9	85 18		sta $18				sta 	codePtr
.14db	90 02		bcc $14df			bcc 	_RELNoCarry
.14dd	e6 19		inc $19				inc 	codePtr+1
.14df					_RELNoCarry:
.14df					RUNNewLine:
.14df	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.14e1	9a		txs				txs
.14e2	b2 18		lda ($18)			lda 	(codePtr) 					; check off end of program
.14e4	f0 52		beq $1538			beq 	Command_END
.14e6	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.14e8	b1 18		lda ($18),y			lda 	(codePtr),y
.14ea	8d 2c 06	sta $062c			sta 	ERRLine
.14ed	c8		iny				iny
.14ee	b1 18		lda ($18),y			lda 	(codePtr),y
.14f0	8d 2d 06	sta $062d			sta 	ERRLine+1
.14f3	c8		iny				iny 								; offset into codePtr for start of line.
.14f4					RUNNewCommand:
.14f4	9c 21 06	stz $0621			stz 	stringInitialised 			; reset string system.
.14f7	ce 10 05	dec $0510			dec 	checkCounter
.14fa	d0 0a		bne $1506			bne 	_RNCNoCheck
.14fc	5a		phy				phy 								; keyboard check.
.14fd	20 e8 ff	jsr $ffe8			jsr 	OSKeyboardDataProcess
.1500	7a		ply				ply
.1501	20 eb ff	jsr $ffeb			jsr 	OSCheckBreak 				; check escape.
.1504	d0 1e		bne $1524			bne 	_RUNBreak
.1506					_RNCNoCheck:
.1506	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token
.1508	10 1d		bpl $1527			bpl		_RUNNotToken 				; probably an identifier
.150a	c8		iny				iny 								; consume token
.150b	c9 9b		cmp #$9b			cmp 	#PR_COLON 					; fast skip colon
.150d	f0 e5		beq $14f4			beq 	RUNNewCommand
.150f	c9 a6		cmp #$a6			cmp 	#PR_STANDARD_LAST+1 		; check unary function
.1511	b0 0e		bcs $1521			bcs 	_RUNSyntax
.1513	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST 		; adjust for binaries at start.
.1515	90 0a		bcc $1521			bcc 	_RUNSyntax
.1517	0a		asl a				asl 	a 							; double into X.
.1518	aa		tax				tax
.1519	20 1e 15	jsr $151e			jsr 	_RUNDispatchMain			; call the main dispatcher
.151c	80 d6		bra $14f4			bra 	RUNNewCommand
.151e					_RUNDispatchMain:
.151e	7c 91 1d	jmp ($1d91,x)			jmp 	(VectorTable,x)
.1521					_RUNSyntax:
.1521	4c f7 26	jmp $26f7		jmp	ErrorV_syntax
.1524					_RUNBreak:
.1524	4c 82 28	jmp $2882		jmp	ErrorV_break
.1527					_RUNNotToken:
.1527	c9 40		cmp #$40			cmp 	#$40 						; 00-3F is a syntax error
.1529	90 f6		bcc $1521			bcc 	_RUNSyntax
.152b	20 bf 12	jsr $12bf			jsr 	CommandLET 					; assignment
.152e	80 c4		bra $14f4			bra 	RUNNewCommand 				; loop round.
.1530					Command_Shift_Handler:
.1530	b1 18		lda ($18),y			lda 	(codePtr),y 				; get token shifted
.1532	c8		iny				iny
.1533	0a		asl a				asl 	a 							; double into X
.1534	aa		tax				tax
.1535	7c 91 1e	jmp ($1e91,x)			jmp 	(AlternateVectorTable,x) 	; and go there.
.1538					Command_END:
.1538	4c 46 2b	jmp $2b46			jmp 	WarmStart
.0510					checkCounter:
>0510							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/commands/stop.asm

.153b					Command_STOP:
.153b	4c 9b 27	jmp $279b		jmp	ErrorV_stop

;******  Return to file: include.files


;******  Processing file: src/commands/sys.asm

.153e					Command_Sys:
.153e	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; execution address
.1541	5a		phy				phy
.1542	ad 74 06	lda $0674			lda 	('A'-'A')*4 + FastVariables ; load AXY
.1545	ae d0 06	ldx $06d0			ldx 	('X'-'A')*4 + FastVariables
.1548	ac d4 06	ldy $06d4			ldy 	('Y'-'A')*4 + FastVariables
.154b	20 50 15	jsr $1550			jsr 	_CSCallIFR0 				; call the code
.154e	7a		ply				ply
.154f	60		rts				rts
.1550					_CSCallIFR0:
.1550	6c 08 00	jmp ($0008)			jmp 	(IFR0+IM0)

;******  Return to file: include.files


;******  Processing file: src/commands/unused.asm

.1553					NoExec01:
.1553					NoExec02:
.1553					NoExec03:
.1553					NoExec04:
.1553					NoExec05:
.1553					NoExec06:
.1553					NoExec07:
.1553					NoExec08:
.1553	4c f7 26	jmp $26f7		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/binary/basic.asm

.1556					EXPBinAdd:
.1556	24 0b		bit $0b				bit 	IFR0+IExp 					; check if both are strings (already checked same type).
.1558	30 6f		bmi $15c9			bmi 	EXPConcatenate
.155a	a2 0c		ldx #$0c			ldx 	#IFR1
.155c	4c 65 2d	jmp $2d65			jmp 	IFloatAdd
.155f					EXPBinSub:
.155f	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1561	30 3f		bmi $15a2			bmi 	EXPTypeError
.1563	a2 0c		ldx #$0c			ldx 	#IFR1
.1565	4c 5e 2d	jmp $2d5e			jmp 	IFloatSubtract
.1568					EXPBinMul:
.1568	24 0b		bit $0b				bit 	IFR0+IExp					; check if string, error if so
.156a	30 36		bmi $15a2			bmi 	EXPTypeError
.156c	a2 0c		ldx #$0c			ldx 	#IFR1
.156e	4c 0f 2e	jmp $2e0f			jmp 	IFloatMultiply
.1571					EXPBinFDiv:
.1571	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1573	30 2d		bmi $15a2			bmi 	EXPTypeError
.1575	a2 0c		ldx #$0c			ldx 	#IFR1
.1577	20 91 30	jsr $3091			jsr 	IFloatDivideFloat
.157a	b0 0f		bcs $158b			bcs 	EXPDZero
.157c	60		rts				rts
.157d					EXPBinIDiv:
.157d	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.157f	30 21		bmi $15a2			bmi 	EXPTypeError
.1581	a2 0c		ldx #$0c			ldx 	#IFR1
.1583	20 91 30	jsr $3091			jsr 	IFloatDivideFloat
.1586	b0 03		bcs $158b			bcs 	EXPDZero
.1588	4c 6e 30	jmp $306e			jmp 	IFloatIntegerR0
.158b					EXPDZero:
.158b	4c 70 27	jmp $2770		jmp	ErrorV_divzero
.158e					EXPBinIMod:
.158e	24 0b		bit $0b				bit 	IFR0+IExp 					; check if string, error if so
.1590	30 10		bmi $15a2			bmi 	EXPTypeError
.1592	a2 0c		ldx #$0c			ldx 	#IFR1
.1594	5a		phy				phy
.1595	20 a4 2f	jsr $2fa4			jsr 	IFPreProcessBitwise 		; set up everything.
.1598	d0 05		bne $159f			bne 	EXPDRange
.159a	20 dd 2e	jsr $2edd			jsr 	IFloatModulusInteger
.159d	7a		ply				ply
.159e	60		rts				rts
.159f					EXPDRange:
.159f	4c 08 27	jmp $2708		jmp	ErrorV_range
.15a2					EXPTypeError:
.15a2	4c 27 27	jmp $2727		jmp	ErrorV_type
.15a5					EXPBinAnd:
.15a5	24 0b		bit $0b				bit 	IFR0+IExp
.15a7	30 f9		bmi $15a2			bmi 	EXPTypeError
.15a9	a2 0c		ldx #$0c			ldx 	#IFR1
.15ab	20 5f 2f	jsr $2f5f			jsr 	IFloatBitwiseAnd
.15ae	b0 ef		bcs $159f			bcs 	EXPDRange
.15b0	60		rts				rts
.15b1					EXPBinOr:
.15b1	24 0b		bit $0b				bit 	IFR0+IExp
.15b3	30 ed		bmi $15a2			bmi 	EXPTypeError
.15b5	a2 0c		ldx #$0c			ldx 	#IFR1
.15b7	20 76 2f	jsr $2f76			jsr 	IFloatBitwiseOr
.15ba	b0 e3		bcs $159f			bcs 	EXPDRange
.15bc	60		rts				rts
.15bd					EXPBinXor:
.15bd	24 0b		bit $0b				bit 	IFR0+IExp
.15bf	30 e1		bmi $15a2			bmi 	EXPTypeError
.15c1	a2 0c		ldx #$0c			ldx 	#IFR1
.15c3	20 8d 2f	jsr $2f8d			jsr 	IFloatBitwiseXor
.15c6	b0 d7		bcs $159f			bcs 	EXPDRange
.15c8	60		rts				rts
.15c9					EXPConcatenate:
.15c9	18		clc				clc
.15ca	b2 08		lda ($08)			lda 	(IFR0) 	 					; work out total length
.15cc	72 0c		adc ($0c)			adc 	(IFR1)
.15ce	b0 2d		bcs $15fd			bcs 	_EXPCError 					; far too long.
.15d0	a6 08		ldx $08				ldx 	IFR0 						; push R0 string on stack.
.15d2	da		phx				phx
.15d3	a6 09		ldx $09				ldx 	IFR0+1
.15d5	da		phx				phx
.15d6	20 c5 29	jsr $29c5			jsr 	StringTempAllocate 			; allocate string, set up return
.15d9	a6 0d		ldx $0d				ldx 	IFR1+1 						; copy first string.
.15db	a5 0c		lda $0c				lda 	IFR1
.15dd	20 e6 15	jsr $15e6			jsr 	_EXPCCopyXA
.15e0	fa		plx				plx 								; copy second string
.15e1	68		pla				pla
.15e2	20 e6 15	jsr $15e6			jsr 	_EXPCCopyXA
.15e5	60		rts				rts
.15e6					_EXPCCopyXA:
.15e6	86 25		stx $25				stx 	zTemp0+1 					; save address to zTemp0
.15e8	85 24		sta $24				sta 	zTemp0
.15ea	b2 24		lda ($24)			lda 	(zTemp0)					; length of string
.15ec	f0 0e		beq $15fc			beq 	_EXPCCExit 					; nothing in string
.15ee	aa		tax				tax 								; count
.15ef	5a		phy				phy 								; start position
.15f0	a0 01		ldy #$01			ldy 	#1
.15f2					_EXPCCLoop:
.15f2	b1 24		lda ($24),y			lda 	(zTemp0),y 					; write characters one at a time.
.15f4	20 fa 29	jsr $29fa			jsr 	StringTempWrite
.15f7	c8		iny				iny
.15f8	ca		dex				dex
.15f9	d0 f7		bne $15f2			bne 	_EXPCCLoop
.15fb	7a		ply				ply
.15fc					_EXPCCExit:
.15fc	60		rts				rts
.15fd					_EXPCError:
.15fd	4c 14 28	jmp $2814		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/expression/binary/compare.asm

.1600					EXPReturnTrue:
.1600	a2 08		ldx #$08			ldx 	#IFR0
.1602	a9 01		lda #$01			lda 	#1
.1604	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.1607	20 78 33	jsr $3378			jsr 	IFloatNegate
.160a	60		rts				rts
.160b					EXPReturnFalse:
.160b	a2 08		ldx #$08			ldx 	#IFR0
.160d	4c 6d 33	jmp $336d			jmp 	IFloatSetZero
.1610					EXPCompareEqual:
.1610	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.1613	c9 00		cmp #$00			cmp 	#0
.1615	f0 e9		beq $1600			beq 	EXPReturnTrue
.1617	80 f2		bra $160b			bra 	EXPReturnFalse
.1619					EXPCompareLess:
.1619	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.161c	c9 ff		cmp #$ff			cmp 	#$FF
.161e	f0 e0		beq $1600			beq 	EXPReturnTrue
.1620	80 e9		bra $160b			bra 	EXPReturnFalse
.1622					EXPCompareGreater:
.1622	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.1625	c9 01		cmp #$01			cmp 	#1
.1627	f0 d7		beq $1600			beq 	EXPReturnTrue
.1629	80 e0		bra $160b			bra 	EXPReturnFalse
.162b					EXPCompareNotEqual:
.162b	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.162e	c9 00		cmp #$00			cmp 	#0
.1630	d0 ce		bne $1600			bne 	EXPReturnTrue
.1632	80 d7		bra $160b			bra 	EXPReturnFalse
.1634					EXPCompareLessEqual:
.1634	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.1637	c9 01		cmp #$01			cmp 	#1
.1639	d0 c5		bne $1600			bne 	EXPReturnTrue
.163b	80 ce		bra $160b			bra 	EXPReturnFalse
.163d					EXPCompareGreaterEqual:
.163d	20 46 16	jsr $1646			jsr 	EXPCompareBaseCode
.1640	c9 ff		cmp #$ff			cmp 	#$FF
.1642	d0 bc		bne $1600			bne 	EXPReturnTrue
.1644	80 c5		bra $160b			bra 	EXPReturnFalse
.1646					EXPCompareBaseCode:
.1646	24 0b		bit $0b				bit 	IFR0+IExp 					; string compare ?
.1648	30 10		bmi $165a			bmi 	_EXCBCString
.164a	a2 0c		ldx #$0c			ldx 	#IFR1						; float compare
.164c	20 3c 30	jsr $303c			jsr 	IFloatCompare
.164f	a5 08		lda $08				lda 	IFR0+IM0
.1651	f0 06		beq $1659			beq 	_EXCBCExit 					; return 0 if zero
.1653	24 0b		bit $0b				bit 	IFR0+IExp 					; return 1 if +ve
.1655	50 02		bvc $1659			bvc 	_EXCBCExit
.1657	a9 ff		lda #$ff			lda 	#255 						; return $FF if -ve
.1659					_EXCBCExit:
.1659	60		rts				rts
.165a					_EXCBCString:
.165a	5a		phy				phy
.165b	b2 08		lda ($08)			lda 	(IFR0) 						; length of smaller of the two in X.
.165d	d2 0c		cmp ($0c)			cmp 	(IFR1) 						; check it matches so far normally.
.165f	90 02		bcc $1663			bcc 	_EXCBCSmaller
.1661	b2 0c		lda ($0c)			lda 	(IFR1)
.1663					_EXCBCSmaller:
.1663	aa		tax				tax
.1664	f0 0d		beq $1673			beq 	_EXCBCMatches 				; if zero common length matches
.1666	a0 00		ldy #$00			ldy 	#0 							; match the strings.
.1668					_EXCBCCheckSmallerMatches:
.1668	c8		iny				iny 								; compare directly as far as common length
.1669	38		sec				sec
.166a	b1 0c		lda ($0c),y			lda 	(IFR1),y
.166c	f1 08		sbc ($08),y			sbc 	(IFR0),y
.166e	d0 08		bne $1678			bne 	_EXCBCExit2
.1670	ca		dex				dex
.1671	d0 f5		bne $1668			bne 	_EXCBCCheckSmallerMatches
.1673					_EXCBCMatches:
.1673	38		sec				sec
.1674	b2 0c		lda ($0c)			lda 	(IFR1) 						; common length matches. If same length equal
.1676	f2 08		sbc ($08)			sbc 	(IFR0)						; if len(r1) > len(r0) then r1 is longer
.1678					_EXCBCExit2:
.1678	7a		ply				ply
.1679	c9 00		cmp #$00			cmp 	#0 							; 0 equal.
.167b	f0 04		beq $1681			beq 	_EXCBCReturn
.167d	30 03		bmi $1682			bmi 	_EXCBCFF 					; return $FF if <
.167f	a9 01		lda #$01			lda 	#1 							; return 1 if >
.1681					_EXCBCReturn:
.1681	60		rts				rts
.1682					_EXCBCFF:
.1682	a9 ff		lda #$ff			lda 	#$FF
.1684	60		rts				rts
.1685					_EXCBCRange:
.1685	4c 08 27	jmp $2708		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/binary/shift.asm

.1688					EXPBinLeft:
.1688	a9 ff		lda #$ff			lda 	#$FF
.168a	8d 11 05	sta $0511			sta 	EXPShiftLeftFlag
.168d	4c 93 16	jmp $1693			jmp 	EXPShiftCommon
.1690					EXPBinRight:
.1690	9c 11 05	stz $0511			stz 	EXPShiftLeftFlag
.1693					EXPShiftCommon:
.1693	a5 0b		lda $0b				lda 	IFR0+IExp 					; check both integers
.1695	05 0f		ora $0f				ora 	IFR1+IExp
.1697	29 7f		and #$7f			and 	#$7F
.1699	d0 35		bne $16d0			bne 	_EXPSRange
.169b	a5 08		lda $08				lda 	IFR0+IM0					; check shift >= 32
.169d	29 e0		and #$e0			and 	#$E0
.169f	05 09		ora $09				ora 	IFR0+IM1
.16a1	05 0a		ora $0a				ora 	IFR0+IM2
.16a3	d0 25		bne $16ca			bne 	_EXPSShiftZero 				; if so return zero as would be shifted out.
.16a5	5a		phy				phy
.16a6	a5 08		lda $08				lda 	IFR0+IM0 					; get shift
.16a8	29 1f		and #$1f			and 	#$1F
.16aa	f0 17		beq $16c3			beq 	_EXPSExit 					; exit if zero
.16ac	a8		tay				tay
.16ad					_EXPSLoop:
.16ad	a2 0c		ldx #$0c			ldx 	#IFR1 						; get direction
.16af	2c 11 05	bit $0511			bit 	EXPShiftLeftFlag
.16b2	30 05		bmi $16b9			bmi 	_EXPSShiftLeft 				; shift left/right accordingly.
.16b4	20 9c 33	jsr $339c			jsr 	IFloatShiftRight
.16b7	80 07		bra $16c0			bra 	_EXPSContinue
.16b9					_EXPSShiftLeft:
.16b9	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.16bc	24 0a		bit $0a				bit 	IFR0+IM2 					; too many shifts (24th bit set)
.16be	30 10		bmi $16d0			bmi 	_EXPSRange
.16c0					_EXPSContinue:
.16c0	88		dey				dey 								; do it Y times
.16c1	d0 ea		bne $16ad			bne 	_EXPSLoop
.16c3					_EXPSExit:
.16c3	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 <shift> R0
.16c5	20 fe 32	jsr $32fe			jsr 	IFloatCopyFromRegister
.16c8	7a		ply				ply
.16c9	60		rts				rts
.16ca					_EXPSShiftZero:
.16ca	a2 08		ldx #$08			ldx 	#IFR0
.16cc	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.16cf	60		rts				rts
.16d0					_EXPSRange:
.16d0	4c 08 27	jmp $2708		jmp	ErrorV_range
.0511					EXPShiftLeftFlag:
>0511							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/expression/expression.asm

.16d3					EXPEvaluateExpression:
.16d3	a9 00		lda #$00			lda 	#0 							; current precedence
.16d5					EXPEvaluateExpressionPrecedenceA:
.16d5	48		pha				pha
.16d6	20 50 17	jsr $1750			jsr 	EXPTermValueR0				; do first term.
.16d9					_EELoop:
.16d9	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.16db	c9 ef		cmp #$ef			cmp 	#PR_BINARY_FIRST 			; binary tokens are the last ones up to $FF
.16dd	90 31		bcc $1710			bcc 	_EEExit
.16df	aa		tax				tax 								; access the precedence of the operator.
.16e0	68		pla				pla 								; restore precedence.if >= operator precedence then exit
.16e1	dd ae 1a	cmp $1aae,x			cmp 	BinaryPrecedence-PR_BINARY_FIRST,x
.16e4	b0 2b		bcs $1711			bcs 	_EEExit2
.16e6	48		pha				pha 								; save current precedence.
.16e7	da		phx				phx 								; save operator
.16e8	c8		iny				iny 								; consume operator
.16e9	da		phx				phx
.16ea	a2 08		ldx #$08			ldx 	#IFR0 						; push R0 on the stack
.16ec	20 bc 32	jsr $32bc			jsr 	IFloatPushRx
.16ef	fa		plx				plx
.16f0	bd ae 1a	lda $1aae,x			lda 	BinaryPrecedence-PR_BINARY_FIRST,x
.16f3	20 d5 16	jsr $16d5			jsr 	EXPEvaluateExpressionPrecedenceA
.16f6	a2 0c		ldx #$0c			ldx 	#IFR1 						; pop LHS to R1.
.16f8	20 dd 32	jsr $32dd			jsr 	IFloatPullRx
.16fb	fa		plx				plx 								; operator
.16fc	a5 0b		lda $0b				lda 	IFR0+IExp 					; if check types match.
.16fe	45 0f		eor $0f				eor 	IFR1+IExp
.1700	30 08		bmi $170a			bmi 	_EEType
.1702					_EETypeOkay:
.1702	8a		txa				txa
.1703	0a		asl a				asl 	a 							; double -> X
.1704	aa		tax				tax
.1705	20 0d 17	jsr $170d			jsr 	_EECallBinary 				; call the operator R0 := R1 <op> R0
.1708	80 cf		bra $16d9			bra 	_EELoop
.170a					_EEType:
.170a	4c 27 27	jmp $2727		jmp	ErrorV_type
.170d					_EECallBinary:
.170d	7c 91 1d	jmp ($1d91,x)			jmp 	(VectorTable,x)
.1710					_EEExit:
.1710	68		pla				pla 								; throw precedence
.1711					_EEExit2:
.1711	18		clc				clc
.1712	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/exprutils.asm

.1713					EXPEvalNumber:
.1713	20 d3 16	jsr $16d3			jsr 	EXPEvaluateExpression 		; get a value
.1716	24 0b		bit $0b				bit 	IFR0+IExp 					; fail if string
.1718	30 01		bmi $171b			bmi 	EVUType
.171a	60		rts				rts
.171b					EVUType:
.171b	4c 27 27	jmp $2727		jmp	ErrorV_type
.171e					EXPEvalInteger:
.171e	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.1721	20 6e 30	jsr $306e			jsr 	IFloatIntegerR0
.1724	60		rts				rts
.1725					EXPEvalInteger16:
.1725	20 1e 17	jsr $171e			jsr 	EXPEvalInteger 				; get integer
.1728	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 0000-FFFF
.172a	d0 21		bne $174d			bne 	EVURange
.172c	a6 09		ldx $09				ldx 	IFR0+IM1
.172e	a5 08		lda $08				lda 	IFR0+IM0
.1730	60		rts				rts
.1731					EXPEvalInteger8:
.1731	20 1e 17	jsr $171e			jsr 	EXPEvalInteger 				; get integer
.1734	a5 0a		lda $0a				lda 	IFR0+IM2 					; range 00-FF
.1736	05 09		ora $09				ora 	IFR0+IM1
.1738	d0 13		bne $174d			bne 	EVURange
.173a	a5 08		lda $08				lda 	IFR0+IM0
.173c	60		rts				rts
.173d					EXPEvalString:
.173d	20 d3 16	jsr $16d3			jsr 	EXPEvaluateExpression 		; get value
.1740	24 0b		bit $0b				bit 	IFR0+IExp 					; exit if integer
.1742	10 d7		bpl $171b			bpl 	EVUType
.1744	a6 09		ldx $09				ldx 	IFR0+IM1 					; copy address to zTemp0
.1746	86 25		stx $25				stx 	zTemp0+1
.1748	a5 08		lda $08				lda 	IFR0+IM0
.174a	85 24		sta $24				sta 	zTemp0
.174c	60		rts				rts
.174d					EVURange:
.174d	4c 08 27	jmp $2708		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/term.asm

.1750					EXPTermValueR0:
.1750	20 9b 17	jsr $179b			jsr 	EXPTermR0 					; get term
.1753	90 45		bcc $179a			bcc 	_ETVNotReference 			; exit if value.
.1755	5a		phy				phy
.1756	a0 03		ldy #$03			ldy 	#3 							; get type
.1758	b1 08		lda ($08),y			lda 	(IFR0),y
.175a	30 14		bmi $1770			bmi 	_ETVDereferenceString
.175c	85 0b		sta $0b				sta 	IFR0+IExp 					; save byte 3 into R0
.175e	88		dey				dey 								; get byte 2
.175f	b1 08		lda ($08),y			lda 	(IFR0),y
.1761	85 0a		sta $0a				sta 	IFR0+IM2 					; save byte 2
.1763	88		dey				dey 								; get byte 1
.1764	b1 08		lda ($08),y			lda 	(IFR0),y
.1766	aa		tax				tax 								; save in X so we can overwrite it
.1767	b2 08		lda ($08)			lda 	(IFR0) 						; get byte 0
.1769	86 09		stx $09				stx 	IFR0+IM1  					; save bytes 1 & 0
.176b	85 08		sta $08				sta 	IFR0+IM0
.176d	7a		ply				ply
.176e	18		clc				clc
.176f	60		rts				rts
.1770					_ETVDereferenceString:
.1770	a0 01		ldy #$01			ldy 	#1 							; check if it is as yet unassigned.
.1772	b1 08		lda ($08),y			lda 	(IFR0),y 					; (e.g. the address is zero)
.1774	12 08		ora ($08)			ora 	(IFR0)
.1776	f0 11		beq $1789			beq 	_ETVNull 					; if so, return a fake NULL.
.1778	b1 08		lda ($08),y			lda 	(IFR0),y 					; load address of string to XA
.177a	aa		tax				tax
.177b	b2 08		lda ($08)			lda 	(IFR0)
.177d	18		clc				clc 								; add two so points to actual string.
.177e	69 02		adc #$02			adc 	#2
.1780	90 01		bcc $1783			bcc 	_EVDSNoCarry
.1782	e8		inx				inx
.1783					_EVDSNoCarry:
.1783	86 09		stx $09				stx 	IFR0+IM1 					; save in slots
.1785	85 08		sta $08				sta 	IFR0
.1787	80 08		bra $1791			bra 	_ETVFillExit 				; tidy up and exit.
.1789					_ETVNull:
.1789	a9 99		lda #$99			lda 	#_EVTNString & $FF
.178b	85 08		sta $08				sta 	IFR0+IM0
.178d	a9 17		lda #$17			lda 	#_EVTNString >> 8
.178f	85 09		sta $09				sta 	IFR0+IM1
.1791					_ETVFillExit:
.1791	64 0a		stz $0a				stz 	IFR0+IM2 					; clear byte 2, not strictly required :)
.1793	a9 80		lda #$80			lda 	#$80 						; set type to string.
.1795	85 0b		sta $0b				sta 	IFR0+IExp
.1797	7a		ply				ply
.1798	60		rts				rts
.1799					_EVTNString:
>1799	00						.byte 	0
.179a					_ETVNotReference:
.179a	60		rts				rts
.179b					EXPTermR0:
.179b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get next token/element
.179d	30 10		bmi $17af			bmi 	_ETMIsUnaryOrMinus 			; if it's a token $80-$FF, it's a unary function, maybe ....
.179f	c8		iny				iny 								; consume element
.17a0	c9 40		cmp #$40			cmp 	#$40 						; 40-7F are identifiers.
.17a2	b0 08		bcs $17ac			bcs 	_ETMIdentifier
.17a4	20 da 17	jsr $17da			jsr 	EXPExtractTokenisedInteger 	; pull out tokenised integer to R0
.17a7	20 0d 18	jsr $180d			jsr 	EXPCheckDecimalFollows 		; check for decimals.
.17aa	18		clc				clc 								; return value ok
.17ab	60		rts				rts
.17ac					_ETMIdentifier:
.17ac	4c 06 2d	jmp $2d06			jmp 	VARCheckSimple 				; check variables, seperate module.
.17af					_ETMIsUnaryOrMinus:
.17af	c8		iny				iny 								; consume element
.17b0	c9 fe		cmp #$fe			cmp 	#PR_MINUS 					; handle - seperately as it has two roles.
.17b2	d0 0e		bne $17c2			bne 	_ETMCheckUnary
.17b4	20 50 17	jsr $1750			jsr 	EXPTermValueR0 				; get a term to negate
.17b7	a2 08		ldx #$08			ldx 	#IFR0 						; and negate it
.17b9	20 78 33	jsr $3378			jsr 	IFloatNegate
.17bc	24 0b		bit $0b				bit 	IFR0+IExp 					; is it a string
.17be	30 17		bmi $17d7			bmi 	_ETMUnaryType				; if so error.
.17c0	18		clc				clc
.17c1	60		rts				rts
.17c2					_ETMCheckUnary:
.17c2	c9 d5		cmp #$d5			cmp 	#PR_UNARY_FIRST 			; check unary function.
.17c4	90 0e		bcc $17d4			bcc 	_ETMUnarySyntax
.17c6	c9 ef		cmp #$ef			cmp 	#PR_UNARY_LAST+1
.17c8	b0 0a		bcs $17d4			bcs 	_ETMUnarySyntax
.17ca	0a		asl a				asl 	a 							; make it into an index => X
.17cb	aa		tax				tax
.17cc	20 d1 17	jsr $17d1			jsr 	_ETMCallUnaryFunction 		; call the function
.17cf	18		clc				clc 								; and return it.
.17d0	60		rts				rts
.17d1					_ETMCallUnaryFunction:
.17d1	7c 91 1d	jmp ($1d91,x)			jmp 	(VectorTable,x)
.17d4					_ETMUnarySyntax:
.17d4	4c f7 26	jmp $26f7		jmp	ErrorV_syntax
.17d7					_ETMUnaryType:
.17d7	4c 27 27	jmp $2727		jmp	ErrorV_type
.17da					EXPExtractTokenisedInteger:
.17da	85 08		sta $08				sta 	IFR0+IM0 					; initial value in IM0
.17dc	64 0b		stz $0b				stz 	IFR0+IExp	 				; zero the rest.
.17de	64 09		stz $09				stz 	IFR0+IM1
.17e0	64 0a		stz $0a				stz 	IFR0+IM2
.17e2					_ETMConstant:
.17e2	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows.
.17e4	c9 40		cmp #$40			cmp 	#$40 						; continuing constant
.17e6	b0 24		bcs $180c			bcs 	_ETMCExit 					; no, exit.
.17e8	a6 0a		ldx $0a				ldx 	IFR0+IM2 					; x 256 into A:M2 M1 M0
.17ea	a5 09		lda $09				lda 	IFR0+IM1
.17ec	85 0a		sta $0a				sta 	IFR0+IM2
.17ee	a5 08		lda $08				lda 	IFR0+IM0
.17f0	85 09		sta $09				sta 	IFR0+IM1
.17f2	64 08		stz $08				stz 	IFR0+IM0
.17f4	8a		txa				txa
.17f5	4a		lsr a				lsr 	a 							; shift right twice, e.g. whole thing is x 64
.17f6	66 0a		ror $0a				ror 	IFR0+IM2
.17f8	66 09		ror $09				ror 	IFR0+IM1
.17fa	66 08		ror $08				ror 	IFR0+IM0
.17fc	4a		lsr a				lsr 	a
.17fd	66 0a		ror $0a				ror 	IFR0+IM2
.17ff	66 09		ror $09				ror 	IFR0+IM1
.1801	66 08		ror $08				ror 	IFR0+IM0
.1803	a5 08		lda $08				lda 	IFR0+IM0 					; LSB in.
.1805	11 18		ora ($18),y			ora 	(codePtr),y
.1807	85 08		sta $08				sta 	IFR0+IM0
.1809	c8		iny				iny 								; consume, loop back
.180a	80 d6		bra $17e2			bra 	_ETMConstant
.180c					_ETMCExit:
.180c	60		rts				rts
.180d					EXPCheckDecimalFollows:
.180d	b1 18		lda ($18),y			lda 	(codePtr),y 				; check for decimal
.180f	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1811	d0 19		bne $182c			bne 	_ETMCDExit
.1813	c8		iny				iny 								; consume token.
.1814	b1 18		lda ($18),y			lda 	(codePtr),y 				; get count
.1816	5a		phy				phy									; save current position
.1817	48		pha				pha 								; save count of chars.
.1818	38		sec				sec 								; address into YX : y + codePtr+1
.1819	98		tya				tya
.181a	65 18		adc $18				adc 	codePtr
.181c	aa		tax				tax
.181d	a5 19		lda $19				lda 	codePtr+1
.181f	69 00		adc #$00			adc 	#0
.1821	a8		tay				tay
.1822	68		pla				pla 								; get count.
.1823	20 11 32	jsr $3211			jsr 	IFloatAddDecimalToR0 		; add the decimal to R0
.1826	7a		ply				ply 								; go to next token.
.1827	98		tya				tya
.1828	38		sec				sec
.1829	71 18		adc ($18),y			adc 	(codePtr),y
.182b	a8		tay				tay
.182c					_ETMCDExit:
.182c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/abs.asm

.182d					EXPUnaryAbs:
.182d	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.1830	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.1833	20 b0 2f	jsr $2fb0			jsr 	IFloatAbsoluteR0 				; take absolute value of it.
.1836	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/ampersand.asm

.1837					EXPUnaryNull:
.1837	20 50 17	jsr $1750			jsr 	EXPTermValueR0
.183a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/asc.asm

.183b					EXPUnaryAsc:
.183b	20 3d 17	jsr $173d			jsr 	EXPEvalString 					; string to R0, zTemp0
.183e	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.1841	b2 24		lda ($24)			lda 	(zTemp0) 						; length 0 ?
.1843	f0 06		beq $184b			beq 	_EXAZero 						; if so return 0
.1845	5a		phy				phy 									; otherwise get first character
.1846	a0 01		ldy #$01			ldy 	#1
.1848	b1 24		lda ($24),y			lda 	(zTemp0),y
.184a	7a		ply				ply
.184b					_EXAZero:
.184b	a2 08		ldx #$08			ldx 	#IFR0
.184d	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.1850	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/chr.asm

.1851					EXPUnaryChr:
.1851	20 31 17	jsr $1731			jsr 	EXPEvalInteger8 				; expr
.1854	48		pha				pha 									; push on stack
.1855	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.1858	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result, 1 byte only.
.185a	20 c5 29	jsr $29c5			jsr 	StringTempAllocate
.185d	68		pla				pla 									; get value back
.185e	20 fa 29	jsr $29fa			jsr 	StringTempWrite 				; write to string.
.1861	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/dec.asm

.1862					EXPUnaryDec:
.1862	20 3d 17	jsr $173d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1865	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.1868	5a		phy				phy 									; save position.
.1869	a2 08		ldx #$08			ldx 	#IFR0 							; zero the result
.186b	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.186e	b2 24		lda ($24)			lda 	(zTemp0)						; read the length to X
.1870	f0 3b		beq $18ad			beq 	_EUDError 						; empty string is not legit.
.1872	aa		tax				tax 									; count in X.
.1873	a0 01		ldy #$01			ldy 	#1 								; start at offset 1
.1875					_EUDLoop:
.1875	b1 24		lda ($24),y			lda 	(zTemp0),y 						; get next from string
.1877	c9 61		cmp #$61			cmp 	#"a" 							; capitalise
.1879	90 02		bcc $187d			bcc 	_EUDNoCase
.187b	e9 20		sbc #$20			sbc 	#$20
.187d					_EUDNoCase:
.187d	c9 30		cmp #$30			cmp 	#'0' 							; check 0..9
.187f	90 2c		bcc $18ad			bcc 	_EUDError
.1881	c9 3a		cmp #$3a			cmp 	#'9'+1
.1883	90 0a		bcc $188f			bcc 	_EUDOkay
.1885	c9 41		cmp #$41			cmp 	#'A'							; check A..F
.1887	90 24		bcc $18ad			bcc 	_EUDError
.1889	c9 47		cmp #$47			cmp 	#'F'+1
.188b	b0 20		bcs $18ad			bcs 	_EUDError
.188d	e9 06		sbc #$06			sbc 	#6 								; hex adjust, make a nibble value.
.188f					_EUDOkay:
.188f	29 0f		and #$0f			and 	#15 							; make constant
.1891	da		phx				phx
.1892	48		pha				pha
.1893	a2 08		ldx #$08			ldx 	#IFR0 							; multiply R0 x 16
.1895	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.1898	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.189b	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.189e	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.18a1	68		pla				pla 									; pop constant and OR in
.18a2	fa		plx				plx
.18a3	05 08		ora $08				ora 	IFR0+IM0
.18a5	85 08		sta $08				sta 	IFR0+IM0
.18a7	c8		iny				iny 									; next char
.18a8	ca		dex				dex 									; done all characters ?
.18a9	d0 ca		bne $1875			bne 	_EUDLoop
.18ab	7a		ply				ply
.18ac	60		rts				rts
.18ad					_EUDError:
.18ad	4c 19 27	jmp $2719		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/decimal.asm

.18b0					EXPUnaryInlineDec:
.18b0	4c f7 26	jmp $26f7		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/deekpeek.asm

.18b3					EXPUnaryPeek:
.18b3	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 				; number to R0
.18b6	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.18b9	b2 08		lda ($08)			lda 	(IFR0)
.18bb	a2 08		ldx #$08			ldx 	#IFR0
.18bd	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.18c0	60		rts				rts
.18c1					EXPUnaryDeek:
.18c1	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 				; number to R0
.18c4	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.18c7	5a		phy				phy
.18c8	a0 01		ldy #$01			ldy 	#1
.18ca	b1 08		lda ($08),y			lda 	(IFR0),y
.18cc	7a		ply				ply
.18cd	48		pha				pha
.18ce	b2 08		lda ($08)			lda 	(IFR0)
.18d0	a2 08		ldx #$08			ldx 	#IFR0
.18d2	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.18d5	68		pla				pla
.18d6	85 09		sta $09				sta 	IFR0+IM1
.18d8	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/fractional.asm

.18d9					EXPUnaryFrac:
.18d9	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.18dc	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.18df	20 18 30	jsr $3018			jsr 	IFloatFractionalR0 				; get fractional bit.
.18e2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/inkey.asm

.18e3					EXPUnaryInkey:
.18e3	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.18e6	a9 01		lda #$01			lda 	#1 								; alloc temp mem for result
.18e8	20 c5 29	jsr $29c5			jsr 	StringTempAllocate
.18eb	20 ee ff	jsr $ffee			jsr 	OSIsKeyAvailable 				; if no key exit
.18ee	b0 06		bcs $18f6			bcs 	_EUIExit
.18f0	20 f4 ff	jsr $fff4			jsr 	OSReadKeyboard 					; otherwise get it.
.18f3	20 fa 29	jsr $29fa			jsr 	StringTempWrite
.18f6					_EUIExit:
.18f6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/intfn.asm

.18f7					EXPUnaryInt:
.18f7	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.18fa	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; check for )
.18fd	20 6e 30	jsr $306e			jsr 	IFloatIntegerR0 				; force to integer.
.1900	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/len.asm

.1901					EXPUnaryLen:
.1901	20 3d 17	jsr $173d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1904	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.1907	b2 24		lda ($24)			lda 	(zTemp0) 						; first byte is the length
.1909	a2 08		ldx #$08			ldx 	#IFR0 							; write it out.
.190b	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.190e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/parenthesis.asm

.190f					EXPUnaryParenthesis:
.190f	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.1912	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.1915	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/random.asm

.1916					EXPUnaryRnd:
.1916	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; number to R0
.1919	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 				; )
.191c	a2 08		ldx #$08			ldx 	#IFR0 						; load random number to R0
.191e	20 35 19	jsr $1935			jsr 	EXPLoadInRandom
.1921	a9 29		lda #$29			lda 	#64-23 						; hack the exponent to make it in the range 0-1.
.1923	85 0b		sta $0b				sta 	IFR0+IExp
.1925	60		rts				rts
.1926					ExpUnaryRand:
.1926	20 1e 17	jsr $171e			jsr 	EXPEvalInteger 				; integer to R0
.1929	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 				; )
.192c	a2 0c		ldx #$0c			ldx 	#IFR1 						; random to R1
.192e	20 35 19	jsr $1935			jsr 	EXPLoadInRandom
.1931	20 dd 2e	jsr $2edd			jsr 	IFloatModulusInteger 		; calculate mod r1,r0
.1934	60		rts				rts
.1935					EXPLoadInRandom:
.1935	20 6d 33	jsr $336d			jsr 	IFloatSetZero 				; zero it
.1938	20 4a 19	jsr $194a			jsr 	EXPRandom32 				; do a 23 bit number.
.193b	95 00		sta $00,x			sta 	IM0,x
.193d	20 4a 19	jsr $194a			jsr 	EXPRandom32
.1940	95 01		sta $01,x			sta 	IM1,x
.1942	20 4a 19	jsr $194a			jsr 	EXPRandom32
.1945	29 7f		and #$7f			and 	#$7F
.1947	95 02		sta $02,x			sta 	IM2,x
.1949	60		rts				rts
.194a					EXPRandom32:
.194a	5a		phy				phy
.194b	a0 08		ldy #$08			ldy 	#8
.194d	ad 12 05	lda $0512			lda 	EXPSeed+0
.1950	0d 13 05	ora $0513			ora 	EXPSeed+1
.1953	0d 14 05	ora $0514			ora 	EXPSeed+2
.1956	0d 15 05	ora $0515			ora 	EXPSeed+3
.1959	d0 08		bne $1963			bne 	_EXPRNoReset
.195b	ee 12 05	inc $0512			inc 	EXPSeed+0
.195e	a0 10		ldy #$10			ldy 	#16
.1960	8c 15 05	sty $0515			sty 	EXPSeed+3
.1963					_EXPRNoReset:
.1963	ad 12 05	lda $0512			lda 	EXPSeed+0
.1966					_EXPRLoop:
.1966	0a		asl a				asl		a
.1967	2e 13 05	rol $0513			rol 	EXPSeed+1
.196a	2e 14 05	rol $0514			rol 	EXPSeed+2
.196d	2e 15 05	rol $0515			rol 	EXPSeed+3
.1970	90 02		bcc $1974			bcc 	_EXPRNoEOR
.1972	49 c5		eor #$c5			eor 	#$C5
.1974					_EXPRNoEOR:
.1974	88		dey				dey
.1975	d0 ef		bne $1966			bne 	_EXPRLoop
.1977	8d 12 05	sta $0512			sta 	EXPSeed+0
.197a	7a		ply				ply
.197b	60		rts				rts
.0512					EXPSeed:
>0512							.fill 	4

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sgn.asm

.197c					EXPUnarySgn:
.197c	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.197f	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.1982	a2 0c		ldx #$0c			ldx 	#IFR1 							; copy to R1
.1984	20 0f 33	jsr $330f			jsr 	IFloatCopyToRegister
.1987	a2 08		ldx #$08			ldx 	#IFR0 							; R0 = 0
.1989	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.198c	a2 0c		ldx #$0c			ldx 	#IFR1
.198e	20 3c 30	jsr $303c			jsr 	IFloatCompare 					; compare R1 vs 0, this gives -1,0,1.
.1991	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/sqr.asm

.1992					EXPUnarySqr:
.1992	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; number to R0
.1995	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.1998	20 b8 2f	jsr $2fb8			jsr 	IFloatSquareRootR0 				; square root.
.199b	b0 01		bcs $199e			bcs 	_EUSValue 						; error check.
.199d	60		rts				rts
.199e					_EUSValue:
.199e	4c 08 27	jmp $2708		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/strhex.asm

.19a1					EXPUnaryHex:
.19a1	20 1e 17	jsr $171e			jsr 	EXPEvalInteger 					; expr
.19a4	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.19a7	5a		phy				phy
.19a8	a9 10		lda #$10			lda 	#16
.19aa	20 0f 31	jsr $310f			jsr 	IFloatIntegerToStringR0
.19ad	80 0a		bra $19b9			bra 	EUSMain
.19af					EXPUnaryStr:
.19af	20 13 17	jsr $1713			jsr 	EXPEvalNumber 					; expr
.19b2	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.19b5	5a		phy				phy
.19b6	20 6a 31	jsr $316a			jsr 	IFloatFloatToStringR0 			; convert to string
.19b9					EUSMain:
.19b9	b0 19		bcs $19d4			bcs 	_EUSError
.19bb	86 24		stx $24				stx 	zTemp0 							; save string address
.19bd	84 25		sty $25				sty 	zTemp0+1
.19bf	a9 20		lda #$20			lda 	#32 							; allocate space for result.
.19c1	20 c5 29	jsr $29c5			jsr 	StringTempAllocate
.19c4	b2 24		lda ($24)			lda 	(zTemp0) 						; get count
.19c6	aa		tax				tax 									; count in X
.19c7	a0 01		ldy #$01			ldy 	#1
.19c9					_EUSCopy:
.19c9	b1 24		lda ($24),y			lda 	(zTemp0),y
.19cb	c8		iny				iny
.19cc	20 fa 29	jsr $29fa			jsr 	StringTempWrite
.19cf	ca		dex				dex
.19d0	d0 f7		bne $19c9			bne	 	_EUSCopy
.19d2	7a		ply				ply
.19d3	60		rts				rts
.19d4					_EUSError:
.19d4	4c 08 27	jmp $2708		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/string.asm

.19d7					EXPUnaryInlineString:
.19d7	18		clc				clc 								; physical address -> IM0,1
.19d8	98		tya				tya 								; put the actual address in IM0
.19d9	65 18		adc $18				adc 	codePtr
.19db	85 08		sta $08				sta 	IFR0+IM0
.19dd	a5 19		lda $19				lda 	codePtr+1
.19df	69 00		adc #$00			adc 	#0
.19e1	85 09		sta $09				sta 	IFR0+IM1
.19e3	64 0a		stz $0a				stz 	IFR0+IM2 					; fill in the 3rd byte and type.
.19e5	a9 80		lda #$80			lda 	#$80
.19e7	85 0b		sta $0b				sta 	IFR0+IExp
.19e9	98		tya				tya	 								; skip over it.
.19ea	38		sec				sec
.19eb	71 18		adc ($18),y			adc 	(codePtr),y
.19ed	a8		tay				tay
.19ee	60		rts				rts
.19ef					_EXPUISRange:
.19ef	4c 08 27	jmp $2708		jmp	ErrorV_range

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/substring.asm

.19f2					EXPUnaryLeft:
.19f2	20 38 1a	jsr $1a38			jsr 	EXPCommonStart 					; <string>,
.19f5	48		pha				pha 									; save string address on stack
.19f6	da		phx				phx
.19f7	a9 00		lda #$00			lda 	#0 								; start position (zero offset)
.19f9	48		pha				pha
.19fa	20 31 17	jsr $1731			jsr 	EXPEvalInteger8 				; characters to do
.19fd	80 44		bra $1a43			bra 	EXPSubstringCommon
.19ff					EXPUnaryRight:
.19ff	20 38 1a	jsr $1a38			jsr 	EXPCommonStart 					; <string>,
.1a02	48		pha				pha 									; save string address on stack
.1a03	da		phx				phx
.1a04	b2 08		lda ($08)			lda 	(IFR0) 							; the string length => stack.
.1a06	48		pha				pha
.1a07	20 31 17	jsr $1731			jsr 	EXPEvalInteger8 				; characters to do
.1a0a	85 24		sta $24				sta 	zTemp0 							; calculate length - required, start point.
.1a0c	68		pla				pla
.1a0d	38		sec				sec
.1a0e	e5 24		sbc $24				sbc 	zTemp0
.1a10	b0 02		bcs $1a14			bcs 	_EUROffLeft
.1a12	a9 00		lda #$00			lda 	#0
.1a14					_EUROffLeft:
.1a14	48		pha				pha 									; start pos
.1a15	a9 ff		lda #$ff			lda 	#255
.1a17	80 2a		bra $1a43			bra 	EXPSubstringCommon
.1a19					EXPUnaryMid:
.1a19	20 38 1a	jsr $1a38			jsr 	EXPCommonStart 					; <string>,
.1a1c	48		pha				pha 									; save string address on stack
.1a1d	da		phx				phx
.1a1e	20 31 17	jsr $1731			jsr 	EXPEvalInteger8 				; characters start
.1a21	f0 12		beq $1a35			beq 	_EUSError 						; 1 is left
.1a23	3a		dec a				dec 	a 								; zero based.
.1a24	48		pha				pha
.1a25	b1 18		lda ($18),y			lda 	(codePtr),y 					; comma follows
.1a27	c9 99		cmp #$99			cmp 	#PR_COMMA
.1a29	f0 04		beq $1a2f			beq 	_EUMLength 						; if so m is provided
.1a2b	a9 ff		lda #$ff			lda 	#255 							; default m
.1a2d	80 14		bra $1a43			bra 	EXPSubstringCommon
.1a2f					_EUMLength:
.1a2f	c8		iny				iny 									; consume comma
.1a30	20 31 17	jsr $1731			jsr 	EXPEvalInteger8 				; characters to do
.1a33	80 0e		bra $1a43			bra 	EXPSubstringCommon
.1a35					_EUSError:
.1a35	4c 19 27	jmp $2719		jmp	ErrorV_value
.1a38					EXPCommonStart:
.1a38	20 3d 17	jsr $173d			jsr 	EXPEvalString
.1a3b	20 d8 28	jsr $28d8			jsr 	ERRCheckComma
.1a3e	a5 08		lda $08				lda 	IFR0+IM0
.1a40	a6 09		ldx $09				ldx 	IFR0+IM1
.1a42	60		rts				rts
.1a43					EXPSubstringCommon:
.1a43	85 26		sta $26				sta 	zTemp1 							; count to do in zTemp1.
.1a45	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; check right bracket.
.1a48	68		pla				pla 									; start position
.1a49	85 27		sta $27				sta 	zTemp1+1 						; save in zTemp1+1
.1a4b	fa		plx				plx 									; get string address to zTemp2.
.1a4c	86 29		stx $29				stx 	zTemp2+1
.1a4e	68		pla				pla
.1a4f	85 28		sta $28				sta 	zTemp2
.1a51	38		sec				sec 									; length - start is the max count of chars
.1a52	b2 28		lda ($28)			lda 	(zTemp2)
.1a54	e5 27		sbc $27				sbc 	zTemp1+1
.1a56	c5 26		cmp $26				cmp 	zTemp1 							; if available < count
.1a58	b0 02		bcs $1a5c			bcs 	_EXPSSNoTrim
.1a5a	85 26		sta $26				sta 	zTemp1 							; update count with available
.1a5c					_EXPSSNoTrim:
.1a5c	a5 26		lda $26				lda 	zTemp1 							; chars required.
.1a5e	20 c5 29	jsr $29c5			jsr 	StringTempAllocate 				; allocate memory for it.
.1a61	a5 26		lda $26				lda 	zTemp1 							; zero length string
.1a63	f0 15		beq $1a7a			beq 	_EXPSSExit
.1a65	a5 27		lda $27				lda 	zTemp1+1 						; if length >= start exit
.1a67	d2 28		cmp ($28)			cmp 	(zTemp2)
.1a69	b0 0f		bcs $1a7a			bcs 	_EXPSSExit
.1a6b	5a		phy				phy
.1a6c	a4 27		ldy $27				ldy 	zTemp1+1 						; start position
.1a6e	c8		iny				iny 									; +1 for the length byte
.1a6f					_EXPSSCopy:
.1a6f	b1 28		lda ($28),y			lda 	(zTemp2),y
.1a71	20 fa 29	jsr $29fa			jsr 	StringTempWrite
.1a74	c8		iny				iny
.1a75	c6 26		dec $26				dec 	zTemp1
.1a77	d0 f6		bne $1a6f			bne 	_EXPSSCopy
.1a79	7a		ply				ply
.1a7a					_EXPSSExit:
.1a7a	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/expression/term/unary/val.asm

.1a7b					EXPUnaryVal:
.1a7b	20 3d 17	jsr $173d			jsr 	EXPEvalString 					; string to R0, zTemp0
.1a7e	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 					; )
.1a81	20 85 1a	jsr $1a85			jsr 	VALConversionZTemp0
.1a84	60		rts				rts
.1a85					VALConversionZTemp0:
.1a85	5a		phy				phy
.1a86	18		clc				clc
.1a87	a5 24		lda $24				lda		zTemp0 							; point XY to the text
.1a89	69 01		adc #$01			adc 	#1
.1a8b	aa		tax				tax
.1a8c	a5 25		lda $25				lda 	zTemp0+1
.1a8e	69 00		adc #$00			adc 	#0
.1a90	a8		tay				tay
.1a91	b2 24		lda ($24)			lda 	(zTemp0) 						; get length.
.1a93	20 d1 31	jsr $31d1			jsr 	IFloatStringToFloatR0 			; do conversion
.1a96	b0 02		bcs $1a9a			bcs 	_EUVError
.1a98	7a		ply				ply
.1a99	60		rts				rts
.1a9a					_EUVError:
.1a9a	4c 19 27	jmp $2719		jmp	ErrorV_value

;******  Return to file: include.files


;******  Processing file: src/generated/asmhash.asm

.1a9d					AssemblerLookup:
>1a9d	a3 1e 00 00 4b 1e 7c eb			.byte 163,30,0,0,75,30,124,235,251,30,124,0,75,30,124,74,184,30,30,0,65,30,124,235,185,30,249,0,65,30,124,74,127,106,0,0,122,106,225,235,35,106,225,0,122,106,225,74,151,106,106,0,122,106,225,235,166,106,125,0,122,106,225,74,56,98,0,0,0,98,11,235,236,98,11,0,46,98,11,74,195,98,98,0,0,98,11,235,191,98,4,0,0,98,11,74,66,29,0,0,59,29,231,235,20,29,231,0,46,29,231,74,211,29,29,0,59,29,231,235,172,29,44,0,46,29,231,74,153,34,0,0,58,34,57,245,147,122,84,0,58,34,57,75,69,34,34,0,58,34,57,245,94,34,102,0,59,34,59,75,25,1,24,0,25,1,24,245,198,1,197,0,25,1,24,75,85,1,1,0,25,1,24,245,204,1,97,0,25,1,24,75,247,168,0,0,247,168,125,245,15,168,146,12,247,168,125,75,117,168,168,0,0,168,125,245,186,168,3,49,0,168,125,75,246,72,0,0,246,72,249,245,14,72,221,0,246,72,249,75,143,72,72,0,0,72,249,245,167,72,43,0,0,72,249,75
>1aa5	fb 1e 7c 00 4b 1e 7c 4a b8 1e 1e 00 41 1e 7c eb
>1ab5	b9 1e f9 00 41 1e 7c 4a 7f 6a 00 00 7a 6a e1 eb
>1ac5	23 6a e1 00 7a 6a e1 4a 97 6a 6a 00 7a 6a e1 eb
>1ad5	a6 6a 7d 00 7a 6a e1 4a 38 62 00 00 00 62 0b eb
>1ae5	ec 62 0b 00 2e 62 0b 4a c3 62 62 00 00 62 0b eb
>1af5	bf 62 04 00 00 62 0b 4a 42 1d 00 00 3b 1d e7 eb
>1b05	14 1d e7 00 2e 1d e7 4a d3 1d 1d 00 3b 1d e7 eb
>1b15	ac 1d 2c 00 2e 1d e7 4a 99 22 00 00 3a 22 39 f5
>1b25	93 7a 54 00 3a 22 39 4b 45 22 22 00 3a 22 39 f5
>1b35	5e 22 66 00 3b 22 3b 4b 19 01 18 00 19 01 18 f5
>1b45	c6 01 c5 00 19 01 18 4b 55 01 01 00 19 01 18 f5
>1b55	cc 01 61 00 19 01 18 4b f7 a8 00 00 f7 a8 7d f5
>1b65	0f a8 92 0c f7 a8 7d 4b 75 a8 a8 00 00 a8 7d f5
>1b75	ba a8 03 31 00 a8 7d 4b f6 48 00 00 f6 48 f9 f5
>1b85	0e 48 dd 00 f6 48 f9 4b 8f 48 48 00 00 48 f9 f5
>1b95	a7 48 2b 00 00 48 f9 4b

;******  Return to file: include.files


;******  Processing file: src/generated/precedence_table.asm

.1b9d					BinaryPrecedence:
>1b9d	02					.byte	 2	; $ef =
>1b9e	02					.byte	 2	; $f0 <>
>1b9f	02					.byte	 2	; $f1 <=
>1ba0	02					.byte	 2	; $f2 <
>1ba1	02					.byte	 2	; $f3 >=
>1ba2	02					.byte	 2	; $f4 >
>1ba3	01					.byte	 1	; $f5 XOR
>1ba4	01					.byte	 1	; $f6 OR
>1ba5	01					.byte	 1	; $f7 AND
>1ba6	04					.byte	 4	; $f8 DIV
>1ba7	04					.byte	 4	; $f9 MOD
>1ba8	04					.byte	 4	; $fa <<
>1ba9	04					.byte	 4	; $fb >>
>1baa	04					.byte	 4	; $fc /
>1bab	04					.byte	 4	; $fd *
>1bac	03					.byte	 3	; $fe -
>1bad	03					.byte	 3	; $ff +

;******  Return to file: include.files


;******  Processing file: src/generated/structure_table.asm

.1bae					StructureOffsets:
>1bae	01					.byte	1  	; $80 REPEAT
>1baf	ff					.byte	255	; $81 UNTIL
>1bb0	01					.byte	1  	; $82 WHILE
>1bb1	ff					.byte	255	; $83 WEND
>1bb2	01					.byte	1  	; $84 IF
>1bb3	ff					.byte	255	; $85 ENDIF
>1bb4	01					.byte	1  	; $86 DO
>1bb5	ff					.byte	255	; $87 LOOP
>1bb6	01					.byte	1  	; $88 PROC
>1bb7	ff					.byte	255	; $89 ENDPROC
>1bb8	01					.byte	1  	; $8a FOR
>1bb9	ff					.byte	255	; $8b NEXT

;******  Return to file: include.files


;******  Processing file: src/generated/token_text.asm

.1bba					StandardTokens:
>1bba	06 52 45 50 45 41 54			.byte	$06,$52,$45,$50,$45,$41,$54             	; $80 repeat
>1bc1	05 55 4e 54 49 4c			.byte	$05,$55,$4e,$54,$49,$4c                 	; $81 until
>1bc7	05 57 48 49 4c 45			.byte	$05,$57,$48,$49,$4c,$45                 	; $82 while
>1bcd	04 57 45 4e 44				.byte	$04,$57,$45,$4e,$44                     	; $83 wend
>1bd2	02 49 46				.byte	$02,$49,$46                             	; $84 if
>1bd5	05 45 4e 44 49 46			.byte	$05,$45,$4e,$44,$49,$46                 	; $85 endif
>1bdb	02 44 4f				.byte	$02,$44,$4f                             	; $86 do
>1bde	04 4c 4f 4f 50				.byte	$04,$4c,$4f,$4f,$50                     	; $87 loop
>1be3	04 50 52 4f 43				.byte	$04,$50,$52,$4f,$43                     	; $88 proc
>1be8	07 45 4e 44 50 52 4f 43			.byte	$07,$45,$4e,$44,$50,$52,$4f,$43         	; $89 endproc
>1bf0	03 46 4f 52				.byte	$03,$46,$4f,$52                         	; $8a for
>1bf4	04 4e 45 58 54				.byte	$04,$4e,$45,$58,$54                     	; $8b next
>1bf9	00					.byte	$00                                     	; $8c [[end]]
>1bfa	00					.byte	$00                                     	; $8d [[shift]]
>1bfb	04 45 4c 53 45				.byte	$04,$45,$4c,$53,$45                     	; $8e else
>1c00	04 54 48 45 4e				.byte	$04,$54,$48,$45,$4e                     	; $8f then
>1c05	02 54 4f				.byte	$02,$54,$4f                             	; $90 to
>1c08	04 53 54 45 50				.byte	$04,$53,$54,$45,$50                     	; $91 step
>1c0d	03 4c 45 54				.byte	$03,$4c,$45,$54                         	; $92 let
>1c11	05 50 52 49 4e 54			.byte	$05,$50,$52,$49,$4e,$54                 	; $93 print
>1c17	05 49 4e 50 55 54			.byte	$05,$49,$4e,$50,$55,$54                 	; $94 input
>1c1d	04 43 41 4c 4c				.byte	$04,$43,$41,$4c,$4c                     	; $95 call
>1c22	03 53 59 53				.byte	$03,$53,$59,$53                         	; $96 sys
>1c26	03 52 45 4d				.byte	$03,$52,$45,$4d                         	; $97 rem
>1c2a	04 45 58 49 54				.byte	$04,$45,$58,$49,$54                     	; $98 exit
>1c2f	01 2c					.byte	$01,$2c                                 	; $99 ,
>1c31	01 3b					.byte	$01,$3b                                 	; $9a ;
>1c33	01 3a					.byte	$01,$3a                                 	; $9b :
>1c35	01 27					.byte	$01,$27                                 	; $9c '
>1c37	01 29					.byte	$01,$29                                 	; $9d )
>1c39	04 50 4f 4b 45				.byte	$04,$50,$4f,$4b,$45                     	; $9e poke
>1c3e	04 44 4f 4b 45				.byte	$04,$44,$4f,$4b,$45                     	; $9f doke
>1c43	04 52 45 41 44				.byte	$04,$52,$45,$41,$44                     	; $a0 read
>1c48	04 44 41 54 41				.byte	$04,$44,$41,$54,$41                     	; $a1 data
>1c4d	01 5b					.byte	$01,$5b                                 	; $a2 [
>1c4f	01 5d					.byte	$01,$5d                                 	; $a3 ]
>1c51	01 23					.byte	$01,$23                                 	; $a4 #
>1c53	01 2e					.byte	$01,$2e                                 	; $a5 .
>1c55	00					.byte	0											; $a6
>1c56	00					.byte	0											; $a7
>1c57	00					.byte	0											; $a8
>1c58	00					.byte	0											; $a9
>1c59	00					.byte	0											; $aa
>1c5a	00					.byte	0											; $ab
>1c5b	00					.byte	0											; $ac
>1c5c	00					.byte	0											; $ad
>1c5d	00					.byte	0											; $ae
>1c5e	00					.byte	0											; $af
>1c5f	00					.byte	0											; $b0
>1c60	00					.byte	0											; $b1
>1c61	00					.byte	0											; $b2
>1c62	00					.byte	0											; $b3
>1c63	00					.byte	0											; $b4
>1c64	00					.byte	0											; $b5
>1c65	00					.byte	0											; $b6
>1c66	00					.byte	0											; $b7
>1c67	00					.byte	0											; $b8
>1c68	00					.byte	0											; $b9
>1c69	00					.byte	0											; $ba
>1c6a	00					.byte	0											; $bb
>1c6b	00					.byte	0											; $bc
>1c6c	00					.byte	0											; $bd
>1c6d	00					.byte	0											; $be
>1c6e	00					.byte	0											; $bf
>1c6f	00					.byte	0											; $c0
>1c70	00					.byte	0											; $c1
>1c71	00					.byte	0											; $c2
>1c72	00					.byte	0											; $c3
>1c73	00					.byte	0											; $c4
>1c74	00					.byte	0											; $c5
>1c75	00					.byte	0											; $c6
>1c76	00					.byte	0											; $c7
>1c77	00					.byte	0											; $c8
>1c78	00					.byte	0											; $c9
>1c79	00					.byte	0											; $ca
>1c7a	00					.byte	0											; $cb
>1c7b	00					.byte	0											; $cc
>1c7c	00					.byte	0											; $cd
>1c7d	00					.byte	0											; $ce
>1c7e	00					.byte	0											; $cf
>1c7f	00					.byte	0											; $d0
>1c80	00					.byte	0											; $d1
>1c81	00					.byte	0											; $d2
>1c82	00					.byte	0											; $d3
>1c83	00					.byte	0											; $d4
>1c84	05 44 45 45 4b 28			.byte	$05,$44,$45,$45,$4b,$28                 	; $d5 deek(
>1c8a	05 50 45 45 4b 28			.byte	$05,$50,$45,$45,$4b,$28                 	; $d6 peek(
>1c90	07 52 49 47 48 54 24 28			.byte	$07,$52,$49,$47,$48,$54,$24,$28         	; $d7 right$(
>1c98	06 4c 45 46 54 24 28			.byte	$06,$4c,$45,$46,$54,$24,$28             	; $d8 left$(
>1c9f	05 4d 49 44 24 28			.byte	$05,$4d,$49,$44,$24,$28                 	; $d9 mid$(
>1ca5	05 53 54 52 24 28			.byte	$05,$53,$54,$52,$24,$28                 	; $da str$(
>1cab	04 56 41 4c 28				.byte	$04,$56,$41,$4c,$28                     	; $db val(
>1cb0	04 53 47 4e 28				.byte	$04,$53,$47,$4e,$28                     	; $dc sgn(
>1cb5	04 41 42 53 28				.byte	$04,$41,$42,$53,$28                     	; $dd abs(
>1cba	04 4c 45 4e 28				.byte	$04,$4c,$45,$4e,$28                     	; $de len(
>1cbf	04 53 51 52 28				.byte	$04,$53,$51,$52,$28                     	; $df sqr(
>1cc4	05 43 48 52 24 28			.byte	$05,$43,$48,$52,$24,$28                 	; $e0 chr$(
>1cca	04 41 53 43 28				.byte	$04,$41,$53,$43,$28                     	; $e1 asc(
>1ccf	07 49 4e 4b 45 59 24 28			.byte	$07,$49,$4e,$4b,$45,$59,$24,$28         	; $e2 inkey$(
>1cd7	06 45 56 45 4e 54 28			.byte	$06,$45,$56,$45,$4e,$54,$28             	; $e3 event(
>1cde	04 54 49 4d 45				.byte	$04,$54,$49,$4d,$45                     	; $e4 time
>1ce3	04 49 4e 54 28				.byte	$04,$49,$4e,$54,$28                     	; $e5 int(
>1ce8	05 46 52 41 43 28			.byte	$05,$46,$52,$41,$43,$28                 	; $e6 frac(
>1cee	04 44 45 43 28				.byte	$04,$44,$45,$43,$28                     	; $e7 dec(
>1cf3	05 48 45 58 24 28			.byte	$05,$48,$45,$58,$24,$28                 	; $e8 hex$(
>1cf9	04 52 4e 44 28				.byte	$04,$52,$4e,$44,$28                     	; $e9 rnd(
>1cfe	05 52 41 4e 44 28			.byte	$05,$52,$41,$4e,$44,$28                 	; $ea rand(
>1d04	01 28					.byte	$01,$28                                 	; $eb (
>1d06	01 26					.byte	$01,$26                                 	; $ec &
>1d08	00					.byte	$00                                     	; $ed [[decimal]]
>1d09	00					.byte	$00                                     	; $ee [[string]]
>1d0a	01 3d					.byte	$01,$3d                                 	; $ef =
>1d0c	02 3c 3e				.byte	$02,$3c,$3e                             	; $f0 <>
>1d0f	02 3c 3d				.byte	$02,$3c,$3d                             	; $f1 <=
>1d12	01 3c					.byte	$01,$3c                                 	; $f2 <
>1d14	02 3e 3d				.byte	$02,$3e,$3d                             	; $f3 >=
>1d17	01 3e					.byte	$01,$3e                                 	; $f4 >
>1d19	03 58 4f 52				.byte	$03,$58,$4f,$52                         	; $f5 xor
>1d1d	02 4f 52				.byte	$02,$4f,$52                             	; $f6 or
>1d20	03 41 4e 44				.byte	$03,$41,$4e,$44                         	; $f7 and
>1d24	03 44 49 56				.byte	$03,$44,$49,$56                         	; $f8 div
>1d28	03 4d 4f 44				.byte	$03,$4d,$4f,$44                         	; $f9 mod
>1d2c	02 3c 3c				.byte	$02,$3c,$3c                             	; $fa <<
>1d2f	02 3e 3e				.byte	$02,$3e,$3e                             	; $fb >>
>1d32	01 2f					.byte	$01,$2f                                 	; $fc /
>1d34	01 2a					.byte	$01,$2a                                 	; $fd *
>1d36	01 2d					.byte	$01,$2d                                 	; $fe -
>1d38	01 2b					.byte	$01,$2b                                 	; $ff +
>1d3a	ff					.byte	$FF
.1d3b					AlternateTokens:
>1d3b	05 43 4c 45 41 52			.byte	$05,$43,$4c,$45,$41,$52                 	; $8d80 clear
>1d41	03 4e 45 57				.byte	$03,$4e,$45,$57                         	; $8d81 new
>1d45	03 52 55 4e				.byte	$03,$52,$55,$4e                         	; $8d82 run
>1d49	04 53 54 4f 50				.byte	$04,$53,$54,$4f,$50                     	; $8d83 stop
>1d4e	03 45 4e 44				.byte	$03,$45,$4e,$44                         	; $8d84 end
>1d52	06 41 53 53 45 52 54			.byte	$06,$41,$53,$53,$45,$52,$54             	; $8d85 assert
>1d59	04 4c 49 53 54				.byte	$04,$4c,$49,$53,$54                     	; $8d86 list
>1d5e	04 53 41 56 45				.byte	$04,$53,$41,$56,$45                     	; $8d87 save
>1d63	04 4c 4f 41 44				.byte	$04,$4c,$4f,$41,$44                     	; $8d88 load
>1d68	05 47 4f 53 55 42			.byte	$05,$47,$4f,$53,$55,$42                 	; $8d89 gosub
>1d6e	04 47 4f 54 4f				.byte	$04,$47,$4f,$54,$4f                     	; $8d8a goto
>1d73	06 52 45 54 55 52 4e			.byte	$06,$52,$45,$54,$55,$52,$4e             	; $8d8b return
>1d7a	07 52 45 53 54 4f 52 45			.byte	$07,$52,$45,$53,$54,$4f,$52,$45         	; $8d8c restore
>1d82	03 44 49 4d				.byte	$03,$44,$49,$4d                         	; $8d8d dim
>1d86	03 44 49 52				.byte	$03,$44,$49,$52                         	; $8d8e dir
>1d8a	05 45 52 41 53 45			.byte	$05,$45,$52,$41,$53,$45                 	; $8d8f erase
>1d90	ff					.byte	$FF

;******  Return to file: include.files


;******  Processing file: src/generated/vector_table.asm

.1d91					VectorTable:
>1d91	e7 25					.word	Command_REPEAT           ; $80 REPEAT
>1d93	f0 25					.word	Command_UNTIL            ; $81 UNTIL
>1d95	ca 26					.word	Command_WHILE            ; $82 WHILE
>1d97	eb 26					.word	Command_WEND             ; $83 WEND
>1d99	bd 25					.word	IfCommand                ; $84 IF
>1d9b	e6 25					.word	EndIf                    ; $85 ENDIF
>1d9d	3f 24					.word	Command_DO               ; $86 DO
>1d9f	57 24					.word	Command_LOOP             ; $87 LOOP
>1da1	53 15					.word	NoExec08                 ; $88 PROC
>1da3	33 24					.word	Command_ENDPROC          ; $89 ENDPROC
>1da5	60 24					.word	Command_FOR              ; $8a FOR
>1da7	ed 24					.word	Command_NEXT             ; $8b NEXT
>1da9	d4 14					.word	RUNEndOfLine             ; $8c [[END]]
>1dab	30 15					.word	Command_Shift_Handler    ; $8d [[SHIFT]]
>1dad	df 25					.word	ElseCode                 ; $8e ELSE
>1daf	53 15					.word	NoExec01                 ; $8f THEN
>1db1	53 15					.word	NoExec02                 ; $90 TO
>1db3	53 15					.word	NoExec03                 ; $91 STEP
>1db5	bf 12					.word	CommandLET               ; $92 LET
>1db7	14 12					.word	Command_Print            ; $93 PRINT
>1db9	0d 12					.word	Command_Input            ; $94 INPUT
>1dbb	f7 23					.word	Command_CALL             ; $95 CALL
>1dbd	3e 15					.word	Command_Sys              ; $96 SYS
>1dbf	8d 14					.word	Command_REM              ; $97 REM
>1dc1	48 24					.word	Command_EXIT             ; $98 EXIT
>1dc3	53 15					.word	NoExec04                 ; $99 ,
>1dc5	53 15					.word	NoExec05                 ; $9a ;
>1dc7	53 15					.word	NoExec06                 ; $9b :
>1dc9	8d 14					.word	Command_REM2             ; $9c '
>1dcb	53 15					.word	NoExec07                 ; $9d )
>1dcd	b6 11					.word	Command_Poke             ; $9e POKE
>1dcf	b3 11					.word	Command_Doke             ; $9f DOKE
>1dd1	19 14					.word	Command_READ             ; $a0 READ
>1dd3	80 14					.word	Command_DATA             ; $a1 DATA
>1dd5	43 2b					.word	NotImplemented           ; $a2 [
>1dd7	43 2b					.word	NotImplemented           ; $a3 ]
>1dd9	43 2b					.word	NotImplemented           ; $a4 #
>1ddb	43 2b					.word	NotImplemented           ; $a5 .
>1ddd	43 2b					.word	NotImplemented           ; $a6
>1ddf	43 2b					.word	NotImplemented           ; $a7
>1de1	43 2b					.word	NotImplemented           ; $a8
>1de3	43 2b					.word	NotImplemented           ; $a9
>1de5	43 2b					.word	NotImplemented           ; $aa
>1de7	43 2b					.word	NotImplemented           ; $ab
>1de9	43 2b					.word	NotImplemented           ; $ac
>1deb	43 2b					.word	NotImplemented           ; $ad
>1ded	43 2b					.word	NotImplemented           ; $ae
>1def	43 2b					.word	NotImplemented           ; $af
>1df1	43 2b					.word	NotImplemented           ; $b0
>1df3	43 2b					.word	NotImplemented           ; $b1
>1df5	43 2b					.word	NotImplemented           ; $b2
>1df7	43 2b					.word	NotImplemented           ; $b3
>1df9	43 2b					.word	NotImplemented           ; $b4
>1dfb	43 2b					.word	NotImplemented           ; $b5
>1dfd	43 2b					.word	NotImplemented           ; $b6
>1dff	43 2b					.word	NotImplemented           ; $b7
>1e01	43 2b					.word	NotImplemented           ; $b8
>1e03	43 2b					.word	NotImplemented           ; $b9
>1e05	43 2b					.word	NotImplemented           ; $ba
>1e07	43 2b					.word	NotImplemented           ; $bb
>1e09	43 2b					.word	NotImplemented           ; $bc
>1e0b	43 2b					.word	NotImplemented           ; $bd
>1e0d	43 2b					.word	NotImplemented           ; $be
>1e0f	43 2b					.word	NotImplemented           ; $bf
>1e11	43 2b					.word	NotImplemented           ; $c0
>1e13	43 2b					.word	NotImplemented           ; $c1
>1e15	43 2b					.word	NotImplemented           ; $c2
>1e17	43 2b					.word	NotImplemented           ; $c3
>1e19	43 2b					.word	NotImplemented           ; $c4
>1e1b	43 2b					.word	NotImplemented           ; $c5
>1e1d	43 2b					.word	NotImplemented           ; $c6
>1e1f	43 2b					.word	NotImplemented           ; $c7
>1e21	43 2b					.word	NotImplemented           ; $c8
>1e23	43 2b					.word	NotImplemented           ; $c9
>1e25	43 2b					.word	NotImplemented           ; $ca
>1e27	43 2b					.word	NotImplemented           ; $cb
>1e29	43 2b					.word	NotImplemented           ; $cc
>1e2b	43 2b					.word	NotImplemented           ; $cd
>1e2d	43 2b					.word	NotImplemented           ; $ce
>1e2f	43 2b					.word	NotImplemented           ; $cf
>1e31	43 2b					.word	NotImplemented           ; $d0
>1e33	43 2b					.word	NotImplemented           ; $d1
>1e35	43 2b					.word	NotImplemented           ; $d2
>1e37	43 2b					.word	NotImplemented           ; $d3
>1e39	43 2b					.word	NotImplemented           ; $d4
>1e3b	c1 18					.word	EXPUnaryDeek             ; $d5 DEEK(
>1e3d	b3 18					.word	EXPUnaryPeek             ; $d6 PEEK(
>1e3f	ff 19					.word	EXPUnaryRight            ; $d7 RIGHT$(
>1e41	f2 19					.word	EXPUnaryLeft             ; $d8 LEFT$(
>1e43	19 1a					.word	EXPUnaryMid              ; $d9 MID$(
>1e45	af 19					.word	EXPUnaryStr              ; $da STR$(
>1e47	7b 1a					.word	EXPUnaryVal              ; $db VAL(
>1e49	7c 19					.word	EXPUnarySgn              ; $dc SGN(
>1e4b	2d 18					.word	EXPUnaryAbs              ; $dd ABS(
>1e4d	01 19					.word	EXPUnaryLen              ; $de LEN(
>1e4f	92 19					.word	EXPUnarySqr              ; $df SQR(
>1e51	51 18					.word	EXPUnaryChr              ; $e0 CHR$(
>1e53	3b 18					.word	EXPUnaryAsc              ; $e1 ASC(
>1e55	e3 18					.word	EXPUnaryInkey            ; $e2 INKEY$(
>1e57	43 2b					.word	NotImplemented           ; $e3 EVENT(
>1e59	43 2b					.word	NotImplemented           ; $e4 TIME
>1e5b	f7 18					.word	EXPUnaryInt              ; $e5 INT(
>1e5d	d9 18					.word	EXPUnaryFrac             ; $e6 FRAC(
>1e5f	62 18					.word	EXPUnaryDec              ; $e7 DEC(
>1e61	a1 19					.word	EXPUnaryHex              ; $e8 HEX$(
>1e63	16 19					.word	EXPUnaryRnd              ; $e9 RND(
>1e65	26 19					.word	ExpUnaryRand             ; $ea RAND(
>1e67	0f 19					.word	EXPUnaryParenthesis      ; $eb (
>1e69	37 18					.word	EXPUnaryNull             ; $ec &
>1e6b	b0 18					.word	EXPUnaryInlineDec        ; $ed [[DECIMAL]]
>1e6d	d7 19					.word	EXPUnaryInlineString     ; $ee [[STRING]]
>1e6f	10 16					.word	EXPCompareEqual          ; $ef =
>1e71	2b 16					.word	EXPCompareNotEqual       ; $f0 <>
>1e73	34 16					.word	EXPCompareLessEqual      ; $f1 <=
>1e75	19 16					.word	EXPCompareLess           ; $f2 <
>1e77	3d 16					.word	EXPCompareGreaterEqual   ; $f3 >=
>1e79	22 16					.word	EXPCompareGreater        ; $f4 >
>1e7b	bd 15					.word	EXPBinXor                ; $f5 XOR
>1e7d	b1 15					.word	EXPBinOr                 ; $f6 OR
>1e7f	a5 15					.word	EXPBinAnd                ; $f7 AND
>1e81	7d 15					.word	EXPBinIDiv               ; $f8 DIV
>1e83	8e 15					.word	EXPBinIMod               ; $f9 MOD
>1e85	88 16					.word	EXPBinLeft               ; $fa <<
>1e87	90 16					.word	EXPBinRight              ; $fb >>
>1e89	71 15					.word	EXPBinFDiv               ; $fc /
>1e8b	68 15					.word	EXPBinMul                ; $fd *
>1e8d	5f 15					.word	EXPBinSub                ; $fe -
>1e8f	56 15					.word	EXPBinAdd                ; $ff +
.1e91					AlternateVectorTable:
>1e91	23 10					.word	Command_CLEAR            ; $8d80 CLEAR
>1e93	10 14					.word	Command_NEW              ; $8d81 NEW
>1e95	c8 14					.word	Command_RUN              ; $8d82 RUN
>1e97	3b 15					.word	Command_STOP             ; $8d83 STOP
>1e99	38 15					.word	Command_END              ; $8d84 END
>1e9b	15 10					.word	Command_ASSERT           ; $8d85 ASSERT
>1e9d	39 13					.word	Command_LIST             ; $8d86 LIST
>1e9f	b1 2a					.word	Command_SAVE             ; $8d87 SAVE
>1ea1	70 2a					.word	Command_LOAD             ; $8d88 LOAD
>1ea3	a3 25					.word	Command_GOSUB            ; $8d89 GOSUB
>1ea5	dd 11					.word	Command_GOTO             ; $8d8a GOTO
>1ea7	b1 25					.word	Command_RETURN           ; $8d8b RETURN
>1ea9	9a 14					.word	Command_RESTORE          ; $8d8c RESTORE
>1eab	97 10					.word	CommandDIM               ; $8d8d DIM
>1ead	07 2a					.word	Command_DIR              ; $8d8e DIR
>1eaf	44 2a					.word	Command_ERASE            ; $8d8f ERASE

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/detokenise.asm

.1eb1					TOKDetokenise:
.1eb1	86 28		stx $28				stx 	zTemp2 						; save tokenised code in zTemp2
.1eb3	84 29		sty $29				sty 	zTemp2+1
.1eb5	9c 18 05	stz $0518			stz		TOKLastCharacter 			; clear last character
.1eb8					_TOKDLoop:
.1eb8	20 fd 1e	jsr $1efd			jsr 	TOKDGet 					; get next
.1ebb	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ			; end of line
.1ebd	f0 3c		beq $1efb			beq 	_TOKDExit
.1ebf	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ		; is it a string/integer with additional data.
.1ec1	f0 33		beq $1ef6			beq 	_TOKDDataItem
.1ec3	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ
.1ec5	f0 2f		beq $1ef6			beq 	_TOKDDataItem
.1ec7	c9 ec		cmp #$ec			cmp 	#PR_AMPERSAND 				; & is a special case.
.1ec9	f0 19		beq $1ee4			beq 	_TOKAmpersand
.1ecb	c9 00		cmp #$00			cmp 	#0 							; is it a token 80-FF
.1ecd	10 05		bpl $1ed4			bpl 	_TOKDNotToken
.1ecf	20 c3 1f	jsr $1fc3			jsr 	TOKDToken 					; token to text.
.1ed2	80 e4		bra $1eb8			bra 	_TOKDLoop
.1ed4					_TOKDNotToken:
.1ed4	c9 40		cmp #$40			cmp 	#$40  						; 40-7F Identifier
.1ed6	90 05		bcc $1edd			bcc 	_TOKDNotIdentifier
.1ed8	20 3a 1f	jsr $1f3a			jsr 	TOKDIdentifier
.1edb	80 db		bra $1eb8			bra 	_TOKDLoop
.1edd					_TOKDNotIdentifier:
.1edd	a0 0a		ldy #$0a			ldy 	#10
.1edf	20 7d 1f	jsr $1f7d			jsr 	TOKDInteger
.1ee2	80 d4		bra $1eb8			bra 	_TOKDLoop
.1ee4					_TOKAmpersand:
.1ee4	20 05 20	jsr $2005			jsr 	TOKDSpaceLastAlpha  		; space if last alpha
.1ee7	a9 26		lda #$26			lda 	#"&" 						; output hex marker
.1ee9	20 06 1f	jsr $1f06			jsr 	TOKDOutput
.1eec	20 fd 1e	jsr $1efd			jsr 	TOKDGet 					; get first char of integer
.1eef	a0 10		ldy #$10			ldy 	#16 						; expand in base 16
.1ef1	20 7d 1f	jsr $1f7d			jsr 	TOKDInteger
.1ef4	80 c2		bra $1eb8			bra 	_TOKDLoop
.1ef6					_TOKDDataItem:
.1ef6	20 13 1f	jsr $1f13			jsr 	TOKDDataItem
.1ef9	80 bd		bra $1eb8			bra 	_TOKDLoop
.1efb					_TOKDExit:
.1efb	18		clc				clc
.1efc	60		rts				rts
.1efd	b2 28		lda ($28)	TOKDGet:lda 	(zTemp2)
.1eff	e6 28		inc $28				inc 	zTemp2
.1f01	d0 02		bne $1f05			bne 	_TKDGExit
.1f03	e6 29		inc $29				inc 	zTemp2+1
.1f05					_TKDGExit:
.1f05	60		rts				rts
.1f06					TOKDOutput:
.1f06	8d 18 05	sta $0518			sta 	TOKLastCharacter
.1f09	6c 16 05	jmp ($0516)			jmp 	(TOKOutputMethod)
.1f0c					TOKSetDetokeniseOutput:
.1f0c	8e 16 05	stx $0516			stx 	TOKOutputMethod
.1f0f	8c 17 05	sty $0517			sty 	TOKOutputMethod+1
.1f12	60		rts				rts
.0516					TOKOutputMethod:
>0516							.fill 	2
.0518					TOKLastCharacter:
>0518							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkdataitem.asm

.1f13					TOKDDataItem:
.1f13	a8		tay				tay 								; type in Y
.1f14	a9 22		lda #$22			lda 	#'"'						; start with " or .
.1f16	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ
.1f18	f0 02		beq $1f1c			beq 	_TOKDDIsString
.1f1a	a9 2e		lda #$2e			lda 	#'.'
.1f1c					_TOKDDIsString:
.1f1c	20 06 1f	jsr $1f06			jsr 	TOKDOutput 					; dump it
.1f1f	20 fd 1e	jsr $1efd			jsr 	TOKDGet 					; get length into X
.1f22	aa		tax				tax
.1f23					_TOKDDOutput:
.1f23	ca		dex				dex 								; are we complete
.1f24	e0 ff		cpx #$ff			cpx 	#255
.1f26	f0 08		beq $1f30			beq 	_TOKDDEnd
.1f28	20 fd 1e	jsr $1efd			jsr 	TOKDGet 					; get character and output it
.1f2b	20 06 1f	jsr $1f06			jsr 	TOKDOutput
.1f2e	80 f3		bra $1f23			bra 	_TOKDDOutput
.1f30					_TOKDDEnd:
.1f30	c0 ee		cpy #$ee			cpy 	#PR_LSQLSQSTRINGRSQRSQ 		; if string, do closing quote
.1f32	d0 05		bne $1f39			bne 	_TOKDDNotString
.1f34	a9 22		lda #$22			lda 	#'"'
.1f36	20 06 1f	jsr $1f06			jsr 	TOKDOutput
.1f39					_TOKDDNotString:
.1f39	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkidentifier.asm

.1f3a					TOKDIdentifier:
.1f3a	a0 ff		ldy #$ff			ldy 	#$FF
.1f3c	8c 19 05	sty $0519			sty 	TOKDIFirstChar
.1f3f					_TOKDLoop:
.1f3f	a8		tay				tay 								; token in Y
.1f40	a9 5f		lda #$5f			lda 	#'_' 						; handle _
.1f42	c0 64		cpy #$64			cpy 	#$64
.1f44	f0 0b		beq $1f51			beq 	_TOKDIOutput
.1f46	98		tya				tya 								; handle a-z
.1f47	18		clc				clc
.1f48	69 21		adc #$21			adc	 	#$21
.1f4a	c0 5a		cpy #$5a			cpy 	#$5A
.1f4c	90 03		bcc $1f51			bcc 	_TOKDIOutput
.1f4e	38		sec				sec 								; handle 0-9
.1f4f	e9 4b		sbc #$4b			sbc 	#$4B
.1f51					_TOKDIOutput:
.1f51	2c 19 05	bit $0519			bit 	TOKDIFirstChar
.1f54	10 08		bpl $1f5e			bpl 	_TOKDINoSpacing
.1f56	48		pha				pha
.1f57	20 00 20	jsr $2000			jsr 	TOKDSpacing
.1f5a	9c 19 05	stz $0519			stz 	TOKDIFirstChar
.1f5d	68		pla				pla
.1f5e					_TOKDINoSpacing:
.1f5e	20 06 1f	jsr $1f06			jsr 	TOKDOutput
.1f61	20 fd 1e	jsr $1efd			jsr 	TOKDGet 					; get next token
.1f64	c9 7c		cmp #$7c			cmp 	#$7C
.1f66	90 d7		bcc $1f3f			bcc 	_TOKDLoop
.1f68	f0 12		beq $1f7c			beq 	_TOKDIExit 					; it's a number, no tail.
.1f6a	4a		lsr a				lsr 	a 							; string ?
.1f6b	90 07		bcc $1f74			bcc 	_TOKDICheckArray
.1f6d	48		pha				pha
.1f6e	a9 24		lda #$24			lda 	#"$"
.1f70	20 06 1f	jsr $1f06			jsr 	TOKDOutput
.1f73	68		pla				pla
.1f74					_TOKDICheckArray:
.1f74	4a		lsr a				lsr 	a 							; array ?
.1f75	90 05		bcc $1f7c			bcc 	_TOKDIExit
.1f77	a9 28		lda #$28			lda 	#"("
.1f79	20 06 1f	jsr $1f06			jsr 	TOKDOutput
.1f7c					_TOKDIExit:
.1f7c	60		rts				rts
.0519					TOKDIFirstChar:
>0519							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtkinteger.asm

.1f7d					TOKDInteger:
.1f7d	5a		phy				phy 								; save base
.1f7e	a2 08		ldx #$08			ldx 	#IFR0 						; set into R0
.1f80	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.1f83					_TOKDILoop:
.1f83	b2 28		lda ($28)			lda 	(zTemp2) 					; followed by a 00-3F
.1f85	c9 40		cmp #$40			cmp 	#$40
.1f87	b0 1d		bcs $1fa6			bcs 	_TOKDIHaveInteger
.1f89	a2 08		ldx #$08			ldx 	#IFR0 						; R0 << 6
.1f8b	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.1f8e	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.1f91	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.1f94	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.1f97	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.1f9a	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.1f9d	20 fd 1e	jsr $1efd			jsr 	TOKDGet 					; OR byte in.
.1fa0	05 08		ora $08				ora 	IFR0+IM0
.1fa2	85 08		sta $08				sta 	IFR0+IM0
.1fa4	80 dd		bra $1f83			bra 	_TOKDILoop
.1fa6					_TOKDIHaveInteger:
.1fa6	7a		ply				ply 								; restore base
.1fa7	98		tya				tya 								; base in A
.1fa8	20 0f 31	jsr $310f			jsr 	IFloatIntegerToStringR0
.1fab	86 24		stx $24				stx 	zTemp0
.1fad	84 25		sty $25				sty 	zTemp0+1
.1faf	b2 24		lda ($24)			lda 	(zTemp0)
.1fb1	a0 01		ldy #$01			ldy 	#1 							; output buffer.
.1fb3	b1 24		lda ($24),y			lda 	(zTemp0),y
.1fb5	20 00 20	jsr $2000			jsr 	TOKDSpacing 				; check spacing okay.
.1fb8					_TOKDOutput:
.1fb8	b1 24		lda ($24),y			lda 	(zTemp0),y
.1fba	20 06 1f	jsr $1f06			jsr 	TOKDOutput
.1fbd	c8		iny				iny
.1fbe	b1 24		lda ($24),y			lda 	(zTemp0),y
.1fc0	d0 f6		bne $1fb8			bne 	_TOKDOutput
.1fc2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/detokenise/dtktoken.asm

.1fc3					TOKDToken:
.1fc3	a2 ba		ldx #$ba			ldx 	#StandardTokens & $FF 		; standard table
.1fc5	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.1fc7	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; is it the shift token ?
.1fc9	d0 07		bne $1fd2			bne 	_TOKDSearch
.1fcb	20 fd 1e	jsr $1efd			jsr 	TOKDGet 					; get next
.1fce	a2 3b		ldx #$3b			ldx 	#AlternateTokens & $FF 		; alt table
.1fd0	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.1fd2					_TOKDSearch:
.1fd2	86 24		stx $24				stx 	zTemp0 						; put table in zTemp0
.1fd4	84 25		sty $25				sty 	zTemp0+1
.1fd6	aa		tax				tax 								; token ID in X.
.1fd7					_TOKDFind:
.1fd7	ca		dex				dex 								; reached the start
.1fd8	10 0d		bpl $1fe7			bpl 	_TOKDFound
.1fda	38		sec				sec 								; go to next entry
.1fdb	b2 24		lda ($24)			lda 	(zTemp0)
.1fdd	65 24		adc $24				adc 	zTemp0
.1fdf	85 24		sta $24				sta 	zTemp0
.1fe1	90 f4		bcc $1fd7			bcc 	_TOKDFind
.1fe3	e6 25		inc $25				inc 	zTemp0+1
.1fe5	80 f0		bra $1fd7			bra 	_TOKDFind
.1fe7					_TOKDFound:
.1fe7	b2 24		lda ($24)			lda 	(zTemp0) 					; length to X
.1fe9	f0 14		beq $1fff			beq 	_TOKDExit
.1feb	aa		tax				tax
.1fec	a0 01		ldy #$01			ldy 	#1 							; output the token.
.1fee	b1 24		lda ($24),y			lda 	(zTemp0),y 					; check spacing first character,
.1ff0	20 00 20	jsr $2000			jsr 	TOKDSpacing
.1ff3					_TOKDOutput:
.1ff3	b1 24		lda ($24),y			lda 	(zTemp0),y
.1ff5	20 b6 23	jsr $23b6			jsr 	TOKToLower
.1ff8	20 06 1f	jsr $1f06			jsr 	TOKDOutput
.1ffb	c8		iny				iny
.1ffc	ca		dex				dex
.1ffd	d0 f4		bne $1ff3			bne 	_TOKDOutput
.1fff					_TOKDExit:
.1fff	60		rts				rts
.2000					TOKDSpacing:
.2000	20 cd 23	jsr $23cd			jsr 	TOKIsIdentifierElement		; next character alphanumeric
.2003	90 0d		bcc $2012			bcc 	TOKDSExit
.2005					TOKDSpaceLastAlpha:
.2005	ad 18 05	lda $0518			lda 	TOKLastCharacter			; and last character also alphanumeric
.2008	20 cd 23	jsr $23cd			jsr 	TOKIsIdentifierElement
.200b	90 05		bcc $2012			bcc 	TOKDSExit
.200d	a9 20		lda #$20			lda 	#" " 						; we need a space.
.200f	20 06 1f	jsr $1f06			jsr 	TOKDOutput
.2012					TOKDSExit:
.2012	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/delete.asm

.2013					PGMDeleteLine:
.2013	20 c6 20	jsr $20c6			jsr 	PGMEndProgram 				; end of program into zTemp0
.2016	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2018	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.201b	85 27		sta $27				sta 	zTemp1+1
.201d					_PGMDLoop:
.201d	b2 26		lda ($26)			lda 	(zTemp1) 					; finished, not found ?
.201f	38		sec				sec
.2020	f0 3a		beq $205c			beq 	_PGMDExit
.2022	a0 01		ldy #$01			ldy 	#1 							; found line number ?
.2024	b1 26		lda ($26),y			lda 	(zTemp1),y
.2026	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2029	d0 08		bne $2033			bne 	_PGMDNext
.202b	c8		iny				iny
.202c	b1 26		lda ($26),y			lda 	(zTemp1),y
.202e	cd 02 04	cmp $0402			cmp 	TOKLineNumber+1
.2031	f0 0d		beq $2040			beq 	_PGMDDelete
.2033					_PGMDNext:
.2033	18		clc				clc
.2034	b2 26		lda ($26)			lda 	(zTemp1)
.2036	65 26		adc $26				adc 	zTemp1
.2038	85 26		sta $26				sta 	zTemp1
.203a	90 e1		bcc $201d			bcc 	_PGMDLoop
.203c	e6 27		inc $27				inc 	zTemp1+1
.203e	80 dd		bra $201d			bra 	_PGMDLoop
.2040					_PGMDDelete:
.2040	b2 26		lda ($26)			lda 	(zTemp1) 					; offset to next in Y
.2042	a8		tay				tay
.2043					_PGMDCopy:
.2043	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy down.
.2045	92 26		sta ($26)			sta 	(zTemp1)
.2047	a5 26		lda $26				lda 	zTemp1 						; reached the end ?
.2049	c5 24		cmp $24				cmp 	zTemp0
.204b	d0 07		bne $2054			bne 	_PGMDNext2
.204d	a5 27		lda $27				lda 	zTemp1+1
.204f	c5 25		cmp $25				cmp 	zTemp0+1
.2051	18		clc				clc
.2052	f0 08		beq $205c			beq 	_PGMDExit
.2054					_PGMDNext2:
.2054	e6 26		inc $26				inc 	zTemp1 						; advance pointer.
.2056	d0 eb		bne $2043			bne 	_PGMDCopy
.2058	e6 27		inc $27				inc 	zTemp1+1
.205a	80 e7		bra $2043			bra 	_PGMDCopy
.205c					_PGMDExit:
.205c	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/editing/insert.asm

.205d					PGMInsertLine:
.205d	20 c6 20	jsr $20c6			jsr 	PGMEndProgram 				; end of program into zTemp0
.2060	64 26		stz $26				stz 	zTemp1						; copy base address of code to zTemp1
.2062	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.2065	85 27		sta $27				sta 	zTemp1+1
.2067					_PGMILoop:
.2067	b2 26		lda ($26)			lda 	(zTemp1) 					; reached the end, it goes here on the end.
.2069	f0 1c		beq $2087			beq 	_PGMIInsert
.206b	a0 01		ldy #$01			ldy 	#1 							; compare in-program line vs token line.
.206d	b1 26		lda ($26),y			lda 	(zTemp1),y
.206f	cd 01 04	cmp $0401			cmp 	TOKLineNumber
.2072	c8		iny				iny
.2073	b1 26		lda ($26),y			lda 	(zTemp1),y
.2075	ed 02 04	sbc $0402			sbc 	TOKLineNumber+1
.2078	b0 0d		bcs $2087			bcs 	_PGMIInsert 				; insert here.
.207a	18		clc				clc
.207b	b2 26		lda ($26)			lda 	(zTemp1)
.207d	65 26		adc $26				adc 	zTemp1
.207f	85 26		sta $26				sta 	zTemp1
.2081	90 e4		bcc $2067			bcc 	_PGMILoop
.2083	e6 27		inc $27				inc 	zTemp1+1
.2085	80 e0		bra $2067			bra 	_PGMILoop
.2087					_PGMIInsert:
.2087	ac 00 04	ldy $0400			ldy 	TOKLineSize 				; space required
.208a					_PGMIInsertLoop:
.208a	b2 24		lda ($24)			lda 	(zTemp0)
.208c	91 24		sta ($24),y			sta 	(zTemp0),y
.208e	a5 26		lda $26				lda 	zTemp1 						; reached insert point
.2090	c5 24		cmp $24				cmp 	zTemp0
.2092	d0 06		bne $209a			bne 	_PGMINext
.2094	a5 27		lda $27				lda 	zTemp1+1
.2096	c5 25		cmp $25				cmp 	zTemp0+1
.2098	f0 0a		beq $20a4			beq 	_PGMIInserted
.209a					_PGMINext:
.209a	a5 24		lda $24				lda 	zTemp0
.209c	d0 02		bne $20a0			bne 	_PGMINoBorrow
.209e	c6 25		dec $25				dec 	zTemp0+1
.20a0					_PGMINoBorrow:
.20a0	c6 24		dec $24				dec 	zTemp0
.20a2	80 e6		bra $208a			bra 	_PGMIInsertLoop
.20a4					_PGMIInserted:
.20a4	a0 00		ldy #$00			ldy 	#0 							; copy tokenbuffer to insert point
.20a6					_PGMICopyLoop:
.20a6	b9 00 04	lda $0400,y			lda 	TOKLineSize,y
.20a9	91 26		sta ($26),y			sta 	(zTemp1),y
.20ab	c8		iny				iny
.20ac	cc 00 04	cpy $0400			cpy 	TOKLineSize
.20af	d0 f5		bne $20a6			bne 	_PGMICopyLoop
.20b1	18		clc				clc
.20b2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/setup.asm

.20b3					PGMSetBaseAddress:
.20b3	8e 1a 05	stx $051a			stx 	PGMBaseHigh 				; use memory from here
.20b6	8c 1b 05	sty $051b			sty 	PGMEndMemoryHigh 			; to here.
.20b9	60		rts				rts
.20ba					PGMNewProgram:
.20ba	64 24		stz $24				stz 	zTemp0						; copy base address to zTemp0
.20bc	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.20bf	85 25		sta $25				sta 	zTemp0+1
.20c1	a9 00		lda #$00			lda 	#0 							; overwrite the offset to zero.
.20c3	92 24		sta ($24)			sta 	(zTemp0)
.20c5	60		rts				rts
.20c6					PGMEndProgram:
.20c6	64 24		stz $24				stz 	zTemp0 						; copy base address to zTemp0
.20c8	ad 1a 05	lda $051a			lda 	PGMBaseHigh
.20cb	85 25		sta $25				sta 	zTemp0+1
.20cd					_PGMEPLoop:
.20cd	b2 24		lda ($24)			lda 	(zTemp0) 					; reached end ?
.20cf	f0 0b		beq $20dc			beq 	_PGMEPExit
.20d1	18		clc				clc 								; no, advance to next
.20d2	65 24		adc $24				adc 	zTemp0
.20d4	85 24		sta $24				sta 	zTemp0
.20d6	90 f5		bcc $20cd			bcc 	_PGMEPLoop
.20d8	e6 25		inc $25				inc 	zTemp0+1
.20da	80 f1		bra $20cd			bra 	_PGMEPLoop
.20dc					_PGMEPExit:
.20dc	60		rts				rts
.051a					PGMBaseHigh:
>051a							.fill 	1
.051b					PGMEndMemoryHigh:
>051b							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokbuffer.asm

.20dd					TOKResetElement:
.20dd	9c 1c 05	stz $051c			stz 	TOKElement
.20e0	60		rts				rts
.20e1					TOKWriteElement:
.20e1	da		phx				phx
.20e2	ae 1c 05	ldx $051c			ldx 	TOKElement
.20e5	9d 1d 05	sta $051d,x			sta 	TOKElementText,x
.20e8	9e 1e 05	stz $051e,x			stz 	TOKElementText+1,x
.20eb	fa		plx				plx
.20ec	ee 1c 05	inc $051c			inc 	TOKElement
.20ef	60		rts				rts
.051c					TOKElement:
>051c							.fill 	1
.051d					TOKElementText:
>051d							.fill 	255

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokconstant.asm

.20f0					TOKTokeniseConstant:
.20f0	a5 08		lda $08				lda 	IFR0+IM0 					; check > 64
.20f2	48		pha				pha 								; save on stack
.20f3	29 c0		and #$c0			and 	#$C0
.20f5	05 09		ora $09				ora 	IFR0+IM1
.20f7	05 0a		ora $0a				ora 	IFR0+IM2
.20f9	f0 10		beq $210b			beq 	_TTCLess
.20fb	da		phx				phx
.20fc	a2 06		ldx #$06			ldx 	#6 							; divide by 64
.20fe					_TTCShiftRight:
.20fe	46 0a		lsr $0a				lsr 	IFR0+IM2
.2100	66 09		ror $09				ror 	IFR0+IM1
.2102	66 08		ror $08				ror 	IFR0+IM0
.2104	ca		dex				dex
.2105	d0 f7		bne $20fe			bne 	_TTCShiftRight
.2107	fa		plx				plx
.2108	20 f0 20	jsr $20f0			jsr 	TOKTokeniseConstant
.210b					_TTCLess:
.210b	68		pla				pla
.210c	29 3f		and #$3f			and 	#$3F 						; lower 6 bits
.210e	20 ae 21	jsr $21ae			jsr 	TOKWriteA
.2111	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokdecimal.asm

.2112					TOKTokeniseDecimals:
.2112	20 c1 21	jsr $21c1			jsr 	TOKGetNext 					; consume the .
.2115	20 3a 23	jsr $233a			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2118	a9 ed		lda #$ed			lda 	#PR_LSQLSQDECIMALRSQRSQ	 	; decimal token
.211a	20 ae 21	jsr $21ae			jsr 	TOKWriteA
.211d	20 22 21	jsr $2122			jsr 	TOKOutputElementBuffer 		; then the buffer
.2120	18		clc				clc
.2121	60		rts				rts
.2122					TOKOutputElementBuffer:
.2122	ad 1c 05	lda $051c			lda 	TOKElement 					; get count and write that
.2125	20 ae 21	jsr $21ae			jsr 	TOKWriteA
.2128	a8		tay				tay 								; put in Y
.2129	f0 0c		beq $2137			beq 	_TOEExit 					; exit if empty which is okay.
.212b	a2 01		ldx #$01			ldx 	#1
.212d					_TOELoop:
.212d	bd 1c 05	lda $051c,x			lda 	TOKElement,x
.2130	20 ae 21	jsr $21ae			jsr 	TOKWriteA
.2133	e8		inx				inx
.2134	88		dey				dey
.2135	d0 f6		bne $212d			bne 	_TOELoop
.2137					_TOEExit:
.2137	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokenise.asm

.2138					TOKTokenise:
.2138	8c 1d 06	sty $061d			sty 	TOKDataSource+1 			; save source routine pointer
.213b	8e 1c 06	stx $061c			stx 	TOKDataSource
.213e	a9 01		lda #$01			lda 	#1 							; set first element flag.
.2140	8d 1e 06	sta $061e			sta 	TOKIsFirstElement
.2143	a9 03		lda #$03			lda 	#3 							; set the line length to three for the
.2145	8d 00 04	sta $0400			sta 	TOKLineSize 				; line length itself and the line numbers.
.2148	9c 01 04	stz $0401			stz 	TOKLineNumber
.214b	9c 02 04	stz $0402			stz 	TOKLineNumber+1
.214e					_TOKMainLoop:
.214e	20 bd 21	jsr $21bd			jsr 	TOKGet 						; what follows.
.2151	c9 00		cmp #$00			cmp 	#0 							; if zero, we are complete
.2153	f0 50		beq $21a5			beq 	_TOKExit
.2155	c9 20		cmp #$20			cmp 	#' '						; space, consume and loop back.
.2157	d0 05		bne $215e			bne 	_TOKElement
.2159	20 c1 21	jsr $21c1			jsr 	TOKGetNext
.215c	80 f0		bra $214e			bra 	_TOKMainLoop
.215e					_TOKElement:
.215e	20 c1 23	jsr $23c1			jsr 	TOKIsDigit 					; is it 0..9
.2161	90 16		bcc $2179			bcc 	_TOKNotDigit
.2163	20 11 23	jsr $2311			jsr 	TOKTokeniseInteger 			; get integer
.2166	b0 44		bcs $21ac			bcs 	_TOKFail 					; did it fail ?
.2168	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.216b	20 bd 21	jsr $21bd			jsr 	TOKGet 						; what follows ?
.216e	c9 2e		cmp #$2e			cmp 	#"."						; is it decimal e.g. .012345 etc.
.2170	d0 dc		bne $214e			bne 	_TOKMainLoop
.2172	20 12 21	jsr $2112			jsr 	TOKTokeniseDecimals
.2175	b0 35		bcs $21ac			bcs 	_TOKFail
.2177	80 d5		bra $214e			bra 	_TOKMainLoop
.2179					_TOKNotDigit:
.2179	9c 1e 06	stz $061e			stz 	TOKIsFirstElement 			; clear first element flag
.217c	c9 26		cmp #$26			cmp 	#"&"						; check for hexadecimal ?
.217e	d0 07		bne $2187			bne 	_TOKNotHex
.2180	20 17 22	jsr $2217			jsr 	TOKTokeniseHexadecimal
.2183	b0 27		bcs $21ac			bcs 	_TOKFail
.2185	80 c7		bra $214e			bra 	_TOKMainLoop
.2187					_TOKNotHex:
.2187	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.2189	d0 07		bne $2192			bne 	_TOKNotString
.218b	20 88 23	jsr $2388			jsr 	TOKTokeniseString
.218e	b0 1c		bcs $21ac			bcs 	_TOKFail
.2190	80 bc		bra $214e			bra 	_TOKMainLoop
.2192					_TOKNotString:
.2192	20 da 23	jsr $23da			jsr 	TOKIsAlpha 					; identifier ?
.2195	b0 07		bcs $219e			bcs 	_TOKIdentifier
.2197	20 4e 23	jsr $234e			jsr 	TOKTokenisePunctuation 		; punctuation
.219a	b0 10		bcs $21ac			bcs 	_TOKFail
.219c	80 b0		bra $214e			bra 	_TOKMainLoop
.219e					_TOKIdentifier:
.219e	20 54 22	jsr $2254			jsr 	TOKTokeniseIdentifier 		; identifier/token.
.21a1	b0 09		bcs $21ac			bcs 	_TOKFail
.21a3	80 a9		bra $214e			bra 	_TOKMainLoop
.21a5					_TOKExit:
.21a5	a9 8c		lda #$8c			lda 	#PR_LSQLSQENDRSQRSQ 		; write EOL
.21a7	20 ae 21	jsr $21ae			jsr 	TOKWriteA
.21aa	18		clc				clc									; return with carry set.
.21ab	60		rts				rts
.21ac					_TOKFail:
.21ac	38		sec				sec
.21ad	60		rts				rts
.21ae					TOKWriteA:
.21ae	da		phx				phx
.21af	ae 00 04	ldx $0400			ldx 	TOKLineSize
.21b2	9d 00 04	sta $0400,x			sta 	TOKLineSize,x
.21b5	9e 01 04	stz $0401,x			stz 	TOKLineSize+1,x 			; makes it look like a line on its own for RUN.
.21b8	fa		plx				plx
.21b9	ee 00 04	inc $0400			inc 	TOKLineSize
.21bc	60		rts				rts
.21bd					TOKGet:
.21bd	18		clc				clc
.21be	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.21c1					TOKGetNext:
.21c1	38		sec				sec
.21c2	6c 1c 06	jmp ($061c)			jmp 	(TOKDataSource)
.061c					TOKDataSource:
>061c							.fill 	2
.061e					TOKIsFirstElement:
>061e							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokfind.asm

.21c5					TOKFindToken:
.21c5	a2 ba		ldx #$ba			ldx 	#StandardTokens & $FF 		; do this table
.21c7	a0 1b		ldy #$1b			ldy 	#StandardTokens >> 8
.21c9	20 e1 21	jsr $21e1			jsr 	TOKFindTokenXY 				; find it, or not
.21cc	b0 0d		bcs $21db			bcs 	_TOKFound1
.21ce	a2 3b		ldx #$3b			ldx 	#AlternateTokens & $FF 		; do the alternate table
.21d0	a0 1d		ldy #$1d			ldy 	#AlternateTokens >> 8
.21d2	20 e1 21	jsr $21e1			jsr 	TOKFindTokenXY 				; find it, or not
.21d5	90 08		bcc $21df			bcc 	_TOKFTFail 					; not ....
.21d7	a2 8d		ldx #$8d			ldx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.21d9	38		sec				sec
.21da	60		rts				rts
.21db					_TOKFound1:
.21db	a2 00		ldx #$00			ldx 	#0
.21dd	38		sec				sec
.21de	60		rts				rts
.21df					_TOKFTFail
.21df	18		clc				clc
.21e0	60		rts				rts
.21e1					TOKFindTokenXY:
.21e1	86 24		stx $24				stx 	zTemp0 						; save token table address
.21e3	84 25		sty $25				sty 	zTemp0+1
.21e5	a9 80		lda #$80			lda 	#$80 						; table starts at $80
.21e7	8d 1f 06	sta $061f			sta 	TOKCurrent
.21ea					_TOKFindLoop:
.21ea	b2 24		lda ($24)			lda 	(zTemp0) 					; get token length from table
.21ec	18		clc				clc 		 						; clear carry in case of fail
.21ed	30 17		bmi $2206			bmi 	_TOKExit 					; end of table, fail, so return CC.
.21ef	cd 1c 05	cmp $051c			cmp 	TOKElement 					; compare against the element length
.21f2	d0 13		bne $2207			bne 	_TOKNext 					; different, try next.
.21f4	aa		tax				tax 								; number of chars to compare.
.21f5	a0 01		ldy #$01			ldy 	#1 							; offset to actual text.
.21f7					_TOKCompare:
.21f7	b1 24		lda ($24),y			lda 	(zTemp0),y 					; compare the characters
.21f9	d9 1c 05	cmp $051c,y			cmp 	TOKElementText-1,y
.21fc	d0 09		bne $2207			bne 	_TOKNext 					; different ? try next
.21fe	c8		iny				iny 								; compare next two
.21ff	ca		dex				dex
.2200	d0 f5		bne $21f7			bne 	_TOKCompare 				; until done X characters.
.2202	38		sec				sec
.2203	ad 1f 06	lda $061f			lda 	TOKCurrent 					; return current ID.
.2206					_TOKExit:
.2206	60		rts				rts
.2207					_TOKNext:
.2207	ee 1f 06	inc $061f			inc 	TOKCurrent 					; increment token #
.220a	38		sec				sec 								; add length+1 to ptr
.220b	b2 24		lda ($24)			lda 	(zTemp0)
.220d	65 24		adc $24				adc 	zTemp0
.220f	85 24		sta $24				sta 	zTemp0
.2211	90 d7		bcc $21ea			bcc 	_TOKFindLoop
.2213	e6 25		inc $25				inc 	zTemp0+1
.2215	80 d3		bra $21ea			bra 	_TOKFindLoop
.061f					TOKCurrent:
>061f							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokhexadecimal.asm

.2217					TOKTokeniseHexadecimal:
.2217	20 c1 21	jsr $21c1			jsr 	TOKGetNext 					; consume the $
.221a	a2 08		ldx #$08			ldx 	#IFR0
.221c	20 6d 33	jsr $336d			jsr 	IFloatSetZero 				; set R0 = 0
.221f					_TTHLoop:
.221f	20 bd 21	jsr $21bd			jsr 	TOKGet 						; keep getting and copying while numeric.
.2222	20 e7 23	jsr $23e7			jsr 	TOKIsHexadecimal
.2225	90 23		bcc $224a			bcc 	_TTHDone
.2227	a2 08		ldx #$08			ldx 	#IFR0 						; shift R0 right 4
.2229	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.222c	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.222f	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.2232	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.2235	20 c1 21	jsr $21c1			jsr 	TOKGetNext
.2238	20 ab 23	jsr $23ab			jsr 	TOKToUpper 					; make U/C
.223b	38		sec				sec 								; convert to decimal.
.223c	e9 30		sbc #$30			sbc 	#48
.223e	c9 0a		cmp #$0a			cmp 	#10
.2240	90 02		bcc $2244			bcc 	_TTHNotAlpha
.2242	e9 07		sbc #$07			sbc 	#7
.2244					_TTHNotAlpha:
.2244	05 08		ora $08				ora 	IFR0+IM0 					; OR in
.2246	85 08		sta $08				sta 	IFR0+IM0
.2248	80 d5		bra $221f			bra 	_TTHLoop
.224a					_TTHDone:
.224a	a9 ec		lda #$ec			lda 	#PR_AMPERSAND 				; write & function out
.224c	20 ae 21	jsr $21ae			jsr 	TOKWriteA
.224f	20 f0 20	jsr $20f0			jsr 	TOKTokeniseConstant 		; write integer out.
.2252	18		clc				clc
.2253	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokidentifier.asm

.2254					TOKTokeniseIdentifier:
.2254	20 dd 20	jsr $20dd			jsr 	TOKResetElement 			; extract an identifier
.2257					_TOKGetIdentifier:
.2257	20 bd 21	jsr $21bd			jsr 	TOKGet
.225a	20 ab 23	jsr $23ab			jsr 	TOKToUpper
.225d	20 cd 23	jsr $23cd			jsr 	TOKIsIdentifierElement
.2260	90 08		bcc $226a			bcc 	_TOKEndIdent
.2262	20 e1 20	jsr $20e1			jsr		TOKWriteElement
.2265	20 c1 21	jsr $21c1			jsr 	TOKGetNext
.2268	80 ed		bra $2257			bra 	_TOKGetIdentifier
.226a					_TOKEndIdent:
.226a	c9 24		cmp #$24			cmp 	#"$" 						; last one $
.226c	d0 06		bne $2274			bne 	_TOKNotString
.226e	20 e1 20	jsr $20e1			jsr 	TOKWriteElement 			; add it
.2271	20 c1 21	jsr $21c1			jsr 	TOKGetNext 					; consume it
.2274					_TOKNotString:
.2274	20 bd 21	jsr $21bd			jsr 	TOKGet 						; finally check for (
.2277	c9 28		cmp #$28			cmp 	#"("
.2279	d0 06		bne $2281			bne 	_TOKNoArray
.227b	20 e1 20	jsr $20e1			jsr 	TOKWriteElement 			; add it
.227e	20 c1 21	jsr $21c1			jsr 	TOKGetNext 					; consume it
.2281					_TOKNoArray:
.2281	20 c5 21	jsr $21c5			jsr 	TOKFindToken 				; find it
.2284	90 18		bcc $229e			bcc		_TOKIsVariable 				; it must be a variable or proc name if not found
.2286	c9 97		cmp #$97			cmp 	#PR_REM 					; is it REM ?
.2288	f0 0f		beq $2299			beq 	_TOKComment 				; yes, do comment code.
.228a	e0 8d		cpx #$8d			cpx 	#PR_LSQLSQSHIFTRSQRSQ 		; shifted token
.228c	d0 06		bne $2294			bne 	_TOKNoShift
.228e	48		pha				pha 								; write the shift.
.228f	8a		txa				txa
.2290	20 ae 21	jsr $21ae			jsr 	TOKWriteA
.2293	68		pla				pla
.2294					_TOKNoShift:
.2294	20 ae 21	jsr $21ae			jsr 	TOKWriteA 					; write the main token.
.2297	18		clc				clc
.2298	60		rts				rts
.2299					_TOKComment:
.2299	20 de 22	jsr $22de			jsr 	TOKDoComment
.229c	18		clc				clc
.229d	60		rts				rts
.229e					_TOKIsVariable:
.229e	a2 00		ldx #$00			ldx 	#0 							; output element buffer
.22a0					_TOKOutputBuffer:
.22a0	bd 1d 05	lda $051d,x			lda 	TOKElementText,x 			; output it translated.
.22a3	20 cc 22	jsr $22cc			jsr 	TOKTranslateIdentifier
.22a6	20 ae 21	jsr $21ae			jsr 	TOKWriteA
.22a9	e8		inx				inx
.22aa	bd 1d 05	lda $051d,x			lda 	TOKElementText,x
.22ad	20 cd 23	jsr $23cd			jsr 	TOKIsIdentifierElement
.22b0	b0 ee		bcs $22a0			bcs 	_TOKOutputBuffer
.22b2	a8		tay				tay 								; last char in Y
.22b3	a9 7c		lda #$7c			lda 	#$7C 						; token is $7C
.22b5	c0 00		cpy #$00			cpy 	#0 							; if no modifier use this
.22b7	f0 0e		beq $22c7			beq 	_TOKIVExit
.22b9	c0 24		cpy #$24			cpy 	#'$'						; array mod ?
.22bb	d0 04		bne $22c1			bne 	_TOKIVCheckArray 			; no, check for (
.22bd	1a		inc a				inc 	a 							; token is $7D
.22be	bc 1e 05	ldy $051e,x			ldy 	TOKElementText+1,x 			; get next one.
.22c1					_TOKIVCheckArray:
.22c1	c0 28		cpy #$28			cpy 	#'('						; is it ( ?
.22c3	d0 02		bne $22c7			bne 	_TOKIVExit 					; yes, then add 2 more, so 7C->7E and 7D->7F
.22c5	1a		inc a				inc 	a
.22c6	1a		inc a				inc 	a
.22c7					_TOKIVExit:
.22c7	20 ae 21	jsr $21ae			jsr 	TOKWriteA 					; ending token
.22ca	18		clc				clc
.22cb	60		rts				rts
.22cc					TOKTranslateIdentifier:
.22cc	c9 5f		cmp #$5f			cmp 	#"_" 						; _ is 0x64
.22ce	f0 0b		beq $22db			beq 	_TTI64
.22d0	38		sec				sec
.22d1	e9 41		sbc #$41			sbc 	#"A" 						; map A-Z onto 0-25
.22d3	10 03		bpl $22d8			bpl 	_TTIExit
.22d5	18		clc				clc 								; map 09 onto 26-35
.22d6	69 2b		adc #$2b			adc 	#"A"-"0"+26
.22d8					_TTIExit:
.22d8	09 40		ora #$40			ora 	#$40 						; correct range.
.22da	60		rts				rts
.22db	a9 64		lda #$64	_TTI64:	lda 	#$64
.22dd	60		rts				rts
.22de					TOKDoComment:
.22de	20 ae 21	jsr $21ae			jsr 	TOKWriteA					; output the token.
.22e1					_TOKSkipSpaces:
.22e1	20 bd 21	jsr $21bd			jsr 	TOKGet 						; skip over spaces
.22e4	c9 20		cmp #$20			cmp 	#' '
.22e6	d0 05		bne $22ed			bne 	_TOKEndSpaces
.22e8	20 c1 21	jsr $21c1			jsr 	TOKGetNext
.22eb	80 f4		bra $22e1			bra 	_TOKSkipSpaces
.22ed					_TOKEndSpaces:
.22ed	48		pha				pha 								; save it
.22ee	68		pla				pla
.22ef	f0 04		beq $22f5			beq 	_TOKDCExit 					; end of line.
.22f1	c9 22		cmp #$22			cmp 	#'"'						; does it have a speech mark ?
.22f3	d0 01		bne $22f6			bne 	_TOKDCDoLine 				; otherwise the comment is the whole line.
.22f5					_TOKDCExit:
.22f5	60		rts				rts
.22f6					_TOKDCDoLine:
.22f6	20 dd 20	jsr $20dd			jsr 	TOKResetElement 			; start getting the string
.22f9					_TOKDCLoop:
.22f9	20 bd 21	jsr $21bd			jsr 	TOKGet 						; check EOL
.22fc	c9 00		cmp #$00			cmp 	#0
.22fe	f0 08		beq $2308			beq 	_TOKDCEndComment
.2300	20 c1 21	jsr $21c1			jsr 	TOKGetNext 					; get and consume
.2303	20 e1 20	jsr $20e1			jsr 	TOKWriteElement
.2306	80 f1		bra $22f9			bra 	_TOKDCLoop
.2308					_TOKDCEndComment:
.2308	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.230a	20 ae 21	jsr $21ae			jsr 	TOKWriteA
.230d	20 22 21	jsr $2122			jsr 	TOKOutputElementBuffer
.2310	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokinteger.asm

.2311					TOKTokeniseInteger:
.2311	20 3a 23	jsr $233a			jsr 	TOKExtractInteger 			; pull an integer out as text.
.2314	a2 1d		ldx #$1d			ldx 	#TOKElementText & $FF
.2316	a0 05		ldy #$05			ldy 	#TOKElementText >> 8
.2318	ad 1c 05	lda $051c			lda		TOKElement
.231b	20 d1 31	jsr $31d1			jsr 	IFloatStringToFloatR0 		; convert to R0 integer
.231e	ad 1e 06	lda $061e			lda 	TOKIsFirstElement 			; first element ?
.2321	f0 12		beq $2335			beq 	_TOKNotLineNumber
.2323	a5 0a		lda $0a				lda 	IFR0+IM2 					; check it's a 2 digit number
.2325	d0 0c		bne $2333			bne 	_TOKBadLineNumeber
.2327	a5 08		lda $08				lda 	IFR0+IM0 					; copy it to the line number section.
.2329	8d 01 04	sta $0401			sta 	TOKLineNumber
.232c	a5 09		lda $09				lda 	IFR0+IM1
.232e	8d 02 04	sta $0402			sta 	TOKLineNumber+1
.2331	18		clc				clc
.2332	60		rts				rts
.2333					_TOKBadLineNumeber:
.2333	38		sec				sec
.2334	60		rts				rts
.2335					_TOKNotLineNumber:
.2335	20 f0 20	jsr $20f0			jsr 	TOKTokeniseConstant 		; tokenise the constant in R0
.2338	18		clc				clc
.2339	60		rts				rts
.233a					TOKExtractInteger:
.233a	20 dd 20	jsr $20dd			jsr 	TOKResetElement 			; restart
.233d					_TTILoop:
.233d	20 bd 21	jsr $21bd			jsr 	TOKGet 						; keep getting and copying while numeric.
.2340	20 c1 23	jsr $23c1			jsr 	TOKIsDigit
.2343	90 08		bcc $234d			bcc 	_TOKEIExit
.2345	20 e1 20	jsr $20e1			jsr 	TOKWriteElement
.2348	20 c1 21	jsr $21c1			jsr 	TOKGetNext
.234b	80 f0		bra $233d			bra 	_TTILoop
.234d					_TOKEIExit:
.234d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokpunctuation.asm

.234e					TOKTokenisePunctuation:
.234e	20 dd 20	jsr $20dd			jsr 	TOKResetElement 			; copy first punctuation character into element.
.2351	20 c1 21	jsr $21c1			jsr 	TOKGetNext
.2354	20 e1 20	jsr $20e1			jsr 	TOKWriteElement
.2357	20 bd 21	jsr $21bd			jsr 	TOKGet 						; what follows ?
.235a	c9 20		cmp #$20			cmp 	#' '						; space, not 2 character
.235c	f0 10		beq $236e			beq 	_TTPOne
.235e	20 d1 23	jsr $23d1			jsr 	TOKIsAlphaNumeric 			; if alphanumeric don't bother doing 2 character
.2361	b0 0b		bcs $236e			bcs 	_TTPOne 					; these speed things up a bit.
.2363	20 e1 20	jsr $20e1			jsr 	TOKWriteElement 			; this is what we will search for.
.2366	20 c5 21	jsr $21c5			jsr 	TOKFindToken
.2369	b0 0a		bcs $2375			bcs 	_TTPConsumeExit 			; it was found, consume, generate, exit.
.236b	ce 1c 05	dec $051c			dec 	TOKElement 					; make it a single character
.236e					_TTPOne:
.236e	20 c5 21	jsr $21c5			jsr 	TOKFindToken 				; look for one character punctuation
.2371	b0 07		bcs $237a			bcs 	_TTPOutputExit 				; we found it
.2373	38		sec				sec 								; not recognised.
.2374	60		rts				rts
.2375					_TTPConsumeExit:
.2375	48		pha				pha
.2376	20 c1 21	jsr $21c1			jsr 	TOKGetNext 					; get the 2nd char out.
.2379	68		pla				pla
.237a					_TTPOutputExit:
.237a	c9 9c		cmp #$9c			cmp 	#PR_SQUOTE 					; single quote
.237c	f0 05		beq $2383			beq 	_TTPComment
.237e	20 ae 21	jsr $21ae			jsr  	TOKWriteA 					; write token out
.2381	18		clc				clc
.2382	60		rts				rts
.2383					_TTPComment:
.2383	20 de 22	jsr $22de			jsr 	TOKDoComment
.2386	18		clc				clc
.2387	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/tokstring.asm

.2388					TOKTokeniseString:
.2388	20 c1 21	jsr $21c1			jsr 	TOKGetNext 					; consume the "
.238b	20 dd 20	jsr $20dd			jsr 	TOKResetElement 			; start getting the string
.238e					_TOKTSLoop:
.238e	20 bd 21	jsr $21bd			jsr 	TOKGet 						; check EOL
.2391	c9 00		cmp #$00			cmp 	#0
.2393	f0 0c		beq $23a1			beq 	_TOKTSExit
.2395	20 c1 21	jsr $21c1			jsr 	TOKGetNext 					; get and consume
.2398	c9 22		cmp #$22			cmp 	#'"' 						; exit if " consumed
.239a	f0 05		beq $23a1			beq 	_TOKTSExit
.239c	20 e1 20	jsr $20e1			jsr 	TOKWriteElement
.239f	80 ed		bra $238e			bra 	_TOKTSLoop
.23a1					_TOKTSExit:
.23a1	a9 ee		lda #$ee			lda 	#PR_LSQLSQSTRINGRSQRSQ
.23a3	20 ae 21	jsr $21ae			jsr 	TOKWriteA
.23a6	20 22 21	jsr $2122			jsr 	TOKOutputElementBuffer
.23a9	18		clc				clc
.23aa	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/program/tokenise/toktypes.asm

.23ab					TOKToUpper:
.23ab	c9 61		cmp #$61			cmp 	#"a"
.23ad	90 06		bcc $23b5			bcc 	_TTUNotLower
.23af	c9 7b		cmp #$7b			cmp 	#"z"+1
.23b1	b0 02		bcs $23b5			bcs 	_TTUNotLower
.23b3	49 20		eor #$20			eor 	#$20
.23b5					_TTUNotLower:
.23b5	60		rts				rts
.23b6					TOKToLower:
.23b6	c9 41		cmp #$41			cmp 	#"A"
.23b8	90 06		bcc $23c0			bcc 	_TTUNotUpper
.23ba	c9 5b		cmp #$5b			cmp 	#"Z"+1
.23bc	b0 02		bcs $23c0			bcs 	_TTUNotUpper
.23be	49 20		eor #$20			eor 	#$20
.23c0					_TTUNotUpper:
.23c0	60		rts				rts
.23c1					TOKIsDigit:
.23c1	c9 30		cmp #$30			cmp 	#"0"
.23c3	90 06		bcc $23cb			bcc 	TOKFail
.23c5	c9 3a		cmp #$3a			cmp 	#"9"+1
.23c7	b0 02		bcs $23cb			bcs 	TOKFail
.23c9					TOKSucceed:
.23c9	38		sec				sec
.23ca	60		rts				rts
.23cb					TOKFail:
.23cb	18		clc				clc
.23cc	60		rts				rts
.23cd					TOKIsIdentifierElement:
.23cd	c9 5f		cmp #$5f			cmp 	#"_"
.23cf	f0 f8		beq $23c9			beq 	TOKSucceed 					; else fall through to alphanumeric
.23d1					TOKIsAlphaNumeric:
.23d1	20 da 23	jsr $23da			jsr 	TOKIsAlpha
.23d4	b0 f3		bcs $23c9			bcs 	TOKSucceed
.23d6	20 c1 23	jsr $23c1			jsr 	TOKIsDigit
.23d9	60		rts				rts
.23da					TOKIsAlpha:
.23da	20 ab 23	jsr $23ab			jsr 	TOKToUpper
.23dd	c9 41		cmp #$41			cmp 	#"A"
.23df	90 ea		bcc $23cb			bcc 	TOKFail
.23e1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.23e3	b0 e6		bcs $23cb			bcs 	TOKFail
.23e5	80 e2		bra $23c9			bra 	TOKSucceed
.23e7					TOKIsHexadecimal:
.23e7	20 c1 23	jsr $23c1			jsr		TOKIsDigit
.23ea	b0 dd		bcs $23c9			bcs 	TOKSucceed
.23ec	20 da 23	jsr $23da			jsr 	TOKIsAlpha
.23ef	90 da		bcc $23cb			bcc 	TOKFail
.23f1	c9 47		cmp #$47			cmp 	#"F"+1
.23f3	b0 d6		bcs $23cb			bcs 	TOKFail
.23f5	80 d2		bra $23c9			bra 	TOKSucceed

;******  Return to file: include.files


;******  Processing file: src/structures/call.asm

.23f7					Command_CALL:
.23f7	a9 42		lda #$42			lda 	#STK_CALL
.23f9	20 e9 28	jsr $28e9			jsr 	StackOpen
.23fc	b1 18		lda ($18),y			lda 	(codePtr),y 				; check identifier follows.
.23fe	29 c0		and #$c0			and 	#$C0
.2400	c9 40		cmp #$40			cmp 	#$40
.2402	d0 29		bne $242d			bne 	_CCSyntax
.2404	20 b0 2c	jsr $2cb0			jsr 	VARGetInfo 					; get the information
.2407	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 				; check right bracket follows.
.240a	20 62 2c	jsr $2c62			jsr 	VARFind 					; exists ?
.240d	90 21		bcc $2430			bcc 	_CCUnknown
.240f	86 25		stx $25				stx 	zTemp0+1 					; save target in XA
.2411	85 24		sta $24				sta 	zTemp0
.2413	20 1c 29	jsr $291c			jsr 	STKSaveCodePosition 		; save return address on stack.
.2416	a0 03		ldy #$03			ldy 	#3 							; check $FF marker
.2418	b1 24		lda ($24),y			lda 	(zTemp0),y
.241a	c9 ff		cmp #$ff			cmp 	#$FF
.241c	d0 12		bne $2430			bne 	_CCUnknown
.241e	88		dey				dey 								; get Y offset to stack
.241f	b1 24		lda ($24),y			lda 	(zTemp0),y
.2421	48		pha				pha
.2422	88		dey				dey 								; get address
.2423	b1 24		lda ($24),y			lda 	(zTemp0),y
.2425	85 19		sta $19				sta 	codePtr+1
.2427	b2 24		lda ($24)			lda 	(zTemp0)
.2429	85 18		sta $18				sta 	codePtr
.242b	7a		ply				ply 								; restore Y
.242c	60		rts				rts
.242d					_CCSyntax:
.242d	4c f7 26	jmp $26f7		jmp	ErrorV_syntax
.2430					_CCUnknown:
.2430	4c 6c 28	jmp $286c		jmp	ErrorV_unknown
.2433					Command_ENDPROC:
.2433	a9 42		lda #$42			lda 	#STK_CALL
.2435	20 14 29	jsr $2914			jsr 	StackCheckFrame
.2438	20 2e 29	jsr $292e			jsr 	STKLoadCodePosition 		; return
.243b	20 06 29	jsr $2906			jsr 	StackClose
.243e	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/do.asm

.243f					Command_DO:
.243f	a9 22		lda #$22			lda 	#STK_DO
.2441	20 e9 28	jsr $28e9			jsr 	StackOpen
.2444	20 1c 29	jsr $291c			jsr 	STKSaveCodePosition 		; save loop position
.2447	60		rts				rts
.2448					Command_EXIT:
.2448	a9 22		lda #$22			lda 	#STK_DO 					; check in LOOP
.244a	20 14 29	jsr $2914			jsr 	StackCheckFrame
.244d	20 06 29	jsr $2906			jsr 	StackClose 					; close it
.2450	a9 87		lda #$87			lda 	#PR_LOOP 					; forward to LOOP
.2452	aa		tax				tax
.2453	20 07 26	jsr $2607			jsr 	ScanForward
.2456	60		rts				rts
.2457					Command_LOOP:
.2457	a9 22		lda #$22			lda 	#STK_DO
.2459	20 14 29	jsr $2914			jsr 	StackCheckFrame
.245c	20 2e 29	jsr $292e			jsr 	STKLoadCodePosition 		; loop back
.245f	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/for.asm

.2460					Command_FOR:
.2460	a9 37		lda #$37			lda 	#STK_FOR 					; create frame
.2462	20 e9 28	jsr $28e9			jsr 	StackOpen
.2465	20 bf 12	jsr $12bf			jsr 	CommandLET 					; do "I = 1" bit
.2468	5a		phy				phy 								; save variable address to +4,+5
.2469	a0 04		ldy #$04			ldy 	#4
.246b	a5 24		lda $24				lda 	zTemp0
.246d	91 2c		sta ($2c),y			sta 	(basicStack),y
.246f	c8		iny				iny
.2470	a5 25		lda $25				lda 	zTemp0+1
.2472	91 2c		sta ($2c),y			sta 	(basicStack),y
.2474	7a		ply				ply
.2475	a9 90		lda #$90			lda 	#PR_TO 						; TO symbol required.
.2477	20 e0 28	jsr $28e0			jsr 	ERRCheckA
.247a	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; evaluate the terminal value.
.247d	a9 0a		lda #$0a			lda 	#10 						; save in slots 10-13
.247f	a2 08		ldx #$08			ldx 	#IFR0
.2481	20 d6 24	jsr $24d6			jsr 	CFSaveR0X
.2484	b1 18		lda ($18),y			lda 	(codePtr),y 				; STEP here ?
.2486	c9 91		cmp #$91			cmp 	#PR_STEP
.2488	d0 06		bne $2490			bne 	_CFStep1
.248a	c8		iny				iny 								; consume step
.248b	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; evaluate STEP
.248e	80 24		bra $24b4			bra 	_CFWriteStep
.2490					_CFStep1:
.2490	a2 08		ldx #$08			ldx 	#IFR0 						; default R0, 1
.2492	a9 01		lda #$01			lda 	#1
.2494	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.2497	5a		phy				phy 								; check for fast loop,step 1, integer start/end.
.2498	a0 04		ldy #$04			ldy 	#4 							; get variable address
.249a	b1 2c		lda ($2c),y			lda 	(basicStack),y
.249c	85 24		sta $24				sta 	zTemp0
.249e	c8		iny				iny
.249f	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24a1	85 25		sta $25				sta 	zTemp0+1
.24a3	a0 03		ldy #$03			ldy 	#IExp 						; check that's an integer
.24a5	b1 24		lda ($24),y			lda 	(zTemp0),y
.24a7	d0 0a		bne $24b3			bne 	_CFNotOptimised
.24a9	a0 0d		ldy #$0d			ldy 	#13 						; check terminal value is integer.
.24ab	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24ad	d0 04		bne $24b3			bne 	_CFNotOptimised
.24af	a9 80		lda #$80			lda 	#$80 						; set the step so it's a string/
.24b1	85 0b		sta $0b				sta 	IFR0+IExp
.24b3					_CFNotOptimised:
.24b3	7a		ply				ply
.24b4					_CFWriteStep:
.24b4	a2 08		ldx #$08			ldx 	#IFR0 						; Write to additive.
.24b6	a9 06		lda #$06			lda 	#6
.24b8	20 d6 24	jsr $24d6			jsr 	CFSaveR0X
.24bb	20 1c 29	jsr $291c			jsr 	STKSaveCodePosition 		; save loop position
.24be	60		rts				rts
.24bf					CFLoadR0X:
.24bf	5a		phy				phy
.24c0	a8		tay				tay
.24c1	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24c3	95 00		sta $00,x			sta 	IM0,x
.24c5	c8		iny				iny
.24c6	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24c8	95 01		sta $01,x			sta 	IM1,x
.24ca	c8		iny				iny
.24cb	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24cd	95 02		sta $02,x			sta 	IM2,x
.24cf	c8		iny				iny
.24d0	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24d2	95 03		sta $03,x			sta 	IExp,x
.24d4	7a		ply				ply
.24d5	60		rts				rts
.24d6					CFSaveR0X:
.24d6	5a		phy				phy
.24d7	a8		tay				tay
.24d8	b5 00		lda $00,x			lda 	IM0,x
.24da	91 2c		sta ($2c),y			sta 	(basicStack),y
.24dc	c8		iny				iny
.24dd	b5 01		lda $01,x			lda 	IM1,x
.24df	91 2c		sta ($2c),y			sta 	(basicStack),y
.24e1	c8		iny				iny
.24e2	b5 02		lda $02,x			lda 	IM2,x
.24e4	91 2c		sta ($2c),y			sta 	(basicStack),y
.24e6	c8		iny				iny
.24e7	b5 03		lda $03,x			lda 	IExp,x
.24e9	91 2c		sta ($2c),y			sta 	(basicStack),y
.24eb	7a		ply				ply
.24ec	60		rts				rts
.24ed					Command_NEXT:
.24ed	a9 37		lda #$37			lda 	#STK_FOR
.24ef	20 14 29	jsr $2914			jsr 	StackCheckFrame
.24f2	5a		phy				phy 								; check optimised loop
.24f3	a0 09		ldy #$09			ldy 	#9
.24f5	b1 2c		lda ($2c),y			lda 	(basicStack),y
.24f7	7a		ply				ply
.24f8	0a		asl a				asl 	a
.24f9	b0 35		bcs $2530			bcs 	_CNOptimised
.24fb	20 68 25	jsr $2568			jsr 	_CNLoadValue 				; load index value to R0.
.24fe	a2 0c		ldx #$0c			ldx 	#IFR1 						; load adding value to R1.
.2500	a9 06		lda #$06			lda 	#6
.2502	20 bf 24	jsr $24bf			jsr 	CFLoadR0X
.2505	20 65 2d	jsr $2d65			jsr 	IFloatAdd 					; add them together and write back.
.2508	20 8b 25	jsr $258b			jsr 	_CNSaveValue
.250b	a9 0a		lda #$0a			lda 	#10 						; terminal value in R1
.250d	a2 0c		ldx #$0c			ldx 	#IFR1
.250f	20 bf 24	jsr $24bf			jsr 	CFLoadR0X
.2512	20 3c 30	jsr $303c			jsr 	IFloatCompare 				; compare terminal vs current
.2515	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, e.g. equal, loop back.
.2517	20 66 33	jsr $3366			jsr 	IFloatCheckZero
.251a	f0 10		beq $252c			beq 	_CNLoopBack
.251c	a5 0b		lda $0b				lda 	IFR0+IExp 					; if sign compare and sign add match, loop back.
.251e	5a		phy				phy
.251f	a0 09		ldy #$09			ldy 	#6+IExp
.2521	51 2c		eor ($2c),y			eor 	(basicStack),y
.2523	7a		ply				ply
.2524	29 40		and #$40			and 	#IFSign
.2526	f0 04		beq $252c			beq 	_CNLoopBack
.2528					_CNExitLoop:
.2528	20 06 29	jsr $2906			jsr 	StackClose		 			; return
.252b	60		rts				rts
.252c					_CNLoopBack:
.252c	20 2e 29	jsr $292e			jsr 	STKLoadCodePosition 		; loop back
.252f	60		rts				rts
.2530					_CNOptimised:
.2530	5a		phy				phy
.2531	a0 04		ldy #$04			ldy 	#4 							; copy address of index variable to zTemp2
.2533	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2535	85 28		sta $28				sta 	zTemp2
.2537	c8		iny				iny
.2538	b1 2c		lda ($2c),y			lda 	(basicStack),y
.253a	85 29		sta $29				sta 	zTemp2+1
.253c	a0 ff		ldy #$ff			ldy 	#$FF 						; increment that value. this won't go round
.253e					_CNIncrement:
.253e	c8		iny				iny
.253f	b1 28		lda ($28),y			lda 	(zTemp2),y
.2541	1a		inc a				inc 	a
.2542	91 28		sta ($28),y			sta 	(zTemp2),y
.2544	f0 f8		beq $253e			beq 	_CNIncrement
.2546	18		clc				clc 								; point zTemp0 to terminal value
.2547	a5 2c		lda $2c				lda 	basicStack
.2549	69 0a		adc #$0a			adc 	#10
.254b	85 24		sta $24				sta 	zTemp0
.254d	a5 2d		lda $2d				lda 	basicStack+1
.254f	69 00		adc #$00			adc 	#0
.2551	85 25		sta $25				sta 	zTemp0+1
.2553	a0 01		ldy #$01			ldy 	#1 							; compare value to terminal.
.2555	18		clc				clc 								; borrow 1, we want > not >=
.2556	b2 28		lda ($28)			lda 	(zTemp2)
.2558	f2 24		sbc ($24)			sbc 	(zTemp0)
.255a	b1 28		lda ($28),y			lda 	(zTemp2),y
.255c	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.255e	c8		iny				iny
.255f	b1 28		lda ($28),y			lda 	(zTemp2),y
.2561	f1 24		sbc ($24),y			sbc 	(zTemp0),y
.2563	7a		ply				ply
.2564	b0 c2		bcs $2528			bcs 	_CNExitLoop
.2566	80 c4		bra $252c			bra 	_CNLoopBack
.2568					_CNLoadValue:
.2568	5a		phy				phy
.2569	a0 04		ldy #$04			ldy 	#4 							; copy address to zTemp2
.256b	b1 2c		lda ($2c),y			lda 	(basicStack),y
.256d	85 28		sta $28				sta 	zTemp2
.256f	c8		iny				iny
.2570	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2572	85 29		sta $29				sta 	zTemp2+1
.2574	a0 00		ldy #$00			ldy 	#0 							; copy dword at zTemp2 to IFR0
.2576	b1 28		lda ($28),y			lda 	(zTemp2),y
.2578	85 08		sta $08				sta 	IFR0+IM0
.257a	c8		iny				iny
.257b	b1 28		lda ($28),y			lda 	(zTemp2),y
.257d	85 09		sta $09				sta 	IFR0+IM1
.257f	c8		iny				iny
.2580	b1 28		lda ($28),y			lda 	(zTemp2),y
.2582	85 0a		sta $0a				sta 	IFR0+IM2
.2584	c8		iny				iny
.2585	b1 28		lda ($28),y			lda 	(zTemp2),y
.2587	85 0b		sta $0b				sta 	IFR0+IExp
.2589	7a		ply				ply
.258a	60		rts				rts
.258b					_CNSaveValue:
.258b	5a		phy				phy
.258c	a0 00		ldy #$00			ldy 	#0
.258e	a5 08		lda $08				lda 	IFR0+IM0
.2590	91 28		sta ($28),y			sta 	(zTemp2),y
.2592	c8		iny				iny
.2593	a5 09		lda $09				lda 	IFR0+IM1
.2595	91 28		sta ($28),y			sta 	(zTemp2),y
.2597	c8		iny				iny
.2598	a5 0a		lda $0a				lda 	IFR0+IM2
.259a	91 28		sta ($28),y			sta 	(zTemp2),y
.259c	c8		iny				iny
.259d	a5 0b		lda $0b				lda 	IFR0+IExp
.259f	91 28		sta ($28),y			sta 	(zTemp2),y
.25a1	7a		ply				ply
.25a2	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/gosub.asm

.25a3					Command_GOSUB:
.25a3	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; get line number
.25a6	a9 52		lda #$52			lda 	#STK_GOSUB
.25a8	20 e9 28	jsr $28e9			jsr 	StackOpen
.25ab	20 1c 29	jsr $291c			jsr 	STKSaveCodePosition 		; save return address on stack.
.25ae	4c e0 11	jmp $11e0			jmp 	GotoR0
.25b1					Command_RETURN:
.25b1	a9 52		lda #$52			lda 	#STK_GOSUB
.25b3	20 14 29	jsr $2914			jsr 	StackCheckFrame
.25b6	20 2e 29	jsr $292e			jsr 	STKLoadCodePosition 		; return
.25b9	20 06 29	jsr $2906			jsr 	StackClose
.25bc	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/if.asm

.25bd					IfCommand:
.25bd	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; Get the if test.
.25c0	b1 18		lda ($18),y			lda 	(codePtr),y					; what follows ?
.25c2	c9 8f		cmp #$8f			cmp 	#PR_THEN  					; could be THEN <stuff>
.25c4	d0 0c		bne $25d2			bne 	_IfStructured 				; we still support it.
.25c6	c8		iny				iny 								; consume THEN
.25c7	a2 08		ldx #$08			ldx 	#IFR0
.25c9	20 66 33	jsr $3366			jsr 	IFloatCheckZero 			; is it zero
.25cc	f0 01		beq $25cf			beq 	_IfFail 					; if fail, go to next line
.25ce	60		rts				rts 								; if THEN just continue
.25cf					_IfFail:
.25cf	4c d4 14	jmp $14d4			jmp 	RUNEndOfLine
.25d2					_IfStructured:
.25d2	20 66 33	jsr $3366			jsr 	IFloatCheckZero 			; is it zero
.25d5	d0 07		bne $25de			bne 	_IfExit 					; if not, then continue normally.
.25d7	a9 8e		lda #$8e			lda 	#PR_ELSE 					; look for else/endif
.25d9	a2 85		ldx #$85			ldx 	#PR_ENDIF
.25db	20 07 26	jsr $2607			jsr 	ScanForward 				; and run from there
.25de					_IfExit:
.25de	60		rts				rts
.25df					ElseCode:
.25df	a9 85		lda #$85			lda 	#PR_ENDIF 					; else is only run after the if clause succeeds
.25e1	aa		tax				tax 								; so just go to the structure exit
.25e2	20 07 26	jsr $2607			jsr 	ScanForward
.25e5	60		rts				rts
.25e6					EndIf:
.25e6	60		rts				rts 								; endif code does nothing

;******  Return to file: include.files


;******  Processing file: src/structures/repeat.asm

.25e7					Command_REPEAT:
.25e7	a9 02		lda #$02			lda 	#STK_REPEAT
.25e9	20 e9 28	jsr $28e9			jsr 	StackOpen
.25ec	20 1c 29	jsr $291c			jsr 	STKSaveCodePosition 		; save loop position
.25ef	60		rts				rts
.25f0					Command_UNTIL:
.25f0	a9 02		lda #$02			lda 	#STK_REPEAT
.25f2	20 14 29	jsr $2914			jsr 	StackCheckFrame
.25f5	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; work out the test
.25f8	a2 08		ldx #$08			ldx 	#IFR0
.25fa	20 66 33	jsr $3366			jsr 	IFloatCheckZero 			; check if zero
.25fd	f0 04		beq $2603			beq 	_CULoopBack 				; if so keep looping
.25ff	20 06 29	jsr $2906			jsr 	StackClose		 			; return
.2602	60		rts				rts
.2603					_CULoopBack:
.2603	20 2e 29	jsr $292e			jsr 	STKLoadCodePosition 		; loop back
.2606	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanforward.asm

.2607					ScanForward:
.2607	85 24		sta $24				sta 	zTemp0 						; save scan options in zTemp0
.2609	86 25		stx $25				stx 	zTemp0+1
.260b	64 26		stz $26				stz 	zTemp1 						; clear structure count.
.260d					_ScanForwardLoop:
.260d	a5 26		lda $26				lda 	zTemp1 						; if structure count non zero, don't check for end.
.260f	d0 0a		bne $261b			bne 	_ScanNoCheck
.2611	b1 18		lda ($18),y			lda 	(codePtr),y 				; reached either target token.
.2613	c5 24		cmp $24				cmp 	zTemp0
.2615	f0 49		beq $2660			beq 	_ScanExit
.2617	c5 25		cmp $25				cmp 	zTemp0+1
.2619	f0 45		beq $2660			beq 	_ScanExit
.261b					_ScanNoCheck:
.261b	b1 18		lda ($18),y			lda 	(codePtr),y 				; get the token and consume it.
.261d	c8		iny				iny
.261e	c9 ed		cmp #$ed			cmp 	#PR_LSQLSQDECIMALRSQRSQ 	; check for special multi-byte elements
.2620	f0 37		beq $2659			beq		_ScanDataItem
.2622	c9 ee		cmp #$ee			cmp 	#PR_LSQLSQSTRINGRSQRSQ
.2624	f0 33		beq $2659			beq 	_ScanDataItem
.2626	c9 8c		cmp #$8c			cmp 	#PR_LSQLSQENDRSQRSQ 		; handle end of line.
.2628	f0 1b		beq $2645			beq 	_ScanNextLine
.262a	c9 8d		cmp #$8d			cmp 	#PR_LSQLSQSHIFTRSQRSQ 		; if shift, skip one.
.262c	d0 01		bne $262f			bne 	_ScanNoShift
.262e	c8		iny				iny
.262f					_ScanNoShift:
.262f	c9 8c		cmp #$8c			cmp 	#PR_STRUCTURE_LAST+1 		; nested structures
.2631	b0 da		bcs $260d			bcs 	_ScanForwardLoop
.2633	c9 80		cmp #$80			cmp 	#PR_STRUCTURE_FIRST
.2635	90 d6		bcc $260d			bcc 	_ScanForwardLoop
.2637	aa		tax				tax 								; access the table to get the adjustment.
.2638	18		clc				clc
.2639	a5 26		lda $26				lda 	zTemp1 						; add it to structure count.
.263b	7d 2e 1b	adc $1b2e,x			adc 	StructureOffsets-PR_STRUCTURE_FIRST,x
.263e	85 26		sta $26				sta 	zTemp1
.2640	10 cb		bpl $260d			bpl		_ScanForwardLoop 			; error if -ve ?
.2642	4c 83 27	jmp $2783		jmp	ErrorV_structure
.2645					_ScanNextLine:
.2645	18		clc				clc	 								; forward to next line.
.2646	b2 18		lda ($18)			lda 	(codePtr)
.2648	65 18		adc $18				adc 	codePtr
.264a	85 18		sta $18				sta 	codePtr
.264c	90 02		bcc $2650			bcc 	_ScanNoCarry
.264e	e6 19		inc $19				inc 	codePtr+1
.2650					_ScanNoCarry:
.2650	a0 03		ldy #$03			ldy 	#3
.2652	b2 18		lda ($18)			lda 	(codePtr) 					; off end of program ?
.2654	d0 b7		bne $260d			bne 	_ScanForwardLoop
.2656	4c 83 27	jmp $2783		jmp	ErrorV_structure
.2659					_ScanDataItem:
.2659	98		tya				tya
.265a	38		sec				sec
.265b	71 18		adc ($18),y			adc 	(codePtr),y
.265d	a8		tay				tay
.265e	80 ad		bra $260d			bra 	_ScanForwardLoop
.2660					_ScanExit:
.2660	c8		iny				iny 								; consume final token.
.2661	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/structures/scanproc.asm

.2662					ScanProcedures:
.2662	a5 18		lda $18				lda 	codePtr 					; push codePtr on the stack
.2664	48		pha				pha
.2665	a5 19		lda $19				lda 	codePtr+1
.2667	48		pha				pha
.2668	5a		phy				phy
.2669	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; back to the program start
.266c	85 19		sta $19				sta 	codePtr+1
.266e	64 18		stz $18				stz 	codePtr
.2670					_SPLoop:
.2670	b2 18		lda ($18)			lda 	(codePtr) 					; end of program
.2672	f0 18		beq $268c			beq 	_SPExit
.2674	a0 03		ldy #$03			ldy 	#3 							; first token PROC
.2676	b1 18		lda ($18),y			lda 	(codePtr),y
.2678	c9 88		cmp #$88			cmp 	#PR_PROC
.267a	d0 03		bne $267f			bne 	_SPNext
.267c	20 94 26	jsr $2694			jsr 	_SPSetupRecord
.267f					_SPNext:
.267f	18		clc				clc 								; forward to next
.2680	b2 18		lda ($18)			lda 	(codePtr)
.2682	65 18		adc $18				adc 	codePtr
.2684	85 18		sta $18				sta 	codePtr
.2686	90 e8		bcc $2670			bcc 	_SPLoop
.2688	e6 19		inc $19				inc 	codePtr+1
.268a	80 e4		bra $2670			bra 	_SPLoop
.268c					_SPExit:
.268c	7a		ply				ply
.268d	68		pla				pla
.268e	85 19		sta $19				sta 	codePtr+1
.2690	68		pla				pla
.2691	85 18		sta $18				sta 	codePtr
.2693	60		rts				rts
.2694					_SPSetupRecord:
.2694	c8		iny				iny 								; check identifier follows
.2695	b1 18		lda ($18),y			lda 	(codePtr),y
.2697	29 c0		and #$c0			and 	#$C0
.2699	c9 40		cmp #$40			cmp 	#$40
.269b	d0 27		bne $26c4			bne 	_SPSyntax
.269d	20 b0 2c	jsr $2cb0			jsr 	VARGetInfo 					; get the information
.26a0	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen 				; check right bracket follows.
.26a3	20 62 2c	jsr $2c62			jsr 	VARFind 					; already exists ?
.26a6	b0 1f		bcs $26c7			bcs 	_SPUsed 					; error !
.26a8	20 0e 2c	jsr $2c0e			jsr 	VARCreate 					; create, XA points to the data.
.26ab	85 24		sta $24				sta 	zTemp0
.26ad	86 25		stx $25				stx 	zTemp0+1
.26af	5a		phy				phy 								; save Y pos on stack
.26b0	a0 01		ldy #$01			ldy 	#1
.26b2	a5 18		lda $18				lda 	codePtr 					; save codePtr/Y
.26b4	92 24		sta ($24)			sta 	(zTemp0)
.26b6	a5 19		lda $19				lda 	codePtr+1
.26b8	91 24		sta ($24),y			sta 	(zTemp0),y
.26ba	c8		iny				iny
.26bb	68		pla				pla
.26bc	91 24		sta ($24),y			sta 	(zTemp0),y
.26be	c8		iny				iny
.26bf	a9 ff		lda #$ff			lda 	#$FF 						; fill rest with $FF
.26c1	91 24		sta ($24),y			sta 	(zTemp0),y
.26c3	60		rts				rts
.26c4					_SPSyntax:
.26c4	4c f7 26	jmp $26f7		jmp	ErrorV_syntax
.26c7					_SPUsed:
.26c7	4c 4e 28	jmp $284e		jmp	ErrorV_dupproc

;******  Return to file: include.files


;******  Processing file: src/structures/while.asm

.26ca					Command_WHILE:
.26ca	5a		phy				phy 								; save position of the test
.26cb	20 13 17	jsr $1713			jsr 	EXPEvalNumber 				; work out the while test.
.26ce	a2 08		ldx #$08			ldx 	#IFR0
.26d0	20 66 33	jsr $3366			jsr 	IFloatCheckZero 			; check if zero
.26d3	f0 0e		beq $26e3			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.26d5	98		tya				tya 								; position *after* test.
.26d6	7a		ply				ply 								; restore position before test, at WHILE
.26d7	88		dey				dey 								; so we execute the WHILE command again.
.26d8	48		pha				pha 								; push after test on the stack
.26d9	a9 12		lda #$12			lda 	#STK_WHILE 					; open while frame
.26db	20 e9 28	jsr $28e9			jsr 	StackOpen
.26de	20 1c 29	jsr $291c			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.26e1	7a		ply				ply 								; restore the position *after* the test
.26e2	60		rts				rts
.26e3					_WHExitLoop:
.26e3	68		pla				pla 								; throw post loop position
.26e4	a9 83		lda #$83			lda 	#PR_WEND 					; scan forward past WEND
.26e6	aa		tax				tax
.26e7	20 07 26	jsr $2607			jsr 	ScanForward
.26ea	60		rts				rts
.26eb					Command_WEND:
.26eb	a9 12		lda #$12			lda 	#STK_WHILE 					; check WHILE is TOS e.g. in a while loop :)
.26ed	20 14 29	jsr $2914			jsr 	StackCheckFrame
.26f0	20 2e 29	jsr $292e			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.26f3	20 06 29	jsr $2906			jsr 	StackClose		 			; erase the frame
.26f6	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/errors/generated/errors.asm

.26f7					ErrorV_syntax:
.26f7	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>26fa	0c 53 79 6e 74 61 78 20			.text	12,"Syntax Error",0
>2702	45 72 72 6f 72 00
.2708					ErrorV_range:
.2708	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>270b	0c 4f 75 74 20 4f 66 20			.text	12,"Out Of Range",0
>2713	52 61 6e 67 65 00
.2719					ErrorV_value:
.2719	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>271c	09 42 61 64 20 56 61 6c			.text	9,"Bad Value",0
>2724	75 65 00
.2727					ErrorV_type:
.2727	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>272a	0d 54 79 70 65 20 4d 69			.text	13,"Type Mismatch",0
>2732	73 6d 61 74 63 68 00
.2739					ErrorV_unimplemented:
.2739	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>273c	0f 4e 6f 74 20 49 6d 70			.text	15,"Not Implemented",0
>2744	6c 65 6d 65 6e 74 65 64 00
.274d					ErrorV_assert:
.274d	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>2750	0b 41 73 73 65 72 74 20			.text	11,"Assert Fail",0
>2758	46 61 69 6c 00
.275d					ErrorV_internal:
.275d	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>2760	0e 49 6e 74 65 72 6e 61			.text	14,"Internal Error",0
>2768	6c 20 45 72 72 6f 72 00
.2770					ErrorV_divzero:
.2770	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>2773	0e 44 69 76 69 64 65 20			.text	14,"Divide By Zero",0
>277b	42 79 20 5a 65 72 6f 00
.2783					ErrorV_structure:
.2783	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>2786	13 53 74 72 75 63 74 75			.text	19,"Structure Imbalance",0
>278e	72 65 20 49 6d 62 61 6c 61 6e 63 65 00
.279b					ErrorV_stop:
.279b	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>279e	0f 50 72 6f 67 72 61 6d			.text	15,"Program Stopped",0
>27a6	20 53 74 6f 70 70 65 64 00
.27af					ErrorV_data:
.27af	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>27b2	0b 4f 75 74 20 4f 66 20			.text	11,"Out Of Data",0
>27ba	44 61 74 61 00
.27bf					ErrorV_redefine:
.27bf	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>27c2	0f 41 72 72 61 79 20 52			.text	15,"Array Redefined",0
>27ca	65 64 65 66 69 6e 65 64 00
.27d3					ErrorV_index:
.27d3	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>27d6	0f 42 61 64 20 41 72 72			.text	15,"Bad Array Index",0
>27de	61 79 20 49 6e 64 65 78 00
.27e7					ErrorV_memory:
.27e7	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>27ea	0d 4f 75 74 20 4f 66 20			.text	13,"Out Of Memory",0
>27f2	4d 65 6d 6f 72 79 00
.27f9					ErrorV_uninitialised:
.27f9	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>27fc	16 56 61 72 69 61 62 6c			.text	22,"Variable Uninitialised",0
>2804	65 20 55 6e 69 6e 69 74 69 61 6c 69 73 65 64 00
.2814					ErrorV_string:
.2814	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>2817	11 42 61 64 20 53 74 72			.text	17,"Bad String Length",0
>281f	69 6e 67 20 4c 65 6e 67 74 68 00
.282a					ErrorV_variable:
.282a	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>282d	10 56 61 72 69 61 62 6c			.text	16,"Variable Missing",0
>2835	65 20 4d 69 73 73 69 6e 67 00
.283f					ErrorV_stack:
.283f	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>2842	0a 53 74 61 63 6b 20 46			.text	10,"Stack Full",0
>284a	75 6c 6c 00
.284e					ErrorV_dupproc:
.284e	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>2851	19 50 72 6f 63 65 64 75			.text	25,"Procedure Identifier Used",0
>2859	72 65 20 49 64 65 6e 74 69 66 69 65 72 20 55 73
>2869	65 64 00
.286c					ErrorV_unknown:
.286c	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>286f	11 55 6e 6b 6e 6f 77 6e			.text	17,"Unknown Procedure",0
>2877	20 50 72 6f 63 65 64 75 72 65 00
.2882					ErrorV_break:
.2882	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>2885	05 42 72 65 61 6b 00			.text	5,"Break",0
.288c					ErrorV_line:
.288c	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>288f	13 55 6e 6b 6e 6f 77 6e			.text	19,"Unknown Line Number",0
>2897	20 4c 69 6e 65 20 4e 75 6d 62 65 72 00
.28a4					ErrorV_fnf:
.28a4	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>28a7	0e 46 69 6c 65 20 4e 6f			.text	14,"File Not Found",0
>28af	74 20 46 6f 75 6e 64 00
.28b7					ErrorV_full:
.28b7	20 fe 2a	jsr $2afe		jsr	ErrorHandler
>28ba	0c 53 74 6f 72 61 67 65			.text	12,"Storage Full",0
>28c2	20 46 75 6c 6c 00

;******  Return to file: include.files


;******  Processing file: src/support/errors/syntax.asm

.28c8					ERRCheckLParen:
.28c8	b1 18		lda ($18),y			lda 	(codePtr),y
.28ca	c9 eb		cmp #$eb			cmp 	#PR_LPAREN
.28cc	d0 18		bne $28e6			bne 	ERRSyntaxError
.28ce	c8		iny				iny
.28cf	60		rts				rts
.28d0					ERRCheckRParen:
.28d0	b1 18		lda ($18),y			lda 	(codePtr),y
.28d2	c9 9d		cmp #$9d			cmp 	#PR_RPAREN
.28d4	d0 10		bne $28e6			bne 	ERRSyntaxError
.28d6	c8		iny				iny
.28d7	60		rts				rts
.28d8					ERRCheckComma:
.28d8	b1 18		lda ($18),y			lda 	(codePtr),y
.28da	c9 99		cmp #$99			cmp 	#PR_COMMA
.28dc	d0 08		bne $28e6			bne 	ERRSyntaxError
.28de	c8		iny				iny
.28df	60		rts				rts
.28e0					ERRCheckA:
.28e0	d1 18		cmp ($18),y			cmp 	(codePtr),y
.28e2	d0 02		bne $28e6			bne 	ERRSyntaxError
.28e4	c8		iny				iny
.28e5	60		rts				rts
.28e6					ERRSyntaxError:
.28e6	4c f7 26	jmp $26f7		jmp	ErrorV_syntax

;******  Return to file: include.files


;******  Processing file: src/support/stack/frames.asm

.28e9					StackOpen:
.28e9	48		pha				pha 								; save frame byte
.28ea	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.28ec	0a		asl a				asl 	a 							; claim twice this for storage
.28ed	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.28ef	38		sec				sec 								; so basically subtracting from
.28f0	65 2c		adc $2c				adc 	basicStack 	 				; basicStack
.28f2	85 2c		sta $2c				sta 	basicStack
.28f4	b0 09		bcs $28ff			bcs 	_SONoBorrow
.28f6	c6 2d		dec $2d				dec 	basicStack+1
.28f8	a5 2d		lda $2d				lda 	basicStack+1 				; reached the bottom ?
.28fa	cd 20 06	cmp $0620			cmp 	basicStackEnd
.28fd	f0 04		beq $2903			beq 	_SOMemory
.28ff					_SONoBorrow:
.28ff	68		pla				pla 								; get marker back and write at TOS
.2900	92 2c		sta ($2c)			sta 	(basicStack)
.2902	60		rts				rts
.2903					_SOMemory:
.2903	4c 3f 28	jmp $283f		jmp	ErrorV_stack
.2906					StackClose:
.2906	b2 2c		lda ($2c)			lda 	(basicStack) 				; get TOS marker
.2908	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.290a	0a		asl a				asl 	a 							; claim twice this.
.290b	65 2c		adc $2c				adc 	basicStack 					; add to the stack pointer.
.290d	85 2c		sta $2c				sta 	basicStack
.290f	90 02		bcc $2913			bcc 	_SCExit
.2911	e6 2d		inc $2d				inc 	basicStack+1
.2913					_SCExit:
.2913	60		rts				rts
.2914					StackCheckFrame:
.2914	d2 2c		cmp ($2c)			cmp		(basicStack) 				; check  frames match
.2916	d0 01		bne $2919			bne 	_SCFError 					; different, we have structures mixed up
.2918	60		rts				rts
.2919					_SCFError:
.2919	4c 83 27	jmp $2783		jmp	ErrorV_structure

;******  Return to file: include.files


;******  Processing file: src/support/stack/location.asm

.291c					STKSaveCodePosition:
.291c	5a		phy				phy
.291d	98		tya				tya 								; save Y at offset 1.
.291e	a0 01		ldy #$01			ldy 	#1
.2920	91 2c		sta ($2c),y			sta 	(basicStack),y
.2922	a5 18		lda $18				lda 	codePtr 					; save code (low) at 2
.2924	c8		iny				iny
.2925	91 2c		sta ($2c),y			sta 	(basicStack),y
.2927	a5 19		lda $19				lda 	codePtr+1 					; save code (high) at 3
.2929	c8		iny				iny
.292a	91 2c		sta ($2c),y			sta 	(basicStack),y
.292c	7a		ply				ply
.292d	60		rts				rts
.292e					STKLoadCodePosition:
.292e	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.2930	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2932	85 19		sta $19				sta 	codePtr+1
.2934	88		dey				dey
.2935	b1 2c		lda ($2c),y			lda 	(basicStack),y
.2937	85 18		sta $18				sta 	codePtr
.2939	88		dey				dey
.293a	b1 2c		lda ($2c),y			lda 	(basicStack),y 				; line offset to Y
.293c	a8		tay				tay
.293d	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/support/stack/setup.asm

.293e					StackReset:
.293e	48		pha				pha 								; save top of memory
.293f	3a		dec a				dec 	a  							; end of stack = previous byte
.2940	85 2d		sta $2d				sta 	basicStack+1
.2942	a9 ff		lda #$ff			lda 	#$FF
.2944	85 2c		sta $2c				sta 	basicStack
.2946	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.2948	92 2c		sta ($2c)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.294a	68		pla				pla 								; allocate pages for stack.
.294b	38		sec				sec
.294c	e9 02		sbc #$02			sbc 	#STACKPAGES
.294e	8d 20 06	sta $0620			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.2951	60		rts				rts
.002c					basicStack:
>002c							.fill 	2
.0620					basicStackEnd:
>0620							.fill 	1

;******  Return to file: include.files


;******  Processing file: src/support/strings/concrete.asm

.2952					StringConcrete:
.2952	5a		phy				phy 								; save position on stack
.2953	b2 08		lda ($08)			lda 	(IFR0) 						; get string length
.2955	c9 fd		cmp #$fd			cmp 	#253 						; string too long - cannot concrete.
.2957	b0 41		bcs $299a			bcs 	_SALengthError
.2959	18		clc				clc 								; length of the new string
.295a	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.295c	90 02		bcc $2960			bcc 	_SAHaveLength
.295e	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.2960					_SAHaveLength:
.2960	48		pha				pha 								; save length to be allocated for concreting.
.2961	38		sec				sec
.2962	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.2964	6d 22 06	adc $0622			adc 	stringMemory
.2967	8d 22 06	sta $0622			sta 	stringMemory
.296a	85 28		sta $28				sta 	zTemp2 						; update storage address
.296c	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.296e	6d 23 06	adc $0623			adc 	stringMemory+1
.2971	8d 23 06	sta $0623			sta 	stringMemory+1
.2974	85 29		sta $29				sta 	zTemp2+1
.2976	68		pla				pla 								; save length allocated in +0
.2977	92 28		sta ($28)			sta 	(zTemp2)
.2979	a9 00		lda #$00			lda 	#0 							; clear the status byte in +1
.297b	a0 01		ldy #$01			ldy 	#1
.297d	91 28		sta ($28),y			sta 	(zTemp2),y
.297f					_SACopyNewString:
.297f	b2 08		lda ($08)			lda 	(IFR0) 						; copy length at +2
.2981	a0 02		ldy #$02			ldy 	#2
.2983	91 28		sta ($28),y			sta 	(zTemp2),y
.2985	aa		tax				tax 								; bytes to copy
.2986	f0 0c		beq $2994			beq 	_SACopyExit
.2988	a0 01		ldy #$01			ldy 	#1 							; first character from here
.298a					_SACopyNSLoop:
.298a	b1 08		lda ($08),y			lda 	(IFR0),y 					; get character from here
.298c	c8		iny				iny 								; write two on in string storage
.298d	c8		iny				iny
.298e	91 28		sta ($28),y			sta 	(zTemp2),y
.2990	88		dey				dey
.2991	ca		dex				dex									; until copied all the string lengths.
.2992	d0 f6		bne $298a			bne 	_SACopyNSLoop
.2994					_SACopyExit:
.2994	a6 29		ldx $29				ldx 	zTemp2+1 					; XA contain the concreted string.
.2996	a5 28		lda $28				lda 	zTemp2
.2998	7a		ply				ply
.2999	60		rts				rts
.299a					_SALengthError:
.299a	4c 14 28	jmp $2814		jmp	ErrorV_string

;******  Return to file: include.files


;******  Processing file: src/support/strings/stringalloc.asm

.299d					StringSystemInitialise:
.299d	3a		dec a				dec 	a 							; make last byte of previous page.
.299e	8d 23 06	sta $0623			sta 	stringMemory+1
.29a1	85 25		sta $25				sta 	zTemp0+1
.29a3	a9 ff		lda #$ff			lda 	#$FF
.29a5	8d 22 06	sta $0622			sta 	stringMemory
.29a8	85 24		sta $24				sta 	zTemp0
.29aa	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.29ac	92 24		sta ($24)			sta 	(zTemp0)
.29ae	60		rts				rts
.29af					StringSpaceInitialise:
.29af	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.29b1	8d 21 06	sta $0621			sta 	stringInitialised
.29b4	ad 22 06	lda $0622			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.29b7	8d 24 06	sta $0624			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.29ba	ad 23 06	lda $0623			lda 	stringMemory+1
.29bd	3a		dec a				dec 	a
.29be	8d 25 06	sta $0625			sta 	stringTempPointer+1
.29c1	20 8a 10	jsr $108a			jsr 	ClearCheckMemory
.29c4	60		rts				rts
.29c5					StringTempAllocate:
.29c5	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.29c7	b0 2e		bcs $29f7			bcs 	_STALength
.29c9	2c 21 06	bit $0621			bit 	stringInitialised 			; already initialised
.29cc	30 05		bmi $29d3			bmi 	_STAAllocate
.29ce	48		pha				pha 								; save value to subtract.
.29cf	20 af 29	jsr $29af			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.29d2	68		pla				pla 								; restore it
.29d3					_STAAllocate:
.29d3	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.29d5	18		clc				clc  								; deliberate allows one more
.29d6	6d 24 06	adc $0624			adc 	stringTempPointer 			; subtract from temp pointer
.29d9	8d 24 06	sta $0624			sta 	stringTempPointer
.29dc	85 08		sta $08				sta 	IFR0+IM0 					; address in mantissa too
.29de	85 2e		sta $2e				sta 	zsTemp 						; and zsTemp
.29e0	ad 25 06	lda $0625			lda 	stringTempPointer+1
.29e3	69 ff		adc #$ff			adc 	#$FF
.29e5	8d 25 06	sta $0625			sta 	stringTempPointer+1
.29e8	85 2f		sta $2f				sta 	zsTemp+1
.29ea	85 09		sta $09				sta 	IFR0+IM1
.29ec	64 0a		stz $0a				stz 	IFR0+IM2 					; set the typing data and the upper address bytes.
.29ee	a9 80		lda #$80			lda 	#$80
.29f0	85 0b		sta $0b				sta 	IFR0+IExp
.29f2	a9 00		lda #$00			lda 	#0 							; clear the target string
.29f4	92 2e		sta ($2e)			sta 	(zsTemp)
.29f6	60		rts				rts
.29f7					_STALength:
.29f7	4c 14 28	jmp $2814		jmp	ErrorV_string
.29fa					StringTempWrite:
.29fa	5a		phy				phy
.29fb	48		pha				pha
.29fc	b2 2e		lda ($2e)			lda 	(zsTemp)
.29fe	1a		inc a				inc 	a
.29ff	92 2e		sta ($2e)			sta 	(zsTemp)
.2a01	a8		tay				tay
.2a02	68		pla				pla
.2a03	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2a05	7a		ply				ply
.2a06	60		rts				rts
.002e					zsTemp:
>002e							.fill 	2
.0621					stringInitialised:
>0621							.fill 	1
.0622					stringMemory:
>0622							.fill 	2
.0624					stringTempPointer:
>0624							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/system/files/dir.asm

.2a07					Command_DIR:
.2a07	5a		phy				phy
.2a08	38		sec				sec 								; reset read
.2a09	20 cd ff	jsr $ffcd			jsr 	OSReadDirectory
.2a0c	18		clc		_CDLoop:clc
.2a0d	20 cd ff	jsr $ffcd			jsr 	OSReadDirectory 			; read next
.2a10	b0 27		bcs $2a39			bcs 	_CDExit 					; no more
.2a12	86 24		stx $24				stx 	zTemp0
.2a14	84 25		sty $25				sty 	zTemp0+1
.2a16	20 df ff	jsr $ffdf			jsr	 	OSWriteString				; write name
.2a19					_CDPad:
.2a19	a9 20		lda #$20			lda 	#32
.2a1b	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2a1e	20 d9 ff	jsr $ffd9			jsr 	OSGetScreenPosition
.2a21	e0 10		cpx #$10			cpx 	#16
.2a23	90 f4		bcc $2a19			bcc 	_CDPad
.2a25	a0 11		ldy #$11			ldy 	#17
.2a27	b1 24		lda ($24),y			lda 	(zTemp0),y
.2a29	aa		tax				tax
.2a2a	88		dey				dey
.2a2b	b1 24		lda ($24),y			lda 	(zTemp0),y
.2a2d	20 27 2b	jsr $2b27			jsr 	WriteIntXA
.2a30	a2 3b		ldx #$3b			ldx 	#_CDTail & $FF
.2a32	a0 2a		ldy #$2a			ldy 	#_CDTail >> 8
.2a34	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2a37	80 d3		bra $2a0c			bra 	_CDLoop
.2a39	7a		ply		_CDExit:ply
.2a3a	60		rts				rts
.2a3b					_CDTail:
>2a3b	08						.byte 	_CDTail2-*-1
>2a3c	20 62 79 74 65 73 2e 0d				.text 	" bytes.",13
.2a44					_CDTail2:

;******  Return to file: include.files


;******  Processing file: src/system/files/erase.asm

.2a44					Command_ERASE:
.2a44	20 56 2a	jsr $2a56			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2a47	5a		phy				phy
.2a48	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2a4a	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2a4c	20 d0 ff	jsr $ffd0			jsr 	OSDeleteFile
.2a4f	7a		ply				ply
.2a50	b0 01		bcs $2a53			bcs 	_CEFail
.2a52	60		rts				rts
.2a53					_CEFail:
.2a53	4c a4 28	jmp $28a4		jmp	ErrorV_fnf
.2a56					FileSetupBlock:
.2a56	20 3d 17	jsr $173d			jsr 	EXPEvalString 					; string to R0, zTemp0
.2a59	a5 24		lda $24				lda 	zTemp0 							; address to name
.2a5b	8d 26 06	sta $0626			sta 	FSBBlock
.2a5e	a5 25		lda $25				lda 	zTemp0+1
.2a60	8d 27 06	sta $0627			sta 	FSBBlock+1 						; zero the rest.
.2a63	9c 28 06	stz $0628			stz 	FSBBlock+2
.2a66	9c 29 06	stz $0629			stz 	FSBBlock+3
.2a69	9c 2a 06	stz $062a			stz 	FSBBlock+4
.2a6c	9c 2b 06	stz $062b			stz 	FSBBlock+5
.2a6f	60		rts				rts
.0626					FSBBlock:
>0626							.fill 	6

;******  Return to file: include.files


;******  Processing file: src/system/files/load.asm

.2a70					Command_LOAD:
.2a70	20 56 2a	jsr $2a56			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2a73	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; set load address
.2a76	8d 29 06	sta $0629			sta 	FSBBlock+3
.2a79	9c 28 06	stz $0628			stz 	FSBBlock+2
.2a7c	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2a7e	48		pha				pha
.2a7f	20 9c 2a	jsr $2a9c			jsr	 	FileCheckSecondParam
.2a82	5a		phy				phy
.2a83	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2a85	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2a87	20 d3 ff	jsr $ffd3			jsr 	OSReadFile
.2a8a	7a		ply				ply
.2a8b	b0 0c		bcs $2a99			bcs 	_CLFail
.2a8d	68		pla				pla 								; load program
.2a8e	c9 99		cmp #$99			cmp 	#PR_COMMA
.2a90	f0 06		beq $2a98			beq 	_CLNoClear
.2a92	20 44 10	jsr $1044			jsr 	ClearCode 					; run CLEAR code, loaded a new program in.
.2a95	4c 46 2b	jmp $2b46			jmp 	WarmStart 					; and warm start
.2a98					_CLNoClear:
.2a98	60		rts				rts
.2a99					_CLFail:
.2a99	4c a4 28	jmp $28a4		jmp	ErrorV_fnf
.2a9c					FileCheckSecondParam:
.2a9c	b1 18		lda ($18),y			lda 	(codePtr),y 				; , follows
.2a9e	c9 99		cmp #$99			cmp 	#PR_COMMA
.2aa0	d0 0e		bne $2ab0			bne 	_FCSPExit
.2aa2	c8		iny				iny 								; consume
.2aa3	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; get address
.2aa6	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2aa8	8d 28 06	sta $0628			sta 	FSBBlock+2
.2aab	a5 09		lda $09				lda 	IFR0+IM1
.2aad	8d 29 06	sta $0629			sta 	FSBBlock+3
.2ab0					_FCSPExit:
.2ab0	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/system/files/save.asm

.2ab1					Command_SAVE:
.2ab1	20 56 2a	jsr $2a56			jsr 	FileSetupBlock 				; set up file i/o block with filename.
.2ab4	b1 18		lda ($18),y			lda 	(codePtr),y 				; what follows ?
.2ab6	c9 99		cmp #$99			cmp 	#PR_COMMA 					; comma ?
.2ab8	f0 22		beq $2adc			beq 	_CLSaveBlock 				; save "Name",from,size
.2aba	ad 1a 05	lda $051a			lda 	PGMBaseHigh 				; set load address
.2abd	8d 29 06	sta $0629			sta 	FSBBlock+3
.2ac0	9c 28 06	stz $0628			stz 	FSBBlock+2
.2ac3	20 c6 20	jsr $20c6			jsr		PGMEndProgram 				; end of program -> zTemp0
.2ac6	e6 24		inc $24				inc 	zTemp0 						; bump past end NULL
.2ac8	d0 02		bne $2acc			bne 	_CLNoCarry
.2aca	e6 25		inc $25				inc 	zTemp0+1
.2acc					_CLNoCarry:
.2acc	a5 24		lda $24				lda 	zTemp0
.2ace	8d 2a 06	sta $062a			sta 	FSBBlock+4
.2ad1	38		sec				sec
.2ad2	a5 25		lda $25				lda 	zTemp0+1
.2ad4	ed 29 06	sbc $0629			sbc 	FSBBlock+3
.2ad7	8d 2b 06	sta $062b			sta 	FSBBlock+5
.2ada	80 13		bra $2aef			bra 	_CSSave
.2adc					_CLSaveBlock:
.2adc	20 9c 2a	jsr $2a9c			jsr 	FileCheckSecondParam 		; the address to save from.
.2adf	20 d8 28	jsr $28d8			jsr 	ERRCheckComma
.2ae2	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; get size
.2ae5	a5 08		lda $08				lda 	IFR0+IM0	 				; copy it
.2ae7	8d 2a 06	sta $062a			sta 	FSBBlock+4
.2aea	a5 09		lda $09				lda 	IFR0+IM1
.2aec	8d 2b 06	sta $062b			sta 	FSBBlock+5
.2aef					_CSSave:
.2aef	5a		phy				phy
.2af0	a2 26		ldx #$26			ldx 	#FSBBlock & $FF
.2af2	a0 06		ldy #$06			ldy 	#FSBBlock >> 8
.2af4	20 d6 ff	jsr $ffd6			jsr 	OSWriteFile
.2af7	7a		ply				ply
.2af8	b0 01		bcs $2afb			bcs 	_CSFail
.2afa	60		rts				rts
.2afb					_CSFail:
.2afb	4c b7 28	jmp $28b7		jmp	ErrorV_full

;******  Return to file: include.files


;******  Processing file: src/ui/errorhandler.asm

.2afe					ErrorHandler:
.2afe	fa		plx				plx 								; get address of msg
.2aff	7a		ply				ply
.2b00	e8		inx				inx 								; bump past RTS
.2b01	d0 01		bne $2b04			bne 	_EHNoInc
.2b03	c8		iny				iny
.2b04					_EHNoInc:
.2b04	20 df ff	jsr $ffdf			jsr	 	OSWriteString 				; print it.
.2b07	ad 2c 06	lda $062c			lda 	ERRLine 					; direct command ?
.2b0a	0d 2d 06	ora $062d			ora 	ERRLine+1
.2b0d	f0 10		beq $2b1f			beq 	_EHNoNumber
.2b0f	a2 22		ldx #$22			ldx 	#_EHAtMsg & $FF
.2b11	a0 2b		ldy #$2b			ldy 	#_EHAtMsg >> 8
.2b13	20 df ff	jsr $ffdf			jsr 	OSWriteString
.2b16	ad 2c 06	lda $062c			lda 	ERRLine 					; line number -> XA
.2b19	ae 2d 06	ldx $062d			ldx 	ERRLine+1
.2b1c	20 27 2b	jsr $2b27			jsr 	WriteIntXA
.2b1f					_EHNoNumber:
.2b1f	4c 50 2b	jmp $2b50			jmp 	WarmStartNewLine
.2b22					_EHAtMsg:
>2b22	04 20 61 74 20					.text 	_EHAtMsg1-_EHAtMsg-1," at "
.2b27					_EHAtMsg1:
.2b27					WriteIntXA:
.2b27	da		phx				phx
.2b28	48		pha				pha
.2b29	a2 08		ldx #$08			ldx 	#IFR0
.2b2b	20 bc 32	jsr $32bc			jsr 	IFloatPushRx
.2b2e	68		pla				pla
.2b2f	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.2b32	68		pla				pla
.2b33	85 09		sta $09				sta 	IFR0+IM1
.2b35	a9 0a		lda #$0a			lda 	#10 						; decimal
.2b37	20 0f 31	jsr $310f			jsr 	IFloatIntegerToStringR0	 	; convert
.2b3a	20 df ff	jsr $ffdf			jsr 	OSWriteString 				; print
.2b3d	a2 08		ldx #$08			ldx 	#IFR0
.2b3f	20 dd 32	jsr $32dd			jsr 	IFloatPullRx
.2b42	60		rts				rts
.2b43					NotImplemented:
.2b43	4c 39 27	jmp $2739		jmp	ErrorV_unimplemented
.062c					ERRLine:
>062c							.fill 	2

;******  Return to file: include.files


;******  Processing file: src/ui/warmstart.asm

.2b46					WarmStart:
.2b46	a9 4f		lda #$4f			lda 	#"O" 						; Ready prompt
.2b48	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2b4b	a9 6b		lda #$6b			lda 	#"k"
.2b4d	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2b50					WarmStartNewLine:
.2b50	a9 0d		lda #$0d			lda 	#13
.2b52	20 f7 ff	jsr $fff7			jsr 	OSWriteScreen
.2b55					WarmStartNoPrompt:
.2b55	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.2b57	9a		txs				txs
.2b58	20 e5 ff	jsr $ffe5			jsr 	OSScreenLine 				; edit
.2b5b	e8		inx				inx 								; skip length byte to make it ASCIIZ
.2b5c	d0 01		bne $2b5f			bne 	_WSSkip
.2b5e	c8		iny				iny
.2b5f					_WSSkip:
.2b5f	86 28		stx $28				stx 	zTemp2 						; save address
.2b61	84 29		sty $29				sty 	zTemp2+1
.2b63	b2 28		lda ($28)			lda 	(zTemp2)
.2b65	f0 ee		beq $2b55			beq 	WarmStartNoPrompt 			; ignore empty line.
.2b67	a2 99		ldx #$99			ldx 	#TOKGetCharacter & $FF 		; tokenise it.
.2b69	a0 2b		ldy #$2b			ldy 	#TOKGetCharacter >> 8
.2b6b	38		sec				sec
.2b6c	20 38 21	jsr $2138			jsr 	TOKTokenise
.2b6f	b0 25		bcs $2b96			bcs 	_WSSyntax
.2b71	ad 01 04	lda $0401			lda 	TOKLineNumber 				; if line number zero
.2b74	0d 02 04	ora $0402			ora 	TOKLineNumber+1
.2b77	d0 0b		bne $2b84			bne 	_WSLineEdit
.2b79	a9 00		lda #$00			lda 	#TOKLineSize & $FF 			; execute code.
.2b7b	85 18		sta $18				sta 	codePtr
.2b7d	a9 04		lda #$04			lda 	#TOKLineSize >> 8
.2b7f	85 19		sta $19				sta 	codePtr+1
.2b81	4c df 14	jmp $14df			jmp 	RUNNewLine
.2b84					_WSLineEdit:
.2b84	20 13 20	jsr $2013			jsr 	PGMDeleteLine 				; delete line, perhaps ?
.2b87	ad 00 04	lda $0400			lda 	TOKLineSize 				; check line is empty.
.2b8a	c9 04		cmp #$04			cmp 	#4
.2b8c	f0 03		beq $2b91			beq 	_WSNoInsert
.2b8e	20 5d 20	jsr $205d			jsr 	PGMInsertLine				; if not, maybe insert
.2b91					_WSNoInsert:
.2b91	20 44 10	jsr $1044			jsr 	ClearCode 					; clear variables etc.
.2b94	80 bf		bra $2b55			bra 	WarmStartNoPrompt
.2b96					_WSSyntax:
.2b96	4c f7 26	jmp $26f7		jmp	ErrorV_syntax
.2b99					TOKGetCharacter:
.2b99	b2 28		lda ($28)			lda 	(zTemp2)
.2b9b	90 06		bcc $2ba3			bcc 	_GSNoIncrement
.2b9d	e6 28		inc $28				inc 	zTemp2
.2b9f	d0 02		bne $2ba3			bne 	_GSNoIncrement
.2ba1	e6 29		inc $29				inc 	zTemp2+1
.2ba3					_GSNoIncrement:
.2ba3	c9 00		cmp #$00			cmp 	#0
.2ba5	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/array.asm

.2ba6					VARArrayLookup:
.2ba6	85 24		sta $24				sta 	zTemp0 						; save the array address pointer in zTemp0
.2ba8	86 25		stx $25				stx 	zTemp0+1
.2baa	b2 24		lda ($24)			lda 	(zTemp0)
.2bac	48		pha				pha
.2bad	5a		phy				phy
.2bae	a0 01		ldy #$01			ldy 	#1
.2bb0	b1 24		lda ($24),y			lda 	(zTemp0),y
.2bb2	7a		ply				ply
.2bb3	48		pha				pha
.2bb4	20 25 17	jsr $1725			jsr 	EXPEvalInteger16 			; R0 now contains the index
.2bb7	68		pla				pla 								; array address to zTemp0
.2bb8	85 25		sta $25				sta 	zTemp0+1
.2bba	68		pla				pla
.2bbb	85 24		sta $24				sta 	zTemp0
.2bbd	5a		phy				phy 								; save codePtr position.
.2bbe	a0 01		ldy #$01			ldy 	#1 							; get 14-8 of size.
.2bc0	b1 24		lda ($24),y			lda 	(zTemp0),y
.2bc2	48		pha				pha 								; save bit 15 on stack.
.2bc3	29 7f		and #$7f			and 	#$7F
.2bc5	85 26		sta $26				sta 	zTemp1
.2bc7	a5 08		lda $08				lda 	IFR0+IM0 					; check range of index
.2bc9	d2 24		cmp ($24)			cmp 	(zTemp0)
.2bcb	a5 09		lda $09				lda 	IFR0+IM1
.2bcd	e5 26		sbc $26				sbc 	zTemp1
.2bcf	b0 3a		bcs $2c0b			bcs 	_VALIndex
.2bd1	a5 09		lda $09				lda 	IFR0+IM1  					; sanity check
.2bd3	c9 40		cmp #$40			cmp 	#$40
.2bd5	b0 34		bcs $2c0b			bcs 	_VALIndex
.2bd7	06 08		asl $08				asl 	IFR0+IM0 					; index x 2 (has sub arrays) x 4 (is data)
.2bd9	26 09		rol $09				rol 	IFR0+IM1
.2bdb	fa		plx				plx 								; get msb of size -> X
.2bdc	30 04		bmi $2be2			bmi 	_VARNotX4 					; if bit 15 set its an array of pointers so x 2
.2bde	06 08		asl $08				asl 	IFR0+IM0
.2be0	26 09		rol $09				rol 	IFR0+IM1
.2be2					_VARNotX4:
.2be2	18		clc				clc 								; add the two for the size bytes
.2be3	a5 08		lda $08				lda 	IFR0+IM0
.2be5	69 02		adc #$02			adc 	#2
.2be7	85 08		sta $08				sta 	IFR0+IM0
.2be9	90 02		bcc $2bed			bcc 	_VARNoCarry1
.2beb	e6 09		inc $09				inc 	IFR0+IM1
.2bed					_VARNoCarry1:
.2bed	18		clc				clc 								; calculate the element address and push to stack.
.2bee	a5 08		lda $08				lda 	IFR0+IM0
.2bf0	65 24		adc $24				adc 	zTemp0
.2bf2	48		pha				pha
.2bf3	a5 09		lda $09				lda 	IFR0+IM1
.2bf5	65 25		adc $25				adc 	zTemp0+1
.2bf7	e0 00		cpx #$00			cpx 	#0 							; do we have a sub level ?
.2bf9	30 04		bmi $2bff			bmi 	_VARHasSubLevel
.2bfb	aa		tax				tax 								; address in XA
.2bfc	68		pla				pla
.2bfd	7a		ply				ply 								; restore Y and exit
.2bfe	60		rts				rts
.2bff					_VARHasSubLevel:
.2bff	aa		tax				tax 								; get link address in XA
.2c00	68		pla				pla
.2c01	7a		ply				ply 								; restore code position.
.2c02	48		pha				pha
.2c03	20 d8 28	jsr $28d8			jsr 	ERRCheckComma 				; comma required.
.2c06	68		pla				pla
.2c07	20 a6 2b	jsr $2ba6			jsr 	VARArrayLookup 				; call it recursively
.2c0a	60		rts				rts
.2c0b					_VALIndex:
.2c0b	4c d3 27	jmp $27d3		jmp	ErrorV_index

;******  Return to file: include.files


;******  Processing file: src/variables/create.asm

.2c0e					VARCreate:
.2c0e	5a		phy				phy
.2c0f	a9 09		lda #$09			lda 	#9 							; create 9 bytes of space
.2c11	a2 00		ldx #$00			ldx 	#0
.2c13	20 61 10	jsr $1061			jsr 	AllocateMemory
.2c16	85 26		sta $26				sta 	zTemp1 						; save new address in zTemp1
.2c18	86 27		stx $27				stx 	zTemp1+1
.2c1a	a0 02		ldy #$02			ldy 	#2 							; put hash into +2
.2c1c	ad 30 06	lda $0630			lda 	VARHash
.2c1f	91 26		sta ($26),y			sta 	(zTemp1),y
.2c21	c8		iny				iny 								; put address of name into +3,+4
.2c22	ad 2e 06	lda $062e			lda 	VARNameAddress
.2c25	91 26		sta ($26),y			sta 	(zTemp1),y
.2c27	c8		iny				iny
.2c28	ad 2f 06	lda $062f			lda 	VARNameAddress+1
.2c2b	91 26		sta ($26),y			sta 	(zTemp1),y
.2c2d	ad 31 06	lda $0631			lda 	VARType
.2c30	29 01		and #$01			and 	#1
.2c32	f0 06		beq $2c3a			beq 	_CVNotString
.2c34	a0 08		ldy #$08			ldy 	#5+3
.2c36	a9 80		lda #$80			lda 	#$80
.2c38	91 26		sta ($26),y			sta 	(zTemp1),y
.2c3a					_CVNotString:
.2c3a	ad 52 06	lda $0652			lda 	VARHashEntry 				; hash table ptr -> zTemp0
.2c3d	85 24		sta $24				sta 	zTemp0
.2c3f	ad 53 06	lda $0653			lda 	VARHashEntry+1
.2c42	85 25		sta $25				sta 	zTemp0+1
.2c44	a0 01		ldy #$01			ldy 	#1 							; put current head into link.
.2c46	b2 24		lda ($24)			lda 	(zTemp0)
.2c48	92 26		sta ($26)			sta 	(zTemp1)
.2c4a	b1 24		lda ($24),y			lda 	(zTemp0),y
.2c4c	91 26		sta ($26),y			sta 	(zTemp1),y
.2c4e	a5 26		lda $26				lda 	zTemp1 						; address of the new record into head
.2c50	92 24		sta ($24)			sta 	(zTemp0)
.2c52	a5 27		lda $27				lda 	zTemp1+1
.2c54	91 24		sta ($24),y			sta 	(zTemp0),y
.2c56	a5 26		lda $26				lda 	zTemp1 						; new record to XA
.2c58	a6 27		ldx $27				ldx 	zTemp1+1
.2c5a	18		clc				clc 								; add 5 to point to the data.
.2c5b	69 05		adc #$05			adc 	#5
.2c5d	90 01		bcc $2c60			bcc 	_VCNoCarry
.2c5f	e8		inx				inx
.2c60					_VCNoCarry:
.2c60	7a		ply				ply
.2c61	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/find.asm

.2c62					VARFind:
.2c62	5a		phy				phy
.2c63	a0 01		ldy #$01			ldy 	#1 							; get first link -> zTemp1
.2c65	b1 24		lda ($24),y			lda 	(zTemp0),y
.2c67	85 27		sta $27				sta 	zTemp1+1
.2c69	f0 1c		beq $2c87			beq 	_VFExitFail 				; first link is 00xx, so nothing in that list.
.2c6b	b2 24		lda ($24)			lda 	(zTemp0)
.2c6d	85 26		sta $26				sta 	zTemp1
.2c6f					_VFLoop:
.2c6f	a0 02		ldy #$02			ldy 	#2 							; check hashes match
.2c71	b1 26		lda ($26),y			lda 	(zTemp1),y
.2c73	cd 30 06	cmp $0630			cmp 	VARHash
.2c76	f0 12		beq $2c8a			beq 	_VFHashesMatch 				; if so, check the name.
.2c78					_VFNext:
.2c78	b2 26		lda ($26)			lda 	(zTemp1) 					; next link to AX
.2c7a	aa		tax				tax
.2c7b	a0 01		ldy #$01			ldy 	#1
.2c7d	b1 26		lda ($26),y			lda 	(zTemp1),y
.2c7f	85 27		sta $27				sta 	zTemp1+1
.2c81	86 26		stx $26				stx 	zTemp1
.2c83	c9 00		cmp #$00			cmp 	#0 							; if msb non zero, try again
.2c85	d0 e8		bne $2c6f			bne 	_VFLoop
.2c87					_VFExitFail:
.2c87	7a		ply				ply
.2c88	18		clc				clc
.2c89	60		rts				rts
.2c8a					_VFHashesMatch:
.2c8a	a0 03		ldy #$03			ldy 	#3 							; get address of name -> zTemp2
.2c8c	b1 26		lda ($26),y			lda 	(zTemp1),y
.2c8e	85 28		sta $28				sta 	zTemp2
.2c90	c8		iny				iny
.2c91	b1 26		lda ($26),y			lda 	(zTemp1),y
.2c93	85 29		sta $29				sta 	zTemp2+1
.2c95	a0 ff		ldy #$ff			ldy 	#$FF 						; now compare
.2c97					_VFNameCompLoop:
.2c97	c8		iny				iny 								; char at a time
.2c98	b9 32 06	lda $0632,y			lda 	VARBuffer,y
.2c9b	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.2c9d	d0 d9		bne $2c78			bne 	_VFNext						; next entry if different.
.2c9f	c9 7c		cmp #$7c			cmp 	#$7C
.2ca1	90 f4		bcc $2c97			bcc 	_VFNameCompLoop 			; until done the whole lot.
.2ca3	18		clc				clc
.2ca4	a5 26		lda $26				lda 	zTemp1
.2ca6	a6 27		ldx $27				ldx 	zTemp1+1
.2ca8	69 05		adc #$05			adc 	#5
.2caa	90 01		bcc $2cad			bcc 	_VFNNoCarry
.2cac	e8		inx				inx
.2cad					_VFNNoCarry:
.2cad	7a		ply				ply
.2cae	38		sec				sec
.2caf	60		rts				rts

;******  Return to file: include.files


;******  Processing file: src/variables/info.asm

.2cb0					VARGetInfo:
.2cb0	98		tya				tya 								; calculate the address of the identifier start.
.2cb1	18		clc				clc
.2cb2	65 18		adc $18				adc 	codePtr
.2cb4	8d 2e 06	sta $062e			sta 	VARNameAddress
.2cb7	a5 19		lda $19				lda 	codePtr+1
.2cb9	69 00		adc #$00			adc 	#0
.2cbb	8d 2f 06	sta $062f			sta 	VARNameAddress+1
.2cbe	9c 30 06	stz $0630			stz 	VARHash
.2cc1	a2 00		ldx #$00			ldx 	#0
.2cc3					_VARCopyName:
.2cc3	18		clc				clc 								; update the sum hash.
.2cc4	ad 30 06	lda $0630			lda 	VARHash
.2cc7	71 18		adc ($18),y			adc 	(codePtr),y
.2cc9	8d 30 06	sta $0630			sta 	VARHash
.2ccc	b1 18		lda ($18),y			lda 	(codePtr),y 				; get character and save it in buffer
.2cce	c8		iny				iny
.2ccf	9d 32 06	sta $0632,x			sta 	VARBuffer,x
.2cd2	e8		inx				inx
.2cd3	c9 7c		cmp #$7c			cmp 	#$7C 						; until copied the type byte
.2cd5	90 ec		bcc $2cc3			bcc 	_VARCopyName
.2cd7	8d 31 06	sta $0631			sta 	VARType 					; save type byte
.2cda	29 03		and #$03			and 	#3 							; type is 0-3
.2cdc	0a		asl a				asl 	a
.2cdd	0a		asl a				asl 	a
.2cde	85 24		sta $24				sta 	zTemp0
.2ce0	ad 30 06	lda $0630			lda 	VARHash 					; force into range of hash entries per type.
.2ce3	29 03		and #$03			and		#(VARHashEntriesPerType-1)
.2ce5	65 24		adc $24				adc 	zTemp0 						; index of hash table
.2ce7	0a		asl a				asl 	a 							; offset as 2 bytes / word.
.2ce8	69 54		adc #$54			adc 	#VARHashTables & $FF 		; address of hash table start to zTemp0 & VARHashEntry
.2cea	85 24		sta $24				sta 	zTemp0
.2cec	8d 52 06	sta $0652			sta 	VARHashEntry
.2cef	a9 06		lda #$06			lda 	#VARHashTables >> 8
.2cf1	69 00		adc #$00			adc 	#0
.2cf3	85 25		sta $25				sta 	zTemp0+1
.2cf5	8d 53 06	sta $0653			sta 	VARHashEntry+1
.2cf8	60		rts				rts
.2cf9					VARClearHashTables:
.2cf9	a2 00		ldx #$00			ldx 	#0
.2cfb					_VCHRLoop:
.2cfb	a9 00		lda #$00			lda 	#0
.2cfd	9d 54 06	sta $0654,x			sta 	VARHashTables,x
.2d00	e8		inx				inx
.2d01	e0 20		cpx #$20			cpx 	#VARHashEntriesPerType*4*2
.2d03	d0 f6		bne $2cfb			bne 	_VCHRLoop
.2d05	60		rts				rts
.062e					VARNameAddress:
>062e							.fill 	2
.0630					VARHash:
>0630							.fill 	1
.0631					VARType:
>0631							.fill 	1
.0632					VARBuffer:
>0632							.fill 	32
.0652					VARHashEntry:
>0652							.fill 	2
=4					VARHashEntriesPerType = 4 					; hash entries for each of the 4 types.
.0654					VARHashTables:
>0654							.fill 	VARHashEntriesPerType*4*2

;******  Return to file: include.files


;******  Processing file: src/variables/variables.asm

.2d06					VARCheckSimple:
.2d06	aa		tax				tax 								; save in X
.2d07	b1 18		lda ($18),y			lda 	(codePtr),y
.2d09	c9 7c		cmp #$7c			cmp 	#$7C
.2d0b	d0 15		bne $2d22			bne 	_VCSComplex
.2d0d	c8		iny				iny 								; consume the second byte, the type.
.2d0e	8a		txa				txa  								; character (40-7F) x 4
.2d0f	0a		asl a				asl 	a
.2d10	0a		asl a				asl  	a
.2d11	18		clc				clc
.2d12	69 74		adc #$74			adc 	#FastVariables & $FF
.2d14	85 08		sta $08				sta 	IFR0+IM0
.2d16	a9 06		lda #$06			lda 	#FastVariables >> 8
.2d18	69 00		adc #$00			adc 	#0
.2d1a	85 09		sta $09				sta 	IFR0+IM1
.2d1c	64 0a		stz $0a				stz 	IFR0+IM2
.2d1e	64 0b		stz $0b				stz 	IFR0+IExp
.2d20	38		sec				sec 								; it's a reference
.2d21	60		rts				rts
.2d22					_VCSComplex:
.2d22	88		dey				dey	 								; extract information.
.2d23	20 b0 2c	jsr $2cb0			jsr 	VARGetInfo
.2d26	20 62 2c	jsr $2c62			jsr 	VARFind 					; search for variable
.2d29	b0 0a		bcs $2d35			bcs 	_VCSHaveVariable
.2d2b	ad 31 06	lda $0631			lda 	VARType 					; error if arrays, cannot autocreate
.2d2e	29 02		and #$02			and 	#2
.2d30	d0 25		bne $2d57			bne 	_VCNoCreate
.2d32	20 0e 2c	jsr $2c0e			jsr 	VARCreate 					; create variable
.2d35					_VCSHaveVariable:
.2d35	48		pha				pha 								; save LSB on the stack
.2d36	ad 31 06	lda $0631			lda 	VARType 					; get var type, and shift bit 1 into carry
.2d39	6a		ror a				ror 	a
.2d3a	6a		ror a				ror 	a
.2d3b	68		pla				pla 								; restore LSB
.2d3c	90 08		bcc $2d46			bcc 	_VCSNotArray 				; skip if not an array
.2d3e	20 a6 2b	jsr $2ba6			jsr 	VARArrayLookup 				; look for subscripts.
.2d41	48		pha				pha 								; check )
.2d42	20 d0 28	jsr $28d0			jsr 	ERRCheckRParen
.2d45	68		pla				pla
.2d46					_VCSNotArray:
.2d46	86 09		stx $09				stx 	IFR0+IM1 					; save address
.2d48	85 08		sta $08				sta 	IFR0+IM0
.2d4a	64 0a		stz $0a				stz 	IFR0+IM2 					; clear the unused byte.
.2d4c	ad 31 06	lda $0631			lda 	VARType 					; number/string bit into carry
.2d4f	6a		ror a				ror 	a
.2d50	a9 00		lda #$00			lda 	#0
.2d52	6a		ror a				ror 	a 							; now $00 or $80
.2d53	85 0b		sta $0b				sta 	IFR0+IExp
.2d55	38		sec				sec 								; it's a reference
.2d56	60		rts				rts
.2d57					_VCNoCreate:
.2d57	4c f9 27	jmp $27f9		jmp	ErrorV_uninitialised
.0674					FastVariables:
>0674							.fill	26*4

;******  Return to file: include.files


;******  Return to file: basic.asm


;******  Processing file: build/libmathslib.asmlib

=0					IM0 = 0 									; offsets in 4 byte records
=1					IM1 = 1
=2					IM2 = 2
=3					IExp = 3
=$3f					IFXMask = $3F 								; mask out the exponent
=$40					IFSign = $40 								; sign bit.
.2d5a					IFInitialise:
.2d5a	9c e4 06	stz $06e4			stz 	IFStackIndex 				; reset the internal stack.
.2d5d	60		rts				rts
.2d5e					IFloatSubtract:
.2d5e	da		phx				phx
.2d5f	a2 08		ldx #$08			ldx 	#IFR0
.2d61	20 78 33	jsr $3378			jsr 	IFloatNegate 				; negate R0 and fall through to add.
.2d64	fa		plx				plx
.2d65					IFloatAdd:
.2d65	b5 03		lda $03,x			lda 	IExp,x 						; check if both exponents are zero.
.2d67	05 0b		ora $0b				ora 	IFR0+IExp
.2d69	29 3f		and #$3f			and 	#IFXMask 					; if not, then we have to do the
.2d6b	d0 4e		bne $2dbb			bne 	_IFloatAddDecimals 			; floating point version.
.2d6d					_IFAddSubMantissa:
.2d6d	b5 03		lda $03,x			lda 	IExp,x 						; are the signs different ?
.2d6f	45 0b		eor $0b				eor 	IFR0+IExp
.2d71	29 40		and #$40			and 	#IFSign
.2d73	d0 21		bne $2d96			bne 	_IFloatSubMantissa			; if so, we do a subtract
.2d75	18		clc				clc 								; do the actual addition
.2d76	a5 08		lda $08				lda 	IFR0+IM0
.2d78	75 00		adc $00,x			adc 		IM0,x
.2d7a	85 08		sta $08				sta 	IFR0+IM0
.2d7c	a5 09		lda $09				lda 	IFR0+IM1
.2d7e	75 01		adc $01,x			adc 		IM1,x
.2d80	85 09		sta $09				sta 	IFR0+IM1
.2d82	a5 0a		lda $0a				lda 	IFR0+IM2
.2d84	75 02		adc $02,x			adc 		IM2,x
.2d86	85 0a		sta $0a				sta 	IFR0+IM2
.2d88	10 29		bpl $2db3			bpl 	_IFloatAddExit 				; if no carry through to bit 23, then exit.
.2d8a	a2 08		ldx #$08			ldx 	#IFR0						; shift R0 right, divide by 2
.2d8c	20 9c 33	jsr $339c			jsr 	IFloatShiftRight 			; we are now in decimals mode.
.2d8f	20 c6 33	jsr $33c6			jsr 	IFloatIncExponent
.2d92	d0 1f		bne $2db3			bne 	_IFloatAddExit
.2d94	38		sec				sec 								; overflowed numerically.
.2d95	60		rts				rts
.2d96					_IFloatSubMantissa:
.2d96	38		sec				sec 								; do the subtraction R0-Rx
.2d97	a5 08		lda $08				lda 	IFR0+IM0
.2d99	f5 00		sbc $00,x			sbc 		IM0,x
.2d9b	85 08		sta $08				sta 	IFR0+IM0
.2d9d	a5 09		lda $09				lda 	IFR0+IM1
.2d9f	f5 01		sbc $01,x			sbc 		IM1,x
.2da1	85 09		sta $09				sta 	IFR0+IM1
.2da3	a5 0a		lda $0a				lda 	IFR0+IM2
.2da5	f5 02		sbc $02,x			sbc 		IM2,x
.2da7	85 0a		sta $0a				sta 	IFR0+IM2
.2da9	b0 08		bcs $2db3			bcs 	_IFloatAddExit 				; no borrow so we are done.
.2dab	a2 08		ldx #$08			ldx 	#IFR0
.2dad	20 80 33	jsr $3380			jsr 	IFloatMantissaNegate 		; 2's complement negate the mantissa
.2db0	20 78 33	jsr $3378			jsr 	IFloatNegate 				; negate the result using sign bit.
.2db3					_IFloatAddExit:
.2db3	18		clc				clc
.2db4	60		rts				rts
.2db5					_IFloatZeroAdd:
.2db5	fa		plx				plx 								; return this value in R0
.2db6	20 fe 32	jsr $32fe			jsr 	IFloatCopyFromRegister
.2db9	18		clc				clc
.2dba	60		rts				rts
.2dbb					_IFloatAddDecimals:
.2dbb	20 66 33	jsr $3366			jsr		IFloatCheckZero 			; if RX = 0 then exit with R0
.2dbe	f0 f3		beq $2db3			beq 	_IFloatAddExit
.2dc0	20 a4 33	jsr $33a4			jsr 	IFloatNormalise 			; normalise RX
.2dc3	da		phx				phx 								; normalise R0
.2dc4	a2 08		ldx #$08			ldx 	#IFR0
.2dc6	20 66 33	jsr $3366			jsr 	IFloatCheckZero
.2dc9	f0 ea		beq $2db5			beq 	_IFloatZeroAdd 				; normalised R0 is zero, return RX.
.2dcb	20 a4 33	jsr $33a4			jsr 	IFloatNormalise
.2dce	fa		plx				plx
.2dcf	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the exponent of R0
.2dd1	29 3f		and #$3f			and 	#IFXMask
.2dd3	38		sec				sec
.2dd4	e9 20		sbc #$20			sbc 	#$20 						; map 20..3F..00..1F to 00..0F..E0..FF e.g. scaled unsigned
.2dd6	85 20		sta $20				sta 	iTemp0
.2dd8	b5 03		lda $03,x			lda 	IExp,x 						; repeat for exponent of Rx
.2dda	29 3f		and #$3f			and 	#IFXMask
.2ddc	38		sec				sec
.2ddd	e9 20		sbc #$20			sbc 	#$20
.2ddf	c5 20		cmp $20				cmp 	iTemp0 						; get the larger adjusted
.2de1	b0 02		bcs $2de5			bcs 	_IFloatHaveLarger
.2de3	a5 20		lda $20				lda 	iTemp0
.2de5					_IFloatHaveLarger:
.2de5	18		clc				clc 								; get the actual one back.
.2de6	69 20		adc #$20			adc 	#$20 						; shift both to that.
.2de8	20 f5 2d	jsr $2df5			jsr 	_IFShiftXToA
.2deb	da		phx				phx
.2dec	a2 08		ldx #$08			ldx 	#IFR0
.2dee	20 f5 2d	jsr $2df5			jsr 	_IFShiftXToA
.2df1	fa		plx				plx
.2df2	4c 6d 2d	jmp $2d6d			jmp 	_IFAddSubMantissa 			; do the adding bit.
.2df5					_IFShiftXToA:
.2df5	8d dc 06	sta $06dc			sta 	IFTarget
.2df8	20 66 33	jsr $3366			jsr 	IFloatCheckZero 			; check adding zero ?
.2dfb	f0 11		beq $2e0e			beq 	_IFSXExit
.2dfd					_IFSXLoop:
.2dfd	b5 03		lda $03,x			lda 	IExp,x 	 					; shifted to the right level yet ?
.2dff	29 3f		and #$3f			and 	#IFXMask
.2e01	cd dc 06	cmp $06dc			cmp 	IFTarget
.2e04	f0 08		beq $2e0e			beq 	_IFSXExit
.2e06	20 9c 33	jsr $339c			jsr 	IFloatShiftRight
.2e09	20 c6 33	jsr $33c6			jsr 	IFloatIncExponent
.2e0c	80 ef		bra $2dfd			bra 	_IFSXLoop
.2e0e					_IFSXExit:
.2e0e	60		rts				rts
.06dc					IFTarget:
>06dc							.fill 	1
.2e0f					IFloatMultiply:
.2e0f	8e dc 06	stx $06dc			stx 	IFTarget 					; save the multiplier (RX) which is "adder"
.2e12	20 c7 2e	jsr $2ec7			jsr 	IFCalculateNewSign
.2e15	b5 03		lda $03,x			lda 	IExp,x 						; check two positive 8 bit integers
.2e17	05 0b		ora $0b				ora 	IFR0+IExp
.2e19	29 3f		and #$3f			and 	#IFXMask
.2e1b	15 01		ora $01,x			ora 	IM1,x
.2e1d	05 09		ora $09				ora 	IFR0+IM1
.2e1f	15 02		ora $02,x			ora 	IM2,x
.2e21	05 0a		ora $0a				ora 	IFR0+IM2
.2e23	d0 0a		bne $2e2f			bne 	_IFMStandard
.2e25	20 49 33	jsr $3349			jsr 	IFloatMultiply8BitRx 		; we have a special routine for this.
.2e28	ad de 06	lda $06de			lda 	IFNewSign
.2e2b	85 0b		sta $0b				sta 	IFR0+IExp
.2e2d	18		clc				clc
.2e2e	60		rts				rts
.2e2f					_IFMStandard:
.2e2f	b5 03		lda $03,x			lda 	IExp,x 						; add the two exponents sign extended
.2e31	20 be 2e	jsr $2ebe			jsr 	IFMSignExtend
.2e34	8d dd 06	sta $06dd			sta 	IFNewExponent
.2e37	a5 0b		lda $0b				lda 	IFR0+IExp
.2e39	20 be 2e	jsr $2ebe			jsr 	IFMSignExtend
.2e3c	18		clc				clc
.2e3d	6d dd 06	adc $06dd			adc 	IFNewExponent
.2e40	8d dd 06	sta $06dd			sta 	IFNewExponent
.2e43	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy R0 to RTemp which is "shifter"
.2e45	20 0f 33	jsr $330f			jsr 	IFloatCopyToRegister
.2e48	a2 08		ldx #$08			ldx 	#IFR0 						; zero R0 (the result)
.2e4a	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.2e4d					_IFMLoop:
.2e4d	a2 14		ldx #$14			ldx 	#IFRTemp
.2e4f	20 66 33	jsr $3366			jsr 	IFloatCheckZero
.2e52	f0 3a		beq $2e8e			beq 	_IFMExit
.2e54	ae dc 06	ldx $06dc			ldx 	IFTarget 					; look at adder MSB
.2e57	b5 02		lda $02,x			lda 	IM2,x 						; if it is set we need to shift everything
.2e59	10 03		bpl $2e5e			bpl	 	_IFMTargetOkay
.2e5b	20 af 2e	jsr $2eaf			jsr 	_IFMShiftAll
.2e5e					_IFMTargetOkay:
.2e5e	a5 14		lda $14				lda 	IFRTemp+0 					; is bit 0 of the shifter (RTemp) set
.2e60	29 01		and #$01			and 	#1
.2e62	f0 16		beq $2e7a			beq 	_IFMNoAdd
.2e64	ae dc 06	ldx $06dc			ldx 	IFTarget 					; add adder
.2e67	18		clc				clc
.2e68	a5 08		lda $08				lda 	IFR0+IM0
.2e6a	75 00		adc $00,x			adc 		IM0,x
.2e6c	85 08		sta $08				sta 	IFR0+IM0
.2e6e	a5 09		lda $09				lda 	IFR0+IM1
.2e70	75 01		adc $01,x			adc 		IM1,x
.2e72	85 09		sta $09				sta 	IFR0+IM1
.2e74	a5 0a		lda $0a				lda 	IFR0+IM2
.2e76	75 02		adc $02,x			adc 		IM2,x
.2e78	85 0a		sta $0a				sta 	IFR0+IM2
.2e7a					_IFMNoAdd:
.2e7a	a5 0a		lda $0a				lda 	IFR0+IM2
.2e7c	10 03		bpl $2e81			bpl 	_IFMResultOkay
.2e7e	20 af 2e	jsr $2eaf			jsr 	_IFMShiftAll
.2e81					_IFMResultOkay:
.2e81	a2 14		ldx #$14			ldx 	#IFRTemp
.2e83	20 9c 33	jsr $339c			jsr 	IFloatShiftRight
.2e86	ae dc 06	ldx $06dc			ldx 	IFTarget
.2e89	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.2e8c	80 bf		bra $2e4d			bra 	_IFMLoop
.2e8e					_IFMExit:
.2e8e	ad dd 06	lda $06dd			lda 	IFNewExponent 				; validate new exponent.
.2e91	c9 20		cmp #$20			cmp 	#$20 						; valid exponent 00-1F E0-FF
.2e93	90 0f		bcc $2ea4			bcc 	_IFMOkay
.2e95	c9 e0		cmp #$e0			cmp 	#$E0
.2e97	b0 0b		bcs $2ea4			bcs 	_IFMOkay
.2e99	29 80		and #$80			and 	#$80 						; if +ve exponent then error overflow.
.2e9b	f0 10		beq $2ead			beq 	_IFMError
.2e9d	a2 08		ldx #$08			ldx 	#IFR0 						; return zero underflow
.2e9f	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.2ea2	18		clc				clc
.2ea3	60		rts				rts
.2ea4					_IFMOkay:
.2ea4	29 3f		and #$3f			and 	#IFXMask 					; work out exponent + sign and exit
.2ea6	0d de 06	ora $06de			ora 	IFNewSign
.2ea9	85 0b		sta $0b				sta 	IFR0+IExp
.2eab	18		clc				clc
.2eac	60		rts				rts
.2ead					_IFMError:
.2ead	38		sec				sec
.2eae	60		rts				rts
.2eaf					_IFMShiftAll:
.2eaf	a2 08		ldx #$08			ldx 	#IFR0
.2eb1	20 9c 33	jsr $339c			jsr 	IFloatShiftRight
.2eb4	ae dc 06	ldx $06dc			ldx 	IFTarget
.2eb7	20 9c 33	jsr $339c			jsr 	IFloatShiftRight
.2eba	ee dd 06	inc $06dd			inc 	IFNewExponent
.2ebd	60		rts				rts
.2ebe					IFMSignExtend:
.2ebe	29 3f		and #$3f			and 	#IFXMask
.2ec0	c9 1f		cmp #$1f			cmp 	#(IFXMask >> 1)
.2ec2	90 02		bcc $2ec6			bcc 	_IFMNoSXX
.2ec4	09 c0		ora #$c0			ora 	#IFXMask ^ $FF
.2ec6					_IFMNoSXX:
.2ec6	60		rts				rts
.2ec7					IFCalculateNewSign:
.2ec7	b5 03		lda $03,x			lda 	IExp,x
.2ec9	45 0b		eor $0b				eor 	IFR0+IExp
.2ecb	29 40		and #$40			and 	#IFSign
.2ecd	8d de 06	sta $06de			sta 	IFNewSign
.2ed0	60		rts				rts
.06dd					IFNewExponent:
>06dd							.fill 	1
.06de					IFNewSign:
>06de							.fill 	1
.2ed1					IFloatDivideInteger:
.2ed1	20 ea 2e	jsr $2eea			jsr 	IFloatDivideIntegerCommon 	; do the common code.
.2ed4	b0 06		bcs $2edc			bcs 	_IFDIExit
.2ed6	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy result from register.
.2ed8	20 fe 32	jsr $32fe			jsr 	IFloatCopyFromRegister
.2edb	18		clc				clc
.2edc					_IFDIExit:
.2edc	60		rts				rts
.2edd					IFloatModulusInteger:
.2edd	20 ea 2e	jsr $2eea			jsr 	IFloatDivideIntegerCommon
.2ee0	b0 07		bcs $2ee9			bcs 	_IFMIExit
.2ee2	ae dc 06	ldx $06dc			ldx 	IFTarget
.2ee5	20 fe 32	jsr $32fe			jsr 	IFloatCopyFromRegister
.2ee8	18		clc				clc
.2ee9					_IFMIExit:
.2ee9	60		rts				rts
.2eea					IFloatDivideIntegerCommon:
.2eea	8e dc 06	stx $06dc			stx 	IFTarget  					; this is s1, s0 = R0
.2eed	20 c7 2e	jsr $2ec7			jsr 	IFCalculateNewSign 			; calculate sign of result
.2ef0	20 18 2f	jsr $2f18			jsr 	IFDCopyRXToRTemp 			; copy S1 to RTemp
.2ef3	a2 08		ldx #$08			ldx 	#IFR0 						; check divide by zero
.2ef5	20 66 33	jsr $3366			jsr 	IFloatCheckZero
.2ef8	f0 1c		beq $2f16			beq 	_IFDIDivZero
.2efa	ae dc 06	ldx $06dc			ldx 	IFTarget 					; zero Rx (S1)
.2efd	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.2f00	5a		phy				phy
.2f01	a0 18		ldy #$18			ldy 	#24
.2f03					_IFDILoop:
.2f03	20 29 2f	jsr $2f29			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.2f06	20 35 2f	jsr $2f35			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.2f09	88		dey				dey
.2f0a	d0 f7		bne $2f03			bne 	_IFDILoop 					; do it 24 times
.2f0c	7a		ply				ply
.2f0d	ad de 06	lda $06de			lda 	IFNewSign 					; set sign of result.
.2f10	29 40		and #$40			and 	#IFSign
.2f12	85 17		sta $17				sta 	IFRTemp+IExp
.2f14	18		clc				clc 								; is okay.
.2f15	60		rts				rts
.2f16					_IFDIDivZero:
.2f16	38		sec				sec
.2f17	60		rts				rts
.2f18					IFDCopyRXToRTemp:
.2f18	b5 00		lda $00,x			lda 	IM0,x
.2f1a	85 14		sta $14				sta 	IFRTemp+IM0
.2f1c	b5 01		lda $01,x			lda 	IM1,x
.2f1e	85 15		sta $15				sta 	IFRTemp+IM1
.2f20	b5 02		lda $02,x			lda 	IM2,x
.2f22	85 16		sta $16				sta 	IFRTemp+IM2
.2f24	b5 03		lda $03,x			lda 	IExp,x
.2f26	85 17		sta $17				sta 	IFRTemp+IExp
.2f28	60		rts				rts
.2f29					IFDShiftSTempS1Left:
.2f29	a2 14		ldx #$14			ldx 	#IFRTemp
.2f2b	20 94 33	jsr $3394			jsr 	IFloatShiftLeft
.2f2e	ae dc 06	ldx $06dc			ldx 	IFTarget
.2f31	20 95 33	jsr $3395			jsr 	IFloatRotateLeft
.2f34	60		rts				rts
.2f35					IFDTrySubtract:
.2f35	ae dc 06	ldx $06dc			ldx 	IFTarget 					; s1 = Rx
.2f38	38		sec				sec 								; subtract, saving the results on the stack.
.2f39	b5 00		lda $00,x			lda 	IM0,x
.2f3b	e5 08		sbc $08				sbc 	IFR0+IM0
.2f3d	48		pha				pha
.2f3e	b5 01		lda $01,x			lda 	IM1,x
.2f40	e5 09		sbc $09				sbc 	IFR0+IM1
.2f42	48		pha				pha
.2f43	b5 02		lda $02,x			lda 	IM2,x
.2f45	e5 0a		sbc $0a				sbc 	IFR0+IM2
.2f47	b0 03		bcs $2f4c			bcs 	_IFDCanSubtract
.2f49	68		pla				pla 								; cannot subtract, so pop intermediate and exit.
.2f4a	68		pla				pla
.2f4b	60		rts				rts
.2f4c					_IFDCanSubtract:
.2f4c	95 02		sta $02,x			sta 	IM2,x 						; write back to S1.Mantissa
.2f4e	68		pla				pla
.2f4f	95 01		sta $01,x			sta 	IM1,x
.2f51	68		pla				pla
.2f52	95 00		sta $00,x			sta 	IM0,x
.2f54	e6 14		inc $14				inc 	IFRTemp+IM0 				; increment temp
.2f56	d0 06		bne $2f5e			bne 	_IFDCSExit
.2f58	e6 15		inc $15				inc 	IFRTemp+IM1
.2f5a	d0 02		bne $2f5e			bne 	_IFDCSExit
.2f5c	e6 16		inc $16				inc 	IFRTemp+IM2
.2f5e					_IFDCSExit:
.2f5e	60		rts				rts
.2f5f					IFloatBitwiseAnd:
.2f5f	5a		phy				phy
.2f60	20 a4 2f	jsr $2fa4			jsr 	IFPreProcessBitwise 		; set up everything.
.2f63	d0 0f		bne $2f74			bne 	_IFBAExit
.2f65					_IFBALoop:
.2f65	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2f68	35 00		and $00,x			and 	IM0,x
.2f6a	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2f6d	e8		inx				inx
.2f6e	c8		iny				iny
.2f6f	c0 03		cpy #$03			cpy 	#3
.2f71	d0 f2		bne $2f65			bne 	_IFBALoop
.2f73	18		clc				clc
.2f74					_IFBAExit:
.2f74	7a		ply				ply
.2f75	60		rts				rts
.2f76					IFloatBitwiseOr:
.2f76	5a		phy				phy
.2f77	20 a4 2f	jsr $2fa4			jsr 	IFPreProcessBitwise 		; set up everything.
.2f7a	d0 0f		bne $2f8b			bne 	_IFBAExit
.2f7c					_IFBALoop:
.2f7c	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2f7f	15 00		ora $00,x			ora 	IM0,x
.2f81	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2f84	e8		inx				inx
.2f85	c8		iny				iny
.2f86	c0 03		cpy #$03			cpy 	#3
.2f88	d0 f2		bne $2f7c			bne 	_IFBALoop
.2f8a	18		clc				clc
.2f8b					_IFBAExit:
.2f8b	7a		ply				ply
.2f8c	60		rts				rts
.2f8d					IFloatBitwiseXor:
.2f8d	5a		phy				phy
.2f8e	20 a4 2f	jsr $2fa4			jsr 	IFPreProcessBitwise 		; set up everything.
.2f91	d0 0f		bne $2fa2			bne 	_IFBAExit
.2f93					_IFBALoop:
.2f93	b9 08 00	lda $0008,y			lda 	IFR0+IM0,y
.2f96	55 00		eor $00,x			eor 	IM0,x
.2f98	99 08 00	sta $0008,y			sta 	IFR0+IM0,y
.2f9b	e8		inx				inx
.2f9c	c8		iny				iny
.2f9d	c0 03		cpy #$03			cpy 	#3
.2f9f	d0 f2		bne $2f93			bne 	_IFBALoop
.2fa1	18		clc				clc
.2fa2					_IFBAExit:
.2fa2	7a		ply				ply
.2fa3	60		rts				rts
.2fa4					IFPreProcessBitwise:
.2fa4	a0 00		ldy #$00			ldy 	#0 							; set index.
.2fa6	a5 0b		lda $0b				lda 	IFR0+IExp 					; OR exponents
.2fa8	15 03		ora $03,x			ora 	IExp,x
.2faa	74 03		stz $03,x			stz 	IExp,x 						; zero the result exponent anyway.
.2fac	29 3f		and #$3f			and 	#IFXMask 					; NZ if error e.g. not integer
.2fae	38		sec				sec 								; carry set just in cases.
.2faf	60		rts				rts
.2fb0					IFloatAbsoluteR0:
.2fb0	a5 0b		lda $0b				lda 	IFR0+IExp					; reset the sign bit.
.2fb2	29 bf		and #$bf			and 	#IFSign ^ 255
.2fb4	85 0b		sta $0b				sta 	IFR0+IExp
.2fb6	18		clc				clc
.2fb7	60		rts				rts
.2fb8					IFloatSquareRootR0:
.2fb8	a2 08		ldx #$08			ldx 	#IFR0 						; if zero, return zero.
.2fba	20 66 33	jsr $3366			jsr 	IFloatCheckZero
.2fbd	f0 2e		beq $2fed			beq 	_IFSRZero
.2fbf	a5 0b		lda $0b				lda	 	IFR0+IExp 					; if negative fail.
.2fc1	29 40		and #$40			and 	#IFSign
.2fc3	d0 2f		bne $2ff4			bne 	_IFSRFail
.2fc5	20 a4 33	jsr $33a4			jsr 	IFloatNormalise 			; it will work better !
.2fc8	a2 0c		ldx #$0c			ldx 	#IFR1 						; R1 contains original throughout
.2fca	20 0f 33	jsr $330f			jsr 	IFloatCopyToRegister
.2fcd	a5 0b		lda $0b				lda 	IFR0+IExp 					; if exponent is $2A..$3F * 64 otherwise is / 64
.2fcf	20 be 2e	jsr $2ebe			jsr 	IFMSignExtend 				; sign extended version of the exponent
.2fd2	18		clc				clc
.2fd3	69 17		adc #$17			adc 	#23 						; this makes it a 0.xxx mantissa
.2fd5	85 0b		sta $0b				sta 	IFR0+IExp
.2fd7	4a		lsr a				lsr 	a 							; which we can halve.
.2fd8	38		sec				sec 								; convert back
.2fd9	e9 17		sbc #$17			sbc 	#23
.2fdb	29 3f		and #$3f			and 	#IFXMask 					; make appropriate
.2fdd	85 0b		sta $0b				sta 	IFR0+IExp 					; to R0
.2fdf	20 f6 2f	jsr $2ff6			jsr 	_IFSRNewton
.2fe2	20 f6 2f	jsr $2ff6			jsr 	_IFSRNewton
.2fe5	20 f6 2f	jsr $2ff6			jsr 	_IFSRNewton
.2fe8	20 f6 2f	jsr $2ff6			jsr 	_IFSRNewton
.2feb	18		clc				clc
.2fec	60		rts				rts
.2fed					_IFSRZero:
.2fed	a2 08		ldx #$08			ldx 	#IFR0
.2fef	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.2ff2	18		clc				clc
.2ff3	60		rts				rts
.2ff4					_IFSRFail:
.2ff4	38		sec				sec
.2ff5	60		rts				rts
.2ff6					_IFSRNewton:
.2ff6	a2 0c		ldx #$0c			ldx 	#IFR1 						; push original value (R3) on the stack
.2ff8	20 bc 32	jsr $32bc			jsr 	IFloatPushRx
.2ffb	a2 08		ldx #$08			ldx 	#IFR0 						; push current guess (R0) on the stack.
.2ffd	20 bc 32	jsr $32bc			jsr 	IFloatPushRx
.3000	a2 0c		ldx #$0c			ldx 	#IFR1 						; guess = original / guess
.3002	20 91 30	jsr $3091			jsr 	IFloatDivideFloat
.3005	a2 0c		ldx #$0c			ldx 	#IFR1 						; restore current guess (was in R0) to R3
.3007	20 dd 32	jsr $32dd			jsr 	IFloatPullRx
.300a	20 65 2d	jsr $2d65			jsr 	IFloatAdd 					; now guess + original/guess
.300d	a2 08		ldx #$08			ldx 	#IFR0 						; divide by 2
.300f	20 9c 33	jsr $339c			jsr 	IFloatShiftRight
.3012	a2 0c		ldx #$0c			ldx 	#IFR1
.3014	20 dd 32	jsr $32dd			jsr 	IFloatPullRx 				; Finally pull the oeifinal
.3017	60		rts				rts
.3018					IFloatFractionalR0:
.3018	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.301a	29 3f		and #$3f			and 	#IFXMask
.301c	f0 17		beq $3035			beq 	_FIPZero 					; if so, return with zero as no fractional part.
.301e	20 b0 2f	jsr $2fb0			jsr 	IFloatAbsoluteR0 			; absolute value R0
.3021	a2 08		ldx #$08			ldx 	#IFR0
.3023	20 a4 33	jsr $33a4			jsr 	IFloatNormalise 			; normalise R0
.3026	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy to RTemp
.3028	20 0f 33	jsr $330f			jsr 	IFloatCopyToRegister
.302b	20 6e 30	jsr $306e			jsr 	IFloatIntegerR0 			; take integer part of R0
.302e	a2 14		ldx #$14			ldx 	#IFRTemp 					; subtract
.3030	20 5e 2d	jsr $2d5e			jsr 	IFloatSubtract
.3033	80 05		bra $303a			bra 	_FIPExit
.3035					_FIPZero:
.3035	a2 08		ldx #$08			ldx 	#IFR0
.3037	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.303a					_FIPExit:
.303a	18		clc				clc
.303b	60		rts				rts
.303c					IFloatCompare:
.303c	20 5e 2d	jsr $2d5e			jsr 	IFloatSubtract 				; subtract R0 from RX.
.303f	b5 03		lda $03,x			lda 	IExp,x 						; check if integer comparison
.3041	05 0b		ora $0b				ora 	IFR0+IExp
.3043	a2 08		ldx #$08			ldx 	#IFR0 						; only using R0 from now on.
.3045	29 3f		and #$3f			and 	#IFXMask
.3047	d0 19		bne $3062			bne 	_IFCNonInteger
.3049	20 66 33	jsr $3366			jsr 	IFloatCheckZero 			; check if zero
.304c	f0 0f		beq $305d			beq 	_IFCZero
.304e					_IFCReturnSign:
.304e	a5 0b		lda $0b				lda 	IFR0+IExp 					; get the sign bit/unused -> stack.
.3050	29 c0		and #$c0			and 	#(IFXMask ^ $FF)
.3052	48		pha				pha
.3053	a9 01		lda #$01			lda 	#1
.3055	20 6f 33	jsr $336f			jsr 	IFloatSetByte 				; return to +1
.3058	68		pla				pla 								; sign bit back
.3059	85 0b		sta $0b				sta 	IFR0+IExp					; set that sign
.305b	18		clc				clc
.305c	60		rts				rts
.305d					_IFCZero:
.305d	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.3060	18		clc				clc
.3061	60		rts				rts
.3062					_IFCNonInteger:
.3062	a5 08		lda $08				lda 	IFR0+IM0 	 				; can adjust what 'zero' means by changing the
.3064	29 00		and #$00			and		#$00 						; mask here to include bits from Mantissa.0
.3066	05 09		ora $09				ora 	IFR0+IM1
.3068	05 0a		ora $0a				ora 	IFR0+IM2
.306a	f0 f1		beq $305d			beq 	_IFCZero 					; near enough !
.306c	80 e0		bra $304e			bra 	_IFCReturnSign 				; return the sign of the difference.
.306e					IFloatIntegerR0:
.306e	a5 0b		lda $0b				lda 	IFR0+IExp					; is it integer already ?
.3070	29 3f		and #$3f			and 	#IFXMask
.3072	f0 1b		beq $308f			beq 	_FIPExit 					; if so do nothing
.3074	a2 08		ldx #$08			ldx 	#IFR0
.3076	20 a4 33	jsr $33a4			jsr 	IFloatNormalise 			; normalise
.3079	20 66 33	jsr $3366			jsr 	IFloatCheckZero 			; is it zero ?
.307c	f0 0e		beq $308c			beq 	_FIPZero 					; if so return zero.
.307e					_FIPShift:
.307e	a5 0b		lda $0b				lda 	IFR0+IExp 					; if Exponent >= 0 exit.
.3080	29 20		and #$20			and 	#$20 						; still -ve
.3082	f0 0b		beq $308f			beq 	_FIPExit
.3084	20 9c 33	jsr $339c			jsr 	IFloatShiftRight 			; shift mantissa right
.3087	20 c6 33	jsr $33c6			jsr 	IFloatIncExponent 			; bump exponent
.308a	80 f2		bra $307e			bra 	_FIPShift
.308c					_FIPZero:
.308c	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.308f					_FIPExit:
.308f	18		clc				clc
.3090	60		rts				rts
.3091					IFloatDivideFloat:
.3091	8e dc 06	stx $06dc			stx 	IFTarget  					; this is s1, s0 = R0
.3094	20 c7 2e	jsr $2ec7			jsr 	IFCalculateNewSign 			; calculate sign of result
.3097	20 a4 33	jsr $33a4			jsr 	IFloatNormalise 			; normalise RX
.309a	a2 08		ldx #$08			ldx 	#IFR0 						; normalise R0
.309c	20 a4 33	jsr $33a4			jsr 	IFloatNormalise
.309f	20 66 33	jsr $3366			jsr 	IFloatCheckZero
.30a2	f0 56		beq $30fa			beq 	_IFDFDivZero 				; exit if this normalised to zero.
.30a4	a5 0b		lda $0b				lda 	IFR0+IExp 					; calculate s0.exponent
.30a6	20 be 2e	jsr $2ebe			jsr 	IFMSignExtend
.30a9	8d dd 06	sta $06dd			sta 	IFNewExponent
.30ac	ae dc 06	ldx $06dc			ldx 	IFTarget 					; calculate s1.exponent
.30af	b5 03		lda $03,x			lda 	IExp,x
.30b1	20 be 2e	jsr $2ebe			jsr 	IFMSignExtend
.30b4	38		sec				sec
.30b5	ed dd 06	sbc $06dd			sbc 	IFNewExponent 				; s1.exponent - s0.exponent - 23
.30b8	38		sec				sec
.30b9	e9 17		sbc #$17			sbc 	#23
.30bb	8d dd 06	sta $06dd			sta 	IFNewExponent
.30be	20 fc 30	jsr $30fc			jsr 	IFloatDivideSupport 		; call the support routine (see maths.py)
.30c1	a5 16		lda $16				lda 	IFRTemp+IM2 				; result has overflowed ?
.30c3	10 08		bpl $30cd			bpl 	_IFDFNoShiftResult
.30c5	a2 14		ldx #$14			ldx 	#IFRTemp 					; if so, fix it up.
.30c7	20 9c 33	jsr $339c			jsr 	IFloatShiftRight
.30ca	ee dd 06	inc $06dd			inc 	IFNewExponent
.30cd					_IFDFNoShiftResult:
.30cd	ad dd 06	lda $06dd			lda 	IFNewExponent 				; underflow/overflow check.
.30d0	30 06		bmi $30d8			bmi 	_IFDFCheckUnderflow
.30d2	c9 20		cmp #$20			cmp 	#$20 						; overflow in division
.30d4	b0 24		bcs $30fa			bcs 	_IFDFDivZero
.30d6	80 11		bra $30e9			bra		_IFDFExit
.30d8					_IFDFCheckUnderflow:
.30d8	ad dd 06	lda $06dd			lda 	IFNewExponent 				; shift into a legal exponent.
.30db	c9 e0		cmp #$e0			cmp 	#$E0 						; if exponent < -32.
.30dd	b0 0a		bcs $30e9			bcs 	_IFDFExit
.30df	ee dd 06	inc $06dd			inc 	IFNewExponent
.30e2	a2 14		ldx #$14			ldx 	#IFRTemp
.30e4	20 9c 33	jsr $339c			jsr 	IFloatShiftRight
.30e7	80 ef		bra $30d8			bra 	_IFDFCheckUnderflow
.30e9					_IFDFExit:
.30e9	ad dd 06	lda $06dd			lda 	IFNewExponent 				; combine exponent and sign.
.30ec	29 3f		and #$3f			and 	#IFXMask
.30ee	0d de 06	ora $06de			ora 	IFNewSign
.30f1	85 17		sta $17				sta 	IFRTemp+IExp
.30f3	a2 14		ldx #$14			ldx 	#IFRTemp 					; copy RTemp to R0.
.30f5	20 fe 32	jsr $32fe			jsr 	IFloatCopyFromRegister
.30f8	18		clc				clc
.30f9	60		rts				rts
.30fa					_IFDFDivZero:
.30fa	38		sec				sec
.30fb	60		rts				rts
.30fc					IFloatDivideSupport:
.30fc	a2 14		ldx #$14			ldx 	#IFRTemp 					; zero RTemp
.30fe	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.3101	5a		phy				phy 								; main division loop x 23
.3102	a0 17		ldy #$17			ldy 	#23
.3104					_IFDSLoop:
.3104	20 35 2f	jsr $2f35			jsr 	IFDTrySubtract 				; do if s0 >= sx subtract code.
.3107	20 29 2f	jsr $2f29			jsr 	IFDShiftSTempS1Left 		; shift the 64 bit value sTemp,s1 left one bit.
.310a	88		dey				dey
.310b	d0 f7		bne $3104			bne 	_IFDSLoop 					; do it 24 times
.310d	7a		ply				ply
.310e	60		rts				rts
.310f					IFloatIntegerToStringR0:
.310f	8d df 06	sta $06df			sta 	IFBase 						; save base to use.
.3112	20 ee 33	jsr $33ee			jsr 	IFloatBufferReset			; empty buffer
.3115	a5 0b		lda $0b				lda 	IFR0+IExp					; check integer, cant't convert float
.3117	29 3f		and #$3f			and 	#IFXMask
.3119	d0 1d		bne $3138			bne 	_IFIFail
.311b	a2 08		ldx #$08			ldx 	#IFR0 						; skip - check if zero.
.311d	20 66 33	jsr $3366			jsr 	IFloatCheckZero
.3120	f0 0e		beq $3130			beq 	_IFINotNegative
.3122	a5 0b		lda $0b				lda 	IFR0+IExp 					; is signed ?
.3124	29 40		and #$40			and 	#IFSign
.3126	f0 08		beq $3130			beq 	_IFINotNegative
.3128	a9 2d		lda #$2d			lda 	#"-"						; output -
.312a	20 fd 33	jsr $33fd			jsr 	IFloatBufferWrite
.312d	20 78 33	jsr $3378			jsr 	IFloatNegate 				; negate the value, e.g. make it +ve.
.3130					_IFINotNegative:
.3130	20 3a 31	jsr $313a			jsr 	_IFIRecursiveConvert 		; start converting
.3133	20 f5 33	jsr $33f5			jsr 	IFloatGetBufferAddress 		; get the return address and exit
.3136	18		clc				clc
.3137	60		rts				rts
.3138					_IFIFail:
.3138	38		sec				sec
.3139	60		rts				rts
.313a					_IFIRecursiveConvert:
.313a	a2 0c		ldx #$0c			ldx 	#IFR1
.313c	20 0f 33	jsr $330f			jsr 	IFloatCopyToRegister 		; R0->R1
.313f	a2 08		ldx #$08			ldx 	#IFR0
.3141	ad df 06	lda $06df			lda 	IFBase 						; Base -> R0
.3144	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.3147	a2 0c		ldx #$0c			ldx 	#IFR1 						; R0 = R1 / R0
.3149	20 d1 2e	jsr $2ed1			jsr 	IFloatDivideInteger
.314c	a2 08		ldx #$08			ldx 	#IFR0 						; if result <> 0
.314e	20 66 33	jsr $3366			jsr 	IFloatCheckZero
.3151	f0 09		beq $315c			beq 	_IFIOutDigit
.3153	a5 0c		lda $0c				lda 	IFR1+IM0 					; save remainder LSB only
.3155	48		pha				pha
.3156	20 3a 31	jsr $313a			jsr 	_IFIRecursiveConvert 		; convert the divide result
.3159	68		pla				pla
.315a	85 0c		sta $0c				sta 	IFR1+IM0 					; restore remainder
.315c					_IFIOutDigit:
.315c	a5 0c		lda $0c				lda 	IFR1+IM0 					; get remainder.
.315e	c9 0a		cmp #$0a			cmp	 	#10 						; convert to hexadecimal.
.3160	90 02		bcc $3164			bcc 	_IFINotHex
.3162	69 06		adc #$06			adc 	#6
.3164					_IFINotHex:
.3164	69 30		adc #$30			adc 	#48
.3166	20 fd 33	jsr $33fd			jsr 	IFloatBufferWrite 			; write character to buffer.
.3169	60		rts				rts
.06df					IFBase:
>06df							.fill 	1
.316a					IFloatFloatToStringR0:
.316a	a2 10		ldx #$10			ldx 	#IFR2 						; copy R2 to stack,value to R2
.316c	20 bc 32	jsr $32bc			jsr 	IFloatPushRx
.316f	20 0f 33	jsr $330f			jsr 	IFloatCopyToRegister
.3172	20 6e 30	jsr $306e			jsr 	IFloatIntegerR0				; make R0 integer
.3175	a9 0a		lda #$0a			lda 	#10 						; base 10.
.3177	20 0f 31	jsr $310f			jsr 	IFloatIntegerToStringR0 	; do the integer part.
.317a	9c e0 06	stz $06e0			stz 	IFloatDecimalCount 			; zero the decimal count.
.317d	a5 13		lda $13				lda 	IFR2+IExp 					; if it is integer then exit
.317f	29 3f		and #$3f			and 	#IFXMask
.3181	f0 44		beq $31c7			beq 	_IFFSExit
.3183					_IFloatFracLoop:
.3183	a2 10		ldx #$10			ldx 	#IFR2 						; R0 = fractional part of R2
.3185	20 fe 32	jsr $32fe			jsr 	IFloatCopyFromRegister
.3188	20 18 30	jsr $3018			jsr 	IFloatFractionalR0
.318b	20 a4 33	jsr $33a4			jsr 	IFloatNormalise
.318e	a2 10		ldx #$10			ldx 	#IFR2
.3190	20 0f 33	jsr $330f			jsr 	IFloatCopyToRegister 		; copy to back R2
.3193	a2 10		ldx #$10			ldx 	#IFR2 						; set R2 to 10
.3195	a9 0a		lda #$0a			lda 	#10
.3197	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.319a	a2 10		ldx #$10			ldx 	#IFR2						; R0 = R2 * 10
.319c	20 0f 2e	jsr $2e0f			jsr 	IFloatMultiply
.319f	a2 10		ldx #$10			ldx 	#IFR2 						; copy back, float part next time.
.31a1	20 0f 33	jsr $330f			jsr 	IFloatCopyToRegister
.31a4	20 6e 30	jsr $306e			jsr 	IFloatIntegerR0 			; get integer part of R0 that's just been x 10.
.31a7	ad e0 06	lda $06e0			lda 	IFloatDecimalCount 			; done 3 dp, no more
.31aa	c9 03		cmp #$03			cmp 	#3
.31ac	f0 16		beq $31c4			beq 	_IFFSExitStripZero
.31ae	ad e0 06	lda $06e0			lda 	IFloatDecimalCount 			; written the DP yet , e.g. count of digits is not zero.
.31b1	d0 05		bne $31b8			bne 	_IFloatNotFirst
.31b3	a9 2e		lda #$2e			lda 	#"." 						; write decimal point
.31b5	20 fd 33	jsr $33fd			jsr 	IFloatBufferWrite
.31b8					_IFloatNotFirst:
.31b8	ee e0 06	inc $06e0			inc 	IFloatDecimalCount
.31bb	a5 08		lda $08				lda 	IFR0+IM0 					; get digit
.31bd	09 30		ora #$30			ora 	#"0"						; ASCII
.31bf	20 fd 33	jsr $33fd			jsr 	IFloatBufferWrite 			; write to the buffer.
.31c2	80 bf		bra $3183			bra 	_IFloatFracLoop
.31c4					_IFFSExitStripZero:
.31c4	20 0c 34	jsr $340c			jsr 	IFloatStripTrailingZeros
.31c7					_IFFSExit:
.31c7	a2 10		ldx #$10			ldx 	#IFR2 						; restore R2
.31c9	20 dd 32	jsr $32dd			jsr 	IFloatPullRx
.31cc	20 f5 33	jsr $33f5			jsr 	IFloatGetBufferAddress
.31cf	18		clc				clc
.31d0	60		rts				rts
.06e0					IFloatDecimalCount:
>06e0							.fill 	1
.31d1					IFloatStringToFloatR0:
.31d1	8d e1 06	sta $06e1			sta 	IFCount 					; save length and positions out.
.31d4	86 20		stx $20				stx 	iTemp0
.31d6	84 21		sty $21				sty 	iTemp0+1
.31d8	a2 08		ldx #$08			ldx 	#IFR0 						; reset the current value.
.31da	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.31dd	9c e2 06	stz $06e2			stz 	IFSignFlag 					; clear the sign flag
.31e0	20 6d 32	jsr $326d			jsr 	IFSTFGetNext 				; get first
.31e3	f0 1b		beq $3200			beq 	_IFSTFFail 					; no character, fail.
.31e5	90 10		bcc $31f7			bcc 	_IFSTFHaveChar 				; legitimate character, go do it.
.31e7	c9 2d		cmp #$2d			cmp 	#"-" 						; if not -, fail
.31e9	d0 15		bne $3200			bne 	_IFSTFFail
.31eb	a9 40		lda #$40			lda 	#IFSign 					; set sign flag
.31ed	8d e2 06	sta $06e2			sta 	IFSignFlag
.31f0					_IFSTFLoop:
.31f0	20 6d 32	jsr $326d			jsr 	IFSTFGetNext 				; get next character
.31f3	b0 0b		bcs $3200			bcs 	_IFSTFFail 					; bad character.
.31f5	f0 11		beq $3208			beq 	_IFSTFExit 					; end of data
.31f7					_IFSTFHaveChar:
.31f7	c9 2e		cmp #$2e			cmp 	#"."						; decimal point ? if so, do the decimal code.
.31f9	f0 08		beq $3203			beq 	_IFSTFDecimal
.31fb	20 91 32	jsr $3291			jsr 	IFSTFAddR0 					; add number in (R0 = R0 x 10 + A)
.31fe	80 f0		bra $31f0			bra 	_IFSTFLoop 					; keep going until . or end.
.3200					_IFSTFFail:
.3200	38		sec				sec
.3201	80 0d		bra $3210			bra 	_IFSTFReturn
.3203					_IFSTFDecimal:
.3203	20 18 32	jsr $3218			jsr 	IFSTFDecimal 				; call the decimal places code.
.3206	b0 08		bcs $3210			bcs 	_IFSTFReturn 				; error
.3208					_IFSTFExit:
.3208	a5 0b		lda $0b				lda 	IFR0+IExp 					; copy sign flag in.
.320a	0d e2 06	ora $06e2			ora 	IFSignFlag
.320d	85 0b		sta $0b				sta 	IFR0+IExp
.320f	18		clc				clc
.3210					_IFSTFReturn:
.3210	60		rts				rts
.3211					IFloatAddDecimalToR0:
.3211	8d e1 06	sta $06e1			sta 	IFCount 					; save it out.
.3214	86 20		stx $20				stx 	iTemp0
.3216	84 21		sty $21				sty 	iTemp0+1
.3218					IFSTFDecimal:
.3218	a2 08		ldx #$08			ldx 	#IFR0 						; push integer part on stack
.321a	20 bc 32	jsr $32bc			jsr 	IFloatPushRx
.321d	a2 08		ldx #$08			ldx 	#IFR0 						; R0 is the decimal digits so far, zero initially
.321f	20 6d 33	jsr $336d			jsr 	IFloatSetZero
.3222	9c e3 06	stz $06e3			stz 	IFDecimalPlaces 			; zero DP.
.3225					_IFSTDLoop:
.3225	20 6d 32	jsr $326d			jsr 	IFSTFGetNext 				; get next
.3228	b0 41		bcs $326b			bcs 	_IFSTFFail2 				; bad character.
.322a	f0 11		beq $323d			beq 	_IFSTFComplete 				; end of data, work out the result.
.322c	c9 2e		cmp #$2e			cmp 	#"."						; only one decimal
.322e	f0 39		beq $3269			beq 	_IFSTFExit2
.3230	20 91 32	jsr $3291			jsr 	IFSTFAddR0 					; add number in (e.g. R0=R0*10+A)
.3233	ee e3 06	inc $06e3			inc 	IFDecimalPlaces 			; count decimals
.3236	ad e3 06	lda $06e3			lda 	IFDecimalPlaces 			; no more than 3 DP used.
.3239	c9 03		cmp #$03			cmp 	#3
.323b	90 e8		bcc $3225			bcc 	_IFSTDLoop
.323d					_IFSTFComplete:
.323d	ad e3 06	lda $06e3			lda 	IFDecimalPlaces 			; decimals x 4 as accessing multiplier from a LUT.
.3240	f0 27		beq $3269			beq 	_IFSTFExit2					; if none, this is syntactically fine, just ignore
.3242	3a		dec a				dec 	a 							; table indexed from 1.
.3243	0a		asl a				asl 	a
.3244	0a		asl a				asl 	a
.3245	aa		tax				tax
.3246	bd a8 32	lda $32a8,x			lda 	TableTen,x 					; copy table entry into R0 - these are 0.1,0.01,0.001
.3249	85 0c		sta $0c				sta  	IFR1+IM0 					; 0.0001 etc, up to 5 decimals.
.324b	bd a9 32	lda $32a9,x			lda 	TableTen+1,x
.324e	85 0d		sta $0d				sta  	IFR1+IM1
.3250	bd aa 32	lda $32aa,x			lda 	TableTen+2,x
.3253	85 0e		sta $0e				sta  	IFR1+IM2
.3255	bd ab 32	lda $32ab,x			lda 	TableTen+3,x
.3258	85 0f		sta $0f				sta  	IFR1+IExp
.325a	a2 0c		ldx #$0c			ldx 	#IFR1 						; multiply into result
.325c	20 0f 2e	jsr $2e0f			jsr 	IFloatMultiply
.325f	a2 0c		ldx #$0c			ldx 	#IFR1  						; pop the integer part to R1
.3261	20 dd 32	jsr $32dd			jsr 	IFloatPullRx
.3264	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1 to R0
.3266	20 65 2d	jsr $2d65			jsr 	IFloatAdd
.3269					_IFSTFExit2:
.3269	18		clc				clc
.326a	60		rts				rts
.326b					_IFSTFFail2:
.326b	38		sec				sec
.326c	60		rts				rts
.326d					IFSTFGetNext:
.326d	ad e1 06	lda $06e1			lda 	IFCount  					; if count is zero, return with Z set.
.3270	f0 19		beq $328b			beq 	_IFSTFReturnOk
.3272	b2 20		lda ($20)			lda 	(iTemp0) 					; get next character
.3274	e6 20		inc $20				inc 	iTemp0 						; point at next.
.3276	d0 02		bne $327a			bne 	_IFSTFGNNoCarry
.3278	e6 21		inc $21				inc 	iTemp0+1
.327a					_IFSTFGNNoCarry:
.327a	ce e1 06	dec $06e1			dec 	IFCount 					; dec count.
.327d	c9 2e		cmp #$2e			cmp 	#"."	 					; check, dp is allowed.
.327f	f0 08		beq $3289			beq 	_IFSTFGOkay
.3281	c9 30		cmp #$30			cmp 	#"0"						; < 0 fail.
.3283	90 08		bcc $328d			bcc 	_IFSTFGFail
.3285	c9 3a		cmp #$3a			cmp 	#"9"+1 						; > 9 fail.
.3287	b0 04		bcs $328d			bcs 	_IFSTFGFail
.3289					_IFSTFGOkay:
.3289	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.328b					_IFSTFReturnOk:
.328b	18		clc				clc
.328c	60		rts				rts
.328d					_IFSTFGFail:
.328d	c9 00		cmp #$00			cmp 	#0 							; clears Z flag
.328f	38		sec				sec
.3290	60		rts				rts
.3291					IFSTFAddR0:
.3291	29 0f		and #$0f			and 	#15 						; to int value
.3293	48		pha				pha 								; save it.
.3294	a9 0a		lda #$0a			lda 	#10
.3296	a2 0c		ldx #$0c			ldx 	#IFR1
.3298	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.329b	20 0f 2e	jsr $2e0f			jsr 	IFloatMultiply
.329e	68		pla				pla
.329f	a2 0c		ldx #$0c			ldx 	#IFR1
.32a1	20 6f 33	jsr $336f			jsr 	IFloatSetByte
.32a4	20 65 2d	jsr $2d65			jsr 	IFloatAdd
.32a7	60		rts				rts
.06e1					IFCount:
>06e1							.fill 	1
.06e2					IFSignFlag:
>06e2							.fill 	1
.06e3					IFDecimalPlaces:
>06e3							.fill 	1
.32a8					TableTen:
>32a8	9a 19 00 30				.byte	$9a,$19,$00,$30 ; 0.10001
>32ac	8f 02 00 30				.byte	$8f,$02,$00,$30 ; 0.00999
>32b0	42 00 00 30				.byte	$42,$00,$00,$30 ; 0.00101
>32b4	07 00 00 30				.byte	$07,$00,$00,$30 ; 0.00011
>32b8	01 00 00 30				.byte	$01,$00,$00,$30 ; 2e-05
.32bc					IFloatPushRx:
.32bc	5a		phy				phy
.32bd	ac e4 06	ldy $06e4			ldy 	IFStackIndex 				; push IM0,1,2,Exp on the stack
.32c0	b5 00		lda $00,x			lda 	IM0,x
.32c2	99 e5 06	sta $06e5,y			sta 	IFStack,y
.32c5	b5 01		lda $01,x			lda 	IM1,x
.32c7	99 e6 06	sta $06e6,y			sta 	IFStack+1,y
.32ca	b5 02		lda $02,x			lda 	IM2,x
.32cc	99 e7 06	sta $06e7,y			sta 	IFStack+2,y
.32cf	b5 03		lda $03,x			lda 	IExp,x
.32d1	99 e8 06	sta $06e8,y			sta 	IFStack+3,y
.32d4	c8		iny				iny
.32d5	c8		iny				iny
.32d6	c8		iny				iny
.32d7	c8		iny				iny
.32d8	8c e4 06	sty $06e4			sty 	IFStackIndex 				; update SP
.32db	7a		ply				ply
.32dc	60		rts				rts
.32dd					IFloatPullRx:
.32dd	5a		phy				phy
.32de	ac e4 06	ldy $06e4			ldy 	IFStackIndex	 			; decrement SP
.32e1	88		dey				dey
.32e2	88		dey				dey
.32e3	88		dey				dey
.32e4	88		dey				dey
.32e5	b9 e5 06	lda $06e5,y			lda 	IFStack,y 					; pop IM0,1,2,Exp off stack
.32e8	95 00		sta $00,x			sta 	IM0,x
.32ea	b9 e6 06	lda $06e6,y			lda 	IFStack+1,y
.32ed	95 01		sta $01,x			sta 	IM1,x
.32ef	b9 e7 06	lda $06e7,y			lda 	IFStack+2,y
.32f2	95 02		sta $02,x			sta 	IM2,x
.32f4	b9 e8 06	lda $06e8,y			lda 	IFStack+3,y
.32f7	95 03		sta $03,x			sta 	IExp,x
.32f9	8c e4 06	sty $06e4			sty 	IFStackIndex 				; update SP
.32fc	7a		ply				ply
.32fd	60		rts				rts
.06e4					IFStackIndex:
>06e4							.fill 	1
.06e5					IFStack:
>06e5							.fill 	16*4
.32fe					IFloatCopyFromRegister:
.32fe	b5 00		lda $00,x			lda 	0,x
.3300	85 08		sta $08				sta 	IFR0
.3302	b5 01		lda $01,x			lda 	1,x
.3304	85 09		sta $09				sta 	IFR0+1
.3306	b5 02		lda $02,x			lda 	2,x
.3308	85 0a		sta $0a				sta 	IFR0+2
.330a	b5 03		lda $03,x			lda 	3,x
.330c	85 0b		sta $0b				sta 	IFR0+3
.330e	60		rts				rts
.330f					IFloatCopyToRegister:
.330f	a5 08		lda $08				lda 	IFR0
.3311	95 00		sta $00,x			sta 	0,x
.3313	a5 09		lda $09				lda 	IFR0+1
.3315	95 01		sta $01,x			sta 	1,x
.3317	a5 0a		lda $0a				lda 	IFR0+2
.3319	95 02		sta $02,x			sta 	2,x
.331b	a5 0b		lda $0b				lda 	IFR0+3
.331d	95 03		sta $03,x			sta 	3,x
.331f	60		rts				rts
.3320					IFloatLoadInline:
.3320	68		pla				pla 								; pop address off to iTemp0
.3321	85 20		sta $20				sta 	iTemp0
.3323	68		pla				pla
.3324	85 21		sta $21				sta 	iTemp0+1
.3326	a0 01		ldy #$01			ldy 	#1
.3328	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 0
.332a	95 00		sta $00,x			sta 	0,x
.332c	c8		iny				iny
.332d	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 1
.332f	95 01		sta $01,x			sta 	1,x
.3331	c8		iny				iny
.3332	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 2
.3334	95 02		sta $02,x			sta 	2,x
.3336	c8		iny				iny
.3337	b1 20		lda ($20),y			lda 	(iTemp0),y 					; copy byte 3
.3339	95 03		sta $03,x			sta 	3,x
.333b	18		clc				clc 								; inc pointer, 1 for return, 4 for data
.333c	a5 20		lda $20				lda 	iTemp0
.333e	69 05		adc #$05			adc 	#5
.3340	85 20		sta $20				sta 	iTemp0
.3342	90 02		bcc $3346			bcc 	_IFLINoCarry
.3344	e6 21		inc $21				inc 	iTemp0+1
.3346					_IFLINoCarry:
.3346	6c 20 00	jmp ($0020)			jmp 	(iTemp0)					; effectively RTS
.3349					IFloatMultiply8BitRx:
.3349	5a		phy		        phy
.334a	b5 00		lda $00,x	        lda     IM0,x                       ; AY are the two values
.334c	a4 08		ldy $08		        ldy     IFR0+IM0
.334e	4a		lsr a		        lsr     a                           ; prime the carry bit for the loop
.334f	85 08		sta $08		        sta     IFR0+IM0
.3351	84 09		sty $09		        sty     IFR0+IM1
.3353	a9 00		lda #$00	        lda     #0
.3355	a0 08		ldy #$08	        ldy     #8
.3357					_IFMLoop:
.3357	90 03		bcc $335c	        bcc     _IFMNoAdd
.3359	18		clc		        clc
.335a	65 09		adc $09		        adc     IFR0+IM1
.335c					_IFMNoAdd:
.335c	6a		ror a		        ror     a
.335d	66 08		ror $08		        ror     IFR0+IM0                    ; pull another bit out for the next iteration
.335f	88		dey		        dey
.3360	d0 f5		bne $3357	        bne     _IFMLoop
.3362	85 09		sta $09		        sta     IFR0+IM1                    ; write MSB out
.3364	7a		ply		        ply
.3365	60		rts		        rts
.3366					IFloatCheckZero:
.3366	b5 00		lda $00,x			lda 	IM0,x 						; or together mantissa bytes.
.3368	15 01		ora $01,x			ora 	IM1,x
.336a	15 02		ora $02,x			ora 	IM2,x
.336c	60		rts				rts
.336d					IFloatSetZero:
.336d	a9 00		lda #$00			lda 	#0
.336f					IFloatSetByte:
.336f	95 00		sta $00,x			sta 	IM0,x 						; set mantissa to 00:A
.3371	74 01		stz $01,x			stz 	IM1,x
.3373	74 02		stz $02,x			stz 	IM2,x
.3375	74 03		stz $03,x			stz 	IExp,x 						; zero the exponent.
.3377	60		rts				rts
.3378					IFloatNegate:
.3378	b5 03		lda $03,x			lda 	IExp,x 						; toggle the sign bit.
.337a	49 40		eor #$40			eor 	#IFSign
.337c	95 03		sta $03,x			sta 	IExp,x
.337e	18		clc				clc
.337f	60		rts				rts
.3380					IFloatMantissaNegate:
.3380	38		sec				sec 								; when you want a real 2's complement negative value.
.3381	a9 00		lda #$00			lda 	#0
.3383	f5 00		sbc $00,x			sbc 	IM0,x
.3385	95 00		sta $00,x			sta 	IM0,x
.3387	a9 00		lda #$00			lda 	#0
.3389	f5 01		sbc $01,x			sbc 	IM1,x
.338b	95 01		sta $01,x			sta 	IM1,x
.338d	a9 00		lda #$00			lda 	#0
.338f	f5 02		sbc $02,x			sbc 	IM2,x
.3391	95 02		sta $02,x			sta 	IM2,x
.3393	60		rts				rts
.3394					IFloatShiftLeft:
.3394	18		clc				clc
.3395					IFloatRotateLeft:
.3395	36 00		rol $00,x			rol 	IM0,x
.3397	36 01		rol $01,x			rol 	IM1,x
.3399	36 02		rol $02,x			rol 	IM2,x
.339b	60		rts				rts
.339c					IFloatShiftRight:
.339c	18		clc				clc
.339d					IFloatRotateRight:
.339d	76 02		ror $02,x			ror 	IM2,x
.339f	76 01		ror $01,x			ror 	IM1,x
.33a1	76 00		ror $00,x			ror 	IM0,x
.33a3	60		rts				rts
.33a4					IFloatNormalise:
.33a4	20 66 33	jsr $3366			jsr 	IFloatCheckZero 			; is it zero
.33a7	f0 18		beq $33c1			beq 	_IFNExitZero 				; if so exit
.33a9					_IFNLoop:
.33a9	b5 02		lda $02,x			lda 	IM2,x 						; is it normalised e.g. bits 7/6 are 01
.33ab	29 c0		and #$c0			and 	#$C0
.33ad	c9 40		cmp #$40			cmp 	#$40
.33af	f0 13		beq $33c4			beq 	_IFNExitOkay 				; if so , then we are done.
.33b1	b5 03		lda $03,x			lda 	IExp,x 						; check exponent is not -32 already.
.33b3	29 3f		and #$3f			and 	#$3F
.33b5	c9 20		cmp #$20			cmp 	#$20
.33b7	f0 0b		beq $33c4			beq 	_IFNExitOkay 				; if so, then we cannot normalise any more.
.33b9	20 da 33	jsr $33da			jsr 	IFloatDecExponent
.33bc	20 94 33	jsr $3394			jsr 	IFloatShiftLeft 			; shift mantissa left, e.g. multiply by 2
.33bf	80 e8		bra $33a9			bra 	_IFNLoop
.33c1					_IFNExitZero:
.33c1	20 6d 33	jsr $336d			jsr 	IFloatSetZero 				; set the result to zero
.33c4					_IFNExitOkay:
.33c4	18		clc				clc  								; return with CC.
.33c5	60		rts				rts
.33c6					IFloatIncExponent:
.33c6	b5 03		lda $03,x			lda 	IExp,x
.33c8	48		pha				pha
.33c9	29 c0		and #$c0			and 	#$C0
.33cb	8d 25 07	sta $0725			sta 	IFXTemp
.33ce	68		pla				pla
.33cf	1a		inc a				inc 	a
.33d0	29 3f		and #$3f			and 	#$3F
.33d2	48		pha				pha
.33d3	0d 25 07	ora $0725			ora 	IFXTemp
.33d6	95 03		sta $03,x			sta 	IExp,x
.33d8	68		pla				pla
.33d9	60		rts				rts
.33da					IFloatDecExponent:
.33da	b5 03		lda $03,x			lda 	IExp,x
.33dc	48		pha				pha
.33dd	29 c0		and #$c0			and 	#$C0
.33df	8d 25 07	sta $0725			sta 	IFXTemp
.33e2	68		pla				pla
.33e3	3a		dec a				dec 	a
.33e4	29 3f		and #$3f			and 	#$3F
.33e6	48		pha				pha
.33e7	0d 25 07	ora $0725			ora 	IFXTemp
.33ea	95 03		sta $03,x			sta 	IExp,x
.33ec	68		pla				pla
.33ed	60		rts				rts
.0725					IFXTemp:
>0725							.fill 	1
.33ee					IFloatBufferReset:
.33ee	9c 26 07	stz $0726			stz 	IFBufferCount
.33f1	9c 27 07	stz $0727			stz 	IFBuffer
.33f4	60		rts				rts
.33f5					IFloatGetBufferAddress:
.33f5	a0 07		ldy #$07			ldy 	#(IFBufferCount >> 8)
.33f7	a2 26		ldx #$26			ldx 	#(IFBufferCount & $FF)
.33f9	ad 26 07	lda $0726			lda 	IFBufferCount
.33fc	60		rts				rts
.33fd					IFloatBufferWrite:
.33fd	da		phx				phx
.33fe	ae 26 07	ldx $0726			ldx 	IFBufferCount
.3401	9d 27 07	sta $0727,x			sta 	IFBuffer,x
.3404	9e 28 07	stz $0728,x			stz 	IFBuffer+1,x
.3407	ee 26 07	inc $0726			inc 	IFBufferCount
.340a	fa		plx				plx
.340b	60		rts				rts
.340c					IFloatStripTrailingZeros:
.340c	ae 26 07	ldx $0726			ldx 	IFBufferCount
.340f	bd 26 07	lda $0726,x			lda 	IFBuffer-1,x
.3412	c9 30		cmp #$30			cmp		#"0"
.3414	d0 0f		bne $3425			bne 	_IFSTExit
.3416	bd 25 07	lda $0725,x			lda 	IFBuffer-2,x
.3419	c9 2e		cmp #$2e			cmp 	#"."
.341b	f0 08		beq $3425			beq 	_IFSTExit
.341d	ce 26 07	dec $0726			dec 	IFBufferCount
.3420	9e 26 07	stz $0726,x			stz 	IFBuffer-1,x
.3423	80 e7		bra $340c			bra 	IFloatStripTrailingZeros
.3425					_IFSTExit:
.3425	60		rts				rts
.0726					IFBufferCount:
>0726							.fill 	1
.0727					IFBuffer:
>0727							.fill 	25
.3426					IFloatCheckRange:
.3426	a5 0b		lda $0b				lda 	IFR0+IExp					; force it negative e.g. -|R0|
.3428	09 40		ora #$40			ora 	#IFSign
.342a	85 0b		sta $0b				sta 	IFR0+IExp
.342c	a2 0c		ldx #$0c			ldx 	#IFR1 						; add R1.
.342e	20 65 2d	jsr $2d65			jsr 	IFloatAdd 					; add allowed to error.
.3431	a2 08		ldx #$08			ldx 	#IFR0
.3433	20 66 33	jsr $3366			jsr 	IFloatCheckZero 			; error if < 0
.3436	f0 06		beq $343e			beq 	_IFAOkay
.3438	a5 0b		lda $0b				lda 	IFR0+IExp
.343a	29 40		and #$40			and 	#IFSign
.343c	d0 01		bne $343f			bne 	_IFAFail
.343e					_IFAOkay:
.343e	60		rts				rts
.343f					_IFAFail:
.343f	38		sec				sec
.3440	68		pla				pla 								; get address - 2
.3441	e9 02		sbc #$02			sbc 	#2
.3443	aa		tax				tax
.3444	68		pla				pla
.3445	e9 00		sbc #$00			sbc 	#0
.3447	a8		tay				tay
.3448	a9 aa		lda #$aa			lda 	#$AA 						; sign assert
.344a					_IFAStop:
>344a	db						.byte 	$DB 						; display an error AA ADR ADR
.344b	80 fd		bra $344a			bra 	_IFAStop

;******  Return to file: basic.asm


;******  End of listing
